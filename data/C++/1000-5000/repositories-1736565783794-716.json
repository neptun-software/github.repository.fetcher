{
  "metadata": {
    "timestamp": 1736565783794,
    "page": 716,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "richgel999/miniz",
      "stars": 2276,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 1.4091796875,
          "content": "#\n# http://clang.llvm.org/docs/ClangFormatStyleOptions.html\n#\nAccessModifierOffset: -4\nConstructorInitializerIndentWidth: 4\nAlignEscapedNewlinesLeft: false\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakTemplateDeclarations: false\nAlwaysBreakBeforeMultilineStrings: false\nBreakBeforeBinaryOperators: false\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBinPackParameters: true\nColumnLimit:     0\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nDerivePointerBinding: false\nExperimentalAutoDetectBinPacking: false\nIndentCaseLabels: true\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: All\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakBeforeFirstCallParameter: 19\nPenaltyBreakComment: 60\nPenaltyBreakString: 1000\nPenaltyBreakFirstLessLess: 120\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 60\nPointerBindsToType: false\nSpacesBeforeTrailingComments: 1\nCpp11BracedListStyle: false\nStandard:        Cpp03\nIndentWidth:     4\nTabWidth:        4\nUseTab:          Never\nBreakBeforeBraces: Allman\nIndentFunctionDeclarationAfterType: false\nSpacesInParentheses: false\nSpacesInAngles:  false\nSpaceInEmptyParentheses: false\nSpacesInCStyleCastParentheses: false\nSpaceAfterControlStatementKeyword: true\nSpaceBeforeAssignmentOperators: true\nContinuationIndentWidth: 4\nSortIncludes: false"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.029296875,
          "content": "/_build\r\n/amalgamation\r\n/bin\r\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.0380859375,
          "content": "language: c\r\nscript: bash amalgamate.sh"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 12.876953125,
          "content": "cmake_minimum_required(VERSION 3.5)\n\n# determine whether this is a standalone project or included by other projects\nset (MINIZ_STANDALONE_PROJECT ON)\nif(DEFINED PROJECT_NAME)\n  set(MINIZ_STANDALONE_PROJECT OFF)\nendif()\n\nif(CMAKE_MINOR_VERSION LESS 12)\n  project(miniz)\n  # see issue https://gitlab.kitware.com/cmake/cmake/merge_requests/1799\nelse()\n  project(miniz)\n  set(CMAKE_C_STANDARD 90)\n  set(CMAKE_VERBOSE_MAKEFILE ON)\n  # set(CMAKE_C_VISIBILITY_PRESET hidden)\n  # set(CMAKE_VISIBILITY_INLINES_HIDDEN YES)\n\n  if (MSVC)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /W3 /Zi /permissive-\")\n  else ()\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wshadow -Wformat=2 -Wall -Wno-overlength-strings -pedantic\")\n  endif ()\nendif()\n\nset(MINIZ_API_VERSION 3)\nset(MINIZ_MINOR_VERSION 0)\nset(MINIZ_PATCH_VERSION 2)\nset(MINIZ_VERSION\n    ${MINIZ_API_VERSION}.${MINIZ_MINOR_VERSION}.${MINIZ_PATCH_VERSION})\n\nif(CMAKE_BUILD_TYPE STREQUAL \"\")\n  # CMake defaults to leaving CMAKE_BUILD_TYPE empty. This screws up\n  # differentiation between debug and release builds.\n  set(CMAKE_BUILD_TYPE \"Release\" CACHE STRING\n    \"Choose the type of build, options are: None (CMAKE_CXX_FLAGS or \\\nCMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel.\" FORCE)\nendif ()\n\noption(BUILD_EXAMPLES \"Build examples\" ${MINIZ_STANDALONE_PROJECT})\noption(BUILD_FUZZERS \"Build fuzz targets\" OFF)\noption(AMALGAMATE_SOURCES \"Amalgamate sources into miniz.h/c\" OFF)\noption(BUILD_HEADER_ONLY \"Build a header-only version\" OFF)\noption(BUILD_SHARED_LIBS \"Build shared library instead of static\" OFF)\noption(BUILD_NO_STDIO\" Build a without stdio version\" OFF)\noption(BUILD_TESTS \"Build tests\" ${MINIZ_STANDALONE_PROJECT})\noption(INSTALL_PROJECT \"Install project\" ${MINIZ_STANDALONE_PROJECT})\n\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/bin)\n\nif(INSTALL_PROJECT)\n  include(GNUInstallDirs)\nendif()\n\nif(BUILD_HEADER_ONLY)\n  set(AMALGAMATE_SOURCES ON CACHE BOOL \"Build a header-only version\" FORCE)\nendif(BUILD_HEADER_ONLY)\n\nif(AMALGAMATE_SOURCES)\n  # Amalgamate\n  file(COPY miniz.h DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/amalgamation/)\n  file(READ miniz.h MINIZ_H)\n  file(READ miniz_common.h MINIZ_COMMON_H)\n  file(READ miniz_tdef.h MINIZ_TDEF_H)\n  file(READ miniz_tinfl.h MINIZ_TINFL_H)\n  file(READ miniz_zip.h MINIZ_ZIP_H)\n  file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/amalgamation/miniz.h\n     \"${MINIZ_COMMON_H} ${MINIZ_TDEF_H} ${MINIZ_TINFL_H} ${MINIZ_ZIP_H}\")\n\n  file(COPY miniz.c DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/amalgamation/)\n  file(READ miniz_tdef.c MINIZ_TDEF_C)\n  file(READ miniz_tinfl.c MINIZ_TINFL_C)\n  file(READ miniz_zip.c MINIZ_ZIP_C)\n  file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/amalgamation/miniz.c\n     \"${MINIZ_TDEF_C} ${MINIZ_TINFL_C} ${MINIZ_ZIP_C}\")\n\n  file(READ ${CMAKE_CURRENT_BINARY_DIR}/amalgamation/miniz.h AMAL_MINIZ_H)\n  file(READ ${CMAKE_CURRENT_BINARY_DIR}/amalgamation/miniz.c AMAL_MINIZ_C)\n  foreach(REPLACE_STRING miniz;miniz_common;miniz_tdef;miniz_tinfl;miniz_zip;miniz_export)\n    string(REPLACE \"#include \\\"${REPLACE_STRING}.h\\\"\" \"\" AMAL_MINIZ_H \"${AMAL_MINIZ_H}\")\n    string(REPLACE \"#include \\\"${REPLACE_STRING}.h\\\"\" \"\" AMAL_MINIZ_C \"${AMAL_MINIZ_C}\")\n  endforeach()\n  string(CONCAT AMAL_MINIZ_H \"#ifndef MINIZ_EXPORT\\n#define MINIZ_EXPORT\\n#endif\\n\" \"${AMAL_MINIZ_H}\")\n  if(BUILD_HEADER_ONLY)\n    string(CONCAT AMAL_MINIZ_H \"${AMAL_MINIZ_H}\" \"\\n#ifndef MINIZ_HEADER_FILE_ONLY\\n\"\n             \"${AMAL_MINIZ_C}\" \"\\n#endif // MINIZ_HEADER_FILE_ONLY\\n\")\n    file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/amalgamation/miniz.h \"${AMAL_MINIZ_H}\")\n    add_library(${PROJECT_NAME} INTERFACE)\n\n    # Might not be a good idea to force this on the library user\n    # as it could bloat the global namespace\n    # https://github.com/libevent/libevent/issues/460\n    # target_compile_definitions(${PROJECT_NAME}\n    #     INTERFACE $<$<C_COMPILER_ID:GNU>:_GNU_SOURCE>)\n\n    set_property(TARGET ${PROJECT_NAME} APPEND\n      PROPERTY INTERFACE_INCLUDE_DIRECTORIES\n      $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/amalgamation>\n      $<INSTALL_INTERFACE:include>\n    )\n  else(BUILD_HEADER_ONLY)\n    string(CONCAT AMAL_MINIZ_C \"#include \\\"miniz.h\\\"\\n\" \"${AMAL_MINIZ_C}\")\n    file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/amalgamation/miniz.h \"${AMAL_MINIZ_H}\")\n    file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/amalgamation/miniz.c \"${AMAL_MINIZ_C}\")\n    set(miniz_SOURCE ${CMAKE_CURRENT_BINARY_DIR}/amalgamation/miniz.h\n                     ${CMAKE_CURRENT_BINARY_DIR}/amalgamation/miniz.c)\n    add_library(${PROJECT_NAME} STATIC ${miniz_SOURCE})\n    target_include_directories(${PROJECT_NAME} PUBLIC\n      $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/amalgamation>\n      $<INSTALL_INTERFACE:include>\n    )\n  endif(BUILD_HEADER_ONLY)\n\n  set(INSTALL_HEADERS ${CMAKE_CURRENT_BINARY_DIR}/amalgamation/miniz.h)\n\n  file(GLOB_RECURSE ZIP_FILES RELATIVE \"${CMAKE_CURRENT_BINARY_DIR}/amalgamation\" \"${CMAKE_CURRENT_BINARY_DIR}/amalgamation/*\")\n  file(GLOB_RECURSE ZIP_FILES2 RELATIVE \"${CMAKE_SOURCE_DIR}\" \"${CMAKE_SOURCE_DIR}/examples/*\")\n  list(APPEND ZIP_FILES ${ZIP_FILES2})\n  list(APPEND ZIP_FILES \"ChangeLog.md\")\n  list(APPEND ZIP_FILES \"readme.md\")\n  list(APPEND ZIP_FILES \"LICENSE\")\n  set(ZIP_OUT_FN \"${CMAKE_CURRENT_BINARY_DIR}/miniz-${MINIZ_VERSION}.zip\")\n  message(STATUS \"Zip files: ${ZIP_FILES}\")\n  add_custom_command(\n\t\tCOMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/examples ${CMAKE_CURRENT_BINARY_DIR}/amalgamation/examples\n\t\tCOMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/ChangeLog.md ${CMAKE_CURRENT_BINARY_DIR}/amalgamation/ChangeLog.md\n\t\tCOMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/readme.md ${CMAKE_CURRENT_BINARY_DIR}/amalgamation/readme.md\n\t\tCOMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/LICENSE ${CMAKE_CURRENT_BINARY_DIR}/amalgamation/LICENSE\n\t\tCOMMAND ${CMAKE_COMMAND} -E tar \"cf\" \"${ZIP_OUT_FN}\" --format=zip -- ${ZIP_FILES}\n        WORKING_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/amalgamation\"\n        OUTPUT  \"${ZIP_OUT_FN}\"\n        DEPENDS ${ZIP_FILES}\n        COMMENT \"Zipping to ${CMAKE_CURRENT_BINARY_DIR}/miniz.zip.\"\n    )\n\n\tadd_custom_target(\n\t  create_zip ALL\n\t  DEPENDS \"${ZIP_OUT_FN}\"\n\t)\nelse(AMALGAMATE_SOURCES)\n  include(GenerateExportHeader)\n  set(miniz_SOURCE miniz.c miniz_zip.c miniz_tinfl.c miniz_tdef.c)\n  add_library(${PROJECT_NAME} ${miniz_SOURCE})\n  generate_export_header(${PROJECT_NAME})\n\n  if(NOT BUILD_SHARED_LIBS)\n    string(TOUPPER ${PROJECT_NAME} PROJECT_UPPER)\n    set_target_properties(${PROJECT_NAME}\n        PROPERTIES INTERFACE_COMPILE_DEFINITIONS ${PROJECT_UPPER}_STATIC_DEFINE)\n  else()\n    set_property(TARGET ${PROJECT_NAME} PROPERTY C_VISIBILITY_PRESET hidden)\n  endif()\n\n  set_property(TARGET ${PROJECT_NAME} PROPERTY VERSION ${MINIZ_VERSION})\n  set_property(TARGET ${PROJECT_NAME} PROPERTY SOVERSION ${MINIZ_API_VERSION})\n\n  target_include_directories(${PROJECT_NAME} PUBLIC\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>\n    $<INSTALL_INTERFACE:include>\n  )\n\n  file(GLOB INSTALL_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/*.h)\n  list(APPEND\n       INSTALL_HEADERS ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}_export.h)\nendif(AMALGAMATE_SOURCES)\n\nif(NOT BUILD_HEADER_ONLY)\n  target_compile_definitions(${PROJECT_NAME}\n    PRIVATE $<$<C_COMPILER_ID:GNU>:_GNU_SOURCE>)\n\n  # pkg-config file\n  configure_file(miniz.pc.in ${CMAKE_CURRENT_BINARY_DIR}/miniz.pc @ONLY)\n\n  if(INSTALL_PROJECT)\n    install(FILES\n      ${CMAKE_CURRENT_BINARY_DIR}/miniz.pc\n      DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)\n  endif()\nendif()\n\nif(BUILD_NO_STDIO)\n  target_compile_definitions(${PROJECT_NAME} PRIVATE MINIZ_NO_STDIO)\nendif()\n\nset_property(TARGET ${PROJECT_NAME} PROPERTY\n  INTERFACE_${PROJECT_NAME}_MAJOR_VERSION ${MINIZ_API_VERSION})\nset_property(TARGET ${PROJECT_NAME} APPEND PROPERTY\n  COMPATIBLE_INTERFACE_STRING ${PROJECT_NAME}_MAJOR_VERSION\n)\n\nif(INSTALL_PROJECT)\n  install(TARGETS ${PROJECT_NAME} EXPORT ${PROJECT_NAME}Targets\n    RUNTIME  DESTINATION ${CMAKE_INSTALL_BINDIR}\n    ARCHIVE  DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    LIBRARY  DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    # users can use <miniz.h> or <miniz/miniz.h>\n    INCLUDES DESTINATION include ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}\n  )\n\n  include(CMakePackageConfigHelpers)\n  write_basic_package_version_file(\n    \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME}ConfigVersion.cmake\"\n    VERSION ${MINIZ_VERSION}\n    COMPATIBILITY AnyNewerVersion\n  )\n\n  export(EXPORT ${PROJECT_NAME}Targets\n    FILE \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME}Targets.cmake\"\n    NAMESPACE ${PROJECT_NAME}::\n  )\n  configure_file(Config.cmake.in\n    \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME}Config.cmake\"\n    @ONLY\n  )\n\n  set(ConfigPackageLocation ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})\n  install(EXPORT ${PROJECT_NAME}Targets\n    FILE\n      ${PROJECT_NAME}Targets.cmake\n    NAMESPACE\n      ${PROJECT_NAME}::\n    DESTINATION\n      ${ConfigPackageLocation}\n  )\n  install(\n    FILES\n      \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME}Config.cmake\"\n      \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME}ConfigVersion.cmake\"\n    DESTINATION\n      ${ConfigPackageLocation}\n    COMPONENT\n      Devel\n  )\nendif()\n\nif(BUILD_EXAMPLES)\n  set(EXAMPLE1_SRC_LIST \"${CMAKE_CURRENT_SOURCE_DIR}/examples/example1.c\")\n  set(EXAMPLE2_SRC_LIST \"${CMAKE_CURRENT_SOURCE_DIR}/examples/example2.c\")\n  set(EXAMPLE3_SRC_LIST \"${CMAKE_CURRENT_SOURCE_DIR}/examples/example3.c\")\n  set(EXAMPLE4_SRC_LIST \"${CMAKE_CURRENT_SOURCE_DIR}/examples/example4.c\")\n  set(EXAMPLE5_SRC_LIST \"${CMAKE_CURRENT_SOURCE_DIR}/examples/example5.c\")\n  set(EXAMPLE6_SRC_LIST \"${CMAKE_CURRENT_SOURCE_DIR}/examples/example6.c\")\n  set(MINIZ_TESTER_SRC_LIST\n      \"${CMAKE_CURRENT_SOURCE_DIR}/tests/miniz_tester.cpp\"\n      \"${CMAKE_CURRENT_SOURCE_DIR}/tests/timer.cpp\")\n\n  add_executable(example1 ${EXAMPLE1_SRC_LIST})\n  target_link_libraries(example1 miniz)\n  if(NOT BUILD_NO_STDIO)\n    add_executable(example2 ${EXAMPLE2_SRC_LIST})\n    target_link_libraries(example2 miniz)\n  endif()\n  add_executable(example3 ${EXAMPLE3_SRC_LIST})\n  target_link_libraries(example3 miniz)\n  add_executable(example4 ${EXAMPLE4_SRC_LIST})\n  target_link_libraries(example4 miniz)\n  add_executable(example5 ${EXAMPLE5_SRC_LIST})\n  target_link_libraries(example5 miniz)\n  add_executable(example6 ${EXAMPLE6_SRC_LIST})\n  target_link_libraries(example6 miniz)\n  if(${UNIX})\n      target_link_libraries(example6 m)\n  endif()\n\n  # add_executable(miniz_tester ${MINIZ_TESTER_SRC_LIST})\n  # target_link_libraries(miniz_tester miniz)\nendif(BUILD_EXAMPLES)\n\nif(BUILD_FUZZERS)\n  set(FUZZ_MAIN_SRC \"${CMAKE_CURRENT_SOURCE_DIR}/tests/fuzz_main.c\")\n\n  set(CHECKSUM_FUZZER_SRC_LIST \"${FUZZ_MAIN_SRC}\" \"${CMAKE_CURRENT_SOURCE_DIR}/tests/checksum_fuzzer.c\")\n  set(FLUSH_FUZZER_SRC_LIST \"${FUZZ_MAIN_SRC}\" \"${CMAKE_CURRENT_SOURCE_DIR}/tests/flush_fuzzer.c\")\n  set(UNCOMPRESS_FUZZER_SRC_LIST \"${FUZZ_MAIN_SRC}\" \"${CMAKE_CURRENT_SOURCE_DIR}/tests/uncompress_fuzzer.c\")\n  set(UNCOMPRESS2_FUZZER_SRC_LIST \"${FUZZ_MAIN_SRC}\" \"${CMAKE_CURRENT_SOURCE_DIR}/tests/uncompress2_fuzzer.c\")\n  set(COMPRESS_FUZZER_SRC_LIST \"${FUZZ_MAIN_SRC}\" \"${CMAKE_CURRENT_SOURCE_DIR}/tests/compress_fuzzer.c\")\n  set(SMALL_FUZZER_SRC_LIST \"${FUZZ_MAIN_SRC}\" \"${CMAKE_CURRENT_SOURCE_DIR}/tests/small_fuzzer.c\")\n  set(LARGE_FUZZER_SRC_LIST \"${FUZZ_MAIN_SRC}\" \"${CMAKE_CURRENT_SOURCE_DIR}/tests/large_fuzzer.c\")\n  set(ZIP_FUZZER_SRC_LIST \"${FUZZ_MAIN_SRC}\" \"${CMAKE_CURRENT_SOURCE_DIR}/tests/zip_fuzzer.c\")\n  set(ADD_IN_PLACE_FUZZER_SRC_LIST \"${FUZZ_MAIN_SRC}\" \"${CMAKE_CURRENT_SOURCE_DIR}/tests/add_in_place_fuzzer.c\")\n\n  add_executable(checksum_fuzzer ${CHECKSUM_FUZZER_SRC_LIST})\n  target_link_libraries(checksum_fuzzer miniz)\n\n  add_executable(flush_fuzzer ${FLUSH_FUZZER_SRC_LIST})\n  target_link_libraries(flush_fuzzer miniz)\n\n  add_executable(uncompress_fuzzer ${UNCOMPRESS_FUZZER_SRC_LIST})\n  target_link_libraries(uncompress_fuzzer miniz)\n\n  add_executable(uncompress2_fuzzer ${UNCOMPRESS2_FUZZER_SRC_LIST})\n  target_link_libraries(uncompress2_fuzzer miniz)\n\n  add_executable(compress_fuzzer ${COMPRESS_FUZZER_SRC_LIST})\n  target_link_libraries(compress_fuzzer miniz)\n\n  add_executable(small_fuzzer ${SMALL_FUZZER_SRC_LIST})\n  target_link_libraries(small_fuzzer miniz)\n\n  add_executable(large_fuzzer ${LARGE_FUZZER_SRC_LIST})\n  target_link_libraries(large_fuzzer miniz)\n\n  add_executable(zip_fuzzer ${ZIP_FUZZER_SRC_LIST})\n  target_link_libraries(zip_fuzzer miniz)\n\n  add_executable(add_in_place_fuzzer ${ADD_IN_PLACE_FUZZER_SRC_LIST})\n  target_link_libraries(add_in_place_fuzzer miniz)\nendif()\n\nif(BUILD_TESTS)\n  set(CMAKE_CXX_STANDARD 20)\n  set(CMAKE_CXX_STANDARD_REQUIRED YES)\n\n  add_executable(catch_tests tests/main.cpp tests/catch_amalgamated.cpp)\n  if(BUILD_NO_STDIO)\n    target_compile_definitions(catch_tests PRIVATE -DMINIZ_NO_STDIO)\n  endif()\n  target_link_libraries(catch_tests miniz)\n\n  enable_testing()\n\n  add_test(NAME catch_tests COMMAND $<TARGET_FILE:catch_tests>)\nendif()\n\nset(INCLUDE_INSTALL_DIR \"include\")\n\nif(INSTALL_PROJECT)\n  install(FILES ${INSTALL_HEADERS} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME})\nendif()\n\n"
        },
        {
          "name": "CMakePresets.json",
          "type": "blob",
          "size": 0.6259765625,
          "content": "{\r\n  \"version\": 6,\r\n  \"cmakeMinimumRequired\": {\r\n    \"major\": 3,\r\n    \"minor\": 5,\r\n    \"patch\": 0\r\n  },\r\n  \"configurePresets\": [\r\n    {\r\n      \"name\": \"gcc\",\r\n      \"displayName\": \"GCC\",\r\n      \"description\": \"Default build options for GCC\",\r\n      \"generator\": \"Unix Makefiles\",\r\n      \"binaryDir\": \"${sourceDir}/build\"\r\n    }\r\n  ],\r\n  \"buildPresets\": [\r\n    {\r\n      \"name\": \"gcc\",\r\n      \"configurePreset\": \"gcc\"\r\n    }\r\n  ],\r\n  \"testPresets\": [\r\n    {\r\n      \"name\": \"gcc\",\r\n      \"configurePreset\": \"gcc\",\r\n      \"output\": {\"outputOnFailure\": true},\r\n      \"execution\": {\"noTestsAction\": \"error\", \"stopOnFailure\": true}\r\n    }\r\n  ]\r\n}\r\n"
        },
        {
          "name": "ChangeLog.md",
          "type": "blob",
          "size": 18.353515625,
          "content": "## Changelog\r\n\r\n### 3.0.2\r\n\r\n - Fix buffer overrun in mz_utf8z_to_widechar on Windows\r\n\r\n### 3.0.1\r\n\r\n - Fix compilation error with MINIZ_USE_UNALIGNED_LOADS_AND_STORES=1\r\n\r\n### 3.0.0\r\n\r\n - Reduce memory usage for inflate. This changes `struct tinfl_decompressor_tag` and therefore requires a major version bump (breaks ABI compatibility)\r\n - Add padding to structures so it continues to work if features differ. This also changes some structures\r\n - Use _ftelli64, _fseeki64 and stat with MinGW32 and OpenWatcom\r\n - Fix varios warnings with OpenWatcom compiler\r\n - Avoid using unaligned memory access in UBSan builds\r\n - Set MINIZ_LITTLE_ENDIAN only if not set\r\n - Add MINIZ_NO_DEFLATE_APIS and MINIZ_NO_INFLATE_APIS\r\n - Fix use of uninitialized memory in tinfl_decompress_mem_to_callback()\r\n - Use wfopen on windows\r\n - Use _wstat64 instead _stat64 on windows\r\n - Use level_and_flags after MZ_DEFAULT_COMPRESSION has been handled\r\n - Improve endianess detection\r\n - Don't use unaligned stores and loads per default\r\n - Fix function declaration if MINIZ_NO_STDIO is used\r\n - Fix MZ_ZIP_GENERAL_PURPOSE_BIT_FLAG_UTF8 not being set\r\n - Remove total files check (its 32-bit uint)\r\n - tinfl_decompress: avoid NULL ptr arithmetic UB\r\n - miniz_zip: fix mz_zip_reader_extract_to_heap to read correct sizes\r\n - Eliminate 64-bit operations on 32-bit machines\r\n - Disable treating warnings as error with MSVC\r\n - Disable building shared lib via CMake by default\r\n - Fixed alignment problems on MacOS\r\n - Fixed get error string for MZ_ZIP_TOTAL_ERRORS\r\n - Write correct FLEVEL 2-bit value in zlib header\r\n - miniz.pc.in: fix include path not containing the \"miniz\" suffix\r\n - Fix compatibility with FreeBSD\r\n - pkg-config tweaks\r\n - Fix integer overflow in header corruption check\r\n - Fix some warnings\r\n - tdefl_compress_normal: Avoid NULL ptr arithmetic UB\r\n - replace use of stdint.h types with mz_ variants\r\n \r\n \r\n### 2.2.0\r\n\r\n - Fix examples with amalgamation\r\n - Modified cmake script to support shared library mode and find_package\r\n - Fix for misleading doc comment on `mz_zip_reader_init_cfile` function\r\n - Add include location tolerance and stop forcing `_GNU_SOURCE`\r\n - Fix: mz_zip_reader_locate_file_v2 returns an mz_bool\r\n - Fix large file system checks\r\n - Add #elif to enable an external mz_crc32() to be linked in\r\n - Write with dynamic size (size of file/data to be added not known before adding)\r\n - Added uncompress2 for zlib compatibility\r\n - Add support for building as a Meson subproject\r\n - Added OSSFuzz support; Integrate with CIFuzz\r\n - Add pkg-config file\r\n - Fixed use-of-uninitialized value msan error when copying dist bytes with no output bytes written.\r\n - mz_zip_validate_file(): fix memory leak on errors\r\n - Fixed MSAN use-of-uninitialized in tinfl_decompress when invalid dist is decoded. In this instance dist was 31 which s_dist_base translates as 0\r\n - Add flag to set (compressed) size in local file header\r\n - avoid use of uninitialized value in tdefl_record_literal\r\n\r\n### 2.1.0\r\n\r\n - More instances of memcpy instead of cast and use memcpy per default\r\n - Remove inline for c90 support\r\n - New function to read files via callback functions when adding them\r\n - Fix out of bounds read while reading Zip64 extended information\r\n - guard memcpy when n == 0 because buffer may be NULL\r\n - Implement inflateReset() function\r\n - Move comp/decomp alloc/free  prototypes under guarding #ifndef MZ_NO_MALLOC\r\n - Fix large file support under Windows\r\n - Don't warn if _LARGEFILE64_SOURCE is not defined to 1\r\n - Fixes for MSVC warnings\r\n - Remove check that path of file added to archive contains ':' or '\\'\r\n - Add !defined check on MINIZ_USE_ALIGNED_LOADS_AND_STORES\r\n\r\n### 2.0.8\r\n\r\n - Remove unimplemented functions (mz_zip_locate_file and mz_zip_locate_file_v2)\r\n - Add license, changelog, readme and example files to release zip\r\n - Fix heap overflow to user buffer in tinfl_status tinfl_decompress\r\n - Fix corrupt archive if uncompressed file smaller than 4 byte and the file is added by mz_zip_writer_add_mem*\r\n\r\n### 2.0.7\r\n\r\n - Removed need in C++ compiler in cmake build\r\n - Fixed a lot of uninitialized value errors found with Valgrind by memsetting m_dict to 0 in tdefl_init\r\n - Fix resource leak in mz_zip_reader_init_file_v2\r\n - Fix assert with mz_zip_writer_add_mem* w/MZ_DEFAULT_COMPRESSION\r\n - cmake build: install library and headers\r\n - Remove _LARGEFILE64_SOURCE requirement from apple defines for large files\r\n\r\n### 2.0.6\r\n\r\n - Improve MZ_ZIP_FLAG_WRITE_ZIP64 documentation\r\n - Remove check for cur_archive_file_ofs > UINT_MAX because cur_archive_file_ofs is not used after this point\r\n - Add cmake debug configuration\r\n - Fix PNG height when creating png files\r\n - Add \"iterative\" file extraction method based on mz_zip_reader_extract_to_callback.\r\n - Option to use memcpy for unaligned data access\r\n - Define processor/arch macros as zero if not set to one\r\n\r\n### 2.0.4/2.0.5\r\n\r\n - Fix compilation with the various omission compile definitions\r\n\r\n### 2.0.3\r\n\r\n- Fix GCC/clang compile warnings\r\n- Added callback for periodic flushes (for ZIP file streaming)\r\n- Use UTF-8 for file names in ZIP files per default\r\n\r\n### 2.0.2\r\n\r\n- Fix source backwards compatibility with 1.x\r\n- Fix a ZIP bit not being set correctly\r\n\r\n### 2.0.1\r\n\r\n- Added some tests\r\n- Added CI\r\n- Make source code ANSI C compatible\r\n\r\n### 2.0.0 beta\r\n\r\n- Matthew Sitton merged miniz 1.x to Rich Geldreich's vogl ZIP64 changes. Miniz is now licensed as MIT since the vogl code base is MIT licensed\r\n- Miniz is now split into several files\r\n- Miniz does now not seek backwards when creating ZIP files. That is the ZIP files can be streamed\r\n- Miniz automatically switches to the ZIP64 format when the created ZIP files goes over ZIP file limits\r\n- Similar to [SQLite](https://www.sqlite.org/amalgamation.html) the Miniz source code is amalgamated into one miniz.c/miniz.h pair in a build step (amalgamate.sh). Please use miniz.c/miniz.h in your projects\r\n- Miniz 2 is only source back-compatible with miniz 1.x. It breaks binary compatibility because structures changed\r\n\r\n### v1.16 BETA Oct 19, 2013\r\n\r\nStill testing, this release is downloadable from [here](http://www.tenacioussoftware.com/miniz_v116_beta_r1.7z). Two key inflator-only robustness and streaming related changes. Also merged in tdefl_compressor_alloc(), tdefl_compressor_free() helpers to make script bindings easier for rustyzip. I would greatly appreciate any help with testing or any feedback.\r\n\r\nThe inflator in raw (non-zlib) mode is now usable on gzip or similar streams that have a bunch of bytes following the raw deflate data (problem discovered by rustyzip author williamw520). This version should never read beyond the last byte of the raw deflate data independent of how many bytes you pass into the input buffer.\r\n\r\nThe inflator now has a new failure status TINFL_STATUS_FAILED_CANNOT_MAKE_PROGRESS (-4). Previously, if the inflator was starved of bytes and could not make progress (because the input buffer was empty and the caller did not set the TINFL_FLAG_HAS_MORE_INPUT flag - say on truncated or corrupted compressed data stream) it would append all 0's to the input and try to soldier on. This is scary behavior if the caller didn't know when to stop accepting output (because it didn't know how much uncompressed data was expected, or didn't enforce a sane maximum). v1.16 will instead return TINFL_STATUS_FAILED_CANNOT_MAKE_PROGRESS immediately if it needs 1 or more bytes to make progress, the input buf is empty, and the caller has indicated that no more input is available. This is a \"soft\" failure, so you can call the inflator again with more input and it will try to continue, or you can give up and fail. This could be very useful in network streaming scenarios.\r\n\r\n- The inflator coroutine func. is subtle and complex so I'm being cautious about this release. I would greatly appreciate any help with testing or any feedback.\r\n         I feel good about these changes, and they've been through several hours of automated testing, but they will probably not fix anything for the majority of prev. users so I'm\r\n         going to mark this release as beta for a few weeks and continue testing it at work/home on various things.\r\n- The inflator in raw (non-zlib) mode is now usable on gzip or similar data streams that have a bunch of bytes following the raw deflate data (problem discovered by rustyzip author williamw520).\r\n         This version should *never* read beyond the last byte of the raw deflate data independent of how many bytes you pass into the input buffer. This issue was caused by the various Huffman bitbuffer lookahead optimizations, and\r\n         would not be an issue if the caller knew and enforced the precise size of the raw compressed data *or* if the compressed data was in zlib format (i.e. always followed by the byte aligned zlib adler32).\r\n         So in other words, you can now call the inflator on deflate streams that are followed by arbitrary amounts of data and it's guaranteed that decompression will stop exactly on the last byte.\r\n- The inflator now has a new failure status: TINFL_STATUS_FAILED_CANNOT_MAKE_PROGRESS (-4). Previously, if the inflator was starved of bytes and could not make progress (because the input buffer was empty and the\r\n         caller did not set the TINFL_FLAG_HAS_MORE_INPUT flag - say on truncated or corrupted compressed data stream) it would append all 0's to the input and try to soldier on.\r\n         This is scary, because in the worst case, I believe it was possible for the prev. inflator to start outputting large amounts of literal data. If the caller didn't know when to stop accepting output\r\n         (because it didn't know how much uncompressed data was expected, or didn't enforce a sane maximum) it could continue forever. v1.16 cannot fall into this failure mode, instead it'll return\r\n         TINFL_STATUS_FAILED_CANNOT_MAKE_PROGRESS immediately if it needs 1 or more bytes to make progress, the input buf is empty, and the caller has indicated that no more input is available. This is a \"soft\"\r\n         failure, so you can call the inflator again with more input and it will try to continue, or you can give up and fail. This could be very useful in network streaming scenarios.\r\n- Added documentation to all the tinfl return status codes, fixed miniz_tester so it accepts double minus params for Linux, tweaked example1.c, added a simple \"follower bytes\" test to miniz_tester.cpp.\r\n### v1.15 r4 STABLE - Oct 13, 2013\r\n\r\nMerged over a few very minor bug fixes that I fixed in the zip64 branch. This is downloadable from [here](http://code.google.com/p/miniz/downloads/list) and also in SVN head (as of 10/19/13).\r\n\r\n\r\n### v1.15 - Oct. 13, 2013\r\n\r\nInterim bugfix release while I work on the next major release with zip64 and streaming compression/decompression support. Fixed the MZ_ZIP_FLAG_DO_NOT_SORT_CENTRAL_DIRECTORY bug (thanks kahmyong.moon@hp.com), which could cause the locate files func to not find files when this flag was specified. Also fixed a bug in mz_zip_reader_extract_to_mem_no_alloc() with user provided read buffers (thanks kymoon). I also merged lots of compiler fixes from various github repo branches and Google Code issue reports. I finally added cmake support (only tested under for Linux so far), compiled and tested with clang v3.3 and gcc 4.6 (under Linux), added defl_write_image_to_png_file_in_memory_ex() (supports Y flipping for OpenGL use, real-time compression), added a new PNG example (example6.c - Mandelbrot), and I added 64-bit file I/O support (stat64(), etc.) for glibc.\r\n\r\n- Critical fix for the MZ_ZIP_FLAG_DO_NOT_SORT_CENTRAL_DIRECTORY bug (thanks kahmyong.moon@hp.com) which could cause locate files to not find files. This bug\r\n        would only have occurred in earlier versions if you explicitly used this flag, OR if you used mz_zip_extract_archive_file_to_heap() or mz_zip_add_mem_to_archive_file_in_place()\r\n        (which used this flag). If you can't switch to v1.15 but want to fix this bug, just remove the uses of this flag from both helper funcs (and of course don't use the flag).\r\n- Bugfix in mz_zip_reader_extract_to_mem_no_alloc() from kymoon when pUser_read_buf is not NULL and compressed size is > uncompressed size\r\n- Fixing mz_zip_reader_extract_*() funcs so they don't try to extract compressed data from directory entries, to account for weird zipfiles which contain zero-size compressed data on dir entries.\r\n         Hopefully this fix won't cause any issues on weird zip archives, because it assumes the low 16-bits of zip external attributes are DOS attributes (which I believe they always are in practice).\r\n- Fixing mz_zip_reader_is_file_a_directory() so it doesn't check the internal attributes, just the filename and external attributes\r\n- mz_zip_reader_init_file() - missing MZ_FCLOSE() call if the seek failed\r\n- Added cmake support for Linux builds which builds all the examples, tested with clang v3.3 and gcc v4.6.\r\n- Clang fix for tdefl_write_image_to_png_file_in_memory() from toffaletti\r\n- Merged MZ_FORCEINLINE fix from hdeanclark\r\n- Fix <time.h> include before config #ifdef, thanks emil.brink\r\n- Added tdefl_write_image_to_png_file_in_memory_ex(): supports Y flipping (super useful for OpenGL apps), and explicit control over the compression level (so you can\r\n        set it to 1 for real-time compression).\r\n- Merged in some compiler fixes from paulharris's github repro.\r\n- Retested this build under Windows (VS 2010, including static analysis), tcc  0.9.26, gcc v4.6 and clang v3.3.\r\n- Added example6.c, which dumps an image of the mandelbrot set to a PNG file.\r\n- Modified example2 to help test the MZ_ZIP_FLAG_DO_NOT_SORT_CENTRAL_DIRECTORY flag more.\r\n- In r3: Bugfix to mz_zip_writer_add_file() found during merge: Fix possible src file fclose() leak if alignment bytes+local header file write faiiled\r\n- In r4: Minor bugfix to mz_zip_writer_add_from_zip_reader(): Was pushing the wrong central dir header offset, appears harmless in this release, but it became a problem in the zip64 branch\r\n\r\n### v1.14 - May 20, 2012\r\n\r\n(SVN Only) Minor tweaks to get miniz.c compiling with the Tiny C Compiler, added #ifndef MINIZ_NO_TIME guards around utime.h includes. Adding mz_free() function, so the caller can free heap blocks returned by miniz using whatever heap functions it has been configured to use, MSVC specific fixes to use \"safe\" variants of several functions (localtime_s, fopen_s, freopen_s).\r\n\r\nMinGW32/64 GCC 4.6.1 compiler fixes: added MZ_FORCEINLINE, #include <time.h> (thanks fermtect).\r\n\r\nCompiler specific fixes, some from fermtect. I upgraded to TDM GCC 4.6.1 and now static __forceinline is giving it fits, so I'm changing all usage of __forceinline to MZ_FORCEINLINE and forcing gcc to use __attribute__((__always_inline__)) (and MSVC to use __forceinline). Also various fixes from fermtect for MinGW32: added #include , 64-bit ftell/fseek fixes.\r\n\r\n### v1.13 - May 19, 2012\r\n\r\nFrom jason@cornsyrup.org and kelwert@mtu.edu - Most importantly, fixed mz_crc32() so it doesn't compute the wrong CRC-32's when mz_ulong is 64-bits. Temporarily/locally slammed in \"typedef unsigned long mz_ulong\" and re-ran a randomized regression test on ~500k files. Other stuff:\r\n\r\nEliminated a bunch of warnings when compiling with GCC 32-bit/64. Ran all examples, miniz.c, and tinfl.c through MSVC 2008's /analyze (static analysis) option and fixed all warnings (except for the silly \"Use of the comma-operator in a tested expression..\" analysis warning, which I purposely use to work around a MSVC compiler warning).\r\n\r\nCreated 32-bit and 64-bit Codeblocks projects/workspace. Built and tested Linux executables. The codeblocks workspace is compatible with Linux+Win32/x64. Added miniz_tester solution/project, which is a useful little app derived from LZHAM's tester app that I use as part of the regression test. Ran miniz.c and tinfl.c through another series of regression testing on ~500,000 files and archives. Modified example5.c so it purposely disables a bunch of high-level functionality (MINIZ_NO_STDIO, etc.). (Thanks to corysama for the MINIZ_NO_STDIO bug report.)\r\n\r\nFix ftell() usage in a few of the examples so they exit with an error on files which are too large (a limitation of the examples, not miniz itself). Fix fail logic handling in mz_zip_add_mem_to_archive_file_in_place() so it always calls mz_zip_writer_finalize_archive() and mz_zip_writer_end(), even if the file add fails.\r\n\r\n- From jason@cornsyrup.org and kelwert@mtu.edu - Fix mz_crc32() so it doesn't compute the wrong CRC-32's when mz_ulong is 64-bit.\r\n- Temporarily/locally slammed in \"typedef unsigned long mz_ulong\" and re-ran a randomized regression test on ~500k files.\r\n- Eliminated a bunch of warnings when compiling with GCC 32-bit/64.\r\n- Ran all examples, miniz.c, and tinfl.c through MSVC 2008's /analyze (static analysis) option and fixed all warnings (except for the silly\r\n\"Use of the comma-operator in a tested expression..\" analysis warning, which I purposely use to work around a MSVC compiler warning).\r\n- Created 32-bit and 64-bit Codeblocks projects/workspace. Built and tested Linux executables. The codeblocks workspace is compatible with Linux+Win32/x64.\r\n- Added miniz_tester solution/project, which is a useful little app derived from LZHAM's tester app that I use as part of the regression test.\r\n- Ran miniz.c and tinfl.c through another series of regression testing on ~500,000 files and archives.\r\n- Modified example5.c so it purposely disables a bunch of high-level functionality (MINIZ_NO_STDIO, etc.). (Thanks to corysama for the MINIZ_NO_STDIO bug report.)\r\n- Fix ftell() usage in examples so they exit with an error on files which are too large (a limitation of the examples, not miniz itself).\r\n\r\n### v1.12 - 4/12/12\r\n\r\nMore comments, added low-level example5.c, fixed a couple minor level_and_flags issues in the archive API's.\r\nlevel_and_flags can now be set to MZ_DEFAULT_COMPRESSION. Thanks to Bruce Dawson <bruced@valvesoftware.com> for the feedback/bug report.\r\n\r\n### v1.11 - 5/28/11\r\n\r\nAdded statement from unlicense.org\r\n\r\n### v1.10 - 5/27/11\r\n\r\n- Substantial compressor optimizations:\r\n- Level 1 is now ~4x faster than before. The L1 compressor's throughput now varies between 70-110MB/sec. on a Core i7 (actual throughput varies depending on the type of data, and x64 vs. x86).\r\n- Improved baseline L2-L9 compression perf. Also, greatly improved compression perf. issues on some file types.\r\n- Refactored the compression code for better readability and maintainability.\r\n- Added level 10 compression level (L10 has slightly better ratio than level 9, but could have a potentially large drop in throughput on some files).\r\n\r\n### v1.09 - 5/15/11\r\n\r\nInitial stable release.\r\n\r\n\r\n"
        },
        {
          "name": "Config.cmake.in",
          "type": "blob",
          "size": 0.0625,
          "content": "include(\"${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@Targets.cmake\")"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.15625,
          "content": "Copyright 2013-2014 RAD Game Tools and Valve Software\r\nCopyright 2010-2014 Rich Geldreich and Tenacious Software LLC\r\n\r\nAll Rights Reserved.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n"
        },
        {
          "name": "amalgamate.sh",
          "type": "blob",
          "size": 1.6240234375,
          "content": "#!/bin/bash\n\nset -e\n\nmkdir -p amalgamation\n\nOUTPUT_PREFIX=_build/amalgamation\n\ncmake -H. -B_build -DAMALGAMATE_SOURCES=ON -G\"Unix Makefiles\"\n\necho \"int main() { return 0; }\" > main.c\necho \"Test compile with GCC...\"\ngcc -pedantic -Wall -I$OUTPUT_PREFIX main.c $OUTPUT_PREFIX/miniz.c -o test.out\necho \"Test compile with GCC ANSI...\"\ngcc -ansi -pedantic -Wall -I$OUTPUT_PREFIX main.c $OUTPUT_PREFIX/miniz.c -o test.out\nif command -v clang\nthen\n\t\techo \"Test compile with clang...\"\n        clang -Wall -Wpedantic -fsanitize=unsigned-integer-overflow -I$OUTPUT_PREFIX main.c $OUTPUT_PREFIX/miniz.c -o test.out\nfi\nfor def in MINIZ_NO_STDIO MINIZ_NO_TIME MINIZ_NO_DEFLATE_APIS MINIZ_NO_INFLATE_APIS MINIZ_NO_ARCHIVE_APIS MINIZ_NO_ARCHIVE_WRITING_APIS MINIZ_NO_ZLIB_APIS MINIZ_NO_ZLIB_COMPATIBLE_NAMES MINIZ_NO_MALLOC\ndo\n\techo \"Test compile with GCC and define $def...\"\n\tgcc -ansi -pedantic -Wall -I$OUTPUT_PREFIX main.c $OUTPUT_PREFIX/miniz.c -o test.out -D${def}\ndone\necho \"Test compile with GCC and MINIZ_USE_UNALIGNED_LOADS_AND_STORES=1...\"\ngcc -ansi -pedantic -Wall -I$OUTPUT_PREFIX main.c $OUTPUT_PREFIX/miniz.c -o test.out -DMINIZ_USE_UNALIGNED_LOADS_AND_STORES=1\nrm test.out\nrm main.c\n\ncp $OUTPUT_PREFIX/miniz.* amalgamation/\ncp ChangeLog.md amalgamation/\ncp LICENSE amalgamation/\ncp readme.md amalgamation/\nmkdir -p amalgamation/examples\ncp examples/* amalgamation/examples/\n\ncd amalgamation\n! test -e miniz.zip || rm miniz.zip\ncat << EOF | zip -@ miniz\nminiz.c\nminiz.h\nChangeLog.md\nLICENSE\nreadme.md\nexamples/example1.c\nexamples/example2.c\nexamples/example3.c\nexamples/example4.c\nexamples/example5.c\nexamples/example6.c\nEOF\ncd ..\n\necho \"Amalgamation created.\"\n\n\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 0.75390625,
          "content": "project('miniz', 'c')\n\nminiz_includes = include_directories('.')\n\ncfg = configuration_data()\ncfg.set('MINIZ_EXPORT', '')\nminiz_export_h = configure_file(output: 'miniz_export.h',\n                                configuration: cfg)\n\nlibminiz = static_library('miniz',\n                          miniz_export_h, 'miniz.c', 'miniz_zip.c', 'miniz_tinfl.c', 'miniz_tdef.c',\n                          include_directories: miniz_includes)\n\nminiz_dependency = declare_dependency(link_with: libminiz,\n                                      include_directories: miniz_includes)\n                                      \nminiz_dep = miniz_dependency # Compatibility for WrapDB users\n\nif meson.version().version_compare('>= 0.54.0')\n    meson.override_dependency('miniz', miniz_dep)\nendif\n"
        },
        {
          "name": "miniz.c",
          "type": "blob",
          "size": 25.3818359375,
          "content": "/**************************************************************************\n *\n * Copyright 2013-2014 RAD Game Tools and Valve Software\n * Copyright 2010-2014 Rich Geldreich and Tenacious Software LLC\n * All Rights Reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n **************************************************************************/\n\n#include \"miniz.h\"\n\ntypedef unsigned char mz_validate_uint16[sizeof(mz_uint16) == 2 ? 1 : -1];\ntypedef unsigned char mz_validate_uint32[sizeof(mz_uint32) == 4 ? 1 : -1];\ntypedef unsigned char mz_validate_uint64[sizeof(mz_uint64) == 8 ? 1 : -1];\n\n#ifdef __cplusplus\nextern \"C\"\n{\n#endif\n\n    /* ------------------- zlib-style API's */\n\n    mz_ulong mz_adler32(mz_ulong adler, const unsigned char *ptr, size_t buf_len)\n    {\n        mz_uint32 i, s1 = (mz_uint32)(adler & 0xffff), s2 = (mz_uint32)(adler >> 16);\n        size_t block_len = buf_len % 5552;\n        if (!ptr)\n            return MZ_ADLER32_INIT;\n        while (buf_len)\n        {\n            for (i = 0; i + 7 < block_len; i += 8, ptr += 8)\n            {\n                s1 += ptr[0], s2 += s1;\n                s1 += ptr[1], s2 += s1;\n                s1 += ptr[2], s2 += s1;\n                s1 += ptr[3], s2 += s1;\n                s1 += ptr[4], s2 += s1;\n                s1 += ptr[5], s2 += s1;\n                s1 += ptr[6], s2 += s1;\n                s1 += ptr[7], s2 += s1;\n            }\n            for (; i < block_len; ++i)\n                s1 += *ptr++, s2 += s1;\n            s1 %= 65521U, s2 %= 65521U;\n            buf_len -= block_len;\n            block_len = 5552;\n        }\n        return (s2 << 16) + s1;\n    }\n\n/* Karl Malbrain's compact CRC-32. See \"A compact CCITT crc16 and crc32 C implementation that balances processor cache usage against speed\": http://www.geocities.com/malbrain/ */\n#if 0\n    mz_ulong mz_crc32(mz_ulong crc, const mz_uint8 *ptr, size_t buf_len)\n    {\n        static const mz_uint32 s_crc32[16] = { 0, 0x1db71064, 0x3b6e20c8, 0x26d930ac, 0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,\n                                               0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c, 0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c };\n        mz_uint32 crcu32 = (mz_uint32)crc;\n        if (!ptr)\n            return MZ_CRC32_INIT;\n        crcu32 = ~crcu32;\n        while (buf_len--)\n        {\n            mz_uint8 b = *ptr++;\n            crcu32 = (crcu32 >> 4) ^ s_crc32[(crcu32 & 0xF) ^ (b & 0xF)];\n            crcu32 = (crcu32 >> 4) ^ s_crc32[(crcu32 & 0xF) ^ (b >> 4)];\n        }\n        return ~crcu32;\n    }\n#elif defined(USE_EXTERNAL_MZCRC)\n/* If USE_EXTERNAL_CRC is defined, an external module will export the\n * mz_crc32() symbol for us to use, e.g. an SSE-accelerated version.\n * Depending on the impl, it may be necessary to ~ the input/output crc values.\n */\nmz_ulong mz_crc32(mz_ulong crc, const mz_uint8 *ptr, size_t buf_len);\n#else\n/* Faster, but larger CPU cache footprint.\n */\nmz_ulong mz_crc32(mz_ulong crc, const mz_uint8 *ptr, size_t buf_len)\n{\n    static const mz_uint32 s_crc_table[256] = {\n        0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F, 0xE963A535,\n        0x9E6495A3, 0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD,\n        0xE7B82D07, 0x90BF1D91, 0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE, 0x1ADAD47D,\n        0x6DDDE4EB, 0xF4D4B551, 0x83D385C7, 0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC,\n        0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5, 0x3B6E20C8, 0x4C69105E, 0xD56041E4,\n        0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, 0x35B5A8FA, 0x42B2986C,\n        0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 0x26D930AC,\n        0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,\n        0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924, 0x2F6F7C87, 0x58684C11, 0xC1611DAB,\n        0xB6662D3D, 0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F,\n        0x9FBFE4A5, 0xE8B8D433, 0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB,\n        0x086D3D2D, 0x91646C97, 0xE6635C01, 0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E,\n        0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457, 0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA,\n        0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65, 0x4DB26158, 0x3AB551CE,\n        0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 0x4369E96A,\n        0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,\n        0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409,\n        0xCE61E49F, 0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81,\n        0xB7BD5C3B, 0xC0BA6CAD, 0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A, 0xEAD54739,\n        0x9DD277AF, 0x04DB2615, 0x73DC1683, 0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,\n        0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 0xF00F9344, 0x8708A3D2, 0x1E01F268,\n        0x6906C2FE, 0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7, 0xFED41B76, 0x89D32BE0,\n        0x10DA7A5A, 0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5, 0xD6D6A3E8,\n        0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,\n        0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF,\n        0x4669BE79, 0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236, 0xCC0C7795, 0xBB0B4703,\n        0x220216B9, 0x5505262F, 0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7,\n        0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D, 0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A,\n        0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713, 0x95BF4A82, 0xE2B87A14, 0x7BB12BAE,\n        0x0CB61B38, 0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 0x86D3D2D4, 0xF1D4E242,\n        0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777, 0x88085AE6,\n        0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,\n        0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7, 0x4969474D,\n        0x3E6E77DB, 0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5,\n        0x47B2CF7F, 0x30B5FFE9, 0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605,\n        0xCDD70693, 0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,\n        0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D\n    };\n\n    mz_uint32 crc32 = (mz_uint32)crc ^ 0xFFFFFFFF;\n    const mz_uint8 *pByte_buf = (const mz_uint8 *)ptr;\n\n    while (buf_len >= 4)\n    {\n        crc32 = (crc32 >> 8) ^ s_crc_table[(crc32 ^ pByte_buf[0]) & 0xFF];\n        crc32 = (crc32 >> 8) ^ s_crc_table[(crc32 ^ pByte_buf[1]) & 0xFF];\n        crc32 = (crc32 >> 8) ^ s_crc_table[(crc32 ^ pByte_buf[2]) & 0xFF];\n        crc32 = (crc32 >> 8) ^ s_crc_table[(crc32 ^ pByte_buf[3]) & 0xFF];\n        pByte_buf += 4;\n        buf_len -= 4;\n    }\n\n    while (buf_len)\n    {\n        crc32 = (crc32 >> 8) ^ s_crc_table[(crc32 ^ pByte_buf[0]) & 0xFF];\n        ++pByte_buf;\n        --buf_len;\n    }\n\n    return ~crc32;\n}\n#endif\n\n    void mz_free(void *p)\n    {\n        MZ_FREE(p);\n    }\n\n    MINIZ_EXPORT void *miniz_def_alloc_func(void *opaque, size_t items, size_t size)\n    {\n        (void)opaque, (void)items, (void)size;\n        return MZ_MALLOC(items * size);\n    }\n    MINIZ_EXPORT void miniz_def_free_func(void *opaque, void *address)\n    {\n        (void)opaque, (void)address;\n        MZ_FREE(address);\n    }\n    MINIZ_EXPORT void *miniz_def_realloc_func(void *opaque, void *address, size_t items, size_t size)\n    {\n        (void)opaque, (void)address, (void)items, (void)size;\n        return MZ_REALLOC(address, items * size);\n    }\n\n    const char *mz_version(void)\n    {\n        return MZ_VERSION;\n    }\n\n#ifndef MINIZ_NO_ZLIB_APIS\n\n#ifndef MINIZ_NO_DEFLATE_APIS\n\n    int mz_deflateInit(mz_streamp pStream, int level)\n    {\n        return mz_deflateInit2(pStream, level, MZ_DEFLATED, MZ_DEFAULT_WINDOW_BITS, 9, MZ_DEFAULT_STRATEGY);\n    }\n\n    int mz_deflateInit2(mz_streamp pStream, int level, int method, int window_bits, int mem_level, int strategy)\n    {\n        tdefl_compressor *pComp;\n        mz_uint comp_flags = TDEFL_COMPUTE_ADLER32 | tdefl_create_comp_flags_from_zip_params(level, window_bits, strategy);\n\n        if (!pStream)\n            return MZ_STREAM_ERROR;\n        if ((method != MZ_DEFLATED) || ((mem_level < 1) || (mem_level > 9)) || ((window_bits != MZ_DEFAULT_WINDOW_BITS) && (-window_bits != MZ_DEFAULT_WINDOW_BITS)))\n            return MZ_PARAM_ERROR;\n\n        pStream->data_type = 0;\n        pStream->adler = MZ_ADLER32_INIT;\n        pStream->msg = NULL;\n        pStream->reserved = 0;\n        pStream->total_in = 0;\n        pStream->total_out = 0;\n        if (!pStream->zalloc)\n            pStream->zalloc = miniz_def_alloc_func;\n        if (!pStream->zfree)\n            pStream->zfree = miniz_def_free_func;\n\n        pComp = (tdefl_compressor *)pStream->zalloc(pStream->opaque, 1, sizeof(tdefl_compressor));\n        if (!pComp)\n            return MZ_MEM_ERROR;\n\n        pStream->state = (struct mz_internal_state *)pComp;\n\n        if (tdefl_init(pComp, NULL, NULL, comp_flags) != TDEFL_STATUS_OKAY)\n        {\n            mz_deflateEnd(pStream);\n            return MZ_PARAM_ERROR;\n        }\n\n        return MZ_OK;\n    }\n\n    int mz_deflateReset(mz_streamp pStream)\n    {\n        if ((!pStream) || (!pStream->state) || (!pStream->zalloc) || (!pStream->zfree))\n            return MZ_STREAM_ERROR;\n        pStream->total_in = pStream->total_out = 0;\n        tdefl_init((tdefl_compressor *)pStream->state, NULL, NULL, ((tdefl_compressor *)pStream->state)->m_flags);\n        return MZ_OK;\n    }\n\n    int mz_deflate(mz_streamp pStream, int flush)\n    {\n        size_t in_bytes, out_bytes;\n        mz_ulong orig_total_in, orig_total_out;\n        int mz_status = MZ_OK;\n\n        if ((!pStream) || (!pStream->state) || (flush < 0) || (flush > MZ_FINISH) || (!pStream->next_out))\n            return MZ_STREAM_ERROR;\n        if (!pStream->avail_out)\n            return MZ_BUF_ERROR;\n\n        if (flush == MZ_PARTIAL_FLUSH)\n            flush = MZ_SYNC_FLUSH;\n\n        if (((tdefl_compressor *)pStream->state)->m_prev_return_status == TDEFL_STATUS_DONE)\n            return (flush == MZ_FINISH) ? MZ_STREAM_END : MZ_BUF_ERROR;\n\n        orig_total_in = pStream->total_in;\n        orig_total_out = pStream->total_out;\n        for (;;)\n        {\n            tdefl_status defl_status;\n            in_bytes = pStream->avail_in;\n            out_bytes = pStream->avail_out;\n\n            defl_status = tdefl_compress((tdefl_compressor *)pStream->state, pStream->next_in, &in_bytes, pStream->next_out, &out_bytes, (tdefl_flush)flush);\n            pStream->next_in += (mz_uint)in_bytes;\n            pStream->avail_in -= (mz_uint)in_bytes;\n            pStream->total_in += (mz_uint)in_bytes;\n            pStream->adler = tdefl_get_adler32((tdefl_compressor *)pStream->state);\n\n            pStream->next_out += (mz_uint)out_bytes;\n            pStream->avail_out -= (mz_uint)out_bytes;\n            pStream->total_out += (mz_uint)out_bytes;\n\n            if (defl_status < 0)\n            {\n                mz_status = MZ_STREAM_ERROR;\n                break;\n            }\n            else if (defl_status == TDEFL_STATUS_DONE)\n            {\n                mz_status = MZ_STREAM_END;\n                break;\n            }\n            else if (!pStream->avail_out)\n                break;\n            else if ((!pStream->avail_in) && (flush != MZ_FINISH))\n            {\n                if ((flush) || (pStream->total_in != orig_total_in) || (pStream->total_out != orig_total_out))\n                    break;\n                return MZ_BUF_ERROR; /* Can't make forward progress without some input.\n                                      */\n            }\n        }\n        return mz_status;\n    }\n\n    int mz_deflateEnd(mz_streamp pStream)\n    {\n        if (!pStream)\n            return MZ_STREAM_ERROR;\n        if (pStream->state)\n        {\n            pStream->zfree(pStream->opaque, pStream->state);\n            pStream->state = NULL;\n        }\n        return MZ_OK;\n    }\n\n    mz_ulong mz_deflateBound(mz_streamp pStream, mz_ulong source_len)\n    {\n        (void)pStream;\n        /* This is really over conservative. (And lame, but it's actually pretty tricky to compute a true upper bound given the way tdefl's blocking works.) */\n        return MZ_MAX(128 + (source_len * 110) / 100, 128 + source_len + ((source_len / (31 * 1024)) + 1) * 5);\n    }\n\n    int mz_compress2(unsigned char *pDest, mz_ulong *pDest_len, const unsigned char *pSource, mz_ulong source_len, int level)\n    {\n        int status;\n        mz_stream stream;\n        memset(&stream, 0, sizeof(stream));\n\n        /* In case mz_ulong is 64-bits (argh I hate longs). */\n        if ((mz_uint64)(source_len | *pDest_len) > 0xFFFFFFFFU)\n            return MZ_PARAM_ERROR;\n\n        stream.next_in = pSource;\n        stream.avail_in = (mz_uint32)source_len;\n        stream.next_out = pDest;\n        stream.avail_out = (mz_uint32)*pDest_len;\n\n        status = mz_deflateInit(&stream, level);\n        if (status != MZ_OK)\n            return status;\n\n        status = mz_deflate(&stream, MZ_FINISH);\n        if (status != MZ_STREAM_END)\n        {\n            mz_deflateEnd(&stream);\n            return (status == MZ_OK) ? MZ_BUF_ERROR : status;\n        }\n\n        *pDest_len = stream.total_out;\n        return mz_deflateEnd(&stream);\n    }\n\n    int mz_compress(unsigned char *pDest, mz_ulong *pDest_len, const unsigned char *pSource, mz_ulong source_len)\n    {\n        return mz_compress2(pDest, pDest_len, pSource, source_len, MZ_DEFAULT_COMPRESSION);\n    }\n\n    mz_ulong mz_compressBound(mz_ulong source_len)\n    {\n        return mz_deflateBound(NULL, source_len);\n    }\n\n#endif /*#ifndef MINIZ_NO_DEFLATE_APIS*/\n\n#ifndef MINIZ_NO_INFLATE_APIS\n\n    typedef struct\n    {\n        tinfl_decompressor m_decomp;\n        mz_uint m_dict_ofs, m_dict_avail, m_first_call, m_has_flushed;\n        int m_window_bits;\n        mz_uint8 m_dict[TINFL_LZ_DICT_SIZE];\n        tinfl_status m_last_status;\n    } inflate_state;\n\n    int mz_inflateInit2(mz_streamp pStream, int window_bits)\n    {\n        inflate_state *pDecomp;\n        if (!pStream)\n            return MZ_STREAM_ERROR;\n        if ((window_bits != MZ_DEFAULT_WINDOW_BITS) && (-window_bits != MZ_DEFAULT_WINDOW_BITS))\n            return MZ_PARAM_ERROR;\n\n        pStream->data_type = 0;\n        pStream->adler = 0;\n        pStream->msg = NULL;\n        pStream->total_in = 0;\n        pStream->total_out = 0;\n        pStream->reserved = 0;\n        if (!pStream->zalloc)\n            pStream->zalloc = miniz_def_alloc_func;\n        if (!pStream->zfree)\n            pStream->zfree = miniz_def_free_func;\n\n        pDecomp = (inflate_state *)pStream->zalloc(pStream->opaque, 1, sizeof(inflate_state));\n        if (!pDecomp)\n            return MZ_MEM_ERROR;\n\n        pStream->state = (struct mz_internal_state *)pDecomp;\n\n        tinfl_init(&pDecomp->m_decomp);\n        pDecomp->m_dict_ofs = 0;\n        pDecomp->m_dict_avail = 0;\n        pDecomp->m_last_status = TINFL_STATUS_NEEDS_MORE_INPUT;\n        pDecomp->m_first_call = 1;\n        pDecomp->m_has_flushed = 0;\n        pDecomp->m_window_bits = window_bits;\n\n        return MZ_OK;\n    }\n\n    int mz_inflateInit(mz_streamp pStream)\n    {\n        return mz_inflateInit2(pStream, MZ_DEFAULT_WINDOW_BITS);\n    }\n\n    int mz_inflateReset(mz_streamp pStream)\n    {\n        inflate_state *pDecomp;\n        if (!pStream)\n            return MZ_STREAM_ERROR;\n\n        pStream->data_type = 0;\n        pStream->adler = 0;\n        pStream->msg = NULL;\n        pStream->total_in = 0;\n        pStream->total_out = 0;\n        pStream->reserved = 0;\n\n        pDecomp = (inflate_state *)pStream->state;\n\n        tinfl_init(&pDecomp->m_decomp);\n        pDecomp->m_dict_ofs = 0;\n        pDecomp->m_dict_avail = 0;\n        pDecomp->m_last_status = TINFL_STATUS_NEEDS_MORE_INPUT;\n        pDecomp->m_first_call = 1;\n        pDecomp->m_has_flushed = 0;\n        /* pDecomp->m_window_bits = window_bits */;\n\n        return MZ_OK;\n    }\n\n    int mz_inflate(mz_streamp pStream, int flush)\n    {\n        inflate_state *pState;\n        mz_uint n, first_call, decomp_flags = TINFL_FLAG_COMPUTE_ADLER32;\n        size_t in_bytes, out_bytes, orig_avail_in;\n        tinfl_status status;\n\n        if ((!pStream) || (!pStream->state))\n            return MZ_STREAM_ERROR;\n        if (flush == MZ_PARTIAL_FLUSH)\n            flush = MZ_SYNC_FLUSH;\n        if ((flush) && (flush != MZ_SYNC_FLUSH) && (flush != MZ_FINISH))\n            return MZ_STREAM_ERROR;\n\n        pState = (inflate_state *)pStream->state;\n        if (pState->m_window_bits > 0)\n            decomp_flags |= TINFL_FLAG_PARSE_ZLIB_HEADER;\n        orig_avail_in = pStream->avail_in;\n\n        first_call = pState->m_first_call;\n        pState->m_first_call = 0;\n        if (pState->m_last_status < 0)\n            return MZ_DATA_ERROR;\n\n        if (pState->m_has_flushed && (flush != MZ_FINISH))\n            return MZ_STREAM_ERROR;\n        pState->m_has_flushed |= (flush == MZ_FINISH);\n\n        if ((flush == MZ_FINISH) && (first_call))\n        {\n            /* MZ_FINISH on the first call implies that the input and output buffers are large enough to hold the entire compressed/decompressed file. */\n            decomp_flags |= TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF;\n            in_bytes = pStream->avail_in;\n            out_bytes = pStream->avail_out;\n            status = tinfl_decompress(&pState->m_decomp, pStream->next_in, &in_bytes, pStream->next_out, pStream->next_out, &out_bytes, decomp_flags);\n            pState->m_last_status = status;\n            pStream->next_in += (mz_uint)in_bytes;\n            pStream->avail_in -= (mz_uint)in_bytes;\n            pStream->total_in += (mz_uint)in_bytes;\n            pStream->adler = tinfl_get_adler32(&pState->m_decomp);\n            pStream->next_out += (mz_uint)out_bytes;\n            pStream->avail_out -= (mz_uint)out_bytes;\n            pStream->total_out += (mz_uint)out_bytes;\n\n            if (status < 0)\n                return MZ_DATA_ERROR;\n            else if (status != TINFL_STATUS_DONE)\n            {\n                pState->m_last_status = TINFL_STATUS_FAILED;\n                return MZ_BUF_ERROR;\n            }\n            return MZ_STREAM_END;\n        }\n        /* flush != MZ_FINISH then we must assume there's more input. */\n        if (flush != MZ_FINISH)\n            decomp_flags |= TINFL_FLAG_HAS_MORE_INPUT;\n\n        if (pState->m_dict_avail)\n        {\n            n = MZ_MIN(pState->m_dict_avail, pStream->avail_out);\n            memcpy(pStream->next_out, pState->m_dict + pState->m_dict_ofs, n);\n            pStream->next_out += n;\n            pStream->avail_out -= n;\n            pStream->total_out += n;\n            pState->m_dict_avail -= n;\n            pState->m_dict_ofs = (pState->m_dict_ofs + n) & (TINFL_LZ_DICT_SIZE - 1);\n            return ((pState->m_last_status == TINFL_STATUS_DONE) && (!pState->m_dict_avail)) ? MZ_STREAM_END : MZ_OK;\n        }\n\n        for (;;)\n        {\n            in_bytes = pStream->avail_in;\n            out_bytes = TINFL_LZ_DICT_SIZE - pState->m_dict_ofs;\n\n            status = tinfl_decompress(&pState->m_decomp, pStream->next_in, &in_bytes, pState->m_dict, pState->m_dict + pState->m_dict_ofs, &out_bytes, decomp_flags);\n            pState->m_last_status = status;\n\n            pStream->next_in += (mz_uint)in_bytes;\n            pStream->avail_in -= (mz_uint)in_bytes;\n            pStream->total_in += (mz_uint)in_bytes;\n            pStream->adler = tinfl_get_adler32(&pState->m_decomp);\n\n            pState->m_dict_avail = (mz_uint)out_bytes;\n\n            n = MZ_MIN(pState->m_dict_avail, pStream->avail_out);\n            memcpy(pStream->next_out, pState->m_dict + pState->m_dict_ofs, n);\n            pStream->next_out += n;\n            pStream->avail_out -= n;\n            pStream->total_out += n;\n            pState->m_dict_avail -= n;\n            pState->m_dict_ofs = (pState->m_dict_ofs + n) & (TINFL_LZ_DICT_SIZE - 1);\n\n            if (status < 0)\n                return MZ_DATA_ERROR; /* Stream is corrupted (there could be some uncompressed data left in the output dictionary - oh well). */\n            else if ((status == TINFL_STATUS_NEEDS_MORE_INPUT) && (!orig_avail_in))\n                return MZ_BUF_ERROR; /* Signal caller that we can't make forward progress without supplying more input or by setting flush to MZ_FINISH. */\n            else if (flush == MZ_FINISH)\n            {\n                /* The output buffer MUST be large to hold the remaining uncompressed data when flush==MZ_FINISH. */\n                if (status == TINFL_STATUS_DONE)\n                    return pState->m_dict_avail ? MZ_BUF_ERROR : MZ_STREAM_END;\n                /* status here must be TINFL_STATUS_HAS_MORE_OUTPUT, which means there's at least 1 more byte on the way. If there's no more room left in the output buffer then something is wrong. */\n                else if (!pStream->avail_out)\n                    return MZ_BUF_ERROR;\n            }\n            else if ((status == TINFL_STATUS_DONE) || (!pStream->avail_in) || (!pStream->avail_out) || (pState->m_dict_avail))\n                break;\n        }\n\n        return ((status == TINFL_STATUS_DONE) && (!pState->m_dict_avail)) ? MZ_STREAM_END : MZ_OK;\n    }\n\n    int mz_inflateEnd(mz_streamp pStream)\n    {\n        if (!pStream)\n            return MZ_STREAM_ERROR;\n        if (pStream->state)\n        {\n            pStream->zfree(pStream->opaque, pStream->state);\n            pStream->state = NULL;\n        }\n        return MZ_OK;\n    }\n    int mz_uncompress2(unsigned char *pDest, mz_ulong *pDest_len, const unsigned char *pSource, mz_ulong *pSource_len)\n    {\n        mz_stream stream;\n        int status;\n        memset(&stream, 0, sizeof(stream));\n\n        /* In case mz_ulong is 64-bits (argh I hate longs). */\n        if ((mz_uint64)(*pSource_len | *pDest_len) > 0xFFFFFFFFU)\n            return MZ_PARAM_ERROR;\n\n        stream.next_in = pSource;\n        stream.avail_in = (mz_uint32)*pSource_len;\n        stream.next_out = pDest;\n        stream.avail_out = (mz_uint32)*pDest_len;\n\n        status = mz_inflateInit(&stream);\n        if (status != MZ_OK)\n            return status;\n\n        status = mz_inflate(&stream, MZ_FINISH);\n        *pSource_len = *pSource_len - stream.avail_in;\n        if (status != MZ_STREAM_END)\n        {\n            mz_inflateEnd(&stream);\n            return ((status == MZ_BUF_ERROR) && (!stream.avail_in)) ? MZ_DATA_ERROR : status;\n        }\n        *pDest_len = stream.total_out;\n\n        return mz_inflateEnd(&stream);\n    }\n\n    int mz_uncompress(unsigned char *pDest, mz_ulong *pDest_len, const unsigned char *pSource, mz_ulong source_len)\n    {\n        return mz_uncompress2(pDest, pDest_len, pSource, &source_len);\n    }\n\n#endif /*#ifndef MINIZ_NO_INFLATE_APIS*/\n\n    const char *mz_error(int err)\n    {\n        static struct\n        {\n            int m_err;\n            const char *m_pDesc;\n        } s_error_descs[] = {\n            { MZ_OK, \"\" }, { MZ_STREAM_END, \"stream end\" }, { MZ_NEED_DICT, \"need dictionary\" }, { MZ_ERRNO, \"file error\" }, { MZ_STREAM_ERROR, \"stream error\" }, { MZ_DATA_ERROR, \"data error\" }, { MZ_MEM_ERROR, \"out of memory\" }, { MZ_BUF_ERROR, \"buf error\" }, { MZ_VERSION_ERROR, \"version error\" }, { MZ_PARAM_ERROR, \"parameter error\" }\n        };\n        mz_uint i;\n        for (i = 0; i < sizeof(s_error_descs) / sizeof(s_error_descs[0]); ++i)\n            if (s_error_descs[i].m_err == err)\n                return s_error_descs[i].m_pDesc;\n        return NULL;\n    }\n\n#endif /*MINIZ_NO_ZLIB_APIS */\n\n#ifdef __cplusplus\n}\n#endif\n\n/*\n  This is free and unencumbered software released into the public domain.\n\n  Anyone is free to copy, modify, publish, use, compile, sell, or\n  distribute this software, either in source code form or as a compiled\n  binary, for any purpose, commercial or non-commercial, and by any\n  means.\n\n  In jurisdictions that recognize copyright laws, the author or authors\n  of this software dedicate any and all copyright interest in the\n  software to the public domain. We make this dedication for the benefit\n  of the public at large and to the detriment of our heirs and\n  successors. We intend this dedication to be an overt act of\n  relinquishment in perpetuity of all present and future rights to this\n  software under copyright law.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n  IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n  OTHER DEALINGS IN THE SOFTWARE.\n\n  For more information, please refer to <http://unlicense.org/>\n*/\n"
        },
        {
          "name": "miniz.h",
          "type": "blob",
          "size": 27.103515625,
          "content": "/* miniz.c 3.0.2 - public domain deflate/inflate, zlib-subset, ZIP reading/writing/appending, PNG writing\n   See \"unlicense\" statement at the end of this file.\n   Rich Geldreich <richgel99@gmail.com>, last updated Oct. 13, 2013\n   Implements RFC 1950: http://www.ietf.org/rfc/rfc1950.txt and RFC 1951: http://www.ietf.org/rfc/rfc1951.txt\n\n   Most API's defined in miniz.c are optional. For example, to disable the archive related functions just define\n   MINIZ_NO_ARCHIVE_APIS, or to get rid of all stdio usage define MINIZ_NO_STDIO (see the list below for more macros).\n\n   * Low-level Deflate/Inflate implementation notes:\n\n     Compression: Use the \"tdefl\" API's. The compressor supports raw, static, and dynamic blocks, lazy or\n     greedy parsing, match length filtering, RLE-only, and Huffman-only streams. It performs and compresses\n     approximately as well as zlib.\n\n     Decompression: Use the \"tinfl\" API's. The entire decompressor is implemented as a single function\n     coroutine: see tinfl_decompress(). It supports decompression into a 32KB (or larger power of 2) wrapping buffer, or into a memory\n     block large enough to hold the entire file.\n\n     The low-level tdefl/tinfl API's do not make any use of dynamic memory allocation.\n\n   * zlib-style API notes:\n\n     miniz.c implements a fairly large subset of zlib. There's enough functionality present for it to be a drop-in\n     zlib replacement in many apps:\n        The z_stream struct, optional memory allocation callbacks\n        deflateInit/deflateInit2/deflate/deflateReset/deflateEnd/deflateBound\n        inflateInit/inflateInit2/inflate/inflateReset/inflateEnd\n        compress, compress2, compressBound, uncompress\n        CRC-32, Adler-32 - Using modern, minimal code size, CPU cache friendly routines.\n        Supports raw deflate streams or standard zlib streams with adler-32 checking.\n\n     Limitations:\n      The callback API's are not implemented yet. No support for gzip headers or zlib static dictionaries.\n      I've tried to closely emulate zlib's various flavors of stream flushing and return status codes, but\n      there are no guarantees that miniz.c pulls this off perfectly.\n\n   * PNG writing: See the tdefl_write_image_to_png_file_in_memory() function, originally written by\n     Alex Evans. Supports 1-4 bytes/pixel images.\n\n   * ZIP archive API notes:\n\n     The ZIP archive API's where designed with simplicity and efficiency in mind, with just enough abstraction to\n     get the job done with minimal fuss. There are simple API's to retrieve file information, read files from\n     existing archives, create new archives, append new files to existing archives, or clone archive data from\n     one archive to another. It supports archives located in memory or the heap, on disk (using stdio.h),\n     or you can specify custom file read/write callbacks.\n\n     - Archive reading: Just call this function to read a single file from a disk archive:\n\n      void *mz_zip_extract_archive_file_to_heap(const char *pZip_filename, const char *pArchive_name,\n        size_t *pSize, mz_uint zip_flags);\n\n     For more complex cases, use the \"mz_zip_reader\" functions. Upon opening an archive, the entire central\n     directory is located and read as-is into memory, and subsequent file access only occurs when reading individual files.\n\n     - Archives file scanning: The simple way is to use this function to scan a loaded archive for a specific file:\n\n     int mz_zip_reader_locate_file(mz_zip_archive *pZip, const char *pName, const char *pComment, mz_uint flags);\n\n     The locate operation can optionally check file comments too, which (as one example) can be used to identify\n     multiple versions of the same file in an archive. This function uses a simple linear search through the central\n     directory, so it's not very fast.\n\n     Alternately, you can iterate through all the files in an archive (using mz_zip_reader_get_num_files()) and\n     retrieve detailed info on each file by calling mz_zip_reader_file_stat().\n\n     - Archive creation: Use the \"mz_zip_writer\" functions. The ZIP writer immediately writes compressed file data\n     to disk and builds an exact image of the central directory in memory. The central directory image is written\n     all at once at the end of the archive file when the archive is finalized.\n\n     The archive writer can optionally align each file's local header and file data to any power of 2 alignment,\n     which can be useful when the archive will be read from optical media. Also, the writer supports placing\n     arbitrary data blobs at the very beginning of ZIP archives. Archives written using either feature are still\n     readable by any ZIP tool.\n\n     - Archive appending: The simple way to add a single file to an archive is to call this function:\n\n      mz_bool mz_zip_add_mem_to_archive_file_in_place(const char *pZip_filename, const char *pArchive_name,\n        const void *pBuf, size_t buf_size, const void *pComment, mz_uint16 comment_size, mz_uint level_and_flags);\n\n     The archive will be created if it doesn't already exist, otherwise it'll be appended to.\n     Note the appending is done in-place and is not an atomic operation, so if something goes wrong\n     during the operation it's possible the archive could be left without a central directory (although the local\n     file headers and file data will be fine, so the archive will be recoverable).\n\n     For more complex archive modification scenarios:\n     1. The safest way is to use a mz_zip_reader to read the existing archive, cloning only those bits you want to\n     preserve into a new archive using using the mz_zip_writer_add_from_zip_reader() function (which compiles the\n     compressed file data as-is). When you're done, delete the old archive and rename the newly written archive, and\n     you're done. This is safe but requires a bunch of temporary disk space or heap memory.\n\n     2. Or, you can convert an mz_zip_reader in-place to an mz_zip_writer using mz_zip_writer_init_from_reader(),\n     append new files as needed, then finalize the archive which will write an updated central directory to the\n     original archive. (This is basically what mz_zip_add_mem_to_archive_file_in_place() does.) There's a\n     possibility that the archive's central directory could be lost with this method if anything goes wrong, though.\n\n     - ZIP archive support limitations:\n     No spanning support. Extraction functions can only handle unencrypted, stored or deflated files.\n     Requires streams capable of seeking.\n\n   * This is a header file library, like stb_image.c. To get only a header file, either cut and paste the\n     below header, or create miniz.h, #define MINIZ_HEADER_FILE_ONLY, and then include miniz.c from it.\n\n   * Important: For best perf. be sure to customize the below macros for your target platform:\n     #define MINIZ_USE_UNALIGNED_LOADS_AND_STORES 1\n     #define MINIZ_LITTLE_ENDIAN 1\n     #define MINIZ_HAS_64BIT_REGISTERS 1\n\n   * On platforms using glibc, Be sure to \"#define _LARGEFILE64_SOURCE 1\" before including miniz.c to ensure miniz\n     uses the 64-bit variants: fopen64(), stat64(), etc. Otherwise you won't be able to process large files\n     (i.e. 32-bit stat() fails for me on files > 0x7FFFFFFF bytes).\n*/\n#pragma once\n\n#include \"miniz_export.h\"\n\n/* Defines to completely disable specific portions of miniz.c:\n   If all macros here are defined the only functionality remaining will be CRC-32 and adler-32. */\n\n/* Define MINIZ_NO_STDIO to disable all usage and any functions which rely on stdio for file I/O. */\n/*#define MINIZ_NO_STDIO */\n\n/* If MINIZ_NO_TIME is specified then the ZIP archive functions will not be able to get the current time, or */\n/* get/set file times, and the C run-time funcs that get/set times won't be called. */\n/* The current downside is the times written to your archives will be from 1979. */\n/*#define MINIZ_NO_TIME */\n\n/* Define MINIZ_NO_DEFLATE_APIS to disable all compression API's. */\n/*#define MINIZ_NO_DEFLATE_APIS */\n\n/* Define MINIZ_NO_INFLATE_APIS to disable all decompression API's. */\n/*#define MINIZ_NO_INFLATE_APIS */\n\n/* Define MINIZ_NO_ARCHIVE_APIS to disable all ZIP archive API's. */\n/*#define MINIZ_NO_ARCHIVE_APIS */\n\n/* Define MINIZ_NO_ARCHIVE_WRITING_APIS to disable all writing related ZIP archive API's. */\n/*#define MINIZ_NO_ARCHIVE_WRITING_APIS */\n\n/* Define MINIZ_NO_ZLIB_APIS to remove all ZLIB-style compression/decompression API's. */\n/*#define MINIZ_NO_ZLIB_APIS */\n\n/* Define MINIZ_NO_ZLIB_COMPATIBLE_NAME to disable zlib names, to prevent conflicts against stock zlib. */\n/*#define MINIZ_NO_ZLIB_COMPATIBLE_NAMES */\n\n/* Define MINIZ_NO_MALLOC to disable all calls to malloc, free, and realloc.\n   Note if MINIZ_NO_MALLOC is defined then the user must always provide custom user alloc/free/realloc\n   callbacks to the zlib and archive API's, and a few stand-alone helper API's which don't provide custom user\n   functions (such as tdefl_compress_mem_to_heap() and tinfl_decompress_mem_to_heap()) won't work. */\n/*#define MINIZ_NO_MALLOC */\n\n#ifdef MINIZ_NO_INFLATE_APIS\n#define MINIZ_NO_ARCHIVE_APIS\n#endif\n\n#ifdef MINIZ_NO_DEFLATE_APIS\n#define MINIZ_NO_ARCHIVE_WRITING_APIS\n#endif\n\n#if defined(__TINYC__) && (defined(__linux) || defined(__linux__))\n/* TODO: Work around \"error: include file 'sys\\utime.h' when compiling with tcc on Linux */\n#define MINIZ_NO_TIME\n#endif\n\n#include <stddef.h>\n\n#if !defined(MINIZ_NO_TIME) && !defined(MINIZ_NO_ARCHIVE_APIS)\n#include <time.h>\n#endif\n\n#if defined(_M_IX86) || defined(_M_X64) || defined(__i386__) || defined(__i386) || defined(__i486__) || defined(__i486) || defined(i386) || defined(__ia64__) || defined(__x86_64__)\n/* MINIZ_X86_OR_X64_CPU is only used to help set the below macros. */\n#define MINIZ_X86_OR_X64_CPU 1\n#else\n#define MINIZ_X86_OR_X64_CPU 0\n#endif\n\n/* Set MINIZ_LITTLE_ENDIAN only if not set */\n#if !defined(MINIZ_LITTLE_ENDIAN)\n#if defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__)\n\n#if (__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)\n/* Set MINIZ_LITTLE_ENDIAN to 1 if the processor is little endian. */\n#define MINIZ_LITTLE_ENDIAN 1\n#else\n#define MINIZ_LITTLE_ENDIAN 0\n#endif\n\n#else\n\n#if MINIZ_X86_OR_X64_CPU\n#define MINIZ_LITTLE_ENDIAN 1\n#else\n#define MINIZ_LITTLE_ENDIAN 0\n#endif\n\n#endif\n#endif\n\n/* Using unaligned loads and stores causes errors when using UBSan */\n#if defined(__has_feature)\n#if __has_feature(undefined_behavior_sanitizer)\n#define MINIZ_USE_UNALIGNED_LOADS_AND_STORES 0\n#endif\n#endif\n\n/* Set MINIZ_USE_UNALIGNED_LOADS_AND_STORES only if not set */\n#if !defined(MINIZ_USE_UNALIGNED_LOADS_AND_STORES)\n#if MINIZ_X86_OR_X64_CPU\n/* Set MINIZ_USE_UNALIGNED_LOADS_AND_STORES to 1 on CPU's that permit efficient integer loads and stores from unaligned addresses. */\n#define MINIZ_USE_UNALIGNED_LOADS_AND_STORES 0\n#define MINIZ_UNALIGNED_USE_MEMCPY\n#else\n#define MINIZ_USE_UNALIGNED_LOADS_AND_STORES 0\n#endif\n#endif\n\n#if defined(_M_X64) || defined(_WIN64) || defined(__MINGW64__) || defined(_LP64) || defined(__LP64__) || defined(__ia64__) || defined(__x86_64__)\n/* Set MINIZ_HAS_64BIT_REGISTERS to 1 if operations on 64-bit integers are reasonably fast (and don't involve compiler generated calls to helper functions). */\n#define MINIZ_HAS_64BIT_REGISTERS 1\n#else\n#define MINIZ_HAS_64BIT_REGISTERS 0\n#endif\n\n#ifdef __cplusplus\nextern \"C\"\n{\n#endif\n\n    /* ------------------- zlib-style API Definitions. */\n\n    /* For more compatibility with zlib, miniz.c uses unsigned long for some parameters/struct members. Beware: mz_ulong can be either 32 or 64-bits! */\n    typedef unsigned long mz_ulong;\n\n    /* mz_free() internally uses the MZ_FREE() macro (which by default calls free() unless you've modified the MZ_MALLOC macro) to release a block allocated from the heap. */\n    MINIZ_EXPORT void mz_free(void *p);\n\n#define MZ_ADLER32_INIT (1)\n    /* mz_adler32() returns the initial adler-32 value to use when called with ptr==NULL. */\n    MINIZ_EXPORT mz_ulong mz_adler32(mz_ulong adler, const unsigned char *ptr, size_t buf_len);\n\n#define MZ_CRC32_INIT (0)\n    /* mz_crc32() returns the initial CRC-32 value to use when called with ptr==NULL. */\n    MINIZ_EXPORT mz_ulong mz_crc32(mz_ulong crc, const unsigned char *ptr, size_t buf_len);\n\n    /* Compression strategies. */\n    enum\n    {\n        MZ_DEFAULT_STRATEGY = 0,\n        MZ_FILTERED = 1,\n        MZ_HUFFMAN_ONLY = 2,\n        MZ_RLE = 3,\n        MZ_FIXED = 4\n    };\n\n/* Method */\n#define MZ_DEFLATED 8\n\n    /* Heap allocation callbacks.\n    Note that mz_alloc_func parameter types purposely differ from zlib's: items/size is size_t, not unsigned long. */\n    typedef void *(*mz_alloc_func)(void *opaque, size_t items, size_t size);\n    typedef void (*mz_free_func)(void *opaque, void *address);\n    typedef void *(*mz_realloc_func)(void *opaque, void *address, size_t items, size_t size);\n\n    /* Compression levels: 0-9 are the standard zlib-style levels, 10 is best possible compression (not zlib compatible, and may be very slow), MZ_DEFAULT_COMPRESSION=MZ_DEFAULT_LEVEL. */\n    enum\n    {\n        MZ_NO_COMPRESSION = 0,\n        MZ_BEST_SPEED = 1,\n        MZ_BEST_COMPRESSION = 9,\n        MZ_UBER_COMPRESSION = 10,\n        MZ_DEFAULT_LEVEL = 6,\n        MZ_DEFAULT_COMPRESSION = -1\n    };\n\n#define MZ_VERSION \"11.0.2\"\n#define MZ_VERNUM 0xB002\n#define MZ_VER_MAJOR 11\n#define MZ_VER_MINOR 2\n#define MZ_VER_REVISION 0\n#define MZ_VER_SUBREVISION 0\n\n#ifndef MINIZ_NO_ZLIB_APIS\n\n    /* Flush values. For typical usage you only need MZ_NO_FLUSH and MZ_FINISH. The other values are for advanced use (refer to the zlib docs). */\n    enum\n    {\n        MZ_NO_FLUSH = 0,\n        MZ_PARTIAL_FLUSH = 1,\n        MZ_SYNC_FLUSH = 2,\n        MZ_FULL_FLUSH = 3,\n        MZ_FINISH = 4,\n        MZ_BLOCK = 5\n    };\n\n    /* Return status codes. MZ_PARAM_ERROR is non-standard. */\n    enum\n    {\n        MZ_OK = 0,\n        MZ_STREAM_END = 1,\n        MZ_NEED_DICT = 2,\n        MZ_ERRNO = -1,\n        MZ_STREAM_ERROR = -2,\n        MZ_DATA_ERROR = -3,\n        MZ_MEM_ERROR = -4,\n        MZ_BUF_ERROR = -5,\n        MZ_VERSION_ERROR = -6,\n        MZ_PARAM_ERROR = -10000\n    };\n\n/* Window bits */\n#define MZ_DEFAULT_WINDOW_BITS 15\n\n    struct mz_internal_state;\n\n    /* Compression/decompression stream struct. */\n    typedef struct mz_stream_s\n    {\n        const unsigned char *next_in; /* pointer to next byte to read */\n        unsigned int avail_in;        /* number of bytes available at next_in */\n        mz_ulong total_in;            /* total number of bytes consumed so far */\n\n        unsigned char *next_out; /* pointer to next byte to write */\n        unsigned int avail_out;  /* number of bytes that can be written to next_out */\n        mz_ulong total_out;      /* total number of bytes produced so far */\n\n        char *msg;                       /* error msg (unused) */\n        struct mz_internal_state *state; /* internal state, allocated by zalloc/zfree */\n\n        mz_alloc_func zalloc; /* optional heap allocation function (defaults to malloc) */\n        mz_free_func zfree;   /* optional heap free function (defaults to free) */\n        void *opaque;         /* heap alloc function user pointer */\n\n        int data_type;     /* data_type (unused) */\n        mz_ulong adler;    /* adler32 of the source or uncompressed data */\n        mz_ulong reserved; /* not used */\n    } mz_stream;\n\n    typedef mz_stream *mz_streamp;\n\n    /* Returns the version string of miniz.c. */\n    MINIZ_EXPORT const char *mz_version(void);\n\n#ifndef MINIZ_NO_DEFLATE_APIS\n\n    /* mz_deflateInit() initializes a compressor with default options: */\n    /* Parameters: */\n    /*  pStream must point to an initialized mz_stream struct. */\n    /*  level must be between [MZ_NO_COMPRESSION, MZ_BEST_COMPRESSION]. */\n    /*  level 1 enables a specially optimized compression function that's been optimized purely for performance, not ratio. */\n    /*  (This special func. is currently only enabled when MINIZ_USE_UNALIGNED_LOADS_AND_STORES and MINIZ_LITTLE_ENDIAN are defined.) */\n    /* Return values: */\n    /*  MZ_OK on success. */\n    /*  MZ_STREAM_ERROR if the stream is bogus. */\n    /*  MZ_PARAM_ERROR if the input parameters are bogus. */\n    /*  MZ_MEM_ERROR on out of memory. */\n    MINIZ_EXPORT int mz_deflateInit(mz_streamp pStream, int level);\n\n    /* mz_deflateInit2() is like mz_deflate(), except with more control: */\n    /* Additional parameters: */\n    /*   method must be MZ_DEFLATED */\n    /*   window_bits must be MZ_DEFAULT_WINDOW_BITS (to wrap the deflate stream with zlib header/adler-32 footer) or -MZ_DEFAULT_WINDOW_BITS (raw deflate/no header or footer) */\n    /*   mem_level must be between [1, 9] (it's checked but ignored by miniz.c) */\n    MINIZ_EXPORT int mz_deflateInit2(mz_streamp pStream, int level, int method, int window_bits, int mem_level, int strategy);\n\n    /* Quickly resets a compressor without having to reallocate anything. Same as calling mz_deflateEnd() followed by mz_deflateInit()/mz_deflateInit2(). */\n    MINIZ_EXPORT int mz_deflateReset(mz_streamp pStream);\n\n    /* mz_deflate() compresses the input to output, consuming as much of the input and producing as much output as possible. */\n    /* Parameters: */\n    /*   pStream is the stream to read from and write to. You must initialize/update the next_in, avail_in, next_out, and avail_out members. */\n    /*   flush may be MZ_NO_FLUSH, MZ_PARTIAL_FLUSH/MZ_SYNC_FLUSH, MZ_FULL_FLUSH, or MZ_FINISH. */\n    /* Return values: */\n    /*   MZ_OK on success (when flushing, or if more input is needed but not available, and/or there's more output to be written but the output buffer is full). */\n    /*   MZ_STREAM_END if all input has been consumed and all output bytes have been written. Don't call mz_deflate() on the stream anymore. */\n    /*   MZ_STREAM_ERROR if the stream is bogus. */\n    /*   MZ_PARAM_ERROR if one of the parameters is invalid. */\n    /*   MZ_BUF_ERROR if no forward progress is possible because the input and/or output buffers are empty. (Fill up the input buffer or free up some output space and try again.) */\n    MINIZ_EXPORT int mz_deflate(mz_streamp pStream, int flush);\n\n    /* mz_deflateEnd() deinitializes a compressor: */\n    /* Return values: */\n    /*  MZ_OK on success. */\n    /*  MZ_STREAM_ERROR if the stream is bogus. */\n    MINIZ_EXPORT int mz_deflateEnd(mz_streamp pStream);\n\n    /* mz_deflateBound() returns a (very) conservative upper bound on the amount of data that could be generated by deflate(), assuming flush is set to only MZ_NO_FLUSH or MZ_FINISH. */\n    MINIZ_EXPORT mz_ulong mz_deflateBound(mz_streamp pStream, mz_ulong source_len);\n\n    /* Single-call compression functions mz_compress() and mz_compress2(): */\n    /* Returns MZ_OK on success, or one of the error codes from mz_deflate() on failure. */\n    MINIZ_EXPORT int mz_compress(unsigned char *pDest, mz_ulong *pDest_len, const unsigned char *pSource, mz_ulong source_len);\n    MINIZ_EXPORT int mz_compress2(unsigned char *pDest, mz_ulong *pDest_len, const unsigned char *pSource, mz_ulong source_len, int level);\n\n    /* mz_compressBound() returns a (very) conservative upper bound on the amount of data that could be generated by calling mz_compress(). */\n    MINIZ_EXPORT mz_ulong mz_compressBound(mz_ulong source_len);\n\n#endif /*#ifndef MINIZ_NO_DEFLATE_APIS*/\n\n#ifndef MINIZ_NO_INFLATE_APIS\n\n    /* Initializes a decompressor. */\n    MINIZ_EXPORT int mz_inflateInit(mz_streamp pStream);\n\n    /* mz_inflateInit2() is like mz_inflateInit() with an additional option that controls the window size and whether or not the stream has been wrapped with a zlib header/footer: */\n    /* window_bits must be MZ_DEFAULT_WINDOW_BITS (to parse zlib header/footer) or -MZ_DEFAULT_WINDOW_BITS (raw deflate). */\n    MINIZ_EXPORT int mz_inflateInit2(mz_streamp pStream, int window_bits);\n\n    /* Quickly resets a compressor without having to reallocate anything. Same as calling mz_inflateEnd() followed by mz_inflateInit()/mz_inflateInit2(). */\n    MINIZ_EXPORT int mz_inflateReset(mz_streamp pStream);\n\n    /* Decompresses the input stream to the output, consuming only as much of the input as needed, and writing as much to the output as possible. */\n    /* Parameters: */\n    /*   pStream is the stream to read from and write to. You must initialize/update the next_in, avail_in, next_out, and avail_out members. */\n    /*   flush may be MZ_NO_FLUSH, MZ_SYNC_FLUSH, or MZ_FINISH. */\n    /*   On the first call, if flush is MZ_FINISH it's assumed the input and output buffers are both sized large enough to decompress the entire stream in a single call (this is slightly faster). */\n    /*   MZ_FINISH implies that there are no more source bytes available beside what's already in the input buffer, and that the output buffer is large enough to hold the rest of the decompressed data. */\n    /* Return values: */\n    /*   MZ_OK on success. Either more input is needed but not available, and/or there's more output to be written but the output buffer is full. */\n    /*   MZ_STREAM_END if all needed input has been consumed and all output bytes have been written. For zlib streams, the adler-32 of the decompressed data has also been verified. */\n    /*   MZ_STREAM_ERROR if the stream is bogus. */\n    /*   MZ_DATA_ERROR if the deflate stream is invalid. */\n    /*   MZ_PARAM_ERROR if one of the parameters is invalid. */\n    /*   MZ_BUF_ERROR if no forward progress is possible because the input buffer is empty but the inflater needs more input to continue, or if the output buffer is not large enough. Call mz_inflate() again */\n    /*   with more input data, or with more room in the output buffer (except when using single call decompression, described above). */\n    MINIZ_EXPORT int mz_inflate(mz_streamp pStream, int flush);\n\n    /* Deinitializes a decompressor. */\n    MINIZ_EXPORT int mz_inflateEnd(mz_streamp pStream);\n\n    /* Single-call decompression. */\n    /* Returns MZ_OK on success, or one of the error codes from mz_inflate() on failure. */\n    MINIZ_EXPORT int mz_uncompress(unsigned char *pDest, mz_ulong *pDest_len, const unsigned char *pSource, mz_ulong source_len);\n    MINIZ_EXPORT int mz_uncompress2(unsigned char *pDest, mz_ulong *pDest_len, const unsigned char *pSource, mz_ulong *pSource_len);\n#endif /*#ifndef MINIZ_NO_INFLATE_APIS*/\n\n    /* Returns a string description of the specified error code, or NULL if the error code is invalid. */\n    MINIZ_EXPORT const char *mz_error(int err);\n\n/* Redefine zlib-compatible names to miniz equivalents, so miniz.c can be used as a drop-in replacement for the subset of zlib that miniz.c supports. */\n/* Define MINIZ_NO_ZLIB_COMPATIBLE_NAMES to disable zlib-compatibility if you use zlib in the same project. */\n#ifndef MINIZ_NO_ZLIB_COMPATIBLE_NAMES\n    typedef unsigned char Byte;\n    typedef unsigned int uInt;\n    typedef mz_ulong uLong;\n    typedef Byte Bytef;\n    typedef uInt uIntf;\n    typedef char charf;\n    typedef int intf;\n    typedef void *voidpf;\n    typedef uLong uLongf;\n    typedef void *voidp;\n    typedef void *const voidpc;\n#define Z_NULL 0\n#define Z_NO_FLUSH MZ_NO_FLUSH\n#define Z_PARTIAL_FLUSH MZ_PARTIAL_FLUSH\n#define Z_SYNC_FLUSH MZ_SYNC_FLUSH\n#define Z_FULL_FLUSH MZ_FULL_FLUSH\n#define Z_FINISH MZ_FINISH\n#define Z_BLOCK MZ_BLOCK\n#define Z_OK MZ_OK\n#define Z_STREAM_END MZ_STREAM_END\n#define Z_NEED_DICT MZ_NEED_DICT\n#define Z_ERRNO MZ_ERRNO\n#define Z_STREAM_ERROR MZ_STREAM_ERROR\n#define Z_DATA_ERROR MZ_DATA_ERROR\n#define Z_MEM_ERROR MZ_MEM_ERROR\n#define Z_BUF_ERROR MZ_BUF_ERROR\n#define Z_VERSION_ERROR MZ_VERSION_ERROR\n#define Z_PARAM_ERROR MZ_PARAM_ERROR\n#define Z_NO_COMPRESSION MZ_NO_COMPRESSION\n#define Z_BEST_SPEED MZ_BEST_SPEED\n#define Z_BEST_COMPRESSION MZ_BEST_COMPRESSION\n#define Z_DEFAULT_COMPRESSION MZ_DEFAULT_COMPRESSION\n#define Z_DEFAULT_STRATEGY MZ_DEFAULT_STRATEGY\n#define Z_FILTERED MZ_FILTERED\n#define Z_HUFFMAN_ONLY MZ_HUFFMAN_ONLY\n#define Z_RLE MZ_RLE\n#define Z_FIXED MZ_FIXED\n#define Z_DEFLATED MZ_DEFLATED\n#define Z_DEFAULT_WINDOW_BITS MZ_DEFAULT_WINDOW_BITS\n    /* See mz_alloc_func */\n    typedef void *(*alloc_func)(void *opaque, size_t items, size_t size);\n    /* See mz_free_func */\n    typedef void (*free_func)(void *opaque, void *address);\n\n#define internal_state mz_internal_state\n#define z_stream mz_stream\n\n#ifndef MINIZ_NO_DEFLATE_APIS\n    /* Compatiblity with zlib API. See called functions for documentation */\n    static int deflateInit(mz_streamp pStream, int level)\n    {\n        return mz_deflateInit(pStream, level);\n    }\n    static int deflateInit2(mz_streamp pStream, int level, int method, int window_bits, int mem_level, int strategy)\n    {\n        return mz_deflateInit2(pStream, level, method, window_bits, mem_level, strategy);\n    }\n    static int deflateReset(mz_streamp pStream)\n    {\n        return mz_deflateReset(pStream);\n    }\n    static int deflate(mz_streamp pStream, int flush)\n    {\n        return mz_deflate(pStream, flush);\n    }\n    static int deflateEnd(mz_streamp pStream)\n    {\n        return mz_deflateEnd(pStream);\n    }\n    static mz_ulong deflateBound(mz_streamp pStream, mz_ulong source_len)\n    {\n        return mz_deflateBound(pStream, source_len);\n    }\n    static int compress(unsigned char *pDest, mz_ulong *pDest_len, const unsigned char *pSource, mz_ulong source_len)\n    {\n        return mz_compress(pDest, pDest_len, pSource, source_len);\n    }\n    static int compress2(unsigned char *pDest, mz_ulong *pDest_len, const unsigned char *pSource, mz_ulong source_len, int level)\n    {\n        return mz_compress2(pDest, pDest_len, pSource, source_len, level);\n    }\n    static mz_ulong compressBound(mz_ulong source_len)\n    {\n        return mz_compressBound(source_len);\n    }\n#endif /*#ifndef MINIZ_NO_DEFLATE_APIS*/\n\n#ifndef MINIZ_NO_INFLATE_APIS\n    /* Compatiblity with zlib API. See called functions for documentation */\n    static int inflateInit(mz_streamp pStream)\n    {\n        return mz_inflateInit(pStream);\n    }\n\n    static int inflateInit2(mz_streamp pStream, int window_bits)\n    {\n        return mz_inflateInit2(pStream, window_bits);\n    }\n\n    static int inflateReset(mz_streamp pStream)\n    {\n        return mz_inflateReset(pStream);\n    }\n\n    static int inflate(mz_streamp pStream, int flush)\n    {\n        return mz_inflate(pStream, flush);\n    }\n\n    static int inflateEnd(mz_streamp pStream)\n    {\n        return mz_inflateEnd(pStream);\n    }\n\n    static int uncompress(unsigned char* pDest, mz_ulong* pDest_len, const unsigned char* pSource, mz_ulong source_len)\n    {\n        return mz_uncompress(pDest, pDest_len, pSource, source_len);\n    }\n\n    static int uncompress2(unsigned char* pDest, mz_ulong* pDest_len, const unsigned char* pSource, mz_ulong* pSource_len)\n    {\n        return mz_uncompress2(pDest, pDest_len, pSource, pSource_len);\n    }\n#endif /*#ifndef MINIZ_NO_INFLATE_APIS*/\n\n    static mz_ulong crc32(mz_ulong crc, const unsigned char *ptr, size_t buf_len)\n    {\n        return mz_crc32(crc, ptr, buf_len);\n    }\n\n    static mz_ulong adler32(mz_ulong adler, const unsigned char *ptr, size_t buf_len)\n    {\n        return mz_adler32(adler, ptr, buf_len);\n    }\n    \n#define MAX_WBITS 15\n#define MAX_MEM_LEVEL 9\n\n    static const char* zError(int err)\n    {\n        return mz_error(err);\n    }\n#define ZLIB_VERSION MZ_VERSION\n#define ZLIB_VERNUM MZ_VERNUM\n#define ZLIB_VER_MAJOR MZ_VER_MAJOR\n#define ZLIB_VER_MINOR MZ_VER_MINOR\n#define ZLIB_VER_REVISION MZ_VER_REVISION\n#define ZLIB_VER_SUBREVISION MZ_VER_SUBREVISION\n\n#define zlibVersion mz_version\n#define zlib_version mz_version()\n#endif /* #ifndef MINIZ_NO_ZLIB_COMPATIBLE_NAMES */\n\n#endif /* MINIZ_NO_ZLIB_APIS */\n\n#ifdef __cplusplus\n}\n#endif\n\n#include \"miniz_common.h\"\n#include \"miniz_tdef.h\"\n#include \"miniz_tinfl.h\"\n#include \"miniz_zip.h\""
        },
        {
          "name": "miniz.pc.in",
          "type": "blob",
          "size": 0.3232421875,
          "content": "prefix=@CMAKE_INSTALL_PREFIX@\nexec_prefix=${prefix}\nlibdir=${exec_prefix}/@CMAKE_INSTALL_LIBDIR@\nincludedir=${prefix}/@CMAKE_INSTALL_INCLUDEDIR@/@PROJECT_NAME@\n\nName: @PROJECT_NAME@\nDescription: @PROJECT_DESCRIPTION@\nVersion: @MINIZ_VERSION@\nURL: @PROJECT_HOMEPAGE_URL@\n\nRequires:\nLibs: -L${libdir} -lminiz\nCflags: -I${includedir}\n"
        },
        {
          "name": "miniz_common.h",
          "type": "blob",
          "size": 2.6552734375,
          "content": "#pragma once\n#include <assert.h>\n#include <stdint.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include \"miniz_export.h\"\n\n/* ------------------- Types and macros */\ntypedef unsigned char mz_uint8;\ntypedef int16_t mz_int16;\ntypedef uint16_t mz_uint16;\ntypedef uint32_t mz_uint32;\ntypedef uint32_t mz_uint;\ntypedef int64_t mz_int64;\ntypedef uint64_t mz_uint64;\ntypedef int mz_bool;\n\n#define MZ_FALSE (0)\n#define MZ_TRUE (1)\n\n/* Works around MSVC's spammy \"warning C4127: conditional expression is constant\" message. */\n#ifdef _MSC_VER\n#define MZ_MACRO_END while (0, 0)\n#else\n#define MZ_MACRO_END while (0)\n#endif\n\n#ifdef MINIZ_NO_STDIO\n#define MZ_FILE void *\n#else\n#include <stdio.h>\n#define MZ_FILE FILE\n#endif /* #ifdef MINIZ_NO_STDIO */\n\n#ifdef MINIZ_NO_TIME\ntypedef struct mz_dummy_time_t_tag\n{\n    mz_uint32 m_dummy1;\n    mz_uint32 m_dummy2;\n} mz_dummy_time_t;\n#define MZ_TIME_T mz_dummy_time_t\n#else\n#define MZ_TIME_T time_t\n#endif\n\n#define MZ_ASSERT(x) assert(x)\n\n#ifdef MINIZ_NO_MALLOC\n#define MZ_MALLOC(x) NULL\n#define MZ_FREE(x) (void)x, ((void)0)\n#define MZ_REALLOC(p, x) NULL\n#else\n#define MZ_MALLOC(x) malloc(x)\n#define MZ_FREE(x) free(x)\n#define MZ_REALLOC(p, x) realloc(p, x)\n#endif\n\n#define MZ_MAX(a, b) (((a) > (b)) ? (a) : (b))\n#define MZ_MIN(a, b) (((a) < (b)) ? (a) : (b))\n#define MZ_CLEAR_OBJ(obj) memset(&(obj), 0, sizeof(obj))\n#define MZ_CLEAR_ARR(obj) memset((obj), 0, sizeof(obj))\n#define MZ_CLEAR_PTR(obj) memset((obj), 0, sizeof(*obj))\n\n#if MINIZ_USE_UNALIGNED_LOADS_AND_STORES && MINIZ_LITTLE_ENDIAN\n#define MZ_READ_LE16(p) *((const mz_uint16 *)(p))\n#define MZ_READ_LE32(p) *((const mz_uint32 *)(p))\n#else\n#define MZ_READ_LE16(p) ((mz_uint32)(((const mz_uint8 *)(p))[0]) | ((mz_uint32)(((const mz_uint8 *)(p))[1]) << 8U))\n#define MZ_READ_LE32(p) ((mz_uint32)(((const mz_uint8 *)(p))[0]) | ((mz_uint32)(((const mz_uint8 *)(p))[1]) << 8U) | ((mz_uint32)(((const mz_uint8 *)(p))[2]) << 16U) | ((mz_uint32)(((const mz_uint8 *)(p))[3]) << 24U))\n#endif\n\n#define MZ_READ_LE64(p) (((mz_uint64)MZ_READ_LE32(p)) | (((mz_uint64)MZ_READ_LE32((const mz_uint8 *)(p) + sizeof(mz_uint32))) << 32U))\n\n#ifdef _MSC_VER\n#define MZ_FORCEINLINE __forceinline\n#elif defined(__GNUC__)\n#define MZ_FORCEINLINE __inline__ __attribute__((__always_inline__))\n#else\n#define MZ_FORCEINLINE inline\n#endif\n\n#ifdef __cplusplus\nextern \"C\"\n{\n#endif\n\n    extern MINIZ_EXPORT void *miniz_def_alloc_func(void *opaque, size_t items, size_t size);\n    extern MINIZ_EXPORT void miniz_def_free_func(void *opaque, void *address);\n    extern MINIZ_EXPORT void *miniz_def_realloc_func(void *opaque, void *address, size_t items, size_t size);\n\n#define MZ_UINT16_MAX (0xFFFFU)\n#define MZ_UINT32_MAX (0xFFFFFFFFU)\n\n#ifdef __cplusplus\n}\n#endif\n"
        },
        {
          "name": "miniz_tdef.c",
          "type": "blob",
          "size": 73.5947265625,
          "content": "/**************************************************************************\n *\n * Copyright 2013-2014 RAD Game Tools and Valve Software\n * Copyright 2010-2014 Rich Geldreich and Tenacious Software LLC\n * All Rights Reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n **************************************************************************/\n\n#include \"miniz.h\"\n\n#ifndef MINIZ_NO_DEFLATE_APIS\n\n#ifdef __cplusplus\nextern \"C\"\n{\n#endif\n\n    /* ------------------- Low-level Compression (independent from all decompression API's) */\n\n    /* Purposely making these tables static for faster init and thread safety. */\n    static const mz_uint16 s_tdefl_len_sym[256] = {\n        257, 258, 259, 260, 261, 262, 263, 264, 265, 265, 266, 266, 267, 267, 268, 268, 269, 269, 269, 269, 270, 270, 270, 270, 271, 271, 271, 271, 272, 272, 272, 272,\n        273, 273, 273, 273, 273, 273, 273, 273, 274, 274, 274, 274, 274, 274, 274, 274, 275, 275, 275, 275, 275, 275, 275, 275, 276, 276, 276, 276, 276, 276, 276, 276,\n        277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278,\n        279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280,\n        281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281,\n        282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282,\n        283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283,\n        284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 285\n    };\n\n    static const mz_uint8 s_tdefl_len_extra[256] = {\n        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n        4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0\n    };\n\n    static const mz_uint8 s_tdefl_small_dist_sym[512] = {\n        0, 1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11,\n        11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13,\n        13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n        14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n        14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n        15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,\n        16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,\n        16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,\n        16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n        17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n        17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n        17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17\n    };\n\n    static const mz_uint8 s_tdefl_small_dist_extra[512] = {\n        0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5,\n        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\n        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\n        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\n        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\n        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\n        7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\n        7, 7, 7, 7, 7, 7, 7, 7\n    };\n\n    static const mz_uint8 s_tdefl_large_dist_sym[128] = {\n        0, 0, 18, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n        26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,\n        28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29\n    };\n\n    static const mz_uint8 s_tdefl_large_dist_extra[128] = {\n        0, 0, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n        12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n        13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13\n    };\n\n    /* Radix sorts tdefl_sym_freq[] array by 16-bit key m_key. Returns ptr to sorted values. */\n    typedef struct\n    {\n        mz_uint16 m_key, m_sym_index;\n    } tdefl_sym_freq;\n    static tdefl_sym_freq *tdefl_radix_sort_syms(mz_uint num_syms, tdefl_sym_freq *pSyms0, tdefl_sym_freq *pSyms1)\n    {\n        mz_uint32 total_passes = 2, pass_shift, pass, i, hist[256 * 2];\n        tdefl_sym_freq *pCur_syms = pSyms0, *pNew_syms = pSyms1;\n        MZ_CLEAR_ARR(hist);\n        for (i = 0; i < num_syms; i++)\n        {\n            mz_uint freq = pSyms0[i].m_key;\n            hist[freq & 0xFF]++;\n            hist[256 + ((freq >> 8) & 0xFF)]++;\n        }\n        while ((total_passes > 1) && (num_syms == hist[(total_passes - 1) * 256]))\n            total_passes--;\n        for (pass_shift = 0, pass = 0; pass < total_passes; pass++, pass_shift += 8)\n        {\n            const mz_uint32 *pHist = &hist[pass << 8];\n            mz_uint offsets[256], cur_ofs = 0;\n            for (i = 0; i < 256; i++)\n            {\n                offsets[i] = cur_ofs;\n                cur_ofs += pHist[i];\n            }\n            for (i = 0; i < num_syms; i++)\n                pNew_syms[offsets[(pCur_syms[i].m_key >> pass_shift) & 0xFF]++] = pCur_syms[i];\n            {\n                tdefl_sym_freq *t = pCur_syms;\n                pCur_syms = pNew_syms;\n                pNew_syms = t;\n            }\n        }\n        return pCur_syms;\n    }\n\n    /* tdefl_calculate_minimum_redundancy() originally written by: Alistair Moffat, alistair@cs.mu.oz.au, Jyrki Katajainen, jyrki@diku.dk, November 1996. */\n    static void tdefl_calculate_minimum_redundancy(tdefl_sym_freq *A, int n)\n    {\n        int root, leaf, next, avbl, used, dpth;\n        if (n == 0)\n            return;\n        else if (n == 1)\n        {\n            A[0].m_key = 1;\n            return;\n        }\n        A[0].m_key += A[1].m_key;\n        root = 0;\n        leaf = 2;\n        for (next = 1; next < n - 1; next++)\n        {\n            if (leaf >= n || A[root].m_key < A[leaf].m_key)\n            {\n                A[next].m_key = A[root].m_key;\n                A[root++].m_key = (mz_uint16)next;\n            }\n            else\n                A[next].m_key = A[leaf++].m_key;\n            if (leaf >= n || (root < next && A[root].m_key < A[leaf].m_key))\n            {\n                A[next].m_key = (mz_uint16)(A[next].m_key + A[root].m_key);\n                A[root++].m_key = (mz_uint16)next;\n            }\n            else\n                A[next].m_key = (mz_uint16)(A[next].m_key + A[leaf++].m_key);\n        }\n        A[n - 2].m_key = 0;\n        for (next = n - 3; next >= 0; next--)\n            A[next].m_key = A[A[next].m_key].m_key + 1;\n        avbl = 1;\n        used = dpth = 0;\n        root = n - 2;\n        next = n - 1;\n        while (avbl > 0)\n        {\n            while (root >= 0 && (int)A[root].m_key == dpth)\n            {\n                used++;\n                root--;\n            }\n            while (avbl > used)\n            {\n                A[next--].m_key = (mz_uint16)(dpth);\n                avbl--;\n            }\n            avbl = 2 * used;\n            dpth++;\n            used = 0;\n        }\n    }\n\n    /* Limits canonical Huffman code table's max code size. */\n    enum\n    {\n        TDEFL_MAX_SUPPORTED_HUFF_CODESIZE = 32\n    };\n    static void tdefl_huffman_enforce_max_code_size(int *pNum_codes, int code_list_len, int max_code_size)\n    {\n        int i;\n        mz_uint32 total = 0;\n        if (code_list_len <= 1)\n            return;\n        for (i = max_code_size + 1; i <= TDEFL_MAX_SUPPORTED_HUFF_CODESIZE; i++)\n            pNum_codes[max_code_size] += pNum_codes[i];\n        for (i = max_code_size; i > 0; i--)\n            total += (((mz_uint32)pNum_codes[i]) << (max_code_size - i));\n        while (total != (1UL << max_code_size))\n        {\n            pNum_codes[max_code_size]--;\n            for (i = max_code_size - 1; i > 0; i--)\n                if (pNum_codes[i])\n                {\n                    pNum_codes[i]--;\n                    pNum_codes[i + 1] += 2;\n                    break;\n                }\n            total--;\n        }\n    }\n\n    static void tdefl_optimize_huffman_table(tdefl_compressor *d, int table_num, int table_len, int code_size_limit, int static_table)\n    {\n        int i, j, l, num_codes[1 + TDEFL_MAX_SUPPORTED_HUFF_CODESIZE];\n        mz_uint next_code[TDEFL_MAX_SUPPORTED_HUFF_CODESIZE + 1];\n        MZ_CLEAR_ARR(num_codes);\n        if (static_table)\n        {\n            for (i = 0; i < table_len; i++)\n                num_codes[d->m_huff_code_sizes[table_num][i]]++;\n        }\n        else\n        {\n            tdefl_sym_freq syms0[TDEFL_MAX_HUFF_SYMBOLS], syms1[TDEFL_MAX_HUFF_SYMBOLS], *pSyms;\n            int num_used_syms = 0;\n            const mz_uint16 *pSym_count = &d->m_huff_count[table_num][0];\n            for (i = 0; i < table_len; i++)\n                if (pSym_count[i])\n                {\n                    syms0[num_used_syms].m_key = (mz_uint16)pSym_count[i];\n                    syms0[num_used_syms++].m_sym_index = (mz_uint16)i;\n                }\n\n            pSyms = tdefl_radix_sort_syms(num_used_syms, syms0, syms1);\n            tdefl_calculate_minimum_redundancy(pSyms, num_used_syms);\n\n            for (i = 0; i < num_used_syms; i++)\n                num_codes[pSyms[i].m_key]++;\n\n            tdefl_huffman_enforce_max_code_size(num_codes, num_used_syms, code_size_limit);\n\n            MZ_CLEAR_ARR(d->m_huff_code_sizes[table_num]);\n            MZ_CLEAR_ARR(d->m_huff_codes[table_num]);\n            for (i = 1, j = num_used_syms; i <= code_size_limit; i++)\n                for (l = num_codes[i]; l > 0; l--)\n                    d->m_huff_code_sizes[table_num][pSyms[--j].m_sym_index] = (mz_uint8)(i);\n        }\n\n        next_code[1] = 0;\n        for (j = 0, i = 2; i <= code_size_limit; i++)\n            next_code[i] = j = ((j + num_codes[i - 1]) << 1);\n\n        for (i = 0; i < table_len; i++)\n        {\n            mz_uint rev_code = 0, code, code_size;\n            if ((code_size = d->m_huff_code_sizes[table_num][i]) == 0)\n                continue;\n            code = next_code[code_size]++;\n            for (l = code_size; l > 0; l--, code >>= 1)\n                rev_code = (rev_code << 1) | (code & 1);\n            d->m_huff_codes[table_num][i] = (mz_uint16)rev_code;\n        }\n    }\n\n#define TDEFL_PUT_BITS(b, l)                                       \\\n    do                                                             \\\n    {                                                              \\\n        mz_uint bits = b;                                          \\\n        mz_uint len = l;                                           \\\n        MZ_ASSERT(bits <= ((1U << len) - 1U));                     \\\n        d->m_bit_buffer |= (bits << d->m_bits_in);                 \\\n        d->m_bits_in += len;                                       \\\n        while (d->m_bits_in >= 8)                                  \\\n        {                                                          \\\n            if (d->m_pOutput_buf < d->m_pOutput_buf_end)           \\\n                *d->m_pOutput_buf++ = (mz_uint8)(d->m_bit_buffer); \\\n            d->m_bit_buffer >>= 8;                                 \\\n            d->m_bits_in -= 8;                                     \\\n        }                                                          \\\n    }                                                              \\\n    MZ_MACRO_END\n\n#define TDEFL_RLE_PREV_CODE_SIZE()                                                                                       \\\n    {                                                                                                                    \\\n        if (rle_repeat_count)                                                                                            \\\n        {                                                                                                                \\\n            if (rle_repeat_count < 3)                                                                                    \\\n            {                                                                                                            \\\n                d->m_huff_count[2][prev_code_size] = (mz_uint16)(d->m_huff_count[2][prev_code_size] + rle_repeat_count); \\\n                while (rle_repeat_count--)                                                                               \\\n                    packed_code_sizes[num_packed_code_sizes++] = prev_code_size;                                         \\\n            }                                                                                                            \\\n            else                                                                                                         \\\n            {                                                                                                            \\\n                d->m_huff_count[2][16] = (mz_uint16)(d->m_huff_count[2][16] + 1);                                        \\\n                packed_code_sizes[num_packed_code_sizes++] = 16;                                                         \\\n                packed_code_sizes[num_packed_code_sizes++] = (mz_uint8)(rle_repeat_count - 3);                           \\\n            }                                                                                                            \\\n            rle_repeat_count = 0;                                                                                        \\\n        }                                                                                                                \\\n    }\n\n#define TDEFL_RLE_ZERO_CODE_SIZE()                                                         \\\n    {                                                                                      \\\n        if (rle_z_count)                                                                   \\\n        {                                                                                  \\\n            if (rle_z_count < 3)                                                           \\\n            {                                                                              \\\n                d->m_huff_count[2][0] = (mz_uint16)(d->m_huff_count[2][0] + rle_z_count);  \\\n                while (rle_z_count--)                                                      \\\n                    packed_code_sizes[num_packed_code_sizes++] = 0;                        \\\n            }                                                                              \\\n            else if (rle_z_count <= 10)                                                    \\\n            {                                                                              \\\n                d->m_huff_count[2][17] = (mz_uint16)(d->m_huff_count[2][17] + 1);          \\\n                packed_code_sizes[num_packed_code_sizes++] = 17;                           \\\n                packed_code_sizes[num_packed_code_sizes++] = (mz_uint8)(rle_z_count - 3);  \\\n            }                                                                              \\\n            else                                                                           \\\n            {                                                                              \\\n                d->m_huff_count[2][18] = (mz_uint16)(d->m_huff_count[2][18] + 1);          \\\n                packed_code_sizes[num_packed_code_sizes++] = 18;                           \\\n                packed_code_sizes[num_packed_code_sizes++] = (mz_uint8)(rle_z_count - 11); \\\n            }                                                                              \\\n            rle_z_count = 0;                                                               \\\n        }                                                                                  \\\n    }\n\n    static const mz_uint8 s_tdefl_packed_code_size_syms_swizzle[] = { 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 };\n\n    static void tdefl_start_dynamic_block(tdefl_compressor *d)\n    {\n        int num_lit_codes, num_dist_codes, num_bit_lengths;\n        mz_uint i, total_code_sizes_to_pack, num_packed_code_sizes, rle_z_count, rle_repeat_count, packed_code_sizes_index;\n        mz_uint8 code_sizes_to_pack[TDEFL_MAX_HUFF_SYMBOLS_0 + TDEFL_MAX_HUFF_SYMBOLS_1], packed_code_sizes[TDEFL_MAX_HUFF_SYMBOLS_0 + TDEFL_MAX_HUFF_SYMBOLS_1], prev_code_size = 0xFF;\n\n        d->m_huff_count[0][256] = 1;\n\n        tdefl_optimize_huffman_table(d, 0, TDEFL_MAX_HUFF_SYMBOLS_0, 15, MZ_FALSE);\n        tdefl_optimize_huffman_table(d, 1, TDEFL_MAX_HUFF_SYMBOLS_1, 15, MZ_FALSE);\n\n        for (num_lit_codes = 286; num_lit_codes > 257; num_lit_codes--)\n            if (d->m_huff_code_sizes[0][num_lit_codes - 1])\n                break;\n        for (num_dist_codes = 30; num_dist_codes > 1; num_dist_codes--)\n            if (d->m_huff_code_sizes[1][num_dist_codes - 1])\n                break;\n\n        memcpy(code_sizes_to_pack, &d->m_huff_code_sizes[0][0], num_lit_codes);\n        memcpy(code_sizes_to_pack + num_lit_codes, &d->m_huff_code_sizes[1][0], num_dist_codes);\n        total_code_sizes_to_pack = num_lit_codes + num_dist_codes;\n        num_packed_code_sizes = 0;\n        rle_z_count = 0;\n        rle_repeat_count = 0;\n\n        memset(&d->m_huff_count[2][0], 0, sizeof(d->m_huff_count[2][0]) * TDEFL_MAX_HUFF_SYMBOLS_2);\n        for (i = 0; i < total_code_sizes_to_pack; i++)\n        {\n            mz_uint8 code_size = code_sizes_to_pack[i];\n            if (!code_size)\n            {\n                TDEFL_RLE_PREV_CODE_SIZE();\n                if (++rle_z_count == 138)\n                {\n                    TDEFL_RLE_ZERO_CODE_SIZE();\n                }\n            }\n            else\n            {\n                TDEFL_RLE_ZERO_CODE_SIZE();\n                if (code_size != prev_code_size)\n                {\n                    TDEFL_RLE_PREV_CODE_SIZE();\n                    d->m_huff_count[2][code_size] = (mz_uint16)(d->m_huff_count[2][code_size] + 1);\n                    packed_code_sizes[num_packed_code_sizes++] = code_size;\n                }\n                else if (++rle_repeat_count == 6)\n                {\n                    TDEFL_RLE_PREV_CODE_SIZE();\n                }\n            }\n            prev_code_size = code_size;\n        }\n        if (rle_repeat_count)\n        {\n            TDEFL_RLE_PREV_CODE_SIZE();\n        }\n        else\n        {\n            TDEFL_RLE_ZERO_CODE_SIZE();\n        }\n\n        tdefl_optimize_huffman_table(d, 2, TDEFL_MAX_HUFF_SYMBOLS_2, 7, MZ_FALSE);\n\n        TDEFL_PUT_BITS(2, 2);\n\n        TDEFL_PUT_BITS(num_lit_codes - 257, 5);\n        TDEFL_PUT_BITS(num_dist_codes - 1, 5);\n\n        for (num_bit_lengths = 18; num_bit_lengths >= 0; num_bit_lengths--)\n            if (d->m_huff_code_sizes[2][s_tdefl_packed_code_size_syms_swizzle[num_bit_lengths]])\n                break;\n        num_bit_lengths = MZ_MAX(4, (num_bit_lengths + 1));\n        TDEFL_PUT_BITS(num_bit_lengths - 4, 4);\n        for (i = 0; (int)i < num_bit_lengths; i++)\n            TDEFL_PUT_BITS(d->m_huff_code_sizes[2][s_tdefl_packed_code_size_syms_swizzle[i]], 3);\n\n        for (packed_code_sizes_index = 0; packed_code_sizes_index < num_packed_code_sizes;)\n        {\n            mz_uint code = packed_code_sizes[packed_code_sizes_index++];\n            MZ_ASSERT(code < TDEFL_MAX_HUFF_SYMBOLS_2);\n            TDEFL_PUT_BITS(d->m_huff_codes[2][code], d->m_huff_code_sizes[2][code]);\n            if (code >= 16)\n                TDEFL_PUT_BITS(packed_code_sizes[packed_code_sizes_index++], \"\\02\\03\\07\"[code - 16]);\n        }\n    }\n\n    static void tdefl_start_static_block(tdefl_compressor *d)\n    {\n        mz_uint i;\n        mz_uint8 *p = &d->m_huff_code_sizes[0][0];\n\n        for (i = 0; i <= 143; ++i)\n            *p++ = 8;\n        for (; i <= 255; ++i)\n            *p++ = 9;\n        for (; i <= 279; ++i)\n            *p++ = 7;\n        for (; i <= 287; ++i)\n            *p++ = 8;\n\n        memset(d->m_huff_code_sizes[1], 5, 32);\n\n        tdefl_optimize_huffman_table(d, 0, 288, 15, MZ_TRUE);\n        tdefl_optimize_huffman_table(d, 1, 32, 15, MZ_TRUE);\n\n        TDEFL_PUT_BITS(1, 2);\n    }\n\n    static const mz_uint mz_bitmasks[17] = { 0x0000, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F, 0x003F, 0x007F, 0x00FF, 0x01FF, 0x03FF, 0x07FF, 0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF, 0xFFFF };\n\n#if MINIZ_USE_UNALIGNED_LOADS_AND_STORES && MINIZ_LITTLE_ENDIAN && MINIZ_HAS_64BIT_REGISTERS\n    static mz_bool tdefl_compress_lz_codes(tdefl_compressor *d)\n    {\n        mz_uint flags;\n        mz_uint8 *pLZ_codes;\n        mz_uint8 *pOutput_buf = d->m_pOutput_buf;\n        mz_uint8 *pLZ_code_buf_end = d->m_pLZ_code_buf;\n        mz_uint64 bit_buffer = d->m_bit_buffer;\n        mz_uint bits_in = d->m_bits_in;\n\n#define TDEFL_PUT_BITS_FAST(b, l)                    \\\n    {                                                \\\n        bit_buffer |= (((mz_uint64)(b)) << bits_in); \\\n        bits_in += (l);                              \\\n    }\n\n        flags = 1;\n        for (pLZ_codes = d->m_lz_code_buf; pLZ_codes < pLZ_code_buf_end; flags >>= 1)\n        {\n            if (flags == 1)\n                flags = *pLZ_codes++ | 0x100;\n\n            if (flags & 1)\n            {\n                mz_uint s0, s1, n0, n1, sym, num_extra_bits;\n                mz_uint match_len = pLZ_codes[0];\n                mz_uint match_dist = (pLZ_codes[1] | (pLZ_codes[2] << 8));\n                pLZ_codes += 3;\n\n                MZ_ASSERT(d->m_huff_code_sizes[0][s_tdefl_len_sym[match_len]]);\n                TDEFL_PUT_BITS_FAST(d->m_huff_codes[0][s_tdefl_len_sym[match_len]], d->m_huff_code_sizes[0][s_tdefl_len_sym[match_len]]);\n                TDEFL_PUT_BITS_FAST(match_len & mz_bitmasks[s_tdefl_len_extra[match_len]], s_tdefl_len_extra[match_len]);\n\n                /* This sequence coaxes MSVC into using cmov's vs. jmp's. */\n                s0 = s_tdefl_small_dist_sym[match_dist & 511];\n                n0 = s_tdefl_small_dist_extra[match_dist & 511];\n                s1 = s_tdefl_large_dist_sym[match_dist >> 8];\n                n1 = s_tdefl_large_dist_extra[match_dist >> 8];\n                sym = (match_dist < 512) ? s0 : s1;\n                num_extra_bits = (match_dist < 512) ? n0 : n1;\n\n                MZ_ASSERT(d->m_huff_code_sizes[1][sym]);\n                TDEFL_PUT_BITS_FAST(d->m_huff_codes[1][sym], d->m_huff_code_sizes[1][sym]);\n                TDEFL_PUT_BITS_FAST(match_dist & mz_bitmasks[num_extra_bits], num_extra_bits);\n            }\n            else\n            {\n                mz_uint lit = *pLZ_codes++;\n                MZ_ASSERT(d->m_huff_code_sizes[0][lit]);\n                TDEFL_PUT_BITS_FAST(d->m_huff_codes[0][lit], d->m_huff_code_sizes[0][lit]);\n\n                if (((flags & 2) == 0) && (pLZ_codes < pLZ_code_buf_end))\n                {\n                    flags >>= 1;\n                    lit = *pLZ_codes++;\n                    MZ_ASSERT(d->m_huff_code_sizes[0][lit]);\n                    TDEFL_PUT_BITS_FAST(d->m_huff_codes[0][lit], d->m_huff_code_sizes[0][lit]);\n\n                    if (((flags & 2) == 0) && (pLZ_codes < pLZ_code_buf_end))\n                    {\n                        flags >>= 1;\n                        lit = *pLZ_codes++;\n                        MZ_ASSERT(d->m_huff_code_sizes[0][lit]);\n                        TDEFL_PUT_BITS_FAST(d->m_huff_codes[0][lit], d->m_huff_code_sizes[0][lit]);\n                    }\n                }\n            }\n\n            if (pOutput_buf >= d->m_pOutput_buf_end)\n                return MZ_FALSE;\n\n            memcpy(pOutput_buf, &bit_buffer, sizeof(mz_uint64));\n            pOutput_buf += (bits_in >> 3);\n            bit_buffer >>= (bits_in & ~7);\n            bits_in &= 7;\n        }\n\n#undef TDEFL_PUT_BITS_FAST\n\n        d->m_pOutput_buf = pOutput_buf;\n        d->m_bits_in = 0;\n        d->m_bit_buffer = 0;\n\n        while (bits_in)\n        {\n            mz_uint32 n = MZ_MIN(bits_in, 16);\n            TDEFL_PUT_BITS((mz_uint)bit_buffer & mz_bitmasks[n], n);\n            bit_buffer >>= n;\n            bits_in -= n;\n        }\n\n        TDEFL_PUT_BITS(d->m_huff_codes[0][256], d->m_huff_code_sizes[0][256]);\n\n        return (d->m_pOutput_buf < d->m_pOutput_buf_end);\n    }\n#else\nstatic mz_bool tdefl_compress_lz_codes(tdefl_compressor *d)\n{\n    mz_uint flags;\n    mz_uint8 *pLZ_codes;\n\n    flags = 1;\n    for (pLZ_codes = d->m_lz_code_buf; pLZ_codes < d->m_pLZ_code_buf; flags >>= 1)\n    {\n        if (flags == 1)\n            flags = *pLZ_codes++ | 0x100;\n        if (flags & 1)\n        {\n            mz_uint sym, num_extra_bits;\n            mz_uint match_len = pLZ_codes[0], match_dist = (pLZ_codes[1] | (pLZ_codes[2] << 8));\n            pLZ_codes += 3;\n\n            MZ_ASSERT(d->m_huff_code_sizes[0][s_tdefl_len_sym[match_len]]);\n            TDEFL_PUT_BITS(d->m_huff_codes[0][s_tdefl_len_sym[match_len]], d->m_huff_code_sizes[0][s_tdefl_len_sym[match_len]]);\n            TDEFL_PUT_BITS(match_len & mz_bitmasks[s_tdefl_len_extra[match_len]], s_tdefl_len_extra[match_len]);\n\n            if (match_dist < 512)\n            {\n                sym = s_tdefl_small_dist_sym[match_dist];\n                num_extra_bits = s_tdefl_small_dist_extra[match_dist];\n            }\n            else\n            {\n                sym = s_tdefl_large_dist_sym[match_dist >> 8];\n                num_extra_bits = s_tdefl_large_dist_extra[match_dist >> 8];\n            }\n            MZ_ASSERT(d->m_huff_code_sizes[1][sym]);\n            TDEFL_PUT_BITS(d->m_huff_codes[1][sym], d->m_huff_code_sizes[1][sym]);\n            TDEFL_PUT_BITS(match_dist & mz_bitmasks[num_extra_bits], num_extra_bits);\n        }\n        else\n        {\n            mz_uint lit = *pLZ_codes++;\n            MZ_ASSERT(d->m_huff_code_sizes[0][lit]);\n            TDEFL_PUT_BITS(d->m_huff_codes[0][lit], d->m_huff_code_sizes[0][lit]);\n        }\n    }\n\n    TDEFL_PUT_BITS(d->m_huff_codes[0][256], d->m_huff_code_sizes[0][256]);\n\n    return (d->m_pOutput_buf < d->m_pOutput_buf_end);\n}\n#endif /* MINIZ_USE_UNALIGNED_LOADS_AND_STORES && MINIZ_LITTLE_ENDIAN && MINIZ_HAS_64BIT_REGISTERS */\n\n    static mz_bool tdefl_compress_block(tdefl_compressor *d, mz_bool static_block)\n    {\n        if (static_block)\n            tdefl_start_static_block(d);\n        else\n            tdefl_start_dynamic_block(d);\n        return tdefl_compress_lz_codes(d);\n    }\n\n    static const mz_uint s_tdefl_num_probes[11] = { 0, 1, 6, 32, 16, 32, 128, 256, 512, 768, 1500 };\n\n    static int tdefl_flush_block(tdefl_compressor *d, int flush)\n    {\n        mz_uint saved_bit_buf, saved_bits_in;\n        mz_uint8 *pSaved_output_buf;\n        mz_bool comp_block_succeeded = MZ_FALSE;\n        int n, use_raw_block = ((d->m_flags & TDEFL_FORCE_ALL_RAW_BLOCKS) != 0) && (d->m_lookahead_pos - d->m_lz_code_buf_dict_pos) <= d->m_dict_size;\n        mz_uint8 *pOutput_buf_start = ((d->m_pPut_buf_func == NULL) && ((*d->m_pOut_buf_size - d->m_out_buf_ofs) >= TDEFL_OUT_BUF_SIZE)) ? ((mz_uint8 *)d->m_pOut_buf + d->m_out_buf_ofs) : d->m_output_buf;\n\n        d->m_pOutput_buf = pOutput_buf_start;\n        d->m_pOutput_buf_end = d->m_pOutput_buf + TDEFL_OUT_BUF_SIZE - 16;\n\n        MZ_ASSERT(!d->m_output_flush_remaining);\n        d->m_output_flush_ofs = 0;\n        d->m_output_flush_remaining = 0;\n\n        *d->m_pLZ_flags = (mz_uint8)(*d->m_pLZ_flags >> d->m_num_flags_left);\n        d->m_pLZ_code_buf -= (d->m_num_flags_left == 8);\n\n        if ((d->m_flags & TDEFL_WRITE_ZLIB_HEADER) && (!d->m_block_index))\n        {\n            const mz_uint8 cmf = 0x78;\n            mz_uint8 flg, flevel = 3;\n            mz_uint header, i, mz_un = sizeof(s_tdefl_num_probes) / sizeof(mz_uint);\n\n            /* Determine compression level by reversing the process in tdefl_create_comp_flags_from_zip_params() */\n            for (i = 0; i < mz_un; i++)\n                if (s_tdefl_num_probes[i] == (d->m_flags & 0xFFF))\n                    break;\n\n            if (i < 2)\n                flevel = 0;\n            else if (i < 6)\n                flevel = 1;\n            else if (i == 6)\n                flevel = 2;\n\n            header = cmf << 8 | (flevel << 6);\n            header += 31 - (header % 31);\n            flg = header & 0xFF;\n\n            TDEFL_PUT_BITS(cmf, 8);\n            TDEFL_PUT_BITS(flg, 8);\n        }\n\n        TDEFL_PUT_BITS(flush == TDEFL_FINISH, 1);\n\n        pSaved_output_buf = d->m_pOutput_buf;\n        saved_bit_buf = d->m_bit_buffer;\n        saved_bits_in = d->m_bits_in;\n\n        if (!use_raw_block)\n            comp_block_succeeded = tdefl_compress_block(d, (d->m_flags & TDEFL_FORCE_ALL_STATIC_BLOCKS) || (d->m_total_lz_bytes < 48));\n\n        /* If the block gets expanded, forget the current contents of the output buffer and send a raw block instead. */\n        if (((use_raw_block) || ((d->m_total_lz_bytes) && ((d->m_pOutput_buf - pSaved_output_buf + 1U) >= d->m_total_lz_bytes))) &&\n            ((d->m_lookahead_pos - d->m_lz_code_buf_dict_pos) <= d->m_dict_size))\n        {\n            mz_uint i;\n            d->m_pOutput_buf = pSaved_output_buf;\n            d->m_bit_buffer = saved_bit_buf, d->m_bits_in = saved_bits_in;\n            TDEFL_PUT_BITS(0, 2);\n            if (d->m_bits_in)\n            {\n                TDEFL_PUT_BITS(0, 8 - d->m_bits_in);\n            }\n            for (i = 2; i; --i, d->m_total_lz_bytes ^= 0xFFFF)\n            {\n                TDEFL_PUT_BITS(d->m_total_lz_bytes & 0xFFFF, 16);\n            }\n            for (i = 0; i < d->m_total_lz_bytes; ++i)\n            {\n                TDEFL_PUT_BITS(d->m_dict[(d->m_lz_code_buf_dict_pos + i) & TDEFL_LZ_DICT_SIZE_MASK], 8);\n            }\n        }\n        /* Check for the extremely unlikely (if not impossible) case of the compressed block not fitting into the output buffer when using dynamic codes. */\n        else if (!comp_block_succeeded)\n        {\n            d->m_pOutput_buf = pSaved_output_buf;\n            d->m_bit_buffer = saved_bit_buf, d->m_bits_in = saved_bits_in;\n            tdefl_compress_block(d, MZ_TRUE);\n        }\n\n        if (flush)\n        {\n            if (flush == TDEFL_FINISH)\n            {\n                if (d->m_bits_in)\n                {\n                    TDEFL_PUT_BITS(0, 8 - d->m_bits_in);\n                }\n                if (d->m_flags & TDEFL_WRITE_ZLIB_HEADER)\n                {\n                    mz_uint i, a = d->m_adler32;\n                    for (i = 0; i < 4; i++)\n                    {\n                        TDEFL_PUT_BITS((a >> 24) & 0xFF, 8);\n                        a <<= 8;\n                    }\n                }\n            }\n            else\n            {\n                mz_uint i, z = 0;\n                TDEFL_PUT_BITS(0, 3);\n                if (d->m_bits_in)\n                {\n                    TDEFL_PUT_BITS(0, 8 - d->m_bits_in);\n                }\n                for (i = 2; i; --i, z ^= 0xFFFF)\n                {\n                    TDEFL_PUT_BITS(z & 0xFFFF, 16);\n                }\n            }\n        }\n\n        MZ_ASSERT(d->m_pOutput_buf < d->m_pOutput_buf_end);\n\n        memset(&d->m_huff_count[0][0], 0, sizeof(d->m_huff_count[0][0]) * TDEFL_MAX_HUFF_SYMBOLS_0);\n        memset(&d->m_huff_count[1][0], 0, sizeof(d->m_huff_count[1][0]) * TDEFL_MAX_HUFF_SYMBOLS_1);\n\n        d->m_pLZ_code_buf = d->m_lz_code_buf + 1;\n        d->m_pLZ_flags = d->m_lz_code_buf;\n        d->m_num_flags_left = 8;\n        d->m_lz_code_buf_dict_pos += d->m_total_lz_bytes;\n        d->m_total_lz_bytes = 0;\n        d->m_block_index++;\n\n        if ((n = (int)(d->m_pOutput_buf - pOutput_buf_start)) != 0)\n        {\n            if (d->m_pPut_buf_func)\n            {\n                *d->m_pIn_buf_size = d->m_pSrc - (const mz_uint8 *)d->m_pIn_buf;\n                if (!(*d->m_pPut_buf_func)(d->m_output_buf, n, d->m_pPut_buf_user))\n                    return (d->m_prev_return_status = TDEFL_STATUS_PUT_BUF_FAILED);\n            }\n            else if (pOutput_buf_start == d->m_output_buf)\n            {\n                int bytes_to_copy = (int)MZ_MIN((size_t)n, (size_t)(*d->m_pOut_buf_size - d->m_out_buf_ofs));\n                memcpy((mz_uint8 *)d->m_pOut_buf + d->m_out_buf_ofs, d->m_output_buf, bytes_to_copy);\n                d->m_out_buf_ofs += bytes_to_copy;\n                if ((n -= bytes_to_copy) != 0)\n                {\n                    d->m_output_flush_ofs = bytes_to_copy;\n                    d->m_output_flush_remaining = n;\n                }\n            }\n            else\n            {\n                d->m_out_buf_ofs += n;\n            }\n        }\n\n        return d->m_output_flush_remaining;\n    }\n\n#if MINIZ_USE_UNALIGNED_LOADS_AND_STORES\n#ifdef MINIZ_UNALIGNED_USE_MEMCPY\n    static mz_uint16 TDEFL_READ_UNALIGNED_WORD(const mz_uint8 *p)\n    {\n        mz_uint16 ret;\n        memcpy(&ret, p, sizeof(mz_uint16));\n        return ret;\n    }\n    static mz_uint16 TDEFL_READ_UNALIGNED_WORD2(const mz_uint16 *p)\n    {\n        mz_uint16 ret;\n        memcpy(&ret, p, sizeof(mz_uint16));\n        return ret;\n    }\n#else\n#define TDEFL_READ_UNALIGNED_WORD(p) *(const mz_uint16 *)(p)\n#define TDEFL_READ_UNALIGNED_WORD2(p) *(const mz_uint16 *)(p)\n#endif\n    static MZ_FORCEINLINE void tdefl_find_match(tdefl_compressor *d, mz_uint lookahead_pos, mz_uint max_dist, mz_uint max_match_len, mz_uint *pMatch_dist, mz_uint *pMatch_len)\n    {\n        mz_uint dist, pos = lookahead_pos & TDEFL_LZ_DICT_SIZE_MASK, match_len = *pMatch_len, probe_pos = pos, next_probe_pos, probe_len;\n        mz_uint num_probes_left = d->m_max_probes[match_len >= 32];\n        const mz_uint16 *s = (const mz_uint16 *)(d->m_dict + pos), *p, *q;\n        mz_uint16 c01 = TDEFL_READ_UNALIGNED_WORD(&d->m_dict[pos + match_len - 1]), s01 = TDEFL_READ_UNALIGNED_WORD2(s);\n        MZ_ASSERT(max_match_len <= TDEFL_MAX_MATCH_LEN);\n        if (max_match_len <= match_len)\n            return;\n        for (;;)\n        {\n            for (;;)\n            {\n                if (--num_probes_left == 0)\n                    return;\n#define TDEFL_PROBE                                                                             \\\n    next_probe_pos = d->m_next[probe_pos];                                                      \\\n    if ((!next_probe_pos) || ((dist = (mz_uint16)(lookahead_pos - next_probe_pos)) > max_dist)) \\\n        return;                                                                                 \\\n    probe_pos = next_probe_pos & TDEFL_LZ_DICT_SIZE_MASK;                                       \\\n    if (TDEFL_READ_UNALIGNED_WORD(&d->m_dict[probe_pos + match_len - 1]) == c01)                \\\n        break;\n                TDEFL_PROBE;\n                TDEFL_PROBE;\n                TDEFL_PROBE;\n            }\n            if (!dist)\n                break;\n            q = (const mz_uint16 *)(d->m_dict + probe_pos);\n            if (TDEFL_READ_UNALIGNED_WORD2(q) != s01)\n                continue;\n            p = s;\n            probe_len = 32;\n            do\n            {\n            } while ((TDEFL_READ_UNALIGNED_WORD2(++p) == TDEFL_READ_UNALIGNED_WORD2(++q)) && (TDEFL_READ_UNALIGNED_WORD2(++p) == TDEFL_READ_UNALIGNED_WORD2(++q)) &&\n                     (TDEFL_READ_UNALIGNED_WORD2(++p) == TDEFL_READ_UNALIGNED_WORD2(++q)) && (TDEFL_READ_UNALIGNED_WORD2(++p) == TDEFL_READ_UNALIGNED_WORD2(++q)) && (--probe_len > 0));\n            if (!probe_len)\n            {\n                *pMatch_dist = dist;\n                *pMatch_len = MZ_MIN(max_match_len, (mz_uint)TDEFL_MAX_MATCH_LEN);\n                break;\n            }\n            else if ((probe_len = ((mz_uint)(p - s) * 2) + (mz_uint)(*(const mz_uint8 *)p == *(const mz_uint8 *)q)) > match_len)\n            {\n                *pMatch_dist = dist;\n                if ((*pMatch_len = match_len = MZ_MIN(max_match_len, probe_len)) == max_match_len)\n                    break;\n                c01 = TDEFL_READ_UNALIGNED_WORD(&d->m_dict[pos + match_len - 1]);\n            }\n        }\n    }\n#else\nstatic MZ_FORCEINLINE void tdefl_find_match(tdefl_compressor *d, mz_uint lookahead_pos, mz_uint max_dist, mz_uint max_match_len, mz_uint *pMatch_dist, mz_uint *pMatch_len)\n{\n    mz_uint dist, pos = lookahead_pos & TDEFL_LZ_DICT_SIZE_MASK, match_len = *pMatch_len, probe_pos = pos, next_probe_pos, probe_len;\n    mz_uint num_probes_left = d->m_max_probes[match_len >= 32];\n    const mz_uint8 *s = d->m_dict + pos, *p, *q;\n    mz_uint8 c0 = d->m_dict[pos + match_len], c1 = d->m_dict[pos + match_len - 1];\n    MZ_ASSERT(max_match_len <= TDEFL_MAX_MATCH_LEN);\n    if (max_match_len <= match_len)\n        return;\n    for (;;)\n    {\n        for (;;)\n        {\n            if (--num_probes_left == 0)\n                return;\n#define TDEFL_PROBE                                                                               \\\n    next_probe_pos = d->m_next[probe_pos];                                                        \\\n    if ((!next_probe_pos) || ((dist = (mz_uint16)(lookahead_pos - next_probe_pos)) > max_dist))   \\\n        return;                                                                                   \\\n    probe_pos = next_probe_pos & TDEFL_LZ_DICT_SIZE_MASK;                                         \\\n    if ((d->m_dict[probe_pos + match_len] == c0) && (d->m_dict[probe_pos + match_len - 1] == c1)) \\\n        break;\n            TDEFL_PROBE;\n            TDEFL_PROBE;\n            TDEFL_PROBE;\n        }\n        if (!dist)\n            break;\n        p = s;\n        q = d->m_dict + probe_pos;\n        for (probe_len = 0; probe_len < max_match_len; probe_len++)\n            if (*p++ != *q++)\n                break;\n        if (probe_len > match_len)\n        {\n            *pMatch_dist = dist;\n            if ((*pMatch_len = match_len = probe_len) == max_match_len)\n                return;\n            c0 = d->m_dict[pos + match_len];\n            c1 = d->m_dict[pos + match_len - 1];\n        }\n    }\n}\n#endif /* #if MINIZ_USE_UNALIGNED_LOADS_AND_STORES */\n\n#if MINIZ_USE_UNALIGNED_LOADS_AND_STORES && MINIZ_LITTLE_ENDIAN\n#ifdef MINIZ_UNALIGNED_USE_MEMCPY\n    static mz_uint32 TDEFL_READ_UNALIGNED_WORD32(const mz_uint8 *p)\n    {\n        mz_uint32 ret;\n        memcpy(&ret, p, sizeof(mz_uint32));\n        return ret;\n    }\n#else\n#define TDEFL_READ_UNALIGNED_WORD32(p) *(const mz_uint32 *)(p)\n#endif\n    static mz_bool tdefl_compress_fast(tdefl_compressor *d)\n    {\n        /* Faster, minimally featured LZRW1-style match+parse loop with better register utilization. Intended for applications where raw throughput is valued more highly than ratio. */\n        mz_uint lookahead_pos = d->m_lookahead_pos, lookahead_size = d->m_lookahead_size, dict_size = d->m_dict_size, total_lz_bytes = d->m_total_lz_bytes, num_flags_left = d->m_num_flags_left;\n        mz_uint8 *pLZ_code_buf = d->m_pLZ_code_buf, *pLZ_flags = d->m_pLZ_flags;\n        mz_uint cur_pos = lookahead_pos & TDEFL_LZ_DICT_SIZE_MASK;\n\n        while ((d->m_src_buf_left) || ((d->m_flush) && (lookahead_size)))\n        {\n            const mz_uint TDEFL_COMP_FAST_LOOKAHEAD_SIZE = 4096;\n            mz_uint dst_pos = (lookahead_pos + lookahead_size) & TDEFL_LZ_DICT_SIZE_MASK;\n            mz_uint num_bytes_to_process = (mz_uint)MZ_MIN(d->m_src_buf_left, TDEFL_COMP_FAST_LOOKAHEAD_SIZE - lookahead_size);\n            d->m_src_buf_left -= num_bytes_to_process;\n            lookahead_size += num_bytes_to_process;\n\n            while (num_bytes_to_process)\n            {\n                mz_uint32 n = MZ_MIN(TDEFL_LZ_DICT_SIZE - dst_pos, num_bytes_to_process);\n                memcpy(d->m_dict + dst_pos, d->m_pSrc, n);\n                if (dst_pos < (TDEFL_MAX_MATCH_LEN - 1))\n                    memcpy(d->m_dict + TDEFL_LZ_DICT_SIZE + dst_pos, d->m_pSrc, MZ_MIN(n, (TDEFL_MAX_MATCH_LEN - 1) - dst_pos));\n                d->m_pSrc += n;\n                dst_pos = (dst_pos + n) & TDEFL_LZ_DICT_SIZE_MASK;\n                num_bytes_to_process -= n;\n            }\n\n            dict_size = MZ_MIN(TDEFL_LZ_DICT_SIZE - lookahead_size, dict_size);\n            if ((!d->m_flush) && (lookahead_size < TDEFL_COMP_FAST_LOOKAHEAD_SIZE))\n                break;\n\n            while (lookahead_size >= 4)\n            {\n                mz_uint cur_match_dist, cur_match_len = 1;\n                mz_uint8 *pCur_dict = d->m_dict + cur_pos;\n                mz_uint first_trigram = TDEFL_READ_UNALIGNED_WORD32(pCur_dict) & 0xFFFFFF;\n                mz_uint hash = (first_trigram ^ (first_trigram >> (24 - (TDEFL_LZ_HASH_BITS - 8)))) & TDEFL_LEVEL1_HASH_SIZE_MASK;\n                mz_uint probe_pos = d->m_hash[hash];\n                d->m_hash[hash] = (mz_uint16)lookahead_pos;\n\n                if (((cur_match_dist = (mz_uint16)(lookahead_pos - probe_pos)) <= dict_size) && ((TDEFL_READ_UNALIGNED_WORD32(d->m_dict + (probe_pos &= TDEFL_LZ_DICT_SIZE_MASK)) & 0xFFFFFF) == first_trigram))\n                {\n                    const mz_uint16 *p = (const mz_uint16 *)pCur_dict;\n                    const mz_uint16 *q = (const mz_uint16 *)(d->m_dict + probe_pos);\n                    mz_uint32 probe_len = 32;\n                    do\n                    {\n                    } while ((TDEFL_READ_UNALIGNED_WORD2(++p) == TDEFL_READ_UNALIGNED_WORD2(++q)) && (TDEFL_READ_UNALIGNED_WORD2(++p) == TDEFL_READ_UNALIGNED_WORD2(++q)) &&\n                             (TDEFL_READ_UNALIGNED_WORD2(++p) == TDEFL_READ_UNALIGNED_WORD2(++q)) && (TDEFL_READ_UNALIGNED_WORD2(++p) == TDEFL_READ_UNALIGNED_WORD2(++q)) && (--probe_len > 0));\n                    cur_match_len = ((mz_uint)(p - (const mz_uint16 *)pCur_dict) * 2) + (mz_uint)(*(const mz_uint8 *)p == *(const mz_uint8 *)q);\n                    if (!probe_len)\n                        cur_match_len = cur_match_dist ? TDEFL_MAX_MATCH_LEN : 0;\n\n                    if ((cur_match_len < TDEFL_MIN_MATCH_LEN) || ((cur_match_len == TDEFL_MIN_MATCH_LEN) && (cur_match_dist >= 8U * 1024U)))\n                    {\n                        cur_match_len = 1;\n                        *pLZ_code_buf++ = (mz_uint8)first_trigram;\n                        *pLZ_flags = (mz_uint8)(*pLZ_flags >> 1);\n                        d->m_huff_count[0][(mz_uint8)first_trigram]++;\n                    }\n                    else\n                    {\n                        mz_uint32 s0, s1;\n                        cur_match_len = MZ_MIN(cur_match_len, lookahead_size);\n\n                        MZ_ASSERT((cur_match_len >= TDEFL_MIN_MATCH_LEN) && (cur_match_dist >= 1) && (cur_match_dist <= TDEFL_LZ_DICT_SIZE));\n\n                        cur_match_dist--;\n\n                        pLZ_code_buf[0] = (mz_uint8)(cur_match_len - TDEFL_MIN_MATCH_LEN);\n#ifdef MINIZ_UNALIGNED_USE_MEMCPY\n                        memcpy(&pLZ_code_buf[1], &cur_match_dist, sizeof(cur_match_dist));\n#else\n                        *(mz_uint16 *)(&pLZ_code_buf[1]) = (mz_uint16)cur_match_dist;\n#endif\n                        pLZ_code_buf += 3;\n                        *pLZ_flags = (mz_uint8)((*pLZ_flags >> 1) | 0x80);\n\n                        s0 = s_tdefl_small_dist_sym[cur_match_dist & 511];\n                        s1 = s_tdefl_large_dist_sym[cur_match_dist >> 8];\n                        d->m_huff_count[1][(cur_match_dist < 512) ? s0 : s1]++;\n\n                        d->m_huff_count[0][s_tdefl_len_sym[cur_match_len - TDEFL_MIN_MATCH_LEN]]++;\n                    }\n                }\n                else\n                {\n                    *pLZ_code_buf++ = (mz_uint8)first_trigram;\n                    *pLZ_flags = (mz_uint8)(*pLZ_flags >> 1);\n                    d->m_huff_count[0][(mz_uint8)first_trigram]++;\n                }\n\n                if (--num_flags_left == 0)\n                {\n                    num_flags_left = 8;\n                    pLZ_flags = pLZ_code_buf++;\n                }\n\n                total_lz_bytes += cur_match_len;\n                lookahead_pos += cur_match_len;\n                dict_size = MZ_MIN(dict_size + cur_match_len, (mz_uint)TDEFL_LZ_DICT_SIZE);\n                cur_pos = (cur_pos + cur_match_len) & TDEFL_LZ_DICT_SIZE_MASK;\n                MZ_ASSERT(lookahead_size >= cur_match_len);\n                lookahead_size -= cur_match_len;\n\n                if (pLZ_code_buf > &d->m_lz_code_buf[TDEFL_LZ_CODE_BUF_SIZE - 8])\n                {\n                    int n;\n                    d->m_lookahead_pos = lookahead_pos;\n                    d->m_lookahead_size = lookahead_size;\n                    d->m_dict_size = dict_size;\n                    d->m_total_lz_bytes = total_lz_bytes;\n                    d->m_pLZ_code_buf = pLZ_code_buf;\n                    d->m_pLZ_flags = pLZ_flags;\n                    d->m_num_flags_left = num_flags_left;\n                    if ((n = tdefl_flush_block(d, 0)) != 0)\n                        return (n < 0) ? MZ_FALSE : MZ_TRUE;\n                    total_lz_bytes = d->m_total_lz_bytes;\n                    pLZ_code_buf = d->m_pLZ_code_buf;\n                    pLZ_flags = d->m_pLZ_flags;\n                    num_flags_left = d->m_num_flags_left;\n                }\n            }\n\n            while (lookahead_size)\n            {\n                mz_uint8 lit = d->m_dict[cur_pos];\n\n                total_lz_bytes++;\n                *pLZ_code_buf++ = lit;\n                *pLZ_flags = (mz_uint8)(*pLZ_flags >> 1);\n                if (--num_flags_left == 0)\n                {\n                    num_flags_left = 8;\n                    pLZ_flags = pLZ_code_buf++;\n                }\n\n                d->m_huff_count[0][lit]++;\n\n                lookahead_pos++;\n                dict_size = MZ_MIN(dict_size + 1, (mz_uint)TDEFL_LZ_DICT_SIZE);\n                cur_pos = (cur_pos + 1) & TDEFL_LZ_DICT_SIZE_MASK;\n                lookahead_size--;\n\n                if (pLZ_code_buf > &d->m_lz_code_buf[TDEFL_LZ_CODE_BUF_SIZE - 8])\n                {\n                    int n;\n                    d->m_lookahead_pos = lookahead_pos;\n                    d->m_lookahead_size = lookahead_size;\n                    d->m_dict_size = dict_size;\n                    d->m_total_lz_bytes = total_lz_bytes;\n                    d->m_pLZ_code_buf = pLZ_code_buf;\n                    d->m_pLZ_flags = pLZ_flags;\n                    d->m_num_flags_left = num_flags_left;\n                    if ((n = tdefl_flush_block(d, 0)) != 0)\n                        return (n < 0) ? MZ_FALSE : MZ_TRUE;\n                    total_lz_bytes = d->m_total_lz_bytes;\n                    pLZ_code_buf = d->m_pLZ_code_buf;\n                    pLZ_flags = d->m_pLZ_flags;\n                    num_flags_left = d->m_num_flags_left;\n                }\n            }\n        }\n\n        d->m_lookahead_pos = lookahead_pos;\n        d->m_lookahead_size = lookahead_size;\n        d->m_dict_size = dict_size;\n        d->m_total_lz_bytes = total_lz_bytes;\n        d->m_pLZ_code_buf = pLZ_code_buf;\n        d->m_pLZ_flags = pLZ_flags;\n        d->m_num_flags_left = num_flags_left;\n        return MZ_TRUE;\n    }\n#endif /* MINIZ_USE_UNALIGNED_LOADS_AND_STORES && MINIZ_LITTLE_ENDIAN */\n\n    static MZ_FORCEINLINE void tdefl_record_literal(tdefl_compressor *d, mz_uint8 lit)\n    {\n        d->m_total_lz_bytes++;\n        *d->m_pLZ_code_buf++ = lit;\n        *d->m_pLZ_flags = (mz_uint8)(*d->m_pLZ_flags >> 1);\n        if (--d->m_num_flags_left == 0)\n        {\n            d->m_num_flags_left = 8;\n            d->m_pLZ_flags = d->m_pLZ_code_buf++;\n        }\n        d->m_huff_count[0][lit]++;\n    }\n\n    static MZ_FORCEINLINE void tdefl_record_match(tdefl_compressor *d, mz_uint match_len, mz_uint match_dist)\n    {\n        mz_uint32 s0, s1;\n\n        MZ_ASSERT((match_len >= TDEFL_MIN_MATCH_LEN) && (match_dist >= 1) && (match_dist <= TDEFL_LZ_DICT_SIZE));\n\n        d->m_total_lz_bytes += match_len;\n\n        d->m_pLZ_code_buf[0] = (mz_uint8)(match_len - TDEFL_MIN_MATCH_LEN);\n\n        match_dist -= 1;\n        d->m_pLZ_code_buf[1] = (mz_uint8)(match_dist & 0xFF);\n        d->m_pLZ_code_buf[2] = (mz_uint8)(match_dist >> 8);\n        d->m_pLZ_code_buf += 3;\n\n        *d->m_pLZ_flags = (mz_uint8)((*d->m_pLZ_flags >> 1) | 0x80);\n        if (--d->m_num_flags_left == 0)\n        {\n            d->m_num_flags_left = 8;\n            d->m_pLZ_flags = d->m_pLZ_code_buf++;\n        }\n\n        s0 = s_tdefl_small_dist_sym[match_dist & 511];\n        s1 = s_tdefl_large_dist_sym[(match_dist >> 8) & 127];\n        d->m_huff_count[1][(match_dist < 512) ? s0 : s1]++;\n        d->m_huff_count[0][s_tdefl_len_sym[match_len - TDEFL_MIN_MATCH_LEN]]++;\n    }\n\n    static mz_bool tdefl_compress_normal(tdefl_compressor *d)\n    {\n        const mz_uint8 *pSrc = d->m_pSrc;\n        size_t src_buf_left = d->m_src_buf_left;\n        tdefl_flush flush = d->m_flush;\n\n        while ((src_buf_left) || ((flush) && (d->m_lookahead_size)))\n        {\n            mz_uint len_to_move, cur_match_dist, cur_match_len, cur_pos;\n            /* Update dictionary and hash chains. Keeps the lookahead size equal to TDEFL_MAX_MATCH_LEN. */\n            if ((d->m_lookahead_size + d->m_dict_size) >= (TDEFL_MIN_MATCH_LEN - 1))\n            {\n                mz_uint dst_pos = (d->m_lookahead_pos + d->m_lookahead_size) & TDEFL_LZ_DICT_SIZE_MASK, ins_pos = d->m_lookahead_pos + d->m_lookahead_size - 2;\n                mz_uint hash = (d->m_dict[ins_pos & TDEFL_LZ_DICT_SIZE_MASK] << TDEFL_LZ_HASH_SHIFT) ^ d->m_dict[(ins_pos + 1) & TDEFL_LZ_DICT_SIZE_MASK];\n                mz_uint num_bytes_to_process = (mz_uint)MZ_MIN(src_buf_left, TDEFL_MAX_MATCH_LEN - d->m_lookahead_size);\n                const mz_uint8 *pSrc_end = pSrc ? pSrc + num_bytes_to_process : NULL;\n                src_buf_left -= num_bytes_to_process;\n                d->m_lookahead_size += num_bytes_to_process;\n                while (pSrc != pSrc_end)\n                {\n                    mz_uint8 c = *pSrc++;\n                    d->m_dict[dst_pos] = c;\n                    if (dst_pos < (TDEFL_MAX_MATCH_LEN - 1))\n                        d->m_dict[TDEFL_LZ_DICT_SIZE + dst_pos] = c;\n                    hash = ((hash << TDEFL_LZ_HASH_SHIFT) ^ c) & (TDEFL_LZ_HASH_SIZE - 1);\n                    d->m_next[ins_pos & TDEFL_LZ_DICT_SIZE_MASK] = d->m_hash[hash];\n                    d->m_hash[hash] = (mz_uint16)(ins_pos);\n                    dst_pos = (dst_pos + 1) & TDEFL_LZ_DICT_SIZE_MASK;\n                    ins_pos++;\n                }\n            }\n            else\n            {\n                while ((src_buf_left) && (d->m_lookahead_size < TDEFL_MAX_MATCH_LEN))\n                {\n                    mz_uint8 c = *pSrc++;\n                    mz_uint dst_pos = (d->m_lookahead_pos + d->m_lookahead_size) & TDEFL_LZ_DICT_SIZE_MASK;\n                    src_buf_left--;\n                    d->m_dict[dst_pos] = c;\n                    if (dst_pos < (TDEFL_MAX_MATCH_LEN - 1))\n                        d->m_dict[TDEFL_LZ_DICT_SIZE + dst_pos] = c;\n                    if ((++d->m_lookahead_size + d->m_dict_size) >= TDEFL_MIN_MATCH_LEN)\n                    {\n                        mz_uint ins_pos = d->m_lookahead_pos + (d->m_lookahead_size - 1) - 2;\n                        mz_uint hash = ((d->m_dict[ins_pos & TDEFL_LZ_DICT_SIZE_MASK] << (TDEFL_LZ_HASH_SHIFT * 2)) ^ (d->m_dict[(ins_pos + 1) & TDEFL_LZ_DICT_SIZE_MASK] << TDEFL_LZ_HASH_SHIFT) ^ c) & (TDEFL_LZ_HASH_SIZE - 1);\n                        d->m_next[ins_pos & TDEFL_LZ_DICT_SIZE_MASK] = d->m_hash[hash];\n                        d->m_hash[hash] = (mz_uint16)(ins_pos);\n                    }\n                }\n            }\n            d->m_dict_size = MZ_MIN(TDEFL_LZ_DICT_SIZE - d->m_lookahead_size, d->m_dict_size);\n            if ((!flush) && (d->m_lookahead_size < TDEFL_MAX_MATCH_LEN))\n                break;\n\n            /* Simple lazy/greedy parsing state machine. */\n            len_to_move = 1;\n            cur_match_dist = 0;\n            cur_match_len = d->m_saved_match_len ? d->m_saved_match_len : (TDEFL_MIN_MATCH_LEN - 1);\n            cur_pos = d->m_lookahead_pos & TDEFL_LZ_DICT_SIZE_MASK;\n            if (d->m_flags & (TDEFL_RLE_MATCHES | TDEFL_FORCE_ALL_RAW_BLOCKS))\n            {\n                if ((d->m_dict_size) && (!(d->m_flags & TDEFL_FORCE_ALL_RAW_BLOCKS)))\n                {\n                    mz_uint8 c = d->m_dict[(cur_pos - 1) & TDEFL_LZ_DICT_SIZE_MASK];\n                    cur_match_len = 0;\n                    while (cur_match_len < d->m_lookahead_size)\n                    {\n                        if (d->m_dict[cur_pos + cur_match_len] != c)\n                            break;\n                        cur_match_len++;\n                    }\n                    if (cur_match_len < TDEFL_MIN_MATCH_LEN)\n                        cur_match_len = 0;\n                    else\n                        cur_match_dist = 1;\n                }\n            }\n            else\n            {\n                tdefl_find_match(d, d->m_lookahead_pos, d->m_dict_size, d->m_lookahead_size, &cur_match_dist, &cur_match_len);\n            }\n            if (((cur_match_len == TDEFL_MIN_MATCH_LEN) && (cur_match_dist >= 8U * 1024U)) || (cur_pos == cur_match_dist) || ((d->m_flags & TDEFL_FILTER_MATCHES) && (cur_match_len <= 5)))\n            {\n                cur_match_dist = cur_match_len = 0;\n            }\n            if (d->m_saved_match_len)\n            {\n                if (cur_match_len > d->m_saved_match_len)\n                {\n                    tdefl_record_literal(d, (mz_uint8)d->m_saved_lit);\n                    if (cur_match_len >= 128)\n                    {\n                        tdefl_record_match(d, cur_match_len, cur_match_dist);\n                        d->m_saved_match_len = 0;\n                        len_to_move = cur_match_len;\n                    }\n                    else\n                    {\n                        d->m_saved_lit = d->m_dict[cur_pos];\n                        d->m_saved_match_dist = cur_match_dist;\n                        d->m_saved_match_len = cur_match_len;\n                    }\n                }\n                else\n                {\n                    tdefl_record_match(d, d->m_saved_match_len, d->m_saved_match_dist);\n                    len_to_move = d->m_saved_match_len - 1;\n                    d->m_saved_match_len = 0;\n                }\n            }\n            else if (!cur_match_dist)\n                tdefl_record_literal(d, d->m_dict[MZ_MIN(cur_pos, sizeof(d->m_dict) - 1)]);\n            else if ((d->m_greedy_parsing) || (d->m_flags & TDEFL_RLE_MATCHES) || (cur_match_len >= 128))\n            {\n                tdefl_record_match(d, cur_match_len, cur_match_dist);\n                len_to_move = cur_match_len;\n            }\n            else\n            {\n                d->m_saved_lit = d->m_dict[MZ_MIN(cur_pos, sizeof(d->m_dict) - 1)];\n                d->m_saved_match_dist = cur_match_dist;\n                d->m_saved_match_len = cur_match_len;\n            }\n            /* Move the lookahead forward by len_to_move bytes. */\n            d->m_lookahead_pos += len_to_move;\n            MZ_ASSERT(d->m_lookahead_size >= len_to_move);\n            d->m_lookahead_size -= len_to_move;\n            d->m_dict_size = MZ_MIN(d->m_dict_size + len_to_move, (mz_uint)TDEFL_LZ_DICT_SIZE);\n            /* Check if it's time to flush the current LZ codes to the internal output buffer. */\n            if ((d->m_pLZ_code_buf > &d->m_lz_code_buf[TDEFL_LZ_CODE_BUF_SIZE - 8]) ||\n                ((d->m_total_lz_bytes > 31 * 1024) && (((((mz_uint)(d->m_pLZ_code_buf - d->m_lz_code_buf) * 115) >> 7) >= d->m_total_lz_bytes) || (d->m_flags & TDEFL_FORCE_ALL_RAW_BLOCKS))))\n            {\n                int n;\n                d->m_pSrc = pSrc;\n                d->m_src_buf_left = src_buf_left;\n                if ((n = tdefl_flush_block(d, 0)) != 0)\n                    return (n < 0) ? MZ_FALSE : MZ_TRUE;\n            }\n        }\n\n        d->m_pSrc = pSrc;\n        d->m_src_buf_left = src_buf_left;\n        return MZ_TRUE;\n    }\n\n    static tdefl_status tdefl_flush_output_buffer(tdefl_compressor *d)\n    {\n        if (d->m_pIn_buf_size)\n        {\n            *d->m_pIn_buf_size = d->m_pSrc - (const mz_uint8 *)d->m_pIn_buf;\n        }\n\n        if (d->m_pOut_buf_size)\n        {\n            size_t n = MZ_MIN(*d->m_pOut_buf_size - d->m_out_buf_ofs, d->m_output_flush_remaining);\n            memcpy((mz_uint8 *)d->m_pOut_buf + d->m_out_buf_ofs, d->m_output_buf + d->m_output_flush_ofs, n);\n            d->m_output_flush_ofs += (mz_uint)n;\n            d->m_output_flush_remaining -= (mz_uint)n;\n            d->m_out_buf_ofs += n;\n\n            *d->m_pOut_buf_size = d->m_out_buf_ofs;\n        }\n\n        return (d->m_finished && !d->m_output_flush_remaining) ? TDEFL_STATUS_DONE : TDEFL_STATUS_OKAY;\n    }\n\n    tdefl_status tdefl_compress(tdefl_compressor *d, const void *pIn_buf, size_t *pIn_buf_size, void *pOut_buf, size_t *pOut_buf_size, tdefl_flush flush)\n    {\n        if (!d)\n        {\n            if (pIn_buf_size)\n                *pIn_buf_size = 0;\n            if (pOut_buf_size)\n                *pOut_buf_size = 0;\n            return TDEFL_STATUS_BAD_PARAM;\n        }\n\n        d->m_pIn_buf = pIn_buf;\n        d->m_pIn_buf_size = pIn_buf_size;\n        d->m_pOut_buf = pOut_buf;\n        d->m_pOut_buf_size = pOut_buf_size;\n        d->m_pSrc = (const mz_uint8 *)(pIn_buf);\n        d->m_src_buf_left = pIn_buf_size ? *pIn_buf_size : 0;\n        d->m_out_buf_ofs = 0;\n        d->m_flush = flush;\n\n        if (((d->m_pPut_buf_func != NULL) == ((pOut_buf != NULL) || (pOut_buf_size != NULL))) || (d->m_prev_return_status != TDEFL_STATUS_OKAY) ||\n            (d->m_wants_to_finish && (flush != TDEFL_FINISH)) || (pIn_buf_size && *pIn_buf_size && !pIn_buf) || (pOut_buf_size && *pOut_buf_size && !pOut_buf))\n        {\n            if (pIn_buf_size)\n                *pIn_buf_size = 0;\n            if (pOut_buf_size)\n                *pOut_buf_size = 0;\n            return (d->m_prev_return_status = TDEFL_STATUS_BAD_PARAM);\n        }\n        d->m_wants_to_finish |= (flush == TDEFL_FINISH);\n\n        if ((d->m_output_flush_remaining) || (d->m_finished))\n            return (d->m_prev_return_status = tdefl_flush_output_buffer(d));\n\n#if MINIZ_USE_UNALIGNED_LOADS_AND_STORES && MINIZ_LITTLE_ENDIAN\n        if (((d->m_flags & TDEFL_MAX_PROBES_MASK) == 1) &&\n            ((d->m_flags & TDEFL_GREEDY_PARSING_FLAG) != 0) &&\n            ((d->m_flags & (TDEFL_FILTER_MATCHES | TDEFL_FORCE_ALL_RAW_BLOCKS | TDEFL_RLE_MATCHES)) == 0))\n        {\n            if (!tdefl_compress_fast(d))\n                return d->m_prev_return_status;\n        }\n        else\n#endif /* #if MINIZ_USE_UNALIGNED_LOADS_AND_STORES && MINIZ_LITTLE_ENDIAN */\n        {\n            if (!tdefl_compress_normal(d))\n                return d->m_prev_return_status;\n        }\n\n        if ((d->m_flags & (TDEFL_WRITE_ZLIB_HEADER | TDEFL_COMPUTE_ADLER32)) && (pIn_buf))\n            d->m_adler32 = (mz_uint32)mz_adler32(d->m_adler32, (const mz_uint8 *)pIn_buf, d->m_pSrc - (const mz_uint8 *)pIn_buf);\n\n        if ((flush) && (!d->m_lookahead_size) && (!d->m_src_buf_left) && (!d->m_output_flush_remaining))\n        {\n            if (tdefl_flush_block(d, flush) < 0)\n                return d->m_prev_return_status;\n            d->m_finished = (flush == TDEFL_FINISH);\n            if (flush == TDEFL_FULL_FLUSH)\n            {\n                MZ_CLEAR_ARR(d->m_hash);\n                MZ_CLEAR_ARR(d->m_next);\n                d->m_dict_size = 0;\n            }\n        }\n\n        return (d->m_prev_return_status = tdefl_flush_output_buffer(d));\n    }\n\n    tdefl_status tdefl_compress_buffer(tdefl_compressor *d, const void *pIn_buf, size_t in_buf_size, tdefl_flush flush)\n    {\n        MZ_ASSERT(d->m_pPut_buf_func);\n        return tdefl_compress(d, pIn_buf, &in_buf_size, NULL, NULL, flush);\n    }\n\n    tdefl_status tdefl_init(tdefl_compressor *d, tdefl_put_buf_func_ptr pPut_buf_func, void *pPut_buf_user, int flags)\n    {\n        d->m_pPut_buf_func = pPut_buf_func;\n        d->m_pPut_buf_user = pPut_buf_user;\n        d->m_flags = (mz_uint)(flags);\n        d->m_max_probes[0] = 1 + ((flags & 0xFFF) + 2) / 3;\n        d->m_greedy_parsing = (flags & TDEFL_GREEDY_PARSING_FLAG) != 0;\n        d->m_max_probes[1] = 1 + (((flags & 0xFFF) >> 2) + 2) / 3;\n        if (!(flags & TDEFL_NONDETERMINISTIC_PARSING_FLAG))\n            MZ_CLEAR_ARR(d->m_hash);\n        d->m_lookahead_pos = d->m_lookahead_size = d->m_dict_size = d->m_total_lz_bytes = d->m_lz_code_buf_dict_pos = d->m_bits_in = 0;\n        d->m_output_flush_ofs = d->m_output_flush_remaining = d->m_finished = d->m_block_index = d->m_bit_buffer = d->m_wants_to_finish = 0;\n        d->m_pLZ_code_buf = d->m_lz_code_buf + 1;\n        d->m_pLZ_flags = d->m_lz_code_buf;\n        *d->m_pLZ_flags = 0;\n        d->m_num_flags_left = 8;\n        d->m_pOutput_buf = d->m_output_buf;\n        d->m_pOutput_buf_end = d->m_output_buf;\n        d->m_prev_return_status = TDEFL_STATUS_OKAY;\n        d->m_saved_match_dist = d->m_saved_match_len = d->m_saved_lit = 0;\n        d->m_adler32 = 1;\n        d->m_pIn_buf = NULL;\n        d->m_pOut_buf = NULL;\n        d->m_pIn_buf_size = NULL;\n        d->m_pOut_buf_size = NULL;\n        d->m_flush = TDEFL_NO_FLUSH;\n        d->m_pSrc = NULL;\n        d->m_src_buf_left = 0;\n        d->m_out_buf_ofs = 0;\n        if (!(flags & TDEFL_NONDETERMINISTIC_PARSING_FLAG))\n            MZ_CLEAR_ARR(d->m_dict);\n        memset(&d->m_huff_count[0][0], 0, sizeof(d->m_huff_count[0][0]) * TDEFL_MAX_HUFF_SYMBOLS_0);\n        memset(&d->m_huff_count[1][0], 0, sizeof(d->m_huff_count[1][0]) * TDEFL_MAX_HUFF_SYMBOLS_1);\n        return TDEFL_STATUS_OKAY;\n    }\n\n    tdefl_status tdefl_get_prev_return_status(tdefl_compressor *d)\n    {\n        return d->m_prev_return_status;\n    }\n\n    mz_uint32 tdefl_get_adler32(tdefl_compressor *d)\n    {\n        return d->m_adler32;\n    }\n\n    mz_bool tdefl_compress_mem_to_output(const void *pBuf, size_t buf_len, tdefl_put_buf_func_ptr pPut_buf_func, void *pPut_buf_user, int flags)\n    {\n        tdefl_compressor *pComp;\n        mz_bool succeeded;\n        if (((buf_len) && (!pBuf)) || (!pPut_buf_func))\n            return MZ_FALSE;\n        pComp = (tdefl_compressor *)MZ_MALLOC(sizeof(tdefl_compressor));\n        if (!pComp)\n            return MZ_FALSE;\n        succeeded = (tdefl_init(pComp, pPut_buf_func, pPut_buf_user, flags) == TDEFL_STATUS_OKAY);\n        succeeded = succeeded && (tdefl_compress_buffer(pComp, pBuf, buf_len, TDEFL_FINISH) == TDEFL_STATUS_DONE);\n        MZ_FREE(pComp);\n        return succeeded;\n    }\n\n    typedef struct\n    {\n        size_t m_size, m_capacity;\n        mz_uint8 *m_pBuf;\n        mz_bool m_expandable;\n    } tdefl_output_buffer;\n\n    static mz_bool tdefl_output_buffer_putter(const void *pBuf, int len, void *pUser)\n    {\n        tdefl_output_buffer *p = (tdefl_output_buffer *)pUser;\n        size_t new_size = p->m_size + len;\n        if (new_size > p->m_capacity)\n        {\n            size_t new_capacity = p->m_capacity;\n            mz_uint8 *pNew_buf;\n            if (!p->m_expandable)\n                return MZ_FALSE;\n            do\n            {\n                new_capacity = MZ_MAX(128U, new_capacity << 1U);\n            } while (new_size > new_capacity);\n            pNew_buf = (mz_uint8 *)MZ_REALLOC(p->m_pBuf, new_capacity);\n            if (!pNew_buf)\n                return MZ_FALSE;\n            p->m_pBuf = pNew_buf;\n            p->m_capacity = new_capacity;\n        }\n        memcpy((mz_uint8 *)p->m_pBuf + p->m_size, pBuf, len);\n        p->m_size = new_size;\n        return MZ_TRUE;\n    }\n\n    void *tdefl_compress_mem_to_heap(const void *pSrc_buf, size_t src_buf_len, size_t *pOut_len, int flags)\n    {\n        tdefl_output_buffer out_buf;\n        MZ_CLEAR_OBJ(out_buf);\n        if (!pOut_len)\n            return MZ_FALSE;\n        else\n            *pOut_len = 0;\n        out_buf.m_expandable = MZ_TRUE;\n        if (!tdefl_compress_mem_to_output(pSrc_buf, src_buf_len, tdefl_output_buffer_putter, &out_buf, flags))\n            return NULL;\n        *pOut_len = out_buf.m_size;\n        return out_buf.m_pBuf;\n    }\n\n    size_t tdefl_compress_mem_to_mem(void *pOut_buf, size_t out_buf_len, const void *pSrc_buf, size_t src_buf_len, int flags)\n    {\n        tdefl_output_buffer out_buf;\n        MZ_CLEAR_OBJ(out_buf);\n        if (!pOut_buf)\n            return 0;\n        out_buf.m_pBuf = (mz_uint8 *)pOut_buf;\n        out_buf.m_capacity = out_buf_len;\n        if (!tdefl_compress_mem_to_output(pSrc_buf, src_buf_len, tdefl_output_buffer_putter, &out_buf, flags))\n            return 0;\n        return out_buf.m_size;\n    }\n\n    /* level may actually range from [0,10] (10 is a \"hidden\" max level, where we want a bit more compression and it's fine if throughput to fall off a cliff on some files). */\n    mz_uint tdefl_create_comp_flags_from_zip_params(int level, int window_bits, int strategy)\n    {\n        mz_uint comp_flags = s_tdefl_num_probes[(level >= 0) ? MZ_MIN(10, level) : MZ_DEFAULT_LEVEL] | ((level <= 3) ? TDEFL_GREEDY_PARSING_FLAG : 0);\n        if (window_bits > 0)\n            comp_flags |= TDEFL_WRITE_ZLIB_HEADER;\n\n        if (!level)\n            comp_flags |= TDEFL_FORCE_ALL_RAW_BLOCKS;\n        else if (strategy == MZ_FILTERED)\n            comp_flags |= TDEFL_FILTER_MATCHES;\n        else if (strategy == MZ_HUFFMAN_ONLY)\n            comp_flags &= ~TDEFL_MAX_PROBES_MASK;\n        else if (strategy == MZ_FIXED)\n            comp_flags |= TDEFL_FORCE_ALL_STATIC_BLOCKS;\n        else if (strategy == MZ_RLE)\n            comp_flags |= TDEFL_RLE_MATCHES;\n\n        return comp_flags;\n    }\n\n#ifdef _MSC_VER\n#pragma warning(push)\n#pragma warning(disable : 4204) /* nonstandard extension used : non-constant aggregate initializer (also supported by GNU C and C99, so no big deal) */\n#endif\n\n    /* Simple PNG writer function by Alex Evans, 2011. Released into the public domain: https://gist.github.com/908299, more context at\n     http://altdevblogaday.org/2011/04/06/a-smaller-jpg-encoder/.\n     This is actually a modification of Alex's original code so PNG files generated by this function pass pngcheck. */\n    void *tdefl_write_image_to_png_file_in_memory_ex(const void *pImage, int w, int h, int num_chans, size_t *pLen_out, mz_uint level, mz_bool flip)\n    {\n        /* Using a local copy of this array here in case MINIZ_NO_ZLIB_APIS was defined. */\n        static const mz_uint s_tdefl_png_num_probes[11] = { 0, 1, 6, 32, 16, 32, 128, 256, 512, 768, 1500 };\n        tdefl_compressor *pComp = (tdefl_compressor *)MZ_MALLOC(sizeof(tdefl_compressor));\n        tdefl_output_buffer out_buf;\n        int i, bpl = w * num_chans, y, z;\n        mz_uint32 c;\n        *pLen_out = 0;\n        if (!pComp)\n            return NULL;\n        MZ_CLEAR_OBJ(out_buf);\n        out_buf.m_expandable = MZ_TRUE;\n        out_buf.m_capacity = 57 + MZ_MAX(64, (1 + bpl) * h);\n        if (NULL == (out_buf.m_pBuf = (mz_uint8 *)MZ_MALLOC(out_buf.m_capacity)))\n        {\n            MZ_FREE(pComp);\n            return NULL;\n        }\n        /* write dummy header */\n        for (z = 41; z; --z)\n            tdefl_output_buffer_putter(&z, 1, &out_buf);\n        /* compress image data */\n        tdefl_init(pComp, tdefl_output_buffer_putter, &out_buf, s_tdefl_png_num_probes[MZ_MIN(10, level)] | TDEFL_WRITE_ZLIB_HEADER);\n        for (y = 0; y < h; ++y)\n        {\n            tdefl_compress_buffer(pComp, &z, 1, TDEFL_NO_FLUSH);\n            tdefl_compress_buffer(pComp, (mz_uint8 *)pImage + (flip ? (h - 1 - y) : y) * bpl, bpl, TDEFL_NO_FLUSH);\n        }\n        if (tdefl_compress_buffer(pComp, NULL, 0, TDEFL_FINISH) != TDEFL_STATUS_DONE)\n        {\n            MZ_FREE(pComp);\n            MZ_FREE(out_buf.m_pBuf);\n            return NULL;\n        }\n        /* write real header */\n        *pLen_out = out_buf.m_size - 41;\n        {\n            static const mz_uint8 chans[] = { 0x00, 0x00, 0x04, 0x02, 0x06 };\n            mz_uint8 pnghdr[41] = { 0x89, 0x50, 0x4e, 0x47, 0x0d,\n                                    0x0a, 0x1a, 0x0a, 0x00, 0x00,\n                                    0x00, 0x0d, 0x49, 0x48, 0x44,\n                                    0x52, 0x00, 0x00, 0x00, 0x00,\n                                    0x00, 0x00, 0x00, 0x00, 0x08,\n                                    0x00, 0x00, 0x00, 0x00, 0x00,\n                                    0x00, 0x00, 0x00, 0x00, 0x00,\n                                    0x00, 0x00, 0x49, 0x44, 0x41,\n                                    0x54 };\n            pnghdr[18] = (mz_uint8)(w >> 8);\n            pnghdr[19] = (mz_uint8)w;\n            pnghdr[22] = (mz_uint8)(h >> 8);\n            pnghdr[23] = (mz_uint8)h;\n            pnghdr[25] = chans[num_chans];\n            pnghdr[33] = (mz_uint8)(*pLen_out >> 24);\n            pnghdr[34] = (mz_uint8)(*pLen_out >> 16);\n            pnghdr[35] = (mz_uint8)(*pLen_out >> 8);\n            pnghdr[36] = (mz_uint8)*pLen_out;\n            c = (mz_uint32)mz_crc32(MZ_CRC32_INIT, pnghdr + 12, 17);\n            for (i = 0; i < 4; ++i, c <<= 8)\n                ((mz_uint8 *)(pnghdr + 29))[i] = (mz_uint8)(c >> 24);\n            memcpy(out_buf.m_pBuf, pnghdr, 41);\n        }\n        /* write footer (IDAT CRC-32, followed by IEND chunk) */\n        if (!tdefl_output_buffer_putter(\"\\0\\0\\0\\0\\0\\0\\0\\0\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\", 16, &out_buf))\n        {\n            *pLen_out = 0;\n            MZ_FREE(pComp);\n            MZ_FREE(out_buf.m_pBuf);\n            return NULL;\n        }\n        c = (mz_uint32)mz_crc32(MZ_CRC32_INIT, out_buf.m_pBuf + 41 - 4, *pLen_out + 4);\n        for (i = 0; i < 4; ++i, c <<= 8)\n            (out_buf.m_pBuf + out_buf.m_size - 16)[i] = (mz_uint8)(c >> 24);\n        /* compute final size of file, grab compressed data buffer and return */\n        *pLen_out += 57;\n        MZ_FREE(pComp);\n        return out_buf.m_pBuf;\n    }\n    void *tdefl_write_image_to_png_file_in_memory(const void *pImage, int w, int h, int num_chans, size_t *pLen_out)\n    {\n        /* Level 6 corresponds to TDEFL_DEFAULT_MAX_PROBES or MZ_DEFAULT_LEVEL (but we can't depend on MZ_DEFAULT_LEVEL being available in case the zlib API's where #defined out) */\n        return tdefl_write_image_to_png_file_in_memory_ex(pImage, w, h, num_chans, pLen_out, 6, MZ_FALSE);\n    }\n\n#ifndef MINIZ_NO_MALLOC\n    /* Allocate the tdefl_compressor and tinfl_decompressor structures in C so that */\n    /* non-C language bindings to tdefL_ and tinfl_ API don't need to worry about */\n    /* structure size and allocation mechanism. */\n    tdefl_compressor *tdefl_compressor_alloc(void)\n    {\n        return (tdefl_compressor *)MZ_MALLOC(sizeof(tdefl_compressor));\n    }\n\n    void tdefl_compressor_free(tdefl_compressor *pComp)\n    {\n        MZ_FREE(pComp);\n    }\n#endif\n\n#ifdef _MSC_VER\n#pragma warning(pop)\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /*#ifndef MINIZ_NO_DEFLATE_APIS*/\n"
        },
        {
          "name": "miniz_tdef.h",
          "type": "blob",
          "size": 10.4814453125,
          "content": "#pragma once\n#include \"miniz_common.h\"\n\n#ifndef MINIZ_NO_DEFLATE_APIS\n\n#ifdef __cplusplus\nextern \"C\"\n{\n#endif\n/* ------------------- Low-level Compression API Definitions */\n\n/* Set TDEFL_LESS_MEMORY to 1 to use less memory (compression will be slightly slower, and raw/dynamic blocks will be output more frequently). */\n#ifndef TDEFL_LESS_MEMORY\n#define TDEFL_LESS_MEMORY 0\n#endif\n\n    /* tdefl_init() compression flags logically OR'd together (low 12 bits contain the max. number of probes per dictionary search): */\n    /* TDEFL_DEFAULT_MAX_PROBES: The compressor defaults to 128 dictionary probes per dictionary search. 0=Huffman only, 1=Huffman+LZ (fastest/crap compression), 4095=Huffman+LZ (slowest/best compression). */\n    enum\n    {\n        TDEFL_HUFFMAN_ONLY = 0,\n        TDEFL_DEFAULT_MAX_PROBES = 128,\n        TDEFL_MAX_PROBES_MASK = 0xFFF\n    };\n\n    /* TDEFL_WRITE_ZLIB_HEADER: If set, the compressor outputs a zlib header before the deflate data, and the Adler-32 of the source data at the end. Otherwise, you'll get raw deflate data. */\n    /* TDEFL_COMPUTE_ADLER32: Always compute the adler-32 of the input data (even when not writing zlib headers). */\n    /* TDEFL_GREEDY_PARSING_FLAG: Set to use faster greedy parsing, instead of more efficient lazy parsing. */\n    /* TDEFL_NONDETERMINISTIC_PARSING_FLAG: Enable to decrease the compressor's initialization time to the minimum, but the output may vary from run to run given the same input (depending on the contents of memory). */\n    /* TDEFL_RLE_MATCHES: Only look for RLE matches (matches with a distance of 1) */\n    /* TDEFL_FILTER_MATCHES: Discards matches <= 5 chars if enabled. */\n    /* TDEFL_FORCE_ALL_STATIC_BLOCKS: Disable usage of optimized Huffman tables. */\n    /* TDEFL_FORCE_ALL_RAW_BLOCKS: Only use raw (uncompressed) deflate blocks. */\n    /* The low 12 bits are reserved to control the max # of hash probes per dictionary lookup (see TDEFL_MAX_PROBES_MASK). */\n    enum\n    {\n        TDEFL_WRITE_ZLIB_HEADER = 0x01000,\n        TDEFL_COMPUTE_ADLER32 = 0x02000,\n        TDEFL_GREEDY_PARSING_FLAG = 0x04000,\n        TDEFL_NONDETERMINISTIC_PARSING_FLAG = 0x08000,\n        TDEFL_RLE_MATCHES = 0x10000,\n        TDEFL_FILTER_MATCHES = 0x20000,\n        TDEFL_FORCE_ALL_STATIC_BLOCKS = 0x40000,\n        TDEFL_FORCE_ALL_RAW_BLOCKS = 0x80000\n    };\n\n    /* High level compression functions: */\n    /* tdefl_compress_mem_to_heap() compresses a block in memory to a heap block allocated via malloc(). */\n    /* On entry: */\n    /*  pSrc_buf, src_buf_len: Pointer and size of source block to compress. */\n    /*  flags: The max match finder probes (default is 128) logically OR'd against the above flags. Higher probes are slower but improve compression. */\n    /* On return: */\n    /*  Function returns a pointer to the compressed data, or NULL on failure. */\n    /*  *pOut_len will be set to the compressed data's size, which could be larger than src_buf_len on uncompressible data. */\n    /*  The caller must free() the returned block when it's no longer needed. */\n    MINIZ_EXPORT void *tdefl_compress_mem_to_heap(const void *pSrc_buf, size_t src_buf_len, size_t *pOut_len, int flags);\n\n    /* tdefl_compress_mem_to_mem() compresses a block in memory to another block in memory. */\n    /* Returns 0 on failure. */\n    MINIZ_EXPORT size_t tdefl_compress_mem_to_mem(void *pOut_buf, size_t out_buf_len, const void *pSrc_buf, size_t src_buf_len, int flags);\n\n    /* Compresses an image to a compressed PNG file in memory. */\n    /* On entry: */\n    /*  pImage, w, h, and num_chans describe the image to compress. num_chans may be 1, 2, 3, or 4. */\n    /*  The image pitch in bytes per scanline will be w*num_chans. The leftmost pixel on the top scanline is stored first in memory. */\n    /*  level may range from [0,10], use MZ_NO_COMPRESSION, MZ_BEST_SPEED, MZ_BEST_COMPRESSION, etc. or a decent default is MZ_DEFAULT_LEVEL */\n    /*  If flip is true, the image will be flipped on the Y axis (useful for OpenGL apps). */\n    /* On return: */\n    /*  Function returns a pointer to the compressed data, or NULL on failure. */\n    /*  *pLen_out will be set to the size of the PNG image file. */\n    /*  The caller must mz_free() the returned heap block (which will typically be larger than *pLen_out) when it's no longer needed. */\n    MINIZ_EXPORT void *tdefl_write_image_to_png_file_in_memory_ex(const void *pImage, int w, int h, int num_chans, size_t *pLen_out, mz_uint level, mz_bool flip);\n    MINIZ_EXPORT void *tdefl_write_image_to_png_file_in_memory(const void *pImage, int w, int h, int num_chans, size_t *pLen_out);\n\n    /* Output stream interface. The compressor uses this interface to write compressed data. It'll typically be called TDEFL_OUT_BUF_SIZE at a time. */\n    typedef mz_bool (*tdefl_put_buf_func_ptr)(const void *pBuf, int len, void *pUser);\n\n    /* tdefl_compress_mem_to_output() compresses a block to an output stream. The above helpers use this function internally. */\n    MINIZ_EXPORT mz_bool tdefl_compress_mem_to_output(const void *pBuf, size_t buf_len, tdefl_put_buf_func_ptr pPut_buf_func, void *pPut_buf_user, int flags);\n\n    enum\n    {\n        TDEFL_MAX_HUFF_TABLES = 3,\n        TDEFL_MAX_HUFF_SYMBOLS_0 = 288,\n        TDEFL_MAX_HUFF_SYMBOLS_1 = 32,\n        TDEFL_MAX_HUFF_SYMBOLS_2 = 19,\n        TDEFL_LZ_DICT_SIZE = 32768,\n        TDEFL_LZ_DICT_SIZE_MASK = TDEFL_LZ_DICT_SIZE - 1,\n        TDEFL_MIN_MATCH_LEN = 3,\n        TDEFL_MAX_MATCH_LEN = 258\n    };\n\n/* TDEFL_OUT_BUF_SIZE MUST be large enough to hold a single entire compressed output block (using static/fixed Huffman codes). */\n#if TDEFL_LESS_MEMORY\n    enum\n    {\n        TDEFL_LZ_CODE_BUF_SIZE = 24 * 1024,\n        TDEFL_OUT_BUF_SIZE = (TDEFL_LZ_CODE_BUF_SIZE * 13) / 10,\n        TDEFL_MAX_HUFF_SYMBOLS = 288,\n        TDEFL_LZ_HASH_BITS = 12,\n        TDEFL_LEVEL1_HASH_SIZE_MASK = 4095,\n        TDEFL_LZ_HASH_SHIFT = (TDEFL_LZ_HASH_BITS + 2) / 3,\n        TDEFL_LZ_HASH_SIZE = 1 << TDEFL_LZ_HASH_BITS\n    };\n#else\nenum\n{\n    TDEFL_LZ_CODE_BUF_SIZE = 64 * 1024,\n    TDEFL_OUT_BUF_SIZE = (mz_uint)((TDEFL_LZ_CODE_BUF_SIZE * 13) / 10),\n    TDEFL_MAX_HUFF_SYMBOLS = 288,\n    TDEFL_LZ_HASH_BITS = 15,\n    TDEFL_LEVEL1_HASH_SIZE_MASK = 4095,\n    TDEFL_LZ_HASH_SHIFT = (TDEFL_LZ_HASH_BITS + 2) / 3,\n    TDEFL_LZ_HASH_SIZE = 1 << TDEFL_LZ_HASH_BITS\n};\n#endif\n\n    /* The low-level tdefl functions below may be used directly if the above helper functions aren't flexible enough. The low-level functions don't make any heap allocations, unlike the above helper functions. */\n    typedef enum\n    {\n        TDEFL_STATUS_BAD_PARAM = -2,\n        TDEFL_STATUS_PUT_BUF_FAILED = -1,\n        TDEFL_STATUS_OKAY = 0,\n        TDEFL_STATUS_DONE = 1\n    } tdefl_status;\n\n    /* Must map to MZ_NO_FLUSH, MZ_SYNC_FLUSH, etc. enums */\n    typedef enum\n    {\n        TDEFL_NO_FLUSH = 0,\n        TDEFL_SYNC_FLUSH = 2,\n        TDEFL_FULL_FLUSH = 3,\n        TDEFL_FINISH = 4\n    } tdefl_flush;\n\n    /* tdefl's compression state structure. */\n    typedef struct\n    {\n        tdefl_put_buf_func_ptr m_pPut_buf_func;\n        void *m_pPut_buf_user;\n        mz_uint m_flags, m_max_probes[2];\n        int m_greedy_parsing;\n        mz_uint m_adler32, m_lookahead_pos, m_lookahead_size, m_dict_size;\n        mz_uint8 *m_pLZ_code_buf, *m_pLZ_flags, *m_pOutput_buf, *m_pOutput_buf_end;\n        mz_uint m_num_flags_left, m_total_lz_bytes, m_lz_code_buf_dict_pos, m_bits_in, m_bit_buffer;\n        mz_uint m_saved_match_dist, m_saved_match_len, m_saved_lit, m_output_flush_ofs, m_output_flush_remaining, m_finished, m_block_index, m_wants_to_finish;\n        tdefl_status m_prev_return_status;\n        const void *m_pIn_buf;\n        void *m_pOut_buf;\n        size_t *m_pIn_buf_size, *m_pOut_buf_size;\n        tdefl_flush m_flush;\n        const mz_uint8 *m_pSrc;\n        size_t m_src_buf_left, m_out_buf_ofs;\n        mz_uint8 m_dict[TDEFL_LZ_DICT_SIZE + TDEFL_MAX_MATCH_LEN - 1];\n        mz_uint16 m_huff_count[TDEFL_MAX_HUFF_TABLES][TDEFL_MAX_HUFF_SYMBOLS];\n        mz_uint16 m_huff_codes[TDEFL_MAX_HUFF_TABLES][TDEFL_MAX_HUFF_SYMBOLS];\n        mz_uint8 m_huff_code_sizes[TDEFL_MAX_HUFF_TABLES][TDEFL_MAX_HUFF_SYMBOLS];\n        mz_uint8 m_lz_code_buf[TDEFL_LZ_CODE_BUF_SIZE];\n        mz_uint16 m_next[TDEFL_LZ_DICT_SIZE];\n        mz_uint16 m_hash[TDEFL_LZ_HASH_SIZE];\n        mz_uint8 m_output_buf[TDEFL_OUT_BUF_SIZE];\n    } tdefl_compressor;\n\n    /* Initializes the compressor. */\n    /* There is no corresponding deinit() function because the tdefl API's do not dynamically allocate memory. */\n    /* pBut_buf_func: If NULL, output data will be supplied to the specified callback. In this case, the user should call the tdefl_compress_buffer() API for compression. */\n    /* If pBut_buf_func is NULL the user should always call the tdefl_compress() API. */\n    /* flags: See the above enums (TDEFL_HUFFMAN_ONLY, TDEFL_WRITE_ZLIB_HEADER, etc.) */\n    MINIZ_EXPORT tdefl_status tdefl_init(tdefl_compressor *d, tdefl_put_buf_func_ptr pPut_buf_func, void *pPut_buf_user, int flags);\n\n    /* Compresses a block of data, consuming as much of the specified input buffer as possible, and writing as much compressed data to the specified output buffer as possible. */\n    MINIZ_EXPORT tdefl_status tdefl_compress(tdefl_compressor *d, const void *pIn_buf, size_t *pIn_buf_size, void *pOut_buf, size_t *pOut_buf_size, tdefl_flush flush);\n\n    /* tdefl_compress_buffer() is only usable when the tdefl_init() is called with a non-NULL tdefl_put_buf_func_ptr. */\n    /* tdefl_compress_buffer() always consumes the entire input buffer. */\n    MINIZ_EXPORT tdefl_status tdefl_compress_buffer(tdefl_compressor *d, const void *pIn_buf, size_t in_buf_size, tdefl_flush flush);\n\n    MINIZ_EXPORT tdefl_status tdefl_get_prev_return_status(tdefl_compressor *d);\n    MINIZ_EXPORT mz_uint32 tdefl_get_adler32(tdefl_compressor *d);\n\n    /* Create tdefl_compress() flags given zlib-style compression parameters. */\n    /* level may range from [0,10] (where 10 is absolute max compression, but may be much slower on some files) */\n    /* window_bits may be -15 (raw deflate) or 15 (zlib) */\n    /* strategy may be either MZ_DEFAULT_STRATEGY, MZ_FILTERED, MZ_HUFFMAN_ONLY, MZ_RLE, or MZ_FIXED */\n    MINIZ_EXPORT mz_uint tdefl_create_comp_flags_from_zip_params(int level, int window_bits, int strategy);\n\n#ifndef MINIZ_NO_MALLOC\n    /* Allocate the tdefl_compressor structure in C so that */\n    /* non-C language bindings to tdefl_ API don't need to worry about */\n    /* structure size and allocation mechanism. */\n    MINIZ_EXPORT tdefl_compressor *tdefl_compressor_alloc(void);\n    MINIZ_EXPORT void tdefl_compressor_free(tdefl_compressor *pComp);\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /*#ifndef MINIZ_NO_DEFLATE_APIS*/\n"
        },
        {
          "name": "miniz_tinfl.c",
          "type": "blob",
          "size": 39.583984375,
          "content": "/**************************************************************************\n *\n * Copyright 2013-2014 RAD Game Tools and Valve Software\n * Copyright 2010-2014 Rich Geldreich and Tenacious Software LLC\n * All Rights Reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n **************************************************************************/\n\n#include \"miniz.h\"\n\n#ifndef MINIZ_NO_INFLATE_APIS\n\n#ifdef __cplusplus\nextern \"C\"\n{\n#endif\n\n    /* ------------------- Low-level Decompression (completely independent from all compression API's) */\n\n#define TINFL_MEMCPY(d, s, l) memcpy(d, s, l)\n#define TINFL_MEMSET(p, c, l) memset(p, c, l)\n\n#define TINFL_CR_BEGIN  \\\n    switch (r->m_state) \\\n    {                   \\\n        case 0:\n#define TINFL_CR_RETURN(state_index, result) \\\n    do                                       \\\n    {                                        \\\n        status = result;                     \\\n        r->m_state = state_index;            \\\n        goto common_exit;                    \\\n        case state_index:;                   \\\n    }                                        \\\n    MZ_MACRO_END\n#define TINFL_CR_RETURN_FOREVER(state_index, result) \\\n    do                                               \\\n    {                                                \\\n        for (;;)                                     \\\n        {                                            \\\n            TINFL_CR_RETURN(state_index, result);    \\\n        }                                            \\\n    }                                                \\\n    MZ_MACRO_END\n#define TINFL_CR_FINISH }\n\n#define TINFL_GET_BYTE(state_index, c)                                                                                                                           \\\n    do                                                                                                                                                           \\\n    {                                                                                                                                                            \\\n        while (pIn_buf_cur >= pIn_buf_end)                                                                                                                       \\\n        {                                                                                                                                                        \\\n            TINFL_CR_RETURN(state_index, (decomp_flags & TINFL_FLAG_HAS_MORE_INPUT) ? TINFL_STATUS_NEEDS_MORE_INPUT : TINFL_STATUS_FAILED_CANNOT_MAKE_PROGRESS); \\\n        }                                                                                                                                                        \\\n        c = *pIn_buf_cur++;                                                                                                                                      \\\n    }                                                                                                                                                            \\\n    MZ_MACRO_END\n\n#define TINFL_NEED_BITS(state_index, n)                \\\n    do                                                 \\\n    {                                                  \\\n        mz_uint c;                                     \\\n        TINFL_GET_BYTE(state_index, c);                \\\n        bit_buf |= (((tinfl_bit_buf_t)c) << num_bits); \\\n        num_bits += 8;                                 \\\n    } while (num_bits < (mz_uint)(n))\n#define TINFL_SKIP_BITS(state_index, n)      \\\n    do                                       \\\n    {                                        \\\n        if (num_bits < (mz_uint)(n))         \\\n        {                                    \\\n            TINFL_NEED_BITS(state_index, n); \\\n        }                                    \\\n        bit_buf >>= (n);                     \\\n        num_bits -= (n);                     \\\n    }                                        \\\n    MZ_MACRO_END\n#define TINFL_GET_BITS(state_index, b, n)    \\\n    do                                       \\\n    {                                        \\\n        if (num_bits < (mz_uint)(n))         \\\n        {                                    \\\n            TINFL_NEED_BITS(state_index, n); \\\n        }                                    \\\n        b = bit_buf & ((1 << (n)) - 1);      \\\n        bit_buf >>= (n);                     \\\n        num_bits -= (n);                     \\\n    }                                        \\\n    MZ_MACRO_END\n\n/* TINFL_HUFF_BITBUF_FILL() is only used rarely, when the number of bytes remaining in the input buffer falls below 2. */\n/* It reads just enough bytes from the input stream that are needed to decode the next Huffman code (and absolutely no more). It works by trying to fully decode a */\n/* Huffman code by using whatever bits are currently present in the bit buffer. If this fails, it reads another byte, and tries again until it succeeds or until the */\n/* bit buffer contains >=15 bits (deflate's max. Huffman code size). */\n#define TINFL_HUFF_BITBUF_FILL(state_index, pLookUp, pTree)          \\\n    do                                                               \\\n    {                                                                \\\n        temp = pLookUp[bit_buf & (TINFL_FAST_LOOKUP_SIZE - 1)];      \\\n        if (temp >= 0)                                               \\\n        {                                                            \\\n            code_len = temp >> 9;                                    \\\n            if ((code_len) && (num_bits >= code_len))                \\\n                break;                                               \\\n        }                                                            \\\n        else if (num_bits > TINFL_FAST_LOOKUP_BITS)                  \\\n        {                                                            \\\n            code_len = TINFL_FAST_LOOKUP_BITS;                       \\\n            do                                                       \\\n            {                                                        \\\n                temp = pTree[~temp + ((bit_buf >> code_len++) & 1)]; \\\n            } while ((temp < 0) && (num_bits >= (code_len + 1)));    \\\n            if (temp >= 0)                                           \\\n                break;                                               \\\n        }                                                            \\\n        TINFL_GET_BYTE(state_index, c);                              \\\n        bit_buf |= (((tinfl_bit_buf_t)c) << num_bits);               \\\n        num_bits += 8;                                               \\\n    } while (num_bits < 15);\n\n/* TINFL_HUFF_DECODE() decodes the next Huffman coded symbol. It's more complex than you would initially expect because the zlib API expects the decompressor to never read */\n/* beyond the final byte of the deflate stream. (In other words, when this macro wants to read another byte from the input, it REALLY needs another byte in order to fully */\n/* decode the next Huffman code.) Handling this properly is particularly important on raw deflate (non-zlib) streams, which aren't followed by a byte aligned adler-32. */\n/* The slow path is only executed at the very end of the input buffer. */\n/* v1.16: The original macro handled the case at the very end of the passed-in input buffer, but we also need to handle the case where the user passes in 1+zillion bytes */\n/* following the deflate data and our non-conservative read-ahead path won't kick in here on this code. This is much trickier. */\n#define TINFL_HUFF_DECODE(state_index, sym, pLookUp, pTree)                                                                         \\\n    do                                                                                                                              \\\n    {                                                                                                                               \\\n        int temp;                                                                                                                   \\\n        mz_uint code_len, c;                                                                                                        \\\n        if (num_bits < 15)                                                                                                          \\\n        {                                                                                                                           \\\n            if ((pIn_buf_end - pIn_buf_cur) < 2)                                                                                    \\\n            {                                                                                                                       \\\n                TINFL_HUFF_BITBUF_FILL(state_index, pLookUp, pTree);                                                                \\\n            }                                                                                                                       \\\n            else                                                                                                                    \\\n            {                                                                                                                       \\\n                bit_buf |= (((tinfl_bit_buf_t)pIn_buf_cur[0]) << num_bits) | (((tinfl_bit_buf_t)pIn_buf_cur[1]) << (num_bits + 8)); \\\n                pIn_buf_cur += 2;                                                                                                   \\\n                num_bits += 16;                                                                                                     \\\n            }                                                                                                                       \\\n        }                                                                                                                           \\\n        if ((temp = pLookUp[bit_buf & (TINFL_FAST_LOOKUP_SIZE - 1)]) >= 0)                                                          \\\n            code_len = temp >> 9, temp &= 511;                                                                                      \\\n        else                                                                                                                        \\\n        {                                                                                                                           \\\n            code_len = TINFL_FAST_LOOKUP_BITS;                                                                                      \\\n            do                                                                                                                      \\\n            {                                                                                                                       \\\n                temp = pTree[~temp + ((bit_buf >> code_len++) & 1)];                                                                \\\n            } while (temp < 0);                                                                                                     \\\n        }                                                                                                                           \\\n        sym = temp;                                                                                                                 \\\n        bit_buf >>= code_len;                                                                                                       \\\n        num_bits -= code_len;                                                                                                       \\\n    }                                                                                                                               \\\n    MZ_MACRO_END\n\n    static void tinfl_clear_tree(tinfl_decompressor *r)\n    {\n        if (r->m_type == 0)\n            MZ_CLEAR_ARR(r->m_tree_0);\n        else if (r->m_type == 1)\n            MZ_CLEAR_ARR(r->m_tree_1);\n        else\n            MZ_CLEAR_ARR(r->m_tree_2);\n    }\n\n    tinfl_status tinfl_decompress(tinfl_decompressor *r, const mz_uint8 *pIn_buf_next, size_t *pIn_buf_size, mz_uint8 *pOut_buf_start, mz_uint8 *pOut_buf_next, size_t *pOut_buf_size, const mz_uint32 decomp_flags)\n    {\n        static const mz_uint16 s_length_base[31] = { 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0 };\n        static const mz_uint8 s_length_extra[31] = { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0 };\n        static const mz_uint16 s_dist_base[32] = { 1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0 };\n        static const mz_uint8 s_dist_extra[32] = { 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13 };\n        static const mz_uint8 s_length_dezigzag[19] = { 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 };\n        static const mz_uint16 s_min_table_sizes[3] = { 257, 1, 4 };\n\n        mz_int16 *pTrees[3];\n        mz_uint8 *pCode_sizes[3];\n\n        tinfl_status status = TINFL_STATUS_FAILED;\n        mz_uint32 num_bits, dist, counter, num_extra;\n        tinfl_bit_buf_t bit_buf;\n        const mz_uint8 *pIn_buf_cur = pIn_buf_next, *const pIn_buf_end = pIn_buf_next + *pIn_buf_size;\n        mz_uint8 *pOut_buf_cur = pOut_buf_next, *const pOut_buf_end = pOut_buf_next ? pOut_buf_next + *pOut_buf_size : NULL;\n        size_t out_buf_size_mask = (decomp_flags & TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF) ? (size_t)-1 : ((pOut_buf_next - pOut_buf_start) + *pOut_buf_size) - 1, dist_from_out_buf_start;\n\n        /* Ensure the output buffer's size is a power of 2, unless the output buffer is large enough to hold the entire output file (in which case it doesn't matter). */\n        if (((out_buf_size_mask + 1) & out_buf_size_mask) || (pOut_buf_next < pOut_buf_start))\n        {\n            *pIn_buf_size = *pOut_buf_size = 0;\n            return TINFL_STATUS_BAD_PARAM;\n        }\n\n        pTrees[0] = r->m_tree_0;\n        pTrees[1] = r->m_tree_1;\n        pTrees[2] = r->m_tree_2;\n        pCode_sizes[0] = r->m_code_size_0;\n        pCode_sizes[1] = r->m_code_size_1;\n        pCode_sizes[2] = r->m_code_size_2;\n\n        num_bits = r->m_num_bits;\n        bit_buf = r->m_bit_buf;\n        dist = r->m_dist;\n        counter = r->m_counter;\n        num_extra = r->m_num_extra;\n        dist_from_out_buf_start = r->m_dist_from_out_buf_start;\n        TINFL_CR_BEGIN\n\n        bit_buf = num_bits = dist = counter = num_extra = r->m_zhdr0 = r->m_zhdr1 = 0;\n        r->m_z_adler32 = r->m_check_adler32 = 1;\n        if (decomp_flags & TINFL_FLAG_PARSE_ZLIB_HEADER)\n        {\n            TINFL_GET_BYTE(1, r->m_zhdr0);\n            TINFL_GET_BYTE(2, r->m_zhdr1);\n            counter = (((r->m_zhdr0 * 256 + r->m_zhdr1) % 31 != 0) || (r->m_zhdr1 & 32) || ((r->m_zhdr0 & 15) != 8));\n            if (!(decomp_flags & TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF))\n                counter |= (((1U << (8U + (r->m_zhdr0 >> 4))) > 32768U) || ((out_buf_size_mask + 1) < (size_t)((size_t)1 << (8U + (r->m_zhdr0 >> 4)))));\n            if (counter)\n            {\n                TINFL_CR_RETURN_FOREVER(36, TINFL_STATUS_FAILED);\n            }\n        }\n\n        do\n        {\n            TINFL_GET_BITS(3, r->m_final, 3);\n            r->m_type = r->m_final >> 1;\n            if (r->m_type == 0)\n            {\n                TINFL_SKIP_BITS(5, num_bits & 7);\n                for (counter = 0; counter < 4; ++counter)\n                {\n                    if (num_bits)\n                        TINFL_GET_BITS(6, r->m_raw_header[counter], 8);\n                    else\n                        TINFL_GET_BYTE(7, r->m_raw_header[counter]);\n                }\n                if ((counter = (r->m_raw_header[0] | (r->m_raw_header[1] << 8))) != (mz_uint)(0xFFFF ^ (r->m_raw_header[2] | (r->m_raw_header[3] << 8))))\n                {\n                    TINFL_CR_RETURN_FOREVER(39, TINFL_STATUS_FAILED);\n                }\n                while ((counter) && (num_bits))\n                {\n                    TINFL_GET_BITS(51, dist, 8);\n                    while (pOut_buf_cur >= pOut_buf_end)\n                    {\n                        TINFL_CR_RETURN(52, TINFL_STATUS_HAS_MORE_OUTPUT);\n                    }\n                    *pOut_buf_cur++ = (mz_uint8)dist;\n                    counter--;\n                }\n                while (counter)\n                {\n                    size_t n;\n                    while (pOut_buf_cur >= pOut_buf_end)\n                    {\n                        TINFL_CR_RETURN(9, TINFL_STATUS_HAS_MORE_OUTPUT);\n                    }\n                    while (pIn_buf_cur >= pIn_buf_end)\n                    {\n                        TINFL_CR_RETURN(38, (decomp_flags & TINFL_FLAG_HAS_MORE_INPUT) ? TINFL_STATUS_NEEDS_MORE_INPUT : TINFL_STATUS_FAILED_CANNOT_MAKE_PROGRESS);\n                    }\n                    n = MZ_MIN(MZ_MIN((size_t)(pOut_buf_end - pOut_buf_cur), (size_t)(pIn_buf_end - pIn_buf_cur)), counter);\n                    TINFL_MEMCPY(pOut_buf_cur, pIn_buf_cur, n);\n                    pIn_buf_cur += n;\n                    pOut_buf_cur += n;\n                    counter -= (mz_uint)n;\n                }\n            }\n            else if (r->m_type == 3)\n            {\n                TINFL_CR_RETURN_FOREVER(10, TINFL_STATUS_FAILED);\n            }\n            else\n            {\n                if (r->m_type == 1)\n                {\n                    mz_uint8 *p = r->m_code_size_0;\n                    mz_uint i;\n                    r->m_table_sizes[0] = 288;\n                    r->m_table_sizes[1] = 32;\n                    TINFL_MEMSET(r->m_code_size_1, 5, 32);\n                    for (i = 0; i <= 143; ++i)\n                        *p++ = 8;\n                    for (; i <= 255; ++i)\n                        *p++ = 9;\n                    for (; i <= 279; ++i)\n                        *p++ = 7;\n                    for (; i <= 287; ++i)\n                        *p++ = 8;\n                }\n                else\n                {\n                    for (counter = 0; counter < 3; counter++)\n                    {\n                        TINFL_GET_BITS(11, r->m_table_sizes[counter], \"\\05\\05\\04\"[counter]);\n                        r->m_table_sizes[counter] += s_min_table_sizes[counter];\n                    }\n                    MZ_CLEAR_ARR(r->m_code_size_2);\n                    for (counter = 0; counter < r->m_table_sizes[2]; counter++)\n                    {\n                        mz_uint s;\n                        TINFL_GET_BITS(14, s, 3);\n                        r->m_code_size_2[s_length_dezigzag[counter]] = (mz_uint8)s;\n                    }\n                    r->m_table_sizes[2] = 19;\n                }\n                for (; (int)r->m_type >= 0; r->m_type--)\n                {\n                    int tree_next, tree_cur;\n                    mz_int16 *pLookUp;\n                    mz_int16 *pTree;\n                    mz_uint8 *pCode_size;\n                    mz_uint i, j, used_syms, total, sym_index, next_code[17], total_syms[16];\n                    pLookUp = r->m_look_up[r->m_type];\n                    pTree = pTrees[r->m_type];\n                    pCode_size = pCode_sizes[r->m_type];\n                    MZ_CLEAR_ARR(total_syms);\n                    TINFL_MEMSET(pLookUp, 0, sizeof(r->m_look_up[0]));\n                    tinfl_clear_tree(r);\n                    for (i = 0; i < r->m_table_sizes[r->m_type]; ++i)\n                        total_syms[pCode_size[i]]++;\n                    used_syms = 0, total = 0;\n                    next_code[0] = next_code[1] = 0;\n                    for (i = 1; i <= 15; ++i)\n                    {\n                        used_syms += total_syms[i];\n                        next_code[i + 1] = (total = ((total + total_syms[i]) << 1));\n                    }\n                    if ((65536 != total) && (used_syms > 1))\n                    {\n                        TINFL_CR_RETURN_FOREVER(35, TINFL_STATUS_FAILED);\n                    }\n                    for (tree_next = -1, sym_index = 0; sym_index < r->m_table_sizes[r->m_type]; ++sym_index)\n                    {\n                        mz_uint rev_code = 0, l, cur_code, code_size = pCode_size[sym_index];\n                        if (!code_size)\n                            continue;\n                        cur_code = next_code[code_size]++;\n                        for (l = code_size; l > 0; l--, cur_code >>= 1)\n                            rev_code = (rev_code << 1) | (cur_code & 1);\n                        if (code_size <= TINFL_FAST_LOOKUP_BITS)\n                        {\n                            mz_int16 k = (mz_int16)((code_size << 9) | sym_index);\n                            while (rev_code < TINFL_FAST_LOOKUP_SIZE)\n                            {\n                                pLookUp[rev_code] = k;\n                                rev_code += (1 << code_size);\n                            }\n                            continue;\n                        }\n                        if (0 == (tree_cur = pLookUp[rev_code & (TINFL_FAST_LOOKUP_SIZE - 1)]))\n                        {\n                            pLookUp[rev_code & (TINFL_FAST_LOOKUP_SIZE - 1)] = (mz_int16)tree_next;\n                            tree_cur = tree_next;\n                            tree_next -= 2;\n                        }\n                        rev_code >>= (TINFL_FAST_LOOKUP_BITS - 1);\n                        for (j = code_size; j > (TINFL_FAST_LOOKUP_BITS + 1); j--)\n                        {\n                            tree_cur -= ((rev_code >>= 1) & 1);\n                            if (!pTree[-tree_cur - 1])\n                            {\n                                pTree[-tree_cur - 1] = (mz_int16)tree_next;\n                                tree_cur = tree_next;\n                                tree_next -= 2;\n                            }\n                            else\n                                tree_cur = pTree[-tree_cur - 1];\n                        }\n                        tree_cur -= ((rev_code >>= 1) & 1);\n                        pTree[-tree_cur - 1] = (mz_int16)sym_index;\n                    }\n                    if (r->m_type == 2)\n                    {\n                        for (counter = 0; counter < (r->m_table_sizes[0] + r->m_table_sizes[1]);)\n                        {\n                            mz_uint s;\n                            TINFL_HUFF_DECODE(16, dist, r->m_look_up[2], r->m_tree_2);\n                            if (dist < 16)\n                            {\n                                r->m_len_codes[counter++] = (mz_uint8)dist;\n                                continue;\n                            }\n                            if ((dist == 16) && (!counter))\n                            {\n                                TINFL_CR_RETURN_FOREVER(17, TINFL_STATUS_FAILED);\n                            }\n                            num_extra = \"\\02\\03\\07\"[dist - 16];\n                            TINFL_GET_BITS(18, s, num_extra);\n                            s += \"\\03\\03\\013\"[dist - 16];\n                            TINFL_MEMSET(r->m_len_codes + counter, (dist == 16) ? r->m_len_codes[counter - 1] : 0, s);\n                            counter += s;\n                        }\n                        if ((r->m_table_sizes[0] + r->m_table_sizes[1]) != counter)\n                        {\n                            TINFL_CR_RETURN_FOREVER(21, TINFL_STATUS_FAILED);\n                        }\n                        TINFL_MEMCPY(r->m_code_size_0, r->m_len_codes, r->m_table_sizes[0]);\n                        TINFL_MEMCPY(r->m_code_size_1, r->m_len_codes + r->m_table_sizes[0], r->m_table_sizes[1]);\n                    }\n                }\n                for (;;)\n                {\n                    mz_uint8 *pSrc;\n                    for (;;)\n                    {\n                        if (((pIn_buf_end - pIn_buf_cur) < 4) || ((pOut_buf_end - pOut_buf_cur) < 2))\n                        {\n                            TINFL_HUFF_DECODE(23, counter, r->m_look_up[0], r->m_tree_0);\n                            if (counter >= 256)\n                                break;\n                            while (pOut_buf_cur >= pOut_buf_end)\n                            {\n                                TINFL_CR_RETURN(24, TINFL_STATUS_HAS_MORE_OUTPUT);\n                            }\n                            *pOut_buf_cur++ = (mz_uint8)counter;\n                        }\n                        else\n                        {\n                            int sym2;\n                            mz_uint code_len;\n#if TINFL_USE_64BIT_BITBUF\n                            if (num_bits < 30)\n                            {\n                                bit_buf |= (((tinfl_bit_buf_t)MZ_READ_LE32(pIn_buf_cur)) << num_bits);\n                                pIn_buf_cur += 4;\n                                num_bits += 32;\n                            }\n#else\n                        if (num_bits < 15)\n                        {\n                            bit_buf |= (((tinfl_bit_buf_t)MZ_READ_LE16(pIn_buf_cur)) << num_bits);\n                            pIn_buf_cur += 2;\n                            num_bits += 16;\n                        }\n#endif\n                            if ((sym2 = r->m_look_up[0][bit_buf & (TINFL_FAST_LOOKUP_SIZE - 1)]) >= 0)\n                                code_len = sym2 >> 9;\n                            else\n                            {\n                                code_len = TINFL_FAST_LOOKUP_BITS;\n                                do\n                                {\n                                    sym2 = r->m_tree_0[~sym2 + ((bit_buf >> code_len++) & 1)];\n                                } while (sym2 < 0);\n                            }\n                            counter = sym2;\n                            bit_buf >>= code_len;\n                            num_bits -= code_len;\n                            if (counter & 256)\n                                break;\n\n#if !TINFL_USE_64BIT_BITBUF\n                            if (num_bits < 15)\n                            {\n                                bit_buf |= (((tinfl_bit_buf_t)MZ_READ_LE16(pIn_buf_cur)) << num_bits);\n                                pIn_buf_cur += 2;\n                                num_bits += 16;\n                            }\n#endif\n                            if ((sym2 = r->m_look_up[0][bit_buf & (TINFL_FAST_LOOKUP_SIZE - 1)]) >= 0)\n                                code_len = sym2 >> 9;\n                            else\n                            {\n                                code_len = TINFL_FAST_LOOKUP_BITS;\n                                do\n                                {\n                                    sym2 = r->m_tree_0[~sym2 + ((bit_buf >> code_len++) & 1)];\n                                } while (sym2 < 0);\n                            }\n                            bit_buf >>= code_len;\n                            num_bits -= code_len;\n                        \n                        /* assert(sym2 != 0 && counter != 0); */\n                        if (sym2 == 0 && counter == 0)\n                        {\n                            TINFL_CR_RETURN_FOREVER(40, TINFL_STATUS_FAILED);\n                        }\n\n                            pOut_buf_cur[0] = (mz_uint8)counter;\n                            if (sym2 & 256)\n                            {\n                                pOut_buf_cur++;\n                                counter = sym2;\n                                break;\n                            }\n                            pOut_buf_cur[1] = (mz_uint8)sym2;\n                            pOut_buf_cur += 2;\n                        }\n                    }\n                    if ((counter &= 511) == 256)\n                        break;\n\n                    num_extra = s_length_extra[counter - 257];\n                    counter = s_length_base[counter - 257];\n                    if (num_extra)\n                    {\n                        mz_uint extra_bits;\n                        TINFL_GET_BITS(25, extra_bits, num_extra);\n                        counter += extra_bits;\n                    }\n\n                    TINFL_HUFF_DECODE(26, dist, r->m_look_up[1], r->m_tree_1);\n                    num_extra = s_dist_extra[dist];\n                    dist = s_dist_base[dist];\n                    if (num_extra)\n                    {\n                        mz_uint extra_bits;\n                        TINFL_GET_BITS(27, extra_bits, num_extra);\n                        dist += extra_bits;\n                    }\n\n                    dist_from_out_buf_start = pOut_buf_cur - pOut_buf_start;\n                    if ((dist == 0 || dist > dist_from_out_buf_start || dist_from_out_buf_start == 0) && (decomp_flags & TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF))\n                    {\n                        TINFL_CR_RETURN_FOREVER(37, TINFL_STATUS_FAILED);\n                    }\n\n                    pSrc = pOut_buf_start + ((dist_from_out_buf_start - dist) & out_buf_size_mask);\n\n                    if ((MZ_MAX(pOut_buf_cur, pSrc) + counter) > pOut_buf_end)\n                    {\n                        while (counter--)\n                        {\n                            while (pOut_buf_cur >= pOut_buf_end)\n                            {\n                                TINFL_CR_RETURN(53, TINFL_STATUS_HAS_MORE_OUTPUT);\n                            }\n                            *pOut_buf_cur++ = pOut_buf_start[(dist_from_out_buf_start++ - dist) & out_buf_size_mask];\n                        }\n                        continue;\n                    }\n#if MINIZ_USE_UNALIGNED_LOADS_AND_STORES\n                    else if ((counter >= 9) && (counter <= dist))\n                    {\n                        const mz_uint8 *pSrc_end = pSrc + (counter & ~7);\n                        do\n                        {\n#ifdef MINIZ_UNALIGNED_USE_MEMCPY\n                            memcpy(pOut_buf_cur, pSrc, sizeof(mz_uint32) * 2);\n#else\n                            ((mz_uint32 *)pOut_buf_cur)[0] = ((const mz_uint32 *)pSrc)[0];\n                            ((mz_uint32 *)pOut_buf_cur)[1] = ((const mz_uint32 *)pSrc)[1];\n#endif\n                            pOut_buf_cur += 8;\n                        } while ((pSrc += 8) < pSrc_end);\n                        if ((counter &= 7) < 3)\n                        {\n                            if (counter)\n                            {\n                                pOut_buf_cur[0] = pSrc[0];\n                                if (counter > 1)\n                                    pOut_buf_cur[1] = pSrc[1];\n                                pOut_buf_cur += counter;\n                            }\n                            continue;\n                        }\n                    }\n#endif\n                    while (counter > 2)\n                    {\n                        pOut_buf_cur[0] = pSrc[0];\n                        pOut_buf_cur[1] = pSrc[1];\n                        pOut_buf_cur[2] = pSrc[2];\n                        pOut_buf_cur += 3;\n                        pSrc += 3;\n                        counter -= 3;\n                    }\n                    if (counter > 0)\n                    {\n                        pOut_buf_cur[0] = pSrc[0];\n                        if (counter > 1)\n                            pOut_buf_cur[1] = pSrc[1];\n                        pOut_buf_cur += counter;\n                    }\n                }\n            }\n        } while (!(r->m_final & 1));\n\n        /* Ensure byte alignment and put back any bytes from the bitbuf if we've looked ahead too far on gzip, or other Deflate streams followed by arbitrary data. */\n        /* I'm being super conservative here. A number of simplifications can be made to the byte alignment part, and the Adler32 check shouldn't ever need to worry about reading from the bitbuf now. */\n        TINFL_SKIP_BITS(32, num_bits & 7);\n        while ((pIn_buf_cur > pIn_buf_next) && (num_bits >= 8))\n        {\n            --pIn_buf_cur;\n            num_bits -= 8;\n        }\n        bit_buf &= ~(~(tinfl_bit_buf_t)0 << num_bits);\n        MZ_ASSERT(!num_bits); /* if this assert fires then we've read beyond the end of non-deflate/zlib streams with following data (such as gzip streams). */\n\n        if (decomp_flags & TINFL_FLAG_PARSE_ZLIB_HEADER)\n        {\n            for (counter = 0; counter < 4; ++counter)\n            {\n                mz_uint s;\n                if (num_bits)\n                    TINFL_GET_BITS(41, s, 8);\n                else\n                    TINFL_GET_BYTE(42, s);\n                r->m_z_adler32 = (r->m_z_adler32 << 8) | s;\n            }\n        }\n        TINFL_CR_RETURN_FOREVER(34, TINFL_STATUS_DONE);\n\n        TINFL_CR_FINISH\n\n    common_exit:\n        /* As long as we aren't telling the caller that we NEED more input to make forward progress: */\n        /* Put back any bytes from the bitbuf in case we've looked ahead too far on gzip, or other Deflate streams followed by arbitrary data. */\n        /* We need to be very careful here to NOT push back any bytes we definitely know we need to make forward progress, though, or we'll lock the caller up into an inf loop. */\n        if ((status != TINFL_STATUS_NEEDS_MORE_INPUT) && (status != TINFL_STATUS_FAILED_CANNOT_MAKE_PROGRESS))\n        {\n            while ((pIn_buf_cur > pIn_buf_next) && (num_bits >= 8))\n            {\n                --pIn_buf_cur;\n                num_bits -= 8;\n            }\n        }\n        r->m_num_bits = num_bits;\n        r->m_bit_buf = bit_buf & ~(~(tinfl_bit_buf_t)0 << num_bits);\n        r->m_dist = dist;\n        r->m_counter = counter;\n        r->m_num_extra = num_extra;\n        r->m_dist_from_out_buf_start = dist_from_out_buf_start;\n        *pIn_buf_size = pIn_buf_cur - pIn_buf_next;\n        *pOut_buf_size = pOut_buf_cur - pOut_buf_next;\n        if ((decomp_flags & (TINFL_FLAG_PARSE_ZLIB_HEADER | TINFL_FLAG_COMPUTE_ADLER32)) && (status >= 0))\n        {\n            const mz_uint8 *ptr = pOut_buf_next;\n            size_t buf_len = *pOut_buf_size;\n            mz_uint32 i, s1 = r->m_check_adler32 & 0xffff, s2 = r->m_check_adler32 >> 16;\n            size_t block_len = buf_len % 5552;\n            while (buf_len)\n            {\n                for (i = 0; i + 7 < block_len; i += 8, ptr += 8)\n                {\n                    s1 += ptr[0], s2 += s1;\n                    s1 += ptr[1], s2 += s1;\n                    s1 += ptr[2], s2 += s1;\n                    s1 += ptr[3], s2 += s1;\n                    s1 += ptr[4], s2 += s1;\n                    s1 += ptr[5], s2 += s1;\n                    s1 += ptr[6], s2 += s1;\n                    s1 += ptr[7], s2 += s1;\n                }\n                for (; i < block_len; ++i)\n                    s1 += *ptr++, s2 += s1;\n                s1 %= 65521U, s2 %= 65521U;\n                buf_len -= block_len;\n                block_len = 5552;\n            }\n            r->m_check_adler32 = (s2 << 16) + s1;\n            if ((status == TINFL_STATUS_DONE) && (decomp_flags & TINFL_FLAG_PARSE_ZLIB_HEADER) && (r->m_check_adler32 != r->m_z_adler32))\n                status = TINFL_STATUS_ADLER32_MISMATCH;\n        }\n        return status;\n    }\n\n    /* Higher level helper functions. */\n    void *tinfl_decompress_mem_to_heap(const void *pSrc_buf, size_t src_buf_len, size_t *pOut_len, int flags)\n    {\n        tinfl_decompressor decomp;\n        void *pBuf = NULL, *pNew_buf;\n        size_t src_buf_ofs = 0, out_buf_capacity = 0;\n        *pOut_len = 0;\n        tinfl_init(&decomp);\n        for (;;)\n        {\n            size_t src_buf_size = src_buf_len - src_buf_ofs, dst_buf_size = out_buf_capacity - *pOut_len, new_out_buf_capacity;\n            tinfl_status status = tinfl_decompress(&decomp, (const mz_uint8 *)pSrc_buf + src_buf_ofs, &src_buf_size, (mz_uint8 *)pBuf, pBuf ? (mz_uint8 *)pBuf + *pOut_len : NULL, &dst_buf_size,\n                                                   (flags & ~TINFL_FLAG_HAS_MORE_INPUT) | TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF);\n            if ((status < 0) || (status == TINFL_STATUS_NEEDS_MORE_INPUT))\n            {\n                MZ_FREE(pBuf);\n                *pOut_len = 0;\n                return NULL;\n            }\n            src_buf_ofs += src_buf_size;\n            *pOut_len += dst_buf_size;\n            if (status == TINFL_STATUS_DONE)\n                break;\n            new_out_buf_capacity = out_buf_capacity * 2;\n            if (new_out_buf_capacity < 128)\n                new_out_buf_capacity = 128;\n            pNew_buf = MZ_REALLOC(pBuf, new_out_buf_capacity);\n            if (!pNew_buf)\n            {\n                MZ_FREE(pBuf);\n                *pOut_len = 0;\n                return NULL;\n            }\n            pBuf = pNew_buf;\n            out_buf_capacity = new_out_buf_capacity;\n        }\n        return pBuf;\n    }\n\n    size_t tinfl_decompress_mem_to_mem(void *pOut_buf, size_t out_buf_len, const void *pSrc_buf, size_t src_buf_len, int flags)\n    {\n        tinfl_decompressor decomp;\n        tinfl_status status;\n        tinfl_init(&decomp);\n        status = tinfl_decompress(&decomp, (const mz_uint8 *)pSrc_buf, &src_buf_len, (mz_uint8 *)pOut_buf, (mz_uint8 *)pOut_buf, &out_buf_len, (flags & ~TINFL_FLAG_HAS_MORE_INPUT) | TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF);\n        return (status != TINFL_STATUS_DONE) ? TINFL_DECOMPRESS_MEM_TO_MEM_FAILED : out_buf_len;\n    }\n\n    int tinfl_decompress_mem_to_callback(const void *pIn_buf, size_t *pIn_buf_size, tinfl_put_buf_func_ptr pPut_buf_func, void *pPut_buf_user, int flags)\n    {\n        int result = 0;\n        tinfl_decompressor decomp;\n        mz_uint8 *pDict = (mz_uint8 *)MZ_MALLOC(TINFL_LZ_DICT_SIZE);\n        size_t in_buf_ofs = 0, dict_ofs = 0;\n        if (!pDict)\n            return TINFL_STATUS_FAILED;\n        memset(pDict, 0, TINFL_LZ_DICT_SIZE);\n        tinfl_init(&decomp);\n        for (;;)\n        {\n            size_t in_buf_size = *pIn_buf_size - in_buf_ofs, dst_buf_size = TINFL_LZ_DICT_SIZE - dict_ofs;\n            tinfl_status status = tinfl_decompress(&decomp, (const mz_uint8 *)pIn_buf + in_buf_ofs, &in_buf_size, pDict, pDict + dict_ofs, &dst_buf_size,\n                                                   (flags & ~(TINFL_FLAG_HAS_MORE_INPUT | TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF)));\n            in_buf_ofs += in_buf_size;\n            if ((dst_buf_size) && (!(*pPut_buf_func)(pDict + dict_ofs, (int)dst_buf_size, pPut_buf_user)))\n                break;\n            if (status != TINFL_STATUS_HAS_MORE_OUTPUT)\n            {\n                result = (status == TINFL_STATUS_DONE);\n                break;\n            }\n            dict_ofs = (dict_ofs + dst_buf_size) & (TINFL_LZ_DICT_SIZE - 1);\n        }\n        MZ_FREE(pDict);\n        *pIn_buf_size = in_buf_ofs;\n        return result;\n    }\n\n#ifndef MINIZ_NO_MALLOC\n    tinfl_decompressor *tinfl_decompressor_alloc(void)\n    {\n        tinfl_decompressor *pDecomp = (tinfl_decompressor *)MZ_MALLOC(sizeof(tinfl_decompressor));\n        if (pDecomp)\n            tinfl_init(pDecomp);\n        return pDecomp;\n    }\n\n    void tinfl_decompressor_free(tinfl_decompressor *pDecomp)\n    {\n        MZ_FREE(pDecomp);\n    }\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /*#ifndef MINIZ_NO_INFLATE_APIS*/\n"
        },
        {
          "name": "miniz_tinfl.h",
          "type": "blob",
          "size": 8.4912109375,
          "content": "#pragma once\n#include \"miniz_common.h\"\n/* ------------------- Low-level Decompression API Definitions */\n\n#ifndef MINIZ_NO_INFLATE_APIS\n\n#ifdef __cplusplus\nextern \"C\"\n{\n#endif\n    /* Decompression flags used by tinfl_decompress(). */\n    /* TINFL_FLAG_PARSE_ZLIB_HEADER: If set, the input has a valid zlib header and ends with an adler32 checksum (it's a valid zlib stream). Otherwise, the input is a raw deflate stream. */\n    /* TINFL_FLAG_HAS_MORE_INPUT: If set, there are more input bytes available beyond the end of the supplied input buffer. If clear, the input buffer contains all remaining input. */\n    /* TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF: If set, the output buffer is large enough to hold the entire decompressed stream. If clear, the output buffer is at least the size of the dictionary (typically 32KB). */\n    /* TINFL_FLAG_COMPUTE_ADLER32: Force adler-32 checksum computation of the decompressed bytes. */\n    enum\n    {\n        TINFL_FLAG_PARSE_ZLIB_HEADER = 1,\n        TINFL_FLAG_HAS_MORE_INPUT = 2,\n        TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF = 4,\n        TINFL_FLAG_COMPUTE_ADLER32 = 8\n    };\n\n    /* High level decompression functions: */\n    /* tinfl_decompress_mem_to_heap() decompresses a block in memory to a heap block allocated via malloc(). */\n    /* On entry: */\n    /*  pSrc_buf, src_buf_len: Pointer and size of the Deflate or zlib source data to decompress. */\n    /* On return: */\n    /*  Function returns a pointer to the decompressed data, or NULL on failure. */\n    /*  *pOut_len will be set to the decompressed data's size, which could be larger than src_buf_len on uncompressible data. */\n    /*  The caller must call mz_free() on the returned block when it's no longer needed. */\n    MINIZ_EXPORT void *tinfl_decompress_mem_to_heap(const void *pSrc_buf, size_t src_buf_len, size_t *pOut_len, int flags);\n\n/* tinfl_decompress_mem_to_mem() decompresses a block in memory to another block in memory. */\n/* Returns TINFL_DECOMPRESS_MEM_TO_MEM_FAILED on failure, or the number of bytes written on success. */\n#define TINFL_DECOMPRESS_MEM_TO_MEM_FAILED ((size_t)(-1))\n    MINIZ_EXPORT size_t tinfl_decompress_mem_to_mem(void *pOut_buf, size_t out_buf_len, const void *pSrc_buf, size_t src_buf_len, int flags);\n\n    /* tinfl_decompress_mem_to_callback() decompresses a block in memory to an internal 32KB buffer, and a user provided callback function will be called to flush the buffer. */\n    /* Returns 1 on success or 0 on failure. */\n    typedef int (*tinfl_put_buf_func_ptr)(const void *pBuf, int len, void *pUser);\n    MINIZ_EXPORT int tinfl_decompress_mem_to_callback(const void *pIn_buf, size_t *pIn_buf_size, tinfl_put_buf_func_ptr pPut_buf_func, void *pPut_buf_user, int flags);\n\n    struct tinfl_decompressor_tag;\n    typedef struct tinfl_decompressor_tag tinfl_decompressor;\n\n#ifndef MINIZ_NO_MALLOC\n    /* Allocate the tinfl_decompressor structure in C so that */\n    /* non-C language bindings to tinfl_ API don't need to worry about */\n    /* structure size and allocation mechanism. */\n    MINIZ_EXPORT tinfl_decompressor *tinfl_decompressor_alloc(void);\n    MINIZ_EXPORT void tinfl_decompressor_free(tinfl_decompressor *pDecomp);\n#endif\n\n/* Max size of LZ dictionary. */\n#define TINFL_LZ_DICT_SIZE 32768\n\n    /* Return status. */\n    typedef enum\n    {\n        /* This flags indicates the inflator needs 1 or more input bytes to make forward progress, but the caller is indicating that no more are available. The compressed data */\n        /* is probably corrupted. If you call the inflator again with more bytes it'll try to continue processing the input but this is a BAD sign (either the data is corrupted or you called it incorrectly). */\n        /* If you call it again with no input you'll just get TINFL_STATUS_FAILED_CANNOT_MAKE_PROGRESS again. */\n        TINFL_STATUS_FAILED_CANNOT_MAKE_PROGRESS = -4,\n\n        /* This flag indicates that one or more of the input parameters was obviously bogus. (You can try calling it again, but if you get this error the calling code is wrong.) */\n        TINFL_STATUS_BAD_PARAM = -3,\n\n        /* This flags indicate the inflator is finished but the adler32 check of the uncompressed data didn't match. If you call it again it'll return TINFL_STATUS_DONE. */\n        TINFL_STATUS_ADLER32_MISMATCH = -2,\n\n        /* This flags indicate the inflator has somehow failed (bad code, corrupted input, etc.). If you call it again without resetting via tinfl_init() it it'll just keep on returning the same status failure code. */\n        TINFL_STATUS_FAILED = -1,\n\n        /* Any status code less than TINFL_STATUS_DONE must indicate a failure. */\n\n        /* This flag indicates the inflator has returned every byte of uncompressed data that it can, has consumed every byte that it needed, has successfully reached the end of the deflate stream, and */\n        /* if zlib headers and adler32 checking enabled that it has successfully checked the uncompressed data's adler32. If you call it again you'll just get TINFL_STATUS_DONE over and over again. */\n        TINFL_STATUS_DONE = 0,\n\n        /* This flag indicates the inflator MUST have more input data (even 1 byte) before it can make any more forward progress, or you need to clear the TINFL_FLAG_HAS_MORE_INPUT */\n        /* flag on the next call if you don't have any more source data. If the source data was somehow corrupted it's also possible (but unlikely) for the inflator to keep on demanding input to */\n        /* proceed, so be sure to properly set the TINFL_FLAG_HAS_MORE_INPUT flag. */\n        TINFL_STATUS_NEEDS_MORE_INPUT = 1,\n\n        /* This flag indicates the inflator definitely has 1 or more bytes of uncompressed data available, but it cannot write this data into the output buffer. */\n        /* Note if the source compressed data was corrupted it's possible for the inflator to return a lot of uncompressed data to the caller. I've been assuming you know how much uncompressed data to expect */\n        /* (either exact or worst case) and will stop calling the inflator and fail after receiving too much. In pure streaming scenarios where you have no idea how many bytes to expect this may not be possible */\n        /* so I may need to add some code to address this. */\n        TINFL_STATUS_HAS_MORE_OUTPUT = 2\n    } tinfl_status;\n\n/* Initializes the decompressor to its initial state. */\n#define tinfl_init(r)     \\\n    do                    \\\n    {                     \\\n        (r)->m_state = 0; \\\n    }                     \\\n    MZ_MACRO_END\n#define tinfl_get_adler32(r) (r)->m_check_adler32\n\n    /* Main low-level decompressor coroutine function. This is the only function actually needed for decompression. All the other functions are just high-level helpers for improved usability. */\n    /* This is a universal API, i.e. it can be used as a building block to build any desired higher level decompression API. In the limit case, it can be called once per every byte input or output. */\n    MINIZ_EXPORT tinfl_status tinfl_decompress(tinfl_decompressor *r, const mz_uint8 *pIn_buf_next, size_t *pIn_buf_size, mz_uint8 *pOut_buf_start, mz_uint8 *pOut_buf_next, size_t *pOut_buf_size, const mz_uint32 decomp_flags);\n\n    /* Internal/private bits follow. */\n    enum\n    {\n        TINFL_MAX_HUFF_TABLES = 3,\n        TINFL_MAX_HUFF_SYMBOLS_0 = 288,\n        TINFL_MAX_HUFF_SYMBOLS_1 = 32,\n        TINFL_MAX_HUFF_SYMBOLS_2 = 19,\n        TINFL_FAST_LOOKUP_BITS = 10,\n        TINFL_FAST_LOOKUP_SIZE = 1 << TINFL_FAST_LOOKUP_BITS\n    };\n\n#if MINIZ_HAS_64BIT_REGISTERS\n#define TINFL_USE_64BIT_BITBUF 1\n#else\n#define TINFL_USE_64BIT_BITBUF 0\n#endif\n\n#if TINFL_USE_64BIT_BITBUF\n    typedef mz_uint64 tinfl_bit_buf_t;\n#define TINFL_BITBUF_SIZE (64)\n#else\ntypedef mz_uint32 tinfl_bit_buf_t;\n#define TINFL_BITBUF_SIZE (32)\n#endif\n\n    struct tinfl_decompressor_tag\n    {\n        mz_uint32 m_state, m_num_bits, m_zhdr0, m_zhdr1, m_z_adler32, m_final, m_type, m_check_adler32, m_dist, m_counter, m_num_extra, m_table_sizes[TINFL_MAX_HUFF_TABLES];\n        tinfl_bit_buf_t m_bit_buf;\n        size_t m_dist_from_out_buf_start;\n        mz_int16 m_look_up[TINFL_MAX_HUFF_TABLES][TINFL_FAST_LOOKUP_SIZE];\n        mz_int16 m_tree_0[TINFL_MAX_HUFF_SYMBOLS_0 * 2];\n        mz_int16 m_tree_1[TINFL_MAX_HUFF_SYMBOLS_1 * 2];\n        mz_int16 m_tree_2[TINFL_MAX_HUFF_SYMBOLS_2 * 2];\n        mz_uint8 m_code_size_0[TINFL_MAX_HUFF_SYMBOLS_0];\n        mz_uint8 m_code_size_1[TINFL_MAX_HUFF_SYMBOLS_1];\n        mz_uint8 m_code_size_2[TINFL_MAX_HUFF_SYMBOLS_2];\n        mz_uint8 m_raw_header[4], m_len_codes[TINFL_MAX_HUFF_SYMBOLS_0 + TINFL_MAX_HUFF_SYMBOLS_1 + 137];\n    };\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /*#ifndef MINIZ_NO_INFLATE_APIS*/\n"
        },
        {
          "name": "miniz_zip.c",
          "type": "blob",
          "size": 203.3466796875,
          "content": "/**************************************************************************\n *\n * Copyright 2013-2014 RAD Game Tools and Valve Software\n * Copyright 2010-2014 Rich Geldreich and Tenacious Software LLC\n * Copyright 2016 Martin Raiber\n * All Rights Reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n **************************************************************************/\n#include \"miniz.h\"\n\n#ifndef MINIZ_NO_ARCHIVE_APIS\n\n#ifdef __cplusplus\nextern \"C\"\n{\n#endif\n\n    /* ------------------- .ZIP archive reading */\n\n#ifdef MINIZ_NO_STDIO\n#define MZ_FILE void *\n#else\n#include <sys/stat.h>\n\n#if defined(_MSC_VER) || defined(__MINGW64__) || defined(__MINGW32__)\n\n#ifndef WIN32_LEAN_AND_MEAN\n#define WIN32_LEAN_AND_MEAN\n#endif\n#ifndef __cplusplus\n#define MICROSOFT_WINDOWS_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS 0\n#endif\n#ifndef NOMINMAX\n#define NOMINMAX\n#endif\n#include <windows.h>\n\nstatic WCHAR *mz_utf8z_to_widechar(const char *str)\n{\n    int reqChars = MultiByteToWideChar(CP_UTF8, 0, str, -1, NULL, 0);\n    WCHAR *wStr = (WCHAR *)malloc(reqChars * sizeof(WCHAR));\n    MultiByteToWideChar(CP_UTF8, 0, str, -1, wStr, reqChars);\n    return wStr;\n}\n\nstatic FILE *mz_fopen(const char *pFilename, const char *pMode)\n{\n    WCHAR *wFilename = mz_utf8z_to_widechar(pFilename);\n    WCHAR *wMode = mz_utf8z_to_widechar(pMode);\n    FILE *pFile = NULL;\n    errno_t err = _wfopen_s(&pFile, wFilename, wMode);\n    free(wFilename);\n    free(wMode);\n    return err ? NULL : pFile;\n}\n\nstatic FILE *mz_freopen(const char *pPath, const char *pMode, FILE *pStream)\n{\n    WCHAR *wPath = mz_utf8z_to_widechar(pPath);\n    WCHAR *wMode = mz_utf8z_to_widechar(pMode);\n    FILE *pFile = NULL;\n    errno_t err = _wfreopen_s(&pFile, wPath, wMode, pStream);\n    free(wPath);\n    free(wMode);\n    return err ? NULL : pFile;\n}\n\n#if defined(__MINGW32__)\nstatic int mz_stat(const char *path, struct _stat *buffer)\n{\n    WCHAR *wPath = mz_utf8z_to_widechar(path);\n    int res = _wstat(wPath, buffer);\n    free(wPath);\n    return res;\n}\n#else\nstatic int mz_stat64(const char *path, struct __stat64 *buffer)\n{\n    WCHAR *wPath = mz_utf8z_to_widechar(path);\n    int res = _wstat64(wPath, buffer);\n    free(wPath);\n    return res;\n}\n#endif\n\n#ifndef MINIZ_NO_TIME\n#include <sys/utime.h>\n#endif\n#define MZ_FOPEN mz_fopen\n#define MZ_FCLOSE fclose\n#define MZ_FREAD fread\n#define MZ_FWRITE fwrite\n#define MZ_FTELL64 _ftelli64\n#define MZ_FSEEK64 _fseeki64\n#if defined(__MINGW32__)\n#define MZ_FILE_STAT_STRUCT _stat\n#define MZ_FILE_STAT mz_stat\n#else\n#define MZ_FILE_STAT_STRUCT _stat64\n#define MZ_FILE_STAT mz_stat64\n#endif\n#define MZ_FFLUSH fflush\n#define MZ_FREOPEN mz_freopen\n#define MZ_DELETE_FILE remove\n\n#elif defined(__WATCOMC__)\n#ifndef MINIZ_NO_TIME\n#include <sys/utime.h>\n#endif\n#define MZ_FOPEN(f, m) fopen(f, m)\n#define MZ_FCLOSE fclose\n#define MZ_FREAD fread\n#define MZ_FWRITE fwrite\n#define MZ_FTELL64 _ftelli64\n#define MZ_FSEEK64 _fseeki64\n#define MZ_FILE_STAT_STRUCT stat\n#define MZ_FILE_STAT stat\n#define MZ_FFLUSH fflush\n#define MZ_FREOPEN(f, m, s) freopen(f, m, s)\n#define MZ_DELETE_FILE remove\n\n#elif defined(__TINYC__)\n#ifndef MINIZ_NO_TIME\n#include <sys/utime.h>\n#endif\n#define MZ_FOPEN(f, m) fopen(f, m)\n#define MZ_FCLOSE fclose\n#define MZ_FREAD fread\n#define MZ_FWRITE fwrite\n#define MZ_FTELL64 ftell\n#define MZ_FSEEK64 fseek\n#define MZ_FILE_STAT_STRUCT stat\n#define MZ_FILE_STAT stat\n#define MZ_FFLUSH fflush\n#define MZ_FREOPEN(f, m, s) freopen(f, m, s)\n#define MZ_DELETE_FILE remove\n\n#elif defined(__USE_LARGEFILE64) /* gcc, clang */\n#ifndef MINIZ_NO_TIME\n#include <utime.h>\n#endif\n#define MZ_FOPEN(f, m) fopen64(f, m)\n#define MZ_FCLOSE fclose\n#define MZ_FREAD fread\n#define MZ_FWRITE fwrite\n#define MZ_FTELL64 ftello64\n#define MZ_FSEEK64 fseeko64\n#define MZ_FILE_STAT_STRUCT stat64\n#define MZ_FILE_STAT stat64\n#define MZ_FFLUSH fflush\n#define MZ_FREOPEN(p, m, s) freopen64(p, m, s)\n#define MZ_DELETE_FILE remove\n\n#elif defined(__APPLE__) || defined(__FreeBSD__) || (defined(__linux__) && defined(__x86_64__))\n#ifndef MINIZ_NO_TIME\n#include <utime.h>\n#endif\n#define MZ_FOPEN(f, m) fopen(f, m)\n#define MZ_FCLOSE fclose\n#define MZ_FREAD fread\n#define MZ_FWRITE fwrite\n#define MZ_FTELL64 ftello\n#define MZ_FSEEK64 fseeko\n#define MZ_FILE_STAT_STRUCT stat\n#define MZ_FILE_STAT stat\n#define MZ_FFLUSH fflush\n#define MZ_FREOPEN(p, m, s) freopen(p, m, s)\n#define MZ_DELETE_FILE remove\n\n#else\n#pragma message(\"Using fopen, ftello, fseeko, stat() etc. path for file I/O - this path may not support large files.\")\n#ifndef MINIZ_NO_TIME\n#include <utime.h>\n#endif\n#define MZ_FOPEN(f, m) fopen(f, m)\n#define MZ_FCLOSE fclose\n#define MZ_FREAD fread\n#define MZ_FWRITE fwrite\n#ifdef __STRICT_ANSI__\n#define MZ_FTELL64 ftell\n#define MZ_FSEEK64 fseek\n#else\n#define MZ_FTELL64 ftello\n#define MZ_FSEEK64 fseeko\n#endif\n#define MZ_FILE_STAT_STRUCT stat\n#define MZ_FILE_STAT stat\n#define MZ_FFLUSH fflush\n#define MZ_FREOPEN(f, m, s) freopen(f, m, s)\n#define MZ_DELETE_FILE remove\n#endif /* #ifdef _MSC_VER */\n#endif /* #ifdef MINIZ_NO_STDIO */\n\n#define MZ_TOLOWER(c) ((((c) >= 'A') && ((c) <= 'Z')) ? ((c) - 'A' + 'a') : (c))\n\n    /* Various ZIP archive enums. To completely avoid cross platform compiler alignment and platform endian issues, miniz.c doesn't use structs for any of this stuff. */\n    enum\n    {\n        /* ZIP archive identifiers and record sizes */\n        MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIG = 0x06054b50,\n        MZ_ZIP_CENTRAL_DIR_HEADER_SIG = 0x02014b50,\n        MZ_ZIP_LOCAL_DIR_HEADER_SIG = 0x04034b50,\n        MZ_ZIP_LOCAL_DIR_HEADER_SIZE = 30,\n        MZ_ZIP_CENTRAL_DIR_HEADER_SIZE = 46,\n        MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIZE = 22,\n\n        /* ZIP64 archive identifier and record sizes */\n        MZ_ZIP64_END_OF_CENTRAL_DIR_HEADER_SIG = 0x06064b50,\n        MZ_ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIG = 0x07064b50,\n        MZ_ZIP64_END_OF_CENTRAL_DIR_HEADER_SIZE = 56,\n        MZ_ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIZE = 20,\n        MZ_ZIP64_EXTENDED_INFORMATION_FIELD_HEADER_ID = 0x0001,\n        MZ_ZIP_DATA_DESCRIPTOR_ID = 0x08074b50,\n        MZ_ZIP_DATA_DESCRIPTER_SIZE64 = 24,\n        MZ_ZIP_DATA_DESCRIPTER_SIZE32 = 16,\n\n        /* Central directory header record offsets */\n        MZ_ZIP_CDH_SIG_OFS = 0,\n        MZ_ZIP_CDH_VERSION_MADE_BY_OFS = 4,\n        MZ_ZIP_CDH_VERSION_NEEDED_OFS = 6,\n        MZ_ZIP_CDH_BIT_FLAG_OFS = 8,\n        MZ_ZIP_CDH_METHOD_OFS = 10,\n        MZ_ZIP_CDH_FILE_TIME_OFS = 12,\n        MZ_ZIP_CDH_FILE_DATE_OFS = 14,\n        MZ_ZIP_CDH_CRC32_OFS = 16,\n        MZ_ZIP_CDH_COMPRESSED_SIZE_OFS = 20,\n        MZ_ZIP_CDH_DECOMPRESSED_SIZE_OFS = 24,\n        MZ_ZIP_CDH_FILENAME_LEN_OFS = 28,\n        MZ_ZIP_CDH_EXTRA_LEN_OFS = 30,\n        MZ_ZIP_CDH_COMMENT_LEN_OFS = 32,\n        MZ_ZIP_CDH_DISK_START_OFS = 34,\n        MZ_ZIP_CDH_INTERNAL_ATTR_OFS = 36,\n        MZ_ZIP_CDH_EXTERNAL_ATTR_OFS = 38,\n        MZ_ZIP_CDH_LOCAL_HEADER_OFS = 42,\n\n        /* Local directory header offsets */\n        MZ_ZIP_LDH_SIG_OFS = 0,\n        MZ_ZIP_LDH_VERSION_NEEDED_OFS = 4,\n        MZ_ZIP_LDH_BIT_FLAG_OFS = 6,\n        MZ_ZIP_LDH_METHOD_OFS = 8,\n        MZ_ZIP_LDH_FILE_TIME_OFS = 10,\n        MZ_ZIP_LDH_FILE_DATE_OFS = 12,\n        MZ_ZIP_LDH_CRC32_OFS = 14,\n        MZ_ZIP_LDH_COMPRESSED_SIZE_OFS = 18,\n        MZ_ZIP_LDH_DECOMPRESSED_SIZE_OFS = 22,\n        MZ_ZIP_LDH_FILENAME_LEN_OFS = 26,\n        MZ_ZIP_LDH_EXTRA_LEN_OFS = 28,\n        MZ_ZIP_LDH_BIT_FLAG_HAS_LOCATOR = 1 << 3,\n\n        /* End of central directory offsets */\n        MZ_ZIP_ECDH_SIG_OFS = 0,\n        MZ_ZIP_ECDH_NUM_THIS_DISK_OFS = 4,\n        MZ_ZIP_ECDH_NUM_DISK_CDIR_OFS = 6,\n        MZ_ZIP_ECDH_CDIR_NUM_ENTRIES_ON_DISK_OFS = 8,\n        MZ_ZIP_ECDH_CDIR_TOTAL_ENTRIES_OFS = 10,\n        MZ_ZIP_ECDH_CDIR_SIZE_OFS = 12,\n        MZ_ZIP_ECDH_CDIR_OFS_OFS = 16,\n        MZ_ZIP_ECDH_COMMENT_SIZE_OFS = 20,\n\n        /* ZIP64 End of central directory locator offsets */\n        MZ_ZIP64_ECDL_SIG_OFS = 0,                    /* 4 bytes */\n        MZ_ZIP64_ECDL_NUM_DISK_CDIR_OFS = 4,          /* 4 bytes */\n        MZ_ZIP64_ECDL_REL_OFS_TO_ZIP64_ECDR_OFS = 8,  /* 8 bytes */\n        MZ_ZIP64_ECDL_TOTAL_NUMBER_OF_DISKS_OFS = 16, /* 4 bytes */\n\n        /* ZIP64 End of central directory header offsets */\n        MZ_ZIP64_ECDH_SIG_OFS = 0,                       /* 4 bytes */\n        MZ_ZIP64_ECDH_SIZE_OF_RECORD_OFS = 4,            /* 8 bytes */\n        MZ_ZIP64_ECDH_VERSION_MADE_BY_OFS = 12,          /* 2 bytes */\n        MZ_ZIP64_ECDH_VERSION_NEEDED_OFS = 14,           /* 2 bytes */\n        MZ_ZIP64_ECDH_NUM_THIS_DISK_OFS = 16,            /* 4 bytes */\n        MZ_ZIP64_ECDH_NUM_DISK_CDIR_OFS = 20,            /* 4 bytes */\n        MZ_ZIP64_ECDH_CDIR_NUM_ENTRIES_ON_DISK_OFS = 24, /* 8 bytes */\n        MZ_ZIP64_ECDH_CDIR_TOTAL_ENTRIES_OFS = 32,       /* 8 bytes */\n        MZ_ZIP64_ECDH_CDIR_SIZE_OFS = 40,                /* 8 bytes */\n        MZ_ZIP64_ECDH_CDIR_OFS_OFS = 48,                 /* 8 bytes */\n        MZ_ZIP_VERSION_MADE_BY_DOS_FILESYSTEM_ID = 0,\n        MZ_ZIP_DOS_DIR_ATTRIBUTE_BITFLAG = 0x10,\n        MZ_ZIP_GENERAL_PURPOSE_BIT_FLAG_IS_ENCRYPTED = 1,\n        MZ_ZIP_GENERAL_PURPOSE_BIT_FLAG_COMPRESSED_PATCH_FLAG = 32,\n        MZ_ZIP_GENERAL_PURPOSE_BIT_FLAG_USES_STRONG_ENCRYPTION = 64,\n        MZ_ZIP_GENERAL_PURPOSE_BIT_FLAG_LOCAL_DIR_IS_MASKED = 8192,\n        MZ_ZIP_GENERAL_PURPOSE_BIT_FLAG_UTF8 = 1 << 11\n    };\n\n    typedef struct\n    {\n        void *m_p;\n        size_t m_size, m_capacity;\n        mz_uint m_element_size;\n    } mz_zip_array;\n\n    struct mz_zip_internal_state_tag\n    {\n        mz_zip_array m_central_dir;\n        mz_zip_array m_central_dir_offsets;\n        mz_zip_array m_sorted_central_dir_offsets;\n\n        /* The flags passed in when the archive is initially opened. */\n        mz_uint32 m_init_flags;\n\n        /* MZ_TRUE if the archive has a zip64 end of central directory headers, etc. */\n        mz_bool m_zip64;\n\n        /* MZ_TRUE if we found zip64 extended info in the central directory (m_zip64 will also be slammed to true too, even if we didn't find a zip64 end of central dir header, etc.) */\n        mz_bool m_zip64_has_extended_info_fields;\n\n        /* These fields are used by the file, FILE, memory, and memory/heap read/write helpers. */\n        MZ_FILE *m_pFile;\n        mz_uint64 m_file_archive_start_ofs;\n\n        void *m_pMem;\n        size_t m_mem_size;\n        size_t m_mem_capacity;\n    };\n\n#define MZ_ZIP_ARRAY_SET_ELEMENT_SIZE(array_ptr, element_size) (array_ptr)->m_element_size = element_size\n\n#if defined(DEBUG) || defined(_DEBUG)\n    static MZ_FORCEINLINE mz_uint mz_zip_array_range_check(const mz_zip_array *pArray, mz_uint index)\n    {\n        MZ_ASSERT(index < pArray->m_size);\n        return index;\n    }\n#define MZ_ZIP_ARRAY_ELEMENT(array_ptr, element_type, index) ((element_type *)((array_ptr)->m_p))[mz_zip_array_range_check(array_ptr, index)]\n#else\n#define MZ_ZIP_ARRAY_ELEMENT(array_ptr, element_type, index) ((element_type *)((array_ptr)->m_p))[index]\n#endif\n\n    static MZ_FORCEINLINE void mz_zip_array_init(mz_zip_array *pArray, mz_uint32 element_size)\n    {\n        memset(pArray, 0, sizeof(mz_zip_array));\n        pArray->m_element_size = element_size;\n    }\n\n    static MZ_FORCEINLINE void mz_zip_array_clear(mz_zip_archive *pZip, mz_zip_array *pArray)\n    {\n        pZip->m_pFree(pZip->m_pAlloc_opaque, pArray->m_p);\n        memset(pArray, 0, sizeof(mz_zip_array));\n    }\n\n    static mz_bool mz_zip_array_ensure_capacity(mz_zip_archive *pZip, mz_zip_array *pArray, size_t min_new_capacity, mz_uint growing)\n    {\n        void *pNew_p;\n        size_t new_capacity = min_new_capacity;\n        MZ_ASSERT(pArray->m_element_size);\n        if (pArray->m_capacity >= min_new_capacity)\n            return MZ_TRUE;\n        if (growing)\n        {\n            new_capacity = MZ_MAX(1, pArray->m_capacity);\n            while (new_capacity < min_new_capacity)\n                new_capacity *= 2;\n        }\n        if (NULL == (pNew_p = pZip->m_pRealloc(pZip->m_pAlloc_opaque, pArray->m_p, pArray->m_element_size, new_capacity)))\n            return MZ_FALSE;\n        pArray->m_p = pNew_p;\n        pArray->m_capacity = new_capacity;\n        return MZ_TRUE;\n    }\n\n    static MZ_FORCEINLINE mz_bool mz_zip_array_reserve(mz_zip_archive *pZip, mz_zip_array *pArray, size_t new_capacity, mz_uint growing)\n    {\n        if (new_capacity > pArray->m_capacity)\n        {\n            if (!mz_zip_array_ensure_capacity(pZip, pArray, new_capacity, growing))\n                return MZ_FALSE;\n        }\n        return MZ_TRUE;\n    }\n\n    static MZ_FORCEINLINE mz_bool mz_zip_array_resize(mz_zip_archive *pZip, mz_zip_array *pArray, size_t new_size, mz_uint growing)\n    {\n        if (new_size > pArray->m_capacity)\n        {\n            if (!mz_zip_array_ensure_capacity(pZip, pArray, new_size, growing))\n                return MZ_FALSE;\n        }\n        pArray->m_size = new_size;\n        return MZ_TRUE;\n    }\n\n    static MZ_FORCEINLINE mz_bool mz_zip_array_ensure_room(mz_zip_archive *pZip, mz_zip_array *pArray, size_t n)\n    {\n        return mz_zip_array_reserve(pZip, pArray, pArray->m_size + n, MZ_TRUE);\n    }\n\n    static MZ_FORCEINLINE mz_bool mz_zip_array_push_back(mz_zip_archive *pZip, mz_zip_array *pArray, const void *pElements, size_t n)\n    {\n        size_t orig_size = pArray->m_size;\n        if (!mz_zip_array_resize(pZip, pArray, orig_size + n, MZ_TRUE))\n            return MZ_FALSE;\n        if (n > 0)\n            memcpy((mz_uint8 *)pArray->m_p + orig_size * pArray->m_element_size, pElements, n * pArray->m_element_size);\n        return MZ_TRUE;\n    }\n\n#ifndef MINIZ_NO_TIME\n    static MZ_TIME_T mz_zip_dos_to_time_t(int dos_time, int dos_date)\n    {\n        struct tm tm;\n        memset(&tm, 0, sizeof(tm));\n        tm.tm_isdst = -1;\n        tm.tm_year = ((dos_date >> 9) & 127) + 1980 - 1900;\n        tm.tm_mon = ((dos_date >> 5) & 15) - 1;\n        tm.tm_mday = dos_date & 31;\n        tm.tm_hour = (dos_time >> 11) & 31;\n        tm.tm_min = (dos_time >> 5) & 63;\n        tm.tm_sec = (dos_time << 1) & 62;\n        return mktime(&tm);\n    }\n\n#ifndef MINIZ_NO_ARCHIVE_WRITING_APIS\n    static void mz_zip_time_t_to_dos_time(MZ_TIME_T time, mz_uint16 *pDOS_time, mz_uint16 *pDOS_date)\n    {\n#ifdef _MSC_VER\n        struct tm tm_struct;\n        struct tm *tm = &tm_struct;\n        errno_t err = localtime_s(tm, &time);\n        if (err)\n        {\n            *pDOS_date = 0;\n            *pDOS_time = 0;\n            return;\n        }\n#else\n        struct tm *tm = localtime(&time);\n#endif /* #ifdef _MSC_VER */\n\n        *pDOS_time = (mz_uint16)(((tm->tm_hour) << 11) + ((tm->tm_min) << 5) + ((tm->tm_sec) >> 1));\n        *pDOS_date = (mz_uint16)(((tm->tm_year + 1900 - 1980) << 9) + ((tm->tm_mon + 1) << 5) + tm->tm_mday);\n    }\n#endif /* MINIZ_NO_ARCHIVE_WRITING_APIS */\n\n#ifndef MINIZ_NO_STDIO\n#ifndef MINIZ_NO_ARCHIVE_WRITING_APIS\n    static mz_bool mz_zip_get_file_modified_time(const char *pFilename, MZ_TIME_T *pTime)\n    {\n        struct MZ_FILE_STAT_STRUCT file_stat;\n\n        /* On Linux with x86 glibc, this call will fail on large files (I think >= 0x80000000 bytes) unless you compiled with _LARGEFILE64_SOURCE. Argh. */\n        if (MZ_FILE_STAT(pFilename, &file_stat) != 0)\n            return MZ_FALSE;\n\n        *pTime = file_stat.st_mtime;\n\n        return MZ_TRUE;\n    }\n#endif /* #ifndef MINIZ_NO_ARCHIVE_WRITING_APIS*/\n\n    static mz_bool mz_zip_set_file_times(const char *pFilename, MZ_TIME_T access_time, MZ_TIME_T modified_time)\n    {\n        struct utimbuf t;\n\n        memset(&t, 0, sizeof(t));\n        t.actime = access_time;\n        t.modtime = modified_time;\n\n        return !utime(pFilename, &t);\n    }\n#endif /* #ifndef MINIZ_NO_STDIO */\n#endif /* #ifndef MINIZ_NO_TIME */\n\n    static MZ_FORCEINLINE mz_bool mz_zip_set_error(mz_zip_archive *pZip, mz_zip_error err_num)\n    {\n        if (pZip)\n            pZip->m_last_error = err_num;\n        return MZ_FALSE;\n    }\n\n    static mz_bool mz_zip_reader_init_internal(mz_zip_archive *pZip, mz_uint flags)\n    {\n        (void)flags;\n        if ((!pZip) || (pZip->m_pState) || (pZip->m_zip_mode != MZ_ZIP_MODE_INVALID))\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n\n        if (!pZip->m_pAlloc)\n            pZip->m_pAlloc = miniz_def_alloc_func;\n        if (!pZip->m_pFree)\n            pZip->m_pFree = miniz_def_free_func;\n        if (!pZip->m_pRealloc)\n            pZip->m_pRealloc = miniz_def_realloc_func;\n\n        pZip->m_archive_size = 0;\n        pZip->m_central_directory_file_ofs = 0;\n        pZip->m_total_files = 0;\n        pZip->m_last_error = MZ_ZIP_NO_ERROR;\n\n        if (NULL == (pZip->m_pState = (mz_zip_internal_state *)pZip->m_pAlloc(pZip->m_pAlloc_opaque, 1, sizeof(mz_zip_internal_state))))\n            return mz_zip_set_error(pZip, MZ_ZIP_ALLOC_FAILED);\n\n        memset(pZip->m_pState, 0, sizeof(mz_zip_internal_state));\n        MZ_ZIP_ARRAY_SET_ELEMENT_SIZE(&pZip->m_pState->m_central_dir, sizeof(mz_uint8));\n        MZ_ZIP_ARRAY_SET_ELEMENT_SIZE(&pZip->m_pState->m_central_dir_offsets, sizeof(mz_uint32));\n        MZ_ZIP_ARRAY_SET_ELEMENT_SIZE(&pZip->m_pState->m_sorted_central_dir_offsets, sizeof(mz_uint32));\n        pZip->m_pState->m_init_flags = flags;\n        pZip->m_pState->m_zip64 = MZ_FALSE;\n        pZip->m_pState->m_zip64_has_extended_info_fields = MZ_FALSE;\n\n        pZip->m_zip_mode = MZ_ZIP_MODE_READING;\n\n        return MZ_TRUE;\n    }\n\n    static MZ_FORCEINLINE mz_bool mz_zip_reader_filename_less(const mz_zip_array *pCentral_dir_array, const mz_zip_array *pCentral_dir_offsets, mz_uint l_index, mz_uint r_index)\n    {\n        const mz_uint8 *pL = &MZ_ZIP_ARRAY_ELEMENT(pCentral_dir_array, mz_uint8, MZ_ZIP_ARRAY_ELEMENT(pCentral_dir_offsets, mz_uint32, l_index)), *pE;\n        const mz_uint8 *pR = &MZ_ZIP_ARRAY_ELEMENT(pCentral_dir_array, mz_uint8, MZ_ZIP_ARRAY_ELEMENT(pCentral_dir_offsets, mz_uint32, r_index));\n        mz_uint l_len = MZ_READ_LE16(pL + MZ_ZIP_CDH_FILENAME_LEN_OFS), r_len = MZ_READ_LE16(pR + MZ_ZIP_CDH_FILENAME_LEN_OFS);\n        mz_uint8 l = 0, r = 0;\n        pL += MZ_ZIP_CENTRAL_DIR_HEADER_SIZE;\n        pR += MZ_ZIP_CENTRAL_DIR_HEADER_SIZE;\n        pE = pL + MZ_MIN(l_len, r_len);\n        while (pL < pE)\n        {\n            if ((l = MZ_TOLOWER(*pL)) != (r = MZ_TOLOWER(*pR)))\n                break;\n            pL++;\n            pR++;\n        }\n        return (pL == pE) ? (l_len < r_len) : (l < r);\n    }\n\n#define MZ_SWAP_UINT32(a, b) \\\n    do                       \\\n    {                        \\\n        mz_uint32 t = a;     \\\n        a = b;               \\\n        b = t;               \\\n    }                        \\\n    MZ_MACRO_END\n\n    /* Heap sort of lowercased filenames, used to help accelerate plain central directory searches by mz_zip_reader_locate_file(). (Could also use qsort(), but it could allocate memory.) */\n    static void mz_zip_reader_sort_central_dir_offsets_by_filename(mz_zip_archive *pZip)\n    {\n        mz_zip_internal_state *pState = pZip->m_pState;\n        const mz_zip_array *pCentral_dir_offsets = &pState->m_central_dir_offsets;\n        const mz_zip_array *pCentral_dir = &pState->m_central_dir;\n        mz_uint32 *pIndices;\n        mz_uint32 start, end;\n        const mz_uint32 size = pZip->m_total_files;\n\n        if (size <= 1U)\n            return;\n\n        pIndices = &MZ_ZIP_ARRAY_ELEMENT(&pState->m_sorted_central_dir_offsets, mz_uint32, 0);\n\n        start = (size - 2U) >> 1U;\n        for (;;)\n        {\n            mz_uint64 child, root = start;\n            for (;;)\n            {\n                if ((child = (root << 1U) + 1U) >= size)\n                    break;\n                child += (((child + 1U) < size) && (mz_zip_reader_filename_less(pCentral_dir, pCentral_dir_offsets, pIndices[child], pIndices[child + 1U])));\n                if (!mz_zip_reader_filename_less(pCentral_dir, pCentral_dir_offsets, pIndices[root], pIndices[child]))\n                    break;\n                MZ_SWAP_UINT32(pIndices[root], pIndices[child]);\n                root = child;\n            }\n            if (!start)\n                break;\n            start--;\n        }\n\n        end = size - 1;\n        while (end > 0)\n        {\n            mz_uint64 child, root = 0;\n            MZ_SWAP_UINT32(pIndices[end], pIndices[0]);\n            for (;;)\n            {\n                if ((child = (root << 1U) + 1U) >= end)\n                    break;\n                child += (((child + 1U) < end) && mz_zip_reader_filename_less(pCentral_dir, pCentral_dir_offsets, pIndices[child], pIndices[child + 1U]));\n                if (!mz_zip_reader_filename_less(pCentral_dir, pCentral_dir_offsets, pIndices[root], pIndices[child]))\n                    break;\n                MZ_SWAP_UINT32(pIndices[root], pIndices[child]);\n                root = child;\n            }\n            end--;\n        }\n    }\n\n    static mz_bool mz_zip_reader_locate_header_sig(mz_zip_archive *pZip, mz_uint32 record_sig, mz_uint32 record_size, mz_int64 *pOfs)\n    {\n        mz_int64 cur_file_ofs;\n        mz_uint32 buf_u32[4096 / sizeof(mz_uint32)];\n        mz_uint8 *pBuf = (mz_uint8 *)buf_u32;\n\n        /* Basic sanity checks - reject files which are too small */\n        if (pZip->m_archive_size < record_size)\n            return MZ_FALSE;\n\n        /* Find the record by scanning the file from the end towards the beginning. */\n        cur_file_ofs = MZ_MAX((mz_int64)pZip->m_archive_size - (mz_int64)sizeof(buf_u32), 0);\n        for (;;)\n        {\n            int i, n = (int)MZ_MIN(sizeof(buf_u32), pZip->m_archive_size - cur_file_ofs);\n\n            if (pZip->m_pRead(pZip->m_pIO_opaque, cur_file_ofs, pBuf, n) != (mz_uint)n)\n                return MZ_FALSE;\n\n            for (i = n - 4; i >= 0; --i)\n            {\n                mz_uint s = MZ_READ_LE32(pBuf + i);\n                if (s == record_sig)\n                {\n                    if ((pZip->m_archive_size - (cur_file_ofs + i)) >= record_size)\n                        break;\n                }\n            }\n\n            if (i >= 0)\n            {\n                cur_file_ofs += i;\n                break;\n            }\n\n            /* Give up if we've searched the entire file, or we've gone back \"too far\" (~64kb) */\n            if ((!cur_file_ofs) || ((pZip->m_archive_size - cur_file_ofs) >= ((mz_uint64)(MZ_UINT16_MAX) + record_size)))\n                return MZ_FALSE;\n\n            cur_file_ofs = MZ_MAX(cur_file_ofs - (sizeof(buf_u32) - 3), 0);\n        }\n\n        *pOfs = cur_file_ofs;\n        return MZ_TRUE;\n    }\n\n    static mz_bool mz_zip_reader_eocd64_valid(mz_zip_archive *pZip, uint64_t offset, uint8_t *buf)\n    {\n        if (pZip->m_pRead(pZip->m_pIO_opaque, offset, buf, MZ_ZIP64_END_OF_CENTRAL_DIR_HEADER_SIZE) == MZ_ZIP64_END_OF_CENTRAL_DIR_HEADER_SIZE)\n        {\n            if (MZ_READ_LE32(buf + MZ_ZIP64_ECDH_SIG_OFS) == MZ_ZIP64_END_OF_CENTRAL_DIR_HEADER_SIG)\n            {\n                return MZ_TRUE;\n            }\n        }\n\n        return MZ_FALSE;\n    }\n\n    static mz_bool mz_zip_reader_read_central_dir(mz_zip_archive *pZip, mz_uint flags)\n    {\n        mz_uint cdir_size = 0, cdir_entries_on_this_disk = 0, num_this_disk = 0, cdir_disk_index = 0;\n        mz_uint64 cdir_ofs = 0, eocd_ofs = 0, archive_ofs = 0;\n        mz_int64 cur_file_ofs = 0;\n        const mz_uint8 *p;\n\n        mz_uint32 buf_u32[4096 / sizeof(mz_uint32)];\n        mz_uint8 *pBuf = (mz_uint8 *)buf_u32;\n        mz_bool sort_central_dir = ((flags & MZ_ZIP_FLAG_DO_NOT_SORT_CENTRAL_DIRECTORY) == 0);\n        mz_uint32 zip64_end_of_central_dir_locator_u32[(MZ_ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIZE + sizeof(mz_uint32) - 1) / sizeof(mz_uint32)];\n        mz_uint8 *pZip64_locator = (mz_uint8 *)zip64_end_of_central_dir_locator_u32;\n\n        mz_uint32 zip64_end_of_central_dir_header_u32[(MZ_ZIP64_END_OF_CENTRAL_DIR_HEADER_SIZE + sizeof(mz_uint32) - 1) / sizeof(mz_uint32)];\n        mz_uint8 *pZip64_end_of_central_dir = (mz_uint8 *)zip64_end_of_central_dir_header_u32;\n\n        mz_uint64 zip64_end_of_central_dir_ofs = 0;\n\n        /* Basic sanity checks - reject files which are too small, and check the first 4 bytes of the file to make sure a local header is there. */\n        if (pZip->m_archive_size < MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIZE)\n            return mz_zip_set_error(pZip, MZ_ZIP_NOT_AN_ARCHIVE);\n\n        if (!mz_zip_reader_locate_header_sig(pZip, MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIG, MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIZE, &cur_file_ofs))\n            return mz_zip_set_error(pZip, MZ_ZIP_FAILED_FINDING_CENTRAL_DIR);\n\n        eocd_ofs = cur_file_ofs;\n        /* Read and verify the end of central directory record. */\n        if (pZip->m_pRead(pZip->m_pIO_opaque, cur_file_ofs, pBuf, MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIZE) != MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIZE)\n            return mz_zip_set_error(pZip, MZ_ZIP_FILE_READ_FAILED);\n\n        if (MZ_READ_LE32(pBuf + MZ_ZIP_ECDH_SIG_OFS) != MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIG)\n            return mz_zip_set_error(pZip, MZ_ZIP_NOT_AN_ARCHIVE);\n\n        if (cur_file_ofs >= (MZ_ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIZE + MZ_ZIP64_END_OF_CENTRAL_DIR_HEADER_SIZE))\n        {\n            if (pZip->m_pRead(pZip->m_pIO_opaque, cur_file_ofs - MZ_ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIZE, pZip64_locator, MZ_ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIZE) == MZ_ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIZE)\n            {\n                if (MZ_READ_LE32(pZip64_locator + MZ_ZIP64_ECDL_SIG_OFS) == MZ_ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIG)\n                {\n                    pZip->m_pState->m_zip64 = MZ_TRUE;\n                }\n            }\n        }\n\n        if (pZip->m_pState->m_zip64)\n        {\n            /* Try locating the EOCD64 right before the EOCD64 locator. This works even\n             * when the effective start of the zip header is not yet known. */\n            if (cur_file_ofs < MZ_ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIZE +\n                                   MZ_ZIP64_END_OF_CENTRAL_DIR_HEADER_SIZE)\n                return mz_zip_set_error(pZip, MZ_ZIP_NOT_AN_ARCHIVE);\n\n            zip64_end_of_central_dir_ofs = cur_file_ofs -\n                                           MZ_ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIZE -\n                                           MZ_ZIP64_END_OF_CENTRAL_DIR_HEADER_SIZE;\n\n            if (!mz_zip_reader_eocd64_valid(pZip, zip64_end_of_central_dir_ofs,\n                                            pZip64_end_of_central_dir))\n            {\n                /* That failed, try reading where the locator tells us to. */\n                zip64_end_of_central_dir_ofs = MZ_READ_LE64(\n                    pZip64_locator + MZ_ZIP64_ECDL_REL_OFS_TO_ZIP64_ECDR_OFS);\n\n                if (zip64_end_of_central_dir_ofs >\n                    (pZip->m_archive_size - MZ_ZIP64_END_OF_CENTRAL_DIR_HEADER_SIZE))\n                    return mz_zip_set_error(pZip, MZ_ZIP_NOT_AN_ARCHIVE);\n\n                if (!mz_zip_reader_eocd64_valid(pZip, zip64_end_of_central_dir_ofs,\n                                                pZip64_end_of_central_dir))\n                    return mz_zip_set_error(pZip, MZ_ZIP_NOT_AN_ARCHIVE);\n            }\n        }\n\n        pZip->m_total_files = MZ_READ_LE16(pBuf + MZ_ZIP_ECDH_CDIR_TOTAL_ENTRIES_OFS);\n        cdir_entries_on_this_disk = MZ_READ_LE16(pBuf + MZ_ZIP_ECDH_CDIR_NUM_ENTRIES_ON_DISK_OFS);\n        num_this_disk = MZ_READ_LE16(pBuf + MZ_ZIP_ECDH_NUM_THIS_DISK_OFS);\n        cdir_disk_index = MZ_READ_LE16(pBuf + MZ_ZIP_ECDH_NUM_DISK_CDIR_OFS);\n        cdir_size = MZ_READ_LE32(pBuf + MZ_ZIP_ECDH_CDIR_SIZE_OFS);\n        cdir_ofs = MZ_READ_LE32(pBuf + MZ_ZIP_ECDH_CDIR_OFS_OFS);\n\n        if (pZip->m_pState->m_zip64)\n        {\n            mz_uint32 zip64_total_num_of_disks = MZ_READ_LE32(pZip64_locator + MZ_ZIP64_ECDL_TOTAL_NUMBER_OF_DISKS_OFS);\n            mz_uint64 zip64_cdir_total_entries = MZ_READ_LE64(pZip64_end_of_central_dir + MZ_ZIP64_ECDH_CDIR_TOTAL_ENTRIES_OFS);\n            mz_uint64 zip64_cdir_total_entries_on_this_disk = MZ_READ_LE64(pZip64_end_of_central_dir + MZ_ZIP64_ECDH_CDIR_NUM_ENTRIES_ON_DISK_OFS);\n            mz_uint64 zip64_size_of_end_of_central_dir_record = MZ_READ_LE64(pZip64_end_of_central_dir + MZ_ZIP64_ECDH_SIZE_OF_RECORD_OFS);\n            mz_uint64 zip64_size_of_central_directory = MZ_READ_LE64(pZip64_end_of_central_dir + MZ_ZIP64_ECDH_CDIR_SIZE_OFS);\n\n            if (zip64_size_of_end_of_central_dir_record < (MZ_ZIP64_END_OF_CENTRAL_DIR_HEADER_SIZE - 12))\n                return mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n\n            if (zip64_total_num_of_disks != 1U)\n                return mz_zip_set_error(pZip, MZ_ZIP_UNSUPPORTED_MULTIDISK);\n\n            /* Check for miniz's practical limits */\n            if (zip64_cdir_total_entries > MZ_UINT32_MAX)\n                return mz_zip_set_error(pZip, MZ_ZIP_TOO_MANY_FILES);\n\n            pZip->m_total_files = (mz_uint32)zip64_cdir_total_entries;\n\n            if (zip64_cdir_total_entries_on_this_disk > MZ_UINT32_MAX)\n                return mz_zip_set_error(pZip, MZ_ZIP_TOO_MANY_FILES);\n\n            cdir_entries_on_this_disk = (mz_uint32)zip64_cdir_total_entries_on_this_disk;\n\n            /* Check for miniz's current practical limits (sorry, this should be enough for millions of files) */\n            if (zip64_size_of_central_directory > MZ_UINT32_MAX)\n                return mz_zip_set_error(pZip, MZ_ZIP_UNSUPPORTED_CDIR_SIZE);\n\n            cdir_size = (mz_uint32)zip64_size_of_central_directory;\n\n            num_this_disk = MZ_READ_LE32(pZip64_end_of_central_dir + MZ_ZIP64_ECDH_NUM_THIS_DISK_OFS);\n\n            cdir_disk_index = MZ_READ_LE32(pZip64_end_of_central_dir + MZ_ZIP64_ECDH_NUM_DISK_CDIR_OFS);\n\n            cdir_ofs = MZ_READ_LE64(pZip64_end_of_central_dir + MZ_ZIP64_ECDH_CDIR_OFS_OFS);\n        }\n\n        if (pZip->m_total_files != cdir_entries_on_this_disk)\n            return mz_zip_set_error(pZip, MZ_ZIP_UNSUPPORTED_MULTIDISK);\n\n        if (((num_this_disk | cdir_disk_index) != 0) && ((num_this_disk != 1) || (cdir_disk_index != 1)))\n            return mz_zip_set_error(pZip, MZ_ZIP_UNSUPPORTED_MULTIDISK);\n\n        if (cdir_size < (mz_uint64)pZip->m_total_files * MZ_ZIP_CENTRAL_DIR_HEADER_SIZE)\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n\n        if ((cdir_ofs + (mz_uint64)cdir_size) > pZip->m_archive_size)\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n\n        if (eocd_ofs < cdir_ofs + cdir_size)\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n\n        /* The end of central dir follows the central dir, unless the zip file has\n         * some trailing data (e.g. it is appended to an executable file). */\n        archive_ofs = eocd_ofs - (cdir_ofs + cdir_size);\n        if (pZip->m_pState->m_zip64)\n        {\n            if (archive_ofs < MZ_ZIP64_END_OF_CENTRAL_DIR_HEADER_SIZE +\n                                  MZ_ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIZE)\n                return mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n\n            archive_ofs -= MZ_ZIP64_END_OF_CENTRAL_DIR_HEADER_SIZE +\n                           MZ_ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIZE;\n        }\n\n        /* Update the archive start position, but only if not specified. */\n        if ((pZip->m_zip_type == MZ_ZIP_TYPE_FILE || pZip->m_zip_type == MZ_ZIP_TYPE_CFILE ||\n            pZip->m_zip_type == MZ_ZIP_TYPE_USER) && pZip->m_pState->m_file_archive_start_ofs == 0)\n        {\n            pZip->m_pState->m_file_archive_start_ofs = archive_ofs;\n            pZip->m_archive_size -= archive_ofs;\n        }\n\n        pZip->m_central_directory_file_ofs = cdir_ofs;\n\n        if (pZip->m_total_files)\n        {\n            mz_uint i, n;\n            /* Read the entire central directory into a heap block, and allocate another heap block to hold the unsorted central dir file record offsets, and possibly another to hold the sorted indices. */\n            if ((!mz_zip_array_resize(pZip, &pZip->m_pState->m_central_dir, cdir_size, MZ_FALSE)) ||\n                (!mz_zip_array_resize(pZip, &pZip->m_pState->m_central_dir_offsets, pZip->m_total_files, MZ_FALSE)))\n                return mz_zip_set_error(pZip, MZ_ZIP_ALLOC_FAILED);\n\n            if (sort_central_dir)\n            {\n                if (!mz_zip_array_resize(pZip, &pZip->m_pState->m_sorted_central_dir_offsets, pZip->m_total_files, MZ_FALSE))\n                    return mz_zip_set_error(pZip, MZ_ZIP_ALLOC_FAILED);\n            }\n\n            if (pZip->m_pRead(pZip->m_pIO_opaque, cdir_ofs, pZip->m_pState->m_central_dir.m_p, cdir_size) != cdir_size)\n                return mz_zip_set_error(pZip, MZ_ZIP_FILE_READ_FAILED);\n\n            /* Now create an index into the central directory file records, do some basic sanity checking on each record */\n            p = (const mz_uint8 *)pZip->m_pState->m_central_dir.m_p;\n            for (n = cdir_size, i = 0; i < pZip->m_total_files; ++i)\n            {\n                mz_uint total_header_size, disk_index, bit_flags, filename_size, ext_data_size;\n                mz_uint64 comp_size, decomp_size, local_header_ofs;\n\n                if ((n < MZ_ZIP_CENTRAL_DIR_HEADER_SIZE) || (MZ_READ_LE32(p) != MZ_ZIP_CENTRAL_DIR_HEADER_SIG))\n                    return mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n\n                MZ_ZIP_ARRAY_ELEMENT(&pZip->m_pState->m_central_dir_offsets, mz_uint32, i) = (mz_uint32)(p - (const mz_uint8 *)pZip->m_pState->m_central_dir.m_p);\n\n                if (sort_central_dir)\n                    MZ_ZIP_ARRAY_ELEMENT(&pZip->m_pState->m_sorted_central_dir_offsets, mz_uint32, i) = i;\n\n                comp_size = MZ_READ_LE32(p + MZ_ZIP_CDH_COMPRESSED_SIZE_OFS);\n                decomp_size = MZ_READ_LE32(p + MZ_ZIP_CDH_DECOMPRESSED_SIZE_OFS);\n                local_header_ofs = MZ_READ_LE32(p + MZ_ZIP_CDH_LOCAL_HEADER_OFS);\n                filename_size = MZ_READ_LE16(p + MZ_ZIP_CDH_FILENAME_LEN_OFS);\n                ext_data_size = MZ_READ_LE16(p + MZ_ZIP_CDH_EXTRA_LEN_OFS);\n\n                if ((!pZip->m_pState->m_zip64_has_extended_info_fields) &&\n                    (ext_data_size) &&\n                    (MZ_MAX(MZ_MAX(comp_size, decomp_size), local_header_ofs) == MZ_UINT32_MAX))\n                {\n                    /* Attempt to find zip64 extended information field in the entry's extra data */\n                    mz_uint32 extra_size_remaining = ext_data_size;\n\n                    if (extra_size_remaining)\n                    {\n                        const mz_uint8 *pExtra_data;\n                        void *buf = NULL;\n\n                        if (MZ_ZIP_CENTRAL_DIR_HEADER_SIZE + filename_size + ext_data_size > n)\n                        {\n                            buf = MZ_MALLOC(ext_data_size);\n                            if (buf == NULL)\n                                return mz_zip_set_error(pZip, MZ_ZIP_ALLOC_FAILED);\n\n                            if (pZip->m_pRead(pZip->m_pIO_opaque, cdir_ofs + MZ_ZIP_CENTRAL_DIR_HEADER_SIZE + filename_size, buf, ext_data_size) != ext_data_size)\n                            {\n                                MZ_FREE(buf);\n                                return mz_zip_set_error(pZip, MZ_ZIP_FILE_READ_FAILED);\n                            }\n\n                            pExtra_data = (mz_uint8 *)buf;\n                        }\n                        else\n                        {\n                            pExtra_data = p + MZ_ZIP_CENTRAL_DIR_HEADER_SIZE + filename_size;\n                        }\n\n                        do\n                        {\n                            mz_uint32 field_id;\n                            mz_uint32 field_data_size;\n\n                            if (extra_size_remaining < (sizeof(mz_uint16) * 2))\n                            {\n                                MZ_FREE(buf);\n                                return mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n                            }\n\n                            field_id = MZ_READ_LE16(pExtra_data);\n                            field_data_size = MZ_READ_LE16(pExtra_data + sizeof(mz_uint16));\n\n                            if ((field_data_size + sizeof(mz_uint16) * 2) > extra_size_remaining)\n                            {\n                                MZ_FREE(buf);\n                                return mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n                            }\n\n                            if (field_id == MZ_ZIP64_EXTENDED_INFORMATION_FIELD_HEADER_ID)\n                            {\n                                /* Ok, the archive didn't have any zip64 headers but it uses a zip64 extended information field so mark it as zip64 anyway (this can occur with infozip's zip util when it reads compresses files from stdin). */\n                                pZip->m_pState->m_zip64 = MZ_TRUE;\n                                pZip->m_pState->m_zip64_has_extended_info_fields = MZ_TRUE;\n                                break;\n                            }\n\n                            pExtra_data += sizeof(mz_uint16) * 2 + field_data_size;\n                            extra_size_remaining = extra_size_remaining - sizeof(mz_uint16) * 2 - field_data_size;\n                        } while (extra_size_remaining);\n\n                        MZ_FREE(buf);\n                    }\n                }\n\n                /* I've seen archives that aren't marked as zip64 that uses zip64 ext data, argh */\n                if ((comp_size != MZ_UINT32_MAX) && (decomp_size != MZ_UINT32_MAX))\n                {\n                    if (((!MZ_READ_LE32(p + MZ_ZIP_CDH_METHOD_OFS)) && (decomp_size != comp_size)) || (decomp_size && !comp_size))\n                        return mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n                }\n\n                disk_index = MZ_READ_LE16(p + MZ_ZIP_CDH_DISK_START_OFS);\n                if ((disk_index == MZ_UINT16_MAX) || ((disk_index != num_this_disk) && (disk_index != 1)))\n                    return mz_zip_set_error(pZip, MZ_ZIP_UNSUPPORTED_MULTIDISK);\n\n                if (comp_size != MZ_UINT32_MAX)\n                {\n                    if (((mz_uint64)MZ_READ_LE32(p + MZ_ZIP_CDH_LOCAL_HEADER_OFS) + MZ_ZIP_LOCAL_DIR_HEADER_SIZE + comp_size) > pZip->m_archive_size)\n                        return mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n                }\n\n                bit_flags = MZ_READ_LE16(p + MZ_ZIP_CDH_BIT_FLAG_OFS);\n                if (bit_flags & MZ_ZIP_GENERAL_PURPOSE_BIT_FLAG_LOCAL_DIR_IS_MASKED)\n                    return mz_zip_set_error(pZip, MZ_ZIP_UNSUPPORTED_ENCRYPTION);\n\n                if ((total_header_size = MZ_ZIP_CENTRAL_DIR_HEADER_SIZE + MZ_READ_LE16(p + MZ_ZIP_CDH_FILENAME_LEN_OFS) + MZ_READ_LE16(p + MZ_ZIP_CDH_EXTRA_LEN_OFS) + MZ_READ_LE16(p + MZ_ZIP_CDH_COMMENT_LEN_OFS)) > n)\n                    return mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n\n                n -= total_header_size;\n                p += total_header_size;\n            }\n        }\n\n        if (sort_central_dir)\n            mz_zip_reader_sort_central_dir_offsets_by_filename(pZip);\n\n        return MZ_TRUE;\n    }\n\n    void mz_zip_zero_struct(mz_zip_archive *pZip)\n    {\n        if (pZip)\n            MZ_CLEAR_PTR(pZip);\n    }\n\n    static mz_bool mz_zip_reader_end_internal(mz_zip_archive *pZip, mz_bool set_last_error)\n    {\n        mz_bool status = MZ_TRUE;\n\n        if (!pZip)\n            return MZ_FALSE;\n\n        if ((!pZip->m_pState) || (!pZip->m_pAlloc) || (!pZip->m_pFree) || (pZip->m_zip_mode != MZ_ZIP_MODE_READING))\n        {\n            if (set_last_error)\n                pZip->m_last_error = MZ_ZIP_INVALID_PARAMETER;\n\n            return MZ_FALSE;\n        }\n\n        if (pZip->m_pState)\n        {\n            mz_zip_internal_state *pState = pZip->m_pState;\n            pZip->m_pState = NULL;\n\n            mz_zip_array_clear(pZip, &pState->m_central_dir);\n            mz_zip_array_clear(pZip, &pState->m_central_dir_offsets);\n            mz_zip_array_clear(pZip, &pState->m_sorted_central_dir_offsets);\n\n#ifndef MINIZ_NO_STDIO\n            if (pState->m_pFile)\n            {\n                if (pZip->m_zip_type == MZ_ZIP_TYPE_FILE)\n                {\n                    if (MZ_FCLOSE(pState->m_pFile) == EOF)\n                    {\n                        if (set_last_error)\n                            pZip->m_last_error = MZ_ZIP_FILE_CLOSE_FAILED;\n                        status = MZ_FALSE;\n                    }\n                }\n                pState->m_pFile = NULL;\n            }\n#endif /* #ifndef MINIZ_NO_STDIO */\n\n            pZip->m_pFree(pZip->m_pAlloc_opaque, pState);\n        }\n        pZip->m_zip_mode = MZ_ZIP_MODE_INVALID;\n\n        return status;\n    }\n\n    mz_bool mz_zip_reader_end(mz_zip_archive *pZip)\n    {\n        return mz_zip_reader_end_internal(pZip, MZ_TRUE);\n    }\n    mz_bool mz_zip_reader_init(mz_zip_archive *pZip, mz_uint64 size, mz_uint flags)\n    {\n        if ((!pZip) || (!pZip->m_pRead))\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n\n        if (!mz_zip_reader_init_internal(pZip, flags))\n            return MZ_FALSE;\n\n        pZip->m_zip_type = MZ_ZIP_TYPE_USER;\n        pZip->m_archive_size = size;\n\n        if (!mz_zip_reader_read_central_dir(pZip, flags))\n        {\n            mz_zip_reader_end_internal(pZip, MZ_FALSE);\n            return MZ_FALSE;\n        }\n\n        return MZ_TRUE;\n    }\n\n    static size_t mz_zip_mem_read_func(void *pOpaque, mz_uint64 file_ofs, void *pBuf, size_t n)\n    {\n        mz_zip_archive *pZip = (mz_zip_archive *)pOpaque;\n        size_t s = (file_ofs >= pZip->m_archive_size) ? 0 : (size_t)MZ_MIN(pZip->m_archive_size - file_ofs, n);\n        memcpy(pBuf, (const mz_uint8 *)pZip->m_pState->m_pMem + file_ofs, s);\n        return s;\n    }\n\n    mz_bool mz_zip_reader_init_mem(mz_zip_archive *pZip, const void *pMem, size_t size, mz_uint flags)\n    {\n        if (!pMem)\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n\n        if (size < MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIZE)\n            return mz_zip_set_error(pZip, MZ_ZIP_NOT_AN_ARCHIVE);\n\n        if (!mz_zip_reader_init_internal(pZip, flags))\n            return MZ_FALSE;\n\n        pZip->m_zip_type = MZ_ZIP_TYPE_MEMORY;\n        pZip->m_archive_size = size;\n        pZip->m_pRead = mz_zip_mem_read_func;\n        pZip->m_pIO_opaque = pZip;\n        pZip->m_pNeeds_keepalive = NULL;\n\n#ifdef __cplusplus\n        pZip->m_pState->m_pMem = const_cast<void *>(pMem);\n#else\n    pZip->m_pState->m_pMem = (void *)pMem;\n#endif\n\n        pZip->m_pState->m_mem_size = size;\n\n        if (!mz_zip_reader_read_central_dir(pZip, flags))\n        {\n            mz_zip_reader_end_internal(pZip, MZ_FALSE);\n            return MZ_FALSE;\n        }\n\n        return MZ_TRUE;\n    }\n\n#ifndef MINIZ_NO_STDIO\n    static size_t mz_zip_file_read_func(void *pOpaque, mz_uint64 file_ofs, void *pBuf, size_t n)\n    {\n        mz_zip_archive *pZip = (mz_zip_archive *)pOpaque;\n        mz_int64 cur_ofs = MZ_FTELL64(pZip->m_pState->m_pFile);\n\n        file_ofs += pZip->m_pState->m_file_archive_start_ofs;\n\n        if (((mz_int64)file_ofs < 0) || (((cur_ofs != (mz_int64)file_ofs)) && (MZ_FSEEK64(pZip->m_pState->m_pFile, (mz_int64)file_ofs, SEEK_SET))))\n            return 0;\n\n        return MZ_FREAD(pBuf, 1, n, pZip->m_pState->m_pFile);\n    }\n\n    mz_bool mz_zip_reader_init_file(mz_zip_archive *pZip, const char *pFilename, mz_uint32 flags)\n    {\n        return mz_zip_reader_init_file_v2(pZip, pFilename, flags, 0, 0);\n    }\n\n    mz_bool mz_zip_reader_init_file_v2(mz_zip_archive *pZip, const char *pFilename, mz_uint flags, mz_uint64 file_start_ofs, mz_uint64 archive_size)\n    {\n        mz_uint64 file_size;\n        MZ_FILE *pFile;\n\n        if ((!pZip) || (!pFilename) || ((archive_size) && (archive_size < MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIZE)))\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n\n        pFile = MZ_FOPEN(pFilename, (flags & MZ_ZIP_FLAG_READ_ALLOW_WRITING ) ? \"r+b\" : \"rb\");\n        if (!pFile)\n            return mz_zip_set_error(pZip, MZ_ZIP_FILE_OPEN_FAILED);\n\n        file_size = archive_size;\n        if (!file_size)\n        {\n            if (MZ_FSEEK64(pFile, 0, SEEK_END))\n            {\n                MZ_FCLOSE(pFile);\n                return mz_zip_set_error(pZip, MZ_ZIP_FILE_SEEK_FAILED);\n            }\n\n            file_size = MZ_FTELL64(pFile);\n        }\n\n        /* TODO: Better sanity check archive_size and the # of actual remaining bytes */\n\n        if (file_size < MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIZE)\n        {\n            MZ_FCLOSE(pFile);\n            return mz_zip_set_error(pZip, MZ_ZIP_NOT_AN_ARCHIVE);\n        }\n\n        if (!mz_zip_reader_init_internal(pZip, flags))\n        {\n            MZ_FCLOSE(pFile);\n            return MZ_FALSE;\n        }\n\n        pZip->m_zip_type = MZ_ZIP_TYPE_FILE;\n        pZip->m_pRead = mz_zip_file_read_func;\n        pZip->m_pIO_opaque = pZip;\n        pZip->m_pState->m_pFile = pFile;\n        pZip->m_archive_size = file_size;\n        pZip->m_pState->m_file_archive_start_ofs = file_start_ofs;\n\n        if (!mz_zip_reader_read_central_dir(pZip, flags))\n        {\n            mz_zip_reader_end_internal(pZip, MZ_FALSE);\n            return MZ_FALSE;\n        }\n\n        return MZ_TRUE;\n    }\n\n    mz_bool mz_zip_reader_init_cfile(mz_zip_archive *pZip, MZ_FILE *pFile, mz_uint64 archive_size, mz_uint flags)\n    {\n        mz_uint64 cur_file_ofs;\n\n        if ((!pZip) || (!pFile))\n            return mz_zip_set_error(pZip, MZ_ZIP_FILE_OPEN_FAILED);\n\n        cur_file_ofs = MZ_FTELL64(pFile);\n\n        if (!archive_size)\n        {\n            if (MZ_FSEEK64(pFile, 0, SEEK_END))\n                return mz_zip_set_error(pZip, MZ_ZIP_FILE_SEEK_FAILED);\n\n            archive_size = MZ_FTELL64(pFile) - cur_file_ofs;\n\n            if (archive_size < MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIZE)\n                return mz_zip_set_error(pZip, MZ_ZIP_NOT_AN_ARCHIVE);\n        }\n\n        if (!mz_zip_reader_init_internal(pZip, flags))\n            return MZ_FALSE;\n\n        pZip->m_zip_type = MZ_ZIP_TYPE_CFILE;\n        pZip->m_pRead = mz_zip_file_read_func;\n\n        pZip->m_pIO_opaque = pZip;\n        pZip->m_pState->m_pFile = pFile;\n        pZip->m_archive_size = archive_size;\n        pZip->m_pState->m_file_archive_start_ofs = cur_file_ofs;\n\n        if (!mz_zip_reader_read_central_dir(pZip, flags))\n        {\n            mz_zip_reader_end_internal(pZip, MZ_FALSE);\n            return MZ_FALSE;\n        }\n\n        return MZ_TRUE;\n    }\n\n#endif /* #ifndef MINIZ_NO_STDIO */\n\n    static MZ_FORCEINLINE const mz_uint8 *mz_zip_get_cdh(mz_zip_archive *pZip, mz_uint file_index)\n    {\n        if ((!pZip) || (!pZip->m_pState) || (file_index >= pZip->m_total_files))\n            return NULL;\n        return &MZ_ZIP_ARRAY_ELEMENT(&pZip->m_pState->m_central_dir, mz_uint8, MZ_ZIP_ARRAY_ELEMENT(&pZip->m_pState->m_central_dir_offsets, mz_uint32, file_index));\n    }\n\n    mz_bool mz_zip_reader_is_file_encrypted(mz_zip_archive *pZip, mz_uint file_index)\n    {\n        mz_uint m_bit_flag;\n        const mz_uint8 *p = mz_zip_get_cdh(pZip, file_index);\n        if (!p)\n        {\n            mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n            return MZ_FALSE;\n        }\n\n        m_bit_flag = MZ_READ_LE16(p + MZ_ZIP_CDH_BIT_FLAG_OFS);\n        return (m_bit_flag & (MZ_ZIP_GENERAL_PURPOSE_BIT_FLAG_IS_ENCRYPTED | MZ_ZIP_GENERAL_PURPOSE_BIT_FLAG_USES_STRONG_ENCRYPTION)) != 0;\n    }\n\n    mz_bool mz_zip_reader_is_file_supported(mz_zip_archive *pZip, mz_uint file_index)\n    {\n        mz_uint bit_flag;\n        mz_uint method;\n\n        const mz_uint8 *p = mz_zip_get_cdh(pZip, file_index);\n        if (!p)\n        {\n            mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n            return MZ_FALSE;\n        }\n\n        method = MZ_READ_LE16(p + MZ_ZIP_CDH_METHOD_OFS);\n        bit_flag = MZ_READ_LE16(p + MZ_ZIP_CDH_BIT_FLAG_OFS);\n\n        if ((method != 0) && (method != MZ_DEFLATED))\n        {\n            mz_zip_set_error(pZip, MZ_ZIP_UNSUPPORTED_METHOD);\n            return MZ_FALSE;\n        }\n\n        if (bit_flag & (MZ_ZIP_GENERAL_PURPOSE_BIT_FLAG_IS_ENCRYPTED | MZ_ZIP_GENERAL_PURPOSE_BIT_FLAG_USES_STRONG_ENCRYPTION))\n        {\n            mz_zip_set_error(pZip, MZ_ZIP_UNSUPPORTED_ENCRYPTION);\n            return MZ_FALSE;\n        }\n\n        if (bit_flag & MZ_ZIP_GENERAL_PURPOSE_BIT_FLAG_COMPRESSED_PATCH_FLAG)\n        {\n            mz_zip_set_error(pZip, MZ_ZIP_UNSUPPORTED_FEATURE);\n            return MZ_FALSE;\n        }\n\n        return MZ_TRUE;\n    }\n\n    mz_bool mz_zip_reader_is_file_a_directory(mz_zip_archive *pZip, mz_uint file_index)\n    {\n        mz_uint filename_len, attribute_mapping_id, external_attr;\n        const mz_uint8 *p = mz_zip_get_cdh(pZip, file_index);\n        if (!p)\n        {\n            mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n            return MZ_FALSE;\n        }\n\n        filename_len = MZ_READ_LE16(p + MZ_ZIP_CDH_FILENAME_LEN_OFS);\n        if (filename_len)\n        {\n            if (*(p + MZ_ZIP_CENTRAL_DIR_HEADER_SIZE + filename_len - 1) == '/')\n                return MZ_TRUE;\n        }\n\n        /* Bugfix: This code was also checking if the internal attribute was non-zero, which wasn't correct. */\n        /* Most/all zip writers (hopefully) set DOS file/directory attributes in the low 16-bits, so check for the DOS directory flag and ignore the source OS ID in the created by field. */\n        /* FIXME: Remove this check? Is it necessary - we already check the filename. */\n        attribute_mapping_id = MZ_READ_LE16(p + MZ_ZIP_CDH_VERSION_MADE_BY_OFS) >> 8;\n        (void)attribute_mapping_id;\n\n        external_attr = MZ_READ_LE32(p + MZ_ZIP_CDH_EXTERNAL_ATTR_OFS);\n        if ((external_attr & MZ_ZIP_DOS_DIR_ATTRIBUTE_BITFLAG) != 0)\n        {\n            return MZ_TRUE;\n        }\n\n        return MZ_FALSE;\n    }\n\n    static mz_bool mz_zip_file_stat_internal(mz_zip_archive *pZip, mz_uint file_index, const mz_uint8 *pCentral_dir_header, mz_zip_archive_file_stat *pStat, mz_bool *pFound_zip64_extra_data)\n    {\n        mz_uint n;\n        const mz_uint8 *p = pCentral_dir_header;\n\n        if (pFound_zip64_extra_data)\n            *pFound_zip64_extra_data = MZ_FALSE;\n\n        if ((!p) || (!pStat))\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n\n        /* Extract fields from the central directory record. */\n        pStat->m_file_index = file_index;\n        pStat->m_central_dir_ofs = MZ_ZIP_ARRAY_ELEMENT(&pZip->m_pState->m_central_dir_offsets, mz_uint32, file_index);\n        pStat->m_version_made_by = MZ_READ_LE16(p + MZ_ZIP_CDH_VERSION_MADE_BY_OFS);\n        pStat->m_version_needed = MZ_READ_LE16(p + MZ_ZIP_CDH_VERSION_NEEDED_OFS);\n        pStat->m_bit_flag = MZ_READ_LE16(p + MZ_ZIP_CDH_BIT_FLAG_OFS);\n        pStat->m_method = MZ_READ_LE16(p + MZ_ZIP_CDH_METHOD_OFS);\n#ifndef MINIZ_NO_TIME\n        pStat->m_time = mz_zip_dos_to_time_t(MZ_READ_LE16(p + MZ_ZIP_CDH_FILE_TIME_OFS), MZ_READ_LE16(p + MZ_ZIP_CDH_FILE_DATE_OFS));\n#endif\n        pStat->m_crc32 = MZ_READ_LE32(p + MZ_ZIP_CDH_CRC32_OFS);\n        pStat->m_comp_size = MZ_READ_LE32(p + MZ_ZIP_CDH_COMPRESSED_SIZE_OFS);\n        pStat->m_uncomp_size = MZ_READ_LE32(p + MZ_ZIP_CDH_DECOMPRESSED_SIZE_OFS);\n        pStat->m_internal_attr = MZ_READ_LE16(p + MZ_ZIP_CDH_INTERNAL_ATTR_OFS);\n        pStat->m_external_attr = MZ_READ_LE32(p + MZ_ZIP_CDH_EXTERNAL_ATTR_OFS);\n        pStat->m_local_header_ofs = MZ_READ_LE32(p + MZ_ZIP_CDH_LOCAL_HEADER_OFS);\n\n        /* Copy as much of the filename and comment as possible. */\n        n = MZ_READ_LE16(p + MZ_ZIP_CDH_FILENAME_LEN_OFS);\n        n = MZ_MIN(n, MZ_ZIP_MAX_ARCHIVE_FILENAME_SIZE - 1);\n        memcpy(pStat->m_filename, p + MZ_ZIP_CENTRAL_DIR_HEADER_SIZE, n);\n        pStat->m_filename[n] = '\\0';\n\n        n = MZ_READ_LE16(p + MZ_ZIP_CDH_COMMENT_LEN_OFS);\n        n = MZ_MIN(n, MZ_ZIP_MAX_ARCHIVE_FILE_COMMENT_SIZE - 1);\n        pStat->m_comment_size = n;\n        memcpy(pStat->m_comment, p + MZ_ZIP_CENTRAL_DIR_HEADER_SIZE + MZ_READ_LE16(p + MZ_ZIP_CDH_FILENAME_LEN_OFS) + MZ_READ_LE16(p + MZ_ZIP_CDH_EXTRA_LEN_OFS), n);\n        pStat->m_comment[n] = '\\0';\n\n        /* Set some flags for convienance */\n        pStat->m_is_directory = mz_zip_reader_is_file_a_directory(pZip, file_index);\n        pStat->m_is_encrypted = mz_zip_reader_is_file_encrypted(pZip, file_index);\n        pStat->m_is_supported = mz_zip_reader_is_file_supported(pZip, file_index);\n\n        /* See if we need to read any zip64 extended information fields. */\n        /* Confusingly, these zip64 fields can be present even on non-zip64 archives (Debian zip on a huge files from stdin piped to stdout creates them). */\n        if (MZ_MAX(MZ_MAX(pStat->m_comp_size, pStat->m_uncomp_size), pStat->m_local_header_ofs) == MZ_UINT32_MAX)\n        {\n            /* Attempt to find zip64 extended information field in the entry's extra data */\n            mz_uint32 extra_size_remaining = MZ_READ_LE16(p + MZ_ZIP_CDH_EXTRA_LEN_OFS);\n\n            if (extra_size_remaining)\n            {\n                const mz_uint8 *pExtra_data = p + MZ_ZIP_CENTRAL_DIR_HEADER_SIZE + MZ_READ_LE16(p + MZ_ZIP_CDH_FILENAME_LEN_OFS);\n\n                do\n                {\n                    mz_uint32 field_id;\n                    mz_uint32 field_data_size;\n\n                    if (extra_size_remaining < (sizeof(mz_uint16) * 2))\n                        return mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n\n                    field_id = MZ_READ_LE16(pExtra_data);\n                    field_data_size = MZ_READ_LE16(pExtra_data + sizeof(mz_uint16));\n\n                    if ((field_data_size + sizeof(mz_uint16) * 2) > extra_size_remaining)\n                        return mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n\n                    if (field_id == MZ_ZIP64_EXTENDED_INFORMATION_FIELD_HEADER_ID)\n                    {\n                        const mz_uint8 *pField_data = pExtra_data + sizeof(mz_uint16) * 2;\n                        mz_uint32 field_data_remaining = field_data_size;\n\n                        if (pFound_zip64_extra_data)\n                            *pFound_zip64_extra_data = MZ_TRUE;\n\n                        if (pStat->m_uncomp_size == MZ_UINT32_MAX)\n                        {\n                            if (field_data_remaining < sizeof(mz_uint64))\n                                return mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n\n                            pStat->m_uncomp_size = MZ_READ_LE64(pField_data);\n                            pField_data += sizeof(mz_uint64);\n                            field_data_remaining -= sizeof(mz_uint64);\n                        }\n\n                        if (pStat->m_comp_size == MZ_UINT32_MAX)\n                        {\n                            if (field_data_remaining < sizeof(mz_uint64))\n                                return mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n\n                            pStat->m_comp_size = MZ_READ_LE64(pField_data);\n                            pField_data += sizeof(mz_uint64);\n                            field_data_remaining -= sizeof(mz_uint64);\n                        }\n\n                        if (pStat->m_local_header_ofs == MZ_UINT32_MAX)\n                        {\n                            if (field_data_remaining < sizeof(mz_uint64))\n                                return mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n\n                            pStat->m_local_header_ofs = MZ_READ_LE64(pField_data);\n                            pField_data += sizeof(mz_uint64);\n                            field_data_remaining -= sizeof(mz_uint64);\n                        }\n\n                        break;\n                    }\n\n                    pExtra_data += sizeof(mz_uint16) * 2 + field_data_size;\n                    extra_size_remaining = extra_size_remaining - sizeof(mz_uint16) * 2 - field_data_size;\n                } while (extra_size_remaining);\n            }\n        }\n\n        return MZ_TRUE;\n    }\n\n    static MZ_FORCEINLINE mz_bool mz_zip_string_equal(const char *pA, const char *pB, mz_uint len, mz_uint flags)\n    {\n        mz_uint i;\n        if (flags & MZ_ZIP_FLAG_CASE_SENSITIVE)\n            return 0 == memcmp(pA, pB, len);\n        for (i = 0; i < len; ++i)\n            if (MZ_TOLOWER(pA[i]) != MZ_TOLOWER(pB[i]))\n                return MZ_FALSE;\n        return MZ_TRUE;\n    }\n\n    static MZ_FORCEINLINE int mz_zip_filename_compare(const mz_zip_array *pCentral_dir_array, const mz_zip_array *pCentral_dir_offsets, mz_uint l_index, const char *pR, mz_uint r_len)\n    {\n        const mz_uint8 *pL = &MZ_ZIP_ARRAY_ELEMENT(pCentral_dir_array, mz_uint8, MZ_ZIP_ARRAY_ELEMENT(pCentral_dir_offsets, mz_uint32, l_index)), *pE;\n        mz_uint l_len = MZ_READ_LE16(pL + MZ_ZIP_CDH_FILENAME_LEN_OFS);\n        mz_uint8 l = 0, r = 0;\n        pL += MZ_ZIP_CENTRAL_DIR_HEADER_SIZE;\n        pE = pL + MZ_MIN(l_len, r_len);\n        while (pL < pE)\n        {\n            if ((l = MZ_TOLOWER(*pL)) != (r = MZ_TOLOWER(*pR)))\n                break;\n            pL++;\n            pR++;\n        }\n        return (pL == pE) ? (int)(l_len - r_len) : (l - r);\n    }\n\n    static mz_bool mz_zip_locate_file_binary_search(mz_zip_archive *pZip, const char *pFilename, mz_uint32 *pIndex)\n    {\n        mz_zip_internal_state *pState = pZip->m_pState;\n        const mz_zip_array *pCentral_dir_offsets = &pState->m_central_dir_offsets;\n        const mz_zip_array *pCentral_dir = &pState->m_central_dir;\n        mz_uint32 *pIndices = &MZ_ZIP_ARRAY_ELEMENT(&pState->m_sorted_central_dir_offsets, mz_uint32, 0);\n        const mz_uint32 size = pZip->m_total_files;\n        const mz_uint filename_len = (mz_uint)strlen(pFilename);\n\n        if (pIndex)\n            *pIndex = 0;\n\n        if (size)\n        {\n            /* yes I could use uint32_t's, but then we would have to add some special case checks in the loop, argh, and */\n            /* honestly the major expense here on 32-bit CPU's will still be the filename compare */\n            mz_int64 l = 0, h = (mz_int64)size - 1;\n\n            while (l <= h)\n            {\n                mz_int64 m = l + ((h - l) >> 1);\n                mz_uint32 file_index = pIndices[(mz_uint32)m];\n\n                int comp = mz_zip_filename_compare(pCentral_dir, pCentral_dir_offsets, file_index, pFilename, filename_len);\n                if (!comp)\n                {\n                    if (pIndex)\n                        *pIndex = file_index;\n                    return MZ_TRUE;\n                }\n                else if (comp < 0)\n                    l = m + 1;\n                else\n                    h = m - 1;\n            }\n        }\n\n        return mz_zip_set_error(pZip, MZ_ZIP_FILE_NOT_FOUND);\n    }\n\n    int mz_zip_reader_locate_file(mz_zip_archive *pZip, const char *pName, const char *pComment, mz_uint flags)\n    {\n        mz_uint32 index;\n        if (!mz_zip_reader_locate_file_v2(pZip, pName, pComment, flags, &index))\n            return -1;\n        else\n            return (int)index;\n    }\n\n    mz_bool mz_zip_reader_locate_file_v2(mz_zip_archive *pZip, const char *pName, const char *pComment, mz_uint flags, mz_uint32 *pIndex)\n    {\n        mz_uint file_index;\n        size_t name_len, comment_len;\n\n        if (pIndex)\n            *pIndex = 0;\n\n        if ((!pZip) || (!pZip->m_pState) || (!pName))\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n\n        /* See if we can use a binary search */\n        if (((pZip->m_pState->m_init_flags & MZ_ZIP_FLAG_DO_NOT_SORT_CENTRAL_DIRECTORY) == 0) &&\n            (pZip->m_zip_mode == MZ_ZIP_MODE_READING) &&\n            ((flags & (MZ_ZIP_FLAG_IGNORE_PATH | MZ_ZIP_FLAG_CASE_SENSITIVE)) == 0) && (!pComment) && (pZip->m_pState->m_sorted_central_dir_offsets.m_size))\n        {\n            return mz_zip_locate_file_binary_search(pZip, pName, pIndex);\n        }\n\n        /* Locate the entry by scanning the entire central directory */\n        name_len = strlen(pName);\n        if (name_len > MZ_UINT16_MAX)\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n\n        comment_len = pComment ? strlen(pComment) : 0;\n        if (comment_len > MZ_UINT16_MAX)\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n\n        for (file_index = 0; file_index < pZip->m_total_files; file_index++)\n        {\n            const mz_uint8 *pHeader = &MZ_ZIP_ARRAY_ELEMENT(&pZip->m_pState->m_central_dir, mz_uint8, MZ_ZIP_ARRAY_ELEMENT(&pZip->m_pState->m_central_dir_offsets, mz_uint32, file_index));\n            mz_uint filename_len = MZ_READ_LE16(pHeader + MZ_ZIP_CDH_FILENAME_LEN_OFS);\n            const char *pFilename = (const char *)pHeader + MZ_ZIP_CENTRAL_DIR_HEADER_SIZE;\n            if (filename_len < name_len)\n                continue;\n            if (comment_len)\n            {\n                mz_uint file_extra_len = MZ_READ_LE16(pHeader + MZ_ZIP_CDH_EXTRA_LEN_OFS), file_comment_len = MZ_READ_LE16(pHeader + MZ_ZIP_CDH_COMMENT_LEN_OFS);\n                const char *pFile_comment = pFilename + filename_len + file_extra_len;\n                if ((file_comment_len != comment_len) || (!mz_zip_string_equal(pComment, pFile_comment, file_comment_len, flags)))\n                    continue;\n            }\n            if ((flags & MZ_ZIP_FLAG_IGNORE_PATH) && (filename_len))\n            {\n                int ofs = filename_len - 1;\n                do\n                {\n                    if ((pFilename[ofs] == '/') || (pFilename[ofs] == '\\\\') || (pFilename[ofs] == ':'))\n                        break;\n                } while (--ofs >= 0);\n                ofs++;\n                pFilename += ofs;\n                filename_len -= ofs;\n            }\n            if ((filename_len == name_len) && (mz_zip_string_equal(pName, pFilename, filename_len, flags)))\n            {\n                if (pIndex)\n                    *pIndex = file_index;\n                return MZ_TRUE;\n            }\n        }\n\n        return mz_zip_set_error(pZip, MZ_ZIP_FILE_NOT_FOUND);\n    }\n\n    static mz_bool mz_zip_reader_extract_to_mem_no_alloc1(mz_zip_archive *pZip, mz_uint file_index, void *pBuf, size_t buf_size, mz_uint flags, void *pUser_read_buf, size_t user_read_buf_size, const mz_zip_archive_file_stat *st)\n    {\n        int status = TINFL_STATUS_DONE;\n        mz_uint64 needed_size, cur_file_ofs, comp_remaining, out_buf_ofs = 0, read_buf_size, read_buf_ofs = 0, read_buf_avail;\n        mz_zip_archive_file_stat file_stat;\n        void *pRead_buf;\n        mz_uint32 local_header_u32[(MZ_ZIP_LOCAL_DIR_HEADER_SIZE + sizeof(mz_uint32) - 1) / sizeof(mz_uint32)];\n        mz_uint8 *pLocal_header = (mz_uint8 *)local_header_u32;\n        tinfl_decompressor inflator;\n\n        if ((!pZip) || (!pZip->m_pState) || ((buf_size) && (!pBuf)) || ((user_read_buf_size) && (!pUser_read_buf)) || (!pZip->m_pRead))\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n\n        if (st)\n        {\n            file_stat = *st;\n        }\n        else if (!mz_zip_reader_file_stat(pZip, file_index, &file_stat))\n            return MZ_FALSE;\n\n        /* A directory or zero length file */\n        if ((file_stat.m_is_directory) || (!file_stat.m_comp_size))\n            return MZ_TRUE;\n\n        /* Encryption and patch files are not supported. */\n        if (file_stat.m_bit_flag & (MZ_ZIP_GENERAL_PURPOSE_BIT_FLAG_IS_ENCRYPTED | MZ_ZIP_GENERAL_PURPOSE_BIT_FLAG_USES_STRONG_ENCRYPTION | MZ_ZIP_GENERAL_PURPOSE_BIT_FLAG_COMPRESSED_PATCH_FLAG))\n            return mz_zip_set_error(pZip, MZ_ZIP_UNSUPPORTED_ENCRYPTION);\n\n        /* This function only supports decompressing stored and deflate. */\n        if ((!(flags & MZ_ZIP_FLAG_COMPRESSED_DATA)) && (file_stat.m_method != 0) && (file_stat.m_method != MZ_DEFLATED))\n            return mz_zip_set_error(pZip, MZ_ZIP_UNSUPPORTED_METHOD);\n\n        /* Ensure supplied output buffer is large enough. */\n        needed_size = (flags & MZ_ZIP_FLAG_COMPRESSED_DATA) ? file_stat.m_comp_size : file_stat.m_uncomp_size;\n        if (buf_size < needed_size)\n            return mz_zip_set_error(pZip, MZ_ZIP_BUF_TOO_SMALL);\n\n        /* Read and parse the local directory entry. */\n        cur_file_ofs = file_stat.m_local_header_ofs;\n        if (pZip->m_pRead(pZip->m_pIO_opaque, cur_file_ofs, pLocal_header, MZ_ZIP_LOCAL_DIR_HEADER_SIZE) != MZ_ZIP_LOCAL_DIR_HEADER_SIZE)\n            return mz_zip_set_error(pZip, MZ_ZIP_FILE_READ_FAILED);\n\n        if (MZ_READ_LE32(pLocal_header) != MZ_ZIP_LOCAL_DIR_HEADER_SIG)\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n\n        cur_file_ofs += (mz_uint64)(MZ_ZIP_LOCAL_DIR_HEADER_SIZE) + MZ_READ_LE16(pLocal_header + MZ_ZIP_LDH_FILENAME_LEN_OFS) + MZ_READ_LE16(pLocal_header + MZ_ZIP_LDH_EXTRA_LEN_OFS);\n        if ((cur_file_ofs + file_stat.m_comp_size) > pZip->m_archive_size)\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n\n        if ((flags & MZ_ZIP_FLAG_COMPRESSED_DATA) || (!file_stat.m_method))\n        {\n            /* The file is stored or the caller has requested the compressed data. */\n            if (pZip->m_pRead(pZip->m_pIO_opaque, cur_file_ofs, pBuf, (size_t)needed_size) != needed_size)\n                return mz_zip_set_error(pZip, MZ_ZIP_FILE_READ_FAILED);\n\n#ifndef MINIZ_DISABLE_ZIP_READER_CRC32_CHECKS\n            if ((flags & MZ_ZIP_FLAG_COMPRESSED_DATA) == 0)\n            {\n                if (mz_crc32(MZ_CRC32_INIT, (const mz_uint8 *)pBuf, (size_t)file_stat.m_uncomp_size) != file_stat.m_crc32)\n                    return mz_zip_set_error(pZip, MZ_ZIP_CRC_CHECK_FAILED);\n            }\n#endif\n\n            return MZ_TRUE;\n        }\n\n        /* Decompress the file either directly from memory or from a file input buffer. */\n        tinfl_init(&inflator);\n\n        if (pZip->m_pState->m_pMem)\n        {\n            /* Read directly from the archive in memory. */\n            pRead_buf = (mz_uint8 *)pZip->m_pState->m_pMem + cur_file_ofs;\n            read_buf_size = read_buf_avail = file_stat.m_comp_size;\n            comp_remaining = 0;\n        }\n        else if (pUser_read_buf)\n        {\n            /* Use a user provided read buffer. */\n            if (!user_read_buf_size)\n                return MZ_FALSE;\n            pRead_buf = (mz_uint8 *)pUser_read_buf;\n            read_buf_size = user_read_buf_size;\n            read_buf_avail = 0;\n            comp_remaining = file_stat.m_comp_size;\n        }\n        else\n        {\n            /* Temporarily allocate a read buffer. */\n            read_buf_size = MZ_MIN(file_stat.m_comp_size, (mz_uint64)MZ_ZIP_MAX_IO_BUF_SIZE);\n            if (((sizeof(size_t) == sizeof(mz_uint32))) && (read_buf_size > 0x7FFFFFFF))\n                return mz_zip_set_error(pZip, MZ_ZIP_INTERNAL_ERROR);\n\n            if (NULL == (pRead_buf = pZip->m_pAlloc(pZip->m_pAlloc_opaque, 1, (size_t)read_buf_size)))\n                return mz_zip_set_error(pZip, MZ_ZIP_ALLOC_FAILED);\n\n            read_buf_avail = 0;\n            comp_remaining = file_stat.m_comp_size;\n        }\n\n        do\n        {\n            /* The size_t cast here should be OK because we've verified that the output buffer is >= file_stat.m_uncomp_size above */\n            size_t in_buf_size, out_buf_size = (size_t)(file_stat.m_uncomp_size - out_buf_ofs);\n            if ((!read_buf_avail) && (!pZip->m_pState->m_pMem))\n            {\n                read_buf_avail = MZ_MIN(read_buf_size, comp_remaining);\n                if (pZip->m_pRead(pZip->m_pIO_opaque, cur_file_ofs, pRead_buf, (size_t)read_buf_avail) != read_buf_avail)\n                {\n                    status = TINFL_STATUS_FAILED;\n                    mz_zip_set_error(pZip, MZ_ZIP_DECOMPRESSION_FAILED);\n                    break;\n                }\n                cur_file_ofs += read_buf_avail;\n                comp_remaining -= read_buf_avail;\n                read_buf_ofs = 0;\n            }\n            in_buf_size = (size_t)read_buf_avail;\n            status = tinfl_decompress(&inflator, (mz_uint8 *)pRead_buf + read_buf_ofs, &in_buf_size, (mz_uint8 *)pBuf, (mz_uint8 *)pBuf + out_buf_ofs, &out_buf_size, TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF | (comp_remaining ? TINFL_FLAG_HAS_MORE_INPUT : 0));\n            read_buf_avail -= in_buf_size;\n            read_buf_ofs += in_buf_size;\n            out_buf_ofs += out_buf_size;\n        } while (status == TINFL_STATUS_NEEDS_MORE_INPUT);\n\n        if (status == TINFL_STATUS_DONE)\n        {\n            /* Make sure the entire file was decompressed, and check its CRC. */\n            if (out_buf_ofs != file_stat.m_uncomp_size)\n            {\n                mz_zip_set_error(pZip, MZ_ZIP_UNEXPECTED_DECOMPRESSED_SIZE);\n                status = TINFL_STATUS_FAILED;\n            }\n#ifndef MINIZ_DISABLE_ZIP_READER_CRC32_CHECKS\n            else if (mz_crc32(MZ_CRC32_INIT, (const mz_uint8 *)pBuf, (size_t)file_stat.m_uncomp_size) != file_stat.m_crc32)\n            {\n                mz_zip_set_error(pZip, MZ_ZIP_CRC_CHECK_FAILED);\n                status = TINFL_STATUS_FAILED;\n            }\n#endif\n        }\n\n        if ((!pZip->m_pState->m_pMem) && (!pUser_read_buf))\n            pZip->m_pFree(pZip->m_pAlloc_opaque, pRead_buf);\n\n        return status == TINFL_STATUS_DONE;\n    }\n\n    mz_bool mz_zip_reader_extract_to_mem_no_alloc(mz_zip_archive *pZip, mz_uint file_index, void *pBuf, size_t buf_size, mz_uint flags, void *pUser_read_buf, size_t user_read_buf_size)\n    {\n        return mz_zip_reader_extract_to_mem_no_alloc1(pZip, file_index, pBuf, buf_size, flags, pUser_read_buf, user_read_buf_size, NULL);\n    }\n\n    mz_bool mz_zip_reader_extract_file_to_mem_no_alloc(mz_zip_archive *pZip, const char *pFilename, void *pBuf, size_t buf_size, mz_uint flags, void *pUser_read_buf, size_t user_read_buf_size)\n    {\n        mz_uint32 file_index;\n        if (!mz_zip_reader_locate_file_v2(pZip, pFilename, NULL, flags, &file_index))\n            return MZ_FALSE;\n        return mz_zip_reader_extract_to_mem_no_alloc1(pZip, file_index, pBuf, buf_size, flags, pUser_read_buf, user_read_buf_size, NULL);\n    }\n\n    mz_bool mz_zip_reader_extract_to_mem(mz_zip_archive *pZip, mz_uint file_index, void *pBuf, size_t buf_size, mz_uint flags)\n    {\n        return mz_zip_reader_extract_to_mem_no_alloc1(pZip, file_index, pBuf, buf_size, flags, NULL, 0, NULL);\n    }\n\n    mz_bool mz_zip_reader_extract_file_to_mem(mz_zip_archive *pZip, const char *pFilename, void *pBuf, size_t buf_size, mz_uint flags)\n    {\n        return mz_zip_reader_extract_file_to_mem_no_alloc(pZip, pFilename, pBuf, buf_size, flags, NULL, 0);\n    }\n\n    void *mz_zip_reader_extract_to_heap(mz_zip_archive *pZip, mz_uint file_index, size_t *pSize, mz_uint flags)\n    {\n        mz_zip_archive_file_stat file_stat;\n        mz_uint64 alloc_size;\n        void *pBuf;\n\n        if (pSize)\n            *pSize = 0;\n\n        if (!mz_zip_reader_file_stat(pZip, file_index, &file_stat))\n            return NULL;\n\n        alloc_size = (flags & MZ_ZIP_FLAG_COMPRESSED_DATA) ? file_stat.m_comp_size : file_stat.m_uncomp_size;\n        if (((sizeof(size_t) == sizeof(mz_uint32))) && (alloc_size > 0x7FFFFFFF))\n        {\n            mz_zip_set_error(pZip, MZ_ZIP_INTERNAL_ERROR);\n            return NULL;\n        }\n\n        if (NULL == (pBuf = pZip->m_pAlloc(pZip->m_pAlloc_opaque, 1, (size_t)alloc_size)))\n        {\n            mz_zip_set_error(pZip, MZ_ZIP_ALLOC_FAILED);\n            return NULL;\n        }\n\n        if (!mz_zip_reader_extract_to_mem_no_alloc1(pZip, file_index, pBuf, (size_t)alloc_size, flags, NULL, 0, &file_stat))\n        {\n            pZip->m_pFree(pZip->m_pAlloc_opaque, pBuf);\n            return NULL;\n        }\n\n        if (pSize)\n            *pSize = (size_t)alloc_size;\n        return pBuf;\n    }\n\n    void *mz_zip_reader_extract_file_to_heap(mz_zip_archive *pZip, const char *pFilename, size_t *pSize, mz_uint flags)\n    {\n        mz_uint32 file_index;\n        if (!mz_zip_reader_locate_file_v2(pZip, pFilename, NULL, flags, &file_index))\n        {\n            if (pSize)\n                *pSize = 0;\n            return MZ_FALSE;\n        }\n        return mz_zip_reader_extract_to_heap(pZip, file_index, pSize, flags);\n    }\n\n    mz_bool mz_zip_reader_extract_to_callback(mz_zip_archive *pZip, mz_uint file_index, mz_file_write_func pCallback, void *pOpaque, mz_uint flags)\n    {\n        int status = TINFL_STATUS_DONE;\n#ifndef MINIZ_DISABLE_ZIP_READER_CRC32_CHECKS\n        mz_uint file_crc32 = MZ_CRC32_INIT;\n#endif\n        mz_uint64 read_buf_size, read_buf_ofs = 0, read_buf_avail, comp_remaining, out_buf_ofs = 0, cur_file_ofs;\n        mz_zip_archive_file_stat file_stat;\n        void *pRead_buf = NULL;\n        void *pWrite_buf = NULL;\n        mz_uint32 local_header_u32[(MZ_ZIP_LOCAL_DIR_HEADER_SIZE + sizeof(mz_uint32) - 1) / sizeof(mz_uint32)];\n        mz_uint8 *pLocal_header = (mz_uint8 *)local_header_u32;\n\n        if ((!pZip) || (!pZip->m_pState) || (!pCallback) || (!pZip->m_pRead))\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n\n        if (!mz_zip_reader_file_stat(pZip, file_index, &file_stat))\n            return MZ_FALSE;\n\n        /* A directory or zero length file */\n        if ((file_stat.m_is_directory) || (!file_stat.m_comp_size))\n            return MZ_TRUE;\n\n        /* Encryption and patch files are not supported. */\n        if (file_stat.m_bit_flag & (MZ_ZIP_GENERAL_PURPOSE_BIT_FLAG_IS_ENCRYPTED | MZ_ZIP_GENERAL_PURPOSE_BIT_FLAG_USES_STRONG_ENCRYPTION | MZ_ZIP_GENERAL_PURPOSE_BIT_FLAG_COMPRESSED_PATCH_FLAG))\n            return mz_zip_set_error(pZip, MZ_ZIP_UNSUPPORTED_ENCRYPTION);\n\n        /* This function only supports decompressing stored and deflate. */\n        if ((!(flags & MZ_ZIP_FLAG_COMPRESSED_DATA)) && (file_stat.m_method != 0) && (file_stat.m_method != MZ_DEFLATED))\n            return mz_zip_set_error(pZip, MZ_ZIP_UNSUPPORTED_METHOD);\n\n        /* Read and do some minimal validation of the local directory entry (this doesn't crack the zip64 stuff, which we already have from the central dir) */\n        cur_file_ofs = file_stat.m_local_header_ofs;\n        if (pZip->m_pRead(pZip->m_pIO_opaque, cur_file_ofs, pLocal_header, MZ_ZIP_LOCAL_DIR_HEADER_SIZE) != MZ_ZIP_LOCAL_DIR_HEADER_SIZE)\n            return mz_zip_set_error(pZip, MZ_ZIP_FILE_READ_FAILED);\n\n        if (MZ_READ_LE32(pLocal_header) != MZ_ZIP_LOCAL_DIR_HEADER_SIG)\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n\n        cur_file_ofs += (mz_uint64)(MZ_ZIP_LOCAL_DIR_HEADER_SIZE) + MZ_READ_LE16(pLocal_header + MZ_ZIP_LDH_FILENAME_LEN_OFS) + MZ_READ_LE16(pLocal_header + MZ_ZIP_LDH_EXTRA_LEN_OFS);\n        if ((cur_file_ofs + file_stat.m_comp_size) > pZip->m_archive_size)\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n\n        /* Decompress the file either directly from memory or from a file input buffer. */\n        if (pZip->m_pState->m_pMem)\n        {\n            pRead_buf = (mz_uint8 *)pZip->m_pState->m_pMem + cur_file_ofs;\n            read_buf_size = read_buf_avail = file_stat.m_comp_size;\n            comp_remaining = 0;\n        }\n        else\n        {\n            read_buf_size = MZ_MIN(file_stat.m_comp_size, (mz_uint64)MZ_ZIP_MAX_IO_BUF_SIZE);\n            if (NULL == (pRead_buf = pZip->m_pAlloc(pZip->m_pAlloc_opaque, 1, (size_t)read_buf_size)))\n                return mz_zip_set_error(pZip, MZ_ZIP_ALLOC_FAILED);\n\n            read_buf_avail = 0;\n            comp_remaining = file_stat.m_comp_size;\n        }\n\n        if ((flags & MZ_ZIP_FLAG_COMPRESSED_DATA) || (!file_stat.m_method))\n        {\n            /* The file is stored or the caller has requested the compressed data. */\n            if (pZip->m_pState->m_pMem)\n            {\n                if (((sizeof(size_t) == sizeof(mz_uint32))) && (file_stat.m_comp_size > MZ_UINT32_MAX))\n                    return mz_zip_set_error(pZip, MZ_ZIP_INTERNAL_ERROR);\n\n                if (pCallback(pOpaque, out_buf_ofs, pRead_buf, (size_t)file_stat.m_comp_size) != file_stat.m_comp_size)\n                {\n                    mz_zip_set_error(pZip, MZ_ZIP_WRITE_CALLBACK_FAILED);\n                    status = TINFL_STATUS_FAILED;\n                }\n                else if (!(flags & MZ_ZIP_FLAG_COMPRESSED_DATA))\n                {\n#ifndef MINIZ_DISABLE_ZIP_READER_CRC32_CHECKS\n                    file_crc32 = (mz_uint32)mz_crc32(file_crc32, (const mz_uint8 *)pRead_buf, (size_t)file_stat.m_comp_size);\n#endif\n                }\n\n                cur_file_ofs += file_stat.m_comp_size;\n                out_buf_ofs += file_stat.m_comp_size;\n                comp_remaining = 0;\n            }\n            else\n            {\n                while (comp_remaining)\n                {\n                    read_buf_avail = MZ_MIN(read_buf_size, comp_remaining);\n                    if (pZip->m_pRead(pZip->m_pIO_opaque, cur_file_ofs, pRead_buf, (size_t)read_buf_avail) != read_buf_avail)\n                    {\n                        mz_zip_set_error(pZip, MZ_ZIP_FILE_READ_FAILED);\n                        status = TINFL_STATUS_FAILED;\n                        break;\n                    }\n\n#ifndef MINIZ_DISABLE_ZIP_READER_CRC32_CHECKS\n                    if (!(flags & MZ_ZIP_FLAG_COMPRESSED_DATA))\n                    {\n                        file_crc32 = (mz_uint32)mz_crc32(file_crc32, (const mz_uint8 *)pRead_buf, (size_t)read_buf_avail);\n                    }\n#endif\n\n                    if (pCallback(pOpaque, out_buf_ofs, pRead_buf, (size_t)read_buf_avail) != read_buf_avail)\n                    {\n                        mz_zip_set_error(pZip, MZ_ZIP_WRITE_CALLBACK_FAILED);\n                        status = TINFL_STATUS_FAILED;\n                        break;\n                    }\n\n                    cur_file_ofs += read_buf_avail;\n                    out_buf_ofs += read_buf_avail;\n                    comp_remaining -= read_buf_avail;\n                }\n            }\n        }\n        else\n        {\n            tinfl_decompressor inflator;\n            tinfl_init(&inflator);\n\n            if (NULL == (pWrite_buf = pZip->m_pAlloc(pZip->m_pAlloc_opaque, 1, TINFL_LZ_DICT_SIZE)))\n            {\n                mz_zip_set_error(pZip, MZ_ZIP_ALLOC_FAILED);\n                status = TINFL_STATUS_FAILED;\n            }\n            else\n            {\n                do\n                {\n                    mz_uint8 *pWrite_buf_cur = (mz_uint8 *)pWrite_buf + (out_buf_ofs & (TINFL_LZ_DICT_SIZE - 1));\n                    size_t in_buf_size, out_buf_size = TINFL_LZ_DICT_SIZE - (out_buf_ofs & (TINFL_LZ_DICT_SIZE - 1));\n                    if ((!read_buf_avail) && (!pZip->m_pState->m_pMem))\n                    {\n                        read_buf_avail = MZ_MIN(read_buf_size, comp_remaining);\n                        if (pZip->m_pRead(pZip->m_pIO_opaque, cur_file_ofs, pRead_buf, (size_t)read_buf_avail) != read_buf_avail)\n                        {\n                            mz_zip_set_error(pZip, MZ_ZIP_FILE_READ_FAILED);\n                            status = TINFL_STATUS_FAILED;\n                            break;\n                        }\n                        cur_file_ofs += read_buf_avail;\n                        comp_remaining -= read_buf_avail;\n                        read_buf_ofs = 0;\n                    }\n\n                    in_buf_size = (size_t)read_buf_avail;\n                    status = tinfl_decompress(&inflator, (const mz_uint8 *)pRead_buf + read_buf_ofs, &in_buf_size, (mz_uint8 *)pWrite_buf, pWrite_buf_cur, &out_buf_size, comp_remaining ? TINFL_FLAG_HAS_MORE_INPUT : 0);\n                    read_buf_avail -= in_buf_size;\n                    read_buf_ofs += in_buf_size;\n\n                    if (out_buf_size)\n                    {\n                        if (pCallback(pOpaque, out_buf_ofs, pWrite_buf_cur, out_buf_size) != out_buf_size)\n                        {\n                            mz_zip_set_error(pZip, MZ_ZIP_WRITE_CALLBACK_FAILED);\n                            status = TINFL_STATUS_FAILED;\n                            break;\n                        }\n\n#ifndef MINIZ_DISABLE_ZIP_READER_CRC32_CHECKS\n                        file_crc32 = (mz_uint32)mz_crc32(file_crc32, pWrite_buf_cur, out_buf_size);\n#endif\n                        if ((out_buf_ofs += out_buf_size) > file_stat.m_uncomp_size)\n                        {\n                            mz_zip_set_error(pZip, MZ_ZIP_DECOMPRESSION_FAILED);\n                            status = TINFL_STATUS_FAILED;\n                            break;\n                        }\n                    }\n                } while ((status == TINFL_STATUS_NEEDS_MORE_INPUT) || (status == TINFL_STATUS_HAS_MORE_OUTPUT));\n            }\n        }\n\n        if ((status == TINFL_STATUS_DONE) && (!(flags & MZ_ZIP_FLAG_COMPRESSED_DATA)))\n        {\n            /* Make sure the entire file was decompressed, and check its CRC. */\n            if (out_buf_ofs != file_stat.m_uncomp_size)\n            {\n                mz_zip_set_error(pZip, MZ_ZIP_UNEXPECTED_DECOMPRESSED_SIZE);\n                status = TINFL_STATUS_FAILED;\n            }\n#ifndef MINIZ_DISABLE_ZIP_READER_CRC32_CHECKS\n            else if (file_crc32 != file_stat.m_crc32)\n            {\n                mz_zip_set_error(pZip, MZ_ZIP_DECOMPRESSION_FAILED);\n                status = TINFL_STATUS_FAILED;\n            }\n#endif\n        }\n\n        if (!pZip->m_pState->m_pMem)\n            pZip->m_pFree(pZip->m_pAlloc_opaque, pRead_buf);\n\n        if (pWrite_buf)\n            pZip->m_pFree(pZip->m_pAlloc_opaque, pWrite_buf);\n\n        return status == TINFL_STATUS_DONE;\n    }\n\n    mz_bool mz_zip_reader_extract_file_to_callback(mz_zip_archive *pZip, const char *pFilename, mz_file_write_func pCallback, void *pOpaque, mz_uint flags)\n    {\n        mz_uint32 file_index;\n        if (!mz_zip_reader_locate_file_v2(pZip, pFilename, NULL, flags, &file_index))\n            return MZ_FALSE;\n\n        return mz_zip_reader_extract_to_callback(pZip, file_index, pCallback, pOpaque, flags);\n    }\n\n    mz_zip_reader_extract_iter_state *mz_zip_reader_extract_iter_new(mz_zip_archive *pZip, mz_uint file_index, mz_uint flags)\n    {\n        mz_zip_reader_extract_iter_state *pState;\n        mz_uint32 local_header_u32[(MZ_ZIP_LOCAL_DIR_HEADER_SIZE + sizeof(mz_uint32) - 1) / sizeof(mz_uint32)];\n        mz_uint8 *pLocal_header = (mz_uint8 *)local_header_u32;\n\n        /* Argument sanity check */\n        if ((!pZip) || (!pZip->m_pState))\n            return NULL;\n\n        /* Allocate an iterator status structure */\n        pState = (mz_zip_reader_extract_iter_state *)pZip->m_pAlloc(pZip->m_pAlloc_opaque, 1, sizeof(mz_zip_reader_extract_iter_state));\n        if (!pState)\n        {\n            mz_zip_set_error(pZip, MZ_ZIP_ALLOC_FAILED);\n            return NULL;\n        }\n\n        /* Fetch file details */\n        if (!mz_zip_reader_file_stat(pZip, file_index, &pState->file_stat))\n        {\n            pZip->m_pFree(pZip->m_pAlloc_opaque, pState);\n            return NULL;\n        }\n\n        /* Encryption and patch files are not supported. */\n        if (pState->file_stat.m_bit_flag & (MZ_ZIP_GENERAL_PURPOSE_BIT_FLAG_IS_ENCRYPTED | MZ_ZIP_GENERAL_PURPOSE_BIT_FLAG_USES_STRONG_ENCRYPTION | MZ_ZIP_GENERAL_PURPOSE_BIT_FLAG_COMPRESSED_PATCH_FLAG))\n        {\n            mz_zip_set_error(pZip, MZ_ZIP_UNSUPPORTED_ENCRYPTION);\n            pZip->m_pFree(pZip->m_pAlloc_opaque, pState);\n            return NULL;\n        }\n\n        /* This function only supports decompressing stored and deflate. */\n        if ((!(flags & MZ_ZIP_FLAG_COMPRESSED_DATA)) && (pState->file_stat.m_method != 0) && (pState->file_stat.m_method != MZ_DEFLATED))\n        {\n            mz_zip_set_error(pZip, MZ_ZIP_UNSUPPORTED_METHOD);\n            pZip->m_pFree(pZip->m_pAlloc_opaque, pState);\n            return NULL;\n        }\n\n        /* Init state - save args */\n        pState->pZip = pZip;\n        pState->flags = flags;\n\n        /* Init state - reset variables to defaults */\n        pState->status = TINFL_STATUS_DONE;\n#ifndef MINIZ_DISABLE_ZIP_READER_CRC32_CHECKS\n        pState->file_crc32 = MZ_CRC32_INIT;\n#endif\n        pState->read_buf_ofs = 0;\n        pState->out_buf_ofs = 0;\n        pState->pRead_buf = NULL;\n        pState->pWrite_buf = NULL;\n        pState->out_blk_remain = 0;\n\n        /* Read and parse the local directory entry. */\n        pState->cur_file_ofs = pState->file_stat.m_local_header_ofs;\n        if (pZip->m_pRead(pZip->m_pIO_opaque, pState->cur_file_ofs, pLocal_header, MZ_ZIP_LOCAL_DIR_HEADER_SIZE) != MZ_ZIP_LOCAL_DIR_HEADER_SIZE)\n        {\n            mz_zip_set_error(pZip, MZ_ZIP_FILE_READ_FAILED);\n            pZip->m_pFree(pZip->m_pAlloc_opaque, pState);\n            return NULL;\n        }\n\n        if (MZ_READ_LE32(pLocal_header) != MZ_ZIP_LOCAL_DIR_HEADER_SIG)\n        {\n            mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n            pZip->m_pFree(pZip->m_pAlloc_opaque, pState);\n            return NULL;\n        }\n\n        pState->cur_file_ofs += (mz_uint64)(MZ_ZIP_LOCAL_DIR_HEADER_SIZE) + MZ_READ_LE16(pLocal_header + MZ_ZIP_LDH_FILENAME_LEN_OFS) + MZ_READ_LE16(pLocal_header + MZ_ZIP_LDH_EXTRA_LEN_OFS);\n        if ((pState->cur_file_ofs + pState->file_stat.m_comp_size) > pZip->m_archive_size)\n        {\n            mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n            pZip->m_pFree(pZip->m_pAlloc_opaque, pState);\n            return NULL;\n        }\n\n        /* Decompress the file either directly from memory or from a file input buffer. */\n        if (pZip->m_pState->m_pMem)\n        {\n            pState->pRead_buf = (mz_uint8 *)pZip->m_pState->m_pMem + pState->cur_file_ofs;\n            pState->read_buf_size = pState->read_buf_avail = pState->file_stat.m_comp_size;\n            pState->comp_remaining = pState->file_stat.m_comp_size;\n        }\n        else\n        {\n            if (!((flags & MZ_ZIP_FLAG_COMPRESSED_DATA) || (!pState->file_stat.m_method)))\n            {\n                /* Decompression required, therefore intermediate read buffer required */\n                pState->read_buf_size = MZ_MIN(pState->file_stat.m_comp_size, (mz_uint64)MZ_ZIP_MAX_IO_BUF_SIZE);\n                if (NULL == (pState->pRead_buf = pZip->m_pAlloc(pZip->m_pAlloc_opaque, 1, (size_t)pState->read_buf_size)))\n                {\n                    mz_zip_set_error(pZip, MZ_ZIP_ALLOC_FAILED);\n                    pZip->m_pFree(pZip->m_pAlloc_opaque, pState);\n                    return NULL;\n                }\n            }\n            else\n            {\n                /* Decompression not required - we will be reading directly into user buffer, no temp buf required */\n                pState->read_buf_size = 0;\n            }\n            pState->read_buf_avail = 0;\n            pState->comp_remaining = pState->file_stat.m_comp_size;\n        }\n\n        if (!((flags & MZ_ZIP_FLAG_COMPRESSED_DATA) || (!pState->file_stat.m_method)))\n        {\n            /* Decompression required, init decompressor */\n            tinfl_init(&pState->inflator);\n\n            /* Allocate write buffer */\n            if (NULL == (pState->pWrite_buf = pZip->m_pAlloc(pZip->m_pAlloc_opaque, 1, TINFL_LZ_DICT_SIZE)))\n            {\n                mz_zip_set_error(pZip, MZ_ZIP_ALLOC_FAILED);\n                if (pState->pRead_buf)\n                    pZip->m_pFree(pZip->m_pAlloc_opaque, pState->pRead_buf);\n                pZip->m_pFree(pZip->m_pAlloc_opaque, pState);\n                return NULL;\n            }\n        }\n\n        return pState;\n    }\n\n    mz_zip_reader_extract_iter_state *mz_zip_reader_extract_file_iter_new(mz_zip_archive *pZip, const char *pFilename, mz_uint flags)\n    {\n        mz_uint32 file_index;\n\n        /* Locate file index by name */\n        if (!mz_zip_reader_locate_file_v2(pZip, pFilename, NULL, flags, &file_index))\n            return NULL;\n\n        /* Construct iterator */\n        return mz_zip_reader_extract_iter_new(pZip, file_index, flags);\n    }\n\n    size_t mz_zip_reader_extract_iter_read(mz_zip_reader_extract_iter_state *pState, void *pvBuf, size_t buf_size)\n    {\n        size_t copied_to_caller = 0;\n\n        /* Argument sanity check */\n        if ((!pState) || (!pState->pZip) || (!pState->pZip->m_pState) || (!pvBuf))\n            return 0;\n\n        if ((pState->flags & MZ_ZIP_FLAG_COMPRESSED_DATA) || (!pState->file_stat.m_method))\n        {\n            /* The file is stored or the caller has requested the compressed data, calc amount to return. */\n            copied_to_caller = (size_t)MZ_MIN(buf_size, pState->comp_remaining);\n\n            /* Zip is in memory....or requires reading from a file? */\n            if (pState->pZip->m_pState->m_pMem)\n            {\n                /* Copy data to caller's buffer */\n                memcpy(pvBuf, pState->pRead_buf, copied_to_caller);\n                pState->pRead_buf = ((mz_uint8 *)pState->pRead_buf) + copied_to_caller;\n            }\n            else\n            {\n                /* Read directly into caller's buffer */\n                if (pState->pZip->m_pRead(pState->pZip->m_pIO_opaque, pState->cur_file_ofs, pvBuf, copied_to_caller) != copied_to_caller)\n                {\n                    /* Failed to read all that was asked for, flag failure and alert user */\n                    mz_zip_set_error(pState->pZip, MZ_ZIP_FILE_READ_FAILED);\n                    pState->status = TINFL_STATUS_FAILED;\n                    copied_to_caller = 0;\n                }\n            }\n\n#ifndef MINIZ_DISABLE_ZIP_READER_CRC32_CHECKS\n            /* Compute CRC if not returning compressed data only */\n            if (!(pState->flags & MZ_ZIP_FLAG_COMPRESSED_DATA))\n                pState->file_crc32 = (mz_uint32)mz_crc32(pState->file_crc32, (const mz_uint8 *)pvBuf, copied_to_caller);\n#endif\n\n            /* Advance offsets, dec counters */\n            pState->cur_file_ofs += copied_to_caller;\n            pState->out_buf_ofs += copied_to_caller;\n            pState->comp_remaining -= copied_to_caller;\n        }\n        else\n        {\n            do\n            {\n                /* Calc ptr to write buffer - given current output pos and block size */\n                mz_uint8 *pWrite_buf_cur = (mz_uint8 *)pState->pWrite_buf + (pState->out_buf_ofs & (TINFL_LZ_DICT_SIZE - 1));\n\n                /* Calc max output size - given current output pos and block size */\n                size_t in_buf_size, out_buf_size = TINFL_LZ_DICT_SIZE - (pState->out_buf_ofs & (TINFL_LZ_DICT_SIZE - 1));\n\n                if (!pState->out_blk_remain)\n                {\n                    /* Read more data from file if none available (and reading from file) */\n                    if ((!pState->read_buf_avail) && (!pState->pZip->m_pState->m_pMem))\n                    {\n                        /* Calc read size */\n                        pState->read_buf_avail = MZ_MIN(pState->read_buf_size, pState->comp_remaining);\n                        if (pState->pZip->m_pRead(pState->pZip->m_pIO_opaque, pState->cur_file_ofs, pState->pRead_buf, (size_t)pState->read_buf_avail) != pState->read_buf_avail)\n                        {\n                            mz_zip_set_error(pState->pZip, MZ_ZIP_FILE_READ_FAILED);\n                            pState->status = TINFL_STATUS_FAILED;\n                            break;\n                        }\n\n                        /* Advance offsets, dec counters */\n                        pState->cur_file_ofs += pState->read_buf_avail;\n                        pState->comp_remaining -= pState->read_buf_avail;\n                        pState->read_buf_ofs = 0;\n                    }\n\n                    /* Perform decompression */\n                    in_buf_size = (size_t)pState->read_buf_avail;\n                    pState->status = tinfl_decompress(&pState->inflator, (const mz_uint8 *)pState->pRead_buf + pState->read_buf_ofs, &in_buf_size, (mz_uint8 *)pState->pWrite_buf, pWrite_buf_cur, &out_buf_size, pState->comp_remaining ? TINFL_FLAG_HAS_MORE_INPUT : 0);\n                    pState->read_buf_avail -= in_buf_size;\n                    pState->read_buf_ofs += in_buf_size;\n\n                    /* Update current output block size remaining */\n                    pState->out_blk_remain = out_buf_size;\n                }\n\n                if (pState->out_blk_remain)\n                {\n                    /* Calc amount to return. */\n                    size_t to_copy = MZ_MIN((buf_size - copied_to_caller), pState->out_blk_remain);\n\n                    /* Copy data to caller's buffer */\n                    memcpy((mz_uint8 *)pvBuf + copied_to_caller, pWrite_buf_cur, to_copy);\n\n#ifndef MINIZ_DISABLE_ZIP_READER_CRC32_CHECKS\n                    /* Perform CRC */\n                    pState->file_crc32 = (mz_uint32)mz_crc32(pState->file_crc32, pWrite_buf_cur, to_copy);\n#endif\n\n                    /* Decrement data consumed from block */\n                    pState->out_blk_remain -= to_copy;\n\n                    /* Inc output offset, while performing sanity check */\n                    if ((pState->out_buf_ofs += to_copy) > pState->file_stat.m_uncomp_size)\n                    {\n                        mz_zip_set_error(pState->pZip, MZ_ZIP_DECOMPRESSION_FAILED);\n                        pState->status = TINFL_STATUS_FAILED;\n                        break;\n                    }\n\n                    /* Increment counter of data copied to caller */\n                    copied_to_caller += to_copy;\n                }\n            } while ((copied_to_caller < buf_size) && ((pState->status == TINFL_STATUS_NEEDS_MORE_INPUT) || (pState->status == TINFL_STATUS_HAS_MORE_OUTPUT)));\n        }\n\n        /* Return how many bytes were copied into user buffer */\n        return copied_to_caller;\n    }\n\n    mz_bool mz_zip_reader_extract_iter_free(mz_zip_reader_extract_iter_state *pState)\n    {\n        int status;\n\n        /* Argument sanity check */\n        if ((!pState) || (!pState->pZip) || (!pState->pZip->m_pState))\n            return MZ_FALSE;\n\n        /* Was decompression completed and requested? */\n        if ((pState->status == TINFL_STATUS_DONE) && (!(pState->flags & MZ_ZIP_FLAG_COMPRESSED_DATA)))\n        {\n            /* Make sure the entire file was decompressed, and check its CRC. */\n            if (pState->out_buf_ofs != pState->file_stat.m_uncomp_size)\n            {\n                mz_zip_set_error(pState->pZip, MZ_ZIP_UNEXPECTED_DECOMPRESSED_SIZE);\n                pState->status = TINFL_STATUS_FAILED;\n            }\n#ifndef MINIZ_DISABLE_ZIP_READER_CRC32_CHECKS\n            else if (pState->file_crc32 != pState->file_stat.m_crc32)\n            {\n                mz_zip_set_error(pState->pZip, MZ_ZIP_DECOMPRESSION_FAILED);\n                pState->status = TINFL_STATUS_FAILED;\n            }\n#endif\n        }\n\n        /* Free buffers */\n        if (!pState->pZip->m_pState->m_pMem)\n            pState->pZip->m_pFree(pState->pZip->m_pAlloc_opaque, pState->pRead_buf);\n        if (pState->pWrite_buf)\n            pState->pZip->m_pFree(pState->pZip->m_pAlloc_opaque, pState->pWrite_buf);\n\n        /* Save status */\n        status = pState->status;\n\n        /* Free context */\n        pState->pZip->m_pFree(pState->pZip->m_pAlloc_opaque, pState);\n\n        return status == TINFL_STATUS_DONE;\n    }\n\n#ifndef MINIZ_NO_STDIO\n    static size_t mz_zip_file_write_callback(void *pOpaque, mz_uint64 ofs, const void *pBuf, size_t n)\n    {\n        (void)ofs;\n\n        return MZ_FWRITE(pBuf, 1, n, (MZ_FILE *)pOpaque);\n    }\n\n    mz_bool mz_zip_reader_extract_to_file(mz_zip_archive *pZip, mz_uint file_index, const char *pDst_filename, mz_uint flags)\n    {\n        mz_bool status;\n        mz_zip_archive_file_stat file_stat;\n        MZ_FILE *pFile;\n\n        if (!mz_zip_reader_file_stat(pZip, file_index, &file_stat))\n            return MZ_FALSE;\n\n        if ((file_stat.m_is_directory) || (!file_stat.m_is_supported))\n            return mz_zip_set_error(pZip, MZ_ZIP_UNSUPPORTED_FEATURE);\n\n        pFile = MZ_FOPEN(pDst_filename, \"wb\");\n        if (!pFile)\n            return mz_zip_set_error(pZip, MZ_ZIP_FILE_OPEN_FAILED);\n\n        status = mz_zip_reader_extract_to_callback(pZip, file_index, mz_zip_file_write_callback, pFile, flags);\n\n        if (MZ_FCLOSE(pFile) == EOF)\n        {\n            if (status)\n                mz_zip_set_error(pZip, MZ_ZIP_FILE_CLOSE_FAILED);\n\n            status = MZ_FALSE;\n        }\n\n#if !defined(MINIZ_NO_TIME) && !defined(MINIZ_NO_STDIO)\n        if (status)\n            mz_zip_set_file_times(pDst_filename, file_stat.m_time, file_stat.m_time);\n#endif\n\n        return status;\n    }\n\n    mz_bool mz_zip_reader_extract_file_to_file(mz_zip_archive *pZip, const char *pArchive_filename, const char *pDst_filename, mz_uint flags)\n    {\n        mz_uint32 file_index;\n        if (!mz_zip_reader_locate_file_v2(pZip, pArchive_filename, NULL, flags, &file_index))\n            return MZ_FALSE;\n\n        return mz_zip_reader_extract_to_file(pZip, file_index, pDst_filename, flags);\n    }\n\n    mz_bool mz_zip_reader_extract_to_cfile(mz_zip_archive *pZip, mz_uint file_index, MZ_FILE *pFile, mz_uint flags)\n    {\n        mz_zip_archive_file_stat file_stat;\n\n        if (!mz_zip_reader_file_stat(pZip, file_index, &file_stat))\n            return MZ_FALSE;\n\n        if ((file_stat.m_is_directory) || (!file_stat.m_is_supported))\n            return mz_zip_set_error(pZip, MZ_ZIP_UNSUPPORTED_FEATURE);\n\n        return mz_zip_reader_extract_to_callback(pZip, file_index, mz_zip_file_write_callback, pFile, flags);\n    }\n\n    mz_bool mz_zip_reader_extract_file_to_cfile(mz_zip_archive *pZip, const char *pArchive_filename, MZ_FILE *pFile, mz_uint flags)\n    {\n        mz_uint32 file_index;\n        if (!mz_zip_reader_locate_file_v2(pZip, pArchive_filename, NULL, flags, &file_index))\n            return MZ_FALSE;\n\n        return mz_zip_reader_extract_to_cfile(pZip, file_index, pFile, flags);\n    }\n#endif /* #ifndef MINIZ_NO_STDIO */\n\n    static size_t mz_zip_compute_crc32_callback(void *pOpaque, mz_uint64 file_ofs, const void *pBuf, size_t n)\n    {\n        mz_uint32 *p = (mz_uint32 *)pOpaque;\n        (void)file_ofs;\n        *p = (mz_uint32)mz_crc32(*p, (const mz_uint8 *)pBuf, n);\n        return n;\n    }\n\n    mz_bool mz_zip_validate_file(mz_zip_archive *pZip, mz_uint file_index, mz_uint flags)\n    {\n        mz_zip_archive_file_stat file_stat;\n        mz_zip_internal_state *pState;\n        const mz_uint8 *pCentral_dir_header;\n        mz_bool found_zip64_ext_data_in_cdir = MZ_FALSE;\n        mz_bool found_zip64_ext_data_in_ldir = MZ_FALSE;\n        mz_uint32 local_header_u32[(MZ_ZIP_LOCAL_DIR_HEADER_SIZE + sizeof(mz_uint32) - 1) / sizeof(mz_uint32)];\n        mz_uint8 *pLocal_header = (mz_uint8 *)local_header_u32;\n        mz_uint64 local_header_ofs = 0;\n        mz_uint32 local_header_filename_len, local_header_extra_len, local_header_crc32;\n        mz_uint64 local_header_comp_size, local_header_uncomp_size;\n        mz_uint32 uncomp_crc32 = MZ_CRC32_INIT;\n        mz_bool has_data_descriptor;\n        mz_uint32 local_header_bit_flags;\n\n        mz_zip_array file_data_array;\n        mz_zip_array_init(&file_data_array, 1);\n\n        if ((!pZip) || (!pZip->m_pState) || (!pZip->m_pAlloc) || (!pZip->m_pFree) || (!pZip->m_pRead))\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n\n        if (file_index > pZip->m_total_files)\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n\n        pState = pZip->m_pState;\n\n        pCentral_dir_header = mz_zip_get_cdh(pZip, file_index);\n\n        if (!mz_zip_file_stat_internal(pZip, file_index, pCentral_dir_header, &file_stat, &found_zip64_ext_data_in_cdir))\n            return MZ_FALSE;\n\n        /* A directory or zero length file */\n        if ((file_stat.m_is_directory) || (!file_stat.m_uncomp_size))\n            return MZ_TRUE;\n\n        /* Encryption and patch files are not supported. */\n        if (file_stat.m_is_encrypted)\n            return mz_zip_set_error(pZip, MZ_ZIP_UNSUPPORTED_ENCRYPTION);\n\n        /* This function only supports stored and deflate. */\n        if ((file_stat.m_method != 0) && (file_stat.m_method != MZ_DEFLATED))\n            return mz_zip_set_error(pZip, MZ_ZIP_UNSUPPORTED_METHOD);\n\n        if (!file_stat.m_is_supported)\n            return mz_zip_set_error(pZip, MZ_ZIP_UNSUPPORTED_FEATURE);\n\n        /* Read and parse the local directory entry. */\n        local_header_ofs = file_stat.m_local_header_ofs;\n        if (pZip->m_pRead(pZip->m_pIO_opaque, local_header_ofs, pLocal_header, MZ_ZIP_LOCAL_DIR_HEADER_SIZE) != MZ_ZIP_LOCAL_DIR_HEADER_SIZE)\n            return mz_zip_set_error(pZip, MZ_ZIP_FILE_READ_FAILED);\n\n        if (MZ_READ_LE32(pLocal_header) != MZ_ZIP_LOCAL_DIR_HEADER_SIG)\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n\n        local_header_filename_len = MZ_READ_LE16(pLocal_header + MZ_ZIP_LDH_FILENAME_LEN_OFS);\n        local_header_extra_len = MZ_READ_LE16(pLocal_header + MZ_ZIP_LDH_EXTRA_LEN_OFS);\n        local_header_comp_size = MZ_READ_LE32(pLocal_header + MZ_ZIP_LDH_COMPRESSED_SIZE_OFS);\n        local_header_uncomp_size = MZ_READ_LE32(pLocal_header + MZ_ZIP_LDH_DECOMPRESSED_SIZE_OFS);\n        local_header_crc32 = MZ_READ_LE32(pLocal_header + MZ_ZIP_LDH_CRC32_OFS);\n        local_header_bit_flags = MZ_READ_LE16(pLocal_header + MZ_ZIP_LDH_BIT_FLAG_OFS);\n        has_data_descriptor = (local_header_bit_flags & 8) != 0;\n\n        if (local_header_filename_len != strlen(file_stat.m_filename))\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n\n        if ((local_header_ofs + MZ_ZIP_LOCAL_DIR_HEADER_SIZE + local_header_filename_len + local_header_extra_len + file_stat.m_comp_size) > pZip->m_archive_size)\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n\n        if (!mz_zip_array_resize(pZip, &file_data_array, MZ_MAX(local_header_filename_len, local_header_extra_len), MZ_FALSE))\n        {\n            mz_zip_set_error(pZip, MZ_ZIP_ALLOC_FAILED);\n            goto handle_failure;\n        }\n\n        if (local_header_filename_len)\n        {\n            if (pZip->m_pRead(pZip->m_pIO_opaque, local_header_ofs + MZ_ZIP_LOCAL_DIR_HEADER_SIZE, file_data_array.m_p, local_header_filename_len) != local_header_filename_len)\n            {\n                mz_zip_set_error(pZip, MZ_ZIP_FILE_READ_FAILED);\n                goto handle_failure;\n            }\n\n            /* I've seen 1 archive that had the same pathname, but used backslashes in the local dir and forward slashes in the central dir. Do we care about this? For now, this case will fail validation. */\n            if (memcmp(file_stat.m_filename, file_data_array.m_p, local_header_filename_len) != 0)\n            {\n                mz_zip_set_error(pZip, MZ_ZIP_VALIDATION_FAILED);\n                goto handle_failure;\n            }\n        }\n\n        if ((local_header_extra_len) && ((local_header_comp_size == MZ_UINT32_MAX) || (local_header_uncomp_size == MZ_UINT32_MAX)))\n        {\n            mz_uint32 extra_size_remaining = local_header_extra_len;\n            const mz_uint8 *pExtra_data = (const mz_uint8 *)file_data_array.m_p;\n\n            if (pZip->m_pRead(pZip->m_pIO_opaque, local_header_ofs + MZ_ZIP_LOCAL_DIR_HEADER_SIZE + local_header_filename_len, file_data_array.m_p, local_header_extra_len) != local_header_extra_len)\n            {\n                mz_zip_set_error(pZip, MZ_ZIP_FILE_READ_FAILED);\n                goto handle_failure;\n            }\n\n            do\n            {\n                mz_uint32 field_id, field_data_size, field_total_size;\n\n                if (extra_size_remaining < (sizeof(mz_uint16) * 2))\n                {\n                    mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n                    goto handle_failure;\n                }\n\n                field_id = MZ_READ_LE16(pExtra_data);\n                field_data_size = MZ_READ_LE16(pExtra_data + sizeof(mz_uint16));\n                field_total_size = field_data_size + sizeof(mz_uint16) * 2;\n\n                if (field_total_size > extra_size_remaining)\n                {\n                    mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n                    goto handle_failure;\n                }\n\n                if (field_id == MZ_ZIP64_EXTENDED_INFORMATION_FIELD_HEADER_ID)\n                {\n                    const mz_uint8 *pSrc_field_data = pExtra_data + sizeof(mz_uint32);\n\n                    if (field_data_size < sizeof(mz_uint64) * 2)\n                    {\n                        mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n                        goto handle_failure;\n                    }\n\n                    local_header_uncomp_size = MZ_READ_LE64(pSrc_field_data);\n                    local_header_comp_size = MZ_READ_LE64(pSrc_field_data + sizeof(mz_uint64));\n\n                    found_zip64_ext_data_in_ldir = MZ_TRUE;\n                    break;\n                }\n\n                pExtra_data += field_total_size;\n                extra_size_remaining -= field_total_size;\n            } while (extra_size_remaining);\n        }\n\n        /* TODO: parse local header extra data when local_header_comp_size is 0xFFFFFFFF! (big_descriptor.zip) */\n        /* I've seen zips in the wild with the data descriptor bit set, but proper local header values and bogus data descriptors */\n        if ((has_data_descriptor) && (!local_header_comp_size) && (!local_header_crc32))\n        {\n            mz_uint8 descriptor_buf[32];\n            mz_bool has_id;\n            const mz_uint8 *pSrc;\n            mz_uint32 file_crc32;\n            mz_uint64 comp_size = 0, uncomp_size = 0;\n\n            mz_uint32 num_descriptor_uint32s = ((pState->m_zip64) || (found_zip64_ext_data_in_ldir)) ? 6 : 4;\n\n            if (pZip->m_pRead(pZip->m_pIO_opaque, local_header_ofs + MZ_ZIP_LOCAL_DIR_HEADER_SIZE + local_header_filename_len + local_header_extra_len + file_stat.m_comp_size, descriptor_buf, sizeof(mz_uint32) * num_descriptor_uint32s) != (sizeof(mz_uint32) * num_descriptor_uint32s))\n            {\n                mz_zip_set_error(pZip, MZ_ZIP_FILE_READ_FAILED);\n                goto handle_failure;\n            }\n\n            has_id = (MZ_READ_LE32(descriptor_buf) == MZ_ZIP_DATA_DESCRIPTOR_ID);\n            pSrc = has_id ? (descriptor_buf + sizeof(mz_uint32)) : descriptor_buf;\n\n            file_crc32 = MZ_READ_LE32(pSrc);\n\n            if ((pState->m_zip64) || (found_zip64_ext_data_in_ldir))\n            {\n                comp_size = MZ_READ_LE64(pSrc + sizeof(mz_uint32));\n                uncomp_size = MZ_READ_LE64(pSrc + sizeof(mz_uint32) + sizeof(mz_uint64));\n            }\n            else\n            {\n                comp_size = MZ_READ_LE32(pSrc + sizeof(mz_uint32));\n                uncomp_size = MZ_READ_LE32(pSrc + sizeof(mz_uint32) + sizeof(mz_uint32));\n            }\n\n            if ((file_crc32 != file_stat.m_crc32) || (comp_size != file_stat.m_comp_size) || (uncomp_size != file_stat.m_uncomp_size))\n            {\n                mz_zip_set_error(pZip, MZ_ZIP_VALIDATION_FAILED);\n                goto handle_failure;\n            }\n        }\n        else\n        {\n            if ((local_header_crc32 != file_stat.m_crc32) || (local_header_comp_size != file_stat.m_comp_size) || (local_header_uncomp_size != file_stat.m_uncomp_size))\n            {\n                mz_zip_set_error(pZip, MZ_ZIP_VALIDATION_FAILED);\n                goto handle_failure;\n            }\n        }\n\n        mz_zip_array_clear(pZip, &file_data_array);\n\n        if ((flags & MZ_ZIP_FLAG_VALIDATE_HEADERS_ONLY) == 0)\n        {\n            if (!mz_zip_reader_extract_to_callback(pZip, file_index, mz_zip_compute_crc32_callback, &uncomp_crc32, 0))\n                return MZ_FALSE;\n\n            /* 1 more check to be sure, although the extract checks too. */\n            if (uncomp_crc32 != file_stat.m_crc32)\n            {\n                mz_zip_set_error(pZip, MZ_ZIP_VALIDATION_FAILED);\n                return MZ_FALSE;\n            }\n        }\n\n        return MZ_TRUE;\n\n    handle_failure:\n        mz_zip_array_clear(pZip, &file_data_array);\n        return MZ_FALSE;\n    }\n\n    mz_bool mz_zip_validate_archive(mz_zip_archive *pZip, mz_uint flags)\n    {\n        mz_zip_internal_state *pState;\n        mz_uint32 i;\n\n        if ((!pZip) || (!pZip->m_pState) || (!pZip->m_pAlloc) || (!pZip->m_pFree) || (!pZip->m_pRead))\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n\n        pState = pZip->m_pState;\n\n        /* Basic sanity checks */\n        if (!pState->m_zip64)\n        {\n            if (pZip->m_total_files > MZ_UINT16_MAX)\n                return mz_zip_set_error(pZip, MZ_ZIP_ARCHIVE_TOO_LARGE);\n\n            if (pZip->m_archive_size > MZ_UINT32_MAX)\n                return mz_zip_set_error(pZip, MZ_ZIP_ARCHIVE_TOO_LARGE);\n        }\n        else\n        {\n            if (pState->m_central_dir.m_size >= MZ_UINT32_MAX)\n                return mz_zip_set_error(pZip, MZ_ZIP_ARCHIVE_TOO_LARGE);\n        }\n\n        for (i = 0; i < pZip->m_total_files; i++)\n        {\n            if (MZ_ZIP_FLAG_VALIDATE_LOCATE_FILE_FLAG & flags)\n            {\n                mz_uint32 found_index;\n                mz_zip_archive_file_stat stat;\n\n                if (!mz_zip_reader_file_stat(pZip, i, &stat))\n                    return MZ_FALSE;\n\n                if (!mz_zip_reader_locate_file_v2(pZip, stat.m_filename, NULL, 0, &found_index))\n                    return MZ_FALSE;\n\n                /* This check can fail if there are duplicate filenames in the archive (which we don't check for when writing - that's up to the user) */\n                if (found_index != i)\n                    return mz_zip_set_error(pZip, MZ_ZIP_VALIDATION_FAILED);\n            }\n\n            if (!mz_zip_validate_file(pZip, i, flags))\n                return MZ_FALSE;\n        }\n\n        return MZ_TRUE;\n    }\n\n    mz_bool mz_zip_validate_mem_archive(const void *pMem, size_t size, mz_uint flags, mz_zip_error *pErr)\n    {\n        mz_bool success = MZ_TRUE;\n        mz_zip_archive zip;\n        mz_zip_error actual_err = MZ_ZIP_NO_ERROR;\n\n        if ((!pMem) || (!size))\n        {\n            if (pErr)\n                *pErr = MZ_ZIP_INVALID_PARAMETER;\n            return MZ_FALSE;\n        }\n\n        mz_zip_zero_struct(&zip);\n\n        if (!mz_zip_reader_init_mem(&zip, pMem, size, flags))\n        {\n            if (pErr)\n                *pErr = zip.m_last_error;\n            return MZ_FALSE;\n        }\n\n        if (!mz_zip_validate_archive(&zip, flags))\n        {\n            actual_err = zip.m_last_error;\n            success = MZ_FALSE;\n        }\n\n        if (!mz_zip_reader_end_internal(&zip, success))\n        {\n            if (!actual_err)\n                actual_err = zip.m_last_error;\n            success = MZ_FALSE;\n        }\n\n        if (pErr)\n            *pErr = actual_err;\n\n        return success;\n    }\n\n#ifndef MINIZ_NO_STDIO\n    mz_bool mz_zip_validate_file_archive(const char *pFilename, mz_uint flags, mz_zip_error *pErr)\n    {\n        mz_bool success = MZ_TRUE;\n        mz_zip_archive zip;\n        mz_zip_error actual_err = MZ_ZIP_NO_ERROR;\n\n        if (!pFilename)\n        {\n            if (pErr)\n                *pErr = MZ_ZIP_INVALID_PARAMETER;\n            return MZ_FALSE;\n        }\n\n        mz_zip_zero_struct(&zip);\n\n        if (!mz_zip_reader_init_file_v2(&zip, pFilename, flags, 0, 0))\n        {\n            if (pErr)\n                *pErr = zip.m_last_error;\n            return MZ_FALSE;\n        }\n\n        if (!mz_zip_validate_archive(&zip, flags))\n        {\n            actual_err = zip.m_last_error;\n            success = MZ_FALSE;\n        }\n\n        if (!mz_zip_reader_end_internal(&zip, success))\n        {\n            if (!actual_err)\n                actual_err = zip.m_last_error;\n            success = MZ_FALSE;\n        }\n\n        if (pErr)\n            *pErr = actual_err;\n\n        return success;\n    }\n#endif /* #ifndef MINIZ_NO_STDIO */\n\n    /* ------------------- .ZIP archive writing */\n\n#ifndef MINIZ_NO_ARCHIVE_WRITING_APIS\n\n    static MZ_FORCEINLINE void mz_write_le16(mz_uint8 *p, mz_uint16 v)\n    {\n        p[0] = (mz_uint8)v;\n        p[1] = (mz_uint8)(v >> 8);\n    }\n    static MZ_FORCEINLINE void mz_write_le32(mz_uint8 *p, mz_uint32 v)\n    {\n        p[0] = (mz_uint8)v;\n        p[1] = (mz_uint8)(v >> 8);\n        p[2] = (mz_uint8)(v >> 16);\n        p[3] = (mz_uint8)(v >> 24);\n    }\n    static MZ_FORCEINLINE void mz_write_le64(mz_uint8 *p, mz_uint64 v)\n    {\n        mz_write_le32(p, (mz_uint32)v);\n        mz_write_le32(p + sizeof(mz_uint32), (mz_uint32)(v >> 32));\n    }\n\n#define MZ_WRITE_LE16(p, v) mz_write_le16((mz_uint8 *)(p), (mz_uint16)(v))\n#define MZ_WRITE_LE32(p, v) mz_write_le32((mz_uint8 *)(p), (mz_uint32)(v))\n#define MZ_WRITE_LE64(p, v) mz_write_le64((mz_uint8 *)(p), (mz_uint64)(v))\n\n    static size_t mz_zip_heap_write_func(void *pOpaque, mz_uint64 file_ofs, const void *pBuf, size_t n)\n    {\n        mz_zip_archive *pZip = (mz_zip_archive *)pOpaque;\n        mz_zip_internal_state *pState = pZip->m_pState;\n        mz_uint64 new_size = MZ_MAX(file_ofs + n, pState->m_mem_size);\n\n        if (!n)\n            return 0;\n\n        /* An allocation this big is likely to just fail on 32-bit systems, so don't even go there. */\n        if ((sizeof(size_t) == sizeof(mz_uint32)) && (new_size > 0x7FFFFFFF))\n        {\n            mz_zip_set_error(pZip, MZ_ZIP_FILE_TOO_LARGE);\n            return 0;\n        }\n\n        if (new_size > pState->m_mem_capacity)\n        {\n            void *pNew_block;\n            size_t new_capacity = MZ_MAX(64, pState->m_mem_capacity);\n\n            while (new_capacity < new_size)\n                new_capacity *= 2;\n\n            if (NULL == (pNew_block = pZip->m_pRealloc(pZip->m_pAlloc_opaque, pState->m_pMem, 1, new_capacity)))\n            {\n                mz_zip_set_error(pZip, MZ_ZIP_ALLOC_FAILED);\n                return 0;\n            }\n\n            pState->m_pMem = pNew_block;\n            pState->m_mem_capacity = new_capacity;\n        }\n        memcpy((mz_uint8 *)pState->m_pMem + file_ofs, pBuf, n);\n        pState->m_mem_size = (size_t)new_size;\n        return n;\n    }\n\n    static mz_bool mz_zip_writer_end_internal(mz_zip_archive *pZip, mz_bool set_last_error)\n    {\n        mz_zip_internal_state *pState;\n        mz_bool status = MZ_TRUE;\n\n        if ((!pZip) || (!pZip->m_pState) || (!pZip->m_pAlloc) || (!pZip->m_pFree) || ((pZip->m_zip_mode != MZ_ZIP_MODE_WRITING) && (pZip->m_zip_mode != MZ_ZIP_MODE_WRITING_HAS_BEEN_FINALIZED)))\n        {\n            if (set_last_error)\n                mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n            return MZ_FALSE;\n        }\n\n        pState = pZip->m_pState;\n        pZip->m_pState = NULL;\n        mz_zip_array_clear(pZip, &pState->m_central_dir);\n        mz_zip_array_clear(pZip, &pState->m_central_dir_offsets);\n        mz_zip_array_clear(pZip, &pState->m_sorted_central_dir_offsets);\n\n#ifndef MINIZ_NO_STDIO\n        if (pState->m_pFile)\n        {\n            if (pZip->m_zip_type == MZ_ZIP_TYPE_FILE)\n            {\n                if (MZ_FCLOSE(pState->m_pFile) == EOF)\n                {\n                    if (set_last_error)\n                        mz_zip_set_error(pZip, MZ_ZIP_FILE_CLOSE_FAILED);\n                    status = MZ_FALSE;\n                }\n            }\n\n            pState->m_pFile = NULL;\n        }\n#endif /* #ifndef MINIZ_NO_STDIO */\n\n        if ((pZip->m_pWrite == mz_zip_heap_write_func) && (pState->m_pMem))\n        {\n            pZip->m_pFree(pZip->m_pAlloc_opaque, pState->m_pMem);\n            pState->m_pMem = NULL;\n        }\n\n        pZip->m_pFree(pZip->m_pAlloc_opaque, pState);\n        pZip->m_zip_mode = MZ_ZIP_MODE_INVALID;\n        return status;\n    }\n\n    mz_bool mz_zip_writer_init_v2(mz_zip_archive *pZip, mz_uint64 existing_size, mz_uint flags)\n    {\n        mz_bool zip64 = (flags & MZ_ZIP_FLAG_WRITE_ZIP64) != 0;\n\n        if ((!pZip) || (pZip->m_pState) || (!pZip->m_pWrite) || (pZip->m_zip_mode != MZ_ZIP_MODE_INVALID))\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n\n        if (flags & MZ_ZIP_FLAG_WRITE_ALLOW_READING)\n        {\n            if (!pZip->m_pRead)\n                return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n        }\n\n        if (pZip->m_file_offset_alignment)\n        {\n            /* Ensure user specified file offset alignment is a power of 2. */\n            if (pZip->m_file_offset_alignment & (pZip->m_file_offset_alignment - 1))\n                return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n        }\n\n        if (!pZip->m_pAlloc)\n            pZip->m_pAlloc = miniz_def_alloc_func;\n        if (!pZip->m_pFree)\n            pZip->m_pFree = miniz_def_free_func;\n        if (!pZip->m_pRealloc)\n            pZip->m_pRealloc = miniz_def_realloc_func;\n\n        pZip->m_archive_size = existing_size;\n        pZip->m_central_directory_file_ofs = 0;\n        pZip->m_total_files = 0;\n\n        if (NULL == (pZip->m_pState = (mz_zip_internal_state *)pZip->m_pAlloc(pZip->m_pAlloc_opaque, 1, sizeof(mz_zip_internal_state))))\n            return mz_zip_set_error(pZip, MZ_ZIP_ALLOC_FAILED);\n\n        memset(pZip->m_pState, 0, sizeof(mz_zip_internal_state));\n\n        MZ_ZIP_ARRAY_SET_ELEMENT_SIZE(&pZip->m_pState->m_central_dir, sizeof(mz_uint8));\n        MZ_ZIP_ARRAY_SET_ELEMENT_SIZE(&pZip->m_pState->m_central_dir_offsets, sizeof(mz_uint32));\n        MZ_ZIP_ARRAY_SET_ELEMENT_SIZE(&pZip->m_pState->m_sorted_central_dir_offsets, sizeof(mz_uint32));\n\n        pZip->m_pState->m_zip64 = zip64;\n        pZip->m_pState->m_zip64_has_extended_info_fields = zip64;\n\n        pZip->m_zip_type = MZ_ZIP_TYPE_USER;\n        pZip->m_zip_mode = MZ_ZIP_MODE_WRITING;\n\n        return MZ_TRUE;\n    }\n\n    mz_bool mz_zip_writer_init(mz_zip_archive *pZip, mz_uint64 existing_size)\n    {\n        return mz_zip_writer_init_v2(pZip, existing_size, 0);\n    }\n\n    mz_bool mz_zip_writer_init_heap_v2(mz_zip_archive *pZip, size_t size_to_reserve_at_beginning, size_t initial_allocation_size, mz_uint flags)\n    {\n        pZip->m_pWrite = mz_zip_heap_write_func;\n        pZip->m_pNeeds_keepalive = NULL;\n\n        if (flags & MZ_ZIP_FLAG_WRITE_ALLOW_READING)\n            pZip->m_pRead = mz_zip_mem_read_func;\n\n        pZip->m_pIO_opaque = pZip;\n\n        if (!mz_zip_writer_init_v2(pZip, size_to_reserve_at_beginning, flags))\n            return MZ_FALSE;\n\n        pZip->m_zip_type = MZ_ZIP_TYPE_HEAP;\n\n        if (0 != (initial_allocation_size = MZ_MAX(initial_allocation_size, size_to_reserve_at_beginning)))\n        {\n            if (NULL == (pZip->m_pState->m_pMem = pZip->m_pAlloc(pZip->m_pAlloc_opaque, 1, initial_allocation_size)))\n            {\n                mz_zip_writer_end_internal(pZip, MZ_FALSE);\n                return mz_zip_set_error(pZip, MZ_ZIP_ALLOC_FAILED);\n            }\n            pZip->m_pState->m_mem_capacity = initial_allocation_size;\n        }\n\n        return MZ_TRUE;\n    }\n\n    mz_bool mz_zip_writer_init_heap(mz_zip_archive *pZip, size_t size_to_reserve_at_beginning, size_t initial_allocation_size)\n    {\n        return mz_zip_writer_init_heap_v2(pZip, size_to_reserve_at_beginning, initial_allocation_size, 0);\n    }\n\n#ifndef MINIZ_NO_STDIO\n    static size_t mz_zip_file_write_func(void *pOpaque, mz_uint64 file_ofs, const void *pBuf, size_t n)\n    {\n        mz_zip_archive *pZip = (mz_zip_archive *)pOpaque;\n        mz_int64 cur_ofs = MZ_FTELL64(pZip->m_pState->m_pFile);\n\n        file_ofs += pZip->m_pState->m_file_archive_start_ofs;\n\n        if (((mz_int64)file_ofs < 0) || (((cur_ofs != (mz_int64)file_ofs)) && (MZ_FSEEK64(pZip->m_pState->m_pFile, (mz_int64)file_ofs, SEEK_SET))))\n        {\n            mz_zip_set_error(pZip, MZ_ZIP_FILE_SEEK_FAILED);\n            return 0;\n        }\n\n        return MZ_FWRITE(pBuf, 1, n, pZip->m_pState->m_pFile);\n    }\n\n    mz_bool mz_zip_writer_init_file(mz_zip_archive *pZip, const char *pFilename, mz_uint64 size_to_reserve_at_beginning)\n    {\n        return mz_zip_writer_init_file_v2(pZip, pFilename, size_to_reserve_at_beginning, 0);\n    }\n\n    mz_bool mz_zip_writer_init_file_v2(mz_zip_archive *pZip, const char *pFilename, mz_uint64 size_to_reserve_at_beginning, mz_uint flags)\n    {\n        MZ_FILE *pFile;\n\n        pZip->m_pWrite = mz_zip_file_write_func;\n        pZip->m_pNeeds_keepalive = NULL;\n\n        if (flags & MZ_ZIP_FLAG_WRITE_ALLOW_READING)\n            pZip->m_pRead = mz_zip_file_read_func;\n\n        pZip->m_pIO_opaque = pZip;\n\n        if (!mz_zip_writer_init_v2(pZip, size_to_reserve_at_beginning, flags))\n            return MZ_FALSE;\n\n        if (NULL == (pFile = MZ_FOPEN(pFilename, (flags & MZ_ZIP_FLAG_WRITE_ALLOW_READING) ? \"w+b\" : \"wb\")))\n        {\n            mz_zip_writer_end(pZip);\n            return mz_zip_set_error(pZip, MZ_ZIP_FILE_OPEN_FAILED);\n        }\n\n        pZip->m_pState->m_pFile = pFile;\n        pZip->m_zip_type = MZ_ZIP_TYPE_FILE;\n\n        if (size_to_reserve_at_beginning)\n        {\n            mz_uint64 cur_ofs = 0;\n            char buf[4096];\n\n            MZ_CLEAR_ARR(buf);\n\n            do\n            {\n                size_t n = (size_t)MZ_MIN(sizeof(buf), size_to_reserve_at_beginning);\n                if (pZip->m_pWrite(pZip->m_pIO_opaque, cur_ofs, buf, n) != n)\n                {\n                    mz_zip_writer_end(pZip);\n                    return mz_zip_set_error(pZip, MZ_ZIP_FILE_WRITE_FAILED);\n                }\n                cur_ofs += n;\n                size_to_reserve_at_beginning -= n;\n            } while (size_to_reserve_at_beginning);\n        }\n\n        return MZ_TRUE;\n    }\n\n    mz_bool mz_zip_writer_init_cfile(mz_zip_archive *pZip, MZ_FILE *pFile, mz_uint flags)\n    {\n        pZip->m_pWrite = mz_zip_file_write_func;\n        pZip->m_pNeeds_keepalive = NULL;\n\n        if (flags & MZ_ZIP_FLAG_WRITE_ALLOW_READING)\n            pZip->m_pRead = mz_zip_file_read_func;\n\n        pZip->m_pIO_opaque = pZip;\n\n        if (!mz_zip_writer_init_v2(pZip, 0, flags))\n            return MZ_FALSE;\n\n        pZip->m_pState->m_pFile = pFile;\n        pZip->m_pState->m_file_archive_start_ofs = MZ_FTELL64(pZip->m_pState->m_pFile);\n        pZip->m_zip_type = MZ_ZIP_TYPE_CFILE;\n\n        return MZ_TRUE;\n    }\n#endif /* #ifndef MINIZ_NO_STDIO */\n\n    mz_bool mz_zip_writer_init_from_reader_v2(mz_zip_archive *pZip, const char *pFilename, mz_uint flags)\n    {\n        mz_zip_internal_state *pState;\n\n        if ((!pZip) || (!pZip->m_pState) || (pZip->m_zip_mode != MZ_ZIP_MODE_READING))\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n\n        if (flags & MZ_ZIP_FLAG_WRITE_ZIP64)\n        {\n            /* We don't support converting a non-zip64 file to zip64 - this seems like more trouble than it's worth. (What about the existing 32-bit data descriptors that could follow the compressed data?) */\n            if (!pZip->m_pState->m_zip64)\n                return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n        }\n\n        /* No sense in trying to write to an archive that's already at the support max size */\n        if (pZip->m_pState->m_zip64)\n        {\n            if (pZip->m_total_files == MZ_UINT32_MAX)\n                return mz_zip_set_error(pZip, MZ_ZIP_TOO_MANY_FILES);\n        }\n        else\n        {\n            if (pZip->m_total_files == MZ_UINT16_MAX)\n                return mz_zip_set_error(pZip, MZ_ZIP_TOO_MANY_FILES);\n\n            if ((pZip->m_archive_size + MZ_ZIP_CENTRAL_DIR_HEADER_SIZE + MZ_ZIP_LOCAL_DIR_HEADER_SIZE) > MZ_UINT32_MAX)\n                return mz_zip_set_error(pZip, MZ_ZIP_FILE_TOO_LARGE);\n        }\n\n        pState = pZip->m_pState;\n\n        if (pState->m_pFile)\n        {\n#ifdef MINIZ_NO_STDIO\n            (void)pFilename;\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n#else\n            if (pZip->m_pIO_opaque != pZip)\n                return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n\n            if (pZip->m_zip_type == MZ_ZIP_TYPE_FILE &&\n                !(flags & MZ_ZIP_FLAG_READ_ALLOW_WRITING) )\n            {\n                if (!pFilename)\n                    return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n\n                /* Archive is being read from stdio and was originally opened only for reading. Try to reopen as writable. */\n                if (NULL == (pState->m_pFile = MZ_FREOPEN(pFilename, \"r+b\", pState->m_pFile)))\n                {\n                    /* The mz_zip_archive is now in a bogus state because pState->m_pFile is NULL, so just close it. */\n                    mz_zip_reader_end_internal(pZip, MZ_FALSE);\n                    return mz_zip_set_error(pZip, MZ_ZIP_FILE_OPEN_FAILED);\n                }\n            }\n\n            pZip->m_pWrite = mz_zip_file_write_func;\n            pZip->m_pNeeds_keepalive = NULL;\n#endif /* #ifdef MINIZ_NO_STDIO */\n        }\n        else if (pState->m_pMem)\n        {\n            /* Archive lives in a memory block. Assume it's from the heap that we can resize using the realloc callback. */\n            if (pZip->m_pIO_opaque != pZip)\n                return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n\n            pState->m_mem_capacity = pState->m_mem_size;\n            pZip->m_pWrite = mz_zip_heap_write_func;\n            pZip->m_pNeeds_keepalive = NULL;\n        }\n        /* Archive is being read via a user provided read function - make sure the user has specified a write function too. */\n        else if (!pZip->m_pWrite)\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n\n        /* Start writing new files at the archive's current central directory location. */\n        /* TODO: We could add a flag that lets the user start writing immediately AFTER the existing central dir - this would be safer. */\n        pZip->m_archive_size = pZip->m_central_directory_file_ofs;\n        pZip->m_central_directory_file_ofs = 0;\n\n        /* Clear the sorted central dir offsets, they aren't useful or maintained now. */\n        /* Even though we're now in write mode, files can still be extracted and verified, but file locates will be slow. */\n        /* TODO: We could easily maintain the sorted central directory offsets. */\n        mz_zip_array_clear(pZip, &pZip->m_pState->m_sorted_central_dir_offsets);\n\n        pZip->m_zip_mode = MZ_ZIP_MODE_WRITING;\n\n        return MZ_TRUE;\n    }\n\n    mz_bool mz_zip_writer_init_from_reader(mz_zip_archive *pZip, const char *pFilename)\n    {\n        return mz_zip_writer_init_from_reader_v2(pZip, pFilename, 0);\n    }\n\n    /* TODO: pArchive_name is a terrible name here! */\n    mz_bool mz_zip_writer_add_mem(mz_zip_archive *pZip, const char *pArchive_name, const void *pBuf, size_t buf_size, mz_uint level_and_flags)\n    {\n        return mz_zip_writer_add_mem_ex(pZip, pArchive_name, pBuf, buf_size, NULL, 0, level_and_flags, 0, 0);\n    }\n\n    typedef struct\n    {\n        mz_zip_archive *m_pZip;\n        mz_uint64 m_cur_archive_file_ofs;\n        mz_uint64 m_comp_size;\n    } mz_zip_writer_add_state;\n\n    static mz_bool mz_zip_writer_add_put_buf_callback(const void *pBuf, int len, void *pUser)\n    {\n        mz_zip_writer_add_state *pState = (mz_zip_writer_add_state *)pUser;\n        if ((int)pState->m_pZip->m_pWrite(pState->m_pZip->m_pIO_opaque, pState->m_cur_archive_file_ofs, pBuf, len) != len)\n            return MZ_FALSE;\n\n        pState->m_cur_archive_file_ofs += len;\n        pState->m_comp_size += len;\n        return MZ_TRUE;\n    }\n\n#define MZ_ZIP64_MAX_LOCAL_EXTRA_FIELD_SIZE (sizeof(mz_uint16) * 2 + sizeof(mz_uint64) * 2)\n#define MZ_ZIP64_MAX_CENTRAL_EXTRA_FIELD_SIZE (sizeof(mz_uint16) * 2 + sizeof(mz_uint64) * 3)\n    static mz_uint32 mz_zip_writer_create_zip64_extra_data(mz_uint8 *pBuf, mz_uint64 *pUncomp_size, mz_uint64 *pComp_size, mz_uint64 *pLocal_header_ofs)\n    {\n        mz_uint8 *pDst = pBuf;\n        mz_uint32 field_size = 0;\n\n        MZ_WRITE_LE16(pDst + 0, MZ_ZIP64_EXTENDED_INFORMATION_FIELD_HEADER_ID);\n        MZ_WRITE_LE16(pDst + 2, 0);\n        pDst += sizeof(mz_uint16) * 2;\n\n        if (pUncomp_size)\n        {\n            MZ_WRITE_LE64(pDst, *pUncomp_size);\n            pDst += sizeof(mz_uint64);\n            field_size += sizeof(mz_uint64);\n        }\n\n        if (pComp_size)\n        {\n            MZ_WRITE_LE64(pDst, *pComp_size);\n            pDst += sizeof(mz_uint64);\n            field_size += sizeof(mz_uint64);\n        }\n\n        if (pLocal_header_ofs)\n        {\n            MZ_WRITE_LE64(pDst, *pLocal_header_ofs);\n            pDst += sizeof(mz_uint64);\n            field_size += sizeof(mz_uint64);\n        }\n\n        MZ_WRITE_LE16(pBuf + 2, field_size);\n\n        return (mz_uint32)(pDst - pBuf);\n    }\n\n    static mz_bool mz_zip_writer_create_local_dir_header(mz_zip_archive *pZip, mz_uint8 *pDst, mz_uint16 filename_size, mz_uint16 extra_size, mz_uint64 uncomp_size, mz_uint64 comp_size, mz_uint32 uncomp_crc32, mz_uint16 method, mz_uint16 bit_flags, mz_uint16 dos_time, mz_uint16 dos_date)\n    {\n        (void)pZip;\n        memset(pDst, 0, MZ_ZIP_LOCAL_DIR_HEADER_SIZE);\n        MZ_WRITE_LE32(pDst + MZ_ZIP_LDH_SIG_OFS, MZ_ZIP_LOCAL_DIR_HEADER_SIG);\n        MZ_WRITE_LE16(pDst + MZ_ZIP_LDH_VERSION_NEEDED_OFS, method ? 20 : 0);\n        MZ_WRITE_LE16(pDst + MZ_ZIP_LDH_BIT_FLAG_OFS, bit_flags);\n        MZ_WRITE_LE16(pDst + MZ_ZIP_LDH_METHOD_OFS, method);\n        MZ_WRITE_LE16(pDst + MZ_ZIP_LDH_FILE_TIME_OFS, dos_time);\n        MZ_WRITE_LE16(pDst + MZ_ZIP_LDH_FILE_DATE_OFS, dos_date);\n        MZ_WRITE_LE32(pDst + MZ_ZIP_LDH_CRC32_OFS, uncomp_crc32);\n        MZ_WRITE_LE32(pDst + MZ_ZIP_LDH_COMPRESSED_SIZE_OFS, MZ_MIN(comp_size, MZ_UINT32_MAX));\n        MZ_WRITE_LE32(pDst + MZ_ZIP_LDH_DECOMPRESSED_SIZE_OFS, MZ_MIN(uncomp_size, MZ_UINT32_MAX));\n        MZ_WRITE_LE16(pDst + MZ_ZIP_LDH_FILENAME_LEN_OFS, filename_size);\n        MZ_WRITE_LE16(pDst + MZ_ZIP_LDH_EXTRA_LEN_OFS, extra_size);\n        return MZ_TRUE;\n    }\n\n    static mz_bool mz_zip_writer_create_central_dir_header(mz_zip_archive *pZip, mz_uint8 *pDst,\n                                                           mz_uint16 filename_size, mz_uint16 extra_size, mz_uint16 comment_size,\n                                                           mz_uint64 uncomp_size, mz_uint64 comp_size, mz_uint32 uncomp_crc32,\n                                                           mz_uint16 method, mz_uint16 bit_flags, mz_uint16 dos_time, mz_uint16 dos_date,\n                                                           mz_uint64 local_header_ofs, mz_uint32 ext_attributes)\n    {\n        (void)pZip;\n        memset(pDst, 0, MZ_ZIP_CENTRAL_DIR_HEADER_SIZE);\n        MZ_WRITE_LE32(pDst + MZ_ZIP_CDH_SIG_OFS, MZ_ZIP_CENTRAL_DIR_HEADER_SIG);\n        MZ_WRITE_LE16(pDst + MZ_ZIP_CDH_VERSION_NEEDED_OFS, method ? 20 : 0);\n        MZ_WRITE_LE16(pDst + MZ_ZIP_CDH_BIT_FLAG_OFS, bit_flags);\n        MZ_WRITE_LE16(pDst + MZ_ZIP_CDH_METHOD_OFS, method);\n        MZ_WRITE_LE16(pDst + MZ_ZIP_CDH_FILE_TIME_OFS, dos_time);\n        MZ_WRITE_LE16(pDst + MZ_ZIP_CDH_FILE_DATE_OFS, dos_date);\n        MZ_WRITE_LE32(pDst + MZ_ZIP_CDH_CRC32_OFS, uncomp_crc32);\n        MZ_WRITE_LE32(pDst + MZ_ZIP_CDH_COMPRESSED_SIZE_OFS, MZ_MIN(comp_size, MZ_UINT32_MAX));\n        MZ_WRITE_LE32(pDst + MZ_ZIP_CDH_DECOMPRESSED_SIZE_OFS, MZ_MIN(uncomp_size, MZ_UINT32_MAX));\n        MZ_WRITE_LE16(pDst + MZ_ZIP_CDH_FILENAME_LEN_OFS, filename_size);\n        MZ_WRITE_LE16(pDst + MZ_ZIP_CDH_EXTRA_LEN_OFS, extra_size);\n        MZ_WRITE_LE16(pDst + MZ_ZIP_CDH_COMMENT_LEN_OFS, comment_size);\n        MZ_WRITE_LE32(pDst + MZ_ZIP_CDH_EXTERNAL_ATTR_OFS, ext_attributes);\n        MZ_WRITE_LE32(pDst + MZ_ZIP_CDH_LOCAL_HEADER_OFS, MZ_MIN(local_header_ofs, MZ_UINT32_MAX));\n        return MZ_TRUE;\n    }\n\n    static mz_bool mz_zip_writer_add_to_central_dir(mz_zip_archive *pZip, const char *pFilename, mz_uint16 filename_size,\n                                                    const void *pExtra, mz_uint16 extra_size, const void *pComment, mz_uint16 comment_size,\n                                                    mz_uint64 uncomp_size, mz_uint64 comp_size, mz_uint32 uncomp_crc32,\n                                                    mz_uint16 method, mz_uint16 bit_flags, mz_uint16 dos_time, mz_uint16 dos_date,\n                                                    mz_uint64 local_header_ofs, mz_uint32 ext_attributes,\n                                                    const char *user_extra_data, mz_uint user_extra_data_len)\n    {\n        mz_zip_internal_state *pState = pZip->m_pState;\n        mz_uint32 central_dir_ofs = (mz_uint32)pState->m_central_dir.m_size;\n        size_t orig_central_dir_size = pState->m_central_dir.m_size;\n        mz_uint8 central_dir_header[MZ_ZIP_CENTRAL_DIR_HEADER_SIZE];\n\n        if (!pZip->m_pState->m_zip64)\n        {\n            if (local_header_ofs > 0xFFFFFFFF)\n                return mz_zip_set_error(pZip, MZ_ZIP_FILE_TOO_LARGE);\n        }\n\n        /* miniz doesn't support central dirs >= MZ_UINT32_MAX bytes yet */\n        if (((mz_uint64)pState->m_central_dir.m_size + MZ_ZIP_CENTRAL_DIR_HEADER_SIZE + filename_size + extra_size + user_extra_data_len + comment_size) >= MZ_UINT32_MAX)\n            return mz_zip_set_error(pZip, MZ_ZIP_UNSUPPORTED_CDIR_SIZE);\n\n        if (!mz_zip_writer_create_central_dir_header(pZip, central_dir_header, filename_size, (mz_uint16)(extra_size + user_extra_data_len), comment_size, uncomp_size, comp_size, uncomp_crc32, method, bit_flags, dos_time, dos_date, local_header_ofs, ext_attributes))\n            return mz_zip_set_error(pZip, MZ_ZIP_INTERNAL_ERROR);\n\n        if ((!mz_zip_array_push_back(pZip, &pState->m_central_dir, central_dir_header, MZ_ZIP_CENTRAL_DIR_HEADER_SIZE)) ||\n            (!mz_zip_array_push_back(pZip, &pState->m_central_dir, pFilename, filename_size)) ||\n            (!mz_zip_array_push_back(pZip, &pState->m_central_dir, pExtra, extra_size)) ||\n            (!mz_zip_array_push_back(pZip, &pState->m_central_dir, user_extra_data, user_extra_data_len)) ||\n            (!mz_zip_array_push_back(pZip, &pState->m_central_dir, pComment, comment_size)) ||\n            (!mz_zip_array_push_back(pZip, &pState->m_central_dir_offsets, &central_dir_ofs, 1)))\n        {\n            /* Try to resize the central directory array back into its original state. */\n            mz_zip_array_resize(pZip, &pState->m_central_dir, orig_central_dir_size, MZ_FALSE);\n            return mz_zip_set_error(pZip, MZ_ZIP_ALLOC_FAILED);\n        }\n\n        return MZ_TRUE;\n    }\n\n    static mz_bool mz_zip_writer_validate_archive_name(const char *pArchive_name)\n    {\n        /* Basic ZIP archive filename validity checks: Valid filenames cannot start with a forward slash, cannot contain a drive letter, and cannot use DOS-style backward slashes. */\n        if (*pArchive_name == '/')\n            return MZ_FALSE;\n\n        /* Making sure the name does not contain drive letters or DOS style backward slashes is the responsibility of the program using miniz*/\n\n        return MZ_TRUE;\n    }\n\n    static mz_uint mz_zip_writer_compute_padding_needed_for_file_alignment(mz_zip_archive *pZip)\n    {\n        mz_uint32 n;\n        if (!pZip->m_file_offset_alignment)\n            return 0;\n        n = (mz_uint32)(pZip->m_archive_size & (pZip->m_file_offset_alignment - 1));\n        return (mz_uint)((pZip->m_file_offset_alignment - n) & (pZip->m_file_offset_alignment - 1));\n    }\n\n    static mz_bool mz_zip_writer_write_zeros(mz_zip_archive *pZip, mz_uint64 cur_file_ofs, mz_uint32 n)\n    {\n        char buf[4096];\n        memset(buf, 0, MZ_MIN(sizeof(buf), n));\n        while (n)\n        {\n            mz_uint32 s = MZ_MIN(sizeof(buf), n);\n            if (pZip->m_pWrite(pZip->m_pIO_opaque, cur_file_ofs, buf, s) != s)\n                return mz_zip_set_error(pZip, MZ_ZIP_FILE_WRITE_FAILED);\n\n            cur_file_ofs += s;\n            n -= s;\n        }\n        return MZ_TRUE;\n    }\n\n    mz_bool mz_zip_writer_add_mem_ex(mz_zip_archive *pZip, const char *pArchive_name, const void *pBuf, size_t buf_size, const void *pComment, mz_uint16 comment_size, mz_uint level_and_flags,\n                                     mz_uint64 uncomp_size, mz_uint32 uncomp_crc32)\n    {\n        return mz_zip_writer_add_mem_ex_v2(pZip, pArchive_name, pBuf, buf_size, pComment, comment_size, level_and_flags, uncomp_size, uncomp_crc32, NULL, NULL, 0, NULL, 0);\n    }\n\n    mz_bool mz_zip_writer_add_mem_ex_v2(mz_zip_archive *pZip, const char *pArchive_name, const void *pBuf, size_t buf_size, const void *pComment, mz_uint16 comment_size,\n                                        mz_uint level_and_flags, mz_uint64 uncomp_size, mz_uint32 uncomp_crc32, MZ_TIME_T *last_modified,\n                                        const char *user_extra_data, mz_uint user_extra_data_len, const char *user_extra_data_central, mz_uint user_extra_data_central_len)\n    {\n        mz_uint16 method = 0, dos_time = 0, dos_date = 0;\n        mz_uint level, ext_attributes = 0, num_alignment_padding_bytes;\n        mz_uint64 local_dir_header_ofs = pZip->m_archive_size, cur_archive_file_ofs = pZip->m_archive_size, comp_size = 0;\n        size_t archive_name_size;\n        mz_uint8 local_dir_header[MZ_ZIP_LOCAL_DIR_HEADER_SIZE];\n        tdefl_compressor *pComp = NULL;\n        mz_bool store_data_uncompressed;\n        mz_zip_internal_state *pState;\n        mz_uint8 *pExtra_data = NULL;\n        mz_uint32 extra_size = 0;\n        mz_uint8 extra_data[MZ_ZIP64_MAX_CENTRAL_EXTRA_FIELD_SIZE];\n        mz_uint16 bit_flags = 0;\n\n        if ((int)level_and_flags < 0)\n            level_and_flags = MZ_DEFAULT_LEVEL;\n\n        if (uncomp_size || (buf_size && !(level_and_flags & MZ_ZIP_FLAG_COMPRESSED_DATA)))\n            bit_flags |= MZ_ZIP_LDH_BIT_FLAG_HAS_LOCATOR;\n\n        if (!(level_and_flags & MZ_ZIP_FLAG_ASCII_FILENAME))\n            bit_flags |= MZ_ZIP_GENERAL_PURPOSE_BIT_FLAG_UTF8;\n\n        level = level_and_flags & 0xF;\n        store_data_uncompressed = ((!level) || (level_and_flags & MZ_ZIP_FLAG_COMPRESSED_DATA));\n\n        if ((!pZip) || (!pZip->m_pState) || (pZip->m_zip_mode != MZ_ZIP_MODE_WRITING) || ((buf_size) && (!pBuf)) || (!pArchive_name) || ((comment_size) && (!pComment)) || (level > MZ_UBER_COMPRESSION))\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n\n        pState = pZip->m_pState;\n\n        if (pState->m_zip64)\n        {\n            if (pZip->m_total_files == MZ_UINT32_MAX)\n                return mz_zip_set_error(pZip, MZ_ZIP_TOO_MANY_FILES);\n        }\n        else\n        {\n            if (pZip->m_total_files == MZ_UINT16_MAX)\n            {\n                pState->m_zip64 = MZ_TRUE;\n                /*return mz_zip_set_error(pZip, MZ_ZIP_TOO_MANY_FILES); */\n            }\n            if (((mz_uint64)buf_size > 0xFFFFFFFF) || (uncomp_size > 0xFFFFFFFF))\n            {\n                pState->m_zip64 = MZ_TRUE;\n                /*return mz_zip_set_error(pZip, MZ_ZIP_ARCHIVE_TOO_LARGE); */\n            }\n        }\n\n        if ((!(level_and_flags & MZ_ZIP_FLAG_COMPRESSED_DATA)) && (uncomp_size))\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n\n        if (!mz_zip_writer_validate_archive_name(pArchive_name))\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_FILENAME);\n\n#ifndef MINIZ_NO_TIME\n        if (last_modified != NULL)\n        {\n            mz_zip_time_t_to_dos_time(*last_modified, &dos_time, &dos_date);\n        }\n        else\n        {\n            MZ_TIME_T cur_time;\n            time(&cur_time);\n            mz_zip_time_t_to_dos_time(cur_time, &dos_time, &dos_date);\n        }\n#else\n        (void)last_modified;\n#endif /* #ifndef MINIZ_NO_TIME */\n\n        if (!(level_and_flags & MZ_ZIP_FLAG_COMPRESSED_DATA))\n        {\n            uncomp_crc32 = (mz_uint32)mz_crc32(MZ_CRC32_INIT, (const mz_uint8 *)pBuf, buf_size);\n            uncomp_size = buf_size;\n            if (uncomp_size <= 3)\n            {\n                level = 0;\n                store_data_uncompressed = MZ_TRUE;\n            }\n        }\n\n        archive_name_size = strlen(pArchive_name);\n        if (archive_name_size > MZ_UINT16_MAX)\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_FILENAME);\n\n        num_alignment_padding_bytes = mz_zip_writer_compute_padding_needed_for_file_alignment(pZip);\n\n        /* miniz doesn't support central dirs >= MZ_UINT32_MAX bytes yet */\n        if (((mz_uint64)pState->m_central_dir.m_size + MZ_ZIP_CENTRAL_DIR_HEADER_SIZE + archive_name_size + MZ_ZIP64_MAX_CENTRAL_EXTRA_FIELD_SIZE + comment_size) >= MZ_UINT32_MAX)\n            return mz_zip_set_error(pZip, MZ_ZIP_UNSUPPORTED_CDIR_SIZE);\n\n        if (!pState->m_zip64)\n        {\n            /* Bail early if the archive would obviously become too large */\n            if ((pZip->m_archive_size + num_alignment_padding_bytes + MZ_ZIP_LOCAL_DIR_HEADER_SIZE + archive_name_size + MZ_ZIP_CENTRAL_DIR_HEADER_SIZE + archive_name_size + comment_size + user_extra_data_len +\n                 pState->m_central_dir.m_size + MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIZE + user_extra_data_central_len + MZ_ZIP_DATA_DESCRIPTER_SIZE32) > 0xFFFFFFFF)\n            {\n                pState->m_zip64 = MZ_TRUE;\n                /*return mz_zip_set_error(pZip, MZ_ZIP_ARCHIVE_TOO_LARGE); */\n            }\n        }\n\n        if ((archive_name_size) && (pArchive_name[archive_name_size - 1] == '/'))\n        {\n            /* Set DOS Subdirectory attribute bit. */\n            ext_attributes |= MZ_ZIP_DOS_DIR_ATTRIBUTE_BITFLAG;\n\n            /* Subdirectories cannot contain data. */\n            if ((buf_size) || (uncomp_size))\n                return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n        }\n\n        /* Try to do any allocations before writing to the archive, so if an allocation fails the file remains unmodified. (A good idea if we're doing an in-place modification.) */\n        if ((!mz_zip_array_ensure_room(pZip, &pState->m_central_dir, MZ_ZIP_CENTRAL_DIR_HEADER_SIZE + archive_name_size + comment_size + (pState->m_zip64 ? MZ_ZIP64_MAX_CENTRAL_EXTRA_FIELD_SIZE : 0))) || (!mz_zip_array_ensure_room(pZip, &pState->m_central_dir_offsets, 1)))\n            return mz_zip_set_error(pZip, MZ_ZIP_ALLOC_FAILED);\n\n        if ((!store_data_uncompressed) && (buf_size))\n        {\n            if (NULL == (pComp = (tdefl_compressor *)pZip->m_pAlloc(pZip->m_pAlloc_opaque, 1, sizeof(tdefl_compressor))))\n                return mz_zip_set_error(pZip, MZ_ZIP_ALLOC_FAILED);\n        }\n\n        if (!mz_zip_writer_write_zeros(pZip, cur_archive_file_ofs, num_alignment_padding_bytes))\n        {\n            pZip->m_pFree(pZip->m_pAlloc_opaque, pComp);\n            return MZ_FALSE;\n        }\n\n        local_dir_header_ofs += num_alignment_padding_bytes;\n        if (pZip->m_file_offset_alignment)\n        {\n            MZ_ASSERT((local_dir_header_ofs & (pZip->m_file_offset_alignment - 1)) == 0);\n        }\n        cur_archive_file_ofs += num_alignment_padding_bytes;\n\n        MZ_CLEAR_ARR(local_dir_header);\n\n        if (!store_data_uncompressed || (level_and_flags & MZ_ZIP_FLAG_COMPRESSED_DATA))\n        {\n            method = MZ_DEFLATED;\n        }\n\n        if (pState->m_zip64)\n        {\n            if (uncomp_size >= MZ_UINT32_MAX || local_dir_header_ofs >= MZ_UINT32_MAX)\n            {\n                pExtra_data = extra_data;\n                extra_size = mz_zip_writer_create_zip64_extra_data(extra_data, (uncomp_size >= MZ_UINT32_MAX) ? &uncomp_size : NULL,\n                                                                   (uncomp_size >= MZ_UINT32_MAX) ? &comp_size : NULL, (local_dir_header_ofs >= MZ_UINT32_MAX) ? &local_dir_header_ofs : NULL);\n            }\n\n            if (!mz_zip_writer_create_local_dir_header(pZip, local_dir_header, (mz_uint16)archive_name_size, (mz_uint16)(extra_size + user_extra_data_len), 0, 0, 0, method, bit_flags, dos_time, dos_date))\n                return mz_zip_set_error(pZip, MZ_ZIP_INTERNAL_ERROR);\n\n            if (pZip->m_pWrite(pZip->m_pIO_opaque, local_dir_header_ofs, local_dir_header, sizeof(local_dir_header)) != sizeof(local_dir_header))\n                return mz_zip_set_error(pZip, MZ_ZIP_FILE_WRITE_FAILED);\n\n            cur_archive_file_ofs += sizeof(local_dir_header);\n\n            if (pZip->m_pWrite(pZip->m_pIO_opaque, cur_archive_file_ofs, pArchive_name, archive_name_size) != archive_name_size)\n            {\n                pZip->m_pFree(pZip->m_pAlloc_opaque, pComp);\n                return mz_zip_set_error(pZip, MZ_ZIP_FILE_WRITE_FAILED);\n            }\n            cur_archive_file_ofs += archive_name_size;\n\n            if (pExtra_data != NULL)\n            {\n                if (pZip->m_pWrite(pZip->m_pIO_opaque, cur_archive_file_ofs, extra_data, extra_size) != extra_size)\n                    return mz_zip_set_error(pZip, MZ_ZIP_FILE_WRITE_FAILED);\n\n                cur_archive_file_ofs += extra_size;\n            }\n        }\n        else\n        {\n            if ((comp_size > MZ_UINT32_MAX) || (cur_archive_file_ofs > MZ_UINT32_MAX))\n                return mz_zip_set_error(pZip, MZ_ZIP_ARCHIVE_TOO_LARGE);\n            if (!mz_zip_writer_create_local_dir_header(pZip, local_dir_header, (mz_uint16)archive_name_size, (mz_uint16)user_extra_data_len, 0, 0, 0, method, bit_flags, dos_time, dos_date))\n                return mz_zip_set_error(pZip, MZ_ZIP_INTERNAL_ERROR);\n\n            if (pZip->m_pWrite(pZip->m_pIO_opaque, local_dir_header_ofs, local_dir_header, sizeof(local_dir_header)) != sizeof(local_dir_header))\n                return mz_zip_set_error(pZip, MZ_ZIP_FILE_WRITE_FAILED);\n\n            cur_archive_file_ofs += sizeof(local_dir_header);\n\n            if (pZip->m_pWrite(pZip->m_pIO_opaque, cur_archive_file_ofs, pArchive_name, archive_name_size) != archive_name_size)\n            {\n                pZip->m_pFree(pZip->m_pAlloc_opaque, pComp);\n                return mz_zip_set_error(pZip, MZ_ZIP_FILE_WRITE_FAILED);\n            }\n            cur_archive_file_ofs += archive_name_size;\n        }\n\n        if (user_extra_data_len > 0)\n        {\n            if (pZip->m_pWrite(pZip->m_pIO_opaque, cur_archive_file_ofs, user_extra_data, user_extra_data_len) != user_extra_data_len)\n                return mz_zip_set_error(pZip, MZ_ZIP_FILE_WRITE_FAILED);\n\n            cur_archive_file_ofs += user_extra_data_len;\n        }\n\n        if (store_data_uncompressed)\n        {\n            if (pZip->m_pWrite(pZip->m_pIO_opaque, cur_archive_file_ofs, pBuf, buf_size) != buf_size)\n            {\n                pZip->m_pFree(pZip->m_pAlloc_opaque, pComp);\n                return mz_zip_set_error(pZip, MZ_ZIP_FILE_WRITE_FAILED);\n            }\n\n            cur_archive_file_ofs += buf_size;\n            comp_size = buf_size;\n        }\n        else if (buf_size)\n        {\n            mz_zip_writer_add_state state;\n\n            state.m_pZip = pZip;\n            state.m_cur_archive_file_ofs = cur_archive_file_ofs;\n            state.m_comp_size = 0;\n\n            if ((tdefl_init(pComp, mz_zip_writer_add_put_buf_callback, &state, tdefl_create_comp_flags_from_zip_params(level, -15, MZ_DEFAULT_STRATEGY)) != TDEFL_STATUS_OKAY) ||\n                (tdefl_compress_buffer(pComp, pBuf, buf_size, TDEFL_FINISH) != TDEFL_STATUS_DONE))\n            {\n                pZip->m_pFree(pZip->m_pAlloc_opaque, pComp);\n                return mz_zip_set_error(pZip, MZ_ZIP_COMPRESSION_FAILED);\n            }\n\n            comp_size = state.m_comp_size;\n            cur_archive_file_ofs = state.m_cur_archive_file_ofs;\n        }\n\n        pZip->m_pFree(pZip->m_pAlloc_opaque, pComp);\n        pComp = NULL;\n\n        if (uncomp_size)\n        {\n            mz_uint8 local_dir_footer[MZ_ZIP_DATA_DESCRIPTER_SIZE64];\n            mz_uint32 local_dir_footer_size = MZ_ZIP_DATA_DESCRIPTER_SIZE32;\n\n            MZ_ASSERT(bit_flags & MZ_ZIP_LDH_BIT_FLAG_HAS_LOCATOR);\n\n            MZ_WRITE_LE32(local_dir_footer + 0, MZ_ZIP_DATA_DESCRIPTOR_ID);\n            MZ_WRITE_LE32(local_dir_footer + 4, uncomp_crc32);\n            if (pExtra_data == NULL)\n            {\n                if (comp_size > MZ_UINT32_MAX)\n                    return mz_zip_set_error(pZip, MZ_ZIP_ARCHIVE_TOO_LARGE);\n\n                MZ_WRITE_LE32(local_dir_footer + 8, comp_size);\n                MZ_WRITE_LE32(local_dir_footer + 12, uncomp_size);\n            }\n            else\n            {\n                MZ_WRITE_LE64(local_dir_footer + 8, comp_size);\n                MZ_WRITE_LE64(local_dir_footer + 16, uncomp_size);\n                local_dir_footer_size = MZ_ZIP_DATA_DESCRIPTER_SIZE64;\n            }\n\n            if (pZip->m_pWrite(pZip->m_pIO_opaque, cur_archive_file_ofs, local_dir_footer, local_dir_footer_size) != local_dir_footer_size)\n                return MZ_FALSE;\n\n            cur_archive_file_ofs += local_dir_footer_size;\n        }\n\n        if (pExtra_data != NULL)\n        {\n            extra_size = mz_zip_writer_create_zip64_extra_data(extra_data, (uncomp_size >= MZ_UINT32_MAX) ? &uncomp_size : NULL,\n                                                               (uncomp_size >= MZ_UINT32_MAX) ? &comp_size : NULL, (local_dir_header_ofs >= MZ_UINT32_MAX) ? &local_dir_header_ofs : NULL);\n        }\n\n        if (!mz_zip_writer_add_to_central_dir(pZip, pArchive_name, (mz_uint16)archive_name_size, pExtra_data, (mz_uint16)extra_size, pComment,\n                                              comment_size, uncomp_size, comp_size, uncomp_crc32, method, bit_flags, dos_time, dos_date, local_dir_header_ofs, ext_attributes,\n                                              user_extra_data_central, user_extra_data_central_len))\n            return MZ_FALSE;\n\n        pZip->m_total_files++;\n        pZip->m_archive_size = cur_archive_file_ofs;\n\n        return MZ_TRUE;\n    }\n\n    mz_bool mz_zip_writer_add_read_buf_callback(mz_zip_archive *pZip, const char *pArchive_name, mz_file_read_func read_callback, void *callback_opaque, mz_uint64 max_size, const MZ_TIME_T *pFile_time, const void *pComment, mz_uint16 comment_size, mz_uint level_and_flags,\n                                                const char *user_extra_data, mz_uint user_extra_data_len, const char *user_extra_data_central, mz_uint user_extra_data_central_len)\n    {\n        mz_uint16 gen_flags;\n        mz_uint uncomp_crc32 = MZ_CRC32_INIT, level, num_alignment_padding_bytes;\n        mz_uint16 method = 0, dos_time = 0, dos_date = 0, ext_attributes = 0;\n        mz_uint64 local_dir_header_ofs, cur_archive_file_ofs = pZip->m_archive_size, uncomp_size = 0, comp_size = 0;\n        size_t archive_name_size;\n        mz_uint8 local_dir_header[MZ_ZIP_LOCAL_DIR_HEADER_SIZE];\n        mz_uint8 *pExtra_data = NULL;\n        mz_uint32 extra_size = 0;\n        mz_uint8 extra_data[MZ_ZIP64_MAX_CENTRAL_EXTRA_FIELD_SIZE];\n        mz_zip_internal_state *pState;\n        mz_uint64 file_ofs = 0, cur_archive_header_file_ofs;\n\n        if ((int)level_and_flags < 0)\n            level_and_flags = MZ_DEFAULT_LEVEL;\n        level = level_and_flags & 0xF;\n\n        gen_flags = (level_and_flags & MZ_ZIP_FLAG_WRITE_HEADER_SET_SIZE) ? 0 : MZ_ZIP_LDH_BIT_FLAG_HAS_LOCATOR;\n\n        if (!(level_and_flags & MZ_ZIP_FLAG_ASCII_FILENAME))\n            gen_flags |= MZ_ZIP_GENERAL_PURPOSE_BIT_FLAG_UTF8;\n\n        /* Sanity checks */\n        if ((!pZip) || (!pZip->m_pState) || (pZip->m_zip_mode != MZ_ZIP_MODE_WRITING) || (!pArchive_name) || ((comment_size) && (!pComment)) || (level > MZ_UBER_COMPRESSION))\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n\n        pState = pZip->m_pState;\n\n        if ((!pState->m_zip64) && (max_size > MZ_UINT32_MAX))\n        {\n            /* Source file is too large for non-zip64 */\n            /*return mz_zip_set_error(pZip, MZ_ZIP_ARCHIVE_TOO_LARGE); */\n            pState->m_zip64 = MZ_TRUE;\n        }\n\n        /* We could support this, but why? */\n        if (level_and_flags & MZ_ZIP_FLAG_COMPRESSED_DATA)\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n\n        if (!mz_zip_writer_validate_archive_name(pArchive_name))\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_FILENAME);\n\n        if (pState->m_zip64)\n        {\n            if (pZip->m_total_files == MZ_UINT32_MAX)\n                return mz_zip_set_error(pZip, MZ_ZIP_TOO_MANY_FILES);\n        }\n        else\n        {\n            if (pZip->m_total_files == MZ_UINT16_MAX)\n            {\n                pState->m_zip64 = MZ_TRUE;\n                /*return mz_zip_set_error(pZip, MZ_ZIP_TOO_MANY_FILES); */\n            }\n        }\n\n        archive_name_size = strlen(pArchive_name);\n        if (archive_name_size > MZ_UINT16_MAX)\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_FILENAME);\n\n        num_alignment_padding_bytes = mz_zip_writer_compute_padding_needed_for_file_alignment(pZip);\n\n        /* miniz doesn't support central dirs >= MZ_UINT32_MAX bytes yet */\n        if (((mz_uint64)pState->m_central_dir.m_size + MZ_ZIP_CENTRAL_DIR_HEADER_SIZE + archive_name_size + MZ_ZIP64_MAX_CENTRAL_EXTRA_FIELD_SIZE + comment_size) >= MZ_UINT32_MAX)\n            return mz_zip_set_error(pZip, MZ_ZIP_UNSUPPORTED_CDIR_SIZE);\n\n        if (!pState->m_zip64)\n        {\n            /* Bail early if the archive would obviously become too large */\n            if ((pZip->m_archive_size + num_alignment_padding_bytes + MZ_ZIP_LOCAL_DIR_HEADER_SIZE + archive_name_size + MZ_ZIP_CENTRAL_DIR_HEADER_SIZE + archive_name_size + comment_size + user_extra_data_len + pState->m_central_dir.m_size + MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIZE + 1024 + MZ_ZIP_DATA_DESCRIPTER_SIZE32 + user_extra_data_central_len) > 0xFFFFFFFF)\n            {\n                pState->m_zip64 = MZ_TRUE;\n                /*return mz_zip_set_error(pZip, MZ_ZIP_ARCHIVE_TOO_LARGE); */\n            }\n        }\n\n#ifndef MINIZ_NO_TIME\n        if (pFile_time)\n        {\n            mz_zip_time_t_to_dos_time(*pFile_time, &dos_time, &dos_date);\n        }\n#else\n        (void)pFile_time;\n#endif\n\n        if (max_size <= 3)\n            level = 0;\n\n        if (!mz_zip_writer_write_zeros(pZip, cur_archive_file_ofs, num_alignment_padding_bytes))\n        {\n            return mz_zip_set_error(pZip, MZ_ZIP_FILE_WRITE_FAILED);\n        }\n\n        cur_archive_file_ofs += num_alignment_padding_bytes;\n        local_dir_header_ofs = cur_archive_file_ofs;\n\n        if (pZip->m_file_offset_alignment)\n        {\n            MZ_ASSERT((cur_archive_file_ofs & (pZip->m_file_offset_alignment - 1)) == 0);\n        }\n\n        if (max_size && level)\n        {\n            method = MZ_DEFLATED;\n        }\n\n        MZ_CLEAR_ARR(local_dir_header);\n        if (pState->m_zip64)\n        {\n            if (max_size >= MZ_UINT32_MAX || local_dir_header_ofs >= MZ_UINT32_MAX)\n            {\n                pExtra_data = extra_data;\n                if (level_and_flags & MZ_ZIP_FLAG_WRITE_HEADER_SET_SIZE)\n                    extra_size = mz_zip_writer_create_zip64_extra_data(extra_data, (max_size >= MZ_UINT32_MAX) ? &uncomp_size : NULL,\n                                                                       (max_size >= MZ_UINT32_MAX) ? &comp_size : NULL,\n                                                                       (local_dir_header_ofs >= MZ_UINT32_MAX) ? &local_dir_header_ofs : NULL);\n                else\n                    extra_size = mz_zip_writer_create_zip64_extra_data(extra_data, NULL,\n                                                                       NULL,\n                                                                       (local_dir_header_ofs >= MZ_UINT32_MAX) ? &local_dir_header_ofs : NULL);\n            }\n\n            if (!mz_zip_writer_create_local_dir_header(pZip, local_dir_header, (mz_uint16)archive_name_size, (mz_uint16)(extra_size + user_extra_data_len), 0, 0, 0, method, gen_flags, dos_time, dos_date))\n                return mz_zip_set_error(pZip, MZ_ZIP_INTERNAL_ERROR);\n\n            if (pZip->m_pWrite(pZip->m_pIO_opaque, cur_archive_file_ofs, local_dir_header, sizeof(local_dir_header)) != sizeof(local_dir_header))\n                return mz_zip_set_error(pZip, MZ_ZIP_FILE_WRITE_FAILED);\n\n            cur_archive_file_ofs += sizeof(local_dir_header);\n\n            if (pZip->m_pWrite(pZip->m_pIO_opaque, cur_archive_file_ofs, pArchive_name, archive_name_size) != archive_name_size)\n            {\n                return mz_zip_set_error(pZip, MZ_ZIP_FILE_WRITE_FAILED);\n            }\n\n            cur_archive_file_ofs += archive_name_size;\n\n            if (pZip->m_pWrite(pZip->m_pIO_opaque, cur_archive_file_ofs, extra_data, extra_size) != extra_size)\n                return mz_zip_set_error(pZip, MZ_ZIP_FILE_WRITE_FAILED);\n\n            cur_archive_file_ofs += extra_size;\n        }\n        else\n        {\n            if ((comp_size > MZ_UINT32_MAX) || (cur_archive_file_ofs > MZ_UINT32_MAX))\n                return mz_zip_set_error(pZip, MZ_ZIP_ARCHIVE_TOO_LARGE);\n            if (!mz_zip_writer_create_local_dir_header(pZip, local_dir_header, (mz_uint16)archive_name_size, (mz_uint16)user_extra_data_len, 0, 0, 0, method, gen_flags, dos_time, dos_date))\n                return mz_zip_set_error(pZip, MZ_ZIP_INTERNAL_ERROR);\n\n            if (pZip->m_pWrite(pZip->m_pIO_opaque, cur_archive_file_ofs, local_dir_header, sizeof(local_dir_header)) != sizeof(local_dir_header))\n                return mz_zip_set_error(pZip, MZ_ZIP_FILE_WRITE_FAILED);\n\n            cur_archive_file_ofs += sizeof(local_dir_header);\n\n            if (pZip->m_pWrite(pZip->m_pIO_opaque, cur_archive_file_ofs, pArchive_name, archive_name_size) != archive_name_size)\n            {\n                return mz_zip_set_error(pZip, MZ_ZIP_FILE_WRITE_FAILED);\n            }\n\n            cur_archive_file_ofs += archive_name_size;\n        }\n\n        if (user_extra_data_len > 0)\n        {\n            if (pZip->m_pWrite(pZip->m_pIO_opaque, cur_archive_file_ofs, user_extra_data, user_extra_data_len) != user_extra_data_len)\n                return mz_zip_set_error(pZip, MZ_ZIP_FILE_WRITE_FAILED);\n\n            cur_archive_file_ofs += user_extra_data_len;\n        }\n\n        if (max_size)\n        {\n            void *pRead_buf = pZip->m_pAlloc(pZip->m_pAlloc_opaque, 1, MZ_ZIP_MAX_IO_BUF_SIZE);\n            if (!pRead_buf)\n            {\n                return mz_zip_set_error(pZip, MZ_ZIP_ALLOC_FAILED);\n            }\n\n            if (!level)\n            {\n                while (1)\n                {\n                    size_t n = read_callback(callback_opaque, file_ofs, pRead_buf, MZ_ZIP_MAX_IO_BUF_SIZE);\n                    if (n == 0)\n                        break;\n\n                    if ((n > MZ_ZIP_MAX_IO_BUF_SIZE) || (file_ofs + n > max_size))\n                    {\n                        pZip->m_pFree(pZip->m_pAlloc_opaque, pRead_buf);\n                        return mz_zip_set_error(pZip, MZ_ZIP_FILE_READ_FAILED);\n                    }\n                    if (pZip->m_pWrite(pZip->m_pIO_opaque, cur_archive_file_ofs, pRead_buf, n) != n)\n                    {\n                        pZip->m_pFree(pZip->m_pAlloc_opaque, pRead_buf);\n                        return mz_zip_set_error(pZip, MZ_ZIP_FILE_WRITE_FAILED);\n                    }\n                    file_ofs += n;\n                    uncomp_crc32 = (mz_uint32)mz_crc32(uncomp_crc32, (const mz_uint8 *)pRead_buf, n);\n                    cur_archive_file_ofs += n;\n                }\n                uncomp_size = file_ofs;\n                comp_size = uncomp_size;\n            }\n            else\n            {\n                mz_bool result = MZ_FALSE;\n                mz_zip_writer_add_state state;\n                tdefl_compressor *pComp = (tdefl_compressor *)pZip->m_pAlloc(pZip->m_pAlloc_opaque, 1, sizeof(tdefl_compressor));\n                if (!pComp)\n                {\n                    pZip->m_pFree(pZip->m_pAlloc_opaque, pRead_buf);\n                    return mz_zip_set_error(pZip, MZ_ZIP_ALLOC_FAILED);\n                }\n\n                state.m_pZip = pZip;\n                state.m_cur_archive_file_ofs = cur_archive_file_ofs;\n                state.m_comp_size = 0;\n\n                if (tdefl_init(pComp, mz_zip_writer_add_put_buf_callback, &state, tdefl_create_comp_flags_from_zip_params(level, -15, MZ_DEFAULT_STRATEGY)) != TDEFL_STATUS_OKAY)\n                {\n                    pZip->m_pFree(pZip->m_pAlloc_opaque, pComp);\n                    pZip->m_pFree(pZip->m_pAlloc_opaque, pRead_buf);\n                    return mz_zip_set_error(pZip, MZ_ZIP_INTERNAL_ERROR);\n                }\n\n                for (;;)\n                {\n                    tdefl_status status;\n                    tdefl_flush flush = TDEFL_NO_FLUSH;\n\n                    size_t n = read_callback(callback_opaque, file_ofs, pRead_buf, MZ_ZIP_MAX_IO_BUF_SIZE);\n                    if ((n > MZ_ZIP_MAX_IO_BUF_SIZE) || (file_ofs + n > max_size))\n                    {\n                        mz_zip_set_error(pZip, MZ_ZIP_FILE_READ_FAILED);\n                        break;\n                    }\n\n                    file_ofs += n;\n                    uncomp_crc32 = (mz_uint32)mz_crc32(uncomp_crc32, (const mz_uint8 *)pRead_buf, n);\n\n                    if (pZip->m_pNeeds_keepalive != NULL && pZip->m_pNeeds_keepalive(pZip->m_pIO_opaque))\n                        flush = TDEFL_FULL_FLUSH;\n\n                    if (n == 0)\n                        flush = TDEFL_FINISH;\n\n                    status = tdefl_compress_buffer(pComp, pRead_buf, n, flush);\n                    if (status == TDEFL_STATUS_DONE)\n                    {\n                        result = MZ_TRUE;\n                        break;\n                    }\n                    else if (status != TDEFL_STATUS_OKAY)\n                    {\n                        mz_zip_set_error(pZip, MZ_ZIP_COMPRESSION_FAILED);\n                        break;\n                    }\n                }\n\n                pZip->m_pFree(pZip->m_pAlloc_opaque, pComp);\n\n                if (!result)\n                {\n                    pZip->m_pFree(pZip->m_pAlloc_opaque, pRead_buf);\n                    return MZ_FALSE;\n                }\n\n                uncomp_size = file_ofs;\n                comp_size = state.m_comp_size;\n                cur_archive_file_ofs = state.m_cur_archive_file_ofs;\n            }\n\n            pZip->m_pFree(pZip->m_pAlloc_opaque, pRead_buf);\n        }\n\n        if (!(level_and_flags & MZ_ZIP_FLAG_WRITE_HEADER_SET_SIZE))\n        {\n            mz_uint8 local_dir_footer[MZ_ZIP_DATA_DESCRIPTER_SIZE64];\n            mz_uint32 local_dir_footer_size = MZ_ZIP_DATA_DESCRIPTER_SIZE32;\n\n            MZ_WRITE_LE32(local_dir_footer + 0, MZ_ZIP_DATA_DESCRIPTOR_ID);\n            MZ_WRITE_LE32(local_dir_footer + 4, uncomp_crc32);\n            if (pExtra_data == NULL)\n            {\n                if (comp_size > MZ_UINT32_MAX)\n                    return mz_zip_set_error(pZip, MZ_ZIP_ARCHIVE_TOO_LARGE);\n\n                MZ_WRITE_LE32(local_dir_footer + 8, comp_size);\n                MZ_WRITE_LE32(local_dir_footer + 12, uncomp_size);\n            }\n            else\n            {\n                MZ_WRITE_LE64(local_dir_footer + 8, comp_size);\n                MZ_WRITE_LE64(local_dir_footer + 16, uncomp_size);\n                local_dir_footer_size = MZ_ZIP_DATA_DESCRIPTER_SIZE64;\n            }\n\n            if (pZip->m_pWrite(pZip->m_pIO_opaque, cur_archive_file_ofs, local_dir_footer, local_dir_footer_size) != local_dir_footer_size)\n                return MZ_FALSE;\n\n            cur_archive_file_ofs += local_dir_footer_size;\n        }\n\n        if (level_and_flags & MZ_ZIP_FLAG_WRITE_HEADER_SET_SIZE)\n        {\n            if (pExtra_data != NULL)\n            {\n                extra_size = mz_zip_writer_create_zip64_extra_data(extra_data, (max_size >= MZ_UINT32_MAX) ? &uncomp_size : NULL,\n                                                                   (max_size >= MZ_UINT32_MAX) ? &comp_size : NULL, (local_dir_header_ofs >= MZ_UINT32_MAX) ? &local_dir_header_ofs : NULL);\n            }\n\n            if (!mz_zip_writer_create_local_dir_header(pZip, local_dir_header,\n                                                       (mz_uint16)archive_name_size, (mz_uint16)(extra_size + user_extra_data_len),\n                                                       (max_size >= MZ_UINT32_MAX) ? MZ_UINT32_MAX : uncomp_size,\n                                                       (max_size >= MZ_UINT32_MAX) ? MZ_UINT32_MAX : comp_size,\n                                                       uncomp_crc32, method, gen_flags, dos_time, dos_date))\n                return mz_zip_set_error(pZip, MZ_ZIP_INTERNAL_ERROR);\n\n            cur_archive_header_file_ofs = local_dir_header_ofs;\n\n            if (pZip->m_pWrite(pZip->m_pIO_opaque, cur_archive_header_file_ofs, local_dir_header, sizeof(local_dir_header)) != sizeof(local_dir_header))\n                return mz_zip_set_error(pZip, MZ_ZIP_FILE_WRITE_FAILED);\n\n            if (pExtra_data != NULL)\n            {\n                cur_archive_header_file_ofs += sizeof(local_dir_header);\n\n                if (pZip->m_pWrite(pZip->m_pIO_opaque, cur_archive_header_file_ofs, pArchive_name, archive_name_size) != archive_name_size)\n                {\n                    return mz_zip_set_error(pZip, MZ_ZIP_FILE_WRITE_FAILED);\n                }\n\n                cur_archive_header_file_ofs += archive_name_size;\n\n                if (pZip->m_pWrite(pZip->m_pIO_opaque, cur_archive_header_file_ofs, extra_data, extra_size) != extra_size)\n                    return mz_zip_set_error(pZip, MZ_ZIP_FILE_WRITE_FAILED);\n\n                cur_archive_header_file_ofs += extra_size;\n            }\n        }\n\n        if (pExtra_data != NULL)\n        {\n            extra_size = mz_zip_writer_create_zip64_extra_data(extra_data, (uncomp_size >= MZ_UINT32_MAX) ? &uncomp_size : NULL,\n                                                               (uncomp_size >= MZ_UINT32_MAX) ? &comp_size : NULL, (local_dir_header_ofs >= MZ_UINT32_MAX) ? &local_dir_header_ofs : NULL);\n        }\n\n        if (!mz_zip_writer_add_to_central_dir(pZip, pArchive_name, (mz_uint16)archive_name_size, pExtra_data, (mz_uint16)extra_size, pComment, comment_size,\n                                              uncomp_size, comp_size, uncomp_crc32, method, gen_flags, dos_time, dos_date, local_dir_header_ofs, ext_attributes,\n                                              user_extra_data_central, user_extra_data_central_len))\n            return MZ_FALSE;\n\n        pZip->m_total_files++;\n        pZip->m_archive_size = cur_archive_file_ofs;\n\n        return MZ_TRUE;\n    }\n\n#ifndef MINIZ_NO_STDIO\n\n    static size_t mz_file_read_func_stdio(void *pOpaque, mz_uint64 file_ofs, void *pBuf, size_t n)\n    {\n        MZ_FILE *pSrc_file = (MZ_FILE *)pOpaque;\n        mz_int64 cur_ofs = MZ_FTELL64(pSrc_file);\n\n        if (((mz_int64)file_ofs < 0) || (((cur_ofs != (mz_int64)file_ofs)) && (MZ_FSEEK64(pSrc_file, (mz_int64)file_ofs, SEEK_SET))))\n            return 0;\n\n        return MZ_FREAD(pBuf, 1, n, pSrc_file);\n    }\n\n    mz_bool mz_zip_writer_add_cfile(mz_zip_archive *pZip, const char *pArchive_name, MZ_FILE *pSrc_file, mz_uint64 max_size, const MZ_TIME_T *pFile_time, const void *pComment, mz_uint16 comment_size, mz_uint level_and_flags,\n                                    const char *user_extra_data, mz_uint user_extra_data_len, const char *user_extra_data_central, mz_uint user_extra_data_central_len)\n    {\n        return mz_zip_writer_add_read_buf_callback(pZip, pArchive_name, mz_file_read_func_stdio, pSrc_file, max_size, pFile_time, pComment, comment_size, level_and_flags,\n                                                   user_extra_data, user_extra_data_len, user_extra_data_central, user_extra_data_central_len);\n    }\n\n    mz_bool mz_zip_writer_add_file(mz_zip_archive *pZip, const char *pArchive_name, const char *pSrc_filename, const void *pComment, mz_uint16 comment_size, mz_uint level_and_flags)\n    {\n        MZ_FILE *pSrc_file = NULL;\n        mz_uint64 uncomp_size = 0;\n        MZ_TIME_T file_modified_time;\n        MZ_TIME_T *pFile_time = NULL;\n        mz_bool status;\n\n        memset(&file_modified_time, 0, sizeof(file_modified_time));\n\n#if !defined(MINIZ_NO_TIME) && !defined(MINIZ_NO_STDIO)\n        pFile_time = &file_modified_time;\n        if (!mz_zip_get_file_modified_time(pSrc_filename, &file_modified_time))\n            return mz_zip_set_error(pZip, MZ_ZIP_FILE_STAT_FAILED);\n#endif\n\n        pSrc_file = MZ_FOPEN(pSrc_filename, \"rb\");\n        if (!pSrc_file)\n            return mz_zip_set_error(pZip, MZ_ZIP_FILE_OPEN_FAILED);\n\n        MZ_FSEEK64(pSrc_file, 0, SEEK_END);\n        uncomp_size = MZ_FTELL64(pSrc_file);\n        MZ_FSEEK64(pSrc_file, 0, SEEK_SET);\n\n        status = mz_zip_writer_add_cfile(pZip, pArchive_name, pSrc_file, uncomp_size, pFile_time, pComment, comment_size, level_and_flags, NULL, 0, NULL, 0);\n\n        MZ_FCLOSE(pSrc_file);\n\n        return status;\n    }\n#endif /* #ifndef MINIZ_NO_STDIO */\n\n    static mz_bool mz_zip_writer_update_zip64_extension_block(mz_zip_array *pNew_ext, mz_zip_archive *pZip, const mz_uint8 *pExt, mz_uint32 ext_len, mz_uint64 *pComp_size, mz_uint64 *pUncomp_size, mz_uint64 *pLocal_header_ofs, mz_uint32 *pDisk_start)\n    {\n        /* + 64 should be enough for any new zip64 data */\n        if (!mz_zip_array_reserve(pZip, pNew_ext, ext_len + 64, MZ_FALSE))\n            return mz_zip_set_error(pZip, MZ_ZIP_ALLOC_FAILED);\n\n        mz_zip_array_resize(pZip, pNew_ext, 0, MZ_FALSE);\n\n        if ((pUncomp_size) || (pComp_size) || (pLocal_header_ofs) || (pDisk_start))\n        {\n            mz_uint8 new_ext_block[64];\n            mz_uint8 *pDst = new_ext_block;\n            mz_write_le16(pDst, MZ_ZIP64_EXTENDED_INFORMATION_FIELD_HEADER_ID);\n            mz_write_le16(pDst + sizeof(mz_uint16), 0);\n            pDst += sizeof(mz_uint16) * 2;\n\n            if (pUncomp_size)\n            {\n                mz_write_le64(pDst, *pUncomp_size);\n                pDst += sizeof(mz_uint64);\n            }\n\n            if (pComp_size)\n            {\n                mz_write_le64(pDst, *pComp_size);\n                pDst += sizeof(mz_uint64);\n            }\n\n            if (pLocal_header_ofs)\n            {\n                mz_write_le64(pDst, *pLocal_header_ofs);\n                pDst += sizeof(mz_uint64);\n            }\n\n            if (pDisk_start)\n            {\n                mz_write_le32(pDst, *pDisk_start);\n                pDst += sizeof(mz_uint32);\n            }\n\n            mz_write_le16(new_ext_block + sizeof(mz_uint16), (mz_uint16)((pDst - new_ext_block) - sizeof(mz_uint16) * 2));\n\n            if (!mz_zip_array_push_back(pZip, pNew_ext, new_ext_block, pDst - new_ext_block))\n                return mz_zip_set_error(pZip, MZ_ZIP_ALLOC_FAILED);\n        }\n\n        if ((pExt) && (ext_len))\n        {\n            mz_uint32 extra_size_remaining = ext_len;\n            const mz_uint8 *pExtra_data = pExt;\n\n            do\n            {\n                mz_uint32 field_id, field_data_size, field_total_size;\n\n                if (extra_size_remaining < (sizeof(mz_uint16) * 2))\n                    return mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n\n                field_id = MZ_READ_LE16(pExtra_data);\n                field_data_size = MZ_READ_LE16(pExtra_data + sizeof(mz_uint16));\n                field_total_size = field_data_size + sizeof(mz_uint16) * 2;\n\n                if (field_total_size > extra_size_remaining)\n                    return mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n\n                if (field_id != MZ_ZIP64_EXTENDED_INFORMATION_FIELD_HEADER_ID)\n                {\n                    if (!mz_zip_array_push_back(pZip, pNew_ext, pExtra_data, field_total_size))\n                        return mz_zip_set_error(pZip, MZ_ZIP_ALLOC_FAILED);\n                }\n\n                pExtra_data += field_total_size;\n                extra_size_remaining -= field_total_size;\n            } while (extra_size_remaining);\n        }\n\n        return MZ_TRUE;\n    }\n\n    /* TODO: This func is now pretty freakin complex due to zip64, split it up? */\n    mz_bool mz_zip_writer_add_from_zip_reader(mz_zip_archive *pZip, mz_zip_archive *pSource_zip, mz_uint src_file_index)\n    {\n        mz_uint n, bit_flags, num_alignment_padding_bytes, src_central_dir_following_data_size;\n        mz_uint64 src_archive_bytes_remaining, local_dir_header_ofs;\n        mz_uint64 cur_src_file_ofs, cur_dst_file_ofs;\n        mz_uint32 local_header_u32[(MZ_ZIP_LOCAL_DIR_HEADER_SIZE + sizeof(mz_uint32) - 1) / sizeof(mz_uint32)];\n        mz_uint8 *pLocal_header = (mz_uint8 *)local_header_u32;\n        mz_uint8 new_central_header[MZ_ZIP_CENTRAL_DIR_HEADER_SIZE];\n        size_t orig_central_dir_size;\n        mz_zip_internal_state *pState;\n        void *pBuf;\n        const mz_uint8 *pSrc_central_header;\n        mz_zip_archive_file_stat src_file_stat;\n        mz_uint32 src_filename_len, src_comment_len, src_ext_len;\n        mz_uint32 local_header_filename_size, local_header_extra_len;\n        mz_uint64 local_header_comp_size, local_header_uncomp_size;\n        mz_bool found_zip64_ext_data_in_ldir = MZ_FALSE;\n\n        /* Sanity checks */\n        if ((!pZip) || (!pZip->m_pState) || (pZip->m_zip_mode != MZ_ZIP_MODE_WRITING) || (!pSource_zip->m_pRead))\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n\n        pState = pZip->m_pState;\n\n        /* Don't support copying files from zip64 archives to non-zip64, even though in some cases this is possible */\n        if ((pSource_zip->m_pState->m_zip64) && (!pZip->m_pState->m_zip64))\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n\n        /* Get pointer to the source central dir header and crack it */\n        if (NULL == (pSrc_central_header = mz_zip_get_cdh(pSource_zip, src_file_index)))\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n\n        if (MZ_READ_LE32(pSrc_central_header + MZ_ZIP_CDH_SIG_OFS) != MZ_ZIP_CENTRAL_DIR_HEADER_SIG)\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n\n        src_filename_len = MZ_READ_LE16(pSrc_central_header + MZ_ZIP_CDH_FILENAME_LEN_OFS);\n        src_comment_len = MZ_READ_LE16(pSrc_central_header + MZ_ZIP_CDH_COMMENT_LEN_OFS);\n        src_ext_len = MZ_READ_LE16(pSrc_central_header + MZ_ZIP_CDH_EXTRA_LEN_OFS);\n        src_central_dir_following_data_size = src_filename_len + src_ext_len + src_comment_len;\n\n        /* TODO: We don't support central dir's >= MZ_UINT32_MAX bytes right now (+32 fudge factor in case we need to add more extra data) */\n        if ((pState->m_central_dir.m_size + MZ_ZIP_CENTRAL_DIR_HEADER_SIZE + src_central_dir_following_data_size + 32) >= MZ_UINT32_MAX)\n            return mz_zip_set_error(pZip, MZ_ZIP_UNSUPPORTED_CDIR_SIZE);\n\n        num_alignment_padding_bytes = mz_zip_writer_compute_padding_needed_for_file_alignment(pZip);\n\n        if (!pState->m_zip64)\n        {\n            if (pZip->m_total_files == MZ_UINT16_MAX)\n                return mz_zip_set_error(pZip, MZ_ZIP_TOO_MANY_FILES);\n        }\n        else\n        {\n            /* TODO: Our zip64 support still has some 32-bit limits that may not be worth fixing. */\n            if (pZip->m_total_files == MZ_UINT32_MAX)\n                return mz_zip_set_error(pZip, MZ_ZIP_TOO_MANY_FILES);\n        }\n\n        if (!mz_zip_file_stat_internal(pSource_zip, src_file_index, pSrc_central_header, &src_file_stat, NULL))\n            return MZ_FALSE;\n\n        cur_src_file_ofs = src_file_stat.m_local_header_ofs;\n        cur_dst_file_ofs = pZip->m_archive_size;\n\n        /* Read the source archive's local dir header */\n        if (pSource_zip->m_pRead(pSource_zip->m_pIO_opaque, cur_src_file_ofs, pLocal_header, MZ_ZIP_LOCAL_DIR_HEADER_SIZE) != MZ_ZIP_LOCAL_DIR_HEADER_SIZE)\n            return mz_zip_set_error(pZip, MZ_ZIP_FILE_READ_FAILED);\n\n        if (MZ_READ_LE32(pLocal_header) != MZ_ZIP_LOCAL_DIR_HEADER_SIG)\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n\n        cur_src_file_ofs += MZ_ZIP_LOCAL_DIR_HEADER_SIZE;\n\n        /* Compute the total size we need to copy (filename+extra data+compressed data) */\n        local_header_filename_size = MZ_READ_LE16(pLocal_header + MZ_ZIP_LDH_FILENAME_LEN_OFS);\n        local_header_extra_len = MZ_READ_LE16(pLocal_header + MZ_ZIP_LDH_EXTRA_LEN_OFS);\n        local_header_comp_size = MZ_READ_LE32(pLocal_header + MZ_ZIP_LDH_COMPRESSED_SIZE_OFS);\n        local_header_uncomp_size = MZ_READ_LE32(pLocal_header + MZ_ZIP_LDH_DECOMPRESSED_SIZE_OFS);\n        src_archive_bytes_remaining = src_file_stat.m_comp_size + local_header_filename_size + local_header_extra_len;\n\n        /* Try to find a zip64 extended information field */\n        if ((local_header_extra_len) && ((local_header_comp_size == MZ_UINT32_MAX) || (local_header_uncomp_size == MZ_UINT32_MAX)))\n        {\n            mz_zip_array file_data_array;\n            const mz_uint8 *pExtra_data;\n            mz_uint32 extra_size_remaining = local_header_extra_len;\n\n            mz_zip_array_init(&file_data_array, 1);\n            if (!mz_zip_array_resize(pZip, &file_data_array, local_header_extra_len, MZ_FALSE))\n            {\n                return mz_zip_set_error(pZip, MZ_ZIP_ALLOC_FAILED);\n            }\n\n            if (pSource_zip->m_pRead(pSource_zip->m_pIO_opaque, src_file_stat.m_local_header_ofs + MZ_ZIP_LOCAL_DIR_HEADER_SIZE + local_header_filename_size, file_data_array.m_p, local_header_extra_len) != local_header_extra_len)\n            {\n                mz_zip_array_clear(pZip, &file_data_array);\n                return mz_zip_set_error(pZip, MZ_ZIP_FILE_READ_FAILED);\n            }\n\n            pExtra_data = (const mz_uint8 *)file_data_array.m_p;\n\n            do\n            {\n                mz_uint32 field_id, field_data_size, field_total_size;\n\n                if (extra_size_remaining < (sizeof(mz_uint16) * 2))\n                {\n                    mz_zip_array_clear(pZip, &file_data_array);\n                    return mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n                }\n\n                field_id = MZ_READ_LE16(pExtra_data);\n                field_data_size = MZ_READ_LE16(pExtra_data + sizeof(mz_uint16));\n                field_total_size = field_data_size + sizeof(mz_uint16) * 2;\n\n                if (field_total_size > extra_size_remaining)\n                {\n                    mz_zip_array_clear(pZip, &file_data_array);\n                    return mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n                }\n\n                if (field_id == MZ_ZIP64_EXTENDED_INFORMATION_FIELD_HEADER_ID)\n                {\n                    const mz_uint8 *pSrc_field_data = pExtra_data + sizeof(mz_uint32);\n\n                    if (field_data_size < sizeof(mz_uint64) * 2)\n                    {\n                        mz_zip_array_clear(pZip, &file_data_array);\n                        return mz_zip_set_error(pZip, MZ_ZIP_INVALID_HEADER_OR_CORRUPTED);\n                    }\n\n                    local_header_uncomp_size = MZ_READ_LE64(pSrc_field_data);\n                    local_header_comp_size = MZ_READ_LE64(pSrc_field_data + sizeof(mz_uint64)); /* may be 0 if there's a descriptor */\n\n                    found_zip64_ext_data_in_ldir = MZ_TRUE;\n                    break;\n                }\n\n                pExtra_data += field_total_size;\n                extra_size_remaining -= field_total_size;\n            } while (extra_size_remaining);\n\n            mz_zip_array_clear(pZip, &file_data_array);\n        }\n\n        if (!pState->m_zip64)\n        {\n            /* Try to detect if the new archive will most likely wind up too big and bail early (+(sizeof(mz_uint32) * 4) is for the optional descriptor which could be present, +64 is a fudge factor). */\n            /* We also check when the archive is finalized so this doesn't need to be perfect. */\n            mz_uint64 approx_new_archive_size = cur_dst_file_ofs + num_alignment_padding_bytes + MZ_ZIP_LOCAL_DIR_HEADER_SIZE + src_archive_bytes_remaining + (sizeof(mz_uint32) * 4) +\n                                                pState->m_central_dir.m_size + MZ_ZIP_CENTRAL_DIR_HEADER_SIZE + src_central_dir_following_data_size + MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIZE + 64;\n\n            if (approx_new_archive_size >= MZ_UINT32_MAX)\n                return mz_zip_set_error(pZip, MZ_ZIP_ARCHIVE_TOO_LARGE);\n        }\n\n        /* Write dest archive padding */\n        if (!mz_zip_writer_write_zeros(pZip, cur_dst_file_ofs, num_alignment_padding_bytes))\n            return MZ_FALSE;\n\n        cur_dst_file_ofs += num_alignment_padding_bytes;\n\n        local_dir_header_ofs = cur_dst_file_ofs;\n        if (pZip->m_file_offset_alignment)\n        {\n            MZ_ASSERT((local_dir_header_ofs & (pZip->m_file_offset_alignment - 1)) == 0);\n        }\n\n        /* The original zip's local header+ext block doesn't change, even with zip64, so we can just copy it over to the dest zip */\n        if (pZip->m_pWrite(pZip->m_pIO_opaque, cur_dst_file_ofs, pLocal_header, MZ_ZIP_LOCAL_DIR_HEADER_SIZE) != MZ_ZIP_LOCAL_DIR_HEADER_SIZE)\n            return mz_zip_set_error(pZip, MZ_ZIP_FILE_WRITE_FAILED);\n\n        cur_dst_file_ofs += MZ_ZIP_LOCAL_DIR_HEADER_SIZE;\n\n        /* Copy over the source archive bytes to the dest archive, also ensure we have enough buf space to handle optional data descriptor */\n        if (NULL == (pBuf = pZip->m_pAlloc(pZip->m_pAlloc_opaque, 1, (size_t)MZ_MAX(32U, MZ_MIN((mz_uint64)MZ_ZIP_MAX_IO_BUF_SIZE, src_archive_bytes_remaining)))))\n            return mz_zip_set_error(pZip, MZ_ZIP_ALLOC_FAILED);\n\n        while (src_archive_bytes_remaining)\n        {\n            n = (mz_uint)MZ_MIN((mz_uint64)MZ_ZIP_MAX_IO_BUF_SIZE, src_archive_bytes_remaining);\n            if (pSource_zip->m_pRead(pSource_zip->m_pIO_opaque, cur_src_file_ofs, pBuf, n) != n)\n            {\n                pZip->m_pFree(pZip->m_pAlloc_opaque, pBuf);\n                return mz_zip_set_error(pZip, MZ_ZIP_FILE_READ_FAILED);\n            }\n            cur_src_file_ofs += n;\n\n            if (pZip->m_pWrite(pZip->m_pIO_opaque, cur_dst_file_ofs, pBuf, n) != n)\n            {\n                pZip->m_pFree(pZip->m_pAlloc_opaque, pBuf);\n                return mz_zip_set_error(pZip, MZ_ZIP_FILE_WRITE_FAILED);\n            }\n            cur_dst_file_ofs += n;\n\n            src_archive_bytes_remaining -= n;\n        }\n\n        /* Now deal with the optional data descriptor */\n        bit_flags = MZ_READ_LE16(pLocal_header + MZ_ZIP_LDH_BIT_FLAG_OFS);\n        if (bit_flags & 8)\n        {\n            /* Copy data descriptor */\n            if ((pSource_zip->m_pState->m_zip64) || (found_zip64_ext_data_in_ldir))\n            {\n                /* src is zip64, dest must be zip64 */\n\n                /* name\t\t\tuint32_t's */\n                /* id\t\t\t\t1 (optional in zip64?) */\n                /* crc\t\t\t1 */\n                /* comp_size\t2 */\n                /* uncomp_size 2 */\n                if (pSource_zip->m_pRead(pSource_zip->m_pIO_opaque, cur_src_file_ofs, pBuf, (sizeof(mz_uint32) * 6)) != (sizeof(mz_uint32) * 6))\n                {\n                    pZip->m_pFree(pZip->m_pAlloc_opaque, pBuf);\n                    return mz_zip_set_error(pZip, MZ_ZIP_FILE_READ_FAILED);\n                }\n\n                n = sizeof(mz_uint32) * ((MZ_READ_LE32(pBuf) == MZ_ZIP_DATA_DESCRIPTOR_ID) ? 6 : 5);\n            }\n            else\n            {\n                /* src is NOT zip64 */\n                mz_bool has_id;\n\n                if (pSource_zip->m_pRead(pSource_zip->m_pIO_opaque, cur_src_file_ofs, pBuf, sizeof(mz_uint32) * 4) != sizeof(mz_uint32) * 4)\n                {\n                    pZip->m_pFree(pZip->m_pAlloc_opaque, pBuf);\n                    return mz_zip_set_error(pZip, MZ_ZIP_FILE_READ_FAILED);\n                }\n\n                has_id = (MZ_READ_LE32(pBuf) == MZ_ZIP_DATA_DESCRIPTOR_ID);\n\n                if (pZip->m_pState->m_zip64)\n                {\n                    /* dest is zip64, so upgrade the data descriptor */\n                    const mz_uint8 *pSrc_descriptor = (const mz_uint8 *)pBuf + (has_id ? sizeof(mz_uint32) : 0);\n                    const mz_uint32 src_crc32 = MZ_READ_LE32(pSrc_descriptor);\n                    const mz_uint64 src_comp_size = MZ_READ_LE32(pSrc_descriptor + sizeof(mz_uint32));\n                    const mz_uint64 src_uncomp_size = MZ_READ_LE32(pSrc_descriptor + 2 * sizeof(mz_uint32));\n\n                    mz_write_le32((mz_uint8 *)pBuf, MZ_ZIP_DATA_DESCRIPTOR_ID);\n                    mz_write_le32((mz_uint8 *)pBuf + sizeof(mz_uint32) * 1, src_crc32);\n                    mz_write_le64((mz_uint8 *)pBuf + sizeof(mz_uint32) * 2, src_comp_size);\n                    mz_write_le64((mz_uint8 *)pBuf + sizeof(mz_uint32) * 4, src_uncomp_size);\n\n                    n = sizeof(mz_uint32) * 6;\n                }\n                else\n                {\n                    /* dest is NOT zip64, just copy it as-is */\n                    n = sizeof(mz_uint32) * (has_id ? 4 : 3);\n                }\n            }\n\n            if (pZip->m_pWrite(pZip->m_pIO_opaque, cur_dst_file_ofs, pBuf, n) != n)\n            {\n                pZip->m_pFree(pZip->m_pAlloc_opaque, pBuf);\n                return mz_zip_set_error(pZip, MZ_ZIP_FILE_WRITE_FAILED);\n            }\n\n            cur_src_file_ofs += n;\n            cur_dst_file_ofs += n;\n        }\n        pZip->m_pFree(pZip->m_pAlloc_opaque, pBuf);\n\n        /* Finally, add the new central dir header */\n        orig_central_dir_size = pState->m_central_dir.m_size;\n\n        memcpy(new_central_header, pSrc_central_header, MZ_ZIP_CENTRAL_DIR_HEADER_SIZE);\n\n        if (pState->m_zip64)\n        {\n            /* This is the painful part: We need to write a new central dir header + ext block with updated zip64 fields, and ensure the old fields (if any) are not included. */\n            const mz_uint8 *pSrc_ext = pSrc_central_header + MZ_ZIP_CENTRAL_DIR_HEADER_SIZE + src_filename_len;\n            mz_zip_array new_ext_block;\n\n            mz_zip_array_init(&new_ext_block, sizeof(mz_uint8));\n\n            MZ_WRITE_LE32(new_central_header + MZ_ZIP_CDH_COMPRESSED_SIZE_OFS, MZ_UINT32_MAX);\n            MZ_WRITE_LE32(new_central_header + MZ_ZIP_CDH_DECOMPRESSED_SIZE_OFS, MZ_UINT32_MAX);\n            MZ_WRITE_LE32(new_central_header + MZ_ZIP_CDH_LOCAL_HEADER_OFS, MZ_UINT32_MAX);\n\n            if (!mz_zip_writer_update_zip64_extension_block(&new_ext_block, pZip, pSrc_ext, src_ext_len, &src_file_stat.m_comp_size, &src_file_stat.m_uncomp_size, &local_dir_header_ofs, NULL))\n            {\n                mz_zip_array_clear(pZip, &new_ext_block);\n                return MZ_FALSE;\n            }\n\n            MZ_WRITE_LE16(new_central_header + MZ_ZIP_CDH_EXTRA_LEN_OFS, new_ext_block.m_size);\n\n            if (!mz_zip_array_push_back(pZip, &pState->m_central_dir, new_central_header, MZ_ZIP_CENTRAL_DIR_HEADER_SIZE))\n            {\n                mz_zip_array_clear(pZip, &new_ext_block);\n                return mz_zip_set_error(pZip, MZ_ZIP_ALLOC_FAILED);\n            }\n\n            if (!mz_zip_array_push_back(pZip, &pState->m_central_dir, pSrc_central_header + MZ_ZIP_CENTRAL_DIR_HEADER_SIZE, src_filename_len))\n            {\n                mz_zip_array_clear(pZip, &new_ext_block);\n                mz_zip_array_resize(pZip, &pState->m_central_dir, orig_central_dir_size, MZ_FALSE);\n                return mz_zip_set_error(pZip, MZ_ZIP_ALLOC_FAILED);\n            }\n\n            if (!mz_zip_array_push_back(pZip, &pState->m_central_dir, new_ext_block.m_p, new_ext_block.m_size))\n            {\n                mz_zip_array_clear(pZip, &new_ext_block);\n                mz_zip_array_resize(pZip, &pState->m_central_dir, orig_central_dir_size, MZ_FALSE);\n                return mz_zip_set_error(pZip, MZ_ZIP_ALLOC_FAILED);\n            }\n\n            if (!mz_zip_array_push_back(pZip, &pState->m_central_dir, pSrc_central_header + MZ_ZIP_CENTRAL_DIR_HEADER_SIZE + src_filename_len + src_ext_len, src_comment_len))\n            {\n                mz_zip_array_clear(pZip, &new_ext_block);\n                mz_zip_array_resize(pZip, &pState->m_central_dir, orig_central_dir_size, MZ_FALSE);\n                return mz_zip_set_error(pZip, MZ_ZIP_ALLOC_FAILED);\n            }\n\n            mz_zip_array_clear(pZip, &new_ext_block);\n        }\n        else\n        {\n            /* sanity checks */\n            if (cur_dst_file_ofs > MZ_UINT32_MAX)\n                return mz_zip_set_error(pZip, MZ_ZIP_ARCHIVE_TOO_LARGE);\n\n            if (local_dir_header_ofs >= MZ_UINT32_MAX)\n                return mz_zip_set_error(pZip, MZ_ZIP_ARCHIVE_TOO_LARGE);\n\n            MZ_WRITE_LE32(new_central_header + MZ_ZIP_CDH_LOCAL_HEADER_OFS, local_dir_header_ofs);\n\n            if (!mz_zip_array_push_back(pZip, &pState->m_central_dir, new_central_header, MZ_ZIP_CENTRAL_DIR_HEADER_SIZE))\n                return mz_zip_set_error(pZip, MZ_ZIP_ALLOC_FAILED);\n\n            if (!mz_zip_array_push_back(pZip, &pState->m_central_dir, pSrc_central_header + MZ_ZIP_CENTRAL_DIR_HEADER_SIZE, src_central_dir_following_data_size))\n            {\n                mz_zip_array_resize(pZip, &pState->m_central_dir, orig_central_dir_size, MZ_FALSE);\n                return mz_zip_set_error(pZip, MZ_ZIP_ALLOC_FAILED);\n            }\n        }\n\n        /* This shouldn't trigger unless we screwed up during the initial sanity checks */\n        if (pState->m_central_dir.m_size >= MZ_UINT32_MAX)\n        {\n            /* TODO: Support central dirs >= 32-bits in size */\n            mz_zip_array_resize(pZip, &pState->m_central_dir, orig_central_dir_size, MZ_FALSE);\n            return mz_zip_set_error(pZip, MZ_ZIP_UNSUPPORTED_CDIR_SIZE);\n        }\n\n        n = (mz_uint32)orig_central_dir_size;\n        if (!mz_zip_array_push_back(pZip, &pState->m_central_dir_offsets, &n, 1))\n        {\n            mz_zip_array_resize(pZip, &pState->m_central_dir, orig_central_dir_size, MZ_FALSE);\n            return mz_zip_set_error(pZip, MZ_ZIP_ALLOC_FAILED);\n        }\n\n        pZip->m_total_files++;\n        pZip->m_archive_size = cur_dst_file_ofs;\n\n        return MZ_TRUE;\n    }\n\n    mz_bool mz_zip_writer_finalize_archive(mz_zip_archive *pZip)\n    {\n        mz_zip_internal_state *pState;\n        mz_uint64 central_dir_ofs, central_dir_size;\n        mz_uint8 hdr[256];\n\n        if ((!pZip) || (!pZip->m_pState) || (pZip->m_zip_mode != MZ_ZIP_MODE_WRITING))\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n\n        pState = pZip->m_pState;\n\n        if (pState->m_zip64)\n        {\n            if ((mz_uint64)pState->m_central_dir.m_size >= MZ_UINT32_MAX)\n                return mz_zip_set_error(pZip, MZ_ZIP_TOO_MANY_FILES);\n        }\n        else\n        {\n            if ((pZip->m_total_files > MZ_UINT16_MAX) || ((pZip->m_archive_size + pState->m_central_dir.m_size + MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIZE) > MZ_UINT32_MAX))\n                return mz_zip_set_error(pZip, MZ_ZIP_TOO_MANY_FILES);\n        }\n\n        central_dir_ofs = 0;\n        central_dir_size = 0;\n        if (pZip->m_total_files)\n        {\n            /* Write central directory */\n            central_dir_ofs = pZip->m_archive_size;\n            central_dir_size = pState->m_central_dir.m_size;\n            pZip->m_central_directory_file_ofs = central_dir_ofs;\n            if (pZip->m_pWrite(pZip->m_pIO_opaque, central_dir_ofs, pState->m_central_dir.m_p, (size_t)central_dir_size) != central_dir_size)\n                return mz_zip_set_error(pZip, MZ_ZIP_FILE_WRITE_FAILED);\n\n            pZip->m_archive_size += central_dir_size;\n        }\n\n        if (pState->m_zip64)\n        {\n            /* Write zip64 end of central directory header */\n            mz_uint64 rel_ofs_to_zip64_ecdr = pZip->m_archive_size;\n\n            MZ_CLEAR_ARR(hdr);\n            MZ_WRITE_LE32(hdr + MZ_ZIP64_ECDH_SIG_OFS, MZ_ZIP64_END_OF_CENTRAL_DIR_HEADER_SIG);\n            MZ_WRITE_LE64(hdr + MZ_ZIP64_ECDH_SIZE_OF_RECORD_OFS, MZ_ZIP64_END_OF_CENTRAL_DIR_HEADER_SIZE - sizeof(mz_uint32) - sizeof(mz_uint64));\n            MZ_WRITE_LE16(hdr + MZ_ZIP64_ECDH_VERSION_MADE_BY_OFS, 0x031E); /* TODO: always Unix */\n            MZ_WRITE_LE16(hdr + MZ_ZIP64_ECDH_VERSION_NEEDED_OFS, 0x002D);\n            MZ_WRITE_LE64(hdr + MZ_ZIP64_ECDH_CDIR_NUM_ENTRIES_ON_DISK_OFS, pZip->m_total_files);\n            MZ_WRITE_LE64(hdr + MZ_ZIP64_ECDH_CDIR_TOTAL_ENTRIES_OFS, pZip->m_total_files);\n            MZ_WRITE_LE64(hdr + MZ_ZIP64_ECDH_CDIR_SIZE_OFS, central_dir_size);\n            MZ_WRITE_LE64(hdr + MZ_ZIP64_ECDH_CDIR_OFS_OFS, central_dir_ofs);\n            if (pZip->m_pWrite(pZip->m_pIO_opaque, pZip->m_archive_size, hdr, MZ_ZIP64_END_OF_CENTRAL_DIR_HEADER_SIZE) != MZ_ZIP64_END_OF_CENTRAL_DIR_HEADER_SIZE)\n                return mz_zip_set_error(pZip, MZ_ZIP_FILE_WRITE_FAILED);\n\n            pZip->m_archive_size += MZ_ZIP64_END_OF_CENTRAL_DIR_HEADER_SIZE;\n\n            /* Write zip64 end of central directory locator */\n            MZ_CLEAR_ARR(hdr);\n            MZ_WRITE_LE32(hdr + MZ_ZIP64_ECDL_SIG_OFS, MZ_ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIG);\n            MZ_WRITE_LE64(hdr + MZ_ZIP64_ECDL_REL_OFS_TO_ZIP64_ECDR_OFS, rel_ofs_to_zip64_ecdr);\n            MZ_WRITE_LE32(hdr + MZ_ZIP64_ECDL_TOTAL_NUMBER_OF_DISKS_OFS, 1);\n            if (pZip->m_pWrite(pZip->m_pIO_opaque, pZip->m_archive_size, hdr, MZ_ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIZE) != MZ_ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIZE)\n                return mz_zip_set_error(pZip, MZ_ZIP_FILE_WRITE_FAILED);\n\n            pZip->m_archive_size += MZ_ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIZE;\n        }\n\n        /* Write end of central directory record */\n        MZ_CLEAR_ARR(hdr);\n        MZ_WRITE_LE32(hdr + MZ_ZIP_ECDH_SIG_OFS, MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIG);\n        MZ_WRITE_LE16(hdr + MZ_ZIP_ECDH_CDIR_NUM_ENTRIES_ON_DISK_OFS, MZ_MIN(MZ_UINT16_MAX, pZip->m_total_files));\n        MZ_WRITE_LE16(hdr + MZ_ZIP_ECDH_CDIR_TOTAL_ENTRIES_OFS, MZ_MIN(MZ_UINT16_MAX, pZip->m_total_files));\n        MZ_WRITE_LE32(hdr + MZ_ZIP_ECDH_CDIR_SIZE_OFS, MZ_MIN(MZ_UINT32_MAX, central_dir_size));\n        MZ_WRITE_LE32(hdr + MZ_ZIP_ECDH_CDIR_OFS_OFS, MZ_MIN(MZ_UINT32_MAX, central_dir_ofs));\n\n        if (pZip->m_pWrite(pZip->m_pIO_opaque, pZip->m_archive_size, hdr, MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIZE) != MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIZE)\n            return mz_zip_set_error(pZip, MZ_ZIP_FILE_WRITE_FAILED);\n\n#ifndef MINIZ_NO_STDIO\n        if ((pState->m_pFile) && (MZ_FFLUSH(pState->m_pFile) == EOF))\n            return mz_zip_set_error(pZip, MZ_ZIP_FILE_CLOSE_FAILED);\n#endif /* #ifndef MINIZ_NO_STDIO */\n\n        pZip->m_archive_size += MZ_ZIP_END_OF_CENTRAL_DIR_HEADER_SIZE;\n\n        pZip->m_zip_mode = MZ_ZIP_MODE_WRITING_HAS_BEEN_FINALIZED;\n        return MZ_TRUE;\n    }\n\n    mz_bool mz_zip_writer_finalize_heap_archive(mz_zip_archive *pZip, void **ppBuf, size_t *pSize)\n    {\n        if ((!ppBuf) || (!pSize))\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n\n        *ppBuf = NULL;\n        *pSize = 0;\n\n        if ((!pZip) || (!pZip->m_pState))\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n\n        if (pZip->m_pWrite != mz_zip_heap_write_func)\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n\n        if (!mz_zip_writer_finalize_archive(pZip))\n            return MZ_FALSE;\n\n        *ppBuf = pZip->m_pState->m_pMem;\n        *pSize = pZip->m_pState->m_mem_size;\n        pZip->m_pState->m_pMem = NULL;\n        pZip->m_pState->m_mem_size = pZip->m_pState->m_mem_capacity = 0;\n\n        return MZ_TRUE;\n    }\n\n    mz_bool mz_zip_writer_end(mz_zip_archive *pZip)\n    {\n        return mz_zip_writer_end_internal(pZip, MZ_TRUE);\n    }\n\n#ifndef MINIZ_NO_STDIO\n    mz_bool mz_zip_add_mem_to_archive_file_in_place(const char *pZip_filename, const char *pArchive_name, const void *pBuf, size_t buf_size, const void *pComment, mz_uint16 comment_size, mz_uint level_and_flags)\n    {\n        return mz_zip_add_mem_to_archive_file_in_place_v2(pZip_filename, pArchive_name, pBuf, buf_size, pComment, comment_size, level_and_flags, NULL);\n    }\n\n    mz_bool mz_zip_add_mem_to_archive_file_in_place_v2(const char *pZip_filename, const char *pArchive_name, const void *pBuf, size_t buf_size, const void *pComment, mz_uint16 comment_size, mz_uint level_and_flags, mz_zip_error *pErr)\n    {\n        mz_bool status, created_new_archive = MZ_FALSE;\n        mz_zip_archive zip_archive;\n        struct MZ_FILE_STAT_STRUCT file_stat;\n        mz_zip_error actual_err = MZ_ZIP_NO_ERROR;\n\n        mz_zip_zero_struct(&zip_archive);\n        if ((int)level_and_flags < 0)\n            level_and_flags = MZ_DEFAULT_LEVEL;\n\n        if ((!pZip_filename) || (!pArchive_name) || ((buf_size) && (!pBuf)) || ((comment_size) && (!pComment)) || ((level_and_flags & 0xF) > MZ_UBER_COMPRESSION))\n        {\n            if (pErr)\n                *pErr = MZ_ZIP_INVALID_PARAMETER;\n            return MZ_FALSE;\n        }\n\n        if (!mz_zip_writer_validate_archive_name(pArchive_name))\n        {\n            if (pErr)\n                *pErr = MZ_ZIP_INVALID_FILENAME;\n            return MZ_FALSE;\n        }\n\n        /* Important: The regular non-64 bit version of stat() can fail here if the file is very large, which could cause the archive to be overwritten. */\n        /* So be sure to compile with _LARGEFILE64_SOURCE 1 */\n        if (MZ_FILE_STAT(pZip_filename, &file_stat) != 0)\n        {\n            /* Create a new archive. */\n            if (!mz_zip_writer_init_file_v2(&zip_archive, pZip_filename, 0, level_and_flags))\n            {\n                if (pErr)\n                    *pErr = zip_archive.m_last_error;\n                return MZ_FALSE;\n            }\n\n            created_new_archive = MZ_TRUE;\n        }\n        else\n        {\n            /* Append to an existing archive. */\n            if (!mz_zip_reader_init_file_v2(&zip_archive, pZip_filename, level_and_flags | MZ_ZIP_FLAG_DO_NOT_SORT_CENTRAL_DIRECTORY | MZ_ZIP_FLAG_READ_ALLOW_WRITING, 0, 0))\n            {\n                if (pErr)\n                    *pErr = zip_archive.m_last_error;\n                return MZ_FALSE;\n            }\n\n            if (!mz_zip_writer_init_from_reader_v2(&zip_archive, pZip_filename, level_and_flags | MZ_ZIP_FLAG_READ_ALLOW_WRITING))\n            {\n                if (pErr)\n                    *pErr = zip_archive.m_last_error;\n\n                mz_zip_reader_end_internal(&zip_archive, MZ_FALSE);\n\n                return MZ_FALSE;\n            }\n        }\n\n        status = mz_zip_writer_add_mem_ex(&zip_archive, pArchive_name, pBuf, buf_size, pComment, comment_size, level_and_flags, 0, 0);\n        actual_err = zip_archive.m_last_error;\n\n        /* Always finalize, even if adding failed for some reason, so we have a valid central directory. (This may not always succeed, but we can try.) */\n        if (!mz_zip_writer_finalize_archive(&zip_archive))\n        {\n            if (!actual_err)\n                actual_err = zip_archive.m_last_error;\n\n            status = MZ_FALSE;\n        }\n\n        if (!mz_zip_writer_end_internal(&zip_archive, status))\n        {\n            if (!actual_err)\n                actual_err = zip_archive.m_last_error;\n\n            status = MZ_FALSE;\n        }\n\n        if ((!status) && (created_new_archive))\n        {\n            /* It's a new archive and something went wrong, so just delete it. */\n            int ignoredStatus = MZ_DELETE_FILE(pZip_filename);\n            (void)ignoredStatus;\n        }\n\n        if (pErr)\n            *pErr = actual_err;\n\n        return status;\n    }\n\n    void *mz_zip_extract_archive_file_to_heap_v2(const char *pZip_filename, const char *pArchive_name, const char *pComment, size_t *pSize, mz_uint flags, mz_zip_error *pErr)\n    {\n        mz_uint32 file_index;\n        mz_zip_archive zip_archive;\n        void *p = NULL;\n\n        if (pSize)\n            *pSize = 0;\n\n        if ((!pZip_filename) || (!pArchive_name))\n        {\n            if (pErr)\n                *pErr = MZ_ZIP_INVALID_PARAMETER;\n\n            return NULL;\n        }\n\n        mz_zip_zero_struct(&zip_archive);\n        if (!mz_zip_reader_init_file_v2(&zip_archive, pZip_filename, flags | MZ_ZIP_FLAG_DO_NOT_SORT_CENTRAL_DIRECTORY, 0, 0))\n        {\n            if (pErr)\n                *pErr = zip_archive.m_last_error;\n\n            return NULL;\n        }\n\n        if (mz_zip_reader_locate_file_v2(&zip_archive, pArchive_name, pComment, flags, &file_index))\n        {\n            p = mz_zip_reader_extract_to_heap(&zip_archive, file_index, pSize, flags);\n        }\n\n        mz_zip_reader_end_internal(&zip_archive, p != NULL);\n\n        if (pErr)\n            *pErr = zip_archive.m_last_error;\n\n        return p;\n    }\n\n    void *mz_zip_extract_archive_file_to_heap(const char *pZip_filename, const char *pArchive_name, size_t *pSize, mz_uint flags)\n    {\n        return mz_zip_extract_archive_file_to_heap_v2(pZip_filename, pArchive_name, NULL, pSize, flags, NULL);\n    }\n\n#endif /* #ifndef MINIZ_NO_STDIO */\n\n#endif /* #ifndef MINIZ_NO_ARCHIVE_WRITING_APIS */\n\n    /* ------------------- Misc utils */\n\n    mz_zip_mode mz_zip_get_mode(mz_zip_archive *pZip)\n    {\n        return pZip ? pZip->m_zip_mode : MZ_ZIP_MODE_INVALID;\n    }\n\n    mz_zip_type mz_zip_get_type(mz_zip_archive *pZip)\n    {\n        return pZip ? pZip->m_zip_type : MZ_ZIP_TYPE_INVALID;\n    }\n\n    mz_zip_error mz_zip_set_last_error(mz_zip_archive *pZip, mz_zip_error err_num)\n    {\n        mz_zip_error prev_err;\n\n        if (!pZip)\n            return MZ_ZIP_INVALID_PARAMETER;\n\n        prev_err = pZip->m_last_error;\n\n        pZip->m_last_error = err_num;\n        return prev_err;\n    }\n\n    mz_zip_error mz_zip_peek_last_error(mz_zip_archive *pZip)\n    {\n        if (!pZip)\n            return MZ_ZIP_INVALID_PARAMETER;\n\n        return pZip->m_last_error;\n    }\n\n    mz_zip_error mz_zip_clear_last_error(mz_zip_archive *pZip)\n    {\n        return mz_zip_set_last_error(pZip, MZ_ZIP_NO_ERROR);\n    }\n\n    mz_zip_error mz_zip_get_last_error(mz_zip_archive *pZip)\n    {\n        mz_zip_error prev_err;\n\n        if (!pZip)\n            return MZ_ZIP_INVALID_PARAMETER;\n\n        prev_err = pZip->m_last_error;\n\n        pZip->m_last_error = MZ_ZIP_NO_ERROR;\n        return prev_err;\n    }\n\n    const char *mz_zip_get_error_string(mz_zip_error mz_err)\n    {\n        switch (mz_err)\n        {\n            case MZ_ZIP_NO_ERROR:\n                return \"no error\";\n            case MZ_ZIP_UNDEFINED_ERROR:\n                return \"undefined error\";\n            case MZ_ZIP_TOO_MANY_FILES:\n                return \"too many files\";\n            case MZ_ZIP_FILE_TOO_LARGE:\n                return \"file too large\";\n            case MZ_ZIP_UNSUPPORTED_METHOD:\n                return \"unsupported method\";\n            case MZ_ZIP_UNSUPPORTED_ENCRYPTION:\n                return \"unsupported encryption\";\n            case MZ_ZIP_UNSUPPORTED_FEATURE:\n                return \"unsupported feature\";\n            case MZ_ZIP_FAILED_FINDING_CENTRAL_DIR:\n                return \"failed finding central directory\";\n            case MZ_ZIP_NOT_AN_ARCHIVE:\n                return \"not a ZIP archive\";\n            case MZ_ZIP_INVALID_HEADER_OR_CORRUPTED:\n                return \"invalid header or archive is corrupted\";\n            case MZ_ZIP_UNSUPPORTED_MULTIDISK:\n                return \"unsupported multidisk archive\";\n            case MZ_ZIP_DECOMPRESSION_FAILED:\n                return \"decompression failed or archive is corrupted\";\n            case MZ_ZIP_COMPRESSION_FAILED:\n                return \"compression failed\";\n            case MZ_ZIP_UNEXPECTED_DECOMPRESSED_SIZE:\n                return \"unexpected decompressed size\";\n            case MZ_ZIP_CRC_CHECK_FAILED:\n                return \"CRC-32 check failed\";\n            case MZ_ZIP_UNSUPPORTED_CDIR_SIZE:\n                return \"unsupported central directory size\";\n            case MZ_ZIP_ALLOC_FAILED:\n                return \"allocation failed\";\n            case MZ_ZIP_FILE_OPEN_FAILED:\n                return \"file open failed\";\n            case MZ_ZIP_FILE_CREATE_FAILED:\n                return \"file create failed\";\n            case MZ_ZIP_FILE_WRITE_FAILED:\n                return \"file write failed\";\n            case MZ_ZIP_FILE_READ_FAILED:\n                return \"file read failed\";\n            case MZ_ZIP_FILE_CLOSE_FAILED:\n                return \"file close failed\";\n            case MZ_ZIP_FILE_SEEK_FAILED:\n                return \"file seek failed\";\n            case MZ_ZIP_FILE_STAT_FAILED:\n                return \"file stat failed\";\n            case MZ_ZIP_INVALID_PARAMETER:\n                return \"invalid parameter\";\n            case MZ_ZIP_INVALID_FILENAME:\n                return \"invalid filename\";\n            case MZ_ZIP_BUF_TOO_SMALL:\n                return \"buffer too small\";\n            case MZ_ZIP_INTERNAL_ERROR:\n                return \"internal error\";\n            case MZ_ZIP_FILE_NOT_FOUND:\n                return \"file not found\";\n            case MZ_ZIP_ARCHIVE_TOO_LARGE:\n                return \"archive is too large\";\n            case MZ_ZIP_VALIDATION_FAILED:\n                return \"validation failed\";\n            case MZ_ZIP_WRITE_CALLBACK_FAILED:\n                return \"write callback failed\";\n            case MZ_ZIP_TOTAL_ERRORS:\n                return \"total errors\";\n            default:\n                break;\n        }\n\n        return \"unknown error\";\n    }\n\n    /* Note: Just because the archive is not zip64 doesn't necessarily mean it doesn't have Zip64 extended information extra field, argh. */\n    mz_bool mz_zip_is_zip64(mz_zip_archive *pZip)\n    {\n        if ((!pZip) || (!pZip->m_pState))\n            return MZ_FALSE;\n\n        return pZip->m_pState->m_zip64;\n    }\n\n    size_t mz_zip_get_central_dir_size(mz_zip_archive *pZip)\n    {\n        if ((!pZip) || (!pZip->m_pState))\n            return 0;\n\n        return pZip->m_pState->m_central_dir.m_size;\n    }\n\n    mz_uint mz_zip_reader_get_num_files(mz_zip_archive *pZip)\n    {\n        return pZip ? pZip->m_total_files : 0;\n    }\n\n    mz_uint64 mz_zip_get_archive_size(mz_zip_archive *pZip)\n    {\n        if (!pZip)\n            return 0;\n        return pZip->m_archive_size;\n    }\n\n    mz_uint64 mz_zip_get_archive_file_start_offset(mz_zip_archive *pZip)\n    {\n        if ((!pZip) || (!pZip->m_pState))\n            return 0;\n        return pZip->m_pState->m_file_archive_start_ofs;\n    }\n\n    MZ_FILE *mz_zip_get_cfile(mz_zip_archive *pZip)\n    {\n        if ((!pZip) || (!pZip->m_pState))\n            return 0;\n        return pZip->m_pState->m_pFile;\n    }\n\n    size_t mz_zip_read_archive_data(mz_zip_archive *pZip, mz_uint64 file_ofs, void *pBuf, size_t n)\n    {\n        if ((!pZip) || (!pZip->m_pState) || (!pBuf) || (!pZip->m_pRead))\n            return mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n\n        return pZip->m_pRead(pZip->m_pIO_opaque, file_ofs, pBuf, n);\n    }\n\n    mz_uint mz_zip_reader_get_filename(mz_zip_archive *pZip, mz_uint file_index, char *pFilename, mz_uint filename_buf_size)\n    {\n        mz_uint n;\n        const mz_uint8 *p = mz_zip_get_cdh(pZip, file_index);\n        if (!p)\n        {\n            if (filename_buf_size)\n                pFilename[0] = '\\0';\n            mz_zip_set_error(pZip, MZ_ZIP_INVALID_PARAMETER);\n            return 0;\n        }\n        n = MZ_READ_LE16(p + MZ_ZIP_CDH_FILENAME_LEN_OFS);\n        if (filename_buf_size)\n        {\n            n = MZ_MIN(n, filename_buf_size - 1);\n            memcpy(pFilename, p + MZ_ZIP_CENTRAL_DIR_HEADER_SIZE, n);\n            pFilename[n] = '\\0';\n        }\n        return n + 1;\n    }\n\n    mz_bool mz_zip_reader_file_stat(mz_zip_archive *pZip, mz_uint file_index, mz_zip_archive_file_stat *pStat)\n    {\n        return mz_zip_file_stat_internal(pZip, file_index, mz_zip_get_cdh(pZip, file_index), pStat, NULL);\n    }\n\n    mz_bool mz_zip_end(mz_zip_archive *pZip)\n    {\n        if (!pZip)\n            return MZ_FALSE;\n\n        if (pZip->m_zip_mode == MZ_ZIP_MODE_READING)\n            return mz_zip_reader_end(pZip);\n#ifndef MINIZ_NO_ARCHIVE_WRITING_APIS\n        else if ((pZip->m_zip_mode == MZ_ZIP_MODE_WRITING) || (pZip->m_zip_mode == MZ_ZIP_MODE_WRITING_HAS_BEEN_FINALIZED))\n            return mz_zip_writer_end(pZip);\n#endif\n\n        return MZ_FALSE;\n    }\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /*#ifndef MINIZ_NO_ARCHIVE_APIS*/\n"
        },
        {
          "name": "miniz_zip.h",
          "type": "blob",
          "size": 26.115234375,
          "content": "\n#pragma once\n#include \"miniz_common.h\"\n\n/* ------------------- ZIP archive reading/writing */\n\n#ifndef MINIZ_NO_ARCHIVE_APIS\n\n#ifdef __cplusplus\nextern \"C\"\n{\n#endif\n\n    enum\n    {\n        /* Note: These enums can be reduced as needed to save memory or stack space - they are pretty conservative. */\n        MZ_ZIP_MAX_IO_BUF_SIZE = 64 * 1024,\n        MZ_ZIP_MAX_ARCHIVE_FILENAME_SIZE = 512,\n        MZ_ZIP_MAX_ARCHIVE_FILE_COMMENT_SIZE = 512\n    };\n\n    typedef struct\n    {\n        /* Central directory file index. */\n        mz_uint32 m_file_index;\n\n        /* Byte offset of this entry in the archive's central directory. Note we currently only support up to UINT_MAX or less bytes in the central dir. */\n        mz_uint64 m_central_dir_ofs;\n\n        /* These fields are copied directly from the zip's central dir. */\n        mz_uint16 m_version_made_by;\n        mz_uint16 m_version_needed;\n        mz_uint16 m_bit_flag;\n        mz_uint16 m_method;\n\n        /* CRC-32 of uncompressed data. */\n        mz_uint32 m_crc32;\n\n        /* File's compressed size. */\n        mz_uint64 m_comp_size;\n\n        /* File's uncompressed size. Note, I've seen some old archives where directory entries had 512 bytes for their uncompressed sizes, but when you try to unpack them you actually get 0 bytes. */\n        mz_uint64 m_uncomp_size;\n\n        /* Zip internal and external file attributes. */\n        mz_uint16 m_internal_attr;\n        mz_uint32 m_external_attr;\n\n        /* Entry's local header file offset in bytes. */\n        mz_uint64 m_local_header_ofs;\n\n        /* Size of comment in bytes. */\n        mz_uint32 m_comment_size;\n\n        /* MZ_TRUE if the entry appears to be a directory. */\n        mz_bool m_is_directory;\n\n        /* MZ_TRUE if the entry uses encryption/strong encryption (which miniz_zip doesn't support) */\n        mz_bool m_is_encrypted;\n\n        /* MZ_TRUE if the file is not encrypted, a patch file, and if it uses a compression method we support. */\n        mz_bool m_is_supported;\n\n        /* Filename. If string ends in '/' it's a subdirectory entry. */\n        /* Guaranteed to be zero terminated, may be truncated to fit. */\n        char m_filename[MZ_ZIP_MAX_ARCHIVE_FILENAME_SIZE];\n\n        /* Comment field. */\n        /* Guaranteed to be zero terminated, may be truncated to fit. */\n        char m_comment[MZ_ZIP_MAX_ARCHIVE_FILE_COMMENT_SIZE];\n\n#ifdef MINIZ_NO_TIME\n        MZ_TIME_T m_padding;\n#else\n    MZ_TIME_T m_time;\n#endif\n    } mz_zip_archive_file_stat;\n\n    typedef size_t (*mz_file_read_func)(void *pOpaque, mz_uint64 file_ofs, void *pBuf, size_t n);\n    typedef size_t (*mz_file_write_func)(void *pOpaque, mz_uint64 file_ofs, const void *pBuf, size_t n);\n    typedef mz_bool (*mz_file_needs_keepalive)(void *pOpaque);\n\n    struct mz_zip_internal_state_tag;\n    typedef struct mz_zip_internal_state_tag mz_zip_internal_state;\n\n    typedef enum\n    {\n        MZ_ZIP_MODE_INVALID = 0,\n        MZ_ZIP_MODE_READING = 1,\n        MZ_ZIP_MODE_WRITING = 2,\n        MZ_ZIP_MODE_WRITING_HAS_BEEN_FINALIZED = 3\n    } mz_zip_mode;\n\n    typedef enum\n    {\n        MZ_ZIP_FLAG_CASE_SENSITIVE = 0x0100,\n        MZ_ZIP_FLAG_IGNORE_PATH = 0x0200,\n        MZ_ZIP_FLAG_COMPRESSED_DATA = 0x0400,\n        MZ_ZIP_FLAG_DO_NOT_SORT_CENTRAL_DIRECTORY = 0x0800,\n        MZ_ZIP_FLAG_VALIDATE_LOCATE_FILE_FLAG = 0x1000, /* if enabled, mz_zip_reader_locate_file() will be called on each file as its validated to ensure the func finds the file in the central dir (intended for testing) */\n        MZ_ZIP_FLAG_VALIDATE_HEADERS_ONLY = 0x2000,     /* validate the local headers, but don't decompress the entire file and check the crc32 */\n        MZ_ZIP_FLAG_WRITE_ZIP64 = 0x4000,               /* always use the zip64 file format, instead of the original zip file format with automatic switch to zip64. Use as flags parameter with mz_zip_writer_init*_v2 */\n        MZ_ZIP_FLAG_WRITE_ALLOW_READING = 0x8000,\n        MZ_ZIP_FLAG_ASCII_FILENAME = 0x10000,\n        /*After adding a compressed file, seek back\n        to local file header and set the correct sizes*/\n        MZ_ZIP_FLAG_WRITE_HEADER_SET_SIZE = 0x20000,\n        MZ_ZIP_FLAG_READ_ALLOW_WRITING = 0x40000\n    } mz_zip_flags;\n\n    typedef enum\n    {\n        MZ_ZIP_TYPE_INVALID = 0,\n        MZ_ZIP_TYPE_USER,\n        MZ_ZIP_TYPE_MEMORY,\n        MZ_ZIP_TYPE_HEAP,\n        MZ_ZIP_TYPE_FILE,\n        MZ_ZIP_TYPE_CFILE,\n        MZ_ZIP_TOTAL_TYPES\n    } mz_zip_type;\n\n    /* miniz error codes. Be sure to update mz_zip_get_error_string() if you add or modify this enum. */\n    typedef enum\n    {\n        MZ_ZIP_NO_ERROR = 0,\n        MZ_ZIP_UNDEFINED_ERROR,\n        MZ_ZIP_TOO_MANY_FILES,\n        MZ_ZIP_FILE_TOO_LARGE,\n        MZ_ZIP_UNSUPPORTED_METHOD,\n        MZ_ZIP_UNSUPPORTED_ENCRYPTION,\n        MZ_ZIP_UNSUPPORTED_FEATURE,\n        MZ_ZIP_FAILED_FINDING_CENTRAL_DIR,\n        MZ_ZIP_NOT_AN_ARCHIVE,\n        MZ_ZIP_INVALID_HEADER_OR_CORRUPTED,\n        MZ_ZIP_UNSUPPORTED_MULTIDISK,\n        MZ_ZIP_DECOMPRESSION_FAILED,\n        MZ_ZIP_COMPRESSION_FAILED,\n        MZ_ZIP_UNEXPECTED_DECOMPRESSED_SIZE,\n        MZ_ZIP_CRC_CHECK_FAILED,\n        MZ_ZIP_UNSUPPORTED_CDIR_SIZE,\n        MZ_ZIP_ALLOC_FAILED,\n        MZ_ZIP_FILE_OPEN_FAILED,\n        MZ_ZIP_FILE_CREATE_FAILED,\n        MZ_ZIP_FILE_WRITE_FAILED,\n        MZ_ZIP_FILE_READ_FAILED,\n        MZ_ZIP_FILE_CLOSE_FAILED,\n        MZ_ZIP_FILE_SEEK_FAILED,\n        MZ_ZIP_FILE_STAT_FAILED,\n        MZ_ZIP_INVALID_PARAMETER,\n        MZ_ZIP_INVALID_FILENAME,\n        MZ_ZIP_BUF_TOO_SMALL,\n        MZ_ZIP_INTERNAL_ERROR,\n        MZ_ZIP_FILE_NOT_FOUND,\n        MZ_ZIP_ARCHIVE_TOO_LARGE,\n        MZ_ZIP_VALIDATION_FAILED,\n        MZ_ZIP_WRITE_CALLBACK_FAILED,\n        MZ_ZIP_TOTAL_ERRORS\n    } mz_zip_error;\n\n    typedef struct\n    {\n        mz_uint64 m_archive_size;\n        mz_uint64 m_central_directory_file_ofs;\n\n        /* We only support up to UINT32_MAX files in zip64 mode. */\n        mz_uint32 m_total_files;\n        mz_zip_mode m_zip_mode;\n        mz_zip_type m_zip_type;\n        mz_zip_error m_last_error;\n\n        mz_uint64 m_file_offset_alignment;\n\n        mz_alloc_func m_pAlloc;\n        mz_free_func m_pFree;\n        mz_realloc_func m_pRealloc;\n        void *m_pAlloc_opaque;\n\n        mz_file_read_func m_pRead;\n        mz_file_write_func m_pWrite;\n        mz_file_needs_keepalive m_pNeeds_keepalive;\n        void *m_pIO_opaque;\n\n        mz_zip_internal_state *m_pState;\n\n    } mz_zip_archive;\n\n    typedef struct\n    {\n        mz_zip_archive *pZip;\n        mz_uint flags;\n\n        int status;\n\n        mz_uint64 read_buf_size, read_buf_ofs, read_buf_avail, comp_remaining, out_buf_ofs, cur_file_ofs;\n        mz_zip_archive_file_stat file_stat;\n        void *pRead_buf;\n        void *pWrite_buf;\n\n        size_t out_blk_remain;\n\n        tinfl_decompressor inflator;\n\n#ifdef MINIZ_DISABLE_ZIP_READER_CRC32_CHECKS\n        mz_uint padding;\n#else\n    mz_uint file_crc32;\n#endif\n\n    } mz_zip_reader_extract_iter_state;\n\n    /* -------- ZIP reading */\n\n    /* Inits a ZIP archive reader. */\n    /* These functions read and validate the archive's central directory. */\n    MINIZ_EXPORT mz_bool mz_zip_reader_init(mz_zip_archive *pZip, mz_uint64 size, mz_uint flags);\n\n    MINIZ_EXPORT mz_bool mz_zip_reader_init_mem(mz_zip_archive *pZip, const void *pMem, size_t size, mz_uint flags);\n\n#ifndef MINIZ_NO_STDIO\n    /* Read a archive from a disk file. */\n    /* file_start_ofs is the file offset where the archive actually begins, or 0. */\n    /* actual_archive_size is the true total size of the archive, which may be smaller than the file's actual size on disk. If zero the entire file is treated as the archive. */\n    MINIZ_EXPORT mz_bool mz_zip_reader_init_file(mz_zip_archive *pZip, const char *pFilename, mz_uint32 flags);\n    MINIZ_EXPORT mz_bool mz_zip_reader_init_file_v2(mz_zip_archive *pZip, const char *pFilename, mz_uint flags, mz_uint64 file_start_ofs, mz_uint64 archive_size);\n\n    /* Read an archive from an already opened FILE, beginning at the current file position. */\n    /* The archive is assumed to be archive_size bytes long. If archive_size is 0, then the entire rest of the file is assumed to contain the archive. */\n    /* The FILE will NOT be closed when mz_zip_reader_end() is called. */\n    MINIZ_EXPORT mz_bool mz_zip_reader_init_cfile(mz_zip_archive *pZip, MZ_FILE *pFile, mz_uint64 archive_size, mz_uint flags);\n#endif\n\n    /* Ends archive reading, freeing all allocations, and closing the input archive file if mz_zip_reader_init_file() was used. */\n    MINIZ_EXPORT mz_bool mz_zip_reader_end(mz_zip_archive *pZip);\n\n    /* -------- ZIP reading or writing */\n\n    /* Clears a mz_zip_archive struct to all zeros. */\n    /* Important: This must be done before passing the struct to any mz_zip functions. */\n    MINIZ_EXPORT void mz_zip_zero_struct(mz_zip_archive *pZip);\n\n    MINIZ_EXPORT mz_zip_mode mz_zip_get_mode(mz_zip_archive *pZip);\n    MINIZ_EXPORT mz_zip_type mz_zip_get_type(mz_zip_archive *pZip);\n\n    /* Returns the total number of files in the archive. */\n    MINIZ_EXPORT mz_uint mz_zip_reader_get_num_files(mz_zip_archive *pZip);\n\n    MINIZ_EXPORT mz_uint64 mz_zip_get_archive_size(mz_zip_archive *pZip);\n    MINIZ_EXPORT mz_uint64 mz_zip_get_archive_file_start_offset(mz_zip_archive *pZip);\n    MINIZ_EXPORT MZ_FILE *mz_zip_get_cfile(mz_zip_archive *pZip);\n\n    /* Reads n bytes of raw archive data, starting at file offset file_ofs, to pBuf. */\n    MINIZ_EXPORT size_t mz_zip_read_archive_data(mz_zip_archive *pZip, mz_uint64 file_ofs, void *pBuf, size_t n);\n\n    /* All mz_zip funcs set the m_last_error field in the mz_zip_archive struct. These functions retrieve/manipulate this field. */\n    /* Note that the m_last_error functionality is not thread safe. */\n    MINIZ_EXPORT mz_zip_error mz_zip_set_last_error(mz_zip_archive *pZip, mz_zip_error err_num);\n    MINIZ_EXPORT mz_zip_error mz_zip_peek_last_error(mz_zip_archive *pZip);\n    MINIZ_EXPORT mz_zip_error mz_zip_clear_last_error(mz_zip_archive *pZip);\n    MINIZ_EXPORT mz_zip_error mz_zip_get_last_error(mz_zip_archive *pZip);\n    MINIZ_EXPORT const char *mz_zip_get_error_string(mz_zip_error mz_err);\n\n    /* MZ_TRUE if the archive file entry is a directory entry. */\n    MINIZ_EXPORT mz_bool mz_zip_reader_is_file_a_directory(mz_zip_archive *pZip, mz_uint file_index);\n\n    /* MZ_TRUE if the file is encrypted/strong encrypted. */\n    MINIZ_EXPORT mz_bool mz_zip_reader_is_file_encrypted(mz_zip_archive *pZip, mz_uint file_index);\n\n    /* MZ_TRUE if the compression method is supported, and the file is not encrypted, and the file is not a compressed patch file. */\n    MINIZ_EXPORT mz_bool mz_zip_reader_is_file_supported(mz_zip_archive *pZip, mz_uint file_index);\n\n    /* Retrieves the filename of an archive file entry. */\n    /* Returns the number of bytes written to pFilename, or if filename_buf_size is 0 this function returns the number of bytes needed to fully store the filename. */\n    MINIZ_EXPORT mz_uint mz_zip_reader_get_filename(mz_zip_archive *pZip, mz_uint file_index, char *pFilename, mz_uint filename_buf_size);\n\n    /* Attempts to locates a file in the archive's central directory. */\n    /* Valid flags: MZ_ZIP_FLAG_CASE_SENSITIVE, MZ_ZIP_FLAG_IGNORE_PATH */\n    /* Returns -1 if the file cannot be found. */\n    MINIZ_EXPORT int mz_zip_reader_locate_file(mz_zip_archive *pZip, const char *pName, const char *pComment, mz_uint flags);\n    MINIZ_EXPORT mz_bool mz_zip_reader_locate_file_v2(mz_zip_archive *pZip, const char *pName, const char *pComment, mz_uint flags, mz_uint32 *file_index);\n\n    /* Returns detailed information about an archive file entry. */\n    MINIZ_EXPORT mz_bool mz_zip_reader_file_stat(mz_zip_archive *pZip, mz_uint file_index, mz_zip_archive_file_stat *pStat);\n\n    /* MZ_TRUE if the file is in zip64 format. */\n    /* A file is considered zip64 if it contained a zip64 end of central directory marker, or if it contained any zip64 extended file information fields in the central directory. */\n    MINIZ_EXPORT mz_bool mz_zip_is_zip64(mz_zip_archive *pZip);\n\n    /* Returns the total central directory size in bytes. */\n    /* The current max supported size is <= MZ_UINT32_MAX. */\n    MINIZ_EXPORT size_t mz_zip_get_central_dir_size(mz_zip_archive *pZip);\n\n    /* Extracts a archive file to a memory buffer using no memory allocation. */\n    /* There must be at least enough room on the stack to store the inflator's state (~34KB or so). */\n    MINIZ_EXPORT mz_bool mz_zip_reader_extract_to_mem_no_alloc(mz_zip_archive *pZip, mz_uint file_index, void *pBuf, size_t buf_size, mz_uint flags, void *pUser_read_buf, size_t user_read_buf_size);\n    MINIZ_EXPORT mz_bool mz_zip_reader_extract_file_to_mem_no_alloc(mz_zip_archive *pZip, const char *pFilename, void *pBuf, size_t buf_size, mz_uint flags, void *pUser_read_buf, size_t user_read_buf_size);\n\n    /* Extracts a archive file to a memory buffer. */\n    MINIZ_EXPORT mz_bool mz_zip_reader_extract_to_mem(mz_zip_archive *pZip, mz_uint file_index, void *pBuf, size_t buf_size, mz_uint flags);\n    MINIZ_EXPORT mz_bool mz_zip_reader_extract_file_to_mem(mz_zip_archive *pZip, const char *pFilename, void *pBuf, size_t buf_size, mz_uint flags);\n\n    /* Extracts a archive file to a dynamically allocated heap buffer. */\n    /* The memory will be allocated via the mz_zip_archive's alloc/realloc functions. */\n    /* Returns NULL and sets the last error on failure. */\n    MINIZ_EXPORT void *mz_zip_reader_extract_to_heap(mz_zip_archive *pZip, mz_uint file_index, size_t *pSize, mz_uint flags);\n    MINIZ_EXPORT void *mz_zip_reader_extract_file_to_heap(mz_zip_archive *pZip, const char *pFilename, size_t *pSize, mz_uint flags);\n\n    /* Extracts a archive file using a callback function to output the file's data. */\n    MINIZ_EXPORT mz_bool mz_zip_reader_extract_to_callback(mz_zip_archive *pZip, mz_uint file_index, mz_file_write_func pCallback, void *pOpaque, mz_uint flags);\n    MINIZ_EXPORT mz_bool mz_zip_reader_extract_file_to_callback(mz_zip_archive *pZip, const char *pFilename, mz_file_write_func pCallback, void *pOpaque, mz_uint flags);\n\n    /* Extract a file iteratively */\n    MINIZ_EXPORT mz_zip_reader_extract_iter_state *mz_zip_reader_extract_iter_new(mz_zip_archive *pZip, mz_uint file_index, mz_uint flags);\n    MINIZ_EXPORT mz_zip_reader_extract_iter_state *mz_zip_reader_extract_file_iter_new(mz_zip_archive *pZip, const char *pFilename, mz_uint flags);\n    MINIZ_EXPORT size_t mz_zip_reader_extract_iter_read(mz_zip_reader_extract_iter_state *pState, void *pvBuf, size_t buf_size);\n    MINIZ_EXPORT mz_bool mz_zip_reader_extract_iter_free(mz_zip_reader_extract_iter_state *pState);\n\n#ifndef MINIZ_NO_STDIO\n    /* Extracts a archive file to a disk file and sets its last accessed and modified times. */\n    /* This function only extracts files, not archive directory records. */\n    MINIZ_EXPORT mz_bool mz_zip_reader_extract_to_file(mz_zip_archive *pZip, mz_uint file_index, const char *pDst_filename, mz_uint flags);\n    MINIZ_EXPORT mz_bool mz_zip_reader_extract_file_to_file(mz_zip_archive *pZip, const char *pArchive_filename, const char *pDst_filename, mz_uint flags);\n\n    /* Extracts a archive file starting at the current position in the destination FILE stream. */\n    MINIZ_EXPORT mz_bool mz_zip_reader_extract_to_cfile(mz_zip_archive *pZip, mz_uint file_index, MZ_FILE *File, mz_uint flags);\n    MINIZ_EXPORT mz_bool mz_zip_reader_extract_file_to_cfile(mz_zip_archive *pZip, const char *pArchive_filename, MZ_FILE *pFile, mz_uint flags);\n#endif\n\n#if 0\n/* TODO */\n\ttypedef void *mz_zip_streaming_extract_state_ptr;\n\tmz_zip_streaming_extract_state_ptr mz_zip_streaming_extract_begin(mz_zip_archive *pZip, mz_uint file_index, mz_uint flags);\n\tmz_uint64 mz_zip_streaming_extract_get_size(mz_zip_archive *pZip, mz_zip_streaming_extract_state_ptr pState);\n\tmz_uint64 mz_zip_streaming_extract_get_cur_ofs(mz_zip_archive *pZip, mz_zip_streaming_extract_state_ptr pState);\n\tmz_bool mz_zip_streaming_extract_seek(mz_zip_archive *pZip, mz_zip_streaming_extract_state_ptr pState, mz_uint64 new_ofs);\n\tsize_t mz_zip_streaming_extract_read(mz_zip_archive *pZip, mz_zip_streaming_extract_state_ptr pState, void *pBuf, size_t buf_size);\n\tmz_bool mz_zip_streaming_extract_end(mz_zip_archive *pZip, mz_zip_streaming_extract_state_ptr pState);\n#endif\n\n    /* This function compares the archive's local headers, the optional local zip64 extended information block, and the optional descriptor following the compressed data vs. the data in the central directory. */\n    /* It also validates that each file can be successfully uncompressed unless the MZ_ZIP_FLAG_VALIDATE_HEADERS_ONLY is specified. */\n    MINIZ_EXPORT mz_bool mz_zip_validate_file(mz_zip_archive *pZip, mz_uint file_index, mz_uint flags);\n\n    /* Validates an entire archive by calling mz_zip_validate_file() on each file. */\n    MINIZ_EXPORT mz_bool mz_zip_validate_archive(mz_zip_archive *pZip, mz_uint flags);\n\n    /* Misc utils/helpers, valid for ZIP reading or writing */\n    MINIZ_EXPORT mz_bool mz_zip_validate_mem_archive(const void *pMem, size_t size, mz_uint flags, mz_zip_error *pErr);\n#ifndef MINIZ_NO_STDIO\n    MINIZ_EXPORT mz_bool mz_zip_validate_file_archive(const char *pFilename, mz_uint flags, mz_zip_error *pErr);\n#endif\n\n    /* Universal end function - calls either mz_zip_reader_end() or mz_zip_writer_end(). */\n    MINIZ_EXPORT mz_bool mz_zip_end(mz_zip_archive *pZip);\n\n    /* -------- ZIP writing */\n\n#ifndef MINIZ_NO_ARCHIVE_WRITING_APIS\n\n    /* Inits a ZIP archive writer. */\n    /*Set pZip->m_pWrite (and pZip->m_pIO_opaque) before calling mz_zip_writer_init or mz_zip_writer_init_v2*/\n    /*The output is streamable, i.e. file_ofs in mz_file_write_func always increases only by n*/\n    MINIZ_EXPORT mz_bool mz_zip_writer_init(mz_zip_archive *pZip, mz_uint64 existing_size);\n    MINIZ_EXPORT mz_bool mz_zip_writer_init_v2(mz_zip_archive *pZip, mz_uint64 existing_size, mz_uint flags);\n\n    MINIZ_EXPORT mz_bool mz_zip_writer_init_heap(mz_zip_archive *pZip, size_t size_to_reserve_at_beginning, size_t initial_allocation_size);\n    MINIZ_EXPORT mz_bool mz_zip_writer_init_heap_v2(mz_zip_archive *pZip, size_t size_to_reserve_at_beginning, size_t initial_allocation_size, mz_uint flags);\n\n#ifndef MINIZ_NO_STDIO\n    MINIZ_EXPORT mz_bool mz_zip_writer_init_file(mz_zip_archive *pZip, const char *pFilename, mz_uint64 size_to_reserve_at_beginning);\n    MINIZ_EXPORT mz_bool mz_zip_writer_init_file_v2(mz_zip_archive *pZip, const char *pFilename, mz_uint64 size_to_reserve_at_beginning, mz_uint flags);\n    MINIZ_EXPORT mz_bool mz_zip_writer_init_cfile(mz_zip_archive *pZip, MZ_FILE *pFile, mz_uint flags);\n#endif\n\n    /* Converts a ZIP archive reader object into a writer object, to allow efficient in-place file appends to occur on an existing archive. */\n    /* For archives opened using mz_zip_reader_init_file, pFilename must be the archive's filename so it can be reopened for writing. If the file can't be reopened, mz_zip_reader_end() will be called. */\n    /* For archives opened using mz_zip_reader_init_mem, the memory block must be growable using the realloc callback (which defaults to realloc unless you've overridden it). */\n    /* Finally, for archives opened using mz_zip_reader_init, the mz_zip_archive's user provided m_pWrite function cannot be NULL. */\n    /* Note: In-place archive modification is not recommended unless you know what you're doing, because if execution stops or something goes wrong before */\n    /* the archive is finalized the file's central directory will be hosed. */\n    MINIZ_EXPORT mz_bool mz_zip_writer_init_from_reader(mz_zip_archive *pZip, const char *pFilename);\n    MINIZ_EXPORT mz_bool mz_zip_writer_init_from_reader_v2(mz_zip_archive *pZip, const char *pFilename, mz_uint flags);\n\n    /* Adds the contents of a memory buffer to an archive. These functions record the current local time into the archive. */\n    /* To add a directory entry, call this method with an archive name ending in a forwardslash with an empty buffer. */\n    /* level_and_flags - compression level (0-10, see MZ_BEST_SPEED, MZ_BEST_COMPRESSION, etc.) logically OR'd with zero or more mz_zip_flags, or just set to MZ_DEFAULT_COMPRESSION. */\n    MINIZ_EXPORT mz_bool mz_zip_writer_add_mem(mz_zip_archive *pZip, const char *pArchive_name, const void *pBuf, size_t buf_size, mz_uint level_and_flags);\n\n    /* Like mz_zip_writer_add_mem(), except you can specify a file comment field, and optionally supply the function with already compressed data. */\n    /* uncomp_size/uncomp_crc32 are only used if the MZ_ZIP_FLAG_COMPRESSED_DATA flag is specified. */\n    MINIZ_EXPORT mz_bool mz_zip_writer_add_mem_ex(mz_zip_archive *pZip, const char *pArchive_name, const void *pBuf, size_t buf_size, const void *pComment, mz_uint16 comment_size, mz_uint level_and_flags,\n                                                  mz_uint64 uncomp_size, mz_uint32 uncomp_crc32);\n\n    MINIZ_EXPORT mz_bool mz_zip_writer_add_mem_ex_v2(mz_zip_archive *pZip, const char *pArchive_name, const void *pBuf, size_t buf_size, const void *pComment, mz_uint16 comment_size, mz_uint level_and_flags,\n                                                     mz_uint64 uncomp_size, mz_uint32 uncomp_crc32, MZ_TIME_T *last_modified, const char *user_extra_data_local, mz_uint user_extra_data_local_len,\n                                                     const char *user_extra_data_central, mz_uint user_extra_data_central_len);\n\n    /* Adds the contents of a file to an archive. This function also records the disk file's modified time into the archive. */\n    /* File data is supplied via a read callback function. User mz_zip_writer_add_(c)file to add a file directly.*/\n    MINIZ_EXPORT mz_bool mz_zip_writer_add_read_buf_callback(mz_zip_archive *pZip, const char *pArchive_name, mz_file_read_func read_callback, void *callback_opaque, mz_uint64 max_size,\n                                                             const MZ_TIME_T *pFile_time, const void *pComment, mz_uint16 comment_size, mz_uint level_and_flags, const char *user_extra_data_local, mz_uint user_extra_data_local_len,\n                                                             const char *user_extra_data_central, mz_uint user_extra_data_central_len);\n\n#ifndef MINIZ_NO_STDIO\n    /* Adds the contents of a disk file to an archive. This function also records the disk file's modified time into the archive. */\n    /* level_and_flags - compression level (0-10, see MZ_BEST_SPEED, MZ_BEST_COMPRESSION, etc.) logically OR'd with zero or more mz_zip_flags, or just set to MZ_DEFAULT_COMPRESSION. */\n    MINIZ_EXPORT mz_bool mz_zip_writer_add_file(mz_zip_archive *pZip, const char *pArchive_name, const char *pSrc_filename, const void *pComment, mz_uint16 comment_size, mz_uint level_and_flags);\n\n    /* Like mz_zip_writer_add_file(), except the file data is read from the specified FILE stream. */\n    MINIZ_EXPORT mz_bool mz_zip_writer_add_cfile(mz_zip_archive *pZip, const char *pArchive_name, MZ_FILE *pSrc_file, mz_uint64 max_size,\n                                                 const MZ_TIME_T *pFile_time, const void *pComment, mz_uint16 comment_size, mz_uint level_and_flags, const char *user_extra_data_local, mz_uint user_extra_data_local_len,\n                                                 const char *user_extra_data_central, mz_uint user_extra_data_central_len);\n#endif\n\n    /* Adds a file to an archive by fully cloning the data from another archive. */\n    /* This function fully clones the source file's compressed data (no recompression), along with its full filename, extra data (it may add or modify the zip64 local header extra data field), and the optional descriptor following the compressed data. */\n    MINIZ_EXPORT mz_bool mz_zip_writer_add_from_zip_reader(mz_zip_archive *pZip, mz_zip_archive *pSource_zip, mz_uint src_file_index);\n\n    /* Finalizes the archive by writing the central directory records followed by the end of central directory record. */\n    /* After an archive is finalized, the only valid call on the mz_zip_archive struct is mz_zip_writer_end(). */\n    /* An archive must be manually finalized by calling this function for it to be valid. */\n    MINIZ_EXPORT mz_bool mz_zip_writer_finalize_archive(mz_zip_archive *pZip);\n\n    /* Finalizes a heap archive, returning a pointer to the heap block and its size. */\n    /* The heap block will be allocated using the mz_zip_archive's alloc/realloc callbacks. */\n    MINIZ_EXPORT mz_bool mz_zip_writer_finalize_heap_archive(mz_zip_archive *pZip, void **ppBuf, size_t *pSize);\n\n    /* Ends archive writing, freeing all allocations, and closing the output file if mz_zip_writer_init_file() was used. */\n    /* Note for the archive to be valid, it *must* have been finalized before ending (this function will not do it for you). */\n    MINIZ_EXPORT mz_bool mz_zip_writer_end(mz_zip_archive *pZip);\n\n    /* -------- Misc. high-level helper functions: */\n\n    /* mz_zip_add_mem_to_archive_file_in_place() efficiently (but not atomically) appends a memory blob to a ZIP archive. */\n    /* Note this is NOT a fully safe operation. If it crashes or dies in some way your archive can be left in a screwed up state (without a central directory). */\n    /* level_and_flags - compression level (0-10, see MZ_BEST_SPEED, MZ_BEST_COMPRESSION, etc.) logically OR'd with zero or more mz_zip_flags, or just set to MZ_DEFAULT_COMPRESSION. */\n    /* TODO: Perhaps add an option to leave the existing central dir in place in case the add dies? We could then truncate the file (so the old central dir would be at the end) if something goes wrong. */\n    MINIZ_EXPORT mz_bool mz_zip_add_mem_to_archive_file_in_place(const char *pZip_filename, const char *pArchive_name, const void *pBuf, size_t buf_size, const void *pComment, mz_uint16 comment_size, mz_uint level_and_flags);\n    MINIZ_EXPORT mz_bool mz_zip_add_mem_to_archive_file_in_place_v2(const char *pZip_filename, const char *pArchive_name, const void *pBuf, size_t buf_size, const void *pComment, mz_uint16 comment_size, mz_uint level_and_flags, mz_zip_error *pErr);\n\n#ifndef MINIZ_NO_STDIO\n    /* Reads a single file from an archive into a heap block. */\n    /* If pComment is not NULL, only the file with the specified comment will be extracted. */\n    /* Returns NULL on failure. */\n    MINIZ_EXPORT void *mz_zip_extract_archive_file_to_heap(const char *pZip_filename, const char *pArchive_name, size_t *pSize, mz_uint flags);\n    MINIZ_EXPORT void *mz_zip_extract_archive_file_to_heap_v2(const char *pZip_filename, const char *pArchive_name, const char *pComment, size_t *pSize, mz_uint flags, mz_zip_error *pErr);\n#endif\n\n#endif /* #ifndef MINIZ_NO_ARCHIVE_WRITING_APIS */\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* MINIZ_NO_ARCHIVE_APIS */\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 4.671875,
          "content": "## Miniz\n\nMiniz is a lossless, high performance data compression library in a single source file that implements the zlib (RFC 1950) and Deflate (RFC 1951) compressed data format specification standards. It supports the most commonly used functions exported by the zlib library, but is a completely independent implementation so zlib's licensing requirements do not apply. Miniz also contains simple to use functions for writing .PNG format image files and reading/writing/appending .ZIP format archives. Miniz's compression speed has been tuned to be comparable to zlib's, and it also has a specialized real-time compressor function designed to compare well against fastlz/minilzo.\n\n## Usage\n\nReleases are available at the [releases page](https://github.com/richgel999/miniz/releases) as a pair of `miniz.c`/`miniz.h` files which can be simply added to a project. To create this file pair the different source and header files are [amalgamated](https://www.sqlite.org/amalgamation.html) during build. Alternatively use as cmake or meson module (or build system of your choice).\n\n## Features\n\n* MIT licensed\n* A portable, single source and header file library written in plain C. Tested with GCC, clang and Visual Studio.\n* Easily tuned and trimmed down by defines\n* A drop-in replacement for zlib's most used API's (tested in several open source projects that use zlib, such as libpng and libzip).\n* Fills a single threaded performance vs. compression ratio gap between several popular real-time compressors and zlib. For example, at level 1, miniz.c compresses around 5-9% better than minilzo, but is approx. 35% slower. At levels 2-9, miniz.c is designed to compare favorably against zlib's ratio and speed. See the miniz performance comparison page for example timings.\n* Not a block based compressor: miniz.c fully supports stream based processing using a coroutine-style implementation. The zlib-style API functions can be called a single byte at a time if that's all you've got.\n* Easy to use. The low-level compressor (tdefl) and decompressor (tinfl) have simple state structs which can be saved/restored as needed with simple memcpy's. The low-level codec API's don't use the heap in any way.\n* Entire inflater (including optional zlib header parsing and Adler-32 checking) is implemented in a single function as a coroutine, which is separately available in a small (~550 line) source file: miniz_tinfl.c\n* A fairly complete (but totally optional) set of .ZIP archive manipulation and extraction API's. The archive functionality is intended to solve common problems encountered in embedded, mobile, or game development situations. (The archive API's are purposely just powerful enough to write an entire archiver given a bit of additional higher-level logic.)\n\n## Building miniz - Using vcpkg\n\nYou can download and install miniz using the [vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\n\n    git clone https://github.com/Microsoft/vcpkg.git\n    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n    ./vcpkg install miniz\n\nThe miniz port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\n## Known Problems\n\n* No support for encrypted archives. Not sure how useful this stuff is in practice.\n* Minimal documentation. The assumption is that the user is already familiar with the basic zlib API. I need to write an API wiki - for now I've tried to place key comments before each enum/API, and I've included 6 examples that demonstrate how to use the module's major features.\n\n## Special Thanks\n\nThanks to Alex Evans for the PNG writer function. Also, thanks to Paul Holden and Thorsten Scheuermann for feedback and testing, Matt Pritchard for all his encouragement, and Sean Barrett's various public domain libraries for inspiration (and encouraging me to write miniz.c in C, which was much more enjoyable and less painful than I thought it would be considering I've been programming in C++ for so long).\n\nThanks to Bruce Dawson for reporting a problem with the level_and_flags archive API parameter (which is fixed in v1.12) and general feedback, and Janez Zemva for indirectly encouraging me into writing more examples.\n\n## Patents\n\nI was recently asked if miniz avoids patent issues. miniz purposely uses the same core algorithms as the ones used by zlib. The compressor uses vanilla hash chaining as described [here](https://datatracker.ietf.org/doc/html/rfc1951#section-4). Also see the [gzip FAQ](https://web.archive.org/web/20160308045258/http://www.gzip.org/#faq11). In my opinion, if miniz falls prey to a patent attack then zlib/gzip are likely to be at serious risk too.\n"
        },
        {
          "name": "test.sh",
          "type": "blob",
          "size": 0.783203125,
          "content": "#!/bin/bash\n\nset -e\n\n. amalgamate.sh\n\ncat << \"EOF\" > miniz_export.h\n#ifndef MINIZ_EXPORT\n#define MINIZ_EXPORT\n#endif\nEOF\ng++ tests/miniz_tester.cpp tests/timer.cpp amalgamation/miniz.c -o miniz_tester -I. -ggdb -O2\n\nfor i in 1 2 3 4 5 6\ndo\n    gcc examples/example$i.c amalgamation/miniz.c -o example$i -lm -I. -ggdb\ndone\n\nmkdir -p test_scratch\nif ! test -e \"test_scratch/linux-4.8.11\"\nthen\n    cd test_scratch\n    wget https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.8.11.tar.xz -O linux-4.8.11.tar.xz\n    tar xf linux-4.8.11.tar.xz\n    cd ..\nfi\n\ncd test_scratch\n../miniz_tester -v a linux-4.8.11\n../miniz_tester -v -r a linux-4.8.11\n../miniz_tester -v -b -r a linux-4.8.11\n../miniz_tester -v -a a linux-4.8.11\n\nmkdir -p large_file\ntruncate -s 5G large_file/lf\n../miniz_tester -v -a a large_file\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}