{
  "metadata": {
    "timestamp": 1736565999976,
    "page": 980,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "felixguendling/cista",
      "stars": 1877,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 1.0927734375,
          "content": "BasedOnStyle: Google\nColumnLimit: 80\nIndentWidth: 2\nLanguage: Cpp\nDerivePointerAlignment: false\nPointerAlignment: Left\nAccessModifierOffset: -2\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nAlignTrailingComments: false\nKeepEmptyLinesAtTheStartOfBlocks: true\nAllowShortCaseLabelsOnASingleLine: true\nAlwaysBreakTemplateDeclarations: true\nSpacesBeforeTrailingComments: 2\nIncludeBlocks: Preserve\nIncludeCategories:\n  - Regex: '^<.*\\.h>'\n    Priority: 1\n  - Regex: '^<c.*'\n    Priority: 2\n  - Regex: '^<.*'\n    Priority: 4\n  - Regex: '.*'\n    Priority: 5\n---\nBasedOnStyle: Google\nColumnLimit: 80\nIndentWidth: 2\nLanguage: ObjC\nDerivePointerAlignment: false\nPointerAlignment: Left\nAccessModifierOffset: -2\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nAlignTrailingComments: false\nKeepEmptyLinesAtTheStartOfBlocks: true\nAllowShortCaseLabelsOnASingleLine: true\nAlwaysBreakTemplateDeclarations: true\nSpacesBeforeTrailingComments: 2\nIncludeBlocks: Preserve\nIncludeCategories:\n  - Regex: '^<.*\\.h>'\n    Priority: 1\n  - Regex: '^<c.*'\n    Priority: 3\n  - Regex: '^<.*'\n    Priority: 4\n  - Regex: '.*'\n    Priority: 5\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0595703125,
          "content": "/*build*\n/.vscode\n/.idea\n/out\n/.vs\n/CMakeSettings.json\n*.bin\n"
        },
        {
          "name": "CMake",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 7.505859375,
          "content": "cmake_minimum_required(VERSION 3.8)\n\nif (NOT DEFINED PROJECT_NAME AND CISTA_HASH STREQUAL \"FNV1A\")\n  set(CISTA_INSTALL ON)\nendif()\n\nproject(cista LANGUAGES C CXX VERSION 0.7)\n\ninclude(GNUInstallDirs)\n\nif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\" OR\n    \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"AppleClang\")\n  set(cista-compile-flags\n     -Wno-unknown-warning-option\n     -Wno-global-constructors\n     -Wno-exit-time-destructors\n     -fno-strict-aliasing\n     -Weverything\n     -Wno-c++98-compat\n     -Wno-c++98-compat-pedantic\n     -Wno-newline-eof\n     -Wno-missing-prototypes\n     -Wno-padded\n     -Wno-double-promotion\n     -Wno-undef\n     -Wno-undefined-reinterpret-cast\n     -Wno-float-conversion\n     -Wno-gnu-zero-variadic-macro-arguments\n     -Wno-unknown-pragmas\n     -Wno-documentation-unknown-command\n     -Wno-reserved-identifier\n     -Wno-weak-vtables\n     -Wno-unneeded-member-function\n     -Wno-unused-member-function\n     -Wno-unsafe-buffer-usage\n     -Wno-deprecated-declarations\n     -Wno-ctad-maybe-unsupported\n     -Wno-self-assign-overloaded\n     -Wno-switch-default\n     -Werror\n  )\nelseif(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n  set(cista-compile-flags -Wall -Wextra)\nendif()\n\noption(CISTA_FMT \"add libfmt support\" ON)\noption(CISTA_ZERO_OUT \"zero out fresh memory for valgrind\" OFF)\noption(CISTA_COVERAGE \"generate coverage report\" OFF)\noption(CISTA_GENERATE_TO_TUPLE \"generate include/cista/reflection/to_tuple.h\" OFF)\noption(CISTA_USE_MIMALLOC \"compile with mimalloc support\" OFF)\nset(CISTA_HASH \"FNV1A\" CACHE STRING \"Options: FNV1A XXH3 WYHASH WYHASH_FASTEST\")\n\nadd_library(cista INTERFACE)\nif (CISTA_HASH STREQUAL \"XXH3\")\n  add_subdirectory(tools/xxh3)\n  target_link_libraries(cista INTERFACE xxh3)\nelseif(CISTA_HASH STREQUAL \"WYHASH\" OR CISTA_HASH STREQUAL \"WYHASH_FASTEST\")\n  add_subdirectory(tools/wyhash)\n  target_link_libraries(cista INTERFACE wyhash)\nendif()\ntarget_compile_definitions(cista INTERFACE CISTA_${CISTA_HASH}=1)\nif (CISTA_ZERO_OUT)\n  target_compile_definitions(cista INTERFACE CISTA_ZERO_OUT=1)\nendif()\nif (CISTA_USE_MIMALLOC)\n  target_compile_definitions(cista INTERFACE CISTA_USE_MIMALLOC=1)\nendif()\nif (CISTA_FMT)\n  target_compile_definitions(cista INTERFACE CISTA_FMT)\nendif()\ntarget_include_directories(cista SYSTEM INTERFACE\n  $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/include>\n  $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)\ntarget_compile_features(cista INTERFACE cxx_std_17)\n\nif (${CISTA_GENERATE_TO_TUPLE})\n  add_subdirectory(tools/to_tuple_generator EXCLUDE_FROM_ALL)\n  add_custom_target(generate_to_tuple\n    COMMAND to_tuple_generator\n      64  # max number of supported member fields\n    > ${CMAKE_CURRENT_SOURCE_DIR}/include/cista/reflection/to_tuple.h\n  )\n  add_dependencies(cista generate_to_tuple)\nendif()\n\nadd_subdirectory(tools/doctest EXCLUDE_FROM_ALL)\n\nfile(GLOB_RECURSE cista-include-files include/*.h*)\n\nadd_subdirectory(tools/uniter EXCLUDE_FROM_ALL)\nadd_custom_command(\n  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/cista.h\n  COMMAND uniter\n    ${CMAKE_CURRENT_SOURCE_DIR}/LICENSE\n    ${CMAKE_CURRENT_SOURCE_DIR}/include\n    ${CMAKE_CURRENT_SOURCE_DIR}/include/cista/serialization.h\n    ${CMAKE_CURRENT_SOURCE_DIR}/include/cista/reflection/comparable.h\n    ${CMAKE_CURRENT_SOURCE_DIR}/include/cista/reflection/printable.h\n    ${CMAKE_CURRENT_SOURCE_DIR}/include/cista/reflection/member_index.h\n  > ${CMAKE_CURRENT_BINARY_DIR}/cista.h\n  DEPENDS ${cista-include-files}\n)\n\nfile(GLOB_RECURSE cista-test-files test/*.cc)\nadd_executable(cista-test-single-header EXCLUDE_FROM_ALL ${cista-test-files} ${CMAKE_CURRENT_BINARY_DIR}/cista.h)\ntarget_link_libraries(cista-test-single-header cista-doctest)\ntarget_include_directories(cista-test-single-header PRIVATE ${CMAKE_CURRENT_BINARY_DIR})\ntarget_compile_options(cista-test-single-header PRIVATE ${cista-compile-flags})\ntarget_compile_definitions(cista-test-single-header PRIVATE SINGLE_HEADER)\ntarget_compile_features(cista-test-single-header PRIVATE cxx_std_17)\nif (CISTA_ZERO_OUT)\n  target_compile_definitions(cista-test-single-header PRIVATE CISTA_ZERO_OUT=1)\nendif()\n\nadd_executable(cista-test EXCLUDE_FROM_ALL ${cista-test-files})\ntarget_compile_options(cista-test PRIVATE ${cista-compile-flags})\ntarget_link_libraries(cista-test cista-doctest cista)\nif(CISTA_COVERAGE)\n  target_compile_options(cista-test PRIVATE -fprofile-arcs -ftest-coverage)\n  set_target_properties(cista-test PROPERTIES LINK_FLAGS --coverage)\nendif()\n\nadd_custom_target(cista-coverage\n  rm -rf *.info &&\n  find . -name \"*.gcda\" -delete &&\n  ./cista-test &&\n  lcov --directory . --capture --output-file cov.info &&\n  lcov -r cov.info \"*usr/include/*\" -o cov.info &&\n  lcov -r cov.info \"*doctest*\" -o cov.info &&\n  lcov -r cov.info \"*test/*.cc\" -o cov.info &&\n  lcov -r cov.info \"*v1*\" -o cov.info\n)\nadd_dependencies(cista-coverage cista-test)\n\nif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\" OR\n    \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"AppleClang\")\n  message(STATUS \"Cista fuzzing enabled\")\n  set(cista-fuzz-targets \"\")\n  file(GLOB_RECURSE fuzz-files fuzz/*.cc)\n  foreach(fuzz-file ${fuzz-files})\n    get_filename_component(test-name ${fuzz-file} NAME_WE)\n\n    add_executable(cista-fuzz-${test-name}-main EXCLUDE_FROM_ALL ${fuzz-file}\n            fuzz/dependencies/rtree_c/rtree_c.c)\n    target_link_libraries(cista-fuzz-${test-name}-main cista -fsanitize=address,undefined)\n    target_compile_options(cista-fuzz-${test-name}-main PRIVATE -g -O0)\n    target_compile_definitions(cista-fuzz-${test-name}-main PRIVATE MAIN)\n\n    add_executable(cista-fuzz-${test-name} EXCLUDE_FROM_ALL ${fuzz-file}\n            fuzz/dependencies/rtree_c/rtree_c.c)\n    target_link_libraries(cista-fuzz-${test-name} cista -fsanitize=address,undefined,fuzzer)\n    target_compile_options(cista-fuzz-${test-name} PRIVATE -g -O0 -fsanitize=address,fuzzer)\n\n    add_executable(cista-fuzz-${test-name}-seed EXCLUDE_FROM_ALL ${fuzz-file}\n            fuzz/dependencies/rtree_c/rtree_c.c)\n    target_link_libraries(cista-fuzz-${test-name}-seed cista)\n    target_compile_definitions(cista-fuzz-${test-name}-seed PRIVATE GENERATE_SEED)\n\n    add_custom_target(cista-fuzz-${test-name}-run\n      DEPENDS\n        cista-fuzz-${test-name}\n        cista-fuzz-${test-name}-seed\n      COMMAND\n        mkdir -p fuzz-${test-name}-corpus &&\n        ./cista-fuzz-${test-name}-seed ./fuzz-${test-name}-corpus/seed.bin &&\n        ./cista-fuzz-${test-name} ./fuzz-${test-name}-corpus -max_total_time=120\n    )\n\n    list(APPEND cista-fuzz-targets cista-fuzz-${test-name}-run)\n  endforeach()\n\n  add_custom_target(cista-fuzz)\n  add_dependencies(cista-fuzz ${cista-fuzz-targets})\nendif()\n\nadd_library(cista::cista ALIAS cista)\n\n# Export targets when not used via `add_subdirectory`\nif (CISTA_INSTALL)\n  include(CMakePackageConfigHelpers)\n  set(CISTA_CMAKE_CONFIG_DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/cista\")\n\n  configure_package_config_file(\n    ${CMAKE_CURRENT_LIST_DIR}/CMake/cistaConfig.cmake.in\n    ${CMAKE_CURRENT_BINARY_DIR}/cistaConfig.cmake\n    INSTALL_DESTINATION ${CISTA_CMAKE_CONFIG_DESTINATION}\n  )\n\n  install(\n    TARGETS cista\n    EXPORT cistaTargets\n    DESTINATION ${CMAKE_INSTALL_LIBDIR}\n  )\n\n  install(\n    EXPORT cistaTargets\n    NAMESPACE cista::\n    DESTINATION ${CISTA_CMAKE_CONFIG_DESTINATION}\n  )\n\n  install(\n    DIRECTORY \"include/\"\n    DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\"\n  )\n\n  write_basic_package_version_file(\n    \"${CMAKE_CURRENT_BINARY_DIR}/cistaConfigVersion.cmake\"\n    COMPATIBILITY SameMajorVersion\n  )\n\n  install(\n    FILES\n      \"${CMAKE_CURRENT_BINARY_DIR}/cistaConfig.cmake\"\n      \"${CMAKE_CURRENT_BINARY_DIR}/cistaConfigVersion.cmake\"\n    DESTINATION ${CISTA_CMAKE_CONFIG_DESTINATION}\n  )\nendif()\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0380859375,
          "content": "Copyright (c) 2018-2021 Felix Gündling\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.208984375,
          "content": "<p align=\"center\"><img src=\"logo.svg\"></p>\n\n<p align=\"center\">\n    <a href=\"https://isocpp.org/\">\n        <img src=\"https://img.shields.io/badge/language-C%2B%2B17-blue.svg\">\n    </a>\n    <a href=\"https://github.com/felixguendling/cista/actions?query=workflow%3A%22Linux+Build%22\">\n        <img src=\"https://github.com/felixguendling/cista/workflows/Linux%20Build/badge.svg\">\n    </a>\n    <a href=\"https://github.com/felixguendling/cista/actions?query=workflow%3A%22Windows+Build%22\">\n        <img src=\"https://github.com/felixguendling/cista/workflows/Windows%20Build/badge.svg\">\n    </a>\n    <a href=\"https://opensource.org/licenses/MIT\" >\n        <img src=\"https://img.shields.io/github/license/felixguendling/cista\">\n    </a>\n</p>\n\n# Simple C++ Serialization & Reflection.\n\nCista++ is a simple, open source (MIT license) C++17 compatible way of (de-)serializing C++ data structures.\n\n*Single header - no dependencies. No macros. No source code generation.*\n\n  - Raw performance - use your native structs. Supports modification/resizing of deserialized data!\n  - Supports complex and cyclic data structures including cyclic references, recursive data structures, etc.\n  - Save 50% memory: serialize directly to the filesystem if needed, no intermediate buffer required.\n  - Fuzzing-checked though continuous fuzzing using LLVMs LibFuzzer.\n  - Comes with a serializable high-performance hash map and hash set implementation based on [Google's Swiss Table](https://abseil.io/blog/20180927-swisstables).\n  - Reduce boilerplate code: automatic derivation of hash and equality functions.\n  - Built-in optional automatic data structure versioning through recursive type hashing.\n  - Optional check sum to prevent deserialization of corrupt data.\n  - Compatible with Clang, GCC, and MSVC\n\nThe underlying reflection mechanism can be used in [other ways](https://cista.rocks/#reflection), too!\n\n**Examples:**\n\nDownload the [latest release](https://github.com/felixguendling/cista/releases/latest/download/cista.h) and try it out.\n\nSimple example writing to a buffer:\n\n```cpp\nnamespace data = cista::raw;\nstruct my_struct {  // Define your struct.\n  int a_{0};\n  struct inner {\n      data::string b_;\n  } j;\n};\n\nstd::vector<unsigned char> buf;\n{  // Serialize.\n  my_struct obj{1, {data::string{\"test\"}}};\n  buf = cista::serialize(obj);\n}\n\n// Deserialize.\nauto deserialized = cista::deserialize<my_struct>(buf);\nassert(deserialized->j.b_ == data::string{\"test\"});\n```\n\nAdvanced example writing a hash map to a memory mapped file:\n\n```cpp\nnamespace data = cista::offset;\nconstexpr auto const MODE =  // opt. versioning + check sum\n    cista::mode::WITH_VERSION | cista::mode::WITH_INTEGRITY;\n\nstruct pos { int x, y; };\nusing pos_map =  // Automatic deduction of hash & equality\n    data::hash_map<data::vector<pos>,\n                   data::hash_set<data::string>>;\n\n{  // Serialize.\n  auto positions =\n      pos_map{{{{1, 2}, {3, 4}}, {\"hello\", \"cista\"}},\n              {{{5, 6}, {7, 8}}, {\"hello\", \"world\"}}};\n  cista::buf mmap{cista::mmap{\"data\"}};\n  cista::serialize<MODE>(mmap, positions);\n}\n\n// Deserialize.\nauto b = cista::mmap(\"data\", cista::mmap::protection::READ);\nauto positions = cista::deserialize<pos_map, MODE>(b);\n```\n\nAdvanced example showing support for non-aggregate types like derived classes or classes with custom constructors:\n\n```cpp\nnamespace data = cista::offset;\nconstexpr auto MODE = cista::mode::WITH_VERSION;\n\nstruct parent {\n  parent() = default;\n  explicit parent(int a) : x_{a}, y_{a} {}\n  auto cista_members() { return std::tie(x_, y_); }\n  int x_, y_;\n};\nstruct child : parent {\n  child() = default;\n  explicit child(int a) : parent{a}, z_{a} {}\n  auto cista_members() {\n    return std::tie(*static_cast<parent*>(this), z_);\n  }\n  int z_;\n};\n\n/*\n * Automatically defaulted for you:\n *   - de/serialization\n *   - hashing (use child in hash containers)\n *   - equality comparison\n *   - data structure version (\"type hash\")\n */\nusing t = data::hash_map<child, int>;\n\n// ... usage, serialization as in the previous examples\n```\n\n# Benchmarks\n\nHave a look at the [benchmark repository](https://github.com/felixguendling/cpp-serialization-benchmark) for more details.\n\n| Library                                               | Serialize      | Deserialize     | Fast Deserialize |   Traverse | Deserialize & Traverse |      Size  |\n| :---                                                  |           ---: |            ---: |             ---: |       ---: |                   ---: |       ---: |\n| [Cap’n Proto](https://capnproto.org/capnp-tool.html)  |       105 ms   |    **0.002 ms** |       **0.0 ms** |   356 ms   |               353 ms   |    50.5M   |\n| [cereal](https://uscilab.github.io/cereal/index.html) |       239 ms   |    197.000 ms   |                - |   125 ms   |               322 ms   |    37.8M   |\n| [Cista++](https://cista.rocks/) `offset`              |      **72 ms** |      0.053 ms   |       **0.0 ms** |   132 ms   |             **132 ms** |  **25.3M** |\n| [Cista++](https://cista.rocks/) `raw`                 |      3555 ms   |     68.900 ms   |        21.5 ms   | **112 ms** |             **133 ms** |   176.4M   |\n| [Flatbuffers](https://google.github.io/flatbuffers/)  |      2349 ms   |     15.400 ms   |       **0.0 ms** |   136 ms   |             **133 ms** |    63.0M   |\n\n\n# Use Cases\n\nReader and writer should have the same pointer width. Loading data on systems with a different byte order (endianess) is supported.\nExamples:\n\n  - Asset loading for all kinds of applications (i.e. game assets, GIS data, large graphs, etc.)\n  - Transferring data over network\n  - shared memory applications\n\nCurrently, only C++17 software can read/write data.\nBut it should be possible to generate accessors\nfor other programming languages, too.\n\n# Alternatives\n\nIf you need to be compatible with other programming languages\nor require protocol evolution (downward compatibility)\nyou should look for another solution:\n\n  - [Protocol Buffers](https://developers.google.com/protocol-buffers/)\n  - [Cap’n Proto](https://capnproto.org/)\n  - [Flatbuffers](https://google.github.io/flatbuffers/)\n  - [cereal](https://uscilab.github.io/cereal/)\n  - [Boost Serialization](https://www.boost.org/doc/libs/1_68_0/libs/serialization/doc/index.html)\n  - [MessagePack](https://msgpack.org/)\n  - [tser](https://github.com/KonanM/tser)\n  - [... many more](https://en.wikipedia.org/wiki/Comparison_of_data_serialization_formats)\n\n# Documentation\n\n* [Installation and Usage](https://github.com/felixguendling/cista/wiki/Installation-and-Usage)\n* [Serialization Reference](https://github.com/felixguendling/cista/wiki/Serialization-Reference)\n* [Custom (De-)Serialization Functions](https://github.com/felixguendling/cista/wiki/Custom-(De-)Serialization-Functions)\n* [Data Structure Versioning](https://github.com/felixguendling/cista/wiki/Data-Structure-Versioning)\n* [Hash Containers](https://github.com/felixguendling/cista/wiki/Hash-Containers)\n  * [Hashing Framework](https://github.com/felixguendling/cista/wiki/Hashing-Framework)\n  * [Equality Framework](https://github.com/felixguendling/cista/wiki/Equality-Framework)\n  * [Benchmark](https://github.com/felixguendling/cista/wiki/Hash-Map-Benchmark)\n* [Security](https://github.com/felixguendling/cista/wiki/Security)\n\n# Contribute\n\nFeel free to contribute (bug reports, pull requests, etc.)!\n"
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo.svg",
          "type": "blob",
          "size": 6.669921875,
          "content": "<svg id=\"svg\" version=\"1.1\" width=\"128\" height=\"128\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" >\n    <g id=\"svgg\" transform=\"scale(.3)\">\n        <path id=\"path0\" d=\"M0.313 2.805 C 0.159 5.930,0.168 5.984,0.748 5.625 C 0.975 5.485,1.161 4.257,1.161 2.896 L 1.161 0.422 3.772 0.287 L 6.383 0.152 3.417 0.076 L 0.450 -0.000 0.313 2.805 M197.679 0.340 C 194.469 1.392,3.841 97.221,2.760 98.326 C 0.696 100.438,0.777 95.981,0.793 205.996 C 0.809 316.407,0.725 311.360,2.574 313.418 C 4.111 315.127,197.911 411.605,199.808 411.605 C 202.819 411.605,396.081 314.764,397.575 312.507 L 398.646 310.888 398.646 206.411 C 398.646 148.949,398.516 101.469,398.356 100.900 C 397.611 98.245,399.298 99.129,299.211 48.937 C 197.875 -1.882,200.552 -0.601,197.679 0.340 M395.648 0.287 L 398.453 0.421 398.453 3.112 C 398.453 5.545,398.527 5.803,399.226 5.803 C 399.652 5.803,400.000 5.629,400.000 5.416 C 400.000 5.203,399.739 5.029,399.420 5.029 C 398.963 5.029,398.839 4.492,398.839 2.515 L 398.839 0.000 395.841 0.077 L 392.843 0.154 395.648 0.287 M288.394 58.704 C 336.799 82.906,376.402 102.795,376.402 102.901 C 376.402 103.218,200.440 191.103,199.807 191.103 C 199.173 191.103,23.211 103.218,23.211 102.901 C 23.211 102.567,198.996 14.744,199.710 14.722 C 200.082 14.710,239.990 34.502,288.394 58.704 M125.016 60.704 C 68.474 88.973,51.338 97.702,50.554 98.632 C 48.251 101.370,48.356 105.050,50.810 107.559 C 52.913 109.710,197.589 181.818,199.803 181.818 C 201.684 181.818,345.383 110.403,348.098 108.119 C 351.286 105.436,351.468 100.740,348.489 98.007 C 346.744 96.405,201.279 23.985,199.807 23.985 C 198.794 23.985,180.228 33.100,125.016 60.704 M203.283 40.318 L 206.576 41.952 206.576 102.983 L 206.576 164.015 203.490 165.566 C 199.712 167.466,199.901 167.466,196.123 165.566 L 193.037 164.015 193.037 102.944 L 193.037 41.873 196.228 40.309 C 200.152 38.386,199.384 38.385,203.283 40.318 M179.110 102.901 L 179.110 157.060 125.145 130.078 C 95.464 115.238,71.180 103.008,71.180 102.901 C 71.180 102.756,178.494 48.880,179.014 48.764 C 179.067 48.752,179.110 73.114,179.110 102.901 M274.468 75.918 C 303.936 90.652,328.046 102.834,328.046 102.989 C 328.046 103.144,303.849 115.376,274.275 130.170 L 220.503 157.068 220.503 103.099 C 220.503 73.416,220.590 49.130,220.696 49.130 C 220.802 49.130,244.999 61.184,274.468 75.918 M103.868 158.704 L 193.037 203.287 193.037 298.581 C 193.037 350.993,192.898 393.817,192.727 393.746 C 192.557 393.675,152.344 373.546,103.366 349.015 L 14.313 304.414 14.313 209.267 C 14.313 156.936,14.400 114.120,14.507 114.120 C 14.613 114.120,54.826 134.183,103.868 158.704 M384.913 209.381 L 384.913 304.643 295.745 349.227 L 206.576 393.810 206.576 298.549 L 206.576 203.287 295.648 158.725 C 344.637 134.216,384.763 114.153,384.816 114.141 C 384.869 114.130,384.913 156.988,384.913 209.381 M24.866 130.403 C 23.610 131.024,23.007 131.674,22.252 133.218 L 21.269 135.226 21.370 216.674 L 21.470 298.122 22.541 299.741 C 24.296 302.392,176.698 378.504,179.746 378.251 C 182.239 378.045,184.301 376.594,185.333 374.320 C 186.032 372.781,186.057 370.003,186.065 291.767 C 186.074 203.696,186.211 209.379,184.024 207.023 C 183.556 206.519,148.748 188.891,106.674 167.850 C 22.351 125.681,28.613 128.548,24.866 130.403 M293.037 167.736 C 217.220 205.681,215.089 206.800,214.072 209.175 C 213.276 211.036,213.276 372.330,214.072 374.190 C 215.152 376.714,217.677 378.337,220.525 378.337 C 222.281 378.337,373.759 302.898,375.760 301.027 C 378.355 298.600,378.131 306.044,378.260 218.182 C 378.324 174.458,378.267 137.603,378.134 136.281 C 377.708 132.066,375.569 129.895,371.659 129.708 L 369.246 129.594 293.037 167.736 M42.166 205.445 L 42.166 260.011 38.871 261.534 C 37.059 262.371,35.492 263.056,35.390 263.056 C 35.287 263.056,35.203 237.029,35.203 205.219 L 35.203 147.381 38.685 149.130 L 42.166 150.878 42.166 205.445 M364.410 205.420 L 364.410 263.451 360.928 261.702 L 357.447 259.954 357.447 205.416 L 357.447 150.879 360.832 149.153 C 362.693 148.204,364.260 147.419,364.313 147.408 C 364.367 147.398,364.410 173.503,364.410 205.420 M103.481 181.527 C 129.545 194.559,150.870 205.309,150.870 205.416 C 150.870 205.607,56.280 252.998,55.899 252.998 C 55.793 252.998,55.706 231.586,55.706 205.416 C 55.706 179.246,55.793 157.834,55.899 157.834 C 56.005 157.834,77.417 168.496,103.481 181.527 M343.907 205.416 C 343.907 231.586,343.820 252.998,343.714 252.998 C 343.334 252.998,248.743 205.607,248.743 205.416 C 248.743 205.207,343.129 157.892,343.617 157.855 C 343.777 157.843,343.907 179.246,343.907 205.416 M169.632 214.616 L 172.340 216.054 172.340 219.149 L 172.340 222.244 103.762 256.582 L 35.184 290.921 35.290 284.732 L 35.397 278.543 100.774 245.878 C 136.731 227.912,166.325 213.204,166.538 213.195 C 166.750 213.185,168.143 213.825,169.632 214.616 M298.839 245.938 L 364.410 278.722 364.410 284.816 L 364.410 290.909 295.745 256.577 L 227.079 222.245 227.079 219.137 L 227.079 216.030 229.884 214.614 C 231.426 213.836,232.819 213.188,232.978 213.176 C 233.138 213.163,262.775 227.906,298.839 245.938 M172.534 286.460 C 172.534 313.375,172.447 335.397,172.340 335.397 C 172.233 335.397,150.181 324.414,123.335 310.991 L 74.525 286.585 123.239 262.067 C 150.032 248.583,172.084 237.544,172.244 237.537 C 172.403 237.530,172.534 259.545,172.534 286.460 M276.200 262.053 L 325.096 286.581 276.282 310.989 C 249.434 324.413,227.380 335.397,227.273 335.397 C 227.167 335.397,227.079 313.375,227.079 286.460 C 227.079 259.545,227.130 237.524,227.192 237.524 C 227.254 237.524,249.308 248.562,276.200 262.053 M116.055 322.631 L 172.534 350.871 172.534 355.513 C 172.534 358.347,172.383 360.155,172.147 360.155 C 171.631 360.155,49.903 299.284,49.903 299.026 C 49.903 298.750,58.486 294.441,59.091 294.413 C 59.358 294.401,84.991 307.099,116.055 322.631 M345.257 296.607 C 347.706 297.826,349.710 298.915,349.710 299.026 C 349.710 299.284,227.982 360.155,227.466 360.155 C 227.230 360.155,227.079 358.347,227.079 355.513 L 227.079 350.871 283.462 322.652 C 314.473 307.132,340.061 294.424,340.325 294.412 C 340.588 294.400,342.808 295.388,345.257 296.607 M0.321 409.090 L 0.448 411.992 2.900 411.992 C 4.249 411.992,5.628 412.098,5.964 412.227 C 6.301 412.356,6.576 412.269,6.576 412.034 C 6.576 411.761,5.590 411.605,3.868 411.605 L 1.161 411.605 1.161 408.897 C 1.161 406.990,1.018 406.189,0.677 406.189 C 0.322 406.188,0.227 406.958,0.321 409.090 M398.453 408.897 L 398.453 411.605 395.745 411.605 C 394.255 411.605,393.036 411.736,393.036 411.896 C 393.035 412.055,394.341 412.128,395.937 412.058 L 398.839 411.931 398.839 409.282 C 398.839 407.085,398.955 406.603,399.516 406.456 C 400.026 406.323,399.978 406.268,399.323 406.234 C 398.499 406.192,398.453 406.334,398.453 408.897 \" stroke=\"none\" fill=\"#7f41fc\" fill-rule=\"evenodd\"></path>\n    </g>\n</svg>"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}