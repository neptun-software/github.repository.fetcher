{
  "metadata": {
    "timestamp": 1736565744516,
    "page": 664,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "vczh-libraries/GacUI",
      "stars": 2360,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.458984375,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.5791015625,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n#Vczh Libraries\n.Output/\nTest/Output/\nTest/Linux/**/Coverage/\nTools/*.exe\nTools/*.dll\nTest/GacUISrc/*/*.UI.error.txt\nTest/GacUISrc/*/*.UI.bin\nTest/GacUISrc/*/*.UI.x86.bin\nTest/GacUISrc/*/*.UI.x64.bin\nTest/GacUISrc/*/*.UI.txt\nTest/GacUISrc/*/Reflection.txt\nTest/GacUISrc/TestXml/TestXml.xml\n\n# User-specific files\n*/**/.vs/\n*.suo\n*.user\n*.sln.docstates\n.vs/\n\n# Build results\n\n*/**/[Dd]ebugNoReflection/\n*/**/[Dd]ebug/\n*/**/[Rr]elease/\n*/**/x64/\n*/**/build/\n*/**/[Bb]in/\n*/**/[Oo]bj/\n\n# Enable \"build/\" folder in the NuGet Packages folder since NuGet packages use it for MSBuild targets\n!packages/*/build/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n*_i.c\n*_p.c\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.log\n*.scc\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.db-*\n*.VC.opendb\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n*.ncrunch*\n.*crunch*.local.xml\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.Publish.xml\n\n# NuGet Packages Directory\n## TODO: If you have NuGet Package Restore enabled, uncomment the next line\n#packages/\n\n# Windows Azure Build Output\ncsx\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\nsql/\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.[Pp]ublish.xml\n*.pfx\n*.publishsettings\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file to a newer\n# Visual Studio version. Backup files are not needed, because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\nApp_Data/*.mdf\nApp_Data/*.ldf\n\n\n#LightSwitch generated files\nGeneratedArtifacts/\n_Pvt_Extensions/\nModelManifest.xml\n\n# =========================\n# Windows detritus\n# =========================\n\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Mac desktop service store files\n.DS_Store\n"
        },
        {
          "name": "Deprecated",
          "type": "tree",
          "content": null
        },
        {
          "name": "Import",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 0.08203125,
          "content": "See https://github.com/vczh-libraries/License/blob/master/README.md for the detail.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.4423828125,
          "content": "# GacUI\n\n**GPU Accelerated C++ User Interface, with WYSIWYG developing tools, XML supports, built-in data binding and MVVM features.**\n\n## License\n\n**Read the [LICENSE](https://github.com/vczh-libraries/GacUI/blob/master/LICENSE.md) first.**\n\nThis project is licensed under [the License repo](https://github.com/vczh-libraries/License).\n\nSource code in this repo is for reference only, please use the source code in [the Release repo](https://github.com/vczh-libraries/Release).\n\nYou are welcome to contribute to this repo by opening pull requests.\n\n## Document\n\nFor **Home Page**: click [here](http://vczh-libraries.github.io)\n\nFor **Gaclib**: click [here](http://vczh-libraries.github.io/doc/current/home.html)\n\nFor **GacUI**: click [here](http://vczh-libraries.github.io/doc/current/gacui/home.html)\n\n[gaclib.net](http://www.gaclib.net/) is a mirror to github pages above.\n\n## Content of This Project\n\n- The [Tutorial](http://vczh-libraries.github.io/doc/current/gacui/running.html) shows how to start using this marvelous GUI library.\n- The [Demos](http://vczh-libraries.github.io/demo.html) section shows you all demos using this GUI library.\n\n### Notice\n\nUsing this library requires you to use C++ source files directly in\n\n- The [Release folder](https://github.com/vczh-libraries/GacUI/tree/master/Release) for Vlpp, Workflow or GacUI.\n- The [GacGen.exe](https://github.com/vczh-libraries/GacUI/tree/master/Tools/GacGen) if you prefer to use XML to build your UI.\n\nAll other files are for library development only.\n\n### Content\n\nThis GUI library provides the following features:\n\n- Develop your GUI using pure C++, [Workflow](https://github.com/vczh-libraries/Workflow) script, XML or even JavaScript (under construction).\n- Cross-platform abilities.\n  - for **Windows**: [Release repo](https://github.com/vczh-libraries/Release)\n  - for **Linux**: [XGac repo](https://github.com/vczh-libraries/gGac) (beta release)\n  - for **macOS**: [iGac repo](https://github.com/vczh-libraries/iGac) (beta release)\n  - for running in **Browser** using WASM: (2.0)\n- Rich control library. Container controls supports MVC and virtual list mode.\n- Control template system. You can write your own.\n- GPU acceleration.\n- XML resource supports.\n  - You can use the provided [GacGen.exe](https://github.com/vczh-libraries/GacUI/tree/master/Tools/GacGen) to generate multiple XML files with binary resources (images) into a compressed binary format.\n  - This program will also generate C++ code behind for you. You can fill event handlers (but we suggest you use MVVM and Data Binding instead) in generated C++ files.\n  - If you update your UI, GacGen.exe will merge your modification in C++ code and modification in XML together to generate new C++ code behind. Your update will still exist.\n    - **NOTE**: You will see a very obvious mark `USERIMPL(/* ... */)` in the generated code. Here is where you want to add your code. All your modification outside of these places will be discarded on the next GacGen.exe run.\n- MVVM and Data Binding.\n  - You can define interfaces that required to build your own MVVM pattern in XML and [GacGen.exe](https://github.com/vczh-libraries/GacUI/tree/master/Tools/GacGen) will generate the C++ interface declaration for you.\n  - You can also use [Workflow](https://github.com/vczh-libraries/Workflow) expressions in Data Binding and statements in event handlers (instead of writing C++ code in code behind).\n\nhttps://gankra.github.io/blah/text-hates-you/  \nhttps://lord.io/text-editing-hates-you-too/\n"
        },
        {
          "name": "Release",
          "type": "tree",
          "content": null
        },
        {
          "name": "Source",
          "type": "tree",
          "content": null
        },
        {
          "name": "TODO.md",
          "type": "blob",
          "size": 20.9404296875,
          "content": "# TODO\n\n## Completed but not released (1.2.11.0)\n\n- Fixed:\n  - `#include <arm_acle.h>` is needed for `__yield` in `VlppOS.cpp`\n\n## Known Issues\n\n- Replace `LoadLibrary` with `GetModuleHandle` in `EnableCrossKernelCrashing`.\n- `GuiVirtualRepeatCompositionBase`.\n  - Eliminate double `ForceCalculateSizeImmediately()` calls in `TestCompositions_VirtualRepeat.cpp` (TODO) and related files.\n- FakeDialogService\n  - `FakeDialogServiceBase::ShowModalDialogAndDelete` place the window in the center of `owner` instead of the screen.\n  - Specify multiple extensions in one filter, exactly like Win32 API.\n  - Extensions not applied before checking file existance.\n- Expanding collapsing tree nodes cause the whole list to rebuild, which glitch during multiple passes of layout.\n  - Only affected items need to rebuild.\n- Bindable list control (optional)\n  - When a property referenced by `<att.XXXProperty>` is updated, the list item is not refreshed.\n    - Need to find a way to listen to the event.\n- For all list controls, adding item could cause flashing during rendering for about 1 flame.\n  - If this issue is solved, remove document in `Breaking changes from 1.0` and `List Controls`.\n- `controller(Unr|R)elatedPlugins` in `IGuiPlugin(Manager)?` lower dependency safety.\n  - Change `GUI_PLUGIN_NAME` to `GUI_PLUGIN_CONTROLLER_(UN)RELATED`.\n  - Remove the two parameters from `IGuiPlugin`, the macro above already specified it clear enough.\n  - Unrelated plugins are not allowed to depend on related plugins.\n\n## Known Issues (Unit Test)\n\n- Tests that assuming DarkSkin:\n  - `(H|V)(Tracker|Scroll)/Mouse`\n  - `ToolstripSplitButton`\n  - `GuiDatePicker/Mouse`\n- Tests that are OS awared:\n  - `GuiDatePicker`, `GuiDateComboBox`, inject unit test specific time and locale object. Otherwise Window and Linux will see different printed date in snapshots.\n- Same issue\n  - `(H|V)(Tracker|Scroll)/Mouse`\n    - when `Drag to Center` the handler should be highlighted, because the mouse is right above the handler.\n  - `GuiBindableDataGrid/ComboEditor`\n    - When a data grid cell editor is created under the mouse, the editor does not receive `MouseEvent` event.\n- `GuiScrollContainer`\n  - Only calling `Set(Horizontal|Vertical)AlwaysVisible(false)` doesn't make scrolls disappear. `SetVisible(false)` on scrolls are verified called.\n  - When the content is changed, configuration needs 2 idle frames to be correctly configured.\n- `GuiListItemTemplate/ArrangerAndAxis(WithScrolls)`\n  - items are not aligned to proper corner when scrolls are invisible.\n- Stop hard-coding coordinates:\n  - `GetListItemLocation`.\n  - `GuiToolstripMenuBar/Cascade/ClickSubMenu`'s `Hover on File/New` try to avoid specifying relative coordinate just because half of the menu item is covered.\n\n## Release (optional)\n\n- GacUI Binary Resource (when new features are added)\n  - Upgrade GacUI XML Resource to 1.3, force on all resources instead of only depended or depending resource.\n  - Require binary pattern \"[GXR-1.3]\" at the beginning of the binary resource.\n  - Resource compiler and loader will check the version and only accept 1.3.\n\n## Release Milestone (1.2.11.0)\n\n- GacUI\n  - Fix `Global Objects` in `GacUI.h`.\n  - Diff algorithm based on `RenderingDom::domId` (begins from -1, not consecutive)\n    - Add diff commands\n      - Add a new `IGuiRemoteProtocol` combinator translating from rendering commands to dom/diff commands.\n    - Add an option to unit test start functions to enable/disable diff commands.\n      - For non-diff unit tests, it calls diff function explicitly to log both rendering/diff commands.\n        - Call `UpdateDomInplace` to verify results.\n  - Mouse wheel trigger functions.\n  - Unit Test Snapshot Viewer\n    - Show dom nodes in a tree view in the right side of the rendering tab optionally.\n    - Select dom node and jump to other tabs with highlight.\n- Remote protocol\n  - Investigate about generating data structure in flat memory layout, so that no effort needed for binary serialization \n- Remote protocol channel\n  - `GuiRemoteController` -> remote protocol -> `IRemoteProtocolSchedulerChannel<T>` -> `IRemoteProtocolSchedulerChannelAsync<T>` (another thread)\n  - `IRemoteProtocolRendererChannelAsync<T>` (another thread) -> `IRemoteProtocolRendererChannel<T>` -> remote protocol -> `INativeController`\n  - Predefined `IRemoteProtocol(SchedulerRenderer)Channel<JsonValue>`\n    - Predefined `JsonValue` to `WString` converting\n    - Predefined `ObjectString<T>` converting\n  - Predefined `IRemoteProtocol(SchedulerRenderer)Channel<T>` for binary\n  - Predefined `IRemoteProtocol(SchedulerRenderer)Channel<T>` for `IRemoteProtocolSchedulerChannelAsync<T>`\n  - Predefined `IRemoteProtocolRendererChannelAsync<T>`\n  - `IRemoteProtocolSchedulerChannel` and `IRemoteProtocolRendererChannel` could be merged into one single interface.\n  - Use sync in unit test instead of the current implementation\n    - Processing happens between `GuiRemoteProtocolFilterVerifier` and `UnitTestRemoteProtocol` in `GuiUnitTestUtilities.cpp`\n- Remote protocol redirection back to native rendering:\n  - In the test project, C++ side will expose the remote protocol via dll.\n  - Implement the remote protocol on a native `INativeController` instance.\n    - It could not be used on `GuiHostedController` or `GuiRemoteController`, which is not a native implementation.\n  - The experiment will only run a very simple UI that covers all implemented remote protocol so far.\n- `UpdateDomInplace` performed binary search, create a common implementation to share with `SortedList`.\n\n## Release Milestone (1.2.12.0)\n\n- More unit test\n  - Ribbon Controls\n  - `GuiControl` and servives\n  - `[TAB]`\n  - `ControlThemeName` property\n  - Multiple active `GuiWindow`, modal, order, `Enabled`\n  - `GuiTab` item manipulation and `[TAB]`\n  - `MouseWheel`\n    - Behavior on scrolls, trackers, scroll containers and list controls\n    - `GuiListControl` item events\n    - `GuiVirtualTreeListControl` node events\n  - A button calling a modal window\n- GacUI\n  - `<RawRendering/>` element.\n    - It will be mapped to `GDIElement` or `Direct2DElement` in different renderers.\n    - In remote protocol, it is an element with no extra properties.\n    - In HTML, it would open a `<div/>` and you can do whatever you want using JavaScript.\n- JavaScript rendering:\n  - Delete all `GacJS` code. This repo will be used to implement the HTML logic.\n  - A codegen for remote protocol and print TypeScript code.\n  - In the test project, C++ side will start a HTTP service on Windows.\n  - JavaScript side will separate the rendering and the protocol.\n  - Try DOM.\n  - Try Canvas.\n    - https://github.com/WICG/canvas-formatted-text/blob/main/README.md\n      - layout provider could not be done until this is implemented.\n  - Try EsBuild to replace WebPack.\n  - The experiment will only run a very simple UI that covers all implemented remote protocol so far.\n- Copy control unit tests, snapshots and snapshot viewer to `Release` repo.\n  - Build and run test.\n    - Explain this in decicated `README.md` and mention it in the root one.\n  - Verify vcxproj contains all files.\n  - Ensure build woriflow tutorials.\n  - Update Win11 menu tutorial in `Release` repo to use new virtual control\n\n## Release Milestone (1.2.13.0)\n\n- All control unit test (using DarkSkin)\n  - Tooltip.\n  - Dialogs.\n  - A mechanism to replace `vl::filesystem` implementation.\n  - Add window resizing constraint messages.\n  - Implement `ColorizedTextElement`\n    - Typing trigger functions in unit test framework.\n    - `GuiSinglelineTextBox`\n    - `GuiMultilineTextBox`\n    - `GuiBindableDataGrid` with predefined text box editor.\n    - Ribbon with predefined text box toolstrip component.\n  - Implement `DocumentElement`.\n    - Think about how to calculate size for document.\n    - `GuiDocumentViewer`\n    - `GuiDocumentLable`\n      - `<DocumentTextBox/>`\n  - Check all control key operation, ensure accessibility.\n    - Cannot scroll `GuiScrollView`, key operations needed and also need to be disabled for `GuiListControl` because it has already defined item selection keys.\n    - `Gui(Bindable)TextList` cannot check or uncheck items by key (enter and space).\n    - `GuiVirtualListView` cannot operate column headers by key.\n    - Active menus without `Alt` assighed (`TAB` and arrow keys?).\n    - `GuiDateComboBox` does not receive focus property, so that when open year/month combo by `ALT` or mouse, list item cannot be selected only by key.\n      - Add `Alt` and fix `Mouse` test cases after this is fixed.\n- Sample unit test project included in release.\n  - Reflection enabled\n    - Application and `LoadMainWindow` script in separated XML resource files.\n    - Application and `LoadMainWindow` script in separated compiled resource files.\n  - Reflection disabled\n    - Application in compiled C++ files.\n    - There is no `LoadMainWindow` in this case.\n- Document\n  - Unit test framework.\n  - Unit test framework in Vlpp.\n  - Remote Protocol.\n\n## Release Milestone (1.3.0.0)\n\n- Implement `ColorizedTextElement` and `DocumentElement` in all already implemented remote renderers.\n\n## Release Milestone (1.4.0.0)\n\n- SyncObj architecture that streams ViewModel object changes.\n  - See README.md in Workflow repo (**ViewModel Remoting C++ Codegen**).\n  - GacGen offers Metadata of interfaces\n  - Network protocols are not included as default implementation\n- New tutorials\n  - A GacUI D2D process connecting to a server process for streaming ViewModel\n    - ViewModel implements in C++ and C#\n- Document\n  - SyncObj.\n  - Fix `/doc/current/home.html`\n    - Introduction to hosted / remote\n  - Fix `/doc/current/gacui/home.html`\n    - Introduction to hosted / remote\n\n## Release Milestone (1.4.1.0)\n\n- A remote protocol implementation on existing `INativeController` implementation.\n  - Network protocols are not included as default implementation.\n  - Take care of `wchar_t` when server and client have different understanding to its size.\n- New tutorials.\n  - A GacUI SyncDom process connecting to a server process for streaming graphics.\n    - GDI+ implements in C#.\n    - GDI/D2D implements in C++.\n- Rewrite `GacBuild.ps1` and `GacClear.ps1` in C++, but still keep them just doing redirection for backward compatibility.\n- Get rid of `Deploy.bat` in `GacGen.ps1` and `GacGen.exe`.\n\n## Release Milestone (1.5.0.0)\n- `Variant` and `Union` with full support.\n  - Document.\n  - Document `vl::Overloading`.\n- Extensible CLI argument parser acception different OS convention, serialization and module dependencies.\n  - Structured error report.\n  - Extensible error message localization relying on GacUI XML Resource localization feature.\n  - Pre-made main function per OS, defining arguments for different renderers for the current OS, including remoting server with predefine protocols.\n- More optimistic SyncDom strategy to reduce messages.\n- Windows\n  - Ensure `INativeWindow::(Before|After)Closing()` is not called on non-main-window between the main window is closed and the application exits.\n- Enlarging window slower than shrinking.\n- https://github.com/vczh-libraries/Vlpp/issues/9\n\n## Release Milestone (future releases)\n\n- Strict check in different for-each loops.\n- A new non-XML instance format\n- `<eval Eval=\"expression\"/>` tags.\n- `<ez:Layout/>`\n  - `xmlns:ez` by default:\n    - `presentation::composition::easy_layout::GuiEasy*Composition`\n    - `presentation::composition::easy_layout::GuiEasy*Layout`\n  - A `vl::presentation::composition::easy_layout::GuiEasyLayoutComposition`\n    - with properties:\n      - `Top`, `Bottom`, `Left`, `Right`: boolean of border visibility\n      - `Padding`: thickness of border and between all leaf containers\n    - accepting following tags as child:\n      - `<ez:Top/>`, `<ez:Bottom/>`, `<ez:Left/>`, `<ez:Right/>`, `<ez:Fill Percentage=\"1\">`: Will be implemented by stack or table\n      - `<ez:Row RowSpan=\"1\" ColumnSpan=\"1\"/>`, `<ez:Column RowSpan=\"1\" ColumnSpan=\"1\"/>`: will be implemented by table\n    - properties of other `ez:` object\n      - `Padding`, `-1` by default means inheriting the value from its parent, defining a new padding of its children\n  - Any `ez:` layout could have multiple `ez:` layout or one control/Composition\n    - Such `control` or `composition` will get `AlignmentToParent` changed in `BuildLayout` if all components are `-1` at the moment\n    - A flag will store into such object, so the second call of `BuildLayout` will know the value is set by itself, and update it propertly\n      - Such flag could be the `<ez:Layout/>` itself passed to calling `SetInternalProperty`\n  - There is no constraint about the number and their order of `ez:` child object\n    - All consecutive rows or columns will be grouped into a table\n    - All direct child of rows of a rows, or columns of a column, are flattened\n    - Use stack if possible\n  - A `BuildLayout` method will be called after the layout tree is prepared. Changing the layout tree will not take effect without calling this method.\n\n## OS Provider Features\n\n- Windows\n  - `INativeImage::SaveToStream` handle correctly for git format. It is possible that LoadFromStream need to process diff between git raw frames.\n- UI Automation.\n- Test Automation.\n  - Standard test for OS providers, may need a test purpose automation service to do https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-sendinput\n\n## Control Features\n\n- `IColumnItemView`.\n  - Change column size from `int` to `{minSize:int, columnOption:Absolute|Percentage, absolute:int, percentage:float}`\n  - Column drag and drop.\n    - ListView: only raises an event, developers need to update column headers and data by themselves.\n    - DataGrid: swap column object, cells are changed due to binding.\n- ListView.\n  - Make a common template base class for `IItemProvider` implementation of bindable and non-bindable pair of the same virtual control:\n    - The template argument would be the base class which implements the differences.\n    - `list::TextItemProvider` vs `GuiBindableTextList::ItemSource`.\n    - `list::ListViewItemProvider` vs `GuiBindableListView::ItemSource`.\n      - Extends to `list::DataProvider`.\n    - `tree::TreeViewItemRootProvider` vs `GuiBindableTreeView::ItemSource`.\n  - `GuiBindableDataGrid`:\n    - Add customizable row visualizer.\n    - The default (or `nullptr`) row visualizer displays cell visualizer and editor.\n  - `GuiBindableTreeDataGrid`:\n    - Offer a default group header row visualizer when users only need one level of collapsable `GuiBindableDataGrid`.\n    - Replace the new `list::DataProvider`'s base class with `tree::NodeItemProvider` offering `GuiBindableTreeView::ItemSource` to make a useful data source.\n- Upgraded Code editor (need VlppParser2)\n- Touch support.\n\n## Drag and Drop\n\n- Drag and Drop framework.\n  - Substitutable.\n  - `GuiFakeDragAndDropService`.\n    - Activated by substitution when an OS dependent implementation is not available.\n- Dock container.\n  - Use drag and drop to perform docking.\n  - A small framework for implementing dock guiding UI.\n  - A predefined dockable tool window for users that are fine with the default behavior about how to transfer content to the dock container.\n  - A \"binary tree layout/control\" for implementing VS-like dock container.\n\n## Graphics\n\n- 2D drawing API, optional at runtime.\n  - Default non-text element renderer using 2D drawing API.\n    - Activated only when 2D drawing API is available and renderer implementations are unavailable.\n  - Ensure OS providers without 2D drawing API still work.\n- restriction-based Meta2DElement.\n  - If 2D drawing API is not available, display a text using `SolidLabel`.\n- Meta3DElement and Meta3D data structure.\n  - Default Meta3DElement renderer using Meta2DElement with a surface sorting based algorithm.\n- 2D Chart control based on Meta2DElement.\n- 3D Chart control based on Meta3DElement.\n- GIF player.\n- video player.\n\n## Porting to New Platforms\n\n- Port GacUI to other platforms:\n  - Unit Test (**Remote**)\n  - Windows\n    - GDI (**Normal**, **Hosted**, Remote)\n    - Direct2d (**Normal**, **Hosted**, Remote)\n    - UWP (Remote)\n  - Linux\n    - gGac repo: improve development process for release\n  - macOS\n    - iGac repo: improve development process for release\n  - Browser (Remote)\n    - HTTP for test purpose\n    - WebAssembly\n  - CLI (optional, needs dedicated skin)\n    - Command-line/Powershell in Windows (Remote)\n    - Ncurses on Ubuntu (Remote)\n- Port GacUI to other languages:\n  - Applications written in other language can:\n    - Implement view model (SyncObj).\n    - Render the UI (Remote).\n  - Languages:\n    - JavaScript / TypeScript\n      - HTTP for test purpose\n      - WebAssembly\n    - .NET\n    - Python\n\n## GacUI (unprioritized)\n\n- DarkSkin Color Theme.\n  - Create a `DarkSkinPalette` class with a static getter method to retrive default colors.\n    - Update all `Style.xml` colors to use `DarkSkinPalette`.\n  - Add a static setter to `DarkSkinPalette`.\n    - A window can be called to update all its controls' and components' template.\n    - The above function will be called inside the setter.\n- `INativeWindow` add callback for state changing.\n  - Including `MaximizedBox`, `MinimizedBox`, `Border`, `SizeBox`, `IconVisible`, `TitleBar`, `Icon`, `Title`, `SizeState`.\n  - In `GuiControlHost` or `GuiWindow`, setting border or state doesn't update the control template, it is updated in that callback.\n  - Delete `GuiControlHost` and `GuiWindow`'s `OnVisualStatusChanged`.\n- FakeDialogService\n  - message box disable `X` button if `Cancel` is not in the button list or `OK` is the only button.\n- GDI\n  - Big cursor of document empty line (GDI)\n  - In hosted mode, non-main window doesn't shrink when moving back to low DPI monitor.\n- Hosted\n  - When dragging left/top border if the main window, the window move if the size is smaller than the minimum size.\n- Rewrite calculator state machine demo, when \"+\" is pressed, jump into \"WaitingAnotherOperandForPlus\" state machine, instead of storing the operation in a loop. So there will be no loop except for waiting for numbers.\n- Check makefile for ParserGen/GlrParserGen/CodePack/CppMerge/GacGen\n  - Write maketools.sh\n- Add `MoveToScreenCenterAfterLayout` as what is done in `FakeDialogServiceBase::ShowModalDialogAndDelete`.\n- New default control templates with animation, written in XML generated C++ code.\n- Use the embedded data codegen / compress / decompress functions from `VlppParser2` to replace one in `GacUI`.\n- Use collection interfaces on function signatures.\n  - Only if `Vlpp` decides to add collection interfaces.\n\n## GacUI Resource Compiler (unplanned releases)\n\n- Consider `-ani` binding, create an animation controller object that change the binded property, with predefined interpolation and other stuff.\n  - All types that can do interpolation are value types, consider following formats:\n    - \"NAME:initial value\"\n    - \"NAME(initial value in expression)\"\n    - Need to be consistent with animation object\n  - Consider multiple `-ani` batch control, state configuration and transition, story board, connection to animation coroutine, etc.\n\n## GacUI Resource Compiler (unprioritized)\n\n- In the final pass, only workflow scripts are printed.\n  - Use WorkflowCompiler.exe to do codegen externally.\n- Remove all loader implementation, enabling custom control types from developers.\n  - Try not to include `GacUI.cpp` if `VCZH_DEBUG_METAONLY_REFLECTION` is on.\n  - `mynamespaces::VirtualClasses_X` for adding virtual classes deriving from `mynamespaces::X`.\n    - Containing methods like: `GuiSelectableButton* CheckBox()`.\n  - `mynamespaces::InstanceLoader_X` for implementing different kinds of properties / constructors that do not exist in `mynamespaces::X`.\n    - following a naming convention, e.g. `GuiTableComposition`'s rows/columns properties.\n    - searching for correct default control templates.\n- Incremental build inside single resource.\n  - Calculate dependencies by only parsing.\n  - Cache workflow assembly per resource in file.\n  - Codegen c++ from multiple workflow assembly.\n- Facade\n  - A facade is a class with following methods:\n    - **AddChild**: Accept a child facade or a child object.\n    - **ApplyTo**: Accept a parent object, which is not a facade.\n    - **Initialize** (optional): Called on the instance object between construction and `<ref.Ctor>`.\n  - A facade could have properties but only accept assignment or `-eval` binding.\n  - A facade could have an optional **InstanceFacadeVerifier** executed on GacGen compile time.\n  - Built-in Layout and Form facade.\n  - If `<XFacade>` or `<x:XFacade>` is an accessible and default constructible object, then `<X>` or `<x:X>` triggers a facade.\n\n## New C++/Doc Compiler based on VlppParser2\n\n## GacStudio\n\n- Run the editing GUI using remote protocol.\n- Run the symbol server in a separate process.\n  - e.g. for rendering if all properties in a binding expression is observable, providing fast editing tool.\n- Dedicated solution-project(dependency,external dependency)-item file format.\n  - Solution builds GacUI.xml\n  - Project builds GacUI XML Resource index file.\n  - Each file contains only one item.\n- When create a UI object in a wizard, ask for:\n  - Localization item.\n    - Need to mark properties in reflection about if it needs localization.\n  - ViewModel item.\n  - ViewModel implementation item for testing.\n- Dedicated composition/control property sheet configuration for each class.\n"
        },
        {
          "name": "Test",
          "type": "tree",
          "content": null
        },
        {
          "name": "Tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}