{
  "metadata": {
    "timestamp": 1736565219035,
    "page": 19,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "intel/hyperscan",
      "stars": 4870,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.13671875,
          "content": "BasedOnStyle: LLVM\nIndentWidth: 4\nUseTab: false\nAllowShortIfStatementsOnASingleLine: false\nIndentCaseLabels: false\nAccessModifierOffset: -4\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.521484375,
          "content": "##\n## There are some more .gitignore files in subdirs, but this is the main place\n## to add new entries. These are mostly for the common case when ue2 is built\n## in place\n##\n\n# Autogenerated stuff that we don't want to know about\n.deps\nautom4te.cache\nautojunk\n.dirstamp\n\n# Temp and swap files\n*~\n.*.swp\n.sw?\n\n# compiler output and binaries\n*.a\n*.o\n*.lo\n*.la\n*.so\n*.pyc\n.libs\nbin\n\n# Merge files created by git.\n*.orig\n\n# sigs dir is handled externally\nsignatures\n# but not the regression tests\n!tools/hscollider/test_cases/signatures\n\n# ignore pcre symlink if it exists\npcre\n# but not pcre subdirs!\n!pcre/\n\n# ignore boost symlink if it exists\ninclude/boost\n\n# ignore sqlite3 symlink if it exists\nsqlite3\n\n# Generated files\nsrc/config.h\nsrc/config.h.in\nsrc/hs_version.h\nsrc/parser/Parser.cpp\n\n# Generated PCRE files\npcre/pcre_chartables.c\npcre/pcregrep\npcre/pcretest\n\n# Autoconf/automake/libtool noise\nMakefile\nMakefile.in\naclocal.m4\nconfig.cache\nconfig.log\nconfig.status\nconfigure\nlibhs.pc\nlibtool\nm4/libtool.m4\nm4/ltoptions.m4\nm4/ltsugar.m4\nm4/ltversion.m4\nm4/lt~obsolete.m4\nsrc/stamp-h1\n\n# Docs\n!doc/dev-reference/Makefile # not generated\ndoc/dev-reference/doxygen_sqlite3.db\ndoc/dev-reference/doxygen_xml/\ndoc/dev-reference/_build/\n\n# Autotools noise in pcre\npcre/INSTALL\npcre/Makefile\npcre/Makefile.in\npcre/aclocal.m4\npcre/ar-lib\npcre/compile\npcre/config.*\npcre/configure\npcre/depcomp\npcre/install-sh\npcre/*.pc\npcre/libtool\npcre/ltmain.sh\npcre/missing\npcre/pcre-config\npcre/pcre.h\npcre/pcre_stringpiece.h\npcre/pcrecpparg.h\npcre/stamp-h1\npcre/test-driver\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 18.5546875,
          "content": "# Hyperscan Change Log\n\nThis is a list of notable changes to Hyperscan, in reverse chronological order.\n\n## [5.4.2] 2023-04-19\n- Roll back bugfix for github issue #350: Besides using scratch for\n  corresponding database, Hyperscan also allows user to use larger scratch\n  allocated for another database. Users can leverage this property to achieve\n  safe scratch usage in multi-database scenarios. Behaviors beyond these are\n  discouraged and results are undefined.\n- Fix hsdump issue due to invalid nfa type.\n\n## [5.4.1] 2023-02-20\n- The Intel Hyperscan team is pleased to provide a bug fix release to our open source library.\n  Intel also maintains an upgraded version available through your Intel sales representative.\n- Bugfix for issue #184: fix random char value of UTF-8.\n- Bugfix for issue #291: bypass logical combination flag in hs_expression_info().\n- Bugfix for issue #292: fix build error due to libc symbol parsing.\n- Bugfix for issue #302/304: add empty string check for pure literal API.\n- Bugfix for issue #303: fix unknown instruction error in pure literal API.\n- Bugfix for issue #303: avoid memory leak in stream close stage.\n- Bugfix for issue #305: fix assertion failure in DFA construction.\n- Bugfix for issue #317: fix aligned allocator segment faults.\n- Bugfix for issue #350: add quick validity check for scratch.\n- Bugfix for issue #359: fix glibc-2.34 stack size issue.\n- Bugfix for issue #360: fix SKIP flag issue in chimera.\n- Bugfix for issue #362: fix one cotec check corner issue in UTF-8 validation.\n- Fix other compile issues.\n\n## [5.4.0] 2020-12-31\n- Improvement on literal matcher \"Fat Teddy\" performance, including\n  support for Intel(R) AVX-512 Vector Byte Manipulation Instructions (Intel(R)\n  AVX-512 VBMI).\n- Introduce a new 32-state shuffle-based DFA engine (\"Sheng32\"). This improves\n  scanning performance by leveraging AVX-512 VBMI.\n- Introduce a new 64-state shuffle-based DFA engine (\"Sheng64\"). This improves\n  scanning performance by leveraging AVX-512 VBMI.\n- Introduce a new shuffle-based hybrid DFA engine (\"McSheng64\"). This improves\n  scanning performance by leveraging AVX-512 VBMI.\n- Improvement on exceptional state handling performance for LimEx NFA, including\n  support for AVX-512 VBMI.\n- Improvement on lookaround performance with new models, including support for\n  AVX-512.\n- Improvement on DFA state space efficiency.\n- Optimization on decision of NFA/DFA generation.\n- hsbench: add CSV dump support for hsbench.\n- Bugfix for cmake error on Icelake under release mode.\n- Bugfix in find_vertices_in_cycles() to avoid self-loop checking in SCC.\n- Bugfix for issue #270: fix return value handling in chimera.\n- Bugfix for issue #284: use correct free function in logical combination.\n- Add BUILD_EXAMPLES cmake option to enable example code compilation. (#260)\n- Some typo fixing. (#242, #259)\n\n## [5.3.0] 2020-05-15\n- Improvement on literal matcher \"Teddy\" performance, including support for\n  Intel(R) AVX-512 Vector Byte Manipulation Instructions (Intel(R) AVX-512\n  VBMI).\n- Improvement on single-byte/two-byte matching performance, including support\n  for Intel(R) Advanced Vector Extensions 512 (Intel(R) AVX-512).\n- hsbench: add hyphen support for -T option.\n- tools/fuzz: add test scripts for synthetic pattern generation.\n- Bugfix for acceleration path analysis in LimEx NFA.\n- Bugfix for duplicate matches for Small-write engine.\n- Bugfix for UTF8 checking problem for hscollider.\n- Bugfix for issue #205: avoid crash of `hs_compile_lit_multi()` with clang and\n  ASAN.\n- Bugfix for issue #211: fix error in `db_check_platform()` function.\n- Bugfix for issue #217: fix cmake parsing issue of CPU arch for non-English\n  locale.\n- Bugfix for issue #228: avoid undefined behavior when calling `close()` after\n  `fdopendir()` in `loadExpressions()`.\n- Bugfix for issue #239: fix hyperscan compile issue under gcc-10.\n- Add VLAN packets processing capability in pcap analysis script. (#214)\n- Avoid extra convert instruction for \"Noodle\". (#221)\n- Add Hyperscan version marcro in `hs.h`. (#222)\n\n## [5.2.1] 2019-10-13\n- Bugfix for issue #186: fix compile issue when `BUILD_SHARED_LIBS` is on in\n  release mode.\n- Disable redundant move check for older compiler versions.\n\n## [5.2.0] 2019-07-12\n- Literal API: add new API `hs_compile_lit()` and `hs_compile_lit_multi()` to\n  process pure literal rule sets. The 2 literal APIs treat each expression text\n  in a literal sense without recognizing any regular grammers.\n- Logical combination: add support for purely negative combinations, which\n  report match at EOD in case of no sub-expressions matched.\n- Windows porting: support shared library (DLL) on Windows with available tools\n  hscheck, hsbench and hsdump.\n- Bugfix for issue #148: fix uninitialized use of `scatter_unit_uX` due to\n  padding.\n- Bugfix for issue #155: fix numerical result out of range error.\n- Bugfix for issue #165: avoid corruption of pending combination report in\n  streaming mode.\n- Bugfix for issue #174: fix scratch free issue when memory allocation fails.\n\n## [5.1.1] 2019-04-03\n- Add extra detection and handling when invalid rose programs are triggered.\n- Bugfix for issue #136: fix CMake parsing of CPU architecure for GCC-9.\n- Bugfix for issue #137: avoid file path impact on fat runtime build.\n- Bugfix for issue #141: fix rose literal programs for multi-pattern\n  matching when no pattern ids are provided.\n- Bugfix for issue #144: fix library install path in pkg-config files.\n\n## [5.1.0] 2019-01-17\n- Improve DFA state compression by wide-state optimization to reduce bytecode\n  size.\n- Create specific interpreter runtime handling to boost the performance of pure\n  literal matching.\n- Optimize original presentation of interpreter (the \"Rose\" engine ) to\n  increase overall performance.\n- Bugfix for logical combinations: fix error reporting combination's match in\n  case of sub-expression has EOD match under streaming mode.\n- Bugfix for logical combinations: fix miss reporting combination's match under\n  vacuous input.\n- Bugfix for issue #104: fix compile error with Boost 1.68.0.\n- Bugfix for issue #127: avoid pcre error for hscollider with installed PCRE\n  package.\n- Update version of PCRE used by testing tools as a syntax and semantic\n  reference to PCRE 8.41 or above.\n- Fix github repo address in doc.\n\n## [5.0.0] 2018-07-09\n- Introduce chimera hybrid engine of Hyperscan and PCRE, to fully support\n  PCRE syntax as well as to take advantage of the high performance nature of\n  Hyperscan.\n- New API feature: logical combinations (AND, OR and NOT) of patterns in a\n  given pattern set.\n- Windows porting: hsbench, hscheck, hscollider and hsdump tools now available\n  on Windows 8 or newer.\n- Improve undirected graph implementation to avoid graph copy and reduce\n  compile time.\n- Bugfix for issue #86: enable hscollider for installed PCRE package.\n\n## [4.7.0] 2018-01-24\n- Introduced hscollider pattern testing tool, for validating Hyperscan match\n  behaviour against PCRE.\n- Introduced hscheck pattern compilation tool.\n- Introduced hsdump development tool for producing information about Hyperscan\n  pattern compilation.\n- New API feature: extended approximate matching support for Hamming distance.\n- Bugfix for issue #69: Force C++ linkage in Xcode.\n- Bugfix for issue #73: More documentation for `hs_close_stream()`.\n- Bugfix for issue #78: Fix for fat runtime initialisation when used as a\n  shared library.\n\n## [4.6.0] 2017-09-22\n- New API feature: stream state compression. This allows the user to compress\n  and restore state for streams to reduce memory usage.\n- Many improvements to literal matching performance, including more support\n  for Intel(R) Advanced Vector Extensions 512 (Intel(R) AVX-512).\n- Compile time improvements, mainly reducing compiler memory allocation.\n  Also results in reduced compile time for some pattern sets.\n- Bugfix for issue #62: fix error building Hyperscan using older versions of\n  Boost.\n- Small updates to fix warnings identified by Coverity.\n\n## [4.5.2] 2017-07-26\n- Bugfix for issue #57: Treat characters between `\\Q.\\E` as codepoints in\n  UTF8 mode.\n- Bugfix for issue #60: Use a portable flag for mktemp for fat runtime builds.\n- Bugfix for fat runtime builds on AVX-512 capable machines with Hyperscan's\n  AVX-512 support disabled.\n\n## [4.5.1] 2017-06-16\n- Bugfix for issue #56: workaround for gcc-4.8 C++11 defect.\n- Bugfix for literal matching table generation, reversing a regression in\n  performance for some literal matching cases.\n- Bugfixes for hsbench, related to multicore benchmarking, portability fixes\n  for FreeBSD, and clarifying output results.\n- CMake: removed a duplicate else branch that causes very recent (v3.9) builds\n  of CMake to fail.\n\n## [4.5.0] 2017-06-09\n- New API feature: approximate matching using the \"edit distance\" extended\n  parameter. This allows the user to request all matches that are a given edit\n  distance from an exact match for a pattern.\n- Initial support for Intel(R) Advanced Vector Extensions 512 (Intel(R)\n  AVX-512), disabled by default. To enable it, pass `-DBUILD_AVX512=1` to\n  `cmake`.\n- Major compile time improvements in many subsystems, reducing compile time\n  significantly for many large pattern sets.\n- Internal reworking of literal matchers to operate on literals of at\n  most eight characters, with subsequent confirmation done in the Rose\n  interpreter. This reduces complexity and bytecode size and improves\n  performance for many pattern sets.\n- Improve performance of the FDR literal matcher front end.\n- Improve bucket assignment and other heuristics governing the FDR literal\n  matcher.\n- Improve optimisation passes that take advantage of extended parameter\n  constraints (`min_offset`, etc).\n- Introduce further lookaround specialisations to improve scanning performance.\n- Optimise Rose interpreter construction to reduce the length of programs\n  generated in some situations.\n- Remove the old \"Rose\" pattern decomposition analysis pass in favour of the\n  new \"Violet\" pass introduced in Hyperscan 4.3.0.\n- In streaming mode, allow exhaustion (where the stream can no longer produce\n  matchers) to be detected in more situations, improving scanning performance.\n- Improve parsing of control verbs (such as `(*UTF8)`) that can only occur at\n  the beginning of the pattern. Combinations of supported verbs in any order\n  are now permitted.\n- Update version of PCRE used by testing tools as a syntax and semantic\n  reference to PCRE 8.40.\n- Tuning support for Intel(R) microarchitecture code names Skylake, Skylake\n  Server, Goldmont.\n- CMake: when building a native build with a version of GCC that doesn't\n  recognise the host compiler, tune for the microarch selected by\n  `-march=native`.\n- CMake: don't fail if SQLite (which is only required to build the `hsbench`\n  tool) is not present.\n- CMake: detect libc++ directly and use that to inform the Boost version\n  requirement.\n- Bugfix for issue #51: make the fat runtime build wrapper less fragile.\n- Bugfix for issues #46, #52: use `sqlite3_errmsg()` to allow SQLite 3.6.x to\n  be used. Thanks to @EaseTheWorld for the PR.\n\n## [4.4.1] 2017-02-28\n- Bugfixes to fix issues where stale data was being referenced in scratch\n  memory. In particular this may have resulted in `hs_close_stream()`\n  referencing data from other previously scanned streams. This may result in\n  incorrect matches being been reported.\n\n## [4.4.0] 2017-01-20\n- Introduce the \"fat runtime\" build. This will build several variants of the\n  Hyperscan scanning engine specialised for different processor feature sets,\n  and use the appropriate one for the host at runtime. This uses the \"ifunc\"\n  indirect function attribute provided by GCC and is currently available on\n  Linux only, where it is the default for release builds.\n- New API function: add the `hs_valid_platform()` function. This function tests\n  whether the host provides the SSSE3 instruction set required by Hyperscan.\n- Introduce a new standard benchmarking tool, \"hsbench\". This provides an easy\n  way to measure Hyperscan's performance for a particular set of patterns and\n  corpus of data to be scanned.\n- Introduce a 64-bit GPR LimEx NFA model, which uses 64-bit GPRs on 64-bit\n  hosts and SSE registers on 32-bit hosts.\n- Introduce a new DFA model (\"McSheng\") which is a hybrid of the existing\n  McClellan and Sheng models. This improves scanning performance for some\n  cases.\n- Introduce lookaround specialisations to improve scanning performance.\n- Improve the handling of long literals by moving confirmation to the Rose\n  interpreter and simplifying the hash table used to track them in streaming\n  mode.\n- Improve compile time optimisation for removing redundant paths from\n  expression graphs.\n- Build: improve support for building with MSVC toolchain.\n- Reduce the size of small write DFAs used for small scans in block mode.\n- Introduce a custom graph type (`ue2_graph`) used in place of the Boost Graph\n  Library's `adjacency_list` type. Improves compile time performance and type\n  safety.\n- Improve scanning performance of the McClellan DFA.\n- Bugfix for a very unusual SOM case where the incorrect start offset was\n  reported for a match.\n- Bugfix for issue #37, removing execute permissions from some source files.\n- Bugfix for issue #41, handle Windows line endings in pattern files.\n\n## [4.3.2] 2016-11-15\n- Bugfix for issue #39. This small change is a workaround for an issue in\n  Boost 1.62. The fix has been submitted to Boost for inclusion in a future\n  release.\n\n## [4.3.1] 2016-08-29\n- Bugfix for issue #30. In recent versions of Clang, a write to a variable was\n  being elided, resulting in corrupted stream state after calling\n  `hs_reset_stream()`.\n\n## [4.3.0] 2016-08-24\n- Introduce a new analysis pass (\"Violet\") used for decomposition of patterns\n  into literals and smaller engines.\n- Introduce a new container engine (\"Tamarama\") for infix and suffix engines\n  that can be proven to run exclusively of one another. This reduces stream\n  state for pattern sets with many such engines.\n- Introduce a new shuffle-based DFA engine (\"Sheng\"). This improves scanning\n  performance for pattern sets where small engines are generated.\n- Improve the analysis used to extract extra mask information from short\n  literals.\n- Reduced compile time spent in equivalence class analysis.\n- Build: frame pointers are now only omitted for 32-bit release builds.\n- Build: Workaround for C++ issues reported on FreeBSD/libc++ platforms.\n  (github issue #27)\n- Simplify the LimEx NFA with a unified \"variable shift\" model, which reduces\n  the number of different NFA code paths to one per model size.\n- Allow some anchored prefixes that may squash the literal to which they are\n  attached to run eagerly. This improves scanning performance for some\n  patterns.\n- Simplify and improve EOD (\"end of data\") matching, using the interpreter for\n  all operations.\n- Elide unnecessary instructions in the Rose interpreter at compile time.\n- Reduce the number of inlined instantiations of the Rose interpreter in order\n  to reduce instruction cache pressure.\n- Small improvements to literal matcher acceleration.\n- Parser: ignore `\\E` metacharacters that are not preceded by `\\Q`. This\n  conforms to PCRE's behaviour, rather than returning a compile error.\n- Check for misaligned memory when allocating an error structure in Hyperscan's\n  compile path and return an appropriate error if detected.\n\n## [4.2.0] 2016-05-31\n- Introduce an interpreter for many complex actions to replace the use of\n  internal reports within the core of Hyperscan (the \"Rose\" engine). This\n  improves scanning performance and reduces database size for many pattern\n  sets.\n- Many enhancements to the acceleration framework used by NFA and DFA engines,\n  including more flexible multibyte implementations and more AVX2 support. This\n  improves scanning performance for many pattern sets.\n- Improved prefiltering support for complex patterns containing very large\n  bounded repeats (`R{M,N}` with large `N`).\n- Improve scanning performance of pattern sets with a very large number of\n  EOD-anchored patterns.\n- Improve scanning performance of large pattern sets that use the\n  `HS_FLAG_SINGLEMATCH` flag.\n- Improve scanning performance of pattern sets that contain a single literal by\n  improving the \"Noodle\" literal matcher.\n- Small reductions in total stream state for many pattern sets.\n- Improve runtime detection of AVX2 support.\n- Disable -Werror for release builds, in order to behave better for packagers\n  and users with different compiler combinations than those that we test.\n- Improve support for building on Windows with MSVC 2015 (github issue #14).\n  Support for Hyperscan on Windows is still experimental.\n- Small updates to fix warnings identified by Coverity.\n- Remove Python codegen for the \"FDR\" and \"Teddy\" literal matchers. These are\n  now implemented directly in C code.\n- Remove the specialist \"Sidecar\" engine in favour of using our more general\n  repeat engines.\n- New API function: add the `hs_expression_ext_info()` function. This is a\n  variant of `hs_expression_info()` that can accept patterns with extended\n  parameters.\n- New API error value: add the `HS_SCRATCH_IN_USE` error, which is returned\n  when Hyperscan detects that a scratch region is already in use on entry to an\n  API function.\n\n## [4.1.0] 2015-12-18\n- Update version of PCRE used by testing tools as a syntax and semantic\n  reference to PCRE 8.38.\n- Small updates to fix warnings identified by Coverity.\n- Clean up and unify exception handling behaviour across GPR and SIMD NFA\n  models.\n- Fix bug in handling of bounded repeat triggers with large gaps between them\n  for sparse repeat model.\n- Correctly reject POSIX collating elements (`[.ch.]`, `[=ch=]`) in the parser.\n  These are not supported by Hyperscan.\n- Add support for quoted sequences (`\\Q...\\E`) inside character classes.\n- Simplify FDR literal matcher runtime by removing some static specialization.\n- Fix handling of the POSIX `[:graph:]`, `[:print:]` and `[:punct:]` character\n  classes to match the behaviour of PCRE 8.38 in both standard operation and\n  with the UCP flag set. (Note: some bugs were fixed in this area in PCRE\n  8.38.) Previously Hyperscan's behaviour was the same as versions of PCRE\n  before 8.34.\n- Improve performance when compiling pattern sets that include a large number\n  of similar bounded repeat constructs. (github issue #9)\n\n## [4.0.1] 2015-10-30\n- Minor cleanups to test code.\n- CMake and other build system improvements.\n- API update: allow `hs_reset_stream()` and `hs_reset_and_copy_stream()` to be\n  supplied with a NULL scratch pointer if no matches are required. This is in\n  line with the behaviour of `hs_close_stream()`.\n- Disallow bounded repeats with a very large minimum repeat but no maximum,\n  i.e. {N,} for very large N.\n- Reduce compile memory usage in literal set explansion for some large cases.\n\n## [4.0.0] 2015-10-20\n- Original release of Hyperscan as open-source software.\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 47.0068359375,
          "content": "cmake_minimum_required (VERSION 2.8.11)\nproject (hyperscan C CXX)\n\nset (HS_MAJOR_VERSION 5)\nset (HS_MINOR_VERSION 4)\nset (HS_PATCH_VERSION 2)\nset (HS_VERSION ${HS_MAJOR_VERSION}.${HS_MINOR_VERSION}.${HS_PATCH_VERSION})\n\nset(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)\ninclude(CheckCCompilerFlag)\ninclude(CheckCXXCompilerFlag)\ninclude(CheckCXXSymbolExists)\nINCLUDE (CheckFunctionExists)\nINCLUDE (CheckIncludeFiles)\nINCLUDE (CheckIncludeFileCXX)\nINCLUDE (CheckLibraryExists)\nINCLUDE (CheckSymbolExists)\ninclude (CMakeDependentOption)\ninclude (GNUInstallDirs)\ninclude (${CMAKE_MODULE_PATH}/platform.cmake)\ninclude (${CMAKE_MODULE_PATH}/ragel.cmake)\n\nfind_package(PkgConfig QUIET)\n\nif (NOT CMAKE_BUILD_TYPE)\n    message(STATUS \"Default build type 'Release with debug info'\")\n    set(CMAKE_BUILD_TYPE RELWITHDEBINFO CACHE STRING \"\" FORCE )\nelse()\n    string(TOUPPER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE)\n    message(STATUS \"Build type ${CMAKE_BUILD_TYPE}\")\nendif()\n\nif(CMAKE_BUILD_TYPE MATCHES RELEASE|RELWITHDEBINFO|MINSIZEREL)\n    message(STATUS \"using release build\")\n    set(RELEASE_BUILD TRUE)\nelse()\n    set(RELEASE_BUILD FALSE)\nendif()\n\nset(BINDIR \"${PROJECT_BINARY_DIR}/bin\")\nset(LIBDIR \"${PROJECT_BINARY_DIR}/lib\")\n\nset(INCLUDE_INSTALL_DIR ${CMAKE_INSTALL_INCLUDEDIR})\n\n# First for the generic no-config case\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${BINDIR}\")\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${LIBDIR}\")\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${LIBDIR}\")\n# Second, for multi-config builds (e.g. msvc)\nforeach (OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES})\n    string (TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG)\n    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} \"${BINDIR}\")\n    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} \"${LIBDIR}\")\n    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} \"${LIBDIR}\")\nendforeach (OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES)\n\n\nif(CMAKE_GENERATOR STREQUAL Xcode)\n    set(XCODE TRUE)\nendif()\n\n# older versions of cmake don't know things support isystem\nif (XCODE OR CMAKE_CXX_COMPILER_ID MATCHES \"Intel\")\n    set(CMAKE_INCLUDE_SYSTEM_FLAG_CXX \"-isystem\")\nendif ()\n\nset(CMAKE_INCLUDE_CURRENT_DIR 1)\ninclude_directories(${PROJECT_SOURCE_DIR}/src)\ninclude_directories(${PROJECT_BINARY_DIR})\ninclude_directories(SYSTEM include)\n\ninclude (${CMAKE_MODULE_PATH}/boost.cmake)\n\n# -- make this work? set(python_ADDITIONAL_VERSIONS 2.7 2.6)\nfind_package(PythonInterp)\nfind_program(RAGEL ragel)\n\nif(PYTHONINTERP_FOUND)\n    set(PYTHON ${PYTHON_EXECUTABLE})\nelse()\n    message(FATAL_ERROR \"No python interpreter found\")\nendif()\n\n# allow for reproducible builds - python for portability\nif (DEFINED ENV{SOURCE_DATE_EPOCH})\n      execute_process(\n          COMMAND \"${PYTHON}\" \"${CMAKE_MODULE_PATH}/formatdate.py\" \"$ENV{SOURCE_DATE_EPOCH}\"\n          OUTPUT_VARIABLE BUILD_DATE\n          OUTPUT_STRIP_TRAILING_WHITESPACE)\nelse ()\n    string (TIMESTAMP BUILD_DATE \"%Y-%m-%d\")\nendif ()\nmessage(STATUS \"Build date: ${BUILD_DATE}\")\n\n\nif(${RAGEL} STREQUAL \"RAGEL-NOTFOUND\")\n    message(FATAL_ERROR \"Ragel state machine compiler not found\")\nendif()\n\noption(OPTIMISE \"Turns off compiler optimizations (on by default unless debug output enabled or coverage testing)\" TRUE)\n\noption(DEBUG_OUTPUT \"Enable debug output (warning: very verbose)\" FALSE)\n\nif(DEBUG_OUTPUT)\n    add_definitions(-DDEBUG)\n    set(OPTIMISE FALSE)\nendif(DEBUG_OUTPUT)\n\noption(BUILD_SHARED_LIBS \"Build shared libs instead of static\" OFF)\noption(BUILD_STATIC_AND_SHARED \"Build shared libs as well as static\" OFF)\n\nif (BUILD_STATIC_AND_SHARED OR BUILD_SHARED_LIBS)\n        message(STATUS \"Building shared libraries\")\nelse()\n        message(STATUS \"Building static libraries\")\nendif()\n\nif (NOT BUILD_SHARED_LIBS)\n    # build static libs\n    set(BUILD_STATIC_LIBS ON)\n    mark_as_advanced(BUILD_STATIC_LIBS)\nendif ()\n\n#for config\nif (OPTIMISE)\n    set(HS_OPTIMIZE ON)\nendif()\n\nCMAKE_DEPENDENT_OPTION(DUMP_SUPPORT \"Dump code support; normally on, except in release builds\" ON \"NOT RELEASE_BUILD\" OFF)\n\nCMAKE_DEPENDENT_OPTION(DISABLE_ASSERTS \"Disable assert(); Asserts are enabled in debug builds, disabled in release builds\" OFF \"NOT RELEASE_BUILD\" ON)\n\noption(BUILD_AVX512 \"Experimental: support avx512 in the fat runtime\"\n    OFF)\n\noption(BUILD_AVX512VBMI \"Experimental: support avx512vbmi in the fat runtime\"\n    OFF)\n\nif (BUILD_AVX512VBMI)\n    set(BUILD_AVX512 ON)\nendif ()\n\noption(WINDOWS_ICC \"Use Intel C++ Compiler on Windows, default off, requires ICC to be set in project\" OFF)\n\n# TODO: per platform config files?\n\n# TODO: windows generator on cmake always uses msvc, even if we plan to build with icc\nif(MSVC OR MSVC_IDE)\n    message(STATUS \"Building for Windows\")\n\n    if (MSVC_VERSION LESS 1700)\n        message(FATAL_ERROR \"The project requires C++11 features.\")\n    else()\n        if (WINDOWS_ICC)\n            set(ARCH_C_FLAGS \"/QxHost\")\n            set(ARCH_CXX_FLAGS \"/QxHost\")\n            set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /O3 /Qstd=c99 /Qrestrict /wd4267 /Qdiag-disable:remark\")\n            set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /O2 /Qstd=c++11 /Qrestrict /QxHost /wd4267 /wd4800 /Qdiag-disable:remark -DBOOST_DETAIL_NO_CONTAINER_FWD -D_SCL_SECURE_NO_WARNINGS\")\n        else()\n            set(MSVC_WARNS \"/wd4101 /wd4146 /wd4172 /wd4200 /wd4244 /wd4267 /wd4307 /wd4334 /wd4805 /wd4996 -D_CRT_SECURE_NO_WARNINGS\")\n            set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}  /O2 ${MSVC_WARNS}\")\n            set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /O2 ${MSVC_WARNS} /wd4800 -DBOOST_DETAIL_NO_CONTAINER_FWD\")\n        endif()\n        string(REPLACE \"/RTC1\" \"\" CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG}\")\n        string(REPLACE \"/RTC1\" \"\" CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG}\")\n\n        if (DISABLE_ASSERTS)\n            set(CMAKE_C_FLAGS_DEBUG \"/DNDEBUG ${CMAKE_C_FLAGS_DEBUG}\")\n            set(CMAKE_CXX_FLAGS_DEBUG \"/DNDEBUG ${CMAKE_CXX_FLAGS_DEBUG}\")\n        endif ()\n\n        # flags only used to build hs libs\n        set(HS_C_FLAGS \"/Gv\")\n        set(HS_CXX_FLAGS \"/Gv\")\n    endif()\n\nelse()\n\n    # remove CMake's idea of optimisation\n    foreach (CONFIG ${CMAKE_BUILD_TYPE} ${CMAKE_CONFIGURATION_TYPES})\n        string(REGEX REPLACE \"-O[^ ]*\" \"\" CMAKE_C_FLAGS_${CONFIG} \"${CMAKE_C_FLAGS_${CONFIG}}\")\n        string(REGEX REPLACE \"-O[^ ]*\" \"\" CMAKE_CXX_FLAGS_${CONFIG} \"${CMAKE_CXX_FLAGS_${CONFIG}}\")\n    endforeach ()\n\n    if (CMAKE_COMPILER_IS_GNUCC)\n        message(STATUS \"gcc version ${CMAKE_C_COMPILER_VERSION}\")\n        # If gcc doesn't recognise the host cpu, then mtune=native becomes\n        # generic, which isn't very good in some cases. march=native looks at\n        # cpuid info and then chooses the best microarch it can (and replaces\n        # the flag), so use that for tune.\n\n        # arg1 might exist if using ccache\n        string (STRIP \"${CMAKE_C_COMPILER_ARG1}\" CC_ARG1)\n        set (EXEC_ARGS ${CC_ARG1} -c -Q --help=target -march=native -mtune=native)\n        execute_process(COMMAND ${CMAKE_C_COMPILER} ${EXEC_ARGS}\n            OUTPUT_VARIABLE _GCC_OUTPUT)\n        string(FIND \"${_GCC_OUTPUT}\" \"march\" POS)\n        string(SUBSTRING \"${_GCC_OUTPUT}\" ${POS} -1 _GCC_OUTPUT)\n        string(REGEX REPLACE \"march=[ \\t]*([^ \\n]*)[ \\n].*\" \"\\\\1\"\n            GNUCC_ARCH \"${_GCC_OUTPUT}\")\n\n        # test the parsed flag\n        set (EXEC_ARGS ${CC_ARG1} -E - -mtune=${GNUCC_ARCH})\n        execute_process(COMMAND ${CMAKE_C_COMPILER} ${EXEC_ARGS}\n            OUTPUT_QUIET ERROR_QUIET\n            INPUT_FILE /dev/null\n            RESULT_VARIABLE GNUCC_TUNE_TEST)\n        if (NOT GNUCC_TUNE_TEST EQUAL 0)\n            message(SEND_ERROR \"Something went wrong determining gcc tune: -mtune=${GNUCC_ARCH} not valid\")\n        endif()\n        set(TUNE_FLAG ${GNUCC_ARCH})\n    else ()\n        set(TUNE_FLAG native)\n    endif()\n\n    # compiler version checks TODO: test more compilers\n    if (CMAKE_COMPILER_IS_GNUCXX)\n        set(GNUCXX_MINVER \"4.8.1\")\n        message(STATUS \"g++ version ${CMAKE_CXX_COMPILER_VERSION}\")\n        if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS GNUCXX_MINVER)\n            message(FATAL_ERROR \"A minimum of g++ ${GNUCXX_MINVER} is required for C++11 support\")\n        endif()\n    endif()\n\n    if(OPTIMISE)\n        if (NOT CMAKE_BUILD_TYPE MATCHES MINSIZEREL)\n            set(OPT_C_FLAG \"-O3\")\n            set(OPT_CXX_FLAG \"-O2\")\n        else ()\n            set(OPT_C_FLAG \"-Os\")\n            set(OPT_CXX_FLAG \"-Os\")\n        endif ()\n    else()\n        set(OPT_C_FLAG \"-O0\")\n        set(OPT_CXX_FLAG \"-O0\")\n    endif(OPTIMISE)\n\n    # set compiler flags - more are tested and added later\n    set(EXTRA_C_FLAGS \"${OPT_C_FLAG} -std=c99 -Wall -Wextra -Wshadow -Wcast-qual -fno-strict-aliasing\")\n    set(EXTRA_CXX_FLAGS \"${OPT_CXX_FLAG} -std=c++11 -Wall -Wextra -Wshadow -Wswitch -Wreturn-type -Wcast-qual -Wno-deprecated -Wnon-virtual-dtor -fno-strict-aliasing\")\n\n    if (NOT RELEASE_BUILD)\n        # -Werror is most useful during development, don't potentially break\n        # release builds\n        set(EXTRA_C_FLAGS \"${EXTRA_C_FLAGS} -Werror\")\n        set(EXTRA_CXX_FLAGS \"${EXTRA_CXX_FLAGS} -Werror\")\n    endif()\n\n    if (DISABLE_ASSERTS)\n        set(EXTRA_C_FLAGS \"${EXTRA_C_FLAGS} -DNDEBUG\")\n        set(EXTRA_CXX_FLAGS \"${EXTRA_CXX_FLAGS} -DNDEBUG\")\n    endif()\n\n    if (NOT CMAKE_C_FLAGS MATCHES .*march.* AND NOT CMAKE_C_FLAGS MATCHES .*mtune.*)\n        set(ARCH_C_FLAGS \"-march=native -mtune=${TUNE_FLAG}\")\n    endif()\n\n    if (NOT CMAKE_CXX_FLAGS MATCHES .*march.* AND NOT CMAKE_CXX_FLAGS MATCHES .*mtune.*)\n        set(ARCH_CXX_FLAGS \"-march=native -mtune=${TUNE_FLAG}\")\n    endif()\n\n    if(CMAKE_COMPILER_IS_GNUCC)\n        # spurious warnings?\n        set(EXTRA_C_FLAGS \"${EXTRA_C_FLAGS} -Wno-array-bounds -Wno-maybe-uninitialized\")\n    endif()\n\n    if(CMAKE_COMPILER_IS_GNUCXX)\n        set(EXTRA_CXX_FLAGS \"${EXTRA_CXX_FLAGS} -Wno-maybe-uninitialized\")\n        if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 5.0)\n            set(EXTRA_CXX_FLAGS \"${EXTRA_CXX_FLAGS} -fabi-version=0\")\n        endif ()\n        # don't complain about abi\n        set(EXTRA_C_FLAGS \"${EXTRA_C_FLAGS} -Wno-abi\")\n        set(EXTRA_CXX_FLAGS \"${EXTRA_CXX_FLAGS} -Wno-abi\")\n    endif()\n\n    if (NOT(ARCH_IA32 AND RELEASE_BUILD))\n        set(EXTRA_C_FLAGS \"${EXTRA_C_FLAGS} -fno-omit-frame-pointer\")\n        set(EXTRA_CXX_FLAGS \"${EXTRA_CXX_FLAGS} -fno-omit-frame-pointer\")\n    endif()\n\n\n    if (CMAKE_C_COMPILER_ID MATCHES \"Intel\")\n        set(SKYLAKE_FLAG \"-xCORE-AVX512\")\n    else ()\n        set(SKYLAKE_FLAG \"-march=skylake-avx512\")\n        set(ICELAKE_FLAG \"-march=icelake-server\")\n    endif ()\nendif()\n\nCHECK_INCLUDE_FILES(unistd.h HAVE_UNISTD_H)\nCHECK_INCLUDE_FILES(intrin.h HAVE_C_INTRIN_H)\nCHECK_INCLUDE_FILE_CXX(intrin.h HAVE_CXX_INTRIN_H)\nCHECK_INCLUDE_FILES(x86intrin.h HAVE_C_X86INTRIN_H)\nCHECK_INCLUDE_FILE_CXX(x86intrin.h HAVE_CXX_X86INTRIN_H)\n\nCHECK_FUNCTION_EXISTS(posix_memalign HAVE_POSIX_MEMALIGN)\nCHECK_FUNCTION_EXISTS(_aligned_malloc HAVE__ALIGNED_MALLOC)\n\n# these end up in the config file\nCHECK_C_COMPILER_FLAG(-fvisibility=hidden HAS_C_HIDDEN)\nCHECK_CXX_COMPILER_FLAG(-fvisibility=hidden HAS_CXX_HIDDEN)\n\n# are we using libc++\nCHECK_CXX_SYMBOL_EXISTS(_LIBCPP_VERSION ciso646 HAVE_LIBCPP)\n\nif (RELEASE_BUILD)\n    if (HAS_C_HIDDEN)\n        set(EXTRA_C_FLAGS \"${EXTRA_C_FLAGS} -fvisibility=hidden\")\n    endif()\n    if (HAS_CXX_HIDDEN)\n        set(EXTRA_CXX_FLAGS \"${EXTRA_CXX_FLAGS} -fvisibility=hidden\")\n    endif()\nendif()\n\nif (CMAKE_SYSTEM_NAME MATCHES \"Linux\")\n    # This is a Linux-only feature for now - requires platform support\n    # elsewhere\n    message(STATUS \"generator is ${CMAKE_GENERATOR}\")\n    if (CMAKE_C_COMPILER_ID MATCHES \"Clang\" AND\n        CMAKE_C_COMPILER_VERSION VERSION_LESS \"3.9\")\n        message (STATUS \"Clang v3.9 or higher required for fat runtime, cannot build fat runtime\")\n        set (FAT_RUNTIME_REQUISITES FALSE)\n    elseif (NOT (CMAKE_GENERATOR MATCHES \"Unix Makefiles\" OR\n            (CMAKE_VERSION VERSION_GREATER \"3.0\" AND CMAKE_GENERATOR MATCHES \"Ninja\")))\n        message (STATUS \"Building the fat runtime requires the Unix Makefiles generator, or Ninja with CMake v3.0 or higher\")\n        set (FAT_RUNTIME_REQUISITES FALSE)\n    else()\n        include (${CMAKE_MODULE_PATH}/attrib.cmake)\n        if (NOT HAS_C_ATTR_IFUNC)\n            message(STATUS \"Compiler does not support ifunc attribute, cannot build fat runtime\")\n            set (FAT_RUNTIME_REQUISITES FALSE)\n        else ()\n            set (FAT_RUNTIME_REQUISITES TRUE)\n        endif()\n    endif()\n    CMAKE_DEPENDENT_OPTION(FAT_RUNTIME \"Build a library that supports multiple microarchitectures\" ${RELEASE_BUILD} \"FAT_RUNTIME_REQUISITES\" OFF)\nendif ()\n\ninclude (${CMAKE_MODULE_PATH}/arch.cmake)\n\n# testing a builtin takes a little more work\nCHECK_C_SOURCE_COMPILES(\"void *aa_test(void *x) { return __builtin_assume_aligned(x, 16);}\\nint main(void) { return 0; }\" HAVE_CC_BUILTIN_ASSUME_ALIGNED)\nCHECK_CXX_SOURCE_COMPILES(\"void *aa_test(void *x) { return __builtin_assume_aligned(x, 16);}\\nint main(void) { return 0; }\" HAVE_CXX_BUILTIN_ASSUME_ALIGNED)\nCHECK_C_SOURCE_COMPILES(\"int main(void) { __builtin_constant_p(0); }\" HAVE__BUILTIN_CONSTANT_P)\n\nif (NOT WIN32)\nset(C_FLAGS_TO_CHECK\n# Variable length arrays are way bad, most especially at run time\n\"-Wvla\"\n# Pointer arith on void pointers is doing it wrong.\n \"-Wpointer-arith\"\n# Build our C code with -Wstrict-prototypes -Wmissing-prototypes\n \"-Wstrict-prototypes\"\n \"-Wmissing-prototypes\"\n)\nforeach (FLAG ${C_FLAGS_TO_CHECK})\n    # munge the name so it doesn't break things\n    string(REPLACE \"-\" \"_\" FNAME C_FLAG${FLAG})\n    CHECK_C_COMPILER_FLAG(\"${FLAG}\" ${FNAME})\n    if (${FNAME})\n        set(EXTRA_C_FLAGS \"${EXTRA_C_FLAGS} ${FLAG}\")\n    endif()\nendforeach()\n\nset(CXX_FLAGS_TO_CHECK\n\"-Wvla\"\n\"-Wpointer-arith\"\n)\nforeach (FLAG ${CXX_FLAGS_TO_CHECK})\n    string(REPLACE \"-\" \"_\" FNAME CXX_FLAG${FLAG})\n    CHECK_CXX_COMPILER_FLAG(\"${FLAG}\" ${FNAME})\n    if (${FNAME})\n        set(EXTRA_CXX_FLAGS \"${EXTRA_CXX_FLAGS} ${FLAG}\")\n    endif()\nendforeach()\n\n# self-assign should be thrown away, but clang whinges\nCHECK_C_COMPILER_FLAG(\"-Wself-assign\" CC_SELF_ASSIGN)\nif (CC_SELF_ASSIGN)\n    set(EXTRA_C_FLAGS \"${EXTRA_C_FLAGS} -Wno-self-assign\")\nendif()\nCHECK_CXX_COMPILER_FLAG(\"-Wself-assign\" CXX_SELF_ASSIGN)\nif (CXX_SELF_ASSIGN)\n    set(EXTRA_CXX_FLAGS \"${EXTRA_CXX_FLAGS} -Wno-self-assign\")\nendif()\n\n# clang gets up in our face for going paren crazy with macros\nCHECK_C_COMPILER_FLAG(\"-Wparentheses-equality\" CC_PAREN_EQUALITY)\nif (CC_PAREN_EQUALITY)\n    set(EXTRA_C_FLAGS \"${EXTRA_C_FLAGS} -Wno-parentheses-equality\")\nendif()\n\n# clang complains about unused const vars in our Ragel-generated code.\nCHECK_CXX_COMPILER_FLAG(\"-Wunused-const-variable\" CXX_UNUSED_CONST_VAR)\nif (CXX_UNUSED_CONST_VAR)\n    set(EXTRA_CXX_FLAGS \"${EXTRA_CXX_FLAGS} -Wno-unused-const-variable\")\nendif()\n\n# clang-14 complains about unused-but-set variable.\nCHECK_CXX_COMPILER_FLAG(\"-Wunused-but-set-variable\" CXX_UNUSED_BUT_SET_VAR)\nif (CXX_UNUSED_BUT_SET_VAR)\n    set(EXTRA_CXX_FLAGS \"${EXTRA_CXX_FLAGS} -Wno-unused-but-set-variable\")\nendif()\n\n# clang-14 complains about using bitwise operator instead of logical ones.\nCHECK_CXX_COMPILER_FLAG(\"-Wbitwise-instead-of-logical\" CXX_BITWISE_INSTEAD_OF_LOGICAL)\nif (CXX_BITWISE_INSTEAD_OF_LOGICAL)\n    set(EXTRA_CXX_FLAGS \"${EXTRA_CXX_FLAGS} -Wno-bitwise-instead-of-logical\")\nendif()\n\n# gcc 6 complains about type attributes that get ignored, like alignment\nCHECK_CXX_COMPILER_FLAG(\"-Wignored-attributes\" CXX_IGNORED_ATTR)\nif (CXX_IGNORED_ATTR)\n    set(EXTRA_CXX_FLAGS \"${EXTRA_CXX_FLAGS} -Wno-ignored-attributes\")\nendif()\n\n# gcc 9 complains about redundant move for returned variable\nCHECK_CXX_COMPILER_FLAG(\"-Wredundant-move\" CXX_REDUNDANT_MOVE)\nif (CXX_REDUNDANT_MOVE)\n    set(EXTRA_CXX_FLAGS \"${EXTRA_CXX_FLAGS} -Wno-redundant-move\")\nendif()\n\n# note this for later\n# g++ doesn't have this flag but clang does\nCHECK_CXX_COMPILER_FLAG(\"-Wweak-vtables\" CXX_WEAK_VTABLES)\nif (CXX_WEAK_VTABLES)\n    set(EXTRA_CXX_FLAGS \"${EXTRA_CXX_FLAGS} -Wweak-vtables\")\nendif()\n\nCHECK_CXX_COMPILER_FLAG(\"-Wmissing-declarations\" CXX_MISSING_DECLARATIONS)\nif (CXX_MISSING_DECLARATIONS)\n    set(EXTRA_CXX_FLAGS \"${EXTRA_CXX_FLAGS} -Wmissing-declarations\")\nendif()\n\nCHECK_CXX_COMPILER_FLAG(\"-Wunused-local-typedefs\" CXX_UNUSED_LOCAL_TYPEDEFS)\n\n# gcc5 complains about this\nCHECK_CXX_COMPILER_FLAG(\"-Wunused-variable\" CXX_WUNUSED_VARIABLE)\n\n# gcc 10 complains about this\nCHECK_C_COMPILER_FLAG(\"-Wstringop-overflow\" CC_STRINGOP_OVERFLOW)\nCHECK_CXX_COMPILER_FLAG(\"-Wstringop-overflow\" CXX_STRINGOP_OVERFLOW)\nif(CC_STRINGOP_OVERFLOW OR CXX_STRINGOP_OVERFLOW)\n    set(EXTRA_C_FLAGS \"${EXTRA_C_FLAGS} -Wno-stringop-overflow\")\n    set(EXTRA_CXX_FLAGS \"${EXTRA_CXX_FLAGS} -Wno-stringop-overflow\")\nendif()\n\nendif()\n\ninclude_directories(SYSTEM ${Boost_INCLUDE_DIRS})\n\nif(CMAKE_SYSTEM_NAME MATCHES \"Linux\")\n    set(LINUX TRUE)\nendif(CMAKE_SYSTEM_NAME MATCHES \"Linux\")\n\nif(CMAKE_SYSTEM_NAME MATCHES \"FreeBSD\")\n    set(FREEBSD true)\nendif(CMAKE_SYSTEM_NAME MATCHES \"FreeBSD\")\n\nif(NOT WIN32)\nif(CMAKE_C_COMPILER_ID MATCHES \"Intel\")\n    SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -diag-error 10006 -diag-disable 68 -diag-disable 177 -diag-disable 186 -diag-disable 2304 -diag-disable 2305 -diag-disable 2338 -diag-disable 1418 -diag-disable 279 -diag-disable=remark\")\nendif()\nif(CMAKE_CXX_COMPILER_ID MATCHES \"Intel\")\n    SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -diag-error 10006 -diag-disable 68 -diag-disable 177 -diag-disable 186 -diag-disable 2304 -diag-disable 2305 -diag-disable 2338 -diag-disable 1418 -diag-disable 1170 -diag-disable 3373 -diag-disable 279 -diag-disable=remark\")\nendif()\nendif()\n\nif (NOT FAT_RUNTIME)\n    message(STATUS \"Building for current host CPU: ${ARCH_C_FLAGS}\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${ARCH_C_FLAGS}\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${ARCH_CXX_FLAGS}\")\nelse()\n    message(STATUS \"Building runtime for multiple microarchitectures\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\nendif()\n\nadd_subdirectory(util)\nadd_subdirectory(doc/dev-reference)\n\nif (NOT WIN32)\n# PCRE check, we have a fixed requirement for PCRE to use Chimera\n# and hscollider\nset(PCRE_REQUIRED_MAJOR_VERSION 8)\nset(PCRE_REQUIRED_MINOR_VERSION 41)\nset(PCRE_REQUIRED_VERSION ${PCRE_REQUIRED_MAJOR_VERSION}.${PCRE_REQUIRED_MINOR_VERSION})\ninclude (${CMAKE_MODULE_PATH}/pcre.cmake)\nif (NOT CORRECT_PCRE_VERSION)\n    message(STATUS \"PCRE ${PCRE_REQUIRED_VERSION} or above not found\")\nendif()\n\n# we need static libs for Chimera - too much deep magic for shared libs\nif (CORRECT_PCRE_VERSION AND PCRE_BUILD_SOURCE AND BUILD_STATIC_LIBS)\n    set(BUILD_CHIMERA TRUE)\nendif()\n\nadd_subdirectory(unit)\nif (EXISTS ${CMAKE_SOURCE_DIR}/tools/CMakeLists.txt)\n    add_subdirectory(tools)\nendif()\nif (EXISTS ${CMAKE_SOURCE_DIR}/chimera/CMakeLists.txt AND BUILD_CHIMERA)\n    add_subdirectory(chimera)\nendif()\nendif()\n\n# do substitutions\nconfigure_file(${CMAKE_MODULE_PATH}/config.h.in ${PROJECT_BINARY_DIR}/config.h)\nconfigure_file(src/hs_version.h.in ${PROJECT_BINARY_DIR}/hs_version.h)\n\nif (NOT WIN32)\n    # expand out library names for pkgconfig static link info\n    foreach (LIB ${CMAKE_CXX_IMPLICIT_LINK_LIBRARIES})\n        # this is fragile, but protects us from toolchain specific files\n        if (NOT EXISTS ${LIB})\n            set(PRIVATE_LIBS \"${PRIVATE_LIBS} -l${LIB}\")\n        endif()\n    endforeach()\n\n    configure_file(libhs.pc.in libhs.pc @ONLY) # only replace @ quoted vars\n    install(FILES ${CMAKE_BINARY_DIR}/libhs.pc\n        DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\nendif()\n\n# only set these after all tests are done\nif (NOT FAT_RUNTIME)\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${EXTRA_C_FLAGS} ${HS_C_FLAGS}\")\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${EXTRA_CXX_FLAGS} ${HS_CXX_FLAGS}\")\nelse()\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${EXTRA_C_FLAGS}\")\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${EXTRA_CXX_FLAGS}\")\nendif()\n\nif (WIN32)\n# PCRE check, we have a fixed requirement for PCRE to use Chimera\n# and hscollider\nset(PCRE_REQUIRED_MAJOR_VERSION 8)\nset(PCRE_REQUIRED_MINOR_VERSION 41)\nset(PCRE_REQUIRED_VERSION ${PCRE_REQUIRED_MAJOR_VERSION}.${PCRE_REQUIRED_MINOR_VERSION})\ninclude (${CMAKE_MODULE_PATH}/pcre.cmake)\nif (NOT CORRECT_PCRE_VERSION)\n    message(STATUS \"PCRE ${PCRE_REQUIRED_VERSION} or above not found\")\nendif()\n\n# we need static libs for Chimera - too much deep magic for shared libs\nif (CORRECT_PCRE_VERSION AND PCRE_BUILD_SOURCE AND BUILD_STATIC_LIBS)\n    set(BUILD_CHIMERA TRUE)\nendif()\n\nadd_subdirectory(unit)\nif (EXISTS ${CMAKE_SOURCE_DIR}/tools/CMakeLists.txt)\n    add_subdirectory(tools)\nendif()\nif (EXISTS ${CMAKE_SOURCE_DIR}/chimera/CMakeLists.txt AND BUILD_CHIMERA)\n    add_subdirectory(chimera)\nendif()\nendif()\n\nif(NOT WIN32)\nset(RAGEL_C_FLAGS \"-Wno-unused\")\nendif()\n\nset_source_files_properties(\n    ${CMAKE_BINARY_DIR}/src/parser/Parser.cpp\n    PROPERTIES\n        COMPILE_FLAGS \"${RAGEL_C_FLAGS}\")\n\nragelmaker(src/parser/Parser.rl)\n\nset_source_files_properties(\n    ${CMAKE_BINARY_DIR}/src/parser/control_verbs.cpp\n    PROPERTIES\n        COMPILE_FLAGS \"${RAGEL_C_FLAGS}\")\n\nragelmaker(src/parser/control_verbs.rl)\n\nSET(hs_HEADERS\n    src/hs.h\n    src/hs_common.h\n    src/hs_compile.h\n    src/hs_runtime.h\n)\ninstall(FILES ${hs_HEADERS} DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/hs\")\n\nset (hs_exec_common_SRCS\n    src/alloc.c\n    src/scratch.c\n    src/util/cpuid_flags.c\n    src/util/cpuid_flags.h\n    src/util/multibit.c\n    )\n\nset (hs_exec_SRCS\n    ${hs_HEADERS}\n    src/hs_version.h.in\n    src/ue2common.h\n    src/allocator.h\n    src/crc32.c\n    src/crc32.h\n    src/report.h\n    src/runtime.c\n    src/stream_compress.c\n    src/stream_compress.h\n    src/stream_compress_impl.h\n    src/fdr/fdr.c\n    src/fdr/fdr.h\n    src/fdr/fdr_internal.h\n    src/fdr/fdr_confirm.h\n    src/fdr/fdr_confirm_runtime.h\n    src/fdr/flood_runtime.h\n    src/fdr/fdr_loadval.h\n    src/fdr/teddy.c\n    src/fdr/teddy.h\n    src/fdr/teddy_internal.h\n    src/fdr/teddy_runtime_common.h\n    src/hwlm/hwlm.c\n    src/hwlm/hwlm.h\n    src/hwlm/hwlm_internal.h\n    src/hwlm/noodle_engine.c\n    src/hwlm/noodle_engine.h\n    src/hwlm/noodle_internal.h\n    src/nfa/accel.c\n    src/nfa/accel.h\n    src/nfa/castle.c\n    src/nfa/castle.h\n    src/nfa/castle_internal.h\n    src/nfa/gough.c\n    src/nfa/gough_internal.h\n    src/nfa/lbr.c\n    src/nfa/lbr.h\n    src/nfa/lbr_common_impl.h\n    src/nfa/lbr_internal.h\n    src/nfa/limex_accel.c\n    src/nfa/limex_accel.h\n    src/nfa/limex_exceptional.h\n    src/nfa/limex_native.c\n    src/nfa/limex_ring.h\n    src/nfa/limex_64.c\n    src/nfa/limex_simd128.c\n    src/nfa/limex_simd256.c\n    src/nfa/limex_simd384.c\n    src/nfa/limex_simd512.c\n    src/nfa/limex.h\n    src/nfa/limex_common_impl.h\n    src/nfa/limex_context.h\n    src/nfa/limex_internal.h\n    src/nfa/limex_runtime.h\n    src/nfa/limex_runtime_impl.h\n    src/nfa/limex_shuffle.h\n    src/nfa/limex_state_impl.h\n    src/nfa/mcclellan.c\n    src/nfa/mcclellan.h\n    src/nfa/mcclellan_common_impl.h\n    src/nfa/mcclellan_internal.h\n    src/nfa/mcsheng.c\n    src/nfa/mcsheng_data.c\n    src/nfa/mcsheng.h\n    src/nfa/mcsheng_internal.h\n    src/nfa/mpv.h\n    src/nfa/mpv.c\n    src/nfa/mpv_internal.h\n    src/nfa/nfa_api.h\n    src/nfa/nfa_api_dispatch.c\n    src/nfa/nfa_internal.h\n    src/nfa/nfa_rev_api.h\n    src/nfa/repeat.c\n    src/nfa/repeat.h\n    src/nfa/repeat_internal.h\n    src/nfa/sheng.c\n    src/nfa/sheng.h\n    src/nfa/sheng_defs.h\n    src/nfa/sheng_impl.h\n    src/nfa/sheng_impl4.h\n    src/nfa/sheng_internal.h\n    src/nfa/shufti.c\n    src/nfa/shufti.h\n    src/nfa/tamarama.c\n    src/nfa/tamarama.h\n    src/nfa/tamarama_internal.h\n    src/nfa/truffle.c\n    src/nfa/truffle.h\n    src/nfa/vermicelli.h\n    src/nfa/vermicelli_run.h\n    src/nfa/vermicelli_sse.h\n    src/som/som.h\n    src/som/som_operation.h\n    src/som/som_runtime.h\n    src/som/som_runtime.c\n    src/som/som_stream.c\n    src/som/som_stream.h\n    src/rose/block.c\n    src/rose/catchup.h\n    src/rose/catchup.c\n    src/rose/infix.h\n    src/rose/init.h\n    src/rose/init.c\n    src/rose/stream.c\n    src/rose/stream_long_lit.h\n    src/rose/stream_long_lit_hash.h\n    src/rose/match.h\n    src/rose/match.c\n    src/rose/miracle.h\n    src/rose/program_runtime.c\n    src/rose/program_runtime.h\n    src/rose/runtime.h\n    src/rose/rose.h\n    src/rose/rose_internal.h\n    src/rose/rose_program.h\n    src/rose/rose_types.h\n    src/rose/rose_common.h\n    src/rose/validate_mask.h\n    src/rose/validate_shufti.h\n    src/util/bitutils.h\n    src/util/copybytes.h\n    src/util/exhaust.h\n    src/util/fatbit.h\n    src/util/join.h\n    src/util/masked_move.h\n    src/util/multibit.h\n    src/util/multibit.c\n    src/util/multibit_compress.h\n    src/util/multibit_internal.h\n    src/util/pack_bits.h\n    src/util/popcount.h\n    src/util/pqueue.h\n    src/util/scatter.h\n    src/util/scatter_runtime.h\n    src/util/simd_utils.h\n    src/util/simd_utils.c\n    src/util/state_compress.h\n    src/util/state_compress.c\n    src/util/unaligned.h\n    src/util/uniform_ops.h\n    src/database.c\n    src/database.h\n)\n\nset (hs_exec_avx2_SRCS\n    src/fdr/teddy_avx2.c\n    src/util/masked_move.c\n)\n\n\nSET (hs_compile_SRCS\n    ${hs_HEADERS}\n    src/crc32.h\n    src/database.h\n    src/grey.cpp\n    src/grey.h\n    src/hs.cpp\n    src/hs_internal.h\n    src/hs_version.h.in\n    src/scratch.h\n    src/state.h\n    src/ue2common.h\n    src/compiler/asserts.cpp\n    src/compiler/asserts.h\n    src/compiler/compiler.cpp\n    src/compiler/compiler.h\n    src/compiler/error.cpp\n    src/compiler/error.h\n    src/compiler/expression_info.h\n    src/fdr/engine_description.cpp\n    src/fdr/engine_description.h\n    src/fdr/fdr_compile.cpp\n    src/fdr/fdr_compile.h\n    src/fdr/fdr_compile_internal.h\n    src/fdr/fdr_compile_util.cpp\n    src/fdr/fdr_confirm_compile.cpp\n    src/fdr/fdr_confirm.h\n    src/fdr/fdr_engine_description.cpp\n    src/fdr/fdr_engine_description.h\n    src/fdr/fdr_internal.h\n    src/fdr/flood_compile.cpp\n    src/fdr/teddy_compile.cpp\n    src/fdr/teddy_compile.h\n    src/fdr/teddy_engine_description.cpp\n    src/fdr/teddy_engine_description.h\n    src/fdr/teddy_internal.h\n    src/hwlm/hwlm_build.cpp\n    src/hwlm/hwlm_build.h\n    src/hwlm/hwlm_internal.h\n    src/hwlm/hwlm_literal.cpp\n    src/hwlm/hwlm_literal.h\n    src/hwlm/noodle_build.cpp\n    src/hwlm/noodle_build.h\n    src/hwlm/noodle_internal.h\n    src/nfa/accel.h\n    src/nfa/accel_dfa_build_strat.cpp\n    src/nfa/accel_dfa_build_strat.h\n    src/nfa/accelcompile.cpp\n    src/nfa/accelcompile.h\n    src/nfa/callback.h\n    src/nfa/castlecompile.cpp\n    src/nfa/castlecompile.h\n    src/nfa/dfa_build_strat.cpp\n    src/nfa/dfa_build_strat.h\n    src/nfa/dfa_min.cpp\n    src/nfa/dfa_min.h\n    src/nfa/goughcompile.cpp\n    src/nfa/goughcompile.h\n    src/nfa/goughcompile_accel.cpp\n    src/nfa/goughcompile_internal.h\n    src/nfa/goughcompile_reg.cpp\n    src/nfa/mcclellan.h\n    src/nfa/mcclellan_internal.h\n    src/nfa/mcclellancompile.cpp\n    src/nfa/mcclellancompile.h\n    src/nfa/mcclellancompile_util.cpp\n    src/nfa/mcclellancompile_util.h\n    src/nfa/mcsheng_compile.cpp\n    src/nfa/mcsheng_compile.h\n    src/nfa/limex_compile.cpp\n    src/nfa/limex_compile.h\n    src/nfa/limex_accel.h\n    src/nfa/limex_internal.h\n    src/nfa/mpv_internal.h\n    src/nfa/mpvcompile.cpp\n    src/nfa/mpvcompile.h\n    src/nfa/nfa_api.h\n    src/nfa/nfa_api_queue.h\n    src/nfa/nfa_api_util.h\n    src/nfa/nfa_build_util.cpp\n    src/nfa/nfa_build_util.h\n    src/nfa/nfa_internal.h\n    src/nfa/nfa_kind.h\n    src/nfa/rdfa.cpp\n    src/nfa/rdfa.h\n    src/nfa/rdfa_graph.cpp\n    src/nfa/rdfa_graph.h\n    src/nfa/rdfa_merge.cpp\n    src/nfa/rdfa_merge.h\n    src/nfa/repeat_internal.h\n    src/nfa/repeatcompile.cpp\n    src/nfa/repeatcompile.h\n    src/nfa/sheng_internal.h\n    src/nfa/shengcompile.cpp\n    src/nfa/shengcompile.h\n    src/nfa/shufticompile.cpp\n    src/nfa/shufticompile.h\n    src/nfa/tamaramacompile.cpp\n    src/nfa/tamaramacompile.h\n    src/nfa/trufflecompile.cpp\n    src/nfa/trufflecompile.h\n    src/nfagraph/ng.cpp\n    src/nfagraph/ng.h\n    src/nfagraph/ng_anchored_acyclic.cpp\n    src/nfagraph/ng_anchored_acyclic.h\n    src/nfagraph/ng_anchored_dots.cpp\n    src/nfagraph/ng_anchored_dots.h\n    src/nfagraph/ng_asserts.cpp\n    src/nfagraph/ng_asserts.h\n    src/nfagraph/ng_builder.cpp\n    src/nfagraph/ng_builder.h\n    src/nfagraph/ng_calc_components.cpp\n    src/nfagraph/ng_calc_components.h\n    src/nfagraph/ng_cyclic_redundancy.cpp\n    src/nfagraph/ng_cyclic_redundancy.h\n    src/nfagraph/ng_depth.cpp\n    src/nfagraph/ng_depth.h\n    src/nfagraph/ng_dominators.cpp\n    src/nfagraph/ng_dominators.h\n    src/nfagraph/ng_edge_redundancy.cpp\n    src/nfagraph/ng_edge_redundancy.h\n    src/nfagraph/ng_equivalence.cpp\n    src/nfagraph/ng_equivalence.h\n    src/nfagraph/ng_execute.cpp\n    src/nfagraph/ng_execute.h\n    src/nfagraph/ng_expr_info.cpp\n    src/nfagraph/ng_expr_info.h\n    src/nfagraph/ng_extparam.cpp\n    src/nfagraph/ng_extparam.h\n    src/nfagraph/ng_fixed_width.cpp\n    src/nfagraph/ng_fixed_width.h\n    src/nfagraph/ng_fuzzy.cpp\n    src/nfagraph/ng_fuzzy.h\n    src/nfagraph/ng_haig.cpp\n    src/nfagraph/ng_haig.h\n    src/nfagraph/ng_holder.cpp\n    src/nfagraph/ng_holder.h\n    src/nfagraph/ng_is_equal.cpp\n    src/nfagraph/ng_is_equal.h\n    src/nfagraph/ng_lbr.cpp\n    src/nfagraph/ng_lbr.h\n    src/nfagraph/ng_literal_analysis.cpp\n    src/nfagraph/ng_literal_analysis.h\n    src/nfagraph/ng_literal_component.cpp\n    src/nfagraph/ng_literal_component.h\n    src/nfagraph/ng_literal_decorated.cpp\n    src/nfagraph/ng_literal_decorated.h\n    src/nfagraph/ng_mcclellan.cpp\n    src/nfagraph/ng_mcclellan.h\n    src/nfagraph/ng_mcclellan_internal.h\n    src/nfagraph/ng_limex.cpp\n    src/nfagraph/ng_limex.h\n    src/nfagraph/ng_limex_accel.cpp\n    src/nfagraph/ng_limex_accel.h\n    src/nfagraph/ng_misc_opt.cpp\n    src/nfagraph/ng_misc_opt.h\n    src/nfagraph/ng_netflow.cpp\n    src/nfagraph/ng_netflow.h\n    src/nfagraph/ng_prefilter.cpp\n    src/nfagraph/ng_prefilter.h\n    src/nfagraph/ng_prune.cpp\n    src/nfagraph/ng_prune.h\n    src/nfagraph/ng_puff.cpp\n    src/nfagraph/ng_puff.h\n    src/nfagraph/ng_redundancy.cpp\n    src/nfagraph/ng_redundancy.h\n    src/nfagraph/ng_region.cpp\n    src/nfagraph/ng_region.h\n    src/nfagraph/ng_region_redundancy.cpp\n    src/nfagraph/ng_region_redundancy.h\n    src/nfagraph/ng_repeat.cpp\n    src/nfagraph/ng_repeat.h\n    src/nfagraph/ng_reports.cpp\n    src/nfagraph/ng_reports.h\n    src/nfagraph/ng_restructuring.cpp\n    src/nfagraph/ng_restructuring.h\n    src/nfagraph/ng_revacc.cpp\n    src/nfagraph/ng_revacc.h\n    src/nfagraph/ng_sep.cpp\n    src/nfagraph/ng_sep.h\n    src/nfagraph/ng_small_literal_set.cpp\n    src/nfagraph/ng_small_literal_set.h\n    src/nfagraph/ng_som.cpp\n    src/nfagraph/ng_som.h\n    src/nfagraph/ng_som_add_redundancy.cpp\n    src/nfagraph/ng_som_add_redundancy.h\n    src/nfagraph/ng_som_util.cpp\n    src/nfagraph/ng_som_util.h\n    src/nfagraph/ng_split.cpp\n    src/nfagraph/ng_split.h\n    src/nfagraph/ng_squash.cpp\n    src/nfagraph/ng_squash.h\n    src/nfagraph/ng_stop.cpp\n    src/nfagraph/ng_stop.h\n    src/nfagraph/ng_uncalc_components.cpp\n    src/nfagraph/ng_uncalc_components.h\n    src/nfagraph/ng_utf8.cpp\n    src/nfagraph/ng_utf8.h\n    src/nfagraph/ng_util.cpp\n    src/nfagraph/ng_util.h\n    src/nfagraph/ng_vacuous.cpp\n    src/nfagraph/ng_vacuous.h\n    src/nfagraph/ng_violet.cpp\n    src/nfagraph/ng_violet.h\n    src/nfagraph/ng_width.cpp\n    src/nfagraph/ng_width.h\n    src/parser/AsciiComponentClass.cpp\n    src/parser/AsciiComponentClass.h\n    src/parser/Component.cpp\n    src/parser/Component.h\n    src/parser/ComponentAlternation.cpp\n    src/parser/ComponentAlternation.h\n    src/parser/ComponentAssertion.cpp\n    src/parser/ComponentAssertion.h\n    src/parser/ComponentAtomicGroup.cpp\n    src/parser/ComponentAtomicGroup.h\n    src/parser/ComponentBackReference.cpp\n    src/parser/ComponentBackReference.h\n    src/parser/ComponentBoundary.cpp\n    src/parser/ComponentBoundary.h\n    src/parser/ComponentByte.cpp\n    src/parser/ComponentByte.h\n    src/parser/ComponentClass.cpp\n    src/parser/ComponentClass.h\n    src/parser/ComponentCondReference.cpp\n    src/parser/ComponentCondReference.h\n    src/parser/ComponentEUS.cpp\n    src/parser/ComponentEUS.h\n    src/parser/ComponentEmpty.cpp\n    src/parser/ComponentEmpty.h\n    src/parser/ComponentRepeat.cpp\n    src/parser/ComponentRepeat.h\n    src/parser/ComponentSequence.cpp\n    src/parser/ComponentSequence.h\n    src/parser/ComponentVisitor.cpp\n    src/parser/ComponentVisitor.h\n    src/parser/ComponentWordBoundary.cpp\n    src/parser/ComponentWordBoundary.h\n    src/parser/ConstComponentVisitor.cpp\n    src/parser/ConstComponentVisitor.h\n    src/parser/Parser.cpp\n    src/parser/Parser.h\n    src/parser/Utf8ComponentClass.cpp\n    src/parser/Utf8ComponentClass.h\n    src/parser/buildstate.cpp\n    src/parser/buildstate.h\n    src/parser/check_refs.cpp\n    src/parser/check_refs.h\n    src/parser/control_verbs.cpp\n    src/parser/control_verbs.h\n    src/parser/logical_combination.cpp\n    src/parser/logical_combination.h\n    src/parser/parse_error.cpp\n    src/parser/parse_error.h\n    src/parser/parser_util.cpp\n    src/parser/position.h\n    src/parser/position_info.h\n    src/parser/prefilter.cpp\n    src/parser/prefilter.h\n    src/parser/shortcut_literal.cpp\n    src/parser/shortcut_literal.h\n    src/parser/ucp_table.cpp\n    src/parser/ucp_table.h\n    src/parser/unsupported.cpp\n    src/parser/unsupported.h\n    src/parser/utf8_validate.h\n    src/parser/utf8_validate.cpp\n    src/smallwrite/smallwrite_build.cpp\n    src/smallwrite/smallwrite_build.h\n    src/smallwrite/smallwrite_internal.h\n    src/som/slot_manager.cpp\n    src/som/slot_manager.h\n    src/som/slot_manager_internal.h\n    src/som/som.h\n    src/som/som_operation.h\n    src/rose/rose_build.h\n    src/rose/rose_build_add.cpp\n    src/rose/rose_build_add_internal.h\n    src/rose/rose_build_add_mask.cpp\n    src/rose/rose_build_anchored.cpp\n    src/rose/rose_build_anchored.h\n    src/rose/rose_build_bytecode.cpp\n    src/rose/rose_build_castle.h\n    src/rose/rose_build_castle.cpp\n    src/rose/rose_build_compile.cpp\n    src/rose/rose_build_convert.cpp\n    src/rose/rose_build_convert.h\n    src/rose/rose_build_dedupe.cpp\n    src/rose/rose_build_engine_blob.cpp\n    src/rose/rose_build_engine_blob.h\n    src/rose/rose_build_exclusive.cpp\n    src/rose/rose_build_exclusive.h\n    src/rose/rose_build_groups.cpp\n    src/rose/rose_build_groups.h\n    src/rose/rose_build_impl.h\n    src/rose/rose_build_infix.cpp\n    src/rose/rose_build_infix.h\n    src/rose/rose_build_instructions.cpp\n    src/rose/rose_build_instructions.h\n    src/rose/rose_build_lit_accel.cpp\n    src/rose/rose_build_lit_accel.h\n    src/rose/rose_build_long_lit.cpp\n    src/rose/rose_build_long_lit.h\n    src/rose/rose_build_lookaround.cpp\n    src/rose/rose_build_lookaround.h\n    src/rose/rose_build_matchers.cpp\n    src/rose/rose_build_matchers.h\n    src/rose/rose_build_merge.cpp\n    src/rose/rose_build_merge.h\n    src/rose/rose_build_misc.cpp\n    src/rose/rose_build_misc.h\n    src/rose/rose_build_program.cpp\n    src/rose/rose_build_program.h\n    src/rose/rose_build_resources.h\n    src/rose/rose_build_role_aliasing.cpp\n    src/rose/rose_build_scatter.cpp\n    src/rose/rose_build_scatter.h\n    src/rose/rose_build_util.h\n    src/rose/rose_build_width.cpp\n    src/rose/rose_build_width.h\n    src/rose/rose_graph.h\n    src/rose/rose_in_graph.h\n    src/rose/rose_in_util.cpp\n    src/rose/rose_in_util.h\n    src/util/accel_scheme.h\n    src/util/alloc.cpp\n    src/util/alloc.h\n    src/util/bitfield.h\n    src/util/boundary_reports.h\n    src/util/charreach.cpp\n    src/util/charreach.h\n    src/util/charreach_util.h\n    src/util/clique.cpp\n    src/util/clique.h\n    src/util/compare.h\n    src/util/compile_context.cpp\n    src/util/compile_context.h\n    src/util/compile_error.cpp\n    src/util/compile_error.h\n    src/util/container.h\n    src/util/depth.cpp\n    src/util/depth.h\n    src/util/determinise.h\n    src/util/dump_mask.cpp\n    src/util/dump_mask.h\n    src/util/fatbit_build.cpp\n    src/util/fatbit_build.h\n    src/util/flat_containers.h\n    src/util/graph.h\n    src/util/graph_range.h\n    src/util/graph_small_color_map.h\n    src/util/graph_undirected.h\n    src/util/hash.h\n    src/util/hash_dynamic_bitset.h\n    src/util/insertion_ordered.h\n    src/util/math.h\n    src/util/multibit_build.cpp\n    src/util/multibit_build.h\n    src/util/noncopyable.h\n    src/util/operators.h\n    src/util/order_check.h\n    src/util/partial_store.h\n    src/util/partitioned_set.h\n    src/util/popcount.h\n    src/util/queue_index_factory.h\n    src/util/report.h\n    src/util/report_manager.cpp\n    src/util/report_manager.h\n    src/util/simd_utils.h\n    src/util/small_vector.h\n    src/util/target_info.cpp\n    src/util/target_info.h\n    src/util/ue2_graph.h\n    src/util/ue2string.cpp\n    src/util/ue2string.h\n    src/util/unaligned.h\n    src/util/unicode_def.h\n    src/util/unicode_set.h\n    src/util/uniform_ops.h\n    src/util/unordered.h\n    src/util/verify_types.h\n)\n\nset(hs_dump_SRCS\n    src/scratch_dump.cpp\n    src/scratch_dump.h\n    src/fdr/fdr_dump.cpp\n    src/hwlm/hwlm_dump.cpp\n    src/hwlm/hwlm_dump.h\n    src/nfa/accel_dump.cpp\n    src/nfa/accel_dump.h\n    src/nfa/castle_dump.cpp\n    src/nfa/castle_dump.h\n    src/nfagraph/ng_dump.cpp\n    src/nfagraph/ng_dump.h\n    src/nfa/goughcompile_dump.cpp\n    src/nfa/goughcompile_dump.h\n    src/nfa/goughdump.cpp\n    src/nfa/goughdump.h\n    src/nfa/lbr_dump.cpp\n    src/nfa/limex_dump.cpp\n    src/nfa/mcclellandump.cpp\n    src/nfa/mcclellandump.h\n    src/nfa/mcsheng_dump.cpp\n    src/nfa/mcsheng_dump.h\n    src/nfa/mpv_dump.cpp\n    src/nfa/nfa_dump_api.h\n    src/nfa/nfa_dump_dispatch.cpp\n    src/nfa/nfa_dump_internal.cpp\n    src/nfa/nfa_dump_internal.h\n    src/nfa/shengdump.cpp\n    src/nfa/shengdump.h\n    src/nfa/tamarama_dump.cpp\n    src/nfa/tamarama_dump.h\n    src/parser/dump.cpp\n    src/parser/dump.h\n    src/parser/position_dump.h\n    src/smallwrite/smallwrite_dump.cpp\n    src/smallwrite/smallwrite_dump.h\n    src/som/slot_manager_dump.cpp\n    src/som/slot_manager_dump.h\n    src/rose/rose_build_dump.cpp\n    src/rose/rose_build_dump.h\n    src/rose/rose_in_dump.cpp\n    src/rose/rose_in_dump.h\n    src/util/dump_charclass.cpp\n    src/util/dump_charclass.h\n    src/util/dump_util.cpp\n    src/util/dump_util.h\n)\n\nif (DUMP_SUPPORT)\n    set(hs_compile_SRCS ${hs_compile_SRCS} ${hs_dump_SRCS})\nendif()\n\n# we group things by sublibraries, specifying shared and static and then\n# choose which ones to build\n\nset (LIB_VERSION ${HS_VERSION})\nset (LIB_SOVERSION ${HS_MAJOR_VERSION})\n\nif (NOT FAT_RUNTIME)\n\n    set(hs_exec_SRCS ${hs_exec_SRCS} ${hs_exec_common_SRCS})\n\n    if (HAVE_AVX2)\n        set(hs_exec_SRCS ${hs_exec_SRCS} ${hs_exec_avx2_SRCS})\n    endif()\n\n    if (BUILD_STATIC_LIBS)\n        add_library(hs_exec OBJECT ${hs_exec_SRCS})\n\n        add_library(hs_runtime STATIC src/hs_version.c src/hs_valid_platform.c $<TARGET_OBJECTS:hs_exec>)\n        set_target_properties(hs_runtime PROPERTIES LINKER_LANGUAGE C)\n\n        add_library(hs_compile OBJECT ${hs_compile_SRCS})\n\n        add_library(hs STATIC\n            src/hs_version.c\n            src/hs_valid_platform.c\n            $<TARGET_OBJECTS:hs_exec>\n            $<TARGET_OBJECTS:hs_compile>)\n    endif (BUILD_STATIC_LIBS)\n\n    if (BUILD_STATIC_AND_SHARED OR BUILD_SHARED_LIBS)\n        add_library(hs_exec_shared OBJECT ${hs_exec_SRCS})\n        set_target_properties(hs_exec_shared PROPERTIES POSITION_INDEPENDENT_CODE TRUE)\n        add_library(hs_compile_shared OBJECT ${hs_compile_SRCS})\n        set_target_properties(hs_compile_shared PROPERTIES POSITION_INDEPENDENT_CODE TRUE)\n    endif()\n\nelse (FAT_RUNTIME)\n\n    set(BUILD_WRAPPER \"${PROJECT_SOURCE_DIR}/cmake/build_wrapper.sh\")\n    if (NOT BUILD_AVX512)\n        set (DISPATCHER_DEFINE \"-DDISABLE_AVX512_DISPATCH\")\n    endif (NOT BUILD_AVX512)\n    if (NOT BUILD_AVX512VBMI)\n        set (DISPATCHER_DEFINE \"${DISPATCHER_DEFINE} -DDISABLE_AVX512VBMI_DISPATCH\")\n    endif (NOT BUILD_AVX512VBMI)\n    set_source_files_properties(src/dispatcher.c PROPERTIES\n        COMPILE_FLAGS \"-Wno-unused-parameter -Wno-unused-function ${DISPATCHER_DEFINE}\")\n\n    if (BUILD_STATIC_LIBS)\n       add_library(hs_exec_core2 OBJECT ${hs_exec_SRCS})\n       list(APPEND RUNTIME_LIBS $<TARGET_OBJECTS:hs_exec_core2>)\n       set_target_properties(hs_exec_core2 PROPERTIES\n           COMPILE_FLAGS \"-march=core2\"\n           RULE_LAUNCH_COMPILE \"${BUILD_WRAPPER} core2 ${CMAKE_MODULE_PATH}/keep.syms.in\"\n           )\n\n       add_library(hs_exec_corei7 OBJECT ${hs_exec_SRCS})\n       list(APPEND RUNTIME_LIBS $<TARGET_OBJECTS:hs_exec_corei7>)\n       set_target_properties(hs_exec_corei7 PROPERTIES\n           COMPILE_FLAGS \"-march=corei7\"\n           RULE_LAUNCH_COMPILE \"${BUILD_WRAPPER} corei7 ${CMAKE_MODULE_PATH}/keep.syms.in\"\n           )\n\n       add_library(hs_exec_avx2 OBJECT ${hs_exec_SRCS} ${hs_exec_avx2_SRCS})\n       list(APPEND RUNTIME_LIBS $<TARGET_OBJECTS:hs_exec_avx2>)\n       set_target_properties(hs_exec_avx2 PROPERTIES\n           COMPILE_FLAGS \"-march=core-avx2\"\n           RULE_LAUNCH_COMPILE \"${BUILD_WRAPPER} avx2 ${CMAKE_MODULE_PATH}/keep.syms.in\"\n           )\n       if (BUILD_AVX512)\n           add_library(hs_exec_avx512 OBJECT ${hs_exec_SRCS} ${hs_exec_avx2_SRCS})\n           list(APPEND RUNTIME_LIBS $<TARGET_OBJECTS:hs_exec_avx512>)\n           set_target_properties(hs_exec_avx512 PROPERTIES\n               COMPILE_FLAGS \"${SKYLAKE_FLAG}\"\n               RULE_LAUNCH_COMPILE \"${BUILD_WRAPPER} avx512 ${CMAKE_MODULE_PATH}/keep.syms.in\"\n               )\n       endif (BUILD_AVX512)\n       if (BUILD_AVX512VBMI)\n           add_library(hs_exec_avx512vbmi OBJECT ${hs_exec_SRCS} ${hs_exec_avx2_SRCS})\n           list(APPEND RUNTIME_LIBS $<TARGET_OBJECTS:hs_exec_avx512vbmi>)\n           set_target_properties(hs_exec_avx512vbmi PROPERTIES\n               COMPILE_FLAGS \"${ICELAKE_FLAG}\"\n               RULE_LAUNCH_COMPILE \"${BUILD_WRAPPER} avx512vbmi ${CMAKE_MODULE_PATH}/keep.syms.in\"\n               )\n       endif (BUILD_AVX512VBMI)\n\n       add_library(hs_exec_common OBJECT\n           ${hs_exec_common_SRCS}\n           src/dispatcher.c\n           )\n\n       # hs_version.c is added explicitly to avoid some build systems that refuse to\n       # create a lib without any src (I'm looking at you Xcode)\n\n       add_library(hs_runtime STATIC src/hs_version.c\n           $<TARGET_OBJECTS:hs_exec_common>\n           ${RUNTIME_LIBS})\n       set_target_properties(hs_runtime PROPERTIES LINKER_LANGUAGE C)\n        add_library(hs_compile OBJECT ${hs_compile_SRCS})\n\n       # we want the static lib for testing\n       add_library(hs STATIC src/hs_version.c src/hs_valid_platform.c\n           $<TARGET_OBJECTS:hs_compile>\n           $<TARGET_OBJECTS:hs_exec_common>\n           ${RUNTIME_LIBS})\n\n    endif (BUILD_STATIC_LIBS)\n\n    if (BUILD_STATIC_AND_SHARED OR BUILD_SHARED_LIBS)\n        # build shared libs\n        add_library(hs_compile_shared OBJECT ${hs_compile_SRCS})\n        set_target_properties(hs_compile_shared PROPERTIES POSITION_INDEPENDENT_CODE TRUE)\n        add_library(hs_exec_shared_core2 OBJECT ${hs_exec_SRCS})\n        list(APPEND RUNTIME_SHLIBS $<TARGET_OBJECTS:hs_exec_shared_core2>)\n        set_target_properties(hs_exec_shared_core2 PROPERTIES\n            COMPILE_FLAGS \"-march=core2\"\n            POSITION_INDEPENDENT_CODE TRUE\n            RULE_LAUNCH_COMPILE \"${BUILD_WRAPPER} core2 ${CMAKE_MODULE_PATH}/keep.syms.in\"\n            )\n        add_library(hs_exec_shared_corei7 OBJECT ${hs_exec_SRCS})\n        list(APPEND RUNTIME_SHLIBS $<TARGET_OBJECTS:hs_exec_shared_corei7>)\n        set_target_properties(hs_exec_shared_corei7 PROPERTIES\n            COMPILE_FLAGS \"-march=corei7\"\n            POSITION_INDEPENDENT_CODE TRUE\n            RULE_LAUNCH_COMPILE \"${BUILD_WRAPPER} corei7 ${CMAKE_MODULE_PATH}/keep.syms.in\"\n            )\n        add_library(hs_exec_shared_avx2 OBJECT ${hs_exec_SRCS} ${hs_exec_avx2_SRCS})\n        list(APPEND RUNTIME_SHLIBS $<TARGET_OBJECTS:hs_exec_shared_avx2>)\n        set_target_properties(hs_exec_shared_avx2 PROPERTIES\n            COMPILE_FLAGS \"-march=core-avx2\"\n            POSITION_INDEPENDENT_CODE TRUE\n            RULE_LAUNCH_COMPILE \"${BUILD_WRAPPER} avx2 ${CMAKE_MODULE_PATH}/keep.syms.in\"\n            )\n\n        if (BUILD_AVX512)\n            add_library(hs_exec_shared_avx512 OBJECT ${hs_exec_SRCS} ${hs_exec_avx2_SRCS})\n            list(APPEND RUNTIME_SHLIBS $<TARGET_OBJECTS:hs_exec_shared_avx512>)\n            set_target_properties(hs_exec_shared_avx512 PROPERTIES\n                COMPILE_FLAGS \"${SKYLAKE_FLAG}\"\n                POSITION_INDEPENDENT_CODE TRUE\n                RULE_LAUNCH_COMPILE \"${BUILD_WRAPPER} avx512 ${CMAKE_MODULE_PATH}/keep.syms.in\"\n                )\n        endif (BUILD_AVX512)\n        if (BUILD_AVX512VBMI)\n            add_library(hs_exec_shared_avx512vbmi OBJECT ${hs_exec_SRCS} ${hs_exec_avx2_SRCS})\n            list(APPEND RUNTIME_SHLIBS $<TARGET_OBJECTS:hs_exec_shared_avx512vbmi>)\n            set_target_properties(hs_exec_shared_avx512vbmi PROPERTIES\n                COMPILE_FLAGS \"${ICELAKE_FLAG}\"\n                POSITION_INDEPENDENT_CODE TRUE\n                RULE_LAUNCH_COMPILE \"${BUILD_WRAPPER} avx512vbmi ${CMAKE_MODULE_PATH}/keep.syms.in\"\n                )\n        endif (BUILD_AVX512VBMI)\n        add_library(hs_exec_common_shared OBJECT\n        ${hs_exec_common_SRCS}\n        src/dispatcher.c\n        )\n        set_target_properties(hs_exec_common_shared PROPERTIES\n            OUTPUT_NAME hs_exec_common\n            POSITION_INDEPENDENT_CODE TRUE)\n    endif() # SHARED\n\n\nendif (NOT FAT_RUNTIME)\n\nif (NOT BUILD_SHARED_LIBS)\n    install(TARGETS hs_runtime DESTINATION ${CMAKE_INSTALL_LIBDIR})\nendif()\n\nif (BUILD_STATIC_AND_SHARED OR BUILD_SHARED_LIBS)\n    if (NOT FAT_RUNTIME)\n        add_library(hs_runtime_shared SHARED src/hs_version.c\n            src/hs_valid_platform.c $<TARGET_OBJECTS:hs_exec_shared>\n            hs_runtime.def)\n    else()\n        add_library(hs_runtime_shared SHARED src/hs_version.c\n            src/hs_valid_platform.c\n            $<TARGET_OBJECTS:hs_exec_common_shared>\n            ${RUNTIME_SHLIBS}\n            hs_runtime.def)\n    endif()\n    set_target_properties(hs_runtime_shared PROPERTIES\n        VERSION ${LIB_VERSION}\n        SOVERSION ${LIB_SOVERSION}\n        OUTPUT_NAME hs_runtime\n        MACOSX_RPATH ON\n        LINKER_LANGUAGE C)\n    install(TARGETS hs_runtime_shared\n        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})\nendif()\n\nif (BUILD_STATIC_LIBS)\n    add_dependencies(hs ragel_Parser)\nendif ()\n\nif (NOT BUILD_SHARED_LIBS)\n    install(TARGETS hs DESTINATION ${CMAKE_INSTALL_LIBDIR})\nendif()\n\nif (BUILD_STATIC_AND_SHARED OR BUILD_SHARED_LIBS)\n    set(hs_shared_SRCS\n        src/hs_version.c\n        src/hs_valid_platform.c\n        $<TARGET_OBJECTS:hs_compile_shared>)\n\n    if (XCODE)\n        # force this lib to use C++ linkage\n        add_custom_command(OUTPUT empty.cxx\n            COMMAND ${CMAKE_COMMAND} -E touch empty.cxx)\n        set (hs_shared_SRCS ${hs_shared_SRCS} empty.cxx)\n    endif (XCODE)\n\n    if (NOT FAT_RUNTIME)\n        set(hs_shared_SRCS\n            ${hs_shared_SRCS}\n            $<TARGET_OBJECTS:hs_exec_shared>)\n    else ()\n        set(hs_shared_SRCS\n            ${hs_shared_SRCS}\n            $<TARGET_OBJECTS:hs_exec_common_shared>\n            ${RUNTIME_SHLIBS})\n    endif ()\n\n    add_library(hs_shared SHARED ${hs_shared_SRCS} hs.def)\n\n    add_dependencies(hs_shared ragel_Parser)\n    set_target_properties(hs_shared PROPERTIES\n        OUTPUT_NAME hs\n        VERSION ${LIB_VERSION}\n        SOVERSION ${LIB_SOVERSION}\n        MACOSX_RPATH ON)\n\n    install(TARGETS hs_shared\n        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})\nendif()\n\n# used by tools and other targets\nif (NOT BUILD_STATIC_LIBS)\n    # use shared lib without having to change all the targets\n    add_library(hs ALIAS hs_shared)\nendif ()\n\noption(BUILD_EXAMPLES \"Build Hyperscan example code (default TRUE)\" TRUE)\nif(NOT WIN32 AND BUILD_EXAMPLES)\n    add_subdirectory(examples)\nendif()\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.443359375,
          "content": "Copyright (c) 2015, Intel Corporation\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n * Redistributions of source code must retain the above copyright notice,\n   this list of conditions and the following disclaimer.\n * Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n * Neither the name of Intel Corporation nor the names of its contributors\n   may be used to endorse or promote products derived from this software\n   without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 5.8720703125,
          "content": "Hyperscan is licensed under the BSD License.\n\nCopyright (c) 2015, Intel Corporation\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice,\n    this list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n  * Neither the name of Intel Corporation nor the names of its contributors\n    may be used to endorse or promote products derived from this software\n    without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n--------------------------------------------------------------------------------\n\nThis product also contains code from third parties, under the following\nlicenses:\n\nIntel's Slicing-by-8 CRC32 implementation\n-----------------------------------------\n\nCopyright (c) 2004-2006, Intel Corporation\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice,\n    this list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation\n    and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nBoost C++ Headers Library\n-------------------------\n\nBoost Software License - Version 1.0 - August 17th, 2003\n\nPermission is hereby granted, free of charge, to any person or organization\nobtaining a copy of the software and accompanying documentation covered by\nthis license (the \"Software\") to use, reproduce, display, distribute,\nexecute, and transmit the Software, and to prepare derivative works of the\nSoftware, and to permit third-parties to whom the Software is furnished to\ndo so, all subject to the following:\n\nThe copyright notices in the Software and this entire statement, including\nthe above license grant, this restriction and the following disclaimer,\nmust be included in all copies of the Software, in whole or in part, and\nall derivative works of the Software, unless such copies or derivative\nworks are solely in the form of machine-executable object code generated by\na source language processor.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\nSHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\nFOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n\n\nThe Google C++ Testing Framework (Google Test)\n----------------------------------------------\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n    * Neither the name of Google Inc. nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.5595703125,
          "content": "# Hyperscan\n\nHyperscan is a high-performance multiple regex matching library. It follows the\nregular expression syntax of the commonly-used libpcre library, but is a\nstandalone library with its own C API.\n\nHyperscan uses hybrid automata techniques to allow simultaneous matching of\nlarge numbers (up to tens of thousands) of regular expressions and for the\nmatching of regular expressions across streams of data.\n\nHyperscan is typically used in a DPI library stack.\n\n# Documentation\n\nInformation on building the Hyperscan library and using its API is available in\nthe [Developer Reference Guide](http://intel.github.io/hyperscan/dev-reference/).\n\n# License\n\nHyperscan is licensed under the BSD License. See the LICENSE file in the\nproject repository.\n\n# Versioning\n\nThe `master` branch on Github will always contain the most recent release of\nHyperscan. Each version released to `master` goes through QA and testing before\nit is released; if you're a user, rather than a developer, this is the version\nyou should be using.\n\nFurther development towards the next release takes place on the `develop`\nbranch.\n\n# Get Involved\n\nThe official homepage for Hyperscan is at [www.hyperscan.io](https://www.hyperscan.io).\n\nIf you have questions or comments, we encourage you to [join the mailing\nlist](https://lists.01.org/mailman/listinfo/hyperscan). Bugs can be filed by\nsending email to the list, or by creating an issue on Github.\n\nIf you wish to contact the Hyperscan team at Intel directly, without posting\npublicly to the mailing list, send email to\n[hyperscan@intel.com](mailto:hyperscan@intel.com).\n"
        },
        {
          "name": "chimera",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "hs.def",
          "type": "blob",
          "size": 0.9169921875,
          "content": "; Hyperscan DLL export definitions\r\n\r\nLIBRARY hs\r\n\r\nEXPORTS\r\n   hs_alloc_scratch\r\n   hs_clone_scratch\r\n   hs_close_stream\r\n   hs_compile\r\n   hs_compile_ext_multi\r\n   hs_compile_multi\r\n   hs_compress_stream\r\n   hs_copy_stream\r\n   hs_database_info\r\n   hs_database_size\r\n   hs_deserialize_database\r\n   hs_deserialize_database_at\r\n   hs_expand_stream\r\n   hs_expression_ext_info\r\n   hs_expression_info\r\n   hs_free_compile_error\r\n   hs_free_database\r\n   hs_free_scratch\r\n   hs_open_stream\r\n   hs_populate_platform\r\n   hs_reset_and_copy_stream\r\n   hs_reset_and_expand_stream\r\n   hs_reset_stream\r\n   hs_scan\r\n   hs_scan_stream\r\n   hs_scan_vector\r\n   hs_scratch_size\r\n   hs_serialize_database\r\n   hs_serialized_database_info\r\n   hs_serialized_database_size\r\n   hs_set_allocator\r\n   hs_set_database_allocator\r\n   hs_set_misc_allocator\r\n   hs_set_scratch_allocator\r\n   hs_set_stream_allocator\r\n   hs_stream_size\r\n   hs_valid_platform\r\n   hs_version\r\n"
        },
        {
          "name": "hs_runtime.def",
          "type": "blob",
          "size": 0.7646484375,
          "content": "; Hyperscan DLL export definitions\r\n\r\nLIBRARY hs_runtime\r\n\r\nEXPORTS\r\n   hs_alloc_scratch\r\n   hs_clone_scratch\r\n   hs_close_stream\r\n   hs_compress_stream\r\n   hs_copy_stream\r\n   hs_database_info\r\n   hs_database_size\r\n   hs_deserialize_database\r\n   hs_deserialize_database_at\r\n   hs_expand_stream\r\n   hs_free_database\r\n   hs_free_scratch\r\n   hs_open_stream\r\n   hs_reset_and_copy_stream\r\n   hs_reset_and_expand_stream\r\n   hs_reset_stream\r\n   hs_scan\r\n   hs_scan_stream\r\n   hs_scan_vector\r\n   hs_scratch_size\r\n   hs_serialize_database\r\n   hs_serialized_database_info\r\n   hs_serialized_database_size\r\n   hs_set_allocator\r\n   hs_set_database_allocator\r\n   hs_set_misc_allocator\r\n   hs_set_scratch_allocator\r\n   hs_set_stream_allocator\r\n   hs_stream_size\r\n   hs_valid_platform\r\n   hs_version"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "libhs.pc.in",
          "type": "blob",
          "size": 0.3251953125,
          "content": "prefix=@CMAKE_INSTALL_PREFIX@\nexec_prefix=@CMAKE_INSTALL_PREFIX@\nlibdir=@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_LIBDIR@\nincludedir=@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_INCLUDEDIR@\n\nName: libhs\nDescription: Intel(R) Hyperscan Library\nVersion: @HS_VERSION@\nLibs: -L${libdir} -lhs\nLibs.private: @PRIVATE_LIBS@\nCflags: -I${includedir}/hs\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "unit",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}