{
  "metadata": {
    "timestamp": 1736565861749,
    "page": 812,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google-deepmind/code_contests",
      "stars": 2108,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".bazelrc",
          "type": "blob",
          "size": 0.1455078125,
          "content": "build --repo_env=CC=clang\nbuild --cxxopt=\"-std=c++17\"\nbuild --cxxopt=-D_GLIBCXX_USE_CXX11_ABI=0\nbuild --copt=\"-w\"\nbuild --copt=\"-fbracket-depth=512\"\n"
        },
        {
          "name": "BUILD",
          "type": "blob",
          "size": 1.3037109375,
          "content": "load(\"@com_github_grpc_grpc//bazel:python_rules.bzl\", \"py_proto_library\")\n\nlicenses([\"notice\"])\n\nexports_files([\"LICENSE\"])\n\npackage(\n    default_visibility = [\"//:__subpackages__\"],\n)\n\nproto_library(\n    name = \"contest_problem_proto\",\n    srcs = [\"contest_problem.proto\"],\n    deps = [\n        \"@com_google_protobuf//:duration_proto\",\n    ],\n)\n\npy_proto_library(\n    name = \"contest_problem_py_pb2\",\n    deps = [\":contest_problem_proto\"],\n)\n\ncc_proto_library(\n    name = \"contest_problem_cc_proto\",\n    deps = [\":contest_problem_proto\"],\n)\n\ncc_test(\n    name = \"load_data_test\",\n    srcs = [\"load_data_test.cc\"],\n    deps = [\n        \":contest_problem_cc_proto\",\n        \"@com_google_absl//absl/strings\",\n        \"@com_google_googletest//:gtest\",\n        \"@com_google_googletest//:gtest_main\",\n    ],\n)\n\ncc_binary(\n    name = \"print_names\",\n    srcs = [\"print_names.cc\"],\n    deps = [\n        \":contest_problem_cc_proto\",\n        \"@com_google_absl//absl/strings\",\n        \"@com_google_absl//absl/types:span\",\n        \"@com_google_riegeli//riegeli/bytes:fd_reader\",\n        \"@com_google_riegeli//riegeli/records:record_reader\",\n    ],\n)\n\npy_binary(\n    name = \"print_names_and_sources\",\n    srcs = [\"print_names_and_sources.py\"],\n    deps = [\n        \":contest_problem_py_pb2\",\n        \"@com_google_riegeli//python/riegeli\",\n    ],\n)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.9033203125,
          "content": "# How to Contribute\n\n# Pull Requests\n\nPlease send in fixes or feature additions through Pull Requests.\n\n## Contributor License Agreement\n\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution,\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to <https://cla.developers.google.com/> to see\nyour current agreements on file or to sign a new one.\n\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\n\n## Code reviews\n\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\n[GitHub Help](https://help.github.com/articles/about-pull-requests/) for more\ninformation on using pull requests.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.1201171875,
          "content": "# CodeContests\n\nCodeContests is a competitive programming dataset for machine-learning. This\ndataset was used when training\n[AlphaCode](https://deepmind.com/blog/article/Competitive-programming-with-AlphaCode). AlphaCode has been published in [Science](https://www.science.org/doi/10.1126/science.abq1158), with a preprint on [arXiv](https://arxiv.org/abs/2203.07814).\n\nIt consists of programming problems, from a variety of sources:\n\nSite        | URL                         | Source\n----------- | --------------------------- | ------\nAizu        | https://judge.u-aizu.ac.jp  | [CodeNet](https://github.com/IBM/Project_CodeNet)\nAtCoder     | https://atcoder.jp          | [CodeNet](https://github.com/IBM/Project_CodeNet)\nCodeChef    | https://www.codechef.com    | [description2code](https://github.com/ethancaballero/description2code)\nCodeforces  | https://codeforces.com      | [description2code](https://github.com/ethancaballero/description2code) and Codeforces\nHackerEarth | https://www.hackerearth.com | [description2code](https://github.com/ethancaballero/description2code)\n\nProblems include test cases in the form of paired inputs and outputs, as well as\nboth correct and incorrect human solutions in a variety of languages.\n\n## Install bazel\n\nFirst [install bazel](https://docs.bazel.build/versions/main/install.html)\nand verify it builds correctly (we only support Linux with clang, but other\nplatforms might work):\n\n```sh\nbazel build -c opt :print_names_and_sources\n```\n\n## Downloading the dataset\n\n[Install the Cloud SDK](https://cloud.google.com/sdk/docs/quickstart), which\nprovides the `gsutil` utility. You can then download the full data (~3GiB) with,\ne.g:\n\n```\ngsutil -m cp -r gs://dm-code_contests /tmp\n```\n\nThe data consists of `ContestProblem` protocol buffers in\n[Riegeli](https://github.com/google/riegeli) format. See `contest_problem.proto`\nfor the protocol buffer definition and documentation of its fields.\n\nThe dataset contains three splits:\n\nSplit      | Filename\n---------- | ----------------------------------------\nTraining   | `code_contests_train.riegeli-*-of-00128`\nValidation | `code_contests_valid.riegeli`\nTest       | `code_contests_test.riegeli`\n\nThere is example code for iterating over the dataset in C++ (in\n`print_names.cc`) and Python (in `print_names_and_sources.py`). For example, you\ncan print the source and name of each problem in the validation data by\n[installing bazel](https://docs.bazel.build/versions/main/install.html) and then\nrunning:\n\n```\nbazel run -c opt \\\n  :print_names_and_sources /tmp/dm-code_contests/code_contests_valid.riegeli\n```\n\nOr do the same for the training data with the following command (which will\nprint around 13000 lines of output):\n\n```\nbazel run -c opt \\\n  :print_names_and_sources /tmp/dm-code_contests/code_contests_train.riegeli*\n```\n\n## Executing and evaluating solutions\n\nThe `execution` subdirectory contains code for executing a solution and\nevaluating whether it solves a problem. `solve_example` demonstrates this\nfunctionality, and can be run with e.g.\n\n```\nbazel run -c opt execution:solve_example -- \\\n  --valid_path=/tmp/dm-code_contests/code_contests_valid.riegeli\n```\n\nNote, for the last command you should see one `Compilation failed` and two\n`Compilation succeeded`, if you see three `Compilation failed` then there is\nlikely an issue with the Python version used, please install and try several\nones before reporting a bug.\n\nThe execution code defaults to using Python 3.9 and 2.7, located at\n`/usr/bin/python3.9` and `/usr/bin/python2.7`, with standard libraries at\n`/usr/lib/python3.9` and `/usr/lib/python2.7`. These can be changed with the\nflags defined in `py_locations.cc`, for example:\n\n```\nbazel run -c opt execution:solve_example -- \\\n  --valid_path=/tmp/dm-code_contests/code_contests_valid.riegeli \\\n  --python3_path=/usr/bin/python3.10 --python3_library_paths=/usr/lib/python3.10\n```\n\nIn Debian/Ubuntu you can install specific Python versions with\n\n```\nsudo apt install python3.9 python3.10 python3.11\n```\n\nand you can check if you have some version installed by `which` provides output:\n\n```\nwhich python3.11\n```\n\nNote that the Python used for building with bazel and for executing inside the sandbox can be different.\n\n### Note on data and sandbox consistency\n\nThe incorrect and correct solutions attached to problems are not guaranteed to compile and execute in the exact same way as in their original contest website (for example different compiler versions or flags or different library versions). Some of the solutions will fail compilation, or will produce sandbox violations, especially if they are incorrect.\n\n### FAQ\n\nWe recommend running the following before reporting bugs, which wipes out the\nbazel state and sometimes fixes transient errors.\n\n```\nbazel clean --expunge\nrm -rf ~/.cache/bazel\n```\n\n## Supported platforms\n\nThis repository is supported on Linux, compiled with clang.\n\nPeople on MacOS have reported this error:\nhttps://github.com/deepmind/code_contests/issues/5\n\nWindows have reported this error:\nhttps://github.com/deepmind/code_contests/issues/9\n\n## Citing this work\n\nIf you use this dataset or code, please cite this paper:\n\n```\n@article{\n  doi:10.1126/science.abq1158,\n  author = {Yujia Li  and David Choi  and Junyoung Chung  and Nate Kushman  and Julian Schrittwieser  and R{\\'e}mi Leblond  and Tom Eccles  and James Keeling  and Felix Gimeno  and Agustin Dal Lago  and Thomas Hubert  and Peter Choy  and Cyprien de Masson d’Autume  and Igor Babuschkin  and Xinyun Chen  and Po-Sen Huang  and Johannes Welbl  and Sven Gowal  and Alexey Cherepanov  and James Molloy  and Daniel J. Mankowitz  and Esme Sutherland Robson  and Pushmeet Kohli  and Nando de Freitas  and Koray Kavukcuoglu  and Oriol Vinyals },\n  title = {Competition-level code generation with AlphaCode},\n  journal = {Science},\n  volume = {378},\n  number = {6624},\n  pages = {1092-1097},\n  year = {2022},\n  doi = {10.1126/science.abq1158},\n  URL = {https://www.science.org/doi/abs/10.1126/science.abq1158},\n  eprint = {https://www.science.org/doi/pdf/10.1126/science.abq1158},\n  abstract = {Programming is a powerful and ubiquitous problem-solving tool. Systems that can assist programmers or even generate programs themselves could make programming more productive and accessible. Recent transformer-based neural network models show impressive code generation abilities yet still perform poorly on more complex tasks requiring problem-solving skills, such as competitive programming problems. Here, we introduce AlphaCode, a system for code generation that achieved an average ranking in the top 54.3\\% in simulated evaluations on recent programming competitions on the Codeforces platform. AlphaCode solves problems by generating millions of diverse programs using specially trained transformer-based networks and then filtering and clustering those programs to a maximum of just 10 submissions. This result marks the first time an artificial intelligence system has performed competitively in programming competitions. Computer programming competitions are popular tests among programmers that require critical thinking informed by experience and creating solutions to unforeseen problems, both of which are key aspects of human intelligence but challenging to mimic by machine learning models. Using self-supervised learning and an encoder-decoder transformer architecture, Li et al. developed AlphaCode, a deep-learning model that can achieve approximately human-level performance on the Codeforces platform, which regularly hosts these competitions and attracts numerous participants worldwide (see the Perspective by Kolter). The development of such coding platforms could have a huge impact on programmers’ productivity. It may even change the culture of programming by shifting human work to formulating problems, with machine learning being the main one responsible for generating and executing codes. —YS Modern machine learning systems can achieve average human-level performance in popular competitive programming contests.}}\n```\n\n## License\n\nThe code is licensed under the\n[Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0).\n\nAll non-code materials provided are made available under the terms of the CC BY\n4.0 license\n([Creative Commons Attribution 4.0 International license](https://creativecommons.org/licenses/by/4.0/legalcode)).\n\nWe gratefully acknowledge the contributions of the following:\n\n*   Codeforces materials are sourced from http://codeforces.com.\n*   Description2Code materials are sourced from:\n    [Description2Code Dataset](https://github.com/ethancaballero/description2code),\n    licensed under the\n    [MIT open source license](https://opensource.org/licenses/MIT), copyright\n    not specified.\n*   CodeNet materials are sourced from:\n    [Project_CodeNet](https://github.com/IBM/Project_CodeNet), licensed under\n    [Apache 2.0](https://www.apache.org/licenses/LICENSE-2.0), copyright not\n    specified.\n\nUse of the third-party software, libraries code or data may be governed by\nseparate terms and conditions or license provisions. Your use of the third-party\nsoftware, libraries or code may be subject to any such terms. We make no\nrepresentations here with respect to rights or abilities to use any such\nmaterials.\n\n## Disclaimer\n\nThis is not an official Google product.\n"
        },
        {
          "name": "WORKSPACE",
          "type": "blob",
          "size": 4.7373046875,
          "content": "load(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\nload(\"@bazel_tools//tools/build_defs/repo:git.bzl\", \"git_repository\")\n\ngit_repository(\n    name = \"com_github_grpc_grpc\",\n    remote = \"https://github.com/grpc/grpc.git\",\n    # Using Python 3.10 and a version previous to dbe73c9004e483d24168c220cd589fe1824e72bc fails with \"Python Configuration Error: Problem getting python include path for /usr/bin/python3\"\n    commit = \"aea02409bb9a60f838e09f422ea04ec36c58c04a\",\n)\n\nload(\"@com_github_grpc_grpc//bazel:grpc_deps.bzl\", \"grpc_deps\")\n\ngrpc_deps()\n\ngit_repository(\n    name = \"rules_python\",\n    remote = \"https://github.com/bazelbuild/rules_python.git\",\n    tag = \"0.5.0\",\n)\n\n# proto_library rules implicitly depend on @com_google_protobuf//:protoc,\n# which is the proto-compiler.\ngit_repository(\n    name = \"com_google_protobuf\",\n    remote = \"https://github.com/protocolbuffers/protobuf.git\",\n    tag = \"v3.19.3\",\n)\n\ngit_repository(\n    name = \"com_google_absl\",\n    remote = \"https://github.com/abseil/abseil-cpp.git\",\n    tag = \"20211102.0\",\n)\n\ngit_repository(\n    name = \"com_google_googletest\",\n    remote = \"https://github.com/google/googletest.git\",\n    tag = \"release-1.10.0\",\n)\n\nhttp_archive(\n    name = \"com_google_riegeli\",\n    sha256 = \"059af80271b6e62df2662fbf0d1d2724a8eaf881d16459d59d4025132126672c\",\n    strip_prefix = \"riegeli-75aa942e1ddb5830eadac06339cfd4eb740da6f6\",\n    url = \"https://github.com/google/riegeli/archive/75aa942e1ddb5830eadac06339cfd4eb740da6f6.tar.gz\",  # 2022-02-17\n)\n\nhttp_archive(\n    name = \"org_brotli\",\n    sha256 = \"fec5a1d26f3dd102c542548aaa704f655fecec3622a24ec6e97768dcb3c235ff\",\n    strip_prefix = \"brotli-68f1b90ad0d204907beb58304d0bd06391001a4d\",\n    urls = [\"https://github.com/google/brotli/archive/68f1b90ad0d204907beb58304d0bd06391001a4d.zip\"],  # 2021-08-18\n)\n\nhttp_archive(\n    name = \"net_zstd\",\n    build_file = \"//third_party:net_zstd.BUILD.bazel\",\n    sha256 = \"b6c537b53356a3af3ca3e621457751fa9a6ba96daf3aebb3526ae0f610863532\",\n    strip_prefix = \"zstd-1.4.5/lib\",\n    urls = [\"https://github.com/facebook/zstd/archive/v1.4.5.zip\"],  # 2020-05-22\n)\n\nhttp_archive(\n    name = \"snappy\",\n    build_file = \"//third_party:snappy.BUILD.bazel\",\n    sha256 = \"38b4aabf88eb480131ed45bfb89c19ca3e2a62daeb081bdf001cfb17ec4cd303\",\n    strip_prefix = \"snappy-1.1.8\",\n    urls = [\"https://github.com/google/snappy/archive/1.1.8.zip\"],  # 2020-01-14\n)\n\nhttp_archive(\n    name = \"crc32c\",\n    build_file = \"//third_party:crc32.BUILD.bazel\",\n    sha256 = \"338f1d9d95753dc3cdd882dfb6e176bbb4b18353c29c411ebcb7b890f361722e\",\n    strip_prefix = \"crc32c-1.1.0\",\n    urls = [\"https://github.com/google/crc32c/archive/1.1.0.zip\"],  # 2019-05-24\n)\n\nhttp_archive(\n    name = \"zlib\",\n    build_file = \"//third_party:zlib.BUILD.bazel\",\n    sha256 = \"c3e5e9fdd5004dcb542feda5ee4f0ff0744628baf8ed2dd5d66f8ca1197cb1a1\",\n    strip_prefix = \"zlib-1.2.11\",\n    urls = [\"http://zlib.net/fossils/zlib-1.2.11.tar.gz\"],  # 2017-01-15\n)\n\nhttp_archive(\n    name = \"highwayhash\",\n    build_file = \"//third_party:highwayhash.BUILD.bazel\",\n    sha256 = \"cf891e024699c82aabce528a024adbe16e529f2b4e57f954455e0bf53efae585\",\n    strip_prefix = \"highwayhash-276dd7b4b6d330e4734b756e97ccfb1b69cc2e12\",\n    urls = [\"https://github.com/google/highwayhash/archive/276dd7b4b6d330e4734b756e97ccfb1b69cc2e12.zip\"],  # 2019-02-22\n)\n\nhttp_archive(\n    name = \"com_google_farmhash\",\n    build_file = \"//third_party:farmhash.BUILD\",\n    sha256 = \"6560547c63e4af82b0f202cb710ceabb3f21347a4b996db565a411da5b17aba0\",\n    strip_prefix = \"farmhash-816a4ae622e964763ca0862d9dbd19324a1eaf45\",\n    urls = [\n        \"https://github.com/google/farmhash/archive/816a4ae622e964763ca0862d9dbd19324a1eaf45.tar.gz\",\n    ],\n)\n\nload(\"@bazel_tools//tools/build_defs/repo:utils.bzl\", \"maybe\")\n\n# Include the Sandboxed API dependency if it does not already exist in this\n# project. This ensures that this workspace plays well with other external\n# dependencies that might use Sandboxed API.\nmaybe(\n    git_repository,\n    name = \"com_google_sandboxed_api\",\n    # This example depends on the latest master. In an embedding project, it\n    # is advisable to pin Sandboxed API to a specific revision instead.\n    commit = \"10c04ed42f51dee1fa5f145e86ca3658a3876cfa\",  # 2022-02-17\n    # branch = \"main\",\n    remote = \"https://github.com/google/sandboxed-api.git\",\n)\n\n# From here on, Sandboxed API files are available. The statements below setup\n# transitive dependencies such as Abseil. Like above, those will only be\n# included if they don't already exist in the project.\nload(\n    \"@com_google_sandboxed_api//sandboxed_api/bazel:sapi_deps.bzl\",\n    \"sapi_deps\",\n)\n\nsapi_deps()\n\n# Need to separately setup Protobuf dependencies in order for the build rules\n# to work.\nload(\"@com_google_protobuf//:protobuf_deps.bzl\", \"protobuf_deps\")\n\nprotobuf_deps()\n"
        },
        {
          "name": "contest_problem.proto",
          "type": "blob",
          "size": 4.1103515625,
          "content": "// Copyright 2022 DeepMind Technologies Limited\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nsyntax = \"proto2\";\n\npackage deepmind.code_contests;\n\nimport \"google/protobuf/duration.proto\";\n\nmessage ContestProblem {\n  reserved 3, 9, 11, 16, 17, 22, 23, 24, 25, 26, 27, 28;\n  // The name of the contest. Note that names could agree between different\n  // sources.\n  optional string name = 1;\n\n  // A natural language description of a programming problem.\n  optional string description = 2;\n\n  // A paired input and output that can be used to test potential solutions.\n  message Test {\n    reserved 3, 4;\n    optional string input = 1;\n    optional string output = 2;\n  }\n\n  // Public tests are those that are available before submitting a solution,\n  // typically as part of the description itself. They are therefore acceptable\n  // inputs to a model.\n  repeated Test public_tests = 4;\n\n  // Private tests are not visible before submitting a solution, so should not\n  // be made available as inputs to a model.\n  repeated Test private_tests = 5;\n\n  // Generated tests are automatically generated by modifying inputs from public\n  // and private tests and validating using known correct solutions.\n  repeated Test generated_tests = 18;\n\n  enum Source {\n    reserved 5, 8, 9, 10, 11;\n    UNKNOWN_SOURCE = 0;\n    CODECHEF = 1;\n    CODEFORCES = 2;\n    HACKEREARTH = 3;\n    CODEJAM = 4;\n    ATCODER = 6;\n    AIZU = 7;\n  }\n  // The original source of the problem.\n  optional Source source = 6;\n\n  // A representation of the difficulty of the problem. Note that different\n  // sources use different, non-comparable gradings. For Codeforces problems,\n  // cf_rating is a more reliable measure of difficulty when available.\n  enum Difficulty {\n    UNKNOWN_DIFFICULTY = 0;\n    EASY = 1;\n    MEDIUM = 2;\n    HARD = 3;\n    HARDER = 4;\n    HARDEST = 5;\n    EXTERNAL = 6;\n    A = 7;\n    B = 8;\n    C = 9;\n    D = 10;\n    E = 11;\n    F = 12;\n    G = 13;\n    H = 14;\n    I = 15;\n    J = 16;\n    K = 17;\n    L = 19;\n    M = 20;\n    N = 21;\n    O = 22;\n    P = 23;\n    Q = 24;\n    R = 25;\n    S = 26;\n    T = 27;\n    U = 28;\n    V = 29;\n  }\n  optional Difficulty difficulty = 7;\n\n  message Solution {\n    reserved 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14;\n    enum Language {\n      reserved 5, 6, 7, 8, 9, 10, 11, 12, 13;\n      UNKNOWN_LANGUAGE = 0;\n      PYTHON = 1;  // Python2\n      CPP = 2;\n      PYTHON3 = 3;\n      JAVA = 4;\n    }\n    optional Language language = 1;\n    optional string solution = 2;\n  }\n  // Correct solutions to the problem. Contrast with incorrect_solutions below.\n  repeated Solution solutions = 8;\n\n  // Incorrect solutions.\n  repeated Solution incorrect_solutions = 19;\n\n  // Extra meta-data for codeforces problems. Note that Contest ID is not\n  // monotonic with respect to time.\n  optional int32 cf_contest_id = 10;\n  optional string cf_index = 12;  // Problem index, e.g. \"A\" or \"B\" or \"C\", ...\n  optional float cf_points = 13;  // Points for the problem, e.g. 1000.0\n  optional int32 cf_rating = 14;  // Problem rating (difficulty), e.g. 1100\n  repeated string cf_tags = 15;   // Problem tags, e.g. ['greedy', 'math']\n\n  // Whether the problem was translated to English.\n  optional bool is_description_translated = 20;\n  // The untranslated description is only available for translated problems.\n  optional string untranslated_description = 21;\n\n  // Resource constraints to use when executing solutions.\n  optional google.protobuf.Duration time_limit = 29;\n  optional int64 memory_limit_bytes = 30;\n\n  // Most problems use stdin and stdout for IO. Some problems expect specific\n  // files to be used instead.\n  optional string input_file = 31;\n  optional string output_file = 32;\n}\n"
        },
        {
          "name": "execution",
          "type": "tree",
          "content": null
        },
        {
          "name": "load_data_test.cc",
          "type": "blob",
          "size": 1.96484375,
          "content": "// Copyright 2022 DeepMind Technologies Limited\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#include <string>\n\n#include \"google/protobuf/text_format.h\"\n#include \"gmock/gmock.h\"\n#include \"gtest/gtest.h\"\n#include \"absl/strings/string_view.h\"\n#include \"contest_problem.pb.h\"\n\nconstexpr absl::string_view kTextProtoExample = R\"pb(\n  name: \"123_X. Adding integers\"\n  description: \"Add integers together to get a sum.\\n\\n\"\n               \"Input:\\n\\nThe input consists of two integers, n and m, \"\n               \"each between 1 and 100000.\\n\\n\"\n               \"Output:\\n\\nA single integer, the sum of n and m.\"\n  public_tests: { input: \"1 2\\n\" output: \"3\" }\n  public_tests: { input: \"3 4\\n\" output: \"7\" }\n  private_tests: { input: \"5 6\\n\" output: \"11\" }\n  private_tests: { input: \"7 8\\n\" output: \"15\" }\n  generated_tests: { input: \"9 10\\n\" output: \"19\" }\n  source: CODEFORCES\n  solutions: {\n    language: PYTHON3\n    solution: \"print(int(input()) + int(input()))\\n\"\n  }\n  cf_contest_id: 123\n  cf_index: \"X\"\n  cf_points: 1000.0\n  cf_rating: 1100\n  cf_tags: \"math\"\n  incorrect_solutions: {\n    language: PYTHON3\n    solution: \"print(int(input()) - int(input()))\\n\"\n  }\n  is_description_translated: true\n  untranslated_description: \"Bonjour\"\n)pb\";\n\nnamespace {\n\nusing ::deepmind::code_contests::ContestProblem;\n\nTEST(LoadDataTest, CanParseExample) {\n  ContestProblem problem;\n  EXPECT_TRUE(google::protobuf::TextFormat::ParseFromString(\n      std::string(kTextProtoExample), &problem));\n}\n\n}  // namespace\n"
        },
        {
          "name": "print_names.cc",
          "type": "blob",
          "size": 1.6904296875,
          "content": "// Copyright 2022 DeepMind Technologies Limited\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// A simple utility that prints the names of the problems in a dataset. If\n// provided multiple filenames as arguments, these are read sequentially.\n//\n// Example usage:\n//\n//   print_names /path/to/dataset/code_contests_train*\n\n#include <iostream>\n#include <tuple>\n#include <vector>\n\n#include \"absl/strings/string_view.h\"\n#include \"absl/types/span.h\"\n#include \"contest_problem.pb.h\"\n#include \"riegeli/bytes/fd_reader.h\"\n#include \"riegeli/records/record_reader.h\"\n\nnamespace {\n\nusing ::deepmind::code_contests::ContestProblem;\n\nvoid PrintNames(const absl::Span<const absl::string_view> filenames) {\n  for (const absl::string_view filename : filenames) {\n    riegeli::RecordReader<riegeli::FdReader<>> reader(\n        std::forward_as_tuple(filename));\n    ContestProblem problem;\n    while (reader.ReadRecord(problem)) {\n      std::cout << problem.name() << '\\n';\n    }\n    reader.Close();\n  }\n}\n\n}  // namespace\n\nint main(int argc, char* argv[]) {\n  std::vector<absl::string_view> filenames;\n  filenames.reserve(argc - 1);\n  for (int i = 1; i < argc; ++i) {\n    filenames.push_back(argv[i]);\n  }\n  PrintNames(filenames);\n}\n"
        },
        {
          "name": "print_names_and_sources.py",
          "type": "blob",
          "size": 1.4091796875,
          "content": "# Copyright 2022 DeepMind Technologies Limited\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"A simple tool to iterate through the dataset, printing the name and source.\n\nExample usage:\n\n  print_names_and_sources /path/to/dataset/code_contests_train*\n\"\"\"\n\nimport io\nimport sys\n\nimport riegeli\n\nimport contest_problem_pb2\n\n\ndef _all_problems(filenames):\n  \"\"\"Iterates through all ContestProblems in filenames.\"\"\"\n  for filename in filenames:\n    reader = riegeli.RecordReader(io.FileIO(filename, mode='rb'),)\n    for problem in reader.read_messages(contest_problem_pb2.ContestProblem):\n      yield problem\n\n\ndef _print_names_and_sources(filenames):\n  \"\"\"Prints the names and sources of all ContestProblems in filenames.\"\"\"\n  for problem in _all_problems(filenames):\n    print(\n        contest_problem_pb2.ContestProblem.Source.Name(problem.source),\n        problem.name)\n\n\nif __name__ == '__main__':\n  _print_names_and_sources(sys.argv[1:])\n"
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}