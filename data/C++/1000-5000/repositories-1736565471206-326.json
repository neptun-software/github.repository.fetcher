{
  "metadata": {
    "timestamp": 1736565471206,
    "page": 326,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "davidrmiller/biosim4",
      "stars": 3217,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0224609375,
          "content": "obj/\ntools/*.svg\nbuild/"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 0.6708984375,
          "content": "cmake_minimum_required(VERSION 3.0.0)\nproject(BioSim4 VERSION 0.2.0)\n\ninclude(CTest)\nenable_testing()\n\nadd_subdirectory(src)\n\n\ninstall(FILES ./biosim4.ini DESTINATION ./)\ninstall(DIRECTORY ./tools/ DESTINATION tools)\ninstall (DIRECTORY DESTINATION \"logs\" DIRECTORY_PERMISSIONS \n    OWNER_WRITE OWNER_READ OWNER_EXECUTE\n    GROUP_READ GROUP_READ GROUP_EXECUTE\n    GROUP_READ WORLD_READ WORLD_EXECUTE)\ninstall (DIRECTORY DESTINATION \"images\" DIRECTORY_PERMISSIONS \n    OWNER_WRITE OWNER_READ OWNER_EXECUTE\n    GROUP_READ GROUP_READ GROUP_EXECUTE\n    GROUP_READ WORLD_READ WORLD_EXECUTE)\n\nset(CPACK_PROJECT_NAME ${PROJECT_NAME})\nset(CPACK_PROJECT_VERSION ${PROJECT_VERSION})\ninclude(CPack)\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.5576171875,
          "content": "FROM docker.io/ubuntu:latest\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update && apt-get install -yqq \\\n\tbuild-essential \\\n\tdumb-init \\\n\tpython3-pip \\\n\t&& apt-get clean \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nRUN apt-get update && apt-get install -yqq python3-igraph\n\nRUN apt-get update && apt-get install -yqq \\\n\tcimg-dev \\\n\tgnuplot \\\n\tlibopencv-dev \\\n\tcmake \\\n\t&& apt-get clean \\\n\t&& rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\nRUN useradd -ms /bin/bash darwin\nUSER darwin\n\n# Runs \"/usr/bin/dumb-init -- /my/script --with --args\"\nENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.19140625,
          "content": "MIT License\n\nCopyright (c) 2021-2022 David R. Miller and other contributors. For the\nexact contribution history, see the revision logs at the project page\nhttps://github.com/davidrmiller/biosim4.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.451171875,
          "content": "ifneq ($(BUILD),debug)\n    BUILD = release\nendif\n\nCXX = c++\nLD = c++\n\nCXXFLAGS += \\\n  -Wall \\\n  -pedantic \\\n  -std=c++17 \\\n  -fexceptions \\\n  -fopenmp \\\n  $(shell pkg-config --cflags opencv4)\n\nLDFLAGS += \\\n  -lopencv_core \\\n  -lopencv_video \\\n  -lopencv_videoio \\\n  -lgomp \\\n  -lpthread \\\n  -fopenmp\n\nifeq ($(BUILD),debug)\n  OUT_DIR = bin/Debug/\n  OBJ_DIR = obj/Debug/src\n  CXXFLAGS += -g\nelse\n  OUT_DIR = bin/Release/\n  OBJ_DIR = obj/Release/src\n  CXXFLAGS += -O3\n  LDFLAGS += -O3 -s\nendif\n\nSOURCE :=  $(wildcard src/*.cpp src/*.h)\nCXXSOURCE :=  $(filter %.cpp, $(SOURCE))\nHEADERS :=  $(filter %.h, $(SOURCE))\nOBJS := $(subst src/,$(OBJ_DIR)/, $(CXXSOURCE:.cpp=.o))\n\n\nall: debug release\n\n\nbefore_debug:\n\ttest -d bin/Debug || mkdir -p bin/Debug\n\ttest -d obj/Debug/src || mkdir -p obj/Debug/src\n\nbefore_release:\n\ttest -d bin/Release || mkdir -p bin/Release\n\ttest -d obj/Release/src || mkdir -p obj/Release/src\n\n.PHONY : release debug    \ndebug: before_debug\n\t@$(MAKE) --no-print-directory bin/Debug/biosim4 BUILD=$@\n\nrelease: before_release\n\t@$(MAKE) --no-print-directory bin/Release/biosim4 BUILD=$@\n\n\n$(OUT_DIR)biosim4: $(OBJS)\n\t$(LD) -o $@ $^ $(LDFLAGS)\n\n$(OBJS): $(HEADERS)\n\n$(OBJ_DIR)%.o : src%.cpp\n\t$(CXX) $(CXXFLAGS) -c $< -o $@\n\n\nclean: clean_debug clean_release\n\nclean_debug:\n\t$(RM) -f obj/Debug/src/*\n\t$(RM) -f bin/Debug/biosim4\n\nclean_release:\n\t$(RM) -f obj/Release/src/*\n\t$(RM) -f bin/Release/biosim4\n\ndistclean: clean\n\t$(RM) -f logs/* images/*\n\n.PHONY: all clean distclean\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 20.3232421875,
          "content": "# biosim4\n\n## Status\n\nThis project is transitioning to maintenance-only. Thanks to all who contributed \nimprovements to this project. We will continue to welcome bug fixes that enable this\nprogram to compile and execute, and we welcome discussions about this program\nand related topics in the Issues section.\n\n## What is this?\n\nThis pile of code was used to simulate biological creatures that evolve through natural selection.\nThe results of the experiments are summarized in this YouTube video:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"I programmed some creatures. They evolved.\"\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;https://www.youtube.com/watch?v=N3tRFayqVtk\n\nThis command line program lacks a friendly interface, so compiling and executing the program may\nrequire attention to details. If you ask questions in the Issues,\nI'll try to help if I can. For a nicer user interface, check out the\n[fork of this project](https://github.com/ilyabrilev/biosim4) hosted by @ilyabrilev.\n\nDocument Contents\n-----------------\n\n* [Code walkthrough](#CodeWalkthrough)\n* [Main data structures](#MainDataStructures)\n* [Config file](#ConfigFile)\n* [Program output](#ProgramOutput)\n* [Main program loop](#MainProgramLoop)\n* [Sensory inputs and action outputs](#SensoryInputsAndActionOutputs)\n* [Basic value types](#BasicValueTypes)\n* [Pheromones](#Pheromones)\n* [Useful utility functions](#UsefulUtilityFunctions)\n* [Installing the code](#InstallingTheCode)\n* [Building the executable](#BuildingTheExecutable)\n* [System requirements](#SystemRequirements)\n* [Compiling](#Compiling)\n* [Bugs](#Bugs)\n* [Execution](#Execution)\n* [Tools directory](#ToolsDirectory)\n* [Build log](#BuildLog)\n\n\nCode walkthrough<a name=\"CodeWalkthrough\"></a>\n--------------------\n\n<a name=\"MainDataStructures\"></a>\n### Main data structures\n\nThe code in the src directory compiles to a single console program named biosim4. When it is\ninvoked, it will read parameters from a config file named biosim4.ini by default. A different\nconfig file can be specified on the command line.\n\nThe simulator will then configure a 2D arena where the creatures live. Class Grid (see grid.h and grid.cpp)\ncontains a 2D array of 16-bit indexes, where each nonzero index refers to a specific individual in class Peeps (see below).\nZero values in Grid indicate empty locations. Class Grid does not know anything else about the world; it only\nstores indexes to represent who lives where.\n\nThe population of creatures is stored in class Peeps (see peeps.h and peeps.cpp). Class Peeps contains\nall the individuals in the simulation, stored as instances of struct Indiv in a std::vector container.\nThe indexes in class Grid are indexes into the vector of individuals in class Peeps. Class Peeps keeps a\ncontainer of struct Indiv, but otherwise does not know anything about the internal workings of individuals.\n\nEach individual is represented by an instance of struct Indiv (see indiv.h and indiv.cpp). Struct Indiv\ncontains an individual's genome, its corresponding neural net brain, and a redundant copy of the individual's\nX,Y location in the 2D grid. It also contains a few other parameters for the individual, such as its\n\"responsiveness\" level, oscillator period, age, and other personal parameters. Struct Indiv knows how\nto convert an individual's genome into its neural net brain at the beginning of the simulation.\nIt also knows how to print the genome and neural net brain in text format to stdout during a simulation.\nIt also has a function Indiv::getSensor() that is called to compute the individual's input neurons for\neach simulator step.\n\nAll the simulator code lives in the BS namespace (short for \"biosim\".)\n\n<a name=\"ConfigFile\"></a>\n### Config file\n\nThe config file, named biosim4.ini by default, contains all the tunable parameters for a\nsimulation run. The biosim4 executable reads the config file at startup, then monitors it for\nchanges during the simulation. Although it's not foolproof, many parameters can be modified during\nthe simulation run. Class ParamManager (see params.h and params.cpp) manages the configuration\nparameters and makes them available to the simulator through a read-only pointer provided by\nParamManager::getParamRef().\n\nSee the provided biosim4.ini for documentation for each parameter. Most of the parameters\nin the config file correspond to members in struct Params (see params.h). A few additional\nparameters may be stored in struct Params. See the documentation in params.h for how to\nsupport new parameters.\n\n\n<a name=\"ProgramOutput\"></a>\n### Program output\n\nDepending on the parameters in the config file, the following data can be produced:\n\n* The simulator will append one line to logs/epoch.txt after the completion of\neach generation. Each line records the generation number, number of individuals\nwho survived the selection criterion, an estimate of the population's genetic\ndiversity, average genome length, and number of deaths due to the \"kill\" gene.\nThis file can be fed to tools/graphlog.gp to produce a graphic plot.\n\n* The simulator will display a small number of sample genomes at regular\nintervals to stdout. Parameters in the config file specify the number and interval.\nThe genomes are displayed in hex format and also in a mnemonic format that can\nbe fed to tools/graph-nnet.py to produce a graphic network diagram.\n\n* Movies of selected generations will be created in the images/ directory. Parameters\nin the config file specify the interval at which to make movies. Each movie records\na single generation.\n\n* At intervals, a summary is printed to stdout showing the total number of neural\nconnections throughout the population from each possible sensory input neuron and to each\npossible action output neuron.\n\n<a name=\"MainProgramLoop\"></a>\n### Main program loop\n\nThe simulator starts with a call to simulator() in simulator.cpp. After initializing the\nworld, the simulator executes three nested loops: the outer loop for each generation,\nan inner loop for each simulator step within the generation, and an innermost loop for\neach individual in the population. The innermost loop is thread-safe so that it can\nbe parallelized by OpenMP.\n\nAt the end of each simulator step, a call is made to endOfSimStep() in single-thread\nmode (see endOfSimStep.cpp) to create a video frame representing the locations of all\nthe individuals at the end of the simulator step. The video frame is pushed on to a\nstack to be converted to a movie later. Also some housekeeping may be done for certain\nselection scenarios.  See the comments in endOfSimStep.cpp for more information.\n\nAt the end of each generation, a call is made to endOfGeneration() in single-thread\nmode (see endOfGeneration.cpp) to create a video from the saved video frames.\nAlso a new graph might be generated showing the progress of the simulation. See\nendOfGeneraton.cpp for more information.\n\n<a name=\"SensoryInputsAndActionOutputs\"></a>\n### Sensory inputs and action outputs\n\nSee the YouTube video (link above) for a description of the sensory inputs and action\noutputs. Each sensory input and each action output is a neuron in the individual's\nneural net brain.\n\nThe header file sensors-actions.h contains enum Sensor which enumerates all the possible sensory\ninputs and enum Action which enumerates all the possible action outputs.\nIn enum Sensor, all the sensory inputs before the enumerant NUM_SENSES will\nbe compiled into the executable, and all action outputs before NUM_ACTIONS\nwill be compiled. By rearranging the enumerants in those enums, you can select\na subset of all possible sensory and action neurons to be compiled into the\nsimulator.\n\n<a name=\"BasicValueTypes\"></a>\n### Basic value types\n\nThere are a few basic value types:\n\n* enum Compass represents eight-way directions with enumerants N=0, NE, E, SW, S, SW, W, NW, CENTER.\n\n* struct Dir is an abstract representation of the values of enum Compass.\n\n* struct Coord is a signed 16-bit integer X,Y coordinate pair. It is used to represent a location\nin the 2D world, or can represent the difference between two locations.\n\n* struct Polar holds a signed 32-bit integer magnitude and a direction of type Dir.\n\nVarious conversions and math are possible between these basic types. See unitTestBasicTypes.cpp\nfor examples. Also see basicTypes.h for more information.\n\n<a name=\"Pheromones\"></a>\n### Pheromones\n\nA simple system is used to simulate pheromones emitted by the individuals. Pheromones\nare called \"signals\" in simulator-speak (see signals.h and signals.cpp). Struct Signals\nholds a single layer that overlays the 2D world in class Grid. Each location can contain\na level of pheromone (there's only a single kind of pheromone supported at present). The\npheromone level at any grid location is stored as an unsigned 8-bit integer, where zero means no\npheromone, and 255 is the maximum. Each time an individual emits a pheromone, it increases\nthe pheromone values in a small neighborhood around the individual up to the maximum\nvalue of 255. Pheromone levels decay over time if they are not replenished\nby the individuals in the area.\n\n<a name=\"UsefulUtilityFunctions\"></a>\n### Useful utility functions\n\nThe utility function visitNeighborhood() in grid.cpp can be used to execute a\nuser-defined lambda or function over each location\nwithin a circular neighborhood defined by a center point and floating point radius. The function\ncalls the user-defined function once for each location, passing it a Coord value. Only locations\nwithin the bounds of the grid are visited. The center location is included among the visited\nlocations. For example, a radius of 1.0 includes only the center location plus four neighboring locations.\nA radius of 1.5 includes the center plus all the eight-way neighbors. The radius can be arbitrarily large\nbut large radii require lots of CPU cycles.\n\n\n\n<a name=\"InstallingTheCode\"></a>\n## Installing the code\n--------------------\n\nCopy the directory structure to a location of your choice.\n\n<a name=\"BuildingTheExecutable\"></a>\n## Building the executable\n--------------------\n\n<a name=\"SystemRequirements\"></a>\n### System requirements\n\nThis code is known to run in the following environment:\n\n* Ubuntu 21.04, 22.04, or Debian 10 (Buster)\n* cimg-dev 2.4.5 or later\n* libopencv-dev 3.2 or later\n* gcc 8.3, 9.3 or 10.3\n* python-igraph 0.8.3 (used only by tools/graph-nnet.py)\n* gnuplot 5.2.8 (used only by tools/graphlog.gp)\n\nThe code also runs in distributions based on Ubuntu 20.04, but only if the default version of\ncimg-dev is replaced with version 2.8.4 or later.\n\n<a name=\"Compiling\"></a>\n### Compiling\n\nYou have several options:\n\n#### Code::Blocks project file\n\nThe file named \"biosim4.cbp\" is a configuration file for the Code::Blocks IDE version 20.03.\n\n#### Makefile\n\nA Makefile is provided which was created from biosim4.cbp with cbp2make. Possible make commands include:\n\n* \"make\" with no arguments makes release and debug versions in ./bin/Release and ./bin/Debug\n* \"make release\" makes a release version in ./bin/Release\n* \"make debug\" makes a debug version in ./bin/Debug\n* \"make clean\" removes the intermediate build files\n\n#### Docker\n\nA Dockerfile is provided which leverages the aforementioned Makefile.\n\nTo build a Docker environment in which you can compile the program:\n\n```sh\ndocker build -t biosim4 .\n```\n\nYou can then compile the program with an ephemeral container. Note that `pwd` stands for the fullpath of your `biosim4` project, something like `C:/full-path-in-windows/to-your/biosim4-folder/biosim4` in Windows, or `/home/user/project-path/biosim4/` in Linux/MacOS:\n\n```sh\ndocker run --rm -ti -v `pwd`:/app --name biosim biosim4 make\n```\nWhen you exit the container, the files compiled in your container files will persist in `./bin`.\n\n#### CMake\n\nA `CMakeList.txt` file is provided to allow development, build, test, installation and packaging with the CMake tool chain and all IDEs that support CMake. \n\nTo build with cmake you need to install cmake. \n\nIf you're using docker, `cmake` is already installed in the image. You can directly open its terminal to use it:\n```sh\ndocker run --rm -ti -v `pwd`:/app --name biosim biosim4 bash\n```\n\nOnce cmake is installed, use the procedure below:\n```sh\nmkdir build\ncd build\ncmake ../\ncmake --build ./\n```\n\nTo make a test installation and run the program:\n\n```sh\nmkdir build\ncd build\ncmake ../\ncmake --build ./\nmkdir test_install\ncmake --install ./ --prefix ./test_install\ncd test_install\n./bin/biosim4\n```\n\nTo make a release package:\n\n```sh\nmkdir build\ncd build\ncmake ../\ncmake --build ./\ncpack ./\n```\n\n<a name=\"Bugs\"></a>\n## Bugs\n--------------------\n\nIf you try to compile the simulator under a distribution based on Ubuntu 20.04, you will encounter this\nbug in the version of CImg.h (package cimg-dev) provided by the package maintainer:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=951965\n\nIn biosim4, CImg.h is used only as a convenient interface to OpenCV\nto generate movies of the simulated creatures in their 2D world. You have several\nchoices if you want to proceed with Ubuntu 20.04:\n\n* You can strip out the code that generates the movies and just run the simulator without the movies. Most of\nthat graphics code is in imageWriter.cpp and imageWriter.h.\n\n* You can upgrade your CImg.h to version 2.8.4 or later by installing the [Ubuntu 22.04 cimg-dev package](https://packages.ubuntu.com/jammy/cimg-dev), For example:\n```\ncd /tmp && \\\nwget http://mirrors.kernel.org/ubuntu/pool/universe/c/cimg/cimg-dev_2.9.4+dfsg-3_all.deb -O cimg-dev_2.9.4+dfsg-3_all.deb && \\\nsudo apt install ./cimg-dev_2.9.4+dfsg-3_all.deb && \\\nrm cimg-dev_2.9.4+dfsg-3_all.deb;\n```\n\n* You could convert the CImg.h function calls to use OpenCV directly. Sorry I don't have a guide for how\nto do that.\n\n<a name=\"Execution\"></a>\n## Execution\n--------------------\n\nTest everything is working by executing the Debug or Release executable in the bin directory with the default config file (\"biosim4.ini\"). e.g.:\n```\n./bin/Release/biosim4 biosim4.ini\n```\n\nYou should have output something like:\n`Gen 1, 2290 survivors`\n\nIf this works then edit the config file (\"biosim4.ini\") for the parameters you want for the simulation run and execute the Debug or Release executable. Optionally specify the name of the config file as the first command line argument, e.g.:\n\n```\n./bin/Release/biosim4 [biosim4.ini]\n```\n\nNote: If using docker,\n```sh\ndocker run --rm -ti -v `pwd`:/app --name biosim biosim4 bash\n```\nwill put you into\nan environment where you can run the above and have all your files persist when you exit (using `Ctrl-D`).\n\n\n<a name=\"ToolsDirectory\"></a>\n## Tools directory\n--------------------\n\ntools/graphlog.gp takes the generated log file logs/epoch-log.txt\nand generates a graphic plot of the simulation run in images/log.png. You may need to adjust\nthe directory paths in graphlog.gp for your environment. graphlog.gp can be invoked manually,\nor if the option \"updateGraphLog\" is set to true\nin the simulation config file, the simulator will try to invoke tools/graphlog.gp automatically\nduring the simulation run. Also see the parameter named updateGraphLogStride in the config file.\n\ntools/graph-nnet.py takes a text file (hardcoded name \"net.txt\") and generates a neural net\nconnection diagram using igraph. The file net.txt contains an encoded form of one genome, and\nmust be the same format as the files\ngenerated by displaySampleGenomes() in src/analysis.cpp which is called by simulator() in\nsrc/simulator.cpp. The genome output is printed to stdout automatically\nif the parameter named \"displaySampleGenomes\" is set to nonzero in the config file.\nAn individual genome can be copied from that output stream and renamed \"net.txt\" in order to run\ngraph-nnet.py.\n\n\nNote: If using the `docker run ... bash` command, the presumed directory structure would necessitate the\nfollowing syntax:\n\n```sh\ngnuplot tools/graphlog.gp\ncd tools && python3 graph-nnet.py\n```\n\n<a name=\"BuildLog\"></a>\n## Build log\n--------------------\n\nIn case it helps for debugging the build process, here is a build log from Code::Blocks running under Ubuntu 21.04:\n\n\n```\n-------------- Clean: Release in biosim4 (compiler: GNU GCC Compiler)---------------\n\nCleaned \"biosim4 - Release\"\n\n-------------- Build: Release in biosim4 (compiler: GNU GCC Compiler)---------------\n\ng++ -Wall -fexceptions -fopenmp -O3 -I/usr/include/opencv4 -c /home/dm/sw/biosim4-git/src/analysis.cpp -o obj/Release/src/analysis.o\ng++ -Wall -fexceptions -fopenmp -O3 -I/usr/include/opencv4 -c /home/dm/sw/biosim4-git/src/basicTypes.cpp -o obj/Release/src/basicTypes.o\ng++ -Wall -fexceptions -fopenmp -O3 -I/usr/include/opencv4 -c /home/dm/sw/biosim4-git/src/createBarrier.cpp -o obj/Release/src/createBarrier.o\ng++ -Wall -fexceptions -fopenmp -O3 -I/usr/include/opencv4 -c /home/dm/sw/biosim4-git/src/endOfGeneration.cpp -o obj/Release/src/endOfGeneration.o\ng++ -Wall -fexceptions -fopenmp -O3 -I/usr/include/opencv4 -c /home/dm/sw/biosim4-git/src/endOfSimStep.cpp -o obj/Release/src/endOfSimStep.o\ng++ -Wall -fexceptions -fopenmp -O3 -I/usr/include/opencv4 -c /home/dm/sw/biosim4-git/src/executeActions.cpp -o obj/Release/src/executeActions.o\ng++ -Wall -fexceptions -fopenmp -O3 -I/usr/include/opencv4 -c /home/dm/sw/biosim4-git/src/feedForward.cpp -o obj/Release/src/feedForward.o\ng++ -Wall -fexceptions -fopenmp -O3 -I/usr/include/opencv4 -c /home/dm/sw/biosim4-git/src/genome-compare.cpp -o obj/Release/src/genome-compare.o\ng++ -Wall -fexceptions -fopenmp -O3 -I/usr/include/opencv4 -c /home/dm/sw/biosim4-git/src/genome.cpp -o obj/Release/src/genome.o\ng++ -Wall -fexceptions -fopenmp -O3 -I/usr/include/opencv4 -c /home/dm/sw/biosim4-git/src/getSensor.cpp -o obj/Release/src/getSensor.o\ng++ -Wall -fexceptions -fopenmp -O3 -I/usr/include/opencv4 -c /home/dm/sw/biosim4-git/src/grid.cpp -o obj/Release/src/grid.o\ng++ -Wall -fexceptions -fopenmp -O3 -I/usr/include/opencv4 -c /home/dm/sw/biosim4-git/src/imageWriter.cpp -o obj/Release/src/imageWriter.o\ng++ -Wall -fexceptions -fopenmp -O3 -I/usr/include/opencv4 -c /home/dm/sw/biosim4-git/src/indiv.cpp -o obj/Release/src/indiv.o\ng++ -Wall -fexceptions -fopenmp -O3 -I/usr/include/opencv4 -c /home/dm/sw/biosim4-git/src/main.cpp -o obj/Release/src/main.o\ng++ -Wall -fexceptions -fopenmp -O3 -I/usr/include/opencv4 -c /home/dm/sw/biosim4-git/src/params.cpp -o obj/Release/src/params.o\ng++ -Wall -fexceptions -fopenmp -O3 -I/usr/include/opencv4 -c /home/dm/sw/biosim4-git/src/peeps.cpp -o obj/Release/src/peeps.o\ng++ -Wall -fexceptions -fopenmp -O3 -I/usr/include/opencv4 -c /home/dm/sw/biosim4-git/src/random.cpp -o obj/Release/src/random.o\ng++ -Wall -fexceptions -fopenmp -O3 -I/usr/include/opencv4 -c /home/dm/sw/biosim4-git/src/signals.cpp -o obj/Release/src/signals.o\ng++ -Wall -fexceptions -fopenmp -O3 -I/usr/include/opencv4 -c /home/dm/sw/biosim4-git/src/simulator.cpp -o obj/Release/src/simulator.o\ng++ -Wall -fexceptions -fopenmp -O3 -I/usr/include/opencv4 -c /home/dm/sw/biosim4-git/src/spawnNewGeneration.cpp -o obj/Release/src/spawnNewGeneration.o\ng++ -Wall -fexceptions -fopenmp -O3 -I/usr/include/opencv4 -c /home/dm/sw/biosim4-git/src/survival-criteria.cpp -o obj/Release/src/survival-criteria.o\ng++ -Wall -fexceptions -fopenmp -O3 -I/usr/include/opencv4 -c /home/dm/sw/biosim4-git/src/unitTestBasicTypes.cpp -o obj/Release/src/unitTestBasicTypes.o\ng++ -Wall -fexceptions -fopenmp -O3 -I/usr/include/opencv4 -c /home/dm/sw/biosim4-git/src/unitTestConnectNeuralNetWiringFromGenome.cpp -o obj/Release/src/unitTestConnectNeuralNetWiringFromGenome.o\ng++ -Wall -fexceptions -fopenmp -O3 -I/usr/include/opencv4 -c /home/dm/sw/biosim4-git/src/unitTestGridVisitNeighborhood.cpp -o obj/Release/src/unitTestGridVisitNeighborhood.o\ng++  -o bin/Release/biosim4 obj/Release/src/analysis.o obj/Release/src/basicTypes.o obj/Release/src/createBarrier.o obj/Release/src/endOfGeneration.o obj/Release/src/endOfSimStep.o obj/Release/src/executeActions.o obj/Release/src/feedForward.o obj/Release/src/genome-compare.o obj/Release/src/genome.o obj/Release/src/getSensor.o obj/Release/src/grid.o obj/Release/src/imageWriter.o obj/Release/src/indiv.o obj/Release/src/main.o obj/Release/src/params.o obj/Release/src/peeps.o obj/Release/src/random.o obj/Release/src/signals.o obj/Release/src/simulator.o obj/Release/src/spawnNewGeneration.o obj/Release/src/survival-criteria.o obj/Release/src/unitTestBasicTypes.o obj/Release/src/unitTestConnectNeuralNetWiringFromGenome.o obj/Release/src/unitTestGridVisitNeighborhood.o  -lX11 -lgomp -pthread -O3 -s  /usr/lib/x86_64-linux-gnu/libopencv_core.so /usr/lib/x86_64-linux-gnu/libopencv_video.so /usr/lib/x86_64-linux-gnu/libopencv_videoio.so\nOutput file is bin/Release/biosim4 with size 778.42 KB\nProcess terminated with status 0 (0 minute(s), 11 second(s))\n0 error(s), 0 warning(s) (0 minute(s), 11 second(s))\n```\n\n\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "biosim4.cbp",
          "type": "blob",
          "size": 2.7919921875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?>\n<CodeBlocks_project_file>\n\t<FileVersion major=\"1\" minor=\"6\" />\n\t<Project>\n\t\t<Option title=\"biosim4\" />\n\t\t<Option pch_mode=\"2\" />\n\t\t<Option compiler=\"gcc\" />\n\t\t<Build>\n\t\t\t<Target title=\"Debug\">\n\t\t\t\t<Option output=\"bin/Debug/biosim4\" prefix_auto=\"1\" extension_auto=\"1\" />\n\t\t\t\t<Option object_output=\"obj/Debug/\" />\n\t\t\t\t<Option type=\"1\" />\n\t\t\t\t<Option compiler=\"gcc\" />\n\t\t\t\t<Compiler>\n\t\t\t\t\t<Add option=\"-g\" />\n\t\t\t\t\t<Add option=\"-fopenmp\" />\n\t\t\t\t</Compiler>\n\t\t\t\t<Linker>\n\t\t\t\t\t<Add option=\"-fopenmp\" />\n\t\t\t\t</Linker>\n\t\t\t</Target>\n\t\t\t<Target title=\"Release\">\n\t\t\t\t<Option output=\"bin/Release/biosim4\" prefix_auto=\"1\" extension_auto=\"1\" />\n\t\t\t\t<Option object_output=\"obj/Release/\" />\n\t\t\t\t<Option type=\"1\" />\n\t\t\t\t<Option compiler=\"gcc\" />\n\t\t\t\t<Compiler>\n\t\t\t\t\t<Add option=\"-O3\" />\n\t\t\t\t</Compiler>\n\t\t\t\t<Linker>\n\t\t\t\t\t<Add option=\"-O3\" />\n\t\t\t\t\t<Add option=\"-s\" />\n\t\t\t\t</Linker>\n\t\t\t</Target>\n\t\t</Build>\n\t\t<Compiler>\n\t\t\t<Add option=\"-Wall\" />\n\t\t\t<Add option=\"-fexceptions\" />\n\t\t\t<Add directory=\"/usr/include/opencv4\" />\n\t\t</Compiler>\n\t\t<Linker>\n\t\t\t<Add option=\"-lX11\" />\n\t\t\t<Add library=\"/usr/lib/x86_64-linux-gnu/libopencv_core.so\" />\n\t\t\t<Add library=\"/usr/lib/x86_64-linux-gnu/libopencv_video.so\" />\n\t\t\t<Add library=\"/usr/lib/x86_64-linux-gnu/libopencv_videoio.so\" />\n\t\t</Linker>\n\t\t<Unit filename=\"biosim4.ini\" />\n\t\t<Unit filename=\"src/analysis.cpp\" />\n\t\t<Unit filename=\"src/basicTypes.cpp\" />\n\t\t<Unit filename=\"src/basicTypes.h\" />\n\t\t<Unit filename=\"src/createBarrier.cpp\" />\n\t\t<Unit filename=\"src/endOfGeneration.cpp\" />\n\t\t<Unit filename=\"src/endOfSimStep.cpp\" />\n\t\t<Unit filename=\"src/executeActions.cpp\" />\n\t\t<Unit filename=\"src/feedForward.cpp\" />\n\t\t<Unit filename=\"src/genome-compare.cpp\" />\n\t\t<Unit filename=\"src/genome-neurons.h\" />\n\t\t<Unit filename=\"src/genome.cpp\" />\n\t\t<Unit filename=\"src/getSensor.cpp\" />\n\t\t<Unit filename=\"src/grid.cpp\" />\n\t\t<Unit filename=\"src/grid.h\" />\n\t\t<Unit filename=\"src/imageWriter.cpp\" />\n\t\t<Unit filename=\"src/imageWriter.h\" />\n\t\t<Unit filename=\"src/indiv.cpp\" />\n\t\t<Unit filename=\"src/indiv.h\" />\n\t\t<Unit filename=\"src/main.cpp\" />\n\t\t<Unit filename=\"src/params.cpp\" />\n\t\t<Unit filename=\"src/params.h\" />\n\t\t<Unit filename=\"src/peeps.cpp\" />\n\t\t<Unit filename=\"src/peeps.h\" />\n\t\t<Unit filename=\"src/random.cpp\" />\n\t\t<Unit filename=\"src/random.h\" />\n\t\t<Unit filename=\"src/sensors-actions.h\" />\n\t\t<Unit filename=\"src/signals.cpp\" />\n\t\t<Unit filename=\"src/signals.h\" />\n\t\t<Unit filename=\"src/simulator.cpp\" />\n\t\t<Unit filename=\"src/simulator.h\" />\n\t\t<Unit filename=\"src/spawnNewGeneration.cpp\" />\n\t\t<Unit filename=\"src/survival-criteria.cpp\" />\n\t\t<Unit filename=\"src/unitTestBasicTypes.cpp\" />\n\t\t<Unit filename=\"src/unitTestConnectNeuralNetWiringFromGenome.cpp\" />\n\t\t<Unit filename=\"src/unitTestGridVisitNeighborhood.cpp\" />\n\t\t<Extensions />\n\t</Project>\n</CodeBlocks_project_file>\n"
        },
        {
          "name": "biosim4.ini",
          "type": "blob",
          "size": 9.546875,
          "content": "# biosim4.ini\n# biosim4.ini is the default config file for the simulator.\n# The config filename is determined in simulator() in simulator.cpp.\n# The config file is parsed by class ParamManager, see params.cpp and params.h.\n# Although not foolproof, the config file can be modified during a simulation\n# run and the param manager will make any new params available to the simulator\n# after the end of the current simulator step or after the end of the current\n# generation.\n#\n# Parameter values can also be changed automatically based on the current generation\n# number of the simulation using the syntax (see barrierType param for example): \n# <parameterName>@<generationNumber> = <newValue>\n# Instances of the same parameter have to be ascending by generation number to work\n# correctly, e.g. barrierType@100 must be later in the file than barrierType@50, \n# which in turn must come after barrierType. Not all parameters can be safely\n# changed during a simulation. Some restrictions are noted below.\n\n# numThreads must be 1 or greater. Best value is less than or equal to\n# the number of CPU cores. Cannot be changed after a simulation starts.\nnumThreads = 4\n\n# sizeX, sizeY define the size of the 2D world. Minimum size is 16,16.\n# Maximum size is 32767, 32767. Cannot be changed after a simulation starts.\nsizeX = 128\nsizeY = 128\n\n# Population at the start of each generation. Maximum value = 32766.\n# Cannot be changed after a simulation starts.\npopulation = 3000\n\n# Number of simulation steps per generation. Range 1..INT_MAX.\nstepsPerGeneration = 300\n\n# The simulator will stop when the generation number == maxGenerations.\n# Range 1..INT_MAX\nmaxGenerations = 200000\n\n# genomeInitialLengthMin and genomeInitialLengthMax should be set to\n# the same value. (For future use, the max length might be larger to\n# allow mutations that lengthen the genome.) Range 1..INT_MAX and\n# must be no larger than genomeMaxLength. The range of genomeMaxLength\n# is genomeInitialLengthMax..INT_MAX. Cannot be changed after a\n# simulation starts.\ngenomeInitialLengthMin = 24\ngenomeInitialLengthMax = 24\ngenomeMaxLength = 300\n\n# maxNumberNeurons is the maximum number of internal neurons that may\n# be addressed by genes in the genome. Range 1..INT_MAX. Cannot be\n# changed after a simulation starts. Cannot be changed after a\n# simulation starts.\nmaxNumberNeurons = 5\n\n# If killEnable is true and the \"kill\" action neuron is enabled in\n# sensors-actions.h and compiled in, then agents are permitted to\n# kill their neighbor in the adjacent location in the direction of\n# forward movement. If false, the neighbors are safe.\nkillEnable = false\n\n# If sexualReproduction is false, newborns inherit the genes from a\n# single parent. If true, newborns inherit a mixture of genes from\n# two parents.\nsexualReproduction = true\n\n# If chooseParentByFitness is false, then every agent that survives the\n# selection criterion has equal chance of reproducing. If true, then\n# preference is given to those parents who passed the selection criterion\n# with a greater score. Fitness scores are determined in survival-criteria.cpp.\nchooseParentsByFitness = true\n\n# pointMutationRate is the probability per gene of having a single-bit\n# mutation during spawning. Range 0.0 .. 1.0. A reasonable range is\n# 0.0001 to 0.01.\npointMutationRate = 0.001\n\n# geneInsertionDeletionRate and deletionRatio are for future use to\n# allow mutations that lengthen or shorten the genome. Ignored for now.\ngeneInsertionDeletionRate = 0.0\ndeletionRatio = 0.5\n\n# responsivenessCurveKFactor is a small positive integer that determines\n# the shape of the curve that determines how reactive an agent is to its\n# sensory inputs. Typical values are # 1, 2, 3, or 4, but greater values\n# are allowed experimentally.\nresponsivenessCurveKFactor = 2\n\n# populationSensorRadius is the radius in which the population sensor\n# looks for neighbors. Floating point value. A value of 1.5 includes\n# all the immediate eight-neighborhood. Larger values incur exponentially\n# increasing processor overhead. Range 0.5 up to (float)max(sizeX, sizeY).\npopulationSensorRadius = 2.5\n\n# longProbeDistance is the default distance that the long-probe sensors\n# are able to see. Applies to long-probe population sensor and long-probe\n# signal (pheromone) sensor. Range 1..INT_MAX.\nlongProbeDistance = 16\n\n# shortProbeBarrierDistance is the distance that the short-probe sensor\n# can see. Range 1..INT_MAX.\nshortProbeBarrierDistance = 4\n\n# signalSensorRadius is the radius in which the signal (pheromone) sensor\n# looks for pheromones. Floating point value. A value of 1.5 includes\n# all the immediate eight-neighborhood. Larger values incur exponentially\n# increasing processor overhead. Range 0.5 up to (float)max(sizeX, sizeY).\nsignalSensorRadius = 2.0\n\n# signalLayers defines the number of pheromone layers. Must be 1 for now.\n# Values > 1 are for future use. Cannot be changed after a simulation starts.\nsignalLayers = 1\n\n# imageDir is the relative or absolute directory path where generation\n# movies are created.\nimageDir = images\n\n# logDir is the relative or absolute directory path where text log files\n# are created.\nlogDir = logs\n\n# displayScale scales the generation movie. Typical values are\n# 1 for actual size, or 2, 4, 8, 16, or 32 to scale up the movie.\ndisplayScale = 8\n\n# agentSize controls the size of the dot used to represent an agent\n# in the generation movie. Typical value is displayScale / 2.\nagentSize = 4\n\n# If videoSaveFirstFrames is 0, then only the parameter videoStride controls\n# how often generation movies are made. If videoSaveFirstFrames is nonzero,\n# then generation movies will also be generated for every generation from 0\n# through videoSaveFirstFrames (because the first few generations are often\n# the most interesting). Range 1..INT_MAX.\nvideoSaveFirstFrames = 2\n\n# updateGraphLog can be set to true to cause the simulator program to\n# invoke graphlog.gp to update the simulation progress graph. If true,\n# then updateGraphLogStride controls how often it is invoked. If\n# updateGraphLog is false, then the simulator program will not invoke\n# graphlog.gp.\nupdateGraphLog = true\n\n# If saveVideo is true, the simulator program will create generation\n# movies in the directory named by imageDir at the intervals set by\n# videoSaveFirstFrames and videoStride.\nsaveVideo = true\n\n# videoStride determines how often generation movies will be created.\n# Also see saveVideo and videoSaveFirstFrames. Range 1..INT_MAX.\nvideoStride = 25\n\n# updateGraphLogStride determines how often the simulation progress graph\n# is updated by direct invocation of graphlog.gp. Ignored if updateGraphLog\n# is false. updateGraphLogStride may be a positive integer from 1 to INT_MAX,\n# or may be set to the string videoStride to use the value of videoStride.\nupdateGraphLogStride = videoStride\n\n# genomeAnalysisStride determines how often the simulator will print genomic\n# statistics. The stats are printed to stdout when the generation number\n# modulo genomeAnalysisStride == 0. The value may be a positive integer from\n# 1 to INT_MAX, or may be set to the string videoStride to use the value of\n# videoStride.\ngenomeAnalysisStride = videoStride\n\n# When the genomic statistics are printed (see genomeAnalysisStride), the\n# method used to measure genome diversity in the population is determined\n# by genomeComparisonMethod. May be set to 0 for Jaro-Winkler method (useful\n# for future use if genomes are allowed to grow or shrink in size); or 1\n# for a Hamming measure bit-by-bit, or 2 for a Hamming measure byte-by-byte.\n# Typically set to 1.\ngenomeComparisonMethod = 1\n\n# When genomic statistics are printed (see genomeAnalysisStride), the number\n# of genomes sampled from the population and printed to stdout is determined\n# by displaySampleGenomes. Range 0 to population size.\ndisplaySampleGenomes = 5\n\n# challenge determines the selection criterion for reproduction. This is\n# typically always under active development. See survival-criteria.cpp for\n# more information.\n# 0 = circle\n# 1 = right half\n# 2 = right quarter\n# 3 = neighbor count\n# 4 = center weighted\n# 40 = center unweighted\n# 5 = corner 1/4 radius\n# 6 = corner 1/4 radius weighted\n# 7 = migrate distance\n# 8 = center sparse\n# 9 = left eighth\n# 10 = radioactive walls\n# 11 = against any wall\n# 12 = touch any wall any time\n# 13 = east-west eighths\n# 14 = near barrier\n# 15 = pairs\n# 16 = contact location sequence\n# 17 = altruism, circle + NE corner\nchallenge = 6\n\n# The simulator supports a feature called \"barriers.\" Barriers are locations\n# in the simulated 2D world where agents may not occupy. The value of\n# barrierType is typically under active development. See createBarrier.cpp\n# for more information.\n# 0 = none\n# 1 = vertical bar constant location\n# 2 = vertical bar random locations\n# 3 = five staggered vertical bars\n# 4 = horiz bar constant location north center\n# 5 = floating islands\n# 6 = sequence of spots\nbarrierType = 0\n\n# This is an example of an automatic parameter change based on the generation.\n# If uncommented, the barrier type will automatically change to the new value\n# when the simulation reaches the generation specified after the @ delimiter.\n# barrierType@500 = 5\n\n# If true, then the random number generator (RNG) will be seeded by the value\n# in RNGSeed, causing each thread to receive a deterministic sequence from\n# the RNG. If false, the RNG will be randomly seeded and program output will\n# be non-deterministic. Cannot be changed after a simulation starts.\ndeterministic = false\n\n# If deterministic is true, the random number generator will be seeded with\n# this value. If deterministic is false, this value is ignored. Legal values\n# are integers 0 to 4294967295. Cannot be changed after a simulation starts.\nRNGSeed = 12345678\n\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "logs",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}