{
  "metadata": {
    "timestamp": 1736565836270,
    "page": 772,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mitsuba-renderer/mitsuba3",
      "stars": 2173,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 1.4208984375,
          "content": "---\nLanguage:        Cpp\nAccessModifierOffset: -4\nAlignConsecutiveAssignments: true\nAlignEscapedNewlinesLeft: false\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: false\nBinPackParameters: true\nBreakBeforeBinaryOperators: false\nBreakBeforeBraces: Attach\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nColumnLimit:     80\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: false\nDerivePointerBinding: false\nExperimentalAutoDetectBinPacking: false\nIndentCaseLabels: true\nIndentFunctionDeclarationAfterType: false\nIndentWidth:     4\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakBeforeFirstCallParameter: 19\nPenaltyBreakComment: 60\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 60\nPointerBindsToType: false\nSpaceAfterControlStatementKeyword: true\nSpaceAfterCStyleCast: true\nSpaceBeforeAssignmentOperators: true\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  false\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nStandard:        Cpp11\nTabWidth:        4\nUseTab:          Never\n...\n\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.0400390625,
          "content": "468ae070d64c601307ee2884af9fa0f012f71d49\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3876953125,
          "content": "# SublimeText\n*.sublime-project\n*.sublime-workspace\n\n# VS & VSCode\n/.vscode\n/.vs\n\n# Jupyter\n/.ipynb_checkpoints\n\n# Python\n__pycache__\n*.pyc\n/wheelhouse\n\n# macOS\n\\.DS_Store\n\n# Default build directory\n/build*\n\n# Auto-generated documentation files\n/docs/generated/plugins_*.rst\n/docs/src/rendering\n/docs/src/inverse_rendering\n/docs/src/others\n/docs/src/quickstart\n/docs/src/generated\n/docs/resources\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 1.5126953125,
          "content": "[submodule \"ext/zlib\"]\n    path = ext/zlib\n    url = https://github.com/mitsuba-renderer/zlib\n[submodule \"ext/libpng\"]\n    path = ext/libpng\n    url = https://github.com/mitsuba-renderer/libpng.git\n[submodule \"ext/libjpeg\"]\n    path = ext/libjpeg\n    url = https://github.com/mitsuba-renderer/libjpeg\n[submodule \"ext/openexr\"]\n    path = ext/openexr\n    url = https://github.com/mitsuba-renderer/openexr\n[submodule \"ext/tinyformat\"]\n    path = ext/tinyformat\n    url = https://github.com/mitsuba-renderer/tinyformat\n[submodule \"ext/pugixml\"]\n    path = ext/pugixml\n    url = https://github.com/mitsuba-renderer/pugixml\n[submodule \"ext/asmjit\"]\n    path = ext/asmjit\n    url = https://github.com/mitsuba-renderer/asmjit\n[submodule \"ext/nanogui\"]\n    path = ext/nanogui\n    url = https://github.com/mitsuba-renderer/nanogui\n[submodule \"resources/data\"]\n    path = resources/data\n    url = https://github.com/mitsuba-renderer/mitsuba-data\n    shallow = true\n[submodule \"ext/embree\"]\n    path = ext/embree\n    url = https://github.com/mitsuba-renderer/embree\n[submodule \"ext/ittnotify\"]\n\tpath = ext/ittnotify\n\turl = https://github.com/intel/IntelSEAPI\n[submodule \"ext/fastfloat\"]\n\tpath = ext/fastfloat\n\turl = https://github.com/fastfloat/fast_float\n[submodule \"tutorials\"]\n\tpath = tutorials\n\turl = https://github.com/mitsuba-renderer/mitsuba-tutorials\n\tshallow = true\n[submodule \"ext/drjit\"]\n\tpath = ext/drjit\n\turl = https://github.com/mitsuba-renderer/drjit\n[submodule \"ext/nanobind\"]\n\tpath = ext/nanobind\n\turl = https://github.com/wjakob/nanobind.git\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.208984375,
          "content": "version: 2\n\nsubmodules:\n  include: all\n  recursive: true\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.10\"\n\nsphinx:\n   configuration: docs/conf.py\n\npython:\n   install:\n   - requirements: docs/requirements.txt\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 21.5419921875,
          "content": "# ----------------------------------------------------------\n# Top-level Mitsuba 3 CMake file, requires a recent version.\n# ----------------------------------------------------------\ncmake_minimum_required (VERSION 3.13...3.18)\n\nproject(mitsuba\n  DESCRIPTION\n    \"Mitsuba\"\n  LANGUAGES\n    CXX C\n)\n\n# ----------------------------------------------------------\n#  Optional features available to users\n# ----------------------------------------------------------\n\n# A number of Mitsuba 3 features (scripting, differentiable rendering, testing\n# infrastructure, etc.) are only available if Python bindings are built.\n\noption(MI_ENABLE_PYTHON \"Build Python bindings for Mitsuba, Dr.Jit, and NanoGUI?\" ON)\n\n# Mitsuba 3 ships with its own ray tracing acceleration data structure. If\n# desired, Embree (which tends to be quite a bit faster) can be used instead.\n# Embree lacks some features provided by Mitsuba 3, like support for double\n# precision arithmetic.\noption(MI_ENABLE_EMBREE  \"Use Embree for ray tracing operations?\" ON)\n\n# Use GCC/Clang address sanitizer?\n# NOTE: To use this in conjunction with Python plugin, you will need to call\n# On OSX:\n#   export DYLD_INSERT_LIBRARIES=<path to libclang_rt.asan_osx_dynamic.dylib>\n# On Linux:\n#   export LD_LIBRARY_PATH=<path to libasan.so>\n\noption(MI_SANITIZE_ADDRESS \"Enable GCC/Clang address sanitizer?\" OFF) # To catch out-of-bounds accesses\noption(MI_SANITIZE_MEMORY  \"Enable GCC/Clang memory sanitizer?\"  OFF) # To catch use of uninitialized memory\n\noption(MI_THROW_TRAPS_DEBUGGER \"Trap the debugger on calls to `Throw`?\" OFF)\nif(MI_THROW_TRAPS_DEBUGGER)\n  add_definitions(-DMI_THROW_TRAPS_DEBUGGER)\nendif()\n\noption(MI_PROFILER_ITTNOTIFY \"Forward profiler events (to Intel VTune)?\" OFF)\noption(MI_PROFILER_NVTX      \"Forward profiler events (to NVIDIA Nsight)?\" OFF)\n\nif (NOT APPLE)\n  option(MI_ENABLE_OPTIX_DEBUG_VALIDATION \"Enable debug flag for OptiX\" OFF)\nendif()\n\noption(MI_STABLE_ABI \"Build Python extension using the CPython stable ABI? (Only relevant when using scikit-build)\" OFF)\nmark_as_advanced(MI_STABLE_ABI)\n\n# ----------------------------------------------------------\n#  Check if submodules have been checked out, or fail early\n# ----------------------------------------------------------\n\nif (NOT IS_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/ext/drjit/ext/drjit-core/ext/nanothread/ext/cmake-defaults\")\n  message(FATAL_ERROR \"The Mitsuba 3 dependencies are missing! \"\n    \"You probably did not clone the project with --recursive. It is possible to recover \"\n    \"by invoking\\n$ git submodule update --init --recursive\")\nendif()\n\n# ----------------------------------------------------------\n#  In-tree builds are not permitted\n# ----------------------------------------------------------\n\nif (PROJECT_SOURCE_DIR STREQUAL \"${PROJECT_BINARY_DIR}\")\n  message(FATAL_ERROR \"In-tree builds are not permitted. To recover, delete \"\n          \"'CMakeCache.txt', the 'CMakeFiles' directory and inform CMake about \"\n          \"the source (-S) and build (-B) paths. For example to compile to a \"\n          \"directory labeled 'build' using the Ninja generator, enter\\n\"\n          \"  $ rm -Rf CMakeCache.txt CMakeFiles\\n\"\n          \"  $ cmake -S . -B build -G Ninja\\n\"\n          \"  $ cmake --build build\")\nendif()\n\n# ----------------------------------------------------------\n#  Build defaults for projects by the Realistic Graphics Lab\n# ----------------------------------------------------------\n\nset(P \"MI\") # <-- prefix for CMake variables, used by the following script\nset(MI_VERSION_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/include/mitsuba/mitsuba.h\")\ninclude(ext/drjit/ext/drjit-core/ext/nanothread/ext/cmake-defaults/CMakeLists.txt)\n\n# ----------------------------------------------------------\n#  scikit-build: find installed version of dependencies\n# ----------------------------------------------------------\n\nif (SKBUILD)\n\n  set(CMAKE_INSTALL_LIBDIR mitsuba)\n  set(CMAKE_INSTALL_BINDIR mitsuba)\n  set(CMAKE_INSTALL_DATAROOTDIR mitsuba/data)\n  set(CMAKE_INSTALL_INCLUDEDIR mitsuba/include)\n\n  set(MI_DRJIT_CMAKE_DIR \"\" CACHE STRING \"Location of Dr.Jit's CMake directory that should be used instead of the output of `drjit.get_cmake_dir()` when building with scikit-build.\")\n  mark_as_advanced(MI_DRJIT_CMAKE_DIR)\n\n  if(\"${MI_DRJIT_CMAKE_DIR}\" STREQUAL \"\")\n    execute_process(\n      COMMAND\n      \"${PYTHON_EXECUTABLE}\" -c\n      \"import drjit; print(drjit.get_cmake_dir())\"\n      OUTPUT_VARIABLE MI_DRJIT_CMAKE_DIR\n      OUTPUT_STRIP_TRAILING_WHITESPACE COMMAND_ECHO STDOUT)\n  endif()\n\n  list(APPEND CMAKE_PREFIX_PATH \"${MI_DRJIT_CMAKE_DIR}\")\n  find_package(drjit CONFIG REQUIRED)\nendif()\n\n# ----------------------------------------------------------\n#  Create the 'mitsuba.conf' file if none is found\n# ----------------------------------------------------------\n\nif (NOT EXISTS ${CMAKE_CURRENT_BINARY_DIR}/mitsuba.conf)\n  set(MI_DEFAULT_VARIANTS \"scalar_rgb,scalar_spectral,cuda_ad_rgb,llvm_ad_rgb,llvm_ad_spectral\" CACHE STRING \"Default Mitsuba variants that should be included if no mitsuba.conf file exists\")\n  string(REPLACE \",\" \";\" MI_DEFAULT_VARIANTS \"${MI_DEFAULT_VARIANTS}\")\n  message(STATUS \"MI_DEFAULT_VARIANTS: ${MI_DEFAULT_VARIANTS}\")\n  mark_as_advanced(MI_DEFAULT_VARIANTS)\n  foreach(TMP ${MI_DEFAULT_VARIANTS})\n    string(APPEND INSERT_CONFIGURATIONS_HERE \"\\\"${TMP}\\\", \")\n  endforeach()\n  string(REGEX REPLACE \", $\" \"\" INSERT_CONFIGURATIONS_HERE \"${INSERT_CONFIGURATIONS_HERE}\")\n  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/resources/mitsuba.conf.template\n                 ${CMAKE_CURRENT_BINARY_DIR}/mitsuba.conf @ONLY)\n  unset(INSERT_CONFIGURATIONS_HERE)\n  set(MI_COPIED_CONFIG_FILE 1)\nendif()\n\n# ----------------------------------------------------------\n#  Parse 'mitsuba.conf' and generate derived files:\n#   1. include/core/config.h\n#   2. python/mitsuba/config.py\n# ----------------------------------------------------------\n\nif (NOT Python_EXECUTABLE)\n  # We require Python for the next step, even if Python bindings are deactivated\n  find_package(Python COMPONENTS Interpreter REQUIRED)\nendif()\n\nexecute_process(\n  COMMAND ${Python_EXECUTABLE}\n  ${CMAKE_CURRENT_SOURCE_DIR}/resources/configure.py\n  ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION} ${CMAKE_CURRENT_SOURCE_DIR}\n  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n  OUTPUT_VARIABLE MI_VARIANTS\n  ERROR_VARIABLE MI_VARIANTS_ERR\n)\n\nif (MI_VARIANTS_ERR)\n  message(FATAL_ERROR \"Could not run resources/configure.py script: ${MI_VARIANTS_ERR}\")\nendif()\n\n# ----------------------------------------------------------\n#  Check desired variants and set relevant feature flags\n# ----------------------------------------------------------\n\nlist(LENGTH MI_VARIANTS MI_VARIANTS_COUNT)\n\nmessage(STATUS \"Mitsuba: building the following variants:\")\nforeach (MI_VARIANT ${MI_VARIANTS})\n  string(REPLACE \"|\" \";\" MI_VARIANT ${MI_VARIANT})\n  list(GET MI_VARIANT 0 MI_VARIANT_NAME)\n  list(GET MI_VARIANT 1 MI_VARIANT_FLOAT)\n  list(GET MI_VARIANT 2 MI_VARIANT_SPECTRUM)\n  set(MI_VARIANT_NAMES ${MI_VARIANT_NAMES} ${MI_VARIANT_NAME})\n  message(STATUS \" * ${MI_VARIANT_NAME}\")\nendforeach()\n\nstring(REPLACE \";\" \" \" MI_VARIANT_NAMES_STR \"${MI_VARIANT_NAMES}\")\n\nif (MI_VARIANTS MATCHES \"cuda_\")\n  set(MI_ENABLE_CUDA ON)\nendif()\n\nif (MI_VARIANTS MATCHES \"llvm_\")\n  set(MI_ENABLE_LLVM ON)\nendif()\n\nif (MI_ENABLE_LLVM OR MI_ENABLE_CUDA)\n  set(MI_ENABLE_JIT ON)\nendif()\n\nif (MI_VARIANTS MATCHES \"ad_\")\n  set(MI_ENABLE_AUTODIFF ON)\nendif()\n\n# ----------------------------------------------------------\n#  Re-run CMake when 'mitsuba.conf' changes (we must\n#  dynamically add or remove targets based on this file).\n#  Abuses the 'configure_file' mechanism to achieve this.\n# ----------------------------------------------------------\n\nconfigure_file(${CMAKE_CURRENT_BINARY_DIR}/mitsuba.conf\n               ${CMAKE_CURRENT_BINARY_DIR}/ext/unused)\n\n\n# ----------------------------------------------------------\n#  Automatically generate a suitable 'setpath.sh' file\n# ----------------------------------------------------------\n\n# Directory for build products\nif (MSVC)\n  # MSVC: .. with generator expression for build type\n  set(MI_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>)\nelse()\n  set(MI_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR})\nendif()\n\nset(MI_COPY_FILES \"\")\n\n# Function to make a read-only copy of a file\nmacro (ro_copy IN_FILE OUT_FILE)\n  set(OUT_FILE_1 \"${CMAKE_CURRENT_BINARY_DIR}/${OUT_FILE}\")\n  set(OUT_FILE_2 \"${MI_BINARY_DIR}/${OUT_FILE}\")\n  if (UNIX)\n    add_custom_command(\n      OUTPUT ${OUT_FILE_2} DEPENDS ${IN_FILE} ${ARGN}\n      COMMAND ${CMAKE_COMMAND} -E copy ${IN_FILE} ${OUT_FILE_2} && chmod a=r ${OUT_FILE_2})\n    list(APPEND MI_COPY_FILES ${OUT_FILE_2})\n  else()\n    # add_custom_command does not support generator expressions in OUTPUT argument (grr..)\n    # make a dummy copy and then depend on that\n    add_custom_command(\n      OUTPUT ${OUT_FILE_1} DEPENDS ${IN_FILE} ${ARGN}\n      COMMAND ${CMAKE_COMMAND} -E copy ${IN_FILE} ${OUT_FILE_1}\n      COMMAND ${CMAKE_COMMAND} -E copy ${IN_FILE} ${OUT_FILE_2}\n    )\n    list(APPEND MI_COPY_FILES ${OUT_FILE_1})\n  endif()\nendmacro()\n\nif (NOT SKBUILD)\n  if (NOT MSVC)\n      configure_file(${CMAKE_CURRENT_SOURCE_DIR}/resources/setpath.sh\n                     ${CMAKE_CURRENT_BINARY_DIR}/setpath.sh @ONLY)\n      install(FILES ${CMAKE_CURRENT_BINARY_DIR}/setpath.sh DESTINATION \".\")\n  else()\n      configure_file(${CMAKE_CURRENT_SOURCE_DIR}/resources/setpath.sh\n                     ${CMAKE_CURRENT_BINARY_DIR}/resources/setpath.sh @ONLY)\n      install(FILES ${CMAKE_CURRENT_BINARY_DIR}/setpath.sh DESTINATION \".\")\n      ro_copy(${CMAKE_CURRENT_BINARY_DIR}/resources/setpath.sh setpath.sh)\n\n      configure_file(${CMAKE_CURRENT_SOURCE_DIR}/resources/setpath.bat\n                     ${CMAKE_CURRENT_BINARY_DIR}/resources/setpath.bat @ONLY)\n      install(FILES ${CMAKE_CURRENT_BINARY_DIR}/resources/setpath.bat DESTINATION \".\")\n      ro_copy(${CMAKE_CURRENT_BINARY_DIR}/resources/setpath.bat setpath.bat)\n\n      configure_file(${CMAKE_CURRENT_SOURCE_DIR}/resources/setpath.ps1\n                     ${CMAKE_CURRENT_BINARY_DIR}/resources/setpath.ps1 @ONLY)\n      install(FILES ${CMAKE_CURRENT_BINARY_DIR}/resources/setpath.ps1 DESTINATION \".\")\n      ro_copy(${CMAKE_CURRENT_BINARY_DIR}/resources/setpath.ps1 setpath.ps1)\n  endif()\nendif()\n\n# ----------------------------------\n\n# Clang/GCC address sanitizer\nif ((MI_SANITIZE_ADDRESS OR MI_SANITIZE_MEMORY) AND\n    (CMAKE_CXX_COMPILER_ID MATCHES \"(GNU|Clang)\"))\n  # Don't optimize too heavily\n  if (U_CMAKE_BUILD_TYPE MATCHES REL)\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -O1\")\n    set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -O1\")\n    add_compile_options(-O1 -fno-optimize-sibling-calls)\n  endif()\n\n  add_compile_options(-fno-omit-frame-pointer)\n\n  if (MI_SANITIZE_ADDRESS)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fsanitize=address\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=address\")\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fsanitize=address\")\n    set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -fsanitize=address\")\n    message(STATUS \"Mitsuba: enabling the address sanitizer.\")\n  endif()\n\n  if (MI_SANITIZE_MEMORY)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fsanitize=memory\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=memory\")\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fsanitize=memory\")\n    set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -fsanitize=memory\")\n    message(STATUS \"Mitsuba: enabling the memory sanitizer.\")\n  endif()\nendif()\n\n# Adapt to variations in rpath handling on Linux and macOS\nif (APPLE)\n  set(MI_ORIGIN \"@loader_path\")\nelseif(UNIX)\n  set(MI_ORIGIN \"$ORIGIN\")\nendif()\n\nset(CMAKE_INSTALL_RPATH \"${MI_ORIGIN};${MI_ORIGIN}/../drjit\")\n\n# Build the dependencies\nadd_subdirectory(ext)\n\n# Always add the include directories for tinyformat, Dr.Jit and Eigen\ninclude_directories(include\n  ${TINYFORMAT_INCLUDE_DIRS}\n  ${NANOBIND_INCLUDE_DIRS}\n  ${CMAKE_CURRENT_BINARY_DIR}/include\n)\n\nif (MI_ENABLE_CUDA)\n  message(STATUS \"Mitsuba: using OptiX for GPU ray tracing.\")\n  add_definitions(-DMI_ENABLE_CUDA=1)\nendif()\n\nif (MI_ENABLE_LLVM)\n  add_definitions(-DMI_ENABLE_LLVM=1)\nendif()\n\nif (MI_ENABLE_EMBREE)\n  include_directories(${EMBREE_INCLUDE_DIRS})\n  add_definitions(-DMI_ENABLE_EMBREE=1)\n  message(STATUS \"Mitsuba: using Embree for CPU ray tracing.\")\nelse()\n  message(STATUS \"Mitsuba: using built-in implementation for CPU ray tracing.\")\nendif()\n\nif (MI_ENABLE_OPTIX_DEBUG_VALIDATION)\n  add_definitions(-DMI_ENABLE_OPTIX_DEBUG_VALIDATION)\n  set(DRJIT_ENABLE_OPTIX_DEBUG_VALIDATION ON CACHE BOOL \"Dr.Jit: OptiX debug and validation flags enabled.\" FORCE)\n  message(STATUS \"Mitsuba: OptiX debug and validation flags enabled.\")\nelse()\n  set(DRJIT_ENABLE_OPTIX_DEBUG_VALIDATION OFF CACHE BOOL \"Dr.Jit: OptiX debug and validation flags disabled.\" FORCE)\n  message(STATUS \"Mitsuba: OptiX debug and validation flags disabled.\")\nendif()\n\nif (MI_ENABLE_AUTODIFF)\n  add_definitions(-DMI_ENABLE_AUTODIFF=1)\nendif()\n\nset(CMAKE_CXX_STANDARD 17)\n\nif (CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n  # Hidden default symbol visibility issues with GCC\n  set(CMAKE_CXX_VISIBILITY_PRESET \"default\")\nendif()\n\nif (MSVC)\n  # Don't complain about not DLL-exporting STL classes\n  add_compile_options(/wd4251)\n\n  # Function '..' marked as __forceinline not inlined\n  add_compile_options(/wd4714)\n\n  # unreferenced local function has been removed\n  add_compile_options(/wd4505)\n\n  # Declaration of type hides class member\n  add_compile_options(/wd4458 /wd4459)\n\n  # Check operator precedence for possible error\n  add_compile_options(/wd4554)\n\n  # structure was padded due to alignment specifier\n  add_compile_options(/wd4324)\n\n  # conditional expression is constant\n  add_compile_options(/wd4127)\n\n  # Unreachable code (MSVC frequently warns in functions using \"if constexpr\")\n  add_compile_options(/wd4702)\n\n  # Parallel build on MSVC\n  add_compile_options(/MP)\n\n  # Permit many sections in .obj files\n  add_compile_options(/bigobj)\n\n  # Don't complain about incompatible modifier on explicit instantiations\n  add_compile_options(/wd4910)\n\n  # Ensure source and execution charset is encoded as UTF-8\n  add_compile_options(/utf-8)\n\n  # Workaround to avoid a particular crash due to MS VC++ runtime library binary \n  # incompatibility. In general the runtime version needs to be at least as new \n  # as toolset version but this define provides one such \"escape hatch\" if that \n  # strictly isn't the case to combat against a commonly encountered reported crash\n  add_compile_options(-D_DISABLE_CONSTEXPR_MUTEX_CONSTRUCTOR)\nendif()\n\ninclude(TestBigEndian)\ntest_big_endian(IS_BIG_ENDIAN)\nif (IS_BIG_ENDIAN)\n  add_definitions(-DBIG_ENDIAN)\nelse()\n  add_definitions(-DLITTLE_ENDIAN)\nendif()\n\n# Get the current working branch\nexecute_process(\n  COMMAND git rev-parse --abbrev-ref HEAD\n  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n  OUTPUT_VARIABLE GIT_BRANCH\n  OUTPUT_STRIP_TRAILING_WHITESPACE\n)\n\n# Get the latest abbreviated commit hash of the working branch\nexecute_process(\n  COMMAND git log -1 --format=%h\n  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n  OUTPUT_VARIABLE GIT_COMMIT_HASH\n  OUTPUT_STRIP_TRAILING_WHITESPACE\n)\n\n# Function for creating Mitsuba plugins\nset(MI_PLUGIN_TARGETS \"\")\nfunction(add_plugin)\n  list(GET ARGV 0 TARGET)\n  list(REMOVE_AT ARGV 0)\n  add_library(${TARGET} SHARED ${ARGV})\n  target_link_libraries(${TARGET} PRIVATE mitsuba)\n  set_target_properties(${TARGET} PROPERTIES\n    PREFIX \"\"\n    LIBRARY_OUTPUT_DIRECTORY ${MI_BINARY_DIR}/plugins\n    RUNTIME_OUTPUT_DIRECTORY ${MI_BINARY_DIR}/plugins\n    FOLDER plugins/${MI_PLUGIN_PREFIX}/${TARGET}\n  )\n  install(\n    TARGETS ${TARGET}\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_BINDIR}/plugins\n    LIBRARY DESTINATION ${CMAKE_INSTALL_BINDIR}/plugins\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}/plugins\n  )\n  list(APPEND MI_PLUGIN_TARGETS ${TARGET})\n  set(MI_PLUGIN_TARGETS \"${MI_PLUGIN_TARGETS}\" PARENT_SCOPE)\nendfunction(add_plugin)\n\n# Be extra noisy about unintended float->double conversions\nif (CMAKE_CXX_COMPILER_ID MATCHES \"(GNU|Clang)\" AND NOT MI_VARIANTS MATCHES \"double\")\n  add_compile_options(\"-Wdouble-promotion\")\nendif()\n\n# Forwarding of profiler events to external tools\nif (MI_PROFILER_ITTNOTIFY)\n  include_directories(${ITT_INCLUDE_DIRS})\n  add_definitions(-DMI_ENABLE_ITTNOTIFY=1)\nendif()\n\nif (MI_PROFILER_NVTX)\n  set(CUDA_TOOLKIT_ROOT_DIR \"\" CACHE STRING \"Path to the CUDA installation root directory.\")\n  if (NOT CUDA_TOOLKIT_ROOT_DIR)\n    message(FATAL_ERROR \"Specify CUDA_TOOLKIT_ROOT_DIR.\")\n  endif()\n  include_directories(${CUDA_TOOLKIT_ROOT_DIR}/include)\n  add_definitions(-DMI_ENABLE_NVTX=1)\nendif()\n\n# Register the Mitsuba codebase\nadd_subdirectory(src)\n\n# Documentation\nif (NOT SKBUILD)\n  list(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/src/cmake\")\n  find_package(Sphinx)\n  if (Sphinx_FOUND)\n    set(SPHINX_INPUT_DIR  \"${CMAKE_CURRENT_SOURCE_DIR}/docs\")\n    set(SPHINX_OUTPUT_DIR \"${CMAKE_CURRENT_BINARY_DIR}/html\")\n\n    add_custom_target(mkdoc\n        ${SPHINX_EXECUTABLE} -b html \"${SPHINX_INPUT_DIR}\" \"${SPHINX_OUTPUT_DIR}\"\n        COMMENT \"Building HTML documentation with Sphinx\"\n        USES_TERMINAL)\n\n    set(SPHINX_INPUT_DIR_API  \"${CMAKE_CURRENT_SOURCE_DIR}/docs/docs_api\")\n    set(SPHINX_OUTPUT_DIR_API \"${CMAKE_CURRENT_BINARY_DIR}/html_api\")\n\n    add_custom_target(mkdoc-api\n        ${SPHINX_EXECUTABLE} -b html \"${SPHINX_INPUT_DIR_API}\" \"${SPHINX_OUTPUT_DIR_API}\"\n        COMMENT \"Building HTML documentation with Sphinx\"\n        DEPENDS mitsuba-copy-python-src\n        USES_TERMINAL)\n  endif()\nendif()\n\nif (MSVC)\n  set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT mitsuba)\nendif()\n\n# Warn if a mitsuba.conf file was newly created\nif (MI_COPIED_CONFIG_FILE AND NOT SKBUILD)\n  message(WARNING \"\\n${BoldRed}Created a default 'mitsuba.conf' configuration \"\n          \"file. You will probably want to edit this file to specify the \"\n          \"desired configurations before starting to compile.${ColorReset}\")\nendif()\n\n# Installation targets\nset(MI_DEPEND\n  IlmImf IlmThread Imath Iex IexMath Half pugixml\n)\n\nif (CMAKE_SYSTEM_PROCESSOR MATCHES \"(x86_64)|(amd64)|(AMD64)\")\n  set(MI_DEPEND ${MI_DEPEND} asmjit)\nendif()\n\nlist(APPEND MI_DEPEND png jpeg)\n\nif (WIN32)\nlist(APPEND MI_DEPEND zlib)\nendif()\n\nif (MI_ENABLE_EMBREE)\n  list(APPEND MI_DEPEND embree)\nendif()\n\nif (NOT SKBUILD)\n  list(APPEND MI_DEPEND nanothread)\n\n  if (MI_ENABLE_JIT)\n    list(APPEND MI_DEPEND drjit-core)\n  endif()\n\n  if (MI_ENABLE_AUTODIFF)\n    list(APPEND MI_DEPEND drjit-extra)\n  endif()\nendif()\n\n# Copy shared libraries to Python folders (no rpath on Windows)\nif (MSVC AND MI_ENABLE_PYTHON)\n  set(COPY_TARGETS mitsuba ${MI_DEPEND} ${MI_PLUGIN_TARGETS})\n  add_custom_target(copy-targets ALL DEPENDS ${COPY_TARGETS})\n\n  foreach(target ${COPY_TARGETS})\n    get_target_property(TARGET_FOLDER ${target} FOLDER)\n    if(TARGET_FOLDER MATCHES \"plugins/.*$\")\n        set(COPY_TARGET_DESTINATION ${MI_BINARY_DIR}/python/mitsuba/plugins/$<TARGET_FILE_NAME:${target}>)\n    else()\n        set(COPY_TARGET_DESTINATION ${MI_BINARY_DIR}/python/mitsuba/$<TARGET_FILE_NAME:${target}>)\n    endif()\n    add_custom_command(\n      TARGET copy-targets POST_BUILD\n      COMMAND ${CMAKE_COMMAND} -E copy_if_different\n        $<TARGET_FILE:${target}> ${COPY_TARGET_DESTINATION}\n      DEPENDS ${target}\n    )\n  endforeach(target)\n\n  add_dependencies(copy-targets-python copy-targets)\nendif()\n\n# Set up location for build products\nset_target_properties(mitsuba-bin mitsuba ${MI_DEPEND}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY ${MI_BINARY_DIR}\n  LIBRARY_OUTPUT_DIRECTORY ${MI_BINARY_DIR}\n  RUNTIME_OUTPUT_DIRECTORY_RELEASE ${MI_BINARY_DIR}\n  LIBRARY_OUTPUT_DIRECTORY_RELEASE ${MI_BINARY_DIR}\n  RUNTIME_OUTPUT_DIRECTORY_DEBUG ${MI_BINARY_DIR}\n  LIBRARY_OUTPUT_DIRECTORY_DEBUG ${MI_BINARY_DIR}\n  RUNTIME_OUTPUT_DIRECTORY_RELNODEBINFO ${MI_BINARY_DIR}\n  LIBRARY_OUTPUT_DIRECTORY_RELNODEBINFO ${MI_BINARY_DIR}\n  RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL ${MI_BINARY_DIR}\n  LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL ${MI_BINARY_DIR}\n)\n\ninstall(\n  TARGETS mitsuba-bin mitsuba ${MI_DEPEND}\n  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n)\n\ninstall(\n  DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/mitsuba\n  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n)\n\ninstall(\n  FILES ${TINYFORMAT_INCLUDE_DIRS}/tinyformat.h\n  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n)\n\ninstall(\n  FILES ${CMAKE_CURRENT_BINARY_DIR}/include/mitsuba/core/config.h\n  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/mitsuba/core\n)\n\nset(MI_SRGB_COEFF_FILE \"\" CACHE STRING \"Location of the spectral upsampling model file (srgb.coeff) if it should not be generated during the build.\")\nmark_as_advanced(MI_SRGB_COEFF_FILE)\nif (\"${MI_SRGB_COEFF_FILE}\" STREQUAL \"\")\n  ro_copy(${CMAKE_CURRENT_BINARY_DIR}/ext/rgb2spec/srgb.coeff data/srgb.coeff rgb2spec_opt_run)\n  if (MSVC AND MI_ENABLE_PYTHON)\n    ro_copy(${CMAKE_CURRENT_BINARY_DIR}/ext/rgb2spec/srgb.coeff python/mitsuba/data/srgb.coeff rgb2spec_opt_run)\n  endif()\nelse()\n  ro_copy(${MI_SRGB_COEFF_FILE} data/srgb.coeff)\n  if (MSVC AND MI_ENABLE_PYTHON)\n    ro_copy(${MI_SRGB_COEFF_FILE} python/mitsuba/data/srgb.coeff)\n  endif()\nendif()\ninstall(\n  FILES ${CMAKE_CURRENT_BINARY_DIR}/data/srgb.coeff\n  DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}\n)\n\nadd_custom_target(copy-resources ALL DEPENDS ${MI_COPY_FILES})\n\nfile(GLOB IOR_FILES \"${CMAKE_CURRENT_SOURCE_DIR}/resources/data/ior/*spd\")\nadd_custom_command(\n  TARGET copy-resources DEPENDS IOR_FILES\n  COMMAND ${CMAKE_COMMAND} -E copy_directory\n  \"${CMAKE_CURRENT_SOURCE_DIR}/resources/data/ior\"\n  \"${MI_BINARY_DIR}/data/ior\"\n)\nif (MSVC AND MI_ENABLE_PYTHON)\n  add_custom_command(\n    TARGET copy-resources DEPENDS IOR_FILES\n    COMMAND ${CMAKE_COMMAND} -E copy_directory\n    \"${CMAKE_CURRENT_SOURCE_DIR}/resources/data/ior\"\n    \"${MI_BINARY_DIR}/python/mitsuba/data/ior\"\n  )\nendif()\ninstall(\n  DIRECTORY ${MI_BINARY_DIR}/data/ior\n  DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}\n)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 2.138671875,
          "content": "Copyright (c) 2017 Wenzel Jakob <wenzel.jakob@epfl.ch>, All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\n   may be used to endorse or promote products derived from this software\n   without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nYou are under no obligation whatsoever to provide any bug fixes, patches, or\nupgrades to the features, functionality or performance of the source code\n(\"Enhancements\") to anyone; however, if you choose to make your Enhancements\navailable either publicly, or directly to the author of this software, without\nimposing a separate written license agreement for such Enhancements, then you\nhereby grant the following license: a non-exclusive, royalty-free perpetual\nlicense to install, use, modify, prepare derivative works, incorporate into\nother computer software, distribute, and sublicense such enhancements or\nderivative works thereof, in binary and source code form.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.4521484375,
          "content": "<!-- <img src=\"https://github.com/mitsuba-renderer/mitsuba3/raw/master/docs/images/logo_plain.png\" width=\"120\" height=\"120\" alt=\"Mitsuba logo\"> -->\n\n<img src=\"https://raw.githubusercontent.com/mitsuba-renderer/mitsuba-data/master/docs/images/banners/banner_01.jpg\"\nalt=\"Mitsuba banner\">\n\n# Mitsuba Renderer 3\n\n| Documentation  | Tutorial videos  | Linux             | MacOS             | Windows           |       PyPI        |\n|      :---:     |      :---:       |       :---:       |       :---:       |       :---:       |       :---:       |\n| [![docs][1]][2]| [![vids][9]][10] | [![rgl-ci][3]][4] | [![rgl-ci][5]][6] | [![rgl-ci][7]][8] | [![pypi][11]][12] |\n\n[1]: https://readthedocs.org/projects/mitsuba/badge/?version=stable\n[2]: https://mitsuba.readthedocs.io/en/stable/\n[3]: https://rgl-ci.epfl.ch/app/rest/builds/buildType(id:Mitsuba3_LinuxAmd64Clang10)/statusIcon.svg\n[4]: https://rgl-ci.epfl.ch/viewType.html?buildTypeId=Mitsuba3_LinuxAmd64Clang10&guest=1\n[5]: https://rgl-ci.epfl.ch/app/rest/builds/buildType(id:Mitsuba3_LinuxAmd64gcc9)/statusIcon.svg\n[6]: https://rgl-ci.epfl.ch/viewType.html?buildTypeId=Mitsuba3_LinuxAmd64gcc9&guest=1\n[7]: https://rgl-ci.epfl.ch/app/rest/builds/buildType(id:Mitsuba3_WindowsAmd64msvc2020)/statusIcon.svg\n[8]: https://rgl-ci.epfl.ch/viewType.html?buildTypeId=Mitsuba3_WindowsAmd64msvc2020&guest=1\n[9]: https://img.shields.io/badge/YouTube-View-green?style=plastic&logo=youtube\n[10]: https://www.youtube.com/watch?v=9Ja9buZx0Cs&list=PLI9y-85z_Po6da-pyTNGTns2n4fhpbLe5&index=1\n[11]: https://img.shields.io/pypi/v/mitsuba.svg?color=green\n[12]: https://pypi.org/pypi/mitsuba\n\n## Introduction\n\nMitsuba 3 is a research-oriented rendering system for forward and inverse light\ntransport simulation developed at [EPFL](https://www.epfl.ch) in Switzerland.\nIt consists of a core library and a set of plugins that implement functionality\nranging from materials and light sources to complete rendering algorithms.\n\nMitsuba 3 is *retargetable*: this means that the underlying implementations and\ndata structures can transform to accomplish various different tasks. For\nexample, the same code can simulate both scalar (classic one-ray-at-a-time) RGB transport\nor differential spectral transport on the GPU. This all builds on\n[Dr.Jit](https://github.com/mitsuba-renderer/drjit), a specialized *just-in-time*\n(JIT) compiler developed specifically for this project.\n\n## Main Features\n\n- **Cross-platform**: Mitsuba 3 has been tested on Linux (``x86_64``), macOS\n  (``aarch64``, ``x86_64``), and Windows (``x86_64``).\n\n- **High performance**: The underlying Dr.Jit compiler fuses rendering code\n  into kernels that achieve state-of-the-art performance using\n  an LLVM backend targeting the CPU and a CUDA/OptiX backend\n  targeting NVIDIA GPUs with ray tracing hardware acceleration.\n\n- **Python first**: Mitsuba 3 is deeply integrated with Python. Materials,\n  textures, and even full rendering algorithms can be developed in Python,\n  which the system JIT-compiles (and optionally differentiates) on the fly.\n  This enables the experimentation needed for research in computer graphics and\n  other disciplines.\n\n- **Differentiation**: Mitsuba 3 is a differentiable renderer, meaning that it\n  can compute derivatives of the entire simulation with respect to input\n  parameters such as camera pose, geometry, BSDFs, textures, and volumes. It\n  implements recent differentiable rendering algorithms developed at EPFL.\n\n- **Spectral & Polarization**: Mitsuba 3 can be used as a monochromatic\n  renderer, RGB-based renderer, or spectral renderer. Each variant can\n  optionally account for the effects of polarization if desired.\n\n## Tutorial videos, documentation\n\nWe've recorded several [YouTube videos][10] that provide a gentle introduction\nMitsuba 3 and Dr.Jit. Beyond this you can find complete Juypter notebooks\ncovering a variety of applications, how-to guides, and reference documentation\non [readthedocs][2].\n\n## Installation\n\nWe provide pre-compiled binary wheels via PyPI. Installing Mitsuba this way is as simple as running\n\n```bash\npip install mitsuba\n```\n\non the command line. The Python package includes thirteen variants by default:\n\n- ``scalar_rgb``\n- ``scalar_spectral``\n- ``scalar_spectral_polarized``\n- ``llvm_ad_rgb``\n- ``llvm_ad_mono``\n- ``llvm_ad_mono_polarized``\n- ``llvm_ad_spectral``\n- ``llvm_ad_spectral_polarized``\n- ``cuda_ad_rgb``\n- ``cuda_ad_mono``\n- ``cuda_ad_mono_polarized``\n- ``cuda_ad_spectral``\n- ``cuda_ad_spectral_polarized``\n\nThe scalar variants perform one-ray-at-a-time simulations, while the LLVM and CUDA \nvariants can be used for inverse rendering on the CPU or GPU respectively. To access additional \nvariants, you will need to compile a custom version of Dr.Jit using CMake. Please see the\n[documentation](https://mitsuba.readthedocs.io/en/latest/src/developer_guide/compiling.html)\nfor details on this.\n\n### Requirements\n\n- `Python >= 3.8`\n- (optional) For computation on the GPU: `Nvidia driver >= 495.89`\n- (optional) For vectorized / parallel computation on the CPU: `LLVM >= 11.1`\n\n## Usage\n\nHere is a simple \"Hello World\" example that shows how simple it is to render a\nscene using Mitsuba 3 from Python:\n\n```python\n# Import the library using the alias \"mi\"\nimport mitsuba as mi\n# Set the variant of the renderer\nmi.set_variant('scalar_rgb')\n# Load a scene\nscene = mi.load_dict(mi.cornell_box())\n# Render the scene\nimg = mi.render(scene)\n# Write the rendered image to an EXR file\nmi.Bitmap(img).write('cbox.exr')\n```\n\nTutorials and example notebooks covering a variety of applications can be found\nin the [documentation][2].\n\n## About\n\nThis project was created by [Wenzel Jakob](https://rgl.epfl.ch/people/wjakob).\nSignificant features and/or improvements to the code were contributed by\n[Sébastien Speierer](https://speierers.github.io/),\n[Nicolas Roussel](https://github.com/njroussel),\n[Merlin Nimier-David](https://merlin.nimierdavid.fr/),\n[Delio Vicini](https://dvicini.github.io/),\n[Tizian Zeltner](https://tizianzeltner.com/),\n[Baptiste Nicolet](https://bnicolet.com/),\n[Miguel Crespo](https://mcrespo.me/),\n[Vincent Leroy](https://github.com/leroyvn), and\n[Ziyi Zhang](https://github.com/ziyi-zhang).\n\nWhen using Mitsuba 3 in academic projects, please cite:\n\n```bibtex\n@software{Mitsuba3,\n    title = {Mitsuba 3 renderer},\n    author = {Wenzel Jakob and Sébastien Speierer and Nicolas Roussel and Merlin Nimier-David and Delio Vicini and Tizian Zeltner and Baptiste Nicolet and Miguel Crespo and Vincent Leroy and Ziyi Zhang},\n    note = {https://mitsuba-renderer.org},\n    version = {3.1.1},\n    year = 2022\n}\n```\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "ext",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 2.84375,
          "content": "[build-system]\nrequires = [\n    \"scikit-build-core\",\n    \"nanobind==2.2.0\",\n    \"drjit==1.0.1\",\n    \"typing_extensions>=4.12\",\n    \"hatch-fancy-pypi-readme\",\n]\nbuild-backend = \"scikit_build_core.build\"\n\n\n[project]\nname = \"Mitsuba\"\ndynamic = [\"version\", \"readme\"]\ndescription = \"Mitsuba 3: A Retargetable Forward and Inverse Renderer\"\nreadme = \"README.md\"\ndependencies = [\n  \"typing_extensions>=4.12;python_version<\\\"3.11\\\"\",\n  \"drjit==1.0.1\",\n]\nrequires-python = \">=3.8\"\nauthors = [\n    { name = \"Wenzel Jakob\", email = \"wenzel.jakob@epfl.ch\" }\n]\nclassifiers = [\n    \"License :: OSI Approved :: BSD License\"\n]\n\n[project.urls]\nHomepage = \"https://github.com/mitsuba-renderer/mitsuba3\"\n\n[project.scripts]\nmitsuba  = \"mitsuba.cli:_main\"\n\n\n[tool.scikit-build]\n# Protect the configuration against future changes in scikit-build-core\nminimum-version = \"0.4\"\n\n# Setuptools-style build caching in a local directory\nbuild-dir = \"build/{wheel_tag}\"\n\n# Tool to generate README for PyPI\nmetadata.readme.provider = \"scikit_build_core.metadata.fancy_pypi_readme\"\n\ncmake.verbose = true\nlogging.level = \"INFO\"\n\n\n[tool.cibuildwheel]\n# Necessary to see build output from the actual compilation\nbuild-verbosity = 1\n\nbuild = [\"cp38-*\", \"cp39-*\", \"cp310-*\", \"cp311-*\", \"cp312-*\", \"cp313-*\"]\narchs = [\"auto64\"]\nskip = \"*-musllinux* pp*\"\n\n# Try to import the package to see if it was built correctly (compromise)\ntest-command = [\"python -c \\\"import mitsuba as mi; mi.set_variant('scalar_rgb')\\\"\"]\n\n# Needed for full C++17 support\n[tool.cibuildwheel.macos.environment]\nMACOSX_DEPLOYMENT_TARGET = \"10.14\"\n\n[tool.cibuildwheel.macos]\nrepair-wheel-command = \"delocate-wheel --require-archs {delocate_archs} -w {dest_dir} --ignore-missing-dependencies {wheel}\"\n\n[tool.cibuildwheel.linux]\nbefore-all = \"yum install -y libatomic\"\n\nrepair-wheel-command = \"pip install wheel>=0.40; new_whl_name=$(python -m wheel tags --platform-tag manylinux_2_17_x86_64.manylinux2014_x86_64 {wheel} | tail -1 | cat); cp $(dirname {wheel})/$new_whl_name {dest_dir}\"\n\n[tool.pytest.ini_options]\nnorecursedirs = [ \"ext\" ]\n\n\n[tool.scikit-build.metadata.version]\n# Fetch version number from header file\nprovider = \"scikit_build_core.metadata.regex\"\ninput = \"include/mitsuba/mitsuba.h\"\nregex = '''(?sx)\n\\#define \\s+ MI_VERSION_MAJOR \\s+ (?P<major>\\d+) .*?\n\\#define \\s+ MI_VERSION_MINOR \\s+ (?P<minor>\\d+) .*?\n\\#define \\s+ MI_VERSION_PATCH \\s+ (?P<patch>\\d+) .*?\n'''\nresult = \"{major}.{minor}.{patch}\"\n\n# Build PyPI compliant README file from original README.md\n[tool.hatch.metadata.hooks.fancy-pypi-readme]\ncontent-type = \"text/markdown\"\n\n[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]\ntext = '''\n![Mitsuba banner](https://raw.githubusercontent.com/mitsuba-renderer/mitsuba-data/master/docs/images/banners/banner_01.jpg)\n'''\n\n[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]\npath = \"README.md\"\nstart-after = \"Mitsuba banner\\\">\\n\"\npattern = \"(.*)\"\n"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.599609375,
          "content": "# -*- coding: utf-8 -*-\n\nfrom __future__ import print_function\n\nimport sys, re, os, pathlib\n\ntry:\n    from skbuild import setup\n    import pybind11\nexcept ImportError:\n    print(\"The preferred way to invoke 'setup.py' is via pip, as in 'pip \"\n          \"install .'. If you wish to run the setup script directly, you must \"\n          \"first install the build dependencies listed in pyproject.toml!\",\n          file=sys.stderr)\n    raise\n\nthis_directory = os.path.abspath(os.path.dirname(__file__))\n\nwith open(os.path.join(this_directory, \"include/mitsuba/mitsuba.h\")) as f:\n    mi_version_regex = re.compile(\n        r\"^\\s*#\\s*define\\s+MI_VERSION_([A-Z]+)\\s+(.*)$\", re.MULTILINE)\n    matches = dict(mi_version_regex.findall(f.read()))\n    mitsuba_version = \"{MAJOR}.{MINOR}.{PATCH}\".format(**matches)\n\nwith open(os.path.join(this_directory, \"ext/drjit/include/drjit/fwd.h\")) as f:\n    drjit_version_regex = re.compile(\n        r\"^\\s*#\\s*define\\s+DRJIT_VERSION_([A-Z]+)\\s+(.*)$\", re.MULTILINE)\n    matches = dict(drjit_version_regex.findall(f.read()))\n    drjit_version = \"{MAJOR}.{MINOR}.{PATCH}\".format(**matches)\n\nwith open(os.path.join(this_directory, 'README.md'), encoding='utf-8') as f:\n    long_description = f.read()\n\nlong_description = long_description[long_description.find('## Introduction'):]\nmi_cmake_toolchain_file = os.environ.get(\"MI_CMAKE_TOOLCHAIN_FILE\", \"\")\nmi_drjit_cmake_dir = os.environ.get(\"MI_DRJIT_CMAKE_DIR\", \"\")\nmi_srgb_coeff_file = os.environ.get(\"MI_SRGB_COEFF_FILE\", \"\")\nmi_python_stubs_dir = os.environ.get(\"MI_PYTHON_STUBS_DIR\", \"\")\npathlib.Path(\"./mitsuba\").mkdir(exist_ok=True)\n\nsetup(\n    name=\"mitsuba\",\n    version=mitsuba_version,\n    author=\"Realistic Graphics Lab (RGL), EPFL\",\n    author_email=\"wenzel.jakob@epfl.ch\",\n    description=\"3: A Retargetable Forward and Inverse Renderer\",\n    url=\"https://github.com/mitsuba-renderer/mitsuba3\",\n    license=\"BSD\",\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    cmake_args=[\n        '-DCMAKE_INSTALL_LIBDIR=mitsuba',\n        '-DCMAKE_INSTALL_BINDIR=mitsuba',\n        '-DCMAKE_INSTALL_INCLUDEDIR=mitsuba/include',\n        '-DCMAKE_INSTALL_DATAROOTDIR=mitsuba/data',\n        f'-DCMAKE_TOOLCHAIN_FILE={mi_cmake_toolchain_file}',\n        f'-DMI_DRJIT_CMAKE_DIR:STRING={mi_drjit_cmake_dir}',\n        f'-DMI_SRGB_COEFF_FILE:STRING={mi_srgb_coeff_file}',\n        f'-DMI_PYTHON_STUBS_DIR:STRING={mi_python_stubs_dir}'\n    ],\n    install_requires=[f\"drjit=={drjit_version}\"],\n    packages=['mitsuba'],\n    entry_points={\n        'console_scripts': [\n            'mitsuba = mitsuba.cli:_main',\n        ]\n    },\n    python_requires=\">=3.8\"\n)\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tutorials",
          "type": "commit",
          "content": null
        }
      ]
    }
  ]
}