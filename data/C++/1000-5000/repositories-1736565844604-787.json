{
  "metadata": {
    "timestamp": 1736565844604,
    "page": 787,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "simplefoc/Arduino-FOC",
      "stars": 2146,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 1.54296875,
          "content": "cff-version: 1.0.0\nmessage: \"If you use this software, please cite it as below.\"\nauthors:\n- family-names: \"Skuric\"\n  given-names: \"Antun\"\n  orcid: \"https://orcid.org/0000-0002-3323-4482\"\n- family-names: \"Bank\"\n  given-names: \"Hasan Sinan\"\n  orcid: \"https://orcid.org/0000-0002-0626-2664\"  \n- family-names: \"Unger\"\n  given-names: \"Richard\"  \n- family-names: \"Williams\"\n  given-names: \"Owen\"  \n- family-names: \"González-Reyes\"\n  given-names: \"David\"\n  orcid: \"https://orcid.org/0000-0002-1535-3007\"\ntitle: \"SimpleFOC: A Field Oriented Control (FOC) Library for Controlling Brushless Direct Current (BLDC) and Stepper Motors\"\nversion: 2.2.2\ndoi: 10.21105/joss.04232\ndate-released: 2022-06-26\nurl: \"https://github.com/simplefoc/Arduino-FOC\"\n\npreferred-citation:\n  type: article\n  authors:\n  - family-names: \"Skuric\"\n    given-names: \"Antun\"\n    orcid: \"https://orcid.org/0000-0002-3323-4482\"\n  - family-names: \"Bank\"\n    given-names: \"Hasan Sinan\"\n    orcid: \"https://orcid.org/0000-0002-0626-2664\"  \n  - family-names: \"Unger\"\n    given-names: \"Richard\"  \n  - family-names: \"Williams\"\n    given-names: \"Owen\"  \n  - family-names: \"González-Reyes\"\n    given-names: \"David\"\n    orcid: \"https://orcid.org/0000-0002-1535-3007\"\n  doi: \"10.21105/joss.04232\"\n  journal: \"Journal of Open Source Software\"\n  url: \"https://doi.org/10.21105/joss.04232\"\n  month: 6\n  start: 4232 # First page number\n  end: 4232 # Last page number\n  title: \"SimpleFOC: A Field Oriented Control (FOC) Library for Controlling Brushless Direct Current (BLDC) and Stepper Motors\"\n  volume: 7\n  issue: 74\n  year: 2022\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.09765625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\ninfo@simplefoc.com.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2020 Antun Skuric\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.03515625,
          "content": "# SimpleFOClibrary - **Simple** Field Oriented Control (FOC) **library** <br> \n### A Cross-Platform FOC implementation for BLDC and Stepper motors<br> based on the Arduino IDE and PlatformIO \n\n[![AVR build](https://github.com/simplefoc/Arduino-FOC/actions/workflows/arduino.yml/badge.svg)](https://github.com/simplefoc/Arduino-FOC/actions/workflows/arduino.yml)\n[![STM32 build](https://github.com/simplefoc/Arduino-FOC/actions/workflows/stm32.yml/badge.svg)](https://github.com/simplefoc/Arduino-FOC/actions/workflows/stm32.yml)\n[![ESP32 build](https://github.com/simplefoc/Arduino-FOC/actions/workflows/esp32.yml/badge.svg)](https://github.com/simplefoc/Arduino-FOC/actions/workflows/esp32.yml)\n[![RP2040 build](https://github.com/simplefoc/Arduino-FOC/actions/workflows/rpi.yml/badge.svg)](https://github.com/simplefoc/Arduino-FOC/actions/workflows/rpi.yml)\n[![SAMD build](https://github.com/simplefoc/Arduino-FOC/actions/workflows/samd.yml/badge.svg)](https://github.com/simplefoc/Arduino-FOC/actions/workflows/samd.yml)\n[![Teensy build](https://github.com/simplefoc/Arduino-FOC/actions/workflows/teensy.yml/badge.svg)](https://github.com/simplefoc/Arduino-FOC/actions/workflows/teensy.yml) \n\n![GitHub release (latest by date)](https://img.shields.io/github/v/release/simplefoc/arduino-foc)\n![GitHub Release Date](https://img.shields.io/github/release-date/simplefoc/arduino-foc?color=blue)\n![GitHub commits since tagged version](https://img.shields.io/github/commits-since/simplefoc/arduino-foc/latest/dev)\n![GitHub commit activity (branch)](https://img.shields.io/github/commit-activity/m/simplefoc/arduino-foc/dev)\n\n[![arduino-library-badge](https://ardubadge.simplefoc.com?lib=Simple%20FOC)](https://www.ardu-badge.com/badge/Simple%20FOC.svg)\n[![PlatformIO Registry](https://badges.registry.platformio.org/packages/askuric/library/Simple%20FOC.svg)](https://registry.platformio.org/libraries/askuric/Simple%20FOC)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![status](https://joss.theoj.org/papers/4382445f249e064e9f0a7f6c1bb06b1d/status.svg)](https://joss.theoj.org/papers/4382445f249e064e9f0a7f6c1bb06b1d)\n\n\nWe live in very exciting times 😃! BLDC motors are entering the hobby community more and more and many great projects have already emerged leveraging their far superior dynamics and power capabilities. BLDC motors have numerous advantages over regular DC motors but they have one big disadvantage, the complexity of control. Even though it has become relatively easy to design and manufacture PCBs and create our own hardware solutions for driving BLDC motors the proper low-cost solutions are yet to come. One of the reasons for this is the apparent complexity of writing the BLDC driving algorithms, Field oriented control (FOC) being an example of one of the most efficient ones.\nThe solutions that can be found on-line are almost exclusively very specific for certain hardware configuration and the microcontroller architecture used.\nAdditionally, most of the efforts at this moment are still channeled towards the high-power applications of the BLDC motors and proper low-cost and low-power FOC supporting boards are very hard to find today and even may not exist. <br>\nTherefore this is an attempt to: \n- 🎯 Demystify FOC algorithm and make a robust but simple Arduino library: [Arduino *SimpleFOClibrary*](https://docs.simplefoc.com/arduino_simplefoc_library_showcase)\n  - <i>Support as many <b>motor + sensor + driver + mcu</b> combinations out there</i>\n- 🎯 Develop modular and easy to use FOC supporting BLDC driver boards\n   - For official driver boards see [<span class=\"simple\">Simple<span class=\"foc\">FOC</span>Boards</span>](https://docs.simplefoc.com/boards)\n   - Many many more boards developed by the community members, see [<span class=\"simple\">Simple<span class=\"foc\">FOC</span>Community</span>](https://community.simplefoc.com/)\n\n> NEXT RELEASE 📢 : <span class=\"simple\">Simple<span class=\"foc\">FOC</span>library</span> v2.3.4\n> - ESP32 MCUs extended support [#414](https://github.com/simplefoc/Arduino-FOC/pull/414)\n>   - Transition to the arduino-esp32 version v3.x (ESP-IDF v5.x) [#387](https://github.com/espressif/arduino-esp32/releases)\n>   - New support for MCPWM driver\n>   - New support for LEDC drivers - center-aligned PWM and 6PWM available \n>   - Rewritten and simplified the fast ADC driver code (`adcRead`) - for low-side and inline current sensing.\n> - Stepper motors current sensing support [#421](https://github.com/simplefoc/Arduino-FOC/pull/421)\n>   - Support for current sensing (low-side and inline) - [see in docs](https://docs.simplefoc.com/current_sense)\n>   - Support for true FOC control - `foc_current` torque control - [see in docs](https://docs.simplefoc.com/motion_control)\n> - New current sense alignment procedure  [#422](https://github.com/simplefoc/Arduino-FOC/pull/422) - [see in docs](https://docs.simplefoc.com/current_sense_align)\n>   - Support for steppers\n>   - Much more robust and reliable\n>   - More verbose and informative \n> - Support for HallSensors without interrupts [#424](https://docs.simplefoc.com/https://github.com/simplefoc/Arduino-FOC/pull/424) - [see in docs](hall_sensors) \n> - Docs\n>   - A short guide to debugging of common issues\n>   - A short guide to the units in the library - [see in docs](https://docs.simplefoc.com/library_units)\n> - See the complete list of bugfixes and new features of v2.3.4 [fixes and PRs](https://github.com/simplefoc/Arduino-FOC/milestone/11) \n\n\n## Arduino *SimpleFOClibrary* v2.3.4\n\n<p align=\"\">\n<a href=\"https://youtu.be/Y5kLeqTc6Zk\">\n<img src=\"https://docs.simplefoc.com/extras/Images/youtube.png\"  height=\"320px\">\n</a>\n</p>\n\nThis video demonstrates the *Simple**FOC**library* basic usage, electronic connections and shows its capabilities.\n\n### Features\n- **Easy install**: \n   - Arduino IDE: Arduino Library Manager integration\n   - PlatformIO\n- **Open-Source**: Full code and documentation available on github\n- **Goal**: \n   - Support as many [sensor](https://docs.simplefoc.com/position_sensors) + [motor](https://docs.simplefoc.com/motors) + [driver](https://docs.simplefoc.com/drivers) + [current sense](https://docs.simplefoc.com/current_sense)   combination as possible.\n   - Provide the up-to-date and in-depth documentation with API references and the examples\n- **Easy to setup and configure**: \n   - Easy hardware configuration \n   - Each hardware component is a C++ object (easy to understand) \n   - Easy [tuning the control loops](https://docs.simplefoc.com/motion_control)\n   - [*Simple**FOC**Studio*](https://docs.simplefoc.com/studio) configuration GUI tool\n   - Built-in communication and monitoring\n- **Cross-platform**:\n   - Seamless code transfer from one microcontroller family to another \n   - Supports multiple [MCU architectures](https://docs.simplefoc.com/microcontrollers):\n      - Arduino: UNO R4, UNO, MEGA, DUE, Leonardo, Nano, Nano33 ....\n      - STM32\n      - ESP32\n      - Teensy\n      - many more ...\n\n<p align=\"\"> <img src=\"https://docs.simplefoc.com/extras/Images/uno_l6234.jpg\"  height=\"170px\">  <img src=\"https://docs.simplefoc.com/extras/Images/hmbgc_v22.jpg\" height=\"170px\">  <img src=\"https://docs.simplefoc.com/extras/Images/foc_shield_v13.jpg\"  height=\"170px\"></p>\n\n\n## Documentation\nFull API code documentation as well as example projects and step by step guides can be found on our [docs website](https://docs.simplefoc.com/).\n\n![image](https://user-images.githubusercontent.com/36178713/168475410-105e4e3d-082a-4015-98ff-d380c7992dfd.png)\n\n\n## Getting Started\nDepending on if you want to use this library as the plug and play Arduino library or you want to get insight in the algorithm and make changes there are two ways to install this code.\n\n- Full library installation [Docs](https://docs.simplefoc.com/library_download)\n- PlatformIO [Docs](https://docs.simplefoc.com/library_platformio)\n\n### Arduino *SimpleFOClibrary* installation to Arduino IDE\n#### Arduino Library Manager \nThe simplest way to get hold of the library is directly by using Arduino IDE and its integrated Library Manager. \n- Open Arduino IDE and start Arduino Library Manager by clicking: `Tools > Manage Libraries...`.\n- Search for `Simple FOC` library and install the latest version.\n- Reopen Arduino IDE and you should have the library examples in `File > Examples > Simple FOC`.\n\n#### Using Github website \n- Go to the [github repository](https://github.com/simplefoc/Arduino-FOC)\n- Click first on `Clone or Download > Download ZIP`. \n- Unzip it and place it in `Arduino Libraries` folder. Windows: `Documents > Arduino > libraries`.  \n- Reopen Arduino IDE and you should have the library examples in `File > Examples > Simple FOC`.\n\n#### Using terminal\n- Open terminal and run\n```sh  \ncd #Arduino libraries folder\ngit clone https://github.com/simplefoc/Arduino-FOC.git\n```\n- Reopen Arduino IDE and you should have the library examples in `File > Examples > Simple FOC`.\n\n## Community and contributing\n\nFor all the questions regarding the potential implementation, applications, supported hardware and similar please visit our [community forum](https://community.simplefoc.com) or our [discord server](https://discord.gg/kWBwuzY32n).\n\nIt is always helpful to hear the stories/problems/suggestions of people implementing the code and you might find a lot of answered questions there already! \n\n### Github Issues & Pull requests\n\nPlease do not hesitate to leave an issue if you have problems/advices/suggestions regarding the code!\n\nPull requests are welcome, but let's first discuss them in [community forum](https://community.simplefoc.com)!\n\nIf you'd like to contribute to this project but you are not very familiar with github, don't worry, let us know either by posting at the community forum , by posting a github issue or at our discord server.\n\nIf you are familiar, we accept pull requests to the dev branch!\n\n## Arduino code example\nThis is a simple Arduino code example implementing the velocity control program of a BLDC motor with encoder. \n\nNOTE: This program uses all the default control parameters.\n\n```cpp\n#include <SimpleFOC.h>\n\n//  BLDCMotor( pole_pairs )\nBLDCMotor motor = BLDCMotor(11);\n//  BLDCDriver( pin_pwmA, pin_pwmB, pin_pwmC, enable (optional) )\nBLDCDriver3PWM driver = BLDCDriver3PWM(9, 10, 11, 8);\n//  Encoder(pin_A, pin_B, CPR)\nEncoder encoder = Encoder(2, 3, 2048);\n// channel A and B callbacks\nvoid doA(){encoder.handleA();}\nvoid doB(){encoder.handleB();}\n\n\nvoid setup() {  \n  // initialize encoder hardware\n  encoder.init();\n  // hardware interrupt enable\n  encoder.enableInterrupts(doA, doB);\n  // link the motor to the sensor\n  motor.linkSensor(&encoder);\n  \n  // power supply voltage [V]\n  driver.voltage_power_supply = 12;\n  // initialise driver hardware\n  driver.init();\n  // link driver\n  motor.linkDriver(&driver);\n\n  // set control loop type to be used\n  motor.controller = MotionControlType::velocity;\n  // initialize motor\n  motor.init();\n  \n  // align encoder and start FOC\n  motor.initFOC();\n}\n\nvoid loop() {\n  // FOC algorithm function\n  motor.loopFOC();\n\n  // velocity control loop function\n  // setting the target velocity or 2rad/s\n  motor.move(2);\n}\n```\nYou can find more details in the [SimpleFOC documentation](https://docs.simplefoc.com/).\n\n## Example projects\nHere are some of the *Simple**FOC**library* and *Simple**FOC**Shield* application examples. \n<p align=\"center\">\n<a href=\"https://youtu.be/Ih-izQyXJCI\">\n<img src=\"https://docs.simplefoc.com/extras/Images/youtube_pendulum.png\"  height=\"200px\" >\n</a>\n<a href=\"https://youtu.be/xTlv1rPEqv4\">\n<img src=\"https://docs.simplefoc.com/extras/Images/youtube_haptic.png\"  height=\"200px\" >\n</a>\n<a href=\"https://youtu.be/RI4nNMF608I\">\n<img src=\"https://docs.simplefoc.com/extras/Images/youtube_drv8302.png\"  height=\"200px\" >\n</a>\n<a href=\"https://youtu.be/zcb86TRxTxc\">\n<img src=\"https://docs.simplefoc.com/extras/Images/youtube_stepper.png\"  height=\"200px\" >\n</a>\n</p>\n\n\n## Citing the *SimpleFOC* \n\nWe are very happy that *Simple**FOC**library* has been used as a component of several research project and has made its way to several scientific papers.  We are hoping that this trend is going to continue as the project matures and becomes more robust! \nA short resume paper about *Simple**FOC*** has been published in the Journal of Open Source Software: \n<p>\n  <b><i>SimpleFOC</i></b>: A Field Oriented Control (FOC) Library for Controlling Brushless Direct Current (BLDC) and Stepper Motors.<br>\n  A. Skuric, HS. Bank, R. Unger, O. Williams, D. González-Reyes<br>\nJournal of Open Source Software, 7(74), 4232, https://doi.org/10.21105/joss.04232\n</p>\n\nIf you are interested in citing  *Simple**FOC**library* or some other component of *Simple**FOC**project* in your research, we suggest you to cite our paper:\n\n```bib\n@article{simplefoc2022,\n  doi = {10.21105/joss.04232},\n  url = {https://doi.org/10.21105/joss.04232},\n  year = {2022},\n  publisher = {The Open Journal},\n  volume = {7},\n  number = {74},\n  pages = {4232},\n  author = {Antun Skuric and Hasan Sinan Bank and Richard Unger and Owen Williams and David González-Reyes},\n  title = {SimpleFOC: A Field Oriented Control (FOC) Library for Controlling Brushless Direct Current (BLDC) and Stepper Motors},\n  journal = {Journal of Open Source Software}\n}\n\n```\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "keywords.txt",
          "type": "blob",
          "size": 4.748046875,
          "content": "ArduinoFOC\tKEYWORD1\nSimpleFOC\tKEYWORD1\nBLDCMotor\tKEYWORD1\nFOCMotor\tKEYWORD1\nStepperMotor\tKEYWORD1\nEncoder\tKEYWORD1\nHallSensors\tKEYWORD1\nMagneticSensorSPI\tKEYWORD1\nMagneticSensorI2C\tKEYWORD1\nMagneticSensorAnalog\tKEYWORD1\nMagneticSensorPWM\tKEYWORD1\nBLDCDriver3PWM\tKEYWORD1    \nBLDCDriver6PWM\tKEYWORD1    \nBLDCDriver\tKEYWORD1    \nStepperDriver4PWM\tKEYWORD1    \nStepperDriver2PWM\tKEYWORD1    \nStepperDriver\tKEYWORD1   \nPIDController\tKEYWORD1    \nLowPassFilter\tKEYWORD1   \nInlineCurrentSense\tKEYWORD1   \nLowsideCurrentSense\tKEYWORD1   \nCurrentSense\tKEYWORD1   \nCommander\tKEYWORD1   \nStepDirListener\tKEYWORD1   \nGenericCurrentSense\tKEYWORD1   \nGenericSensor\tKEYWORD1   \nSimpleFOCDebug\tKEYWORD1   \n\ninitFOC\tKEYWORD2\nloopFOC\tKEYWORD2\ndisable\tKEYWORD2\n\n_delay\tKEYWORD3\n_sqrt\tKEYWORD3\n_micros\tKEYWORD3\n_sin\tKEYWORD3\n_cos\tKEYWORD3\n_setPwmFrequency\tKEYWORD3\n_writeDutyCycle\tKEYWORD3\n_round\tKEYWORD3\n_sign\tKEYWORD3\n_constrain\tKEYWORD3\nmonitor\tKEYWORD3\ncommand\tKEYWORD3\n\nPID_velocity\tKEYWORD2\nPID_current_q\tKEYWORD2\nPID_current_d\tKEYWORD2\nLPF_velocity\tKEYWORD2\nLPF_current_q\tKEYWORD2\nLPF_current_d\tKEYWORD2\nP_angle\tKEYWORD2\nLPF_angle\tKEYWORD2\nlpf_a\tKEYWORD2\nlpf_b\tKEYWORD2\nlpf_c\tKEYWORD2\n\nMotionControlType\tKEYWORD1\nTorqueControlType\tKEYWORD1\nFOCModulationType\tKEYWORD2\nQuadrature\tKEYWORD1\nPullup\tKEYWORD1\nDirection\tKEYWORD1\nMagneticSensorI2CConfig_s\tKEYWORD1\nMagneticSensorSPIConfig_s\tKEYWORD1\nDQVoltage_s\tKEYWORD1\nDQCurrent_s\tKEYWORD1\nPhaseCurrent_s\tKEYWORD1\n\nlinkDriver\tKEYWORD2\nlinkSensor\tKEYWORD2\nlinkCurrentSense\tKEYWORD2\nhandleA\tKEYWORD2\nhandleB\tKEYWORD2\nhandleIndex\tKEYWORD2\nhandleC\tKEYWORD2\nenableInterrupts\tKEYWORD2\nISR\tKEYWORD2\ngetVelocity\tKEYWORD2\nsetPhaseVoltage\tKEYWORD2\ngetAngle\tKEYWORD2\ngetMechanicalAngle\tKEYWORD2\ngetSensorAngle\tKEYWORD2\nupdate\tKEYWORD2\nneedsSearch\tKEYWORD2\nuseMonitoring\tKEYWORD2\nangleOpenloop\tKEYWORD2\nvelocityOpenloop\tKEYWORD2\ngetPhaseCurrents\tKEYWORD2\ngetFOCCurrents\tKEYWORD2\ngetDCCurrent\tKEYWORD2\nsetPwm\tKEYWORD2\ndriverAlign\tKEYWORD2\nlinkDriver\tKEYWORD2\nadd\tKEYWORD2\nrun\tKEYWORD2\nattach\tKEYWORD2\nenableInterrupt\tKEYWORD2\ngetValue\tKEYWORD2\nhandle\tKEYWORD2\nscalar\tKEYWORD2\npid\tKEYWORD2\nlpf\tKEYWORD2\nmotor\tKEYWORD2\nhandlePWM\tKEYWORD2\nenableInterrupt\tKEYWORD2\nreadCallback\tKEYWORD2\ninitCallback\tKEYWORD2\n\n\n\ncurrent\tKEYWORD2\ncurrent_measured\tKEYWORD2\nshaft_angle_sp\tKEYWORD2\nelectrical_angle\tKEYWORD2\nshaft_velocity_sp\tKEYWORD2\nshaft_angle\tKEYWORD2\nshaft_velocity\tKEYWORD2\ntorque_controller\tKEYWORD2\ncontroller\tKEYWORD2\npullup\tKEYWORD2\nquadrature\tKEYWORD2\nfoc_modulation\tKEYWORD2\ntarget\tKEYWORD2\nmotion\tKEYWORD2\npwm_frequency\tKEYWORD2\ndead_zone\tKEYWORD2\ngain_a\tKEYWORD2\ngain_b\tKEYWORD2\ngain_c\tKEYWORD2\nskip_align\tKEYWORD2\nsensor_direction\tKEYWORD2\nsensor_offset\tKEYWORD2\nzero_electric_angle\tKEYWORD2\nverbose\tKEYWORD2\nverboseMode\tKEYWORD1\ndecimal_places\tKEYWORD2\nphase_resistance\tKEYWORD2\nphase_inductance\tKEYWORD2\nmodulation_centered\tKEYWORD2\n\n\n\nvoltage\tKEYWORD2\nvelocity\tKEYWORD2\nvelocity_openloop\tKEYWORD2\nangle\tKEYWORD2\nangle_openloop\tKEYWORD2\ntorque\tKEYWORD2\ndc_current\tKEYWORD2\nfoc_current\tKEYWORD2\n\n\nON\tKEYWORD2\nOFF\tKEYWORD2\nCW\tKEYWORD2\nCCW\tKEYWORD2\nUNKNOWN\tKEYWORD2\n\nP\tKEYWORD2\nI\tKEYWORD2\nD\tKEYWORD2\nTf\tKEYWORD2\nvoltage_limit\tKEYWORD2\ncurrent_limit\tKEYWORD2\noutput_ramp\tKEYWORD2\nlimit\tKEYWORD2\nvelocity_limit\tKEYWORD2\nvoltage_power_supply\tKEYWORD2\nvoltage_sensor_align\tKEYWORD2\nvelocity_index_search\tKEYWORD2\nmonitor_downsample\tKEYWORD2\nmonitor_start_char\tKEYWORD2\nmonitor_end_char\tKEYWORD2\nmonitor_separator\tKEYWORD2\nmonitor_decimals\tKEYWORD2\nmonitor_variables\tKEYWORD2\nmotion_downsample\tKEYWORD2\n\npinA\tKEYWORD2\npinB\tKEYWORD2\npinC\tKEYWORD2\nindex_pin\tKEYWORD2\n\nUSE_INTERN\tKEYWORD2\nUSE_EXTERN\tKEYWORD2\nDISABLE\tKEYWORD2\nENABLE\tKEYWORD2\nSpaceVectorPWM\tKEYWORD2\nSinePWM\tKEYWORD2\nTrapezoid_120\tKEYWORD2\nTrapezoid_150\tKEYWORD2\n\npwmA\tKEYWORD2\npwmB\tKEYWORD2\npwmC\tKEYWORD2\npwm1A\tKEYWORD2\npwm1B\tKEYWORD2\npwm2A\tKEYWORD2\npwm2B\tKEYWORD2\nUalpha\tKEYWORD2\nUbeta\tKEYWORD2\nUa\tKEYWORD2\nUb\tKEYWORD2\nUc\tKEYWORD2\nenable_pin\tKEYWORD2\nenable_pin1\tKEYWORD2\nenable_pin2\tKEYWORD2\npole_pairs\tKEYWORD2\ndc_a\tKEYWORD2\ndc_b\tKEYWORD2\ndc_c\tKEYWORD2\n\nDEF_POWER_SUPPLY\tLITERAL1\nDEF_PID_VEL_P\tLITERAL1\nDEF_PID_VEL_I\tLITERAL1\nDEF_PID_VEL_D\tLITERAL1\nDEF_PID_VEL_RAMP\tLITERAL1\nDEF_P_ANGLE_P\tLITERAL1\nDEF_PID_VEL_LIMIT\tLITERAL1\nDEF_INDEX_SEARCH_TARGET_VELOCITY\tLITERAL1\nDEF_VOLTAGE_SENSOR_ALIGN\tLITERAL1\nDEF_VEL_FILTER_Tf\tLITERAL1\nDEF_CURRENT_LIM\tLITERAL1\nDEF_CURR_FILTER_Tf\tLITERAL1\nDEF_PID_CURR_LIMIT\tLITERAL1\nDEF_PID_CURR_RAMP\tLITERAL1\nDEF_PID_CURR_D\tLITERAL1\nDEF_PID_CURR_I\tLITERAL1\nDEF_PID_CURR_P\tLITERAL1\n_2_SQRT3\tLITERAL1\n_1_SQRT3\tLITERAL1\n_SQRT3_2\tLITERAL1\n_SQRT2\tLITERAL1\n_120_D2R\tLITERAL1\n_PI_2\tLITERAL1\n_PI_6\tLITERAL1\n_2PI\tLITERAL1\n_3PI_2\tLITERAL1\n_PI_3\tLITERAL1\n_SQRT3\tLITERAL1\n_PI\tLITERAL1\n_HIGH_Z\tLITERAL1\n_NC\tLITERAL1\n\n_MON_TARGET\tLITERAL1\n_MON_VOLT_Q\tLITERAL1\n_MON_VOLT_D\tLITERAL1\n_MON_CURR_Q\tLITERAL1\n_MON_CURR_D\tLITERAL1\n_MON_VEL\tLITERAL1\n_MON_ANGLE\tLITERAL1"
        },
        {
          "name": "library.json",
          "type": "blob",
          "size": 0.0498046875,
          "content": "{\n    \"build\": {\n      \"libArchive\": false\n    }\n}\n"
        },
        {
          "name": "library.properties",
          "type": "blob",
          "size": 0.634765625,
          "content": "name=Simple FOC\nversion=2.3.4\nauthor=Simplefoc <info@simplefoc.com>\nmaintainer=Simplefoc <info@simplefoc.com>\nsentence=A library demistifying FOC for BLDC motors\nparagraph=Simple library intended for hobby comunity to run the BLDC and Stepper motor using FOC algorithm. It is intended to support as many BLDC/Stepper motor+sensor+driver combinations as possible and in the same time maintain simplicity of usage. Library supports Arudino devices such as Arduino UNO, MEGA, NANO and similar, stm32 boards such as Nucleo and Bluepill, ESP32 and Teensy boards.\ncategory=Device Control\nurl=https://docs.simplefoc.com\narchitectures=*\nincludes=SimpleFOC.h\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}