{
  "metadata": {
    "timestamp": 1736565663120,
    "page": 559,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "libgdx/packr",
      "stars": 2581,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0693359375,
          "content": "# Grade build directories\n.gradle\nbuild/\n\n# Jetbrains products\n/.idea/\n"
        },
        {
          "name": ".gitlab-ci.yml",
          "type": "blob",
          "size": 1.5439453125,
          "content": "stages:\n  - publish_launcher\n  - build\n  - publish\n\npublishWindowsExecutable:\n  stage: publish_launcher\n  tags:\n    - windows\n  script:\n    - cmd.exe \"/c gradlew --no-daemon -i --no-build-cache clean PackrLauncher:publish\"\n\npublishLinuxExecutable:\n  stage: publish_launcher\n  tags:\n    - ubuntu\n  script:\n    - ./gradlew --no-daemon -i --no-build-cache clean PackrLauncher:publish\n\npublishOsxExecutable:\n  stage: publish_launcher\n  tags:\n    - osx\n  script:\n    - ./gradlew --no-daemon -i --no-build-cache clean PackrLauncher:publish\n\nbuildWindows:\n  stage: build\n  needs: [ \"publishWindowsExecutable\", \"publishLinuxExecutable\", \"publishOsxExecutable\" ]\n  tags:\n    - windows\n  script:\n    - cmd.exe \"/c gradlew --no-daemon -i --no-build-cache --refresh-dependencies clean build\"\n  artifacts:\n    when: always\n    reports:\n      junit: ./**/build/test-results/test/**/TEST-*.xml\n\nbuildMac:\n  stage: build\n  needs: [ \"publishWindowsExecutable\", \"publishLinuxExecutable\", \"publishOsxExecutable\" ]\n  tags:\n    - osx\n  script:\n    - ./gradlew --no-daemon -i --no-build-cache --refresh-dependencies clean build\n  artifacts:\n    when: always\n    reports:\n      junit: ./**/build/test-results/test/**/TEST-*.xml\n\npublishLinux:\n  stage: publish\n  needs: [ \"publishWindowsExecutable\", \"publishLinuxExecutable\", \"publishOsxExecutable\" ]\n  tags:\n    - ubuntu\n  script:\n    - ./gradlew --no-daemon -i --no-build-cache --refresh-dependencies clean build publish\n  artifacts:\n    when: always\n    reports:\n      junit: ./**/build/test-results/test/**/TEST-*.xml\n\nafter_script:\n  - echo \"End CI\"\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.1962890625,
          "content": "Mario Zechner, badlogic, contact at badlogicgames dot com\nDaniel Ludwig, code-disaster, codi at code-disaster dot com\nKarl Sabo, Nimbly Games, karl@nimblygames.com\npetoncle, albert.petoncle47@gmail.com"
        },
        {
          "name": "DrOpt",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Packr",
          "type": "tree",
          "content": null
        },
        {
          "name": "PackrAllTestApp",
          "type": "tree",
          "content": null
        },
        {
          "name": "PackrLauncher",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.1767578125,
          "content": "# About\nPackages your JAR, assets and a JVM for distribution on Windows, Linux and macOS, adding a native executable file to make it appear like a native app. Packr is most suitable for GUI applications, such as games made with [libGDX](https://libgdx.com/).\n\nOn the topic of games, Packr version 2.4.2+ supports Java 14 and the [Z garbage collector](https://wiki.openjdk.java.net/display/zgc/Main) has been verified to work. Because who doesn't want GC pause times guaranteed to not exceed 10ms with work in progress for sub 1ms GC pauses. When bundling Java 14+ make sure to use `--useZgcIfSupportedOs` instead of passing `--vmargs XX:+UseZGC` because versions of Windows before Windows 10 1803 are not supported by the Z garbage collector.\n\nStarting with Java 14, there's a new tool that is included with the JDK called [jpackage](https://docs.oracle.com/en/java/javase/14/jpackage/packaging-overview.html). There's a lot of overlap between jpackage and packr. Considering jpackage is supported by the broader OpenJDK community, it's worth looking into. It might be a better solution for your product. There's also [Conveyor](https://www.hydraulic.software/) which can build self-updating packages, do signing and notarization, and cross-build (Windows/Mac packages from Linux, Linux/Mac from Windows etc). It's free for open source projects but requires payment for commercial projects.\n\n# Download\nThe latest build is available for [download here](https://github.com/libgdx/packr/releases).\n\nResource artifacts are available at [Maven Central](https://mvnrepository.com/artifact/com.badlogicgames.packr)\n   * Until Maven central publishing is working, the following Maven repository is available:\n      * <http://artifactory.nimblygames.com/artifactory/ng-public/>\n\n# Usage\nYou point packr at your JAR file(s) containing your code and assets, some configuration parameters, and a URL or local file location to a JDK build for your target platform.\n\nInvoking packr from the command line may look like the following. For a more complete example look at the [PackrAllTestApp/packrAllTestApp.gradle.kts](./PackrAllTestApp/packrAllTestApp.gradle.kts):\n\n```bash\njava -jar packr-all.jar \\\n     --platform mac \\\n     --jdk OpenJDK11U-jre_x64_mac_hotspot_11.0.10_9.tar.gz \\\n     --useZgcIfSupportedOs \\\n     --executable myapp \\\n     --classpath myjar.jar \\\n     --mainclass com.my.app.MainClass \\\n     --vmargs -Xmx1G \\\n     --resources src/main/resources path/to/other/assets \\\n     --output out-mac\n```\n\n| Parameter | Meaning |\n| --- | --- |\n| platform | one of \"windows64\",  \"linux64\", \"mac\" |\n| jdk | Directory, zip file, tar.gz file, or URL to an archive file of a JRE or Java 8 JDK with a JRE folder in it. Adopt OpenJDK 8, 11, and 15 are tested against <https://adoptopenjdk.net/releases.html>. You can also specify a directory to an unpacked JDK distribution. E.g. using ${java.home} in a build script.|\n| executable | name of the native executable, without extension such as \".exe\" |\n| jrePath (optional) | path to the bundled JRE. By default, the JRE will be placed in a folder called \"jre\". |\n| classpath | file locations of the JAR files to package |\n| removelibs (optional) | file locations of JAR files to remove native libraries which do not match the target platform. See below for details. |\n| mainclass | the fully qualified name of the main class, using dots to delimit package names |\n| vmargs (optional) | list of arguments for the JVM, including leading dashes, e.g. \"-Xmx1G\" |\n| useZgcIfSupportedOs (optional) | When bundling a Java 14+ JRE, the launcher will check if the operating system supports the [Z garbage collector](https://wiki.openjdk.java.net/display/zgc/Main) and use it. At the time of this writing, the supported operating systems are Linux, macOS, and Windows version 1803 (Windows 10 or Windows Server 2019) or later.\" |\n| resources (optional) | list of files and directories to be packaged next to the native executable |\n| minimizejre (optional) | Only use on Java 8 or lower. Minimize the JRE by removing directories and files as specified by an additional config file. Comes with a few config files out of the box. See below for details on the minimization config file. |\n| output | the output directory. This must be an existing empty directory or a path that does not exist. Packr will create the directory if it doesn't exist but will fail if the path is not a directory or is not an empty directory. |\n| cachejre (optional) | An optional directory to cache the result of JRE extraction and minimization. See below for details. |\n| icon (optional, OS X) | location of an AppBundle icon resource (.icns file) |\n| bundle (optional, OS X) | the bundle identifier of your Java application, e.g. \"com.my.app\" |\n| verbose (optional) | prints more status information during processing, which can be useful for debugging |\n| help | shows the command line interface help |\n\nAlternatively, you can put all the command line arguments into a JSON file which might look like this:\n\n```json\n{\n    \"platform\": \"mac\",\n    \"jdk\": \"/Users/badlogic/Downloads/OpenJDK8U-jdk_x64_mac_hotspot_8u252b09.tar.gz\",\n    \"executable\": \"myapp\",\n    \"classpath\": [\n        \"myjar.jar\"\n    ],\n    \"removelibs\": [\n        \"myjar.jar\"\n    ],\n    \"mainclass\": \"com.my.app.MainClass\",\n    \"vmargs\": [\n       \"-Xmx1G\"\n    ],\n    \"resources\": [\n        \"src/main/resources\",\n        \"path/to/other/assets\"\n    ],\n    \"minimizejre\": \"soft\",\n    \"output\": \"out-mac\"\n}\n```\n\nYou can then invoke the tool like this:\n\n```bash\njava -jar packr-all.jar my-packr-config.json\n```\n\nIt is possible to combine a JSON configuration, and the command line. For single options, the command line parameter overrides the equivalent JSON option. For multi-options (e.g. `classpath` or `vmargs`), the options are merged.\n\nThis is an example which overrides the output folder and adds another VM argument. Note that the config file name is delimited by `--` because the option prior to it, `--vmargs`, allows multiple arguments:\n\n```bash\njava -jar packr-all.jar --output target/out-mac --vmargs -Xms256m -- my-packr-config.json\n```\n\nFinally, you can use packr from within your Java code. Just add the JAR file to your project, either manually, or via the following Gradle dependency:\n\n```Kotlin\nrepositories {\n   mavenCentral() // Packr artifacts will be published to Maven Central in the future\n   maven(uri(\"https://oss.sonatype.org/content/repositories/snapshots/\")) // Packr snapshot artifacts will be published to Maven Central in the future\n\n   // The following repositories are available until artifacts can be published to Maven Central\n   maven(uri(\"http://artifactory.nimblygames.com/artifactory/ng-public-snapshot/\"))\n   maven(uri(\"http://artifactory.nimblygames.com/artifactory/ng-public-release/\"))\n}\ndependencies {\n   implementation(\"com.badlogicgames.packr:packr:3.0.3\")\n}\n```\n\nTo invoke packr, you need to create an instance of `PackrConfig` and pass it to `Packr.pack()`:\n\n```java\nPackrConfig config = new PackrConfig();\nconfig.platform = PackrConfig.Platform.Windows32;\nconfig.jdk = \"/User/badlogic/Downloads/openjdk-for-mac.zip\";\nconfig.executable = \"myapp\";\nconfig.classpath = Arrays.asList(\"myjar.jar\");\nconfig.removePlatformLibs = config.classpath;\nconfig.mainClass = \"com.my.app.MainClass\";\nconfig.vmArgs = Arrays.asList(\"-Xmx1G\");\nconfig.minimizeJre = \"soft\";\nconfig.outDir = new java.io.File(\"out-mac\");\nconfig.useZgcIfSupportedOs = true;\n\nnew Packr().pack(config);\n```\n\n## macOS notarization and entitlements\nThe following entitlements when signing the PackrLauncher executable are known to work on macOS 10.15 (Catalina) and Java 14.\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>com.apple.security.cs.allow-jit</key>\n\t<true/>\n\t<key>com.apple.security.cs.allow-unsigned-executable-memory</key>\n\t<true/>\n\t<key>com.apple.security.cs.disable-executable-page-protection</key>\n\t<true/>\n\t<key>com.apple.security.cs.disable-library-validation</key>\n\t<true/>\n\t<key>com.apple.security.cs.allow-dyld-environment-variables</key>\n\t<true/>\n</dict>\n</plist> \n```\n\nIf all the bundled dylibs are signed, fewer entitlements might be possible. When using Java 8, `com.apple.security.cs.allow-unsigned-executable-memory`, and `com.apple.security.cs.disable-executable-page-protection` were not needed.\n\n### Example macOS code signing and notarization command line steps\nThese steps assume you have an Apple developer account, have saved your Apple code signing certificate into Keychain and have generated an [app-specific password](https://support.apple.com/en-us/HT204397) for your Apple developer account, allowing you to pass your username and token as command line arguments. The example commands also assume you saved the app-specific password in your Keychain allowing these commands to run in an automated way, e.g., your CI pipeline can execute all these commands.\n1. `codesign --sign <keychain id for certiticate> --verbose=10 --timestamp --force --options runtime --entitlements <path-to-entitlements-file> <path to exe or shared lib>`\n   * You have to codesign every executable and shared library, --deep is for [\"emergency repairs\"](https://developer.apple.com/library/archive/technotes/tn2206/_index.html#//apple_ref/doc/uid/DTS40007919-CH1-TNTAG404).\n2. `/usr/bin/ditto -c -k --keepParent <app path> <app path>.zip`\n   * ditto is a commandline zip tool, any tool that creates a zip file from a directory can be used.\n3. `xcrun altool --notarize-app --verbose --primary-bundle-id com.mydomain.myproduct --username '<username>' --password \"@keychain:<app-specific password>\" --file <app path>.zip`\n   * If this step fails, it will exit with a non-zero return code and provide good output as to why it failed. E.g., \"You must first sign the relevant contracts online.\"\n\n**Optional steps, you can choose to wait for an email notification**\n1. `xcrun altool --notarization-history 0 -u <username> -p \"@keychain:<app-specific password>\" --output-format xml`\n   * This command grabs the history for the **last** call to `xcrun altool --notarize-app`, this will obviously fail if you're running multiple `xcrun altool --notarize-app` processes in parallel. You'll have to come up with a better way to parse the history.\n2. Parse the XML output for the last request UUID, regex: `<string>(.*?)</string>`\n3. In a loop, every minute check the notarization status.\n   * `xcrun altool --notarization-info <parsed uuid> -u <username> -p \"@keychain:<app-specific password>\"`\n4. Parse the output for the status, regex: `.*?Status:\\s+(.*?)$`\n5. When the status no longer matches `in progress` exit the loop.\n6. If the `Status` did not end up as `success` the output will provide a description of what went wrong.\n7. `xcrun stapler staple --verbose <app path>`\n\n# Minimization\nUnless you're stuck with using Java 8, it's best to create a minimized JRE using [jlink](https://docs.oracle.com/en/java/javase/11/tools/jlink.html). See [TestAppJreDist/testAppJreDist.gradle.kts](./TestAppJreDist/testAppJreDist.gradle.kts) for an example Gradle build script which generates JREs from downloaded JDKs.\n\n## JRE\nA standard OpenJDK 8 JRE is about 91 MiB unpacked. Packr helps you cut down on that size, thus also reducing the download size of your app.\n\nTo minimize the JRE that is bundled with your app, you have to specify a minimization configuration file via the `minimizejre` flag you supply to Packr. A minimization configuration is a JSON file containing paths to files and directories within the JRE to be removed.\n\nAs an example, have a look at the `soft` profile configuration:\n\n```json\n{\n  \"reduce\": [\n    {\n      \"archive\": \"jre/lib/rt.jar\",\n      \"paths\": [\n        \"com/sun/corba\",\n        \"com/sun/jndi\",\n        \"com/sun/media\",\n        \"com/sun/naming\",\n        \"com/sun/rowset\",\n        \"sun/applet\",\n        \"sun/corba\",\n        \"sun/management\"\n      ]\n    }\n  ],\n  \"remove\": [\n    {\n      \"platform\": \"*\",\n      \"paths\": [\n        \"jre/lib/rhino.jar\"\n      ]\n    },\n    {\n      \"platform\": \"windows\",\n      \"paths\": [\n        \"jre/bin/*.exe\",\n        \"jre/bin/client\"\n      ]\n    }\n  ]\n}\n```\n\nThis configuration will unpack `rt.jar`, remove all the listed packages and classes in `com.sun.*` and `sun.*`, then repack `rt.jar` again. By default, the JRE uses zero-compression on its JAR files to make application startup a little faster, so this step will reduce the size of `rt.jar` substantially.\n\nThen, rhino.jar (about 1.1 MiB) and, in the JRE for Windows case, all executable files in `jre/bin/` and the folder `jre/bin/client/` will be removed.\n\nPackr comes with two such configurations out of the box: [`soft`](./Packr/src/main/resources/minimize/soft) and [`hard`](./Packr/src/main/resources/minimize/hard). The `hard` profile removes a few more files, and repacks some additional JAR files.\n\n## The \"removelibs\" option\nMinimization aside, packr can remove all dynamic libraries which do not match the target platform from your project JAR file(s):\n\n| platform | files removed |\n| --- | --- |\n| Windows | `*.dylib`, `*.so` |\n| Linux | `*.dll`, `*.dylib` |\n| MacOS | `*.dll`, `*.so` |\n\nThis step is optional. If you don't need it, just remove the configuration parameter to speed up packr. This step doesn't preserve the META-INF directory or files in the jar.\n\n# Caching\nExtracting and minimizing a JRE can take quite some time. When using the `cachejre` option, the result of these operations are cached in the given folder, and can be reused in subsequent runs of packr.\n\nAs of now, packr doesn't do any elaborate checks to validate the content of this cache folder. So if you update the JDK, or change the minimize profile, you need to empty or remove this folder manually to force a change.\n\n# Output\n## Windows\nWhen packing for Windows, the following folder structure will be generated\n```\noutdir/\n   myapp.exe\n   myjar.jar\n   myapp.json\n   jre/\n```\n\n## Linux\n```\noutdir/\n   myapp\n   myjar.jar\n   myapp.json\n   jre/\n```\n\n## Mac OS X\n```\noutdir/\n   Contents/\n      Info.plist\n      MacOS/\n         myapp\n      Resources/\n         myjar.jar\n         myapp.json\n         jre/\n         icons.icns [if config.icon is set]\n```\n\nYou can further modify the Info.plist to your liking, e.g. add icons, a bundle identifier etc. If your `output` folder has the `.app` extension it will be treated as an application bundle by Mac OS X.\n\n# Executable command line interface\nBy default, the native executables forward any command line parameters to your Java application's main() function. So, with the configurations above, `./myapp -x y.z` is passed as `com.my.app.MainClass.main(new String[] {\"-x\", \"y.z\" })`.\n\nThe executables themselves expose an own interface, which has to be enabled explicitly by passing `-c` or `--cli` as the **very first** parameter. In this case, the special delimiter parameter `--` is used to separate the native CLI from parameters to be passed to Java. In this case, the example above would be equal to `./myapp -c [arguments] -- -x y.z`.\n\nTry `./myapp -c --help` for a list of available options.\n\n> Note: On Windows, the executable does not show any output by default. Here you can use `myapp.exe -c --console [arguments]` to spawn a console window, making terminal output visible.\n\n# Building from source code\nIf you want to modify the code invoke Gradle.\n\n    $ ./gradlew clean assemble\n\nThis will create a `packr-VERSION-all.jar` file in `Packr/build/libs` directory, you may invoke as described in the Usage section above.\n\n## Gradle project structure\nThe Gradle build is set up as a multi-project build. In order to fully build the multi-project you must have a compatible JRE (Java 8+) and [C/C++ build tools that the Gradle build can find](https://docs.gradle.org/current/userguide/building_cpp_projects.html#sec:cpp_supported_tool_chain).\n \n### DrOpt Gradle sub-project\nThis is a downloaded and unzipped <https://github.com/jamesderlin/dropt/releases> version 1.1.1 source code with a Gradle script used to build it for consumption by the PackrLauncher Gradle project. The DrOpt source required a few modifications to get it compiling, namely some explicit casting in the C code.\n\n### Packr Gradle sub-project\nThis is the Java code for creating application bundles that can use the native launcher executables. This project also builds the packr-all uber/shadow jar that works as an executable jar.\n\n### PackrLauncher Gradle sub-project\nThis contains the platform native code for loading the JVM and starting the packr bundled application.\n\n### PackrAllTestApp Gradle sub-project\nThis is an example Hello world style application that bundles itself using packr and is used as a high level test suite to help reduce breaking changes.\n\n### TestAppJreDist Gradle sub-project\nThis project downloads JDKS 8, 11, and 14 and runs jlink on the 11 and 14 versions to create minimal JREs for use by PackrAllTestApp.\n\n## Limitations\n* Only Adopt OpenJDKs 8, 11, and 15 are tested (other JDKs probably work)\n* Icons aren't set yet on Windows and Linux, you need to do that manually.\n* Minimum platform requirement on MacOS is OS X 10.10 (Only 10.15 macOS Catalina is actively tested, there are users that report 10.14 works).\n* JRE minimization is very conservative. Depending on your app, you can carve out stuff from a JRE yourself, disable minimization and pass your custom JRE to packr. If you're using Java 11+ you should create a JRE using [jlink](https://docs.oracle.com/en/java/javase/11/tools/jlink.html).\n* On MacOS, the JVM is spawned in its own thread by default, which is a requirement of AWT. This does not work with code based on LWJGL3/GLFW, which needs the JVM be spawned on the main thread. You can enforce the latter with adding the `-XstartOnFirstThread` VM argument to your MacOS packr config.\n\n# License & Contributions\nThe code is licensed under the [Apache 2 license](http://www.apache.org/licenses/LICENSE-2.0.html). By contributing to this repository, you automatically agree that your contribution can be distributed under the Apache 2 license by the author of this project. You will not be able to revoke this right once your contribution has been merged into this repository.\n\n# Security\nDistributing a bundled JVM has security implications, just like bundling any other runtimes like Mono, Air, etc. Make sure you understand the implications before deciding to use this tool. Here's a [discussion on the topic](http://www.reddit.com/r/gamedev/comments/24orpg/packr_package_your_libgdxjavascalajvm_appgame_for/ch99zk2).\n"
        },
        {
          "name": "TestAppJreDist",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle.kts",
          "type": "blob",
          "size": 0.8173828125,
          "content": "/*\n * Copyright 2020 See AUTHORS file\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\ngroup = \"com.badlogicgames.packr\"\nversion = \"4.1.0-SNAPSHOT\"\n\next[\"macOsMinimumVersion\"] = \"10.10\"\n\nplugins {\n   base\n}\n\ntasks.named<Wrapper>(\"wrapper\") {\n   gradleVersion = \"6.8.3\"\n   distributionType = Wrapper.DistributionType.ALL\n}\n"
        },
        {
          "name": "buildSrc",
          "type": "tree",
          "content": null
        },
        {
          "name": "changelog.md",
          "type": "blob",
          "size": 7.287109375,
          "content": "# Unreleased 4.0.1\n\n1. Fixed null pointer exception when not specifying `--jrePath` on the command line or in the JSON configuration file.\n\n# Release 4.0.0\n\n1. Added an option to specify the JRE directory in the configuration file.\n2. Changed the default config file name from `config.json` to `<app name>.json`\n   where `app name` is the value of the `--executable` field passed to `packr-all.jar`.  \n   If the executable name is `myapp` (or `myapp.exe` on Windows) then the default config file name will be `myapp.json` instead of `config.json`.\n3. Please update your Maven and Gradle build scripts to point to <https://artifactory.nimblygames.com/artifactory/ng-public>.\n   * Gradle will soon require HTTPS and the -snapshot and -release repository URLs are for publishing, not downloading.\n\n# Release 3.0.3\n\n1. Fixed symbolic link issue for Linux and macOS JREs.\n1. Fixed pthread not being available on Linux.\n\n# Release 3.0.2\n\n1. Preemptively load all DLLs in the jre/bin directory on Windows.\n   * This resolves an issue on Windows where the awt.dll cannot find the Microsoft runtime libraries (MSVCP140.dll).\n\n# Release 3.0.1\n\n1. Updated tests to use the latest versions of AdoptOpenJDK 8, 11, and 15.\n1. Changed DLL loading on Windows to search in the JRE bin and server directories.\n   * This should make packr more robust to Windows runtime DLL changes.\n1. Fixed logging levels in ArchiveUtils\n   * There was trace output logging at error level.\n# Release 3.0.0\n1. Refactored code to fit better into libGdx/packr parent repository.\n1. Fixed an issue where extracting an archive with duplicate entries would fail.\n1. The packr-all Jar is available from GitHub packages <https://github.com/libgdx/packr/packages>.\n1. The output directory specified by `--output` must be an empty directory, or a path that does not exist.\n   * Packr will no longer delete the output directory and then populate it.\n1. Packr will ensure that `jspawnhelper` has execute permissions in the bundled JRE.\n   * This resolves an issue on macOS where Runtime.exec and Process.start calls would fail with `java.io.IOException: Cannot run program \"java\": error=2, No such file or directory`.\n      * Reference: <https://stackoverflow.com/questions/53113127/java-runtime-exec-fails-to-run/55091040>\n1. Updated ArchiveUtils to support POSIX permissions and symbolic links.\n   * This resolves an issue with repackaged JREs losing execute permissions.\n1. Alternative Maven repositories until oss.sonatype.org (Maven central) publishing is possible.\n   * Snapshots: http://artifactory.nimblygames.com/artifactory/ng-public-snapshot/\n   * Releases: http://artifactory.nimblygames.com/artifactory/ng-public-release/\n# Release 2.7.0\n1. Fixed a Gradle script error where it was bundling the release builds with debug info on Linux and macOS.\n   * For Linux this reduces the executable size from ~722K to ~95K.\n1. Compile with `-no-pie` on Linux to work around a Nautilus bug.\n   * <https://stackoverflow.com/questions/41398444/gcc-creates-mime-type-application-x-sharedlib-instead-of-application-x-applicati>\n   * <https://stackoverflow.com/questions/34519521/why-does-gcc-create-a-shared-object-instead-of-an-executable-binary-according-to?noredirect=1&lq=1>\n1. Added compile flags `/Os`, `/Gw`, `/Gy` on Windows.\n   * Combined with the new linker flags, this reduced the executable size.\n1. Added `/opt:icf`, `/opt:ref` linker flags on Windows.\n   * Combined with the new compiler flags, this reduced the executable size.\n1. Updated Gradle wrapper to version 6.5.1.\n# Release 2.6.4\n1. Fixed an issue with uncaught exception handlers not being called for the main thread.\n   * dispatchUncaughtException is called on the main thread if an exception is detected after calling the main method.\n# Release 2.6.3\n1. Support macOS versions down to 10.10 Yosemite\n   * Added compiler flag `-mmacosx-version-min=10.10`\n# Release 2.6.2\n1. Resolves an issue for newer JVMs that rely on vcruntime140.dll (The Visual C++ 2017 Redistributable).\n   * If loading the jvm.dll fails on Windows, then PackrLauncher searches for a vcruntime*.dll file in \"jre/bin\" and loads that library and attempts to load the jvm.dll again. This resolves an issue where the jvm.dll can't be loaded on Windows systems that don't have the Visual C++ 2017 Redistributable installed. \n# Release 2.6.0\n1. Added support for unicode directories on Windows.\n   * This resolves issues where PackrLauncher is running from a directory with international characters in it.\n2. Fixed `--console` on Windows.\n   * When running from a Windows Explorer shortcut, a new console is popped up and if `--verbose` was also specified then all debug output shows up in the console window.\n3. If the PackrLauncher parent process has a console, PackrLauncher attaches to it.\n   * This allows debug output when PackrLauncher is launched from a command prompt window, without the need for passing `--console`.\n\n# Release 2.5.0\n1. Added `useZgcIfSupportedOs` flag making it easier to use the Z garbage collector when bundling Java 14+.\n   * The launcher executable will detect if the running operating system supports the Z garbage collector and use it.\n2. Added [Google Test](https://github.com/google/googletest) C++ test framework to the [PackrLauncher code](PackrLauncher/src/test/cpp).\n3. Updated Gradle wrapper to 6.4.1.\n4. Updated to C++14 as the minimum supported C++ version.\n\n# Release 2.4.2\n1. Added support for Java 11 and 14\n   * Including jlink created JREs\n   * Note: Packr cannot take a module and load it into the classpath of the created JVM, a Jar is still needed. It should be possible to create a jlink JRE from your custom module and have that work with packr but it's untested.\n\n# Release 2.3.0\n1. Converted packr to use Gradle\n1. Include DrOpt source for easier building\n1. Include sajson.h for easier building\n   * <https://github.com/chadaustin/sajson/tree/791799ad90f7179f132ea2f53b90ef98f1d399a2>\n   * From inspecting the old fips config at <https://github.com/code-disaster/fips-sajson>\n1. Support tar.gz files\n1. Support macOS signing and notarization of the executable\n1. Load the msvcr*.dll that the JRE ships with instead of always trying to load msvcr100.dll\n1. Removed linux32 platform\n   * Linux x86 is no longer built because it's impossible to find a survey that shows anyone running x86 Linux.\n1. Remove macOS x86 (32-bit) support\n   * macOS x86 is no longer built because it requires and older version of Xcode and Apple makes it difficult to install on newer versions of macOS\n1. Remove windows32 platform\n   * Windows x86 is no longer built because the Adopt OpenJDK 8u242 and 8u252 have crash failures.\n\n# Release 2.1-SNAPSHOT\n- Compiles with Java 8 now. It's 2018, folks!\n- Refactored I/O to use NIO and try-with-resources where appropriate. Removed dependency on Apache commons I/O.\n- Print usage (--help) if no command line arguments are given.\n- Added more validation checks to configuration parameters.\n- Fixed crash when classpath is a directory. (#90)\n- Added \"cachejre\" option to cache results of JRE extract & minimize steps.\n- Added \"removelibs\" option to specify JAR files which are subject for removal of platform libraries. If this parameter isn't used, it defaults to a copy of \"classpath\", which is the old behaviour.\n- Added NvOptimusEnablement and AmdPowerXpressRequestHighPerformance symbols. (#114)\n\n# Release 2.0-SNAPSHOT and before\n- Please check the Git log, or search the libGDX forums.\n"
        },
        {
          "name": "googletest",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.7841796875,
          "content": "#\n# Copyright 2020 See AUTHORS file\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n#\n\n#org.gradle.caching=true\norg.gradle.parallel=true\norg.gradle.configureondemand=true\n# Workaround for Maven Central not supporting SHA256 and 512 hashes.\nsystemProp.org.gradle.internal.publish.checksums.insecure=true\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 5.630859375,
          "content": "#!/usr/bin/env sh\n\n#\n# Copyright 2015 the original author or authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn () {\n    echo \"$*\"\n}\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\n  NONSTOP* )\n    nonstop=true\n    ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif [ \"$cygwin\" = \"true\" -o \"$msys\" = \"true\" ] ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=`expr $i + 1`\n    done\n    case $i in\n        0) set -- ;;\n        1) set -- \"$args0\" ;;\n        2) set -- \"$args0\" \"$args1\" ;;\n        3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Escape application args\nsave () {\n    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n    echo \" \"\n}\nAPP_ARGS=`save \"$@\"`\n\n# Collect all arguments for the java command, following the shell quoting and substitution rules\neval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\"\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.611328125,
          "content": "@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n\n@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto execute\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto execute\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "settings.gradle.kts",
          "type": "blob",
          "size": 1.2041015625,
          "content": "/*\n * Copyright 2020 See AUTHORS file\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nrootProject.name = \"packr\"\n\ninclude(\"Packr\")\nproject(\":Packr\").buildFileName = \"packr.gradle.kts\"\ninclude(\"PackrLauncher\")\nproject(\":PackrLauncher\").buildFileName = \"packrLauncher.gradle.kts\"\ninclude(\"DrOpt\")\nproject(\":DrOpt\").buildFileName = \"drOpt.gradle.kts\"\ninclude(\"PackrAllTestApp\")\nproject(\":PackrAllTestApp\").buildFileName = \"packrAllTestApp.gradle.kts\"\ninclude(\"TestAppJreDist\")\nproject(\":TestAppJreDist\").buildFileName = \"testAppJreDist.gradle.kts\"\n\npluginManagement {\n   repositories {\n      gradlePluginPortal()\n      mavenCentral()\n      maven(uri(\"https://oss.sonatype.org/content/repositories/snapshots/\"))\n   }\n}\n"
        }
      ]
    }
  ]
}