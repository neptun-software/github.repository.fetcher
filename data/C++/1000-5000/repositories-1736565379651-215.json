{
  "metadata": {
    "timestamp": 1736565379651,
    "page": 215,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Qihoo360/evpp",
      "stars": 3628,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.69921875,
          "content": "# Compiled Object files\n*.slo\n*.lo\n*.o\n*.d\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n\n# vim swp file\n*.swp\n\n*.VC.VC.opendb\n\nvsprojects/Debug/\nvsprojects/Release/\nvsprojects/bin/\nvsprojects/*.opensdf\nvsprojects/*.sdf\nvsprojects/*.suo\nvsprojects/.vs/\nvsprojects/libevpp.VC.db\nvsprojects/evnsq-test.vcxproj.filters\nvsprojects/enc_temp_folder/\nvsprojects/evnsq-test.vcxproj.user\nvsprojects/libevpp-test.vcxproj.user\n\n*.vcxproj.user\n\ntest/evpp-test\nexamples/echo/*/simple_echo\nexamples/pingpong/client/pingpong_client\nexamples/pingpong/server/pingpong_server\n\ncore.*\n\n*.out\n\n*.orig\n\nbuild\nbuild-debug\nbuild-release\nbuild-win64\nvcpkg-build-win64\nvcpkg-build\n\n\napps/evnsq/evnsqtail/evnsqtail\napps/evnsq/test/evnsqtest\napps/evnsq.bak/\n\n3rdparty/libevent-2.1.5-beta/.vs/\n3rdparty/libevent-2.1.5-beta/Win32/\n3rdparty/libevent-2.1.5-beta/libevent.VC.db\n3rdparty/libevent-2.1.5-beta/*.dir/\n3rdparty/libevent-2.1.5-beta/build/\n3rdparty/libevent-release-2.1.7-rc/build/\n3rdparty/libevent-release-2.1.7-rc/*.dir/\n3rdparty/glog-0.3.4/Backup/\n3rdparty/glog-0.3.4/Debug/\n3rdparty/glog-0.3.4/Release/\n3rdparty/glog-0.3.4/UpgradeLog.htm\n3rdparty/glog-0.3.4/google-glog.VC.db\n3rdparty/glog-0.3.4/vsprojects/libglog/libglog.vcxproj\n3rdparty/glog-0.3.4/vsprojects/libglog/libglog.vcxproj.filters\n3rdparty/glog-0.3.4/vsprojects/libglog_static/Debug/\n3rdparty/glog-0.3.4/vsprojects/libglog_static/Release/\n3rdparty/glog-0.3.4/vsprojects/libglog_static/libglog_static.vcxproj\n3rdparty/glog-0.3.4/vsprojects/libglog_static/libglog_static.vcxproj.filters\n3rdparty/glog-0.3.4/vsprojects/logging_unittest/logging_unittest.vcxproj\n3rdparty/glog-0.3.4/vsprojects/logging_unittest/logging_unittest.vcxproj.filters\n3rdparty/glog-0.3.4/vsprojects/logging_unittest_static/logging_unittest_static.vcxproj\n3rdparty/glog-0.3.4/vsprojects/logging_unittest_static/logging_unittest_static.vcxproj.filters\n3rdparty/glog-0.3.4/.vs/\n3rdparty/glog-0.3.4/Backup1/\n3rdparty/glog-0.3.4/UpgradeLog2.htm\n3rdparty/astyle/\n\nevpp/libevpp.so.1\nevpp/libevpp.so.1.0\n\nbenchmark/throughput/asio/client\nbenchmark/throughput/asio/server\nbenchmark/throughput/evpp/example_pingpong_client\nbenchmark/throughput/evpp/example_pingpong_server\nbenchmark/throughput/asio/benchmark_tcp_asio_client\nbenchmark/throughput/asio/benchmark_tcp_asio_server\nbenchmark/throughput/libevent/benchmark_tcp_libevent_client\nbenchmark/throughput/libevent/benchmark_tcp_libevent_server\nbenchmark/ioevent/libevent/benchmark_ioevent_evpp\nbenchmark/ioevent/libevent/benchmark_ioevent_evpp_pipe_watcher\nbenchmark/ioevent/libevent/benchmark_ioevent_libevent\nbenchmark/ioevent/libevent/dat.t0\nbenchmark/ioevent/libevent/pingpong_bench\nbenchmark/ioevent/libevent/runbench.tmp\ntools/a.sh\n\nWin32/Debug/ZERO_CHECK\n\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1220703125,
          "content": "[submodule \"3rdparty/concurrentqueue\"]\n\tpath = 3rdparty/concurrentqueue\n\turl = https://github.com/cameron314/concurrentqueue\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.1064453125,
          "content": "dist: trusty\nlanguage: cpp\ncompiler:\n  - g++\n\nbranches:\n  only:\n    - master\n    - dev\n\nenv:\n  global:\n    - CI_HOME=`pwd`\n\n\ninstall:\n  - sudo apt-get install libboost-all-dev -y\n  - sudo apt-get install libevent-dev -y\n  - sudo apt-get install libgflags-dev -y\n  - sudo apt-get install libgtest-dev -y\n  - sudo apt-get install libgoogle-glog-dev -y\n      \nscript:\n  - g++ --version\n  - cmake --version\n  - cd $CI_HOME\n  - pwd\n  - git submodule update --init --recursive\n  - mkdir build && cd build\n  - cmake -DCMAKE_BUILD_TYPE=debug ..\n  - make -j2\n  - cd ..\n  - mkdir build-release && cd build-release\n  - cmake -DCMAKE_BUILD_TYPE=release ..\n  - make -j2\n  - pwd\n\nafter_success:\n  - cd $CI_HOME\n  - pwd\n  - curl -L https://github.com/nsqio/nsq/releases/download/v0.3.8/nsq-0.3.8.linux-amd64.go1.6.2.tar.gz -o nsq-0.3.8.linux-amd64.go1.6.2.tar.gz\n  - tar zxvf nsq-0.3.8.linux-amd64.go1.6.2.tar.gz\n  - pwd\n  - make test -C build\n  - make test -C build-release\n  - cd $CI_HOME\n  - pwd\n  - cd tools/test_scripts\n  - pwd\n  - /bin/bash ./evnsq_test.sh\n  - pwd\n#  - coveralls --exclude dependencies --exclude test --gcov /usr/bin/gcov-5\n\n"
        },
        {
          "name": "3rdparty",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 3.0234375,
          "content": "cmake_minimum_required (VERSION 2.8)\n\nproject (safe-evpp C CXX)\n\nif (UNIX)\n    if(NOT CMAKE_BUILD_TYPE)\n        set(CMAKE_BUILD_TYPE \"Release\")\n    endif()\n\n    set (CXX_FLAGS\n         -g\n         -fPIC\n         -Wall\n         -D__STDC_FORMAT_MACROS\n         -Wno-unused-parameter\n         -Wno-unused-function\n         -Wunused-variable\n         -Wunused-value\n         -Wshadow\n         -Wcast-qual\n         -Wcast-align\n         -Wwrite-strings\n         -Wsign-compare\n         -Winvalid-pch\n         -fms-extensions\n         -Wfloat-equal\n         -Wextra\n         -std=c++11\n    )\n    include_directories (${PROJECT_SOURCE_DIR}\n                         ${PROJECT_SOURCE_DIR}/3rdparty)\nelse (UNIX)\nset (CXX_FLAGS -DWIN32 -D_WIN32 -EHsc)\n    set(VcpkgRoot ${_VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET})\n    include_directories(${VcpkgRoot}/include\n                        ${PROJECT_SOURCE_DIR}\n                        ${PROJECT_SOURCE_DIR}/3rdparty/wininclude)\n\n    # On windows, Debug mode\n    link_directories(${VcpkgRoot}/debug/lib ${VcpkgRoot}/debug/lib/manual-link)\n\n    # On Windows, Release mode\n    # link_directories(${VcpkgRoot}/lib ${VcpkgRoot}/lib/manual-link)\nendif (UNIX)\n\nstring (REPLACE \";\" \" \" CMAKE_CXX_FLAGS \"${CXX_FLAGS}\")\n\nif (UNIX)\n    SET(CMAKE_CXX_FLAGS_DEBUG   \"-O0 -g -ggdb -D_DEBUG -DGOOGLE_STRIP_LOG=0\")\n    SET(CMAKE_CXX_FLAGS_RELEASE \"-O3 -g -ggdb -DNDEBUG -DGOOGLE_STRIP_LOG=1\")\n    SET(DEPENDENT_LIBRARIES event glog pthread)\nelse (UNIX)\n    SET(DEPENDENT_LIBRARIES event glog)\nendif (UNIX)\n\n# Set to true if https support is needed.\n# Note that this needs openssl\n# SET(HTTPS True)\nif (HTTPS)\n    list(APPEND DEPENDENT_LIBRARIES ssl crypto event_openssl)\n    SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DEVPP_HTTP_CLIENT_SUPPORTS_SSL\")\n    SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DEVPP_HTTP_SERVER_SUPPORTS_SSL\")\nendif (HTTPS)\n\n\nif (CMAKE_BENCHMARK_TESTING)\n    SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DH_BENCHMARK_TESTING=1\")\nendif (CMAKE_BENCHMARK_TESTING)\n\nset (EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)\nset (LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)\n\n#set (MACOSX_RPATH ${LIBRARY_OUTPUT_PATH})\nset (CMAKE_MACOSX_RPATH 0)\n\nfind_program(THRIFT_COMPILER thrift)\nfind_path(THRIFT_INCLUDE_DIR thrift)\nfind_library(THRIFT_LIBRARY NAMES thrift)\n\nmessage (STATUS \"This is BINARY dir \" ${PROJECT_BINARY_DIR})\nmessage (STATUS \"This is SOURCE dir \" ${PROJECT_SOURCE_DIR})\nmessage (STATUS \"CMAKE_CXX_FLAGS \" ${CMAKE_CXX_FLAGS})\nmessage (STATUS \"EXECUTABLE_OUTPUT_PATH \" ${EXECUTABLE_OUTPUT_PATH})\nmessage (STATUS \"LIBRARY_OUTPUT_PATH \" ${LIBRARY_OUTPUT_PATH})\nmessage (STATUS \"THRIFT_COMPILER \" ${THRIFT_COMPILER})\nmessage (STATUS \"THRIFT_INCLUDE_DIR \" ${THRIFT_INCLUDE_DIR})\nmessage (STATUS \"THRIFT_LIBRARY \" ${THRIFT_LIBRARY})\n\nadd_subdirectory (evpp)\nadd_subdirectory (apps)\nadd_subdirectory (labs)\n\nif (NOT EVPP_VCPKG_BUILD)\n    add_subdirectory (test)\n    add_subdirectory (examples)\n    add_subdirectory (benchmark)\nendif ()\n\nset (CMAKE_MODULE_PATH \"${PROJECT_SOURCE_DIR}/cmake\")\ninclude (utils)\ninclude (packages)\n\ninclude (CPack)\ninclude (CTest)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4736328125,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2017, Qihoo 360\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "apps",
          "type": "tree",
          "content": null
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "evpp",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "labs",
          "type": "tree",
          "content": null
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 10.3046875,
          "content": "evpp \n---\n\n\n<a href=\"https://github.com/Qihoo360/evpp/releases\"><img src=\"https://img.shields.io/github/release/Qihoo360/evpp.svg\" alt=\"Github release\"></a>\n<a href=\"https://travis-ci.org/Qihoo360/evpp\"><img src=\"https://travis-ci.org/Qihoo360/evpp.svg?branch=master\" alt=\"Build status\"></a>\n[![Platform](https://img.shields.io/badge/platform-%20%20%20%20Linux,%20BSD,%20OS%20X,%20Windows-green.svg?style=flat)](https://github.com/Qihoo360/evpp)\n[![License](https://img.shields.io/badge/license-%20%20BSD%203%20clause-yellow.svg?style=flat)](LICENSE)\n[![Project Status: Active – The project has reached a stable, usable state and is being actively developed.](http://www.repostatus.org/badges/latest/active.svg)](http://www.repostatus.org/#active)\n\n\n# Introduction  [中文说明](readme_cn.md)\n\n[evpp] is a modern C++ network library for developing high performance network services using TCP/UDP/HTTP protocols.\n[evpp] provides a TCP Server to support multi-threaded nonblocking event-driven server and also a HTTP, UDP Server to support HTTP and UDP protocols.\n\n# Features\n\n1. Modern C++11 interface\n1. Modern functional/bind style callback instead of C-style function pointer.\n1. Multi-core friendly and thread-safe\n1. A nonblocking multi-threaded TCP server\n1. A nonblocking TCP client\n1. A nonblocking multi-threaded HTTP server based on the buildin http server of libevent\n1. A nonblocking HTTP client\n1. A nonblocking multi-threaded UDP server\n1. Async DNS resolving\n1. EventLoop/ThreadPool/Timer\n2. Well tested — [evpp] is well tested with unit tests and stress tested daily in production. It has been used in production and processes 1000+ billions networking communications every day in our production\n3. Easy install — [evpp] can be packaged as a deb, rpm, tar.gz with a single command for straight forward distribution and integration\n\nAnd also provides some libraries based on [evpp]:\n\n1. [evmc] a nonblocking async C++ memcached (or membase cluster) client library. This library is currently used in production which sends more than 300 billions requests every day. See [evmc readme](/apps/evmc/readme.md) for more details.\n2. [evnsq] a nonblocking async C++ NSQ client library. This library is currently used in production which processes more than 130 billions messages every day. See [evnsq readme](/apps/evnsq/readme.md) for more details.\n\nNOTE: master is our development branch and may not be stable at all times.\n\n# Origin\n\nIn our business system, we need to build a TCP long-connection Gateway and other TCP services. When we do a survey of the open sources, we cannot find any appropriate network library for our demands. According to our own business characteristic, an ideal C++ network library must have the features below: \n\n1. A simple enough C++ interface\n2. Support multi-threads and multi-processes\n3. Based on [libevent] is preferable for our projects. Given your older applications were based on [libevent], it was preferable to have your new framework also be based on it, so as to reduce the overall time/effort/cost to completion. Actually, we do have some older applications which were based on [libevent].\n\nAs described above, there are not many options to choose from. So we developed one ourself. The design of the interface is highly inspired by [muduo] and [Golang]. Let's take some examples to explain this: \n\n1. `Duration` : This is a time interval class, with a time unit. It is referenced to the implementation of `Duration` of the [Golang] project. We have seen some many cases that the time interval without a unit. For example, what does `timeout` mean?  Seconds, milliseconds or microseconds? We need to read the document carefully, even more, we need to read the implementation codes. Our `Duration` class has self-explations with the time unit. Additionally `std::chrono::duration` in the STL of C++11 has the similar implementations, but it is a little bit complicated.\n2. `Buffer` : This is a memory buffer class. It uses the advantages of the two projects [muduo] and [Golang].\n3. `http::Server` : This is a HTTP server class with a working threads pool. It is thread-safe to dispatch tasks\n4. We simply use a string with the format of `\"ip:port\"` to represent a network address. This is referenced to the design of [Golang].\n5. `httpc::ConnPool` : This is HTTP client connection pool with highly performance. In the future we can add more features to this class : load balance and failover.\n\nIn addition, in the implementations we pay seriously attations to thread-safe problems. An event-related resource must be initialized and released in its own `EventLoop` thread, so that we can minimize the possibility of thread-safe error. In order to achieve this goal we reimplemented `event_add` and` event_del` and other functions. Each call to `event_add`, we stored the resource into thread local storage, and in the call `event_del`, we checked it whether it is stored in the thread local storage. And then we checked all the threads local storages to see whether there are resources not destructively released when the process was exiting. The detail codes are here [https://github.com/Qihoo360/evpp/blob/master/evpp/inner_pre.cc#L36~L87](https://github.com/Qihoo360/evpp/blob/master/evpp/inner_pre.cc#L36~L87). We are so harshly pursuit the thread safety to make a program can quietly exit or reload, because we have a deep understanding of \"developing a system to run forever and developing a system to quietly exit after running a period of time are totally two different things\".\n\n\n# Getting Started\n\nPlease see [Quick Start](docs/quick_start.md)\n\n# Benchmark\n\n### Benchmark Reports\n\n[The IO Event performance benchmark against Boost.Asio](docs/benchmark_ioevent_performance_vs_asio.md) : [evpp] is higher than [asio] about **20%~50%** in this case\n\n[The ping-pong benchmark against Boost.Asio](docs/benchmark_ping_pong_spend_time_vs_asio.md) : [evpp] is higher than [asio] about **5%~20%** in this case\n\n[The throughput benchmark against libevent2](docs/benchmark_throughput_vs_libevent.md) : [evpp] is higher than [libevent] about **17%~130%** in this case \n\n[The throughput benchmark against Boost.Asio](docs/benchmark_throughput_vs_asio.md) : [evpp] and [asio] have the similar performance in this case\n\n[The throughput benchmark against Boost.Asio(中文)](docs/benchmark_throughput_vs_asio_cn.md) : [evpp] and [asio] have the similar performance in this case\n\n[The throughput benchmark against muduo(中文)](docs/benchmark_throughput_vs_muduo_cn.md) : [evpp] and [muduo] have the similar performance in this case\n\n### Throughput\n\nThe throughput benchmark of [evpp] is **17%~130%** higher than [libevent2] and similar with [boost.asio] and [muduo].\nAlthough [evpp] is based on [libevent], [evpp] has a better throughput benchmark than [libevent]. That's because [evpp] implements its own IO buffer instead of [libevent]'s evbuffer. \n\n![](https://raw.githubusercontent.com/zieckey/resources/master/evpp/benchmark/throughput/evpp-vs-libevent-1thread-all.png)\n![](https://raw.githubusercontent.com/zieckey/resources/master/evpp/benchmark/throughput/evpp-vs-asio-1thread-all.png)\n\n# Examples\n\n## An echo TCP server\n\n```cpp\n#include <evpp/tcp_server.h>\n#include <evpp/buffer.h>\n#include <evpp/tcp_conn.h>\n\nint main(int argc, char* argv[]) {\n    std::string addr = \"0.0.0.0:9099\";\n    int thread_num = 4;\n    evpp::EventLoop loop;\n    evpp::TCPServer server(&loop, addr, \"TCPEchoServer\", thread_num);\n    server.SetMessageCallback([](const evpp::TCPConnPtr& conn,\n                                 evpp::Buffer* msg,\n                                 evpp::Timestamp ts) {\n        conn->Send(msg);\n    });\n    server.SetConnectionCallback([](const evpp::TCPConnPtr& conn) {\n        if (conn->IsConnected()) {\n            LOG_INFO << \"A new connection from \" << conn->remote_addr();\n        } else {\n            LOG_INFO << \"Lost the connection from \" << conn->remote_addr();\n        }\n    });\n    server.Init();\n    server.Start();\n    loop.Run();\n    return 0;\n}\n```\n\n### An echo HTTP server\n\n```cpp\n#include <evpp/http/http_server.h>\n\nint main(int argc, char* argv[]) {\n    std::vector<int> ports = { 9009, 23456, 23457 };\n    int thread_num = 2;\n    evpp::http::Server server(thread_num);\n    server.RegisterHandler(\"/echo\",\n                           [](evpp::EventLoop* loop,\n                              const evpp::http::ContextPtr& ctx,\n                              const evpp::http::HTTPSendResponseCallback& cb) {\n        cb(ctx->body().ToString()); }\n    );\n    server.Init(ports);\n    server.Start();\n    while (!server.IsStopped()) {\n        usleep(1);\n    }\n    return 0;\n}\n\n```\n\n\n### An echo UDP server\n\n```cpp\n#include <evpp/udp/udp_server.h>\n#include <evpp/udp/udp_message.h>\n\nint main(int argc, char* argv[]) {\n    std::vector<int> ports = { 1053, 5353 };\n    evpp::udp::Server server;\n    server.SetMessageHandler([](evpp::EventLoop* loop, evpp::udp::MessagePtr& msg) {\n        evpp::udp::SendMessage(msg);\n    });\n    server.Init(ports);\n    server.Start();\n\n    while (!server.IsStopped()) {\n        usleep(1);\n    }\n    return 0;\n}\n```\n\n### More examples\n\nPlease see the source code in [`examples`](https://github.com/Qihoo360/evpp/tree/master/examples).\n\n# TODO\n\n1. An async redis client\n2. Add `zipkin` tracing support\n3. Add examples : asio chat room\n4. Fix the comments written in mandarin problem\n5. Add benchmark against with boost.asio/cpp-netlib/beast http library/muduo/libevent/libuv ... \n\n# In Production\n\n<img src=\"http://i.imgur.com/dcHpCm4.png\" height = \"100\" width = \"120\" alt=\"Qihoo\">\n\n> Welcome to join this list :-)\n\n\n# Thanks\n\nThanks for the support of [Qihoo360](http://www.360.cn \"http://www.360.cn\").\n\nThanks for [libevent], [glog], [gtest], [Golang], [LevelDB], [rapidjson] projects.\n\n[evpp] is highly inspired by [muduo]. Thanks [Chen Shuo](https://github.com/chenshuo \"https://github.com/chenshuo\")\n\n\n[gtest]:https://github.com/google/googletest\n[glog]:https://github.com/google/glog\n[Golang]:https://golang.org\n[muduo]:https://github.com/chenshuo/muduo\n[libevent]:https://github.com/libevent/libevent\n[libevent2]:https://github.com/libevent/libevent\n[LevelDB]:https://github.com/google/leveldb\n[rapidjson]:https://github.com/miloyip/rapidjson\n[Boost.Asio]:http://www.boost.org/\n[boost.asio]:http://www.boost.org/\n[asio]:http://www.boost.org/\n[boost]:http://www.boost.org/\n[evpp]:https://github.com/Qihoo360/evpp\n[evmc]:https://github.com/Qihoo360/evpp/tree/master/apps/evmc\n[evnsq]:https://github.com/Qihoo360/evpp/tree/master/apps/evnsq\n"
        },
        {
          "name": "readme_cn.md",
          "type": "blob",
          "size": 10.9365234375,
          "content": "evpp\n---\n\n<a href=\"https://github.com/Qihoo360/evpp/releases\"><img src=\"https://img.shields.io/github/release/Qihoo360/evpp.svg\" alt=\"Github release\"></a>\n<a href=\"https://travis-ci.org/Qihoo360/evpp\"><img src=\"https://travis-ci.org/Qihoo360/evpp.svg?branch=master\" alt=\"Build status\"></a>\n[![Platform](https://img.shields.io/badge/platform-%20%20%20%20Linux,%20BSD,%20OS%20X,%20Windows-green.svg?style=flat)](https://github.com/Qihoo360/evpp)\n[![License](https://img.shields.io/badge/license-%20%20BSD%203%20clause-yellow.svg?style=flat)](LICENSE)\n[![Project Status: Active – The project has reached a stable, usable state and is being actively developed.](http://www.repostatus.org/badges/latest/active.svg)](http://www.repostatus.org/#active)\n\n# 简介 [English Introduce](readme.md)\n\n[evpp]是一个基于[libevent]开发的现代化C++11高性能网络服务器，自带TCP/UDP/HTTP等协议的异步非阻塞式的服务器和客户端库。\n\n\n# 特性\n\n1. 现代版的C++11接口\n1. 非阻塞异步接口都是C++11的functional/bind形式的回调仿函数（不是[libevent]中的C风格的函数指针）\n1. CPU多核友好和线程安全\n1. 非阻塞纯异步多线程TCP服务器/客户端\n1. 非阻塞纯异步多线程HTTP服务器/客户端\n1. 非阻塞纯异步多线程UDP服务器\n1. 支持多进程模式\n1. 优秀的跨平台特性和高性能（继承自[libevent]的优点）\n2. 已经经过详尽的测试，并已经用于生产环境，每天承载数万亿次的网络通信\n3. 非常容易安装和集成，[evpp] 能够很容易就打包出 deb/rpm/tar.gz 等格式的安装包\n\n除此之外，基于该库之上，还提供两个附带的应用层协议库：\n\n1. [evmc] ：一个纯异步非阻塞式的`memcached`的C++客户端库，支持`membase`集群模式。该库已经用于生产环境，每天发起3000多**亿**次memcache查询请求。详情请见：[evmc readme](/apps/evmc/readme.md)\n2. [evnsq] ： 一个纯异步非阻塞式的`NSQ`的C++客户端库，支持消费者、生产者、服务发现等特性。该库已经用于生产环境，每天生产1300多**亿**条日志消息。详情请见：[evnsq readme](/apps/evnsq/readme.md)\n\n将来还会推出`redis`的客户端库。\n\n\n# 项目由来\n\n我们开发小组负责的业务需要用到TCP协议来建设长连接网关服务和一些其他的一些基于TCP的短连接服务，在调研开源项目的过程中，没有发现一个合适的库来满足我们要求。结合我们自身的业务情况，理想中的C++网络库应具备一下几个特性：\n\n1. 接口简单易用，最好是C++接口\n2. 多线程，也能支持多进程\n2. 最好是基于[libevent]实现（因为现有的历史遗留框架、基础库等是依赖[libevent]），这样能很方便嵌入[libevent]的事件循环，否则改动较大或者集成起来的程序可能会有很多跨线程的调用（这些会带来编程的复杂性以及跨线程锁带来的性能下降）\n\n基于这些需求，可供选择的不多，所以我们只能自己开发一个。开发过程中，接口设计方面基本上大部分是参考[muduo]项目来设计和实现的，当然也做了一些取舍和增改；同时也大量借鉴了[Golang]的一些设计哲学和思想。下面举几个小例子来说明一下：\n\n1. `Duration` ： 这是一个时间区间相关的类，自带时间单位信息，参考了[Golang]项目中的`Duration`实现。我们在其他项目中见到太多的时间是不带单位的，例如`timeout`，到底是秒、毫秒还是微秒？需要看文档说明或具体实现，好一点的设计会将单位带在变量名中，例如`timeout_ms`，但还是没有`Duration`这种独立的类好。目前C++11中也有类似的实现`std::chrono::duration`，但稍显复杂，没有咱们这个借鉴[Golang]实现的版本来的简单明了\n2. `Buffer` ： 这是一个缓冲区类，融合了`muduo`和[Golang]两个项目中相关类的设计和实现\n3. `http::Server` : 这是一个http服务器类，自带线程池，它的事件循环和工作线程调度，完全是线程安全的，业务层不用太多关心跨线程调用问题。同时，还将http服务器的核心功能单独抽取出来形成`http::Service`类，是一个可嵌入型的服务器类，可以嵌入到已有的[libevent]事件循环中\n4. 网络地址的表达就仅仅使用`\"ip:port\"`这种形式字符串表示，就是参考[Golang]的设计\n5. `httpc::ConnPool`是一个http的客户端连接池库，设计上尽量考虑高性能和复用。以后基于此还可以增加负载均衡和故障转移等特性\n\n另外，我们实现过程中极其重视线程安全问题，一个事件相关的资源必须在其所属的`EventLoop`（每个`EventLoop`绑定一个线程）中初始化和析构释放，这样我们能最大限度的减少出错的可能。为了达到这个目标我们重载`event_add`和`event_del`等函数，每一次调用`event_add`，就在对应的线程私有数据中记录该对象，在调用`event_del`时，检查之前该线程私有数据中是否拥有该对象，然后在整个程序退出前，再完整的检查所有线程的私有数据，看看是否仍然有对象没有析构释放。具体实现稍有区别，详细代码实现可以参考 [https://github.com/Qihoo360/evpp/blob/master/evpp/inner_pre.cc#L36~L87](https://github.com/Qihoo360/evpp/blob/master/evpp/inner_pre.cc#L36~L87)。我们如此苛刻的追求线程安全，只是为了让一个程序能**安静的平稳的退出或Reload**，因为我们深刻的理解“编写永远运行的系统，和编写运行一段时间后平静关闭的系统是两码事”，后者要困难的多得多。\n\n\n# 快速开始\n\n请见 [Quick Start](docs/quick_start.md)\n\n\n\n# Benchmark\n\n\n### Benchmark测试报告\n\n[The IO Event performance benchmark against Boost.Asio](docs/benchmark_ioevent_performance_vs_asio.md), 该测试表明在该场景下[evpp]比[asio]高 **20%~50%** 上下\n\n[The ping-pong benchmark against Boost.Asio](docs/benchmark_ping_pong_spend_time_vs_asio.md), 该测试表明在该场景下[evpp]比[asio]高 **5%~20%%** 上下\n\n[The throughput benchmark against libevent2](docs/benchmark_throughput_vs_libevent.md), 该测试表明在该场景下[evpp]比[libevent]高 **17%~130%** 上下\n\n[The throughput benchmark against Boost.Asio](docs/benchmark_throughput_vs_asio.md), 该测试表明在该场景下[evpp]与[asio]的性能基本相当，互相没有明显优势\n\n[The throughput benchmark against Boost.Asio(中文)](docs/benchmark_throughput_vs_asio_cn.md), 该测试表明在该场景下[evpp]与[asio]的性能基本相当，互相没有明显优势\n\n[The throughput benchmark against muduo(中文)](docs/benchmark_throughput_vs_muduo_cn.md), 该测试表明在该场景下[evpp]与[muduo]的性能基本相当，互相没有明显优势\n\n### 吞吐量测试\n\n本文用 ping pong 测试来对比[evpp]与[libevent]、[boost.asio]、muduo] 等网络的吞吐量，测试结果表明[evpp]吞吐量与[boost.asio]、[muduo]等相当，比[libevent]高**17%~130%**左右。\n\n[evpp]本身是基于[libevent]实现的，不过[evpp]只是用了[libevent]的事件循环，并没有用[libevent]的`evbuffer`，而是自己参考[muduo]和[Golang]实现了自己的网络IO读写类[Buffer](https://github.com/Qihoo360/evpp/blob/master/evpp/buffer.h)。\n\n性能测试相关的代码都在这里：[https://github.com/Qihoo360/evpp/tree/master/benchmark/](https://github.com/Qihoo360/evpp/tree/master/benchmark/).\n\n##### 测试对象\n\n1. [evpp-0.2.0](https://github.com/Qihoo360/evpp/archive/0.2.0.tar.gz) based on libevent-2.0.21\n2. boost.asio-1.53\n3. libevent-2.0.21\n\n##### 系统环境\n\n- 操作系统：Linux CentOS 6.2, 2.6.32-220.7.1.el6.x86_64\n- 硬件CPU：Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz\n\n![](https://raw.githubusercontent.com/zieckey/resources/master/evpp/benchmark/throughput/evpp-vs-libevent-1thread-all.png)\n![](https://raw.githubusercontent.com/zieckey/resources/master/evpp/benchmark/throughput/evpp-vs-asio-1thread-all.png)\n\n# Examples\n\n## An echo TCP server\n\n```cpp\n#include <evpp/tcp_server.h>\n#include <evpp/buffer.h>\n#include <evpp/tcp_conn.h>\n\nint main(int argc, char* argv[]) {\n    std::string addr = \"0.0.0.0:9099\";\n    int thread_num = 4;\n    evpp::EventLoop loop;\n    evpp::TCPServer server(&loop, addr, \"TCPEchoServer\", thread_num);\n    server.SetMessageCallback([](const evpp::TCPConnPtr& conn,\n                                 evpp::Buffer* msg,\n                                 evpp::Timestamp ts) {\n        conn->Send(msg);\n    });\n    server.SetConnectionCallback([](const evpp::TCPConnPtr& conn) {\n        if (conn->IsConnected()) {\n            LOG_INFO << \"A new connection from \" << conn->remote_addr();\n        } else {\n            LOG_INFO << \"Lost the connection from \" << conn->remote_addr();\n        }\n    });\n    server.Init();\n    server.Start();\n    loop.Run();\n    return 0;\n}\n```\n\n### An echo HTTP server\n\n```cpp\n#include <evpp/http/http_server.h>\n\nint main(int argc, char* argv[]) {\n    std::vector<int> ports = { 9009, 23456, 23457 };\n    int thread_num = 2;\n    evpp::http::Server server(thread_num);\n    server.RegisterHandler(\"/echo\",\n                           [](evpp::EventLoop* loop,\n                              const evpp::http::ContextPtr& ctx,\n                              const evpp::http::HTTPSendResponseCallback& cb) {\n        cb(ctx->body().ToString()); }\n    );\n    server.Init(ports);\n    server.Start();\n    while (!server.IsStopped()) {\n        usleep(1);\n    }\n    return 0;\n}\n\n```\n\n\n### An echo UDP server\n\n```cpp\n#include <evpp/udp/udp_server.h>\n#include <evpp/udp/udp_message.h>\n\nint main(int argc, char* argv[]) {\n    std::vector<int> ports = { 1053, 5353 };\n    evpp::udp::Server server;\n    server.SetMessageHandler([](evpp::EventLoop* loop, evpp::udp::MessagePtr& msg) {\n        evpp::udp::SendMessage(msg);\n    });\n    server.Init(ports);\n    server.Start();\n\n    while (!server.IsStopped()) {\n        usleep(1);\n    }\n    return 0;\n}\n```\n\n# 用户列表\n\n<img src=\"http://i.imgur.com/dcHpCm4.png\" height = \"100\" width = \"120\" alt=\"Qihoo\">\n\n> 欢迎申请加入该名单 ;-)\n\n# Thanks\n\n1. 感谢[奇虎360公司](http://www.360.cn \"http://www.360.cn\")对该项目的支持\n1. 感谢[libevent], [glog](https://github.com/google/glog), [gtest](https://github.com/google/googletest), [Golang]等项目\n1. [evpp]深度参考了[muduo]项目的实现和设计，非常感谢[Chen Shuo](https://github.com/chenshuo \"https://github.com/chenshuo\")\n\n\n\n[gtest]:https://github.com/google/googletest\n[glog]:https://github.com/google/glog\n[Golang]:https://golang.org\n[muduo]:https://github.com/chenshuo/muduo\n[libevent]:https://github.com/libevent/libevent\n[libevent2]:https://github.com/libevent/libevent\n[LevelDB]:https://github.com/google/leveldb\n[rapidjson]:https://github.com/miloyip/rapidjson\n[Boost.Asio]:http://www.boost.org/\n[boost.asio]:http://www.boost.org/\n[asio]:http://www.boost.org/\n[boost]:http://www.boost.org/\n[evpp]:https://github.com/Qihoo360/evpp\n[evmc]:https://github.com/Qihoo360/evpp/tree/master/apps/evmc\n[evnsq]:https://github.com/Qihoo360/evpp/tree/master/apps/evnsq"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "vsprojects",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}