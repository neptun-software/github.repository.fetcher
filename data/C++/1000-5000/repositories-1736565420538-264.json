{
  "metadata": {
    "timestamp": 1736565420538,
    "page": 264,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "hanickadot/compile-time-regular-expressions",
      "stars": 3432,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".conan",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3876953125,
          "content": "*.o\n*.d\n**/*.tmp\ntest\nresult\ntests/benchmark-exec/*\n!tests/benchmark-exec/Makefile\n!tests/benchmark-exec/.gitignore\n!tests/benchmark-exec/.tm_properties\n!tests/benchmark-exec/*.cpp\n!tests/benchmark-exec/*.hpp\n!tests/benchmark-exec/*.js\n*.pyc\n.conan/test_package/build\nmtent12.txt\n*.zip\ntests/benchmark-range/*\n!tests/benchmark-range/*.cpp\n!tests/benchmark-range/*.hpp\nbuild\ncmake-build-*/*\n.idea/*"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": ".tm_properties",
          "type": "blob",
          "size": 0.1748046875,
          "content": "exclude = \"{$exclude,**/*.dSYM,**/*.d,**/*.o,test,*.tmp}\"\ninclude = \"{$include,.gitignore,.github,.travis*,.conan}\"\nexcludeInFolderSearch = \"{$excludeInFolderSearch,./ctre.hpp}\" \n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.9892578125,
          "content": "language: cpp\ndist: focal\nos: linux\n\njobs:\n  include:\n  - os: linux\n    language: python\n    python: \"3.6\"\n    services:\n      - docker\n    env:\n      - COMPILER=g++-8\n      - CONAN_GCC_VERSIONS=8\n      - CONAN_DOCKER_IMAGE=lasote/conangcc8\n    install:\n       - pip install -U conan conan-package-tools\n    script:\n      - python .conan/build.py\n\n  - os: linux\n    compiler: gcc\n    env:\n      - COMPILER=g++-8\n      - CXX_STANDARD=17\n    addons:\n      apt:\n        packages: ['g++-8']\n\n  - os: linux\n    compiler: gcc\n    env:\n      - COMPILER=g++-8\n      - CXX_STANDARD=2a\n    addons:\n      apt:\n        packages: ['g++-8']\n\n  - os: linux\n    compiler: clang\n    env:\n      - COMPILER=clang++-6.0\n      - CXX_STANDARD=17\n    addons:\n      apt:\n        sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-6.0']\n        packages: ['g++-8', 'clang-6.0']\n\n  - os: linux\n    compiler: clang\n    env:\n      - COMPILER=clang++-6.0\n      - CXX_STANDARD=2a\n    addons:\n      apt:\n        sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-trusty-6.0']\n        packages: ['g++-8', 'clang-6.0']\n\n# FIXME: don't use GCC10 in 17 mode for tests as they are depending on operator\"\"\n#  - os: linux\n#    compiler: gcc\n#    env:\n#      - COMPILER=g++-10\n#      - CXX_STANDARD=17\n#    addons:\n#      apt:\n#        packages: ['g++-10']\n\n  - os: linux\n    compiler: gcc\n    env:\n      - COMPILER=g++-10\n      - CXX_STANDARD=20\n    addons:\n      apt:\n        packages: ['g++-10']\n\n  - os: osx\n    osx_image: xcode10\n    env:\n      - CXX_STANDARD=17\n\n  - os: osx\n    osx_image: xcode10\n    env:\n      - CXX_STANDARD=2a\n\n  - os: osx\n    osx_image: xcode11\n    env:\n      - CXX_STANDARD=17\n\n  - os: osx\n    osx_image: xcode11\n    env:\n      - CXX_STANDARD=2a\n\n  - os: osx\n    osx_image: xcode12\n    env:\n      - CXX_STANDARD=17\n\n  - os: osx\n    osx_image: xcode12\n    env:\n      - CXX_STANDARD=2a\n\ninstall:\n  - if [[ \"${COMPILER}\" != \"\" ]]; then export CXX=${COMPILER}; fi\n  - uname -a\n  - $CXX --version\nscript:\n  - make CXX_STANDARD=$CXX_STANDARD\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 6.4013671875,
          "content": "cmake_minimum_required(VERSION 3.14...3.29)\n\nif(CMAKE_VERSION VERSION_GREATER_EQUAL \"3.29.20240416\") \n\tset(CMAKE_EXPERIMENTAL_CXX_IMPORT_STD \"0e5b6991-d74f-4b3d-a41c-cf096e0b2508\")\n\tset(CMAKE_CXX_MODULE_STD 1)\nendif()\n\n# When updating to a newer version of CMake, see if we can use the following\nproject(ctre\n  HOMEPAGE_URL \"https://compile-time.re\"\n  VERSION 3.9.0\n  LANGUAGES CXX)\nset(PROJECT_DESCRIPTION \"Fast compile-time regular expressions with support for matching/searching/capturing during compile-time or runtime.\")\n\ninclude(CMakePackageConfigHelpers)\ninclude(CMakeDependentOption)\ninclude(GNUInstallDirs)\ninclude(CTest)\n\nfind_program(CTRE_DPKG_BUILDPACKAGE_FOUND dpkg-buildpackage)\nfind_program(CTRE_RPMBUILD_FOUND rpmbuild)\n\ncmake_dependent_option(CTRE_BUILD_TESTS \"Build ctre Tests\" ON\n  \"BUILD_TESTING;CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR\" OFF)\ncmake_dependent_option(CTRE_BUILD_PACKAGE \"Build ctre Packages\" ON\n  \"CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR\" OFF)\ncmake_dependent_option(CTRE_BUILD_PACKAGE_DEB\n  \"Create DEB Package (${PROJECT_NAME})\" ON\n  \"CTRE_BUILD_PACKAGE;CTRE_DPKG_BUILDPACKAGE_FOUND\" OFF)\ncmake_dependent_option(CTRE_BUILD_PACKAGE_RPM\n  \"Create RPM Package (${PROJECT_NAME})\" ON\n  \"CTRE_BUILD_PACKAGE;CTRE_RPMBUILD_FOUND\" OFF)\n\noption(CTRE_MODULE \"build C++ module\" OFF)\n\nif(CTRE_MODULE)\n\tif(CMAKE_VERSION VERSION_GREATER_EQUAL \"3.29.20240416\") \n\t\tadd_library(${PROJECT_NAME})\n\t\t\n\t\ttarget_sources(${PROJECT_NAME} PUBLIC FILE_SET CXX_MODULES TYPE CXX_MODULES FILES ctre.cppm)\n\t\ttarget_sources(${PROJECT_NAME} PUBLIC FILE_SET HEADERS TYPE HEADERS\n\t\t    BASE_DIRS\n\t\t\t\"${CMAKE_CURRENT_SOURCE_DIR}/include\"\n\t\t    FILES \n\t\t\tinclude/ctll.hpp\n\t\t\tinclude/ctre/functions.hpp\n\t\t\tinclude/ctre/utility.hpp\n\t\t\tinclude/ctre/utf8.hpp\n\t\t\tinclude/ctre/evaluation.hpp\n\t\t\tinclude/ctre/starts_with_anchor.hpp\n\t\t\tinclude/ctre/pcre_actions.hpp\n\t\t\tinclude/ctre/rotate.hpp\n\t\t\tinclude/ctre/iterators.hpp\n\t\t\tinclude/ctre/literals.hpp\n\t\t\tinclude/ctre/return_type.hpp\n\t\t\tinclude/ctre/find_captures.hpp\n\t\t\tinclude/ctre/id.hpp\n\t\t\tinclude/ctre/atoms_characters.hpp\n\t\t\tinclude/ctre/actions/mode.inc.hpp\n\t\t\tinclude/ctre/actions/characters.inc.hpp\n\t\t\tinclude/ctre/actions/class.inc.hpp\n\t\t\tinclude/ctre/actions/look.inc.hpp\n\t\t\tinclude/ctre/actions/sequence.inc.hpp\n\t\t\tinclude/ctre/actions/fusion.inc.hpp\n\t\t\tinclude/ctre/actions/asserts.inc.hpp\n\t\t\tinclude/ctre/actions/capture.inc.hpp\n\t\t\tinclude/ctre/actions/named_class.inc.hpp\n\t\t\tinclude/ctre/actions/backreference.inc.hpp\n\t\t\tinclude/ctre/actions/options.inc.hpp\n\t\t\tinclude/ctre/actions/atomic_group.inc.hpp\n\t\t\tinclude/ctre/actions/set.inc.hpp\n\t\t\tinclude/ctre/actions/hexdec.inc.hpp\n\t\t\tinclude/ctre/actions/repeat.inc.hpp\n\t\t\tinclude/ctre/actions/properties.inc.hpp\n\t\t\tinclude/ctre/actions/boundaries.inc.hpp\n\t\t\tinclude/ctre/operators.hpp\n\t\t\tinclude/ctre/pcre.hpp\n\t\t\tinclude/ctre/atoms_unicode.hpp\n\t\t\tinclude/ctre/range.hpp\n\t\t\tinclude/ctre/wrapper.hpp\n\t\t\tinclude/ctre/first.hpp\n\t\t\tinclude/ctre/flags_and_modes.hpp\n\t\t\tinclude/ctre/atoms.hpp\n\t\t\tinclude/unicode-db.hpp\n\t\t\tinclude/unicode-db/unicode_interface.hpp\n\t\t\tinclude/unicode-db/unicode-db.hpp\n\t\t\tinclude/ctll/parser.hpp\n\t\t\tinclude/ctll/actions.hpp\n\t\t\tinclude/ctll/fixed_string.hpp\n\t\t\tinclude/ctll/list.hpp\n\t\t\tinclude/ctll/utilities.hpp\n\t\t\tinclude/ctll/grammars.hpp\n\t\t\tinclude/ctre.hpp\n\t\t\tinclude/ctre-unicode.hpp\n\t\t)\n\t\t\n\t\t# we are using `import std;`\n\t\tif (NOT DEFINED CTRE_CXX_STANDARD OR CTRE_CXX_STANDARD LESS 23)\n\t\t\tset(CTRE_CXX_STANDARD 23)\n\t\tendif()\n\n\t\ttarget_compile_features(${PROJECT_NAME} PUBLIC cxx_std_${CTRE_CXX_STANDARD})\n\n\t\tinstall(TARGETS ${PROJECT_NAME} EXPORT ${PROJECT_NAME}-targets\n\t\t\tFILE_SET CXX_MODULES DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cxx/${PROJECT_NAME}\"\n\t\t\tFILE_SET HEADERS DESTINATION \"include\")\n\telse()\n\t\tmessage(FATAL_ERROR \"unsupported cmake for c++ modules\")\n\tendif()\nelse()\n\tadd_library(${PROJECT_NAME} INTERFACE)\n\t\n\ttarget_include_directories(${PROJECT_NAME} INTERFACE\n\t  $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>\n\t  $<INSTALL_INTERFACE:include>)\n\n\tif (NOT CTRE_CXX_STANDARD)\n\t  set(CTRE_CXX_STANDARD 20)\n\tendif()\n\n\ttarget_compile_features(${PROJECT_NAME} INTERFACE cxx_std_${CTRE_CXX_STANDARD})\n\tset_property(TARGET ${PROJECT_NAME} PROPERTY CXX_SCAN_FOR_MODULES 0)\n\t\n\tinstall(TARGETS ${PROJECT_NAME} EXPORT ${PROJECT_NAME}-targets)\n\tinstall(DIRECTORY include/ DESTINATION include\n\t    FILES_MATCHING PATTERN *.hpp)\nendif()\n\nadd_library(${PROJECT_NAME}::${PROJECT_NAME} ALIAS ${PROJECT_NAME})\n\nif (NOT EXISTS \"${PROJECT_BINARY_DIR}/${PROJECT_NAME}-config.cmake.in\")\n  file(WRITE ${PROJECT_BINARY_DIR}/${PROJECT_NAME}-config.cmake.in [[\n    @PACKAGE_INIT@\n    include(\"${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@-targets.cmake\")\n  ]])\nendif()\n\nconfigure_package_config_file(\n  \"${PROJECT_BINARY_DIR}/${PROJECT_NAME}-config.cmake.in\"\n  \"${PROJECT_BINARY_DIR}/${PROJECT_NAME}-config.cmake\"\n  INSTALL_DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\"\n  NO_SET_AND_CHECK_MACRO\n  NO_CHECK_REQUIRED_COMPONENTS_MACRO)\n\nwrite_basic_package_version_file(ctre-config-version.cmake\n  VERSION ${PROJECT_VERSION}\n  COMPATIBILITY SameMajorVersion)\n\ninstall(EXPORT ${PROJECT_NAME}-targets \n  DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\"\n  NAMESPACE ${PROJECT_NAME}::)\ninstall(\n  FILES\n    \"${PROJECT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake\"\n    \"${PROJECT_BINARY_DIR}/${PROJECT_NAME}-config.cmake\"\n  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})\n\nif(CTRE_BUILD_TESTS)\n  add_subdirectory(tests)\nendif()\n\nif (NOT CTRE_BUILD_PACKAGE)\n  return()\nendif()\n\nlist(APPEND source-generators TBZ2 TGZ TXZ ZIP)\n\nif (CTRE_BUILD_PACKAGE_DEB)\n  list(APPEND binary-generators \"DEB\")\nendif()\n\nif (CTRE_BUILD_PACKAGE_RPM)\n  list(APPEND binary-generators \"RPM\")\nendif()\n\nset(CPACK_SOURCE_GENERATOR ${source-generators})\nset(CPACK_GENERATOR ${binary-generators})\n\nset(CPACK_PACKAGE_FILE_NAME \"${PROJECT_NAME}-${PROJECT_VERSION}\")\nset(CPACK_SOURCE_PACKAGE_FILE_NAME \"${CPACK_PACKAGE_FILE_NAME}\")\n\nset(CPACK_DEBIAN_PACKAGE_MAINTAINER \"Hana Dusíková\")\nset(CPACK_DEBIAN_PACKAGE_DESCRIPTION \"${PROJECT_DESCRIPTION}\")\nset(CPACK_DEBIAN_PACKAGE_NAME \"lib${PROJECT_NAME}-dev\")\n\nset(CPACK_RPM_PACKAGE_NAME \"lib${PROJECT_NAME}-devel\")\n\nset(PKG_CONFIG_FILE_NAME \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc\")\nconfigure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/packaging/pkgconfig.pc.in\" \"${PKG_CONFIG_FILE_NAME}\" @ONLY)\ninstall(FILES \"${PKG_CONFIG_FILE_NAME}\"\n\tDESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\"\n)\n\nlist(APPEND CPACK_SOURCE_IGNORE_FILES /.git/ /build/ .gitignore .DS_Store)\n\ninclude(CPack)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.974609375,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n    TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n    1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n    2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n    3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n    4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n    5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n    6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n    7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n    8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n    9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n    END OF TERMS AND CONDITIONS\n\n    APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n    Copyright [yyyy] [name of copyright owner]\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n\n--- LLVM Exceptions to the Apache 2.0 License ----\n\nAs an exception, if, as a result of your compiling your source code, portions\nof this Software are embedded into an Object form of such source code, you\nmay redistribute such embedded portions in such Object form without complying\nwith the conditions of Sections 4(a), 4(b) and 4(d) of the License.\n\nIn addition, if you combine or link compiled forms of this Software with\nsoftware that is licensed under the GPLv2 (\"Combined Software\") and if a\ncourt of competent jurisdiction determines that the patent provision (Section\n3), the indemnity provision (Section 9) or other Section of the License\nconflicts with the conditions of the GPLv2, you may retroactively and\nprospectively choose to deem waived or otherwise exclude such Section(s) of\nthe License, but only in their entirety and only with respect to the Combined\nSoftware.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.7724609375,
          "content": ".PHONY: default all clean grammar compare single-header single-header/ctre.hpp single-header/ctre-unicode.hpp single-header/unicode-db.hpp\n\ndefault: all\n\t\nTARGETS := $(wildcard tests/benchmark-exec/*.cpp)\nIGNORE := $(wildcard tests/benchmark/*.cpp) $(wildcard tests/benchmark-exec/*.cpp)\n\nDESATOMAT := /bin/false\n\nCXX_STANDARD := 20\n\nPYTHON := python3.9\n\nPEDANTIC:=-pedantic\n\noverride CXXFLAGS := $(CXXFLAGS) -std=c++$(CXX_STANDARD) -Iinclude -O3 $(PEDANTIC) -Wall -Wextra -Werror -Wconversion\nLDFLAGS := \n\nTESTS := $(wildcard tests/*.cpp) $(wildcard tests/benchmark/*.cpp)\nTRUE_TARGETS := $(TARGETS:%.cpp=%)\noverride TRUE_TARGETS := $(filter-out $(IGNORE:%.cpp=%), $(TRUE_TARGETS))\nOBJECTS := $(TARGETS:%.cpp=%.o) $(TESTS:%.cpp=%.o)\noverride OBJECTS := $(filter-out $(IGNORE:%.cpp=%.o),$(OBJECTS))\nDEPEDENCY_FILES := $(OBJECTS:%.o=%.d)\n\nall: $(TRUE_TARGETS) $(OBJECTS)\n\t\nlist:\n\techo $(SUPPORTED_CPP20)\n\t\n$(TRUE_TARGETS): %: %.o\n\t$(CXX)  $< $(LDFLAGS) -o $@ \n\t\n$(OBJECTS): %.o: %.cpp\n\t$(CXX) $(CXXFLAGS) -MMD -c $< -o $@\n\n-include $(DEPEDENCY_FILES)\n\nbenchmark:\n\t@$(MAKE) clean\n\t@$(MAKE) IGNORE=\"\"\n\t\nbenchmark-clean:\n\t@$(MAKE) IGNORE=\"\" clean\n\nclean:\n\trm -f $(TRUE_TARGETS) $(OBJECTS) $(DEPEDENCY_FILES) mtent12.txt mtent12.zip\n\t\ngrammar: include/ctre/pcre.hpp\n\t\nregrammar: \n\t@rm -f include/ctre/pcre.hpp\n\t@$(MAKE) grammar\n\t\ninclude/ctre/pcre.hpp: include/ctre/pcre.gram\n\t@echo \"LL1q $<\"\n\t@$(DESATOMAT) --ll --q --input=include/ctre/pcre.gram --output=include/ctre/ --generator=cpp_ctll_v2  --cfg:fname=pcre.hpp --cfg:namespace=ctre --cfg:guard=CTRE__PCRE__HPP --cfg:grammar_name=pcre\n\t\nmtent12.zip:\n\tcurl -s http://www.gutenberg.org/files/3200/old/mtent12.zip -o mtent12.zip\n\t\nmtent12.txt: mtent12.zip\n\tunzip -o mtent12.zip\n\ttouch mtent12.txt\n\nsingle-header: single-header/ctre.hpp single-header/ctre-unicode.hpp single-header/unicode-db.hpp\n\nsingle-header/unicode-db.hpp: include/unicode-db/unicode-db.hpp\n\tcp $+ $@\n\nsingle-header/ctre.hpp:\n\t${PYTHON} -m quom include/ctre.hpp ctre.hpp.tmp\n\techo \"/*\" > single-header/ctre.hpp\n\tcat LICENSE >> single-header/ctre.hpp\n\techo \"*/\" >> single-header/ctre.hpp\n\tcat ctre.hpp.tmp >> single-header/ctre.hpp\n\trm ctre.hpp.tmp\n\nsingle-header/ctre-unicode.hpp:\n\t${PYTHON} -m quom include/ctre-unicode.hpp ctre-unicode.hpp.tmp\n\techo \"/*\" > single-header/ctre-unicode.hpp\n\tcat LICENSE >> single-header/ctre-unicode.hpp\n\techo \"*/\" >> single-header/ctre-unicode.hpp\n\tcat ctre-unicode.hpp.tmp >> single-header/ctre-unicode.hpp\n\trm ctre-unicode.hpp.tmp\n\t\nREPEAT:=10\n\ncompare: mtent12.txt\n\t$(CXX) $(CXXFLAGS) -MMD -march=native -DPATTERN=\"\\\"(${PATTERN})\\\"\" -c tests/benchmark-range/measurement.cpp -o tests/benchmark-range/measurement.o\n\t$(CXX) tests/benchmark-range/measurement.o -lboost_regex -lpcre2-8 -lre2 -o tests/benchmark-range/measurement\n\ttests/benchmark-range/measurement all mtent12.txt ${REPEAT}\n"
        },
        {
          "name": "NOTES.md",
          "type": "blob",
          "size": 0.517578125,
          "content": "# Unsupported PCRE constructs\n\n* `\\0dd` `\\ddd` `\\0{dd...}` octal numbers\n* `\\Q...\\E` quoting\n* `\\cx` control characters\n* `\\C` data unit\n* `\\h` `\\H` horizontal character classes\n* `\\v` `\\V` vertical character classes\n* `\\p{xx}` `\\P{xx}` character properties\n* `\\X` unicode grapheme cluster\n* boundaries other than `^$`\n* atomic groups\n* comments\n* options/modes\n* subroutines\n* conditional patterns\n* callouts\n* match point reset `\\K`\n\n\n# Other unsupported \"things\"\n* `[[.hyphen.]]` named characters\n* `[[=M=]]` whatever this is\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.4873046875,
          "content": "# Compile Time Regular Expressions v3\n\n[![Build Status](https://github.com/hanickadot/compile-time-regular-expressions/actions/workflows/tests.yml/badge.svg)](https://github.com/hanickadot/compile-time-regular-expressions/actions/workflows/tests.yml)\n\nFast compile-time regular expressions with support for matching/searching/capturing during compile-time or runtime.\n\nYou can use the single header version from directory `single-header`. This header can be regenerated with `make single-header`. If you are using cmake, you can add this directory as subdirectory and link to target `ctre`.\n\nMore info at [compile-time.re](https://compile-time.re/)\n\n## What this library can do\n\n```c++\nctre::match<\"REGEX\">(subject); // C++20\n\"REGEX\"_ctre.match(subject); // C++17 + N3599 extension\n```\n\n* Matching\n* Searching (`search` or `starts_with`)\n* Capturing content (named captures are supported too, but only with syntax `(?<name>...)`)\n* Back-Reference (`\\g{N}` syntax, and `\\1...\\9` syntax too)\n* Multiline support (with `multiline_`) functions\n* Unicode properties and UTF-8 support\n\nThe library is implementing most of the PCRE syntax with a few exceptions:\n\n* callouts\n* comments\n* conditional patterns\n* control characters (`\\cX`)\n* match point reset (`\\K`)\n* named characters\n* octal numbers\n* options / modes\n* subroutines\n* unicode grapheme cluster (`\\X`)\n\nMore documentation on [pcre.org](https://www.pcre.org/current/doc/html/pcre2syntax.html).\n\n### Unknown character escape behaviour\n\nNot all escaped characters are automatically inserted as self, behaviour of the library is escaped characters are with special meaning, unknown escaped character is a syntax error.\n\nExplicitly allowed character escapes which insert only the character are:\n\n```\\-\\\"\\<\\>```\n\n## Basic API\n\nThis is approximated API specification from a user perspective (omitting `constexpr` and `noexcept` which are everywhere, and using C++20 syntax even the API is C++17 compatible):\n```c++\n// look if whole input matches the regex:\ntemplate <fixed_string regex> auto ctre::match(auto Range &&) -> regex_results;\ntemplate <fixed_string regex> auto ctre::match(auto First &&, auto Last &&) -> regex_results;\n\n// look if input contains match somewhere inside of itself:\ntemplate <fixed_string regex> auto ctre::search(auto Range &&) -> regex_results;\ntemplate <fixed_string regex> auto ctre::search(auto First &&, auto Last &&) -> regex_results;\n\n// check if input starts with match (but doesn't need to match everything):\ntemplate <fixed_string regex> auto ctre::starts_with(auto Range &&) -> regex_results;\ntemplate <fixed_string regex> auto ctre::starts_with(auto First &&, auto Last &&) -> regex_results;\n\n// result type is deconstructible into a structured bindings\ntemplate <...> struct regex_results {\n\toperator bool() const; // if it's a match\n\tauto to_view() const -> std::string_view; // also view()\n\tauto to_string() const -> std::string; // also str()\n\toperator std::string_view() const; // also supports all char variants\n\texplicit operator std::string() const;\n\t\n\t// also size(), begin(), end(), data()\n\t\n\tsize_t count() const; // number of captures \n\ttemplate <size_t Id> const captured_content & get() const; // provide specific capture, whole regex_results is implicit capture 0\n};\n```\n\n### Range outputting API\n\n```c++\n// search for regex in input and return each occurrence, ignoring rest:\ntemplate <fixed_string regex> auto ctre::range(auto Range &&) -> range of regex_result;\ntemplate <fixed_string regex> auto ctre::range(auto First &&, auto Last &&) -> range of regex_result;\n\n// return range of each match, stopping at something which can't be matched\ntemplate <fixed_string regex> auto ctre::tokenize(auto Range &&) -> range of regex_result;\ntemplate <fixed_string regex> auto ctre::tokenize(auto First &&, auto Last &&) -> range of regex_result;\n\n// return parts of the input split by the regex, returning it as part of content of the implicit zero capture (other captures are not changed, you can use it to access how the values were split):\ntemplate <fixed_string regex> auto ctre::split(auto Range &&) -> regex_result;\ntemplate <fixed_string regex> auto ctre::split(auto First &&, auto Last &&) -> range of regex_result;\n```\n\n### Functors\n\nAll the functions (`ctre::match`, `ctre::search`, `ctre::starts_with`, `ctre::range`, `ctre::tokenize`, `ctre::split`) are functors and can be used without parenthesis:\n\n```c++\nauto matcher = ctre::match<\"regex\">;\nif (matcher(input)) ...\n```\n\n### Possible subjects (inputs)\n\n* `std::string`-like objects (`std::string_view` or your own string if it's providing `begin`/`end` functions with forward iterators)\n* pairs of forward iterators\n\n### Unicode support\n\nTo enable you need to include:\n\n* `<ctre-unicode.hpp>`\n* or `<ctre.hpp>` and `<unicode-db.hpp>`\n\nOtherwise you will get missing symbols if you try to use the unicode support without enabling it.\n\n## Supported compilers\n\n* clang 7.0+ (template UDL, C++17 syntax)\n* xcode clang 10.0+ (template UDL, C++17 syntax)\n* clang 12.0+ (C++17 syntax, C++20 cNTTP syntax)\n* gcc 8.0+ (template UDL, C++17 syntax)\n* gcc 9.0+ (C++17 & C++20 cNTTP syntax)\n* MSVC 14.29+ (Visual Studio 16.11+) (C++20) \n\n### Template UDL syntax\n\nThe compiler must support extension N3599, for example as GNU extension in gcc (not in GCC 9.1+) and clang.\n\n```c++\nconstexpr auto match(std::string_view sv) noexcept {\n    using namespace ctre::literals;\n    return \"h.*\"_ctre.match(sv);\n}\n```\n\nIf you need extension N3599 in GCC 9.1+, you can't use -pedantic. Also, you need to define macro `CTRE_ENABLE_LITERALS`.\n\n### C++17 syntax\n\nYou can provide a pattern as a `constexpr ctll::fixed_string` variable.\n\n```c++\nstatic constexpr auto pattern = ctll::fixed_string{ \"h.*\" };\n\nconstexpr auto match(std::string_view sv) noexcept {\n    return ctre::match<pattern>(sv);\n}\n```\n\n(this is tested in MSVC 15.8.8)\n\n### C++20 syntax\n\nCurrently, the only compiler which supports cNTTP syntax `ctre::match<PATTERN>(subject)` is GCC 9+.\n\n```c++\nconstexpr auto match(std::string_view sv) noexcept {\n    return ctre::match<\"h.*\">(sv);\n}\n```\n\n## Examples\n\n### Extracting number from input\n\n```c++\nstd::optional<std::string_view> extract_number(std::string_view s) noexcept {\n    if (auto m = ctre::match<\"[a-z]+([0-9]+)\">(s)) {\n        return m.get<1>().to_view();\n    } else {\n        return std::nullopt;\n    }\n}\n```\n\n[link to compiler explorer](https://gcc.godbolt.org/z/5U67_e)\n\n### Extracting values from date\n\n```c++\nstruct date { std::string_view year; std::string_view month; std::string_view day; };\n\nstd::optional<date> extract_date(std::string_view s) noexcept {\n    using namespace ctre::literals;\n    if (auto [whole, year, month, day] = ctre::match<\"(\\\\d{4})/(\\\\d{1,2})/(\\\\d{1,2})\">(s); whole) {\n        return date{year, month, day};\n    } else {\n        return std::nullopt;\n    }\n}\n\n// static_assert(extract_date(\"2018/08/27\"sv).has_value());\n// static_assert((*extract_date(\"2018/08/27\"sv)).year == \"2018\"sv);\n// static_assert((*extract_date(\"2018/08/27\"sv)).month == \"08\"sv);\n// static_assert((*extract_date(\"2018/08/27\"sv)).day == \"27\"sv);\n```\n\n[link to compiler explorer](https://gcc.godbolt.org/z/x64CVp)\n\n### Using captures\n\n```c++\nauto result = ctre::match<\"(?<year>\\\\d{4})/(?<month>\\\\d{1,2})/(?<day>\\\\d{1,2})\">(s);\nreturn date{result.get<\"year\">(), result.get<\"month\">, result.get<\"day\">};\n\n// or in C++ emulation, but the object must have a linkage\nstatic constexpr ctll::fixed_string year = \"year\";\nstatic constexpr ctll::fixed_string month = \"month\";\nstatic constexpr ctll::fixed_string day = \"day\";\nreturn date{result.get<year>(), result.get<month>(), result.get<day>()};\n\n// or use numbered access\n// capture 0 is the whole match\nreturn date{result.get<1>(), result.get<2>(), result.get<3>()};\n```\n\n### Lexer\n\n```c++\nenum class type {\n    unknown, identifier, number\n};\n\nstruct lex_item {\n    type t;\n    std::string_view c;\n};\n\nstd::optional<lex_item> lexer(std::string_view v) noexcept {\n    if (auto [m,id,num] = ctre::match<\"([a-z]+)|([0-9]+)\">(v); m) {\n        if (id) {\n            return lex_item{type::identifier, id};\n        } else if (num) {\n            return lex_item{type::number, num};\n        }\n    }\n    return std::nullopt;\n}\n```\n\n[link to compiler explorer](https://gcc.godbolt.org/z/PKTiCC)\n\n### Range over input\n\nThis support is preliminary, probably the API will be changed.\n\n```c++\nauto input = \"123,456,768\"sv;\n\nfor (auto match: ctre::search_all<\"([0-9]+),?\">(input))\n    std::cout << std::string_view{match.get<0>()} << \"\\n\";\n```\n\n### Unicode\n\n```c++\n#include <ctre-unicode.hpp>\n#include <iostream>\n\n// needed if you want to output to the terminal\nstd::string_view cast_from_unicode(std::u8string_view input) noexcept {\n    return std::string_view(reinterpret_cast<const char *>(input.data()), input.size());\n}\n\nint main() {\n    using namespace std::literals;\n    std::u8string_view original = u8\"Tu es un génie\"sv;\n\n    for (auto match: ctre::search_all<\"\\\\p{Letter}+\">(original))\n        std::cout << cast_from_unicode(match) << std::endl;\n    return 0;\n}\n```\n\n[link to compiler explorer](https://godbolt.org/z/erTshe6sz)\n\n\n## Installing ctre using vcpkg\n\nYou can download and install ctre using the [vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\n\n```bash\ngit clone https://github.com/Microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.sh\n./vcpkg integrate install\n./vcpkg install ctre\n```\n\nThe ctre port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\n## Running tests (for developers)\n\nJust run `make` in root of this project.\n"
        },
        {
          "name": "clang-bench.txt",
          "type": "blob",
          "size": 0.40234375,
          "content": "//--------- ABCD|DEFGH|EFGHI|A{4,}\negrep 0m49.353s\nCTRE 0m10.093s\nPCRE 0m12.515s\nstd::regex 21m9.309s\n//--------- [0-9a-fA-F]{8,16}\negrep 0m32.256s\nCTRE 0m14.197s\nPCRE 0m17.832s\nstd::regex 2m34.505s\n//--------- ^([0-9]{4,16})?[aA]\negrep 0m12.880s\nCTRE 0m7.596s\nPCRE 0m6.590s\nstd::regex 7m54.793s\n//--------- ([aAbB]{4,}|[xXyY]{4,}|[1234]{4,})0\negrep 1m56.412s\nCTRE 0m59.864s\nPCRE 0m43.486s\nstd::regex 27m35.004s\n"
        },
        {
          "name": "conanfile.py",
          "type": "blob",
          "size": 0.7021484375,
          "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom conans import ConanFile\n\n\nclass CtreConan(ConanFile):\n    name = \"CTRE\"\n    license = \"Apache 2.0 with LLVM Exception\"\n    url = \"https://github.com/hanickadot/compile-time-regular-expressions\"\n    author = \"Hana Dusíková (ctre@hanicka.net)\"\n    description = \"Compile Time Regular Expression for C++17/20\"\n    homepage = \"https://github.com/hanickadot/compile-time-regular-expressions\"\n    no_copy_source = True\n    scm = {\n        \"type\": \"git\",\n        \"url\": \"auto\",\n        \"revision\": \"auto\"\n    }\n    \n    def package(self):\n        self.copy(\"LICENSE\", \"licenses\")\n        self.copy(\"*.hpp\")\n    \n    def package_id(self):\n        self.info.header_only()\n\n"
        },
        {
          "name": "ctre.cppm",
          "type": "blob",
          "size": 0.4033203125,
          "content": "module;\n\n#ifdef _MSVC_LANG\n#pragma warning( disable : 5202 )\n#endif\n\nimport std;\n\nexport module ctre;\n\n#define CTRE_IN_A_MODULE\n#define CTLL_IN_A_MODULE\n#define UNICODE_DB_IN_A_MODULE\n\nusing std::int16_t;\nusing std::int32_t;\nusing std::int64_t;\nusing std::int8_t;\nusing std::size_t;\nusing std::uint16_t;\nusing std::uint32_t;\nusing std::uint64_t;\nusing std::uint8_t;\n\n#include \"ctre.hpp\"\n#include \"unicode-db.hpp\"\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "future.cpp",
          "type": "blob",
          "size": 0.2685546875,
          "content": "#include <ctre.hpp>\n#include <optional>\n#include <iostream>\n\nstd::string match(std::string_view sv) {\n\tif (auto match = ctre::match<\"[a-z]+\">(sv); match) {\n\t\treturn match.to_string();\n\t} else {\n\t\treturn \"not_match\";\n\t}\n} \n\nint main() {\n\tstd::cout << match(\"hello\") << \"\\n\";\n}"
        },
        {
          "name": "gcc-bench.txt",
          "type": "blob",
          "size": 0.396484375,
          "content": "//--------- ABCD|DEFGH|EFGHI|A{4,}\negrep 0m50.036s\nCTRE 0m3.982s\nPCRE 0m8.621s\nstd::regex 0m55.058s\n//--------- [0-9a-fA-F]{8,16}\negrep 0m32.361s\nCTRE 0m4.291s\nPCRE 0m13.958s\nstd::regex 0m18.179s\n//--------- ^([0-9]{4,16})?[aA]\negrep 0m12.819s\nCTRE 0m2.844s\nPCRE 0m2.614s\nstd::regex 0m22.876s\n//--------- ([aAbB]{4,}|[xXyY]{4,}|[1234]{4,})0\negrep 1m45.696s\nCTRE 0m7.623s\nPCRE 0m39.808s\nstd::regex 1m2.799s\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "packaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "single-header",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}