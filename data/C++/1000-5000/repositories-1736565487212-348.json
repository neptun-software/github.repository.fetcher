{
  "metadata": {
    "timestamp": 1736565487212,
    "page": 348,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jupyter-xeus/xeus-cling",
      "stars": 3132,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".appveyor.yml",
          "type": "blob",
          "size": 1.7724609375,
          "content": "build: false\n\nplatform:\n  - x64\n\nimage:\n  - Visual Studio 2019\n\nenvironment:\n  matrix:\n    - MINICONDA: C:\\\\xeus-conda\n\ninit:\n  - \"ECHO %MINICONDA%\"\n  - if \"%APPVEYOR_BUILD_WORKER_IMAGE%\" == \"Visual Studio 2015\" set VCVARPATH=\"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\vcvarsall.bat\"\n  - if \"%APPVEYOR_BUILD_WORKER_IMAGE%\" == \"Visual Studio 2015\" set VCARGUMENT=%PLATFORM%\n  - if \"%APPVEYOR_BUILD_WORKER_IMAGE%\" == \"Visual Studio 2017\" set VCVARPATH=\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat\"\n  - if \"%APPVEYOR_BUILD_WORKER_IMAGE%\" == \"Visual Studio 2019\" set VCVARPATH=\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat\"\n  - echo \"%VCVARPATH% %VCARGUMENT%\"\n  - \"%VCVARPATH% %VCARGUMENT%\"\n  - ps: Start-FileDownload 'http://repo.continuum.io/miniconda/Miniconda3-latest-Windows-x86_64.exe' C:\\Miniconda.exe; echo \"Done\"\n  - cmd: C:\\Miniconda.exe /S /D=C:\\xeus-conda\n  - \"set PATH=%MINICONDA%;%MINICONDA%\\\\Scripts;%MINICONDA%\\\\Library\\\\bin;%PATH%\"\n\ninstall:\n  - conda config --set always_yes yes --set changeps1 no\n  - conda update -q conda\n  - conda info -a\n  # Install dependencies\n  - conda install cmake dirent xeus-zmq=1.1.0 cling=0.9 nlohmann_json cppzmq xtl=0.7 pugixml cpp-argparse doctest>=2.4.6 zlib -c conda-forge\n  # Build and install xeus-cling\n  - mkdir build\n  - cd build\n  - cmake -G \"NMake Makefiles\" -D CMAKE_INSTALL_PREFIX=%MINICONDA%\\\\Library -D CMAKE_BUILD_TYPE=Release -D XEXTRA_JUPYTER_DATA_DIR=%MINICONDA%\\\\share\\\\jupyter -D XEUS_CLING_BUILD_TESTS=ON ..\n  - nmake\n  - nmake install\n  # Install jupyter_kernel_test and pytest\n  - conda install pytest jupyter_kernel_test -c conda-forge\n\nbuild_script:\n  - cd test\n  - test_xeus_cling\n  - cd.. && cd.. && cd test && py.test . & exit 0\n"
        },
        {
          "name": ".azure-pipelines",
          "type": "tree",
          "content": null
        },
        {
          "name": ".binder",
          "type": "tree",
          "content": null
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.408203125,
          "content": "BasedOnStyle: Mozilla\n\nAccessModifierOffset: '-4'\nAlignAfterOpenBracket: BlockIndent\nAlignEscapedNewlines: Left\nAllowAllArgumentsOnNextLine: false\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: false\nAllowShortIfStatementsOnASingleLine: false\n# Forbid one line lambdas because clang-format makes a weird split when\n# single instructions lambdas are too long.\nAllowShortLambdasOnASingleLine: Empty\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakTemplateDeclarations: Yes\nBinPackArguments: false\nBinPackParameters: false\nBreakBeforeBinaryOperators: NonAssignment\nBreakBeforeBraces: Allman\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializers: BeforeComma\nBreakInheritanceList: AfterComma\nBreakStringLiterals: false\nColumnLimit: '110'\nConstructorInitializerIndentWidth: '4'\nContinuationIndentWidth: '4'\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nDisableFormat: false\nEmptyLineAfterAccessModifier: Always\nEmptyLineBeforeAccessModifier: Always\nExperimentalAutoDetectBinPacking: true\nIndentCaseLabels: true\nIndentWidth: '4'\nIndentWrappedFunctionNames: false\nInsertBraces: true\nInsertTrailingCommas: Wrapped\nKeepEmptyLinesAtTheStartOfBlocks: false\nLambdaBodyIndentation: Signature\nLanguage: Cpp\nMaxEmptyLinesToKeep: '2'\nNamespaceIndentation: All\nObjCBlockIndentWidth: '4'\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: false\nPackConstructorInitializers: Never\nPenaltyBreakAssignment: 100000\nPenaltyBreakBeforeFirstCallParameter: 0\nPenaltyBreakComment: 10\nPenaltyBreakOpenParenthesis: 0\nPenaltyBreakTemplateDeclaration: 0\nPenaltyExcessCharacter: 10\nPenaltyIndentedWhitespace: 0\nPenaltyReturnTypeOnItsOwnLine: 10\nPointerAlignment: Left\nQualifierAlignment: Custom  # Experimental\nQualifierOrder: [inline, static, constexpr, const, volatile, type]\nReflowComments: true\nSeparateDefinitionBlocks: Always\nSortIncludes: CaseInsensitive\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: true\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: '2'\nSpacesInAngles: false\nSpacesInCStyleCastParentheses: false\nSpacesInContainerLiterals: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard: c++14\nTabWidth: '4'\nUseTab: Never\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.634765625,
          "content": "# Prerequisites\n*.d\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\n# Vim tmp files\n*.swp\n\n# Test build artefacts\ntest/CMakeCache.txt\ntest/Makefile\ntest/CMakeFiles/\ntest/cmake_install.cmake\n\n# Documentation build artefacts\ndocs/CMakeCache.txt\ndocs/xml/\ndocs/build/\n\n# Build directory\nbuild/\n\n# generated kernel specs\n/share/jupyter/kernels/xcpp11/kernel.json\n/share/jupyter/kernels/xcpp14/kernel.json\n/share/jupyter/kernels/xcpp17/kernel.json\n\n# Jupyter artefacts\n.ipynb_checkpoints/\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 17.470703125,
          "content": "####################################################################################\n# Copyright (c) 2016, Johan Mabille, Loic Gouarin, Sylvain Corlay, Wolf Vollprecht #\n# Copyright (c) 2016, QuantStack                                                   #\n#                                                                                  #\n# Distributed under the terms of the BSD 3-Clause License.                         #\n#                                                                                  #\n# The full license is in the file LICENSE, distributed with this software.         #\n####################################################################################\n\ncmake_minimum_required(VERSION 3.4.3)\nproject(xeus-cling)\n\nset(XEUS_CLING_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/include)\n\n# Versionning\n# ===========\n\nfile(STRINGS \"${XEUS_CLING_INCLUDE_DIR}/xeus-cling/xeus_cling_config.hpp\" xeus_cling_version_defines\n     REGEX \"#define XEUS_CLING_VERSION_(MAJOR|MINOR|PATCH)\")\nforeach(ver ${xeus_cling_version_defines})\n    if(ver MATCHES \"#define XEUS_CLING_VERSION_(MAJOR|MINOR|PATCH) +([^ ]+)$\")\n        set(XEUS_CLING_VERSION_${CMAKE_MATCH_1} \"${CMAKE_MATCH_2}\" CACHE INTERNAL \"\")\n    endif()\nendforeach()\nset(${PROJECT_NAME}_VERSION\n    ${XEUS_CLING_VERSION_MAJOR}.${XEUS_CLING_VERSION_MINOR}.${XEUS_CLING_VERSION_PATCH})\nmessage(STATUS \"Building xeus-cling v${${PROJECT_NAME}_VERSION}\")\n\n# Configuration\n# =============\n\ninclude(GNUInstallDirs)\n\nif (NOT DEFINED XEUS_CLING_KERNELSPEC_PATH)\n    set(XEUS_CLING_KERNELSPEC_PATH \"${CMAKE_INSTALL_FULL_BINDIR}/\")\nendif ()\n\nconfigure_file (\n    \"${CMAKE_CURRENT_SOURCE_DIR}/share/jupyter/kernels/xcpp11/kernel.json.in\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/share/jupyter/kernels/xcpp11/kernel.json\"\n)\n\nconfigure_file (\n    \"${CMAKE_CURRENT_SOURCE_DIR}/share/jupyter/kernels/xcpp14/kernel.json.in\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/share/jupyter/kernels/xcpp14/kernel.json\"\n)\n\nconfigure_file (\n    \"${CMAKE_CURRENT_SOURCE_DIR}/share/jupyter/kernels/xcpp17/kernel.json.in\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/share/jupyter/kernels/xcpp17/kernel.json\"\n)\n\n#######################\n# Rely on llvm-config #\n#######################\n\nset(CONFIG_OUTPUT)\nfind_program(LLVM_CONFIG \"llvm-config\")\nif(LLVM_CONFIG)\n    message(STATUS \"Found LLVM_CONFIG as ${LLVM_CONFIG}\")\n    set(CONFIG_COMMAND ${LLVM_CONFIG}\n        \"--assertion-mode\"\n        \"--bindir\"\n        \"--libdir\"\n        \"--includedir\"\n        \"--prefix\"\n        \"--src-root\")\n    execute_process(COMMAND ${CONFIG_COMMAND}\n                    RESULT_VARIABLE HAD_ERROR\n                    OUTPUT_VARIABLE CONFIG_OUTPUT)\n    if(NOT HAD_ERROR)\n        string(REGEX REPLACE\n               \"[ \\t]*[\\r\\n]+[ \\t]*\" \";\"\n               CONFIG_OUTPUT ${CONFIG_OUTPUT})\n    else()\n        string(REPLACE \";\" \" \" CONFIG_COMMAND_STR \"${CONFIG_COMMAND}\")\n        message(STATUS \"${CONFIG_COMMAND_STR}\")\n        message(FATAL_ERROR \"llvm-config failed with status ${HAD_ERROR}\")\n    endif()\nelse()\n    message(FATAL_ERROR \"llvm-config not found -- ${LLVM_CONFIG}\")\nendif()\n\nlist(GET CONFIG_OUTPUT 0 ENABLE_ASSERTIONS)\nlist(GET CONFIG_OUTPUT 1 TOOLS_BINARY_DIR)\nlist(GET CONFIG_OUTPUT 2 LIBRARY_DIR)\nlist(GET CONFIG_OUTPUT 3 INCLUDE_DIR)\nlist(GET CONFIG_OUTPUT 4 LLVM_OBJ_ROOT)\nlist(GET CONFIG_OUTPUT 5 MAIN_SRC_DIR)\n\nif(NOT MSVC_IDE)\n    set(LLVM_ENABLE_ASSERTIONS ${ENABLE_ASSERTIONS} CACHE BOOL \"Enable assertions\")\n    mark_as_advanced(LLVM_ENABLE_ASSERTIONS)\nendif()\n\nset(LLVM_TOOLS_BINARY_DIR ${TOOLS_BINARY_DIR} CACHE PATH \"Path to llvm/bin\")\nset(LLVM_LIBRARY_DIR ${LIBRARY_DIR} CACHE PATH \"Path to llvm/lib\")\nset(LLVM_MAIN_INCLUDE_DIR ${INCLUDE_DIR} CACHE PATH \"Path to llvm/include\")\nset(LLVM_BINARY_DIR ${LLVM_OBJ_ROOT} CACHE PATH \"Path to LLVM build tree\")\nset(LLVM_MAIN_SRC_DIR ${MAIN_SRC_DIR} CACHE PATH \"Path to LLVM source tree\")\n\ninclude_directories(${LLVM_MAIN_INCLUDE_DIR})\nlink_directories(${LLVM_LIBRARY_DIR})\nadd_definitions(-DLLVM_DIR=\"${LLVM_BINARY_DIR}\")\n\n################\n# Dependencies #\n################\n\nset(xeus-zmq_REQUIRED_VERSION 1.1.0)\n\nfind_package(xeus-zmq ${xeus-zmq_REQUIRED_VERSION} REQUIRED)\nfind_package(pugixml REQUIRED)\n\nfind_package(Clang REQUIRED)\nfind_package(Cling REQUIRED)\nfind_package(argparse REQUIRED)\n\n#########\n# flags #\n#########\n\ninclude(CheckCXXCompilerFlag)\n\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Release\" CACHE STRING\n        \"Choose the build type, e.g. Release or Debug.\" FORCE)\nendif()\n\nif(MSVC)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /wd4251 /wd4141\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /wd4018 /wd4267 /wd4715 /wd4146 /wd4129\")\nendif()\n\nif (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" OR CMAKE_CXX_COMPILER_ID MATCHES \"GNU\" OR CMAKE_CXX_COMPILER_ID MATCHES \"Intel\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wunused-parameter -Wextra -Wreorder\")\n\n    CHECK_CXX_COMPILER_FLAG(\"-std=c++17\" HAS_CPP17_FLAG)\n\n    if (HAS_CPP17_FLAG)\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++17\")\n    else()\n        message(FATAL_ERROR \"Unsupported compiler -- xeus requires C++17 support!\")\n    endif()\nendif()\n\n###################\n# Target and link #\n###################\n\nset(CMAKE_INSTALL_RPATH \"${CMAKE_INSTALL_PREFIX}/lib; ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}\")\n\n# xeus-cling sources\nset(XEUS_CLING_SRC\n    src/xinput.hpp\n    src/xinput.cpp\n    src/xinterpreter.cpp\n    src/xdemangle.hpp\n    src/xoptions.cpp\n    src/xparser.cpp\n    src/xparser.hpp\n    src/xholder_cling.cpp\n    src/xmagics/executable.cpp\n    src/xmagics/executable.hpp\n    src/xmagics/execution.cpp\n    src/xmagics/execution.hpp\n    src/xmagics/os.cpp\n    src/xmagics/os.hpp\n    src/xmime_internal.hpp\n)\n\n# xeus-cling headers\nset(XEUS_CLING_HEADERS\n    include/xeus-cling/xbuffer.hpp\n    include/xeus-cling/xeus_cling_config.hpp\n    include/xeus-cling/xholder_cling.hpp\n    include/xeus-cling/xinterpreter.hpp\n    include/xeus-cling/xmagics.hpp\n    include/xeus-cling/xmanager.hpp\n    include/xeus-cling/xoptions.hpp\n    include/xeus-cling/xpreamble.hpp\n)\n\n# xcpp sources\nset(XCPP_SRC\n    src/main.cpp\n)\n\n# xcpp headers (needed at runtime by the C++ kernel)\nset(XCPP_HEADERS\n    include/xcpp/xmime.hpp\n    include/xcpp/xdisplay.hpp\n)\n\n# xeus-cling is the target for the library\nadd_library(xeus-cling SHARED ${XEUS_CLING_SRC} ${XEUS_CLING_HEADERS})\n\n# xcpp is the target for the kernel executable\nadd_executable(xcpp ${XCPP_SRC})\nset_target_properties(xcpp PROPERTIES ENABLE_EXPORTS 1)\ntarget_link_libraries(xcpp PRIVATE xeus-cling)\n\nset(LLVM_NO_DEAD_STRIP 1)\n\nif (APPLE)\n    set_target_properties(xcpp xeus-cling PROPERTIES\n        MACOSX_RPATH ON\n    )\nelse()\n    set_target_properties(xcpp xeus-cling PROPERTIES\n        BUILD_WITH_INSTALL_RPATH 1\n        SKIP_BUILD_RPATH FALSE\n    )\nendif()\n\nset_target_properties(xcpp xeus-cling PROPERTIES\n    INSTALL_RPATH_USE_LINK_PATH TRUE\n)\n\ntarget_include_directories(xeus-cling\n                           PUBLIC\n                           $<BUILD_INTERFACE:${XEUS_CLING_INCLUDE_DIR}>\n                           $<INSTALL_INTERFACE:include>)\ntarget_link_libraries(xeus-cling PUBLIC clingInterpreter clingMetaProcessor clingUtils xeus-zmq pugixml argparse::argparse)\n\nset_target_properties(xeus-cling PROPERTIES\n                      PUBLIC_HEADER \"${XEUS_CLING_HEADERS}\"\n                      COMPILE_DEFINITIONS \"XEUS_CLING_EXPORTS\"\n                      PREFIX \"\"\n                      VERSION ${${PROJECT_NAME}_VERSION}\n                      SOVERSION ${XEUS_CLING_VERSION_MAJOR}\n                      OUTPUT_NAME \"libxeus-cling\")\n\nif(MSVC)\n    set_target_properties(xeus-cling PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS 1)  # Internal string\n\n    # Internal string\n    set(cling_exports ?kEmptyCollection@valuePrinterInternal@cling@@3QEBDEB)\n\n    # RTTI/C++ symbols\n    set(cling_exports ${cling_exports} ??_7type_info@@6B@\n        ?__type_info_root_node@@3U__type_info_node@@A\n        ?nothrow@std@@3Unothrow_t@1@B\n        ?_Facet_Register@std@@YAXPEAV_Facet_base@1@@Z\n    )\n\n    # Compiler added symbols for static variables. NOT for VStudio < 2015\n    set(cling_exports ${cling_exports} _Init_thread_abort _Init_thread_epoch\n        _Init_thread_footer _Init_thread_header _tls_index\n    )\n\n    # new/delete variants needed when linking to static msvc runtime (esp. Debug)\n    set(cling_exports ${cling_exports}\n        #??2@YAPEAX_KPEBDH@Z  ## not used in cling\n        #??_U@YAPEAX_KPEBDH@Z ## not used in cling\n        ??2@YAPEAX_K@Z\n        ??3@YAXPEAX@Z\n        ??3@YAXPEAX_K@Z\n        ??_U@YAPEAX_K@Z\n        ??_V@YAXPEAX@Z\n    )\n\n    # Most (if not all) of these MSVC decided are inlines that aren't exported\n    # TODO: There are probably some missing. Why?\n    set(cling_exports ${cling_exports} ?print@Decl@clang@@QEBAXAEAVraw_ostream@llvm@@I_N@Z\n        ??6raw_ostream@llvm@@QEAAAEAV01@PEBX@Z\n        ?decls_begin@DeclContext@clang@@QEBA?AVdecl_iterator@12@XZ\n        ?errs@llvm@@YAAEAVraw_ostream@1@XZ\n        ?grow_pod@SmallVectorBase@llvm@@IEAAXPEAX_K1@Z\n        ?write@raw_ostream@llvm@@QEAAAEAV12@E@Z\n        ?write@raw_ostream@llvm@@QEAAAEAV12@PEBD_K@Z\n        ?castFromDeclContext@Decl@clang@@SAPEAV12@PEBVDeclContext@2@@Z\n        ??1raw_ostream@llvm@@UEAA@XZ\n        ??1raw_string_ostream@llvm@@UEAA@XZ\n        ?flush_nonempty@raw_ostream@llvm@@AEAAXXZ\n        ?getASTContext@Decl@clang@@QEBAAEAVASTContext@2@XZ\n        ?preferred_buffer_size@raw_ostream@llvm@@MEBA_KXZ\n        ?write_impl@raw_string_ostream@llvm@@EEAAXPEBD_K@Z\n        ?castToDeclContext@Decl@clang@@SAPEAVDeclContext@2@PEBV12@@Z\n        ?classof@DeclContext@clang@@SA_NPEBVDecl@2@@Z\n        ?setValueNoAlloc@internal@runtime@cling@@YAXPEAX00D@Z\n        ?setValueNoAlloc@internal@runtime@cling@@YAXPEAX00D_K@Z\n        ?setValueNoAlloc@internal@runtime@cling@@YAXPEAX00DM@Z\n        ?setValueNoAlloc@internal@runtime@cling@@YAXPEAX00DN@Z\n        ?setValueWithAlloc@internal@runtime@cling@@YAPEAXPEAX00D@Z\n        ?setValueNoAlloc@internal@runtime@cling@@YAXPEAX00DPEBX@Z\n        cling_runtime_internal_throwIfInvalidPointer\n    )\n\n    set(cling_exports ${cling_exports}\n        ?printValue@cling@@YA?AV?$$basic_string@DU?$$char_traits@D@std@@V?$$allocator@D@2@@std@@PEAPEBD@Z\n        ?printValue@cling@@YA?AV?$$basic_string@DU?$$char_traits@D@std@@V?$$allocator@D@2@@std@@PEAPEBX@Z\n        ?printValue@cling@@YA?AV?$$basic_string@DU?$$char_traits@D@std@@V?$$allocator@D@2@@std@@PEBC@Z\n        ?printValue@cling@@YA?AV?$$basic_string@DU?$$char_traits@D@std@@V?$$allocator@D@2@@std@@PEBD@Z \n        ?printValue@cling@@YA?AV?$$basic_string@DU?$$char_traits@D@std@@V?$$allocator@D@2@@std@@PEBE@Z\n        ?printValue@cling@@YA?AV?$$basic_string@DU?$$char_traits@D@std@@V?$$allocator@D@2@@std@@PEBF@Z\n        ?printValue@cling@@YA?AV?$$basic_string@DU?$$char_traits@D@std@@V?$$allocator@D@2@@std@@PEBG@Z\n        ?printValue@cling@@YA?AV?$$basic_string@DU?$$char_traits@D@std@@V?$$allocator@D@2@@std@@PEBH@Z\n        ?printValue@cling@@YA?AV?$$basic_string@DU?$$char_traits@D@std@@V?$$allocator@D@2@@std@@PEBI@Z\n        ?printValue@cling@@YA?AV?$$basic_string@DU?$$char_traits@D@std@@V?$$allocator@D@2@@std@@PEBJ@Z\n        ?printValue@cling@@YA?AV?$$basic_string@DU?$$char_traits@D@std@@V?$$allocator@D@2@@std@@PEBK@Z\n        ?printValue@cling@@YA?AV?$$basic_string@DU?$$char_traits@D@std@@V?$$allocator@D@2@@std@@PEBM@Z\n        ?printValue@cling@@YA?AV?$$basic_string@DU?$$char_traits@D@std@@V?$$allocator@D@2@@std@@PEBN@Z\n        ?printValue@cling@@YA?AV?$$basic_string@DU?$$char_traits@D@std@@V?$$allocator@D@2@@std@@PEBO@Z\n        ?printValue@cling@@YA?AV?$$basic_string@DU?$$char_traits@D@std@@V?$$allocator@D@2@@std@@PEBQEBD@Z\n        ?printValue@cling@@YA?AV?$$basic_string@DU?$$char_traits@D@std@@V?$$allocator@D@2@@std@@PEBV23@@Z\n        ?printValue@cling@@YA?AV?$$basic_string@DU?$$char_traits@D@std@@V?$$allocator@D@2@@std@@PEBV?$$basic_string@_SU?$$char_traits@_S@std@@V?$$allocator@_S@2@@3@@Z\n        ?printValue@cling@@YA?AV?$$basic_string@DU?$$char_traits@D@std@@V?$$allocator@D@2@@std@@PEBV?$$basic_string@_UU?$$char_traits@_U@std@@V?$$allocator@_U@2@@3@@Z\n        ?printValue@cling@@YA?AV?$$basic_string@DU?$$char_traits@D@std@@V?$$allocator@D@2@@std@@PEBV?$$basic_string@_WU?$$char_traits@_W@std@@V?$$allocator@_W@2@@3@@Z\n        ?printValue@cling@@YA?AV?$$basic_string@DU?$$char_traits@D@std@@V?$$allocator@D@2@@std@@PEBVValue@1@@Z\n        ?printValue@cling@@YA?AV?$$basic_string@DU?$$char_traits@D@std@@V?$$allocator@D@2@@std@@PEBX@Z\n        ?printValue@cling@@YA?AV?$$basic_string@DU?$$char_traits@D@std@@V?$$allocator@D@2@@std@@PEB_J@Z\n        ?printValue@cling@@YA?AV?$$basic_string@DU?$$char_traits@D@std@@V?$$allocator@D@2@@std@@PEB_K@Z\n        ?printValue@cling@@YA?AV?$$basic_string@DU?$$char_traits@D@std@@V?$$allocator@D@2@@std@@PEB_N@Z\n        ?printValue@cling@@YA?AV?$$basic_string@DU?$$char_traits@D@std@@V?$$allocator@D@2@@std@@PEB_S@Z\n        ?printValue@cling@@YA?AV?$$basic_string@DU?$$char_traits@D@std@@V?$$allocator@D@2@@std@@PEB_U@Z\n        ?printValue@cling@@YA?AV?$$basic_string@DU?$$char_traits@D@std@@V?$$allocator@D@2@@std@@PEB_W@Z\n    )\n\n    if($<CONFIG:Debug>)\n        set(cling_exports ${cling_exports} ??$dyn_cast@VValueDecl@clang@@$$CBVDecl@2@@llvm@@YAPEBVValueDecl@clang@@PEBVDecl@2@@Z)\n    endif()\n\n    # List to '/EXPORT:sym0 /EXPORT:sym1 /EXPORT:sym2 ...'\n    foreach(sym ${cling_exports})\n        set(cling_link_str \"${cling_link_str} /EXPORT:${sym}\")\n    endforeach(sym ${cling_exports})\n\n    set_property(TARGET xeus-cling APPEND_STRING PROPERTY LINK_FLAGS ${cling_link_str})\nendif(MSVC)\n\nset(XEUS_SEARCH_PATH $<JOIN:$<TARGET_PROPERTY:xeus-cling,INCLUDE_DIRECTORIES>,:>)\ntarget_compile_definitions(xeus-cling PRIVATE \"XEUS_SEARCH_PATH=\\\"${XEUS_SEARCH_PATH}\\\"\")\n\n\n#########\n# Tests #\n#########\n\nOPTION(XEUS_CLING_BUILD_TESTS \"xeus-cling test suite\" OFF)\n\nif(XEUS_CLING_BUILD_TESTS)\n    add_subdirectory(test)\nendif()\n\n################\n# Installation #\n################\n\ninclude(CMakePackageConfigHelpers)\n\nset(XEUS_CLING_CMAKECONFIG_INSTALL_DIR \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\" CACHE STRING \"install path for xeus-clingConfig.cmake\")\n\n# Install xeus-cling and xcpp\ninstall(TARGETS xeus-cling\n        EXPORT ${PROJECT_NAME}-targets\n        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n        PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/xeus-cling)\ninstall(TARGETS xcpp\n        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})\n\n# Configuration and data directories for jupyter and xeus-cling\nset(XJUPYTER_DATA_DIR   \"share/jupyter\"    CACHE STRING \"Jupyter data directory\")\nset(XEUS_CLING_DATA_DIR \"share/xeus-cling\" CACHE STRING \"xeus-cling data directory\")\nset(XEUS_CLING_CONF_DIR \"etc/xeus-cling\"   CACHE STRING \"xeus-cling configuration directory\")\n\n# Install xcpp headers\ninstall(FILES ${XCPP_HEADERS}\n        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/xcpp)\n\n# Install Jupyter kernelspecs\nset(XCPP_KERNELSPEC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/share/jupyter/kernels)\ninstall(DIRECTORY ${XCPP_KERNELSPEC_DIR}\n        DESTINATION ${XJUPYTER_DATA_DIR}\n        PATTERN \"*.in\" EXCLUDE)\n\n# Extra path for installing Jupyter kernelspec\nif (XEXTRA_JUPYTER_DATA_DIR)\n    install(DIRECTORY ${XCPP_KERNELSPEC_DIR}\n            DESTINATION ${XEXTRA_JUPYTER_DATA_DIR}\n            PATTERN \"*.in\" EXCLUDE)\nendif(XEXTRA_JUPYTER_DATA_DIR)\n\n# Install xeus-cling tag files\nset(XCPP_TAGFILES_DIR ${CMAKE_CURRENT_SOURCE_DIR}/share/xeus-cling/tagfiles)\ninstall(DIRECTORY ${XCPP_TAGFILES_DIR}\n        DESTINATION ${XEUS_CLING_DATA_DIR})\n\nset(XCPP_TAGCONFS_DIR ${CMAKE_CURRENT_SOURCE_DIR}/etc/xeus-cling/tags.d)\ninstall(DIRECTORY ${XCPP_TAGCONFS_DIR}\n        DESTINATION ${XEUS_CLING_CONF_DIR})\n\n# Add definitions for the kernel to find tagfiles.\nadd_definitions(-DXCPP_TAGFILES_DIR=\"${CMAKE_INSTALL_PREFIX}/${XEUS_CLING_DATA_DIR}/tagfiles\")\nif(CMAKE_INSTALL_PREFIX STREQUAL \"/usr\")\n    # install into /etc instead of /usr/etc\n    add_definitions(-DXCPP_TAGCONFS_DIR=\"/${XEUS_CLING_CONF_DIR}/tags.d\")\nelse()\n    add_definitions(-DXCPP_TAGCONFS_DIR=\"${CMAKE_INSTALL_PREFIX}/${XEUS_CLING_CONF_DIR}/tags.d\")\nendif()\n\n# Makes the project importable from the build directory\nexport(EXPORT ${PROJECT_NAME}-targets\n       FILE \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Targets.cmake\")\n\n# Configure 'xeus-clingConfig.cmake' for a build tree\nset(XEUS_CLING_CONFIG_CODE \"####### Expanded from \\@XEUS_CLING_CONFIG_CODE\\@ #######\\n\")\nset(XEUS_CLING_CONFIG_CODE \"${XEUS_CLING_CONFIG_CODE}set(CMAKE_MODULE_PATH \\\"${CMAKE_CURRENT_SOURCE_DIR}/cmake;\\${CMAKE_MODULE_PATH}\\\")\\n\")\nset(XEUS_CLING_CONFIG_CODE \"${XEUS_CLING_CONFIG_CODE}##################################################\")\nconfigure_package_config_file(${PROJECT_NAME}Config.cmake.in\n                              \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake\"\n                              INSTALL_DESTINATION ${PROJECT_BINARY_DIR})\n\n# Configure 'xeus-clingConfig.cmake' for an install tree\nset(XEUS_CLING_CONFIG_CODE \"\")\nconfigure_package_config_file(${PROJECT_NAME}Config.cmake.in\n                              \"${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/${PROJECT_NAME}Config.cmake\"\n                              INSTALL_DESTINATION ${XEUS_CLING_CMAKECONFIG_INSTALL_DIR})\n\nwrite_basic_package_version_file(${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\n                                 VERSION ${${PROJECT_NAME}_VERSION}\n                                 COMPATIBILITY AnyNewerVersion)\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/${PROJECT_NAME}Config.cmake\n              ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\n              DESTINATION ${XEUS_CLING_CMAKECONFIG_INSTALL_DIR})\ninstall(EXPORT ${PROJECT_NAME}-targets\n        FILE ${PROJECT_NAME}Targets.cmake\n        DESTINATION ${XEUS_CLING_CMAKECONFIG_INSTALL_DIR})\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.1650390625,
          "content": "# Contributing to Xeus-cling\n\nXeus and xeus-cling are subprojects of Project Jupyter and subject to the [Jupyter governance](https://github.com/jupyter/governance) and [Code of conduct](https://github.com/jupyter/governance/blob/master/conduct/code_of_conduct.md).\n\n## General Guidelines\n\nFor general documentation about contributing to Jupyter projects, see the [Project Jupyter Contributor Documentation](https://jupyter.readthedocs.io/en/latest/contributor/content-contributor.html).\n\n## Community\n\nThe Xeus team organizes public video meetings. The schedule for future meetings and minutes of past meetings can be found on our [team compass](https://jupyter-xeus.github.io/).\n\n## Setting up a development environment\n\nFirst, you need to fork the project. Then setup your environment:\n\n```bash\n# create a new conda environment\nconda create -n xeus-cling -c conda-forge -c defaults xtl nlohmann_json cppzmq cpp-argparse pugixml xeus cling\nconda activate xeus-cling\n\n# download xeus-cling from your GitHub fork\ngit clone https://github.com/<your-github-username>/xeus-cling.git\n```\n\nYou may also want to install a C++ compiler, and cmake from conda if they are not available on your system.\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.46484375,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2017, \nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.1845703125,
          "content": "# ![xeus-cling](docs/source/xeus-cling.svg)\n[![Azure Pipelines](https://dev.azure.com/jupyter-xeus/jupyter-xeus/_apis/build/status/jupyter-xeus.xeus-cling?branchName=master)](https://dev.azure.com/jupyter-xeus/jupyter-xeus/_build/latest?definitionId=4&branchName=master)\n[![Appveyor](https://ci.appveyor.com/api/projects/status/qn0wskxlvy52utuv?svg=true)](https://ci.appveyor.com/project/jupyter-xeus/xeus-cling)\n[![Documentation Status](http://readthedocs.org/projects/xeus-cling/badge/?version=latest)](https://xeus-cling.readthedocs.io/en/latest/?badge=latest)\n[![Binder](https://img.shields.io/badge/launch-binder-brightgreen.svg)](https://mybinder.org/v2/gh/jupyter-xeus/xeus-cling/stable?filepath=notebooks/xcpp.ipynb)\n[![Join the Gitter Chat](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/QuantStack/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n`xeus-cling` is a Jupyter kernel for C++ based on the C++ interpreter [cling](https://github.com/root-project/cling) and\nthe native implementation of the Jupyter protocol [xeus](https://github.com/jupyter-xeus/xeus).\n\n## Installation\n\nxeus-cling has been packaged for the mamba (or conda) package manager on the **Linux** and **OS X** platforms. At the moment, we are not providing packages for the **Windows** platform.\n\nTo ensure that the installation works, it is preferable to install `xeus-cling` in a fresh environment. It is also needed to use a [miniforge](https://github.com/conda-forge/miniforge) or [miniconda](https://conda.io/miniconda.html) installation because with the full [anaconda](https://www.anaconda.com/) you may have a conflict with the `ZeroMQ` library which is already installed in the anaconda distribution.\n\n### Installation with mamba or conda\n\nThe safest usage is to create an environment named `cling`:\n\n```\nmamba create -n cling\nsource activate cling\n```\n\nThen you can install in this environment `xeus-cling` and its dependencies\n\n```\nmamba install xeus-cling -c conda-forge\n```\n\n### Installation from source\n\nYou will first need to create a new environment and install the dependencies:\n\n```bash\nmamba create -n xeus-cling -c conda-forge cmake xeus-zmq cling nlohmann_json=3.11.2 cppzmq xtl pugixml doctest cpp-argparse\nsource activate xeus-cling\n```\nPlease refer to [environment-host.yml](https://github.com/jupyter-xeus/xeus-cling/blob/main/environment-host.yml) for packages specific versions to install if applicable.\n\nYou can then compile the sources. From the build directory, run:\n\n```bash\ncmake -D CMAKE_INSTALL_PREFIX=${CONDA_PREFIX} -D CMAKE_C_COMPILER=$CC -D CMAKE_CXX_COMPILER=$CXX -D CMAKE_INSTALL_LIBDIR=${CONDA_PREFIX}/lib ..\nmake && make install\n```\n\nIf you don't have a frontend already installed (classic Jupyter Notebook or JupyterLab for instance), install one:\n\n```bash\nmamba install jupyterlab -c conda-forge\n```\n\n## Trying it online\n\nTo try out xeus-cling interactively in your web browser, just click on the binder\nlink:\n\n[![Binder](binder-logo.svg)](https://mybinder.org/v2/gh/jupyter-xeus/xeus-cling/stable?filepath=notebooks/xcpp.ipynb)\n\n## Documentation\n\nTo get started with using `xeus-cling`, check out the full documentation\n\nhttp://xeus-cling.readthedocs.io/\n\n## Usage\n\nLaunch the jupyter notebook with `jupyter notebook` and launch a new C++ notebook by selecting the **C++17** kernel in the *new* dropdown.\n\n### A C++ notebook\n\nYou can now make use of the C++ programming language in the Jupyter notebook.\n\n![A C++ notebook](notebook.png)\n\n### Inline help and tab-completion\n\nQuick help is shown on the pager with the special `?` magic.\n\n![Help](help.png)\n\nContent for the quick help is available for the standard library, and can be made available for third-party packages.\n\n### Rendering of rich outputs\n\n![Rich output](rich-output.png)\n\n### Jupyter interactive widgets\n\nA C++ backend for the Jupyter interactive widgets is available in the [`xwidgets`](https://github.com/jupyter-xeus/xwidgets/) package.\n\n![Widgets](widgets.gif)\n\n## Dependencies\n\n``xeus-cling`` depends on\n\n - [xeus-zmq](https://github.com/jupyter-xeus/xeus-zmq)\n - [xtl](https://github.com/xtensor-stack/xtl)\n - [cling](https://github.com/root-project/cling)\n - [pugixml](https://github.com/zeux/pugixml)\n - [cpp-argparse](https://github.com/p-ranav/argparse)\n - [nlohmann_json](https://github.com/nlohmann/json)\n\n\n| `xeus-cling` |   `xeus-zmq`    |      `xtl`      |     `cling`   |   `pugixml`   | `cppzmq` | `cpp-argparse`| `nlohmann_json` | `dirent` (windows only) |\n|--------------|-----------------|-----------------|---------------|---------------|----------|---------------|-----------------|-------------------------|\n|  main        |  >=1.1.0,<2.0.0 |  >=0.7.0,<0.8.0 | >=0.9,<0.10   | ~1.8.1        | ~4.3.0   |     ~3.0      | ~3.11.2         | >=2.3.2,<3              |\n|  0.15.3      |  >=1.1.0,<2.0.0 |  >=0.7.0,<0.8.0 | >=0.9,<0.10   | ~1.8.1        | ~4.3.0   |     ~2.9      | >=3.6.1,<4.0    | >=2.3.2,<3              |\n|  0.15.2      |  >=1.1.0,<2.0.0 |  >=0.7.0,<0.8.0 | >=0.9,<0.10   | ~1.8.1        | ~4.3.0   |     ~2.9      | >=3.6.1,<4.0    | >=2.3.2,<3              |\n|  0.15.1      |  >=1.0.0,<2.0.0 |  >=0.7.0,<0.8.0 | >=0.9,<0.10   | ~1.8.1        | ~4.3.0   |     ~2.9      | >=3.6.1,<4.0    | >=2.3.2,<3              |\n|  0.15.0      |  >=1.0.0,<2.0.0 |  >=0.7.0,<0.8.0 | >=0.9,<0.10   | ~1.8.1        | ~4.3.0   |     ~2.9      | >=3.6.1,<4.0    | >=2.3.2,<3              |\n\n\nPrior to version 0.15, `xeus-cling` was depending on `cxxopts` instead of `cpp-argparse`.\n\n| `xeus-cling` |   `xeus-zmq`    |      `xtl`      |     `cling`   |   `pugixml`   | `cppzmq` | `cxxopts`     | `nlohmann_json` | `dirent` (windows only) |\n|--------------|-----------------|-----------------|---------------|---------------|----------|---------------|-----------------|-------------------------|\n|  0.14.0      |  >=1.0.0,<2.0.0 |  >=0.7.0,<0.8.0 | >=0.6,<0.9    | ~1.8.1        | ~4.3.0   | >=2.1.1,<=2.2 | >=3.6.1,<4.0    | >=2.3.2,<3              |\n\nPrior to version 0.14, `xeus-cling` was depending on `xeus` instead of `xeus-zmq`:\n\n| `xeus-cling` |   `xeus`        |      `xtl`      |     `cling`   |   `pugixml`   | `cppzmq` | `cxxopts`     | `nlohmann_json` | `dirent` (windows only) |\n|--------------|-----------------|-----------------|---------------|---------------|----------|---------------|-----------------|-------------------------|\n|  0.13.0      |  >=2.0.0,<3.0.0 |  >=0.7.0,<0.8.0 | >=0.6,<0.9    | ~1.8.1        | ~4.3.0   | >=2.1.1,<=2.2 | >=3.6.1,<3.10   | >=2.3.2,<3              |\n|  0.12.1      |  >=1.0.0,<2.0.0 |  >=0.7.0,<0.8.0 | >=0.6,<0.9    | ~1.8.1        | ~4.3.0   | >=2.1.1,<=2.2 | >=3.6.1,<4.0    | >=2.3.2,<3              |\n|  0.12.0      |  >=1.0.0,<2.0.0 |  >=0.7.0,<0.8.0 | >=0.6,<0.9    | ~1.8.1        | ~4.3.0   | >=2.1.1,<=2.2 | >=3.6.1,<4.0    | >=2.3.2,<3              |\n\n`xeus-cling` requires its dependencies to be built with the same compiler and same C runtime as the one used to build `cling`.\n\n## Contributing\n\nSee [CONTRIBUTING.md](./CONTRIBUTING.md) to know how to contribute and set up a development environment.\n\n## License\n\nWe use a shared copyright model that enables all contributors to maintain the\ncopyright on their contributions.\n\nThis software is licensed under the BSD-3-Clause license. See the [LICENSE](LICENSE) file for details.\n"
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 0.138671875,
          "content": "trigger:\n  - main\n\njobs:\n  - template: ./.azure-pipelines/azure-pipelines-linux.yml\n  - template: ./.azure-pipelines/azure-pipelines-osx.yml\n\n"
        },
        {
          "name": "binder-logo.svg",
          "type": "blob",
          "size": 2.9375,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\r\n<svg version=\"1.1\" id=\"Layer_1\"\n\t xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"424.236px\"\r\n\t height=\"131.176px\" viewBox=\"0 0 212.118 65.883\" enable-background=\"new 0 0 212.118 65.883\" xml:space=\"preserve\">\r\n<switch>\r\n\t<g>\n\t\t<g>\r\n\t\t\t<path fill=\"#545454\" d=\"M50.751,48.727V12.472h7.251v17.547c1.885-2.32,4.544-3.094,7.299-3.094\r\n\t\t\t\tc6.042,0,10.586,5.269,10.586,11.167S71.344,49.21,65.302,49.21c-2.755,0-5.849-0.87-7.299-3.046v2.562H50.751z M63.078,43.409\r\n\t\t\t\tc2.9,0,5.076-2.514,5.076-5.317s-2.175-5.317-5.076-5.317s-5.076,2.514-5.076,5.317S60.178,43.409,63.078,43.409z\"/>\r\n\t\t\t<path fill=\"#545454\" d=\"M84.35,15.855c2.32,0,4.254,1.885,4.254,4.254c0,2.32-1.934,4.254-4.254,4.254\r\n\t\t\t\tc-2.369,0-4.254-1.934-4.254-4.254C80.096,17.741,81.981,15.855,84.35,15.855z M80.724,48.727V27.409h7.251v21.318H80.724z\"/>\r\n\t\t\t<path fill=\"#545454\" d=\"M115.819,48.727h-7.25V36.642c0-2.514-0.967-3.867-3.239-3.867s-4.061,2.417-4.061,5.317v10.635h-7.251\r\n\t\t\t\tV27.409h7.251v2.61c1.45-1.837,3.722-3.094,6.526-3.094c5.704,0,8.024,3.916,8.024,9.716V48.727z\"/>\r\n\t\t\t<path fill=\"#545454\" d=\"M144.826,48.727h-7.251v-2.562c-1.45,2.176-4.592,3.046-7.299,3.046c-6.043,0-10.587-5.221-10.587-11.118\r\n\t\t\t\ts4.544-11.167,10.587-11.167c2.707,0,5.414,0.773,7.299,3.094V12.472h7.251V48.727z M132.499,32.774\r\n\t\t\t\tc-2.9,0-5.075,2.514-5.075,5.317s2.175,5.317,5.075,5.317s5.076-2.514,5.076-5.317S135.399,32.774,132.499,32.774z\"/>\r\n\t\t\t<path fill=\"#545454\" d=\"M173.639,38.962h-16.532c0,2.466,1.74,5.075,4.592,5.075c2.562,0,4.158-1.691,4.206-3.238h7.396\r\n\t\t\t\tc-1.256,5.607-5.801,8.411-11.456,8.411c-7.348,0-12.423-4.351-12.423-11.118c0-6.671,5.269-11.167,12.423-11.167\r\n\t\t\t\tc6.478,0,11.843,3.867,11.843,10.683C173.687,38.043,173.639,38.527,173.639,38.962z M166.726,35.53c0,0-0.338-3.964-4.736-3.964\r\n\t\t\t\tc-4.545,0-4.786,3.964-4.786,3.964H166.726z\"/>\r\n\t\t\t<path fill=\"#545454\" d=\"M185.532,38.092v10.635h-7.251V27.409h7.251v2.61c1.111-1.595,2.949-3.094,5.607-3.094\r\n\t\t\t\tc0.629,0,1.596,0.193,2.176,0.483v6.574h-0.098c-0.725-0.87-1.788-1.208-2.9-1.208C187.61,32.774,185.532,35.53,185.532,38.092z\"\r\n\t\t\t\t/>\r\n\t\t</g>\r\n\t\t<circle fill=\"none\" stroke=\"#F5A252\" stroke-width=\"4.8342\" stroke-miterlimit=\"10\" cx=\"27.879\" cy=\"23.939\" r=\"9.542\"/>\r\n\t\t<circle fill=\"none\" stroke=\"#579ACA\" stroke-width=\"4.8342\" stroke-miterlimit=\"10\" cx=\"27.879\" cy=\"42.499\" r=\"9.543\"/>\r\n\t\t<circle fill=\"none\" stroke=\"#E66581\" stroke-width=\"4.8342\" stroke-miterlimit=\"10\" cx=\"18.551\" cy=\"33.289\" r=\"9.543\"/>\r\n\t\t<path fill=\"none\" stroke=\"#579ACA\" stroke-width=\"4.8342\" stroke-miterlimit=\"10\" d=\"M20.196,36.836\r\n\t\t\tc0.759-1.031,1.74-1.927,2.921-2.607c4.566-2.63,10.401-1.06,13.031,3.507\"/>\r\n\t\t<path fill=\"none\" stroke=\"#F5A252\" stroke-width=\"4.8342\" stroke-miterlimit=\"10\" d=\"M19.61,28.701\r\n\t\t\tc-2.63-4.566-1.061-10.401,3.507-13.032c4.567-2.63,10.401-1.059,13.031,3.508\"/>\r\n\t</g>\r\n</switch>\r\n</svg>\r\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "environment-build.yml",
          "type": "blob",
          "size": 0.111328125,
          "content": "name: build-xeus-cling\nchannels:\n  - conda-forge\ndependencies:\n  # Build dependencies\n  - cmake\n  - cxx-compiler\n\n"
        },
        {
          "name": "environment-host.yml",
          "type": "blob",
          "size": 0.29296875,
          "content": "name: xeus-cling\nchannels:\n  - conda-forge\ndependencies:\n  # Build dependencies\n  - cmake\n  # Host dependencies\n  - xeus-zmq=1.1.0\n  - cling=0.9\n  - nlohmann_json=3.11.2\n  - cppzmq\n  - xtl=0.7\n  - pugixml\n  - cpp-argparse\n  # Test dependencies\n  - pytest\n  - jupyter_kernel_test\n  - doctest >= 2.4.6\n"
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "help.png",
          "type": "blob",
          "size": 86.9326171875,
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "notebook.png",
          "type": "blob",
          "size": 77.576171875,
          "content": null
        },
        {
          "name": "notebooks",
          "type": "tree",
          "content": null
        },
        {
          "name": "readthedocs.yml",
          "type": "blob",
          "size": 0.037109375,
          "content": "conda:\n    file: docs/environment.yml\n"
        },
        {
          "name": "rich-output.png",
          "type": "blob",
          "size": 162.537109375,
          "content": null
        },
        {
          "name": "share",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "widgets.gif",
          "type": "blob",
          "size": 838.7880859375,
          "content": null
        },
        {
          "name": "xeus-clingConfig.cmake.in",
          "type": "blob",
          "size": 1.3466796875,
          "content": "############################################################################\n# Copyright (c) 2016, Johan Mabille, Loic Gouarin and Sylvain Corlay       #\n#                                                                          #\n# Distributed under the terms of the BSD 3-Clause License.                 #\n#                                                                          #\n# The full license is in the file LICENSE, distributed with this software. #\n############################################################################\n\n# xeus-cling cmake module\n# This module sets the following variables in your project::\n#\n#   xeus-cling_FOUND - true if xeus-cling found on the system\n#   xeus-cling_INCLUDE_DIRS - the directory containing xeus-cling headers\n#   xeus-cling_LIBRARY - the library for dynamic linking\n\n@PACKAGE_INIT@\n\nset(CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR};${CMAKE_MODULE_PATH}\")\n\n@XEUS_CLING_CONFIG_CODE@\n\ninclude(CMakeFindDependencyMacro)\nfind_dependency(xeus @xeus_REQUIRED_VERSION@)\nfind_dependency(cppzmq @cppzmq_REQUIRED_VERSION@)\nfind_dependency(pugixml)\nfind_dependency(argparse)\n\nif(NOT TARGET xeus-cling)\n  include(\"${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@Targets.cmake\")\n\n  get_target_property(@PROJECT_NAME@_INCLUDE_DIR xeus-cling INTERFACE_INCLUDE_DIRECTORIES)\n  get_target_property(@PROJECT_NAME@_LIBRARY xeus-cling LOCATION)\nendif()\n"
        }
      ]
    }
  ]
}