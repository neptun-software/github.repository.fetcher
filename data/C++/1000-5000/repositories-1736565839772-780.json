{
  "metadata": {
    "timestamp": 1736565839772,
    "page": 780,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "MHeironimus/ArduinoJoystickLibrary",
      "stars": 2160,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0068359375,
          "content": ".vscode"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.8427734375,
          "content": "## How to contribute to the Arduino Joystick Library\n\n### Report a bug\n\n* **Check to see if the bug has already reported** by searching on GitHub under [Issues](https://github.com/MHeironimus/ArduinoJoystickLibrary/issues).\n\n* If you're unable to find an open issue addressing the problem, [open a new one](https://github.com/MHeironimus/ArduinoJoystickLibrary/issues/new). Be sure to include a **title and clear description**, as much relevant information as possible (e.g. host OS, Arduino IDE version, etc.), any important hardware information (e.g. name of Arduino board being used, specific pin wirings if they are relevant, etc.), and a **sample sketch** file demonstrating the issue.\n\n### Fix a bug\n\n* Open a new GitHub pull request with the fix.\n\n* Ensure the PR description clearly describes the problem and solution. Include the relevant issue number if applicable.\n\n### Whitespace, format code, or cosmetic updates\n\n* Changes that are cosmetic in nature and do not add anything substantial to the stability, functionality, or testability will generally not be accepted.\n\n### Adding a new feature\n\n* Feel free to [create a new issue](https://github.com/MHeironimus/ArduinoJoystickLibrary/issues/new) to document the feature you are planning to add. This will allow others to see and comment on what you would plan to add to the library.\n\n### Questions about the library\n\n* Be sure to check the [FAQ](https://github.com/MHeironimus/ArduinoJoystickLibrary/wiki/FAQ) in the [Wiki](https://github.com/MHeironimus/ArduinoJoystickLibrary/wiki) to see if your question has already been answered.\n* Another good place to look for general Arduino questions is the [Arduino]() website.\n\nThe Arduino Joystick Library is a volunteer effort done in volunteer's spare time. Please be patient as it may take some time for bugs to be fixed, features to be added, and questions to be answered.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 7.4716796875,
          "content": "                   GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.2373046875,
          "content": "# Arduino Joystick Library\n\n#### Version 2.1.1\n\nThis library can be used with Arduino IDE 1.6.6 or above (see [Wiki - Testing Details](https://github.com/MHeironimus/ArduinoJoystickLibrary/wiki/Testing-Details) for more information) to add one or more joysticks (or gamepads) to the list of HID devices an [Arduino Leonardo](https://www.arduino.cc/en/Main/ArduinoBoardLeonardo) or [Arduino Micro](https://www.arduino.cc/en/Main/ArduinoBoardMicro) (or any Arduino clone that is based on the ATmega32u4) can support. This library will also work with the [Arduino Due](https://www.arduino.cc/en/Main/ArduinoBoardDue), thanks to [@Palakis](https://github.com/Palakis). A complete list of supported boards can be found in the [Wiki - Supported Boards](https://github.com/MHeironimus/ArduinoJoystickLibrary/wiki/Supported-Boards). This will not work with Arduino IDE 1.6.5 (or below) or with non-32u4 based Arduino devices (e.g. Arduino UNO, Arduino MEGA, etc.).\n\n## Features\n\nThe joystick or gamepad can have the following features:\n- Buttons (default: 32)\n- Up to 2 Hat Switches\n- X, Y, and/or Z Axis (up to 16-bit precision)\n- X, Y, and/or Z Axis Rotation (up to 16-bit precision)\n- Rudder (up to 16-bit precision)\n- Throttle (up to 16-bit precision)\n- Accelerator (up to 16-bit precision)\n- Brake (up to 16-bit precision)\n- Steering (up to 16-bit precision)\n\n## Installation Instructions\n\nThe following instructions can be used to install the latest version of the library in the Arduino IDE (thanks to [@per1234](https://github.com/per1234) for this update):\n\n1. Download https://github.com/MHeironimus/ArduinoJoystickLibrary/archive/master.zip\n2. In the Arduino IDE, select `Sketch` > `Include Library` > `Add .ZIP Library...`.  Browse to where the downloaded ZIP file is located and click `Open`. The Joystick library's examples will now appear under `File` > `Examples` > `Joystick`.\n\n## Examples\n\n### Simple example\n\n```C++\n#include <Joystick.h>\n\n// Create the Joystick\nJoystick_ Joystick;\n\n// Constant that maps the physical pin to the joystick button.\nconst int pinToButtonMap = 9;\n\nvoid setup() {\n\t// Initialize Button Pins\n\tpinMode(pinToButtonMap, INPUT_PULLUP);\n\n\t// Initialize Joystick Library\n\tJoystick.begin();\n}\n\n// Last state of the button\nint lastButtonState = 0;\n\nvoid loop() {\n\n\t// Read pin values\n\tint currentButtonState = !digitalRead(pinToButtonMap);\n\tif (currentButtonState != lastButtonState)\n\t{\n\tJoystick.setButton(0, currentButtonState);\n\tlastButtonState = currentButtonState;\n\t}\n\n\tdelay(50);\n}\n```\n\n### Included Examples\n\nThe following example Arduino sketch files are included in this library:\n\n#### Simple Samples\n\n- `JoystickButton` - Creates a Joystick and maps pin 9 to button 0 of the joystick, pin 10 to button 1, pin 11 to button 2, and pin 12 to button 3.\n- `JoystickKeyboard` - Creates a Joystick and a Keyboard. Maps pin 9 to Joystick Button 0, pin 10 to Joystick Button 1, pin 11 to Keyboard key 1, and pin 12 to Keyboard key 2.\n- `GamepadExample` - Creates a simple Gamepad with an Up, Down, Left, Right, and Fire button.\n- `FunduinoJoystickShield` - Creates a simple Gamepad using a Funduino Joystick Shield (https://protosupplies.com/product/funduino-joystick-shield-v1-a/).\n- `ArcadeStickExample` - Simple arcade stick example that demonstrates how to read twelve Arduino Pro Micro digital pins and map them to the library (thanks to [@nebhead](https://github.com/nebhead) for this example). NOTE: This sketch is for the Arduino Pro Micro only.\n\n#### Used for Testing\n\n- `JoystickTest` - Simple test of the Joystick library. It exercises many of the Joystick library’s functions when pin A0 is grounded.\n- `MultipleJoystickTest` - Creates 4 Joysticks using the library (each with a slightly different configuration) and exercises the first 16 buttons (if present), the X axis, and the Y axis of each joystick when pin A0 is grounded.\n- `FlightControllerTest` - Creates a Flight Controller and tests 32 buttons, the X and Y axis, the Throttle, and the Rudder when pin A0 is grounded.\n- `HatSwitchTest` - Creates a joystick with two hat switches. Grounding pins 4 - 11 cause the hat switches to change position.\n- `DrivingControllerTest` - Creates a Driving Controller and tests 4 buttons, the Steering, Brake, and Accelerator when pin A0 is grounded.\n\n## Joystick Library API\n\nThe following API is available if the Joystick library in included in a sketch file.\n\n### Joystick\\_(...)\n\nConstructor used to initialize and setup the Joystick. The following optional parameters are available:\n\n- `uint8_t hidReportId` - Default: `0x03` - Indicates the joystick's HID report ID. This value must be unique if you are creating multiple instances of Joystick. Do not use `0x01` or `0x02` as they are used by the built-in Arduino Keyboard and Mouse libraries.\n- `uint8_t joystickType` - Default: `JOYSTICK_TYPE_JOYSTICK` or `0x04` - Indicates the HID input device type. Supported values:\n  - `JOYSTICK_TYPE_JOYSTICK` or `0x04` - Joystick \n  - `JOYSTICK_TYPE_GAMEPAD` or `0x05` - Gamepad\n  - `JOYSTICK_TYPE_MULTI_AXIS` or `0x08` - Multi-axis Controller \n- `uint8_t buttonCount` - Default: `32` - Indicates how many buttons will be available on the joystick.\n- `uint8_t hatSwitchCount` - Default: `2` - Indicates how many hat switches will be available on the joystick. Range: `0` - `2`\n- `bool includeXAxis` - Default: `true` - Indicates if the X Axis is available on the joystick.\n- `bool includeYAxis` - Default: `true` - Indicates if the Y Axis is available on the joystick.\n- `bool includeZAxis` - Default: `true` - Indicates if the Z Axis (in some situations this is the right X Axis) is available on the joystick.\n- `bool includeRxAxis` - Default: `true` - Indicates if the X Axis Rotation (in some situations this is the right Y Axis) is available on the joystick.\n- `bool includeRyAxis` - Default: `true` - Indicates if the Y Axis Rotation is available on the joystick.\n- `bool includeRzAxis` - Default: `true` - Indicates if the Z Axis Rotation is available on the joystick.\n- `bool includeRudder` - Default: `true` - Indicates if the Rudder is available on the joystick.\n- `bool includeThrottle` - Default: `true` - Indicates if the Throttle is available on the joystick.\n- `bool includeAccelerator` - Default: `true` - Indicates if the Accelerator is available on the joystick.\n- `bool includeBrake` - Default: `true` - Indicates if the Brake is available on the joystick.\n- `bool includeSteering` - Default: `true` - Indicates if the Steering is available on the joystick.\n\nThe following constants define the default values for the constructor parameters listed above:\n\n- `JOYSTICK_DEFAULT_REPORT_ID` is set to `0x03`\n- `JOYSTICK_DEFAULT_BUTTON_COUNT` is set to `32`\n- `JOYSTICK_DEFAULT_HATSWITCH_COUNT` is set to `2`\n\n### Joystick.begin(bool initAutoSendState)\n\nStarts emulating a game controller connected to a computer. By default, all methods update the game controller state immediately. If `initAutoSendState` is set to `false`, the `Joystick.sendState` method must be called to update the game controller state.\n\n### Joystick.end()\n\nStops the game controller emulation to a connected computer (Note: just like the Arduino `Keyboard.h` and `Mouse.h` libraries, the `end()` function does not actually do anything).\n\n### Joystick.setXAxisRange(int32_t minimum, int32_t maximum)\n\nSets the range of values that will be used for the X axis. Default: `0` to `1023`\n\n### Joystick.setXAxis(int32_t value)\n\nSets the X axis value. See `setXAxisRange` for the range.\n\n### Joystick.setYAxisRange(int32_t minimum, int32_t maximum)\n\nSets the range of values that will be used for the Y axis. Default: `0` to `1023`\n\n### Joystick.setYAxis(int32_t value)\n\nSets the Y axis value. See `setYAxisRange` for the range.\n\n### Joystick.setZAxisRange(int32_t minimum, int32_t maximum)\n\nSets the range of values that will be used for the Z axis. Default: `0` to `1023`\n\n### Joystick.setZAxis(int32_t value)\n\nSets the Z axis value. See `setZAxisRange` for the range.\n\n### Joystick.setRxAxisRange(int32_t minimum, int32_t maximum)\n\nSets the range of values that will be used for the X axis rotation. Default: `0` to `1023`\n\n### Joystick.setRxAxis(int32_t value)\n\nSets the X axis rotation value. See `setRxAxisRange` for the range.\n\n### Joystick.setRyAxisRange(int32_t minimum, int32_t maximum)\n\nSets the range of values that will be used for the Y axis rotation. Default: `0` to `1023`\n\n### Joystick.setRyAxis(int32_t value)\n\nSets the Y axis rotation value. See `setRyAxisRange` for the range.\n\n### Joystick.setRzAxisRange(int32_t minimum, int32_t maximum)\n\nSets the range of values that will be used for the Z axis rotation. Default: `0` to `1023`\n\n### Joystick.setRzAxis(int32_t value)\n\nSets the Z axis rotation value. See `setRzAxisRange` for the range.\n\n### Joystick.setRudderRange(int32_t minimum, int32_t maximum)\n\nSets the range of values that will be used for the Rudder. Default: `0` to `1023`\n\n### Joystick.setRudder(int32_t value)\n\nSets the Rudder value. See `setRudderRange` for the range.\n\n### Joystick.setThrottleRange(int32_t minimum, int32_t maximum)\n\nSets the range of values that will be used for the Throttle. Default: `0` to `1023`\n\n### Joystick.setThrottle(int32_t value)\n\nSets the Throttle value. See `setThrottleRange` for the range.\n\n### Joystick.setAcceleratorRange(int32_t minimum, int32_t maximum)\n\nSets the range of values that will be used for the Accelerator. Default: `0` to `1023`\n\n### Joystick.setAccelerator(int32_t value)\n\nSets the Accelerator value. See `setAcceleratorRange` for the range.\n\n### Joystick.setBrakeRange(int32_t minimum, int32_t maximum)\n\nSets the range of values that will be used for the Brake. Default: `0` to `1023`\n\n### Joystick.setBrake(int32_t value)\n\nSets the Brake value. See `setBrakeRange` for the range.\n\n### Joystick.setSteeringRange(int32_t minimum, int32_t maximum)\n\nSets the range of values that will be used for the Steering. Default: `0` to `1023`\n\n### Joystick.setSteering(int32_t value)\n\nSets the Steering value. See `setSteeringRange` for the range.\n\n### Joystick.setButton(uint8_t button, uint8_t value)\n\nSets the state (`0` or `1`) of the specified button (range: `0` - (`buttonCount - 1`)). The button is the 0-based button number (i.e. button #1 is `0`, button #2 is `1`, etc.). The value is `1` if the button is pressed and `0` if the button is released.\n\n### Joystick.pressButton(uint8_t button)\n\nPress the indicated button (range: `0` - (`buttonCount - 1`)). The button is the 0-based button number (i.e. button #1 is `0`, button #2 is `1`, etc.).\n\n### Joystick.releaseButton(uint8_t button)\n\nRelease the indicated button (range: `0` - (`buttonCount - 1`)). The button is the 0-based button number (i.e. button #1 is `0`, button #2 is `1`, etc.).\n\n### Joystick.setHatSwitch(int8_t hatSwitch, int16_t value)\n\nSets the value of the specified hat switch. The hatSwitch is 0-based (i.e. hat switch #1 is `0` and hat switch #2 is `1`). The value is from 0° to 360°, but in 45° increments. Any value less than 45° will be rounded down (i.e. 44° is rounded down to 0°, 89° is rounded down to 45°, etc.). Set the value to `JOYSTICK_HATSWITCH_RELEASE` or `-1` to release the hat switch.\n\n### Joystick.sendState()\n\nSends the updated joystick state to the host computer. Only needs to be called if `AutoSendState` is `false` (see `Joystick.begin` for more details).\n\nSee the [Wiki](https://github.com/MHeironimus/ArduinoJoystickLibrary/wiki) for more details on things like FAQ, supported boards, testing, etc.\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "library.properties",
          "type": "blob",
          "size": 0.482421875,
          "content": "name=Joystick\nversion=2.1.1\nauthor=Matthew Heironimus\nmaintainer=Matthew Heironimus <heironimus@live.com>\nsentence=Allows an Arduino board with USB capabilities (e.g. Leonardo, Arduino Micro, Arudino Due, etc.) to appear as a Joystick or Gamepad.\nparagraph=This library is built on the PluggableUSB library. It can be used with or without other HID-based libraries (Mouse, Keyboard, etc.).\ncategory=Device Control\nurl=https://github.com/MHeironimus/ArduinoJoystickLibrary\narchitectures=avr,sam\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}