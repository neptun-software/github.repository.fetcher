{
  "metadata": {
    "timestamp": 1736565386022,
    "page": 224,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "facebookincubator/velox",
      "stars": 3576,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 3.45703125,
          "content": "---\nAccessModifierOffset: -1\nAlignAfterOpenBracket: AlwaysBreak\nAlignConsecutiveMacros: false\nAlignConsecutiveAssignments: false\nAlignConsecutiveBitFields: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlines: Left\nAlignOperands: DontAlign\nAlignTrailingComments: false\nAllowAllArgumentsOnNextLine: true\nAllowAllConstructorInitializersOnNextLine: true\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortEnumsOnASingleLine: true\nAllowShortBlocksOnASingleLine: Never\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: Empty\nAllowShortLambdasOnASingleLine: All\nAllowShortIfStatementsOnASingleLine: Never\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: Yes\nBinPackArguments: false\nBinPackParameters: false\nBraceWrapping:\n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   false\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Attach\nBreakInheritanceList: BeforeColon\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializers: BeforeColon\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: false\nColumnLimit: 80\nCommentPragmas: '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDeriveLineEnding: true\nDerivePointerAlignment: false\nDisableFormat: false\nFixNamespaceComments: true\nForEachMacros:\n  - FOR_EACH\n  - FOR_EACH_R\n  - FOR_EACH_RANGE\nIncludeBlocks: Preserve\nIncludeCategories:\n  - Regex:           '^<.*\\.h(pp)?>'\n    Priority:        1\n  - Regex:           '^<.*'\n    Priority:        2\n  - Regex:           '.*'\n    Priority:        3\nIndentCaseLabels: true\nIndentCaseBlocks: false\nIndentGotoLabels: true\nIndentPPDirectives: None\nIndentExternBlock: AfterExternBlock\nIndentWidth: 2\nIndentWrappedFunctionNames: false\nInsertNewlineAtEOF: true\nInsertTrailingCommas: None\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: false\nMacroBlockBegin: ''\nMacroBlockEnd: ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBinPackProtocolList: Auto\nObjCBlockIndentWidth: 2\nObjCBreakBeforeNestedBlockParam: true\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: false\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 200\nPointerAlignment: Left\nReflowComments: true\nSortIncludes: true\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: false\nSpaceAfterLogicalNot: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCpp11BracedList: false\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: ControlStatements\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceInEmptyBlock: false\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles: false\nSpacesInConditionalStatement: false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nSpaceBeforeSquareBrackets: false\nStandard: Cpp11\nTabWidth: 8\nUseCRLF: false\nUseTab: Never\n...\n"
        },
        {
          "name": ".cmake-format.yaml",
          "type": "blob",
          "size": 1.9609375,
          "content": "# Copyright (c) Facebook, Inc. and its affiliates.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Currently this config mostly mirrors the default with the addition of custom functions\nformat:\n  line_width: 80\n  tab_size: 2\n  use_tabchars: false\n  max_pargs_hwrap: 4\n  max_subgroups_hwrap: 2\n  min_prefix_chars: 4\n  max_prefix_chars: 6\n  separate_ctrl_name_with_space: false\n  separate_fn_name_with_space: false\n  dangle_parens: false\n  command_case: \"canonical\"\n  keyword_case: \"unchanged\"\n  always_wrap:\n    - set_target_properties\n    - target_sources\n    - target_link_libraries\n\nparse:\n  # We define these for our custom \n  # functions so they get formatted correctly\n  additional_commands:\n    velox_add_library:\n      pargs:\n        nargs: 1+\n        flags:\n        - OBJECT\n        - STATIC\n        - SHARED\n        - INTERFACE\n      kwargs: {}\n\n    velox_base_add_library:\n      pargs:\n        nargs: 1+\n        flags:\n        - OBJECT\n        - STATIC\n        - SHARED\n        - INTERFACE\n      kwargs: {}\n\n    velox_compile_definitions:\n      pargs: 1 \n      kwargs:\n        PRIVATE: '*'\n        PUBLIC: '*'\n        INTERFACE: '*'\n\n    velox_include_directories:\n      pargs: '1+'\n      flags:\n        - SYSTEM\n        - BEFORE\n        - AFTER\n      kwargs:\n        PRIVATE: '*'\n        PUBLIC: '*'\n        INTERFACE: '*'\n\n    velox_link_libraries:\n      pargs: '1+'\n      kwargs:\n        PRIVATE: '*'\n        PUBLIC: '*'\n        INTERFACE: '*'\n        \nmarkup:\n  first_comment_is_literal: true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 6.1630859375,
          "content": "#==============================================================================#\n# This file specifies intentionally untracked files that git should ignore.\n#==============================================================================#\n\n#==============================================================================#\n# File extensions to be ignored anywhere in the tree.\n#==============================================================================#\n# Temp files created by most text editors.\n*~\n# Merge files created by git.\n*.orig\n# Java bytecode\n*.class\n# Byte compiled python modules.\n*.pyc\n# egg dirs from python\n*.egg-info/\n# vim swap files\n.*.sw?\n.sw?\n#OS X specific files.\n.DS_store\n# Core files\n#core\n\n#==============================================================================#\n# Explicit files to ignore (only matches one).\n#==============================================================================#\n# Various tag programs\n/tags\n/TAGS\n/GPATH\n/GRTAGS\n/GSYMS\n/GTAGS\n.gitusers\nautom4te.cache\ncscope.files\ncscope.out\nautoconf/aclocal.m4\nautoconf/autom4te.cache\n/compile_commands.json\n\n#==============================================================================#\n# Directories to ignore (do not add trailing '/'s, they skip symlinks).\n#==============================================================================#\n# External projects that are tracked independently.\nprojects/*\n!projects/*.*\n!projects/Makefile\n.venv\ndeps-install\ndeps-download\n\n#==============================================================================#\n# Autotools artifacts\n#==============================================================================#\nconfig/\n!/velox/**/config\nconfigure\nconfig-h.in\nautom4te.cache\n*Makefile.in\nthird_party/*/Makefile\nlibtool\naclocal.m4\nconfig.log\nconfig.status\nstamp-h1\nconfig.h\n!/velox/**/config.h\nm4/libtool.m4\nm4/ltoptions.m4\nm4/ltsugar.m4\nm4/ltversion.m4\nm4/lt~obsolete.m4\n\n#==============================================================================#\n# Build artifacts\n#==============================================================================#\n#m4/\nbuild/\n_build/\n.ccache/\n#*.m4\n*.o\n*.lo\n*.la\n*~\n*.pdf\n*.swp\na.out\nCMake/resolve_dependency_modules/boost/FindBoost.cmake\n__cmake_systeminformation/\n\n#==============================================================================#\n# Kate Swap Files\n#==============================================================================#\n*.kate-swp\n.#kate-*\n\n#==============================================================================#\n# Backup artifacts\n#==============================================================================#\n~*\n*~\ntmp/\n\n#==============================================================================#\n# KDevelop files\n#==============================================================================#\n.kdev4\n*.kdev4\n.dirstamp\n.deps\n.libs\n\n#==============================================================================#\n# Eclipse files\n#==============================================================================#\n.wtpmodules\n.classpath\n.project\n.cproject\n.pydevproject\n.settings\n.autotools\n.csettings\n\n/Debug/\n/misc/\n\n#==============================================================================#\n# Intellij files\n#==============================================================================#\n.idea\n*.iml\n\n#==============================================================================#\n# Code Coverage files\n#==============================================================================#\n*.gcno\n*.gcda\n\n#==============================================================================#\n# Scripts\n#==============================================================================#\n*.jar\nscripts/PelotonTest/out\nscripts/PelotonTest/lib\n\n#==============================================================================#\n# Protobuf\n#==============================================================================#\n*.pb-c.c\n*.pb-c.h\n*.pb.cc\n*.pb.h\n*.pb.go\n\n#==============================================================================#\n# Third party\n#==============================================================================#\nthird_party/nanomsg/\nthird_party/nvml/\nthird_party/logcabin/\n\n#==============================================================================#\n# Eclipse\n#==============================================================================#\n\n.metadata\nbin/\ntmp/\n*.tmp\n*.bak\n*.swp\n*~.nib\nlocal.properties\n.settings/\n.loadpath\n.recommenders\n\n# Eclipse Core\n.project\n\n# External tool builders\n.externalToolBuilders/\n\n# Locally stored \"Eclipse launch configurations\"\n*.launch\n\n# PyDev specific (Python IDE for Eclipse)\n*.pydevproject\n\n# CDT-specific (C/C++ Development Tooling)\n.cproject\n\n# JDT-specific (Eclipse Java Development Tools)\n.classpath\n\n# Java annotation processor (APT)\n.factorypath\n\n# PDT-specific (PHP Development Tools)\n.buildpath\n\n# sbteclipse plugin\n.target\n\n# Tern plugin\n.tern-project\n\n# TeXlipse plugin\n.texlipse\n\n# STS (Spring Tool Suite)\n.springBeans\n\n# Code Recommenders\n.recommenders/\nio_file\n\n## General\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.cuo\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n\n# Compiled protocol buffers\n*.pb.h\n*.pb.cc\n*_pb2.py\n\n# Compiled python\n*.pyc\n\n# Compiled MATLAB\n*.mex*\n\n# IPython notebook checkpoints\n.ipynb_checkpoints\n\n# Editor temporaries\n*.swp\n*~\n\n# Sublime Text settings\n*.sublime-workspace\n*.sublime-project\n\n# Eclipse Project settings\n*.*project\n.settings\n.csettings\n\n# Visual Studio\n.vs\nsettings.json\n.vscode\n\n# QtCreator files\n*.user\n\n# PyCharm files\n.idea\n\n# OSX dir files\n.DS_Store\n\n# User's build configuration\nMakefile.config\nCMakeUserPresets.json\n\n# build, distribute, and bins (+ python proto bindings)\nbuild\n.build_debug/*\n.build_release/*\ndistribute/*\n*.testbin\n*.bin\ncmake_build\n.cmake_build\ncmake-build-debug\ncmake-build-release\n\n# tests\ntest/test.sql\n\n# SQLite logic tests\ntest/evidence/\nthird_party/sqllogictest\n\n#imdb dataset\nthird_party/imdb/data\n\n# Format timer\n.last_format\n# Benchmarks\n.last_benchmarked_commit\nbenchmark_results/\nduckdb_unittest_tempdir/\ngrammar.y.tmp\nsrc/amalgamation/\n\n#eclipse\n.project\n.cproject\n.settings\n~\n\n#docs\nvelox/docs/sphinx/source/README_generated_*\nvelox/docs/bindings/python/_generate/*\nscripts/bm-report/report.html\n"
        },
        {
          "name": "CMake",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 19.9501953125,
          "content": "# Copyright (c) Facebook, Inc. and its affiliates.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\ncmake_minimum_required(VERSION 3.28)\nmessage(STATUS \"Building using CMake version: ${CMAKE_VERSION}\")\n\n# The policy allows us to change options without caching.\ncmake_policy(SET CMP0077 NEW)\nset(CMAKE_POLICY_DEFAULT_CMP0077 NEW)\n\n# Sets new behavior for CMP0135, which controls how timestamps are extracted\n# when using ExternalProject_Add():\n# https://cmake.org/cmake/help/latest/policy/CMP0135.html\nif(POLICY CMP0135)\n  cmake_policy(SET CMP0135 NEW)\n  set(CMAKE_POLICY_DEFAULT_CMP0135 NEW)\nendif()\n\n# Set the project name.\nproject(velox)\n\n# If we are in an active conda env disable search in system paths and add env to\n# prefix path\nif(DEFINED ENV{CONDA_PREFIX})\n  if(NOT DEFINED ENV{VELOX_DEPENDENCY_SOURCE} OR \"$ENV{VELOX_DEPENDENCY_SOURCE}\"\n                                                 STREQUAL \"CONDA\")\n    message(STATUS \"Using Conda environment: $ENV{CONDA_PREFIX}\")\n    set(CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH FALSE)\n    list(APPEND CMAKE_PREFIX_PATH \"$ENV{CONDA_PREFIX}\")\n    # Override in case it was set to CONDA\n    set(ENV{VELOX_DEPENDENCY_SOURCE} AUTO)\n  elseif(DEFINED ENV{VELOX_DEPENDENCY_SOURCE}\n         AND NOT \"$ENV{VELOX_DEPENDENCY_SOURCE}\" STREQUAL \"CONDA\")\n    message(STATUS \"Overriding Conda environment: $ENV{CONDA_PREFIX}\")\n  endif()\nendif()\n\nif(DEFINED ENV{INSTALL_PREFIX})\n  message(STATUS \"Dependency install directory set to: $ENV{INSTALL_PREFIX}\")\n  list(APPEND CMAKE_PREFIX_PATH \"$ENV{INSTALL_PREFIX}\")\nendif()\n\nlist(PREPEND CMAKE_MODULE_PATH \"${PROJECT_SOURCE_DIR}/CMake\"\n     \"${PROJECT_SOURCE_DIR}/CMake/third-party\")\n\n# Include our ThirdPartyToolchain dependencies macros\ninclude(ResolveDependency)\ninclude(VeloxUtils)\ninclude(CMakeDependentOption)\n\nvelox_set_with_default(VELOX_DEPENDENCY_SOURCE_DEFAULT VELOX_DEPENDENCY_SOURCE\n                       AUTO)\nmessage(STATUS \"Build type: ${CMAKE_BUILD_TYPE}\")\n\n# Add all options below\noption(\n  VELOX_BUILD_TESTING\n  \"Enable Velox tests. This will enable all other build options automatically.\"\n  ON)\noption(\n  VELOX_BUILD_MINIMAL\n  \"Build a minimal set of components only. This will override other build options.\"\n  OFF)\noption(\n  VELOX_BUILD_MINIMAL_WITH_DWIO\n  \"Build a minimal set of components, including DWIO (file format readers/writers).\n   This will override other build options.\"\n  OFF)\noption(VELOX_MONO_LIBRARY \"Build single unified library.\" OFF)\noption(ENABLE_ALL_WARNINGS \"Enable -Wall and -Wextra compiler warnings.\" ON)\noption(VELOX_BUILD_SHARED \"Build Velox as shared libraries.\" OFF)\n# While it's possible to build both in one go we currently want to build either\n# static or shared.\ncmake_dependent_option(\n  VELOX_BUILD_STATIC\n  \"Build Velox as static libraries.\"\n  ON\n  \"NOT VELOX_BUILD_SHARED\"\n  OFF)\n\nif(VELOX_BUILD_SHARED AND NOT VELOX_MONO_LIBRARY)\n  # The large number of targets currently in use within Velox make a shared\n  # build when not using the mono library brittle and labor intensive\n  set(VELOX_MONO_LIBRARY ON)\nendif()\n\nif(VELOX_BUILD_SHARED)\n  message(\n    WARNING\n      \"When building Velox as a shared library it's recommended to build against a shared build of folly to avoid issues with linking of gflags.\"\n      \"This is currently NOT being enforced so user discretion is advised.\")\nendif()\n\n# option() always creates a BOOL variable so we have to use a normal cache\n# variable with STRING type for this option.\n#\n# * AUTO: Try SYSTEM first fall back to BUNDLED.\n# * SYSTEM: Use installed dependencies via find_package.\n# * BUNDLED: Build dependencies from source.\nset(VELOX_DEPENDENCY_SOURCE\n    ${VELOX_DEPENDENCY_SOURCE_DEFAULT}\n    CACHE\n      STRING\n      \"Default source for all dependencies with source builds enabled: AUTO SYSTEM BUNDLED.\"\n)\nset(VELOX_GFLAGS_TYPE\n    \"shared\"\n    CACHE\n      STRING\n      \"Specify whether to find the gflags package as a shared or static package\"\n)\noption(VELOX_ENABLE_EXEC \"Build exec.\" ON)\noption(VELOX_ENABLE_AGGREGATES \"Build aggregates.\" ON)\noption(VELOX_ENABLE_HIVE_CONNECTOR \"Build Hive connector.\" ON)\noption(VELOX_ENABLE_TPCH_CONNECTOR \"Build TPC-H connector.\" ON)\noption(VELOX_ENABLE_PRESTO_FUNCTIONS \"Build Presto SQL functions.\" ON)\noption(VELOX_ENABLE_SPARK_FUNCTIONS \"Build Spark SQL functions.\" ON)\noption(VELOX_ENABLE_EXPRESSION \"Build expression.\" ON)\noption(\n  VELOX_ENABLE_EXAMPLES\n  \"Build examples. This will enable VELOX_ENABLE_EXPRESSION automatically.\" OFF)\noption(VELOX_ENABLE_SUBSTRAIT \"Build Substrait-to-Velox converter.\" OFF)\noption(VELOX_ENABLE_BENCHMARKS \"Enable Velox top level benchmarks.\" OFF)\noption(VELOX_ENABLE_BENCHMARKS_BASIC \"Enable Velox basic benchmarks.\" OFF)\noption(VELOX_ENABLE_S3 \"Build S3 Connector\" OFF)\noption(VELOX_ENABLE_GCS \"Build GCS Connector\" OFF)\noption(VELOX_ENABLE_ABFS \"Build Abfs Connector\" OFF)\noption(VELOX_ENABLE_HDFS \"Build Hdfs Connector\" OFF)\noption(VELOX_ENABLE_PARQUET \"Enable Parquet support\" ON)\noption(VELOX_ENABLE_ARROW \"Enable Arrow support\" OFF)\noption(VELOX_ENABLE_REMOTE_FUNCTIONS \"Enable remote function support\" OFF)\noption(VELOX_ENABLE_CCACHE \"Use ccache if installed.\" ON)\n\noption(VELOX_BUILD_TEST_UTILS \"Builds Velox test utilities\" OFF)\noption(VELOX_BUILD_VECTOR_TEST_UTILS \"Builds Velox vector test utilities\" OFF)\noption(VELOX_BUILD_PYTHON_PACKAGE \"Builds Velox Python bindings\" OFF)\noption(VELOX_BUILD_RUNNER \"Builds velox runner\" ON)\noption(\n  VELOX_ENABLE_INT64_BUILD_PARTITION_BOUND\n  \"make buildPartitionBounds_ a vector int64 instead of int32 to avoid integer overflow when the hashtable has billions of records\"\n  OFF)\n\n# Explicitly force compilers to generate colored output. Compilers usually do\n# this by default if they detect the output is a terminal, but this assumption\n# is broken if you use ninja.\noption(VELOX_FORCE_COLORED_OUTPUT\n       \"Always produce ANSI-colored output (GNU/Clang only).\" OFF)\n\nif(${VELOX_BUILD_MINIMAL} OR ${VELOX_BUILD_MINIMAL_WITH_DWIO})\n  # Enable and disable components for velox base build\n  set(VELOX_BUILD_TESTING OFF)\n  set(VELOX_ENABLE_PRESTO_FUNCTIONS ON)\n  set(VELOX_ENABLE_EXPRESSION ON)\n  set(VELOX_ENABLE_EXEC OFF)\n  set(VELOX_ENABLE_AGGREGATES OFF)\n  set(VELOX_ENABLE_HIVE_CONNECTOR OFF)\n  set(VELOX_ENABLE_TPCH_CONNECTOR OFF)\n  set(VELOX_ENABLE_SPARK_FUNCTIONS OFF)\n  set(VELOX_ENABLE_EXAMPLES OFF)\n  set(VELOX_ENABLE_S3 OFF)\n  set(VELOX_ENABLE_GCS OFF)\n  set(VELOX_ENABLE_ABFS OFF)\n  set(VELOX_ENABLE_SUBSTRAIT OFF)\nendif()\n\nif(${VELOX_ENABLE_BENCHMARKS})\n  set(VELOX_ENABLE_BENCHMARKS_BASIC ON)\nendif()\n\nif(VELOX_ENABLE_BENCHMARKS_BASIC)\n  set(VELOX_BUILD_TEST_UTILS ON)\nendif()\n\nif(VELOX_BUILD_TESTING OR VELOX_BUILD_TEST_UTILS)\n  set(cpr_SOURCE BUNDLED)\n  velox_resolve_dependency(cpr)\n  set(VELOX_ENABLE_DUCKDB ON)\n  set(VELOX_ENABLE_PARSE ON)\nendif()\n\nif(${VELOX_ENABLE_EXAMPLES})\n  set(VELOX_ENABLE_EXPRESSION ON)\nendif()\n\nif(${VELOX_BUILD_PYTHON_PACKAGE})\n  set(VELOX_ENABLE_PRESTO_FUNCTIONS ON)\n  set(VELOX_ENABLE_DUCKDB ON)\n  set(VELOX_ENABLE_EXPRESSION ON)\n  set(VELOX_ENABLE_PARSE ON)\n  set(VELOX_ENABLE_EXEC ON)\n  set(VELOX_ENABLE_AGGREGATES ON)\n  set(VELOX_ENABLE_SPARK_FUNCTIONS ON)\n  set(VELOX_BUILD_RUNNER OFF)\nendif()\n\nif(${VELOX_ENABLE_DUCKDB})\n  velox_set_source(DuckDB)\n  velox_resolve_dependency(DuckDB)\nendif()\n\nif(DEFINED ENV{INSTALL_PREFIX})\n  # Allow installed package headers to be picked up before brew/system package\n  # headers. We set this after DuckDB bundling since DuckDB uses its own\n  # dependencies.\n  include_directories(BEFORE \"$ENV{INSTALL_PREFIX}/include\")\nendif()\n\n# We look for OpenSSL here to cache the result enforce the version across our\n# dependencies.\nfind_package(OpenSSL REQUIRED)\n\nif(VELOX_ENABLE_CCACHE\n   AND NOT CMAKE_C_COMPILER_LAUNCHER\n   AND NOT CMAKE_CXX_COMPILER_LAUNCHER)\n\n  find_program(CCACHE_FOUND ccache)\n\n  if(CCACHE_FOUND)\n    message(STATUS \"Using ccache: ${CCACHE_FOUND}\")\n    set(CMAKE_C_COMPILER_LAUNCHER ${CCACHE_FOUND})\n    set(CMAKE_CXX_COMPILER_LAUNCHER ${CCACHE_FOUND})\n    # keep comments as they might matter to the compiler\n    set(ENV{CCACHE_COMMENTS} \"1\")\n  endif()\nendif()\n\nif(${VELOX_FORCE_COLORED_OUTPUT})\n  if(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n    add_compile_options(-fdiagnostics-color=always)\n  elseif(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\"\n         OR \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"AppleClang\")\n    add_compile_options(-fcolor-diagnostics)\n  endif()\nendif()\n\nif(VELOX_ENABLE_S3)\n  # Set AWS_ROOT_DIR if you have a custom install location of AWS SDK CPP.\n  if(AWSSDK_ROOT_DIR)\n    list(APPEND CMAKE_PREFIX_PATH ${AWSSDK_ROOT_DIR})\n  endif()\n  find_package(AWSSDK REQUIRED COMPONENTS s3;identity-management)\n  add_definitions(-DVELOX_ENABLE_S3)\nendif()\n\nif(VELOX_ENABLE_ABFS)\n  # Set AZURESDK_ROOT_DIR if you have a custom install location of Azure Storage\n  # SDK CPP.\n  if(AZURESDK_ROOT_DIR)\n    list(APPEND CMAKE_PREFIX_PATH ${AZURESDK_ROOT_DIR})\n  endif()\n  # files-datalake is built on blobs\n  find_package(azure-storage-files-datalake-cpp CONFIG REQUIRED)\n  find_package(azure-identity-cpp CONFIG REQUIRED)\n  add_definitions(-DVELOX_ENABLE_ABFS)\nendif()\n\nif(VELOX_ENABLE_HDFS)\n  add_definitions(-DVELOX_ENABLE_HDFS)\n  # JVM libhdfs requires arrow dependency.\n  set(VELOX_ENABLE_ARROW ON)\nendif()\n\nif(VELOX_ENABLE_PARQUET)\n  add_definitions(-DVELOX_ENABLE_PARQUET)\n  # Native Parquet reader requires Apache Thrift and Arrow Parquet writer, which\n  # are included in Arrow.\n  set(VELOX_ENABLE_ARROW ON)\nendif()\n\n# make buildPartitionBounds_ a vector int64 instead of int32 to avoid integer\n# overflow\nif(${VELOX_ENABLE_INT64_BUILD_PARTITION_BOUND})\n  add_compile_definitions(VELOX_ENABLE_INT64_BUILD_PARTITION_BOUND)\nendif()\n\n# MacOSX enables two-level namespace by default:\n# http://mirror.informatimago.com/next/developer.apple.com/releasenotes/DeveloperTools/TwoLevelNamespaces.html\n# Enables -flat_namespace so type_info can be deudplicated across .so boundaries\nif(${CMAKE_SYSTEM_NAME} MATCHES \"Darwin\")\n  add_link_options(\"-Wl,-flat_namespace\")\nendif()\n\nif(UNIX AND NOT APPLE)\n  # linker flags, -export-dynamic for rtti\n  add_link_options(\"-Wl,-export-dynamic\")\nendif()\n\n# Required so velox code can be used in a dynamic library\nset(CMAKE_POSITION_INDEPENDENT_CODE TRUE)\n\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED TRUE)\nset(CMAKE_CXX_EXTENSIONS ON) # Big Int is an extension\n\nexecute_process(\n  COMMAND\n    bash -c\n    \"( source ${CMAKE_CURRENT_SOURCE_DIR}/scripts/setup-helper-functions.sh && echo -n $(get_cxx_flags $ENV{CPU_TARGET}))\"\n  OUTPUT_VARIABLE SCRIPT_CXX_FLAGS\n  RESULT_VARIABLE COMMAND_STATUS)\n\nif(COMMAND_STATUS EQUAL \"1\")\n  message(FATAL_ERROR \"Unable to determine compiler flags!\")\nendif()\nmessage(\"Setting CMAKE_CXX_FLAGS=${SCRIPT_CXX_FLAGS}\")\n\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${SCRIPT_CXX_FLAGS}\")\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -D USE_VELOX_COMMON_BASE\")\n\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -D HAS_UNCAUGHT_EXCEPTIONS\")\nif(${CMAKE_SYSTEM_PROCESSOR} MATCHES \"aarch64\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsigned-char\")\nendif()\n\n# Under Ninja, we are able to designate certain targets large enough to require\n# restricted parallelism.\nif(\"${MAX_HIGH_MEM_JOBS}\")\n  set_property(GLOBAL PROPERTY JOB_POOLS\n                               \"high_memory_pool=${MAX_HIGH_MEM_JOBS}\")\nelse()\n  set_property(GLOBAL PROPERTY JOB_POOLS high_memory_pool=1000)\nendif()\n\nif(\"${MAX_LINK_JOBS}\")\n  set_property(GLOBAL APPEND PROPERTY JOB_POOLS\n                                      \"link_job_pool=${MAX_LINK_JOBS}\")\n  set(CMAKE_JOB_POOL_LINK link_job_pool)\nendif()\n\nif(ENABLE_ALL_WARNINGS)\n  if(CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n    set(KNOWN_COMPILER_SPECIFIC_WARNINGS\n        \"-Wno-range-loop-analysis \\\n         -Wno-mismatched-tags \\\n         -Wno-nullability-completeness\")\n  elseif(CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n    set(KNOWN_COMPILER_SPECIFIC_WARNINGS\n        \"-Wno-implicit-fallthrough \\\n         -Wno-class-memaccess \\\n         -Wno-comment \\\n         -Wno-int-in-bool-context \\\n         -Wno-redundant-move \\\n         -Wno-array-bounds \\\n         -Wno-maybe-uninitialized \\\n         -Wno-unused-result \\\n         -Wno-format-overflow \\\n         -Wno-strict-aliasing\")\n  endif()\n\n  set(KNOWN_WARNINGS\n      \"-Wno-unused \\\n       -Wno-unused-parameter \\\n       -Wno-sign-compare \\\n       -Wno-ignored-qualifiers \\\n       ${KNOWN_COMPILER_SPECIFIC_WARNINGS}\")\n\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -Wextra ${KNOWN_WARNINGS}\")\nendif()\n\nmessage(\"FINAL CMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}\")\n\nif(${VELOX_ENABLE_GPU})\n  enable_language(CUDA)\n  # Determine CUDA_ARCHITECTURES automatically.\n  cmake_policy(SET CMP0104 NEW)\n  if(NOT DEFINED CMAKE_CUDA_ARCHITECTURES)\n    # it will fail later in the build otherwise\n    message(FATAL_ERROR \"-DCMAKE_CUDA_ARCHITECTURES= must be set\")\n  endif()\n  if(CMAKE_BUILD_TYPE MATCHES Debug)\n    add_compile_options(\"$<$<COMPILE_LANGUAGE:CUDA>:-G>\")\n  endif()\n  find_package(CUDAToolkit REQUIRED)\nendif()\n\n# Set after the test of the CUDA compiler. Otherwise, the test fails with\n# -latomic not found because it is added right after the compiler exe.\nif(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\"\n   AND \"${CMAKE_CXX_COMPILER_VERSION}\" VERSION_GREATER_EQUAL 15)\n  set(CMAKE_EXE_LINKER_FLAGS \"-latomic\")\nendif()\n\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\nif(CMAKE_SYSTEM_NAME MATCHES \"Darwin\")\n  execute_process(\n    COMMAND brew --prefix icu4c\n    RESULT_VARIABLE BREW_ICU4C\n    OUTPUT_VARIABLE BREW_ICU4C_PREFIX\n    OUTPUT_STRIP_TRAILING_WHITESPACE)\n  if(BREW_ICU4C EQUAL 0 AND EXISTS \"${BREW_ICU4C_PREFIX}\")\n    message(STATUS \"Found icu4c installed by Homebrew at ${BREW_ICU4C_PREFIX}\")\n    list(APPEND CMAKE_PREFIX_PATH \"${BREW_ICU4C_PREFIX}\")\n  else()\n    list(APPEND CMAKE_PREFIX_PATH \"/usr/local/opt/icu4c\")\n  endif()\nendif()\n\nvelox_set_source(ICU)\nvelox_resolve_dependency(\n  ICU\n  COMPONENTS\n  data\n  i18n\n  io\n  uc\n  tu)\n\nset(BOOST_INCLUDE_LIBRARIES\n    atomic\n    context\n    date_time\n    filesystem\n    program_options\n    regex\n    system\n    thread)\n\nvelox_set_source(Boost)\nvelox_resolve_dependency(Boost 1.77.0 COMPONENTS ${BOOST_INCLUDE_LIBRARIES})\n\nvelox_set_source(gflags)\n\nvelox_resolve_dependency(gflags COMPONENTS ${VELOX_GFLAGS_TYPE})\n\nif(NOT TARGET gflags::gflags)\n  # This is a bit convoluted, but we want to be able to use gflags::gflags as a\n  # target even when velox is built as a subproject which uses\n  # `find_package(gflags)` which does not create a globally imported target that\n  # we can ALIAS.\n  add_library(gflags_gflags INTERFACE)\n  target_link_libraries(gflags_gflags INTERFACE gflags)\n  add_library(gflags::gflags ALIAS gflags_gflags)\nendif()\n\nif(${gflags_SOURCE} STREQUAL \"BUNDLED\")\n  # we force glog from source to avoid issues with a system version built\n  # against another gflags version (which is likely)\n  set(glog_SOURCE BUNDLED)\nelse()\n  set(glog_SOURCE SYSTEM)\nendif()\nvelox_resolve_dependency(glog)\n\nvelox_set_source(fmt)\nvelox_resolve_dependency(fmt 9.0.0)\n\nif(${VELOX_BUILD_MINIMAL_WITH_DWIO} OR ${VELOX_ENABLE_HIVE_CONNECTOR})\n  # DWIO needs all sorts of stream compression libraries.\n  #\n  # TODO: make these optional and pluggable.\n  find_package(ZLIB REQUIRED)\n  find_package(lz4 REQUIRED)\n  find_package(lzo2 REQUIRED)\n  find_package(zstd REQUIRED)\n  find_package(Snappy REQUIRED)\n  if(NOT TARGET zstd::zstd)\n    if(TARGET zstd::libzstd_static)\n      set(ZSTD_TYPE static)\n    else()\n      set(ZSTD_TYPE shared)\n    endif()\n    add_library(zstd::zstd ALIAS zstd::libzstd_${ZSTD_TYPE})\n  endif()\nendif()\n\nvelox_set_source(re2)\nvelox_resolve_dependency(re2)\n\nif(${VELOX_BUILD_PYTHON_PACKAGE})\n  velox_set_source(pybind11)\n  velox_resolve_dependency(pybind11 2.10.0)\n  add_subdirectory(pyvelox)\nendif()\n\n# DWIO (ORC/DWRF) and Substrait depend on protobuf.\nif(${VELOX_BUILD_MINIMAL_WITH_DWIO}\n   OR ${VELOX_ENABLE_HIVE_CONNECTOR}\n   OR ${VELOX_ENABLE_SUBSTRAIT}\n   OR VELOX_ENABLE_GCS)\n\n  # Locate or build protobuf.\n  velox_set_source(Protobuf)\n  velox_resolve_dependency(Protobuf CONFIG 3.21.7 REQUIRED)\n  include_directories(${Protobuf_INCLUDE_DIRS})\nendif()\n\nvelox_set_source(simdjson)\nvelox_resolve_dependency(simdjson 3.9.3)\n\nvelox_set_source(folly)\nvelox_resolve_dependency(folly)\n\nif(${VELOX_BUILD_TESTING})\n  # Spark qury runner depends on absl, gRPC.\n  velox_set_source(absl)\n  velox_resolve_dependency(absl)\n\n  # 'gRPC_CARES_PROVIDER' is set as 'package', which means c-ares library needs\n  # to be installed on the system, instead of being built by gRPC.\n  velox_set_source(c-ares)\n  velox_resolve_dependency(c-ares)\n\n  velox_set_source(gRPC)\n  velox_resolve_dependency(gRPC)\nendif()\n\nif(VELOX_ENABLE_REMOTE_FUNCTIONS)\n  # TODO: Move this to use resolve_dependency(). For some reason, FBThrift\n  # requires clients to explicitly install fizz and wangle.\n  find_package(fizz CONFIG REQUIRED)\n  find_package(wangle CONFIG REQUIRED)\n  find_package(FBThrift CONFIG REQUIRED)\nendif()\n\nif(VELOX_ENABLE_GCS)\n  velox_set_source(google_cloud_cpp_storage)\n  velox_resolve_dependency(google_cloud_cpp_storage CONFIG 2.22.0 REQUIRED)\n  add_definitions(-DVELOX_ENABLE_GCS)\nendif()\n\n# GCC needs to link a library to enable std::filesystem.\nif(\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"GNU\")\n\n  # Ensure we have gcc at least 9+.\n  if(CMAKE_CXX_COMPILER_VERSION LESS 9.0)\n    message(\n      FATAL_ERROR \"VELOX requires gcc > 9. Found ${CMAKE_CXX_COMPILER_VERSION}\")\n  endif()\n\n  # Find Threads library\n  find_package(Threads REQUIRED)\nendif()\n\nif(VELOX_BUILD_TESTING AND NOT VELOX_ENABLE_DUCKDB)\n  message(\n    FATAL_ERROR\n      \"Unit tests require duckDB to be enabled (VELOX_ENABLE_DUCKDB=ON or VELOX_BUILD_TESTING=OFF)\"\n  )\nendif()\n\nset(VELOX_DISABLE_GOOGLETEST OFF)\nif(NOT VELOX_BUILD_TEST_UTILS AND NOT VELOX_BUILD_TESTING)\n  set(VELOX_DISABLE_GOOGLETEST ON)\n  add_definitions(-DVELOX_DISABLE_GOOGLETEST)\nendif()\n\n# On macOS, search Homebrew for keg-only versions of Bison and Flex. Xcode does\n# not provide new enough versions for us to use.\nif(CMAKE_HOST_SYSTEM_NAME MATCHES \"Darwin\")\n  execute_process(\n    COMMAND brew --prefix bison\n    RESULT_VARIABLE BREW_BISON\n    OUTPUT_VARIABLE BREW_BISON_PREFIX\n    OUTPUT_STRIP_TRAILING_WHITESPACE)\n  if(BREW_BISON EQUAL 0 AND EXISTS \"${BREW_BISON_PREFIX}\")\n    message(\n      STATUS \"Found Bison keg installed by Homebrew at ${BREW_BISON_PREFIX}\")\n    set(BISON_EXECUTABLE \"${BREW_BISON_PREFIX}/bin/bison\")\n  endif()\n\n  execute_process(\n    COMMAND brew --prefix flex\n    RESULT_VARIABLE BREW_FLEX\n    OUTPUT_VARIABLE BREW_FLEX_PREFIX\n    OUTPUT_STRIP_TRAILING_WHITESPACE)\n  if(BREW_FLEX EQUAL 0 AND EXISTS \"${BREW_FLEX_PREFIX}\")\n    message(\n      STATUS \"Found Flex keg installed by Homebrew at ${BREW_FLEX_PREFIX}\")\n    set(FLEX_EXECUTABLE \"${BREW_FLEX_PREFIX}/bin/flex\")\n    set(FLEX_INCLUDE_DIR \"${BREW_FLEX_PREFIX}/include\")\n  endif()\nendif()\nfind_package(BISON 3.0.4 REQUIRED)\nfind_package(FLEX 2.5.13 REQUIRED)\nfind_package(double-conversion 3.1.5 REQUIRED)\n\ninclude_directories(SYSTEM velox)\ninclude_directories(SYSTEM velox/external)\n\nif(NOT VELOX_DISABLE_GOOGLETEST)\n  velox_set_source(GTest)\n  velox_resolve_dependency(GTest)\n  set(VELOX_GTEST_INCUDE_DIR\n      \"${gtest_SOURCE_DIR}/googletest/include\"\n      PARENT_SCOPE)\nendif()\n\nvelox_set_source(xsimd)\nvelox_resolve_dependency(xsimd 10.0.0)\n\nvelox_set_source(stemmer)\nvelox_resolve_dependency(stemmer)\n\nif(VELOX_BUILD_TESTING)\n  set(BUILD_TESTING ON)\n  include(CTest) # include after project() but before add_subdirectory()\nendif()\n\ninclude_directories(.)\n\n# TODO: Include all other installation files. For now just making sure this\n# generates an installable makefile.\ninstall(FILES velox/type/Type.h DESTINATION \"include/velox\")\n\n# Adding this down here prevents warnings in dependencies from stopping the\n# build\nif(\"${TREAT_WARNINGS_AS_ERRORS}\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Werror\")\nendif()\n\nif(VELOX_ENABLE_ARROW)\n  velox_set_source(Arrow)\n  velox_resolve_dependency(Arrow)\nendif()\n\nadd_subdirectory(velox)\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.4580078125,
          "content": "# Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to make participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies within all project spaces, and it also applies when\nan individual is representing the project or its community in public spaces.\nExamples of representing a project or community include using an official\nproject e-mail address, posting via an official social media account, or acting\nas an appointed representative at an online or offline event. Representation of\na project may be further defined and clarified by project maintainers.\n\nThis Code of Conduct also applies outside the project spaces when there is a\nreasonable belief that an individual's behavior may have a negative impact on\nthe project or its community.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at <opensource-conduct@fb.com>. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "CODING_STYLE.md",
          "type": "blob",
          "size": 18.603515625,
          "content": "# Velox Coding Style and Best Practices\n\nThe goal of this document is to make Velox developers more productive by\npromoting consistency within the codebase, and encouraging common practices\nwhich will make the codebase easier to read, edit, maintain and debug in the\nfuture.\n\n## Code Formatting, Headers, and Licenses\n\nOur Makefile contains targets to help highlight and fix format, header or\nlicense issues. These targets are shortcuts for calling `./scripts/check.py`.\n\nUse `make header-fix` to apply our open source license headers to new files.\nUse `make format-fix` to identify and fix formatting issues using clang-format.\n\nFormatting issues found on the changed lines in the current commit can be\ndisplayed using `make format-check`.  These issues can be fixed by using `make\nformat-fix`. This command will apply formatting changes to modified lines in\nthe current commit.\n\nHeader issues found on the changed files in the current commit can be displayed\nusing `make header-check`. These issues can be fixed by using `make header-fix`.\nThis will apply license header updates to the files in the current commit.\n\nAn entire directory tree of files can be formatted and have license headers\nadded using the `tree` variant of the format commands:\n\n```\n    ./scripts/check.py format tree\n    ./scripts/check.py format tree --fix\n\n    ./scripts/check.py header tree\n    ./scripts/check.py header tree --fix\n```\n\nAll the available formatting commands can be displayed by using\n`./scripts/check.py help`.\n\n## C++ Style\n\nMany aspects of C++ style will be covered by clang-format, such as spacing,\nline width, indentation and ordering (for includes, using directives and etc). \n\n* Always ensure your code is clang-format compatible.\n* If you’re working on a legacy file which is not clang-format compliant yet,\n  refrain from formatting the entire file in the same PR as it pollutes your\n  original PR and makes it harder to review.\n  * Submit a separate diff/PR with the format-only changes.\n\n## Naming Conventions\n\n* Use **PascalCase** for types (classes, structs, enums, type aliases, type\n  template parameters) and file names.\n* Use **camelCase** for functions, member and local variables, and non-type\n  template parameters.\n* **camelCase_** for private and protected members variables.\n* Use **snake_case** for namespace names and build targets\n* Use **UPPER_SNAKE_CASE** for macros.\n* Use **kPascalCase** for static constants and enumerators.\n* Use **testing** prefix for test only class methods, e.g. obj.testingFoo().\n  As much as possible, refrain from adding test methods, and test objects using\n  their public APIs. Only use test methods in rare edge cases where this is not\n  possible. For example, MemoryAllocator::testingSetFailureInjection() is used\n  to to inject various memory allocation failures to test error handling paths.\n* Use the **debug** prefix for query configs that are intended for debugging\n  purposes only. These configs may enable expensive checks or disable selective\n  code paths, and are not recommended for use in production environments. For\n  example, `debug_disable_expression_with_peeling` is used to disable peeling\n  optimization employed in expression evaluation.\n\n## Comments\n\nSome good practices about code comments:\n\n* Optimize code for the reader, not the writer. \n  * Velox is growing and starting to be used by multiple compute engines and\n    teams; as a result, more time will be spent reading code than writing it.\n* Overall goal: make the code more obvious and remove obscurity.\n* Comments should capture information that was on the writer’s mind, but\n  **couldn’t be represented as code.**\n  * As such, refrain from adding obvious comments, e.g: simple getter/setter\n    methods.\n  * However, “obviousness” is in the reader’s mind - if a reviewer says\n    something is not obvious, then it is not obvious. \n    * Consider that the audience is an experienced Software Engineer with a\n      moderate knowledge of the codebase.\n* What should be commented: \n  * Every File\n  * Every Class\n  * Every method that's not an obvious getter/setter\n  * Every member variable\n    * Do not simply restate the variable name. Either add a comment explaining\n      the semantic meaning of that variable or do not add a comment at all.\n      This is an anti-pattern:\n\n    ```\n    // A simple counter.\n    size_t count_{0};\n    ```\n\n  * For functions with large bodies, a good practice is to group blocks of\n    related code, and precede them with a blank line and a high-level comment\n    on what the block does.\n\nAbout comment style:\n\n* Header comment for source files:\n  * All source files (.h and .cpp) should have a standard header in a large\n    comment block at the top; this should include the standard copyright\n    notice, the license header, and a brief file description. This comment\n    block should use `/* */`\n* For single line comments, always use `//` (with a space separator before the\n  comment).\n* Comments should be full english sentences, starting with a capital letter and\n  ending with a period (.).\n  * Use:\n\n    `// True if this node only sorts a portion of the final result.`\n\n  * Instead of:\n\n    `// true if this node only sorts a portion of the final result`\n\n* For multi-line comments:\n  * Velox will follow the doxygen comment style. \n  * For multi-line comments within actual code blocks (the ones which are not\n    to be exposed as documentation, use `//` (double slashes).\n  * For comments on headers for classes, functions, methods and member\n    variables (the ones to be exposed as documentation), use `///` (three\n    slashes) at the front of each line. \n  * Don't use old-style `/* */` comments inside code or on top-level header\n    comments. It adds two additional lines and makes headers more verbose than\n    they need to be.\n* Special comments:\n  * Use this format when something needs to be fixed in the future:\n\n    `// TODO: Description of what needs to be fixed.`\n\n  * Include enough context in the comment itself to make clear what will be\n    done, without requiring any references from outside the code.\n  * Do not include the author’s username. If required, this can always be\n    retrieved from git blame.\n\n## Asserts and CHECKs\n\n* For assertions and other types of validation, use `VELOX_CHECK_*` macros\n  * `VELOX_CHECK_*` will categorize the error to be an internal runtime error.\n  * `VELOX_USER_CHECK_*` will categorize the error to be a user error.\n* Use `VELOX_FAIL()` or `VELOX_USER_FAIL()` to inadvertently throw an\n  exception:\n  * `VELOX_FAIL(\"Illegal state\");`\n* Use `VELOX_UNREACHABLE()` when a particular branch/block should never be\n  executed, such as in a switch statement with an invalid `default:` block.\n* Use `VELOX_NYI()` for features or code paths that are not implemented yet.\n* When comparing two values/expressions, prefer to use:\n  * `VELOX_CHECK_LT(idx, children_.size());`\n* Rather than:\n  * `VELOX_CHECK(idx < children_.size());`\n* The former will evaluate and include both expressions values in the\n  exception.\n* All macro also provide the following optional features:\n  * Specifying error code (error code listed in\n    `velox/common/base/VeloxException.h`): \n    * `VELOX_CHECK_EQ(v1[, v2[, error_code]]);`\n    * `VELOX_USER_CHECK_EQ(v1[, v2[, error_code]])`\n  * Appending error message:\n    * `VELOX_CHECK_EQ(v1, v2, “Some error message”)`\n    * `VELOX_USER_CHECK_EQ(v1, v2, “Some error message”)`\n  * Error message formatting via fmt:\n    * `VELOX_USER_CHECK_EQ(v1, v2, “My complex error message {} and {}”, str,\n      i)`\n    * Note that the values of v1 and v2 are already included in the exception\n      message by default.\n\n## Variables\n\n* Do not declare more than one variable on a line (this helps accomplish the\n  other guidelines, promotes commenting, and is good for tagging).\n  * Obvious exception: for-loop initialization\n* Initialize most variables at the time of declaration (unless they are class\n  objects without default constructors).\n  * Prefer using uniform-initialization to make initialization more consistent\n    across types, e.g., prefer `size_t size{0};` over `size_t size = 0;`\n* Declare your variables in the smallest scope possible.\n* Declare your variables as close to the usage point as possible within the\n  given scope.\n* Don't group all your variables at the top of the scope -- this makes the code\n  much harder to follow.\n* If the variable or function parameter is a pointer or reference type, group\n  the `*` or `&` with the type -- pointer-ness or reference-ness is an attribute\n  of the type, not the name.\n  * `int* foo;` `const Bar& bar;` NOT `int *foo;` `const Bar &bar`;\n  * Beware that `int* foo, bar;` will be parsed as declaring `foo` as an `int*`\n    and `bar` as an `int`. Note that multiple declaration is discouraged.\n* For member variables:\n  * Group member variable and methods based on their visibility (public,\n    protected and private)\n    * It’s ok to have multiple blocks for a given level. \n  * Most member variables should come with a short comment description and an\n    empty line above that. \n  * Refrain from using public member variables whenever possible, in order to\n    promote encapsulation.\n    * Leverage getter/setter methods when appropriate.\n    * Name getter methods after the variable, e.g: `foo()`, and setter methods\n      using the \"set\" prefix, e.g: `setFoo()`\n    * Always mark getter methods as const.\n* Prefer to use value-types, `std::optional`, and `std::unique_ptr` in that\n  order.\n  * Value-types are conceptually the simplest and cheapest.\n  * `std::optional` allows you to express “may be null” without the additional\n    complexity of manual storage duration.\n  * `std::unique_ptr<>` should be used for types that are not cheaply movable\n    but need to transfer ownership, or which are too large to store on the\n    stack. Note that most types that perform large allocations already store\n    their bulk memory on-heap.\n\n## Constants\n\n* Always use `nullptr` if you need a constant that represents a null pointer\n  (`T*` for some `T`); use `0` otherwise for a zero value.\n* For large literal numbers, use ‘ to make it more readable, e.g:  `1’000’000`\n  instead of `1000000`.\n* For floating point literals, never omit the initial 0 before the decimal\n  point (always `0.5`, not `.5`).\n* File level variables and constants should be defined in an anonymous\n  namespace.\n* Always prefer const variables and enum to using preprocessor (#define) to\n  define constant values. \n* Prefer `enum class` over `enum` for better type safety.\n* As a general rule, do not use string literals without declaring a named\n  constant for them.\n  * The best way to make a constant string literal is to use constexpr\n    `std::string_view`/`folly::StringPiece`\n  * **NEVER** use `std::string` - this makes your code more prone to SIOF bugs.\n  * Avoid `const char* const` and `const char*` - these are less efficient to\n    convert to `std::string` later on in your program if you ever need to\n    because `std::string_view`/ `folly::StringPiece` knows its size and can use\n    a more efficient constructor. `std::string_view`/ `folly::StringPiece` also\n    has richer interfaces and often works as a drop-in replacement to\n    `std::string`.\n  * Need compile-time string concatenation? You can use `folly::FixedString`\n    for that.\n\n## Macros\n\nDo not use them unless absolutely necessary. Whenever possible, use normal\ninline functions or templates instead. If you absolutely need, remember that\nmacro names are always upper-snake-case. Also:\n\n* Use parentheses to sanitize complex inputs.\n  * For example, `#define MUL(x, y) x * y` is incorrect for input like `MUL(2,\n    1 + 1)`. The author probably meant `#define MUL(x, y) ((x) * (y))` instead.\n* When making macros that have multiple statements, use this idiom: \n  * `do { stmt1; stmt2; } while (0)`\n  * This allows this block to act the most like a single statement, usable in\n    if/for/while even if they don't use braces and forces use of a trailing\n    semicolon.\n\n## Headers and Includes\n\n* All header files must have a single-inclusion guard using `#pragma once`\n* Included files and using declarations should all be at the top of the file,\n  and ordered properly to make it easier to see what is included. \n  * Use clang-format to order your include and using directives.\n* Includes should always use the full path (relative to github’s root dir).\n* Whenever possible, try to forward-declare as much as possible in the .h and\n  only `#include` things you need the full implementation for. \n  * For instance, if you just use a `Class*` or `Class&` in a header file,\n    forward-declare `Class` instead of including the full header to minimize\n    header dependencies.\n* Put small private classes that will only get used in one place into a .cpp,\n  inside an anonymous namespace. A common example is a custom comparator class.\n* Be aware of what goes into your .h files. If possible, try to separate them\n  into \"Public API\" .h files that may be included by external modules. These\n  public .h files should contain only those functions or classes that external\n  users need to access. \n* No large blocks of code should be in .h files that are widely included if\n  these blocks aren't vital to all users' understanding of the interface the .h\n  represents. Split these large implementation blocks into a separate `-inl.h`\n  file.\n  * `-inl.h` files should exist only to aid readability with the expectation\n    that a user of your library should only need to read the .h to understand\n    the interface. Only if someone needs to understand your implementation\n    should opening the `-inl.h` be necessary (or the .cpp file, for that\n    matter).\n\n## Function Arguments\n\n* Const\n  * All objects, whenever possible, should be passed to functions as const-refs\n    (`const T&`). This makes APIs much clearer as to whether it’s an input or\n    output arg, reduces the need for NULL-checks (and reduces crashing bugs),\n    and helps enforce good encapsulation.\n    * An obvious exception is objects that are trivially copy- or\n      move-constructible, like primitive types or `std::unique_ptr`. \n    * Don't pass by const reference when passing by value is both correct and\n      cheaper.\n  * All non-static member functions should be marked as const if calling them\n    doesn't change the behavior/response of any member.\n* References as function arguments.\n  * For input or read-only parameters, pass by `const&`\n  * For nullable or optional parameters, use higher order primitives like\n    `std::optional`; raw pointers are also appropriate.\n  * For output, mutable, or in/out parameters:\n    * Non-const ref is the recommendation if the argument is not nullable. \n    * If it’s nullable, use a raw pointer.\n  * Always use `std::optional` instead of `folly::Optional` and\n    `boost::optional`. \n* Prefer `std::string_view` to `const std::string&`\n  * This avoids unnecessary construction of a std::string when passing other\n    types.  This often happens when string literals are passed into functions.\n  * If you need a `std::string` inside the function, however, take a\n    `std::string` to move the copy to the API boundary. This allows the caller\n    to avoid the copy with a move.\n* Almost never take an r-value reference as a function argument; take the\n  argument by value instead. This usually as efficient as taking an r-value\n  reference, but simpler and more flexible at the call site. For example: ```\n  InPredicate::InPredicate(folly::F14HashSet<T>&& rhs) : rhs_(std::move(rhs))\n  {} ```\n  * is more complex than the version that takes expr by value: ```\n    InPredicate::InPredicate(folly::F14HashSet<T> rhs) : rhs_(std::move(rhs))\n    {} ```\n  * However, the first requires either a std::move() or an explicit copy at the\n    call point; the second doesn’t. The performance of the two should be almost\n    identical.\n* Add comments when it’s not clear which argument is intended in a function\n  call.  This is particularly a problem for longer signatures with repeated\n  types or constant arguments. For example, `phrobinicate(/*elements=*/{1, 2},\n  /*startOffset=*/0, /*length=*/2)`\n* Use the /*argName=*/value format (note the lack of spaces). Clang-tidy\n  supports checking the given argument name against the declaration when this\n  format is used.\n\n## Namespaces\n\n* All Velox code should be placed inside the `facebook::velox` namespace\n* Always use nested namespace definition:\n  * `namespace facebook::velox::core {` and not\n  * `namespace facebook { namespace velox { namespace core {`\n* Always add an inline comment at the end of the namespace definition, and surround\n  it by empty lines:\n\n```\nnamespace facebook::velox::exec {\n\nmyFunc();\n\n} // namespace facebook::velox::exec\n```\n\n  * not:\n\n```\nnamespace facebook::velox::exec {\nmyFunc();\n}\n```\n\n* Use sub namespaces (e.g: facebook::velox::core) to logically group large\n  chunks of related code and prevent identifier clashes.\n  * Namespaces should make it easier to code, not harder. Refrain from creating\n    hierarchies that are way too long.\n  * Namespace don’t necessarily need to reflect the on-disk layout. \n    * This isn’t java.\n* Guidelines for importing namespaces:\n  * Don't EVER put `using namespace anything;` OR `using anything::anything;`\n    in a header file. This pollutes the global namespace and makes it extremely\n    difficult to refactor code.\n  * It’s very useful to not have to fully-qualify types as it can make code\n    more readable. In header files, it's unavoidable. ALWAYS fully qualify\n    names in a header (e.g. it's `std::string`, not just `string`).\n  * In cpp files, best practice is to add a using declaration after your list\n    of `#includes` (e.g. `using tests::VectorMaker;`) and to then just write\n    `VectorMaker`.\n  * `using namespace std;` can lead to surprising behavior, especially when\n    other modules don't follow best practices with their using statements and\n    what they dump into global scope. The best defensive programming practice\n    for std it to fully qualify symbols, e.g: `std::string`, std::vector\n    * Do not use `using namespace std;`\n  * Use `using namespace anything_else;` somewhat sparingly – the whole point\n    of namespaces is obliterated when the code starts doing this prolifically.\n    Frequently, `using foo::bar::BazClass;` is better.\n\n## Type Aliases\n\n* For types widely used together with std::shared_ptr, consider introducing\n  aliases for std::shared_ptr<Xxx> using naming convention XxxPtr. In some\n  cases it makes sense to alias std::shared_ptr<const Xxx>. Here are some\n  examples of existing aliases: TypePtr, VectorPtr, FlatVectorPtr,\n  ArrayVectorPtr, MapVectorPtr, RowVectorPtr, TypedExprPtr, PlanNodePtr.\n\n```\nusing TypePtr = std::shared_ptr<const Type>;\n```\n* Similarly, widely used template types also benefit from shorter or clearer\n  aliases.\n\n```\nusing ContinueFuture = folly::SemiFuture<bool>;\nusing ContinuePromise = VeloxPromise<bool>;\n```\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 15.3837890625,
          "content": "# Contributing\n\nWelcome! Thank you for your interest in the Velox project. Before starting to\ncontribute, please take a moment to review the guidelines outlined below.\n\nContributions are not just about code. Contributing code is great, but that’s\nprobably not the best place to start. There are many ways in which people can \nmake contributions to the project and community.\n\n## Code of Conduct\n\nFirst and foremost, the Velox project and all its contributors and\n[maintainers]((https://velox-lib.io/docs/community/components-and-maintainers))\nare governed by a [Code of Conduct](CODE_OF_CONDUCT.md). When participating,\nyou are expected to uphold this code.\n\n## Community\n\nA good first step to getting involved in the Velox project is to participate in\nconversations in GitHub\n[Issues](https://github.com/facebookincubator/velox/issues) and\n[Discussions](https://github.com/facebookincubator/velox/discussions), and join\nthe [the Velox-OSS Slack workspace](http://velox-oss.slack.com) - please\ncomment on [this\nDiscussion](https://github.com/facebookincubator/velox/discussions/11348) to\nget access.\n\n## Components and Maintainers\n\nVelox is logically organized into components, each maintained by a group of\nindividuals.  The list of components and their respective maintainers [can be\nfound here](https://velox-lib.io/docs/community/components-and-maintainers).\n\n## Documentation\n\nHelp the community understand how to use the Velox library by proposing\nadditions to our [docs](https://facebookincubator.github.io/velox/index.html) or pointing \nout outdated or missing pieces.\n\n## Bug Reports\n\nFound a bug? Help us by filing an issue on GitHub.\n\nEnsure the bug was not already reported by searching \n[GitHub Issues](https://github.com/facebookincubator/velox/issues). If you're\nunable to find an open issue addressing the problem, open a new one. Be sure to\ninclude a title and clear description, as much relevant information as\npossible, and a code sample or an executable test case demonstrating the\nexpected behavior.\n\nMeta has a [bounty program](https://www.facebook.com/whitehat/) for the safe disclosure \nof security bugs. In those cases, please go through the process outlined on that page \nand do not file a public issue.\n\n## Code Contribution Process\n\nThe code contribution process is designed to reduce the burden on reviewers and \nmaintainers, allowing them to provide more timely feedback and keeping the \namount of rework from contributors to a minimum.\n\nWe encourage new contributors to start with bug fixes and small features so you\nget familiar with the contribution process, while building relationships with\ncommunity members.  Look for GitHub issues labeled [good first\nissue](https://github.com/facebookincubator/velox/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22)\nor consider adding one of the [missing Presto SQL\nfunctions](https://github.com/facebookincubator/velox/issues/2262).\n\nThe contribution process is outlined below:\n\n1. Sign the [Contributor License Agreement](https://code.facebook.com/cla)\n   (CLA). This step needs to be completed only once.\n\n2. Review the [`LICENSE`](LICENSE) file. By contributing to Velox, you agree that your\n   contributions will be licensed under that LICENSE file. This step needs to be\n   completed only once.\n\n3. Start a discussion by creating a Github Issue, or asking on Slack (unless the change is trivial).\n   * This step helps you identify possible collaborators and reviewers.\n   * Does the proposed change align with the technical vision and project values?\n   * Will the change conflict with another change in progress? If so, work with others to minimize impact.\n\n4. Implement the change.\n   * Always follow the [coding best practices](#coding-best-practices) outlined below.\n   * If the change is large, consider posting a draft Github pull request (PR)\n     with the title prefixed with [WIP], and share with collaborators to get early feedback.\n   * Ensure the PR follows the [title and description\n     guidelines](#commit-messages) presented below.\n   * Create/submit a Github PR and make sure it passes **all CI tests**.\n     * Do not ignore red CI signals, even if they seem preexisting.\n     * If you believe a red CI signal is unrelated to your change, please search for\n     existing Issues reporting this particular test. They should contain the test name\n     in the Issue title.\n     * If an Issue already exist, add a comment containing the link to your failed CI job.\n     * If an Issue does not exist, please create one with the title \"Broken CI \\<test\\_name\\>\",\n     tagging the appropriate maintainers for that component.\n   * Once all CI signals are green, tag the reviewers identified in Step 3.\n\n5. Review is performed by one or more reviewers.\n   * This normally happens within a few days, but may take longer if the change\n   is large, complex, or if a critical reviewer is unavailable (feel free to\n   ping them in the PR or on Slack).\n\n6. Address feedback and update the PR.\n   * After pushing changes, add a comment to the PR mentioning the\n   reviewer(s) by name, stating the comments have been addressed. This is the best\n   way to ensure that the reviewer is notified that the code is ready to be reviewed\n   again.\n   * As a PR author, please do not \"Resolve Conversation\" when review comments are \n   addressed. Instead, wait for the reviewer to verify the comment has been\n   addressed and resolve the conversation.\n\n7. Iterate on this process until your changes are reviewed and accepted by a \n   maintainer. At this point, a Meta employee will be notified to merge your PR,\n   due to tooling limitations.\n\n## Commit Messages\n\nWe build Velox for the long-run, and to do so it is crucial that project\nmaintainers are able to efficiently inspect and understand project logs.\n\nCommit messages that follow a strict pattern improve maintainability, and allow\ntasks such as summarizing changelogs and identifying API breaking changes to be\nautomated. Despite requiring more rigor from authors and reviewers, consistency\nand uniformity in developer workflows improve productivity in the long term.\n\nIn Velox, commit messages are generated based on the input provided to PRs, and\nmust follow the [conventional commit\nspecification](https://www.conventionalcommits.org/en/v1.0.0/) in the following\nmanner:\n\n**PR titles** must follow the pattern:\n\n> \\<type\\>[(optional scope)]: \\<description\\>\n\nwhere:\n\n* *Type* can be any of the following keywords:\n  * **feat** when new features are being added.\n  * **fix** for bug fixes.\n  * **build** for build or CI-related improvements.\n  * **test** for adding tests (only).\n  * **docs** for enhancements to documentation (only).\n  * **refactor** for refactoring (no logic changes).\n  * **misc** for other changes that may not match any of the categories above.\n\n* PR titles also take an *optional scope* field containing the area\n  of the code being target by the PR, to further help commit classification.\n  For example, \"fix(expr): \" or \"refactor(parquet): \" or \"feat(memory):\".\n  It is ok to omit this field if there is no adequate classification for the\n  PR, or if the PR touches multiple different components.\n\n  * Examples of scopes are *vector, type, expr, operator, memory, dwio,\n    parquet, dwrf, filesystem, connector, hive, function, aggregate*, but not\n    limited to.\n\n* A *description* sentence summarizing the PR, written in imperative tone. The\n  description must be capitalized, not contain a period at the end, and wrap\n  lines at the 80 characters limit to improve git-log readability.\n\n * PR titles should also add a '!' to signal if the PR may break backward\n   compatibility. For example: \"fix(expr)!: ...\" or \"feat!: ...\". Moreover, the\n   compatibility changes need to be described in a section in the PR body as\n   described below.\n\nExamples of PR titles are:\n\n* feat(type): Add IPPREFIX\n* fix: Prevent unnecessary flatmap to map conversion\n* refactor(vector): Use 'if constexpr' for Buffer::is_pod_like_v\\<T\\>\n\nThe **PR body** must contain a summary of the change, focusing on the *what*\nand *why*. Wrap lines at 80 characters for better git-log readability.\n\n**Breaking API Changes.** A \"BREAKING CHANGE:\" footer must be added to PRs\nthat break backwards compatibility of any external API in Velox, followed by a\nsentence explaining the extent of the API change. This means either API changes\nthat may break client builds, or semantic changes on the behavior of such APIs.\n\nIf there is a Github Issue or Discussion related to the PR, authors must also\nadd a \"Fixes #[number]\" line to the bottom of the PR body. This instructs\nGithub to automatically close the associated Issue when the PR is merged. If\nyou merely want to link the PR to an Issue (without closing it when the PR gets\nmerged), use the pattern \"Part of #[number]\".\n\nBefore contributing PRs to Velox, please review these resource about how to\nwrite great commit messages:\n\n* [How to Write Better Git Commit Messages – A Step-By-Step Guide](https://www.freecodecamp.org/news/how-to-write-better-git-commit-messages/)\n* [How to Write a Git Commit Message](https://cbea.ms/git-commit/)\n\n## Coding Best Practices\n\nWhen submitting code contributions to Velox, make sure to adhere to the\nfollowing best practices:\n\n1. **Coding Style**: Review and strictly follow our coding style document, \n   available in [`CODING_STYLE.md`](CODING_STYLE.md).\n   * Velox favors consistency over personal preference. If there are \n   technical reasons why a specific guideline should not be followed, \n   please start a separate discussion with the community to update the\n   coding style document first.\n   * If you are simply updating code that did not comply with the coding \n   style, please do so in a standalone PR isolated from other logic changes. \n\n2. **Small Incremental Changes**: If the change is large, work with the maintainers\n   on a plan to break and submit it as smaller (yet atomic) parts.\n   * [Research indicates](https://smartbear.com/learn/code-review/best-practices-for-peer-code-review/) \n   that engineers can only effectively review up to \n   400 lines of code at a time. The human brain can only process so much information \n   at a time; beyond that threshold the ability to find bugs and other flaws\n   decreases.\n   * As larger PRs usually take longer to review and iterate, they \n   tend to slow down the software development process. As much as possible, \n   split your work into smaller changes. \n\n3. **Unit tests**: With rare exceptions, every PR should contain unit tests\n   covering the logic added/modified.\n   * Unit tests protect our codebase from regressions, promote less coupled\n   APIs, and provide an executable form of documentation that’s useful for\n   new engineers reasoning about the codebase.\n   * Good unit tests are fast, isolated, repeatable, and exercise all APIs \n   including their edge cases.\n   * The lack of existing tests is not a good reason not to add tests to\n   your PR. If a component or API does not have a corresponding \n   unit test suite, please consider improving the codebase by first adding a\n   new unit test suite to ensure the existing behavior is correct.\n\n4. **Code Comments**: Appropriately add comments to your code and document APIs.\n   * As a library, Velox code is optimized for the reader, not the writer.\n   * Comments should capture information that was on the writer’s mind, but\n   could not be represented as code. The overall goal is to make the code more\n   obvious and remove obscurity.\n   * As a guideline, every file, class, member variable, and member function\n   that is not a getter/setter should be documented.\n   * As much as possible, try to avoid functions with very large bodies. In the \n   (rare) cases where large code blocks are needed, a good practice is to group \n   smaller blocks of related code, and precede them with a blank line and a \n   high-level comment explaining what the block does.\n\n5. **Benchmarks**: Add micro-benchmarks to support your claims.\n   * As needed, add micro-benchmark to objectively evaluate performance and\n   efficiency trade-offs.\n\n6. **APIs**: Carefully design APIs.\n   * As a library, Velox APIs should be intentional. External API should only \n   be deliberately created. \n   * As a rule of thumb, components should be deep and encapsulate as much\n   complexity as possible, and APIs should be narrow, minimizing dependencies\n   across components and preventing implementation details from leaking through\n   the API.\n\n## Adding Scalar Functions\n\nAdding Presto and Spark functions are a good way to get yourself familiar with\nVelox and the code review process. In addition to the general contribution\nguidelines presented above, here are specific guidelines for contributing\nfunctions:\n\n1. Read [How to add a scalar function?](https://facebookincubator.github.io/velox/develop/scalar-functions.html) guide. When implementing a function, simple function is preferred unless the implementation of vector function provides a significant performance gain which can be demonstrated\nwith a benchmark.\n\n2. Use the following template for the PR title: Add xxx [Presto|Spark] function (replace xxx with the function name).\n   * Ensure the PR description contains a link to the function documentation\n   from Presto or Spark docs. \n   * Describe the function semantics and edge cases clearly.\n\n3. Use Presto or Spark to check the function semantics. \n   * When implementing a Spark function, check the function semantics using Spark 3.5 with ANSI OFF.\n   * Try different edge cases to check whether the function returns null, or\n   throws, etc. \n   * Make sure to replicate the exact semantics.\n\n4. Add tests exercising common inputs, all possible signatures and corner cases. \n   * Make sure the test cases are concise and easily readable. \n\n5. Make sure that obvious inefficiencies are addressed. \n   * If appropriate, provide micro-benchmarks to support your claims with data. \n\n4. Add documentation for the new function to an .rst file under velox/docs/functions directory.\n   * Functions in documentation are listed in alphabetical order. Make sure to\n   place the new function so that the order is preserved.\n\n6. Run [Fuzzer](https://facebookincubator.github.io/velox/develop/testing/fuzzer.html)\n   to test new the function in isolation as well as in combination with other functions.\n   Note: Fuzzer is under active development and the commands below may not work as is.\n   Consult the CircleCI configuration in .circleci/config.yml for the up-to-date command\n   line arguments.\n\n   ```\n# Test the new function in isolation. Use --only flag to restrict the set of functions\n   # and run for 60 seconds or longer.\n   velox_expression_fuzzer_test --only <my-new-function-name> --duration_sec 60 --logtostderr=1 --enable_variadic_signatures --velox_fuzzer_enable_complex_types --velox_fuzzer_enable_decimal_type --lazy_vector_generation_ratio 0.2 --velox_fuzzer_enable_column_reuse --velox_fuzzer_enable_expression_reuse\n\n   # Test the new function in combination with other functions. Do not restrict the set\n   # of functions and run for 10 minutes (600 seconds) or longer.\n   velox_expression_fuzzer_test --duration_sec 600 --logtostderr=1 --enable_variadic_signatures --velox_fuzzer_enable_complex_types --velox_fuzzer_enable_decimal_type --lazy_vector_generation_ratio 0.2 --velox_fuzzer_enable_column_reuse --velox_fuzzer_enable_expression_reuse\n   ```\n\nHere are example PRs:\n\n* [Add sha256 Presto function](https://github.com/facebookincubator/velox/pull/1000)\n* [Add sin, cos, tan, cosh and tanh Presto functions](https://github.com/facebookincubator/velox/pull/313)\n* [Add transform_keys and transform_values Presto functions](https://github.com/facebookincubator/velox/pull/2245)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.05859375,
          "content": "Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.11328125,
          "content": "include *.txt\ninclude *.cmake\ngraft CMake\ngraft third_party\ngraft velox\ngraft pyvelox\ngraft scripts\nprune velox/docs"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 7.625,
          "content": "# Copyright (c) Facebook, Inc. and its affiliates.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n.PHONY: all cmake build clean debug release unit\n\nSHELL=/bin/bash\nBUILD_BASE_DIR=_build\nBUILD_DIR=release\nBUILD_TYPE=Release\nBENCHMARKS_BASIC_DIR=$(BUILD_BASE_DIR)/$(BUILD_DIR)/velox/benchmarks/basic/\nBENCHMARKS_DUMP_DIR=dumps\nTREAT_WARNINGS_AS_ERRORS ?= 1\nENABLE_WALL ?= 1\nPYTHON_VENV ?= .venv\n\n# Option to make a minimal build. By default set to \"OFF\"; set to\n# \"ON\" to only build a minimal set of components. This may override\n# other build options\nVELOX_BUILD_MINIMAL ?= \"OFF\"\n\n# Control whether to build unit tests. By default set to \"ON\"; set to\n# \"OFF\" to disable.\nVELOX_BUILD_TESTING ?= \"ON\"\n\nCMAKE_FLAGS := -DTREAT_WARNINGS_AS_ERRORS=${TREAT_WARNINGS_AS_ERRORS}\nCMAKE_FLAGS += -DENABLE_ALL_WARNINGS=${ENABLE_WALL}\n\nCMAKE_FLAGS += -DVELOX_BUILD_MINIMAL=${VELOX_BUILD_MINIMAL}\nCMAKE_FLAGS += -DVELOX_BUILD_TESTING=${VELOX_BUILD_TESTING}\n\nCMAKE_FLAGS += -DCMAKE_BUILD_TYPE=$(BUILD_TYPE)\n\nifdef AWSSDK_ROOT_DIR\nCMAKE_FLAGS += -DAWSSDK_ROOT_DIR=$(AWSSDK_ROOT_DIR)\nendif\n\nifdef GCSSDK_ROOT_DIR\nCMAKE_FLAGS += -DGCSSDK_ROOT_DIR=$(GCSSDK_ROOT_DIR)\nendif\n\nifdef AZURESDK_ROOT_DIR\nCMAKE_FLAGS += -DAZURESDK_ROOT_DIR=$(AZURESDK_ROOT_DIR)\nendif\n\nifdef CUDA_ARCHITECTURES\nCMAKE_FLAGS += -DCMAKE_CUDA_ARCHITECTURES=\"$(CUDA_ARCHITECTURES)\"\nendif\n\nifdef CUDA_COMPILER\nCMAKE_FLAGS += -DCMAKE_CUDA_COMPILER=\"$(CUDA_COMPILER)\"\nendif\n\nifdef CUDA_FLAGS\nCMAKE_FLAGS += -DCMAKE_CUDA_FLAGS=\"$(CUDA_FLAGS)\"\nendif\n\n# Use Ninja if available. If Ninja is used, pass through parallelism control flags.\nUSE_NINJA ?= 1\nifeq ($(USE_NINJA), 1)\nifneq ($(shell which ninja), )\nGENERATOR := -GNinja\nGENERATOR += -DMAX_LINK_JOBS=$(MAX_LINK_JOBS)\nGENERATOR += -DMAX_HIGH_MEM_JOBS=$(MAX_HIGH_MEM_JOBS)\n\n# Ninja makes compilers disable colored output by default.\nGENERATOR += -DVELOX_FORCE_COLORED_OUTPUT=ON\nendif\nendif\n\nNUM_THREADS ?= $(shell getconf _NPROCESSORS_CONF 2>/dev/null || echo 1)\nCPU_TARGET ?= \"avx\"\n\nFUZZER_SEED ?= 123456\nFUZZER_DURATION_SEC ?= 60\n\nPYTHON_EXECUTABLE ?= $(shell which python)\n\nall: release\t\t\t#: Build the release version\n\nclean:\t\t\t\t\t#: Delete all build artifacts\n\trm -rf $(BUILD_BASE_DIR)\n\ncmake:\t\t\t\t\t#: Use CMake to create a Makefile build system\n\tmkdir -p $(BUILD_BASE_DIR)/$(BUILD_DIR) && \\\n\tcmake  -B \\\n\t\t\"$(BUILD_BASE_DIR)/$(BUILD_DIR)\" \\\n\t\t${CMAKE_FLAGS} \\\n\t\t$(GENERATOR) \\\n\t\t${EXTRA_CMAKE_FLAGS}\n\ncmake-gpu:\n\t$(MAKE) EXTRA_CMAKE_FLAGS=\"${EXTRA_CMAKE_FLAGS} -DVELOX_ENABLE_GPU=ON\" cmake\n\nbuild:\t\t\t\t\t#: Build the software based in BUILD_DIR and BUILD_TYPE variables\n\tcmake --build $(BUILD_BASE_DIR)/$(BUILD_DIR) -j $(NUM_THREADS)\n\ndebug:\t\t\t\t\t#: Build with debugging symbols\n\t$(MAKE) cmake BUILD_DIR=debug BUILD_TYPE=Debug\n\t$(MAKE) build BUILD_DIR=debug -j ${NUM_THREADS}\n\nrelease:\t\t\t\t#: Build the release version\n\t$(MAKE) cmake BUILD_DIR=release BUILD_TYPE=Release && \\\n\t$(MAKE) build BUILD_DIR=release\n\nminimal_debug:\t\t\t#: Minimal build with debugging symbols\n\t$(MAKE) cmake BUILD_DIR=debug BUILD_TYPE=debug EXTRA_CMAKE_FLAGS=\"${EXTRA_CMAKE_FLAGS} -DVELOX_BUILD_MINIMAL=ON\"\n\t$(MAKE) build BUILD_DIR=debug\n\nmin_debug: minimal_debug\n\nminimal:\t\t\t\t #: Minimal build\n\t$(MAKE) cmake BUILD_DIR=release BUILD_TYPE=release EXTRA_CMAKE_FLAGS=\"${EXTRA_CMAKE_FLAGS} -DVELOX_BUILD_MINIMAL=ON\"\n\t$(MAKE) build BUILD_DIR=release\n\ngpu:\t\t\t\t\t\t #: Build with GPU support\n\t$(MAKE) cmake BUILD_DIR=release BUILD_TYPE=release EXTRA_CMAKE_FLAGS=\"${EXTRA_CMAKE_FLAGS} -DVELOX_ENABLE_GPU=ON\"\n\t$(MAKE) build BUILD_DIR=release\n\ngpu_debug:\t\t\t #: Build with debugging symbols and GPU support\n\t$(MAKE) cmake BUILD_DIR=debug BUILD_TYPE=debug EXTRA_CMAKE_FLAGS=\"${EXTRA_CMAKE_FLAGS} -DVELOX_ENABLE_GPU=ON\"\n\t$(MAKE) build BUILD_DIR=debug\n\ndwio:\t\t\t\t\t\t#: Minimal build with dwio enabled.\n\t$(MAKE) cmake BUILD_DIR=release BUILD_TYPE=release EXTRA_CMAKE_FLAGS=\"${EXTRA_CMAKE_FLAGS} \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    \t\t\t\t\t\t\t  -DVELOX_BUILD_MINIMAL_WITH_DWIO=ON\"\n\t$(MAKE) build BUILD_DIR=release\n\ndwio_debug:\t\t\t#: Minimal build with dwio debugging symbols.\n\t$(MAKE) cmake BUILD_DIR=debug BUILD_TYPE=debug EXTRA_CMAKE_FLAGS=\"${EXTRA_CMAKE_FLAGS} \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  -DVELOX_BUILD_MINIMAL_WITH_DWIO=ON\"\n\t$(MAKE) build BUILD_DIR=debug\n\nbenchmarks-basic-build:\n\t$(MAKE) release EXTRA_CMAKE_FLAGS=\" ${EXTRA_CMAKE_FLAGS} \\\n                                            -DVELOX_BUILD_TESTING=OFF \\\n                                            -DVELOX_ENABLE_BENCHMARKS_BASIC=ON\"\n\nbenchmarks-build:\n\t$(MAKE) release EXTRA_CMAKE_FLAGS=\" ${EXTRA_CMAKE_FLAGS} \\\n                                            -DVELOX_BUILD_TESTING=OFF \\\n                                            -DVELOX_ENABLE_BENCHMARKS=ON\"\n\nbenchmarks-basic-run:\n\tscripts/benchmark-runner.py run \\\n\t\t\t--bm_estimate_time \\\n\t\t\t--bm_max_secs 10 \\\n\t\t\t--bm_max_trials 10000 \\\n\t\t\t${EXTRA_BENCHMARK_FLAGS}\n\nunittest: debug\t\t\t#: Build with debugging and run unit tests\n\tcd $(BUILD_BASE_DIR)/debug && ctest -j ${NUM_THREADS} -VV --output-on-failure\n\n# Build with debugging and run expression fuzzer test. Use a fixed seed to\n# ensure the tests are reproducible.\nfuzzertest: debug\n\t$(BUILD_BASE_DIR)/debug/velox/expression/fuzzer/velox_expression_fuzzer_test \\\n\t\t\t--seed $(FUZZER_SEED) \\\n\t\t\t--duration_sec $(FUZZER_DURATION_SEC) \\\n\t\t\t--repro_persist_path $(FUZZER_REPRO_PERSIST_PATH) \\\n\t\t\t--logtostderr=1 \\\n\t\t\t--minloglevel=0\n\nformat-fix: \t\t\t#: Fix formatting issues in the main branch\nifneq (\"$(wildcard ${PYTHON_VENV}/pyvenv.cfg)\",\"\")\n\tsource ${PYTHON_VENV}/bin/activate; scripts/check.py format main --fix\nelse\n\tscripts/check.py format main --fix\nendif\n\nformat-check: \t\t\t#: Check for formatting issues on the main branch\n\tclang-format --version\nifneq (\"$(wildcard ${PYTHON_VENV}/pyvenv.cfg)\",\"\")\n\tsource ${PYTHON_VENV}/bin/activate; scripts/check.py format main\nelse\n\tscripts/check.py format main\nendif\n\nheader-fix:\t\t\t#: Fix license header issues in the current branch\nifneq (\"$(wildcard ${PYTHON_VENV}/pyvenv.cfg)\",\"\")\n\tsource ${PYTHON_VENV}/bin/activate; scripts/check.py header main --fix\nelse\n\tscripts/check.py header main --fix\nendif\n\nheader-check:\t\t\t#: Check for license header issues on the main branch\nifneq (\"$(wildcard ${PYTHON_VENV}/pyvenv.cfg)\",\"\")\n\tsource ${PYTHON_VENV}/bin/activate; scripts/check.py header main\nelse\n\tscripts/check.py header main\nendif\n\ncircleci-container:\t\t\t#: Build the linux container for CircleCi\n\t$(MAKE) linux-container CONTAINER_NAME=circleci\n\ncheck-container:\n\t$(MAKE) linux-container CONTAINER_NAME=check\n\nlinux-container:\n\trm -rf /tmp/docker && \\\n\tmkdir -p /tmp/docker && \\\n\tcp scripts/setup-helper-functions.sh scripts/setup-$(CONTAINER_NAME).sh scripts/$(CONTAINER_NAME)-container.dockfile /tmp/docker && \\\n\tcd /tmp/docker && \\\n\tdocker build --build-arg cpu_target=$(CPU_TARGET) --tag \"prestocpp/velox-$(CPU_TARGET)-$(CONTAINER_NAME):${USER}-$(shell date +%Y%m%d)\" -f $(CONTAINER_NAME)-container.dockfile .\n\nhelp:\t\t\t\t\t#: Show the help messages\n\t@cat $(firstword $(MAKEFILE_LIST)) | \\\n\tawk '/^[-a-z]+:/' | \\\n\tawk -F: '{ printf(\"%-20s   %s\\n\", $$1, $$NF) }'\n\npython-clean:\n\tDEBUG=1 ${PYTHON_EXECUTABLE} setup.py clean\n\npython-build:\n\tDEBUG=1 CMAKE_BUILD_PARALLEL_LEVEL=${NUM_THREADS} ${PYTHON_EXECUTABLE} -m pip install -e .$(extras) --verbose\n\npython-test:\n\t$(MAKE) python-build extras=\"[tests]\"\n\tDEBUG=1 ${PYTHON_EXECUTABLE} -m unittest -v\n"
        },
        {
          "name": "NOTICE.txt",
          "type": "blob",
          "size": 5.5361328125,
          "content": "The Velox Project\nCopyright © 2024 Meta Platforms, Inc.\n\nThis product includes software from the The gRPC project (Apache 2.0).\n* https://github.com/grpc/grpc/blob/v1.64.2/cmake/re2.cmake\n\nThis product includes software from the QT project (BSD, 3-clause).\n* https://github.com/qt/qtbase/blob/6.6.3/cmake/FindWrapSystemDoubleConversion.cmake\n\nThis product includes software from HowardHinnant's date library (MIT License).\n* https://github.com/HowardHinnant/date/tree/master\n\nThis product includes software from the The Arrow project. \n* https://github.com/apache/arrow/blob/apache-arrow-15.0.0/cpp/src/arrow/io/hdfs_internal.h\n* https://github.com/apache/arrow/blob/apache-arrow-15.0.0/cpp/src/arrow/io/hdfs_internal.cc\nWhich contain the following NOTICE file:\n-------\n\tApache Arrow\n\tCopyright 2016-2024 The Apache Software Foundation\n\tThis product includes software developed at\n\tThe Apache Software Foundation (http://www.apache.org/).\n\tThis product includes software from the SFrame project (BSD, 3-clause).\n\t* Copyright (C) 2015 Dato, Inc.\n\t* Copyright (c) 2009 Carnegie Mellon University.\n\tThis product includes software from the Feather project (Apache 2.0)\n\thttps://github.com/wesm/feather\n\tThis product includes software from the DyND project (BSD 2-clause)\n\thttps://github.com/libdynd\n\tThis product includes software from the LLVM project\n\t * distributed under the University of Illinois Open Source\n\tThis product includes software from the google-lint project\n\t * Copyright (c) 2009 Google Inc. All rights reserved.\n\tThis product includes software from the mman-win32 project\n\t * Copyright https://code.google.com/p/mman-win32/\n\t * Licensed under the MIT License;\n\tThis product includes software from the LevelDB project\n\t * Copyright (c) 2011 The LevelDB Authors. All rights reserved.\n\t * Use of this source code is governed by a BSD-style license that can be\n\t * Moved from Kudu http://github.com/cloudera/kudu\n\tThis product includes software from the CMake project\n\t * Copyright 2001-2009 Kitware, Inc.\n\t * Copyright 2012-2014 Continuum Analytics, Inc.\n\t * All rights reserved.\n\tThis product includes software from https://github.com/matthew-brett/multibuild (BSD 2-clause)\n\t * Copyright (c) 2013-2016, Matt Terry and Matthew Brett; all rights reserved.\n\tThis product includes software from the Ibis project (Apache 2.0)\n\t * Copyright (c) 2015 Cloudera, Inc.\n\t * https://github.com/cloudera/ibis\n\tThis product includes software from Dremio (Apache 2.0)\n\t  * Copyright (C) 2017-2018 Dremio Corporation\n\t  * https://github.com/dremio/dremio-oss\n\tThis product includes software from Google Guava (Apache 2.0)\n\t  * Copyright (C) 2007 The Guava Authors\n\t  * https://github.com/google/guava\n\tThis product include software from CMake (BSD 3-Clause)\n\t  * CMake - Cross Platform Makefile Generator\n\t  * Copyright 2000-2019 Kitware, Inc. and Contributors\n\tThe web site includes files generated by Jekyll.\n\t--------------------------------------------------------------------------------\n\tThis product includes code from Apache Kudu, which includes the following in\n\tits NOTICE file:\n\t  Apache Kudu\n\t  Copyright 2016 The Apache Software Foundation\n\t  This product includes software developed at\n\t  The Apache Software Foundation (http://www.apache.org/).\n\t  Portions of this software were developed at\n\t  Cloudera, Inc (http://www.cloudera.com/).\n\t--------------------------------------------------------------------------------\n\tThis product includes code from Apache ORC, which includes the following in\n\tits NOTICE file:\n\t  Apache ORC\n\t  Copyright 2013-2019 The Apache Software Foundation\n\t  This product includes software developed by The Apache Software\n\t  Foundation (http://www.apache.org/).\n\t  This product includes software developed by Hewlett-Packard:\n\t  (c) Copyright [2014-2015] Hewlett-Packard Development Company, L.P\n-------\n\nThis product includes software from the The Hadoop project.\n* https://github.com/apache/hadoop/blob/release-3.3.0-RC0/hadoop-hdfs-project/hadoop-hdfs-native-client/src/main/native/libhdfs/include/hdfs/hdfs.h\nWhich contains the following NOTICE file:\n----\n\tApache Hadoop\n\tCopyright 2006 and onwards The Apache Software Foundation.\n\tThis product includes software developed at\n\tThe Apache Software Foundation (http://www.apache.org/).\n\tExport Control Notice\n\t---------------------\n\tThis distribution includes cryptographic software.  The country in\n\twhich you currently reside may have restrictions on the import,\n\tpossession, use, and/or re-export to another country, of\n\tencryption software.  BEFORE using any encryption software, please\n\tcheck your country's laws, regulations and policies concerning the\n\timport, possession, or use, and re-export of encryption software, to\n\tsee if this is permitted.  See <http://www.wassenaar.org/> for more\n\tinformation.\n\tThe U.S. Government Department of Commerce, Bureau of Industry and\n\tSecurity (BIS), has classified this software as Export Commodity\n\tControl Number (ECCN) 5D002.C.1, which includes information security\n\tsoftware using or performing cryptographic functions with asymmetric\n\talgorithms.  The form and manner of this Apache Software Foundation\n\tdistribution makes it eligible for export under the License Exception\n\tENC Technology Software Unrestricted (TSU) exception (see the BIS\n\tExport Administration Regulations, Section 740.13) for both object\n\tcode and source code.\n\tThe following provides more details on the included cryptographic software:\n\tThis software uses the SSL libraries from the Jetty project written\n\tby mortbay.org.\n\tHadoop Yarn Server Web Proxy uses the BouncyCastle Java\n\tcryptography APIs written by the Legion of the Bouncy Castle Inc.\n----\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.462890625,
          "content": "<img src=\"static/logo.svg\" alt=\"Velox logo\" width=\"50%\" align=\"center\" />\n\nVelox is a composable execution engine distributed as an open source C++\nlibrary. It provides reusable, extensible, and high-performance data processing\ncomponents that can be (re-)used to build data management systems focused on\ndifferent analytical workloads, including batch, interactive, stream\nprocessing, and AI/ML. Velox was created by Meta and it is currently developed\nin partnership with IBM/Ahana, Intel, Voltron Data, Microsoft, ByteDance and\nmany other companies.\n\nIn common usage scenarios, Velox takes a fully optimized query plan as input\nand performs the described computation. Considering Velox does not provide a\nSQL parser, a dataframe layer, or a query optimizer, it is usually not meant\nto be used directly by end-users; rather, it is mostly used by developers\nintegrating and optimizing their compute engines.\n\nVelox provides the following high-level components:\n\n* **Type**: a generic typing system that supports scalar, complex, and nested\n  types, such as structs, maps, arrays, etc.\n* **Vector**: an [Arrow-compatible columnar memory layout\n  module](https://facebookincubator.github.io/velox/develop/vectors.html),\n  providing encodings such as Flat, Dictionary, Constant, and Sequence/RLE, in\n  addition to a lazy materialization pattern and support for out-of-order\n  writes.\n* **Expression Eval**: a [fully vectorized expression evaluation\n  engine](https://facebookincubator.github.io/velox/develop/expression-evaluation.html)\n  that allows expressions to be efficiently executed on top of Vector/Arrow\n  encoded data.\n* **Functions**: sets of vectorized scalar, aggregates, and window functions\n  implementations following the Presto and Spark semantic.\n* **Operators**: implementation of relational operators such as scans, writes,\n  projections, filtering, grouping, ordering, shuffle/exchange, [hash, merge,\n  and nested loop joins](https://facebookincubator.github.io/velox/develop/joins.html),\n  unnest, and more.\n* **I/O**: a connector interface for extensible data sources and sinks,\n  supporting different file formats (ORC/DWRF, Parquet, Nimble), and storage\n  adapters (S3, HDFS, GCS, ABFS, local files) to be used.\n* **Network Serializers**: an interface where different wire protocols can be\n  implemented, used for network communication, supporting\n  [PrestoPage](https://prestodb.io/docs/current/develop/serialized-page.html)\n  and Spark's UnsafeRow.\n* **Resource Management**: a collection of primitives for handling\n  computational resources, such as [memory\n  arenas](https://facebookincubator.github.io/velox/develop/arena.html) and\n  buffer management, tasks, drivers, and thread pools for CPU and thread\n  execution, spilling, and caching.\n\nVelox is extensible and allows developers to define their own engine-specific\nspecializations, including:\n\n1. Custom types\n2. [Simple and vectorized functions](https://facebookincubator.github.io/velox/develop/scalar-functions.html)\n3. [Aggregate functions](https://facebookincubator.github.io/velox/develop/aggregate-functions.html)\n4. Window functions\n5. Operators\n6. File formats\n7. Storage adapters\n8. Network serializers\n\n## Examples\n\nExamples of extensibility and integration with different component APIs [can be\nfound here](velox/examples)\n\n## Documentation\n\nDeveloper guides detailing many aspects of the library, in addition to the list\nof available functions [can be found here.](https://facebookincubator.github.io/velox)\n\nBlog posts are available [here](https://velox-lib.io/blog).\n\n## Community\n\nVelox is an open source project supported by a community of individual\ncontributors and organizations. The project's technical governance mechanics is\ndescribed [in this\ndocument.](https://velox-lib.io/docs/community/technical-governance).\n\nProject maintainers [are listed\nhere](https://velox-lib.io/docs/community/components-and-maintainers).\n\nThe main communication channel with the Velox OSS community is through the [the\nVelox-OSS Slack workspace](http://velox-oss.slack.com), github Issues, and\nDiscussions.\n\nFor access to the Velox Slack workspace, please add a comment [to this\nDiscussion](https://github.com/facebookincubator/velox/discussions/11348)\n\n## Contributing\n\nCheck our [contributing guide](CONTRIBUTING.md) to learn about how to\ncontribute to the project.\n\n## License\n\nVelox is licensed under the Apache 2.0 License. A copy of the license\n[can be found here.](LICENSE)\n\n\n## Getting Started\n\n### Get the Velox Source\n```\ngit clone https://github.com/facebookincubator/velox.git\ncd velox\n```\nOnce Velox is checked out, the first step is to install the dependencies.\nDetails on the dependencies and how Velox manages some of them for you\n[can be found here](CMake/resolve_dependency_modules/README.md).\n\nVelox also provides the following scripts to help developers setup and install Velox\ndependencies for a given platform.\n\n### Setting up dependencies\n\nThe following setup scripts use the `DEPENDENCY_DIR` environment variable to set the\nlocation to download and build packages. This defaults to `deps-download` in the current\nworking directory.\n\nUse `INSTALL_PREFIX` to set the install directory of the packages. This defaults to\n`deps-install` in the current working directory on macOS and to the default install\nlocation (eg. `/usr/local`) on linux.\nUsing the default install location `/usr/local` on macOS is discouraged since this\nlocation is used by certain Homebrew versions.\n\nManually add the `INSTALL_PREFIX` value in the IDE or bash environment,\nsay `export INSTALL_PREFIX=/Users/$USERNAME/velox/deps-install` to `~/.zshrc` so that\nsubsequent Velox builds can use the installed packages.\n\n*You can reuse `DEPENDENCY_INSTALL` and `INSTALL_PREFIX` for Velox clients such as Prestissimo\nby specifying a common shared directory.`*\n\n### Setting up on macOS\n\nOn a macOS machine (either Intel or Apple silicon) you can setup and then build like so:\n\n```shell\n$ ./scripts/setup-macos.sh\n$ make\n```\n\nWith macOS 14.4 and XCode 15.3 where `m4` is missing, you can either\n1. install `m4` via `brew`:\n```shell\n$ brew install m4\n$ export PATH=/opt/homebrew/opt/m4/bin:$PATH\n```\n\n2. or use `gm4` instead:\n```shell\n$ M4=/usr/bin/gm4 make\n```\n\n### Setting up on Ubuntu (20.04 or later)\n\nThe supported architectures are x86_64 (avx, sse), and AArch64 (apple-m1+crc, neoverse-n1).\nYou can build like so:\n\n```shell\n$ ./scripts/setup-ubuntu.sh\n$ make\n```\n\n### Setting up on Centos 9 Stream with adapters\n\nVelox adapters include file-systems such as AWS S3, Google Cloud Storage,\nand Azure Blob File System. These adapters require installation of additional\nlibraries. Once you have checked out Velox, you can setup and build like so:\n\n```shell\n$ ./scripts/setup-centos9.sh\n$ ./scripts/setup-adapters.sh\n$ make\n```\n\nNote that `setup-adapters.sh` supports macOS and Ubuntu 20.04 or later.\n\n### Using Clang on Linux\n\nClang 15 can be additionally installed during the setup step for Ubuntu 22.04/24.04\nand CentOS 9 by setting the `USE_CLANG` environment variable prior to running the platform specific setup script.\n```shell\n$ export USE_CLANG=true\n```\nThis will install and use Clang 15 to build the dependencies instead of using the default GCC compiler.\n\nOnce completed, and before running any `make` command, set the compiler to be used:\n```shell\n$ export CC=/usr/bin/clang-15\n$ export CXX=/usr/bin/clang++-15\n$ make\n```\n\n### Building Velox\n\nRun `make` in the root directory to compile the sources. For development, use\n`make debug` to build a non-optimized debug version, or `make release` to build\nan optimized version.  Use `make unittest` to build and run tests.\n\nNote that,\n* Velox requires a compiler at the minimum GCC 11.0 or Clang 15.0.\n* Velox requires the CPU to support instruction sets:\n  * bmi\n  * bmi2\n  * f16c\n* Velox tries to use the following (or equivalent) instruction sets where available:\n  * On Intel CPUs\n    * avx\n    * avx2\n    * sse\n  * On ARM\n    * Neon\n    * Neon64\n\nBuild metrics for Velox are published at <https://facebookincubator.github.io/velox/bm-report/>\n\n### Building Velox with docker-compose\n\nIf you don't want to install the system dependencies required to build Velox,\nyou can also build and run tests for Velox on a docker container\nusing [docker-compose](https://docs.docker.com/compose/).\nUse the following commands:\n\n```shell\n$ docker-compose build ubuntu-cpp\n$ docker-compose run --rm ubuntu-cpp\n```\nIf you want to increase or decrease the number of threads used when building Velox\nyou can override the `NUM_THREADS` environment variable by doing:\n```shell\n$ docker-compose run -e NUM_THREADS=<NUM_THREADS_TO_USE> --rm ubuntu-cpp\n```\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 4.32421875,
          "content": "# Copyright (c) Facebook, Inc. and its affiliates.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nversion: '3.5'\n\nservices:\n  ubuntu-cpp:\n    # Usage:\n    #   docker-compose pull ubuntu-cpp or docker-compose build ubuntu-cpp\n    #   docker-compose run --rm ubuntu-cpp\n    #   or\n    #   docker-compose run -e NUM_THREADS=<NUMBER_OF_THREADS_TO_USE> --rm ubuntu-cpp\n    #   to set the number of threads used during compilation\n    image: ghcr.io/facebookincubator/velox-dev:ubuntu-22.04\n    build:\n      context: .\n      dockerfile: scripts/ubuntu-22.04-cpp.dockerfile\n    environment:\n      NUM_THREADS: 8 # default value for NUM_THREADS\n      VELOX_DEPENDENCY_SOURCE: BUNDLED # Build dependencies from source\n      CCACHE_DIR: \"/velox/.ccache\"\n    volumes:\n      - .:/velox:delegated\n    command: scripts/docker-command.sh\n\n  adapters-cpp:\n    # Usage:\n    #   docker-compose pull adapters-cpp or docker-compose build adapters-cpp\n    #   or\n    #   docker-compose run --rm adapters-cpp\n    #   or\n    #   docker-compose run -e NUM_THREADS=<NUMBER_OF_THREADS_TO_USE> --rm adapters-cpp\n    #   to set the number of threads used during compilation\n    # scripts/adapters.dockerfile uses SHELL which is not supported for OCI image format.\n    # podman users must specify \"--podman-build-args='--format docker'\" argument.\n    image: ghcr.io/facebookincubator/velox-dev:adapters\n    build:\n      context: .\n      dockerfile: scripts/adapters.dockerfile\n      args:\n        image: ghcr.io/facebookincubator/velox-dev:centos9\n    environment:\n      NUM_THREADS: 8 # default value for NUM_THREADS\n      CCACHE_DIR: \"/velox/.ccache\"\n      EXTRA_CMAKE_FLAGS: -DVELOX_ENABLE_PARQUET=ON \n                         -DVELOX_ENABLE_S3=ON\n    volumes:\n      - .:/velox:delegated\n    working_dir: /velox\n    command: /velox/scripts/docker-command.sh\n\n  centos-cpp:\n    # Usage:\n    #   docker-compose pull centos-cpp or docker-compose build centos-cpp\n    #   docker-compose run --rm centos-cpp\n    #   or\n    #   docker-compose run -e NUM_THREADS=<NUMBER_OF_THREADS_TO_USE> --rm centos-cpp\n    #   to set the number of threads used during compilation\n    image: ghcr.io/facebookincubator/velox-dev:centos9\n    build:\n      context: .\n      dockerfile: scripts/centos.dockerfile\n      args:\n        image: quay.io/centos/centos:stream9\n    environment:\n      NUM_THREADS: 8 # default value for NUM_THREADS\n      CCACHE_DIR: \"/velox/.ccache\"\n    volumes:\n      - .:/velox:delegated\n    working_dir: /velox\n    command: /velox/scripts/docker-command.sh\n\n  presto-java:\n  # Usage:\n  #   docker-compose pull presto-java or docker-compose build presto-java\n  #   docker-compose run --rm presto-java\n  #   or\n  #   docker-compose run -e NUM_THREADS=<NUMBER_OF_THREADS_TO_USE> --rm presto-java\n  #   to set the number of threads used during compilation\n    image: ghcr.io/facebookincubator/velox-dev:presto-java\n    build:\n      args:\n        - PRESTO_VERSION=0.288\n      context: .\n      dockerfile: scripts/prestojava-container.dockerfile\n    environment:\n      NUM_THREADS: 8 # default value for NUM_THREADS\n      CCACHE_DIR: \"/velox/.ccache\"\n    volumes:\n      - .:/velox:delegated\n    working_dir: /velox\n    command: /velox/scripts/docker-command.sh\n\n  spark-server:\n  # Usage:\n  #   docker-compose pull spark-server or docker-compose build spark-server\n  #   docker-compose run --rm spark-server\n  #   or\n  #   docker-compose run -e NUM_THREADS=<NUMBER_OF_THREADS_TO_USE> --rm spark-server\n  #   to set the number of threads used during compilation\n    image: ghcr.io/facebookincubator/velox-dev:spark-server\n    build:\n      args:\n        - SPARK_VERSION=3.5.1\n      context: .\n      dockerfile: scripts/spark-container.dockerfile\n    environment:\n      NUM_THREADS: 8 # default value for NUM_THREADS\n      CCACHE_DIR: \"/velox/.ccache\"\n    volumes:\n      - .:/velox:delegated\n    working_dir: /velox\n    command: /velox/scripts/docker-command.sh\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "license.header",
          "type": "blob",
          "size": 0.5703125,
          "content": " Copyright (c) Facebook, Inc. and its affiliates.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n"
        },
        {
          "name": "pyvelox",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 6.6884765625,
          "content": "# Copyright (c) Facebook, Inc. and its affiliates.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n#!/usr/bin/env python\n# Copyright (c) Meta Platforms, Inc. and affiliates.\n# All rights reserved.\n#\n# This source code is licensed under the BSD-style license found in the\n# LICENSE file in the root directory of this source tree.\n\nimport distutils.command.build\nimport distutils.command.clean\nimport os\nimport re\nimport shutil\nimport subprocess\nimport sys\nfrom pathlib import Path\n\nfrom setuptools import Extension, find_packages, setup\nfrom setuptools.command.build_ext import build_ext\n\nROOT_DIR = Path(__file__).parent.resolve()\n\nwith open(\"pyvelox/README.md\") as f:\n    readme = f.read()\n\n\n# Override build directory\nclass BuildCommand(distutils.command.build.build):\n    def initialize_options(self):\n        distutils.command.build.build.initialize_options(self)\n        self.build_base = \"_build\"\n\n\ndef _get_version():\n    version = open(\"./version.txt\").read().strip()\n    version = re.sub(\"#.*\\n?\", \"\", version, flags=re.MULTILINE)\n    sha = \"Unknown\"\n    try:\n        sha = (\n            subprocess.check_output([\"git\", \"rev-parse\", \"HEAD\"], cwd=str(ROOT_DIR))\n            .decode(\"ascii\")\n            .strip()\n        )\n    except Exception:\n        pass\n\n    if os.getenv(\"BUILD_VERSION\"):\n        version = os.getenv(\"BUILD_VERSION\")\n    elif sha != \"Unknown\":\n        version += \"+\" + sha[:7]\n\n    return version, sha\n\n\ndef _export_version(version, sha):\n    version_path = ROOT_DIR / \"pyvelox\" / \"version.py\"\n    with open(version_path, \"w\") as f:\n        f.write(\"__version__ = '{}'\\n\".format(version))\n        f.write(\"git_version = {}\\n\".format(repr(sha)))\n\n\nVERSION, SHA = _get_version()\n_export_version(VERSION, SHA)\n\nprint(\"-- Building version \" + VERSION)\n\n\nclass clean(distutils.command.clean.clean):\n    def run(self):\n        # Run default behavior first\n        distutils.command.clean.clean.run(self)\n\n        # Remove pyvelox extension\n        for path in (ROOT_DIR / \"pyvelox\").glob(\"**/*.so\"):\n            print(f\"removing '{path}'\")\n            path.unlink()\n        # Remove build directory\n        build_dirs = [\n            ROOT_DIR / \"_build\",\n        ]\n        for path in build_dirs:\n            if path.exists():\n                print(f\"removing '{path}' (and everything under it)\")\n                shutil.rmtree(str(path), ignore_errors=True)\n\n\n# Based off of\n# https://github.com/pytorch/audio/blob/2c8aad97fc8d7647ee8b2df2de9312cce0355ef6/build_tools/setup_helpers/extension.py#L46\nclass CMakeBuild(build_ext):\n    def run(self):\n        try:\n            subprocess.check_output([\"cmake\", \"--version\"])\n        except OSError:\n            raise RuntimeError(\"CMake is not available.\")\n        super().run()\n\n    def build_extension(self, ext):\n        extdir = os.path.abspath(os.path.dirname(self.get_ext_fullpath(ext.name)))\n        # Allow using a pre-built Velox library (for CI and development) e.g. 'VELOX_BUILD_DIR=_build/velox/debug'\n        # The build in question must have been built with 'VELOX_BUILD_PYTHON_PACKAGE=ON' and the same python version.\n        if \"VELOX_BUILD_DIR\" in os.environ:\n            velox_dir = os.path.abspath(os.environ[\"VELOX_BUILD_DIR\"])\n\n            if not os.path.isdir(extdir):\n                os.symlink(velox_dir, os.path.dirname(extdir), target_is_directory=True)\n\n            print(f\"Using pre-built Velox library from {velox_dir}\")\n            return\n\n        # required for auto-detection of auxiliary \"native\" libs\n        if not extdir.endswith(os.path.sep):\n            extdir += os.path.sep\n\n        if \"DEBUG\" in os.environ:\n            cfg = \"Debug\" if os.environ[\"DEBUG\"] == \"1\" else \"Release\"\n        else:\n            cfg = \"Debug\" if self.debug else \"Release\"\n\n        exec_path = sys.executable\n\n        cmake_args = [\n            f\"-DCMAKE_LIBRARY_OUTPUT_DIRECTORY={extdir}\",\n            f\"-DCMAKE_BUILD_TYPE={cfg}\",\n            f\"-DCMAKE_INSTALL_PREFIX={extdir}\",\n            \"-DCMAKE_VERBOSE_MAKEFILE=ON\",\n            \"-DVELOX_BUILD_MINIMAL=ON\",\n            \"-DVELOX_BUILD_PYTHON_PACKAGE=ON\",\n            f\"-DPYTHON_EXECUTABLE={exec_path} \",\n        ]\n        build_args = []\n\n        # Default to Ninja\n        if \"CMAKE_GENERATOR\" not in os.environ:\n            cmake_args += [\"-GNinja\"]\n\n        # Set CMAKE_BUILD_PARALLEL_LEVEL to control the parallel build level\n        # across all generators.\n        if \"CMAKE_BUILD_PARALLEL_LEVEL\" not in os.environ:\n            # self.parallel is a Python 3 only way to set parallel jobs by hand\n            # using -j in the build_ext call, not supported by pip or PyPA-build.\n            if hasattr(self, \"parallel\") and self.parallel:\n                # CMake 3.12+ only.\n                build_args += [\"-j{}\".format(self.parallel)]\n\n        if not os.path.exists(self.build_temp):\n            os.makedirs(self.build_temp)\n\n        subprocess.check_call(\n            [\"cmake\", str(ROOT_DIR)] + cmake_args,\n            cwd=self.build_temp,\n        )\n        subprocess.check_call(\n            [\"cmake\", \"--build\", \".\"] + build_args, cwd=self.build_temp\n        )\n\n\nsetup(\n    name=\"pyvelox\",\n    version=VERSION,\n    description=\"Python bindings and extensions for Velox\",\n    long_description=readme,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/facebookincubator/velox\",\n    author=\"Meta\",\n    author_email=\"velox@fb.com\",\n    license=\"Apache License 2.0\",\n    install_requires=[\n        \"cffi\",\n        \"typing\",\n        \"tabulate\",\n        \"typing-inspect\",\n        \"pyarrow\",\n    ],\n    extras_require={\"tests\": [\"pyarrow\"]},\n    python_requires=\">=3.7\",\n    classifiers=[\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Science/Research\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Operating System :: POSIX :: Linux\",\n        \"Programming Language :: C++\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n    ],\n    packages=find_packages() + find_packages(where=\"./test\"),\n    zip_safe=False,\n    ext_modules=[Extension(name=\"pyvelox.pyvelox\", sources=[])],\n    cmdclass={\"build_ext\": CMakeBuild, \"clean\": clean, \"build\": BuildCommand},\n)\n"
        },
        {
          "name": "static",
          "type": "tree",
          "content": null
        },
        {
          "name": "velox",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.txt",
          "type": "blob",
          "size": 0.5908203125,
          "content": "# Copyright (c) Facebook, Inc. and its affiliates.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n0.0.1a0\n"
        },
        {
          "name": "website",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}