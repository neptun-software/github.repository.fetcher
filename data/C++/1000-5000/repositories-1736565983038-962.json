{
  "metadata": {
    "timestamp": 1736565983038,
    "page": 962,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "stepmania/stepmania",
      "stars": 1893,
      "defaultBranch": "5_1-new",
      "files": [
        {
          "name": ".appveyor.yml",
          "type": "blob",
          "size": 1.6552734375,
          "content": "version: 5.1.{build}.{branch}\r\nenvironment:\r\n  access_token:\r\n    secure: vsDaeFdGCIGlIxWSEdsDomYtr5mKS5IPGHc4NwuDZ5D6mCna0STrDvMZ6IP6mOBK\r\npull_requests:\r\n  do_not_increment_build_number: true\r\nskip_tags: true\r\nos: Visual Studio 2015\r\nconfiguration: Release\r\nshallow_clone: false\r\nclone_depth: 1\r\nclone_folder: C:\\Repos\\StepMania\r\ninit:\r\n- cmd: >-\r\n    git config --global credential.helper store\r\n\r\n    set GITHUB_API_URL=https://api.github.com/repos/%APPVEYOR_REPO_NAME%/statuses/%APPVEYOR_REPO_COMMIT%\r\n\r\n    set APPVEYOR_BUILD_URL=https://ci.appveyor.com/project/%APPVEYOR_ACCOUNT_NAME%/%APPVEYOR_PROJECT_SLUG%/build/%APPVEYOR_BUILD_VERSION%\r\n\r\n    set SM_COMMIT_SHORT=%APPVEYOR_REPO_COMMIT:~0,7%\r\n\r\n    set SM_SETUP_EXE_NAME=StepMania-5.1-git-%SM_COMMIT_SHORT%-win32.exe\r\n\r\ninstall:\r\n- cmd: >-\r\n    choco install cmake\r\n\r\n    choco install nsis -version 2.46.0.20150406\r\nbefore_build:\r\n- cmd: >-\r\n    choco upgrade cmake\r\n\r\n    set path=C:\\Program Files\\CMake\\bin;%path%\r\n\r\n    cd Build\r\n\r\n    cmake -G \"Visual Studio 14 2015\" -T \"v140_xp\" -DWITH_IRC_POST_HOOK=ON ..\r\nbuild_script:\r\n  - cmake --build . --config %CONFIGURATION% --parallel 2\r\nartifacts:\r\n  - path: Build/*.exe\r\n    type: exe\r\non_success:\r\n- cmd: >-\r\n    echo \"Posting to IRC now...\"\r\n\r\n    rem C:\\Repos\\StepMania\\Program\\irc-reporter.exe \"%APPVEYOR_REPO_NAME%\" \"%APPVEYOR_BUILD_VERSION%\"  \"%SM_COMMIT_SHORT%\" \"%APPVEYOR_REPO_COMMIT_AUTHOR%\" \"%APPVEYOR_BUILD_URL%\" \"success\"\r\non_failure:\r\n- cmd: >-\r\n    echo \"Posting to IRC now...\"\r\n\r\n    rem C:\\Repos\\StepMania\\Program\\irc-reporter.exe \"%APPVEYOR_REPO_NAME%\" \"%APPVEYOR_BUILD_VERSION%\" \"%SM_COMMIT_SHORT%\" \"%APPVEYOR_REPO_COMMIT_AUTHOR%\" \"%APPVEYOR_BUILD_URL%\" \"failure\"\r\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.259765625,
          "content": "# editorconfig.org\nroot = true\n\n[*]\nindent_style = tab\nindent_size = 4\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.cmake]\nindent_size = 2\nindent_style = space\n\n[*.txt]\nindent_style = space\n\n[*.md]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.587890625,
          "content": "# Traditional Compilation File Stuff.\n*.o\n*.obj\n*.a\n\n# CMake Files/Directories\nCMakeFiles/\nCMakeCache.txt\nCMakeScripts/\ncmake_install.cmake\nCPackConfig.cmake\nCPackSourceConfig.cmake\n# The following are generated from CMake, and thus should be stopped.\n.codelite/\nStepMania.project\nStepMania.workspace\nversion.hpp\nBuild/*\nBuild/*/*\nDebug/\nRelease/\nContents/\nverdata.*\nStepMania-debug\nstepmania-debug\nXcode/Info.StepMania.plist\nXcode/plistHelper.hpp\nsrc/version_updater/VersionUpdater\nsrc/generated\nextern/mad-0.15.1b/config.h\nextern/libjpeg/jconfig.h\nextern/newogg/include/ogg/config_types.h\n\n# Text Editor Based Items\n___*\n*~\n*.log\n*.sublime-project\n*.sublime-workspace\n*.old\n\n# Repository Files\n*.orig\n.git\n.hg\n.hgignore\n.hgtags\n.svn\n.cvsignore\n*.diff\n*.patch\n*_BACKUP_*\n*_BASE_*\n*_LOCAL_*\n*_REMOTE_*\n\n# Mac Programming Files\n*.pbxuser\nPBProject/build\nXcode/build\nXcode/*.xcodeproj/xcuserdata/\n*.xcodeproj/xcuserdata\n*.xcodeproj/project.xcworkspace\n*.xcscheme\nWorkspaceSettings.xcsettings\nUserInterfaceState.xcuserstate\n*.xccheckout\ncontents.xcworkspacedata\nxcschememanagement.plist\nPBProject/Hardware.plist\n\n# Mac General Files\n*.app\n*.dmg\n.DS_Store\n\n# Visual Studio\n*.pdb\n*.sdf\n*.opensdf\n*.suo\n*.exp\n*.ilk\n*.map\n*.aps\n*.res\n\n# Windows General Files\nThumbs.db\n*.exe\n*.dll\nnsis_strings_temp.inc\n\n# Linux General Files\n.dirstamp\nMakefile\nstepmania\nMakefile.in\nconfig.status\n_build/*\naclocal.m4\nautoconf/*\nautom4te.cache/*\nconfigure\nsrc/Makefile.in\nsrc/Makefile\nsrc/config.h\nsrc/config.h.in\nsrc/stamp-h1\nGtkModule.so\nStepMania\ncore\n\n# Version control specific.\n*.BACKUP.*\n*.BASE.*\n*.LOCAL.*\n*.REMOTE.*\n\n# StepMania Specific\n*.smzip\nver.cpp\ngitversion.h\nCache/\nSave/\nLogs/\nSongs/*\nScreenshots/\nportable.ini\nDocs/doxygen\nData/UserPrefs\nData/uPrefs\nData/GamePrefs/*.cfg\nData/Static.ini\nThemes/pump\nThemes/pump-*\nThemes/optical-release\nThemes/moonlight\nThemes/ultralight\nThemes/test\nsrc/version.bin\nsrc/verstub.cpp\nbundle/ffmpeg/.config\nbundle/ffmpeg/.version\nbundle/ffmpeg/config.*\nbundle/ffmpeg/doc/config.texi\nbundle/ffmpeg/libavutil/avconfig.h\nbundle/ffmpeg/version.h\nbundle/ffmpeg/*/*.so\nbundle/ffmpeg/*/*.so.*\nbundle/ffmpeg/*/*.ver\nbundle/ffmpeg/*/*.def\nbundle/ffmpeg/*/*.orig.def\nbundle/ffmpeg/*/*.lib\nsrc/build-*\nsrc/Release-*\nsrc/libtomcrypt/build-*\nsrc/libtomcrypt/Release-*\nsrc/libtomcrypt/Debug\nsrc/libtommath/build-*\nsrc/libtommath/Release-*\nsrc/libtommath/Debug\nsrc/*.so\nffmpeg-*\nData/SpeedMods.txt\ncrashinfo.txt\nUtils/temp*\nProgram/StepMania*.lib\n\n# Unknown File Types\n*.dia\n.deps\n*.rej\ntests/*.err\n*.ncb\n*.tlog\n*.lastbuildstate\n*.unsuccessfulbuild\n*.ipch\n*.dep\n*.idb\n*.user\n*.mode1v3\n*.vdi\n*.lnk\nBuildLog.htm\n*.pch\n*.swp\n*.pc\n*.d\n.vscode/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.05078125,
          "content": "language:\n  - cpp\n  - c\nnotifications:\n  email: false\n  irc: \"chat.freenode.net#stepmania\"\n\nos:\n  - linux\n  - osx\n\nenv:\n  - BUILD_TYPE=Release\n\ncompiler:\n  - gcc\n  - clang\n\naddons:\n  apt:\n    packages:\n      - libasound2-dev\n      - libglew-dev\n      - libmad0-dev\n      - libpulse-dev\n      - libva-dev\n      - libvorbis-dev\n      - libxinerama-dev\n      - libxrandr-dev\n      - libxtst-dev\n      - yasm\n\nmatrix:\n  exclude:\n    - os: osx\n      compiler: gcc\n\nbefore_install:\n  - if [ \"$TRAVIS_OS_NAME\" = \"osx\" ]; then brew update; fi\n\ninstall:\n  - if [ \"$TRAVIS_OS_NAME\" = \"osx\" ]; then brew upgrade cmake; fi\n  - if [ \"$TRAVIS_OS_NAME\" = \"osx\" ]; then brew install yasm; fi\n\nbefore_script:\n  - cd Build\n  - if [ \"$TRAVIS_OS_NAME\" = \"linux\" ]; then export CMAKE_MAKE_PROGRAM=\"Unix Makefiles\"; fi\n  - if [ \"$TRAVIS_OS_NAME\" = \"osx\" ]; then export CMAKE_MAKE_PROGRAM=Xcode; fi\n  - cmake .. -G\"${CMAKE_MAKE_PROGRAM}\"\n    -DCMAKE_BUILD_TYPE=${BUILD_TYPE}\n    -DCMAKE_C_COMPILER=${CC} -DCMAKE_CXX_COMPILER=${CXX}\n    -DWITH_FFMPEG_JOBS=2\n\nscript:\n  - cmake --build . --parallel 2\n"
        },
        {
          "name": "Announcers",
          "type": "tree",
          "content": null
        },
        {
          "name": "BGAnimations",
          "type": "tree",
          "content": null
        },
        {
          "name": "BackgroundEffects",
          "type": "tree",
          "content": null
        },
        {
          "name": "BackgroundTransitions",
          "type": "tree",
          "content": null
        },
        {
          "name": "Build",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMake",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 0.2392578125,
          "content": "cmake_minimum_required(VERSION 2.8.12)\n\nproject(StepMania)\n\ninclude(StepmaniaCore.cmake)\n\n# The external libraries need to be included.\nadd_subdirectory(extern)\n\n# The internal libraries and eventual executable to be used.\nadd_subdirectory(src)\n"
        },
        {
          "name": "Characters",
          "type": "tree",
          "content": null
        },
        {
          "name": "Courses",
          "type": "tree",
          "content": null
        },
        {
          "name": "Data",
          "type": "tree",
          "content": null
        },
        {
          "name": "Docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "Installer",
          "type": "tree",
          "content": null
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 1.177734375,
          "content": "## Need 1.7 for subdir support.  (Well, 1.4 doesn't work, I don't know if anything between does.)\nAUTOMAKE_OPTIONS = 1.7 foreign\nSUBDIRS = bundle src\nACLOCAL_AMFLAGS = -I autoconf/m4\n\ninstallFiles = src/stepmania\nif HAVE_GTK\ninstallFiles += src/GtkModule.so\nendif\n\ninstallData = $(srcdir)/Announcers $(srcdir)/BGAnimations $(srcdir)/Themes $(srcdir)/Characters $(srcdir)/Scripts $(srcdir)/Courses $(srcdir)/BackgroundEffects $(srcdir)/Data $(srcdir)/BackgroundTransitions $(srcdir)/Docs $(srcdir)/NoteSkins\n\n.PHONY: SMData\nSMData:\n\t$(srcdir)/Utils/CreatePackage.pl $(srcdir) .\n\ndist-hook: SMData\n\tmkdir -p \"$(distdir)/Packages\"\n\tmv GameData.smzip \"$(distdir)/Packages\"\n\tcp -r \"$(srcdir)/Docs\" \"$(distdir)\"\n\tcp -r -t \"$(distdir)\" $(installFiles)\n\ninstall-exec-hook:\n\tmkdir -p \"$(DESTDIR)$(prefix)/stepmania-$(VERSION)\"\n\t$(INSTALL) $(installFiles) \"$(DESTDIR)$(prefix)/stepmania-$(VERSION)\"\n\ninstall-data-local:\n\tmkdir -p \"$(DESTDIR)$(prefix)/stepmania-$(VERSION)/Songs\"\n\tcp -r -t \"$(DESTDIR)$(prefix)/stepmania-$(VERSION)\" $(installData)\n\nuninstall-hook:\n\trm -f \"$(DESTDIR)$(prefix)/stepmania-$(VERSION)/stepmania\"\n\trm -f \"$(DESTDIR)$(prefix)/stepmania-$(VERSION)/GtkModule.so\"\n# todo: properly remove data\n"
        },
        {
          "name": "Manual",
          "type": "tree",
          "content": null
        },
        {
          "name": "NoteSkins",
          "type": "tree",
          "content": null
        },
        {
          "name": "Program",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.5107421875,
          "content": "StepMania\n=========\n\nStepMania is an advanced cross-platform rhythm game for home and arcade use.\n\n[![Continuous integration](https://github.com/stepmania/stepmania/workflows/Continuous%20integration/badge.svg?branch=5_1-new)](https://github.com/stepmania/stepmania/actions?query=workflow%3A%22Continuous+integration%22+branch%3A5_1-new)\n[![Build Status](https://travis-ci.org/stepmania/stepmania.svg?branch=master)](https://travis-ci.org/stepmania/stepmania)\n[![Build status](https://ci.appveyor.com/api/projects/status/uvoplsnyoats81r2?svg=true)](https://ci.appveyor.com/project/Nickito12/stepmania)\n\n## Installation\n### From Packages\n\nFor those that do not wish to compile the game on their own and use a binary right away, be aware of the following issues:\n\n* Windows users are expected to have installed the [Microsoft Visual C++ x86 Redistributable for Visual Studio 2015](http://www.microsoft.com/en-us/download/details.aspx?id=48145) prior to running the game. For those on a 64-bit operating system, grab the x64 redistributable as well. Windows 7 is the minimum supported version.\n* Mac OS X users need to have Mac OS X 10.6.8 or higher to run StepMania.\n* Linux users should receive all they need from the package manager of their choice.\n\n### From Source\n\nStepMania can be compiled using [CMake](http://www.cmake.org/). More information about using CMake can be found in both the `Build` directory and CMake's documentation.\n\n## Resources\n\n* Website: https://www.stepmania.com/\n* IRC: irc.freenode.net/#stepmania-devs\n* Lua for SM5: https://quietly-turning.github.io/Lua-For-SM5/\n* Lua API Documentation can be found in the Docs folder.\n\n## Licensing Terms\n\nIn short- you can do anything you like with the game (including sell products made with it), provided you *do not*:\n\n1. Sell the game *with the included songs*\n2. Claim to have created the engine yourself or remove the credits\n3. Not provide source code for any build which differs from any official release which includes MP3 support.\n\n(It's not required, but we would also appreciate it if you link back to http://www.stepmania.com/)\n\nFor specific information/legalese:\n\n* All of our source code is under the [MIT license](http://opensource.org/licenses/MIT).\n* Any songs that are included within this repository are under the [<abbr title=\"Creative Commons Non-Commercial\">CC-NC</abbr> license](https://creativecommons.org/).\n* The [MAD library](http://www.underbit.com/products/mad/) and [FFmpeg codecs](https://www.ffmpeg.org/) when built with our code use the [GPL license](http://www.gnu.org).\n"
        },
        {
          "name": "Scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "Songs",
          "type": "tree",
          "content": null
        },
        {
          "name": "StepmaniaCore.cmake",
          "type": "blob",
          "size": 15.2490234375,
          "content": "# Include the macros and functions.\r\n\r\ninclude(${CMAKE_CURRENT_LIST_DIR}/CMake/CMakeMacros.cmake)\r\n\r\n# Make Xcode's 'Archive' build work\r\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${PROJECT_BINARY_DIR}/extern\")\r\n\r\n# Set up helper variables for future configuring.\r\nset(SM_CMAKE_DIR \"${CMAKE_CURRENT_LIST_DIR}/CMake\")\r\nset(SM_EXTERN_DIR \"${CMAKE_CURRENT_LIST_DIR}/extern\")\r\nset(SM_INSTALLER_DIR \"${CMAKE_CURRENT_LIST_DIR}/Installer\")\r\nset(SM_XCODE_DIR \"${CMAKE_CURRENT_LIST_DIR}/Xcode\")\r\nset(SM_PROGRAM_DIR \"${CMAKE_CURRENT_LIST_DIR}/Program\")\r\nset(SM_BUILD_DIR \"${CMAKE_CURRENT_LIST_DIR}/Build\")\r\nset(SM_SRC_DIR \"${CMAKE_CURRENT_LIST_DIR}/src\")\r\nset(SM_DOC_DIR \"${CMAKE_CURRENT_LIST_DIR}/Docs\")\r\nset(SM_ROOT_DIR \"${CMAKE_CURRENT_LIST_DIR}\")\r\n\r\n# TODO: Reconsile the OS dependent naming scheme.\r\nset(SM_EXE_NAME \"StepMania\")\r\n\r\n# Some OS specific helpers.\r\nif(CMAKE_SYSTEM_NAME MATCHES \"Linux\")\r\n  set(LINUX TRUE)\r\n  set(SM_CPP_STANDARD \"gnu++11\")\r\nelse()\r\n  set(LINUX FALSE)\r\nendif()\r\n\r\nif(CMAKE_SYSTEM_NAME MATCHES \"Darwin\")\r\n  set(MACOSX TRUE)\r\n  set(SM_CPP_STANDARD \"gnu++14\")\r\nelse()\r\n  set(MACOSX FALSE)\r\nendif()\r\n\r\nif(CMAKE_SYSTEM_NAME MATCHES \"BSD\")\r\n  set(BSD TRUE)\r\n  set(SM_CPP_STANDARD \"gnu++11\")\r\nelse()\r\n  set(BSD FALSE)\r\nendif()\r\n\r\n# Allow for finding our libraries in a standard location.\r\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR}\"\r\n            \"${SM_CMAKE_DIR}/Modules/\")\r\n\r\ninclude(\"${SM_CMAKE_DIR}/DefineOptions.cmake\")\r\n\r\ninclude(\"${SM_CMAKE_DIR}/SMDefs.cmake\")\r\n\r\n# Put the predefined targets in separate groups.\r\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\r\n\r\n# Set up the linker flags for MSVC builds.\r\nconfigure_msvc_runtime()\r\n\r\n# Checks the standard include directories for c-style headers. We may use C++ in\r\n# this project, but the check works better with plain C headers.\r\ninclude(CheckIncludeFiles)\r\ncheck_include_files(alloca.h HAVE_ALLOCA_H)\r\ncheck_include_files(assert.h HAVE_ASSERT_H)\r\ncheck_include_files(dlfcn.h HAVE_DLFCN_H)\r\ncheck_include_files(dirent.h HAVE_DIRENT_H)\r\ncheck_include_files(errno.h HAVE_ERRNO_H)\r\ncheck_include_files(fcntl.h HAVE_FCNTL_H)\r\ncheck_include_files(float.h HAVE_FLOAT_H)\r\ncheck_include_files(inttypes.h HAVE_INTTYPES_H)\r\ncheck_include_files(limits.h HAVE_LIMITS_H)\r\ncheck_include_files(math.h HAVE_MATH_H)\r\ncheck_include_files(memory.h HAVE_MEMORY_H)\r\ncheck_include_files(stdarg.h HAVE_STDARG_H)\r\ncheck_include_files(stddef.h HAVE_STDDEF_H)\r\ncheck_include_files(stdint.h HAVE_STDINT_H)\r\ncheck_include_files(stdlib.h HAVE_STDLIB_H)\r\ncheck_include_files(strings.h HAVE_STRINGS_H)\r\ncheck_include_files(string.h HAVE_STRING_H)\r\ncheck_include_files(unistd.h HAVE_UNISTD_H)\r\ncheck_include_files(sys/param.h HAVE_SYS_PARAM_H)\r\ncheck_include_files(sys/stat.h HAVE_SYS_STAT_H)\r\ncheck_include_files(sys/types.h HAVE_SYS_TYPES_H)\r\ncheck_include_files(sys/utsname.h HAVE_SYS_UTSNAME_H)\r\ncheck_include_files(sys/wait.h HAVE_SYS_WAIT_H)\r\n\r\ncheck_include_files(endian.h HAVE_ENDIAN_H)\r\ncheck_include_files(sys/endian.h HAVE_SYS_ENDIAN_H)\r\ncheck_include_files(machine/endian.h HAVE_MACHINE_ENDIAN_H)\r\n\r\nif(HAVE_STDLIB_H AND HAVE_STDARG_H AND HAVE_STRING_H AND HAVE_FLOAT_H)\r\n  set(STDC_HEADERS 1)\r\nendif()\r\n\r\ninclude(CheckFunctionExists)\r\ninclude(CheckSymbolExists)\r\ninclude(CheckCXXSymbolExists)\r\n\r\n# Mostly Windows functions.\r\ncheck_function_exists(_mkdir HAVE__MKDIR)\r\ncheck_cxx_symbol_exists(_snprintf cstdio HAVE__SNPRINTF)\r\ncheck_cxx_symbol_exists(stricmp cstring HAVE_STRICMP)\r\ncheck_cxx_symbol_exists(_stricmp cstring HAVE__STRICMP)\r\n\r\n# Mostly non-Windows functions.\r\ncheck_function_exists(fcntl HAVE_FCNTL)\r\ncheck_function_exists(fork HAVE_FORK)\r\ncheck_function_exists(mkdir HAVE_MKDIR)\r\ncheck_cxx_symbol_exists(snprintf cstdio HAVE_SNPRINTF)\r\ncheck_cxx_symbol_exists(strcasecmp cstring HAVE_STRCASECMP)\r\ncheck_function_exists(waitpid HAVE_WAITPID)\r\n\r\n# Mostly universal symbols.\r\ncheck_cxx_symbol_exists(powf cmath HAVE_POWF)\r\ncheck_cxx_symbol_exists(sqrtf cmath HAVE_SQRTF)\r\ncheck_cxx_symbol_exists(sinf cmath HAVE_SINF)\r\ncheck_cxx_symbol_exists(tanf cmath HAVE_TANF)\r\ncheck_cxx_symbol_exists(cosf cmath HAVE_COSF)\r\ncheck_cxx_symbol_exists(acosf cmath HAVE_ACOSF)\r\ncheck_cxx_symbol_exists(truncf cmath HAVE_TRUNCF)\r\ncheck_cxx_symbol_exists(roundf cmath HAVE_ROUNDF)\r\ncheck_cxx_symbol_exists(lrintf cmath HAVE_LRINTF)\r\ncheck_cxx_symbol_exists(strtof cstdlib HAVE_STRTOF)\r\ncheck_symbol_exists(M_PI math.h HAVE_M_PI)\r\ncheck_symbol_exists(size_t stddef.h HAVE_SIZE_T_STDDEF)\r\ncheck_symbol_exists(size_t stdlib.h HAVE_SIZE_T_STDLIB)\r\ncheck_symbol_exists(size_t stdio.h HAVE_SIZE_T_STDIO)\r\ncheck_symbol_exists(posix_fadvise fcntl.h HAVE_POSIX_FADVISE)\r\n\r\nif(MINGW)\r\n  set(NEED_WINDOWS_LOADING_WINDOW TRUE)\r\n  check_symbol_exists(PBS_MARQUEE commctrl.h HAVE_PBS_MARQUEE)\r\n  check_symbol_exists(PBM_SETMARQUEE commctrl.h HAVE_PBM_SETMARQUEE)\r\nendif()\r\n\r\n# Checks to make it easier to work with 32-bit/64-bit builds if required.\r\ninclude(CheckTypeSize)\r\ncheck_type_size(int16_t SIZEOF_INT16_T)\r\ncheck_type_size(uint16_t SIZEOF_UINT16_T)\r\ncheck_type_size(u_int16_t SIZEOF_U_INT16_T)\r\ncheck_type_size(int32_t SIZEOF_INT32_T)\r\ncheck_type_size(uint32_t SIZEOF_UINT32_T)\r\ncheck_type_size(u_int32_t SIZEOF_U_INT32_T)\r\ncheck_type_size(int64_t SIZEOF_INT64_T)\r\ncheck_type_size(char SIZEOF_CHAR)\r\ncheck_type_size(\"unsigned char\" SIZEOF_UNSIGNED_CHAR)\r\ncheck_type_size(short SIZEOF_SHORT)\r\ncheck_type_size(\"unsigned short\" SIZEOF_UNSIGNED_SHORT)\r\ncheck_type_size(int SIZEOF_INT)\r\ncheck_type_size(\"unsigned int\" SIZEOF_UNSIGNED_INT)\r\ncheck_type_size(long SIZEOF_LONG)\r\ncheck_type_size(\"unsigned long\" SIZEOF_UNSIGNED_LONG)\r\ncheck_type_size(\"long long\" SIZEOF_LONG_LONG)\r\ncheck_type_size(float SIZEOF_FLOAT)\r\ncheck_type_size(double SIZEOF_DOUBLE)\r\ncheck_type_size(intptr_t SIZEOF_INTPTR_T)\r\ncheck_type_size(pid_t SIZEOF_PID_T)\r\ncheck_type_size(size_t SIZEOF_SIZE_T)\r\ncheck_type_size(ssize_t SIZEOF_SSIZE_T)\r\n\r\nif(WIN32)\n  if(SIZEOF_INTPTR_T EQUAL 8)\r\n    set(SM_WIN32_ARCH \"x64\")\r\n  else()\r\n    set(SM_WIN32_ARCH \"x86\")\n  endif()\r\nendif()\r\n\r\ninclude(TestBigEndian)\r\ntest_big_endian(BIGENDIAN)\r\nif(${BIGENDIAN})\r\n  set(ENDIAN_BIG 1)\r\nelse()\r\n  set(ENDIAN_LITTLE 1)\r\nendif()\r\n\r\ncheck_compile_features(\"${SM_CMAKE_DIR}/TestCode\"\r\n                       \"${SM_CMAKE_DIR}/TestCode/test_prototype.c\"\r\n                       \"Checking for function prototype capabilities\"\r\n                       \"found\"\r\n                       \"not found\"\r\n                       SM_IGNORED_PROTOTYPE_CALL\r\n                       FALSE)\r\n\r\nif(NOT SM_IGNORED_PROTOTYPE_CALL)\r\n  set(HAVE_PROTOTYPES TRUE)\r\nendif()\r\n\r\ncheck_compile_features(\"${SM_CMAKE_DIR}/TestCode\"\r\n                       \"${SM_CMAKE_DIR}/TestCode/test_external.c\"\r\n                       \"Checking for external name shortening requirements\"\r\n                       \"not needed\"\r\n                       \"needed\"\r\n                       SM_BUILT_LONG_NAME\r\n                       TRUE)\r\n\r\nif(NOT SM_BUILT_LONG_NAME)\r\n  set(NEED_SHORT_EXTERNAL_NAMES 1)\r\nendif()\r\n\r\ncheck_compile_features(\"${SM_CMAKE_DIR}/TestCode\"\r\n                       \"${SM_CMAKE_DIR}/TestCode/test_broken.c\"\r\n                       \"Checking if incomplete types are broken.\"\r\n                       \"not broken\"\r\n                       \"broken\"\r\n                       SM_BUILT_INCOMPLETE_TYPE\r\n                       FALSE)\r\n\r\nif(SM_BUILT_INCOMPLETE_TYPE)\r\n  set(INCOMPLETE_TYPES_BROKEN 1)\r\nendif()\r\n\r\n# Dependencies go here.\r\ninclude(ExternalProject)\r\n\r\nif(NOT WITH_GPL_LIBS)\r\n  message(\"Disabling GPL exclusive libraries: no MP3 support.\")\r\n  set(WITH_MP3 OFF)\r\nendif()\r\n\r\nif(WITH_WAV)\r\n  # TODO: Identify which headers to check for ensuring this will always work.\r\n  set(HAS_WAV TRUE)\r\nendif()\r\n\r\nif(WITH_MP3)\r\n  if(WIN32 OR MACOSX)\r\n    set(HAS_MP3 TRUE)\r\n  else()\r\n    find_package(Mad)\r\n    if(NOT LIBMAD_FOUND)\r\n      message(\r\n        FATAL_ERROR\r\n          \"Libmad library not found. If you wish to skip mp3 support, set WITH_MP3 to OFF when configuring.\"\r\n        )\r\n    else()\r\n      set(HAS_MP3 TRUE)\r\n    endif()\r\n  endif()\r\nendif(WITH_MP3)\r\n\r\nif(WITH_OGG)\r\n  if(WIN32 OR MACOSX)\r\n    set(HAS_OGG TRUE)\r\n  else()\r\n    find_package(Ogg)\r\n    find_package(Vorbis)\r\n    find_package(VorbisFile)\r\n\r\n    if(NOT (OGG_FOUND AND VORBIS_FOUND AND VORBISFILE_FOUND))\r\n      message(\r\n        FATAL_ERROR\r\n          \"Not all vorbis libraries were found. If you wish to skip vorbis support, set WITH_OGG to OFF when configuring.\"\r\n        )\r\n    else()\r\n      set(HAS_OGG TRUE)\r\n    endif()\r\n  endif()\r\nendif()\r\n\r\nif(WITH_SDL)\r\n  find_package(SDL2 REQUIRED)\r\n  set(HAS_SDL TRUE)\r\nendif()\r\n\r\nfind_package(nasm)\r\nfind_package(yasm)\r\n\r\nfind_package(BZip2)\r\nif(NOT ${BZIP2_FOUND} AND NOT MSVC)\r\n  message(FATAL_ERROR \"Bzip2 support required.\")\r\nendif()\r\n\r\nfind_package(Iconv)\r\n\r\nfind_package(Threads)\r\nif(${Threads_FOUND})\r\n  set(HAS_PTHREAD TRUE)\r\n  list(APPEND CMAKE_REQUIRED_LIBRARIES pthread)\r\n  check_symbol_exists(pthread_mutex_timedlock pthread.h\r\n                      HAVE_PTHREAD_MUTEX_TIMEDLOCK)\r\n  check_symbol_exists(pthread_cond_timedwait pthread.h\r\n                      HAVE_PTHREAD_COND_TIMEDWAIT)\r\nelse()\r\n  set(HAS_PTHREAD FALSE)\r\nendif()\r\n\r\nif(WIN32)\r\n  if(MINGW AND WITH_FFMPEG AND NOT WITH_SYSTEM_FFMPEG)\r\n    include(\"${SM_CMAKE_DIR}/SetupFfmpeg.cmake\")\r\n    set(HAS_FFMPEG TRUE)\r\n  else()\r\n    # FFMPEG...it can be evil.\r\n    find_library(LIB_SWSCALE\r\n                 NAMES \"swscale\"\r\n                 PATHS \"${SM_EXTERN_DIR}/ffmpeg/${SM_WIN32_ARCH}/lib\"\r\n                 NO_DEFAULT_PATH)\r\n    get_filename_component(LIB_SWSCALE ${LIB_SWSCALE} NAME)\r\n\r\n    find_library(LIB_AVCODEC\r\n                 NAMES \"avcodec\"\r\n                 PATHS \"${SM_EXTERN_DIR}/ffmpeg/${SM_WIN32_ARCH}/lib\"\r\n                 NO_DEFAULT_PATH)\r\n    get_filename_component(LIB_AVCODEC ${LIB_AVCODEC} NAME)\r\n\r\n    find_library(LIB_AVFORMAT\r\n                 NAMES \"avformat\"\r\n                 PATHS \"${SM_EXTERN_DIR}/ffmpeg/${SM_WIN32_ARCH}/lib\"\r\n                 NO_DEFAULT_PATH)\r\n    get_filename_component(LIB_AVFORMAT ${LIB_AVFORMAT} NAME)\r\n\r\n    find_library(LIB_AVUTIL\r\n                 NAMES \"avutil\"\r\n                 PATHS \"${SM_EXTERN_DIR}/ffmpeg/${SM_WIN32_ARCH}/lib\"\r\n                 NO_DEFAULT_PATH)\r\n    get_filename_component(LIB_AVUTIL ${LIB_AVUTIL} NAME)\r\n\r\n    list(APPEND SM_FFMPEG_WIN32_DLLS\r\n      \"avcodec-55.dll\"\r\n      \"avformat-55.dll\"\r\n      \"avutil-52.dll\"\r\n      \"swscale-2.dll\"\r\n    )\r\n    foreach(dll ${SM_FFMPEG_WIN32_DLLS})\r\n      file(REMOVE \"${SM_PROGRAM_DIR}/${dll}\")\r\n      file(COPY \"${SM_EXTERN_DIR}/ffmpeg/${SM_WIN32_ARCH}/bin/${dll}\" DESTINATION \"${SM_PROGRAM_DIR}/\")\r\n    endforeach()\r\n  endif()\r\nelseif(MACOSX)\r\n  if(WITH_FFMPEG AND NOT WITH_SYSTEM_FFMPEG)\r\n    include(\"${SM_CMAKE_DIR}/SetupFfmpeg.cmake\")\r\n    set(HAS_FFMPEG TRUE)\r\n  endif()\r\n\r\n  set(WITH_CRASH_HANDLER TRUE)\r\n  set(CMAKE_OSX_DEPLOYMENT_TARGET \"10.9\")\r\n  set(CMAKE_OSX_DEPLOYMENT_TARGET_FULL \"10.9.0\")\r\n\r\n  find_library(MAC_FRAME_ACCELERATE Accelerate ${CMAKE_SYSTEM_FRAMEWORK_PATH} REQUIRED)\r\n  find_library(MAC_FRAME_APPKIT AppKit ${CMAKE_SYSTEM_FRAMEWORK_PATH} REQUIRED)\r\n  find_library(MAC_FRAME_AUDIOTOOLBOX AudioToolbox\r\n               ${CMAKE_SYSTEM_FRAMEWORK_PATH} REQUIRED)\r\n  find_library(MAC_FRAME_AUDIOUNIT AudioUnit ${CMAKE_SYSTEM_FRAMEWORK_PATH} REQUIRED)\r\n  find_library(MAC_FRAME_CARBON Carbon ${CMAKE_SYSTEM_FRAMEWORK_PATH} REQUIRED)\r\n  find_library(MAC_FRAME_COCOA Cocoa ${CMAKE_SYSTEM_FRAMEWORK_PATH} REQUIRED)\r\n  find_library(MAC_FRAME_COREAUDIO CoreAudio ${CMAKE_SYSTEM_FRAMEWORK_PATH} REQUIRED)\r\n  find_library(MAC_FRAME_COREFOUNDATION CoreFoundation\r\n               ${CMAKE_SYSTEM_FRAMEWORK_PATH} REQUIRED)\r\n  find_library(MAC_FRAME_CORESERVICES CoreServices\r\n               ${CMAKE_SYSTEM_FRAMEWORK_PATH} REQUIRED)\r\n  find_library(MAC_FRAME_FOUNDATION Foundation ${CMAKE_SYSTEM_FRAMEWORK_PATH} REQUIRED)\r\n  find_library(MAC_FRAME_IOKIT IOKit ${CMAKE_SYSTEM_FRAMEWORK_PATH} REQUIRED)\r\n  find_library(MAC_FRAME_OPENGL OpenGL ${CMAKE_SYSTEM_FRAMEWORK_PATH} REQUIRED)\r\n  find_library(MAC_FRAME_SYSTEM System ${CMAKE_SYSTEM_FRAMEWORK_PATH} REQUIRED)\r\n\r\n  mark_as_advanced(MAC_FRAME_ACCELERATE\r\n                   MAC_FRAME_APPKIT\r\n                   MAC_FRAME_AUDIOTOOLBOX\r\n                   MAC_FRAME_AUDIOUNIT\r\n                   MAC_FRAME_CARBON\r\n                   MAC_FRAME_COCOA\r\n                   MAC_FRAME_COREAUDIO\r\n                   MAC_FRAME_COREFOUNDATION\r\n                   MAC_FRAME_CORESERVICES\r\n                   MAC_FRAME_FOUNDATION\r\n                   MAC_FRAME_IOKIT\r\n                   MAC_FRAME_OPENGL\r\n                   MAC_FRAME_SYSTEM)\r\nelseif(LINUX)\r\n  if(WITH_GTK3)\r\n    find_package(\"GTK3\" 2.0)\r\n    if(${GTK3_FOUND})\r\n      set(HAS_GTK3 TRUE)\r\n    else()\r\n      set(HAS_GTK3 FALSE)\r\n      message(\r\n        \"GTK3 was not found on your system. There will be no loading window.\")\r\n    endif()\r\n  else()\r\n    set(HAS_GTK3 FALSE)\r\n  endif()\r\n\r\n  set(HAS_X11 FALSE)\r\n  if(WITH_X11)\r\n    find_package(X11 REQUIRED)\r\n    set(HAS_X11 TRUE)\r\n  endif()\r\n\r\n  find_package(\"ZLIB\" REQUIRED)\r\n  find_package(\"JPEG\" REQUIRED)\r\n\r\n  find_package(Dl)\r\n\r\n  set(HAS_XRANDR FALSE)\r\n  if(WITH_XRANDR)\r\n    find_package(Xrandr REQUIRED)\r\n    set(HAS_XRANDR TRUE)\r\n  endif()\r\n\r\n  set(HAS_LIBXTST FALSE)\r\n  if(WITH_LIBXTST)\r\n    find_package(Xtst REQUIRED)\r\n    set(HAS_LIBXTST TRUE)\r\n  endif()\r\n\r\n  set(HAS_XINERAMA FALSE)\r\n  if(WITH_XINERAMA)\r\n    find_package(Xinerama REQUIRED)\r\n    set(HAS_XINERAMA TRUE)\r\n  endif()\r\n\r\n  set(HAS_PULSE FALSE)\r\n  if(WITH_PULSEAUDIO)\r\n    find_package(PulseAudio REQUIRED)\r\n    set(HAS_PULSE TRUE)\r\n  endif()\r\n\r\n  set(HAS_ALSA FALSE)\r\n  if(WITH_ALSA)\r\n    find_package(ALSA REQUIRED)\r\n    set(HAS_ALSA TRUE)\r\n  endif()\r\n\r\n  set(HAS_JACK FALSE)\r\n  if(WITH_JACK)\r\n    find_package(JACK REQUIRED)\r\n    set(HAS_JACK TRUE)\r\n  endif()\r\n\r\n  set(HAS_OSS FALSE)\r\n  if(WITH_OSS)\r\n    find_package(OSS)\r\n    set(HAS_OSS TRUE)\r\n  endif()\r\n\r\n  if( NOT (HAS_OSS OR HAS_JACK OR HAS_ALSA OR HAS_PULSE) )\r\n    message(\r\n      FATAL_ERROR\r\n        \"No sound libraries found (or selected). You will require at least one.\"\r\n      )\r\n  else()\r\n    message(\r\n      STATUS\r\n        \"-- At least one sound library was found. Do not worry if any were not found at this stage.\"\r\n      )\r\n  endif()\r\n\r\n  if(WITH_FFMPEG AND NOT YASM_FOUND AND NOT NASM_FOUND)\r\n    message(\r\n      \"Neither NASM nor YASM were found. Please install at least one of them if you wish for ffmpeg support.\"\r\n      )\r\n    set(WITH_FFMPEG OFF)\r\n  endif()\r\n\r\n  find_package(\"Va\")\r\n\r\n  if(WITH_FFMPEG)\r\n    if(WITH_SYSTEM_FFMPEG)\r\n      find_package(\"FFMPEG\")\r\n      if(NOT FFMPEG_FOUND)\r\n        message(\r\n          FATAL_ERROR\r\n            \"System ffmpeg not found! Either install the libraries or remove the argument, then try again.\"\r\n          )\r\n      else()\r\n\r\n        message(\r\n          STATUS\r\n            \"-- Warning! Your version of ffmpeg may be too high! If you want to use the system ffmpeg, clear your cmake cache and do not include the system ffmpeg argument.\"\r\n          )\r\n        set(HAS_FFMPEG TRUE)\r\n      endif()\r\n    else()\r\n      include(\"${SM_CMAKE_DIR}/SetupFfmpeg.cmake\")\r\n      set(HAS_FFMPEG TRUE)\r\n    endif()\r\n  else()\r\n    set(HAS_FFMPEG FALSE)\r\n  endif()\r\n\r\n  set(OpenGL_GL_PREFERENCE GLVND)\r\n  find_package(OpenGL REQUIRED)\r\n  find_package(GLEW REQUIRED)\r\nendif(WIN32) # LINUX, APPLE\r\n\r\nconfigure_file(\"${SM_SRC_DIR}/config.in.hpp\"\r\n               \"${SM_SRC_DIR}/generated/config.hpp\")\r\nconfigure_file(\"${SM_SRC_DIR}/verstub.in.cpp\"\r\n               \"${SM_SRC_DIR}/generated/verstub.cpp\")\r\n\r\n# Define installer based items for cpack.\r\ninclude(\"${CMAKE_CURRENT_LIST_DIR}/CMake/CPackSetup.cmake\")\r\n"
        },
        {
          "name": "Themes",
          "type": "tree",
          "content": null
        },
        {
          "name": "Utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "Xcode",
          "type": "tree",
          "content": null
        },
        {
          "name": "_assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "autoconf",
          "type": "tree",
          "content": null
        },
        {
          "name": "autogen.sh",
          "type": "blob",
          "size": 2.587890625,
          "content": "#!/bin/sh\n# Run this to generate configure, the initial makefiles, etc.\n#\n# Source (non-SVN) distributions should come with a \"configure\" script\n# already generated--people simply compiling the program shouldn't\n# need autoconf and friends installed.\n#\n# SVN only contains the source files: Makefile.am, configure.ac, and\n# so on.\n\n\nsrcdir=`dirname $0`\ntest -z \"$srcdir\" && srcdir=.\n\nPKG_NAME=\"stepmania\"\n\nAUTOHEADER=autoheader\nACLOCAL_OPTIONS=\"-I autoconf/m4/\"\nAUTOMAKE_OPTIONS=-a\n\nAUTOCONF=autoconf\n\n(test -f $srcdir/configure.ac \\\n  && test -d $srcdir/src) || {\n    echo -n \"**Error**: Directory \\\"$srcdir\\\" does not look like the\"\n    echo \" top-level $PKG_NAME directory\"\n\n    exit 1\n}\n\nDIE=0\n\n($AUTOCONF --version) > /dev/null 2>&1 || {\n  echo\n  echo \"**Error**: You must have \\`autoconf' installed to compile $PKG_NAME.\"\n  echo \"Download the appropriate package for your distribution,\"\n  echo \"or get the source tarball at ftp://ftp.gnu.org/pub/gnu/autoconf/\"\n  DIE=1\n}\n\n# Try automake-1.7 and up.\nif automake-1.11 --version > /dev/null 2>&1; then\n\tACLOCAL=aclocal-1.11\n\tAUTOMAKE=automake-1.11\nelif automake-1.10 --version > /dev/null 2>&1; then\n\tACLOCAL=aclocal-1.10\n\tAUTOMAKE=automake-1.10\nelif automake-1.9 --version > /dev/null 2>&1; then\n\tACLOCAL=aclocal-1.9\n\tAUTOMAKE=automake-1.9\nelif automake-1.8 --version > /dev/null 2>&1; then\n\tACLOCAL=aclocal-1.8\n\tAUTOMAKE=automake-1.8\nelif automake-1.7 --version > /dev/null 2>&1; then\n\tACLOCAL=aclocal-1.7\n\tAUTOMAKE=automake-1.7\nfi\n\n# If none of those were found, check if \"automake\" exists, and check the version.\nif test -z \"$AUTOMAKE\" && automake --version > /dev/null 2>&1; then\n\tversion=`automake --version 2>/dev/null|head -1|sed -e 's/.* \\([0-9]\\+\\.[0-9]\\+\\).*$/\\1/'`\n\n\tIFS=.\n\tset $version\n\tif test -z \"$version\"; then\n\t\techo \"\\`automake' appears to be installed, but the version string could not\"\n\t\techo \"be parsed.  Proceeding anyway ...\"\n\telif test $1 -lt 1 -o $2 -lt 7; then\n\t\techo \"\\`automake' appears to be installed, but is not recent enough.  Automake\"\n\t\techo \"1.7 or newer is required.\"\n\t\texit 1\n\tfi\n\tunset IFS\n\tACLOCAL=aclocal\n\tAUTOMAKE=automake\nfi\n\nif test -z \"$AUTOMAKE\"; then\n  echo\n  echo \"**Error**: You must have \\`automake' installed to compile $PKG_NAME.\"\n  DIE=1\n  NO_AUTOMAKE=yes\nfi\n\n\n# if no automake, don't bother testing for aclocal\ntest -n \"$NO_AUTOMAKE\" || ($ACLOCAL --version) < /dev/null > /dev/null 2>&1 || {\n  echo\n  echo \"**Error**: Missing \\`aclocal'.  The version of \\`automake'\"\n  echo \"installed doesn't appear recent enough.\"\n  DIE=1\n}\n\nif test \"$DIE\" -eq 1; then\n  exit 1\nfi\n\n$ACLOCAL $ACLOCAL_OPTIONS\n$AUTOCONF\n$AUTOHEADER\n$AUTOMAKE $AUTOMAKE_OPTIONS\n"
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 14.3486328125,
          "content": "AC_PREREQ(2.59)\nAC_INIT(StepMania, 5.0, [https://github.com/stepmania/stepmania], StepMania, [http://stepmania.com])\nAC_CONFIG_SRCDIR([src/StepMania.cpp])\nAC_CONFIG_AUX_DIR(autoconf)\nAC_CANONICAL_TARGET\nAC_PREFIX_DEFAULT(/opt)\n\nAM_INIT_AUTOMAKE([no-define])\nAC_CONFIG_HEADERS([src/config.h])\nAM_MAINTAINER_MODE\n\n# We don't want PROG_CC/CXX default settings, but don't ignore explicit settings.\ntest -z \"$CFLAGS\"    && DEFAULT_CFLAGS=yes\ntest -z \"$CXXFLAGS\"  && DEFAULT_CXXFLAGS=yes\ntest -z \"$LDFLAGS\"   && DEFAULT_LDFLAGS=yes\n\nAC_PROG_CC\nAC_PROG_CXX\nAC_PROG_RANLIB\nAM_PROG_CC_C_O\n\ntest \"$DEFAULT_CFLAGS\" = \"yes\" && CFLAGS=\"-Wall -W -Wno-unused-parameter -Wno-switch\"\ntest \"$DEFAULT_CXXFLAGS\" = \"yes\" && CXXFLAGS=\"-Wall -W -Wno-unused-parameter -Wno-switch\"\ntest \"$DEFAULT_LDFLAGS\" = \"yes\" && LDFLAGS=\"\"\n\n# If on Windows, grab the prebuilts\nif test \"$host_os\" = \"mingw32\"; then\n\tCPPFLAGS=\"$CPPFLAGS -I$PWD/extern/for_mingw/include\"\n\tLDFLAGS=\"$LDFLAGS -L$PWD/extern/for_mingw/lib\"\n\t# HACK: The prebuilts are 32bit only. Force the issue.\n\tCFLAGS=\"$CFLAGS -m32\"\n\tCXXFLAGS=\"$CXXFLAGS -m32\"\n\tRESFLAGS=\"$RESFLAGS --target=pe-i386 -I$PWD/src/archutils/Win32/mingw\"\nfi\n\nAM_CONDITIONAL(WITH_TTY, test \"$with_tty\" = \"yes\")\nAC_ARG_WITH(linux-tty, AS_HELP_STRING([--with-linux-tty], [Enable Linux TTY input]), with_tty=yes, with_tty=no)\n\ncompile=release\nAC_ARG_WITH(debug, AS_HELP_STRING([--with-debug],[Enable debug mode]), with_debug=$withval, with_debug=no)\nAC_ARG_WITH(fast-compile, AS_HELP_STRING([--with-fast-compile],[Enable fast compile]), with_fast_compile=$withval, with_fast_compile=no)\nif test \"$with_debug\" = \"yes\"; then\n\tcompile=debug\nfi\nif test \"$with_fast_compile\" = \"yes\"; then\n\tcompile=fast\nfi\n\ncase $compile in\n\trelease)\n\ttest \"$DEFAULT_CFLAGS\" = \"yes\" && CFLAGS=\"$CFLAGS -O3\"\n\ttest \"$DEFAULT_CXXFLAGS\" = \"yes\" && CXXFLAGS=\"$CXXFLAGS -O3\"\n\t;;\n\tdebug)\n\ttest \"$DEFAULT_CFLAGS\" = \"yes\" && CFLAGS=\"$CFLAGS -g\"\n\ttest \"$DEFAULT_CXXFLAGS\" = \"yes\" && CXXFLAGS=\"$CXXFLAGS -g\"\n\t;;\n\tfast)\n\ttest \"$DEFAULT_CFLAGS\" = \"yes\" && CFLAGS=\"$CFLAGS -O2 -fno-inline\"\n\ttest \"$DEFAULT_CXXFLAGS\" = \"yes\" && CXXFLAGS=\"$CXXFLAGS -O2 -fno-inline\"\n\t;;\nesac\n\nAC_ARG_ENABLE(lto, AS_HELP_STRING([--enable-lto], [Enable LTO]), enable_lto=$enableval, enable_lto=no)\nif test x$enable_lto = xyes; then\n\tif test \"$CXX\" != \"g++\"; then\n\t\tAC_MSG_ERROR([g++ compiler is needed to use lto (if you have it installed, pass CXX=g++ to ./configure)])\n\tfi\n\tgxx_version=\"`g++ -dumpversion`\"\n\tgxx_version_major=$(echo $gxx_version | cut -d'.' -f1)\n\tgxx_version_minor=$(echo $gxx_version | cut -d'.' -f2)\n\tif test [ \"$gxx_version_major\" -lt \"4\" ] || test [ \"$gxx_version_minor\" -lt \"5\" ]; then\n\t\tAC_MSG_ERROR([Your g++ version is too old and doesn't support lto])\n\tfi\n\tCFLAGS=\"$CFLAGS -O0 -flto\"\n\tCXXFLAGS=\"$CXXFLAGS -O0 -flto\"\n\tLDFLAGS=\"$LDFLAGS -flto\"\n\tcase $compile in\n\t\trelease)\n\t\tLDFLAGS=\"$LDFLAGS -O3\"\n\t\t;;\n\t\tdebug)\n\t\tLDFLAGS=\"$LDFLAGS -g\"\n\t\t;;\n\t\tfast)\n\t\tLDFLAGS=\"$LDFLAGS -O2 -fno-inline\"\n\t\t;;\n\tesac\n\tif test [ \"$gxx_version_minor\" -ge \"8\" ]; then\n\t\tCFLAGS=\"$CFLAGS -fno-fat-lto-objects\"\n\t\tCXXFLAGS=\"$CXXFLAGS -fno-fat-lto-objects\"\n\tfi\nfi\n\ndnl Do this early as it has its own whole configure script to run with its own errors.\nSM_VIDEO\n\n# Some (broken?) versions of gcc treat char as unsigned, check for that.\nAC_LANG_PUSH([C])\nAC_MSG_CHECKING([for gcc option to use signed chars])\nAC_RUN_IFELSE([AC_LANG_SOURCE([[int main(){return (char)-1==-1?0:1;}]])],\n\t   [sc_option=],[sc_option=-fsigned-char])\nAC_MSG_RESULT([${sc_option-none}])\nCFLAGS=\"$CFLAGS $sc_option\"\nCXXFLAGS=\"$CXXFLAGS $sc_option\"\nAC_LANG_POP([C])\n\nAC_CHECK_HEADERS([sys/param.h])\n\nif test x$with_debug = xyes; then\n\tAC_DEFINE([DEBUG], 1, [Special debugging logic])\n\tAC_LANG_PUSH([C++])\n\tAC_CHECK_HEADER([debug/debug.h],[\n\t\tAC_DEFINE([_GLIBCXX_DEBUG],1,[STL debug])\n\t\tAC_DEFINE([_GLIBCXX_DEBUG_PEDANTIC],1,[STL pedantic debug])])\n\tAC_LANG_POP([C++])\nfi\n\n# Define UNIX for all Unix-like systems.  Don't define it for cross-compiling to\n# non-Unix-like systems.  (-DUNIX selects the archutils and ArchHooks to use; if\n# your platform doesn't use the Unix ones, you probably don't want to define UNIX.)\ncase $host_os in\n*linux*)\n\tAC_DEFINE(LINUX, 1, [Linux])\n\tAC_DEFINE(UNIX, 1, [Unix])\n\tlinux=yes\n\tunix=yes\n\t;;\n\n*bsd*)\n\tAC_CHECK_DECL(BSD,,AC_DEFINE(BSD, 1, [BSD]),[\n#if HAVE_SYS_PARAM_H\n#include <sys/param.h>\n#endif])\n\tAC_DEFINE(UNIX, 1, [Unix])\n\tbsd=yes\n\tunix=yes\n\t;;\n*mingw*)\n\tAC_DEFINE(WINDOWS, 1, [Windows])\n\twindows=yes\n\t;;\n*)\n\tAC_DEFINE(UNIX, 1, [Unix])\n\tunix=yes\n\t;;\nesac\nif test \"$windows\" = \"yes\"; then\n\tSM_WINDOWS\nfi\nif test \"$linux\" = \"yes\"; then\n\tAC_DEFINE(LUA_USE_LINUX, 1, [Linux for Lua])\nfi\nAM_CONDITIONAL(UNIX, test \"$unix\" = \"yes\" )\nAM_CONDITIONAL(LINUX, test \"$linux\" = \"yes\" )\nAM_CONDITIONAL(BSD, test \"$bsd\" = \"yes\" )\nAM_CONDITIONAL(WINDOWS, test \"$windows\" = \"yes\" )\n\n# Define macros for individual CPU types, for a few bits of inline assembly.\n# This is for major, compatible CPU classes--\"CPU_X86\" includes P2, P3, P4,\n# AMD, etc.  If you need CPU-specific assembly, check at runtime--don't create\n# separate binaries for each CPU if the binaries themselves are otherwise\n# compatible.\ncase $host_cpu in\ni?86*)\n\tAC_DEFINE(CPU_X86, 1, [x86])\n\t;;\nx86_64*)\n\tAC_DEFINE(CPU_X86_64, 1, [x86-64])\n\t;;\npowerpc*)\n\tAC_DEFINE(CPU_PPC, 1, [PPC])\n\thave_parallel_port=no\n\t;;\nesac\nAM_CONDITIONAL(HAVE_PARALLEL_PORT, test \"${have_parallel_port-yes}\" = \"yes\")\n\n# Minimaid support flag\nAC_ARG_WITH(minimaid, AS_HELP_STRING([--with-minimaid],[Enable Minimaid support]), with_minimaid=$withval, with_minimaid=no)\nAM_CONDITIONAL(HAVE_MINIMAID, test \"$with_minimaid\" = \"yes\")\n\nAC_C_BIGENDIAN(\n\tAC_DEFINE(ENDIAN_BIG, 1, [Big endian]),\n\tAC_DEFINE(ENDIAN_LITTLE, 1, [Little endian]),\n\tAC_MSG_ERROR([Can't determine endianness]) )\n\n# If we're compiling with the SSE2 build flag, add that flag to CFLAGS and CXXFLAGS.\n# (Handwritten SSE/SSE2 code isn't in the binary, but GCC's heuristics optimize enough\n# vector arithmetic in Rage that this produces a noticeable speedup on SSE2 processors.)\n\nAC_ARG_WITH(sse2, AC_HELP_STRING([--with-sse2], [Enable SSE2 optimization]), with_sse2=$withval, with_sse2=no)\n\nif test \"$with_sse2\" = \"yes\"; then\n\tCFLAGS=\"$CFLAGS -msse2\"\n\tCXXFLAGS=\"$CXXFLAGS -msse2\"\nfi\n\nAC_ARG_WITH(prof, AS_HELP_STRING([--with-prof],[Enable profiling]), with_prof=$withval, with_prof=no)\nif test \"$with_prof\" = \"yes\"; then\n\ttest \"$DEFAULT_CFLAGS\" = \"yes\" && CFLAGS=\"$CFLAGS -pg\"\n\ttest \"$DEFAULT_CXXFLAGS\" = \"yes\" && CXXFLAGS=\"$CXXFLAGS -pg\"\n\ttest \"$DEFAULT_LDFLAGS\" = \"yes\" && LDFLAGS=\"$LDFLAGS -pg\"\nfi\n\ndnl Usually in libc, but not always(?)\nif test \"$unix\" = \"yes\"; then\n\tAC_SEARCH_LIBS(clock_gettime, rt,, AC_ERROR([clock_gettime() not available?]))\nfi\n\nSM_OPENGL\nSM_X11\nGL_CFLAGS=\"$GL_CFLAGS $XCFLAGS\"\nGL_LIBS=\"$GL_LIBS $XLIBS\"\n\nAC_SUBST(GL_CFLAGS)\nAC_SUBST(GL_LIBS)\n\nhave_libpng=yes\nSM_STATIC\nAC_CHECK_LIB(png, png_create_read_struct, [x=y], have_libpng=no, [-lz -lm]) # x=y to stop autoconf from messing with LIBS\nAC_CHECK_HEADER(png.h, , have_libpng=no)\nAC_ARG_WITH(static-png, AS_HELP_STRING([--with-static-png],[Statically link libpng]), with_static_png=$withval, with_static_png=no)\nif test \"$with_static_png\" = \"yes\"; then\n\tLIB_PRE=$START_STATIC\n\tLIB_POST=$END_STATIC\nfi\nif test \"$have_libpng\" = \"no\"; then\n  echo\n  echo \"*** libpng is required to build StepMania; please make sure that\"\n  echo \"*** it is installed to continue the build process.\"\n  exit 1\nfi\n\nLIBS=\"$LIBS $LIB_PRE -lpng -lz -lm $LIB_POST\"\nLIB_PRE=\nLIB_POST=\n\nAC_ARG_WITH(jpeg, AS_HELP_STRING([--without-jpeg],[Disable JPEG support]), with_jpeg=$withval, with_jpeg=yes)\nAC_ARG_WITH(static-jpeg, AS_HELP_STRING([--with-static-jpeg],[Statically link libjpeg]), with_static_jpeg=$withval, with_static_jpeg=no)\n\nif test \"$with_static_png\" = \"yes\"; then\n\tLIB_PRE=$START_STATIC\n\tLIB_POST=$END_STATIC\nfi\nif test \"$with_jpeg\" = \"yes\"; then\n\thave_libjpeg=yes\n\tAC_CHECK_LIB(jpeg, jpeg_read_scanlines, [x=y], have_libjpeg=no) # x=y to stop autoconf from messing with LIBS\n\tAC_CHECK_HEADER(jpeglib.h, , have_libjpeg=no)\n\n\tif test \"$have_libjpeg\" = \"no\"; then\n\t\t# Require JPEG by default, so people don't compile without it\n\t\t# by accident and then come asking us why files won't load.\n\t\tAC_MSG_ERROR(\n[libjpeg is required to build StepMania; please make sure that it is installed\nto continue the build process.  If you really want to compile without JPEG\nsupport, pass the \"--without-jpeg\" flag to configure.])\n\tfi\n\thave_libjpeg=\n\n\tLIBS=\"$LIBS $LIB_PRE -ljpeg $LIB_POST\"\nelse\n\tAC_DEFINE(NO_JPEG_SUPPORT, 1, [JPEG support not available])\nfi\nLIB_PRE=\nLIB_POST=\n\nAC_ARG_WITH(network, AS_HELP_STRING([--without-network],[Disable networking]), with_network=$withval, with_network=yes)\nif test \"$with_network\" = \"no\"; then\n\tAC_DEFINE(WITHOUT_NETWORKING, 1, [Networking support not available])\nfi\nAM_CONDITIONAL(WITHOUT_NETWORKING, test \"$with_network\" = \"no\")\n\nAC_ARG_WITH(gles2, AS_HELP_STRING([--without-gles2],[Disable OpenGL ES 2.0]), with_gles2=$withval, with_gles2=yes)\nif test \"$with_gles2\" = \"no\"; then\n\tAC_DEFINE(WITHOUT_GLES2, 1, [OpenGL ES 2.0 support not available])\nfi\nAM_CONDITIONAL(WITHOUT_GLES2, test \"$with_gles2\" = \"no\")\n\nAM_ICONV\n# HACK: The iconv check can pass erroneously on mingw64 under some conditions I'm not really sure of.\nif test \"$windows\" = \"yes\"; then\n\tLIBS=\"$LIBS -liconv\"\nelse\n\tLIBS=\"$LIBS $LIBICONV\"\nfi\n\nSM_ZLIB\nSM_BZIP\nSM_AUDIO\ndnl SM_VIDEO\nSM_TLS\n\nSM_CHECK_CRASH_HANDLER\n\nAM_PATH_ALSA(0.9.0,AC_DEFINE([HAVE_ALSA],1,[Define presence of ALSA]),alsa=false)\n\nAC_ARG_ENABLE(gtk2, AS_HELP_STRING([--disable-gtk2],[Disable GTK support]), enable_gtk2=$enableval, enable_gtk2=yes)\n\nif test x$enable_gtk2 = xyes; then\n  AM_PATH_GTK_2_0(2.0.0,AC_DEFINE([HAVE_GTK],1,[Define presence of GTK]),enable_gtk2=no)\nfi\n\nAC_CHECK_HEADER(sys/soundcard.h, [AC_DEFINE(HAVE_OSS, 1, [OSS support available])])\nAC_CHECK_DECL(OSS_GETVERSION, AC_DEFINE([HAVE_OSS_GETVERSION],1,[OSS_GETVERSION is defined]), , [#include <sys/soundcard.h>])\nAC_ARG_ENABLE(force-oss, AS_HELP_STRING([--enable-force-oss],[Force OSS]), force_oss=$enableval, force_oss=no)\nAC_CHECK_HEADER(stdint.h, , [AC_DEFINE(MISSING_STDINT_H, 1, [stdint.h is missing])])\nAC_CHECK_HEADERS([inttypes.h endian.h machine/endian.h alloca.h])\n\nhave_pulse=no\nAC_CHECK_LIB(pulse, pa_stream_new, have_pulse=yes)\nif test x$have_pulse = xyes; then\n\tAC_DEFINE(HAVE_PULSE, 1, [pulseaudio support available])\n\tLIBS=\"$LIBS -lpulse\"\nfi\n\ndnl Search for JACK unless --without-jack or --with-jack=no is given; require it for --with-jack\nAC_ARG_WITH([jack], [AS_HELP_STRING([--without-jack], [Disable JACK sound driver])])\nAS_IF([test \"x$with_jack\" != \"xno\"], [\n       AC_SEARCH_LIBS([jack_client_open], [jack], [have_jack=yes], [\n\t\t       AS_IF([test \"x$with_jack\" != x], [\n\t\t\t      AC_MSG_ERROR([--with-jack was specified but JACK was not found])\n\t\t\t     ])\n\t\t       ])\n])\n\nAC_MSG_CHECKING(if cstdlib breaks llabs)\nAC_LANG_PUSH(C++)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <stdlib.h>\n\t\t #include <cstdlib>\n\t\t using namespace std;]], [[llabs(1)]])],[AC_MSG_RESULT(no)],[AC_MSG_RESULT(yes)\n\t\t AC_DEFINE([NEED_CSTDLIB_WORKAROUND], 1, [cstdlib breaks llabs])\n\t      ])\nAC_LANG_POP(C++)\n\n# TODO: This should have a --with option to force it on\nif test \"$windows\" != \"yes\"; then\nAC_CHECK_LIB( pthread, pthread_create, [have_pthread=yes; AC_DEFINE([HAVE_LIBPTHREAD],1,[libpthread is available])], have_pthread=no)\nAC_CHECK_LIB( pthread, pthread_mutex_timedlock, AC_DEFINE([HAVE_PTHREAD_MUTEX_TIMEDLOCK],1,[pthreads has pthread_mutex_timedlock()]) )\nAC_CHECK_LIB( pthread, pthread_cond_timedwait, AC_DEFINE([HAVE_PTHREAD_COND_TIMEDWAIT],1,[pthreads has pthread_cond_timedwait()]) )\nfi\n\n# XXX: This isn't always being included when it is needed. Just force it in.\nif test \"$have_pthread\" = \"yes\"; then\n\tLIBS=\"$LIBS -lpthread\"\nfi\n\nAM_CONDITIONAL(HAVE_PTHREAD, test \"$have_pthread\" = \"yes\")\n\n# Always:\nAC_DEFINE(_GNU_SOURCE, 1, [Use GNU extensions])\nAC_DEFINE(__STDC_FORMAT_MACROS, 1, [Use PRId64 and similar])\nAC_DEFINE(USE_GITVERSION, 1, [We are generating gitversion.h])\n\nAM_CONDITIONAL(HAVE_ALSA, test x$alsa != xfalse )\nAM_CONDITIONAL(HAVE_GTK, test \"$enable_gtk2\" != \"no\" )\nAM_CONDITIONAL(HAVE_JACK, test x$have_jack = xyes)\nAM_CONDITIONAL(HAVE_OSS, test x$ac_cv_header_sys_soundcard_h = xyes )\nAM_CONDITIONAL(HAVE_PULSE, test x$have_pulse = xyes)\nAM_CONDITIONAL(USE_CRASH_HANDLER, test \"$use_crash_handler\" = \"yes\" )\n\nif test x$force_oss = xyes && test x$ac_cv_header_sys_soundcard_h = xyes; then\n\tAC_DEFINE([FORCE_OSS], 1, [Force OSS Usage])\nfi\n\nAC_CHECK_DECL(powf, , AC_DEFINE([NEED_POWF],1,[Need powf]), [#include <math.h>])\nAC_CHECK_DECL(sqrtf, , AC_DEFINE([NEED_SQRTF],1,[Need sqrtf]), [#include <math.h>])\nAC_CHECK_DECL(sinf, , AC_DEFINE([NEED_SINF],1,[Need sinf]), [#include <math.h>])\nAC_CHECK_DECL(tanf, , AC_DEFINE([NEED_COSF],1,[Need tanf]), [#include <math.h>])\nAC_CHECK_DECL(cosf, , AC_DEFINE([NEED_TANF],1,[Need cosf]), [#include <math.h>])\nAC_CHECK_DECL(acosf, , AC_DEFINE([NEED_ACOSF],1,[Need acosf]), [#include <math.h>])\nAC_CHECK_DECL(roundf, , AC_DEFINE([NEED_ROUNDF],1,[Need roundf]), [#include <math.h>])\nAC_CHECK_DECL(truncf, , AC_DEFINE([NEED_TRUNCF],1,[Need truncf]), [#include <math.h>])\nAC_CHECK_DECL(strtof, , AC_DEFINE([NEED_STRTOF],1,[Need strtof]), [#include <stdlib.h>])\n\n# This doesn't work on glibc math functions:\n# AC_CHECK_FUNCS([sqrtf sinf tanf cosf acosf roundf truncf])\n\nAC_CHECK_DECLS([SIGPWR, SIGUSR1],,,[#include <signal.h>])\n\nAC_ARG_ENABLE(tests, AS_HELP_STRING([--enable-tests],[Build test programs]), enable_tests=$enableval, enable_tests=no)\nAM_CONDITIONAL(BUILD_TESTS, test \"$enable_tests\" = \"yes\" )\n\nAC_ARG_ENABLE(lua-binaries, AS_HELP_STRING([--enable-lua-binaries],[Build lua and luac]), enable_lua_binaries=$enableval, enable_lua_binaries=no)\nAM_CONDITIONAL(BUILD_LUA_BINARIES, test \"$enable_lua_binaries\" = \"yes\" )\n\nAC_SUBST(RESFLAGS)\n\ndnl Add these after all tests are done as they don't exist just yet.\nLIBS=\"$LIBS $FFMPEG_LIBS\"\n\n# Selection between bundled pcre and system pcre\nAC_ARG_WITH(system-pcre, AS_HELP_STRING([--with-system-pcre],[Disable building of bundled libpcre]), with_system_pcre=$withval, with_system_pcre=no)\nAM_CONDITIONAL(USE_SYSTEM_PCRE, test \"$with_system_pcre\" == \"yes\")\n\nif test \"$with_system_pcre\" == \"yes\"; then\n\thave_libpcre=yes\n\tAC_CHECK_HEADER(pcre.h, , have_libpcre=no)\n\tif test \"$have_libpcre\" = \"no\"; then\n\t\tAC_MSG_ERROR([If you want to use system libpcre, please make sure that it is installed. Otherwise please configure with --without-system-pcre.])\n\telse\n\t\tAC_DEFINE([USE_SYSTEM_PCRE], 1, [Build with system libpcre])\n\t\tLIBS=\"$LIBS -lpcre\"\n\tfi\nfi\n\nAC_CONFIG_FILES(Makefile)\nAC_CONFIG_FILES(bundle/Makefile)\nAC_CONFIG_FILES(src/Makefile)\nAC_OUTPUT\n"
        },
        {
          "name": "extern",
          "type": "tree",
          "content": null
        },
        {
          "name": "icons",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "stepmania.desktop",
          "type": "blob",
          "size": 0.2421875,
          "content": "\n[Desktop Entry]\nEncoding=UTF-8\nName=StepMania\nGenericName=Rhythm and dance game\nTryExec=stepmania\nExec=stepmania\nTerminal=false\nIcon=stepmania-ssc\nType=Application\nCategories=Application;Game;ArcadeGame\nComment=A cross-platform rhythm video game.\n"
        },
        {
          "name": "stepmania.nsi",
          "type": "blob",
          "size": 32.5849609375,
          "content": "; NSIS Install Script \r\n; created by \r\n;     BBF, GlennMaynard, ChrisDanford\r\n; hacked by AJ for sm-ssc\r\n; NOTE: this .NSI script is designed for NSIS v2.0+\r\n\r\n;-------------------------------------------------------------------------------\r\n;Includes\r\n\r\n\t!include \"MUI.nsh\"\t; Modern UI\r\n\r\n\t; Product info is in a separate file so that people will change\r\n\t; the version info for the installer and the program at the same time.\r\n\t; It's confusing/annoying when the installer and shortcut text doesn't match\r\n\t; the title screen version text.\r\n\t!include \"src\\ProductInfo.inc\"\r\n\r\n;-------------------------------------------------------------------------------\r\n;General\r\n\r\n\t!system \"echo Compressing executables. This may take a moment ...\" ignore\r\n\t!system \"utils\\upx Program\\*.exe\" ignore\r\n\r\n\tName \"${PRODUCT_DISPLAY}\"\r\n\tOutFile \"${PRODUCT_DISPLAY}.exe\"\r\n\r\n\tCaption \"${PRODUCT_DISPLAY} | install\"\r\n\tUninstallCaption \"${PRODUCT_DISPLAY} | uninstall\"\r\n\r\n\t; Some default compiler settings (uncomment and change at will):\r\n!ifdef COMPRESS\r\n\tSetCompress auto\r\n!else\r\n\tSetCompress off\r\n!endif\r\n\tSetDatablockOptimize on ; (can be off)\r\n!ifdef CRC_CHECK\r\n\tCRCCheck on\r\n!else\r\n\tCRCCheck off\r\n!endif\r\n\r\n\t; don't forget to change this before releasing a new version.\r\n\t; wish this could be automated, but it requires \"X.Y.Z.a\" format. -aj\r\n\tVIProductVersion \"5.0.0.5\"\r\n\tVIAddVersionKey \"ProductName\" \"${PRODUCT_ID}\"\r\n\tVIAddVersionKey \"FileVersion\" \"${PRODUCT_VER}\"\r\n\tVIAddVersionKey \"FileDescription\" \"${PRODUCT_ID} Installer\"\r\n\r\n\tAutoCloseWindow true ; (can be true for the window go away automatically at end)\r\n\t; ShowInstDetails hide ; (can be show to have them shown, or nevershow to disable)\r\n\tSetDateSave on ; (can be on to have files restored to their orginal date)\r\n\r\n\t; I think it may need actual admin privs for writing to the registry... -aj\r\n\t;RequestExecutionLevel user\r\n\r\n\t; $INSTDIR is defined in .onInit below. Old line is left here just in case.\r\n\t;InstallDir \"C:\\Games\\${PRODUCT_ID}\"\r\n\tInstallDir \"${INSTDIR}\"\r\n\tInstallDirRegKey HKEY_LOCAL_MACHINE \"SOFTWARE\\${PRODUCT_ID}\" \"\"\r\n\r\n\t; DirShow show ; (make this hide to not let the user change it)\r\n\tDirText \"${PRODUCT_DISPLAY}\"\r\n\tInstallColors /windows\r\n\tInstProgressFlags smooth\r\n\r\n;-------------------------------------------------------------------------------\r\n;Interface Settings\r\n\r\n\t!define MUI_HEADERIMAGE\r\n\t!define MUI_HEADERIMAGE_BITMAP \"Installer\\header-${PRODUCT_BITMAP}.bmp\"\r\n\t!define MUI_WELCOMEFINISHPAGE_BITMAP \"Installer\\welcome-${PRODUCT_BITMAP}.bmp\"\r\n\t!define MUI_ABORTWARNING\r\n\t!define MUI_ICON \"Installer\\install.ico\"\r\n\t!define MUI_UNICON \"Installer\\uninstall.ico\"\r\n\r\n;-------------------------------------------------------------------------------\r\n;Language Selection Dialog Settings\r\n\r\n\t;Remember the installer language\r\n\t!define MUI_LANGDLL_REGISTRY_ROOT \"HKCU\" \r\n\t!define MUI_LANGDLL_REGISTRY_KEY \"Software\\${PRODUCT_ID}\" \r\n\t!define MUI_LANGDLL_REGISTRY_VALUENAME \"Installer Language\"\r\n\r\n;-------------------------------------------------------------------------------\r\n;Pages\r\n\r\n!ifdef SHOW_AUTORUN\r\n\tPage custom ShowAutorun LeaveAutorun\r\n!endif\r\n\r\n\t!insertmacro MUI_PAGE_WELCOME\r\n\r\n\t;!insertmacro MUI_PAGE_COMPONENTS\r\n\t!insertmacro MUI_PAGE_DIRECTORY\r\n\t!insertmacro MUI_PAGE_INSTFILES\r\n\r\n\t\t# These indented statements modify settings for MUI_PAGE_FINISH\r\n\t\t!define MUI_FINISHPAGE_NOAUTOCLOSE\r\n\r\n\t\t!define MUI_FINISHPAGE_RUN \"$INSTDIR\\Program\\StepMania-SSE2.exe\"\r\n\t\t!define MUI_FINISHPAGE_RUN_NOTCHECKED\r\n\t\t!define MUI_FINISHPAGE_RUN_TEXT \"$(TEXT_IO_LAUNCH_THE_GAME)\"\r\n\r\n\t!insertmacro MUI_PAGE_FINISH\r\n\r\n\t!insertmacro MUI_UNPAGE_CONFIRM\r\n\t!insertmacro MUI_UNPAGE_INSTFILES\r\n\r\n;-------------------------------------------------------------------------------\r\n;Languages\r\n\r\n\t!insertmacro MUI_LANGUAGE \"English\" # first language is the default language\r\n\t!insertmacro MUI_LANGUAGE \"French\"\r\n\t!insertmacro MUI_LANGUAGE \"German\"\r\n\t!insertmacro MUI_LANGUAGE \"Spanish\"\r\n\t!insertmacro MUI_LANGUAGE \"Italian\"\r\n\t;!insertmacro MUI_LANGUAGE \"SimpChinese\"\r\n\t;!insertmacro MUI_LANGUAGE \"TradChinese\"\r\n\t;!insertmacro MUI_LANGUAGE \"Japanese\"\r\n\t;!insertmacro MUI_LANGUAGE \"Korean\"\r\n\t;!insertmacro MUI_LANGUAGE \"Dutch\"\r\n\t;!insertmacro MUI_LANGUAGE \"Danish\"\r\n\t;!insertmacro MUI_LANGUAGE \"Swedish\"\r\n\t;!insertmacro MUI_LANGUAGE \"Norwegian\"\r\n\t;!insertmacro MUI_LANGUAGE \"Finnish\"\r\n\t;!insertmacro MUI_LANGUAGE \"Greek\"\r\n\t;!insertmacro MUI_LANGUAGE \"Russian\"\r\n\t;!insertmacro MUI_LANGUAGE \"Portuguese\"\r\n\t;!insertmacro MUI_LANGUAGE \"PortugueseBR\"\r\n\t;!insertmacro MUI_LANGUAGE \"Polish\"\r\n\t;!insertmacro MUI_LANGUAGE \"Ukrainian\"\r\n\t;!insertmacro MUI_LANGUAGE \"Czech\"\r\n\t;!insertmacro MUI_LANGUAGE \"Slovak\"\r\n\t;!insertmacro MUI_LANGUAGE \"Croatian\"\r\n\t;!insertmacro MUI_LANGUAGE \"Bulgarian\"\r\n\t;!insertmacro MUI_LANGUAGE \"Hungarian\"\r\n\t;!insertmacro MUI_LANGUAGE \"Thai\"\r\n\t;!insertmacro MUI_LANGUAGE \"Romanian\"\r\n\t;!insertmacro MUI_LANGUAGE \"Latvian\"\r\n\t;!insertmacro MUI_LANGUAGE \"Macedonian\"\r\n\t;!insertmacro MUI_LANGUAGE \"Estonian\"\r\n\t;!insertmacro MUI_LANGUAGE \"Turkish\"\r\n\t;!insertmacro MUI_LANGUAGE \"Lithuanian\"\r\n\t;!insertmacro MUI_LANGUAGE \"Catalan\"\r\n\t;!insertmacro MUI_LANGUAGE \"Slovenian\"\r\n\t;!insertmacro MUI_LANGUAGE \"Serbian\"\r\n\t;!insertmacro MUI_LANGUAGE \"SerbianLatin\"\r\n\t;!insertmacro MUI_LANGUAGE \"Arabic\"\r\n\t;!insertmacro MUI_LANGUAGE \"Farsi\"\r\n\t;!insertmacro MUI_LANGUAGE \"Hebrew\"\r\n\t;!insertmacro MUI_LANGUAGE \"Indonesian\"\r\n\t;!insertmacro MUI_LANGUAGE \"Mongolian\"\r\n\t;!insertmacro MUI_LANGUAGE \"Luxembourgish\"\r\n\t;!insertmacro MUI_LANGUAGE \"Albanian\"\r\n\t;!insertmacro MUI_LANGUAGE \"Breton\"\r\n\t;!insertmacro MUI_LANGUAGE \"Belarusian\"\r\n\t;!insertmacro MUI_LANGUAGE \"Icelandic\"\r\n\t;!insertmacro MUI_LANGUAGE \"Malay\"\r\n\t;!insertmacro MUI_LANGUAGE \"Bosnian\"\r\n\t;!insertmacro MUI_LANGUAGE \"Kurdish\"\r\n\r\n\t; generate, then include installer strings\r\n\t;!delfile \"nsis_strings_temp.inc\"\r\n\r\n\t!system '\"Program\\StepMania.exe\" --ExportNsisStrings'\r\n\t!include \"nsis_strings_temp.inc\"\r\n\r\n;-------------------------------------------------------------------------------\r\n;Reserve Files\r\n  \r\n  ;These files should be inserted before other files in the data block\r\n  ;Keep these lines before any File command\r\n  ;Only for solid compression (by default, solid compression is enabled for BZIP2 and LZMA)\r\n  \r\n  !insertmacro MUI_RESERVEFILE_LANGDLL\r\n\r\n;-------------------------------------------------------------------------------\r\n;Utility Functions\r\n!ifdef ASSOCIATE_SMZIP\r\n!define SHCNE_ASSOCCHANGED 0x08000000\r\n!define SHCNF_IDLIST 0\r\n \r\nFunction RefreshShellIcons\r\n  ; By jerome tremblay - april 2003\r\n  System::Call 'shell32.dll::SHChangeNotify(i, i, i, i) v \\\r\n  (${SHCNE_ASSOCCHANGED}, ${SHCNF_IDLIST}, 0, 0)'\r\nFunctionEnd\r\nFunction un.RefreshShellIcons\r\n  ; By jerome tremblay - april 2003\r\n  System::Call 'shell32.dll::SHChangeNotify(i, i, i, i) v \\\r\n  (${SHCNE_ASSOCCHANGED}, ${SHCNF_IDLIST}, 0, 0)'\r\nFunctionEnd\r\n!endif\r\n\r\n;-------------------------------------------------------------------------------\r\n;Installer Sections\r\n\r\nSection \"Main Section\" SecMain\r\n\r\n\t; write out uninstaller\r\n\tSetOutPath \"$INSTDIR\"\r\n\tAllowSkipFiles off\r\n\tSetOverwrite on\r\n\r\n!ifdef INSTALL_PROGRAM_LIBRARIES\r\n\tWriteUninstaller \"$INSTDIR\\uninstall.exe\"\r\n\r\n\t; add registry entries\r\n\tWriteRegStr HKEY_LOCAL_MACHINE \"SOFTWARE\\${PRODUCT_ID}\" \"\" \"$INSTDIR\"\r\n\tWriteRegStr HKEY_LOCAL_MACHINE \"Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${PRODUCT_ID}\" \"DisplayName\" \"$(TEXT_IO_REMOVE_ONLY)\"\r\n\tWriteRegStr HKEY_LOCAL_MACHINE \"Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${PRODUCT_ID}\" \"DisplayVersion\" \"$(PRODUCT_VER)\"\r\n\tWriteRegStr HKEY_LOCAL_MACHINE \"Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${PRODUCT_ID}\" \"Comments\" \"StepMania 5 is a rhythm game simulator.\"\r\n\tWriteRegStr HKEY_LOCAL_MACHINE \"Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${PRODUCT_ID}\" \"Publisher\" \"StepMania Team\"\r\n\tWriteRegStr HKEY_LOCAL_MACHINE \"Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${PRODUCT_ID}\" \"URLInfoAbout\" \"http://www.stepmania.com/\"\r\n\tWriteRegStr HKEY_LOCAL_MACHINE \"Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${PRODUCT_ID}\" \"URLUpdateInfo\" \"http://code.google.com/p/stepmania/\"\r\n\tWriteRegStr HKEY_LOCAL_MACHINE \"Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${PRODUCT_ID}\" \"UninstallString\" '\"$INSTDIR\\uninstall.exe\"'\r\n!endif\r\n\r\n!ifdef INSTALL_EXTERNAL_PCKS\r\n\t; Do this copy before anything else.  It's the most likely to fail.  \r\n\t; Possible failure reasons are: scratched CD, user tried to copy the installer but forgot the pcks.\r\n\tCreateDirectory $INSTDIR\\pcks\r\n\tCopyFiles \"${EXTERNAL_PCK_DIR}\\*.pck\" $INSTDIR\\pcks 650000\t; assume a CD full of data\r\n\tIfErrors do_error_pck do_no_error_pck\r\n\tdo_error_pck:\r\n\tMessageBox MB_OK|MB_ICONSTOP \"$(TEXT_IO_FATAL_ERROR_COPYING_PCK)\"\r\n\tQuit\r\n\tdo_no_error_pck:\r\n!endif\r\n\r\n!ifdef ASSOCIATE_SMZIP\r\n\tWriteRegStr HKEY_LOCAL_MACHINE \"SOFTWARE\\Classes\\smzipfile\" \"\" \"$(TEXT_IO_SMZIP_PACKAGE)\"\r\n\tWriteRegStr HKEY_LOCAL_MACHINE \"SOFTWARE\\Classes\\smzipfile\\DefaultIcon\" \"\" \"$INSTDIR\\Program\\StepMania.exe,1\"\r\n\tWriteRegStr HKEY_LOCAL_MACHINE \"SOFTWARE\\Classes\\smzipfile\\shell\\open\\command\" \"\" '\"$INSTDIR\\Program\\StepMania.exe\" \"%1\"'\r\n\tWriteRegStr HKEY_LOCAL_MACHINE \"SOFTWARE\\Classes\\.smzip\" \"\" \"smzipfile\"\r\n!endif\r\n\r\n!ifdef ASSOCIATE_SMURL\r\n\tWriteRegStr HKEY_LOCAL_MACHINE \"SOFTWARE\\Classes\\stepmania\" \"\" \"StepMania protocol handler\"\r\n\tWriteRegStr HKEY_LOCAL_MACHINE \"SOFTWARE\\Classes\\stepmania\" \"URL Protocol\" \"\"\r\n\tWriteRegStr HKEY_LOCAL_MACHINE \"SOFTWARE\\Classes\\stepmania\\DefaultIcon\" \"\" \"$INSTDIR\\Program\\StepMania.exe\"\r\n\tWriteRegStr HKEY_LOCAL_MACHINE \"SOFTWARE\\Classes\\stepmania\\shell\\open\\command\" \"\" '\"$INSTDIR\\Program\\StepMania.exe\" \"%1\"'\r\n!endif\r\n\r\n!ifdef INSTALL_NON_PCK_FILES\r\n\tCreateDirectory \"$INSTDIR\\Announcers\"\r\n\tSetOutPath \"$INSTDIR\\Announcers\"\r\n\tFile \"Announcers\\instructions.txt\"\r\n\r\n\t; background/movie related\r\n\tCreateDirectory \"$INSTDIR\\BGAnimations\"\r\n\tSetOutPath \"$INSTDIR\\BGAnimations\"\r\n\tFile \"BGAnimations\\instructions.txt\"\r\n\r\n\tCreateDirectory \"$INSTDIR\\BackgroundEffects\"\r\n\tSetOutPath \"$INSTDIR\\\"\r\n\tFile /r /x CVS /x .svn \"BackgroundEffects\"\r\n\r\n\tCreateDirectory \"$INSTDIR\\BackgroundTransitions\"\r\n\tSetOutPath \"$INSTDIR\\\"\r\n\tFile /r /x CVS /x .svn \"BackgroundTransitions\"\r\n\r\n\t;CreateDirectory \"$INSTDIR\\RandomMovies\"\r\n\t;SetOutPath \"$INSTDIR\\RandomMovies\"\r\n\t;File \"RandomMovies\\instructions.txt\"\r\n\t; end background/movie related\r\n\r\n\t; Nobody should be using this directory anymore. -aj\r\n\t;CreateDirectory \"$INSTDIR\\CDTitles\"\r\n\t;SetOutPath \"$INSTDIR\\CDTitles\"\r\n\t;File \"CDTitles\\Instructions.txt\"\r\n\r\n\tRMDir /r \"$INSTDIR\\Characters\\default\"\r\n\tCreateDirectory \"$INSTDIR\\Characters\\default\"\r\n\tSetOutPath \"$INSTDIR\\Characters\"\r\n\tFile /r /x CVS /x .svn \"Characters\\default\"\r\n\tFile \"Characters\\instructions.txt\"\r\n\r\n\tCreateDirectory \"$INSTDIR\\Courses\"\r\n\tSetOutPath \"$INSTDIR\\Courses\"\r\n\tFile \"Courses\\instructions.txt\"\r\n\tFile /r /x CVS /x .svn \"Courses\\Default\"\r\n\r\n\tCreateDirectory \"$INSTDIR\\Packages\"\r\n\t;File \"Packages\\Instructions.txt\"\r\n\r\n\t; remove old noteskins\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\common\\default\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\common\\_Editor\"\r\n\t; dance\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\dance\\default\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\dance\\Delta\"\r\n\t; the \"midi-*\" noteskin series was formerly known as just \"midi\".\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\dance\\midi\"\r\n\t; we may also want to remove the new ones.\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\dance\\midi-note\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\dance\\midi-note-3d\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\dance\\midi-solo\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\dance\\midi-vivid\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\dance\\midi-vivid-3d\"\r\n\t; old names\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\dance\\midi-rhythm-p1\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\dance\\midi-rhythm-p2\"\r\n\t; new names\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\dance\\midi-routine-p1\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\dance\\midi-routine-p2\"\r\n\t; retro, retrobar.\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\dance\\retro\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\dance\\retrobar\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\dance\\retrobar-splithand_whiteblue\"\r\n\t; pump\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\pump\\cmd\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\pump\\cmd-routine-p1\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\pump\\cmd-routine-p2\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\pump\\complex\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\pump\\default\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\pump\\delta\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\pump\\delta-note\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\pump\\delta-routine-p1\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\pump\\delta-routine-p2\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\pump\\frame5p\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\pump\\newextra\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\pump\\pad\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\pump\\rhythm\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\pump\\simple\"\r\n\t; kb7\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\kb7\\default\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\kb7\\orbital\"\r\n\t; retrobar for kb7\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\kb7\\retrobar\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\kb7\\retrobar-iidx\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\kb7\\retrobar-o2jam\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\kb7\\retrobar-razor\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\kb7\\retrobar-razor_o2\"\r\n\t; lights\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\lights\\default\"\r\n\tSetOutPath \"$INSTDIR\\NoteSkins\"\r\n\tFile \"NoteSkins\\instructions.txt\"\r\n\r\n\t; common noteskin\r\n\tSetOutPath \"$INSTDIR\\NoteSkins\\common\"\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\common\\common\"\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\common\\_Editor\"\r\n\r\n\t; install dance noteskins\r\n\tSetOutPath \"$INSTDIR\\NoteSkins\\dance\"\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\dance\\default\"\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\dance\\Delta\"\r\n\t; \"midi\" noteskin was split out after beta 2.\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\dance\\midi-note\"\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\dance\\midi-note-3d\"\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\dance\\midi-routine-p1\"\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\dance\\midi-routine-p2\"\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\dance\\midi-solo\"\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\dance\\midi-vivid\"\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\dance\\midi-vivid-3d\"\r\n\t; retro and retrobar\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\dance\\retro\"\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\dance\\retrobar\"\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\dance\\retrobar-splithand_whiteblue\"\r\n\tSetOutPath \"$INSTDIR\"\r\n\r\n\t; install pump noteskins\r\n\tSetOutPath \"$INSTDIR\\NoteSkins\\pump\"\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\pump\\cmd\"\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\pump\\cmd-routine-p1\"\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\pump\\cmd-routine-p2\"\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\pump\\complex\"\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\pump\\default\"\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\pump\\delta\"\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\pump\\delta-note\"\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\pump\\delta-routine-p1\"\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\pump\\delta-routine-p2\"\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\pump\\frame5p\"\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\pump\\newextra\"\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\pump\\rhythm\"\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\pump\\simple\"\r\n\tSetOutPath \"$INSTDIR\"\r\n\r\n\t; install kb7 noteskins\r\n\tSetOutPath \"$INSTDIR\\NoteSkins\\kb7\"\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\kb7\\default\"\r\n\t;File /r /x CVS /x .svn \"NoteSkins\\kb7\\orbital\"\r\n\t; retrobar\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\kb7\\retrobar\"\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\kb7\\retrobar-iidx\"\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\kb7\\retrobar-o2jam\"\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\kb7\\retrobar-razor\"\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\kb7\\retrobar-razor_o2\"\r\n\tSetOutPath \"$INSTDIR\"\r\n\r\n\t; install lights noteskin\r\n\tSetOutPath \"$INSTDIR\\NoteSkins\\lights\"\r\n\tFile /r /x CVS /x .svn \"NoteSkins\\lights\\default\"\r\n\tSetOutPath \"$INSTDIR\"\r\n\r\n\t; make songs dir\r\n\tCreateDirectory \"$INSTDIR\\Songs\"\r\n\tSetOutPath \"$INSTDIR\\Songs\"\r\n\t;File \"Songs\\Instructions.txt\"\r\n\tFile /r /x CVS /x .svn \"Songs\\*\"\r\n\r\n\t; remove and install themes\r\n\tRMDir /r \"$INSTDIR\\Themes\\_fallback\"\r\n\tRMDir /r \"$INSTDIR\\Themes\\_portKit-sm4\"\r\n\tRMDir /r \"$INSTDIR\\Themes\\default\"\r\n\tCreateDirectory \"$INSTDIR\\Themes\"\r\n\tSetOutPath \"$INSTDIR\\Themes\"\r\n\t;File \"Themes\\instructions.txt\"\r\n\tFile /r /x CVS /x .svn \"Themes\\_fallback\"\r\n\t; no more portkit sm4\r\n\t;File /r /x CVS /x .svn \"Themes\\_portKit-sm4\"\r\n\tFile /r /x CVS /x .svn \"Themes\\default\"\r\n\r\n\tCreateDirectory \"$INSTDIR\\Data\"\r\n\tSetOutPath \"$INSTDIR\\Data\"\r\n\tFile /r /x CVS /x .svn \"Data\\*\"\r\n!endif\r\n\r\n!ifdef INSTALL_INTERNAL_PCKS\r\n\tCreateDirectory \"$INSTDIR\\pcks\"\r\n\tSetOutPath \"$INSTDIR\\pcks\"\r\n\tFile /r \"pcks\\*.*\"\r\n!endif\r\n\r\n\tSetOutPath \"$INSTDIR\\Program\"\r\n!ifdef INSTALL_EXECUTABLES\r\n\t; normal exec\r\n\tFile \"Program\\StepMania.exe\"\r\n\tFile \"Program\\StepMania.vdi\"\r\n\t; sse2 exec\r\n\tFile \"Program\\StepMania-SSE2.exe\"\r\n\tFile \"Program\\StepMania-SSE2.vdi\"\r\n\t; other programs\r\n\tFile \"Program\\Texture Font Generator.exe\"\r\n\t; AJ can never get this built properly:\r\n\t;File \"Program\\tools.exe\" ; to be replaced eventually\r\n!endif\r\n!ifdef ASSOCIATE_SMZIP\r\n\tCall RefreshShellIcons\r\n!endif\r\n!ifdef ASSOCIATE_SMURL\r\n\tCall RefreshShellIcons\r\n!endif\r\n!ifdef INSTALL_PROGRAM_LIBRARIES\r\n\t; microsoft!\r\n\t; xxx: how many of these do we really need?\r\n\tFile \"Program\\msvcp100.dll\"\r\n\tFile \"Program\\msvcr100.dll\"\r\n\tFile \"Program\\msvcp110.dll\"\r\n\tFile \"Program\\msvcr110.dll\"\r\n\tFile \"Program\\vccorlib110.dll\"\r\n\t; FFmpeg and related\r\n\tFile \"Program\\avcodec-53.dll\"\r\n\t;File \"Program\\avdevice-52.dll\"\r\n\tFile \"Program\\avformat-53.dll\"\r\n\tFile \"Program\\avutil-51.dll\"\r\n\tFile \"Program\\swscale-2.dll\"\r\n\t; parallel lights\r\n\tFile \"Program\\parallel_lights_io.dll\"\r\n\t; others\r\n\tFile \"Program\\dbghelp.dll\"\r\n\tFile \"Program\\jpeg.dll\"\r\n\tFile \"Program\\zlib1.dll\"\r\n\r\n\t; documentation\r\n\tCreateDirectory \"$INSTDIR\\Docs\"\r\n\tSetOutPath \"$INSTDIR\\Docs\"\r\n\tFile \"Docs\\Licenses.txt\"\r\n\tFile \"Docs\\credits.txt\"\r\n\tFile \"Docs\\credits_old_Stepmania_Team.txt\"\r\n\tFile \"Docs\\Changelog_sm-ssc.txt\"\r\n\tFile \"Docs\\Changelog_sm5.txt\"\r\n\tFile \"Docs\\Changelog_SSCformat.txt\"\r\n\tFile \"Docs\\CommandLineArgs.txt\"\r\n\tFile \"Docs\\CourseFormat.txt\"\r\n\tFile \"Docs\\Userdocs\\sm5_beginner.txt\"\r\n\tFile /r /x CVS /x .svn \"Docs\\license-ext\"\r\n\tFile /r /x CVS /x .svn \"Docs\\Luadoc\"\r\n\tFile /r /x CVS /x .svn \"Docs\\Themerdocs\"\r\n\r\n\tCreateDirectory \"$INSTDIR\\Manual\"\r\n\tSetOutPath \"$INSTDIR\\Manual\"\r\n\tFile /r /x CVS /x .svn /x _* /x desktop.ini \"Manual\\*.*\"\r\n\r\n\t; Create Start Menu icons\r\n\tSetShellVarContext current  # \t'all' doesn't work on Win9x\r\n\tCreateDirectory \"$SMPROGRAMS\\${PRODUCT_ID}\\\"\r\n\t; todo: make desktop shortcut an option\r\n\t!ifdef MAKE_DESKTOP_SHORTCUT\r\n\t\tCreateShortCut \"$DESKTOP\\$(TEXT_IO_RUN).lnk\" \"$INSTDIR\\Program\\StepMania-SSE2.exe\"\r\n\t!endif\r\n\r\n\tCreateShortCut \"$SMPROGRAMS\\${PRODUCT_ID}\\$(TEXT_IO_RUN).lnk\" \"$INSTDIR\\Program\\StepMania-SSE2.exe\"\r\n\tCreateShortCut \"$SMPROGRAMS\\${PRODUCT_ID}\\$(TEXT_IO_RUN_WITHOUT_SSE2).lnk\" \"$INSTDIR\\Program\\StepMania.exe\"\r\n\r\n\t!ifdef MAKE_OPEN_PROGRAM_FOLDER_SHORTCUT\r\n\t\tCreateShortCut \"$SMPROGRAMS\\${PRODUCT_ID}\\$(TEXT_IO_OPEN_PROGRAM_FOLDER).lnk\" \"$WINDIR\\explorer.exe\" \"$INSTDIR\\\"\r\n\t!endif\r\n\t!ifdef MAKE_OPEN_SETTINGS_FOLDER_SHORTCUT\r\n\t\tCreateShortCut \"$SMPROGRAMS\\${PRODUCT_ID}\\$(TEXT_IO_OPEN_SETTINGS_FOLDER).lnk\" \"$WINDIR\\explorer.exe\" \"$APPDATA\\${PRODUCT_ID}\"\r\n\t!endif\r\n\r\n\t;CreateShortCut \"$SMPROGRAMS\\${PRODUCT_ID}\\$(TEXT_IO_VIEW_STATISTICS).lnk\" \"$INSTDIR\\Program\\tools.exe\" \"--machine-profile-stats\"\r\n\t;CreateShortCut \"$SMPROGRAMS\\${PRODUCT_ID}\\$(TEXT_IO_TOOLS).lnk\" \"$INSTDIR\\Program\\tools.exe\"\r\n\tCreateShortCut \"$SMPROGRAMS\\${PRODUCT_ID}\\$(TEXT_IO_MANUAL).lnk\" \"$INSTDIR\\Manual\\index.html\"\r\n\tCreateShortCut \"$SMPROGRAMS\\${PRODUCT_ID}\\$(TEXT_IO_UNINSTALL).lnk\" \"$INSTDIR\\uninstall.exe\"\r\n\tCreateShortCut \"$SMPROGRAMS\\${PRODUCT_ID}\\$(TEXT_IO_WEB_SITE).lnk\" \"${PRODUCT_URL}\"\r\n\tCreateShortCut \"$SMPROGRAMS\\${PRODUCT_ID}\\$(TEXT_IO_TEXTURE_FONT_GENERATOR).lnk\" \"$INSTDIR\\Program\\Texture Font Generator.exe\"\r\n\t!ifdef MAKE_UPDATES_SHORTCUT\r\n\t\tCreateShortCut \"$SMPROGRAMS\\${PRODUCT_ID}\\$(TEXT_IO_CHECK_FOR_UPDATES).lnk\" \"${UPDATES_URL}\"\r\n\t!endif\r\n\tCreateShortCut \"$INSTDIR\\${PRODUCT_ID}.lnk\" \"$INSTDIR\\Program\\StepMania-SSE2.exe\"\r\n\tCreateShortCut \"$INSTDIR\\${PRODUCT_ID} (non-SSE2).lnk\" \"$INSTDIR\\Program\\StepMania.exe\"\r\n!endif\r\n\r\n\tIfErrors do_error do_no_error\r\n\tdo_error:\r\n\tMessageBox MB_OK|MB_ICONSTOP \"$(TEXT_IO_FATAL_ERROR_INSTALL)\"\r\n\tQuit\r\n\tdo_no_error:\r\n\r\nSectionEnd\r\n\r\n;-------------------------------------------------------------------------------\r\n;Installer Functions\r\n\r\n!ifdef SHOW_AUTORUN\r\nVar hwnd ; Window handle of the custom page\r\n\r\nFunction ShowAutorun\r\n\r\n\t!insertmacro MUI_HEADER_TEXT \"$(TEXT_IO_TITLE)\" \"$(TEXT_IO_SUBTITLE)\"\r\n\r\n\tInstallOptions::initDialog /NOUNLOAD \"$PLUGINSDIR\\custom.ini\"\r\n\t; In this mode InstallOptions returns the window handle so we can use it\r\n\tPop $hwnd\r\n\r\n\tGetDlgItem $1 $HWNDPARENT 1 ; Next button\r\n\tShowWindow $1 0\r\n\r\n!ifdef AUTORUN_SHOW_ONLY_INSTALL\r\n\tGoto show_only_install\r\n!endif\r\n\r\n\tStrCpy $R1 \"$INSTDIR\\uninst.exe\"\r\n\tStrCpy $R2 \"_=\"\r\n\tIfFileExists \"$R1\" show_play_and_reinstall\r\n\tStrCpy $R1 \"$INSTDIR\\uninstall.exe\"\r\n\tStrCpy $R2 \"_?=\"\r\n\tIfFileExists \"$R1\" show_play_and_reinstall\r\n\r\n\tshow_only_install:\r\n\tGetDlgItem $1 $hwnd 1201 ; Second custom control\r\n\tShowWindow $1 0\r\n\tGetDlgItem $1 $hwnd 1202 ; Third custom control\r\n\tShowWindow $1 0\r\n\tGoto done\r\n\r\n\tshow_play_and_reinstall:\r\n\tGetDlgItem $1 $hwnd 1200 ; First custom control\r\n\tShowWindow $1 0\r\n\r\n\tdone:\r\n\r\n\t; Now show the dialog and wait for it to finish\r\n\tInstallOptions::show\r\n\r\n\t; Finally fetch the InstallOptions status value (we don't care what it is though)\r\n\tPop $0\r\n\r\nFunctionEnd\r\n\r\nFunction LeaveAutorun\r\n\r\n\t; At this point the user has either pressed Next or one of our custom buttons\r\n\t; We find out which by reading from the INI file\r\n\tReadINIStr $0 \"$PLUGINSDIR\\custom.ini\" \"Settings\" \"State\"\r\n\tStrCmp $0 1 install\r\n\tStrCmp $0 2 play\r\n\tStrCmp $0 3 install\r\n\tGoto proceed\r\n\r\n\tinstall:\r\n\tCall PreInstall\r\n\tGoTo proceed\r\n\r\n\tplay:\r\n\tExec \"$INSTDIR\\Program\\StepMania-SSE2.exe\"\r\n\tIfErrors play_error\r\n\tquit\r\n\r\n\tplay_error:\r\n\tMessageBox MB_ICONEXCLAMATION \"$(TEXT_IO_COULD_NOT_EXECUTE)\"\r\n\tabort\r\n\r\n\tproceed:\r\n\tGetDlgItem $1 $HWNDPARENT 1 ; Next button\r\n\tShowWindow $1 1\r\n\r\nFunctionEnd\r\n!endif\r\n\r\nFunction PreInstall\r\n\r\n!ifdef INSTALL_PROGRAM_LIBRARIES\r\n\t\t; force uninstall of previous version using NSIS\r\n\t\t; We need to wait until the uninstaller finishes before continuing, since it's possible\r\n\t\t; to click the next button again before the uninstaller's window appears and takes focus.\r\n\t\t; This is tricky: we can't just ExecWait the uninstaller, since it copies off the uninstaller\r\n\t\t; EXE and exec's that (otherwise it couldn't delete itself), so it appears to exit immediately.\r\n\t\t; We need to copy it off ourself, run it with the hidden parameter to tell it it's a copy,\r\n\t\t; and then delete the copy ourself.  There's one more trick: the hidden parameter changed\r\n\t\t; between NSIS 1 and 2: in 1.x it was _=C:\\Foo, in 2.x it's _?=C:\\Foo.  Rename the installer\r\n\t\t; for newer versions, so we can tell the difference: \"uninst.exe\" is the old 1.x uninstaller,\r\n\t\t; \"uninstall.exe\" is 2.x.\r\n\t\tStrCpy $R1 \"$INSTDIR\\uninst.exe\"\r\n\t\tStrCpy $R2 \"_=\"\r\n\t\tIfFileExists \"$R1\" prompt_uninstall_nsis\r\n\t\tStrCpy $R1 \"$INSTDIR\\uninstall.exe\"\r\n\t\tStrCpy $R2 \"_?=\"\r\n\t\tIfFileExists \"$R1\" prompt_uninstall_nsis old_nsis_not_installed\r\n\r\n\t\tprompt_uninstall_nsis:\r\n\t\tIfSilent do_uninstall_nsis\r\n\t\tMessageBox MB_YESNO|MB_ICONINFORMATION \"$(TEXT_IO_UNINSTALL_PREVIOUS)\" IDYES do_uninstall_nsis\r\n\t\tAbort\r\n\r\n\t\tdo_uninstall_nsis:\r\n\t\tGetTempFileName $R3\r\n\t\tCopyFiles /SILENT $R1 $R3\r\n\t\tIfSilent 0 +3\r\n\t\tExecWait '$R3 /S $R2$INSTDIR' $R4 ; uninstall silently\r\n\t\tGoto +2\r\n\t\tExecWait '$R3 $R2$INSTDIR' $R4 ; uninstall prompt\r\n\t\t; Delete the copy of the installer.\r\n\t\tDelete $R3\r\n\r\n\t\t; $R4 is the exit value of the uninstaller.  0 means success, anything else is\r\n\t\t; failure (eg. aborted).\r\n\t\tIntCmp $R4 0 old_nsis_not_installed ; jump if 0\r\n\r\n\t\tMessageBox MB_YESNO|MB_DEFBUTTON2|MB_ICONINFORMATION \"$(TEXT_IO_UNINSTALL_FAILED_INSTALL_ANYWAY)\" IDYES old_nsis_not_installed\r\n\t\tAbort\r\n\r\n\r\n\t\told_nsis_not_installed:\r\n\r\n\t\t; todo: this needs to be updated for DirectX 9.0c\r\n\t\t; HKEY_LOCAL_MACHINE \"Software\\Microsoft\\DirectX\" \"Version\"\r\n\t\t; 9.0c is \"4.09.00.0904\"\r\n\r\n\t\t; Check for DirectX 8.0 (to be moved to the right section later)\r\n\t\t; We only use this for sound.  Actually, I could probably make the sound\r\n\t\t; work with an earlier one; I'm not sure if that's needed or not.  For one\r\n\t\t; thing, forcing people to upgrade drivers is somewhat of a good thing;\r\n\t\t; but upgrading to DX8 if you really don't have to is also somewhat\r\n\t\t; annoying, too ... -g\r\n\t\tReadRegStr $0 HKEY_LOCAL_MACHINE \"Software\\Microsoft\\DirectX\" \"Version\"\r\n\t\tStrCpy $1 $0 2 2 ;  8.1 is \"4.08.01.0810\"\r\n\t\tIntCmpU $1 8 check_subversion old_dx ok\r\n\t\tcheck_subversion:\r\n\t\tStrCpy $1 $0 2 5\r\n\t\tIntCmpU $1 0 ok old_dx ok\r\n\r\n\t\t; We can function without it (using WaveOut), so don't *require* this.\r\n\t\told_dx:\r\n\t!ifdef DIRECTX_81_REDIST_PRESENT\r\n\t\tMessageBox MB_YESNO|MB_ICONINFORMATION \"$(TEXT_IO_INSTALL_DIRECTX)\" IDNO ok\r\n\t\tExec \"DirectX81\\dxsetup.exe\"\r\n\t\tquit\r\n\t\tok:\r\n\t!else\r\n\t\tMessageBox MB_YESNO|MB_ICONINFORMATION \"$(TEXT_IO_DIRECTX_VISIT_MICROSOFT)\" IDNO ok\r\n\t\tExecShell \"\" \"http://www.microsoft.com/directx/\"\r\n\t\tAbort\r\n\t\tok:\r\n\t!endif\r\n!else\r\n\t\t; Check that full version is installed.\r\n\t\tIfFileExists \"$INSTDIR\\Program\\StepMania.exe\" proceed_with_patch\r\n\t\tMessageBox MB_YESNO|MB_ICONINFORMATION \"$(TEXT_IO_FULL_INSTALL_NOT_FOUND)\" IDYES proceed_with_patch\r\n\t\tAbort\r\n\t\tproceed_with_patch:\r\n!endif\r\n\r\nFunctionEnd\r\n\r\nFunction .onInit\r\n\r\n\t; Force show language selection for debugging\r\n\t;!define MUI_LANGDLL_ALWAYSSHOW\r\n\t!insertmacro MUI_LANGDLL_DISPLAY\r\n\r\n\t; determine root drive where Windows was installed, and suggest a\r\n\t; reasonable directory for installation.\r\n\tStrCpy $0 \"$WINDIR\" 2\r\n\tStrCpy $INSTDIR \"$0\\Games\\${PRODUCT_ID}\"\r\n\r\n!ifdef SHOW_AUTORUN\r\n\t;\r\n\t; Extract files for the InstallOptions page\r\n\t;\r\n\t!insertmacro MUI_INSTALLOPTIONS_EXTRACT_AS \"Installer\\custom.ini\" \"custom.ini\"\r\n\t;$PLUGINSDIR will automatically be removed when the installer closes\r\n\tInitPluginsDir\r\n\r\n\tWriteINIStr $PLUGINSDIR\\custom.ini \"Field 1\" \"Text\" \"$(TEXT_IO_INSTALL)\"\r\n\tWriteINIStr $PLUGINSDIR\\custom.ini \"Field 2\" \"Text\" \"$(TEXT_IO_PLAY)\"\r\n\tWriteINIStr $PLUGINSDIR\\custom.ini \"Field 3\" \"Text\" \"$(TEXT_IO_REINSTALL)\"\r\n\r\n\tWriteINIStr $PLUGINSDIR\\custom.ini \"Field 4\" \"Text\" \"${PRODUCT_URL}\"\r\n\tWriteINIStr $PLUGINSDIR\\custom.ini \"Field 4\" \"State\" \"${PRODUCT_URL}\"\r\n\tFile /oname=$PLUGINSDIR\\image.bmp \"Installer\\custom-${PRODUCT_BITMAP}.bmp\"\r\n\tWriteINIStr $PLUGINSDIR\\custom.ini \"Field 5\" \"Text\" $PLUGINSDIR\\image.bmp\t\r\n!else\r\n\r\n\tcall PreInstall\r\n!endif\r\n\r\nFunctionEnd\r\n \r\n;-------------------------------------------------------------------------------\r\n;Uninstaller Section\r\n; todo: update big time\r\n\r\nSection \"Uninstall\"\r\n\r\n\t; add delete commands to delete whatever files/registry keys/etc you installed here.\r\n\tDeleteRegKey HKEY_LOCAL_MACHINE \"SOFTWARE\\${PRODUCT_ID}\"\r\n\tDeleteRegKey HKEY_LOCAL_MACHINE \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${PRODUCT_ID}\"\r\n\r\n!ifdef INSTALL_EXTERNAL_PCKS | INSTALL_INTERNAL_PCKS\r\n\tRMDir /r \"$INSTDIR\\pcks\"\r\n!endif\r\n\r\n!ifdef ASSOCIATE_SMZIP\r\n\tDeleteRegKey HKEY_LOCAL_MACHINE \"SOFTWARE\\Classes\\smzipfile\"\r\n\tDeleteRegKey HKEY_LOCAL_MACHINE \"SOFTWARE\\Classes\\.smzip\"\r\n!endif\r\n\r\n!ifdef ASSOCIATE_SMURL\r\n\tDeleteRegKey HKEY_LOCAL_MACHINE \"SOFTWARE\\Classes\\stepmania\"\r\n!endif\r\n\r\n!ifdef INSTALL_NON_PCK_FILES\r\n\tDelete \"$INSTDIR\\Announcers\\instructions.txt\"\r\n\tRMDir \"$INSTDIR\\Announcers\"\r\n\r\n\tDelete \"$INSTDIR\\BGAnimations\\instructions.txt\"\r\n\tRMDir \"$INSTDIR\\BGAnimations\"\r\n\r\n\tRMDir /r \"$INSTDIR\\Cache\"\r\n\r\n\tDelete \"$INSTDIR\\CDTitles\\Instructions.txt\"\r\n\tRMDir \"$INSTDIR\\CDTitles\"\r\n\r\n\tRMDir /r \"$INSTDIR\\Characters\\default\"\r\n\tRMDir \"$INSTDIR\\Characters\"\r\n\r\n\tRMDir /r \"$INSTDIR\\Cache\"\r\n\r\n\tDelete \"$INSTDIR\\Packages\\instructions.txt\"\r\n\tRMDir \"$INSTDIR\\Packages\"\r\n\r\n\tDelete \"$INSTDIR\\Courses\\instructions.txt\"\r\n\tRMDir /r \"$INSTDIR\\Courses\\Default\"\r\n\tRMDir \"$INSTDIR\\Courses\"\r\n\r\n\tDelete \"$INSTDIR\\NoteSkins\\instructions.txt\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\common\\default\"\r\n\tRMDir \"$INSTDIR\\NoteSkins\\common\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\dance\\default\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\dance\\Delta\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\dance\\midi-note\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\dance\\midi-note-3d\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\dance\\midi-routine-p1\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\dance\\midi-routine-p2\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\dance\\midi-solo\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\dance\\midi-vivid\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\dance\\retro\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\dance\\retrobar\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\dance\\retrobar-splithand_whiteblue\"\r\n\tRMDir \"$INSTDIR\\NoteSkins\\dance\"\r\n\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\pump\\cmd\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\pump\\cmd-routine-p1\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\pump\\cmd-routine-p2\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\pump\\complex\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\pump\\default\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\pump\\delta\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\pump\\delta-note\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\pump\\delta-routine-p1\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\pump\\delta-routine-p2\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\pump\\frame5p\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\pump\\newextra\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\pump\\rhythm\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\pump\\simple\"\r\n\tRMDir \"$INSTDIR\\NoteSkins\\pump\"\r\n\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\kb7\\default\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\kb7\\orbital\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\kb7\\retrobar\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\kb7\\retrobar-iidx\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\kb7\\retrobar-o2jam\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\kb7\\retrobar-razor\"\r\n\tRMDir /r \"$INSTDIR\\NoteSkins\\kb7\\retrobar-razor_o2\"\r\n\tRMDir \"$INSTDIR\\NoteSkins\\kb7\"\r\n\r\n\t; we don't currently install para noteskins...\r\n\t;RMDir /r \"$INSTDIR\\NoteSkins\\para\\default\"\r\n\t;RMDir \"$INSTDIR\\NoteSkins\\para\"\r\n\t;RMDir \"$INSTDIR\\NoteSkins\"\r\n\r\n\tRMDir /r \"$INSTDIR\\BackgroundEffects\"\r\n\r\n\tRMDir /r \"$INSTDIR\\BackgroundTransitions\"\r\n\r\n\tDelete \"$INSTDIR\\RandomMovies\\instructions.txt\"\r\n\tRMDir \"$INSTDIR\\RandomMovies\"\r\n\r\n\tDelete \"$INSTDIR\\Songs\\Instructions.txt\"\r\n\tRMDir \"$INSTDIR\\Songs\"\t; will delete only if empty\r\n\r\n\tDelete \"$INSTDIR\\Themes\\instructions.txt\"\r\n\tRMDir /r \"$INSTDIR\\Themes\\_fallback\"\r\n\tRMDir /r \"$INSTDIR\\Themes\\_portKit-sm4\"\r\n\tRMDir /r \"$INSTDIR\\Themes\\default\"\r\n\tRMDir \"$INSTDIR\\Themes\"\r\n\r\n\tDelete \"$INSTDIR\\Data\\*.*\"\r\n\tRMDir \"$INSTDIR\\Data\"\r\n!endif\r\n\r\n!ifdef INSTALL_EXECUTABLES\r\n\tDelete \"$INSTDIR\\Program\\StepMania.exe\"\r\n\tDelete \"$INSTDIR\\Program\\StepMania.vdi\"\r\n\tDelete \"$INSTDIR\\Program\\StepMania-SSE2.exe\"\r\n\tDelete \"$INSTDIR\\Program\\StepMania-SSE2.vdi\"\r\n\tDelete \"$INSTDIR\\Program\\tools.exe\"\r\n\tDelete \"$INSTDIR\\Program\\Texture Font Generator.exe\"\r\n!endif\r\n!ifdef ASSOCIATE_SMZIP\r\n\tCall un.RefreshShellIcons\r\n!endif\r\n!ifdef ASSOCIATE_SMURL\r\n\tCall un.RefreshShellIcons\r\n!endif\r\n!ifdef INSTALL_PROGRAM_LIBRARIES\r\n\tDelete \"$INSTDIR\\Program\\mfc71.dll\"\r\n\tDelete \"$INSTDIR\\Program\\msvcr71.dll\"\r\n\tDelete \"$INSTDIR\\Program\\msvcp71.dll\"\r\n\tDelete \"$INSTDIR\\Program\\msvcr80.dll\"\r\n\tDelete \"$INSTDIR\\Program\\msvcp80.dll\"\r\n\tDelete \"$INSTDIR\\Program\\msvcr90.dll\"\r\n\tDelete \"$INSTDIR\\Program\\msvcp90.dll\"\r\n\t; FFmpeg and related\r\n\tDelete \"$INSTDIR\\Program\\avcodec-53.dll\"\r\n\tDelete \"$INSTDIR\\Program\\avcodec-52.dll\"\r\n\tDelete \"$INSTDIR\\Program\\avdevice-52.dll\"\r\n\tDelete \"$INSTDIR\\Program\\avformat-53.dll\"\r\n\tDelete \"$INSTDIR\\Program\\avformat-52.dll\"\r\n\tDelete \"$INSTDIR\\Program\\avutil-51.dll\"\r\n\tDelete \"$INSTDIR\\Program\\avutil-50.dll\"\r\n\tDelete \"$INSTDIR\\Program\\swscale-2.dll\"\r\n\tDelete \"$INSTDIR\\Program\\swscale-0.dll\"\r\n\t; others\r\n\tDelete \"$INSTDIR\\Program\\dbghelp.dll\"\r\n\tDelete \"$INSTDIR\\Program\\jpeg.dll\"\r\n\tDelete \"$INSTDIR\\Program\\zlib1.dll\"\r\n\tRMDir \"$INSTDIR\\Program\"\r\n\r\n\tDelete \"$INSTDIR\\Docs\\Licenses.txt\"\r\n\tRMDir /r \"$INSTDIR\\Manual\"\r\n!endif\r\n\r\n\tDelete \"$INSTDIR\\log.txt\"\r\n\tDelete \"$INSTDIR\\info.txt\"\r\n\tDelete \"$INSTDIR\\crashinfo.txt\"\r\n\tDelete \"$INSTDIR\\${PRODUCT_ID}.lnk\"\r\n\tDelete \"$INSTDIR\\${PRODUCT_ID} (non-SSE2).lnk\"\r\n\r\n\tRMDir \"$INSTDIR\"\t; will delete only if empty\r\n\r\n\tSetShellVarContext current\r\n\r\n\t; kill shortcuts\r\n\t!ifdef MAKE_DESKTOP_SHORTCUT\r\n\t\tDelete \"$DESKTOP\\$(TEXT_IO_RUN).lnk\"\r\n\t!endif\r\n\t!ifdef MAKE_DESKTOP_SHORTCUT\r\n\t\tDelete \"$DESKTOP\\$(TEXT_IO_RUN).lnk\"\r\n\t!endif\r\n\r\n\tDelete '\"$SMPROGRAMS\\${PRODUCT_ID}\\$(TEXT_IO_RUN).lnk\"'\r\n\tDelete '\"$SMPROGRAMS\\${PRODUCT_ID}\\$(TEXT_IO_RUN_WITHOUT_SSE2).lnk\"'\r\n\r\n\t!ifdef MAKE_OPEN_PROGRAM_FOLDER_SHORTCUT\r\n\t\tDelete '\"$SMPROGRAMS\\${PRODUCT_ID}\\$(TEXT_IO_OPEN_PROGRAM_FOLDER).lnk\"'\r\n\t!endif\r\n\t!ifdef MAKE_OPEN_SETTINGS_FOLDER_SHORTCUT\r\n\t\tDelete '\"$SMPROGRAMS\\${PRODUCT_ID}\\$(TEXT_IO_OPEN_SETTINGS_FOLDER).lnk\"'\r\n\t!endif\r\n\r\n\t;Delete '\"$SMPROGRAMS\\${PRODUCT_ID}\\$(TEXT_IO_VIEW_STATISTICS).lnk\"'\r\n\t;Delete '\"$SMPROGRAMS\\${PRODUCT_ID}\\$(TEXT_IO_TOOLS).lnk\"'\r\n\tDelete '\"$SMPROGRAMS\\${PRODUCT_ID}\\$(TEXT_IO_MANUAL).lnk\"'\r\n\tDelete '\"$SMPROGRAMS\\${PRODUCT_ID}\\$(TEXT_IO_UNINSTALL).lnk\"'\r\n\tDelete '\"$SMPROGRAMS\\${PRODUCT_ID}\\$(TEXT_IO_WEB_SITE).lnk\"'\r\n\tDelete '\"$SMPROGRAMS\\${PRODUCT_ID}\\$(TEXT_IO_TEXTURE_FONT_GENERATOR).lnk\"'\r\n\t!ifdef MAKE_UPDATES_SHORTCUT\r\n\t\tDelete '\"$SMPROGRAMS\\${PRODUCT_ID}\\$(TEXT_IO_CHECK_FOR_UPDATES).lnk\"'\r\n\t!endif\r\n\tDelete '\"$INSTDIR\\${PRODUCT_ID}.lnk\"'\r\n\tDelete '\"$INSTDIR\\${PRODUCT_ID} (non-SSE2).lnk\"'\r\n\r\n\t; I'm being paranoid here:\r\n\tDelete '\"$SMPROGRAMS\\${PRODUCT_ID}\\*.*\"'\r\n\tRMDir '\"$SMPROGRAMS\\${PRODUCT_ID}\"'\r\n\r\n\tDelete \"$INSTDIR\\Uninstall.exe\"\r\n\r\n\tDeleteRegKey /ifempty HKEY_LOCAL_MACHINE \"SOFTWARE\\${PRODUCT_ID}\"\r\n\r\nSectionEnd\r\n\r\n;-------------------------------------------------------------------------------\r\n;Uninstaller Functions\r\n\r\nFunction un.onInit\r\n\r\n\t!insertmacro MUI_UNGETLANGUAGE\r\n  \r\nFunctionEnd\r\n"
        }
      ]
    }
  ]
}