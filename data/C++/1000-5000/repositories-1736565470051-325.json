{
  "metadata": {
    "timestamp": 1736565470051,
    "page": 325,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "actor-framework/actor-framework",
      "stars": 3222,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".ci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 1.0927734375,
          "content": "# On community clusters, we can use up to 8 CPUs and up to 24 GB of memory.\n# However, using less usually means we get workers more quickly.\nresources_template: &RESOURCES_TEMPLATE\n  cpu: 4\n  memory: 16GB\n\n# Run only when pushing to main or in PRs.\nbranch_filter: &BRANCH_FILTER\n  only_if: >\n    $CIRRUS_PR != '' ||\n    $CIRRUS_BRANCH == 'main'\n\n# FreeBSD 13.3 EOL: January 2026\nfreebsd13_task:\n  freebsd_instance:\n    image_family: freebsd-13-3\n    << : *RESOURCES_TEMPLATE\n  prepare_script: .ci/freebsd-13/prepare.sh\n  build_script: .ci/run.sh build .ci/debug-flags.cmake . build\n  test_script: .ci/run.sh test build net.udp_datagram_socket\n  always:\n    robot_artifacts:\n      path: \"build/robot-output/**\"\n  << : *BRANCH_FILTER\n\n# FreeBSD 14 EOL: November 2028\nfreebsd14_task:\n  freebsd_instance:\n    image_family: freebsd-14-0\n    << : *RESOURCES_TEMPLATE\n  prepare_script: .ci/freebsd-14/prepare.sh\n  build_script: .ci/run.sh build .ci/debug-flags.cmake . build\n  test_script: .ci/run.sh test build net.udp_datagram_socket\n  always:\n    robot_artifacts:\n      path: \"build/robot-output/**\"\n  << : *BRANCH_FILTER\n\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.419921875,
          "content": "---\nAccessModifierOffset: -2\nAlignAfterOpenBracket: Align\nAlignEscapedNewlines: Right\nAlignOperands: true\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: None\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: Yes\nBinPackArguments: true\nBinPackParameters: true\nBreakBeforeBinaryOperators: All\nBreakBeforeBraces: Attach\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializers: BeforeColon\nBreakInheritanceList: BeforeColon\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 2\nContinuationIndentWidth: 2\nCpp11BracedListStyle: true\nFixNamespaceComments: true\nIncludeBlocks: Regroup\n# Include order: Main header, CAF headers: test/io/openssl/net/core, 3rd-party\n# headers, standard headers.\nIncludeCategories:\n  - Regex: 'caf/test/[[:alnum:]/_.-]+'\n    Priority: 1\n  - Regex: 'caf/io/[[:alnum:]/_.-]+'\n    Priority: 2\n  - Regex: 'caf/openssl/[[:alnum:]/_.-]+'\n    Priority: 3\n  - Regex: 'caf/net/[[:alnum:]/_.-]+'\n    Priority: 4\n  - Regex: 'caf/[[:alnum:]/_.-]+'\n    Priority: 5\n  - Regex: '^<[a-z0-9_]+>$'\n    Priority: 7\n  - Regex: '.*'\n    Priority: 6\nIncludeIsMainRegex: \"(test)?$\"\nIndentCaseLabels: true\nIndentPPDirectives: AfterHash\nIndentWidth: 2\nIndentWrappedFunctionNames: false\nKeepEmptyLinesAtTheStartOfBlocks: false\nLanguage: Cpp\nMacroBlockBegin: \"^BEGIN_STATE$|CAF_BEGIN_TYPE_ID_BLOCK\"\nMacroBlockEnd: \"^END_STATE$|CAF_END_TYPE_ID_BLOCK\"\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nNamespaceMacros: [\"SUITE\", \"WITH_FIXTURE\"]\nPenaltyBreakAssignment: 25\nPenaltyBreakBeforeFirstCallParameter: 50\nPenaltyReturnTypeOnItsOwnLine: 25\nPointerAlignment: Left\nReflowComments: true\nSortIncludes: true\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: true\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCpp11BracedList: false\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: ControlStatements\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles: false\nSpacesInContainerLiterals: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard: Cpp11\nUseTab: Never\n---\nLanguage: Proto\nDisableFormat: true\n...\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 0.2509765625,
          "content": "---\nChecks: >\n  -*,\n  bugprone-*,\n  -bugprone-easily-swappable-parameters,\n  -bugprone-macro-parentheses,\n  -bugprone-forward-declaration-namespace,\n  -bugprone-branch-clone,\nWarningsAsErrors: ''\nHeaderFilterRegex: '/caf/'\nAnalyzeTemporaryDtors: false\n...\n\n"
        },
        {
          "name": ".cppcheck-suppressions",
          "type": "blob",
          "size": 2.6171875,
          "content": "// having an explicit constructor for attachable would\n// make it harder to use and its a library internal anyways\nnoExplicitConstructor:libcaf_core/caf/attachable.hpp\n\n// cppcheck complains about padding1 and padding2 not\n// being initialized, which is silly (never used anywhere)\nuninitMemberVar:libcaf_io/caf/io/basp/header.hpp\n\n// converting raw pointers to intrusive pointers is\n// a common operation (e.g. getting a smart pointer to self)\nnoExplicitConstructor:libcaf_core/caf/intrusive_ptr.hpp\nnoExplicitConstructor:libcaf_core/caf/weak_intrusive_ptr.hpp\n\n// cppcheck complains about `node_id(const invalid_node_id_t&)`,\n// which must not be explicit because `invalid_node_id_t` would\n// be completely useless otherwise, the same is true for\n// - `message_id(invalid_message_id_t)`\nnoExplicitConstructor:libcaf_core/caf/node_id.hpp\nnoExplicitConstructor:libcaf_core/caf/message_id.hpp\n\n// the ctor `duration(std::chrono::duration<Rep, Period> d)`\n// is not explicit on purpose\nnoExplicitConstructor:libcaf_core/caf/duration.hpp\n\n// making this explicit only makes API worse\nnoExplicitConstructor:libcaf_core/caf/detail/scope_guard.hpp\n\n// `operator=(const ref_counted&)` does not assign `rc_`\n// on purpose because this would corrupt reference counting\noperatorEqVarError:libcaf_core/src/ref_counted.cpp\n\n// cppcheck complains about not initializing the pad members\nuninitMemberVar:libcaf_core/caf/detail/double_ended_queue.hpp\n\n// making the policy functions static is technically possible,\n// but conceptionally questionable\nfunctionStatic:libcaf_core/caf/policy/work_stealing.hpp\n\n// 9 false positives\n*:libcaf_core/caf/optional.hpp\n\n// in theory always true, but the unit test still needs to check\nknownConditionTrueFalse:libcaf_core/test/optional.cpp\n\n// ignore warnings from any 3rd party module\n*:*/third_party/*\n\n// 6 false positives\n*:libcaf_core/caf/detail/limited_vector.hpp\n\n// `test_struct::test_value` is unused since this file tests `announce`\nunusedStructMember:libcaf_io/test/uniform_type.cpp\n\n// `exit_reason::as_string` is unused in this .cpp file, but part of the API,\n// same is true for other falsely reported unused functions\nunusedFunction:libcaf_core/src/exit_reason.cpp\nunusedFunction:libcaf_core/src/shared_spinlock.cpp\nunusedFunction:libcaf_io/src/interfaces.cpp\nunusedFunction:libcaf_io/src/max_msg_size.cpp\n\n// making only some overloads of `abstract_uniform_type_info::eq`\n// static fails on MSVC\nfunctionStatic:bcaf_core/caf/abstract_uniform_type_info.hpp\n\n// functions are used in a macro in opencl/smart_ptr.hpp\nunusedFunction:libcaf_opencl/src/global.cpp\n\n// suppress false positives\nunusedStructMember:libcaf_core/test/serialization.cpp\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.197265625,
          "content": ".make-release-steps.bash\n.push-doxygen-steps.bash\nMakefile\nbin/*\nbuild/*\ndoxygen-log.txt\nhtml/*\nmanual/examples\nmanual/html/*\nmanual/libcaf_core\nmanual/libcaf_io\nmanual/libcaf_net\nmanual/libcaf_openssl\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.2958984375,
          "content": "# Read the Docs configuration file for Sphinx projects\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\nversion: 2\n\nbuild:\n  os: ubuntu-22.04\n  tools: \n    python: \"3.12\"\n\npython: \n  install:\n  - requirements: manual/requirements.txt\n\nsphinx:\n  configuration: manual/conf.py\n"
        },
        {
          "name": ".typos-config.toml",
          "type": "blob",
          "size": 0.2001953125,
          "content": "[files]\nextend-exclude = [\"*.pem\", \"libcaf_net/test/pem.cpp\", \"Jenkinsfile\"]\n\n[default.extend-words]\nPN = \"PN\"\nYout = \"Yout\"\naout = \"aout\"\ncaf = \"caf\"\nws = \"ws\"\nfals = \"fals\"\nparametrized = \"parametrized\"\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 70.47265625,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file. The format\nis based on [Keep a Changelog](https://keepachangelog.com).\n\n## Unreleased\n\n### Added\n\n- New flow operator: `retry`.\n\n### Fixed\n\n- Fix build error in `caf-net` when building with C++23 (#1919).\n- Restructure some implementation details of `intrsuive_ptr` (no functional\n  changes) to make it easier for `clang-tidy` to analyze the code. This fixes a\n  false positive reported by `clang-tidy` in some use cases where `clang-tidy`\n  would falsely report a use-after-free bug.\n- Closing a WebSocket connection now properly sends a close frame to the client\n  before closing the TCP connection (#1938).\n- Fix a build error in the unit tests when building with C++20 and setting\n  `CAF_USE_STD_FORMAT` to `ON` (#1963).\n- The functions `run_scheduled`, `run_scheduled_weak`, `run_delayed` and\n  `run_delayed_weak` now properly accept move-only callback types.\n\n## [1.0.2] - 2024-10-30\n\n### Changed\n\n- Tests, scenarios and outlines are now automatically put into the anonymous\n  namespace to avoid name clashes with other tests. This removes the need for\n  users to manually put their tests into an anonymous namespace.\n- The `SUITE` macro of the unit test framework can now be used multiple times in\n  a single compilation unit.\n\n### Fixed\n\n- When using the HTTP client API, the client now properly closes the connection\n  after receiving a response even if the server would keep the connection open.\n- When using the WebSocket client API, the socket could close prematurely when\n  leaving `main` right after setting up the connection, even when starting an\n  actor in `start`. This was due to CAF not holding onto a strong reference to\n  the connection object (and thus the actor) at all times (#1918).\n- When using log statements in unit tests, e.g. `log::test::debug`, the output\n  will now be rendered by default even when not using the deterministic fixture.\n- Registering a custom option of type `size_t` will no longer print\n  `<dictionary>` as type hint in the `--help` output. Instead, CAF will print\n  either `uint32_t` or `uint64_t`, depending on the platform.\n- Fix handling of unicode escaping (e.g. `\\u00E4`) in the JSON parser (#1937).\n\n## [1.0.1] - 2024-07-23\n\n### Fixed\n\n- Fix a compiler error when using `spawn_client` on the I/O middleman (#1900).\n- An unfortunate bug prevented the auto-detection of `std::format` when building\n  CAF with C++20 or later. This bug has been fixed, alongside issues with the\n  actual `std::format`-based implementation. However, since selecting a\n  different backend for `println` and the log output generation breaks the ABI,\n  we have decided to ship the `std::format`-based implementation only as opt-in\n  at this point. Users can enable it by setting the CMake option\n  `CAF_USE_STD_FORMAT`.\n- Fix cleanup in the consumer adapter. This component connects actors to SPSC\n  buffers. If the SPSC buffer was closed by the producer, the consumer adapter\n  failed to properly dispose pending actions.\n- Fix a `nullptr`-dereference in `scheduled_actor::run_actions` if a delayed\n  action calls `self->quit()` (#1920).\n\n### Changed\n\n- When disposing a connection acceptor, CAF no longer generates a log event with\n  severity `error`. Instead, it will log the event with severity `debug`.\n- The `http::router` member function `shutdown` has been deprecated and renamed to\n  `abort_and_shutdown` to better reflect its functionality.\n\n## [1.0.0] - 2024-06-26\n\n### Added\n\n- The actor system now offers a `println` convenience function for printing to\n  the console. When building CAF with C++20 enabled, the function uses\n  `std::format` internally. Otherwise, it falls back to the compatibility layer\n  with the same syntax. The function also recognizes `inspect` overloads for\n  custom types. Any printing done by this function is thread-safe. The function\n  is available on actors in order to allow `self->println(\"...\")`.\n- Actors have a new `monitor` member function that takes an actor handle and a\n  callback. The callback will run when the monitored actor terminates (in the\n  context of the monitoring actor). The function returns a `monitorable` object\n  that can be used to cancel the monitoring. This mechanism replaces the old\n  approach that relied on `down_msg` handlers in event-based actors (nothing\n  changes for blocking actors).\n- Event-based actors can now set an idle timeout via `set_idle_handler`. The\n  timeout fires when the actor receives no messages for a specified duration.\n  This new feature replaces the `after(...) >> ...` syntax and allows actors to\n  specify what kind of reference CAF will hold to that actor while it is waiting\n  for the timeout (strong or weak) and whether to trigger the timeout once or\n  repeatedly.\n- New flow operators: `buffer`, `sample`, `start_with`,\n  `on_backpressure_buffer`, `on_error_return`, `on_error_return_item`, and\n  `on_error_complete`.\n- The unit test framework now offers the new utility (template) class\n  `caf::test::approx` for approximate comparisons.\n\n### Fixed\n\n- Fix building CAF with shared libraries (DLLs) enabled on Windows (#1715).\n- The `actor_from_state` utility now evaluates spawn options such as `linked`\n  (#1771). Previously, passing this option to `actor_from_state` resulted in a\n  compiler error.\n- Sending a message to an already terminated actor from a `function_view` now\n  properly reports an error (#1801).\n- URIs now support support username and password in the user-info sub-component\n  (#1814). Consequently, the `userinfo` field of the URI class now has two\n  member variables: `name` and (an optional) `password`. Further, the `userinfo`\n  field is now optional in order to differentiate between an empty user-info and\n  no user-info at all.\n- The parser for reading JSON and configuration files now properly handles\n  Windows-style line endings (#1850).\n- Calling `force_utc` on a `caf::chrono::datetime` object now properly applies\n  the UTC offset. Previously, the function would shift the time into the wrong\n  direction (#1860).\n- Fix a regression in the work-stealing scheduler that prevented workers from\n  stealing work from other workers in the relaxed polling state (#1866).\n- Fix handling of integer or boolean values as keys as well as lists as values\n  in dictionaries when using the `json_builder`.\n- Calling `caf::chrono::datetime::to_local_time` will now properly interpret the\n  stored time as local time if no UTC offset is present.\n\n### Removed\n\n- The obsolete CAF types `caf::string_view`, `caf::byte`, `caf::optional`,\n  `caf::replies_to`, and `caf::flow::item_publisher`.\n- The obsolete `operator*` for \"combining\" two actor handles.\n- All `to_stream` and `to_typed_stream` member functions on actors (they are\n  available on `caf::flow::observable` directly).\n- The `group` API has been removed entirely.\n- The experimental APIs for actor profiling and inserting tracing data have been\n  removed. Neither API has a clear use case at the moment and since we have not\n  received any feedback on either API, we have decided to remove them to\n  simplify the code base.\n- The `actor_system_config` no longer contains special member variables for the\n  OpenSSL module. The module now uses the regular configuration system.\n- The `caf-run` tool no longer ships with CAF. The tool has not been maintained\n  for a long time, has never been thoroughly tested, and has no documentation.\n- The `actor_system_config` no longer contains the `logger_factory` setter. We\n  might reintroduce this feature in the future, but we think the new `logger`\n  interface class is not yet stable enough to expose it to users and to allow\n  custom logger implementations.\n\n\n### Changed\n\n- When using the caf-net module, users may enable Prometheus metric export by\n  setting the configuration option `caf.net.prometheus-http`. The option has the\n  following fields: `port`, `address`, `tls.key-file`, and `tls.cert-file`. When\n  setting the TLS options, the server will use HTTPS instead of HTTP.\n- Sending messages from cleanup code (e.g., the destructor of a state class) is\n  now safe. Previously, doing so could cause undefined behavior by forming a\n  strong reference to a destroyed actor.\n- Actors will now always send an error message if an incoming message triggered\n  an unhandled exception. Previously, CAF would only send an error message if\n  the incoming message was a request (#1684).\n- Stateful actors now provide a getter function `state()` instead of declaring a\n  public `state` member variable. This change enables more flexibility in the\n  implementation for future CAF versions.\n- Passing a class to `spawn_inactive` is now optional and defaults to\n  `event_based_actor`. The next major release will remove the class parameter\n  altogether.\n- Event-based actors can now handle types like `exit_msg` and `error` in their\n  regular behavior.\n- The `check_eq` and `require_eq` functions in the unit test framework now\n  prohibit comparing floating-point numbers with `==`. Instead, users should use\n  new `approx` utility class.\n- The member functions `send`, `scheduled_send`, `delayed_send`, `request` and\n  `delegate` are deprecated in favor of the new `mail` API.\n- The free functions `anon_send`, `delayed_anon_send`, `scheduled_anon_send` are\n  deprecated in favor of the new `anon_mail` API.\n\n### Deprecated\n\n- Using `spawn_inactive` now emits a deprecation warning when passing a class\n  other than `event_based_actor`.\n- The experimental `actor_pool` API has been deprecated. The API has not seen\n  much use and is too cumbersome.\n- The printing interface via `aout` has been replaced by the new `println`\n  function. The old interface is now deprecated and will be removed in the next\n  major release.\n- Calling `monitor` with a single argument is now deprecated for event-based\n  actors. Users should always provide a callback as the second argument. Note\n  that nothing changes for blocking actors. They still call `monitor` and then\n  receive a `down_msg` in their mailbox.\n- The function `set_down_handler` is deprecated for the same reasons as\n  `monitor`: please use the new `monitor` API with a callback instead.\n- The spawn flag `monitored` is deprecated as well and users should call\n  `monitor` directly instead.\n- Constructing a behavior with `after(...) >> ...` has been deprecated in favor\n  of the new `set_idle_handler` function. Note that blocking actors may still\n  pass a timeout via `after(...)` to `receive` functions. The deprecation only\n  targets event-based actors.\n- The use case for `function_view` is covered by the new feature on blocking\n  actors that allows calling `receive` with no arguments. Hence, `function_view`\n  becomes obsolete and is deprecated.\n- The `set_default_handler` member function on event-based actors is now\n  deprecated. Instead, users should use a handler for `message` in their\n  behavior as a catch-all. For skipping messages, CAF now includes a new\n  `mail_cache` class that allows explicitly stashing messages for later\n  processing.\n- Special-purpose handlers for messages like `exit_msg` and `error` are now\n  deprecated. Instead, users should handle these messages in their regular\n  behavior.\n- The legacy testing framework in `caf/test/unit_test.hpp` is now deprecated and\n  the header (as well as headers that build on top it such as\n  `caf/test/dsl.hpp`) will be removed in the next major release. Users should\n  migrate to the new testing framework.\n\n## [0.19.5] - 2024-01-08\n\n### Added\n\n- An `observable` that runs on an actor can now be converted to a `stream` or\n  `typed_stream` directly by calling `to_stream` or `to_typed_stream` on it.\n- New `caf::async` API to read text and binary files asynchronously in a\n  separate thread. The contents of the files are consumed as flows (#1573).\n- The class `caf::unordered_flat_map` now has the `contains` and\n  `insert_or_assign` member functions.\n- CAF now supports setting custom configuration options via environment\n  variables. The new priority order is: CLI arguments, environment variables,\n  configuration files, and default values. The environment variable name is\n  the full name of the option in uppercase, with all non-alphanumeric\n  characters replaced by underscores. For example, the environment variable\n  `FOO_BAR` sets the option `foo.bar`. Users may also override the default\n  name by putting the environment name after the short names, separated by a\n  comma. For example, `opt_group{custom_options_, \"foo\"}.add(\"bar,b,MY_BAR\")`\n  overrides the default environment variable name `FOO_BAR` with `MY_BAR`.\n- The formatting functions from `caf/chrono.hpp` now support precision for the\n  fractional part of the seconds and an option to print with a fixed number of\n  digits.\n- The new class `caf::chunk` represents an immutable sequence of bytes with a\n  fixed size. Unlike `std::span`, a `chunk` owns its data and can be (cheaply)\n  copied and moved.\n- Users can now convert state classes with a `make_behavior` member function\n  into a \"function-based actor\" via the new `actor_from_state` utility. For\n  example, `sys.spawn(caf::actor_from_state<my_state>, args...)` creates a new\n  actor that initializes its state with `my_state{args...}` and then calls\n  `make_behavior()` on the state object to obtain the initial behavior.\n- The `aout` utility received a `println` member function that adds a formatted\n  line to the output stream. The function uses the same formatting backend as\n  the logging API.\n\n### Fixed\n\n- The class `caf::test::outline` is now properly exported from the test module.\n  This fixes builds with dynamic linking against `libcaf_test`.\n- Fix a crash with the new deterministic test fixture when cleaning up actors\n  with stashed messages (#1589).\n- When using `request(...).await(...)`, the actor no longer suspends handling of\n  system messages while waiting for the response (#1584).\n- Fix compiler errors and warnings for GCC 13 in C++23 mode (#1583).\n- Fix encoding of chunk size in chunked HTTP responses (#1587).\n- Fix leak when using `spawn_inactive` and not launching the actor explicitly\n  (#1597).\n- Fix a minor bug in the deserialization of messages that caused CAF to allocate\n  more storage than necessary (#1614).\n- Add missing `const` to `publisher<T>::observe_on`.\n- All `observable` implementations now properly call `on_subscribe` on their\n  subscriber before calling `on_error`.\n- The function `config_value::parse` now properly handles leading and trailing\n  whitespaces.\n- Comparing two  `caf::unordered_flat_map` previously relied on the order of\n  elements in the map and thus could result in false negatives. The new\n  implementation is correct and no longer relies on the order of elements.\n- When using `--dump-config`, CAF now properly renders nested dictionaries.\n  Previously, dictionaries in lists missed surrounding braces.\n- CAF now parses `foo.bar = 42` in a config file as `foo { bar = 42 }`, just as\n  it does for CLI arguments.\n- Fix shutdown logic for actors with open streams. This resolves an issue where\n  actors would not terminate correctly after receiving an exit message (#1657).\n- Fix compilation error on MSVC when building `caf_test` with shared libraries\n  enabled (#1669).\n- Calling `delay_for_fn` on a flow coordinator now returns a `disposable` in\n  order to be consistent with `delay_for` and `delay_until`.\n- Calling `dispose` on a server (e.g. an HTTP server) now properly closes all\n  open connections.\n- Fix static assert in `expected` when calling `transform` on an rvalue with a\n  function object that only accepts an rvalue.\n- The function `caf::net::make_pipe` no longer closes read/write channels of the\n  connected socket pair on Windows. This fixes a bug where the pipe would close\n  after two minutes of inactivity.\n\n### Changed\n\n- Calling `to_string` on any of CAF's enum types now represents the enum value\n  using the short name instead of the fully qualified name. For example,\n  `to_string(sec::none)` now returns `\"none\"` instead of `\"caf::sec::none\"`.\n  Accordingly, `from_string` now accepts the short name (in additional to the\n  fully qualified name).\n- Log format strings no longer support `%C`. CAF still recognizes this option\n  but it will always print `null`.\n- The function `caf::telemetry::counter::inc` now allows passing 0 as an\n  argument. Previously, passing 0 triggered an assertion when building CAF with\n  runtime checks enabled.\n- Calling `dispose` on a flow subscription now calls `on_error(sec::disposed)`\n  on the observer. Previously, CAF would simply call `on_complete()` on the\n  observer, making it impossible to distinguish between a normal completion and\n  disposal.\n- The `caf::logger` received a complete overhaul and became an interface class.\n  By turning the class into an interface, users can now install custom logger\n  implementations. CAF uses the previous implementation as the default logger if\n  no custom logger is configured. To install a logger, users can call\n  `cfg.logger_factory(my_logger_factory)` on the `actor_system_config` before\n  constructing the `actor_system`. The logger factory is a function object with\n  signature `caf::intrusive_ptr<caf::logger>(caf::actor_system&)`. Furthermore,\n  log messages are now formatted using `std::format` when compiling CAF with\n  C++20 or later. Otherwise, CAF will fall back to a minimal formatting\n  implementation with compatible syntax. The logging API will also automatically\n  convert any type with a suitable `inspect` overload to a string if the type is\n  not recognized by `format`.\n\n### Deprecated\n\n- Calling `to_stream` or `to_typed_stream` on an actor is now deprecated. Simply\n  call `to_stream` or `to_typed_stream` directly on the `observable` instead.\n\n### Removed\n\n- The implementation of `operator<` for `caf::unordered_flat_map` was broken and\n  relied on the order of elements in the map. We have removed it, since it has\n  never worked correctly and a correct implementation would be too expensive.\n\n## [0.19.4] - 2023-09-29\n\n### Fixed\n\n- Stream batches are now properly serialized and deserialized when subscribing\n  to a stream from a remote node (#1566).\n\n## [0.19.3] - 2023-09-20\n\n### Added\n\n- The class `caf::telemetry::label` now has a new `compare` overload that\n  accepts a `caf::telemetry::label_view` to make the interface of the both\n  classes symmetrical.\n- The template class `caf::dictionary` now has new member functions for erasing\n  elements.\n- The CLI argument parser now supports a space separator when using long\n  argument names, e.g., `--foo bar`. This is in addition to the existing\n  `--foo=bar` syntax.\n- The functions `make_message` and `make_error` now support `std::string_view`\n  as input and automatically convert it to `std::string`.\n- To make it easier to set up asynchronous flows, CAF now provides a new class:\n  `caf::async::publisher`. Any observable can be transformed into a publisher by\n  calling `to_publisher`. The publisher can then be used to subscribe to the\n  observable from other actors or threads. The publisher has only a single\n  member function: `observe_on`. It converts the publisher back into an\n  observable. This new abstraction allows users to set up asynchronous flows\n  without having to manually deal with SPSC buffers.\n- The flow API received additional operators: `first`, `last`, `take_last`,\n  `skip_last`, `element_at`, and `ignore_elements`.\n\n### Changed\n\n- When using CAF to parse CLI arguments, the output of `--help` now includes all\n  user-defined options. Previously, only options in the global category or\n  options with a short name were included. Only CAF options are now excluded\n  from the output. They will still be included in the output of `--long-help`.\n- The output of `--dump-config` now only contains CAF options from loaded\n  modules. Previously, it also included options from modules that were not\n  loaded.\n- We renamed `caf::flow::item_publisher` to `caf::flow::multicaster` to better\n  reflect its purpose and to avoid confusion with the new\n  `caf::async::publisher`.\n- When failing to deserialize a request, the sender will receive an error of\n  kind `sec::malformed_message`.\n- When implementing custom protocol layers that sit on top of an octet stream,\n  the `delta` byte span passed to `consume` now resets whenever returning a\n  positive value from `consume`.\n- When constructing a `behavior` or `message_handler`, callbacks that take a\n  `message` argument are now treated as catch-all handlers.\n- When creating a message with a non-existing type ID, CAF now prints a\n  human-readable error message and calls `abort` instead of crashing the\n  application.\n\n### Fixed\n\n- Fix build errors with exceptions disabled.\n- Fix a regression in `--dump-config` that caused CAF applications to emit\n  malformed output.\n- Fix handling of WebSocket frames that are exactly on the 65535 byte limit.\n- Fix crash when using a fallback value for optional values (#1427).\n- Using `take(0)` on an observable now properly creates an observable that calls\n  `on_complete` on its subscriber on the first activity of the source\n  observable. Previously, the created observable would never reach its threshold\n  and attempt to buffer all values indefinitely.\n- The comparison operator of `intrusive_ptr` no longer accidentally creates new\n  `intrusive_ptr` instances when comparing to raw pointers.\n- Fix function object lifetimes in actions. This bug caused CAF to hold onto a\n  strong reference to actors that canceled a timeout until the timeout expired.\n  This could lead to actors being kept alive longer than necessary (#698).\n- Key lookups in `caf::net::http::request_header` are now case-insensitive, as\n  required by the HTTP specification. Further, `field_at` is now a `const`\n  member function (#1554).\n\n## [0.19.2] - 2023-06-13\n\n### Changed\n\n- Install CAF tools to `${CMAKE_INSTALL_BINDIR}` to make packaging easier.\n- The OpenSSL module no longer hard-codes calls to `SSL_CTX_set_cipher_list` in\n  order to use the system settings by default. Users can provide a custom cipher\n  list by providing a value for the configuration option\n  `caf.openssl.cipher-list`. To restore the previous behavior, set this\n  parameter to `HIGH:!aNULL:!MD5` when running with a certificate and\n  `AECDH-AES256-SHA@SECLEVEL=0` otherwise (or without `@SECLEVEL=0` for older\n  versions of OpenSSL). Please note that these lists are *not* recommended as\n  safe defaults, which is why we are no longer setting these values.\n\n### Fixed\n\n- Add missing initialization code for the new caf-net module when using the\n  `CAF_MAIN` macro. This fixes the `WSANOTINITIALISED` error on Windows (#1409).\n- The WebSocket implementation now properly re-assembles fragmented frames.\n  Previously, a bug in the framing protocol implementation caused CAF to sever\n  the connection when encountering continuation frames (#1417).\n\n### Added\n\n- Add new utilities in `caf::chrono` for making it easier to handle ISO 8601\n  timestamps. The new function `std::chrono::to_string` converts system time to\n  an ISO timestamp. For reading an ISO timestamp, CAF now provides the class\n  `caf::chrono::datetime`. It can parse ISO-formatted strings via `parse` (or\n  `datetime::from_string`) and convert them to a local representation via\n  `to_local_time`. Please refer to the class documentation for more details.\n\n## [0.19.1] - 2023-05-01\n\n### Added\n\n- The class `json_value` can now hold unsigned 64-bit integer values. This\n  allows it to store values that would otherwise overflow a signed integer.\n  Values that can be represented in both integer types will return `true` for\n  `is_integer()` as well as for the new `is_unsigned()` function. Users can\n  obtain the stored value as `uint64_t` via `to_unsigned()`.\n\n### Changed\n\n- With the addition of the unsigned type to `json_value`, there is now a new\n  edge case where `is_number()` returns `true` but neither `is_integer()` nor\n  `is_double()` return `true`: integer values larger than `INT64_MAX` will only\n  return true for `is_unsigned()`.\n\n### Fixed\n\n- Fix flow setup for servers that use `web_socket::with`. This bug caused\n  servers to immediately abort incoming connection (#1402).\n- Make sure that a protocol stack ships pending data before closing a socket.\n  This bug prevented clients from receiving error messages from servers if the\n  server shuts down immediately after writing the message.\n\n## [0.19.0] - 2023-04-17\n\n### Added\n\n- The new classes `json_value`, `json_array` and `json_object` allow working\n  with JSON inputs directly. Actors can also pass around JSON values safely.\n- Futures can now convert to observable values for making it easier to process\n  asynchronous results with data flows.\n- Add new `*_weak` variants of `scheduled_actor::run_{delayed, scheduled}`.\n  These functions add no reference count to their actor, allowing it to become\n  unreachable if other actors no longer reference it.\n- Typed actors that use a `typed_actor_pointer` can now access the\n  `run_{delayed,scheduled}` member functions.\n- Scheduled and delayed sends now return a disposable (#1362).\n- Typed response handles received support for converting them to observable or\n  single objects.\n- Typed actors that use the type-erased pointer-view type received access to the\n  new flow API functions (e.g., `make_observable`).\n- Not initializing the meta objects table now prints a diagnosis message before\n  aborting the program. Previously, the application would usually just crash due\n  to a `nullptr`-access inside some CAF function.\n- The class `expected` now implements the monadic member functions from C++23\n  `std::expected` as well as `value_or`.\n\n### Changed\n\n- After collecting experience and feedback on the new HTTP and WebSocket APIs\n  introduced with 0.19.0-rc.1, we decided to completely overhaul the\n  user-facing, high-level APIs. Please consult the manual for the new DSL to\n  start servers.\n\n### Fixed\n\n- When exporting metrics to Prometheus, CAF now normalizes label names to meet\n  the Prometheus name requirements, e.g., `label-1` becomes `label_1` (#1386).\n- The SPSC buffer now makes sure that subscribers get informed of a producer has\n  already left before the subscriber appeared and vice versa. This fixes a race\n  on the buffer that could cause indefinite hanging of an application.\n- Fused stages now properly forward errors during the initial subscription to\n  their observer.\n- The `fan_out_request` request now properly deals with actor handles that\n  respond with `void` (#1369).\n- Fix subscription and event handling in flow buffer operator.\n- The `mcast` and `ucast` operators now stop calling `on_next` immediately when\n  disposed.\n- Actors no longer terminate despite having open streams (#1377).\n- Actors reading from external sources such as SPSC buffers via a local flow\n  could end up in a long-running read loop. To avoid potentially starving other\n  actors or activities, scheduled actors now limit the amount of actions that\n  may run in one iteration (#1364).\n- Destroying a consumer or producer resource before opening it lead to a stall\n  of the consumer / producer. The buffer now keeps track of whether `close` or\n  `abort` were called prior to consumers or producers attaching.\n- The function `caf::net::make_tcp_accept_socket` now handles passing `0.0.0.0`\n  correctly by opening the socket in IPv4 mode. Passing an empty bind address\n  now defaults to `INADDR6_ANY` (but allowing IPv4 clients) with `INADDR_ANY` as\n  fallback in case opening the socket in IPv6 mode failed.\n- Add missing includes that prevented CAF from compiling on GCC 13.\n- Fix AddressSanitizer and LeakSanitizer findings in some flow operators.\n\n### Deprecated\n\n- All member functions from `caf::expected` that have no equivalent in\n  `std::expected` are now deprecated. Further, `caf::expected<unit_t>` as well\n  as constructing from `unit_t` are deprecated as well. The reasoning behind\n  this decision is that `caf::expected` should eventually become an alias for\n  `std::expected<T, caf::error>`.\n\n## [0.19.0-rc.1] - 2022-10-31\n\n### Added\n\n- CAF now ships an all-new \"flow API\". This allows users to express data flows\n  at a high level of abstraction with a ReactiveX-style interface. Please refer\n  to new examples and the documentation for more details, as this is a large\n  addition that we cannot cover in-depth here.\n- CAF has received a new module: `caf.net`. This module enables CAF applications\n  to interface with network protocols more directly than `caf.io`. The new\n  module contains many low-level building blocks for implementing bindings to\n  network protocols. However, CAF also ships ready-to-use, high-level APIs for\n  WebSocket and HTTP. Please have a look at our new examples that showcase the\n  new APIs!\n- To complement the flow API as well as the new networking module, CAF also\n  received a new set of `async` building blocks. Most notably, this includes\n  asynchronous buffers for the flow API and futures / promises that enable the\n  new HTTP request API. We plan on making these building blocks more general in\n  the future for supporting a wider range of use cases.\n- JSON inspectors now allow users to use a custom `type_id_mapper` to generate\n  and parse JSON text that uses different names for the types than the C++ API.\n\n### Fixed\n\n- Passing a response promise to a run-delayed continuation could result in a\n  heap-use-after-free if the actor terminates before the action runs. The\n  destructor of the promise now checks for this case.\n- Accessing URI fields now always returns the normalized string.\n- Module options (e.g. for the `middleman`) now show up in `--long-help` output.\n- Fix undefined behavior in the Qt group chat example (#1336).\n- The `..._instance` convenience functions on the registry metric now properly\n  support `double` metrics and histograms.\n- The spinlock-based work-stealing implementation had severe performance issues\n  on Windows in some cases. We have switched to a regular, mutex-based approach\n  to avoid performance degradations. The new implementation also uses the\n  mutexes for interruptible waiting on the work queues, which improves the\n  responsiveness of the actor system (#1343).\n\n### Changed\n\n- Remote spawning of actors is no longer considered experimental.\n- The output of `--dump-config` now prints valid config file syntax.\n- When starting a new thread via CAF, the thread hooks API now receives an\n  additional tag that identifies the component responsible for launching the new\n  thread.\n- Response promises now hold a strong reference to their parent actor to avoid\n  `broken_promise` errors in some (legitimate) edge cases (#1361).\n- The old, experimental `stream` API in CAF has been replaced by a new API that\n  is based on the new flow API.\n\n### Deprecated\n\n- The obsolete meta-programming utilities `replies_to` and `reacts_to` no longer\n  serve any purpose and are thus deprecated.\n- The types `caf::byte`, `caf::optional` and `caf::string_view` became obsolete\n  after switching to C++17. Consequently, these types are now deprecated in\n  favor of their standard library counterpart.\n- The group-based pub/sub mechanism never fit nicely into the typed messaging\n  API and the fact that group messages use the regular mailbox makes it hard to\n  separate regular communication from multi-cast messages. Hence, we decided to\n  drop the group API and instead focus on the new flows and streams that can\n  replace group-communication in many use cases.\n- The \"actor-composition operator\" was added as a means to enable the first\n  experimental streaming API. With that gone, there's no justification to keep\n  this feature. While it has some neat niche-applications, the prevent some\n  optimization we would like to apply to the messaging layer. Hence, we will\n  remove this feature without a replacement.\n\n### Removed\n\n- The template type `caf::variant` also became obsolete when switching to C++17.\n  Unfortunately, the implementation was not as standalone as its deprecated\n  companions and some of the free functions like `holds_alternative` were too\n  greedy and did not play nicely with ADL when using `std::variant` in the same\n  code base. Since fixing `caf::variant` does not seem to be worth the time\n  investment, we remove this type without a deprecation cycle.\n\n## [0.18.7] - 2023-02-08\n\n### Fixed\n\n- The JSON parser no longer chokes when encountering `null` as last value before\n  the closing parenthesis.\n- The JSON reader now automatically widens integers to doubles as necessary.\n- Parsing deeply nested JSON inputs no longer produces a stack overflow.\n  Instead, the parser rejects any JSON with too many nesting levels.\n- The `fan_out_request` request now properly deals with actor handles that\n  respond with `void` (#1369). Note: back-ported fix from 0.19.\n\n## [0.18.6] - 2022-03-24\n\n### Added\n\n- When adding CAF with exceptions enabled (default), the unit test framework now\n  offers new check macros:\n  - `CAF_CHECK_NOTHROW(expr)`\n  - `CAF_CHECK_THROWS_AS(expr, type)`\n  - `CAF_CHECK_THROWS_WITH(expr, str)`\n  - `CAF_CHECK_THROWS_WITH_AS(expr, str, type)`\n\n### Fixed\n\n- The DSL function `run_until` miscounted the number of executed events, also\n  causing `run_once` to report a wrong value. Both functions now return the\n  correct result.\n- Using `allow(...).with(...)` in unit tests without a matching message crashed\n  the program. By adding a missing NULL-check, `allow` is now always safe to\n  use.\n- Passing a response promise to a run-delayed continuation could result in a\n  heap-use-after-free if the actor terminates before the action runs. The\n  destructor of the promise now checks for this case.\n- Fix OpenSSL 3.0 warnings when building the OpenSSL module by switching to\n  newer EC-curve API.\n- When working with settings, `put`, `put_missing`, `get_if`, etc. now\n  gracefully handle the `global` category when explicitly using it.\n- Messages created from a `message_builder` did not call the destructors for\n  their values, potentially causing memory leaks (#1321).\n\n### Changed\n\n- Since support of Qt 5 expired, we have ported the Qt examples to version 6.\n  Hence, building the Qt examples now requires Qt in version 6.\n- When compiling CAF with exceptions enabled (default), `REQUIRE*` macros,\n  `expect` and `disallow` no longer call `abort()`. Instead, they throw an\n  exception that only stops the current test instead of stopping the entire test\n  program.\n- Reporting of several unit test macros has been improved to show correct line\n  numbers and provide better diagnostic of test errors.\n\n## [0.18.5] - 2021-07-16\n\n### Fixed\n\n- 0.18.4 introduced a potential crash when using the OpenSSL module and\n  encountering `SSL_ERROR_WANT_READ`. The crash manifested if CAF resumed a\n  write operation but failed to fully reset its state. The state management (and\n  consequently the crash) has been fixed.\n- CAF now clears the actor registry before calling the destructors of loaded\n  modules. This fixes undefined behavior that could occur in rare cases where\n  actor cleanup code could run after loaded modules had been destroyed.\n\n## [0.18.4] - 2021-07-07\n\n### Added\n\n- The new class `caf::telemetry::importer::process` allows users to get access\n  to process metrics even when not configuring CAF to export metrics to\n  Prometheus via HTTP.\n\n### Changed\n\n- Message views now perform the type-check in their constructor. With this\n  change, the `make_*` utility functions are no longer mandatory and users may\n  instead simply construct the view directly.\n\n### Fixed\n\n- Printing a `config_value` that contains a zero duration `timespan` now\n  properly prints `0s` instead of `1s` (#1262). This bug most notably showed up\n  when setting a `timespan` parameter such as `caf.middleman.heartbeat-interval`\n  via config file or CLI to `0s` and then printing the config parameter, e.g.,\n  via `--dump-config`.\n- Blocking actors now release their private thread before decrementing the\n  running-actors count to resolve a race condition during system shutdown that\n  could result in the system hanging (#1266).\n- When using the OpenSSL module, CAF could run into a state where the SSL layer\n  wants to read data while CAF is trying to send data. In this case, CAF did not\n  properly back off, causing high CPU load due to spinning and in some scenarios\n  never recovering. This issue has been resolved by properly handling\n  `SSL_ERROR_WANT_READ` on the transport (#1060).\n- Scheduled actors now accept default handlers for down messages etc. with\n  non-const apply operator such as lambda expressions declared as `mutable`.\n\n### Removed\n\n- Dropped three obsolete (and broken) macros in the `unit_test.hpp` header:\n  `CAF_CHECK_FAILED`, `CAF_CHECK_FAIL` and `CAF_CHECK_PASSED`.\n\n## [0.18.3] - 2021-05-21\n\n### Added\n\n- The `actor_system_config` now has an additional member called\n  `config_file_path_alternatives`. With this, users can configure fallback paths\n  for locating a configuration file. For example, an application `my-app` on a\n  UNIX-like system could set `config_file_path` to `my-app.conf` and then add\n  `/etc/my-app.conf` to `config_file_path_alternatives` in order to follow the\n  common practice of looking into the current directory first before looking for\n  a system-wide configuration file.\n\n### Changed\n\n- Counters in histogram buckets are now always integers, independently on the\n  value type of the histogram. Buckets can never increase by fractional values.\n\n### Deprecated\n\n- All `parse` function overloads in `actor_system_config` that took a custom\n  configuration file path as argument were deprecated in favor of consistently\n  asking users to use the `config_file_path` and `config_file_path_alternatives`\n  member variables instead\n\n### Fixed\n\n- For types that offer implicit type conversion, trying to construct a\n  `result<T>` could result in ambiguity since compilers could construct either\n  `T` itself or `expected<T>` for calling a constructor of `result<T>`. To fix\n  the ambiguity, `result<T>` now accepts any type that allows constructing a `T`\n  internally without requiring a type conversion to `T` as an argument (#1245).\n- Fix configuration parameter lookup for the `work-stealing` scheduler policy.\n- Applications that expose metrics to Prometheus properly terminate now.\n\n## [0.18.2] - 2021-03-26\n\n### Added\n\n- CAF includes two new inspector types for consuming and generating\n  JSON-formatted text: `json_writer` and `json_reader`.\n\n### Changed\n\n- Setter functions for fields may now return either `bool`, `caf::error` or\n  `void`. Previously, CAF only allowed `bool`.\n\n### Fixed\n\n- Passing a getter and setter pair to an inspector via `apply` produced a\n  compiler error for non-builtin types. The inspection API now recursively\n  inspects user-defined types instead, as was the original intend (#1216).\n- The handle type `typed_actor` now can construct from a `typed_actor_pointer`.\n  This resolves a compiler error when trying to initialize a handle for\n  `my_handle` from a self pointer of type `my_handle::pointer_view` (#1218).\n- Passing a function reference to the constructor of an actor caused a compiler\n  error when building with logging enabled. CAF now properly handles this edge\n  case and logs such constructor arguments as `<unprintable>` (#1229).\n- The CLI parser did not recognize metrics filters. Hence, passing\n  `--caf.metrics-filters.actors.includes=...` to a CAF application resulted in\n  an error. The `includes` and `excludes` filters are now consistently handled\n  and accepted in config files as well as on the command line (#1238).\n- Silence a deprecated-enum-conversion warning for `std::byte` (#1230).\n- Fix heap-use-after-free when accessing the meta objects table in applications\n  that leave the `main` function while the actor system and its worker threads\n  are still running (#1241).\n- The testing DSL now properly accounts for the message prioritization of actors\n  (suspending regular behavior until receiving the response) when using\n  `request.await` (#1232).\n\n## [0.18.1] - 2021-03-19\n\n### Fixed\n\n- Version 0.18.0 introduced a regression on the system parameter\n  `caf.middleman.heartbeat-interval` (#1235). We have addressed the issue by\n  porting the original fix for CAF 0.17.5 (#1095) to the 0.18 series.\n\n## [0.18.0] - 2021-01-25\n\n### Added\n\n- The enum `caf::sec` received an additional error code: `connection_closed`.\n- The new `byte_span` and `const_byte_span` aliases provide convenient\n  definitions when working with sequences of bytes.\n- The base metrics now include four new histograms for illuminating the I/O\n  module: `caf.middleman.inbound-messages-size`,\n  `caf.middleman.outbound-messages-size`, `caf.middleman.deserialization-time`\n  and `caf.middleman.serialization-time`.\n- The macro `CAF_ADD_TYPE_ID` now accepts an optional third parameter for\n  allowing users to override the default type name.\n- The new function pair `get_as` and `get_or` model type conversions on a\n  `config_value`. For example, `get_as<int>(x)` would convert the content of `x`\n  to an `int` by either casting numeric values to `int` (with bound checks) or\n  trying to parse the input of `x` if it contains a string. The function\n  `get_or` already existed for `settings`, but we have added new overloads for\n  generalizing the function to `config_value` as well.\n- The `typed_response_promise` received additional member functions to mirror\n  the interface of the untyped `response_promise`.\n- Configuration files now allow dot-separated notation for keys. For example,\n  users may write `caf.scheduler.max-threads = 4` instead of the nested form\n  `caf { scheduler { max-threads = 4 } }`.\n\n### Deprecated\n\n- The new `get_as` and `get_or` function pair makes type conversions on a\n  `config_value` via `get`, `get_if`, etc. obsolete. We will retain the\n  STL-style interface for treating a `config_value` as a `variant`-like type.\n\n### Changed\n\n- When using `CAF_MAIN`, CAF now looks for the correct default config file name,\n  i.e., `caf-application.conf`.\n- Simplify the type inspection API by removing the distinction between\n  `apply_object` and `apply_value`. Instead, inspectors only offer `apply` and\n  users may now also call `map`, `list`, and `tuple` for unboxing simple wrapper\n  types. Furthermore, CAF no longer automatically serializes enumeration types\n  using their underlying value because this is fundamentally unsafe.\n- CAF no longer parses the input to string options on the command line. For\n  example, `my_app '--msg=\"hello\"'` results in CAF storing `\"hello\"` (including\n  the quotes) for the config option `msg`. Previously, CAF tried to parse any\n  string input on the command-line that starts with quotes in the same way it\n  would parse strings from a config file, leading to very unintuitive results in\n  some cases (#1113).\n- Response promises now implicitly share their state when copied. Once the\n  reference count for the state reaches zero, CAF now produces a\n  `broken_promise` error if the actor failed to fulfill the promise by calling\n  either `dispatch` or `delegate`.\n\n### Fixed\n\n- Setting an invalid credit policy no longer results in a segfault (#1140).\n- Version 0.18.0-rc.1 introduced a regression that prevented CAF from writing\n  parameters parsed from configuration files back to variables. The original\n  behavior has been restored, i.e., variables synchronize with user input from\n  configuration files and CLI arguments (#1145).\n- Restore correct functionality of `middleman::remote_lookup` (#1146). This\n  fixes a regression introduced in version 0.18.0-rc.1\n- Fixed an endless recursion when using the `default_inspector` from `inspect`\n  overloads (#1147).\n- CAF 0.18 added support for `make_behavior` in state classes. However, CAF\n  erroneously picked this member function over running the function body when\n  spawning function-based actors (#1149).\n- When passing `nullptr` or custom types with implicit conversions to\n  `const char*` to `deep_to_string`, CAF could run into a segfault in the former\n  case or do unexpected things in the latter case. The stringification inspector\n  now matches precisely on pointer types to stop the compiler from doing\n  implicit conversions in the first place.\n- Building executables that link to CAF on 32-bit Linux versions using GCC\n  failed due to undefined references to `__atomic_fetch` symbols. Adding a CMake\n  dependency for `caf_core` to libatomic gets executables to compile and link as\n  expected (#1153).\n- Fixed a regression for remote groups introduced in 0.18.0-rc.1 (#1157).\n- CAF 0.18 introduced the option to set different `excluded-components` filters\n  for file and console log output. However, CAF rejected all events that matched\n  either filter. The new implementation uses the *intersection* of both filters\n  to reject log messages immediately (before enqueueing it to the logger's\n  queue) and then applies the filters individually when generating file or\n  console output.\n- Fix memory leaks when deserializing URIs and when detaching the content of\n  messages (#1160).\n- Fix undefined behavior in `string_view::compare` (#1164).\n- Fix undefined behavior when passing `--config-file=` (i.e., without actual\n  argument) to CAF applications (#1167).\n- Protect against self-assignment in a couple of CAF classes (#1169).\n- Skipping high-priority messages resulted in CAF lowering the priority to\n  normal. This unintentional demotion has been fixed (#1171).\n- Fix undefined behavior in the experimental datagram brokers (#1174).\n- Response promises no longer send empty messages in response to asynchronous\n  messages.\n- `CAF_ADD_TYPE_ID` now works with types that live in namespaces that also exist\n  as nested namespace in CAF such as `detail` or `io` (#1195).\n- Solved a race condition on detached actors that blocked ordinary shutdown of\n  actor systems in some cases (#1196).\n\n## [0.18.0-rc.1] - 2020-09-09\n\n### Added\n\n- The new `fan_out_request` function streamlines fan-out/fan-in work flows (see\n  the new example in `examples/message_passing/fan_out_request.cpp` as well as\n  the new manual entry). The policy-based design further allows us to support\n  more use cases in the future (#932, #964).\n- We introduced the lightweight template class `error_code` as an alternative to\n  the generic but more heavyweight class `error`. The new error code abstraction\n  simply wraps an enumeration type without allowing users to add additional\n  context such as error messages. However, whenever such information is\n  unneeded, the new class is much more efficient than using `error`.\n- Tracing messages in distributed systems is a common practice for monitoring\n  and debugging message-based systems. The new `tracing_data` abstraction in CAF\n  enables users to augment messages between actors with arbitrary meta data.\n  This is an experimental API that requires building CAF with the CMake option\n  `CAF_ENABLE_ACTOR_PROFILER` (#981).\n- Add compact `from..to..step` list notation in configuration files. For\n  example, `[1..3]` expands to `[1, 2, 3]` and `[4..-4..-2]` expands to\n  `[4, 2, 0, -2, -4]` (#999).\n- Allow config keys to start with numbers (#1014).\n- The `fan_out_request` function got an additional policy for picking just the\n  fist result: `select_any` (#1012).\n- Run-time type information in CAF now uses 16-bit type IDs. Users can assign\n  this ID by specializing `type_id` manually (not recommended) or use the new\n  API for automatically assigning ascending IDs inside `CAF_BEGIN_TYPE_ID_BLOCK`\n  and `CAF_END_TYPE_ID_BLOCK` code blocks.\n- The new typed view types `typed_message_view` and `const_typed_message_view`\n  make working with `message` easier by providing a `std::tuple`-like interface\n  (#1034).\n- The class `exit_msg` finally got its missing `operator==` (#1039).\n- The class `node_id` received an overload for `parse` to allow users to convert\n  the output of `to_string` back to the original ID (#1058).\n- Actors can now `monitor` and `demonitor` CAF nodes (#1042). Monitoring a CAF\n  node causes the actor system to send a `node_down_msg` to the observer when\n  losing connection to the monitored node.\n- In preparation of potential future API additions/changes, CAF now includes an\n  RFC4122-compliant `uuid` class.\n- The new trait class `is_error_code_enum` allows users to enable conversion of\n  custom error code enums to `error` and `error_code`.\n- CAF now enables users to tap into internal CAF metrics as well as adding their\n  own instrumentation! Since this addition is too large to cover in a changelog\n  entry, please have a look at the new *Metrics* Section of the manual to learn\n  more.\n\n### Deprecated\n\n- The `to_string` output for `error` now renders the error code enum by default.\n  This renders the member functions `actor_system::render` and\n  `actor_system_config::render` obsolete.\n- Actors that die due to an unhandled exception now use `sec::runtime_error`\n  consistently. This makes `exit_reason::unhandled_exception` obsolete.\n\n### Changed\n\n- CAF now requires C++17 to build.\n- On UNIX, CAF now uses *visibility hidden* by default. All API functions and\n  types that form the ABI are explicitly exported using module-specific macros.\n  On Windows, this change finally enables building native DLL files.\n- We switched our coding style to the C++17 nested namespace syntax.\n- CAF used to generate the same node ID when running on the same machine and\n  only differentiates actors systems by their process ID. When running CAF\n  instances in a container, this process ID is most likely the same for each\n  run. This means two containers can produce the same node ID and thus\n  equivalent actor IDs. In order to make it easier to use CAF in a containerized\n  environment, we now generate unique (random) node IDs (#970).\n- We did a complete redesign of all things serialization. The central class\n  `data_processor` got removed. The two classes for binary serialization no\n  longer extend the generic interfaces `serializer` and `deserializer` in order\n  to avoid the overhead of dynamic dispatching as well as the runtime cost of\n  `error` return values. This set of changes leads so some code duplication,\n  because many CAF types now accept a generic `(de)serializer` as well as a\n  `binary_(de)serializer` but significantly boosts performance in the hot code\n  paths of CAF (#975).\n- With C++17, we no longer support compilers without support for `thread_local`.\n  Consequently, we removed all workarounds and switched to the C++ keyword\n  (#996).\n- Our manual now uses `reStructuredText` instead of `LaTeX`. We hope this makes\n  extending the manual easier and lowers the barrier to entry for new\n  contributors.\n- A `stateful_actor` now forwards excess arguments to the `State` rather than to\n  the `Base`. This enables states with non-default constructors. When using\n  `stateful_actor<State>` as pointer type in function-based actors, nothing\n  changes (i.e. the new API is backwards compatible for this case). However,\n  calling `spawn<stateful_actor<State>>(xs...)` now initializes the `State` with\n  the argument pack `xs...` (plus optionally a `self` pointer as first\n  argument). Furthermore, the state class can now provide a `make_behavior`\n  member function to initialize the actor (this has no effect for function-based\n  actors).\n- In order to stay more consistent with naming conventions of the standard\n  library, we have renamed some values of the `pec` enumeration:\n  + `illegal_escape_sequence` => `invalid_escape_sequence`\n  + `illegal_argument` => `invalid_argument`\n  + `illegal_category` => `invalid_category`\n- CAF no longer automagically flattens `tuple`, `optional`, or `expected` when\n  returning these types from message handlers. Users can simply replace\n  `std::tuple<A, B, C>` with `caf::result<A, B, C>` for returning more than one\n  value from a message handler.\n- A `caf::result` can no longer represent `skip`. Whether a message gets skipped\n  or not is now only for the default handler to decide. Consequently, default\n  handlers now return `skippable_result` instead of `result<message>`. A\n  skippable result is a variant over `delegated<message>`, `message`, `error`,\n  or `skip_t`. The only good use case for message handlers that skip a message\n  in their body was in typed actors for getting around the limitation that a\n  typed behavior always must provide all message handlers (typed behavior assume\n  a complete implementation of the interface). This use case received direct\n  support: constructing a typed behavior with `partial_behavior_init` as first\n  argument suppresses the check for completeness.\n- In order to reduce complexity of typed actors, CAF defines interfaces as a set\n  of function signatures rather than using custom metaprogramming facilities.\n  Function signatures *must* always wrap the return type in a `result<T>`. For\n  example: `typed_actor<result<double>(double)>`. We have reimplemented the\n  metaprogramming facilities `racts_to<...>` and `replies_to<...>::with<...>`\n  as an alternative way of writing the function signature.\n- All parsing functions in `actor_system_config` that take an input stream\n  exclusively use the new configuration syntax (please consult the manual for\n  details and examples for the configuration syntax).\n- The returned string of `name()` must not change during the lifetime of an\n  actor. Hence, `stateful_actor` now only considers static `name` members in its\n  `State` for overriding this function. CAF always assumed names belonging to\n  *types*, but did not enforce it because the name was only used for logging.\n  Since the new metrics use this name for filtering now, we enforce static names\n  in order to help avoid hard-to-find issues with the filtering mechanism.\n- The type inspection API received a complete overhaul. The new DSL for writing\n  `inspect` functions exposes the entire structure of an object to CAF. This\n  enables inspectors to read and write a wider range of data formats. In\n  particular human-readable, structured data such as configuration files, JSON,\n  XML, etc. The inspection API received too many changes to list them here.\n  Please refer to the manual section on type inspection instead.\n\n### Removed\n\n- A vendor-neutral API for GPGPU programming sure sounds great. Unfortunately,\n  OpenCL did not catch on in the way we had hoped. At this point, we can call\n  OpenCL dead and gone. There is only legacy support available and recent\n  versions of the standard were never implemented in the first place.\n  Consequently, we've dropped the `opencl` module.\n- The old `duration` type is now superseded by `timespan` (#994).\n- The enum `match_result` became obsolete. Individual message handlers can no\n  longer skip messages. Hence, message handlers can only succeed (match) or not.\n  Consequently, invoking a message handler or behavior now returns a boolean.\n- All member functions of `scheduled_actor` for adding stream managers (such as\n  `make_source`) were removed in favor their free-function equivalent, e.g.,\n  `attach_stream_source`\n- The configuration format of CAF has come a long way since first starting to\n  allow user-defined configuration via `.ini` files. Rather than sticking with\n  the weird hybrid that evolved over the years, we finally get rid of the last\n  pieces of INI syntax and go with the much cleaner, scoped syntax. The new\n  default file name for configuration files is `caf-application.conf`.\n\n### Fixed\n\n- Fix uninstall target when building CAF as CMake subdirectory.\n- Using `inline_all_enqueues` in deterministic unit tests could result in\n  deadlocks when calling blocking functions in message handlers. This function\n  now behaves as expected (#1016).\n- Exceptions while handling requests now trigger error messages (#1055).\n- The member function `demonitor` falsely refused typed actor handles. Actors\n  could monitor typed actors but not demonitoring it again. This member function\n  is now a template that accepts any actor handle in the same way `monitor`\n  already did.\n- The `typed_actor_view` decorator lacked several member functions such as\n  `link_to`, `send_exit`, etc. These are now available.\n- Constructing a `typed_actor` handle from a pointer view failed due to a\n  missing constructor overload. This (explicit) overload now exists and the\n  conversion should work as expected.\n- Sending floating points to remote actors changed `infinity` and `NaN` to\n  garbage values (#1107). The fixed packing / unpacking routines for IEEE 754\n  values keep these non-numeric values intact now. It is worth mentioning that\n  the new algorithm downgrades signaling NaN values to silent NaN values,\n  because the standard API does not provide predicates to distinguish between the\n  two. This should have no implications for real-world applications, because\n  actors that produce a signaling NaN trigger trap handlers before sending\n  the result to another actor.\n- The URI parser stored IPv4 addresses as strings (#1123). Users can now safely\n  assume that the parsed URI for `tcp://127.0.0.1:8080` returns an IP address\n  when calling `authority().host`.\n\n## [0.17.7] - Unreleased\n\n### Fixed\n\n- Datagram servants of UDP socket managers were not added as children to their\n  parent broker on creation, which prevented proper system shutdown in some\n  cases. Adding all servants consistently to the broker should make sure UDP\n  brokers terminate correctly (#1133).\n- Backport stream manager fix from CAF 0.18 for fused downstream managers that\n  prevent loss of messages during regular actor shutdown.\n\n## [0.17.6] - 2020-07-24\n\n### Fixed\n\n- Trying to connect to an actor published via the OpenSSL module with the I/O\n  module no longer hangs indefinitely (#1119). Instead, the OpenSSL module\n  immediately closes the socket if initializing the SSL session fails.\n\n## [0.17.5] - 2020-05-13\n\n### Added\n\n- In order to allow users to start migrating towards upcoming API changes, CAF\n  0.17.5 includes a subset of the CAF 0.18 `type_id` API. Listing all\n  user-defined types between `CAF_BEGIN_TYPE_ID_BLOCK` and\n  `CAF_END_TYPE_ID_BLOCK` assigns ascending type IDs. Only one syntax for\n  `CAF_ADD_ATOM` exists, since the atom text is still mandatory. Assigning type\n  IDs has no immediate effect by default. However, the new function\n  `actor_system_config::add_message_types` accepts an ID block and adds\n  runtime-type information for all types in the block.\n- In order to opt into the compile-time checks for all message types, users can\n  set the `CAF_ENABLE_TYPE_ID_CHECKS` CMake flag to `ON` (pass\n  `--enable-type-id-checks` when using the `configure` script). Building CAF\n  with this option causes compiler errors when sending a type without a type ID.\n  This option in conjunction with the new `add_message_types` function removes a\n  common source of bugs: forgetting to call `add_message_type<T>` for all types\n  that can cross the wire.\n\n### Changed\n\n- Our manual now uses `reStructuredText` instead of `LaTeX` (backport from\n  [0.18.0]).\n\n### Fixed\n\n- Fix handling of OS-specific threading dependency in CMake.\n- Fix uninstall target when building CAF as CMake subdirectory (backport from\n  [0.18.0]).\n- Fix potential deadlock with `inline_all_enqueues` (backport from [0.18.0]).\n- Exceptions while handling requests now trigger error messages (backport from\n  [0.18.0]).\n- Fix build on GCC 7.2\n- Fix build error in the OpenSSL module under some MSVC configurations\n- Serializer and deserializer now accept `std::chrono::time_point` for all clock\n  types instead of hard-wiring `std::system_clock`.\n- In some edge cases, actors failed to shut down properly when hosting a stream\n  source (#1076). The handshake process for a graceful shutdown has been fixed.\n- Fixed a compiler error on Clang 10 (#1077).\n- Setting lists and dictionaries on the command line now properly overrides\n  default values and values from configuration files instead of appending to\n  them (#942).\n- Using unquoted strings in command-line arguments inside lists now works as\n  expected. For example, `--foo=abc,def` is now equivalent to\n  `--foo=[\"abc\", \"def\"]`.\n- Fixed a type mismatch in the parameter `middleman.heartbeat-interval` (#1095).\n  CAF consistently uses `timespan` for this parameter now.\n\n## [0.17.4] - 2019-02-08\n\n### Added\n\n- The class `exit_msg` finally got its missing `operator==` (#1039, backport\n  from [0.18.0]).\n\n### Changed\n\n- Make sure actors that receive stream input shut down properly (#1019).\n- Improve `to_string` output for `caf::error` (#1021).\n- Properly report errors to users while connecting two CAF nodes (#1023).\n- Simplify crosscompilation: remove build dependency on code generators (#1026).\n- Leave CXX settings to the (CMake) parent when building as subdirectory (#1032).\n- Build without documentation in subdirectory mode (#1037).\n- Allow parents to set `OPENSSL_INCLUDE_DIR` in subdirectory mode (#1037).\n- Add `-pthread` flag on UNIX when looking for `libc++` support (#1038).\n- Avoid producing unexpected log files (#1024).\n\n### Fixed\n\n- Accept numbers as keys in the config syntax (#1014).\n- Fix undesired function hiding in `fused_downstream_manager` (#1020).\n- Fix behavior of `inline_all_enqueues` in the testing DSL (#1016).\n- Fix path recognition in the URI parser, e.g., `file:///` is now valid (#1013).\n\n## [0.17.3] - 2019-11-11\n\n### Added\n\n- Add support for OpenBSD (#955).\n- Provide uniform access to actor properties (#958).\n- Add missing `to_string(pec)` (#940).\n\n### Fixed\n\n- Fix bug in stream managers that caused finalizers to get called twice (#937).\n- Fix verbosity level with disabled console output (#953).\n- Fix excessive buffering in stream stages (#952).\n\n## [0.17.2] - 2019-10-20\n\n### Added\n\n- Add `scheduled_send` for delayed sends with absolute timeout (#901).\n- Allow actors based on composable behaviors to use the streaming API (#902).\n- Support arbitrary list and map types in `config_value` (#925).\n- Allow users to extend the `config_value` API (#929, #938).\n\n### Changed\n\n- Reduce stack usage of serializers (#912).\n- Use default installation directories on GNU/Linux (#917).\n\n### Fixed\n\n- Fix memory leak when deserializing `node_id` (#905).\n- Fix composition of statically typed actors using streams (#908).\n- Fix several warnings on GCC and Clang (#915).\n- Fix `holds_alternative` and `get_if` for `settings` (#920).\n- Fix silent dropping of errors in response handlers (#935).\n- Fix stall in `remote_group` on error (#933).\n\n## [0.17.1] - 2019-08-31\n\n### Added\n\n- Support nesting of group names in .ini files (#870).\n- Support all alphanumeric characters in config group names (#869).\n\n### Changed\n\n- Improve CMake setup when building CAF as subfolder (#866).\n- Properly set CLI remainder (#871).\n\n### Fixed\n\n- Fix endless loop in config parser (#894).\n- Fix debug build with Clang 7 on Linux (#861).\n- Fix type-specific parsing of config options (#814).\n- Fix potential deadlock in proxy registry (#880).\n- Fix output of --dump-config (#876).\n- Fix potential segfault when using streams with trace logging enabled (#878).\n- Fix handling of containers with user-defined types (#867).\n- Fix `defaulted_function_deleted` warning on Clang (#859).\n\n## [0.17.0] - 2019-07-27\n\n### Added\n\n- Add marker to make categories optional on the CLI. Categories are great at\n  organizing program options. However, on the CLI they get in the way quickly.\n  This change allows developers to prefix category names with `?` to make it\n  optional on the CLI.\n- Add conversion from `nullptr` to intrusive and COW pointer types.\n- Support move-only behavior functions.\n- Allow users to omit `global` in config files.\n- Allow IPO on GCC/Clang.\n\n### Changed\n\n- Parallelize deserialization of messages received over the network (#821).\n  Moving the deserialization out of the I/O loop significantly increases\n  performance. In our benchmark, CAF now handles up to twice as many messages\n  per second.\n- Relax ini syntax for maps by making `=` for defining maps and `,` for\n  separating key-value pairs optional. For example, this change allows to\n  rewrite an entry like this:\n  ```ini\n  logger = {\n    console-verbosity='trace',\n    console='colored'\n  }\n  ```\n  to a slightly less noisy version such as this:\n  ```ini\n  logger {\n    console-verbosity='trace'\n    console='colored'\n  }\n  ```\n- Allow apps to always use the `logger`, whether or not CAF was compiled with\n  logging enabled.\n- Streamline direct node-to-node communication and support multiple app\n  identifiers.\n- Reimplement `binary_serializer` and `binary_deserializer` without STL-style\n  stream buffers for better performance.\n\n### Fixed\n\n- Fix performance of the thread-safe actor clock (#849). This clock type is used\n  whenever sending requests, delayed messages, receive timeouts etc. With this\n  change, CAF can handle about 10x more timeouts per second.\n- Fix multicast address detection in `caf::ipv4_address.cpp` (#853).\n- Fix disconnect issue / WSAGetLastError usage on Windows (#846).\n- Fix `--config-file` option (#841).\n- Fix parsing of CLI arguments for strings and atom values.\n\n## [0.16.5] - 2019-11-11\n\n### Added\n\n- Support for OpenBSD.\n\n## [0.16.4] - 2019-11-11\n\n### Fixed\n\n- Backport parser fixes from the CAF 0.17 series.\n- Silence several compiler warnings on GCC and Clang.\n\n## [0.16.3] - 2018-12-27\n\n### Added\n\n- The new class `cow_tuple` provides an `std::tuple`-like interface for a\n  heap-allocated, copy-on-write tuple.\n- Missing overloads for `dictionary`.\n- The new `to_lowercase` function for atoms allows convenient conversion without\n  having to convert between strings and atoms.\n\n### Changed\n\n- Printing timestamps now consistently uses ISO 8601 format.\n- The logger now uses a bounded queue. This change in behavior will cause the\n  application to slow down when logging faster than the logger can do I/O, but\n  the queue can no longer grow indefinitely.\n- Actors now always try to dequeue from the high-priority queue first.\n\n### Fixed\n\n- Solved linker errors related to `socket_guard` in some builds.\n- Fix the logger output for class names.\n- Deserializing into non-empty containers appended to the content instead of\n  overriding it. The new implementation properly clears the container before\n  filling it.\n- The `split` function from the string algorithms header now works as the\n  documentation states.\n- Silence several compiler warnings on GCC and Clang.\n\n## [0.16.2] - 2018-11-03\n\n### Fixed\n\n- The copy-on-write pointer used by `message` failed to release memory in some\n  cases. The resulting memory leak is now fixed.\n\n## [0.16.1] - 2018-10-31\n\n### Added\n\n- Adding additional flags for the compiler when using the `configure` script is\n  now easier thanks to the `--extra-flags=` option.\n- The actor clock now supports non-overriding timeouts.\n- The new `intrusive_cow_ptr` is a smart pointer for copy-on-write access.\n\n### Changed\n\n- Improve `noexcept`-correctness of `variant`.\n- CAF threads now have recognizable names in a debugger.\n- The middleman now passes `CLOEXEC` on `socket`/`accept`/`pipe` calls.\n- Users can now set the log verbosity for file and console output separately.\n\n### Fixed\n\n- A `dictionary` now properly treats C-strings as strings when using `emplace`.\n- Eliminate a potential deadlock in the thread-safe actor clock.\n- Added various missing includes and forward declarations.\n\n## [0.16.0] - 2018-09-03\n\n### Added\n\n- As part of [CE-0002](https://git.io/Jvoo5), `config_value` received support\n  for lists, durations and dictionaries. CAF now exposes the content of an actor\n  system config as a dictionary of `config_value`. The free function `get_or`\n  offers convenient access to configuration parameters with hard-coded defaults\n  as fallback.\n- The C++17-compatible `string_view` class enables us to make use of recent\n  standard addition without having to wait until it becomes widely available.\n- In preparation of plans for future convenience API, we've added `uri`\n  according to [RFC 3986](https://tools.ietf.org/html/rfc3986) as well as\n  `ipv6_address` and `ipv4_address`.\n- A new, experimental streaming API. Please have a look at the new manual\n  section for more details.\n\n### Deprecated\n\n- Going forward, the preferred way to access configuration parameters is using\n  the new `get_or` API. Hence, these member variables are now deprecated in\n  `actor_system_config`:\n  + `scheduler_policy`\n  + `scheduler_max_threads`\n  + `scheduler_max_throughput`\n  + `scheduler_enable_profiling`\n  + `scheduler_profiling_ms_resolution`\n  + `scheduler_profiling_output_file`\n  + `work_stealing_aggressive_poll_attempts`\n  + `work_stealing_aggressive_steal_interval`\n  + `work_stealing_moderate_poll_attempts`\n  + `work_stealing_moderate_steal_interval`\n  + `work_stealing_moderate_sleep_duration_us`\n  + `work_stealing_relaxed_steal_interval`\n  + `work_stealing_relaxed_sleep_duration_us`\n  + `logger_file_name`\n  + `logger_file_format`\n  + `logger_console`\n  + `logger_console_format`\n  + `logger_verbosity`\n  + `logger_inline_output`\n  + `middleman_network_backend`\n  + `middleman_app_identifier`\n  + `middleman_enable_automatic_connections`\n  + `middleman_max_consecutive_reads`\n  + `middleman_heartbeat_interval`\n  + `middleman_detach_utility_actors`\n  + `middleman_detach_multiplexer`\n  + `middleman_cached_udp_buffers`\n  + `middleman_max_pending_msgs`\n\n### Removed\n\n- The `boost::asio` was part of an initiative to contribute CAF as\n  `boost::actor`. Since there was little interest by the Boost community, this\n  backend now serves no purpose.\n\n### Fixed\n\n- Setting the log level to `quiet` now properly suppresses any log output.\n- Configuring colored terminal output should now print colored output.\n\n[1.0.2]: https://github.com/actor-framework/actor-framework/releases/1.0.2\n[1.0.1]: https://github.com/actor-framework/actor-framework/releases/1.0.1\n[1.0.0]: https://github.com/actor-framework/actor-framework/releases/1.0.0\n[0.19.5]: https://github.com/actor-framework/actor-framework/releases/0.19.5\n[0.19.4]: https://github.com/actor-framework/actor-framework/releases/0.19.4\n[0.19.3]: https://github.com/actor-framework/actor-framework/releases/0.19.3\n[0.19.2]: https://github.com/actor-framework/actor-framework/releases/0.19.2\n[0.19.1]: https://github.com/actor-framework/actor-framework/releases/0.19.1\n[0.19.0]: https://github.com/actor-framework/actor-framework/releases/0.19.0\n[0.19.0-rc.1]: https://github.com/actor-framework/actor-framework/releases/0.19.0-rc.1\n[0.18.7]: https://github.com/actor-framework/actor-framework/releases/0.18.7\n[0.18.6]: https://github.com/actor-framework/actor-framework/releases/0.18.6\n[0.18.5]: https://github.com/actor-framework/actor-framework/releases/0.18.5\n[0.18.4]: https://github.com/actor-framework/actor-framework/releases/0.18.4\n[0.18.3]: https://github.com/actor-framework/actor-framework/releases/0.18.3\n[0.18.2]: https://github.com/actor-framework/actor-framework/releases/0.18.2\n[0.18.1]: https://github.com/actor-framework/actor-framework/releases/0.18.1\n[0.18.0]: https://github.com/actor-framework/actor-framework/releases/0.18.0\n[0.18.0-rc.1]: https://github.com/actor-framework/actor-framework/releases/0.18.0-rc.1\n[0.17.7]: https://github.com/actor-framework/actor-framework/compare/0.17.6...release/0.17\n[0.17.6]: https://github.com/actor-framework/actor-framework/releases/0.17.6\n[0.17.5]: https://github.com/actor-framework/actor-framework/releases/0.17.5\n[0.17.4]: https://github.com/actor-framework/actor-framework/releases/0.17.4\n[0.17.3]: https://github.com/actor-framework/actor-framework/releases/0.17.3\n[0.17.2]: https://github.com/actor-framework/actor-framework/releases/0.17.2\n[0.17.1]: https://github.com/actor-framework/actor-framework/releases/0.17.1\n[0.17.0]: https://github.com/actor-framework/actor-framework/releases/0.17.0\n[0.16.5]: https://github.com/actor-framework/actor-framework/releases/0.16.5\n[0.16.4]: https://github.com/actor-framework/actor-framework/releases/0.16.4\n[0.16.3]: https://github.com/actor-framework/actor-framework/releases/0.16.3\n[0.16.2]: https://github.com/actor-framework/actor-framework/releases/0.16.2\n[0.16.1]: https://github.com/actor-framework/actor-framework/releases/0.16.1\n[0.16.0]: https://github.com/actor-framework/actor-framework/releases/0.16.0\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 17.3662109375,
          "content": "cmake_minimum_required(VERSION 3.13..3.27 FATAL_ERROR)\nproject(CAF VERSION 1.0.2 LANGUAGES CXX)\n\n# -- version boilerplate -------------------------------------------------------\n\n# Individual components of the version number.\nset(CAF_VERSION_MAJOR ${PROJECT_VERSION_MAJOR}\n    CACHE INTERNAL \"The major version of CAF\" FORCE)\nset(CAF_VERSION_MINOR ${PROJECT_VERSION_MINOR}\n    CACHE INTERNAL \"The minor version of CAF\" FORCE)\nset(CAF_VERSION_PATCH ${PROJECT_VERSION_PATCH}\n    CACHE INTERNAL \"The patch version of CAF\" FORCE)\n\n# The full version number as human-readable string.\nset(CAF_VERSION \"${CAF_VERSION_MAJOR}.${CAF_VERSION_MINOR}.${CAF_VERSION_PATCH}\"\n    CACHE INTERNAL \"The full CAF version string\" FORCE)\n\n# The full version number as integer.\nif(CAF_VERSION_MAJOR LESS 1)\n  set(CAF_VERSION_INT ${CAF_VERSION_MAJOR})\nelse()\n  set(CAF_VERSION_INT \"\")\nendif()\nif(CAF_VERSION_MINOR LESS 10)\n  set(CAF_VERSION_INT ${CAF_VERSION_INT}0${CAF_VERSION_MINOR})\nelse()\n  set(CAF_VERSION_INT ${CAF_VERSION_INT}${CAF_VERSION_MINOR})\nendif()\nif(CAF_VERSION_PATCH LESS 10)\n  set(CAF_VERSION_INT ${CAF_VERSION_INT}0${CAF_VERSION_PATCH})\nelse()\n  set(CAF_VERSION_INT ${CAF_VERSION_INT}${CAF_VERSION_PATCH})\nendif()\n\n# -- includes ------------------------------------------------------------------\n\ninclude(CMakeDependentOption)\ninclude(CMakePackageConfigHelpers)\ninclude(CheckCXXSourceCompiles)\ninclude(CheckCXXSourceRuns)\ninclude(GNUInstallDirs)\ninclude(GenerateExportHeader)\n\n# -- override CMake defaults for internal cache entries ------------------------\n\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON\n    CACHE INTERNAL \"Write JSON compile commands database\")\n\n# -- general options -----------------------------------------------------------\n\noption(BUILD_SHARED_LIBS \"Build shared library targets\" ON)\noption(THREADS_PREFER_PTHREAD_FLAG \"Prefer -pthread flag if available \" ON)\n\n# -- CAF options that are off by default ---------------------------------------\n\noption(CAF_ENABLE_CPACK \"Enable packaging via CPack\" OFF)\noption(CAF_ENABLE_CURL_EXAMPLES \"Build examples with libcurl\" OFF)\noption(CAF_ENABLE_PROTOBUF_EXAMPLES \"Build examples with Google Protobuf\" OFF)\noption(CAF_ENABLE_QT6_EXAMPLES \"Build examples with the Qt6 framework\" OFF)\noption(CAF_ENABLE_ROBOT_TESTS \"Add the Robot tests to CTest \" OFF)\noption(CAF_ENABLE_RUNTIME_CHECKS \"Build CAF with extra runtime assertions\" OFF)\noption(CAF_USE_STD_FORMAT \"Enable std::format support\" OFF)\n\n# -- CAF options that are on by default ----------------------------------------\n\noption(CAF_ENABLE_EXAMPLES \"Build small programs showcasing CAF features\" ON)\noption(CAF_ENABLE_EXCEPTIONS \"Build CAF with support for exceptions\" ON)\noption(CAF_ENABLE_IO_MODULE \"Build legacy networking I/O module\" ON)\noption(CAF_ENABLE_NET_MODULE \"Build networking I/O module\" ON)\noption(CAF_ENABLE_TESTING \"Build unit test suites\" ON)\n\n# -- CAF options that depend on others -----------------------------------------\n\ncmake_dependent_option(CAF_ENABLE_OPENSSL_MODULE \"Build OpenSSL module\" ON\n                       \"CAF_ENABLE_IO_MODULE\" OFF)\n\n# -- CAF options with non-boolean values ---------------------------------------\n\nset(CAF_CXX_VERSION 17 CACHE STRING \"Set the C++ version to use for CAF\")\nset(CAF_LOG_LEVEL \"QUIET\" CACHE STRING \"Set log verbosity of CAF components\")\nset(CAF_EXCLUDE_TESTS \"\" CACHE STRING \"List of excluded test suites\")\nset(CAF_SANITIZERS \"\" CACHE STRING\n    \"Comma separated sanitizers, e.g., 'address,undefined'\")\nset(CAF_BUILD_INFO_FILE_PATH \"\" CACHE FILEPATH\n  \"Optional path for writing CMake and compiler version information\")\n\n# -- macOS-specific options ----------------------------------------------------\n\nif(APPLE)\n  set(CMAKE_MACOSX_RPATH ON CACHE INTERNAL \"Use rpaths on macOS and iOS\")\nendif()\n\n# -- project-specific CMake settings -------------------------------------------\n\nset(CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\n\n# -- sanity checking -----------------------------------------------------------\n\nif(CAF_ENABLE_OPENSSL_MODULE AND NOT CAF_ENABLE_IO_MODULE)\n  message(FATAL_ERROR \"Invalid options: cannot build OpenSSL without I/O\")\nendif()\n\nset(CAF_VALID_LOG_LEVELS QUIET ERROR WARNING INFO DEBUG TRACE)\nif(NOT CAF_LOG_LEVEL IN_LIST CAF_VALID_LOG_LEVELS)\n  message(FATAL_ERROR \"Invalid log level: \\\"${CAF_LOG_LEVEL}\\\"\")\nendif()\n\nif(MSVC AND CAF_SANITIZERS)\n  message(FATAL_ERROR \"Sanitizer builds are currently not supported on MSVC\")\nendif()\n\n# -- doxygen setup -------------------------------------------------------------\n\nconfigure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/Doxyfile.in\"\n               \"${CMAKE_CURRENT_BINARY_DIR}/Doxyfile\"\n               IMMEDIATE @ONLY)\n\n# -- get dependencies that are used in more than one module --------------------\n\nif(CAF_ENABLE_OPENSSL_MODULE OR CAF_ENABLE_NET_MODULE)\n  if(NOT TARGET OpenSSL::SSL OR NOT TARGET OpenSSL::Crypto)\n    find_package(OpenSSL REQUIRED)\n  endif()\nendif()\n\n# -- base target setup ---------------------------------------------------------\n\n# This target propagates compiler flags, extra dependencies, etc. All other CAF\n# targets pull this target in as a PRIVATE dependency. Users that embed CAF into\n# their own CMake scaffold (e.g., via FetchContent) may pass this target in with\n# some properties predefined in order to force compiler flags or dependencies.\nif(NOT TARGET caf_internal)\n  message(STATUS \"Build CAF with C++${CAF_CXX_VERSION}\")\n  add_library(caf_internal INTERFACE)\n  target_compile_features(caf_internal INTERFACE cxx_std_${CAF_CXX_VERSION})\nendif()\n\nif(CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" OR CMAKE_CXX_COMPILER_ID MATCHES \"GNU\")\n  target_compile_options(caf_internal INTERFACE -Wall -Wextra -pedantic\n                         -ftemplate-depth=512 -ftemplate-backtrace-limit=0)\n  if(CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n    target_compile_options(caf_internal INTERFACE -Wdocumentation)\n  else()\n    target_compile_options(caf_internal INTERFACE\n                           -Wno-missing-field-initializers)\n  endif()\nelseif(MSVC)\n  target_compile_options(caf_internal INTERFACE /EHsc)\nendif()\n\n# -- unit testing setup --------------------------------------------------------\n\nif(CAF_ENABLE_TESTING)\n  enable_testing()\nendif()\n\n# -- export internal target (may be useful for re-using compiler flags) --------\n\nset_target_properties(caf_internal PROPERTIES EXPORT_NAME internal)\n\nadd_library(CAF::internal ALIAS caf_internal)\n\ninstall(TARGETS caf_internal EXPORT CAFTargets)\n\n# -- create the libcaf_test target ahead of time for caf_core ------------------\n\nadd_library(libcaf_test)\n\n# -- add uninstall target if it does not exist yet -----------------------------\n\nif(NOT TARGET uninstall)\n  configure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/uninstall.cmake.in\"\n                 \"${CMAKE_CURRENT_BINARY_DIR}/uninstall.cmake\"\n                 IMMEDIATE @ONLY)\n  add_custom_target(\n    uninstall\n    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/uninstall.cmake)\nendif()\n\n# -- utility functions ---------------------------------------------------------\n\n# generates the implementation file for the enum that contains to_string,\n# from_string and from_integer\nfunction(caf_add_enum_type target enum_name)\n  string(REPLACE \".\" \"/\" path \"${enum_name}\")\n  set(hpp_file \"${CMAKE_CURRENT_SOURCE_DIR}/caf/${path}.hpp\")\n  set(cpp_file \"${CMAKE_CURRENT_BINARY_DIR}/src/${path}_strings.cpp\")\n  set(gen_file \"${PROJECT_SOURCE_DIR}/cmake/caf-generate-enum-strings.cmake\")\n  add_custom_command(OUTPUT \"${cpp_file}\"\n                     COMMAND ${CMAKE_COMMAND}\n                       \"-DINPUT_FILE=${hpp_file}\"\n                       \"-DOUTPUT_FILE=${cpp_file}\"\n                       -P \"${gen_file}\"\n                     DEPENDS \"${hpp_file}\" \"${gen_file}\")\n  target_sources(${target} PRIVATE \"${cpp_file}\")\nendfunction()\n\nfunction(caf_export_and_install_lib component)\n  add_library(CAF::${component} ALIAS libcaf_${component})\n  string(TOUPPER \"CAF_${component}_EXPORT\" export_macro_name)\n  generate_export_header(\n    libcaf_${component}\n    EXPORT_MACRO_NAME ${export_macro_name}\n    EXPORT_FILE_NAME \"caf/detail/${component}_export.hpp\")\n  set_target_properties(libcaf_${component} PROPERTIES\n                        EXPORT_NAME ${component}\n                        SOVERSION ${CAF_VERSION}\n                        VERSION ${CAF_VERSION_MAJOR}\n                        OUTPUT_NAME caf_${component})\n  install(TARGETS libcaf_${component}\n          EXPORT CAFTargets\n          ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT ${component}\n          RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT ${component}\n          LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT ${component})\n  install(DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/caf\"\n          DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n          COMPONENT ${component}\n          FILES_MATCHING PATTERN \"*.hpp\"\n          PATTERN \"*/internal/*\" EXCLUDE)\n  install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/caf/detail/${component}_export.hpp\"\n          DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/caf/detail/\")\nendfunction()\n\n# -- convenience function for automating our component setup -------------------\n\nfunction(caf_add_log_component name)\n  set(CAF_COMPONENT_NAME ${name})\n  configure_file(\"${PROJECT_SOURCE_DIR}/cmake/log.hpp.in\"\n                 \"${CMAKE_CURRENT_BINARY_DIR}/caf/log/${name}.hpp\"\n                 @ONLY)\n  install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/caf/log/${name}.hpp\"\n          DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/caf/log/\")\nendfunction()\n\n# Usage:\n# caf_add_component(\n#   foo\n#   DEPENDENCIES\n#     INTERFACE\n#       ...\n#     PUBLIC\n#       ...\n#     PRIVATE\n#       ...\n#   HEADERS\n#     ...\n#   SOURCES\n#     ...\n# )\nfunction(caf_add_component name)\n  set(varargs DEPENDENCIES HEADERS SOURCES ENUM_TYPES)\n  cmake_parse_arguments(CAF_ADD_COMPONENT \"\" \"\" \"${varargs}\" ${ARGN})\n  if(NOT CAF_ADD_COMPONENT_HEADERS)\n    message(FATAL_ERROR \"Cannot add CAF component without at least one header.\")\n  endif()\n  if(NOT CAF_ADD_COMPONENT_SOURCES)\n    message(FATAL_ERROR \"Cannot add CAF component without at least one source.\")\n  endif()\n  foreach(param DEPENDENCIES HEADERS SOURCES)\n    if(NOT CAF_ADD_COMPONENT_${param})\n      message(FATAL_ERROR \"caf_add_component(): missing parameter ${param}\")\n    endif()\n  endforeach()\n  set(lib_target \"libcaf_${name}\")\n  if(NOT TARGET ${lib_target})\n    add_library(${lib_target} \"${PROJECT_SOURCE_DIR}/cmake/dummy.cpp\")\n  endif()\n  set_property(TARGET ${lib_target} PROPERTY POSITION_INDEPENDENT_CODE ON)\n  target_link_libraries(${lib_target} ${CAF_ADD_COMPONENT_DEPENDENCIES})\n  target_compile_definitions(${lib_target} PRIVATE \"libcaf_${name}_EXPORTS\")\n  target_include_directories(${lib_target} PUBLIC\n                             $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>\n                             $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>\n                             $<INSTALL_INTERFACE:include>)\n  caf_add_log_component(${name})\n  if(BUILD_SHARED_LIBS)\n    set_target_properties(${lib_target} PROPERTIES\n                          CXX_VISIBILITY_PRESET hidden\n                          VISIBILITY_INLINES_HIDDEN ON)\n  endif()\n  if(CAF_ENABLE_TESTING)\n    add_executable(\"caf-${name}-test\" ${CMAKE_CURRENT_SOURCE_DIR}/main.test.cpp)\n    target_compile_definitions(\n      \"caf-${name}-test\" PRIVATE\n      CAF_TEST_DATA_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}/tests/data\")\n    target_link_libraries(\"caf-${name}-test\" PRIVATE libcaf_test\n                          ${CAF_ADD_COMPONENT_DEPENDENCIES} ${lib_target})\n  endif()\n  foreach(source_file ${CAF_ADD_COMPONENT_SOURCES})\n    get_filename_component(ext ${source_file} EXT)\n    if(ext STREQUAL \".cpp\")\n      target_sources(${lib_target} PRIVATE ${source_file})\n    elseif(ext STREQUAL \".test.cpp\" AND CAF_ENABLE_TESTING)\n      get_filename_component(test_name ${source_file} NAME_WE)\n      get_filename_component(test_path ${source_file} DIRECTORY)\n      string(REPLACE \"/\" \".\" test_name \"${test_path}/${test_name}\")\n      target_sources(\"caf-${name}-test\" PRIVATE ${source_file})\n      set_property(SOURCE ${source_file} PROPERTY COMPILE_DEFINITIONS\n                   CAF_TEST_SUITE_NAME=${test_name})\n      add_test(NAME ${test_name} COMMAND \"caf-${name}-test\" -s \"^${test_name}$\" -n -v5)\n      set_tests_properties(${test_name} PROPERTIES TIMEOUT 300)\n      if (MSVC)\n        set_source_files_properties(${source_file} PROPERTIES\n                                    COMPILE_FLAGS /wd4996)\n      else()\n        set_source_files_properties(${source_file} PROPERTIES\n                                    COMPILE_FLAGS -Wno-deprecated-declarations)\n      endif()\n    endif()\n  endforeach()\n  target_link_libraries(${lib_target} ${CAF_ADD_COMPONENT_DEPENDENCIES})\n  if(CAF_ADD_COMPONENT_ENUM_TYPES)\n    # OBJECT lib: workaround for https://gitlab.kitware.com/cmake/cmake/-/issues/18399\n    add_library(${name}_enums OBJECT)\n    set_property(TARGET ${name}_enums PROPERTY POSITION_INDEPENDENT_CODE ON)\n    target_link_libraries(${name}_enums CAF::internal)\n    if(NOT name STREQUAL core)\n      # Implementations need access to headers such as config.hpp.\n      target_link_libraries(${name}_enums CAF::core)\n    endif()\n    target_include_directories(${name}_enums PRIVATE\n                               ${CMAKE_CURRENT_SOURCE_DIR}\n                               ${CMAKE_CURRENT_BINARY_DIR})\n    foreach(enum_name ${CAF_ADD_COMPONENT_ENUM_TYPES})\n      caf_add_enum_type(${name}_enums ${enum_name})\n    endforeach()\n    target_sources(${lib_target} PRIVATE $<TARGET_OBJECTS:${name}_enums>)\n    target_compile_definitions(${name}_enums PRIVATE libcaf_${name}_EXPORTS)\n  endif()\n  caf_export_and_install_lib(${name})\nendfunction()\n\n# -- convenience function for adding executable targets of tests ---------------\n\n# Usage:\n# caf_add_test_executable(\n#   foo\n#   DEPENDENCIES\n#     ...\n#   SOURCES\n#     ...\n# )\nfunction(caf_add_test_executable name)\n  if(NOT CAF_ENABLE_TESTING)\n    return()\n  endif()\n  set(varargs DEPENDENCIES SOURCES)\n  cmake_parse_arguments(args \"\" \"\" \"${varargs}\" ${ARGN})\n  if(NOT args_SOURCES)\n    message(FATAL_ERROR \"Cannot add a CAF test executable without sources.\")\n  endif()\n  add_executable(${name} ${args_SOURCES})\n  target_link_libraries(${name} PRIVATE CAF::internal ${args_DEPENDENCIES})\nendfunction()\n\n# -- build all components the user asked for -----------------------------------\n\nadd_subdirectory(libcaf_core)\n\nadd_subdirectory(libcaf_test)\n\nif(CAF_ENABLE_NET_MODULE)\n  add_subdirectory(libcaf_net)\nendif()\n\nif(CAF_ENABLE_IO_MODULE)\n  add_subdirectory(libcaf_io)\nendif()\n\nif(CAF_ENABLE_OPENSSL_MODULE)\n  add_subdirectory(libcaf_openssl)\nendif()\n\nif(CAF_ENABLE_EXAMPLES)\n  add_subdirectory(examples)\nendif()\n\n# -- optionally add the Robot tests to CTest -----------------------------------\n\nif(CAF_ENABLE_TESTING AND CAF_ENABLE_ROBOT_TESTS)\n  add_subdirectory(robot)\nendif()\n\n# -- add top-level compiler and linker flags that propagate to clients ---------\n\n# Disable warnings regarding C++ classes at ABI boundaries on MSVC.\nif(BUILD_SHARED_LIBS AND MSVC)\n  target_compile_options(libcaf_core INTERFACE /wd4275 /wd4251)\nendif()\n\n# Propgatate sanitizer flags to downstream targets.\nif(CAF_SANITIZERS)\n  foreach(target caf_internal libcaf_core)\n    target_compile_options(${target} INTERFACE\n                           -fsanitize=${CAF_SANITIZERS}\n                           -fno-omit-frame-pointer)\n    if(CMAKE_VERSION VERSION_LESS 3.13)\n      target_link_libraries(${target} INTERFACE\n                            -fsanitize=${CAF_SANITIZERS}\n                            -fno-omit-frame-pointer)\n    else()\n      target_link_options(${target} INTERFACE\n                          -fsanitize=${CAF_SANITIZERS}\n                          -fno-omit-frame-pointer)\n    endif()\n  endforeach()\nendif()\n\n\n# -- generate and install .cmake files -----------------------------------------\n\nexport(EXPORT CAFTargets FILE CAFTargets.cmake NAMESPACE CAF::)\n\ninstall(EXPORT CAFTargets\n        DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/CAF\"\n        NAMESPACE CAF::)\n\nwrite_basic_package_version_file(\n  \"${CMAKE_CURRENT_BINARY_DIR}/CAFConfigVersion.cmake\"\n  VERSION ${CAF_VERSION}\n  COMPATIBILITY SameMajorVersion)\n\nconfigure_package_config_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/CAFConfig.cmake.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/CAFConfig.cmake\"\n  INSTALL_DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/CAF\")\n\ninstall(\n  FILES\n    \"${CMAKE_CURRENT_BINARY_DIR}/CAFConfig.cmake\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/CAFConfigVersion.cmake\"\n  DESTINATION\n    \"${CMAKE_INSTALL_LIBDIR}/cmake/CAF\")\n\n# -- extra file output (primarily for CAF CI) ----------------------------------\n\nif(CAF_BUILD_INFO_FILE_PATH)\n  configure_file(\"${PROJECT_SOURCE_DIR}/cmake/caf-build-info.txt.in\"\n                 \"${CAF_BUILD_INFO_FILE_PATH}\"\n                 @ONLY)\nendif()\n\n# -- CPack setup ---------------------------------------------------------------\n\nif(CAF_ENABLE_CPACK)\n  include(InstallRequiredSystemLibraries)\n  set(CPACK_PACKAGE_NAME \"CAF\")\n  set(CPACK_PACKAGE_VENDOR \"CAF Community\")\n  set(CPACK_RESOURCE_FILE_LICENSE \"${PROJECT_SOURCE_DIR}/LICENSE\")\n  set(CPACK_PACKAGE_VERSION_MAJOR \"${CAF_VERSION_MAJOR}\")\n  set(CPACK_PACKAGE_VERSION_MINOR \"${CAF_VERSION_MINOR}\")\n  set(CPACK_PACKAGE_VERSION_PATCH \"${CAF_VERSION_PATCH}\")\n  set(CPACK_PACKAGE_DESCRIPTION\n      \"To learn more about CAF, please visit https://www.actor-framework.org.\")\n    set(CPACK_PACKAGE_DESCRIPTION_SUMMARY\n        \"CAF offers high-level building blocks for concurrency & distribution.\")\n  set(CPACK_PACKAGE_HOMEPAGE_URL \"https://www.actor-framework.org\")\n  set(CPACK_PACKAGE_ICON \"${PROJECT_SOURCE_DIR}/doc/png/logo-1000x1000.png\")\n  if(NOT CPACK_SOURCE_GENERATOR)\n    set(CPACK_SOURCE_GENERATOR \"TGZ\")\n  endif()\n  include(CPack)\nendif()\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.1015625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\ncommunity@interance.io.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 9.4677734375,
          "content": "Git Workflow\n============\n\nPlease adhere to the following Git naming and commit message conventions. Having\na consistent work flow and style reduces friction and makes organizing\ncontributions a lot easier for all sides.\n\nBranches\n--------\n\n- Our main branch is `main`. It reflects the latest development changes for the\n  next release and should always compile. Nightly versions use the `main`\n  branch. Users looking for a production-ready state are encouraged to use the\n  latest release version.\n\n- As an external contributor, please fork the project on GitHub and create a\n  pull request for your proposed changes. Otherwise, follow the guidelines\n  below.\n\n- After a GitHub issue has been assigned to you, create a branch with naming\n  convention `issue/$num`, where `$num` is the issue ID on GitHub. Once you are\n  ready, create a pull request for your branch. You can also file a draft pull\n  request to get early feedback. In the pull request, put \"Closes #$num.\" or\n  \"Fixes #$num.\" into the description if the pull request resolves the issue. If\n  the pull request only partially addresses the issue, use \"Relates #$num.\"\n\n- For smaller changes that do not have a GitHub issue, we use topic branches\n  with naming convention `topic/$user/short-description`. For example, a branch\n  for fixing some typos in the documentation by user `johndoe` could be named\n  `topic/johndoe/fix-doc-typos`.\n\nCommit Message Style\n--------------------\n\n- Summarize the changes in no more than 50 characters in the first line.\n  Capitalize and write in an imperative present tense, e.g., \"Fix bug\" as\n  opposed to \"Fixes bug\" or \"Fixed bug\".\n\n- Suppress the dot at the end of the first line. Think of it as the header of\n  the following description.\n\n- Leave the second line empty.\n\n- Optionally add a long description written in full sentences beginning on the\n  third line. Indent at 72 characters per line.\n\nPull Requests\n-------------\n\n- Squash your commits into a single one before filing a pull request if\n  necessary. Each commit should represent a coherent set of changes.\n\n- Wait for the results of our CI and fix all issues. Our CI builds CAF with GCC,\n  Clang, and MSVC on various platforms and makes sure that the code is formatted\n  correctly. We also measure code coverage and require that new code is covered\n  by tests.\n\n- We require at least one code review approval before merging a pull request. We\n  take the review phase seriously and have a high bar for code quality. Multiple\n  rounds of review are common.\n\n- In case there are multiple rounds of review, please do not squash the commits\n  until everything is resolved. This makes it easier for reviewers to see what\n  has changed since the last review.\n\n- A usual commit message for the review phase is \"Integrate review feedback\" or\n  \"Address review feedback\" if you only changed the code according to the review\n  recommendations.\n\n- A maintainer will merge the pull request when all issues are resolved and the\n  pull request has been approved by at least one reviewer. If there have been\n  multiple rounds of review, the maintainer may squash the commits.\n\nCoding Style\n============\n\nWhen contributing source code, please adhere to the following coding style,\nwhich is loosely based the C++ Core Guidelines and the coding conventions used\nby the C++ Standard Library.\n\nExample for the Impatient\n-------------------------\n\n```c++\n// File: libcaf_foo/caf/foo/my_class.hpp\n\n// This file is part of CAF, the C++ Actor Framework. See the file LICENSE in\n// the main distribution directory for license terms and copyright or visit\n// https://github.com/actor-framework/actor-framework/blob/main/LICENSE.\n\n#pragma once\n\n#include <string>\n\n// use \"//\" for regular comments and \"///\" for doxygen\n\nnamespace caf::foo {\n\n/// This class is only being used as style guide example.\nclass my_class {\npublic:\n  /// Brief description. More description. Note that CAF uses the\n  /// \"JavaDoc-style\" autobrief option, i.e., everything up until the\n  /// first dot is the brief description.\n  my_class();\n\n  /// Destructs `my_class`. Please use Markdown in comments.\n  ~my_class();\n\n  // omit redundant @return if you start the brief description with \"Returns\"\n  /// Returns the name of this instance.\n  const std::string& name() const noexcept {\n    return name_;\n  }\n\n  /// Sets the name of this instance.\n  void name(const std::string& new_name) {\n    name_ = std::move(new_name);\n  }\n\n  /// Prints the name to `std::cout`.\n  void print_name() const;\n\nprivate:\n  std::string name_; // Private member variables end with an underscore.\n};\n\n} // namespace caf::foo\n```\n\n```c++\n// File: libcaf_foo/caf/foo/my_class.cpp\n\n// This file is part of CAF, the C++ Actor Framework. See the file LICENSE in\n// the main distribution directory for license terms and copyright or visit\n// https://github.com/actor-framework/actor-framework/blob/main/LICENSE.\n\n#include \"caf/foo/my_class.hpp\"\n\n#include <iostream>\n#include <string_view>\n\nnamespace caf::foo {\n\nnamespace {\n\nconstexpr std::string_view default_name = \"my object\";\n\n} // namespace\n\nmy_class::my_class() : name_(default_name) {\n  // nop\n}\n\nmy_class::~my_class() {\n  // nop\n}\n\nvoid my_class::print_name() const {\n  std::cout << name() << std::endl;\n}\n\n} // namespace caf::foo\n```\n\n```c++\n// File: libcaf_foo/caf/foo/my_class.test.cpp\n\n// This file is part of CAF, the C++ Actor Framework. See the file LICENSE in\n// the main distribution directory for license terms and copyright or visit\n// https://github.com/actor-framework/actor-framework/blob/main/LICENSE.\n\n#include \"caf/example/my_class.hpp\" // the header-under-test\n\n#include \"caf/test/caf_test_main.hpp\"\n#include \"caf/test/test.hpp\"\n\nTEST(\"my_class::name gets or sets the name\") {\n  caf::foo::my_class x;\n  check_eq(x.name(), \"my object\");\n  x.name(\"new name\");\n  check_eq(x.name(), \"new name\");\n}\n\nCAF_TEST_MAIN()\n```\n\nGeneral\n-------\n\nSource code must be formatted using `clang-format` with the configuration file\n`.clang-format` in the root directory of the repository. The following rules are\nnot enforced by `clang-format` and must be applied manually:\n\n- Never use C-style casts.\n\n- Never declare more than one variable per line.\n\n- Only separate functions with vertical whitespaces and use comments to\n  document logical blocks inside functions.\n\n- Use `.hpp` as suffix for header files, `.cpp` as suffix for implementation\n  files and `.test.cpp` as suffix for unit tests.\n\n- Use `#include \"caf/foo/bar.hpp\"` for CAF headers and `#include <foo/bar.hpp>`\n  for third-party headers.\n\n- Use the order `public`, `protected`, and then `private` in classes.\n\n- Always use `auto` to declare a variable unless you cannot initialize it\n  immediately or if you actually want a type conversion. In the latter case,\n  provide a comment why this conversion is necessary.\n\n- Never use unwrapped, manual resource management such as `new` and `delete`,\n  except when implementing a smart pointer or a similar abstraction.\n\n- Prefer algorithms over manual loops.\n\n- Prefer `using T = X` over `typedef X T`.\n\n- Protect single-argument constructors with `explicit` to avoid implicit\n  conversions.\n\n- Use `noexcept` and attributes such as `[[nodiscard]]` whenever it makes sense\n  and as long as it does not limit future design space. For example, move\n  construction and assignment are natural candidates for `noexcept`.\n\nNaming\n------\n\n- All names except macros and template parameters should be lower case and\n  delimited by underscores, i.e., `snake_case`.\n\n- Template parameter names should be written in `CamelCase`.\n\n- Types and variables should be nouns, while functions performing an action\n  should be \"command\" verbs. Classes used to implement metaprogramming functions\n  also should use verbs, e.g., `remove_const`.\n\n- Private and protected member variables use the suffix `_` while getter *and*\n  setter functions use the name without suffix:\n\n  ```c++\n  class person {\n  public:\n    person(std::string name) : name_(std::move(name)) {\n      // nop\n    }\n\n    const std::string& name() const noexcept {\n      return name_\n    }\n\n    void name(const std::string& new_name) {\n      name_ = new_name;\n    }\n\n  private:\n    std::string name_;\n  };\n  ```\n\nHeaders\n-------\n\n- All header files use `#pragma once` to prevent multiple inclusion.\n\n- Each library component should provide a `fwd.hpp` header providing forward\n  declarations for its public types.\n\n- Only include the forwarding header when a forward declaration suffices.\n\n- Implement small functions inline (rule of thumb: 5 lines or less).\n\nPreprocessor Macros\n-------------------\n\n- Use macros if and only if you can't get the same result by using inline\n  functions, templates, or proper constants.\n\n- Macro names use the form `CAF_<COMPONENT>_<NAME>`.\n\nComments\n--------\n\n- Start Doxygen comments with `///`.\n\n- Use Markdown syntax in Doxygen comments.\n\n- Use `@cmd` rather than `\\cmd`.\n\n- Use `//` to define basic comments that should not be processed by Doxygen.\n\n- Never use `/* ... */` C-style comments.\n\nImplementation Details\n----------------------\n\nWe use two namespaces for implementation details: `detail` and `internal`. Both\nare considered private and should not be used by users of CAF. The difference\nbetween the two is that `internal` contains code that is shared only between\nmultiple `.cpp` files in the same module. An `internal` component is never\nexported (and thus does not become part of the CAF ABI) and we do not install\nheaders for it. We prefer `internal` whenever possible to keep the ABI minimal.\n\nHowever, there cases where `internal` is not suitable, e.g., when a type must be\nincluded in a public CAF header. In such cases, use `detail` instead.\n"
        },
        {
          "name": "Jenkinsfile",
          "type": "blob",
          "size": 7.0458984375,
          "content": "#!/usr/bin/env groovy\n\n@Library('caf-continuous-integration') _\n\n// Configures the behavior of our stages.\nconfig = [\n    // Version dependency for the caf-continuous-integration library.\n    ciLibVersion: 1.0,\n    // GitHub path to repository.\n    repository: 'actor-framework/actor-framework',\n    // List of enabled checks for email notifications.\n    checks: [\n        'build',\n        'tests',\n    ],\n    // Default CMake flags for the builds.\n    buildFlags: [\n        'CAF_ENABLE_ACTOR_PROFILER:BOOL=ON',\n        'CAF_ENABLE_EXAMPLES:BOOL=ON',\n        'CAF_ENABLE_ROBOT_TESTS:BOOL=ON',\n        'CAF_ENABLE_RUNTIME_CHECKS:BOOL=ON',\n    ],\n    // Our build matrix. Keys are the operating system labels and values are build configurations.\n    // Note on no-maybe-uninitialized: some GCC versions have weird bugs that causes false positives.\n    buildMatrix: [\n        // Release builds.\n        ['almalinux-8', [ // EOL: June 2029\n            numCores: 4,\n            tags: ['docker'],\n            builds: ['release'],\n            extraBuildFlags: [\n                'CMAKE_CXX_FLAGS:STRING=-Werror -Wno-maybe-uninitialized',\n            ],\n        ]],\n        ['almalinux-9', [ // EOL: May 2032\n            numCores: 4,\n            tags: ['docker'],\n            builds: ['release'],\n            extraBuildFlags: [\n                'CMAKE_CXX_FLAGS:STRING=-Werror -Wno-maybe-uninitialized',\n            ],\n        ]],\n        ['alpinelinux-3.18', [ // EOL: May 2025\n            numCores: 4,\n            tags: ['docker'],\n            builds: ['release'],\n            extraBuildFlags: [\n                'CMAKE_CXX_FLAGS:STRING=-Werror -Wno-maybe-uninitialized -Wno-array-bounds -Wno-free-nonheap-object',\n            ],\n        ]],\n        ['debian-11', [ // EOL June 2026\n            numCores: 4,\n            tags: ['docker'],\n            builds: ['release'],\n            extraBuildFlags: [\n                'CMAKE_CXX_FLAGS:STRING=-Werror -Wno-maybe-uninitialized -Wno-deprecated-declarations',\n            ],\n        ]],\n        ['debian-12', [ // EOL June 2028\n            numCores: 4,\n            tags: ['docker'],\n            builds: ['release'],\n            extraBuildFlags: [\n                'CMAKE_CXX_FLAGS:STRING=-Werror -Wno-maybe-uninitialized -Wno-array-bounds -Wno-free-nonheap-object',\n            ],\n        ]],\n        ['fedora-39', [ // EOL November 2024\n            numCores: 4,\n            tags: ['docker'],\n            builds: ['release'],\n            extraBuildFlags: [\n                'CMAKE_CXX_FLAGS:STRING=-Werror -Wno-maybe-uninitialized -Wno-array-bounds',\n            ],\n        ]],\n        ['fedora-40', [ // EOL May 2025\n            numCores: 4,\n            tags: ['docker'],\n            builds: ['release'],\n            extraBuildFlags: [\n                'CMAKE_CXX_FLAGS:STRING=-Werror -Wno-maybe-uninitialized -Wno-uninitialized -Wno-array-bounds -Wno-free-nonheap-object',\n                'CAF_CXX_VERSION:STRING=23',\n                'CAF_USE_STD_FORMAT:BOOL=ON',\n            ],\n        ]],\n        ['ubuntu-20.04', [ // April 2025\n            numCores: 4,\n            tags: ['docker'],\n            builds: ['release'],\n            extraBuildFlags: [\n                'CMAKE_CXX_FLAGS:STRING=-Werror',\n            ],\n        ]],\n        ['ubuntu-22.04', [ // April 2027\n            numCores: 4,\n            tags: ['docker'],\n            builds: ['release'],\n            extraBuildFlags: [\n                'CMAKE_CXX_FLAGS:STRING=-Werror -Wno-maybe-uninitialized',\n            ],\n        ]],\n        ['ubuntu-24.04', [ // April 2029\n            numCores: 4,\n            tags: ['docker'],\n            builds: ['release'],\n            extraBuildFlags: [\n                'CMAKE_CXX_FLAGS:STRING=-Werror -Wno-maybe-uninitialized -Wno-array-bounds',\n            ],\n        ]],\n        // Debug build with exceptions disabled.\n        ['fedora-40:no-exceptions', [\n            numCores: 4,\n            tags: ['docker'],\n            builds: ['debug'],\n            extraBuildFlags: [\n                'CAF_LOG_LEVEL:STRING=TRACE',\n                'CAF_ENABLE_EXCEPTIONS:BOOL=OFF',\n                'CMAKE_CXX_FLAGS:STRING=-Werror -fno-exceptions',\n            ],\n        ]],\n        // Debug build for LeakSanitizer.\n        ['fedora-40:leak-checks', [\n            numCores: 4,\n            tags: ['docker', 'LeakSanitizer'],\n            builds: ['debug'],\n            extraBuildFlags: [\n                'BUILD_SHARED_LIBS:BOOL=OFF',\n                'CAF_LOG_LEVEL:STRING=TRACE',\n                'CAF_SANITIZERS:STRING=address',\n            ],\n            extraBuildEnv: [\n                'ASAN_OPTIONS=detect_leaks=1',\n            ],\n        ]],\n        // Debug build with static libs, UBSan and hardening flags.\n        ['fedora-40:ub-checks', [\n            numCores: 4,\n            tags: ['docker', 'UBSanitizer'],\n            builds: ['debug'],\n            extraBuildFlags: [\n                'BUILD_SHARED_LIBS:BOOL=OFF',\n                'CAF_LOG_LEVEL:STRING=TRACE',\n                'CAF_SANITIZERS:STRING=address,undefined',\n                'CMAKE_CXX_FLAGS:STRING=-Werror',\n            ],\n            extraBuildEnv: [\n                'CXXFLAGS=-fno-sanitize-recover=undefined -D_GLIBCXX_DEBUG',\n                'LDFLAGS=-fno-sanitize-recover=undefined',\n            ],\n        ]],\n        // Run the Autobahn test suite for WebSocket conformance.\n        ['autobahn-testsuite', [\n            numCores: 4,\n            tags: ['docker'],\n            builds: ['release'],\n            extraScripts: [\n                \"./sources/.ci/autobahn-testsuite/run.sh build\",\n            ],\n            extraBuildFlags: [\n                'CAF_ENABLE_EXAMPLES:BOOL=OFF',\n                'CAF_ENABLE_IO_MODULE:BOOL=OFF',\n                'CAF_ENABLE_IO_TOOLS:BOOL=OFF',\n                'CAF_ENABLE_ROBOT_TESTS:BOOL=OFF',\n                'CAF_ENABLE_RUNTIME_CHECKS:BOOL=ON',\n                'CAF_ENABLE_SHARED_LIBS:BOOL=OFF',\n            ],\n        ]],\n    ],\n]\n\n// Declarative pipeline for triggering all stages.\npipeline {\n    options {\n        buildDiscarder(logRotator(numToKeepStr: '50', artifactNumToKeepStr: '3'))\n    }\n    agent {\n        label 'master'\n    }\n    environment {\n        PrettyJobBaseName = env.JOB_BASE_NAME.replace('%2F', '/')\n        PrettyJobName = \"CAF/$PrettyJobBaseName #${env.BUILD_NUMBER}\"\n    }\n    stages {\n        stage('Checkout') {\n            steps {\n                getSources(config)\n            }\n        }\n        stage('Build') {\n            steps {\n                buildParallel(config)\n            }\n        }\n        stage('Notify') {\n            steps {\n                collectResults(config, PrettyJobName)\n            }\n        }\n    }\n    post {\n        failure {\n            emailext(\n                subject: \"$PrettyJobName: \" + config['checks'].collect{ \"⛔️ ${it}\" }.join(', '),\n                recipientProviders: [culprits(), developers(), requestor(), upstreamDevelopers()],\n                attachLog: true,\n                compressLog: true,\n                body: \"Check console output at ${env.BUILD_URL} or see attached log.\\n\",\n            )\n            notifyAllChecks(config, 'failure', 'Failed due to earlier error')\n        }\n    }\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.482421875,
          "content": "Copyright (c) 2011-2024, Dominik Charousset\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n    * Neither the name of the copyright holder nor the names of its\n      contributors may be used to endorse or promote products derived from\n      this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY DIRECT,\nINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\nBUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\nOR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\nADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.5390625,
          "content": "[![Gitter][gitter-badge]](https://gitter.im/actor-framework/chat)\n[![Documentation Status][docs-badge]](http://actor-framework.readthedocs.io/en/latest/?badge=latest)\n[![Coverage][coverage-badge]](https://codecov.io/gh/actor-framework/actor-framework)\n\n# What is CAF?\n\nCAF is an open source framework that offers a programming environment based on\nthe [Actor Model](https://en.wikipedia.org/wiki/Actor_model) of computation\ncombined with a [scalable](https://dl.acm.org/doi/10.1145/2541329.2541336),\n[native](https://www.sciencedirect.com/science/article/abs/pii/S1477842416000038)\nruntime environment that lets you build applications at a high level of\nabstraction without sacrificing performance. Whether you are targeting a single\nmachine, a data center, or the cloud, CAF provides the necessary tools to\nimplement robust, scalable, and maintainable software.\n\nCAF features lightweight & fast actor implementations, data flows, HTTP and\nWebSocket support, pattern matching for messages, metrics, distributed actors,\nand more. Professional support, training, and consulting are available from\n[Interance](https://www.interance.io), the company behind CAF.\n\n## Online Resources\n\n* __Homepage__: https://www.actor-framework.org\n* __Guides and Tutorials__: https://www.interance.io/learning\n* __Manual__: https://actor-framework.readthedocs.io\n* __Doxygen__: https://www.actor-framework.org/doxygen\n* __Developer Blog__: https://www.actor-framework.org/blog\n\n## Report Bugs and Get Help\n\n* __Open Issues on GitHub__: https://github.com/actor-framework/actor-framework/issues/new\n* __Ask Questions on StackOverflow__: https://stackoverflow.com/questions/ask?tags=c%2b%2b-actor-framework\n\n## Community\n\n* __Chat__: https://gitter.im/actor-framework/chat\n* __Mastodon__: https://fosstodon.org/@caf\n* __Twitter__: https://twitter.com/actor_framework\n* __Mailing List__: https://groups.google.com/d/forum/actor-framework\n\n## Get CAF\n\nWe do not officially maintain packages for CAF. However, some of our community\nmembers made packages available for these package managers:\n\n- [Conan](https://conan.io/center/caf)\n- [FreeBSD Ports](https://svnweb.freebsd.org/ports/head/devel/caf)\n- [Homebrew](https://formulae.brew.sh/formula/caf).\n- [VCPKG](https://github.com/microsoft/vcpkg/tree/master/ports/caf)\n- [Fedora](https://src.fedoraproject.org/rpms/actor-framework)\n\n## Get the Sources\n\n```sh\ngit clone https://github.com/actor-framework/actor-framework.git\ncd actor-framework\n```\n\n## Build CAF from Source\n\nCAF uses [CMake](http://www.cmake.org) as its build system of choice. To make\nbuilding CAF more convenient from the command line, we provide a `configure`\nscript that wraps the CMake invocation. The script only works on UNIX systems.\nOn Windows, we recommend generating an MSVC project file via CMake for native\nbuilds.\n\n### Using the `configure` Script\n\nThe script is a convenient frontend for `CMake`. See `configure -h` for a list\nof available options. By default, the script creates a `build` directory and\nasks CMake to generate a `Makefile`. A build with default settings generally\nfollows these steps:\n\n```sh\n./configure\ncd build\nmake\nmake test [optional]\nmake install [as root, optional]\n```\n\n### Using CMake\n\nTo generate a Makefile for building CAF with default settings, either use a\nCMake GUI or perform this step on the command line:\n\n```sh\ncmake -S <path-to-caf-sources> -B build\n```\n\nAfter this step, `cmake -LH` prints the most useful configuration options for\nCAF, their default value, and a helptext.\n\nOther CMake projects can add CAF as a dependency by using `find_package` and\nlisting the required modules (e.g., `core` or `net`) . When installing CAF to a\nnon-standard location, set `CAF_ROOT` prior to calling `find_package`.\n\n## Dependencies\n\n* CMake (for building CAF)\n* OpenSSL (when building the `openssl` or `net` module)\n\n## Supported Platforms\n\nC++ is an evolving language. Compiler vendors constantly add more language and\nstandard library features. Since CAF runs on many platforms, this means we need\na policy that on the one hand ensures that we only use a widely supported subset\nof C++ and on the other hand that we naturally progress with the shifting\nlandscape to eventually catch up to more recent C++ additions (in order to not\n\"get stuck\").\n\nSo instead of singling out individual compiler versions, we build CAF for each\ncommit on all platforms that we currently deem relevant. Everything that passes\nour CI is \"fair game\".\n\nOur CI covers Windows (latest MSVC release), macOS (latest Xcode release),\nFreeBSD (latest) and several Linux distributions (via the Docker images found\n[here](https://github.com/actor-framework/actor-framework/tree/main/.ci)). For\nLinux, we aim to support the current releases (that still receive active\nsupport) for the major distributions. Note that we do not build on Linux\ndistributions with rolling releases, because they generally provide more recent\nbuild tools than distributions with traditional release schedules and thus would\nonly add redundancy.\n\n## Build Documentation Locally\n\n- Building an offline version of the manual requires\n  [Sphinx](https://www.sphinx-doc.org):\n  ```sh\n  cd manual\n  sphinx-build . html\n  ```\n- Building an offline version of the API reference documentation requires\n  [Doxygen](http://www.doxygen.nl) (simply run the  `doxygen` command at the\n  root directory of the repository).\n\n## Scientific Use\n\nIf you use CAF in a scientific context, please use one of the following citations:\n\n```bibtex\n@inproceedings{cshw-nassp-13,\n  author = {Dominik Charousset and Thomas C. Schmidt and Raphael Hiesgen and Matthias W{\\\"a}hlisch},\n  title = {{Native Actors -- A Scalable Software Platform for Distributed, Heterogeneous Environments}},\n  booktitle = {Proc. of the 4rd ACM SIGPLAN Conference on Systems, Programming, and Applications (SPLASH '13), Workshop AGERE!},\n  pages = {87--96},\n  month = {Oct.},\n  year = {2013},\n  publisher = {ACM},\n  address = {New York, NY, USA}\n}\n\n@article{chs-rapc-16,\n  author = {Dominik Charousset and Raphael Hiesgen and Thomas C. Schmidt},\n  title = {{Revisiting Actor Programming in C++}},\n  journal = {Computer Languages, Systems \\& Structures},\n  volume = {45},\n  year = {2016},\n  month = {April},\n  pages = {105--131},\n  publisher = {Elsevier}\n}\n```\n\nYou can find the papers online at http://dx.doi.org/10.1145/2541329.2541336 and\nhttp://dx.doi.org/10.1016/j.cl.2016.01.002.\n\n[docs-badge]: https://readthedocs.org/projects/actor-framework/badge/?version=latest\n\n[gitter-badge]: https://img.shields.io/badge/gitter-join%20chat%20%E2%86%92-brightgreen.svg\n\n[coverage-badge]: https://codecov.io/gh/actor-framework/actor-framework/graph/badge.svg?token=SjJQQ5dCbV\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.423828125,
          "content": "ignore:\n  - build\n  - examples\n  - libcaf_core/caf/decorator\n  - libcaf_core/src/decorator\n  - libcaf_core/tests\n  - libcaf_io/tests\n  - libcaf_net/tests\n  - libcaf_openssl\n  - libcaf_test\n  - robot\n  - tools\n  - \"**/*.test.cpp\"\ncoverage:\n  status:\n    project:\n      default:\n        threshold: 1% # we have some fluctuation from nondeterminism alone\n        informational: true\n    patch:\n      default:\n        informational: true\n"
        },
        {
          "name": "configure",
          "type": "blob",
          "size": 8.138671875,
          "content": "#!/bin/sh\nset -e\n\n# Convenience wrapper for easily setting options that the project's CMake\n# scripts will recognize.\n\nCommand=\"$0 $*\"\nCommandDirname=`dirname $0`\nSourceDir=`cd $CommandDirname && pwd`\n\nusage=\"\\\nUsage:\n\n  $0 [--<variable>=<value>...]\n\nGeneral CMake options:\n\n  --cmake=PATH              set a custom path to the CMake binary\n  --build-dir=PATH          set build directory [build]\n  --build-type=STRING       set build type of single-configuration generators\n  --generator=STRING        set CMake generator (see cmake --help)\n  --cxx-flags=STRING        set CMAKE_CXX_FLAGS when running CMake\n  --prefix=PATH             set installation directory\n  --debug-postfix           set CMAKE_DEBUG_POSTFIX\n\nLocating packages in non-standard locations:\n\n  --openssl-root-dir=PATH   set root directory of an OpenSSL installation\n\nDebugging options:\n\n  --log-level=STRING      build with debugging output, possible values:\n                            - ERROR\n                            - WARNING\n                            - INFO\n                            - DEBUG\n                            - TRACE\n  --sanitizers=STRING     build with this list of sanitizers enabled\n\nConvenience options:\n\n  --dev-mode                shortcut for passing:\n                              --build-type=Debug\n                              --log-level=TRACE\n                              --sanitizers=address,undefined\n                              --disable-examples\n                              --disable-tools\n                              --disable-shared-libs\n                              --enable-utility-targets\n                              --enable-runtime-checks\n\nFlags (use --enable-<name> to activate and --disable-<name> to deactivate):\n\n  cpack                     build with CPack package description [OFF]\n  shared-libs               build shared library targets [ON]\n  export-compile-commands   write JSON compile commands database [ON]\n  prefer-pthread-flag       prefer -pthread flag if available  [ON]\n  curl-examples             build examples with libcurl [OFF]\n  protobuf-examples         build examples with Google Protobuf [OFF]\n  qt6-examples              build examples with the Qt6 framework [OFF]\n  runtime-checks            build CAF with extra runtime assertions [OFF]\n  utility-targets           include targets like consistency-check [OFF]\n  examples                  build small programs showcasing CAF features [ON]\n  io-module                 build networking I/O module [ON]\n  openssl-module            build OpenSSL module [ON]\n  testing                   build unit test suites [ON]\n  with-exceptions           build CAF with support for exceptions [ON]\n\nInfluential Environment Variables (only on first invocation):\n\n  CXX                       C++ compiler command\n  CXXFLAGS                  Additional C++ compiler flags\n  LDFLAGS                   Additional linker flags\n\"\n\n# Appends a CMake cache entry definition to the CMakeCacheEntries variable.\n#   $1: variable name\n#   $2: CMake type\n#   $3: value\nappend_cache_entry() {\n  case \"$3\" in\n    *\\ * )\n      # string contains whitespace\n      CMakeCacheEntries=\"$CMakeCacheEntries -D \\\"$1:$2=$3\\\"\"\n      ;;\n    *)\n      # string contains no whitespace\n      CMakeCacheEntries=\"$CMakeCacheEntries -D $1:$2=$3\"\n      ;;\n  esac\n}\n\n# Appends a BOOL cache entry to the CMakeCacheEntries variable.\n#   $1: flag name\n#   $2: value (ON or OFF)\nset_build_flag() {\n  FlagName=''\n  case \"$1\" in\n    cpack)                   FlagName='CAF_ENABLE_CPACK' ;;\n    shared-libs)             FlagName='BUILD_SHARED_LIBS' ;;\n    export-compile-commands) FlagName='CMAKE_EXPORT_COMPILE_COMMANDS' ;;\n    prefer-pthread-flag)     FlagName='THREADS_PREFER_PTHREAD_FLAG' ;;\n    curl-examples)           FlagName='CAF_ENABLE_CURL_EXAMPLES' ;;\n    protobuf-examples)       FlagName='CAF_ENABLE_PROTOBUF_EXAMPLES' ;;\n    qt6-examples)            FlagName='CAF_ENABLE_QT6_EXAMPLES' ;;\n    runtime-checks)          FlagName='CAF_ENABLE_RUNTIME_CHECKS' ;;\n    utility-targets)         FlagName='CAF_ENABLE_UTILITY_TARGETS' ;;\n    examples)                FlagName='CAF_ENABLE_EXAMPLES' ;;\n    io-module)               FlagName='CAF_ENABLE_IO_MODULE' ;;\n    net-module)              FlagName='CAF_ENABLE_NET_MODULE' ;;\n    openssl-module)          FlagName='CAF_ENABLE_OPENSSL_MODULE' ;;\n    testing)                 FlagName='CAF_ENABLE_TESTING' ;;\n    exceptions)              FlagName='CAF_ENABLE_EXCEPTIONS' ;;\n    *)\n      echo \"Invalid flag '$1'.  Try $0 --help to see available options.\"\n      exit 1\n      ;;\n  esac\n  append_cache_entry $FlagName BOOL $2\n}\n\n# Set defaults.\nCMakeBuildDir=\"$SourceDir/build\"\nCMakeCacheEntries=\"\"\n\n# Parse user input.\nwhile [ $# -ne 0 ]; do\n  # Fetch the option argument.\n  case \"$1\" in\n    --*=*) optarg=`echo \"$1\" | sed 's/[-_a-zA-Z0-9]*=//'` ;;\n    --enable-*) optarg=`echo \"$1\" | sed 's/--enable-//'` ;;\n    --disable-*) optarg=`echo \"$1\" | sed 's/--disable-//'` ;;\n    *) ;;\n  esac\n  # Consume current input.\n  case \"$1\" in\n    --help|-h)\n      echo \"${usage}\" 1>&2\n      exit 1\n      ;;\n    --cmake=*)\n      CMakeCommand=\"$optarg\"\n      ;;\n    --build-dir=*)\n      CMakeBuildDir=\"$optarg\"\n      ;;\n    --generator=*)\n      CMakeGenerator=\"$optarg\"\n      ;;\n    --build-type=*)\n      append_cache_entry CMAKE_BUILD_TYPE STRING \"$optarg\"\n      ;;\n    --cxx-flags=*)\n      append_cache_entry CMAKE_CXX_FLAGS STRING \"$optarg\"\n      ;;\n    --prefix=*)\n      append_cache_entry CMAKE_INSTALL_PREFIX PATH \"$optarg\"\n      ;;\n    --log-level=*)\n      append_cache_entry CAF_LOG_LEVEL STRING \"$optarg\"\n      ;;\n    --sanitizers=*)\n      append_cache_entry CAF_SANITIZERS STRING \"$optarg\"\n      ;;\n    --dev-mode)\n      append_cache_entry CAF_LOG_LEVEL STRING 'TRACE'\n      append_cache_entry CAF_SANITIZERS STRING 'address,undefined'\n      append_cache_entry CMAKE_BUILD_TYPE STRING 'Debug'\n      set_build_flag examples OFF\n      set_build_flag shared-libs OFF\n      set_build_flag tools OFF\n      set_build_flag runtime-checks ON\n      set_build_flag utility-targets ON\n      ;;\n   --enable-*)\n      set_build_flag $optarg ON\n      ;;\n    --disable-*)\n      set_build_flag $optarg OFF\n      ;;\n    --openssl-root-dir=*)\n      append_cache_entry OPENSSL_ROOT_DIR PATH \"$optarg\"\n      ;;\n    --debug-postfix=*)\n      append_cache_entry CMAKE_DEBUG_POSTFIX STRING \"$optarg\"\n      ;;\n    *)\n      echo \"Invalid option '$1'. Try $0 --help to see available options.\"\n      exit 1\n      ;;\n  esac\n  # Get next input.\n  shift\ndone\n\n# Check for `cmake` command.\nif [ -z \"$CMakeCommand\" ]; then\n  # Prefer cmake3 over \"regular\" cmake (cmake == cmake2 on RHEL).\n  if command -v cmake3 >/dev/null 2>&1 ; then\n    CMakeCommand=\"cmake3\"\n  elif command -v cmake >/dev/null 2>&1 ; then\n    CMakeCommand=\"cmake\"\n  else\n    echo \"This package requires CMake, please install it first.\"\n    echo \"Then you may use this script to configure the CMake build.\"\n    echo \"Note: pass --cmake=PATH to use cmake in non-standard locations.\"\n    exit 1\n  fi\nfi\n\n# Make sure the build directory is an absolute path.\ncase \"$CMakeBuildDir\" in\n  /*)\n    CMakeAbsoluteBuildDir=\"$CMakeBuildDir\"\n    ;;\n  *)\n    CMakeAbsoluteBuildDir=\"$SourceDir/$CMakeBuildDir\"\n    ;;\nesac\n\n# If a build directory exists, delete any existing cache to have a clean build.\nif [ -d \"$CMakeAbsoluteBuildDir\" ]; then\n  if [ -f \"$CMakeAbsoluteBuildDir/CMakeCache.txt\" ]; then\n    rm -f \"$CMakeAbsoluteBuildDir/CMakeCache.txt\"\n  fi\nelse\n  mkdir -p \"$CMakeAbsoluteBuildDir\"\nfi\n\n# Run CMake.\ncd \"$CMakeAbsoluteBuildDir\"\nif [ -n \"$CMakeGenerator\" ]; then\n  \"$CMakeCommand\" -G \"$CMakeGenerator\" $CMakeCacheEntries \"$SourceDir\"\nelse\n  \"$CMakeCommand\" $CMakeCacheEntries \"$SourceDir\"\nfi\n\n# Generate a config.status file that allows re-running a clean build.\nprintf \"#!/bin/sh\\n\\n\" > config.status\nprintf \"# Switch to the source of this build directory.\\n\" >> config.status\nprintf \"cd \\\"%s\\\"\\n\\n\" \"$SourceDir\" >> config.status\nprintf \"# Invoke the command to configure this build.\\n\" >> config.status\nif [ -n \"$CXX\" ]; then\n  printf \"CXX=\\\"%s\\\"\\n\" \"$CXX\" >> config.status\nfi\nif [ -n \"$CXXFLAGS\" ]; then\n  printf \"CXXFLAGS=\\\"%s\\\"\\n\" \"$CXXFLAGS\" >> config.status\nfi\nif [ -n \"$LDFLAGS\" ]; then\n  printf \"LDFLAGS=\\\"%s\\\"\\n\" \"$LDFLAGS\" >> config.status\nfi\necho $Command >> config.status\nchmod u+x config.status\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "libcaf_core",
          "type": "tree",
          "content": null
        },
        {
          "name": "libcaf_io",
          "type": "tree",
          "content": null
        },
        {
          "name": "libcaf_net",
          "type": "tree",
          "content": null
        },
        {
          "name": "libcaf_openssl",
          "type": "tree",
          "content": null
        },
        {
          "name": "libcaf_test",
          "type": "tree",
          "content": null
        },
        {
          "name": "manual",
          "type": "tree",
          "content": null
        },
        {
          "name": "robot",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}