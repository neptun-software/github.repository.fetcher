{
  "metadata": {
    "timestamp": 1736565588191,
    "page": 467,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "seladb/PcapPlusPlus",
      "stars": 2785,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.5751953125,
          "content": "---\nBasedOnStyle: Microsoft\nUseTab: ForIndentation\nAllowShortFunctionsOnASingleLine: None\nNamespaceIndentation: All\nSortIncludes: false\nIndentPPDirectives: AfterHash\nIndentWidth: 4\nAllowShortBlocksOnASingleLine: Never\nPointerAlignment: Left\nAccessModifierOffset: -4\nAlignTrailingComments: true\nAllowShortEnumsOnASingleLine: false\nBreakStringLiterals: false\nAlignArrayOfStructures: Left\nBreakArrays: true\nSpacesBeforeTrailingComments: 2\nIndentAccessModifiers: false\nCpp11BracedListStyle: false\nBreakBeforeBraces: Custom\nBraceWrapping:\n  SplitEmptyFunction: false\n  AfterCaseLabel: true\n...\n"
        },
        {
          "name": ".codespellrc",
          "type": "blob",
          "size": 0.310546875,
          "content": "[codespell]\nskip = *.dat,typos-config.toml,.git,.venv,./ci,./Dist,./mk,./Tests/ExamplesTest/expected_output,./Tests/ExamplesTest/pcap_examples,./Tests/Packet++Test/PacketExamples,./Tests/Pcap++Test/PcapExamples,./3rdParty,./Examples/PcapSearch/dirent-for-Visual-Studio\nignore-words = codespell-ignore-list.txt\ncount =\n"
        },
        {
          "name": ".gersemirc",
          "type": "blob",
          "size": 0.216796875,
          "content": "# yaml-language-server: $schema=https://raw.githubusercontent.com/BlankSpruce/gersemi/master/gersemi/configuration.schema.json\n\nindent: 2\nline_length: 120\nlist_expansion: favour-inlining\nwarn_about_unknown_commands: false\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.3056640625,
          "content": "# run `git config blame.ignoreRevsFile .git-blame-ignore-revs` to use this file\n\n# clang-format\nb27e84f9041411ccfd8e4cdb6b813ffc50ccc9f1\n316ea6e767984f75d8c97357df336d33ba45b7bc\n09f479f890b8b4e2023ca5e71d3068f9fa469c84\n123994c8254f84829a5e1957b46b76395b5cdbfd\n\n# dos2unix\n5a6de4e00e9ed899c544cbf32f50bedadac7d9b1\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.01171875,
          "content": "* text=auto\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.8251953125,
          "content": "#Compiled Object files\n*.slo\n*.lo\n*.o\n\n#Compiled Dynamic libraries\n*.dll\n*.so\n*.dylib\n\n#Compiled Static libraries\n*.lai\n*.la\n*.a\n\n#vim\n*.swp\n*.swo\n\n#pcap and pcapng files\n*.pcap\n*.pcapng\n*.pcapng.zst\n*.pcapng.zstd\n*.cap\n*.snoop\n\n#Bin and Obj directories\n**/Bin\n**/Obj\n**/Lib\n**/BinCatcher\n**/BinPitcher\n\n#Distribution folder\nDist/\nbuild/\n\n#auto generated files\nsetup_dpdk_settings.dat\n3rdParty/OUIDataset/manuf.dat\n\n#curl text\nTests/Pcap++Test/cUrl/curl_output.txt\n\n#eclipse files\n**/.settings\n\n#Visual studio code\n.cproject\n.project\n.vscode\n.favorites.json\n\n#Visual studio generated files\n*.pdb\n*.ilk\n*.log\n*.obj\n*.idb\n*.tlog\n*.VC.db\n*.vcxproj.user\n**/.vs\nCMakeSettings.json\n\n#Visual Studio Projects\nmk/vs2015/**\nmk/vs2017/**\nmk/vs2019/**\n\n#Tutorial outputs\nExamples/Tutorials/**/*.exe\n\n#venv\n.venv/**\nvenv/**\n\n#MacOS system files\n**/.DS_Store\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.8203125,
          "content": "exclude: '.*\\.(pcap|pcapng|dat|txt)'\nfail_fast: false\nrepos:\n  - repo: local\n    hooks:\n      - id: check-clang-format-version\n        name: Check clang-format version\n        entry: python3 ./ci/check-clang-format-version.py\n        language: system\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: check-case-conflict\n      - id: check-executables-have-shebangs\n      - id: check-json\n      - id: check-shebang-scripts-are-executable\n      - id: check-merge-conflict\n      - id: check-symlinks\n      - id: end-of-file-fixer\n      - id: forbid-submodules\n      - id: mixed-line-ending\n        args: ['--fix=lf']\n      - id: trailing-whitespace\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.8.1\n    hooks:\n      - id: ruff # Run the linter.\n        types_or: [ python ]\n      - id: ruff-format  # Run the formatter.\n        types_or: [ python ]\n        args: [ --check ]\n  - repo: https://github.com/pocc/pre-commit-hooks\n    rev: v1.3.5\n    hooks:\n      - id: clang-format\n        args: [\"--style=file\", \"-i\"]  # Use the .clang-format file for configuration and apply all fixes\n        files: ^(Common\\+\\+|Packet\\+\\+|Pcap\\+\\+|Tests|Examples)/.*\\.(cpp|h)$\n      - id: cppcheck\n        args: [\"--std=c++11\", \"--language=c++\", \"--suppressions-list=cppcheckSuppressions.txt\", \"--inline-suppr\", \"--force\"]\n  - repo: https://github.com/BlankSpruce/gersemi\n    rev: 0.17.1\n    hooks:\n    - id: gersemi\n  - repo: https://github.com/codespell-project/codespell\n    rev: v2.3.0\n    hooks:\n      - id: codespell\n        pass_filenames: false\n  - repo: https://github.com/crate-ci/typos\n    rev: v1.28.1\n    hooks:\n      - id: typos\n        args: ['--config=typos-config.toml']\n        pass_filenames: false\n  - repo: https://github.com/lovesegfault/beautysh\n    rev: v6.2.1\n    hooks:\n      - id: beautysh\n"
        },
        {
          "name": "3rdParty",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 16.5888671875,
          "content": "# We need 3.12 or later, so that we can set policy CMP0074; see below.\ncmake_minimum_required(VERSION 3.12)\n\nset(PCAPPP_VERSION \"24.09+\")\n\n# MAIN_PROJECT CHECK\nset(PCAPPP_MAIN_PROJECT OFF)\nif(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)\n  set(PCAPPP_MAIN_PROJECT ON)\nendif()\n\nproject(\n  PcapPlusPlus\n  DESCRIPTION \"PcapPlusPlus is a multiplatform C++ library for capturing, parsing and crafting of network packets.\"\n  LANGUAGES CXX\n  HOMEPAGE_URL \"https://pcapplusplus.github.io/\")\n\n# Include our custom CMake modules\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules/\")\ninclude(CMakeDependentOption)\ninclude(CMakePackageConfigHelpers)\ninclude(PcapPlusPlusUtils)\ninclude(GNUInstallDirs)\ninclude(TargetArch)\n\n# Setup CMake\npcapp_detect_compiler(PCAPPP_TARGET)\n\n# Get architecture\ntarget_architecture(PCAPP_TARGET_ARCHITECTURE)\n\n# Use Ccache if available\nfind_program(CCACHE_PROGRAM ccache)\nif(CCACHE_PROGRAM)\n  message(STATUS \"Ccache found!\")\n  set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE \"${CCACHE_PROGRAM}\")\n  set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK \"${CCACHE_PROGRAM}\")\nelse()\n  message(STATUS \"Ccache not found!\")\nendif()\n\n# LINUX is set Only since 3.25 see: https://cmake.org/cmake/help/latest/variable/LINUX.html\nif(UNIX\n   AND NOT APPLE\n   AND NOT CYGWIN\n   AND NOT ANDROID)\n  set(LINUX True)\nendif()\n\n# Declare install folders location\nset(PCAPPP_INSTALL_BINDIR ${CMAKE_INSTALL_BINDIR})\nset(PCAPPP_INSTALL_CMAKEDIR ${CMAKE_INSTALL_LIBDIR}/cmake/pcapplusplus)\nset(PCAPPP_INSTALL_INCLUDEDIR ${CMAKE_INSTALL_INCLUDEDIR}/pcapplusplus)\nset(PCAPPP_INSTALL_LIBDIR ${CMAKE_INSTALL_LIBDIR})\n\n# Build options enable sanitizers\nset(PCAPPP_ALLOWED_SANITIZERS\n    \"\"\n    \"AddressSanitizer\"\n    \"MemorySanitizer\"\n    \"ThreadSanitizer\"\n    \"UndefinedBehaviorSanitizer\")\nset(PCAPPP_USE_SANITIZER\n    \"\"\n    CACHE STRING \"Compile with a sanitizer\")\nset_property(CACHE PCAPPP_USE_SANITIZER PROPERTY STRINGS ${PCAPPP_ALLOWED_SANITIZERS})\n\nif(NOT\n   PCAPPP_USE_SANITIZER\n   IN_LIST\n   PCAPPP_ALLOWED_SANITIZERS)\n  message(FATAL_ERROR \"PCAPPP_USE_SANITIZER must be one of ${PCAPPP_ALLOWED_SANITIZERS}\")\nendif()\n\nif(PCAPPP_USE_SANITIZER)\n  add_compile_options(\"-fno-omit-frame-pointer\")\n  add_compile_options(\"-O1\")\n  if(PCAPPP_USE_SANITIZER STREQUAL \"AddressSanitizer\")\n    add_compile_options(\"-fsanitize=address\")\n    add_link_options(\"-fsanitize=address\")\n  elseif(PCAPPP_USE_SANITIZER STREQUAL \"MemorySanitizer\")\n    add_compile_options(\"-fsanitize=memory\")\n    add_link_options(\"-fsanitize=memory\")\n  elseif(PCAPPP_USE_SANITIZER STREQUAL \"ThreadSanitizer\")\n    add_compile_options(\"-fsanitize=thread\")\n    add_link_options(\"-fsanitize=thread\")\n  elseif(PCAPPP_USE_SANITIZER STREQUAL \"UndefinedBehaviorSanitizer\")\n    add_compile_options(\"-fsanitize=undefined\")\n    add_link_options(\"-fsanitize=undefined\")\n  endif()\nendif()\n\n# Build options (Turn on Examples and Tests if it's the main project)\noption(PCAPPP_BUILD_EXAMPLES \"Build Examples\" ${PCAPPP_MAIN_PROJECT})\ncmake_dependent_option(\n  PCAPPP_BUILD_TUTORIALS\n  \"Build Tutorials\"\n  OFF\n  \"PCAPPP_BUILD_EXAMPLES\"\n  OFF)\noption(PCAPPP_BUILD_TESTS \"Build Tests\" ${PCAPPP_MAIN_PROJECT})\noption(PCAPPP_BUILD_COVERAGE \"Generate Coverage Report\" OFF)\noption(PCAPPP_BUILD_FUZZERS \"Build Fuzzers binaries\" OFF)\noption(PCAPPP_BUILD_REPRODUCIBLE \"Build a reproducible version\" OFF)\n\noption(BUILD_SHARED_LIBS \"Build using shared libraries\" OFF)\n\noption(PCAPPP_USE_DPDK \"Setup PcapPlusPlus with DPDK. In this case you must also set DPDK_ROOT\")\ncmake_dependent_option(\n  PCAPPP_USE_DPDK_KNI\n  \"Add KNI Support to Pcap++\"\n  OFF\n  \"PCAPPP_USE_DPDK\"\n  OFF)\noption(PCAPPP_USE_PF_RING \"Setup PcapPlusPlus with PF_RING. In this case you must also set PF_RING_ROOT\")\noption(PCAPPP_USE_XDP \"Setup PcapPlusPlus with XDP\")\noption(PCAPPP_INSTALL \"Install Pcap++\" ${PCAPPP_MAIN_PROJECT})\noption(PCAPPP_PACKAGE \"Package Pcap++ could require a recent version of CMake\" OFF)\n\n# Set C++11\nset(CMAKE_CXX_STANDARD 11)\n# popen()/pclose() are not C++ standards\nset(CMAKE_CXX_EXTENSIONS ON)\n# Set Position Independent Code for static libraries\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\n# Export compile commands for external tools\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\n# Usually on Windows PCAP_ROOT and Packet_ROOT are at the same location\nif(WIN32\n   AND PCAP_ROOT\n   AND NOT Packet_ROOT)\n  set(Packet_ROOT ${PCAP_ROOT})\nendif()\n\nfind_package(PCAP)\nif(NOT PCAP_FOUND)\n  if(WIN32)\n    message(FATAL_ERROR \"Please specify Npcap/WinPcap SDK directory with -DPCAP_ROOT=<PCAP_SDK_PATH>\")\n  else()\n    message(FATAL_ERROR \"PCAP library not found!\")\n  endif()\nendif()\n\n# Look for Packet\nif(WIN32)\n  find_package(Packet)\n  if(NOT Packet_FOUND)\n    message(FATAL_ERROR \"Please specify Packet library -DPacket_ROOT=<NPCAP_SDK_PATH>\")\n  endif()\nendif()\n\n# Enable the option if it's available\noption(PCAPPP_ENABLE_PCAP_IMMEDIATE_MODE \"Enable PCAP immediate Mode (supported on libpcap>=1.5)\" OFF)\n\n# Check in case user force it but it's not available\nif(PCAPPP_ENABLE_PCAP_IMMEDIATE_MODE)\n  if(NOT HAVE_PCAP_IMMEDIATE_MODE)\n    message(FATAL_ERROR \"PCAP library doesn't have Immediate Mode support!\")\n  endif()\n  add_definitions(-DHAS_PCAP_IMMEDIATE_MODE)\nendif()\n\n# Enable the option if it's available\noption(PCAPPP_ENABLE_PCAP_SET_DIRECTION\n       \"Enable set direction for capturing incoming or outgoing packets (supported on libpcap>=0.9.1)\" OFF)\n\n# Check in case user force it but it's not available\nif(PCAPPP_ENABLE_PCAP_SET_DIRECTION)\n  if(NOT HAVE_PCAP_DIRECTION)\n    message(FATAL_ERROR \"PCAP library doesn't have Direction support!\")\n  endif()\n  add_definitions(-DHAS_SET_DIRECTION_ENABLED)\nendif()\n\nset(THREADS_PREFER_PTHREAD_FLAG ON)\nfind_package(Threads REQUIRED)\nif(MSVC)\n  # Other hacks for VStudio\n  add_definitions(-D_CRT_SECURE_NO_WARNINGS)\nelse()\n  if(NOT CMAKE_USE_PTHREADS_INIT)\n    message(FATAL_ERROR \"Pthreads not found!\")\n  endif()\nendif()\n\nif(PCAPPP_USE_DPDK)\n  find_package(DPDK)\n  if(NOT DPDK_FOUND)\n    message(FATAL_ERROR \"Specify DPDK Library with -DDPDK_ROOT=<DPDK_PATH>\")\n  endif()\n  add_definitions(-DUSE_DPDK)\n\n  # Check in case user force KNI but it's not available\n  if(PCAPPP_USE_DPDK_KNI)\n    if(NOT HAVE_DPDK_RTE_KNI)\n      message(FATAL_ERROR \"DPDK library doesn't have KNI support!\")\n    endif()\n    add_definitions(-DUSE_DPDK_KNI)\n  endif()\n\n  # Disable deprecated warnings when DPDK enabled since warnings are treated as errors\n  add_definitions(\"-Wno-deprecated-declarations\")\n  configure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/setup_dpdk.py\" \"${CMAKE_CURRENT_BINARY_DIR}\" COPYONLY)\nendif()\n\n# Git Commit and Branch\nfind_package(Git)\nif(Git_FOUND)\n  execute_process(\n    COMMAND ${GIT_EXECUTABLE} log -1 --format=%h\n    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n    OUTPUT_VARIABLE PCAPPP_GIT_COMMIT)\n  string(STRIP \"${PCAPPP_GIT_COMMIT}\" PCAPPP_GIT_COMMIT)\n  execute_process(\n    COMMAND ${GIT_EXECUTABLE} rev-parse --abbrev-ref HEAD\n    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n    OUTPUT_VARIABLE PCAPPP_GIT_BRANCH)\n  string(STRIP \"${PCAPPP_GIT_BRANCH}\" PCAPPP_GIT_BRANCH)\n  message(STATUS \"Building from commit:${PCAPPP_GIT_COMMIT} on branch:${PCAPPP_GIT_BRANCH}\")\n  add_compile_definitions(GIT_COMMIT=\"${PCAPPP_GIT_COMMIT}\")\n  add_compile_definitions(GIT_BRANCH=\"${PCAPPP_GIT_BRANCH}\")\nendif()\n\nif(PCAPPP_USE_PF_RING)\n  find_package(PF_RING)\n  if(NOT PF_RING_FOUND)\n    message(FATAL_ERROR \"Specify PF_RING Library with -DPF_RING_ROOT=<PF_RING_PATH>\")\n  endif()\n  add_definitions(-DUSE_PF_RING)\nendif()\n\nif(PCAPPP_USE_XDP)\n  find_package(BPF)\n  if(NOT BPF_FOUND)\n    message(FATAL_ERROR \"libbpf not found!\")\n  endif()\n  add_definitions(-DUSE_XDP)\nendif()\n\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE\n      \"Release\"\n      CACHE STRING \"Choose the type of build.\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS \"Debug\" \"Release\")\nendif()\n\nif(PCAPPP_TARGET_COMPILER_CLANG\n   OR PCAPPP_TARGET_COMPILER_GCC\n   OR PCAPPP_TARGET_COMPILER_INTEL)\n  add_compile_options(-Wall)\nendif()\n\nif(PCAPPP_BUILD_REPRODUCIBLE)\n  add_definitions(-DPCAPPP_BUILD_REPRODUCIBLE)\n  if(APPLE)\n    if(NOT $ENV{ZERO_AR_DATE})\n      message(FATAL_ERROR \"You need to set `export ZERO_AR_DATE=1`\")\n    endif()\n  elseif(MSVC)\n    message(FATAL_ERROR \"Unsupported with MSVC compiler\")\n    # Try to build a reproducible static library with MSVC doesn't work but this option should make it work for shared\n    # libraries or executables. add_compile_options(/Brepro) add_compile_options(/experimental:deterministic)\n    # add_link_options(/Brepro) add_link_options(/experimental:deterministic) add_link_options(/INCREMENTAL:NO)\n  else()\n    # We should not use __DATE__ nor __TIME__ in case of reproducible build\n    add_compile_options(-Wdate-time)\n  endif()\nendif()\n\nif(PCAPPP_BUILD_FUZZERS)\n  add_compile_options(-w)\nendif()\n\n# Static linking GCC/Threads for minGW (Windows + GNU)\nif(MINGW)\n  add_link_options(-static-libgcc -static-libstdc++)\n  add_link_options(-static)\nendif()\n\nif(PCAPPP_TARGET_COMPILER_MSVC)\n  # Disable VS warnings: Unknown pragma (4068), Zero-sized array in struct/union (4200), Possible loss of data (4244),\n  # Possible loss of data (4267), Character may not be represented (4819)\n  add_definitions(\"/wd4068 /wd4200 /wd4244 /wd4267 /wd4819\")\nendif()\n\nif(PCAPPP_BUILD_COVERAGE)\n  add_compile_options(--coverage)\n  add_link_options(--coverage)\n  set(_PCAPPP_FIND_COVERAGE \"find_dependency(Coverage)\\n\")\nendif()\n\nadd_subdirectory(3rdParty)\nadd_subdirectory(Packet++)\nadd_subdirectory(Pcap++)\nadd_subdirectory(Common++)\n\nif(PCAPPP_BUILD_EXAMPLES)\n  set(PCAPPP_BINARY_EXAMPLES_DIR ${CMAKE_BINARY_DIR}/examples_bin)\n  add_subdirectory(Examples)\nendif()\n\nif(PCAPPP_BUILD_TESTS\n   OR PCAPPP_BUILD_FUZZERS\n   OR PCAPPP_BUILD_EXAMPLES)\n  include(CTest)\n  add_subdirectory(Tests)\nendif()\n\nif(PCAPPP_INSTALL)\n  # Generate PKG-Config for non WIN32 system\n  if(NOT WIN32)\n    if(APPLE)\n      # Add System and CoreFoundation libs on MacOS\n      set(PCAPPP_PKGCONFIG_EXTRA_LIBS \"-framework SystemConfiguration -framework CoreFoundation\")\n    endif()\n    configure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/PcapPlusPlus.pc.in\" \"${CMAKE_CURRENT_BINARY_DIR}/PcapPlusPlus.pc\"\n                   @ONLY)\n    install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/PcapPlusPlus.pc\" DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\n  endif()\n\n  # CMake helpers to compile Pcap++ with CMake\n  pcapp_install_cmake_module(PCAP)\n  if(WIN32)\n    pcapp_install_cmake_module(Packet)\n  endif()\n\n  if(PCAPPP_USE_PF_RING)\n    pcapp_install_cmake_module(PF_RING)\n  endif()\n\n  if(PCAPPP_USE_DPDK)\n    pcapp_install_cmake_module(DPDK)\n    pcapp_install_cmake_module(NUMA)\n  endif()\n\n  if(LIGHT_PCAPNG_ZSTD)\n    pcapp_install_cmake_module(ZSTD)\n  endif()\n\n  install(\n    EXPORT PcapPlusPlusTargets\n    DESTINATION ${PCAPPP_INSTALL_CMAKEDIR}\n    NAMESPACE PcapPlusPlus::)\n\n  configure_package_config_file(\n    \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/PcapPlusPlusConfig.cmake.in\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/PcapPlusPlusConfig.cmake\" INSTALL_DESTINATION \"${PCAPPP_INSTALL_CMAKEDIR}\")\n\n  write_basic_package_version_file(\n    \"${CMAKE_CURRENT_BINARY_DIR}/PcapPlusPlusConfigVersion.cmake\"\n    VERSION ${PCAPPP_VERSION}\n    COMPATIBILITY AnyNewerVersion)\n\n  # CMake helpers to compile Pcap++ with CMake\n  install(\n    FILES \"${CMAKE_CURRENT_BINARY_DIR}/PcapPlusPlusConfig.cmake\"\n          \"${CMAKE_CURRENT_BINARY_DIR}/PcapPlusPlusConfigVersion.cmake\"\n    COMPONENT devel\n    DESTINATION \"${PCAPPP_INSTALL_CMAKEDIR}\")\nendif()\n\nif(PCAPPP_PACKAGE)\n  if(NOT PCAPPP_INSTALL)\n    message(SEND_ERROR \"Packaging depends on PCAPP_INSTALL\")\n  endif()\n\n  set(CPACK_PACKAGE_NAME \"pcapplusplus\")\n  set(CPACK_PACKAGE_VERSION \"${PCAPPP_VERSION}\")\n  set(CPACK_PACKAGE_MAINTAINER \"seladb\")\n  set(CPACK_DEBIAN_PACKAGE_MAINTAINER \"${CPACK_PACKAGE_MAINTAINER}\")\n  set(CPACK_PACKAGE_DESCRIPTION_SUMMARY\n      \"PcapPlusPlus is a multiplatform C++ library for capturing, parsing and crafting of network packets. It is designed to be efficient, powerful and easy to use.\"\n  )\n\n  # Default output a .tar.gz\n  set(CPACK_GENERATOR \"TGZ\")\n\n  # Remove the tweak for Compiler Version\n  string(\n    REPLACE \".\"\n            \";\"\n            VERSION_LIST\n            ${CMAKE_CXX_COMPILER_VERSION})\n  list(LENGTH VERSION_LIST CMAKE_CXX_COMPILER_VERSION_LENGTH)\n  if(${CMAKE_CXX_COMPILER_VERSION_LENGTH} GREATER 3)\n    list(POP_BACK VERSION_LIST)\n  endif()\n  list(\n    JOIN\n    VERSION_LIST\n    \".\"\n    PCAPP_CXX_COMPILER_VERSION)\n\n  set(_PCAPPP_PACKAGE_README_PATH \"${CMAKE_SOURCE_DIR}/cmake/package/READMEs\")\n  set(_PCAPPP_PACKAGE_README_OUTFILE \"${CMAKE_BINARY_DIR}/README.release.md\")\n\n  if(ANDROID)\n    set(CPACK_SYSTEM_NAME \"android-${ANDROID_ABI}-${ANDROID_PLATFORM}\")\n    set(_PCAPPP_PACKAGE_README_CUSTOM_PATH \"${_PCAPPP_PACKAGE_README_PATH}/README.release.android\")\n  elseif(APPLE)\n    # set(CPACK_GENERATOR ${CPACK_GENERATOR};productbuild)\n    set(CPACK_SYSTEM_NAME \"macos-${CMAKE_OSX_ARCHITECTURES}-${PCAPPP_TARGET_COMPILER}-${PCAPP_CXX_COMPILER_VERSION}\")\n    set(_PCAPPP_PACKAGE_README_CUSTOM_PATH \"${_PCAPPP_PACKAGE_README_PATH}/README.release.macos\")\n  elseif(LINUX)\n    # Easier for Packing but requires CMake 3.22\n    cmake_minimum_required(VERSION 3.22)\n    cmake_host_system_information(RESULT DISTRO_ID QUERY DISTRIB_ID)\n    cmake_host_system_information(RESULT DISTRO_VERSION_ID QUERY DISTRIB_VERSION_ID)\n    set(_PCAPPP_PACKAGE_README_CUSTOM_PATH \"${_PCAPPP_PACKAGE_README_PATH}/README.release.linux\")\n    if(\"${DISTRO_ID}\" STREQUAL \"ubuntu\")\n      # set(CPACK_GENERATOR ${CPACK_GENERATOR};DEB)\n    elseif(\"${DISTRO_ID}\" STREQUAL \"centos\" OR \"${DISTRO_ID}\" STREQUAL \"rhel\")\n      # set(CPACK_GENERATOR ${CPACK_GENERATOR};RPM)\n    elseif(\"${DISTRO_ID}\" STREQUAL \"freebsd\")\n      set(_PCAPPP_PACKAGE_README_CUSTOM_PATH \"${_PCAPPP_PACKAGE_README_PATH}/README.release.freebsd\")\n    endif()\n    set(CPACK_SYSTEM_NAME\n        \"${DISTRO_ID}-${DISTRO_VERSION_ID}-${PCAPPP_TARGET_COMPILER}-${PCAPP_CXX_COMPILER_VERSION}-${CMAKE_SYSTEM_PROCESSOR}\"\n    )\n  elseif(MINGW)\n    # Check MinGW before WIN32 as MinGW defines both\n    set(CPACK_GENERATOR \"ZIP\")\n    set(CPACK_SYSTEM_NAME\n        \"windows-mingw64-${PCAPP_TARGET_ARCHITECTURE}-${PCAPPP_TARGET_COMPILER}-${PCAPP_CXX_COMPILER_VERSION}\")\n    set(_PCAPPP_PACKAGE_README_CUSTOM_PATH \"${_PCAPPP_PACKAGE_README_PATH}/README.release.win.mingw\")\n  elseif(WIN32)\n    set(CPACK_GENERATOR \"ZIP\")\n    string(TOLOWER ${CMAKE_BUILD_TYPE} BUILD_TYPE_LOWER)\n    string(TOLOWER ${CMAKE_VS_PLATFORM_NAME} PLATFORM_LOWER)\n    set(CPACK_SYSTEM_NAME \"windows-vs${MSVC_YEAR}-${PLATFORM_LOWER}-${BUILD_TYPE_LOWER}\")\n    set(_PCAPPP_PACKAGE_README_CUSTOM_PATH \"${_PCAPPP_PACKAGE_README_PATH}/README.release.win.vs\")\n  endif()\n\n  # Generate output README\n  file(READ \"${_PCAPPP_PACKAGE_README_PATH}/README.release.header\" _CONTENT)\n  file(APPEND ${_PCAPPP_PACKAGE_README_OUTFILE} \"${_CONTENT}\")\n\n  if(_PCAPPP_PACKAGE_README_CUSTOM_PATH)\n    file(READ ${_PCAPPP_PACKAGE_README_CUSTOM_PATH} _CONTENT)\n    file(APPEND ${_PCAPPP_PACKAGE_README_OUTFILE} \"${_CONTENT}\\n\")\n  endif()\n\n  file(READ \"${_PCAPPP_PACKAGE_README_PATH}/release_notes.txt\" _CONTENT)\n  file(APPEND ${_PCAPPP_PACKAGE_README_OUTFILE} \"${_CONTENT}\")\n\n  # As we only generate .TGZ for the moment keep it to False\n  if(FALSE)\n    # Apple productbuild cannot handle .md or file without extension Use textutil to convert them to HTML\n    find_program(CONVERTER textutil)\n    if(NOT CONVERTER)\n      message(FATAL_ERROR \"textutil executable not found\")\n    endif()\n    execute_process(COMMAND ${CONVERTER} -convert html \"${CMAKE_SOURCE_DIR}/LICENSE\" -output\n                            \"${CMAKE_BINARY_DIR}/LICENSE.html\")\n    execute_process(COMMAND ${CONVERTER} -convert html \"${_PCAPPP_PACKAGE_README_OUTFILE}\" -output\n                            \"${CMAKE_BINARY_DIR}/README.html\")\n    set(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_BINARY_DIR}/LICENSE.html\")\n    set(CPACK_RESOURCE_FILE_README \"${CMAKE_BINARY_DIR}/README.html\")\n  else()\n    set(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_SOURCE_DIR}/LICENSE\")\n    set(CPACK_RESOURCE_FILE_README \"${_PCAPPP_PACKAGE_README_OUTFILE}\")\n  endif()\n\n  # used in CPackAdditionalInstall.cmake\n  set(CPACK_ADDITIONAL_INSTALL_RESOURCES \"${CPACK_RESOURCE_FILE_LICENSE}\" \"${CPACK_RESOURCE_FILE_README}\")\n  set(CPACK_ADDITIONAL_EXAMPLE_APP\n      \"${CMAKE_SOURCE_DIR}/Examples/ExampleApp/1_packet.pcap\"\n      \"${CMAKE_SOURCE_DIR}/Examples/ExampleApp/CMakeLists.txt\"\n      \"${CMAKE_SOURCE_DIR}/Examples/ExampleApp/main.cpp\"\n      \"${CMAKE_SOURCE_DIR}/Examples/ExampleApp/README.md\")\n  set(CPACK_INSTALL_SCRIPT \"${CMAKE_SOURCE_DIR}/cmake/CPackAdditionalInstall.cmake\")\n\n  include(CPack)\nendif()\n\n# uninstall target\nif(NOT TARGET uninstall)\n  configure_file(\n    \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/PcapPlusPlusUninstall.cmake.in\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/PcapPlusPlusUninstall.cmake\"\n    IMMEDIATE\n    @ONLY)\n\n  add_custom_target(uninstall COMMAND \"${CMAKE_COMMAND}\" -P \"${CMAKE_CURRENT_BINARY_DIR}/PcapPlusPlusUninstall.cmake\")\nendif()\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.2939453125,
          "content": "\n# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to make participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socioeconomic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies within all project spaces, and it also applies when\nan individual is representing the project or its community in public spaces.\nExamples of representing a project or community include using an official\nproject e-mail address, posting via an official social media account, or acting\nas an appointed representative at an online or offline event. Representation of\na project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at <pcapplusplus@gmail.com>. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.828125,
          "content": "# Contributing to PcapPlusPlus\n\nThanks for contributing to PcapPlusPlus! Any contribution is highly welcome and appreciated.\n\nIf you haven't already, please take a look at [PcapPlusPlus web-site](https://pcapplusplus.github.io) which provides a lot of information on existing features and capabilities, tutorials and build instructions\n\n## Bug Reports\n\nIf you find a bug, please don't hesitate to open a GiHub issue for it. Any bug report is highly welcome. In order for the bug to be solved as quickly as possible, please make sure to provide the following details:\n- Verify that the bug is easily reproducible, we can't do much with bugs we can't reproduce\n- A detailed explanation of the issue - what did you expect to happen vs. what really happened?\n- The operating system you're using, please include the OS version as well\n- If you can provide a pcap file or anything else that will help us to reproduce the bug / verify the fix, please do so\n- If you already looked at the code and found the root cause - that's great! You can either open a GitHub pull request (please see below how) or point us to the exact place in the code where you think the bug is\n\n## Pull Requests\n\nEvery code contribution to this project is highly valued and appreciated. I encourage you to contribute any code, from small fixes or typos, up to bugfixes and new features. But when doing so, in order to get your pull request merged as fast as possible, please pay attention to the following:\n- Please make sure to fork the **dev** branch and not **master**, so the pull request will be merged to **dev**\n- After you're done writing your code, please make sure that:\n   - You added unit-tests for all of the new code, either on `Tests/Packet++Test` or `Tests/Pcap++Test` (whichever makes sense)\n   - PcapPlusPlus compiles successfully on your machine, including all unit-tests and examples\n   - Unit-tests pass successfully on your machine (both `Tests/Packet++Test` and `Tests/Pcap++Test`)\n   - All new APIs are well documented using Doxygen (please use @ for keywords)\n   - Make sure that pre-commit hooks are passing by using `pre-commit run --all-files`. For pre-commit hooks you need to install `cppcheck` and `clang-format` on your system. You can install them using the following commands:\n      - `pre-commit`: `pip install pre-commit`\n      - `cppcheck` (version 2.7 is recommended):\n         - For Linux (apt) `sudo apt install cppcheck`\n         - For Windows (using `choco`) `choco install cppcheck --version=2.7`\n         - For Windows (MSI install): https://github.com/danmar/cppcheck/releases/download/2.7/cppcheck-2.7-x64-Setup.msi\n         - Build from source: https://github.com/danmar/cppcheck/releases/tag/2.7\n      - `clang-format`: `pip install clang-format==18.1.6`\n- After you commit the code and push it to GitHub, before creating the pull request please make sure that:\n   - You merge all new code from **dev** to your fork\n   - CI passes on all platforms\n- Create a GitHub pull request. In the pull request please document what it contains. If it's a bugfix, please assign the bug number (using the # sign). The process of handling pull requests is as follows:\n   - We'll try to review it as quickly as possible\n   - We'll review the code that was changed/added and comment either next to specific code lines or in the pull request thread\n   - Please try to respond to these comments as quickly as possible, make the necessary fixes and add them to the pull request\n   - After review is done we'll merge the pull request into **dev** branch, and assuming all CI tests pass we'll merge it into **master**\n\nThis process may seem long, but it's actually quite short and straightforward most of the time, especially for small contributions.\n\nIf you make sure to follow this guide your code contribution should be merged in no time!\n\nThank you so much for your contribution! please help us make PcapPlusPlus better!\n"
        },
        {
          "name": "Common++",
          "type": "tree",
          "content": null
        },
        {
          "name": "Examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.181640625,
          "content": "This is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org>\n"
        },
        {
          "name": "Packet++",
          "type": "tree",
          "content": null
        },
        {
          "name": "Pcap++",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.353515625,
          "content": "\n<div align=\"center\">\n\n[![PcapPlusPlus Logo](https://pcapplusplus.github.io/img/logo/logo_color.png)](https://pcapplusplus.github.io)\n\n[![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/seladb/PcapPlusPlus/build_and_test.yml?branch=master&label=Actions&logo=github&style=flat)](https://github.com/seladb/PcapPlusPlus/actions?query=workflow%3A%22Build+and+test%22)\n[![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/seladb/PcapPlusPlus/codeql.yml?branch=master&label=CodeQL&logo=github&style=flat)](https://github.com/seladb/PcapPlusPlus/actions?query=workflow%3A%22CodeQL%22)\n[![Codecov](https://img.shields.io/codecov/c/github/seladb/PcapPlusPlus?logo=codecov&logoColor=white)](https://app.codecov.io/github/seladb/PcapPlusPlus)\n[![OpenSSF Scorecard](https://api.scorecard.dev/projects/github.com/seladb/PcapPlusPlus/badge)](https://scorecard.dev/viewer/?uri=github.com/seladb/PcapPlusPlus)\n[![GitHub contributors](https://img.shields.io/github/contributors/seladb/PcapPlusPlus?style=flat&label=Contributors&logo=github)](https://github.com/seladb/PcapPlusPlus/graphs/contributors)\n\n[![X Follow](https://img.shields.io/badge/follow-%40seladb-1DA1F2?logo=x&style=social)](https://x.com/intent/follow?screen_name=seladb)\n[![GitHub Repo stars](https://img.shields.io/github/stars/seladb/PcapPlusPlus?style=social)]()\n\n</div>\n\n[PcapPlusPlus](https://pcapplusplus.github.io/) is a multiplatform C++ library for capturing, parsing and crafting of network packets. It is designed to be efficient, powerful and easy to use.\n\nPcapPlusPlus enables decoding and forging capabilities for a large variety of network protocols. It also provides easy to use C++ wrappers for the most popular packet processing engines such as [libpcap](https://www.tcpdump.org/), [WinPcap](https://www.winpcap.org/), [Npcap](https://nmap.org/npcap/), [DPDK](https://www.dpdk.org/), [eBPF AF_XDP](https://www.kernel.org/doc/html/next/networking/af_xdp.html) and [PF_RING](https://www.ntop.org/products/packet-capture/pf_ring/).\n\nTranslations: English · [正體中文](./translation/README-zh-tw.md) · [한국어](./translation/README-kor.md)\n\n## Table Of Contents\n\n- [Table Of Contents](#table-of-contents)\n- [Download](#download)\n  - [GitHub Release Page](#github-release-page)\n  - [Homebrew](#homebrew)\n  - [Vcpkg](#vcpkg)\n  - [Conan](#conan)\n  - [Build It Yourself](#build-it-yourself)\n  - [Verify your packages](#verify-your-packages)\n- [Feature Overview](#feature-overview)\n- [Getting Started](#getting-started)\n- [API Documentation](#api-documentation)\n- [Multi Platform Support](#multi-platform-support)\n- [Supported Network Protocols](#supported-network-protocols)\n  - [Data Link Layer (L2)](#data-link-layer-l2)\n  - [Network Layer (L3)](#network-layer-l3)\n  - [Transport Layer (L4)](#transport-layer-l4)\n  - [Session Layer (L5)](#session-layer-l5)\n  - [Presentation Layer (L6)](#presentation-layer-l6)\n  - [Application Layer (L7)](#application-layer-l7)\n- [DPDK And PF_RING Support](#dpdk-and-pf_ring-support)\n- [Benchmarks](#benchmarks)\n- [Provide Feedback](#provide-feedback)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Download\n\nYou can choose between downloading from GitHub release page, use a package manager or build PcapPlusPlus yourself. For more details please visit the [Download](https://pcapplusplus.github.io/docs/install) page in PcapPlusPlus web-site.\n\n[![GitHub all releases](https://img.shields.io/github/downloads/seladb/PcapPlusPlus/total?style=flat&label=Downloads&logo=github)](https://tooomm.github.io/github-release-stats/?username=seladb&repository=PcapPlusPlus)\n\n### GitHub Release Page\n\n<https://github.com/seladb/PcapPlusPlus/releases/latest>\n\n### Homebrew\n\n```shell\nbrew install pcapplusplus\n```\n\nHomebrew formulae: <https://formulae.brew.sh/formula/pcapplusplus>\n\n### Vcpkg\n\nWindows:\n\n```text\n.\\vcpkg install pcapplusplus\n```\n\nMacOS/Linux:\n\n```text\nvcpkg install pcapplusplus\n```\n\nVcpkg port: <https://github.com/microsoft/vcpkg/tree/master/ports/pcapplusplus>\n\n### Conan\n\n```text\nconan install \"pcapplusplus/[>0]@\" -u\n```\n\nThe package in ConanCenter: <https://conan.io/center/pcapplusplus>\n\n### Build It Yourself\n\nClone the git repository:\n\n```shell\ngit clone https://github.com/seladb/PcapPlusPlus.git\n```\n\nFollow the build instructions according to your platform in the [Build From Source](https://pcapplusplus.github.io/docs/install#build-from-source) page in PcapPlusPlus web-site.\n\n### Verify your packages\n\nPcapPlusPlus releases which newer than v23.09 are signed with GitHub attestation. All of the attestations can be found [here](https://github.com/seladb/PcapPlusPlus/attestations). You can verify the attestation of these packages with GitHub CLI. To verify packages you can follow the most recent instructions from [gh attestation verify](https://cli.github.com/manual/gh_attestation_verify). For simple instructions you can use the following command:\n\n```shell\ngh attestation verify <path-to-package-file> --repository seladb/PcapPlusPlus\n```\n\nand you should see the following output in your terminal:\n\n```shell\n✓ Verification succeeded!\n```\n\n## Feature Overview\n\n- __Packet capture__ through an easy to use C++ wrapper for popular packet capture engines such as [libpcap](https://www.tcpdump.org/), [WinPcap](https://www.winpcap.org/), [Npcap](https://nmap.org/npcap/), [Intel DPDK](https://www.dpdk.org/), [eBPF AF_XDP](https://www.kernel.org/doc/html/next/networking/af_xdp.html), [ntop’s PF_RING](https://www.ntop.org/products/packet-capture/pf_ring/) and [raw sockets](https://en.wikipedia.org/wiki/Network_socket#Raw_socket) [[Learn more](https://pcapplusplus.github.io/docs/features#packet-capture)]\n- __Packet parsing and crafting__ including detailed analysis of protocols and layers, packet generation and packet edit for a large variety of [network protocols](https://pcapplusplus.github.io/docs/features#supported-network-protocols) [[Learn more](https://pcapplusplus.github.io/docs/features#packet-parsing-and-crafting)]\n- __Read and write packets from/to files__ in both __PCAP__ and __PCAPNG__ formats [[Learn more](https://pcapplusplus.github.io/docs/features#read-and-write-packets-fromto-files)]\n- __Packet processing in line rate__ through an efficient and easy to use C++ wrapper for [DPDK](https://www.dpdk.org/), [eBPF AF_XDP](https://www.kernel.org/doc/html/next/networking/af_xdp.html) and [PF_RING](https://www.ntop.org/products/packet-capture/pf_ring/) [[Learn more](https://pcapplusplus.github.io/docs/features#dpdk-support)]\n- __Multiplatform support__ - PcapPlusPlus is fully supported on Linux, MacOS, Windows, Android and FreeBSD\n- __Packet reassembly__ - unique implementation of __TCP Reassembly__ which includes TCP retransmission, out-of-order TCP packets and missing TCP data, and __IP Fragmentation and Defragmentation__ to create and reassemble IPv4 and IPv6 fragments [[Learn more](https://pcapplusplus.github.io/docs/features#packet-reassembly)]\n- __Packet filtering__ that makes libpcap's BPF filters a lot more user-friendly [[Learn more](https://pcapplusplus.github.io/docs/features#packet-filtering)]\n- __TLS Fingerprinting__ - a C++ implementation of [JA3 and JA3S](https://github.com/salesforce/ja3) TLS fingerprinting [[Learn more](https://pcapplusplus.github.io/docs/features#tls-fingerprinting)]\n\n## Getting Started\n\nWriting applications with PcapPlusPlus is very easy and intuitive. Here is a simple application that shows how to read a packet from a PCAP file and parse it:\n\n```cpp\n#include <iostream>\n#include \"IPv4Layer.h\"\n#include \"Packet.h\"\n#include \"PcapFileDevice.h\"\n\nint main(int argc, char* argv[])\n{\n    // open a pcap file for reading\n    pcpp::PcapFileReaderDevice reader(\"1_packet.pcap\");\n    if (!reader.open())\n    {\n        std::cerr << \"Error opening the pcap file\" << std::endl;\n        return 1;\n    }\n\n    // read the first (and only) packet from the file\n    pcpp::RawPacket rawPacket;\n    if (!reader.getNextPacket(rawPacket))\n    {\n        std::cerr << \"Couldn't read the first packet in the file\" << std::endl;\n        return 1;\n    }\n\n    // parse the raw packet into a parsed packet\n    pcpp::Packet parsedPacket(&rawPacket);\n\n    // verify the packet is IPv4\n    if (parsedPacket.isPacketOfType(pcpp::IPv4))\n    {\n        // extract source and dest IPs\n        pcpp::IPv4Address srcIP = parsedPacket.getLayerOfType<pcpp::IPv4Layer>()->getSrcIPv4Address();\n        pcpp::IPv4Address destIP = parsedPacket.getLayerOfType<pcpp::IPv4Layer>()->getDstIPv4Address();\n\n        // print source and dest IPs\n        std::cout << \"Source IP is '\" << srcIP << \"'; Dest IP is '\" << destIP << \"'\" << std::endl;\n    }\n\n    // close the file\n    reader.close();\n\n    return 0;\n}\n```\n\nYou can find much more information in the [Getting Started](https://pcapplusplus.github.io/docs/quickstart) page in PcapPlusPlus web-site. This page will walk you through few easy steps to have an app up and running.\n\n## API Documentation\n\nPcapPlusPlus consists of 3 libraries:\n\n1. __Packet++__ - a library for parsing, creating and editing network packets\n2. __Pcap++__ - a library for intercepting and sending packets, providing network and NIC info, stats, etc. It is actually a C++ wrapper for packet capturing engines such as libpcap, WinPcap, Npcap, DPDK and PF_RING\n3. __Common++__ - a library with some common code utilities used by both Packet++ and Pcap++\n\nYou can find an extensive API documentation in the [API documentation section](https://pcapplusplus.github.io/docs/api) in PcapPlusPlus web-site.\nIf you see any missing data please [contact us](#provide-feedback).\n\n## Multi Platform Support\n\nPcapPlusPlus is currently supported on\n__Windows__\n<picture>\n  <img src=\"https://github.com/PcapPlusPlus/pcapplusplus.github.io/raw/master/static/img/os-logos/logo-windows.png\" alt=\"\" width=\"16\" height=\"16\"/>\n</picture>,\n__Linux__\n<picture>\n  <img src=\"https://github.com/PcapPlusPlus/pcapplusplus.github.io/raw/master/static/img/os-logos/logo-linux.png\" alt=\"\" width=\"16\" height=\"16\"/>\n</picture>,\n__MacOS__\n<picture><source media=\"(prefers-color-scheme: dark)\" srcset=\"https://github.com/PcapPlusPlus/pcapplusplus.github.io/raw/master/static/img/os-logos/logo-apple-dark.png\"/>\n  <img src=\"https://github.com/PcapPlusPlus/pcapplusplus.github.io/raw/master/static/img/os-logos/logo-apple.png\" alt=\"\" width=\"16\" height=\"16\"/>\n</picture>,\n__Android__\n<picture>\n  <img src=\"https://github.com/PcapPlusPlus/pcapplusplus.github.io/raw/master/static/img/os-logos/logo-android.png\" alt=\"\" width=\"16\" height=\"16\"/>\n</picture> and\n__FreeBSD__\n<picture>\n  <img src=\"https://github.com/PcapPlusPlus/pcapplusplus.github.io/raw/master/static/img/os-logos/logo-freebsd.png\" alt=\"\" width=\"16\" height=\"16\"/>\n</picture>.\nPlease visit PcapPlusPlus web-site to see all of the [supported platforms](https://pcapplusplus.github.io/docs/platforms) and refer to the [Download](#download) section to start using PcapPlusPlus on your platform.\n\n## Supported Network Protocols\n\nPcapPlusPlus currently supports parsing, editing and creation of packets of the following protocols:\n\n### Data Link Layer (L2)\n\n1. Ethernet II\n2. IEEE 802.3 Ethernet\n3. LLC (Only BPDU supported)\n4. Null/Loopback\n5. Packet trailer (a.k.a footer or padding)\n6. PPPoE\n7. SLL (Linux cooked capture)\n8. SLL2 (Linux cooked capture v2)\n9. STP\n10. VLAN\n11. VXLAN\n12. Wake on LAN (WoL)\n13. NFLOG (Linux Netfilter NFLOG) - parsing only (no editing capabilities)\n\n\n### Network Layer (L3)\n\n14. ARP\n15. GRE\n16. ICMP\n17. ICMPv6\n18. IGMP (IGMPv1, IGMPv2 and IGMPv3 are supported)\n19. IPv4\n20. IPv6\n21. MPLS\n22. NDP\n23. Raw IP (IPv4 & IPv6)\n24. VRRP (IPv4 & IPv6)\n25. WireGuard\n\n### Transport Layer (L4)\n\n26. COTP\n27. GTP (v1 & v2)\n28. IPSec AH & ESP - parsing only (no editing capabilities)\n29. TCP\n30. TPKT\n31. UDP\n\n### Session Layer (L5)\n\n32. SDP\n33. SIP\n\n### Presentation Layer (L6)\n\n34. SSL/TLS - parsing only (no editing capabilities)\n\n### Application Layer (L7)\n\n35. ASN.1 decoder and encoder\n36. BGP (v4)\n37. DHCP\n38. DHCPv6\n39. DNS\n40. FTP\n41. HTTP headers (request & response)\n42. LDAP\n43. NTP (v3, v4)\n44. Radius\n45. S7 Communication (S7comm)\n46. SMTP\n47. SOME/IP\n48. SSH - parsing only (no editing capabilities)\n49. Telnet - parsing only (no editing capabilities)\n50. Generic payload\n\n## DPDK And PF_RING Support\n\n[The Data Plane Development Kit (DPDK)](https://www.dpdk.org/) is a set of data plane libraries and network interface controller drivers for fast packet processing.\n\n[PF_RING™](https://www.ntop.org/products/packet-capture/pf_ring/) is a new type of network socket that dramatically improves the packet capture speed.\n\nBoth frameworks provide very fast packets processing (up to line speed) and are used in many network applications such as routers, firewalls, load balancers, etc.\nPcapPlusPLus provides a C++ abstraction layer over DPDK & PF_RING. This abstraction layer provides an easy to use interface that removes a lot of the boilerplate involved in using these frameworks. You can learn more by visiting the [DPDK](https://pcapplusplus.github.io/docs/dpdk) & [PF_RING](https://pcapplusplus.github.io/docs/features#pf_ring-support) support pages in PcapPlusPlus web-site.\n\n## Benchmarks\n\nWe used Matias Fontanini's [packet-capture-benchmarks](https://github.com/mfontanini/packet-capture-benchmarks) project to compare the performance of PcapPlusPlus with other similar C++ libraries (such as `libtins` and `libcrafter`).\n\nYou can see the results in the [Benchmarks](https://pcapplusplus.github.io/docs/benchmark) page in PcapPlusPlus web-site.\n\n## Provide Feedback\n\nWe'd be more than happy to get feedback, please feel free to reach out to us in any of the following ways:\n\n- Open a GitHub ticket\n- Post a message in PcapPlusPlus Google group: <https://groups.google.com/d/forum/pcapplusplus-support>\n- Ask a question on Stack Overflow: <https://stackoverflow.com/questions/tagged/pcapplusplus>\n- Send an email to: <pcapplusplus@gmail.com>\n- Follow us on X: <https://x.com/seladb>\n\nIf you like this project please __Star us on GitHub — it helps!__ :star: :star:\n\nPlease visit the [PcapPlusPlus web-site](https://pcapplusplus.github.io/community) to learn more.\n\n## Contributing\n\nWe would very much appreciate any contribution to this project. If you're interested in contributing please visit the [contribution page](https://pcapplusplus.github.io/community#contribute) in PcapPlusPlus web-site.\n\n## License\n\nPcapPlusPlus is released under the [Unlicense license](https://choosealicense.com/licenses/unlicense/).\n\n[![GitHub](https://img.shields.io/github/license/seladb/PcapPlusPlus?style=flat&color=blue&logo=unlicense)](https://choosealicense.com/licenses/unlicense/)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.4736328125,
          "content": "# Security Policy\n\n<!--\n## Supported Versions\n\n| Version | Supported          |\n| ------- | ------------------ |\n| x.x.x   | :white_check_mark: |\n| x.x.x   | :x:                |\n-->\n\nWe encourage you to submit a pull request if you have a solution or fix for anything. Your contributions help advance the library and enhance safety for all users :star:. We would very much appreciate any contribution to this project. If you're interested in contributing please visit the [contribution page](https://pcapplusplus.github.io/community#contribute) in PcapPlusPlus web-site.\n\n## Reporting a Bug :bug: :bug:\n\nSimply use GitHub issues to report a bug with related information to debug the issue :pencil:. Please check the [CONTRIBUTING.md](https://github.com/seladb/PcapPlusPlus/blob/master/CONTRIBUTING.md) for details.\n\n## Reporting a Vulnerability :closed_lock_with_key: :eyes:\n\nYou can use the GitHub issues to report a vulnerability publicly. But if you find a sensitive security issue and want to report privately :lock:, please email <pcapplusplus@gmail.com> with the following information:\n\n- Description of the vulnerability\n- Steps to reproduce the issue or a simple code piece\n- Affected versions\n- If applicable, a data sample (preferably `pcap/pcapng`) to reproduce\n- If known, any mitigations or fixes for the issue\n\nIf you already looked at the code and found the root cause - that's great :four_leaf_clover:! You can create a GitHub pull request as soon as possible with fix to keep safe everyone.\n"
        },
        {
          "name": "Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.201171875,
          "content": "coverage:\n  status:\n    project:\n      default:\n        threshold: 1%\n    patch: off\n\ncodecov:\n  notify:\n    after_n_builds: 19\n    wait_for_ci: yes\n\nignore:\n  - \"3rdParty/*\"\n  - \"Tests/*\"\n  - \"Examples/*\"\n"
        },
        {
          "name": "codespell-ignore-list.txt",
          "type": "blob",
          "size": 0.0517578125,
          "content": "hist\nfiletests\ntha\nue\ngost\ninout\nba\nwont\npinter\nallo\n"
        },
        {
          "name": "cppcheckSuppressions.txt",
          "type": "blob",
          "size": 0.36328125,
          "content": "*:3rdParty/*\n\nConfigurationNotChecked:*\nctuOneDefinitionRuleViolation:Examples/*\nmissingInclude:*\nunknownMacro:*\nunusedFunction:*\nunusedStructMember:*\n\nnoExplicitConstructor:Common++/header/IpAddress.h\nnoExplicitConstructor:Common++/header/MacAddress.h\nnoExplicitConstructor:Pcap++/header/PcapFileDevice.h\n\nmissingOverride:Pcap++/*\nmissingOverride:Examples/*\ncstyleCast:*\n"
        },
        {
          "name": "translation",
          "type": "tree",
          "content": null
        },
        {
          "name": "typos-config.toml",
          "type": "blob",
          "size": 1.2919921875,
          "content": "[files]\nextend-exclude = [  \"*.toml\",\n                    \"*.dat\",\n                    \"codespell-ignore-list.txt\",\n                    \"ci/\",\n                    \"Dist/\",\n                    \"mk/\",\n                    \"3rdParty\",\n                    \"Tests/ExamplesTest/expected_output/\",\n                    \"Tests/ExamplesTest/pcap_examples/\",\n                    \"Tests/Packet++Test/PacketExamples/\",\n                    \"Tests/Pcap++Test/PcapExamples/\",\n                 ]\n\n[default.extend-identifiers]\nSSLSymetricEncryptionAlgorithm = \"SSLSymetricEncryptionAlgorithm\"\nOsiModelSesionLayer = \"OsiModelSesionLayer\"\nSip181CallisBeingForwarded = \"Sip181CallisBeingForwarded\"\n# These identifiers below are coming from deprecated functions which is mentioned in cmake/package/READMEs/release_notes.txt\n# They can be removed in next release (first release after v23.09) when the release notes are changed.\ngetMesageType = \"getMesageType\"\nsetMesageType = \"setMesageType\"\ngetExtensionsLenth = \"getExtensionsLenth\"\ncreateHandhakeMessage = \"createHandhakeMessage\"\n\n[default.extend-words]\nue = \"ue\"\nloca = \"loca\"\ninout = \"inout\"\nede = \"ede\"\ntha = \"tha\"\ngost = \"gost\"\nba = \"ba\"\nlengt = \"lengt\"\nreferer = \"referer\"\nallo = \"allo\"\npinter = \"pinter\"\nhelo = \"helo\"\nhom = \"hom\"\npn = \"pn\"\n\n[type.make]\nextend-glob = []\ncheck-file = false\n"
        }
      ]
    }
  ]
}