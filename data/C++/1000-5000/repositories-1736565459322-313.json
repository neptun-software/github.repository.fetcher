{
  "metadata": {
    "timestamp": 1736565459322,
    "page": 313,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pytorch/glow",
      "stars": 3253,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".ci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 3.0439453125,
          "content": "---\nLanguage:        Cpp\n# BasedOnStyle:  LLVM\nAccessModifierOffset: -2\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlines: Right\nAlignEscapedNewlinesLeft: false\nAlignOperands:   true\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: All\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: false\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:\n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   false\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Attach\nBreakBeforeInheritanceComma: false\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: BeforeColon\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit:     80\nCommentPragmas:  '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nForEachMacros:\n  - foreach\n  - Q_FOREACH\n  - BOOST_FOREACH\nIncludeCategories:\n  - Regex:           '^\"(llvm|llvm-c|clang|clang-c)/'\n    Priority:        2\n  - Regex:           '^(<|\"(gtest|gmock|isl|json)/)'\n    Priority:        3\n  - Regex:           '.*'\n    Priority:        1\nIncludeIsMainRegex: '(Test)?$'\nIndentCaseLabels: false\nIndentWidth:     2\nIndentWrappedFunctionNames: false\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: true\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 19\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 60\nPointerAlignment: Right\nReflowComments:  true\nSortIncludes:    true\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Cpp11\nTabWidth:        8\nUseTab:          Never\n...\n\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 1.2353515625,
          "content": "---\n# NOTE: there must be no spaces before the '-', so put the comma last.\nInheritParentConfig: true\nChecks: '\nclang-diagnostic-*,\nmodernize-*,\nclang-analyzer-*,\n-android-*,\n-fuchsia-*,\n-clang-analyzer-alpha*,\n-readability-named-parameter,\n-misc-unused-parameters,\n-google-runtime-references,\n-google-build-using-namespace,\n-cppcoreguidelines-pro-type-union-access,\n-google-readability-casting,\n-readability-implicit-bool-cast,\n-readability-convert-member-functions-to-static,\n-google-readability-todo,\n-readability-braces-around-statements,\n-google-readability-braces-around-statements,\n-performance-unnecessary-value-param,\n-misc-unused-using-decls,\n-modernize-pass-by-value,\n-modernize-raw-string-literal,\n-modernize-use-trailing-return-type,\n-modernize-use-nodiscard,\n-readability-else-after-return,\n-readability-implicit-bool-conversion,\n-cppcoreguidelines-pro-type-member-init,\n-hicpp-member-init,\n-hicpp-no-array-decay,\n-hicpp-use-auto,\n-hicpp-vararg,\n-cppcoreguidelines-pro-bounds-array-to-pointer-decay,\n-cppcoreguidelines-pro-type-vararg,\n-cppcoreguidelines-pro-type-reinterpret-cast,\n-cppcoreguidelines-owning-memory,\n-cppcoreguidelines-macro-usage,\n'\nWarningsAsErrors: ''\nHeaderFilterRegex: 'include/glow'\nAnalyzeTemporaryDtors: false\nCheckOptions:\n...\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2431640625,
          "content": "*.o\n*.swn\n*.swo\n*.swp\n*~\n.DS_Store\n*.so\n*.dylib\n*.egg-info\n*.egg\n*.eggs\n*.pyc\n\nGPATH\nGRTAGS\nGTAGS\ntags\n\ncompile_commands.json\n\nbuild/\nexternal/googletest/\nexternal/llvm/\nexternalbackends/*/\n.vscode/\n.vim/\n.idea/\n.ccls-cache/\n.vs*\nbuild_*/*\n.clangd/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.794921875,
          "content": "[submodule \"tests/googletest\"]\n\tpath = tests/googletest\n\turl = https://github.com/google/googletest.git\n[submodule \"thirdparty/onnx\"]\n\tpath = thirdparty/onnx\n\turl = https://github.com/onnx/onnx.git\n[submodule \"thirdparty/fp16\"]\n\tpath = thirdparty/fp16\n\turl = https://github.com/Maratyszcza/FP16.git\n[submodule \"tests/OutputCheck\"]\n\tpath = tests/OutputCheck\n\turl = https://github.com/stp/OutputCheck.git\n[submodule \"thirdparty/foxi\"]\n\tpath = thirdparty/foxi\n\turl = https://github.com/houseroad/foxi.git\n[submodule \"googlebenchmark\"]\n\tpath = tests/googlebenchmark\n\turl = https://github.com/google/benchmark\n[submodule \"thirdparty/pybind11\"]\n\tpath = thirdparty/pybind11\n\turl = https://github.com/pybind/pybind11.git\n[submodule \"thirdparty/folly\"]\n\tpath = thirdparty/folly\n\turl = https://github.com/facebook/folly.git\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 10.634765625,
          "content": "cmake_minimum_required(VERSION 3.5)\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules\")\n\nproject(Glow C CXX)\nenable_testing()\n\noption(GLOW_WITH_CPU \"Build the LLVM-based JIT CPU backend\" ON)\noption(GLOW_WITH_LLVMIRCODEGEN \"Build the LLVM-based code generation library\" ON)\noption(GLOW_WITH_OPENCL \"Build the OpenCL backend\" OFF)\noption(GLOW_WITH_NNPI \"Build the NNPI backend\" OFF)\noption(GLOW_WITH_HABANA \"Build the Habana backend\" OFF)\noption(GLOW_USE_PNG_IF_REQUIRED \"Link with libpng if required\" ON)\noption(GLOW_BUILD_EXAMPLES \"Build the examples\" ON)\noption(GLOW_BUILD_PYTORCH_INTEGRATION \"Build integration for PyTorch\" OFF)\noption(GLOW_BUILD_TESTS \"Build the tests\" ON)\noption(GLOW_BUILD_ONNXIFI_DYNLIB \"Build dynamic library for Onnxifi\" OFF)\noption(GLOW_WITH_BUNDLES \"Build bundles\" OFF)\noption(LINK_PROTOBUF_AS_DLL \"Link against protobuf build as dynamic libray.\" OFF)\noption(TENSOR_DIMS_32_BITS \"Set the max bitwidth of the tensor dimension and related indices to 32b instead of 64b.\" OFF)\noption(GLOW_LIBJIT_FAST_MATH \"Build the LLVM backend LIBJIT kernel library with fast math option.\" ON)\n\nset(CMAKE_CXX_STANDARD 14)\nset(CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\n\nif (NOT BUILD_SHARED_LIBS)\n  set(CMAKE_CXX_VISIBILITY_PRESET hidden)\n  set(CMAKE_VISIBILITY_INLINES_HIDDEN ON)\nendif ()\n\n# Export a JSON file with the compilation commands that external tools can use\n# to analyze the source code of the project.\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\nif(GLOW_USE_LLD)\n  if(NOT CMAKE_C_COMPILER_ID MATCHES Clang)\n    message(FATAL_ERROR \"lld requires the use of the clang compiler\")\n  endif()\n  if(CMAKE_SYSTEM_NAME STREQUAL Darwin)\n    message(FATAL_ERROR \"lld does not support MachO yet\")\n  endif()\n  include(CheckCXXCompilerFlag)\n  set(CMAKE_REQUIRED_FLAGS \"${CMAKE_REQUIRED_FLAGS} -fuse-ld=lld\")\n  CHECK_CXX_COMPILER_FLAG(\"-fuse-ld=lld\" HAS_LLD_FLAG)\n  if(NOT HAS_LLD_FLAG)\n    message(FATAL_ERROR \"lld is not supported by the compiler\")\n  endif()\n  set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -fuse-ld=lld\")\n  set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fuse-ld=lld\")\nendif()\n\ninclude(Glog)\ninclude(Gflags)\ninclude(GlowDefaults)\ninclude(GlowTestSupport)\ninclude(GlowExternalBackends)\ninclude(SanitizerSupport)\ninclude(CoverageSupport)\ninclude(DoxygenSupport)\ninclude(FindBackends)\n\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules/CMakeGraphVizOptions.cmake\n               ${CMAKE_CURRENT_BINARY_DIR}/CMakeGraphVizOptions.cmake COPYONLY)\n\nset(GLOW_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})\nset(GLOW_THIRDPARTY_DIR ${GLOW_SOURCE_DIR}/thirdparty)\nset(GLOW_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR})\nset(GLOW_OUTPUT_DIR ${GLOW_BINARY_DIR}/bin)\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${GLOW_OUTPUT_DIR})\nset(GLOW_MODELS_DIR \"\" CACHE PATH\n    \"Directory that contains the various models, like en2gr, resnet50\")\n\ninclude_directories(BEFORE\n  ${CMAKE_CURRENT_BINARY_DIR}/include\n  ${CMAKE_CURRENT_SOURCE_DIR}/include\n)\n\ninclude_directories(${GLOW_BINARY_DIR})\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR})\ninclude_directories(${GLOW_SOURCE_DIR})\n\nfile(GLOB_RECURSE header_files include/*.h tools/*.h lib/*.h)\nadd_custom_target(CollectHeaders SOURCES ${header_files})\n\nfind_package(Git)\n# Get the commit's short SHA1\nexecute_process(COMMAND\n  \"${GIT_EXECUTABLE}\" log -1 --pretty=format:%h\n  WORKING_DIRECTORY \"${CMAKE_SOURCE_DIR}\"\n  OUTPUT_VARIABLE GIT_SHA1\n  ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)\nadd_definitions(\"-DGIT_SHA1=\\\"${GIT_SHA1}\\\"\")\n# Get the date of the commit\nexecute_process(COMMAND\n  \"${GIT_EXECUTABLE}\" log -1 --pretty=format:%ad --date=short\n  WORKING_DIRECTORY \"${CMAKE_SOURCE_DIR}\"\n  OUTPUT_VARIABLE GIT_DATE\n  ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)\nadd_definitions(\"-DGIT_DATE=\\\"${GIT_DATE}\\\"\")\n# Get the name of the most recent tag.\nexecute_process(COMMAND\n  \"${GIT_EXECUTABLE}\" describe --tags --abbrev=0\n  WORKING_DIRECTORY \"${CMAKE_SOURCE_DIR}\"\n  OUTPUT_VARIABLE GIT_TAG\n  ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)\nadd_definitions(\"-DGIT_TAG=\\\"${GIT_TAG}\\\"\")\n\n# Compile definition for Glow build date in Y-M-D format.\nstring(TIMESTAMP GLOW_BUILD_DATE \"%Y-%m-%d\")\nadd_definitions(\"-DGLOW_BUILD_DATE=\\\"${GLOW_BUILD_DATE}\\\"\")\nadd_definitions(\"-DGLOW_VERSION=\\\"${GIT_DATE} (${GIT_SHA1}) (${GIT_TAG})\\\"\")\n\nif(GLOW_USE_PNG_IF_REQUIRED)\n  find_package(PNG)\n  if(PNG_FOUND)\n    add_definitions(-DWITH_PNG)\n  endif()\nendif()\n\nif(GLOW_WITH_LLVMIRCODEGEN)\n  add_definitions(-DGLOW_WITH_LLVMIRCODEGEN=1)\nendif()\n\nif(GLOW_WITH_CPU)\n  if(NOT GLOW_WITH_LLVMIRCODEGEN)\n    message(FATAL_ERROR \"Cannot use -DGLOW_WITH_CPU without -DGLOW_WITH_LLVMIRCODEGEN\")\n  endif ()\n  add_definitions(-DGLOW_WITH_CPU=1)\nendif ()\n\nif (GLOW_WITH_OPENCL)\n  add_definitions(-DGLOW_WITH_OPENCL=1)\n  find_package(OpenCL REQUIRED)\nendif ()\n\nif(GLOW_WITH_NNPI)\n  add_definitions(-DGLOW_WITH_NNPI=1)\nendif()\n\nif (GLOW_WITH_HABANA)\n  add_definitions(-DGLOW_WITH_HABANA=1)\n\n  # Find habanalabs libraries.\n  list(APPEND CMAKE_PREFIX_PATH /usr/lib/habanalabs)\n  find_path(SYNAPSE_INCLUDE_DIR synapse.h)\n  find_library(SYNAPSE_LIB Synapse)\n  find_library(TPCSIM_SHARED_LIB tpcsim_shared)\n  find_library(HL_THUNK_LIB hl-thunk)\n\n  # Create interface library to encapsulate necessary .so's.\n  add_library(Synapse INTERFACE)\n  target_link_libraries(Synapse\n    INTERFACE\n    \"${SYNAPSE_LIB}\"\n    \"${TPCSIM_SHARED_LIB}\"\n    \"${HL_THUNK_LIB}\")\nendif ()\n\nset(LLVMCPURuntimeExtraFlags)\nif (TENSOR_DIMS_32_BITS)\n  add_definitions(-DDIM_T_32)\n  list(APPEND LLVMCPURuntimeExtraFlags \"-DDIM_T_32\")\n  message(STATUS \"Using 32b tensor dimensions.\")\nelse()\n  message(STATUS \"Using 64b tensor dimensions.\")\nendif ()\n\nif (GLOW_LIBJIT_FAST_MATH)\n  list(APPEND LLVMCPURuntimeExtraFlags \"-DFFAST_MATH\")\n  list(APPEND LLVMCPURuntimeExtraFlags \"-ffast-math\")\n  list(APPEND LLVMCPURuntimeExtraFlags \"-fno-finite-math-only\")\n  message(STATUS \"Libjit option 'fast-math' enabled.\")\nelse()\n  message(STATUS \"Libjit option 'fast-math' disabled.\")\nendif ()\n\n# Top level setup for external backends\nExternalBackendsInit()\n\nfind_package(LLVM CONFIG)\nif(NOT LLVM_FOUND OR LLVM_VERSION VERSION_LESS 7.0)\n  message(SEND_ERROR \"LLVM >= 7.0 is required to build Glow\")\nendif()\n\nmessage(STATUS \"Found LLVM ${LLVM_PACKAGE_VERSION}\")\nmessage(STATUS \"Using LLVMConfig.cmake in: ${LLVM_DIR}\")\ninclude_directories(SYSTEM ${LLVM_INCLUDE_DIRS})\n\nif(NOT EXISTS \"${GLOW_SOURCE_DIR}/tests/googlebenchmark/src\")\n  message(FATAL_ERROR \"No googlebenchmark git submodule. Run: git submodule update --init --recursive\")\nendif()\n\nif(NOT EXISTS \"${GLOW_SOURCE_DIR}/tests/googletest/googletest\")\n  message(FATAL_ERROR \"No googletest git submodule. Run: git submodule update --init --recursive\")\nendif()\n\nif(NOT EXISTS \"${GLOW_SOURCE_DIR}/tests/OutputCheck/bin/OutputCheck\")\n  message(FATAL_ERROR \"No OutputCheck git submodule. Run: git submodule update --init --recursive\")\nendif()\n\nif(NOT EXISTS \"${GLOW_THIRDPARTY_DIR}/onnx\")\n  message(FATAL_ERROR \"No onnx git submodule. Run: git submodule update --init --recursive\")\nendif()\n\nif(NOT EXISTS \"${GLOW_THIRDPARTY_DIR}/foxi\")\n  message(FATAL_ERROR \"No foxi git submodule. Run: git submodule update --init --recursive\")\nendif()\n\nif(NOT EXISTS \"${GLOW_THIRDPARTY_DIR}/fp16\")\n  message(FATAL_ERROR \"No fp16 git submodule. Run: git submodule update --init --recursive\")\nelse()\n  include_directories(${GLOW_THIRDPARTY_DIR}/fp16/include)\nendif()\nif (MSVC)\n    find_package(folly CONFIG REQUIRED)\n    find_library(JEMALLOC_LIB jemalloc)\n    add_library(folly_jemalloc INTERFACE)\n    target_link_libraries(folly_jemalloc INTERFACE Folly::folly Folly::folly_deps Folly::follybenchmark Folly::folly_test_util ${JEMALLOC_LIB})\nelseif(NOT EXISTS \"${GLOW_THIRDPARTY_DIR}/folly/folly\")\n  message(FATAL_ERROR \"No folly git submodule. Run: git submodule update --init --recursive\")\nelse()\n  # Apple-specific definitions for folly.\n  if(APPLE)\n    set(FOLLY_HAVE_WEAK_SYMBOLS ON CACHE BOOL \"Compiler supports weak symbols\")\n    set(OPENSSL_ROOT_DIR /usr/local/opt/openssl)\n    find_package(OpenSSL REQUIRED)\n  endif()\n\n  # Remove Glow-specific CMAKE_CXX_FLAGS to build folly.\n  set(SAVE_CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n  if (CONFIG_HAVE_KERNEL_TIMESPEC)\n    set(CMAKE_CXX_FLAGS \"-DCONFIG_HAVE_KERNEL_TIMESPEC\")\n  else()\n    set(CMAKE_CXX_FLAGS \"\")\n  endif()\n  set(SAVE_CMAKE_CXX_STANDARD \"${CMAKE_CXX_STANDARD}\")\n  unset(CMAKE_CXX_STANDARD)\n  set(CXX_STD \"c++14\" CACHE STRING \"Force c++14 for folly\")\n  set(COMPILER_HAS_F_ALIGNED_NEW OFF CACHE BOOL \"turn off -faligned_new for folly\")\n  add_subdirectory(\"${GLOW_THIRDPARTY_DIR}/folly\" EXCLUDE_FROM_ALL)\n  target_include_directories(folly PUBLIC \"${OPENSSL_INCLUDE_DIR}\")\n  set(CMAKE_CXX_FLAGS \"${SAVE_CMAKE_CXX_FLAGS}\")\n  set(CMAKE_CXX_STANDARD \"${SAVE_CMAKE_CXX_STANDARD}\")\n  find_library(JEMALLOC_LIB jemalloc)\n  add_library(folly_jemalloc INTERFACE)\n  target_link_libraries(folly_jemalloc INTERFACE folly ${JEMALLOC_LIB})\nendif()\n\nadd_library(Miniz\n  ${GLOW_THIRDPARTY_DIR}/miniz-2.0.8/miniz.c)\ntarget_include_directories(Miniz PUBLIC ${GLOW_THIRDPARTY_DIR}/miniz-2.0.8)\n\nadd_subdirectory(lib)\nadd_subdirectory(tools)\n\nif (GLOW_BUILD_EXAMPLES)\n  add_subdirectory(examples)\nendif()\n\nif (GLOW_BUILD_PYTORCH_INTEGRATION)\n  if(NOT EXISTS \"${GLOW_THIRDPARTY_DIR}/pybind11\")\n    message(FATAL_ERROR \"No pybind11 git submodule. Run: git submodule update --init --recursive\")\n  else()\n    add_subdirectory(${GLOW_THIRDPARTY_DIR}/pybind11)\n  endif()\n\n  add_subdirectory(torch_glow/src)\nendif()\n\nif (GLOW_WITH_BUNDLES AND NOT GLOW_WITH_CPU)\n  message(FATAL_ERROR \"Cannot create bundles without CPU backend. Configure with -DGLOW_WITH_BUNDLES and -DGLOW_WITH_CPU to build bundles.\")\nendif()\n\nif (GLOW_BUILD_TESTS)\n  set(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL \"Disable tests for Google benchmark\" FORCE)\n  add_subdirectory(tests/googlebenchmark EXCLUDE_FROM_ALL)\n  add_subdirectory(tests/googletest EXCLUDE_FROM_ALL)\n  add_subdirectory(tests)\n\n  # Fetch the dependencies for all the tests.\n  get_property(GLOW_TEST_DEPENDS GLOBAL PROPERTY GLOW_TEST_DEPENDS)\n\n  # All tests except expensive tests and stress tests.\n  add_custom_target(check COMMAND ${CMAKE_CTEST_COMMAND} --output-on-failure -LE EXPENSIVE\\\\|STRESS\n                      DEPENDS ${GLOW_TEST_DEPENDS} USES_TERMINAL)\n\n  # All tests including expensive tests but not stress tests.\n  add_custom_target(check_expensive COMMAND ${CMAKE_CTEST_COMMAND} -LE STRESS\n                      DEPENDS ${GLOW_TEST_DEPENDS} USES_TERMINAL)\n\n  # All tests including expensive and stress tests.\n  add_custom_target(check_expensive_stress COMMAND ${CMAKE_CTEST_COMMAND}\n                      DEPENDS ${GLOW_TEST_DEPENDS} USES_TERMINAL)\nendif()\n\nadd_custom_target(dependency_graph\n                  \"${CMAKE_COMMAND}\" \"--graphviz=dependency_graph\" .\n                  WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}\")\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.27734375,
          "content": "# Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to make participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies within all project spaces, and it also applies when\nan individual is representing the project or its community in public spaces.\nExamples of representing a project or community include using an official\nproject e-mail address, posting via an official social media account, or acting\nas an appointed representative at an online or offline event. Representation of\na project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at <opensource-conduct@fb.com>. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.322265625,
          "content": "# Contributing to the project\n\nEveryone is welcome to contribute to the project. Contributing does not just\nmean submitting patches. There are many different ways for you to get involved,\nincluding answering questions on the mailing lists, reporting and triaging bugs,\nand participating in the design discussions.\n\n## Coding Standards\n\nSee [CodingStandards.md](docs/CodingStandards.md).\n\n## Pull Requests\n\nWe actively welcome your pull requests.\n\n* Fork the repo and create your branch from `master`.\n* Create your PR.\n* Make sure added code has test coverage. Unit tests will automatically run for you.\n  For more complicated changes run additional [Glow test suite](docs/Testing.md).\n* PRs are expected to have 100% test coverage for the added code.\n  This can be verified with the coverage build.\n* Your PR title should be descriptive, and generally, start with a specific\n  subsystem enclosed in square braces. For example:\n  * [Quantization] Support multi-output nodes.\n  * [Docs] Fix grammar errors.\n* If PR is not trivial, your PR description should have details on what the PR\n  does.\n* Every PR needs to be reviewed by at least one [maintainer](#maintainers)\n  before it can be merged.\n* When all of the tests are passing and all other conditions described above\n  satisfied, the PR is ready for review and merge.\n\n## Issues\n\nWe use GitHub issues to track public bugs. Please ensure your description is\nclear and has sufficient instructions to be able to reproduce the issue.\n\n## Maintainers\n\n* Artem Rakhov ([artemrakhov](https://github.com/artemrakhov))\n* Bert Maher ([bertmaher](https://github.com/bertmaher))\n* Garret Catron ([gcatron](https://github.com/gcatron))\n* Jakob Stoklund Olesen ([stoklund](https://github.com/stoklund))\n* James Hegeman ([hegemanjwh2](https://github.com/hegemanjwh2))\n* Jordan Fix ([jfix71](https://github.com/jfix71))\n* Man Wang ([beicy](https://github.com/beicy))\n* Meghan Lele ([SplitInfinity](https://github.com/SplitInfinity))\n* Nadav Rotem ([nadavrot](https://github.com/nadavrot))\n* Quentin Colombet ([qcolombet](https://github.com/qcolombet))\n* Roman Dzhabarov ([rdzhabarov](https://github.com/rdzhabarov))\n* Roman Levenstein ([opti-mix](https://github.com/opti-mix))\n\n## License\n\nBy contributing to the project, you agree that your contributions will be licensed\nunder the LICENSE file in the root directory of this source tree.\n"
        },
        {
          "name": "CONTRIBUTORS",
          "type": "blob",
          "size": 1.615234375,
          "content": "# File generated originally on Oct 14, 2019 from the root of the glow repo by running:\n#     git log --format=format:%an .  |sort |uniq\n#\n# Removed some obvious duplicate entries, but otherwise as-is.\n# See also  \"2. Grant of Copyright License\" at https://code.facebook.com/cla/\nAdam Newton\nAdam Weis\nAditya Kumar\nAhmed S. Taei\nAlanna Tempest\nAlex Fetisov\nAlexander Yermolovich\nAnders Papitto\nAndrey Turetskiy\nAnthonyOfSeattle\nArtem Rakhov\nArun Moorthy\nBert Maher\nBoncheol Gu\nBradford Cottel\nBram Wasti\nBrett Koonce\nChad Rosier\nChi Zhang\nCiprian Mindru\nDheeraj R Reddy\nDon Jang\nEvgeny Kharitonov\nGabriel Agamennoni\nGarret Catron\nGregory Neverov\nGuangshuo Liu\nHector Yuen\nHemant\nHugh Xia\nIgor Milyakov\nJack Montgomery\nJacob Subag\nJakob Olesen\nJames Hegeman\nJoe Shajrawi\nJoel Pobar\nJongsoo Park\nJordan Fix\nKuan Hsh Chen\nKumud Bhandari\nLouis Feng\nLu Fang\nMan Wang\nMatt\nMatt Davis\nMatthias Braun\nMax Kazantsev\nMeghan Lele\nMichael Anderson\nMichel Aoun\nMor Tzur\nMutian Liu\nNadav Rotem\nNarayanan Sundaram\nNick Gibson\nNitzan Wert\nOri Shalev\nPaul Johnson\nPaul O'Shannessy\nPekka Jääskeläinen\nPete Couperus\nPeter Goldsborough\nQi Zhou\nQuentin Colombet\nRobert Płóciennik\nRodrigo Zhou\nRoman Dzhabarov\nRoman Levenstein\nRui Zhu\nSaleem Abdulrasool\nSameer Abu Asal\nSatish Nadathur\nSaurabh\nShai Szulanski\nStephen Chen\nSummer Deng\nTed Li\nThierry Lepley\nTim Hatch\nUdo Walterscheidt\nVladimir Uzelac\nXuewen Cui\nYinghai Lu\nYonggang Luo\nYue Zhao\nYuri Putivsky\nZachary DeVito\nayermolo\nbddppq\nbeicy\ncrcrpar\ndeepa mohan-SJ1 Eng_ML\ngabagam\njygan\nltamasi\nmcaounfb\nqcolombet\nqijun\nsri-desai\nsuyash ugare\nvedanuj\nwayneshawn\nzakk\nzakk.chen\nzhangwm\nzrphercule\n虞先達 (Eric S. Yu)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "PULL_REQUEST.md",
          "type": "blob",
          "size": 1.6982421875,
          "content": "# Title\n\nThe title of the PR should be short and expressive enough to reflect the proposed changes.\nIt should start with the name of the subsystem affected by the PR in the square braces.\nFor example:\n* [quantization] Properly quantize ReLU\n* [opencl] Define a type cl_host_size_t exactly matching the type size_t used on the host side\n* [Type.h] Add comments for the ElemKinds\n\nIdeally, the same format should be used in the commit message.\n\n# Summary\n\nThe Summary field should include a more verbose explanation of what this PR does.\nIf this PR causes a change in behavior it should document the behavior before and after.\nIf it fixes a bug, please, describe what the original issue is and how the change resolves it.\n\n# Formatting\n\nPlease, run clang-format before submitting the PR.\n\n# Test Plan\n\nThe test plan section should include an explanation of what testing was done.\nFor example unit test, manual testing through stand-alone testing binaries like mnist, cifar10, etc.\nPlease use your best judgment or ask for guidance if you are unsure what kind of testing is required for a given change.\nThe riskier the change, the more comprehensive the testing should be.\nIf PR fixes an existing bug, make sure to present unit test which reveals the original problem.\n\n# Documentation\n\nPlease, make sure to update existing docs if your change affects those.\nDocs can be found under the glow/docs. Use your best judgment for creating new docs.\n\n# Issues\n\nIf the PR fixes an existing issue, please add a line of the form:\n* Fixes #Issue.\n\nThis way Github will make sure that underlying referenced issue will be automatically closed once PR is merged.\n\nIf the purpose of the PR to address issue partially, please, just tag the issue:\n* #Issue.\n"
        },
        {
          "name": "PULL_REQUEST_TEMPLATE.md",
          "type": "blob",
          "size": 0.16796875,
          "content": "Summary:\n\nDocumentation:\n\n[Optional Fixes #issue]\n\nTest Plan:\n\nPlease see a detailed explanation of how to fill out the fields in the relevant sections in PULL_REQUEST.md.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.857421875,
          "content": "![Glow Logo](./docs/logo.svg)\n\n[![pytorch](https://circleci.com/gh/pytorch/glow.svg?style=shield)](https://circleci.com/gh/pytorch/glow)\n\n\nGlow is a machine learning compiler and execution engine for hardware\naccelerators.  It is designed to be used as a backend for high-level machine\nlearning frameworks.  The compiler is designed to allow state of the art\ncompiler optimizations and code generation of neural network graphs. This\nlibrary is in active development. The project plan is described in the Github\nissues section and in the\n[Roadmap](https://github.com/pytorch/glow/wiki/Glow-Roadmap) wiki page.\n\n## Partners\n\nContributions to Glow are welcomed and encouraged! Glow is developed in\ncollaboration with the following partners:\n\n\n<!---\nNote:\nList of partner logos sorted alphabetically column order.\n-->\n\n| ![Bitmain Logo](./docs/partners/bitmain.png) | ![Habana Logo](./docs/partners/habana.png) | ![ST Logo](./docs/partners/st.png)  |\n:-------------------------:|:-------------------------:|:-------------------------:\n| ![Cadence Logo](./docs/partners/cadence.png) | ![Intel Logo](./docs/partners/intel.png) | ![Synopsys Logo](./docs/partners/synopsys.png) |\n| ![CEVA Logo](./docs/partners/ceva.png)   |  ![Marvell Logo](./docs/partners/marvell.png) |  |\n| ![Esperanto Logo](./docs/partners/esperanto.png)  | ![NXP Logo](./docs/partners/nxp.png) |  |\n\n\n## How does it work?\n\nGlow lowers a traditional neural network dataflow graph into a two-phase\nstrongly-typed [intermediate representation (IR)](./docs/IR.md). The high-level\nIR allows the optimizer to perform domain-specific optimizations. The\nlower-level instruction-based address-only IR allows the compiler to perform\nmemory-related optimizations, such as instruction scheduling, static memory\nallocation and copy elimination. At the lowest level, the optimizer performs\nmachine-specific code generation to take advantage of specialized hardware\nfeatures. Glow features a lowering phase which enables the compiler to support a\nhigh number of input operators as well as a large number of hardware targets by\neliminating the need to implement all operators on all targets. The lowering\nphase is designed to reduce the input space and allow new hardware backends to\nfocus on a small number of linear algebra primitives.\nThe design philosophy is described in an [arXiv paper](https://arxiv.org/abs/1805.00907).\n\n![](./docs/3LevelIR.png)\n\n## Getting Started\n\n### System Requirements\n\nGlow builds and runs on macOS and Linux. The software depends on a modern C++\ncompiler that supports C++11, on CMake, LLVM (>=7.0), glog, protocol buffers, and\nlibpng.\n\n#### Get Glow!\n\n  ```bash\n  git clone git@github.com:pytorch/glow.git  # or: git clone https://github.com/pytorch/glow.git\n  cd glow\n  ```\n\n#### Submodules\n\nGlow depends on a few submodules: googletest, onnx, and a library\nfor FP16 conversions.\n\nTo get them, from the glow directory, run:\n\n  ```bash\n  git submodule update --init --recursive\n  ```\n\n#### Source dependencies\n\nGlow depends on `fmt`, which must be built from source:\n```bash\ngit clone https://github.com/fmtlib/fmt\nmkdir fmt/build\ncd fmt/build\ncmake ..\nmake\nsudo make install\n```\n\n#### macOS\n\nInstall the required dependencies using either [Homebrew](https://brew.sh/) or\n[MacPorts](https://www.macports.org/). If using Homebrew, run:\n\n  ```bash\n  brew install cmake graphviz libpng ninja protobuf wget glog autopep8 llvm   \\\n      boost double-conversion gflags jemalloc libevent lz4 openssl pkg-config \\\n      snappy xz\n  ```\n\nIf using MacPorts, run:\n\n  ```bash\n  port install cmake graphviz libpng ninja protobuf-cpp wget google-glog \\\n      boost double-conversion gflags jemalloc libevent lz4 openssl snappy xz\n  # Choose version >= 7\n  export LLVM_VERSION=7\n  port install llvm-$LLVM_VERSION.0 \n  ```\n\n\nNote that LLVM is installed in a non-default location to avoid conflicts with\nthe system's LLVM --Homebrew usually installs LLVM in `/usr/local/opt/llvm/`,\nwhereas MacPorts installs it in `/opt/local/libexec/llvm-$LLVM_VERSION.0/`. This means that\nCMake will need to be told where to find LLVM when building; instructions on\nthat can be found [here](#building-with-dependencies-llvm).\n\nFinally, create a symbolic link to the Homebrew- or MacPorts-installed\n`clang-*` tools so that the `utils/format.sh` script is able to find them later\non. For a Homebrew-managed installation, run:\n  ```\n  ln -s \"/usr/local/opt/llvm/bin/clang-format\" \"/usr/local/bin/clang-format\"\n  ln -s \"/usr/local/opt/llvm/bin/clang-tidy\" \"/usr/local/bin/clang-tidy\"\n  ```\nFor MacPorts, run:\n  ```\n  ln -s \"/opt/local/libexec/llvm-$LLVM_VERSION.0/bin/clang-format\" \"/usr/local/bin/clang-format\"\n  ln -s \"/opt/local/libexec/llvm-$LLVM_VERSION.0/bin/clang-tidy\" \"/usr/local/bin/clang-tidy\"\n```\n\n> **Note:** Starting with macOS Mojave, Xcode's command line tools changed header layout. \n> In order for Glow to build on Mojave, you might need to install\n> `macOS_SDK_headers_for_macOS_10.14.pkg`, located in \n> `/Library/Developer/CommandLineTools/Packages/`.\n> For macOS Catalina you might need to explicitly specify SDKROOT: \n> `export SDKROOT=\"/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk\"`\n\n\n#### Ubuntu\n\n[The following instructions have been tested on Ubuntu 16.04 and 18.04]\n\nIn order to build Glow on Ubuntu it is necessary to install a few packages. The\nfollowing command should install the required dependencies:\n\n  ```bash\n  sudo apt-get install clang clang-8 cmake graphviz libpng-dev \\\n      libprotobuf-dev llvm-8 llvm-8-dev ninja-build protobuf-compiler wget \\\n      opencl-headers libgoogle-glog-dev libboost-all-dev \\\n      libdouble-conversion-dev libevent-dev libssl-dev libgflags-dev \\\n      libjemalloc-dev libpthread-stubs0-dev liblz4-dev libzstd-dev libbz2-dev \\\n      libsodium-dev libfmt-dev\n  ```\n\n[Note: Ubuntu 16.04 and 18.04 ship with llvm-6 and need to be upgraded before building Glow. Building Glow on Ubuntu 16.04 with llvm-7 fails because llvm-7 xenial distribution uses an older c++ ABI, however building Glow on Ubuntu 18.04 with llvm-7 has been tested and is successful]\n\nIt may be desirable to use `update-alternatives` to manage the version of\nclang/clang++:\n\n  ```bash\n  sudo update-alternatives --install /usr/bin/clang clang \\\n      /usr/lib/llvm-8/bin/clang 50\n  sudo update-alternatives --install /usr/bin/clang++ clang++ \\\n      /usr/lib/llvm-8/bin/clang++ 50\n  ```\n\nGlow uses the system default C/C++ compiler (/usr/bin/c++), and so you may also\nwant to switch your default C/C++ compiler to clang:\n\n  ```bash\n  sudo update-alternatives --config cc\n      # Select the option corresponding to /usr/bin/clang ...\n  sudo update-alternatives --config c++\n      # Select the option corresponding to /usr/bin/clang++ ...\n  ```\n\nGlow *should* build just fine with gcc (e.g. gcc 5.4), but we mostly use clang\nand are more attentive to compatibility with clang.\n\nFinally, in order to support the ONNX net serialization format, Glow requires\n`protobuf >= 2.6.1`, but the above command may install older\nversion on older Ubuntu (e.g. 14.04). If this is the case, we suggest to look\nat `utils/install_protobuf.sh` to install a newer version from source.\n\nFor details on installing OpenCL on Ubuntu please see\n[these instructions](docs/Building.md#opencl-on-ubuntu).\n\n### Configure and Build\n\nTo build the compiler, create a build directory and run cmake on the source\ndirectory. It's a good idea to build two configurations (Release and Debug)\nbecause some programs take a really long time to run in Debug mode. It's also a\ngood idea to build the project outside of the source directory.\n\n  ```bash\n  mkdir build_Debug\n  cd build_Debug\n  cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug ../glow\n  ninja all\n  ```\n\nIt's possible to configure and build the compiler with any CMake generator,\nlike GNU Makefiles, Ninja and Xcode build.\n\nFor platform-specific build instructions and advanced options, such as\nbuilding with Address-Sanitizers refer to this guide:\n[Building the Compiler](docs/Building.md).\n\nIf you're running macOS v10.14 (Mojave) and `ninja all` fails because it can't\nfind headers (e.g. `string.h`), run this command to fix it, and try again.\nMore information is available [here](https://developer.apple.com/documentation/xcode_release_notes/xcode_10_release_notes)\nunder \"Command Line Tools\".\n\n  ```bash\n  open /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg\n  ```\n\nFor macOS v10.15 (Catalina) you might need to explicitly specify SDKROOT:\n\n   ```bash\n   export SDKROOT=\"/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk\"\n   ```\n\n\n#### Building with dependencies (LLVM)\n\nBy default, Glow will use a system provided LLVM.  Note that Glow requires LLVM\n7.0 or later. If you have LLVM installed in a non-default location (for\nexample, if you installed it using Homebrew on macOS), you need to tell CMake\nwhere to find llvm using `-DLLVM_DIR`. For example, if LLVM were\ninstalled in `/usr/local/opt`:\n\n  ```bash\n  cmake -G Ninja ../glow \\\n      -DCMAKE_BUILD_TYPE=Debug \\\n      -DLLVM_DIR=/usr/local/opt/llvm/lib/cmake/llvm\n  ```\n\nIf LLVM is not available on your system you'll need to build it manually.  Run\nthe script '`/utils/build_llvm.sh` to clone, build and install LLVM in a local\ndirectory. You will need to configure Glow with the flag `-DLLVM_DIR` to tell\nthe build system where to find LLVM given the local directory you installed it\nin (e.g. `-DLLVM_DIR=/path/to/llvm_install/lib/cmake/llvm` if using\n`build_llvm.sh`).\n\n## Testing and Running\n\n### Unit tests\n\nThe project has a few unit tests in the tests/unittests subdirectory. To run all\nof them, simply run `ninja test`.\n\n### C++ API examples\n\nA few test programs that use Glow's C++ API are found under the `examples/`\nsubdirectory. The `mnist`, `cifar10`, `fr2en` and `ptb` programs train and run digit\nrecognition, image classification and language modeling benchmarks,\nrespectively.\n\nTo run these programs, build Glow in Release mode, then run the following commands\nto download the cifar10, mnist and ptb databases.\n\n  ```bash\n  python ../glow/utils/download_datasets_and_models.py --all-datasets\n  ```\n\nNow run the examples. Note that the databases should be in the current working\ndirectory.\n\n  ```bash\n  ./bin/mnist\n  ./bin/cifar10\n  ./bin/fr2en\n  ./bin/ptb\n  ./bin/char-rnn\n  ```\n\nIf everything goes well you should see:\n  * `mnist`: pictures from the mnist digits database\n  * `cifar10`: image classifications that steadily improve\n  * `fr2en`: an interactive French-to-English translator\n  * `ptb`: decreasing perplexity on the dataset as the network trains\n  * `char-rnn`: generates random text based on some document\n\nNote that the default build mode is `Debug`, which means that the compiler\nitself is easy to debug because the binary contains debug info, lots of\nassertions, and the optimizations are disabled. It also means that the compiler\nand runtime are very slow, and the execution time can be hundreds of times\nslower than that of release builds. If you wish to benchmark the compiler, run\nlong benchmarks, or release the product then you should compile the compiler in\nRelease mode. Check the main CMake file for more details.\n\nMore details on testing and running Glow can be found in:\n[Testing the Glow Compiler](docs/Testing.md).\n\n### Ahead-of-time Compilation\n\nGlow can be used to compile neural networks into object files containing native\ncode.  We provide resnet50 (both quantized and non-quantized versions) as an\nexample of this capability in `examples/bundles/resnet50`.  See [Creating\nStandalone Executable Bundles](docs/AOT.md) for more detail.\n\n## Contributing\n\nTo get started contributing, please refer to the following guides:\n* [Contributing](CONTRIBUTING.md)\n* [Coding Standards](docs/CodingStandards.md)\n* [Code of Conduct](CODE_OF_CONDUCT.md)\n\n### Communication\n\n* Forums: discuss implementations, research, etc: https://discuss.pytorch.org/c/glow.\n  Make sure to label topic with the [\"glow\"](https://discuss.pytorch.org/c/glow) category.\n* GitHub issues: bug reports, feature requests, install issues, RFCs, thoughts, etc.\n\n## License\n\nGlow is licensed under the [Apache 2.0 License](LICENSE).\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "externalbackends",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "inference_engines",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "thirdparty",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "torch_glow",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}