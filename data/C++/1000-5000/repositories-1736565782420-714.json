{
  "metadata": {
    "timestamp": 1736565782420,
    "page": 714,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "xtensor-stack/xsimd",
      "stars": 2278,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.1484375,
          "content": "ï»¿---\nBasedOnStyle: WebKit\nAlignAfterOpenBracket: Align\nAlignConsecutiveDeclarations: 'false'\nBreakBeforeBraces: Allman\nNamespaceIndentation: All\n\n...\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4580078125,
          "content": "# Generated pkg-config files\n*.pc\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\n# Vim tmp files\n*.swp\n\n# Build folder\nbuild/\n\n# Documentation build artefacts\ndocs/CMakeCache.txt\ndocs/xml/\ndocs/build/\n\n# VSCode / clangd IntelliSense\n.vscode/\n.cache/\n\n# CLion / IDEA\n.idea/"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 6.91015625,
          "content": "############################################################################\n# Copyright (c) Johan Mabille, Sylvain Corlay, Wolf Vollprecht and         #\n# Martin Renou                                                             #\n# Copyright (c) QuantStack                                                 #\n# Copyright (c) Serge Guelton                                              #\n#                                                                          #\n# Distributed under the terms of the BSD 3-Clause License.                 #\n#                                                                          #\n# The full license is in the file LICENSE, distributed with this software. #\n############################################################################\n\ncmake_minimum_required(VERSION 3.8)\nproject(xsimd)\noption(XSIMD_REFACTORING ON)\n\nset(XSIMD_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/include)\n\n# Versioning\n# ==========\n\nfile(STRINGS \"${XSIMD_INCLUDE_DIR}/xsimd/config/xsimd_config.hpp\" xsimd_version_defines\n     REGEX \"#define XSIMD_VERSION_(MAJOR|MINOR|PATCH)\")\nforeach(ver ${xsimd_version_defines})\n    if(ver MATCHES \"#define XSIMD_VERSION_(MAJOR|MINOR|PATCH) +([^ ]+)$\")\n        set(XSIMD_VERSION_${CMAKE_MATCH_1} \"${CMAKE_MATCH_2}\" CACHE INTERNAL \"\")\n    endif()\nendforeach()\nset(${PROJECT_NAME}_VERSION\n    ${XSIMD_VERSION_MAJOR}.${XSIMD_VERSION_MINOR}.${XSIMD_VERSION_PATCH})\nmessage(STATUS \"xsimd v${${PROJECT_NAME}_VERSION}\")\n\n# Build\n# =====\n\nset(XSIMD_HEADERS\n${XSIMD_INCLUDE_DIR}/xsimd/arch/xsimd_constants.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/arch/xsimd_fma3_avx.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/arch/xsimd_fma3_avx2.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/arch/xsimd_fma3_sse.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/arch/xsimd_fma4.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/arch/xsimd_generic.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/arch/xsimd_isa.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/arch/xsimd_neon.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/arch/xsimd_neon64.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/arch/xsimd_rvv.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/arch/xsimd_scalar.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/arch/xsimd_sse2.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/arch/xsimd_sse3.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/arch/xsimd_sse4_1.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/arch/xsimd_sse4_2.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/arch/xsimd_ssse3.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/arch/xsimd_sve.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/config/xsimd_arch.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/config/xsimd_config.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/config/xsimd_cpuid.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/memory/xsimd_aligned_allocator.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/memory/xsimd_alignment.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_all_registers.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_api.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_neon_register.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_neon64_register.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_avx2_register.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_avx512f_register.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_avx_register.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_batch.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_batch_constant.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_fma3_avx_register.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_fma3_avx2_register.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_fma3_sse_register.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_fma4_register.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_generic_arch.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_register.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_rvv_register.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_sse2_register.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_sse3_register.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_sse4_1_register.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_sse4_2_register.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_ssse3_register.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_sve_register.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_traits.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/types/xsimd_utils.hpp\n${XSIMD_INCLUDE_DIR}/xsimd/xsimd.hpp\n)\n\nadd_library(xsimd INTERFACE)\n\ntarget_include_directories(xsimd INTERFACE\n    $<BUILD_INTERFACE:${XSIMD_INCLUDE_DIR}>\n    $<INSTALL_INTERFACE:include>)\n\nOPTION(ENABLE_XTL_COMPLEX \"enables support for xcomplex defined in xtl\" OFF)\nOPTION(BUILD_TESTS \"xsimd test suite\" OFF)\n\nif(ENABLE_XTL_COMPLEX)\n    find_package(xtl 0.7.0 REQUIRED)\n    target_compile_features(xsimd INTERFACE cxx_std_14)\n    target_compile_definitions(xsimd INTERFACE XSIMD_ENABLE_XTL_COMPLEX=1)\n    target_link_libraries(xsimd INTERFACE xtl)\nelse()\n    target_compile_features(xsimd INTERFACE cxx_std_11)\nendif()\n\nif(BUILD_TESTS)\n    enable_testing()\n    add_subdirectory(test)\nendif()\n\nOPTION(BUILD_BENCHMARK \"xsimd benchmarks\" OFF)\nif(BUILD_BENCHMARK)\n    add_subdirectory(benchmark)\nendif()\n\nOPTION(BUILD_EXAMPLES \"xsimd examples\" OFF)\nif(BUILD_EXAMPLES)\n    add_subdirectory(examples)\nendif()\n\n# Installation\n# ============\n\nOPTION(XSIMD_SKIP_INSTALL \"Skip installation or not. By default it is OFF\" OFF)\nif(${XSIMD_SKIP_INSTALL})\n    return() # skip installation\nendif ()\n\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\ninclude(JoinPaths)\ninclude(GNUInstallDirs)\ninclude(CMakePackageConfigHelpers)\n\ninstall(TARGETS xsimd\n        EXPORT ${PROJECT_NAME}-targets)\n\n# Makes the project importable from the build directory\nexport(EXPORT ${PROJECT_NAME}-targets\n       FILE \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Targets.cmake\")\n\ninstall(DIRECTORY ${XSIMD_INCLUDE_DIR}/xsimd\n        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n\n# GNUInstallDirs \"DATADIR\" wrong here; CMake search path wants \"share\".\nset(XSIMD_CMAKECONFIG_INSTALL_DIR \"${CMAKE_INSTALL_DATADIR}/cmake/${PROJECT_NAME}\" CACHE STRING \"install path for xsimdConfig.cmake\")\n\nconfigure_package_config_file(${PROJECT_NAME}Config.cmake.in\n                              \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake\"\n                              INSTALL_DESTINATION ${XSIMD_CMAKECONFIG_INSTALL_DIR})\n\n# xsimd is header-only and does not depend on the architecture.\n# Remove CMAKE_SIZEOF_VOID_P from xtensorConfigVersion.cmake so that an xtensorConfig.cmake\n# generated for a 64 bit target can be used for 32 bit targets and vice versa.\nset(_XTENSOR_CMAKE_SIZEOF_VOID_P ${CMAKE_SIZEOF_VOID_P})\nunset(CMAKE_SIZEOF_VOID_P)\nwrite_basic_package_version_file(${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\n                                 VERSION ${${PROJECT_NAME}_VERSION}\n                                 COMPATIBILITY SameMajorVersion)\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake\n              ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\n        DESTINATION ${XSIMD_CMAKECONFIG_INSTALL_DIR})\ninstall(EXPORT ${PROJECT_NAME}-targets\n        FILE ${PROJECT_NAME}Targets.cmake\n        DESTINATION ${XSIMD_CMAKECONFIG_INSTALL_DIR})\n\nconfigure_file(${PROJECT_NAME}.pc.in\n               \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc\"\n                @ONLY)\ninstall(FILES \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc\"\n        DESTINATION \"${CMAKE_INSTALL_DATADIR}/pkgconfig/\")\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.92578125,
          "content": "# Contributing to xsimd\n\nFirst, thanks for being there! Welcome on board, we will try to make your\ncontributing journey as good an experience as it can be.\n\n# Submitting patches\n\nPatches should be submitted through Github PR. We di put some effort to setup a\ndecent Continuous Integration coverage, please try to make it green ;-)\n\nWe use [clang-format](https://clang.llvm.org/docs/ClangFormat.html) to keep\nthe coding style consistent, a ``.clang-format`` file is shipped within the\nsource, feel free to use it!\n\n# Extending the API\n\nWe are open to extending the API, as long as it has been discussed either in an\nIssue or a PR. The only constraint is to add testing for new functions, and make\nsure they work on all supported architectures, not only your favorite one!\n\n# Licensing\n\nWe use a shared copyright model that enables all contributors to maintain the\ncopyright on their contributions. Stated otherwise, there's no copyright\nassignment.\n"
        },
        {
          "name": "Changelog.rst",
          "type": "blob",
          "size": 7.783203125,
          "content": ".. Copyright (c) Serge Guelton and Johan Mabille\n   Copyright (c) QuantStack\n\n   Distributed under the terms of the BSD 3-Clause License.\n\n   The full license is in the file LICENSE, distributed with this software.\n\n\nChangelog\n=========\n\n13.1.0\n------\n\n    * Fix rotate_left and rotate_right behavior (it was swapped!)\n\n    * Fix compress implementation on RISC-V\n\n    * Improve RISC-V CI\n\n    * Fix clang-17 compilation on RISC-V\n\n    * Validate cmake integration\n\n    * Provide xsimd::transpose on 64 and 32 bits on most platforms\n\n    * Improve documentation\n\n    * Provide xsimd::batch_bool::count\n\n    * Fix interaction between xsimd::make_sized_batch_t and\n      xsimd::batch<std::complex, ...>\n\n    * Fix vbmi, sve and rvv detection through xsimd::available_architectures\n\n    * Fix compilation on MS targets where ``small`` can be defined.\n\n    * Change default install directory for installed headers.\n\n    * Support mixed-complex implementations of xsimd::pow()\n\n    * Improve xsimd::pow implementation for complex numbers\n\n    * Fix uninitialized read in lgamma implementation\n\n13.0.0\n------\n\n    * Most xsimd functions are flagged as always_inline\n\n    * Fix some xsimd scalar version (abs, bitofsign, signbit, bitwise_cast, exp10)\n\n    * Move from batch_constant<batch<T, A>, Csts...> to batch_constant<T, A, Csts...>\n\n    * Move from batch_bool_constant<batch<T, A>, Csts...> to batch_bool_constant<T, A, Csts...>\n\n    * Provide an as_batch() method (resp. as_batch_bool) method for batch_constant (resp. batch_bool_constant)\n\n    * New architecture emulated<N> for batches of N bits emulated using scalar operations.\n\n    * Remove the version method from all architectures\n\n    * Support xsimd::avg and xsimd::avgr vector operation\n\n    * Model i8mm arm extension\n\n    * Fix dispatching mechanism\n\n12.1.1\n------\n\n    * Update readme with a section on adoption, and a section on the history of the project \n\n    * Fix/avx512vnni implementation\n\n    * Fix regression on XSIMD_NO_SUPPORTED_ARCHITECTURE\n\n12.1.0\n------\n\n    * Fix various problems with architecture version handling\n\n    * Specialize xsimd::compress for riscv\n\n    * Provide stubs for various avx512xx architectures\n\n12.0.0\n------\n\n    * Fix sincos implementation to cope with Emscripten\n    \n    * Upgraded minimal version of cmake to remove deprecation warning\n\n    * Fixed constants::signmask for GCC when using ffast-math\n\n    * Add RISC-V Vector support\n\n    * Generic, simple implementation fox xsimd::compress\n\n    * Disable batch of bools, and suggest using batch_bool instead\n\n    * Add an option to skip installation\n\n11.2.0\n------\n\n    * Provide shuffle operations of floating point batches\n\n    * Provide a generic implementation of xsimd::swizzle with dynamic indices\n\n    * Implement rotl, rotr, rotate_left and rotate_right\n\n    * Let CMake figure out pkgconfig directories \n\n    * Add missing boolean operators in xsimd_api.hpp\n\n    * Initial Implementation for the new WASM based instruction set\n\n    * Provide a generic version for float to uint32_t conversion \n\n11.1.0\n------\n\n    * Introduce XSIMD_DEFAULT_ARCH to force default architecture (if any)\n\n    * Remove C++ requirement on xsimd::exp10 scalar implementation\n\n    * Improve and test documentation\n\n11.0.0\n------\n\n    * Provide a generic reducer\n\n    * Fix ``find_package(xsimd)`` for xtl enabled xsimd, reloaded\n\n    * Cleanup benchmark code\n\n    * Provide avx512f implementation of FMA and variant\n\n    * Hexadecimal floating points are not a C++11 feature\n\n    * back to slow implementation of exp10 on Windows\n\n    * Changed bitwise_cast API\n\n    * Provide generic signed /unsigned type conversion\n\n    * Fixed sde location\n\n    * Feature/incr decr\n\n    * Cleanup documentation\n\n10.0.0\n------\n\n    * Fix potential ABI issue in SVE support\n\n    * Disable fast exp10 on OSX\n\n    * Assert on unaligned memory when calling aligned load/store\n\n    * Fix warning about uninitialized storage\n\n    * Always forward arch parameter\n\n    * Do not specialize the behavior of ``simd_return_type`` for char\n\n    * Support broadcasting of complex batches\n\n    * Make xsimd compatible with -fno-exceptions\n\n    * Provide and test comparison operators overloads that accept scalars\n\n9.0.1\n-----\n\n    * Fix potential ABI issue in SVE support, making ``xsimd::sve`` a type alias to\n      size-dependent type.\n\n9.0.0\n-----\n\n    * Support fixed size SVE\n\n    * Fix a bug in SSSE3 ``xsimd::swizzle`` implementation for ``int8`` and ``int16``\n\n    * Rename ``xsimd::hadd`` into ``xsimd::reduce_add``, provide ``xsimd::reduce_min`` and ``xsimd::reduce_max``\n\n    * Properly report unsupported double for neon on arm32\n\n    * Fill holes in xsimd scalar api\n\n    * Fix ``find_package(xsimd)`` for xtl enabled xsimd\n\n    * Replace ``xsimd::bool_cast`` by ``xsimd::batch_bool_cast``\n\n    * Native ``xsimd::hadd`` for float on arm64\n\n    * Properly static_assert when trying to instantiate an ``xsimd::batch`` of xtl complex\n\n    * Introduce ``xsimd::batch_bool::mask()`` and ``batch_bool::from_mask(...)``\n\n    * Flag some function with ``[[nodiscard]]``\n\n    * Accept both relative and absolute libdir and include dir in xsimd.pc\n\n    * Implement ``xsimd::nearbyint_as_int`` for NEON\n\n    * Add ``xsimd::polar``\n\n    * Speedup double -> F32/I32 gathers\n\n    * Add ``xsimd::slide_left`` and ``xsimd::slide_right``\n\n    * Support integral ``xsimd::swizzles`` on AVX\n\n8.1.0\n-----\n\n    * Add ``xsimd::gather`` and ``xsimd::scatter``\n\n    * Add ``xsimd::nearbyint_as_int``\n\n    * Add ``xsimd::none``\n\n    * Add ``xsimd::reciprocal``\n\n    * Remove batch constructor from memory adress, use ``xsimd::batch<...>::load_(un)aligned`` instead\n\n    * Leave to msvc users the opportunity to manually disable FMA3 on AVX\n\n    * Provide ``xsimd::insert`` to modify a single value from a vector\n\n    * Make ``xsimd::pow`` implementation resilient to ``FE_INVALID``\n\n    * Reciprocal square root support through ``xsimd::rsqrt``\n\n    * NEON: Improve ``xsimd::any`` and ``xsimd::all``\n\n    * Provide type utility to explicitly require a batch of given size and type\n\n    * Implement ``xsimd::swizzle`` on x86, neon and neon64\n\n    * Avx support for ``xsimd::zip_lo`` and ``xsimd::zip_hi``\n\n    * Only use ``_mm256_unpacklo_epi<N>`` on AVX2\n\n    * Provide neon/neon64 conversion function from ``uint(32|64)_t`` to ``(float|double)``\n\n    * Provide SSE/AVX/AVX2 conversion function from ``uint32_t`` to ``float``\n\n    * Provide AVX2 conversion function from ``(u)int64_t`` to ``double``\n\n    * Provide better SSE conversion function from ``uint64_t`` to ``double``\n\n    * Provide better SSE conversion function to ``double``\n\n    * Support logical xor for ``xsimd::batch_bool``\n\n    * Clarify fma support:\n\n        - FMA3 + SSE -> ``xsimd::fma3<sse4_2>``\n        - FMA3 + AVX -> ``xsimd::fma3<avx>``\n        - FMA3 + AVX2 -> ``xsimd::fma3<avx2>``\n        - FMA4 -> ``xsimd::fma4``\n\n    * Allow ``xsimd::transform`` to work with complex types\n\n    * Add missing scalar version of ``xsimd::norm`` and ``xsimd::conj``\n\n8.0.5\n-----\n\n    * Fix neon ``xsimd::hadd`` implementation\n\n    * Detect unsupported architectures and set ``XSIMD_NO_SUPPORTED_ARCHITECTURE``\n      if needs be\n\n8.0.4\n-----\n\n    * Provide some conversion operators for ``float`` -> ``uint32``\n\n    * Improve code generated for AVX2 signed integer comparisons\n\n    * Enable detection of avx512cd and avx512dq, and fix avx512bw detection\n\n    * Enable detection of AVX2+FMA\n\n    * Pick the best compatible architecture in ``xsimd::dispatch``\n\n    * Enables support for FMA when AVX2 is detected on Windows\n\n    * Add missing includes / forward declaration\n\n    * Mark all functions inline and noexcept\n\n    * Assert when using incomplete ``std::initializer_list``\n\n8.0.3\n-----\n\n    * Improve CI & testing, no functional change\n\n8.0.2\n-----\n\n    * Do not use ``_mm256_srai_epi32`` under AVX, it's an AVX2 instruction\n\n8.0.1\n-----\n\n    * Fix invalid constexpr ``std::make_tuple`` usage in neon64\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.568359375,
          "content": "Copyright (c) 2016, Johan Mabille, Sylvain Corlay, Wolf Vollprecht and Martin Renou\nCopyright (c) 2016, QuantStack\nCopyright (c) 2018, Serge Guelton\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.4638671875,
          "content": "# ![xsimd](docs/source/xsimd.svg)\n\n[![GHA android](https://github.com/xtensor-stack/xsimd/actions/workflows/android.yml/badge.svg)](https://github.com/xtensor-stack/xsimd/actions/workflows/android.yml)\n[![GHA cross-rvv](https://github.com/xtensor-stack/xsimd/actions/workflows/cross-rvv.yml/badge.svg)](https://github.com/xtensor-stack/xsimd/actions/workflows/cross-rvv.yml)\n[![GHA cross-sve](https://github.com/xtensor-stack/xsimd/actions/workflows/cross-sve.yml/badge.svg)](https://github.com/xtensor-stack/xsimd/actions/workflows/cross-sve.yml)\n[![GHA cross](https://github.com/xtensor-stack/xsimd/actions/workflows/cross.yml/badge.svg)](https://github.com/xtensor-stack/xsimd/actions/workflows/cross.yml)\n[![GHA cxx-no-exceptions](https://github.com/xtensor-stack/xsimd/actions/workflows/cxx-no-exceptions.yml/badge.svg)](https://github.com/xtensor-stack/xsimd/actions/workflows/cxx-no-exceptions.yml)\n[![GHA cxx-versions](https://github.com/xtensor-stack/xsimd/actions/workflows/cxx-versions.yml/badge.svg)](https://github.com/xtensor-stack/xsimd/actions/workflows/cxx-versions.yml)\n[![GHA emscripten](https://github.com/xtensor-stack/xsimd/actions/workflows/emscripten.yml/badge.svg)](https://github.com/xtensor-stack/xsimd/actions/workflows/emscripten.yml)\n[![GHA linux](https://github.com/xtensor-stack/xsimd/actions/workflows/linux.yml/badge.svg)](https://github.com/xtensor-stack/xsimd/actions/workflows/linux.yml)\n[![GHA macos](https://github.com/xtensor-stack/xsimd/actions/workflows/macos.yml/badge.svg)](https://github.com/xtensor-stack/xsimd/actions/workflows/macos.yml)\n[![GHA windows](https://github.com/xtensor-stack/xsimd/actions/workflows/windows.yml/badge.svg)](https://github.com/xtensor-stack/xsimd/actions/workflows/windows.yml)\n[![Documentation Status](http://readthedocs.org/projects/xsimd/badge/?version=latest)](https://xsimd.readthedocs.io/en/latest/?badge=latest)\n[![Join the Gitter Chat](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/QuantStack/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nC++ wrappers for SIMD intrinsics\n\n## Introduction\n\nSIMD (Single Instruction, Multiple Data) is a feature of microprocessors that has been available for many years. SIMD instructions perform a single operation\non a batch of values at once, and thus provide a way to significantly accelerate code execution. However, these instructions differ between microprocessor\nvendors and compilers.\n\n`xsimd` provides a unified means for using these features for library authors. Namely, it enables manipulation of batches of numbers with the same arithmetic operators as for single values. It also provides accelerated implementation of common mathematical functions operating on batches.\n\n## Adoption\n\nBeyond Xtensor, Xsimd has been adopted by major open-source projects, such as Mozilla Firefox, Apache Arrow, Pythran, and Krita.\n\n## History\n\nThe XSimd project started with a series of blog articles by Johan Mabille on how to implement wrappers for SIMD intrinsicts.\nThe archives of the blog can be found here: [The C++ Scientist](http://johanmabille.github.io/blog/archives/). The design described in\nthe articles remained close to the actual architecture of XSimd up until Version 8.0.\n\nThe mathematical functions are a lightweight implementation of the algorithms originally implemented in the now deprecated [boost.SIMD](https://github.com/NumScale/boost.simd) project.\n\n## Requirements\n\n`xsimd` requires a C++11 compliant compiler. The following C++ compilers are supported:\n\nCompiler                | Version\n------------------------|-------------------------------\nMicrosoft Visual Studio | MSVC 2015 update 2 and above\ng++                     | 4.9 and above\nclang                   | 4.0 and above\n\nThe following SIMD instruction set extensions are supported:\n\nArchitecture | Instruction set extensions\n-------------|-----------------------------------------------------\nx86          | SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, FMA3+SSE, FMA3+AVX, FMA3+AVX2\nx86          | AVX512BW, AVX512CD, AVX512DQ, AVX512F (gcc7 and higher)\nx86 AMD      | FMA4\nARM          | NEON, NEON64, SVE128/256/512 (fixed vector size)\nWebAssembly  | WASM\nRISC-V       | RISC-V128/256/512 (fixed vector size)\n\n## Installation\n\n### Install from conda-forge\n\nA package for xsimd is available on the mamba (or conda) package manager.\n\n```bash\nmamba install -c conda-forge xsimd\n```\n\n### Install with Spack\n\nA package for xsimd is available on the Spack package manager.\n\n```bash\nspack install xsimd\nspack load xsimd\n```\n\n### Install from sources\n\nYou can directly install it from the sources with cmake:\n\n```bash\ncmake -D CMAKE_INSTALL_PREFIX=your_install_prefix .\nmake install\n```\n\n## Documentation\n\nTo get started with using `xsimd`, check out the full documentation\n\nhttp://xsimd.readthedocs.io/\n\n## Dependencies\n\n`xsimd` has an optional dependency on the [xtl](https://github.com/xtensor-stack/xtl) library:\n\n| `xsimd` | `xtl` (optional) |\n|---------|------------------|\n|  master |     ^0.7.0       |\n|  12.x   |     ^0.7.0       |\n|  11.x   |     ^0.7.0       |\n|  10.x   |     ^0.7.0       |\n|   9.x   |     ^0.7.0       |\n|   8.x   |     ^0.7.0       |\n\nThe dependency on `xtl` is required if you want to support vectorization for `xtl::xcomplex`. In this case, you must build your project with C++14 support enabled.\n\n## Usage\n\nThe version 8 of the library is a complete rewrite and there are some slight differences with 7.x versions.\nA migration guide will be available soon. In the meanwhile, the following examples show how to use both versions\n7 and 8 of the library?\n\n### Explicit use of an instruction set extension\n\nHere is an example that computes the mean of two sets of 4 double floating point values, assuming AVX extension is supported:\n```cpp\n#include <iostream>\n#include \"xsimd/xsimd.hpp\"\n\nnamespace xs = xsimd;\n\nint main(int argc, char* argv[])\n{\n    xs::batch<double, xs::avx2> a = {1.5, 2.5, 3.5, 4.5};\n    xs::batch<double, xs::avx2> b = {2.5, 3.5, 4.5, 5.5};\n    auto mean = (a + b) / 2;\n    std::cout << mean << std::endl;\n    return 0;\n}\n```\n\nDo not forget to enable AVX extension when building the example. With gcc or clang, this is done with the `-mavx` flag,\non MSVC you have to pass the `/arch:AVX` option.\n\nThis example outputs:\n\n```cpp\n(2.0, 3.0, 4.0, 5.0)\n```\n\n### Auto detection of the instruction set extension to be used\n\nThe same computation operating on vectors and using the most performant instruction set available:\n\n```cpp\n#include <cstddef>\n#include <vector>\n#include \"xsimd/xsimd.hpp\"\n\nnamespace xs = xsimd;\nusing vector_type = std::vector<double, xsimd::aligned_allocator<double>>;\n\nvoid mean(const vector_type& a, const vector_type& b, vector_type& res)\n{\n    std::size_t size = a.size();\n    constexpr std::size_t simd_size = xsimd::simd_type<double>::size;\n    std::size_t vec_size = size - size % simd_size;\n\n    for(std::size_t i = 0; i < vec_size; i += simd_size)\n    {\n        auto ba = xs::load_aligned(&a[i]);\n        auto bb = xs::load_aligned(&b[i]);\n        auto bres = (ba + bb) / 2.;\n        bres.store_aligned(&res[i]);\n    }\n    for(std::size_t i = vec_size; i < size; ++i)\n    {\n        res[i] = (a[i] + b[i]) / 2.;\n    }\n}\n```\n\n## Building and Running the Tests\n\nBuilding the tests requires [cmake](https://cmake.org).\n\n`cmake` is available as a package for most linux distributions. Besides, they can also be installed with the `conda` package manager (even on windows):\n\n```bash\nconda install -c conda-forge cmake\n```\n\nOnce `cmake` is installed, you can build and run the tests:\n\n```bash\nmkdir build\ncd build\ncmake ../ -DBUILD_TESTS=ON\nmake xtest\n```\n\nIn the context of continuous integration with Travis CI, tests are run in a `conda` environment, which can be activated with\n\n```bash\ncd test\nconda env create -f ./test-environment.yml\nsource activate test-xsimd\ncd ..\ncmake . -DBUILD_TESTS=ON\nmake xtest\n```\n\n## Building the HTML Documentation\n\nxsimd's documentation is built with three tools\n\n - [doxygen](http://www.doxygen.org)\n - [sphinx](http://www.sphinx-doc.org)\n - [breathe](https://breathe.readthedocs.io)\n\nWhile doxygen must be installed separately, you can install breathe by typing\n\n```bash\npip install breathe\n```\n\nBreathe can also be installed with `conda`\n\n```bash\nconda install -c conda-forge breathe\n```\n\nFinally, build the documentation with\n\n```bash\nmake html\n```\n\nfrom the `docs` subdirectory.\n\n## License\n\nWe use a shared copyright model that enables all contributors to maintain the\ncopyright on their contributions.\n\nThis software is licensed under the BSD-3-Clause license. See the [LICENSE](LICENSE) file for details.\n"
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "environment.yml",
          "type": "blob",
          "size": 0.078125,
          "content": "name: xsimd\nchannels:\n- conda-forge\ndependencies:\n  - ninja\n  - xtl\n  - doctest\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "install_sde.sh",
          "type": "blob",
          "size": 0.65625,
          "content": "#git clone https://github.com/marehr/intel-sde-downloader\n#cd intel-sde-downloader\n#pip install -r requirements.txt\n#python ./intel-sde-downloader.py sde-external-8.35.0-2019-03-11-lin.tar.bz2\n#wget http://software.intel.com/content/dam/develop/external/us/en/protected/sde-external-8.50.0-2020-03-26-lin.tar.bz2\n\nwget --user-agent=\"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.61 Safari/537.36\" https://github.com/xtensor-stack/xsimd-testing-resources/releases/download/1.0.0/sde-external-8.69.1-2021-07-18-lin.tar.bz2\n\ntar xvf sde-external-8.69.1-2021-07-18-lin.tar.bz2\nsudo sh -c \"echo 0 > /proc/sys/kernel/yama/ptrace_scope\"\n"
        },
        {
          "name": "readthedocs.yml",
          "type": "blob",
          "size": 0.1201171875,
          "content": "version: 2\n\nbuild:\n  os: \"ubuntu-22.04\"\n  tools:\n    python: \"mambaforge-22.9\"\n\nconda:\n  environment: docs/environment.yml\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "xsimd.pc.in",
          "type": "blob",
          "size": 0.25390625,
          "content": "prefix=@CMAKE_INSTALL_PREFIX@\nlibdir=@CMAKE_INSTALL_FULL_LIBDIR@\nincludedir=@CMAKE_INSTALL_FULL_INCLUDEDIR@\n\nName: xsimd\nDescription: xsimd provides a unified means for using SIMD features for library authors..\nVersion: @xsimd_VERSION@\nCflags: -I${includedir}\n"
        },
        {
          "name": "xsimdConfig.cmake.in",
          "type": "blob",
          "size": 1.3095703125,
          "content": "############################################################################\n# Copyright (c) Johan Mabille, Sylvain Corlay, Wolf Vollprecht and         #\n# Martin Renou                                                             #\n# Copyright (c) QuantStack                                                 #\n#                                                                          #\n# Distributed under the terms of the BSD 3-Clause License.                 #\n#                                                                          #\n# The full license is in the file LICENSE, distributed with this software. #\n############################################################################\n\n# xsimd cmake module\n# This module sets the following variables in your project::\n#\n#   xsimd_FOUND - true if xsimd found on the system\n#   xsimd_INCLUDE_DIRS - the directory containing xsimd headers\n#   xsimd_LIBRARY - empty\n\n@PACKAGE_INIT@\n\nif(NOT TARGET @PROJECT_NAME@)\n    set(@PROJECT_NAME@_ENABLE_XTL_COMPLEX @ENABLE_XTL_COMPLEX@)\n    if(@PROJECT_NAME@_ENABLE_XTL_COMPLEX)\n        include(CMakeFindDependencyMacro)\n        find_dependency(xtl REQUIRED)\n    endif()\n\n    include(\"${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@Targets.cmake\")\n    get_target_property(@PROJECT_NAME@_INCLUDE_DIRS @PROJECT_NAME@ INTERFACE_INCLUDE_DIRECTORIES)\nendif()\n"
        }
      ]
    }
  ]
}