{
  "metadata": {
    "timestamp": 1736565483396,
    "page": 342,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "microsoft/DirectXShaderCompiler",
      "stars": 3155,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.01953125,
          "content": "BasedOnStyle: LLVM\n\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 0.044921875,
          "content": "Checks: '-*,clang-diagnostic-*,llvm-*,misc-*'\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.091796875,
          "content": "*       text=auto\n*.cmd text eol=crlf\n*.bat text eol=crlf\n*.sh text eol=lf\n*.guess text eol=lf"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.3134765625,
          "content": "#==============================================================================#\n# This file specifies intentionally untracked files that git should ignore.\n# See: http://www.kernel.org/pub/software/scm/git/docs/gitignore.html\n#\n# This file is intentionally different from the output of `git svn show-ignore`,\n# as most of those are useless.\n#==============================================================================#\n\n#==============================================================================#\n# File extensions to be ignored anywhere in the tree.\n#==============================================================================#\n# Temp files created by most text editors.\n*~\n# Merge files created by git.\n*.orig\n# Byte compiled python modules.\n*.pyc\n# vim swap files\n.*.sw?\n.sw?\n#OS X specific files.\n.DS_store\n# Dump files from test crashes.\n*.dmp\n# Visual Studio Code directory.\n.vscode\n# Visual Studio\n.vs/\n# Test outputs\n*.ll.converted\n*.dxo.converted\n\n#==============================================================================#\n# Explicit files to ignore (only matches one).\n#==============================================================================#\n# Various tag programs\n/tags\n/TAGS\n/GPATH\n/GRTAGS\n/GSYMS\n/GTAGS\n.gitusers\nautom4te.cache\ncscope.files\ncscope.out\nautoconf/aclocal.m4\nautoconf/autom4te.cache\n/compile_commands.json\n\n#==============================================================================#\n# Directories to ignore (do not add trailing '/'s, they skip symlinks).\n#==============================================================================#\n# Build directories\n/build*/\n# External projects that are tracked independently.\nexternal/*\n# Clang, which is tracked independently.\n# HLSL Change - track clang together with llvm in this git repo\n# tools/clang\n# LLDB, which is tracked independently.\ntools/lldb\n# lld, which is tracked independently.\ntools/lld\n# llgo, which is tracked independently.\ntools/llgo\n# Polly, which is tracked independently.\ntools/polly\n# Sphinx build tree, if building in-source dir.\ndocs/_build\n# TAEF crash logs.\nWexLogFileOutput/*\n\n#==============================================================================#\n# Files created in tree by the Go bindings.\n#==============================================================================#\nbindings/go/llvm/llvm_config.go\nbindings/go/llvm/workdir\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.458984375,
          "content": "[submodule \"external/SPIRV-Headers\"]\n\tpath = external/SPIRV-Headers\n\turl = https://github.com/KhronosGroup/SPIRV-Headers\n[submodule \"external/SPIRV-Tools\"]\n\tpath = external/SPIRV-Tools\n\turl = https://github.com/KhronosGroup/SPIRV-Tools\n[submodule \"external/googletest\"]\n\tpath = external/googletest\n\turl = https://github.com/google/googletest\n[submodule \"external/DirectX-Headers\"]\n\tpath = external/DirectX-Headers\n\turl = https://github.com/microsoft/DirectX-Headers.git\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 30.3447265625,
          "content": "# See docs/CMake.html for instructions about how to build LLVM with CMake.\ncmake_minimum_required(VERSION 3.17.2) # HLSL Change - Require CMake 3.17.2.\n\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\nif (NOT \"${DXC_CMAKE_BEGINS_INCLUDE}\" STREQUAL \"\")\n  include(${DXC_CMAKE_BEGINS_INCLUDE})\nendif()\n\nif (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  message(STATUS \"No build type selected, default to Debug\")\n  set(CMAKE_BUILD_TYPE \"Debug\")\nendif()\n\nif(POLICY CMP0022)\n  cmake_policy(SET CMP0022 NEW) # automatic when 2.8.12 is required\nendif()\n\nif (POLICY CMP0051)\n  # CMake 3.1 and higher include generator expressions of the form\n  # $<TARGETLIB:obj> in the SOURCES property.  These need to be\n  # stripped everywhere that access the SOURCES property, so we just\n  # defer to the OLD behavior of not including generator expressions\n  # in the output for now.\n  cmake_policy(SET CMP0051 OLD)\nendif()\n\nif(CMAKE_VERSION VERSION_LESS 3.1.20141117)\n  set(cmake_3_2_USES_TERMINAL)\nelse()\n  set(cmake_3_2_USES_TERMINAL USES_TERMINAL)\nendif()\n\nproject(LLVM)\n\n# The following only works with the Ninja generator in CMake >= 3.0.\nset(LLVM_PARALLEL_COMPILE_JOBS \"\" CACHE STRING\n  \"Define the maximum number of concurrent compilation jobs.\")\nif(LLVM_PARALLEL_COMPILE_JOBS)\n  if(CMAKE_VERSION VERSION_LESS 3.0 OR NOT CMAKE_MAKE_PROGRAM MATCHES \"ninja$\")\n    message(WARNING \"Job pooling is only available with Ninja generators and CMake 3.0 and later.\")\n  else()\n    set_property(GLOBAL APPEND PROPERTY JOB_POOLS compile_job_pool=${LLVM_PARALLEL_COMPILE_JOBS})\n    set(CMAKE_JOB_POOL_COMPILE compile_job_pool)\n  endif()\nendif()\n\nset(LLVM_PARALLEL_LINK_JOBS \"\" CACHE STRING\n  \"Define the maximum number of concurrent link jobs.\")\nif(LLVM_PARALLEL_LINK_JOBS)\n  if(CMAKE_VERSION VERSION_LESS 3.0 OR NOT CMAKE_MAKE_PROGRAM MATCHES \"ninja$\")\n    message(WARNING \"Job pooling is only available with Ninja generators and CMake 3.0 and later.\")\n  else()\n    set_property(GLOBAL APPEND PROPERTY JOB_POOLS link_job_pool=${LLVM_PARALLEL_LINK_JOBS})\n    set(CMAKE_JOB_POOL_LINK link_job_pool)\n  endif()\nendif()\n\n# Add path for custom modules\nset(CMAKE_MODULE_PATH\n  ${CMAKE_MODULE_PATH}\n  \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules\"\n  )\n\nset(LLVM_VERSION_MAJOR 3)\nset(LLVM_VERSION_MINOR 7)\nset(LLVM_VERSION_PATCH 0)\nset(LLVM_VERSION_SUFFIX \"\")\n\nif (NOT PACKAGE_VERSION)\n  set(PACKAGE_VERSION\n    \"${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}${LLVM_VERSION_SUFFIX}\")\nendif()\n\noption(LLVM_INSTALL_UTILS \"Include utility binaries in the 'install' target.\" OFF)\n\noption(LLVM_INSTALL_TOOLCHAIN_ONLY \"Only include toolchain files in the 'install' target.\" OFF)\n\noption(LLVM_USE_FOLDERS \"Enable solution folders in Visual Studio. Disable for Express versions.\" ON)\nif ( LLVM_USE_FOLDERS )\n  set_property(GLOBAL PROPERTY USE_FOLDERS ON)\nendif()\n\noption(HLSL_EMBED_VERSION \"If set, embeds version information in the binaries.\" ON) # HLSL Change\n# HLSL Change - Directory with version.inc file used for the build (generated or copied from HLSL_FIXED_VERSION_LOCATION)\nset(HLSL_VERSION_LOCATION ${CMAKE_CURRENT_BINARY_DIR}/utils/version)\noption(HLSL_OFFICIAL_BUILD \"If set, embeds official version in the binaries (based on the latest release version)\" OFF) # HLSL Change\noption(HLSL_ENABLE_FIXED_VER \"Reads version information from a file.\" OFF) # HLSL Change\n\noption(HLSL_ENABLE_ANALYZE \"Enables compiler analysis during compilation.\" OFF) # HLSL Change\noption(HLSL_OPTIONAL_PROJS_IN_DEFAULT \"Include optional projects in default build target.\" OFF) # HLSL Change\noption(HLSL_BUILD_DXILCONV \"Include DXBC to DXIL converter and tools.\" ON) # HLSL Change\n\noption(HLSL_ENABLE_DEBUG_ITERATORS \"Disable debug iterators for faster debug and to remove some additional allocations with improper noexcept attribution\" OFF) # HLSL Change\n\n# HLSL Change Starts - support commit querying\noption(HLSL_SUPPORT_QUERY_GIT_COMMIT_INFO \"Supports querying Git commit info.\" ON)\nif ( HLSL_SUPPORT_QUERY_GIT_COMMIT_INFO )\n  add_definitions(-DSUPPORT_QUERY_GIT_COMMIT_INFO)\nendif()\n\noption(DXC_DISABLE_ALLOCATOR_OVERRIDES \"Disable usage of allocator overrides\" OFF)\nmark_as_advanced(DXC_DISABLE_ALLOCATOR_OVERRIDES)\n\noption(DXC_CODEGEN_EXCEPTIONS_TRAP \"An exception in code generation generates a trap, ending the compiler process\" OFF)\nmark_as_advanced(DXC_CODEGEN_EXCEPTIONS_TRAP)\n\n# adjust link option to enable debugging from kernel mode; not compatible with incremental linking\nif(NOT CMAKE_VERSION VERSION_LESS \"3.13\" AND MSVC AND NOT CMAKE_C_COMPILER_ARCHITECTURE_ID STREQUAL \"ARM64EC\")\n  add_link_options(/DEBUGTYPE:CV,FIXUP,PDATA /INCREMENTAL:NO)\nendif()\n\n# enable control flow guard\nif(WIN32)\n  if(MSVC)\n    add_compile_options(/guard:cf)\n    add_link_options(/guard:cf)\n  else()\n    add_compile_options(-fcf-protection)\n  endif()\nendif(WIN32)\n\n# Enable CET Shadow Stack\nif(MSVC AND NOT (CMAKE_C_COMPILER_ARCHITECTURE_ID MATCHES \"ARM.*\"))\n  add_link_options(/CETCOMPAT)\nendif()\n\n# HLSL Change Ends\n\n# HLSL Change Starts - set flag for Appveyor CI\nif ( \"$ENV{CI}\" AND \"$ENV{APPVEYOR}\" )\n  add_definitions(-DDXC_ON_APPVEYOR_CI)\nendif()\n# HLSL Change Ends\n\n# SPIRV change starts\noption(ENABLE_SPIRV_CODEGEN \"Enables SPIR-V code generation.\" OFF)\noption(SPIRV_BUILD_TESTS \"Build targets for the SPIR-V unit tests.\" OFF)\n\n# Enable SPIR-V CodeGen for Linux by default.\nif(NOT WIN32)\n  set(ENABLE_SPIRV_CODEGEN ON)\nendif()\n\nif (${SPIRV_BUILD_TESTS})\n  enable_testing()\n  set(ENABLE_SPIRV_CODEGEN ON)\nendif()\nif (${ENABLE_SPIRV_CODEGEN})\n  add_definitions(-DENABLE_SPIRV_CODEGEN)\nendif()\n# SPIRV change ends\n\ninclude(VersionFromVCS)\n\noption(LLVM_APPEND_VC_REV\n  \"Append the version control system revision id to LLVM version\" OFF)\n\nif( LLVM_APPEND_VC_REV )\n  add_version_info_from_vcs(PACKAGE_VERSION)\nendif()\n\nset(PACKAGE_NAME LLVM)\nset(PACKAGE_STRING \"${PACKAGE_NAME} ${PACKAGE_VERSION}\")\nset(PACKAGE_BUGREPORT \"http://llvm.org/bugs/\")\n\nset(BUG_REPORT_URL \"${PACKAGE_BUGREPORT}\" CACHE STRING\n  \"Default URL where bug reports are to be submitted.\")\n\n# Configure CPack.\nif(0) # HLSL Change - disable CPack\nset(CPACK_PACKAGE_INSTALL_DIRECTORY \"LLVM\")\nset(CPACK_PACKAGE_VENDOR \"LLVM\")\nset(CPACK_PACKAGE_VERSION_MAJOR ${LLVM_VERSION_MAJOR})\nset(CPACK_PACKAGE_VERSION_MINOR ${LLVM_VERSION_MINOR})\nset(CPACK_PACKAGE_VERSION_PATCH ${LLVM_VERSION_PATCH})\nset(CPACK_PACKAGE_VERSION ${PACKAGE_VERSION})\nset(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_CURRENT_SOURCE_DIR}/LICENSE.TXT\")\nset(CPACK_NSIS_COMPRESSOR \"/SOLID lzma \\r\\n SetCompressorDictSize 32\")\nif(WIN32 AND NOT UNIX)\n  set(CPACK_PACKAGE_INSTALL_REGISTRY_KEY \"LLVM\")\n  set(CPACK_PACKAGE_ICON \"${CMAKE_CURRENT_SOURCE_DIR}\\\\\\\\cmake\\\\\\\\nsis_logo.bmp\")\n  set(CPACK_NSIS_MUI_ICON \"${CMAKE_CURRENT_SOURCE_DIR}\\\\\\\\cmake\\\\\\\\nsis_icon.ico\")\n  set(CPACK_NSIS_MUI_UNIICON \"${CMAKE_CURRENT_SOURCE_DIR}\\\\\\\\cmake\\\\\\\\nsis_icon.ico\")\n  set(CPACK_NSIS_MODIFY_PATH \"ON\")\n  set(CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL \"ON\")\n  set(CPACK_NSIS_EXTRA_INSTALL_COMMANDS\n    \"ExecWait '$INSTDIR/tools/msbuild/install.bat'\")\n  set(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS\n    \"ExecWait '$INSTDIR/tools/msbuild/uninstall.bat'\")\n  if( CMAKE_CL_64 )\n    set(CPACK_NSIS_INSTALL_ROOT \"$PROGRAMFILES64\")\n  endif()\nendif()\ninclude(CPack)\nendif(0) # HLSL Change - disable CPack\n\n# Sanity check our source directory to make sure that we are not trying to\n# generate an in-tree build (unless on MSVC_IDE, where it is ok), and to make\n# sure that we don't have any stray generated files lying around in the tree\n# (which would end up getting picked up by header search, instead of the correct\n# versions).\nif( CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR AND NOT MSVC_IDE )\n  message(FATAL_ERROR \"In-source builds are not allowed.\nCMake would overwrite the makefiles distributed with LLVM.\nPlease create a directory and run cmake from there, passing the path\nto this source directory as the last argument.\nThis process created the file `CMakeCache.txt' and the directory `CMakeFiles'.\nPlease delete them.\")\nendif()\nif( NOT CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR )\n  file(GLOB_RECURSE\n    tablegenned_files_on_include_dir\n    \"${CMAKE_CURRENT_SOURCE_DIR}/include/llvm/*.gen\")\n  file(GLOB_RECURSE\n    tablegenned_files_on_lib_dir\n    \"${CMAKE_CURRENT_SOURCE_DIR}/lib/Target/*.inc\")\n  if( tablegenned_files_on_include_dir OR tablegenned_files_on_lib_dir)\n    # HLSL Change - change FATAL_ERROR to WARNING to avoid problems with extraneous files\n    message(WARNING \"Apparently there is a previous in-source build,\nprobably as the result of running `configure' and `make' on\n${CMAKE_CURRENT_SOURCE_DIR}.\nThis may cause problems. The suspicious files are:\n${tablegenned_files_on_lib_dir}\n${tablegenned_files_on_include_dir}\nPlease clean the source directory.\")\n  endif()\nendif()\n\nstring(TOUPPER \"${CMAKE_BUILD_TYPE}\" uppercase_CMAKE_BUILD_TYPE)\n\nset(LLVM_LIBDIR_SUFFIX \"\" CACHE STRING \"Define suffix of library directory name (32/64)\" )\n\n# They are used as destination of target generators.\nset(LLVM_RUNTIME_OUTPUT_INTDIR ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/bin)\nset(LLVM_LIBRARY_OUTPUT_INTDIR ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/lib${LLVM_LIBDIR_SUFFIX})\nif(WIN32 OR CYGWIN)\n  # DLL platform -- put DLLs into bin.\n  set(LLVM_SHLIB_OUTPUT_INTDIR ${LLVM_RUNTIME_OUTPUT_INTDIR})\nelse()\n  set(LLVM_SHLIB_OUTPUT_INTDIR ${LLVM_LIBRARY_OUTPUT_INTDIR})\nendif()\n\n# Each of them corresponds to llvm-config's.\nset(LLVM_TOOLS_BINARY_DIR ${LLVM_RUNTIME_OUTPUT_INTDIR}) # --bindir\nset(LLVM_LIBRARY_DIR      ${LLVM_LIBRARY_OUTPUT_INTDIR}) # --libdir\nset(LLVM_MAIN_SRC_DIR     ${CMAKE_CURRENT_SOURCE_DIR}  ) # --src-root\nset(LLVM_MAIN_INCLUDE_DIR ${LLVM_MAIN_SRC_DIR}/include ) # --includedir\nset(LLVM_BINARY_DIR       ${CMAKE_CURRENT_BINARY_DIR}  ) # --prefix\n\nset(LLVM_EXAMPLES_BINARY_DIR ${LLVM_BINARY_DIR}/examples)\nset(LLVM_INCLUDE_DIR ${CMAKE_CURRENT_BINARY_DIR}/include)\n\n# HLSL removed targets AArch64, ARM, BPF, CppBackend, Hexagon, Mips, MSP430, PowerPC, Sparc, SystemZ, X86, XCore\nset(LLVM_ALL_TARGETS\n  AMDGPU\n  NVPTX\n  )\n\n# List of targets with JIT support:\nset(LLVM_TARGETS_WITH_JIT X86 PowerPC AArch64 ARM Mips SystemZ)\n\nset(LLVM_TARGETS_TO_BUILD \"all\"\n    CACHE STRING \"Semicolon-separated list of targets to build, or \\\"all\\\".\")\n\nset(LLVM_EXPERIMENTAL_TARGETS_TO_BUILD \"\"\n  CACHE STRING \"Semicolon-separated list of experimental targets to build.\")\n\noption(BUILD_SHARED_LIBS\n  \"Build all libraries as shared libraries instead of static\" OFF)\n\noption(LLVM_ENABLE_TIMESTAMPS \"Enable embedding timestamp information in build\" ON)\nif(LLVM_ENABLE_TIMESTAMPS)\n  set(ENABLE_TIMESTAMPS 1)\nendif()\n\noption(LLVM_ENABLE_BACKTRACES \"Enable embedding backtraces on crash.\" ON)\nif(LLVM_ENABLE_BACKTRACES)\n  set(ENABLE_BACKTRACES 1)\nendif()\n\noption(LLVM_ENABLE_CRASH_OVERRIDES \"Enable crash overrides.\" ON)\nif(LLVM_ENABLE_CRASH_OVERRIDES)\n  set(ENABLE_CRASH_OVERRIDES 1)\nendif()\n\noption(LLVM_ENABLE_FFI \"Use libffi to call external functions from the interpreter\" OFF)\nset(FFI_LIBRARY_DIR \"\" CACHE PATH \"Additional directory, where CMake should search for libffi.so\")\nset(FFI_INCLUDE_DIR \"\" CACHE PATH \"Additional directory, where CMake should search for ffi.h or ffi/ffi.h\")\n\nset(LLVM_TARGET_ARCH \"host\"\n  CACHE STRING \"Set target to use for LLVM JIT or use \\\"host\\\" for automatic detection.\")\n\noption(LLVM_ENABLE_TERMINFO \"Use terminfo database if available.\" ON)\n\noption(LLVM_ENABLE_THREADS \"Use threads if available.\" ON)\n\noption(LLVM_ENABLE_ZLIB \"Use zlib for compression/decompression if available.\" ON)\n\nif( LLVM_TARGETS_TO_BUILD STREQUAL \"all\" )\n  set( LLVM_TARGETS_TO_BUILD ${LLVM_ALL_TARGETS} )\nendif()\n\nset(LLVM_TARGETS_TO_BUILD\n   ${LLVM_TARGETS_TO_BUILD}\n   ${LLVM_EXPERIMENTAL_TARGETS_TO_BUILD})\nlist(REMOVE_DUPLICATES LLVM_TARGETS_TO_BUILD)\n\ninclude(AddLLVMDefinitions)\n\noption(LLVM_ENABLE_PIC \"Build Position-Independent Code\" ON)\noption(LLVM_ENABLE_WARNINGS \"Enable compiler warnings.\" ON)\noption(LLVM_ENABLE_MODULES \"Compile with C++ modules enabled.\" OFF)\noption(LLVM_ENABLE_CXX1Y \"Compile with C++1y enabled.\" OFF)\noption(LLVM_ENABLE_LIBCXX \"Use libc++ if available.\" OFF)\noption(LLVM_ENABLE_LIBCXXABI \"Use libc++abi when using libc++.\" OFF)\noption(LLVM_ENABLE_PEDANTIC \"Compile with pedantic enabled.\" ON)\noption(LLVM_ENABLE_WERROR \"Fail and stop if a warning is triggered.\" OFF)\n\nif( NOT uppercase_CMAKE_BUILD_TYPE STREQUAL \"DEBUG\" )\n  option(LLVM_ENABLE_ASSERTIONS \"Enable assertions\" OFF)\nelse()\n  option(LLVM_ENABLE_ASSERTIONS \"Enable assertions\" ON)\nendif()\n\noption(LLVM_ASSERTIONS_TRAP \"Force assertions to always trap, rather than the default unspecified behavior (e.g. RaiseException on Windows)\" OFF)\noption(LLVM_ASSERTIONS_NO_STRINGS \"Make assertion macro drops strings to reduce binary size\" OFF)\n\nset(LLVM_ABI_BREAKING_CHECKS \"WITH_ASSERTS\" CACHE STRING\n  \"Enable abi-breaking checks.  Can be WITH_ASSERTS, FORCE_ON or FORCE_OFF.\")\n\noption(LLVM_FORCE_USE_OLD_HOST_TOOLCHAIN\n       \"Set to ON to force using an old, unsupported host toolchain.\" OFF)\n\noption(LLVM_USE_INTEL_JITEVENTS\n  \"Use Intel JIT API to inform Intel(R) VTune(TM) Amplifier XE 2011 about JIT code\"\n  OFF)\n\nif( LLVM_USE_INTEL_JITEVENTS )\n  # Verify we are on a supported platform\n  if( NOT CMAKE_SYSTEM_NAME MATCHES \"Windows\" AND NOT CMAKE_SYSTEM_NAME MATCHES \"Linux\" )\n    message(FATAL_ERROR\n      \"Intel JIT API support is available on Linux and Windows only.\")\n  endif()\nendif( LLVM_USE_INTEL_JITEVENTS )\n\noption(LLVM_USE_OPROFILE\n  \"Use opagent JIT interface to inform OProfile about JIT code\" OFF)\n\n# If enabled, verify we are on a platform that supports oprofile.\nif( LLVM_USE_OPROFILE )\n  if( NOT CMAKE_SYSTEM_NAME MATCHES \"Linux\" )\n    message(FATAL_ERROR \"OProfile support is available on Linux only.\")\n  endif( NOT CMAKE_SYSTEM_NAME MATCHES \"Linux\" )\nendif( LLVM_USE_OPROFILE )\n\nset(LLVM_USE_SANITIZER \"\" CACHE STRING\n  \"Define the sanitizer used to build binaries and tests.\")\noption(LLVM_OPTIMIZE_SANITIZED_BUILDS \"Enable -O1 on sanitized builds\" On)\n\noption(LLVM_USE_SPLIT_DWARF\n  \"Use -gsplit-dwarf when compiling llvm.\" OFF)\n\noption(WITH_POLLY \"Build LLVM with Polly\" ON)\noption(LINK_POLLY_INTO_TOOLS \"Static link Polly into tools\" OFF)\n\n# Define an option controlling whether we should build for 32-bit on 64-bit\n# platforms, where supported.\nif( CMAKE_SIZEOF_VOID_P EQUAL 8 AND NOT WIN32 )\n  # TODO: support other platforms and toolchains.\n  option(LLVM_BUILD_32_BITS \"Build 32 bits executables and libraries.\" OFF)\nendif()\n\n# Define the default arguments to use with 'lit', and an option for the user to\n# override.\nset(LIT_ARGS_DEFAULT \"-sv\")\nif (MSVC OR XCODE)\n  set(LIT_ARGS_DEFAULT \"${LIT_ARGS_DEFAULT} --no-progress-bar\")\nendif()\nset(LLVM_LIT_ARGS \"${LIT_ARGS_DEFAULT}\" CACHE STRING \"Default options for lit\")\n\n# On Win32 hosts, provide an option to specify the path to the GnuWin32 tools.\nif( WIN32 AND NOT CYGWIN )\n  set(LLVM_LIT_TOOLS_DIR \"\" CACHE PATH \"Path to GnuWin32 tools\")\nendif()\n\n# Define options to control the inclusion and default build behavior for\n# components which may not strictly be necessary (tools, examples, and tests).\n#\n# This is primarily to support building smaller or faster project files.\noption(LLVM_INCLUDE_TOOLS \"Generate build targets for the LLVM tools.\" ON)\noption(LLVM_BUILD_TOOLS\n  \"Build the LLVM tools. If OFF, just generate build targets.\" ON)\n\noption(LLVM_INCLUDE_UTILS \"Generate build targets for the LLVM utils.\" ON)\n\noption(LLVM_BUILD_RUNTIME\n  \"Build the LLVM runtime libraries.\" ON)\noption(LLVM_BUILD_EXAMPLES\n  \"Build the LLVM example programs. If OFF, just generate build targets.\" OFF)\noption(LLVM_INCLUDE_EXAMPLES \"Generate build targets for the LLVM examples\" ON)\n\noption(LLVM_BUILD_TESTS\n  \"Build LLVM unit tests. If OFF, just generate build targets.\" OFF)\noption(LLVM_INCLUDE_TESTS \"Generate build targets for the LLVM unit tests.\" ON)\n\noption(HLSL_INCLUDE_TESTS  \"Generate build targets for the HLSL unit tests.\" ON)\n\noption (LLVM_BUILD_DOCS \"Build the llvm documentation.\" OFF)\noption (LLVM_INCLUDE_DOCS \"Generate build targets for llvm documentation.\" ON)\noption (LLVM_ENABLE_DOXYGEN \"Use doxygen to generate llvm API documentation.\" OFF)\noption (LLVM_ENABLE_SPHINX \"Use Sphinx to generate llvm documentation.\" OFF)\n\noption (LLVM_BUILD_EXTERNAL_COMPILER_RT\n  \"Build compiler-rt as an external project.\" OFF)\n\noption(LLVM_BUILD_LLVM_DYLIB \"Build libllvm dynamic library\" OFF)\noption(LLVM_DYLIB_EXPORT_ALL \"Export all symbols from libLLVM.dylib (default is C API only\" OFF)\noption(LLVM_DISABLE_LLVM_DYLIB_ATEXIT \"Disable llvm-shlib's atexit destructors.\" ON)\nif(LLVM_DISABLE_LLVM_DYLIB_ATEXIT)\n  set(DISABLE_LLVM_DYLIB_ATEXIT 1)\nendif()\n\noption(LLVM_OPTIMIZED_TABLEGEN \"Force TableGen to be built with optimization\" OFF)\nif(CMAKE_CROSSCOMPILING OR (LLVM_OPTIMIZED_TABLEGEN AND LLVM_ENABLE_ASSERTIONS))\n  set(LLVM_USE_HOST_TOOLS ON)\nendif()\n\nif (LLVM_BUILD_INSTRUMENTED OR LLVM_BUILD_INSTRUMENTED_COVERAGE)\n  if(NOT LLVM_PROFILE_MERGE_POOL_SIZE)\n    # A pool size of 1-2 is probably sufficient on a SSD. 3-4 should be fine\n    # for spining disks. Anything higher may only help on slower mediums.\n    set(LLVM_PROFILE_MERGE_POOL_SIZE \"4\")\n  endif()\n  if(NOT LLVM_PROFILE_FILE_PATTERN)\n    if(NOT LLVM_PROFILE_DATA_DIR)\n      set(LLVM_PROFILE_FILE_PATTERN \"%${LLVM_PROFILE_MERGE_POOL_SIZE}m.profraw\")\n    else()\n      file(TO_NATIVE_PATH \"${LLVM_PROFILE_DATA_DIR}/%${LLVM_PROFILE_MERGE_POOL_SIZE}m.profraw\" LLVM_PROFILE_FILE_PATTERN)\n    endif()\n  endif()\nendif()\n\n# All options referred to from HandleLLVMOptions have to be specified\n# BEFORE this include, otherwise options will not be correctly set on\n# first cmake run\ninclude(config-ix)\n\n# By default, we target the host, but this can be overridden at CMake\n# invocation time.\nset(LLVM_DEFAULT_TARGET_TRIPLE \"${LLVM_HOST_TRIPLE}\" CACHE STRING\n  \"Default target for which LLVM will generate code.\" )\nset(TARGET_TRIPLE \"${LLVM_DEFAULT_TARGET_TRIPLE}\")\n\ninclude(HandleLLVMOptions)\n\n# Verify that we can find a Python 3 interpreter and force cmake to use it.\nfind_package(Python3 REQUIRED)\n\n######\n# LLVMBuild Integration\n#\n# We use llvm-build to generate all the data required by the CMake based\n# build system in one swoop:\n#\n#  - We generate a file (a CMake fragment) in the object root which contains\n#    all the definitions that are required by CMake.\n#\n#  - We generate the library table used by llvm-config.\n#\n#  - We generate the dependencies for the CMake fragment, so that we will\n#    automatically reconfigure outselves.\n\nset(LLVMBUILDTOOL \"${LLVM_MAIN_SRC_DIR}/utils/llvm-build/llvm-build\")\nset(LLVMCONFIGLIBRARYDEPENDENCIESINC\n  \"${LLVM_BINARY_DIR}/tools/llvm-config/LibraryDependencies.inc\")\nset(LLVMBUILDCMAKEFRAG\n  \"${LLVM_BINARY_DIR}/LLVMBuild.cmake\")\n\n# Create the list of optional components that are enabled\nif (LLVM_USE_INTEL_JITEVENTS)\n  set(LLVMOPTIONALCOMPONENTS IntelJITEvents)\nendif (LLVM_USE_INTEL_JITEVENTS)\nif (LLVM_USE_OPROFILE)\n  set(LLVMOPTIONALCOMPONENTS ${LLVMOPTIONALCOMPONENTS} OProfileJIT)\nendif (LLVM_USE_OPROFILE)\n\n# HLSL Change: use 'Unknown' in place of \"${LLVM_NATIVE_ARCH}\"\nmessage(STATUS \"Constructing LLVMBuild project information\")\n\nexecute_process(\n  COMMAND ${Python3_EXECUTABLE} ${LLVMBUILDTOOL}\n            --native-target Unknown\n            --enable-targets \"${LLVM_TARGETS_TO_BUILD}\"\n            --enable-optional-components \"${LLVMOPTIONALCOMPONENTS}\"\n            --write-library-table ${LLVMCONFIGLIBRARYDEPENDENCIESINC}\n            --write-cmake-fragment ${LLVMBUILDCMAKEFRAG}\n            OUTPUT_VARIABLE LLVMBUILDOUTPUT\n            ERROR_VARIABLE LLVMBUILDERRORS\n            OUTPUT_STRIP_TRAILING_WHITESPACE\n            ERROR_STRIP_TRAILING_WHITESPACE\n  RESULT_VARIABLE LLVMBUILDRESULT)\n\n# On Win32, CMake doesn't properly handle piping the default output/error\n# streams into the GUI console. So, we explicitly catch and report them.\nif( NOT \"${LLVMBUILDOUTPUT}\" STREQUAL \"\")\n  message(STATUS \"llvm-build output: ${LLVMBUILDOUTPUT}\")\nendif()\nif( NOT \"${LLVMBUILDRESULT}\" STREQUAL \"0\" )\n  message(FATAL_ERROR\n    \"Unexpected failure executing llvm-build: ${LLVMBUILDERRORS}\")\nendif()\n\n# Include the generated CMake fragment. This will define properties from the\n# LLVMBuild files in a format which is easy to consume from CMake, and will add\n# the dependencies so that CMake will reconfigure properly when the LLVMBuild\n# files change.\ninclude(${LLVMBUILDCMAKEFRAG})\n\n######\n\n# Configure all of the various header file fragments LLVM uses which depend on\n# configuration variables.\nset(LLVM_ENUM_TARGETS \"\")\nset(LLVM_ENUM_ASM_PRINTERS \"\")\nset(LLVM_ENUM_ASM_PARSERS \"\")\nset(LLVM_ENUM_DISASSEMBLERS \"\")\nforeach(t ${LLVM_TARGETS_TO_BUILD})\n  if(NOT t STREQUAL \"None\") # HLSL Change - support for no target, but no continue() in CMake 2.8\n\n  set( td ${LLVM_MAIN_SRC_DIR}/lib/Target/${t} )\n\n  list(FIND LLVM_ALL_TARGETS ${t} idx)\n  list(FIND LLVM_EXPERIMENTAL_TARGETS_TO_BUILD ${t} idy)\n  if( idx LESS 0 AND idy LESS 0 )\n    message(FATAL_ERROR \"The target `${t}' does not exist.\n    It should be one of\\n${LLVM_ALL_TARGETS}\")\n  else()\n    set(LLVM_ENUM_TARGETS \"${LLVM_ENUM_TARGETS}LLVM_TARGET(${t})\\n\")\n  endif()\n\n  file(GLOB asmp_file \"${td}/*AsmPrinter.cpp\")\n  if( asmp_file )\n    set(LLVM_ENUM_ASM_PRINTERS\n      \"${LLVM_ENUM_ASM_PRINTERS}LLVM_ASM_PRINTER(${t})\\n\")\n  endif()\n  if( EXISTS ${td}/AsmParser/CMakeLists.txt )\n    set(LLVM_ENUM_ASM_PARSERS\n      \"${LLVM_ENUM_ASM_PARSERS}LLVM_ASM_PARSER(${t})\\n\")\n  endif()\n  if( EXISTS ${td}/Disassembler/CMakeLists.txt )\n    set(LLVM_ENUM_DISASSEMBLERS\n      \"${LLVM_ENUM_DISASSEMBLERS}LLVM_DISASSEMBLER(${t})\\n\")\n  endif()\n\n  endif() # HLSL Change - support for no target\nendforeach(t)\n\n# Produce the target definition files, which provide a way for clients to easily\n# include various classes of targets.\nconfigure_file(\n  ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/AsmPrinters.def.in\n  ${LLVM_INCLUDE_DIR}/llvm/Config/AsmPrinters.def\n  )\nconfigure_file(\n  ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/AsmParsers.def.in\n  ${LLVM_INCLUDE_DIR}/llvm/Config/AsmParsers.def\n  )\nconfigure_file(\n  ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/Disassemblers.def.in\n  ${LLVM_INCLUDE_DIR}/llvm/Config/Disassemblers.def\n  )\nconfigure_file(\n  ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/Targets.def.in\n  ${LLVM_INCLUDE_DIR}/llvm/Config/Targets.def\n  )\n\n# Configure the three LLVM configuration header files.\nconfigure_file(\n  ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/config.h.cmake\n  ${LLVM_INCLUDE_DIR}/llvm/Config/config.h)\nconfigure_file(\n  ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/llvm-config.h.cmake\n  ${LLVM_INCLUDE_DIR}/llvm/Config/llvm-config.h)\nconfigure_file(\n  ${LLVM_MAIN_INCLUDE_DIR}/llvm/Config/abi-breaking.h.cmake\n  ${LLVM_INCLUDE_DIR}/llvm/Config/abi-breaking.h)\nconfigure_file(\n  ${LLVM_MAIN_INCLUDE_DIR}/llvm/Support/DataTypes.h.cmake\n  ${LLVM_INCLUDE_DIR}/llvm/Support/DataTypes.h)\n\n# They are not referenced. See set_output_directory().\nset( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${LLVM_BINARY_DIR}/bin )\nset( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${LLVM_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX} )\nset( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${LLVM_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX} )\n\nset(CMAKE_BUILD_WITH_INSTALL_RPATH ON)\nif (APPLE)\n  if(NOT DEFINED CMAKE_INSTALL_RPATH)\n    set(CMAKE_INSTALL_NAME_DIR \"@rpath\")\n    set(CMAKE_INSTALL_RPATH \"@executable_path/../lib\")\n    endif(NOT DEFINED CMAKE_INSTALL_RPATH)\nelse(UNIX)\n  if(NOT DEFINED CMAKE_INSTALL_RPATH)\n    set(CMAKE_INSTALL_RPATH \"\\$ORIGIN/../lib${LLVM_LIBDIR_SUFFIX}\")\n    if(${CMAKE_SYSTEM_NAME} MATCHES \"(FreeBSD|DragonFly)\")\n      set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -Wl,-z,origin\")\n      set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -Wl,-z,origin\")\n    endif()\n  endif(NOT DEFINED CMAKE_INSTALL_RPATH)\nendif()\n\n# Work around a broken bfd ld behavior. When linking a binary with a\n# foo.so library, it will try to find any library that foo.so uses and\n# check its symbols. This is wasteful (the check was done when foo.so\n# was created) and can fail since it is not the dynamic linker and\n# doesn't know how to handle search paths correctly.\nif (UNIX AND NOT APPLE AND NOT ${CMAKE_SYSTEM_NAME} MATCHES \"SunOS\")\n  set(CMAKE_EXE_LINKER_FLAGS\n      \"${CMAKE_EXE_LINKER_FLAGS} -Wl,-allow-shlib-undefined\")\nendif()\n\nset(CMAKE_INCLUDE_CURRENT_DIR ON)\n\n# HLSL Change Starts - override assert to RaiseException instead of abort\n# for better test behavior\ninclude_directories(BEFORE \"${LLVM_MAIN_INCLUDE_DIR}/llvm/llvm_assert\")\n# HLSL Change Ends\n\ninclude_directories( ${LLVM_INCLUDE_DIR} ${LLVM_MAIN_INCLUDE_DIR})\n\ninclude_directories( ${LLVM_INCLUDE_DIR}/dxc/Tracing) # HLSL Change\n\n# when crosscompiling import the executable targets from a file\nif(LLVM_USE_HOST_TOOLS)\n  include(CrossCompile)\nendif(LLVM_USE_HOST_TOOLS)\n\nif(${CMAKE_SYSTEM_NAME} MATCHES \"(FreeBSD|DragonFly)\")\n  # On FreeBSD, /usr/local/* is not used by default. In order to build LLVM\n  # with libxml2, iconv.h, etc., we must add /usr/local paths.\n  include_directories(\"/usr/local/include\")\n  link_directories(\"/usr/local/lib\")\nendif(${CMAKE_SYSTEM_NAME} MATCHES \"(FreeBSD|DragonFly)\")\n\nif( ${CMAKE_SYSTEM_NAME} MATCHES SunOS )\n   SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -include llvm/Support/Solaris.h\")\nendif( ${CMAKE_SYSTEM_NAME} MATCHES SunOS )\n\n# Make sure we don't get -rdynamic in every binary. For those that need it,\n# use export_executable_symbols(target).\nset(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS \"\")\n\n# enable warnings as errors for debug build\nif (MSVC)\n  SET(CMAKE_CXX_FLAGS_DEBUG  \"${CMAKE_CXX_FLAGS_DEBUG} /WX\")\nendif (MSVC)\n\ninclude(AddLLVM)\ninclude(TableGen)\n\nif( MINGW )\n  # People report that -O3 is unreliable on MinGW. The traditional\n  # build also uses -O2 for that reason:\n  llvm_replace_compiler_option(CMAKE_CXX_FLAGS_RELEASE \"-O3\" \"-O2\")\nendif()\n\nif(LLVM_INCLUDE_TESTS AND WIN32)\n  add_definitions(/DMSFT_SUPPORTS_CHILD_PROCESSES)\nendif()\n\n# Put this before tblgen. Else we have a circular dependence.\nadd_subdirectory(lib/Support)\nadd_subdirectory(lib/MSSupport) # HLSL Change\nadd_subdirectory(lib/TableGen)\n\nadd_subdirectory(utils/TableGen)\n\nadd_subdirectory(include/llvm)\n# HLSL - Change Start\nadd_subdirectory(include/dxc)\n\n# This over-specifies the dependency graph, but since generating these doesn't\n# really depend on anything else in the build it is safe.\nlist(APPEND LLVM_COMMON_DEPENDS HCTGen) \n\nif(EXISTS \"${LLVM_MAIN_SRC_DIR}/external\")\n  add_subdirectory(external) # SPIRV change\nendif()\ninclude_directories(AFTER ${DIRECTX_HEADER_INCLUDE_DIR}/directx ${DIRECTX_HEADER_INCLUDE_DIR}/wsl/stubs)\n\n# HLSL - Change End\n\nadd_subdirectory(lib)\n\nif (HLSL_EMBED_VERSION) \n  add_subdirectory(utils/version)\nendif()\n\nif(LLVM_INCLUDE_UTILS AND LLVM_INCLUDE_TESTS) # HLSL Change - only when testing\n  add_subdirectory(utils/FileCheck)\n  # add_subdirectory(utils/FileUpdate) # HLSL Change\n  add_subdirectory(utils/count)\n  add_subdirectory(utils/not)\n  add_subdirectory(utils/llvm-lit)\n  add_subdirectory(utils/yaml-bench)\nelse()\n  if ( LLVM_INCLUDE_TESTS )\n    message(FATAL_ERROR \"Including tests when not building utils will not work.\n    Either set LLVM_INCLUDE_UTILS to On, or set LLVM_INCLDE_TESTS to Off.\")\n  endif()\nendif()\n\nif(LLVM_INCLUDE_TESTS OR HLSL_INCLUDE_TESTS OR SPIRV_BUILD_TESTS) # HLSL Change\n  add_subdirectory(utils/unittest)\nendif()\n\nforeach( binding ${LLVM_BINDINGS_LIST} )\n  if( EXISTS \"${LLVM_MAIN_SRC_DIR}/bindings/${binding}/CMakeLists.txt\" )\n    add_subdirectory(bindings/${binding})\n  endif()\nendforeach()\n\nadd_subdirectory(projects)\n\nif(WITH_POLLY)\n  if(NOT EXISTS ${LLVM_MAIN_SRC_DIR}/tools/polly/CMakeLists.txt)\n    set(WITH_POLLY OFF)\n  endif()\nendif(WITH_POLLY)\n\nif( LLVM_INCLUDE_TOOLS )\n  add_subdirectory(tools)\nendif()\n\n\nif( LLVM_INCLUDE_EXAMPLES AND 0 ) # HLSL Change - never build examples\n  add_subdirectory(examples)\nendif()\n\nif( LLVM_INCLUDE_TESTS )\n  add_subdirectory(test)\n  add_subdirectory(unittests)\n  if (MSVC)\n    # This utility is used to prevent crashing tests from calling Dr. Watson on\n    # Windows.\n    add_subdirectory(utils/KillTheDoctor)\n  endif()\n\n  # Add a global check rule now that all subdirectories have been traversed\n  # and we know the total set of lit testsuites.\n  get_property(LLVM_LIT_TESTSUITES GLOBAL PROPERTY LLVM_LIT_TESTSUITES)\n  get_property(LLVM_LIT_PARAMS GLOBAL PROPERTY LLVM_LIT_PARAMS)\n  get_property(LLVM_LIT_DEPENDS GLOBAL PROPERTY LLVM_LIT_DEPENDS)\n  get_property(LLVM_LIT_EXTRA_ARGS GLOBAL PROPERTY LLVM_LIT_EXTRA_ARGS)\n  add_lit_target(check-all\n    \"Running all regression tests\"\n    ${LLVM_LIT_TESTSUITES}\n    PARAMS ${LLVM_LIT_PARAMS}\n    DEPENDS ${LLVM_LIT_DEPENDS}\n    ARGS ${LLVM_LIT_EXTRA_ARGS}\n    )\n  add_custom_target(test-depends DEPENDS ${LLVM_LIT_DEPENDS}) # HLSL Change\nendif()\n\nif (LLVM_INCLUDE_DOCS)\n  add_subdirectory(docs)\nendif()\n\nif (LLVM_BUILD_DOCS)\n  add_hlsl_hctgen(DxilDocs OUTPUT docs/DXIL.rst CODE_TAG) # HLSL Change\nendif()\n\nadd_subdirectory(cmake/modules)\n\nif (NOT LLVM_INSTALL_TOOLCHAIN_ONLY)\n  install(DIRECTORY include/llvm include/llvm-c\n    DESTINATION include\n    COMPONENT llvm-headers\n    FILES_MATCHING\n    PATTERN \"*.def\"\n    PATTERN \"*.h\"\n    PATTERN \"*.td\"\n    PATTERN \"*.inc\"\n    PATTERN \"LICENSE.TXT\"\n    PATTERN \".svn\" EXCLUDE\n    )\n\n  install(DIRECTORY ${LLVM_INCLUDE_DIR}/llvm\n    DESTINATION include\n    COMPONENT llvm-headers\n    FILES_MATCHING\n    PATTERN \"*.def\"\n    PATTERN \"*.h\"\n    PATTERN \"*.gen\"\n    PATTERN \"*.inc\"\n    # Exclude include/llvm/CMakeFiles/intrinsics_gen.dir, matched by \"*.def\"\n    PATTERN \"CMakeFiles\" EXCLUDE\n    PATTERN \"config.h\" EXCLUDE\n    PATTERN \".svn\" EXCLUDE\n    )\n\n  if (NOT CMAKE_CONFIGURATION_TYPES)\n    add_custom_target(installhdrs\n                      DEPENDS ${name}\n                      COMMAND \"${CMAKE_COMMAND}\"\n                              -DCMAKE_INSTALL_COMPONENT=llvm-headers\n                              -P \"${CMAKE_BINARY_DIR}/cmake_install.cmake\")\n  endif()\nendif()\n\ninclude(CoverageReport)\n\n# HLSL Change begin - Set default distribution value.\nset(LLVM_DISTRIBUTION_COMPONENTS \"dxc;dxcompiler;dxc-headers\" CACHE STRING \"\")\n# HLSL Change end - Set default distribution value.\n\n# This must be at the end of the LLVM root CMakeLists file because it must run\n# after all targets are created.\nif(LLVM_DISTRIBUTION_COMPONENTS)\n  # HLSL Change - Deleted restriction for non-IDE builds. This works with Visual\n  # Studio for DXC because of the limited number of targets.\n  \n  add_custom_target(install-distribution)\n  foreach(target ${LLVM_DISTRIBUTION_COMPONENTS})\n    if(TARGET install-${target})\n      add_dependencies(install-distribution install-${target})\n    else()\n      message(FATAL_ERROR \"Specified distribution component '${target}' doesn't have an install target\")\n    endif()\n  endforeach()\nendif()\n\n# Disable regeneration target for official builds as they always fun a full clean build.\n# This should eliminate the race-condition issue with \"Cannot restore timestamp\".\nif (HLSL_OFFICIAL_BUILD)\n  set(CMAKE_SUPPRESS_REGENERATION ON)\nendif (HLSL_OFFICIAL_BUILD)\n\nif (NOT \"${DXC_CMAKE_ENDS_INCLUDE}\" STREQUAL \"\")\n  include(${DXC_CMAKE_ENDS_INCLUDE})\nendif()\n"
        },
        {
          "name": "CMakeSettings.json",
          "type": "blob",
          "size": 2.828125,
          "content": "{\n  \"configurations\": [\n    {\n      \"name\": \"x64-Release\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"RelWithDebInfo\",\n      \"buildRoot\": \"${projectDir}\\\\out\\\\build\\\\${name}\",\n      \"installRoot\": \"${projectDir}\\\\out\\\\install\\\\${name}\",\n      \"cmakeCommandArgs\": \"-C ${projectDir}\\\\cmake\\\\caches\\\\PredefinedParams.cmake -DLLVM_ENABLE_ASSERTIONS=On -DLLVM_LIT_ARGS=\\\"-v\\\"\",\n      \"buildCommandArgs\": \"-v\",\n      \"ctestCommandArgs\": \"\",\n      \"inheritEnvironments\": [ \"msvc_x64_x64\" ]\n    },\n    {\n      \"name\": \"x64-Debug\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"Debug\",\n      \"buildRoot\": \"${projectDir}\\\\out\\\\build\\\\${name}\",\n      \"installRoot\": \"${projectDir}\\\\out\\\\install\\\\${name}\",\n      \"cmakeCommandArgs\": \"-C ${projectDir}\\\\cmake\\\\caches\\\\PredefinedParams.cmake -DLLVM_ENABLE_ASSERTIONS=On -DLLVM_LIT_ARGS=\\\"-v\\\"\",\n      \"buildCommandArgs\": \"-v\",\n      \"ctestCommandArgs\": \"\",\n      \"inheritEnvironments\": [ \"msvc_x64_x64\" ]\n    },\n    {\n      \"name\": \"x64-clang-cl-Release\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"RelWithDebInfo\",\n      \"buildRoot\": \"${projectDir}\\\\out\\\\build\\\\${name}\",\n      \"installRoot\": \"${projectDir}\\\\out\\\\install\\\\${name}\",\n      \"cmakeCommandArgs\": \"-C ${projectDir}\\\\cmake\\\\caches\\\\PredefinedParams.cmake -DLLVM_ENABLE_ASSERTIONS=On -DLLVM_LIT_ARGS=\\\"-v\\\"\",\n      \"buildCommandArgs\": \"-v\",\n      \"ctestCommandArgs\": \"\",\n      \"inheritEnvironments\": [ \"clang_cl_x64_x64\" ]\n    },\n    {\n      \"name\": \"x64-clang-cl-Debug\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"Debug\",\n      \"buildRoot\": \"${projectDir}\\\\out\\\\build\\\\${name}\",\n      \"installRoot\": \"${projectDir}\\\\out\\\\install\\\\${name}\",\n      \"cmakeCommandArgs\": \"-C ${projectDir}\\\\cmake\\\\caches\\\\PredefinedParams.cmake -DLLVM_ENABLE_ASSERTIONS=On -DLLVM_LIT_ARGS=\\\"-v\\\"\",\n      \"buildCommandArgs\": \"-v\",\n      \"ctestCommandArgs\": \"\",\n      \"inheritEnvironments\": [ \"clang_cl_x64_x64\" ]\n    },\n    {\n      \"name\": \"x86-Release\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"RelWithDebInfo\",\n      \"buildRoot\": \"${projectDir}\\\\out\\\\build\\\\${name}\",\n      \"installRoot\": \"${projectDir}\\\\out\\\\install\\\\${name}\",\n      \"cmakeCommandArgs\": \"-C ${projectDir}\\\\cmake\\\\caches\\\\PredefinedParams.cmake -DLLVM_ENABLE_ASSERTIONS=On -DLLVM_LIT_ARGS=\\\"-v\\\"\",\n      \"buildCommandArgs\": \"-v\",\n      \"ctestCommandArgs\": \"\",\n      \"inheritEnvironments\": [ \"msvc_x86_x64\" ]\n    },\n    {\n      \"name\": \"x86-Debug\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"Debug\",\n      \"buildRoot\": \"${projectDir}\\\\out\\\\build\\\\${name}\",\n      \"installRoot\": \"${projectDir}\\\\out\\\\install\\\\${name}\",\n      \"cmakeCommandArgs\": \"-C ${projectDir}\\\\cmake\\\\caches\\\\PredefinedParams.cmake -DLLVM_ENABLE_ASSERTIONS=On -DLLVM_LIT_ARGS=\\\"-v\\\"\",\n      \"buildCommandArgs\": \"-v\",\n      \"ctestCommandArgs\": \"\",\n      \"inheritEnvironments\": [ \"msvc_x86_x64\" ]\n    }\n  ]\n}\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 8.09375,
          "content": "# How to contribute\n\nOne of the easiest ways to contribute is to participate in discussions and discuss issues. You can also contribute by submitting pull requests with code changes.\n\n## General feedback and discussions?\n\nPlease start a discussion on the repo issue tracker.\n\n## Bugs and feature requests?\n\nFor non-security related bugs please log a new issue in the GitHub repo.\n\n## Reporting security issues and bugs\n\nSecurity issues and bugs should be reported privately, via email, to the Microsoft Security Response Center (MSRC) <secure@microsoft.com>. You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Further information, including the MSRC PGP key, can be found in the [Security TechCenter](https://technet.microsoft.com/en-us/security/ff852094.aspx).\n\n## Filing issues\n\nWhen filing issues, please use our [bug filing templates](https://github.com/aspnet/Home/wiki/Functional-bug-template).\nThe best way to get your bug fixed is to be as detailed as you can be about the problem.\nProviding a minimal project with steps to reproduce the problem is ideal.\nHere are questions you can answer before you file a bug to make sure you're not missing any important information.\n\n1. Did you read the documentation?\n2. Did you include the snippet of broken code in the issue?\n3. What are the *EXACT* steps to reproduce this problem?\n4. What version are you using?\n\nGitHub supports [markdown](https://help.github.com/articles/github-flavored-markdown/), so when filing bugs make sure you check the formatting before clicking submit.\n\n## Contributing code and content\n\nYou will need to complete a Contributor License Agreement (CLA) before your pull request can be accepted. This agreement testifies that you are granting us permission to use the source code you are submitting, and that this work is being submitted under appropriate license that we can use it.\n\nYou can complete the CLA by going through the steps at the [Contribution License Agreement site](https://cla.microsoft.com). Once we have received the signed CLA, we'll review the request. You will only need to do this once.\n\nMake sure you can build the code. Familiarize yourself with the project workflow and our coding conventions. If you don't know what a pull request is read this article: <https://help.github.com/articles/using-pull-requests>.\n\nBefore submitting a feature or substantial code contribution please discuss it with the team and ensure it follows the product roadmap. You might also read these two blogs posts on contributing code: [Open Source Contribution Etiquette](http://tirania.org/blog/archive/2010/Dec-31.html) by Miguel de Icaza and [Don't \"Push\" Your Pull Requests](https://www.igvita.com/2011/12/19/dont-push-your-pull-requests/) by Ilya Grigorik. Note that all code submissions will be rigorously reviewed and tested by the team, and only those that meet an extremely high bar for both quality and design/roadmap appropriateness will be merged into the source.\n\n### Coding guidelines\n\nThe coding, style, and general engineering guidelines follow those described in the docs/CodingStandards.rst. For additional guidelines in code specific to HLSL, see the docs/HLSLChanges.rst file.\n\nDXC has adopted a clang-format requirement for all incoming changes to C and C++ files. PRs to DXC should have the *changed code* clang formatted to the LLVM style, and leave the remaining portions of the file unchanged. This can be done using the `git-clang-format` tool or IDE driven workflows. A GitHub action will run on all PRs to validate that the change is properly formatted.\n\n### Documenting Pull Requests\n\nPull request descriptions should have the following format:\n\n```md\nTitle summary of the changes (Less than 80 chars)\n - Description Detail 1\n - Description Detail 2\n\nFixes #bugnumber (Where relevant. In this specific format)\n```\n\n#### Titles\n\nThe title should focus on what the change intends to do rather than how it was done.\nThe description can and should explain how it was done if not obvious.\n\nTitles under 76 characters print nicely in unix terminals under `git log`.\nThis is not a hard requirement, but is good guidance.\n\nTags in titles allow for speedy categorization\nTitle tags  are generally one word or acronym enclosed in square brackets.\nLimiting to one or two tags is ideal to keep titles short.\nSome examples of common tags are:\n\n- `[NFC]` - No Functional Change\n- `[RFC]` - Request For Comments (often used for drafts to get feedback)\n- `[Doc]` - Documentation change\n- `[SPIRV]` - Changes related to SPIR-V\n- `[HLSL2021]` - Changes related to HLSL 2021 features\n- Other tags in use: `[Linux]`, `[mac]`, `[Win]`, `[PIX]`, etc...\n\nTags aren't formalized or any specific limited set.\nIf you're unsure of a reasonable tag to use, just don't use any.\nIf you want to invent a new tag, go for it!\nThese are to help categorize changes at a glance.\n\n#### Descriptions\n\nThe PR description should include a more detailed description of the change,\n an explanation for the motivation of the change, and links to any relevant Issues.\nThis does not need to be a dissertation, but should leave breadcrumbs for the next person debugging your code (who might be you).\n\nUsing the words `Fixes`, `Fixed`, `Closes`, `Closed`, or `Close` followed by\n `#<issuenumber>`, will auto close an issue after the PR is merged.\n\n#### Release Notes\n\nSignificant changes may require release notes that highlight important\n compiler behavior changes for each named release.\nThese include changes that are:\n\n- Visible to the users\n- Significant changes to compiler behavior\n  - New features: Language, Hardware support, compiler options\n  - Important bug fixes\n  - Changes in default behavior\n\nWhen such a change is made, the release note should be included as part of that change.\nThis is done in the docs/ReleaseNotes.md file.\n\nIf the change is meant for a named release, it should be added to that named release's section of the release notes file.\nAs the change is merged to the appropriate release branches, the release notes will come along with it.\n\nIf a change is meant for the next upcoming release, it should be added to the \"Upcoming Release\" section.\nWhen the next upcoming release is named, the title will be updated and the release note will be included in the appropriate release.\n\nWhen writing release note list entries:\n\n- Keep the description to a single sentence.\n- Links to specific PRs shouldn't be included.\n- Markdown links to bugs are encouraged if the issue is too complicated to completely explain in a single sentence.\n- Remember to update release notes as the nature of the change alters or is removed.\n\n### Testing Pull Requests\n\nAll changes that make functional or behavioral changes to the compiler whether by fixing bugs or adding features\n must include additional testing in the implementing pull request.\nChanges that do not change behavior may still be required to add testing if the change impacts areas with limited test coverage\n to verify that the change doesn't alter previously untested, but important behavior.\nFor bug fixes, at least one added test should fail in the absence of your non-test code changes.\nTests should include reasonable permutations of the target fix/change.\nInclude baseline changes with your change as needed.\n\nSubmitting a pull request kicks off an automated set of regression tests that verify the change introduces no unwanted changes in behavior.\nFor a pull request to be mergeable in GitHub, it will have to pass this regression test suite.\nChanges made to DXC for the benefit of external projects should be verified using that project's testing protocols to avoid churn.\n\nFor cases where any of the above testing requirements are not possible, please specify why in the pull request.\n\n### Merging Pull Requests\n\nPull requests should be a child commit of a reasonably recent commit in the main branch.\nA pull request's commits should be squashed on merging except in very special circumstances usually involving release branches.\n\nEnsure that the title and description are fully up to date before merging.\nThe title and description feed the final git commit message, and we want to ensure high quality commit messages in the repository history.\n"
        },
        {
          "name": "LICENSE.TXT",
          "type": "blob",
          "size": 28.5556640625,
          "content": "==============================================================================\nLLVM Release License\n==============================================================================\nUniversity of Illinois/NCSA\nOpen Source License\n\nCopyright (c) 2003-2015 University of Illinois at Urbana-Champaign.\nAll rights reserved.\n\nDeveloped by:\n\n    LLVM Team\n\n    University of Illinois at Urbana-Champaign\n\n    http://llvm.org\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal with\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\n    * Redistributions of source code must retain the above copyright notice,\n      this list of conditions and the following disclaimers.\n\n    * Redistributions in binary form must reproduce the above copyright notice,\n      this list of conditions and the following disclaimers in the\n      documentation and/or other materials provided with the distribution.\n\n    * Neither the names of the LLVM Team, University of Illinois at\n      Urbana-Champaign, nor the names of its contributors may be used to\n      endorse or promote products derived from this Software without specific\n      prior written permission.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nCONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE\nSOFTWARE.\n\n==============================================================================\nCopyrights and Licenses for Third Party Software Distributed with LLVM:\n==============================================================================\nThe LLVM software contains code written by third parties.  Such software will\nhave its own individual LICENSE.TXT file in the directory in which it appears.\nThis file will describe the copyrights, license, and restrictions which apply\nto that code.\n\nThe disclaimer of warranty in the University of Illinois Open Source License\napplies to all code in the LLVM Distribution, and nothing in any of the\nother licenses gives permission to use the names of the LLVM Team or the\nUniversity of Illinois to endorse or promote products derived from this\nSoftware.\n\n------------------\n\nFiles: lib/Miniz/* include/miniz/*\n\nCopyright 2013-2014 RAD Game Tools and Valve Software\nCopyright 2010-2014 Rich Geldreich and Tenacious Software LLC\n\nAll Rights Reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n------------------\n\nFiles: lib/Miniz/miniz.c\n\nThis is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org/>\n\n------------------\n\nFiles: lib/Support/* docs/SystemLibrary.rst\n\nWritten by Henry Spencer.  Not derived from licensed software.\n\nPermission is granted to anyone to use this software for any\npurpose on any computer system, and to redistribute it freely,\nsubject to the following restrictions:\n\n1. The author is not responsible for the consequences of use of\n        this software, no matter how awful, even if they arise\n        from defects in it.\n\n2. The origin of this software must not be misrepresented, either\n        by explicit claim or by omission.\n\n3. Altered versions must be plainly marked as such, and must not\n        be misrepresented as being the original software.\n\n------------------\n\nFiles: include/llvm/Support/ConvertUTF.h\n\nCopyright 2001-2004 Unicode, Inc.\n\nDisclaimer\n\nThis source code is provided as is by Unicode, Inc. No claims are\nmade as to fitness for any particular purpose. No warranties of any\nkind are expressed or implied. The recipient agrees to determine\napplicability of information provided. If this file has been\npurchased on magnetic or optical media from Unicode, Inc., the\nsole remedy for any claim will be exchange of defective media\nwithin 90 days of receipt.\n\nLimitations on Rights to Redistribute This Code\n\nUnicode, Inc. hereby grants the right to freely use the information\nsupplied in this file in the creation of products supporting the\nUnicode Standard, and to make copies of this file in any form\nfor internal or external distribution as long as this notice\nremains attached.\n\n------------------\n\nFiles: include/llvm/Support/MD5.h\n\nThis software was written by Alexander Peslyak in 2001.  No copyright is\nclaimed, and the software is hereby placed in the public domain.\nIn case this attempt to disclaim copyright and place the software in the\npublic domain is deemed null and void, then the software is\nCopyright (c) 2001 Alexander Peslyak and it is hereby released to the\ngeneral public under the following terms:\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted.\n\nThere's ABSOLUTELY NO WARRANTY, express or implied.\n\n------------------\n\nFiles: lib/Support/regstrlcpy.c\n\nCopyright (c) 1998 Todd C. Miller <Todd.Miller@courtesan.com>\n\nPermission to use, copy, modify, and distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n\n\n\n------------------\n------------------\n\nTHE FOLLOWING LICENSES ARE FOR BUILD AND TEST DEPENDENCIES ONLY.\n\n------------------\n------------------\n\nFiles: utils/unittest/googletest/*\n\nCopyright 2008, Google Inc.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n    * Neither the name of Google Inc. nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n------------------\n\nFiles: utils/unittest/googlemock/*\n\nCopyright 2008, Google Inc.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n    * Neither the name of Google Inc. nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n------------------\n\nFiles: test/YamlParser/*\n\nCopyright (c) 2006 Kirill Simonov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n------------------\n\nFiles: autoconf/config.guess\n\n                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\nAutoconf Exception\n\nAs a special exception, the Free Software Foundation gives unlimited\npermission to copy, distribute and modify the configure scripts that are the\noutput of Autoconf. You need not follow the terms of the GNU General Public\nLicense when using or distributing such scripts, even though portions of the\ntext of Autoconf appear in them. The GNU General Public License (GPL) does\ngovern all other use of the material that constitutes the Autoconf program.\n\nCertain portions of the Autoconf source text are designed to be copied (in\ncertain cases, depending on the input) into the output of Autoconf. We call\nthese the \"data\" portions. The rest of the Autoconf source text consists of\ncomments plus executable code that decides which of the data portions to\noutput in any given case. We call these comments and executable code the \"non-\ndata\" portions. Autoconf never copies any of the non-data portions into its\noutput.\n\nThis special exception to the GPL applies to versions of Autoconf released by\nthe Free Software Foundation. When you make and distribute a modified version\nof Autoconf, you may extend this special exception to the GPL to apply to your\nmodified version as well, *unless* your modified version has the potential to\ncopy into its output some of the text that was the non-data portion of the\nversion that you started with. (In other words, unless your change moves or\ncopies text from the non-data portions to the data portions.) If your\nmodification has such potential, you must delete any notice of this special\nexception to the GPL from your modified version.\n\n                     END OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "LLVMBuild.txt",
          "type": "blob",
          "size": 0.7177734375,
          "content": ";===- ./LLVMBuild.txt ------------------------------------------*- Conf -*--===;\n;\n;                     The LLVM Compiler Infrastructure\n;\n; This file is distributed under the University of Illinois Open Source\n; License. See LICENSE.TXT for details.\n;\n;===------------------------------------------------------------------------===;\n;\n; This is an LLVMBuild description file for the components in this subdirectory.\n;\n; For more information on the LLVMBuild system, please see:\n;\n;   http://llvm.org/docs/LLVMBuild.html\n;\n;===------------------------------------------------------------------------===;\n\n[common]\nsubdirectories = docs examples lib projects tools utils\n\n[component_0]\ntype = Group\nname = Miscellaneous\nparent = $ROOT\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.3798828125,
          "content": "# DirectX Shader Compiler\n\nThe DirectX Shader Compiler project includes a compiler and related tools used to compile High-Level Shader Language (HLSL) programs into DirectX Intermediate Language (DXIL) representation. Applications that make use of DirectX for graphics, games, and computation can use it to generate shader programs.\n\nFor more information, see the [Wiki](https://github.com/microsoft/DirectXShaderCompiler/wiki).\n\nVisit the [DirectX Landing Page](https://devblogs.microsoft.com/directx/landing-page/) for more resources for DirectX developers.\n\n## Features and Goals\n\nThe starting point of the project is a fork of the [LLVM](http://llvm.org/) and [Clang](http://clang.llvm.org/) projects, modified to accept HLSL and emit a validated container that can be consumed by GPU drivers.\n\nAt the moment, the DirectX HLSL Compiler provides the following components:\n\n- dxc.exe, a command-line tool that can compile HLSL programs for shader model 6.0 or higher\n\n- dxcompiler.dll, a DLL providing a componentized compiler, assembler, disassembler, and validator\n\n- dxilconv.dll, a DLL providing a converter from DXBC (older shader bytecode format)\n\n- various other tools based on the above components\n\nThe Microsoft Windows SDK releases include a supported version of the compiler and validator.\n\nThe goal of the project is to allow the broader community of shader developers to contribute to the language and representation of shader programs, maintaining the principles of compatibility and supportability for the platform. It's currently in active development across two axes: language evolution (with no impact to DXIL representation), and surfacing hardware capabilities (with impact to DXIL, and thus requiring coordination with GPU implementations).\n\n### Pre-built Releases\n\nDevelopment kits containing only the dxc.exe driver app, the dxcompiler.dll, and the dxil.dll signing binary are available [here](https://github.com/microsoft/DirectXShaderCompiler/wiki/Releases), or in the [releases tab](https://github.com/microsoft/DirectXShaderCompiler/releases).\n\n### SPIR-V CodeGen\n\nAs an example of community contribution, this project can also target the [SPIR-V](https://www.khronos.org/registry/spir-v/) intermediate representation. Please see the [doc](docs/SPIR-V.rst) for how HLSL features are mapped to SPIR-V, and the [wiki](https://github.com/microsoft/DirectXShaderCompiler/wiki/SPIR%E2%80%90V-CodeGen) page for how to build, use, and contribute to the SPIR-V CodeGen.\n\n## Building Sources\n\nSee the full documentation for [Building and testing DXC](docs/BuildingAndTestingDXC.rst) for detailed instructions.\n\n## Running Shaders\n\nTo run shaders compiled as DXIL, you will need support from the operating system as well as from the driver for your graphics adapter. Windows 10 Creators Update is the first version to support DXIL shaders. See the [Wiki](https://github.com/microsoft/DirectXShaderCompiler/wiki/Running-Shaders) for information on using experimental support or the software adapter.\n\n### Hardware Support\n\nHardware GPU support for DXIL is provided by the following vendors:\n\n#### NVIDIA\nNVIDIA's r396 drivers (r397.64 and later) provide release mode support for DXIL\n1.1 and Shader Model 6.1 on Win10 1709 and later, and experimental mode support\nfor DXIL 1.2 and Shader Model 6.2 on Win10 1803 and later. These drivers also\nsupport DXR in experimental mode.\n\nDrivers can be downloaded from [geforce.com](https://www.geforce.com/drivers).\n\n#### AMD\nAMD’s driver (Radeon Software Adrenalin Edition 18.4.1 or later) provides release mode support for DXIL 1.1 and Shader Model 6.1. Drivers can be downloaded from [AMD's download site](https://support.amd.com/en-us/download).\n\n### Intel\nIntel's 15.60 drivers (15.60.0.4849 and later) support release mode for DXIL 1.0 and Shader Model 6.0 as well as\nrelease mode for DXIL 1.1 and Shader Model 6.1 (View Instancing support only).\n\nDrivers can be downloaded from the following link [Intel Graphics Drivers](https://downloadcenter.intel.com/product/80939/Graphics-Drivers)\n\nDirect access to 15.60 driver (latest as of this update) is provided below:\n\n[Installer](https://downloadmirror.intel.com/27412/a08/win64_15.60.2.4901.exe)\n\n[Release Notes related to DXIL](https://downloadmirror.intel.com/27266/eng/ReleaseNotes_GFX_15600.4849.pdf)\n\n## Making Changes\n\nTo make contributions, see the [CONTRIBUTING.md](CONTRIBUTING.md) file in this project.\n\n## Documentation\n\nYou can find documentation for this project in the `docs` directory. These contain the original LLVM documentation files, as well as two new files worth nothing:\n\n* [HLSLChanges.rst](docs/HLSLChanges.rst): this is the starting point for how this fork diverges from the original llvm/clang sources\n* [DXIL.rst](docs/DXIL.rst): this file contains the specification for the DXIL format\n* [tools/clang/docs/UsingDxc.rst](tools/clang/docs/UsingDxc.rst): this file contains a user guide for dxc.exe\n\n## License\n\nDirectX Shader Compiler is distributed under the terms of the University of Illinois Open Source License.\n\nSee [LICENSE.txt](LICENSE.TXT) and [ThirdPartyNotices.txt](ThirdPartyNotices.txt) for details.\n\n## Code of Conduct\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.6923828125,
          "content": "<!-- BEGIN MICROSOFT SECURITY.MD V0.0.7 BLOCK -->\n\n## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/Microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).\n\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://aka.ms/opensource/security/definition), please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://aka.ms/opensource/security/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://aka.ms/opensource/security/pgpkey).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://aka.ms/opensource/security/msrc). \n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://aka.ms/opensource/security/bounty) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://aka.ms/opensource/security/cvd).\n\n<!-- END MICROSOFT SECURITY.MD BLOCK -->\n"
        },
        {
          "name": "ThirdPartyNotices.txt",
          "type": "blob",
          "size": 10.9921875,
          "content": "Microsoft/DirectXShaderCompiler\n\nTHIRD-PARTY SOFTWARE NOTICES AND INFORMATION\n\nDo Not Translate or Localize\n\nThis project incorporates components from the projects listed below. The\noriginal copyright notices and the licenses under which Microsoft received\nsuch components are set forth below. Microsoft reserves all rights not\nexpressly granted herein, whether by implication, estoppel or otherwise.\n\n\n* LLVM\n\n==============================================================================\nLLVM Release License\n==============================================================================\nUniversity of Illinois/NCSA\nOpen Source License\n\nCopyright (c) 2003-2015 University of Illinois at Urbana-Champaign.\nAll rights reserved.\n\nDeveloped by:\n\n    LLVM Team\n\n    University of Illinois at Urbana-Champaign\n\n    http://llvm.org\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal with\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\n    * Redistributions of source code must retain the above copyright notice,\n      this list of conditions and the following disclaimers.\n\n    * Redistributions in binary form must reproduce the above copyright notice,\n      this list of conditions and the following disclaimers in the\n      documentation and/or other materials provided with the distribution.\n\n    * Neither the names of the LLVM Team, University of Illinois at\n      Urbana-Champaign, nor the names of its contributors may be used to\n      endorse or promote products derived from this Software without specific\n      prior written permission.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nCONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE\nSOFTWARE.\n\n==============================================================================\nCopyrights and Licenses for Third Party Software Distributed with LLVM:\n==============================================================================\nThe LLVM software contains code written by third parties.  Such software will\nhave its own individual LICENSE.TXT file in the directory in which it appears.\nThis file will describe the copyrights, license, and restrictions which apply\nto that code.\n\nThe disclaimer of warranty in the University of Illinois Open Source License\napplies to all code in the LLVM Distribution, and nothing in any of the\nother licenses gives permission to use the names of the LLVM Team or the\nUniversity of Illinois to endorse or promote products derived from this\nSoftware.\n\nThe following pieces of software have additional or alternate copyrights,\nlicenses, and/or restrictions:\n\nProgram             Directory\n-------             ---------\nOpenBSD regex       llvm/lib/Support/{reg*, COPYRIGHT.regex}\npyyaml tests        llvm/test/YAMLParser/{*.data, LICENSE.TXT}\nmd5 contributions   llvm/lib/Support/MD5.cpp llvm/include/llvm/Support/MD5.h\n\n\n* tools\\clang\n\n==============================================================================\nLLVM Release License\n==============================================================================\nUniversity of Illinois/NCSA\nOpen Source License\n\nCopyright (c) 2007-2015 University of Illinois at Urbana-Champaign.\nAll rights reserved.\n\nDeveloped by:\n\n    LLVM Team\n\n    University of Illinois at Urbana-Champaign\n\n    http://llvm.org\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal with\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\n    * Redistributions of source code must retain the above copyright notice,\n      this list of conditions and the following disclaimers.\n\n    * Redistributions in binary form must reproduce the above copyright notice,\n      this list of conditions and the following disclaimers in the\n      documentation and/or other materials provided with the distribution.\n\n    * Neither the names of the LLVM Team, University of Illinois at\n      Urbana-Champaign, nor the names of its contributors may be used to\n      endorse or promote products derived from this Software without specific\n      prior written permission.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nCONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE\nSOFTWARE.\n\n==============================================================================\nThe LLVM software contains code written by third parties.  Such software will\nhave its own individual LICENSE.TXT file in the directory in which it appears.\nThis file will describe the copyrights, license, and restrictions which apply\nto that code.\n\nThe disclaimer of warranty in the University of Illinois Open Source License\napplies to all code in the LLVM Distribution, and nothing in any of the\nother licenses gives permission to use the names of the LLVM Team or the\nUniversity of Illinois to endorse or promote products derived from this\nSoftware.\n\n\n* test\\YAMLParser\n\nCopyright (c) 2006 Kirill Simonov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n* include\\llvm\\Support\n\nLLVM System Interface Library\n-------------------------------------------------------------------------------\nThe LLVM System Interface Library is licensed under the Illinois Open Source\nLicense and has the following additional copyright:\n\nCopyright (C) 2004 eXtensible Systems, Inc.\n\n* OpenBSD regex\n\n$OpenBSD: COPYRIGHT,v 1.3 2003/06/02 20:18:36 millert Exp $\n\nCopyright 1992, 1993, 1994 Henry Spencer.  All rights reserved.\nThis software is not subject to any license of the American Telephone\nand Telegraph Company or of the Regents of the University of California.\n\nPermission is granted to anyone to use this software for any purpose on\nany computer system, and to alter it and redistribute it, subject\nto the following restrictions:\n\n1. The author is not responsible for the consequences of use of this\n   software, no matter how awful, even if they arise from flaws in it.\n\n2. The origin of this software must not be misrepresented, either by\n   explicit claim or by omission.  Since few users ever read sources,\n   credits must appear in the documentation.\n\n3. Altered versions must be plainly marked as such, and must not be\n   misrepresented as being the original software.  Since few users\n   ever read sources, credits must appear in the documentation.\n\n4. This notice may not be removed or altered.\n\n=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n/*-\n * Copyright (c) 1994\n *\tThe Regents of the University of California.  All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the University nor the names of its contributors\n *    may be used to endorse or promote products derived from this software\n *    without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n *\n *\t@(#)COPYRIGHT\t8.1 (Berkeley) 3/16/94\n */\n\n* lib\\Headers Files\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "autoconf",
          "type": "tree",
          "content": null
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 3.9765625,
          "content": "trigger:\n  - main\n  - release*\n  \nresources:\n- repo: self\n\nstages:\n- stage: Build\n  jobs:\n  - job: Windows\n    timeoutInMinutes: 90\n\n    pool:\n      vmImage: windows-2022\n\n    variables:\n      HLSL_SRC_DIR: '$(Build.SourcesDirectory)'\n      HLSL_BLD_DIR: '$(Agent.BuildDirectory)'\n      platform: x64\n\n    strategy:\n      matrix:\n        VS2022_Release:\n         configuration: Release\n        VS2022_Debug:\n         configuration: Debug\n\n    steps:\n    - checkout: self\n      clean: true\n      submodules: true\n    - script: |\n        call utils\\hct\\hctstart.cmd %HLSL_SRC_DIR% %HLSL_BLD_DIR%\n        call utils\\hct\\hctbuild.cmd -$(platform) -$(configuration) -show-cmake-log -spirvtest\n      displayName: 'Building'\n    - script: |\n        call utils\\hct\\hctstart.cmd %HLSL_SRC_DIR% %HLSL_BLD_DIR%\n        call utils\\hct\\hcttest.cmd -$(configuration) noexec\n      displayName: 'DXIL Tests'\n\n  - job: Nix\n    timeoutInMinutes: 90\n\n    variables:\n      macOS: macOS-latest\n      linux: Ubuntu-latest\n\n    strategy:\n      matrix:\n        Linux_Clang_Release:\n          image: ${{ variables.linux }}\n          configuration: Release\n          CC: clang-18\n          CXX: clang++-18\n          CMAKE_OPTS: -DLLVM_ENABLE_WERROR=On -DLLVM_USE_SANITIZER='Address;Undefined' -DLLVM_ENABLE_LIBCXX=On -DLLVM_USE_LINKER=lld\n          CHECK_ALL_ENV: ASAN_OPTIONS=alloc_dealloc_mismatch=0\n          OS: Linux\n        Linux_Clang_Debug:\n          image: ${{ variables.linux }}\n          configuration: Debug\n          CC: clang\n          CXX: clang++\n          CMAKE_OPTS: -DLLVM_ENABLE_WERROR=On -DLLVM_USE_LINKER=lld\n        Linux_Gcc_Release:\n          image: ${{ variables.linux }}\n          configuration: Release\n          CC: gcc-9\n          CXX: g++-9\n        Linux_Gcc_Debug:\n          image: ${{ variables.linux }}\n          configuration: Debug\n          CC: gcc-9\n          CXX: g++-9\n        MacOS_Clang_Release:\n          image: ${{ variables.macOS }}\n          configuration: Release\n          CC: clang\n          CXX: clang++\n          CMAKE_OPTS: -DLLVM_ENABLE_WERROR=On\n          OS: MacOS\n        MacOS_Clang_Debug:\n          image: ${{ variables.macOS }}\n          configuration: Debug\n          CC: clang\n          CXX: clang++\n          CMAKE_OPTS: -DLLVM_ENABLE_WERROR=On\n\n    pool:\n      vmImage: $(image)\n\n    steps:\n    - checkout: self\n      clean: true\n      submodules: true\n\n    - task: UsePythonVersion@0\n      inputs:\n        versionSpec: '3.x'\n\n    - bash: |\n        sudo apt-get install ninja-build\n        wget https://apt.llvm.org/llvm.sh\n        chmod u+x llvm.sh\n        sudo ./llvm.sh 18\n        sudo apt-get install libc++-18-dev\n      displayName: 'Installing dependencies'\n      condition: eq(variables['image'], variables['linux'])\n\n    - bash: |\n        brew update\n        brew install ninja\n        ulimit -Sn 1024\n      displayName: 'Installing dependencies'\n      condition: eq(variables['image'], variables['macOS'])\n    - bash: |\n        cmake -B build -G Ninja $BUILD_SOURCESDIRECTORY -DLLVM_LIT_ARGS='-v --xunit-xml-output=testresults.xunit.xml' -C $BUILD_SOURCESDIRECTORY/cmake/caches/PredefinedParams.cmake -DSPIRV_BUILD_TESTS=ON -DCMAKE_BUILD_TYPE=$(configuration) -DCMAKE_C_COMPILER=$(CC) -DCMAKE_CXX_COMPILER=$(CXX) $(CMAKE_OPTS)\n      displayName: 'Running Cmake'\n    - bash: |\n        ninja -C build test-depends\n      displayName: 'Building'\n    - bash: |\n        ./build/bin/dxc -T ps_6_0 tools/clang/test/CodeGenSPIRV/passthru-ps.hlsl2spv\n        ./build/bin/dxc -T ps_6_0 -Fo passthru-ps.dxil tools/clang/test/CodeGenSPIRV/passthru-ps.hlsl2spv\n        ./build/bin/dxc -T ps_6_0 -Fo passthru-ps.spv tools/clang/test/CodeGenSPIRV/passthru-ps.hlsl2spv -spirv\n        ls -ld $AGENT_BUILDDIRECTORY\n        ls -ld $BUILD_SOURCESDIRECTORY\n      displayName: 'Smoke tests'\n    - bash: $(CHECK_ALL_ENV) ninja -C build check-all\n      displayName: 'DXC tests'\n    - task: PublishTestResults@2\n      inputs:\n        testResultsFormat: 'JUnit'\n        testResultsFiles: '**/testresults.xunit.xml'\n      condition: succeededOrFailed()\n\n"
        },
        {
          "name": "azure-pipelines",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "external",
          "type": "tree",
          "content": null
        },
        {
          "name": "gcp-pipelines",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "projects",
          "type": "tree",
          "content": null
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "unittests",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}