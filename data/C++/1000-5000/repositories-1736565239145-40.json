{
  "metadata": {
    "timestamp": 1736565239145,
    "page": 40,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "wjakob/nanogui",
      "stars": 4687,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".appveyor.yml",
          "type": "blob",
          "size": 0.5537109375,
          "content": "version: 1.0.{build}\nos: Visual Studio 2015\ntest: off\nclone_folder: C:\\projects\\nanogui\nbranches:\n  only:\n    - master\ninstall:\n  - git submodule update --init --recursive\n  - cinstall: python\nbuild_script:\n  - echo Running cmake...\n  - cd c:\\projects\\nanogui\n  - cmake -G \"Visual Studio 14 2015 Win64\" -DPYTHON_EXECUTABLE:FILEPATH=C:/Python34-x64/python.exe .\n  - set MSBuildLogger=\"C:\\Program Files\\AppVeyor\\BuildAgent\\Appveyor.MSBuildLogger.dll\"\n  - set MSBuildOptions=/v:m /p:Configuration=Release /logger:%MSBuildLogger%\n  - msbuild %MSBuildOptions% nanogui.sln\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.521484375,
          "content": "ext/pybind11*.a\n*.exe\n*.lib\n*.cmake\n.DS_Store\next_build\nnanogui_resources.*\nbuild\nCMakeCache.txt\nCMakeFiles\n.ninja_deps\n.ninja_log\nbuild.ninja\nrules.ninja\nMakefile\nbin2c\nexample[1-9]\nexample_icons\nicons\n*~\nnanogui*.so\nnanogui*.pyd\nlibnanogui.so\nlibnanogui.dylib\n.vscode/\n# html documentation specific\n*.pyc\ndocs/_build\ndocs/_doxygen\ndocs/api\n\n# entypo update generation\n# this is it's own repo: https://github.com/svenevs/nanogui-entypo\n# should not ever be needed again unless there are new\n# icons added :)\nresources/nanogui-entypo\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.3828125,
          "content": "[submodule \"ext/nanovg\"]\n    path = ext/nanovg\n    url = https://github.com/wjakob/nanovg\n[submodule \"ext/glfw\"]\n    path = ext/glfw\n    url = https://github.com/wjakob/glfw\n[submodule \"ext/eigen\"]\n    path = ext/eigen\n    url = https://github.com/eigenteam/eigen-git-mirror.git\n    shallow = true\n[submodule \"ext/pybind\"]\n    path = ext/pybind11\n    url = https://github.com/pybind/pybind11\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.2021484375,
          "content": "language: cpp\ndist: trusty\nsudo: false\n\n# Only build master branch, other branches will have a Pull Request build.\nbranches:\n  only:\n    - master\n\nmatrix:\n  include:\n    - os: linux\n      compiler: gcc-4.8\n      addons:\n        apt:\n          sources:\n            - ubuntu-toolchain-r-test\n            - deadsnakes\n            - kubuntu-backports\n          packages:\n            - g++-4.8\n            - python3.5\n            - python3.5-dev\n            - python3.5-venv\n            - libglu1-mesa-dev\n            - libxxf86vm-dev\n            - libxrandr-dev\n            - libxinerama-dev\n            - libxcursor-dev\n            - libxi-dev\n            - libx11-dev\n            - cmake\n      script:\n        - cmake --version\n        - cmake -DNANOGUI_USE_GLAD=ON -DNANOGUI_PYTHON_VERSION=3.5 -DPYTHON_INCLUDE_DIRS:PATH=/usr/include/python3.5m -DPYTHON_LIBRARY:FILEPATH=/usr/lib/x86_64-linux-gnu/libpython3.5m.so -DCMAKE_CXX_COMPILER=g++-4.8 -DCMAKE_C_COMPILER=gcc-4.8\n        - make -j 2\n    - os: osx\n      compiler: clang\n      script:\n        - cmake --version\n        - cmake -DNANOGUI_PYTHON_VERSION=2.7\n        - make -j 2\n    - os: linux\n      language: docs\n      env: STYLE\n      script:\n      - resources/check-style.sh\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 21.87109375,
          "content": "cmake_minimum_required (VERSION 2.8.12)\n\nif (POLICY CMP0048)\n  # cmake warns if loaded from a min-3.0-required parent dir, so silence the warning:\n  cmake_policy(SET CMP0048 NEW)\nendif()\n\nproject(\"NanoGUI\")\n\nif (POLICY CMP0058)\n  cmake_policy(SET CMP0058 NEW)\nendif()\n\nif (NOT IS_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/ext/glfw/src\")\n  message(FATAL_ERROR \"The NanoGUI dependency repositories (GLFW, etc.) are missing! \"\n    \"You probably did not clone the project with --recursive. It is possible to recover \"\n    \"by calling \\\"git submodule update --init --recursive\\\"\")\nendif()\n\nif (WIN32)\n  set(NANOGUI_USE_GLAD_DEFAULT ON)\nelse()\n  set(NANOGUI_USE_GLAD_DEFAULT OFF)\nendif()\n\noption(NANOGUI_BUILD_EXAMPLE \"Build NanoGUI example application?\" ON)\noption(NANOGUI_BUILD_SHARED  \"Build NanoGUI as a shared library?\" ON)\noption(NANOGUI_BUILD_PYTHON  \"Build a Python plugin for NanoGUI?\" ON)\noption(NANOGUI_USE_GLAD      \"Use Glad OpenGL loader library?\" ${NANOGUI_USE_GLAD_DEFAULT})\noption(NANOGUI_INSTALL       \"Install NanoGUI on `make install`?\" ON)\n\nset(NANOGUI_PYTHON_VERSION \"\" CACHE STRING \"Python version to use for compiling the Python plugin\")\n\n# Required libraries, flags, and include files for compiling and linking against nanogui (all targets)\nset(NANOGUI_EXTRA_LIBS \"\")\nset(NANOGUI_EXTRA_DEFS \"\")\nset(NANOGUI_EXTRA_INCS \"\")\n\n# Platform-dependent files for libnanogui\nset(LIBNANOGUI_EXTRA_SOURCE \"\")\nset(LIBNANOGUI_PYTHON_EXTRA_SOURCE \"\")\n\nif(APPLE AND NANOGUI_BUILD_SHARED)\n  set(CMAKE_MACOSX_RPATH ON)\nendif()\n\ninclude(CheckCXXCompilerFlag)\ninclude(CheckCXXSourceRuns)\n\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  message(STATUS \"Setting build type to 'Release' as none was specified.\")\n  set(CMAKE_BUILD_TYPE Release CACHE STRING \"Choose the type of build.\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS \"Debug\" \"Release\"\n    \"MinSizeRel\" \"RelWithDebInfo\")\nendif()\nstring(TOUPPER \"${CMAKE_BUILD_TYPE}\" U_CMAKE_BUILD_TYPE)\n\nmacro(CHECK_CXX_COMPILER_AND_LINKER_FLAGS _RESULT _CXX_FLAGS _LINKER_FLAGS)\n  set(CMAKE_REQUIRED_FLAGS ${_CXX_FLAGS})\n  set(CMAKE_REQUIRED_LIBRARIES ${_LINKER_FLAGS})\n  set(CMAKE_REQUIRED_QUIET TRUE)\n  check_cxx_source_runs(\"int main(int argc, char **argv) { return 0; }\" ${_RESULT})\n  set(CMAKE_REQUIRED_FLAGS \"\")\n  set(CMAKE_REQUIRED_LIBRARIES \"\")\nendmacro()\n\n# Compile GLFW\nset(GLFW_BUILD_EXAMPLES OFF CACHE BOOL \" \" FORCE)\nset(GLFW_BUILD_TESTS OFF CACHE BOOL \" \" FORCE)\nset(GLFW_BUILD_DOCS OFF CACHE BOOL \" \" FORCE)\nset(GLFW_BUILD_INSTALL OFF CACHE BOOL \" \" FORCE)\nset(GLFW_INSTALL OFF CACHE BOOL \" \" FORCE)\nset(GLFW_USE_CHDIR OFF CACHE BOOL \" \" FORCE)\nset(BUILD_SHARED_LIBS ${NANOGUI_BUILD_SHARED} CACHE BOOL \" \" FORCE)\n\nif (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  # Quench annoying deprecation warnings when compiling GLFW on OSX\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wno-deprecated-declarations\")\nendif()\n\nadd_subdirectory(\"${CMAKE_CURRENT_SOURCE_DIR}/ext/glfw\" \"ext_build/glfw\")\n# Two targets have now been defined: `glfw_objects`, which will be merged into\n# NanoGUI at the end, and `glfw`.  The `glfw` target is the library itself\n# (e.g., libglfw.so), but can be skipped as we do not need to link against it\n# (because we merge `glfw_objects` into NanoGUI).  Skipping is required for\n# XCode, but preferable for all build systems (reduces build artifacts).\nset_target_properties(glfw PROPERTIES EXCLUDE_FROM_ALL 1 EXCLUDE_FROM_DEFAULT_BUILD 1)\n\n# Python support: add NANOGUI_PYTHON flag to all targets\nif (NANOGUI_BUILD_PYTHON)\n  list(APPEND NANOGUI_EXTRA_DEFS -DNANOGUI_PYTHON)\nendif()\n\n# Shared library mode: add dllimport/dllexport flags to all symbols\nif (NANOGUI_BUILD_SHARED)\n  list(APPEND NANOGUI_EXTRA_DEFS -DNANOGUI_SHARED -DNVG_SHARED -DGLAD_GLAPI_EXPORT)\nendif()\n\nif (MSVC)\n  # Disable annoying MSVC warnings (all targets)\n  add_definitions(/D \"_CRT_SECURE_NO_WARNINGS\")\n\n  # Parallel build on MSVC (all targets)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /MP\")\n\n  if (NOT CMAKE_SIZEOF_VOID_P EQUAL 8)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /arch:SSE2\")\n\n    # Disable Eigen vectorization for Windows 32 bit builds (issues with unaligned access segfaults)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /DNANOGUI_EIGEN_DONT_ALIGN\")\n  endif()\nendif()\n\n# Compile with compiler warnings turned on\nif(MSVC)\n  if(CMAKE_CXX_FLAGS MATCHES \"/W[0-4]\")\n    string(REGEX REPLACE \"/W[0-4]\" \"/W4\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n  else()\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /W4\")\n  endif()\nelseif (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" OR CMAKE_CXX_COMPILER_ID MATCHES \"GNU\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -Wextra\")\nendif()\n\nif (CMAKE_CXX_COMPILER_ID MATCHES \"^(GNU|Clang|Intel)$\")\n  CHECK_CXX_COMPILER_FLAG(\"-std=c++14\" HAS_CPP14_FLAG)\n  CHECK_CXX_COMPILER_FLAG(\"-std=c++11\" HAS_CPP11_FLAG)\n\n  if (HAS_CPP14_FLAG)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++14\")\n  elseif (HAS_CPP11_FLAG)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")\n  else()\n    message(FATAL_ERROR \"Unsupported compiler -- pybind11 requires C++11 support!\")\n  endif()\nendif()\n\n# Various optimizations for shared library release builds\nif (NANOGUI_BUILD_SHARED)\n  if (U_CMAKE_BUILD_TYPE MATCHES REL AND CMAKE_CXX_COMPILER_ID MATCHES \"^(GNU|Clang)$\")\n    # Set the default symbol visibility to hidden\n    if (NOT CMAKE_CXX_FLAGS MATCHES \"-fvisibility\")\n      set(CMAKE_CXX_FLAGS \"-fvisibility=hidden ${CMAKE_CXX_FLAGS}\")\n    endif()\n\n    # Enable link time optimization\n    if (NOT CMAKE_CXX_FLAGS MATCHES \"-flto\")\n      if (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n        set(LTO_CXX_FLAGS \"-flto=thin\")\n        set(LTO_LINKER_FLAGS \"-flto=thin\")\n        if (NOT APPLE AND U_CMAKE_BUILD_TYPE MATCHES MINSIZEREL)\n            # Clang Gold plugin does not support -Os\n            set(LTO_CXX_FLAGS \"${LTO_CXX_FLAGS} -O3\")\n        endif()\n      else()\n        set(LTO_CXX_FLAGS \"-flto -fno-fat-lto-objects\")\n        set(LTO_LINKER_FLAGS \"-flto\")\n      endif()\n\n      CHECK_CXX_COMPILER_AND_LINKER_FLAGS(HAS_LTO ${LTO_CXX_FLAGS} ${LTO_LINKER_FLAGS})\n\n      if (HAS_LTO)\n        message(STATUS \"NanoGUI: LTO support enabled.\")\n        set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${LTO_LINKER_FLAGS}\")\n        set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} ${LTO_LINKER_FLAGS}\")\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${LTO_CXX_FLAGS}\")\n        set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${LTO_CXX_FLAGS}\")\n      else()\n        message(STATUS \"NanoGUI: LTO not supported by the compiler.\")\n      endif()\n    endif()\n  elseif(MSVC)\n    set(Configurations RELEASE RELWITHDEBINFO MINSIZEREL)\n    set(LinkTypes EXE SHARED MODULE STATIC)\n    foreach(Configuration ${Configurations})\n      set(\"CMAKE_CXX_FLAGS_${Configuration}\" \"${CMAKE_CXX_FLAGS_${Configuration}} /GL\")\n      foreach(LinkType ${LinkTypes})\n        set(\"CMAKE_${LinkType}_LINKER_FLAGS_${Configuration}\" \"${CMAKE_${LinkType}_LINKER_FLAGS_${Configuration}} /LTCG\")\n      endforeach()\n    endforeach()\n    message(STATUS \"NanoGUI: LTO support enabled.\")\n  endif()\nendif()\n\n# Always use libc++ on Clang\nif (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  CHECK_CXX_COMPILER_AND_LINKER_FLAGS(HAS_LIBCPP \"-stdlib=libc++\" \"-stdlib=libc++\")\n  if (HAS_LIBCPP)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -stdlib=libc++\")\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -stdlib=libc++\")\n    set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -stdlib=libc++\")\n    CHECK_CXX_COMPILER_AND_LINKER_FLAGS(HAS_LIBCPPABI \"-stdlib=libc++\" \"-stdlib=libc++ -lc++abi\")\n    if(HAS_LIBCPPABI)\n      set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -lc++abi\")\n      set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -lc++abi\")\n      message(STATUS \"NanoGUI: using libc++ and libc++abi.\")\n    else()\n      message(STATUS \"NanoGUI: using libc++.\")\n    endif()\n  else()\n    message(STATUS \"NanoGUI: NOT using libc++.\")\n  endif()\nendif()\n\nif (NANOGUI_USE_GLAD)\n  # Build and include GLAD on Windows\n  list(APPEND LIBNANOGUI_EXTRA_SOURCE\n     \"${CMAKE_CURRENT_SOURCE_DIR}/ext/glad/src/glad.c\"\n\t \"${CMAKE_CURRENT_SOURCE_DIR}/ext/glad/include/glad/glad.h\"\n\t \"${CMAKE_CURRENT_SOURCE_DIR}/ext/glad/include/KHR/khrplatform.h\")\n  if (MSVC)\n    set_source_files_properties(\"${CMAKE_CURRENT_SOURCE_DIR}/ext/glad/src/glad.c\"\n      PROPERTIES COMPILE_FLAGS \"/wd4055 \")\n  endif()\n  include_directories(ext/glad/include)\n  list(APPEND NANOGUI_EXTRA_DEFS -DNANOGUI_GLAD)\n  list(APPEND NANOGUI_EXTRA_INCS \"${CMAKE_CURRENT_SOURCE_DIR}/ext/glad/include\")\nendif()\n\nlist(APPEND NANOGUI_EXTRA_INCS\n  \"${CMAKE_CURRENT_SOURCE_DIR}/ext/glfw/include\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/ext/nanovg/src\"\n)\n\nif (NOT NANOGUI_EIGEN_INCLUDE_DIR)\n  set(NANOGUI_EIGEN_INCLUDE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ext/eigen\")\n  list(APPEND NANOGUI_EXTRA_INCS \"${NANOGUI_EIGEN_INCLUDE_DIR}\")\nendif()\n\nif (${CMAKE_SYSTEM_NAME} MATCHES \"BSD\")\n  include_directories(/usr/local/include)\n  link_directories(/usr/local/lib)\n  if(${CMAKE_SYSTEM_NAME} MATCHES \"OpenBSD\")\n    include_directories(/usr/X11R6/include/)\n    link_directories(/usr/X11R6/lib)\n  endif()\nendif()\n\n# Required core libraries on various platforms\nif (WIN32)\n  list(APPEND NANOGUI_EXTRA_LIBS opengl32)\nelseif (APPLE)\n  find_library(cocoa_library Cocoa)\n  find_library(opengl_library OpenGL)\n  find_library(corevideo_library CoreVideo)\n  find_library(iokit_library IOKit)\n  list(APPEND NANOGUI_EXTRA_LIBS ${cocoa_library} ${opengl_library} ${corevideo_library} ${iokit_library})\n  list(APPEND LIBNANOGUI_EXTRA_SOURCE src/darwin.mm)\nelseif(CMAKE_SYSTEM MATCHES \"Linux\" OR CMAKE_SYSTEM_NAME MATCHES \"BSD\")\n  list(APPEND NANOGUI_EXTRA_LIBS GL Xxf86vm Xrandr Xinerama Xcursor Xi X11 pthread )\n  if (NOT CMAKE_SYSTEM_NAME MATCHES \"OpenBSD\")\n    list(APPEND NANOGUI_EXTRA_LIBS rt)\n  endif()\n  if(CMAKE_SYSTEM MATCHES \"Linux\")\n    list(APPEND NANOGUI_EXTRA_LIBS dl)\n  endif()\nendif()\n\ninclude_directories(${NANOGUI_EIGEN_INCLUDE_DIR} ext/glfw/include ext/nanovg/src include ${CMAKE_CURRENT_BINARY_DIR})\n\n\n# Run simple cmake converter to put font files into the data segment\n\n# Glob up resource files\nfile(GLOB resources \"${CMAKE_CURRENT_SOURCE_DIR}/resources/*.ttf\")\n\n# Concatenate resource files into a comma separated string\nstring (REGEX REPLACE \"([^\\\\]|^);\" \"\\\\1,\" resources_string \"${resources}\")\nstring (REGEX REPLACE \"[\\\\](.)\" \"\\\\1\" resources_string \"${resources_string}\")\n\n# Create command line for running bin2c cmake script\nset(bin2c_cmdline\n  -DOUTPUT_C=nanogui_resources.cpp\n  -DOUTPUT_H=nanogui_resources.h\n  \"-DINPUT_FILES=${resources_string}\"\n  -P \"${CMAKE_CURRENT_SOURCE_DIR}/resources/bin2c.cmake\")\n\n# Run bin2c on resource files\nadd_custom_command(\n  OUTPUT nanogui_resources.cpp nanogui_resources.h\n  COMMAND ${CMAKE_COMMAND} ARGS ${bin2c_cmdline}\n  DEPENDS ${resources}\n  COMMENT \"Running bin2c\"\n  PRE_BUILD VERBATIM)\n\n# Needed to generated files\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR})\n\n# Set library type\nif (NANOGUI_BUILD_SHARED)\n  set(NANOGUI_LIBRARY_TYPE \"SHARED\")\nelse()\n  set(NANOGUI_LIBRARY_TYPE \"STATIC\")\nendif()\n\nif (APPLE OR CMAKE_SYSTEM MATCHES \"Linux\")\n  # Include coroutine support for running the mainloop in detached mode\n  add_definitions(-DCORO_SJLJ)\n  include_directories(ext/coro)\n  list(APPEND LIBNANOGUI_PYTHON_EXTRA_SOURCE ext/coro/coro.c)\nendif()\n\nif (APPLE)\n  # Use automatic reference counting for Objective-C portions\n  add_compile_options(-fobjc-arc)\nendif()\n\nadd_definitions(${NANOGUI_EXTRA_DEFS})\n\n# Compile main NanoGUI library\nadd_library(nanogui-obj OBJECT\n  # Merge NanoVG into the NanoGUI library\n  ext/nanovg/src/nanovg.c\n  # Merge GLAD into the NanoGUI library (only if needed)\n  ${LIBNANOGUI_EXTRA_SOURCE}\n  # Fonts etc.\n  nanogui_resources.cpp\n  include/nanogui/glutil.h src/glutil.cpp\n  include/nanogui/common.h src/common.cpp\n  include/nanogui/widget.h src/widget.cpp\n  include/nanogui/theme.h src/theme.cpp\n  include/nanogui/layout.h src/layout.cpp\n  include/nanogui/screen.h src/screen.cpp\n  include/nanogui/label.h src/label.cpp\n  include/nanogui/window.h src/window.cpp\n  include/nanogui/popup.h src/popup.cpp\n  include/nanogui/checkbox.h src/checkbox.cpp\n  include/nanogui/button.h src/button.cpp\n  include/nanogui/popupbutton.h src/popupbutton.cpp\n  include/nanogui/combobox.h src/combobox.cpp\n  include/nanogui/progressbar.h src/progressbar.cpp\n  include/nanogui/slider.h src/slider.cpp\n  include/nanogui/messagedialog.h src/messagedialog.cpp\n  include/nanogui/textbox.h src/textbox.cpp\n  include/nanogui/imagepanel.h src/imagepanel.cpp\n  include/nanogui/imageview.h src/imageview.cpp\n  include/nanogui/vscrollpanel.h src/vscrollpanel.cpp\n  include/nanogui/colorwheel.h src/colorwheel.cpp\n  include/nanogui/colorpicker.h src/colorpicker.cpp\n  include/nanogui/graph.h src/graph.cpp\n  include/nanogui/stackedwidget.h src/stackedwidget.cpp\n  include/nanogui/tabheader.h src/tabheader.cpp\n  include/nanogui/tabwidget.h src/tabwidget.cpp\n  include/nanogui/glcanvas.h src/glcanvas.cpp\n  include/nanogui/formhelper.h\n  include/nanogui/toolbutton.h\n  include/nanogui/opengl.h\n  include/nanogui/nanogui.h\n  include/nanogui/serializer/core.h\n  include/nanogui/serializer/opengl.h\n  include/nanogui/serializer/sparse.h\n  src/serializer.cpp\n)\n\n# XCode has a serious bug where the XCode project produces an invalid target\n# that will not get linked if it consists only of objects from object libraries,\n# it will not generate any products (executables, libraries). The only work\n# around is to add a dummy source file to the library definition. This is an\n# XCode, not a CMake bug. See: https://itk.org/Bug/view.php?id=14044\nif (CMAKE_GENERATOR STREQUAL Xcode)\n  set(XCODE_DUMMY ${CMAKE_CURRENT_BINARY_DIR}/xcode_dummy.cpp)\n  file(WRITE ${XCODE_DUMMY} \"\")\n  add_library(nanogui ${NANOGUI_LIBRARY_TYPE}\n    ${XCODE_DUMMY}\n    $<TARGET_OBJECTS:nanogui-obj>\n    $<TARGET_OBJECTS:glfw_objects>\n  )\nelse()\n  add_library(nanogui ${NANOGUI_LIBRARY_TYPE}\n    $<TARGET_OBJECTS:nanogui-obj>\n    $<TARGET_OBJECTS:glfw_objects>\n  )\nendif()\n\nif (NANOGUI_BUILD_SHARED)\n  set_property(TARGET nanogui-obj PROPERTY POSITION_INDEPENDENT_CODE ON)\nendif()\n\n# Compile/link flags for NanoGUI\nset_property(TARGET nanogui-obj APPEND PROPERTY COMPILE_DEFINITIONS \"NANOGUI_BUILD;NVG_BUILD\")\n\nif (NANOGUI_USE_GLAD AND NANOGUI_BUILD_SHARED)\n  set_property(TARGET nanogui-obj APPEND PROPERTY COMPILE_DEFINITIONS\n    \"GLAD_GLAPI_EXPORT;GLAD_GLAPI_EXPORT_BUILD\")\nendif()\n\nif (NANOGUI_BUILD_SHARED)\n  target_link_libraries(nanogui ${NANOGUI_EXTRA_LIBS})\nendif()\n\nif (NANOGUI_INSTALL)\n  install(TARGETS nanogui\n          LIBRARY DESTINATION lib\n          ARCHIVE DESTINATION lib)\n\n  install(DIRECTORY include/nanogui DESTINATION include\n          FILES_MATCHING PATTERN \"*.h\")\nendif()\n\nif (NANOGUI_BUILD_SHARED)\n  # When GLFW is merged into the NanoGUI library, this flag must be specified\n  set_property(TARGET nanogui-obj APPEND PROPERTY COMPILE_DEFINITIONS \"_GLFW_BUILD_DLL;NVG_SHARED\")\nendif()\n\nif (NANOGUI_BUILD_SHARED AND NOT ${U_CMAKE_BUILD_TYPE} MATCHES DEB)\n  # Platform-specific strip flags for reducing the library size.\n  if (APPLE)\n    # Strip .dylib library on OSX\n    add_custom_command(TARGET nanogui POST_BUILD COMMAND strip -u -r \"$<TARGET_FILE_DIR:nanogui>/$<TARGET_FILE_NAME:nanogui>\")\n  elseif(UNIX)\n    # Strip .so library on Linux\n    add_custom_command(TARGET nanogui POST_BUILD COMMAND strip \"$<TARGET_FILE_DIR:nanogui>/$<TARGET_FILE_NAME:nanogui>\")\n  endif()\nendif()\n\n# Quench warnings while compiling NanoVG\nif (CMAKE_COMPILER_IS_GNUCC)\n  set_source_files_properties(ext/nanovg/src/nanovg.c PROPERTIES COMPILE_FLAGS -Wno-unused-result)\nelseif(MSVC)\n  set_source_files_properties(ext/nanovg/src/nanovg.c PROPERTIES COMPILE_FLAGS \"/wd4005 /wd4456 /wd4457\")\nendif()\n\n# Build example application if desired\nif(NANOGUI_BUILD_EXAMPLE)\n  add_executable(example1      src/example1.cpp)\n  add_executable(example2      src/example2.cpp)\n  add_executable(example3      src/example3.cpp)\n  add_executable(example4      src/example4.cpp)\n  add_executable(example_icons src/example_icons.cpp)\n  target_link_libraries(example1      nanogui ${NANOGUI_EXTRA_LIBS})\n  target_link_libraries(example2      nanogui ${NANOGUI_EXTRA_LIBS})\n  target_link_libraries(example3      nanogui ${NANOGUI_EXTRA_LIBS})\n  target_link_libraries(example4      nanogui ${NANOGUI_EXTRA_LIBS})\n  target_link_libraries(example_icons nanogui ${NANOGUI_EXTRA_LIBS})\n\n  # Copy icons for example application\n  file(COPY resources/icons DESTINATION ${CMAKE_CURRENT_BINARY_DIR})\nendif()\n\nif (NANOGUI_BUILD_PYTHON)\n  # Detect Python\n\n  # Try to autodetect Python (can be overridden manually if needed)\n  list(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/ext/pybind11/tools\")\n  set(Python_ADDITIONAL_VERSIONS 3.7 3.6 3.5 3.4)\n  find_package(PythonLibsNew ${NANOGUI_PYTHON_VERSION})\n  if (NOT PYTHONLIBS_FOUND)\n    # Python not found -- disable the plugin\n    set(NANOGUI_BUILD_PYTHON OFF CACHE BOOL \"Build a Python plugin for NanoGUI?\" FORCE)\n    message(WARNING \"NanoGUI: not building the Python plugin!\")\n  else()\n    message(STATUS \"NanoGUI: building the Python plugin.\")\n  endif()\nendif()\n\nif (NANOGUI_BUILD_PYTHON)\n  # Need PIC code in libnanogui even when compiled as a static library\n  set_target_properties(nanogui-obj PROPERTIES POSITION_INDEPENDENT_CODE ON)\n  set_target_properties(glfw_objects PROPERTIES POSITION_INDEPENDENT_CODE ON)\n\n  include_directories(\"ext/pybind11/include\" ${PYTHON_INCLUDE_DIR})\n  add_library(nanogui-python-obj OBJECT\n    python/main.cpp\n    python/constants_glfw.cpp\n    python/constants_entypo.cpp\n    python/eigen.cpp\n    python/widget.cpp\n    python/layout.cpp\n    python/basics.cpp\n    python/button.cpp\n    python/tabs.cpp\n    python/textbox.cpp\n    python/theme.cpp\n    python/glcanvas.cpp\n    python/formhelper.cpp\n    python/misc.cpp\n    python/glutil.cpp\n    python/nanovg.cpp\n    python/python.h python/py_doc.h\n    ${LIBNANOGUI_PYTHON_EXTRA_SOURCE})\n\n  add_library(nanogui-python SHARED $<TARGET_OBJECTS:nanogui-python-obj>)\n  set_property(TARGET nanogui-python-obj PROPERTY POSITION_INDEPENDENT_CODE ON)\n  set_target_properties(nanogui-python PROPERTIES OUTPUT_NAME \"nanogui\")\n  target_link_libraries(nanogui-python nanogui ${NANOGUI_EXTRA_LIBS})\n\n  # Quench warnings on GCC\n  if (CMAKE_COMPILER_IS_GNUCC)\n    set_property(TARGET nanogui-python-obj APPEND PROPERTY COMPILE_OPTIONS \"-Wno-unused-variable\")\n  endif()\n\n  set_target_properties(nanogui-python PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/python)\n  # The prefix and extension are provided by FindPythonLibsNew.cmake\n  set_target_properties(nanogui-python PROPERTIES PREFIX \"${PYTHON_MODULE_PREFIX}\")\n  set_target_properties(nanogui-python PROPERTIES SUFFIX \"${PYTHON_MODULE_EXTENSION}\")\n\n  if (WIN32)\n    # Set output path\n    set_target_properties(nanogui-python PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_RELEASE \"Release/python\")\n    set_target_properties(nanogui-python PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_DEBUG \"Debug/python\")\n    set_target_properties(nanogui-python PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL \"MinSizeRel/python\")\n    set_target_properties(nanogui-python PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO \"RelWithDebInfo/python\")\n    set_target_properties(nanogui-python PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE \"Release/python\")\n    set_target_properties(nanogui-python PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG \"Debug/python\")\n    set_target_properties(nanogui-python PROPERTIES RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL \"MinSizeRel/python\")\n    set_target_properties(nanogui-python PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO \"RelWithDebInfo/python\")\n\n    # Link against the Python shared library\n    target_link_libraries(nanogui-python ${PYTHON_LIBRARY})\n\n    if (MSVC)\n      # Optimize for size, /bigobj is needed for due to the heavy template metaprogramming in pybind11\n      set_property(TARGET nanogui-python-obj APPEND PROPERTY COMPILE_OPTIONS\n        \"/bigobj\" \"$<$<CONFIG:Release>:/Os>\" \"$<$<CONFIG:MinSizeRel>:/Os>\"\n        \"$<$<CONFIG:RelWithDebInfo>:/Os>\")\n    endif()\n  elseif(UNIX)\n    # Optimize for size\n    if (U_CMAKE_BUILD_TYPE MATCHES REL)\n      set_property(TARGET nanogui-python-obj APPEND PROPERTY COMPILE_OPTIONS \"-Os\")\n    endif()\n\n    # Strip unnecessary sections of the binary on Linux/Mac OS\n    if(APPLE)\n      set_target_properties(nanogui-python PROPERTIES MACOSX_RPATH \".\")\n      set_target_properties(nanogui-python PROPERTIES LINK_FLAGS \"-undefined dynamic_lookup \")\n\n      if (NOT ${U_CMAKE_BUILD_TYPE} MATCHES DEB)\n        add_custom_command(TARGET nanogui-python POST_BUILD COMMAND strip -u -r $<TARGET_FILE:nanogui-python>)\n      endif()\n    else()\n      if (NOT ${U_CMAKE_BUILD_TYPE} MATCHES DEB)\n        add_custom_command(TARGET nanogui-python POST_BUILD COMMAND strip $<TARGET_FILE:nanogui-python>)\n      endif()\n    endif()\n  endif()\n\n  if (NANOGUI_INSTALL)\n    install(TARGETS nanogui-python\n            LIBRARY DESTINATION lib\n            ARCHIVE DESTINATION lib)\n  endif()\nendif()\n\nget_directory_property(NANOGUI_HAS_PARENT PARENT_DIRECTORY)\nif(NANOGUI_HAS_PARENT)\n  # This project is included from somewhere else. Export NANOGUI_EXTRA_LIBS variable\n  set(NANOGUI_EXTRA_LIBS ${NANOGUI_EXTRA_LIBS} PARENT_SCOPE)\n  set(NANOGUI_EXTRA_DEFS ${NANOGUI_EXTRA_DEFS} PARENT_SCOPE)\n  set(NANOGUI_EXTRA_INCS ${NANOGUI_EXTRA_INCS} PARENT_SCOPE)\nelse()\n  # Create documentation for python plugin (optional target for developers)\n\n  string(REPLACE \" \" \";\" MKDOC_CXX_FLAGS_LIST ${CMAKE_CXX_FLAGS})\n  get_property(MKDOC_INCLUDE_DIRECTORIES DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY INCLUDE_DIRECTORIES)\n  get_property(MKDOC_COMPILE_DEFINITIONS DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY COMPILE_DEFINITIONS)\n\n  foreach (value ${MKDOC_INCLUDE_DIRECTORIES})\n    list(APPEND MKDOC_CXX_FLAGS_LIST -I${value})\n  endforeach()\n\n  # Make sure platform specific code gets kept in py_doc.h (specifically __doc_nanogui_chdir_to_bundle_parent)\n  list(APPEND MKDOC_COMPILE_DEFINITIONS \"DOXYGEN_DOCUMENTATION_BUILD\")\n  foreach (value ${MKDOC_COMPILE_DEFINITIONS})\n    list(APPEND MKDOC_CXX_FLAGS_LIST -D${value})\n  endforeach()\n\n  add_custom_target(mkdoc COMMAND\n    python3 ${PROJECT_SOURCE_DIR}/docs/mkdoc_rst.py\n      ${MKDOC_CXX_FLAGS_LIST}\n      ${PROJECT_SOURCE_DIR}/include/nanogui/*.h\n      > ${CMAKE_CURRENT_SOURCE_DIR}/python/py_doc.h)\n\nendif()\n\n# vim: set et ts=2 sw=2 ft=cmake nospell:\n"
        },
        {
          "name": "CONTRIBUTING.rst",
          "type": "blob",
          "size": 2.5029296875,
          "content": "Contributing\n========================================================================================\n\nThank you for your interest in this project! Please refer to the following sections on\nhow to contribute code and bug reports.\n\nReporting bugs\n----------------------------------------------------------------------------------------\n\nAt the moment, this project is run in the spare time of a single person\n(`Wenzel Jakob <http://rgl.epfl.ch/people/wjakob>`_) with very limited resources for\nissue tracker tickets. Thus, before submitting a question or bug report, please take a\nmoment of your time and ensure that your issue isn't already discussed in the project\ndocumentation elsewhere on this site.\n\nFeature requests are generally closed unless they come with a pull request\nthat implements the desired functionality.\n\nAssuming that you have identified a previously unknown problem or an important question,\nit's essential that you submit a self-contained and minimal piece of code that\nreproduces the problem. In other words: no external dependencies, isolate the\nfunction(s) that cause breakage, submit matched and complete C++ or Python snippets\n(depending on how you are using NanoGUI) that can be easily compiled and run on my end.\n\nPull requests\n----------------------------------------------------------------------------------------\nContributions are submitted, reviewed, and accepted using Github pull requests. Please\nrefer to `this article <https://help.github.com/articles/using-pull-requests>`_ for\ndetails and adhere to the following rules to make the process as smooth as possible:\n\n- Make a new branch for every feature you're working on.\n- Make small and clean pull requests that are easy to review but make sure they do add\n  value by themselves.\n- Make sure you have tested any new functionality (e.g. if you made a new Widget).\n- This project has a strong focus on providing general solutions using a minimal amount\n  of code, thus small pull requests are greatly preferred.\n- Read the remainder of this document, adhering to the bindings and documentation\n  requirements.\n- If making a purely documentation PR, please prefix the commit with ``[docs]``\n\n  - E.g. ``[docs] Adding documentation for class X.``\n\n\nSpecific activities for contributions\n----------------------------------------------------------------------------------------\n\nFor a list of specific parts of nanogui which would benefit from outside contributions,\nrefer to the bottom part of `this page <https://github.com/wjakob/nanogui/blob/master/docs/contributing.rst>`_.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 2.138671875,
          "content": "Copyright (c) 2019 Wenzel Jakob <wenzel.jakob@epfl.ch>, All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\n   may be used to endorse or promote products derived from this software\n   without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nYou are under no obligation whatsoever to provide any bug fixes, patches, or\nupgrades to the features, functionality or performance of the source code\n(\"Enhancements\") to anyone; however, if you choose to make your Enhancements\navailable either publicly, or directly to the author of this software, without\nimposing a separate written license agreement for such Enhancements, then you\nhereby grant the following license: a non-exclusive, royalty-free perpetual\nlicense to install, use, modify, prepare derivative works, incorporate into\nother computer software, distribute, and sublicense such enhancements or\nderivative works thereof, in binary and source code form.\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 7.4912109375,
          "content": "NanoGUI\n========================================================================================\n|docs| |travis| |appveyor|\n\n.. |docs| image:: https://readthedocs.org/projects/nanogui/badge/?version=latest\n    :target: http://nanogui.readthedocs.org/en/latest/?badge=latest\n    :alt: Docs\n\n.. |travis| image:: https://travis-ci.org/wjakob/nanogui.svg?branch=master\n   :target: https://travis-ci.org/wjakob/nanogui\n   :alt: Travis Build Status\n\n.. |appveyor| image:: https://ci.appveyor.com/api/projects/status/m8h3uyvdb4ej2i02/branch/master?svg=true\n   :target: https://ci.appveyor.com/project/wjakob/nanogui/branch/master\n   :alt: Appveyor Build Status\n\n.. begin_brief_description\n\nNanoGUI is a minimalistic cross-platform widget library for OpenGL 3.x or higher. It\nsupports automatic layout generation, stateful C++11 lambdas callbacks, a variety of\nuseful widget types and Retina-capable rendering on Apple devices thanks to NanoVG_ by\nMikko Mononen. Python bindings of all functionality are provided using pybind11_.\n\n*Note*: this repository is currently in maintenance-only mode. A new and\nsignificantly modernized/refactored version of NanoGUI with features such as\nMetal/GLES/WebAssembly support is available `here\n<https://github.com/mitsuba-renderer/nanogui>`_.\n\n.. _NanoVG: https://github.com/memononen/NanoVG\n.. _pybind11: https://github.com/wjakob/pybind11\n\n.. end_brief_description\n\n- `Documentation <https://nanogui.readthedocs.io>`_\n\n.. contents:: Contents\n   :local:\n   :backlinks: none\n\nExample screenshot\n----------------------------------------------------------------------------------------\n\n.. image:: https://github.com/wjakob/nanogui/raw/master/resources/screenshot.png\n   :alt: Screenshot of Example 1.\n   :align: center\n\nDescription\n----------------------------------------------------------------------------------------\n\n.. begin_long_description\n\nNanoGUI builds on GLFW_ for cross-platform OpenGL context creation and event handling,\nGLAD_ to use OpenGL 3.x or higher Windows, Eigen_ for basic vector types, and NanoVG_ to\ndraw 2D primitives.\n\nNote that the dependency library NanoVG already includes some basic example code to draw\ngood-looking static widgets; what NanoGUI does is to flesh it out into a complete GUI\ntoolkit with event handling, layout generation, etc.\n\nNanoGUI currently works on Mac OS X (Clang) Linux (GCC or Clang) and Windows (Visual\nStudio ≥ 2015); it requires a recent C++11 capable compiler. All dependencies are\njointly built using a CMake-based build system.\n\n.. _GLFW: http://www.glfw.org/\n.. _GLAD: https://github.com/Dav1dde/glad\n.. _Eigen: http://eigen.tuxfamily.org/index.php?title=Main_Page\n\n.. end_long_description\n\nCreating widgets\n----------------------------------------------------------------------------------------\n\nNanoGUI makes it easy to instantiate widgets, set layout constraints, and\nregister event callbacks using high-level C++11 code. For instance, the\nfollowing two lines from the included example application add a new button to\nan existing window `window` and register an event callback.\n\n.. code-block:: cpp\n\n   Button *b = new Button(window, \"Plain button\");\n   b->setCallback([] { cout << \"pushed!\" << endl; });\n\n\nThe following lines from the example application create the coupled\nslider and text box on the bottom of the second window (see the screenshot).\n\n.. code-block:: cpp\n\n   /* Create an empty panel with a horizontal layout */\n   Widget *panel = new Widget(window);\n   panel->setLayout(new BoxLayout(BoxLayout::Horizontal, BoxLayout::Middle, 0, 20));\n\n   /* Add a slider and set defaults */\n   Slider *slider = new Slider(panel);\n   slider->setValue(0.5f);\n   slider->setFixedWidth(80);\n\n   /* Add a textbox and set defaults */\n   TextBox *textBox = new TextBox(panel);\n   textBox->setFixedSize(Vector2i(60, 25));\n   textBox->setValue(\"50\");\n   textBox->setUnits(\"%\");\n\n   /* Propagate slider changes to the text box */\n   slider->setCallback([textBox](float value) {\n       textBox->setValue(std::to_string((int) (value * 100)));\n   });\n\n\nThe Python version of this same piece of code looks like this:\n\n.. code-block:: py\n\n   # Create an empty panel with a horizontal layout\n   panel = Widget(window)\n   panel.setLayout(BoxLayout(BoxLayout.Horizontal, BoxLayout.Middle, 0, 20))\n\n   # Add a slider and set defaults\n   slider = Slider(panel)\n   slider.setValue(0.5f)\n   slider.setFixedWidth(80)\n\n   # Add a textbox and set defaults\n   textBox = TextBox(panel)\n   textBox.setFixedSize(Vector2i(60, 25))\n   textBox.setValue(\"50\")\n   textBox.setUnits(\"%\")\n\n   # Propagate slider changes to the text box\n   def cb(value):\n       textBox.setValue(\"%i\" % int(value * 100))\n   slider.setCallback(cb)\n\n\"Simple mode\"\n----------------------------------------------------------------------------------------\n\nChristian Schüller contributed a convenience class that makes it possible to\ncreate AntTweakBar-style variable manipulators using just a few lines of code.\nFor instance, the source code below was used to create the following example\napplication.\n\n.. image:: https://github.com/wjakob/nanogui/raw/master/resources/screenshot2.png\n   :alt: Screenshot\n   :align: center\n\n\n.. code-block:: cpp\n\n   /// dvar, bar, strvar, etc. are double/bool/string/.. variables\n\n   FormHelper *gui = new FormHelper(screen);\n   ref<Window> window = gui->addWindow(Eigen::Vector2i(10, 10), \"Form helper example\");\n   gui->addGroup(\"Basic types\");\n   gui->addVariable(\"bool\", bvar);\n   gui->addVariable(\"string\", strvar);\n\n   gui->addGroup(\"Validating fields\");\n   gui->addVariable(\"int\", ivar);\n   gui->addVariable(\"float\", fvar);\n   gui->addVariable(\"double\", dvar);\n\n   gui->addGroup(\"Complex types\");\n   gui->addVariable(\"Enumeration\", enumval, enabled)\n      ->setItems({\"Item 1\", \"Item 2\", \"Item 3\"});\n   gui->addVariable(\"Color\", colval);\n\n   gui->addGroup(\"Other widgets\");\n   gui->addButton(\"A button\", [](){ std::cout << \"Button pressed.\" << std::endl; });\n\n   screen->setVisible(true);\n   screen->performLayout();\n   window->center();\n\nCompiling\n----------------------------------------------------------------------------------------\n\nClone the repository and all dependencies (with ``git clone --recursive``),\nrun CMake to generate Makefiles or CMake/Visual Studio project files, and\nthe rest should just work automatically.\n\nOn Debian/Ubuntu, make sure that you have installed the following packages\n\n.. code-block:: bash\n\n   $ apt-get install cmake xorg-dev libglu1-mesa-dev\n\nTo also get the Python bindings, you'll need to run\n\n.. code-block:: bash\n\n   $ apt-get install python-dev\n\nOn RedHat/Fedora, make sure that you have installed the following packages\n\n.. code-block:: bash\n\n   $ sudo dnf install cmake mesa-libGLU-devel libXi-devel libXcursor-devel libXinerama-devel libXrandr-devel xorg-x11-server-devel\n\nTo also get the Python bindings, you'll need to run\n\n.. code-block:: bash\n\n   $ sudo dnf install python3-devel\n\nLicense\n----------------------------------------------------------------------------------------\n\n.. begin_license\n\nNanoGUI is provided under a BSD-style license that can be found in the LICENSE_\nfile. By using, distributing, or contributing to this project, you agree to the\nterms and conditions of this license.\n\n.. _LICENSE: https://github.com/wjakob/nanogui/blob/master/LICENSE.txt\n\nNanoGUI uses Daniel Bruce's `Entypo+ <http://www.entypo.com/>`_ font for the\nicons used on various widgets.  This work is licensed under a\n`CC BY-SA 4.0 <https://creativecommons.org/licenses/by-sa/4.0/>`_ license.\nCommercial entities using NanoGUI should consult the proper legal counsel for\nhow to best adhere to the attribution clause of the license.\n\n.. end_license\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "ext",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}