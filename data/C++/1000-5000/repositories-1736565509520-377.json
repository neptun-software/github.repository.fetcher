{
  "metadata": {
    "timestamp": 1736565509520,
    "page": 377,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "llvm-mirror/clang",
      "stars": 3045,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".arcconfig",
          "type": "blob",
          "size": 0.0791015625,
          "content": "{\n  \"repository.callsign\" : \"C\",\n  \"conduit_uri\" : \"https://reviews.llvm.org/\"\n}\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.0185546875,
          "content": "BasedOnStyle: LLVM\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 1.1123046875,
          "content": "Checks: '-*,clang-diagnostic-*,llvm-*,misc-*,-misc-unused-parameters,-misc-non-private-member-variables-in-classes,-readability-identifier-naming'\n# Note that the readability-identifier-naming check is disabled, there are too\n# many violations in the codebase and they create too much noise in clang-tidy\n# results.\n# Naming settings are kept for documentation purposes and allowing to run the\n# check if the users would override this file, e.g. via a command-line arg.\nCheckOptions:\n  - key:             readability-identifier-naming.ClassCase\n    value:           CamelCase\n  - key:             readability-identifier-naming.EnumCase\n    value:           CamelCase\n  - key:             readability-identifier-naming.FunctionCase\n    value:           camelBack\n  - key:             readability-identifier-naming.MemberCase\n    value:           CamelCase\n  - key:             readability-identifier-naming.ParameterCase\n    value:           CamelCase\n  - key:             readability-identifier-naming.UnionCase\n    value:           CamelCase\n  - key:             readability-identifier-naming.VariableCase\n    value:           CamelCase\n\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.3564453125,
          "content": "#==============================================================================#\n# This file specifies intentionally untracked files that git should ignore.\n# See: http://www.kernel.org/pub/software/scm/git/docs/gitignore.html\n#==============================================================================#\n\n#==============================================================================#\n# File extensions to be ignored anywhere in the tree.\n#==============================================================================#\n# Temp files created by most text editors.\n*~\n# Merge files created by git.\n*.orig\n# Byte compiled python modules.\n*.pyc\n# vim swap files\n.*.sw?\n.sw?\n\n#==============================================================================#\n# Explicit files to ignore (only matches one).\n#==============================================================================#\ncscope.files\ncscope.out\n/tags\n\n#==============================================================================#\n# Directories to ignore (do not add trailing '/'s, they skip symlinks).\n#==============================================================================#\n# Clang extra user tools, which is tracked independently (clang-tools-extra).\ntools/extra\n# Sphinx build products\ndocs/_build\ndocs/analyzer/_build\n# debug info testsuite\ntest/debuginfo-tests\n\n# VS2017 and VSCode config files.\n.vscode\n.vs\n\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 31.4619140625,
          "content": "cmake_minimum_required(VERSION 3.4.3)\n\nif(POLICY CMP0075)\n  cmake_policy(SET CMP0075 NEW)\nendif()\n\n# If we are not building as a part of LLVM, build Clang as an\n# standalone project, using LLVM as an external library:\nif( CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR )\n  project(Clang)\n\n  # Rely on llvm-config.\n  set(CONFIG_OUTPUT)\n  if(LLVM_CONFIG)\n    set (LLVM_CONFIG_FOUND 1)\n    message(STATUS \"Found LLVM_CONFIG as ${LLVM_CONFIG}\")\n    message(DEPRECATION \"Using llvm-config to detect the LLVM installation is \\\n          deprecated.  The installed cmake files should be used \\\n          instead.  CMake should be able to detect your LLVM install \\\n          automatically, but you can also use LLVM_DIR to specify \\\n          the path containing LLVMConfig.cmake.\")\n    set(CONFIG_COMMAND ${LLVM_CONFIG}\n      \"--assertion-mode\"\n      \"--bindir\"\n      \"--libdir\"\n      \"--includedir\"\n      \"--prefix\"\n      \"--src-root\"\n      \"--cmakedir\")\n    execute_process(\n      COMMAND ${CONFIG_COMMAND}\n      RESULT_VARIABLE HAD_ERROR\n      OUTPUT_VARIABLE CONFIG_OUTPUT\n    )\n    if(NOT HAD_ERROR)\n      string(REGEX REPLACE\n        \"[ \\t]*[\\r\\n]+[ \\t]*\" \";\"\n        CONFIG_OUTPUT ${CONFIG_OUTPUT})\n    else()\n      string(REPLACE \";\" \" \" CONFIG_COMMAND_STR \"${CONFIG_COMMAND}\")\n      message(STATUS \"${CONFIG_COMMAND_STR}\")\n      message(FATAL_ERROR \"llvm-config failed with status ${HAD_ERROR}\")\n    endif()\n\n    list(GET CONFIG_OUTPUT 0 ENABLE_ASSERTIONS)\n    list(GET CONFIG_OUTPUT 1 TOOLS_BINARY_DIR)\n    list(GET CONFIG_OUTPUT 2 LIBRARY_DIR)\n    list(GET CONFIG_OUTPUT 3 INCLUDE_DIR)\n    list(GET CONFIG_OUTPUT 4 LLVM_OBJ_ROOT)\n    list(GET CONFIG_OUTPUT 5 MAIN_SRC_DIR)\n    list(GET CONFIG_OUTPUT 6 LLVM_CONFIG_CMAKE_PATH)\n\n    # Normalize LLVM_CMAKE_PATH. --cmakedir might contain backslashes.\n    # CMake assumes slashes as PATH.\n    file(TO_CMAKE_PATH ${LLVM_CONFIG_CMAKE_PATH} LLVM_CMAKE_PATH)\n  endif()\n\n\n  if(NOT MSVC_IDE)\n    set(LLVM_ENABLE_ASSERTIONS ${ENABLE_ASSERTIONS}\n      CACHE BOOL \"Enable assertions\")\n    # Assertions should follow llvm-config's.\n    mark_as_advanced(LLVM_ENABLE_ASSERTIONS)\n  endif()\n\n  find_package(LLVM REQUIRED HINTS \"${LLVM_CMAKE_PATH}\")\n  list(APPEND CMAKE_MODULE_PATH ${LLVM_DIR})\n\n  # We can't check LLVM_CONFIG here, because find_package(LLVM ...) also sets\n  # LLVM_CONFIG.\n  if (NOT LLVM_CONFIG_FOUND)\n    # Pull values from LLVMConfig.cmake.  We can drop this once the llvm-config\n    # path is removed.\n    set(TOOLS_BINARY_DIR ${LLVM_TOOLS_BINARY_DIR})\n    set(LIBRARY_DIR ${LLVM_LIBRARY_DIR})\n    set(INCLUDE_DIR ${LLVM_INCLUDE_DIR})\n    set(LLVM_OBJ_DIR ${LLVM_BINARY_DIR})\n    # The LLVM_CMAKE_PATH variable is set when doing non-standalone builds and\n    # used in this project, so we need to make sure we set this value.\n    # FIXME: LLVM_CMAKE_DIR comes from LLVMConfig.cmake.  We should rename\n    # LLVM_CMAKE_PATH to LLVM_CMAKE_DIR throughout the project.\n    set(LLVM_CMAKE_PATH ${LLVM_CMAKE_DIR})\n  endif()\n\n  set(LLVM_TOOLS_BINARY_DIR ${TOOLS_BINARY_DIR} CACHE PATH \"Path to llvm/bin\")\n  set(LLVM_LIBRARY_DIR ${LIBRARY_DIR} CACHE PATH \"Path to llvm/lib\")\n  set(LLVM_MAIN_INCLUDE_DIR ${INCLUDE_DIR} CACHE PATH \"Path to llvm/include\")\n  set(LLVM_BINARY_DIR ${LLVM_OBJ_ROOT} CACHE PATH \"Path to LLVM build tree\")\n  set(LLVM_MAIN_SRC_DIR ${MAIN_SRC_DIR} CACHE PATH \"Path to LLVM source tree\")\n\n  find_program(LLVM_TABLEGEN_EXE \"llvm-tblgen\" ${LLVM_TOOLS_BINARY_DIR}\n    NO_DEFAULT_PATH)\n\n  # They are used as destination of target generators.\n  set(LLVM_RUNTIME_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/bin)\n  set(LLVM_LIBRARY_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/lib${LLVM_LIBDIR_SUFFIX})\n  if(WIN32 OR CYGWIN)\n    # DLL platform -- put DLLs into bin.\n    set(LLVM_SHLIB_OUTPUT_INTDIR ${LLVM_RUNTIME_OUTPUT_INTDIR})\n  else()\n    set(LLVM_SHLIB_OUTPUT_INTDIR ${LLVM_LIBRARY_OUTPUT_INTDIR})\n  endif()\n\n  option(LLVM_ENABLE_WARNINGS \"Enable compiler warnings.\" ON)\n  option(LLVM_INSTALL_TOOLCHAIN_ONLY\n    \"Only include toolchain files in the 'install' target.\" OFF)\n\n  option(LLVM_FORCE_USE_OLD_HOST_TOOLCHAIN\n    \"Set to ON to force using an old, unsupported host toolchain.\" OFF)\n  option(CLANG_ENABLE_BOOTSTRAP \"Generate the clang bootstrap target\" OFF)\n  option(LLVM_ENABLE_LIBXML2 \"Use libxml2 if available.\" ON)\n\n  include(AddLLVM)\n  include(TableGen)\n  include(HandleLLVMOptions)\n  include(VersionFromVCS)\n  include(LLVMDistributionSupport)\n\n  set(PACKAGE_VERSION \"${LLVM_PACKAGE_VERSION}\")\n\n  if (NOT DEFINED LLVM_INCLUDE_TESTS)\n    set(LLVM_INCLUDE_TESTS ON)\n  endif()\n\n  include_directories(\"${LLVM_BINARY_DIR}/include\" \"${LLVM_MAIN_INCLUDE_DIR}\")\n  link_directories(\"${LLVM_LIBRARY_DIR}\")\n\n  set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin )\n  set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX} )\n  set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX} )\n\n  if(LLVM_INCLUDE_TESTS)\n    include(FindPythonInterp)\n    if(NOT PYTHONINTERP_FOUND)\n      message(FATAL_ERROR\n\"Unable to find Python interpreter, required for builds and testing.\n\nPlease install Python or specify the PYTHON_EXECUTABLE CMake variable.\")\n    endif()\n\n    if( ${PYTHON_VERSION_STRING} VERSION_LESS 2.7 )\n      message(FATAL_ERROR \"Python 2.7 or newer is required\")\n    endif()\n\n    # Check prebuilt llvm/utils.\n    if(EXISTS ${LLVM_TOOLS_BINARY_DIR}/FileCheck${CMAKE_EXECUTABLE_SUFFIX}\n        AND EXISTS ${LLVM_TOOLS_BINARY_DIR}/count${CMAKE_EXECUTABLE_SUFFIX}\n        AND EXISTS ${LLVM_TOOLS_BINARY_DIR}/not${CMAKE_EXECUTABLE_SUFFIX})\n      set(LLVM_UTILS_PROVIDED ON)\n    endif()\n\n    if(EXISTS ${LLVM_MAIN_SRC_DIR}/utils/lit/lit.py)\n      # Note: path not really used, except for checking if lit was found\n      set(LLVM_LIT ${LLVM_MAIN_SRC_DIR}/utils/lit/lit.py)\n      if(EXISTS ${LLVM_MAIN_SRC_DIR}/utils/llvm-lit)\n        add_subdirectory(${LLVM_MAIN_SRC_DIR}/utils/llvm-lit utils/llvm-lit)\n      endif()\n      if(NOT LLVM_UTILS_PROVIDED)\n        add_subdirectory(${LLVM_MAIN_SRC_DIR}/utils/FileCheck utils/FileCheck)\n        add_subdirectory(${LLVM_MAIN_SRC_DIR}/utils/count utils/count)\n        add_subdirectory(${LLVM_MAIN_SRC_DIR}/utils/not utils/not)\n        set(LLVM_UTILS_PROVIDED ON)\n        set(CLANG_TEST_DEPS FileCheck count not)\n      endif()\n      set(UNITTEST_DIR ${LLVM_MAIN_SRC_DIR}/utils/unittest)\n      if(EXISTS ${UNITTEST_DIR}/googletest/include/gtest/gtest.h\n          AND NOT EXISTS ${LLVM_LIBRARY_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}gtest${CMAKE_STATIC_LIBRARY_SUFFIX}\n          AND EXISTS ${UNITTEST_DIR}/CMakeLists.txt)\n        add_subdirectory(${UNITTEST_DIR} utils/unittest)\n      endif()\n    else()\n      # Seek installed Lit.\n      find_program(LLVM_LIT\n                   NAMES llvm-lit lit.py lit\n                   PATHS \"${LLVM_MAIN_SRC_DIR}/utils/lit\"\n                   DOC \"Path to lit.py\")\n    endif()\n\n    if(LLVM_LIT)\n      # Define the default arguments to use with 'lit', and an option for the user\n      # to override.\n      set(LIT_ARGS_DEFAULT \"-sv\")\n      if (MSVC OR XCODE)\n        set(LIT_ARGS_DEFAULT \"${LIT_ARGS_DEFAULT} --no-progress-bar\")\n      endif()\n      set(LLVM_LIT_ARGS \"${LIT_ARGS_DEFAULT}\" CACHE STRING \"Default options for lit\")\n\n      # On Win32 hosts, provide an option to specify the path to the GnuWin32 tools.\n      if( WIN32 AND NOT CYGWIN )\n        set(LLVM_LIT_TOOLS_DIR \"\" CACHE PATH \"Path to GnuWin32 tools\")\n      endif()\n    else()\n      set(LLVM_INCLUDE_TESTS OFF)\n    endif()\n  endif()\n\n  set( CLANG_BUILT_STANDALONE 1 )\n  set(BACKEND_PACKAGE_STRING \"LLVM ${LLVM_PACKAGE_VERSION}\")\nelse()\n  set(BACKEND_PACKAGE_STRING \"${PACKAGE_STRING}\")\nendif()\n\n# Make sure that our source directory is on the current cmake module path so that\n# we can include cmake files from this directory.\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules\")\n\nif(LLVM_ENABLE_LIBXML2)\n  # Don't look for libxml if we're using MSan, since uninstrumented third party\n  # code may call MSan interceptors like strlen, leading to false positives.\n  if(NOT LLVM_USE_SANITIZER MATCHES \"Memory.*\")\n    set (LIBXML2_FOUND 0)\n    find_package(LibXml2 2.5.3 QUIET)\n    if (LIBXML2_FOUND)\n      set(CLANG_HAVE_LIBXML 1)\n    endif()\n  endif()\nendif()\n\ninclude(CheckIncludeFile)\ncheck_include_file(sys/resource.h CLANG_HAVE_RLIMITS)\n\nset(CLANG_RESOURCE_DIR \"\" CACHE STRING\n  \"Relative directory from the Clang binary to its resource files.\")\n\nset(C_INCLUDE_DIRS \"\" CACHE STRING\n  \"Colon separated list of directories clang will search for headers.\")\n\nset(GCC_INSTALL_PREFIX \"\" CACHE PATH \"Directory where gcc is installed.\" )\nset(DEFAULT_SYSROOT \"\" CACHE PATH\n  \"Default <path> to all compiler invocations for --sysroot=<path>.\" )\n\nset(ENABLE_LINKER_BUILD_ID OFF CACHE BOOL \"pass --build-id to ld\")\n\nset(ENABLE_X86_RELAX_RELOCATIONS OFF CACHE BOOL\n    \"enable x86 relax relocations by default\")\n\nset(ENABLE_EXPERIMENTAL_NEW_PASS_MANAGER FALSE CACHE BOOL\n  \"Enable the experimental new pass manager by default.\")\n\n# TODO: verify the values against LangStandards.def?\nset(CLANG_DEFAULT_STD_C \"\" CACHE STRING\n  \"Default standard to use for C/ObjC code (IDENT from LangStandards.def, empty for platform default)\")\nset(CLANG_DEFAULT_STD_CXX \"\" CACHE STRING\n  \"Default standard to use for C++/ObjC++ code (IDENT from LangStandards.def, empty for platform default)\")\n\nset(CLANG_DEFAULT_LINKER \"\" CACHE STRING\n  \"Default linker to use (linker name or absolute path, empty for platform default)\")\n\nset(CLANG_DEFAULT_CXX_STDLIB \"\" CACHE STRING\n  \"Default C++ stdlib to use (\\\"libstdc++\\\" or \\\"libc++\\\", empty for platform default\")\nif (NOT(CLANG_DEFAULT_CXX_STDLIB STREQUAL \"\" OR\n        CLANG_DEFAULT_CXX_STDLIB STREQUAL \"libstdc++\" OR\n        CLANG_DEFAULT_CXX_STDLIB STREQUAL \"libc++\"))\n  message(WARNING \"Resetting default C++ stdlib to use platform default\")\n  set(CLANG_DEFAULT_CXX_STDLIB \"\" CACHE STRING\n    \"Default C++ stdlib to use (\\\"libstdc++\\\" or \\\"libc++\\\", empty for platform default\" FORCE)\nendif()\n\nset(CLANG_DEFAULT_RTLIB \"\" CACHE STRING\n  \"Default runtime library to use (\\\"libgcc\\\" or \\\"compiler-rt\\\", empty for platform default)\")\nif (NOT(CLANG_DEFAULT_RTLIB STREQUAL \"\" OR\n        CLANG_DEFAULT_RTLIB STREQUAL \"libgcc\" OR\n        CLANG_DEFAULT_RTLIB STREQUAL \"compiler-rt\"))\n  message(WARNING \"Resetting default rtlib to use platform default\")\n  set(CLANG_DEFAULT_RTLIB \"\" CACHE STRING\n    \"Default runtime library to use (\\\"libgcc\\\" or \\\"compiler-rt\\\", empty for platform default)\" FORCE)\nendif()\n\nset(CLANG_DEFAULT_UNWINDLIB \"\" CACHE STRING\n  \"Default unwind library to use (\\\"none\\\" \\\"libgcc\\\" or \\\"libunwind\\\", empty to match runtime library.)\")\nif (CLANG_DEFAULT_UNWINDLIB STREQUAL \"\")\n  if (CLANG_DEFAULT_RTLIB STREQUAL \"libgcc\")\n    set (CLANG_DEFAULT_UNWINDLIB \"libgcc\" CACHE STRING \"\" FORCE)\n  elseif (CLANG_DEFAULT_RTLIBS STREQUAL \"libunwind\")\n    set (CLANG_DEFAULT_UNWINDLIB \"none\" CACHE STRING \"\" FORCE)\n  endif()\nendif()\n\nif (NOT(CLANG_DEFAULT_UNWINDLIB STREQUAL \"\" OR\n        CLANG_DEFAULT_UNWINDLIB STREQUAL \"none\" OR\n        CLANG_DEFAULT_UNWINDLIB STREQUAL \"libgcc\" OR\n        CLANG_DEFAULT_UNWINDLIB STREQUAL \"libunwind\"))\n  message(WARNING \"Resetting default unwindlib to use platform default\")\n  set(CLANG_DEFAULT_UNWINDLIB \"\" CACHE STRING\n    \"Default unwind library to use (\\\"none\\\" \\\"libgcc\\\" or \\\"libunwind\\\", empty for none)\" FORCE)\nendif()\n\nset(CLANG_DEFAULT_OBJCOPY \"objcopy\" CACHE STRING\n  \"Default objcopy executable to use.\")\n\nset(CLANG_DEFAULT_OPENMP_RUNTIME \"libomp\" CACHE STRING\n  \"Default OpenMP runtime used by -fopenmp.\")\n\n# OpenMP offloading requires at least sm_35 because we use shuffle instructions\n# to generate efficient code for reductions and the atomicMax instruction on\n# 64-bit integers in the implementation of conditional lastprivate.\nset(CLANG_OPENMP_NVPTX_DEFAULT_ARCH \"sm_35\" CACHE STRING\n  \"Default architecture for OpenMP offloading to Nvidia GPUs.\")\nstring(REGEX MATCH \"^sm_([0-9]+)$\" MATCHED_ARCH \"${CLANG_OPENMP_NVPTX_DEFAULT_ARCH}\")\nif (NOT DEFINED MATCHED_ARCH OR \"${CMAKE_MATCH_1}\" LESS 35)\n  message(WARNING \"Resetting default architecture for OpenMP offloading to Nvidia GPUs to sm_35\")\n  set(CLANG_OPENMP_NVPTX_DEFAULT_ARCH \"sm_35\" CACHE STRING\n    \"Default architecture for OpenMP offloading to Nvidia GPUs.\" FORCE)\nendif()\n\nset(CLANG_VENDOR ${PACKAGE_VENDOR} CACHE STRING\n  \"Vendor-specific text for showing with version information.\")\n\nif( CLANG_VENDOR )\n  add_definitions( -DCLANG_VENDOR=\"${CLANG_VENDOR} \" )\nendif()\n\nset(CLANG_REPOSITORY_STRING \"\" CACHE STRING\n  \"Vendor-specific text for showing the repository the source is taken from.\")\n\nif(CLANG_REPOSITORY_STRING)\n  add_definitions(-DCLANG_REPOSITORY_STRING=\"${CLANG_REPOSITORY_STRING}\")\nendif()\n\nset(CLANG_VENDOR_UTI \"org.llvm.clang\" CACHE STRING\n  \"Vendor-specific uti.\")\n\nset(CLANG_PYTHON_BINDINGS_VERSIONS \"\" CACHE STRING\n    \"Python versions to install libclang python bindings for\")\n\nset(CLANG_LINK_CLANG_DYLIB ${LLVM_LINK_LLVM_DYLIB} CACHE BOOL\n    \"Link tools against libclang-cpp.so\")\n\nif (NOT LLVM_LINK_LLVM_DYLIB AND CLANG_LINK_CLANG_DYLIB)\n  message(FATAL_ERROR \"Cannot set CLANG_LINK_CLANG_DYLIB=ON when \"\n                      \"LLVM_LINK_LLVM_DYLIB=OFF\")\nendif()\n\n# The libdir suffix must exactly match whatever LLVM's configuration used.\nset(CLANG_LIBDIR_SUFFIX \"${LLVM_LIBDIR_SUFFIX}\")\n\nset(CLANG_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})\nset(CLANG_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR})\n\nif( CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR AND NOT MSVC_IDE )\n  message(FATAL_ERROR \"In-source builds are not allowed. \"\n\"Please create a directory and run cmake \"\n\"from there, passing the path to this source directory as the last argument. \"\n\"This process created the file `CMakeCache.txt' and the directory \"\n\"`CMakeFiles'. Please delete them.\")\nendif()\n\n# If CLANG_VERSION_* is specified, use it, if not use LLVM_VERSION_*.\nif(NOT DEFINED CLANG_VERSION_MAJOR)\n  set(CLANG_VERSION_MAJOR ${LLVM_VERSION_MAJOR})\nendif()\nif(NOT DEFINED CLANG_VERSION_MINOR)\n  set(CLANG_VERSION_MINOR ${LLVM_VERSION_MINOR})\nendif()\nif(NOT DEFINED CLANG_VERSION_PATCHLEVEL)\n  set(CLANG_VERSION_PATCHLEVEL ${LLVM_VERSION_PATCH})\nendif()\n# Unlike PACKAGE_VERSION, CLANG_VERSION does not include LLVM_VERSION_SUFFIX.\nset(CLANG_VERSION \"${CLANG_VERSION_MAJOR}.${CLANG_VERSION_MINOR}.${CLANG_VERSION_PATCHLEVEL}\")\nmessage(STATUS \"Clang version: ${CLANG_VERSION}\")\n\n# Configure the Version.inc file.\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/clang/Basic/Version.inc.in\n  ${CMAKE_CURRENT_BINARY_DIR}/include/clang/Basic/Version.inc)\n\n# Add appropriate flags for GCC\nif (LLVM_COMPILER_IS_GCC_COMPATIBLE)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fno-common -Woverloaded-virtual\")\n  if (NOT \"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fno-strict-aliasing\")\n  endif ()\n\n  # Enable -pedantic for Clang even if it's not enabled for LLVM.\n  if (NOT LLVM_ENABLE_PEDANTIC)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pedantic -Wno-long-long\")\n  endif ()\n\n  check_cxx_compiler_flag(\"-Werror -Wnested-anon-types\" CXX_SUPPORTS_NO_NESTED_ANON_TYPES_FLAG)\n  if( CXX_SUPPORTS_NO_NESTED_ANON_TYPES_FLAG )\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-nested-anon-types\" )\n  endif()\nendif ()\n\n# Determine HOST_LINK_VERSION on Darwin.\nset(HOST_LINK_VERSION)\nif (APPLE)\n  set(LD_V_OUTPUT)\n  execute_process(\n    COMMAND sh -c \"${CMAKE_LINKER} -v 2>&1 | head -1\"\n    RESULT_VARIABLE HAD_ERROR\n    OUTPUT_VARIABLE LD_V_OUTPUT\n  )\n  if (NOT HAD_ERROR)\n    if (\"${LD_V_OUTPUT}\" MATCHES \".*ld64-([0-9.]+).*\")\n      string(REGEX REPLACE \".*ld64-([0-9.]+).*\" \"\\\\1\" HOST_LINK_VERSION ${LD_V_OUTPUT})\n    elseif (\"${LD_V_OUTPUT}\" MATCHES \"[^0-9]*([0-9.]+).*\")\n      string(REGEX REPLACE \"[^0-9]*([0-9.]+).*\" \"\\\\1\" HOST_LINK_VERSION ${LD_V_OUTPUT})\n    endif()\n  else()\n    message(FATAL_ERROR \"${CMAKE_LINKER} failed with status ${HAD_ERROR}\")\n  endif()\nendif()\n\ninclude(CMakeParseArguments)\ninclude(AddClang)\n\nset(CMAKE_INCLUDE_CURRENT_DIR ON)\n\ninclude_directories(BEFORE\n  ${CMAKE_CURRENT_BINARY_DIR}/include\n  ${CMAKE_CURRENT_SOURCE_DIR}/include\n  )\n\nif (NOT LLVM_INSTALL_TOOLCHAIN_ONLY)\n  install(DIRECTORY include/clang include/clang-c\n    DESTINATION include\n    COMPONENT clang-headers\n    FILES_MATCHING\n    PATTERN \"*.def\"\n    PATTERN \"*.h\"\n    PATTERN \"config.h\" EXCLUDE\n    PATTERN \".svn\" EXCLUDE\n    )\n\n  install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/clang\n    DESTINATION include\n    COMPONENT clang-headers\n    FILES_MATCHING\n    PATTERN \"CMakeFiles\" EXCLUDE\n    PATTERN \"*.inc\"\n    PATTERN \"*.h\"\n    )\n\n  # Installing the headers needs to depend on generating any public\n  # tablegen'd headers.\n  add_custom_target(clang-headers DEPENDS clang-tablegen-targets)\n  set_target_properties(clang-headers PROPERTIES FOLDER \"Misc\")\n  if(NOT LLVM_ENABLE_IDE)\n    add_llvm_install_targets(install-clang-headers\n                             DEPENDS clang-headers\n                             COMPONENT clang-headers)\n  endif()\n\n  add_custom_target(bash-autocomplete DEPENDS utils/bash-autocomplete.sh)\n  install(PROGRAMS utils/bash-autocomplete.sh\n          DESTINATION share/clang\n          COMPONENT bash-autocomplete)\n  if(NOT LLVM_ENABLE_IDE)\n    add_llvm_install_targets(install-bash-autocomplete\n                             DEPENDS bash-autocomplete\n                             COMPONENT bash-autocomplete)\n  endif()\nendif()\n\nadd_definitions( -D_GNU_SOURCE )\n\noption(CLANG_BUILD_TOOLS\n  \"Build the Clang tools. If OFF, just generate build targets.\" ON)\n\noption(CLANG_ENABLE_ARCMT \"Build ARCMT.\" ON)\noption(CLANG_ENABLE_STATIC_ANALYZER \"Build static analyzer.\" ON)\n\noption(CLANG_ENABLE_PROTO_FUZZER \"Build Clang protobuf fuzzer.\" OFF)\n\nif(NOT CLANG_ENABLE_STATIC_ANALYZER AND CLANG_ENABLE_ARCMT)\n  message(FATAL_ERROR \"Cannot disable static analyzer while enabling ARCMT or Z3\")\nendif()\n\nif(CLANG_ENABLE_ARCMT)\n  set(CLANG_ENABLE_OBJC_REWRITER ON)\nendif()\n\n# Clang version information\nset(CLANG_EXECUTABLE_VERSION\n    \"${CLANG_VERSION_MAJOR}\" CACHE STRING\n    \"Major version number that will be appended to the clang executable name\")\nset(LIBCLANG_LIBRARY_VERSION\n    \"${CLANG_VERSION_MAJOR}\" CACHE STRING\n    \"Major version number that will be appended to the libclang library\")\nmark_as_advanced(CLANG_EXECUTABLE_VERSION LIBCLANG_LIBRARY_VERSION)\n\noption(CLANG_INCLUDE_TESTS\n       \"Generate build targets for the Clang unit tests.\"\n       ${LLVM_INCLUDE_TESTS})\n\nadd_subdirectory(utils/TableGen)\n\nadd_subdirectory(include)\n\n# All targets below may depend on all tablegen'd files.\nget_property(CLANG_TABLEGEN_TARGETS GLOBAL PROPERTY CLANG_TABLEGEN_TARGETS)\nadd_custom_target(clang-tablegen-targets DEPENDS ${CLANG_TABLEGEN_TARGETS})\nset_target_properties(clang-tablegen-targets PROPERTIES FOLDER \"Misc\")\nlist(APPEND LLVM_COMMON_DEPENDS clang-tablegen-targets)\n\n# Force target to be built as soon as possible. Clang modules builds depend\n# header-wise on it as they ship all headers from the umbrella folders. Building\n# an entire module might include header, which depends on intrinsics_gen.\nif(LLVM_ENABLE_MODULES AND NOT CLANG_BUILT_STANDALONE)\n  list(APPEND LLVM_COMMON_DEPENDS intrinsics_gen)\nendif()\n\nadd_subdirectory(lib)\nadd_subdirectory(tools)\nadd_subdirectory(runtime)\n\noption(CLANG_BUILD_EXAMPLES \"Build CLANG example programs by default.\" OFF)\nadd_subdirectory(examples)\n\nif(APPLE)\n  # this line is needed as a cleanup to ensure that any CMakeCaches with the old\n  # default value get updated to the new default.\n  if(CLANG_ORDER_FILE STREQUAL \"\")\n    unset(CLANG_ORDER_FILE CACHE)\n    unset(CLANG_ORDER_FILE)\n  endif()\n\n\n  set(CLANG_ORDER_FILE ${CMAKE_CURRENT_BINARY_DIR}/clang.order CACHE FILEPATH\n    \"Order file to use when compiling clang in order to improve startup time (Darwin Only - requires ld64).\")\n\n  if(NOT EXISTS ${CLANG_ORDER_FILE})\n    string(FIND \"${CLANG_ORDER_FILE}\" \"${CMAKE_CURRENT_BINARY_DIR}\" PATH_START)\n    if(PATH_START EQUAL 0)\n      file(WRITE ${CLANG_ORDER_FILE} \"\\n\")\n    else()\n      message(FATAL_ERROR \"Specified order file '${CLANG_ORDER_FILE}' does not exist.\")\n    endif()\n  endif()\nendif()\n\n\nif( CLANG_INCLUDE_TESTS )\n  if(EXISTS ${LLVM_MAIN_SRC_DIR}/utils/unittest/googletest/include/gtest/gtest.h)\n    add_subdirectory(unittests)\n    list(APPEND CLANG_TEST_DEPS ClangUnitTests)\n    list(APPEND CLANG_TEST_PARAMS\n      clang_unit_site_config=${CMAKE_CURRENT_BINARY_DIR}/test/Unit/lit.site.cfg\n      )\n  endif()\n  add_subdirectory(test)\n  add_subdirectory(bindings/python/tests)\n\n  if(CLANG_BUILT_STANDALONE)\n    # Add a global check rule now that all subdirectories have been traversed\n    # and we know the total set of lit testsuites.\n    get_property(LLVM_LIT_TESTSUITES GLOBAL PROPERTY LLVM_LIT_TESTSUITES)\n    get_property(LLVM_LIT_PARAMS GLOBAL PROPERTY LLVM_LIT_PARAMS)\n    get_property(LLVM_LIT_DEPENDS GLOBAL PROPERTY LLVM_LIT_DEPENDS)\n    get_property(LLVM_LIT_EXTRA_ARGS GLOBAL PROPERTY LLVM_LIT_EXTRA_ARGS)\n    get_property(LLVM_ADDITIONAL_TEST_TARGETS\n                 GLOBAL PROPERTY LLVM_ADDITIONAL_TEST_TARGETS)\n    add_lit_target(check-all\n      \"Running all regression tests\"\n      ${LLVM_LIT_TESTSUITES}\n      PARAMS ${LLVM_LIT_PARAMS}\n      DEPENDS ${LLVM_LIT_DEPENDS} ${LLVM_ADDITIONAL_TEST_TARGETS}\n      ARGS ${LLVM_LIT_EXTRA_ARGS}\n      )\n  endif()\n  add_subdirectory(utils/perf-training)\nendif()\n\noption(CLANG_INCLUDE_DOCS \"Generate build targets for the Clang docs.\"\n  ${LLVM_INCLUDE_DOCS})\nif( CLANG_INCLUDE_DOCS )\n  add_subdirectory(docs)\nendif()\n\n# Custom target to install all clang libraries.\nadd_custom_target(clang-libraries)\nset_target_properties(clang-libraries PROPERTIES FOLDER \"Misc\")\n\nif(NOT LLVM_ENABLE_IDE)\n  add_llvm_install_targets(install-clang-libraries\n                           DEPENDS clang-libraries\n                           COMPONENT clang-libraries)\nendif()\n\nget_property(CLANG_LIBS GLOBAL PROPERTY CLANG_LIBS)\nif(CLANG_LIBS)\n  list(REMOVE_DUPLICATES CLANG_LIBS)\n  foreach(lib ${CLANG_LIBS})\n    add_dependencies(clang-libraries ${lib})\n    if(NOT LLVM_ENABLE_IDE)\n      add_dependencies(install-clang-libraries install-${lib})\n    endif()\n  endforeach()\nendif()\n\nadd_subdirectory(cmake/modules)\n\nif(CLANG_STAGE)\n  message(STATUS \"Setting current clang stage to: ${CLANG_STAGE}\")\nendif()\n\nif (CLANG_ENABLE_BOOTSTRAP)\n  include(ExternalProject)\n\n  add_custom_target(clang-bootstrap-deps DEPENDS clang)\n\n  if(NOT CLANG_STAGE)\n    set(CLANG_STAGE stage1)\n  endif()\n\n  string(REGEX MATCH \"stage([0-9]*)\" MATCHED_STAGE \"${CLANG_STAGE}\")\n  if(MATCHED_STAGE)\n    if(NOT LLVM_BUILD_INSTRUMENTED)\n      math(EXPR STAGE_NUM \"${CMAKE_MATCH_1} + 1\")\n      set(NEXT_CLANG_STAGE stage${STAGE_NUM})\n    else()\n      set(NEXT_CLANG_STAGE stage${CMAKE_MATCH_1})\n    endif()\n  else()\n    set(NEXT_CLANG_STAGE bootstrap)\n  endif()\n\n  if(BOOTSTRAP_LLVM_BUILD_INSTRUMENTED)\n    set(NEXT_CLANG_STAGE ${NEXT_CLANG_STAGE}-instrumented)\n  endif()\n  message(STATUS \"Setting next clang stage to: ${NEXT_CLANG_STAGE}\")\n\n\n  set(STAMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/${NEXT_CLANG_STAGE}-stamps/)\n  set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/${NEXT_CLANG_STAGE}-bins/)\n\n  if(BOOTSTRAP_LLVM_ENABLE_LLD)\n    add_dependencies(clang-bootstrap-deps lld)\n  endif()\n\n  # If the next stage is LTO we need to depend on LTO and possibly lld or LLVMgold\n  if(BOOTSTRAP_LLVM_ENABLE_LTO OR LLVM_ENABLE_LTO AND NOT LLVM_BUILD_INSTRUMENTED)\n    if(APPLE)\n      add_dependencies(clang-bootstrap-deps LTO)\n      # on Darwin we need to set DARWIN_LTO_LIBRARY so that -flto will work\n      # using the just-built compiler, and we need to override DYLD_LIBRARY_PATH\n      # so that the host object file tools will use the just-built libLTO.\n      # However if System Integrity Protection is enabled the DYLD variables\n      # will be scrubbed from the environment of any base system commands. This\n      # includes /bin/sh, which ninja uses when executing build commands. To\n      # work around the envar being filtered away we pass it in as a CMake\n      # variable, and have LLVM's CMake append the envar to the archiver calls.\n      set(LTO_LIBRARY -DDARWIN_LTO_LIBRARY=${LLVM_SHLIB_OUTPUT_INTDIR}/libLTO.dylib\n        -DDYLD_LIBRARY_PATH=${LLVM_LIBRARY_OUTPUT_INTDIR})\n    elseif(NOT WIN32)\n      add_dependencies(clang-bootstrap-deps llvm-ar llvm-ranlib)\n      if(NOT BOOTSTRAP_LLVM_ENABLE_LLD AND LLVM_BINUTILS_INCDIR)\n        add_dependencies(clang-bootstrap-deps LLVMgold)\n      endif()\n      set(${CLANG_STAGE}_AR -DCMAKE_AR=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-ar)\n      set(${CLANG_STAGE}_RANLIB -DCMAKE_RANLIB=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-ranlib)\n    endif()\n  endif()\n\n  if(CLANG_BOOTSTRAP_EXTRA_DEPS)\n    add_dependencies(clang-bootstrap-deps ${CLANG_BOOTSTRAP_EXTRA_DEPS})\n  endif()\n\n  add_custom_target(${NEXT_CLANG_STAGE}-clear\n    DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/${NEXT_CLANG_STAGE}-cleared\n    )\n  add_custom_command(\n    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${NEXT_CLANG_STAGE}-cleared\n    DEPENDS clang-bootstrap-deps\n    COMMAND ${CMAKE_COMMAND} -E remove_directory ${BINARY_DIR}\n    COMMAND ${CMAKE_COMMAND} -E make_directory ${BINARY_DIR}\n    COMMAND ${CMAKE_COMMAND} -E remove_directory ${STAMP_DIR}\n    COMMAND ${CMAKE_COMMAND} -E make_directory ${STAMP_DIR}\n    COMMENT \"Clobberring ${NEXT_CLANG_STAGE} build and stamp directories\"\n    )\n\n  if(CMAKE_VERBOSE_MAKEFILE)\n    set(verbose -DCMAKE_VERBOSE_MAKEFILE=On)\n  endif()\n\n  set(_BOOTSTRAP_DEFAULT_PASSTHROUGH\n    PACKAGE_VERSION\n    PACKAGE_VENDOR\n    LLVM_VERSION_MAJOR\n    LLVM_VERSION_MINOR\n    LLVM_VERSION_PATCH\n    CLANG_VERSION_MAJOR\n    CLANG_VERSION_MINOR\n    CLANG_VERSION_PATCHLEVEL\n    LLVM_VERSION_SUFFIX\n    LLVM_BINUTILS_INCDIR\n    CLANG_REPOSITORY_STRING\n    CMAKE_C_COMPILER_LAUNCHER\n    CMAKE_CXX_COMPILER_LAUNCHER\n    CMAKE_MAKE_PROGRAM\n    CMAKE_OSX_ARCHITECTURES\n    LLVM_ENABLE_PROJECTS\n    LLVM_ENABLE_RUNTIMES)\n\n  # We don't need to depend on compiler-rt/libcxx if we're building instrumented\n  # because the next stage will use the same compiler used to build this stage.\n  if(NOT LLVM_BUILD_INSTRUMENTED)\n    if(TARGET compiler-rt)\n      add_dependencies(clang-bootstrap-deps compiler-rt)\n    endif()\n    if(TARGET cxx-headers)\n      add_dependencies(clang-bootstrap-deps cxx-headers)\n    endif()\n  endif()\n\n  set(C_COMPILER \"clang\")\n  set(CXX_COMPILER \"clang++\")\n  if(WIN32)\n    set(C_COMPILER \"clang-cl.exe\")\n    set(CXX_COMPILER \"clang-cl.exe\")\n  endif()\n\n  set(COMPILER_OPTIONS\n    -DCMAKE_CXX_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/${CXX_COMPILER}\n    -DCMAKE_C_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/${C_COMPILER}\n    -DCMAKE_ASM_COMPILER=${LLVM_RUNTIME_OUTPUT_INTDIR}/${C_COMPILER}\n    -DCMAKE_ASM_COMPILER_ID=Clang)\n\n  if(BOOTSTRAP_CMAKE_SYSTEM_NAME)\n    set(${CLANG_STAGE}_CONFIG -DLLVM_CONFIG_PATH=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-config)\n    set(${CLANG_STAGE}_TABLEGEN\n      -DLLVM_TABLEGEN=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-tblgen\n      -DCLANG_TABLEGEN=${LLVM_RUNTIME_OUTPUT_INTDIR}/clang-tblgen)\n    if(BOOTSTRAP_CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n      if(BOOTSTRAP_LLVM_ENABLE_LLD)\n        set(${CLANG_STAGE}_LINKER -DCMAKE_LINKER=${LLVM_RUNTIME_OUTPUT_INTDIR}/ld.lld)\n      endif()\n      if(NOT BOOTSTRAP_LLVM_ENABLE_LTO)\n        add_dependencies(clang-bootstrap-deps llvm-ar llvm-ranlib)\n        set(${CLANG_STAGE}_AR -DCMAKE_AR=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-ar)\n        set(${CLANG_STAGE}_RANLIB -DCMAKE_RANLIB=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-ranlib)\n      endif()\n      add_dependencies(clang-bootstrap-deps llvm-objcopy llvm-strip)\n      set(${CLANG_STAGE}_OBJCOPY -DCMAKE_OBJCOPY=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-objcopy)\n      set(${CLANG_STAGE}_STRIP -DCMAKE_STRIP=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-strip)\n    endif()\n  endif()\n\n  if(BOOTSTRAP_LLVM_BUILD_INSTRUMENTED)\n    add_dependencies(clang-bootstrap-deps llvm-profdata)\n    set(PGO_OPT -DLLVM_PROFDATA=${LLVM_RUNTIME_OUTPUT_INTDIR}/llvm-profdata)\n  endif()\n\n  if(LLVM_BUILD_INSTRUMENTED)\n    add_dependencies(clang-bootstrap-deps generate-profdata)\n    set(PGO_OPT -DLLVM_PROFDATA_FILE=${CMAKE_CURRENT_BINARY_DIR}/utils/perf-training/clang.profdata)\n    # Use the current tools for LTO instead of the instrumented ones\n    list(APPEND _BOOTSTRAP_DEFAULT_PASSTHROUGH\n      CMAKE_CXX_COMPILER\n      CMAKE_C_COMPILER\n      CMAKE_ASM_COMPILER\n      CMAKE_AR\n      CMAKE_RANLIB\n      DARWIN_LTO_LIBRARY\n      DYLD_LIBRARY_PATH)\n\n    set(COMPILER_OPTIONS)\n    set(LTO_LIBRARY)\n    set(LTO_AR)\n    set(LTO_RANLIB)\n  endif()\n\n  # Find all variables that start with BOOTSTRAP_ and populate a variable with\n  # them.\n  get_cmake_property(variableNames VARIABLES)\n  foreach(variableName ${variableNames})\n    if(variableName MATCHES \"^BOOTSTRAP_\")\n      string(SUBSTRING ${variableName} 10 -1 varName)\n      string(REPLACE \";\" \"|\" value \"${${variableName}}\")\n      list(APPEND PASSTHROUGH_VARIABLES\n        -D${varName}=${value})\n    endif()\n    if(${variableName} AND variableName MATCHES \"LLVM_EXTERNAL_.*_SOURCE_DIR\")\n      list(APPEND PASSTHROUGH_VARIABLES\n        -D${variableName}=${${variableName}})\n    endif()\n  endforeach()\n\n  # Populate the passthrough variables\n  foreach(variableName ${CLANG_BOOTSTRAP_PASSTHROUGH} ${_BOOTSTRAP_DEFAULT_PASSTHROUGH})\n    if(DEFINED ${variableName})\n      if(\"${${variableName}}\" STREQUAL \"\")\n        set(value \"\")\n      else()\n        string(REPLACE \";\" \"|\" value \"${${variableName}}\")\n      endif()\n      list(APPEND PASSTHROUGH_VARIABLES\n        -D${variableName}=${value})\n    endif()\n  endforeach()\n\n  ExternalProject_Add(${NEXT_CLANG_STAGE}\n    DEPENDS clang-bootstrap-deps\n    PREFIX ${NEXT_CLANG_STAGE}\n    SOURCE_DIR ${CMAKE_SOURCE_DIR}\n    STAMP_DIR ${STAMP_DIR}\n    BINARY_DIR ${BINARY_DIR}\n    EXCLUDE_FROM_ALL 1\n    CMAKE_ARGS\n                # We shouldn't need to set this here, but INSTALL_DIR doesn't\n                # seem to work, so instead I'm passing this through\n                -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}\n                ${CLANG_BOOTSTRAP_CMAKE_ARGS}\n                ${PASSTHROUGH_VARIABLES}\n                 -DCLANG_STAGE=${NEXT_CLANG_STAGE}\n                ${COMPILER_OPTIONS}\n                ${${CLANG_STAGE}_CONFIG}\n                ${${CLANG_STAGE}_TABLEGEN}\n                ${LTO_LIBRARY} ${verbose} ${PGO_OPT}\n                ${${CLANG_STAGE}_LINKER}\n                ${${CLANG_STAGE}_AR}\n                ${${CLANG_STAGE}_RANLIB}\n                ${${CLANG_STAGE}_OBJCOPY}\n                ${${CLANG_STAGE}_STRIP}\n    INSTALL_COMMAND \"\"\n    STEP_TARGETS configure build\n    USES_TERMINAL_CONFIGURE 1\n    USES_TERMINAL_BUILD 1\n    USES_TERMINAL_INSTALL 1\n    LIST_SEPARATOR |\n    )\n\n  # exclude really-install from main target\n  set_target_properties(${NEXT_CLANG_STAGE} PROPERTIES _EP_really-install_EXCLUDE_FROM_MAIN On)\n  ExternalProject_Add_Step(${NEXT_CLANG_STAGE} really-install\n    COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --target install\n    COMMENT \"Performing install step for '${NEXT_CLANG_STAGE}'\"\n    DEPENDEES build\n    USES_TERMINAL 1\n  )\n  ExternalProject_Add_StepTargets(${NEXT_CLANG_STAGE} really-install)\n  add_custom_target(${NEXT_CLANG_STAGE}-install DEPENDS ${NEXT_CLANG_STAGE}-really-install)\n\n  if(NOT CLANG_BOOTSTRAP_TARGETS)\n    set(CLANG_BOOTSTRAP_TARGETS check-llvm check-clang check-all)\n  endif()\n  foreach(target ${CLANG_BOOTSTRAP_TARGETS})\n    # exclude from main target\n    set_target_properties(${NEXT_CLANG_STAGE} PROPERTIES _EP_${target}_EXCLUDE_FROM_MAIN On)\n\n    ExternalProject_Add_Step(${NEXT_CLANG_STAGE} ${target}\n      COMMAND ${CMAKE_COMMAND} --build <BINARY_DIR> --target ${target}\n      COMMENT \"Performing ${target} for '${NEXT_CLANG_STAGE}'\"\n      DEPENDEES configure\n      USES_TERMINAL 1\n    )\n\n    if(target MATCHES \"^stage[0-9]*\")\n      add_custom_target(${target} DEPENDS ${NEXT_CLANG_STAGE}-${target})\n    endif()\n\n    ExternalProject_Add_StepTargets(${NEXT_CLANG_STAGE} ${target})\n  endforeach()\nendif()\n\nif (LLVM_ADD_NATIVE_VISUALIZERS_TO_SOLUTION)\n  add_subdirectory(utils/ClangVisualizers)\nendif()\nadd_subdirectory(utils/hmaptool)\n\nif(CLANG_BUILT_STANDALONE)\n  llvm_distribution_add_targets()\nendif()\n\nconfigure_file(\n  ${CLANG_SOURCE_DIR}/include/clang/Config/config.h.cmake\n  ${CLANG_BINARY_DIR}/include/clang/Config/config.h)\n"
        },
        {
          "name": "CODE_OWNERS.TXT",
          "type": "blob",
          "size": 1.4208984375,
          "content": "This file is a list of the people responsible for ensuring that patches for a\nparticular part of Clang are reviewed, either by themself or by someone else.\nThey are also the gatekeepers for their part of Clang, with the final word on\nwhat goes in or not.\n\nThe list is sorted by surname and formatted to allow easy grepping and\nbeautification by scripts.  The fields are: name (N), email (E), web-address\n(W), PGP key ID and fingerprint (P), description (D), and snail-mail address\n(S).\n\nN: Aaron Ballman\nE: aaron@aaronballman.com\nD: Clang attributes\n\nN: Alexey Bataev\nE: a.bataev@hotmail.com\nD: OpenMP support\n\nN: Chandler Carruth\nE: chandlerc@gmail.com\nE: chandlerc@google.com\nD: CMake, library layering\n\nN: Eric Christopher\nE: echristo@gmail.com\nD: Debug Information, inline assembly\n\nN: Devin Coughlin\nE: dcoughlin@apple.com\nD: Clang Static Analyzer\n\nN: Doug Gregor\nE: dgregor@apple.com\nD: Emeritus owner\n\nN: Reid Kleckner\nE: rnk@google.com\nD: Microsoft C++ ABI compatibility and general Windows support\n\nN: Manuel Klimek\nE: klimek@google.com\nD: AST matchers, LibTooling\n\nN: Anton Korobeynikov\nE: anton@korobeynikov.info\nD: Exception handling, Windows codegen, ARM EABI\n\nN: John McCall\nE: rjmccall@apple.com\nD: Clang LLVM IR generation\n\nN: Brad Smith\nE: brad@comstyle.com\nD: OpenBSD driver\n\nN: Richard Smith\nE: richard@metafoo.co.uk\nD: All parts of Clang not covered by someone else\n\nN: Anastasia Stulova\nE: anastasia.stulova@arm.com\nD: OpenCL support\n"
        },
        {
          "name": "INPUTS",
          "type": "tree",
          "content": null
        },
        {
          "name": "INSTALL.txt",
          "type": "blob",
          "size": 2.1025390625,
          "content": "//===----------------------------------------------------------------------===//\n// Clang Installation Instructions\n//===----------------------------------------------------------------------===//\n\nThese instructions describe how to build and install Clang.\n\n//===----------------------------------------------------------------------===//\n// Step 1: Organization\n//===----------------------------------------------------------------------===//\n\nClang is designed to be built as part of an LLVM build. Assuming that the LLVM\nsource code is located at $LLVM_SRC_ROOT, then the clang source code should be\ninstalled as:\n\n  $LLVM_SRC_ROOT/tools/clang\n\nThe directory is not required to be called clang, but doing so will allow the\nLLVM build system to automatically recognize it and build it along with LLVM.\n\n//===----------------------------------------------------------------------===//\n// Step 2: Configure and Build LLVM\n//===----------------------------------------------------------------------===//\n\nConfigure and build your copy of LLVM (see $LLVM_SRC_ROOT/GettingStarted.html\nfor more information).\n\nAssuming you installed clang at $LLVM_SRC_ROOT/tools/clang then Clang will\nautomatically be built with LLVM. Otherwise, run 'make' in the Clang source\ndirectory to build Clang.\n\n//===----------------------------------------------------------------------===//\n// Step 3: (Optional) Verify Your Build\n//===----------------------------------------------------------------------===//\n\nIt is a good idea to run the Clang tests to make sure your build works\ncorrectly. From inside the Clang build directory, run 'make test' to run the\ntests.\n\n//===----------------------------------------------------------------------===//\n// Step 4: Install Clang\n//===----------------------------------------------------------------------===//\n\nFrom inside the Clang build directory, run 'make install' to install the Clang\ncompiler and header files into the prefix directory selected when LLVM was\nconfigured.\n\nThe Clang compiler is available as 'clang' and 'clang++'. It supports a gcc like\ncommand line interface. See the man page for clang for more information.\n"
        },
        {
          "name": "LICENSE.TXT",
          "type": "blob",
          "size": 14.78515625,
          "content": "==============================================================================\nThe LLVM Project is under the Apache License v2.0 with LLVM Exceptions:\n==============================================================================\n\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n    TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n    1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n    2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n    3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n    4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n    5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n    6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n    7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n    8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n    9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n    END OF TERMS AND CONDITIONS\n\n    APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n    Copyright [yyyy] [name of copyright owner]\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n\n---- LLVM Exceptions to the Apache 2.0 License ----\n\nAs an exception, if, as a result of your compiling your source code, portions\nof this Software are embedded into an Object form of such source code, you\nmay redistribute such embedded portions in such Object form without complying\nwith the conditions of Sections 4(a), 4(b) and 4(d) of the License.\n\nIn addition, if you combine or link compiled forms of this Software with\nsoftware that is licensed under the GPLv2 (\"Combined Software\") and if a\ncourt of competent jurisdiction determines that the patent provision (Section\n3), the indemnity provision (Section 9) or other Section of the License\nconflicts with the conditions of the GPLv2, you may retroactively and\nprospectively choose to deem waived or otherwise exclude such Section(s) of\nthe License, but only in their entirety and only with respect to the Combined\nSoftware.\n\n==============================================================================\nSoftware from third parties included in the LLVM Project:\n==============================================================================\nThe LLVM Project contains third party software which is under different license\nterms. All such code will be identified clearly using at least one of two\nmechanisms:\n1) It will be in a separate directory tree with its own `LICENSE.txt` or\n   `LICENSE` file at the top containing the specific license and restrictions\n   which apply to that software, or\n2) It will contain specific license and restriction terms at the top of every\n   file.\n\n==============================================================================\nLegacy LLVM License (https://llvm.org/docs/DeveloperPolicy.html#legacy):\n==============================================================================\nUniversity of Illinois/NCSA\nOpen Source License\n\nCopyright (c) 2007-2019 University of Illinois at Urbana-Champaign.\nAll rights reserved.\n\nDeveloped by:\n\n    LLVM Team\n\n    University of Illinois at Urbana-Champaign\n\n    http://llvm.org\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal with\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\n    * Redistributions of source code must retain the above copyright notice,\n      this list of conditions and the following disclaimers.\n\n    * Redistributions in binary form must reproduce the above copyright notice,\n      this list of conditions and the following disclaimers in the\n      documentation and/or other materials provided with the distribution.\n\n    * Neither the names of the LLVM Team, University of Illinois at\n      Urbana-Champaign, nor the names of its contributors may be used to\n      endorse or promote products derived from this Software without specific\n      prior written permission.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nCONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE\nSOFTWARE.\n"
        },
        {
          "name": "ModuleInfo.txt",
          "type": "blob",
          "size": 0.09375,
          "content": "# This file provides information for llvm-top\nDepModule: llvm \nConfigCmd:\nConfigTest:\nBuildCmd:\n"
        },
        {
          "name": "NOTES.txt",
          "type": "blob",
          "size": 3.98046875,
          "content": "//===---------------------------------------------------------------------===//\n// Random Notes\n//===---------------------------------------------------------------------===//\n\n//===---------------------------------------------------------------------===//\n\nTo time GCC preprocessing speed without output, use:\n   \"time gcc -MM file\"\nThis is similar to -Eonly.\n\n//===---------------------------------------------------------------------===//\n\n  C++ Template Instantiation benchmark:\n     http://users.rcn.com/abrahams/instantiation_speed/index.html\n\n//===---------------------------------------------------------------------===//\n\nTODO: File Manager Speedup:\n\n We currently do a lot of stat'ing for files that don't exist, particularly\n when lots of -I paths exist (e.g. see the <iostream> example, check for\n failures in stat in FileManager::getFile).  It would be far better to make\n the following changes:\n   1. FileEntry contains a sys::Path instead of a std::string for Name.\n   2. sys::Path contains timestamp and size, lazily computed.  Eliminate from\n      FileEntry.\n   3. File UIDs are created on request, not when files are opened.\n These changes make it possible to efficiently have FileEntry objects for\n files that exist on the file system, but have not been used yet.\n\n Once this is done:\n   1. DirectoryEntry gets a boolean value \"has read entries\".  When false, not\n      all entries in the directory are in the file mgr, when true, they are.\n   2. Instead of stat'ing the file in FileManager::getFile, check to see if\n      the dir has been read.  If so, fail immediately, if not, read the dir,\n      then retry.\n   3. Reading the dir uses the getdirentries syscall, creating a FileEntry\n      for all files found.\n\n//===---------------------------------------------------------------------===//\n// Specifying targets:  -triple and -arch\n//===---------------------------------------------------------------------===//\n\nThe clang supports \"-triple\" and \"-arch\" options. At most one -triple and one\n-arch option may be specified.  Both are optional.\n\nThe \"selection of target\" behavior is defined as follows:\n\n(1) If the user does not specify -triple, we default to the host triple.\n(2) If the user specifies a -arch, that overrides the arch in the host or\n    specified triple.\n\n//===---------------------------------------------------------------------===//\n\n\nverifyInputConstraint and verifyOutputConstraint should not return bool.\n\nInstead we should return something like:\n\nenum VerifyConstraintResult {\n  Valid,\n\n  // Output only\n  OutputOperandConstraintLacksEqualsCharacter,\n  MatchingConstraintNotValidInOutputOperand,\n\n  // Input only\n  InputOperandConstraintContainsEqualsCharacter,\n  MatchingConstraintReferencesInvalidOperandNumber,\n\n  // Both\n  PercentConstraintUsedWithLastOperand\n};\n\n//===---------------------------------------------------------------------===//\n\nBlocks should not capture variables that are only used in dead code.\n\nThe rule that we came up with is that blocks are required to capture\nvariables if they're referenced in evaluated code, even if that code\ndoesn't actually rely on the value of the captured variable.\n\nFor example, this requires a capture:\n  (void) var;\nBut this does not:\n  if (false) puts(var);\n\nSummary of <rdar://problem/9851835>: if we implement this, we should\nwarn about non-POD variables that are referenced but not captured, but\nonly if the non-reachability is not due to macro or template\nmetaprogramming.\n\n//===---------------------------------------------------------------------===//\n\nWe can still apply a modified version of the constructor/destructor\ndelegation optimization in cases of virtual inheritance where:\n  - there is no function-try-block,\n  - the constructor signature is not variadic, and\n  - the parameter variables can safely be copied and repassed\n    to the base constructor because either\n    - they have not had their addresses taken by the vbase initializers or\n    - they were passed indirectly.\n\n//===---------------------------------------------------------------------===//\n"
        },
        {
          "name": "README.txt",
          "type": "blob",
          "size": 1.2783203125,
          "content": "Project moved to: https://github.com/llvm/llvm-project\n\n//===----------------------------------------------------------------------===//\n// C Language Family Front-end\n//===----------------------------------------------------------------------===//\n\nWelcome to Clang.  This is a compiler front-end for the C family of languages\n(C, C++, Objective-C, and Objective-C++) which is built as part of the LLVM\ncompiler infrastructure project.\n\nUnlike many other compiler frontends, Clang is useful for a number of things\nbeyond just compiling code: we intend for Clang to be host to a number of\ndifferent source-level tools.  One example of this is the Clang Static Analyzer.\n\nIf you're interested in more (including how to build Clang) it is best to read\nthe relevant web sites.  Here are some pointers:\n\nInformation on Clang:             http://clang.llvm.org/\nBuilding and using Clang:         http://clang.llvm.org/get_started.html\nClang Static Analyzer:            http://clang-analyzer.llvm.org/\nInformation on the LLVM project:  http://llvm.org/\n\nIf you have questions or comments about Clang, a great place to discuss them is\non the Clang development mailing list:\n  http://lists.llvm.org/mailman/listinfo/cfe-dev\n\nIf you find a bug in Clang, please file it in the LLVM bug tracker:\n  http://llvm.org/bugs/\n"
        },
        {
          "name": "bindings",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "runtime",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "unittests",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "www",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}