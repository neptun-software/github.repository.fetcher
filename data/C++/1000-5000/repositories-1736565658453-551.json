{
  "metadata": {
    "timestamp": 1736565658453,
    "page": 551,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ryanjay0/miles-deep",
      "stars": 2608,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.083984375,
          "content": "*.o\nmiles-deep\n.DS_Store\n.DS_Store?\n._*\n.Spotlight-V100\n.Trashes\nethumbs.db\nThumbs.db\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.0693359375,
          "content": "[submodule \"caffe\"]\n\tpath = caffe\n\turl = https://github.com/BVLC/caffe\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.3232421875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.388671875,
          "content": "\n#Created by Ryan Jay 30.10.16\n#Covered by the GPL. v3 (see included LICENSE)\n\n\nCUDA := -I/usr/local/cuda/include -L/usr/local/cuda/lib64 -lcublas -lcudart -lcurand\n#CUDNN := -lcudnn -DUSE_CUDNN\n#CPU_ONLY := -DCPU_ONLY\n\nappname := miles-deep\nlibcaffe := caffe/distribute/lib/libcaffe.a\n\nCXX := g++\nCXXFLAGS := -std=c++11 -Wno-sign-compare -Wall -pthread -fPIC -DNDEBUG -O2 -DUSE_OPENCV\nINCLUDES := -I/usr/local/include -I. -I./caffe/distribute/include\nLDLIBS := -L/usr/lib -L/usr/local/lib -L/usr/lib/x86_64-linux-gnu\nLDFLAGS := -lm -lglog -lopencv_core -lopencv_highgui -lopencv_imgproc \\\n    -lstdc++ -lhdf5 -lhdf5_hl -lopenblas\nCAFFE := -Wl,--whole-archive $(libcaffe) -Wl,--no-whole-archive \n\nS := /usr/lib/x86_64-linux-gnu\n\n#if you have trouble making, try removing any problematic static lib\n#and replacing it with -lsomelib in the LDFLAGS instead\nSTATIC_LIBS := $S/libgflags.a $S/libboost_thread.a $S/libboost_system.a $S/libprotobuf.a\n\nsrcfiles := *.cpp\ncores := $(shell grep -c ^processor /proc/cpuinfo)\n\nall: $(appname)\n\n$(appname): $(libcaffe) $(srcfiles)\n\t$(CXX) $(CXXFLAGS) -o $(appname) $(srcfiles) $(CAFFE) $(LDFLAGS) $(INCLUDES) \\\n\t    $(CUDA) $(CUDNN) $(CPU_ONLY) $(LDLIBS) $(STATIC_LIBS) \n\nclean: \n\trm -rf $(appname)\n\nsuperclean: \n\trm -rf $(appname)\n\tmake -C caffe clean\n\n$(libcaffe):\n\tcp Makefile.caffe caffe/Makefile.config\n\tmake -C caffe clean\n\tmake -C caffe all -j $(cores)\n\tmake -C caffe distribute\n"
        },
        {
          "name": "Makefile.caffe",
          "type": "blob",
          "size": 4.353515625,
          "content": "## Refer to http://caffe.berkeleyvision.org/installation.html\n# Contributions simplifying and improving our build system are welcome!\n\n# cuDNN acceleration switch (uncomment to build with cuDNN).\n# USE_CUDNN := 1\n\n# CPU-only switch (uncomment to build without GPU support).\n# CPU_ONLY := 1\n\n# uncomment to disable IO dependencies and corresponding data layers\n# USE_OPENCV := 0\nUSE_LEVELDB := 0\nUSE_LMDB := 0\n\n# uncomment to allow MDB_NOLOCK when reading LMDB files (only if necessary)\n#\tYou should not set this flag if you will be reading LMDBs with any\n#\tpossibility of simultaneous read and write\n# ALLOW_LMDB_NOLOCK := 1\n\n# Uncomment if you're using OpenCV 3\n# OPENCV_VERSION := 3\n\n# To customize your choice of compiler, uncomment and set the following.\n# N.B. the default for Linux is g++ and the default for OSX is clang++\n# CUSTOM_CXX := g++\n\n# CUDA directory contains bin/ and lib/ directories that we need.\nCUDA_DIR := /usr/local/cuda\n# On Ubuntu 14.04, if cuda tools are installed via\n# \"sudo apt-get install nvidia-cuda-toolkit\" then use this instead:\n# CUDA_DIR := /usr\n\n# CUDA architecture setting: going with all of them.\n# For CUDA < 6.0, comment the *_50 lines for compatibility.\nCUDA_ARCH := -gencode arch=compute_30,code=sm_30 \\\n\t\t-gencode arch=compute_35,code=sm_35 \\\n\t\t-gencode arch=compute_35,code=compute_35 \\\n\t\t-gencode arch=compute_50,code=sm_50 \\\n\t\t-gencode arch=compute_50,code=compute_50 \\\n\t\t-gencode arch=compute_52,code=sm_52 \\\n\t\t-gencode arch=compute_52,code=compute_52 \\\n\t\t-gencode arch=compute_62,code=sm_62 \\\n\t\t-gencode arch=compute_62,code=compute_62  \n\n# BLAS choice:\n# atlas for ATLAS (default)\n# mkl for MKL\n# open for OpenBlas\n BLAS := open\n# Custom (MKL/ATLAS/OpenBLAS) include and lib directories.\n# Leave commented to accept the defaults for your choice of BLAS\n# (which should work)!\n# BLAS_INCLUDE := /path/to/your/blas\n# BLAS_LIB := /path/to/your/blas\n\n# Homebrew puts openblas in a directory that is not on the standard search path\n# BLAS_INCLUDE := $(shell brew --prefix openblas)/include\n# BLAS_LIB := $(shell brew --prefix openblas)/lib\n\n# This is required only if you will compile the matlab interface.\n# MATLAB directory should contain the mex binary in /bin.\n# MATLAB_DIR := /usr/local\n# MATLAB_DIR := /Applications/MATLAB_R2012b.app\n\n# NOTE: this is required only if you will compile the python interface.\n# We need to be able to find Python.h and numpy/arrayobject.h.\nPYTHON_INCLUDE := /usr/include/python2.7 \\\n\t\t/usr/lib/python2.7/dist-packages/numpy/core/include\n# Anaconda Python distribution is quite popular. Include path:\n# Verify anaconda location, sometimes it's in root.\n# ANACONDA_HOME := $(HOME)/anaconda\n# PYTHON_INCLUDE := $(ANACONDA_HOME)/include \\\n\t\t# $(ANACONDA_HOME)/include/python2.7 \\\n\t\t# $(ANACONDA_HOME)/lib/python2.7/site-packages/numpy/core/include \\\n\n# Uncomment to use Python 3 (default is Python 2)\n# PYTHON_LIBRARIES := boost_python3 python3.5m\n# PYTHON_INCLUDE := /usr/include/python3.5m \\\n#                 /usr/lib/python3.5/dist-packages/numpy/core/include\n\n# We need to be able to find libpythonX.X.so or .dylib.\n PYTHON_LIB := /usr/lib/x86_64-linux-gnu\n# PYTHON_LIB := $(ANACONDA_HOME)/lib\n\n# Homebrew installs numpy in a non standard path (keg only)\n# PYTHON_INCLUDE += $(dir $(shell python -c 'import numpy.core; print(numpy.core.__file__)'))/include\n# PYTHON_LIB += $(shell brew --prefix numpy)/lib\n\n# Uncomment to support layers written in Python (will link against Python libs)\n# WITH_PYTHON_LAYER := 1\n\n# Whatever else you find you need goes here\nINCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial\nLIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib\n\n# If Homebrew is installed at a non standard location (for example your home directory) and you use it for general dependencies\n# INCLUDE_DIRS += $(shell brew --prefix)/include\n# LIBRARY_DIRS += $(shell brew --prefix)/lib\n\n# Uncomment to use `pkg-config` to specify OpenCV library paths.\n# (Usually not necessary -- OpenCV libraries are normally installed in one of the above $LIBRARY_DIRS.)\n# USE_PKG_CONFIG := 1\n\n# N.B. both build and distribute dirs are cleared on `make clean`\nBUILD_DIR := build\nDISTRIBUTE_DIR := distribute\n\n# Uncomment for debugging. Does not work on OSX due to https://github.com/BVLC/caffe/issues/171\n# DEBUG := 1\n\n# The ID of the GPU that 'make runtest' will use to run unit tests.\nTEST_GPUID := 0\n\n# enable pretty build (comment to see full commands)\nQ ?= @\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.8271484375,
          "content": "\n#Miles Deep - AI Porn Video Editor\n\nUsing a deep convolutional neural network with residual connections, Miles Deep quickly classifies each second of a pornographic video into 6 categories based on sexual act with 95% accuracy. Then it uses that classification to automatically edit the video. It can remove all the scenes not containing sexual contact, or edit out just a specific act.\n\nUnlike Yahoo's recently released [NSFW model](https://github.com/yahoo/open_nsfw),  which uses a similar architecture, Miles Deep can tell the difference between nudity and various explicit sexual acts. As far as I know this is the first and only public pornography classification or editing tool.\n\nThis program can also be viewed as a general framework for classifying video with a [Caffe](http://caffe.berkeleyvision.org/) model, using batching and threading in C++. By replacing the weights, model definition, and mean file it can immediately be used to edit videos with other classes without recompiling. See below for an [example](https://github.com/ryanjay0/miles-deep#using-miles-deep-with-your-own-caffe-model).\n\n##Installation\n\n###Ubuntu Installation (16.04)\n\n####Dependencies\n\n`sudo apt install ffmpeg libopenblas-base libhdf5-serial-dev libgoogle-glog-dev libopencv-dev` \n\n#####Additional 14.04 Dependencies\n\n`sudo apt install libgflags-dev`\n\n#####CUDA (Recommended)\nFor GPU usage you need an Nvidia GPU and CUDA 8.0 drivers. Highly recommended; increases speed 10x. This can be installed from a package or by downloading from [NVIDIA directly](https://developer.nvidia.com/cuda-downloads). \n\n\n#####CuDNN (Optional)\n\nAdditional drivers from NVIDIA that make the CUDA GPU support even faster.\n[Download here](https://developer.nvidia.com/cudnn). (Requires registration)\n\n\n\n####Download Miles Deep\n\n* [miles-deep (GPU + CuDNN)](https://github.com/ryanjay0/miles-deep/releases/download/v0.4/miles-deep-xxx.v0.4.tgz)\n* [miles-deep (GPU)](https://github.com/ryanjay0/miles-deep/releases/download/v0.4/miles-deep-gpu.v0.4.tgz)\n* [miles-deep (CPU)](https://github.com/ryanjay0/miles-deep/releases/download/v0.4/miles-deep-cpu.v0.4.tgz)\n\nDownload the [model](https://github.com/ryanjay0/miles-deep/files/587616/model.v0.1.tar.gz) too. Put miles-deep in the same location as the model folder (not in it). \n\n\nVersion | Runtime\n:---:|---:\nGPU + CuDNN | 15s  \nGPU | 19s\nCPU  | 1m 59s \n*on a 24.5 minute video with a GTX 960 4GB\n###Windows and OSX\nI'm working on a version for Windows. Sorry, I don't have a Mac but it should run on OSX with few changes. [Compilations instructions](https://github.com/ryanjay0/miles-deep#compiling) below. I'll accept pull requests related to OSX or other linux compatibility. Windows will likely require anothe repository to link with Caffe for windows.\n\n##Usage\n\nExample:\n```bash\nmiles-deep -t sex_back,sex_front movie.mp4\n``` \n\nThis finds the scenes sex from the back or front and outputs the result\nin `movie.cut.avi`\n\nExample:\n```bash\nmiles-deep -x movie.avi\n```\n\nThis edits out all the non-sexual scenes from `movie.avi`\nand outputs the result in `movie.cut.avi`.\n\nExample:\n```bash\nmiles-deep -b 16 -t cunnilingus -o /cut_movies movie.mkv\n```\n\nThis reduces the batch size to 16 (default 32). \nFinds only scenes with cunnilingus,\noutputs result in `/cut_movies/movie.cut.mkv`.\n\n   **NOTE: Reduce the batch size if you run out of memory**\n\n\n####GPU VRAM used and runtime for various batch sizes:\n\nVRAM(GB)  |  batch\\_size  |    run time\n---:       | ---:           | ---:\n3.5       |       32       |          14.9s\n1.9       |   16           |          15.7s \n1.2            | 8  |            16.9s\n0.8            | 4   |           19.5s\n0.6            | 2   |           24.3s\n0.1           |  1   |           36.2s\n\nTested on an Nvidia GTX 960 with 4GB VRAM and a 24.5 minute video file. At batch\\_size 32 it took approximately 0.6 seconds to process 1 minute of input video or about 36 seconds per hour.\n\nIn addition to batching, Miles Deep also uses threading, which allows the screenshots to be captured and processed while they are classified.\n\n###Auto-Tagging Without Cutting\n\nExample:\n```bash\nmiles-deep movie.mp4 -a\n```\n\nBy popular demand I added this option, which outputs `movie.tag`:\n\n```\nmovie_name, label_1, ..., label_n\ntotal_time, label_1_time, ..., label_n_time\nlabel, start, end, score, coverage\n.\n.\n.\n\n```\n\nThe file contains the cuts for each target, ordered as they occur in the movie. The first lines gives the movie name, the labels, the total movie time, and the total seconds for each label. Then for each cut it list the start time, end time, average score, and coverage. Because of the threshold and the gaps, these cuts may overlap and aren't guaranteed to cover every second.\n\n###Prediction Weights\nHere is an example of the predictions for each second of a video:\n\n![predictions for each second of a video](images/prediction_weights.jpg?raw=true)\n\n\n###Using Miles Deep with your own Caffe model\n####Cat finding\n\nHere's an example of how to use the program with your own model (or a pre-trained one):\n\n\n```bash\nMODEL_PATH=/models/bvlc_reference_caffenet/ \n\nmiles-deep -t n02123045 \\\n  -p caffe/${MODEL_PATH}/deploy.prototxt \\\n  -m caffe/data/ilsvrc12/imagenet_mean.binaryproto \\\n  -w caffe/${MODEL_PATH/bvlc_reference_caffenet.caffemodel \\\n  -l caffe/data/ilsvrc12/synsets.txt \\\n  movie.mp4\n```\nThis finds the scenes in `movie.mp4` with a tabby cat and returns `movie.cut.mp4` with only those parts. n02123045 is the category for tabby cats. You can find the category names in `caffe/data/ilsvrc12/synset_words.txt`. You can use a pre-trained model from the [model zoo](https://github.com/BVLC/caffe/wiki/Model-Zoo) instead.\n\n*Note: This example is just to show the syntax. It performs somewhat poorly in my experience, likely due to the 1000 classes. This program is ideally suited to models with a smaller number of categories with an 'other' category too.*\n\n\n##Model\n\nThe model is a CNN with [residual connections](https://arxiv.org/abs/1512.03385) created by [pynetbuilder](https://github.com/jay-mahadeokar/pynetbuilder/tree/master/models/imagenet). These models are pre-trained on ImageNet. Then the final layer is changed to fit the new number of classes and [fine-tuned](http://caffe.berkeleyvision.org/gathered/examples/finetune_flickr_style.html).\n\nAs [Karpathy et al](http://cs.stanford.edu/people/karpathy/deepvideo/) suggest, I train the weights for the top-3 layers not just the top-layer, which improves the accuracy slightly:\n\nRetunedLayers  |  Accuracy\n---|---\nTop3 |            94.6\nTop1         |    93.9\n\n\nBelow are the results for fine-tuning the top3 layers with different models,\ntested on 2500 images, taken from different videos than the training set.\n\nModel |   Accuracy(%)   |  Flops(millions) | Params(millions) \n--- | ---: | ---: | ---:\nresnet50      |   80.0     |   3858 |    25.5\nresnet50\\_1by2  | 94.6  |      1070  |   6.9\nresnet77\\_1by2  | 95.7  |      1561  |   9.4 \n\nThe training loss and test accuracy:\n\n![fine-tuning training loss](images/train_loss.png?raw=true) \n![test accuracy vs step](images/accuracy.png?raw=true)\n\nOf all the models tested, the resnet50\\_1by2 provides the best balance between\nruntime, memory, and accuracy. I believe the full resnet50's low accuracy is due \nto overfitting because it has more parameters, or perhaps the training could\nbe done differently.\n\nThe results above were obtained with mirroring but not cropping. Using cropping slightly improves the results on the resnet50\\_1by2 to **95.2%**, therefore it is used as the final model.\n\n[Fine-tuning](https://www.tensorflow.org/versions/r0.9/how_tos/image_retraining/index.html) the Inception V3 model with Tensorflow also only achieved 80% accuracy. However, that is with a 299x299 image size instead of 224x224 with no mirroring or cropping, so the result is not directly comparable. Overfitting may be a problem with this model too.\n\n###Editing the Movie\n\nGiven the predictions for a frame each second, it takes the argmax of those predictions and creates cut blocks of the movie where argmax equals the target and the score is greater than some threshold. The gap size, the minimum fraction of frames matching the target in each block, and the score threshold are all adjustable.\n\nFFmpeg supports a lot of codecs including: mp4, avi, flv, mkv, wmv, and many more.\n\n###Single Frame vs Multiple Frames\n\nThis model doesn't make use of any temporal information since it treats each image separately. *Karpathy et al* showed that other models which use multiple frames don't perform much better. They have difficulty dealing with camera movement. It would still be interesting to compare their slow fusion model with the results here.\n\n##Data\n\nThe training database consists of 36,000 (and 2500 test images) images divided into 6 categories: \n\n0. blowjob\\_handjob\n1. cunnilingus\n2. other\n3. sex\\_back\n4. sex\\_front\n6. titfuck\n\nThe images are resized to 256x256 with horizontal mirroring and random cropping\nto 224x224 for data augmentation. A lot of the experiments were done without cropping but it slightly improves the results for the resnet50\\_1by2.\n\nFor now the dataset is limited to two heterosexual performers. But given the success of this method, I plan to expand the number of categories. Due to the nature of the material, I will not be releasing the database itself; only the trained model.\n\n####Sex back and front\n\nSex front and back are defined by the position of the camera, instead of the orientation of the performers. If the female's body is facing the camera so the front of the vagina is shown, it's sex front. If the female's rear is shown instead, it's sex back. This creates two visually distinct classes. No distinction is made between vaginal and anal intercourse; sex back or sex front could include either.\n\n##Compiling\n\n* Clone the git repository which includes Caffe as an external dependency. \n\n* Follow the step-by-step [instructions](http://caffe.berkeleyvision.org/installation.html) to install the Caffe dependencies for your plaform. [Ubuntu instructions](http://caffe.berkeleyvision.org/install_apt.html). The default is OpenBlas. Don't worry about editing the Makefile.config or making Caffe. On Ubuntu 16.04 try this in addition to the dependencies at the top:\n\n```bash\nsudo apt install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler\nsudo apt install --no-install-recommends libboost-all-dev\nsudo apt install libopenblas-dev python-numpy\n\n#Add symbolic links for hdf5 library\n#(not necessary on LinuxMint 18)\n\ncd /usr/lib/x86_64-linux-gnu\nsudo ln -s libhdf5_serial.so libhdf5.so\nsudo ln -s libhdf5_serial_hl.so libhdf5_hl.so\n\n```\n\n* The default is GPU without CuDNN. If you want something else edit `Makefile` and `Makefile.caffe`. Comment out or uncomment the proper lines in both files.\n\n* `make` \n\n#####License\nCode licensed under GPLv3, including the trained model. Caffe is licensed under BSD 2. \n\n####Contact\n\nIf you have problems, suggestions, or thoughts open an issue or send me email nipplerdeeplearning at gmail. \n \n"
        },
        {
          "name": "caffe",
          "type": "commit",
          "content": null
        },
        {
          "name": "cut_movie.cpp",
          "type": "blob",
          "size": 10.533203125,
          "content": "/*\n * Created by Ryan Jay 30.10.16\n * Covered by the GPL. v3 (see included LICENSE)\n */\n\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <stdlib.h>\n#include <vector>\n#include <algorithm>\n#include <fstream>\n#include <string>\n\n#include \"cut_movie.hpp\"\n#include \"util.hpp\"\n\nusing namespace std;\n\n//find the cuts using the winners and their values (returns the cut_list)\nint findTheCuts(int score_list_size, const vector<int>& winners,const vector<float>& vals, \n        const vector<int>& target_on, string target, int min_cut, int max_gap, float threshold, float min_coverage,\n        CutList* cut_list)\n{\n\n    int cut_start = -1;\n    int gap = 0;\n    int win_sum = 0;\n    float val_sum = 0.0;\n    int total_size = 0;\n\n    for( int i=0; i<score_list_size; i++)\n    {\n        if( cut_start >= 0 )\n        {\n            if( target_on[winners[i]] )\n            {\n                win_sum++;\n                val_sum += vals[i];\n            }\n            \n            if( !target_on[winners[i]] || vals[i] < threshold || i == score_list_size-1 )\n            {\n                if(i < score_list_size-1) gap++;\n\n                if( gap > max_gap || i == score_list_size-1 )\n                {\n                    if( cut_start < i - gap - min_cut )\n                    {\n                        //output cut\n                        int win_size = (i - gap) - cut_start + 1;\n                        float score_avg = val_sum / (float)win_sum;\n                        float coverage = (float)win_sum / (float)win_size;\n\n                        if(coverage >= min_coverage)\n                        {\n                            cout << PrettyTime(cut_start) << \" - \" << PrettyTime(i - gap)\n                                << \": size= \" << PrettyTime(win_size) << \" coverage= \" << coverage \n                                << \" score= \" << score_avg << '\\n';\n                            total_size += win_size;\n                            Cut cut;\n                            cut.s = cut_start;\n                            cut.e = i-gap;\n                            cut.score = score_avg;\n                            cut.coverage = coverage;\n                            cut.label = target;\n                            cut_list->push_back(cut);\n                        }\n                    }\n                    cut_start = -1;\n                    gap = 0;\n                    val_sum = 0.0;\n                    win_sum = 0;\n                }\n            }\n            else\n            {\n                gap = 0;\n            }\n\n        }\n        else if( target_on[winners[i]] && vals[i] >= threshold )\n        {\n            cut_start = i;\n            gap = 0;\n            val_sum = 0.0;\n            win_sum = 0.0;\n        }\n    }\n\n    return(total_size);\n\n}\n\n\nvoid TagTargets( ScoreList score_list, string movie_file, string output_dir, \n        vector<string> labels, int total_targets, int min_cut, int max_gap, \n        float threshold, float min_coverage)\n{\n    //path stuff with movie file\n    char  sep = '/';\n    #ifdef _WIN32\n    char  sep = '\\\\';\n    #endif\n    string movie_base = getBaseName(getFileName(movie_file));\n    string movie_directory = getDirectory(movie_file);\n    string tag_movie = movie_base + \".tag\";\n    if(output_dir == \"\")\n        output_dir = movie_directory;\n    string tag_path = output_dir + sep + tag_movie;\n\n    //find winners and their scores\n    vector<int> winners(score_list.size());\n    vector<float> vals(score_list.size());\n    for( int i=0; i < score_list.size(); i++ )\n    {\n        winners[i] = scoreArgMax(score_list[i]);\n        vals[i] = scoreMax(score_list[i]);\n    }\n\n    //open tag output file\n    ofstream f(tag_path);\n    if(!f)\n    {\n        cerr << \"Cannot open file: \" << tag_path << endl;\n        exit(EXIT_FAILURE);\n    }\n\n    //write header\n    f << getFileName(movie_file) << \",\";\n    for(int i=0; i < labels.size(); i++)\n         f << labels[i] << \",\";\n    f << endl;\n\n    //find the predicted cuts for each target\n    vector<int> target_time(total_targets,0);\n    CutList cut_list;\n    for(int i=0; i < total_targets; i++)\n    {\n\n        vector<int> target_on(total_targets,0);\n        target_on[i] = 1; \n\n        cout << \"Target [\" << labels[i] << \"]\" << endl;\n\n        target_time[i] = findTheCuts(score_list.size(), winners, vals, target_on, labels[i], min_cut, \n            max_gap, threshold, min_coverage, &cut_list);\n\n\n        cout << \"Total cut length: \" << PrettyTime(target_time[i]) << endl;\n        cout << endl;\n\n    }\n\n    //write target total information\n    f << score_list.size() << \",\";\n    for(int i=0; i< total_targets; i++)\n        f << target_time[i] << \",\";\n    f << endl;\n\n    //sort the list based on cut start time\n    sort(cut_list.begin(),cut_list.end(), [](const Cut &x, const Cut &y){ return (x.s < y.s);});\n\n\n    //write cutlist to tag file\n    f << \"label,start,end,score,coverage\" << endl;\n    for( int j=0; j<cut_list.size(); j++)\n    {\n        Cut this_cut = cut_list[j];\n        f << this_cut.label << \",\" << this_cut.s << \",\" << this_cut.e \n            << \",\" << this_cut.score << \",\" << this_cut.coverage << endl;\n    }\n\n    cout << \"Writing tag data to: \" << tag_path << endl; \n    f.close();\n\n}\n\n\nvoid CutMovie( ScoreList score_list, string movie_file, vector<int> target_list, \n        string output_dir, string temp_dir, int total_targets, int min_cut, int max_gap, \n        float threshold, float min_coverage, bool do_concat, bool remove_original)\n{\n\n    //path stuff with movie file\n    char  sep = '/';\n    #ifdef _WIN32\n    char  sep = '\\\\';\n    #endif\n    string movie_base = getBaseName(getFileName(movie_file));\n    string movie_type = getFileExtension(movie_file);\n    string cut_movie = movie_base + \".cut\";\n    string temp_base = temp_dir + sep + \"cuts\";\n    string temp_path = temp_base + sep + cut_movie;\n    string movie_directory = getDirectory(movie_file);\n\n    //will come from input\n    vector<int> target_on(total_targets,0);\n    for(int i=0; i<target_list.size(); i++)\n       target_on[target_list[i]] = 1; \n\n\n\n    string mkdir_command = \"mkdir -p \" + temp_base;\n    if(system(mkdir_command.c_str()))\n    {\n        cerr << \"Error making directory: \" << temp_base << endl;\n        exit(EXIT_FAILURE);\n    }\n    \n    //init\n    CutList cut_list;\n    bool did_concat = true;\n\n\n    //find winners and their scores\n    vector<int> winners(score_list.size());\n    vector<float> vals(score_list.size());\n\n    for( int i=0; i < score_list.size(); i++ )\n    {\n        winners[i] = scoreArgMax(score_list[i]);\n        vals[i] = scoreMax(score_list[i]);\n    }\n\n    int total = findTheCuts(score_list.size(), winners, vals, target_on, \n            \"\", min_cut, max_gap, threshold, min_coverage, &cut_list);\n    cout << \"Total cut length: \" << PrettyTime(total) << endl;\n    //make the cuts\n    if( cut_list.size() > 0 )\n    {\n        cout << \"Making the cuts\" << endl;\n        string part_file_path = temp_dir + sep + \"cuts.txt\";\n        ofstream part_file;\n        part_file.open(part_file_path.c_str());\n        if(!part_file.is_open())\n        {\n            cout << \"Cannot open file for writing: \" << part_file_path << endl;\n            exit(EXIT_FAILURE);\n        }\n\n        \n        //use output_seek for wmv. fixed bug where cuts would freeze\n        bool output_seek = false;\n        if(movie_type == \".wmv\" || movie_type == \".WMV\" || movie_type == \".Wmv\")\n        {\n            output_seek = true;\n            movie_type = \".mkv\";\n        }\n\n\n        //output a file for each cut in the list\n        for( int i=0; i<cut_list.size(); i++)\n        {\n    \n            Cut this_cut = cut_list[i];\n\n            string part_name = temp_path + '.' + to_string(i) + movie_type;\n            cout << \"   Creating piece: \" << part_name << endl;\n\n            string cut_command;\n            if(output_seek)\n                cut_command = \"ffmpeg -loglevel 8 -y -i \\\"\" + movie_file + \"\\\" -ss \" + \n                    to_string(this_cut.s) + \" -t \" + to_string(this_cut.e - this_cut.s)  +\n                    \" -c copy \\\"\" + part_name + \"\\\"\";\n            else       \n                cut_command = \"ffmpeg -loglevel 8 -y -ss \" + to_string(this_cut.s) +\n                    \" -i \\\"\" + movie_file + \"\\\" -t \" + to_string(this_cut.e - this_cut.s)  +\n                    \" -c copy -avoid_negative_ts 1 \\\"\" + part_name + \"\\\"\";\n\n            if(system(cut_command.c_str()))\n            {\n                cerr << \"Error cutting piece : \" << part_name << endl;\n                exit(EXIT_FAILURE);\n            }\n\n            //write piece to cuts.txt as instructions for concatenation\n            part_file << \"file \\'\" << part_name << \"\\'\" << endl;\n        }\n        part_file.close();\n\n        //default behavior (output cut where input movie is located)\n        if(output_dir == \"\")\n            output_dir = movie_directory;\n\n\n        if(do_concat)\n        {\n            cout << \"Concatenating parts in \" << part_file_path << endl;\n            cout << \"Final output: \" << output_dir << sep << cut_movie << movie_type << endl;\n        \n            string concat_command = \"ffmpeg -loglevel 16 -f concat -safe 0 -i \" + part_file_path + \n                \" -c copy \\\"\" + output_dir + sep + cut_movie + movie_type + \"\\\"\";\n            if(system(concat_command.c_str()))\n            {\n                cerr << \"Didn't concatenate pieces from: \" << part_file_path << endl;\n                did_concat = false;\n            }\n        }\n        else\n        {\n            //copy cut directory to output_dir instead of concatenating\n            cout << \"Final cut directory: \" << output_dir << sep << cut_movie << endl;\n            string copy_directory_cmd = \"cp -r \" + temp_dir + sep + \"cuts/ \\\"\" + \n                output_dir + sep + cut_movie + \"\\\"\";\n            if(system(copy_directory_cmd.c_str()))\n            {\n                cerr << \"Can't copy cut directory to: \" \n                    << output_dir << sep << cut_movie << endl;\n                //dont exit so we still clear cut directory\n                did_concat = false;\n            }\n        }\n\n    }\n    else\n    {\n        cout << \"No cuts found.\" << endl;\n        return;\n    }\n\n    \n    //ask about removing original and only keeping cut\n    if(remove_original && did_concat && queryYesNo())\n    {\n        string rm_cmd = \"rm -rf \\\"\" + movie_file + \"\\\"\";\n        if(system(rm_cmd.c_str()))\n        {\n            cerr << \"Error removing input movie: \" << rm_cmd << endl;\n            exit(EXIT_FAILURE);\n        }\n    } \n\n\n    //clean up cuts directory and cuts.txt file\n    string clean_cmd = \"rm -rf \" + temp_dir + sep + \"cuts.txt \" + temp_base;\n    if(system(clean_cmd.c_str()))\n    {\n        cerr << \"Error cleaning up temporary cut piece files in: \" \n                << clean_cmd << endl; \n        exit(EXIT_FAILURE);\n    }\n}\n\n"
        },
        {
          "name": "cut_movie.hpp",
          "type": "blob",
          "size": 0.91796875,
          "content": "/*\n * Created by Ryan Jay 30.10.16\n * Covered by the GPL. v3 (see included LICENSE)\n */\n\n#ifndef CUT_MOVIE_HPP\n#define CUT_MOVIE_HPP\n\n#include <cstdio>\n#include <cstdlib>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\ntypedef struct {\n    int s;\n    int e;\n    float score;\n    float coverage;\n    string label;\n} Cut;\n\ntypedef vector<vector<float> > ScoreList;\ntypedef vector<Cut> CutList;\n\n\nvoid CutMovie( ScoreList score_list, string movie_file, vector<int> target_list, \n        string output_dir=\"\", string temp_dir=\"/tmp\", int total_targets = 6, int min_cut=5, \n        int max_gap=2, float threshold=0.5, float min_coverage=0.4, bool do_concat=true,\n        bool remove_original = true);\n\nvoid TagTargets( ScoreList score_list, string movie_file, string output_dir, vector<string> labels,\n        int total_targets, int min_cut, int max_gap, float threshold, float min_coverage);\n\nstring PrettyTime(int seconds);\n\n#endif\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "miles-deep.cpp",
          "type": "blob",
          "size": 16.203125,
          "content": "/*\n * Created by Ryan Jay 30.10.16\n * Covered by the GPL. v3 (see included LICENSE)\n */\n\n#include <caffe/caffe.hpp>\n#include <opencv2/core/core.hpp>\n#include <opencv2/highgui/highgui.hpp>\n#include <opencv2/imgproc/imgproc.hpp>\n#include <algorithm>\n#include <iosfwd>\n#include <memory>\n#include <string>\n#include <sstream>\n#include <utility>\n#include <vector>\n#include <stdlib.h>\n#include <unistd.h>\n#include <dirent.h>\n#include <fstream>\n#include <boost/thread.hpp>\n#include \"cut_movie.hpp\"\n#include \"util.hpp\"\n\n\nusing namespace caffe;  // NOLINT(build/namespaces)\nusing namespace std;\nusing std::string;\n\nint global_ffmpeg_done = -1;\n\n\nclass Classifier \n{\n public:\n  Classifier(const string& model_file,\n             const string& trained_file,\n             const string& mean_file,\n             const string& label_file);\n\n  ScoreList  Classify(const vector<cv::Mat>& imgs);\n\n  std::vector<string> labels_;\n\n private:\n  void SetMean(const string& mean_file);\n\n  std::vector<vector<float> > Predict(const vector<cv::Mat>& imgs);\n\n  void WrapInputLayer(std::vector<cv::Mat>* input_channels, int n);\n\n  void Preprocess(const cv::Mat& img,\n                  std::vector<cv::Mat>* input_channels);\n\n private:\n  boost::shared_ptr<Net<float> > net_;\n  cv::Size input_geometry_;\n  int num_channels_;\n  cv::Mat mean_;\n};\n\nClassifier::Classifier(const string& model_file,\n                       const string& trained_file,\n                       const string& mean_file,\n                       const string& label_file) \n{\n#ifdef CPU_ONLY\n  Caffe::set_mode(Caffe::CPU);\n#else\n  Caffe::set_mode(Caffe::GPU);\n#endif\n\n\n  /* Load the network. */\n  net_.reset(new Net<float>(model_file, TEST));\n  net_->CopyTrainedLayersFrom(trained_file);\n\n  CHECK_EQ(net_->num_inputs(), 1) << \"Network should have exactly one input.\";\n  CHECK_EQ(net_->num_outputs(), 1) << \"Network should have exactly one output.\";\n\n  Blob<float>* input_layer = net_->input_blobs()[0];\n  num_channels_ = input_layer->channels();\n  CHECK(num_channels_ == 3 || num_channels_ == 1)\n    << \"Input layer should have 1 or 3 channels.\";\n  input_geometry_ = cv::Size(input_layer->width(), input_layer->height());\n\n  /* Load the binaryproto mean file. */\n  SetMean(mean_file);\n\n  /* Load labels. */\n  std::ifstream labels(label_file.c_str());\n  CHECK(labels) << \"Unable to open labels file \" << label_file;\n  string line;\n  while (std::getline(labels, line))\n    labels_.push_back(string(line));\n\n  Blob<float>* output_layer = net_->output_blobs()[0];\n  CHECK_EQ(labels_.size(), output_layer->channels())\n    << \"Number of labels is different from the output layer dimension.\";\n}\n\n\n//Utility Functions\n\nint IndexOf(string label, vector<string> labels)\n{\n    for( int k=0; k<labels.size(); k++)\n        if(label == labels[k])\n            return k;\n    \n    cerr << \"Label not found in list: \" << label << endl;\n    exit(EXIT_FAILURE);\n}\n\nstring FormatFileNumber(int file_no) \n{\n    ostringstream out;\n    out << std::internal << std::setfill('0') << std::setw(5) << file_no;\n    return out.str();\n}\n\n\ninline bool FileExists(const std::string& name) \n{\n    ifstream f(name.c_str());\n    return f.good();\n}\n\nint CountFiles(string directory)\n{\n    DIR *dir;\n    struct dirent *ent;\n    int n=0;\n    if ((dir = opendir (directory.c_str())) != NULL)\n    {\n        n = 0;\n        while ((ent = readdir(dir)) != NULL) n++;\n        closedir(dir);\n        return n-2; //-2 for . and ..\n    }\n    else\n    {\n        cerr << \"Could not open directory: \" << directory << endl;\n        exit(EXIT_FAILURE);\n    }\n}\n\nvoid CreateScreenShots(string movie_file, string screenshot_directory)\n{\n  //turn movie into 1 second screenshots\n  \n  string mkdir_cmd = \"mkdir -p \" + screenshot_directory;\n  if(system(mkdir_cmd.c_str()))\n  {\n      cerr << \"Command failed: \" << mkdir_cmd << endl;\n      exit(EXIT_FAILURE);\n  }\n\n  string screenshot_cmd = \"ffmpeg -loglevel 8 -i \\\"\" + movie_file + \"\\\" -vf fps=1 -q:v 1 \" +\n            screenshot_directory + \"img_\\%05d.jpg\";\n  if(system(screenshot_cmd.c_str()))\n  {\n      cerr << \"Error getting screenshots from: \" << movie_file << endl;\n      exit(EXIT_FAILURE);\n  }\n  \n  global_ffmpeg_done = CountFiles(screenshot_directory);\n\n}\n\nvoid PrintUsage(char* prog_name)\n{\n    cout << \"Usage: \" << prog_name << \" [-t target|-x|-a] [-b batch_size] [-o output_dir] [options] movie_file\" << endl;\n    cout << \"-h\\tPrint more help information about options\" << endl;\n}\n\nvoid PrintHelp()\n{\n    cout << endl;\n    cout << \"Main Options\" << endl;\n    cout << \"-t\\tComma separated list of the Targets to search for (default:blowjob_handjob)\" << endl;\n    cout << \"-x\\tRemove all non-sexual scenes. Same as all targets except \\'other\\'. Ignores -t.\" << endl;\n    cout << \"-a\\tCreate a tag file with the cuts for all categories. Ignores -t and -x\" << endl; \n    cout << \"-b\\tBatch size (default: 32) - decrease if you run out of memory\" << endl;\n    cout << \"-o\\tOutput directory (default: same as input)\" << endl;\n    cout << \"-d\\tTemporary Directory (default: /tmp)\" << endl;\n    cout << endl;\n    cout << \"Cutting Options\" << endl;\n    cout << \"-u\\tMinimum cUt in seconds (default: 4)\" << endl;\n    cout << \"-g\\tMax Gap (default: 2)- the largest section of non-target frames in a cut\" << endl;\n    cout << \"-s\\tMinimum Score (default: 0.5) - minimum value considered a match [0-1]\" << endl;\n    cout << \"-v\\tMinimum coVerage of target frames in a cut (default: 0.4) [0-1]\" << endl;\n    cout << \"-c\\tDon't Concatenate. Output cut directory (default: off)\" << endl;\n    cout << \"-n\\tDoN't ask to remove original movie file (default: off)\" << endl;\n    cout << endl;\n    cout << \"Model Options\" << endl;\n    cout << \"-m\\tMean file .binaryproto\" << endl;\n    cout << \"-p\\tDefinition of model .prototxt\" << endl;\n    cout << \"-w\\tWeights for model .caffemodel\" << endl;\n    cout << \"-l\\tLabel file\" << endl;\n}\n\nvector<string> Split(const string &s, char delim) \n{\n    stringstream ss(s);\n    string item;\n    vector<string> tokens;\n    while (getline(ss, item, delim)) \n    {\n        tokens.push_back(item);\n    }\n    return tokens;\n}\n\nvector<string> allExceptOther(vector<string> labels)\n{\n    vector<string> output;\n    for(int i=0; i<labels.size(); i++)\n    {\n        if(labels[i] != \"other\")\n        output.push_back(labels[i]);\n    }\n    return(output);\n}\n\n\n//Classifier Class Functions\n\n\n/* Return the all predictions. */\nScoreList Classifier::Classify(const vector<cv::Mat>& imgs) \n{\n  ScoreList outputs = Predict(imgs);\nreturn outputs;\n}\n\n/* Load the mean file in binaryproto format. */\nvoid Classifier::SetMean(const string& mean_file) \n{\n  BlobProto blob_proto;\n  ReadProtoFromBinaryFileOrDie(mean_file.c_str(), &blob_proto);\n\n  /* Convert from BlobProto to Blob<float> */\n  Blob<float> mean_blob;\n  mean_blob.FromProto(blob_proto);\n  CHECK_EQ(mean_blob.channels(), num_channels_)\n    << \"Number of channels of mean file doesn't match input layer.\";\n\n  /* The format of the mean file is planar 32-bit float BGR or grayscale. */\n  std::vector<cv::Mat> channels;\n  float* data = mean_blob.mutable_cpu_data();\n  for (int i = 0; i < num_channels_; ++i) \n  {\n    /* Extract an individual channel. */\n    cv::Mat channel(mean_blob.height(), mean_blob.width(), CV_32FC1, data);\n    channels.push_back(channel);\n    data += mean_blob.height() * mean_blob.width();\n  }\n\n  /* Merge the separate channels into a single image. */\n  cv::Mat mean;\n  cv::merge(channels, mean);\n\n  /* Compute the global mean pixel value and create a mean image\n   * filled with this value. */\n  cv::Scalar channel_mean = cv::mean(mean);\n  mean_ = cv::Mat(input_geometry_, mean.type(), channel_mean);\n}\n\nstd::vector<vector<float> > Classifier::Predict(const vector<cv::Mat>& imgs) \n{\n  Blob<float>* input_layer = net_->input_blobs()[0];\n  input_layer->Reshape(imgs.size(), num_channels_,\n                       input_geometry_.height, input_geometry_.width);\n  /* Forward dimension change to all layers. */\n  net_->Reshape();\n\n  for( int i=0; i < imgs.size(); ++i)\n  {\n      vector<cv::Mat> input_channels;\n      WrapInputLayer(&input_channels,i);\n      Preprocess(imgs[i], &input_channels);\n  }\n\n  net_->Forward();\n\n  vector<vector<float> > outputs;\n\n  Blob<float>* output_layer = net_->output_blobs()[0];\n  for( int i=0; i < output_layer->num(); ++i)\n  {\n      const float* begin = output_layer->cpu_data() + i * output_layer->channels();\n      const float* end = begin + output_layer->channels();\n      /* Copy the output layer to a std::vector */\n      outputs.push_back(vector<float>(begin, end));\n  }\n  return outputs;\n}\n\n/* Wrap the input layer of the network in separate cv::Mat objects\n * (one per channel). This way we save one memcpy operation and we\n * don't need to rely on cudaMemcpy2D. The last preprocessing\n * operation will write the separate channels directly to the input\n * layer. */\nvoid Classifier::WrapInputLayer(std::vector<cv::Mat>* input_channels, int n) \n{\n  Blob<float>* input_layer = net_->input_blobs()[0];\n\n  int width = input_layer->width();\n  int height = input_layer->height();\n  int channels = input_layer->channels();\n  float* input_data = input_layer->mutable_cpu_data() + n * width * height * channels;\n  for (int i = 0; i < channels; ++i) \n  {\n    cv::Mat channel(height, width, CV_32FC1, input_data);\n    input_channels->push_back(channel);\n    input_data += width * height;\n  }\n}\n\nvoid Classifier::Preprocess(const cv::Mat& img,\n                            std::vector<cv::Mat>* input_channels) \n{\n  /* Convert the input image to the input image format of the network. */\n  cv::Mat sample;\n  if (img.channels() == 3 && num_channels_ == 1)\n    cv::cvtColor(img, sample, cv::COLOR_BGR2GRAY);\n  else if (img.channels() == 4 && num_channels_ == 1)\n    cv::cvtColor(img, sample, cv::COLOR_BGRA2GRAY);\n  else if (img.channels() == 4 && num_channels_ == 3)\n    cv::cvtColor(img, sample, cv::COLOR_BGRA2BGR);\n  else if (img.channels() == 1 && num_channels_ == 3)\n    cv::cvtColor(img, sample, cv::COLOR_GRAY2BGR);\n  else\n    sample = img;\n\n  cv::Mat sample_resized;\n  if (sample.size() != input_geometry_)\n    cv::resize(sample, sample_resized, input_geometry_);\n  else\n    sample_resized = sample;\n\n  cv::Mat sample_float;\n  if (num_channels_ == 3)\n    sample_resized.convertTo(sample_float, CV_32FC3);\n  else\n    sample_resized.convertTo(sample_float, CV_32FC1);\n\n  cv::Mat sample_normalized;\n  cv::subtract(sample_float, mean_, sample_normalized);\n\n  /* This operation will write the separate BGR planes directly to the\n   * input layer of the network because it is wrapped by the cv::Mat\n   * objects in input_channels. */\n  cv::split(sample_normalized, *input_channels);\n\n}\n\n\nint main(int argc, char** argv) \n{\n  \n  int batch_size = 32;\n  int MAX_IMG_IDX = 99999;\n  int report_interval = 100;\n  int sleep_time = 1;\n  int min_cut = 4;\n  int max_gap = 2;\n  double min_score = 0.5;\n  double min_coverage = 0.4;\n  vector<string> target_list;\n  target_list.push_back(\"blowjob_handjob\");  //the default target\n  string movie_file;\n  string screenshot_directory = \"/tmp/screenshots/\";\n\n  string model_dir = \"model/\";\n  string model_weights = model_dir + \"weights.caffemodel\";\n  string model_def = model_dir + \"deploy.prototxt\";\n  string mean_file = model_dir + \"mean.binaryproto\";\n  string label_file = model_dir + \"labels.txt\";\n  string output_directory = \"\";\n  string temp_directory = \"/tmp\";\n  bool auto_tag = false;\n  bool do_concat = true;\n  bool remove_original = true;\n\n\n\n\n\n  //parse command line flags\n  int opt;\n  bool set_all_but_other = false;\n  while ((opt = getopt(argc, argv, \"act:b:d:o:m:ng:s:hxp:w:u:l:v:\")) != -1) \n  {\n        switch (opt) {\n        case 'a':\n            auto_tag = true;\n            break;\n        case 'c':\n            do_concat = false;\n            break;\n        case 't':\n            target_list = Split(optarg,','); \n            break;\n        case 'b':\n            batch_size = atoi(optarg);\n            break;\n        case 'd':\n            temp_directory = optarg;\n            break;\n        case 'o':\n            output_directory = optarg;\n            break;\n        case 'u':\n            min_cut = atoi(optarg);\n            break;\n        case 'g':\n            max_gap = atoi(optarg);\n            break;\n        case 's':\n            min_score = atof(optarg);\n            break;\n        case 'v':\n            min_coverage = atof(optarg);\n            break;\n        case 'm':\n            mean_file = optarg;\n            break;\n        case 'p':\n            model_def = optarg;\n            break;\n        case 'w':\n            model_weights = optarg;\n            break;\n        case 'l':\n            label_file = optarg;\n            break;\n        case 'n':\n            remove_original = false; \n            break;\n        case 'h':\n            PrintHelp();\n            exit(0);\n        case 'x':\n            set_all_but_other = true;\n            break;\n        default: /* '?' */\n            PrintUsage(argv[0]);\n            exit(EXIT_FAILURE);\n        }\n  }\n\n  if(optind >= argc)\n  {\n      cerr << \"No input movie file.\" << endl;\n      PrintUsage(argv[0]);\n      exit(EXIT_FAILURE);\n  }\n  movie_file = argv[optind];\n\n\n  //keep Caffe quiet\n  FLAGS_minloglevel = 3;\n  ::google::InitGoogleLogging(argv[0]);\n\n  //create the classifier\n  Classifier classifier(model_def, model_weights, mean_file, label_file);\n\n  if(set_all_but_other)\n        target_list = allExceptOther(classifier.labels_);\n\n  //print targets\n  if(auto_tag)\n      cout << \"Auto-tag mode\" << endl;\n  else\n  {\n      cout << \"Targets: [\";\n      for(int i=0; i<target_list.size(); i++)\n      {\n          cout << target_list[i];\n          if(i < target_list.size()-1)\n              cout << \", \";\n      }\n      cout << \"]\" << endl;\n  }\n\n  \n  global_ffmpeg_done = MAX_IMG_IDX;\n  boost::thread first(CreateScreenShots, movie_file, screenshot_directory);\n  //first.join();  //uncomment to make predictions wait for screenshots\n    \n  int epoch = 0;\n  bool no_more = false;\n  ScoreList score_list;\n\n  //loop till all screenshots have been\n  //extracted and classified\n  while(true)\n  {\n    vector<cv::Mat> imgs;\n    //fill a batch with screenshots to classify\n    for( int i=0; i < batch_size; i++ )\n    {\n        \n        int idx = epoch * batch_size + i + 1;\n\n        //print some progress updates\n        if(idx % report_interval == 0)\n        {\n            if(global_ffmpeg_done < MAX_IMG_IDX)\n                cout << PrettyTime(idx) << \"/\" << PrettyTime(global_ffmpeg_done) << endl;\n            else\n                cout << PrettyTime(idx) << endl;\n        }\n\n        string the_image = \"img_\" + FormatFileNumber(idx) + \".jpg\";\n        string the_image_path = screenshot_directory + the_image;\n\n        //wait for screenshots from ffmpeg thread\n        while( !FileExists( the_image_path ) )\n        {\n            //if ffmpeg is done getting screenshots quit waiting\n            if(idx >= global_ffmpeg_done)\n            {\n                no_more = true;\n                break;\n            }\n            cout << \" Waiting for: \" + the_image_path << endl;\n            sleep(sleep_time);\n        }\n\n        if(!no_more)\n        {\n            cv::Mat img = cv::imread(the_image_path,-1);\n            CHECK(!img.empty()) << \"Unable to decode image \" << the_image_path;\n            imgs.push_back(img);\n        }\n        else\n            break;\n    }\n\n    //don't try to classify an empty batch\n    if(imgs.size() == 0)\n        break;\n\n    //perform classification\n    ScoreList ordered_preds = classifier.Classify(imgs);\n    for( size_t i=0; i < ordered_preds.size(); ++i) \n        score_list.push_back(ordered_preds[i]);\n\n    if(no_more)\n        break;\n\n    epoch += 1;\n  }\n\n  //Either create a file out the cuts for all targets\n  //or make the cuts from the input list\n  if(auto_tag)\n  {\n    TagTargets( score_list, movie_file, output_directory, classifier.labels_,\n            classifier.labels_.size(), min_cut, max_gap, min_score ,min_coverage);\n  }\n  else\n  {\n    //make the cuts based on the predictions\n    vector<int> target_ints;\n    for(int i=0; i<target_list.size(); i++)\n    {\n      int target_idx = IndexOf(target_list[i],classifier.labels_);\n      target_ints.push_back(target_idx);\n    }\n    CutMovie( score_list, movie_file, target_ints, output_directory, temp_directory, \n            classifier.labels_.size(), min_cut, max_gap, min_score, \n            min_coverage, do_concat, remove_original );\n  }\n\n  //clean up screenshots\n  string clean_cmd = \"rm -rf \" + screenshot_directory;\n  if(system(clean_cmd.c_str()))\n  {\n    cerr << \"Error cleaning up temporary files: \" << clean_cmd << endl;\n    exit(EXIT_FAILURE);\n  }\n\n}\n\n"
        },
        {
          "name": "model",
          "type": "tree",
          "content": null
        },
        {
          "name": "util.cpp",
          "type": "blob",
          "size": 1.8564453125,
          "content": "/*\n * Created by Ryan Jay 15.11.16\n * Covered by the GPL. v3 (see included LICENSE)\n */\n\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <stdlib.h>\n#include <vector>\n#include <algorithm>\n#include <fstream>\n#include <string>\n\n#include \"util.hpp\"\n\nusing namespace std;\n\nfloat scoreMax(vector<float> x)\n{\n     return *max_element(x.begin(), x.end());\n}\n\nint scoreArgMax(vector<float> x)\n{\n    return distance(x.begin(), max_element(x.begin(), x.end()));\n}\n\nstring getFileName(const string& s)\n{\n    char sep = '/';\n\n    #ifdef _WIN32\n        sep = '\\\\';\n    #endif\n\n    size_t i = s.rfind(sep, s.length());\n    if( i != string::npos)\n        return(s.substr(i+1, s.length() -i));\n    return(s);\n}\n\nstring getFileExtension(const string& s)\n{\n    char sep = '.';\n\n    size_t i = s.rfind(sep, s.length());\n    if( i != string::npos)\n        return(s.substr(i, s.length() -i));\n    return(s);\n}\n\nstring getBaseName(const string& s)\n{\n    char sep = '.';\n\n    size_t i = s.rfind(sep, s.length());\n    if( i != string::npos)\n        return(s.substr(0, i));\n    return(s);\n}\n\nbool queryYesNo()\n{\n    cout << \"Replace movie with cut? This will delete the movie. [y/N]?\";\n    string input;\n    getline(cin, input);\n    if( input == \"YES\" || input == \"Yes\" || input == \"yes\" \n            || input == \"Y\" || input == \"y\")\n        return true;\n    else\n        return false;\n}\n\nstring PrettyTime(int seconds)\n{\n    int s, h, m;\n    string pTime = \"\";\n\n    m = (seconds / 60);\n    h = int(m / 60)%60;\n    m = int(m % 60);\n    s = int(seconds%60);\n\n    if(h > 0)\n        pTime += to_string(h) + \"h\";\n    if(seconds >= 60)\n        pTime += to_string(m) + \"m\";\n    pTime += to_string(s) + \"s\";\n    return(pTime);\n\n}\n\nstd::string getDirectory (const std::string& path)\n{\n    int found = path.find_last_of(\"/\\\\\");\n    if(found < 0)\n        return(\".\");\n    else\n        return(path.substr(0, found));\n}\n\n"
        },
        {
          "name": "util.hpp",
          "type": "blob",
          "size": 0.474609375,
          "content": "/*\n * Created by Ryan Jay 15.11.16\n * Covered by the GPL. v3 (see included LICENSE)\n */\n\n#ifndef UTIL_HPP\n#define UTIL_HPP\n\n#include <cstdio>\n#include <cstdlib>\n#include <vector>\n\nusing namespace std;\n\n\nfloat scoreMax(vector<float> x);\nint scoreArgMax(vector<float> x);\nstring getFileName(const string& s);\nstring getFileExtension(const string& s);\nstring getBaseName(const string& s);\nbool queryYesNo();\nstring PrettyTime(int seconds);\nstring getDirectory(const string& path);\n\n#endif\n"
        }
      ]
    }
  ]
}