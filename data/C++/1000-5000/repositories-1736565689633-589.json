{
  "metadata": {
    "timestamp": 1736565689633,
    "page": 589,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "arximboldi/immer",
      "stars": 2519,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 1.095703125,
          "content": "---\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: 'true'\nAlignEscapedNewlines: Right\nAlignTrailingComments: 'true'\nAllowShortFunctionsOnASingleLine: 'true'\nAllowShortBlocksOnASingleLine: 'true'\nAlwaysBreakTemplateDeclarations: 'true'\nAccessModifierOffset: -4\nBinPackArguments: 'false'\nBinPackParameters: 'false'\nBreakBeforeBraces: Mozilla\nBreakBeforeInheritanceComma: 'true'\nBreakBeforeTernaryOperators: 'true'\nBreakConstructorInitializers: BeforeComma\nBreakStringLiterals: 'true'\nColumnLimit: '80'\nCompactNamespaces: 'false'\nConstructorInitializerAllOnOneLineOrOnePerLine: 'false'\nFixNamespaceComments: 'true'\nForEachMacros: ['IMMER_CATCH', 'IMMER_TRY']\nIndentCaseLabels: 'false'\nIndentWidth: '4'\nIndentWrappedFunctionNames: 'false'\nKeepEmptyLinesAtTheStartOfBlocks: 'false'\nLanguage: Cpp\nMaxEmptyLinesToKeep: '1'\nNamespaceIndentation: None\nPointerAlignment: Left\nReflowComments: 'true'\nSortIncludes: 'true'\nSortUsingDeclarations: 'true'\nSpaceAfterCStyleCast: 'true'\nSpaceAfterTemplateKeyword: 'true'\nSpaceBeforeAssignmentOperators: 'true'\nSpaceBeforeParens: ControlStatements\nTabWidth: '4'\nUseTab: Never\n...\n"
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dir-locals.el",
          "type": "blob",
          "size": 0.2001953125,
          "content": "((nil .\n      ((indent-tabs-mode . nil)\n       (show-trailing-whitespace . t)))\n (c-mode .\n         ((mode . c++)))\n (c++-mode .\n          ((eval add-hook 'before-save-hook #'clang-format-buffer nil t))))\n"
        },
        {
          "name": ".gdbinit",
          "type": "blob",
          "size": 0.0654296875,
          "content": "# Load pretty printers\nsource tools/gdb_pretty_printers/autoload.py"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.30078125,
          "content": "bazel-*\nbuild/\nbuild-*/\nreports/\ndoc/_build\ndoc/_doxygen\nbazel-*\n\ntools/travis/ssh-key\ntools/clojure/target/\ntools/scala/target/\ntools/scala/project/target/\n\nextra/js/out\nextra/js/boost\n\n__pycache__\n\n.gdb_history\n\n.cache\ntools/clojure/.lein*\n\n*.pyc\n\n/result*\n\n.build\n.swiftpm\n.vscode\n.pre-commit-config.yaml\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.267578125,
          "content": "[submodule \"extra/python/lib/pybind11\"]\n\tpath = extra/python/lib/pybind11\n\turl = https://github.com/pybind/pybind11.git\n[submodule \"tools/sinusoidal-sphinx-theme\"]\n\tpath = tools/sinusoidal-sphinx-theme\n        url = https://github.com/arximboldi/sinusoidal-sphinx-theme.git\n"
        },
        {
          "name": "BUILD",
          "type": "blob",
          "size": 0.2099609375,
          "content": "package(default_visibility = [\"//visibility:public\"])\n\ncc_library(\n    name = \"immer\",\n    include_prefix = \"immer\",\n    strip_include_prefix =\n        \"immer\",\n    hdrs = glob([\n        \"immer/**/*.hpp\",\n    ]),\n)\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 5.814453125,
          "content": "cmake_minimum_required(VERSION 3.5.1)\ncmake_policy(SET CMP0048 NEW) # enable project VERSION\ncmake_policy(SET CMP0056 NEW) # honor link flags in try_compile()\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\n\nproject(immer VERSION 0.8.0)\n\nif(NOT MSVC)\n  set(CMAKE_CXX_FLAGS\n      \"${CMAKE_CXX_FLAGS} -Wall -Wextra -pedantic -Wno-unused-parameter -Wno-extended-offsetof -Wno-c++17-extensions -Wno-c++1z-extensions -Wno-unknown-warning-option -Wno-type-limits\"\n  )\nendif()\nset(CMAKE_EXPORT_COMPILE_COMMANDS on)\nset(CMAKE_CXX_EXTENSIONS off)\nif(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Qunused-arguments\")\nendif()\n\ninclude(GNUInstallDirs)\ninclude(ImmerUtils)\n\n# Options\n# =======\n\noption(ENABLE_ASAN \"compile with address sanitizer enabled\")\noption(ENABLE_MSAN \"compile with memory sanitizer enabled\")\noption(ENABLE_LSAN \"compile with leak sanitizer enabled\")\noption(ENABLE_UBSAN \"compile with undefined behavior sanitizer enabled\")\noption(ENABLE_COVERAGE \"compile with test coverage support\")\noption(DISABLE_WERROR \"enable --werror\")\noption(DISABLE_FREE_LIST \"disables the free list heap\")\noption(DISABLE_THREAD_SAFETY \"disables thread safety by default\")\noption(CHECK_FUZZERS \"Add fuzzers as part of make check\")\n\noption(ENABLE_PYTHON \"enable building python module\" off)\noption(ENABLE_GUILE \"enable building guile module\" off)\noption(ENABLE_BOOST_COROUTINE \"run benchmarks with boost coroutine\" off)\n\noption(immer_BUILD_TESTS \"Build tests\" ON)\noption(immer_BUILD_PERSIST_TESTS \"Build experimental persist tests\" off)\noption(immer_BUILD_EXAMPLES \"Build examples\" ON)\noption(immer_BUILD_DOCS \"Build docs\" ON)\noption(immer_BUILD_EXTRAS \"Build extras\" ON)\noption(immer_INSTALL_FUZZERS \"Install fuzzers\" off)\noption(immer_ENABLE_EXCEPTIONS\n       \"Always enable exceptions regardless of detected compiler support\" OFF)\noption(immer_DISABLE_EXCEPTIONS\n       \"Always disable exceptions regardless of detected compiler support\" OFF)\n\nif(immer_ENABLE_EXCEPTIONS AND immer_DISABLE_EXCEPTIONS)\n  message(FATAL_ERROR \"Cannot both enable and disable exceptions\")\nendif()\n\nset(CXX_STANDARD\n    14\n    CACHE STRING \"c++ standard number\")\n\nset(CMAKE_CXX_STANDARD ${CXX_STANDARD})\nset(CMAKE_CXX_STANDARD_REQUIRED on)\n\nif(ENABLE_ASAN)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=address\")\nendif()\nif(ENABLE_LSAN)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=leak\")\nendif()\nif(ENABLE_UBSAN)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=undefined\")\nendif()\nif(ENABLE_MSAN)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=memory\")\nendif()\n\nif(NOT MSVC AND NOT DISABLE_WERROR)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Werror\")\nendif()\n\n# Dependencies\n# ============\n\nif(ENABLE_BOOST_COROUTINE)\n  set(immer_boost_components coroutine)\nendif()\n\nfind_package(Threads)\nfind_package(BoehmGC)\nfind_package(Boost 1.56 COMPONENTS ${immer_boost_components})\n\nfind_program(CCACHE ccache)\nif(CCACHE)\n  message(STATUS \"Using ccache: ${CCACHE}\")\n  set(CMAKE_CXX_COMPILER_LAUNCHER ${CCACHE})\n  set(CMAKE_CXX_LINKER_LAUNCHER ${CCACHE})\nelse()\n  message(STATUS \"Could not find ccache\")\nendif()\n\nif(NOT BOEHM_GC_FOUND)\n  set(BOEHM_GC_LIBRARIES \"\")\nendif()\n\n# Targets\n# =======\n\n# the library\nadd_library(immer INTERFACE)\ntarget_include_directories(\n  immer\n  INTERFACE $<BUILD_INTERFACE:${immer_BINARY_DIR}/>\n            $<BUILD_INTERFACE:${immer_SOURCE_DIR}/>\n            $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)\n\nif(immer_ENABLE_EXCEPTIONS)\n  message(STATUS \"Explicitly enabling exceptions\")\n  target_compile_definitions(immer INTERFACE IMMER_USE_EXCEPTIONS)\nendif()\n\nif(immer_DISABLE_EXCEPTIONS)\n  message(STATUS \"Explicitly disabling exceptions\")\n  target_compile_definitions(immer INTERFACE IMMER_NO_EXCEPTIONS)\nendif()\n\ninstall(TARGETS immer EXPORT ImmerConfig)\ninstall(EXPORT ImmerConfig DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/Immer\")\ninstall(DIRECTORY immer DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\")\n\ninclude(CMakePackageConfigHelpers)\nwrite_basic_package_version_file(\n  \"${CMAKE_CURRENT_BINARY_DIR}/ImmerConfigVersion.cmake\"\n  VERSION ${PROJECT_VERSION}\n  COMPATIBILITY SameMajorVersion)\n\ninstall(FILES \"${CMAKE_CURRENT_BINARY_DIR}/ImmerConfigVersion.cmake\"\n        DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/Immer\")\n\n# development target to be used in tests, examples, benchmarks...\nimmer_canonicalize_cmake_booleans(DISABLE_FREE_LIST DISABLE_THREAD_SAFETY\n                                  CHECK_SLOW_TESTS)\nadd_library(immer-dev INTERFACE)\ntarget_include_directories(\n  immer-dev SYSTEM INTERFACE ${Boost_INCLUDE_DIR} ${BOEHM_GC_INCLUDE_DIR}\n                             ${CMAKE_CURRENT_SOURCE_DIR}/tools/include)\ntarget_link_libraries(immer-dev INTERFACE immer ${BOEHM_GC_LIBRARIES}\n                                          ${CMAKE_THREAD_LIBS_INIT})\ntarget_compile_definitions(\n  immer-dev\n  INTERFACE -DIMMER_CXX_STANDARD=${CXX_STANDARD}\n            -DIMMER_HAS_LIBGC=1\n            -DIMMER_NO_FREE_LIST=${DISABLE_FREE_LIST}\n            -DIMMER_NO_THREAD_SAFETY=${DISABLE_THREAD_SAFETY}\n            -DIMMER_SLOW_TESTS=${CHECK_SLOW_TESTS}\n            -DFMT_HEADER_ONLY=1)\nif(ENABLE_COVERAGE)\n  target_compile_options(immer-dev INTERFACE \"--coverage\")\n  target_link_libraries(immer-dev INTERFACE \"--coverage\")\nendif()\n\n# Testing\n# =======\n\nif(immer_BUILD_TESTS\n   OR immer_BUILD_EXAMPLES\n   OR immer_BUILD_EXTRAS)\n  add_custom_target(\n    check\n    COMMAND ${CMAKE_CTEST_COMMAND} --output-on-failure\n    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n    COMMENT \"Build and run all the tests and examples.\")\nendif()\n\nif(immer_BUILD_TESTS)\n  enable_testing()\n\n  add_subdirectory(test)\n  add_subdirectory(benchmark)\nendif()\n\nif(immer_BUILD_EXAMPLES)\n  add_subdirectory(example)\nendif()\n\nif(immer_BUILD_DOCS)\n  add_subdirectory(doc)\nendif()\n\nif(immer_BUILD_EXTRAS)\n  add_subdirectory(extra/fuzzer)\n  add_subdirectory(extra/python)\n  add_subdirectory(extra/guile)\nendif()\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.306640625,
          "content": "Boost Software License - Version 1.0 - August 17th, 2003\n\nPermission is hereby granted, free of charge, to any person or organization\nobtaining a copy of the software and accompanying documentation covered by\nthis license (the \"Software\") to use, reproduce, display, distribute,\nexecute, and transmit the Software, and to prepare derivative works of the\nSoftware, and to permit third-parties to whom the Software is furnished to\ndo so, all subject to the following:\n\nThe copyright notices in the Software and this entire statement, including\nthe above license grant, this restriction and the following disclaimer,\nmust be included in all copies of the Software, in whole or in part, and\nall derivative works of the Software, unless such copies or derivative\nworks are solely in the form of machine-executable object code generated by\na source language processor.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\nSHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\nFOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Package.swift",
          "type": "blob",
          "size": 1.001953125,
          "content": "// swift-tools-version:5.5\n// The swift-tools-version declares the minimum version of Swift required to build this package.\n\nimport PackageDescription\n\nlet package = Package(\n    name: \"immer\",\n    products: [\n        // Products define the executables and libraries a package produces, and make them visible to other packages.\n        .library(\n            name: \"immer\",\n            targets: [\"immer\"]),\n    ],\n    dependencies: [\n        // Dependencies declare other packages that this package depends on.\n        // .package(url: /* package url */, from: \"1.0.0\"),\n    ],\n    targets: [\n        // Targets are the basic building blocks of a package. A target can define a module or a test suite.\n        // Targets can depend on other targets in this package, and on products in packages this package depends on.\n        .target(\n            name: \"immer\",\n            dependencies: [],\n            path: \".\",\n            sources: [\"spm.cpp\"],\n            publicHeadersPath: \".\")\n    ],\n    cxxLanguageStandard: .cxx14\n)\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 8.7353515625,
          "content": ".. image:: https://github.com/arximboldi/immer/workflows/test/badge.svg\n   :target: https://github.com/arximboldi/immer/actions?query=workflow%3Atest+branch%3Amaster\n   :alt: GitHub Actions Badge\n\n.. image:: https://codecov.io/gh/arximboldi/immer/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/arximboldi/immer\n   :alt: CodeCov Badge\n\n.. image:: https://cdn.rawgit.com/arximboldi/immer/355a113782aedc2ea22463444014809269c2376d/doc/_static/sinusoidal-badge.svg\n   :target: https://sinusoid.al\n   :alt: Sinusoidal Engineering badge\n   :align: right\n\n.. raw:: html\n\n   <picture>\n     <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://cdn.rawgit.com/arximboldi/immer/3888170d247359cc0905eed548cd46897caef0f4/doc/_static/logo-black.svg\">\n     <img width=\"100%\" src=\"https://cdn.rawgit.com/arximboldi/immer/3888170d247359cc0905eed548cd46897caef0f4/doc/_static/logo-front.svg\" alt=\"Logotype\">\n   </picture>\n\n.. include:introduction/start\n\n**immer** is a library of persistent_ and immutable_ data structures\nwritten in C++.  These enable whole new kinds of architectures for\ninteractive and concurrent programs of striking simplicity,\ncorrectness, and performance.\n\n.. _persistent: https://en.wikipedia.org/wiki/Persistent_data_structure\n.. _immutable:  https://en.wikipedia.org/wiki/Immutable_object\n\n* **Documentation** (Contents_)\n* **Code** (GitHub_)\n* **CppCon'17 Talk**: *Postmodern Immutable Data Structures* (YouTube_, Slides_)\n* **ICFP'17 Paper**: *Persistence for the masses* (Preprint_)\n\n.. _contents: https://sinusoid.es/immer/#contents\n.. _github: https://github.com/arximboldi/immer\n.. _youtube: https://www.youtube.com/watch?v=sPhpelUfu8Q\n.. _slides: https://sinusoid.es/talks/immer-cppcon17\n.. _preprint: https://public.sinusoid.es/misc/immer/immer-icfp17.pdf\n\n\n  .. raw:: html\n\n     <a href=\"https://www.patreon.com/sinusoidal\">\n         <img align=\"right\" src=\"https://cdn.rawgit.com/arximboldi/immer/master/doc/_static/patreon.svg\">\n     </a>\n\n  This library has full months of *pro bono* research and development\n  invested in it.  This is just the first step in a long-term vision\n  of making interactive and concurrent C++ programs easier to\n  write. **Put your logo here and help this project's long term\n  sustainability by buying a sponsorship package:** immer@sinusoid.al\n\n.. include:index/end\n\nExample\n-------\n\n.. github does not support the ``literalinclude`` directive.  This\n   example is copy pasted from ``example/vector/intro.cpp``\n\n.. code-block:: c++\n\n   #include <immer/vector.hpp>\n   int main()\n   {\n       const auto v0 = immer::vector<int>{};\n       const auto v1 = v0.push_back(13);\n       assert(v0.size() == 0 && v1.size() == 1 && v1[0] == 13);\n\n       const auto v2 = v1.set(0, 42);\n       assert(v1[0] == 13 && v2[0] == 42);\n   }\n..\n\n  For a **complete example** check `Ewig, a simple didactic\n  text-editor <https://github.com/arximboldi/ewig>`_ built with this\n  library.  You may also wanna check `Lager, a Redux-like library\n  <https://github.com/arximboldi/lager>`_ for writing interactive\n  software in C++ using a value-oriented design.\n\n\nWhy?\n----\n\nIn the last few years, there has been a growing interest in immutable\ndata structures, motivated by the horizontal scaling of our processing\npower and the ubiquity of highly interactive systems.  Languages like\nClojure_ and Scala_ provide them by default, and implementations\nfor JavaScript like Mori_ and Immutable.js_ are widely used,\nspecially in combination with modern UI frameworks like React_.\n\nInteractivity\n    Thanks to *persistence* and *structural sharing*, new values can\n    be efficiently compared with old ones.  This enables simpler ways of\n    *reasoning about change* that sit at the core of modern\n    interactive systems programming paradigms like `reactive\n    programming`_.\n\nConcurrency\n    Passing immutable data structures by value does not need to copy\n    any data. In the absence of mutation, data can be safely read\n    from multiple concurrent processes, and enable concurrency\n    patterns like `share by communicating`_ efficiently.\n\nParallelism\n   Some recent immutable data structures have interesting properties\n   like :math:`O(log(n))` concatenation, which enable new kinds of\n   `parallelization algorithms`_.\n\n.. _clojure: http://clojure.org/reference/data_structures\n.. _scala: http://docs.scala-lang.org/overviews/collections/overview.html\n\n.. _mori: https://swannodette.github.io/mori/\n.. _immutable.js: https://github.com/facebook/immutable-js\n.. _react: https://facebook.github.io/react/\n\n.. _reactive programming: https://en.wikipedia.org/wiki/Reactive_programming\n.. _share by communicating: https://blog.golang.org/share-memory-by-communicating\n.. _parallelization algorithms: http://docs.scala-lang.org/overviews/parallel-collections/overview.html\n\nFeatures\n--------\n\nIdiomatic\n    This library doesn't pretend that it is written in Haskell.  It\n    leverages features from recent standards to provide an API that is\n    both efficient and natural for a C++ developer.\n\nPerformant\n    You use C++ because you need this.  *Immer* implements state of\n    the art data structures with efficient cache utilization and have\n    been proven production ready in other languages.  It also includes\n    our own improvements over that are only possible because of the\n    C++'s ability to abstract over memory layout.  We monitor the\n    performance impact of every change by collecting `benchmark\n    results`_ directly from CI.\n\n.. _benchmark results: https://public.sinusoid.es/misc/immer/reports/\n\nCustomizable\n    We leverage templates and `policy-based design`_ to build\n    data-structures that can be adapted to work efficiently for\n    various purposes and architectures, for example, by choosing among\n    various `memory management strategies`.  This turns\n    *immer* into a good foundation to provide immutable data\n    structures to higher level languages with a C runtime, like\n    Python_ or Guile_.\n\n.. _python: https://www.python.org/\n.. _guile: https://www.gnu.org/software/guile/\n.. _policy-based design: https://en.wikipedia.org/wiki/Policy-based_design\n.. _memory management strategies: https://sinusoid.es/immer/memory.html\n\nDependencies\n------------\n\nThis library is written in **C++14** and a compliant compiler is\nnecessary.  It is `continuously tested`_ with Clang 3.8 and GCC 6, but\nit might work with other compilers and versions.\n\nNo external library is necessary and there are no other requirements.\n\n.. _continuously tested: https://travis-ci.org/arximboldi/immer\n\nUsage\n-----\n\nThis is a **header only** library.  You can just copy the ``immer``\nsubfolder somewhere in your *include path*.\n\nIf you are using the `Nix package manager`_ (we strongly recommend it)\nyou can just::\n\n    nix-env -if https://github.com/arximboldi/immer/archive/master.tar.gz\n\nAlternatively, you can use `CMake`_ to install the library in your\nsystem once you have manually cloned the repository::\n\n    mkdir -p build && cd build\n    cmake .. && sudo make install\n\n.. _nix package manager: https://nixos.org/nix\n.. _cmake: https://cmake.org/\n\nInstalling immer using vcpkg\n-----------------------------\n\nYou can download and install immer using the [vcpkg](https://github.com/Microsoft/vcpkg) dependency manager::\n\n    git clone https://github.com/Microsoft/vcpkg.git\n    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n    ./vcpkg install immer\n\nThe immer port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\nDevelopment\n-----------\n\nIn order to develop the library, you will need to compile and run the\nexamples, tests and benchmarks.  These require some additional tools.\nThe easiest way to install them is by using the `Nix package\nmanager`_.  At the root of the repository just type::\n\n    nix-shell\n\nThis will download all required dependencies and create an isolated\nenvironment in which you can use these dependencies, without polluting\nyour system.\n\nThen you can proceed to generate a development project using `CMake`_::\n\n    mkdir build && cd build\n    cmake ..\n\nFrom then on, one may build and run all tests by doing::\n\n    make check\n\nIn order to build and run all benchmarks when running ``make check``,\nrun ``cmake`` again with the option ``-DCHECK_BENCHMARKS=1``.  The\nresults of running the benchmarks will be saved to a folder\n``reports/`` in the project root.\n\nLicense\n-------\n\n**This software is licensed under the Boost Software License 1.0**.\n\n.. image:: https://upload.wikimedia.org/wikipedia/commons/c/cd/Boost.png\n   :alt: Boost logo\n   :target: http://boost.org/LICENSE_1_0.txt\n   :align: right\n\nThe full text of the license is can be accessed `via this link\n<http://boost.org/LICENSE_1_0.txt>`_ and is also included\nin the ``LICENSE`` file of this software package.\n"
        },
        {
          "name": "WORKSPACE",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.017578125,
          "content": "ignore:\n  - tools\n"
        },
        {
          "name": "default.nix",
          "type": "blob",
          "size": 0.92578125,
          "content": "{pkgs ? import <nixpkgs> {}}:\nwith pkgs; let\n  inherit\n    (import (pkgs.fetchFromGitHub {\n      owner = \"hercules-ci\";\n      repo = \"gitignore.nix\";\n      rev = \"80463148cd97eebacf80ba68cf0043598f0d7438\";\n      sha256 = \"1l34rmh4lf4w8a1r8vsvkmg32l1chl0p593fl12r28xx83vn150v\";\n    }) {})\n    gitignoreSource\n    ;\n\n  nixFilter = name: type: !(lib.hasSuffix \".nix\" name);\n  srcFilter = src:\n    lib.cleanSourceWith {\n      filter = nixFilter;\n      src = gitignoreSource src;\n    };\nin\n  stdenv.mkDerivation rec {\n    name = \"immer-git\";\n    version = \"git\";\n    src = srcFilter ./.;\n    nativeBuildInputs = [cmake];\n    dontBuild = true;\n    dontUseCmakeBuildDir = true;\n    cmakeFlags = [\n      \"-Dimmer_BUILD_TESTS=OFF\"\n      \"-Dimmer_BUILD_EXAMPLES=OFF\"\n    ];\n    meta = {\n      homepage = \"https://github.com/arximboldi/immer\";\n      description = \"Postmodern immutable data structures for C++\";\n      license = lib.licenses.boost;\n    };\n  }\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "extra",
          "type": "tree",
          "content": null
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 4.681640625,
          "content": "{\n  \"nodes\": {\n    \"arximboldi-cereal-src\": {\n      \"flake\": false,\n      \"locked\": {\n        \"lastModified\": 1650443560,\n        \"narHash\": \"sha256-G8V5g0POddpukPmiWAX/MhnIhi+EEVE/P+MQGCGH/J0=\",\n        \"owner\": \"arximboldi\",\n        \"repo\": \"cereal\",\n        \"rev\": \"4bfaf5fee1cbc69db4614169092368a29c7607c4\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"arximboldi\",\n        \"repo\": \"cereal\",\n        \"type\": \"github\"\n      }\n    },\n    \"docs-nixpkgs\": {\n      \"flake\": false,\n      \"locked\": {\n        \"lastModified\": 1504644969,\n        \"narHash\": \"sha256-FCGfMedr9e5ePAEWOMhBmBs8CS0WiBqrlkGHGXV1Hc8=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"d0d905668c010b65795b57afdf7f0360aac6245b\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"d0d905668c010b65795b57afdf7f0360aac6245b\",\n        \"type\": \"github\"\n      }\n    },\n    \"flake-compat\": {\n      \"flake\": false,\n      \"locked\": {\n        \"lastModified\": 1696426674,\n        \"narHash\": \"sha256-kvjfFW7WAETZlt09AgDn1MrtKzP7t90Vf7vypd3OL1U=\",\n        \"owner\": \"edolstra\",\n        \"repo\": \"flake-compat\",\n        \"rev\": \"0f9255e01c2351cc7d116c072cb317785dd33b33\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"edolstra\",\n        \"repo\": \"flake-compat\",\n        \"type\": \"github\"\n      }\n    },\n    \"flake-utils\": {\n      \"inputs\": {\n        \"systems\": \"systems\"\n      },\n      \"locked\": {\n        \"lastModified\": 1705309234,\n        \"narHash\": \"sha256-uNRRNRKmJyCRC/8y1RqBkqWBLM034y4qN7EprSdmgyA=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"1ef2e671c3b0c19053962c07dbda38332dcebf26\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"type\": \"github\"\n      }\n    },\n    \"gitignore\": {\n      \"inputs\": {\n        \"nixpkgs\": [\n          \"nixpkgs\"\n        ]\n      },\n      \"locked\": {\n        \"lastModified\": 1703887061,\n        \"narHash\": \"sha256-gGPa9qWNc6eCXT/+Z5/zMkyYOuRZqeFZBDbopNZQkuY=\",\n        \"owner\": \"hercules-ci\",\n        \"repo\": \"gitignore.nix\",\n        \"rev\": \"43e1aa1308018f37118e34d3a9cb4f5e75dc11d5\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"hercules-ci\",\n        \"repo\": \"gitignore.nix\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1706925685,\n        \"narHash\": \"sha256-hVInjWMmgH4yZgA4ZtbgJM1qEAel72SYhP5nOWX4UIM=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"79a13f1437e149dc7be2d1290c74d378dad60814\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"NixOS\",\n        \"ref\": \"nixpkgs-unstable\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs-stable\": {\n      \"locked\": {\n        \"lastModified\": 1704874635,\n        \"narHash\": \"sha256-YWuCrtsty5vVZvu+7BchAxmcYzTMfolSPP5io8+WYCg=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"3dc440faeee9e889fe2d1b4d25ad0f430d449356\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"NixOS\",\n        \"ref\": \"nixos-23.11\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"pre-commit-hooks\": {\n      \"inputs\": {\n        \"flake-compat\": [\n          \"flake-compat\"\n        ],\n        \"flake-utils\": [\n          \"flake-utils\"\n        ],\n        \"gitignore\": [\n          \"gitignore\"\n        ],\n        \"nixpkgs\": [\n          \"nixpkgs\"\n        ],\n        \"nixpkgs-stable\": \"nixpkgs-stable\"\n      },\n      \"locked\": {\n        \"lastModified\": 1706424699,\n        \"narHash\": \"sha256-Q3RBuOpZNH2eFA1e+IHgZLAOqDD9SKhJ/sszrL8bQD4=\",\n        \"owner\": \"cachix\",\n        \"repo\": \"pre-commit-hooks.nix\",\n        \"rev\": \"7c54e08a689b53c8a1e5d70169f2ec9e2a68ffaf\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"cachix\",\n        \"repo\": \"pre-commit-hooks.nix\",\n        \"type\": \"github\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"arximboldi-cereal-src\": \"arximboldi-cereal-src\",\n        \"docs-nixpkgs\": \"docs-nixpkgs\",\n        \"flake-compat\": \"flake-compat\",\n        \"flake-utils\": \"flake-utils\",\n        \"gitignore\": \"gitignore\",\n        \"nixpkgs\": \"nixpkgs\",\n        \"pre-commit-hooks\": \"pre-commit-hooks\"\n      }\n    },\n    \"systems\": {\n      \"locked\": {\n        \"lastModified\": 1681028828,\n        \"narHash\": \"sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=\",\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"rev\": \"da67096a3b9bf56a91d16901293e51ba5b49a27e\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"type\": \"github\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 6.216796875,
          "content": "{\n  description = \"Immutable data structures\";\n\n  inputs = {\n    nixpkgs.url = github:NixOS/nixpkgs/nixpkgs-unstable;\n    flake-utils.url = \"github:numtide/flake-utils\";\n    flake-compat = {\n      url = \"github:edolstra/flake-compat\";\n      flake = false;\n    };\n    gitignore = {\n      url = \"github:hercules-ci/gitignore.nix\";\n      inputs.nixpkgs.follows = \"nixpkgs\";\n    };\n    pre-commit-hooks = {\n      url = \"github:cachix/pre-commit-hooks.nix\";\n      inputs = {\n        flake-compat.follows = \"flake-compat\";\n        flake-utils.follows = \"flake-utils\";\n        gitignore.follows = \"gitignore\";\n        nixpkgs.follows = \"nixpkgs\";\n      };\n    };\n    arximboldi-cereal-src = {\n      url = \"github:arximboldi/cereal\";\n      flake = false;\n    };\n    docs-nixpkgs = {\n      url = \"github:NixOS/nixpkgs/d0d905668c010b65795b57afdf7f0360aac6245b\";\n      flake = false;\n    };\n  };\n\n  outputs = {\n    self,\n    nixpkgs,\n    docs-nixpkgs,\n    flake-utils,\n    flake-compat,\n    pre-commit-hooks,\n    gitignore,\n    arximboldi-cereal-src,\n  }:\n    flake-utils.lib.eachDefaultSystem (system: let\n      pkgs = nixpkgs.legacyPackages.${system};\n\n      withLLVM = drv:\n        if pkgs.stdenv.isLinux\n        # Use LLVM for Linux to build fuzzers\n        then drv.override {stdenv = pkgs.llvmPackages_latest.stdenv;}\n        # macOS uses LLVM by default\n        else drv;\n\n      arximboldi-cereal = pkgs.callPackage ./nix/cereal.nix {inherit arximboldi-cereal-src;};\n\n      persist-inputs = with pkgs; [\n        fmt\n        arximboldi-cereal\n        xxHash\n        nlohmann_json\n      ];\n    in {\n      checks =\n        {\n          pre-commit-check = pre-commit-hooks.lib.${system}.run {\n            src = ./.;\n            hooks = {\n              alejandra.enable = true;\n              cmake-format.enable = true;\n              clang-format = {\n                enable = true;\n                types_or = pkgs.lib.mkForce [\"c\" \"c++\"];\n              };\n            };\n          };\n\n          inherit (self.packages.${system}) unit-tests fuzzers-debug;\n        }\n        // pkgs.lib.optionalAttrs pkgs.stdenv.isLinux {\n          unit-tests-valgrind = self.packages.${system}.unit-tests.overrideAttrs (prev: {\n            nativeBuildInputs = with pkgs; prev.nativeBuildInputs ++ [valgrind];\n            name = \"immer-unit-tests-valgrind\";\n            ninjaFlags = [\"tests\"];\n            checkPhase = ''\n              ctest -D ExperimentalMemCheck\n              valgrind --quiet --error-exitcode=99 --leak-check=full --errors-for-leak-kinds=all \\\n                --suppressions=./test/extra/persist/valgrind.supp \\\n                ./test/extra/persist/persist-tests\n            '';\n          });\n        };\n\n      devShells =\n        {\n          default = (withLLVM pkgs.mkShell) {\n            NIX_HARDENING_ENABLE = \"\";\n            inputsFrom = [\n              (import ./shell.nix {\n                inherit system nixpkgs;\n              })\n            ];\n\n            packages = with pkgs;\n              [\n                # for the llvm-symbolizer binary, that allows to show stacks in ASAN and LeakSanitizer.\n                llvmPackages_latest.bintools-unwrapped\n                cmake-format\n                alejandra\n                just\n                fzf\n                starship\n              ]\n              ++ persist-inputs;\n\n            shellHook =\n              self.checks.${system}.pre-commit-check.shellHook\n              + \"\\n\"\n              + ''\n                alias j=just\n                eval \"$(starship init bash)\"\n              '';\n          };\n        }\n        // pkgs.lib.optionalAttrs pkgs.stdenv.isLinux {\n          # doxygen doesn't work on macOS currently\n          docs = let\n            docsPkgs = import docs-nixpkgs {inherit system;};\n            docs = docsPkgs.callPackage ./nix/docs.nix {};\n          in\n            pkgs.mkShell {\n              packages = [\n                pkgs.just\n                pkgs.fzf\n                pkgs.starship\n                pkgs.cmake\n                pkgs.ninja\n\n                docsPkgs.doxygen\n                (docsPkgs.python.withPackages (ps: [\n                  ps.sphinx\n                  docs.breathe\n                  docs.recommonmark\n                ]))\n              ];\n\n              shellHook =\n                self.checks.${system}.pre-commit-check.shellHook\n                + \"\\n\"\n                + ''\n                  alias j=just\n                  eval \"$(starship init bash)\"\n                '';\n            };\n        };\n\n      packages = {\n        immer = let\n          inherit (gitignore.lib) gitignoreSource;\n          nixFilter = name: type: !(pkgs.lib.hasSuffix \".nix\" name);\n          srcFilter = src:\n            pkgs.lib.cleanSourceWith {\n              filter = nixFilter;\n              src = gitignoreSource src;\n            };\n        in\n          pkgs.callPackage nix/immer.nix {src = srcFilter ./.;};\n\n        default = self.packages.${system}.immer;\n\n        fuzzers-debug = (withLLVM self.packages.${system}.immer).overrideAttrs (prev: {\n          name = \"immer-fuzzers\";\n          # Fuzzers should be built with minimal dependencies to use them easily with OSS-Fuzz\n          buildInputs = with pkgs; [boehmgc];\n          nativeBuildInputs = with pkgs; [cmake ninja];\n          dontBuild = false;\n          dontStrip = true;\n          # fuzzers target is not built by default\n          ninjaFlags = [\"fuzzers\"];\n          cmakeBuildType = \"Debug\";\n          cmakeFlags = [\n            \"-DENABLE_ASAN=ON\"\n            \"-Dimmer_BUILD_TESTS=OFF\"\n            \"-Dimmer_INSTALL_FUZZERS=ON\"\n          ];\n        });\n\n        unit-tests = (withLLVM self.packages.${system}.immer).overrideAttrs (prev: {\n          name = \"immer-unit-tests\";\n          buildInputs = with pkgs; [catch2_3 boehmgc boost fmt] ++ persist-inputs;\n          nativeBuildInputs = with pkgs; [cmake ninja];\n          dontBuild = false;\n          doCheck = true;\n          # Building fuzzers but not running them, just to ensure they compile\n          ninjaFlags = [\"fuzzers tests\"];\n          checkPhase = ''\n            ninja test\n          '';\n          cmakeFlags = [\n            \"-DCMAKE_BUILD_TYPE=Debug\"\n            \"-Dimmer_BUILD_TESTS=ON\"\n            \"-Dimmer_BUILD_PERSIST_TESTS=ON\"\n            \"-Dimmer_BUILD_EXAMPLES=OFF\"\n            \"-DCXX_STANDARD=17\"\n          ];\n        });\n      };\n    });\n}\n"
        },
        {
          "name": "immer",
          "type": "tree",
          "content": null
        },
        {
          "name": "justfile",
          "type": "blob",
          "size": 1.583984375,
          "content": "[private]\ndefault:\n    @cd {{ invocation_directory() }}; just --choose\n\n_mk-dir name:\n    rm -rf {{ name }}\n    mkdir {{ name }}\n\nbuild-valgrind-path := \"build-valgrind-\" + os() + \"-\" + arch()\n\n# Create a build directory for a Debug build without ASAN, so that valgrind can work\nmk-build-valgrind: (_mk-dir build-valgrind-path)\n    cd {{ build-valgrind-path }} ; cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Debug -Dimmer_BUILD_TESTS=ON -Dimmer_BUILD_PERSIST_TESTS=ON -Dimmer_BUILD_EXAMPLES=OFF -DCXX_STANDARD=17\n\n[linux]\nrun-valgrind:\n    cd {{ build-valgrind-path }} ; ninja tests && ctest -D ExperimentalMemCheck\n\n[linux]\nrun-valgrind-persist:\n    cd {{ build-valgrind-path }} ; ninja persist-tests && valgrind --quiet --error-exitcode=99 --leak-check=full --errors-for-leak-kinds=all \\\n                --suppressions=../test/extra/persist/valgrind.supp \\\n                ./test/extra/persist/persist-tests\n\nbuild-asan-path := \"build-asan-\" + os() + \"-\" + arch()\n\n# Create a build directory for a Debug build with ASAN enabled\nmk-build-asan: (_mk-dir build-asan-path)\n    cd {{ build-asan-path }} ; cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Debug -DENABLE_ASAN=ON -Dimmer_BUILD_TESTS=ON -Dimmer_BUILD_PERSIST_TESTS=ON -Dimmer_BUILD_EXAMPLES=OFF -DCXX_STANDARD=17\n\nrun-tests-asan:\n    cd {{ build-asan-path }} ; ninja tests && ninja test\n\nbuild-docs-path := \"build-docs-\" + os() + \"-\" + arch()\n\n[linux]\nmk-build-docs: (_mk-dir build-docs-path)\n    rm -rf doc/_build\n    rm -rf doc/_doxygen\n    cmake -B {{ build-docs-path }} -G Ninja -Dimmer_BUILD_TESTS=off\n\n[linux]\nbuild-docs:\n    cmake --build {{ build-docs-path }} --target docs\n"
        },
        {
          "name": "nix",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.1142578125,
          "content": "\n# immer: immutable data structures for C++\n# Copyright (C) 2016, 2017, 2018 Juan Pedro Bolivar Puente\n#\n# This software is distributed under the Boost Software License, Version 1.0.\n# See accompanying file LICENSE or copy at http://boost.org/LICENSE_1_0.txt\n\n##\n\nimport os\nimport re\nimport sys\nimport platform\nimport subprocess\n\nfrom distutils.version import LooseVersion\nfrom setuptools import setup, Extension\nfrom setuptools.command.build_ext import build_ext\n\nclass CMakeExtension(Extension):\n    def __init__(self, name, sourcedir=''):\n        Extension.__init__(self, name, sources=[])\n        self.sourcedir = os.path.abspath(sourcedir)\n\nclass CMakeBuild(build_ext):\n\n    def run(self):\n        try:\n            subprocess.check_output(['cmake', '--version'])\n        except OSError:\n            raise RuntimeError(\n                \"CMake must be installed to build the following extensions: \" +\n                \", \".join(e.name for e in self.extensions))\n        for ext in self.extensions:\n            self.build_extension(ext)\n\n    def build_extension(self, ext):\n        extdir = os.path.abspath(os.path.dirname(\n            self.get_ext_fullpath(ext.name)))\n        cfg = 'Debug' if self.debug else 'Release'\n        if not os.path.exists(self.build_temp):\n            os.makedirs(self.build_temp)\n        subprocess.check_call([\n            'cmake', ext.sourcedir,\n            '-DCMAKE_BUILD_TYPE=' + cfg,\n            '-DCMAKE_LIBRARY_OUTPUT_DIRECTORY=' + extdir,\n            '-DPYTHON_EXECUTABLE=' + sys.executable,\n            '-DDISABLE_WERROR=1',\n        ], cwd=self.build_temp)\n        subprocess.check_call([\n            'cmake', '--build', '.',\n            '--config', cfg,\n            '--target', 'python',\n        ], cwd=self.build_temp)\n\nsetup(\n    name='immer',\n    version='0.0.0',\n    author='Juan Pedro Bolivar Puente',\n    author_email='raskolnikov@gnu.org',\n    description='Efficient immutable data structures',\n    long_description='',\n    packages=['immer'],\n    package_dir={'': 'extra/python'},\n    ext_modules=[CMakeExtension('immer_python_module', sourcedir='.')],\n    cmdclass=dict(build_ext=CMakeBuild),\n    zip_safe=False,\n)\n"
        },
        {
          "name": "shell-compat.nix",
          "type": "blob",
          "size": 0.3154296875,
          "content": "(\n  import\n  (\n    let\n      lock = builtins.fromJSON (builtins.readFile ./flake.lock);\n    in\n      fetchTarball {\n        url = \"https://github.com/edolstra/flake-compat/archive/${lock.nodes.flake-compat.locked.rev}.tar.gz\";\n        sha256 = lock.nodes.flake-compat.locked.narHash;\n      }\n  )\n  {src = ./.;}\n)\n.shellNix\n"
        },
        {
          "name": "shell.nix",
          "type": "blob",
          "size": 4.015625,
          "content": "{\n  toolchain ? \"\",\n  rev ? \"08ef0f28e3a41424b92ba1d203de64257a9fca6a\",\n  sha256 ? \"1mql1gp86bk6pfsrp0lcww6hw5civi6f8542d4nh356506jdxmcy\",\n  nixpkgs ?\n    builtins.fetchTarball {\n      name = \"nixpkgs-${rev}\";\n      url = \"https://github.com/nixos/nixpkgs/archive/${rev}.tar.gz\";\n      sha256 = sha256;\n    },\n  ...\n} @ args: let\n  # For the documentation tools we use an older Nixpkgs since the\n  # newer versions seem to be not working great...\n  pkgs = import nixpkgs (\n    if args ? system\n    then {inherit (args) system;}\n    else {}\n  );\n  catch2_3 =\n    if pkgs ? catch2_3\n    then pkgs.catch2_3\n    else\n      pkgs.callPackage ./nix/catch2_3.nix {\n        stdenv = tc.stdenv;\n      };\n  oldNixpkgsSrc = pkgs.fetchFromGitHub {\n    owner = \"NixOS\";\n    repo = \"nixpkgs\";\n    rev = \"d0d905668c010b65795b57afdf7f0360aac6245b\";\n    sha256 = \"1kqxfmsik1s1jsmim20n5l4kq6wq8743h5h17igfxxbbwwqry88l\";\n  };\n  oldNixpkgs = import oldNixpkgsSrc (\n    if args ? system\n    then {inherit (args) system;}\n    else {}\n  );\n  docs = oldNixpkgs.callPackage ./nix/docs.nix {};\n  benchmarks = pkgs.callPackage ./nix/benchmarks.nix {};\n  tc =\n    if toolchain == \"\"\n    then {\n      stdenv = pkgs.stdenv;\n      cc = pkgs.stdenv.cc;\n    }\n    else if toolchain == \"gnu-6\"\n    then {\n      stdenv = pkgs.gcc6Stdenv;\n      cc = pkgs.gcc6;\n    }\n    else if toolchain == \"gnu-7\"\n    then {\n      stdenv = pkgs.gcc7Stdenv;\n      cc = pkgs.gcc7;\n    }\n    else if toolchain == \"gnu-8\"\n    then {\n      stdenv = pkgs.gcc8Stdenv;\n      cc = pkgs.gcc8;\n    }\n    else if toolchain == \"gnu-9\"\n    then {\n      stdenv = pkgs.gcc9Stdenv;\n      cc = pkgs.gcc9;\n    }\n    else if toolchain == \"gnu-10\"\n    then {\n      stdenv = pkgs.gcc10Stdenv;\n      cc = pkgs.gcc10;\n    }\n    else if toolchain == \"gnu-11\"\n    then {\n      stdenv = pkgs.gcc11Stdenv;\n      cc = pkgs.gcc11;\n    }\n    else if toolchain == \"llvm-39\"\n    then {\n      stdenv = pkgs.llvmPackages_39.libcxxStdenv;\n      cc = pkgs.llvmPackages_39.libcxxClang;\n    }\n    else if toolchain == \"llvm-4\"\n    then {\n      stdenv = pkgs.llvmPackages_4.libcxxStdenv;\n      cc = pkgs.llvmPackages_4.libcxxClang;\n    }\n    else if toolchain == \"llvm-5\"\n    then {\n      stdenv = pkgs.llvmPackages_5.libcxxStdenv;\n      cc = pkgs.llvmPackages_5.libcxxClang;\n    }\n    else if toolchain == \"llvm-6\"\n    then {\n      stdenv = pkgs.llvmPackages_6.libcxxStdenv;\n      cc = pkgs.llvmPackages_6.libcxxClang;\n    }\n    else if toolchain == \"llvm-7\"\n    then {\n      stdenv = pkgs.llvmPackages_7.libcxxStdenv;\n      cc = pkgs.llvmPackages_7.libcxxClang;\n    }\n    else if toolchain == \"llvm-8\"\n    then {\n      stdenv = pkgs.llvmPackages_8.libcxxStdenv;\n      cc = pkgs.llvmPackages_8.libcxxClang;\n    }\n    else if toolchain == \"llvm-9\"\n    then {\n      stdenv = pkgs.llvmPackages_9.stdenv;\n      cc = pkgs.llvmPackages_9.clang;\n    }\n    else if toolchain == \"llvm-10\"\n    then {\n      stdenv = pkgs.llvmPackages_10.stdenv;\n      cc = pkgs.llvmPackages_10.clang;\n    }\n    else if toolchain == \"llvm-11\"\n    then {\n      stdenv = pkgs.llvmPackages_11.stdenv;\n      cc = pkgs.llvmPackages_11.clang;\n    }\n    else if toolchain == \"llvm-12\"\n    then {\n      stdenv = pkgs.llvmPackages_12.stdenv;\n      cc = pkgs.llvmPackages_12.clang;\n    }\n    else if toolchain == \"llvm-13\"\n    then {\n      stdenv = pkgs.llvmPackages_13.stdenv;\n      cc = pkgs.llvmPackages_13.clang;\n    }\n    else abort \"unknown toolchain\";\nin\n  tc.stdenv.mkDerivation rec {\n    name = \"immer-env\";\n    buildInputs = with pkgs;\n      [\n        tc.cc\n        git\n        catch2_3\n        cmake\n        pkg-config\n        ninja\n        lldb\n        boost\n        boehmgc\n        fmt\n      ]\n      ++ lib.optionals stdenv.isLinux [\n        gdb\n        ccache\n        valgrind\n        benchmarks.c_rrb\n        benchmarks.steady\n        benchmarks.chunkedseq\n        benchmarks.immutable_cpp\n        benchmarks.hash_trie\n        oldNixpkgs.doxygen\n        (oldNixpkgs.python.withPackages (ps: [\n          ps.sphinx\n          docs.breathe\n          docs.recommonmark\n        ]))\n      ];\n    hardeningDisable = [\"fortify\"];\n  }\n"
        },
        {
          "name": "spm.cpp",
          "type": "blob",
          "size": 0.064453125,
          "content": "\n#include <immer/vector.hpp>\n\n// Just so we can compile with SPM.\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}