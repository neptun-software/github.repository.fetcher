{
  "metadata": {
    "timestamp": 1736565381582,
    "page": 218,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "NerdLang/nerd",
      "stars": 3594,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0048828125,
          "content": ".nerd"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0732421875,
          "content": "MIT License\n\nCopyright (c) 2021 NerdLang - Adrien THIERRY and contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.19140625,
          "content": "<p>\nNo VM. No Bytecode. No packaging. No Garbage Collector. Fully compiled to native binaries.\n</p>\n\n# NectarJS becomes Nerd\n\nCompile JavaScript and NerdLang in native binaries.\n\n# What is NerdLang\n\nNerdLang is a substract of JS with some additions, focus on efficiency.\n\n**Nerd** is a **JavaScript native compiler** aiming to make JavaScript universal, Nerd is able to compile native apps for Windows, Mac, Linux, iOS, Android, Raspberry, STM32 and more.\n\n> **Nerd** is in active development, join us on [Discord](https://discord.gg/cpe2UuN) if you need more information.\n\n- [Roadmap on Trello](https://trello.com/invite/b/6F4rvEj2/ATTI8842296bacc92724fa8b4114fe1dc80aA9FA431B/nerd)\n\n## Main objectives\n* Supporting EcmaScript 3 standard (then 5, 6 ...)\n* Supporting NodeJS and NPM ecosystem\n* Supporting a maximum of platforms (Windows, Mac, Linux, Android, Arduino, ...)\n* Being secure\n* Embeding debuging tools\n* Compile everything that can be transpiled in JS: Ruby (Opal), Python (Transcript, Brython, JavaScrypthon), TypeScript ...\n\n# Get started\n\n## Installation\n\n### Install GCC/CLang for your platform\n\n- Windows\nInstall Mingw and Clang for Windows here: http://winlibs.com/ or Clang here: https://releases.llvm.org/\n\nYou can also install Linux for Windows and use a linux system on Windows\n\nYou need MinGW with POSIX threads\n\n- Linux / FreeBSD\nInstall it with your distro (apt install gcc, yum install gcc, ...).\nYou can use GCC, CLANG, as well as any derivative of those compilers (arm-gcc ...)\n\n- Apple iOS\nInstall xCode and you are ready.\n\n\nYou can check your installation with `npm start njs_test`\n\n## Usage\n\nSimplest way to use Nerd:\n```\nnerd file.js / file.ng\n```\n\nThe output file name will be automatically chosen regarding the target. You can specify another output with `-o something.out`\n\nYou can select a preset\n```\nnerd file.js --preset [none|speed|size]\n```\n\nYou can also run the compiled executable just after compilation using --run:\n```\nnerd file.js --run\n```\n\nYou can enable the quiet mode with --quiet:\n```\nnerd file.js --quiet\n```\n\nChanging the stack size (useful on Windows):\n```\nnerd --stack 10000000 flood.js\n```\n\nFor more informations about compilation output, use `--verbose`\n\nFor help, use `--help`\n\n# Benchmarks\n\n* _Need update_\n\nCompiled with GCC v10.2.0 on Windows\n\n|           | NodeJS v12.8.1 | QuickJS 2020-07-05 | Nerd v0.6.104 |\n|-----------|----------------|--------------------|-------------------|\n| sort(1e6) [No preset]                                               |\n| - Time:   |      0.33s     |         -          |     **0.33s**     |\n| - Memory: |      7.0Mb     |         -          |     **1.0Mb**     |\n|- Filesize:|     28.6Mb     |         -          |     **424Kb**     |\n| sort(1e6) [+Size preset]                                            |\n|- Filesize:|     28.6Mb     |         -          |     **260Kb**     |\n| sort(1e6) [+Speed preset]                                           |\n| - Time:   |      0.33s     |         -          |     **0.20s**     |\n| matrix(256) [No preset]                                             |\n| - Time:   |      0.33s     |         -          |     **0.21s**     |\n| - Memory: |      7.0Mb     |         -          |     **1.0Mb**     |\n|- Filesize:|     28.6Mb     |         -          |     **405Kb**     |\n| matrix(256) [+Size preset]                                          |\n|- Filesize:|     28.6Mb     |         -          |     **251Kb**     |\n| matrix(1e6) [+Speed preset]                                         |\n| - Time:   |      0.33s     |         -          |     **0.11s**     |\n\n* _Some code can be evaluated compile-time_\n\n# Supported platforms\n\nActively tested for\n\n- Windows\n* - win-x86-32\n* - win-x86-64\n- Linux\n* - linux-x86-32\n* - linux-x86-64\n* - linux-arm32v7\n- Arduino\n* - arduino-nano\n* - arduino-uno\n* - arduino-mega1280\n* - arduino-mega2560\n- STM32 Nucleo\n* - nucleo-l152re\n* - nucleo-l432kc\n* - nucleo-f446re\n- Mobile\n* - android\n- Web\n* - wasm\n* - wast\n* - asm-js\n- macOS\n- Sun OS\n\n# Development\n\nThis project is in heavy development and a lot features are not implemented yet.\n\n## ECMAScript Support\n\nNerd already supports more than 80% of ES3.\n\n<details>\n<summary>Prototype</summary>\n<br>\n \n* .call()\n* .bind()\n\n</details>\n\n<details>\n<summary>Array</summary>\n<br>\n \n* .length\n* .push(value)\n\n</details>\n\n<details>\n<summary>Class</summary>\n<br>\n \n* constructor\n* methods\n* static methods\n\n</details>\n\n<details>\n<summary>Console</summary>\n<br>\n \n* .log(variadic)\n\n</details>\n\n<details>\n<summary>JSON</summary>\n<br>\n \n* .parse(str) \n* .stringify(obj)\n\n</details>\n\n<details>\n<summary>Math **(DONE)**</summary>\n<br>\n \n* [All static methods and constants]\n\n</details>\n\n<details>\n<summary>Object</summary>\n<br>\n \n* .keys\n\n</details>\n\n<details>\n<summary>performance</summary>\n<br>\n \n* timeOrigin\n* .now()\n\n</details>\n\n<details>\n<summary>String</summary>\n<br>\n\n* .length\n* .toString()\n* .indexOf(needle)\n* .lastIndexOf(needle)\n* .search(needle)\n* .slice(start, end)\n* .substring(start, end)\n* .substr(start, end)\n* .replace(needle, str)\n\n</details>\n\n<details>\n<summary>Syntax</summary>\n<br>\n \n* for\n* while / do while\n* if / else if / else\n* try / catch / finally\n* function / lambda\n* class\n* new\n* typeof\n* instanceof\n* undefined\n* null\n* Infinite\n* NaN / isNaN\n* true / false\n\n</details>"
        },
        {
          "name": "base",
          "type": "tree",
          "content": null
        },
        {
          "name": "compiler",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "external",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "nerd.js",
          "type": "blob",
          "size": 17.525390625,
          "content": "/*\n\tCopyright (c) 2021 NerdLang - Adrien THIERRY and contributors\n\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\n\tof this software and associated documentation files (the \"Software\"), to deal\n\tin the Software without restriction, including without limitation the rights\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\tcopies of the Software, and to permit persons to whom the Software is\n\tfurnished to do so, subject to the following conditions:\n\n\tThe above copyright notice and this permission notice shall be included in all\n\tcopies or substantial portions of the Software.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\tSOFTWARE.\n\n*/\n\nglobal.fs = require(\"fs\");\nglobal.os = require(\"os\");\nglobal.path = require(\"path\");\nglobal.process = require(\"process\");\nglobal.child_process = require(\"child_process\");\nglobal.execSync = global.child_process.execSync;\n\nglobal.PACKAGE = JSON.parse(global.fs.readFileSync(global.path.join(__dirname, \"package.json\")));\nglobal.VERSION = global.PACKAGE.version;\n\nglobal.extern = global.path.join(__dirname, \"external\");\n\nvar parseCLI = require(\"./base/cli/cliParser.js\");\nvar getExt = require(\"./base/util/getExt.js\");\nvar getTips = require(\"./base/util/getTips.js\");\nvar Flash = require(\"./base/util/flash.js\");\nglobal.copyRecursiveSync = require(\"./base/util/copyRecursive.js\");\nglobal.copyDirSync = require(\"./base/util/copyDirSync.js\");\n\nvar CURRENT = global.process.cwd();\nvar TARGET = require(\"./base/compiler/target.js\");\n\n\nglobal.PLATFORM = os.platform();\nglobal.ARCH = os.arch();\n\nglobal.COMPILER = {};\nglobal.NERD_PATH = __dirname;\nvar DEFAULT_COMPILER = \"native\";\n\nglobal.CLI = parseCLI(process.argv);\n\nif(global.CLI.error)\n{\n  console.log(global.CLI.msg);\n  return 1;\n}\nrequire(\"./lib/env.js\");\nglobal.parseCode = require(\"./lib/parser.js\");\nglobal.verifyFlow = require(\"./lib/verify.js\");\n\n\nglobal.CONFIGPATH = global.os.homedir() + path.sep + \".nerd\";\nglobal.CONFIGFILE = global.CONFIGPATH + \"/\" + \"nerd.json\";\nglobal.CONFIG = {};\n\n\nvar ACTION = \"build\";\nif(global.CLI.cli[\"--help\"] || global.CLI.cli[\"-h\"]) ACTION = \"help\";\nelse if(global.CLI.cli[\"--example\"] || global.CLI.cli[\"--examples\"]) ACTION = \"example\";\nelse if(global.CLI.cli[\"--version\"] || global.CLI.cli[\"-v\"]) ACTION = \"version\";\nelse if(global.CLI.cli[\"--project\"]) ACTION = \"showproject\";\nelse if(global.CLI.cli[\"--clean\"] || global.CLI.cli[\"--purge\"]) ACTION = \"clean\";\nelse if(global.CLI.cli[\"--setauthor\"] || global.CLI.cli[\"--setid\"] || global.CLI.cli[\"--setkey\"] || global.CLI.cli[\"--sethash\"] || global.CLI.cli[\"--setsdk\"] || global.CLI.cli[\"--setndk\"] || global.CLI.cli[\"--setwin_inc_ucrt\"] || global.CLI.cli[\"--setwin_lib_ucrt\"] || global.CLI.cli[\"--setwin_lib_um\"] || global.CLI.cli[\"--setapi\"] || global.CLI.cli[\"--setport\"] || global.CLI.cli[\"--setxcode\"]) ACTION = \"setconfig\";\nelse if(global.CLI.cli[\"--config\"]) ACTION = \"showconfig\";\nelse if(global.CLI.cli[\"--reinit\"]) ACTION = \"reinitconfig\";\n\n\nvar getExampleFiles = function(dir, list)\n{\n\tif(!list)\n\t{\n\t\tlist = [];\n\t}\n\n    var files = fs.readdirSync(dir);\n    for (var i in files)\n    {\n        var name = dir + path.sep + files[i];\n        if (fs.statSync(name).isDirectory())\n        {\n            getExampleFiles(name, list);\n        }\n        else\n        {\n            list.push(name);\n        }\n    }\n    return list;\n}\n\nvar copyExample = function()\n{\n  var folder = [\"c\"];\n  var list = getExampleFiles(path.join(__dirname, \"example\"));\n  for(var l in list)\n  {\n    var name = list[l].split(path.sep);\n    if(name[name.length - 2] && folder.indexOf(name[name.length - 2]) > -1)\n    {\n      try\n      {\n        fs.mkdirSync(name[name.length - 2]);\n      }catch(e){}\n      name = name[name.length - 2] + \"/\" + name[name.length - 1];\n    }\n    else name = name[name.length - 1];\n    var content = fs.readFileSync(list[l]);\n    fs.writeFileSync(name, content);\n    console.log(\"[+] Copy of \" + name + \" done\");\n  }\n}\n\nvar Init = function()\n{\n    if(!fs.existsSync(CONFIGPATH)) fs.mkdirSync(CONFIGPATH);\n  try\n  {\n      var writeConfig = false;\n      var config = \"\";\n      config = fs.readFileSync(CONFIGFILE);\n      config = JSON.parse(config);\n      if(!config.version)\n      {\n        config.version = VERSION;\n        config.port = 443;\n        fs.writeFileSync(CONFIGFILE, JSON.stringify(config));\n      }\n  }\n  catch (e)\n  {\n    writeConfig = true;\n  }\n\n  if(!config || writeConfig)\n  {\n    var defaultConfig = { author: os.userInfo().username, id: \"\", key:\"\", hash:\"SHA256\", api:\"api.nerdlang.com\", port:443, version: VERSION, sdk: \"\", ndk: \"\", win_inc_ucrt: \"\", win_lib_ucrt: \"\", win_lib_um: \"\", xcode: \"/Applications/Xcode.app\"};\n    fs.writeFileSync(CONFIGFILE, JSON.stringify(defaultConfig));\n  }\n}\n\nvar readConfig = function()\n{\n  try\n  {\n    var tmp = fs.readFileSync(CONFIGFILE);\n    CONFIG = JSON.parse(tmp);\n  }\n  catch (e)\n  {\n    Init();\n    readConfig();\n  }\n}\n\nvar showConfig = function(str)\n{\n  console.log();\n  if(str) console.log(str);\n  else console.log(\"[*] Current config :\");\n  console.log(\"author   : \" + CONFIG.author);\n  console.log(\"id   : \" + CONFIG.id);\n  console.log(\"key  : \" + CONFIG.key);\n  console.log(\"hash : \" + CONFIG.hash);\n  console.log(\"api : \" + CONFIG.api);\n  console.log(\"port : \" + CONFIG.port);\n  console.log(\"version : \" + VERSION);\n  console.log(\"Android SDK : \" + CONFIG.sdk);\n  console.log(\"Android NDK : \" + CONFIG.ndk);\n  console.log(\"Windows Include UCRT : \" + CONFIG.win_inc_ucrt);\n  console.log(\"Android Lib UCRT : \" + CONFIG.win_lib_ucrt);\n  console.log(\"Android Lib UM : \" + CONFIG.win_lib_um);\n  console.log(\"iOS xCode : \" + CONFIG.xcode);\n  console.log();\n}\n\nvar setConfig = function()\n{\n  try\n  {\n    if(global.CLI.cli[\"--setauthor\"]) CONFIG.author = global.CLI.cli[\"--setauthor\"].argument;\n    if(global.CLI.cli[\"--setid\"]) CONFIG.id = global.CLI.cli[\"--setid\"].argument;\n    if(global.CLI.cli[\"--setkey\"]) CONFIG.key = global.CLI.cli[\"--setkey\"].argument;\n    if(global.CLI.cli[\"--setapi\"]) CONFIG.api = global.CLI.cli[\"--setapi\"].argument;\n    if(global.CLI.cli[\"--setport\"]) CONFIG.port = parseInt(global.CLI.cli[\"--setport\"].argument);\n    //if(global.CLI.cli[\"--setsdk\"]) CONFIG.sdk = global.CLI.cli[\"--setsdk\"].argument.replace(/\\\\/g, \"\\\\\\\\\").replace(/:/g, \"\\\\\\:\"); // for android \n    //if(global.CLI.cli[\"--setndk\"]) CONFIG.ndk = global.CLI.cli[\"--setndk\"].argument.replace(/\\\\/g, \"\\\\\\\\\").replace(/:/g, \"\\\\\\:\"); // for android\n    if(global.CLI.cli[\"--setwin_ucrt\"]) CONFIG.win_ucrt = global.CLI.cli[\"--setwin_ucrt\"].argument;\n    if(global.CLI.cli[\"--setwin_inc_ucrt\"]) CONFIG.win_inc_ucrt = global.CLI.cli[\"--setwin_inc_ucrt\"].argument;\n    if(global.CLI.cli[\"--setwin_lib_ucrt\"]) CONFIG.win_lib_ucrt = global.CLI.cli[\"--setwin_lib_ucrt\"].argument;\n    if(global.CLI.cli[\"--setwin_lib_um\"]) CONFIG.win_lib_um = global.CLI.cli[\"--setwin_lib_um\"].argument;\n    if(global.CLI.cli[\"--setxcode\"]) CONFIG.xcode = global.CLI.cli[\"--setxcode\"].argument;\n\n\t/*\n    if(isNaN(CONFIG.port))\n    {\n      console.dir(\"[!] This port is not valid : '\" + global.CLI.cli[\"--setport\"].argument +\"', please specify a number.\");\n      return;\n    }\n\t*/\n\n    if(global.CLI.cli[\"--sethash\"])\n    {\n      var hash = global.CLI.cli[\"--sethash\"].argument.toUpperCase();\n      if(validHash.indexOf(hash) < 0)\n      {\n        console.dir(\"[!] Hash is not valid and won't be saved. Valid hash are : MD5, SHA256 ans SHA512\");\n      }\n      else\n      {\n          CONFIG.hash = hash;\n      }\n    }\n\n    fs.writeFileSync(CONFIGFILE, JSON.stringify(CONFIG));\n  }\n  catch (e)\n  {\n    console.log(e);\n  }\n}\n\nvar reinitConfig = function()\n{\n  try\n  {\n    var defaultConfig = { author: os.userInfo().username, id: \"\", key:\"\", hash:\"SHA256\", api:\"api.nerdlang.com\", \"port\":443, sdk: \"\", ndk: \"\", win_inc_ucrt: \"\", win_lib_ucrt: \"\", win_lib_um: \"\", xcode: \"/Applications/Xcode.app\"};\n    fs.writeFileSync(CONFIGFILE, JSON.stringify(defaultConfig));\n    readConfig();\n    showConfig(\"[*] Config reinitialized :\");\n  } catch (e)\n  {\n      console.log(e);\n  }\n}\n\nvar showProject = function()\n{\n  var project = \"project.json\";\n  if(global.CLI.stack && global.CLI.stack.length > 0)\n  {\n    project = global.CLI.stack[global.CLI.stack.length - 1];\n  }\n  try\n  {\n    var pConf = fs.readFileSync(project);\n    var jConf = JSON.parse(pConf);\n    printProject(jConf);\n  }\n  catch (e)\n  {\n    console.dir(\"[!] Error : \" + e.message);\n  }\n\n}\n\nvar Clean = function(purge)\n{\n  var project = \"project.json\";\n  if(global.CLI.stack && global.CLI.stack.length > 0)\n  {\n    project = global.CLI.stack[global.CLI.stack.length - 1];\n  }\n  try\n  {\n    var pConf = fs.readFileSync(project);\n    var jConf = JSON.parse(pConf);\n    if(jConf.main)\n    {\n      if( (global.CLI.cli[\"--purge\"] || purge) && jConf.out)\n      {\n        var outFile = jConf.out;\n        if(jConf.out[0] != path.sep)\n        {\n          outFile = path.join(path.dirname(project), jConf.out);\n        }\n        try{fs.unlinkSync(outFile);}catch(e){}\n      }\n    }\n    try\n\t{\n\t\tfs.unlinkSync(project);\n\t}catch(e){}\n  }\n  catch (e)\n  {\n    console.dir(\"[!] Error : \" + e.message);\n  }\n}\n\nvar printProject = function(obj)\n{\n  console.log();\n  console.log(\"[*] Project configuration :\\n\");\n  console.log(\"Main file : \" + obj.main);\n  console.log(\"Output    : \" + obj.out);\n  console.log(\"Target    : \" + obj.target);\n  console.log(\"Preset    : \" + obj.preset);\n  console.log();\n}\n\nvar Build = function(prepare)\n{ \n\tglobal.DEBUG = false;\n\tif(global.CLI.cli[\"--debug\"])\n\t{\n\t\tglobal.DEBUG = true;\n\t}\n  if(global.CLI.cli[\"--build\"]) DEFAULT_COMPILER = global.CLI.cli[\"--build\"].argument;\n  else if(global.CLI.cli[\"-b\"]) DEFAULT_COMPILER = global.CLI.cli[\"-b\"].argument;\n  \n  COMPILER = require(path.join(__dirname, \"compiler\", DEFAULT_COMPILER, \"compiler.js\"));\n  \n  if(global.CLI.cli[\"--compiler\"] && global.CLI.cli[\"--compiler\"].argument) COMPILER.COMPILER = global.CLI.cli[\"--compiler\"].argument;\n  else if(global.CLI.cli[\"-c\"] && global.CLI.cli[\"-c\"].argument) COMPILER.COMPILER = global.CLI.cli[\"-c\"].argument;\n\n  var preset;\n  if(global.CLI.cli[\"--preset\"] && global.CLI.cli[\"--preset\"].argument) preset = global.CLI.cli[\"--preset\"].argument;\n\n  var env;\n  if(global.CLI.cli[\"--env\"] && global.CLI.cli[\"--env\"].argument) env = global.CLI.cli[\"--env\"].argument;\n\n  if(!preset) preset = \"speed\";\n  COMPILER.preset = preset;\n  \n  if(!env) env = \"std\";\n\n\tvar target;\n  if(global.CLI.cli[\"--target\"] && global.CLI.cli[\"--target\"].argument) target = global.CLI.cli[\"--target\"].argument;\n\tCOMPILER.TARGET = target;\n\n\tvar spec;\n  if(global.CLI.cli[\"--spec\"] && global.CLI.cli[\"--spec\"].argument) spec = global.CLI.cli[\"--spec\"].argument;\n\tCOMPILER.SPEC = spec;\n\n\tvar _tmp;\n\tif(global.CLI.cli[\"--tmp\"] && global.CLI.cli[\"--tmp\"].argument)\n\t\t_tmp = path.resolve(global.CLI.cli[\"--tmp\"].argument);\n\telse {\n\t\tvar _current = process.cwd();\n\t\tvar _npath = path.join(_current, \".nerd\");\n\t\t_tmp = path.join(_npath, Math.random().toString(36).substr(2, 5));\n\t}\n\tCOMPILER.TMP_FOLDER = _tmp;\n\n  if(!global.CLI.stack || global.CLI.stack.length < 1)\n  {\n    console.error(\"[!] Missing file to compile or project.json path, 'nerd --help' if you need help\");\n    return;\n  }\n  else\n  {\n\tvar QUIET = false;\n    var _in = global.CLI.stack[0];\n\tvar main;\n    COMPILER.IN = _in;\n    fs.readFile(_in, function(err, fileData)\n    {\n      if(err)\n      {\n        console.error(\"[!] Error : \" + err.message);\n        return;\n      }\n      else\n      {\n\n        Check(_in);\n\t\t\n        var ext = \"ng\";\n        var _Ext = _in.split(\".\");\n        if(_Ext.length > 1) ext = _Ext[_Ext.length - 1];\n\n\t\t/*** CREATE COMPIL ENV ***/\n\t\tvar _current = process.cwd();\n\t\tvar _npath = path.join(_current, \".nerd\");\n\t\ttry { fs.mkdirSync(_npath); } catch(e){};\n\t\tif(COMPILER.ENV.init) COMPILER.ENV.init(COMPILER.TMP_FOLDER);\n\t\telse try { fs.mkdirSync(COMPILER.TMP_FOLDER); } catch(e){};\n\n\t\t/*** PREPARE SRC ***/\n\t\tvar _libOut = COMPILER.TMP_FOLDER;\n\t\tif(COMPILER.ENV.prepare)\n\t\t{\n\t\t\tvar _tmpLibOut = COMPILER.ENV.prepare(COMPILER.TMP_FOLDER);\n\t\t\tif(_tmpLibOut) _libOut = _tmpLibOut;\n\t\t}\n\n\t\tCOMPILER.Prepare(_libOut);\n\n        var fProject = false;\n        var prjectConf = {};\n        if(path.basename(_in) == \"project.json\")\n        {\n          try\n          {\n              projectConf = JSON.parse(fileData);\n              fProject = true;\n              single = false;\n          }\n          catch (e)\n          {\n            console.error(\"[!] Error with project.json : \" + e.message);\n            return;\n          }\n        }\n\n\t\t/*** GET FILES NAME ***/\n\t\tvar _binoutput = \"\";\n\t\tif(fProject)\n\t\t{\n\t\t\t_binoutput = projectConf.out;\n\t\t}\n\t\telse _binoutput = path.basename(_in).slice(0, path.basename(_in).length - path.extname(_in).length);\n\t\t\n\t\tif(global.CLI.cli[\"-o\"])\n\t\t{\n\t\t\t_binoutput = global.CLI.cli[\"-o\"].argument;\n\t\t}\n\t\telse if(global.CLI.cli[\"--out\"])\n\t\t{\n\t\t\t_binoutput = global.CLI.cli[\"--out\"].argument;\n\t\t}\n\t\t\n\t\t_binoutput = path.join(process.cwd(), _binoutput);\n\t\t\n\t\tvar _cout = path.join(COMPILER.TMP_FOLDER, path.basename(_in).slice(0, path.basename(_in).length - path.extname(_in).length) + \".cpp\");\n\n\t\t_binoutput = COMPILER.Out(_binoutput);\n\t\n\t\tvar projTo = \"\";\n\t\tvar tmp = _in.split(\"/\");\n\n\t\tprojTo = _binoutput;\n\t\n\t\tmain = _in.split(path.sep);\n\t\tmain = main[main.length - 1];\n\n\t\tvar tips = \"\";\n\n\t\tif(!QUIET) console.log(\"[*] Generating source file\");\n\t\n\t\tvar _code = fs.readFileSync(path.resolve(_in)).toString();\n\n\t\tglobal.array_of_code = _code.split(os.EOL);\n\t\t_code = COMPILER.Parse(_code, _in);\n    \n\t\tif(COMPILER.ENV.write)\n\t\t{\n\t\t\tCOMPILER.ENV.write(COMPILER.MAIN, _cout);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif((!global.CLI.cli[\"--profile\"]) || global.CLI.cli[\"--profile\"].argument != \"use\")\n\t\t\t{\n\t\t\t\tfs.writeFileSync(_cout, COMPILER.MAIN);\n\t\t\t}\n\t\t}\n\n\t\tif(global.CLI.cli[\"--generate\"])\n\t\t{\n\t\t\tif(!QUIET) console.log(\"[*] Source generated in \" + path.dirname(_cout));\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tif(!QUIET) console.log(\"[*] Compiling with preset: \" + COMPILER.preset);\n\t\ttry \n\t\t{\n\t\t\tCOMPILER.Compile(COMPILER.TMP_FOLDER, _cout);\n\t\t}\n\t\tcatch(e)\n\t\t{\n\t\t\tconsole.log(e);\n\t\t\tconsole.log(\"[!] Compilation error\");\n\t\t\tprocess.exit(1);\n    }\n    \n    if(COMPILER.ENV.post) COMPILER.ENV.post();\n\n    try \n\t\t{\n\t\t\tfs.chmodSync(_binoutput, \"755\");\n\t\t}\n\t\tcatch(e){}\n\t\t\n\t\tif(COMPILER.Package) COMPILER.Package();\n\t\t\n\t\tprocess.chdir(NERD_PATH);\n\t\t\n\t\tif(!global.CLI.cli[\"--conserve\"])\n\t\t{\n\t\t\tvar _current = process.cwd();\n\t\t\tprocess.chdir(_current);\n\t\t\tfs.rmSync(COMPILER.TMP_FOLDER, {recursive: true});\n\t\t}\n\t\t\n\t\tvar verb = false;\n\t\tif(global.CLI.cli[\"--verbose\"]) verb = true;\n\t\t\n    var bin;\n    try \n\t\t{\n      bin = fs.statSync(_binoutput);\n\t\t}\n    catch(e){}\n    \n    if(COMPILER.ENV.clean && typeof(COMPILER.ENV.clean) == \"function\")\n    {\n      COMPILER.ENV.clean();\n    }\n\n\t\tif(verb && bin)\n\t\t{\n\t\t\tconsole.log(\"[+] Compilation done\\n\");\n\t\t\tconsole.log(\"[*] Informations :\\n\");\n\t\t\tvar size = \"Size      : \";\n\t\t\tif(bin.size < 1000) size += bin.size + \" o\";\n\t\t\telse if(bin.size < 1000000) size += (bin.size / 1000) + \" ko\";\n\t\t\telse size += (bin.size / 1000000) + \" mo\";\n\t\t\tconsole.log(size);\n\t\t\tconsole.log(\"Main file : \" + main);\n\t\t\tconsole.log(\"Output    : \" + projTo);\n\t\t\tconsole.log(\"Preset    : \" + preset);\n\t\t}\n\t\t\n\t\tif(global.CLI.cli[\"--tips\"] && tips && tips.length > 0) console.log(\"\\n\" + tips + \"\\n\");\n\n\t\tif(global.CLI.cli[\"--flash\"]) Flash(projTo, global.CLI.cli[\"--flash\"].argument, target, verb);\n\t\t\n\t\tif(global.CLI.cli[\"--run\"])\n\t\t{\n\t\t\tconsole.log();\n      console.log(\"[*] Executing \" + _binoutput);\n      if(!COMPILER.ENV.run)\n      {\n        var _binexec = child_process.spawnSync(_binoutput, \n        [],\n        {\n\t\t  detached: false,\n          stdio: [process.stdin, process.stdout, process.stderr],\n          cwd: process.cwd(),\n          env: process.env\n        });\n        if(_binexec.error)\n        {\n          console.log(_binexec.error);\n        }\n      }\n      else COMPILER.ENV.run();\n\t\t}\t\n\t\t  if(!global.CLI.cli[\"--prepare\"])\n          {\n\t\t\t  var _current = path.dirname(path.resolve(process.argv[1]));\n\t\t\t  var _native = path.join(_current, \"core\", \"nativejs\");\n\t\t\t  var _to = path.resolve(projTo);\n\t\t\t  var _fullPathCompile = path.resolve(main);\n\t\t  }\n          else\n          {\n\t           var pObj = { main: main, out:projTo, target:target, preset:preset };\n\t            printProject(pObj);\n          }\n      }\n    });\n  }\n}\n\nvar showVersion = function()\n{\n  console.log(\"Nerd v\" + VERSION);\n}\n\nvar Check = function(file)\n{\n  if(file.split(\".\").pop() != \"js\") return;\n\n  if(global.CLI.cli[\"--check\"]) process.exit();\n}\n\nvar Help = function()\n{\n  showVersion();\n  console.log(\"\\n[*] Compile :\\nnerd [--env std|node|arduino|wasm|android] [--target the-target] [--run] [--reg 1000] [--preset speed|size] [-o output] [--tips] [--flash device] source.js|project.json\\n\");\n  console.log(\"[*] Show project :\\nnerd [--project] [project.json]\\n\");\n  console.log(\"[*] Clean project :\\nnerd [--clean] [--purge] [path_to_project.json]\\n\");\n  console.log(\"[*] Copy example files :\\nnerd --example\\n\");\n  console.log(\"[*] Nerd version :\\nnerd --version\\n\");\n}\n\n\nswitch(ACTION)\n{\n  case \"version\":\n    showVersion();\n    break;\n\n  case \"help\":\n    Help();\n    break;\n\n  case \"example\":\n    copyExample();\n    break;\n\n  case \"showproject\":\n    showProject();\n    break;\n\n  case \"setconfig\":\n    setConfig();\n    break;\n\n  case \"showconfig\":\n    showConfig();\n    break;\n\n  case \"reinitconfig\":\n    reinitConfig();\n    break;\n\n  case \"build\":\n    Build();\n    break;\n\n  case \"clean\":\n    Clean();\n    break;\n\n  default:\n    Help();\n    break;\n}"
        },
        {
          "name": "nerd_modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.974609375,
          "content": "{\n  \"name\": \"nerd\",\n  \"version\": \"0.0.16\",\n  \"description\": \"Nerd. JS native compiler.\",\n  \"main\": \"nerd\",\n  \"bin\": {\n    \"nerd\": \"./nerd.js\"\n  },\n  \"scripts\": {},\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/nerdlang/nerd.git\"\n  },\n  \"keywords\": [\n    \"nerd\",\n    \"nerdlang\",\n    \"nerd-lang\",\n    \"compilation\",\n    \"crossplatform\",\n    \"simple\",\n    \"speed\",\n    \"io\",\n    \"iot\",\n    \"socket\",\n    \"android\",\n    \"linux\",\n    \"windows\",\n    \"arduino\",\n    \"raspberry\",\n    \"stm32\",\n    \"nucleo\",\n    \"http\",\n    \"https\",\n    \"bytecode\",\n    \"wasm\",\n    \"arm\",\n    \"arm64\",\n    \"msbuild\",\n    \"cl\",\n    \"webserver\",\n    \"webview\"\n  ],\n  \"author\": \"Adrien THIERRY <adrien.thierryfr@gmail.com>\",\n  \"license\": \"MIT\",\n  \"licenses\": [\n    {\n      \"type\": \"MIT\",\n      \"url\": \"https://github.com/nerdlang/nerd/blob/master/LICENSE\"\n    }\n  ],\n  \"bugs\": {\n    \"url\": \"https://github.com/nerdlang/nerd/issues\"\n  },\n  \"homepage\": \"https://nerdlang.org\",\n  \"dependencies\": {\n  }\n}\n"
        },
        {
          "name": "self",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}