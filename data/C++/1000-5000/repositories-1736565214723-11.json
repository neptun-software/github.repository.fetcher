{
  "metadata": {
    "timestamp": 1736565214723,
    "page": 11,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Slackadays/Clipboard",
      "stars": 4941,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.185546875,
          "content": ".idea/\n.vscode/\n.cache/\n.flatpak-builder/\nExported_Clipboards/\nCMakeFiles/\n\nsrc/tests/test_*\n\n*.flatpak\n*.snap\n\nbuild/*\n\nrepo/*\n\nbuild-dir/*\n\ndocumentation/website/public/\n\ngmon.out\n\n/temp/*"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 4.3134765625,
          "content": "cmake_minimum_required(VERSION 3.20)\n\nproject(Clipboard LANGUAGES CXX C VERSION 0.10.1)\nset(CMAKE_CXX_STANDARD 23)\nset(CMAKE_CXX_STANDARD_REQUIRED True)\n\nif (UNIX AND NOT APPLE AND NOT HAIKU AND NOT ANDROID)\n  set(X11WL ON)\nendif()\n\nexecute_process( # save the current branch to GIT_BRANCH\n  COMMAND git rev-parse --abbrev-ref HEAD\n  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n  OUTPUT_VARIABLE GIT_BRANCH\n  OUTPUT_STRIP_TRAILING_WHITESPACE\n)\n\nexecute_process( # save the current commit hash to GIT_COMMIT_HASH\n  COMMAND git log -1 --format=%h\n  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n  OUTPUT_VARIABLE GIT_COMMIT_HASH\n  OUTPUT_STRIP_TRAILING_WHITESPACE\n)\n\nadd_definitions(-DGIT_COMMIT_HASH=\"${GIT_COMMIT_HASH}\")\nadd_definitions(-DGIT_BRANCH=\"${GIT_BRANCH}\")\nadd_definitions(-DCLIPBOARD_VERSION=\"${PROJECT_VERSION}\")\n\nif (MSVC)\n  add_compile_definitions(NOMINMAX) # Prevent min() or max() from being made into macros by windows.h\nendif()\n\nif (NOT CMAKE_INSTALL_LIBDIR)\n  set(CMAKE_INSTALL_LIBDIR \"lib\")\nendif()\n\nif (NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE \"Debug\")\nendif()\n\nif (CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n  if (NOT NO_ALSA)\n    find_package(ALSA REQUIRED)\n    add_definitions(-DUSE_ALSA)\n  endif()\n  #find_path(LIBURING_INCLUDE_DIR liburing.h)\n  #if (LIBURING_INCLUDE_DIR)\n  #  message(STATUS \"Building the Clipboard Project with io_uring support\")\n  #  set(HAVE_LIBURING TRUE)\n  #else()\n  #  message(FATAL_ERROR \"Could not find liburing\")\n  #endif()\nendif()\n\nif(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n  message(STATUS \"Building the Clipboard Project in Debug mode\")\n  if(NOT MSVC AND NOT APPLE)\n    #add_compile_options(-fsanitize=address)\n    #add_link_options(-fsanitize=address)\n    set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -g\")\n  endif()\n  if (NOT MSVC)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -Wextra\")\n    if (NOT NO_COVERAGE)\n      if (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\" OR CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\" OR CMAKE_CXX_COMPILER_ID STREQUAL \"AppleClang\")\n        add_compile_options(--coverage)\n        add_link_options(--coverage)\n      endif()\n    endif()\n  endif()\nelse()\n  if(NOT WIN32 AND NOT APPLE AND CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n    set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -s\")\n    set(CMAKE_CXX_FLAGS_MINSIZEREL \"${CMAKE_CXX_FLAGS_MINSIZEREL} -s\")\n  endif()\nendif()\n\nset(LIB_LOCATION ${CMAKE_BINARY_DIR})\nset(BIN_LOCATION ${CMAKE_BINARY_DIR})\nif ($ENV{CI}) # enable easy artifact access on CI by shipping everything to a unified folder\n  set(LIB_LOCATION ${CMAKE_BINARY_DIR}/output/lib)\n  set(BIN_LOCATION ${CMAKE_BINARY_DIR}/output/bin)\nendif()\n\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${LIB_LOCATION})\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${LIB_LOCATION})\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${BIN_LOCATION})\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${LIB_LOCATION})\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${LIB_LOCATION})\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${BIN_LOCATION})\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${LIB_LOCATION})\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${LIB_LOCATION})\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${BIN_LOCATION})\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL ${LIB_LOCATION})\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL ${LIB_LOCATION})\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL ${BIN_LOCATION})\n\nfunction(enable_lto this_target)\ninclude(CheckIPOSupported)\ncheck_ipo_supported(RESULT lto_supported)\nif(lto_supported AND NOT NO_LTO)\n  set_property(TARGET ${this_target} PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)\n  if(CMAKE_COMPILER_IS_GNUCXX)\n    list(APPEND CMAKE_CXX_COMPILE_OPTIONS_IPO \"-flto=auto\") # set the thread amount to what is available on the CPU\n  endif()\nendif()\nendfunction()\n\nadd_subdirectory(src/gui)\n\nfind_package(X11)\nif(NOT NO_X11 AND X11_FOUND AND NOT APPLE) # X11 is technically available on macOS, but we don't want to use it\n  message(STATUS \"Building the Clipboard Project with X11 support\")\n  add_subdirectory(src/cbx11)\nelse()\n  message(STATUS \"Building the Clipboard Project without X11 support\")\nendif()\n\nfind_package(PkgConfig)\npkg_check_modules(WAYLAND_CLIENT wayland-client wayland-protocols)\nif(NOT NO_WAYLAND AND WAYLAND_CLIENT_FOUND)\n  message(STATUS \"Building the Clipboard Project with Wayland support\")\n  add_subdirectory(src/cbwayland)\nelse()\n  message(STATUS \"Building the Clipboard Project without Wayland support\")\nendif()\n\nadd_subdirectory(src/cb)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.3984375,
          "content": "# Thanks for contributing to the Clipboard Project! ðŸ‘‹\n\nThanks for your interest in contributing to Clipboard! We welcome all types of contributions including code, documentation, bug reports, feature requests, and general suggestions for improving the project.\n\n## Guidelines for your valuable contributions\n\n1. Attribution\nPlease properly attribute your contributors. When submitting your pull request, please include:\n- Detailed explanations of your changes\n- References to relevant issues or discussions\n- Clear attributions to other authors if your changes incorporate their work\n\n2. Separate Pull Requests\nPlease keep unrelated additions or modifications in separate PRs. This is to allow us to focus on each change individually and provide feedback or action faster.\n\n3. Code Formatting and Standards\nBefore submitting any code changes please ensure you:\n- Run our provided formatting scripts to ensure consistency within the codebase.\n- Pass all automated tests by running the test suite locally.\n\n4. Testing and Quality Assurance\n- When submitting code changes, please include relevant tests to help maintain the integrity of the project and ensure you don't introduce bugs.\n\nGetting Started\n1. Fork the repository.\n2. Clone the fork onto your local machine.\n3. Create a new branch for your changes.\n4. Make your changes and commit with meaningful messages\n5. Run the test suite and formatting scripts\n6. Submit your PR!\n"
        },
        {
          "name": "LEARN.md",
          "type": "blob",
          "size": 2.22265625,
          "content": "# How I Made the Clipboard Project\n\nI made the Clipboard Project (which I'll call CB here) by first starting with something really small and simple but functional, then adding features upon features until I got to where it is right now.\n\nThe Ugly Details:\n\n1. First, I started by thinking about how I wanted CB to work in the first place. Because if I don't know what I want the final product to be, then I can't work towards anything. One huge, and HUGE, assumption I made was that every single time you use CB, it should only\n perform a single, atomic action. There shouldn't be any funny business where some invocations do multiple things at once. Therefore, this helped me structure CB by assuming that every time it runs, it'll perform only one distinct action, and I can build everything else around that assumption.\n\n2. Next, I had to decide what language to write CB in. I already knew C++ from Hajime, one of my earlier projects. And I've been learning it since I was 8! Plus, it's super fast and filled with tons of fun features starting with the C++17 standard. So, C++ it was!\n\n3. After deciding on the modus operandi and programming language, I made a super basic version of CB. I actually wrote this initial version in Bash. That was due to me wanting to see if such a task could be done in a \"simpler\" language before moving to the big guns of C++. Unfortunately, it didn't\n turn out so well. The Bash version was filled with redundant code and was hard to work on. Due to me not wanting to suffer any further, I rewrote the Bash version in C++.\n\n4. I started adding more and more features after sharing my CB project online and then receiving valuable feedback. I also researched other, similar projects like CopyQ, Maccy, Xclip, and wl-clipboard, and incorporating their features in a way that would suit the CB philosophy best.\n\n5. From there, it's been smooth sailing and in fact a little boring because I additionally incorporated automated code formatting, a contribution from another fellow developer, integration tests, and a coherent design language. The tests have kept bugs and regressions to a minimum. The code formatting keeps everything looking tidy. And, the design language makes CB one\n of the most beautiful tools to use on the command line.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.3251953125,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 43.94140625,
          "content": "<br>\n\n### ![The Clipboard Project](documentation/readme-assets/CBBanner.png)\n\n<br>\n\n<br>\n\n<img src=\"documentation/readme-assets/ProductivityTools.png\" alt=\"The fully-featured yet oh-so-easy-to-use clipboard manager for everyone.\" />\n\n<br>\n\nThe Clipboard Project is a fast and lightweight, feature packed, and user friendly tool that lets you do more on the computer in _style_. Seriously.\n\nSay hello to one of the most cutting-edge clipboard managers ever. Save time and effort easier and more powerfully than ever before.\n\nDon't just take my word for it!\n\n<br>\n\n<img src=\"documentation/readme-assets/Features.png\" alt=\"Just let the features speak for themselves.\" height=35px>\n\n- Copy and paste text, files, directories, binary data, your goat, _anything_\n- Infinite numbers of clipboards with unlimited capacity **and** history each,\n- Seriously kickASS performance ðŸ¥¾ðŸ¤¯ because I'm sick of slow software,\n- Seamless integration with your [existing clipboard systems](https://github.com/Slackadays/Clipboard/wiki/GUI-Clipboard-Compat),\n- Support for your favorite languages like espaÃ±ol, portuguÃªs, TÃ¼rkÃ§e, and FranÃ§ais,\n- A superbly scriptable API to automate your workflows in a cinch, \n- Gorgeous <img src=\"documentation/readme-assets/eyecandy.svg\" height=\"16px\" alt=\"eye candy\"/> and ear candy for your viewing and listening pleasure,\n- Documentation you'll actually want to read <sub>(all in this readme)</sub>\n- And oodles more!\n\n<br>\n\n<i>I believe Clipboard is <b>the best tool for clipboard interaction</b>. As a matter of fact, as of today you have 2713 stars on github, kudos! Keep up the good work.</i>\n\n\\- pidario on GitHub.com\n\n<br>\n\n<i>Thanks for your work! This is by-far <b>one of my favourite projects</b> on GitHub!</i>\n\n\\- MaddyGuthridge on GitHub.com\n\n<br>\n\n<i>...I've just discovered CB & <b>it's suiting my needs very well!</b></i>\n\n\\- all64bits on Discord.com\n\n<br>\n\n<i>I started using this because <b>I just wanted an easy \"cb copy && cb paste\"</b> VS trying to remember the correct input AND output flags when Im using xclip with different file types. I write a lot of shell scripts that copy certain stuff like images and text and <b>this makes it a lot easier.</b></i>\n\n\\- SweetBabyAlaska on Reddit.com\n\n<br>\n\n<i>As a sysadmin and hourly terminal user, <b>I found it so useful.</b> Making stuffs some easier.</i>\n\n\\- Simpleboy_ir on Reddit.com\n\n<br>\n\n<i>Thank you for this app, <b>so simple yet effective!</b> Hats off ðŸŽ© ðŸ‘Œ</i>\n\n\\- GlassGruber on GitHub.com\n\n<br>\n\n<i>BTW, really LOVE this project. Its [sic] <b>so unbelievable it isn't already in Linux.</b></i>\n\n\\- AtomicRobotMan0101 on GitHub.com\n\n<br>\n\n<i>...Thank you again for <b>this great application!</b></i>\n\n\\- kohane27 on GitHub.com\n\n<br>\n\n![CB Demo Video](documentation/readme-assets/ClipboardDemo.gif)\n\n<p align=\"center\" id=\"dummy\">\n    <a href=\"https://github.com/Slackadays/Clipboard/actions\">\n        <img src=\"https://img.shields.io/github/actions/workflow/status/Slackadays/Clipboard/build-clipboard.yml?branch=main&label=BUILDS&style=for-the-badge&logo=githubactions&labelColor=rgb(55,55,55)\">\n        <img src=\"https://img.shields.io/github/actions/workflow/status/slackadays/Clipboard/lint-clipboard.yml?branch=main&label=CHECKS&style=for-the-badge&logo=githubactions&labelColor=rgb(55,55,55)\">\n    </a>\n    <a href=\"https://app.codecov.io/gh/Slackadays/Clipboard\">\n        <img src=\"https://img.shields.io/codecov/c/github/slackadays/Clipboard/main?style=for-the-badge&label=COVERAGE&token=RO7KDOZ6Q2&logo=codecov&labelColor=rgb(55,55,55)\">\n    </a>\n    <img src=\"https://img.shields.io/github/downloads/Slackadays/Clipboard/total?style=for-the-badge&labelColor=rgb(55,55,55)&logo=github\">\n    <br>\n    <a href=\"https://github.com/Slackadays/Clipboard/releases\">\n        <img src=\"https://img.shields.io/github/v/release/slackadays/clipboard?label=latest%20release&style=for-the-badge&logo=github&labelColor=rgb(55,55,55)&color=brightgreen\">\n    </a>\n    <a href=\"https://discord.gg/J6asnc3pEG\"><img src=\"documentation/readme-assets/join-our-discord.svg\" alt=\"Discord Chat\"></a>\n    <img src=\"https://img.shields.io/github/license/slackadays/clipboard?label=FREE%20%26%20OPEN%20SOURCE&logo=gnu&style=for-the-badge&labelColor=rgb(55,55,55)\">\n    <br>\n    <img src=\"https://img.shields.io/maintenance/yes/2024?style=for-the-badge&labelColor=rgb(55%2C55%2C55)\">\n</p>\n\n<br>\n\n<br>\n\n<p align=\"center\">\n    <img src=\"documentation/readme-assets/GetStartedBelow.png\" alt=\"Ready to turbocharge your productivity? Then let's get started with CB.\" height=\"100px\" />\n</p>\n\n<br>\n\n<br>\n\n### ![Quick Installation](documentation/readme-assets/CBQuickInstallation.png)\n\n### <a href=\"https://github.com/Slackadays/Clipboard/blob/main/install.sh\"><img src=\"documentation/readme-assets/AllExceptWindows.png\" alt=\"All Except Windows\" height=25px /></a>\n```bash\ncurl -sSL https://github.com/Slackadays/Clipboard/raw/main/install.sh | sh\n```\n### <a href=\"https://github.com/Slackadays/Clipboard/blob/main/install.ps1\"><img src=\"documentation/readme-assets/WindowsRunAsAdmin.png\" alt=\"Windows (run as Administrator)\" height=30px /></a>\n```powershell\n(Invoke-WebRequest -UseBasicParsing https://github.com/Slackadays/Clipboard/raw/main/install.ps1).Content | powershell\n```\n\n<br>\n<br>\n\n### <img src=\"documentation/readme-assets/PremadeBuilds.png\" alt=\"Premade Builds\" height=25px />\n\n<a href=\"https://repology.org/project/clipboard/versions\"><img src=\"https://repology.org/badge/vertical-allrepos/clipboard.svg\" alt=\"Packaging status\" align=\"right\"></a>\n\n**Alpine Linux** (you'll need to enable the Community packages first)\n```sh\napk add clipboard\n```\n\n<br>\n\n**AUR** (Use your favorite AUR helper such as `yay`. You can also get `clipboard-bin` and `clipboard-git`)\n```sh\nyay -S clipboard\n\nyay -S clipboard-bin\n\nyay -S clipboard-git\n```\n\n<br>\n\n**Conda-forge** (Use any Conda package manager such as conda, mamba, or pixi)\n```sh\nconda install -c conda-forge cb-clipboard\n\nmamba install -c conda-forge cb-clipboard\n\nmicromamba install -c conda-forge cb-clipboard\n\npixi global install cb-clipboard\n```\n\n<br>\n\n**Flatpak Flathub** (You can also get our nightly Flatpak builds under **GitHub Downloads**)\n```sh\nflatpak install app.getclipboard.Clipboard\n# After installing, do \"alias cb='flatpak run app.getclipboard.Clipboard'\" to use CB easily.\n# Then, add that command to your terminal profile (like .bashrc) to make it work every time.\n```\n\n<a href=\"https://flathub.org/apps/app.getclipboard.Clipboard\"><img width='240' alt='Download on Flathub' src='https://dl.flathub.org/assets/badges/flathub-badge-en.svg' align=\"right\"/></a>\n\n<br>\n\n**Gentoo GURU and LiGurOS** (For Gentoo, enable the GURU repo first)\n```sh\nemerge -av app-misc/clipboard\n```\n\n<br>\n\n**Homebrew**\n```sh\nbrew install clipboard\n```\n\n<br>\n\n**Nix**\n```sh\nnix-env -iA nixpkgs.clipboard-jh\n```\n\n<br>\n\n**Pacstall**\n```sh\npacstall -I clipboard-bin\n```\n\n<br>\n\n**Scoop**\n```powershell\nscoop install clipboard\n```\n\n<br>\n\n**Snap** (You can also get our nightly Snap builds under **GitHub Downloads**)\n```sh\nsudo snap install clipboard\n# After installing, do \"alias cb='snap run clipboard'\" to use CB easily.\n# Then, add that command to your terminal profile (like .bashrc) to make it work every time.\n```\n\n<a href=\"https://snapcraft.io/clipboard\">\n  <img alt=\"Get it from the Snap Store\" src=\"https://snapcraft.io/static/images/badges/en/snap-store-black.svg\" align=\"right\"/>\n</a>\n\n<br>\n\n**Void Linux**\n```sh\nsudo xbps-install -S Clipboard\n```\n\n<br>\n\n**Winget**\n```powershell\nwinget install -e --id Slackadays.Clipboard\n```\n\n<br>\n\n**GitHub Downloads**\n\nFirst, get the latest revision of the Clipboard Project [from GitHub Actions](https://nightly.link/Slackadays/Clipboard/workflows/build-clipboard/main) or the latest release [from GitHub Releases.](https://github.com/Slackadays/Clipboard/releases/latest)\n\nThen, unpack what you just downloaded to a nice place anywhere on your system.\n\nIf you downloaded the Flatpak, now do `flatpak install what-you-downloaded.flatpak`. Or if you downloaded the Snap, now do `sudo snap install --dangerous what_you_downloaded.snap`.\n\nFinally, add CB to your PATH (so that you can run it anywhere) by doing one of the following:\n\n```sh\n# For all platforms except Windows, Flatpak, and Snap\n$ export PATH=$PATH:/where/you/unpacked/cb\n# Add this to your terminal startup file like .bashrc or the equivalent so that it works every time.\n# To get the current path (in case you don't know it), do the \"pwd\" command.\n\n# For Flatpak\n$ alias cb='flatpak run app.getclipboard.Clipboard'\n# Add this to your terminal startup file like .bashrc or the equivalent so that it works every time.\n\n# For Snap\n$ alias cb='snap run clipboard'\n# Add this to your terminal startup file like .bashrc or the equivalent so that it works every time.\n\n# For Windows PowerShell\n> $Env:PATH += \";C:\\where\\you\\unpacked\\cb\"\n# Add this to your PowerShell profile (which is located in $profile) so that this works every time.\n# To get the current path (in case you don't know it), do the \"Get-Location\" command.\n```\n\n<br>\n<br>\n\n### <img src=\"documentation/readme-assets/InstallManually.png\" alt=\"Install Manually\" height=25px />\nYou'll need CMake, C++20 support, and OpenSSL, and if you want X11 or Wayland support, you'll also need libx11 or libwayland plus Wayland Protocols respectively. If you're on Linux, you'll need ALSA.\n\nGet the latest release instead of the latest commit by adding `--branch 0.9.1` right after `git clone...`.\n\nChange the system installation prefix by adding `-DCMAKE_INSTALL_PREFIX=/custom/prefix` to `cmake ..`, or the library install location by adding `-DCMAKE_INSTALL_LIBDIR=/custom/dir`.\n```bash\n# First, let's download the code and go a nice place to build everything.\n$ git clone https://github.com/Slackadays/Clipboard \n$ cd Clipboard/build\n\n# Now let's set up CMake and build CB.\n$ cmake -DCMAKE_BUILD_TYPE=Release ..\n$ cmake --build . -j 12\n\n# Finally, let's install it onto our system.\n$ cmake --install .\n```\n\n### <img src=\"documentation/readme-assets/Uninstall.png\" alt=\"Uninstall\" height=25px />\n\nRemove everything listed in `install_manifest.txt`. If you're not using Windows, you can also do `xargs rm < install_manifest.txt`.\n\n<br>\n\n<br>\n\n<p align=\"center\">\n    <img src=\"documentation/readme-assets/HowToUsePrompt.png\" alt=\"Now let's start saving time and effort.\" height=\"40px\" />\n</p>\n\n<br>\n\n<br>\n\n### ![How To Use](documentation/readme-assets/CBHowToUse.png)\n\n### <img src=\"documentation/readme-assets/Examples.png\" alt=\"Examples\" height=25px />\n\n```sh\n# Let's start by copying a file.\n$ cb copy NuclearLaunchCodes.pdf\n\n# Now, let's paste this file.\n$ cb paste\n\n# Not bad, right?\n\n# Let's make a note for this clipboard.\n$ cb note \"Keep this a secret\"\n\n# What if you wanted to pipe the note in?\n$ echo \"Keep this a secret OR ELSE\" | cb note\n\n# Now let's cut a directory to a different clipboard.\n$ cb cut69 MyDirectory\n\n# We put the 69 right after \"cut\" to tell CB to put MyDirectory in clipboard 69.\n\n# Let's add a file to this same clipboard.\n$ cb add69 SomeFile\n\n# To remove a file, enter its name to remove just that file.\n$ cb remove69 SomeFile\n\n# Alternatively, you can put in a regex pattern instead to generalize the removal.\n$ cb remove69 \"So.*le\"\n\n# Finally, let's paste what we have in clipboard 69.\n$ cb paste69\n\n# You can copy multiple files at the same time. \n# Let's try the \"_420\" persistent clipboard for this one.\n$ cb copy_420 foo.bar NotAVirus.bar.mp3.exe\n\n# Like before, we can remove anything with a regex patttern.\n$ cb remove_420 \"*.mp3\\.exe\"\n\n# Notes work exactly the same way for every clipboard.\n$ cb note_420 \"Some kosher content here\"\n\n# Let's look at everything we've stored in clipboard _420.\n$ cb show_420\n\n# Now let's see our original note and then clear that clipboard. \n$ cb note\n$ cb clear\n\n# This is the same as \"cb note\" but for clipboard \"_420\" again.\n$ cb note_420\n\n# Let's shake things up. Say you have some kind of content you want to ignore.\n# This content could be anything from a password to raw binary data.\n# To ignore certain kinds of content, use a regex pattern of your choice.\n\n# Let's try this with a classic example.\n$ cb ignore \"H.*2\"\n\n# This pattern will ignore anything starting with \"H\" and ending with \"2.\"\n\n# Now, this next command will fail because CB will ignore the content in it through the pattern.\n$ cb copy \"Hunter2\"\n\n# Let's get some more detailed information about our clipboards.\n$ cb info\n$ cb info69\n$ cb info_420\n\n# To wrap things up, let's get a bird's eye view of everything so far.\n$ cb\n# Doing \"cb\" is the exact same as \"cb status.\"\n$ cb status\n\n# These are just a handful of examples. \n# Check the documentation below for tons more examples of all the commands!\n```\n\n<br>\n\n### <img src=\"documentation/readme-assets/TheBasics.png\" alt=\"The Basics\" height=25px />\n\nAdd a number to the end of your action to choose which temporary clipboard you want to use (the default is 0). Or, add `_` to use a persistent clipboard instead.\n\n<h3><b>Copy</b> &emsp; <code>cb [--](copy|cp)[(num)|_(id)] (file) [files]</code> or <code>(something) | cb [[--](copy|cp)][(num)|_(id)]</code></h3>\n\nCopy a file.\n```sh\n$ cb copy FooFile\n$ cb --copy FooFile\n$ cb cp FooFile \n$ cb --cp FooFile\n# These are the same!\n```\n\nCopy a file and a directory.\n```sh\n$ cb copy FooFile BarDir\n# These are also the same!\n```\n\nCopy piped in data.\n```sh\n$ echo \"Foobar\" | cb\n$ echo \"Foobar\" | cb copy \n# The \"copy\" action is optional here since the only possible action here in the first place is \"copy\"\n```\n\nCopy text directly.\n```sh\n$ cb copy \"Aventura was the best bachata band\"\n```\nNote: This happens instead of copying a file/directory if there is only one item present and that item doesn't exist as a file/directory.\n\nCopy a file to the clipboard named \"4\"\n```sh\n$ cb copy4 FooFile\n```\n\nCopy piped in data to the persistent clipboard named \"hello\"\n```sh\n$ echo \"Foobar\" | cb copy_hello\n```\n\nCopy text to the clipboard named \"hey\"\n```sh\n$ cb --clipboard hey copy \"Aventura was the best bachata band\"\n$ cb -c hey copy \"Aventura was the best bachata band\" \n# These are the same!\n```\n\nCopy a file with spaces and many directories to clipboard \"50\" using the abbreviated action name.\n```sh\n$ cb cp50 \"Aventura/God's Project/04 Un Chi Chi.flac\" BarDir BazDir\n```\n\n<br>\n\n<h3><b>Cut</b> &emsp; <code>cb [--](cut|ct)[(num)|_(id)] (file) [files]</code> or <code>(something) | cb [[--](cut|ct)][(num)|_(id)]</code></h3>\n\nCut a file.\n```sh\n$ cb cut FooFile\n$ cb --cut FooFile\n$ cb ct FooFile \n$ cb --ct FooFile\n# These are the same!\n```\n\nCut a file and a directory.\n```sh\n$ cb cut FooFile BarDir\n# These are also the same!\n```\n\nCut piped in data.\n```sh\n$ echo \"Foobar\" | cb cut\n```\nNote: Cutting piped in data is the same as copying, except that CB will delete all content after you paste it somewhere.\n\nCut text directly.\n```sh\n$ cb cut \"Hunter2\"\n```\nNote: This happens instead of cutting a file/directory if there is only one item present and that item doesn't exist as a file/directory.\n\nCut a file to the clipboard named \"4\"\n```sh\n$ cb cut4 FooFile\n```\n\nCut piped in data to the persistent clipboard named \"hello\"\n```sh\n$ echo \"Foobar\" | cb cut_hello\n```\n\nCut text to the clipboard named \"hey\"\n```sh\n$ cb --clipboard hey cut \"Aventura was the best bachata band\"\n$ cb -c hey cut \"Aventura was the best bachata band\"\n# These are the same!\n```\n\nCut a file with spaces and many directories to clipboard \"50\" using the abbreviated action name.\n```sh\n$ cb ct50 \"Aventura/God's Project/04 Un Chi Chi.flac\" BarDir BazDir\n```\n\n<br>\n\n<h3><b>Paste</b> &emsp; <code>cb [--](paste|p)[(num)|_(id)] [regex] [regexes]</code> or <code>cb [[--](paste|p][(num)|_(id)] | (something)</code> or <code>cb [[--](paste|p)][(num)|_(id)] > (some file)</code></h3>\n\nStart by copying or cutting something.\n```sh\n$ cb copy FooFile WhyAventuraIsTheBest.pdf\n```\n\nPaste in the current working directory.\n```sh\n$ cb paste\n$ cb --paste\n$ cb p\n$ cb --p\n# These are the same!\n```\nNote: If you paste after cutting, then CB will delete the original files that you cut.\n\nPaste anything containing \"Aventura.\"\n\n```sh\n$ cb p \".*Aventura.*\"\n```\n\nNow, let's copy some raw data.\n```sh\n$ echo \"Bananas!\" | cb\n```\n\nPaste the raw data file in the current working directory.\n```sh\n$ cb paste\n# Also the same\n```\n\nPipe everything out to some file.\n```sh\n$ cb paste > SomeFile\n```\n\nPipe everything from clipboard \"42\" out to some file.\n```sh\n$ cb paste42 > SomeFile\n$ cb p42 > SomeFile\n$ cb -c 42 > SomeFile \n# These three versions all work great!\n```\n\nPipe everything out to some program.\n```sh\n$ cb | cat\n# These three versions also all work great.\n$ cb | Write-Output \n# The version for PowerShell\n```\n\nPipe everything from persistent clipboard \"2\" out to some program.\n```sh\n$ cb paste_2 | cat\n$ cb p_2 | cat\n$ cb -c _2 | cat \n# These three versions also all work great.\n$ cb -c _2 | Write-Output \n# The version for PowerShell\n```\n\nNote: If you paste after cutting, then CB will delete the raw data afterwards, effectively only letting you paste once.\n\n<br>\n\n<h3><b>Add Contents</b> &emsp; <code>cb [--](add|ad)[(num)|_(id)] (file|text) [files]</code> or <code>(something) | cb [[--](add|ad)][(num)|_(id)]</code></h3>\n\nStart by copying something.\n```sh\n$ cb copy FooFile\n```\n\nAdd a file.\n```sh\n$ cb add SomeOtherFile\n$ cb --add SomeOtherFile\n$ cb ad SomeOtherFile \n$ cb --ad SomeOtherFile\n# CB now holds FooFile and SomeOtherFile\n```\n\nAdd a directory.\n```sh\n$ cb add \"We Broke The Rules\"\n```\n\nNow let's copy some raw data.\n```sh\n$ cb copy \"'Let me find that'\"\n```\n\nAdd raw data to the end of what's stored.\n```sh\n$ cb add \" is one of Romeo Santos' catchphrases.\"\n# The content is now: 'Let me find that' is one of Romeo Santos' catchphrases.\n```\n\nAdd raw data by piping it in.\n```sh\n$ echo \" What's yours?\" | cb add \n# The content is now: 'Let me find that' is one of Romeo Santos' catchphrases. What's yours?\n```\n\n<br>\n\n<h3><b>Remove Contents</b> &emsp; <code>cb [--](remove|rm)[(num)|_(id)] (regex) [regexes]</code> or <code>(some regex) | cb [[--](remove|rm)][(num)|_(id)]</code></h3>\n\nStart by copying something.\n```sh\n$ cb copy FooFile BarDir BazDir\n```\n\nRemove everything starting with \"B\"\n```sh\n$ cb remove \"B.*\"\n$ cb --remove \"B.*\"\n$ cb rm \"B.*\"\n$ cb --rm \"B.*\"\n# CB will match this against \"BarDir\" and \"BazDir\" and remove them\n```\n\nRemove everything matching a specific name\n```sh\n$ cb remove \"BarDir\"\n# CB will match this against \"BarDir\" only and remove it\n```\n\nNow let's copy some raw data.\n```sh\n$ cb copy \"A bachatero is someone who makes bachata music.\"\n```\n\nRemove anything with a space beforehand and that ends with \"-ero\"\n```sh\n$ cb remove \"(?<= ).*ero\"\n# The content is now: A  is someone who makes bachata music.\n```\n\nRemove anything matching \"music\" by piping the pattern in.\n```sh\n$ echo \"music\" | cb remove\n# The content is now: A  is someone who makes bachata .\n```\n\n<br>\n\n<h3><b>Show Contents</b> &emsp; <code>cb [--](show|sh)[(num)|_(id)] [regex] [regexes]</code> or <code>cb [--](show|sh)[(num)|_(id)] [regex] [regexes] | (something)</code></h3>\n\nStart by copying something.\n```sh\n$ cb copy FooFile BarDir BazDir\n```\n\nList all the items in the clipboard.\n```sh\n$ cb show\n$ cb --show\n$ cb sh \n$ cb --sh\n# These all work great!\n```\n\nNow let's copy some raw data.\n```sh\n$ cb copy \"Those who are tired of bachata are tired of life\"\n```\n\nShow the contents of the clipboard.\n```sh\n$ cb show\n```\n\nShow the raw filepaths of everything in the clipboard.\n```sh\n$ cb sh | cat\n```\n\nShow raw filepaths to a program.\n```sh\n$ cb copy \"02 I Believe.flac\"\n$ eval vlc $(cb sh)\n# Use the eval command here to process the raw filepath (which in this case looks like \"/tmp/Clipboard/0/02 I Believe.flac\") as if it were entered in a shell\n# Otherwise, you'll likely get errors complaining about being unable to process quote characters.\n```\n\n<br>\n\n<h3><b>Clear Clipboard</b> &emsp; <code>cb [--](clear|clr)[(num)|_(id)]</code></h3>\n\nStart by copying something.\n```sh\n$ cb copy FooFile BarDir BazDir\n```\n\nClear the clipboard of all data.\n```sh\n$ cb clear\n$ cb --clear\n$ cb clr \n$ cb --clr\n# These all work great!\n```\n\nClear a certain range of history entries.\n```sh\n$ cb clear 69-420\n# Clears entries 69 through 420 inclusive\n$ cb clr 0-100\n# Clears entries 0 through 100 inclusive\n# Note: Entry 0 is always the most recent one\n```\n\nJust clear everything.\n```sh\n$ cb clear -a\n# Note: This will really clear everything in all clipboards!\n```\n\n<br>\n\n<h3><b>Edit Clipboard Content</b> &emsp; <code>cb [--](edit|ed)[(num)|_(id)] [editor]</code></h3>\n\nStart by copying some text.\n```sh\n$ cb copy \"Hello Clipboard! This is just some example content.\"\n```\n\nEdit the clipboard content.\n```sh\n$ cb edit\n$ cb --edit\n$ cb ed\n$ cb --ed\n# These all work great!\n```\n\nUse a custom editor to edit with.\n```sh\ncb edit nano\ncb ed vim\ncb ed code\n```\n\n<br>\n\n<h3><b>Add Script to Clipboard</b> &emsp; <code>cb [--](script|sc)[(num)|_(id)] [script path|content]</code></h3>\n\nStart simple.\n```sh\n$ cb script pwd # Note: The exact output of \"pwd\" will vary depending on your system.\n$ cb\n/run/user/1000/Clipboard/0/data/0\n# The output of CB will be here\n/run/user/1000/Clipboard/0/data/0\n```\n\nUse a script file instead.\n```sh\n$ cat myscript.sh\necho \"Hello Clipboard!\"\necho \"Here's what's in the directory:\"\nls\n$ cb script myscript.sh\n$ cb\nHello Clipboard!\nHere's what's in the directory:\nrawdata.clipboard\n# The output of CB will be here\nHello Clipboard!\nHere's what's in the directory:\nrawdata.clipboard\n```\n\nCustomize during what action the script runs.\n```sh\n$ cb script ls --actions search,history\n$ cb\n$ cb history\nrawdata.clipboard\n# The output of CB will be here\nrawdata.clipboard\n$ cb search\nrawdata.clipboard\n# The output of CB will be here\nrawdata.clipboard\n$ cb copy\n$\n```\n\nCustomize if the script runs before, after, or both.\n```sh\n$ cb script ls --timings before\n$ cb\nrawdata.clipboard\n# The output of CB will be here\n$ cb script ls --timings after\n$ cb\n# The output of CB will be here\nrawdata.clipboard\n$ cb script ls --timings before,after\nrawdata.clipboard\n# The output of CB will be here\nrawdata.clipboard\n```\n\nCustomize both during what action the script runs and if the script runs before, after, or both.\n```sh\n$ cb script ls --actions copy --timings before\n$ cb\n$ cb copy\nrawdata.clipboard\n# The output of CB will be here\n```\n\nView the current script.\n```sh\n$ cb script\n# Script content shows here\n```\n\n<br>\n\n### <img src=\"documentation/readme-assets/MoveThingsAround.png\" alt=\"Move Things Around\" height=25px />\n\n<h3><b>Load Contents</b> &emsp; <code>cb [--](load|ld)[(num)|_(id)] [clipboard] [clipboards]</code></h3>\n\nStart by copying something.\n```sh\n$ cb copy \"Yo dawg! I heard you liked bachata music.\"\n```\n\nLoad the contents of the clipboard into other clipboards.\n\n```sh\n$ cb load 1 2 3 _foo\n$ cb --load 1 2 3 _foo\n$ cb ld 1 2 3 _foo\n$ cb --ld 1 2 3 _foo\n# All work great!\n```\n\nNote: If you don't provide a destination clipboard, then the Load action will load the contents into the default clipboard.\n\nLoad the contents of some clipboard into the default.\n\n```sh\n$ cb load_foo\n```\n\nNote: This is useful if you want to load content into GUI clipboard systems, as they only connect to the default clipboard.\n\n<br>\n\n<h3><b>Swap Contents</b> &emsp; <code>cb [--](swap|sw)[(num)|_(id)] [clipboard]</code></h3>\n\nStart by copying something to two clipboards.\n```sh\n$ cb copy \"After breaking up from Aventura, Romeo Santos' music just wasn't up to snuff.\"\n$ cb copy2 \"I'd just like to interject for a moment. What you're referring to as Linux, is in fact, GNU/Linux, or as I've recently taken to calling it, GNU plus Linux.\"\n```\n\nSwap the contents of two clipboards.\n\n```sh\n$ cb swap 2\n$ cb --swap 2\n$ cb sw 2\n$ cb --sw 2\n# All work great!\n\n$ cb swap2\n$ cb --swap2\n$ cb sw2\n$ cb --sw2\n# Since swapping is commutative, the target can be freely swapped with the destination.\n```\n\nNote: If you don't provide a destination clipboard, then the Swap action will swap the contents into the default clipboard.\n\n<br>\n\n<h3><b>Import Clipboards</b> &emsp; <code>cb [--](import|imp) [source folder]</code></h3>\n\nStart by exporting a clipboard.\n```sh\n$ cb copy \"The reason Aventura was so popular was because the music was so well-written as well as the luscious guitar chorus effect.\"\n$ cb export\n```\n\nImport all clipboards from a folder.\n```sh\n$ cb import\n$ cb --import\n$ cb imp\n$ cb --imp\n# These all work great!\n```\n\nNote: Currently, CB imports from a folder called `Exported_Clipboards`.\n\nChoose what folder to import from.\n```sh\n$ cb import MySavedClipboards\n```\n\n<br>\n\n<h3><b>Export Clipboards</b> &emsp; <code>cb [--](export|ex) [clipboard] [clipboards]</code></h3>\n\nStart by copying something.\n```sh\n$ cb copy \"Aventura's music is some of the most erotic you'll find anywhere.\"\n```\n\nExport all clipboards to a folder.\n```sh\n$ cb export\n$ cb --export\n$ cb ex\n$ cb --ex\n# These all work great!\n```\n\nNote: Currently, CB exports to a folder called `Exported_Clipboards`.\n\nChoose what clipboards to export.\n```sh\n$ cb export 1 2 3\n```\n\n<br>\n\n<h3><b>Queue Clipboard History</b> &emsp; <code>cb [--](history|hs)[(num)|_(id)]</code></h3>\n\nStart by copying several things.\n```sh\n$ cb copy \"There are at least two \\\"Anthony Santos\\\" who are known for bachata music: the \\\"regular\\\" Anthony Santos and Anthony \\\"Romeo\\\" Santos.\"\n$ cb copy \"blah blah blah\"\n$ cb copy \"Clipboard Project is the best clipboard manager around\"\n```\n\nShow the history.\n```sh\n$ cb history\n$ cb --history\n$ cb hs\n$ cb --hs\n# These all work great!\n```\n\n<br>\n\n<h3><b>Get Older Clipboard Entries</b> &emsp; <code>cb [--](history|hs)[(num)|_(id)] (clipboard) [clipboards]</code></h3>\n\nStart by copying several things.\n```sh\n$ cb copy \"There are at least two \\\"Anthony Santos\\\" who are known for bachata music: the \\\"regular\\\" Anthony Santos and Anthony \\\"Romeo\\\" Santos.\"\n$ cb copy \"blah blah blah\"\n$ cb copy \"Clipboard Project is the best clipboard manager around\"\n```\n\nBring an older entry (or entries) to the front.\n```sh\n$ cb history 1\n$ cb --history 2\n$ cb hs 1\n$ cb --hs 1 2\n# These all work great!\n```\n\n<br>\n\n### <img src=\"documentation/readme-assets/SeeEverything.png\" alt=\"See Everything\" height=25px />\n\n<h3><b>Set Note</b> &emsp; <code>cb [--](note|nt)[(num)|_(id)] (text)</code> or <code>(something) | cb [[--](note|nt)][(num)|_(id)]</code></h3>\n\nAdd a personal note to a clipboard.\n```sh\n$ cb note \"For my Aventura music collection\"\n$ cb --note \"For my Aventura music collection\"\n$ cb nt \"For my Aventura music collection\"\n$ cb --nt \"For my Aventura music collection\"\n# All work great!\n```\n\nAdd a personal note to a clipboard by piping it in.\n```sh\n$ echo \"For my Aventura music collection\" | cb note\n```\n\nRemove a note from a clipboard.\n```sh\n$ cb note \"\"\n```\n\n<br>\n\n<h3><b>Show Note</b> &emsp; <code>cb [--](note|nt)[(num)|_(id)]</code></h3>\n\nStart by adding a note to a clipboard.\n```sh\n$ cb note \"For my Aventura music collection\"\n```\n\nShow the note you added.\n```sh\n$ cb note\n$ cb --note\n$ cb nt\n$ cb --nt\n```\n\n<br>\n\n<h3><b>Set Ignore Rules</b> &emsp; <code>cb [--](ignore|ig)[(num)|_(id)] (regex) [regexes]</code> or <code>(regex) | cb [[--](ignore|ig)][(num)|_(id)]</code></h3>\n\nSet some kinds of content to always ignore.\n```sh\n$ cb ignore \"(?<![A-Za-z0-9/+=])[A-Za-z0-9/+=]{40}(?![A-Za-z0-9/+=])\"\n$ cb --ignore \"(?<![A-Za-z0-9/+=])[A-Za-z0-9/+=]{40}(?![A-Za-z0-9/+=])\"\n$ cb ig \"(?<![A-Za-z0-9/+=])[A-Za-z0-9/+=]{40}(?![A-Za-z0-9/+=])\"\n$ cb --ig \"(?<![A-Za-z0-9/+=])[A-Za-z0-9/+=]{40}(?![A-Za-z0-9/+=])\"\n# All work great!\n# \"(?<![A-Za-z0-9/+=])[A-Za-z0-9/+=]{40}(?![A-Za-z0-9/+=])\" is the regex for an AWS SK secret.\n```\n\nSet an ignore regex rule by piping it in.\n```sh\n$ echo \"[abc]{10}\" | cb ignore\n```\n\nRemove all ignore regex rules from a clipboard.\n```sh\n$ cb ignore \"\"\n```\n\n<br>\n\n<h3><b>Show Ignore Rules</b> &emsp; <code>cb [--](ignore|ig)[(num)|_(id)]</code></h3>\n\nStart by adding some ignore regex rules to a clipboard.\n```sh\n$ cb ignore \"Foo\" \"Bar\" \"Baz\"\n```\n\nShow the rules you just added.\n```sh\n$ cb ignore\n$ cb --ignore\n$ cb ig\n$ cb --ig\n```\n\n<br>\n\n<h3><b>Show Detailed Info</b> &emsp; <code>cb [--](info|in)[(num)|_(id)]</code> or <code>cb [--](info|in)[(num)|_(id)] | (something)</code></h3>\n\nShow helpful details for a clipboard.\n```sh\n$ cb info\n$ cb --info\n$ cb in\n$ cb --in\n# All are the same!\n```\n\nOutput these helpful details in JSON format.\n```sh\n$ cb info | cat\n$ cb info | jq\n```\n\n<br>\n\n<h3><b>Search Clipboard Contents</b> &emsp; <code>cb [--](search|sr)[(num)|_(id)] (query) [queries]</code></h3>\n\nStart by copying several things.\n```sh\n$ cb copy Foo Bar Baz\n$ cb copy \"Some example content\"\n$ cb copy2 \"Blah bleh bluh bloh\"\n```\n\nSearch a clipboard's contents.\n```sh\n$ cb search Foo\n$ cb --search Blah\n$ cb sr Bar\n$ cb --sr Baz\n# All are the same!\n```\n\n<br>\n\n<h3><b>Show Help Message</b> &emsp; <code>cb (-h|[--]help)</code></h3>\n\nShow the help message.\n```sh\n$ cb help\n$ cb --help\n$ cb -h \n# These three versions all work great!\n```\n\n<br>\n\n<h3><b>Check All Clipboards' Status</b> &emsp; <code>cb [[--]status|st]</code> or <code>cb [--](status|st) | (something)</code></h3>\n\nCheck the status of all clipboards that have content.\n```sh\n$ cb status\n$ cb --status\n$ cb st\n$ cb --st\n$ cb \n# These all work great!\n```\n\nGet the status of all clipboards in JSON format.\n```sh\n$ cb status | cat\n```\n\n<br>\n\n<h3><b>Check Your Configuration</b> &emsp; <code>cb [[--]config|cfg]</code></h3>\n\nCheck your configuration of CB.\n```sh\n$ cb config\n$ cb --config\n$ cb cfg\n$ cb --cfg\n# These all work great!\n```\n\n<br>\n\n### <img src=\"documentation/readme-assets/TipsAndTricks.png\" alt=\"Tips And Tricks\" height=25px />\n\nNeed to paste a funky symbol somewhere a lot? Copy it to a persistent clipboard.\n```sh\n$ cb cp_theta Î¸\n$ cb -c amog cp à¶ž\n```\n\nPaste whatever's in the clipboard straight into your favorite text editor.\n```sh\n# Vim\n:r !cb\n# Nano\n[Ctrl-T] cb\n# VSCode\ncb | code -\n```\n\nCopy a password securely by deleting it once you've pasted it.\n```sh\n$ cb cut \"AVeryStrongPassword!\"\n$ cb | some-program\n# Now gone\n```\n\nOn a slow system? Cache certain things so you don't have to do them again.\n```sh\n$ neofetch | cb cp_neo\n$ cb | cat\n```\n    \nYank anything sitting in your terminal without ever touching the mouse.\n```sh\n$ env | yank -d = -- cb\n```\n    \nInstantly copy to the main clipboard using your favorite dmenu tool.\n```sh\n$ cb cp \"$(cb st | jq -r '.[] | if type==\"array\" then .[].path else if type==\"object\" then .path else . end end' | dmenu)\"\n# For copying the latest entry from any of your clipboards\n$ cb cp \"$(cb hs | jq -r '.[].content | if type==\"array\" then .[].path else if type==\"object\" then .path else . end end' | dmenu)\"\n# For copying any entry from a specific clipboard\n```\n\nNeed to share or pore over log files? Copy them in one step!\n```sh\n$ journalctl | cb\n# For systemd\n$ sudo dmesg | cb\n# For Linux; note that you're not running \"sudo cb\" here\n$ cb copy logs/latest.log\n# For Minecraft servers\n```\n\nWant CB to look different? Change up the color scheme.\n```sh\n# This one looks like The Matrix\n$ export CLIPBOARD_THEME=green\n$ cb\n# This one is for light backgrounds\n$ export CLIPBOARD_THEME=light\n$ cb\n# Check out the other themes too!\n```\n\nHere's what some of these themes might look like.\n\n<img src=\"documentation/readme-assets/CBThemes.png\" width=600px />\n\nMake your own scripts that can fully automate your workflows.\n```sh\n#!/bin/sh\n# This script does nothing except serve as an example of automating CB.\nlink=\"https://SomeWebsiteWithLotsOfContent\"\nwget link\ncb copy *.jpg *.png\ncb remove \"AZ.*\\.png\"\ncb | tar -cf foobar.tar\ncb -c footar < foobar.tar\ncb note \"Latest files from website ABCXYZ\"\n```\n\n<br>\n    \n<br>\n\n<p align=\"center\">\n    <img src=\"documentation/readme-assets/CustomizeClipboard.png\" alt=\"Let's make CB our own.\" height=\"40px\" />\n</p>\n\n<br>\n    \n<br>\n\n### ![Simple Configuration](documentation/readme-assets/CBSimpleConfiguration.png)\n\n### <img src=\"documentation/readme-assets/Flags.png\" alt=\"Flags\" height=25px />\n\n<h3><b><code>--all</code>, <code>-a</code> &emsp; Add this when clearing to clear all clipboards at once, or when searching to search all clipboards.</b></h3>\n\nStart from a blank slate.\n```sh\n$ cb --all clear\n```\nWARNING! This will get rid of everything you've stored with CB, so be very careful when clearing with this option.\n\n<br>\n\n<h3><b><code>--clipboard (clipboard)</code>, <code>-c (clipboard)</code> &emsp; Add this to choose which clipboard you want to use. </b></h3>\n\nChoose a non-default clipboard.\n```sh\n$ cb -c 5 copy Foobar\n$ cb --clipboard 10 copy BarBaz\n```\n\nCopy to a temporary clipboard that doesn't start with a number.\n```sh\n$ cb -c SomeCB copy \"A really really long sentence, and I mean really realy super DUPER long!\"\n```\n\nNote: Although copying to a temporary clipboard that doesn't start with a number is impossible using the conventional method of adding it to the end of the action, this alternative method is completely supported and works great.\n\nChoose a persistent clipboard.\n```sh\n$ cb -c _ copy \"Generation Next\"/*\n```\n\n<br>\n\n<h3><b><code>--entry (entry)</code>, <code>-e (entry)</code> &emsp; Add this to choose which history entry you want to use. </b></h3>\n\nChoose a non-default history entry.\n```sh\n$ cb -e 5 copy Foobar\n$ cb --entry 10 copy BarBaz\n```\n\nNote: To copy to a non-default entry, that entry must exist already.\n\n<br>\n\n<h3><b><code>--fast-copy</code>, <code>-fc</code> &emsp; Add this to use links when copying, cutting, pasting, or loading. If you modify the items that you used with this flag, then the items you paste will have the same changes.</b></h3>\n\nCopy a lot of files in much less time than before.\n```sh\n$ cb --fast-copy copy /usr/bin/*\n```\n\n<br>\n\n<h3><b><code>--mime</code>, <code>-m</code> &emsp; Add this to request a specific content MIME type from GUI clipboard systems.</b></h3>\n\nSave GUI clipboard content of a specific MIME type to the main clipboard.\n```sh\n$ cb --mime text/html | cb\n```\n\n<br>\n\n<h3><b><code>--no-confirmation</code>, <code>-nc</code> &emsp; Add this to disable confirmation messages from CB. </b></h3>\n\nReduce distractions after showing some text content.\n```sh\n$ cb -nc sh | cat\n```\n\n<br>\n\n<h3><b><code>--no-progress</code>, <code>-np</code> &emsp; Add this to disable progress messages from CB. </b></h3>\n\nReduce distractions while doing a search that takes a while.\n```sh\n$ fzf | cb -np\n```\n\n<br>\n\n<h3><b><code>--secret</code> &emsp; Add this when ignoring content to ignore a secret (or secrets) instead. </b></h3>\n\nIgnore a password.\n```sh\n$ cb ignore --secret MyVerySecurePassword\n$ cb ignore --secret # This will show the SHA512 hash of MyVerySecurePassword\n$ cb ignore --secret MyVerySecurePassword2 \"someOTHER secret1 banana\"\n$ cb ignore --secret # Now it will show the SHA512 hashes of MyVerySecurePassword2 and someOTHER secret1 banana\n```\n\nClear all your passwords.\n```sh\n$ cb ignore --secret \"\"\n# WARNING: Once you clear all secrets, there is no going back.\n```\n\n<br>\n\n<h3><b><code>--bachata</code> &emsp; Add this for something special! </b></h3>\n\nMake your life less boring.\n```sh\n$ cb --bachata\n```\n\n\n    \n<br>\n<br>\n\n### <img src=\"documentation/readme-assets/EnvironmentVariables.png\" alt=\"Environment Variables\" height=25px />\n\n<h3><b><code>CI</code> &emsp; Set this to \"true\" or \"1\" to make CB overwrite existing items without a user prompt when pasting. This variable is intended for Continuous Integration scripts where a live human is not present to make decisions.</b></h3>\n\nUse CB in a CI script.\n```sh\n...\ncb cp Temp/*\n...\ncb p\n...\n```\n\n<br>\n\n<h3><b><code>CLIPBOARD_ACTION</code> &emsp; CB will set this to the current action when running a script. </b></h3>\n\nStart with a script.\n```sh\n$ cb script ls\n$ cb history\n# Now, whatever script CB runs will have access to the CLIPBOARD_ACTION environment variable, here with value \"history\"\n```\n\n<br>\n\n<h3><b><code>CLIPBOARD_EDITOR</code> &emsp; Set this to the editor you want to use for the Edit action. </b></h3>\n\nSet a custom editor to use.\n```sh\n$ export CLIPBOARD_EDITOR=nano\n```\n\nNote: The environment variables `EDITOR` and `VISUAL` by default take precedence if `CLIPBOARD_EDITOR` isn't set.\n\n<br>\n\n<h3><b><code>CLIPBOARD_HISTORY</code> &emsp; Set this to the maximum history size you want to keep, like <code>10000</code> or <code>50gb</code>. </b></h3>\n\n`CLIPBOARD_HISTORY` supports up to 2^32 - 1 as a value. So, go ahead. Crank that b*tch up to a billion.\n```sh\n$ export CLIPBOARD_HISTORY=1000000000\n$ cb copy \"Oh yeah!\"\n```\n\nOnly keep a certain amount of data.\n```sh\n$ export CLIPBOARD_HISTORY=100tb\n$ cb copy Yo_Mama.tar.gz\n```\n\nNote: You can choose between `tb`, `gb`, `mb`, `kb`, and `b` to specify amounts for terabytes, gigabytes, megabytes, kilobytes, and bytes respectively.\n\nOnly keep a certain time length.\n```sh\n$ export CLIPBOARD_HISTORY=52w\n```\n\nNote: You can choose between `y`, `m`, `w`, `d`, and `h` to specify amounts for years, months, weeks, days, and hours respectively.\n\n<br>\n\n<h3><b><code>CLIPBOARD_LOCALE</code> &emsp; Set this to the locale that only CB will use for its commands and output, like <code>en_US.UTF-8</code> or <code>es_DO.UTF-8</code>. </b></h3>\n\nChange the locale to match what you're more comfortable with.\n```sh\n$ export CLIPBOARD_LOCALE=es_DO.UTF-8\n$ cb cp \"Amo a Aventura\"\n\n> $Env:CLIPBOARD_LOCALE=es_DO.UTF-8\n# Powershell version\n```\n\nOverride the locale case-by-case.\n```sh\n$ export CLIPBOARD_LOCALE=fr_CA.UTF-8\n...\n$ CLIPBOARD_LOCALE=\"\" cb cp Foobar\n```\n\n<br>\n\n<h3><b><code>CLIPBOARD_SCRIPT_TIMING</code> &emsp; CB will set this to the timing of the script that it runs.</b></h3>\n\nStart with a script.\n```sh\n$ cb script ls\n$ cb history\n# Now, whatever script CB runs will have access to the CLIPBOARD_SCRIPT_TIMING environment variable, here with value \"before\"\n# (output of \"cb history\")\n# Now, CLIPBOARD_SCRIPT_TIMING will have value \"after\"\n```\n\n<br>\n\n<h3><b><code>CLIPBOARD_TMPDIR</code> &emsp; Set this to the directory that only CB will use to hold the items you cut or copy into a temporary directory.</b></h3>\n\nChoose a special place to put your temporary clipboards this one time.\n```sh\n$ CLIPBOARD_TMPDIR=/home/jackson/SomeDirectory cb copy *\n```\n\nChoose a special place to put your temporary clipboards every time.\n\n```sh\n$ export CLIPBOARD_TMPDIR=/home/jackson/SomeDirectory\n$ cb copy *\n> $Env:CLIPBOARD_TMPDIR = /home/jackson/SomeDirectory\n# Powershell\n```\n\nNote: By default, CB uses the C++ filesystem library function `fs::temp_directory_path()` to generate the temporary directory, prioritizing `CLIPBOARD_TMPDIR` and then `XDG_RUNTIME_DIR` respectively first if CB can get a value from them.\n\n<br>\n\n<h3><b><code>CLIPBOARD_PERSISTDIR</code> &emsp; Set this to the directory that only CB will use to hold the items you cut or copy into a persistent directory.</b></h3>\n\nChoose a special place to put your persistent clipboards this one time.\n```sh\n$ CLIPBOARD_PERSISTDIR=/home/jackson/SomeDirectory cb copy *\n```\n\nChoose a special place to put your persistent clipboards every time.\n\n```sh\n$ export CLIPBOARD_PERSISTDIR=/home/jackson/SomeDirectory\n$ cb copy *\n> $Env:CLIPBOARD_PERSISTDIR = /home/jackson/SomeDirectory\n# Powershell\n```\n\nNote: By default, CB uses the user's home directory to generate the persistent directory, prioritizing `CLIPBOARD_PERSISTDIR` and then `XDG_STATE_HOME` first respectively if CB can get a value from them.\n\n<br>\n\n<h3><b><code>CLIPBOARD_CUSTOMPERSIST</code> &emsp; Set this to the clipboards you want to make persistent, using regex.</b></h3>\n\nMake everything you copy persistent.\n\n```sh\n$ export CLIPBOARD_CUSTOMPERSIST=\".*\"\n$ cb copy Foo Bar Baz\n# This puts everything in the persistent directory but still with the clipboard name \"0\"\n```\n\nMake some clipboards persistent.\n\n```sh\n$ export CLIPBOARD_CUSTOMPERSIST=5\n$ cb copy5 Foo Bar Baz\n```\n\n<br>\n\n<h3><b><code>CLIPBOARD_NOAUDIO</code> &emsp; Set this to \"true\" or \"1\" to disable audio coming from CB.</b></h3>\n\nTurn off those sound effects.\n```sh\n$ export CLIPBOARD_NOAUDIO=1\n$ cb ffksdjfdj \n# No more error sounds after doing a nonexistent command\n```\n\n<br>\n\n<h3><b><code>CLIPBOARD_NOGUI</code> &emsp; Set this to \"true\" or \"1\" to disable integration with GUI clipboards.</b></h3>\n\nDebug a flaky GUI system by disabling its integration with CB.\n\n```sh\n$ CLIPBOARD_NOGUI=1 cb show\n$ export CLIPBOARD_NOGUI=1\n$ cb show\n```\n\n<br>\n\n<h3><b><code>CLIPBOARD_NOPROGRESS</code> &emsp; Set this to \"true\" or \"1\" to disable only progress messages from CB.</b></h3>\n\nReduce distractions while doing a search that takes a while.\n```sh\n$ fzf | CLIPBOARD_NOPROGRESS=1 cb\n```\n\nDisable progress messages from CB entirely.\n```sh\n$ export CLIPBOARD_NOPROGRESS=1\n$ fzf | cb\n```\n\n<br>\n\n<h3><b><code>CLIPBOARD_NOREMOTE</code> &emsp; Set this to \"true\" or \"1\" to disable remote clipboard sharing.</b></h3>\n\nDisable all clipboard content transfers through the terminal.\n```sh\n$ export CLIPBOARD_NOREMOTE=1\n```\n\n<br>\n\n<h3><b><code>CLIPBOARD_SILENT</code> &emsp; Set this to \"true\" or \"1\" to disable progress and confirmation messages from CB.</b></h3>\n\nRest in peace by seeing nothing that isn't an error.\n```sh\n$ export CLIPBOARD_SILENT=1\n$ cb cp \"I'm running out of Aventura references\"\n```\n\n<br>\n\n<h3><b><code>CLIPBOARD_THEME</code> &emsp; Set this to the color theme that CB will use. Choose between <code>light</code>, <code>darkhighcontrast</code>, <code>lighthighcontrast</code>, <code>amber</code>, <code>green</code>, and <code>ansi</code> (the default is <code>dark</code>).</b></h3>\n\nRemind yourself of the terminals of the past.\n```sh\n$ export CLIPBOARD_THEME=green\n$ cb cp \"I'm in the Matrix now\"\n$ export CLIPBOARD_THEME=amber\n$ cb cp \"Yellow terminals feel just like sitting in front of a nice campfire\"\n```\n\nMake CB more accessible.\n```sh\n$ export CLIPBOARD_THEME=darkhighcontrast\n$ cb show\n```\n\nFully customize your style.\n```sh\n$ export CLIPBOARD_THEME=help=r;g;b,info=r;g;b,error=r;g;b,success=r;g;b,progress=r;g;b\n# Note: You must put in a number within range 0-255 for each r, g, and b\n```\n\n<br>\n\n<h3><b><code>FORCE_COLOR</code> &emsp; Set this to \"true\" or \"1\" to make CB always show color regardless of what you set <code>NO_COLOR</code> to.</b></h3>\n\nOverride somebody else's choice to disable colors.\n```sh\n$ export NO_COLOR=1\n...\n$ FORCE_COLOR=1 cb copy \"There are almost no bachateros where I live right now\"\n```\n\nNote: CB also supports `CLICOLOR_FORCE`.\n\nOverride somebody else's choice to disable colors, but in a different way.\n```sh\n$ export CLICOLOR=0\n...\n$ CLICOLOR_FORCE=1 cb copy \"There are almost no bachateros where I live right now\"\n```\n\n<br>\n\n<h3><b><code>NO_COLOR</code> &emsp; Set this to anything to make CB not show any colors.</b></h3>\n\nMake CB look boring.\n```sh\n$ export NO_COLOR=1\n$ cb cp \"From the 1960s until the 1990s, bachata was perceived as boring music for poor Dominicans.\"\n```\n\nNote: CB also supports `CLICOLOR`.\n\nMake CB look boring, but in a different way.\n```sh\n$ export CLICOLOR=0\n$ cb cp \"In the 1990s, though, several innovative musicians reinvigorated bachata by using electric guitars with fancy effects.\"\n```\n\n\n \n<br>\n<br>\n<br>\n\n### ![Need Help?](documentation/readme-assets/NeedHelp.png)\n\nWe're here for you! Check out [the Clipboard Project Wiki](https://github.com/Slackadays/Clipboard/wiki) for even more information, ask all your burning questions in [GitHub Discussions](https://github.com/Slackadays/Clipboard/discussions), or join [the awesome Discord group](https://discord.gg/J6asnc3pEG)!\n\n<p align=\"center\">\n    <a href=\"https://github.com/Slackadays/Clipboard/wiki\"><img src=\"https://img.shields.io/badge/Docs-Wiki-green?style=for-the-badge&labelColor=rgb(55,55,55)\" alt=\"CB Wiki\">\n    <a href=\"https://github.com/Slackadays/Clipboard/discussions\"><img src=\"https://img.shields.io/badge/Questions%3F-Ask%20Away-red?style=for-the-badge&labelColor=rgb(55,55,55)\" alt=\"Questions? Ask Away!\"></a>\n    <a href=\"https://twitter.com/GetClipboard\"><img src=\"https://img.shields.io/badge/FOLLOW-%40GETCLIPBOARD-blue?logo=twitter&style=for-the-badge&labelColor=rgb(55,55,55)\" alt=\"Follow us on Twitter\"></a>\n    <br>\n    <a href=\"https://discord.gg/J6asnc3pEG\"><img src=\"documentation/readme-assets/join-our-discord.svg\" alt=\"Discord Chat\"></a>\n</p>\n\n<br>\n<br>\n\n### ![Thank You!](documentation/readme-assets/ThankYou.png)\n\nSay thank you to all our beautiful contributors who have helped make the Clipboard Project incredible[.](https://www.youtube.com/watch?v=yjdHGmRKz08)\n Want to join the club? We're always accepting [new contributions](https://github.com/Slackadays/Clipboard/blob/main/CONTRIBUTING.md) too.\n\nSpecial thanks to [MacStadium](https://www.macstadium.com/) for sponsoring the Clipboard Project by providing a Mac Mini for macOS development!\n\nAnd if you're feeling generous, feel free to give us a :star:! We appreciate every single one - including yours.\n    \n<br>\n\n<p align=\"center\"> \n    <img src=\"documentation/readme-assets/ClipboardMakesYourLifeEasy.png\" alt=\"CB makes your life easy.\" />\n</p>\n\n<br>\n\n<p align=\"right\"><sub><code>cb copy haters && cb > /dev/null</code></sub></p>\n"
        },
        {
          "name": "app.getclipboard.Clipboard.desktop",
          "type": "blob",
          "size": 0.341796875,
          "content": "[Desktop Entry]\nName=Clipboard\nIcon=app.getclipboard.Clipboard\nGenericName=Clipboard Manager\nExec=bash -c \"export CLIPBOARD_SILENT=1; while true; do cb hs; CLIPBOARD_NOGUI=1 cb; echo -n -e '\\033[?25l'; sleep 2; clear; done\"\nType=Application\nTerminal=true\nCategories=Utility;Office;Development\nComment=Cut, copy, and paste anything, anytime, anywhere\n"
        },
        {
          "name": "app.getclipboard.Clipboard.metainfo.xml",
          "type": "blob",
          "size": 3.291015625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<component type=\"console-application\">\n  <id>app.getclipboard.Clipboard</id>\n  \n  <name>Clipboard</name>\n  <summary>Cut, copy, and paste anything, anytime, anywhere</summary>\n  \n  <metadata_license>FSFAP</metadata_license>\n  <project_license>GPL-3.0-or-later</project_license>\n  <launchable type=\"desktop-id\">app.getclipboard.Clipboard.desktop</launchable>\n  <content_rating type=\"oars-1.1\" />\n  \n  <description>\n    <p>\n      The Clipboard Project is your new second brain.\n\n      This is an advanced clipboard manager that&apos;s made especially for your terminal. Cut, copy and paste anything, anytime, anywhere with unlimited capacity, clipboards, and history! \n\n      Script CB to work superbly with your other favorite terminal tools. Integrate it with your existing system clipboards. Save time and effort the easy way.\n    </p>\n    <p>\n      IMPORTANT! If you install the Clipboard Project with Flatpak, you'll likely be able to run it with the command \"flatpak run app.getclipboard.Clipboard\" or through the desktop entry. However, this is long and hard to remember, and Flatpak doesn't yet offer a built-in solution so that you can just use \"cb\". So, to work around this issue, run the command \"alias cb='flatpak run app.getclipboard.Clipboard'\" so that the command \"cb\" does what you expect. Add that command to your terminal startup file like .bashrc so that it works every time you start the terminal.\n    </p>\n  </description>\n\n  <screenshots>\n    <screenshot type=\"default\">\n      <caption>An example of using Clipboard</caption>\n      <image type=\"source\" width=\"1906\" height=\"1010\">https://raw.githubusercontent.com/Slackadays/Clipboard/0.9.0/documentation/readme-assets/CBDemo.png</image>\n    </screenshot>\n  </screenshots>\n  \n  <categories>\n    <category>System</category>\n    <category>FileTools</category>\n  </categories>\n\n  <url type=\"homepage\">https://getclipboard.app</url>\n  <url type=\"bugtracker\">https://github.com/Slackadays/Clipboard/issues</url>\n  <url type=\"donation\">https://github.com/sponsors/Slackadays</url>\n  <url type=\"help\">https://github.com/Slackadays/Clipboard/wiki</url>\n  <url type=\"contact\">https://discord.gg/J6asnc3pEG</url>\n  <url type=\"vcs-browser\">https://github.com/Slackadays/Clipboard</url>\n  <url type=\"contribute\">https://github.com/Slackadays/Clipboard/blob/main/.github/CONTRIBUTING.md</url>\n\n  <releases>\n    <release version=\"0.10.1\" date=\"2024-12-18\" />\n    <release version=\"0.10.0\" date=\"2024-11-16\" />\n    <release version=\"0.9.1\" date=\"2024-10-06\" />\n    <release version=\"0.9.0\" date=\"2023-12-17\" />\n    <release version=\"0.8.3\" date=\"2023-10-02\" />\n    <release version=\"0.8.2\" date=\"2023-09-30\" />\n    <release version=\"0.8.1\" date=\"2023-07-08\" />\n    <release version=\"0.8.0\" date=\"2023-06-03\" />\n    <release version=\"0.7.1\" date=\"2023-05-10\" />\n  </releases>\n\n  <keywords>\n    <keyword>clipboard</keyword>\n    <keyword>clipboard manager</keyword>\n    <keyword>copy</keyword>\n    <keyword>cut</keyword>\n    <keyword>paste</keyword>\n    <keyword>terminal</keyword>\n    <keyword>scratchpad</keyword>\n    <keyword>notepad</keyword>\n    <keyword>clipboard project</keyword>\n    <keyword>getclipboard</keyword>\n    <keyword>cb</keyword>\n  </keywords>\n\n  <developer_name>Jackson Huff</developer_name>\n  \n  <provides>\n    <binary>cb</binary>\n  </provides>\n</component>\n"
        },
        {
          "name": "app.getclipboard.Clipboard.png",
          "type": "blob",
          "size": 36.685546875,
          "content": null
        },
        {
          "name": "app.getclipboard.Clipboard.yml",
          "type": "blob",
          "size": 1.0400390625,
          "content": "app-id: app.getclipboard.Clipboard\nruntime: org.freedesktop.Platform\nruntime-version: '22.08'\nsdk: org.freedesktop.Sdk\ncommand: cb\nfinish-args:\n  - --share=ipc\n  - --socket=fallback-x11\n  - --socket=wayland\n  - --filesystem=host\n  - --filesystem=xdg-run/Clipboard\n  - --socket=pulseaudio\nmodules:\n  - name: cb\n    buildsystem: cmake-ninja\n    post-install:\n      - install -D app.getclipboard.Clipboard.metainfo.xml /app/share/metainfo/app.getclipboard.Clipboard.metainfo.xml\n      - install -D app.getclipboard.Clipboard.desktop /app/share/applications/app.getclipboard.Clipboard.desktop\n      - install -D app.getclipboard.Clipboard.png /app/share/icons/hicolor/512x512/apps/app.getclipboard.Clipboard.png\n    sources:\n      - type: git\n        url: https://github.com/Slackadays/Clipboard\n        branch: main\n      - type: file\n        path: app.getclipboard.Clipboard.metainfo.xml\n      - type: file\n        path: app.getclipboard.Clipboard.desktop\n      - type: file\n        path: app.getclipboard.Clipboard.png\n    config-opts: [\"-DCMAKE_BUILD_TYPE=Release\"]"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "documentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "install.ps1",
          "type": "blob",
          "size": 0.9306640625,
          "content": "if (Test-Path $env:USERPROFILE\\scoop) {\n    scoop install clipboard\n    exit\n}\n\nInvoke-WebRequest https://github.com/Slackadays/Clipboard/releases/latest/download/clipboard-windows-amd64.zip -OutFile clipboard-windows-amd64.zip\nExpand-Archive clipboard-windows-amd64.zip -DestinationPath .\\clipboard-windows-amd64\n\nNew-Item -ItemType Directory -Force -Path \"C:\\Program Files\\Clipboard\"\n\nCopy-Item .\\clipboard-windows-amd64\\bin\\cb.exe -Force -Destination \"C:\\Program Files\\Clipboard\\cb.exe\"\n\n$Old = (Get-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name path).path\n$New = \"$Old;C:\\Program Files\\Clipboard\"\nSet-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name path -Value $New\n\nRemove-Item .\\clipboard-windows-amd64.zip -Force\nRemove-Item .\\clipboard-windows-amd64 -Force -Recurse\n\nWrite-Host \"Please restart to use CB\"\n"
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 5.96484375,
          "content": "#!/bin/sh\nset -eu\n\nflatpak_package=\"app.getclipboard.Clipboard\"\n\nunsupported() {\n    printf \"\\033[31mSorry, but this installer script doesn't support %s.\\n\\033[0m\" \"$1\"\n    printf '\\033[32mðŸ’¡ However, you can still install CB using the other methods in the readme!\\n\\033[0m'\n}\n\nverify_flatpak(){\n    if flatpak list | grep -q \"$flatpak_package\"; then\n        printf \"\\033[32mClipboard installed successfully!\\n\\033[0m\"\n        printf \"\\033[0mAdd this alias to your terminal profile (like .bashrc) to make it work every time:\\n\\033[0m\"\n        printf '\\033[33malias cb=\"flatpak run %s\"\\n\\033[0m' \"$flatpak_package\"\n        exit 0\n    else\n        printf \"\\033[31mCouldn't install CB\\n\\033[0m\"\n        exit 1\n    fi\n}\n\nverify() {\n    if command -v cb 2>&1\n    then\n        if ! cb 2>&1\n        then\n            unsupported \"this system\"\n            exit 1\n        else\n            printf \"\\033[32mClipboard installed successfully!\\n\\033[0m\"\n            exit 0\n        fi\n    else\n        printf \"\\033[31mCouldn't install CB\\n\\033[0m\"\n        exit 1\n    fi\n}\n\ncompile() {\n    git clone --depth 1 https://github.com/slackadays/Clipboard\n    cd Clipboard/build\n    cmake ..\n    cmake --build .\n    cmake --install .\n\n    if [ \"$(uname)\" = \"OpenBSD\" ] #check if OpenBSD\n    then\n        doas cmake --install .\n    else\n        sudo cmake --install .\n    fi\n}\n\ncan_use_sudo() {\n    prompt=$(sudo -nv 2>&1)\n    if sudo -nv > /dev/null 2>&1; then\n      # exit code of sudo-command is 0\n      return 0\n    elif echo \"$prompt\" | grep -q '^sudo:'; then\n      return 0\n    else\n      return 1\n    fi\n}\n\nprintf \"\\033[32mSearching for a package manager...\\n\\033[0m\"\n\nif command -v apk > /dev/null 2>&1\nthen\n    if can_use_sudo\n    then\n        sudo apk add clipboard\n        verify\n    fi\nelif command -v yay > /dev/null 2>&1\nthen\n    if can_use_sudo\n    then\n        sudo yay -S clipboard\n        verify\n    fi\nelif command -v emerge > /dev/null 2>&1\nthen\n    if can_use_sudo\n    then\n        sudo emerge -av app-misc/clipboard\n        verify\n    fi\nelif command -v brew > /dev/null 2>&1\nthen\n    brew install clipboard\n    verify\nelif command -v flatpak > /dev/null 2>&1\nthen\n    if can_use_sudo\n    then\n      sudo flatpak install flathub \"$flatpak_package\" -y\n    else\n      flatpak install flathub \"$flatpak_package\" -y\n    fi\n\n    verify_flatpak\nelif command -v snap > /dev/null 2>&1\nthen\n    if can_use_sudo\n    then\n        sudo snap install clipboard\n        verify\n    fi\nelif command -v nix-env > /dev/null 2>&1\nthen\n    nix-env -iA nixpkgs.clipboard-jh\n    verify\nelif command -v pacstall > /dev/null 2>&1\nthen\n    pacstall -I clipboard-bin\n    verify\nelif command -v scoop > /dev/null 2>&1\nthen\n    scoop install clipboard\n    verify\nelif command -v xbps-install > /dev/null 2>&1\nthen\n    if can_use_sudo\n    then\n        sudo xbps-install -S clipboard\n        verify\n    fi\nfi\n\ntmp_dir=$(mktemp -d -t cb-XXXXXXXXXX)\ncd \"$tmp_dir\"\n\nif can_use_sudo\nthen\n    requires_sudo=true\n    install_path=\"/usr/local\"\n    sudo mkdir -p \"$install_path/bin\"\n    sudo mkdir -p \"$install_path/lib\"\nelse\n    requires_sudo=false\n    install_path=\"$HOME/.local\"\n    mkdir -p \"$install_path/bin\"\n    mkdir -p \"$install_path/lib\"\nfi\n\nif [ \"$(uname)\" = \"Linux\" ]\nthen\n    if [ \"$(uname -m)\" = \"x86_64\" ]\n    then\n        download_link=https://nightly.link/Slackadays/Clipboard/workflows/build-clipboard/main/clipboard-linux-amd64.zip\n    elif [ \"$(uname -m)\" = \"aarch64\" ]\n    then\n        download_link=https://nightly.link/Slackadays/Clipboard/workflows/build-clipboard/main/clipboard-linux-arm64.zip\n    elif [ \"$(uname -m)\" = \"riscv64\" ]\n    then\n        download_link=https://nightly.link/Slackadays/Clipboard/workflows/build-clipboard/main/clipboard-linux-riscv64.zip\n    elif [ \"$(uname -m)\" = \"i386\" ]\n    then\n        download_link=https://nightly.link/Slackadays/Clipboard/workflows/build-clipboard/main/clipboard-linux-i386.zip\n    elif [ \"$(uname -m)\" = \"ppc64le\" ]\n    then\n        download_link=https://nightly.link/Slackadays/Clipboard/workflows/build-clipboard/main/clipboard-linux-ppc64le.zip\n    elif [ \"$(uname -m)\" = \"s390x\" ]\n    then\n        download_link=https://nightly.link/Slackadays/Clipboard/workflows/build-clipboard/main/clipboard-linux-s390x.zip\n    else\n        download_link=\"skip\"\n    fi\n    if [ \"$download_link\" != \"skip\" ]\n    then\n        curl -SL $download_link -o clipboard-linux.zip\n        unzip clipboard-linux.zip\n        rm clipboard-linux.zip\n        if [ \"$requires_sudo\" = true ]\n        then\n            sudo mv bin/cb \"$install_path/bin/cb\"\n        else\n            mv bin/cb \"$install_path/bin/cb\"\n        fi\n        chmod +x \"$install_path/bin/cb\"\n        if [ -f \"lib/libcbx11.so\" ]\n        then\n            if [ \"$requires_sudo\" = true ]\n            then\n                sudo mv lib/libcbx11.so \"$install_path/lib/libcbx11.so\"\n            else\n                mv lib/libcbx11.so \"$install_path/lib/libcbx11.so\"\n            fi\n        fi\n        if [ -f \"lib/libcbwayland.so\" ]\n        then\n            if [ \"$requires_sudo\" = true ]\n            then\n                sudo mv lib/libcbwayland.so \"$install_path/lib/libcbwayland.so\"\n            else\n                mv lib/libcbwayland.so \"$install_path/lib/libcbwayland.so\"\n            fi\n        fi\n    fi\nelif [ \"$(uname)\" = \"Darwin\" ]\nthen\n    if [ \"$(uname -m)\" = \"x86_64\" ]\n    then\n        curl -SsLl https://nightly.link/Slackadays/Clipboard/workflows/build-clipboard/main/clipboard-macos-amd64.zip -o clipboard-macos.zip\n    elif [ \"$(uname -m)\" = \"arm64\" ]\n    then\n        curl -SsLl https://nightly.link/Slackadays/Clipboard/workflows/build-clipboard/main/clipboard-macos-arm64.zip -o clipboard-macos.zip\n    fi\n    unzip clipboard-macos.zip\n    rm clipboard-macos.zip\n    sudo mv bin/cb \"$install_path/bin/cb\"\n    chmod +x \"$install_path/bin/cb\"\nelif [ \"$(uname)\" = \"FreeBSD\" ]\nthen\n    unsupported \"FreeBSD\"\n    exit 0\nelif [ \"$(uname)\" = \"OpenBSD\" ]\nthen\n    unsupported \"OpenBSD\"\n    exit 0\nelif [ \"$(uname)\" = \"NetBSD\" ]\nthen\n    unsupported \"NetBSD\"\n    exit 0\nelse\ncompile\nfi\n\ncd ..\n\nrm -rf \"$tmp_dir\"\n\nverify\n"
        },
        {
          "name": "justfile",
          "type": "blob",
          "size": 0.2412109375,
          "content": "default:\n  @just --list\n\nbuild:\n  if [ ! -d \"build\" ]; then mkdir build; fi \n\n  cd build; cmake .. -DCMAKE_BUILD_TYPE=Release\n\n  cd build; cmake --build . -j 12\n\n  cd build; sudo cmake --install .\n\nclean:\n  if [ -d \"build\" ]; then rm -rf build; fi"
        },
        {
          "name": "snapcraft.yaml",
          "type": "blob",
          "size": 1.0029296875,
          "content": "name: clipboard\nversion: \"0.10.1\"\nsummary: The ultimate clipboard manager for the terminal\ndescription: |\n  The Clipboard Project is one of the most advanced clipboard managers ever.\n  Cut, copy, and paste anything, anytime, anywhere with unlimited capacity, clipboards, and history.\n  It's feature packed and easy to use by anybody.\nconfinement: strict\nbase: core22\nparts:\n  clipboard:\n    plugin: cmake\n    cmake-parameters:\n      - -DCMAKE_BUILD_TYPE=Release\n      - -DCMAKE_INSTALL_LIBDIR=bin\n    source-type: git\n    source: https://github.com/Slackadays/Clipboard\n    source-branch: main\n    build-packages:\n      - g++\n      - make\n      - cmake\n      - libasound2-dev\n      - liburing-dev\n      - libx11-dev\n      - libwayland-dev\n      - wayland-protocols\n      - libssl-dev\n    stage-packages:\n      - libasound2-dev\n      - liburing-dev\n      - libx11-dev\n      - libwayland-dev\napps:\n  clipboard:\n    command: usr/local/bin/cb\n    plugs:\n      - alsa\n      - x11\n      - wayland\n      - home\n      - removable-media"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}