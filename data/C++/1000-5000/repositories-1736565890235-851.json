{
  "metadata": {
    "timestamp": 1736565890235,
    "page": 851,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sdatkinson/NeuralAmpModelerPlugin",
      "stars": 2046,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.263671875,
          "content": "AccessModifierOffset: -2\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlines: Right\nAlignOperands: true\nAlignTrailingComments: false\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: true\nAllowShortCaseLabelsOnASingleLine: true\nAllowShortFunctionsOnASingleLine: Inline\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: true\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:\n  AfterCaseLabel: true\n  AfterClass: true\n  AfterControlStatement: true\n  AfterEnum: true\n  AfterFunction: true\n  AfterNamespace: true\n  AfterStruct: true\n  AfterUnion: true\n  BeforeCatch: true\n  BeforeElse: true\n  IndentBraces: false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakBeforeBinaryOperators: NonAssignment\nBreakBeforeBraces: Custom\nBreakBeforeInheritanceComma: false\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializers: BeforeComma\nBreakStringLiterals: true\nColumnLimit: 120\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nConstructorInitializerIndentWidth: 0\nContinuationIndentWidth: 2\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nFixNamespaceComments: true\nIndentCaseLabels: true\nIndentPPDirectives: BeforeHash\nIndentWidth: 2\nIndentWrappedFunctionNames: false\nKeepEmptyLinesAtTheStartOfBlocks: true\nMaxEmptyLinesToKeep: 2\nNamespaceIndentation: None\nObjCBinPackProtocolList: Auto\nObjCBlockIndentWidth: 2\nObjCBreakBeforeNestedBlockParam: true\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakBeforeFirstCallParameter: 0\nPenaltyReturnTypeOnItsOwnLine: 1000\nPointerAlignment: Left\nReflowComments: true\nSortIncludes: false\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles: false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard: Cpp11\nUseTab: Never\n"
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1298828125,
          "content": ".DS_Store\nxcuserdata\n*.RPP-bak\nbuild-*\n.idea/\n\n*.ipch\n*.db\n*.suo\n*/.vs\n*.pem\nmkcert*\n\nNeuralAmpModeler/*.wav\nNeuralAmpModeler/peaks/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.4755859375,
          "content": "[submodule \"iPlug2\"]\n\tpath = iPlug2\n\turl = https://github.com/iPlug2/iPlug2\n\t# url = https://github.com/sdatkinson/iPlug2.git\n[submodule \"eigen\"]\n\tpath = eigen\n\turl = https://gitlab.com/libeigen/eigen.git\n[submodule \"NeuralAmpModeler/NeuralAmpModelerCore\"]\n\tpath = NeuralAmpModeler/NeuralAmpModelerCore\n\turl = https://github.com/sdatkinson/NeuralAmpModelerCore.git\n[submodule \"AudioDSPTools\"]\n\tpath = NeuralAmpModeler/AudioDSPTools\n\turl = https://github.com/sdatkinson/AudioDSPTools.git\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.27734375,
          "content": "repos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.4.0\n    hooks:\n      - id: check-yaml\n      - id: end-of-file-fixer\n        types: [python]\n      - id: trailing-whitespace\n\n  - repo: https://github.com/psf/black\n    rev: 23.1.0\n    hooks:\n      - id: black"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.5029296875,
          "content": "# Contributing to the Neural Amp Modeler Plugin\nThanks for your interest in the project! Here are a few quick tips to make sure that your PR will go smoothly:\n\n## \"Communication is the best policy\"\nThis is a fun, scrappy project. \nThings might change--quickly--including these guidelines.\nIf you're not sure about something or have a suggestion, reach out!\n\n## Have an idea?\nIf you have an idea that you'd like to see in the plugin, start by [raising an Issue](https://github.com/sdatkinson/NeuralAmpModelerPlugin/issues/new?assignees=&labels=enhancement&template=feature_request.md&title=%5BFEATURE%5D) and describe what you'd like to see. \nThis way, we can be sure that it's something that will fit in nicely with the plan before you start working.\n\n## Working on Issues\nIf you'd like to work on an [existing Issue](https://github.com/sdatkinson/NeuralAmpModelerPlugin/issues), then speak up in the issue's discussion thread.\nI would like to ask that you please try to give me a timeline for your work--I'd hate to have you duplicate work if I know that I'm going to e.g. get to it today and beat you to the punch.\n\n## Testing\nThis repo doesn't currently have unit tests (gasp! Sorry! If you want to help by proposing a framework, please [raise an Issue](https://github.com/sdatkinson/NeuralAmpModelerPlugin/issues/new?assignees=&labels=enhancement&template=feature_request.md&title=%5BFEATURE%5D)!)\nHowever, there are a few things I'd appreciate if you did to make sure that everything is working as expected:\n- [ ] The standalone plugin builds.\n- [ ] The plugin runs.\n  - [ ] The plugin makes sound.\n  - [ ] You can load a new-style (file) model.\n  - [ ] You can load an old-style (directory) model.\n  - [ ] You can load a supported IR.\n  - [ ] The EQ section works.\n- [ ] The VST3 plugin builds and can be loaded in [the VST3 SDK VST3PluginTestHost](https://steinbergmedia.github.io/vst3_dev_portal/pages/What+is+the+VST+3+SDK/Plug-in+Test+Host.html)\n  - [ ] The plugin passes all unit tests implemented by the VST3PluginTestHost's unit testing tool.\n- [ ] The AU plugin builds.\n\n## Code style\nI don't care too much about the specifics of style, but it helps keep things orderly and helps make sure that the changes in a PR are real changes and not just e.g. an IDE replacing tabs with spaces.\nGoing on the main criterion of ease of adoption, the C++ code (`.cpp` and `.h` files) are formatted according to the LLVM code style that `clang-format` enforces. \nTo easily apply the format to your code, run\n\n```bash\nbash format.bash\n```\n\nand commit the changes.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.046875,
          "content": "MIT License\n\nCopyright (c) 2022 Steven Atkinson\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Models",
          "type": "tree",
          "content": null
        },
        {
          "name": "NeuralAmpModeler.code-workspace",
          "type": "blob",
          "size": 0.1884765625,
          "content": "{\n\t\"folders\": [\n\t\t{\n\t\t\t\"path\": \".\"\n\t\t}\n\t],\n\t\"settings\": {\n\t\t\"git.ignoreLimitWarning\": true,\n\t\t\"doxdocgen.generic.briefTemplate\": \"{text}\",\n\t\t\"files.associations\": {\n\t\t\t\"vector\": \"cpp\"\n\t\t},\n\t}\n}"
        },
        {
          "name": "NeuralAmpModeler",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.896484375,
          "content": "# Neural Amp Modeler Plug-in\n\nA VST3/AudioUnit plug-in\\* for [Neural Amp Modeler](https://github.com/sdatkinson/neural-amp-modeler), built with [iPlug2](https://iplug2.github.io).\n\n- https://www.youtube.com/user/RunawayThumbtack\n- https://github.com/sdatkinson/neural-amp-modeler\n\n## Installation\n\nCheck the [Releases](https://github.com/sdatkinson/NeuralAmpModelerPlugin/releases) for pre-built installers for the plugin!\n\n## Supported Platforms\n\nThe Neural Amp Modeler plugin currently supports Windows 10 (64bit) or later, and macOS 10.15 (Catalina) or later.\n\nFor Linux support, there is an LV2 plugin available: https://github.com/mikeoliphant/neural-amp-modeler-lv2.\n\n## About\n\nThis is a cleaned up version of [the original iPlug2-based NAM plugin](https://github.com/sdatkinson/iPlug2) with some refactoring to adopt better practices recommended by the developers of iPlug2.\n(Thanks [Oli](https://github.com/olilarkin) for your generous suggestions!)\n\n\\*could also support AAX, CLAP, Linux, iOS soon.\n\n## Rough edges\n\n### Standalone I/O\nThe I/O for the standalone doesn't inherit the stability of most plugin hosts (DAWs), so it's a bit sparser on features. The most common sharp edge is that **only input 1 is supported**. If you have a dual-input interface where the guitar goes in input 2 (e.g. Focusrite Solo), then you're going to need to either (A) use input 1 (and, perhaps, a DI box) or (B) use the plugin (VST3/AU) inside a plugin host.\n\n### Graphics backend\nIf you're having trouble with NAM crashing before the GUI comes up, then you might have an unsupported graphics configuration. Usually, this is when you have a dedicated graphics card (like an nVIDIA GPU) and you're using the integrated (CPU) graphics on a Windows system. To fix this, Go to the control panel, pick NAM (or your DAW), and make sure that it uses your graphics card. (If you know more and can help fix this, please make an Issue and let me know more!)\n"
        },
        {
          "name": "REAPER",
          "type": "tree",
          "content": null
        },
        {
          "name": "TemplateProject",
          "type": "tree",
          "content": null
        },
        {
          "name": "bump_version.py",
          "type": "blob",
          "size": 3.3056640625,
          "content": "#!/usr/bin/env python3\n\n# https://semver.org/\n# pip3 install semver\n\nimport os, sys, shutil, subprocess, glob, fileinput, string\nimport semver\n\nIPLUG2_ROOT = \"iPlug2\"\nPROJECT_ROOT = \"NeuralAmpModeler\"\nPROJECT_SCRIPTS = os.path.join(PROJECT_ROOT, \"scripts\")\n\n\ndef replacestrs(filename, s, r):\n    files = glob.glob(filename)\n    print(\"replacing \" + s + \" with \" + r + \" in \" + filename)\n\n    for line in fileinput.input(files, inplace=1):\n        line = line.replace(s, r)\n        sys.stdout.write(line)\n\n\nsys.path.insert(0, os.path.join(os.getcwd(), IPLUG2_ROOT, \"Scripts\"))\n\nfrom parse_config import parse_config\n\n\ndef main():\n    config = parse_config(PROJECT_ROOT)\n    versionStr = config[\"FULL_VER_STR\"]\n    currentVersionInfo = semver.VersionInfo.parse(versionStr)\n    print(\"current version in config.h: v\" + versionStr)\n\n    if len(sys.argv) == 2:\n        if sys.argv[1] == \"major\":\n            newVersionInfo = currentVersionInfo.bump_major()\n        elif sys.argv[1] == \"minor\":\n            newVersionInfo = currentVersionInfo.bump_minor()\n        elif sys.argv[1] == \"patch\":\n            newVersionInfo = currentVersionInfo.bump_patch()\n        elif sys.argv[1] == \"none\":\n            newVersionInfo = currentVersionInfo\n        else:\n            raise ValueError(f\"Unrecognized version bump for '{sys.argv[1]}'\")\n    else:\n        print(\"Please supply an argument major, minor or patch\")\n        exit()\n\n    newVersionInt = (\n        (newVersionInfo.major << 16 & 0xFFFF0000)\n        + (newVersionInfo.minor << 8 & 0x0000FF00)\n        + (newVersionInfo.patch & 0x000000FF)\n    )\n\n    replacestrs(\n        os.path.join(PROJECT_ROOT, \"config.h\"),\n        '#define PLUG_VERSION_STR \"' + versionStr + '\"',\n        '#define PLUG_VERSION_STR \"' + str(newVersionInfo) + '\"',\n    )\n    replacestrs(\n        os.path.join(PROJECT_ROOT, \"config.h\"),\n        \"#define PLUG_VERSION_HEX \" + config[\"PLUG_VERSION_HEX\"],\n        \"#define PLUG_VERSION_HEX \" + \"0x{:08x}\".format(newVersionInt),\n    )\n\n    os.system(\"cd \" + PROJECT_SCRIPTS + \"; python3 update_version-mac.py\")\n    os.system(\"cd \" + PROJECT_SCRIPTS + \"; python3 update_version-ios.py\")\n    os.system(\"cd \" + PROJECT_SCRIPTS + \"; python3 update_installer-win.py 0\")\n\n    print(\"\\nCurrent changelog: \\n--------------------\")\n    os.system(\"cat \" + os.path.join(PROJECT_ROOT, \"installer\", \"changelog.txt\"))\n    print(\"\\n\\n--------------------\")\n\n    edit = input(\"\\nEdit changelog? Y/N: \")\n\n    if edit == \"y\" or edit == \"Y\":\n        os.system(\"vim \" + os.path.join(PROJECT_ROOT, \"installer\", \"changelog.txt\"))\n\n        print(\"\\nNew changelog: \\n--------------------\")\n        os.system(\"cat \" + os.path.join(PROJECT_ROOT, \"installer\", \"changelog.txt\"))\n        print(\"\\n\\n--------------------\")\n\n    tagname = f\"v{newVersionInfo}\"\n    remove_tag = input(f\"\\nAttempt to remove existing tag for {tagname}? Y/N: \")\n\n    if remove_tag == \"y\" or remove_tag == \"Y\":\n        os.system(f\"git tag -d {tagname}\")\n        os.system(f\"git push --delete origin {tagname}\")\n\n    commit = input(\"\\nCommit? Y/N\")\n    if commit == \"y\" or commit == \"Y\":\n        os.system(\"git commit -a --allow-empty\")\n    edit = input(\n        \"\\nTag version and git push to origin? Y/N: \"\n    )\n    if edit == \"y\" or edit == \"Y\":\n        os.system(\"git tag \" + tagname)\n        os.system(\"git push && git push --tags\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "common-ios.xcconfig",
          "type": "blob",
          "size": 4.0625,
          "content": "// this is used for macOS Developer ID / Appstore code-signing\nCERTIFICATE_ID = Oliver Larkin\nDEVELOPMENT_TEAM = 686EDA2T8T // log in to developer.apple.com and see the end of the URL e.g. https://developer.apple.com/account/#/overview/686EDA2T8T\n\n// Which compiler to use\nCOMPILER = com.apple.compilers.llvm.clang.1_0\n\n// which osx sdk to compile against - defaults to latest SDK available\nBASE_SDK_IOS = iphoneos // latest SDK\n\nCLANG_CXX_LANGUAGE_STANDARD = c++17\nCLANG_CXX_LIBRARY = libc++\n\nCLANG_WARN_DOCUMENTATION_COMMENTS = NO\n\nCLANG_ENABLE_OBJC_WEAK = YES\n\n// the minimum OS to support\nIPHONEOS_DEPLOYMENT_TARGET = 14\n\nSHARED_PRECOMPS_DIR = $(TARGET_BUILD_DIR)/PCH\n\n// BUILD SETTINGS TO ENABLE DIFFERENT PREPROCESSOR MACROS, INCLUDE PATHS AND FUNCIONALITY-------------------------------\n\n// ***** PREPROCESSOR MACROS\n\n// macros for all debug/release/tracer builds\nDEBUG_DEFS = DEVELOPMENT=1 DEBUG=1 _DEBUG\nRELEASE_DEFS = RELEASE=1 NDEBUG=1\nTRACER_DEFS = $DEBUG_DEFS TRACER_BUILD // here you can change if a TRACER build is a DEBUG or RELEASE build\n\n// macros for individual plug-in format builds etc\nALL_DEFS = NOMINMAX\nAUv3_DEFS = AUv3_API IPLUG_EDITOR=1 IPLUG_DSP=1\n\n// ***** HEADER INCLUDE PATHS\n// Where the SDKs etc. are located in relation to the plug-in Xcode project (which is in the projects subfolder of an IPlug project)\n\n// the top level iPlug2 folder e.g. where this common.xcconfig is\nPROJECT_ROOT = $(SRCROOT)/..\n\nDEPS_PATH = $(IPLUG2_ROOT)/Dependencies\n\n// IPlug dependencies\nWDL_PATH = $(IPLUG2_ROOT)/WDL\nIPLUG_PATH = $(IPLUG2_ROOT)/IPlug\nAUv3_PATH = $(IPLUG_PATH)/AUv3\nSWELL_PATH = $(WDL_PATH)/swell\n\nEXTRAS_PATH = $(IPLUG_PATH)/Extras\nEXTRAS_INC_PATHS = $(EXTRAS_PATH) $(EXTRAS_PATH)/Faust $(EXTRAS_PATH)/OSC $(EXTRAS_PATH)/HIIR $(EXTRAS_PATH)/WebSocket\n\nJSON_INC_PATH = $(DEPS_PATH)/Extras/nlohmann\n\n// this build setting is included at the xcode project level, since we need all these include paths\nIPLUG_INC_PATHS = $(PROJECT_ROOT) $(WDL_PATH) $(IPLUG_PATH) $(EXTRAS_INC_PATHS) $(AUv3_PATH) $(JSON_INC_PATH)\n\nBUILT_LIBS_PATH = $(DEPS_PATH)/Build/ios\nBUILT_LIBS_INC_PATH = $(BUILT_LIBS_PATH)/include\nBUILT_LIBS_LIB_PATH = $(BUILT_LIBS_PATH)/lib/$CURRENT_ARCH\n\nIGRAPHICS_PATH = $(IPLUG2_ROOT)/IGraphics\nCONTROLS_PATH = $(IGRAPHICS_PATH)/Controls\nPLATFORMS_PATH = $(IGRAPHICS_PATH)/Platforms\nDRAWING_PATH = $(IGRAPHICS_PATH)/Drawing\n\n// IGraphics dependencies\nIGRAPHICS_DEPS_PATH = $(DEPS_PATH)/IGraphics\nNSVG_PATH = $(IGRAPHICS_DEPS_PATH)/NanoSVG/src\nNVG_PATH = $(IGRAPHICS_DEPS_PATH)/NanoVG/src\nNVGMTL_PATH = $(IGRAPHICS_DEPS_PATH)/MetalNanoVG/src\nSTB_PATH = $(DEPS_PATH)/IGraphics/STB\nIMGUI_PATH = $(DEPS_PATH)/IGraphics/imgui\nYOGA_PATH = $(DEPS_PATH)/IGraphics/yoga\n\nIMGUI_INC_PATHS = $(IMGUI_PATH) $(IMGUI_PATH)/backends\n\nSKIA_PATH = $(DEPS_PATH)/Build/src/skia\n\nSKIA_INC_PATHS = $(SKIA_PATH) $(SKIA_PATH)/include/core $(SKIA_PATH)/include/effects $(SKIA_PATH)/include/config $(SKIA_PATH)/include/utils $(SKIA_PATH)/include/utils/mac $(SKIA_PATH)/include/gpu $(SKIA_PATH)/third_party/externals/icu/source/common $(SKIA_PATH)/modules/svg/include\nYOGA_INC_PATHS = $(YOGA_PATH) $(YOGA_PATH)/yoga\n\nIGRAPHICS_INC_PATHS = $(IGRAPHICS_PATH) $(CONTROLS_PATH) $(PLATFORMS_PATH) $(DRAWING_PATH) $(NSVG_PATH) $(NVG_PATH) $(NVGMTL_PATH) $(SKIA_INC_PATHS) $(FT_PATH) $(STB_PATH) $(IMGUI_INC_PATHS) $(YOGA_INC_PATHS)\n//FAUST_INC_PATHS = /usr/local/include /usr/local/opt/include\nFAUST_INC_PATHS = $(DEPS_PATH)/Build/mac/include\n\nLIB_SKIA = $(BUILT_LIBS_LIB_PATH)/libskia.a\nLIB_SKOTTIE = $(BUILT_LIBS_LIB_PATH)/libskottie.a\nLIB_SKSG = $(BUILT_LIBS_LIB_PATH)/libsksg.a\nLIB_SKSHAPER = $(BUILT_LIBS_LIB_PATH)/libskshaper.a\nLIB_SKPARAGRAPH = $(BUILT_LIBS_LIB_PATH)/libskparagraph.a\nLIB_SVG = $(BUILT_LIBS_LIB_PATH)/libsvg.a\nLIB_SKUNICODE = $(BUILT_LIBS_LIB_PATH)/libskunicode.a\n\nSKIA_LNK_FLAGS = $(LIB_SKIA) $(LIB_SKOTTIE) $(LIB_SKSG) $(LIB_SKSHAPER) $(LIB_SKPARAGRAPH) $(LIB_SVG) $(LIB_SKUNICODE)\nIGRAPHICS_LNK_FLAGS = $(SKIA_LNK_FLAGS)\n\nAUv3_FRAMEWORKS = -framework AudioToolbox -framework AVFoundation -framework CoreAudioKit -framework QuartzCore -framework UIKit -framework CoreText -framework CoreGraphics -framework UniformTypeIdentifiers\n\n\n"
        },
        {
          "name": "common-mac.xcconfig",
          "type": "blob",
          "size": 7.123046875,
          "content": "// this is used for macOS Developer ID / Appstore code-signing\nCERTIFICATE_ID = Oliver Larkin\nDEVELOPMENT_TEAM = 686EDA2T8T // log in to developer.apple.com and see the end of the URL e.g. https://developer.apple.com/account/#/overview/686EDA2T8T\n\n// Which compiler to use\n//COMPILER = com.intel.compilers.icc.12_1_0\nCOMPILER = com.apple.compilers.llvm.clang.1_0\n\n// which osx sdk to compile against - defaults to latest SDK available\nBASE_SDK_MAC = macosx // latest SDK\n\nCLANG_CXX_LANGUAGE_STANDARD = c++17\nCLANG_CXX_LIBRARY = libc++\n\nCLANG_WARN_DOCUMENTATION_COMMENTS = NO\n\nCLANG_ENABLE_OBJC_WEAK = YES\n\n// the minimum OS to support\nMACOSX_DEPLOYMENT_TARGET = 10.15\n\nSHARED_PRECOMPS_DIR = $(TARGET_BUILD_DIR)/PCH\n\n// BUILD SETTINGS TO ENABLE DIFFERENT PREPROCESSOR MACROS, INCLUDE PATHS AND FUNCIONALITY-------------------------------\n\n// ***** PREPROCESSOR MACROS\n\n// macros for all debug/release/tracer builds\nDEBUG_DEFS = DEVELOPMENT=1 DEBUG=1 _DEBUG\nRELEASE_DEFS = RELEASE=1 NDEBUG=1\nTRACER_DEFS = $DEBUG_DEFS TRACER_BUILD // here you can change if a TRACER build is a DEBUG or RELEASE build\n\n// macros for individual plug-in format builds etc\nALL_DEFS = NOMINMAX \nPLUGIN_DEFS = SWELL_CLEANUP_ON_UNLOAD // macros for all plug-in builds\nVST2_DEFS = VST2_API $PLUGIN_DEFS IPLUG_EDITOR=1 IPLUG_DSP=1\nVST3_DEFS = VST3_API $PLUGIN_DEFS IPLUG_EDITOR=1 IPLUG_DSP=1\nVST3C_DEFS = VST3C_API $PLUGIN_DEFS IPLUG_EDITOR=1 IPLUG_DSP=0\nVST3P_DEFS = VST3P_API $PLUGIN_DEFS IPLUG_EDITOR=0 IPLUG_DSP=1 //NO_IGRAPHICS\nAU_DEFS = AU_API $PLUGIN_DEFS IPLUG_EDITOR=1 IPLUG_DSP=1\nAUv3_DEFS = AUv3_API $PLUGIN_DEFS IPLUG_EDITOR=1 IPLUG_DSP=1\nAAX_DEFS = AAX_API $PLUGIN_DEFS IPLUG_EDITOR=1 IPLUG_DSP=1\nAPP_DEFS = APP_API __MACOSX_CORE__ IPLUG_EDITOR=1 IPLUG_DSP=1 SWELL_COMPILED// __UNIX_JACK__\n\n// ***** HEADER INCLUDE PATHS\n// Where the SDKs etc. are located in relation to the plug-in Xcode project (which is in the projects subfolder of an IPlug project)\n\n// the top level iPlug2 folder e.g. where this common-mac.xcconfig is\n// should be specified in the project's xcconfig with a build settng IPLUG2_ROOT\n\nPROJECT_ROOT = $(SRCROOT)/..\n\nPKGMAN_PATH = /usr/local\n\nDEPS_PATH = $(IPLUG2_ROOT)/Dependencies\n\n// if you want to use the homebrew or macports package managers, rather than building static libraries yourself (not advised) you can modify the BUILT_LIBS_PATH build setting to point to PKGMAN_PATH\nBUILT_LIBS_PATH = $(DEPS_PATH)/Build/mac\nBUILT_LIBS_INC_PATH = $(BUILT_LIBS_PATH)/include\nBUILT_LIBS_LIB_PATH = $(BUILT_LIBS_PATH)/lib\n\n// IPlug dependencies\nSCRIPTS_PATH = $(IPLUG2_ROOT)/Scripts\nWDL_PATH = $(IPLUG2_ROOT)/WDL\nSWELL_PATH = $(WDL_PATH)/swell\nIPLUG_PATH = $(IPLUG2_ROOT)/IPlug\nRTAUDIO_PATH = $(DEPS_PATH)/IPlug/RTAudio\nRTMIDI_PATH = $(DEPS_PATH)/IPlug/RTMidi\n\nEXTRAS_PATH = $(IPLUG_PATH)/Extras\nIMGUI_PATH = $(DEPS_PATH)/IGraphics/imgui\n\n//faust is linked as a dynamic library\nFAUST_LIB_PATHS = $(BUILT_LIBS_LIB_PATH)\nFAUST_INC_PATHS = $(BUILT_LIBS_INC_PATH)\nFAUST_LNK_FLAGS = $(BUILT_LIBS_LIB_PATH)/libfaust.dylib\n\nCIVETWEB_INC_PATHS = $(BUILT_LIBS_INC_PATH)\nCIVETWEB_LNK_FLAGS = $(BUILT_LIBS_LIB_PATH)/libcivetweb.a\n\nJSON_INC_PATH = $(DEPS_PATH)/Extras/nlohmann\n\nEXTRAS_INC_PATHS = $(EXTRAS_PATH) $(EXTRAS_PATH)/Synth $(EXTRAS_PATH)/Faust $(EXTRAS_PATH)/OSC $(EXTRAS_PATH)/HIIR $(EXTRAS_PATH)/WebSocket $(CIVETWEB_INC_PATHS) $(JSON11_PATH) $(RTAUDIO_PATH) $(RTMIDI_PATH) $(JSON_INC_PATH)\n\n// Plug-in SDK paths\nVST2_SDK = $(DEPS_PATH)/IPlug/VST2_SDK\nVST3_SDK = $(DEPS_PATH)/IPlug/VST3_SDK\nAAX_SDK = $(DEPS_PATH)/IPlug/AAX_SDK\nREAPER_SDK = $(DEPS_PATH)/IPlug/Reaper\n\n// this build setting is included at the xcode project level, since we need all these include paths\nIPLUG_INC_PATHS = $(PROJECT_ROOT) $(WDL_PATH) $(SWELL_PATH) $(SWELL_FOR_IPLUG_PATH) $(IPLUG_PATH) $(EXTRAS_INC_PATHS)\n\nIMGUI_INC_PATHS = $(IMGUI_PATH) $(IMGUI_PATH)/backends\n\nIGRAPHICS_PATH = $(IPLUG2_ROOT)/IGraphics\n\n// IGraphics dependencies\nIGRAPHICS_DEPS_PATH = $(DEPS_PATH)/IGraphics\nNSVG_PATH = $(IGRAPHICS_DEPS_PATH)/NanoSVG/src\nNVG_PATH = $(IGRAPHICS_DEPS_PATH)/NanoVG/src\nNVGMTL_PATH = $(IGRAPHICS_DEPS_PATH)/MetalNanoVG/src\nSTB_PATH = $(DEPS_PATH)/IGraphics/STB\nFT_PATH = $(BUILT_LIBS_INC_PATH)/freetype2\nSKIA_PATH = $(DEPS_PATH)/Build/src/skia\nYOGA_PATH = $(DEPS_PATH)/IGraphics/yoga\n\nSKIA_INC_PATHS = $(SKIA_PATH) $(SKIA_PATH)/include/core $(SKIA_PATH)/include/effects $(SKIA_PATH)/include/config $(SKIA_PATH)/include/utils $(SKIA_PATH)/include/utils/mac $(SKIA_PATH)/include/gpu $(SKIA_PATH)/third_party/externals/icu/source/common $(SKIA_PATH)/modules/svg/include\n\nYOGA_INC_PATHS = $(YOGA_PATH) $(YOGA_PATH)/yoga\n\n// you can optionally include this build setting, by adding it to EXTRA_INC_PATHS in MyProject.xcconfig in order to get all varieties of IGraphics support\nIGRAPHICS_INC_PATHS = $(IGRAPHICS_PATH) $(IGRAPHICS_PATH)/Controls $(IGRAPHICS_PATH)/Platforms $(IGRAPHICS_PATH)/Drawing $(IGRAPHICS_PATH)/Extras $(NSVG_PATH) $(NVG_PATH) $(NVGMTL_PATH) $(BUILT_LIBS_INC_PATH) $(FT_PATH) $(STB_PATH) $(IMGUI_INC_PATHS) $(SKIA_INC_PATHS) $(YOGA_INC_PATHS)\n\n// *****  LINKER/LIBRARY INCLUDE PATHS AND LINKER FLAGS\n\n//Static library Paths - on macOS we need to supply an absolute path to the static library, otherwise it will pick up a dynamic library with the same name\nLIB_FT = $(BUILT_LIBS_LIB_PATH)/libfreetype.a\nLIB_PNG = $(BUILT_LIBS_LIB_PATH)/libpng.a\nLIB_Z = $(BUILT_LIBS_LIB_PATH)/libz.a\nLIB_CIVET = $(BUILT_LIBS_LIB_PATH)/libcivetweb.a\nLIB_SKIA = $(BUILT_LIBS_LIB_PATH)/libskia.a\nLIB_SKOTTIE = $(BUILT_LIBS_LIB_PATH)/libskottie.a\nLIB_SKSG = $(BUILT_LIBS_LIB_PATH)/libsksg.a\nLIB_SKSHAPER = $(BUILT_LIBS_LIB_PATH)/libskshaper.a\nLIB_SKPARAGRAPH = $(BUILT_LIBS_LIB_PATH)/libskparagraph.a\nLIB_SVG = $(BUILT_LIBS_LIB_PATH)/libsvg.a\nLIB_SKUNICODE = $(BUILT_LIBS_LIB_PATH)/libskunicode.a\n\nSKIA_LNK_FLAGS = $(LIB_SKIA) $(LIB_SKOTTIE) $(LIB_SKSG) $(LIB_SKSHAPER) $(LIB_SKPARAGRAPH) $(LIB_SVG) $(LIB_SKUNICODE)\nFREETYPE_LNK_FLAGS = $(LIB_FT) //$(LIB_PNG) $(LIB_Z)\n\nIGRAPHICS_LNK_FLAGS = $(SKIA_LNK_FLAGS) $(FREETYPE_LNK_FLAGS)\n\nALL_FRAMEWORKS = -framework Cocoa -framework Carbon -framework CoreFoundation -framework CoreData -framework Foundation -framework CoreServices -framework QuartzCore \nAPP_FRAMEWORKS = -framework AppKit -framework CoreMIDI -framework CoreAudio\nAU_FRAMEWORKS = -framework AudioUnit -framework AudioToolbox -framework CoreAudio -framework CoreMIDI\nAUv3_FRAMEWORKS = -framework AudioToolbox -framework AVFoundation -framework CoreAudio -framework CoreAudioKit\n\n\n// ***** BINARY OUTPUT LOCATIONS ------------------------------------------------------------------------------------------------------------------------\n\n// Where to build the plug-ins / app bundles ...\n// By default iPlug2 builds to user plug-in folder\n// You can also build to the system plug-in folder, but you will need to explicitly add write permissions to build stuff there\n// The AAX folder should be the location of the PT Dev build plug-ins folder, installer scripts will copy to the non-developer build\n\nVST2_PATH = $(HOME)/Library/Audio/Plug-Ins/VST\nVST3_PATH = $(HOME)/Library/Audio/Plug-Ins/VST3\nAU_PATH = $(HOME)/Library/Audio/Plug-Ins/Components\nAAX_PATH = /Library/Application Support/Avid/Audio/Plug-Ins\nAPP_PATH = $(HOME)/Applications\nREAPER_EXT_PATH = $(HOME)/Library/Application Support/REAPER/UserPlugins\n"
        },
        {
          "name": "common-web.mk",
          "type": "blob",
          "size": 3.478515625,
          "content": "PROJECT_ROOT = $(PWD)/..\nDEPS_PATH = $(IPLUG2_ROOT)/Dependencies\nWAM_SDK_PATH = $(DEPS_PATH)/IPlug/WAM_SDK/wamsdk\nWDL_PATH = $(IPLUG2_ROOT)/WDL\nIPLUG_PATH = $(IPLUG2_ROOT)/IPlug\nSWELL_PATH = $(WDL_PATH)/swell\nIGRAPHICS_PATH = $(IPLUG2_ROOT)/IGraphics\nCONTROLS_PATH = $(IGRAPHICS_PATH)/Controls\nPLATFORMS_PATH = $(IGRAPHICS_PATH)/Platforms\nDRAWING_PATH = $(IGRAPHICS_PATH)/Drawing\nIGRAPHICS_EXTRAS_PATH = $(IGRAPHICS_PATH)/Extras\nIPLUG_EXTRAS_PATH = $(IPLUG_PATH)/Extras\nIPLUG_SYNTH_PATH = $(IPLUG_EXTRAS_PATH)/Synth\nIPLUG_FAUST_PATH = $(IPLUG_EXTRAS_PATH)/Faust\nIPLUG_WEB_PATH = $(IPLUG_PATH)/WEB\nNANOVG_PATH = $(DEPS_PATH)/IGraphics/NanoVG/src\nNANOSVG_PATH = $(DEPS_PATH)/IGraphics/NanoSVG/src\nIMGUI_PATH = $(DEPS_PATH)/IGraphics/imgui\nYOGA_PATH = $(DEPS_PATH)/IGraphics/yoga\nSTB_PATH = $(DEPS_PATH)/IGraphics/STB\n\nIPLUG_SRC = $(IPLUG_PATH)/IPlugAPIBase.cpp \\\n\t$(IPLUG_PATH)/IPlugParameter.cpp \\\n\t$(IPLUG_PATH)/IPlugPluginBase.cpp \\\n\t$(IPLUG_PATH)/IPlugPaths.cpp \\\n\t$(IPLUG_PATH)/IPlugTimer.cpp\n\nIGRAPHICS_SRC = $(IGRAPHICS_PATH)/IGraphics.cpp \\\n\t$(IGRAPHICS_PATH)/IControl.cpp \\\n\t$(CONTROLS_PATH)/*.cpp \\\n\t$(PLATFORMS_PATH)/IGraphicsWeb.cpp\n\nIMGUI_SRC = $(IGRAPHICS_PATH)/IGraphicsImGui.cpp\n\nINCLUDE_PATHS = -I$(PROJECT_ROOT) \\\n-I$(WAM_SDK_PATH) \\\n-I$(WDL_PATH) \\\n-I$(SWELL_PATH) \\\n-I$(IPLUG_PATH) \\\n-I$(IPLUG_EXTRAS_PATH) \\\n-I$(IPLUG_SYNTH_PATH) \\\n-I$(IPLUG_FAUST_PATH) \\\n-I$(IPLUG_WEB_PATH) \\\n-I$(IGRAPHICS_PATH) \\\n-I$(DRAWING_PATH) \\\n-I$(CONTROLS_PATH) \\\n-I$(PLATFORMS_PATH) \\\n-I$(IGRAPHICS_EXTRAS_PATH) \\\n-I$(NANOVG_PATH) \\\n-I$(NANOSVG_PATH) \\\n-I$(STB_PATH) \\\n-I$(IMGUI_PATH) \\\n-I$(IMGUI_PATH)/backends \\\n-I$(YOGA_PATH) \\\n-I$(YOGA_PATH)/yoga\n\n#every cpp file that is needed for both WASM modules\nSRC = $(IPLUG_SRC)\n\n#every cpp file that is needed for the WAM audio processor WASM module running in the audio worklet\nWAM_SRC = $(IPLUG_WEB_PATH)/IPlugWAM.cpp \\\n\t$(WAM_SDK_PATH)/processor.cpp \\\n\t$(IPLUG_PATH)/IPlugProcessor.cpp\n\n#every cpp file that is needed for the \"WEB\" graphics WASM module\nWEB_SRC = $(IGRAPHICS_SRC) \\\n$(IPLUG_WEB_PATH)/IPlugWeb.cpp \\\n$(IGRAPHICS_PATH)/IGraphicsEditorDelegate.cpp\n\nNANOVG_LDFLAGS = -s USE_WEBGL2=0 -s FULL_ES3=1\n\nIMGUI_LDFLAGS = -s BINARYEN_TRAP_MODE=clamp \n\n# CFLAGS for both WAM and WEB targets\nCFLAGS = $(INCLUDE_PATHS) \\\n-std=c++17  \\\n-Wno-bitwise-op-parentheses \\\n-DWDL_NO_DEFINE_MINMAX \\\n-DNDEBUG=1\n\nWAM_CFLAGS = -DWAM_API \\\n-DIPLUG_DSP=1 \\\n-DNO_IGRAPHICS \\\n-DSAMPLE_TYPE_FLOAT\n\nWEB_CFLAGS = -DWEB_API \\\n-DIPLUG_EDITOR=1\n\nWAM_EXPORTS = \"[\\\n  '_createModule','_wam_init','_wam_terminate','_wam_resize', \\\n  '_wam_onprocess', '_wam_onmidi', '_wam_onsysex', '_wam_onparam', \\\n  '_wam_onmessageN', '_wam_onmessageS', '_wam_onmessageA', '_wam_onpatch' \\\n  ]\"\n\nWEB_EXPORTS = \"['_main', '_iplug_fsready', '_iplug_syncfs']\"\n\n# LDFLAGS for both WAM and WEB targets\nLDFLAGS = -s ALLOW_MEMORY_GROWTH=1 --bind\n\n# We can't compile the WASM module synchronously on main thread (.wasm over 4k in size requires async compile on chrome) https://developers.google.com/web/updates/2018/04/loading-wasm\n# and you can't compile asynchronously in AudioWorklet scope\n# The following settings mean the WASM is delivered as BASE64 and included in the MyPluginName-wam.js file.\nWAM_LDFLAGS = -s EXPORTED_RUNTIME_METHODS=\"['ccall', 'cwrap', 'setValue', 'UTF8ToString']\" \\\n-s BINARYEN_ASYNC_COMPILATION=0 \\\n-s SINGLE_FILE=1\n#-s ENVIRONMENT=worker\n\nWEB_LDFLAGS = -s EXPORTED_FUNCTIONS=$(WEB_EXPORTS) \\\n-s EXPORTED_RUNTIME_METHODS=\"['UTF8ToString']\" \\\n-s BINARYEN_ASYNC_COMPILATION=1 \\\n-s FORCE_FILESYSTEM=1 \\\n-s ENVIRONMENT=web \\\n-lidbfs.js\n\n"
        },
        {
          "name": "common-win.props",
          "type": "blob",
          "size": 13.5107421875,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <ImportGroup Label=\"PropertySheets\" />\n  <PropertyGroup Label=\"UserMacros\">\n    <RTAUDIOMIDI_PATH>$(IPLUG_PATH)\\APP\\RTAudioMidi</RTAUDIOMIDI_PATH>\n    <IPLUG2_ROOT>$(ProjectDir)..\\..\\iPlug2</IPLUG2_ROOT>\n    <WDL_PATH>$(IPLUG2_ROOT)\\WDL</WDL_PATH>\n    <IPLUG_PATH>$(IPLUG2_ROOT)\\IPlug</IPLUG_PATH>\n    <EXTRAS_PATH>$(IPLUG_PATH)\\Extras</EXTRAS_PATH>\n    <IGRAPHICS_PATH>$(IPLUG2_ROOT)\\IGraphics</IGRAPHICS_PATH>\n    <DEPS_PATH>$(IPLUG2_ROOT)\\Dependencies</DEPS_PATH>\n    <JSON_PATH>$(DEPS_PATH)\\Extras\\nlohmann</JSON_PATH>\n    <IPLUG_INC_PATHS>$(WDL_PATH);$(IPLUG_PATH);$(EXTRAS_PATH);$(EXTRAS_PATH)\\OSC;$(EXTRAS_PATH)\\Synth;$(EXTRAS_PATH)\\Faust;$(EXTRAS_PATH)\\WebView;$(JSON_PATH);$(SolutionDir)\\resources</IPLUG_INC_PATHS>\n    <IPLUG_DEPS_PATH>$(DEPS_PATH)\\IPlug</IPLUG_DEPS_PATH>\n    <IGRAPHICS_DEPS_PATH>$(DEPS_PATH)\\IGraphics</IGRAPHICS_DEPS_PATH>\n    <NANOVG_PATH>$(IGRAPHICS_DEPS_PATH)\\NanoVG\\src</NANOVG_PATH>\n    <NANOSVG_PATH>$(IGRAPHICS_DEPS_PATH)\\NanoSVG\\src</NANOSVG_PATH>\n    <FREETYPE_PATH>$(DEPS_PATH)\\Build\\src\\freetype\\include</FREETYPE_PATH>\n    <SKIA_PATH>$(DEPS_PATH)\\Build\\src\\skia</SKIA_PATH>\n    <SKIA_INC_PATHS>$(SKIA_PATH);$(SKIA_PATH)\\include\\core;$(SKIA_PATH)\\include\\effects;$(SKIA_PATH)\\include\\config;$(SKIA_PATH)\\include\\utils;$(SKIA_PATH)\\include\\gpu;$(SKIA_PATH)\\modules\\svg\\include;$(SKIA_PATH)\\third_party\\externals\\icu\\source\\common</SKIA_INC_PATHS>\n    <GLAD_GL2_PATHS>$(IGRAPHICS_DEPS_PATH)\\glad_GL2\\include;$(IGRAPHICS_DEPS_PATH)\\glad_GL2\\src</GLAD_GL2_PATHS>\n    <GLAD_GL3_PATHS>$(IGRAPHICS_DEPS_PATH)\\glad_GL3\\include;$(IGRAPHICS_DEPS_PATH)\\glad_GL3\\src</GLAD_GL3_PATHS>\n    <PNG_PATH>$(WDL_PATH)\\libpng</PNG_PATH>\n    <ZLIB_PATH>$(WDL_PATH)\\zlib</ZLIB_PATH>\n    <STB_PATH>$(IGRAPHICS_DEPS_PATH)\\STB</STB_PATH>\n    <FAUST_INC_PATHS>$(DEPS_PATH)\\Build\\win\\Faust\\include</FAUST_INC_PATHS>\n    <STATIC_LIBS_PATH>$(DEPS_PATH)\\Build\\win\\$(Platform)\\$(Configuration)</STATIC_LIBS_PATH>\n    <IMGUI_INC_PATHS>$(IGRAPHICS_DEPS_PATH)\\imgui;$(IGRAPHICS_DEPS_PATH)\\imgui\\backends</IMGUI_INC_PATHS>\n    <YOGA_INC_PATHS>$(IGRAPHICS_DEPS_PATH)\\yoga;$(IGRAPHICS_DEPS_PATH)\\yoga\\yoga</YOGA_INC_PATHS>\n    <IGRAPHICS_INC_PATHS>$(IGRAPHICS_PATH);$(IGRAPHICS_PATH)\\Controls;$(IGRAPHICS_PATH)\\Drawing;$(IGRAPHICS_PATH)\\Platforms;$(IGRAPHICS_PATH)\\Extras;$(NANOSVG_PATH);$(NANOVG_PATH);$(PNG_PATH);$(ZLIB_PATH);$(FREETYPE_PATH);$(STB_PATH);$(IMGUI_INC_PATHS);$(SKIA_INC_PATHS);$(YOGA_INC_PATHS)</IGRAPHICS_INC_PATHS>\n    <VST2_SDK Condition=\"'$(VST2_SDK)'==''\">$(IPLUG_DEPS_PATH)\\VST2_SDK</VST2_SDK>\n    <VST3_SDK Condition=\"'$(VST3_SDK)'==''\">$(IPLUG_DEPS_PATH)\\VST3_SDK</VST3_SDK>\n    <ASIO_SDK Condition=\"'$(ASIO_SDK)'==''\">$(IPLUG_DEPS_PATH)\\RTAudio\\include</ASIO_SDK>\n    <AAX_SDK Condition=\"'$(AAX_SDK)'==''\">$(IPLUG_DEPS_PATH)\\AAX_SDK</AAX_SDK>\n    <VST2_32_HOST_PATH Condition=\"'$(VST2_32_HOST_PATH)'==''\">$(ProgramFiles)\\REAPER\\reaper.exe</VST2_32_HOST_PATH>\n    <VST2_64_HOST_PATH Condition=\"'$(VST2_64_HOST_PATH)'==''\">$(ProgramW6432)\\REAPER (x64)\\reaper.exe</VST2_64_HOST_PATH>\n    <VST3_32_HOST_PATH Condition=\"'$(VST3_32_HOST_PATH)'==''\">$(ProgramFiles)\\REAPER\\reaper.exe</VST3_32_HOST_PATH>\n    <VST3_64_HOST_PATH Condition=\"'$(VST3_64_HOST_PATH)'==''\">$(ProgramW6432)\\REAPER (x64)\\reaper.exe</VST3_64_HOST_PATH>\n    <VST3_32_PATH Condition=\"'$(VST3_32_PATH)'==''\">$(CommonProgramFiles)\\VST3</VST3_32_PATH>\n    <VST3_64_PATH Condition=\"'$(VST3_64_PATH)'==''\">$(CommonProgramW6432)\\VST3</VST3_64_PATH>\n    <VST2_32_PATH Condition=\"'$(VST2_32_PATH)'==''\">$(ProgramFiles)\\VstPlugins</VST2_32_PATH>\n    <VST2_64_PATH Condition=\"'$(VST2_64_PATH)'==''\">$(ProgramW6432)\\VstPlugins</VST2_64_PATH>\n    <AAX_32_PATH Condition=\"'$(AAX_32_PATH)'==''\">$(CommonProgramFiles)\\Avid\\Audio\\Plug-Ins</AAX_32_PATH>\n    <AAX_64_PATH Condition=\"'$(AAX_64_PATH)'==''\">$(CommonProgramW6432)\\Avid\\Audio\\Plug-Ins</AAX_64_PATH>\n    <REAPER_EXT_PATH>$(APPDATA)\\REAPER\\UserPlugins</REAPER_EXT_PATH>\n    <APP_DEFS>APP_API;__WINDOWS_DS__;__WINDOWS_MM__;__WINDOWS_ASIO__;IPLUG_EDITOR=1;IPLUG_DSP=1</APP_DEFS>\n    <VST2_DEFS>VST2_API;VST_FORCE_DEPRECATED;IPLUG_EDITOR=1;IPLUG_DSP=1</VST2_DEFS>\n    <VST3_DEFS>VST3_API;IPLUG_EDITOR=1;IPLUG_DSP=1</VST3_DEFS>\n    <VST3P_DEFS>VST3P_API;IPLUG_EDITOR=0;IPLUG_DSP=1</VST3P_DEFS>\n    <VST3C_DEFS>VST3C_API;IPLUG_EDITOR=1;IPLUG_DSP=0</VST3C_DEFS>\n    <DEBUG_DEFS>_DEBUG;</DEBUG_DEFS>\n    <RELEASE_DEFS>NDEBUG;</RELEASE_DEFS>\n    <TRACER_DEFS>TRACER_BUILD;NDEBUG;</TRACER_DEFS>\n    <APP_INC_PATHS>$(IPLUG_PATH)\\APP;$(IPLUG_DEPS_PATH)\\RTAudio\\include;$(IPLUG_DEPS_PATH)\\RTAudio;$(IPLUG_DEPS_PATH)\\RTMidi</APP_INC_PATHS>\n    <VST2_INC_PATHS>$(IPLUG_PATH)\\VST2;$(VST2_SDK)</VST2_INC_PATHS>\n    <VST3_INC_PATHS>$(IPLUG_PATH)\\VST3;$(VST3_SDK)</VST3_INC_PATHS>\n    <AAX_INC_PATHS>$(IPLUG_PATH)\\AAX;$(AAX_SDK)\\Interfaces;$(AAX_SDK)\\Interfaces\\ACF;</AAX_INC_PATHS>\n    <AAX_DEFS>AAX_API;IPLUG_EDITOR=1;IPLUG_DSP=1;_WINDOWS;WIN32;_WIN32;WINDOWS_VERSION;_LIB;_CRT_SECURE_NO_WARNINGS;_CRT_SECURE_NO_DEPRECATE;_CRT_NONSTDC_NO_DEPRECATE</AAX_DEFS>\n    <ALL_DEFS>WIN32;_CRT_SECURE_NO_DEPRECATE;_CRT_NONSTDC_NO_DEPRECATE;NOMINMAX</ALL_DEFS>\n    <AAX_LIBS>wininet.lib;odbc32.lib;odbccp32.lib;psapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;comctl32.lib;</AAX_LIBS>\n    <APP_LIBS>dsound.lib;winmm.lib;</APP_LIBS>\n    <VST2_32_COMMAND_ARGS>$(SolutionDir)$(SolutionName).RPP</VST2_32_COMMAND_ARGS>\n    <VST2_64_COMMAND_ARGS>$(SolutionDir)$(SolutionName).RPP</VST2_64_COMMAND_ARGS>\n    <VST3_64_COMMAND_ARGS>$(SolutionDir)$(SolutionName).RPP</VST3_64_COMMAND_ARGS>\n    <VST3_32_COMMAND_ARGS>$(SolutionDir)$(SolutionName).RPP</VST3_32_COMMAND_ARGS>\n    <COPY_VST2>1</COPY_VST2>\n    <REAPER_INC_PATHS>$(IPLUG_DEPS_PATH)/Reaper;$(IPLUG_PATH)\\ReaperExt;</REAPER_INC_PATHS>\n    <AAX_ICON>$(AAX_SDK)\\Utilities\\PlugIn.ico</AAX_ICON>\n    <VST_ICON>$(IPLUG2_ROOT)\\Scripts\\icons\\VST_Logo_Steinberg.ico</VST_ICON>\n    <FAUST_LIB_PATH>$(DEPS_PATH)\\Build\\win\\Faust\\lib</FAUST_LIB_PATH>\n  </PropertyGroup>\n  <PropertyGroup>\n    <_ProjectFileVersion>10.0.30319.1</_ProjectFileVersion>\n  </PropertyGroup>\n  <ItemDefinitionGroup>\n    <ClCompile>\n      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n      <PreprocessorDefinitions>$(ALL_DEFS);%(PreprocessorDefinitions)</PreprocessorDefinitions>\n      <DisableSpecificWarnings>4996;4250;4018;4267;4068;</DisableSpecificWarnings>\n      <AdditionalIncludeDirectories>$(WDL_PATH);$(IPLUG_PATH);$(SolutionDir);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n      <LanguageStandard>stdcpp17</LanguageStandard>\n      <MultiProcessorCompilation>true</MultiProcessorCompilation>\n    </ClCompile>\n    <ItemDefinitionGroup Condition=\" '$(Platform)' == 'Win32' \">\n      <EnableEnhancedInstructionSet>StreamingSIMDExtensions2</EnableEnhancedInstructionSet>\n    </ItemDefinitionGroup>\n    <Link>\n      <AdditionalDependencies>%(AdditionalDependencies)</AdditionalDependencies>\n      <AdditionalLibraryDirectories>$(STATIC_LIBS_PATH);$(AAX_SDK)\\Libs\\$(Configuration);$(FAUST_LIB_PATH);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>\n      <ImportLibrary>$(IntDir)$(TargetName).lib</ImportLibrary>\n    </Link>\n    <Lib>\n      <AdditionalDependencies />\n    </Lib>\n    <ResourceCompile>\n      <AdditionalIncludeDirectories>$(SolutionDir);$(SolutionDir)\\resources\\fonts;$(SolutionDir)\\resources\\img;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n    </ResourceCompile>\n  </ItemDefinitionGroup>\n  <ItemGroup>\n    <BuildMacro Include=\"IPLUG2_ROOT\">\n      <Value>$(IPLUG2_ROOT)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"WDL_PATH\">\n      <Value>$(WDL_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"IPLUG_PATH\">\n      <Value>$(IPLUG_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"EXTRAS_PATH\">\n      <Value>$(EXTRAS_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"IGRAPHICS_PATH\">\n      <Value>$(IGRAPHICS_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"DEPS_PATH\">\n      <Value>$(DEPS_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"JSON_PATH\">\n      <Value>$(JSON_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"IPLUG_INC_PATHS\">\n      <Value>$(IPLUG_INC_PATHS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"IPLUG_DEPS_PATH\">\n      <Value>$(IPLUG_DEPS_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"IGRAPHICS_DEPS_PATH\">\n      <Value>$(IGRAPHICS_DEPS_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"NANOVG_PATH\">\n      <Value>$(NANOVG_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"NANOSVG_PATH\">\n      <Value>$(NANOSVG_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"FREETYPE_PATH\">\n      <Value>$(FREETYPE_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"SKIA_PATH\">\n      <Value>$(SKIA_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"SKIA_INC_PATHS\">\n      <Value>$(SKIA_INC_PATHS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"GLAD_GL2_PATHS\">\n      <Value>$(GLAD_GL2_PATHS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"GLAD_GL3_PATHS\">\n      <Value>$(GLAD_GL3_PATHS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"PNG_PATH\">\n      <Value>$(PNG_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"ZLIB_PATH\">\n      <Value>$(ZLIB_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"STB_PATH\">\n      <Value>$(STB_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"FAUST_INC_PATHS\">\n      <Value>$(FAUST_INC_PATHS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"STATIC_LIBS_PATH\">\n      <Value>$(STATIC_LIBS_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"IMGUI_INC_PATHS\">\n      <Value>$(IMGUI_INC_PATHS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"YOGA_INC_PATHS\">\n      <Value>$(YOGA_INC_PATHS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"IGRAPHICS_INC_PATHS\">\n      <Value>$(IGRAPHICS_INC_PATHS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST2_SDK\">\n      <Value>$(VST2_SDK)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST3_SDK\">\n      <Value>$(VST3_SDK)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"ASIO_SDK\">\n      <Value>$(ASIO_SDK)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"AAX_SDK\">\n      <Value>$(AAX_SDK)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST2_32_HOST_PATH\">\n      <Value>$(VST2_32_HOST_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST2_64_HOST_PATH\">\n      <Value>$(VST2_64_HOST_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST3_32_HOST_PATH\">\n      <Value>$(VST3_32_HOST_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST3_64_HOST_PATH\">\n      <Value>$(VST3_64_HOST_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST3_32_PATH\">\n      <Value>$(VST3_32_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST3_64_PATH\">\n      <Value>$(VST3_64_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST2_32_PATH\">\n      <Value>$(VST2_32_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST2_64_PATH\">\n      <Value>$(VST2_64_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"AAX_32_PATH\">\n      <Value>$(AAX_32_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"AAX_64_PATH\">\n      <Value>$(AAX_64_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"REAPER_EXT_PATH\">\n      <Value>$(REAPER_EXT_PATH)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"APP_DEFS\">\n      <Value>$(APP_DEFS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST2_DEFS\">\n      <Value>$(VST2_DEFS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST3_DEFS\">\n      <Value>$(VST3_DEFS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST3P_DEFS\">\n      <Value>$(VST3P_DEFS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST3C_DEFS\">\n      <Value>$(VST3C_DEFS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"DEBUG_DEFS\">\n      <Value>$(DEBUG_DEFS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"RELEASE_DEFS\">\n      <Value>$(RELEASE_DEFS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"TRACER_DEFS\">\n      <Value>$(TRACER_DEFS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"APP_INC_PATHS\">\n      <Value>$(APP_INC_PATHS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST2_INC_PATHS\">\n      <Value>$(VST2_INC_PATHS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST3_INC_PATHS\">\n      <Value>$(VST3_INC_PATHS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"AAX_INC_PATHS\">\n      <Value>$(AAX_INC_PATHS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"AAX_DEFS\">\n      <Value>$(AAX_DEFS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"ALL_DEFS\">\n      <Value>$(ALL_DEFS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"AAX_LIBS\">\n      <Value>$(AAX_LIBS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"APP_LIBS\">\n      <Value>$(APP_LIBS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST2_32_COMMAND_ARGS\">\n      <Value>$(VST2_32_COMMAND_ARGS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST2_64_COMMAND_ARGS\">\n      <Value>$(VST2_64_COMMAND_ARGS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST3_64_COMMAND_ARGS\">\n      <Value>$(VST3_64_COMMAND_ARGS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST3_32_COMMAND_ARGS\">\n      <Value>$(VST3_32_COMMAND_ARGS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"COPY_VST2\">\n      <Value>$(COPY_VST2)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"REAPER_INC_PATHS\">\n      <Value>$(REAPER_INC_PATHS)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"AAX_ICON\">\n      <Value>$(AAX_ICON)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"VST_ICON\">\n      <Value>$(VST_ICON)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"FAUST_LIB_PATH\">\n      <Value>$(FAUST_LIB_PATH)</Value>\n    </BuildMacro>\n  </ItemGroup>\n</Project>\n"
        },
        {
          "name": "duplicate.py",
          "type": "blob",
          "size": 11.560546875,
          "content": "#!/usr/bin/python3\n\n# Python shell script for Duplicating IPlug Projects\n# Oli Larkin 2012-2019\n# License: WTFPL http://sam.zoy.org/wtfpl/COPYING\n# Modified from this script by Bibha Tripathi http://code.activestate.com/recipes/435904-sedawk-python-script-to-rename-subdirectories-of-a/\n# Author accepts no responsibilty for wiping your hd\n\n# NOTES:\n# should work with Python2 or Python3\n# not designed to be fool proof- think carefully about what you choose for a project name\n# best to stick to standard characters in your project names - avoid spaces, numbers and dots\n# windows users need to install python and set it up so you can run it from the command line\n# see http://www.voidspace.org.uk/python/articles/command_line.shtml\n# this involves adding the python folder e.g. C:\\Python27\\ to your %PATH% environment variable\n\n# USAGE:\n# duplicate.py [inputprojectname] [outputprojectname] [manufacturername] (outputpath)\n\n# TODO:\n# - indentation of directory structure\n# - variable manufacturer name\n\n\nfrom __future__ import generators\n\nimport fileinput, glob, string, sys, os, re, uuid, pprint, random\nfrom shutil import copy, copytree, ignore_patterns, rmtree\nfrom os.path import join\n\nscriptpath = os.path.dirname(os.path.realpath(__file__))\n\nsys.path.insert(0, scriptpath + \"/iPlug2/Scripts/\")\n\nfrom parse_config import parse_config, parse_xcconfig, set_uniqueid\n\nVERSION = \"0.95\"\n\n# binary files that we don't want to do find and replace inside\nFILTERED_FILE_EXTENSIONS = [\n    \".ico\",\n    \".icns\",\n    \".pdf\",\n    \".png\",\n    \".zip\",\n    \".exe\",\n    \".wav\",\n    \".aif\",\n    \".data\",\n    \".wasm\",\n    \"mkcert\",\n]\nFILTERED_FILE_NAMES = [\".DS_Store\"]\n# files that we don't want to duplicate\nDONT_COPY = (\n    \".vs\",\n    \"*.exe\",\n    \"*.dmg\",\n    \"*.pkg\",\n    \"*.mpkg\",\n    \"*.svn\",\n    \"*.ncb\",\n    \"*.suo\",\n    \"*sdf\",\n    \"ipch\",\n    \"*.layout\",\n    \"*.depend\",\n    \".DS_Store\",\n    \"xcuserdata\",\n    \"*.aps\",\n)\n\nSUBFOLDERS_TO_SEARCH = [\n    \"projects\",\n    \"config\",\n    \"resources\",\n    \"installer\",\n    \"scripts\",\n    \"manual\",\n    \"xcschemes\",\n    \"xcshareddata\",\n    \"xcuserdata\",\n    \"en-osx.lproj\",\n    \"project.xcworkspace\",\n    \"Images.xcassets\",\n    \"build-web\",\n]\n\n\ndef randomFourChar(chars=string.ascii_letters + string.digits):\n    return \"\".join(random.choice(chars) for _ in range(4))\n\n\ndef checkdirname(name, searchproject):\n    \"check if directory name matches with the given pattern\"\n    print(\"\")\n    if name == searchproject:\n        return True\n    else:\n        return False\n\n\ndef replacestrs(filename, s, r):\n    files = glob.glob(filename)\n\n    for line in fileinput.input(files, inplace=1):\n        line.find(s)\n        line = line.replace(s, r)\n        sys.stdout.write(line)\n\n\ndef replacestrsChop(filename, s, r):\n    files = glob.glob(filename)\n\n    for line in fileinput.input(files, inplace=1):\n        if line.startswith(s):\n            line = r + \"\\n\"\n        sys.stdout.write(line)\n\n\ndef dirwalk(\n    dir, searchproject, replaceproject, searchman, replaceman, oldroot=\"\", newroot=\"\"\n):\n    for f in os.listdir(dir):\n        fullpath = os.path.join(dir, f)\n\n        if os.path.isdir(fullpath) and not os.path.islink(fullpath):\n            if checkdirname(f, searchproject + \"-macOS.xcodeproj\"):\n                os.rename(\n                    fullpath, os.path.join(dir, replaceproject + \"-macOS.xcodeproj\")\n                )\n                fullpath = os.path.join(dir, replaceproject + \"-macOS.xcodeproj\")\n\n                print(\"recursing in macOS xcode project directory: \")\n                for x in dirwalk(\n                    fullpath,\n                    searchproject,\n                    replaceproject,\n                    searchman,\n                    replaceman,\n                    oldroot,\n                    newroot,\n                ):\n                    yield x\n            elif checkdirname(f, searchproject + \"-iOS.xcodeproj\"):\n                os.rename(\n                    fullpath, os.path.join(dir, replaceproject + \"-iOS.xcodeproj\")\n                )\n                fullpath = os.path.join(dir, replaceproject + \"-iOS.xcodeproj\")\n\n                print(\"recursing in iOS xcode project directory: \")\n                for x in dirwalk(\n                    fullpath,\n                    searchproject,\n                    replaceproject,\n                    searchman,\n                    replaceman,\n                    oldroot,\n                    newroot,\n                ):\n                    yield x\n            elif checkdirname(f, searchproject + \".xcworkspace\"):\n                os.rename(fullpath, os.path.join(dir, replaceproject + \".xcworkspace\"))\n                fullpath = os.path.join(dir, replaceproject + \".xcworkspace\")\n\n                print(\"recursing in main xcode workspace directory: \")\n                for x in dirwalk(\n                    fullpath,\n                    searchproject,\n                    replaceproject,\n                    searchman,\n                    replaceman,\n                    oldroot,\n                    newroot,\n                ):\n                    yield x\n            elif checkdirname(f, searchproject + \"-iOS.appiconset\"):\n                os.rename(\n                    fullpath, os.path.join(dir, replaceproject + \"-iOS.appiconset\")\n                )\n                fullpath = os.path.join(dir, replaceproject + \"-iOS.appiconset\")\n\n                print(\"recursing in -iOS.appiconset directory: \")\n            elif checkdirname(f, searchproject + \"-macOS.appiconset\"):\n                os.rename(\n                    fullpath, os.path.join(dir, replaceproject + \"-macOS.appiconset\")\n                )\n                fullpath = os.path.join(dir, replaceproject + \"-macOS.appiconset\")\n\n                print(\"recursing in -macOS.appiconset directory: \")\n                for x in dirwalk(\n                    fullpath,\n                    searchproject,\n                    replaceproject,\n                    searchman,\n                    replaceman,\n                    oldroot,\n                    newroot,\n                ):\n                    yield x\n            elif f in SUBFOLDERS_TO_SEARCH:\n                print(\"recursing in \" + f + \" directory: \")\n                for x in dirwalk(\n                    fullpath,\n                    searchproject,\n                    replaceproject,\n                    searchman,\n                    replaceman,\n                    oldroot,\n                    newroot,\n                ):\n                    yield x\n\n        if os.path.isfile(fullpath):\n            filename = os.path.basename(fullpath)\n            newfilename = filename.replace(searchproject, replaceproject)\n            base, extension = os.path.splitext(filename)\n\n            if not (extension in FILTERED_FILE_EXTENSIONS) and not (\n                filename in FILTERED_FILE_NAMES\n            ):\n\n                print(\"Replacing project name strings in file \" + filename)\n                replacestrs(fullpath, searchproject, replaceproject)\n\n                print(\"Replacing captitalized project name strings in file \" + filename)\n                replacestrs(fullpath, searchproject.upper(), replaceproject.upper())\n\n                print(\"Replacing manufacturer name strings in file \" + filename)\n                replacestrs(fullpath, searchman, replaceman)\n\n                if oldroot and newroot:\n                    print(\"Replacing iPlug2 root folder in file  \" + filename)\n                    replacestrs(fullpath, oldroot, newroot)\n                    replacestrs(\n                        fullpath, oldroot.replace(\"/\", \"\\\\\"), newroot.replace(\"/\", \"\\\\\")\n                    )\n\n            else:\n                print(\"NOT replacing name strings in file \" + filename)\n\n            if filename != newfilename:\n                print(\"Renaming file \" + filename + \" to \" + newfilename)\n                os.rename(fullpath, os.path.join(dir, newfilename))\n\n            yield f, fullpath\n        else:\n            yield f, fullpath\n\n\ndef main():\n    global VERSION\n    print(\n        \"\\nIPlug Project Duplicator v\"\n        + VERSION\n        + \" by Oli Larkin ------------------------------\\n\"\n    )\n\n    numargs = len(sys.argv) - 1\n\n    if not (numargs == 3 or numargs == 4):\n        print(\n            \"Usage: duplicate.py inputprojectname outputprojectname manufacturername (outputprojectpath)\"\n        )\n        sys.exit(1)\n    else:\n        inputprojectname = sys.argv[1]\n        outputprojectname = sys.argv[2]\n        manufacturer = sys.argv[3]\n\n    if numargs == 4:\n        outputbasepath = os.path.abspath(sys.argv[4])\n    else:\n        outputbasepath = os.getcwd()\n\n    if not (os.path.isdir(outputbasepath)):\n        print(\"error: Output path does not exist\")\n        sys.exit(1)\n\n    outputpath = os.path.join(outputbasepath, outputprojectname)\n\n    if \" \" in inputprojectname:\n        print(\"error: input project name has spaces\")\n        sys.exit(1)\n\n    if inputprojectname not in os.listdir(os.curdir):\n        print(\n            \"error: input project \"\n            + inputprojectname\n            + \" doesn't exist, check spelling/case?\"\n        )\n        sys.exit(1)\n\n    if \" \" in outputprojectname:\n        print(\"error: output project name has spaces\")\n        sys.exit(1)\n\n    if \" \" in manufacturer:\n        print(\"error: manufacturer name has spaces\")\n        sys.exit(1)\n\n    # remove a trailing slash if it exists\n    if inputprojectname[-1:] == \"/\":\n        inputprojectname = inputprojectname[0:-1]\n\n    if outputprojectname[-1:] == \"/\":\n        outputprojectname = outputprojectname[0:-1]\n\n    # check that the folders are OK\n    if os.path.isdir(inputprojectname) == False:\n        print(\"error: input project not found\")\n        sys.exit(1)\n\n    if os.path.isdir(outputpath):\n        print(\"error: output project allready exists\")\n        sys.exit(1)\n    # rmtree(output)\n\n    print(\"copying \" + inputprojectname + \" folder to \" + outputpath)\n    copytree(inputprojectname, outputpath, ignore=ignore_patterns(*DONT_COPY))\n\n    oldroot = \"\"\n    newroot = \"\"\n\n    if numargs == 4:\n        configpath = os.path.join(inputprojectname, \"config\")\n        xcconfig = parse_xcconfig(configpath + \"/\" + inputprojectname + \"-mac.xcconfig\")\n        oldroot = xcconfig[\"IPLUG2_ROOT\"]\n        iplug2folder = os.path.abspath(os.path.join(configpath, oldroot))\n        newroot = os.path.relpath(iplug2folder, os.path.join(outputpath, \"config\"))\n    else:\n        newroot = \"\"\n\n    # replace manufacturer name strings\n    for dir in dirwalk(\n        outputpath,\n        inputprojectname,\n        outputprojectname,\n        \"AcmeInc\",\n        manufacturer,\n        oldroot,\n        newroot,\n    ):\n        pass\n\n    # replace project name in root\n    for dir in dirwalk(\n        scriptpath,\n        inputprojectname,\n        outputprojectname,\n        \"AcmeInc\",\n        manufacturer,\n        oldroot,\n        newroot,\n    ):\n        pass\n\n    # replace project name in github\n    for dir in dirwalk(\n        scriptpath + \"/.github/workflows\",\n        inputprojectname,\n        outputprojectname,\n        \"AcmeInc\",\n        manufacturer,\n        oldroot,\n        newroot,\n    ):\n        pass\n\n    # replace project name in vscode\n    for dir in dirwalk(\n        scriptpath + \"/.vscode\",\n        inputprojectname,\n        outputprojectname,\n        \"AcmeInc\",\n        manufacturer,\n        oldroot,\n        newroot,\n    ):\n        pass\n\n    # print(\"\\ncopying gitignore template into project folder\\n\")\n\n    # copy('gitignore_template', outputpath + \"/.gitignore\")\n\n    config = parse_config(outputpath)\n\n    config[\"PLUG_UNIQUE_ID\"] = randomFourChar()\n\n    set_uniqueid(outputpath, config[\"PLUG_UNIQUE_ID\"])\n\n    pp = pprint.PrettyPrinter(indent=4)\n    pp.pprint(config)\n\n    print(\"\\ndone - don't forget to change PLUG_MFR_UID in config.h\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "eigen",
          "type": "commit",
          "content": null
        },
        {
          "name": "format.bash",
          "type": "blob",
          "size": 0.31640625,
          "content": "#!/bin/bash\n# Apply project formatting (i.e. clang-format with LLVM style)\n#\n# Usage:\n# $ bash format.bash\n\necho \"Formatting...\"\n\ngit ls-files \"*.h\" \"*.cpp\" | xargs clang-format -i .\n\necho \"Formatting complete!\"\necho \"You can stage all of the files using:\"\necho \"\"\necho '  git ls-files \"*.h\" \"*.cpp\" | xargs git add'\necho \"\""
        },
        {
          "name": "iPlug2",
          "type": "commit",
          "content": null
        },
        {
          "name": "setup_container.sh",
          "type": "blob",
          "size": 0.361328125,
          "content": "#!/bin/bash\n\n# This script initializes the cloned iPlug2OOS repo, downloading dependencies, and tools\n\necho \"Initializing submodule...\"\ngit submodule update --init\n\necho \"Downloading iPlug2 SDKs...\"\ncd iPlug2/Dependencies/IPlug/\n./download-iplug-sdks.sh\ncd ../../..\n\necho \"Downloading iPlug2 prebuilt libs...\"\ncd iPlug2/Dependencies/\n./download-prebuilt-libs.sh\ncd ../.."
        }
      ]
    }
  ]
}