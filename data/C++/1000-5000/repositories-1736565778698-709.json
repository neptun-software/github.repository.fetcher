{
  "metadata": {
    "timestamp": 1736565778698,
    "page": 709,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "microsoft/ELL",
      "stars": 2287,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 1.4853515625,
          "content": "---\n# clang-format documentation\n# http://clang.llvm.org/docs/ClangFormat.html\n# http://clang.llvm.org/docs/ClangFormatStyleOptions.html\n\n# Preexisting formats:\n# LLVM\n# Google\n# Chromium\n# Mozilla\n# WebKit\n\nLanguage:        Cpp\nBasedOnStyle:  Mozilla\n\nAccessModifierOffset: -4\nAlignAfterOpenBracket: Align\nAlignTrailingComments: false\nAllowShortBlocksOnASingleLine: false\nAllowShortFunctionsOnASingleLine: InlineOnly\nAllowShortIfStatementsOnASingleLine: true\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nBinPackArguments: false\nBinPackParameters: false\nBreakBeforeBraces: Custom\nBreakConstructorInitializers: AfterColon\nBraceWrapping:\n  AfterClass:      true\n  AfterControlStatement: true\n  AfterEnum:       true\n  AfterFunction:   true\n  AfterNamespace:  true\n  AfterObjCDeclaration: false\n  AfterStruct:     true\n  AfterUnion:      true\n  BeforeCatch:     true\n  BeforeElse:      true\n  IndentBraces:    false\n  SplitEmptyFunction: false\n  SplitEmptyRecord: false\nContinuationIndentWidth: 4\nConstructorInitializerIndentWidth: 4\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nColumnLimit: 0\nCpp11BracedListStyle: false\nFixNamespaceComments: true\nIncludeBlocks: Preserve\nIndentWidth: 4\nIndentCaseLabels: false\n# KeepEmptyLinesAtTheStartOfBlocks: false\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: Inner\nReflowComments: false\nPenaltyBreakBeforeFirstCallParameter: 100000\nPenaltyBreakComment: 100000\nSortIncludes: true\nSpaceAfterTemplateKeyword: true\nStandard: Cpp11\nUseTab: Never\n...\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.4521484375,
          "content": "# top-most EditorConfig file for Visual Studio\nroot = true\n\n# ensure all files are encoded using utf-8 (even without a BOM).\n# this goes together with our CMakeLists.txt /utf-8 compiler flag.\n[*]\ncharset = utf-8\n\n[*.{asm,bat,cfg,clang-format,cmake,cpp,css,editorconfig,gitattributes,gitignore,gyp,h,html,i,in,inc,js,json,ll,md,py,s,scss,sh,tcc,ts,txt,xslt,yaml,yml]\nindent_style = space\nindent_size = 4\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n"
        },
        {
          "name": ".flake8",
          "type": "blob",
          "size": 0.0732421875,
          "content": "[flake8]\nignore = E111,E402,E722,W503,W504,F405,F403\nmax-line-length = 120\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.861328125,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Explicitly force .sh scripts to have LF line endings\n###############################################################################\n*.sh text eol=lf\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n*.jpg   binary\n*.png   binary\n*.gif   binary\n*.wav   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n*.zip filter=lfs diff=lfs merge=lfs -text\n*.dll filter=lfs diff=lfs merge=lfs -text\n*.a filter=lfs diff=lfs merge=lfs -text\n*.node filter=lfs diff=lfs merge=lfs -text\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.046875,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbuild/\nbld/\n[Bb]in/\n[Oo]bj/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n*.ll\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n## TODO: Comment the next line if you want to checkin your\n## web deploy settings but do note that will include unencrypted\n## passwords\n#*.pubxml\n\n*.publishproj\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\n*.pyc\n*.pyd\n*.pyo\nnode_modules/\norleans.codegen.cs\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Emacs autosaves\n\\#*\\#\n.#*\n\n# Mac stuff\n.DS_Store\n\n# VS Code stuff\n.vs/\n.vscode/\nbrowse.VC.db\n\n# mbed development\n.yotta.json\nyotta_modules/\nyotta_targets/\n\n# CMake / CTest stuff\n/Testing/\n\n# ELL user directory\nuser/**\n\n# ELL External Dependencies\nexternal/**\n!external/README.md\n!external/*.config\n\nswig/\ndist/\nbuild/\nbuild_*/\nbuild-*/\n\ninterfaces/javascript/ell_module/CMakeFiles/\ninterfaces/javascript/ell_module/test/js/Testing/\nyotta_modules/\nyotta_targets/\nLaunchXslt/bin/**\nLaunchXslt/obj/**\n/linux\n/tutorials/vision/gettingStarted/*.weights\n/tutorials/vision/gettingStarted/*.cfg\n/tutorials/vision/gettingStarted/*.map\n/tutorials/vision/gettingStarted/*.lib\n/tutorials/vision/gettingStarted/*.exp\n/tutorials/vision/gettingStarted/darknetReference.py\n/tutorials/vision/gettingStarted/*.ll\n/tutorials/vision/gettingStarted/*.i.h\n/tutorials/vision/gettingStarted/*.i\n/_site/\n/.sass-cache/\nGemfile.lock\n\n# ctags tag file\ntags\n.amlignore\naml_config/\n\n# CLion/PyCharm IDE\n.idea/\ncmake-build-debug/\ncmake-build-release/\n\n.lastbuild\n.jekyll-cache/"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.2998046875,
          "content": "sudo: required\n\nservices:\n  - docker\n\ninstall:\n  - export DOCKERHUB_ACCOUNT=cjlovett\n  - docker pull $DOCKERHUB_ACCOUNT/ell-travis-build:latest\n\nscript:\n  - docker run -v $TRAVIS_BUILD_DIR:/ELL -it $DOCKERHUB_ACCOUNT/ell-travis-build:latest /bin/sh -c 'cd /ELL; ./scripts/build.sh build 1; cd build; ctest'\n"
        },
        {
          "name": "CMake",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 8.6416015625,
          "content": "#\n# cmake file for Embedded Learning Library subprojects\n#\n\ncmake_minimum_required(VERSION 3.8 FATAL_ERROR)\n\n# Error on non-existent dependency in add_dependencies.\ncmake_policy(SET CMP0046 NEW)\n\n# Include modules in the CMake directory.\nset(ELL_ROOT \"${CMAKE_CURRENT_SOURCE_DIR}\")\nlist(APPEND CMAKE_MODULE_PATH \"${ELL_ROOT}/CMake\")\ninclude(CompilerCache)\n\nproject(ELL CXX ASM)\nif(MSVC)\n  enable_language(ASM_MASM)\nendif()\n\nfile(STRINGS \"VERSION\" ELL_VERSION)\nmessage(STATUS \"ELL version ${ELL_VERSION}\")\n\n# Define custom configuration types for Visual Studio\nif(CMAKE_CONFIGURATION_TYPES)\n  # Copy important configuration info from Release config to new Documentation config\n  list(APPEND CMAKE_CONFIGURATION_TYPES Documentation)\n  set(CMAKE_CXX_FLAGS_DOCUMENTATION ${CMAKE_CXX_FLAGS_RELEASE})\n  set(CMAKE_C_FLAGS_DOCUMENTATION ${CMAKE_C_FLAGS_RELEASE})\n  set(CMAKE_EXE_LINKER_FLAGS_DOCUMENTATION ${CMAKE_EXE_LINKER_FLAGS_RELEASE})\n  set(CMAKE_EXE_LINKER_FLAGS_DOCUMENTATION ${CMAKE_EXE_LINKER_FLAGS_RELEASE})\n  set(CMAKE_SHARED_LINKER_FLAGS_DOCUMENTATION ${CMAKE_SHARED_LINKER_FLAGS_RELEASE})\n  set(CMAKE_MODULE_LINKER_FLAGS_DOCUMENTATION ${CMAKE_MODULE_LINKER_FLAGS_RELEASE})\nendif()\n\n# Try to create a compilation database, which is useful to have when working\n# with clang tooling\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\n# Options\n# To set an option:\n# cmake -DMyOption=ON|OFF buildDirectory\n# (so if we're running cmake from a 'build' directory inside the main directory, do this:\n#      cmake -DBUILD_DOC=OFF ..  )\noption(BUILD_DOC \"Build Doxygen documentation\" ON)\noption(STRICT_MODE \"Build with 'warnings as errors'\" OFF)\noption(PROFILING \"Enable performance profiling tests\" OFF)\noption(DISABLE_PYTHON \"Explicitly disable building python modules\" OFF)\noption(CNTK \"Enable CNTK importer and related unit tests (requires CNTK python module)\" OFF)\noption(ONNX \"Enable ONNX importer and related unit tests (requires PyTorch and ONNX python modules)\" OFF)\n\nset(FLAKE8_CONFIG \"${ELL_ROOT}/.flake8\")\nset(TEST_MODELS_REPO \"https://github.com/Microsoft/ell-test-models\" CACHE STRING \"URL to the git repo containing test models\" )\nmessage(STATUS \"Configuring tests to use TEST_MODELS_REPO at: ${TEST_MODELS_REPO}\")\n\nif(NOT ELL_EXTERNAL_DIR)\n  set(ELL_EXTERNAL_DIR \"${ELL_ROOT}/external\" CACHE STRING \"Directory to install external dependencies\" )\nendif(NOT ELL_EXTERNAL_DIR)\n\nset(RPI_PASSWORD \"$ENV{RPI_PASSWORD}\")\nset(RPI_CLUSTER \"$ENV{RPI_CLUSTER}\")\nset(RPI_KEY \"$ENV{RPI_APIKEY}\")\n\nif(DISABLE_PYTHON)\n  message(STATUS \"Python has been explicitly disabled\")\n  set(PYTHON_ENABLED OFF)\nelse()\n  foreach(PYTHON_VERSION 3.7 3.6)\n    find_package(PythonInterp ${PYTHON_VERSION} QUIET)\n    find_package(PythonLibs ${PYTHON_VERSION} QUIET)\n\n    message(STATUS \"Looking for python ${PYTHON_VERSION}: PYTHONINTERP_FOUND=${PYTHONINTERP_FOUND}, PYTHONLIBS_FOUND=${PYTHONLIBS_FOUND}\")\n    if(${PYTHONINTERP_FOUND} AND ${PYTHONLIBS_FOUND})\n      message(STATUS \"PYTHON_EXECUTABLE=${PYTHON_EXECUTABLE}\")\n      message(STATUS \"PYTHON_VERSION_STRING=${PYTHON_VERSION_STRING}\")\n      message(STATUS \"PYTHON_VERSION_MAJOR=${PYTHON_VERSION_MAJOR}\")\n\n      message(STATUS \"PYTHON_LIBRARIES=${PYTHON_LIBRARIES}\")\n      message(STATUS \"PYTHON_INCLUDE_PATH=${PYTHON_INCLUDE_PATH}\")\n      message(STATUS \"PYTHON_INCLUDE_DIRS=${PYTHON_INCLUDE_DIRS}\")\n      message(STATUS \"PYTHON_DEBUG_LIBRARIES=${PYTHON_DEBUG_LIBRARIES}\")\n      message(STATUS \"PYTHONLIBS_VERSION_STRING=${PYTHONLIBS_VERSION_STRING}\")\n\n      break()\n    endif()\n  endforeach()\n\n  if(${PYTHONLIBS_FOUND})\n    set(PYTHON_ENABLED ON)\n  else()\n    set(PYTHON_ENABLED OFF)\n    message(STATUS \"### Python 3.6 or later not found, so python features will be disabled\")\n  endif()\nendif()\n\ninclude(Flake8)\n\n# Turn on ability to create folders to organize projects\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\n# Set C++ version\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\n# Apply -fPIC where applicable to the platform\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\n\n# Find the platform-specific way of working with threads\nset(THREADS_PREFER_PTHREAD_FLAG ON)\nset(CMAKE_THREAD_PREFER_PTHREAD ON)\nfind_package(Threads REQUIRED)\n\nif(STRICT_MODE)\n  message(\"-- Turning on strict mode with warnings as errors.\")\nendif()\n\n# Turn on ctest tests\nenable_testing()\n\n# Set up global variables to help find NuGet projects\nset(PACKAGE_ROOT ${ELL_EXTERNAL_DIR})\n\ninclude(OpenBLASSetup)\ninclude(LLVMSetup)\ninclude(SWIGSetup)\ninclude(CopySharedLibraries)\ninclude(AddPrecompiledHeader)\n\nif(MSVC)\n  # Set Visual Studio-specific options\n  add_definitions(-DUNICODE)\n  add_compile_options(/utf-8)\n  add_compile_options(/MP)\n  add_compile_options(/bigobj)\n  add_compile_options(/W4)\n  add_compile_options(/permissive-)\n  if(STRICT_MODE)\n    add_compile_options(/WX)\n  endif()\n  # the debug linker needs to match how LLVM was built (either /MD or /MDd)\n  set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} ${LLVM_MD_OPTION}\")\n  set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} ${LLVM_MD_OPTION}\")\nelse()\n  # Set Clang/GCC-specific options\n  add_compile_options(-Wall)\n  if(STRICT_MODE)\n    add_compile_options(-Werror)\n  endif()\n  add_compile_options(-Wsign-compare)\n  add_compile_options(-Wno-missing-braces)\n  add_compile_options(-Wmissing-field-initializers)\n  add_compile_options(-fvisibility-inlines-hidden)\n  add_compile_options(-Wno-unknown-pragmas)\n  add_compile_options(-Wno-comment)\n  set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -ggdb3 -O0\")\n  set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} -ggdb3 -O0\")\n  set(CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -ggdb3\")\n  set(CMAKE_C_FLAGS_RELWITHDEBINFO \"${CMAKE_C_FLAGS_RELWITHDEBINFO} -ggdb3\")\n  if(${CMAKE_CXX_COMPILER_ID} STREQUAL Clang)\n    add_compile_options(-Wno-backslash-newline-escape)\n    add_compile_options(-Wno-self-assign)\n  else() # GCC\n    add_compile_options(-Wno-ignored-attributes)\n  endif()\nendif()\n\n# Print helpful message if LLVM not found on Windows\nif(NOT LLVM_FOUND AND WIN32)\n  message(WARNING \"LLVM not found. Run the following command from the main project directory:\\n    nuget.exe restore external/packages.config -PackagesDirectory external\")\nendif()\n\n# Include cmake projects for libraries and executables\nadd_subdirectory(libraries)\nadd_subdirectory(tools)\ninclude(CommonInterfaces)\nadd_subdirectory(interfaces)\n# Add examples (has dependencies on SWIG-generated interfaces)\nadd_subdirectory(examples)\n\n# Add user directories to ELL build if requested\nif(EXISTS \"${ELL_ROOT}/user\")\n  # Add root user directory if it has a CMakeLists.txt file and INCLUDE_IN_ELL_BUILD.txt file\n  if(EXISTS\"${ELL_ROOT}/user/CMakeLists.txt\" AND EXISTS \"${ELL_ROOT}/user/INCLUDE_IN_ELL_BUILD.txt\")\n    message(STATUS \"Adding user directory to ELL build\")\n    add_subdirectory(user)\n  endif()\n\n  # Now add all child directories that have CMakeLists.txt files and INCLUDE_IN_ELL_BUILD.txt file\n  file(GLOB children RELATIVE \"${ELL_ROOT}/user\" \"${ELL_ROOT}/user/*\")\n  foreach(child ${children})\n    if(IS_DIRECTORY \"${ELL_ROOT}/user/${child}\" AND EXISTS \"${ELL_ROOT}/user/${child}/CMakeLists.txt\" AND EXISTS \"${ELL_ROOT}/user/${child}/INCLUDE_IN_ELL_BUILD.txt\")\n      message(STATUS \"Adding user directory ${child} to ELL build\")\n      add_subdirectory(\"user/${child}\")\n    endif()\n  endforeach()\nendif()\n\nmessage(STATUS \"Writing: ${CMAKE_BINARY_DIR}/config.json\")\nset(JSON \"{ \\\"test_models_repo\\\": \\\"${TEST_MODELS_REPO}\\\" }\")\nfile(WRITE \"${CMAKE_BINARY_DIR}/config.json\" ${JSON})\nconfigure_file(\"${CMAKE_BINARY_DIR}/config.json\" \"config.json\" COPYONLY)\n\n# Add project for solution-level documentation\nset (DOC README.md\n         StyleGuide.md)\nadd_custom_target(documentation ALL DEPENDS ${DOC} SOURCES ${DOC})\nset_property(TARGET documentation PROPERTY FOLDER \"documentation\")\n\n# Generate doxygen documentation\nif(BUILD_DOC)\n  find_package(Doxygen 1.8 QUIET)\n\n  # search external NuGet package directory also\n  if(NOT DOXYGEN_FOUND)\n    set(DOXYGEN_PACKAGE_NAME Doxygen)\n    set(DOXYGEN_PACKAGE_VERSION 1.8.13)\n    set(DOXYGEN_PACKAGE_DIR ${PACKAGE_ROOT}/${DOXYGEN_PACKAGE_NAME}.${DOXYGEN_PACKAGE_VERSION})\n    find_program(DOXYGEN_EXECUTABLE doxygen\n      HINTS \"${DOXYGEN_PACKAGE_DIR}/tools\")\n      if(DOXYGEN_EXECUTABLE)\n        set(DOXYGEN_FOUND TRUE)\n      endif()\n  endif()\n\n  if(DOXYGEN_FOUND)\n    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)\n    set (DOXYFILE_LOCATION \"${CMAKE_CURRENT_BINARY_DIR}/Doxyfile\")\n\n    add_custom_target(doc\n      COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYFILE_LOCATION}\n      WORKING_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}\"\n      COMMENT \"Building Doxygen documentation\" VERBATIM\n      SOURCES Doxyfile)\n    set_property(TARGET doc PROPERTY FOLDER \"documentation\")\n  else()\n    message(WARNING \"Doxygen processor not found\")\n  endif()\nendif()\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.916015625,
          "content": "# Dockerfile for an Ubuntu environment for ELL for Continuous Integration\nFROM continuumio/miniconda3:latest\n\nRUN apt-get update \\\n    && apt-get install -y \\\n      build-essential \\\n      curl \\\n      gcc \\\n      git \\\n      libedit-dev \\\n      zlibc \\\n      zlib1g \\\n      zlib1g-dev \\\n      libopenblas-dev \\\n      doxygen \\\n      unzip \\\n    && apt-get clean all\n\n# LLVM\nRUN echo deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-8 main >> /etc/apt/sources.list\nRUN echo deb-src http://apt.llvm.org/bionic/ llvm-toolchain-bionic-8 main >> /etc/apt/sources.list\nRUN wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -\nRUN apt-get update \\\n    && apt-get install -y \\\n      llvm-8 \\\n    && apt-get clean all\n\n# SWIG\nRUN curl -O --location http://prdownloads.sourceforge.net/swig/swig-4.0.0.tar.gz \\\n    && tar zxvf swig-4.0.0.tar.gz \\\n    && cd swig-4.0.0 \\\n    && ./configure --without-pcre \\\n    && make \\\n    && make install\n\n# OpenCV\nRUN apt-get update \\\n    && apt-get install -y \\\n       libgl1-mesa-glx\nRUN export PATH=\"/opt/conda/bin:${PATH}\" \\\n    && conda install --yes --quiet -c conda-forge opencv\n\n# CNTK\nRUN /bin/bash -c \"source activate base\" \\\n    && pip install --upgrade pip \\\n    && pip install --no-cache-dir --ignore-installed \\\n          cntk\n\n# OpenMPI\nRUN curl -o openmpi-1.10.3.tar.gz -L https://www.open-mpi.org/software/ompi/v1.10/downloads/openmpi-1.10.3.tar.gz \\\n    && tar zxvf openmpi-1.10.3.tar.gz \\\n    && cd openmpi-1.10.3 \\\n    && ./configure --prefix=/usr/local/mpi \\\n    && make -j all \\\n    && make install\n\n# LD path to libpython3.6m.so\nRUN echo /opt/conda/lib >> /etc/ld.so.conf.d/conda.conf && \\\n    ldconfig\n\n# cmake\nRUN curl -o cmake-3.11.2-Linux-x86_64.sh -L https://cmake.org/files/v3.11/cmake-3.11.2-Linux-x86_64.sh \\\n    && chmod +x cmake-3.11.2-Linux-x86_64.sh \\\n    && ./cmake-3.11.2-Linux-x86_64.sh --skip-license \\\n    &&  ln -s /opt/cmake-3.11.2-Linux-x86_64/bin/* /usr/local/bin\n"
        },
        {
          "name": "Doxyfile",
          "type": "blob",
          "size": 105.404296875,
          "content": "# Doxyfile 1.8.11\n\n# This file describes the settings to be used by the documentation system\n# doxygen (www.doxygen.org) for a project.\n#\n# All text after a double hash (##) is considered a comment and is placed in\n# front of the TAG it is preceding.\n#\n# All text after a single hash (#) is considered a comment and will be ignored.\n# The format is:\n# TAG = value [value, ...]\n# For lists, items can also be appended using:\n# TAG += value [value, ...]\n# Values that contain spaces should be placed between quotes (\\\" \\\").\n\n#---------------------------------------------------------------------------\n# Project related configuration options\n#---------------------------------------------------------------------------\n\n# This tag specifies the encoding used for all characters in the config file\n# that follow. The default is UTF-8 which is also the encoding used for all text\n# before the first occurrence of this tag. Doxygen uses libiconv (or the iconv\n# built into libc) for the transcoding. See http://www.gnu.org/software/libiconv\n# for the list of possible encodings.\n# The default value is: UTF-8.\n\nDOXYFILE_ENCODING      = UTF-8\n\n# The PROJECT_NAME tag is a single word (or a sequence of words surrounded by\n# double-quotes, unless you are using Doxywizard) that should identify the\n# project for which the documentation is generated. This name is used in the\n# title of most generated pages and in a few other places.\n# The default value is: My Project.\n\nPROJECT_NAME           = ELL\n\n# The PROJECT_NUMBER tag can be used to enter a project or revision number. This\n# could be handy for archiving the generated documentation or if some version\n# control system is used.\n\nPROJECT_NUMBER         =\n\n# Using the PROJECT_BRIEF tag one can provide an optional one line description\n# for a project that appears at the top of each page and should give viewer a\n# quick idea about the purpose of the project. Keep the description short.\n\nPROJECT_BRIEF          =\n\n# With the PROJECT_LOGO tag one can specify a logo or an icon that is included\n# in the documentation. The maximum height of the logo should not exceed 55\n# pixels and the maximum width should not exceed 200 pixels. Doxygen will copy\n# the logo to the output directory.\n\nPROJECT_LOGO           =\n\n# The OUTPUT_DIRECTORY tag is used to specify the (relative or absolute) path\n# into which the generated documentation will be written. If a relative path is\n# entered, it will be relative to the location where doxygen was started. If\n# left blank the current directory will be used.\n\nOUTPUT_DIRECTORY       = doc\n\n# If the CREATE_SUBDIRS tag is set to YES then doxygen will create 4096 sub-\n# directories (in 2 levels) under the output directory of each output format and\n# will distribute the generated files over these directories. Enabling this\n# option can be useful when feeding doxygen a huge amount of source files, where\n# putting all generated files in the same directory would otherwise causes\n# performance problems for the file system.\n# The default value is: NO.\n\nCREATE_SUBDIRS         = NO\n\n# If the ALLOW_UNICODE_NAMES tag is set to YES, doxygen will allow non-ASCII\n# characters to appear in the names of generated files. If set to NO, non-ASCII\n# characters will be escaped, for example _xE3_x81_x84 will be used for Unicode\n# U+3044.\n# The default value is: NO.\n\nALLOW_UNICODE_NAMES    = NO\n\n# The OUTPUT_LANGUAGE tag is used to specify the language in which all\n# documentation generated by doxygen is written. Doxygen will use this\n# information to generate all constant output in the proper language.\n# Possible values are: Afrikaans, Arabic, Armenian, Brazilian, Catalan, Chinese,\n# Chinese-Traditional, Croatian, Czech, Danish, Dutch, English (United States),\n# Esperanto, Farsi (Persian), Finnish, French, German, Greek, Hungarian,\n# Indonesian, Italian, Japanese, Japanese-en (Japanese with English messages),\n# Korean, Korean-en (Korean with English messages), Latvian, Lithuanian,\n# Macedonian, Norwegian, Persian (Farsi), Polish, Portuguese, Romanian, Russian,\n# Serbian, Serbian-Cyrillic, Slovak, Slovene, Spanish, Swedish, Turkish,\n# Ukrainian and Vietnamese.\n# The default value is: English.\n\nOUTPUT_LANGUAGE        = English\n\n# If the BRIEF_MEMBER_DESC tag is set to YES, doxygen will include brief member\n# descriptions after the members that are listed in the file and class\n# documentation (similar to Javadoc). Set to NO to disable this.\n# The default value is: YES.\n\nBRIEF_MEMBER_DESC      = YES\n\n# If the REPEAT_BRIEF tag is set to YES, doxygen will prepend the brief\n# description of a member or function before the detailed description\n#\n# Note: If both HIDE_UNDOC_MEMBERS and BRIEF_MEMBER_DESC are set to NO, the\n# brief descriptions will be completely suppressed.\n# The default value is: YES.\n\nREPEAT_BRIEF           = YES\n\n# This tag implements a quasi-intelligent brief description abbreviator that is\n# used to form the text in various listings. Each string in this list, if found\n# as the leading text of the brief description, will be stripped from the text\n# and the result, after processing the whole list, is used as the annotated\n# text. Otherwise, the brief description is used as-is. If left blank, the\n# following values are used ($name is automatically replaced with the name of\n# the entity):The $name class, The $name widget, The $name file, is, provides,\n# specifies, contains, represents, a, an and the.\n\nABBREVIATE_BRIEF       = \"The $name class\" \\\n                         \"The $name widget\" \\\n                         \"The $name file\" \\\n                         is \\\n                         provides \\\n                         specifies \\\n                         contains \\\n                         represents \\\n                         a \\\n                         an \\\n                         the\n\n# If the ALWAYS_DETAILED_SEC and REPEAT_BRIEF tags are both set to YES then\n# doxygen will generate a detailed section even if there is only a brief\n# description.\n# The default value is: NO.\n\nALWAYS_DETAILED_SEC    = NO\n\n# If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all\n# inherited members of a class in the documentation of that class as if those\n# members were ordinary class members. Constructors, destructors and assignment\n# operators of the base classes will not be shown.\n# The default value is: NO.\n\nINLINE_INHERITED_MEMB  = NO\n\n# If the FULL_PATH_NAMES tag is set to YES, doxygen will prepend the full path\n# before files name in the file list and in the header files. If set to NO the\n# shortest path that makes the file name unique will be used\n# The default value is: YES.\n\nFULL_PATH_NAMES        = YES\n\n# The STRIP_FROM_PATH tag can be used to strip a user-defined part of the path.\n# Stripping is only done if one of the specified strings matches the left-hand\n# part of the path. The tag can be used to show relative paths in the file list.\n# If left blank the directory from which doxygen is run is used as the path to\n# strip.\n#\n# Note that you can specify absolute paths here, but also relative paths, which\n# will be relative from the directory where doxygen is started.\n# This tag requires that the tag FULL_PATH_NAMES is set to YES.\n\nSTRIP_FROM_PATH        = @CMAKE_CURRENT_SOURCE_DIR@\n\n# The STRIP_FROM_INC_PATH tag can be used to strip a user-defined part of the\n# path mentioned in the documentation of a class, which tells the reader which\n# header file to include in order to use a class. If left blank only the name of\n# the header file containing the class definition is used. Otherwise one should\n# specify the list of include paths that are normally passed to the compiler\n# using the -I flag.\n\nSTRIP_FROM_INC_PATH    =\n\n# If the SHORT_NAMES tag is set to YES, doxygen will generate much shorter (but\n# less readable) file names. This can be useful is your file systems doesn't\n# support long names like on DOS, Mac, or CD-ROM.\n# The default value is: NO.\n\nSHORT_NAMES            = NO\n\n# If the JAVADOC_AUTOBRIEF tag is set to YES then doxygen will interpret the\n# first line (until the first dot) of a Javadoc-style comment as the brief\n# description. If set to NO, the Javadoc-style will behave just like regular Qt-\n# style comments (thus requiring an explicit @brief command for a brief\n# description.)\n# The default value is: NO.\n\nJAVADOC_AUTOBRIEF      = NO\n\n# If the QT_AUTOBRIEF tag is set to YES then doxygen will interpret the first\n# line (until the first dot) of a Qt-style comment as the brief description. If\n# set to NO, the Qt-style will behave just like regular Qt-style comments (thus\n# requiring an explicit \\brief command for a brief description.)\n# The default value is: NO.\n\nQT_AUTOBRIEF           = NO\n\n# The MULTILINE_CPP_IS_BRIEF tag can be set to YES to make doxygen treat a\n# multi-line C++ special comment block (i.e. a block of //! or /// comments) as\n# a brief description. This used to be the default behavior. The new default is\n# to treat a multi-line C++ comment block as a detailed description. Set this\n# tag to YES if you prefer the old behavior instead.\n#\n# Note that setting this tag to YES also means that rational rose comments are\n# not recognized any more.\n# The default value is: NO.\n\nMULTILINE_CPP_IS_BRIEF = NO\n\n# If the INHERIT_DOCS tag is set to YES then an undocumented member inherits the\n# documentation from any documented member that it re-implements.\n# The default value is: YES.\n\nINHERIT_DOCS           = YES\n\n# If the SEPARATE_MEMBER_PAGES tag is set to YES then doxygen will produce a new\n# page for each member. If set to NO, the documentation of a member will be part\n# of the file/class/namespace that contains it.\n# The default value is: NO.\n\nSEPARATE_MEMBER_PAGES  = NO\n\n# The TAB_SIZE tag can be used to set the number of spaces in a tab. Doxygen\n# uses this value to replace tabs by spaces in code fragments.\n# Minimum value: 1, maximum value: 16, default value: 4.\n\nTAB_SIZE               = 4\n\n# This tag can be used to specify a number of aliases that act as commands in\n# the documentation. An alias has the form:\n# name=value\n# For example adding\n# \"sideeffect=@par Side Effects:\\n\"\n# will allow you to put the command \\sideeffect (or @sideeffect) in the\n# documentation, which will result in a user-defined paragraph with heading\n# \"Side Effects:\". You can put \\n's in the value part of an alias to insert\n# newlines.\n\nALIASES                =\n\n# This tag can be used to specify a number of word-keyword mappings (TCL only).\n# A mapping has the form \"name=value\". For example adding \"class=itcl::class\"\n# will allow you to use the command class in the itcl::class meaning.\n\nTCL_SUBST              =\n\n# Set the OPTIMIZE_OUTPUT_FOR_C tag to YES if your project consists of C sources\n# only. Doxygen will then generate output that is more tailored for C. For\n# instance, some of the names that are used will be different. The list of all\n# members will be omitted, etc.\n# The default value is: NO.\n\nOPTIMIZE_OUTPUT_FOR_C  = NO\n\n# Set the OPTIMIZE_OUTPUT_JAVA tag to YES if your project consists of Java or\n# Python sources only. Doxygen will then generate output that is more tailored\n# for that language. For instance, namespaces will be presented as packages,\n# qualified scopes will look different, etc.\n# The default value is: NO.\n\nOPTIMIZE_OUTPUT_JAVA   = NO\n\n# Set the OPTIMIZE_FOR_FORTRAN tag to YES if your project consists of Fortran\n# sources. Doxygen will then generate output that is tailored for Fortran.\n# The default value is: NO.\n\nOPTIMIZE_FOR_FORTRAN   = NO\n\n# Set the OPTIMIZE_OUTPUT_VHDL tag to YES if your project consists of VHDL\n# sources. Doxygen will then generate output that is tailored for VHDL.\n# The default value is: NO.\n\nOPTIMIZE_OUTPUT_VHDL   = NO\n\n# Doxygen selects the parser to use depending on the extension of the files it\n# parses. With this tag you can assign which parser to use for a given\n# extension. Doxygen has a built-in mapping, but you can override or extend it\n# using this tag. The format is ext=language, where ext is a file extension, and\n# language is one of the parsers supported by doxygen: IDL, Java, Javascript,\n# C#, C, C++, D, PHP, Objective-C, Python, Fortran (fixed format Fortran:\n# FortranFixed, free formatted Fortran: FortranFree, unknown formatted Fortran:\n# Fortran. In the later case the parser tries to guess whether the code is fixed\n# or free formatted code, this is the default for Fortran type files), VHDL. For\n# instance to make doxygen treat .inc files as Fortran files (default is PHP),\n# and .f files as C (default is Fortran), use: inc=Fortran f=C.\n#\n# Note: For files without extension you can use no_extension as a placeholder.\n#\n# Note that for custom extensions you also need to set FILE_PATTERNS otherwise\n# the files are not read by doxygen.\n\nEXTENSION_MAPPING      =\n\n# If the MARKDOWN_SUPPORT tag is enabled then doxygen pre-processes all comments\n# according to the Markdown format, which allows for more readable\n# documentation. See http://daringfireball.net/projects/markdown/ for details.\n# The output of markdown processing is further processed by doxygen, so you can\n# mix doxygen, HTML, and XML commands with Markdown formatting. Disable only in\n# case of backward compatibilities issues.\n# The default value is: YES.\n\nMARKDOWN_SUPPORT       = YES\n\n# When enabled doxygen tries to link words that correspond to documented\n# classes, or namespaces to their corresponding documentation. Such a link can\n# be prevented in individual cases by putting a % sign in front of the word or\n# globally by setting AUTOLINK_SUPPORT to NO.\n# The default value is: YES.\n\nAUTOLINK_SUPPORT       = YES\n\n# If you use STL classes (i.e. std::string, std::vector, etc.) but do not want\n# to include (a tag file for) the STL sources as input, then you should set this\n# tag to YES in order to let doxygen match functions declarations and\n# definitions whose arguments contain STL classes (e.g. func(std::string);\n# versus func(std::string) {}). This also make the inheritance and collaboration\n# diagrams that involve STL classes more complete and accurate.\n# The default value is: NO.\n\nBUILTIN_STL_SUPPORT    = NO\n\n# If you use Microsoft's C++/CLI language, you should set this option to YES to\n# enable parsing support.\n# The default value is: NO.\n\nCPP_CLI_SUPPORT        = NO\n\n# Set the SIP_SUPPORT tag to YES if your project consists of sip (see:\n# http://www.riverbankcomputing.co.uk/software/sip/intro) sources only. Doxygen\n# will parse them like normal C++ but will assume all classes use public instead\n# of private inheritance when no explicit protection keyword is present.\n# The default value is: NO.\n\nSIP_SUPPORT            = NO\n\n# For Microsoft's IDL there are propget and propput attributes to indicate\n# getter and setter methods for a property. Setting this option to YES will make\n# doxygen to replace the get and set methods by a property in the documentation.\n# This will only work if the methods are indeed getting or setting a simple\n# type. If this is not the case, or you want to show the methods anyway, you\n# should set this option to NO.\n# The default value is: YES.\n\nIDL_PROPERTY_SUPPORT   = YES\n\n# If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC\n# tag is set to YES then doxygen will reuse the documentation of the first\n# member in the group (if any) for the other members of the group. By default\n# all members of a group must be documented explicitly.\n# The default value is: NO.\n\nDISTRIBUTE_GROUP_DOC   = NO\n\n# If one adds a struct or class to a group and this option is enabled, then also\n# any nested class or struct is added to the same group. By default this option\n# is disabled and one has to add nested compounds explicitly via \\ingroup.\n# The default value is: NO.\n\nGROUP_NESTED_COMPOUNDS = NO\n\n# Set the SUBGROUPING tag to YES to allow class member groups of the same type\n# (for instance a group of public functions) to be put as a subgroup of that\n# type (e.g. under the Public Functions section). Set it to NO to prevent\n# subgrouping. Alternatively, this can be done per class using the\n# \\nosubgrouping command.\n# The default value is: YES.\n\nSUBGROUPING            = YES\n\n# When the INLINE_GROUPED_CLASSES tag is set to YES, classes, structs and unions\n# are shown inside the group in which they are included (e.g. using \\ingroup)\n# instead of on a separate page (for HTML and Man pages) or section (for LaTeX\n# and RTF).\n#\n# Note that this feature does not work in combination with\n# SEPARATE_MEMBER_PAGES.\n# The default value is: NO.\n\nINLINE_GROUPED_CLASSES = NO\n\n# When the INLINE_SIMPLE_STRUCTS tag is set to YES, structs, classes, and unions\n# with only public data fields or simple typedef fields will be shown inline in\n# the documentation of the scope in which they are defined (i.e. file,\n# namespace, or group documentation), provided this scope is documented. If set\n# to NO, structs, classes, and unions are shown on a separate page (for HTML and\n# Man pages) or section (for LaTeX and RTF).\n# The default value is: NO.\n\nINLINE_SIMPLE_STRUCTS  = NO\n\n# When TYPEDEF_HIDES_STRUCT tag is enabled, a typedef of a struct, union, or\n# enum is documented as struct, union, or enum with the name of the typedef. So\n# typedef struct TypeS {} TypeT, will appear in the documentation as a struct\n# with name TypeT. When disabled the typedef will appear as a member of a file,\n# namespace, or class. And the struct will be named TypeS. This can typically be\n# useful for C code in case the coding convention dictates that all compound\n# types are typedef'ed and only the typedef is referenced, never the tag name.\n# The default value is: NO.\n\nTYPEDEF_HIDES_STRUCT   = NO\n\n# The size of the symbol lookup cache can be set using LOOKUP_CACHE_SIZE. This\n# cache is used to resolve symbols given their name and scope. Since this can be\n# an expensive process and often the same symbol appears multiple times in the\n# code, doxygen keeps a cache of pre-resolved symbols. If the cache is too small\n# doxygen will become slower. If the cache is too large, memory is wasted. The\n# cache size is given by this formula: 2^(16+LOOKUP_CACHE_SIZE). The valid range\n# is 0..9, the default is 0, corresponding to a cache size of 2^16=65536\n# symbols. At the end of a run doxygen will report the cache usage and suggest\n# the optimal cache size from a speed point of view.\n# Minimum value: 0, maximum value: 9, default value: 0.\n\nLOOKUP_CACHE_SIZE      = 0\n\n#---------------------------------------------------------------------------\n# Build related configuration options\n#---------------------------------------------------------------------------\n\n# If the EXTRACT_ALL tag is set to YES, doxygen will assume all entities in\n# documentation are documented, even if no documentation was available. Private\n# class members and static file members will be hidden unless the\n# EXTRACT_PRIVATE respectively EXTRACT_STATIC tags are set to YES.\n# Note: This will also disable the warnings about undocumented members that are\n# normally produced when WARNINGS is set to YES.\n# The default value is: NO.\n\nEXTRACT_ALL            = NO\n\n# If the EXTRACT_PRIVATE tag is set to YES, all private members of a class will\n# be included in the documentation.\n# The default value is: NO.\n\nEXTRACT_PRIVATE        = NO\n\n# If the EXTRACT_PACKAGE tag is set to YES, all members with package or internal\n# scope will be included in the documentation.\n# The default value is: NO.\n\nEXTRACT_PACKAGE        = NO\n\n# If the EXTRACT_STATIC tag is set to YES, all static members of a file will be\n# included in the documentation.\n# The default value is: NO.\n\nEXTRACT_STATIC         = NO\n\n# If the EXTRACT_LOCAL_CLASSES tag is set to YES, classes (and structs) defined\n# locally in source files will be included in the documentation. If set to NO,\n# only classes defined in header files are included. Does not have any effect\n# for Java sources.\n# The default value is: YES.\n\nEXTRACT_LOCAL_CLASSES  = NO\n\n# This flag is only useful for Objective-C code. If set to YES, local methods,\n# which are defined in the implementation section but not in the interface are\n# included in the documentation. If set to NO, only methods in the interface are\n# included.\n# The default value is: NO.\n\nEXTRACT_LOCAL_METHODS  = NO\n\n# If this flag is set to YES, the members of anonymous namespaces will be\n# extracted and appear in the documentation as a namespace called\n# 'anonymous_namespace{file}', where file will be replaced with the base name of\n# the file that contains the anonymous namespace. By default anonymous namespace\n# are hidden.\n# The default value is: NO.\n\nEXTRACT_ANON_NSPACES   = NO\n\n# If the HIDE_UNDOC_MEMBERS tag is set to YES, doxygen will hide all\n# undocumented members inside documented classes or files. If set to NO these\n# members will be included in the various overviews, but no documentation\n# section is generated. This option has no effect if EXTRACT_ALL is enabled.\n# The default value is: NO.\n\nHIDE_UNDOC_MEMBERS     = NO\n\n# If the HIDE_UNDOC_CLASSES tag is set to YES, doxygen will hide all\n# undocumented classes that are normally visible in the class hierarchy. If set\n# to NO, these classes will be included in the various overviews. This option\n# has no effect if EXTRACT_ALL is enabled.\n# The default value is: NO.\n\nHIDE_UNDOC_CLASSES     = NO\n\n# If the HIDE_FRIEND_COMPOUNDS tag is set to YES, doxygen will hide all friend\n# (class|struct|union) declarations. If set to NO, these declarations will be\n# included in the documentation.\n# The default value is: NO.\n\nHIDE_FRIEND_COMPOUNDS  = NO\n\n# If the HIDE_IN_BODY_DOCS tag is set to YES, doxygen will hide any\n# documentation blocks found inside the body of a function. If set to NO, these\n# blocks will be appended to the function's detailed documentation block.\n# The default value is: NO.\n\nHIDE_IN_BODY_DOCS      = NO\n\n# The INTERNAL_DOCS tag determines if documentation that is typed after a\n# \\internal command is included. If the tag is set to NO then the documentation\n# will be excluded. Set it to YES to include the internal documentation.\n# The default value is: NO.\n\nINTERNAL_DOCS          = NO\n\n# If the CASE_SENSE_NAMES tag is set to NO then doxygen will only generate file\n# names in lower-case letters. If set to YES, upper-case letters are also\n# allowed. This is useful if you have classes or files whose names only differ\n# in case and if your file system supports case sensitive file names. Windows\n# and Mac users are advised to set this option to NO.\n# The default value is: system dependent.\n\nCASE_SENSE_NAMES       = NO\n\n# If the HIDE_SCOPE_NAMES tag is set to NO then doxygen will show members with\n# their full class and namespace scopes in the documentation. If set to YES, the\n# scope will be hidden.\n# The default value is: NO.\n\nHIDE_SCOPE_NAMES       = YES  # cjacobs: set this to YES\n\n# If the HIDE_COMPOUND_REFERENCE tag is set to NO (default) then doxygen will\n# append additional text to a page's title, such as Class Reference. If set to\n# YES the compound reference will be hidden.\n# The default value is: NO.\n\nHIDE_COMPOUND_REFERENCE= NO\n\n# If the SHOW_INCLUDE_FILES tag is set to YES then doxygen will put a list of\n# the files that are included by a file in the documentation of that file.\n# The default value is: YES.\n\nSHOW_INCLUDE_FILES     = YES\n\n# If the SHOW_GROUPED_MEMB_INC tag is set to YES then Doxygen will add for each\n# grouped member an include statement to the documentation, telling the reader\n# which file to include in order to use the member.\n# The default value is: NO.\n\nSHOW_GROUPED_MEMB_INC  = NO\n\n# If the FORCE_LOCAL_INCLUDES tag is set to YES then doxygen will list include\n# files with double quotes in the documentation rather than with sharp brackets.\n# The default value is: NO.\n\nFORCE_LOCAL_INCLUDES   = NO\n\n# If the INLINE_INFO tag is set to YES then a tag [inline] is inserted in the\n# documentation for inline members.\n# The default value is: YES.\n\nINLINE_INFO            = YES\n\n# If the SORT_MEMBER_DOCS tag is set to YES then doxygen will sort the\n# (detailed) documentation of file and class members alphabetically by member\n# name. If set to NO, the members will appear in declaration order.\n# The default value is: YES.\n\nSORT_MEMBER_DOCS       = YES\n\n# If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the brief\n# descriptions of file, namespace and class members alphabetically by member\n# name. If set to NO, the members will appear in declaration order. Note that\n# this will also influence the order of the classes in the class list.\n# The default value is: NO.\n\nSORT_BRIEF_DOCS        = NO\n\n# If the SORT_MEMBERS_CTORS_1ST tag is set to YES then doxygen will sort the\n# (brief and detailed) documentation of class members so that constructors and\n# destructors are listed first. If set to NO the constructors will appear in the\n# respective orders defined by SORT_BRIEF_DOCS and SORT_MEMBER_DOCS.\n# Note: If SORT_BRIEF_DOCS is set to NO this option is ignored for sorting brief\n# member documentation.\n# Note: If SORT_MEMBER_DOCS is set to NO this option is ignored for sorting\n# detailed member documentation.\n# The default value is: NO.\n\nSORT_MEMBERS_CTORS_1ST = YES\n\n# If the SORT_GROUP_NAMES tag is set to YES then doxygen will sort the hierarchy\n# of group names into alphabetical order. If set to NO the group names will\n# appear in their defined order.\n# The default value is: NO.\n\nSORT_GROUP_NAMES       = NO\n\n# If the SORT_BY_SCOPE_NAME tag is set to YES, the class list will be sorted by\n# fully-qualified names, including namespaces. If set to NO, the class list will\n# be sorted only by class name, not including the namespace part.\n# Note: This option is not very useful if HIDE_SCOPE_NAMES is set to YES.\n# Note: This option applies only to the class list, not to the alphabetical\n# list.\n# The default value is: NO.\n\nSORT_BY_SCOPE_NAME     = NO\n\n# If the STRICT_PROTO_MATCHING option is enabled and doxygen fails to do proper\n# type resolution of all parameters of a function it will reject a match between\n# the prototype and the implementation of a member function even if there is\n# only one candidate or it is obvious which candidate to choose by doing a\n# simple string match. By disabling STRICT_PROTO_MATCHING doxygen will still\n# accept a match between prototype and implementation in such cases.\n# The default value is: NO.\n\nSTRICT_PROTO_MATCHING  = NO\n\n# The GENERATE_TODOLIST tag can be used to enable (YES) or disable (NO) the todo\n# list. This list is created by putting \\todo commands in the documentation.\n# The default value is: YES.\n\nGENERATE_TODOLIST      = YES\n\n# The GENERATE_TESTLIST tag can be used to enable (YES) or disable (NO) the test\n# list. This list is created by putting \\test commands in the documentation.\n# The default value is: YES.\n\nGENERATE_TESTLIST      = YES\n\n# The GENERATE_BUGLIST tag can be used to enable (YES) or disable (NO) the bug\n# list. This list is created by putting \\bug commands in the documentation.\n# The default value is: YES.\n\nGENERATE_BUGLIST       = YES\n\n# The GENERATE_DEPRECATEDLIST tag can be used to enable (YES) or disable (NO)\n# the deprecated list. This list is created by putting \\deprecated commands in\n# the documentation.\n# The default value is: YES.\n\nGENERATE_DEPRECATEDLIST= YES\n\n# The ENABLED_SECTIONS tag can be used to enable conditional documentation\n# sections, marked by \\if <section_label> ... \\endif and \\cond <section_label>\n# ... \\endcond blocks.\n\nENABLED_SECTIONS       =\n\n# The MAX_INITIALIZER_LINES tag determines the maximum number of lines that the\n# initial value of a variable or macro / define can have for it to appear in the\n# documentation. If the initializer consists of more lines than specified here\n# it will be hidden. Use a value of 0 to hide initializers completely. The\n# appearance of the value of individual variables and macros / defines can be\n# controlled using \\showinitializer or \\hideinitializer command in the\n# documentation regardless of this setting.\n# Minimum value: 0, maximum value: 10000, default value: 30.\n\nMAX_INITIALIZER_LINES  = 30\n\n# Set the SHOW_USED_FILES tag to NO to disable the list of files generated at\n# the bottom of the documentation of classes and structs. If set to YES, the\n# list will mention the files that were used to generate the documentation.\n# The default value is: YES.\n\nSHOW_USED_FILES        = YES\n\n# Set the SHOW_FILES tag to NO to disable the generation of the Files page. This\n# will remove the Files entry from the Quick Index and from the Folder Tree View\n# (if specified).\n# The default value is: YES.\n\nSHOW_FILES             = YES\n\n# Set the SHOW_NAMESPACES tag to NO to disable the generation of the Namespaces\n# page. This will remove the Namespaces entry from the Quick Index and from the\n# Folder Tree View (if specified).\n# The default value is: YES.\n\nSHOW_NAMESPACES        = YES\n\n# The FILE_VERSION_FILTER tag can be used to specify a program or script that\n# doxygen should invoke to get the current version for each file (typically from\n# the version control system). Doxygen will invoke the program by executing (via\n# popen()) the command command input-file, where command is the value of the\n# FILE_VERSION_FILTER tag, and input-file is the name of an input file provided\n# by doxygen. Whatever the program writes to standard output is used as the file\n# version. For an example see the documentation.\n\nFILE_VERSION_FILTER    =\n\n# The LAYOUT_FILE tag can be used to specify a layout file which will be parsed\n# by doxygen. The layout file controls the global structure of the generated\n# output files in an output format independent way. To create the layout file\n# that represents doxygen's defaults, run doxygen with the -l option. You can\n# optionally specify a file name after the option, if omitted DoxygenLayout.xml\n# will be used as the name of the layout file.\n#\n# Note that if you run doxygen from a directory containing a file called\n# DoxygenLayout.xml, doxygen will parse it automatically even if the LAYOUT_FILE\n# tag is left empty.\n\nLAYOUT_FILE            =\n\n# The CITE_BIB_FILES tag can be used to specify one or more bib files containing\n# the reference definitions. This must be a list of .bib files. The .bib\n# extension is automatically appended if omitted. This requires the bibtex tool\n# to be installed. See also http://en.wikipedia.org/wiki/BibTeX for more info.\n# For LaTeX the style of the bibliography can be controlled using\n# LATEX_BIB_STYLE. To use this feature you need bibtex and perl available in the\n# search path. See also \\cite for info how to create references.\n\nCITE_BIB_FILES         =\n\n#---------------------------------------------------------------------------\n# Configuration options related to warning and progress messages\n#---------------------------------------------------------------------------\n\n# The QUIET tag can be used to turn on/off the messages that are generated to\n# standard output by doxygen. If QUIET is set to YES this implies that the\n# messages are off.\n# The default value is: NO.\n\nQUIET                  = NO\n\n# The WARNINGS tag can be used to turn on/off the warning messages that are\n# generated to standard error (stderr) by doxygen. If WARNINGS is set to YES\n# this implies that the warnings are on.\n#\n# Tip: Turn warnings on while writing the documentation.\n# The default value is: YES.\n\nWARNINGS               = YES\n\n# If the WARN_IF_UNDOCUMENTED tag is set to YES then doxygen will generate\n# warnings for undocumented members. If EXTRACT_ALL is set to YES then this flag\n# will automatically be disabled.\n# The default value is: YES.\n\nWARN_IF_UNDOCUMENTED   = YES\n\n# If the WARN_IF_DOC_ERROR tag is set to YES, doxygen will generate warnings for\n# potential errors in the documentation, such as not documenting some parameters\n# in a documented function, or documenting parameters that don't exist or using\n# markup commands wrongly.\n# The default value is: YES.\n\nWARN_IF_DOC_ERROR      = YES\n\n# This WARN_NO_PARAMDOC option can be enabled to get warnings for functions that\n# are documented, but have no documentation for their parameters or return\n# value. If set to NO, doxygen will only warn about wrong or incomplete\n# parameter documentation, but not about the absence of documentation.\n# The default value is: NO.\n\nWARN_NO_PARAMDOC       = NO\n\n# If the WARN_AS_ERROR tag is set to YES then doxygen will immediately stop when\n# a warning is encountered.\n# The default value is: NO.\n\nWARN_AS_ERROR          = NO\n\n# The WARN_FORMAT tag determines the format of the warning messages that doxygen\n# can produce. The string should contain the $file, $line, and $text tags, which\n# will be replaced by the file and line number from which the warning originated\n# and the warning text. Optionally the format may contain $version, which will\n# be replaced by the version of the file (if it could be obtained via\n# FILE_VERSION_FILTER)\n# The default value is: $file:$line: $text.\n\nWARN_FORMAT            = \"$file:$line: $text\"\n\n# The WARN_LOGFILE tag can be used to specify a file to which warning and error\n# messages should be written. If left blank the output is written to standard\n# error (stderr).\n\nWARN_LOGFILE           = \"DoxygenWarnings.txt\"\n\n#---------------------------------------------------------------------------\n# Configuration options related to the input files\n#---------------------------------------------------------------------------\n\n# The INPUT tag is used to specify the files and/or directories that contain\n# documented source files. You may enter file names like myfile.cpp or\n# directories like /usr/src/myproject. Separate the files or directories with\n# spaces. See also FILE_PATTERNS and EXTENSION_MAPPING\n# Note: If this tag is empty the current directory is searched.\n\nINPUT                  = @CMAKE_CURRENT_SOURCE_DIR@/libraries\n\n# This tag can be used to specify the character encoding of the source files\n# that doxygen parses. Internally doxygen uses the UTF-8 encoding. Doxygen uses\n# libiconv (or the iconv built into libc) for the transcoding. See the libiconv\n# documentation (see: http://www.gnu.org/software/libiconv) for the list of\n# possible encodings.\n# The default value is: UTF-8.\n\nINPUT_ENCODING         = UTF-8\n\n# If the value of the INPUT tag contains directories, you can use the\n# FILE_PATTERNS tag to specify one or more wildcard patterns (like *.cpp and\n# *.h) to filter out the source-files in the directories.\n#\n# Note that for custom extensions or not directly supported extensions you also\n# need to set EXTENSION_MAPPING for the extension otherwise the files are not\n# read by doxygen.\n#\n# If left blank the following patterns are tested:*.c, *.cc, *.cxx, *.cpp,\n# *.c++, *.java, *.ii, *.ixx, *.ipp, *.i++, *.inl, *.idl, *.ddl, *.odl, *.h,\n# *.hh, *.hxx, *.hpp, *.h++, *.cs, *.d, *.php, *.php4, *.php5, *.phtml, *.inc,\n# *.m, *.markdown, *.md, *.mm, *.dox, *.py, *.pyw, *.f90, *.f, *.for, *.tcl,\n# *.vhd, *.vhdl, *.ucf, *.qsf, *.as and *.js.\n\nFILE_PATTERNS          = *.c \\\n                         *.cc \\\n                         *.cxx \\\n                         *.cpp \\\n                         *.c++ \\\n                         *.java \\\n                         *.ii \\\n                         *.ixx \\\n                         *.ipp \\\n                         *.i++ \\\n                         *.inl \\\n                         *.idl \\\n                         *.ddl \\\n                         *.odl \\\n                         *.h \\\n                         *.hh \\\n                         *.hxx \\\n                         *.hpp \\\n                         *.h++ \\\n                         *.cs \\\n                         *.d \\\n                         *.php \\\n                         *.php4 \\\n                         *.php5 \\\n                         *.phtml \\\n                         *.inc \\\n                         *.m \\\n                         *.markdown \\\n                         *.md \\\n                         *.mm \\\n                         *.dox \\\n                         *.py \\\n                         *.pyw \\\n                         *.f90 \\\n                         *.f \\\n                         *.for \\\n                         *.tcl \\\n                         *.vhd \\\n                         *.vhdl \\\n                         *.ucf \\\n                         *.qsf \\\n                         *.as \\\n                         *.js\n\n# The RECURSIVE tag can be used to specify whether or not subdirectories should\n# be searched for input files as well.\n# The default value is: NO.\n\nRECURSIVE              = YES\n\n# The EXCLUDE tag can be used to specify files and/or directories that should be\n# excluded from the INPUT source files. This way you can easily exclude a\n# subdirectory from a directory tree whose root is specified with the INPUT tag.\n#\n# Note that relative paths are relative to the directory from which doxygen is\n# run.\n\nEXCLUDE                =\n\n# The EXCLUDE_SYMLINKS tag can be used to select whether or not files or\n# directories that are symbolic links (a Unix file system feature) are excluded\n# from the input.\n# The default value is: NO.\n\nEXCLUDE_SYMLINKS       = NO\n\n# If the value of the INPUT tag contains directories, you can use the\n# EXCLUDE_PATTERNS tag to specify one or more wildcard patterns to exclude\n# certain files from those directories.\n#\n# Note that the wildcards are matched against the file with absolute path, so to\n# exclude all test directories for example use the pattern */test/*\n\nEXCLUDE_PATTERNS       = */*/test/* \\\n                         */test/*\n\n# The EXCLUDE_SYMBOLS tag can be used to specify one or more symbol names\n# (namespaces, classes, functions, etc.) that should be excluded from the\n# output. The symbol name can be a fully qualified name, a word, or if the\n# wildcard * is used, a substring. Examples: ANamespace, AClass,\n# AClass::ANamespace, ANamespace::*Test\n#\n# Note that the wildcards are matched against the file with absolute path, so to\n# exclude all test directories use the pattern */test/*\n\nEXCLUDE_SYMBOLS        =\n\n# The EXAMPLE_PATH tag can be used to specify one or more files or directories\n# that contain example code fragments that are included (see the \\include\n# command).\n\nEXAMPLE_PATH           =\n\n# If the value of the EXAMPLE_PATH tag contains directories, you can use the\n# EXAMPLE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp and\n# *.h) to filter out the source-files in the directories. If left blank all\n# files are included.\n\nEXAMPLE_PATTERNS       = *\n\n# If the EXAMPLE_RECURSIVE tag is set to YES then subdirectories will be\n# searched for input files to be used with the \\include or \\dontinclude commands\n# irrespective of the value of the RECURSIVE tag.\n# The default value is: NO.\n\nEXAMPLE_RECURSIVE      = NO\n\n# The IMAGE_PATH tag can be used to specify one or more files or directories\n# that contain images that are to be included in the documentation (see the\n# \\image command).\n\nIMAGE_PATH             =\n\n# The INPUT_FILTER tag can be used to specify a program that doxygen should\n# invoke to filter for each input file. Doxygen will invoke the filter program\n# by executing (via popen()) the command:\n#\n# <filter> <input-file>\n#\n# where <filter> is the value of the INPUT_FILTER tag, and <input-file> is the\n# name of an input file. Doxygen will then use the output that the filter\n# program writes to standard output. If FILTER_PATTERNS is specified, this tag\n# will be ignored.\n#\n# Note that the filter must not add or remove lines; it is applied before the\n# code is scanned, but not when the output code is generated. If lines are added\n# or removed, the anchors will not be placed correctly.\n#\n# Note that for custom extensions or not directly supported extensions you also\n# need to set EXTENSION_MAPPING for the extension otherwise the files are not\n# properly processed by doxygen.\n\nINPUT_FILTER           =\n\n# The FILTER_PATTERNS tag can be used to specify filters on a per file pattern\n# basis. Doxygen will compare the file name with each pattern and apply the\n# filter if there is a match. The filters are a list of the form: pattern=filter\n# (like *.cpp=my_cpp_filter). See INPUT_FILTER for further information on how\n# filters are used. If the FILTER_PATTERNS tag is empty or if none of the\n# patterns match the file name, INPUT_FILTER is applied.\n#\n# Note that for custom extensions or not directly supported extensions you also\n# need to set EXTENSION_MAPPING for the extension otherwise the files are not\n# properly processed by doxygen.\n\nFILTER_PATTERNS        =\n\n# If the FILTER_SOURCE_FILES tag is set to YES, the input filter (if set using\n# INPUT_FILTER) will also be used to filter the input files that are used for\n# producing the source files to browse (i.e. when SOURCE_BROWSER is set to YES).\n# The default value is: NO.\n\nFILTER_SOURCE_FILES    = NO\n\n# The FILTER_SOURCE_PATTERNS tag can be used to specify source filters per file\n# pattern. A pattern will override the setting for FILTER_PATTERN (if any) and\n# it is also possible to disable source filtering for a specific pattern using\n# *.ext= (so without naming a filter).\n# This tag requires that the tag FILTER_SOURCE_FILES is set to YES.\n\nFILTER_SOURCE_PATTERNS =\n\n# If the USE_MDFILE_AS_MAINPAGE tag refers to the name of a markdown file that\n# is part of the input, its contents will be placed on the main page\n# (index.html). This can be useful if you have a project on for instance GitHub\n# and want to reuse the introduction page also for the doxygen output.\n\nUSE_MDFILE_AS_MAINPAGE =\n\n#---------------------------------------------------------------------------\n# Configuration options related to source browsing\n#---------------------------------------------------------------------------\n\n# If the SOURCE_BROWSER tag is set to YES then a list of source files will be\n# generated. Documented entities will be cross-referenced with these sources.\n#\n# Note: To get rid of all source code in the generated output, make sure that\n# also VERBATIM_HEADERS is set to NO.\n# The default value is: NO.\n\nSOURCE_BROWSER         = NO\n\n# Setting the INLINE_SOURCES tag to YES will include the body of functions,\n# classes and enums directly into the documentation.\n# The default value is: NO.\n\nINLINE_SOURCES         = NO\n\n# Setting the STRIP_CODE_COMMENTS tag to YES will instruct doxygen to hide any\n# special comment blocks from generated source code fragments. Normal C, C++ and\n# Fortran comments will always remain visible.\n# The default value is: YES.\n\nSTRIP_CODE_COMMENTS    = YES\n\n# If the REFERENCED_BY_RELATION tag is set to YES then for each documented\n# function all documented functions referencing it will be listed.\n# The default value is: NO.\n\nREFERENCED_BY_RELATION = NO\n\n# If the REFERENCES_RELATION tag is set to YES then for each documented function\n# all documented entities called/used by that function will be listed.\n# The default value is: NO.\n\nREFERENCES_RELATION    = NO\n\n# If the REFERENCES_LINK_SOURCE tag is set to YES and SOURCE_BROWSER tag is set\n# to YES then the hyperlinks from functions in REFERENCES_RELATION and\n# REFERENCED_BY_RELATION lists will link to the source code. Otherwise they will\n# link to the documentation.\n# The default value is: YES.\n\nREFERENCES_LINK_SOURCE = YES\n\n# If SOURCE_TOOLTIPS is enabled (the default) then hovering a hyperlink in the\n# source code will show a tooltip with additional information such as prototype,\n# brief description and links to the definition and documentation. Since this\n# will make the HTML file larger and loading of large files a bit slower, you\n# can opt to disable this feature.\n# The default value is: YES.\n# This tag requires that the tag SOURCE_BROWSER is set to YES.\n\nSOURCE_TOOLTIPS        = YES\n\n# If the USE_HTAGS tag is set to YES then the references to source code will\n# point to the HTML generated by the htags(1) tool instead of doxygen built-in\n# source browser. The htags tool is part of GNU's global source tagging system\n# (see http://www.gnu.org/software/global/global.html). You will need version\n# 4.8.6 or higher.\n#\n# To use it do the following:\n# - Install the latest version of global\n# - Enable SOURCE_BROWSER and USE_HTAGS in the config file\n# - Make sure the INPUT points to the root of the source tree\n# - Run doxygen as normal\n#\n# Doxygen will invoke htags (and that will in turn invoke gtags), so these\n# tools must be available from the command line (i.e. in the search path).\n#\n# The result: instead of the source browser generated by doxygen, the links to\n# source code will now point to the output of htags.\n# The default value is: NO.\n# This tag requires that the tag SOURCE_BROWSER is set to YES.\n\nUSE_HTAGS              = NO\n\n# If the VERBATIM_HEADERS tag is set the YES then doxygen will generate a\n# verbatim copy of the header file for each class for which an include is\n# specified. Set to NO to disable this.\n# See also: Section \\class.\n# The default value is: YES.\n\nVERBATIM_HEADERS       = YES\n\n# If the CLANG_ASSISTED_PARSING tag is set to YES then doxygen will use the\n# clang parser (see: http://clang.llvm.org/) for more accurate parsing at the\n# cost of reduced performance. This can be particularly helpful with template\n# rich C++ code for which doxygen's built-in parser lacks the necessary type\n# information.\n# Note: The availability of this option depends on whether or not doxygen was\n# generated with the -Duse-libclang=ON option for CMake.\n# The default value is: NO.\n\nCLANG_ASSISTED_PARSING = NO\n\n# If clang assisted parsing is enabled you can provide the compiler with command\n# line options that you would normally use when invoking the compiler. Note that\n# the include paths will already be set by doxygen for the files and directories\n# specified with INPUT and INCLUDE_PATH.\n# This tag requires that the tag CLANG_ASSISTED_PARSING is set to YES.\n\nCLANG_OPTIONS          =\n\n#---------------------------------------------------------------------------\n# Configuration options related to the alphabetical class index\n#---------------------------------------------------------------------------\n\n# If the ALPHABETICAL_INDEX tag is set to YES, an alphabetical index of all\n# compounds will be generated. Enable this if the project contains a lot of\n# classes, structs, unions or interfaces.\n# The default value is: YES.\n\nALPHABETICAL_INDEX     = YES\n\n# The COLS_IN_ALPHA_INDEX tag can be used to specify the number of columns in\n# which the alphabetical index list will be split.\n# Minimum value: 1, maximum value: 20, default value: 5.\n# This tag requires that the tag ALPHABETICAL_INDEX is set to YES.\n\nCOLS_IN_ALPHA_INDEX    = 5\n\n# In case all classes in a project start with a common prefix, all classes will\n# be put under the same header in the alphabetical index. The IGNORE_PREFIX tag\n# can be used to specify a prefix (or a list of prefixes) that should be ignored\n# while generating the index headers.\n# This tag requires that the tag ALPHABETICAL_INDEX is set to YES.\n\nIGNORE_PREFIX          =\n\n#---------------------------------------------------------------------------\n# Configuration options related to the HTML output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_HTML tag is set to YES, doxygen will generate HTML output\n# The default value is: YES.\n\nGENERATE_HTML          = YES\n\n# The HTML_OUTPUT tag is used to specify where the HTML docs will be put. If a\n# relative path is entered the value of OUTPUT_DIRECTORY will be put in front of\n# it.\n# The default directory is: html.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_OUTPUT            = html\n\n# The HTML_FILE_EXTENSION tag can be used to specify the file extension for each\n# generated HTML page (for example: .htm, .php, .asp).\n# The default value is: .html.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_FILE_EXTENSION    = .html\n\n# The HTML_HEADER tag can be used to specify a user-defined HTML header file for\n# each generated HTML page. If the tag is left blank doxygen will generate a\n# standard header.\n#\n# To get valid HTML the header file that includes any scripts and style sheets\n# that doxygen needs, which is dependent on the configuration options used (e.g.\n# the setting GENERATE_TREEVIEW). It is highly recommended to start with a\n# default header using\n# doxygen -w html new_header.html new_footer.html new_stylesheet.css\n# YourConfigFile\n# and then modify the file new_header.html. See also section \"Doxygen usage\"\n# for information on how to generate the default header that doxygen normally\n# uses.\n# Note: The header is subject to change so you typically have to regenerate the\n# default header when upgrading to a newer version of doxygen. For a description\n# of the possible markers and block names see the documentation.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_HEADER            =\n\n# The HTML_FOOTER tag can be used to specify a user-defined HTML footer for each\n# generated HTML page. If the tag is left blank doxygen will generate a standard\n# footer. See HTML_HEADER for more information on how to generate a default\n# footer and what special commands can be used inside the footer. See also\n# section \"Doxygen usage\" for information on how to generate the default footer\n# that doxygen normally uses.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_FOOTER            =\n\n# The HTML_STYLESHEET tag can be used to specify a user-defined cascading style\n# sheet that is used by each HTML page. It can be used to fine-tune the look of\n# the HTML output. If left blank doxygen will generate a default style sheet.\n# See also section \"Doxygen usage\" for information on how to generate the style\n# sheet that doxygen normally uses.\n# Note: It is recommended to use HTML_EXTRA_STYLESHEET instead of this tag, as\n# it is more robust and this tag (HTML_STYLESHEET) will in the future become\n# obsolete.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_STYLESHEET        =\n\n# The HTML_EXTRA_STYLESHEET tag can be used to specify additional user-defined\n# cascading style sheets that are included after the standard style sheets\n# created by doxygen. Using this option one can overrule certain style aspects.\n# This is preferred over using HTML_STYLESHEET since it does not replace the\n# standard style sheet and is therefore more robust against future updates.\n# Doxygen will copy the style sheet files to the output directory.\n# Note: The order of the extra style sheet files is of importance (e.g. the last\n# style sheet in the list overrules the setting of the previous ones in the\n# list). For an example see the documentation.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_EXTRA_STYLESHEET  =\n\n# The HTML_EXTRA_FILES tag can be used to specify one or more extra images or\n# other source files which should be copied to the HTML output directory. Note\n# that these files will be copied to the base HTML output directory. Use the\n# $relpath^ marker in the HTML_HEADER and/or HTML_FOOTER files to load these\n# files. In the HTML_STYLESHEET file, use the file name only. Also note that the\n# files will be copied as-is; there are no commands or markers available.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_EXTRA_FILES       =\n\n# The HTML_COLORSTYLE_HUE tag controls the color of the HTML output. Doxygen\n# will adjust the colors in the style sheet and background images according to\n# this color. Hue is specified as an angle on a colorwheel, see\n# http://en.wikipedia.org/wiki/Hue for more information. For instance the value\n# 0 represents red, 60 is yellow, 120 is green, 180 is cyan, 240 is blue, 300\n# purple, and 360 is red again.\n# Minimum value: 0, maximum value: 359, default value: 220.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_COLORSTYLE_HUE    = 220\n\n# The HTML_COLORSTYLE_SAT tag controls the purity (or saturation) of the colors\n# in the HTML output. For a value of 0 the output will use grayscales only. A\n# value of 255 will produce the most vivid colors.\n# Minimum value: 0, maximum value: 255, default value: 100.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_COLORSTYLE_SAT    = 100\n\n# The HTML_COLORSTYLE_GAMMA tag controls the gamma correction applied to the\n# luminance component of the colors in the HTML output. Values below 100\n# gradually make the output lighter, whereas values above 100 make the output\n# darker. The value divided by 100 is the actual gamma applied, so 80 represents\n# a gamma of 0.8, The value 220 represents a gamma of 2.2, and 100 does not\n# change the gamma.\n# Minimum value: 40, maximum value: 240, default value: 80.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_COLORSTYLE_GAMMA  = 80\n\n# If the HTML_TIMESTAMP tag is set to YES then the footer of each generated HTML\n# page will contain the date and time when the page was generated. Setting this\n# to YES can help to show when doxygen was last run and thus if the\n# documentation is up to date.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_TIMESTAMP         = NO\n\n# If the HTML_DYNAMIC_SECTIONS tag is set to YES then the generated HTML\n# documentation will contain sections that can be hidden and shown after the\n# page has loaded.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_DYNAMIC_SECTIONS  = NO\n\n# With HTML_INDEX_NUM_ENTRIES one can control the preferred number of entries\n# shown in the various tree structured indices initially; the user can expand\n# and collapse entries dynamically later on. Doxygen will expand the tree to\n# such a level that at most the specified number of entries are visible (unless\n# a fully collapsed tree already exceeds this amount). So setting the number of\n# entries 1 will produce a full collapsed tree by default. 0 is a special value\n# representing an infinite number of entries and will result in a full expanded\n# tree by default.\n# Minimum value: 0, maximum value: 9999, default value: 100.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_INDEX_NUM_ENTRIES = 100\n\n# If the GENERATE_DOCSET tag is set to YES, additional index files will be\n# generated that can be used as input for Apple's Xcode 3 integrated development\n# environment (see: http://developer.apple.com/tools/xcode/), introduced with\n# OSX 10.5 (Leopard). To create a documentation set, doxygen will generate a\n# Makefile in the HTML output directory. Running make will produce the docset in\n# that directory and running make install will install the docset in\n# ~/Library/Developer/Shared/Documentation/DocSets so that Xcode will find it at\n# startup. See http://developer.apple.com/tools/creatingdocsetswithdoxygen.html\n# for more information.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nGENERATE_DOCSET        = NO\n\n# This tag determines the name of the docset feed. A documentation feed provides\n# an umbrella under which multiple documentation sets from a single provider\n# (such as a company or product suite) can be grouped.\n# The default value is: Doxygen generated docs.\n# This tag requires that the tag GENERATE_DOCSET is set to YES.\n\nDOCSET_FEEDNAME        = \"Doxygen generated docs\"\n\n# This tag specifies a string that should uniquely identify the documentation\n# set bundle. This should be a reverse domain-name style string, e.g.\n# com.mycompany.MyDocSet. Doxygen will append .docset to the name.\n# The default value is: org.doxygen.Project.\n# This tag requires that the tag GENERATE_DOCSET is set to YES.\n\nDOCSET_BUNDLE_ID       = com.microsoft.ell\n\n# The DOCSET_PUBLISHER_ID tag specifies a string that should uniquely identify\n# the documentation publisher. This should be a reverse domain-name style\n# string, e.g. com.mycompany.MyDocSet.documentation.\n# The default value is: org.doxygen.Publisher.\n# This tag requires that the tag GENERATE_DOCSET is set to YES.\n\nDOCSET_PUBLISHER_ID    = com.microsoft.ell\n\n# The DOCSET_PUBLISHER_NAME tag identifies the documentation publisher.\n# The default value is: Publisher.\n# This tag requires that the tag GENERATE_DOCSET is set to YES.\n\nDOCSET_PUBLISHER_NAME  = Microsoft Corporation\n\n# If the GENERATE_HTMLHELP tag is set to YES then doxygen generates three\n# additional HTML index files: index.hhp, index.hhc, and index.hhk. The\n# index.hhp is a project file that can be read by Microsoft's HTML Help Workshop\n# (see: http://www.microsoft.com/en-us/download/details.aspx?id=21138) on\n# Windows.\n#\n# The HTML Help Workshop contains a compiler that can convert all HTML output\n# generated by doxygen into a single compiled HTML file (.chm). Compiled HTML\n# files are now used as the Windows 98 help format, and will replace the old\n# Windows help format (.hlp) on all Windows platforms in the future. Compressed\n# HTML files also contain an index, a table of contents, and you can search for\n# words in the documentation. The HTML workshop also contains a viewer for\n# compressed HTML files.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nGENERATE_HTMLHELP      = NO\n\n# The CHM_FILE tag can be used to specify the file name of the resulting .chm\n# file. You can add a path in front of the file if the result should not be\n# written to the html output directory.\n# This tag requires that the tag GENERATE_HTMLHELP is set to YES.\n\nCHM_FILE               =\n\n# The HHC_LOCATION tag can be used to specify the location (absolute path\n# including file name) of the HTML help compiler (hhc.exe). If non-empty,\n# doxygen will try to run the HTML help compiler on the generated index.hhp.\n# The file has to be specified with full path.\n# This tag requires that the tag GENERATE_HTMLHELP is set to YES.\n\nHHC_LOCATION           =\n\n# The GENERATE_CHI flag controls if a separate .chi index file is generated\n# (YES) or that it should be included in the master .chm file (NO).\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTMLHELP is set to YES.\n\nGENERATE_CHI           = NO\n\n# The CHM_INDEX_ENCODING is used to encode HtmlHelp index (hhk), content (hhc)\n# and project file content.\n# This tag requires that the tag GENERATE_HTMLHELP is set to YES.\n\nCHM_INDEX_ENCODING     =\n\n# The BINARY_TOC flag controls whether a binary table of contents is generated\n# (YES) or a normal table of contents (NO) in the .chm file. Furthermore it\n# enables the Previous and Next buttons.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTMLHELP is set to YES.\n\nBINARY_TOC             = NO\n\n# The TOC_EXPAND flag can be set to YES to add extra items for group members to\n# the table of contents of the HTML help documentation and to the tree view.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTMLHELP is set to YES.\n\nTOC_EXPAND             = NO\n\n# If the GENERATE_QHP tag is set to YES and both QHP_NAMESPACE and\n# QHP_VIRTUAL_FOLDER are set, an additional index file will be generated that\n# can be used as input for Qt's qhelpgenerator to generate a Qt Compressed Help\n# (.qch) of the generated HTML documentation.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nGENERATE_QHP           = NO\n\n# If the QHG_LOCATION tag is specified, the QCH_FILE tag can be used to specify\n# the file name of the resulting .qch file. The path specified is relative to\n# the HTML output folder.\n# This tag requires that the tag GENERATE_QHP is set to YES.\n\nQCH_FILE               =\n\n# The QHP_NAMESPACE tag specifies the namespace to use when generating Qt Help\n# Project output. For more information please see Qt Help Project / Namespace\n# (see: http://qt-project.org/doc/qt-4.8/qthelpproject.html#namespace).\n# The default value is: org.doxygen.Project.\n# This tag requires that the tag GENERATE_QHP is set to YES.\n\nQHP_NAMESPACE          = org.doxygen.Project\n\n# The QHP_VIRTUAL_FOLDER tag specifies the namespace to use when generating Qt\n# Help Project output. For more information please see Qt Help Project / Virtual\n# Folders (see: http://qt-project.org/doc/qt-4.8/qthelpproject.html#virtual-\n# folders).\n# The default value is: doc.\n# This tag requires that the tag GENERATE_QHP is set to YES.\n\nQHP_VIRTUAL_FOLDER     = doc\n\n# If the QHP_CUST_FILTER_NAME tag is set, it specifies the name of a custom\n# filter to add. For more information please see Qt Help Project / Custom\n# Filters (see: http://qt-project.org/doc/qt-4.8/qthelpproject.html#custom-\n# filters).\n# This tag requires that the tag GENERATE_QHP is set to YES.\n\nQHP_CUST_FILTER_NAME   =\n\n# The QHP_CUST_FILTER_ATTRS tag specifies the list of the attributes of the\n# custom filter to add. For more information please see Qt Help Project / Custom\n# Filters (see: http://qt-project.org/doc/qt-4.8/qthelpproject.html#custom-\n# filters).\n# This tag requires that the tag GENERATE_QHP is set to YES.\n\nQHP_CUST_FILTER_ATTRS  =\n\n# The QHP_SECT_FILTER_ATTRS tag specifies the list of the attributes this\n# project's filter section matches. Qt Help Project / Filter Attributes (see:\n# http://qt-project.org/doc/qt-4.8/qthelpproject.html#filter-attributes).\n# This tag requires that the tag GENERATE_QHP is set to YES.\n\nQHP_SECT_FILTER_ATTRS  =\n\n# The QHG_LOCATION tag can be used to specify the location of Qt's\n# qhelpgenerator. If non-empty doxygen will try to run qhelpgenerator on the\n# generated .qhp file.\n# This tag requires that the tag GENERATE_QHP is set to YES.\n\nQHG_LOCATION           =\n\n# If the GENERATE_ECLIPSEHELP tag is set to YES, additional index files will be\n# generated, together with the HTML files, they form an Eclipse help plugin. To\n# install this plugin and make it available under the help contents menu in\n# Eclipse, the contents of the directory containing the HTML and XML files needs\n# to be copied into the plugins directory of eclipse. The name of the directory\n# within the plugins directory should be the same as the ECLIPSE_DOC_ID value.\n# After copying Eclipse needs to be restarted before the help appears.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nGENERATE_ECLIPSEHELP   = NO\n\n# A unique identifier for the Eclipse help plugin. When installing the plugin\n# the directory name containing the HTML and XML files should also have this\n# name. Each documentation set should have its own identifier.\n# The default value is: org.doxygen.Project.\n# This tag requires that the tag GENERATE_ECLIPSEHELP is set to YES.\n\nECLIPSE_DOC_ID         = org.doxygen.Project\n\n# If you want full control over the layout of the generated HTML pages it might\n# be necessary to disable the index and replace it with your own. The\n# DISABLE_INDEX tag can be used to turn on/off the condensed index (tabs) at top\n# of each HTML page. A value of NO enables the index and the value YES disables\n# it. Since the tabs in the index contain the same information as the navigation\n# tree, you can set this option to YES if you also set GENERATE_TREEVIEW to YES.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nDISABLE_INDEX          = NO\n\n# The GENERATE_TREEVIEW tag is used to specify whether a tree-like index\n# structure should be generated to display hierarchical information. If the tag\n# value is set to YES, a side panel will be generated containing a tree-like\n# index structure (just like the one that is generated for HTML Help). For this\n# to work a browser that supports JavaScript, DHTML, CSS and frames is required\n# (i.e. any modern browser). Windows users are probably better off using the\n# HTML help feature. Via custom style sheets (see HTML_EXTRA_STYLESHEET) one can\n# further fine-tune the look of the index. As an example, the default style\n# sheet generated by doxygen has an example that shows how to put an image at\n# the root of the tree instead of the PROJECT_NAME. Since the tree basically has\n# the same information as the tab index, you could consider setting\n# DISABLE_INDEX to YES when enabling this option.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nGENERATE_TREEVIEW      = NO\n\n# The ENUM_VALUES_PER_LINE tag can be used to set the number of enum values that\n# doxygen will group on one line in the generated HTML documentation.\n#\n# Note that a value of 0 will completely suppress the enum values from appearing\n# in the overview section.\n# Minimum value: 0, maximum value: 20, default value: 4.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nENUM_VALUES_PER_LINE   = 4\n\n# If the treeview is enabled (see GENERATE_TREEVIEW) then this tag can be used\n# to set the initial width (in pixels) of the frame in which the tree is shown.\n# Minimum value: 0, maximum value: 1500, default value: 250.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nTREEVIEW_WIDTH         = 250\n\n# If the EXT_LINKS_IN_WINDOW option is set to YES, doxygen will open links to\n# external symbols imported via tag files in a separate window.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nEXT_LINKS_IN_WINDOW    = NO\n\n# Use this tag to change the font size of LaTeX formulas included as images in\n# the HTML documentation. When you change the font size after a successful\n# doxygen run you need to manually remove any form_*.png images from the HTML\n# output directory to force them to be regenerated.\n# Minimum value: 8, maximum value: 50, default value: 10.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nFORMULA_FONTSIZE       = 10\n\n# Use the FORMULA_TRANPARENT tag to determine whether or not the images\n# generated for formulas are transparent PNGs. Transparent PNGs are not\n# supported properly for IE 6.0, but are supported on all modern browsers.\n#\n# Note that when changing this option you need to delete any form_*.png files in\n# the HTML output directory before the changes have effect.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nFORMULA_TRANSPARENT    = YES\n\n# Enable the USE_MATHJAX option to render LaTeX formulas using MathJax (see\n# http://www.mathjax.org) which uses client side Javascript for the rendering\n# instead of using pre-rendered bitmaps. Use this if you do not have LaTeX\n# installed or if you want to formulas look prettier in the HTML output. When\n# enabled you may also need to install MathJax separately and configure the path\n# to it using the MATHJAX_RELPATH option.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nUSE_MATHJAX            = YES\n\n# When MathJax is enabled you can set the default output format to be used for\n# the MathJax output. See the MathJax site (see:\n# http://docs.mathjax.org/en/latest/output.html) for more details.\n# Possible values are: HTML-CSS (which is slower, but has the best\n# compatibility), NativeMML (i.e. MathML) and SVG.\n# The default value is: HTML-CSS.\n# This tag requires that the tag USE_MATHJAX is set to YES.\n\nMATHJAX_FORMAT         = HTML-CSS\n\n# When MathJax is enabled you need to specify the location relative to the HTML\n# output directory using the MATHJAX_RELPATH option. The destination directory\n# should contain the MathJax.js script. For instance, if the mathjax directory\n# is located at the same level as the HTML output directory, then\n# MATHJAX_RELPATH should be ../mathjax. The default value points to the MathJax\n# Content Delivery Network so you can quickly see the result without installing\n# MathJax. However, it is strongly recommended to install a local copy of\n# MathJax from http://www.mathjax.org before deployment.\n# The default value is: http://cdn.mathjax.org/mathjax/latest.\n# This tag requires that the tag USE_MATHJAX is set to YES.\n\nMATHJAX_RELPATH        = http://cdn.mathjax.org/mathjax/latest\n\n# The MATHJAX_EXTENSIONS tag can be used to specify one or more MathJax\n# extension names that should be enabled during MathJax rendering. For example\n# MATHJAX_EXTENSIONS = TeX/AMSmath TeX/AMSsymbols\n# This tag requires that the tag USE_MATHJAX is set to YES.\n\nMATHJAX_EXTENSIONS     =\n\n# The MATHJAX_CODEFILE tag can be used to specify a file with javascript pieces\n# of code that will be used on startup of the MathJax code. See the MathJax site\n# (see: http://docs.mathjax.org/en/latest/output.html) for more details. For an\n# example see the documentation.\n# This tag requires that the tag USE_MATHJAX is set to YES.\n\nMATHJAX_CODEFILE       =\n\n# When the SEARCHENGINE tag is enabled doxygen will generate a search box for\n# the HTML output. The underlying search engine uses javascript and DHTML and\n# should work on any modern browser. Note that when using HTML help\n# (GENERATE_HTMLHELP), Qt help (GENERATE_QHP), or docsets (GENERATE_DOCSET)\n# there is already a search function so this one should typically be disabled.\n# For large projects the javascript based search engine can be slow, then\n# enabling SERVER_BASED_SEARCH may provide a better solution. It is possible to\n# search using the keyboard; to jump to the search box use <access key> + S\n# (what the <access key> is depends on the OS and browser, but it is typically\n# <CTRL>, <ALT>/<option>, or both). Inside the search box use the <cursor down\n# key> to jump into the search results window, the results can be navigated\n# using the <cursor keys>. Press <Enter> to select an item or <escape> to cancel\n# the search. The filter options can be selected when the cursor is inside the\n# search box by pressing <Shift>+<cursor down>. Also here use the <cursor keys>\n# to select a filter and <Enter> or <escape> to activate or cancel the filter\n# option.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nSEARCHENGINE           = YES\n\n# When the SERVER_BASED_SEARCH tag is enabled the search engine will be\n# implemented using a web server instead of a web client using Javascript. There\n# are two flavors of web server based searching depending on the EXTERNAL_SEARCH\n# setting. When disabled, doxygen will generate a PHP script for searching and\n# an index file used by the script. When EXTERNAL_SEARCH is enabled the indexing\n# and searching needs to be provided by external tools. See the section\n# \"External Indexing and Searching\" for details.\n# The default value is: NO.\n# This tag requires that the tag SEARCHENGINE is set to YES.\n\nSERVER_BASED_SEARCH    = NO\n\n# When EXTERNAL_SEARCH tag is enabled doxygen will no longer generate the PHP\n# script for searching. Instead the search results are written to an XML file\n# which needs to be processed by an external indexer. Doxygen will invoke an\n# external search engine pointed to by the SEARCHENGINE_URL option to obtain the\n# search results.\n#\n# Doxygen ships with an example indexer (doxyindexer) and search engine\n# (doxysearch.cgi) which are based on the open source search engine library\n# Xapian (see: http://xapian.org/).\n#\n# See the section \"External Indexing and Searching\" for details.\n# The default value is: NO.\n# This tag requires that the tag SEARCHENGINE is set to YES.\n\nEXTERNAL_SEARCH        = NO\n\n# The SEARCHENGINE_URL should point to a search engine hosted by a web server\n# which will return the search results when EXTERNAL_SEARCH is enabled.\n#\n# Doxygen ships with an example indexer (doxyindexer) and search engine\n# (doxysearch.cgi) which are based on the open source search engine library\n# Xapian (see: http://xapian.org/). See the section \"External Indexing and\n# Searching\" for details.\n# This tag requires that the tag SEARCHENGINE is set to YES.\n\nSEARCHENGINE_URL       =\n\n# When SERVER_BASED_SEARCH and EXTERNAL_SEARCH are both enabled the unindexed\n# search data is written to a file for indexing by an external tool. With the\n# SEARCHDATA_FILE tag the name of this file can be specified.\n# The default file is: searchdata.xml.\n# This tag requires that the tag SEARCHENGINE is set to YES.\n\nSEARCHDATA_FILE        = searchdata.xml\n\n# When SERVER_BASED_SEARCH and EXTERNAL_SEARCH are both enabled the\n# EXTERNAL_SEARCH_ID tag can be used as an identifier for the project. This is\n# useful in combination with EXTRA_SEARCH_MAPPINGS to search through multiple\n# projects and redirect the results back to the right project.\n# This tag requires that the tag SEARCHENGINE is set to YES.\n\nEXTERNAL_SEARCH_ID     =\n\n# The EXTRA_SEARCH_MAPPINGS tag can be used to enable searching through doxygen\n# projects other than the one defined by this configuration file, but that are\n# all added to the same external search index. Each project needs to have a\n# unique id set via EXTERNAL_SEARCH_ID. The search mapping then maps the id of\n# to a relative location where the documentation can be found. The format is:\n# EXTRA_SEARCH_MAPPINGS = tagname1=loc1 tagname2=loc2 ...\n# This tag requires that the tag SEARCHENGINE is set to YES.\n\nEXTRA_SEARCH_MAPPINGS  =\n\n#---------------------------------------------------------------------------\n# Configuration options related to the LaTeX output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_LATEX tag is set to YES, doxygen will generate LaTeX output.\n# The default value is: YES.\n\nGENERATE_LATEX         = NO\n\n# The LATEX_OUTPUT tag is used to specify where the LaTeX docs will be put. If a\n# relative path is entered the value of OUTPUT_DIRECTORY will be put in front of\n# it.\n# The default directory is: latex.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_OUTPUT           = latex\n\n# The LATEX_CMD_NAME tag can be used to specify the LaTeX command name to be\n# invoked.\n#\n# Note that when enabling USE_PDFLATEX this option is only used for generating\n# bitmaps for formulas in the HTML output, but not in the Makefile that is\n# written to the output directory.\n# The default file is: latex.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_CMD_NAME         = latex\n\n# The MAKEINDEX_CMD_NAME tag can be used to specify the command name to generate\n# index for LaTeX.\n# The default file is: makeindex.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nMAKEINDEX_CMD_NAME     = makeindex\n\n# If the COMPACT_LATEX tag is set to YES, doxygen generates more compact LaTeX\n# documents. This may be useful for small projects and may help to save some\n# trees in general.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nCOMPACT_LATEX          = NO\n\n# The PAPER_TYPE tag can be used to set the paper type that is used by the\n# printer.\n# Possible values are: a4 (210 x 297 mm), letter (8.5 x 11 inches), legal (8.5 x\n# 14 inches) and executive (7.25 x 10.5 inches).\n# The default value is: a4.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nPAPER_TYPE             = a4\n\n# The EXTRA_PACKAGES tag can be used to specify one or more LaTeX package names\n# that should be included in the LaTeX output. The package can be specified just\n# by its name or with the correct syntax as to be used with the LaTeX\n# \\usepackage command. To get the times font for instance you can specify :\n# EXTRA_PACKAGES=times or EXTRA_PACKAGES={times}\n# To use the option intlimits with the amsmath package you can specify:\n# EXTRA_PACKAGES=[intlimits]{amsmath}\n# If left blank no extra packages will be included.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nEXTRA_PACKAGES         =\n\n# The LATEX_HEADER tag can be used to specify a personal LaTeX header for the\n# generated LaTeX document. The header should contain everything until the first\n# chapter. If it is left blank doxygen will generate a standard header. See\n# section \"Doxygen usage\" for information on how to let doxygen write the\n# default header to a separate file.\n#\n# Note: Only use a user-defined header if you know what you are doing! The\n# following commands have a special meaning inside the header: $title,\n# $datetime, $date, $doxygenversion, $projectname, $projectnumber,\n# $projectbrief, $projectlogo. Doxygen will replace $title with the empty\n# string, for the replacement values of the other commands the user is referred\n# to HTML_HEADER.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_HEADER           =\n\n# The LATEX_FOOTER tag can be used to specify a personal LaTeX footer for the\n# generated LaTeX document. The footer should contain everything after the last\n# chapter. If it is left blank doxygen will generate a standard footer. See\n# LATEX_HEADER for more information on how to generate a default footer and what\n# special commands can be used inside the footer.\n#\n# Note: Only use a user-defined footer if you know what you are doing!\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_FOOTER           =\n\n# The LATEX_EXTRA_STYLESHEET tag can be used to specify additional user-defined\n# LaTeX style sheets that are included after the standard style sheets created\n# by doxygen. Using this option one can overrule certain style aspects. Doxygen\n# will copy the style sheet files to the output directory.\n# Note: The order of the extra style sheet files is of importance (e.g. the last\n# style sheet in the list overrules the setting of the previous ones in the\n# list).\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_EXTRA_STYLESHEET =\n\n# The LATEX_EXTRA_FILES tag can be used to specify one or more extra images or\n# other source files which should be copied to the LATEX_OUTPUT output\n# directory. Note that the files will be copied as-is; there are no commands or\n# markers available.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_EXTRA_FILES      =\n\n# If the PDF_HYPERLINKS tag is set to YES, the LaTeX that is generated is\n# prepared for conversion to PDF (using ps2pdf or pdflatex). The PDF file will\n# contain links (just like the HTML output) instead of page references. This\n# makes the output suitable for online browsing using a PDF viewer.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nPDF_HYPERLINKS         = YES\n\n# If the USE_PDFLATEX tag is set to YES, doxygen will use pdflatex to generate\n# the PDF file directly from the LaTeX files. Set this option to YES, to get a\n# higher quality PDF documentation.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nUSE_PDFLATEX           = YES\n\n# If the LATEX_BATCHMODE tag is set to YES, doxygen will add the \\batchmode\n# command to the generated LaTeX files. This will instruct LaTeX to keep running\n# if errors occur, instead of asking the user for help. This option is also used\n# when generating formulas in HTML.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_BATCHMODE        = NO\n\n# If the LATEX_HIDE_INDICES tag is set to YES then doxygen will not include the\n# index chapters (such as File Index, Compound Index, etc.) in the output.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_HIDE_INDICES     = NO\n\n# If the LATEX_SOURCE_CODE tag is set to YES then doxygen will include source\n# code with syntax highlighting in the LaTeX output.\n#\n# Note that which sources are shown also depends on other settings such as\n# SOURCE_BROWSER.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_SOURCE_CODE      = NO\n\n# The LATEX_BIB_STYLE tag can be used to specify the style to use for the\n# bibliography, e.g. plainnat, or ieeetr. See\n# http://en.wikipedia.org/wiki/BibTeX and \\cite for more info.\n# The default value is: plain.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_BIB_STYLE        = plain\n\n# If the LATEX_TIMESTAMP tag is set to YES then the footer of each generated\n# page will contain the date and time when the page was generated. Setting this\n# to NO can help when comparing the output of multiple runs.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_TIMESTAMP        = NO\n\n#---------------------------------------------------------------------------\n# Configuration options related to the RTF output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_RTF tag is set to YES, doxygen will generate RTF output. The\n# RTF output is optimized for Word 97 and may not look too pretty with other RTF\n# readers/editors.\n# The default value is: NO.\n\nGENERATE_RTF           = NO\n\n# The RTF_OUTPUT tag is used to specify where the RTF docs will be put. If a\n# relative path is entered the value of OUTPUT_DIRECTORY will be put in front of\n# it.\n# The default directory is: rtf.\n# This tag requires that the tag GENERATE_RTF is set to YES.\n\nRTF_OUTPUT             = rtf\n\n# If the COMPACT_RTF tag is set to YES, doxygen generates more compact RTF\n# documents. This may be useful for small projects and may help to save some\n# trees in general.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_RTF is set to YES.\n\nCOMPACT_RTF            = NO\n\n# If the RTF_HYPERLINKS tag is set to YES, the RTF that is generated will\n# contain hyperlink fields. The RTF file will contain links (just like the HTML\n# output) instead of page references. This makes the output suitable for online\n# browsing using Word or some other Word compatible readers that support those\n# fields.\n#\n# Note: WordPad (write) and others do not support links.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_RTF is set to YES.\n\nRTF_HYPERLINKS         = NO\n\n# Load stylesheet definitions from file. Syntax is similar to doxygen's config\n# file, i.e. a series of assignments. You only have to provide replacements,\n# missing definitions are set to their default value.\n#\n# See also section \"Doxygen usage\" for information on how to generate the\n# default style sheet that doxygen normally uses.\n# This tag requires that the tag GENERATE_RTF is set to YES.\n\nRTF_STYLESHEET_FILE    =\n\n# Set optional variables used in the generation of an RTF document. Syntax is\n# similar to doxygen's config file. A template extensions file can be generated\n# using doxygen -e rtf extensionFile.\n# This tag requires that the tag GENERATE_RTF is set to YES.\n\nRTF_EXTENSIONS_FILE    =\n\n# If the RTF_SOURCE_CODE tag is set to YES then doxygen will include source code\n# with syntax highlighting in the RTF output.\n#\n# Note that which sources are shown also depends on other settings such as\n# SOURCE_BROWSER.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_RTF is set to YES.\n\nRTF_SOURCE_CODE        = NO\n\n#---------------------------------------------------------------------------\n# Configuration options related to the man page output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_MAN tag is set to YES, doxygen will generate man pages for\n# classes and files.\n# The default value is: NO.\n\nGENERATE_MAN           = NO\n\n# The MAN_OUTPUT tag is used to specify where the man pages will be put. If a\n# relative path is entered the value of OUTPUT_DIRECTORY will be put in front of\n# it. A directory man3 will be created inside the directory specified by\n# MAN_OUTPUT.\n# The default directory is: man.\n# This tag requires that the tag GENERATE_MAN is set to YES.\n\nMAN_OUTPUT             = man\n\n# The MAN_EXTENSION tag determines the extension that is added to the generated\n# man pages. In case the manual section does not start with a number, the number\n# 3 is prepended. The dot (.) at the beginning of the MAN_EXTENSION tag is\n# optional.\n# The default value is: .3.\n# This tag requires that the tag GENERATE_MAN is set to YES.\n\nMAN_EXTENSION          = .3\n\n# The MAN_SUBDIR tag determines the name of the directory created within\n# MAN_OUTPUT in which the man pages are placed. If defaults to man followed by\n# MAN_EXTENSION with the initial . removed.\n# This tag requires that the tag GENERATE_MAN is set to YES.\n\nMAN_SUBDIR             =\n\n# If the MAN_LINKS tag is set to YES and doxygen generates man output, then it\n# will generate one additional man file for each entity documented in the real\n# man page(s). These additional files only source the real man page, but without\n# them the man command would be unable to find the correct page.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_MAN is set to YES.\n\nMAN_LINKS              = NO\n\n#---------------------------------------------------------------------------\n# Configuration options related to the XML output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_XML tag is set to YES, doxygen will generate an XML file that\n# captures the structure of the code including all documentation.\n# The default value is: NO.\n\nGENERATE_XML           = NO\n\n# The XML_OUTPUT tag is used to specify where the XML pages will be put. If a\n# relative path is entered the value of OUTPUT_DIRECTORY will be put in front of\n# it.\n# The default directory is: xml.\n# This tag requires that the tag GENERATE_XML is set to YES.\n\nXML_OUTPUT             = xml\n\n# If the XML_PROGRAMLISTING tag is set to YES, doxygen will dump the program\n# listings (including syntax highlighting and cross-referencing information) to\n# the XML output. Note that enabling this will significantly increase the size\n# of the XML output.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_XML is set to YES.\n\nXML_PROGRAMLISTING     = YES\n\n#---------------------------------------------------------------------------\n# Configuration options related to the DOCBOOK output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_DOCBOOK tag is set to YES, doxygen will generate Docbook files\n# that can be used to generate PDF.\n# The default value is: NO.\n\nGENERATE_DOCBOOK       = NO\n\n# The DOCBOOK_OUTPUT tag is used to specify where the Docbook pages will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be put in\n# front of it.\n# The default directory is: docbook.\n# This tag requires that the tag GENERATE_DOCBOOK is set to YES.\n\nDOCBOOK_OUTPUT         = docbook\n\n# If the DOCBOOK_PROGRAMLISTING tag is set to YES, doxygen will include the\n# program listings (including syntax highlighting and cross-referencing\n# information) to the DOCBOOK output. Note that enabling this will significantly\n# increase the size of the DOCBOOK output.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_DOCBOOK is set to YES.\n\nDOCBOOK_PROGRAMLISTING = NO\n\n#---------------------------------------------------------------------------\n# Configuration options for the AutoGen Definitions output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_AUTOGEN_DEF tag is set to YES, doxygen will generate an\n# AutoGen Definitions (see http://autogen.sf.net) file that captures the\n# structure of the code including all documentation. Note that this feature is\n# still experimental and incomplete at the moment.\n# The default value is: NO.\n\nGENERATE_AUTOGEN_DEF   = NO\n\n#---------------------------------------------------------------------------\n# Configuration options related to the Perl module output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_PERLMOD tag is set to YES, doxygen will generate a Perl module\n# file that captures the structure of the code including all documentation.\n#\n# Note that this feature is still experimental and incomplete at the moment.\n# The default value is: NO.\n\nGENERATE_PERLMOD       = NO\n\n# If the PERLMOD_LATEX tag is set to YES, doxygen will generate the necessary\n# Makefile rules, Perl scripts and LaTeX code to be able to generate PDF and DVI\n# output from the Perl module output.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_PERLMOD is set to YES.\n\nPERLMOD_LATEX          = NO\n\n# If the PERLMOD_PRETTY tag is set to YES, the Perl module output will be nicely\n# formatted so it can be parsed by a human reader. This is useful if you want to\n# understand what is going on. On the other hand, if this tag is set to NO, the\n# size of the Perl module output will be much smaller and Perl will parse it\n# just the same.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_PERLMOD is set to YES.\n\nPERLMOD_PRETTY         = YES\n\n# The names of the make variables in the generated doxyrules.make file are\n# prefixed with the string contained in PERLMOD_MAKEVAR_PREFIX. This is useful\n# so different doxyrules.make files included by the same Makefile don't\n# overwrite each other's variables.\n# This tag requires that the tag GENERATE_PERLMOD is set to YES.\n\nPERLMOD_MAKEVAR_PREFIX =\n\n#---------------------------------------------------------------------------\n# Configuration options related to the preprocessor\n#---------------------------------------------------------------------------\n\n# If the ENABLE_PREPROCESSING tag is set to YES, doxygen will evaluate all\n# C-preprocessor directives found in the sources and include files.\n# The default value is: YES.\n\nENABLE_PREPROCESSING   = YES\n\n# If the MACRO_EXPANSION tag is set to YES, doxygen will expand all macro names\n# in the source code. If set to NO, only conditional compilation will be\n# performed. Macro expansion can be done in a controlled way by setting\n# EXPAND_ONLY_PREDEF to YES.\n# The default value is: NO.\n# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n\nMACRO_EXPANSION        = NO\n\n# If the EXPAND_ONLY_PREDEF and MACRO_EXPANSION tags are both set to YES then\n# the macro expansion is limited to the macros specified with the PREDEFINED and\n# EXPAND_AS_DEFINED tags.\n# The default value is: NO.\n# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n\nEXPAND_ONLY_PREDEF     = NO\n\n# If the SEARCH_INCLUDES tag is set to YES, the include files in the\n# INCLUDE_PATH will be searched if a #include is found.\n# The default value is: YES.\n# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n\nSEARCH_INCLUDES        = YES\n\n# The INCLUDE_PATH tag can be used to specify one or more directories that\n# contain include files that are not input files but should be processed by the\n# preprocessor.\n# This tag requires that the tag SEARCH_INCLUDES is set to YES.\n\nINCLUDE_PATH           =\n\n# You can use the INCLUDE_FILE_PATTERNS tag to specify one or more wildcard\n# patterns (like *.h and *.hpp) to filter out the header-files in the\n# directories. If left blank, the patterns specified with FILE_PATTERNS will be\n# used.\n# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n\nINCLUDE_FILE_PATTERNS  =\n\n# The PREDEFINED tag can be used to specify one or more macro names that are\n# defined before the preprocessor is started (similar to the -D option of e.g.\n# gcc). The argument of the tag is a list of macros of the form: name or\n# name=definition (no spaces). If the definition and the \"=\" are omitted, \"=1\"\n# is assumed. To prevent a macro definition from being undefined via #undef or\n# recursively expanded use the := operator instead of the = operator.\n# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n\nPREDEFINED             =\n\n# If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then this\n# tag can be used to specify a list of macro names that should be expanded. The\n# macro definition that is found in the sources will be used. Use the PREDEFINED\n# tag if you want to use a different macro definition that overrules the\n# definition found in the source code.\n# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n\nEXPAND_AS_DEFINED      =\n\n# If the SKIP_FUNCTION_MACROS tag is set to YES then doxygen's preprocessor will\n# remove all references to function-like macros that are alone on a line, have\n# an all uppercase name, and do not end with a semicolon. Such function macros\n# are typically used for boiler-plate code, and will confuse the parser if not\n# removed.\n# The default value is: YES.\n# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n\nSKIP_FUNCTION_MACROS   = YES\n\n#---------------------------------------------------------------------------\n# Configuration options related to external references\n#---------------------------------------------------------------------------\n\n# The TAGFILES tag can be used to specify one or more tag files. For each tag\n# file the location of the external documentation should be added. The format of\n# a tag file without this location is as follows:\n# TAGFILES = file1 file2 ...\n# Adding location for the tag files is done as follows:\n# TAGFILES = file1=loc1 \"file2 = loc2\" ...\n# where loc1 and loc2 can be relative or absolute paths or URLs. See the\n# section \"Linking to external documentation\" for more information about the use\n# of tag files.\n# Note: Each tag file must have a unique name (where the name does NOT include\n# the path). If a tag file is not located in the directory in which doxygen is\n# run, you must also specify the path to the tagfile here.\n\nTAGFILES               =\n\n# When a file name is specified after GENERATE_TAGFILE, doxygen will create a\n# tag file that is based on the input files it reads. See section \"Linking to\n# external documentation\" for more information about the usage of tag files.\n\nGENERATE_TAGFILE       =\n\n# If the ALLEXTERNALS tag is set to YES, all external class will be listed in\n# the class index. If set to NO, only the inherited external classes will be\n# listed.\n# The default value is: NO.\n\nALLEXTERNALS           = NO\n\n# If the EXTERNAL_GROUPS tag is set to YES, all external groups will be listed\n# in the modules index. If set to NO, only the current project's groups will be\n# listed.\n# The default value is: YES.\n\nEXTERNAL_GROUPS        = YES\n\n# If the EXTERNAL_PAGES tag is set to YES, all external pages will be listed in\n# the related pages index. If set to NO, only the current project's pages will\n# be listed.\n# The default value is: YES.\n\nEXTERNAL_PAGES         = YES\n\n# The PERL_PATH should be the absolute path and name of the perl script\n# interpreter (i.e. the result of 'which perl').\n# The default file (with absolute path) is: /usr/bin/perl.\n\nPERL_PATH              = /usr/bin/perl\n\n#---------------------------------------------------------------------------\n# Configuration options related to the dot tool\n#---------------------------------------------------------------------------\n\n# If the CLASS_DIAGRAMS tag is set to YES, doxygen will generate a class diagram\n# (in HTML and LaTeX) for classes with base or super classes. Setting the tag to\n# NO turns the diagrams off. Note that this option also works with HAVE_DOT\n# disabled, but it is recommended to install and use dot, since it yields more\n# powerful graphs.\n# The default value is: YES.\n\nCLASS_DIAGRAMS         = YES\n\n# You can define message sequence charts within doxygen comments using the \\msc\n# command. Doxygen will then run the mscgen tool (see:\n# http://www.mcternan.me.uk/mscgen/)) to produce the chart and insert it in the\n# documentation. The MSCGEN_PATH tag allows you to specify the directory where\n# the mscgen tool resides. If left empty the tool is assumed to be found in the\n# default search path.\n\nMSCGEN_PATH            =\n\n# You can include diagrams made with dia in doxygen documentation. Doxygen will\n# then run dia to produce the diagram and insert it in the documentation. The\n# DIA_PATH tag allows you to specify the directory where the dia binary resides.\n# If left empty dia is assumed to be found in the default search path.\n\nDIA_PATH               =\n\n# If set to YES the inheritance and collaboration graphs will hide inheritance\n# and usage relations if the target is undocumented or is not a class.\n# The default value is: YES.\n\nHIDE_UNDOC_RELATIONS   = YES\n\n# If you set the HAVE_DOT tag to YES then doxygen will assume the dot tool is\n# available from the path. This tool is part of Graphviz (see:\n# http://www.graphviz.org/), a graph visualization toolkit from AT&T and Lucent\n# Bell Labs. The other options in this section have no effect if this option is\n# set to NO\n# The default value is: NO.\n\nHAVE_DOT               = NO\n\n# The DOT_NUM_THREADS specifies the number of dot invocations doxygen is allowed\n# to run in parallel. When set to 0 doxygen will base this on the number of\n# processors available in the system. You can set it explicitly to a value\n# larger than 0 to get control over the balance between CPU load and processing\n# speed.\n# Minimum value: 0, maximum value: 32, default value: 0.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_NUM_THREADS        = 0\n\n# When you want a differently looking font in the dot files that doxygen\n# generates you can specify the font name using DOT_FONTNAME. You need to make\n# sure dot is able to find the font, which can be done by putting it in a\n# standard location or by setting the DOTFONTPATH environment variable or by\n# setting DOT_FONTPATH to the directory containing the font.\n# The default value is: Helvetica.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_FONTNAME           = Helvetica\n\n# The DOT_FONTSIZE tag can be used to set the size (in points) of the font of\n# dot graphs.\n# Minimum value: 4, maximum value: 24, default value: 10.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_FONTSIZE           = 10\n\n# By default doxygen will tell dot to use the default font as specified with\n# DOT_FONTNAME. If you specify a different font using DOT_FONTNAME you can set\n# the path where dot can find it using this tag.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_FONTPATH           =\n\n# If the CLASS_GRAPH tag is set to YES then doxygen will generate a graph for\n# each documented class showing the direct and indirect inheritance relations.\n# Setting this tag to YES will force the CLASS_DIAGRAMS tag to NO.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nCLASS_GRAPH            = YES\n\n# If the COLLABORATION_GRAPH tag is set to YES then doxygen will generate a\n# graph for each documented class showing the direct and indirect implementation\n# dependencies (inheritance, containment, and class references variables) of the\n# class with other documented classes.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nCOLLABORATION_GRAPH    = YES\n\n# If the GROUP_GRAPHS tag is set to YES then doxygen will generate a graph for\n# groups, showing the direct groups dependencies.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nGROUP_GRAPHS           = YES\n\n# If the UML_LOOK tag is set to YES, doxygen will generate inheritance and\n# collaboration diagrams in a style similar to the OMG's Unified Modeling\n# Language.\n# The default value is: NO.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nUML_LOOK               = NO\n\n# If the UML_LOOK tag is enabled, the fields and methods are shown inside the\n# class node. If there are many fields or methods and many nodes the graph may\n# become too big to be useful. The UML_LIMIT_NUM_FIELDS threshold limits the\n# number of items for each type to make the size more manageable. Set this to 0\n# for no limit. Note that the threshold may be exceeded by 50% before the limit\n# is enforced. So when you set the threshold to 10, up to 15 fields may appear,\n# but if the number exceeds 15, the total amount of fields shown is limited to\n# 10.\n# Minimum value: 0, maximum value: 100, default value: 10.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nUML_LIMIT_NUM_FIELDS   = 10\n\n# If the TEMPLATE_RELATIONS tag is set to YES then the inheritance and\n# collaboration graphs will show the relations between templates and their\n# instances.\n# The default value is: NO.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nTEMPLATE_RELATIONS     = NO\n\n# If the INCLUDE_GRAPH, ENABLE_PREPROCESSING and SEARCH_INCLUDES tags are set to\n# YES then doxygen will generate a graph for each documented file showing the\n# direct and indirect include dependencies of the file with other documented\n# files.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nINCLUDE_GRAPH          = YES\n\n# If the INCLUDED_BY_GRAPH, ENABLE_PREPROCESSING and SEARCH_INCLUDES tags are\n# set to YES then doxygen will generate a graph for each documented file showing\n# the direct and indirect include dependencies of the file with other documented\n# files.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nINCLUDED_BY_GRAPH      = YES\n\n# If the CALL_GRAPH tag is set to YES then doxygen will generate a call\n# dependency graph for every global function or class method.\n#\n# Note that enabling this option will significantly increase the time of a run.\n# So in most cases it will be better to enable call graphs for selected\n# functions only using the \\callgraph command. Disabling a call graph can be\n# accomplished by means of the command \\hidecallgraph.\n# The default value is: NO.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nCALL_GRAPH             = NO\n\n# If the CALLER_GRAPH tag is set to YES then doxygen will generate a caller\n# dependency graph for every global function or class method.\n#\n# Note that enabling this option will significantly increase the time of a run.\n# So in most cases it will be better to enable caller graphs for selected\n# functions only using the \\callergraph command. Disabling a caller graph can be\n# accomplished by means of the command \\hidecallergraph.\n# The default value is: NO.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nCALLER_GRAPH           = NO\n\n# If the GRAPHICAL_HIERARCHY tag is set to YES then doxygen will graphical\n# hierarchy of all classes instead of a textual one.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nGRAPHICAL_HIERARCHY    = YES\n\n# If the DIRECTORY_GRAPH tag is set to YES then doxygen will show the\n# dependencies a directory has on other directories in a graphical way. The\n# dependency relations are determined by the #include relations between the\n# files in the directories.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDIRECTORY_GRAPH        = YES\n\n# The DOT_IMAGE_FORMAT tag can be used to set the image format of the images\n# generated by dot. For an explanation of the image formats see the section\n# output formats in the documentation of the dot tool (Graphviz (see:\n# http://www.graphviz.org/)).\n# Note: If you choose svg you need to set HTML_FILE_EXTENSION to xhtml in order\n# to make the SVG files visible in IE 9+ (other browsers do not have this\n# requirement).\n# Possible values are: png, jpg, gif, svg, png:gd, png:gd:gd, png:cairo,\n# png:cairo:gd, png:cairo:cairo, png:cairo:gdiplus, png:gdiplus and\n# png:gdiplus:gdiplus.\n# The default value is: png.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_IMAGE_FORMAT       = png\n\n# If DOT_IMAGE_FORMAT is set to svg, then this option can be set to YES to\n# enable generation of interactive SVG images that allow zooming and panning.\n#\n# Note that this requires a modern browser other than Internet Explorer. Tested\n# and working are Firefox, Chrome, Safari, and Opera.\n# Note: For IE 9+ you need to set HTML_FILE_EXTENSION to xhtml in order to make\n# the SVG files visible. Older versions of IE do not have SVG support.\n# The default value is: NO.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nINTERACTIVE_SVG        = NO\n\n# The DOT_PATH tag can be used to specify the path where the dot tool can be\n# found. If left blank, it is assumed the dot tool can be found in the path.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_PATH               =\n\n# The DOTFILE_DIRS tag can be used to specify one or more directories that\n# contain dot files that are included in the documentation (see the \\dotfile\n# command).\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOTFILE_DIRS           =\n\n# The MSCFILE_DIRS tag can be used to specify one or more directories that\n# contain msc files that are included in the documentation (see the \\mscfile\n# command).\n\nMSCFILE_DIRS           =\n\n# The DIAFILE_DIRS tag can be used to specify one or more directories that\n# contain dia files that are included in the documentation (see the \\diafile\n# command).\n\nDIAFILE_DIRS           =\n\n# When using plantuml, the PLANTUML_JAR_PATH tag should be used to specify the\n# path where java can find the plantuml.jar file. If left blank, it is assumed\n# PlantUML is not used or called during a preprocessing step. Doxygen will\n# generate a warning when it encounters a \\startuml command in this case and\n# will not generate output for the diagram.\n\nPLANTUML_JAR_PATH      =\n\n# When using plantuml, the specified paths are searched for files specified by\n# the !include statement in a plantuml block.\n\nPLANTUML_INCLUDE_PATH  =\n\n# The DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of nodes\n# that will be shown in the graph. If the number of nodes in a graph becomes\n# larger than this value, doxygen will truncate the graph, which is visualized\n# by representing a node as a red box. Note that doxygen if the number of direct\n# children of the root node in a graph is already larger than\n# DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note that\n# the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.\n# Minimum value: 0, maximum value: 10000, default value: 50.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_GRAPH_MAX_NODES    = 50\n\n# The MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of the graphs\n# generated by dot. A depth value of 3 means that only nodes reachable from the\n# root by following a path via at most 3 edges will be shown. Nodes that lay\n# further from the root node will be omitted. Note that setting this option to 1\n# or 2 may greatly reduce the computation time needed for large code bases. Also\n# note that the size of a graph can be further restricted by\n# DOT_GRAPH_MAX_NODES. Using a depth of 0 means no depth restriction.\n# Minimum value: 0, maximum value: 1000, default value: 0.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nMAX_DOT_GRAPH_DEPTH    = 0\n\n# Set the DOT_TRANSPARENT tag to YES to generate images with a transparent\n# background. This is disabled by default, because dot on Windows does not seem\n# to support this out of the box.\n#\n# Warning: Depending on the platform used, enabling this option may lead to\n# badly anti-aliased labels on the edges of a graph (i.e. they become hard to\n# read).\n# The default value is: NO.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_TRANSPARENT        = NO\n\n# Set the DOT_MULTI_TARGETS tag to YES to allow dot to generate multiple output\n# files in one run (i.e. multiple -o and -T options on the command line). This\n# makes dot run faster, but since only newer versions of dot (>1.8.10) support\n# this, this feature is disabled by default.\n# The default value is: NO.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_MULTI_TARGETS      = NO\n\n# If the GENERATE_LEGEND tag is set to YES doxygen will generate a legend page\n# explaining the meaning of the various boxes and arrows in the dot generated\n# graphs.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nGENERATE_LEGEND        = YES\n\n# If the DOT_CLEANUP tag is set to YES, doxygen will remove the intermediate dot\n# files that are used to generate the various graphs.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_CLEANUP            = YES\n"
        },
        {
          "name": "Gemfile",
          "type": "blob",
          "size": 0.1455078125,
          "content": "source 'https://rubygems.org'\n\ngem 'jekyll'\ngem 'jekyll-paginate'\ngem 'jekyll-sass-converter'\ngem 'jekyll-relative-links'\ngem 'kramdown'\ngem 'rouge'\n"
        },
        {
          "name": "History.md",
          "type": "blob",
          "size": 8.40625,
          "content": "## 3.1.0\n- Move to VS 2019\n- Fix a codegen error that was resulting in incorrect functional behavior\n- Fix regressions in audio training tutorial (#232)\n- Add importing of Sum nodes to ONNX importer\n- Fix crash in LLVMContext::SetName\n- Improved performance of CNN models on Pi3 with new implementations of spatial, pointwise and regular convolutions\n- Improved performance of reorder node\n- New nodes: ReorderDataCodeNode, SpatialConvolutionNode, MatrixMatrixMultiplyCodeNode\n- Implement parallelization strategies for matrix multiplication nodes.\n- Only enable new MatrixMatrixMultipleCodeNode path for select ARM targets like Pi, and not Intel/AMD CPUs\n- Add the flag `--skip_ellcode` to `compile` and `wrap.py` tools to use OpenBLAS for linear algebra computations.\n\n## 3.0.3\n- Fix VS 2019 build.\n\n## 3.0.2\n- Add FastGRNN node to ELL, train_classifier.py and the onnx_importer.\n\n## 3.0.1\n- Fix make_vad.py so the VAD model works properly.\n- Fix smoothing of classifier output.\n- Improvements to noise mixing in audio training scripts\n- Use featurizer metadata to get correct defaults for some audio script parameters\n- Improvements and code clean up in view_audio.py\n- make_dataset will fill the featurizer internal buffer before returning features so it doesn't featurize zeros.\n- onnx_importer: fixes to ConstantFill, Reshape, Slice, Transpose, and support for constant folding involving Cast, and Mul and fix handling of nodes with multiple outputs.\n- Fix bug causing OptimizeReorderDataNodesTransformation to fail caused by input port and memory layout mismatch\n- move to SWIG 4.0.0.\n\n## 3.0.0\n- Improve Python API so Map and CompiledMap have a way of calling compute on models with multiple inputs and outputs (see ComputeList)\n- Improve Python Callback handling so Python apps can handle models with any number of and type of callbacks.\n- Simplify datasetFromImages.py so it can create training, testing and validation set from one set of images on disk.\n- Update repurposing tutorial setup to take advantage of dataFromImages.py changes\n- Update index.md to fix bug in Linux instructions\n- Fix FFTNode so that behavior is identical to NumPy behavior\n- Update make_featurizer.py to calculate features correctly\n\n## 2.5.4\n- Add support for ONNX GlobalAveragePooling\n- Publish 13 new audio models trained using Azure ML\n- Add ONNX importer support for ConstantOfShape\n- Add a -mean option to audio test runs to output mean prediction score\n- Fix InputNode unarchival to correctly set the memory layout\n\n## 2.5.3\n- Fixed build break in C++ tutorial on Windows\n\n## 2.5.2\n- Moved to LLVM 8.0\n- Added Asparagus and Pear models to the gallery, removed Elderflower\n- Added support for image preprocessing metadata and image normalization defaults for pytorch + imagenet\n- Updated find_ell.py (and thus other python tools) to work if your working directory contains ELL's build output\n\n## 2.5.1\n- Fixed API wrapper for PortMemoryLayout to produce correct extent\n- Fixed processing of ConcatenationNode in importer engine\n- Added four build target aliases that build groups of targets: bindings, libraries, tests, and tools\n- Add support for ONNX Cast operator (thanks to Ehsan Azar PR #218)\n- Fixed build error on macOS (GitHub issue #216)\n- Added model per-layer optimizing scripts\n\n## 2.5.0\n- Improve audio python library and update audio training tutorial\n- Add support for non-unrolled loops in the Value library\n- Add new methods to Python API to support FastGRNN models\n- Add easy node-creation functions\n- Fix bugs in ReinterpretLayoutNode\n- Fix importing of DenseNet models\n- Improve FFT and MelFilterBank nodes so that non-power of 2 sized input buffers can be processed\n- Fix darknet importer\n- Add shuffling of test and validation sets to audio train_classifier\n- Update OpenBLASSetup.cmake so it can find a locally built version of OpenBLAS\n- Fix compiling for cortex-m4 targets\n- Add a link back to the original model file name in our emitted header file\n- Clean up Python API, removing \"TensorShape\" specific API in favor of the more general PortMemoryLayout\n- Fix bug in Microphone and WavReader classes so they properly handle auto-resampling of audio with multiple channels\n- Add an -auto_scale option to audio scripts to control whether audio is scaled or not before featurization\n- Add ability to mix noise with audio during make_dataset process\n- Add support for shuffling and cleaning the audio training list\n- Add many new options to audio train_classifier, including ability to control learning rate schedulers\n- Fix link error when building on a Mac\n- Fix exception in DetectLowPrecisionConvolutionTransformation when running Compile in Debug mode\n\n## 2.4.0\n- Initial release of the finetune utility\n- Remove stale references to VS 2015\n- Add logging of build tool options\n- Improve error reporting of compile failures\n- Suppress alias analysis on emitted IR code\n- Improve logging in ELL pythonlibs\n- Remove volatile attribute from memcpy, memmove, and memset LLVM intrinsic calls\n- Allow compilation of models with more than one input or output\n- Fix parsing of boolean command-line arguments\n- Add a RAM requirement for audio tutorial\n- Add support for optimized models\n- Fix ONNX import of no-op concat blocks\n- Gallery updates for Pi3 specific ELL models\n- Added documentation detailing ELL's versioning strategy\n\n## v2.3.7\n- Move to LLVM 6.0.1\n- Move ELL to C++17\n- Add support for python 3.7\n- Add support for more ONNX operations\n- Added instructions for Raspbian Lite (https://microsoft.github.io/ELL/tutorials/Raspberry-Pi-setup/)\n- Add new OpenBLAS include path for Ubuntu 18.04\n- Fix reorder data node optimization pass\n- Fix debugCompiler to work with gallery models\n- Improve reordering of data for simple and Winograd depthwise convolutions\n- Fixes for \"Getting started with image classification on Raspberry Pi using C++\" tutorial\n- Fix importing of depthwise separable models\n- Fix \"Repurposing a pretrained image classifier\" tutorial\n\n## v2.3.6\n- Initial version of the ONNX importer\n- Tools now have a -v/--verbose option that will control the output of additional helpful logging - data\n- Demo helper script has been modified to print labels to STDOUT instead of drawing on the image. - This is useful for some training sets like CIFAR\n- Couple of new options for wrap.py:\n    - --convolution_method: this lets you specify the convolution method (it just passes the value on to the compile executable)\n    - --llvm-format gets a new option: obj. This, along with --no-llc-tool and --no-opt-tool let you skip the time-consuming llc and opt steps. To retain compatibility with compile, the object file suffix is now .o.\n\n## v2.3.5\n- Fixed typos in some tutorials (thanks @lisaong )\n- Added support for emitting relocatable object code\n- Added Travis-CI support (thanks @lisaong )\n- Updated profiler to work with models from the ELL gallery\n- Fix build break for VS2017.7.3 in StlContainerReferenceIterator\n- Fix python interface implementation for LSTM layer nodes\n- Fix crash in retarget trainer (issue #141)\n- Fix docs for opencv setup on raspberry pi\n- Improve support for running models on Raspberry Pi Zero\n- make_profiler.sh can now be run from anywhere\n- Various bug fixes (#161, #157, #149)\n\n## v2.3.4\n- Fix importing CNTK models with a Softmax layer\n- Add a Reset function to LSTM and GRU models to clear the state\n\n## v2.3.3\n- Fixes issue #140\n- Helps issue #138 by fixing importing of Darknet models with Fully Connected layers\n- Simplified and improved LLVM IR optimization in emitted code\n- Fix importer for next round of separable darknet models in CNTK\n- Improved Winograd convolution implementation\n- Fix building the profiler tool\n- Fix running build.sh without any command line args\n- Miscellaneous bug fixes\n\n## v2.3.2\n- Fix issue #137\n- Added resnet models to gallery\n- Add support for naive depthwise separable convolution layers\n\n## v2.3.1\n- Added more fine grained profiling support for emitted code\n- Make find_package for LLVM more resilient to finding the version that ELL needs\n- Updated Setting up your Raspberry Pi device for tutorials to move to Raspbian Stretch\n- Updated links to YOLOv2 configuration and weights in Getting started with object detection using - region of interest networks\n- Added better support for importing models from older versions of CNTK\n\n## v2.3.0\n- New tutorials available:\n- Getting started with object detection using region of interest networks\n- Getting started with audio keyword classification on the Raspberry Pi\n- Updated importer to handle the importing of resnet models\n- Miscellaneous bug fixes.\n"
        },
        {
          "name": "INSTALL-Advanced.md",
          "type": "blob",
          "size": 3.4697265625,
          "content": "# Advanced Installation Topics\n\n## Manually Setting the OpenBLAS Architecture\n\nCMake automatically determines your processor architecture and chooses the right version of OpenBLAS. To override this, use the `-DPROCESSOR_HINT` CMake command line option. For example, for the Intel Haswell processor architecture, add the command line argument `-DPROCESSOR_HINT=haswell`.\n\n## Manually building OpenBLAS on Windows\n\nIf you find that you have a CPU that is not supported by the versions of OpenBlas that\nare included in the nuget package listed in `external/packages.config` then you can build and\ninstall OpenBlas manually by following these steps:\n```\ngit clone https://github.com/xianyi/OpenBLAS\ncd OpenBLAS\nmkdir build\ncd build\ncmake -G \"Visual Studio 16 2019\" -A x64 ..\ncmake --build . --config Release\n```\nThen from an `Administrator` command prompt run the following install comamnd, from the above build folder:\n```\ncmake --build . --config Release --target INSTALL\n```\nThis will put a version of OpenBlas that works for your CPU at `c:\\Program Files\\OpenBlas`.\nNow if you delete your ELL build folder and re-run the cmake step you should see output like this, which confirms that cmake found your new library:\n```\n-- Found OpenBlas in C:\\Program Files/OpenBlas\n-- Using BLAS include path: C:/Program Files/OpenBLAS/include\n-- Using BLAS library: C:/Program Files/OpenBLAS/lib/libopenblas.lib\n```\nLastly, be sure to add the following path to your PATH environment so that the ELL binaries can actually find `libopenblas.dll`:\n```\nset PATH=%PATH%;c:\\Program Files\\OpenBlas\\bin\n```\n\n## Testing ELL\n\nThere are some optional components that you can build and test depending on\nwhether you have installed these python modules:\n\n    1. CNTK, install using `pip install cntk`\n    2. ONNX, install using `conda install -c conda-forge onnx`\n\nIf you want to buidl and test these optional components then add the following to your ELL `cmake` command line:\n\n```shell\ncmake -DONNX=ON -DCNTK=ON ..\n```\n\nThe [CTest](https://cmake.org/cmake/help/v3.9/manual/ctest.1.html) tool comes with your CMake installation. To run build tests, type:\n\n```shell\n    cd build\n    [Linux/macOS] ctest\n    [Windows] ctest -C Release\n```\nIf tests fail, add the `-VV` option to get verbose output from each test, to narrow down the problem.  The `-R` option is also handy in this case to run only those tests that have a matching name.\n\n## Generating Code Documentation with Doxygen\n\nTo create code documentation using *Doxygen*, build the project named `doc`.\n\n```\ncmake --build . --target doc\n```\n\nThe top level entry point to the documentation will appear in `<ELL_Root>/build/doc/html/index.html`\n\n## OpenCV with CUDA\n\nAdvanced users can compile OpenCV with CUDA support. To do so, clone the OpenCV git repository, install the NVidia CUDA toolkit, and build OpenCV with CUDA.\n\n    mkdir build\n    cd build\n\n    set PYTHON3_EXECUTABLE=%LOCALAPPDATA%\\Continuum\\miniconda3\\envs\\py36\\python.exe\n    set PYTHON3_INCLUDE_DIR=%LOCALAPPDATA%\\Continuum\\miniconda3\\envs\\py36\\include\n    set PYTHON3_LIBRARY=%LOCALAPPDATA%\\Continuum\\miniconda3\\envs\\py36\\libs\\python35.lib\n    set PYTHON3_NUMPY_INCLUDE_DIRS=%LOCALAPPDATA%\\Continuum\\miniconda3\\envs\\py36\\lib\\site-packages\\numpy\\core\\include\n    set PYTHON3_PACKAGES_PATH=%LOCALAPPDATA%\\Continuum\\miniconda3\\envs\\py36\\lib\\site-packages\n\n    cmake -G \"Visual Studio 16 2019\" -A x64 .. -D CMAKE_BUILD_TYPE=Release -D WITH_CUDA=1  -D BUILD_TESTS=OFF -D BUILD_PERF_TESTS=OFF ..\n    if ERRORLEVEL 1 goto :eof\n    cmake --build . --config Release\n"
        },
        {
          "name": "INSTALL-Mac.md",
          "type": "blob",
          "size": 4.69140625,
          "content": "# Building the Embedded Learning Library (ELL) on macOS\n\nELL enables you to design and deploy intelligent machine-learned models onto single-board computers, like Raspberry Pi and Arduino. Most of your interaction with ELL occurs on a laptop or desktop computer, rather than the single-board machine itself. The steps below describe how to build ELL on a laptop or desktop running macOS.\n\n## Cloning the ELL repository\n\nThe instructions below assume that ELL was obtained from `github.com/Microsoft/ELL` using *git*. One way to install a git client is to open a Terminal and type\n\n```shell\nbrew install git\n```\n\nTo clone the ELL repository, type\n\n```shell\ngit clone https://github.com/Microsoft/ELL.git\n```\n\n## Prerequisites for building ELL\n\n[*Homebrew*](http://brew.sh/) is a package manager that makes it easy to install the prerequesits. Homebrew can be downloaded and installed by\n\n```shell\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\nIf you already have Homebrew installed, update it to the latest version by typing\n\n```shell\nbrew update\n```\n\n### LLVM and Clang\n\nELL depends on the [*LLVM*](http://llvm.org/) compiler framework, version 8.0.  `Clang` is a C++ compiler built on top of LLVM, and it is the best choice for building ELL. To download and install LLVM and Clang, type\n\n```shell\nbrew install llvm@8\n```\n\nAlternatively, if you have already have *Xcode* installed and prefer to use the version of *Clang* included with it, you must still install LLVM and make sure that the command-line version of the *Xcode* tools are available.\n\n```shell\nbrew install llvm@8\nxcode-select --install\n```\n\nIf you already have LLVM installed, ensure that you have version 6.0. Note that CMake assumes that the LLVM binary files are located in the standard Homebrew location, which is `/usr/local/opt`.\n\n### CMake 3.8, SWIG 4.0.0, OpenBLAS, and Doxygen via Homebrew\n\nELL uses the [*CMake*](https://cmake.org/) build system, version 3.8 or newer.\n\nOptionally, ELL can take advantage of these additional tools:\n\n* [*SWIG*](http://swig.org) version 4.0.0 - a tool that generates Python interfaces to C++ libraries. Required if you intend to use ELL from Python.\n* [*OpenBLAS*](http://www.openblas.net/) - version 0.2.19.3 - fast linear algebra. OpenBLAS can make models execute up to 10 times faster.\n* [*Doxygen*](www.doxygen.org/) -  version 1.8.13 - it is used to generate nice code documentation for the ELL API.\n\nTo install all of the above, type\n\n```shell\nbrew install cmake\nbrew install swig\nbrew install openblas\nbrew install doxygen\n```\n\n## Using ELL in Python\n\nELL can optionally be used from Python 3.6.\nAn easy way to install Python and all the required modules is with [Miniconda](https://conda.io/miniconda.html).\nDownload and install Miniconda from here <https://conda.io/miniconda.html>.\n\nAfter installing Miniconda, create a Python 3.6 environment and include the `numpy` module by typing\n\n```shell\nconda create -n py36 numpy python=3.6\n```\n\nNext, activate the environment you just created by typing\n\n```shell\nsource activate py36\n```\n\nYou need to repeat this activation command each time you open a new terminal and intend to use ELL from Python. Also, make sure to activate the `py36` environment before building ELL, to ensure that Python interfaces are created.\n\n*OpenCV* is a library that helps with capturing and preprocessing images. To install OpenCV in the current Python environment, type\n\n```shell\nconda install -c conda-forge opencv\n```\n\n## Building ELL\n\nWe build ELL by using CMake to create a makefile, invoking that makefile, and optionally building Python interfaces. If you intend to build Python interfaces, make sure to activate the `py36` miniconda environment as described above.\n\nIn the repository root directory, create a `build` subdirectory and change to that directory.\n\n```shell\nmkdir build\ncd build\n```\n\nInvoke CMake by typing\n\n```shell\ncmake ..\n```\n\nDon't forget the two dots (..) at the end of the command! This creates a makefile for the project. Next, invoke the makefile by typing\n\n```shell\nmake\n```\n\nOptionally, build Python interfaces by typing\n\n```shell\nmake _ELL_python\n```\n\nYou can test that the python interface is working by running the following test:\n\n```shell\nctest . --build-config release -R ell-python-interface-test\n```\n\nThe generated executables will appear in `ELL/build/bin`.\n\n## Troubleshooting\n\n**LLVM not found, please check that LLVM is installed.**\n\nTry telling CMake where to find LLVM as follows:\n\n```shell\ncmake -DLLVM_DIR=$(brew --prefix llvm) ..\n```\n\n## Advanced Installation\n\nThe instructions above are enough to start using ELL. For more advanced topics, like testing and generating documentation, please see our [advanced installation instructions](INSTALL-Advanced.md).\n"
        },
        {
          "name": "INSTALL-Ubuntu.md",
          "type": "blob",
          "size": 6.0361328125,
          "content": "# Building the Embedded Learning Library (ELL) on Ubuntu Linux\n\nELL enables you to design and deploy intelligent machine-learned models onto single-board computers, like Raspberry Pi and Arduino. Most of your interaction with ELL occurs on a laptop or desktop computer, rather than the single-board machine itself. The steps below describe how to build ELL on a laptop or desktop running Ubuntu Linux. Note, following instructions are only for Bionic Beaver (18.04). You can also use `scripts/SETUP-Ubuntu.sh` to setup your computer.\n\n## Cloning the ELL repository\n\nThe instructions below assume that ELL was obtained from [https://github.com/Microsoft/ELL](https://github.com/Microsoft/ELL) using *git*. The [git scm client](https://git-scm.com/) is typically installed by default on Ubuntu systems, but if it isn't, open a terminal and type\n\n```shell\nsudo apt-get install -y git\n```\n\nTo clone the ELL repository, type\n\n```shell\ngit clone https://github.com/Microsoft/ELL.git\n```\n\n## Prerequisites for building ELL\n\nThere is a [docker image](https://hub.docker.com/repository/docker/cjlovett/ell-dependencies)\nalready setup with all the pre-requisites for building and running ELL. This image was built using\nthis [Dockerfile](https://github.com/microsoft/ELL/blob/master/scripts/CI/Linux/Dockerfile).\n\n\nUbuntu provides the Advanced Packaging Tool `apt` for downloading and installing prerequisites. First, make sure that `apt` is up to date by running:\n\n```shell\nsudo apt-get -y update\n```\n\n### GCC 8, CMake 3.8, libedit, zlib, OpenBLAS, and Doxygen via apt-get\n\nELL requires the following tools and libraries, some of which are installed by default on Ubuntu systems:\n\n* *GCC 8* or newer - C++17 compiler\n* [*CMake*](https://cmake.org/) version 3.8 or newer - build system\n* *libedit* and *zlib* libraries\n\nNote that *GCC 8* may not be available by default. It can be found in [*ubuntu-toolchain-r/test*](https://launchpad.net/~ubuntu-toolchain-r/+archive/ubuntu/test) PPA.\n\nTo add ubuntu-toolchain-r/test PPA and update sources, type\n```shell\nsudo add-apt-repository ppa:ubuntu-toolchain-r/test\nsudo apt-get -y update\n```\n\nOptionally, ELL can take advantage of these additional tools:\n\n* [*OpenBLAS*](http://www.openblas.net/) - version 0.2.19.3 - fast linear algebra. This is optional but can make models execute up to 10 times faster.\n* [*Doxygen*](www.doxygen.org/) - version 1.8.13 - this is optional, it is used to generate nice code documentation for the ELL API.\n\nTo install all of the above, type\n```shell\nsudo apt-get install -y gcc-8 g++-8 cmake libedit-dev zlibc zlib1g zlib1g-dev make\nsudo apt-get install -y libopenblas-dev doxygen\n```\n### LLVM 8.0\n\nELL depends on the [*LLVM*](http://llvm.org/) compiler framework, version 8.0. To install it use this command\n\n```shell\nsudo sh -c 'echo deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-8 main >> /etc/apt/sources.list'\nsudo sh -c 'echo deb-src http://apt.llvm.org/bionic/ llvm-toolchain-bionic-8 main >> /etc/apt/sources.list'\nwget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -\nsudo apt-get update\nsudo apt-get install llvm-8 -y\n```\n\nThis works on Ubuntu 18.04 Bionic Beaver.  If you have some other Linux version then\n[*LLVM*](http://llvm.org/) has more instructions on how to install it manually.\n\n### curl\n\n`curl` is a command line tool used to transfer data via URL. When files are required to be downloaded from a URL, the instructions assume you have `curl` available to perform the download. To install `curl`, type the following:\n```shell\nsudo apt-get install -y curl\n```\n\n### SWIG 4.0.0\n\n[*SWIG*](http://swig.org) is a tool that generates Python interfaces to C++ libraries. If you intend to use ELL from Python, you must install SWIG version 4.0.0. At the time of writing this document, `apt-get` doesn't yet have the latest version of `SWIG`, so it must be installed manually\n\n```shell\ncurl -O --location http://prdownloads.sourceforge.net/swig/swig-4.0.0.tar.gz\ntar zxvf swig-4.0.0.tar.gz && cd swig-4.0.0\n./configure --without-pcre && make && sudo make install\n```\n\n## Using ELL in Python\n\nELL can optionally be used from Python 3.6.\nAn easy way to install Python and all the required modules is with [Miniconda](https://conda.io/miniconda.html).\nDownload and install Miniconda from here <https://conda.io/miniconda.html>.\n\nAfter installing Miniconda, create a Python 3.6 environment and include the `numpy` module by typing\n\n```shell\nconda create -n py36 numpy python=3.6\n```\n\nNext, activate the environment you just created by typing\n\n```shell\nsource activate py36\n```\n\nYou need to repeat this activation command each time you open a new terminal and intend to use ELL from Python. Also, make sure to activate the `py36` environment before building ELL, to ensure that Python interfaces are created.\n\n*OpenCV* is a library that helps with capturing and preprocessing images. To install OpenCV in the current Python environment, type\n\n```shell\nconda install -c conda-forge opencv -y\n```\n\n## Building ELL\n\nYou can build ELL by using CMake to create a makefile, invoking that makefile, and optionally building Python interfaces. If you intend to build Python interfaces, make sure to activate the `py36` miniconda environment as described above.\n\nIn the repository root directory, create a `build` subdirectory and change to that directory.\n\n```shell\nmkdir build\ncd build\n```\n\nInvoke CMake by typing\n\n```shell\ncmake -DCMAKE_CXX_COMPILER=/usr/bin/g++-8 -DCMAKE_C_COMPILER=/usr/bin/gcc-8 -DONNX=ON ..\n```\n\nDon't forget the two dots (..) at the end of the command! This creates a makefile for the project. Next, invoke the makefile by typing\n\n```shell\nmake\n```\n\nOptionally, build Python interfaces by typing\n\n```shell\nmake _ELL_python\n```\n\nThe generated executables will appear in `ELL/build/bin`.\n\nYou can test that the python interface is working by running the following test:\n\n```shell\nctest . --build-config release -R ell-python-interface-test\n```\n\n# Advanced Installation\n\nThe instructions above are enough to start using ELL. For more advanced topics, like testing and generating documentation, please see our [advanced installation instructions](INSTALL-Advanced.md).\n"
        },
        {
          "name": "INSTALL-Windows.md",
          "type": "blob",
          "size": 6.7333984375,
          "content": "# Building a 64-bit version of the Embedded Learning Library (ELL) on Windows\n\nELL enables you to design and deploy intelligent machine-learned models onto single-board computers, like Raspberry Pi and Arduino. Most of your interaction with ELL occurs on a laptop or desktop computer, rather than the single-board machine itself. The steps below describe how to build ELL on a laptop or desktop running Windows. You can also use `scripts\\SETUP-Windows.cmd` to setup your computer.\n\n## Cloning the ELL repository\n\nThe instructions below assume that ELL was obtained from `github.com/Microsoft/ELL` using *git*. For example, one way of doing this is to download and install the git command line tools from <https://git-scm.com/download> and then clone the ELL repository by opening a command prompt and typing\n```shell\ngit clone https://github.com/Microsoft/ELL.git\n```\n## Prerequisites for building ELL\n\n### Visual Studio\n\nELL requires a C++ compiler. On Windows, you can use *Visual Studio 2019 with C++ Desktop Development Workload*. A free version of Visual Studio 2019 is available at <https://www.visualstudio.com/vs/community/> (make sure to select *Desktop Development with C++* during installation).\n\n### CMake 3.12\n\nELL uses the [*CMake*](https://cmake.org/) build system and requires version 3.15 or newer. A version of CMake that satisfies this requirement is already provided with Visual Studio 2019. You can find it if you\nuse the \"Developer Command Prompt' that is installed by Visual Studio.  It lives here:\n```\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\Common7\\IDE\\CommonExtensions\\Microsoft\\CMake\\CMake\\bin\\cmake.exe\n```\nYou may also download new versions of cmake from <https://cmake.org/download/> if you want to.\n\n### LLVM 8.0, SWIG 4.0.0, OpenBLAS 0.2.19.3, and Doxygen 1.8.13 via NuGet\n\nThe easiest way to get prebuilt 64-bit versions of these packages is to use the [*NuGet*](https://www.nuget.org/) package manager, version 3.5 or newer. The relevant NuGet packages are specified in `ELL/external/packages.config`. The NuGet command line tool called `NuGet CLI` can be downloaded from <https://docs.nuget.org/ndocs/guides/install-nuget>. After downloading and installing NuGet CLI, open a command prompt, change to the repository's root directory (`ELL`) and type\n\n```shell\nnuget.exe restore external/packages.config -PackagesDirectory external\n```\n\nNuGet will download the prerequisites into the `ELL/external` directory and you are done.\n\nHere's more information in case you need to install things manually.\n\n* [*LLVM*](http://llvm.org/) is a C++ compiler framework, ELL depends on version 8.0.\n* [*SWIG*](http://swig.org) version 4.0.0 - a tool that generates Python interfaces to C++ libraries. Required if you intend to use ELL from Python.\n* [*OpenBLAS*](http://www.openblas.net/) version 0.2.19.3 - fast linear algebra. This is optional but can make models execute up to 10 times faster.\n* [*Doxygen*](www.doxygen.org/) version 1.8.13 - this is optional, it is used to generate nice code documentation for the ELL API.\n\n## Using ELL in Python\n\nELL can optionally be used from Python 3.6.\nAn easy way to install Python and all the required modules is with [Miniconda](https://conda.io/miniconda.html).\nDownload and install Miniconda from here <https://conda.io/miniconda.html>.\n\nAfter installing Miniconda, create a Python 3.6 environment by typing\n\n```shell\nconda create -n py36 python=3.6\n```\n\nNext, activate the environment you just created by\n\n```shell\nactivate py36\n```\n\nYou need to repeat this activation command each time you open a new terminal and intend to use ELL from Python. Also, make sure to activate the `py36` environment before building ELL, to ensure that Python interfaces are created.\n\n*OpenCV* is a library that helps with capturing and preprocessing images. To install OpenCV in the current Python environment, type\n\n```shell\nconda install -c conda-forge opencv\n```\n\nIn order to run the Python based ELL unit tests you will also need to install the following:\n\n```shell\nconda install pytorch torchvision cudatoolkit=10.1 -c pytorch\nconda install -c conda-forge onnx\npip install -r requirements.txt\n```\n\nMiniconda comes with useful command line tools such as `curl`, which is used to transfer data via URL. When files are required to be downloaded from a URL, the instructions assume you have `curl` available to perform the download. Ensure you activate your conda environment before running commands like `curl`.\n\n## Building ELL\n\nWe build ELL by using CMake to create a Visual Studio solution, building that solution, and optionally building Python interfaces. If you intend to build Python interfaces, make sure to activate the `py36` environment as described above.\n\nIn the repository root directory, create a `build` subdirectory and change to that directory.\n\n```shell\nmkdir build\ncd build\n```\n\nInvoke CMake as follows\n\n```shell\ncmake -G \"Visual Studio 16 2019\" -A x64 -T host=x64 -D ONNX=ON ..\n```\nDon't forget the two dots (..) at the end of the command! This command creates a Visual Studio solution file named `ELL.sln`, and the associated project files in the `build` directory.\n\nAfter creating the Visual Studio solution, build ELL by typing:\n\n```shell\ncmake --build . --config Release\n```\n\nThe project executables will appear in `ELL/build/bin`. Finally, to build ELL's Python language bindings, type\n\n```shell\ncmake --build . --target _ELL_python --config Release\n```\n\nYou can test that the python interface is working by running the following test:\n\n```shell\nctest . --build-config release -R ell-python-interface-test\n```\n\n## Path Environment\n\nWhen you run cmake in the ELL build folder it will output something like this:\n\n````\n-- Using OpenBLAS compiled for haswell\n-- Using BLAS include path: D:/git/ELL/ELL/external/OpenBLASLibs.0.2.19.3/build/native/x64/haswell/include\n-- Using BLAS library: D:/git/ELL/ELL/external/OpenBLASLibs.0.2.19.3/build/native/x64/haswell/lib/libopenblas.dll.a\n````\n\nThis tells you which version of OpenBLAS ELL will be using.  So if you want to be able to run an ELL program\nfrom anywhere on your machine (outside of your ELL git repo) you will need to help your app find this DLL.\nThis can be done by modifying your PATH environment variable like this:\n\n```shell\nset PATH=%PATH%;D:/git/ELL/ELL/external/OpenBLASLibs.0.2.19.3/build/native/x64/haswell/bin\n```\n\nNote: the end of this path was changed to add `/bin` instead of /include or /lib.  The bin folder is where the actual DLL's live and it is the DLL's that your app will need to find.  You can set this PATH locally for a given terminal window or you can add it in your system PATH if you want to.\n\n# Advanced Installation\n\nThe instructions above are enough to start using ELL. For more advanced topics, like testing and generating documentation, please see our [advanced installation instructions](INSTALL-Advanced.md).\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.1044921875,
          "content": "Embedded Learning Library (ELL)\n\nCopyright (c) Microsoft Corporation\n\nAll rights reserved. \n\nMIT License\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"\"Software\"\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.927734375,
          "content": "# Embedded Learning Library\nThe Embedded Learning Library (ELL) allows you to design and deploy intelligent machine-learned models onto resource constrained platforms and small single-board computers, like Raspberry Pi, Arduino, and micro:bit. The deployed models run locally, without requiring a network connection and without relying on servers in the cloud. ELL is an early preview of the embedded AI and machine learning technologies developed at Microsoft Research.\n\nGo to our [website](https://microsoft.github.io/ELL) for tutorials, instructions, and a gallery of pretrained ELL models for use in your projects.\n\nELL is a work in progress, and we expect it to change rapidly, including breaking API changes. Despite this code churn, we welcome you to try it and give us feedback.\n\n## License\nSee [LICENSE.txt](LICENSE.txt).\n\n## Code of conduct\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information on this code of conduct, see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n## Build and Installation Instructions\n\n[![Build Status](https://travis-ci.org/Microsoft/ELL.svg?branch=master)](https://travis-ci.org/Microsoft/ELL)\n\n* [Windows](INSTALL-Windows.md)\n* [Ubuntu Linux](INSTALL-Ubuntu.md)\n* [Mac OS X](INSTALL-Mac.md)\n\n## Technical Documentation\n\n* [Design overview of `data` library](./libraries/data/doc/README.md)\n* [Design overview of `math` library](./libraries/math/doc/README.md)\n* [Design overview of `model` and `nodes` libraries](./libraries/model/doc/README.md)\n* [Definition of the generalized sparse data format](./libraries/data/doc/GeneralizedSparseFormat.md)\n* [Description of the training algorithms implemented in `trainers`](./libraries/trainers/doc/README.md)\n* [Style Guide for ELL source code](./StyleGuide.md)\n\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.69140625,
          "content": "<!-- BEGIN MICROSOFT SECURITY.MD V0.0.7 BLOCK -->\n\n## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/Microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).\n\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://aka.ms/opensource/security/definition), please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://aka.ms/opensource/security/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://aka.ms/opensource/security/pgpkey).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://aka.ms/opensource/security/msrc). \n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://aka.ms/opensource/security/bounty) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://aka.ms/opensource/security/cvd).\n\n<!-- END MICROSOFT SECURITY.MD BLOCK -->"
        },
        {
          "name": "StyleGuide.md",
          "type": "blob",
          "size": 8.20703125,
          "content": "# Embedded Learning Library (ELL) style guide\n\n## Python\n\nWe use [PEP 8](https://www.python.org/dev/peps/pep-0008/) with one exception, we extend the 80 char line limit to 120.\n\n## C++\n\n### File names and extensions\nHeader files use the extension \".h\". Definitions of functions that must be in the header should be moved to the end of the header file in a region surrounded by `#pragma region implementation`/`#pragma endregion implementation` blocks. Source code files use the extension \".cpp\" if they are compiled into a .lib or .exe.  Each file should typically contain a single class and its name should match the class name.\n\n### Projects\nA project is a set of source files that compile into a single executable or library, or that implement a single template library.\n\n### Project naming:\nProjects have camelCase names, preferably single word, such as \"model\", \"utilities\", \"compile\".\n\n### Directory, namespace, output naming:\nAll of the source code in a project should be defined in a namespace that shares the project name. All of the source files associated with a\nproject should be contained in a directory that shares the project name. The executable or library generated by a project should share the\nproject name.\n\n\n### Project directory structure:\nEach project is contained in a directory. The directory contains a CMakeLists.txt file. The directory typically contains the following subdirectories:\n\n* \"include\", for h files\n* \"src\" for cpp files (unless the project defines a template library without cpp files)\n* \"test\" for source files that define unit tests, invoked via ctest\n* \"doc\" for documentation that does not fit in the source files themselves. For example, complex math algorithms may require detailed documentation in a LaTeX file, which would live in the doc directory\n\nAdditionally, the directory can contain a README.md file.\n\n### Naming\nNames should be descriptive and self-evident, rather than terse. Use whole words rather than abbreviations. Example: use\n`GetFunctionDefinition` instead of `GetFuncDef`. Exceptions to this rule are:\n\n* Use \"Num\" as abbreviation for \"Number\"\n* Use `Size` for a member function that returns the size of an object (instead of `GetSize`)\n\nClasses, structs, enum classes:\nuse PascalCase, e.g., `class MyClass {};`\n\nuse camelCase for name of enum values e.g., `enum MyEnum { valueOne, valueTwo };`\n\nFunctions, member and non-member:\nuse PascalCase, e.g., `int GetValue() const { return _value; }`\n\nWhen possible, function names should be imperative mood verbs, e.g., `GetValue()` and `Permute()`. Specifically, accessor member functions\nshould start with `Get`, e.g., `GetOutputVector()`.\nExceptions to this rule are:\n\n* member functions that returns the size of an object, which can simply be `Size()`\n* type conversion functions, which can start with `To`, e.g., `ToString()`\n* functions that return the number of elements in a collection, which can start with `Num`, e.g. `NumVariables()`\n\nMethod and Function arguments: camelCase: e.g., `int GetValue(int rowIndex, int columnIndex);`\n\nMember variables:\nUse `_` (underscore) followed by camelCase, e.g., `_myMemberVariable`\n\nTemplate typenames:\nUse PascalCase and add the suffix \"Type\", e.g., `template <typename SparseVectorType>`\n\nTemplate variables that are not typenames: Use camelCase, e.g., `template <size_t size>`\n\n### File structure\nAll source code files should start with a header that specifies project name, file name, and author list (see example below)\n\n.h files should indicate `#pragma once` immediately after the header\n\nNext, indicate all `#include` statements. First, include files from the local project. Second, include files from other projects, grouping\nby project, ideally in an alphabetical order. Next include third-party library headers, like LLVM. Finally, include standard libraries.\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    //  Project:  Embedded Learning Library (ELL)\n    //  File:     FileName.h (libraryName)\n    //  Authors:  Author1, Author2\n    //\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    #pragma once\n\n    #include \"OtherClassFromThisProject.h\"\n\n    #include <proj1/include/ClassFromProjectProj1.h>\n    #include <proj1/include/AnotherClassFromProj1.h>\n\n    #include <proj2/include/ClassFromProj2.h>\n\n    #include <vector>\n    #include <string>\n\nIn certain cases, normal `#ifndef`-style include guards are required instead of using `#pragma once`. In this case, add the guard name\nin a comment after the `#endif`:\n\n    #ifndef MATRIX_H\n    #define MATRIX_H\n\n    ...\n\n    #endif // MATRIX_H\n\n### Function implementations\nAlmost all function implementations belong in .cpp and in the implementation region of .h files. The exception is short single-instruction implementations of\nparameterless functions, which should appear in the .h file on the same line as the function declaration. For example:\n\n    double GetValue() const { return _value; }  // inline implementation in .h file\n\n    double SetValue(double value);  // function has parameters - implementation belongs in .cpp or the implementation region of the .h file\n\n    void Next() { _iterator++; _count++; }  // wrong: multi-instruction implementations belong in .cpp or the implementation region of the .h files\n\n### Virtual functions\n`virtual` functions declared in derived classes should use the `override` or `final` keywords, not `virtual`. This is because `override` and\n`final` imply `virtual`. Removing `virtual` also protects against unknowingly adding another virtual member function instead of overriding a\nmember function from a base class, especially in the case where a virtual function has been removed from the base class.\n\n### Unused variables\nVariables that are declared or defined but never read from will emit an unused variable warning on all compilers. Avoid unused variables as\nmuch as possible. If you cannot remove the unused variable, then mark all such variables with the `UNUSED` macro. If a variable is only used\nin code that conditionally compiles for debug builds (such as `assert` expressions), it should be marked as such with the `DEBUG_USED`\nmacro, instead of the `UNUSED` macro. Both `UNUSED` and `DEBUG_USED` are defined in `Unused.h` in the `utilities` library.\n\n### Formatting\nUse clang-format to enforce correct formatting. Use the definitions in the file `.clang-format`, which is found in the main project directory.\n\n### Documentation\nAll public classes, functions, and variables that are declared in .h files should be preceded by an XML documentation block. The only\nexception is functions that are defined with =default or =delete, which should not be documented. Each documentation row should begin with\nthree slashes (///) and the first line in a documentation block should contain a summary tag. Follow this example:\n\n    /// <summary> Mathematical power operation. </summary>\n    ///\n    /// <param name=\"base\"> The base number. </param>\n    /// <param name=\"exponent\"> The exponent number. </param>\n    ///\n    /// <returns> Base number to the power of the exponent number. </returns>\n    double Power(double base, double exponent);\n\n    /// <summary> Performs an in-place sort. </summary>\n    ///\n    /// <typeparam name=\"RandomAccessContainerType\"> The container type, which must implement a square bracket operator. </typeparam>\n    /// <param name=\"container\"> [in,out] The container being sorted. </param>\n    template <typename RandomAccessContainerType>\n    void InplaceSort(RandomAccessContainerType& container);\n\n### Error Handling\n\nThe c \"assert\" function usually results in immediate termination of the program, so this should only be used in cases where it should never happen unless there is a logic error in our code.  To this end assert documents the existing invariants, preconditions and post conditions in the code.\n\nBad input parameters from our public API or bad data read from a file should not result in this kind of assert termination because it is hard to debug, and it provides no useful information to the caller.   Instead, throw the appropriate type of exception as defined in ~/libraries/utilities/include/Exception.h.  This includes the notImplemented case, which you can raise using throw utilities::LogicException(utilities::LogicExceptionErrors::notImplemented);\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.005859375,
          "content": "3.1.0\n"
        },
        {
          "name": "Versioning.md",
          "type": "blob",
          "size": 4.546875,
          "content": "# Guidance on ELL's versioning\n#### v1.0.0\n\nELL's versioning follows [Semantic Versioning 2.0.0](https://semver.org/) and\nhas the pattern of xx.yy.nn. The version number has an impact on\n * the ELL toolchain\n * the ELL Python API (\"ELL API\")\n * the emitted API that is the result of compiling a model (\"emitted API\").\n Currently, this could be either a C++ or a Python API.\n\nxx - represents the MAJOR version number.\n\nyy - represents the MINOR version number.\n\nnn - represents the PATCH version number.\n\nAn omission of a component of the version number indicates that it applies to\nall series of versions that satisfy the given constraint. For example, version\n2 represents all versions of the form 2.yy.nn using the aforementioned\nrepresentation. Similarly, version 1.3 represents all versions of the form\n1.3.nn.\n\n**Incrementing the MAJOR version number** should be done when\n * a major new feature is added to the ELL toolchain and is showcased by a new\n tutorial demonstrating this feature, when applicable\n   * for example, \"Getting started with audio keyword spotting on the Raspberry\n   Pi\" would cause an increment, but \"Active cooling your Raspberry Pi 3\" would\n   not, since it is not related to the ELL toolchain.\n * a major internal change has been made to the ELL toolchain\n   * for example, a change in algorithms used that results in a significant\n   performance improvement of emitted models\n * a large feature has been added to the ELL API or emitted API\n * the ELL API or emitted API has been changed in a way that is **not**\n backwards compatible\n * a breaking change has been made to ELL's model serialization format\n\n**Incrementing the MINOR version number** should be done when\n * there is customer-facing behavior that has changed when models are compiled\n    * things such as changing the way a model is (de)serialized\n    * new types of models can be compiled\n    * for example, changing the default convolution method that gets selected\n    would require an increment.\n * new features are added to the ELL API or emitted API that are backwards\n compatible\n\n**Incrementing the PATCH version number** should be done when\n * anything else changes within the ELL toolchain, Python API, or emitted API\n   * bug fixes, performance improvements, refactoring of code\n\nNot all changes to the repository warrant a version change. For example,\n * test code changes\n * script updates that don't impact use of the ELL toolchain\n * reformatting of code for styling changes\n * tutorial or documentation updates that amount to typo corrections or style\n updates\n\nA version update can also be made outside of the aforementioned reasons as a\nmeans to indicate significant development\n\nThe goal of the ELL API backwards compatibility is to support code written\nagainst the ELL API of an older version of ELL. As long as the major version of\nELL is the same, the code will continue to work as intended. For example, code\nauthored against the ELL v1.2 API will continue to work for ELL v1.8 API, but\nnot the ELL v2.0 API.\n\nThe goal of the emitted API backwards compatibility is to support code written\nagainst the emitted API created by an older version of ELL. As long as the\nmajor version of ELL is the same, the code will continue to build and work as\nintended. For example, code authored against the emitted API of a model\ncompiled with v1.2 of the ELL toolchain will continue to build and work against\nthe emitted API of the model when compiled with v1.8 of the ELL toolchain, but\nnot with the emitted API of the model (assuming the model is properly upgraded)\nwhen compiled with v2.0 of the ELL toolchain.\n\nThe goal of the ELL toolchain backwards compatibility is to support the\ncompilation of models that have been created by an older version of ELL. As\nlong as the major version of ELL is the same, the toolchain of a newer version\nof ELL can compile a model that has been created for an older version of ELL.\nNote that forward compatibility is not supported, i.e., the version used to\ncreate the model is the **minimum** required version of ELL to compile the\nmodel.\n\n|v1.2           | v1.5          | v1.8          | v2.1          | v2.3          |\n|---------------|---------------|---------------|---------------|---------------|\n| Authored      | Supported     | Supported     | Not supported | Not supported |\n| Not supported | Authored      | Supported     | Not supported | Not supported |\n| Not supported | Not supported | Authored      | Not supported | Not supported |\n| Not supported | Not supported | Not supported | Authored      | Supported     |\n| Not supported | Not supported | Not supported | Not supported | Authored      |\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 1.4970703125,
          "content": "# Setup\ntitle:        Embedded Learning Library\ntagline:      The Embedded Learning Library (ELL) allows you to build and deploy machine-learned pipelines onto embedded platforms\nbaseurl:      \"/ELL\"\n\n# About/contact\nauthor:\n  name:       Microsoft\n#  url:        https://github.com/Microsoft/ELL \n\n# Gems\nplugins:\n  - jekyll-relative-links\n\ndestination: ./_site\nlayouts_dir:     ./_layouts\ndata_dir: ./_data\n\nsource: docs\n\nrelative_links:\n  enabled:     true\n  collections: false\n\n# Handling Reading\nsafe:         false\ninclude:      [\".htaccess\"]\nexclude:      []\nkeep_files:   [\".git\", \".svn\"]\nencoding:     \"utf-8\"\nmarkdown_ext: \"markdown,mkdown,mkdn,mkd,md\"\n\n# Filtering Content\nshow_drafts: null\nlimit_posts: 0\nfuture:      true\nunpublished: false\n\n# Plugins\nwhitelist: []\n\n# Conversion\nmarkdown:    kramdown\nhighlighter: rouge\nlsi:         false\nexcerpt_separator: \"\\n\\n\"\n\n# Serving\ndetach:  false\nport:    4000\nhost:    127.0.0.1\n\ntimezone:      null\n\nquiet:    false\ndefaults: []\n\n# Markdown Processors\nrdiscount:\n  extensions: []\n\nredcarpet:\n  extensions: []\n\nkramdown:\n  auto_ids:       true\n  footnote_nr:    1\n  entity_output:  as_char\n  toc_levels:     1..6\n  smart_quotes:   lsquo,rsquo,ldquo,rdquo\n  enable_coderay: false\n\n  syntax_highlighter_opts:\n    coderay_wrap:              div\n    coderay_line_numbers:      inline\n    coderay_line_number_start: 1\n    coderay_tab_width:         4\n    coderay_bold_every:        10\n    coderay_css:               style\n\nsass:\n    sass_dir: _sass\n\nliquid:\n  error_mode: strict\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "external",
          "type": "tree",
          "content": null
        },
        {
          "name": "interfaces",
          "type": "tree",
          "content": null
        },
        {
          "name": "libraries",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.2626953125,
          "content": "configparser\nopencv-python\ndask\nflake8\npython-dateutil\nlibrosa\nmatplotlib\nnumpy\nonnx\nparamiko\nparse\npsutil\npyaudio\npython_speech_features\nrequests\nserial\n# optional (very large):\n# https://download.pytorch.org/whl/cu90/torch-1.0.0-cp36-cp36m-win_amd64.whl\n# torchvision"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}