{
  "metadata": {
    "timestamp": 1736565881168,
    "page": 840,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "hzeller/timg",
      "stars": 2058,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.5146484375,
          "content": "# Formatting used in this project\nBasedOnStyle: Google\nAccessModifierOffset: -4\nAlignAfterOpenBracket: Align\nAlignArrayOfStructures: Left\nAlignConsecutiveAssignments: Consecutive\nAlignConsecutiveBitFields: true\nAlignConsecutiveMacros: true\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: true\nAllowShortEnumsOnASingleLine: true\nBreakBeforeBraces: Custom\nBraceWrapping:\n  BeforeElse: true\n  BeforeCatch: true\nContinuationIndentWidth: 4\nIndentAccessModifiers: false\nIndentCaseLabels: false\nIndentWidth: 4\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1552734375,
          "content": "root = true\n\n[*]\ncharset = utf-8\ntrim_trailing_whitespace = true\nend_of_line = lf\ninsert_final_newline = true\n\n[*.{cc,h}]\nindent_style = space\nindent_size = 4\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.01171875,
          "content": "*.o\n*~\ntimg\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 3.03515625,
          "content": "cmake_minimum_required(VERSION 3.10)\n\nproject(timg VERSION 1.6.1 LANGUAGES CXX)\n\noption(WITH_VIDEO_DECODING \"Enables video decoding feature\" ON)\noption(WITH_VIDEO_DEVICE \"Enables reading videos from devices e.g. v4l2 (requires WITH_VIDEO_DECODING)\" ON)\n\n# Options that should be typically on, but could be disabled for special\n# applications where less dependencies are required\noption(WITH_GRAPHICSMAGICK \"Enable general image loading with Graphicsmagick. You typically want this.\" ON)\noption(WITH_TURBOJPEG \"Optimized JPEG loading. You typically want this.\" ON)\noption(WITH_RSVG \"Use librsvg to open SVG images.\" ON)\noption(WITH_POPPLER \"Use poppler to render PDFs\" ON)\noption(WITH_STB_IMAGE \"Use STB image, a self-contained albeit limited image loading and lower quality. Use if WITH_GRAPHICSMAGICK is not possible and want to limit dependencies. Default on to be used as fallback.\" ON)\noption(WITH_QOI_IMAGE \"QOI image format\" ON)\n\n# Compile-time option for specialized\noption(WITH_OPENSLIDE_SUPPORT \"Enables support to scientific OpenSlide formats\" OFF)\n\n# Output formats\noption(WITH_LIBSIXEL \"Provide sixel output which is supported by some older terminals such as xterm\" ON)\n\n# Note: The version string can be ammended with -DDISTRIBUTION_VERSION, see src/timg-version.h.in\noption(TIMG_VERSION_FROM_GIT \"Get the program version from the git repository\" ON)\n\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)\n\ninclude(FindPkgConfig)\ninclude(GNUInstallDirs)\n\nif(TIMG_VERSION_FROM_GIT)\n  find_package(Git REQUIRED)\n  include(GetGitRevisionDescription)\nendif()\n\n# Ubuntu 20.04 does not provide pkg-config, so use find_library() as fallback\npkg_check_modules(LIBDEFLATE_PKGCONFIG IMPORTED_TARGET libdeflate)\nif (NOT LIBDEFLATE_PKGCONFIG_FOUND)\n  find_library(LIBDEFLATE_LIBRARY NAMES deflate)\n  message(\"Manual libdeflate lookup ${LIBDEFLATE_LIBRARY}\")\nendif()\n\nif(WITH_LIBSIXEL)\n  pkg_check_modules(LIBSIXEL REQUIRED IMPORTED_TARGET libsixel)\nendif()\n\nif(WITH_TURBOJPEG)\n  pkg_check_modules(TURBOJPEG REQUIRED IMPORTED_TARGET libturbojpeg)\n  pkg_check_modules(EXIF REQUIRED IMPORTED_TARGET libexif)\nendif()\n\nif(WITH_GRAPHICSMAGICK)\n  pkg_check_modules(GRAPHICSMAGICKXX IMPORTED_TARGET REQUIRED GraphicsMagick++)\nendif()\n\nif(WITH_RSVG)\n  pkg_check_modules(RSVG REQUIRED IMPORTED_TARGET librsvg-2.0)\n  pkg_check_modules(CAIRO REQUIRED IMPORTED_TARGET cairo)\nendif()\n\nif(WITH_POPPLER)\n  pkg_check_modules(POPPLER REQUIRED IMPORTED_TARGET poppler-glib)\n  pkg_check_modules(CAIRO REQUIRED IMPORTED_TARGET cairo)\nendif()\n\nif(WITH_OPENSLIDE_SUPPORT)\n  pkg_check_modules(OPENSLIDE IMPORTED_TARGET REQUIRED openslide)\nendif()\n\nif(WITH_VIDEO_DECODING)\n  pkg_check_modules(LIBAV IMPORTED_TARGET REQUIRED libavcodec libavutil libavformat)\n  pkg_check_modules(AVUTIL REQUIRED IMPORTED_TARGET libavutil)\n  pkg_check_modules(SWSCALE IMPORTED_TARGET REQUIRED libswscale)\n  if (WITH_VIDEO_DEVICE)\n    pkg_check_modules(LIBAV_DEVICE IMPORTED_TARGET REQUIRED libavdevice)\n  endif()\nendif()\n\nfind_package(Threads)\n\nadd_subdirectory(src)\nadd_subdirectory(man)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 17.66796875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 27.51953125,
          "content": "<img src=\"img/logo.svg\" align=\"left\" width=\"165\" alt=\"timg logo\" title=\"timg\">\n<!-- github markdown eats style, otherwise we could use em-units for width. -->\n\nTerminal Image and Video Viewer\n===============================\n\n[![License: GPL v2](https://img.shields.io/badge/License-GPL%20v2-blue.svg)](https://github.com/hzeller/timg/blob/main/LICENSE) &nbsp;\n[![Ubuntu Build](../../workflows/CI/badge.svg)](../../actions/workflows/ubuntu.yml)\n[![macOS Build](../../workflows/macOS%20Build/badge.svg)](../../actions/workflows/macos.yml)\n[![macOS Brew Building HEAD](../../workflows/macOS%20Brew%20Building%20HEAD/badge.svg)](../../actions/workflows/macos-brew.yml)\n\n\n### https://timg.sh/\n\nA user-friendly terminal image viewer that uses graphic capabilities of\nterminals (Sixel, Kitty or iterm2), or 24-Bit color capabilities and unicode\ncharacter blocks if these are not available.\n\nOn terminals that implement the [sixel] protocol, the\n[Kitty Graphics Protocol], or the [iTerm2 Graphics Protocol] this displays\nimages in full resolution.\n\nBut even the fallback block display is usable.\n![](./img/sunflower-term.png)\n\nDisplays regular images, plays animated gifs, scrolls static images and\nplays videos.\n\nUseful if you want to have a quick visual check without leaving the comfort\nof your shell and having to start a bulky image viewer. Sometimes this is the\nonly way if your terminal is connected remotely via ssh. And of course if you\ndon't need the resolution. While icons typically fit pixel-perfect, larger\nimages are scaled down to match the resolution.\n\nThe command line accepts any number of image/video filenames that it shows\nin sequence one per page or in a grid in multiple columns, depending on your\nchoice of `--grid`. The output is emitted in-line with minimally messing\nwith your terminal, so you can simply go back in history using your terminals'\nscroll-bar (Or redirecting the output to a file allows you to later\nsimply `cat` that file to your terminal. Even `less -R` seems to be happy with\nit).\n\n#### Pixelation\nOn a regular terminal, block-characters are used to output images. Half blocks\npresent pixels color-accurately, and quarter blocks provide a higher spatial\nresolution at the expense of slightly worse color accuracy. These modes should\nbe compatible with most common terminals that support UTF8 and 24Bit color.\n\nIf you are on a [Kitty][Kitty Graphics Protocol], [iTerm2], or [wezterm]\nterminal, or a terminal that supports the sixel protocol, images can be shown\nin full resolution.\n\n-p kitty,  -p iterm2, or -p sixel | -p quarter | -p half |\n----------------------------------|------------|---------|\n ![](img/pixelation-kitty.png) | ![](img/pixelation-quarter.png) | ![](img/pixelation-half.png) |\n\n#### Grid display\n\nImages can be shown in a grid, which is very useful if you quickly want to\nbrowse through a lot of images. You can choose to show the filename as title,\nso it is easy to find exactly the filename you're looking for (The following\ngrid uses `--grid=2` and is pixelated `-p iterm2`).\n\n![Grid view of 4 pictures](img/grid-timg-wezterm.png)\n<details>\n<summary>This is how the same grid looks if no high-res mode is available with - `-p quarter` ...</summary>\n\n![](./img/grid-timg.png)\n\n</details>\n\n### Synopsis\n\n```\nusage: timg [options] <image/video> [<image/video>...]\nOptions (most common first):\n        -p<pixelation> : Pixelation: 'h' = half blocks    'q' = quarter blocks\n                                     'k' = kitty graphics 'i' = iTerm2 graphics\n                                     's' = sixel graphics\n                         Default: Auto-detect graphics, otherwise 'quarter'.\n        --grid=<cols>[x<rows>] : Arrange images in a grid (\"contact sheet\").\n        -C, --center   : Center image horizontally in available cell.\n        --title[=<fmt_str>]: Print title above each image. Accepts the following\n                         format parameters: %f = full filename; %b = basename\n                                            %w = image width; %h = height\n                                            %D = internal decoder used\n                         If no parameter is given, defaults to \"%f\"\n                         Env-var override with TIMG_DEFAULT_TITLE\n        -f<filelist>   : Read newline-separated list of image files to show.\n                         Relative filenames are relative to current directory.\n                         (-f and -F can be provided multiple times.)\n        -F<filelist>   : like -f, but relative filenames considered relative\n                         to the directory containing the filelist.\n        -b<str>        : Background color to use behind alpha channel. Format\n                         color name like 'yellow', '#rrggbb', 'auto' or 'none'.\n                        'auto' is terminal background color. (default 'auto').\n        -B<str>        : Checkerboard pattern color to use on alpha.\n        --pattern-size=<n> : Integer factor scale of the checkerboard pattern.\n        --auto-crop[=<pre-crop>] : Crop away all same-color pixels around image.\n                         The optional pre-crop is the width of border to\n                         remove beforehand to get rid of an uneven border.\n        --rotate=<exif|off> : Rotate according to included exif orientation.\n                              or 'off'. Default: exif.\n        -W, --fit-width: Scale to fit width of available space, even if it\n                         exceeds height.\n        -U, --upscale[=i]: Allow Upscaling. If an image is smaller than the\n                         available frame (e.g. an icon), enlarge it to fit.\n                         Optional parameter 'i' only enlarges in integer steps.\n        --clear[=every]: Clear draw area first. Optional argument 'every' will\n                         clear before every image (useful with -w/-wr,\n                         but not with --grid)\n        -V             : Directly use Video subsystem. Don't probe image\n                         decoding first (useful, if you stream video from stdin)\n        -I             : Only  use Image subsystem. Don't attempt video decoding\n        -w<seconds>    : Wait time between images (default: 0.0).\n        -wr<seconds>   : like above, but wait time between rows in grid.\n        -a             : Switch off anti-aliasing (default: on).\n        -g<w>x<h>      : Output geometry in character cells. Partial geometry\n                         leaving out one value -g<w>x or -gx<h> is possible,\n                         the other value it then derived from the terminal size.\n                         Default derived from terminal size is 160x50\n        -o<outfile>    : Write to <outfile> instead of stdout.\n        -E             : Don't hide the cursor while showing images.\n        --compress[=level]: Only for -pk or -pi: Compress image data. More\n                         CPU use, but less used bandwidth. (default: 1)\n        --threads=<n>  : Run image decoding in parallel with n threads\n                         (Default 3, 3/4 #cores on this machine)\n        --color8       : Choose 8 bit color mode for -ph or -pq\n        --version      : Print detailed version including used libraries.\n                         (v1.5.3+)\n        --verbose      : Print some stats after images shown.\n        -h             : Print this help and exit.\n        --help         : Page through detailed manpage-like help and exit.\n\n  Scrolling\n        --scroll[=<ms>]       : Scroll horizontally (optionally: delay ms (60)).\n        --delta-move=<dx:dy>  : delta x and delta y when scrolling (default:1:0)\n\n  For Animations, Scrolling, or Video\n  These options influence how long/often and what is shown.\n        --loops=<num> : Number of runs through a full cycle. -1 means 'forever'.\n                        If not set, videos loop once, animated images forever\n                        unless there is more than one file to show.\n        --frames=<num>: Only show first num frames (if looping, loop only these)\n        --frame-offset=<num>: Start animation/video at this frame\n        -t<seconds>   : Stop after this time, independent of --loops or --frames\n```\n\n### Examples\n```bash\ntimg some-image.jpg                # display a static image\ntimg -g50x50 some-image.jpg        # display image fitting in box of 50x50 pixel\n\n# Multiple images\ntimg *.jpg                         # display all *.jpg images\ntimg --title *.jpg                 # .. show name in title (short option -F)\ntimg --title=\"%b (%wx%h)\" *.jpg    # show short filename and image size as title\ntimg --grid=3x2 *.jpg              # arrange in 3 columns, 2 rows in terminal\ntimg --fit-width --grid=3 *.jpg    # maximize use of column width (short: -W)\ntimg --grid=3 -t5 *.gif            # Load gifs one by one in grid. Play each for 5sec.\n\n# Putting it all together; making an alias to list images; let's call it ils = 'image ls'\n# This prints images two per row with a filename title. Only showing one frame\n# so for animated gifs only the first frame is shown statically.\n# With hi-res iTerm or Kitty terminals, consider more columns, e.g --grid=4x1\n# Put this line in your ~/.bashrc\nalias ils='timg --grid=2x1 --upscale=i --center --title --frames=1 '\n\n# ... using this alias on images outputs a useful column view\nils *.jpg *.gif\n\n# Read the list of images to load from a file. One filename per line.\nlocate \"*.jpg\" > /tmp/allimg.txt ; timg -f /tmp/allimg.txt\n\n# Show a PDF document, use full width of terminal, trim away empty border\ntimg -W --auto-crop some-document.pdf\ntimg --frames=1 some-document.pdf    # Show a PDF, but only first page\n\n# Reading images from a pipe. The filename '-' means 'read from stdin.\n# In this example generating a QR code and have timg display it:\nqrencode -s1 -m2 \"http://timg.sh/\" -o- | timg -\n\n# Here, using gnuplot output right in the shell\necho \"set terminal png; plot sin(x);\" | gnuplot | timg -\n\n# Open an image from a URL. URLs are internally actually handled by the\n# video subsystem, so it is treated as a single-frame 'film', nevertheless,\n# many image-URLs just work. But some image-specific features, such as trimming\n# or scrolling, won't work.\ntimg --center https://i.kym-cdn.com/photos/images/newsfeed/000/406/282/2b8.jpg\n\n# Sometimes, it is necessary to manually crop a few pixels from an\n# uneven border before the auto-crop finds uniform color all-around to remove.\n# For example with --auto-crop=7 we'd remove first seven pixels around an image,\n# then do the regular auto-cropping.\n#\n# The following example loads an image from a URL; --auto-crop does not work with\n# that, so we have to get the content manually, e.g. with wget. Piping to\n# stdin works; in the following example the stdin input is designated with the\n# special filename '-'.\n#\n# For the following image, we need to remove 3 pixels all around before\n# auto-crop can take over removing the remaining whitespace successfully:\nwget -qO- https://imgs.xkcd.com/comics/a_better_idea.png | timg --auto-crop=3 -\n\ntimg multi-resolution.ico   # See all the bitmaps in multi-resolution icons-file\ntimg --frames=1 multi-resolution.ico  # See only the first bitmap in that file\n\ntimg some-video.mp4         # Watch a video.\n\n# Play content of webcam (This assumes video4linux2, but whatever input devices\n# are supported on your system with libavdevice-dev)\ntimg /dev/video0\n\n# If you read a video from a pipe, it is necessary to skip attempting the\n# image decode first as this will consume bytes from the pipe. Use -V option.\nyoutube-dl -q -o- -f'[height<480]' 'https://youtu.be/dQw4w9WgXcQ' | timg -V -\n\n# Show animated gif, possibly limited by timeout, loops or frame-count\ntimg some-animated.gif      # show an animated gif forever (stop with Ctrl-C)\ntimg -t5 some-animated.gif                   # show animated gif for 5 seconds\ntimg --loops=3 some-animated.gif             # Loop animated gif 3 times\ntimg --frames=3 --loops=1 some-animated.gif  # Show only first three frames\ntimg --frames=1 some-animated.gif            # Show only first frame. Static image.\n\n# Scroll\ntimg --scroll some-image.jpg       # scroll a static image as banner (stop with Ctrl-C)\ntimg --scroll=100 some-image.jpg   # scroll with 100ms delay\n\n# Create a text with the ImageMagick 'convert' tool and send to timg to scroll\nconvert -size 1000x60 xc:none -fill red -gravity center -pointsize 42 \\\n        -draw 'text 0,0 \"Watchen the blinkenlights...\"' -trim png:-   \\\n      | timg --scroll=20 -\n\n# Scroll direction. Horizontally, vertically; how about diagonally ?\ntimg --scroll --delta-move=1:0 some-image.jpg  # scroll with dx=1 and dy=0, so horizontally.\ntimg --scroll --delta-move=-1:0 some-image.jpg # scroll horizontally in reverse direction.\ntimg --scroll --delta-move=0:2 some-image.jpg  # vertical, two pixels per step.\ntimg --scroll --delta-move=1:1 some-image.jpg  # diagonal, dx=1, dy=1\n\n# Background color for transparent images (SVG-compatible strings are supported)\n# and generally useful if you have a transparent PNG that is otherwise hard\n# to see on your terminal background.\ntimg -b auto some-transparent-image.png  # use terminal background if possible\ntimg -b none some-transparent-image.png  # Don't use blending\ntimg -b lightgreen some-transparent-image.png\ntimg -b 'rgb(0, 255, 0)' some-transparent-image.png\ntimg -b '#0000ff' some-transparent-image.png\n\n# Checkerboard/Photoshop-like background on transparent images\ntimg -b lightgray -B darkgray some-transparent-image.png\n\n# .. with adjustable size.\ntimg -b lightgray -B darkgray --pattern-size=4 some-transparent-image.png\n```\n\n##### Partially transparent icon on champagne-colored terminal emulator\n\n-b auto  | -b lightgreen | -b lightgreen -B yellow | -b none  |\n---------|---------------|-------------------------|----------|\n![](img/alpha-bauto.png) | ![](img/alpha-blightgreen.png)  | ![](img/alpha-blightgreen-Byellow.png) | ![](img/alpha-bnone.png)\n\n--pattern-size=1                       | --pattern-size=4 |\n---------------------------------------|--------------------------------------|\n![](img/alpha-blightgreen-Byellow.png) | ![](img/alpha-blightgreen-Byellow-4.png) |\n\n#### Include in file browsers\n\nThere are many terminal based file-browsers. Adding `timg` to their\nconfiguration is usually straight forward.\n```\n# Another use: can run use this in a fzf preview window:\necho some-image.jpg | fzf --preview='timg -E --frames=1 --loops=1 -g $(( $COLUMNS / 2 - 4 ))x$(( $FZF_PREVIEW_LINES * 2 )) {}'\n\n# Use in vifm. ~/.config/vifm/vifmrc\nfilextype *.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,\n         \\*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,\n         \\*.as[fx]\n        \\ {View in timg}\n        \\ timg --title --center --clear %f,\n\nfilextype *.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm\n        \\ {View in timg}\n        \\ timg --title --center --clear %f; read -n1 -s -r -p \"Press any key to return\",\n```\n\n#### Other fun things\n\n```bash\n# Also, you could store the output and cat later to your terminal...\ntimg -g80x40 some-image.jpg > /tmp/imageout.txt\ncat /tmp/imageout.txt\n\n# Of course, you can redirect the output to somewhere else. I am not suggesting\n# that you rickroll some terminal by redirecting timg's output to a /dev/pts/*\n# you have access to, but you certainly could...\n\n# Of course, you can go really crazy by storing a cycle of an animation. Use xz\n# for compression as it seems to deal with this kind of stuff really well:\ntimg -g60x30 --loops=10 nyan.gif | xz > /tmp/nyan.term.xz\n\n# ..now, replay the generated ANSI codes on the terminal. Since it would\n# rush through as fast as possible, we have to use a trick to wait between\n# frames: Each frame has a 'move cursor up' escape sequence that contains\n# an upper-case 'A'. We can latch on that to generate a delay between frames:\nxzcat /tmp/nyan.term.xz | gawk '/\\[.*A/ { system(\"sleep 0.1\"); } { print $0 }'\n\n# You can wrap all that in a loop to get an infinite repeat.\nwhile : ; do xzcat... ; done\n\n# (If you Ctrl-C that loop, you might need to use 'reset' for terminal sanity)\n```\n\n## Terminal considerations\n\nThis section contains some details that you only might need to ever look at if\nthe output is not as expected.\n\n### Many terminals support direct hi-res image output\n\nThe [Kitty], [iTerm2], and [wezterm] terminals as well as other\nmodern terminals such as [Konsole] or the terminal in [vscode] allow to\ndirectly display high-resolution pictures.\n\nIf `timg` is running in such a terminal, it will attempt to auto-detect that\nfeature and use that mode. If your terminal does support the feature but\ncan't be auto-detected, you can explicitly choose the pixelation option\nin question with command line flag or environment variable (see `timg --help`).\n(Please file an issue with `timg` if auto-detect does not work).\n\n#### VSCode Terminal\nThe terminal in [vscode] to display images in high-resolution, you\nneed to enable the _Terminal > Integrated: Enable Images_ setting in vscode.\nOtherwise you have to explicitly choose `-pq` to show the 'block' images.\n\n#### In tmux\nThe terminal multiplexer `tmux` prevents high-resolution images as it filters\nout the escape codes.\nHowever, with some ... workarounds, `timg` can show such pictures\nin `tmux` >= version 3.3 iff in a [kitty]-terminal.\n\nSo if you need hi-res pictures in tmux, use a kitty terminal; you\nalso have to explicitly set the pixelation to `-pk` (see `timg --help` for\ndetails).\n\n#### Sixel\nOther terminals support an older high-resolution [sixel]-protocol, which you\ncan choose with `-ps`. Note, for this to work in xterm, you need to invoke it\nwith `xterm -ti vt340`.\n\n#### High resolution and low bandwidth\nIf watching hi-res videos remotely is too slow (due to high bandwidth\nrequirements or simply because your terminal has to do more work), try\nsetting the environment variable `TIMG_ALLOW_FRAME_SKIP=1` to allow timg\nleaving out frames to stay on track (see `timg --help`, environment variable\nsection). You can also attempt to set the `--compress` level higher.\n\n### Half block and quarter block rendering\n\nTerminals that do not support high-resolution image output can still show\nimages by virtue of showing colored blocks.\n\nThe half block pixelation (`-p half`) uses the the unicode\ncharacter [▄](U+2584 - 'Lower Half Block')\n_or_ [▀](U+2580 - 'Upper Half Block') (depending on the\n[`TIMG_USE_UPPER_BLOCK`](#half-block-choice-of-rendering-block)\nenvironment variable). If the top and bottom color is the same, a simple\nspace with background color is used.\n\nThe quarter block pixelation (`-p quarter`) uses eight different blocks.\n\nWith both of these pixelations, choosing the foreground color and background\n24-bit color, `timg` can simulate 'pixels'. With the half-block pixelation,\nthis can assign the correct color to the two 'pixels' available in one\ncharacter cell, in the quarter pixelation, four 'pixels' have to share two\ncolors, so the color accuracy is slighlty worse but it allows for higher spatial\nresolution.\n\nThe `-p` command line flag allows to choose between `-p half`, `-p quarter`,\nalso possible to just shorten to `-ph` and `-pq`. Default is `-pq`\n(see [above](#pixelation) how this looks like).\n\nTerminals that don't support Unicode or 24 bit color will probably not show\na very pleasant output. For terminals that only do 8 bit color, use the\n`--color8` command line option.\n\n\n#### Half block: Choice of rendering block\n\nBy default, `timg` uses the 'lower half block' to show the pixels in `-p half`\nmode. Depending on the font the terminal is using, using the upper block might\nlook better, so it is possible to change the default with an environment\nvariable.\nPlay around with this value if the output looks poor on your terminal. I found\nthat on my system there is no difference for [`konsole`][konsole] or `xterm` but the\n[`cool-retro-term`][cool-retro-term] looks better with the lower block, this is why it is the default.\n\nIn some terminals, such as [alacritty] (and only with certain font sizes),\nthere seems to be the opposite working better. To change, set this environment\nvariable:\n\n```\nexport TIMG_USE_UPPER_BLOCK=1   # change default to use upper block.\n```\n(this only will work fully with `-p half`. In `-p quarter` mode, there are\nadditional blocks that can't be worked around)\n\n##### What a problematic choice of block looks like\n\nThe image generally looks a bit 'glitchy' if the terminal leaves little\nspace between blocks, so that the wrong background color shows on a single\nline between pixels.\nThis is likely not intended by the terminal emulator and possibly happening\non rounding issues of font height or similar.\n\nAnyway, we can work around it (fully in `-p half`, partially in `-p quarter`\nmode). In the following illustration you see how that looks like. If you\nsee that, change the `TIMG_USE_UPPER_BLOCK` environment variable.\n\n\nGlitchy. Change TIMG_USE_UPPER_BLOCK| Looks good\n------------------------------------|-------------------------------|\n![](img/needs-block-change.png)     | ![](img/block-ok.png)|\n\n#### Other artifacts\n\nSome terminals leave one pixel of horizontal space between characters that\nresult in fine vertical lines in the image.\nThat can't be worked around, send a bug or better pull request to your terminal\nemulator.\n\n#### Wrong font aspect ratio\n\nUsually, timg attempts to determine the font aspect ratio and apply some\ncorrection if it is off from the nominal 1:2. But if you notice that the\nimage displayed is not quite the right aspect ratio because of the terminals\nfont used, you can set an environment variable `TIMG_FONT_WIDTH_CORRECT` with\na factor to make it look correctly.\n\nIncreasing the visual width by 10% would be setting the value to 1.1 for\ninstance.\n\n```\nexport TIMG_FONT_WIDTH_CORRECT=1.1\ntimg myimage.jpg\n```\n\nThis is an environment variable, so that you can set it once to best fit your\nterminal emulator of choice and don't have to worry about later.\n\n##### Example\nTerminal font too narrow   | Correct. Here with `TIMG_FONT_WIDTH_CORRECT=1.375`\n---------------------------|-------------------------------|\n![](img/aspect-wrong.png)  | ![](img/aspect-right.png)|\n\n\n#### Sixel videos scroll or grid view looks like staircase\n\nIf you have a Sixel terminal in which you observe artifacts such as videos\n'scrolling' or the grid view not having images vertically aligned, you might\nneed to set the `TIMG_SIXEL_NEWLINE_WORKAROUND=1` environment variable.\n\nUnfortuantely, some Sixel terminals disagree if there is a newline after an\nimage or not.\n\n## Installation\n### Install pre-built package\n\n<a href=\"https://repology.org/project/timg/versions\">\n<img src=\"https://repology.org/badge/vertical-allrepos/timg.svg\" alt=\"Packaging status\" align=\"right\">\n</a>\n\n#### Debian-based systems\n\n```bash\nsudo apt install timg\n```\n\n#### NixOS or Nix package manager\n\n```bash\nnix-env -i timg\n```\n\n#### macOS\n\n```bash\nbrew install timg\n```\n\n#### Use AppImage\n\nThe [timg release page](https://github.com/hzeller/timg/releases/latest) also\nhas a _minimal_ binary in the [AppImage package format][AppImage].\nTo keep the size small, it does _not_ include video decoding or some more\nfancy image formats. It is good for many contexts or if you want to try out\n`timg`, but for a full-featured binary, use one from your distribution or\nbuild from source.\n\n### Build and Install from source\n\n#### Get dependencies on Debian/Ubuntu\n\n```bash\nsudo apt install cmake git g++ pkg-config\nsudo apt install libgraphicsmagick++-dev libturbojpeg-dev libexif-dev libswscale-dev libdeflate-dev librsvg2-dev libcairo-dev # needed libs\n\n# For sixel output.\nsudo apt install libsixel-dev\n\n# If you want to include video decoding, also install these additional libraries\nsudo apt install libavcodec-dev libavformat-dev\n\nsudo apt install libavdevice-dev # If you want to read from video devices such as v4l2\n\nsudo apt install libopenslide-dev # If you want to add OpenSlide images support\nsudo apt install libpoppler-glib-dev  # if WITH_POPPLER enabled.\n\nsudo apt install pandoc  # If you want to recreate the man page\n```\n\n#### Get dependencies on NixOS or Nix package manager\n\nThe dependencies are set-up in the shell.nix, so you're ready to go opening\na nix shell\n\n```bash\nnix-shell\n```\n\n#### Get dependencies on Fedora\n\n```bash\nsudo dnf install cmake git g++ pkg-config\nsudo dnf install GraphicsMagick-c++-devel turbojpeg-devel libexif-devel libswscale-free-devel librsvg2-devel cairo-devel libdeflate-devel poppler-glib-devel libsixel-devel qoi-devel\n\n# If you want to include video decoding, also install these additional libraries\nsudo dnf install libavcodec-free-devel libavformat-free-devel libavdevice-free-devel openslide-devel\n\nsudo dnf install pandoc  # If you want to recreate the man page\n```\n\n#### Get dependencies on macOS\n\n```bash\n# Homebrew needs to be available to install required dependencies\nbrew install cmake git GraphicsMagick webp jpeg-turbo libexif librsvg cairo  # needed libs\n\n# If you want to include video decoding, install these additional libraries\nbrew install ffmpeg\n\n# If you want to add OpenSlide images support\nbrew install openslide\n\nbrew install pandoc  # If you want to recreate the man page\n```\n\n#### Get repo and compile timg\n\nIn the script below you see that the build system allows for some\ncompile-time choices:\n\n  * **`WITH_LIBSIXEL`** Use libsixel to output images in [sixel] graphics\n     format. Default **ON**.\n  * **`WITH_VIDEO_DECODING`** allow for video decoding. Requires ffmpeg-related\n     libraries. You typically want this **ON** (default)\n     * **`WITH_VIDEO_DEVICE`** this allows for accessing connected video\n     devices, e.g. you can watch your webcam input (requires\n     `WITH_VIDEO_DECODING`).\n  * **`WITH_GRAPHICSMAGICK`** This is the main image loading library so you\n    typically want this **ON** (default).\n  * **`WITH_TURBOJPEG`** If enabled, uses this for faster jpeg file loading.\n     You typically want this **ON** (default).\n  * **`WITH_POPPLER`** High-quality and faster PDF renderer. Needs poppler\n    and cairo.\n    If not compiled-in, will fallback to GraphicsMagick, but that typically\n    results in lower quality renderings. Typically want this **ON** (default).\n  * **`WITH_RSVG`** High-quality SVG renderer. Needs librsvg and cairo.\n    If not compiled-in, will fallback to GraphicsMagick, but that typically\n    results in lower quality renderings. Typically want this **ON** (default).\n  * **`WITH_OPENSLIDE_SUPPORT`** Openslide is an image format used in scientific\n    applications. Rarely used, so default off, switch ON if needed.\n  * **`WITH_QOI_IMAGE`** Allow decoding of Quite Ok Image format [QOI]. Small\n     and simple, default **ON**.\n  * **`WITH_STB_IMAGE`** Compile the simpler STB image library directly into\n    the timg binary in cases where Graphicsmagick is not suitable for\n    dependency pruning reasons; output can be slower and of less quality.\n    It is default **ON** (default) but will always only attempted\n    after other image loading fails. Turn off if you can use GraphicsMagick and\n    want to reduce potential security vectors.\n\nYou can choose these options by providing `-D<option>=ON` on the cmake command\nline, see below.\n\n```bash\ngit clone https://github.com/hzeller/timg.git  # Get repo\ncd timg                     # Enter the checked out repository directory.\nmkdir build                 # Generate a dedicated build directory.\ncd build\n# cmake with your desired options, see descriptions above\ncmake ../ -DWITH_OPENSLIDE_SUPPORT=On\nmake\n\n# After compilation, you can run from build/src/timg or install on your system with\nsudo make install\n```\n\n[24-bit-term]: https://gist.github.com/XVilka/8346728\n[cool-retro-term]: https://github.com/Swordfish90/cool-retro-term\n[konsole]: https://konsole.kde.org/\n[alacritty]: https://github.com/alacritty/alacritty\n[Kitty]: https://sw.kovidgoyal.net/kitty/\n[Kitty Graphics Protocol]: https://sw.kovidgoyal.net/kitty/graphics-protocol.html\n[iTerm2]: https://iterm2.com/\n[iTerm2 Graphics Protocol]: https://iterm2.com/documentation-images.html\n[wezterm]: https://wezfurlong.org/wezterm/\n[sixel]: https://en.wikipedia.org/wiki/Sixel\n[QOI]: https://qoiformat.org/\n[vscode]: https://code.visualstudio.com/\n[AppImage]: https://appimage.org/\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "shell.nix",
          "type": "blob",
          "size": 0.68359375,
          "content": "# This is a nix-shell for use with the nix package manager.\n# If you have nix installed, you may simply run `nix-shell`\n# in this repo, and have all dependencies ready in the new shell.\n\n{ pkgs ? import <nixpkgs> {} }:\npkgs.mkShell {\n  buildInputs = with pkgs;\n    [\n       stdenv\n       cmake\n       git   # for TIMG_VERSION_FROM_GIT\n       pkg-config\n       graphicsmagick\n       libjpeg\n       libdeflate\n       ffmpeg\n       libexif\n       libsixel\n       librsvg cairo\n       poppler\n\n       # Don't include qoi and stb by default to see if the cmake\n       # fallback to third_party/ works.\n       #qoi\n       #stb\n\n       openslide\n       pandoc\n       clang-tools_17  # clang-format\n    ];\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}