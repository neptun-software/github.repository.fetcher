{
  "metadata": {
    "timestamp": 1736565250155,
    "page": 53,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "panda3d/panda3d",
      "stars": 4602,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 0.1611328125,
          "content": "---\nChecks: 'clang-diagnostic-*,clang-analyzer-*,performance-*,portability-*,modernize-use-nullptr'\nWarningsAsErrors: ''\nHeaderFilterRegex: ''\nFormatStyle: none\n...\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.306640625,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.{py,pyw}]\nindent_style = space\nindent_size = 4\n\n[*.{h,c,cxx,cpp,I,T}]\nindent_style = space\nindent_size = 2\n\n[{CMakeLists.txt,*.cmake}]\nindent_style = space\nindent_size = 2\n\n[*.bat]\nend_of_line = crlf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.7314453125,
          "content": "# makepanda directories\n/built*/\n/thirdparty/\n/targetroot/\n/dstroot/\n/sdks/\n\n# Core dumps and traces\ncore\ncore.*\nvgcore.*\n*.core\n*.trace\n\n# Editor files/directories\n*.save\n*.save.1\n*.sublime-workspace\n.vscode/\n.idea/\n\n# Temporary build files\n/_vfsimporter.*\n*.pdb\n*.obj\n*.o\n*.gch\n*.pch\n/+DESC\n/+MANIFEST\n/pkg-plist\n/debug.ks\n\n# Produced installer/executables\n/*.exe\n/*.deb\n/*.rpm\n/*.app\n/*.pkg\n/*.dmg\n/*.whl\n/*.txz\n/*.apk\n\n# CMake\n/build/\nCMakeCache.txt\nCMakeFiles/\nCMakeScripts/\nMakefile\ncmake_install.cmake\ninstall_manifest.txt\nCTestTestfile.cmake\n\n# Operating system\nThumbs.db\nehthumbs.db\n.DS_Store\n\n# macOS\n.DS_Store\n\n# Python\n__pycache__/\n*.pyc\n*.pyo\n\n# Test tool cache directories\n.tox/\n.cache/\n.pytest_cache/\n/.settings/\n/.cproject\n/.project\n"
        },
        {
          "name": ".pylintrc",
          "type": "blob",
          "size": 23.7607421875,
          "content": "[MAIN]\n\n# Analyse import fallback blocks. This can be used to support both Python 2 and\n# 3 compatible code, which means that the block might have code that exists\n# only in one or another interpreter, leading to false positives when analysed.\nanalyse-fallback-blocks=no\n\n# Load and enable all available extensions. Use --list-extensions to see a list\n# all available extensions.\n#enable-all-extensions=\n\n# In error mode, messages with a category besides ERROR or FATAL are\n# suppressed, and no reports are done by default. Error mode is compatible with\n# disabling specific errors.\n#errors-only=\n\n# Always return a 0 (non-error) status code, even if lint errors are found.\n# This is primarily useful in continuous integration scripts.\n#exit-zero=\n\n# A comma-separated list of package or module names from where C extensions may\n# be loaded. Extensions are loading into the active Python interpreter and may\n# run arbitrary code.\nextension-pkg-allow-list=panda3d,wx\n\n# A comma-separated list of package or module names from where C extensions may\n# be loaded. Extensions are loading into the active Python interpreter and may\n# run arbitrary code. (This is an alternative name to extension-pkg-allow-list\n# for backward compatibility.)\nextension-pkg-whitelist=panda3d,wx\n\n# Return non-zero exit code if any of these messages/categories are detected,\n# even if score is above --fail-under value. Syntax same as enable. Messages\n# specified are enabled, while categories only check already-enabled messages.\nfail-on=\n\n# Specify a score threshold under which the program will exit with error.\nfail-under=10.0\n\n# Interpret the stdin as a python script, whose filename needs to be passed as\n# the module_or_package argument.\n#from-stdin=\n\n# Files or directories to be skipped. They should be base names, not paths.\nignore=thirdparty\n\n# Add files or directories matching the regular expressions patterns to the\n# ignore-list. The regex matches against paths and can be in Posix or Windows\n# format. Because '\\\\' represents the directory delimiter on Windows systems,\n# it can't be used as an escape character.\nignore-paths=\n\n# Files or directories matching the regular expression patterns are skipped.\n# The regex matches against base names, not paths. The default value ignores\n# Emacs file locks\nignore-patterns=\n\n# List of module names for which member attributes should not be checked\n# (useful for modules/projects where namespaces are manipulated during runtime\n# and thus existing member attributes cannot be deduced by static analysis). It\n# supports qualified module names, as well as Unix pattern matching.\nignored-modules=\n\n# Python code to execute, usually for sys.path manipulation such as\n# pygtk.require().\n#init-hook=\n\n# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the\n# number of processors available to use, and will cap the count on Windows to\n# avoid hangs.\njobs=1\n\n# Control the amount of potential inferred values when inferring a single\n# object. This can help the performance when dealing with large functions or\n# complex, nested conditions.\nlimit-inference-results=100\n\n# List of plugins (as comma separated values of python module names) to load,\n# usually to register additional checkers.\nload-plugins=\n\n# Pickle collected data for later comparisons.\npersistent=yes\n\n# Minimum Python version to use for version dependent checks. Will default to\n# the version used to run pylint.\npy-version=3.6\n\n# Discover python modules and packages in the file system subtree.\nrecursive=no\n\n# When enabled, pylint would attempt to guess common misconfiguration and emit\n# user-friendly hints instead of false-positive error messages.\nsuggestion-mode=yes\n\n# Allow loading of arbitrary C extensions. Extensions are imported into the\n# active Python interpreter and may run arbitrary code.\n#unsafe-load-any-extension=no\n\n# In verbose mode, extra non-checker-related info will be displayed.\n#verbose=\n\n\n[BASIC]\n\n# Naming style matching correct argument names.\nargument-naming-style=snake_case\n\n# Regular expression matching correct argument names. Overrides argument-\n# naming-style. If left empty, argument names will be checked with the set\n# naming style.\n#argument-rgx=\n\n# Naming style matching correct attribute names.\nattr-naming-style=snake_case\n\n# Regular expression matching correct attribute names. Overrides attr-naming-\n# style. If left empty, attribute names will be checked with the set naming\n# style.\n#attr-rgx=\n\n# Bad variable names which should always be refused, separated by a comma.\nbad-names=foo,\n          bar,\n          baz,\n          toto,\n          tutu,\n          tata\n\n# Bad variable names regexes, separated by a comma. If names match any regex,\n# they will always be refused\nbad-names-rgxs=\n\n# Naming style matching correct class attribute names.\nclass-attribute-naming-style=any\n\n# Regular expression matching correct class attribute names. Overrides class-\n# attribute-naming-style. If left empty, class attribute names will be checked\n# with the set naming style.\n#class-attribute-rgx=\n\n# Naming style matching correct class constant names.\nclass-const-naming-style=UPPER_CASE\n\n# Regular expression matching correct class constant names. Overrides class-\n# const-naming-style. If left empty, class constant names will be checked with\n# the set naming style.\n#class-const-rgx=\n\n# Naming style matching correct class names.\nclass-naming-style=PascalCase\n\n# Regular expression matching correct class names. Overrides class-naming-\n# style. If left empty, class names will be checked with the set naming style.\n#class-rgx=\n\n# Naming style matching correct constant names.\nconst-naming-style=UPPER_CASE\n\n# Regular expression matching correct constant names. Overrides const-naming-\n# style. If left empty, constant names will be checked with the set naming\n# style.\n#const-rgx=\n\n# Minimum line length for functions/classes that require docstrings, shorter\n# ones are exempt.\ndocstring-min-length=-1\n\n# Naming style matching correct function names.\nfunction-naming-style=snake_case\n\n# Regular expression matching correct function names. Overrides function-\n# naming-style. If left empty, function names will be checked with the set\n# naming style.\n#function-rgx=\n\n# Good variable names which should always be accepted, separated by a comma.\ngood-names=i,\n           j,\n           k,\n           ex,\n           Run,\n           _\n\n# Good variable names regexes, separated by a comma. If names match any regex,\n# they will always be accepted\ngood-names-rgxs=\n\n# Include a hint for the correct naming format with invalid-name.\ninclude-naming-hint=no\n\n# Naming style matching correct inline iteration names.\ninlinevar-naming-style=any\n\n# Regular expression matching correct inline iteration names. Overrides\n# inlinevar-naming-style. If left empty, inline iteration names will be checked\n# with the set naming style.\n#inlinevar-rgx=\n\n# Naming style matching correct method names.\nmethod-naming-style=snake_case\n\n# Regular expression matching correct method names. Overrides method-naming-\n# style. If left empty, method names will be checked with the set naming style.\n#method-rgx=\n\n# Naming style matching correct module names.\nmodule-naming-style=snake_case\n\n# Regular expression matching correct module names. Overrides module-naming-\n# style. If left empty, module names will be checked with the set naming style.\n#module-rgx=\n\n# Colon-delimited sets of names that determine each other's naming style when\n# the name regexes allow several styles.\nname-group=\n\n# Regular expression which should only match function or class names that do\n# not require a docstring.\nno-docstring-rgx=^_\n\n# List of decorators that produce properties, such as abc.abstractproperty. Add\n# to this list to register other decorators that produce valid properties.\n# These decorators are taken in consideration only for invalid-name.\nproperty-classes=abc.abstractproperty\n\n# Regular expression matching correct type variable names. If left empty, type\n# variable names will be checked with the set naming style.\n#typevar-rgx=\n\n# Naming style matching correct variable names.\nvariable-naming-style=snake_case\n\n# Regular expression matching correct variable names. Overrides variable-\n# naming-style. If left empty, variable names will be checked with the set\n# naming style.\n#variable-rgx=\n\n\n[CLASSES]\n\n# Warn about protected attribute access inside special methods\ncheck-protected-access-in-special-methods=no\n\n# List of method names used to declare (i.e. assign) instance attributes.\ndefining-attr-methods=__init__,\n                      __new__,\n                      setUp,\n                      __post_init__\n\n# List of member names, which should be excluded from the protected access\n# warning.\nexclude-protected=_asdict,\n                  _fields,\n                  _replace,\n                  _source,\n                  _make\n\n# List of valid names for the first argument in a class method.\nvalid-classmethod-first-arg=cls\n\n# List of valid names for the first argument in a metaclass class method.\nvalid-metaclass-classmethod-first-arg=cls\n\n\n[DESIGN]\n\n# List of regular expressions of class ancestor names to ignore when counting\n# public methods (see R0903)\nexclude-too-few-public-methods=\n\n# List of qualified class names to ignore when counting class parents (see\n# R0901)\nignored-parents=\n\n# Maximum number of arguments for function / method.\nmax-args=5\n\n# Maximum number of attributes for a class (see R0902).\nmax-attributes=7\n\n# Maximum number of boolean expressions in an if statement (see R0916).\nmax-bool-expr=5\n\n# Maximum number of branch for function / method body.\nmax-branches=12\n\n# Maximum number of locals for function / method body.\nmax-locals=15\n\n# Maximum number of parents for a class (see R0901).\nmax-parents=7\n\n# Maximum number of public methods for a class (see R0904).\nmax-public-methods=20\n\n# Maximum number of return / yield for function / method body.\nmax-returns=6\n\n# Maximum number of statements in function / method body.\nmax-statements=50\n\n# Minimum number of public methods for a class (see R0903).\nmin-public-methods=2\n\n\n[EXCEPTIONS]\n\n# Exceptions that will emit a warning when caught.\novergeneral-exceptions=builtins.BaseException,builtins.Exception\n\n\n[FORMAT]\n\n# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.\nexpected-line-ending-format=LF\n\n# Regexp for a line that is allowed to be longer than the limit.\nignore-long-lines=^\\s*(# )?<?https?://\\S+>?$\n\n# Number of spaces of indent required inside a hanging or continued line.\nindent-after-paren=4\n\n# String used as indentation unit. This is usually \"    \" (4 spaces) or \"\\t\" (1\n# tab).\nindent-string='    '\n\n# Maximum number of characters on a single line.\nmax-line-length=100\n\n# Maximum number of lines in a module.\nmax-module-lines=1000\n\n# Allow the body of a class to be on the same line as the declaration if body\n# contains single statement.\nsingle-line-class-stmt=no\n\n# Allow the body of an if to be on the same line as the test if there is no\n# else.\nsingle-line-if-stmt=no\n\n\n[IMPORTS]\n\n# List of modules that can be imported at any level, not just the top level\n# one.\nallow-any-import-level=\n\n# Allow wildcard imports from modules that define __all__.\nallow-wildcard-with-all=no\n\n# Deprecated modules which should not be used, separated by a comma.\ndeprecated-modules=optparse,tkinter.tix,pandac.PandaModules,direct.directbase.DirectStart\n\n# Output a graph (.gv or any supported image format) of external dependencies\n# to the given file (report RP0402 must not be disabled).\next-import-graph=\n\n# Output a graph (.gv or any supported image format) of all (i.e. internal and\n# external) dependencies to the given file (report RP0402 must not be\n# disabled).\nimport-graph=\n\n# Output a graph (.gv or any supported image format) of internal dependencies\n# to the given file (report RP0402 must not be disabled).\nint-import-graph=\n\n# Force import order to recognize a module as part of the standard\n# compatibility libraries.\nknown-standard-library=\n\n# Force import order to recognize a module as part of a third party library.\nknown-third-party=enchant\n\n# Couples of modules and preferred modules, separated by a comma.\npreferred-modules=\n\n\n[LOGGING]\n\n# The type of string formatting that logging methods do. `old` means using %\n# formatting, `new` is for `{}` formatting.\nlogging-format-style=old\n\n# Logging modules to check that the string format arguments are in logging\n# function parameter format.\nlogging-modules=logging\n\n\n[MESSAGES CONTROL]\n\n# Only show warnings with the listed confidence levels. Leave empty to show\n# all. Valid levels: HIGH, CONTROL_FLOW, INFERENCE, INFERENCE_FAILURE,\n# UNDEFINED.\nconfidence=HIGH,\n           CONTROL_FLOW,\n           INFERENCE,\n           INFERENCE_FAILURE,\n           UNDEFINED\n\n# Disable the message, report, category or checker with the given id(s). You\n# can either give multiple identifiers separated by comma (,) or put this\n# option multiple times (only on the command line, not in the configuration\n# file where it should appear only once). You can also use \"--disable=all\" to\n# disable everything first and then re-enable specific checks. For example, if\n# you want to run only the similarities checker, you can use \"--disable=all\n# --enable=similarities\". If you want to run only the classes checker, but have\n# no Warning level messages displayed, use \"--disable=all --enable=classes\n# --disable=W\".\ndisable=raw-checker-failed,\n        bad-inline-option,\n        locally-disabled,\n        file-ignored,\n        suppressed-message,\n        useless-suppression,\n        deprecated-pragma,\n        use-symbolic-message-instead,\n        consider-using-f-string,\n        attribute-defined-outside-init,\n        comparison-with-callable,\n        dangerous-default-value,\n        global-statement,\n        import-outside-toplevel,\n        invalid-name,\n        line-too-long,\n        missing-class-docstring,\n        missing-function-docstring,\n        missing-module-docstring,\n        protected-access,\n        no-classmethod-decorator,\n        no-staticmethod-decorator,\n        useless-object-inheritance,\n        property-with-parameters,\n        too-many-ancestors,\n        too-many-instance-attributes,\n        too-few-public-methods,\n        too-many-public-methods,\n        too-many-return-statements,\n        too-many-branches,\n        too-many-arguments,\n        too-many-locals,\n        too-many-statements,\n        too-many-boolean-expressions,\n        consider-merging-isinstance,\n        too-many-nested-blocks,\n        simplifiable-if-statement,\n        redefined-argument-from-local,\n        no-else-return,\n        consider-using-ternary,\n        trailing-comma-tuple,\n        stop-iteration-return,\n        simplify-boolean-expression,\n        inconsistent-return-statements,\n        useless-return,\n        consider-swap-variables,\n        consider-using-join,\n        consider-using-in,\n        consider-using-get,\n        chained-comparison,\n        consider-using-dict-comprehension,\n        consider-using-set-comprehension,\n        simplifiable-if-expression,\n        no-else-raise,\n        unnecessary-comprehension,\n        consider-using-sys-exit,\n        no-else-break,\n        no-else-continue,\n        super-with-arguments,\n        simplifiable-condition,\n        condition-evals-to-constant,\n        consider-using-generator,\n        use-a-generator,\n        consider-using-min-builtin,\n        consider-using-max-builtin,\n        consider-using-with,\n        unnecessary-dict-index-lookup,\n        use-list-literal,\n        use-dict-literal,\n        unnecessary-list-index-lookup,\n        literal-comparison,\n        comparison-with-itself,\n        comparison-of-constants,\n        cyclic-import,\n        consider-using-from-import,\n        duplicate-code,\n        raise-missing-from,\n        redefined-builtin,\n        redefined-outer-name,\n        too-many-lines,\n        unused-argument,\n        unused-variable,\n        unused-wildcard-import,\n        using-constant-test,\n        wrong-import-order,\n        wrong-import-position,\n        not-callable,\n        wildcard-import\n\n# Enable the message, report, category or checker with the given id(s). You can\n# either give multiple identifier separated by comma (,) or put this option\n# multiple time (only on the command line, not in the configuration file where\n# it should appear only once). See also the \"--disable\" option for examples.\n#enable=c-extension-no-member\n\n\n[MISCELLANEOUS]\n\n# List of note tags to take in consideration, separated by a comma.\nnotes=FIXME,\n      XXX,\n      TODO\n\n# Regular expression of note tags to take in consideration.\nnotes-rgx=\n\n\n[REFACTORING]\n\n# Maximum number of nested blocks for function / method body\nmax-nested-blocks=5\n\n# Complete name of functions that never returns. When checking for\n# inconsistent-return-statements if a never returning function is called then\n# it will be considered as an explicit return statement and no message will be\n# printed.\nnever-returning-functions=sys.exit\n\n\n[REPORTS]\n\n# Python expression which should return a score less than or equal to 10. You\n# have access to the variables 'fatal', 'error', 'warning', 'refactor',\n# 'convention', and 'info' which contain the number of messages in each\n# category, as well as 'statement' which is the total number of statements\n# analyzed. This score is used by the global evaluation report (RP0004).\nevaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)\n\n# Template used to display messages. This is a python new-style format string\n# used to format the message information. See doc for all details.\nmsg-template=\n\n# Set the output format. Available formats are text, parseable, colorized, json\n# and msvs (visual studio). You can also give a reporter class, e.g.\n# mypackage.mymodule.MyReporterClass.\n#output-format=\n\n# Tells whether to display a full report or only the messages.\nreports=no\n\n# Activate the evaluation score.\nscore=yes\n\n\n[SIMILARITIES]\n\n# Comments are removed from the similarity computation\nignore-comments=yes\n\n# Docstrings are removed from the similarity computation\nignore-docstrings=yes\n\n# Imports are removed from the similarity computation\nignore-imports=no\n\n# Signatures are removed from the similarity computation\nignore-signatures=yes\n\n# Minimum lines number of a similarity.\nmin-similarity-lines=4\n\n\n[SPELLING]\n\n# Limits count of emitted suggestions for spelling mistakes.\nmax-spelling-suggestions=4\n\n# Spelling dictionary name. Available dictionaries: none. To make it work,\n# install the 'python-enchant' package.\nspelling-dict=\n\n# List of comma separated words that should be considered directives if they\n# appear at the beginning of a comment and should not be checked.\nspelling-ignore-comment-directives=fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:\n\n# List of comma separated words that should not be checked.\nspelling-ignore-words=\n\n# A path to a file that contains the private dictionary; one word per line.\nspelling-private-dict-file=\n\n# Tells whether to store unknown words to the private dictionary (see the\n# --spelling-private-dict-file option) instead of raising a message.\nspelling-store-unknown-words=no\n\n\n[STRING]\n\n# This flag controls whether inconsistent-quotes generates a warning when the\n# character used as a quote delimiter is used inconsistently within a module.\ncheck-quote-consistency=no\n\n# This flag controls whether the implicit-str-concat should generate a warning\n# on implicit string concatenation in sequences defined over several lines.\ncheck-str-concat-over-line-jumps=no\n\n\n[TYPECHECK]\n\n# List of decorators that produce context managers, such as\n# contextlib.contextmanager. Add to this list to register other decorators that\n# produce valid context managers.\ncontextmanager-decorators=contextlib.contextmanager\n\n# List of members which are set dynamically and missed by pylint inference\n# system, and so shouldn't trigger E1101 when accessed. Python regular\n# expressions are accepted.\ngenerated-members=base.cr,\n                  base.le,\n                  base.localAvatar,\n                  Pmw.AboutDialog,\n                  Pmw.Balloon,\n                  Pmw.ButtonBox,\n                  Pmw.Color,\n                  Pmw.ComboBox,\n                  Pmw.EntryField,\n                  Pmw.Group,\n                  Pmw.INITOPT,\n                  Pmw.MegaArchetype,\n                  Pmw.MegaToplevel,\n                  Pmw.MegaWidget,\n                  Pmw.MenuBar,\n                  Pmw.MessageBar,\n                  Pmw.NoteBook,\n                  Pmw.OK,\n                  Pmw.OptionMenu,\n                  Pmw.OptionMenu,\n                  Pmw.PARTIAL,\n                  Pmw.PanedWidget,\n                  Pmw.ScrolledCanvas,\n                  Pmw.ScrolledFrame,\n                  Pmw.ScrolledListBox,\n                  Pmw.ScrolledText,\n                  Pmw.aboutcontact,\n                  Pmw.aboutcopyright,\n                  Pmw.aboutversion,\n                  Pmw.forwardmethods,\n                  Pmw.integervalidator,\n                  Pmw.popgrab,\n                  Pmw.pushgrab,\n                  Pmw.realvalidator,\n                  Pmw.setgeometryanddeiconify\n\n# Tells whether to warn about missing members when the owner of the attribute\n# is inferred to be None.\nignore-none=yes\n\n# This flag controls whether pylint should warn about no-member and similar\n# checks whenever an opaque object is returned when inferring. The inference\n# can return multiple potential results while evaluating a Python object, but\n# some branches might not be evaluated, which results in partial inference. In\n# that case, it might be useful to still emit no-member and other checks for\n# the rest of the inferred objects.\nignore-on-opaque-inference=yes\n\n# List of symbolic message names to ignore for Mixin members.\nignored-checks-for-mixins=no-member,\n                          not-async-context-manager,\n                          not-context-manager,\n                          attribute-defined-outside-init\n\n# List of class names for which member attributes should not be checked (useful\n# for classes with dynamically set attributes). This supports the use of\n# qualified names.\nignored-classes=optparse.Values,thread._local,_thread._local,direct.showbase.PythonUtil.ScratchPad\n\n# Show a hint with possible names when a member name was not found. The aspect\n# of finding the hint is based on edit distance.\nmissing-member-hint=yes\n\n# The minimum edit distance a name should have in order to be considered a\n# similar match for a missing member name.\nmissing-member-hint-distance=1\n\n# The total number of similar names that should be taken in consideration when\n# showing a hint for a missing member.\nmissing-member-max-choices=1\n\n# Regex pattern to define which classes are considered mixins.\nmixin-class-rgx=.*[Mm]ixin\n\n# List of decorators that change the signature of a decorated function.\nsignature-mutators=\n\n\n[VARIABLES]\n\n# List of additional names supposed to be defined in builtins. Remember that\n# you should avoid defining new builtins when possible.\nadditional-builtins=base,\n                    simbase,\n                    __dev__,\n                    onScreenDebug,\n                    render,\n                    hidden,\n                    cluster,\n                    launcher,\n                    taskMgr,\n                    localAvatar,\n                    game\n\n# Tells whether unused global variables should be treated as a violation.\nallow-global-unused-variables=yes\n\n# List of names allowed to shadow builtins\nallowed-redefined-builtins=\n\n# List of strings which can identify a callback function by name. A callback\n# name must start or end with one of those strings.\ncallbacks=cb_,\n          _cb\n\n# A regular expression matching the name of dummy variables (i.e. expected to\n# not be used).\ndummy-variables-rgx=_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_\n\n# Argument names that match this expression will be ignored.\nignored-argument-names=_.*|^ignored_|^unused_\n\n# Tells whether we should check for unused import in __init__ files.\ninit-import=no\n\n# List of qualified module names which can have objects that can redefine\n# builtins.\nredefining-builtins-modules=six.moves,past.builtins,future.builtins,builtins,io,direct.showbase.ShowBase,direct.showbase.PythonUtil\n"
        },
        {
          "name": "BACKERS.md",
          "type": "blob",
          "size": 1.0439453125,
          "content": "# Panda3D Backers\n\nThis is a list of all the people who are contributing financially to Panda3D.  If you'd like to join them, visit [our campaign on OpenCollective](https://opencollective.com/panda3d)!\n\n## Bronze Sponsors\n\n[<img src=\"https://www.panda3d.org/wp-content/uploads/2024/08/Route4MeLogo1185x300-2-1-1024x259.png\" alt=\"Route4Me\" height=\"48\">](https://route4me.com/)\n\n* [Daniel Stokes](https://opencollective.com/daniel-stokes)\n* [David Rose](https://opencollective.com/david-rose)\n* [Route4Me](https://route4me.com/)\n\n## Benefactors\n\n![Benefactors](https://opencollective.com/panda3d/tiers/benefactor.svg?avatarHeight=48&width=600)\n\n* Sam Edwards\n* Max Voss\n* Hawkheart\n* Veronica\n* Cody Sevier\n* Marek Alexa\n\n## Enthusiasts\n\n![Enthusiasts](https://opencollective.com/panda3d/tiers/enthusiast.svg?avatarHeight=48&width=600)\n\n* Eric Thomson\n* Brian Lach\n* Maxwell Dreytser\n* SureBet\n* Gyedo Jeon\n* GameDev JONI\n* Max Rodriguez\n* Jethro Schoppenhorst\n* dabe\n\n## Backers\n\n![Backers](https://opencollective.com/panda3d/tiers/backer.svg?avatarHeight=48&width=600)\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 7.509765625,
          "content": "cmake_minimum_required(VERSION 3.13)\nset(CMAKE_DISABLE_SOURCE_CHANGES ON) # Must go before project() below\nset(CMAKE_DISABLE_IN_SOURCE_BUILD ON) # Must go before project() below\n\nif(POLICY CMP0091)\n  # Needed for CMake to pass /MD flag properly with non-VC generators.\n  cmake_policy(SET CMP0091 NEW)\nendif()\n\n# Determine whether we are using a multi-config generator.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\n\n# Set the default CMAKE_BUILD_TYPE before calling project().\nif(IS_MULTICONFIG)\n  message(STATUS \"Using multi-configuration generator\")\nelse()\n  if(NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE Standard CACHE STRING \"Choose the type of build.\" FORCE)\n    message(STATUS \"Using default build type ${CMAKE_BUILD_TYPE}\")\n  else()\n    message(STATUS \"Using build type ${CMAKE_BUILD_TYPE}\")\n  endif()\nendif()\n\n# Set defaults for macOS, must be before project().\nif(APPLE)\n  # Needed for enable_language(OBJCXX)\n  cmake_minimum_required(VERSION 3.16)\n\n  set(CMAKE_OSX_DEPLOYMENT_TARGET \"10.9\" CACHE STRING \"Minimum macOS version to target\")\n  set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY \"libc++\")\n\n  if(CMAKE_VERSION VERSION_LESS \"3.19\" AND NOT CMAKE_OSX_SYSROOT)\n    # Older CMake chose SDK based on deployment target, against Apple's recommendations.\n    # However, we need to use the latest to be able to target arm64.\n    if(IS_DIRECTORY \"/Library/Developer/CommandLineTools/SDKs/MacOSX11.1.sdk\")\n      set(CMAKE_OSX_SYSROOT \"/Library/Developer/CommandLineTools/SDKs/MacOSX11.1.sdk\" CACHE STRING \"\")\n    elseif(IS_DIRECTORY \"/Library/Developer/CommandLineTools/SDKs/MacOSX11.0.sdk\")\n      set(CMAKE_OSX_SYSROOT \"/Library/Developer/CommandLineTools/SDKs/MacOSX11.0.sdk\" CACHE STRING \"\")\n    endif()\n  endif()\nendif()\n\n# Figure out the version\nset(_s \"[\\\\t ]*\") # CMake doesn't support \\s*\nfile(STRINGS \"setup.cfg\" _version REGEX \"^version${_s}=${_s}\")\nstring(REGEX REPLACE \"^.*=${_s}\" \"\" _version \"${_version}\")\nproject(Panda3D VERSION ${_version})\nunset(_version)\nunset(_s)\n\nif(APPLE)\n  # Allows separating out C++ flags from ObjC++ flags\n  enable_language(OBJCXX)\nendif()\n\n# Determine the possible build types.  Must be *after* calling project().\nset(_configs Standard Release RelWithDebInfo Debug MinSizeRel)\nif(CMAKE_CXX_COMPILER_ID MATCHES \"(AppleClang|Clang|GCC)\")\n  list(APPEND _configs Coverage)\nendif()\n\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"${_configs}\" CACHE STRING \"\" FORCE)\nelse()\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS ${_configs})\nendif()\n\nenable_testing()\n\nstring(REPLACE \"$(EFFECTIVE_PLATFORM_NAME)\" \"\" PANDA_CFG_INTDIR \"${CMAKE_CFG_INTDIR}\")\n\n# Add generic modules to cmake module path,\n# and add Panda3D specific modules to cmake module path\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules/\")\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/macros/\")\n\n# When using the Xcode generator, don't append the platform name to the\n# intermediate configuration directory.\nset_property(GLOBAL PROPERTY XCODE_EMIT_EFFECTIVE_PLATFORM_NAME OFF)\n\n# Include modules builtin to CMake\ninclude(GNUInstallDirs)     # Defines CMAKE_INSTALL_<dir> variables\n\n# Include global modules needed for configure scripts\ninclude(PackageConfig)      # Defines package_option\ninclude(PerConfigOption)    # Defines per_config_option\n\n# Configure Panda3D\ninclude(dtool/CompilerFlags.cmake)\ninclude(dtool/PandaVersion.cmake)\ninclude(dtool/Package.cmake)\ninclude(dtool/Config.cmake)\n\n# Include global modules\ninclude(AddBisonTarget)     # Defines add_bison_target function\ninclude(AddFlexTarget)      # Defines add_flex_target function\ninclude(BuildMetalib)       # Defines add_component_library AND add_metalib\ninclude(CompositeSources)   # Defines composite_sources function\ninclude(Python)             # Defines add_python_target AND install_python_package\ninclude(Interrogate)        # Defines target_interrogate AND add_python_module\ninclude(RunPzip)            # Defines run_pzip function\ninclude(Versioning)         # Hooks 'add_library' to apply VERSION/SOVERSION\n\n# Determine which trees to build.\noption(BUILD_DTOOL \"Build the dtool source tree.\" ON)\noption(BUILD_PANDA \"Build the panda source tree.\" ON)\noption(BUILD_DIRECT \"Build the direct source tree.\" ON)\noption(BUILD_PANDATOOL \"Build the pandatool source tree.\" ON)\noption(BUILD_CONTRIB \"Build the contrib source tree.\" ON)\noption(BUILD_MODELS \"Build/install the built-in models.\" ON)\noption(BUILD_TOOLS \"Build binary tools.\" ON)\n\n# Include Panda3D packages\nif(BUILD_DTOOL)\n  add_subdirectory(dtool \"${CMAKE_BINARY_DIR}/dtool\")\nendif()\n\nif(BUILD_PANDA)\n  add_subdirectory(panda \"${CMAKE_BINARY_DIR}/panda\")\nendif()\n\nif(BUILD_DIRECT)\n  add_subdirectory(direct \"${CMAKE_BINARY_DIR}/direct\")\nendif()\n\nif(BUILD_PANDATOOL)\n  add_subdirectory(pandatool \"${CMAKE_BINARY_DIR}/pandatool\")\nendif()\n\nif(BUILD_CONTRIB)\n  add_subdirectory(contrib \"${CMAKE_BINARY_DIR}/contrib\")\nendif()\n\nif(BUILD_MODELS)\n  run_pzip(models\n    \"${CMAKE_CURRENT_SOURCE_DIR}/models/\"\n    \"${PROJECT_BINARY_DIR}/${PANDA_CFG_INTDIR}/models\"\n    *.egg)\n\n  add_custom_command(TARGET models\n                     POST_BUILD\n                     COMMAND ${CMAKE_COMMAND}\n                             -DSOURCE=\"${CMAKE_CURRENT_SOURCE_DIR}/models/audio/\"\n                             -DDESTINATION=\"${PANDA_OUTPUT_DIR}/models/audio\"\n                             -P ${PROJECT_SOURCE_DIR}/cmake/scripts/CopyPattern.cmake\n                     COMMENT \"Copying models/audio\")\n\n  add_custom_command(TARGET models\n                     POST_BUILD\n                     COMMAND ${CMAKE_COMMAND}\n                             -DSOURCE=\"${CMAKE_CURRENT_SOURCE_DIR}/models/icons/\"\n                             -DDESTINATION=\"${PANDA_OUTPUT_DIR}/models/icons\"\n                             -P ${PROJECT_SOURCE_DIR}/cmake/scripts/CopyPattern.cmake\n                     COMMENT \"Copying models/icons\")\n\n  add_custom_command(TARGET models\n                     POST_BUILD\n                     COMMAND ${CMAKE_COMMAND}\n                             -DSOURCE=\"${CMAKE_CURRENT_SOURCE_DIR}/models/maps/\"\n                             -DDESTINATION=\"${PANDA_OUTPUT_DIR}/models/maps\"\n                             -P ${PROJECT_SOURCE_DIR}/cmake/scripts/CopyPattern.cmake\n                     COMMENT \"Copying models/maps\")\n\n  install(DIRECTORY \"${PANDA_OUTPUT_DIR}/models\"\n    COMPONENT Models DESTINATION ${CMAKE_INSTALL_DATADIR}/panda3d)\nendif()\n\nif(INTERROGATE_PYTHON_INTERFACE)\n  # If we built the Python interface, run the test suite.  Note, we do NOT test\n  # for pytest before adding this test.  If the user doesn't have pytest, we'd\n  # like for the tests to fail.\n\n  # In the Coverage configuration, we also require pytest-cov\n\n  add_test(NAME pytest\n    COMMAND \"${PYTHON_EXECUTABLE}\" -m pytest \"${PROJECT_SOURCE_DIR}/tests\"\n    $<$<CONFIG:Coverage>:--cov=.>\n    WORKING_DIRECTORY \"${PANDA_OUTPUT_DIR}\")\nendif()\n\n# Generate the Panda3DConfig.cmake file so find_package(Panda3D) works, and\n# also register the build directory with CMake's package registry.\n\nfile(COPY \"${PROJECT_SOURCE_DIR}/cmake/install/Panda3DConfig.cmake\"\n  DESTINATION \"${PROJECT_BINARY_DIR}\")\ninstall(FILES \"${PROJECT_SOURCE_DIR}/cmake/install/Panda3DConfig.cmake\"\n  DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/Panda3D\")\n\ninclude(CMakePackageConfigHelpers)\nwrite_basic_package_version_file(\n  \"${PROJECT_BINARY_DIR}/Panda3DConfigVersion.cmake\"\n  VERSION \"${PROJECT_VERSION}\"\n  COMPATIBILITY AnyNewerVersion)\ninstall(FILES \"${PROJECT_BINARY_DIR}/Panda3DConfigVersion.cmake\"\n  DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/Panda3D\")\n\nif(NOT CMAKE_CROSSCOMPILING)\n  export(PACKAGE Panda3D)\nendif()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.0703125,
          "content": "# Contributing to Panda3D\n\nPanda3D is an open-source, community-driven project, completely dependent on the\ncontribution of volunteers.  As such we highly welcome you to contribute code to\nthe project.  This document aims to outline some guidelines for doing so.\n\nIf you would like to contribute but aren't sure where to start, please visit the\n[Get Involved](https://www.panda3d.org/get-involved/) page on our website, or\nthe excellent [Open Source Guide](https://opensource.guide/how-to-contribute/).\n\n## Before implementing a change\n\nWe highly recommend that you file issues before making a change.  Issues are\nused to track bugs and feature requests but also to get feedback from the other\ndevelopers about design decisions or a specific implementation strategy.\n\nIt is important for acceptance that the change is implemented in a way that fits\nthe general design principles of the Panda3D API, and fits well with the general\npriorities of the team.  Therefore, prior discussion with other developers is\ncritical.  Issues can be used to facilitate this, but we also invite you to\nvisit the #development channel on Discord (or #panda3d-devel on Libera Chat).\n\nWe also recommend that you familiarize yourself with the established coding\nstyle and design patterns of Panda3D, to reduce the amount of changes that have\nto be made during the review process.\n\n## Submitting a change\n\nAll changes from non-core contributors are made via pull requests.  This\nrequires you to fork the Panda3D repository, create a branch for your change,\npush your changes to this branch, and request that this branch is merged into\nthe upstream branch.  Each pull request is reviewed by a maintainer and\nautomatically tested for regressions and unit test coverage.  The maintainer\nwill suggest any changes, which you can add by committing more code to the same\nbranch (you can do a force push if necessary).  Once the change is deemed\nacceptable, the maintainer will merge your change into the appropriate branch of\nthe repository.\n\nTo make it easier for the maintainer to review your changes, we highly recommend\nthat you give a clear and concise description of intent (linking to any issues\nthat are resolved by the change), as well as the inclusion of unit tests, which\ncontribute to a high level of confidence that this change does not break any\nexisting behaviours.  We also recommend breaking up separate changes into\nseparate PRs, rather than submitting one big PR with several unrelated changes.\n\nIf your change is still a work in progress, please mark the PR as \"draft\".  This\nwill prevent other contributors from receiving an email every time you push a\nnew change to your branch.  Draft PRs can also be used to invite early feedback\non your change, especially if you are uncertain about whether you are going in\nthe right direction.\n\nThe code in the Panda3D repository is copyrighted to Carnegie Mellon University\nand licensed under the Modified BSD License.  By submitting your changes, you\naccept that your code becomes placed under the same license.  Except in specific\nagreed-upon cases, we do not accept code contributions under alternate licenses.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.5322265625,
          "content": "Copyright (c) 2008, Carnegie Mellon University.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n3. Neither the name of Carnegie Mellon University nor the names of\n   other contributors may be used to endorse or promote products\n   derived from this software without specific prior written\n   permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE AUTHORS \"AS IS\" AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\nOF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\nNOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n(This is the Modified BSD License.  See also\nhttp://www.opensource.org/licenses/bsd-license.php )\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.673828125,
          "content": "[![Build Status](https://github.com/panda3d/panda3d/workflows/Continuous%20Integration/badge.svg?branch=master)](https://github.com/panda3d/panda3d/actions?query=branch%3Amaster+workflow%3A%22Continuous+Integration%22)\n[![OpenCollective](https://opencollective.com/panda3d/backers/badge.svg)](https://opencollective.com/panda3d)\n[![OpenCollective](https://opencollective.com/panda3d/sponsors/badge.svg)](https://opencollective.com/panda3d)\n\nPanda3D\n=======\n\n<img src=\"https://avatars2.githubusercontent.com/u/590956?v=3&s=500\" align=\"right\" width=\"200\" />\n\nPanda3D is a game engine, a framework for 3D rendering and game development for\nPython and C++ programs.  Panda3D is open-source and free for any purpose,\nincluding commercial ventures, thanks to its\n[liberal license](https://www.panda3d.org/license/). To learn more about\nPanda3D's capabilities, visit the [gallery](https://www.panda3d.org/gallery/)\nand the [feature list](https://www.panda3d.org/features/).  To learn how to\nuse Panda3D, check the [documentation](https://www.panda3d.org/documentation/)\nresources. If you get stuck, ask for help from our active\n[community](https://discourse.panda3d.org).\n\nPanda3D is licensed under the Modified BSD License.  See the LICENSE file for\nmore details.\n\nInstalling Panda3D\n==================\n\nThe latest Panda3D SDK can be downloaded from\n[this page](https://www.panda3d.org/download/sdk-1-10-15/).\nIf you are familiar with installing Python packages, you can use\nthe following command:\n\n```bash\npip install panda3d\n```\n\nThe easiest way to install the latest development build of Panda3D\ninto an existing Python installation is using the following command:\n\n```bash\npip install --pre --extra-index-url https://archive.panda3d.org/ panda3d\n```\n\nIf this command fails, please make sure your version of pip is up-to-date.\n\nIf you prefer to install the full SDK with all tools, the latest development\nbuilds can be obtained from [this page](https://www.panda3d.org/download.php?version=devel&sdk).\n\nThese are automatically kept up-to-date with the latest GitHub version of Panda.\n\nBuilding Panda3D\n================\n\nWindows\n-------\n\nYou can build Panda3D with the Microsoft Visual C++ 2017, 2019 or 2022\ncompiler, which can be downloaded for free from the [Visual Studio site](https://visualstudio.microsoft.com/downloads/).\nYou will also need to install the [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-sdk),\nand if you intend to target Windows Vista, you will also need the\n[Windows 8.1 SDK](https://go.microsoft.com/fwlink/p/?LinkId=323507).\n\nYou will also need the thirdparty dependency libraries available for\nthe build scripts to use.  These are available from one of these two URLs,\ndepending on whether you are on a 32-bit or 64-bit system, or you can\n[click here](https://github.com/rdb/panda3d-thirdparty) for instructions on\nbuilding them from source.\n\n- https://www.panda3d.org/download/panda3d-1.10.15/panda3d-1.10.15-tools-win64.zip\n- https://www.panda3d.org/download/panda3d-1.10.15/panda3d-1.10.15-tools-win32.zip\n\nAfter acquiring these dependencies, you can build Panda3D from the command\nprompt using the following command.  Change the `--msvc-version` option based\non your version of Visual C++; 2022 is 14.3, 2019 is 14.2, 2017 is 14.1, and\n2015 is 14.  Remove the `--windows-sdk=10` option if you need to support\nWindows Vista, which requires the Windows 8.1 SDK.\n\n```bash\nmakepanda\\makepanda.bat --everything --installer --msvc-version=14.3 --windows-sdk=10 --no-eigen --threads=2\n```\n\nWhen the build succeeds, it will produce an .exe file that you can use to\ninstall Panda3D on your system.\n\n**Note:** you may choose to remove `--no-eigen` and build with Eigen support in\norder to improve runtime performance.  However, this will cause the build to\ntake hours to complete, as Eigen is a heavily template-based library, and the\nMSVC compiler does not perform well under those circumstances.\n\nLinux\n-----\n\nBuilding Panda3D on Linux is easy.  All you need is to invoke the makepanda\nscript using the version of Python that you want Panda3D to be built against.\n\nRun makepanda.py with the --help option to see which options are available.\nUsually, you will want to specify the --everything option (which builds with\nsupport for all features for which it detects the prerequisite dependencies)\nand the --installer option (which produces an installable .deb or .rpm file\nfor you to install, depending on your distribution).\n\nThe following command illustrates how to build Panda3D with some common\noptions:\n```bash\npython3 makepanda/makepanda.py --everything --installer --no-egl --no-gles --no-gles2 --no-opencv\n```\n\nYou will probably see some warnings saying that it's unable to find several\ndependency packages.  You should determine which ones you want to include in\nyour build and install the respective development packages.  You may visit\n[this manual page](https://docs.panda3d.org/1.11/python/distribution/thirdparty-licenses)\nfor an overview of the various dependencies.\n\nIf you are on Ubuntu, this command should cover the most frequently\nused third-party packages:\n\n```bash\nsudo apt-get install build-essential pkg-config fakeroot python3-dev libpng-dev libjpeg-dev libtiff-dev zlib1g-dev libssl-dev libx11-dev libgl1-mesa-dev libxrandr-dev libxxf86dga-dev libxcursor-dev bison flex libfreetype6-dev libvorbis-dev libeigen3-dev libopenal-dev libode-dev libbullet-dev nvidia-cg-toolkit libgtk-3-dev libassimp-dev libopenexr-dev\n```\n\nOnce Panda3D has built, you can either install the .deb or .rpm package that\nis produced, depending on which Linux distribution you are using.  For example,\nto install the package on Debian or Ubuntu, use this:\n\n```bash\nsudo dpkg -i panda3d*.deb\n```\n\nIf you are not using a Linux distribution that supports .deb or .rpm packages, you\nmay have to use the installpanda.py script instead, which will directly copy the\nfiles into the appropriate locations on your computer.  You may have to run the\n`ldconfig` tool in order to update your library cache after installing Panda3D.\n\nAlternatively, you can add the `--wheel` option, which will produce a .whl\nfile that can be installed into a Python installation using `pip`.\n\nmacOS\n-----\n\nOn macOS, you will need to download a set of precompiled thirdparty packages in order to\ncompile Panda3D, which can be acquired from [here](https://www.panda3d.org/download/panda3d-1.10.15/panda3d-1.10.15-tools-mac.tar.gz).\n\nAfter placing the thirdparty directory inside the panda3d source directory,\nyou may build Panda3D using a command like the following:\n\n```bash\npython makepanda/makepanda.py --everything --installer\n```\n\nYou may target a specific minimum macOS version using the --osxtarget flag\nfollowed by the release number, eg. 10.9 or 10.14.\n\nIf the build was successful, makepanda will have generated a .dmg file in\nthe source directory containing the installer.  Simply open it and run the\npackage file in order to install the SDK onto your system.\n\nFreeBSD\n-------\n\nBuilding on FreeBSD is very similar to building on Linux.  You will need to\ninstall the requisite packages using the system package manager.  To install\nthe recommended set of dependencies, you can use this command:\n\n```bash\npkg install pkgconf bison png jpeg-turbo tiff freetype2 harfbuzz eigen squish openal opusfile libvorbis libX11 mesa-libs ode bullet assimp openexr\n```\n\nYou will also need to choose which version of Python you want to use.\nInstall the appropriate package for it (such as `python37` or `python38`) and\nrun the makepanda script with your chosen Python version:\n\n```bash\npython3.11 makepanda/makepanda.py --everything --installer --no-egl --no-gles --no-gles2\n```\n\nIf successful, this will produce a .pkg file in the root of the source\ndirectory which you can install using `pkg install`.\n\nAndroid\n-------\n\nAlthough it's possible to build Panda3D on an Android device using the\n[termux](https://termux.com/) shell, the recommended route is to cross-compile\n.whl files using the SDK and NDK, which can then be used by the `build_apps`\ncommand to build a Python application into an .apk or .aab bundle.  You will\nneed to get the latest thirdparty packages, which can be obtained from here:\n\nhttps://rdb.name/thirdparty-android.tar.gz\n\nThis includes a copy of Python 3.13 compiled for Android.  You will need to\nuse Python 3.13 on the host as well.\n\nThese commands show how to compile wheels for the supported Android ABIs:\n\n```bash\nexport ANDROID_SDK_ROOT=/home/rdb/local/android\npython3.13 makepanda/makepanda.py --everything --outputdir built-droid-arm64 --arch arm64 --target android-21 --threads 6 --wheel\npython3.13 makepanda/makepanda.py --everything --outputdir built-droid-armv7a --arch arm --target android-21 --threads 6 --wheel\npython3.13 makepanda/makepanda.py --everything --outputdir built-droid-x86_64 --arch x86_64 --target android-21 --threads 6 --wheel\npython3.13 makepanda/makepanda.py --everything --outputdir built-droid-x86 --arch x86 --target android-21 --threads 6 --wheel\n```\n\nIt is now possible to use the generated wheels with `build_apps`, as explained\non this page:\n\nhttps://discourse.panda3d.org/t/deployment-for-android/28226\n\nRunning Tests\n=============\n\nInstall [PyTest](https://docs.pytest.org/en/latest/getting-started.html#installation)\nand run the `pytest` command.  If you have not installed Panda3D, you will\nneed to configure your environment by pointing the `PYTHONPATH` variable at\nthe `built` directory.  On Linux, you will also need to point the\n`LD_LIBRARY_PATH` variable at the `built/lib` directory.\n\nAs a convenience, you can alternatively pass the `--tests` option to makepanda.\n\nReporting Issues\n================\n\nIf you encounter any bugs when using Panda3D, please report them in the bug\ntracker.  This is hosted at:\n\n  https://github.com/panda3d/panda3d/issues\n\nMake sure to first use the search function to see if the bug has already been\nreported.  When filling out a bug report, make sure that you include as much\ninformation as possible to help the developers track down the issue, such as\nyour version of Panda3D, operating system, architecture, and any code and\nmodels that are necessary for the developers to reproduce the issue.\n\nIf you're not sure whether you've encountered a bug, feel free to ask about\nit in the forums or the IRC channel first.\n\nSupporting the Project\n======================\n\nIf you would like to support the project financially, visit\n[our campaign on OpenCollective](https://opencollective.com/panda3d).  Your\ncontributions help us accelerate the development of Panda3D.\n\nFor the list of backers, see the [BACKERS.md](BACKERS.md) file or visit the\n[Sponsors page](https://www.panda3d.org/sponsors) on our web site.  Thank you\nto everyone who has donated!\n\n<a href=\"https://opencollective.com/panda3d\" target=\"_blank\">\n  <img src=\"https://opencollective.com/panda3d/contribute/button@2x.png?color=blue\" width=300 />\n</a>\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "direct",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "dtool",
          "type": "tree",
          "content": null
        },
        {
          "name": "makepanda",
          "type": "tree",
          "content": null
        },
        {
          "name": "models",
          "type": "tree",
          "content": null
        },
        {
          "name": "mypy.ini",
          "type": "blob",
          "size": 0.2265625,
          "content": "[mypy]\nexplicit_package_bases = True\nexclude = /(dist|directscripts)/\nwarn_unused_ignores = True\n\n[mypy-panda3d.*]\nignore_missing_imports = True\n\n[mypy-wx.*]\nignore_missing_imports = True\n\n[mypy-Pmw.*]\nignore_missing_imports = True\n"
        },
        {
          "name": "panda",
          "type": "tree",
          "content": null
        },
        {
          "name": "pandatool",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements-test.txt",
          "type": "blob",
          "size": 0.0546875,
          "content": "pytest>=3.9.0\npytest-cov\n\nPmw-py3==2.1\nsetuptools>=15.2\n"
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 1.6025390625,
          "content": "[metadata]\nname = panda3d\nversion = 1.11.0\nurl = https://www.panda3d.org/\ndescription = Panda3D is a framework for 3D rendering and game development for Python and C++ programs.\nlicense = Modified BSD License\nlicense_file = LICENSE\nclassifiers =\n    Development Status :: 5 - Production/Stable\n    Intended Audience :: Developers\n    Intended Audience :: End Users/Desktop\n    License :: OSI Approved :: BSD License\n    Operating System :: OS Independent\n    Programming Language :: C++\n    Programming Language :: Python\n    Programming Language :: Python :: 3\n    Programming Language :: Python :: 3.8\n    Programming Language :: Python :: 3.9\n    Programming Language :: Python :: 3.10\n    Programming Language :: Python :: 3.11\n    Programming Language :: Python :: 3.12\n    Programming Language :: Python :: 3.13\n    Programming Language :: Python :: Implementation :: CPython\n    Topic :: Games/Entertainment\n    Topic :: Multimedia\n    Topic :: Multimedia :: Graphics\n    Topic :: Multimedia :: Graphics :: 3D Rendering\n    Topic :: Software Development :: Libraries\n    Topic :: Software Development :: Libraries :: Application Frameworks\n    Topic :: Software Development :: Libraries :: Python Modules\nauthor = Panda3D Team\nauthor_email = etc-panda3d@lists.andrew.cmu.edu\nproject_urls =\n    Download=https://www.panda3d.org/download/\n    Source=https://github.com/panda3d/panda3d\n    Tracker=https://github.com/panda3d/panda3d/issues\n    Documentation=https://www.panda3d.org/manual/\n    Funding=https://opencollective.com/panda3d\n\n[tool:pytest]\ntestpaths = tests\nnorecursedirs = *.egg .* _darcs build CVS node_modules venv {arch}\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}