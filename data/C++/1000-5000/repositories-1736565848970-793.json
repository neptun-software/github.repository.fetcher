{
  "metadata": {
    "timestamp": 1736565848970,
    "page": 793,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "matthewsamuel95/ACM-ICPC-Algorithms",
      "stars": 2137,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.234375,
          "content": "root = true\n\n\n[*]\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nindent_style = space\nindent_size = 2\n\n[*.txt]\nindent_style = tab\nindent_size = 4\n\n[*.{diff,md}]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.5341796875,
          "content": "# Prerequisites\n*.d\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n*.smod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n\n# Scala\ntarget/\n*.class\n#python and cpp\n*.DS_Store\n*.pyc\n*.txt\n.cache/*\n*.DS\n.idea/*\n*.out\n*.in\n"
        },
        {
          "name": "BFS",
          "type": "tree",
          "content": null
        },
        {
          "name": "BST",
          "type": "tree",
          "content": null
        },
        {
          "name": "BackTracking",
          "type": "tree",
          "content": null
        },
        {
          "name": "BitManipulation",
          "type": "tree",
          "content": null
        },
        {
          "name": "Branch and Bound",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.9853515625,
          "content": "## File Placement: \n\nFor example, math problems should go in Math/{Problem Title}/{Your File Name}\n\nMake sure your file is saved in your programming language's file extension (e.g. *.java, *.c, *.py, etc.) \n\nIf a title of a problem already exists and you have another solution, upload your solution within the same subfolder.\n\nIf you have used a different language then put it in Math/{Name of Problem}/{Language}/{File Name}. \n\nSimilarly, if the topic is not related to Math, then put it in its closest related folder (e.g. Sorting topics should go under the \"Sorting\" folder.   \n\n\nIf including new algorithms: \n* Add a README.md in the relative folder of the file placement, discussing the algorithm. \n* Update the table of contents in [README.md](https://github.com/matthewsamuel95/ACM-ICPC-Algorithms/blob/master/README.md)\n\n\n## Pre-requisites:\nInstall Git: \n*Are you a first time user and just beginning with Open-Source projects? No problem! Here's [how you can install Git on your computer](https://www.digitalocean.com/community/tutorials/how-to-contribute-to-open-source-getting-started-with-git)*\n###### After you are done installing Git on your computer:\n1. Fork this repository on Github.\n2. Clone it onto your computer by opening terminal and running the command $ git clone https ://github.com/{your username}/ACM-ICPC-Algorithms.git\n3. Use the actual name of the repository to change into that directory (eg. *$ cd repository*) and create and switch to a new branch by the following command: $ git checkout -b new-branch\n4. After modifying existing files or adding new files to the project, add them locally to your repository using $ git add -A command where A is the file\n5. Add a short message about what you contributed for with the git commit command. For eg. $ git commit -m \"Fixed documentation typos\"\n6. Now use the command $ git push --set-upstream origin new-branch to push the changes to the current branch of your forked repository\n7. Now you can create a Pull Request with the chosen branch as new-branch\n"
        },
        {
          "name": "DFS",
          "type": "tree",
          "content": null
        },
        {
          "name": "DP",
          "type": "tree",
          "content": null
        },
        {
          "name": "Data Structures",
          "type": "tree",
          "content": null
        },
        {
          "name": "Geometry 2D",
          "type": "tree",
          "content": null
        },
        {
          "name": "Graph",
          "type": "tree",
          "content": null
        },
        {
          "name": "Greedy",
          "type": "tree",
          "content": null
        },
        {
          "name": "Hashing",
          "type": "tree",
          "content": null
        },
        {
          "name": "MachineLearning",
          "type": "tree",
          "content": null
        },
        {
          "name": "Math",
          "type": "tree",
          "content": null
        },
        {
          "name": "NetworkFlow",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.1318359375,
          "content": "# ACM-ICPC Algorithms\n\n### Introduction to ACM-ICPC\nACM International Collegiate Programming Contest (abbreviated as ACM-ICPC or ICPC) is an annual multi-tiered competitive programming competition among the universities of the world.\n\nAlternately, we can say that the [International Collegiate Programming Contest](https://en.wikipedia.org/wiki/ACM_International_Collegiate_Programming_Contest) is an algorithmic programming contest for college students.\n- Teams of three, representing their university, work to solve real-world problems, fostering collaboration, creativity, innovation, and the ability to perform under pressure.\n- Through training and competition, teams challenge each other to raise the bar on what could be done.\n- Quite simply, it is the oldest, largest, and most prestigious programming contest in the world.\n\n### Purpose of ACM-ICPC Algorithms\nACM-ICPC Algorithms is a collection of important algorithms and data structures used to solve questions in this worldwide olympiad. It aims to provide solutions in various languages as per [ICPC 2018 WF](https://icpc.baylor.edu/worldfinals/programming-environment), including:\n-  C\n-  C++\n-  Java\n-  Python (2 & 3)\n-  Kotlin\n##### For more information, visit: **Official Website of [ICPC](https://icpc.baylor.edu/)**\n\n#### If you wish to contribute, please refer to [the contributor guidelines](https://github.com/matthewsamuel95/ACM-ICPC-Algorithms/blob/master/CONTRIBUTING.md).\n\n**Table of Contents :**\n\n* [Breadth First Search](/BFS)\n* [Branch And Bound](/Branch%20and%20Bound)\n  * [0/1 Knapsack](/Branch%20and%20Bound/0_1%20Knapsack)\n* [Binary Search Tree](/BST)\n* [Backtracking](/BackTracking)\n   * [Hamilton Path](/BackTracking/Hamilton%20Path)\n   * [Knights Tour](/BackTracking/KnightsTour)\n   * [NQueens](/BackTracking/NQueens)\n   * [Rat In A Maze](/BackTracking/RatInAMaze)\n   * [Sudoku Algorithm](/BackTracking/SudokuAlgorithm)\n* [Depth First Search](/DFS)\n* [Bit Manipulation](/BitManipulation)\n   * [Checking Power of 2](/BitManipulation/Checking_power_of_2)\n   * [Nth Magic No](/BitManipulation/Nth_magic_number)\n   * [Set kth Bit](/BitManipulation/Set_kth_bit)\n   * [Sparse Number](/BitManipulation/Sparse_number)\n   * [Count Ones](/BitManipulation/count_ones)\n   * [Divide Integers](/BitManipulation/divide_integers)\n   * [Even Odd](/BitManipulation/even_odd)\n   * [Print Subsets](/BitManipulation/print_subsets)\n   * [Reverse Bits](/BitManipulation/reverse_bits)\n   * [Single Number](/BitManipulation/single_number)\n   * [Swap Bits](/BitManipulation/swap_bits)\n* [Data Structures](/Data%20Structures)\n   * [Disjoint Set](/Data%20Structures/disjointset)\n   * [Doubly Linked List](/Data%20Structures/DoublyLinkedList)\n   * [Fenwick Tree](/Data%20Structures/Fenwick_tree)\n   * [LCA](/Data%20Structures/LCA)\n   * [Linked List](/Data%20Structures/Linked%20List)\n   * [Queue](/Data%20Structures/Queue)\n   * [Queue From Stack Or Stack From Queue](/Data%20Structures/QueueFromStack_StackFromQueue)\n   * [Red Black Tree](/Data%20Structures/Red%20Black%20Tree)\n   * [Singly Linked List](/Data%20Structures/SinglyLinkedList)\n   * [Stack](/Data%20Structures/Stack)\n   * [Segment Tree](/Data%20Structures/Segment%20Tree)\n   * [Treap](/Data%20Structures/Treap)\n   * [Trie](/Data%20Structures/Trie)\n* [Dynamic Programming](/DP)\n   * [Coin Change](/DP/Coin%20Change%20Problem)\n   * [Collect Maximum Points](/DP/Collect_Max_Points)\n   * [Edit Distance](/DP/EditDistance)\n   * [Egg Dropping Puzzle](/DP/Egg%20Dropping%20Puzzle)\n   * [Fibonacci Series](/DP/Fibonacci)\n   * [Floyd Warshall Algorithm](/DP/Floyd%20Warshall%20Algorithm)\n   * [Game Of Sum](/DP/game_of_sum)\n   * [Knapsack](/DP/Knapsack)\n   * [Longest Palindrome Substring](/DP/Longest%20Palindrome%20Substring)\n   * [Longest Common Increasing Subsequence](/DP/LCIS)\n   * [Longest Common Subsequence](/DP/LongestCommonSubsequence)\n   * [Longest Increasing Subsequence](/DP/LongestIncreasingSubsequence)\n   * [Longest Repeated Subsequence](/DP/Longest%20Repeated%20Subsequence)\n   * [Matrix Chain Multiplication](/DP/MatrixChain_multiplication)\n   * [Max Sum Increasing Subsequence](/DP/Maximum%20Sum%20Increasing%20Subsequence)\n   * [Minimum Path Sum](/DP/MinimumPathSum)\n   * [Number Of Islands](/DP/NumberOfIslands)\n   * [Partition Problem](/DP/PartitionProblem)\n   * [Print Neatly](/DP/PrintNeatly)\n   * [Recursive Staircase Problem](/DP/Recursive_Staircase_Problem)\n   * [Shortest Uncommon Subsequence](/DP/ShortestUncommonSubsequence)\n   * [Subset Sum](/DP/subset%20sum%20problem)\n   * [Longest Bitonic SubSequence](/DP/LongestBitonicSubseq)\n   * [Tiling Problem](/DP/Tiling%20Problem)\n* [Graph Algorithms](/Graph)\n   * [Articulation Points](/Graph/Articulation_points)\n   * [Bellman Ford SSSP](/Graph/BellmanFordSSSP)\n   * [Bridges](/Graph/bridges)\n   * [Centroid Decomposition](/Graph/Centroid%20Decomposition)\n   * [Detect Cycle](/Graph/Detect_Cycle)\n   * [Dials Algorithm](/Graph/DialsAlgorithm)\n   * [Dijkstras SPT](/Graph/DijkstrasSPT)\n   * [Euler Path](/Graph/EulerPath)\n   * [Floyd Warshall](/Graph/FloydWarshall)\n   * [Graph Coloring](/Graph/Graph_m_Coloring)\n   * [Johnson's Algorithm](/Graph/Johnson'sAlgorithm)\n   * [Kruskal MST](/Graph/KruskalsMST)\n   * [Prims MST](/Graph/PrimsMST)\n   * [Sack](/Graph/Sack)\n   * [SPFA SSSP](/Graph/SPFA%20SSSP)\n   * [Targan SCC](/Graph/TarganSCC)\n   * [Topo Sort](/Graph/TopoSort)\n   * [Fenwick Tree](/Graph/FenwickTree)\n   * [Weighted Quick Union](/Graph/Weighted_Quick_Union)\n* [Greedy Algorithms](/Greedy)\n   * [Activity Selection](/Greedy/ActivitySelection)\n   * [Containership](/Greedy/ContainerShip)\n   * [Equalizing Bit Strings](/Greedy/EqualizingBitStrings)\n   * [Gas Station](/Greedy/Gas%20Station)\n   * [Greedy Graph Coloring](/Greedy/Greedy_Graph_Coloring)\n   * [Huffman Coding](/Greedy/Huffman%20coding)\n   * [Knapsack](/Greedy/Knapsack)\n   * [Kruskal's Minimum Spanning Tree](/Greedy/Kruskal’sMinimumSpanningTree)\n   * [Maximum Increasing Subarray](/Greedy/MaximumIncreasingSubarray)\n   * [Minimum Coins](/Greedy/MinimumCoins)\n   * [Odd Sum Subsequence](/Greedy/OddSumSubsequence)\n* [Hashing Algorithms](/Hashing)\n   * [2 Sum](/Hashing/2_Sum)\n   * [3 Sum](/Hashing/3_Sum)\n   * [4 Sum](/Hashing/4_Sum)\n* [Machine Learning](/MachineLearning)\n   * [Perceptron](/MachineLearning/Perceptron)\n* [Mathematical Algorithms](/Math)\n   * [3 Sum square complexity](/Math/3_Sum_square_complexity)\n   * [Factors Of A Given Number](/Math/All%20factors%20of%20a%20given%20Number)\n   * [Collatz Conjecture](/Math/collatz_conjecture)\n   * [Combinations](/Math/Combinations)\n   * [Bézout's Coefficients](/Math/Bézout's%20Coefficients)\n   * [Convex Hull](/Math/convexhull)\n   * [Euler's Totient Function](/Math/eulers_totient_function)\n   * [Factorization](/Math/Factorization)\n   * [Factors](/Math/factors)\n   * [Fast Exponentiation with Mod](/Math/Fast%20Exponentiation%20with%20Mod)\n   * [Floor Square Root](/Math/floor_sqrt)\n   * [Greatest Common Divisor](/Math/gcd)\n   * [Histogram Area](/Math/histogram_area)\n   * [Largest Number Divisible By Three](/Math/largest_number_divisible_by_three)\n   * [Last Digit Exp](/Math/last_digit_exp)\n   * [Logarithm](/Math/log)\n   * [Lowest Common Multiple](/Math/lowest_common_multiple)\n   * [Matrix Power](/Math/Matrix_Power)\n   * [Max Divisible Number](/Math/max_divisible_num)\n   * [Max Sub Rectangle](/Math/max_sub_rectangle)\n   * [Max Sub Square](/Math/Max_Sub_Square)\n   * [Miller Rabin Primality Test](/Math/miller_rabin_primality_test)\n   * [Modular Multiplication Inverse](/Math/modular_multiplicative_inverse)\n   * [Next Power of 2](/Math/NextPow2)\n   * [Nth Root](/Math/nthRoot)\n   * [Pascal Row](/Math/pascal_row)\n   * [Power](/Math/Power)\n   * [Prime](/Math/Prime)\n   * [Randomized Algorithms](/Math/Randomized%20algorithms)\n   * [Set](/Math/Set)\n   * [Sieve Of Eratosthenes](/Math/sieve_of_eratosthenes)\n   * [Square Root](/Math/squareroot)\n   * [Subset Sum](/Math/subset_sum)\n   * [Sum Of Digits](/Math/sum_of_digits)\n   * [Tower Of Hanoi](/Math/TowerofHanoi)\n   * [Truncated Square Root](/Math/truncated_square_root)\n   * [Calculate And Print All Permutations](/Math/AllPermutations)\n   * [Calculate the result of binom(n,p)](/Math/binomial_coefficients)\n* [Network Flow](/NetworkFlow)\n   * [Dinic](/NetworkFlow/Dinic)\n   * [Edmund Karp](/NetworkFlow/EdmundKarp)\n   * [Ford Fulkerson](/NetworkFlow/FordFulkerson)\n   * [Goldberg Tarjan](/NetworkFlow/GoldbergTarjan)\n* [Search Algorithms](/Search)\n   * [Binary Search](/Search/BinarySearch)\n   * [Fibonacci Search](/Search/FibonacciSearch)\n   * [Hashing](/Search/hashing)\n   * [Jump Search](/Search/JumpSearch)\n   * [Linear Search](/Search/LinearSearch)\n   * [Ternary Search](/Search/TernarySearch)\n   * [Interpolation Search](/Search/InterpolationSearch)\n   * [Exponential Search](/Search/ExponentialSearch)\n* [Sorting Algorithms](/Sorting)\n   * [BogoSort](/Sorting/BogoSort)\n   * [Strand sort](/Sorting/strandsort)\n   * [Bubble Sort](/Sorting/Bubble%20Sort)\n   * [Bucket Sort](/Sorting/Bucket%20Sort)\n   * [Cocktail Shaker Sort](/Sorting/Cocktail%20Shaker%20Sort)\n   * [Comb Sort](/Sorting/Comb%20Sort)\n   * [Counting Sort](/Sorting/Counting%20Sort)\n   * [HeapSort](/Sorting/HeapSort)\n   * [Index Sort](/Sorting/Index%20Sort)\n   * [Insertion Sort](/Sorting/Insertion%20Sort)\n   * [Merge Sort](/Sorting/Merge%20Sort)\n   * [Pancake Sorting](/Sorting/Pancake%20Sorting)\n   * [Patience Sorting](/Sorting/Patience%20Sorting)\n   * [QuickSort](/Sorting/QuickSort)\n   * [Radix Sort](/Sorting/Radix%20Sort)\n   * [Selection Sort](/Sorting/Selection%20Sort)\n   * [ShellSort](/Sorting/ShellSort)\n   * [TimSort](/Sorting/TimSort)\n   * [Topological Sorting](/Sorting/Topological%20Sorting)\n* [String Algorithms](/String)\n   * [Anagram](/String/Anagram)\n   * [Balanced Parenthesis](/String/Balanced%20Parentheses)\n   * [Hamming Distance](/String/Hamming%20distance)\n   * [KMP](/String/KMP)\n   * [Palindrome](/String/Palindrome)\n   * [String Automaton](/String/String%20Automaton)\n   * [String Matching](/String/String%20Matching)\n   * [Substring](/String/Substring)\n   * [Top K Frequent Words](/String/Top_K_Frequent_Words)\n   * [Top K Frequent Words In Java](/String/top_k_frequent_words_in_java)\n   * [Uncompressing Strings](/String/Uncompressing_Strings)\n   * [Parsing Arithmetic](/String/ParsingArithmetic)\n* [Geometry 2D](/Geometry%202D)\n   * [Lines Intersection](/Geometry%202D/Lines%20Intersection)\n"
        },
        {
          "name": "Search",
          "type": "tree",
          "content": null
        },
        {
          "name": "Sorting",
          "type": "tree",
          "content": null
        },
        {
          "name": "String",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}