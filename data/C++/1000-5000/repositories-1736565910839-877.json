{
  "metadata": {
    "timestamp": 1736565910839,
    "page": 877,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "facebookarchive/xcbuild",
      "stars": 2003,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0556640625,
          "content": "ThirdParty/* linguist-vendored\n*.h linguist-language=C++\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0537109375,
          "content": "# OS X\n.DS_Store\n\n# Build\n/build/\n/build-*/\n/project/\n\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.220703125,
          "content": "[submodule \"ThirdParty/googletest\"]\n\tpath = ThirdParty/googletest\n\turl = https://github.com/google/googletest.git\n[submodule \"ThirdParty/linenoise\"]\n\tpath = ThirdParty/linenoise\n\turl = https://github.com/antirez/linenoise.git\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 3.2529296875,
          "content": "#\n# Copyright (c) 2015-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the BSD-style license found in the\n# LICENSE file in the root directory of this source tree.\n#\n\nlanguage: generic\n\nscript:\n  - make\n  - make test\n\nsudo: false\n\nbuild-shared:\n  build-sources:\n    linux: &linux-build-sources\n      - george-edison55-precise-backports\n    wine: &wine-build-sources\n      - *linux-build-sources\n  build-packages:\n    linux: &linux-build-packages\n      - pkg-config\n      - ninja-build\n      - cmake\n      - cmake-data\n    wine: &wine-build-packages\n      - *linux-build-packages\n      - binutils-mingw-w64-i686\n  build-env:\n    linux: &linux-build-env\n      - NINJA_FLAGS=-j2 # Travis is so parallel it runs out of memory. Limit that.\n    wine: &wine-build-env\n      - *linux-build-env\n      - CMAKE_FLAGS=\"-DCMAKE_SYSTEM_NAME=Windows -DCMAKE_RC_COMPILER=i686-w64-mingw32-windres -DCMAKE_LINKER=i686-w64-mingw32-ld -DZLIB_ROOT=/home/travis/build/facebook/xcbuild/zlib\"\n\nshared:\n  env:\n    wine: &wine-env\n      - TEST_RUNNER=wine # Use Wine to run Windows tests.\n  packages:\n    linux: &linux-packages\n      - zlib1g-dev\n      - libpng-dev\n      - libxml2-dev\n\nmatrix:\n  include:\n    - os: linux\n      dist: trusty\n      sudo: required\n      compiler: clang3.8\n      env:\n        - CC=clang-3.8\n        - CXX=clang++-3.8\n        - *linux-build-env\n      addons:\n        apt:\n          sources:\n            - llvm-toolchain-precise-3.8\n            - *linux-build-sources\n          packages:\n            - clang-3.8\n            - *linux-build-packages\n            - *linux-packages\n    - os: linux\n      dist: trusty\n      compiler: gcc4.8\n      sudo: required\n      env:\n        - CC=gcc-4.8\n        - CXX=g++-4.8\n        - *linux-build-env\n      addons:\n        apt:\n          sources:\n            - ubuntu-toolchain-r-test\n            - *linux-build-sources\n          packages:\n            - gcc-4.8\n            - g++-4.8\n            - *linux-build-packages\n            - *linux-packages\n    - os: osx\n      osx_image: xcode8.2\n      compiler: clang\n      before_install:\n        - brew update\n      install:\n        - brew reinstall cmake\n        - brew reinstall ninja\n    - os: linux\n      dist: trusty\n      compiler: mingw32\n      sudo: required\n      env:\n        - CC=i686-w64-mingw32-gcc\n        - CXX=i686-w64-mingw32-g++\n        - *wine-build-env\n        - *wine-env\n      before_install:\n        # Wine\n        - sudo dpkg --add-architecture i386\n        - sudo add-apt-repository -y ppa:wine/wine-builds\n        - sudo apt-get update -qq || true\n        - sudo apt-get install -qq -y --no-install-recommends winehq-devel\n        # zlib\n        - mkdir -p zlib\n        - pushd zlib\n        - pwd\n        - wget http://zlib.net/zlib128-dll.zip\n        - unzip zlib128-dll.zip\n        - popd\n        - mkdir -p build\n        - cp zlib/zlib1.dll build\n        # MinGW runtime\n        - cp /usr/lib/gcc/i686-w64-mingw32/4.8/libgcc_s_sjlj-1.dll build\n        - cp /usr/lib/gcc/i686-w64-mingw32/4.8/libstdc++-6.dll build\n        - cp /usr/i686-w64-mingw32/lib/libwinpthread-1.dll build\n      addons:\n        apt:\n          sources:\n            - *wine-build-sources\n          packages:\n            - gcc-mingw-w64-i686\n            - g++-mingw-w64-i686\n            - *wine-build-packages\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 4.154296875,
          "content": "#\n# Copyright (c) 2015-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the BSD-style license found in the\n# LICENSE file in the root directory of this source tree.\n#\n\nproject(xcbuild C CXX)\n\ncmake_minimum_required(VERSION 3.0)\ncmake_policy(SET CMP0054 NEW)\n\nset(BUILD_SHARED_LIBS True CACHE BOOL \"Build shared libraries.\" FORCE)\n\n# Platform options.\nif (\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Windows\")\n  # Export all symbols to avoid needing a `.def` file or `__dllexport`.\n  set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS True)\n\n  if (\"${CMAKE_CXX_PLATFORM_ID}\" STREQUAL \"MinGW\")\n    # Use MinGW formatting rather than MSVCRT for C99 support.\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -D__USE_MINGW_ANSI_STDIO=1\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -D__USE_MINGW_ANSI_STDIO=1\")\n  endif ()\nelseif (\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Darwin\")\n  set(CMAKE_MACOSX_RPATH True)\n  set(CMAKE_INSTALL_RPATH \"@executable_path/../lib\")\nelseif (\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Linux\")\n  set(CMAKE_INSTALL_RPATH \"$ORIGIN/../lib\")\nendif ()\n\n# Output into root build directory.\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}\")\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}\")\n\n# Language version.\nif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"MSVC\" OR \"${CMAKE_CXX_SIMULATE_ID}\" STREQUAL \"MSVC\")\n  # C++ is by default. C99 is not supported.\nelseif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\" OR \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -std=c99\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")\nelse ()\n  message(WARNING \"Compiler not supported to enable C++11.\")\nendif ()\n\n# Unused language features.\nif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"MSVC\" OR \"${CMAKE_CXX_SIMULATE_ID}\" STREQUAL \"MSVC\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /GR-\")\nelseif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\" OR \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fno-rtti -fno-exceptions\")\nelse ()\n  message(WARNING \"Compiler not supported to disable exceptions and RTTI.\")\nendif ()\n\nif ((\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\" AND NOT \"${CMAKE_CXX_SIMULATE_ID}\" STREQUAL \"MSVC\") OR \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n  #set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fsanitize=address\")\n  #set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=address\")\nendif ()\n\n# Enable all warnings.\nif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"MSVC\" OR \"${CMAKE_CXX_SIMULATE_ID}\" STREQUAL \"MSVC\")\n  add_compile_options(/D_CRT_SECURE_NO_WARNINGS) # TODO: /Wall /WX\nelseif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\" OR \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n  add_compile_options(-Wall -Werror)\n  if (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n    add_compile_options(-Wno-multichar -Wno-sign-compare)\n  endif ()\nelse ()\n  message(WARNING \"Compiler not supported to enable warnings.\")\nendif ()\n\n# Enable color diagnostics.\nif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\" AND NOT \"${CMAKE_CXX_SIMULATE_ID}\" STREQUAL \"MSVC\")\n  add_compile_options(-fcolor-diagnostics)\nelseif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\" AND \"${CMAKE_CXX_COMPILER_VERSION}\" VERSION_GREATER \"5.0\")\n  add_compile_options(-fdiagnostics-color)\nendif ()\n\n# Port BSD gcc\nif (\"${CMAKE_SYSTEM_NAME}\" MATCHES \"FreeBSD|OpenBSD\")\n  if (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n    add_compile_options(-D_GLIBCXX_USE_C99 -D_GLIBCXX_USE_C99_MATH -D_GLIBCXX_USE_C99_MATH_TR1 -D_GLIBCXX_USE_CXX11_ABI=1)\n  endif ()\n  if (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\" AND \"${CMAKE_CXX_COMPILER_VERSION}\" VERSION_GREATER \"5.0\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -lstdc++\")\n  endif ()\nendif ()\n\n# Enable unit testing.\ninclude(CTest)\n\nif (BUILD_TESTING)\n  add_subdirectory(ThirdParty/googletest/googletest)\n\n  function (ADD_UNIT_GTEST LIBRARY NAME SOURCES)\n    set(TARGET_NAME \"test_${LIBRARY}_${NAME}\")\n    add_executable(\"${TARGET_NAME}\" ${SOURCES})\n    target_link_libraries(\"${TARGET_NAME}\" PRIVATE \"${LIBRARY}\" gtest gtest_main)\n    target_include_directories(\"${TARGET_NAME}\" PRIVATE \"${CMAKE_SOURCE_DIR}/ThirdParty/googletest/googletest/include\")\n    add_test(NAME \"${TARGET_NAME}\" COMMAND \"${TARGET_NAME}\")\n  endfunction ()\nendif ()\n\nadd_subdirectory(Libraries)\nadd_subdirectory(Specifications)\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.1884765625,
          "content": "# Code of Conduct\n\nThis project adheres to the [Open Code of Conduct](http://todogroup.org/opencodeofconduct/#xcbuild/opensource@fb.com). By participating, you are expected to honor this code.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.544921875,
          "content": "# Contributing\n\nxcbuild actively welcomes contributions from the community. If you run into problems, please open an issue. Pull requests are great too!\n\n## Getting Started\n\nTo learn about xcbuild, start with the techincal overview below. Each of the components of xcbuild is documented in the `Headers` directory, with both module and API documentation available.\n\nIf you're new to xcbuild, we have a [list of issues](https://github.com/facebook/xcbuild/labels/starter) designed for new contributors to get started in the codebase. We're always happy to help people working on these issues and learning about xcbuild.\n\n## Overview\n\nTo make xcbuild useful as more than just a build tool, it's built as a collection of libraries. Each of these libraries has its headers under `Headers` and `PrivateHeaders`, source code under `Sources`, and unit tests under `Tests`. Under `Tools` are the executables that use the xcbuild libraries, including `xcbuild` itself.\n\nShared components:\n\n - `ext`: Standard library extensions from the future.\n - `plist`: Reader, writer, and model for ASCII, binary, and XML property lists.\n - `libutil`: Common utilities and platform abstractions.\n - `process`: Process launching and parameter abstraction.\n - `graphics`: Image loading, color conversion, and serialization.\n\nBuild components:\n\n - `ninja`: Generator for Ninja build files.\n - `dependency`: Parse dependency info from various tools.\n - `pbxsetting`: Build setting parsing, levels, and resolution.\n - `xcsdk`: Loads the available platforms, SDKs, and toolchains in a developer root.\n - `pbxspec`: Parses available build settings, tools, and file types into strongly-typed structures.\n - `pbxproj`: Parses project files into strongly-typed structures.\n - `xcworkspace`: Parses workspaces into strongly-typed structures.\n - `xcscheme`: Parses schemes into strongly-typed structures.\n - `builtin`: Built-in tools used for building, like file copying and validation.\n - `pbxbuild`: Performs the build. Made up of a number of subcomponents:\n   - `Build`: Top-level context for the scheme, targets, and action for a build.\n   - `Target`: Creates the build environment and settings for each target.\n   - `Phase`: Implementations for the various build phases (compile, link, copy, etc).\n   - `Tool`: Tool implementations for generating command line invocations.\n - `xcformatter`: Build log formatting styles.\n - `xcexecution`: Build execution engines.\n - `xcdriver`: Parses command line options and drives the build.\n\nAsset components:\n\n - `xcassets`: Parses asset catalogs into strongly-typed structures.\n - `libbom`: Reads and writes standard BOM archives.\n - `libcar`: Reads and writes asset archives archives within a BOM.\n - `acdriver`: Parses command line options and compiles asset catalogs.\n\n## Style\n\nC++ can be complex, so xcbuild tries to stick with a reasonable subset modeled after Swift, Rust, and other modern langages. Prefer immutable structures and classes. Prefer passing by const reference, and avoid non-const references. Templates are avoided when possible. Exceptions and RTTI are not used.\n\n## Contributor License Agreement (\"CLA\")\n\nIn order to accept your pull request, we need you to [submit a CLA](https://code.facebook.com/cla). You only need to do this once to work on any of Facebook's open source projects.\n\n## Code of Conduct\n\nThis project adheres to the [Open Code of Conduct](http://todogroup.org/opencodeofconduct/#xcbuild/opensource@fb.com). By participating, you are expected to honor this code.\n\n## License\n\nBy contributing to xcbuild you agree that your contributions will be licensed under its BSD license.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 7.0595703125,
          "content": "BSD License\n\nFor xcbuild software\n\nCopyright (c) 2015, Facebook, Inc. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n * Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n * Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n * Neither the name Facebook nor the names of its contributors may be used to\n   endorse or promote products derived from this software without specific\n   prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n## md5\nCopyright (C) 1999, 2002 Aladdin Enterprises.  All rights reserved.\n\nThis software is provided 'as-is', without any express or implied\nwarranty.  In no event will the authors be held liable for any damages\narising from the use of this software.\n\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n\n1. The origin of this software must not be misrepresented; you must not\n   claim that you wrote the original software. If you use this software\n   in a product, an acknowledgment in the product documentation would be\n   appreciated but is not required.\n2. Altered source versions must be plainly marked as such, and must not be\n   misrepresented as being the original software.\n3. This notice may not be removed or altered from any source distribution.\n\n\n## LLVM\nCopyright (c) 2003-2015 University of Illinois at Urbana-Champaign.\nAll rights reserved.\n\nDeveloped by:\n\n    LLVM Team\n\n    University of Illinois at Urbana-Champaign\n\n    http://llvm.org\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal with\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\n    * Redistributions of source code must retain the above copyright notice,\n      this list of conditions and the following disclaimers.\n\n    * Redistributions in binary form must reproduce the above copyright notice,\n      this list of conditions and the following disclaimers in the\n      documentation and/or other materials provided with the distribution.\n\n    * Neither the names of the LLVM Team, University of Illinois at\n      Urbana-Champaign, nor the names of its contributors may be used to\n      endorse or promote products derived from this Software without specific\n      prior written permission.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nCONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE\nSOFTWARE.\n\n\n## unicode\nCopyright (c) 2007 The NetBSD Foundation, Inc.\nAll rights reserved.\n\nThis code is derived from software contributed to The NetBSD Foundation\nby Dieter Baron.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS\n``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\nTO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS\nBE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n\n\n## osxbom\nInitial code\nAuthor: Joseph Coffland\nDate: October, 2011\n\nAdditional work on BOMPath & BOMTree\nAuthor: Julian Devlin\nDate: October, 2012\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\nThis program is in the public domain.\n\n\n## ThemeEngine\nCopyright (c) 2014, Alex Zielenski\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation\nand/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Libraries",
          "type": "tree",
          "content": null
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.8408203125,
          "content": "#\n# Copyright (c) 2015-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the BSD-style license found in the\n# LICENSE file in the root directory of this source tree.\n#\n\nbuild := build\nproject := project\n\ncmake := cmake\ncmake_flags := -DCMAKE_INSTALL_PREFIX= $(shell echo \"$$CMAKE_FLAGS\")\n\nninja := $(if $(shell which llbuild),llbuild ninja build,ninja)\nninja_flags := $(shell echo \"$$NINJA_FLAGS\")\n\nall:\n\tmkdir -p $(build)\n\t$(cmake) -B$(build) -H. -G Ninja $(cmake_flags)\n\t$(ninja) -C $(build) $(ninja_flags)\n\ninstall: all\n\t@DESTDIR=$(realpath $(PREFIX)) \\\n\t$(ninja) -C $(build) $(ninja_flags) install\n\nproject:\n\tmkdir -p $(project)\n\t$(cmake) -B$(project) -H. -G Xcode $(cmake_flags)\n\ntest: all\n\tset -e; for test in build/test_*; do echo; echo \"$$test\"; $$TEST_RUNNER ./$$test; done\n\nclean:\n\trm -rf $(build)\n\n.PHONY: project\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.4453125,
          "content": "\n<h1 align=\"center\">\n  <!--<img src=\"xcbuild_logo.jpg\" alt=\"Facebook xcbuild\" />-->\n  xcbuild\n</h1>\n\n**xcbuild** is an Xcode-compatible build tool with the goal of providing faster builds, better documentation of the build process and running on multiple platforms (macOS, Linux, and Windows)\n\n### Why xcbuild?\n\n<table>\n  <tr>\n    <th colspan=\"2\">Features</th>\n    <th rowspan=\"10\"></th>\n    <th colspan=\"3\">Performance</th>\n  </tr>\n  <tr><td>:rocket:</td><td>Blazing fast incremental builds</td><th rowspan=\"3\"></th><th rowspan=\"3\"><code>xcodebuild</code></th><th rowspan=\"3\">xcbuild + Ninja</th></tr>\n  <tr><td>:book:</td><td>Documents the Xcode build process</td></tr>\n  <tr><td>:link:</td><td>Builds Xcode projects and workspaces</td></tr>\n  <tr><td>:hatching_chick:</td><td>Supports Swift apps and frameworks</td><th rowspan=\"3\">Clean Build</th><td rowspan=\"3\">30.103s</td><td rowspan=\"3\">25.122s</td></tr>\n  <tr><td>:sparkles:</td><td>Tools and libraries for Xcode projects</td></tr>\n  <tr><td>:gift_heart:</td><td>Fully compatible with <a href=\"https://github.com/supermarin/xcpretty\">xcpretty</a></td></tr>\n  <tr><td>:tophat:</td><td>Uses <a href=\"https://ninja-build.org/\">Ninja</a> and <a href=\"https://github.com/apple/swift-llbuild\">llbuild</a></td><th rowspan=\"3\">Incremental Build</th><td rowspan=\"3\">2.190s</td><td rowspan=\"3\">0.046s :zap:</td></tr>\n  <tr><td>:octocat:</td><td>Open source under the BSD license</td></tr>\n  <tr><td>:penguin:</td><td>Builds on Linux and Windows</td></tr>\n</table>\n\n### xcbuild and other build tools\n\n[xctool](https://github.com/facebook/xctool) | [Buck](https://github.com/facebook/buck) | [xcpretty](https://github.com/supermarin/xcpretty)\n----|----|---\nxcbuild and [xctool](https://github.com/facebook/xctool) are both Xcode-compatible build systems. We plan on slowly deprecating xctool's build support but keep it as a great way to run tests. | Facebook's main build system is [Buck](https://buckbuild.com). Buck has a stronger architecture and advanced features like artifact caching while having a much simpler build format. If you have a new project, it's highly recommended. | xcbuild works great with [xcpretty](https://github.com/supermarin/xcpretty). Pipe the output from xcbuild to xcpretty the same way as you would from `xcodebuild`.\n\n## Building xcbuild\n\n[![Build Status](https://travis-ci.org/facebook/xcbuild.svg?branch=master)](https://travis-ci.org/facebook/xcbuild)\n\n### Requirements\n\n#### All platforms\n\n- [CMake](http://www.cmake.org) and [Ninja](https://ninja-build.org/) (or [llbuild](https://github.com/apple/swift-llbuild)) are required to build xcbuild.  \n\nOn macOS you can install those tools with [Homebrew](https://brew.sh/): `brew install cmake ninja`.\n\nOn Windows you can install those tools with [Chocolatey](https://chocolatey.org): `choco install cmake ninja`.\n\n#### Linux\n\n###### Ubuntu 18.04\n`sudo apt install libpng-dev libpng16-16 libxml2-dev pkg-config ninja-build`\n\n###### All others\n- GCC 4.8 or later. `libpng16-dev`, `zlib1g-dev`, `libxml2-dev`, and `pkg-config` are also required.\n\n#### FreeBSD\n\n###### FreeBSD 12.1\n`pkg install png-1.6.37 libxml2-2.9.9 pkgconf-1.6.3,1 ninja-1.9.0,2 gmake-4.2.1_3`\n\n#### OpenBSD\n\n###### OpenBSD 6.6\n`pkg_add png-1.6.37 libxml-2.9.9 pkgconf-1.6.3 ninja-1.9.0 gmake-4.2.1p4`\n\n#### macOS\n- Xcode 7 or later.\n\n#### Windows \n- Visual Studio 2015 or later, on Windows. A `zlib` DLL is also required.\n\n### Instructions \n\n#### All platforms\n\n```sh\ngit clone --depth=1 https://github.com/facebook/xcbuild\ncd xcbuild\ngit submodule update --init\n```\n#### Linux and macOS:\n\n```sh\nmake\n```\n\n#### FreeBSD and OpenBSD:\n\n```sh\ngmake\n```\n\nBuild output will be in the `build` directory. Run xcbuild with `./build/xcbuild`.\n\nYou can place xcbuild in your `bin` directory to run it from other locations: `mv build/xcbuild /usr/local/bin/`.\n\n#### Windows (experimental):\n\n```sh\ncmake -Bbuild -H. -G \"Visual Studio 14 2015\" -DZLIB_ROOT=<path>\n```\n\nOpen `build\\xcbuild.sln` and build.\n\n\n## Usage\n\nThe command line options are compatible with [xcodebuild](https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html).\n\n```\nxcbuild -workspace Example.xcworkspace -scheme Example\n```\n\n### Using Ninja (or llbuild)\n\nTo switch to the significantly faster [Ninja](https://ninja-build.org/) executor:\n\n```sh\nxcbuild -executor ninja [-workspace Example.xcworkspace ...]\n```\n\nBesides the `-executor ninja` parameters, the options are otherwise identical. The Ninja executor is fastest if it can avoid re-generating the Ninja files if the build configuration and input project files do not change.\n\n## Contributing\n\nxcbuild actively welcomes contributions from the community. If you're interested in contributing, be sure to check out the [contributing guide](https://github.com/facebook/xcbuild/blob/master/CONTRIBUTING.md). It includes some tips for getting started in the codebase, as well as important information about the code of conduct, license, and CLA.\n\n## Thanks\n\nxcbuild is built on build system documentation from the community. In particular, thanks to these people for their writing:\n\n - [Samantha Marshall](http://pewpewthespells.com)\n - [Damien Bobillot](http://maxao.free.fr/xcode-plugin-interface/)\n - [Michele Titolo](http://michele.io)\n - [Laurent Etiemble](http://www.monobjc.net/xcode-project-file-format.html)\n - [Apple Developer](https://developer.apple.com/legacy/library/documentation/DeveloperTools/Conceptual/XcodeBuildSystem/Xcode_Build_System.pdf)\n\nThird-party licenses are listed in the `LICENSE` document.\n"
        },
        {
          "name": "Specifications",
          "type": "tree",
          "content": null
        },
        {
          "name": "ThirdParty",
          "type": "tree",
          "content": null
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 1.2109375,
          "content": "#\n# Copyright (c) 2015-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the BSD-style license found in the\n# LICENSE file in the root directory of this source tree.\n#\n\nos: Visual Studio 2015\n\nversion: \"{build}\"\nclone_folder: C:\\projects\\xcbuild\n\nplatform:\n  - Win32\n  # Needs a matching zlib.\n  # - x64\n\nconfiguration:\n - Debug\n - Release\n\ninit:\n  - cmd: cmake --version\n  - cmd: msbuild /version\n\ninstall:\n  # zlib\n  - cmd: cd C:\\projects\n  - cmd: md zlib\n  - cmd: cd zlib\n  - cmd: appveyor DownloadFile http://zlib.net/zlib128-dll.zip\n  - cmd: 7z x zlib128-dll.zip\n\nbefore_build:\n  - cmd: cd C:\\projects\\xcbuild\n  - cmd: git submodule update --init\n  - cmd: if \"%platform%\"==\"Win32\" set CMAKE_GENERATOR_NAME=Visual Studio 14 2015\n  - cmd: if \"%platform%\"==\"x64\"   set CMAKE_GENERATOR_NAME=Visual Studio 14 2015 Win64\n  - cmd: cmake -Bbuild -H. -G \"%CMAKE_GENERATOR_NAME%\" -DCMAKE_BUILD_TYPE=%configuration% -DZLIB_ROOT=C:\\projects\\zlib\n  # zlib\n  - cmd: md build\\%configuration%\\\n  - cmd: cp C:\\projects\\zlib\\zlib1.dll build\\%configuration%\\\n\nbuild:\n  project: build\\xcbuild.sln\n\ntest_script:\n  - cmd: cd build\n  - cmd: ctest -C %configuration% --verbose .\n\nartifacts:\n  - path: build/%configuration%\n"
        }
      ]
    }
  ]
}