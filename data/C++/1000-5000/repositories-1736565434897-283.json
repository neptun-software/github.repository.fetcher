{
  "metadata": {
    "timestamp": 1736565434897,
    "page": 283,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "callmePicacho/Data-Structres",
      "stars": 3375,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.064453125,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n"
        },
        {
          "name": "License",
          "type": "blob",
          "size": 1.044921875,
          "content": "MIT License\n\nCopyright (c) 2022 callmePicacho\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.4921875,
          "content": "# Data-Structres\n\n我的博客 ：[叫我皮卡丘](<https://blog.csdn.net/liyuanyue2017>)\n\n\n[![Stargazers over time](https://starchart.cc/callmePicacho/Data-Structres.svg)](https://starchart.cc/callmePicacho/Data-Structres)\n\n\n### 前言\n中国大学MOOC上浙大的《数据结构》广受好评，原因有二，一是基础，简单易懂，老师讲得也清楚，另一大优点就是配套的每周相应知识点的编程题了，有难有易，容易题帮助巩固知识点，难题开阔视野。\n\n笔记加入了一些自己的想法，题解也有思路说明\n\n课程地址：https://www.icourse163.org/course/ZJU-93001\n\n现将笔记和题解记录如下\n\n\n### 基本概念\n\n\n [基本概念](https://blog.csdn.net/liyuanyue2017/article/details/82990565)\n\n| 题目名称                                                     | 考察知识点           | 难易度 |\n| :------------------------------------------------------------: | :----------: | :------: |\n| [最大子列和问题](https://blog.csdn.net/liyuanyue2017/article/details/82990246) | 时间复杂度、算法优化 | 简单   |\n| [Maximum Subsequence Sum](https://blog.csdn.net/liyuanyue2017/article/details/83015775) | 时间复杂度           | 中等   |\n| [二分查找](https://blog.csdn.net/liyuanyue2017/article/details/83029537) | 二分查找算法         | 简单   |\n\n### 线性结构\n\n[线性表](https://blog.csdn.net/liyuanyue2017/article/details/83244310)\n\n[堆栈](https://blog.csdn.net/liyuanyue2017/article/details/83688288)\n\n[队列](https://blog.csdn.net/liyuanyue2017/article/details/83688306)\n\n| 题目名称                                                     | 考察知识点 | 难易度 |\n| :------------------------------------------------------------: | :----------: | :------: |\n| [两个有序链表序列的合并](https://blog.csdn.net/liyuanyue2017/article/details/83214908) | 线性表     | 简单   |\n| [一元多项式的乘法与加法运算](https://blog.csdn.net/liyuanyue2017/article/details/83244253) | 线性表     | 中等   |\n| [Reversing Linked List](https://blog.csdn.net/liyuanyue2017/article/details/83269991) | 线性表     | 中等   |\n| [Pop Sequence](https://blog.csdn.net/liyuanyue2017/article/details/83302030) | 栈         | 中等   |\n\n### 树\n\n[树的定义](https://blog.csdn.net/liyuanyue2017/article/details/83412796)\n\n[二叉树的遍历](https://blog.csdn.net/liyuanyue2017/article/details/83548361)\n\n[二叉搜索树](https://blog.csdn.net/liyuanyue2017/article/details/83614914)\n\n[平衡二叉树](https://blog.csdn.net/liyuanyue2017/article/details/83652743)\n\n[堆](https://blog.csdn.net/liyuanyue2017/article/details/83713957)\n\n[哈夫曼树](https://blog.csdn.net/liyuanyue2017/article/details/83744262)\n\n[并查集的实现和优化](https://blog.csdn.net/liyuanyue2017/article/details/83830634)\n\n| 题目名称| 考察知识点| 难易度 |\n| :------------------------------------------------------------: | :----------: | :------: |\n| [树的同构](https://blog.csdn.net/liyuanyue2017/article/details/83538124) | 树的性质         | 简单   |\n| [List Leaves](https://blog.csdn.net/liyuanyue2017/article/details/83539009) | 树的建立与遍历   | 简单   |\n| [Tree Traversals Again](https://blog.csdn.net/liyuanyue2017/article/details/83545926) | 树的遍历         | 中等   |\n| [是否同一棵二叉搜索树](https://blog.csdn.net/liyuanyue2017/article/details/83625326) | BST的建立与遍历  | 简单   |\n| [Root of AVL Tree](https://blog.csdn.net/liyuanyue2017/article/details/83653257) | AVL的调整        | 简单   |\n| [Complete Binary Search Tree](https://blog.csdn.net/liyuanyue2017/article/details/83658106) | BST的花样(?)建立 | 中等   |\n| [二叉搜索树的操作集](https://blog.csdn.net/liyuanyue2017/article/details/83683953) | BST的操作集合    | 简单   |\n| [堆中的路径](https://blog.csdn.net/liyuanyue2017/article/details/83714443) | 最小堆的建立     | 简单   |\n| [File Transfer](https://blog.csdn.net/liyuanyue2017/article/details/83831833) | 并查集           | 中等   |\n| [Huffman Codes](https://blog.csdn.net/liyuanyue2017/article/details/83870849) | 哈夫曼树编码     | 中等   |\n\n### 图\n\n[图的定义](https://blog.csdn.net/liyuanyue2017/article/details/84029138)\n\n[图的遍历](https://blog.csdn.net/liyuanyue2017/article/details/84104075)\n\n[最短路径](https://blog.csdn.net/liyuanyue2017/article/details/84145832)\n\n[最小生成树](https://blog.csdn.net/liyuanyue2017/article/details/84202310)\n\n| 题目名称                                                     | 考察知识点 | 难易度 |\n| :------------------------------------------------------------: | :----------: | :------: |\n| [列出连通集](https://blog.csdn.net/liyuanyue2017/article/details/84034666) | 图的遍历   | 简单   |\n| [Saving James Bond - Easy Version](https://blog.csdn.net/liyuanyue2017/article/details/84068599) | 图的遍历   | 简单   |\n| [六度空间](https://blog.csdn.net/liyuanyue2017/article/details/84094685) | 图的遍历   | 中等   |\n| [哈利·波特的考试](https://blog.csdn.net/liyuanyue2017/article/details/84145804) | 最短路径   | 简单   |\n| [旅游规划](https://blog.csdn.net/liyuanyue2017/article/details/84192009) | 最短路径   | 简单   |\n| [公路村村通](https://blog.csdn.net/liyuanyue2017/article/details/84201998) | 最小生成树 | 简单   |\n\n\n### 排序\n\n[排序](https://blog.csdn.net/liyuanyue2017/article/details/84339337)\n\n| 题目名称                                                     | 考察知识点         | 难易度 |\n| :------------------------------------------------------------: | :----------: | :------: |\n| [排序](https://blog.csdn.net/liyuanyue2017/article/details/84325540) | 用来测试排序算法   | 简单   |\n| [Insert or Merge](https://blog.csdn.net/liyuanyue2017/article/details/84327267) | 插入排序、归并排序 | 简单   |\n| [Insertion or Heap Sort](https://blog.csdn.net/liyuanyue2017/article/details/84328364) | 插入排序、堆排序   | 简单   |\n| [统计工龄](https://blog.csdn.net/liyuanyue2017/article/details/84339532) | 桶排序             | 简单   |\n| [PAT Judge](https://blog.csdn.net/liyuanyue2017/article/details/84347191) | 结构体排序         | 中等   |\n| [Sort with Swap(0, i)](https://blog.csdn.net/liyuanyue2017/article/details/84400411) | 表排序             | 简单   |\n\n### 散列查找\n\n[散列查找](https://blog.csdn.net/liyuanyue2017/article/details/84572145)\n\n| 题目名称                                                     | 考察知识点         | 难易度 |\n| :------------------------------------------------------------: | :----------: | :------: |\n| [电话聊天狂人](https://blog.csdn.net/liyuanyue2017/article/details/84471871) | 散列查找           | 简单   |\n| [Hashing](https://blog.csdn.net/liyuanyue2017/article/details/84477582) | 散列查找           | 简单   |\n| [QQ帐户的申请与登陆](https://blog.csdn.net/liyuanyue2017/article/details/84491884) | 散列查找           | 简单   |\n| [Hashing - Hard Version](https://blog.csdn.net/liyuanyue2017/article/details/84501507) | 散列查找、拓扑排序 | 中等   |\n\n### KMP\n\n| 题目名称                                                     | 考察知识点 | 难易度 |\n| :------------------------------------------------------------: | :----------: | :------: |\n| [KMP 串的模式匹配](https://blog.csdn.net/liyuanyue2017/article/details/84567509) | 串的匹配   | 中等   |\n\n\n注：**Saving James Bond - Hard Version** 和 **关键活动**  实在没时间做了...\n\n完结撒花，弱弱求个 star~\n"
        },
        {
          "name": "上课Demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "编程作业",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}