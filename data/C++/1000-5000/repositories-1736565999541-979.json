{
  "metadata": {
    "timestamp": 1736565999541,
    "page": 979,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "equalsraf/neovim-qt",
      "stars": 1879,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0849609375,
          "content": ".*\nbuild/\nsrc/gui/runtime/doc/tags\nthird-party/msgpack*\ncompile_commands.json\n!.github\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 7.259765625,
          "content": "cmake_minimum_required(VERSION 3.9.0)\n# Neovim-Qt Version, used by --version update before release\n# 9999 = Development Pre-Release\nproject(neovim-qt VERSION 0.2.18.0)\n\nif(NOT EXISTS ${NEOVIM_EXEC})\n\tset(NEOVIM_EXEC nvim)\nendif()\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\noption(REPRODUCIBLE_BUILD \"Make this build reproducible\" ON)\noption(USE_GCOV \"Enable gcov support\" OFF)\noption(ENABLE_CLAZY \"Build with KDE Clang Clazy Linter\" OFF)\noption(ENABLE_TIDY \"Build with Clang Tidy Linter\" OFF)\n\nif(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\" OR\n\t\t\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -Wextra -Wno-unused-parameter -Wunused-variable\")\n\n\t# Qt Static Analysis - Clang-Tidy based extension\n\tif(ENABLE_CLAZY)\n\t\tstring(CONCAT CLAZY_CHECKS\n\t\t\t\"level0,\"\n\t\t\t\"level1,\"\n\t\t\t\"no-inefficient-qlist-soft,\"\n\t\t\t)\n\n\t\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Xclang -plugin-arg-clazy -Xclang ${CLAZY_CHECKS} -Wno-deprecated-declarations -Werror\")\n\tendif()\n\n\t# Clang-Tidy Static Analysis\n\tif(ENABLE_TIDY)\n\t\tstring(CONCAT TIDY_CHECKS\n\t\t\t\"-*,\"\n\t\t\t\"bugprone-*,\"\n\t\t\t\"-bugprone-branch-clone,\"\n\t\t\t\"-bugprone-inaccurate-erase,\"\n\t\t\t\"-bugprone-narrowing-conversions,\"\n\t\t\t\"-bugprone-parent-virtual-call,\"\n\t\t\t\"-bugprone-suspicious-include,\"\n\t\t\t\"-bugprone-undefined-memory-manipulation,\"\n\t\t\t\"cppcoreguidelines-*,\"\n\t\t\t\"-cppcoreguidelines-avoid-c-arrays,\"\n\t\t\t\"-cppcoreguidelines-avoid-goto,\"\n\t\t\t\"-cppcoreguidelines-avoid-magic-numbers,\"\n\t\t\t\"-cppcoreguidelines-avoid-non-const-global-variables,\"\n\t\t\t\"-cppcoreguidelines-explicit-virtual-functions,\"\n\t\t\t\"-cppcoreguidelines-init-variables,\"\n\t\t\t\"-cppcoreguidelines-macro-usage,\"\n\t\t\t\"-cppcoreguidelines-narrowing-conversions,\"\n\t\t\t\"-cppcoreguidelines-non-private-member-variables-in-classes,\"\n\t\t\t\"-cppcoreguidelines-owning-memory,\"\n\t\t\t\"-cppcoreguidelines-pro-bounds-array-to-pointer-decay,\"\n\t\t\t\"-cppcoreguidelines-pro-bounds-pointer-arithmetic,\"\n\t\t\t\"-cppcoreguidelines-pro-type-cstyle-cast,\"\n\t\t\t\"-cppcoreguidelines-pro-type-member-init,\"\n\t\t\t\"-cppcoreguidelines-pro-type-static-cast-downcast,\"\n\t\t\t\"-cppcoreguidelines-pro-type-vararg,\"\n\t\t\t\"-cppcoreguidelines-special-member-functions,\"\n\t\t\t\"modernize-*,\"\n\t\t\t\"-modernize-avoid-c-arrays,\"\n\t\t\t\"-modernize-loop-convert,\"\n\t\t\t\"-modernize-pass-by-value,\"\n\t\t\t\"-modernize-raw-string-literal,\"\n\t\t\t\"-modernize-return-braced-init-list,\"\n\t\t\t\"-modernize-use-auto,\"\n\t\t\t\"-modernize-use-nullptr,\"\n\t\t\t\"-modernize-use-override,\"\n\t\t\t\"-modernize-use-trailing-return-type,\"\n\t\t\t\"-modernize-use-using,\"\n\t\t\t\"performance-*,\"\n\t\t\t\"-performance-no-automatic-move,\"\n\t\t\t\"-performance-unnecessary-copy-initialization,\"\n\t\t\t\"-performance-unnecessary-value-param,\"\n\t\t\t\"readability-*,\"\n\t\t\t\"-readability-braces-around-statements,\"\n\t\t\t\"-readability-braces-around-statements,\"\n\t\t\t\"-readability-container-size-empty,\"\n\t\t\t\"-readability-convert-member-functions-to-static,\"\n\t\t\t\"-readability-delete-null-pointer,\"\n\t\t\t\"-readability-else-after-return,\"\n\t\t\t\"-readability-function-cognitive-complexity,\"\n\t\t\t\"-readability-function-size,\"\n\t\t\t\"-readability-identifier-naming,\"\n\t\t\t\"-readability-implicit-bool-cast,\"\n\t\t\t\"-readability-implicit-bool-conversion,\"\n\t\t\t\"-readability-inconsistent-declaration-parameter-name,\"\n\t\t\t\"-readability-isolate-declaration,\"\n\t\t\t\"-readability-magic-numbers,\"\n\t\t\t\"-readability-make-member-function-const,\"\n\t\t\t\"-readability-named-parameter,\"\n\t\t\t\"-readability-qualified-auto,\"\n\t\t\t\"-readability-redundant-access-specifiers,\"\n\t\t\t\"-readability-redundant-control-flow,\"\n\t\t\t\"-readability-redundant-member-init,\"\n\t\t\t\"-readability-simplify-boolean-expr,\"\n\t\t\t\"-readability-static-accessed-through-instance,\"\n\t\t\t\"-readability-uppercase-literal-suffix,\"\n\t\t\t\"-readability-identifier-length,\"\n\t\t\t\"-bugprone-easily-swappable-parameters,\"\n\t\t\t\"-bugprone-implicit-widening-of-multiplication-result,\"\n\t\t\t\"-cppcoreguidelines-prefer-member-initializer,\"\n\t\t\t\"-bugprone-unhandled-exception-at-new,\"\n\t\t\t\"-readability-suspicious-call-argument,\"\n\t\t\t)\n\t\tif(${CMAKE_VERSION} VERSION_LESS \"3.6.0\")\n\t\t\tmessage(\"ENABLE_TIDY requires CMake >= 3.6.0\")\n\t\telse()\n\t\t\tset(CMAKE_CXX_CLANG_TIDY clang-tidy \"-checks=${TIDY_CHECKS};-warnings-as-errors=*\")\n\t\tendif()\n\tendif()\n\n\t# Code Coverage Report\n\tif(USE_GCOV)\n\t\tmessage(STATUS \"Enabling coverage\")\n\t\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} --coverage\")\n\t\tset(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} --coverage\")\n\t\tset(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} --coverage\")\n\tendif()\n\nendif()\n\nset(CMAKE_MODULE_PATH \"${PROJECT_SOURCE_DIR}/cmake\")\nset(CMAKE_INCLUDE_CURRENT_DIR ON)\nset(CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE ON)\n\n# to generate a compile_commands.json usable by ycm and other tooling\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n# konsole_wcwidth.h\ninclude_directories(third-party)\n\n# homebrew/macrpots/fink etc.\ninclude(MacOSXPaths)\n\n# Qt\nset(CMAKE_AUTOMOC ON)\n\n# Build against Qt5 or Qt6\nif(NOT DEFINED WITH_QT)\n\tset(WITH_QT Qt5)\nelseif(NOT WITH_QT STREQUAL \"Qt5\" AND NOT WITH_QT STREQUAL \"Qt6\")\n\tmessage(WARNING \"Unknown qt version, expecting (Qt5, Qt6), using ${WITH_QT}\")\nendif()\n\nset(REQ_QT_MODULES Core Network Test Widgets)\nfind_package(QT NAMES ${WITH_QT} COMPONENTS ${REQ_QT_MODULES} REQUIRED)\nif(${QT_VERSION_MAJOR} VERSION_GREATER_EQUAL 6.0)\n\t# Qt6 uses SvgWidgets instead of Svg\n\tset(REQ_QT_MODULES ${REQ_QT_MODULES} SvgWidgets)\n\tset(CMAKE_CXX_STANDARD 17)\nelse()\n\tset(REQ_QT_MODULES ${REQ_QT_MODULES} Svg)\nendif()\nmessage(STATUS \"Building against Qt${QT_VERSION_MAJOR}.${QT_VERSION_MINOR} ${REQ_QT_MODULES}\")\nfind_package(Qt${QT_VERSION_MAJOR} COMPONENTS ${REQ_QT_MODULES} REQUIRED)\n\nif(Qt${QT_VERSION_MAJOR}Core_VERSION VERSION_LESS 5.8)\n\tmessage(FATAL_ERROR \"Minimum supported Qt5 version is 5.8!\")\nendif()\n\n# msgpack\noption(USE_SYSTEM_MSGPACK \"Use system msgpack libraries \" OFF)\nif(USE_SYSTEM_MSGPACK)\n\tfind_package(Msgpack REQUIRED)\nelse()\n\tadd_subdirectory(third-party)\nendif()\ninclude_directories(${MSGPACK_INCLUDE_DIRS})\n\nif(NOT CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n    add_definitions(-DQT_NO_DEBUG_OUTPUT)\nendif()\n\n# Place targets in bin/ or lib/ for all build configurations\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nforeach(CFGNAME ${CMAKE_CONFIGURATION_TYPES})\n  string(TOUPPER ${CFGNAME} CFGNAME)\n  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${CFGNAME} ${CMAKE_BINARY_DIR}/bin)\n  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${CFGNAME} ${CMAKE_BINARY_DIR}/lib)\n  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${CFGNAME} ${CMAKE_BINARY_DIR}/lib)\nendforeach()\n\nif(MSVC)\n  # Allow use of deprecated function names in MSVC (read/write)\n  add_definitions(-D_CRT_NONSTDC_NO_DEPRECATE)\nendif()\n\nadd_subdirectory(src)\nadd_subdirectory(doc)\n\noption(ENABLE_TESTS \"Build tests\" OFF)\nif(ENABLE_TESTS)\n\tfind_package(QT NAMES ${WITH_QT} COMPONENTS Test REQUIRED)\n\tenable_testing()\n\tadd_subdirectory(test)\n\tadd_subdirectory(src/gui/shellwidget/test)\nendif()\n\n# Bindings\nfind_package(PythonInterp)\nif (PYTHONINTERP_FOUND)\n\tset(NVIM \"nvim\" CACHE STRING \"Path to nvim executable\")\n\tadd_custom_target(bindings\n\t\tCOMMAND ${PYTHON_EXECUTABLE} ${CMAKE_SOURCE_DIR}/bindings/generate_bindings.py ${NVIM} ${CMAKE_SOURCE_DIR}/src/auto\n\t\tWORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n\t\tCOMMENT \"Generating bindings\"\n\t\t)\n\n\tadd_custom_target(bindings-preview\n\t\tCOMMAND ${PYTHON_EXECUTABLE} ${CMAKE_SOURCE_DIR}/bindings/generate_bindings.py ${NVIM}\n\t\t)\nendif()\n\ninclude(CPackOptions)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.728515625,
          "content": "\nThanks in advance for taking the time to contribute, here are a few guidelines\nthat help move things faster.\n\n## Submitting Issues\n\nPlease include the following information, it helps narrowing down issues\n\n- **Operating System**, Windows, Linux distribution, BSD, etc.\n- If building from source, **compiler** and\n  **Qt version**.\n- Using a binary build? Which **version** are you running?\n- For graphical issues **screenshots** help a lot. If you are having font problems provide\n  a **link to the font you are using**.\n\n## Code Contributions\n\n- **Rebase** changes against the tip of the master branch\n- Format C++ code with **tabs**\n- Python code is **PEP8**\n- **Keep portability in mind** this is expected to run in Windows and Unix systems\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.748046875,
          "content": "ISC License\n\nCopyright (c) 2015 Rui Abreu Ferreira <raf-ep@gmx.com>\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.5751953125,
          "content": "[![Build Status](https://circleci.com/gh/equalsraf/neovim-qt.svg?style=svg)](https://circleci.com/gh/equalsraf/neovim-qt)\n[![Build status](https://ci.appveyor.com/api/projects/status/c252f54mfjcuud8x/branch/master?svg=true)](https://ci.appveyor.com/project/equalsraf/neovim-qt/branch/master)\n[![Build Status](https://travis-ci.org/equalsraf/neovim-qt.svg?branch=master)](https://travis-ci.org/equalsraf/neovim-qt)\n[![codecov Status](https://codecov.io/gh/equalsraf/neovim-qt/branch/master/graph/badge.svg)](https://codecov.io/gh/equalsraf/neovim-qt)\n[![Build Status](https://dev.azure.com/equalsraf/neovim-qt/_apis/build/status/equalsraf.neovim-qt?branchName=master)](https://dev.azure.com/equalsraf/neovim-qt/_build/latest?definitionId=1&branchName=master)\n[![Downloads](https://img.shields.io/github/downloads/equalsraf/neovim-qt/total.svg?maxAge=2592000)](https://github.com/equalsraf/neovim-qt/releases)\n\n# Neovim Qt\n\nNeovim Qt is a lightweight cross-platform Neovim GUI written in C++ with Qt.\n\n![NeovimQt Screenshot](https://user-images.githubusercontent.com/11207308/108295028-f79f1b80-7164-11eb-8420-e9950fa97cd0.png)\n\n\n## Installing Neovim Qt\n\nNeovim Qt is available on all platforms supported by Qt.\n\nInstructions for common platforms are listed below.\n\n### Windows\n\nNightly versions of Neovim Qt require manual download + installation.\n\nPre-built Windows binaries are provided for all recent commits:  \n[AppVeyor Commit Build Wiki Instructions](https://github.com/equalsraf/neovim-qt/wiki/Windows-AppVeyor-Builds)\n\n#### Neovim version 0.10.0 and later\n\nStarting with Neovim version `0.10.0`, Neovim Qt is no longer bundled with Neovim on Windows; each package must be installed separately.\n\n```\n> winget install neovim.neovim\n> winget install equalsraf.neovim-qt\n```\n\n#### Neovim versions before 0.10.0\n\nNeovim Qt is bundled with all releases of Neovim on Windows prior to Neovim version `0.10.0`.\n\nSee the Neovim release page:\n\n - [Nightly Release](https://github.com/neovim/neovim/releases/nightly)\n - [Stable Release](https://github.com/neovim/neovim/releases/latest)\n\nNeovim is available as a [Chocolatey Package](https://chocolatey.org/packages/neovim/).\n\nStable Neovim + Neovim Qt:\n```\n> choco install neovim\n```\n\nPre-Release Neovim + Stable Neovim Qt:\n```\n> choco install neovim --pre\n```\n\n### MacOS\n\n#### Homebrew\n\nNeovim Qt is available in the [Homebrew](https://brew.sh/) core package repository.\n\nTo install the latest release:\n```\n$ brew install neovim-qt\n```\n\nTo install the latest development version:\n```\n$ brew install --HEAD neovim-qt\n```\n\n### Linux\n\nNeovim Qt is packaged for many distributions, use your favorite package manager.\n\nIf your distribution is not listed here, please create an Issue with instructions.\n\n#### Arch Linux\n\nNeovim Qt is available from the Arch [Community Repository](https://archlinux.org/packages/community/x86_64/neovim-qt/).\n\n```\n$ sudo pacman -S neovim-qt\n```\n\n#### Gentoo\n\nNeovim Qt is available from this [Portage Ebuild](https://github.com/jgehrig/gentoo/blob/master/app-editors/neovim-qt/neovim-qt-9999.ebuild).\n\nAlternatively, you can add the entire overlay:\n```\n$ eselect repository add jgehrig git https://github.com/jgehrig/gentoo.git\n$ emerge --sync\n$ emerge -av neovim-qt\n```\n\n#### OpenSUSE\n\nNeovim Qt is available from this [Community Package](https://build.opensuse.org/package/show/home%3AAptrug/neovim-qt).\n\n#### Debian, Ubuntu\n\nNeovim Qt is in both the Debian and Ubuntu package repositories, and can be installed with APT. This means that it should also available on any OS that uses these repositories, such as Linux Mint. \n\n```\n$ apt install neovim-qt\n```\n\n#### Homebrew\n\nHomebrew supports Linux (sometimes called \"Linuxbrew\"); follow the MacOS Homebrew installation instructions.\n\n## Configuration\n\nNeovim Qt can be configured through the `ginit.vim` file.\n\nThe default locations are:\n - Windows: `%LOCALAPPDATA%\\nvim\\ginit.vim`\n - MacOS: `~/.config/nvim/ginit.vim`\n - Linux: `~/.config/nvim/ginit.vim`\n\nRecommended `ginit.vim`:\n```vim\n\" Enable Mouse\nset mouse=a\n\n\" Set Editor Font\nif exists(':GuiFont')\n    \" Use GuiFont! to ignore font errors\n    GuiFont {font_name}:h{size}\nendif\n\n\" Disable GUI Tabline\nif exists(':GuiTabline')\n    GuiTabline 0\nendif\n\n\" Disable GUI Popupmenu\nif exists(':GuiPopupmenu')\n    GuiPopupmenu 0\nendif\n\n\" Enable GUI ScrollBar\nif exists(':GuiScrollBar')\n    GuiScrollBar 1\nendif\n\n\" Right Click Context Menu (Copy-Cut-Paste)\nnnoremap <silent><RightMouse> :call GuiShowContextMenu()<CR>\ninoremap <silent><RightMouse> <Esc>:call GuiShowContextMenu()<CR>\nxnoremap <silent><RightMouse> :call GuiShowContextMenu()<CR>gv\nsnoremap <silent><RightMouse> <C-G>:call GuiShowContextMenu()<CR>gv\n```\n\nFor more options, try `:help nvim_gui_shim` and scroll down to `Commands`.\n\nMore detailed information can be found on the [Configuration Wiki Page](https://github.com/equalsraf/neovim-qt/wiki/Configuration-Options).\n\n\n## Frequently Asked Questions\n\n### Why are the `:Gui` commands missing?\nYou need the Neovim Qt runtime to use commands like `:GuiFont`.\n\nYou can manually specify the path with `NVIM_QT_RUNTIME_PATH`.\n\nAlternatively, you can install the Neovim Qt plugin separately:\n`Plugin 'equalsraf/neovim-gui-shim`\n\nOn recent releases, you can check if the runtime is loaded with `nvim-qt --version`:\n```\n$ nvim-qt --version\nNVIM-QT v0.2.16.1\nBuild type: Release\nCompilation:-march=native -O2 -pipe -Wall -Wextra -Wno-unused-parameter -Wunused-variable -std=c++11\nQt Version: 5.15.2\nEnvironment:\n  nvim: nvim\n    args: --cmd let &rtp.=',/usr/share/nvim-qt/runtime' --cmd set termguicolors\n      runtime: /usr/share/nvim-qt/runtime\n...\n```\n\nNotice that `runtime:` is non-empty and points to a folder with `nvim_gui_shim.vim`.\n\n### Why does `:Gui` not work in `init.vim`?\n\nThe `:Gui...` commands are not loaded when `init.vim` runs.\n\nThese options must be configured from `ginit.vim`. The file should be placed in the same directory as `init.vim`.\n\nAlternatively, Neovim Qt responds to some vim options. You can `:set guifont=...` directly in `init.vim`.\n\n### How do I disable the GUI Tabs?\nTry `:GuiTabline 0`. This option can be added to `ginit.vim`.\n\nTo prevent startup flicker, see [Wiki - Configuration Options](https://github.com/equalsraf/neovim-qt/wiki/Configuration-Options)\n\n### Why does the popup menu look different?\n\nTry `:GuiPopupmenu 0`. This option can be added to `ginit.vim`.\n\nThe menu looks different because it is a widget rendered via Qt. Many users expect the `nvim` TUI (Terminal UI) menu instead.\n\n### How do I change the font?\n\nUse the `:GuiFont` command or the `'guifont'` setting. For example, `:GuiFont Fira Code:h12`, or `:set guifont=Hack:h12`.\n\n### Why does `:GuiFont` throw an error?\n\nYou may see these errors:\n\n- `{Font Name} is not a fixed pitch Font`\n- ` Warning: Font {Font Name} reports bad fixed pitch metrics`\n\nYou can override this warning with `:GuiFont! {Font Name}`.\n\nThese warnings display for fonts containing variable-width characters.\n\nThey are safe to ignore, but you might notice font spacing and clipping issues.\n\n### Why is Neovim unable to start?\n\nThe `nvim` binary must be in your `$PATH`. You can manually provide a path to Neovim:\n```\n$ nvim-qt --nvim {path_to_nvim}\n```\n\nIn recent versions, `nvim-qt --version` reports the `nvim` binary path:\n```\n$ nvim-qt --version\n...\nEnvironment:\n  nvim: nvim\n...\n```\n\n\n## Building From Source\n\nDetailed build instructions can be found at the [Wiki](https://github.com/equalsraf/neovim-qt/wiki/Build-Instructions).\n\nSimplified Build Commands:\n```\n$ mkdir build\n$ cd build\n$ cmake -DCMAKE_BUILD_TYPE=Release ..\n$ cmake --build .\n$ NVIM_QT_RUNTIME_PATH=../src/gui/runtime bin/nvim-qt\n```\n\nNOTE: `NVIM_QT_RUNTIME_PATH` must be set for commands such as `:GuiFont` to work.\n"
        },
        {
          "name": "bindings",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "third-party",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}