{
  "metadata": {
    "timestamp": 1736565344902,
    "page": 168,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "emilybache/GildedRose-Refactoring-Kata",
      "stars": 3828,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1015625,
          "content": "bin\nobj\n*.sln.DotSettings.user\n.vs\nvendor\n.idea\n*.iml\n**/*.received.*\nvenv\n**/DS_Store/*\n**/.DS_Store/*\n"
        },
        {
          "name": "Ada",
          "type": "tree",
          "content": null
        },
        {
          "name": "C",
          "type": "tree",
          "content": null
        },
        {
          "name": "COBOL",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.2763671875,
          "content": "Contributing to Gilded Rose Refactoring Kata\n======\n\nMore translations are most welcome! I'm very open for pull requests that\ntranslate the starting position into additional languages. However, please\ndo **not** open a pull request with your solution! It can be a bit confusing since\nGitHub encourages you to do so! Please only send me pull requests if you have a\ncorrection or improvement to the starting position. You don't want to spoil the\nfun of doing the exercise for other people!\n\n# Translating this code\n\nPlease note a translation should ideally include:\n\n- a translation of the production code for 'update_quality' and Item\n- one failing unit test complaining that \"fixme\" != \"foo\"\n- a TextTest fixture, i.e. a command-line program that runs update_quality on the sample data for the number of days specified\n\nPlease don't write too much code in the starting position or add too many unit\ntests. The idea with the one failing unit test is to tempt people to work out\nhow to fix it, discover it wasn't that hard, and now they understand what this\ntest is doing they realize they can improve it.\n\nIf your programming language doesn't have an easy way to add a command-line\ninterface, then the TextTest fixture is probably not necessary.\n\n# Recommended project structure\n\nProgramming languages have a variety of conventions but the starting points try\nto maintain order among languages. Ideally, the 'update_quality' and\nItem definitions should be in a file named `gilded_rose` with your language's\nconventional casing (e.g. snake case) and location (e.g. `src/`). The \"fixme\" !\n= \"foo\" test should go in a file `gilded_rose_test` in your language's\nconventional location (e.g. `test/`). The TextTest fixture and command-line\nprogram, that simulates update_quality over a number of days, should go in\n`program` or `texttest_fixture`. If you can define a default for the number of\ndays in the simulation please choose two days.\n\nA single sub-directory per language is not enforced. A language may have\nmore than one popular unit testing framework. In that case, please add\n`{language}-{framework}/` and maintain separation between the projects. In other\nwords, all the components requested should exist in both sub-directories.\nRe-using code between the directories would be confusing for those looking for a\nstarting point.\n"
        },
        {
          "name": "Delphi",
          "type": "tree",
          "content": null
        },
        {
          "name": "GildedRoseRequirements.md",
          "type": "blob",
          "size": 2.228515625,
          "content": "# Gilded Rose Requirements Specification\n\nHi and welcome to team Gilded Rose. As you know, we are a small inn with a prime location in a\nprominent city ran by a friendly innkeeper named Allison. We also buy and sell only the finest goods.\nUnfortunately, our goods are constantly degrading in `Quality` as they approach their sell by date.\n\nWe have a system in place that updates our inventory for us. It was developed by a no-nonsense type named\nLeeroy, who has moved on to new adventures. Your task is to add the new feature to our system so that\nwe can begin selling a new category of items. First an introduction to our system:\n\n- All `items` have a `SellIn` value which denotes the number of days we have to sell the `items`\n- All `items` have a `Quality` value which denotes how valuable the item is\n- At the end of each day our system lowers both values for every item\n\nPretty simple, right? Well this is where it gets interesting:\n\n- Once the sell by date has passed, `Quality` degrades twice as fast\n- The `Quality` of an item is never negative\n- __\"Aged Brie\"__ actually increases in `Quality` the older it gets\n- The `Quality` of an item is never more than `50`\n- __\"Sulfuras\"__, being a legendary item, never has to be sold or decreases in `Quality`\n- __\"Backstage passes\"__, like aged brie, increases in `Quality` as its `SellIn` value approaches;\n\t- `Quality` increases by `2` when there are `10` days or less and by `3` when there are `5` days or less but\n\t- `Quality` drops to `0` after the concert\n\nWe have recently signed a supplier of conjured items. This requires an update to our system:\n\n- __\"Conjured\"__ items degrade in `Quality` twice as fast as normal items\n\nFeel free to make any changes to the `UpdateQuality` method and add any new code as long as everything\nstill works correctly. However, do not alter the `Item` class or `Items` property as those belong to the\ngoblin in the corner who will insta-rage and one-shot you as he doesn't believe in shared code\nownership (you can make the `UpdateQuality` method and `Items` property static if you like, we'll cover\nfor you).\n\nJust for clarification, an item can never have its `Quality` increase above `50`, however __\"Sulfuras\"__ is a\nlegendary item and as such its `Quality` is `80` and it never alters.\n"
        },
        {
          "name": "GildedRoseRequirements_de.md",
          "type": "blob",
          "size": 2.7939453125,
          "content": "# Anforderungsspezifikation für vergoldete Rose (Gilded Rose)\n\nHallo und willkommen im Team **Gilded Rose**. Wie Du sicher weißt, sind wir ein kleiner Gasthof in bester Lage in einer bekannten Stadt, der von einem freundlichen Gastwirt namens Allison geführt wird. \nWir kaufen und verkaufen nur die besten Produkte.\nLeider verschlechtert sich die Qualität unserer Waren ständig, da sie sich ihrem Mindesthaltbarkeitsdatum nähern. \nWir haben ein System eingerichtet, um den Bestand automatisch aktualisieren zu können.\nEs wurde von Leeroy entwickelt, ein vernünftiger Typ, der zu neuen Abenteuern aufgebrochen ist. \nDamit wir mit dem Verkauf eines neuen Produkttyps beginnen können, ist es nun Deine Aufgabe, unserem System eine neue Funktion hinzuzufügen. \n\nZunächst eine Einführung in unser bestehendes System:\n* Alle Artikel (`Item`) haben einen `SellIn`-Wert, der die Anzahl der Tage angibt, die uns verbleiben, um den Artikel zu verkaufen\n* Alle Artikel haben einen `Quality`-Wert (Qualität), der angibt, wie wertvoll der Artikel ist\n* Am Tagesende senkt unser System für jeden Artikel beide Werte\n\nZiemlich einfach, oder? Nicht ganz, denn jetzt wird es interessant: \n\n* Sobald das \"Mindesthaltbarkeitsdatum\" überschritten wurde, nimmt die „Qualität“ doppelt so schnell ab\n* Die \"Qualität\" eines Artikels ist nie negativ\n* \"Alter Brie\" (`Aged Brie`) nimmt an Qualität zu, je älter er wird\n* Die \"Qualität\" eines Artikels ist nie höher als 50\n* Der legendäre Artikel \"Sulfuras\" ändert weder sein \"Verkaufsdatum\", noch verschlechtert sich seine \"Qualität\"\n* \"Backstage-Pässe\" (`backstage passes`) werden - wie `Aged Brie` - hochwertiger, solange das \"Verkaufsdatum\" noch nicht erreicht wurde. \n  Bei 10 Tagen oder weniger erhöht sich die Qualität um 2, bei 5 Tagen oder weniger um 3, nach dem \"Konzert\" sinkt sie aber auf 0. \n\nKürzlich haben wir einen Lieferanten für \"beschworene\" (`conjured`) Artikel unter Vertrag genommen. Dies erfordert ein Update unseres Systems: \n* \"Beschworene\" Artikel verlieren doppelt so schnell an Qualität wie normale Artikel\n\nSolange alles einwandfrei funktioniert, kannst Du beliebige Änderungen an der Methode `updateQuality` vornehmen und so viel Code hinzufügen, wie Du möchtest. Aber Vorsicht: Die `Item`-Klasse oder ihre Eigenschaften darfst Du in keiner Weise ändern, denn diese Klasse gehört dem Kobold in der Ecke, der sofort wütend wird und Dich sofort töten würde, denn er glaubt nicht an die Kultur von gemeinsamem Code (`shared code`). \n(Wenn Du möchtest, kannst Du die `updateQuality`-Methode und die `Item`-Eigenschaft statisch machen, das regeln wir dann.) \n\nSicherheitshalber noch ein Hinweis: Die Qualität eines Artikels kann nie höher als 50 sein, aber `Sulfuras` ist ein legendärer Artikel und als solcher beträgt seine Qualität 80 und ändert sich auch nie. \n"
        },
        {
          "name": "GildedRoseRequirements_es.md",
          "type": "blob",
          "size": 3.048828125,
          "content": "# Especificaciones de la Rosa Dorada (Gilded Rose)\n\nBienvenido al equipo **Gilded Rose**.\nComo sabrás, somos una pequeña posada ubicada estratégicamente en una prestigiosa ciudad, atendida por la amable Allison. También compramos y vendemos mercadería de alta calidad. Por desgracia, nuestra mercadería va bajando de calidad (`Quality`) a medida que se aproxima la fecha de venta.\n\nTenemos un sistema instalado que actualiza automáticamente nuestro inventario. Este sistema fue desarrollado por un tipo serio y práctico llamado Leeroy, que ahora se encuentra en otras aventuras.\n\nTu tarea es añadir una nueva funcionalidad al sistema para que podamos comenzar a vender una nueva categoría de items. Pero primero, vamos a describir como funciona el sistema:\n\n## Descripción del sistema\n\n- Todos los artículos (`item`) tienen una propiedad `SellIn` que denota el número de días que tenemos para venderlo\n- Todos los artículos (`item`) tienen una propiedad `Quality` que denota cúan valioso es el artículo\n- Al final de cada día, nuestro sistema decrementa ambos valores para cada artículo mediante el método `updateQuality`\n\nBastante simple, ¿no? Bueno, ahora es donde se pone interesante:\n\n- Una vez que ha pasado la fecha recomendada de venta (`SellIn`), la calidad (`Quality`) se degrada al doble de velocidad\n- La `calidad` de un artículo nunca es negativa\n- El \"Queso Brie envejecido\" (`Aged brie`) incrementa su calidad (`Quality`) a medida que madura con los días\n  - Su calidad (`Quality`) aumenta en `1` unidad cada día\n  - Una vez expirada la fecha de venta (`SellIn`) su calidad (`Quality`) aumenta el doble día\n- La calidad de un artículo (`Quality`) no puede superar `50`\n- El artículo `Sulfuras`, es un artículo legendario, no necesitamos venderlo en ninguna fecha (`SellIn`) y tampoco se degrada en (`Quality`)\n- El artículo \"Entrada al Backstage\" (`Backstage passes`), incrementa su valor (`Quality`) a medida que acerca la fecha del concierto (`SellIn`)\n  - Si faltan `10` días o menos para el concierto, la calidad (`Quality`) se incrementa en `2` unidades\n  - Si faltan `5` días o menos, la calidad (`Quality`) se incrementa en `3` unidades\n  - Una vez pasada fecha del concierto (`SellIn`), la entrada pierde su valor (`Quality`) y cae a `0`\n\n## Tu tarea\n\nHace poco contratamos a un proveedor de artículos _conjurados mágicamente_.\nEsto requiere una actualización del sistema:\n\n- Los artículos conjurados (`Conjured`) degradan su calidad (`Quality`) el doble de rápido que los artículos normales\n\nSiéntete libre de modificar el método `updateQuality` y agregar el código que sea necesario, siempre y cuando todo siga funcionando correctamente. Sin embargo, **no debes modificar la clase `Item` ni sus propiedades**, ya que esta pertenece a un duende que en un ataque de ira te liquidaría de un golpe ya que no cree en la cultura de código compartido.\n\n## Notas finales\n\nPara aclarar: un artículo nunca puede tener una calidad (`Quality`) superior a `50`, sin embargo los objetos `Sulfuras`, siendo un artículo legendario, poseen una calidad inmutable de `80`.\n"
        },
        {
          "name": "GildedRoseRequirements_eu.md",
          "type": "blob",
          "size": 2.75390625,
          "content": "# Urrezko Arrosaren zehaztapenak (Gilded Rose)\n\nOngi etorri **Gilded Rose**-eko taldera.\nJakingo duzunez, hiri ospetsu batean estrategikoki kokatutako ostatu txiki bat gara, Allison atseginak zuzendua. Kalitate oneneko salgaiak ere erosten eta saltzen ditugu. Zoritxarrez, gure salgaiak kalitatez jaisten doaz salmenta-data hurbildu ahala.\n\nInbentarioa automatikoki eguneratzen duen sistema bat dugu instalaturik. Gaur egun abentura berrietan dabilen Leeroy izeneko mutiko zentzugabe batek garatu zuen sistema hau. Zure zeregina sistemari ezaugarri berri bat gehitzea da, artikulu kategoria berri bat saltzen has gaitezen.\n\n## Hasierako deskribapena\n\nBaina lehenik, sistema azalduko dugu:\n\n* Artikulu guztiek (`Item`) `sellIn` izeneko propietate bat dute berau saltzeko ditugun egunen kopurua adierazten duena.\n* Artikulu guztiek `quality` izeneko propietate bat dute artikulu hori zein baliotsua den adierazten duena.\n* Egunaren amaieran, gure sistemak artikulu bakoitzerako bi balio horiek gutxitzen ditu `updateQuality` metodoaren bitartez.\n\nNahiko sinplea, ezta? Beno, orain da interesgarri jartzen denean:\n\n* Behin gomendatutako salmenta-data igarota, kalitatea (`quality`) bi aldiz azkarrago degradatzen da.\n* Artikulu baten kalitatea (`quality`) ez da inoiz negatiboa.\n* “Aged brie”-ren kalitatea (`quality`) hobetu egiten da zahartu ahala unitate `1` gehituz egun bakoitzeko.\n* Artikulu baten kalitatea (`quality`) ezin da inoiz `50` baino handiagoa izan.\n* \"Sulfuras\" artikuluak, artikulu legendarioa izanik, ez du salmenta-data aldatzen eta bere kalitatea ez da degradatzen.\n* \"Backstage Passes\"-ak, \"Aged brie”-a bezala, kalitatean (`quality`) hobetzen doaz salmenta-data (`sellIn`) hurbildu ahala:\n  * Salmenta-datarako (`sellIn`) `10` egun edo gutxiago falta badira, kalitatea (`quality`) `2` unitatetan haundituko da.\n  * Salmenta-datarako (`sellIn`) `5` egun edo gutxiago falta badira, kalitatea (`quality`) `3` unitatetan haundituko da.\n  * Salmenta-data (`sellIn`) pasa ondoren, kalitatea (`quality`) `0`ra pasako da.\n\nDuela gutxi, konjuratutako artikulu hornitzaile bat kontratatu genuen. Horretarako, sistema eguneratu behar da:\n\n* Konjuratutako (`conjured`) artikuluek normalek baino `2` aldiz azkarrago degradatzen dute kalitatea (`quality`).\n\nLasai alda dezakez `updateQuality` metodoa beharrezkoa ikusten duzu kodea gehitzeko, beti ere, denak behar bezela funtzionatzen jarraitzen duen bitartean. Baina ezin duzu ordea `Item` objektua ezta bere propietaterik aldatu, txokoan dagoen goblinarenak bait dira eta haserre-krisi batean erasotu egin zaitzake ez bait du kode jabetza partekatuan sinisten.\n\n## Azken oharrak\n\nArgitzearren, artikulu batek ezin du inoiz `50` baino kalitate (`quality`) handiagoa izan, \"Sulfuras\" ordea, artikulu legendario bat izanik, `80`ko kalitate aldaezina dauka.\n"
        },
        {
          "name": "GildedRoseRequirements_fr.md",
          "type": "blob",
          "size": 2.806640625,
          "content": "# Spécification de la Rose dorée (Gilded Rose)\n\nBonjour et bienvenue dans l'équipe de la Rose dorée.\n\nComme vous le savez, notre petite taverne située à proximité d'une cité importante est dirigée par l'aubergiste amicale Allison.\n\nNous achetons et vendons uniquement les meilleurs produits.\nMalheureusement, la qualité de nos marchandises se dégrade constamment à l'approche de leur date de péremption.\n\nUn système a été mis en place pour mettre à jour notre inventaire.\nIl a été développé par Leeroy, une personne pleine de bon sens qui est partie pour de nouvelles aventures.\n\nVotre mission est d'ajouter une nouvelle fonctionnalité à notre système pour que nous puissions commencer à vendre un nouveau type de produits.\n\nMais d'abord, laissez-moi vous présenter notre système :\n\n- Tous les éléments ont une valeur `sellIn` qui désigne le nombre de jours restant pour vendre l'article.\n- Tous les articles ont une valeur `quality` qui dénote combien l'article est précieux.\n- À la fin de chaque journée, notre système diminue ces deux valeurs pour chaque produit.\n\nPlutôt simple, non ?\n\nAttendez, ça devient intéressant :\n\n- Une fois que la date de péremption est passée, la qualité se dégrade deux fois plus rapidement.\n- La qualité (`quality`) d'un produit ne peut jamais être négative.\n- \"Aged Brie\" augmente sa qualité (`quality`) plus le temps passe.\n- La qualité d'un produit n'est jamais de plus de 50.\n- \"Sulfuras\", étant un objet légendaire, n'a pas de date de péremption et ne perd jamais en qualité (`quality`)\n- \"Backstage passes\", comme le \"Aged Brie\", augmente sa qualité (`quality`) plus le temps passe (`sellIn`) ; La qualité augmente de 2 quand il reste 10 jours ou moins et de 3 quand il reste 5 jours ou moins, mais la qualité tombe à 0 après le concert.\n\nNous avons récemment signé un partenariat avec un fournisseur de produit invoqué (\"Conjured\").\nCela nécessite une mise à jour de notre système :\n\n- les éléments \"Conjured\" voient leur qualité se dégrader de deux fois plus vite que les objets normaux.\n\nVous pouvez faire les changements que vous voulez à la méthode `updateQuality` et ajouter autant de code que vous voulez, tant que tout fonctionne correctement.\nCependant, nous devons vous prévenir, vous ne devez en aucun cas modifier la classe `Item` ou ses propriétés car cette classe appartient au gobelin à l'étage qui entrerait dans une rage instantanée et vous tuerait sans délai : il ne croit pas au partage du code.\n(Vous pouvez rendre la méthode `updateQuality` statique, ainsi que des propriétés dans la classe `Item` si vous voulez, nous vous couvrirons)\n\nJuste une précision, un produit ne peut jamais voir sa qualité augmenter au-dessus de 50, cependant \"Sulfuras\" est un objet légendaire et comme tel sa qualité est de 80 et elle ne change jamais.\n"
        },
        {
          "name": "GildedRoseRequirements_it.md",
          "type": "blob",
          "size": 2.8828125,
          "content": "# Requisiti della rosa dorata (Gilded Rose)\n\n\nCiao, benvenuto nel team **Rosa dorata**.  \nCome sapete, siamo una piccola locanda con una posizione privilegiata in una importante città  \ngestita da un amichevole locandiere di nome Allison.\nCompriamo e vendiamo solo i prodotti migliori.\n\nSfortunatamente, la qualità dei nostri prodotti diminuisce costantemente man mano che si avvicinano alla data di scadenza.  \nDisponiamo di un sistema che aggiorna il nostro inventario in automatico.  \nIl sistema è stato sviluppato da un tipo pratico chiamato Leeroy, che è passato a nuove avventure.  \n\nIl tuo compito è aggiungere una nuova funzionalità al nostro sistema in modo che possiamo iniziare a vendere una nuova categoria di articoli. \n\n## Decrizione del sistema:\n\n- Tutti i prodotti (`Item`) hanno una proprietà `sellIn` che indica quanti giorni mancano alla data di scadenza.\n- Tutti i prodotti (`Item`) hanno una proprietà `quality` che denota il valore dell'articolo.\n- Alla fine di ogni giornata il nostro sistema decrementa entrambe le proprietà per ogni prodotto tramite il metodo `updateQuality`\n\nAbbastanza semplice, vero? Bene, è da qui che la cosa si fa interessante:\n\n- Una volta passata la data di scadenza, la proprietà `quality` diminuisce due volte più velocemente\n- La proprietà `quality` di un prodotto non può essere mai negativa\n- Il prodotto \"Brie invecchiato\" (`Aged brie`) aumenta di uno la sua `quality` man mano che invecchia\n- La `quality` di un prodotto non può mai essere superiore a 50\n- Il prodotto \"Sulfuras\" (`Sulfuras`), essendo un oggetto leggendario, non modifica mai ne la proprietà `sellIn` ne degrada la proprietà `quality`\n- I prodotto \"Backstage pass\" (`Backstage pass`), come il brie invecchiato (`Aged brie`), aumentano `quality` man mano che il loro valore di `sellIn` si avvicina a 0\n    - La proprietà `quality` aumenta di 2 quando mancano 10 giorni o meno e di 3 quando ci sono 5 giorni o meno ma,\n    - La proprietà `quality` scende a 0 quando il valore di `sellIn` scende a 0.\n\n## La nuova richiesta:\n\nRecentemente è stato firmato un contratto con un fornitore di oggetti \"oggetti magici\" (`conjurados`)\nCiò richiede un aggiornamento del nostro sistema:\n\n- Gli \"oggetti magici\" (`conjurados`) diminuiscono di `quality` due volte più velocemente rispetto ai prodotti normali.\n\nSentiti libero di apportare qualsiasi modifica al metodo \"updateQuality\" ed aggiungere codice se necessario, purché tutto continui a funzionare correttamente.\nTuttavia, **non alterare l'oggetto `Item` o le sue proprietà** poiché appartengono al goblin nell'angolo, che in un impeto di rabbia ti colpirà perché non crede nella cultura della condivisione del codice.\n\n## Note finali:\n\n- Un prodotto non può mai avere un aumento di qualità `quality` superiore a 50, tuttavia \n- il prodotto \"Sulfuras\" (`Sulfuras`) è un oggetto leggendario e come tale la sua Qualità `quality` è 80 e non si altera mai.\n"
        },
        {
          "name": "GildedRoseRequirements_jp.md",
          "type": "blob",
          "size": 2.7099609375,
          "content": "# Gilded Rose 要件仕様書\nこんにちは、チーム・ギルドローズへようこそ。我々はアリソンという気さくな人が経営する、都会の一等地にある小さな宿です。\n\nまた、私たちは最高級の商品のみを仕入れて販売しています。残念なことに、商品は販売期限が近づくにつれ、品質が低下していきます。\n\n私たちには在庫を更新するシステムがあります。これは、新たな冒険へと旅立ったリーロイという無神経な性格の人物によって開発されました。\n\nあなたの仕事は、システムに新しい機能を追加して、新しいカテゴリーのアイテムを販売できるようにすることです。\n\n最初にシステムの紹介をします。\n\n* すべてのアイテムには、アイテムを販売するための残り日数（販売期限）を示すSellIn値があります。\n* すべてのアイテムには、そのアイテムの価値を示すQuality値があります。\n* 毎日の終わりには、私たちのシステムは、両方の項目の値を1小さくします。\n\n簡単でしょ？ここからが面白いところです。\n\n* 販売するための残り日数が無くなると、Quality値は2小さくなります。\n* Quality値は決してマイナスにはなりません。\n* \"Aged Brie\"は、日が経つほどQuality値が上がっていきます。\n* Quality値は50以上にはなりません。\n* \"Sulfuras\"は伝説のアイテムなので、販売されたり、Quality値が低下したりすることはありません。\n* \"Backstage passes\"は、\"Aged Brie\"と同様、SellIn値が近づくにつれてQuality値が上昇し、10日以内になると毎日2上がり、5日以内になると毎日3上がりますが、コンサート終了後には0になります。\n\n最近、\"Conjured\"アイテムのサプライヤーと契約しました。そのため、システムの更新が必要です。\n\n* \"Conjured\"アイテムは、通常のアイテムの2倍の速さで品質が劣化します。\n\nすべてが正常に動作する限り、UpdateQualityメソッドに変更を加えたり、新しいコードを追加したりすることは自由に行ってください。ただし、ItemクラスやItemsプロパティは変更しないでください。\n\nこれらは、隅にいるゴブリンのものなので、コードの共有所有権を信じていないので、怒り狂ってあなたを一発で撃ってきます（UpdateQualityメソッドとItemsプロパティを静的にしても構いません。）\n\nただし、\"Sulfuras \"は伝説のアイテムであるため、Quality値は80であり、Quality値が変わることはありません。\n"
        },
        {
          "name": "GildedRoseRequirements_kr.md",
          "type": "blob",
          "size": 3.046875,
          "content": "# Gilded Rose 요구사항 명세\n\n안녕하세요, **Gilded Rose**에 오신 것을 환영합니다. 우리는 도시의 주요 지역에있는 작은 숙소(상점)이며, **Allison**(앨리슨)이라는 상냥한 사람이 운영하고 있습니다.\n\n우리는 최고의 제품만을 구입하여 판매하고 있습니다. 불행히도, 상품 판매 기한이 가까워 질수록 품질이 저하되어가고 있습니다.\n\n우리는 재고를 업데이트하는 시스템이 있습니다. 이 시스템은 지금은 새로운 모험을 떠나고 없는 **Leeroy**(리로이)라는 빡빡한 성격의 인물에 의해 개발되었습니다. \n\n당신이 할 일은 시스템에 새로운 기능을 추가하여, 새로운 카테고리의 상품을 판매할 수 있도록하는 것입니다.\n\n## 시스템 소개\n먼저 시스템을 소개합니다.\n\n- 모든 아이템은 `SellIn` 값을 가지며, 이는 아이템을 판매해야하는 (남은) 기간을 나태냅니다.\n- 모든 아이템은 `Quality` 값을 가지며, 이것은 아이템의 가치를 나타냅니다.\n- 하루가 지날때마다, 시스템은 두 값(`SellIn`, `Quality`)을 *1* 씩 감소시킵니다.\n\n간단하죠? 흥미로운 부분은 지금부터입니다.\n\n- 판매하는 나머지 일수가 없어지면, `Quality` 값은 **2배**로 떨어집니다.\n- `Quality` 값은 결코 음수가 되지는 않습니다.\n- \"**Aged Brie**\"(오래된 브리치즈)은(는) 시간이 지날수록 `Quality` 값이 올라갑니다.\n- `Quality` 값은 50를 초과 할 수 없습니다.\n- `Sulfuras`는 전설의 아이템이므로, 반드시 판매될 필요도 없고 `Quality` 값도 떨어지지 않습니다.\n- \"**Backstage passes**(백스테이지 입장권)\"는 \"**Aged Brie**\"와 유사하게 `SellIn` 값에 가까워 질수록 `Quality` 값이 상승하고, **10일 부터는** 매일 *2* 씩 증가하다, **5일 부터는**이 되면 매일 *3* 씩 증가하지만, 콘서트 종료 후에는 *0*으로 떨어집니다.\n\n## 시스템 업데이트 요구 사항\n\n최근 \"**Conjured**\"(마법에 걸린) 상품 공급 업체와 계약했습니다. 따라서 시스템의 업데이트가 필요합니다.\n\n- \"**Conjured**\" 아이템은 일반 아이템의 2배의 속도로 품질(`Quality`)이 저하됩니다.\n\n모든 것이 제대로 작동하는 한에서는 `UpdateQuality()` 메서드를 변경하거나 새로운 코드의 추가를 자유롭게 할 수 있습니다. 그러나 `Item` 클래스와 `Items` 속성은 변경하지 마세요.\n\n이것들은 저기 구석에있는 고블린의 것이고, 그 친구는 코드의 공유 소유권을 믿지 않기 때문에, 미친듯이 화를 내며(insta-rage) 여러분에게 한 방(one-shot)을 날릴 수도 있습니다. (`UpdateQuality()` 메서드와 `Items` 속성을 정적(static)으로 만드는 것은 괜찮습니다. 저희가 책임질게요.)\n\n다시 한 번 확인하자면, 아이템의 `Quality`는 50 이상으로 증가할 수는 없습니다. 하지만 `Sulfuras`는 전설의 아이템이기 때문에 `Quality` 값은 80이며, 값이 바뀌지 않습니다.\n"
        },
        {
          "name": "GildedRoseRequirements_nl.md",
          "type": "blob",
          "size": 2.4951171875,
          "content": "# Vergulde Roos Requirement Specificaties\n\nHoi en welkom bij team Vergulde Roos. Zoals je weet, zijn we een klein herberg met een uitstekende locatie in een prominente stad gerund door een vriendelijke herbergier genaamd Allison. We kopen en verkopen ook alleen de beste goederen. Helaas, onze goederen degraderen constant in kwaliteit `Quality` naarmate ze hun uiterste houdbaarheidsdatum naderen.\n\nWe hebben een systeem dat onze inventaris voor ons bijwerkt. Het is ontwikkeld door een no-nonsense type genaamd Leeroy, die zich op nieuwe avonturen gestort heeft. Jouw taak is om deze nieuwe functie toe te voegen aan ons systeem zodat we een nieuwe categorie items kunnen gaan verkopen. Eerst een introductie tot ons systeem:\n\n- Alle artikelen `items` hebben een `SellIn` waarde die aangeeft hoeveel dagen we nog hebben om de `items` te verkopen\n- Alle `items` hebben een `Quality` (kwaliteit) waarde die aangeeft hoe waardevol het item is\n- Aan het einde van elke dag verlagen we beide waarden voor elk item in ons systeem\n\nVrij eenvoudig, toch? Nou, hier wordt het interessant:\n\n- Zodra de uiterste verkoopdatum is verstreken, degradeert `Quality` twee keer zo snel\n- De `Quality` van een item is nooit negatief\n- Oude Brie __\"Aged Brie\"__ neemt eigenlijk toe in `Quality` naarmate het ouder wordt\n- De `Quality` van een item is nooit meer dan `50`\n- __\"Sulfuras\"__, als legendarisch item, hoeft nooit te worden verkocht of vermindert niet in `Quality`\n- __\"Backstage passes\"__, zoals aged brie, neemt toe in `Quality` naarmate de `SellIn` waarde nadert;\n\t- `Quality` neemt met `2` toe wanneer er `10` dagen of minder zijn en met `3` wanneer er `5` dagen of minder zijn, maar\n\t- `Quality` daalt naar `0` na het concert\n\nWe hebben onlangs een leverancier van betoverde items gecontracteerd. Dit vereist een update van ons systeem:\n\n- __\"Conjured\"__ items degraderen in `Quality` twee keer zo snel als normale items\n\nVoel je vrij om wijzigingen aan te brengen in de `UpdateQuality` methode en voeg nieuwe code toe zolang alles nog steeds correct werkt. Wijzig echter niet de `Item` klasse of `Items` eigenschap aangezien die toebehoren aan de kobold op de hoek die meteen boos wordt en je met één klap uitschakelt omdat hij niet gelooft in gedeeld codebezit (je kunt de `UpdateQuality` methode en `Items` eigenschap wel statisch maken als je wilt, we dekken je wel).\n\nVoor de duidelijkheid, een item kan zijn `Quality` nooit verhogen boven `50`, echter __\"Sulfuras\"__ is een legendarisch item en als zodanig is zijn `Quality` `80` en verandert nooit.\n"
        },
        {
          "name": "GildedRoseRequirements_pl.md",
          "type": "blob",
          "size": 2.6484375,
          "content": "# Specyfikacja wymagań Pozłacanej Róży (Gilded Rose)\n\n\nCześć i witaj na pokładzie zespołu Pozłacanej Róży. Jak zapewne już wiesz, jesteśmy niewielką karczmą, która znajduje się w głównej części wspaniałego miasta i jest prowadzona przez przyjazną oberżystkę o imieniu Allison. Sprzedajemy i kupujemy tylko najlepsze towary. Niestety, przedmioty te tracą na jakości w miarę jak zbliża się ich termin sprzedaży. Korzystamy z systemu, który automatycznie aktualizuje stan naszego inwentarza. System ten został napisany przez rozsądnego typka o imieniu Leeroy, który postanowił poszukać nowych przygód. Twoim zadaniem jest dodanie nowej funkcjonalności do naszego systemu tak, abyśmy mogli rozpocząć sprzedaż nowego rodzaju przedmiotów. Pozwól, że najpierw zrobię ogólne wprowadzenie do systemu:\n- Wszystkie przedmioty (`Item`) posiadają właściwość `SellIn`, która oznacza **liczbę dni pozostałych do upłynięcia terminu sprzedaży** przedmiotu\n- Wszystkie przedmioty posiadają właściwość `Quality` (**jakość**), która wpływa na wartość przedmiotu\n- Na koniec każdego dnia nasz system obniża wartość obu właściwości dla każdego przedmiotu\n\nDość proste, prawda? No cóż, teraz zrobi się bardziej interesująco:\n- Po upływie daty sprzedaży, jakość spada dwukrotnie szybciej\n- Jakość przedmiotu nigdy nie jest ujemna\n- Jakość \"Starego Brie\" (`Aged Brie`) rośnie wraz z wiekiem\n- Jakość przedmiotu nigdy nie przekracza 50\n- Przedmiot legendarny `Sulfuras` nigdy nie musi być sprzedany, ani nie traci na jakości\n- \"Przepustka za kulisy\" (`Backstage passes`), podobnie jak \"Stary Brie\", zyskują na jakości w miarę zbliżania się terminu sprzedaży; jakość wzrasta o 2, gdy jest 10 dni lub mniej i o 3, gdy jest 5 dni lub mniej, ale spada do 0 po koncercie (gdy `SellIn` < 0)\n\nNiedawno podpisaliśmy z dostawcą kontrakt na wyczarowane przedmioty. Wymaga to wprowadzenia zmiany do naszego systemu:\n- \"Wyczarowane\" (`Conjured`) przedmioty tracą na jakości dwa razy szybciej niż normalne przedmioty\n\nMożesz wprowadzać dowolne zmiany w metodzie `UpdateQuality`, a także dodawać nowy kod, o ile wszystko nadal działa prawidłowo. Jednak nie zmieniaj klasy `Item` ani właściwości `Items`, które zostały napisane przez goblina w rogu, gdyż zaatakuje Cię on i zabije jednym strzałem, ponieważ nie wierzy we współdzielony kod (możesz zmienić metodę `UpdateQuality` oraz właściwość `Items` na statyczne, jeśli chcesz - będziemy Cię kryć!).\n\nDla jasności: jakość przedmiotu nie może przekroczyć 50, jednak dla przedmiotu legendarnego `Sulfuras` jakość jest stale na poziomie 80 i nigdy nie spada.\n"
        },
        {
          "name": "GildedRoseRequirements_pt-BR.md",
          "type": "blob",
          "size": 3.0625,
          "content": "# Especificações de Requisitos de Gilded Rose\n\nBem-vindo ao time Gilded Rose. Como você deve saber, nós somos uma pequena pousada estrategicamente localizada em uma prestigiosa cidade, atendida pelo amigavel atendente Allison. Além de ser uma pousada, nós também compramos e vendemos as mercadorias de melhor qualidade. Infelizmente nossas mercadorias vão perdendo a qualidade conforme chegam próximo sua data de venda.\n\nNós temos um sistema instalado que atualiza automaticamente os preços do nosso estoque. Esse sistema foi criado por um rapaz sem noção chamado Leeroy, que agora se dedica à novas aventuras. Seu trabalho será adicionar uma nova funcionalidade para o nosso sistema para que possamos vender uma nova categoria de itens. \n\n## Descrição preliminar\n\nVamos dar uma breve introdução do nosso sistema:\n\n* Todos os itens (classe `Item`) possuem uma propriedade chamada `SellIn` que informa o número de dias que temos para vende-lo\n* Todos os itens possuem uma propriedade chamada `quality` que informa o quão valioso é o item.\n* No final do dia, nosso sistema decrementa os valores das propriedades `SellIn` e `quality` de cada um dos itens do estoque através do método `updateQuality`.\n\nBastante simples, não é? Bem, agora que as coisas ficam interessantes:\n\n* Quando a data de venda do item tiver passado, a qualidade (`quality`) do item diminui duas vezes mais rapido.\n* A qualidade (`quality`) do item não pode ser negativa\n* O \"Queijo Brie envelhecido\" (`Aged Brie`), aumenta sua qualidade (`quality`) em `1` unidade a medida que envelhece.\n* A qualidade (`quality`) de um item não pode ser maior que 50.\n* O item \"Sulfuras\" (`Sulfuras`), por ser um item lendário, não precisa ter uma data de venda (`SellIn`) e sua qualidade (`quality`) não precisa ser diminuida.\n* O item \"Entrada para os Bastidores\" (`Backstage Passes`), assim como o \"Queijo Brie envelhecido\", aumenta sua qualidade (`quality`) a medida que o dia da venda (`SellIn`) se aproxima;\n  * A qualidade (`quality`) aumenta em `2` unidades quando a data de venda (`SellIn`) é igual ou menor que `10`.\n  * A qualidade (`quality`) aumenta em `3` unidades quando a data de venda (`SellIn`) é igual ou menor que `5`.\n  * A qualidade (`quality`) do item vai direto à `0` quando a data de venda (`SellIn`) tiver passado.\n\nNós recentemente assinamos um suprimento de itens Conjurados Magicamente. Isto requer que nós atualizemos nosso sistema:\n\n* Os itens \"Conjurados\" (`Conjured`) diminuem a qualidade (`quality`) duas vezes mais rápido que os outros itens.\n\nSinta-se livre para fazer qualquer alteração no método `updateQuality` e adicionar código novo contanto que tudo continue funcionando perfeitamente. Entretanto, não altere o código da classe `Item` ou da propriedade `Items` na classe `GildedRose` pois elas pertencem ao Goblin que irá te matar com um golpe pois ele não acredita na cultura de código compartilhado.\n\n## Notas Finais\n\nPara esclarecer: Um item não pode ter uma qualidade (`quality`) maior que `50`, entretanto as \"Sulfuras\" por serem um item lendário vão ter uma qualidade imutavel de `80`.\n"
        },
        {
          "name": "GildedRoseRequirements_ru.md",
          "type": "blob",
          "size": 4.552734375,
          "content": "# Технические требования «Gilded Rose»\n\n\nПривет и добро пожаловать в команду «Gilded Rose». Как вы знаете, мы небольшая гостиница удобно расположенная\nв известном городе под руководством дружественного управляющего по имени Эллисон. Также мы занимаемся покупкой\nи продажей только самых лучших товаров. К несчастью, качество наших товаров постоянно ухудшается по мере приближения\nк максимальному сроку хранения.\n\nУ нас есть информационная система, которая ведет переучет всех товаров. Система\nбыла разработана рубаха-парнем, по имени Leeroy, который отправился за поисками новых приключений. Ваша задача\nзаключается в том, чтобы добавить новый функционал в нашу систему, чтобы мы могли начать продавать новую категорию\nтоваров. Для начала введение в нашу систему:\n\n- Все `товары` имеют значение `срока реализации` (`SellIn`), которое обозначает количество дней, в течение которых мы должны их продать\n- Все `товары` имеют значение `качества` (`Quality`), которое обозначает, насколько ценен товар\n- В конце дня наша система снижает значение обоих свойств для каждого товара\n\nДовольно просто, не правда ли? Тут-то и начинается самое интересное:\n\n- Как только срок продажи товара истек, его качество (`Quality`) портится в два раза быстрее\n- Качество (`Quality`) товара никогда не бывает отрицательным\n- Для товара __\"Aged Brie\"__ качество (`Quality`) увеличивается с возрастом\n- Качество (`Quality`) товара никогда не превышает `50`\n- __\"Sulfuras\"__, являясь легендарным товаром, никогда не нужно продавать и его `качество` (`Quality`) никогда не уменьшается\n- __\"Backstage passes\"__, как и __\"Aged Brie\"__, увеличивается в качестве (`Quality`) по мере приближения к значению срока реализации (`SellIn`):\n\t- Качество (`Quality`) увеличивается на `2`, когда остаётся `10` дней или меньше, и на `3`, когда остаётся `5` дней или меньше, но\n\t- Качество (`Quality`) падает до `0` после концерта\n\nНедавно мы подписали контракт с поставщиком зачарованных товаров. Это требует обновления нашей системы:\n\n- Зачарованные (__\"Conjured\"__) предметы теряют качество (`Quality`) в два раза быстрее обычных товаров\n\nНе стесняйтесь вносить любые изменения в метод `UpdateQuality` и добавлять любой новый код до тех пор,\nпока система работает корректно. Тем не менее, не меняйте класс `Item` или свойства `Items`, так как они принадлежат\nсидящему в углу гоблину, который очень яростен и поэтому выстрелит в вас поскольку не верит в принцип\nсовместного владения кодом (вы можете сделать метод `UpdateQuality` и свойства класса `Item` статическими\nесли хотите, мы вас прикроем).\n\nПросто для уточнения, товар никогда не может иметь качество (`Quality`) выше чем `50`, однако легендарный товар __\"Sulfuras\"__\nимеет качество `80` и оно никогда не меняется.\n"
        },
        {
          "name": "GildedRoseRequirements_th.md",
          "type": "blob",
          "size": 5.810546875,
          "content": "# ข้อกำหนดความต้องการของระบบ Gilded Rose\n\nยินดีต้อนรับสู่ทีม Gilded Rose อย่างที่คุณทราบแล้วว่า เราคือโรงแรมขนาดเล็กที่ตั้งอยู่ทำเลทองของประเทศกรุงเทพ\nนอกจากนี้เรายังซื้อและขายเฉพาะสินค้าที่ดีที่สุด แต่น่าเสียดายยิ่งใกล้ถึงวันกำหนดขายสินค้า คุณภาพของสินค้าก็จะลดลงอย่างต่อเนื่อง\nตอนนี้เรามีระบบที่ช่วยอัปเดตสินค้าคงคลังให้เรา มันถูกพัฒนาโดยโปรแกรมเมอร์ศิษย์เอกของพระอินทร์ ซึ่งโปรแกรมเมอร์คนนี้ได้ย้ายกลับไปอยู่กับพระอินทร์\nเป็นการถาวรแล้ว เราจึงอยากให้คุณช่วยเพิ่มฟีเจอร์ใหม่เพื่อให้เราสามารถขายสินค้าประเภทใหม่ได้\n\nก่อนอื่นเราขอแนะนำการทำงานของระบบปัจจุบัน:\n\n- สินค้าแต่ละชิ้นจะต้องขายภายในระยะเวลาที่กำหนดไว้ในค่า \"SellIn\" (มีหน่วยเป็น*วัน*) \n- สินค้าแต่ละชิ้นจะระบุค่า \"Quality\" ที่สามารถบ่งชี้ถึงมูลค่าของสินค้า\n- ระบบจะทำการคำนวนค่า \"SellIn\" และ \"Quality\" ของสินค้าทุกชิ้นในช่วงเวลาสุดท้ายของทุกวัน\n\nง่ายอะดิ, ใช่ป่ะ? สิ่งที่น่าสนใจมันอยู่ตรงนี้:\n\n- เมื่อสินค้าเลยกำหนดขายไปแล้ว \"Quality\" ของสินค้าจะลดลงเป็นสองเท่าจากปกติ\n- \"Quality\" ของสินค้าไม่มีทางติดลบได้\n- คุณภาพของสินค้าประเภท \"Aged Brie\" จะเพิ่มสูงขึ้นตามระยะเวลา\n- \"Quality\" มีค่าสูงสุดคือ 50 \n- สินค้าประเภท \"Sulfuras\" เป็นสินค้าในตำนานหายาก คุณภาพของสินค้าจะไม่ลดลงและไม่ได้มีไว้เพื่อขาย\n- สินค้าประเภท \"Backstage passes\" คุณภาพของสินค้าเหมือนกันกับสินค้าประเภท aged brie \nเพียงแต่หากใกล้ถึงวันแสดง 10 วันก่อนหน้าหรือน้อยกว่าคุณภาพของสินค้าประเภทนี้จะเพิ่มทีละ 2 และถ้าใกล้ถึงวันก่อนวันแสดง 5 วันหรือน้อยกว่าคุณภาพจะเพิ่มทีละ 3\nอย่างไรก็ตามคุณภาพของสินค้าจะกลายเป็น 0 ทันทีหลังการแสดงจบลง\n\nเมื่อเร็วๆ นี้เราพึ่งได้ลงนามกับผู้ผลิตสินค้าประเภทของขลังและของปลุกเสก \nและเราต้องการที่จะเพิ่มความสามารถใหม่เข้าไปในระบบ:\n\n- คุณภาพสินค้าประเภท \"Conjured\" จะเสื่อมลงเร็วกว่าสินค้าปกติถึงสองเท่าจากปกติ\n\nคุณสามารถปรับปรุงแก้ไขได้ทุกอย่างภายในเมธอด UpdateQuality และสามารถเพิ่มโค้ดใหม่ได้เลย\nตราบใดที่ทุกอย่างยังคงทำงานได้ถูกต้อง อย่างไรก็ตามห้ามแก้ไขคลาส Item และคุณสมบัติของคลาส\nเพราะมันถูกลงอาคมจากโปรแกรมเมอร์จอมขมังเวทย์ที่ไม่เชื่อในเรื่องการแบ่งปันความเป็นเจ้าของโค้ดร่วมกับผู้อื่น \n(ถ้าคุณยังอยากจะแก้ไขทั้งเมธอด UpdateQuality และคุณสมบัติของคลาส Item เราก็จะ\nนิมนต์หลวงปู่เค็มมาช่วยคุ้มกันคุณ)\n\nย้ำอีกครั้งหนึ่ง, คุณภาพของสินค้ามีค่าสูงสุดคือ 50 \nอย่างไรก็ตามสินค้าประเภท \"Sulfuras\" เป็นสินค้าหายากในตำนานมีค่า Quality เป็น 80 เสมอไม่เปลี่ยนแปลง.\n"
        },
        {
          "name": "GildedRoseRequirements_zh.txt",
          "type": "blob",
          "size": 2.2978515625,
          "content": "======================================\nGilded Rose 需求描述\n======================================\n\n\n欢迎来到镶金玫瑰(Gilded Rose)团队。如你所知，我们是主城（暴风城）中的一个小旅店，店主非常友好，名叫Allison。我们也售卖最好的物品。不幸的是，物品品质会随着销售期限的接近而不断下降。\n我们有一个系统来更新库存信息。系统是由一个火车王（魔兽世界中导致团灭的猪队友）Leeroy所开发的，他已经不在这了。\n你的任务是添加新功能，这样我们就可以售卖新的物品。\n\n先介绍一下我们的系统：\n\n\t- 每种物品都具备一个销售期限`SellIn`，表示我们要在多少天之前把物品卖出去\n\t- 每种的物品都具备品质值`Quality`，表示物品的品质\n\t- 每天结束时，系统会降低每种物品的这两个数值\n\n很简单吧？这还有些更有意思的：\n\n\t- 一旦销售期限过期，品质`Quality`会以双倍速度加速下降\n\t- 物品的品质`Quality`永远不会为负值\n\t- \"Aged Brie\"（陈年布利奶酪）的品质`Quality`会随着时间推移而提高\n\t- 物品的品质`Quality`永远不会超过50\n\t- 传奇物品\"Sulfuras\"（萨弗拉斯—炎魔拉格纳罗斯之手）永不过期，也不会降低品质`Quality`\n\t- \"Backstage passes\"（后台通行证）与\"Aged Brie\"（陈年布利奶酪）类似，其品质`Quality`会随着时间推移而提高；当还剩10天或更少的时候，品质`Quality`每天提高2；当还剩5天或更少的时候，品质`Quality`每天提高3；但一旦过期，品质就会降为0\n\n\n我们最近签约了一个召唤物品供应商。这需要对我们的系统进行升级：\n\n\t- \"Conjured\"（召唤物品）的品质`Quality`下降速度比正常物品快一倍\n\n请随意对**UpdateQuality()**函数进行修改和添加新代码，只要系统还能正常工作。然而，不要修改Item类或其属性，因为那属于角落里的地精，他会非常愤怒地爆你头，因为他不相信代码共享所有制（如果你愿意，你可以将UpdateQuality方法和Items属性改为静态的，我们会掩护你的）。\n\n再次澄清，每种物品的品质不会超过50，然而\"Sulfuras\"（萨弗拉斯—炎魔拉格纳罗斯之手）是一个传奇物品，因此它的品质是80且永远不变。\n"
        },
        {
          "name": "Groovy",
          "type": "tree",
          "content": null
        },
        {
          "name": "Java-Approvals",
          "type": "tree",
          "content": null
        },
        {
          "name": "Java-Cucumber",
          "type": "tree",
          "content": null
        },
        {
          "name": "Java-Spock",
          "type": "tree",
          "content": null
        },
        {
          "name": "Java",
          "type": "tree",
          "content": null
        },
        {
          "name": "Kotlin",
          "type": "tree",
          "content": null
        },
        {
          "name": "Matlab",
          "type": "tree",
          "content": null
        },
        {
          "name": "R",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.55078125,
          "content": "_Support this and all my katas via [Patreon](https://www.patreon.com/EmilyBache)_\n\n# Gilded Rose Refactoring Kata\n\nYou can find out more about this exercise in my YouTube video [Why Developers LOVE The Gilded Rose Kata](https://youtu.be/Mt4XpGxigT4). I also have a video of a worked solution in Java - [Gilded Rose Kata, Hands-on](https://youtu.be/OdnV8hc9L7I)\n\nI use this kata as part of my work as a technical coach. I wrote a lot about the coaching method I use in this book [Technical Agile Coaching with the Samman method](https://leanpub.com/techagilecoach). A while back I wrote this article [\"Writing Good Tests for the Gilded Rose Kata\"](http://coding-is-like-cooking.info/2013/03/writing-good-tests-for-the-gilded-rose-kata/) about how you could use this kata in a [coding dojo](https://leanpub.com/codingdojohandbook).\n\n\n## How to use this Kata\n\nThe simplest way is to just clone the code and start hacking away improving the design. You'll want to look at the [\"Gilded Rose Requirements\"](https://github.com/emilybache/GildedRose-Refactoring-Kata/blob/main/GildedRoseRequirements.md) which explains what the code is for. I strongly advise you that you'll also need some tests if you want to make sure you don't break the code while you refactor.\n\nYou could write some unit tests yourself, using the requirements to identify suitable test cases. I've provided a failing unit test in a popular test framework as a starting point for most languages.\n\nAlternatively, use the Approval tests provided in this repository. (Read more about that in the section \"Text-based Approval Testing\").\n\nThe idea of the exercise is to do some deliberate practice, and improve your skills at designing test cases and refactoring. The idea is not to re-write the code from scratch, but rather to practice taking small steps, running the tests often, and incrementally improving the design. \n\n### Gilded Rose Requirements in other languages \n\n- [English](GildedRoseRequirements.md)\n- [Español](GildedRoseRequirements_es.md)\n- [Français](GildedRoseRequirements_fr.md)\n- [Italiano](GildedRoseRequirements_it.md)\n- [日本語](GildedRoseRequirements_jp.md)\n- [Português](GildedRoseRequirements_pt-BR.md)\n- [Русский](GildedRoseRequirements_ru.md)\n- [ไทย](GildedRoseRequirements_th.md)\n- [中文](GildedRoseRequirements_zh.txt)\n- [한국어](GildedRoseRequirements_kr.md)\n- [German](GildedRoseRequirements_de.md)\n- [Euskara](GildedRoseRequirements_eu.md)\n\n## Text-Based Approval Testing\n\nMost language versions of this code have a [TextTest](https://texttest.org) fixture for Approval testing. For information about this, see the [TextTests README](https://github.com/emilybache/GildedRose-Refactoring-Kata/tree/main/texttests)\n\n## History of the exercise\n\nThis Kata was originally created by Terry Hughes (http://twitter.com/TerryHughes). It is already on GitHub [here](https://github.com/NotMyself/GildedRose). Bobby Johnson described the kata in an article titled \"Refactor This: The Gilded Rose Kata\", but unfortunately it is no longer on the internet. I found it on the Wayback Machine [here](https://web.archive.org/web/20240525015111/https://iamnotmyself.com/refactor-this-the-gilded-rose-kata/).\n\nI translated the original C# into a few other languages, (with a little help from my friends!), and slightly changed the starting position. This means I've actually done a small amount of refactoring already compared with the original form of the kata, and made it easier to get going with writing tests by giving you one failing unit test to start with. I also added test fixtures for Text-Based approval testing with TextTest (see [the TextTests](https://github.com/emilybache/GildedRose-Refactoring-Kata/tree/main/texttests))\n\nAs Bobby Johnson points out in his article \"Why Most Solutions to Gilded Rose Miss The Bigger Picture\" (on the Wayback Machine [here](https://web.archive.org/web/20230530152324/https://iamnotmyself.com/why-most-solutions-to-gilded-rose-miss-the-bigger-picture/)), it'll actually give you\nbetter practice at handling a legacy code situation if you do this Kata in the original C#. However, I think this kata\nis also really useful for practicing writing good tests using different frameworks and approaches, and the small changes I've made help with that. I think it's also interesting to compare what the refactored code and tests look like in different programming languages.\n\n## Contributing\n\nContributions are encouraged! You could add a translations of the specification\nin another language or a new starting point for your favorite programming\nlanguage. Please see [CONTRIBUTING.md](./CONTRIBUTING.md) for more details.\n"
        },
        {
          "name": "Smalltalk",
          "type": "tree",
          "content": null
        },
        {
          "name": "TypeScript",
          "type": "tree",
          "content": null
        },
        {
          "name": "abap",
          "type": "tree",
          "content": null
        },
        {
          "name": "bash",
          "type": "tree",
          "content": null
        },
        {
          "name": "c99",
          "type": "tree",
          "content": null
        },
        {
          "name": "c_cmocka",
          "type": "tree",
          "content": null
        },
        {
          "name": "clojure",
          "type": "tree",
          "content": null
        },
        {
          "name": "common-lisp-parachute",
          "type": "tree",
          "content": null
        },
        {
          "name": "commonlisp",
          "type": "tree",
          "content": null
        },
        {
          "name": "cpp-catch2",
          "type": "tree",
          "content": null
        },
        {
          "name": "cpp",
          "type": "tree",
          "content": null
        },
        {
          "name": "csharp.NUnit",
          "type": "tree",
          "content": null
        },
        {
          "name": "csharp.xUnit",
          "type": "tree",
          "content": null
        },
        {
          "name": "d",
          "type": "tree",
          "content": null
        },
        {
          "name": "dart",
          "type": "tree",
          "content": null
        },
        {
          "name": "elisp",
          "type": "tree",
          "content": null
        },
        {
          "name": "elixir",
          "type": "tree",
          "content": null
        },
        {
          "name": "elm",
          "type": "tree",
          "content": null
        },
        {
          "name": "erlang",
          "type": "tree",
          "content": null
        },
        {
          "name": "fortran",
          "type": "tree",
          "content": null
        },
        {
          "name": "fsharp-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "fsharp",
          "type": "tree",
          "content": null
        },
        {
          "name": "gleam",
          "type": "tree",
          "content": null
        },
        {
          "name": "go",
          "type": "tree",
          "content": null
        },
        {
          "name": "haskell",
          "type": "tree",
          "content": null
        },
        {
          "name": "io",
          "type": "tree",
          "content": null
        },
        {
          "name": "janet",
          "type": "tree",
          "content": null
        },
        {
          "name": "jq",
          "type": "tree",
          "content": null
        },
        {
          "name": "js-jasmine",
          "type": "tree",
          "content": null
        },
        {
          "name": "js-jest",
          "type": "tree",
          "content": null
        },
        {
          "name": "js-mocha",
          "type": "tree",
          "content": null
        },
        {
          "name": "julia",
          "type": "tree",
          "content": null
        },
        {
          "name": "lfe",
          "type": "tree",
          "content": null
        },
        {
          "name": "license.txt",
          "type": "blob",
          "size": 1.0517578125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 @emilybache\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
        },
        {
          "name": "nim",
          "type": "tree",
          "content": null
        },
        {
          "name": "ocaml",
          "type": "tree",
          "content": null
        },
        {
          "name": "pascal",
          "type": "tree",
          "content": null
        },
        {
          "name": "perl",
          "type": "tree",
          "content": null
        },
        {
          "name": "perl6",
          "type": "tree",
          "content": null
        },
        {
          "name": "php",
          "type": "tree",
          "content": null
        },
        {
          "name": "plantuml",
          "type": "tree",
          "content": null
        },
        {
          "name": "plpgsql",
          "type": "tree",
          "content": null
        },
        {
          "name": "plsql",
          "type": "tree",
          "content": null
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "rescript",
          "type": "tree",
          "content": null
        },
        {
          "name": "ruby",
          "type": "tree",
          "content": null
        },
        {
          "name": "rust",
          "type": "tree",
          "content": null
        },
        {
          "name": "scala",
          "type": "tree",
          "content": null
        },
        {
          "name": "scheme",
          "type": "tree",
          "content": null
        },
        {
          "name": "sql",
          "type": "tree",
          "content": null
        },
        {
          "name": "start_texttest.bat",
          "type": "blob",
          "size": 0.05859375,
          "content": "set TEXTTEST_HOME=%~dp0\ncd %TEXTTEST_HOME%\n\ntexttestc -con\n\n"
        },
        {
          "name": "start_texttest.sh",
          "type": "blob",
          "size": 0.123046875,
          "content": "#!/bin/sh\n\nif [ ! -d \"venv\" ]; then\n    python -m venv venv\nfi\nvenv/bin/pip install texttest\nvenv/bin/texttest -d . -con \"$@\"\n"
        },
        {
          "name": "start_texttest_from_python.bat",
          "type": "blob",
          "size": 0.2021484375,
          "content": "set TEXTTEST_HOME=%~dp0\ncd %TEXTTEST_HOME%\n\nif not exist \"venv\" (\n    py -m venv venv\n)\n\nvenv\\Scripts\\pip install texttest\n\nif %ERRORLEVEL% GEQ 1 (\n    pause\n) else (\n    venv\\Scripts\\texttestc.py -con %*\n)\n"
        },
        {
          "name": "swift",
          "type": "tree",
          "content": null
        },
        {
          "name": "texttests",
          "type": "tree",
          "content": null
        },
        {
          "name": "vbnet",
          "type": "tree",
          "content": null
        },
        {
          "name": "xslt",
          "type": "tree",
          "content": null
        },
        {
          "name": "zig",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}