{
  "metadata": {
    "timestamp": 1736565335724,
    "page": 160,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "knolleary/pubsubclient",
      "stars": 3866,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0615234375,
          "content": "tests/bin\n.pioenvs\n.piolibdeps\n.clang_complete\n.gcc-flags.json\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.09375,
          "content": "sudo: false\nlanguage: cpp\ncompiler:\n  - g++\nscript: cd tests && make && make test\nos:\n  - linux\n"
        },
        {
          "name": "CHANGES.txt",
          "type": "blob",
          "size": 2.6904296875,
          "content": "2.8\n   * Add setBufferSize() to override MQTT_MAX_PACKET_SIZE\n   * Add setKeepAlive() to override MQTT_KEEPALIVE\n   * Add setSocketTimeout() to overide MQTT_SOCKET_TIMEOUT\n   * Added check to prevent subscribe/unsubscribe to empty topics\n   * Declare wifi mode prior to connect in ESP example\n   * Use `strnlen` to avoid overruns\n   * Support pre-connected Client objects\n\n2.7\n   * Fix remaining-length handling to prevent buffer overrun\n   * Add large-payload API - beginPublish/write/publish/endPublish\n   * Add yield call to improve reliability on ESP\n   * Add Clean Session flag to connect options\n   * Add ESP32 support for functional callback signature\n   * Various other fixes\n\n2.4\n   * Add MQTT_SOCKET_TIMEOUT to prevent it blocking indefinitely\n     whilst waiting for inbound data\n   * Fixed return code when publishing >256 bytes\n\n2.3\n   * Add publish(topic,payload,retained) function\n\n2.2\n   * Change code layout to match Arduino Library reqs\n\n2.1\n   * Add MAX_TRANSFER_SIZE def to chunk messages if needed\n   * Reject topic/payloads that exceed MQTT_MAX_PACKET_SIZE\n\n2.0\n   * Add (and default to) MQTT 3.1.1 support\n   * Fix PROGMEM handling for Intel Galileo/ESP8266\n   * Add overloaded constructors for convenience\n   * Add chainable setters for server/callback/client/stream\n   * Add state function to return connack return code\n\n1.9\n   * Do not split MQTT packets over multiple calls to _client->write()\n   * API change: All constructors now require an instance of Client\n      to be passed in.\n   * Fixed example to match 1.8 api changes - dpslwk\n   * Added username/password support - WilHall\n   * Added publish_P - publishes messages from PROGMEM - jobytaffey\n\n1.8\n    * KeepAlive interval is configurable in PubSubClient.h\n    * Maximum packet size is configurable in PubSubClient.h\n    * API change: Return boolean rather than int from various functions\n    * API change: Length parameter in message callback changed\n       from int to unsigned int\n    * Various internal tidy-ups around types\n1.7\n    * Improved keepalive handling\n    * Updated to the Arduino-1.0 API\n1.6\n    * Added the ability to publish a retained message\n\n1.5\n    * Added default constructor\n    * Fixed compile error when used with arduino-0021 or later\n\n1.4\n    * Fixed connection lost handling\n\n1.3\n    * Fixed packet reading bug in PubSubClient.readPacket\n\n1.2\n    * Fixed compile error when used with arduino-0016 or later\n\n\n1.1\n    * Reduced size of library\n    * Added support for Will messages\n    * Clarified licensing - see LICENSE.txt\n\n\n1.0\n    * Only Quality of Service (QOS) 0 messaging is supported\n    * The maximum message size, including header, is 128 bytes\n    * The keepalive interval is set to 30 seconds\n    * No support for Will messages\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.0400390625,
          "content": "Copyright (c) 2008-2020 Nicholas O'Leary\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.95703125,
          "content": "# Arduino Client for MQTT\n\nThis library provides a client for doing simple publish/subscribe messaging with\na server that supports MQTT.\n\n## Examples\n\nThe library comes with a number of example sketches. See File > Examples > PubSubClient\nwithin the Arduino application.\n\nFull API documentation is available here: https://pubsubclient.knolleary.net\n\n## Limitations\n\n - It can only publish QoS 0 messages. It can subscribe at QoS 0 or QoS 1.\n - The maximum message size, including header, is **256 bytes** by default. This\n   is configurable via `MQTT_MAX_PACKET_SIZE` in `PubSubClient.h` or can be changed\n   by calling `PubSubClient::setBufferSize(size)`.\n - The keepalive interval is set to 15 seconds by default. This is configurable\n   via `MQTT_KEEPALIVE` in `PubSubClient.h` or can be changed by calling\n   `PubSubClient::setKeepAlive(keepAlive)`.\n - The client uses MQTT 3.1.1 by default. It can be changed to use MQTT 3.1 by\n   changing value of `MQTT_VERSION` in `PubSubClient.h`.\n\n\n## Compatible Hardware\n\nThe library uses the Arduino Ethernet Client api for interacting with the\nunderlying network hardware. This means it Just Works with a growing number of\nboards and shields, including:\n\n - Arduino Ethernet\n - Arduino Ethernet Shield\n - Arduino YUN – use the included `YunClient` in place of `EthernetClient`, and\n   be sure to do a `Bridge.begin()` first\n - Arduino WiFi Shield - if you want to send packets > 90 bytes with this shield,\n   enable the `MQTT_MAX_TRANSFER_SIZE` define in `PubSubClient.h`.\n - Sparkfun WiFly Shield – [library](https://github.com/dpslwk/WiFly)\n - TI CC3000 WiFi - [library](https://github.com/sparkfun/SFE_CC3000_Library)\n - Intel Galileo/Edison\n - ESP8266\n - ESP32\n\nThe library cannot currently be used with hardware based on the ENC28J60 chip –\nsuch as the Nanode or the Nuelectronics Ethernet Shield. For those, there is an\n[alternative library](https://github.com/njh/NanodeMQTT) available.\n\n## License\n\nThis code is released under the MIT License.\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "keywords.txt",
          "type": "blob",
          "size": 0.814453125,
          "content": "#######################################\n# Syntax Coloring Map For PubSubClient\n#######################################\n\n#######################################\n# Datatypes (KEYWORD1)\n#######################################\n\nPubSubClient\tKEYWORD1\n\n#######################################\n# Methods and Functions (KEYWORD2)\n#######################################\n\nconnect \tKEYWORD2\ndisconnect \tKEYWORD2\npublish \tKEYWORD2\npublish_P \tKEYWORD2\nbeginPublish \tKEYWORD2\nendPublish \tKEYWORD2\nwrite\t \tKEYWORD2\nsubscribe \tKEYWORD2\nunsubscribe \tKEYWORD2\nloop \tKEYWORD2\nconnected \tKEYWORD2\nsetServer\tKEYWORD2\nsetCallback\tKEYWORD2\nsetClient\tKEYWORD2\nsetStream\tKEYWORD2\nsetKeepAlive \tKEYWORD2\nsetBufferSize \tKEYWORD2\nsetSocketTimeout \tKEYWORD2\n\n#######################################\n# Constants (LITERAL1)\n#######################################\n"
        },
        {
          "name": "library.json",
          "type": "blob",
          "size": 0.779296875,
          "content": "{\n    \"name\": \"PubSubClient\",\n    \"keywords\": \"ethernet, mqtt, m2m, iot\",\n    \"description\": \"A client library for MQTT messaging. MQTT is a lightweight messaging protocol ideal for small devices. This library allows you to send and receive MQTT messages. It supports the latest MQTT 3.1.1 protocol and can be configured to use the older MQTT 3.1 if needed. It supports all Arduino Ethernet Client compatible hardware, including the Intel Galileo/Edison, ESP8266 and TI CC3000.\",\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"https://github.com/knolleary/pubsubclient.git\"\n    },\n    \"version\": \"2.8\",\n    \"exclude\": \"tests\",\n    \"examples\": \"examples/*/*.ino\",\n    \"frameworks\": \"arduino\",\n    \"platforms\": [\n        \"atmelavr\",\n        \"espressif8266\",\n        \"espressif32\"\n    ]\n}\n"
        },
        {
          "name": "library.properties",
          "type": "blob",
          "size": 0.587890625,
          "content": "name=PubSubClient\nversion=2.8\nauthor=Nick O'Leary <nick.oleary@gmail.com>\nmaintainer=Nick O'Leary <nick.oleary@gmail.com>\nsentence=A client library for MQTT messaging.\nparagraph=MQTT is a lightweight messaging protocol ideal for small devices. This library allows you to send and receive MQTT messages. It supports the latest MQTT 3.1.1 protocol and can be configured to use the older MQTT 3.1 if needed. It supports all Arduino Ethernet Client compatible hardware, including the Intel Galileo/Edison, ESP8266 and TI CC3000.\ncategory=Communication\nurl=http://pubsubclient.knolleary.net\narchitectures=*\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}