{
  "metadata": {
    "timestamp": 1736565916233,
    "page": 883,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ggerganov/ggwave",
      "stars": 1996,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.34765625,
          "content": "ï»¿---\nBasedOnStyle: Google\nIndentWidth: '4'\nDerivePointerAlignment: false\nPointerAlignment: Middle\nColumnLimit: 160\nAllowShortFunctionsOnASingleLine: false\nAllowShortBlocksOnASingleLine: 'false'\nAllowShortCaseLabelsOnASingleLine: 'false'\nAllowShortIfStatementsOnASingleLine: 'false'\nAllowShortLoopsOnASingleLine: 'false'\nSpaceAfterCStyleCast: 'true'\n\n...\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.107421875,
          "content": "build\nbuild-*\ncompile_commands.json\n.exrc\n.clangd\n.cache\n.vimspector.json\n.*.swp\n.ycm_extra_conf.py\n.DS_Store\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.3359375,
          "content": "[submodule \"examples/third-party/imgui/imgui\"]\n\tpath = examples/third-party/imgui/imgui\n\turl = https://github.com/ocornut/imgui\n[submodule \"examples/third-party/ggsock\"]\n\tpath = examples/third-party/ggsock\n\turl = https://github.com/ggerganov/ggsock\n[submodule \"bindings/ios\"]\n\tpath = bindings/ios\n\turl = https://github.com/ggerganov/ggwave-spm\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 2.0927734375,
          "content": "# Changelog\n\n## [Unreleased]\n\n## [v0.4.0] - 2022-07-05\n\n**This release introduces some breaking changes in the C and C++ API!**\n\nMake sure to read the `ggwave.h` header for more information\n\n- Major refactoring in order to support microcontrollers ([#65](https://github.com/ggerganov/ggwave/pull/65)\n- Zero memory allocations during runtime\n- Do not include STL headers anymore\n- New, low-frequency, mono-tone (MT) protocols suitable for microcontrollers\n- Remove code-duplication for some of the examples\n- Better FFT implementation\n- Less memory usage\n- Bug fix in fixed-length payload decoding\n- Add Arduino and ESP32 examples\n- Support for Direct Sequence Spread (DSS)\n\n## [v0.3.1] - 2021-11-27\n\n- Add interface for changing ggwave's internal logging ([#52](https://github.com/ggerganov/ggwave/pull/52), [#55](https://github.com/ggerganov/ggwave/pull/55))\n- Fix out-of-bounds access in `ggwave_decode` ([#53](https://github.com/ggerganov/ggwave/pull/53))\n- Add C interface for selecting Rx protocols ([#60](https://github.com/ggerganov/ggwave/pull/60))\n\n## [v0.3.0] - 2021-07-03\n\n- Resampling fixes\n- Add `soundMarkerThreshold` parameter ([f4fb02d](https://github.com/ggerganov/ggwave/commit/f4fb02d5d4cfd6c1021d73b55a0e52ac9d3dbdfa))\n- Sampling rates are now consistently represented as float instead of int\n- Add option to query the generated tones ([ba87a65](https://github.com/ggerganov/ggwave/commit/ba87a651e3e27ce3fa9a85d53ca988a0cedd2e46))\n- Fix python build on Windows ([d73b184](https://github.com/ggerganov/ggwave/commit/d73b18426bf0df0e610c31c948e0ddf9a0784073))\n\n## [v0.2.0] - 2021-02-20\n\n- Supported sampling rates: 6kHz - 96kHz\n- Variable-length payloads\n- Fixed-length payloads (no sound markers emitted)\n- Reed-Solomon based ECC\n- Ultrasound support\n\n[unreleased]: https://github.com/ggerganov/ggwave/compare/ggwave-v0.4.0...HEAD\n[v0.4.0]: https://github.com/ggerganov/ggwave/releases/tag/ggwave-v0.4.0\n[v0.3.1]: https://github.com/ggerganov/ggwave/releases/tag/ggwave-v0.3.1\n[v0.3.0]: https://github.com/ggerganov/ggwave/releases/tag/ggwave-v0.3.0\n[v0.2.0]: https://github.com/ggerganov/ggwave/releases/tag/ggwave-v0.2.0\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 3.470703125,
          "content": "cmake_minimum_required (VERSION 3.0)\nproject(ggwave VERSION 0.4.2)\n\nset(GGWAVE_VERSION_PYTHON 0.4.2)\n\nset(CMAKE_EXPORT_COMPILE_COMMANDS \"on\")\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\nset(CMAKE_INSTALL_RPATH \"${CMAKE_INSTALL_PREFIX}/lib\")\n\nif(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)\n    set(GGWAVE_STANDALONE ON)\n    include(cmake/GitVars.cmake)\n    include(cmake/BuildTypes.cmake)\n\n    # configure project version\n    configure_file(${CMAKE_SOURCE_DIR}/README-tmpl.md                        ${CMAKE_SOURCE_DIR}/README.md @ONLY)\n    configure_file(${CMAKE_SOURCE_DIR}/bindings/python/setup-tmpl.py         ${CMAKE_SOURCE_DIR}/bindings/python/setup.py @ONLY)\n    configure_file(${CMAKE_SOURCE_DIR}/bindings/javascript/package-tmpl.json ${CMAKE_SOURCE_DIR}/bindings/javascript/package.json @ONLY)\n    configure_file(${CMAKE_SOURCE_DIR}/bindings/ios/Makefile-tmpl            ${CMAKE_SOURCE_DIR}/bindings/ios/Makefile @ONLY)\nelse()\n    set(GGWAVE_STANDALONE OFF)\nendif()\n\nif (EMSCRIPTEN)\n    set(GGWAVE_SUPPORT_SDL2_DEFAULT ON)\n    set(BUILD_SHARED_LIBS_DEFAULT OFF)\n\n    option(GGWAVE_WASM_SINGLE_FILE \"ggwave: embed WASM inside the generated ggwave.js\" ON)\nelse()\n    set(GGWAVE_SUPPORT_SDL2_DEFAULT ON)\n    if (WIN32)\n        set(BUILD_SHARED_LIBS_DEFAULT OFF)\n    else()\n        set(BUILD_SHARED_LIBS_DEFAULT ON)\n    endif()\nendif()\n\n# options\n\noption(BUILD_SHARED_LIBS              \"ggwave: build shared libs\" ${BUILD_SHARED_LIBS_DEFAULT})\noption(USE_FINDSDL2                   \"ggwave: use the FindSDL2.cmake script\" OFF)\n\noption(GGWAVE_ALL_WARNINGS            \"ggwave: enable all compiler warnings\" ON)\noption(GGWAVE_ALL_WARNINGS_3RD_PARTY  \"ggwave: enable all compiler warnings in 3rd party libs\" ON)\n\noption(GGWAVE_SANITIZE_THREAD         \"ggwave: enable thread sanitizer\" OFF)\noption(GGWAVE_SANITIZE_ADDRESS        \"ggwave: enable address sanitizer\" OFF)\noption(GGWAVE_SANITIZE_UNDEFINED      \"ggwave: enable undefined sanitizer\" OFF)\n\noption(GGWAVE_SUPPORT_SDL2            \"ggwave: support for libSDL2\" ${GGWAVE_SUPPORT_SDL2_DEFAULT})\noption(GGWAVE_SUPPORT_PYTHON          \"ggwave: support for python\" OFF)\noption(GGWAVE_SUPPORT_SWIFT           \"ggwave: support for swift\" OFF)\n\noption(GGWAVE_BUILD_TESTS             \"ggwave: build examples\" ${GGWAVE_STANDALONE})\noption(GGWAVE_BUILD_EXAMPLES          \"ggwave: build examples\" ${GGWAVE_STANDALONE})\n\n# sanitizers\n\nif (GGWAVE_SANITIZE_THREAD)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fsanitize=thread\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=thread\")\nendif()\n\nif (GGWAVE_SANITIZE_ADDRESS)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fsanitize=address -fno-omit-frame-pointer -D_GLIBCXX_DEBUG\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=address -fno-omit-frame-pointer -D_GLIBCXX_DEBUG\")\nendif()\n\nif (GGWAVE_SANITIZE_UNDEFINED)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fsanitize=undefined\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=undefined\")\nendif()\n\n# dependencies\n\n# main\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\nif (GGWAVE_ALL_WARNINGS)\n    if (CMAKE_COMPILER_IS_GNUCC OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n        set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wall -Wextra\")\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -Wextra -pedantic\")\n    else()\n        # todo : windows\n    endif()\nendif()\n\nadd_subdirectory(src)\nadd_subdirectory(bindings)\n\nif (GGWAVE_BUILD_TESTS)\n    enable_testing()\n    add_subdirectory(tests)\nendif()\n\nif (GGWAVE_BUILD_EXAMPLES)\n    add_subdirectory(examples)\nendif()\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.046875,
          "content": "MIT License\n\nCopyright (c) 2020 Georgi Gerganov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README-tmpl.md",
          "type": "blob",
          "size": 11.2646484375,
          "content": "# ggwave\n\n[![Actions Status](https://github.com/ggerganov/ggwave/workflows/CI/badge.svg)](https://github.com/ggerganov/ggwave/actions)\n[![License: MIT](https://img.shields.io/badge/license-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n[![ggwave badge][changelog-badge]][changelog]\n[![pypi](https://img.shields.io/pypi/v/ggwave.svg)](https://pypi.org/project/ggwave/)\n[![npm](https://img.shields.io/npm/v/ggwave.svg)](https://www.npmjs.com/package/ggwave/)\n\nTiny data-over-sound library.\n\nClick on the images below to hear what it sounds like:\n\n<a href=\"https://youtu.be/S2YdGefZiy4\"><img width=\"100%\" src=\"media/ggwave0.gif\"></img></a>\n\n<a href=\"https://user-images.githubusercontent.com/1991296/161401690-013023ba-1d21-4fb7-8d7f-9953f51c1e5b.mp4\"><img width=\"100%\" src=\"https://user-images.githubusercontent.com/1991296/109401710-d7d3d880-7958-11eb-9b7e-364be0b4cf55.gif\"></img></a>\n\n<a href=\"https://youtu.be/Zcgf77T71QM\"><img width=\"100%\" src=\"media/waver-preview1.gif\"></img></a>\n\nhttps://user-images.githubusercontent.com/1991296/166411509-5e1b9bcb-3655-40b1-9dc3-9bec72889dcf.mp4\n\nhttps://user-images.githubusercontent.com/1991296/168469004-aeb9b9fe-cf81-4db7-b602-62e4ae659341.mp4\n\n<a href=\"https://youtu.be/aj_GLBtU3Vw\"><img width=\"100%\" src=\"https://user-images.githubusercontent.com/1991296/177214041-26456254-d4b5-425b-bc57-48bcfc8f816e.png\"></img></a>\n\n## Details\n\nThis library allows you to communicate small amounts of data between air-gapped devices using sound. It implements a simple FSK-based transmission protocol that can be easily integrated in various projects. The bandwidth rate is between 8-16 bytes/sec depending on the protocol parameters. Error correction codes (ECC) are used to improve demodulation robustness.\n\nThis library is used only to generate and analyze the RAW waveforms that are played and captured from your audio devices (speakers, microphones, etc.). You are free to use any audio backend (e.g. PulseAudio, ALSA, etc.) as long as you provide callbacks for queuing and dequeuing audio samples.\n\nHere is a list of possible applications of **ggwave** with a few examples:\n\n- **Serverless, one-to-many broadcast**\n  - [wave-share](https://github.com/ggerganov/wave-share) - file sharing through sound\n- **Internet of Things**\n  - [esp32-rx](https://github.com/ggerganov/ggwave/tree/master/examples/esp32-rx), [arduino-rx](https://github.com/ggerganov/ggwave/tree/master/examples/arduino-rx), [rp2040-rx](https://github.com/ggerganov/ggwave/tree/master/examples/rp2040-rx), [arduino-tx](https://github.com/ggerganov/ggwave/tree/master/examples/arduino-tx) - Sand and receive sound data on microcontrollers\n  - [r2t2](https://github.com/ggerganov/ggwave/tree/master/examples/r2t2) - Transmit data with the PC speaker\n  - [buttons](https://github.com/ggerganov/ggwave/tree/master/examples/buttons) - Record and send commands via [Talking buttons](https://github.com/ggerganov/ggwave/discussions/27)\n- **Audio QR codes**\n  - [[Twitter]](https://twitter.com/ggerganov/status/1509558482567057417) - Broadcast your clipboard to nearby devices\n- **Device pairing**\n- **Authorization**\n\n## Try it out\n\nYou can easily test the library using the free [waver](https://github.com/ggerganov/ggwave/tree/master/examples/waver) application which is available on the following platforms:\n\n<a href=\"https://apps.apple.com/us/app/waver-data-over-sound/id1543607865?itsct=apps_box&amp;itscg=30200&ign-itsct=apps_box#?platform=iphone\" style=\"display: inline-block; overflow: hidden; border-radius: 13px; width: 250px; height: 83px;\"><img height=\"60px\" src=\"https://tools.applemediaservices.com/api/badges/download-on-the-app-store/white/en-US?size=250x83&amp;releaseDate=1607558400&h=8e5fafc57929918f684abc83ff8311ef\" alt=\"Download on the App Store\"></a>\n<a href='https://play.google.com/store/apps/details?id=com.ggerganov.Waver&pcampaignid=pcampaignidMKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1'><img alt='Get it on Google Play' src='https://i.imgur.com/BKDCbKv.png' height=\"60px\"/></a>\n<a href=\"https://snapcraft.io/waver\">\n<img alt=\"Get it from the Snap Store\" src=\"https://snapcraft.io/static/images/badges/en/snap-store-black.svg\" height=\"60px\"/>\n</a>\n\n### Browser demos\n\n  - https://waver.ggerganov.com\n  - https://ggwave.ggerganov.com\n  - https://ggwave-js.ggerganov.com\n\n### [HTTP service](https://github.com/ggerganov/ggwave/blob/master/examples/ggwave-to-file/README.md#http-service)\n\n  ```bash\n  # audible example\n  curl -sS 'https://ggwave-to-file.ggerganov.com/?m=Hello%20world!' --output hello.wav\n\n  # ultrasound example\n  curl -sS 'https://ggwave-to-file.ggerganov.com/?m=Hello%20world!&p=4' --output hello.wav\n  ```\n\n\n## Technical details\n\nBelow is a short summary of the modulation and demodulation algorithm used in `ggwave` for encoding and decoding data into sound.\n\n### Modulation (Tx)\n\nThe current approach uses a multi-frequency [Frequency-Shift Keying (FSK)](https://en.wikipedia.org/wiki/Frequency-shift_keying) modulation scheme. The data to be transmitted is first split into 4-bit chunks. At each moment of time, 3 bytes are transmitted using 6 tones - one tone for each 4-bit chunk. The 6 tones are emitted in a 4.5kHz range divided in 96 equally-spaced frequencies:\n\n| Freq, [Hz]   | Value, [bits]   | Freq, [Hz]   | Value, [bits]   | ... | Freq, [Hz]   | Value, [bits]   |\n| ------------ | --------------- | ------------ | --------------- | --- | ------------ | --------------- |\n| `F0 + 00*dF` | Chunk 0: `0000` | `F0 + 16*dF` | Chunk 1: `0000` | ... | `F0 + 80*dF` | Chunk 5: `0000` |\n| `F0 + 01*dF` | Chunk 0: `0001` | `F0 + 17*dF` | Chunk 1: `0001` | ... | `F0 + 81*dF` | Chunk 5: `0001` |\n| `F0 + 02*dF` | Chunk 0: `0010` | `F0 + 18*dF` | Chunk 1: `0010` | ... | `F0 + 82*dF` | Chunk 5: `0010` |\n| ...          | ...             | ...          | ...             | ... | ...          | ...             |\n| `F0 + 14*dF` | Chunk 0: `1110` | `F0 + 30*dF` | Chunk 1: `1110` | ... | `F0 + 94*dF` | Chunk 5: `1110` |\n| `F0 + 15*dF` | Chunk 0: `1111` | `F0 + 31*dF` | Chunk 1: `1111` | ... | `F0 + 95*dF` | Chunk 5: `1111` |\n\nFor all protocols: `dF = 46.875 Hz`. For non-ultrasonic protocols: `F0 = 1875.000 Hz`. For ultrasonic protocols: `F0 = 15000.000 Hz`.\n\nThe original data is encoded using [Reed-Solomon error codes](https://github.com/ggerganov/ggwave/blob/master/src/reed-solomon). The number of ECC bytes is determined based on the length of the original data. The encoded data is the one being transmitted.\n\n### Demodulation (Rx)\n\nBeginning and ending of the transmission are marked with special sound markers ([#13](https://github.com/ggerganov/ggwave/discussions/13)). The receiver listens for these markers and records the in-between sound data. The recorded data is then Fourier transformed to obtain a frequency spectrum. The detected frequencies are decoded back to binary data in the same way they were encoded.\n\nReed-Solomon decoding is finally performed to obtain the original data.\n\n\n## Examples\n\nThe [examples](https://github.com/ggerganov/ggwave/blob/master/examples/) folder contains several sample applications of the library:\n\n\n| Example | Description | Audio |\n| ------- | ----------- | ----- |\n| [ggtag](https://github.com/rgerganov/ggtag) | Sound-programmable e-paper badge | PDM mic |\n| [ggwave-rx](https://github.com/ggerganov/ggwave/blob/master/examples/ggwave-rx) | Very basic receive-only program | SDL |\n| [ggwave-cli](https://github.com/ggerganov/ggwave/blob/master/examples/ggwave-cli) | Command line tool for sending/receiving data through sound | SDL |\n| [ggwave-wasm](https://github.com/ggerganov/ggwave/blob/master/examples/ggwave-wasm) | WebAssembly module for web applications | SDL |\n| [ggwave-to-file](https://github.com/ggerganov/ggwave/blob/master/examples/ggwave-to-file) | Output a generated waveform to an uncompressed WAV file | - |\n| [ggwave-from-file](https://github.com/ggerganov/ggwave/blob/master/examples/ggwave-from-file) | Decode a waveform from an uncompressed WAV file | - |\n| [waver](https://github.com/ggerganov/ggwave/blob/master/examples/waver) | GUI application for sending/receiving data through sound | SDL |\n| [ggwave-py](https://github.com/ggerganov/ggwave/blob/master/examples/ggwave-py) | Python examples | PortAudio |\n| [ggwave-js](https://github.com/ggerganov/ggwave/blob/master/examples/ggwave-js) | Javascript example | Web Audio API |\n| [spectrogram](https://github.com/ggerganov/ggwave/blob/master/examples/spectrogram) | Spectrogram tool | SDL |\n| [ggweb-spike](https://gitlab.com/commonsguy/ggweb-spike) | Android example using a `WebView` to wrap `ggwave` into a simple app | WebAudio |\n| [buttons](https://github.com/ggerganov/ggwave/blob/master/examples/buttons) | Record and send commands via Talking buttons | Web Audio API |\n| [r2t2](https://github.com/ggerganov/ggwave/blob/master/examples/r2t2) | Transmit data through the PC speaker | PC speaker |\n| [ggwave-objc](https://github.com/ggerganov/ggwave-objc) | Minimal Objective-C iOS app using ggwave | AudioToolbox |\n| [ggwave-java](https://github.com/ggerganov/ggwave-java) | Minimal Java Android app using ggwave | android.media |\n| [ggwave-fm](https://github.com/rgerganov/ggwave-fm) | Transmit ggwave messages with HackRF | Radio |\n| [esp32-rx](https://github.com/ggerganov/ggwave/tree/master/examples/esp32-rx) | Transmit and receive messages using ESP32 | - |\n| [rp2040-rx](https://github.com/ggerganov/ggwave/tree/master/examples/rp2040-rx) | Transmit and receive messages using Raspberry Pi Pico (RP2040) | - |\n| [arduino-rx](https://github.com/ggerganov/ggwave/tree/master/examples/arduino-rx) | Transmit and receive messages using Arduino RP2040 | - |\n| [arduino-tx](https://github.com/ggerganov/ggwave/tree/master/examples/arduino-tx) | Transmit messages using Arduino Uno | - |\n| [arduino-rx-web](https://github.com/ggerganov/ggwave/tree/master/examples/arduino-rx-web) | Receive messages from Arduino Uno | Web Audio API |\n\nOther projects using **ggwave** or one of its prototypes:\n\n- [wave-gui](https://github.com/ggerganov/wave-gui) - a GUI for exploring different modulation protocols\n- [wave-share](https://github.com/ggerganov/wave-share) - WebRTC file sharing with sound signaling\n\n\n## Building\n\n### Dependencies for SDL-based examples\n\n    [Ubuntu]\n    $ sudo apt install libsdl2-dev\n\n    [Mac OS with brew]\n    $ brew install sdl2\n\n    [MSYS2]\n    $ pacman -S git cmake make mingw-w64-x86_64-dlfcn mingw-w64-x86_64-gcc mingw-w64-x86_64-SDL2\n\n### Linux, Mac, Windows (MSYS2)\n\n```bash\n# build\ngit clone https://github.com/ggerganov/ggwave --recursive\ncd ggwave && mkdir build && cd build\ncmake ..\nmake\n\n# running\n./bin/ggwave-cli\n```\n\n### Emscripten\n\n```bash\ngit clone https://github.com/ggerganov/ggwave --recursive\ncd ggwave\nmkdir build && cd build\nemcmake cmake ..\nmake\n```\n\n### Python\n\n```bash\npip install ggwave\n```\n\nMore info: https://pypi.org/project/ggwave/\n\n### Node.js\n\n```bash\nnpm install ggwave\n```\n\nMore info: https://www.npmjs.com/package/ggwave\n\n### iOS\n\nAvailable as a Swift Package: https://github.com/ggerganov/ggwave-spm\n\n## Installing the Waver application\n\n[![Get it from the Snap Store](https://snapcraft.io/static/images/badges/en/snap-store-black.svg)](https://snapcraft.io/waver)\n\n### Linux\n\n```bash\nsudo snap install waver\nsudo snap connect waver:audio-record :audio-record\n```\n\n### Mac OS\n\n  ```bash\n  brew install ggerganov/ggerganov/waver\n  ```\n\n[changelog]: ./CHANGELOG.md\n[changelog-badge]: https://img.shields.io/badge/changelog-ggwave%20v@PROJECT_VERSION@-dummy\n[license]: ./LICENSE\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.5302734375,
          "content": "# ggwave\n\n[![Actions Status](https://github.com/ggerganov/ggwave/workflows/CI/badge.svg)](https://github.com/ggerganov/ggwave/actions)\n[![License: MIT](https://img.shields.io/badge/license-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n[![ggwave badge][changelog-badge]][changelog]\n[![pypi](https://img.shields.io/pypi/v/ggwave.svg)](https://pypi.org/project/ggwave/)\n[![npm](https://img.shields.io/npm/v/ggwave.svg)](https://www.npmjs.com/package/ggwave/)\n\nTiny data-over-sound library.\n\nClick on the images below to hear what it sounds like:\n\n<a href=\"https://youtu.be/S2YdGefZiy4\"><img width=\"100%\" src=\"media/ggwave0.gif\"></img></a>\n\n<a href=\"https://user-images.githubusercontent.com/1991296/161401690-013023ba-1d21-4fb7-8d7f-9953f51c1e5b.mp4\"><img width=\"100%\" src=\"https://user-images.githubusercontent.com/1991296/109401710-d7d3d880-7958-11eb-9b7e-364be0b4cf55.gif\"></img></a>\n\n<a href=\"https://youtu.be/Zcgf77T71QM\"><img width=\"100%\" src=\"media/waver-preview1.gif\"></img></a>\n\nhttps://user-images.githubusercontent.com/1991296/166411509-5e1b9bcb-3655-40b1-9dc3-9bec72889dcf.mp4\n\nhttps://user-images.githubusercontent.com/1991296/168469004-aeb9b9fe-cf81-4db7-b602-62e4ae659341.mp4\n\n<a href=\"https://youtu.be/aj_GLBtU3Vw\"><img width=\"100%\" src=\"https://user-images.githubusercontent.com/1991296/177214041-26456254-d4b5-425b-bc57-48bcfc8f816e.png\"></img></a>\n\n## Details\n\nThis library allows you to communicate small amounts of data between air-gapped devices using sound. It implements a simple FSK-based transmission protocol that can be easily integrated in various projects. The bandwidth rate is between 8-16 bytes/sec depending on the protocol parameters. Error correction codes (ECC) are used to improve demodulation robustness.\n\nThis library is used only to generate and analyze the RAW waveforms that are played and captured from your audio devices (speakers, microphones, etc.). You are free to use any audio backend (e.g. PulseAudio, ALSA, etc.) as long as you provide callbacks for queuing and dequeuing audio samples.\n\nHere is a list of possible applications of **ggwave** with a few examples:\n\n- **Serverless, one-to-many broadcast**\n  - [wave-share](https://github.com/ggerganov/wave-share) - file sharing through sound\n- **Internet of Things**\n  - [esp32-rx](https://github.com/ggerganov/ggwave/tree/master/examples/esp32-rx), [arduino-rx](https://github.com/ggerganov/ggwave/tree/master/examples/arduino-rx), [rp2040-rx](https://github.com/ggerganov/ggwave/tree/master/examples/rp2040-rx), [arduino-tx](https://github.com/ggerganov/ggwave/tree/master/examples/arduino-tx) - Send and receive sound data on microcontrollers\n  - [r2t2](https://github.com/ggerganov/ggwave/tree/master/examples/r2t2) - Transmit data with the PC speaker\n  - [buttons](https://github.com/ggerganov/ggwave/tree/master/examples/buttons) - Record and send commands via [Talking buttons](https://github.com/ggerganov/ggwave/discussions/27)\n- **Audio QR codes**\n  - [[Twitter]](https://twitter.com/ggerganov/status/1509558482567057417) - Broadcast your clipboard to nearby devices\n- **Device pairing / Contact exchange**\n  - [PairSonic](https://github.com/seemoo-lab/pairsonic) - Exchange contact information and public keys with nearby devices\n- **Authorization**\n\n## Try it out\n\nYou can easily test the library using the free [waver](https://github.com/ggerganov/ggwave/tree/master/examples/waver) application which is available on the following platforms:\n\n<a href=\"https://apps.apple.com/us/app/waver-data-over-sound/id1543607865?itsct=apps_box&amp;itscg=30200&ign-itsct=apps_box#?platform=iphone\" style=\"display: inline-block; overflow: hidden; border-radius: 13px; width: 250px; height: 83px;\"><img height=\"60px\" src=\"https://tools.applemediaservices.com/api/badges/download-on-the-app-store/white/en-US?size=250x83&amp;releaseDate=1607558400&h=8e5fafc57929918f684abc83ff8311ef\" alt=\"Download on the App Store\"></a>\n<a href='https://play.google.com/store/apps/details?id=com.ggerganov.Waver&pcampaignid=pcampaignidMKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1'><img alt='Get it on Google Play' src='https://i.imgur.com/BKDCbKv.png' height=\"60px\"/></a>\n<a href=\"https://snapcraft.io/waver\">\n<img alt=\"Get it from the Snap Store\" src=\"https://snapcraft.io/static/images/badges/en/snap-store-black.svg\" height=\"60px\"/>\n</a>\n\n### Browser demos\n\n  - https://waver.ggerganov.com\n  - https://ggwave.ggerganov.com\n  - https://ggwave-js.ggerganov.com\n\n### [HTTP service](https://github.com/ggerganov/ggwave/blob/master/examples/ggwave-to-file/README.md#http-service)\n\n  ```bash\n  # audible example\n  curl -sS 'https://ggwave-to-file.ggerganov.com/?m=Hello%20world!' --output hello.wav\n\n  # ultrasound example\n  curl -sS 'https://ggwave-to-file.ggerganov.com/?m=Hello%20world!&p=4' --output hello.wav\n  ```\n\n\n## Technical details\n\nBelow is a short summary of the modulation and demodulation algorithm used in `ggwave` for encoding and decoding data into sound.\n\n### Modulation (Tx)\n\nThe current approach uses a multi-frequency [Frequency-Shift Keying (FSK)](https://en.wikipedia.org/wiki/Frequency-shift_keying) modulation scheme. The data to be transmitted is first split into 4-bit chunks. At each moment of time, 3 bytes are transmitted using 6 tones - one tone for each 4-bit chunk. The 6 tones are emitted in a 4.5kHz range divided in 96 equally-spaced frequencies:\n\n| Freq, [Hz]   | Value, [bits]   | Freq, [Hz]   | Value, [bits]   | ... | Freq, [Hz]   | Value, [bits]   |\n| ------------ | --------------- | ------------ | --------------- | --- | ------------ | --------------- |\n| `F0 + 00*dF` | Chunk 0: `0000` | `F0 + 16*dF` | Chunk 1: `0000` | ... | `F0 + 80*dF` | Chunk 5: `0000` |\n| `F0 + 01*dF` | Chunk 0: `0001` | `F0 + 17*dF` | Chunk 1: `0001` | ... | `F0 + 81*dF` | Chunk 5: `0001` |\n| `F0 + 02*dF` | Chunk 0: `0010` | `F0 + 18*dF` | Chunk 1: `0010` | ... | `F0 + 82*dF` | Chunk 5: `0010` |\n| ...          | ...             | ...          | ...             | ... | ...          | ...             |\n| `F0 + 14*dF` | Chunk 0: `1110` | `F0 + 30*dF` | Chunk 1: `1110` | ... | `F0 + 94*dF` | Chunk 5: `1110` |\n| `F0 + 15*dF` | Chunk 0: `1111` | `F0 + 31*dF` | Chunk 1: `1111` | ... | `F0 + 95*dF` | Chunk 5: `1111` |\n\nFor all protocols: `dF = 46.875 Hz`. For non-ultrasonic protocols: `F0 = 1875.000 Hz`. For ultrasonic protocols: `F0 = 15000.000 Hz`.\n\nThe original data is encoded using [Reed-Solomon error codes](https://github.com/ggerganov/ggwave/blob/master/src/reed-solomon). The number of ECC bytes is determined based on the length of the original data. The encoded data is the one being transmitted.\n\n### Demodulation (Rx)\n\nBeginning and ending of the transmission are marked with special sound markers ([#13](https://github.com/ggerganov/ggwave/discussions/13)). The receiver listens for these markers and records the in-between sound data. The recorded data is then Fourier transformed to obtain a frequency spectrum. The detected frequencies are decoded back to binary data in the same way they were encoded.\n\nReed-Solomon decoding is finally performed to obtain the original data.\n\n\n## Examples\n\nThe [examples](https://github.com/ggerganov/ggwave/blob/master/examples/) folder contains several sample applications of the library:\n\n\n| Example | Description | Audio |\n| ------- | ----------- | ----- |\n| [ggtag](https://github.com/rgerganov/ggtag) | Sound-programmable e-paper badge | PDM mic |\n| [ggwave-rx](https://github.com/ggerganov/ggwave/blob/master/examples/ggwave-rx) | Very basic receive-only program | SDL |\n| [ggwave-cli](https://github.com/ggerganov/ggwave/blob/master/examples/ggwave-cli) | Command line tool for sending/receiving data through sound | SDL |\n| [ggwave-wasm](https://github.com/ggerganov/ggwave/blob/master/examples/ggwave-wasm) | WebAssembly module for web applications | SDL |\n| [ggwave-to-file](https://github.com/ggerganov/ggwave/blob/master/examples/ggwave-to-file) | Output a generated waveform to an uncompressed WAV file | - |\n| [ggwave-from-file](https://github.com/ggerganov/ggwave/blob/master/examples/ggwave-from-file) | Decode a waveform from an uncompressed WAV file | - |\n| [waver](https://github.com/ggerganov/ggwave/blob/master/examples/waver) | GUI application for sending/receiving data through sound | SDL |\n| [ggwave-py](https://github.com/ggerganov/ggwave/blob/master/examples/ggwave-py) | Python examples | PortAudio |\n| [ggwave-js](https://github.com/ggerganov/ggwave/blob/master/examples/ggwave-js) | Javascript example | Web Audio API |\n| [spectrogram](https://github.com/ggerganov/ggwave/blob/master/examples/spectrogram) | Spectrogram tool | SDL |\n| [ggweb-spike](https://gitlab.com/commonsguy/ggweb-spike) | Android example using a `WebView` to wrap `ggwave` into a simple app | WebAudio |\n| [buttons](https://github.com/ggerganov/ggwave/blob/master/examples/buttons) | Record and send commands via Talking buttons | Web Audio API |\n| [r2t2](https://github.com/ggerganov/ggwave/blob/master/examples/r2t2) | Transmit data through the PC speaker | PC speaker |\n| [ggwave-objc](https://github.com/ggerganov/ggwave-objc) | Minimal Objective-C iOS app using ggwave | AudioToolbox |\n| [ggwave-java](https://github.com/ggerganov/ggwave-java) | Minimal Java Android app using ggwave | android.media |\n| [ggwave-kmm](https://github.com/wooram-yang/ggwave-kmm) | Kotlin Multiplatform Project using ggwave | android.media, javax.sound.sampled |\n| [ggwave-fm](https://github.com/rgerganov/ggwave-fm) | Transmit ggwave messages with HackRF | Radio |\n| [esp32-rx](https://github.com/ggerganov/ggwave/tree/master/examples/esp32-rx) | Transmit and receive messages using ESP32 | - |\n| [rp2040-rx](https://github.com/ggerganov/ggwave/tree/master/examples/rp2040-rx) | Transmit and receive messages using Raspberry Pi Pico (RP2040) | - |\n| [arduino-rx](https://github.com/ggerganov/ggwave/tree/master/examples/arduino-rx) | Transmit and receive messages using Arduino RP2040 | - |\n| [arduino-tx](https://github.com/ggerganov/ggwave/tree/master/examples/arduino-tx) | Transmit messages using Arduino Uno | - |\n| [arduino-rx-web](https://github.com/ggerganov/ggwave/tree/master/examples/arduino-rx-web) | Receive messages from Arduino Uno | Web Audio API |\n\nOther projects using **ggwave** or one of its prototypes:\n\n- [wave-gui](https://github.com/ggerganov/wave-gui) - a GUI for exploring different modulation protocols\n- [wave-share](https://github.com/ggerganov/wave-share) - WebRTC file sharing with sound signaling\n\n\n## Building\n\n### Dependencies for SDL-based examples\n\n    [Ubuntu]\n    $ sudo apt install libsdl2-dev\n\n    [Mac OS with brew]\n    $ brew install sdl2\n\n    [MSYS2]\n    $ pacman -S git cmake make mingw-w64-x86_64-dlfcn mingw-w64-x86_64-gcc mingw-w64-x86_64-SDL2\n\n### Linux, Mac, Windows (MSYS2)\n\n```bash\n# build\ngit clone https://github.com/ggerganov/ggwave --recursive\ncd ggwave && mkdir build && cd build\ncmake ..\nmake\n\n# running\n./bin/ggwave-cli\n```\n\n### Emscripten\n\n```bash\ngit clone https://github.com/ggerganov/ggwave --recursive\ncd ggwave\nmkdir build && cd build\nemcmake cmake ..\nmake\n```\n\n### Python\n\n```bash\npip install ggwave\n```\n\nMore info: https://pypi.org/project/ggwave/\n\n### Node.js\n\n```bash\nnpm install ggwave\n```\n\nMore info: https://www.npmjs.com/package/ggwave\n\n### iOS\n\nAvailable as a Swift Package: https://github.com/ggerganov/ggwave-spm\n\n## Installing the Waver application\n\n[![Get it from the Snap Store](https://snapcraft.io/static/images/badges/en/snap-store-black.svg)](https://snapcraft.io/waver)\n\n### Linux\n\n```bash\nsudo snap install waver\nsudo snap connect waver:audio-record :audio-record\n```\n\n### Mac OS\n\n  ```bash\n  brew install ggerganov/ggerganov/waver\n  ```\n\n[changelog]: ./CHANGELOG.md\n[changelog-badge]: https://img.shields.io/badge/changelog-ggwave%20v0.4.2-dummy\n[license]: ./LICENSE\n"
        },
        {
          "name": "bindings",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "media",
          "type": "tree",
          "content": null
        },
        {
          "name": "snap",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}