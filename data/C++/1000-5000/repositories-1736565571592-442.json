{
  "metadata": {
    "timestamp": 1736565571592,
    "page": 442,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "baidu/bfs",
      "stars": 2855,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3515625,
          "content": "# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\n# Proto .h .cc\n*.pb.cc\n*.pb.h\n\n#depends\ndepends.mk\n*_test\nthirdsrc\nthirdparty\noutput\n.build\nsrc/version.cc\n.DS_Store\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 3.708984375,
          "content": "language: cpp\ncompiler: gcc\nenv:\n    global:\n        - secure: \"BTWd5JMj+Asg9e9Fg7jJ2i1MDpko0+jMN6WqsbKwa0nq5IcdcnKQp9JNdMr25VIpYS9/E8ys+ha0M00QZE/1O4xkX7tlSq/Ex0knqEpXZjLpwA+c3d+4Nuw+u/WZG+Q8YPSvJocFBrCNTpD3wTue0nR9gpw79c+iclQWHXeuziM=\"\n        - WORK_DIR=`pwd`\n        - DEPS_PREFIX=$WORK_DIR/thirdparty\n        - DEPS_CONFIG=\"--prefix=`pwd`/thirdparty --disable-shared --with-pic\"\n    matrix:\n        - PROTOBUF_VERSION=2.6.0\n\nbefore_install:\n    - echo $WORK_DIR\n    - echo $DEPS_PREFIX\n    - echo $DEPS_CONFIG\ninstall:\n    - echo | sudo apt-add-repository ppa:boost-latest/ppa\n    - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test\n    - sudo apt-get update\n    - sudo apt-get install -qq g++-4.8\n    - sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 20\n    - sudo update-alternatives --config g++\n\n    - sudo apt-get install libboost-dev\n    - wget https://github.com/google/protobuf/releases/download/v$PROTOBUF_VERSION/protobuf-$PROTOBUF_VERSION.tar.gz\n    - tar xf protobuf-$PROTOBUF_VERSION.tar.gz\n    - ( cd protobuf-$PROTOBUF_VERSION && ./configure $DEPS_CONFIG && make -j4 && sudo make install)\n\n    - wget https://github.com/google/snappy/releases/download/1.1.4/snappy-1.1.4.tar.gz\n    - tar xf snappy-1.1.4.tar.gz\n    - ( cd snappy-1.1.4 && sh -x ./autogen.sh && ./configure $DEPS_CONFIG && make -j2 && sudo make install && sudo ldconfig )\n    - sudo apt-get install zlib1g-dev\n\n    - git clone https://github.com/baidu/sofa-pbrpc\n    - ( cd sofa-pbrpc && echo \"PROTOBUF_DIR=$DEPS_PREFIX\" >> depends.mk && echo \"PREFIX=$DEPS_PREFIX\" >> depends.mk  && make -j4 && sudo make install);\n\n    - wget https://github.com/gflags/gflags/archive/v2.1.2.tar.gz\n    - tar xf v2.1.2.tar.gz\n    - ( cd gflags-2.1.2 && cmake -DCMAKE_INSTALL_PREFIX=$DEPS_PREFIX -DGFLAGS_NAMESPACE=google -DCMAKE_CXX_FLAGS=-fPIC && make -j4 && sudo make install )\n\n    - git clone -b cpp11 https://github.com/baidu/common\n    - ( cd common && sed -i '/^PREFIX=.*/d' config.mk && echo \"PREFIX=$DEPS_PREFIX\" >> config.mk && make -j4 && sudo make install)\n\n    - git clone https://github.com/yvxiang/gtest.git\n    - ( cd gtest && ./configure --disable-shared --with-pic && make -j4 && sudo cp -a lib/.libs/* /usr/lib && sudo cp -a include/gtest /usr/include )\n\n    - wget http://download.savannah.gnu.org/releases/libunwind/libunwind-0.99-beta.tar.gz\n    - tar zxvf libunwind-0.99-beta.tar.gz\n    - ( cd libunwind-0.99-beta && ./configure CFLAGS=-U_FORTIFY_SOURCE --with-pic && make -j4 && sudo make install )\n\n    - wget https://github.com/gperftools/gperftools/releases/download/gperftools-2.2.1/gperftools-2.2.1.tar.gz\n    - tar zxvf gperftools-2.2.1.tar.gz\n    - ( cd gperftools-2.2.1 && ./configure --with-pic && make -j4 && sudo make install && sudo ldconfig )\n\n    - git clone --depth=1 https://github.com/lylei/leveldb.git leveldb\n    - ( cd leveldb && echo \"PREFIX=$DEPS_PREFIX\" > config.mk && make -j4 && sudo make install)\n\n\nbefore_script:\n    - echo 'SNAPPY_PATH=./thirdparty/snappy' > depends.mk\n    - echo 'PROTOBUF_PATH=./thirdparty/protobuf' >> depends.mk\n    - echo 'PROTOBUF_PATH=./thirdparty' >> depends.mk\n    - echo 'PBRPC_PATH=./thirdparty/bin/' >> depends.mk\n    - echo 'PROTOC=./thirdparty/bin/protoc' >> depends.mk\n    - echo 'PBRPC_PATH=./thirdparty/sofa-pbrpc/output' >> depends.mk\n    - echo 'TCMALLOC_PATH=./thirdparty' >> depends.mk\n    - echo 'COMMON_PATH=./common/output' >> depends.mk\n    - echo 'LEVELDB_PATH=./thirdparty' >> depends.mk\n    - echo 'STD_FLAG=c++11' >> depends.mk\n\nscript: make -j4 && make check && make test\n\naddons:\n   coverity_scan:\n       project:\n           name: \"bluebore/bfs\"\n       notification_email: yanshiguang02@baidu.com\n       build_command_prepend: \"make clean\"\n       build_command: \"make -j4\"\n       branch_pattern: master\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.435546875,
          "content": "Copyright (c) 2014, Bluebore\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of bfs nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 9.8681640625,
          "content": "\n# OPT ?= -O2 -DNDEBUG # (A) Production use (optimized mode)\nOPT ?= -g2 -Werror # (B) Debug mode, w/ full line-level debugging symbols\n# OPT ?= -O2 -g2 -DNDEBUG # (C) Profiling mode: opt, but w/debugging symbols\n\ninclude depends.mk\n#CXX=/opt/compiler/gcc-4.8.2/bin/g++\n\nINCLUDE_PATH = -I./src -I$(PROTOBUF_PATH)/include \\\n               -I$(PBRPC_PATH)/include \\\n               -I$(LEVELDB_PATH)/include \\\n               -I$(SNAPPY_PATH)/include \\\n               -I$(GFLAG_PATH)/include \\\n               -I$(COMMON_PATH)/include\n\nLDFLAGS = -L$(PBRPC_PATH)/lib -lsofa-pbrpc \\\n          -L$(PROTOBUF_PATH)/lib -lprotobuf \\\n          -L$(LEVELDB_PATH)/lib -lleveldb \\\n          -L$(SNAPPY_PATH)/lib -lsnappy \\\n          -L$(GFLAG_PATH)/lib -lgflags \\\n          -L$(GTEST_PATH)/lib -lgtest \\\n          -L$(TCMALLOC_PATH)/lib -ltcmalloc_minimal \\\n          -L$(COMMON_PATH)/lib -lcommon -lpthread -lz -lrt\n\nSO_LDFLAGS += -rdynamic $(DEPS_LDPATH) $(SO_DEPS_LDFLAGS) -lpthread -lrt -lz -ldl \\\n\t      -shared -Wl,--version-script,so-version-script # hide symbol of thirdparty libs\n\nCXXFLAGS = -std=$(STD_FLAG) -Wall -fPIC $(OPT)\nFUSEFLAGS = -D_FILE_OFFSET_BITS=64 -DFUSE_USE_VERSION=26 -I$(FUSE_PATH)/include\nFUSE_LL_FLAGS = -D_FILE_OFFSET_BITS=64 -DFUSE_USE_VERSION=26 -I$(FUSE_LL_PATH)/include\n\nPROTO_FILE = $(wildcard src/proto/*.proto)\nPROTO_SRC = $(patsubst %.proto,%.pb.cc,$(PROTO_FILE))\nPROTO_HEADER = $(patsubst %.proto,%.pb.h,$(PROTO_FILE))\nPROTO_OBJ = $(patsubst %.proto,%.pb.o,$(PROTO_FILE))\n\nNAMESERVER_SRC = $(wildcard src/nameserver/*.cc)\nNAMESERVER_OBJ = $(patsubst %.cc, %.o, $(NAMESERVER_SRC))\nNAMESERVER_HEADER = $(wildcard src/nameserver/*.h)\n\nMETASERVER_SRC = $(wildcard src/metaserver/*.cc)\nMETASERVER_OBJ = $(patsubst %.cc, %.o, $(METASERVER_SRC))\nMETASERVER_HEADER = $(wildcard src/metaserver/*.h)\n\nCHUNKSERVER_SRC = $(wildcard src/chunkserver/*.cc)\nCHUNKSERVER_OBJ = $(patsubst %.cc, %.o, $(CHUNKSERVER_SRC))\nCHUNKSERVER_HEADER = $(wildcard src/chunkserver/*.h)\n\nRPC_SRC = $(wildcard src/rpc/*.cc)\nRPC_OBJ = $(patsubst %.cc, %.o, $(RPC_SRC))\n\nSDK_SRC = $(wildcard src/sdk/*.cc)\nSDK_OBJ = $(patsubst %.cc, %.o, $(SDK_SRC))\nSDK_HEADER = $(wildcard src/sdk/*.h)\n\nFUSE_SRC = $(wildcard fuse/*.cc)\nFUSE_OBJ = $(patsubst %.cc, %.o, $(FUSE_SRC))\nFUSE_HEADER = $(wildcard fuse/*.h)\n\nFUSE_LL_SRC = $(wildcard fuse_lowlevel/*.cc)\nFUSE_LL_OBJ = $(patsubst %.cc, %.o, $(FUSE_LL_SRC))\nFUSE_LL_HEADER = $(wildcard fuse_lowlevel/*.h)\n\nCLIENT_OBJ = $(patsubst %.cc, %.o, $(wildcard src/client/*.cc))\nMARK_OBJ = $(patsubst %.cc, %.o, $(wildcard src/test/*.cc))\nUTIL_OJB = $(patsubst %.cc, %.o, $(wildcard src/utils/*.cc))\n\nFLAGS_OBJ = src/flags.o\nVERSION_OBJ = src/version.o\nOBJS = $(FLAGS_OBJ) $(RPC_OBJ) $(PROTO_OBJ) $(VERSION_OBJ)\n\nLIBS = libbfs.a\nBFS_C_SO = libbfs_c.so\nBIN = nameserver chunkserver bfs_client raft_kv kv_client libbfs_c.so\nUTIL_BIN = bfs_dump logdb_dump\n\nifdef FUSE_PATH\n\tBIN += bfs_mount\nendif\nifdef FUSE_LL_PATH\n\tBIN += bfs_ll_mount\nendif\nTESTS = namespace_test block_mapping_test location_provider_test logdb_test \\\n\t\tfile_lock_manager_test file_lock_test chunkserver_impl_test \\\n\t   \tfile_cache_test block_manager_test data_block_test\nTEST_OBJS = src/nameserver/test/namespace_test.o \\\n\t\t\tsrc/nameserver/test/block_mapping_test.o \\\n\t\t\tsrc/nameserver/test/logdb_test.o \\\n\t\t\tsrc/nameserver/test/location_provider_test.o \\\n\t\t\tsrc/nameserver/test/kv_client.o \\\n\t\t\tsrc/nameserver/test/raft_test.o \\\n\t\t\tsrc/nameserver/test/nameserver_impl_test.o \\\n\t\t\tsrc/nameserver/test/file_lock_manager_test.o \\\n\t\t\tsrc/nameserver/test/file_lock_test.o \\\n\t\t\tsrc/chunkserver/test/file_cache_test.o \\\n\t\t\tsrc/chunkserver/test/chunkserver_impl_test.o \\\n\t\t\tsrc/chunkserver/test/block_manager_test.o \\\n\t\t\tsrc/chunkserver/test/data_block_test.o\nUNITTEST_OUTPUT = ut/\n\nall: $(BIN)\n\t@echo 'Done'\n\n# Depends\n$(NAMESERVER_OBJ) $(CHUNKSERVER_OBJ) $(PROTO_OBJ) $(SDK_OBJ): $(PROTO_HEADER)\n$(NAMESERVER_OBJ): $(NAMESERVER_HEADER)\n$(METASERVER_OBJ): $(METASERVER_HEADER)\n$(CHUNKSERVER_OBJ): $(CHUNKSERVER_HEADER)\n$(SDK_OBJ): $(SDK_HEADER)\n$(FUSE_OBJ): $(FUSE_HEADER)\n\n# Targets\n\ncheck: all $(TESTS)\n\tmkdir -p $(UNITTEST_OUTPUT)\n\tmv $(TESTS) $(UNITTEST_OUTPUT)\n\tcd $(UNITTEST_OUTPUT); for t in $(TESTS); do echo \"***** Running $$t\"; ./$$t || exit 1; done\n\nnamespace_test: src/nameserver/test/namespace_test.o\n\t$(CXX) src/nameserver/namespace.o src/nameserver/test/namespace_test.o $(OBJS) -o $@ $(LDFLAGS)\n\n#NAMESERVER_OBJ_NO_MAIN := $(filter out \"nameserver_main.o\", $(NAMESERVER_OBJ))\n#nameserver_test: src/nameserver/test/nameserver_impl_test.o $(NAMESERVER_OBJ_NO_MAIN)\n\t#$(CXX) src/nameserver/test/nameserver_impl_test.o $(NAMESERVER_OBJ_NO_MAIN) $(OBJS) -o $@ $(LDFLAGS)\nnameserver_test: src/nameserver/test/nameserver_impl_test.o \\\n\tsrc/nameserver/block_mapping.o src/nameserver/chunkserver_manager.o \\\n\tsrc/nameserver/location_provider.o src/nameserver/master_slave.o \\\n\tsrc/nameserver/nameserver_impl.o  src/nameserver/namespace.o \\\n\tsrc/nameserver/raft_impl.o  src/nameserver/raft_node.o\n\t$(CXX) src/nameserver/nameserver_impl.o src/nameserver/test/nameserver_impl_test.o \\\n\tsrc/nameserver/block_mapping.o src/nameserver/chunkserver_manager.o \\\n\tsrc/nameserver/location_provider.o src/nameserver/master_slave.o \\\n\tsrc/nameserver/namespace.o src/nameserver/raft_impl.o  \\\n\tsrc/nameserver/raft_node.o $(OBJS) -o $@ $(LDFLAGS)\n\nblock_mapping_test: src/nameserver/test/block_mapping_test.o src/nameserver/block_mapping.o\n\t$(CXX) src/nameserver/block_mapping.o src/nameserver/test/block_mapping_test.o \\\n\tsrc/nameserver/block_mapping_manager.o $(OBJS) -o $@ $(LDFLAGS)\n\nlogdb_test: src/nameserver/test/logdb_test.o src/nameserver/logdb.o\n\t$(CXX) src/nameserver/logdb.o src/nameserver/test/logdb_test.o $(OBJS) -o $@ $(LDFLAGS)\n\nraft_kv: src/nameserver/test/raft_test.o src/nameserver/raft_node.o src/nameserver/logdb.o $(OBJS)\n\t$(CXX) $^ -o $@ $(LDFLAGS)\n\nkv_client: src/nameserver/test/kv_client.o $(OBJS)\n\t$(CXX) $^ -o $@ $(LDFLAGS)\n\nlocation_provider_test: src/nameserver/test/location_provider_test.o src/nameserver/location_provider.o\n\t$(CXX) $^ $(OBJS) -o $@ $(LDFLAGS)\n\nfile_lock_manager_test: src/nameserver/test/file_lock_manager_test.o \\\n\t\t\t\t\t\tsrc/nameserver/file_lock_manager.o\n\t$(CXX) $^ $(OBJS) -o $@ $(LDFLAGS)\n\nfile_lock_test: src/nameserver/test/file_lock_test.o \\\n\t\t\t\t\t\tsrc/nameserver/file_lock.o \\\n\t\t\t\t\t\tsrc/nameserver/file_lock_manager.o\n\t$(CXX) $^ $(OBJS) -o $@ $(LDFLAGS)\n\nchunkserver_impl_test: src/chunkserver/test/chunkserver_impl_test.o \\\n\tsrc/chunkserver/chunkserver_impl.o src/chunkserver/data_block.o src/chunkserver/block_manager.o \\\n\tsrc/chunkserver/counter_manager.o src/chunkserver/file_cache.o src/chunkserver/disk.o \\\n\tsrc/utils/meta_converter.o\n\t$(CXX) $^ $(OBJS) -o $@ $(LDFLAGS)\n\nfile_cache_test: src/chunkserver/test/file_cache_test.o\n\t$(CXX) src/chunkserver/file_cache.o src/chunkserver/test/file_cache_test.o $(OBJS) -o $@ $(LDFLAGS)\n\nblock_manager_test: src/chunkserver/test/block_manager_test.o src/chunkserver/block_manager.o \\\n\tsrc/chunkserver/disk.o src/chunkserver/data_block.o src/chunkserver/counter_manager.o \\\n\tsrc/chunkserver/file_cache.o src/utils/meta_converter.o\n\t$(CXX) $^ $(OBJS) -o $@ $(LDFLAGS)\n\ndata_block_test: src/chunkserver/test/data_block_test.o \\\n\tsrc/chunkserver/data_block.o src/chunkserver/counter_manager.o \\\n\tsrc/chunkserver/file_cache.o src/chunkserver/disk.o\n\t$(CXX) $^ $(OBJS) -o $@ $(LDFLAGS)\n\nnameserver: $(NAMESERVER_OBJ) $(OBJS)\n\t$(CXX) $(NAMESERVER_OBJ) $(OBJS) -o $@ $(LDFLAGS)\n\nmetaserver: $(METASERVER_OBJ) $(OBJS) src/nameserver/block_mapping_manager.o \\\n\tsrc/nameserver/chunkserver_manager.o src/nameserver/block_mapping.o \\\n\tsrc/nameserver/namespace.o\n\t$(CXX) $(METASERVER_OBJ) $(OBJS) src/nameserver/block_mapping_manager.o \\\n\tsrc/nameserver/chunkserver_manager.o src/nameserver/block_mapping.o \\\n\tsrc/nameserver/namespace.o src/nameserver/location_provider.o -o $@ $(LDFLAGS)\n\nchunkserver: $(CHUNKSERVER_OBJ) $(OBJS) src/utils/meta_converter.o\n\t$(CXX) $(CHUNKSERVER_OBJ) $(OBJS) src/utils/meta_converter.o -o $@ $(LDFLAGS)\n\nlibbfs.a: $(SDK_OBJ) $(OBJS) $(PROTO_HEADER)\n\t$(AR) -rs $@ $(SDK_OBJ) $(OBJS)\n\nlibbfs_c.so: src/sdk/bfs_c.cc src/sdk/bfs_c.h libbfs.a\n\tg++ $(CXXFLAGS) -shared -fPIC $(INCLUDE_PATH) -o $@ src/sdk/bfs_c.cc  \\\n\t            -Xlinker \"-(\" libbfs.a \\\n\t\tthirdparty/lib/libprotobuf.a \\\n\t\tthirdparty/lib/libsofa-pbrpc.a \\\n\t\tthirdparty/lib/libsnappy.a \\\n\t\tthirdparty/lib/libgflags.a \\\n\t\tthirdparty/lib/libcommon.a \\\n\t\t-lpthread  -lrt -lz -ldl \\\n\t\t-Xlinker \"-)\"\n\nbfs_client: $(CLIENT_OBJ) $(LIBS)\n\t$(CXX) $(CLIENT_OBJ) $(LIBS) -o $@ $(LDFLAGS)\n\nmark: $(MARK_OBJ) $(LIBS)\n\t$(CXX) $(MARK_OBJ) $(LIBS) -o $@ $(LDFLAGS)\n\nlogdb_dump: src/nameserver/logdb.o src/utils/logdb_dump.o\n\t$(CXX) src/nameserver/logdb.o src/utils/logdb_dump.o $(OBJS) -o $@ $(LDFLAGS)\n\nbfs_dump: src/utils/bfs_dump.o\n\t$(CXX) src/utils/bfs_dump.o $(OBJS) -o $@ $(LDFLAGS)\n\nbfs_mount: $(FUSE_OBJ) $(LIBS)\n\t$(CXX) $(FUSE_OBJ) $(LIBS) -o $@ -L$(FUSE_PATH)/lib -Wl,-static -lfuse -Wl,-call_shared -ldl $(LDFLAGS)\n\n$(FUSE_OBJ): %.o: %.cc\n\t$(CXX) $(CXXFLAGS) $(FUSEFLAGS) $(INCLUDE_PATH) -c $< -o $@\n\nbfs_ll_mount: $(FUSE_LL_OBJ) $(LIBS)\n\t$(CXX) $(FUSE_LL_OBJ) $(LIBS) -o $@ -L$(FUSE_LL_PATH)/lib -Wl,-static -lfuse -Wl,-call_shared -ldl $(LDFLAGS)\n\n%.o: %.cc\n\t$(CXX) $(CXXFLAGS) $(INCLUDE_PATH) -c $< -o $@\n$(FUSE_LL_OBJ): %.o: %.cc\n\t$(CXX) $(CXXFLAGS) $(FUSE_LL_FLAGS) $(INCLUDE_PATH) -c $< -o $@\n\n%.pb.h %.pb.cc: %.proto\n\t$(PROTOC) --proto_path=./src/proto/ --proto_path=/usr/local/include --cpp_out=./src/proto/ $<\nsrc/version.cc: FORCE\n\tbash build_version.sh\n\n.PHONY: FORCE\nFORCE:\n\nclean:\n\trm -rf $(BIN) $(UTIL_BIN) mark\n\trm -rf $(NAMESERVER_OBJ) $(CHUNKSERVER_OBJ) $(SDK_OBJ) $(CLIENT_OBJ)  \\\n\t\t   $(OBJS) $(TEST_OBJS) $(MARK_OBJ) $(UTIL_OJB) $(BFS_C_SO)\n\trm -rf $(PROTO_SRC) $(PROTO_HEADER)\n\trm -rf $(UNITTEST_OUTPUT)\n\trm -rf $(LIBS)\n\ninstall:\n\trm -rf output\n\tmkdir -p output/include\n\tmkdir -p output/lib\n\tmkdir -p output/bin\n\tcp -f src/sdk/bfs.h output/include/\n\tcp -f libbfs.a output/lib/\n\tcp -f bfs_client output/bin/\n\ttouch output/bfs.flag\n\n.PHONY: test\ntest:\n\tcd sandbox; ./small_test.sh; ./small_test.sh raft; ./small_test.sh master_slave\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.1796875,
          "content": "[The Baidu File System](http://github.com/baidu/bfs)\n=======\n\n [![Build Status](https://travis-ci.org/baidu/bfs.svg?branch=master)](https://travis-ci.org/baidu/bfs)  [![Build Status](https://scan.coverity.com/projects/8135/badge.svg)](https://scan.coverity.com/projects/myawan-bfs-1/) \n\nThe Baidu File System (BFS) is a distributed file system designed to support real-time applications. Like many other distributed file systems, BFS is highly fault-tolerant. But different from others, BFS provides low read/write latency while maintaining high throughput rates. Together with [Galaxy](https://github.com/baidu/galaxy) and [Tera](http://github.com/baidu/tera), BFS supports many real-time products in Baidu, including Baidu webpage database, Baidu incremental indexing system, Baidu user behavior analysis system, etc.\n\n## Features\n1. Continuous availability \n\t* Nameserver is implemented as a `raft group`, no single point failure.\n2. High throughput\n\t* High performance data engine to maximize IO utils.\n3. Low latency\n\t* Global load balance and slow node detection.\n4. Linear scalability\n\t* Support multi data center deployment and up to 10,000 data nodes.\n\n## Architecture\n![架构图](resources/images/bfs-arch2-mini.png)\n\n## Quick Start\n#### Build  \n    ./build.sh\n#### Standalone BFS\n    cd sandbox\n    ./deploy.sh\n    ./start_bfs.sh\n\n## How to Contribute\n1. Please read the [RoadMap](docs/en/roadmap.md) or source code.  \n2. Find something you are interested in and start working on it.\n3. Test your code by simply running `make test` and `make check`.\n4. Make a pull request.\n5. Once your code has passed the code-review and merged, it will be run on thousands of servers :)\n\n\n## Contact us\nopensearch@baidu.com\n\n====\n\n[百度文件系统](http://github.com/baidu/bfs)\n====\n\n百度的核心业务和数据库系统都依赖分布式文件系统作为底层存储，文件系统的可用性和性能对上层搜索业务的稳定性与效果有着至关重要的影响。现有的分布式文件系统（如HDFS等）是为离线批处理设计的，无法在保证高吞吐的情况下做到低延迟和持续可用，所以我们从搜索的业务特点出发，设计了百度文件系统。\n\n## 核心特点\n1. 持续可用  \n\t* 数据多机房、多地域冗余，元数据通过Raft维护一致性，单个机房宕机，不影响整体可用性。  \n2. 高吞吐  \n\t* 通过高性能的单机引擎，最大化存储介质IO吞吐；  \n3. 低延时  \n\t* 全局负载均衡、慢节点自动规避  \n4. 水平扩展  \n\t* 设计支持两地三机房，1万+台机器管理。  \n\n## 架构\n![架构图](resources/images/bfs-arch2-mini.png)\n\n## 快速试用\n#### 构建\n    ./build.sh\n#### 单机版BFS\n    cd sandbox\n    ./deploy.sh\n    ./start_bfs.sh\n\n## 如何参与开发\n1. 阅读[RoadMap](docs/cn/roadmap.md)文件或者源代码，了解我们当前的开发方向\n2. 找到自己感兴趣开发的的功能或模块\n3. 进行开发，开发完成后自测功能是否正确，并运行make test及make check检查是否可以通过已有的测试case\n4. 发起pull request\n5. 在code-review通过后，你的代码便有机会运行在百度的数万台服务器上~\n\n\n## 联系我们\n邮件：opensearch@baidu.com  \nQQ群：188471131\n\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 5.6572265625,
          "content": "#!/usr/bin/env bash\nset -x -e\n\n########################################\n# download & build depend software\n########################################\n\nWORK_DIR=`pwd`\nDEPS_SOURCE=`pwd`/thirdsrc\nDEPS_PREFIX=`pwd`/thirdparty\nDEPS_CONFIG=\"--prefix=${DEPS_PREFIX} --disable-shared --with-pic\"\nFLAG_DIR=`pwd`/.build\n\nexport PATH=${DEPS_PREFIX}/bin:$PATH\nmkdir -p ${DEPS_SOURCE} ${DEPS_PREFIX} ${FLAG_DIR}\n\nif [ ! -f \"${FLAG_DIR}/dl_third\" ] || [ ! -d \"${DEPS_SOURCE}/.git\" ]; then\n    rm -rf ${DEPS_SOURCE}\n    mkdir ${DEPS_SOURCE}\n    git clone https://github.com/yvxiang/thirdparty.git thirdsrc\n    touch \"${FLAG_DIR}/dl_third\"\nfi\n\ncd ${DEPS_SOURCE}\n\n# boost\nif [ ! -f \"${FLAG_DIR}/boost_1_57_0\" ] \\\n    || [ ! -d \"${DEPS_PREFIX}/boost_1_57_0/boost\" ]; then\n    if [ -e boost_1_57_0.tar.gz  ]; then\n        rm boost_1_57_0.tar.gz \n    fi \n    wget --no-check-certificate https://raw.githubusercontent.com/lylei9/boost_1_57_0/master/boost_1_57_0.tar.gz\n    tar zxf boost_1_57_0.tar.gz\n    rm -rf ${DEPS_PREFIX}/boost_1_57_0\n    mv boost_1_57_0 ${DEPS_PREFIX}/boost_1_57_0\n    touch \"${FLAG_DIR}/boost_1_57_0\"\nfi\n\n# protobuf\nif [ ! -f \"${FLAG_DIR}/protobuf_2_6_1\" ] \\\n    || [ ! -f \"${DEPS_PREFIX}/lib/libprotobuf.a\" ] \\\n    || [ ! -d \"${DEPS_PREFIX}/include/google/protobuf\" ]; then\n    cd protobuf-2.6.1\n    autoreconf -ivf\n    ./configure ${DEPS_CONFIG}\n    make -j4\n    make install\n    cd -\n    touch \"${FLAG_DIR}/protobuf_2_6_1\"\nfi\n\n#leveldb\nif [ ! -f \"${FLAG_DIR}/leveldb\" ] \\\n    || [ ! -f \"${DEPS_PREFIX}/lib/libleveldb.a\" ] \\\n    || [ ! -d \"${DEPS_PREFIX}/include/leveldb\" ]; then\n    rm -rf leveldb\n    git clone https://github.com/lylei/leveldb.git leveldb\n    cd leveldb\n    echo \"PREFIX=${DEPS_PREFIX}\" > config.mk\n    make -j4\n    make install\n    cd -\n    touch \"${FLAG_DIR}/leveldb\"\nfi\n\n# snappy\nif [ ! -f \"${FLAG_DIR}/snappy_1_1_1\" ] \\\n    || [ ! -f \"${DEPS_PREFIX}/lib/libsnappy.a\" ] \\\n    || [ ! -f \"${DEPS_PREFIX}/include/snappy.h\" ]; then\n    cd snappy-1.1.1\n    autoreconf -ivf\n    ./configure ${DEPS_CONFIG}\n    make -j4\n    make install\n    cd -\n    touch \"${FLAG_DIR}/snappy_1_1_1\"\nfi\n\n# sofa-pbrpc\nif [ ! -f \"${FLAG_DIR}/sofa-pbrpc\" ] \\\n    || [ ! -f \"${DEPS_PREFIX}/lib/libsofa-pbrpc.a\" ] \\\n    || [ ! -d \"${DEPS_PREFIX}/include/sofa/pbrpc\" ]; then\n    rm -rf sofa-pbrpc\n\n    git clone --depth=1 https://github.com/baidu/sofa-pbrpc.git sofa-pbrpc\n    cd sofa-pbrpc\n    sed -i '/BOOST_HEADER_DIR=/ d' depends.mk\n    sed -i '/PROTOBUF_DIR=/ d' depends.mk\n    sed -i '/SNAPPY_DIR=/ d' depends.mk\n    echo \"BOOST_HEADER_DIR=${DEPS_PREFIX}/boost_1_57_0\" >> depends.mk\n    echo \"PROTOBUF_DIR=${DEPS_PREFIX}\" >> depends.mk\n    echo \"SNAPPY_DIR=${DEPS_PREFIX}\" >> depends.mk\n    echo \"PREFIX=${DEPS_PREFIX}\" >> depends.mk\n    make -j4\n    make install\n    cd -\n    touch \"${FLAG_DIR}/sofa-pbrpc\"\nfi\n\n# cmake for gflags\nif ! which cmake ; then\n    cd CMake-3.2.1\n    ./configure --prefix=${DEPS_PREFIX}\n    make -j4\n    make install\n    cd -\nfi\n\n# gflags\nif [ ! -f \"${FLAG_DIR}/gflags_2_1_1\" ] \\\n    || [ ! -f \"${DEPS_PREFIX}/lib/libgflags.a\" ] \\\n    || [ ! -d \"${DEPS_PREFIX}/include/gflags\" ]; then\n    cd gflags-2.1.1\n    cmake -DCMAKE_INSTALL_PREFIX=${DEPS_PREFIX} -DGFLAGS_NAMESPACE=google -DCMAKE_CXX_FLAGS=-fPIC\n    make -j4\n    make install\n    cd -\n    touch \"${FLAG_DIR}/gflags_2_1_1\"\nfi\n\n# gtest\nif [ ! -f \"${FLAG_DIR}/gtest_1_7_0\" ] \\\n    || [ ! -f \"${DEPS_PREFIX}/lib/libgtest.a\" ] \\\n    || [ ! -d \"${DEPS_PREFIX}/include/gtest\" ]; then\n    cd gtest-1.7.0\n    ./configure ${DEPS_CONFIG}\n    make\n    cp -a lib/.libs/* ${DEPS_PREFIX}/lib\n    cp -a include/gtest ${DEPS_PREFIX}/include\n    cd -\n    touch \"${FLAG_DIR}/gtest_1_7_0\"\nfi\n\n# libunwind for gperftools\nif [ ! -f \"${FLAG_DIR}/libunwind_0_99\" ] \\\n    || [ ! -f \"${DEPS_PREFIX}/lib/libunwind.a\" ] \\\n    || [ ! -f \"${DEPS_PREFIX}/include/libunwind.h\" ]; then\n    cd libunwind-0.99\n    ./configure ${DEPS_CONFIG}\n    make CFLAGS=-fPIC -j4\n    make CFLAGS=-fPIC install\n    cd -\n    touch \"${FLAG_DIR}/libunwind_0_99\"\nfi\n\n# gperftools (tcmalloc)\nif [ ! -f \"${FLAG_DIR}/gperftools_2_2_1\" ] \\\n    || [ ! -f \"${DEPS_PREFIX}/lib/libtcmalloc_minimal.a\" ]; then\n    cd gperftools-2.2.1\n    ./configure ${DEPS_CONFIG} CPPFLAGS=-I${DEPS_PREFIX}/include LDFLAGS=-L${DEPS_PREFIX}/lib\n    make -j4\n    make install\n    cd -\n    touch \"${FLAG_DIR}/gperftools_2_2_1\"\nfi\n\n# test c++11\nset +e\nif test -z \"$CXX\"; then\n    CXX=g++\nfi\n\n$CXX --std=c++11 -x c++ - -o teststd.out 2>/dev/null <<EOF\nint main() {}\nEOF\n\nif [ \"$?\" = 0 ]; then\n    STD_FLAG=c++11\nfi\nrm -rf teststd.out\nset -e\n\n# common\nif [ ! -f \"${FLAG_DIR}/common\" ] \\\n    || [ ! -f \"${DEPS_PREFIX}/lib/libcommon.a\" ]; then\n    rm -rf common\n    git clone -b cpp11 https://github.com/baidu/common\n    cd common\n    sed -i 's/^PREFIX=.*/PREFIX=..\\/..\\/thirdparty/' config.mk\n    if test -z \"$STD_FLAG\"; then\n        sed -i 's/-std=c++11/-std=c++0x/g' Makefile\n    fi\n    make -j4\n    make install\n    cd -\n    touch \"${FLAG_DIR}/common\"\nfi\n\n\ncd ${WORK_DIR}\n\n########################################\n# config depengs.mk\n########################################\n\necho \"PBRPC_PATH=./thirdparty\" > depends.mk\necho \"PROTOBUF_PATH=./thirdparty\" >> depends.mk\necho \"PROTOC_PATH=./thirdparty/bin/\" >> depends.mk\necho 'PROTOC=$(PROTOC_PATH)protoc' >> depends.mk\necho \"PBRPC_PATH=./thirdparty\" >> depends.mk\necho \"BOOST_PATH=./thirdparty/boost_1_57_0\" >> depends.mk\necho \"GFLAG_PATH=./thirdparty\" >> depends.mk\necho \"GTEST_PATH=./thirdparty\" >> depends.mk\necho \"COMMON_PATH=./thirdparty\" >> depends.mk\necho \"TCMALLOC_PATH=./thirdparty\" >> depends.mk\n\nif test -z \"$STD_FLAG\"; then\n    echo \"STD_FLAG=c++0x\" >> depends.mk\nelse\n    echo \"STD_FLAG=c++11\" >> depends.mk\nfi\n\n########################################\n# build tera\n########################################\n\nmake clean\nmake -j4\n\n"
        },
        {
          "name": "build_version.sh",
          "type": "blob",
          "size": 1.8330078125,
          "content": "#!/usr/bin/env bash\n\nBUILD_DATE_TIME=`date`\nBUILD_HOSTNAME=`hostname`\nBUILD_GCC_VERSION=`gcc --version | head -n 1`\n\ngen_info_template_header ()\n{\n    echo \"// Generated by the build_version.sh.  DO NOT EDIT!\"\n    echo \" \"\n    echo \"#include <iostream>\"\n    echo \"#include \\\"version.h\\\"\"\n    echo \"const char kGitInfo[] = \\\"\\\\\"\n}\n\n\ngen_info_template_foot ()\n{\n    echo \"\\\";\"\n    echo \"const char kBuildTime[] = \\\"$BUILD_DATE_TIME\\\";\"\n    echo \"const char kBuilderName[] = \\\"$USER\\\";\"\n    echo \"const char kHostName[] = \\\"$BUILD_HOSTNAME\\\";\"\n}\n\ngen_info_print_template ()\n{\n    echo \"void PrintSystemVersion() {\"\n    echo \"    std::cout << \\\"Baidu File System v\\\" << kMajorVersion << \\\".\\\" << kMinorVersion << \\\".\\\" << kRevision << std::endl;\"\n    echo \"    std::cout << \\\"=====  Git Info ===== \\\" << std::endl;\"\n    echo \"    std::cout << kGitInfo << std::endl;\"\n    echo \"    std::cout << \\\"=====  Build Info ===== \\\" << std::endl;\"\n    echo \"    std::cout << \\\"Build Time: \\\" << kBuildTime << std::endl;\"\n    echo \"    std::cout << \\\"Builder Name: \\\" << kBuilderName << std::endl;\"\n    echo \"    std::cout << \\\"Build Host Name: \\\" << kHostName << std::endl;\"\n    echo \"    std::cout << \\\"Build Compiler: \\\" << kCompiler << std::endl;\"\n    echo \"    std::cout << std::endl;\"\n    echo \"};\"\n}\n\nTEMPLATE_HEADER_FILE=template_header.tmp\nTEMPLATE_FOOT_FILE=template_foot.tmp\nGIT_INFO_FILE=git_info.tmp\nVERSION_CPP_FILE=src/version.cc\n\n# generate template file\ngit remote -v | sed 's/$/&\\\\n\\\\/g' > $GIT_INFO_FILE\ngit log | head -n 3 | sed 's/$/&\\\\n\\\\/g' >> $GIT_INFO_FILE\ngen_info_template_header > $TEMPLATE_HEADER_FILE\ngen_info_template_foot > $TEMPLATE_FOOT_FILE\ngen_info_print_template >> $TEMPLATE_FOOT_FILE\n\n# generate version cpp\ncat $TEMPLATE_HEADER_FILE $GIT_INFO_FILE $TEMPLATE_FOOT_FILE > $VERSION_CPP_FILE\nrm -rf $TEMPLATE_HEADER_FILE $GIT_INFO_FILE $TEMPLATE_FOOT_FILE\n"
        },
        {
          "name": "cluster",
          "type": "tree",
          "content": null
        },
        {
          "name": "dockerfile",
          "type": "blob",
          "size": 0.53515625,
          "content": "FROM centos:latest\nMAINTAINER ystyle \"lxy5266@live.com\"\nRUN yum -y groupinstall 'Development Tools' && yum -y install zlib-devel wget fuse-devel git psmisc &&\\\n    cd / && git clone https://github.com/baidu/bfs.git &&\\\n    # sed -i '4a FUSE_PATH=/usr/include/fuse/' /bfs/Makefile &&\\\n    cd /bfs && ./build.sh && cd sandbox && ./deploy.sh &&\\\n    yum -y groupremove 'Development Tools' && yum clean all &&\\\n    cd ../ && rm -rf thirdparty thirdsrc .build .git src\nEXPOSE 8827 8828 8829\nWORKDIR /bfs/sandbox/\nCMD ./start_bfs.sh && tail -f /dev/null\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "ft_test.sh",
          "type": "blob",
          "size": 0.31640625,
          "content": "#!/usr/bin/env bash\nset -x\nset -o pipefail\nexport PS4='+{$LINENO `date \"+%Y-%m-%d_%H:%M:%S\"` :${FUNCNAME[0]}}    '\ncur=`dirname \"${0}\"`\ncd \"${cur}\"\ncur=`pwd`\nset -e\n\nmake install;\nmake test; cd sandbox; bash clear.sh; bash deploy.sh; bash start_bfs.sh;\ncd ../tera; make clean; make; ./bfs_test; cd ../sandbox; bash clear.sh\n"
        },
        {
          "name": "fuse",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuse_lowlevel",
          "type": "tree",
          "content": null
        },
        {
          "name": "internal_build.sh",
          "type": "blob",
          "size": 5.279296875,
          "content": "#!/usr/bin/env bash\nset -x\n\n########################################\n# download & build depend software\n########################################\n\nWORK_DIR=`pwd`\nDEPS_SOURCE=${WORK_DIR}/thirdsrc\nDEPS_PREFIX=${WORK_DIR}/thirdparty\nDEPS_CONFIG=\"--prefix=${DEPS_PREFIX} --disable-shared --with-pic\"\nFLAG_DIR=${WORK_DIR}/.build\n\nexport PATH=${DEPS_PREFIX}/bin:$PATH\nmkdir -p ${DEPS_SOURCE} ${DEPS_PREFIX} ${FLAG_DIR}\n\nif [ ! -f \"${FLAG_DIR}/dl_third\" ] || [ ! -d \"${DEPS_SOURCE}/.git\" ]; then\n    rm -rf ${DEPS_SOURCE}\n    git clone --depth=1 http://gitlab.baidu.com/baidups/third.git ${DEPS_SOURCE}\n    touch \"${FLAG_DIR}/dl_third\"\nfi\n\ncd ${DEPS_SOURCE}\n\n# boost\nif [ ! -f \"${FLAG_DIR}/boost_1_57_0\" ] \\\n    || [ ! -d \"${DEPS_PREFIX}/boost_1_57_0/boost\" ]; then\n    tar zxf boost_1_57_0.tar.gz\n    rm -rf ${DEPS_PREFIX}/boost_1_57_0\n    mv boost_1_57_0 ${DEPS_PREFIX}\n    touch \"${FLAG_DIR}/boost_1_57_0\"\nfi\n\n# protobuf\nif [ ! -f \"${FLAG_DIR}/protobuf_2_6_1\" ] \\\n    || [ ! -f \"${DEPS_PREFIX}/lib/libprotobuf.a\" ] \\\n    || [ ! -d \"${DEPS_PREFIX}/include/google/protobuf\" ]; then\n    tar zxf protobuf-2.6.1.tar.gz\n    cd protobuf-2.6.1\n    ./configure ${DEPS_CONFIG}\n    make -j4\n    make install\n    cd -\n    touch \"${FLAG_DIR}/protobuf_2_6_1\"\nfi\n\n#leveldb\nif [ ! -f \"${FLAG_DIR}/leveldb\" ] \\\n    || [ ! -f \"${DEPS_PREFIX}/lib/libleveldb.a\" ] \\\n    || [ ! -d \"${DEPS_PREFIX}/include/leveldb\" ]; then\n    rm -rf leveldb\n    git clone https://github.com/lylei/leveldb.git leveldb\n    cd leveldb\n    echo \"PREFIX=${DEPS_PREFIX}\" > config.mk\n    make -j4\n    make install\n    cd -\n    touch \"${FLAG_DIR}/leveldb\"\nfi\n\n# snappy\nif [ ! -f \"${FLAG_DIR}/snappy_1_1_1\" ] \\\n    || [ ! -f \"${DEPS_PREFIX}/lib/libsnappy.a\" ] \\\n    || [ ! -f \"${DEPS_PREFIX}/include/snappy.h\" ]; then\n    tar zxf snappy-1.1.1.tar.gz\n    cd snappy-1.1.1\n    ./configure ${DEPS_CONFIG}\n    make -j4\n    make install\n    cd -\n    touch \"${FLAG_DIR}/snappy_1_1_1\"\nfi\n\n# sofa-pbrpc\nif [ ! -f \"${FLAG_DIR}/sofa-pbrpc_1_0_0\" ] \\\n    || [ ! -f \"${DEPS_PREFIX}/lib/libsofa-pbrpc.a\" ] \\\n    || [ ! -d \"${DEPS_PREFIX}/include/sofa/pbrpc\" ]; then\n    rm -rf sofa-pbrpc\n#    git clone --depth=1 https://github.com/cyshi/sofa-pbrpc.git sofa-pbrpc\n    git clone --depth=1 https://github.com/baidu/sofa-pbrpc.git sofa-pbrpc\n    cd sofa-pbrpc\n    sed -i '/BOOST_HEADER_DIR=/ d' depends.mk\n    sed -i '/PROTOBUF_DIR=/ d' depends.mk\n    sed -i '/SNAPPY_DIR=/ d' depends.mk\n    echo \"BOOST_HEADER_DIR=${DEPS_PREFIX}/boost_1_57_0\" >> depends.mk\n    echo \"PROTOBUF_DIR=${DEPS_PREFIX}\" >> depends.mk\n    echo \"SNAPPY_DIR=${DEPS_PREFIX}\" >> depends.mk\n    echo \"PREFIX=${DEPS_PREFIX}\" >> depends.mk\n    make -j4\n    make install\n    cd -\n    touch \"${FLAG_DIR}/sofa-pbrpc_1_0_0\"\nfi\n\n# cmake for gflags\nif ! which cmake ; then\n    tar zxf CMake-3.2.1.tar.gz\n    cd CMake-3.2.1\n    ./configure --prefix=${DEPS_PREFIX}\n    make -j4\n    make install\n    cd -\nfi\n\n# gflags\nif [ ! -f \"${FLAG_DIR}/gflags_2_1_1\" ] \\\n    || [ ! -f \"${DEPS_PREFIX}/lib/libgflags.a\" ] \\\n    || [ ! -d \"${DEPS_PREFIX}/include/gflags\" ]; then\n    tar zxf gflags-2.1.1.tar.gz\n    cd gflags-2.1.1\n    cmake -DCMAKE_INSTALL_PREFIX=${DEPS_PREFIX} -DGFLAGS_NAMESPACE=google -DCMAKE_CXX_FLAGS=-fPIC\n    make -j4\n    make install\n    cd -\n    touch \"${FLAG_DIR}/gflags_2_1_1\"\nfi\n\n# gtest\nif [ ! -f \"${FLAG_DIR}/gtest_1_7_0\" ] \\\n    || [ ! -f \"${DEPS_PREFIX}/lib/libgtest.a\" ] \\\n    || [ ! -d \"${DEPS_PREFIX}/include/gtest\" ]; then\n    unzip gtest-1.7.0.zip\n    cd gtest-1.7.0\n    ./configure ${DEPS_CONFIG}\n    make\n    cp -a lib/.libs/* ${DEPS_PREFIX}/lib\n    cp -a include/gtest ${DEPS_PREFIX}/include\n    cd -\n    touch \"${FLAG_DIR}/gtest_1_7_0\"\nfi\n\n# libunwind for gperftools\nif [ ! -f \"${FLAG_DIR}/libunwind_0_99_beta\" ] \\\n    || [ ! -f \"${DEPS_PREFIX}/lib/libunwind.a\" ] \\\n    || [ ! -f \"${DEPS_PREFIX}/include/libunwind.h\" ]; then\n    tar zxf libunwind-0.99-beta.tar.gz\n    cd libunwind-0.99-beta\n    ./configure ${DEPS_CONFIG}\n    make CFLAGS=-fPIC -j4\n    make CFLAGS=-fPIC install\n    cd -\n    touch \"${FLAG_DIR}/libunwind_0_99_beta\"\nfi\n\n# gperftools (tcmalloc)\nif [ ! -f \"${FLAG_DIR}/gperftools_2_2_1\" ] \\\n    || [ ! -f \"${DEPS_PREFIX}/lib/libtcmalloc_minimal.a\" ]; then\n    tar zxf gperftools-2.2.1.tar.gz\n    cd gperftools-2.2.1\n    ./configure ${DEPS_CONFIG} CPPFLAGS=-I${DEPS_PREFIX}/include LDFLAGS=-L${DEPS_PREFIX}/lib\n    make -j4\n    make install\n    cd -\n    touch \"${FLAG_DIR}/gperftools_2_2_1\"\nfi\n\n# common\nif [ ! -f \"${FLAG_DIR}/common\" ] \\\n    || [ ! -f \"${DEPS_PREFIX}/lib/libcommon.a\" ]; then\n    rm -rf common\n    git clone -b cpp11 https://github.com/baidu/common\n    cd common\n    sed -i 's/^PREFIX=.*/PREFIX=..\\/..\\/thirdparty/' config.mk\n    make -j4\n    make install\n    cd -\n    touch \"${FLAG_DIR}/common\"\nfi\n\n\ncd ${WORK_DIR}\n\n########################################\n# config depengs.mk\n########################################\n\necho \"PBRPC_PATH=./thirdparty\" > depends.mk\necho \"PROTOBUF_PATH=./thirdparty\" >> depends.mk\necho \"PROTOC_PATH=./thirdparty/bin/\" >> depends.mk\necho 'PROTOC=$(PROTOC_PATH)protoc' >> depends.mk\necho \"PBRPC_PATH=./thirdparty\" >> depends.mk\necho \"GFLAG_PATH=./thirdparty\" >> depends.mk\necho \"GTEST_PATH=./thirdparty\" >> depends.mk\necho \"COMMON_PATH=./thirdparty\" >> depends.mk\necho \"TCMALLOC_PATH=./thirdparty\" >> depends.mk\n\n########################################\n# build bfs\n########################################\n\nmake clean\nmake -j4\n\n"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "sandbox",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tera",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}