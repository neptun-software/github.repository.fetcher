{
  "metadata": {
    "timestamp": 1736565850957,
    "page": 796,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "AcademySoftwareFoundation/OpenShadingLanguage",
      "stars": 2133,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 3.9609375,
          "content": "# Copyright Contributors to the Open Shading Language project.\n# SPDX-License-Identifier: BSD-3-Clause\n# https://github.com/AcademySoftwareFoundation/OpenShadingLanguage\n\nLanguage:        Cpp\nBasedOnStyle:  WebKit\n\nAccessModifierOffset: -4\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: true\nAlignConsecutiveDeclarations: false\nAlignConsecutiveMacros: true\nAlignEscapedNewlines: Left\nAlignOperands:   true\nAlignTrailingComments: true\nAllowAllArgumentsOnNextLine: true\nAllowAllConstructorInitializersOnNextLine: true\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: true\nAllowShortCaseLabelsOnASingleLine: true\nAllowShortFunctionsOnASingleLine: Inline\nAllowShortLambdasOnASingleLine: All\nAllowShortIfStatementsOnASingleLine: Never\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: TopLevel\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: MultiLine\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:   \n  AfterCaseLabel:  false\n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   true\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  AfterExternBlock: false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\n  SplitEmptyFunction: false\n  SplitEmptyRecord: false\n  SplitEmptyNamespace: false\nBreakBeforeBinaryOperators: All\nBreakBeforeBraces: WebKit\nBreakBeforeInheritanceComma: false\nBreakInheritanceList: BeforeColon\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: BeforeComma\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: false\nColumnLimit:     80\nCommentPragmas:  '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: false\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nForEachMacros:   \n  - foreach\n  - Q_FOREACH\n  - BOOST_FOREACH\nIncludeBlocks:   Preserve\nIncludeCategories: \n  - Regex:           '^\"(llvm|llvm-c|clang|clang-c)/'\n    Priority:        2\n  - Regex:           '^(<|\"(gtest|gmock|isl|json)/)'\n    Priority:        3\n  - Regex:           '<[[:alnum:].]+>'\n    Priority:        4\n  - Regex:           '\"[[:alnum:].]+\"'\n    Priority:        5\n  - Regex:           '.*'\n    Priority:        1\nIncludeIsMainRegex: '(Test)?$'\nIndentCaseLabels: false\nIndentExternBlock: NoIndent\nIndentPPDirectives: AfterHash\nIndentWidth:     4\nIndentWrappedFunctionNames: false\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: false\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 3\nNamespaceIndentation: None\n#NamespaceIndentation: Inner\nObjCBinPackProtocolList: Auto\nObjCBlockIndentWidth: 4\nObjCSpaceAfterProperty: true\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakAssignment: 40\nPenaltyBreakBeforeFirstCallParameter: 100\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 75\nPenaltyReturnTypeOnItsOwnLine: 50\nPointerAlignment: Left\nReflowComments:  false\nSortIncludes:    true\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: false\nSpaceAfterLogicalNot: false\nSpaceAfterTemplateKeyword: false\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCpp11BracedList: true\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: ControlStatements\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceInEmptyBlock: false\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 2\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        c++14\nStatementMacros: \n  - Q_UNUSED\n  - QT_REQUIRE_VERSION\nTabWidth:        8\nUseTab:          Never\n#...\n\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 1.5244140625,
          "content": "# Start using clang-format on OSL code base (#1215)\n630b4c042d696c94ec9b2a1b6f5adc250bd61e05\n\n# More clang-format (#1218)\nbdb473cbdb119f3d9060d48f75f965cbd45f6d7a\n\n# More clang-format: liboslquery, oslinfo, oslc, osl.imageio, osltoy (#1220)\nbf366d7a90c46599b82071dac6dbef7c5e3ca157\n\n# Turn on clang-format for cpp files in testsuite (#1269)\n00c895fc642eb89685797c292048bdff15d675e7\n5e848fb761261521a3ee7cd8a4f6814f32fe4a47\n\n# CI: Change our clang-format standard to clang11 (#1372)\n91d22ebe2f65d4ed0599e421172a15d99fe0e1b4\n\n# More clang-format (this time, testrender and liboslnoise) (#1511)\n08706b7cbac781b6a9389780428016be985d9d89\n\n# clang-format #1509\nb4026fd1695c08532557b3ba1c2142323087ccf9\n1f73b075c99861afa42fac44567b37f797bc72f2\n7f2e83794e6fa63d5180653cffb77be2cc38b32b\n28399fefc890442b5ac020e7a90cee0d5bf9f03c\ne56851056d33233b0bb8324faac251907099961a\n1c57fc61d8ab7c3f309be4335e4c71c26399edd4\n46d451ce74d00e904874df476ebeca19bb119ea9\nc1045f2c2845a98e661c7181932a031eb3c76063\n\n# More clang-format (#1512)\n8c6ffdd911b9eb7db4adf41ab88891360452d7c5\n\n# style: more clang-format (#1515)\n102430c83554fe7e328cd8c3317db00507bcfaba\n\n# Revert some formatting (#1518)\n21eac9d9215d071b0a7b9ce2c32f189ed0c62c4a\n\n# Another round of clang-format (#1540)\n38015b6be28643254aea530154b7860136cf5e15\n89d5db2b5c5fda79184d8245d903e580fc6a4e9c\n\n# clang-format: the very last piece of the puzzle (#1555)\n4ee62cd2ef05543f818f4d95a19efc1d684a7381\n5be7c6bd4e7bd2e560cb6be8c06f11985384a87a\n\n# Raise CI formatting standard to clang-format 17\na9ce35135e6c022d538a4a184fee1b5ce908aed8\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.22265625,
          "content": "# Copyright Contributors to the Open Shading Language project.\n# SPDX-License-Identifier: BSD-3-Clause\n# https://github.com/AcademySoftwareFoundation/OpenShadingLanguage\n\ndist\nbuild\n*~\n\\#*\\#\n*.pyc\n*.log\n.vscode\n.envrc\n.DS_Store\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 2.943359375,
          "content": "# This file establishes email equivalences so we can resolve what look like\n# multiple authors, but actually are the same author who has used multiple\n# emails over the course of their involvement with the project.\n#\n# The format is any of the following:\n#     <CANONICAL-EMAIL> <alternate-email>\n#     CANONICAL-NAME <CANONICAL-EMAIL> <alternate-email>\n#     CANONICAL-NAME <CANONICAL-EMAIL> alternate-name <alternate-email>\n#\n# You can check for duplicates with this command:\n#     git shortlog -sne --all\n# That command (and others) will use this file to collapse the duplicates.\n#\n# If you see any duplicates we don't account for here, or if you look at your\n# own entry here and want a different name or email to be your canonical one\n# (we may not have guessed correctly and matched your preferences), please\n# file a PR with the edits to this file.\n\nAdam Martinez <amartinez.cg@gmail.com> amartinez-cg <amartinez.cg@gmail.com>\nAlejandro Conty <aconty@imageworks.com> aconty <aconty@gmail.com>\nAlejandro Conty <aconty@imageworks.com> Alejandro Conty <aconty@gmail.com>\nAlex M. Wells <alex.m.wells@intel.com> <alex.m.wells@intel.com>\nAlex M. Wells <alex.m.wells@intel.com> <AlexMWells@users.noreply.github.com>\nAlex M. Wells <alex.m.wells@intel.com> <awells-np@argon.sea.pixar.com>\nAlexis Oblet <alob@mikrosimage.eu> Alexis Oblet <aoblet@users.noreply.github.com>\nBrecht Van Lommel <brecht@blender.org> <brecht@solidangle.com>\nBrecht Van Lommel <brecht@blender.org> Brecht Van Lommel <brechtvanlommel@gmail.com>\nChris Kulla <ckulla@gmail.com> <ckulla@imageworks.com>\nChris Kulla <ckulla@gmail.com> <fpsunflower@users.noreply.github.com>\nChris Kulla <ckulla@gmail.com> Christopher Kulla <ckulla@gmail.com>\nChris Kulla <ckulla@gmail.com> fpsunflower <ckulla@gmail.com>\nClifford Stein <cstein@imageworks.com> Cliff Stein <clifford.stein@gmail.com> \nClifford Stein <cstein@imageworks.com> cmstein <cstein@imageworks.com> \nDeclan Russell <declan.russell@autodesk.com> Declan Russell <i7709212@bournemouth.ac.uk>\nDerek Haase <derekhaase@gmail.com> Derek Haase <dhaase@imageworks.com>\nEsteban Tovagliari <ramenhdr@gmail.com> est77 <ramenhdr@gmail.com>\nHenri Fousse <henri.fousse@free.fr> darkhorse64 <henri.fousse@free.fr>\nLarry Gritz <lg@imageworks.com> <larrygritz@gmail.com>\nLarry Gritz <lg@imageworks.com> <lg@larrygritz.com>\nRoman Zulak <marsupial@users.noreply.github.com> <rzulak@imageworks.com>\nRoman Zulak <marsupial@users.noreply.github.com> Frederich Munch <marsupial@users.noreply.github.com>\nRoman Zulak <marsupial@users.noreply.github.com> marsupial <marsupial@users.noreply.github.com>\nRonan Keryell <Ronan.Keryell@amd.com> Ronan Keryell <Ronan.Keryell@silkan.com>\nSteena Monteiro <steena.monteiro@intel.com> steena.monteiro <smonteir@ortce-sklaw.jf.intel.com>\nSven-Hendrik Haase <sh@lutzhaase.com> Sven-Hendrik Haase <svenstaro@gmail.com>\nTim Grant <tgrant@nvidia.com> Tim Grant <87798327+tgrant-nv@users.noreply.github.com>\nTim Grant <tgrant@nvidia.com> timgrant <timgrant@users.noreply.github.com>\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.583984375,
          "content": "# .readthedocs.yml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the OS, Python version and other tools you might need\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.11\"\n\n\n# Build documentation with Sphinx\nsphinx:\n  configuration: src/doc/conf.py\n\n\n# Optionally build your docs in additional formats such as PDF and ePub\nformats:\n  - pdf\n  - htmlzip\n\n\n# Optionally set the version of Python and requirements required to build your docs\npython:\n  install:\n    - requirements: src/doc/requirements.txt\n"
        },
        {
          "name": "ASWF",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGES.md",
          "type": "blob",
          "size": 206.6396484375,
          "content": "<!-- SPDX-License-Identifier: CC-BY-4.0 -->\n<!-- Copyright Contributors to the Open Shading Language Project. -->\n\nRelease 1.14 -- in progress (compared to 1.13)\n-------------------------------------------------------------\n### New minimum dependencies and compatibility changes:\n\n  - *C++*: Raise C++ standard to 17 (from 14), gcc min to 9.3 (from 6.3), clang min to 5.0 [#1847](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1847) (1.14.2.0)\n  - *Python*: Raise Python minimum to 3.7 (from 2.7), pybind11 to 2.7 (from 2.4) [#1855](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1855) (1.14.2.0)\n  - *Imath*: Raise Imath minimum to 3.1 (from 2.4) [#1853](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1853) (1.14.2.0)\n\n\n### OSL Language, standard library, and oslc compiler (for shader writers):\n  - Fix the subsurface_bssrdf parameters to conform to MaterialX. [#1823](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1823) (by Christopher Kulla) (1.14.1.0)\n\n\n### ⛰️  API changes and new ShadingSystem features (for renderer writers):\n* The big switch to `ustringhash`: To better accommodate GPU execution, and to\n  make the code and techniques less divergent between CPU and GPU code paths,\n  we have changed the runtime representation of strings from `ustring` to\n  `ustringhash` -- which is still a 64 bit token, but rather than the address\n  of the unique characters, which may change from run to run and harm the\n  OptiX/CUDA PTX cache performance, it is the deterministic hash of the\n  characters. Thus, not just the runtime, but all of the interfaces of\n  RendererServices and other APIs that the renderers use to set up and\n  communicate with the ShadingSystem, now have been changed to expect\n  ustringhash instead of ustring.\n  [#1732](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1732) (by Steena Monteiro) (1.14.0.0)\n* Add API for building interpolated getter free functions.\n  [#1765](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1765) (by Thibault Vergne) (1.14.0.0)\n* Switch `shade_image()` to use current OIIO::paropt [#1843](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1843) (1.14.1.1)\n\n\n### 🚀  SIMD batched shading mode\n  - Codegen bug for compref with varying index [#1776](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1776) (by Alex Wells) (1.14.1.0)\n  - Add support for b4_SSE2 batched mode. [#1825](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1825) (by johnfea) (1.14.2.0)\n  - *fix*: Assume BatchedRendererServices texture derivatives are in st space. [#1828](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1828) (by sfriedmapixar) (1.14.2.0)\n\n\n### 🚀  OptiX GPU rendering\n  - Fix NVPTX TargetMachine leak, etc. [#1763](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1763) (by Tim Grant) (1.14.0.0)\n  - Fix GPU interpolated param initialization [#1791](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1791) (by Chris Hellmuth) (1.14.1.0)\n  - Add `lazytrace` ShadingSystem option to avoid combinatoric optixTrace\n    inlining: when enabled, run layers with trace ops unconditionally at the\n    start of shader evaluation. This costs some potential performance in cases\n    where the trace layer would never be evaluated, but removes all the\n    compilation penalties that the inlining was presenting.\n    [#1815](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1815) (by Chris Hellmuth) (1.14.1.0)\n  - Mock gpu pointcloud_search calls with empty custom attributes [#1859](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1859) (by Chris Hellmuth) (1.14.2.0)\n\n\n### 🐛/🔧  Internals: fixes, improvements, and developer concerns\n  - Mute partio error prints [#1774](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1774) (by olegul) (1.14.1.0)\n  - calculatenormal needs to use the fliphandedness global [#1783](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1783) (by sfriedmapixar) (1.14.1.0)\n  - Print closure missing error message at compile time instead of run time.  [#1781](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1781) (by sfriedmapixar) (1.14.1.0)\n  - Make isconnected() work with downstream renderer \"connections.\" [#1782](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1782) (by sfriedmapixar) (1.14.1.0)\n  - *int*: Change OSL_CONSTEXPR14 to constexpr [#1805](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1805) (1.14.1.0)\n  - Remove unnecessary ustring lookup [#1824](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1824) (by Chris Hellmuth) (1.14.1.0)\n  - Make backfacing shadeop indicate backfacing shader-global is needed [#1827](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1827) (by sfriedmapixar) (1.14.1.0)\n  - Reparameter string needed to be ustringhash [#1841](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1841) (by Chris Hellmuth) (1.14.1.0)\n  - Some modernization of osl.imageio [#1840](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1840) (1.14.1.1)\n\n\n### 🏗  Build/test/CI and platform ports\n\n* CMake build system and scripts:\n  - *build*: Add options to use static Cuda libraries (controlled by\n    CMake variable `CUDA_PREFER_STATIC_LIBS`) [#1772](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1772) (1.14.1.0)\n  - *build*: Remove a lot of old SPI build cruft [#1778](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1778) (1.14.1.0)\n  - Simplify oslquery library include and link needs [#1787](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1787) (1.14.1.0)\n  - Propagate cpp version: when building against an OIIO that needs C++17,\n    OSL will need to be build with C++17, too. [#1797](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1797) (1.14.1.0)\n  - Eliminate boost as a dependency: [#1802](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1802) (by Christopher Kulla) (1.14.1.0) [#1808](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1808) (by Christopher Kulla) (1.14.1.0)\n  - Default to C++17 mode (but for now, C++14 is still supported by\n    setting `CMAKE_CXX_STANDARD`). [#1818](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1818) (1.14.1.0)\n  - CMake: replace deprecated add_definitions with preferred add_compile_definitions [#1821](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1821) (1.14.2.0)\n  - Port set_utils and dependency_utils from oiio cmake scripts [#1845](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1845) (1.14.2.0)\n* Dependency version support:\n  - Support for LLVM 18. [#1773](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1773) (by مهدي شينون (Mehdi Chinoune)) (1.14.1.0)\n    [#1803](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1803) (1.14.1.0)\n  - LLVM 18 compat issue - include libclangAPINotes [#1812](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1812) (1.14.1.1)\n  - Various fixes to deal with deprecations in the development branch and\n    upcoming 3.0 release of OpenImageIO:\n    [#1788](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1788) (1.14.1.0), [#1806](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1806) (1.14.1.0), [#1834](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1834) (1.14.1.0), [#1838](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1838) (1.14.1.0), [#1842](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1842) (1.14.1.1), [#1844](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1844) (1.14.1.1)\n  - *Use new OIIO ustringhash decode methods when available [#1792](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1792) (by Chris Hellmuth) (1.14.1.0)\n  - Adjust to OIIO change to IC/TS API [#1848](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1848) [#1850](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1850) (1.14.2.0)\n* Testing and Continuous integration (CI) systems:\n  - *testrender*: Fix testrender GPU regression with bad destruction order [#1814](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1814) (1.14.1.0)\n  - *testrender*: Implement new Oren-Nayar model from OpenPBR [#1817](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1817) (by Christopher Kulla) (1.14.1.0)\n  - *testrender*: Implement OpenPBR's sheen BRDF [#1819](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1819) (by Christopher Kulla) (1.14.1.0)\n  - *tests*: Update ref output for OptiX execution order variance [#1816](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1816) (1.14.1.0)\n  - *ci*: Test against LLVM 17 [#1760](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1760) (1.14.0.0)\n  - *ci*: Increase timeout for slow MacOS-13 runner [#1775](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1775) (1.14.1.0)\n  - *ci*: Fix broken Macos-13 CI [#1780](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1780) (1.14.1.0)\n  - *ci*: Allow triggering CI workflow from web [#1779](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1779) (1.14.1.0)\n  - *ci*: Lock down to OIIO 2.5 for icc tests [#1799](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1799) (1.14.1.0)\n  - *ci*: Print commit hash of locally built dependencies [#1798](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1798) (1.14.1.0)\n  - *ci*: Suppress leak sanitizer warnings about internals of robin_hash [#1807](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1807) (1.14.1.0)\n  - *ci*: Mods to CI to deal with OIIO master raising dependency mins [#1833](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1833) (1.14.1.0)\n  - *ci*: Fix GHA CI after they upgraded nodejs [#1837](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1837) (1.14.1.0)\n  - *ci*: Deal with CentOS 7 EOL and disappearance of yum mirrors [#1839](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1839) (1.14.1.0)\n  - *ci*: Unbreak CI for OIIO auto-build of OCIO for icx case [#1849](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1849) (1.14.2.0)\n  - *ci*: Add VFX Platform 2024 to CI [#1854](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1854) (1.14.2.0)\n* Platform support:\n  - *Mac ARM*: Test with Mac ARM runner [#1770](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1770) (1.14.1.0)\n  - *Mac ARM*: Make finding bison work better on Apple Silicon Macs + homebrew\n    [#1822](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1822) (1.14.1.1)\n\n### 📚  Documentation\n  - Fix links to RTD docs from github landing page [#1768](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1768) (1.14.0.0)\n  - Clarify behavior of `round()`: OSL uses \"round away from zero\" policy for\n    input values exactly half way between two integers, matching C/C++\n    standard round(). But we were not clear about it in the docs.\n    [#1767](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1767) (1.14.1.0)\n  - More detail about supported platforms in INSTALL.md [#1796](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1796) (1.14.1.0)\n  - Fix outdated or wrong repo URLs [#1811](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1811) (1.14.1.0)\n  - Fixes to documentation of new oren_nayar_diffuse_bsdf parameters [#1820](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1820) (1.14.1.0)\n\n### 🏢  Project Administration\n  - Account for duplicate emails in the .mailmap [#1759](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1759) (1.14.0.0)\n  - Releases trigger automatic announcements to the Slack channel.\n    [#1766](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1766) [#1777](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1777) (by John Mertic) (1.14.1.0)\n  - Raise our code formatting standard to clang-format 17 [#1761](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1761) (1.14.0.0)\n\n\n\n\n\nRelease 1.13.10.0 -- 1 June 2024 (compared to 1.13.9.0)\n--------------------------------------------------------\n  - *testrender*: Implement new Oren-Nayar model from OpenPBR [#1817](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1817) (by Christopher Kulla)\n  - *docs*: Fix outdated or wrong repo URLs [#1811](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1811)\n\n\nRelease 1.13.9.0 -- 1 May 2024 (compared to 1.13.8.0)\n--------------------------------------------------------\n  - *deps*: Support for LLVM-18 [#1773](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1773) (by مهدي شينون (Mehdi Chinoune) [#1803](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1803) (by Larry Gritz)\n  - *fix*: Make isconnected() work with downstream renderer \"connections.\" [#1782](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1782) (by sfriedmapixar)\n  - *cleanup*: Change OSL_CONSTEXPR14 to constexpr [#1805](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1805)\n  - *internals build*: Fix ifdef typo [#1804](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1804)\n  - *build*: Propagate cpp version [#1797](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1797)\n  - *build*: Print commit hash of locally built dependencies [#1798](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1798)\n  - *ci*: Lock down to OIIO 2.5 for icc tests [#1799](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1799)\n  - *ci*: Suppress leak sanitizer warnings about internals of robin_hash [#1807](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1807)\n  - *docs*: More detail about supported platforms in INSTALL.md [#1796](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1796)\n\n\nRelease 1.13.8.0 -- 1 Apr 2024 (compared to 1.13.7.0)\n--------------------------------------------------------\n* *fix(batched)*: Codegen bug for compref with varying index for batched shading [#1776](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1776) (by Alex Wells)\n* *fix*: Calculatenormal needs fliphandedness [#1783](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1783) (by sfriedmapixar)\n* *fix*: Print closure missing error message at compile time instead of run time.  [#1781](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1781) (by sfriedmapixar)\n* *int*: Change long-deprecated OIIO macro to new one [#1788](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1788)\n* *ci*: Fix broken Macos-13 CI [#1780](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1780)\n\nRelease 1.13.7.0 -- 1 Mar 2024 (compared to 1.13.6.1)\n--------------------------------------------------------\n* *fix*: Mute partio error prints [#1774](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1774) (by olegul)\n* *ci*: Test with Mac ARM runner [#1770](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1770)\n* *docs*: Fix links to RTD docs from github landing page [#1768](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1768)\n* *admin*: Switch release announcement workflow to jmertic's awesome action [#1766](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1766)\n\n<br>\n\n\nRelease 1.13 -- Feb 1, 2024 (compared to 1.12)\n===============================================\n- beta 1: December 20, 2023\n- release v1.13.6.1: Feb 1, 2024\n\n### New minimum dependencies and compatibility changes:\n\n* For GPU/OptiX mode, OptiX 6.0 support has been removed. For GPU rendering\n  with OptiX, a minimum of OptiX 7.0 is required, and the Cuda minimum has\n  been raised to 9.0 [#1737](https://github.com/AcademySoftwareFoundation/OpenShadingLangauge/pull/1737)\n* The minimum version OpenImageIO has been raised from 2.2 to 2.4. [#1591](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1591)  [#1722](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1722)\n* The minimum CMake dependency has been raised from 3.12 to 3.15\n  [#1724](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1724) (1.13.5.0)\n* The minimum Imath/OpenEXR has been raised from 2.3 to 2.4. (Note: OSL 1.13\n  is probably the last major release family that will support Imath/OpenEXR\n  2.x.)\n\n### OSL Language and oslc compiler:\n\n* There have been no substantive changes to the OSL language in this release.\n\n### ⛰️  API changes, new options, new ShadingSystem features (for renderer writers):\n\n* A new `shadingStateUniform` pointer field was added to ShaderGlobals for\n  planned future expansion and improved GPU support. #1585 (1.13.1.0)\n* Adding relaxed type-equivalency to ReParameter() [#1639](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1639) (by cmstein) (1.13.2.1)\n* Expose llvm groupdata size as a shadergroup attribute\n  [#1642](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1642) (by Chris Hellmuth) (1.13.4.0)\n* RendererServices API for letting get_texture_handle consider colorspace\n  [#1641](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1641) (1.13.4.0)\n* Make \"compile_report\" attribute an int instead of just 0/1. Passing 1 makes\n  a brief report, values >1 are more verbose. (Zero still prints no report.)\n  [#1654](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1654) (1.13.4.0)\n* Switch `lockgeom` to `interpolated` and `interactive`. The `lockgeom=0`\n  was confusing. Now we use `interpolated=1` to mean \"don't optimize it away\n  because it might be interpolated across the geometry and thus won't have\n  the same value at all points being shaded,\" and the subtly different\n  `interactive=1` to mean \"don't optimize it away because although it will\n  always take on the same value at all points at the same time, the user\n  might want to interactively adjust the value and we don't want to have\n  to recompile the shader group if that happens.\"\n  [#1662](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1662) (1.13.4.0)\n* Add type information for needed attributes. [#1650](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1650) (by Curtis Black) (1.13.4.0)\n* Add API for building attribute getter free functions.\n  [#1704](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1704) (by Curtis Black) (1.13.5.0)\n* Rs fmt specification - Journaling Algorithm for error, warning, fprintf\n  [#1702](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1702) (by Steena Monteiro) [#1711](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1711) [#1715](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1715) (1.13.5.0)\n\n### 🚀  SIMD batched shading mode\n\n* Fix some array overruns (asymptomatic, but still potentially buggy) in\n  common_ancestor_between. #1577 (1.13.0.2)\n* Fix issue with closure keyword parameters. #1620 (1.13.2.0/1.12.8.0)\n* Fix crash when adding a default initialized closure. #1624\n  (1.13.2.0/1.12.8.0)\n* Fix support for closures with array types. #1630 (1.13.2.0/1.12.8.0)\n* Fix bug with masked wide llvm_gen_closure() [#1637](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1637) (by danieldresser-ie) (1.13.2.1)\n* Fix Force LLVM Boolean [#1717](https://github.com/AcademySoftwareFoundation/OpenShadingLangauge/pull/1717) (by Alex Wells)\n* Batched pointcloud if \"index\" is not passed [#1753](https://github.com/AcademySoftwareFoundation/OpenShadingLangauge/pull/1753) (by Alex Wells)\n\n### 🚀  OptiX GPU rendering\n\n* OptiX 6.0 support has been removed. For GPU rendering with OptiX, a minimum\n  of OptiX 7.0 is required.\n* Big overhaul/simplification of how strings are represented on the GPU: the\n  extra level of indirection to global variables is removed, and strings are\n  simply represented in ordinary variables as the hash of their characters.\n  #1531 (1.13.0.0) #1553 (1.13.0.1)\n* Better PTX cache hit rate by eliminating several sources of not being\n  strictly deterministic in the PTX text we were generating. #1566 #1570\n  (1.13.0.1)\n* Fix PTX symbol visibility issues. #1609 (1.13.2.0)\n* Hide more code that is only used for OptiX mode, when OptiX is disabled.\n  #1608 (1.13.2.0)\n* Remove dependency on OptiX SDK for building core OSL with OptiX support. You\n  can now build OSL with OptiX support enabled even if you don't have the\n  OptiX SDK headers present at build time. But you will still need them to\n  build your OptiX-based application that uses OSL for GPU rendering. #1627\n  (1.13.2.0/1.12.8.0)\n* GPU/OptiX support of ReParameter [#1686](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1686) (1.13.4.0)\n* Fix userdata derivatives for interpolated params on GPU [#1685](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1685) (by Pascal Lecocq) (1.13.4.0)\n* Enable userdata derivatives for interpolated params on GPU\n  [#1657](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1657) (by Chris Hellmuth) (1.13.4.0)\n* Move qualifying GroupData params onto stack for higher performance.\n  [#1710](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1710) (by Chris Hellmuth) (1.13.5.0)\n* Handle mixed string casting that plagues optix codegen [#1718](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1718) (1.13.5.0)\n* Add missing members to ShaderGlobals in rend_lib.h [#1721](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1721) (by Tim Grant) (1.13.5.0)\n* OptiX direct callable API that owns groupdata buffer\n  [#1683](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1683) (by Chris Hellmuth) (1.13.5.0)\n* OptiX PTX pipeline overhaul [#1680](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1680) (by Tim Grant) (1.13.5.0)\n* Perf: Don't insert redundant run layer calls inside a basic block\n  [#1665](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1665) [#1669](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1669) [#1672](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1672) (by Chris Hellmuth) (1.13.4.0)\n* Fix NVPTX TargetMachine leak, etc. [#1763](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1763) (by Tim Grant)\n\n### 🐛/🔧  Internals: fixes, improvements, and developer concerns\n\n* Fix memory leak in oslc ASTvariable_declaration. #1576 (1.13.0.2)\n* Fix memory leaks in LPE code in error conditions. #1593 #1594 (1.13.0.3)\n* Fix mismatched strides when calling OCIO for transformc with derivs [#1646](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1646) (1.13.4.0)\n* Set up ray types for testrender [#1648](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1648) (1.13.4.0)\n* Fix userdata binding corner case [#1673](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1673) (by Alejandro Conty) (1.13.4.0)\n* Fix constant float values being converted to ints [#1674](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1674) (by Declan Russell) (1.13.4.0)\n* Don't try to ReParameter symbols not in the group [#1693](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1693) (by Alejandro Conty) (1.13.5.0)\n* Have ReParameter only copy data when it changes [#1698](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1698) (1.13.5.0)\n* Avoid deprecated OSLQuery ctr in test example [#1699](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1699) (1.13.5.0)\n* Zero derivs for interactive params when needed [#1700](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1700) (by Alejandro Conty) (1.13.5.0)\n* oslc bug fix: shader params whose default values involve \"init ops\" could be\n  incorrectly initialized if their values came from instance parameters set to\n  zero. #1578 (1.13.0.2)\n* oslc: Add missing `fmod()` variants [#1643](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1643) (1.13.4.0)\n* Simple constant folding of binary expressions now happen on the oslc side\n  [#1653](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1653) (1.13.4.0)\n* platform.h:\n    * New `OSL_ALLOCA` macro to allocate on the stack. #1589 (1.13.0.3)\n    * Define OSL::bitcast utility. #1610 (1.13.2.0)\n* Make sure that std::hash is defined for ustring and ustringhash. #1599\n  (1.13.1.1)\n* Deprecate LLVMUtil::internalize_module_functions. #1606 (1.13.1.0)\n* Work toward always representing strings in shaders as ustringhash rather\n  than ustring: phase 1 #1603 phase2 #1612 (1.13.2.0) [#1726](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1726) (1.13.5.0)\n* Remove unnecessary setting of locale::global [#1636](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1636) (by danieldresser-ie) (1.13.2.1)\n* Fully define bitcast template [#1635](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1635) (1.13.2.1)\n* Fix for ReParameter corner case [#1670](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1670) (by cmstein) (1.13.4.0)\n* Switch deprecated oiio simd names to modern [#1679](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1679) (1.13.4.0)\n* Give ShadingSystemImpl a handy use_optix() method [#1682](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1682) (1.13.4.0)\n* Fix default fmt logic changing in latest openimageio release [#1725](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1725) (1.13.5.0)\n* The recently added SS::find_symloc can have const args [#1723](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1723) (1.13.5.0)\n* SymOverrideInfo bitfields should be the same type [#1745](https://github.com/AcademySoftwareFoundation/OpenShadingLangauge/pull/1745)\n* Fix wrong offset of MxSheen param [#1751](https://github.com/AcademySoftwareFoundation/OpenShadingLangauge/pull/1751) (by Rasmus Bonnedal)\n* Make get_texture_info robust to empty shaderglobals param [#1731](https://github.com/AcademySoftwareFoundation/OpenShadingLangauge/pull/1731)\n\n### 🏗  Build/test/CI and platform ports\n\n* CMake build system and scripts:\n    * The version number is now a cache variable, and so can be overridden at\n      build time using `-DOSL_VERSION=...`. Use with extreme caution! #1579\n      (1.13.0.2)  Revised again to reduce changes of user error in #1617\n      (1.13.2.0/1.12.7.1)\n    * Add clangSupport library as dependency to fix linker error on some\n      platforms. #1613 (1.13.2.0/1.12.7.1)\n    * Fix incorrect CMake variable name to control symbol visibility\n      [#1681](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1681) (1.13.4.0)\n    * Change cmake option `USE_OPTIX` -> `OSL_USE_OPTIX` [#1668](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1668) (1.13.4.0)\n    * Fix duplicate osl lexing symbols when building as static libraries\n    [#1709](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1709) (by Brecht Van Lommel) (1.13.5.0)\n    * Better cmake verbose behavior [#1752](https://github.com/AcademySoftwareFoundation/OpenShadingLangauge/pull/1752)\n* Dependency version support:\n    * Fix some issues that came up with the new icx 2022.0 compiler. #1601\n      (1.13.1.0)\n    * Test against OpenColorIO 2.2. #1616 (1.13.2.0/1.12.7.1)\n    * Proper warnings about LLVM 16 [#1658](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1658) (1.13.4.0)\n    * Fix cuda compilation flags for LLVM 15 [#1659](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1659) (1.13.4.0)\n    * Verify that OSL can build with clang16 [#1664](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1664) (1.13.4.0)\n    * Be more careful about paths to look for llvm [#1656](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1656) (1.13.4.0)\n    * Qt6 compatibility [#1655](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1655) (1.13.4.0)\n    * Fix warnings about Qt compilation and enums [#1661](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1661) (1.13.4.0)\n    * Changes to support fmt 10.0 [#1691](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1691) (1.13.5.0)\n    * Raise OpenEXR minimum to 2.4 [#1734](https://github.com/AcademySoftwareFoundation/OpenShadingLangauge/pull/1734)\n    * Fix Partio build errors on pointcloud functions for MSVC [#1757](https://github.com/AcademySoftwareFoundation/OpenShadingLangauge/pull/1757) (by Alex Wells)\n    * Bump Cuda minimum to 9.0 [#1737](https://github.com/AcademySoftwareFoundation/OpenShadingLangauge/pull/1737)\n    * LLVM 16 and 17 support: LLVM opaque pointers support [#1728](https://github.com/AcademySoftwareFoundation/OpenShadingLangauge/pull/1728),\n      LLVM new pass manager support [#1729](https://github.com/AcademySoftwareFoundation/OpenShadingLangauge/pull/1729),\n      finish LLVM 16 and 17 support [#1730](https://github.com/AcademySoftwareFoundation/OpenShadingLangauge/pull/1730) (all by Brecht Van Lommel)\n* Testing and Continuous integration (CI) systems:\n    * Dynamic analysis using address and leak sanitizers. #1581 (1.13.0.3)\n    * `testshade --help` now prints TextureSystem options and all hardware\n      information. #1584 (1.13.0.3)\n    * Improvements to SonarCloud and coverage analysis. #1596 (1.13.0.3)\n      #1607 (1.13.1.0)\n    * Disabling the dso version of testshade for the coverage analysis test.\n      #1604 (1.13.1.0)\n    * Be sure to run pointcloud tests when partio is found. #1611 (1.13.2.0)\n    * testshade: better testing of all closure parameter types. #1621\n      (1.13.2.0/1.12.8.0)\n    * Don't use the cached background map on the first bounce\n      [#1649](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1649) (by Christopher Kulla) (1.13.4.0)\n    * Fix builds when USE_PYTHON=OFF [#1675](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1675) (by Declan Russell) (1.13.4.0)\n    * Remove SonarCloud cache setup as it is now offered by default\n      [#1660](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1660) (by Massimo Paladin) (1.13.4.0)\n    * *ci*: Simplify build_llvm.bash script [#1703](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1703) (1.13.5.0)\n    * Test interactive parameter initialization in optix testrender [#1687](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1687) (by Chris Hellmuth) (1.13.5.0)\n    * Fix GPU job not actually enabling OptiX [#1738](https://github.com/AcademySoftwareFoundation/OpenShadingLangauge/pull/1738) (by Brecht Van Lommel)\n    * Fix python-oslquery test failure on macOS [#1739](https://github.com/AcademySoftwareFoundation/OpenShadingLangauge/pull/1739) (by Brecht Van Lommel)\n    * Disable MacOS-11 CI [#1746](https://github.com/AcademySoftwareFoundation/OpenShadingLangauge/pull/1746)\n    * Skip analysis and scorecard workflows on push if only docs changed [#1744](https://github.com/AcademySoftwareFoundation/OpenShadingLangauge/pull/1744)\n    * For clarity, use the term 'runner' instead of 'os' [#1743](https://github.com/AcademySoftwareFoundation/OpenShadingLangauge/pull/1743)\n    * Test ABI compliance [#1748](https://github.com/AcademySoftwareFoundation/OpenShadingLangauge/pull/1748)\n    * Fix tests passing when test commands fail [#1733](https://github.com/AcademySoftwareFoundation/OpenShadingLangauge/pull/1733) (by Brecht Van Lommel)\n    * *ci*: Test against LLVM 17 [#1760](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1760)\n* Platform support:\n    * Include `immintrin.h` only when needed. #1605 (1.13.1.0)\n    * Changed snprintf formatting to satisfy some compilers.\n      [#1640](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1640) (by pellerington) (1.13.4.0)\n    * Fix some windows GPU build errors [#1638](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1638) (by Declan Russell) (1.13.4.0)\n    * Fix for Apple clang 14+ warnings [#1697](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1697) (1.13.5.0)\n    * Fix struct align/pack for MSVC [#1754](https://github.com/AcademySoftwareFoundation/OpenShadingLangauge/pull/1754) (by Rasmus Bonnedal)\n    * Refactor icc/icx specific pragma macros [#1756](https://github.com/AcademySoftwareFoundation/OpenShadingLangauge/pull/1756) (by Alex Wells)\n\n### 📚  Documentation\n\n* First stab at ReadTheDocs -- new [Experimental OSL Documentation on\n  ReadTheDocs](https://open-shading-language.readthedocs.io/)\n  is still a little rough, but eventually will be our primary documentation.\n  [#1736](https://github.com/AcademySoftwareFoundation/OpenShadingLangauge/pull/1736)\n* `doc/RELEASING.md` documents our release process and versioning policies.\n  #1572 (1.13.0.2)\n* Improve documentation of `trace` function [#1671](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1671) (by AidanWelch) (1.13.4.0)\n* Update CONTRIBUTING [#1689](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1689) (1.13.5.0)\n* Update logos [#1705](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1705), Move logos and add an icon-only logo [#1707](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1707) (1.13.5.0)\n\n### 🏢  Project Administration\n\n* Alert slack \"release-announcements\" channel upon OSL release [#1740](https://github.com/AcademySoftwareFoundation/OpenShadingLangauge/pull/1740) [#1749](https://github.com/AcademySoftwareFoundation/OpenShadingLangauge/pull/1749)\n* Update pull request template [#1741](https://github.com/AcademySoftwareFoundation/OpenShadingLangauge/pull/1741)\n* Account for duplicate emails in the .mailmap [#1759](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/1759)\n\n\n---\n---\n---\n\n\nRelease 1.12.13.0 -- 1 July 2023 (compared to 1.12.12.0)\n--------------------------------------------------------\n- *fix*: Fix constant float values being converted to ints\n  [#1674](https://github.com/OpenShadingLanguage/oiio/pull/1674)  (by Declan Russell)\n- *build*: Fix builds when USE_PYTHON=OFF\n  [#1675](https://github.com/OpenShadingLanguage/oiio/pull/1675)  (by Declan Russell)\n- *build*: Changes to support fmt 10.0\n  [#1691](https://github.com/OpenShadingLanguage/oiio/pull/1691)\n- *cleanup*: Switch deprecated oiio simd names to modern\n  [#1679](https://github.com/OpenShadingLanguage/oiio/pull/1679)\n- *testing*: Avoid deprecated OSLQuery ctr in test example\n  [#1699](https://github.com/OpenShadingLanguage/oiio/pull/1699)\n- *ci*: Fix package name for icc\n  [#1690](https://github.com/OpenShadingLanguage/oiio/pull/1690)\n- *ci*: Add VFX Platform 2023 tests using new ASWF containers\n  [#1696](https://github.com/OpenShadingLanguage/oiio/pull/1696)\n- *ci*: Switch oiio obsolete branch names to immutable tags\n  [#1701](https://github.com/OpenShadingLanguage/oiio/pull/1701)\n- *docs*: Improve documentation of `trace` function\n  [#1671](https://github.com/OpenShadingLanguage/oiio/pull/1671)  (by AidanWelch)\n- *docs*: README.md: added filmography and Siggraph OSL course info.\n  [#1692](https://github.com/OpenShadingLanguage/oiio/pull/1692)\n  [#1694](https://github.com/OpenShadingLanguage/oiio/pull/1694) (by Mitch Prater)\n- *docs*: Amend the filmography\n  [#1695](https://github.com/OpenShadingLanguage/oiio/pull/1695)\n- *docs*: Fix incorrect links in CONTRIBUTING\n  [#1688](https://github.com/OpenShadingLanguage/oiio/pull/1688)\n\nRelease 1.12.12.0 -- 1 May 2023 (compared to 1.12.11.0)\n--------------------------------------------------------\n* New ShadingSystem getattribute query for shader groups: \"attribute_types\"\n  retrieves a pointer to the array of TypeDesc values describing the\n  attributes retrieved by existing \"attributes_needed\" and \"attribute_scopes\".\n  #1650\n* Fix a bug with binding userdata when it's used by more than one shader\n  within the group and they disagree about whether derivatives are needed when\n  retrieving the attribute. #1673\n\nRelease 1.12.11.0 -- 5 Apr 2023 (compared to 1.12.10.0)\n--------------------------------------------------------\n* Build: Add Qt 6.x compatibility (Qt is only used for `osltoy`). #1655\n* Build: more careful about paths to look for LLVM. #1656\n* Build: Fix Cuda compilation flags for LLVM 15. #1659\n* Notice: OSL does not yet build properly against the newly release LLVM 16.\n  You must use LLVM 9-15. For Mac users who get their llvm from Homebrew,\n  please be aware that Homebrew has changed its default llvm to 16, so you'll\n  need to `brew install llvm@14` and make your OSL CMake define:\n  `-DLLVM_ROOT=/usr/local/opt/llvm@14`\n\nRelease 1.12.10.0 -- 1 Mar 2023 (compared to 1.12.9.0)\n--------------------------------------------------------\n* feat(testrender): Modify testrender so that it correctly sets raytype to\n  \"camera\" for camera rays, \"shadow\" for shadow rays, and \"diffuse\" for all\n  secondary rays. Also rerun the shades for background shader group on the\n  camera rays rather than use the cached map. This helps the MaterialX project\n  use testrender for certain unit tests and verification. #1648 #1649\n* feat: Expose llvm groupdata size as a shadergroup attribute\n  \"llvm_groupdata_size\". #1642\n* fix: Crash could result from uncaught exception in OpenColorIO when calling\n  transformc with derivatives for color spaces that require OCIO. #1646\n* fix: certain uses of fmod() in shaders could fail to generate LLVM code\n  correctly, due to a missing implementation for the fmod(triple,float)\n  varieties. #1643\n* build: Change snprintf formatting to satisfy some compilers. #1640\n* CI: Fix broken Mac ci. #1647\n\nRelease 1.12.9.0 -- 1 Feb 2023 (compared to 1.12.8.0)\n-------------------------------------------------------\n* Remove unnecessary setting of locale::global. #1630\n* Batch shading: Fix bug with masked wide closure generation. #1637\n* Make sure ReParameter() has the same relaxed type checking rules as\n  Parameter(). Before, it was stricter about type conversion. #1639\n* Windows: Fix some GPU build errors. #1638\n\nRelease 1.12.8.0 -- 3 Jan 2023 (compared to 1.12.7.1)\n-------------------------------------------------------\n* Remove dependency on OptiX SDK for building core OSL with OptiX support.\n  You can now build OSL with OptiX support enabled even if you don't have the\n  OptiX SDK headers present at build time. But you will still need them to\n  build your OptiX-based application that uses OSL for GPU rendering. #1627\n* Batch mode: fix issue with closure keyword parameters. #1620\n* Batch mode: fix crash when adding a default initialized closure. #1624\n* Batch mode: Fix support for closures with array types. #1630\n* testshade: better testing of all closure parameter types. #1621\n* Fix various CI breaks as dependencies shifted. #1629 #1631 #1633\n\nRelease 1.12.7.1 -- 1 Dec 2022 (compared to 1.12.7.0)\n-------------------------------------------------------\n* Add clangSupport library as dependency to fix linker error on some\n  platforms. #1613\n* Test against OpenColorIO 2.2. #1616\n* Build: Fix how version overrides work to reduce the chance of user mistakes.\n  #1617\n\nRelease 1.12.7.0 -- 1 Nov 2022 (compared to 1.12.6.2)\n-------------------------------------------------------\n* Optix: Change naming of certain compiler-generated constants in a way that\n  improves use of the PTX cache. #1570\n* Batch: Fix uninitialized members in ReadEvent internals. #1575\n* `testshade --help` now prints TextureSystem options and hardware info. #1584\n* oslc: Fix memory leak in ASTvariable_declaration. #1576\n* Fix memory leaks in light path expression code. #1593 #1594\n* Include the immintrin.h header only when needed. #1605\n* icx: Improvements to fix problems exposed by new icx 2022.2 compiler. #1601\n* Testing: CMake cache variables to control the testing timeout length. #1571\n* CI: Add a dynamic analysis test using address and leak sanitizers. #1581\n* CI: Now using SonarCloud static analysis. #1551\n* CI: Many improvements in testing code coverage #1607\n* CI: Make sure to run pointcloud tests when partio is found. #1611\n* Developers: platform.h now defines OSL_ALLOCA macro. #1589\n* Developers: platform.h now defines OSL::bitcast utility. #1610\n\nRelease 1.12 -- 1 Oct 2022 (compared to 1.11)\n----------------------------------------------\nBig Deal Changes:\n* **Batch shading**: A fully operational \"batch shading\" support when using\n  CPUs supporting the Intel AVX2 or AVX512 instruction set architectures,\n  allows shading 8 or 16 points at a time, accelerated by using SIMD\n  instructions. (Changes contributed by Intel.)\n* **OptiX**: A reasonable subset of the OSL language can run on NVIDIA GPUs\n  for Cuda or OptiX-based renderers.\n* **Standardized material closures**: Synchronize with MaterialX on a minimum\n  standard set of material closures. This is reflected in both the OSL spec as\n  well as reference implementations of those closures in testrender. #1533\n  #1536 #1537 #1538 #1539 #1541 #1542 #1547 #1557\n\nDependency and standards requirements changes:\n* The minimum (and default) compilation mode is now C++14. C++17 and 20 are\n  also supported. #1362 #1369 (1.12.2)\n* Minimum compilers are now gcc 6.1 (no more support for gcc 4.8), MSVS\n  2017 or newer (no more support for 2015).\n* Minimum LLVM is now 9.0. Support for LLVM 7 and 8 have ben dropped.\n  #1441 (1.12.3)\n* Minimum OpenImageIO is now 2.2: Support for OIIO 2.0 and 2.1 have been\n  dropped. #1426 (1.12.3)\n* Minimum OpenEXR version is now 2.3 (raised from 2.0). #1406 (1.12.3)\n\nOSL Language and oslc compiler:\n* `#pragma error \"message\"` and `#pragma warning \"message\"` can be used to\n  conditionally inject a compile-time error or warning. #1300 (1.12.1)\n* Check for errors when when writing oso files (for example, disk volume\n  full). #1360 (1.12.2/1.11.14)\n* A new flavor of `gettextureinfo(texturename, paramname, s, t, destination)`\n  allows for querying of texture metadata about the particular UDIM tile\n  that will be used for particular (s,t) texture coordinates. #1398 (1.12.3)\n* Better error detection when OSL user functions write to function parameters\n  that are not marked as output. #1417 (1.12.3)\n* Detect and better error message when using a type name where a variable\n  identifier should be. #1457 (1.12.4.2)\n\nOSL Standard library:\n* vector2.h is updated with a mod() function for vector2. #1312 (1.12.1/1.11.12)\n* Preliminary work for adding standard MaterialX closures. 31371 (1.12.2)\n* Fix previously-broken color conversions from RGB to xyY. #1410 (1.12.3)\n* Fully removed MaterialX shaders (get those from the MaterialX project).\n  #1450 (1.12.3)\n* Fix incorrect implementation of `matrix4 * vector4` in vector4.h #1513\n  (1.12.5.0)\n\nAPI changes, new options, new ShadingSystem features (for renderer writers):\n* Custom experimental llvm optimization levels 10, 11, 12, and 13. These\n  are stripped down versions of 0, 1, 2, 3 (corresponding to clang's -O0,\n  -O1, -O2, -O3) but we think for shaders are just as performant but with\n  lower JIT time. These are currently experimental, but we are benchmarking\n  to determine if they should be the new defaults. #1250 (1.12.0.0)\n* ShadingSystem attribute \"searchpath:library\" gives a searchpath for finding\n  runtime-loadable implementation modules for ISA-optimized operations.\n  #1310 (1.12.1)\n* Output variable placement -- now you can designate where shader outputs\n  should go and the shader will put results there, instead of the app using\n  find_symbol() and symbol_address after the shader is executed. #1328 (1.12.2)\n* Userdata input placement -- now you can designate where interpolated\n  userdata should be copied from directly, rather then via callbacks to\n  RendererServices::get_userdata(). #1391 (1.12.3)\n* Better hiding of the Matrix22 class, which was never actually part of the\n  public APIs. #1480 (1.12.4.5)\n* Add ACES2065-1 and ACEScg as shading system color spaces (#1486) (1.12.4.6)\n* Expanded warnings (via enabling the \"opt_warnings\" attribute of the\n  ShadingSystem) for operations that try to create new strings mid-shader, or\n  that need to access the characters of strings mid-shader. These are only\n  triggered for those cases that cannot be resolved by the end of the \"runtime\n  optimization\" phase. #1497 (1.12.4.6)\n\nSIMD batched shading mode:\n* Added support for masked operations to LLVMUtil. #1248 #1250 (1.12.0.0)\n* Add interface to ShadingSystem for batched execution. #1272 (1.12.0.1)\n* Add interface to batched RendererServices. #1276 (1.12.0.1)\n* Batched testshade. #1298 (1.12.1)\n* ShadingSystem plumbing to support batched execution. #1301 (1.12.1)\n* Batched analysis to figure out which symbols need to be varying or uniform,\n  and which operations require masking. #1313 #1318 #1322 (1.12.1)\n* Additional infrastructure for batched analysis. #1316 (1.12.1)\n* Add implementation for BatchedBackendLLVM. #1330 (1.12.1)\n* ISA-specific modules. #1345 (1.12.2)\n* Introduction of CI testing of batched mode. #1357 #1367 (1.12.2)\n* Control flow and string ops. #1372 (1.12.2)\n* Matrix operations. #1378 (1.12.2) #1485 (1.12.4.6)\n* Batched algebraic, trig, and transcendental functions. #1385 (1.12.2)\n* Batched noise. #1394 (1.12.3)\n* Batched implementation of all color operations. #1408 (1.12.3)\n* Batched bitwise ops. #1413 (1.12.3)\n* Batched spline and spline inverse. #1422 (1.12.3)\n* Batched texture, gettextureinfo, texture3d, environment. #1436 (1.12.3)\n* Batched dictionary functionality (dict_find, etc.) #1445 (1.12.3)\n* Enable batched execution of most testsuite. #1453 (1.12.4.1)\n* Batched isnan, isinf, isfinite. #1456 (1.12.4.2)\n* Batched userdata and output placement. #1455 (1.12.4.2)\n* Batched pointcloud functions. #1464 (1.12.4.4)\n* Batched closures (#1500)\n\nOptiX rendering:\n* Explicitly set the OptiX pipeline stack size. #1254 (1.12.0.0)\n* CI tests now at least compile and build with USE_OPTIX=1 (though not yet\n  run the tests). #1281 (1.12.0.1)\n* A simple self-contained Cuda/OptiX example has been added as\n  testsuite/example-cuda. #1280 (1.12.0.1)\n* Overhaul in how strings are communicated to the GPU side. #1309 (1.12.1)\n* Removal of runtime compilation of Cuda (libnvrtc dependency eliminated).\n  #1309 (1.12.1)\n* Fix problems with unresolved symbols on GPU, particularly when multiple\n  shaders call certain functions like printf. #1401 (1.12.3)\n* Changed prototype of osl_get_attribute callback to work properly on\n  GPU. #1404 (1.12.3)\n* Fix missing hostdevice modifier on some matrix operators. #1409 (1.12.3)\n* Fix race conditions when compiling for OptiX 7. #1411 (1.12.3)\n* osl_get_attribute() uses device strings when compiling for OptiX.\n  #1435 (1.12.3)\n* Fix issue with OptiX + clang 14 with duplicate symbols. #1561 (1.12.6.0)\n\nPerformance improvements:\n* Less mutex locking around use and retrieval of ColorSystem related to\n  doing color transforms. #1405 (1.12.3)\n* Constant folding of `startswith()`. #1507 (1.12.5.0)\n\nBug fixes and other improvements (internals):\n* Fix derivatives of texture calls when only derivatives of the \"alpha\"\n  value are needed. #1251 (1.12.0.0)\n* When uninitialized value detection is used, fix possible \"false positive\"\n  related to the condition variable of do-while loops. #1252 (1.12.0.0)\n* Avoid some pointless copies of output variables from a used layer to a\n  downstream layer that is known to not be used. #1253 (1.12.0.0)\n* Stats now print more information about build options and runtime hardware\n  capabilities. #1258 #1259 (1.12.0.1)\n* The osl and oso parsers are now re-entrant, which allows different threads\n  to concurrently compile or load shaders. #969 (1.12.0.1)\n* Fix asymptomatic potential runtime optimizer bug where certain\n  multi-component values were not correctly recognized as nonzero. #1266\n  (1.12.0.1/1.11.9)\n* Fix optimizer bug where an `output` parameter that is also marked as\n  `[[lockgeom=0]]`, i.e., it gets a value from a userdata input, but also\n  passes it to a downstream connection or a renderer output, could end up\n  with an incorrect value if it was never read in the shader (including if\n  the only times it was read were optimized away). #1295 (1.12.0.1)\n* Ensure that OSLCompiler::LoadMemoryCompiledShader returns false upon parse\n  failure. #1302 (1.12.1/1.11.10)\n* During runtime optimization, don't merge layers that produce renderer\n  outputs (the semantics of doing so are very fishy). #1296 (1.12.1)\n* Eliminate unnecessary error messages to stderr for broken point clouds.\n  #1333 (1.12.1/1.11.13)\n* Fix undefined behavior that could result in crashes that resulted from\n  the Symbol class having no virtual destructor. #1397 (1.12.3)\n* Fix in runtime optimizer where tracking of messages and unknown messages\n  relied on uninitialized variables. #1447 (1.11.17/1.12.3)\n* Stop internally using OIIO::string_view::c_str(), which will someday be\n  removed. #1458 (1.12.4.2)\n* Correctly track that the backfacing() function requires N and I shader\n  globals. #1462 (1.12.4.4)\n* Print all 4 levels of version numbers in help messages. #1477 (1.12.4.4)\n* Fix GPU code generation crash. #1479 (1.12.4.4)\n* Work to transition internals to use modern std::format notation for\n  formatted output. #1487 #1490 (1.12.4.6) #1504 #1506 (1.12.5.0)\n* testrender improvements:\n    * Fix testrender memory error on teardown. #1499 (1.12.4.6)\n    * Modernize the sampler in testrender, improving quality and performance.\n      #1534 (1.12.6.0)\n    * Switch to cone tracing for derivatives. #1543 (1.12.6.0)\n* Fix error that prevented correct typecheck of ternary operator. #1552\n  (1.12.6.0)\n\nInternals/developer concerns:\n* Use the `final` keyword in certain internal classes where applicable.\n  #1260 (1.12.0.1/1.11.9)\n* Minor fixes to the internal TypeSpec and Symbol classes. #1267 (1.12.0.1)\n* Switch from deprecated call to OIIO::parallel_image to the new version.\n  #1317 (1.11.11/1.12.1)\n* The \"archive_groupname\" handling is now careful to sanitize the filenames\n  it deals with, closing some security and safety holes. #1383 (1.12.2)\n* More migration of string formatting to new std::format style. #1389 (1.12.3)\n  #1469 #1470 (1.12.4.4)\n* llvm_util: Switch some uses of ptr+len to span. #1390 (1.12.3)\n* OSL no longer uses sscanf internally (which has icky locale-dependent\n  behavior), and instead use locale-independent OIIO::Strutil utilities\n  whenever we need to parse strings. #1432 (1.12.3)\n* Avoid use of OIIO::string_view::str() which is not corresponding to the\n  official C++17 std::string_view. #1467 (1.12.4.4)\n* Prototype of \"free function\" approach that will someday mostly supplant\n  the way we use RendererServices, and will help to unlock feature completion\n  for GPU and other back ends. This experimental feature is not expected\n  to be used in OSL 1.12. #1494 (1.12.5.0)\n* Work on gradually converting printf-style formatted strings to fmt /\n  std::format style. #1493 (1.12.5.0)\n* LLVM_Util: allow naming of llvm symbols to help with IR debugging. #1530\n  (1.12.6.0)\n* clang-format the code base. #1508 #1509 #1511 #1512 #1515 #1518 #1540\n  (1.12.5.0) #1555 #1562 #1568 (1.12.6.0)\n* A round of spell-checking all the comments in the code base. #1550\n  (1.12.5.0)\n\nBuild & test system improvements:\n* CMake build system and scripts:\n    - We now use .git-blame-ignore-revs to record commits that consist\n      entirely of reformatting, so that 'git blame' does not misattribute\n      authorship to the trivial changes of those commits. #1244 (1.12.0.0)\n    - Miscellaneous improvements to cmake scripts. #1247 (1.12.0.0)\n    - Instead of defaulting to looking for Python 2.7, the OSL build now\n      defaults to whatever Python is found (though a specific one can still\n      be requested via the PYTHON_VERSION variable). #1249 (1.12.0.0/1.11.8)\n      #1286 (1.12.0.1/1.11.9)\n    - Extend checked_find_package with VERSION_MIN and VERSION_MAX. #1303\n      (1.12.1/1.11.10)\n    - Make the CMake build scripts more friendly to being a subproject.\n      #1304 #1319 (1.11.11/1.12.1)\n    - We weren't properly hiding non-public symbols. #1337 (1.12.1/1.11.12)\n    - Fully split oslquery and oslnoise libraries from oslexec, no more\n      redundant modules put into both. #1346 #1348 (1.12.1)\n    - Support for CMake 3.20 #1354 (1.12.2/1.11.14)\n    - Important change to `Makefile` wrapper: We have a 'Makefile' that just\n      wraps cmake for ease of use. This has changed its practice of putting\n      builds in `build/ARCH` to just `build` (and local installs from\n      `dist/ARCH` to `dist`) to better match common cmake practice. So where\n      your local builds end up may shift a bit. #1396 (1.12.3)\n    - Be more careful about not writing over a sensitive install area\n      unless CMAKE_INSTALL_PREFIX is explicitly set. #1421 (1.12.3)\n    - PROJECT_VERSION_RELEASE_TYPE and OSL_SUPPORTED_RELEASE are now\n      cache variables that can have build-time overrides. #1443 (1.12.3)\n    - Use PROJECT_IS_TOP_LEVEL (not OSL_IS_SUBPROJECT) to confirm with\n      CMake 21 conventions. #1443 (1.12.3)\n    - New TIME_COMMANDS option, when enabled, can help debug performance of\n      the build. #1443 (1.12.3)\n    - New CMake variable `DOWNSTREAM_CXX_STANDARD` sets the downstream\n      minimum C++ requirement, separately from `CMAKE_CXX_STANDARD` which sets\n      what we build OSL itself with. Clarify that currently, OSL can be used\n      downstream by C++14, even if it is built with C++17 or higher. #1454\n      (1.12.4.1)\n    - Make exported cmake configs relocatable by using relative paths. #1466\n      (1.12.4.4)\n* Dependency version support:\n    - Build properly against Cuda 11 and OptiX 7.1. #1232 (1.12.0.1)\n      and up to OptiX 7.4 #1559 (1.12.6.0)\n    - PugiXML build fixes on some systems. #1262 (1.12.0.1/1.11.8)\n    - Cuda/OptiX back end: Add `__CUDADEVRT_INTERNAL__` define to bitcode\n      generation, needed to avoid duplicate cudaMalloc symbols with CUDA9+\n      #1271 (1.12.0.1)\n    - Build against LLVM 11 #1274 (1.12.0.1), LLVM 12 #1351 (1.12.1.0)\n      #1412 (1.12.3), LLVM 13 #1420 (1.12.3), LLVM 14 #1492 (1.12.4.6)\n      LLVM 15 #1592 (1.12.6.2)\n    - Fix build break against recent OIIO master change where m_mutex field\n      was removed from ImageInput. #1281 (1.12.0.1/1.11.9)\n    - Work to ensure that OIIO will build correctly against the upcoming\n      Imath 3.0 and OpenEXR 3.0. #1299 (1.11.10/1.12.1) #1332 (1.11.11/1.12.1)\n      #1341 (1.11.12/1.12.1) #1356 #1368 (1.11.13/1.12.2) #1489 (1.12.4.6)\n    - Improved finding of llvm components when using static libraries. #1375\n      (1.12.2)\n    - No longer use boost regex, completely rely on std::regex now that OSL\n      is C++14 minimum. #1377. (1.12.2)\n    - Support for OpenImageIO 2.3 changes. #1393 (1.12.3)\n    - Some rearrangement of `#include` and other trickery ensures that OSL\n      always includes headers from its favored version of Imath, rather than\n      the ones that OIIO prefers (in cases where OIIO and OSL were each based\n      on different Imath versions). #1460 (1.12.4.2)\n    - Various fixes for functionality and warnings for Intel icc and icx\n      compilers. #1459 #1473 #1475. (1.12.4.4)\n    - Fixes for recent OIIO TextureSystem changes that hide Imath types.\n      #1476 (1.12.4.4)\n    - Changes to work correctly with OpenImageIO 2.4 and its master being\n      the start of 2.5. #1569 (1.12.6.0)\n* Testing and Continuous integration (CI) systems:\n    - Eliminate the old Travis CI and Appveyor. #1334 #1338 (1.12.1)\n    - Use ccache + GitHub 'cache' action to greatly speed up CI runs. #1335\n      (1.12.1)\n    - Divide the CI stages into separate steps, combine dependency-building\n      scripts for CentOS and Ubuntu ito a single script. #1338 (1.12.1)\n    - CI tests clang11, also batched shading with clang. #1379 (1.12.2)\n    - CI speeds up OIIO builds by not building its tests. #1380 (1.12.2)\n    - CI tests gcc11 #1381 (1.12.2) and gcc12 #1565 (1.12.6)\n    - Deal with OpenColorIO changing its master branch to \"main\". #1429\n      (1.12.3)\n    - Fix tests for texture3d now that OIIO has dropped support for Field3D.\n      #1437 (1.12.3)\n    - Test against LLVM13/clang13 for the VFX Platform 2022 tests. #1434\n      (1.12.3)\n    - CI test against MacOS-11 #1434 (1.12.3) and MacOS-12 #1554 (1.12.6)\n      #1522 (1.12.5)\n    - Add testsuite coverage of environment(). #1438 (1.12.3)\n    - Use a project-specific environment variable `OSL_CI` instead of the more\n      generic `CI` to avoid clashes with other systems. #1446 (1.12.3)\n    - Deal with OpenEXR and Imath changing its master branch to \"main\". #1463\n      (1.12.4.4)\n    - testrender fix sphere tangents, per MaterialX suggestion. #1465\n      (1.12.4.4)\n    - Allow testsuite tests to use oiiotool for image diffs instead of idiff.\n      #1472 (1.12.4.4)\n    - Allow `-Werror` to be disabled even on CI branches. #1471 (1.12.4.4)\n    - CI Tests against the Intel icc and icx compilers! #1459 #1473 (1.12.4.4)\n      #1501 (1.12.5.0)\n    - Overhaul of GHA ci.yml to use strategy matrix. #1474 (1.12.4.4)\n    - Test against clang 14 and fix new warnings. #1498 (1.12.5.0)\n    - Test against clang 15 and fix new warnings. #1586 (1.12.6.2)\n    - A scorecards workflow guards against a variety of security issues of\n      the CI system itself.  #1529 (1.12.6.0)\n    - Enable SonarCloud static analysis. #1551 #1556 #1563 (1.12.6.0)\n* Platform support:\n    - Various Windows compile fixes. #1263 #1285 (1.12.0.1)\n    - Windows+Cuda build fixes. #1292 (1.12.0.1)\n    - Fix warnings about pointer casts on Windows. #1484 (1.12.4.5)\n    - Various Windows build fixes. #1502 (1.12.5.0)\n* The oso and osl lexers/parsers are now given internal symbol names that\n  are fully versioned, to avoid possible clash if multiple OSL releases are\n  both linked into the same application. #1255 (1.12.0.0)\n\nDocumentation:\n* A simple self-contained Cuda/OptiX example has been added as\n  testsuite/example-cuda. #1280 (1.12.0.1)\n* Update CLAs, Charter, GOVERNANCE, particularly after acceptance of new\n  CLAs and moving the repo to the ASWF GitHub account. #1308 #1240 #1314\n  (1.11.11/1.12.1)\n* First steps in new documentation and scripts for building OSL on Windows.\n  #1326 (1.12.1)\n* Fix missing explanation of the optional \"errormessage\" parameter to\n  environment() and texture3d(). #1442 (1.12.3/1.11.17)\n* A SECURITY.md file explains how to confidentially report vulnerabilities.\n  #1529 (1.12.6)\n* Document all the new MaterialX closures. #1564\n\n\n\nRelease 1.11.17.0 -- 7 Jan 2022 (compared to 1.11.16.0)\n-------------------------------------------------------\n* Fix in runtime optimizer where tracking of messages and unknown messages\n  relied on uninitialized variables. #1447\n* Minor changes related to OpenColorIO changing their master branch name to\n  \"main\". #1431\n* Testing: Get texture3d tests operational again. #1437\n* Docs: Fix missing \"errormessage\" explanation for environment() and\n  texture3d(). #1442\n* Build/cmake fixes: Make PROJECT_VERSION_RELEASE_TYPE and\n  OSL_SUPPORTED_RELEASE be cache strings, so they can be overridden; change\n  OSL_IS_SUBPROJECT to PROJECT_IS_TOP_LEVEL (and change its sense) to match\n  CMake 21+ behavior; add a TIME_COMMANDS option to help debug performance of\n  the build. #1443\n\nRelease 1.11.16.0 -- 1 Nov 2021 (compared to 1.11.15.0)\n-------------------------------------------------------\n* Fixes to work with LLVM 13, and to compile with clang 13. #1412 #1420\n\nRelease 1.11.15.0 -- 1 Sep 2021 (compared to 1.11.14.2)\n-------------------------------------------------------\n* Changes for compatibility with OpenImageIO 2.3. #1393 #1388\n* Fix potential crashes (or at least undefined behavior) due to missing\n  virtual destructor of internal Symbol type. #1397\n\nRelease 1.11.14.2 -- 1 Jul 2021 (compared to 1.11.14.1)\n-------------------------------------------------------\n* Fix warnings that occur when compiling with clang and C++17 mode. #1379\n* CI/testing: Additional CI tests for clang+c++17 (#1379), gcc11 (#1381),\n  llvm 12 (#1381), speed up CI builds by not building the testing components\n  of OIIO (#1380).\n\nRelease 1.11.14.1 -- 1 Jun 2021 (compared to 1.11.14.0)\n-------------------------------------------------------\n* Fix library setup for LLVM installations consisting of static libraries.\n  This fixes a build problem that can crop up on MacOS using\n  Homebrew-installed LLVM 12. #1375\n\nRelease 1.11.14 -- 10 May 2021 (compared to 1.11.13)\n----------------------------------------------------\n* oslc/OSLCompiler: Check for errors when when writing oso (for example,\n  disk volume full). #1360\n* Fix crash generating closure function calls with LLVM 11. #1361\n* Build: LLVM 12 compatibility. #1351\n* Build: Support for CMake 3.20 #1354\n* Build: Be robust to certain OpenEXR 2.x config fies. #1356\n* Build: Fixes to deal with newer OIIO builds that are C++14.\n\nRelease 1.11.13 -- 1 Apr 2021 (compared to 1.11.12)\n----------------------------------------------------\n* Updated vector2.h with a `mod(vector2,vector2)` function. #1312\n* Fix unnecesary error messages to stderr when encountering broken point\n  clouds. #1333\n\nRelease 1.11.12 -- 1 Mar 2021 (compared to 1.11.11)\n----------------------------------------------------\n* Build: Changes for smooth compile against upcoming Imath 3.0. #1332 #1341\n* Build: We weren't properly hiding non-public symbols. #1337\n* CI: Cleanup and get rid of the last Travis vestiges. #1334\n* CI: Speed up CI runs by using GHA cache + ccache. #1335\n* CI: Separate CI process into several individual \"steps.\" #1338\n\nRelease 1.11.11 -- 1 Feb 2021 (compared to 1.11.10)\n----------------------------------------------------\n* Build: Make the CMake build system more friendly to being a subproject.\n  #1304\n* Build: Improve dependency on Imath/OpenEXR include files.\n* CI: Fixes to Mac CI. #1315\n* Docs: Update CLAs, Charter, GOVERNANCE, particularly after acceptance of\n  new CLAs and moving the repo to the ASWF GitHub account. #1308 #1240 #1314\n* Internals: Switch from deprecated call to OIIO::parallel_image to the new\n  version. #1317\n\nRelease 1.11.10 -- 1 Dec 2020 (compared to 1.11.9)\n---------------------------------------------------\n* Bug fix: optimizer interaction with output param that also is userdata.\n  #1295\n* Ensure that LoadMemoryCompiledShader returns false upon parse failure.\n  #1302\n* Work to ensure that OIIO will build correctly against the upcoming\n  Imath 3.0 and OpenEXR 3.0. #1299\n\nRelease 1.11.9 -- 1 Nov 2020 (compared to 1.11.8)\n---------------------------------------------------\n* Build properly against Cuda 11 and OptiX 7.1. #1232\n* Windows compile fixes. #1263 #1285\n* PugiXML build fixes on some systems. #1262\n* Fix asymptomatic potential runtime optimizer bug where certain\n  multi-component values were not correctly recognized as nonzero. #1266\n* Fix false positive with \"debug_uninit\" where certain while loops might be\n  flagged as using uninitialized values when in fact they were not. #1252\n* Slightly optimize by not copying output params to layers that will not be\n  used. #1253\n* Internals: use the `final` keyword in certain internal classes where\n  applicable. #1260\n* Cuda/OptiX back end: Add `__CUDADEVRT_INTERNAL__` define to bitcode\n  generation, needed to avoid duplicate cudaMalloc symbols with CUDA9+ #1271\n* Fix build break against recent OIIO master change where m_mutex field was\n  removed from ImageInput. #1281\n\nRelease 1.11.8 -- 1 Oct 2020 (compared to 1.11.7)\n---------------------------------------------------\n* Fix broken derivatives of the optional \"alpha\" return of texture calls\n  when the normal color channels return don't have their derivatives used\n  but the alpha does. #1258\n* Building vs Python: instead of defaulting to searching for python 2.7\n  specifically and needing to set PYTHON_VERSION if you want (or have) a\n  different one, default to whichever version is found. If multiple versions\n  of Python are on the system, you can still use the PYTHON_VERSION cmake\n  variable to disambiguate which one you want. #1249\n* For the experimental OptiX support, explicitly set the OptiX pipeline\n  stack size (fixes some bugs). #1254\n* ShadingSystem statistics output (which is printed with `testshade --help`,\n  by the way) now includes information about the SIMD capabilities specified\n  at OSL build time, those available at runtime, and the versions of LLVM,\n  OIIO, and Imath used. This should help in debugging and issue reporting\n  by making it easy to know certain build time choices just by running\n  testshade. #1258\n\n\nRelease 1.11 -- 1 Sept 2020 (compared to 1.10)\n--------------------------------------------------\nASWF adoption changes:\n* GOVERNANCE.md and ASWF/Technical-Charter.md document the project\n  governance and how the Technical Steering Committee works. An archive of\n  meeting minutes can be found in ASWF/meetings. #1137 (1.11.5)\n* All the copyright notices now read \"Copyright Contributors to the Open\n  Shading Language Project,\" all files now have proper SPDX identifiers\n  instead of long boilerplate notices, and 3rd party included code now has\n  its licenses documented in the LICENSE-THIRD-PARTY.md file. #1145 (1.11.5)\n* The official mail list has switched to https://lists.aswf.io/g/osl-dev\n  #1167\n\nDependency and standards changes:\n* **LLVM 7.0-10.0**: Support for LLVM 4, 5, and 6 have been dropped. Support\n  for LLVM 8, 9, and 10 have been added. Note that using LLVM 10 *requires*\n  building for C++14 or later, because LLVM 10's APIs no longer support\n  C++11. #981 #1046 #1058 #1128 #1152 #1162 #1206\n* OpenImageIO 2.0-2.2: Support for OIIO 1.8 has been dropped; a minimum of\n  OIIO 2.0 is needed to build OSL. (Additionally, a minimum of OIIO 2.1 is\n  strongly recommended for anyone using the SIMD batch shading mode.) #1038\n  (1.11.0)\n* CMake minimum is now 3.12. #1072 (1.11.1)\n\nOSL Language and oslc compiler:\n* New syntax to reference color and point/vector/normal components as\n  named struct components, such as C.r, C.g, C.b, or P.x, P.y, P.z.\n  #1049 (1.11.0)\n* oslc compilation speed-ups with faster retrieval of source lines when\n  pasted into oso output. #938 (1.11.0)\n* Writing to function parameters not marked as `output` was only\n  recently properly recognized as an error (it was documented as illegal\n  all along). Now we demote to a warning, treating it as a full error was\n  too disruptive. #944 (1.10.3/1.11.0)\n* Improve oso output efficiency. #938 (1.10.3/1.11.0)\n* Fix bug related to counting the proper number of values used for\n  array default value initialization. #948 (1.10.3/1.11.0)\n* Slight modification to the formatting of floating point values in the oso\n  to ensure full precision preservation for float values. #949 (1.10.3/1.11.0)\n* Fix crash when encountering empty-expression `for (;;)`. #951 (1.10.3/1.11.0)\n* Fix bug in code generation of certain `while` loops that directly\n  tested a variable as a zero/nonzero test, such as:\n  ```\n      i = 3;\n      while (i)\n          --i;\n  ```\n  whereas the following had worked (they should have been identical):\n  ```\n      i = 3;\n      while (i != 0)\n          --i;\n  ```\n  #947 (1.10.3/1.11.0)\n* Improve warnings about ill-advised use of the comma operator.\n  #978 (1.10.4/1.11.0)\n* Fix an assertion/crash when passing initialization-lists as parameters to\n  a function, where the function argument expected was as array. #983\n  (1.10.4/1.11.0)\n* Fix an assertion/crash for certain type constructors of structs, where the\n  struct name was not declared. (This is an incorrect shader, but of course\n  should have issued an error, not crashed.) #988 (1.10.4/1.11.0)\n* Improve oslc type error detection for variable declarations with init\n  expressions. Note that this may flag some warnings and errors that went\n  undetected before, involving initialization assignments of incompatible\n  types. #991, #993 (1.10.5/1.11.0)\n* Allow shader parameters with empty brace initializers, such as:\n  ```\n      shader foo ( float myarray[] = {} )\n  ```\n  Un-lengthed arrays, if they aren't connected or given a concrete instance\n  value, still default to length 1 (we don't allow 0-length arrays, that's a\n  whole other can of worms), but this is now treated as equivalent to\n  `= { default_value }` (0 for int or float, \"\" for string). #967 (1.11.0)\n* More correct handling of escaped string literals (such as \"\\tfoo\\n\")\n  in string and also in string metadata. #1073 (1.11.1)\n* New command line argument `oslc --embed-source` embeds the preprocessed\n  source code in the `.oso` file itself (helpful for certain debugging\n  situations). #1081 (1.11.3)\n* oslc can generate dependency files, honoring the -M, -MM, -MD, -MMD, -MF,\n  and -MT flags with similar meanings to gcc and clang. #1085 #1107 (1.11.3)\n  Example:\n  ```\n      $ oslc -MMD test.osl\n      Compiled test.osl -> test.oso\n      $ cat test.d\n      test.oso: test.osl \\\n          dist/macosx/share/OSL/shaders/color2.h \\\n          dist/macosx/share/OSL/shaders/stdosl.h\n  ```\n* New shader-level metadata: `[[ int range_checking=0 ]]` disables the\n  automatic generation of range checking code for the shader. #1112 (1.11.4)\n* Support has been added for `pointcloud_get()` to be able to retrieve\n  per-point string data from point clouds. #1157 (1.11.5)\n* Shader `output` parameters that are marked `[[ int lockgeom=1 ]]` will\n  automatically bind to any identically-named userdata, just like non-output\n  parameters have always done. #1200 (1.11.6)\n\nOSL Standard library:\n* Extend linearstep() and smooth_linearstep() to work with color, point,\n  vector, and normal types (previously restricted to float). #994\n  (1.10.5/1.11.0)\n* Extend `transformc()` to understand translating between linear and sRGB\n  color spaces. #1013 (1.11.0)\n* `cbrt()` cube root was added to the standard library. #1164 #1166 (1.11.6)\n\nAPI changes, new options, new ShadingSystem features (for renderer writers):\n* `ShadingSystem::convert_value()` will now allow promotion of int or\n  float to `float[4]`. #940 (1.11.0)\n* Removed the varieties of `RendererServices::texture()`, `texture3d()`, and\n  `environment()` that lack the `errormessage` parameter and had been marked\n  as deprecated since OSL 1.8. #945 (1.11.0)\n* Deprecate the auto-allocation of contexts and per-thread-info. Certain\n  calls that took a `Context*` pointer that were allowed to be NULL now\n  by convention require the renderer to pass a valid context. #958 (1.11.0)\n* ShadingSystem: thread-safe/reentrant shader specification via new\n  varieties of `Parameter()`, `Shader()`, `ConnectShaders()`, and\n  `ShaderGroupEnd()` that take an explicit `ShaderGroup` reference and are\n  therefore \"stateless\" and thread-safe. If you exclusively use these new\n  methods for shader specification, it's possible for multiple threads to\n  specify shader groups simultaneously. #984, #985, #986, #1000 (1.11.0)\n  #1067 (1.11.1)\n* New ShadingSystem options:\n    - \"opt_warnings\" enables warnings about things that couldn't be\n      optimized and may be performance issues. #1010 (1.11.0)\n    - \"gpu_opt_error\" enables full error status of the subset of those\n      warnings that are also hard no-go's when executing on GPUs. #1010\n      (1.11.0)\n    - \"lazyerror\", if set to 0, will unconditionally (and non-lazily) run\n      any shader layers that still contain `error()` calls after\n      optimization, so that error messages can't be elided by optimizations\n      causing the layer to be eliminated or never run. When \"opt_warnings\"\n      is enabled, warnings will be issued about shaders that couldn't\n      optimize away all of their error calls. Note that the default value is\n      1, giving the old behavior or lazily evaluating shader layers that\n      contain error calls. #1191 (1.11.5)\n* `RendererServices::get_texture_handle()` has changed slightly to require\n  a `ShadingConntext*` parameter, and `get_texture_info()` has changed to\n  have a parameter allowing the caller to provide a `texture_thread_info`\n  handle and a context, as well as to provide a pointer to a ustring where\n  error messages should be placed. #1033 (1.11.0)\n* The LLVM JIT optimization level (controlled by the `llvm_optimize` shading\n  system attribute) now defaults to 1, not 0. That should be the best\n  performance while still having reasonable JIT times. #1114 (1.11.4)\n* We no longer automatically build the MaterialX shaders (you need to set\n  build option OSL_BUILD_MATERIALX to ON). This will eventually be deprecated\n  entirely. #1136 (1.11.5)\n* Helper varieties of ShadingSystem::Parameter() and ReParameter() that\n  handle the common cases of a single float, int, or string. #1195 #1196\n  (1.11.6)\n* `ShaingSystem::optimize_group()` now takes an optional parameter that\n  allows the caller to only do the optimize step without the JIT step.\n  #1226 (1.11.71)\n\nContinued work on experimental SIMD batched shading mode:\n* Continued work on SIMD-friendly math and noise: #1108 (1.11.4)\n* Support in LLVM_Util for various wide (SIMD) data types. #1175 (1.11.6)\n\nContinued work on experimental OptiX rendering:\n* Build option `USE_OPTIX=1` enable experimental OptiX support.\n* testshade and testrender now take `--optix` flags to run tests on OptiX.\n  You can also force either to run in OptiX mode with environment variable\n  `TESTSHADE_OPTIX=1`. #996 #1001 #1003\n* Various fixes to how strings are represented on the Cuda side. #973 (1.11.0)\n* More complete support of all the noise varieties. #980 (1.11.0)\n* Got `spline()` function working. #974 #1011 (1.11.0)\n* Work towards getting texture calls working. #974 (1.11.0)\n* printf works for multiple values. #1007 (1.11.0)\n* Work on color-related functions. #1012 (1.11.0)\n* Support for native OSL closures. #1028 #1029 (1.11.0)\n* Work on matrix ops. #1054 (1.11.1)\n* Allow init ops. #1059 (1.11.1)\n* Fixes to string closure params. #1061 (1.11.1)\n* Add support for OptiX 7 #1111 #1203 (1.11.6)\n\nPerformance improvements:\n* Constant fold array accesses even if they are out of bounds. #1035 (1.11.0)\n* Speed up the `concat()` OSL function, the new implementation is very\n  careful to avoid extra copies and unnecessary allocations. #1104,#1105\n  (1.11.3)\n* Shader performance improved slightly by better inlining during the JIT.\n  #1114 (1.11.4)\n* Range checking of matrix component access is skipped for certain cases\n  where it was unnecessary. #1174 (1.11.6)\n* LLVM JIT+optimize time has been sped up around 10% by doing a better job\n  of pruning unused functions and symbols in the generated module. #1172\n  (1.11.6)\n* `ShadingSystem::symbol_address()` no longer checks for the symbol to be\n  NULL (though it will assert on a debug build). #1237 (1.11.7.1)\n\nBug fixes and other improvements (internals):\n* Fix bug in implementation of `splineinverse()` when computing with\n  Bezier interpolation. #954 (1.10.3/1.11.0)\n* Fix bug in implementation of `transformc` when relyin on OpenColorIO for\n  color transformation math, in cases were derivatives were needed (this\n  is a rare case probably nobody ran into). #960 (1.10.3/1.11.0)\n* Improve thread-safety of the OSLCompiler itself, in case an app wants\n  to be compiling several shaders to oso concurrently by different threads.\n  #953 (1.10.3/1.11.0)\n* LPEs: forbid LPE repetitions inside groups. #972 (1.10.4/1.11.0)\n* Improve error detection and messages for badly formed serialized shaders.\n  #1026 (1.11.0)\n* Fix OSLQuery::init() return value, which was false when it should have\n  been true. #1030 (1.11.0)\n* Change the way oslc frees long chaines of nodes, which fixes a possible\n  stack overflow crash for extremely complicated parse trees. #1031 (1.11.0)\n* Properly respect the `lockgeom` default when building a shading group\n  from serialized commands. #1032 (1.11.0)\n* Fix runtime crash when optional texture argument \"missingalpha\" was used.\n  #1044 (1.11.0)\n* Fix the implementation of division-with-derivs so that the main value\n  always exactly matches the results of division of values without derivs.\n  Previously there could be some LSB differences. #1066 (1.11.1)\n* Fix a number of places that weren't properly \"locale-independent\".\n  #1075 (1.11.1)\n* Bug fix: fix bug/assertion in cases where layer merging tried to combine\n  layers that were \"entry layers.\" #1103 (1.11.3)\n* Fix Windows bug where stdosl.h would not be found properly if oslc.exe\n  was in a file path containing a directory name starting with \"n\". (Because\n  of interplay between Windows use of backslash for directory separtors and\n  C/C++/OSL use of backslash as escape sequences in strings.) #1101 (1.11.3)\n* Remove the internal attribute query cache, in practice it seemed to be\n  slowing things down. #1109 (1.11.4)\n* `debug_nan` and `debug_uninit` work more accurately for matrices --\n  fewer false positives. #1174 (1.11.6)\n* Fix bug that sometimes caused the optimizer to misunderstand which\n  arguments to `regex_search` and `regex_match` were written. #1186 (1.11.6)\n\nInternals/developer concerns:\n* Switch much of the internals where we do string formatting using printf-like\n  conventions to errorf(), etc., naming convention, reserving the non-f\n  names for future use with C++20 std::format/python conventions. #1076\n  (1.11.3)\n* Remove pointless assertions from the TypeSpec class. #1079\n* Assertion overhaul: use OSL_ASSERT/OSL_DASSERT instead of borrowing from\n  OIIO's dassert.h. Note that OSL_ASSERT always tests, prints error if the\n  test fails, but then only aborts for debug builds (no abort for release\n  builds). In contrast, OSL_DASSERT does all for debug builds, and none\n  (not even the test) for release builds. #1080 #1087 (1.11.3)\n* Refactor the implementation of the `Dual` template to support more\n  efficient code generation when used in vectorized loops (this will be\n  important for the upcoming batch shading extensions). #1088 (1.11.3)\n* Refactor of much of the Imath replicated code to support better code\n  generation when used in vectorized loops. #1096 (1.11.3)\n* Refactor oslconfig.h, split all the compiler/C++version detection and\n  differing macros into platform.h. #1102 (1.11.3)\n* Certain runtime error messages have been improved by demangling the names\n  of involved variables and their scopes. #1179 (1.11.6)\n* LLVM now JITs code for the specific host architecture. #1182 (1.11.6)\n* Change all bare std::ofstream and ifstream to OIIO::ofstream/ifstream.\n  This ensures that they are UTF-8 safe and compile properly on MINGW.\n  #1188 (1.11.6)\n\nBuild & test system improvements:\n* Major overhaul of the CMake build system to upgrade minimum of CMake 3.12\n  and us many features that this makes available. #1072 #1074 #1143\n  (1.11.1+)\n  Highlights:\n    - All optional dependencies (e.g. \"Pkg\") now can be disabled (even if\n      found) with cmake -DUSE_PKG=0 or environment variable USE_PKG=0.\n      Previously, some packages supported this, others did not.\n    - All dependencies can be given find hints via -DPkg_ROOT=path or by\n      setting environment variable Pkg_ROOT=path. Previously, some did, some\n      didn't, and the ones that did had totally inconsistent names for the\n      path hint variable (PKG_HOME, PKG_ROOT_DIR, PKG_PATH, etc).\n    - Nice color coded status messages making it much more clear which\n      dependencies were found, which were not, which were disabled.\n    - Use standard BUILD_SHARED_LIBS to control shared vs static libraries,\n      replacing the old nonstandard BUILDSTATIC name.\n    - Use correct PUBLIC/PRIVATE marks with target_link_libraries and\n      target_include_directories, and rely on cmake properly understanding\n      the transitive dependencies.\n    - CMAKE_DEBUG_POSTFIX adds an optional suffix to debug libraries.\n    - CMAKE_CXX_STANDARD to control C++ standard (instead of our nonstandard\n      USE_CPP).\n    - CXX_VISIBILITY_PRESET controls symbol visibility defaults now, not\n      our nonstandard HIDE_SYMBOLS. And the default is to keep everything\n      hidden that is not part of the public API.\n    - The ENABLERTTI build option has been renamed `ENABLE_RTTI`.\n    - Config based install and usage.\n* testshade:\n    - Make sure that no unreported errors accumulated in the texture system\n      or image cache. #939 (1.11.0)\n    - Check that no leftover errors are in the TextureSystem or ImageCache\n      at the end of the test (that would indicate that someplace in OSL we\n      are failing to check texture errors). #939 (1.10.3/1.11.0)\n    - `testshade -o` : now `null` as the filename will not produce any\n      output.  This is handy to mark a renderer output but without storing\n      the results as an image. #1193 (1.11.6)\n    - `--vary_pdxdy`, `--vary_udxdy` and `--vary_vdxdy` allow a way to\n      force P, u, v to have varying derivatives (for testing purposes).\n      #1227 (1.11.7.1)\n* Supporting dependencies:\n    - Build script finding of LLVM is now more robust to certain library\n      configurations of llvm, particularly where everything is bundled in\n      just one libLLVM without a separate libLLVMMCJIT. #976 (1.10.4/1.11.0)\n    - Support for LLVM 4 has been dropped. #981 (1.11.0)\n    - Simplified finding of flex/bison, rely more on CMake's built-in\n      flex/bison find packages. #977 (1.11.0)\n    - Verified that OSL can be built with Clang 8 and LLVM 8.0.\n    - When building against recent OIIO versions whose Sysutil supports\n      stack dumps, crashes in the command line tools (including testshade)\n      will print stack traces to aid debugging. #1019 (1.11.0)\n    - Improve finding of OpenEXR/IlmBase. #1022 (1.11.0)\n    - Fix problems when building against Qt 5.13 due to deprecated calls.\n      #1043 (1.11.0)\n    - Fixes for CI when using OIIO 2.1 master that has changed its own cmake\n      minimum to 3.12. #1065 (1.11.1)\n    - Improvement for how the build system figures out which LLVM static\n      libraries are needed. #1070 (1.11.1)\n    - Improvements in finding Partio. #1125 (1.11.5)\n    - Fixes to support Qt 5.15 (currently, osltoy is the only component that\n      uses Qt). #1204 (1.11.6)\n    - Better able to find LLVM when the system installation of LLVM has its\n      llvm-config named `llvm-config-64`. #1238 (1.11.7.1)\n    - Fixes for OIIO 2.2 which has eliminated use of tinyformat in favor of\n      always relying on fmtlib. #1242 (1.11.7.1)\n* A new build-time CMake variable `OSL_LIBNAME_SUFFIX` lets you optionally\n  add a custom suffix to the main libraries that are built. (Use with\n  caution.) #970 (1.11.0)\n* Add a build-time option GLIBCXX_USE_CXX11_ABI to force the \"new/old string\n  ABI\" to something other than the default for your version of gcc. #995\n  (1.10.5/1.11.0)\n* stdosl.h and shaders are now installed in PREFIX/share/OSL/shaders. This\n  should not need any changes to shaders, oslc will know where to find them.\n  The location can be overridden by build-time option `OSL_SHADER_INSTALL_DIR`.\n  #956 (1.10.0)\n* When OptiX mode is enabled (USE_OPTIX=1), the testsuite will some tests in\n  an additional time forcing OptiX mode: any test containing a file named\n  `OPTIX` in its test directory; or all tests if environment variable\n  `TESTSUITE_OPTIX=1` (except tests that contain a file named `NOOPTIX` in\n  their directory. #1004 (1.10.0)\n* Allow OSL to build with `USE_LLVM_BITCODE` enabled on Windows. #998 (1.10.0)\n* Various Windows compilation improvements. #1017 #1020\n* Fix signed/unsigned comparison warnings. #1037 (1.11.0)\n* Fixes for MinGW compiler on Windows. #1047 #1048 (1.11.0)\n* Scripts and tests utilizing Python have all been visited to make sure they\n  are compatible with both Python 2.x and Python 3.x. #1071 (1.11.1)\n* Build: on OSX, better logic about the OIIO plugin must be built as a\n  module or as a shared library. #1078 (1.11.3/1.10.8)\n* Removed support for Boost Wave for preprocessing osl input. We now always\n  use clang library components for preprocessing. #1089 (1.11.3)\n* Add an optional build-time `EXTRA_WARNINGS` option (default: OFF) that\n  enables even more picky than usual warnings. Fix many warnings that cropped\n  up during testing, mostly related to unused function parameters. #1106 (1.11.3)\n* The testsuite can run in parallel, with a number of threads set by the\n  environment variable `CTEST_PARALLEL_LEVEL`. #1119 (1.11.4)\n* oslconfig.h is now generated by a cmake configure_file step, from\n  oslconfig.h.in. #1141 (1.11.5)\n* Use ASWF docker images to speed up many of the CI matrix entries, as well\n  as to exactly test several VFX Platform specs. #1169 (1.11.6)\n* Fix typo that botched the version in the .pc pkgconfig file. #1168 (1.11.6)\n* CI test against gcc9 and gcc10. #1192 (1.11.6)\n* Propagate RTTI compile options to exported cmake config. #1194 (1.11.6)\n\nDocumentation:\n* Make it clear that the documentation is licensed under the CC-BY-4.0\n  license.\n* testsuite/example-deformer contains an example of using OSL on a\n  collection of points in a manner that you might use to implement a\n  deformer. #1199 (1.11.6)\n* `testrender` now contains a progressive sampler, which might be a good\n  example for others writing renderers. #1202 (1.11.6)\n* Fix incorrect descripton in `spline()` regarding the number of spline\n  values required for each interpolation type. #1239 (1.11.7.1)\n\n\nRelease 1.10.13 -- 1 Aug 2020 (compared to 1.10.12)\n---------------------------------------------------\n* Small changes to build cleanly against OIIO 2.2.\n* Fixes to build against fmtlib 7.0. #1156 #1219\n* Docs fixes related to matrix constructors with coordinate systems names.\n\nRelease 1.10.12 -- 1 Jul 2020 (compared to 1.10.11)\n---------------------------------------------------\n* Fix bug in regex_search and regex_match where the optimizer could\n  misunderstand which parameters were written. #1186\n* Fix warnings when building with gcc9 or gcc10.\n* Build cleanly against Qt5.15. #1204\n\nRelease 1.10.11 -- 1 Jun 2020 (compared to 1.10.10)\n---------------------------------------------------\n* Fixes to support building against LLVM 9 on some distributions. #1171\n* When building against LLVM 10, enforce requirement for C++14 with\n  appropriate warning when using C++11. #1135\n* Switch to using CMAKE_CXX_STANDARD as the main way to request particular\n  C++ standard versions. (USE_CPP should continue to work, though.)\n* Fixes to MINGW compile, and make sure all stream file I/O is UTF-8 safe.\n  #1188\n\nRelease 1.10.10 -- 9 May 2020 (compared to 1.10.9)\n--------------------------------------------------\n* Support for building against LLVM 10.0. #1128 #1162\n  Note that LLVM 10 can only be used if you are building OSL with C++14\n  or newer.\n* Change default of `OSL_BUILD_MATERIALX` to OFF. This will probably be\n  deprecated entirely for 1.11's (or 2.0's) final release. But in the mean\n  time, we have drifted out of sync with MX, which has their own copies of\n  this now, so we're disabling building of these shaders by default.\n\nRelease 1.10.9 -- 1 Feb 2020 (compared to 1.10.8)\n--------------------------------------------------\n* Windows fix for incorrectly interpreting paths to oslc.exe as if they were\n  \"escaped\" strings -- for example, `\"c:\\path\\to\\new\\oslc\"` should not be\n  interpreted as `\"c:\\path<tab>o<newline>ewoslc\"`. #1101\n* Speed up OSL `concat()` function. #1103\n\nRelease 1.10.8 -- 1 Dec 2019 (compared to 1.10.7)\n--------------------------------------------------\n* Fix dual implementation of division so that the value is consistent with\n  regular division (#1066)\n* Python3 safety of tests and scripts. #1071\n* Handle escaped string literals (like \"\\tfoo\\n\") more correctly. #1073\n* Fixes to ensure locale independence. #1075\n* Build: on OSX, better logic about the OIIO plugin must be built as a\n  module or as a shared library. #1078\n* Remove pointless assertions from the TypeSpec class. #1079\n\nRelease 1.10.7 -- Oct 1, 2019 (compared to 1.10.6)\n--------------------------------------------------\n* Adjust for deprecated material in more recent Qt releases. #1043\n* Fixes for MinGW compiler. #1047\n* Texture \"missingalpha\" optional parameter generated incorrect code and\n  crashed. #1044\n* Fix incorrect optimizations surrounding 'exit()' calls in the middle\n  of certain shader code blocks. #1051\n* LLVM 9 / clang 9 compatibility. #1058\n* Fixes to Travis CI system to keep up with OIIO master recently upgrading\n  its minimum required CMake. #1065\n\nRelease 1.10.6 -- Jul 4, 2019 (compared to 1.10.5)\n--------------------------------------------------\n* Build: Fixes to FindOpenEXR.cmake. #1022\n* ShadingSystem: when building a shader group from serialized commands,\n  respect the global lockgeom default. #1032\n\nRelease 1.10.5 -- May 1, 2019 (compared to 1.10.4)\n--------------------------------------------------\n* Extend linearstep() and smooth_linearstep() to work with color, point,\n  vector, and normal types (previously restricted to float). #994\n* Improve oslc type error detection for variable declarations with init\n  expressions. Note that this may flag some warnings and errors that went\n  undetected before, involving initialization assignments of incompatible\n  types. #991, #993\n* Add a build-time option GLIBCXX_USE_CXX11_ABI to force the \"new/old string\n  ABI\" to something other than the default for your version of gcc. #995\n\nRelease 1.10.4 -- Apr 1, 2019 (compared to 1.10.3)\n--------------------------------------------------\n* LPEs: forbid LPE repetitions inside groups. #972\n* Build process: build script finding of LLVM is now more robust to certain\n  library configurations of llvm, particularly where everything is bundled\n  in just one libLLVM without a separate libLLVMMCJIT. #976\n* oslc: Improve warnings about ill-advised use of the comma operator. #978\n* oslc: Fix an assertion/crash when passing initialization-lists as\n  parameters to a function, where the function argument expected was as\n  array. #983\n* oslc: Fix an assertion/crash for certain type constructors of structs,\n  where the struct name was not declared. (This is an incorrect shader,\n  but of course should have issued an error, not crashed.) #988\n* Note: The experimental OptiX path is not expected to work in this branch!\n  Development has continued in the 'master' branch. If you are interested in\n  testing the OptiX support while it's under development, please do so with\n  the master branch, because fixes and improvements to the OptiX support\n  are not being backported to the 1.10 branch.\n* Tested and verified that everything builds and works correctly with\n  Clang 8 and LLVM 8.0.\n\nRelease 1.10.3 -- Feb 1, 2019 (compared to 1.10.2)\n--------------------------------------------------\n* oslc: Writing to function parameters not marked as `output` was only\n  recently properly recognized as an error (it was documented as illegal\n  all along). Now we demote to a warning, treating it as a full error was\n  too disruptive. #944 (1.10.3)\n* testshade: Check that no leftover errors are in the TextureSystem or\n  ImageCache at the end of the test (that would indicate that someplace in\n  OSL we are failing to check texture errors). #939 (1.10.3)\n* Improve oso output efficiency. #938 (1.10.3)\n* oslc: Fix bug related to counting the proper number of values used for\n  array default value initialization. #948 (1.10.3)\n* oslc: Slight modification to the formatting of floating point values in\n  the oso file to ensure full precision preservation for float values.\n  #949 (1.10.3)\n* oslc: Fix crash when encountering empty-expression `for (;;)`. #951 (1.10.3)\n* oslc: Fix bug in code generation of certain `while` loops that directly\n  tested a variable as a zero/nonzero test, such as:\n  ```\n      i = 3;\n      while (i)\n          --i;\n  ```\n  whereas the following had worked (they should have been identical):\n  ```\n      i = 3;\n      while (i != 0)\n          --i;\n  ```\n  #947 (1.10.3/1.11.0)\n* Fix bug in implementation of `splineinverse()` when computing with\n  Bezier interpolation. #954 (1.10.3)\n* Fix bug in implementation of `transformc` when relyin on OpenColorIO for\n  color transformation math, in cases were derivatives were needed (this\n  is a rare case probably nobody ran into). #960 (1.10.3)\n* Improve thread-safety of the OSLCompiler itself, in case an app wants\n  to be compiling several shaders to oso concurrently by different threads.\n  #953 (1.10.3)\n\nRelease 1.10 -- Dec 1, 2018 (compared to 1.9)\n--------------------------------------------------\nDependency and standards changes:\n* **LLVM 4.0 / 5.0 / 6.0 / 7.0**: Support has been removed for LLVM 3.x,\n  added for 6.0 and 7.0.\n* **OpenImageIO 1.8/2.0+**: This release of OSL should build properly against\n  OIIO 1.8 or 2.0. Support has been dropped for OIIO 1.7.\n\nNew back-end targets:\n* **OptiX** Work in progress: Experimental back end for NVIDIA OptiX GPU ray\n  tracing toolkit. #861, #877, #902\n    - Build with `USE_OPTIX=1`\n    - Requires OptiX 5.1+, Cuda 8.0+, OpenImageIO 1.8.10+, LLVM >= 5.0 with\n      PTX target enabled.\n    - New utility **testoptix** is an example of a simple OptiX renderer\n      that uses OSL for shaders.\n    - Work is in progress to support the majority of OSL, but right now it\n      is restricted to a subset. All the basic math, most of the\n      standard library, noise functions, strings (aside from if you create\n      entirely new strings in the middle of a shader), and closures work.\n      The biggest thing not working yet is textures, but those are coming\n      soon.\n\nNew tools:\n* **osltoy** : GUI tool for interactive shader editing and pattern\n  visualization (somewhat in the style of [Shadertoy](http://shadertoy.com).\n  #827, #914, #918, #926 (1.10.0)\n* **docdeep** : This Python script (in src/build-scripts/docdeep.py) is an\n  experimental tool to scrape comments from code and turn them into\n  beautiful Markdeep documentation. (A little like a VERY poor man's\n  Doxygen, but markdeep!) Experimental, caveat emptor. #842 (1.10.0)\n\nOSL Language and oslc compiler:\n* In OSL source code, we now encourage the use of the generic \"shader\" type\n  for all shaders, and it is no longer necessary or encouraged to mark\n  the OSL shader with a specific type, \"surface\", \"displacement\", etc.\n  From a source code and/or `oslc` perspective, all shaders are the same\n  generic type. A renderer may, however, have different \"uses\" or \"contexts\"\n  and may additional runtime perform error checking to ensure that the\n  shader group you have supplied for a particular \"use\" does not do things\n  or access globals that are not allowed for that use. #899\n* C++11 style Initializer lists. (#838) This lets you have constructs like\n\n        // pass a {} list as a triple, matrix, or struct\n        void func (point p);\n        func ({x, y, z});\n\n        // Assign {} to a struct if the types match up\n        struct vec2 { float x, y; };\n        vec2 v = {a,b};\n\n        // Compact 'return' notation, it knows to construct the return type\n        vec2 func (float a, float b)\n        {\n            return {a, b};\n        }\n\n* osl now warns when it detects duplicate declarations of functions with\n  the exact same argument list, in the same scope. #746\n* osl now correctly reports the error when you write to a user-function\n  parameter that was not declared as `output` (function params are by\n  default read-only, but a shortcoming in oslc has prevented that error\n  from being issued). #878 (1.10.0)\n* Fix oslc crash with invalid field selection syntax. #835 (1.10.0/1.9.6)\n* oslc fix to properly handle command line arguments if the shader file is\n  not the last argument on the command line. #841 (1.10.0/1.9.7)\n* oslc: when using boost.wave for preprocessing, fix whitespace insertion\n  #840 and windows path separators #849. #841 (1.10.0/1.9.7)\n* oslc: Fix bug/undefined behavior when trying to format/printf a struct.\n  #849 #841 (1.10.0/1.9.7)\n* New rules for how polymorphic function variants are chosen: Matches are\n  now ranked in an objective way that no longer depends on declaration\n  order. Type coercions are preferred in the following order of descending\n  score: exact match, int -> float, float -> triple, spatial triple ->\n  spatial triple, any triple -> triple. If there is a tie for passed\n  arguments, return types will break the tie. If there is still a tie or\n  truly ambiguous case, a warning will be printed explaining the choices and\n  which was chosen. #844 (1.10.0)\n* It is now a warning to define the same function twice in the same scope.\n  #853 (1.10.0)\n* A shader input parameter marked with metadata `[[ int allowconnect = 0 ]]`\n  will disallow runtime connections via `ConnectShaders()`, resulting in an\n  error. #857 (1.10.0)\n* oslc command-line argument `-Werror` will treat all warnings as hard\n  errors (failed compilation). #862 (1.10.0)\n* `#pragma osl nowarn` will suppress any warnings arising from code on the\n  immediately following line of that source file. #864 (1.10.0)\n* oslc error reporting is improved, many multi-line syntactic constructs\n  will report errors in a more intuitive, easy-to-understand line number.\n  #867 (1.10.0)\n* Faster parsing of very large constant initializer lists for arrays in OSL.\n  We found an inadvertent O(n^2) behavior when parsing initializer lists.\n  It used to be that a constant table in the form an array of 64k floats\n  took over 10s to compile, now it is 50x faster. #901\n* Resolution of ambiguous return type functions (such as noise) has been\n  improved when their results are used as arguments to type constructors.\n  #931 (1.10.1)\n\nOSL Standard library:\n* There has been a change in the appearance to Cell noise and Gabor noise.\n  This is to fix a bug that made an incorrect pattern for certain negative\n  exact-integer values for cellnoise, and in lots of places for Gabor noise.\n  The only way to fix it was to potentially change the appearance for some\n  shaders. Sorry. If this is a real problem, let us know, perhaps we can\n  make a build-time switch that will let you use the old buggy noise? But\n  since this is a \"2.0\" release, we figured it was as good a time as ever to\n  let it change to the correct results. #912 (1.10.0)\n\nShaders:\n* Contributed shader library changes:\n    * mandelbrot.osl: computes Mandelbrot and Julia images. #827 (1.10.0)\n* MaterialX support:\n    * Improved support for MaterialX 1.36: add sin, cos, tan, atan2, ceil,\n      sqrt, exp, determinant, ln, transpose, sign, rotate, transforms,\n      rgb/hsv convert, extract, separate, tiledimage. Rename exponent ->\n      power, pack -> combine, hsvadjust -> hueshift. Add some color2/4\n      mutual conversion operators. Fixes to ramp4, clean up texture mapping\n      nodes, fixes to triplanarprojection weighting. Extend add/sub/mul/div\n      to include matrices. #903, #904, #905, #907, #909 (1.9.10/1.10.0)\n\nAPI changes, new options, new ShadingSystem features (for renderer writers):\n* ShadingSystem API:\n    * It is now permitted to ConnectShaders a single component of a\n      color/point/vector/normal to a float and vice versa. #801 (1.10.0)\n    * An older version of ShadingSystem::execute, which had been marked\n      as deprecated since OSL 1.6, has been fully removed. #832 (1.10.0)\n    * `ShadingSystem::Shader()` now has all three parameters required (none\n      are optional), though the \"use\" parameter no longer has any meaning.\n      (It will be deprecated and removed in a future release.) #899\n    * `ShadingSystem::optimize_group()` now takes an optional pointer to a\n      `ShadingContext`, which it will use if needed (if passed NULL, one\n      will be internally allocated, used, and freed, as before). #936\n* ShadingSystem attributes:\n    * New `\"allow_shader_replacement\"` (int) attribute, when nonzero, allows\n      shaders to be specified more than once, replacing their former\n      definitions. The default, 0, considers that an error, as it always\n      has. #816 (1.10.0).\n    * New developer option `\"llvm_output_bitcode\"` dumps the bitcode for each\n      group, even if other debug options aren't turned on, and also any\n      dumped bitcode will save as text as well as binary. #831 (1.10.0)\n    * New attribute `\"error_repeats\"`, if set to non-zero, turns off the\n      suppression of multiple identical errors and warnings. Setting it\n      (even to its existing value) also clears the \"already seen\" lists.\n      #880, #883 (1.10.0/1.9.9/1.8.14)\n* Shader group attributes:\n    * New attributes that can be queried with `getattribute()`:\n      `\"globals_read\"` and `\"globals_write\"` retrieve an integer bitfield\n      that can reveal which \"globals\" may be read or written by the shader\n      group. The meaning of the bits is given by the enum class `SGBits`\n      in `oslexec.h`. #899\n* RendererServices API:\n    * Older versions of RendererServices texture functions, the old ones\n      with no errormessage parameter, which were documented as deprecated\n      since 1.8, are now marked OSL_DEPRECATED. #832 (1.10.0)\n* OSLCompiler API:\n    * Improved error reporting when compiling from memory buffer. The\n      `OSLCompiler::compile_buffer()` method now takes an optional filename\n      parameter that will make error messages attribute the right \"file\"\n      (e.g., `Error: foo.osl:5...` rather than `<buffer>:5...`). #937 (1.10.2)\n* Miscellaneous:\n    * liboslnoise: Properly hide/export symbols. #849 (1.10.0/1.9.7)\n    * The behavior of the \"searchpath:shader\" attribute, used for finding\n      `.oso` files when shaders is requested, has been modified. If no\n      search path is specified, the current working directory (\".\") will\n      be searched. But if there is a search path attribute specified, only\n      those directories will be searched, with \".\" only searched if it is\n      explicitly included in the search path value. #925 (1.10.0)\n\nBug fixes and other improvements (internals):\n* The context's `texture_thread_info` is now properly passed to the\n  RenderServices callbacks instead of passing NULL. (1.10.0)\n* Symbols are enabled in the JIT, allowing Intel Vtune profiler to correctly\n  report which JITed OSL code is being executed. #830 (1.10.0)\n* ASTNode and OSLCompilerImpl -- add info() and message() methods to\n  complement the existing error and warning. #854 (1.10.0)\n* Fix incorrect array length on unbounded arrays specified by relaxed\n  parameter type checking. #900 (1.9.10/1.10.0)\n* oslc bug fix: the `regex_search()`/`regex_match()` functions did not properly\n  mark their `results` output parameter as write-only. This was never\n  noticed by anyone, but could have resulted in incorrect optimizations.\n  #922 (1.10.0)\n* When reading `.oso` files, the parser is now more robust for certain ways\n  that the oso file might be corrupted (it's more forgiving, fewer possible\n  ways for it to abort or assert). #923 (1.10.0)\n* Bug fixes related to incorrect reliance on OIIO's `ustring::operator int()`.\n  It's being removed from OIIO, so wean ourselves off it. #929 (1.10.0)\n* Certain texture3d lookups with derivatives could crash. #932 (1.10.1)\n* Fix oslc assertion crash when a struct parameter was initialized with\n  a function call. #934 (1.10.1)\n\nBuild & test system improvements:\n* Appveyor CI testing for Windows. #849,852,855 (1.10.0/1.9.7)\n* Our new policy is to disable `STOP_ON_WARNING` for release branches, to\n  minimize build breaks for users when a new compiler warning is hit. We\n  still enable it in development/master branches as well as any CI build\n  in any branch. #850 (1.10.0/1.9.7)\n* Testsuite is now Python 2/3 agnostic. #873 (1.10.0)\n* Build the version into the shared library .so names. #876\n  (1.8.13/1.9.8/1.10.0)\n* Update to fix with OpenImageIO 1.9. #882,#889\n* Flex/bison fixes on Windows. #891\n* Fix Windows build break with iso646.h macros. #892\n* Fix warnings on gcc 6. #896\n* Fix errors building with MSVC. #898\n* Fixes to build with clang 7, and to use LLVM 7. #910, #921 (1.10.0)\n* Fix warnings on gcc 8. #921 (1.10.0)\n* Build system: the variables containing hints for where to find IlmBase\n  and OpenEXR have been changed to `ILMBASE_ROOT_DIR` and `OPENEXR_ROOT_DIR`\n  (no longer `ILMBASE_HOME`/`OPENEXR_HOME`). Similarly, `OPENIMAGEIO_ROOT_DIR`\n  is the hint for custom OIIO location (no longer OPENIMAGEIOHOME). #928\n* Eliminated some in-progress MaterialX tests, they weren't in good order,\n  we will do it differently if we want to add MX tests in the future. #928\n* Build options `OSL_BUILD_SHADERS` and `OSL_BUILD_MATERIALX` (both default\n  to ON) can be used to disable building of all shaders or MX shaders,\n  respectively. #935 (1.10.1)\n\nDocumentation:\n* `osltoy` documentations in `doc/osltoy.md.html` (1.10.0).\n\n\n\nRelease 1.9.13 -- 1 Dec 2018 (compared to 1.9.12)\n------------------------------------------------\n* Fix crash with texture3d lookups with derivatives. #932\n* Fix oslc crash when a struct parameter is initialized with a function call\n  that returns a structure. #934\n\nRelease 1.9.12 -- 1 Nov 2018 (compared to 1.9.11)\n------------------------------------------------\n* Fix oslc read/write error for `regex_search`/`regex_match` #922\n* Make oso reading more robust to certain broken inputs. #923\n* Internals: make safe for some changes coming to ustring API in OIIO\n  master. #929\n* Several docs fixes.\n\nRelease 1.9.11 -- 1 Oct 2018 (compared to 1.9.10)\n------------------------------------------------\n* Full support for using LLVM 6.0 and 7.0. #913, #919\n* Support for building with gcc 8. #921\n* Fix testrender bug with undefined order of operations (only was a problem\n  with gcc5 and clang7). #916\n\nRelease 1.9.10 -- 1 Sep 2018 (compared to 1.9.9)\n------------------------------------------------\n* Fix Windows compile of the flex/bison compiler components. #891\n* Fix for compatibility with OIIO 1.9.\n* Fix incorrect array length on unbounded arrays specified by relaxed\n  parameter type checking. #900\n* Speed up oslc parsing of long constant initializer lists. #901\n* Add more functions to color2.h, color4.h, vector2.h, vector4.h: ceil,\n  sqrt, exp, log2, log, sign, sin, cos, tan, asin, acos, atan2. #903, #904\n* Improved support for MaterialX 1.36: add sin, cos, tan, atan2, ceil, sqrt,\n  exp, determinant, ln, transpose, sign, rotate, transforms, rgb/hsv convert,\n  extract, separate, tiledimage. Rename exponent -> power, pack -> combine,\n  hsvadjust -> hueshift. Add some color2/4 mutual conversion operators.\n  Fixes to ramp4, clean up texture mapping nodes, fixes to triplanarprojection\n  weighting. Extend add/sub/muldiv to include matrices. #903, #904, #905\n\nRelease 1.9.9 -- 1 May 2018 (compared to 1.9.8)\n-----------------------------------------------\n* New SS attribute `\"error_repeats\"`, if set to non-zero, turns off the\n  suppression of multiple identical errors and warnings. Setting it (even to\n  its existing value) also clears the \"already seen\" lists. #880\n  (1.8.14/1.9.9)\n* Update to fix with some changes in OpenImageIO 1.9. #882\n\nRelease 1.9.8 -- 1 Apr 2018 (compared to 1.9.7)\n-----------------------------------------------\n* Build the version into the shared library .so names. #876 (1.8.13/1.9.8)\n\nRelease 1.9.7 -- 1 Feb 2018 (compared to 1.9.6)\n-----------------------------------------------\n* oslc fix to properly handle command line arguments if the shader file is\n  not the last argument on the command line. #841\n* oslc: when using boost.wave for preprocessing, fix whitespace insertion\n  #840 and windows path separators #849.\n* oslc: Fix bug/undefined behavior when trying to format/printf a struct.\n  #849\n* liboslnoise: Fix symbol export/hiding. #849\n* Misc build issue cleanup on Windows. #849\n* For release branches, we no longer have builds consider every compiler\n  warning to be an error (except in master or for CI builds).\n\nRelease 1.9.6 -- 1 Jan 2018 (compared to 1.9.5)\n-----------------------------------------------\n* Fix oslc crash with invalid field selection syntax. #835\n* Certain texture calls were inadvertently not passing in thread data,\n  forcing the texture system to look it up again redundantly. #829\n\n\nRelease 1.9 -- 4 December 2017 (compared to 1.8)\n--------------------------------------------------\n\nDependency and standards changes:\n* **C++11 required**: OSL 1.9 requires a minimum standard of C++11. It\n  should also build against C++14 and C++17.\n* **LLVM 3.5 / 3.9 / 4.0 / 5.0**: Support has been added for LLVM 3.9, 4.0,\n  and 5.0. Support has been removed for for LLVM 3.4.\n* **OpenImageIO 1.7+**: This release of OSL should build properly against\n  OIIO 1.7 or newer. You may find that 1.6 is still ok, but we are not doing\n  any work to ensure that.\n* **CMake >= 3.2.2**\n* **Boost >= 1.55**\n* **OpenEXR/IlmBase >= 2.0** (recommended: 2.2)\n\nLanguage features:\n* New preprocessor symbols: `OSL_VERSION_MAJOR`, `OSL_VERSION_MINOR`,\n  `OSL_VERSION_PATCH`, and `OSL_VERSION` (e.g. 10900 for 1.9.0) reveal the\n  OSL release at shader compile time. #747 (1.9.0)\n* Structure constructors: If you have a struct `S` comprising fields with\n  types T1, T2, ..., you may now have an expression `S(T1 v2, T2 v2,...)`\n  that constructs and returns an `S` with those field values, much in the\n  same way that you can say `color(a,b,c)` to construct a color out of\n  components a, b, c.  #751 (1.9.0)\n* User-defined operator overloading: If you make a new (struct) type, it\n  is possible to define overloaded operators, like this:\n\n      struct vec2 { float x; float y; };\n\n      vec2 __operator__add__ (vec2 a, vec2 b) { return vec2(a.x+b.x, ay+b.y); }\n\n      vec2 a, b, c;\n      a = b + c;   // chooses __operator__add__()\n\n  This can be done with any of the operators, see the OSL Language Spec PDF\n  for details. #753 (1.9.0)\n\nStandard library additions/changes:\n* `getattribute (\"osl:version\", intvar)` at runtime can reveal the OSL\n  version on which the shader is being executed. #747 (1.9.0)\n* `pointcloud_search()/pointcloud_get()` have more flexibility in what type\n  of data it may retrieve: you can now retrieve arrays, if that is what is\n  stored per-point in the point cloud (for example, a `float[4]`).\n  #752 (1.9.0)\n* `smoothstep()` has been extended to `T smoothstep(T edge0, T edge1, T x)`\n  for T of any the `triple` types (previously, `smoothstep` only came in\n  the `float` variety). #765 (1.9.0/1.8.10)\n* `mix()` has been extended to support\n      `color closure mix (color closure A, color closure B, color x)`\n  #766 (1.9.0/1.8.10)\n* `hashnoise()` is like cellnoise (1D, 2D, 3D, or 4D input, 1D or 4D output\n  on [0,1]), but is discontinuous everywhere (versus cellnoise, which is\n  constant within each unit cube and discontinuous at at integer coordinates).\n  #775 (1.9.0/1.8.10)\n* `int hash (...)` has been extended to take arguments that are int, float,\n  2 floats, point, or point+float. #775 (1.9.0/1.8.10)\n* `transformc()` can now perform any color transformations understood by\n  OpenColorIO (assuming OCIO support was enabled when OSL was build, and that\n  a valid OCIO configuration is found at runtime). #796 (1.9.1) Also,\n  `transformc()` now fully supports derivatives in all cases. #798 (1.9.1)\n\nContributed shader library changes:\n* New headers: color2.h, color4.h, vector2.h, vector4.h. Technically these\n  are not part of the OSL specification and standard library, but are\n  \"contributed\" code that you may find handy. They implement 2- and 4-\n  component colors (RA and RGBA) and 2D and 4D vectors. #777 (1.9.1)\n* A full complement of MaterialX shaders is now included in the OSL\n  distribution. #777 (1.9.1)\n\nAPI changes, new options, new ShadingSystem features (for renderer writers):\n* ShadingSystem API changes:\n    * New `set_raytypes()` call sets the known raytypes (on and off) for\n      a shader group for subsequent optimization. This lets you combine ray\n      specialization with lazy compilation. #733 (1.9.0)\n    * `Parameter()` is now less strict about type checking when setting\n      parameter instance values. In particular, it's now ok to pass a\n      `float` value to a \"triple\" (color, point, etc.) parameter, and to\n      pass one kind of triple when a different kind of triple was the\n      declared parameter type. In this respect, the rules now more closely\n      resample what we always allowed for `ConnectShaders`. #750 (1.9.0)\n    * More optional `Parameter()` type checking relaxation: if the\n      ShadingSystem attribute `\"relaxed_param_typecheck\"` is nonzero, an\n      array of floats may be passed for float aggregates (e.g. color) or\n      arrays of float aggregates, as long as the total number of floats\n      matches. For example, with this attribute turned on, a `float[3]`\n      may be passed as a parameter that expected a `vector`. Also, an `int`\n      may be passed to a `float` parameter, and an `int[1]` may be passed\n      to an `int` parameter. #794,#797 (1.9.1)\n    * A new, optional, slightly relaxed policy for type checking what is\n      passed via `Parameter()`\n    * `Shader()` will now accept the name of the shader as if it were the\n      filename, with trailing `.oso`, and it will be automatically stripped\n      off. #741 (1.9.0)\n    * `convert_value()` now allows conversions between `float[3]` and triple\n      values. #754 (1.9.0)\n* ShadingSystem attribute additions/changes:\n    * `\"relaxed_param_typecheck\"` (default=0) enables more relaxed type\n      checking of `Parameter()` calls: arrays of float may be passed to\n      parameters expecting a float-aggregate or array thereof, and an `int`\n      may be passed to a parameter expecting a `float`, and an `int[1]` may\n      be passed to an `int` parameter. #794,#797 (1.9.1)\n* Fixed `ClosureComponent` to work with SSE alignment requirements. #810\n  (1.9.3)\n\nPerformance improvements:\n* Shader JIT time is improved by about 10% as a result of pre-declaring\n  certain function addresses instead of relying on LLVM to use dlsym() calls\n  to find them within the executable. #732 (1.9.0)\n* The runtime cost of range checking array accesses has been reduced by\n  about 50%. #739 (1.9.0)\n* Runtime optimization: Constant folding of `%` operation. #787 (1.9.1)\n\nBug fixes and other improvements (internals):\n* Avoid division by 0 when computing derivatives in pointcloud_search.\n  #710 (1.9.0/1.8.7)\n* Avoid subtle use-after-free memory error in dictionary_find().\n  #718 (1.9.0/1.8.6)\n* Fix minor inconsistency in the behavior of `normalize()` when the input\n  has derivatives versus when it does not. #720 (1.9.0/1.8.7)\n* Fix an optimization bug where calls to `trace()` could accidentally get\n  elided if the results of the function call were unused in the shader.\n  This is incorrect! Because `trace()` has side effects upon subsequent\n  calls to `getmessage(\"trace\",...)`. #722 (1.9.0/1.8.7)\n* Runtime optimizer is sped up by avoiding some string operations related\n  to searching for render outputs when none are registered. (1.9.0)\n* Searching for stdosl.h now works uniformly whether it's oslc itself, or\n  apps that use OSLCompiler, and in all cases are better about guessing\n  where the header is located even when `$OSLHOME` environment variable is\n  not set. #737 (1.9.0)\n* Internals: Fix the handling of alignment for closure structs. #740 (1.9.0)\n* oslc: fix internal memory leak of ASTNode's. #743 (1.9.0)\n* testshade improvements:\n    * New option `--texoptions` lets you directly set extra TextureSystem\n      options for tests. #744 (1.9.0)\n    * Fix that allows you to set a parameters that is an array-of-strings.\n      #745 (1.9.0)\n    * Rename `--scalest/--offsetst` to `--scaleuv/--offsetuv` to properly\n      reflect that they alter u and v (there is no s, t). #757 (1.9.0)\n    * `--print` prints the value of all saved outputs. #757 (1.9.0)\n    * Automatically convert to sRGB when saving outputs to JPEG, PNG, or GIF\n      images, to make them more \"web ready.\" #757 (1.9.0)\n    * `--runstats` is more careful about not including the time to write\n      output images in the main shader run time statistic. #757 (1.9.0)\n    * Rename `-od` option to `-d` to match oiiotool and maketx. #757 (1.9.0)\n* testrender: Automatically convert to sRGB when saving outputs to JPEG,\n  PNG, or GIF images, to make them more \"web ready.\" #757 (1.9.0)\n* Slight efficiency improvement when you call texture functions with the\n  optional `\"subimage\"` parameter and pass the empty string (which means\n  the first subimage, equivalent to not passing `\"subimage\"` at all).\n  #749 (1.9.0)\n* oslc bug fixes where in some circumstances polymorphic overloaded\n  functions or operators could not be properly distinguished if their\n  parameters were differing `struct` types. #755 (1.9.0)\n* Fix minor numerical precision problems with `inversespline()`. #772 (1.9.0)\n* `testshade` gives better error messages for the common mistake of using\n  `-param` after the shader is set up. #773 (1.9.0)\n* Fix bug with transitive assignment for arrays, like `a[0] = a[1] = 0;`\n  #774 (1.9.0)\n* The standard OSL library function fprintf() was not properly implemented.\n  #780 (1.9.1)\n* Fix subtle bugs related to our ignorance of \"locales\" -- we now are very\n  careful when parsing `.osl` source (and other places) to be always use\n  the `'.'` (dot) character as decimal separator in floating point number,\n  even when running on a computer system configured to use a foreign locale\n  where the comma is traditionally used as the decimal separator. #795 (1.9.1)\n* Fix param analysis bug for texture or pointcloud functions with optional\n  token/value parameters where the token name wasn't a string literal -- it\n  could fail to recognize that certain parameters would be written to by the\n  call. #812 (1.9.3)\n* ShadingSystem statistics are now printed if any shaders were\n  declared/loaded, even if no shaders were executed. #815 (1.9.3)\n* Minor OSLQuery implementation improvements: add move/copy constructors\n  for OSLQuery::Parameter, make the ShadingSystem side of OSLQuery correctly\n  report default parameter values. #821 (1.9.4)\n\nBuild & test system improvements:\n* C++11 is the new language baseline. #704, #707\n* Many uses of Boost have been switched to use C++11 features, including\n  prior uses of boost::shared_ptr, bind, ref, unordered_map, unordered_set\n  now using the std:: equivalents; BOOST_FOREACH -> C++11 \"range for\"; Boost\n  string algorithms replaced by OIIO::Strutil functions; Boost filesystem\n  replaced by OIIO::Filesystem functions; Boost scoped_ptr replaced by\n  std::unique_ptr; boost::random replaced by std::random;\n  boost::intrusive_ptr replaced by OIIO::intrusive_ptr; boost thread\n  replaced by std::thread and various OIIO::thread utilities. #707 (1.9.0)\n* CMake 3.2.2 or higher is now required. The CMake build scripts have been\n  refactored substantially and cleaned up with this requirement in mind.\n  #705 (1.9.0)\n* Boost 1.55 or higher is now required (per VFXPlatform guidelines).\n* Big refactor of the CMake scripts for how we find LLVM, now also broken\n  out into a separate FindLLVM.cmake. #711 (1.9.0)\n* Remove direct references to tinyformat in lieu of C++11 variadic\n  templates and use of OIIO::Strutil::format. #713 (1.9.0)\n* Use std::regex rather than boost::regex any time the former is available.\n  (Note: gcc 4.8 will automatically still fall back to boost, since correct\n  implementation of std::regex did not happen until gcc 4.9.) #714 (1.9.0)\n* When available (and with the right compiler version combinations), OSL\n  will rely on Clang library internals to \"preprocess\" oso input, rather\n  than Boost Wave. This solves problems particularly on OSX and FreeBSD\n  where clang/C++11-compiled OSL was having trouble using Boost Wave if\n  Boost was not compiled in C++11 mode (which is difficult to ensure if\n  you don't control the machine or build boost yourself). #715 (1.8.5/1.9.0)\n  #719 #721 (1.9.0/1.8.7)\n* Tweaks to FindOpenImageIO.cmake. (1.9.0)\n* Fixed linkage problems where some of our unit test programs were unwisely\n  linking against both liboslcomp and liboslexec (not necessary, and caused\n  problems for certain LLVM components that appeared statically in both).\n  #727 (1.9.0/1.8.7)\n* Added an easy way to invoke clang-tidy on all the files. #728\n* All internal references to our public headers have been changed to the\n  form #include <OSL/foo.h>, and not \"OSL/foo.h\" or \"foo.h\". #728\n* The namespace has been changed somewhat, is now only one level deep and\n  contains the version, eliminating version clashes within the same\n  executable. You still refer to namespace \"OSL\", it's an alias for the\n  real versioned (and potentially customized) one. #732 (1.9.0)\n* Symbol visibility is now properly restricted for certain \"C\" linkage\n  functions needed for availability by the LLVM-generated code. And overall,\n  the HIDE_SYMBOLS build mode is now on by default. #732 (1.9.0)\n* More robust finding of external PugiXML headers. (1.9.0)\n* Fix ilmbase linker warning with LINKSTATIC on Windows. #768 (1.9.0)\n* Fix osl_range_check not found error when USE_LLVM_BITCODE=OFF. #767 (1.9.0)\n* Windows fixes where BUILDSTATIC incorrectly set /MT flag. #769 (1.9.0)\n* Some preliminary work to make OSL safe to compile with C++17. (1.9.1)\n* C++11 modernization: use range-for loops in many places. #785 (1.9.1)\n* Make OSL build with clang 5.0 and against LLVM 5.0. #787 (1.9.1)\n* Removed support for building against LLVM 3.4. #792 (1.9.1)\n* Use GNUInstallDirs to simplify build scripts and more properly conform to\n  widely established standards for layout of installation directory files.\n  #788 (1.9.1)\n* Improved proper rebuilding of the LLVM bitcode for llvm_ops.cpp when only\n  certain headers change. #802 (1.9.1)\n* Fix gcc7 warnings about signed vs unsigned compares. #807 (1.9.2)\n* Simplify the build logic for finding PugiXML and prefer a system install\n  when found, rather than looking to OIIO to supply it. #809 (1.9.2)\n* MSVS 2015 x64 compilation fixes. #820 (1.9.4)\n* Fix debug compile against OIIO 1.7. #822 (1.9.4)\n\nDeveloper goodies:\n* The `dual.h` implementation has been completely overhauled. The primary\n  implementation of dual arithmetic is now the template `Dual<T,PARTIALS>`\n  where `PARTIALS` lets it specialize on the number of partial derivatives.\n  This lets you use the `Dual` templates for automatic differentiation of\n  of ordinary 1D functions (e.g., `Dual<float,1>`) or 3D volumetric\n  computations (e.g., `Dual<float,3>`). Most of OSL internals use automatic\n  differentiation on 2 dimensions (`Dual<float,2>` a.k.a. `Dual2<float>`),\n  but this change makes `dual.h` a lot more useful outside of OSL.\n  #803 (1.9.1)\n\nDocumentation:\n* Fixed unclear explanation about structures with nested arrays. (1.9.0)\n* Full testshade docs in `doc/testshade.md.html` (1.9.0)\n\n\n\nRelease 1.8.15 -- 1 Aug 2018 (compared to 1.8.14)\n--------------------------------------------------\n* Fixes for compatibility with OIIO 1.9.\n\nRelease 1.8.14 -- 1 May 2018 (compared to 1.8.13)\n--------------------------------------------------\n* New SS attribute \"error_repeats\", if set to non-zero, turns off the\n  suppression of multiple identical errors and warnings. Setting it (even to\n  its existing value) also clears the \"already seen\" lists. #880\n* Update to fix with some changes in OpenImageIO 1.9. #882\n\nRelease 1.8.13 -- 1 Apr 2018 (compared to 1.8.12)\n--------------------------------------------------\n* Build the version into the shared library .so names. #876\n\nRelease 1.8.12 -- 1 Nov 2017 (compared to 1.8.11)\n--------------------------------------------------\n* Improve type checking error messages with structs. #761\n\nRelease 1.8.11 -- 3 Oct 2017 (compared to 1.8.10)\n--------------------------------------------------\n* Builds properly against LLVM 5.0, and if compiled by clang 5.0.\n* Changes to test/CI with recent OIIO release.\n\nRelease 1.8.10 -- 1 Jul 2017 (compared to 1.8.9)\n--------------------------------------------------\n* Missing faceforward() implementation was added to stdosl.h. #759\n* `testshade` new option `--shader <shadername> <layername>` is a\n  convenience that takes the place of a separate `--layer` and `--shader`\n  arguments, and makes the command line look more similar to the serialized\n  (text) description of a shader group. #763\n* README.md, CHANGES.md, and INSTALL.md are now installed in the \"doc\"\n  directory of a fully-built dist area, rather than at its top level.\n* `smoothstep()` now has variants where the arguments and return type may\n  be color, vector, etc. (previously it only worked for `float`. #765\n* `mix()` now has a variant that combines closures. #766\n* testshade comprehensive documentation in `doc/testshade.md.html`, just\n  view with your browser.\n* Fixed a numerical precision problem with `inversespline()`. #772\n* Fixed a bug in transitive assignment of indexed arrays, like\n  `f[0] = f[1] = f[2]`. This previously hit an assertion. #774\n* New standard OSL function `hash()` makes a repeatable integer hash of\n  a float, 2 floats, a triple, or triple + float. #775\n* New `hashnoise()` is similar to cellnoise(), but has a different\n  repeatable 0.0-1.0 range value for every input position (whereas cellnoise\n  is constant between integer coordinates). #775\n\nRelease 1.8.9 -- 1 Jun 2017 (compared to 1.8.8)\n--------------------------------------------------\n* Minor speedup when passing blank subimage name:\n  texture (..., \"subimage\", \"\", ...)\n  #749\n* Fix namespace clash after recent OIIO (master branch) PugiXML version\n  upgrade.\n* Several testshade changes: renamed options --scalest/--offsetst to\n  --scaleuv/--offsetuv to more closely say what they really do;\n  rename -od to -d to match how oiiotool and maketx call the same\n  option; automatically convert to sRGB when instructed to save an\n  output image as JPEG, GIF, or PNG; -runstats is more careful with\n  timing to not include image output in shader run time; new --print\n  option prints outputs to console (don't use with large images!). #757\n\nRelease 1.8.8 -- 1 May 2017 (compared to 1.8.7)\n--------------------------------------------------\n* New ShadingSystem::set_raytypes() can be used to configure default ray\n  types for subsequent lazy optimization of the group upon first execution.\n  #733\n* Hide symbol visibility for extern \"C\" linkage osl_* functions that LLVM\n  needs. #732\n* New oslc-time macros OSL_VERSION, OSL_VERSION_MAJOR, OSL_VERSION_MINOR,\n  OSL_VERSION_PATCH lets you easily test OSL version while compiling your\n  shader. You can also find out at runtime with getattribute(\"osl:version\").\n  #747\n\nRelease 1.8.7 -- 1 Apr 2017 (compared to 1.8.6)\n--------------------------------------------------\n* Fix possible division-by-zero when computing derivatives in\n  pointcloud_search. #710\n* When using clang components as the C preprocessor for .osl files, better\n  reporting of any C preprocessor errors. #719\n* Fix minor inconsistency in the behavior of `normalize()` when the input\n  has derivatives versus when it does not. #720\n* Fixes to using clang for the C preprocessing -- we discovered cases where\n  it's unreliable for older clang versions, so it now only works when using\n  LLVM >= 3.9 (for older LLVM versions, we fall back to boost wave for our\n  preprocessing needs). #721\n* Fix an optimization bug where calls to `trace()` could accidentally get\n  elided if the results of the function call were unused in the shader.\n  This is incorrect! Because `trace()` has side effects upon subsequent\n  calls to `getmessage(\"trace\",...)`. #722\n* Fixed linkage problems where some of our unit test programs were unwisely\n  linking against both liboslcomp and liboslexec (not necessary, and caused\n  problems for certain LLVM components that appeared statically in both).\n  #727\n\nRelease 1.8 [1.8.6] -- 1 Mar 2017 (compared to 1.7)\n---------------------------------------------------\nDependency and standards changes:\n* OSL now builds properly against LLVM 3.9 and 4.0 (in addition to 3.5 and\n  3.4). Please note that for 3.9 or 4.0 (which use MCJIT), the JIT overhead\n  time is about twice as much as when using LLVM 3.4/3.5 (\"old\" JIT), but\n  the resulting code runs a bit faster. You may see fast, low-quality,\n  interactive renders slow down, but long complex renders speed up. We are\n  working to address the JIT overhead. In the mean time, if you are\n  especially sensitive to interactive compile speed, just keep using LLVM\n  3.5 (or 3.4) while we work to address the problem.  **OSL 1.8 will be the\n  last branch that supports LLVM 3.4 and 3.5.**\n* C++ standard: OSL 1.8 should build againt C++03, C++11, or C++14.\n  **OSL 1.8 is the last release that will build against C++03. Future\n  major releases will require C++11 as a minimum.**\n* OpenImageIO: This release of OSL should build properly against OIIO\n  1.6 or newer (although 1.7 is the current release and therefore\n  recommended).\n\n**New library: `liboslnoise`** and header `oslnoise.h` expose OSL's noise\n  functions to C++ apps. Currently, only signed and unsigned perlin, and\n  cellnoise, are exposed, but other varieties and options may be added if\n  desired. #669 (1.8.2)\n\nLanguage features:\n* Function return values are now allowed to be structs. (#636)\n* oslc now will warn when assigning the result of a \"comma operator\",\n  which almost always is a programming error where the shader writer\n  omitted the type name when attempting to construct a vector or matrix.\n  (#635) (1.8.0/1.7.3)\n* Nested structs (structs containing other structs) are now functional\n  as shader parameters, with initialization working as expected with\n  nested `{ {...}, {...} }`.  #640 (1.8.0)\n* oslc (and liboslcomp) now supports UTF-8 filenames, including on\n  Windows. #643 (1.8.0)\n* osl now accepts hexadecimal integer constants (such as `0x01ff`).\n  #653 (1.8.1)\n\nStandard library additions/changes:\n* `pow(triple,triple)` is now part of the standard library. (1.8.2)\n* New `getattribute()` tokens: `\"shader:shadername\"`, `\"shader:layername\"`,\n  and `\"shader:groupname\"` lets the shader retrieve the shader, layer,\n  and group names. This is intended primarily for helpful error messages\n  generated by the shader. #673 (1.8.2)\n* The texture(), texture3d(), and environment() functions now accept\n  an optional \"errormessage\" parameter (followed by a string variable\n  reference). A failure in the texture lookup will result in an error\n  message being placed in this variable, but will not have any error\n  message passed to the renderer (leaving error handling and reporting\n  entirely up to the shader). #686 (1.8.2)\n* `select(a,b,cond)` is similar to `mix`, but without interpolation --\n  if cond is 0, returns a, else return b (per component). #696 (1.8.3)\n\nAPI changes, new options, new ShadingSystem features (for renderer writers):\n* ShadingSystem API changes:\n   * Long-deprecated ShadingAttribState type has been removed (now called\n     ShaderGroup).\n   * ShadingSystem::create() and destroy() are no longer necessary and have\n     been removed.\n   * A new Shadingsystem::optimize_group() method takes bit fields\n     describing which ray types are known to be true or false, allowing\n     specialized versions of the shader to be optimized for certain ray\n     types (such as for shadow rays only, or displacement shades only).\n     #668 (1.8.2)\n* ShadingSystem attribute additions/changes:\n    * Attribute \"userdata_isconnected\", if set to a nonzero integer, causes\n      a shader call to isconnected(param) to return 1 if the parameter is\n      potentially connected to userdata (that is, if lockgeom=0 for that\n      parameter). This if for particular renderer needs, and the default\n      remains for isconnected() to return 1 only if there is an actual\n      connection. #629 (1.8.0/1.7.3)\n    * Attribute \"no_noise\" will replace all noise calls with an inexpensive\n      function that returns 0 (for signed noise) or 0.5 (for unsigned noise).\n      This can be helpful in understanding how much render time is due to\n      noise calls. #642 (1.8.0)\n    * Attribute \"no_pointcloud\" will short-circuit all pointcloud lookups.\n      This can be helpful in understanding how much render time is due to\n      pointcloud queries. #642 (1.8.0)\n    * When the attribute \"profile\" is set, the statistics report will\n      include a count of the total number of noise calls. #642 (1.8.0)\n    * ShadingSystem and shader group attribute \"exec_repeat\" (int; default is\n      1) can artificially manipulate how many times the shader is executed.\n      This can sometimes be handy for tricky benchmarks. #659 (1.8.2)\n    * Attribute \"force_derivs\" can force derivatives to be computed\n      everywhere. (Mostly good for debugging or benchmarking derivatives,\n      not intended for users.) #667 (1.8.2)\n    * Attribute \"llvm_debug_ops\" adds a printf before running each op.\n      This is mostly for debugging OSL itself, not for users. (1.8.3)\n\nPerformance improvements:\n* New runtime optimization: better at understanding the initial values of\n  output parameters and what optimizations can be done based on that. #657\n  (1.8.1)\n* Better runtime optimization of certain matrix constructors. #676 (1.8.2)\n* Improved alias analysis for parameters with simple initialization ops.\n  #679 (1.8.2)\n* Runtime optimizer now constant-folds bitwise `&`, `|`, `^`, `~`\n  operators. #682 (1.8.2)\n* Improved runtime constant folding of triple(space,const,const,const)\n  when the space name is known to be equivalent to \"common\". #685 (1.8.2)\n\nBug fixes and other improvements:\n* oslc bug: getmatrix() failed to note that the matrix argument was\n  written. #618 (1.8.0/1.7.2)\n* Fix oslc incorrectly emitting init ops for constructor color(float).\n  #637 (1.8.0/1.7.3)\n* Fix subtle bug in runtime optimizer that could seg fault. #651 (1.8.0)\n* Fixed incorrect instance merging when unspecified-length arrays\n  differed. #656 (1.8.1/1.7.4)\n* Fix oslc crash/assertion when indexing into a closure type. #663\n* A version of spline() where the knots were colors without derivs\n  and the abscissa was a float with derivs, computed its result\n  derivatives incorrectly. #666\n* Fix incorrect dropping of certain optional texture() arguments. #671\n  (1.8.2/1.7.5)\n* Fix: matrix parameters initialized with matrix(space,1) did not\n  initialize properly. #675 (1.8.2/1.7.5)\n* Bug fix: matrix parameters initialized with matrix(space,1) did not\n  initialize properly. #675 (1.8.2/1.7.5)\n* oslc: better error reporting for use of non-function symbol as a\n  function. #684 (1.8.2/1.7.5)\n\nBuild & test system improvements and developer goodies:\n* Default build is now C++11! Currently, the project will still build as\n  C++03, but to do so you must explicitly 'make USE_CPP11=0'. #615 (1.8.0)\n* Build: better handling of multiple USE_SIMD options. #617 (1.8.0/1.7.2)\n* CMake FindOpenEXR.cmake totally rewritten, much simpler and better.\n  #621 (1.8.0/1.7.2)\n* 'make CODECOV=1' on a gcc/clang system will run the testsuite and\n   generate a code coverage report in build/$PLATFORM/cov/index.html\n   #624 (1.8.0)\n* Remove support for LLVM 3.2 or 3.3. Now the minimum supported version\n  is LLVM 3.4. #627 (1.8.0)\n* Changed the CMake variable OSL_BUILD_CPP11 to simply USE_CPP11 (matching\n  the name used for the Makefile wrapper). #634 (1.8.0)\n* Clear up inconsistencies with USE_LIBCPLUSPLUS vs OSL_BUILD_USECPLUSPLUS\n  #639 (1.8.0)\n* Windows build improvements: Fixed build breaks #643 (1.8.0); fix problems\n  with lexer #646 (1.8.0/1.7.3).\n* Improvements in finding OpenEXR installations. #645 (1.8.0)\n* Travis tests now include gcc 6 tests. #647 (1.8.0)\n* Fixes for build breaks and warnings for gcc6. #647 (1.8.0/1.7.3)\n* Fix build breaks for certain older versions of OIIO.\n* Failed to properly propagate the C++ standard flags (e.g. -std=c++11)\n  when turning llvm_ops.cpp into LLVM bitcode. #674 (1.8.2/1.7.5)\n* Suppress compile warnings when using clang 3.9. #683 (1.8.2/1.7.5)\n* Improve search for Partio. #689 (1.8.3)\n* More robust finding of LLVM components. (1.8.3)\n* OSL now builds properly with LLVM 3.9 and 4.0. #693 (1.8.3)\n* When available (and with the right compiler version combinations), OSL\n  will rely on Clang library internals to \"preprocess\" oso input, rather\n  than Boost Wave. This solves problems particularly on OSX and FreeBSD\n  where clang/C++11-compiled OSL was having trouble using Boost Wave if\n  Boost was not compiled in C++11 mode (which is difficult to ensure if\n  you don't control the machine or build boost yourself). #715 (1.8.5)\n\nDocumentation:\n* Various typos fixed.\n* Explain rules for connections.\n* Explain that getattribute retrieves userdata.\n* Document that `#once` works in shader source code.\n* The CHANGES and INSTALL files have been changed from plain text to Markdown.\n\n\n\nRelease 1.7.5 -- 1 Nov 2016 (compared to 1.7.4)\n--------------------------------------------------\n* Fix oslc crash/assertion when indexing into a closure type. #663\n* A version of spline() where the knots were colors without derivs\n  and the abscissa was a float with derivs, computed its result\n  derivatives incorrectly. #666\n* Incorrect dropping of certain optional texture arguments. #671\n* Bug fix: matrix parameters initialized with matrix(space,1) did not\n  initialize properly. #675\n* Suppress warnings when compiling with clang 3.9. #683\n* oslc: better error reporting for use of non-function symbol as a\n  function. #684\n* Filed to properly propagate the C++ standard flags (e.g. -std=c++11)\n  when turning llvm_ops.cpp into LLVM bitcode. #674\n\nRelease 1.7.4 -- 1 Aug 2016 (compared to 1.7.3)\n--------------------------------------------------\n* Bug fix: incorrect instance merging when unspecified-length arrays\n  differed. (#656)\n* Make oslc understand hex integer constants (like 0x01fc). #653\n\nRelease 1.7.3 -- 1 Jul 2016 (compared to 1.7.2)\n--------------------------------------------------\n* ShadingSystem attribute \"userdata_isconnected\", if set to a nonzero\n  integer, causes a shader call to isconnected(param) to return 1 if the\n  parameter is potentially connected to userdata (that is, if lockgeom=0\n  for that parameter). This if for particular renderer needs, and the\n  default remains for isconnected() to return 1 only if there is an\n  actual connection. #629 (1.8.0/1.7.3)\n* oslc now will warn when assigning the result of a \"comma operator\",\n  which almost always is a programming error where the shader writer\n  omitted the type name when attempting to construct a vector or matrix.\n  #635 (1.8.0/1.7.3)\n* Fix oslc incorrectly emitting init ops for constructor color(float).\n  #637 (1.8.0/1.7.3)\n* Bug fix: don't test or set the \"layer ran bits\" on the last layer of the\n  group. #626 (1.8.0/1.7.3)\n* Windows fixes: build breaks #643; fixes for lexer #646.\n* Fixes for clean compile with gcc 6.x. #647\n\nRelease 1.7.2 -- 1 Mar 2016 (compared to 1.7.1)\n--------------------------------------------------\n* Build: better handling of multiple USE_SIMD options. #617\n* oslc bug: getmatrix() failed to note that the matrix argument was\n  written. #618\n* CMake FindOpenEXR.cmake totally rewritten, much simpler and better. #621\n\n\nRelease 1.7 [1.7.1] -- 29 Jan 2016 (compared to 1.6)\n--------------------------------------------------\nLanguage, standard library, and compiler changes (for shader writers):\n* Language features:\n   * Support for closure arrays in shader inputs. #544 (1.7.0)\n   * Disallow quote strings from spanning lines (just like you can't in\n     C).  This was never intended, but was accidentally allowed by the\n     oslc lexer.  #613 (1.7.1)\n* Standard library additions/changes:\n   * linearstep() and smooth_linearstep() functions. #566 (1.7.0)\n   * isconstant(expr) returns 1 if the expression can be turned into\n     a constant at runtime (with full knowledge of the shader group's\n     parameter values and connections). This is helpful mostly for advanced\n     shader writers to verify their assumptions about which expressions can\n     end up being fully constant-folded by the runtime optimizer. #578 (1.7.1)\n   * New behavior of isconnected(parmaname): return 1 if the parameter\n     is connected to an upstream layer, 2 if connected to a downstream layer,\n     3 if both, 0 of neither. #589 (1.7.1)\n   * int hash(string) returns an integer hash of a string. #605 (1.7.1)\n   * int getchar(string s,int i) returns the integer character code of the\n     i-th character in string s. #589 (1.7.1)\n* Removed from stdosl.h all closure function declarations that were not\n  documented in the spec and not implemented in testrender. (1.7.0)\n* osutil.h changes:\n   * New draw_string() rasterizes a string! #606 (1.7.1)\n\nAPI changes, new options, new ShadingSystem features (for renderer writers):\n* shade_image() utility runs a shader to generate every pixel of an ImageBuf.\n  (1.7.0)\n* ShaingSystem::optimize_group() is a new method that lets you force a\n  shader group to optimize/JIT (without executing it). (1.7.0)\n* Remove deprecated ShadingSystem::state() method. #551 (1.7.0)\n* Changed logic of lazy shader layer evaluation: \"unconnected\" layers\n  are now lazy. That means that shaders that appear to have no connected\n  outputs, and don't set globals or set renderer outputs, are no longer\n  run unconditionally. #560 (1.7.0)\n* ShadingSystem attribute additions/changes:\n   * ShadingSystem attribute \"lockgeom\" default changed to 1. (1.7.0)\n   * SS::getattribute new attributes \"num_attributes_needed\",\n     \"attributes_needed\", \"attribute_scopes\", and\n     \"unknown_attributes_needed\" can be used to query for a shader group\n     what OSL getattribute queries it might make. #537 (1.7.0)\n   * \"llvm_debug_layers\" controls debug printfs for layer enter/exit\n     (strictly for our debugging of the system; not intended for\n     users). (1.7.0)\n   * \"opt_passes\" controls the number of optimization passes over each\n     instance (default: 10). This is mainly for developer debugging, you\n     should not need to change or expose this. #576 (1.7.1)\n   * \"connection_error\" controls whether a bad connection is considered\n     a true error (or is just ignored). #583 (1.7.1)\n* Shader group attribute additions/changes:\n   * Group attribute \"entry_layers\" can explicitly provide a list of\n     which layers within the group (specified by layer names) are \"entry\n     points\", and then new ShadingSystem methods execute_init(),\n     execute_layer(), and execute_cleanup() can be used to call them\n     individually in any order.  The old execute(), which executes\n     starting with the \"root\" and lazily evaluating any upstream nodes\n     needed, still works and is still the usual way to run shaders for\n     most purposes. #553 (1.7.0)\n* RendererServices:\n   * Remove has_userdata() method, which was unused. #603 (1.7.1)\n* osl.imageio.so -- an OIIO image reader plugin that runs OSL shaders to\n  generate pixels in an image (or texture). #531 (1.7.0)\n\nPerformance improvements:\n* Much faster (10x or more, for large shaders) parsing of oso files (and\n  .osl source as well). #511 (1.7.0)\n* Optimize away unused optional arguments to noise functions. #548 (1.7.0)\n* Improved runtime optimization via better tracking of variable aliasing\n  across certain basic block boundaries. #585,588 (1.7.1)\n\nBug fixes and other improvements:\n* oslinfo now has a \"--runstats\" flag to report how much time it takes\n  to OSLQuery the shaders. (Mostly used for benchmarking the speed of\n  OSLQuery internals.) #510 (1.7.0)\n* Improved \"debug_uninit\" mode eliminates certain false alarms, and when\n  uninitialized values are found, the error messages is more clear about\n  which shader group and layer were involved (in addition to the previous\n  reporting of the OSL source file ane line number). #512 (1.7.0)\n* Bug fix serializing shader groups with \"unsized arrays.\" #539 (1.7.0)\n* Make sure OSL works fine with LLVM 3.5. #542 (1.7.0)\n* Bug fix with unconditional running of earlier layers. (1.7.0)\n* Improved error message for range errors and uninitialized variable errors\n  (when using \"range_checking\" and \"debug_uninit\", respectively). #540 (1.7.0)\n* Fixed oslc bug where shader parameters that were structs and whose\n  values were initialized by copying another struct whole, generated\n  incorrect initialization code. (1.7.0)\n* Better tracking of layers that are the unused duplicates after an\n  instance merge. This allows us to be sure those layers are skipped,\n  and avoid situations where they look like they should run\n  unconditionally.  #506 (1.7.0)\n* Record oslc options in a comment at the start of the oso file. #575 (1.7.1)\n* Better error messages when an closure is used that is unknown to the\n  renderer. #576 (1.7.1)\n* Fix potential SIGFPE from divide-by-zero in shaders. #596 (1.7.1)\n* Improve optimizer logic behind lifetime analysis inside loops, fixing some\n  subtle optimizer bugs. #598 (1.7.1)\n\nBuild & test system improvements and developer goodies:\n* Allow testshade to test OSL snippets without whole full shaders. #564 (1.7.0)\n* Much less verbose builds, when not using VERBOSE=1. (1.7.0)\n* New build-time options:\n  * USE_NINJA=1 will use Ninja rather than Make (faster!). #546 (1.7.0)\n  * USE_fPIC=1 will build with -fPIC. (1.7.0)\n  * OSL_BUILD_TESTS=0 will cause it to not build unit tests, testshade,\n    or testrender. (1.7.0)\n  * OSL_NO_DEFAULT_TEXTURESYSTEM=1 will cause the ShadingSystem to not\n    create a raw OIIO::TextureSystem, and instead hit an assertion if\n    a TextureSystem is not passed to the ShadingSystem constructor.\n    Use this when building OSL to embed in renderers that supply their\n    own TextureSystem class rather than using OIIO's. (1.7.0)\n* Fixes when building for VS2012. #543 (1.7.0)\n* Add --path to testshade and testrender to allow setting search path\n  to find oso files. #549 (1.7.0)\n* Testsuite: the presence of a file called \"OPTIMIZEONLY\" in a test\n  directory will cause that test to run only in optimized mode. (1.7.0)\n* Better detection of clang version. #559 (1.7.0)\n* testshade --offsetst and --scalest let you make custom st ranges for\n  the image being sampled (not restricted to 0-1 defaults). #565 (1.7.0)\n* C++11 compatibility. #573 (1.7.1)\n* Ensure proper build on Apple Clang 6.1. #580 (1.7.1)\n* CMake build option OSL_BUILD_PLUGINS, if set to OFF, will disable building\n  of any OSL plugins (such as the osl.imageio.so). #587 (1.7.1)\n* CMake build option OSL_BUILD_TESTS, if set to OFF, will disable building\n  of standalone test programs. #587 (1.7.1)\n* We now use Travis-CI to do continuous integration and testing of every\n  checkin and PR for a variety of platform / compiler / option combinations.\n  #592,595,600 (1.7.1)\n* Get rid of the \"make doxygen\" target, which did nothing. (1.7.1)\n* Build scripts automatically use ccache if available and in an obvious\n  location. This can be forcefully disabled by setting USE_CCACHE=0.\n  #595,597 (1.7.1)\n* Use deprecation attribute for the methods that are considered deprecated.\n  #602,607,608 (1.7.1)\n* Testsuite organization overhaul now avoids copying test source to build.\n  #612 (1.7.1)\n* New macro OSL_CPLUSPLUS_VERSION (set to 03, 11, 14, etc) rather than\n  using OSL_USING_CPP11. #581 (1.7.1)\n\nDocumentation:\n\n\n\nRelease 1.6 -- 26 May 2015 (compared to 1.5)\n-----------------------------------------------\nLanguage, standard library, and compiler changes (for shader writers):\n* It is now supported to have shader parameters that are arrays of\n  unspecified length (like 'float foo[] = {...}'). Their length will be\n  fixed when they are assigned an instance value of fixed length, or when\n  connected to another layer's output parameter of fixed length. If there\n  is no instance value nor a connection, the length will be fixed to the\n  number of elements given in the default initializer. #481 #497 (1.6.4)\n* The \"comma operator\" now works in the way you would expect in other\n  C-like languages. #451 (1.6.2)\n* The \"and\", \"or\", and \"not\" keywords are synonyms for the &&, ||, and !\n  operators, respectively. (If this seems strange, note that this is\n  true of C++ as well.) #446 (1.6.2)\n* oslc will now silently ignore trailing commas in function or shader\n  parameter lists and metadata lists. #447 (1.6.2)\n* The \"gabor\" varieties of noise were found to have a serious mathematical\n  bug, which after fixing results in a change to the pattern. We are hoping\n  that they were rarely used, but beware a change in appearance. (1.6.1)\n* We have clarified that shader metadata may be arrays (still not structs\n  or closures) and fixed the implementation to support this (in addition\n  to several other ways that metadata was brittle). (1.6.2)\n* Spec clarification: emission() has units of radiance, so a surface\n  directly seen by the camera will directly reproduce the closure weight\n  in the final pixel, regardless of it being a surface or volume. Thus,\n  you don't need to weight it by PI. #427 (1.6.2)\n* oslc bug fixed in variable declaration + assignment of nested structs.\n  #453 (1.6.2)\n\nAPI changes, new options, new ShadingSystem features (for renderer writers):\n* New ShadingSystem attribute int \"profile\", if set to 1, will include\n  in the runtime statistics output a measure of how much total time was\n  spent executing shaders, as well as the identities and times of the 5\n  shader groups that spent the most time executing.  Note that this\n  option is 0 (off) by default, since turning it on can add\n  significantly to total runtime for some scenes.  #418 (1.6.2)\n* New per-ShaderGroup attributes:\n   * You can retrieve information about all closures that an optimized group\n     might create using new queries \"num_closures_needed\", \"closures_needed\",\n     \"unknown_closures_needed\". This could be useful for renderers by, for\n     example, noticing that a material can't possibly call the \"transparent\"\n     closure, and thus concluding that it must be opaque everywhere and thus\n     shadow rays need not execute shaders to determine opacity. (#400) (1.6.0)\n   * You can retrieve information about all \"globals\" (P, N, etc.) that an\n     optimized group needs using new queries \"num_globals_needed\" and\n     \"globals_needed\". This could be useful for renderers for which\n     computing those globals is very expensive; examining which are truly\n     needed and only computing those. (#401) (1.6.0)\n* It is now possible to specify per-group \"renderer_outputs\" in the form\n  \"layername.paramname\", thus designating a parameter of a specific layer\n  as a render output that should be preserved, but excluding identically\n  named output variables in other layers. #430 (1.6.2)\n* New ShadingSystem runtime option int \"lazy_userdata\", when set to\n  nonzero, causes userdata to be interpolated lazily (on demand) rather\n  than at the beginning of a shader that needs it. For some renderer\n  implementations, this may be a performance improvement. #441 (1.6.2)\n* New OSLCompiler::compile_buffer() method compiles OSL source in a\n  string into oso stored in a string. When combined with ShadingSystem::\n  LoadMemoryCompiledShader, this allows an application to go straight from\n  osl source code to executing shader without writing disk file or launching\n  a shell to invoke oslc. #444 (1.6.2)\n* OSLQuery: in the OSLQuery::Parameter structure, the 'validdefault' field\n  now reliably is true for a valid default value, false if no default value\n  could be statically determined (for example, if the param default is\n  the result of code that must run at runtime). (1.6.2)\n* Extend ShadingSystem::get_symbol() to retrieve the symbol from a\n  particular named layer (rather than always getting it from the last\n  layer in which the name is found). #458 (1.6.2)\n* New SS option \"opt_merge_instances_with_userdata\", which if set to 0 will\n  prevent instance merging for instances that access userdata. If you don't\n  know why you'd want this turned off, you don't want it turned off!\n  #459 (1.6.2)\n* New RendererServices::supports() function allows for future expansion\n  of querying (by the ShadingSystem) of features supported by a\n  particular renderer. #470 (1.6.2)\n* New ShadingSystem::execute() variety that takes a ShadingContext* rather\n  than a ShadingContext&. If you pass NULL for the context pointer, the\n  SS will automatically allocate (and eventually release) a context for\n  you. #471 (1.6.2)\n* New RendererServices API methods added that supply a handle-based\n  version of texture(), texture3d(), environment(), and get_texture_info(),\n  in addition to the existing name-based versions. Renderer implementations\n  will need to add these, if they overload the name-based ones. #472 (1.6.2)\n* RendererServices API methods for texture have been revised again, now\n  each variety takes a filename (will always be passed) and also a\n  TextureHandle* and TexturePerthread* (which may be NULL). Renderers\n  may use the name only if that's easiest, but also may use the handle when\n  supplied. #478 (1.6.3)\n* New ShadingSystem methods: find_symbol() and symbol_address() tease apart\n  the functionality of the (now deprecated) get_symbol(). The fairly\n  expensive name lookup is in find_symbol(), and it can be done once per\n  shader group (and reused for the lifetime of the group), while the\n  relatively inexpensive symbol_address() can be cheaply done after each\n  shader execution. If your renderer is currently using get_symbol() to\n  retrieve the shader output values after each shade, we strongly recommend\n  changing to the find_symbol() [once up front] and symbol_address() [once\n  per execution] combination for improved performance. #495 (1.6.4)\n  \nPerformance improvements:\n* Many noise() varieties have been sped up significantly on\n  architectures with SIMD vector instructions (such as SSE). Higher\n  speedups when returning vectors rather than scalars; higher speedups\n  when supplying derivatives as well, higher speedups the higher the\n  dimensionality of the domain. We're seeing 2x-3x improvement for\n  noise(point), depending on the specific variety, 3x-4x speedup for 4D\n  noise varieties. #415 #422 #423 (1.6.1, 1.6.2)\n* Change many transcendental functions (sin, cos, exp, etc) to use\n  approximations that are must faster than the 100% correct versions in\n  libm. The new ones may differ from the old in the last decimal place,\n  which is probably undesirable if programming ICBM guidance systems,\n  but seems fine for rendering when the result is many times faster to\n  evaluate those functions. You can turn it back to the fully precise and\n  slow way by building with OSL_FAST_MATH=0. #413 (1.6.0)\n* New runtime optimization of mix(a,a,x) -> a (even if none of them are\n  constant). #438 (1.6.2)\n* Fix performance regression: avoid incrementing profile-related stats on\n  every execution if profiling is disabled. (1.6.2)\n* When the runtime optimizer can figure out which textures are being\n  called, it will retrieve the handle once and generate code for\n  handle-based RendererServices callbacks, rather than name-based\n  ones. This speeds up texture-heavy shading by 5-10% by eliminating the\n  need for the name-to-handle lookups for every texture call. #472 (1.6.2)\n* New runtime optimization: constant folding of sincos(). #486 (1.6.4)\n* New runtime optimization: constant folding of matrix construction from\n  16 floats. #486 (1.6.4)\n* Improved optimizations -- caught some additional places where assignments\n  could be found to be useless and eliminated. #403 (1.6.4)\n* Improved speed of runtime optimization for large shaders. #499 (1.6.5)\n* Improved threading performance by not locking during pointcloud_search\n  and pointcloud. (1.6.5)\n* Dramatic speedup of runtime optimization of large shaders (5x for\n  big shaders (1.6.5)\n* Speed up loading of large shaders from disk (1.6.5).\n\nBug fixes and other improvements:\n* oslinfo --param lets you ask for information on just one parameter of\n  a shader. #397 (1.6.0)\n* oslc now properly catches and issues error messages if you define a struct\n  with duplicate field names. #398 (1.6.0)\n* Some math speedups (especially those involving sqrt). (1.6.0)\n* Improved detection of shader groups that optimize away to nothing. (1.6.2)\n* Fix of possible (but never reported) bug with instancing merging.\n  #431 (1.6.2)\n* Fix incorrect oslc code generation when assigning an element of an\n  array-of-structs to another element of array-of-structs. #432 (1.6.2)\n* Bug fix in code generation of constant folding of getmatrix() calls\n  (never reported symptomatic). #440 (1.6.2)\n* Fixes to construction of temporary filename used for group serialization\n  archive. (1.6.2)\n* Internals fix: logb() incorrectly declaring derivative functions (it\n  has no derivs). #437 (1.5.12/1.6.2)\n* Catch serialization errors resulting from failed system() calls to\n  zip/tar the archive. #436 (1.5.12/1.6.2)\n* Bug fix: Delay instance merging from ShaderGroupEnd until optimize\n  time, it messed with the serialization. #426 (1.5.12/1.6.2)\n* Fix OSLQuery crash when reading .oso file of a compiled shader that had\n  local variables but no parameters. #435 (1.5.12/1.6.2)\n* Shader-wide metadata is now correctly output by oslc, and correctly\n  read by OSLQuery. #455 (1.6.2)\n* Only merge instances when optimize level >= 1. #456 (1.6.2)\n* Bug fix: runtime optimizer should not consider a layer unused if its\n  outputs are renderer outputs. Also fix subtle bug in detecting whether\n  an output param is a renderer output. #457 (1.6.2)\n* Clear derivatives properly in the implementation of gettextureinfo.\n  #463 (1.6.2)\n* Correct handling of point-like shader parameters defined with default\n  values that use the constructors that provide \"space\" names. #465 (1.6.2)\n* Fixed some subtle runtime optimizer bugs. #485 #491 (1.6.4)\n* Using \"debugnan\" mode now also checks for NaNs in the results of\n  interpolated userdata. #490 (1.6.4)\n* Fixed bug in generating code for closure optional keyword parameters.\n  #492 (1.6.4)\n* Fixed bug where instances were incorrectly merged if they had a parameter\n  that was never used in the shader, but was connected downstream, and each\n  of the two instances had a difference instance value for that parameter.\n  #493 (1.6.4)\n* Fix critical bug that in very particular circumstances could result in\n  shader layers not executing when they should. (1.6.5)\n\nUnder the hood:\n* Change a couple long-deprecated OIIO calls to modern versions.\n  #448 (1.5.12/1.6.2)\n* Change runtime code generation, putting TextureOptions, NoiseParams,\n  TraceOptions in the ShadingContext, which avoided a dynamic alloca\n  which was tickling an LLVM code generation bug. #442 (1.5.12/1.6.2)\n* Allow memory-aligned closure component classes. (1.6.2)\n* Lots of internal refactoring of llvm_ops.cpp in order to better and\n  more performantly support MCJIT and newer LLVM releases. #468 (1.6.4)\n\nBuild & test system improvements and developer goodies:\n* Windows build fix for compiling shaders finding the right oslc.exe.\n  #399 (1.6.0/1.5.11)\n* Fix thread contention issue in testshade that was making benchmarks\n  inaccurate. $407 (1.6.0)\n* Build scripts better help messages. (1.6.0)\n* Changes to build correctly against LLVM 3.5, though please note that\n  using LLVM 3.5 seems to require C++11. If you have C++98 toolchain, then\n  please continue using LLVM 3.4. #412 (1.6.0)\n* testrender improvements: update the microfacet models to the latest\n  improved visible normal sampling technique of d'Eon & Heitz, stratified\n  sampling, simplification of Oren-Nayar, and speed improvements.\n  #425 (1.6.2)\n* Build fixes for recent OIIO changes. (1.5.12/1.6.2)\n* testshade -group now accepts the name of a file containing the serialized\n  group. #439 (1.6.2)\n* Various fixes for Windows and Visual Studio 2010. #461 #462 #464 (1.6.2)\n* testshade -param can now specify arrays. (1.6.4)\n* Remove the USE_MCJIT build flag. Now we ALWAYS compile with ability to\n  use MCJIT any time we are using LLVM that's new enough to have it, and\n  a renderer can select MCJIT at runtime by setting the SS attribute \"mcjit\"\n  to nonzero (the default, 0, will use old JIT). When compiling against\n  LLVM 3.6 or newer, which has removed MCJIT, OSL will always use MCJIT.\n  #487 #488 (1.6.4)\n* Fixes to work with LLVM 3.5 and 3.6, though 3.6 especially has not yet\n  been very thoroughly tested for OSL. #487 (1.6.4)\n* C++11 support: the preprocessor symbol OSL_BUILD_CPP11 is set to 1 if\n  OSL was built with C++11 (or higher) support, and the separate\n  OSL_USING_CPP11 is set to 1 if C++11 is detected right now. (These can\n  be different from the point of view of an app using OSL headers.)\n  #508 (1.6.6RC1)\n\nDocumentation:\n* Short chapter added to spec describing the syntax of our serialization\n  protocol.\n* Documentation fix: surfacearea() should return float, not int. (1.5.12)\n* Clarified that the way to use gettextureinfo() to retrieve matrices from\n  textures created from rendered images (or shadow maps) is with the tags\n  \"worldtocamera\" (for the world-to-3D-camera) and \"worldtoscreen\" (for\n  the world-to-2D-projection that runs -1 to +1 in x and y).\n* Clarified documentation on gettxtureinfo(file,\"exists\"). (1.6.2)\n* Improved the comments in shaderglobals.h to explain in detail the meaning\n  and use of all the fields. #489 (1.6.4)\n\n\n\nRelease 1.5.12 -- 26 Dec 2014 (compared to 1.5.11)\n--------------------------------------------------\n* Build fixes for 32 bit machines.\n* Documentation fix: surfacearea() should return float, not int.\n* Bug fix: Delay instance merging from ShaderGroupEnd until optimize\n  time, it messed with the serialization.\n* Build fixes for recent OIIO changes.\n* Fix OSLQuery crash when reading .oso file of a compiled shader that had\n  local variables but no parameters.\n* Catch serialization errors resulting from failed system() calls to\n  zip/tar the archive.\n* Fix logb() incorrectly declaring derivative functions (it has no derivs).\n* Change a couple long-deprecated OIIO calls to modern versions.\n\nRelease 1.5.11 -- 22 Sep 2014 (compared to 1.5.10)\n--------------------------------------------------\n* Windows compilations fixes for very MSVC 2013.\n* Windows build fix for compiling shaders finding the right oslc.exe.\n  #399\n* Speedup from telling gcc/clang to ignore the fact that math functions\n  can set errno (helps code generation of sqrtf in particular.\n* Fix thread contention issue in testshade which could make it hard to\n  use testshade as a benchmark with many threads.\n* Make it build properly with LLVM 3.5.\n* Fix compiler warnings about signed/unsigned comparisons.\n\n\n\nRelease 1.5 (1.5.10) -- July 30, 2014 (compared to 1.4)\n----------------------------------------------\nLanguage, standard libary, and compiler changes (for shader writers):\n* New closure function for microfacet BSDFs:\n      closure color microfacet (string distribution, normal N,\n                              float alpha, float eta, int refract)\n      closure color microfacet (string distribution, normal N, vector U,\n                          float xalpha, float yalpha, float eta, int refract)\n  These replace the growing zoo of microfacet_blah functions (using\n  different distribution values such as \"beckmann\" or \"ggx\", as well as\n  selecting refraction when refract!=0). The old varieties are now considered\n  deprecated and will eventually be removed (but will alow back-compatibility\n  of compiled oso files).\n* Remove documentation about unimplemented hash() function -- it was never\n  implemented, and we can't figure out what it's good for. (#359) (1.5.7)\n* Documented the specific names that should be used with getattribute() to\n  retrieve common camera parameters. We should expect these to be the same\n  for all renderers (though individual renderers may also support additional\n  attribute queries). #393 (1.5.9)\n\nAPI changes, new options, new ShadingSystem features (for renderer writers):\n* ShadingSystem API changes:\n   * ShadingSystem::Parameter() has a new variety that can set lockgeom=0\n     for a particular parameter at runtime, even if it was not declared\n     this way in the shader's metadata.  This allows an app to effectively\n     say \"I intend to vary this shader's parameter value, don't optimize as\n     if it were a a constant.\" (1.5.1)\n   * New ShadingSystem::ReParameter() lets you change the instance value of\n     a shader parameter after the shader group has already been declared\n     (but only if the shader has not yet been optimized, OR if the\n     parameter was declared with lockgeom=0). This, in combination with the\n     new SS::Parameter() variety, lets an app select a parameter for\n     variation, compile the shader network, and then continuously modify\n     the value and re-render without needing to redeclare and recompile the\n     shader group (though at a slightly higher execution cost than if the\n     parameter were fully optimized. (1.5.1)\n   * ShadingAttribState has been simlified and replaced with ShaderGroup.\n     And ShadingAttribStateRef replaced by ShaderGroupRef. (1.5.1)\n   * ShaderGroupBegin returns the ShaderGroupRef for the group, there is\n     no need to call state() to get the group reference. (1.5.1)\n   * New ShadingSystem::getattribute() and attribute() varieties that takes\n     a ShaderGroup* as a first argument, allows setting and retrieval of\n     attributes pertaining to a specific shader group. (#362, #368) (1.5.8)\n     SEE SECTION BELOW ON GROUP-SPECIFIC ATTRIBUTES\n   * New ShaderGroupBegin() variant takes a text description of a shader\n     group. (3.5.8) (#379) For example:\n         ShaderGroupBegin (\"groupname\", \"surface\",\n                           \"param float fin 3.14; \" /*concatenate string*/\n                           \"shader a alayer;\"\n                           \"shader b blayer;\"\n                            \"connect alayer.f_out blayer.f_in;\");\n   * ShadingSystem methods renderer() and texturesys() retrieve the\n     RendererServices and TextureSystem, respectively. (1.5.8)\n   * ShadingSystem statistics output now prints the version and major\n     runtime options. (1.5.8) (#369)\n* New/changed ShadingSystem global attributes:\n   * Attributes \"archive_groupname\" and \"archive_filename\", when set, will\n     cause the named group to be fully archived into a .tar, .tar.gz, or\n     .zip file containing the serialized description of the group, and all\n     .oso files needed to reconstruct it. This is great for shipping\n     debugging or performance benchmark cases to the developers! It's also\n     a good way to \"extract\" a shader network from the midst of a complex\n     renderer and then be able to reconstitute it inside a debugging test\n     harness like testshade. (1.5.8) (#381) For more detail and explanation,\n     please see https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/pull/381\n* New per-ShaderGroup attributes:\n   * ShadingSystem::getattribute(group,...) allows queries that retrieve\n     all the names and types of userdata the compiled group may need\n     (\"num_userdata\", \"userdata_names\", \"userdata_types\"), as well as the\n     names of all textures it might access and whether it's possible that\n     it will try to acccess textures whose names are not known without\n     executing the shader (\"num_textures_needed\", \"textures_needed\",\n     \"unknown_textures_needed\"). (#362) (1.5.8)\n   * Retrieving the group attribute \"pickle\" (as a string) gives you the\n     serialized description of the shader group in the same format that is\n     accepted by ShaderGroupBegin(). (1.5.8) (#381)\n   * Group-wise attribute \"renderer_outputs\" (array of strings) lets you\n     specify different renderer outputs for each shader group in addition\n     to the ShadingSystem-wide \"renderer_outputs\" that apply to all groups.\n     Remember that naming the renderer outputs prevents those from being\n     optimized away if they are not connected to downstream\n     shaders. (1.5.8) (#386)\n   * New group attribute queries: \"groupname\", \"num_layers\", \"layer_names\"\n     allow you to ask for the name of the group, how many layers there are,\n     and the names of all the layers.\n* ShaderGlobals changes:\n   * Added a RendererServices pointer to ShaderGlobals, to eliminate a\n     bunch of pointless indirection during shader execution. (1.5.2)\n   * Split the definition of ShaderGlobals into its own header file,\n     shaderglobals.h. (1.5.1)\n* RendererServices changes:\n   * RendererServices::get_texture_info method parameters have changed, now\n     includes an additional ShaderGlobals* parameter (as did all the other\n     texture functions already). (1.5.5)\n   * Split RendererServices definition into separate rendererservices.h. (1.5.6)\n   * Add RendererServices::texturesys() that returns a pointer to the\n     RS's TextureSystem. (1.5.6)\n   * Add a ShaderGlobals* parameter to the various get_matrix and\n     get_inverse_matrix methods. This makes it easier for renderers that\n     might need the ShaderGlobals (or access to the void* renderstate\n     contained therein) to look up matrices, especially if the renderer\n     supports different per-primitive transformation name bindings.\n     #396 (1.5.10)\n   * Change the last 4 RenderServices methods that took a void* renderstate\n     to instead take a ShaderGlobals *. It's more general, since the SG\n     does itself contain the renderstate pointer, and some implementations\n     or features might need the other contents of the SG. #396 (1.5.10)\n* OSLQuery changes:\n   * OSLQuery::Parameter has a new 'structname' field, that for struct\n     parameters reveals the name of the structure type. The oslinfo utility\n     has also been updated to print this information. (1.5.4)\n   * OSLQuery now may be initialized by a ShaderGroup*, which allows an\n     app with a live shading system to query information about shaders\n     much more efficiently than reloading and parsing the .oso file from\n     disk. #387 (1.5.8)\n   * OSLQuery API has replaced most of its std::string parameters and\n     members with string_view and ustring, to speed it up and eliminate\n     lots of small allocations. This may introduce some small source\n     incompatibilities with the old OSLQuery, but they should be very\n     easy to fix in your code.  #387 (1.5.8)\n* Miscellaneous/general:\n   * Use OIIO's new string_view for many public API input parameters that\n     previously took a std::string& or a const char*. (1.5.7) (#361)\n   * De-virtualized OSLCompiler and ShadingSystem classes -- it is now safe to\n     construct them in the usual way, the create() and destroy() functions for\n     them are optional/deprecated. (#363) (1.5.8)\n\nPerformance improvements:\n* Dramatically speed up LLVM optimization & JIT of small shaders --\n  reducing the per-shader-network compile overhead of small shaders\n  from 0.1-0.2s to less than 0.01s per shader group. (1.5.1)\n* Runtime constant folding of substr(). (1.5.6)\n* Improved code generation for texture calls, removing redundant setting\n  of optional texture parameters when they don't change from the default\n  values. (1.5.6)\n* Remove lock from RendererServices texture calls that would create a big\n  thread botteneck (but only for renderers that used the RS base class\n  texture calls; those that overrode them would not notice). (1.5.6)\n* Constant folding of certain assignments to individual components or\n  array elements. (#356) (1.5.7)\n* Much more complete constant-folding of format(). (1.5.8) (#366)\n* Enhanced simplification of component and array assignment, when\n  multiple assignments actually fill out the entire array or aggregate.\n  For example: 'color C; C[0] = 3.14; C[1] = 0; C[2] = 42.0;'\n  Now it recognizes that all components are assigned and will replace\n  the whole thing (and subsequent uses of C) with a constant\n  color. (1.5.8) (#367)\n* Eliminate redundant retrieval of userdata within a shading\n  network. (1.5.8) (#373)\n\nBug fixes:\n* testshade/testrender timer didn't properly break out execution time\n  from setup time. (1.4.1/1.5.1)\n* Guard matrix*point transformations against possible division by zero.\n  (1.4.1/1.5.1)\n* Fix subtle bug with splines taking arrays, where the number of knots\n  passed was less than the full length of the array, and the knots had\n  derivatives -- the derivatives would be looked up from the wrong spot\n  in the array (and could read uninitialized portions of the array).\n  (1.4.1/1.5.3)\n* Fix incorrect function declarations for the no-bitcode case (only\n  affected Windows or if a site purposely built without precompiled\n  bitcode for llvm_ops.cpp). (1.4.1/1.5.3)\n* When using Boost Wave for oslc's preprocessor, fixed it so that\n  variadic macros work. (1.5.4)\n* Ensure that isconnected() works for struct parameters. (1.5.4)\n* Fix incorrect data layout in heap for certain array parameters.\n  (1.5.5/1.4.2)\n* oslc -D and -U did not work properly when OSL was built against\n  Boost Wave as the C preprocessor. (1.5.5/1.4.2)\n* oslc bug fix for innitializing array elements inside a parameter that's a\n  struct. (1.5.6)\n* Implementation of the luminance() function has been improved to\n  guarantee that all the components sum to exactly 1.0. (1.5.6)\n* OSLQuery: for array parameters whose source code only specify default\n  values for partially initializing the array, nonetheless make the\n  default vectors be the correct length for the array (with zeroes for\n  array elements without explicit initialization). (1.5.6)\n* oslc: negating closures resulted in hitting an assertion. (1.5.6)\n* ShadingSystem - bug fix when Parameter() sets the same parameter twice\n  for the same instance, the second time back to the default\n  value. (1.5.8) (#370)\n* Fix debug printing crash when group name was not set. (1.5.7)\n* Bug fix with runtime optimization instance merging -- differing\n  \"lockgeom\" status of parameters should invalidate the merge. (1.5.8) (#378)\n* Runtime optimizer bug fix: output parameter assignment elision was\n  overly aggressive when the output parameter in question was a renderer\n  output (and therefore should not be elided). (1.5.8) (#378)\n* Fix printf(\"%f\",whole_float_array) to work properly. (1.5.8) (#382)\n* oslc improperly allowed ONE too many initializers for arrays. (1.5.8) (#383)\n\nUnder the hood:\n* Internals refactor that separates the runtime optimization from the\n  LLVM generation and JIT. (1.5.1)\n* Removed legacy built-in closures that weren't actually used. (1.5.1)\n* Split all the direct calls to LLVM API into a separate LLVM_Util\n  class, which has no other OSL dependencies and may be used from other\n  apps to simpilfy use of LLVM to JIT code dynamically. (1.5.1)\n* Stop using deprecated TypeDesc #defines. (1.5.4)\n* A shader's printf, warning, and error output is now buffered so that\n  all the \"console\" output from a shader invocation will appear\n  contiguous in a log, rather than possibly line-by-line interspersed\n  with the output of another shader invocation running concurrently in a\n  different thread (1.5.5).\n* By de-virtualizing OSLCompiler and ShadingSystem classes, we make it\n  much easier in the future to change both these classes (at least, adding\n  new methods) and changing the Impl internals, without breaking link\n  compatibility within release branches. (#363) (1.5.8)\n* Eliminate the need for a special dlopen when using OSL from within\n  a DSO/DLL plugin of another app. (1.5.8) (#374, #384)\n\nBuild & test system improvements and developer goodies:\n* Make OSL work with LLVM 3.4 (1.5.4)\n* New llvm_util.h contains an LLVM_Util standalone utility class that can\n  be used from any app as a simplified wrapper for LLVM code generation\n  and JIT. (1.5.1)\n* testshade consolidates --iparam, --fparam, --vparam, --sparam into\n  just --param that figures out the types (or could be explicitly\n  told. (1.5.1)\n* More robust detection of clang, for older cmake versions.\n  (1.4.1/1.5.1)\n* Handle 3-part version numbers for LLVM installations. (1.4.1/1.5.1)\n* Fix USE_EXTERNAL_PUGIXML versus USING_OIIO_PUGI issue. (1.4.1/1.5.3)\n* Remove all ehader include guards, switch to '#pragma once' (1.5.2)\n* Adjust build to account for new library names in OpenEXR 2.1. (1.5.3)\n* Make sure we include all OpenEXR and Ilmbase headers with <OpenEXR/foo.h>\n  and remove the addition of OpenEXR sub-folder from system search paths.\n  (1.5.1)\n* Better detection of LLVM version number from the LLVM installation.\n  (1.5.1)\n* Support for using LLVM's \"MCJIT\" instead of \"old JIT\" (controlled by\n  using the optional 'make USE_MCJIT=1'). This is mostly experimental,\n  and not recommended since performance of old JIT is still much better\n  than MCJIT. (1.5.6) Fixes in (1.5.8) (#385)\n* Moved the source of all public header files to src/include/OSL, to more\n  closely mimic the install file layout. (1.5.6)\n* Fixes for compilation warnings with newer gcc. (1.5.7) (#351)\n* Fixes for IlmBase 2.1 build breakages. (#354) (1.5.7)\n* Make testshade multithreaded, so it's always exercising the thread\n  safety of the shading system. (1.5.8) (#365)\n* Compatibility with cmake 3.0. (1.5.8) (#377)\n* Fix warnings with some gcc versions. (1.5.8)\n* Make testrender accept the new shadergroup syntax. (1.5.9)\n* Make testrender & testshade support all the standard camera getattribute\n  queries. (1.5.9)\n* testshade/testrender: have get_attribute fall back on get_userdata,\n  and have get_userdata bind \"s\" and \"t\" to make it easy to test\n  shader that rely on userdata. #395 (1.5.10)\n* Fixes for Boost 1.55 + Linux combination, where it needed -lrt on the\n  link line. #394 (1.5.10)\n* Windows build fix for compiling shaders finding the right oslc.exe.\n  #399 (1.5.11)\n\nDocumentation:\n* Clarified docs about floor(). (1.5.8)\n* Clarified that oren_nayar() is the name of the function, not\n  orennayar (it was not consistent). (1.5.8) (#375)\n* backfacing() was previously left out of the docs. (1.5.8) (#376)\n* Documented the specific names that should be used with getattribute() to\n  retrieve common camera parameters. We should expect these to be the same\n  for all renderers (though individual renderers may also support additional\n  attribute queries). #393 (1.5.9)\n* Clarify that we intend for getattribute() to be able to retrieve\n  \"userdata\" (aka primitive variables) if no attribute is found with the\n  matching name. #395 (1.5.10)\n\n\n\n\nRelease 1.4.1 - 19 Dec 2013 (compared to 1.4.0)\n-----------------------------------------------\n* Guard matrix*point transformations against possible division by zero.\n* Fix subtle bug with splines taking arrays, where the number of knots\n  passed was less than the full length of the array, and the knots had\n  derivatives -- the derivatives would be looked up from the wrong spot\n  in the array (and could read uninitialized portions of the array).\n* testshade/testrender - Fix timer call that wasn't correctly reporting\n  execution time versus total time.\n* Fix incorrect function declarations for the no-bitcode case (only\n  affected Windows or if a site purposely built without precompiled\n  bitcode for llvm_ops.cpp).\n* Build: more robust detection of clang, for older cmake versions.\n* Build: handle 3-part version numbers for LLVM installations.\n* Build: Fix USE_EXTERNAL_PUGIXML versus USING_OIIO_PUGI issue.\n\n\nRelease 1.4.0 - 12 November 2013 (compared to 1.3)\n--------------------------------------------------\n\nLanguage, standard libary, and compiler changes (for shader writers):\n\n* Simplex noise: new noise varieties \"simplex\" and \"usimplex\" are \n  faster than Perlin noise (and MUCH faster for the 4-D variety),\n  but has a somewhat different appearance.  Judge for yourself, use\n  whichever noise suits your purpose.\n* oslc now catches mismatches between the format string and the types\n  of arguments to format(), printf(), fprintf(), warning(), and error().\n* oslc now gives a compile error when trying to use a function as\n  if it were an ordinary variable. (1.3.2)\n* Improvement to oslc function type checking -- allow more nuanced\n  matching of polymorphism based on return types.  First we check for\n  identical return types, then we test allowing non-identical spatial\n  triples to match, then finally we allow any return type to match.\n* New ShadingSystem attribute \"debug_uninit\", which when set to nonzero\n  tries to detect use of uninitialized variables at runtime.  (Off by\n  default because it's very expensive, just use if you are debugging.)\n* Implemented the OSL aastep() function, which was always described in\n  the docs but never implemented.\n* The texture lookup functions all take new optional parameters,\n  \"missingtexture\", (color), \"missingalpha\", (float), which when supplied\n  will substitute that color and alpha for missing or broken textures,\n  rather than treating it as an error condition.\n* New gettextureinfo() queries: \"datawindow\", \"displaywindow\" (both take\n  an int[4] as destination argument).\n\nShadingSystem API changes and new options (for renderer writers):\n\n* New ShadingSystem attribute \"renderer_outputs\" enumerates the renderer\n  outputs (AOVs) explicitly, so that elision of unused outputs can be done\n  with full understanding of which params will or will not be sued.\n  Beware: if you enable \"opt_elide_unconnected_outputs\", you MUST pass\n  \"renderer_outputs\" or your AOVs may be eliminated!\n\nPerformance improvements:\n\n* \"Middleman\" optimization notices when you have 3 layers A,B,C with\n  connections A.Aout -> B.Bin and B.Bout -> C.Cin, an Bout is simply\n  copied unconditionally from Bin.  In this case, Aout is connected\n  directly to Cin, potentially leading to further optimizations, including\n  layer B getting culled entirely.\n* Layer-to-layer global propagation: Notice cases where an upstream\n  output is guaranteed to be aassigned a global variable (such as N or u)\n  and then alias the downstream parameter to that global (eliminating\n  the connection and possibly culling the upstream layer entirely).\n* Improve constant propagation from layer to layer (it used to do so only\n  if the output of the earlier layer was never used in the upstream layer;\n  but actually it's ok for it to be read, as long as it's not rewritten).\n* Runtime constant-folding of cellnoise() calls.\n* Local variables that are arrays initialized with float, int, or string\n  constants have been greatly optimized.  If that's the only time anything\n  is written into the array, it will be turned into a true static constant\n  with no per-shader-invocation initialization or allocation costs.\n  Thus, it is no longer expensive to use a large array of constants as a\n  table... it may look like a per-shade cost to set up the array, but by\n  the time the optimizer gets done with it, it is not.\n* Improved runtime constant-folding of max/min (now works for the integer\n  case, as well as previously working for the float-based types).\n* Runtime constant-folding of cos, sin, acos, asin, normalize, inversesqrt,\n  exp, exp2, expm1, log, log2, log10, logb, erf, erfc, radians, degrees.\n* Optimization that speeds up certain closure manipulations and can\n  cut overhead especially for relatively simple shaders.\n* New peephole optimizations for two common patterns: \n  (1) add A B C ; sub D A C => [add A B C;] assign D B\n  and the same if the order of add & sub are switched.\n  (2) OP A B... ; assign A C => OP C B...  as long as A is not subsequently\n  used and OP fully overwrites A and writes to no other variables.\n* Constant folding of Dx, Dy, Dz, area, and filterwidth, when passed a\n  constant (the deriv will be 0 in that case).\n* Substantial multithread speedups by eliminating testing of some shared\n  variables.\n* Constant folding of add & sub for the mixed float/triple cases.\n* Speed up closure construction by combining the closure primitive with\n  its (nearly inevitable) multiplication by weight, into a single internal\n  operation.\n* The OSLQuery library has been sped up by 20x when querying the parameters\n  of large shaders.\n\nBug fixes:\n\n* Fix 'debugnan' tendency to give false positives for certain assignments\n  to arrays and multi-component variables (colors, points, etc.).\n* The integer versions of min(), max(), and clamp() were not working\n  properly. (1.3.1)\n* fmod(triple,triple,float) was not working properly in Windows. (1.3.2)\n* Avoid incorrect heap addressing when retrieving a symbol's address. (1.3.2)\n* Fix for a bug where an early 'return' from a shader could lead to\n  output parameters not being properly copied to the inputs of their\n  downstream connections. (1.3.2)\n* Fix bug where filterwidth() didn't properly mark itself as needing\n  derivatives of its argument. (1.3.2)\n* Bug fix: Was not properly initializing the default values of output\n  params if they were written but never subsequently read.\n* Better error handling for missing pointclouds.\n* Fixed improper initialization of arrays of closures.\n* Fixed constant folding bug for the split() function.\n* Fixed constant folding bug for pow(x,2.0).\n\nUnder the hood:\n\n* Eliminate use of custom DEBUG preprocessor symbol in favor of the more\n  standard NDEBUG (beware: its sense is reversed).\n* All references to and vestiges of TBB have been removed.\n\nBuild & test system improvements and developer goodies:\n\n* testshade: --options lets you set arbitrary options to the ShadingSystem\n  for test runs.\n* Added CMake option 'ENABLERTTI' that enables use of RTTI for sites that\n  must link against an RTTI-enabled LLVM (the default is to assume LLVM\n  is built without RTTI, so we don't use it either). (1.3.1)\n* Fix some ambiguity about which variety of shared_ptr we are using -- \n  this could produce problems in apps that include the OSL headers but also\n  use different shared_ptr varieties.\n* Fix a variety of build issues and warnings under Windows.\n* Work around CMake bug where on some platforms, CMake doesn't define the\n  'NDEBUG' when making the 'RelWithDebInfo' target (which is sometimes\n  used for profiling). (1.3.1)\n* Add Make/CMake option 'USE_EXTERNAL_PUGIXML' which if set to nonzero\n  will find and use a system-installed PugiXML rather than assuming that\n  it's included in libOpenImageIO.  When used, it will also use the\n  environment variable PUGIXML_HOME (if set) as a hint for where to find\n  it, in case it's not in a usual system library directory. (1.3.1)\n* Nicer debug printing (for developers) when an op doesn't have an\n  associated source line. (1.3.2)\n* Reorder include directories for building LLVM bitcode so that the\n  openimageio, ilmbase and boost directories are ahead of any system\n  directories given by llvm-config --cxxflags.  This avoids the LLVM\n  bitcode getting compiled against different library versions than the\n  rest of the code if multiple versions are installed.\n* Have debug_groupname and debug_layername apply to LLVM debugging info\n  as well.\n* Support for LLVM 3.3.\n* Fix compiler warnings for clang 3.3 and libc++.\n* CMake files now more carefully quote assembled file paths to more\n  gracefully handle paths with spaces in them.\n* CMakeLists.txt has been moved to the top level (not in src/) to conform\n  to the usual CMake conventions.\n\nDocumentation:\n\n* Eliminate references to OSL random() function; it was never\n  implemented and nobody seemed to miss it or have a compelling use\n  case. (1.3.1)\n\n\n\n\nRelease 1.3.3 - 11 July 2013 (compared to 1.3.2)\n------------------------------------------------\n* Fix bug in the implementation of filterwidth() when passed a constant\n  (for which no derivative could be taken).\n* Changes to support LLVM 3.3.\n\n\nRelease 1.3.2 - 19 Jun 2013 (compared to 1.3.1)\n-----------------------------------------------\n* fmod(triple,triple,float) was not working properly in Windows.\n* Nicer debug printing (for developers) when an op doesn't have an\n  associated source line.\n* Avoid incorrect heap addressing when retrieving a symbol's address.\n* oslc new gives a compile error when trying to use a function as\n  if it were an ordinary variable.\n* Fix for a bug where an early 'return' from a shader could lead to\n  output parameters not being properly copied to the inputs of their\n  downstream connections.\n* Fix bug where filterwidth() didn't properly mark itself as needing\n  derivatives of its argument.\n\n\nRelease 1.3.1 - 15 May 2013 (compared to 1.3.0)\n-----------------------------------------------\n* The integer versions of min(), max(), and clamp() were not working\n  properly.\n* Added CMake option 'ENABLERTTI' that enables use of RTTI for sites that\n  must link against an RTTI-enabled LLVM (the default is to assume LLVM\n  is built without RTTI, so we don't use it either).\n* Work around CMake bug where on some platforms, CMake doesn't define the\n  'NDEBUG' when making the 'RelWithDebInfo' target (which is sometimes\n  used for profiling).\n* Docs: Eliminated discussion of random(), which was never implemented\n  and we can't think of a good use case.\n* Add Make/CMake option 'USE_EXTERNAL_PUGIXML' which if set to nonzero\n  will find and use a system-installed PugiXML rather than assuming that\n  it's included in libOpenImageIO.  When used, it will also use the\n  environment variable PUGIXML_HOME (if set) as a hint for where to find\n  it, in case it's not in a usual system library directory.\n\n\nRelease 1.3.0 - 14 Feb 2013 (compared to 1.2)\n----------------------------------------------\n\nLanguage, standard libary, and compiler changes (for shader writers):\n\n* pointcloud_write() allows shaders to write data and save it as a point\n  cloud.\n* spline now accepts a \"constant\" interpolation type, which interpolates\n  with discrete steps.\n* isconnected(var) returns true if var is a shader parameter and is\n  connected to an earlier layer. This is helpful in having shader logic\n  that can discern between a connected parameter versus a default.\n* Whole-array assignment is now supported.  That is, if A and B are arrays\n  of the same type and length(A) >= length(B), it is legal to write\n  A=B without needing to write a loop to copy each element separately.\n* stoi() and stof() convert strings to int or float types, respectively\n  (just like the identically-named functions in C++11).  These do properly\n  constant-fold during runtime optimization if their inputs can be deduced.\n* split() splits a string into tokens and stores them in the elements of an\n  array of strings (and does constant-fold!).\n* distance(point A, point B, point Q) gives the distance from Q to the\n  line segment joining A and B.  This was described by the OSL spec all\n  along, but somehow was not properly implemented.\n\nShadingSystem API changes and new options (for renderer writers):\n\n* Default implementation of all the pointcloud_*() functions in\n  RendererServices, if Partio is found at build time.\n* ShadingSystem attribute \"compile_report\" controls whether information\n  should be sent to the renderer for each shading group as it compiles.\n  (The default is now to be more silent, set this to nonzero if you want\n  to see the old per-group status messages.)\n* ShadingSystem attribute \"countlayerexecs\" adds debugging code to count\n  the total number of shader layer executions (off by default; it slows\n  shader execution down slightly, is only meant for debugging).\n* Add a parameter to OSLCompiler::compile to specify the path to the\n  stdosl.h file.\n* New call: ShadingSystem::LoadMemoryCompiledShader() loads a shader with\n  OSO data from a memory buffer, rather than from a file.\n\nPerformance improvements:\n\n* Reduce instance symbol memory use, lowering OSL-related memory by 1/2-2/3\n  for large scenes.\n* Identical shader instances within a shader group are automatically\n  merged -- this can have substiantial performance and memory\n  improvements for very complex shader groups that may (inadvertently,\n  for convenience, or as an artifact of certain lookdev tools) have\n  multiple instances with identical input parameters and connections.\n  We have seen some shots that render up to 20% faster with this change.\n* Better constant-folding for pointcloud_get (if indices are known).\n* Speed up implementation of exp() for some Linux platform (works around\n  a known glibc issue).\n* Speed up of mix() by making it a built-in function (rather than defined\n  in stdosl.h) and doing aggressive constant folding on it. Also some special\n  cases to try to avoid having mix() unnecessarily trigger execution of\n  earlier layers when one or both of its arguments is a connected shader\n  param and the mix value turns out to be 0 or 1.\n* Runtime optimization now includes constant-folding of getattribute()\n  calls, for those attributes which are scene-wide (such as renderer options\n  that apply to the whole frame).\n* Improvements in the algorithm that tracks which symbols need to carry\n  derivatives around results in MUCH faster compile times for extremely\n  complex shaders.\n* Improve bad performance for shaders that call warning() prolifically, by\n  imposing a maximum number of shader warnings that are echoed back to the\n  renderer (controlled by ShadingSystem attribute \"max_warnings_per_thread\",\n  which defaults to 100; 0 means that there is no maximum).\n\nBug fixes and minor improvements:\n\n* Fix incorrect oso output of matrix parameter initialization. (This did\n  not affect shader execution, but could result in oslquery/oslinfo not\n  reporting default matrix parameter values correctly.)\n* Bug fix: oslinfo didn't print int metadata values properly.\n* oslc better error checking when calling a variable as if it were a\n  function.\n* Parsing of oso files was broken for compiled shaders that had string\n  metadata whose metadata value contained the '}' character.\n* Pointcloud function bug fixes: now robust to being passed empty filenames,\n  or calling pointcloud_get when count=0.\n* Fix crash with C preprocessor when #include fails or no shader function\n  is defined.\n* Improve error reporting when parsing oso, especially in improving the\n  error messages when an old renderer tries to load a .oso file created by\n  a \"newer\" oslc, and the oso contains new instruction opcodes that the\n  older renderer didn't know about.\n* oslc now gives a helpful error message, rather than hitting an assertion,\n  if you try to index into a non-array or non-component type.\n* Broken \"XYZ\" color space transformations because of confusion between\n  \"xyz\" and \"XYZ\" names.\n* oslc: correctly catch errors with integer literals that overflow.\n* oslc: proper error, rather than assertion, for \n  'closure color * closure color'.\n* oslc: proper handling of preprocessor errors when stdosl.h is in a path \n  containing spaces.\n* Fix bugs in the OSL exit() function.\n* Don't error/warn if metadata name masks a global scope name.\n\nUnder the hood:\n\n* Simplify code generation of binary ops involving closures.\n\nBuild & test system improvements and developer goodies:\n\n* Many, many fixes to enable building and correct running of OSL on\n  Windows.  Too many to list individually, let's just say that OSL 1.3\n  builds and runs pretty robustly on Windows, older versions did not.\n* Remove unused OpenGL and GLEW searching from CMake files.\n* Fix a variety of compiler warnings, particularly on newer compilers,\n  32 bit platforms, and Windows.\n* Find LLVM correctly even when using \"svn\" LLVM versions.\n* Adjust failure threshold on some tests to account for minor platform\n  differences.\n* New minimum OIIO version: 1.1.\n* CMake fixes: Simplify searching for and using IlmBase, and remove\n  unneeded search for OpenEXR.\n* Find Partio (automatically, or using 'make PARTIO_HOME=...'), and if\n  found, use it to provide default RendererServices implementations of\n  all the pointcloud-related functions.\n* Make/CMake STOP_ON_WARNING flag (set to 0 or 1) controls whether the\n  build will stop upon any compiler warning (default) or if it should\n  keep going (=0).\n* Fixed bad interaction between weave preprocessor, OIIO::Strutil::format,\n  and gcc 4.7.2.\n* Fixes for static linkage of liboslcomp.\n* Addressed compilation errors on g++ 4.7.2.\n* Improved logic and error reporting for finding OpenImageIO at build time.\n* Add support for linking to static LLVM libraries, and for specifying\n  a particular LLVM version to be used.\n* New BUILDSTATIC option for CMake/Make allows building of static OSL \n  libraries.\n* Fixes to allow OSL to use LLVM 3.2.\n* Fixes to allow OSL to be compiled by clang 3.2.\n* Fixes to allow building on Windows with MinGW.\n* Fix for building from a chroot where the host may be, e.g., 64 bit, but\n  the target is 32 bit.\n* Minimize cmake output clutter for things that aren't errors, unless\n  VERBOSE=1.\n* Various fixes to get OSL building and running on FreeBSD.\n* Cmake/make option USE_LLVM_BITCODE to be able to force LLVM bitcode\n  compilation on or off (defaults to on for Windows, off for Unix/Linux).\n\nDocumentation:\n* Clarify that documentation is licensed under Creative Commons 3.0 BY.\n* Clean up OSL Spec discussion of built-in material closures.\n* Overhaul the suggested metadata conventions in the OSL spec (now \n  conforms to the conventions used by Katana).\n\n\n\n\nRelease 1.2.1 - 6 Nov, 2012 (compared to 1.2.0)\n-----------------------------------------------\n* Fix incorrect oso output of matrix parameter initialization. (This did\n  not affect shader execution, but could result in oslquery/oslinfo not\n  reporting default matrix parameter values correctly.)\n* Build: remove unused OpenGL and GLEW searching from CMake files.\n* Build: Fix a variety of compiler warnings, particularly on newer compilers,\n  32 bit platforms, and Windows.\n* Build: Find LLVM correctly even when using \"svn\" LLVM versions.\n* Bug fix: oslinfo didn't print int metadata values properly.\n\n\nRelease 1.2.0 - Aug 30, 2012 (compared to 1.1)\n----------------------------------------------\nNote: this is more or less the production-hardened version of OSL that\nwas used to complete Men in Black 3, The Amazing Spider-Man, and Hotel\nTransylvania.\n\nNew tools/utilities:\n* New program \"testrender\" is a tiny ray-tracing renderer that uses OSL\n  for shading.  Features are very minimal (only spheres are permitted at\n  this time) and there has been no attention to performance, but it\n  demonstrates how the OSL libraries may be integrated into a working\n  renderer, what interfaces the renderer needs to supply, and how the\n  BSDFs/radiance closures should be evaluated and integrated (including\n  with multiple importance sampling).\n* shaders/ubersurface.osl is an example of a general purpose surface\n  shader.\n\nLanguage, standard libary, and compiler changes:\n* texture()/texture3d() support for subimage/face selection by name as\n  well as by numeric index.\n* getattribute() performs automatic type conversions that mostly\n  correspond to the kind of automatic type casting you would get from\n  ordinary assignments in OSL.  For example, getattribute(\"attrib\",mycolor)\n  used to fail if \"attrib\" turned out to be a float rather than a color;\n  but now it succeeds and copies the float value to all three channels\n  of mycolor.\n\nShadingSystem API changes and new options:\n* Remove unused 'size' parameter from the register_closure API.\n\nOptimization improvements:\n* Constant-fold pointcloud_search calls when the position is a constant if\n  the search returns few enough results, by doing the query at optimization\n  time and putting the results into new constant arrays.\n* Matrix parameters initialized by m=matrix(constA,constB,...) now \n  statically initialize, and no longer need to run initialization code\n  each time the shader executes.\n\nBug fixes and minor improvements:\n* Fix pointcloud_search to optionally take a 'sort' parameter, as\n  originally documented.\n* Unit tests weren't properly run as part of the testsuite.\n* Track local+temp memory usage of optimized shaders and consider it an \n  error if a shader needs more than a maximum amount at runtime, set with\n  the \"max_local_mem_KB\" attribute.\n* Add pointcloud statistics.\n* Fix derivative error for sincos() when the inputs have no derivatives but\n  the outputs do.\n* Bug fix to vector-returning Gabor noise (it could previously generate\n  different values for different platforms).\n* printf() of closures built from other closures allows for proper\n  recursive printing of the closure tree.\n\nBuild & test system improvements and developer goodies:\n* Simplify the namespace scheme.\n* Remove support for certain old dependencies: OIIO versions < 0.10,\n  LLVM < 3.0, and Boost < 1.40.\n* Lots of little fixes to solve compiler warnings on various compilers.\n* Support for newer OSX releases, particularly if /usr/bin/cpp-4.2 is not\n  found.\n* Better support for Boost::wave (portable C preprocessor replacement).\n  Build with 'make USE_BOOST_WAVE=1' to force Wave use instead of system\n  cpp.\n* You can select a custom LLVM namespace with 'make LLVM_NAMESPACE=...'.\n* Symbols that are not part of the OSL public APIs are now hidden from the\n  linker in Linux/OSX if the CMake variable HIDE_SYMBOLS is on.\n* New Makefile/CMake option LLVM_STATIC can be used to use static LLVM\n  libraries rather than the default dynamic libraries.\n* Support for LLVM 3.1.\n* Support for building with Clang 3.1 (lots of warning fixes).\n* Makefile/CMake variable EXTRA_CPP_DEFINITIONS allows you to inject\n  additional compiler flags that you may need to customize the build for\n  your site or a choice of unusual compiler.\n* Add support for 'PROFILE=1' builds that are appropriate for use with\n  a profile.\n\n\n\nRelease 1.1.0 - Mar 14, 2012 (compared to 1.0.0)\n------------------------------------------------\nLanguage, standard libary, and compiler changes:\n* Allow closures as parameters to closures.\n* New constants: M_2PI, M_4PI\n* Generic noise: noise(\"noisetype\",coords,...)\n* Gabor noise (anisotropic, automatically antialiased) via noise(\"gabor\").\n* Fix mod/fmod discrepancy: fmod() now matches C, mod() always returns a\n  positive result like in RSL.\n* Allow \"if (closure): and \"if (!closure)\" to test if a closure is empty\n  or not.\n* New optional parameter to trace(): \"traceset\" allows you to specify a\n  named geometry set for tracing.\n\nShadingSystem API changes and new options:\n* New \"greedyjit\" option will optimize & JIT all shader groups up front,\n  concurrently, without locking.\n* Add a way to name shader groups.\n* attribute(\"options\",...) lets you set a bunch of options at once.\n* Options to enable/disable individual optimizations (mostly useful for\n  debugging)\n\nOptimization improvements:\n* Allow block alias tracking on non-constants when it's safe.\n* Track \"stale\" values to eliminate pointless assignments.\n* Eliminate redundant \"useparam\" ops.\n* Assignments to output parameters that are not connected to any\n  downstream layers are now eliminated.\n* More aggressive elision of ops that only write to symbols that won't\n  be subsequently used.\n* More careful identification and removal of parameters (input and output)\n  that are both unused in the shader and not connected downstream.\n\nBug fixes and minor improvements:\n* Minor blackbody fixes.\n* Bug fix: don't mark constants as having their derivatives taken.\n* Clamp splineinverse() for out-of-knot-range x input.\n* Bug fix: the optimization of \"a=b; a=c\" was incorrect if c was an\n  alias for a (it incorrectly eliminated the first assignment).\n* Bug fix: work around LLVM thread safety issues during JIT.\n* Bug fix: symbol_data() wasn't returning the right address for non-heap\n  parameters.\n* Bug fix: optimization errors related to break, continue, and return not\n  properly marking the next instruction as a new basic block.\n* Bug fix: luminance() with derivatives didn't work.\n* Bug fix: in code generation of structure initializers.\n* Improved error messages from ConnectShaders.\n* Bug fix: type checking bug could case non-exactly-matching polymorphic \n  functions to coerce a return value even when that was not intended.\n* Type checking improvements: Make sure point-point is a vector\n  expression, and point+vector & point-vector are point expressions.\n\nBuild & test system improvements and developer goodies:\n* testsuite overhauls:\n    - run each test both optimized and not\n    - generate all tests in build, not directly in ./testsuite\n    - greatly simplify the run.py scripts\n* Much more detailed debugging logs of the optimization process.\n* Upgrade to clang/llvm 3.0.\n* Lots of infrastructure to make debugging the optimizer easier.\n  Including new options debug_groupname, debug_layername, only_groupname.\n* Improved the build system's LLVM-finding logic.\n* Fix warnings from gcc 4.6.\n\n\n\nRelease 1.0.0 - Oct 12, 2011\n----------------------------\n* Modified testshade (and the underlying SimpleRender class) to handle\n  several standard named coordinate systems such as \"camera\", \"screen\",\n  \"NDC\", \"raster.\"\n* blackbody() and wavelength_color().\n* New ShadingSystem configuration attribute: \"colorspace\" lets you explain\n  to OSL what RGB really means (e.g., \"Rec709\", \"sRGB\", \"NTSC\", etc.).\n  The luminance(), blackbody(), wavelength_color, and conversion to/from\n  XYZ now takes this into account correctly.\n* rotate()  (always in spec, never implemented)\n\n\n\nRelease 0.6.2 - Sept 29, 2011\n-----------------------------\n* Statistics overhaul -- added optimization stats, eliminated unused ones.\n* Allow a shader parameter to mask a global built-in function with\n  only a warning, and improve scope conflict errors by pointing out the\n  file and line of the previous definition.\n* Altered the RendererServices API to add transform_points() method, which\n  allows renderers to support nonlinear transformations (i.e., those that\n  are not expressible as a 4x4 matrix).\n* Issue a renderer error when unknown coordinate system names are used\n  (can be turned of by setting the new ShadingSystem attribute \n  \"unknown_coordsys_error\" to false).\n* New OSL built-in function: splineinverse().\n\n\nRelease 0.6.1 - Sept 20, 2011\n-----------------------------\n* Be more aggressive in freeing shader instance memory that's no longer\n  needed after optimization and LLVM JIT.  This greatly reduces\n  OSL-related memory consumption for scenes with large numbers of very\n  complicated shading networks.\n* Add Dz() which is helpful for apps that use OSL to shade volumes.  At\n  present, we only correctly compute Dz(P), all other Dz() queries\n  return 0.\n* Additional statistics on how many instances and groups compile, and\n  how many are empty after all optimizations are performed.\n* Make sure all the relevant statistics can be queried via\n  ShadingSystem::getattribute.\n\n\nRelease 0.6.0 - Sept 9, 2011\n----------------------------\n* ShadeExec API overhaul -- an app using it no longer needs\n  ShadingSystemImpl internal knowledge.\n* Thread-parallel runtime optimization and LLVM JIT of different shader\n  groups.\n* Optimizations: runtime constant folding of arraylength and regex_search,\n  new instruction 'arraycopy' will copy an entire array at once.\n* Renamed patterns.h to oslutil.h.\n* Do not generate unnecessary code when optional texture parameters are set\n  to their default values.\n* Restore long-lost ability for layers to run unconditionally (not lazily)\n  if they were marked as \"non-lazy\" (for example, if they write to globals.\n* Make the \"debugnan\" attribute work again -- when turned on, code will\n  be inserted after every op to be sure that no NaN or Inf values are\n  generated, and also verify that shader inputs (globals) don't have NaN\n  or Inf values passed in by the renderer.  A similar facility existed a\n  long time ago, but we lost that functionality when we switched from\n  the interpreter to LLVM.\n* Looks for release versions of LLVM-2.9 (allows using a Macports LLVM \n  installation).\n\n\nRelease 0.5.4 - Jul 21, 2011\n----------------------------\n* Several fixes related to arrays of structs, and structs containing\n  other structs.\n* Fixed arrays of closures.\n* Removed support for old LLVM 2.7, nobody seemed to be using it any more.\n* Changed the definition of dict_find() to return -1 for an invalid\n  dictionary, to distinguish it from 0 meaning that the query failed but\n  the dictionary itself was valid.\n* Make array parameters safe to convert to constants during runtime\n  optimization.\n* Support derivatives in pointcloud searches.\n* Fixed several runtime optimizer bugs.\n* Fixed a bug where environment() calls with an optional \"alpha\" parameter\n  that has derivatives was overwriting memory.\n* Fixed code generation bug for a*=b and a/=b.\n* Automatically initialize all local string variables to NULL, to avoid\n  bad pointers for uninitialized strings.\n* Bug fix: dict_value() wasn't properly marking its argument as writable.\n* Automatic range checking of array and component access.\n* Fix uninitialized derivatives for pointcloud().\n* Speed up getattribute() calls by caching information about failed\n  getattribute queries in the ShadingContext.\n* Fix to constant folding of gettextureinfo: a failed lookup should not\n  fold, because we want the error to occur in shader execution, not during\n  optimization.\n* Refactor, clean up, and comment testshade.\n* oslc now gives an error on non-void functions that fail to return a value.\n* Fixed implementation of area() that could generate an assertion.\n* Fix escape sequences in string literals: we were handling it correctly\n  for printf-like format strings, but not other string literals.\n* break and continue now work properly (just like in C/C++).\n* You can now return from anywhere in a user function (multiple times if\n  you want), just like C/C++, and are no longer restricted to the only\n  return statement being the last statement of the function.\n* New include file for shaders: patterns.h.  Now, it only includes a handy\n  'wireframe()' function, but will expand for other useful things.\n* New function: int getmatrix(from,to,M) is like the matrix(from,to)\n  constructor, but returns a success value so a shader can tell if the\n  named coordinate systems failed to be found by the renderer.\n\n\nRelease 0.5.3 - Apr 19, 2011\n----------------------------\n* Fix missing derivatives for sign() function.\n* Fix closure color type size (crashes).\n* Fix bug with environment() when passed \"alpha\" pointers with derivatives.\n* Improve error messages for getmessage/setmessage to catch the most\n  common sources of non-deterministic behavior.\n* Bug fix when constant-folding gettextureinfo().\n* Fix mismatched prototype for subsurface() closure.\n* Texture errors encountered in shader constant folding are now properly\n  reported to the renderer.\n* Allow functions to have array parameters of unspecified length.\n* Fix subtle bug related to lifetime analysis of variables in loops (led\n  to incorrect optimizations).\n\n\nRelease 0.5.2 - Mar 14, 2011\n----------------------------\n\n* Windows: use boost::wave instead of external cpp; various other Windows\n  compilation fixes.\n* texture & environment now take an optional \"interp\" parameter that\n  overrides the interpolation/filtering method (valid arguments:\n  \"smartcubic\", \"cubic\", \"linear\", \"closest\").\n* Bug fixes to getmessage() and its handling of derivatives, which includes\n  a slight RendererServices API change.\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 12.7802734375,
          "content": "# Copyright Contributors to the Open Shading Language project.\n# SPDX-License-Identifier: BSD-3-Clause\n# https://github.com/AcademySoftwareFoundation/OpenShadingLanguage\n\ncmake_minimum_required (VERSION 3.19)\n\nset (OSL_VERSION \"1.14.3.0\")\nset (OSL_VERSION_OVERRIDE \"\" CACHE STRING\n     \"Version override (use with caution)!\")\nmark_as_advanced (OSL_VERSION_OVERRIDE)\nif (OSL_VERSION_OVERRIDE)\n    set (OSL_VERSION ${OSL_VERSION_OVERRIDE})\nendif ()\n\nproject (OSL VERSION ${OSL_VERSION}\n         LANGUAGES CXX C\n         HOMEPAGE_URL \"https://github.com/AcademySoftwareFoundation/OpenShadingLanguage\")\nset (PROJ_NAME ${PROJECT_NAME})    # short name\nstring (TOLOWER ${PROJ_NAME} PROJ_NAME_LOWER)  # short name lower case\nstring (TOUPPER ${PROJ_NAME} PROJ_NAME_UPPER)  # short name upper case\nset (PROJECT_VERSION_RELEASE_TYPE \"dev\" CACHE STRING\n    \"Build type, for example: dev, beta2, RC1 (empty string for normal release)\")\nset (${PROJECT_NAME}_VERSION_RELEASE_TYPE ${PROJECT_VERSION_RELEASE_TYPE})\nset (PROJECT_AUTHORS \"Contributors to the Open Shading Language project\")\noption (${PROJECT_NAME}_SUPPORTED_RELEASE\n       \"Set ON for supported release branch, OFF for master\" OFF)\nif (${PROJECT_NAME}_SUPPORTED_RELEASE)\n    set (${PROJECT_NAME}_DEV_RELEASE OFF)\nelse ()\n    set (${PROJECT_NAME}_DEV_RELEASE ON)\nendif ()\n\n# Set PROJECT_IS_TOP_LEVEL to ON if if this is the top level project (not\n# if this is included as a subproject of something else). Note that this is\n# handled automatically for CMake >= 3.21.\nif (CMAKE_VERSION VERSION_LESS 3.21)\n    if (\"${CMAKE_PROJECT_NAME}\" STREQUAL \"${PROJECT_NAME}\")\n        set (PROJECT_IS_TOP_LEVEL ON)\n    endif ()\nendif ()\n\n# Set up module path for our own cmake modules and add some esential ones\nlist (APPEND CMAKE_MODULE_PATH\n      \"${PROJECT_SOURCE_DIR}/src/cmake/modules\"\n      \"${PROJECT_SOURCE_DIR}/src/cmake\")\n\n# Utilities\ninclude (colors)\ninclude (set_utils)\ninclude (check_is_enabled)\ninclude (fancy_add_executable)\n\n# If the user wants to use Conan to build dependencies, they will have done\n# this prior to the cmake config:\n#   cd <build area>\n#   conan install <source area>\n# and that will leave a conanbuildinfo.cmake in the build area for us.\nif (EXISTS ${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)\n    include (${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)\n    message (STATUS \"Using Conan for dependencies\")\n    conan_basic_setup()\nendif()\n\nif (NOT CMAKE_BUILD_TYPE)\n    set (CMAKE_BUILD_TYPE \"Release\")\nendif ()\n\n# If the user hasn't configured cmake with an explicit\n# -DCMAKE_INSTALL_PREFIX=..., then set it to safely install into ./dist, to\n# help prevent the user from accidentally writing over /usr/local or whatever.\nif (CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT AND PROJECT_IS_TOP_LEVEL)\n    set (CMAKE_INSTALL_PREFIX \"${PROJECT_SOURCE_DIR}/dist\" CACHE PATH\n         \"Installation location\" FORCE)\nendif()\n\nmessage (STATUS \"Configuring ${PROJECT_NAME} ${PROJECT_VERSION}\")\nmessage (STATUS \"CMake ${CMAKE_VERSION}\")\nmessage (STATUS \"CMake system           = ${CMAKE_SYSTEM}\")\nmessage (STATUS \"CMake system name      = ${CMAKE_SYSTEM_NAME}\")\nmessage (STATUS \"Project source dir     = ${PROJECT_SOURCE_DIR}\")\nmessage (STATUS \"Project build dir      = ${CMAKE_BINARY_DIR}\")\nmessage (STATUS \"Project install prefix = ${CMAKE_INSTALL_PREFIX}\")\nmessage (STATUS \"Configuration types    = ${CMAKE_CONFIGURATION_TYPES}\")\nmessage (STATUS \"Build type             = ${CMAKE_BUILD_TYPE}\")\nmessage (STATUS \"Supported release      = ${${PROJECT_NAME}_SUPPORTED_RELEASE}\")\n\n# Make the build area layout look a bit more like the final dist layout\nset (CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nset (CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nset (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\n\nif (\"${PROJECT_SOURCE_DIR}\" STREQUAL \"${CMAKE_BINARY_DIR}\")\n    message (FATAL_ERROR \"Not allowed to run in-source build!\")\nendif ()\n\noption (CMAKE_USE_FOLDERS \"Use the FOLDER target property to organize targets into folders.\" ON)\nmark_as_advanced (CMAKE_USE_FOLDERS)\nif (CMAKE_USE_FOLDERS)\n    set_property (GLOBAL PROPERTY USE_FOLDERS ON)\nendif ()\n\n\n# Version of the OSO file format and instruction set\nset (OSO_FILE_VERSION_MAJOR 1)\nset (OSO_FILE_VERSION_MINOR 0)\n\n\n# This needs to be early, for CMAKE_INSTALL_FULL_DATADIR\ninclude (GNUInstallDirs)\n\n\noption (VERBOSE \"Print lots of messages while compiling\" OFF)\nif (VERBOSE)\n    set (CMAKE_MESSAGE_LOG_LEVEL \"VERBOSE\" CACHE STRING \"CMake log level to display\")\nelse ()\n    set (CMAKE_MESSAGE_LOG_LEVEL \"STATUS\" CACHE STRING \"CMake log level to display\")\nendif ()\nset (OSL_LIBNAME_SUFFIX \"\" CACHE STRING\n     \"Optional name appended to ${PROJECT_NAME} libraries that are built\")\noption (OSL_BUILD_TESTS \"Build the unit tests, testshade, testrender\" ON)\nif (WIN32)\n    option (USE_LLVM_BITCODE \"Generate embedded LLVM bitcode\" OFF)\nelse ()\n    option (USE_LLVM_BITCODE \"Generate embedded LLVM bitcode\" ON)\nendif ()\noption (OSL_BUILD_PLUGINS \"Bool OSL plugins, for example OIIO plugin\" ON)\noption (OSL_BUILD_SHADERS \"Build shaders\" ON)\noption (OSL_USE_OPTIX \"Include OptiX support\" OFF)\nmessage(STATUS \"OSL_USE_OPTIX: ${OSL_USE_OPTIX}\")\nset (OPTIX_EXTRA_LIBS CACHE STRING \"Extra lib targets needed for OptiX\")\nset (CUDA_EXTRA_LIBS CACHE STRING \"Extra lib targets needed for CUDA\")\nset (CUDA_TARGET_ARCH \"sm_60\" CACHE STRING \"CUDA GPU architecture (e.g. sm_50)\")\nset (OSL_SHADER_INSTALL_DIR \"${CMAKE_INSTALL_FULL_DATADIR}/${PROJECT_NAME}/shaders\"\n     CACHE STRING \"Directory where shaders will be installed\")\nset (OSL_PTX_INSTALL_DIR \"${CMAKE_INSTALL_FULL_DATADIR}/${PROJECT_NAME}/ptx\"\n     CACHE STRING \"Directory where OptiX PTX files will be installed\")\nset (CMAKE_DEBUG_POSTFIX \"\" CACHE STRING \"Library naming postfix for Debug builds (e.g., '_debug')\")\noption (OSL_USTRINGREP_IS_HASH \"Always use ustringhash for strings\" OFF)\n\n\nset (OSL_NO_DEFAULT_TEXTURESYSTEM OFF CACHE BOOL \"Do not use create a raw OIIO::TextureSystem\")\nif (OSL_NO_DEFAULT_TEXTURESYSTEM)\n    add_compile_definitions (OSL_NO_DEFAULT_TEXTURESYSTEM=1)\nendif ()\n\noption (USE_FAST_MATH \"Use fast math approximations (if no, then use system math library)\" ON)\nif (USE_FAST_MATH)\n    add_compile_definitions (OSL_FAST_MATH=1)\nelse ()\n    add_compile_definitions (OSL_FAST_MATH=0)\nendif ()\n\noption (OIIO_FMATH_SIMD_FRIENDLY \"Make sure OIIO fmath functions are SIMD-friendly\" OFF)\nif (OIIO_FMATH_SIMD_FRIENDLY)\n    add_compile_definitions (OIIO_FMATH_SIMD_FRIENDLY=1)\nendif ()\n\n# Define OSL_INTERNAL symbol only when building OSL itself, will not be\n# defined for downstream projects using OSL.\nadd_compile_definitions (OSL_INTERNAL=1)\n\n# To make sure we aren't relying on deprecated OIIO features, we define\n# OIIO_DISABLE_DEPRECATED before including any OIIO headers.\nadd_compile_definitions (OIIO_DISABLE_DEPRECATED=900000)\n\n# Set the default namespace. For symbol hiding reasons, it's important that\n# the project name is a subset of the namespace name.\nset (${PROJ_NAME}_NAMESPACE ${PROJECT_NAME} CACHE STRING\n     \"Customized outer namespace base name (version will be added)\")\noption (${PROJ_NAME}_NAMESPACE_INCLUDE_PATCH\n        \"Should the inner namespace include the patch number\" ${${PROJECT_NAME}_DEV_RELEASE})\nset (PROJ_NAMESPACE \"${${PROJ_NAME}_NAMESPACE}\")\nstring(REGEX MATCH ${PROJECT_NAME} NAMESPACE_HAS_PROJECT_NAME ${PROJ_NAMESPACE})\nif (NOT NAMESPACE_HAS_PROJECT_NAME)\n    set (PROJ_NAMESPACE ${PROJECT_NAME}_${PROJ_NAMESPACE})\nendif ()\nset (PROJ_NAMESPACE_V \"${PROJ_NAMESPACE}_v${PROJECT_VERSION_MAJOR}_${PROJECT_VERSION_MINOR}\")\nif (${PROJ_NAME}_NAMESPACE_INCLUDE_PATCH)\n    set (PROJ_NAMESPACE_V \"${PROJ_NAMESPACE_V}_${PROJECT_VERSION_PATCH}\")\nendif ()\nmessage(STATUS \"Setting Namespace to: ${PROJ_NAMESPACE_V}\")\n\n# Define OSL_INTERNAL symbol only when building OSL itself, will not be\n# defined for downstream projects using OSL.\nadd_definitions (-DOSL_INTERNAL=1)\n\n# To make sure we aren't relying on deprecated OIIO features, we define\n# OIIO_DISABLE_DEPRECATED before including any OIIO headers.\nadd_definitions (-DOIIO_DISABLE_DEPRECATED=900000)\n\n# All the C++ and compiler related options and adjustments\ninclude (compiler)\n\n# Dependency finding utilities and all dependency-related options\ninclude (dependency_utils)\n\n# Utilities and options related to finding python and making python bindings\ninclude (pythonutils)\n\n# Dependency finding utilities and all dependency-related options\ninclude (externalpackages)\ninclude (flexbison)\ninclude (cuda_macros)\ninclude (llvm_macros)\n\n# Include all our testing apparatus and utils, but not if it's a subproject\nif (${PROJECT_NAME}_BUILD_TESTS AND PROJECT_IS_TOP_LEVEL)\n    include (testing)\nendif ()\n\n\n\ninclude_directories (\n    BEFORE\n    \"${OSL_LOCAL_DEPS_DIR}/include\"\n    \"${CMAKE_SOURCE_DIR}/src/include\"\n    \"${CMAKE_BINARY_DIR}/src/include\"\n    \"${CMAKE_BINARY_DIR}/include\"\n  )\n\n\n# Make sure our math calculations are consistent,\n# especially division.  Different compilers may have choose to use\n# reciprocal division losing precision causing slightly different\n# results which can lead to aliasing differences when running the testsuite\n# Disable reciprocal division\nif (CMAKE_COMPILER_IS_INTEL)\n    if (MSVC)\n        add_compile_options(\"/Qprec-div\")\n    else ()\n        add_compile_options(\"-prec-div\")\n    endif ()\nelseif (CMAKE_COMPILER_IS_CLANG OR CMAKE_COMPILER_IS_APPLECLANG OR CMAKE_COMPILER_IS_INTELCLANG)\n    add_compile_options(\"-fno-reciprocal-math\")\nendif ()\n       \n# Tell CMake to process the sub-directories\nadd_subdirectory (src/include)\nadd_subdirectory (src/liboslcomp)\nadd_subdirectory (src/liboslquery)\nadd_subdirectory (src/liboslexec)\nadd_subdirectory (src/liboslnoise)\nadd_subdirectory (src/oslc)\nadd_subdirectory (src/oslinfo)\n\nif (OSL_BUILD_TESTS AND BUILD_TESTING)\n    add_subdirectory (src/testshade)\n    add_subdirectory (src/testrender)\nendif ()\n\nif (OSL_BUILD_PLUGINS)\n    add_subdirectory (src/osl.imageio)\nendif ()\n\nif (USE_QT AND (Qt5_FOUND OR Qt6_FOUND) AND NOT DISABLE_OSLTOY)\n    add_subdirectory (src/osltoy)\nendif ()\n\nif (OSL_BUILD_SHADERS)\n    add_subdirectory (src/shaders)\nendif ()\n\noption (INSTALL_DOCS \"Install documentation\" ON)\nif (INSTALL_DOCS)\n    add_subdirectory (src/doc)\nendif ()\n\n# install pkgconfig files\nif ( NOT MSVC )\n   configure_file(src/build-scripts/oslexec.pc.in \"${CMAKE_BINARY_DIR}/oslexec.pc\" @ONLY)\n   configure_file(src/build-scripts/oslcomp.pc.in \"${CMAKE_BINARY_DIR}/oslcomp.pc\" @ONLY)\n   configure_file(src/build-scripts/oslquery.pc.in \"${CMAKE_BINARY_DIR}/oslquery.pc\" @ONLY)\n   install (FILES \"${CMAKE_BINARY_DIR}/oslexec.pc\"\n                  \"${CMAKE_BINARY_DIR}/oslcomp.pc\"\n                  \"${CMAKE_BINARY_DIR}/oslquery.pc\"\n            DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig\n            COMPONENT developer)\nendif()\n\n\n\n#########################################################################\n# Export the configuration files. There are also library-specific config\n# exports in the CMakeLists.txt of libOpenImageIO.\ninclude (CMakePackageConfigHelpers)\n\n# the file containing the exported targets\nset (OSL_TARGETS_EXPORT_NAME \"${PROJECT_NAME}Targets.cmake\")\n# the version file\nset (OSL_VERSION_CONFIG \"${CMAKE_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\")\n# the config file that is actually looked for by find_package\nset (OSL_PROJECT_CONFIG \"${CMAKE_BINARY_DIR}/${PROJECT_NAME}Config.cmake\")\n# where all these files will be installed\nset (OSL_CONFIG_INSTALL_DIR \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\")\n\n# first generate the version file in the binary dir\nwrite_basic_package_version_file (\n        ${OSL_VERSION_CONFIG}\n        VERSION ${PROJECT_VERSION}\n        COMPATIBILITY SameMajorVersion)\n\n# generate the Targets file in the binary dir using the targets collected in\n# OSL_EXPORTED_TARGETS each target is added to OSL_EXPORTED_TARGETS through\n# the macro install_target().\nexport (EXPORT OSL_EXPORTED_TARGETS FILE \"${CMAKE_BINARY_DIR}/${OSL_TARGETS_EXPORT_NAME}\")\n\n# generate the config file from the template in the binary dir\nconfigure_package_config_file (\"${PROJECT_SOURCE_DIR}/src/cmake/Config.cmake.in\"\n        \"${OSL_PROJECT_CONFIG}\"\n        INSTALL_DESTINATION \"${OSL_CONFIG_INSTALL_DIR}\")\n\n# generate the config file from the template in the binary dir\ninstall (FILES \"${OSL_PROJECT_CONFIG}\" \"${OSL_VERSION_CONFIG}\"\n        DESTINATION \"${OSL_CONFIG_INSTALL_DIR}\")\n\ninstall (FILES src/cmake/llvm_macros.cmake DESTINATION cmake)\n\nset (PERMISSION_FLAGS OWNER_EXECUTE OWNER_READ OWNER_WRITE\n                      GROUP_EXECUTE GROUP_READ\n                      WORLD_EXECUTE WORLD_READ)\ninstall (FILES src/build-scripts/serialize-bc.py\n         DESTINATION build-scripts\n         PERMISSIONS ${PERMISSION_FLAGS})\n\n# install targets files\ninstall (EXPORT OSL_EXPORTED_TARGETS\n        DESTINATION ${OSL_CONFIG_INSTALL_DIR}\n        FILE ${OSL_TARGETS_EXPORT_NAME}\n        NAMESPACE ${PROJECT_NAME}::)\n\nif (PROJECT_IS_TOP_LEVEL AND BUILD_TESTING AND ${PROJECT_NAME}_BUILD_TESTS)\n\tosl_add_all_tests()\nendif ()\n\nif (PROJECT_IS_TOP_LEVEL)\n    include (packaging)\nendif ()\n\nprint_package_notfound_report ()\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.2998046875,
          "content": "# Code of Conduct\n\nThe Open Shading Language project abides by Linux Foundation's code of\nconduct, which you can read in full\n[here](https://lfprojects.org/policies/code-of-conduct).\n\nTo report incidents or to appeal reports of incidents, send email to\nthe Manager of LF Projects at manager@lfprojects.org.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 12.7021484375,
          "content": "<!-- SPDX-License-Identifier: CC-BY-4.0 -->\n<!-- Copyright Contributors to the Open Shading Language Project. -->\n\n\nContributing to OSL\n===========================\n\nCode contributions to OSL are always welcome. That's a big part of\nwhy it's an open source project. Please review this document to get a\nbriefing on our process.\n\n\nMail List and Slack\n-------------------\n\nContributors should be reading the osl-dev mail list:\n\n* [osl-dev](https://lists.aswf.io/g/osl-dev)\n\nYou can sign up for the mail list on your own using the link above.\n\nThe [ASWF Slack](https://slack.aswf.io/) has an `openshadinglanguage` channel.\nSign up for the Slack on your own, then under \"channels\", select \"browse\nchannels\" and you should see the openshadinglanguage channel (among those of\nthe other projects and working groups).\n\n\nBug Reports and Issue Tracking\n------------------------------\n\nWe use GitHub's issue tracking system for reporting bugs and requesting\nenhancements:\nhttps://github.com/AcademySoftwareFoundation/OpenShadingLanguage/issues\n\n**If you are merely asking a question (\"how do I...\")**, please do not file an\nissue, but instead ask the question on the [OSL developer mail\nlist](https://lists.aswf.io/g/osl-dev).\n\nIf you are submitting a bug report, please be sure to note which version of\nOSL you are using, on what platform (OS/version, which compiler you used,\nand any special build flags or other unusual environmental issues). Please\ngive an account of\n\n* what you tried\n* what happened\n* what you expected to happen instead\n\nwith enough detail that others can reproduce the problem.\n\n\nContributor License Agreement (CLA) and Intellectual Property\n-------------------------------------------------------------\n\nTo protect the project -- and the contributors! -- we do require a\nContributor License Agreement (CLA) for anybody submitting changes.\n\n* [Corporate CLA](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/blob/main/ASWF/CLA-corporate.md) :\n  If you are writing the code as part of your job, or if there is any\n  possibility that your employers might think they own any intellectual\n  property you create. This needs to be executed by someone who has\n  signatory power for the company.\n\n* [Individual CLA](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/blob/main/ASWF/CLA-individual.md) :\n  If you are an individual writing the code on your own time, using your own\n  equipment, and you're SURE you are the sole owner of any intellectual\n  property you contribute.\n\nThe easiest way to sign CLAs is digitally [using EasyCLA](https://corporate.v1.easycla.lfx.linuxfoundation.org).\nCompanies who prefer not to use the online tools may sign, scan, and email\nthe executed copy to manager@lfprojects.org.\n\nThe CLA allows a company to name a \"CLA Manager\" (who does not need\nsignatory power) who has the ability to use the online system to add or\ndelete individual employees of the company who are authorized to submit pull\nrequests, without needing to get an executive to amend and sign the\nagreement each time.\n\nPlease note that these CLAs are based on the Apache 2.0 CLAs, and differ\nminimally, only as much as was required to correctly describe the EasyCLA\nprocess and our use of a CLA manager.\n\n**Contribution sign off**\n\nASWF requires the use of the [Developer’s Certificate of Origin 1.1\n(DCO)](https://developercertificate.org/), which is the same mechanism that\nthe [Linux®\nKernel](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/process/submitting-patches.rst#n416)\nand many other communities use to manage code contributions. The DCO is\nconsidered one of the simplest tools for sign offs from contributors as the\nrepresentations are meant to be easy to read and indicating signoff is done\nas a part of the commit message.\n\nHere is an example Signed-off-by line, which indicates that the submitter\naccepts the DCO:\n\n`Signed-off-by: John Doe <john.doe@example.com>`\n\nYou can include this automatically when you commit a change to your local\ngit repository using <code>git commit -s</code>. You might also want to\nleverage this [command line tool](https://github.com/coderanger/dco) for\nautomatically adding the signoff message on commits.\n\n\nPull Requests and Code Review\n-----------------------------\n\nThe best way to submit changes is via GitHub Pull Request. GitHub has a\n[Pull Request Howto](https://help.github.com/articles/using-pull-requests/).\n\nAll code must be formally reviewed before being merged into the official\nrepository. The protocol is like this:\n\n1. Get a GitHub account, fork AcademySoftwareFoundation/OpenShadingLanguage to create your\nown repository on GitHub, and then clone it to get a repository on your\nlocal machine.\n\n2. Edit, compile, and test your changes.  Run clang-format (see the\ninstructions on coding style below). Our current formatting standard,\nas checked by our CI, uses clang-format 17.0.\n\n3. Push your changes to your fork (each unrelated pull request to a separate\n\"topic branch\", please).\n\n4. Make a \"pull request\" on GitHub for your patch.\n\n5. If your patch will induce a major compatibility break, or has a design\ncomponent that deserves extended discussion or debate among the wider OSL\ncommunity, then it may be prudent to email osl-dev pointing everybody to\nthe pull request URL and discussing any issues you think are important.\n\n6. All pull requests automatically launch CI jobs on GitHub Actions to\nensure that the build completes and that the tests suite runs correctly, for\na variety of platform, compiler, library, and flag combinations. The status\nof the CI tests for your PR will be displayed on the GitHub PR page. We will\nnot accept PRs that don't build cleanly or pass the existing testsuite.\n\n7. The reviewer will look over the code and critique on the \"comments\" area,\nor discuss in email. Reviewers may ask for changes, explain problems they\nfound, congratulate the author on a clever solution, etc. But until somebody\nsays \"LGTM\" (looks good to me), the code should not be committed. Sometimes\nthis takes a few rounds of give and take. Please don't take it hard if your\nfirst try is not accepted. It happens to all of us.\n\n8. After approval, one of the senior developers (with commit approval to the\nofficial main repository) will merge your fixes into the master branch.\n\n\nCoding Style\n------------\n\n#### File conventions\n\nC++ implementation should be named `*.cpp`. Headers should be named `.h`.\nAll headers should contain\n\n    #pragma once\n\nAll source files should begin with these three lines:\n\n    // Copyright Contributors to the Open Shading Language project.\n    // SPDX-License-Identifier: BSD-3-Clause\n    // https://github.com/AcademySoftwareFoundation/OpenShadingLanguage\n\nas a comment in the syntax of whatever source code is used in that file (for\nexample, for python or shell files, use `#` rather than `//`).\n\nOccasionally a file may contain substantial code from another project and will\nalso list its original copyright and license information. Do NOT alter that\nnotice or copy it to any new files, it really only applies to the particular\nfile in which it appears.\n\n#### Formatting\n\nWe use [clang-format](https://clang.llvm.org/docs/ClangFormat.html) v17\nto uniformly format our source code prior to PR submission. Make sure that\nclang-format is installed on your local machine, and just run\n\n    make clang-format\n\nand it will automatically reformat your code according to the configuration\nfile found in the `.clang-format` file at the root directory of the OSL\nsource code checkout.\n\nOne of the CI test matrix entries runs clang-format and fails if any\ndiffs were generated (that is, if any of your code did not 100% conform to\nthe `.clang-format` formatting configuration). If it fails, clicking on that\ntest log will show you the diffs generated, so that you can easily correct\nit on your end and update the PR with the formatting fixes.\n\nIf you don't have clang-format set up on your machine, and your patch is not\nvery long, you may find that it's more convenient to just submit it and hope\nfor the best, and if it doesn't pass the CI test, look at the diffs in the log\nfor the \"clang-format\" CI run and make the corrections by hand and then submit\nan update to the patch (i.e. relying on CI to run clang-format for you).\n\nBecause the basic formatting is automated by clang-format, we won't\nenumerate the rules here.\n\nFor the occasional non-clang-format regions of code, NEVER alter somebody\nelse's code to reformat just because you found something that violates the\nrules. Let the group/author/leader know, and resist the temptation to change\nit yourself.\n\nEach line of text in your code, including comments, should be at most 80\ncharacters long. Exceptions are allowed for those rare cases where letting a\nline be longer (and wrapping on an 80-character window) is actually a better\nand clearer alternative than trying to split it into two lines. Sometimes this\nhappens, but it's extremely rare.\n\nWe prefer three (3) consecutive empty lines between freestanding functions or\nclass definitions, one blank line between method declarations within a class\ndefinition. Put a single blank line within a function if it helps to visually\nseparate different sequential tasks, but don't put multiple blank lines in a\nrow within a function, or blank lines right after an opening brace or right\nbefore a closing brace. The goal is to use just enough white space to help\ndevelopers visually parse the code (for example, spotting at a glance where\nnew functions begin), but not so much as to spread it out or be confusing.\n\n\n#### Identifiers\n\nIn general, classes and templates should start with upper case and\ncapitalize new words: `class CustomerList;` In general, local variables\nshould start with lower case. Macros should be `ALL_CAPS`, if used at all.\n\nIf your class is extremely similar to, or modeled after, something in the\nstandard library, Boost, or something else we interoperate with, it's ok to\nuse their naming conventions. For example, very general utility classes and\ntemplates (the kind of thing you would normally find in std or boost) should\nbe lower case with underscores separating words, as they would be if they\nwere standards.\n\n    template <class T> shared_ptr;\n    class scoped_mutex;\n\nNames of data should generally be nouns. Functions/methods are trickier: a\nthe name of a function that returns a value but has no side effects should\nbe a noun, but a procedure that performs an action should be a verb.\n\n#### Class structure\n\nTry to avoid public data members, although there are some classes that serve\na role similar to a simple C struct -- a very straightforward collection of\ndata members. In these, it's fine to make the data members public and have\nclients set and get them directly.\n\nPrivate member data should be named m_foo (alternately, it's ok to use the\ncommon practice of member data foo_, but don't mix the conventions within a\nclass).\n\nPrivate member data that needs public accessors should use the convention:\n\n    void foo (const T& newfoo) { m_foo = newfoo; }\n    const T& foo () const { return m_foo; }\n\nAvoid multiple inheritance.\n\nNamespaces: yes, use them!\n\n#### Third-party libraries\n\nPrefer C++11 `std` rather than Boost or other third party libraries, where\nboth can do the same task.\n\nIf you see a third party library already used as a dependency (such as OIIO,\nImath, or LLVM), feel free to any of its public features in OSL\ninternals (provided those features are present in the minimum version of\nthat library that we support).\n\nPlease do not add any NEW dependencies without debate on osl-dev and\napproval of the project leader.\n\nUse these libraries for OSL internals, but please DO NOT let them infect any\nof our public APIs unless it's been thoroughly discussed and approved by the\ngroup. (Exceptions: it's ok to use OIIO and Imath classes in our public\nAPIs.)\n\n#### Comments and Doxygen\n\nComment philosophy: try to be clear, try to help teach the reader what's\ngoing on in your code.\n\nPrefer C++ comments (starting line with `//`) rather than C comments (`/* ... */`).\n\nFor any function that may be used by other programmers (e.g., public or\nprotected members of classes), please use Doxygen-style comments. They looks\nlike this:\n\n    /// Explanation of a class.  Note THREE slashes!\n    class myclass {\n        ....\n        float foo;  ///< Doxygen comments on same line look like this\n    }\n\nIf you know Doxygen well, please feel free to use the various other markups.\nBut don't go so crazy with Doxygen markups that the comment itself, in an\nordinary editor, is not as readable as possible. The Doxygen-generated pages\nare nice, but the place that needs to be most readable is in the code.\n\n#### Miscellaneous\n\nMacros should be used only rarely -- prefer inline functions, templates,\nenums, or \"const\" values wherever possible.\n\n#### Bottom Line\n\nWhen in doubt, look elsewhere in the code base for examples of similar\nstructures and try to format your code in the same manner.\n"
        },
        {
          "name": "GOVERNANCE.md",
          "type": "blob",
          "size": 8.8056640625,
          "content": "<!-- SPDX-License-Identifier: CC-BY-4.0 -->\n<!-- Copyright Contributors to the Open Shading Language Project. -->\n\n# OSL Project Governance\n\nOSL is a project of the Academy Software Foundation and relies on the ASWF\ngovernance policies, supported by the Linux Foundation.\n\nThere are three primary project roles: Contributors submit code to the\nproject; Committers approve code to be included into the project; and the\nTechnical Steering Committee (TSC) provides overall high-level project\nguidance.\n\n* [Contributors](#Contributors)\n* [Committers](#Committers)\n* [Technical Steering Committee](#Technical-Steering-Committee)\n\n## Contributors\n\nThe OSL project grows and thrives from assistance from Contributors.\nContributors include anyone in the community who contributes code,\ndocumentation, or other technical artifacts that have been incorporated into\nthe project repository.\n\nAnyone can be a Contributor. You need no formal approval from the project,\nbeyond the legal forms.\n\n### How to Become a Contributor\n\n* Review the coding standards and [contributing guidelines](CONTRIBUTING.md)\n  to ensure your contribution is in line with the project's coding and styling\n  guidelines.\n\n* Sign the Individual CLA, or if you are employed by an organization that\n  might have any claim to IP you create, have your organization sign the\n  Corporate CLA.\n\n* Submit your code as a PR with the appropriate DCO sign-off on each commit.\n  The easiest way to do this is to ensure that you commit your code with `git\n  commit -s`.\n\n## Committers\n\nProject Committers have merge access on the OSL GitHub repository\nand are responsible for approving submissions by Contributors.\n\n### Committer Responsibilities\n\nTypical activities of a Committer include:\n\n* Helping users and novice contributors.\n\n* Ensuring a response to questions posted to the\n  [osl-dev developer mail list](https://lists.aswf.io/g/osl-dev)\n\n* Contributing code and documentation changes that improve the project.\n\n* Reviewing and commenting on issues and pull requests.\n\n* Ensuring that changes and new code meet acceptable standards and are in\n  the long-term interest of the project.\n\n* Participation in working groups.\n\n* Merging pull requests.\n\n### How to Become a Committer\n\nAny member of the OSL community (though typically an existing Committer or\nTSC member) may nominate an individual making significant and valuable\ncontributions to the OSL project to become a new Committer. To nominate a\nnew Committer, open an issue in the OSL repository, send mail to the TSC\nmail list, or raise the issue at a TSC meeting.\n\nThe TSC may periodically review the Committer list to identify inactive\nCommitters. Past Committers are typically given Emeritus status. Emeriti may\nrequest that the TSC restore them to active Committer status.\n\n## Technical Steering Committee\n\nThe Technical Steering Committee (TSC) has final authority over this project.\nAs defined in the project charter, in addition to committer activities, TSC\nresponsibilities also include, but are not limited to:\n\n* Coordinating technical direction of the Project.\n\n* Project governance and contribution policy.\n\n* GitHub repository administration.\n\n* Maintaining the list of additional Committers\n\n* Appointing representatives to work with other open source or open\n  standards communities.\n\n* Discussions, seeking consensus, and where necessary, voting on technical\n  matters relating to the code base that affect multiple projects.\n\n* Coordinating any marketing, events, or communications regarding the\n  project.\n\nWithin the TSC are two elected leadership roles to be held by its members\nand voted on annually. Any TSC member can express interest in serving in a\nrole, or nominate another member to serve. There are no term limits, and one\nperson may hold multiple roles simultaneously. Should a TSC member resign\nfrom a leadership role before their term is complete, a successor shall be\nelected through the standard nomination and voting process to complete the\nremainder of the term. The leadership roles are:\n\n* **Chair**: This position acts as the project manager, organizing meetings\n  and providing oversight to project administration.\n\n* **Chief Architect**: This position makes all the final calls on design and\n  technical decisions, and is responsible for avoiding \"design by committee\"\n  pitfalls.\n\nThe chair role is assumed to rotate annually (though there are no term\nlimits, so the TSC may reelect an existing chair). The chief architect\nposition should be a source of stability and coherent design vision, so the\nTSC is encouraged to choose an architect who can serve for many years and\nonly change architects when it is necessary for the health of the project\nand its community.\n\nAt the time of election, the TSC will also agree upon which of these two\nleaders will serve as the OSL ASWF (Academy Software Foundation) TAC\n(Technical Advisory Council) representative for the term. This member\nrepresents the project at all ASWF TAC meetings.\n\n### TSC Members\n\nCurrent voting members of the TSC are:\n\n* **Chair and TAC representative**: Chris Kulla - Epic Games\n* **Chief Architect**: Larry Gritz - Sony Pictures Imageworks\n\n* Luke Emrose - Animal Logic\n* Eric Enderton - NVIDIA\n* Stephen Friedman - Pixar\n* Nicolas Guiard - Isotropix\n* Clint Hanson - DNEG\n* Adrien Herubel - Autodesk\n* Lee Kerley - Apple\n* Mitch Prater - Laika\n* Brecht Van Lommel - Blender\n* Alex Wells - Intel\n\n### TSC Nomination and Succession\n\nAny proposal for additional members of the TSC may be submitted by\nCommitters, TSC members, or other major stakeholders of the OSL community by\nopening an issue outlining their case or raising the issue at a TSC meeting.\nNew TSC members are accepted or rejected by majority vote of the TSC.\n\nIf a TSC member is for an extended period not regularly participating or\nperforming the responsibilities expected of TSC members, the TSC may by\nmajority vote request an alternate TSC member be submitted by that\norganization, or remove the inactive member from the TSC.\n\nA voting member of the TSC may nominate a successor in the event that such\nvoting member decides to leave the TSC, and the TSC, including the departing\nmember, shall confirm or reject such nomination by a vote. In the event that\nthe departing member's nomination for successor is rejected by vote of the\nTSC, the departing member shall be entitled to continue nominating\nsuccessors until one such successor is confirmed by vote of the TSC. If the\ndeparting member fails or is unable to nominate a successor, the TSC may\nnominate one on the departing member's behalf.\n\nTSC membership is presumed to be retained by the individual even if they\nchange employers. The TSC may take action to ensure that organizational\nstakeholder representation not become severely disproportionate, for example\nby urging an organization that loses its sole TSC representative to nominate\na new member, or to limit the total number of voting members from any one\norganization if too many members all move to the same organization.\n\n### TSC Meetings\n\nAny meetings of the TSC are intended to be open to the public, except where\nthere is a reasonable need for privacy. The TSC meets regularly in a voice\nconference call, at a cadence deemed appropriate by the TSC. The TSC Chair\nmoderates the meeting, or appoints another TSC member to moderate in his or\nher absence. Meetings may also be streamed online where appropriate;\nconnection details will be posted to the osl-dev mail list in advance of the\nscheduled meeting.\n\nThe biweekly TSC meetings can be found on the [ASWF Calendar](https://calendar.openshadinglanguage.org),\njust click on the OSL TSC meeting entries to get the Zoom link.\n\nItems are added to the TSC agenda which are considered contentious or are\nmodifications of governance, contribution policy, TSC membership, or release\nprocess, in addition to topics involving the high-level technical direction\nof the project.\n\nThe intention of the agenda is not to approve or review all patches. That\nshould happen continuously on GitHub and be handled by the larger group of\nCommitters.\n\nAny community member or Contributor can ask that something be reviewed by\nthe TSC at the meeting by logging a GitHub issue. Any Committer, TSC member,\nor the meeting chair can bring the issue to the TSC's attention by applying\nthe `TSC` label.\n\nPrior to each TSC meeting, the meeting chair will share the agenda with\nmembers of the TSC. TSC members can also add items to the agenda at the\nbeginning of each meeting. The meeting chair and the TSC cannot veto or\nremove items.\n\nThe TSC may invite additional persons to participate in a non-voting\ncapacity.\n\nThe meeting chair is responsible for ensuring that minutes are taken and\narchived in the project repository.\n\nDue to the challenges of scheduling a global meeting with participants in\nseveral time zones, the TSC will seek to resolve as many agenda items as\npossible outside of meetings on the public mailing list or through GitHub\nissues, discussions, and pull requests.\n\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 5.4033203125,
          "content": "<!-- SPDX-License-Identifier: CC-BY-4.0 -->\n<!-- Copyright Contributors to the Open Shading Language Project. -->\n\nBuilding OSL\n============\n\nOSL currently compiles and runs cleanly on Linux (x86_64), Mac OS X (x86_64\nand aarch64), and Windows (x86_64). It may build and run on other platforms as\nwell, but we don't officially support or test other than these platforms.\n\nShader execution is supported on the native architectures of those x86_64 and\naarch64 platforms, a special batched 4-, 8- or 16-wide SIMD execution mode\nrequiring x86_64 with SSE2, AVX/AVX2 or AVX-512 instructions, as well as on\nNVIDIA GPUs using Cuda+OptiX.\n\nDependencies\n------------\n\nOSL requires the following dependencies or tools.\nNEW or CHANGED dependencies since the last major release are **bold**.\n\n* Build system: [CMake](https://cmake.org/) **3.19 or newer** (tested\n  through 3.31)\n\n* A suitable C++17 compiler to build OSL itself, which may be any of:\n   - **GCC 9.3** or newer (tested through gcc 13.1)\n   - **Clang 5** or newer (tested through clang 19)\n   - Microsoft Visual Studio 2017 or newer\n   - Intel C++ compiler **icc version 19** or newer or LLVM-based icx compiler\n     version 2022 or newer.\n\n* **[OpenImageIO](http://openimageio.org) 2.5 or newer** (tested through 3.0\n  and main)\n\n    OSL uses OIIO both for its texture mapping functionality as well as\n    numerous utility classes.  If you are integrating OSL into an existing\n    renderer, you may use your own favorite texturing system rather than\n    OpenImageIO with a little minor surgery.  There are only a few places\n    where OIIO texturing calls are made, and they could easily be bypassed.\n    But it is probably not possible to remove OIIO completely as a\n    dependency, since we so heavily rely on a number of other utility classes\n    that it provides (for which there was no point reinventing redundantly\n    for OSL).\n\n    After building OpenImageIO, if you don't have it installed in a\n    \"standard\" place (like /usr/include), you should set the environment\n    variable `$OpenImageIO_ROOT` to point to the compiled distribution, and\n    then OSL's build scripts will be able to find it. You should also have\n    $OpenImageIO_ROOT/lib to be in your LD_LIBRARY_PATH (or\n    DYLD_LIBRARY_PATH on OS X).\n\n* [LLVM](http://www.llvm.org) 11, 12, 13, 14, 15, 16, 17, 18, or 19, including\n  clang libraries.\n\n* (optional) For GPU rendering on NVIDIA GPUs:\n    * [OptiX](https://developer.nvidia.com/rtx/ray-tracing/optix) 7.0 or higher.\n    * [Cuda](https://developer.nvidia.com/cuda-downloads) 9.0 or higher. It is\n      recommended that you use 11.0 or higher.\n\n* [Imath](https://github.com/AcademySoftwareFoundation/Imath) **3.1 or newer**.\n* [Flex](https://github.com/westes/flex) 2.5.35 or newer and\n  [GNU Bison](https://www.gnu.org/software/bison/) 2.7 or newer.\n  Note that on some MacOS/xcode releases, the system-installed Bison is too\n  old, and it's better to install a newer Bison (via Homebrew is one way to\n  do this easily).\n* [PugiXML](http://pugixml.org/) >= 1.8 (we have tested through 1.13).\n* (optional) [Partio](https://www.disneyanimation.com/technology/partio.html)\n  If it is not found at build time, the OSL `pointcloud` functions will not\n  be operative.\n* (optional) Python: If you are building the Python bindings or running the\n  testsuite:\n    * **Python >= 3.7** (tested through 3.12)\n    * **pybind11 >= 2.7** (tested through 2.13)\n    * NumPy\n* (optional) Qt5 >= 5.6 or Qt6 (tested Qt5 through 5.15 and Qt6 through 6.7).\n  If not found at build time, the `osltoy` application will be disabled.\n\n\n\nBuild process\n-------------\n\nHere are the steps to check out, build, and test the OSL distribution:\n\n1. Install and build dependencies.\n\n2. Check out a copy of the source code from the Git repository:\n\n        git clone https://github.com/AcademySoftwareFoundation/OpenShadingLanguage.git osl\n\n3. Change to the distribution directory and 'make'\n\n        cd osl\n        make\n\n   Note: OSL uses 'CMake' for its cross-platform build system.  But for\n   simplicity, we have made a \"make wrapper\" around it, so that by just\n   typing 'make' everything will build.  Type 'make help' for other\n   options, and note that 'make nuke' will blow everything away for the\n   freshest possible compile.\n\n   You can also ignore the top level Makefile wrapper, and instead use\n   CMake directly:\n\n       cmake -B build -S .\n       cmake --build build --target install\n\n   NOTE: If the build breaks due to compiler warnings which have been elevated\n   to errors, you can try \"make clean\" followed by \"make STOP_ON_WARNING=0\",\n   or if using cmake directly, add `-DSTOP_ON_WARNING=0` to the cmake\n   configuration command. That will create a build that will only stop for\n   full errors, not warnings.\n\n4. After compilation, you'll end up with a full OSL distribution in\n   dist/\n\n5. Add the \"dist/bin\" to your $PATH, and \"dist/lib\" to your\n   $LD_LIBRAY_PATH (or $DYLD_LIBRARY_PATH on MacOS), or copy the contents\n   of those files to appropriate directories.  Public include files\n   (those needed when building applications that incorporate OSL)\n   can be found in \"dist/include\", and documentation can be found\n   in \"dist/share/doc\".\n\n6. After building (and setting your library path), you can run the\n   test suite with:\n\n        make test\n\nTroubleshooting\n----------------\n\n- [Build issues on macOS Catalina (fatal error: 'wchar.h' file not found)](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/issues/1055#issuecomment-581920327)\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.5068359375,
          "content": "Copyright (c) 2009-present Contributors to the Open Shading Language project.\nAll Rights Reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 12.6474609375,
          "content": "# Copyright Contributors to the Open Shading Language project.\n# SPDX-License-Identifier: BSD-3-Clause\n# https://github.com/AcademySoftwareFoundation/OpenShadingLanguage\n\n#########################################################################\n#\n# This is the master makefile.\n# Here we put all the top-level make targets, platform-independent\n# rules, etc. This is just a fancy wrapper around cmake, but for many\n# people, it's a lot simpler to just type \"make\" and have everything\n# happen automatically.\n#\n# Run 'make help' to list helpful targets.\n#\n#########################################################################\n\n\n.PHONY: all debug profile clean realclean nuke\n\nworking_dir\t:= ${shell pwd}\n\nMY_MAKE_FLAGS ?=\nMY_NINJA_FLAGS ?=\nMY_CMAKE_FLAGS ?=\nBUILDSENTINEL ?= Makefile\nNINJA ?= ninja\nCMAKE ?= cmake\nCMAKE_BUILD_TYPE ?= Release\nbuild_dir ?= build\ndist_dir  ?= dist\n\nINSTALL_PREFIX ?= ${working_dir}/${dist_dir}\n\nVERBOSE ?= ${SHOWCOMMANDS}\nifneq (${VERBOSE},)\nMY_MAKE_FLAGS += VERBOSE=${VERBOSE}\nMY_CMAKE_FLAGS += -DVERBOSE:BOOL=${VERBOSE} --log-level=VERBOSE\nifneq (${VERBOSE},0)\n\tMY_NINJA_FLAGS += -v\n\tTEST_FLAGS += -V\nendif\n$(info dist_dir = ${dist_dir})\n$(info INSTALL_PREFIX = ${INSTALL_PREFIX})\nendif\n\nifneq (${NAMESPACE},)\nMY_CMAKE_FLAGS += -DOSL_NAMESPACE:STRING=${NAMESPACE}\nendif\n\nifneq (${LLVM_DIRECTORY},)\nMY_CMAKE_FLAGS += -DLLVM_DIRECTORY:STRING=${LLVM_DIRECTORY}\nMY_CMAKE_FLAGS += -DLLVM_ROOT:STRING=${LLVM_DIRECTORY}\nendif\n\nifneq (${LLVM_VERSION},)\nMY_CMAKE_FLAGS += -DLLVM_VERSION:STRING=${LLVM_VERSION}\nendif\n\nifneq (${LLVM_NAMESPACE},)\nMY_CMAKE_FLAGS += -DLLVM_NAMESPACE:STRING=${LLVM_NAMESPACE}\nendif\n\nifneq (${LLVM_STATIC},)\nMY_CMAKE_FLAGS += -DLLVM_STATIC:BOOL=${LLVM_STATIC}\nendif\n\nifneq (${USE_LLVM_BITCODE},)\nMY_CMAKE_FLAGS += -DUSE_LLVM_BITCODE:BOOL=${USE_LLVM_BITCODE}\nendif\n\nifneq (${USE_FAST_MATH},)\nMY_CMAKE_FLAGS += -DUSE_FAST_MATH:BOOL=${USE_FAST_MATH}\nendif\n\nifneq (${STOP_ON_WARNING},)\nMY_CMAKE_FLAGS += -DSTOP_ON_WARNING:BOOL=${STOP_ON_WARNING}\nendif\n\nifneq (${BUILD_SHARED_LIBS},)\nMY_CMAKE_FLAGS += -DBUILD_SHARED_LIBS:BOOL=${BUILD_SHARED_LIBS}\nendif\n\nifneq (${LINKSTATIC},)\nMY_CMAKE_FLAGS += -DLINKSTATIC:BOOL=${LINKSTATIC}\nendif\n\nifneq (${SOVERSION},)\nMY_CMAKE_FLAGS += -DSOVERSION:STRING=${SOVERSION}\nendif\n\nifneq (${OSL_LIBNAME_SUFFIX},)\nMY_CMAKE_FLAGS += -DOSL_LIBNAME_SUFFIX:STRING=${OSL_LIBNAME_SUFFIX}\nendif\n\nifneq (${OSL_BUILD_TESTS},)\nMY_CMAKE_FLAGS += -DOSL_BUILD_TESTS:BOOL=${OSL_BUILD_TESTS}\nendif\n\nifneq (${OSL_BUILD_SHADERS},)\nMY_CMAKE_FLAGS += -DOSL_BUILD_SHADERS:BOOL=${OSL_BUILD_SHADERS}\nendif\n\nifdef DEBUG\nCMAKE_BUILD_TYPE=Debug\nendif\n\nifdef PROFILE\nCMAKE_BUILD_TYPE=RelWithDebInfo\nendif\n\nifneq (${MYCC},)\nMY_CMAKE_FLAGS += -DCMAKE_C_COMPILER:STRING=\"${MYCC}\"\nendif\nifneq (${MYCXX},)\nMY_CMAKE_FLAGS += -DCMAKE_CXX_COMPILER:STRING=\"${MYCXX}\"\nendif\n\nifneq (${USE_CPP},)\nMY_CMAKE_FLAGS += -DCMAKE_CXX_STANDARD=${USE_CPP}\nendif\n\nifneq (${CMAKE_CXX_STANDARD},)\nMY_CMAKE_FLAGS += -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}\nendif\n\nifneq (${USE_LIBCPLUSPLUS},)\nMY_CMAKE_FLAGS += -DUSE_LIBCPLUSPLUS:BOOL=${USE_LIBCPLUSPLUS}\nendif\n\nifneq (${GLIBCXX_USE_CXX11_ABI},)\nMY_CMAKE_FLAGS += -DGLIBCXX_USE_CXX11_ABI=${GLIBCXX_USE_CXX11_ABI}\nendif\n\nifneq (${EXTRA_CPP_ARGS},)\nMY_CMAKE_FLAGS += -DEXTRA_CPP_ARGS:STRING=\"${EXTRA_CPP_ARGS}\"\nendif\n\nifneq (${USE_SIMD},)\nMY_CMAKE_FLAGS += -DUSE_SIMD:STRING=\"${USE_SIMD}\"\nendif\n\nifneq (${VEC_REPORT},)\nMY_CMAKE_FLAGS += -DVEC_REPORT:BOOL=\"${VEC_REPORT}\"\nendif\n\nifneq (${TEST},)\nTEST_FLAGS += -R ${TEST}\nendif\n\nifneq (${USE_CCACHE},)\nMY_CMAKE_FLAGS += -DUSE_CCACHE:BOOL=${USE_CCACHE}\nendif\n\nifeq (${USE_NINJA},1)\nMY_CMAKE_FLAGS += -G Ninja\nBUILDSENTINEL := build.ninja\nendif\n\nifeq (${CODECOV},1)\n  CMAKE_BUILD_TYPE=Debug\n  MY_CMAKE_FLAGS += -DCODECOV:BOOL=${CODECOV}\nendif\n\nifneq (${SANITIZE},)\n  MY_CMAKE_FLAGS += -DSANITIZE=${SANITIZE}\nendif\n\nifneq (${CLANG_TIDY},)\n  MY_CMAKE_FLAGS += -DCLANG_TIDY:BOOL=1\nendif\nifneq (${CLANG_TIDY_CHECKS},)\n  MY_CMAKE_FLAGS += -DCLANG_TIDY_CHECKS:STRING=${CLANG_TIDY_CHECKS}\nendif\nifneq (${CLANG_TIDY_ARGS},)\n  MY_CMAKE_FLAGS += -DCLANG_TIDY_ARGS:STRING=${CLANG_TIDY_ARGS}\nendif\nifneq (${CLANG_TIDY_FIX},)\n  MY_CMAKE_FLAGS += -DCLANG_TIDY_FIX:BOOL=${CLANG_TIDY_FIX}\n  MY_NINJA_FLAGS += -j 1\n  # N.B. when fixing, you don't want parallel jobs!\nendif\n\nifneq (${CLANG_FORMAT_INCLUDES},)\n  MY_CMAKE_FLAGS += -DCLANG_FORMAT_INCLUDES:STRING=${CLANG_FORMAT_INCLUDES}\nendif\nifneq (${CLANG_FORMAT_EXCLUDES},)\n  MY_CMAKE_FLAGS += -DCLANG_FORMAT_EXCLUDES:STRING=${CLANG_FORMAT_EXCLUDES}\nendif\n\nifneq (${BUILD_MISSING_DEPS},)\n  MY_CMAKE_FLAGS += -DBUILD_MISSING_DEPS:BOOL=${BUILD_MISSING_DEPS}\nendif\n\nifneq (${USE_OPTIX},)\n  MY_CMAKE_FLAGS += -DOSL_USE_OPTIX:BOOL=${USE_OPTIX}\nendif\nifneq (${OSL_USE_OPTIX},)\n  MY_CMAKE_FLAGS += -DOSL_USE_OPTIX:BOOL=${OSL_USE_OPTIX}\nendif\n\nifneq (${USE_PYTHON},)\nMY_CMAKE_FLAGS += -DUSE_PYTHON:BOOL=${USE_PYTHON}\nendif\n\nifneq (${PYTHON_VERSION},)\nMY_CMAKE_FLAGS += -DPYTHON_VERSION:STRING=${PYTHON_VERSION}\nendif\n\n\n#$(info MY_CMAKE_FLAGS = ${MY_CMAKE_FLAGS})\n#$(info MY_MAKE_FLAGS = ${MY_MAKE_FLAGS})\n\n#########################################################################\n\n\n\n\n#########################################################################\n# Top-level documented targets\n\nall: install\n\n# 'make debug' is implemented via recursive make setting DEBUG\ndebug:\n\t${MAKE} DEBUG=1 --no-print-directory\n\n# 'make profile' is implemented via recursive make setting PROFILE\nprofile:\n\t${MAKE} PROFILE=1 --no-print-directory\n\n# 'make config' constructs the build directory and runs 'cmake' there,\n# generating makefiles to build the project.  For speed, it only does this when\n# ${build_dir}/Makefile doesn't already exist, in which case we rely on the\n# cmake generated makefiles to regenerate themselves when necessary.\nconfig:\n\t@ (if [ ! -e ${build_dir}/${BUILDSENTINEL} ] ; then \\\n\t\t${CMAKE} -E make_directory ${build_dir} ; \\\n\t\tcd ${build_dir} ; \\\n\t\t${CMAKE} -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE} \\\n\t\t\t -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX} \\\n\t\t\t ${MY_CMAKE_FLAGS} ${working_dir} ; \\\n\t fi)\n\n\n# 'make build' does a basic build (after first setting it up)\nbuild: config\n\t@ ( cd ${build_dir} ; \\\n\t    ${CMAKE} --build . --config ${CMAKE_BUILD_TYPE} \\\n\t  )\n\n# 'make install' builds everthing and installs it in 'dist'.\n# Suppress pointless output from docs installation.\ninstall: build\n\t@ ( cd ${build_dir} ; \\\n\t    ${CMAKE} --build . --target install --config ${CMAKE_BUILD_TYPE} | grep -v '^-- \\(Installing\\|Up-to-date\\|Set runtime path\\)' \\\n\t  )\n\n# 'make package' builds everything and then makes an installable package\n# (platform dependent -- may be .tar.gz, .sh, .dmg, .rpm, .deb. .exe)\npackage: install\n\t@ ( cd ${build_dir} ; \\\n\t    ${CMAKE} --build . --target package --config ${CMAKE_BUILD_TYPE} \\\n\t  )\n\n# 'make package_source' makes an installable source package\n# (platform dependent -- may be .tar.gz, .sh, .dmg, .rpm, .deb. .exe)\npackage_source: install\n\t@ ( cd ${build_dir} ; \\\n\t    ${CMAKE} --build . --target package_source --config ${CMAKE_BUILD_TYPE} \\\n\t  )\n\n# 'make clang-format' runs clang-format on all source files (if it's installed)\nclang-format: config\n\t@ ( cd ${build_dir} ; \\\n\t    ${CMAKE} --build . --target clang-format --config ${CMAKE_BUILD_TYPE} \\\n\t  )\n\n\n# DEPRECATED: 'make dist' is just a synonym for 'make install'\ndist : install\n\nTEST_FLAGS += --force-new-ctest-process --output-on-failure\n\n# 'make test' does a full build and then runs all tests\ntest: build\n\t@ ${CMAKE} -E cmake_echo_color --switch=$(COLOR) --cyan \"Running tests ${TEST_FLAGS}...\"\n\t@ ( cd ${build_dir} ; \\\n\t    OSL_ROOT_DIR=${INSTALL_PREFIX} \\\n\t    OSL_ROOT=${INSTALL_PREFIX} \\\n\t    LD_LIBRARY_PATH=${INSTALL_PREFIX}/lib:${LD_LIBRARY_PATH} \\\n\t    DYLD_LIBRARY_PATH=${INSTALL_PREFIX}/lib:${DYLD_LIBRARY_PATH} \\\n\t    OIIO_LIBRARY_PATH=${INSTALL_PREFIX}/lib:${OIIO_LIBRARY_PATH} \\\n\t    PYTHONPATH=${working_dir}/${build_dir}/lib/python/site-packages:${PYTHONPATH} \\\n\t    ctest -E broken ${TEST_FLAGS} \\\n\t  )\n\t@ ( if [[ \"${CODECOV}\" == \"1\" ]] ; then \\\n\t      cd ${build_dir} ; \\\n\t      lcov -b . -d . -c -o cov.info ; \\\n\t      lcov --remove cov.info \"/usr*\" -o cov.info ; \\\n\t      genhtml -o ./cov -t \"Test coverage\" --num-spaces 4 cov.info ; \\\n\t  fi )\n\n# 'make clean' clears out the build directory for this platform\nclean:\n\t${CMAKE} -E remove_directory ${build_dir}\n\n# 'make realclean' clears out both build and dist directories for this platform\nrealclean: clean\n\t${CMAKE} -E remove_directory ${dist_dir}\n\n# DEPRECATED: use 'make realclean'\nnuke:\n\t${CMAKE} -E remove_directory ${build_dir}\n\t${CMAKE} -E remove_directory ${dist_dir}\n\n#########################################################################\n\n\n\n# 'make help' prints important make targets\nhelp:\n\t@echo \"Targets:\"\n\t@echo \"  make              Build and install optimized binaries and libraries\"\n\t@echo \"  make install      Build and install optimized binaries and libraries\"\n\t@echo \"  make build        Build only (no install) optimized binaries and libraries\"\n\t@echo \"  make config       Just configure cmake, don't build\"\n\t@echo \"  make debug        Build and install unoptimized with symbols\"\n\t@echo \"  make profile      Build and install for profiling\"\n\t@echo \"  make clean        Remove the temporary files in ${build_dir}\"\n\t@echo \"  make realclean    Remove both ${build_dir} AND ${dist_dir}\"\n\t@echo \"  make test         Run tests\"\n\t@echo \"  make testall      Run all tests, even broken ones\"\n\t@echo \"  make clang-format Run clang-format on all the source files\"\n\t@echo \"\"\n\t@echo \"Helpful modifiers:\"\n\t@echo \"  C++ compiler and build process:\"\n\t@echo \"      VERBOSE=1                Show all compilation commands\"\n\t@echo \"      STOP_ON_WARNING=0        Do not stop building if compiler warns\"\n\t@echo \"      MYCC=xx MYCXX=yy         Use custom compilers\"\n\t@echo \"      CMAKE_CXX_STANDARD=17    C++ standard to build with (default is 17)\"\n\t@echo \"      USE_LIBCPLUSPLUS=1       For clang, use libc++\"\n\t@echo \"      GLIBCXX_USE_CXX11_ABI=1  For gcc, use the new string ABI\"\n\t@echo \"      EXTRA_CPP_ARGS=          Additional args to the C++ command\"\n\t@echo \"      USE_NINJA=1              Set up Ninja build (instead of make)\"\n\t@echo \"      USE_CCACHE=0             Disable ccache (even if available)\"\n\t@echo \"      CODECOV=1                Enable code coverage tests\"\n\t@echo \"      SANITIZE=name1,...       Enable sanitizers (address, leak, thread)\"\n\t@echo \"      CLANG_TIDY=1             Run clang-tidy on all source (can be modified\"\n\t@echo \"                                  by CLANG_TIDY_ARGS=... and CLANG_TIDY_FIX=1\"\n\t@echo \"      CLANG_FORMAT_INCLUDES=... CLANG_FORMAT_EXCLUDES=...\"\n\t@echo \"                               Customize files for 'make clang-format'\"\n\t@echo \"  Linking and libraries:\"\n\t@echo \"      BUILD_SHARED_LIBS=0      Build static library instead of shared\"\n\t@echo \"      LINKSTATIC=1             Link with static external libs when possible\"\n\t@echo \"  Dependency hints:\"\n\t@echo \"      For each dependeny Foo, defining ENABLE_Foo=0 disables it, even\"\n\t@echo \"      if found. And you can hint where to find it with Foo_ROOT=path\"\n\t@echo \"      Note that it is case sensitive!\"\n\t@echo \"  Finding and Using Dependencies:\"\n\t@echo \"      USE_QT=0                 Skip anything that needs Qt\"\n\t@echo \"  LLVM-related options:\"\n\t@echo \"      LLVM_VERSION=12.0        Specify which LLVM version to use\"\n\t@echo \"      LLVM_DIRECTORY=xx        Specify where LLVM lives\"\n\t@echo \"      LLVM_NAMESPACE=xx        Specify custom LLVM namespace\"\n\t@echo \"      LLVM_STATIC=1            Use static LLVM libraries\"\n\t@echo \"      USE_LLVM_BITCODE=0       Don't generate embedded LLVM bitcode\"\n\t@echo \"  OSL build-time options:\"\n\t@echo \"      INSTALL_PREFIX=path      Set installation prefix (default: ${INSTALL_PREFIX})\"\n\t@echo \"      NAMESPACE=name           Override namespace base name (default: OSL)\"\n\t@echo \"      USE_FAST_MATH=1          Use faster, but less accurate math (set to 0 for libm defaults)\"\n\t@echo \"      OSL_BUILD_TESTS=0        Don't build unit tests, testshade, testrender\"\n\t@echo \"      OSL_BUILD_SHADERS=0      Don't build any shaders\"\n\t@echo \"      USE_SIMD=arch            Build with SIMD support (comma-separated choices:\"\n\t@echo \"                                  0, sse2, sse3, ssse3, sse4.1, sse4.2, f16c,\"\n\t@echo \"                                  avx, avx2, avx512f)\"\n\t@echo \"      OSL_USE_OPTIX=1          Build the OptiX test renderer\"\n\t@echo \"      USE_BATCHED=targets      Build batched SIMD execution of shaders for (comma-separated choices:\"\n\t@echo \"                                  0, b4_SSE2, b8_AVX, b8_AVX2, b8_AVX2_noFMA,\"\n\t@echo \"                                  b8_AVX512, b8_AVX512_noFMA,\"\n\t@echo \"                                  b16_AVX512, b16_AVX512_noFMA)\"\n\t@echo \"      VEC_REPORT=0             Generate compiler vectorization reports\"\n\t@echo \"  make test, extra options:\"\n\t@echo \"      TEST=regex               Run only tests matching the regex\"\n\t@echo \"\"\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 22.7734375,
          "content": "<div align=\"center\">\n  <img src=\"ASWF/logos/openshadinglanguage-stacked-Shaded.png\">\n\n  <!-- <H1>Open Shading Language</H1> -->\n</div>\n\n[![Open Shading Language Reel 2020](http://img.youtube.com/vi/nmwMz1YnGPA/0.jpg)](https://www.youtube.com/watch?v=nmwMz1YnGPA \"Open Shading Language Reel 2020\")\n\n[![Build Status](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/workflows/CI/badge.svg)](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/actions)\n[![License](https://img.shields.io/badge/license-BSD%203--Clause-blue.svg?style=flat-square)](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/LICENSE.md)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/3061/badge)](https://bestpractices.coreinfrastructure.org/projects/3061)\n[![Documentation Status](https://readthedocs.org/projects/open-shading-language/badge/?version=main)](https://open-shading-language.readthedocs.io/en/main/?badge=main)\n\n\nIntroduction\n------------\n\nWelcome to Open Shading Language!\n\nOpen Shading Language (OSL) is a small but rich language for\nprogrammable shading in advanced renderers and other applications, ideal\nfor describing materials, lights, displacement, and pattern generation.\n\nOSL was originally developed by Sony Pictures Imageworks for use in its in-\nhouse renderer used for feature film animation and visual effects, released\nas open source so it could be used by other visual effects and animation\nstudios and rendering software vendors. Now it's the de facto standard\nshading language for VFX and animated features, used across the industry in\nmany commercial and studio- proprietary renderers. Because of this, the work\non OSL received an Academy Award for Technical Achievement in 2017.\n\nOSL is robust and production-proven, and has been used in films as diverse\nas \"The Amazing Spider-Man,\" \"Hotel Transylvania,\" \"Edge of Tomorrow\", \"Ant\nMan\", \"Finding Dory,\" and many more. OSL support is in most leading\nrenderers used for high-end VFX and animation work. For a full list of films\nand products, see the [filmography](#where-osl-has-been-used).\n\nThe OSL code is distributed under the\n[\"New/3-clause BSD\" license](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/LICENSE.md),\nand the documentation under the [Creative Commons Attribution 4.0 International\nLicense](https://creativecommons.org/licenses/by/4.0/).  In short, you are\nfree to use OSL in your own applications, whether they are free or\ncommercial, open or proprietary, as well as to modify the OSL code and\ndocumentation as you desire, provided that you retain the original copyright\nnotices as described in the license.\n\n\nHow OSL is different\n--------------------\n\nOSL has syntax similar to C, as well as other shading languages.\nHowever, it is specifically designed for advanced rendering algorithms\nand has features such as radiance closures, BSDFs, and deferred ray\ntracing as first-class concepts.\n\nOSL has several unique characteristics not found in other shading\nlanguages (certainly not all together).  Here are some things you will\nfind are different in OSL compared to other languages:\n\n* Surface and volume shaders compute radiance closures, not final colors.\n\n  OSL's surface and volume shaders compute an explicit symbolic\n  description, called a \"closure\", of the way a surface or volume\n  scatters light, in units of radiance.  These radiance closures may be\n  evaluated in particular directions, sampled to find important\n  directions, or saved for later evaluation and re-evaluation.\n  This new approach is ideal for a physically-based renderer that\n  supports ray tracing and global illumination.\n\n  In contrast, other shading languages usually compute just a surface\n  color as visible from a particular direction.  These old shaders are\n  \"black boxes\" that a renderer can do little with but execute to find\n  this one piece of information (for example, there is no effective way\n  to discover from them which directions are important to sample).\n  Furthermore, the physical units of lights and surfaces are often\n  underspecified, making it very difficult to ensure that shaders are\n  behaving in a physically correct manner.\n\n* Surface and volume shaders do not loop over lights or shoot rays.\n\n  There are no \"light loops\" or explicitly traced illumination rays in\n  OSL surface shaders.  Instead, surface shaders compute a radiance\n  closure describing how the surface scatters light, and a part of the\n  renderer called an \"integrator\" evaluates the closures for a\n  particular set of light sources and determines in which directions\n  rays should be traced.  Effects that would ordinarily require explicit\n  ray tracing, such as reflection and refraction, are simply part of the\n  radiance closure and look like any other BSDF.\n\n  Advantages of this approach include that integration and sampling may\n  be batched or re-ordered to increase ray coherence; a \"ray budget\" can\n  be allocated to optimally sample the BSDF; the closures may be used by\n  for bidirectional ray tracing or Metropolis light transport; and the\n  closures may be rapidly re-evaluated with new lighting without having\n  to re-run the shaders.\n\n* Surface and light shaders are the same thing.\n\n  OSL does not have a separate kind of shader for light sources.  Lights\n  are simply surfaces that are emissive, and all lights are area lights.\n\n* Transparency is just another kind of illumination.\n\n  You don't need to explicitly set transparency/opacity variables in the\n  shader.  Transparency is just another way for light to interact with a\n  surface, and is included in the main radiance closure computed by a\n  surface shader.\n\n* Renderer outputs (AOV's) may be specified using \"light path expressions.\"\n\n  Sometimes it is desirable to output images containing individual\n  lighting components such as specular, diffuse, reflection, individual\n  lights, etc.  In other languages, this is usually accomplished by\n  adding a plethora of \"output variables\" to the shaders that collect\n  these individual quantities.\n\n  OSL shaders need not be cluttered with any code or output variables to\n  accomplish this.  Instead, there is a regular-expression-based\n  notation for describing which light paths should contribute to which\n  outputs.  This is all done on the renderer side (though supported by\n  the OSL implementation).  If you desire a new output, there is no need\n  to modify the shaders at all; you only need to tell the renderer the\n  new light path expression.\n\n* Shaders are organized into networks.\n\n  OSL shaders are not monolithic, but rather can be organized into\n  networks of shaders (sometimes called a shader group, graph, or DAG),\n  with named outputs of some nodes being connected to named inputs of\n  other nodes within the network.  These connections may be done\n  dynamically at render time, and do not affect compilation of\n  individual shader nodes.  Furthermore, the individual nodes are\n  evaluated lazily, only when their outputs are \"pulled\" from the later\n  nodes that depend on them (shader writers may remain blissfully\n  unaware of these details, and write shaders as if everything is\n  evaluated normally).\n\n* Arbitrary derivatives without grids or extra shading points.\n\n  In OSL, you can take derivatives of any computed quantity in a shader,\n  and use arbitrary quantities as texture coordinates and expect correct\n  filtering.  This does not require that shaded points be arranged in a\n  rectangular grid, or have any particular connectivity, or that any\n  \"extra points\" be shaded.  This is because derivatives are not\n  computed by finite differences with neighboring points, but rather by\n  \"automatic differentiation\", computing partial differentials for the\n  variables that lead to derivatives, without any intervention required\n  by the shader writer.\n\n* OSL optimizes aggressively at render time\n\n  OSL uses the LLVM compiler framework to translate shader networks into\n  machine code on the fly (just in time, or \"JIT\"), and in the process\n  heavily optimizes shaders and networks with full knowledge of the\n  shader parameters and other runtime values that could not have been\n  known when the shaders were compiled from source code.  As a result,\n  we are seeing our OSL shading networks execute 25% faster than the\n  equivalent shaders hand-crafted in C!  (That's how our old shaders\n  worked in our renderer.)\n\n\n\nWhat OSL consists of\n--------------------\n\nThe OSL open source distribution consists of the following components:\n\n* oslc, a standalone compiler that translates OSL source code into\n  an assembly-like intermediate code (in the form of .oso files).\n\n* liboslc, a library that implements the OSLCompiler class, which\n  contains the guts of the shader compiler, in case anybody needs to\n  embed it into other applications and does not desire for the compiler\n  to be a separate executable.\n\n* liboslquery, a library that implements the OSLQuery class, which\n  allows applications to query information about compiled shaders,\n  including a full list of its parameters, their types, and any metadata\n  associated with them.\n\n* oslinfo, a command-line program that uses liboslquery to print to the\n  console all the relevant information about a shader and its parameters.\n\n* liboslexec, a library that implements the ShadingSystem class, which\n  allows compiled shaders to be executed within an application.\n  Currently, it uses LLVM to JIT compile the shader bytecode to x86\n  instructions.\n\n* testshade, a program that lets you execute a shader (or connected\n  shader network) on a rectangular array of points, and save any of its\n  outputs as images.  This allows for verification of shaders (and the\n  shading system) without needing to be integrated into a fully\n  functional renderer, and is the basis for most of our testsuite\n  verification.  Along with testrender, testshade is a good example\n  of how to call the OSL libraries.\n\n* testrender, a tiny ray-tracing renderer that uses OSL for shading.\n  Features are very minimal (only spheres are permitted at this time)\n  and there has been no attention to performance, but it demonstrates how\n  the OSL libraries may be integrated into a working renderer, what\n  interfaces the renderer needs to supply, and how the BSDFs/radiance\n  closures should be evaluated and integrated (including with multiple\n  importance sampling).\n\n* A few sample shaders.\n\n* Documentation -- at this point consisting of the OSL language\n  specification (useful for shader writers), but in the future will have\n  detailed documentation about how to integrate the OSL libraries into\n  renderers.\n\n\n\nWhere OSL has been used\n-----------------------\n\n*This list only contains films or products whose OSL use is stated or can be\ninferred from public sources, or that we've been told is ok to list here. If\nan OSL-using project is missing and it's not a secret, just email the OSL\nproject leader or submit a PR with edits to this file.*\n\n### Renderers and other production tools with OSL support\n\n(In approximate order of adding OSL support)\n\n* [Sony Pictures Imageworks: in-house \"Arnold\" renderer](https://dl.acm.org/doi/10.1145/3180495)\n* [Blender/Cycles](https://docs.blender.org/manual/en/dev/render/shader_nodes/osl.html)\n* [Chaos Group: V-Ray](https://www.chaosgroup.com/)\n* [Pixar: PhotoRealistic RenderMan RIS](https://renderman.pixar.com)\n* Isotropix: [Clarisse iFX](https://www.isotropix.com/products/clarisse/ifx) / [Clarisse BUiLDER](https://www.isotropix.com/products/clarisse/builder) / [Angie](https://www.isotropix.com/products/angie)\n* [Autodesk Beast](http://www.autodesk.com/products/beast/overview)\n* [Appleseed](http://appleseedhq.net)\n* [Animal Logic: Glimpse renderer](https://www.fxguide.com/featured/a-glimpse-at-animal-logic/)\n* [Image Engine: Gaffer](http://www.gafferhq.org/) (for expressions and deformers)\n* [DNA Research: 3Delight](http://www.3delight.com/)\n* Ubisoft motion picture group's proprietary renderer\n* [Autodesk/SolidAngle: Arnold](https://www.solidangle.com/arnold/)\n* [Autodesk: 3DS Max 2019](https://help.autodesk.com/view/3DSMAX/2019/ENU/?guid=__developer_3ds_max_sdk_features_rendering_osl_html)\n* [Maxon: Redshift](https://www.maxon.net/en/redshift)\n\n### Significant work using OSL, grouped by year of release date:\n\n(Here we are considering \"significant work\" to mean a feature film released\ntheatrically or on a major streaming platform, TV/streaming series heavily\nfeaturing visual effects or animation, or short films that have won or been\nnominated for major awards.)\n\n* **(2012)**\n  Men in Black 3, The Amazing Spider-Man, Hotel Transylvania\n* **(2013)**\n  Oz the Great and Powerful, Smurfs 2, Cloudy With a Chance of Meatballs 2\n* **(2014)**\n  The Amazing Spider-Man 2, Blended, Edge of Tomorrow, 22 Jump Street,\n  Guardians of the Galaxy, Fury,\n  The Hunger Games: Mockingjay - Part 1, Exodus: Gods and Kings,\n  The Interview\n* **(2015)**\n  American Sniper,\n  Insurgent,\n  Avengers Age of Ultron,\n  Ant Man,\n  Pixels,\n  Mission Impossible: Rogue Nation,\n  Hotel Transylvania 2,\n  Bridge of Spies,\n  James Bond: Spectre,\n  The Hunger Games: Mockingjay - Part 2,\n  Concussion\n* **(2016)**\n  Allegiant,\n  Batman vs Superman: Dawn of Justice,\n  The Huntsman,\n  Angry Birds Movie,\n  Alice Through the Looking Glass,\n  Captain America: Civil War,\n  Finding Dory,\n  Piper,\n  Independence Day: Resurgence,\n  Ghostbusters,\n  Star Trek Beyond,\n  Suicide Squad,\n  Kubo and the Two Strings,\n  Kingsglaive: Final Fantasy XV,\n  Storks,\n  Miss Peregrine's Home for Peculiar Children,\n  Fantastic Beasts and Where to Find Them,\n  Assassin's Creed\n* **(2017)**\n  Lego Batman,\n  The Great Wall,\n  A Cure for Wellness,\n  Logan,\n  Power Rangers,\n  Life,\n  Smurfs: The Lost Village,\n  The Fate of the Furious,\n  Alien Covenant,\n  Guardians of the Galaxy 2,\n  The Mummy,\n  Wonder Woman,\n  Cars 3,\n  Baby Driver,\n  Spider-Man: Homecoming,\n  Dunkirk,\n  The Emoji Movie,\n  Detroit,\n  Kingsman: The Golden Circle,\n  Lego Ninjago Movie,\n  Blade Runner 2049,\n  Geostorm,\n  Coco,\n  Justice League,\n  Thor: Ragnarok\n* **(2018)**\n  Peter Rabbit,\n  Black Panther,\n  Annihilation,\n  Red Sparrow,\n  Pacific Rim Uprising,\n  Avengers Infinity War,\n  Deadpool 2,\n  Incredibles 2,\n  Jurassic World: Fallen Kingdom,\n  Hotel Transylvania 3: Summer Vacation,\n  Ant Man and the Wasp,\n  Skyscraper,\n  Mission Impossible: Fallout,\n  The Meg,\n  Kin,\n  Smallfoot,\n  Alpha,\n  Venom,\n  First Man,\n  Bad Times at the El Royale,\n  Fantastic Beasts: The Crimes of Grindelwald,\n  Bohemian Rhapsody,\n  Holmes and Watson,\n  Spider-Man: Into the Spider-Verse\n* **(2019)**\n  The Kid Who Would Be King,\n  Alita: Battle Angel,\n  Lego Movie 2,\n  Lucky 13 (Love, Death, and Robots),\n  Captain Marvel,\n  Triple Frontier,\n  Avengers: Endgame,\n  Pokémon Detective Pikachu,\n  Godzilla: King of Monsters,\n  Rim of the World,\n  John Wick 3 Parabellum,\n  Men in Black International,\n  Toy Story 4,\n  Spider-Man: Far From Home,\n  Hobbs & Shaw,\n  Angry Birds 2,\n  The Art of Racing in the Rain,\n  Secret Life of Pets,\n  The Mandalorian (S1),\n  The Dark Crystal: Age of Resistance,\n  The King,\n  Jumanji: The Next Level,\n  Richard Jewell,\n  Game of Thrones (S8),\n  Lost in Space (S1),\n  Togo,\n  Missing Link\n* **(2020)**\n  Underwater,\n  Birds of Prey,\n  Onward,\n  Bloodshot,\n  Greyhound,\n  The Old Guard,\n  Mulan,\n  Tenet,\n  The New Mutants,\n  Artemis Fowl,\n  The Eight Hundred,\n  Over the Moon,\n  Wonder Woman 1984,\n  Soul,\n  The Mandalorian (S2),\n  The Boys (S2),\n  Umbrella Academy (S2)\n* **(2021)**\n  Chaos Walking,\n  Peter Rabbit 2: The Runaway,\n  The Falcon and the Winder Soldier,\n  Secret Magic Control Agency,\n  Zack Snyder's Justice League,\n  The Mitchells vs the Machines,\n  Jupiter's Legacy,\n  Luca,\n  F9,\n  Vivo,\n  Jungle Cruise,\n  Cinderella,\n  Dune,\n  No Time To Die,\n  Ron's Gone Wrong,\n  Venom: Let There Be Carnage,\n  Last Night in Soho,\n  Ghostbusters: Afterlife,\n  Spider-Man 3: No Way Home,\n  Matrix Resurrections,\n  Sing 2\n* **(2022)**\n  Hotel Transylvania 4: Transformania,\n  Death on the Nile,\n  Uncharted,\n  Turning Red,\n  The Adam Project,\n  Doctor Strange in the Multiverse of Madness,\n  Love, Death, and Robots: In Vaulted Halls Entombed,\n  Jurassic World: Dominion,\n  Lightyear,\n  Thor: Love and Thunder,\n  The Sea Beast,\n  DC League of Super Pets,\n  Minions: Rise of Gru,\n  Bullet Train,\n  Slumberland,\n  Glass Onion,\n  Archive 81 (series),\n  Moon Night (series),\n  Obi-Wan Kenobi (series),\n  The Boys (S3),\n  Andor (S1)\n* **(2023)**\n  Ant-Man and the Wasp: Quantumania,\n  The Mandalorian S3,\n  The Magician's Elephant,\n  Super Mario Bros Film,\n  Guardians of the Galaxy 3,\n  Spider-Man: Across the Spider-Verse,\n  Elemental,\n  The Marvels,\n  Leo\n* **(2024 / upcoming)**\n  Ghostbusters: Frozen Empire,\n  Inside Out 2,\n  In Your Dreams,\n  ...\n\n\nBuilding and Installation\n-------------------------\n\nPlease read the [INSTALL.md](INSTALL.md) file for detailed instructions on\nhow to build and install OSL.\n\n\nDocumentation\n-------------\n\nThe OSL language specification can be found at\n[src/doc/osl-languagespec.pdf](src/doc/osl-languagespec.pdf) (in a source\ndistribution) or in the share/doc/OSL/osl-languagespec.pdf file of an\ninstalled binary distribution.\n\n[OSL Documentation on ReadTheDocs](https://docs.openshadinglanguage.org)\nThis will be the future documentation. It's probably as complete as the PDF,\nbut it needs some proofreading, so the PDF is still considered the\nauthoritative source for now. But some time soon, the old PDF specification\nwill be deprecated in favor of\nthis online documentation.\n<!-- is the best place to start if you are interested in how to use OSL,\nits APIs. -->\nThere is also a [PDF\nversion](https://readthedocs.org/projects/open-shading-language/downloads/pdf/latest/).\n\nFor those interested in learning to program OSL shaders there is the\n[Siggraph 2024 Course](https://dl.acm.org/doi/proceedings/10.1145/3664475), \n[Shader Writing in Open Shading Language](https://dl.acm.org/doi/10.1145/3664475.3664534)\nand its companion \n[Supplementary Materials](https://github.com/LaikaStudios/OSLShaderWriting),\nwhich use RenderMan<sup>&reg;</sup> in the examples but which are primarily about writing OSL shaders.\n\nThere is also the [Shader Writing in Open Shading Language book](https://www.routledge.com/Shader-Writing-in-Open-Shading-Language-with-RenderManr-Examples/Prater/p/book/9781032421100).\nThis covers all the material from the Siggraph course but in far greater detail. It also includes much more information about how OSL operates and covers a much broader range of shader examples.\n\n\nContact & reporting problems\n----------------------------\n\nSimple \"how do I...\", \"I'm having trouble\", or \"is this a bug\" questions are\nbest asked on the [osl-dev developer mail\nlist](https://lists.aswf.io/g/osl-dev).\nThat's where the most people will see it and potentially be able to answer\nyour question quickly (more so than a GH \"issue\").\n\nBugs, build problems, and discovered vulnerabilities that you are relatively\ncertain is a legit problem in the code, and for which you can give clear\ninstructions for how to reproduce, should be [reported as\nissues](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/issues).\n\nIf you think you've found a potential vulnerability in OSL, please\nconfidentially report it by emailing the project administrators at\n[security@openshadinglanguage.org](security@openshadinglanguage.org).\n\nIf any other issue requires confidentiality that precludes a public question\nor issue, you may contact the project administrator privately at\n[lg@larrygritz.com](lg@larrygritz.com).\n\n\nContributing\n------------\n\nOSL welcomes code contributions, and nearly 50 people have done so over the\nyears. We take code contributions via the usual GitHub pull request (PR)\nmechanism. Please see [CONTRIBUTING](CONTRIBUTING.md) for detailed\ninstructions.\n\n\nContacts, Links, and References\n-------------------------------\n\n[OSL GitHub page](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage)\n\n[Read or subscribe to the OSL development mail list](https://lists.aswf.io/g/osl-dev)\n\n[Most recent PDF of the OSL language specification](https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/blob/main/src/doc/osl-languagespec.pdf\n)\n\n[OSL home page](http://openshadinglanguage.org)\n\n\n\n\nCredits\n-------\n\nThe current project leadership is documented in the\n[Governance](GOVERNANCE.md) file.\n\nMany people have contributed features, bug fixes, and other changes to OSL\nover the years: Steve Agland, Shane Ambler, Martijn Berger, Farchad\nBidgolirad, Nicholas Bishop, Curtis Black, Rasmus Bonnedal, Solomon Boulos,\nStefan Bruens, Stefan Büttner, Matthaus G. Chajdas, Clark Chen, Mehdi\nChinoune, Alejandro Conty, Damien Courtois, Dieter De Baets, Thomas Dinges,\nDaniel Dresser, Mads Drøschler, Peter Ellerington, Luke Emrose, Louis Feng,\nMark Final, Henri Fousse, Stephen Friedman, Syoyo Fujita, Tim Grant, Larry\nGritz, Nicolas Guiard, Euan Haahr, Derek Haase, Sven-Hendrik Haase, John\nHaddon, Niklas Harrysson, Daniel Heckenberg, Chris Hellmuth, Adrien Herubel,\nDan Horák, Thiago Ize, Matt Johnson, Ronan Keryell, Chris Kulla, Elvic Liang,\nMax Liani, Adam Martinez, John Mertic, Bastien Montagne, Steena Monteiro,\nPatrick Mours, Alexis Oblet, Erich Ocean, Mikko Ohtamaa, Jino Park, Alexei\nPawlow, Mitch Prater, Jay Reynolds, Declan Russell, Benoit Ruiz, Patrick\nScheibe, Alex Schworer, Jonathan Scruggs, Sergey Sharybin, Mark Sisson, Sandip\nShukla, Cliff Stein, Stephan Steinbach, Luya Tshimbalanga, Esteban Tovagliari,\nBrecht Van Lommel, Thibault Vergne, Alexander von Knorring, Aidan Welch, Alex\nWells, Roman Zulak. (Listed alphabetically; if we've left anybody out, it is\ninadvertent, please let us know.)\n\nWe cannot possibly express sufficient gratitude to the managers at Sony\nPictures Imageworks who allowed this project to proceed, supported it\nwholeheartedly, and permitted us to release the source, especially Rob\nBredow, Brian Keeney, Barbara Ford, Rene Limberger, Erik Strauss, and Mike\nFord.\n\nHuge thanks also go to the crack shading team at SPI, and the brave lookdev\nTDs and CG supes willing to use OSL on their shows.  They served as our\nguinea pigs, inspiration, testers, and a fantastic source of feedback. And\nof course, the many engineers, TDs, and artists elsewhere who incorporated\nOSL into their products and pipelines, especially the early risk-takers at\nChaos Group, Double Negative, Pixar, DNA, Isotropix, and Animal Logic. Thank\nyou, and we hope we've been responsive to your needs.\n\nOSL was not developed in isolation.  We owe a debt to the individuals\nand studios who patiently read early drafts of the language\nspecification and gave us very helpful feedback and additional ideas,\nas well as to the continuing contributions and feedback of its current\ndevelopers and users at other VFX and animation studios.\n\nThe OSL implementation depends upon several other open source packages,\nall with compatible licenses:\n\n* [OpenImageIO](http://www.openimageio.org)\n* [IlmBase](http://www.openexr.com)\n* [LLVM Compiler Infrastructure](http://llvm.org)\n\nOSL's documentation incorporates parts of [Markdeep](https://casual-effects.com/markdeep/)\n(c) 2015-2016, Morgan McGuire, and [highlight.js](https://highlightjs.org/)\n(c) 2006, Ivan Sagalaev, both distributed under BSD licenses.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.65234375,
          "content": "# Security Policy\n\n## Supported Versions\n\nThis gives guidance about which branches are supported with patches to\nsecurity vulnerabilities.\n\n| Version / branch  | Supported                                            |\n| --------- | ---------------------------------------------------- |\n| main      | :white_check_mark: :construction: ALL fixes immediately, but this is a branch under development with a frequently unstable ABI and occasionally unstable API. |\n| 1.14.x    | :white_check_mark: All fixes that can be backported without breaking ABI compatibility. New tagged releases monthly. |\n| 1.13.x    | :warning: Only the most critical fixes, only if they can be easily backported. |\n| <= 1.12.x | :x: No longer receiving patches of any kind. |\n\n\n## Reporting a Vulnerability\n\nIf you think you've found a potential vulnerability in OSL, please report it\nby emailing the project administrators at\n[security@openshadinglanguage.org](security@openshadinglanguage.org). Only the\nproject administrators have access to these messages. Include detailed steps to\nreproduce the issue, and any other information that could aid an\ninvestigation. Our policy is to respond to vulnerability reports within 14\ndays.\n\nOur policy is to address critical security vulnerabilities rapidly and post\npatches as quickly as possible.\n\n\n## Other security features\n\n### Signed tags\n\nStarting with OSL 1.14.3.0, we cryptographically sign release tags.\nTo verify a tag, you can use the `git tag -v` command, which will check\nthe signature against the public key that is included in the repository.\nFor example,\n\n```bash\ngit tag -v v1.14.3.0\n```\n\n## Outstanding Security Issues\n\nNone known\n\n\n## History of CVE Fixes\n\n"
        },
        {
          "name": "THIRD-PARTY.md",
          "type": "blob",
          "size": 14.7744140625,
          "content": "See [LICENSE.md](LICENSE.md) for the main open source license of original\ncode written for the Open Shading Language project.\n\nThe remainder of this file reproduces the open source licensing details\nof other projects that have been imported, incorporated into, or derived\ninto parts of OSL.\n\nIn no particular order:\n\n-------------------------------------------------------------------------\n\nBSD 3-Clause License\nSPDX-License-Identifier: BSD-3-Clause\n\n* OpenEXR, Copyright (c) Contributors to the OpenEXR Project.\n  https://github.com/AcademySoftwareFoundation/OpenEXR\n\n  OSL replicates and modifies several files from the \"Imath\" portion of\n  OpenEXR. These are all found in src/include/OSL/Imathx.\n\n* Qt, Copyright (c) The Qt Company Ltd.\n  http://doc.qt.io/\n\n  Some widget code in src/osltoy is copied and/or derived from example code\n  for Qt.\n\n* Highlight.js\n  https://github.com/highlightjs/highlight.js/\n\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n   - Redistributions of source code must retain the above copyright notice,\n     this list of conditions and the following disclaimer.\n\n   - Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in the\n     documentation and/or other materials provided with the distribution.\n\n   - Neither the name of the copyright holder nor the names of its\n     contributors may be used to endorse or promote products derived from\n     this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n\n\n-------------------------------------------------------------------------\n\nBSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)\nSPDX-License-Identifier: BSD-2-Clause\n\n* Markdeep\n  https://casual-effects.com/markdeep\n\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n* Redistributions of source code must retain the above copyright\n  notice, this list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above\n  copyright notice, this list of conditions and the following disclaimer\n  in the documentation and/or other materials provided with the\n  distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n-------------------------------------------------------------------------\n\nPublic domain\n\n* The simplex noise implementation is Copyright (c) Stefan Gustavson.\n  It bears the following notice:\n\n  This library is public domain software, released by the author\n  into the public domain in February 2011. You may do anything\n  you like with it. You may even remove all attributions,\n  but of course I'd appreciate it if you kept my name somewhere.\n\n\n-------------------------------------------------------------------------\n\nApache 2.0 License.\nSPDX-License-Identifier: Apache-2.0\n\n* OpenImageIO Copyright (c) Contributors to the OpenImageIO Project.\n  https://github.com/AcademySoftwareFoundation/OpenImageIO\n\n  Many bits of code flow back and forth between OIIO and OSL, especially\n  parts of the CMake build system.\n\n* ninjatracing.py utility for build profiling is Apache-2.0 licensed\n  and comes from https://github.com/nico/ninjatracing.\n  Copyright 2018 Nico Weber.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n-------------------------------------------------------------------------\n\nModified Apache 2.0 License\n\nUniversal Scene Description\nCopyright Pixar.\n\nPortions of the build_osl.py were derived from scripts distributed with USD.\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n  \"License\" shall mean the terms and conditions for use, reproduction,\n  and distribution as defined by Sections 1 through 9 of this document.\n\n  \"Licensor\" shall mean the copyright owner or entity authorized by\n  the copyright owner that is granting the License.\n\n  \"Legal Entity\" shall mean the union of the acting entity and all\n  other entities that control, are controlled by, or are under common\n  control with that entity. For the purposes of this definition,\n  \"control\" means (i) the power, direct or indirect, to cause the\n  direction or management of such entity, whether by contract or\n  otherwise, or (ii) ownership of fifty percent (50%) or more of the\n  outstanding shares, or (iii) beneficial ownership of such entity.\n\n  \"You\" (or \"Your\") shall mean an individual or Legal Entity\n  exercising permissions granted by this License.\n\n  \"Source\" form shall mean the preferred form for making modifications,\n  including but not limited to software source code, documentation\n  source, and configuration files.\n\n  \"Object\" form shall mean any form resulting from mechanical\n  transformation or translation of a Source form, including but\n  not limited to compiled object code, generated documentation,\n  and conversions to other media types.\n\n  \"Work\" shall mean the work of authorship, whether in Source or\n  Object form, made available under the License, as indicated by a\n  copyright notice that is included in or attached to the work\n  (an example is provided in the Appendix below).\n\n  \"Derivative Works\" shall mean any work, whether in Source or Object\n  form, that is based on (or derived from) the Work and for which the\n  editorial revisions, annotations, elaborations, or other modifications\n  represent, as a whole, an original work of authorship. For the purposes\n  of this License, Derivative Works shall not include works that remain\n  separable from, or merely link (or bind by name) to the interfaces of,\n  the Work and Derivative Works thereof.\n\n  \"Contribution\" shall mean any work of authorship, including\n  the original version of the Work and any modifications or additions\n  to that Work or Derivative Works thereof, that is intentionally\n  submitted to Licensor for inclusion in the Work by the copyright owner\n  or by an individual or Legal Entity authorized to submit on behalf of\n  the copyright owner. For the purposes of this definition, \"submitted\"\n  means any form of electronic, verbal, or written communication sent\n  to the Licensor or its representatives, including but not limited to\n  communication on electronic mailing lists, source code control systems,\n  and issue tracking systems that are managed by, or on behalf of, the\n  Licensor for the purpose of discussing and improving the Work, but\n  excluding communication that is conspicuously marked or otherwise\n  designated in writing by the copyright owner as \"Not a Contribution.\"\n\n  \"Contributor\" shall mean Licensor and any individual or Legal Entity\n  on behalf of whom a Contribution has been received by Licensor and\n  subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n  this License, each Contributor hereby grants to You a perpetual,\n  worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n  copyright license to reproduce, prepare Derivative Works of,\n  publicly display, publicly perform, sublicense, and distribute the\n  Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n  this License, each Contributor hereby grants to You a perpetual,\n  worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n  (except as stated in this section) patent license to make, have made,\n  use, offer to sell, sell, import, and otherwise transfer the Work,\n  where such license applies only to those patent claims licensable\n  by such Contributor that are necessarily infringed by their\n  Contribution(s) alone or by combination of their Contribution(s)\n  with the Work to which such Contribution(s) was submitted. If You\n  institute patent litigation against any entity (including a\n  cross-claim or counterclaim in a lawsuit) alleging that the Work\n  or a Contribution incorporated within the Work constitutes direct\n  or contributory patent infringement, then any patent licenses\n  granted to You under this License for that Work shall terminate\n  as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n  Work or Derivative Works thereof in any medium, with or without\n  modifications, and in Source or Object form, provided that You\n  meet the following conditions:\n\n  (a) You must give any other recipients of the Work or\n      Derivative Works a copy of this License; and\n\n  (b) You must cause any modified files to carry prominent notices\n      stating that You changed the files; and\n\n  (c) You must retain, in the Source form of any Derivative Works\n      that You distribute, all copyright, patent, trademark, and\n      attribution notices from the Source form of the Work,\n      excluding those notices that do not pertain to any part of\n      the Derivative Works; and\n\n  (d) If the Work includes a \"NOTICE\" text file as part of its\n      distribution, then any Derivative Works that You distribute must\n      include a readable copy of the attribution notices contained\n      within such NOTICE file, excluding those notices that do not\n      pertain to any part of the Derivative Works, in at least one\n      of the following places: within a NOTICE text file distributed\n      as part of the Derivative Works; within the Source form or\n      documentation, if provided along with the Derivative Works; or,\n      within a display generated by the Derivative Works, if and\n      wherever such third-party notices normally appear. The contents\n      of the NOTICE file are for informational purposes only and\n      do not modify the License. You may add Your own attribution\n      notices within Derivative Works that You distribute, alongside\n      or as an addendum to the NOTICE text from the Work, provided\n      that such additional attribution notices cannot be construed\n      as modifying the License.\n\n  You may add Your own copyright statement to Your modifications and\n  may provide additional or different license terms and conditions\n  for use, reproduction, or distribution of Your modifications, or\n  for any such Derivative Works as a whole, provided Your use,\n  reproduction, and distribution of the Work otherwise complies with\n  the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n  any Contribution intentionally submitted for inclusion in the Work\n  by You to the Licensor shall be under the terms and conditions of\n  this License, without any additional terms or conditions.\n  Notwithstanding the above, nothing herein shall supersede or modify\n  the terms of any separate license agreement you may have executed\n  with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n  names, trademarks, service marks, or product names of the Licensor\n  and its affiliates, except as required to comply with Section 4(c) of\n  the License and to reproduce the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n  agreed to in writing, Licensor provides the Work (and each\n  Contributor provides its Contributions) on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n  implied, including, without limitation, any warranties or conditions\n  of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n  PARTICULAR PURPOSE. You are solely responsible for determining the\n  appropriateness of using or redistributing the Work and assume any\n  risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n  whether in tort (including negligence), contract, or otherwise,\n  unless required by applicable law (such as deliberate and grossly\n  negligent acts) or agreed to in writing, shall any Contributor be\n  liable to You for damages, including any direct, indirect, special,\n  incidental, or consequential damages of any character arising as a\n  result of this License or out of the use or inability to use the\n  Work (including but not limited to damages for loss of goodwill,\n  work stoppage, computer failure or malfunction, or any and all\n  other commercial damages or losses), even if such Contributor\n  has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n  the Work or Derivative Works thereof, You may choose to offer,\n  and charge a fee for, acceptance of support, warranty, indemnity,\n  or other liability obligations and/or rights consistent with this\n  License. However, in accepting such obligations, You may act only\n  on Your own behalf and on Your sole responsibility, not on behalf\n  of any other Contributor, and only if You agree to indemnify,\n  defend, and hold each Contributor harmless for any liability\n  incurred by, or claims asserted against, such Contributor by reason\n  of your accepting any such warranty or additional liability.\n\n-------------------------------------------------------------------------\n\nIf we have left anything out, it is unintentional. Please let us know.\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "sonar-project.properties",
          "type": "blob",
          "size": 0.923828125,
          "content": "# SPDX-License-Identifier: BSD-3-Clause\n# Copyright Contributors to the Open Shading Language Project.\n\nsonar.host.url=https://sonarcloud.io\n\n# Required metadata\nsonar.organization=academysoftwarefoundation\nsonar.projectName=OpenShadingLanguage\nsonar.projectVersion=1.12\nsonar.projectKey=AcademySoftwareFoundation_OpenShadingLanguage\n\n# Project links\nsonar.links.homepage=https://github.com/AcademySoftwareFoundation/OpenShadingLanguage\nsonar.links.ci=https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/actions\nsonar.links.scm=https://github.com/AcademySoftwareFoundation/OpenShadingLanguage\nsonar.links.issue=https://github.com/AcademySoftwareFoundation/OpenShadingLanguage/issues\n\n# Source properties\nsonar.sources=src\nsonar.sourceEncoding=UTF-8\nsonar.exclusions=src/include/OSL/Imath/*.h,src/build-scripts/*\n\n# C/C++ analyzer properties\nsonar.cfamily.build-wrapper-output=build/bw_output\nsonar.cfamily.gcov.reportsPath=_coverage\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "testsuite",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}