{
  "metadata": {
    "timestamp": 1736565628513,
    "page": 511,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lifting-bits/mcsema",
      "stars": 2674,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.0537109375,
          "content": "---\nBasedOnStyle: Google\nAccessModifierOffset: '-1'\nAlignAfterOpenBracket: Align\nAlignConsecutiveMacros: 'false'\nAlignConsecutiveAssignments: 'false'\nAlignConsecutiveDeclarations: 'false'\nAlignEscapedNewlines: DontAlign\nAlignOperands: 'true'\nAlignTrailingComments: 'false'\nAllowAllArgumentsOnNextLine: 'true'\nAllowAllConstructorInitializersOnNextLine: 'false'\nAllowAllParametersOfDeclarationOnNextLine: 'true'\nAllowShortBlocksOnASingleLine: 'false'\nAllowShortCaseLabelsOnASingleLine: 'true'\nAllowShortFunctionsOnASingleLine: Empty\nAllowShortIfStatementsOnASingleLine: Never\nAllowShortLambdasOnASingleLine: All\nAllowShortLoopsOnASingleLine: 'false'\nAlwaysBreakAfterReturnType: None\nAlwaysBreakTemplateDeclarations: 'Yes'\nBinPackParameters: 'true'\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Custom\nBreakConstructorInitializers: BeforeColon\nBreakInheritanceList: BeforeColon\nBreakStringLiterals: 'false'\nColumnLimit: '80'\nCompactNamespaces: 'false'\nConstructorInitializerAllOnOneLineOrOnePerLine: 'true'\nConstructorInitializerIndentWidth: '4'\nContinuationIndentWidth: '4'\nCpp11BracedListStyle: 'true'\nDerivePointerAlignment: 'false'\nFixNamespaceComments: 'true'\nIncludeBlocks: Regroup\nIndentCaseLabels: 'true'\nIndentPPDirectives: AfterHash\nIndentWidth: '2'\nIndentWrappedFunctionNames: 'false'\nKeepEmptyLinesAtTheStartOfBlocks: 'true'\nLanguage: Cpp\nMaxEmptyLinesToKeep: '2'\nNamespaceIndentation: None\nPointerAlignment: Right\nReflowComments: 'false'\nSortIncludes: 'true'\nSortUsingDeclarations: 'true'\nSpaceAfterCStyleCast: 'true'\nSpaceAfterLogicalNot: 'false'\nSpaceAfterTemplateKeyword: 'true'\nSpaceBeforeAssignmentOperators: 'true'\nSpaceBeforeCtorInitializerColon: 'true'\nSpaceBeforeInheritanceColon: 'true'\nSpaceBeforeParens: ControlStatements\nSpaceBeforeRangeBasedForLoopColon: 'true'\nSpaceInEmptyParentheses: 'false'\nSpacesBeforeTrailingComments: '2'\nSpacesInAngles: 'false'\nSpacesInCStyleCastParentheses: 'false'\nSpacesInContainerLiterals: 'false'\nSpacesInParentheses: 'false'\nSpacesInSquareBrackets: 'false'\nStandard: Cpp11\nTabWidth: '2'\nUseTab: Never\nPenaltyReturnTypeOnItsOwnLine: '40'\n\n...\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0556640625,
          "content": "build\nDockerfile*\n.travis.yml\n.github*\nLICENSE\nREADME.md\n"
        },
        {
          "name": ".gdbinit",
          "type": "blob",
          "size": 6.0615234375,
          "content": "\ndefine print-rip\n  set $rptr = ((unsigned long long (*)(void))__mcsema_debug_get_reg_state)()\n  set $_rip = *((unsigned long long *)($rptr + 2408))\n  printf \"0x%lx\\n\", $_rip\n  dont-repeat\nend\n\nset $__rax_offset = 2216\nset $__flags_offset = 2064\nset $__xmm0_offset = 16\n\ndefine print-reg-state-amd64\n  set $rptr = ((unsigned long long (*)(void))__mcsema_debug_get_reg_state)()\n  printf \"             emulated                   native\\n\"\n  set $__rax_ptr = $rptr + $__rax_offset\n  printf \"rip     0x%016lx        0x%016lx\\n\", *((unsigned long long *)($__rax_ptr + 16 * 16)), $rip\n  printf \"rax     0x%016lx        0x%016lx\\n\", *((unsigned long long *)($__rax_ptr + 0 * 16)), $rax\n  printf \"rbx     0x%016lx        0x%016lx\\n\", *((unsigned long long *)($__rax_ptr + 1 * 16)), $rbx\n  printf \"rcx     0x%016lx        0x%016lx\\n\", *((unsigned long long *)($__rax_ptr + 2 * 16)), $rcx\n  printf \"rdx     0x%016lx        0x%016lx\\n\", *((unsigned long long *)($__rax_ptr + 3 * 16)), $rdx\n  printf \"rsi     0x%016lx        0x%016lx\\n\", *((unsigned long long *)($__rax_ptr + 4 * 16)), $rsi\n  printf \"rdi     0x%016lx        0x%016lx\\n\", *((unsigned long long *)($__rax_ptr + 5 * 16)), $rdi\n  printf \"rsp     0x%016lx        0x%016lx\\n\", *((unsigned long long *)($__rax_ptr + 6 * 16)), $rsp\n  printf \"rbp     0x%016lx        0x%016lx\\n\", *((unsigned long long *)($__rax_ptr + 7 * 16)), $rbp\n  printf \"r8      0x%016lx        0x%016lx\\n\", *((unsigned long long *)($__rax_ptr + 8 * 16)), $r8\n  printf \"r9      0x%016lx        0x%016lx\\n\", *((unsigned long long *)($__rax_ptr + 9 * 16)), $r9\n  printf \"r10     0x%016lx        0x%016lx\\n\", *((unsigned long long *)($__rax_ptr + 10 * 16)), $r10\n  printf \"r11     0x%016lx        0x%016lx\\n\", *((unsigned long long *)($__rax_ptr + 11 * 16)), $r11\n  printf \"r12     0x%016lx        0x%016lx\\n\", *((unsigned long long *)($__rax_ptr + 12 * 16)), $r12\n  printf \"r13     0x%016lx        0x%016lx\\n\", *((unsigned long long *)($__rax_ptr + 13 * 16)), $r13\n  printf \"r14     0x%016lx        0x%016lx\\n\", *((unsigned long long *)($__rax_ptr + 14 * 16)), $r14\n  printf \"r15     0x%016lx        0x%016lx\\n\", *((unsigned long long *)($__rax_ptr + 15 * 16)), $r15\n  dont-repeat\nend\n\ndefine print-flags-amd64\n  set $rptr = ((unsigned long long (*)(void))__mcsema_debug_get_reg_state)()\n  set $flptr = (char *) ($rptr + $__flags_offset)\n  printf \"eflags [\"\n  if $flptr[1]\n    printf \"CF \"\n  end\n  if $flptr[3]\n    printf \"PF \"\n  end\n  if $flptr[5]\n    printf \"AF \"\n  end\n  if $flptr[7]\n    printf \"ZF \"\n  end\n  if $flptr[9]\n    printf \"SF \"\n  end\n  if $flptr[11]\n    printf \"DF \"\n  end\n  if $flptr[13]\n    printf \"OF \"\n  end\n  printf \"]\\n\"\n  dont-repeat\nend\n\ndefine print-flags-x86\n  print-flags-amd64\nend\n\ndefine print-reg-state-x86\n  set $rptr = ((unsigned long long (*)(void))__mcsema_debug_get_reg_state)()\n  printf \"             emulated                   native\\n\"\n  set $__rax_ptr = $rptr + $__rax_offset\n  printf \"eip     0x%08x        0x%08x\\n\", *((unsigned *)($__rax_ptr + 16 * 16)), (unsigned) $pc\n  printf \"eax     0x%08x        0x%08x\\n\", *((unsigned *)($__rax_ptr + 0 * 16)), $eax\n  printf \"ebx     0x%08x        0x%08x\\n\", *((unsigned *)($__rax_ptr + 1 * 16)), $ebx\n  printf \"ecx     0x%08x        0x%08x\\n\", *((unsigned *)($__rax_ptr + 2 * 16)), $ecx\n  printf \"edx     0x%08x        0x%08x\\n\", *((unsigned *)($__rax_ptr + 3 * 16)), $edx\n  printf \"esi     0x%08x        0x%08x\\n\", *((unsigned *)($__rax_ptr + 4 * 16)), $esi\n  printf \"edi     0x%08x        0x%08x\\n\", *((unsigned *)($__rax_ptr + 5 * 16)), $edi\n  printf \"esp     0x%08x        0x%08x\\n\", *((unsigned *)($__rax_ptr + 6 * 16)), $esp\n  printf \"ebp     0x%08x        0x%08x\\n\", *((unsigned *)($__rax_ptr + 7 * 16)), $ebp\n  dont-repeat\nend\n\nset $__x0_offset = 544\n\ndefine print-reg-state-aarch64\n  set $rptr = ((unsigned long long (*)(void))__mcsema_debug_get_reg_state)()\n  printf \"\\temulated\\n\"\n  set $__x0_ptr = $rptr + $__x0_offset\n  set $__i = 0\n  while $__i < 31\n    printf \"x%d\\t0x%016lx\\t&x%d = 0x%lx\\n\", $__i, *((unsigned long long *)($__x0_ptr + $__i * 16)), $__i, $__x0_ptr + $__i * 16\n    set $__i = $__i + 1\n  end\n  \n  printf \"sp\\t0x%016lx\\n\", *((unsigned long long *)($__x0_ptr + $__i * 16))\n  set $__i = $__i + 1\n  printf \"pc\\t0x%016lx\\t&pc = 0x%lx\\n\", *((unsigned long long *)($__x0_ptr + $__i * 16)), $__x0_ptr + $__i * 16\n  dont-repeat\nend\n\n\ndefine addr-of-rip\n  set $rptr = ((unsigned long long (*)(void))__mcsema_debug_get_reg_state)()\n  set $__rax_ptr = $rptr + $__rax_offset\n  printf \"&rip = 0x%016lx\\n\", $__rax_ptr + 16 * 16\n  dont-repeat\nend\n\ndefine addr-of-rax\n  set $rptr = ((unsigned long long (*)(void))__mcsema_debug_get_reg_state)()\n  set $__rax_ptr = $rptr + $__rax_offset\n  printf \"&rax = 0x%016lx\\n\", $__rax_ptr + 0 * 16\n  dont-repeat\nend\n\ndefine addr-of-rbx\n  set $rptr = ((unsigned long long (*)(void))__mcsema_debug_get_reg_state)()\n  set $__rax_ptr = $rptr + $__rax_offset\n  printf \"&rbx = 0x%016lx\\n\", $__rax_ptr + 1 * 16\n  dont-repeat\nend\n\ndefine addr-of-rcx\n  set $rptr = ((unsigned long long (*)(void))__mcsema_debug_get_reg_state)()\n  set $__rax_ptr = $rptr + $__rax_offset\n  printf \"&rcx = 0x%016lx\\n\", $__rax_ptr + 2 * 16\n  dont-repeat\nend\n\ndefine addr-of-rdx\n  set $rptr = ((unsigned long long (*)(void))__mcsema_debug_get_reg_state)()\n  set $__rax_ptr = $rptr + $__rax_offset\n  printf \"&rdx = 0x%016lx\\n\", $__rax_ptr + 3 * 16\n  dont-repeat\nend\n\ndefine addr-of-rsi\n  set $rptr = ((unsigned long long (*)(void))__mcsema_debug_get_reg_state)()\n  set $__rax_ptr = $rptr + $__rax_offset\n  printf \"&rsi = 0x%016lx\\n\", $__rax_ptr + 4 * 16\n  dont-repeat\nend\n\ndefine addr-of-rdi\n  set $rptr = ((unsigned long long (*)(void))__mcsema_debug_get_reg_state)()\n  set $__rax_ptr = $rptr + $__rax_offset\n  printf \"&rdi = 0x%016lx\\n\", $__rax_ptr + 5 * 16\n  dont-repeat\nend\n\ndefine addr-of-rsp\n  set $rptr = ((unsigned long long (*)(void))__mcsema_debug_get_reg_state)()\n  set $__rax_ptr = $rptr + $__rax_offset\n  printf \"&rsp = 0x%016lx\\n\", $__rax_ptr + 6 * 16\n  dont-repeat\nend\n\ndefine addr-of-rbp\n  set $rptr = ((unsigned long long (*)(void))__mcsema_debug_get_reg_state)()\n  set $__rax_ptr = $rptr + $__rax_offset\n  printf \"&rbp = 0x%016lx\\n\", $__rax_ptr + 7 * 16\n  dont-repeat\nend\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.1513671875,
          "content": "# Copyright (c) 2017 Trail of Bits, Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n#==============================================================================#\n# This file specifies intentionally untracked files that git should ignore.\n# See: http://www.kernel.org/pub/software/scm/git/docs/gitignore.html\n#\n# This file is intentionally different from the output of `git svn show-ignore`,\n# as most of those are useless.\n#==============================================================================#\n\n#==============================================================================#\n# File extensions to be ignored anywhere in the tree.\n#==============================================================================#\n# Temp files created by most text editors.\n*~\n# Byte compiled python modules.\n*.pyc\n# vim swap files\n.*.swp\n# Object files\n*.o\n*.so\n\ntools/regtrace/obj-ia32/*\ntools/regtrace/obj-intel64/*\n\n*.idb\n*.id0\n*.id1\n*.id2\n*.log\n*.nam\n*.til\n\nthird_party/*\ngenerated/*\ncxxcommon\ncxx-common\n\ntools/build/*\ntools/dist/*\ntools/mcsema_disass.egg-info/*\ntools/mcsema_disass/ida/CFG_pb2.py\ntools/mcsema_disass/binja/CFG_pb2.py\n\n#ignore test binaries, only keep CFGs in git\ntests/linux/x86/*.elf\ntests/linux/amd64/*.elf\n\n.DS_Store\n.project\n.cproject\n.settings\n.idea\n\n#==============================================================================#\n# Directories to ignore (do not add trailing '/'s, they skip symlinks).\n#==============================================================================#\nbuild\npackage\n*.deb\n*.rpm\n# Clang, which is tracked independently.\n\n# Ignore local binary ninja installations\nbinaryninja\n\n#ignore vscode dir\n.vscode\n\n#ignore generated version files\nVERSION\n\n"
        },
        {
          "name": ".remill_commit_id",
          "type": "blob",
          "size": 0.0400390625,
          "content": "90f9ccd2b589925f9ecd496fdf6bf312db19f0d0\n"
        },
        {
          "name": "ACKNOWLEDGEMENTS.md",
          "type": "blob",
          "size": 1.1083984375,
          "content": "# Acknowledgements\n\n## Individuals\n\nThe following individuals have graciously contributed their time to improving\nMcSema:\n\n  - [Akshay Kumar](https://github.com/kumarak)\n  - [Alessandro Gario](https://github.com/alessandrogario)\n  - [Andrew Ruef](https://github.com/awruef)\n  - [Artem Dinaburg](https://github.com/artemdinaburg)\n  - [Car Bauer](https://github.com/hugin)\n  - [Clayton M. Walker](https://github.com/Sineaggi)\n  - [Dan Guido](https://github.com/dguido)\n  - [Edward J. Schwartz](https://github.com/edmcman)\n  - [Federico Scrinzi](https://github.com/volpino)\n  - [Garret Reece](https://github.com/GarretReece)\n  - [Jay Little](https://github.com/computerality)\n  - [Kareem El-Faramawi](https://github.com/krx)\n  - [Peter Goodman](https://github.com/pgoodman)\n  - [Moshe Kaplan](https://github.com/moshekaplan)\n  - [Rafael Turner](https://github.com/turnersr)\n  - [Robin Eklind](https://github.com/mewmew)\n  - [Yu-Chen Chang](chang397@purdue.edu)\n\n## Organizations\n\nThe following organizations have supported the development of McSema:\n\n  - [DARPA](http://www.darpa.mil/)\n  - [Trail of Bits](https://github.com/trailofbits)\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 8.751953125,
          "content": "# Copyright (c) 2020 Trail of Bits, Inc.\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n# Find remill first because its config has useful dependency-finding info that\n# needs to be found before the CMake `project` declaration\nfind_package(remill COMPONENTS VCPKG_DEPS QUIET)\n\ninclude(cmake/vcpkg_helper.cmake)\n\nproject(mcsema C CXX ASM)\n\ninclude(GNUInstallDirs)\ncmake_minimum_required(VERSION 3.14)\n\n\ninclude(\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/settings.cmake\")\ninclude(\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/utils.cmake\")\ninclude(\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/BCCompiler.cmake\")\ninclude(\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/ccache.cmake\")\n\nconfigureCcache()\nFindAndSelectClangCompiler()\n\nset(MCSEMA_SOURCE_DIR \"${PROJECT_SOURCE_DIR}\")\n\noption(MCSEMA_ENABLE_RUNTIME \"Should runtimes for re-compilation of bitcode be produced?\" ON)\n\nfind_package(Python3 QUIET)\nif(Python3_FOUND)\n  option(MCSEMA_INSTALL_PYTHON3_LIBS \"Install Python 3 libraries\" ON)\nelse()\n  option(MCSEMA_INSTALL_PYTHON3_LIBS \"Install Python 3 libraries\")\nendif()\n\n# warnings and compiler settings\nif(NOT DEFINED WIN32)\n  set(PROJECT_CXXFLAGS\n    ${GLOBAL_CXXFLAGS}\n    -Wconversion\n    -pedantic\n    -Wno-unreachable-code-return\n  )\nendif()\n\n#\n# libraries\n#\n\nfind_package(remill CONFIG REQUIRED)\nlist(APPEND PROJECT_LIBRARIES remill_settings remill)\nget_target_property(REMILL_INCLUDE_LOCATION remill_settings INTERFACE_INCLUDE_DIRECTORIES)\n\n# protobuf\n# Compatibility since we use older protobuf CMake functions\nset(protobuf_MODULE_COMPATIBLE ON CACHE BOOL \"\" FORCE)\nfind_package(Protobuf REQUIRED)\nlist(APPEND PROJECT_LIBRARIES ${Protobuf_LIBRARIES})\nlist(APPEND PROJECT_INCLUDEDIRECTORIES ${Protobuf_INCLUDE_DIR})\nlist(APPEND PROJECT_DEFINITIONS \"GOOGLE_PROTOBUF_NO_RTTI\")\n\n#\n# protobuf file generation\n#\n\n# this function can't be told where to store the output files! we have to add the whole binary directory\n# to the include directories (or change it and lose compatibility with the system libraries)\nprotobuf_generate_cpp(PROJECT_PROTOBUFSOURCEFILES\n  PROJECT_PROTOBUFHEADERFILES \"${CMAKE_CURRENT_SOURCE_DIR}/mcsema/CFG/CFG.proto\"\n)\n\nlist(APPEND PROJECT_INCLUDEDIRECTORIES ${CMAKE_CURRENT_BINARY_DIR})\n\nprotobuf_generate_python(PROJECT_PROTOBUFPYTHONMODULE\n  \"${CMAKE_CURRENT_SOURCE_DIR}/mcsema/CFG/CFG.proto\"\n)\n\nadd_custom_target(protobuf_python_module_ida\n  DEPENDS ${PROJECT_PROTOBUFPYTHONMODULE}\n)\n\n# disable -Werror on these file since they have been generated\nset_source_files_properties(${PROJECT_PROTOBUFSOURCEFILES} PROPERTIES\n  COMPILE_FLAGS \"-Wno-sign-conversion -Wno-shorten-64-to-32 -Wno-conversion\"\n)\n\nset_source_files_properties(${PROJECT_PROTOBUFHEADERFILES} PROPERTIES\n  COMPILE_FLAGS \"-Wno-sign-conversion -Wno-shorten-64-to-32 -Wno-conversion\"\n)\n\n#\n# target settings\n#\n\nset(MCSEMA_LIFT mcsema-lift-${REMILL_LLVM_VERSION})\n\n# for version information\nadd_subdirectory(mcsema/Version)\n\nadd_executable(${MCSEMA_LIFT}\n  ${PROJECT_PROTOBUFSOURCEFILES}\n\n  mcsema/Arch/Arch.cpp\n\n  mcsema/CFG/CFG.cpp\n\n  mcsema/BC/Callback.cpp\n  mcsema/BC/External.cpp\n  mcsema/BC/Function.cpp\n  mcsema/BC/Instruction.cpp\n  mcsema/BC/Legacy.cpp\n  mcsema/BC/Lift.cpp\n  mcsema/BC/Optimize.cpp\n  mcsema/BC/Segment.cpp\n  mcsema/BC/Util.cpp\n\n  tools/mcsema_lift/Lift.cpp\n)\n\n\n# Copy mcsema-disass in\nadd_custom_command(\n  TARGET protobuf_python_module_ida POST_BUILD\n  DEPENDS {PROJECT_PROTOBUFPYTHONMODULE}\n  COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_PROTOBUFPYTHONMODULE} ${CMAKE_CURRENT_SOURCE_DIR}/tools/mcsema_disass/ida7\n)\n\n# this is needed for the #include directives with absolutes paths to work correctly; it must\n# also be set to PUBLIC since mcsema-lift includes some files directly\nlist(APPEND PROJECT_INCLUDEDIRECTORIES ${CMAKE_CURRENT_SOURCE_DIR})\n\nadd_dependencies(${MCSEMA_LIFT}\n  protobuf_python_module_ida)\n\n#\n# libraries\n#\n\n# anvill\nfind_package(anvill CONFIG REQUIRED)\nlist(APPEND PROJECT_LIBRARIES anvill)\n\n# mcsema-disass\n\nset(MCSEMA_PYTHON_SOURCES\n    tools/setup.py\n    tools/mcsema_disass/__init__.py\n    tools/mcsema_disass/__main__.py\n    tools/mcsema_disass/ida7/__init__.py\n    tools/mcsema_disass/ida7/anvill_compat.py\n    tools/mcsema_disass/ida7/arm_util.py\n    tools/mcsema_disass/ida7/CFG_pb2.py\n    tools/mcsema_disass/ida7/disass.py\n    tools/mcsema_disass/ida7/exception.py\n    tools/mcsema_disass/ida7/flow.py\n    tools/mcsema_disass/ida7/get_cfg.py\n    tools/mcsema_disass/ida7/refs.py\n    tools/mcsema_disass/ida7/segment.py\n    tools/mcsema_disass/ida7/table.py\n    tools/mcsema_disass/ida7/util.py\n    tools/mcsema_disass/ida7/x86_util.py\n)\n\nif(MCSEMA_INSTALL_PYTHON3_LIBS)\n  add_custom_target(build_mcsema_disass_python3\n    DEPENDS ${MCSEMA_PYTHON_SOURCES})\n\n  add_custom_command(\n      TARGET build_mcsema_disass_python3 POST_BUILD\n      COMMAND which python3 && python3 setup.py build --force\n      COMMENT \"Building McSema Python 3 mcsema-disass\"\n      WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/tools\")\n\n  add_dependencies(${MCSEMA_LIFT}\n    build_mcsema_disass_python3)\n\n  add_dependencies(build_mcsema_disass_python3\n    protobuf_python_module_ida)\nendif()\n\n#\n# target settings\n#\n\ntarget_link_libraries(${MCSEMA_LIFT} PRIVATE ${PROJECT_LIBRARIES} McSemaVersion)\ntarget_include_directories(${MCSEMA_LIFT} SYSTEM PUBLIC ${PROJECT_INCLUDEDIRECTORIES})\ntarget_compile_definitions(${MCSEMA_LIFT} PUBLIC ${PROJECT_DEFINITIONS})\ntarget_compile_options(${MCSEMA_LIFT} PRIVATE ${PROJECT_CXXFLAGS})\n\nif(\"${CMAKE_HOST_SYSTEM_PROCESSOR}\" STREQUAL \"x86_64\" AND MCSEMA_ENABLE_RUNTIME)\n  add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/mcsema/Arch/X86/Runtime)\nendif()\n\n#TODO(artem): this may need some logic to select only ABIs compatible with current os/arch\n#TODO(kumarak): Disable the ABI libraries build till we don't have script to automate the generation of `ABI_libc.h`. Use pre-build library to test the --abi_libraries flag\nfunction(GetABILibraryList)\n  file(GLOB abi_library_list RELATIVE \"${CMAKE_CURRENT_SOURCE_DIR}/mcsema/OS\" \"${CMAKE_CURRENT_SOURCE_DIR}/mcsema/OS/*\")\n  set(GetABILibraryList_Output ${abi_library_list} PARENT_SCOPE)\nendfunction()\n\nif(NOT MCSEMA_ABI_LIBRARY_LIST_INITIALIZED)\n  GetABILibraryList()\n  set(MCSEMA_DISABLED_ABI_LIBRARIES ${GetABILibraryList_Output} CACHE\n    STRING \"A semicolon-separated list of disabled ABI libraries\"\n  )\n\n  set(MCSEMA_ABI_LIBRARY_LIST_INITIALIZED ON CACHE INTERNAL\n    \"Whether the abi library list has been initialized or not\"\n  )\nendif()\n\nmessage(STATUS \"Disabled ABI libraries: ${MCSEMA_DISABLED_ABI_LIBRARIES}\")\nmessage(STATUS \"You can change this setting with -DMCSEMA_DISABLED_ABI_LIBRARIES:STRING=\\\"Name1;Name2\\\"\")\n\nGetABILibraryList()\nforeach(abi_library_name ${GetABILibraryList_Output})\n  set(abi_library_path \"mcsema/OS/${abi_library_name}\")\n\n  list(FIND MCSEMA_DISABLED_ABI_LIBRARIES \"${abi_library_name}\" abi_lib_index)\n  if(NOT ${abi_lib_index} EQUAL -1)\n    message(STATUS \"Skipping ABI library: ${abi_library_path}\") \n    continue()\n  endif()\n\n  message(STATUS \"Adding ABI library: ${abi_library_path}\")\n  add_subdirectory(\"${abi_library_path}\")\nendforeach()\n\nif(DEFINED WIN32)\n  set(install_folder \"${CMAKE_INSTALL_PREFIX}/mcsema\")\nelse()\n  set(install_folder \"${CMAKE_INSTALL_PREFIX}\")\nendif()\n\ninstall(\n  TARGETS ${MCSEMA_LIFT}\n  RUNTIME DESTINATION \"${install_folder}/bin\"\n  LIBRARY DESTINATION \"${install_folder}/lib\"\n)\n\n# target for dyninst frontend\nif (DEFINED BUILD_MCSEMA_DYNINST_DISASS)\n    if(${BUILD_MCSEMA_DYNINST_DISASS} EQUAL 1)\n        add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/tools/mcsema_disass/dyninst)\n    endif()\nendif()\n\nset(python_package_installer \"${CMAKE_CURRENT_SOURCE_DIR}/tools/setup_launcher\")\nif(DEFINED WIN32)\n  string(REPLACE \"/\" \"\\\\\" python_package_install_path \"${install_folder}\")\n  set(python_package_installer3 \"${python_package_installer}.bat\")\n  set(optional_interpreter \"cmd.exe /C\")\nelse()\n  set(python_package_install_path \"${install_folder}\")\n  set(python_package_installer3 \"${python_package_installer}_py3.sh\")\nendif()\n\nif(MCSEMA_INSTALL_PYTHON3_LIBS)\n  install(CODE\n    \"execute_process(COMMAND ${optional_interpreter} \\\"${python_package_installer3}\\\" \\\"${python_package_install_path}\\\"\\nWORKING_DIRECTORY \\\"${PROJECT_SOURCE_DIR}/tools\\\"\\nRESULT_VARIABLE exit_code3)\\n   if(NOT exit_code3 EQUAL 0)\\n       message(FATAL_ERROR \\\"Failed to install the Python 3 package\\\")\\n     endif()\")\nendif()\n\nadd_subdirectory(examples)\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.5986328125,
          "content": "# Contributing to McSema\n\nCreating an executable lifter like McSema is no easy task. Even after the initial design is complete, there is still a huge linear effort to implement instruction semantics for every instruction. \"Semantics\" are a C++ description of what the microcode is doing for a given native-code instruction: as each instruction is fed to the lifter, it translates it to LLVM bitcode using the appropriate semantic function.\n\nThe Intel x86-64 architecture alone has around 1,000 instruction mnemonics, most of which have multiple operand types and operand widths. We try to use as much [metaprogramming](https://en.wikipedia.org/wiki/Template_(C%2B%2B)) as possible to reduce the amount of work required to support new instructions, but there is still a lot of work to do. Contributions are greatly appreciated!\n\n## Get in Touch\n\nWe do our best to respond to McSema users and potential contributors in our Slack instance, [Empire Hacking](https://empirehacking.slack.com/). Stop into `#binary-lifting` and say hello.\n\n## Taking on a Task\n\nWe have many issues already defined. Currently, the majority of them have to do with instruction support. Adding support for a new instruction is a great place to begin if you are a new contributor, to get familiar with the McSema codebase.\n\nBefore you start, it would be best if you communicate that you are working on an issue, and if there is not already an issue for what you want to work on, to file an issue first. We use GitHub Issues to track the ongoing progress on the project, deconflict what everyone is doing, and record our accomplishments.\n\n**Note:** If you find a **Closed** issue that seems like it is the same thing that you're experiencing, open a new issue and include a link to the original issue in the body of your new one.\n\nTo get started, use git to clone the `remill` repo, and start a new branch that you name according to the issue you are working on. If you are working on \"Issue #1234: Missing FPU flag on ARM\" then name your branch `issue_1234_missing_fpu_flag_on_arm`.\n\n## Adding a New Instruction\n\nTo add support for lifting a new instruction, you will be extending the `remill` library. That is where the instruction semantics are implemented. We have created a whole guide to adding an instruction, which [you can find here](https://github.com/lifting-bits/remill/blob/master/docs/ADD_AN_INSTRUCTION.md).\n\n## Creating Your GitHub Pull Request\n\nIf you submit a pull request we will do our best to review it and suggest changes in a timely manner. It helps if you constrain your pull request to just one issue fix or one enhancement. Pull requests that change tens of files and make thousands of lines of diff are much harder to approve and merge.\n\nWe have GitHub set up to run Travis continuous integration tests. Watch your pull request to see if all of the tests are passing. We will request that all tests pass before we review or merge your changes.\n\n### Coding Style\n\nBefore you create your pull request, we ask that you conform your code to our preferred style, by running `clang-format` on your staged source files before you `git commit`.\n\n### Git Commit Messages\n\n* Use the present tense (\"Add feature\" not \"Added feature\")\n* Use the imperative mood (\"Move cursor to...\" not \"Moves cursor to...\")\n* Limit the first line to 72 characters or less\n* Reference issues and pull requests liberally after the first line\n\n### Documentation Styleguide\n\n* Use [Markdown](https://daringfireball.net/projects/markdown).\n* Consider using spellcheck and a Markdown linter, because you'd be surprised what you miss.\n* In documentation, the preferred spelling is *McSema*, not *mcsema* or *Mcsema*.\n\n## Advice and Guidance for New Contributors\n\nPlease take a look at our McSema documentation! We try to keep it updated with\n[debugging tips](https://github.com/lifting-bits/mcsema/blob/master/docs/DebuggingTips.md), [common errors you might encounter](https://github.com/lifting-bits/mcsema/blob/master/docs/CommonErrors.md), and [how to get acquainted with the codebase](https://github.com/lifting-bits/mcsema/blob/master/docs/NavigatingTheCode.md).\n\n## Useful External Links\n\n* [Intel architecture software developer manuals](http://www.intel.com/sdm)\n* [Intel XED](https://software.intel.com/sites/landingpage/xed/ref-manual/html/index.html)\n* [ARM AARCH64 specifications](https://developer.arm.com/products/architecture/a-profile/docs)\n* [ARM AARCH64 specs in HTML (unofficial)](https://meriac.github.io/A64_v83A_ISA/)\n* [Intel Intrinsics Guide](https://software.intel.com/sites/landingpage/IntrinsicsGuide/)\n* [Setting up an ARM64 test environment](https://gist.github.com/george-hawkins/16ee37063213f348a17717a7007d2c79)\n\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 4.15625,
          "content": "ARG LLVM_VERSION=11\nARG ARCH=amd64\nARG UBUNTU_VERSION=20.04\nARG DISTRO_BASE=ubuntu${UBUNTU_VERSION}\nARG BUILD_BASE=ubuntu:${UBUNTU_VERSION}\nARG LIBRARIES=/opt/trailofbits\n\n# Using this file:\n# 1. Clone the mcsema repo https://github.com/lifting-bits/mcsema\n# 2. docker build -t=mcsema .\n# To run the lifter\n# 3. docker run --rm -it --ipc=host -v \"${PWD}\":/home/user/local mcsema\n# To run the disassembler\n# 4. docker run --rm --entrypoint=mcsema-disass -it --ipc=host -v \"${PWD}\":/home/user/local mcsema\n\n# Run-time dependencies go here\nFROM ${BUILD_BASE} as base\nARG UBUNTU_VERSION\nARG LIBRARIES\nRUN apt-get update && \\\n    apt-get install -qqy --no-install-recommends python3 python3-pip python3-setuptools python3-six python3.8 zlib1g curl ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\n\n\n# Build-time dependencies go here\nFROM trailofbits/cxx-common-vcpkg-builder-ubuntu:${UBUNTU_VERSION} as deps\nARG UBUNTU_VERSION\nARG ARCH\nARG LLVM_VERSION\nARG LIBRARIES\nRUN apt-get update && \\\n    apt-get install -qqy python3 python3-pip libc6-dev wget liblzma-dev zlib1g-dev curl git build-essential ninja-build libselinux1-dev libbsd-dev ccache pixz xz-utils make rpm && \\\n    if [ \"$(uname -m)\" = \"x86_64\" ]; then dpkg --add-architecture i386 && apt-get update && apt-get install -qqy gcc-multilib g++-multilib zip zlib1g-dev:i386; fi && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    pip3 install ccsyspath\n\n# Build dependencies\nRUN git clone --branch master https://github.com/lifting-bits/remill.git && \\\n    cd remill && git checkout -b release_710013a 710013a && \\\n    ./scripts/build.sh --llvm-version ${LLVM_VERSION} --prefix ${LIBRARIES} --download-dir /tmp\n\n# Make this a separate RUN because the build script above downloads a lot\nRUN cd remill && \\\n    cmake --build remill-build --target install -- -j \"$(nproc)\" && \\\n    cd ../ && \\\n    git clone --branch master https://github.com/lifting-bits/anvill.git && \\\n    ( cd anvill && git checkout -b release_bc3183b bc3183b ) && \\\n    mkdir -p anvill/build && cd anvill/build && \\\n    cmake -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_INSTALL_PREFIX=${LIBRARIES} -Dremill_DIR=${LIBRARIES}/lib/cmake/remill -DVCPKG_ROOT=/tmp/vcpkg_ubuntu-${UBUNTU_VERSION}_llvm-${LLVM_VERSION}_${ARCH} .. && \\\n    cmake --build . --target install -- -j \"$(nproc)\"\n\nWORKDIR /mcsema\n\n# Source code build\nFROM deps as build\nARG UBUNTU_VERSION\nARG ARCH\nARG LLVM_VERSION\nARG LIBRARIES\n\nCOPY . ./\n\n# Need to move python version-specific installation directory to general\n# version directory since we don't know exactly which Python3 version Ubutnu\n# ships with to set the environment variable PYTHONPATH in dist image\nRUN mkdir -p ./build && cd ./build && \\\n    cmake -G Ninja -Danvill_DIR=${LIBRARIES}/lib/cmake/anvill -Dremill_DIR=${LIBRARIES}/lib/cmake/remill -DMCSEMA_DISABLED_ABI_LIBRARIES:STRING=\"\" -DCMAKE_VERBOSE_MAKEFILE=True -DVCPKG_ROOT=/tmp/vcpkg_ubuntu-${UBUNTU_VERSION}_llvm-${LLVM_VERSION}_${ARCH} -DCMAKE_INSTALL_PREFIX=${LIBRARIES} .. && \\\n    cmake --build . --target install\nRUN mv ${LIBRARIES}/lib/python3.* ${LIBRARIES}/lib/python3\n\n# WORKDIR tests/test_suite_generator\n# RUN mkdir -p build && \\\n#     cd build && \\\n#     cmake -DMCSEMALIFT_PATH=/opt/trailofbits/bin \\\n#           -DMCSEMA_PREBUILT_CFG_PATH=\"$(pwd)/../generated/prebuilt_cfg/\" \\\n#       -DMCSEMADISASS_PATH=/opt/trailofbits/bin \\\n#       .. && \\\n#     cmake --build . --target install\n#\n# RUN cd test_suite && \\\n#     PATH=\"/opt/trailofbits/bin:${PATH}\" python3 start.py\n\nFROM base as dist\nARG LIBRARIES\nARG LLVM_VERSION\n\n# Allow for mounting of local folder\nRUN mkdir -p /mcsema/local\n\nCOPY --from=build ${LIBRARIES} ${LIBRARIES}\nCOPY scripts/docker-lifter-entrypoint.sh ${LIBRARIES}\nENV LLVM_VERSION=llvm${LLVM_VERSION} \\\n    PATH=\"${LIBRARIES}/bin:${PATH}\" \\\n    PYTHONPATH=\"${LIBRARIES}/lib/python3/site-packages\"\nENTRYPOINT [\"/opt/trailofbits/docker-lifter-entrypoint.sh\"]\n\n################################\n# Left to reader to install    #\n#  their disassembler (IDA/BN) #\n################################\n# But, as an example:\n# ADD local-relative/path/to/binaryninja/ /root/binaryninja/\n# ADD local-relative/path/to/.binaryninja/ /root/.binaryninja/ # <- Make sure there's no `lastrun` file\n# RUN /root/binaryninja/scripts/linux-setup.sh\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 33.7138671875,
          "content": "                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published\n    by the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n<https://www.gnu.org/licenses/>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 21.53125,
          "content": "\n\n# McSema [![Slack Chat](http://empireslacking.herokuapp.com/badge.svg)](https://empireslacking.herokuapp.com/)\n<p align=\"center\">\n     <img src=\"docs/images/mcsema_logo.png\" />\n</p>\n\nMcSema is an executable lifter. It translates (\"lifts\") executable binaries from native machine code to LLVM bitcode. LLVM bitcode is an [intermediate representation](https://en.wikipedia.org/wiki/Intermediate_representation) form of a program that was originally created for the [retargetable LLVM compiler](https://llvm.org), but which is also very useful for performing program analysis methods that would not be possible to perform on an executable binary directly.\n\nMcSema enables analysts to find and retroactively harden binary programs against security bugs, independently validate vendor source code, and generate application tests with high code coverage. McSema isn’t just for static analysis. The lifted LLVM bitcode can also be [fuzzed with libFuzzer](https://github.com/lifting-bits/mcsema/blob/master/docs/UsingLibFuzzer.md), an LLVM-based instrumented fuzzer that would otherwise require the target source code. The lifted bitcode can even be [compiled](https://github.com/lifting-bits/mcsema/blob/master/docs/UsingLibFuzzer.md) back into a [runnable program](https://github.com/lifting-bits/mcsema/blob/master/docs/McSemaWalkthrough.md)! This is a procedure known as static binary rewriting, binary translation, or binary recompilation.\n\nMcSema supports lifting both Linux (ELF) and Windows (PE) executables, and understands most x86 and amd64 instructions, including integer, X87, MMX, SSE and AVX operations. AARCH64 (ARMv8) instruction support is in active development.\n\nUsing McSema is a two-step process: control flow recovery, and instruction translation. Control flow recovery is performed using the `mcsema-disass` tool, which relies on IDA Pro to disassemble a binary file and produce a control flow graph. Instruction translation is then performed using the `mcsema-lift` tool, which converts the control flow graph into LLVM bitcode. Under the hood, the instruction translation capability of `mcsema-lift` is implemented in the [`remill` library](https://github.com/lifting-bits/remill). The development of `remill` was a result of refactoring and improvements to McSema, and was first introduced with McSema version 2.0.0. Read more about `remill` [here](https://github.com/lifting-bits/remill).\n\nMcSema and `remill` were developed and are maintained by Trail of Bits, funded by and used in research for DARPA and the US Department of Defense.\n\n## Build status\n\n|       | master                                   |\n| ----- | ---------------------------------------- |\n| Linux | [![Build Status](https://github.com/lifting-bits/mcsema/workflows/CI/badge.svg)](https://github.com/lifting-bits/mcsema/actions?query=workflow%3ACI) |\n\n## Features\n\n* Lifts 32- and 64-bit Linux ELF and Windows PE binaries to bitcode, including executables and shared libraries for each platform.\n* Supports a large subset of x86 and x86-64 instructions, including most integer, X87, MMX, SSE, and AVX operations.\n* Supports a large subset of AArch64, SPARCv8+ (SPARC32), and SPARCv9 (SPARC64) instuctions.\n* McSema runs on Windows and Linux and has been tested on Windows 7, 10, Ubuntu (14.04, 16.04, 18.04), and openSUSE.\n* McSema can cross-lift: it can translate Linux binaries on Windows, or Windows binaries on Linux.\n* Output bitcode is compatible with the LLVM toolchain (versions 3.5 and up).\n* Translated bitcode can be analyzed or [recompiled as a new, working executable](docs/McSemaWalkthrough.md) with functionality identical to the original.\n\n## Use-cases\n\nWhy would anyone translate binaries *back* to bitcode?\n\n* **Binary Patching And Modification**. Lifting to LLVM IR lets you cleanly modify the target program. You can run obfuscation or hardening passes, add features, remove features, rewrite features, or even fix that pesky typo, grammatical error, or insane logic. When done, your new creation can be recompiled to a new binary sporting all those changes. In the [Cyber Grand Challenge](https://blog.trailofbits.com/2015/07/15/how-we-fared-in-the-cyber-grand-challenge/), we were able to use McSema to translate challenge binaries to bitcode, insert memory safety checks, and then re-emit working binaries.\n\n* **Symbolic Execution with KLEE**. [KLEE](https://klee.github.io/) operates on LLVM bitcode, usually generated by providing source to the LLVM toolchain. McSema can lift a binary to LLVM bitcode, [permitting KLEE to operate on previously unavailable targets](https://blog.trailofbits.com/2014/12/04/close-encounters-with-symbolic-execution-part-2/). See our [walkthrough](examples/Maze/README.md) showing how to run KLEE on a symbolic maze.\n\n* **Re-use existing LLVM-based tools**. KLEE is not the only tool that becomes available for use on bitcode. It is possible to run LLVM optimization passes and other LLVM-based tools like [libFuzzer](http://llvm.org/docs/LibFuzzer.html) on [lifted bitcode](docs/UsingLibFuzzer.md).\n\n* **Analyze the binary rather than the source**. Source level analysis is great but not always possible (e.g. you don't have the source) and, even when it is available, it lacks compiler transformations, re-ordering, and optimizations. Analyzing the actual binary guarantees that you're analyzing the true executed behavior.\n\n* **Write one set of analysis tools**. Lifting to LLVM IR means that one set of analysis tools can work on both the source and the binary. Maintaining a single set of tools saves development time and effort, and allows for a single set of better tools.\n\n## Comparison with other machine code to LLVM bitcode lifters\n|   | McSema | [dagger](https://github.com/repzret/dagger) | [llvm-mctoll](https://github.com/Microsoft/llvm-mctoll) | [retdec](https://github.com/avast-tl/retdec) | [reopt](https://github.com/GaloisInc/reopt) | [rev.ng](https://github.com/revng/revamb) | [bin2llvm](https://github.com/cojocar/bin2llvm) | [fcd](https://github.com/zneak/fcd) | [RevGen](https://github.com/S2E/tools/tree/master/tools) | [Fracture](https://github.com/draperlaboratory/fracture) | [libbeauty](https://github.com/pgoodman/libbeauty) |\n|  ------ | ------ | ------ | ------ | ------ | ------ | ------ | ------ | ------ | ------ | ------ | ------ |\n|  Actively maintained? | Yes | No | Yes | Yes | Yes | No | Maybe | Maybe | Maybe | No | Yes |\n|  Commercial support available? | Yes | No | No | No | Maybe | No | No | No | No | Maybe | No |\n|  LLVM versions | 9 - 11 | 5 | current | 4.0 | 3.8 | 3.8 | 3.2 | 4 | 3.9 | 3.4 | 6 |\n|  Builds with CI? | Yes | No | No | Yes | No | No | Yes | Maybe | Maybe | No | No |\n|  32-bit architectures | x86, SPARC32 | x86 | ARM | x86, ARM, MIPS, PIC32, PowerPC |  | ARM, MIPS | S2E | S2E | S2E | ARM, x86 |  |\n|  64-bit architectures | x86-64, AArch64, SPARC64 | x86-64, [AArch64](https://github.com/IAIK/ios-analysis-dagger/)) | x86-64 | x86-64, arm64 & more | x86-64 | x86-64 |  | S2E | S2E | PowerPC | x86-64 |\n|  Control-flow recovery | IDA Pro | Ad-hoc | Ad-hoc | Ad-hoc | Ad-hoc | Ad-hoc | Ad-hoc | Ad-hoc | McSema | Ad-hoc | Ad-hoc |\n|  File formats | ELF, PE | ELF, Mach-O |  | ELF, PE, Mach-O, COFF, AR, Intel HEX, Raw | ELF | ELF | ELF |  | ELF, PE | ELF, Mach-O (maybe) | ELF |\n|  Bitcode is executable? | Yes | Yes | Yes | Yes | Yes | Yes | No | No | CGC | No | No |\n|  C++ exceptions suport? | Yes | No | No | No | No | Indirectly | No | No | No | No | Maybe |\n|  Lifts stack variables? | Yes | No | Maybe | Yes | No | No | No | Yes | No | No | Maybe |\n|  Lifts global variables? | Yes | Maybe | Yes | Yes | No | Maybe | No | No | No | Yes | Maybe |\n|  Has a test suite? | Yes | No | Yes | Yes | Yes | Yes | Yes | Yes | No | Yes | No |\n\n**Note:** We label some architectures as \"S2E\" to mean any architecture supported by the S2E system. A system using \"McSema\" for control-flow recovery (e.g. RevGen) uses McSema's CFG.proto format for recovering control-flow. In the case of RevGen, only bitcode produced from DARPA Cyber Grand Challenge (CGC) binaries is executable.\n\n## Dependencies\n\n| Name | Version | \n| ---- | ------- |\n| [Git](https://git-scm.com/) | Latest |\n| [CMake](https://cmake.org/) | 3.14+ |\n| [Remill](https://github.com/lifting-bits/remill) | 710013a |\n| [Anvill](https://github.com/lifting-bits/anvill) | bc3183b |\n| [Python](https://www.python.org/) | 3.8 |\n| [Python Package Index](https://pypi.python.org/pypi) | Latest |\n| [python-protobuf](https://pypi.python.org/pypi/protobuf) | 3.2.0 |\n| [python-clang](https://pypi.org/project/clang/) | 3.5.0 |\n| [ccsyspath](https://pypi.org/project/ccsyspath/) | 1.1.0 |\n| [IDA Pro](https://www.hex-rays.com/products/ida) | 7.5+ |\n| macOS | Latest |\n| Ubuntu | 18.04, 20.04 |\n\n* DynInst support is optional if you use the experimental DynInst disassembler. Note: We do not provide support for the DynInst disassembler.\n\n## Getting and building the code\n\n### Docker\n\n#### Step 1: Clone the repository\n\n```bash\ngit clone https://github.com/lifting-bits/mcsema\ncd mcsema\n```\n\n#### Step 2: Add your disassembler to the Dockerfile\n\nCurrently IDA is the only supported frontend for control-flow recovery, it's left as an exercise to the reader to install your disassembler of choice. Experimental support for DynInst is available but may be buggy and sometimes get out of date, as we do not officially support it. DynInst support is provided as an exemplar of how to make a third-party disassembler.\n\n#### Step 3: Build & Run Dockerfile\n\nThis will build the container for you and run it with your local directory mounted into the container (at `/mcsema/local`) such that your work in the container is saved locally:\n\n```sh\n# Build McSema container\nARCH=amd64; UBUNTU=18.04; LLVM=9; docker build . \\\n  -t mcsema:llvm${LLVM}-ubuntu${UBUNTU}-${ARCH} \\\n  -f Dockerfile \\\n  --build-arg UBUNTU_VERSION=${UBUNTU} \\\n  --build-arg LLVM_VERSION=${LLVM} \\\n  --build-arg ARCH=${ARCH}\n\n# Run McSema container lifter\ndocker run --rm -it --ipc=host -v \"$(pwd)\":/mcsema/local mcsema:llvm${LLVM}-ubuntu${UBUNTU}-${ARCH}\n\n# Run McSema container disassembler\ndocker run --rm -it --entrypoint=mcsema-disass --ipc=host -v \"$(pwd)\":/mcsema/local mcsema:llvm${LLVM}-ubuntu${UBUNTU}-${ARCH}\n```\n\n### Native Build\n\n#### Linux pre-requisites\n\nNative builds on Linux are supported for Ubuntu 18.04 and 20.04. We only support\nLTS Ubuntu releases.\n\n```shell\nsudo apt-get update\nsudo apt-get upgrade\n\nsudo apt-get install \\\n     git \\\n     curl \\\n     cmake \\\n     python3 python3-pip python3-virtualenv \\\n     wget \\\n     xz-utils pixz \\\n     clang \\\n     rpm \\\n     build-essential \\\n     gcc-multilib g++-multilib \\\n     libtinfo-dev \\\n     lsb-release \\\n     zip \\\n     zlib1g-dev \\\n     ccache\n```\n\n#### macOS pre-requisites\n\nDownload and install the [Homebrew](https://brew.sh) package manager.\n\nMake sure to download XCode from the App Store if you don't have it. After\ndownloading XCode, make sure to open it at least once, as it might install\nmore stuff.\n\n```bash\nbrew update\nxcode-select --install 2>&1 > /dev/null\nsudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\nbrew install coreutils ccache\npip3 install requests\n```\n\nDouble check that you have the correct Clang installed. You should see something like this:\n\n```bash\n% clang -v\nApple clang version 12.0.0 (clang-1200.0.32.21)\nTarget: x86_64-apple-darwin19.6.0\nThread model: posix\nInstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin\n```\n\n#### Step 1 (Optional): Create a virtualenv for your McSema installation\n\nUsing a [virtualenv](https://virtualenv.pypa.io/en/stable/) ensures that your McSema installation does not interfere with other software packages. This setup is especially helpful if you are hacking on McSema and want to avoid clobbering a global, working version with development code.\n\n```shell\nmkdir mcsema-ve\nvirtualenv mcsema-ve\ncd mcsema-ve\nsource bin/activate\n```\n\n#### Step 2: Clone the repository and its dependencies\n```shell\ngit clone https://github.com/lifting-bits/remill.git\npushd .\ncd remill\n\n# For latest LLVM versions (>=12)\ngit checkout -b release_93aba7c 93aba7c\n\n# OR\n\n# For LLVM versions (<=11)\ngit checkout -b all_llvm 9006baf7db\n\n\npopd\n```\n\nAfter which;\n\n```shell\ngit clone --depth 1 --single-branch --branch master https://github.com/lifting-bits/mcsema.git\n\n# Get a compatible anvill version\ngit clone --branch master https://github.com/lifting-bits/anvill.git\n( cd anvill && git checkout -b release_bc3183b bc3183b )\n\nexport CC=\"$(which clang)\"\nexport CXX=\"$(which clang++)\"\n\n\n# Download cxx-common, build Remill. \n./remill/scripts/build.sh --llvm-version 11 --download-dir ./\npushd remill-build\nsudo cmake --build . --target install\npopd\n\n# Build and install Anvill\nmkdir anvill-build\npushd anvill-build\n# Set VCPKG_ROOT to whatever directory the remill script downloaded\ncmake -DVCPKG_ROOT=$(pwd)/../vcpkg_ubuntu-20.04_llvm-11_amd64 ../anvill\nsudo cmake --build . --target install\npopd\n\n# Build and install McSema\nmkdir mcsema-build\npushd mcsema-build\n# Set VCPKG_ROOT to whatever directory the remill script downloaded\ncmake -DVCPKG_ROOT=$(pwd)/../vcpkg_ubuntu-20.04_llvm-11_amd64 ../mcsema\nsudo cmake --build . --target install\n```\n\nOnce installed, you may use `mcsema-disass` for disassembling binaries, and `mcsema-lift-9.0` for lifting the disassembled binaries. If you specified `--llvm-version 9` to the `build.sh` script, then you would use `mcsema-lift-9.0`.\n\n#### Step 3: Verifying Your McSema Installation\n\nStep 2 specified `--llvm-version 9` to Remill's `build.sh` script. This means\nthat Remill, Anvill, and McSema have all been built against a copy of LLVM 9.\nTo enable you to use multiple LLVM versions simultaneously, we suffix our binaries\nwith the LLVM version. Thus, you may use `mcsema-lift-9.0` to lift to LLVM 9 bitcode.\n\nTry running `mcsema-lift-9.0 --version` to see if McSema has been installed.\n\n##### Run the integration tests\n\nIn order to verify that McSema works correctly as built, head on over to [the documentation on integration tests](tests/MakingTests.md). Check that you can run the tests and that they pass.\n\n### On Windows (Experimental, may not work)\n\n#### Step 1: Installing the toolchain\n**Visual Studio**\n1. Click on \"Tools for Visual Studio 2019\" and download the \"Build Tools for Visual Studio 2019\" installer from the [Visual Studio downloads page](https://visualstudio.microsoft.com/downloads/)\n2. Select \"MSVC v142 - VS 2019 C++ x64/x86 build tools\" and confirm the installation\n\n**LLVM**\n1. Get the LLVM 9 (x64) installer from the LLVM download page: http://releases.llvm.org\n2. Do **NOT** enable \"Add to PATH\"\n\n**Python**\n1. Get the latest Python 3 (X64) installer from the official download page: https://www.python.org/downloads/windows/\n2. Enable \"Add to PATH\"\n\n**CMake**\n1. Download the CMake (x64) installer from https://cmake.org/download\n2. Enable \"Add to PATH\"\n\n#### Step 2: Obtaining the source code\n```\ngit clone https://github.com/lifting-bits/remill.git --depth=1\ngit clone https://github.com/lifting-bits/mcsema.git --depth=1 remill/tools/mcsema\n```\n\nNote that for production usage you should always use a specific remill commit (`remill/tools/mcsema/.remill_commit_id`) when building McSema. At the time of writing, it is however best to use HEAD (or at least make sure that commit `e7795be` is present in the remill branch).\n\n```\ncd remill\ngit fetch --unshallow\ngit checkout -b production <commit>\n```\n\n#### Step 3: Enabling the LLVM toolchain for Visual Studio\n\nDownload the official extension from the market place: https://marketplace.visualstudio.com/items?itemName=LLVMExtensions.llvm-toolchain\n\n##### Automatic installation\n\nOnly works for the full Visual Studio IDE. Double clicking the extension should automatically install it.\n\n##### Manual installation\n\nThe extension is in fact a ZIP archive; extract it and copy the VCTargets folder to the right location.\n\n* Full Visual Studio: `C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\Common7\\IDE\\VC\\VCTargets`\n* Visual Studio Build Tools: `C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\MSBuild\\Microsoft\\VC\\v160`\n\n#### Step 4: Dependencies\n\nIts time to fetch library dependencies. You can either build them yourself using our [cxx-common](https://github.com/lifting-bits/cxx-common) dependency manager or download a pre-built package.\n\nThere are two versions of LLVM used by Remill and McSema. One version (currently 7.0.1) builds remill and McSema. Another version (currently 5.0.1) is used to build the translation semantics.\n\nOn Windows, only the LLVM 5.0.1 package is supported for building semantics. If you build it yourself, use the Visual Studio 2017 Win64 generator with the LLVM 5.0.1 toolchain. The cxx-common script will automatically take care of this requirement.\n\nBinaries (extract to C:\\Projects\\tob_libraries)\n* [LLVM 5](https://s3.amazonaws.com/cxx-common/libraries-llvm50-windows10-amd64.7z)\n\n#### Step 5: Building\nMake sure to always execute the `vcvars64.bat` script from the \"x64 Native Tools Command Prompt\": `C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Auxiliary\\Build\\vcvars64.bat`.\n\n```\nmkdir remill_build\ncd remill_build\n\ncmake -G \"Visual Studio 16 2019\" -T llvm -A x64 -DCMAKE_BUILD_TYPE=Release -DCXX_COMMON_REPOSITORY_ROOT=C:\\Projects\\tob_libraries -DCMAKE_INSTALL_PREFIX=C:\\ ..\\remill\ncmake --build . --config Release -- /maxcpucount:%NUMBER_OF_PROCESSORS%\n```\n\nIf you are using a recent CMake version (> 3.13) you can also use the newly introduced cross-platform `-j` parameter:\n\n```\ncmake --build . --config Release -j %NUMBER_OF_PROCESSORS%\n```\n\n#### Step 6: Installing\n```\ncmake --build . --config Release --target install\n```\n\nYou should now have the following directories: C:\\mcsema, C:\\remill.\n\n#### Step 7: Running McSema\n\n**Add the McSema python package to Python**\n\nMake extra sure it only contains ASCII characters with no newlines! The following command should work fine under cmd:\n\n```\necho|set /p=\"C:\\mcsema\\Lib\\site-packages\" > \"C:\\Python3<version>\\Lib\\site-packages\\mcsema.pth\"\n```\n\n**Install the libmagic DLL**\n\n```\npip install python-magic-bin\n```\n\n**Update the PATH (cmd)**\n\n```\nset PATH=%PATH%;C:\\remill\\bin;C:\\mcsema\\bin;C:\\mcsema\\Scripts\n```\n\n**Update the PATH (PowerShell)**\n\n```\n$env:PATH+=\"C:\\remill\\bin;C:\\mcsema\\bin;C:\\mcsema\\Scripts\"\n```\n\n## Additional Documentation\n\n* [McSema command line reference](docs/CommandLineReference.md)\n* [Common Errors](docs/CommonErrors.md) and [Debugging Tips](docs/DebuggingTips.md)\n* [How to add support for a new instruction](https://github.com/lifting-bits/remill/blob/master/docs/ADD_AN_INSTRUCTION.md)\n* [How to use McSema: A walkthrough](docs/McSemaWalkthrough.md)\n* [Life of an instruction](docs/LifeOfAnInstruction.md)\n* [Limitations](docs/Limitations.md)\n* [Navigating the source code](docs/NavigatingTheCode.md)\n* [Using McSema with libFuzzer](docs/UsingLibFuzzer.md)\n\n## Getting help\n\nIf you are experiencing problems with McSema or just want to learn more and contribute, join the `#binary-lifting` channel of the [Empire Hacking Slack](https://empireslacking.herokuapp.com/). Alternatively, you can join our mailing list at [mcsema-dev@googlegroups.com](https://groups.google.com/forum/?hl=en#!forum/mcsema-dev) or email us privately at mcsema@trailofbits.com.\n\n## FAQ\n\n### How do you pronounce McSema and where did the name come from\n\nThis is a hotly contested issue. We must explore the etymology of the name to find an answer. The \"Mc\" in McSema was originally a contraction of the words \"Machine Code,\" and the \"sema\" is short for \"semantics.\" At that time, McSema used LLVM's instruction decoder to take machine code bytes, and turn them into `llvm::MCInst` data structures. It is possible that \"MC\" in that case is pronounced em-see. Alas, even those who understand the origin of the name pronounce it as if it were related to America's favorite fast food joint.\n\n### Why do I need IDA Pro to use McSema\n\nIDA Pro is an excellent disassembler, and in our experience, it has been the most reliable disassembler to use in McSema. The way in which IDA Pro exposes information about cross-references closely matches how McSema stores that information in its CFG file, which is convenient. We also feature an experimental, not officially supported [DynInst disassembler frontend](tools/mcsema_disass/dyninst/README.md). This frontent exists mostly to support open-source uses cases, but is not actively maintained, and may be out of date. The Dyninst frontend is a good example of how to make a new frontend.\n\n### What is Remill, and why does McSema need it\n\n[Remill](https://github.com/lifting-bits/remill) is a library that McSema uses to lift individual machine code instructions to LLVM IR. You can think of McSema being to Remill as Clang is to LLVM. Remill's scope is small: it focuses on instruction semantics only, and it provides semantics for x86, x86-64, and AArch64 instruction semantics. McSema's scope is much bigger: it focuses on lifting entire programs. To do so, McSema must lift the individual instructions, but there's a lot more to lifting programs than just the instructions; there are code and data cross-references, segments, etc.\n\n### I'm a student and I'd like to contribute to McSema: how can I help\n\nWe would love to take you on as an intern to help improve McSema. We have several project ideas labelled [`intern project`](https://github.com/lifting-bits/mcsema/labels/intern%20project), as well as having smaller scale to-dos labelled under [`good first issue`](https://github.com/lifting-bits/mcsema/labels/good%20first%20issue) and [`help wanted`](https://github.com/lifting-bits/mcsema/labels/help%20wanted) on our issue tracker. You are not limited to those items: if you think of a great feature you want in McSema, let us know and we will sponsor it. Simply contact us on our [Slack channel](https://empireslacking.herokuapp.com/) or via mcsema@trailofbits.com and let us know what you'd want to work on and why.\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "generated",
          "type": "tree",
          "content": null
        },
        {
          "name": "mcsema",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}