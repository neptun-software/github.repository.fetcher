{
  "metadata": {
    "timestamp": 1736565567977,
    "page": 438,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "LibreOffice/core",
      "stars": 2868,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".buckconfig",
          "type": "blob",
          "size": 0.2177734375,
          "content": "[alias]\n  api = //:api\n  api_install = //solenv/maven:api_install\n  api_deploy = //solenv/maven:api_deploy\n\n[buildfile]\n  includes = //solenv/buck/build.defs\n\n[project]\n  ignore = .git,workdir,instdir\n\n[cache]\n  mode = dir\n"
        },
        {
          "name": ".buckversion",
          "type": "blob",
          "size": 0.0400390625,
          "content": "6659a474fb2ba6e921bb38c1b55d4c9ba6073cfa\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 1.576171875,
          "content": "AccessModifierOffset: -4\nConstructorInitializerIndentWidth: 4\nAlignEscapedNewlinesLeft: false\nAlignTrailingComments: false\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakTemplateDeclarations: false\nAlwaysBreakBeforeMultilineStrings: false\nBreakBeforeBinaryOperators: true\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: true\nBinPackParameters: true\nColumnLimit:     100\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nDerivePointerBinding: false\nExperimentalAutoDetectBinPacking: false\nIndentCaseLabels: true\nKeepEmptyLinesAtTheStartOfBlocks: false\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nFixNamespaceComments: false\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakBeforeFirstCallParameter: 19\nPenaltyBreakComment: 60\nPenaltyBreakString: 1000\nPenaltyBreakFirstLessLess: 120\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 60\nPointerBindsToType: true\nReflowComments: false\nSpacesBeforeTrailingComments: 1\nCpp11BracedListStyle: false\nStandard:        Cpp11\nIndentWidth:     4\nTabWidth:        8\nUseTab:          Never\nBreakBeforeBraces: Allman\nIndentFunctionDeclarationAfterType: false\nSpacesInParentheses: false\nSpacesInAngles:  false\nSpaceInEmptyParentheses: false\nSpacesInCStyleCastParentheses: false\nSpaceAfterControlStatementKeyword: true\nSpaceBeforeAssignmentOperators: true\nContinuationIndentWidth: 4\nSortIncludes: false\nSortUsingDeclarations: false\n# clang-format 8:\n#  StatementMacros: [SAL_WNODEPRECATED_DECLARATIONS_POP, SAL_WNODEPRECATED_DECLARATIONS_PUSH]\n"
        },
        {
          "name": ".configurations",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.4384765625,
          "content": "# EditorConfig: http://EditorConfig.org\n\n# top-most EditorConfig file\nroot = true\n\n# General settings\n[*]\nend_of_line = lf\ninsert_final_newline = true\ncharset = utf-8\ntrim_trailing_whitespace = true\n\n# Source code files\n[*.{c,cxx,cpp,h,hxx,hpp,java,m,mm,py,swift,xsl}]\nindent_style = space\nindent_size = 4\n\n# Makefiles\n[{Makefile,*.mk}]\nindent_style = tab\ntrim_trailing_whitespace = false\n\n# Patch files\n[*.patch.*]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 5.2998046875,
          "content": "# clang-format\n472d5cfb11bc68779f9e1754a22e4d93725ea255\na334f77792dfff92e3c97f7f61f59d01fc9338cf\n233c8aec16faf9302acb3625adcd1df026d59412\nf31b00b1a43f0d2fab2762ada230cd6dc267b6a4\n5ff0f83a3b5a323469bb410959b030de12b42505\nd487e1826bc177742aa8563f855c4b0bee49a705\n5946eedfb78e250a40f14ae1e5b709e827b2504c\nb536e10390c171e96b6477c04d66023a1da543c4\n78aa5db6999b8e8881f65ec10518110296840ff2\nfd6150915253e382a7e9f674fe23a72a9a801761\nd8efc393bff9c0ed38eac00f48ce1d525e1d08ce\n1647bfa019124aefd34d8ad231d19399e93a6096\n1dd4590f817cce0b9e973c4767551067067702b5\n17407f808ed0ca5d65a98da186f7e2ab60dc641b\nac4ea366ec040cdb68f93d42045cba5780852d9f\n8815acd18f8995cbbf45c2a70629379cb9bfbf15\n9eb929aa8cb3f5b0fee1264119a55cdd8cbe8f0e\n5ea91ed27342766f2b6103ddb64f07e35af54e50\ne539a492597c7312a8d0cccb4b386341bd4ec84a\n42cbd5aa43f52d4de489fe0828bce4c5a324f9a0\n4866a441cab472c1f44360abdc7074097aad1a26\n0631c5da4257a657f923663bda851cf8bb3a8507\n4e0be0c35024fc35d4815d2665e12f9ebf241025\n06b1e244ff9502664fe79dc27346e4fd9968afbc\n83f3706bf489a3ed37880353ca5ea90638c38fe7\n298284f4a6578aefc4268b7f4b5de6c2e4203465\n405809f566833315b624eee6cdb0cd86c56b65ef\n40431b12b86aa8ede3a6d065645781c8e7710570\ne1a42835d948b21f9d99d23feef5ae0f56ae3563\ne73819983c45188ca990ca2b37f9bcf31fe0a2c7\n9afa666120d8bb045f3569a77475a58c368c03a1\nb86ca947115f2ef61dd71c7a43e7a3ec1f1cf3b0\n4c1479d63972aaea0b1bfee1ffb56b530ca05655\n349c525fd30121ad2148f6061d155815b8c83303\n6dc2e26e0103137863f4e2d8c1f0c6511b164b66\n7da92c6fff9549ebbea5e527b72ffd89faa46f71\n261cd2301d0cb581de2238913bd99e2041ad6eda\n2242774bc8a35cda736d65d0f4b647cf394ca6ee\n11485a500196af7a2533787f4faf32e14693f480\ne190529f40988bbeb23b7b3abaeca6900f96213f\n35fa77d0137350e69b17418e2bc33f1fa0be2efb\n10b23330a9655658e6d7ef1d008a3302a15e9629\n79b6055acd1ea27a9f054e6980abbe2024cdc4a2\n315f270d2db7541e9400852b070afb30f371f644\n1e17165f6643afe583bb97a40fb25ecb7bab24d9\na9bce41c64bda648be2609a0dc4aea728fa8ec77\nc096ab87c8a11e8d75dc689ea7024288419cfd22\nb35232bdf56fbda34476cf537d53bbea31235a95\n58d98a08aee7bf027c109eeb94183d24351827fa\n01baeab99890e5650b3dabc15f8d900490a5a133\n0108cd51faf942b3fc3a292522d4b2f421f1cf45\n2184efed3943fe9634e6e361e8b0306a374cbf59\nd0b3815392d1fb253ed05218422a7f9b37c9df24\n70e36068a43cb6747232441ee67e609c86362aa0\ne8e093f14b698fc710930b2dead57c7d4fb63b8e\n302d64cb3c21335867b447970ab8db8d1fabdef3\n2d72bc353b9d086e3eb3f9cf00a034c86f13ca21\n156da5b55362db37d4e61a22e43e489e48797452\n15d080d2ca19891187a547f66d77183ebed0811b\nc927d6daa9a6403c53cc41b1ab4dde820f08f387\n7b49f8c7ebf40048181b56e9bfb11135bd473cab\n481fdcc619dadf0a65e5af73b0c33b26df2400e5\n5d8cf2021d8f7f171924f2b1adf824532cd67497\neb4c2e96f38a6b5280a83709e55fbb5b8d7e9d36\n4d4e95be173e84b5040af46a459b3c071bfd744a\ndab1e6435728c6d7e81d6d6158e1fa45470345d2\nc4ab5393e1c2332d92ea6672d3c8ffc3a6220afa\nde80fdc2060abe5b171bcef72944dd7b914ccd33\n5ce88c782e44dae6de8df2933b7c036f0dd48172\nc19cc6ad7676a987475fc718488007af3672a025\n672ddcb7d7a496f4a4f761b32aceaa72e4f600ed\n2e4529c0016529325289701080499b3498a270f9\n7c9a2c4b97c145a358084bed4b875396d3dc3e5c\n02d65d7a19981d342d9ef3996b296b4efda905a4\n39821e7d24deffa72bd9254414d4b58f22be2fca\n69b12a6eb3616d15035310eeb0c3dbc7aefcb5c1\n6ceb1d0f2e23749fe03fab08ec338ba4d7782173\n695280feb90729fde1a7ecf1c409ae16f8281a46\n6d5ff94b994e7279cea3d54d9d546f4f1a8cdb4d\n856bdfb0585cea3c67eedfb535c6477d51e4c352\nafb92ffc62ba140ee1366ac5ecd526706e3d8a74\n0ce86801128b0955dd46aca5e5b5add4b719df0a\n49fbda99b4e563be54ee7c85560a5929f0627654\n65717f77c43ca7cbf91e4c158d643a02a181e439\nb9e9ac51a731a1b9515d935fd543218b2ee107c1\n25e14502fdeac6c03dfed125d789b2822f488cfe\nc4286f91f2d8dce8d42bad2dda85c13658d5e0b9\nb58f43e13902517dae5343913e584b7232cc2155\n8e7f1188899023de3be07c99f146196b39dfd584\n1582d9a2c5ef9f28bc97a74e25c3948a7611fac1\nf5e3b2e83ab463064f100a9cd93f09cadaae2292\n03e79e8ab515e061fbfc435e6660e1f57b4f460d\ncb0630df7f32232bb3c51c464c28dcc66cdf7729\n9d561c5440dd68285aa84fb3dac20a8d1df4870f\nf05246dc2ae1145f54e1b6e53b47fd53382add96\n580b4c5f945df4e98bc2bacdf3620da688b2dbdf\n69397a13d9458174ea3d0160cb65d77ac83c205c\n9c9a8229201bd134df923420c97db84688a7813c\n7721e7a79733a5ac5e029869eeb88638ec00102e\n36074893c87f80daf889287c736d604f590c0ae5\n11aa7dc7a6009c02e681f41f7255902fe578ab7e\n4d9e9f2125867adde3558b9866d08f7bafb4386b\n49494bb703107835f83671d9272a0326feec8bb4\n951764106e2d82fc59dcf39e14bc17838856a00c\n32b57a159ea6ab3b0cdef7ca9d746639d42aa192\n5035f265cd6e19ef3589db55ca0b780944812365\needafe6e5c1c1f598170e6349c29ed19437d1f8c\nfddcbd5d28bb58993ee3d210f1d11e57c70a8894\n7ebd82e885b60552464e060236e869162fcadc71\n71b69ac75b623fc2f36c5c1a0ba632152aa101b8\na079d78439cd371dd270fb5a1de125d5de9cf472\n31fbd2be47819796eb6e7c23a8fc23925004abd6\nec35fc62993111e4e7dd917e7dbc91ef82b02f74\nd66683f86a719b9961a076237aba07d6b4fea359\n79368f81028a05f1d3685f0052806d3f93cd2da8\n6da61d5fa731fc34dc27607b6dc02b91928e4a54\n16389aae367ebfa8ce19f8ee1c26232fec7ff729\n0eaf2092940dc604926d31ef11b6ffb07abedc5a\n26573395db55ddbd56d4dde39c8d5e5306c7a6ce\n0d3fb848a2995a0869c4c5fa8916214a513865ac\nf0126ffa6469d6c43f04596cb6f5ca83919ef8fc\n635bc2ea81fd9493a2997e89c2de5aa7d8405578\ndd6e0ab30a120512e39f0d9b2e422243deae7b5f\n6ef7a95285f4684113ee8d4e06eada8794f4daac\n9b88f814309ddf73f92327d526b1e43c813c1de1\n2c771b7b79a206987241b595712b9026fdcb5e89\n4391c275df68b409a9bf7295934350bffd1abc00\n80139bf7977d2e78e3c619956813893f5933f929\ne05af8af958c9caa4bb7a4f6d8600ddf0a22c54b\nb53fa6344d033f8b8f03b9274dbdd811251c2c1a\ne02a7a55c23d23dd7afa2627a7e10c70e1cba001\n1c235c1343ed7b88a3e6b923b9b0d6e567054f1c\n"
        },
        {
          "name": ".git-hooks",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0625,
          "content": "*.doc binary\n*.sdw binary\n*.jcs binary\nschema/*/* export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.1181640625,
          "content": "#\n# LibreOffice project .gitignore rules.\n#\n# Do not add you pet ignore rule here, use\n# .git/info/exclude for per repo personal ignore or\n# in the file specified by core.excludesfiles in your\n# ~/.gitconfig\n#\n# As a rule of thumb:\n# File that are generated by configure or the build\n# but that are not deleted by make clean\n# can be listed here... These must be deleted by make distclean\n#\n# Files that are generated by the build but deleted by make clean\n# should all be under workdir or instdir\n# if that is not the case, don't hide it here, but try to fix it\n#\n# The intent is that after a make distclean, .gitignore\n# should not catch anything but possibly /external/tarballs\n#\n\n# where stuff is built\n/buck-out\n/instdir\n/instdir_for_build\n/workdir\n/workdir_for_build\n/test-install\n\n# default location for external downloads\n/external/tarballs\n/external/android-ndk\n/external/android-sdk-linux\n\n# autoconf generated stuff\n/aclocal.m4\n/autom4te.cache\n/autogen.input\n/autogen.lastrun\n/autogen.lastrun.bak\n/ChangeLog\n/config.Build.log\n/config.Build.warn\n/config.guess\n/config.log\n/config.status\n/config.parms\n/config.warn\n/config_host.mk\n/config_host.mk.last\n/config_host.mk.stamp\n/config_host_lang.mk\n/config_host_lang.mk.last\n/config_host_lang.mk.stamp\n/config_build\n/config_build.mk\n/config_build_lang.mk\n/configure\n/bin/bffvalidator.sh\n/bin/odfvalidator.sh\n/bin/officeotron.sh\n/hardened_runtime.xcent\n/lo.xcent\n/vs-code.code-workspace.template\n/Makefile\n\n# make id\n/ID\n\n# make tags\n\n**/tags\n**/.tags*\n\n# make etags\n/TAGS\n\n# backup and temporary editor files: the only convenience rules allowed here.\n*~\n.*sw?\n\\#*\n.\\#*\n*.kdev4\n.kdev_include_paths\n.buckd\n.directory\n.cproject\n.project\n.settings\n.eclipsesettingfile\neclipsesettingfile.xml\n.clang_complete\n.cxx_tags\n.yavide_proj\n.yavide_session\n.vscode\n*.code-workspace\n.mold-*\n\n# things below this point are targeted for elimination\n\n#stuff that we should no generated where they are\n/desktop/scripts/soffice.sh\n/intltool-extract.in\n/intltool-merge.in\n/intltool-update.in\n*.pyc\n/install\n/*/*.exe\n/solenv/gdb/libreoffice/*.pyo\n/solenv/gdb/libreoffice/util/*.pyo\n/moz/zipped/*.zip\n__pycache__\n\n# OSX specific\n.DS_Store\n\n# Xcode specific\nbuild/\n*.pbxuser\n!default.pbxuser\n*.mode1v3\n!default.mode1v3\n*.mode2v3\n!default.mode2v3\n*.perspectivev3\n!default.perspectivev3\nxcuserdata\n*.xcuserstate\n*.xccheckout\n*.moved-aside\nDerivedData\n*.xcworkspace\n\n# MSVS specific\n*/Debug\n*.sdf\n*.sln\n*.v11*\n*.v12*\n*.opensdf\n*.vcxproj*\n/.vs\n/.vscode*\n*.VC.db\nLibreOffice.VC.VC.opendb\n\n# Qt Creator specific\n*.pro\n*.pro.shared\n*.pro.user\n*.pro.user.*\n.qtc_clangd\n.cache\n\n# doxygen output\n/docs\n\n# make dump-deps output\n/lo.png\n\n# gdb specific\n/.gdbinit\n/.gdb_history\ngdbtrace.log\n\n# Codelite IDE specific\n*.project\n/.codelite\n*.workspace\n*.workspace.session\n*.tags\n\n# JetBrains Clion Specific\n.idea\n\n# Cscope\n*.out\n\n# Sublime Specific\n*.sublime-project\n*.sublime-workspace\n\n# vim-ide-integration\n/compile_commands.json\n\n# Some emscripten configure artifacts\n/a.out\n/a.wasm\n/a.out.js\n/a.out.wasm\n\n# lockfile config header\n/solenv/lockfile/autoconf.h\n\n# Android builds\n/android/jniLibs/\n/android/obj/\n\n# xml unit tests sometimes leave these lying around\n**/secmod.db\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.2353515625,
          "content": "[submodule \"dictionaries\"]\n\tpath = dictionaries\n\turl = ../dictionaries\n\tbranch = .\n[submodule \"helpcontent2\"]\n\tpath = helpcontent2\n\turl = ../help\n\tbranch = .\n[submodule \"translations\"]\n\tpath = translations\n\turl = ../translations\n\tbranch = .\n"
        },
        {
          "name": ".gitpod.dockerfile",
          "type": "blob",
          "size": 0.7939453125,
          "content": "FROM gitpod/workspace-full-vnc\n\nRUN sudo sh -c \"echo deb-src http://archive.ubuntu.com/ubuntu/ focal main restricted >> /etc/apt/sources.list\" \\\n && sudo sh -c \"echo deb-src http://archive.ubuntu.com/ubuntu/ focal-updates main restricted >> /etc/apt/sources.list\" \\\n && sudo sh -c \"echo deb-src http://security.ubuntu.com/ubuntu/ focal-security main restricted >> /etc/apt/sources.list\" \\\n && sudo sh -c \"echo deb-src http://security.ubuntu.com/ubuntu/ focal-security universe >> /etc/apt/sources.list\" \\\n && sudo sh -c \"echo deb-src http://security.ubuntu.com/ubuntu/ focal-security multiverse >> /etc/apt/sources.list\" \\\n && sudo apt-get update \\\n && sudo apt-get install -y \\\n    build-essential git libkrb5-dev graphviz nasm \\\n && sudo apt-get build-dep -y libreoffice \\\n && sudo rm -rf /var/lib/apt/lists/*\n\n"
        },
        {
          "name": ".gitpod.yml",
          "type": "blob",
          "size": 0.111328125,
          "content": "image:\n  file: .gitpod.dockerfile\n\nvscode:\n  extensions:\n    - ms-vscode.cpptools@0.26.2:Pq/tmf2WN3SanVzB4xZc1g==\n"
        },
        {
          "name": ".gitreview",
          "type": "blob",
          "size": 0.103515625,
          "content": "[gerrit]\nhost=gerrit.libreoffice.org\nport=29418\nproject=core\ndefaultremote=logerrit\ndefaultbranch=master\n\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": ".vsconfig",
          "type": "blob",
          "size": 0.0283203125,
          "content": ".configurations/2022.vsconfig"
        },
        {
          "name": "BUCK",
          "type": "blob",
          "size": 1.3759765625,
          "content": "prebuilt_jar(\n  name = 'juh',\n  binary_jar = 'instdir/program/classes/juh.jar',\n  visibility = ['PUBLIC'],\n)\n\nprebuilt_jar(\n  name = 'jurt',\n  binary_jar = 'instdir/program/classes/jurt.jar',\n  visibility = ['PUBLIC'],\n)\n\nprebuilt_jar(\n  name = 'officebean',\n  binary_jar = 'instdir/program/classes/officebean.jar',\n  visibility = ['PUBLIC'],\n)\n\nprebuilt_jar(\n  name = 'ridl',\n  binary_jar = 'instdir/program/classes/ridl.jar',\n  visibility = ['PUBLIC'],\n)\n\nprebuilt_jar(\n  name = 'unoil',\n  binary_jar = 'instdir/program/classes/unoil.jar',\n  visibility = ['PUBLIC'],\n)\n\nprebuilt_jar(\n  name = 'unoloader',\n  binary_jar = 'instdir/program/classes/unoloader.jar',\n  visibility = ['PUBLIC'],\n)\n\nprebuilt_jar(\n  name = 'libreoffice',\n  binary_jar = 'instdir/program/classes/libreoffice.jar',\n  visibility = ['PUBLIC'],\n)\n\nzip_file(\n  name = 'api',\n  srcs = [\n   ':juh',\n   '//javaunohelper:juh-src',\n   '//javaunohelper:juh-javadoc',\n   ':jurt',\n   '//jurt:jurt-src',\n   '//jurt:jurt-javadoc',\n   ':officebean',\n   '//bean:officebean-src',\n   '//bean:officebean-javadoc',\n   ':ridl',\n   '//ridljar:ridl-src',\n   '//ridljar:ridl-javadoc',\n   ':unoil',\n   '//unoil:unoil-src',\n   '//unoil:unoil-javadoc',\n   ':unoloader',\n   '//ridljar/source/unoloader:unoloader-src',\n   '//ridljar/source/unoloader:unoloader-javadoc',\n   ':libreoffice',\n   '//ridljar:libreoffice-src',\n   '//ridljar:libreoffice-javadoc',\n  ]\n)\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 34.3232421875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "COPYING.LGPL",
          "type": "blob",
          "size": 7.4599609375,
          "content": "\t\t   GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions. \n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version. \n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n"
        },
        {
          "name": "COPYING.MPL",
          "type": "blob",
          "size": 16.3330078125,
          "content": "Mozilla Public License Version 2.0\n==================================\n\n1. Definitions\n--------------\n\n1.1. \"Contributor\"\n    means each individual or legal entity that creates, contributes to\n    the creation of, or owns Covered Software.\n\n1.2. \"Contributor Version\"\n    means the combination of the Contributions of others (if any) used\n    by a Contributor and that particular Contributor's Contribution.\n\n1.3. \"Contribution\"\n    means Covered Software of a particular Contributor.\n\n1.4. \"Covered Software\"\n    means Source Code Form to which the initial Contributor has attached\n    the notice in Exhibit A, the Executable Form of such Source Code\n    Form, and Modifications of such Source Code Form, in each case\n    including portions thereof.\n\n1.5. \"Incompatible With Secondary Licenses\"\n    means\n\n    (a) that the initial Contributor has attached the notice described\n        in Exhibit B to the Covered Software; or\n\n    (b) that the Covered Software was made available under the terms of\n        version 1.1 or earlier of the License, but not also under the\n        terms of a Secondary License.\n\n1.6. \"Executable Form\"\n    means any form of the work other than Source Code Form.\n\n1.7. \"Larger Work\"\n    means a work that combines Covered Software with other material, in\n    a separate file or files, that is not Covered Software.\n\n1.8. \"License\"\n    means this document.\n\n1.9. \"Licensable\"\n    means having the right to grant, to the maximum extent possible,\n    whether at the time of the initial grant or subsequently, any and\n    all of the rights conveyed by this License.\n\n1.10. \"Modifications\"\n    means any of the following:\n\n    (a) any file in Source Code Form that results from an addition to,\n        deletion from, or modification of the contents of Covered\n        Software; or\n\n    (b) any new file in Source Code Form that contains any Covered\n        Software.\n\n1.11. \"Patent Claims\" of a Contributor\n    means any patent claim(s), including without limitation, method,\n    process, and apparatus claims, in any patent Licensable by such\n    Contributor that would be infringed, but for the grant of the\n    License, by the making, using, selling, offering for sale, having\n    made, import, or transfer of either its Contributions or its\n    Contributor Version.\n\n1.12. \"Secondary License\"\n    means either the GNU General Public License, Version 2.0, the GNU\n    Lesser General Public License, Version 2.1, the GNU Affero General\n    Public License, Version 3.0, or any later versions of those\n    licenses.\n\n1.13. \"Source Code Form\"\n    means the form of the work preferred for making modifications.\n\n1.14. \"You\" (or \"Your\")\n    means an individual or a legal entity exercising rights under this\n    License. For legal entities, \"You\" includes any entity that\n    controls, is controlled by, or is under common control with You. For\n    purposes of this definition, \"control\" means (a) the power, direct\n    or indirect, to cause the direction or management of such entity,\n    whether by contract or otherwise, or (b) ownership of more than\n    fifty percent (50%) of the outstanding shares or beneficial\n    ownership of such entity.\n\n2. License Grants and Conditions\n--------------------------------\n\n2.1. Grants\n\nEach Contributor hereby grants You a world-wide, royalty-free,\nnon-exclusive license:\n\n(a) under intellectual property rights (other than patent or trademark)\n    Licensable by such Contributor to use, reproduce, make available,\n    modify, display, perform, distribute, and otherwise exploit its\n    Contributions, either on an unmodified basis, with Modifications, or\n    as part of a Larger Work; and\n\n(b) under Patent Claims of such Contributor to make, use, sell, offer\n    for sale, have made, import, and otherwise transfer either its\n    Contributions or its Contributor Version.\n\n2.2. Effective Date\n\nThe licenses granted in Section 2.1 with respect to any Contribution\nbecome effective for each Contribution on the date the Contributor first\ndistributes such Contribution.\n\n2.3. Limitations on Grant Scope\n\nThe licenses granted in this Section 2 are the only rights granted under\nthis License. No additional rights or licenses will be implied from the\ndistribution or licensing of Covered Software under this License.\nNotwithstanding Section 2.1(b) above, no patent license is granted by a\nContributor:\n\n(a) for any code that a Contributor has removed from Covered Software;\n    or\n\n(b) for infringements caused by: (i) Your and any other third party's\n    modifications of Covered Software, or (ii) the combination of its\n    Contributions with other software (except as part of its Contributor\n    Version); or\n\n(c) under Patent Claims infringed by Covered Software in the absence of\n    its Contributions.\n\nThis License does not grant any rights in the trademarks, service marks,\nor logos of any Contributor (except as may be necessary to comply with\nthe notice requirements in Section 3.4).\n\n2.4. Subsequent Licenses\n\nNo Contributor makes additional grants as a result of Your choice to\ndistribute the Covered Software under a subsequent version of this\nLicense (see Section 10.2) or under the terms of a Secondary License (if\npermitted under the terms of Section 3.3).\n\n2.5. Representation\n\nEach Contributor represents that the Contributor believes its\nContributions are its original creation(s) or it has sufficient rights\nto grant the rights to its Contributions conveyed by this License.\n\n2.6. Fair Use\n\nThis License is not intended to limit any rights You have under\napplicable copyright doctrines of fair use, fair dealing, or other\nequivalents.\n\n2.7. Conditions\n\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted\nin Section 2.1.\n\n3. Responsibilities\n-------------------\n\n3.1. Distribution of Source Form\n\nAll distribution of Covered Software in Source Code Form, including any\nModifications that You create or to which You contribute, must be under\nthe terms of this License. You must inform recipients that the Source\nCode Form of the Covered Software is governed by the terms of this\nLicense, and how they can obtain a copy of this License. You may not\nattempt to alter or restrict the recipients' rights in the Source Code\nForm.\n\n3.2. Distribution of Executable Form\n\nIf You distribute Covered Software in Executable Form then:\n\n(a) such Covered Software must also be made available in Source Code\n    Form, as described in Section 3.1, and You must inform recipients of\n    the Executable Form how they can obtain a copy of such Source Code\n    Form by reasonable means in a timely manner, at a charge no more\n    than the cost of distribution to the recipient; and\n\n(b) You may distribute such Executable Form under the terms of this\n    License, or sublicense it under different terms, provided that the\n    license for the Executable Form does not attempt to limit or alter\n    the recipients' rights in the Source Code Form under this License.\n\n3.3. Distribution of a Larger Work\n\nYou may create and distribute a Larger Work under terms of Your choice,\nprovided that You also comply with the requirements of this License for\nthe Covered Software. If the Larger Work is a combination of Covered\nSoftware with a work governed by one or more Secondary Licenses, and the\nCovered Software is not Incompatible With Secondary Licenses, this\nLicense permits You to additionally distribute such Covered Software\nunder the terms of such Secondary License(s), so that the recipient of\nthe Larger Work may, at their option, further distribute the Covered\nSoftware under the terms of either this License or such Secondary\nLicense(s).\n\n3.4. Notices\n\nYou may not remove or alter the substance of any license notices\n(including copyright notices, patent notices, disclaimers of warranty,\nor limitations of liability) contained within the Source Code Form of\nthe Covered Software, except that You may alter any license notices to\nthe extent required to remedy known factual inaccuracies.\n\n3.5. Application of Additional Terms\n\nYou may choose to offer, and to charge a fee for, warranty, support,\nindemnity or liability obligations to one or more recipients of Covered\nSoftware. However, You may do so only on Your own behalf, and not on\nbehalf of any Contributor. You must make it absolutely clear that any\nsuch warranty, support, indemnity, or liability obligation is offered by\nYou alone, and You hereby agree to indemnify every Contributor for any\nliability incurred by such Contributor as a result of warranty, support,\nindemnity or liability terms You offer. You may include additional\ndisclaimers of warranty and limitations of liability specific to any\njurisdiction.\n\n4. Inability to Comply Due to Statute or Regulation\n---------------------------------------------------\n\nIf it is impossible for You to comply with any of the terms of this\nLicense with respect to some or all of the Covered Software due to\nstatute, judicial order, or regulation then You must: (a) comply with\nthe terms of this License to the maximum extent possible; and (b)\ndescribe the limitations and the code they affect. Such description must\nbe placed in a text file included with all distributions of the Covered\nSoftware under this License. Except to the extent prohibited by statute\nor regulation, such description must be sufficiently detailed for a\nrecipient of ordinary skill to be able to understand it.\n\n5. Termination\n--------------\n\n5.1. The rights granted under this License will terminate automatically\nif You fail to comply with any of its terms. However, if You become\ncompliant, then the rights granted under this License from a particular\nContributor are reinstated (a) provisionally, unless and until such\nContributor explicitly and finally terminates Your grants, and (b) on an\nongoing basis, if such Contributor fails to notify You of the\nnon-compliance by some reasonable means prior to 60 days after You have\ncome back into compliance. Moreover, Your grants from a particular\nContributor are reinstated on an ongoing basis if such Contributor\nnotifies You of the non-compliance by some reasonable means, this is the\nfirst time You have received notice of non-compliance with this License\nfrom such Contributor, and You become compliant prior to 30 days after\nYour receipt of the notice.\n\n5.2. If You initiate litigation against any entity by asserting a patent\ninfringement claim (excluding declaratory judgment actions,\ncounter-claims, and cross-claims) alleging that a Contributor Version\ndirectly or indirectly infringes any patent, then the rights granted to\nYou by any and all Contributors for the Covered Software under Section\n2.1 of this License shall terminate.\n\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all\nend user license agreements (excluding distributors and resellers) which\nhave been validly granted by You or Your distributors under this License\nprior to termination shall survive termination.\n\n************************************************************************\n*                                                                      *\n*  6. Disclaimer of Warranty                                           *\n*  -------------------------                                           *\n*                                                                      *\n*  Covered Software is provided under this License on an \"as is\"       *\n*  basis, without warranty of any kind, either expressed, implied, or  *\n*  statutory, including, without limitation, warranties that the       *\n*  Covered Software is free of defects, merchantable, fit for a        *\n*  particular purpose or non-infringing. The entire risk as to the     *\n*  quality and performance of the Covered Software is with You.        *\n*  Should any Covered Software prove defective in any respect, You     *\n*  (not any Contributor) assume the cost of any necessary servicing,   *\n*  repair, or correction. This disclaimer of warranty constitutes an   *\n*  essential part of this License. No use of any Covered Software is   *\n*  authorized under this License except under this disclaimer.         *\n*                                                                      *\n************************************************************************\n\n************************************************************************\n*                                                                      *\n*  7. Limitation of Liability                                          *\n*  --------------------------                                          *\n*                                                                      *\n*  Under no circumstances and under no legal theory, whether tort      *\n*  (including negligence), contract, or otherwise, shall any           *\n*  Contributor, or anyone who distributes Covered Software as          *\n*  permitted above, be liable to You for any direct, indirect,         *\n*  special, incidental, or consequential damages of any character      *\n*  including, without limitation, damages for lost profits, loss of    *\n*  goodwill, work stoppage, computer failure or malfunction, or any    *\n*  and all other commercial damages or losses, even if such party      *\n*  shall have been informed of the possibility of such damages. This   *\n*  limitation of liability shall not apply to liability for death or   *\n*  personal injury resulting from such party's negligence to the       *\n*  extent applicable law prohibits such limitation. Some               *\n*  jurisdictions do not allow the exclusion or limitation of           *\n*  incidental or consequential damages, so this exclusion and          *\n*  limitation may not apply to You.                                    *\n*                                                                      *\n************************************************************************\n\n8. Litigation\n-------------\n\nAny litigation relating to this License may be brought only in the\ncourts of a jurisdiction where the defendant maintains its principal\nplace of business and such litigation shall be governed by laws of that\njurisdiction, without reference to its conflict-of-law provisions.\nNothing in this Section shall prevent a party's ability to bring\ncross-claims or counter-claims.\n\n9. Miscellaneous\n----------------\n\nThis License represents the complete agreement concerning the subject\nmatter hereof. If any provision of this License is held to be\nunenforceable, such provision shall be reformed only to the extent\nnecessary to make it enforceable. Any law or regulation which provides\nthat the language of a contract shall be construed against the drafter\nshall not be used to construe this License against a Contributor.\n\n10. Versions of the License\n---------------------------\n\n10.1. New Versions\n\nMozilla Foundation is the license steward. Except as provided in Section\n10.3, no one other than the license steward has the right to modify or\npublish new versions of this License. Each version will be given a\ndistinguishing version number.\n\n10.2. Effect of New Versions\n\nYou may distribute the Covered Software under the terms of the version\nof the License under which You originally received the Covered Software,\nor under the terms of any subsequent version published by the license\nsteward.\n\n10.3. Modified Versions\n\nIf you create software not governed by this License, and you want to\ncreate a new license for such software, you may create and use a\nmodified version of this License if you rename the license and remove\nany references to the name of the license steward (except to note that\nsuch modified license differs from this License).\n\n10.4. Distributing Source Code Form that is Incompatible With Secondary\nLicenses\n\nIf You choose to distribute Source Code Form that is Incompatible With\nSecondary Licenses under the terms of this version of the License, the\nnotice described in Exhibit B of this License must be attached.\n\nExhibit A - Source Code Form License Notice\n-------------------------------------------\n\n  This Source Code Form is subject to the terms of the Mozilla Public\n  License, v. 2.0. If a copy of the MPL was not distributed with this\n  file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular\nfile, then You may include the notice in a location (such as a LICENSE\nfile in a relevant directory) where a recipient would be likely to look\nfor such a notice.\n\nYou may add additional accurate notices of copyright ownership.\n\nExhibit B - \"Incompatible With Secondary Licenses\" Notice\n---------------------------------------------------------\n\n  This Source Code Form is \"Incompatible With Secondary Licenses\", as\n  defined by the Mozilla Public License, v. 2.0.\n"
        },
        {
          "name": "Library_merged.mk",
          "type": "blob",
          "size": 1.0205078125,
          "content": "# -*- Mode: makefile-gmake; tab-width: 4; indent-tabs-mode: t -*-\n#\n#\n# This file is part of the LibreOffice project.\n#\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n#\n\n$(eval $(call gb_Library_Library,merged))\n\n# gb_MERGEDLIBS is defined in solenv/gbuild/extensions/pre_MergedLibsList.mk\n$(eval $(call gb_Library_use_library_objects,merged,\\\n\t$(gb_MERGEDLIBS) \\\n))\n\n$(eval $(call gb_Library_use_libraries,merged,\\\n\tcppu \\\n\tcppuhelper \\\n\ti18nlangtag \\\n\t$(if $(ENABLE_JAVA), \\\n\t\tjvmaccess \\\n\t\tjvmfwk) \\\n\tsal \\\n\tsalhelper \\\n\txmlreader \\\n))\n\nifeq ($(OS),WNT)\n# prevent warning spamming\n$(eval $(call gb_Library_add_ldflags,merged,\\\n\t/ignore:4049 \\\n\t/ignore:4217 \\\n))\n# cursors\n$(eval $(call gb_Library_add_nativeres,merged,vcl/salsrc))\nendif\n\nifeq ($(OS),MACOSX)\n$(eval $(call gb_Library_use_libraries,merged,\\\n\t$(if $(ENABLE_MACOSX_SANDBOX),,AppleRemote) \\\n))\nendif\n\n# vim: set noet sw=4 ts=4:\n"
        },
        {
          "name": "Makefile.fetch",
          "type": "blob",
          "size": 11.01953125,
          "content": "# -*- Mode: makefile-gmake; tab-width: 4; indent-tabs-mode: t -*-\n#\n# This file is part of the LibreOffice project.\n#\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n#\n\nfetch_LOGFILE := $(TARFILE_LOCATION)/fetch.log\n\nifneq (,$(WGET))\ndefine fetch_Download__wget_command\n&& bash -c '$(WGET) --progress=dot:mega -Q 0 -P \".\" -l 0 -nd -nH -N --no-use-server-timestamps $1/$2 2>&1 | tee -a $(fetch_LOGFILE) && [ $$PIPESTATUS -eq 0 ]'\nendef\n\nelse\ndefine fetch_Download__wget_command\n&& echo fetching $2 && bash -c '$(CURL) -f -L -O $1/$2 2>&1 | tee -a $(fetch_LOGFILE) && [ $$PIPESTATUS -eq 0 ]'\nendef\n\nendif\n\nifneq (,$(SHA256SUM))\ndefine fetch_Download__checksum_command\n&& SUM=`$(SHA256SUM) $1 | sed \"s/ .*//\"` \\\n&& if test \"$$SUM\" != \"$2\"; then \\\n\techo ERROR: expected checksum for $1 is $2 2>&1 | tee -a $(fetch_LOGFILE); \\\n\tfalse; \\\nfi\nendef\n\nelse\nfetch_Download__checksum_command :=\n\nendif\n\n# fetch__Download_item url tarball-name sha256sum\ndefine fetch__Download_item\n$(if $(wildcard $(TARFILE_LOCATION)/$2),, \\\ncd $(TARFILE_LOCATION)/tmp \\\n$(call fetch_Download__wget_command,$1,$2) \\\n$(if $3,$(call fetch_Download__checksum_command,$2,$3)) \\\n&& mv $2 ../ \\\n)\n\nendef\n\n# fetch_Download__is_checksum checksum\ndefine fetch_Download__is_checksum\n$(filter 32,$(words $(shell echo $(1) | sed -e 's/./& /g')))\nendef\n\ndefine fetch_Download__subst_var\n$(subst _TTF,_SHA256SUM,$(subst _DLL,_SHA256SUM,$(subst _TARBALL,_SHA256SUM,$(subst _PACK,_SHA256SUM,$(subst _JAR,_SHA256SUM,$(1))))))\nendef\n\n# fetch_Download_item url variable-name\ndefine fetch_Download_item\n$(if $(strip $($(2))),,$(error fetch__Download_item: $(2) is empty))\n$(if $(filter undefined,$(origin $(call fetch_Download__subst_var,$(2)))),\\\n\t$(error \"fetch_Download_item: no checksum found for $($(2)). Please define $(call fetch_Download__subst_var,$(2)) in download.lst.\"),\\\n\t$(call fetch__Download_item,$(1),$($2),$($(call fetch_Download__subst_var,$(2)))) \\\n)\n\nendef\n\n# fetch_Download_item url tarball-name\ndefine fetch_Download_item_unchecked\n$(call fetch__Download_item,$1,$2)\n\nendef\n\nfetch_BUILD_TYPE := $(sort $(BUILD_TYPE))\nifneq ($(CROSS_COMPILING),)\nfetch_BUILD_TYPE := $(sort $(fetch_BUILD_TYPE) $(shell . $(SRCDIR)/bin/get_config_variables --build BUILD_TYPE && echo $$BUILD_TYPE))\nendif\n\n# Return variable-name if this tarball should be fetched.\n#\n# This function is used for tarballs predefined in download.lst.\n#\n# fetch_Optional build-type variable-name\ndefine fetch_Optional\n$(if $(filter ALL,$(DO_FETCH_TARBALLS))$(filter $1,$(fetch_BUILD_TYPE)),$2)\nendef\n\n# Return variable-name if this pack should be fetched.\n#\n# This function is used for packs defined by configure.\n#\n# fetch_Optional_pack variable-name\ndefine fetch_Optional_pack\n$(if $(strip $($(1))),$(1))\nendef\n\ndownload: $(WORKDIR)/download\n\n$(WORKDIR)/download: $(BUILDDIR)/config_$(gb_Side).mk $(SRCDIR)/download.lst $(SRCDIR)/Makefile.fetch\n\t-@mkdir -p $(TARFILE_LOCATION)/tmp\n\t@date >> $(fetch_LOGFILE)\n\t$(foreach item, \\\n\t\t$(call fetch_Optional,ABW,ABW_TARBALL) \\\n\t\t$(call fetch_Optional,ARGON2,ARGON2_TARBALL) \\\n\t\t$(call fetch_Optional,BOOST,BOOST_TARBALL) \\\n\t\t$(call fetch_Optional,BOX2D,BOX2D_TARBALL) \\\n\t\t$(call fetch_Optional,BREAKPAD,BREAKPAD_TARBALL) \\\n\t\t$(call fetch_Optional,BSH,BSH_TARBALL) \\\n\t\t$(call fetch_Optional,BZIP2,BZIP2_TARBALL) \\\n\t\t$(call fetch_Optional,CAIRO,CAIRO_TARBALL) \\\n\t\t$(call fetch_Optional,CAIRO,PIXMAN_TARBALL) \\\n\t\t$(call fetch_Optional,CDR,CDR_TARBALL) \\\n\t\t$(call fetch_Optional,CLUCENE,CLUCENE_TARBALL) \\\n\t\t$(call fetch_Optional,DRAGONBOX,DRAGONBOX_TARBALL) \\\n\t\tDTOA_TARBALL \\\n\t\t$(call fetch_Optional,LIBCMIS,LIBCMIS_TARBALL) \\\n\t\t$(call fetch_Optional,COINMP,COINMP_TARBALL) \\\n\t\t$(call fetch_Optional,CPPUNIT,CPPUNIT_TARBALL) \\\n\t\t$(call fetch_Optional,CURL,CURL_TARBALL) \\\n\t\t$(call fetch_Optional,EBOOK,EBOOK_TARBALL) \\\n\t\t$(call fetch_Optional,EPM,EPM_TARBALL) \\\n\t\t$(call fetch_Optional,EPUBGEN,EPUBGEN_TARBALL) \\\n\t\t$(call fetch_Optional,ETONYEK,ETONYEK_TARBALL) \\\n\t\t$(call fetch_Optional,EXPAT,EXPAT_TARBALL) \\\n\t\t$(call fetch_Optional,FIREBIRD,FIREBIRD_TARBALL) \\\n\t\t$(call fetch_Optional,FONTCONFIG,FONTCONFIG_TARBALL) \\\n\t\t$(call fetch_Optional,FREEHAND,FREEHAND_TARBALL) \\\n\t\t$(call fetch_Optional,FREETYPE,FREETYPE_TARBALL) \\\n\t\tFROZEN_TARBALL \\\n\t\t$(call fetch_Optional,EPOXY,EPOXY_TARBALL) \\\n\t\t$(call fetch_Optional,GLM,GLM_TARBALL) \\\n\t\t$(call fetch_Optional,GPGMEPP,GPGME_TARBALL) \\\n\t\t$(call fetch_Optional,GRAPHITE,GRAPHITE_TARBALL) \\\n\t\t$(call fetch_Optional,HARFBUZZ,HARFBUZZ_TARBALL) \\\n\t\t$(call fetch_Optional,HSQLDB,HSQLDB_TARBALL) \\\n\t\t$(call fetch_Optional,HUNSPELL,HUNSPELL_TARBALL) \\\n\t\t$(call fetch_Optional,HYPHEN,HYPHEN_TARBALL) \\\n\t\t$(if $(filter WNT,$(OS)),IACCESSIBLE2_TARBALL) \\\n\t\t$(call fetch_Optional,ICU,ICU_TARBALL) \\\n\t\t$(call fetch_Optional,ICU,ICU_DATA_TARBALL) \\\n\t\t$(call fetch_Optional,JAVA_WEBSOCKET,JAVA_WEBSOCKET_TARBALL) \\\n\t\t$(call fetch_Optional,JFREEREPORT,JFREEREPORT_FLOW_ENGINE_TARBALL) \\\n\t\t$(call fetch_Optional,JFREEREPORT,JFREEREPORT_FLUTE_TARBALL) \\\n\t\t$(call fetch_Optional,JFREEREPORT,JFREEREPORT_LIBBASE_TARBALL) \\\n\t\t$(call fetch_Optional,JFREEREPORT,JFREEREPORT_LIBFONTS_TARBALL) \\\n\t\t$(call fetch_Optional,JFREEREPORT,JFREEREPORT_LIBFORMULA_TARBALL) \\\n\t\t$(call fetch_Optional,JFREEREPORT,JFREEREPORT_LIBLAYOUT_TARBALL) \\\n\t\t$(call fetch_Optional,JFREEREPORT,JFREEREPORT_LIBLOADER_TARBALL) \\\n\t\t$(call fetch_Optional,JFREEREPORT,JFREEREPORT_LIBREPOSITORY_TARBALL) \\\n\t\t$(call fetch_Optional,JFREEREPORT,JFREEREPORT_LIBSERIALIZER_TARBALL) \\\n\t\t$(call fetch_Optional,JFREEREPORT,JFREEREPORT_LIBXML_TARBALL) \\\n\t\t$(call fetch_Optional,JFREEREPORT,JFREEREPORT_SAC_TARBALL) \\\n\t\t$(call fetch_Optional,LIBJPEG_TURBO,LIBJPEG_TURBO_TARBALL) \\\n\t\t$(call fetch_Optional,LCMS2,LCMS2_TARBALL) \\\n\t\t$(call fetch_Optional,LIBATOMIC_OPS,LIBATOMIC_OPS_TARBALL) \\\n\t\t$(call fetch_Optional,LIBASSUAN,LIBASSUAN_TARBALL) \\\n\t\t$(call fetch_Optional,LIBEOT,LIBEOT_TARBALL) \\\n\t\t$(call fetch_Optional,LIBEXTTEXTCAT,LIBEXTTEXTCAT_TARBALL) \\\n\t\t$(call fetch_Optional,LIBFFI,LIBFFI_TARBALL) \\\n\t\t$(call fetch_Optional,LIBGPGERROR,LIBGPGERROR_TARBALL) \\\n\t\t$(call fetch_Optional,LIBLANGTAG,LANGTAGREG_TARBALL) \\\n\t\t$(call fetch_Optional,LIBLANGTAG,LIBLANGTAG_TARBALL) \\\n\t\t$(call fetch_Optional,LIBNUMBERTEXT,LIBNUMBERTEXT_TARBALL) \\\n\t\t$(call fetch_Optional,LIBPNG,LIBPNG_TARBALL) \\\n\t\t$(call fetch_Optional,LIBTIFF,LIBTIFF_TARBALL) \\\n\t\t$(call fetch_Optional,LIBTOMMATH,LIBTOMMATH_TARBALL) \\\n\t\t$(call fetch_Optional,LIBWEBP,LIBWEBP_TARBALL) \\\n\t\t$(call fetch_Optional,LIBXML2,LIBXML_TARBALL) \\\n\t\t$(call fetch_Optional,XMLSEC,XMLSEC_TARBALL) \\\n\t\t$(call fetch_Optional,LIBXSLT,LIBXSLT_TARBALL) \\\n\t\t$(call fetch_Optional,LPSOLVE,LPSOLVE_TARBALL) \\\n\t\t$(call fetch_Optional,LXML,LXML_TARBALL) \\\n\t\t$(call fetch_Optional,MARIADB_CONNECTOR_C,MARIADB_CONNECTOR_C_TARBALL) \\\n\t\t$(call fetch_Optional,MDDS,MDDS_TARBALL) \\\n\t\tZXCVBN_C_TARBALL \\\n\t\t$(call fetch_Optional,ZXING,ZXING_TARBALL) \\\n\t\t$(call fetch_Optional,MDNSRESPONDER,MDNSRESPONDER_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_CALADEA_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_CARLITO_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_DEJAVU_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_GENTIUM_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_LIBERATION_NARROW_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_LIBERATION_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_LINLIBERTINEG_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_NOTO_KUFI_ARABIC_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_NOTO_SANS_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_NOTO_SERIF_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_NOTO_SANS_ARABIC_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_NOTO_NASKH_ARABIC_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_NOTO_SANS_HEBREW_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_NOTO_SERIF_HEBREW_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_NOTO_SANS_ARMENIAN_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_NOTO_SERIF_ARMENIAN_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_NOTO_SANS_GEORGIAN_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_NOTO_SERIF_GEORGIAN_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_NOTO_SANS_LAO_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_NOTO_SERIF_LAO_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_NOTO_SANS_LISU_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_CULMUS_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_LIBRE_HEBREW_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_ALEF_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_AMIRI_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_REEM_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_SCHEHERAZADE_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_AGDASIMA_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_BACASIME_ANTIQUE_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_BELANOSIMA_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_CAPRASIMO_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_LUGRASIMO_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_LUMANOSIMO_TARBALL) \\\n\t\t$(call fetch_Optional,MORE_FONTS,FONT_LUNASIMA_TARBALL) \\\n\t\t$(call fetch_Optional,MSPUB,MSPUB_TARBALL) \\\n\t\t$(call fetch_Optional,MWAW,MWAW_TARBALL) \\\n\t\t$(call fetch_Optional,MYTHES,MYTHES_TARBALL) \\\n\t\t$(call fetch_Optional,NSS,NSS_TARBALL) \\\n\t\t$(call fetch_Optional_pack,NUMBERTEXT_EXTENSION_PACK) \\\n\t\t$(call fetch_Optional,ODFGEN,ODFGEN_TARBALL) \\\n\t\t$(call fetch_Optional,ONLINEUPDATE,ONLINEUPDATE_TARBALL) \\\n\t\t$(call fetch_Optional,OPENLDAP,OPENLDAP_TARBALL) \\\n\t\t$(call fetch_Optional,OPENSSL,OPENSSL_TARBALL) \\\n\t\t$(call fetch_Optional,ORCUS,ORCUS_TARBALL) \\\n\t\t$(call fetch_Optional,PAGEMAKER,PAGEMAKER_TARBALL) \\\n\t\t$(call fetch_Optional,PDFIUM,PDFIUM_TARBALL) \\\n\t\t$(call fetch_Optional,POPPLER,POPPLER_TARBALL) \\\n\t\t$(call fetch_Optional,POPPLER,POPPLER_DATA_TARBALL) \\\n\t\t$(call fetch_Optional,POSTGRESQL,POSTGRESQL_TARBALL) \\\n\t\t$(call fetch_Optional,PYTHON,PYTHON_TARBALL) \\\n\t\t$(if $(filter WNT,$(OS)),PYTHON_BOOTSTRAP_TARBALL) \\\n\t\t$(call fetch_Optional,QXP,QXP_TARBALL) \\\n\t\t$(call fetch_Optional,REDLAND,RAPTOR_TARBALL) \\\n\t\t$(call fetch_Optional,REDLAND,RASQAL_TARBALL) \\\n\t\t$(call fetch_Optional,REDLAND,REDLAND_TARBALL) \\\n\t\t$(call fetch_Optional,REVENGE,REVENGE_TARBALL) \\\n\t\t$(call fetch_Optional,RHINO,RHINO_TARBALL) \\\n\t\t$(call fetch_Optional,SKIA,SKIA_TARBALL) \\\n\t\t$(call fetch_Optional,STAROFFICE,STAROFFICE_TARBALL) \\\n\t\t$(if $(filter WNT,$(OS)),TWAIN_DSM_TARBALL) \\\n\t\t$(call fetch_Optional,VISIO,VISIO_TARBALL) \\\n\t\t$(call fetch_Optional,WPD,WPD_TARBALL) \\\n\t\t$(call fetch_Optional,WPG,WPG_TARBALL) \\\n\t\t$(call fetch_Optional,WPS,WPS_TARBALL) \\\n\t\t$(call fetch_Optional,XSLTML,XSLTML_TARBALL) \\\n\t\t$(call fetch_Optional,ZLIB,ZLIB_TARBALL) \\\n\t\t$(call fetch_Optional,ZMF,ZMF_TARBALL) \\\n\t,$(call fetch_Download_item,https://dev-www.libreoffice.org/src,$(item)))\n\t$(foreach item, \\\n\t\t$(call fetch_Optional,OPENSYMBOL,OPENSYMBOL_TTF) \\\n\t\t$(call fetch_Optional,ODFVALIDATOR,ODFVALIDATOR_JAR) \\\n\t\t$(call fetch_Optional,OFFICEOTRON,OFFICEOTRON_JAR) \\\n\t,$(call fetch_Download_item,https://dev-www.libreoffice.org/extern,$(item)))\n\t@mkdir -p $(dir $@) && touch $@\n\t@mkdir -p $(dir $@)/Executable\n\n# vim: set noet sw=4 ts=4:\n"
        },
        {
          "name": "Makefile.gbuild",
          "type": "blob",
          "size": 4.2802734375,
          "content": "# -*- Mode: makefile-gmake; tab-width: 4; indent-tabs-mode: t -*-\n#\n# This file is part of the LibreOffice project.\n#\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n#\n\nifeq (,$(gb_Side))\ngb_Side := host\nendif\nifeq (,$(BUILDDIR))\nBUILDDIR := $(dir $(realpath $(firstword $(MAKEFILE_LIST))))\nendif\n\ninclude $(BUILDDIR)/config_$(gb_Side).mk\n\ninclude $(SRCDIR)/solenv/gbuild/gbuild.mk\n\n$(eval $(call gb_Module_make_global_targets,$(SRCDIR)/RepositoryModule_$(gb_Side).mk))\n\nifeq ($(DISABLE_DYNLOADING),TRUE)\n$(if $(gb_LinkTarget__Lock),$(shell rm -f $(gb_LinkTarget__Lock)))\nifeq ($(ENABLE_CUSTOMTARGET_COMPONENTS),TRUE)\ninclude $(SRCDIR)/solenv/gbuild/static.mk\n$(if $(filter a,$(gb_DEBUG_STATIC)),$(error Abort after static.mk))\nendif\nendif\n\nupload-symbols:\n\tbin/upload_symbols.py $(WORKDIR)/symbols.zip $(BREAKPAD_SYMBOL_CONFIG) \"$(LIBO_VERSION_MAJOR).$(LIBO_VERSION_MINOR).$(LIBO_VERSION_MICRO).$(LIBO_VERSION_PATCH)$(LIBO_VERSION_SUFFIX)$(LIBO_VERSION_SUFFIX_SUFFIX)\"\n\ncreate-update-info:\n\t$(eval BUILDID := $(shell git -C $(SRCDIR) log -1 --format=%H))\n\t$(eval VERSION := $(LIBO_VERSION_MAJOR).$(LIBO_VERSION_MINOR).$(LIBO_VERSION_MICRO).$(LIBO_VERSION_PATCH)$(LIBO_VERSION_SUFFIX)$(LIBO_VERSION_SUFFIX_SUFFIX))\n\t$(eval PLATFORM := $(RTL_OS)_$(RTL_ARCH))\n\t$(eval MAR_NAME_PREFIX := $(PRODUCTNAME)_$(VERSION)_$(PLATFORM)_$(BUILDID))\n\t$(eval UPDATE_DIR := $(WORKDIR)/update-info)\n\t$(eval MAR_DIR := $(WORKDIR)/mar)\n\trm -rf $(MAR_DIR) || true\n\trm -rf $(UPDATE_DIR) || true\n\tmkdir -p $(MAR_DIR)/language\n\tMAR=$(INSTDIR)/program/mar $(if $(filter WNT,$(OS)),$(shell cygpath -u $(SRCDIR)/bin/update/create_full_mar.py),$(SRCDIR)/bin/update/create_full_mar.py) \"$(PRODUCTNAME)\" \"$(WORKDIR)\" \"$(MAR_NAME_PREFIX)\" \"$(ONLINEUPDATE_MAR_CERTIFICATEPATH)\" \"$(ONLINEUPDATE_MAR_CERTIFICATENAME)\" \"$(ONLINEUPDATE_MAR_BASEURL)\" '$(LIBO_VERSION_MAJOR).$(LIBO_VERSION_MINOR).$(LIBO_VERSION_MICRO).$(LIBO_VERSION_PATCH)'\n\n# target-variables also will apply to the target's prerequisites (i.e. the individual platform targets)\n# arch is taken from the stem of the rule\n# MSIDIR and OLD_VER are expected to be specified on the make commandline but others like VERSION,\n# BUILDID, ONLINEUPDATE_MAR_NEWMSI and ONLINEUPDATE_MAR_OLDMSI can be overridden as well if needed.\n# If VERSION is specified on the commandline, BUILDID defaults to the corresponding libreoffice tag\ncreate-partial-info: export ARCH = $*\ncreate-partial-info: PLATFORM = $(RTL_OS)_$(ARCH)\ncreate-partial-info: VERSION := $(LIBO_VERSION_MAJOR).$(LIBO_VERSION_MINOR).$(LIBO_VERSION_MICRO).$(LIBO_VERSION_PATCH)\ncreate-partial-info: VERSION_FULL := $(VERSION)$(LIBO_VERSION_SUFFIX)$(LIBO_VERSION_SUFFIX_SUFFIX)\ncreate-partial-info: BUILDID := $(shell git -C $(SRCDIR) log -1 --format=%H$(if $(filter command line,$(origin VERSION)), libreoffice-$(VERSION)))\ncreate-partial-info: MAR_NAME_PREFIX = $(PRODUCTNAME)_$(VERSION_FULL)_$(PLATFORM)_$(BUILDID)\ncreate-partial-info: ONLINEUPDATE_MAR_OLDMSI = $(MSIDIR)$(PRODUCTNAME)_$(OLD_VER)_Win_$(subst AARCH64,aarch64,$(subst X86_64,x86-64,$(ARCH))).msi\ncreate-partial-info: ONLINEUPDATE_MAR_NEWMSI = $(MSIDIR)$(PRODUCTNAME)_$(VERSION)_Win_$(subst AARCH64,aarch64,$(subst X86_64,x86-64,$(ARCH))).msi\ncreate-partial-info: export MBSDIFF := $(gb_Executable_BINDIR)/mbsdiff\ncreate-partial-info: export MAR := $(INSTDIR)/program/mar\n\ncreate-partial-info: create-partial-info-AARCH64 create-partial-info-X86_64 create-partial-info-x86\n\ncreate-partial-info-%:\n\t$(if $(filter WNT,$(OS)),$(shell cygpath -u $(SRCDIR)/bin/update/create_partial_update.py),$(SRCDIR)/bin/update/create_partial_update.py) \"$(WORKDIR)\" \"$(MAR_NAME_PREFIX)\" LOOnlineUpdater \"$(ONLINEUPDATE_MAR_CERTIFICATEPATH)\" \"$(ONLINEUPDATE_MAR_CERTIFICATENAME)\" \"$(ONLINEUPDATE_MAR_BASEURL)$(VERSION)/\" \"$(PRODUCTNAME)\" '$(VERSION)' \"$(ONLINEUPDATE_MAR_OLDMSI)\" \"$(ONLINEUPDATE_MAR_NEWMSI)\"\n\n# also possible to bypass the dependencies/the gbuild processing by just running\n# LD_LIBRARY_PATH=instdir/program make cmd cmd='ALL_LANGS=\"$(ALL_LANGS)\" workdir/LinkTarget/Executable/pocheck'\npocheck: | $(call gb_Executable_get_runtime_target,pocheck)\n\tALL_LANGS=\"$(ALL_LANGS)\" $(call gb_Executable_get_command,pocheck) 2>&1 | tee $${POCHECK_LOG:-/tmp/pocheck.log}\n\n# vim: set noet sw=4 ts=4:\n"
        },
        {
          "name": "Makefile.in",
          "type": "blob",
          "size": 20.7587890625,
          "content": "# -*- Mode: makefile-gmake; tab-width: 4; indent-tabs-mode: t -*-\n#\n# This file is part of the LibreOffice project.\n#\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n#\n\ngb_Top_MODULE_CHECK_TARGETS := slowcheck unitcheck subsequentcheck perfcheck uicheck screenshot\n\n.PHONY : check-if-root bootstrap gbuild build build-non-l10n-only build-l10n-only check clean clean-build clean-host test-install distclean distro-pack-install docs download etags fetch get-submodules id install install-gdb-printers install-strip tags debugrun help showmodules translations packageinfo coverage internal.clean $(gb_Top_MODULE_CHECK_TARGETS)\n\nMAKECMDGOALS?=build\nbuild_goal:=$(if $(filter build uicheck,$(MAKECMDGOALS)),build)\\\n $(if $(filter check,$(MAKECMDGOALS)),unitcheck slowcheck subsequentcheck $(if $(filter Linux, $(shell uname)), uicheck))\\\n $(filter build-l10n-only build-non-l10n-only debugrun help showmodules translations $(gb_Top_MODULE_CHECK_TARGETS) check packageinfo gbuildtojson,$(MAKECMDGOALS))\n\nSRCDIR := @SRC_ROOT@\nBUILDDIR := @BUILDDIR@\nCOMPILER_PLUGINS := @COMPILER_PLUGINS@\nGIT_BUILD := $(if $(wildcard $(SRCDIR)/.git),T)\n\n# Run autogen.sh if needed and force make to restart itself.\n# ... but there are several cases where we do not want to run\n# autogen.sh:\n# 1. if we are building from tarballs, not git checkout (I do not\n#    think packagers would ever want that. I certainly do not.)\n# 2. if we are making help, clean or distclean, because they do not\n#    need updated configuration\nifeq (,$(MAKE_RESTARTS)$(if $(GIT_BUILD),,T)$(if $(filter-out help showmodules clean distclean,$(MAKECMDGOALS)),,T))\n\n# note: this must touch both Makefile and $(BUILDDIR)/Makefile, because make\n# may be invoked using either of these paths, and it will restart itself only\n# if the updated target is exactly the same path as the Makefile it is using\n.PHONY : force-restart\nMakefile $(BUILDDIR)/Makefile: $(BUILDDIR)/config_host.mk $(BUILDDIR)/config_host_lang.mk force-restart\n\t@touch $@\n\n# run configure in an environment not polluted by config_host.mk\nifneq ($(MSYSTEM),)\nWSL:=@WSL@\n# wsl needs unix-style path into windows realm\n$(BUILDDIR)/config_host.mk : SRCDIR:=/$(shell $(WSL) wslpath -u $(SRCDIR))\nendif\n$(BUILDDIR)/config_host.mk : $(wildcard \\\n\t\t$(SRCDIR)/autogen.sh \\\n\t\t$(SRCDIR)/config_host.mk.in \\\n\t\t$(SRCDIR)/config_host_lang.mk.in \\\n\t\t$(SRCDIR)/Makefile.in \\\n\t\t$(SRCDIR)/instsetoo_native/util/openoffice.lst.in \\\n\t\t$(SRCDIR)/configure.ac \\\n\t\t$(SRCDIR)/config_host/*.h.in \\\n\t\t$(SRCDIR)/download.lst \\\n\t\t$(SRCDIR)/m4/*.m4 \\\n\t\t$(BUILDDIR)/autogen.input \\\n\t\t$(BUILDDIR)/autogen.lastrun \\\n\t\t) \\\n\t\t$(shell if test -n '$(JAVA_HOME)' -a ! -d '$(JAVA_HOME)'; then echo force-restart; fi)\n\tsh -c \"$(if $(MSYSTEM),$(WSL) )$(SRCDIR)/autogen.sh\"\n\nelse # MAKE_RESTARTS\n\n.DEFAULT_GOAL := build\n\n# Nested test is to check if the systemd-detect-virt command doesn't exist or it reports we're not\n# in a container:\ncheck-if-root:\n\t@if test ! `uname` = 'Haiku' -a `id -u` = 0; then \\\n\t\tif test ! -x \"$$(command -v systemd-detect-virt)\" || ! systemd-detect-virt -c -q; then \\\n\t\t\techo; \\\n\t\t\techo 'Building LibreOffice as root is a very bad idea, use a regular user.'; \\\n\t\t\techo; \\\n\t\t\texit 1; \\\n\t\tfi \\\n\tfi\n\ngb_Side ?= host\n\ninclude $(BUILDDIR)/config_$(gb_Side).mk\n\nexport GMAKE_OPTIONS?=-r$(if $(verbose),,s)$(value $(MAKEFLAGS))\n\nPARALLELISM_OPTION := $(if $(filter-out 0,$(PARALLELISM)),-j $(PARALLELISM),)\n\n#\n# Partial Build\n#\ndefine gb_Top_GbuildModuleRules\n.PHONY: $(1) $(1).build $(1).all $(1).check $(1).clean $(1).showdeliverables $(1).coverage $(foreach target,$(gb_Top_MODULE_CHECK_TARGETS),$(1).$(target))\n.PHONY: $(1).allbuild $(1).buildall $(1).allcheck $(1).checkall\n\n$(1): bootstrap fetch\n\t$(KEEP_AWAKE_CMD) cd $(SRCDIR)/$(2) && $$(MAKE) $(PARALLELISM_OPTION) $(GMAKE_OPTIONS)\n\n$(1).build $(1).check $(1).coverage $(foreach target,$(gb_Top_MODULE_CHECK_TARGETS),$(1).$(target)): bootstrap fetch\n\t$(KEEP_AWAKE_CMD) cd $(SRCDIR)/$(2) && $$(MAKE) $(PARALLELISM_OPTION) $(GMAKE_OPTIONS) $$(patsubst $(1).%,%,$$@)\n\n$(1).clean $(1).showdeliverables:\n\tcd $(SRCDIR)/$(2) && $$(MAKE) $(PARALLELISM_OPTION) $(GMAKE_OPTIONS) $$(patsubst $(1).%,%,$$@)\n\n$(1).allbuild $(1).buildall: bootstrap fetch\n\t$(KEEP_AWAKE_CMD) $$(MAKE) $(PARALLELISM_OPTION) $(GMAKE_OPTIONS) -f $(SRCDIR)/Makefile.gbuild $(WORKDIR)/Module/$(1)\n\n$(1).allcheck $(1).checkall: bootstrap fetch\n\t$(KEEP_AWAKE_CMD) $$(MAKE) $(PARALLELISM_OPTION) $(GMAKE_OPTIONS) -f $(SRCDIR)/Makefile.gbuild $(WORKDIR)/Module/$(1) $(WORKDIR)/Module/check/$(1) $(WORKDIR)/Module/slowcheck/$(1)\n\n$(1).all:\n\t@echo \"'make $(1).all' was renamed to 'make $(1).allcheck' (or use 'make $(1).allbuild' to build without unit tests)\"\n\t@exit 42\n\nendef\n\ndefine gb_Top_GbuildModulesRules\n$(foreach m,$(1),$(call gb_Top_GbuildModuleRules,$(notdir $(m)),$(m)))\nendef\n\ngbuild_modules := $(patsubst $(SRCDIR)/%/,%,$(dir $(wildcard $(SRCDIR)/*/Module_*.mk $(SRCDIR)/external/*/Module_*.mk)))\n\ngbuild_internal_modules := $(filter-out odk external,$(patsubst $(SRCDIR)/%/,%,$(dir $(wildcard $(SRCDIR)/*/Module_*.mk))))\n\ninternal.clean: $(addsuffix .clean,$(gbuild_internal_modules))\n\n\n$(eval $(call gb_Top_GbuildModulesRules,$(gbuild_modules)))\n\ngbuild_TARGETS := AllLangHelp \\\n\tAllLangMoTarget \\\n\tAllLangPackage \\\n\tAutoInstall \\\n\tCliLibrary \\\n\tCliNativeLibrary \\\n\tCliUnoApi \\\n\tCompilerTest \\\n    ComponentTarget \\\n\tConfiguration \\\n\tCppunitTest \\\n\tCustomTarget \\\n\tDictionary \\\n\tDotnetLibrary \\\n\tDotnetTest \\\n\tExecutable \\\n\tExtension \\\n\tExtensionPackage \\\n\tExtensionPackageSet \\\n\tExternalPackage \\\n\tExternalProject \\\n\tGallery \\\n\tGeneratedPackage \\\n\tInstallModule \\\n\tInstallScript \\\n\tInternalUnoApi \\\n\tJar \\\n\tJunitTest \\\n\tLibrary \\\n\tModule \\\n\tPackage \\\n\tPackageSet \\\n\tPagein \\\n\tPostprocess \\\n\tPyuno \\\n\tPythonTest \\\n\tRdb \\\n\tSdiTarget \\\n\tStaticLibrary \\\n\tUIConfig \\\n\tUITest \\\n\tUnoApi \\\n\tUnpackedTarball \\\n\tWinResTarget \\\n\tZip \\\n\n# build a generic gbuild target\n$(foreach target,$(gbuild_TARGETS),$(target)_% $(foreach module,$(gbuild_modules),$(target)_$(module)/%)) UIConfig_modules/% %.genpatch: bootstrap fetch\n\t$(KEEP_AWAKE_CMD) $(MAKE) $(PARALLELISM_OPTION) $(GMAKE_OPTIONS) -f $(SRCDIR)/Makefile.gbuild $@\n\n$(gbuild_TARGETS):\n\t$(KEEP_AWAKE_CMD) $(MAKE) $(PARALLELISM_OPTION) $(GMAKE_OPTIONS) -f $(SRCDIR)/Makefile.gbuild $@\n\n#\n# Clean\n#\nclean: clean-host clean-build\n\nclean-host:\n\trm -fr $(TESTINSTALLDIR)\n\trm -fr $(INSTDIR)\n\trm -fr $(WORKDIR)\n\nclean-build:\nifneq ($(CROSS_COMPILING),)\n\trm -fr $(INSTDIR_FOR_BUILD)\n\trm -fr $(WORKDIR_FOR_BUILD)\nifeq ($(OS),ANDROID)\n\trm -fr $(BUILDDIR)/android/obj\n\trm -fr $(BUILDDIR)/android/jniLibs\n\trm -fr $(SRCDIR)/android/source/build\n\trm -fr $(SRCDIR)/android/source/assets\n\trm -fr $(SRCDIR)/android/source/assets_fullUI\n\trm -fr $(SRCDIR)/android/source/assets_strippedUI\n\trm -fr $(SRCDIR)/android/source/res_generated\nendif\nendif\n\ninclude $(SRCDIR)/compilerplugins/Makefile.mk\n\n#\n# Distclean\n#\ndistclean : clean compilerplugins-clean mac-app-store-package.clean\n\trm -fr \\\n        $(BUILDDIR)/Makefile \\\n        $(BUILDDIR)/aclocal.m4 \\\n        $(BUILDDIR)/autom4te.cache \\\n        $(BUILDDIR)/bin/bffvalidator.sh \\\n        $(BUILDDIR)/bin/odfvalidator.sh \\\n        $(BUILDDIR)/bin/officeotron.sh \\\n        $(BUILDDIR)/config.Build.log \\\n        $(BUILDDIR)/config.Build.warn \\\n        $(BUILDDIR)/config.log \\\n        $(BUILDDIR)/config.status \\\n        $(BUILDDIR)/config.warn \\\n        $(BUILDDIR)/config_build.mk \\\n        $(BUILDDIR)/config_build_lang.mk \\\n        $(BUILDDIR)/config_build \\\n        $(BUILDDIR)/config_host.mk \\\n        $(BUILDDIR)/config_host.mk.stamp \\\n        $(BUILDDIR)/config_host_lang.mk \\\n        $(BUILDDIR)/config_host_lang.mk.stamp \\\n        $(BUILDDIR)/config_host/*.h \\\n        $(BUILDDIR)/configure \\\n        $(BUILDDIR)/hardened_runtime.xcent \\\n        $(BUILDDIR)/instsetoo_native/util/openoffice.lst \\\n        $(BUILDDIR)/solenv/lockfile/autoconf.h \\\n        $(BUILDDIR)/lo.xcent \\\n        $(BUILDDIR)/sysui/desktop/macosx/Info.plist \\\n        $(BUILDDIR)/vs-code*.code-workspace*\n\t$(if $(filter WNT,$(OS)),env -i PATH=\"$$PATH\") $(FIND) $(SRCDIR)/solenv/gdb -name \\*.pyc -exec rm -f {} \\;\n\n#\n# custom command\n#\ncmd:\n\t$(if $(verbose),echo \"custom cmd\" &&) ( $(cmd) )\n\n#\n# Fetch\n#\nifneq ($(DO_FETCH_TARBALLS),)\ninclude $(SRCDIR)/Makefile.fetch\nfetch: download\nfetch: get-submodules\n\nifneq (,$(wildcard $(SRCDIR)/.git))\nget-submodules:\nifneq ($(foreach i,$(GIT_NEEDED_SUBMODULES),$(SRCDIR)/$(i)/.git),$(wildcard $(foreach i,$(GIT_NEEDED_SUBMODULES),$(SRCDIR)/$(i)/.git)))\n\tcd $(SRCDIR) && ./g -f clone\nendif\nifeq ($(shell test -d $(SRCDIR)/.git; echo $$?),0)\n\t@cd $(SRCDIR) && ./g -z # make sure the git hooks are in place even if no submodules are needed\nendif\n\nelse # these sources are from a tarball, so get the other source tarballs\ngb_LO_VER := $(shell . $(SRCDIR)/sources.ver && echo $$lo_sources_ver)\n$(if $(gb_LO_VER),,$(error Error while retrieving $$lo_sources_ver from $(SRCDIR)/sources.ver))\n\nget-submodules: | download\nifneq ($(foreach i,$(subst helpcontent2,help,$(GIT_NEEDED_SUBMODULES)),$(SRCDIR)/src/libreoffice-$(i)-$(gb_LO_VER)),$(wildcard $(foreach i,$(subst helpcontent2,help,$(GIT_NEEDED_SUBMODULES)),$(SRCDIR)/src/libreoffice-$(i)-$(gb_LO_VER))))\n\t$(foreach i,$(subst helpcontent2,help,$(GIT_NEEDED_SUBMODULES)),\\\n\t\t$(call fetch_Download_item_unchecked,https://download.documentfoundation.org/libreoffice/src/$(shell echo $(gb_LO_VER) | sed -e \"s/\\([0-9]*\\.[0-9]*\\.[0-9]*\\).*/\\1/\"),libreoffice-$(i)-$(gb_LO_VER).tar.xz))\n\t$(SRCDIR)/bin/unpack-sources $(SRCDIR) $(foreach i,$(subst helpcontent2,help,$(GIT_NEEDED_SUBMODULES)),\\\n\t\t$(TARFILE_LOCATION)/libreoffice-$(i)-$(gb_LO_VER).tar.xz)\nendif\n\nendif\n\nelse\nfetch:\n\t@echo \"Automatic fetching of external tarballs is disabled.\"\n\nendif\n\n#\n# Bootstrap\n#\nbootstrap: check-if-root compilerplugins\n\n#\n# Build\n#\n# Note: this will pipe through all gbuild targets to ... gbuild\n#       with some translations like \"check\"->\"unitcheck subsequentcheck uicheck\" for historic reasons\n#\nbuild: bootstrap fetch $(if $(CROSS_COMPILING),cross-toolset,install-gdb-printers) \\\n    $(if $(filter check,$(MAKECMDGOALS)),$(if $(COMPILER_PLUGINS),$(if $(LODE_HOME),clang-format-check)))\n\t$(KEEP_AWAKE_CMD) $(MAKE) $(PARALLELISM_OPTION) $(IWYU_OPTION) $(GMAKE_OPTIONS) -f $(SRCDIR)/Makefile.gbuild $(build_goal)\nifeq ($(OS),iOS)\n\t$(KEEP_AWAKE_CMD) $(MAKE) $(PARALLELISM_OPTION) $(GMAKE_OPTIONS) ios\nendif\n\nbuild-non-l10n-only build-l10n-only check debugrun translations packageinfo coverage $(gb_Top_MODULE_CHECK_TARGETS): build\n\nhelp showmodules gbuildtojson pocheck:\n\t$(MAKE) $(PARALLELISM_OPTION) $(GMAKE_OPTIONS) -f $(SRCDIR)/Makefile.gbuild $@\n\ncross-toolset: bootstrap fetch install-gdb-printers\n# fetch again in case there are externals only needed on build platform\nifneq ($(OS),iOS)\n\t$(MAKE) gb_Side=build $(PARALLELISM_OPTION) $(GMAKE_OPTIONS) -f $(BUILDDIR)/Makefile fetch\nendif\n\t$(MAKE) gb_Side=build $(PARALLELISM_OPTION) $(GMAKE_OPTIONS) -f $(SRCDIR)/Makefile.gbuild build-tools\n\ninstall-gdb-printers:\nifneq ($(filter-out WNT MACOSX iOS,$(OS)),)\nifneq ($(INSTDIR_FOR_BUILD),$(INSTDIR))\n\tmkdir -p $(INSTDIR_FOR_BUILD)\n\t$(SRCDIR)/solenv/bin/install-gdb-printers -a $(INSTDIR_FOR_BUILD) -c\nendif\n\tmkdir -p $(INSTDIR)\n\t$(SRCDIR)/solenv/bin/install-gdb-printers -a $(INSTDIR) -c\nendif\n\n\n#\n# Install\n#\n\ndefine gb_Top_DoInstall\necho \"$(1) in $(INSTALLDIR) ...\" && \\\nWITH_LANG_LIST=\"$(WITH_LANG_LIST)\" $(SRCDIR)/solenv/bin/ooinstall $(2) \"$(INSTALLDIR)\"\n\nendef\n\nifneq ($(OS),MACOSX)\ndefine gb_Top_InstallFinished\necho && echo \"If you want to edit the .ui files with glade first execute:\" && \\\necho && echo \"export GLADE_CATALOG_SEARCH_PATH=$(2)/share/glade\" && \\\necho && echo \"$(1) finished, you can now execute:\" && \\\necho \"$(2)/program/soffice\"\n\nendef\nelse\ndefine gb_Top_InstallFinished\necho && echo \"$(1) finished, you can now run: \" && \\\necho \"open $(2)/$(PRODUCTNAME).app\" && \\\necho \"\" && \\\necho \"To debug: gdb $(2)/$(PRODUCTNAME).app/Contents/MacOS/soffice\"\n\nendef\nendif\n\nifneq ($(OS),MACOSX)\ninstall:\n\t@$(call gb_Top_DoInstall,Installing,)\n\t@$(call gb_Top_InstallFinished,Installation,$(INSTALLDIR))\n\ninstall-strip:\n\t@$(call gb_Top_DoInstall,Installing and stripping binaries,--strip)\n\t@$(call gb_Top_InstallFinished,Installation,$(INSTALLDIR))\nendif # !MACOSX\n\ntest-install: build\n\t@rm -rf $(TESTINSTALLDIR)\n\t@mkdir -p $(TESTINSTALLDIR)\nifeq ($(OS_FOR_BUILD),WNT)\n\tcd $(SRCDIR)/instsetoo_native && $(MAKE) LIBO_TEST_INSTALL=TRUE $(GMAKE_OPTIONS)\nelse\n\t@WITH_LANG_LIST=\"$(WITH_LANG_LIST)\" $(SRCDIR)/solenv/bin/ooinstall $(TESTINSTALLDIR)\nifeq ($(OS),MACOSX)\n#\n# Create Resources/*.lproj directories for languages supported by macOS\n\tset -x; for lang in ca cs da de el en es fi fr hr hu id it ja ko ms nl no pl pt pt_PT ro ru sk sv th tr uk vi zh_CN zh_TW; do \\\n\t\tlproj=$(TESTINSTALLDIR)/$(PRODUCTNAME_WITHOUT_SPACES).app/Contents/Resources/$$lang.lproj; \\\n\t\tmkdir \"$$lproj\"; \\\n\tdone\n#\n# Remove unnecessary executables in the LibreOfficePython framework\n\trm -rf $(TESTINSTALLDIR)/$(PRODUCTNAME_WITHOUT_SPACES).app/Contents/Frameworks/LibreOfficePython.framework/Versions/[1-9]*/bin\n#\n# Remove the python.o object file which is weird and interferes with app store uploading\n# And with it removed, presumably the other stuff in the Python lib/python3.3/config-3.3m probably does not make sense either.\n\trm -rf $(TESTINSTALLDIR)/$(PRODUCTNAME_WITHOUT_SPACES).app/Contents/Frameworks/LibreOfficePython.framework/Versions/[1-9]*/lib/python[1-9]*/config-[1-9]*\n#\nifneq ($(ENABLE_MACOSX_SANDBOX),)\n\n# Remove the gengal binary that we hardly need and the shell scripts\n# for which code signatures (stored as extended attributes) won't\n# survive upload to the App Store anyway. See\n# https://developer.apple.com/library/content/documentation/Security/Conceptual/CodeSigningGuide/Procedures/Procedures.html#//apple_ref/doc/uid/TP40005929-CH4-TNTAG201\n# We could put the shell scripts somewhere in Resources instead, but\n# no 3rd-party code that would be interested in them would look there\n# anyway.\n\trm $(TESTINSTALLDIR)/$(PRODUCTNAME_WITHOUT_SPACES).app/Contents/MacOS/gengal\n\trm $(TESTINSTALLDIR)/$(PRODUCTNAME_WITHOUT_SPACES).app/Contents/MacOS/unopkg\n\trm $(TESTINSTALLDIR)/$(PRODUCTNAME_WITHOUT_SPACES).app/Contents/MacOS/unoinfo\nendif\nifneq ($(MACOSX_PROVISIONING_PROFILE),)\n\tcp \"$(MACOSX_PROVISIONING_PROFILE)\" $(TESTINSTALLDIR)/$(PRODUCTNAME_WITHOUT_SPACES).app/Contents/embedded.provisionprofile\nendif\nifneq ($(MACOSX_CODESIGNING_IDENTITY),)\n# Then use the macosx-codesign-app-bundle script\n\t@$(SRCDIR)/solenv/bin/macosx-codesign-app-bundle $(TESTINSTALLDIR)/$(PRODUCTNAME_WITHOUT_SPACES).app\nendif\nendif\nendif\n\t@$(call gb_Top_InstallFinished,Test Installation,$(TESTINSTALLDIR))\n\n# target to bypass the packaging steps/to only assemble the package\nmac-app-store-package.prepare: $(BUILDDIR)/$(PLATFORMID)/done\n\n# shorthand target to build a complete package for the currently building architecture\nmac-app-store-package: mac-app-store-package.$(PLATFORMID)\n\n# recipe/targets to do the actual packaging\n# the symbolication switch to productbuild unfortunately is undocumented, but that is what XCode\n# uses when it creates a package with symbols for uploading to the appstore\nmac-app-store-package.$(PLATFORMID) mac-app-store-package.universal: mac-app-store-package.%: $(BUILDDIR)/%/done\nifneq ($(MACOSX_PACKAGE_SIGNING_IDENTITY),)\n\t$(SRCDIR)/solenv/bin/macosx-codesign-app-bundle $*/\"$(PRODUCTNAME)\".app\n\tproductbuild $(if $(ENABLE_SYMBOLS_FOR),--symbolication $*/Symbols) --component $*/\"$(PRODUCTNAME)\".app /Applications --sign $(MACOSX_PACKAGE_SIGNING_IDENTITY) $(PRODUCTNAME_WITHOUT_SPACES).pkg\nelse\n\t@echo You did not provide an installer signing identity with --enable-macosx-package-signing\n\t@exit 1\nendif\n\n# the builds need to persist a standard \"make clean\" to be able to combine them into a universal\n# binary, so provide an additional target that can be used standalone or via make distclean\nmac-app-store-package.clean:\n\trm -rf \\\n\t    $(BUILDDIR)/macosx_x86_64 \\\n\t    $(BUILDDIR)/macosx_aarch64 \\\n\t    $(BUILDDIR)/universal \\\n\t    $(BUILDDIR)/$(PRODUCTNAME_WITHOUT_SPACES).pkg\n\n# used by the mac-app-store targets\n$(BUILDDIR)/$(PLATFORMID)/done: test-install\n\trm -rf   $(PLATFORMID)\n\tmkdir -p $(PLATFORMID)/Symbols\n\tmv $(TESTINSTALLDIR)/$(PRODUCTNAME_WITHOUT_SPACES).app $(PLATFORMID)/\"$(PRODUCTNAME)\".app\nifneq ($(ENABLE_SYMBOLS_FOR),)\n\tsymbols -arch all -symbolsPackageDir $(PLATFORMID)/Symbols $(PLATFORMID)/\"$(PRODUCTNAME)\".app/Contents/Frameworks/[^Li]* $(PLATFORMID)/\"$(PRODUCTNAME)\".app/Contents/Frameworks/intl/l* $(PLATFORMID)/\"$(PRODUCTNAME)\".app/Contents/MacOS/*\n\tstrip -S                                                   $(PLATFORMID)/\"$(PRODUCTNAME)\".app/Contents/Frameworks/[^Li]* $(PLATFORMID)/\"$(PRODUCTNAME)\".app/Contents/Frameworks/intl/l* $(PLATFORMID)/\"$(PRODUCTNAME)\".app/Contents/MacOS/*\nendif\n\ttouch $@\n\n# build one arch using the mac-app-store-package.prepare target, make clean and change the autogen.input\n# to build for the other target, then use mac-app-store-package.universal to build for the other arch and\n# combine the two into a universal binary\n$(BUILDDIR)/universal/done: $(BUILDDIR)/macosx_x86_64/done $(BUILDDIR)/macosx_aarch64/done\n\trm -rf universal\n\tmkdir -p universal/Symbols\nifneq ($(ENABLE_SYMBOLS_FOR),)\n\tcp -a macosx_x86_64/Symbols/* macosx_aarch64/Symbols/* universal/Symbols/\nendif\n\t$(SRCDIR)/bin/merge-app-bundles macosx_x86_64/\"$(PRODUCTNAME)\".app macosx_aarch64/\"$(PRODUCTNAME)\".app universal/\"$(PRODUCTNAME)\".app\n\ttouch $@\n\ndistro-pack-install: install\n\tWITH_LANG_LIST=\"$(WITH_LANG_LIST)\" WITH_POOR_HELP_LOCALIZATIONS=\"$(WITH_POOR_HELP_LOCALIZATIONS)\" $(SRCDIR)/bin/distro-install-clean-up\n\t$(SRCDIR)/bin/distro-install-desktop-integration\n\t$(SRCDIR)/bin/distro-install-sdk\n\tWITH_LANG_LIST=\"$(WITH_LANG_LIST)\" $(SRCDIR)/bin/distro-install-file-lists\n\ninstall-package-%:\n\t$(MAKE) $(GMAKE_OPTIONS) -f $(SRCDIR)/Makefile.gbuild $@\n\nid:\n\t@$(SRCDIR)/solenv/bin/create-ids\n\ntags:\n\t@$(SRCDIR)/solenv/bin/create-tags\n\netags:\n\t@$(SRCDIR)/solenv/bin/create-tags -e\n\ndocs:\n\t@$(SRCDIR)/solenv/bin/mkdocs.sh $(SRCDIR)/docs $(SRCDIR)/solenv/inc/doxygen.cfg\n\nfindunusedheaders:\n\t$(SRCDIR)/bin/find-unusedheaders.py\n\nsymbols:\n\trm -fr $(WORKDIR)/symbols/\n\tmkdir -p $(WORKDIR)/symbols/\nifeq ($(OS),WNT)\n\t$(SRCDIR)/bin/symbolstore.py $(WORKDIR)/UnpackedTarball/breakpad/src/tools/windows/dump_syms/Release/dump_syms.exe $(WORKDIR)/symbols/ $(INSTDIR)/program/\n\t$(SRCDIR)/bin/symstore.sh\nelse\n\t$(SRCDIR)/bin/symbolstore.py $(WORKDIR)/UnpackedTarball/breakpad/src/tools/linux/dump_syms/dump_syms $(WORKDIR)/symbols/ $(INSTDIR)/program/*\nendif\n\n\tcd $(WORKDIR)/symbols/ && zip -r $(WORKDIR)/symbols.zip *\n\ncreate-mar:\n\trm -fr $(WORKDIR)/installation/mar/\n\trm -fr $(WORKDIR)/installation/temp/\n\tmkdir -p $(WORKDIR)/installation/temp/\n\tmkdir -p $(WORKDIR)/installation/mar/\n\ttar -xzf $(WORKDIR)/installation/LibreOfficeDev/archive/install/en-US/LibreOffice* -C $(WORKDIR)/installation/temp/\n\t$(SRCDIR)/bin/update/make_full_update.sh $(WORKDIR)/installation/mar/test.mar $(WORKDIR)/installation/temp/*/\n\nupload-symbols:\n\t$(MAKE) -f $(SRCDIR)/Makefile.gbuild upload-symbols\n\ncreate-update-info:\n\t$(MAKE) -f $(SRCDIR)/Makefile.gbuild create-update-info\n\ncreate-partial-info:\n\t$(MAKE) -f $(SRCDIR)/Makefile.gbuild create-partial-info\n\ndump-deps:\n\t@$(SRCDIR)/bin/module-deps.pl $(if $(verbose),-v) $(MAKE) $(SRCDIR)/Makefile.gbuild\n\ndump-deps-png:\n\t@$(SRCDIR)/bin/module-deps.pl $(if $(verbose),-v) $(MAKE) $(SRCDIR)/Makefile.gbuild | dot -Tpng -o lo.png\n\ndump-deps-sort:\n\t@$(SRCDIR)/bin/module-deps.pl -t $(if $(verbose),-v) $(MAKE) $(SRCDIR)/Makefile.gbuild\n\nclang-format-check:\n\t@$(SRCDIR)/solenv/clang-format/check-last-commit\n\ndefine gb_Top_GbuildToIdeIntegration\n$(1)-ide-integration: gbuildtojson $(if $(filter MACOSX,$(OS_FOR_BUILD)),python3.allbuild)\n\tcd $(SRCDIR) && \\\n\t\t$(if $(filter MACOSX,$(OS_FOR_BUILD)),PATH=\"$(INSTROOT_FOR_BUILD)/Frameworks/LibreOfficePython.framework/Versions/Current/bin:$(PATH)\") \\\n\t\t$(if $(filter WNT,$(OS_FOR_BUILD)$(PYTHON_FOR_BUILD)),$(INSTROOT_FOR_BUILD)/program/python.exe) \\\n\t\tbin/gbuild-to-ide --ide $(1) --make $(MAKE)\n\nendef\n\n$(foreach ide,\\\n\tcodelite \\\n\tvs \\\n\tkdevelop \\\n\tvim \\\n\tqtcreator \\\n\txcode \\\n        eclipsecdt,\\\n$(eval $(call gb_Top_GbuildToIdeIntegration,$(ide))))\n\n# vscode integration is based on compile_commands.json, which is generated by vim-ide-integration\n# the workspace template created by configure doesn't provide advanced/fine grained targets but\n# rather supplies some useful settings and basic examples for run/debug configurations\n# this target is provided primarily for consistency with the other ide-integrations\nvscode-ide-integration: $(BUILDDIR)/vs-code.code-workspace vim-ide-integration\n\n# ToDo: there probably is a way to have it at least create the compile-commands.json file\n# for the vim/vs-code integration without building the registry stuff\nRdb:| fetch\ngbuildtojson: Rdb\n\n$(BUILDDIR)/vs-code.code-workspace: $(BUILDDIR)/vs-code.code-workspace.template\n\t@test -e $@ || cp $< $@ && \\\n\tcmp -s $@ $< || echo \"ATTN: $(@F) differs from $(<F), please check yourself for changes\"\n\nendif # MAKE_RESTARTS\n\n# vim: set noet sw=4 ts=4:\n"
        },
        {
          "name": "README.Solaris",
          "type": "blob",
          "size": 1.1220703125,
          "content": "Instructions to compile LO on Solaris with gcc\n\nDisclaimer\n----------\nThis is still work in progress\nCompiling LO on Solaris with gcc is a work done by Lanedo ( www.lanedo.com )\nAny inquiry could be sent to office-solaris@lanedo.com\n\n\nPrerequisites\n-------------\n\nA working Oracle Solaris 11 installation\n\n\nInstalling Dependencies\n-----------------------\n\nsudo -s\n\npkg install git make gcc-45 autoconf autogen automake-110 gnu-m4\n\npkg install pkg:/system/header@0.5.11-0.175.0.0.0.2.1\npkg install pkg:/developer/gperf@3.0.3-0.175.0.0.0.2.537\npkg install pkg:/developer/parser/bison@2.3-0.175.0.0.0.2.537\npkg install pkg:/developer/lexer/flex@2.5.35-0.175.0.0.0.2.537\npkg install pkg:/developer/documentation-tool/doxygen@1.5.7.1-0.175.0.0.0.2.537\n\n\nCompiling\n---------\n\nCC=\"gcc\" CXX=\"g++\" ./autogen.sh --with-num-cpus=2 --with-max-jobs=4 --without-junit --disable-mozilla --with-system-curl --without-help --disable-cups --without-java --with-system-cairo --with-lang= --enable-gio --disable-gnome-vfs --disable-gstreamer --without-fonts --with-system-dicts --disable-mozilla --without-system-mozilla --disable-xmlsec --with-system-openssl\n\ngmake\n\n\n"
        },
        {
          "name": "README.cross",
          "type": "blob",
          "size": 9.53125,
          "content": "Cross-compiling LibreOffice\n***************************\n\nCross-compilation works, to various degree, to the following\nplatforms: iOS, Android, and Raspbian.\n\nNote that this document has not been updated very often, and not\neverything here necessarily is true any more.\n\n\nGeneral\n-------\n\nIn GNU Autoconf terminology, \"build\" is the platform on which you are\nrunning a build of some software and \"host\" is the platform on which\nthe software you are building will run. Only in the specific case of\nbuilding compilers and other programming tools is the term \"target\"\nused to indicate the platform for which the tools your are building\nwill produce code. As LibreOffice is not a compiler, the \"target\" term\nshould not be used in the context of cross-compilation.\n\n(For a case where all three of \"build\", \"host\" and \"target\" are\ndifferent: consider a gcc cross-compiler running on Windows, producing\ncode for Android, where the cross-compiler itself was built on\nLinux. (This is a real case.) An interesting tidbit is that such\nconfigurations are called \"Canadian Cross\".)\n\nEven though the LibreOffice build mechanism is highly unorthodox, the\nconfigure script takes the normal --build and --host options like any\nGNU Autoconf -based configure script. To cross-compile, you basically\nneed just to specify a suitable --host option and things should work\nout nicely. In practice, many details need to be handled. See examples\nbelow.\n\nNote that in the case of LibreOffice, it is uncommon to run the\nconfigure script directly. Normally one uses the autogen.sh script.\nThe autogen.sh script reads command-line options from file called\nautogen.input if it exists. The typical way of working is to keep\nthe configure parameters in that file and edit it as needed.\n\n\nWhat is so hard, then?\n----------------------\n\nDespite the fact that the configure script takes normal --build and\n--host options, that is just the beginning. It was necessary to\nseparate tests for \"host\" and \"build\" platforms in the configure\nscript. See the git log for details. And the reasonably \"standard\"\nconfigure.in is just the top level; when we get down to the actual\nmakefilery used to build the bits of LibreOffice, it gets much worse.\n\n\niOS\n***\n\niOS is the operating system on Apple's mobile devices. Clearly for a\ndevice like the iPad it would not be acceptable to run a normal\nLibreOffice application with overlapping windows and mouse-oriented\nGUI widgets.\n\nIt makes sense to use only a part of LibreOffice's code for iOS. Lots\nof the GUI-oriented code should be left out. iOS apps that want to use\nthe applicable LibreOffice code will handle all their GUI in a\nplatform-dependent manner. How well it will be possible to do such a\nsplit remains to be seen.\n\nObviously we want it to be possible to eventually distribute apps\nusing LibreOffice code through the App Store. Technically, one\nimportant special aspect of iOS is that apps in the App Store are not\nallowed to load own dynamic libraries. (System libraries are used in\nthe form of dynamic libraries, just like on macOS, of which iOS is\na variant.)\n\nThus all the libraries in LibreOffice that normally are shared\nlibraries (DLLs on Windows, shared objects (.so) on Linux, dynamic\nlibraries on macOS (.dylib)) must be built as static archives\ninstead. This has some interesting consequences for how UNO is\nimplemented and used.\n\nAn iOS app is a \"bundle\" that contains a single executable. In an app\nusing LibreOffice code, that executable then contains the necessary\nLibreOffice libraries and UNO components statically linked.\n\nThe Apple tool-chain for iOS cross-building is available only for OS\nX. In order to be able to run and debug an app on an actual device\n(and not just the iOS Simulator) you need to be registered in the iOS\nDeveloper Program.\n\nHere is an autogen.input for iOS (device) using Xcode 4.6, on macOS 10.8:\n\n--build=i386-apple-darwin10.7.0\n--host=arm-apple-darwin10\n--enable-dbgutil\n--enable-debug\n--enable-werror\n\nFor the iOS Simulator, but note that building for the simulator is\nbroken at the moment (July 2014):\n\n--build=i386-apple-darwin10.7.0\n--host=arm-apple-darwin10\n--enable-ios-simulator\n--enable-dbgutil\n--enable-debug\n--enable-werror\n\nYou will have to install autoconf and automake yourself before running\nautogen.sh. They are no longer included in Xcode 4.3 and later (not\neven in the add-on \"command line tools\").\n\nThe -mmacosx-version-min=10.7 is necessary when building for the iOS\nsimulator to avoid clang replacing simple calls to fprintf with calls\nto fwrite$UNIX2003 which Xcode then warns that doesn't exist on iOS.\n\n\nAndroid\n*******\n\nFrom a technical point of view the core Android OS (the kernel) is\nLinux, but everything else is different. Unlike iOS, an Android app\ncan use shared objects just fine, so that aspect of UNO doesn't need\nspecial handling. Except that there is a silly low limit in the\nAndroid dynamic linker on the number of libraries you can dlopen. This\nis a limitation in user-level (but system-provided and not really\nreplaceable) code, not the kernel.\n\nThus, just like for iOS, also for Android the LibreOffice libraries\nand UNO components are built as static archives. For Android, those\nstatic archives, and any app-specific native code, are linked into one\nsingle app-specific shared library, called liblo-native-code.so.\n\nFor the GUI, the same holds as said above for iOS. The GUI layer needs\nto be platform-specific, written in Java.\n\nAndroid cross-compilation work has been done mainly on Linux (openSUSE\nin particular). Earlier also cross-compiling from macOS was tried. The\nAndroid cross-compilation tool-chain (the \"Native Development Kit\", or\nNDK) is available for Linux, macOS and Windows, but trying to\ncross-compile LibreOffice from Windows will probably drive you insane.\n\nYou will also need the Android SDK as full \"make\" also builds a couple\nof Android apps where the upper layer is written in Java.\n\nUse the \"android\" tool from the SDK to install the SDK Tools, SDK\nPlatform Tools, the API 15 SDK Platform and the Android Support\nLibrary. If you want to run the Android apps in the emulator, you of\ncourse need an appropriate system image for that.\n\nHere is an autogen.input for Android on ARM when cross-compiling\nfrom Linux:\n\n--enable-dbgutil\n--enable-werror\n--with-distro=LibreOfficeAndroid\n--with-android-sdk=/path/to/android/sdk\n--with-android-ndk=/path/to/android/sdk/ndk/version\n\nAnd here is an (quite old) autogen.input for Android on X86:\n\n--with-android-ndk=/opt/libreoffice/android-ndk-r8b\n--with-android-ndk-toolchain-version=4.6\n--with-android-sdk=/opt/libreoffice/android-sdk-linux\n--build=i586-suse-linux\n--enable-ccache\n--with-distro=LibreOfficeAndroidX86\n\nA LibreOffice app for Android is being developed progress in the\nandroid/source directory.\n\nTo run the app, do \"make install\" followed by either \"make run\" or\nstarting it from Android itself. You most likely want to have an \"adb logcat\"\nrunning in another window. To debug, run \"make debugrun\".\n\nNB: If you happen to upgrade to Android SDK Tools 23, and the build (using\n'make verbose=t android') fails for you with:\n\n       [dx] UNEXPECTED TOP-LEVEL EXCEPTION:\n       [dx] java.io.FileNotFoundException: /local/libreoffice/android-sdk-linux/tools/support/annotations.jar (no such file or directory)\n\nyou need to copy the annotations.jar from an older sdk; like\n\nwget 'http://dl-ssl.google.com/android/repository/tools_r22.6.2-linux.zip'\nunzip tools_r22.6.2-linux.zip\ncp tools/support/annotations.jar <android-sdk-linux>/tools/support/\n\nRaspbian\n********\n\nIn theory, this should work also for another Linux, it does not need to be Raspbian.\nBut this cross-compilation work is tested from Debian and openSUSE to Raspbian.\n\nYou will need headers, pkg-config files and libraries from a Raspbian\nsystem to build against. Available at\nhttps://dev-www.libreoffice.org/extern/ . Look for the latest\nraspbian-root-*.tar.gz . For instance:\n\n$ wget https://dev-www.libreoffice.org/extern/raspbian-root-20140120.tar.gz\n$ mkdir raspbian-root\n$ cd raspbian-root\n$ tar -xf raspbian-root-20140120.tar.gz\n\nYou can build cross-compiler yourself or get the executables here:\n$ git clone git://github.com/raspberrypi/tools\n\ntools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian is known to work.\n\nThen create pkg-config wrapper, something like:\n$ cat > pkg-config-wrapper-host << _EOF\n#!/bin/sh\n\nif [ \"$CROSS_COMPILING\" = TRUE ]; then\n   SYSROOT=$HOME/lo/raspbian-root\n   export PKG_CONFIG_PATH=${SYSROOT}/usr/lib/arm-linux-gnueabihf/pkgconfig:${SYSROOT}/usr/share/pkgconfig\n   export PKG_CONFIG_LIBDIR=${SYSROOT}/usr/lib/pkgconfig\n   export PKG_CONFIG_SYSROOT_DIR=${SYSROOT}\nfi\n\nexec pkg-config \"\\$@\"\n_EOF\n$ chmod +x pkg-config-wrapper-host\n\nThis does not work with pkg-config 0.23. 0.26 is known to work.\n\nAnd you are ready to build with autogen.input similar to:\n\nPKG_CONFIG=<path-to-pkg-config-wrapper-host>\nCC=<path-to-arm-linux-gnueabihf-gcc> --sysroot=<path-to-raspbian_rootfs>\nCXX=<path-to-arm-linux-gnueabihf-g++> --sysroot=<path-to-raspbian_rootfs>\n--build=x86_64-unknown-linux-gnu\n--host=arm-unknown-linux-gnueabihf\n--disable-sdk\n--enable-python=system\nPYTHON_CFLAGS=-I<path-to-raspbian_rootfs>/usr/include/python2.7\nPYTHON_LIBS=-lpython2.7\n--with-java\nJAVAINC=-I<path-to-raspbian_rootfs>/usr/lib/jvm/java-6-openjdk-armhf/include\n--with-system-cairo\n--with-system-cppunit\n--with-system-icu\n--with-system-neon\n--with-system-nss\n--with-system-openldap\n--with-system-openssl\n--with-system-redland\n\nFinally, when you are ready to run the binaries in Raspbian,\nyou may need to get more system libraries, who knows.\n$ sudo apt-get install libreoffice # or similar\nThat installs libreoffice too, which you don't need because you have\njust built one, but I don't know how to avoid it easily.\n"
        },
        {
          "name": "README.help.md",
          "type": "blob",
          "size": 2.0693359375,
          "content": "# LibreOffice help build\n\nLibreOffice can build three kinds of help output from helpcontent2:\n\n* XML (local, bundled with LibreOffice < 6.0)\n* HTML (local, bundled with LibreOffice >= 6.0)\n* HTML (online)\n\nBoth local help variants can be included in help-packs, which might be bundled\nwith the installer or provided as separate packages. They are supposed to be\ninstalled by a user to provide localized help. Both HTML-based help types are\ndisplayed in a browser, while the XML help uses an internal viewer component.\n\nThe XML help is the only one supported in extensions.\n\n## configure options\n\n--with-help: selects the help type to build\n--with-omindex: prepares the online help for a Xapian Omega based search index\n--disable-xmlhelp: removes support for the XML help\n--with-helppack-integration: includes the help-packs in the installer\n\nAlso see `configure --help`.\n\n## XML help, bundled\n\nThis type was bundled per-default until LibreOffice 6.0.\n\nThis help output is generated by using two tools: HelpIndexer and HelpLinker.\nIt uses an internal viewer component. Extensions still use this help type to\nship their help. This output is originally based on JavaDoc.\n\nThe main support for this help type is in the following directories:\n\n* helpcompiler: tooling and support library\n* xmlhelp: the viewer component\n* desktop/source/deployment/registry/help: extensions / help-pack support\n\nMost code is \"marked\" by HAVE_FEATURE_XMLHELP precompiler blocks or conditioned\nby the XMLHELP flag in the $BUILD_TYPE variable.\n\nInterestingly the HelpIndexer and HelpLinker are used by gbuild to build the\nhelp inside bundled extensions, but both are not part of the LibreOffice SDK.\n\n## HTML help, bundled\n\nThis type is bundled per-default since LibreOffice 6.0 and displayed in a\nbrowser.\n\n## HTML help, online\n\nThis help is the external one, currently provided by help.libreoffice.org. It\ndiffers from the bundled HTML help in three main aspects:\n\n* has a language chooser widget\n* provides an additional Xapian Omega, CGI- / server-based search index\n* includes some additional multimedia assets\n\nIt is opened in a browser.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.8056640625,
          "content": "# LibreOffice\n[![Coverity Scan Build Status](https://scan.coverity.com/projects/211/badge.svg)](https://scan.coverity.com/projects/211) [![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/307/badge)](https://bestpractices.coreinfrastructure.org/projects/307) [![Translation status](https://weblate.documentfoundation.org/widgets/libo_ui-master/-/svg-badge.svg)](https://weblate.documentfoundation.org/engage/libo_ui-master/?utm_source=widget)\n\n<img align=\"right\" width=\"150\" src=\"https://opensource.org/wp-content/uploads/2009/06/OSIApproved.svg\">\n\nLibreOffice is an integrated office suite based on copyleft licenses\nand compatible with most document formats and standards. Libreoffice\nis backed by The Document Foundation, which represents a large\nindependent community of enterprises, developers and other volunteers\nmoved by the common goal of bringing to the market the best software\nfor personal productivity. LibreOffice is open source, and free to\ndownload, use and distribute.\n\nA quick overview of the LibreOffice code structure.\n\n## Overview\n\nYou can develop for LibreOffice in one of two ways, one\nrecommended and one much less so. First the somewhat less recommended\nway: it is possible to use the SDK to develop an extension,\nfor which you can read the [API docs](https://api.libreoffice.org/)\nand [Developers Guide](https://wiki.documentfoundation.org/Documentation/DevGuide).\nThis re-uses the (extremely generic) UNO APIs that are also used by\nmacro scripting in StarBasic.\n\nThe best way to add a generally useful feature to LibreOffice\nis to work on the code base however. Overall this way makes it easier\nto compile and build your code, it avoids any arbitrary limitations of\nour scripting APIs, and in general is far more simple and intuitive -\nif you are a reasonably able C++ programmer.\n\n## The Build Chain and Runtime Baselines\n\nThese are the current minimal operating system and compiler versions to\nrun and compile LibreOffice, also used by the TDF builds:\n\n* Windows:\n    * Runtime: Windows 10\n    * Build: Cygwin + Visual Studio 2019 version 16.10\n* macOS:\n    * Runtime: 10.15\n    * Build: 12 (13 for aarch64) + Xcode 14\n* Linux:\n    * Runtime: RHEL 8 or CentOS 8 and comparable\n    * Build: either GCC 12; or Clang 12 with libstdc++ 10\n* iOS (only for LibreOfficeKit):\n    * Runtime: 11.4 (only support for newer i devices == 64 bit)\n    * Build: Xcode 9.3 and iPhone SDK 11.4\n* Android:\n    * Build: NDK r23 and SDK 30.0.3\n* Emscripten / WASM:\n    * Runtime: a browser with SharedMemory support (threads + atomics)\n    * Build: Qt 5.15 with Qt supported Emscripten 1.39.8\n    * See [README.wasm](static/README.wasm.md)\n\nJava is required for building many parts of LibreOffice. In TDF Wiki article\n[Development/Java](https://wiki.documentfoundation.org/Development/Java), the\nexact modules that depend on Java are listed.\n\nThe baseline for Java is Java Development Kit (JDK) Version 17 or later.\n\nThe baseline for Python is version 3.11. It follows the version available\nin SUSE Linux Enterprise Desktop and the Maintenance Support version of\nRed Hat Enterprise Linux.\n\nIf you want to use Clang with the LibreOffice compiler plugins, the minimal\nversion of Clang is 12.0.1. Since Xcode doesn't provide the compiler plugin\nheaders, you have to compile your own Clang to use them on macOS.\n\nYou can find the TDF configure switches in the `distro-configs/` directory.\n\nTo setup your initial build environment on Windows and macOS, we provide\nthe LibreOffice Development Environment\n([LODE](https://wiki.documentfoundation.org/Development/lode)) scripts.\n\nFor more information see the build instructions for your platform in the\n[TDF wiki](https://wiki.documentfoundation.org/Development/How_to_build).\n\n## The Important Bits of Code\n\nEach module should have a `README.md` file inside it which has some\ndegree of documentation for that module; patches are most welcome to\nimprove those. We have those turned into a web page here:\n\n<https://docs.libreoffice.org/>\n\nHowever, there are two hundred modules, many of them of only\nperipheral interest for a specialist audience. So - where is the\ngood stuff, the code that is most useful. Here is a quick overview of\nthe most important ones:\n\nModule    | Description\n----------|-------------------------------------------------\n[sal/](sal)             | this provides a simple System Abstraction Layer\n[tools/](tools)         | this provides basic internal types: `Rectangle`, `Color` etc.\n[vcl/](vcl)             | this is the widget toolkit library and one rendering abstraction\n[framework/](framework) | UNO framework, responsible for building toolbars, menus, status bars, and the chrome around the document using widgets from VCL, and XML descriptions from `/uiconfig/` files\n[sfx2/](sfx2)           | legacy core framework used by Writer/Calc/Draw: document model / load/save / signals for actions etc.\n[svx/](svx)             | drawing model related helper code, including much of Draw/Impress\n\nThen applications\n\nModule    | Description\n----------|-------------------------------------------------\n[desktop/](desktop)  | this is where the `main()` for the application lives, init / bootstrap. the name dates back to an ancient StarOffice that also drew a desktop\n[sw/](sw/)           | Writer\n[sc/](sc/)           | Calc\n[sd/](sd/)           | Draw / Impress\n\nThere are several other libraries that are helpful from a graphical perspective:\n\nModule    | Description\n----------|-------------------------------------------------\n[basegfx/](basegfx)  | algorithms and data-types for graphics as used in the canvas\n[canvas/](canvas)   | new (UNO) canvas rendering model with various backends\n[cppcanvas/](cppcanvas) | C++ helper classes for using the UNO canvas\n[drawinglayer/](drawinglayer) | View code to render drawable objects and break them down into primitives we can render more easily.\n\n## Rules for #include Directives (C/C++)\n\nUse the `\"...\"` form if and only if the included file is found next to the\nincluding file. Otherwise, use the `<...>` form. (For further details, see the\nmail [Re: C[++]: Normalizing include syntax (\"\" vs\n<>)](https://lists.freedesktop.org/archives/libreoffice/2017-November/078778.html).)\n\nThe UNO API include files should consistently use double quotes, for the\nbenefit of external users of this API.\n\n`loplugin:includeform (compilerplugins/clang/includeform.cxx)` enforces these rules.\n\n\n## Finding Out More\n\nBeyond this, you can read the `README.md` files, send us patches, ask\non the mailing list libreoffice@lists.freedesktop.org (no subscription\nrequired) or poke people on IRC `#libreoffice-dev` on irc.libera.chat -\nwe're a friendly and generally helpful mob. We know the code can be\nhard to get into at first, and so there are no silly questions.\n\n## SAST Tools\n\n[PVS-Studio](https://pvs-studio.com/en/pvs-studio/?utm_source=website&utm_medium=github&utm_campaign=open_source) - static analyzer for C, C++, C#, and Java code.\n"
        },
        {
          "name": "Repository.mk",
          "type": "blob",
          "size": 31.4521484375,
          "content": "# -*- Mode: makefile-gmake; tab-width: 4; indent-tabs-mode: t -*-\n#\n# This file is part of the LibreOffice project.\n#\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n#\n# This file incorporates work covered by the following license notice:\n#\n#   Licensed to the Apache Software Foundation (ASF) under one or more\n#   contributor license agreements. See the NOTICE file distributed\n#   with this work for additional information regarding copyright\n#   ownership. The ASF licenses this file to you under the Apache\n#   License, Version 2.0 (the \"License\"); you may not use this file\n#   except in compliance with the License. You may obtain a copy of\n#   the License at http://www.apache.org/licenses/LICENSE-2.0 .\n#\n\nifneq ($(ENABLE_WASM_STRIP_CANVAS),TRUE)\n$(eval $(call gb_Helper_register_executables,NONE, \\\n\tcanvasdemo \\\n))\nendif\n\n$(eval $(call gb_Helper_register_executables,NONE, \\\n    $(call gb_Helper_optional,HELPTOOLS, \\\n\tHelpIndexer \\\n\tHelpLinker \\\n    ) \\\n\tbestreversemap \\\n\tcfgex \\\n\tconcat-deps \\\n\tcpp \\\n\tcppunittester \\\n\t$(if $(or $(filter EMSCRIPTEN,$(BUILD_TYPE_FOR_HOST)),$(filter EMSCRIPTEN,$(OS))),embindmaker wasmbridgegen) \\\n\tgbuildtojson \\\n\t$(if $(filter MSC,$(COM)), \\\n\t\tgcc-wrapper \\\n\t\tg++-wrapper \\\n\t) \\\n\tgencoll_rule \\\n\tgenconv_dict \\\n\tgendict \\\n\tgenindex_data \\\n\thelpex \\\n\tidxdict \\\n\tio-testconnection \\\n\tlangsupport \\\n\t$(if $(filter iOS,$(OS)),LibreOffice) \\\n\tlngconvex \\\n\tlocalize \\\n    $(call gb_CondExeLockfile,lockfile) \\\n\tmakedepend \\\n\tmbsdiff \\\n\tosl_process_child \\\n\tpdf2xml \\\n\tpdfunzip \\\n\tpdfverify \\\n\tpocheck \\\n\tpropex \\\n\tregsvrex \\\n\tsaxparser \\\n\tsvidl \\\n\t$(if $(ENABLE_ONLINE_UPDATE_MAR),\\\n\t\ttest_updater_dialog \\\n\t) \\\n\ttreex \\\n\tulfex \\\n\tunoidl-check \\\n\txrmex \\\n\t$(if $(filter-out ANDROID iOS WNT,$(OS)), \\\n        fftester \\\n        svpclient ) \\\n\t$(if $(filter LINUX %BSD SOLARIS,$(OS)), tilebench) \\\n\t$(if $(filter LINUX MACOSX SOLARIS WNT %BSD,$(OS)),icontest) \\\n\tvcldemo \\\n\tsvdemo \\\n\tminvcl \\\n\tminweld \\\n\tsvptest \\\n\ttiledrendering \\\n\tmtfdemo \\\n\tvisualbackendtest \\\n\tlistfonts \\\n\tlistglyphs \\\n\t$(if $(and $(ENABLE_GTK3), $(filter LINUX %BSD SOLARIS,$(OS))), gtktiledviewer) \\\n\t$(if $(and $(ENABLE_GTKTILEDVIEWER), $(filter WNT,$(OS))), gtktiledviewer) \\\n\t$(if $(filter MACOSX,$(OS)),QuickLookPreview) \\\n\t$(if $(filter MACOSX,$(OS)),QuickLookThumbnail) \\\n))\n\n$(eval $(call gb_Helper_register_executables_for_install,SDK,sdk, \\\n\t$(if $(ENABLE_CLI),\\\n\t\t$(if $(filter MSC,$(COM)),$(if $(filter-out AARCH64_TRUE,$(CPUNAME)_$(CROSS_COMPILING)),climaker)) \\\n\t) \\\n\tcppumaker \\\n\tjavamaker \\\n\tnetmaker \\\n    $(call gb_CondExeSp2bv,sp2bv) \\\n\t$(if $(filter ODK,$(BUILD_TYPE)),unoapploader) \\\n\tunoidl-read \\\n\tunoidl-write \\\n\t$(if $(filter ODK,$(BUILD_TYPE)),uno-skeletonmaker) \\\n))\n\nifneq ($(ENABLE_WASM_STRIP_ACCESSIBILITY),TRUE)\n$(eval $(call gb_Helper_register_executables_for_install,OOO,brand, \\\n\t$(if $(filter-out ANDROID HAIKU iOS MACOSX WNT,$(OS)),oosplash) \\\n))\nendif\n\n$(eval $(call gb_Helper_register_executables_for_install,OOO,brand, \\\n\t$(if $(ENABLE_ONLINE_UPDATE_MAR),\\\n\t\tmar \\\n\t\t$(if $(filter WNT,$(OS)), \\\n\t\t\tupdate_service \\\n\t\t) \\\n\t\tupdater )\\\n\t$(call gb_Helper_optional,BREAKPAD,minidump_upload) \\\n\t$(call gb_Helper_optional,FUZZERS,wmffuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,jpgfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,giffuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,xbmfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,xpmfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,pngfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,bmpfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,svmfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,pcdfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,dxffuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,metfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,ppmfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,psdfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,epsfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,pctfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,pcxfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,rasfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,tgafuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,tiffuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,hwpfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,602fuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,lwpfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,olefuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,pptfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,rtffuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,rtf2pdffuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,cgmfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,ww2fuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,ww6fuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,ww8fuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,qpwfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,slkfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,fodtfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,fodt2pdffuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,fods2xlsfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,fodsfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,fodpfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,xlsfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,schtmlfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,scrtffuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,wksfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,diffuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,docxfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,xlsxfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,pptxfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,mmlfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,mtpfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,htmlfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,sftfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,dbffuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,webpfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,zipfuzzer) \\\n\t$(call gb_Helper_optional,FUZZERS,svgfuzzer) \\\n\tsoffice_bin \\\n    $(call gb_CondExeUnopkg, \\\n        unopkg_bin \\\n        $(if $(filter WNT,$(OS)), \\\n            unopkg \\\n            unopkg_com \\\n        ) \\\n    ) \\\n\t$(if $(filter WNT,$(OS)), \\\n\t\tsoffice_exe \\\n\t\tsoffice_com \\\n\t\tsoffice_safe \\\n\t\tunoinfo \\\n\t\t$(if $(filter-out AARCH64,$(CPUNAME)),twain32shim) \\\n\t) \\\n))\n\n$(eval $(call gb_Helper_register_executables_for_install,OOO,base_brand, \\\n\t$(if $(filter WNT,$(OS)), \\\n\t\tsbase \\\n\t) \\\n))\n\n$(eval $(call gb_Helper_register_executables_for_install,OOO,base, \\\n\t$(if $(filter WNT,$(OS)), \\\n\t\todbcconfig \\\n\t) \\\n))\n\n$(eval $(call gb_Helper_register_executables_for_install,OOO,calc_brand, \\\n\t$(if $(filter WNT,$(OS)), \\\n\t\tscalc \\\n\t) \\\n))\n\n$(eval $(call gb_Helper_register_executables_for_install,OOO,draw_brand, \\\n\t$(if $(filter WNT,$(OS)), \\\n\t\tsdraw \\\n\t) \\\n))\n\n$(eval $(call gb_Helper_register_executables_for_install,OOO,impress_brand, \\\n\t$(if $(filter WNT,$(OS)), \\\n\t\tsimpress \\\n\t) \\\n))\n\n$(eval $(call gb_Helper_register_executables_for_install,OOO,math_brand, \\\n\t$(if $(filter WNT,$(OS)), \\\n\t\tsmath \\\n\t) \\\n))\n\n$(eval $(call gb_Helper_register_executables_for_install,OOO,writer_brand, \\\n\t$(if $(filter WNT,$(OS)), \\\n\t\tsweb \\\n\t\tswriter \\\n\t) \\\n))\n\n$(eval $(call gb_Helper_register_executables_for_install,OOO,ooo, \\\n\tgengal \\\n\t$(if $(filter WNT,$(OS)),,uri-encode) \\\n\t$(if $(filter WNT,$(OS)), \\\n\t\tsenddoc \\\n\t) \\\n\t$(if $(filter OPENCL,$(BUILD_TYPE)),opencltest) \\\n))\n\nifeq ($(OS),WNT)\n$(eval $(call gb_Helper_register_executables_for_install,OOO,quickstart, \\\n\tquickstart \\\n))\nendif\n\n$(eval $(call gb_Helper_register_executables_for_install,OOO,python, \\\n\t$(if $(filter WNT,$(OS)), \\\n\t\tpython \\\n\t) \\\n))\n\nifneq ($(ENABLE_POPPLER),)\n$(eval $(call gb_Helper_register_executables_for_install,OOO,pdfimport, \\\n\txpdfimport \\\n))\nendif\n\n$(eval $(call gb_Helper_register_executables_for_install,UREBIN,ure,\\\n\t$(if $(and $(ENABLE_JAVA),$(filter-out HAIKU MACOSX WNT,$(OS)),$(filter DESKTOP,$(BUILD_TYPE))),javaldx) \\\n    $(call gb_CondExeRegistryTools, \\\n        regview \\\n    ) \\\n    $(call gb_CondExeUno,uno) \\\n))\n\n$(eval $(call gb_Helper_register_libraries_for_install,OOOLIBS,base, \\\n\tabp \\\n\tdbp \\\n\tdbu \\\n))\n\n$(eval $(call gb_Helper_register_libraries_for_install,OOOLIBS,calc, \\\n\tanalysis \\\n\t$(call gb_Helper_optional,DBCONNECTIVITY,calc) \\\n\tdate \\\n\tpricing \\\n\tsc \\\n\tscd \\\n\tscfilt \\\n\twpftcalc \\\n\tsolver \\\n\t$(call gb_Helper_optional,SCRIPTING,vbaobj) \\\n))\n\n$(eval $(call gb_Helper_register_plugins_for_install,OOOLIBS,calc, \\\n    scui \\\n))\n\n$(eval $(call gb_Helper_register_libraries_for_install,OOOLIBS,graphicfilter, \\\n\tsvgfilter \\\n\twpftdraw \\\n\tgraphicfilter \\\n))\n\n$(eval $(call gb_Helper_register_libraries_for_install,OOOLIBS,impress, \\\n\tanimcore \\\n\tPresentationMinimizer \\\n\twpftimpress \\\n))\n\n$(eval $(call gb_Helper_register_libraries_for_install,OOOLIBS,onlineupdate, \\\n\t$(if $(ENABLE_ONLINE_UPDATE), \\\n\t\tupdatecheckui \\\n\t\tupdchk \\\n\t) \\\n))\n\n$(eval $(call gb_Helper_register_libraries_for_install,OOOLIBS,gnome, \\\n\t$(if $(ENABLE_EVOAB2),evoab) \\\n\t$(if $(ENABLE_GIO),losessioninstall) \\\n\t$(if $(ENABLE_GIO),ucpgio1) \\\n))\n\n$(eval $(call gb_Helper_register_plugins_for_install,OOOLIBS,gnome, \\\n    $(if $(ENABLE_GTK3),vclplug_gtk3) \\\n    $(if $(ENABLE_GTK4),vclplug_gtk4) \\\n))\n\ngb_haiku_or_kde := $(if $(filter HAIKU,$(OS)),haiku,kde)\n\n$(eval $(call gb_Helper_register_libraries_for_install,OOOLIBS,kde, \\\n    $(if $(ENABLE_KF5),kf5be1) \\\n))\n\n$(eval $(call gb_Helper_register_plugins_for_install,OOOLIBS,$(gb_haiku_or_kde), \\\n    $(if $(ENABLE_KF5),vclplug_kf5) \\\n    $(if $(ENABLE_KF6),vclplug_kf6) \\\n    $(if $(ENABLE_QT5),vclplug_qt5) \\\n    $(if $(ENABLE_QT6),vclplug_qt6) \\\n    $(if $(ENABLE_GTK3_KDE5),vclplug_gtk3_kde5) \\\n))\n\n$(eval $(call gb_Helper_register_executables_for_install,OOO,$(gb_haiku_or_kde), \\\n    $(if $(ENABLE_GTK3_KDE5),lo_kde5filepicker) \\\n))\n\n$(eval $(call gb_Helper_register_libraries_for_install,OOOLIBS,math, \\\n\tsm \\\n\tsmd \\\n))\n\n$(eval $(call gb_Helper_register_libraries_for_install,OOOLIBS,ogltrans, \\\n\tOGLTrans \\\n))\n\nifeq ($(OS),EMSCRIPTEN)\n$(eval $(call gb_Helper_register_libraries_for_install,OOOLIBS,ooo, \\\n\tlo-bootstrap \\\n))\nendif\n\nifneq ($(ENABLE_WASM_STRIP_CANVAS),TRUE)\n$(eval $(call gb_Helper_register_libraries_for_install,OOOLIBS,ooo, \\\n\tcanvastools \\\n\t$(if $(ENABLE_CAIRO_CANVAS),cairocanvas) \\\n\tcanvasfactory \\\n\tcppcanvas \\\n\t$(if $(filter WNT,$(OS)),directx9canvas) \\\n\t$(if $(ENABLE_OPENGL_CANVAS),oglcanvas) \\\n\t$(if $(filter WNT,$(OS)),gdipluscanvas) \\\n\tsimplecanvas \\\n\tvclcanvas \\\n))\nendif\n\nifneq ($(ENABLE_WASM_STRIP_GUESSLANG),TRUE)\n$(eval $(call gb_Helper_register_libraries_for_install,OOOLIBS,ooo, \\\n\tguesslang \\\n))\nendif\n\nifneq ($(ENABLE_WASM_STRIP_HUNSPELL),TRUE)\n$(eval $(call gb_Helper_register_libraries_for_install,OOOLIBS,ooo, \\\n\thyphen \\\n\tlnth \\\n\tspell \\\n\t$(if $(filter iOS MACOSX,$(OS)), \\\n\t\tMacOSXSpell \\\n\t) \\\n))\nendif\n\n$(eval $(call gb_Helper_register_libraries_for_install,OOOLIBS,ooo, \\\n    avmedia \\\n\t$(if $(ENABLE_CURL),LanguageTool) \\\n    $(call gb_Helper_optional,AVMEDIA, \\\n\t$(if $(filter MACOSX,$(OS)),\\\n\t\tavmediaMacAVF \\\n\t) \\\n    ) \\\n\t$(call gb_Helper_optional,SCRIPTING, \\\n\t\tbasctl \\\n\t\tbasprov \\\n\t) \\\n\tbasegfx \\\n\tbib \\\n\tchartcore \\\n\tchartcontroller \\\n\t$(call gb_Helper_optional,OPENCL,clew) \\\n\t$(if $(filter $(OS),WNT),,cmdmail) \\\n\tconfigmgr \\\n\tctl \\\n\tdba \\\n\tdbahsql \\\n\t$(call gb_Helper_optional,DBCONNECTIVITY, \\\n\t\tdbase \\\n\t\tdbaxml) \\\n\tdbtools \\\n\tdeploymentmisc \\\n\t$(if $(filter-out MACOSX WNT,$(OS)),desktopbe1) \\\n\t$(call gb_Helper_optional,SCRIPTING,dlgprov) \\\n\tdocmodel \\\n\tdrawinglayercore \\\n\tdrawinglayer \\\n\tediteng \\\n\t$(if $(filter EMSCRIPTEN,$(OS)),embindtest) \\\n\t$(if $(filter WNT,$(OS)),emser) \\\n\tevtatt \\\n\t$(call gb_Helper_optional,DBCONNECTIVITY, \\\n\t\tflat \\\n\t\tfile) \\\n\tfilterconfig \\\n\tfps_office \\\n\tfor \\\n\tforui \\\n\tfrm \\\n\tfsstorage \\\n\tfwk \\\n    $(call gb_Helper_optionals_or,HELPTOOLS XMLHELP,helplinker) \\\n\ti18npool \\\n\ti18nsearch \\\n\t$(if $(ENABLE_JAVA),jdbc) \\\n\t$(if $(filter WNT,$(OS)),jumplist) \\\n\t$(if $(ENABLE_LDAP),ldapbe2) \\\n\t$(if $(filter WNT,$(OS)),WinUserInfoBe) \\\n\tlocalebe1 \\\n\tlog \\\n\tlng \\\n\t$(if $(filter $(OS),MACOSX),macbe1) \\\n\t$(if $(MERGELIBS),merged) \\\n\tmigrationoo2 \\\n\tmigrationoo3 \\\n\tmozbootstrap \\\n\tmsfilter \\\n\t$(call gb_Helper_optional,SCRIPTING,msforms) \\\n\tmtfrenderer \\\n\t$(call gb_Helper_optional,DBCONNECTIVITY,mysql_jdbc) \\\n\t$(call gb_Helper_optional,MARIADBC,$(call gb_Helper_optional,DBCONNECTIVITY,mysqlc)) \\\n\tnumbertext \\\n\todbc \\\n\todfflatxml \\\n\toffacc \\\n\toox \\\n\t$(call gb_Helper_optional,OPENCL,opencl) \\\n\tpasswordcontainer \\\n\tpcr \\\n\tpdffilter \\\n\t$(call gb_Helper_optional,SCRIPTING,protocolhandler) \\\n\tsax \\\n\tsb \\\n\t$(call gb_Helper_optional,DBCONNECTIVITY,sdbt) \\\n\tscn \\\n\tsd \\\n\tsdd \\\n\tsfx \\\n\tslideshow \\\n\tsot \\\n\t$(if $(or $(DISABLE_GUI),$(ENABLE_WASM_STRIP_SPLASH)),,spl) \\\n\tstoragefd \\\n\t$(call gb_Helper_optional,SCRIPTING,stringresource) \\\n\tsvgio \\\n\temfio \\\n\tsvl \\\n\tsvt \\\n\tsvx \\\n\tsvxcore \\\n\tsw \\\n\tsyssh \\\n\ttextconversiondlgs \\\n\ttextfd \\\n\ttk \\\n\ttl \\\n\tucpexpand1 \\\n\tucpext \\\n\tucpimage \\\n\t$(if $(ENABLE_LIBCMIS),ucpcmis1) \\\n\tucptdoc1 \\\n\tunordf \\\n\tunoxml \\\n\tupdatefeed \\\n\tutl \\\n\tuui \\\n\t$(call gb_Helper_optional,SCRIPTING, \\\n\t\tvbaevents \\\n\t\tvbahelper \\\n\t) \\\n\tvcl \\\n\twriterperfect \\\n\txmlscript \\\n\txmlfa \\\n\txmlfd \\\n\txo \\\n\txof \\\n\txsltdlg \\\n\txsltfilter \\\n\t$(if $(filter $(OS),WNT), \\\n\t\tado \\\n\t\toleautobridge \\\n\t\tsmplmail \\\n\t\twininetbe1 \\\n\t) \\\n\t$(if $(filter $(OS),MACOSX), \\\n\t\t$(if $(ENABLE_MACOSX_SANDBOX),, \\\n\t\t\tAppleRemote \\\n\t\t) \\\n\t\tfps_aqua \\\n\t) \\\n))\n\n$(eval $(call gb_Helper_register_plugins_for_install,OOOLIBS,ooo, \\\n    $(if $(ENABLE_CUSTOMTARGET_COMPONENTS),components) \\\n    cui \\\n    icg \\\n    sdui \\\n    $(if $(ENABLE_GEN),vclplug_gen) \\\n    $(if $(filter $(OS),WNT),vclplug_win) \\\n    $(if $(filter $(OS),MACOSX),vclplug_osx) \\\n))\n\n$(eval $(call gb_Helper_register_libraries_for_install,OOOLIBS,postgresqlsdbc, \\\n\t$(if $(BUILD_POSTGRESQL_SDBC), \\\n\t\tpostgresql-sdbc \\\n\t\tpostgresql-sdbc-impl) \\\n))\n\n$(eval $(call gb_Helper_register_libraries_for_install,OOOLIBS,firebirdsdbc, \\\n\t$(if $(ENABLE_FIREBIRD_SDBC),firebird_sdbc) \\\n))\n\nifneq ($(ENABLE_PDFIMPORT),)\n$(eval $(call gb_Helper_register_libraries_for_install,OOOLIBS,pdfimport, \\\n\tpdfimport \\\n))\nendif\n\n$(eval $(call gb_Helper_register_libraries_for_install,OOOLIBS,python, \\\n\tpythonloader \\\n))\n\n$(eval $(call gb_Helper_register_libraries_for_install,PLAINLIBS_OOO,python, \\\n\tpyuno \\\n\t$(if $(filter-out WNT,$(OS)),pyuno_wrapper) \\\n))\n\n$(eval $(call gb_Helper_register_libraries_for_install,OOOLIBS,reportbuilder, \\\n\trpt \\\n\trptui \\\n\trptxml \\\n))\n\n$(eval $(call gb_Helper_register_libraries_for_install,OOOLIBS,writer, \\\n\thwp \\\n\t$(if $(ENABLE_LWP),lwpft) \\\n\tmsword \\\n\tswd \\\n\tt602filter \\\n\t$(call gb_Helper_optional,SCRIPTING,vbaswobj) \\\n\twpftwriter \\\n\tsw_writerfilter \\\n\t$(call gb_Helper_optional,DBCONNECTIVITY,writer) \\\n))\n\n$(eval $(call gb_Helper_register_plugins_for_install,OOOLIBS,writer, \\\n    swui \\\n))\n\n# cli_cppuhelper is NONE even though it is actually in URE because it is CliNativeLibrary\n$(eval $(call gb_Helper_register_libraries,PLAINLIBS_NONE, \\\n\tsmoketest \\\n\tsubsequenttest \\\n\ttest \\\n\ttest-setupvcl \\\n\ttesttools_cppobj \\\n\ttesttools_bridgetest \\\n\ttesttools_bridgetest-common \\\n\ttesttools_constructors \\\n\tunobootstrapprotector \\\n\tunoexceptionprotector \\\n\tunotest \\\n\tvclbootstrapprotector \\\n\tscqahelper \\\n\tswqahelper \\\n\twpftqahelper \\\n\tprecompiled_system \\\n\t$(if $(ENABLE_CLI),$(if $(filter MSC,$(COM)),cli_cppuhelper)) \\\n\t$(if $(filter $(OS),ANDROID),lo-bootstrap) \\\n\t$(if $(filter $(OS),MACOSX),OOoSpotlightImporter) \\\n))\n\n$(eval $(call gb_Helper_register_libraries_for_install,PLAINLIBS_URE,ure, \\\n\taffine_uno_uno \\\n\t$(if $(ENABLE_CLI),\\\n\t\t$(if $(filter MSC,$(COM)),$(if $(filter-out AARCH64_TRUE,$(CPUNAME)_$(CROSS_COMPILING)),cli_uno)) \\\n\t) \\\n\ti18nlangtag \\\n\t$(if $(ENABLE_DOTNET), \\\n\t\tnet_bootstrap \\\n\t\tnet_uno \\\n\t) \\\n\t$(if $(ENABLE_JAVA), \\\n\t\tjava_uno \\\n\t\tjpipe \\\n\t\t$(if $(filter $(OS),WNT),jpipx) \\\n\t    juh \\\n\t\tjuhx \\\n\t) \\\n\tlog_uno_uno \\\n\tunsafe_uno_uno \\\n))\n\n$(eval $(call gb_Helper_register_plugins_for_install,PLAINLIBS_URE,ure, \\\n\t\t$(if $(filter MSC,$(COM)), \\\n\t\t\t$(if $(filter INTEL,$(CPUNAME)),msci_uno) \\\n\t\t\t$(if $(filter X86_64,$(CPUNAME)),mscx_uno) \\\n\t\t\t$(if $(filter AARCH64,$(CPUNAME)),msca_uno) \\\n\t\t, gcc3_uno) \\\n))\n\n$(eval $(call gb_Helper_register_libraries_for_install,PRIVATELIBS_URE,ure, \\\n\tbinaryurp \\\n\tbootstrap \\\n\tintrospection \\\n\tinvocadapt \\\n\tinvocation \\\n\tio \\\n\t$(if $(ENABLE_JAVA),javaloader) \\\n\t$(if $(ENABLE_JAVA),javavm) \\\n\t$(if $(ENABLE_JAVA),jvmaccess) \\\n\t$(if $(ENABLE_JAVA),jvmfwk) \\\n\tnamingservice \\\n\tproxyfac \\\n\treflection \\\n\treg \\\n\tstocservices \\\n\tstore \\\n\tunoidl \\\n\tuuresolver \\\n\txmlreader \\\n))\n\n$(eval $(call gb_Helper_register_plugins_for_install,PRIVATELIBS_URE,ure, \\\n    $(call gb_CondLibSalTextenc,sal_textenc) \\\n))\n\nifneq ($(ENABLE_WASM_STRIP_ACCESSIBILITY),TRUE)\n$(eval $(call gb_Helper_register_libraries_for_install,PLAINLIBS_OOO,ooo, \\\n\t$(if $(filter WNT,$(OS)), \\\n\t\twinaccessibility \\\n\t) \\\n))\nendif\n\n$(eval $(call gb_Helper_register_libraries_for_install,PLAINLIBS_OOO,ooo, \\\n    $(call gb_Helper_optional,AVMEDIA, \\\n        $(if $(ENABLE_GSTREAMER_1_0),avmediagst) \\\n        $(if $(ENABLE_GTK4),avmediagtk) \\\n        $(if $(ENABLE_QT6_MULTIMEDIA),avmediaqt6) \\\n        $(if $(filter WNT,$(OS)),avmediawin) \\\n    ) \\\n\tcached1 \\\n\tcomphelper \\\n\t$(call gb_Helper_optional,DBCONNECTIVITY,dbpool2) \\\n\t$(call gb_Helper_optional,BREAKPAD,crashreport) \\\n\tdeployment \\\n\tdeploymentgui \\\n\tembobj \\\n\t$(if $(ENABLE_JAVA),hsqldb) \\\n\ti18nutil \\\n\t$(if $(and $(ENABLE_GTK3), $(filter LINUX %BSD SOLARIS,$(OS))), libreofficekitgtk) \\\n\t$(if $(and $(ENABLE_GTKTILEDVIEWER), $(filter WNT,$(OS))), libreofficekitgtk) \\\n\t$(if $(ENABLE_JAVA), \\\n\t\t$(if $(filter $(OS),MACOSX),,officebean) \\\n\t) \\\n\temboleobj \\\n\tpackage2 \\\n\t$(call gb_Helper_optional,SCRIPTING,scriptframe) \\\n\tsdbc2 \\\n\tsofficeapp \\\n\tsrtrs1 \\\n\tucb1 \\\n\tucbhelper \\\n\t$(if $(WITH_WEBDAV),ucpdav1) \\\n\tucpfile1 \\\n    $(call gb_Helper_optional,XMLHELP,ucpchelp1) \\\n\tucphier1 \\\n\tucppkg1 \\\n    $(call gb_CondExeUnopkg,unopkgapp) \\\n\txmlsecurity \\\n\txsec_xmlsec \\\n\txstor \\\n\t$(if $(filter $(OS),MACOSX), \\\n\t\tmacab1 \\\n\t\tmacabdrv1 \\\n\t) \\\n\t$(if $(filter WNT,$(OS)), \\\n\t\tfps \\\n\t\tinprocserv \\\n\t\tUAccCOM \\\n\t) \\\n))\n\n$(eval $(call gb_Helper_register_plugins_for_install,PLAINLIBS_OOO,ooo, \\\n    localedata_en \\\n    localedata_es \\\n    localedata_euro \\\n    localedata_others \\\n))\n\nifeq ($(OS),WNT)\n$(eval $(call gb_Helper_register_libraries_for_install,PLAINLIBS_OOO,activexbinarytable, \\\n\tregactivex \\\n))\n\n$(eval $(call gb_Helper_register_libraries_for_install,PLAINLIBS_OOO,activex, \\\n\tso_activex \\\n))\n\nifneq ($(BUILD_X64),)\n$(eval $(call gb_Helper_register_libraries_for_install,PLAINLIBS_OOO,activexwin64, \\\n\tso_activex_x64 \\\n))\nendif\n\n$(eval $(call gb_Helper_register_executables_for_install,OOO,spsuppfiles, \\\n\tspsupp_helper \\\n))\n\n$(eval $(call gb_Helper_register_libraries_for_install,PLAINLIBS_OOO,spsuppfiles, \\\n\t$(if $(CXX_X64_BINARY),spsupp_x64) \\\n\t$(if $(CXX_X86_BINARY),spsupp_x86) \\\n))\n\n$(eval $(call gb_Helper_register_libraries_for_install,PLAINLIBS_OOO,ooobinarytable, \\\n\t$(if $(WINDOWS_SDK_HOME),\\\n\t\tinstooofiltmsi \\\n\t\tqslnkmsi \\\n\t\treg_dlls \\\n\t\treg4allmsdoc \\\n\t\tsdqsmsi \\\n\t\tsellangmsi \\\n\t\tsn_tools \\\n\t\t$(if $(ENABLE_ONLINE_UPDATE_MAR),install_updateservice) \\\n\t) \\\n))\n\n$(eval $(call gb_Helper_register_libraries_for_install,PLAINLIBS_OOO,winexplorerextbinarytable, \\\n\tshlxtmsi \\\n))\n\n$(eval $(call gb_Helper_register_libraries_for_install,PLAINLIBS_SHLXTHDL,winexplorerext, \\\n\tooofilt \\\n\tpropertyhdl \\\n\tshlxthdl \\\n))\n\nifneq ($(BUILD_X64),)\n$(eval $(call gb_Helper_register_packages_for_install,winexplorerextwin64, \\\n\t$(if $(filter MSC,$(COM)),msvc_dlls) \\\n))\n\n$(eval $(call gb_Helper_register_libraries_for_install,PLAINLIBS_SHLXTHDL,winexplorerextwin64, \\\n\tooofilt_x64 \\\n\tpropertyhdl_x64 \\\n\tshlxthdl_x64 \\\n))\nendif # BUILD_X64\n\nendif # WNT\n\n$(eval $(call gb_Helper_register_libraries_for_install,RTVERLIBS,ure, \\\n\tcppuhelper \\\n\tpurpenvhelper \\\n\tsalhelper \\\n))\n\n$(eval $(call gb_Helper_register_libraries_for_install,UNOVERLIBS,ure, \\\n\tcppu \\\n\tsal \\\n))\n\n$(eval $(call gb_Helper_register_libraries,EXTENSIONLIBS, \\\n\tactive_native \\\n\tpassive_native \\\n\tcrashextension \\\n))\n\nifneq ($(ENABLE_JAVA),)\n$(eval $(call gb_Helper_register_jars_for_install,URE,ure, \\\n\tjava_uno \\\n\tjuh \\\n\tjurt \\\n\tlibreoffice \\\n\tridl \\\n\tunoloader \\\n))\n\n$(eval $(call gb_Helper_register_jars_for_install,OOO,ooo, \\\n\tScriptFramework \\\n\tScriptProviderForJava \\\n\tcommonwizards \\\n\tform \\\n\t$(if $(filter-out MACOSX,$(OS)),officebean) \\\n\tquery \\\n\treport \\\n\tsdbc_hsqldb \\\n\tsmoketest \\\n\ttable \\\n\tunoil \\\n))\n\n$(eval $(call gb_Helper_register_jars_for_install,OOO,reportbuilder, \\\n\treportbuilder \\\n\treportbuilderwizard \\\n))\n\nifneq ($(ENABLE_SCRIPTING_BEANSHELL),)\n$(eval $(call gb_Helper_register_jars_for_install,OOO,extensions_bsh, \\\n\tScriptProviderForBeanShell \\\n))\nendif\n\nifneq ($(ENABLE_SCRIPTING_JAVASCRIPT),)\n$(eval $(call gb_Helper_register_jars_for_install,OOO,extensions_rhino, \\\n\tScriptProviderForJavaScript \\\n))\nendif\n\nifeq (NUMBERTEXT,$(filter NUMBERTEXT,$(BUILD_TYPE)))\n$(eval $(call gb_Helper_register_packages_for_install,extensions_numbertext,\\\n\tnumbertext \\\n))\nendif\n\n$(eval $(call gb_Helper_register_jars,OXT, \\\n\tEvolutionarySolver \\\n\tactive_java \\\n\tmediawiki \\\n\tnlpsolver \\\n\tpassive_java \\\n))\n\n$(eval $(call gb_Helper_register_jars,NONE,\\\n\tConnectivityTools \\\n\tHelloWorld \\\n\tHighlight \\\n\tMemoryUsage \\\n\tOOoRunner \\\n\tTestExtension \\\n\ttest \\\n\ttest-tools \\\n\ttestComponent \\\n))\nendif\n\n# 'test_unittest' is only package delivering to workdir.\n# Other packages could be potentially autoinstalled.\n$(eval $(call gb_Helper_register_packages, \\\n\ttest_unittest \\\n\t$(if $(ENABLE_CLI),cli_basetypes_copy) \\\n\textras_wordbook \\\n\tinstsetoo_native_setup \\\n\t$(if $(ENABLE_OOENV),instsetoo_native_ooenv) \\\n\tpostprocess_registry \\\n\treadlicense_oo_readmes \\\n\tsetup_native_misc \\\n\tsysui_share \\\n\tvcl_fontunxpsprint \\\n))\n\n$(eval $(call gb_Helper_register_packages_for_install,impress,\\\n\tsd_xml \\\n))\n\n$(eval $(call gb_Helper_register_packages_for_install,calc,\\\n\tsc_res_xml \\\n))\n\n$(eval $(call gb_Helper_register_packages_for_install,libreofficekit,\\\n\t$(if $(filter LINUX %BSD SOLARIS, $(OS)),libreofficekit_selectionhandles) \\\n\t$(if $(and $(ENABLE_GTKTILEDVIEWER), $(filter WNT,$(OS))), libreofficekit_selectionhandles) \\\n))\n\n$(eval $(call gb_Helper_register_packages_for_install,ure,\\\n\tinstsetoo_native_setup_ure \\\n    $(call gb_CondExeUno,uno_sh) \\\n\ture_install \\\n\t$(if $(ENABLE_DOTNET),\\\n\t\tnet_basetypes \\\n\t\tnet_uretypes \\\n\t\tnet_oootypes \\\n\t\tnet_bridge \\\n\t\tnet_nuget_pkg \\\n\t\tnet_nuget_config \\\n\t) \\\n\t$(if $(ENABLE_JAVA),\\\n\t\tjvmfwk_jvmfwk3_ini \\\n\t\tjvmfwk_javavendors \\\n\t\tjvmfwk_jreproperties \\\n\t\t$(if $(filter MACOSX,$(OS)),bridges_jnilib_java_uno) \\\n\t) \\\n))\n\n$(eval $(call gb_Helper_register_packages_for_install,postgresqlsdbc,\\\n\t$(if $(BUILD_POSTGRESQL_SDBC),connectivity_postgresql-sdbc) \\\n))\n\n$(eval $(call gb_Helper_register_packages_for_install,sdk,\\\n\todk_share_readme \\\n\todk_share_readme_generated \\\n\t$(if $(ENABLE_CLI),\\\n\t\t$(if $(filter WNT,$(OS)),$(if $(filter-out AARCH64_TRUE,$(CPUNAME)_$(CROSS_COMPILING)),odk_cli)) \\\n\t) \\\n\todk_config \\\n\t$(if $(filter WNT,$(OS)),odk_config_win) \\\n\todk_docs \\\n\t$(if $(DOXYGEN),odk_doxygen) \\\n\todk_examples \\\n\todk_headers \\\n\todk_headers_generated \\\n\todk_html \\\n\todk_settings \\\n\todk_settings_generated \\\n\t$(if $(ENABLE_JAVA), \\\n\t\todk_javadoc \\\n\t\todk_uno_loader_classes \\\n\t) \\\n\todk_scripts \\\n))\n\nifneq ($(ENABLE_WASM_STRIP_PINGUSER),TRUE)\n$(eval $(call gb_Helper_register_packages_for_install,ooo,\\\n\ttipoftheday_images \\\n))\nendif\n\nifneq ($(ENABLE_WASM_STRIP_CANVAS),TRUE)\n$(eval $(call gb_Helper_register_packages_for_install,ooo,\\\n\t$(if $(ENABLE_OPENGL_CANVAS),canvas_opengl_shader) \\\n))\nendif\n\n$(eval $(call gb_Helper_register_packages_for_install,ooo,\\\n\t$(if $(SYSTEM_LIBEXTTEXTCAT),,libexttextcat_fingerprint) \\\n\tofficecfg_misc \\\n\t$(if $(filter $(OS),MACOSX), \\\n\t\textensions_mdibundle \\\n\t\textensions_OOoSpotlightImporter \\\n\t\textensions_quicklookpreviewappex \\\n\t\textensions_QuickLookPreview \\\n\t\textensions_quicklookthumbnailappex \\\n\t\textensions_QuickLookThumbnail \\\n\t) \\\n\textras_autocorr \\\n\textras_autotext \\\n\textras_autotextuser \\\n\textras_cfgsrvnolang \\\n\textras_cfgusr \\\n\textras_database \\\n\textras_databasebiblio \\\n\textras_gallbullets \\\n\textras_gallmytheme \\\n\textras_gallroot \\\n\textras_gallsystem \\\n\textras_gallsystemstr \\\n\textras_glade \\\n\textras_labels \\\n\t$(if $(filter WNT,$(OS)),extras_newfiles) \\\n\textras_palettes \\\n\textras_personas \\\n\textras_persona_dark \\\n\textras_persona_gray \\\n\textras_persona_green \\\n\textras_persona_pink \\\n\textras_persona_sand \\\n\textras_persona_white \\\n\textras_tplpresnt \\\n\textras_tplwizdesktop \\\n\t$(if $(WITH_TEMPLATES),\\\n\t\textras_templates \\\n\t\textras_tplwizbitmap \\\n\t\textras_tplwizard \\\n\t) \\\n\tframework_dtd \\\n\t$(if $(filter $(OS),MACOSX),infoplist) \\\n\toox_customshapes \\\n\toox_generated \\\n\tpackage_dtd \\\n\t$(call gb_Helper_optional,DESKTOP,\\\n\t\t$(if $(filter-out WNT,$(OS)),$(if $(ENABLE_MACOSX_SANDBOX),,shell_senddoc))) \\\n\t$(call gb_Helper_optional,DESKTOP,$(if $(filter-out EMSCRIPTEN MACOSX WNT,$(OS)),svx_gengal)) \\\n\t$(if $(USING_X11),vcl_fontunxppds) \\\n\t$(if $(filter $(OS),MACOSX),vcl_osxres) \\\n\txmloff_dtd \\\n\txmlscript_dtd \\\n    $(call gb_Helper_optional,XMLHELP,xmlhelp_helpxsl) \\\n\t$(if $(ENABLE_JAVA),\\\n\t\tscripting_java \\\n\t\tscripting_java_jars \\\n\t\t$(if $(ENABLE_SCRIPTING_BEANSHELL),scripting_ScriptsBeanShell) \\\n\t\t$(if $(ENABLE_SCRIPTING_JAVASCRIPT),scripting_ScriptsJavaScript) \\\n\t) \\\n\t$(call gb_Helper_optional,SCRIPTING,scripting_scriptbindinglib) \\\n\t$(if $(filter $(OS),MACOSX),sysui_osxicons) \\\n\twizards_basicshare \\\n\twizards_basicsrvaccess2base \\\n\twizards_basicsrvdepot \\\n\twizards_basicsrveuro \\\n\twizards_basicsrvgimmicks \\\n\twizards_basicsrvimport \\\n\twizards_basicsrvform \\\n\twizards_basicsrvscriptforge \\\n\twizards_basicsrvsfdatabases \\\n\twizards_basicsrvsfdialogs \\\n\twizards_basicsrvsfdocuments \\\n\twizards_basicsrvsfunittests \\\n\twizards_basicsrvsfwidgets \\\n\twizards_basicsrvstandard \\\n\twizards_basicsrvtemplate \\\n\twizards_basicsrvtools \\\n\twizards_basicsrvtutorials \\\n\twizards_basicusr \\\n\twizards_properties \\\n\twizards_wizardshare \\\n\ttoolbarmode_images \\\n\tvcl_theme_definitions \\\n\t$(if $(filter WNT,$(OS)), \\\n\t\tvcl_opengl_denylist \\\n\t) \\\n\t$(if $(filter SKIA,$(BUILD_TYPE)), \\\n\t\tvcl_skia_denylist ) \\\n\t$(if $(DISABLE_PYTHON),, \\\n\t\tPyuno/commonwizards \\\n\t\tPyuno/fax \\\n\t\tPyuno/letter \\\n\t\tPyuno/agenda \\\n\t\tPyuno/mailmerge \\\n\t) \\\n\tsfx2_classification \\\n    $(if $(filter OPENCL,$(BUILD_TYPE)),sc_opencl_runtimetest) \\\n\t$(if $(ENABLE_HTMLHELP),\\\n\t\thelpcontent2_html_dynamic \\\n\t\thelpcontent2_html_media \\\n\t\thelpcontent2_html_icon-themes \\\n\t\thelpcontent2_html_static \\\n\t) \\\n\tresource_fonts \\\n\tcui \\\n\t$(if $(filter EMSCRIPTEN,$(OS)), \\\n\t    favicon \\\n\t    unoembind \\\n\t) \\\n))\n\n$(eval $(call gb_Helper_register_packages_for_install,ooo_fonts,\\\n\textras_fonts \\\n\t$(if $(USING_X11)$(DISABLE_GUI)$(filter ANDROID EMSCRIPTEN,$(OS)), \\\n\t\tpostprocess_fontconfig) \\\n\t$(call gb_Helper_optional,MORE_FONTS,\\\n\t\tfonts_alef \\\n\t\tfonts_amiri \\\n\t\tfonts_caladea \\\n\t\tfonts_carlito \\\n\t\t$(if $(MPL_SUBSET),,fonts_culmus) \\\n\t\tfonts_dejavu \\\n\t\tfonts_gentium \\\n\t\tfonts_liberation \\\n\t\tfonts_liberation_narrow \\\n\t\tfonts_libertineg \\\n\t\tfonts_libre_hebrew \\\n\t\tfonts_noto_kufi_arabic \\\n\t\tfonts_noto_naskh_arabic \\\n\t\tfonts_noto_sans \\\n\t\tfonts_noto_sans_arabic \\\n\t\tfonts_noto_sans_armenian \\\n\t\tfonts_noto_sans_georgian \\\n\t\tfonts_noto_sans_hebrew \\\n\t\tfonts_noto_sans_lao \\\n\t\tfonts_noto_sans_lisu \\\n\t\tfonts_noto_serif \\\n\t\tfonts_noto_serif_armenian \\\n\t\tfonts_noto_serif_georgian \\\n\t\tfonts_noto_serif_hebrew \\\n\t\tfonts_noto_serif_lao \\\n\t\tfonts_reem \\\n\t\tfonts_scheherazade \\\n\t\t$(if $(WITH_DOCREPAIR_FONTS),fonts_agdasima,) \\\n\t\t$(if $(WITH_DOCREPAIR_FONTS),fonts_bacasime_antique,) \\\n\t\t$(if $(WITH_DOCREPAIR_FONTS),fonts_belanosima,) \\\n\t\t$(if $(WITH_DOCREPAIR_FONTS),fonts_caprasimo,) \\\n\t\t$(if $(WITH_DOCREPAIR_FONTS),fonts_lugrasimo,) \\\n\t\t$(if $(WITH_DOCREPAIR_FONTS),fonts_lumanosimo,) \\\n\t\t$(if $(WITH_DOCREPAIR_FONTS),fonts_lunasima,) \\\n\t) \\\n))\n\n$(eval $(call gb_Helper_register_packages_for_install,ooo_images,\\\n\tpostprocess_images \\\n\t$(call gb_Helper_optional,HELP,helpcontent2_helpimages) \\\n))\n\n$(eval $(call gb_Helper_register_packages_for_install,ogltrans,\\\n\tsd_opengl \\\n\tslideshow_opengl_shader \\\n))\n\nifneq ($(ENABLE_POPPLER),)\n$(eval $(call gb_Helper_register_packages_for_install,pdfimport, \\\n\tsdext_pdfimport_pdf \\\n))\nendif\n\n$(eval $(call gb_Helper_register_packages_for_install,reportbuilder,\\\n\treportbuilder_templates \\\n))\n\n$(eval $(call gb_Helper_register_packages_for_install,xsltfilter,\\\n\tfilter_docbook \\\n\tfilter_xhtml \\\n\tfilter_xslt \\\n))\n\n$(eval $(call gb_Helper_register_packages_for_install,brand,\\\n\tdesktop_branding \\\n\t$(if $(CUSTOM_BRAND_DIR),desktop_branding_custom) \\\n\t$(if $(filter DESKTOP,$(BUILD_TYPE)),desktop_scripts_install) \\\n\t$(if $(and $(filter-out EMSCRIPTEN HAIKU MACOSX WNT,$(OS)),$(filter DESKTOP,$(BUILD_TYPE))),\\\n\t\t$(if $(DISABLE_GUI),, \\\n\t\t\tdesktop_soffice_sh \\\n\t\t) \\\n\t) \\\n\treadlicense_oo_files \\\n\treadlicense_oo_license \\\n\t$(call gb_Helper_optional,DESKTOP,setup_native_packinfo) \\\n\t$(if $(ENABLE_ONLINE_UPDATE_MAR), \\\n\t    update-settings_ini \\\n\t    updater_ini \\\n\t) \\\n))\n\nifeq ($(USING_X11), TRUE)\n$(eval $(call gb_Helper_register_packages_for_install,base_brand,\\\n\tdesktop_sbase_sh \\\n))\n\n$(eval $(call gb_Helper_register_packages_for_install,calc_brand,\\\n\tdesktop_scalc_sh \\\n))\n\n$(eval $(call gb_Helper_register_packages_for_install,draw_brand,\\\n\tdesktop_sdraw_sh \\\n))\n\n$(eval $(call gb_Helper_register_packages_for_install,impress_brand,\\\n\tdesktop_simpress_sh \\\n))\n\n$(eval $(call gb_Helper_register_packages_for_install,math_brand,\\\n\tdesktop_smath_sh \\\n))\n\n$(eval $(call gb_Helper_register_packages_for_install,writer_brand,\\\n\tdesktop_swriter_sh \\\n))\nendif # USING_X11=TRUE\n\n$(eval $(call gb_Helper_register_packages_for_install,onlineupdate,\\\n\t$(if $(ENABLE_ONLINE_UPDATE),$(if $(filter LINUX SOLARIS,$(OS)),setup_native_scripts)) \\\n))\n\nifneq ($(DISABLE_PYTHON),TRUE)\n$(eval $(call gb_Helper_register_packages_for_install,python, \\\n    pyuno_pythonloader_ini \\\n\tpyuno_python_scripts \\\n\t$(if $(SYSTEM_PYTHON),,$(if $(filter-out WNT,$(OS)),python_shell)) \\\n\tscripting_ScriptsPython \\\n))\n\n$(eval $(call gb_Helper_register_packages_for_install,python_scriptprovider, \\\n    scripting_scriptproviderforpython \\\n))\n\nifeq (LIBRELOGO,$(filter LIBRELOGO,$(BUILD_TYPE)))\n$(eval $(call gb_Helper_register_packages_for_install,python_librelogo, \\\n\tlibrelogo \\\n\tlibrelogo_properties \\\n))\nendif # LIBRELOGO\n\nendif # DISABLE_PYTHON\n\n# External executables\n$(eval $(call gb_ExternalExecutable_register_executables,\\\n\tgenbrk \\\n\tgenccode \\\n\tgencmn \\\n\tpython \\\n\txmllint \\\n\txsltproc \\\n))\n\n# Resources\n$(eval $(call gb_Helper_register_mos,\\\n    $(call gb_Helper_optional,AVMEDIA,avmedia) \\\n\t$(call gb_Helper_optional,SCRIPTING,basctl) \\\n\tchart \\\n\tcnr \\\n\tcui \\\n\tdba \\\n\tdkt \\\n\tediteng \\\n\tflt \\\n\tfor \\\n\t$(call gb_Helper_optional,DESKTOP,fps) \\\n\tfrm \\\n\tfwk \\\n\toox \\\n\tpcr \\\n\trpt \\\n\t$(call gb_Helper_optional,SCRIPTING,sb) \\\n\tsc \\\n\tsca \\\n\tscc \\\n\tsd \\\n\tsfx \\\n\tshell \\\n\tsm \\\n\tsvl \\\n\tsvt \\\n\tsvx \\\n\tsw \\\n\tuui \\\n\tvcl \\\n\twiz \\\n\twpt \\\n\t$(if $(ENABLE_NSS)$(ENABLE_OPENSSL),xsc) \\\n))\n\n# UI configuration\nifneq ($(ENABLE_WASM_STRIP_DBACCESS),TRUE)\n$(eval $(call gb_Helper_register_uiconfigs,\\\n\t$(call gb_Helper_optional,DBCONNECTIVITY,dbaccess) \\\n))\nendif\n\n$(eval $(call gb_Helper_register_uiconfigs,\\\n\tcui \\\n\tdesktop \\\n\tediteng \\\n\tfilter \\\n\tformula \\\n\tfps \\\n\tlibreofficekit \\\n\t$(call gb_Helper_optional,SCRIPTING,modules/BasicIDE) \\\n\t$(call gb_Helper_optional,DBCONNECTIVITY,\\\n\t\tmodules/dbapp \\\n\t\tmodules/dbbrowser \\\n\t\tmodules/dbquery \\\n\t\tmodules/dbrelation \\\n\t) \\\n\tmodules/dbreport \\\n\t$(call gb_Helper_optional,DBCONNECTIVITY,\\\n\t\tmodules/dbtable \\\n\t\tmodules/dbtdata \\\n\t) \\\n\tmodules/sabpilot \\\n\t$(call gb_Helper_optional,DBCONNECTIVITY,modules/sbibliography) \\\n\tmodules/scalc \\\n\tmodules/scanner \\\n\tmodules/schart \\\n\tmodules/sdraw \\\n\tmodules/sglobal \\\n\tmodules/simpress \\\n\tmodules/smath \\\n\t$(call gb_Helper_optional,DBCONNECTIVITY,modules/spropctrlr) \\\n\tmodules/StartModule \\\n\tmodules/sweb \\\n\tmodules/swform \\\n\tmodules/swreport \\\n\tmodules/swriter \\\n\tmodules/swxform \\\n\tsfx \\\n\tsvt \\\n\tsvx \\\n\tuui \\\n\tvcl \\\n\twriterperfect \\\n\t$(if $(ENABLE_NSS)$(ENABLE_OPENSSL),xmlsec) \\\n))\n\nifeq ($(gb_GBUILDSELFTEST),t)\n$(eval $(call gb_Helper_register_libraries_for_install,OOOLIBS,ooo, gbuildselftestdep gbuildselftest))\n$(eval $(call gb_Helper_register_executables,NONE, gbuildselftestexe))\nendif\n\n# vim: set noet sw=4 ts=4:\n"
        },
        {
          "name": "RepositoryExternal.mk",
          "type": "blob",
          "size": 89.27734375,
          "content": "# -*- Mode: makefile-gmake; tab-width: 4; indent-tabs-mode: t -*-\n#\n# This file is part of the LibreOffice project.\n#\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n#\n# This file incorporates work covered by the following license notice:\n#\n#   Licensed to the Apache Software Foundation (ASF) under one or more\n#   contributor license agreements. See the NOTICE file distributed\n#   with this work for additional information regarding copyright\n#   ownership. The ASF licenses this file to you under the Apache\n#   License, Version 2.0 (the \"License\"); you may not use this file\n#   except in compliance with the License. You may obtain a copy of\n#   the License at http://www.apache.org/licenses/LICENSE-2.0 .\n#\n\n# this file describes all the external libraries\n# depending on the configure options these may be taken from the system,\n# or the internal/bundled copy may be built.\n\n# for every external, a function gb_LinkTarget__use_FOO is defined,\n# once for the system case, once for the internal case.\n\n# in the system case, no libraries should be registered, but the target-local\n# variable LIBS should be set to FOO_LIBS, and INCLUDES to FOO_CFLAGS.\n\n\nifeq ($(CPUNAME),X86_64)\nwnt_arch_subdir_optional=x64/\nwnt_arch_subdir_mandatory=x64\nelse ifeq ($(CPUNAME),INTEL)\nwnt_arch_subdir_mandatory=Win32\nendif\n\n# External headers\n\nifneq ($(SYSTEM_ODBC_HEADERS),)\n\ndefine gb_LinkTarget__use_odbc_headers\n$(call gb_LinkTarget_add_defs,$(1),\\\n\t-DSYSTEM_ODBC_HEADERS \\\n)\n\nendef\n\nelse # !SYSTEM_ODBC_HEADERS\n\ndefine gb_LinkTarget__use_odbc_headers\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(SRCDIR)/external/unixODBC/inc \\\n\t$$(INCLUDE) \\\n)\n\nendef\n\nendif # SYSTEM_ODBC_HEADERS\n\nifneq ($(SYSTEM_MDDS),)\n\ngb_ExternalProject__use_mdds_headers :=\n\ndefine gb_LinkTarget__use_mdds_headers\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$(MDDS_CFLAGS) \\\n\t$$(INCLUDE) \\\n)\n\nendef\n\nelse # !SYSTEM_MDDS\n\ndefine gb_ExternalProject__use_mdds_headers\n$(call gb_ExternalProject_use_unpacked,$(1),mdds)\n\nendef\n\ndefine gb_LinkTarget__use_mdds_headers\n$(call gb_LinkTarget_use_unpacked,$(1),mdds)\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$(MDDS_CFLAGS) \\\n\t$$(INCLUDE) \\\n)\n\nendef\n\nendif # SYSTEM_MDDS\n\nifneq ($(SYSTEM_GLM),)\n\ndefine gb_LinkTarget__use_glm_headers\n$(call gb_LinkTarget_add_defs,$(1),\\\n    -DGLM_FORCE_CTOR_INIT \\\n)\n\nendef\n\ngb_ExternalProject__use_glm_headers :=\n\nelse\n\ndefine gb_LinkTarget__use_glm_headers\n$(call gb_LinkTarget_add_defs,$(1),\\\n    -DGLM_FORCE_CTOR_INIT \\\n)\n$(call gb_LinkTarget_use_unpacked,$(1),glm)\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$(GLM_CFLAGS) \\\n\t$$(INCLUDE) \\\n)\n\nendef\n\ndefine gb_ExternalProject__use_glm_headers\n$(call gb_ExternalProject_use_unpacked,$(1),glm)\n\nendef\n\nendif\n\nifneq ($(ENABLE_SKIA),)\ndefine gb_LinkTarget__use_skia\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/skia/include/core \\\n\t-I$(gb_UnpackedTarball_workdir)/skia/include/effects \\\n\t-I$(gb_UnpackedTarball_workdir)/skia/include/gpu \\\n\t-I$(gb_UnpackedTarball_workdir)/skia/include/config \\\n\t-I$(gb_UnpackedTarball_workdir)/skia/include/ports \\\n\t-I$(gb_UnpackedTarball_workdir)/skia/include/private \\\n\t-I$(gb_UnpackedTarball_workdir)/skia/include/third_party/vulkan \\\n\t-I$(gb_UnpackedTarball_workdir)/skia/tools/gpu \\\n\t-I$(gb_UnpackedTarball_workdir)/skia \\\n\t-I$(SRCDIR)/external/skia/inc/ \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_use_libraries,$(1),skia)\n$(call gb_LinkTarget_add_defs,$(1),\\\n\t-DSK_USER_CONFIG_HEADER=\"<$(BUILDDIR)/config_host/config_skia.h>\" \\\n\t-DSKIA_DLL \\\n)\nendef\n$(eval $(call gb_Helper_register_libraries_for_install,OOOLIBS,ooo,\\\n        skia \\\n))\nendif\n\nifeq (SANE,$(filter SANE,$(BUILD_TYPE)))\n\ndefine gb_LinkTarget__use_sane_headers\n$(call gb_LinkTarget_set_include,$(1),\\\n    $(if $(filter WNT,$(OS)), \\\n        -I$(gb_UnpackedTarball_workdir)/twain_dsm/pub/include, \\\n        -I$(SRCDIR)/external/sane/inc) \\\n    $$(INCLUDE) \\\n)\n\nifeq ($(OS),WNT)\n$(call gb_LinkTarget_use_unpacked,$(1),twain_dsm)\nendif\n\nendef\n\nelse\n\ngb_LinkTarget__use_sane_headers :=\n\nendif\n\nifneq ($(SYSTEM_BLUEZ),)\n\ngb_LinkTarget__use_bluez_bluetooth_headers :=\n\nelse # !SYSTEM_BLUEZ\n\ndefine gb_LinkTarget__use_bluez_bluetooth_headers\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(SRCDIR)/external/bluez_bluetooth/inc \\\n\t$$(INCLUDE) \\\n)\n\nendef\n\nendif # SYSTEM_BLUEZ\n\n# External libraries\n\nifneq ($(SYSTEM_CPPUNIT),)\n\ndefine gb_LinkTarget__use_cppunit\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n    $(CPPUNIT_CFLAGS) \\\n)\n\n$(call gb_LinkTarget_add_libs,$(1),\\\n    $(CPPUNIT_LIBS) \\\n)\n\nendef\n\nelse # !SYSTEM_CPPUNIT\n\ndefine gb_LinkTarget__use_cppunit\n$(call gb_LinkTarget_use_external_project,$(1),cppunit, full)\n\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/cppunit/include\\\n\t$$(INCLUDE) \\\n)\n\nifeq ($(COM),MSC)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/cppunit/src/cppunit/$(if $(MSVC_USE_DEBUG_RUNTIME),DebugDll/cppunitd_dll.lib,ReleaseDll/cppunit_dll.lib) \\\n)\nelse\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-L$(gb_UnpackedTarball_workdir)/cppunit/src/cppunit/.libs -lcppunit \\\n)\nendif\n\nendef\n\nendif # SYSTEM_CPPUNIT\n\n\nifeq ($(ENABLE_EPOXY),TRUE)\nifeq ($(SYSTEM_EPOXY),TRUE)\n\ndefine gb_LinkTarget__use_epoxy\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n    $(EPOXY_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(EPOXY_LIBS))\n\nendef\n\ngb_ExternalProject__use_epoxy :=\n\nelse # !SYSTEM_EPOXY\n\ndefine gb_LinkTarget__use_epoxy\n$(call gb_LinkTarget_set_include,$(1),\\\n       -I$(gb_UnpackedTarball_workdir)/epoxy/include \\\n       $$(INCLUDE) \\\n)\n\n$(call gb_LinkTarget_use_libraries,$(1),\\\n    epoxy \\\n)\n\nendef\n\n$(eval $(call gb_Helper_register_libraries_for_install,PLAINLIBS_OOO,ooo,\\\n\tepoxy \\\n))\n\ndefine gb_ExternalProject__use_epoxy\n$(call gb_ExternalProject_use_external_project,$(1),epoxy)\n\nendef\n\nendif # !SYSTEM_EPOXY\nelse # !ENABLE_EPOXY\n\ngb_LinkTarget__use_epoxy :=\ngb_ExternalProject__use_epoxy :=\n\nendif # !ENABLE_EPOXY\n\n\ndefine gb_LinkTarget__use_iconv\nifeq ($(COM),MSC)\n$(call gb_LinkTarget_add_libs,$(1),libiconv.lib)\nelse\n$(call gb_LinkTarget_add_libs,$(1),-liconv)\nendif\nendef\n\nifneq ($(SYSTEM_MARIADB_CONNECTOR_C),)\n\ndefine gb_LinkTarget__use_mariadb-connector-c\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n    $(MARIADB_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(MARIADB_LIBS))\n\nendef\ngb_ExternalProject__use_mariadb-connector-c :=\n\nelse # !SYSTEM_MARIADB_CONNECTOR_C\n\ndefine gb_LinkTarget__use_mariadb-connector-c\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(MARIADB_CFLAGS) \\\n)\n$(call gb_LinkTarget_use_static_libraries,$(1),\\\n\tmariadb-connector-c \\\n)\nifeq ($(OS),MACOSX)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-liconv \\\n)\nendif\n$(call gb_LinkTarget_use_system_win32_libs,$(1),\\\n\tws2_32 \\\n\tadvapi32 \\\n\tkernel32 \\\n\tshlwapi \\\n\tcrypt32 \\\n\tbcrypt \\\n)\n\nendef\ndefine gb_ExternalProject__use_mariadb-connector-c\n$(call gb_ExternalProject_use_static_libraries,$(1),mariadb-connector-c)\n\nendef\n\nendif # SYSTEM_MARIADB_CONNECTOR_C\n\n\nifneq ($(SYSTEM_MARIADB_CONNECTOR_C),)\n\ndefine gb_LinkTarget__use_mysql\n\n$(call gb_LinkTarget_add_defs,$(1),\\\n\t-DSYSTEM_MARIADB \\\n)\n\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(MARIADB_LIBS) \\\n)\n\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$(MARIADB_CFLAGS) \\\n\t$$(INCLUDE) \\\n)\nendef\n\nelse\n\ndefine gb_LinkTarget__use_mysql\n\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n)\n\nendef\n\nendif\n\nifneq ($(SYSTEM_ZLIB),)\n\ndefine gb_LinkTarget__use_zlib\n$(call gb_LinkTarget_add_defs,$(1),\\\n\t-DSYSTEM_ZLIB \\\n\t-DZLIB_CONST \\\n)\n$(call gb_LinkTarget_add_libs,$(1),-lz)\n\nendef\n\n# nothing on system\ndefine gb_LinkTarget__use_zlib_x64\n\nendef\n\ngb_ExternalProject__use_zlib :=\n\nelse # !SYSTEM_ZLIB\n\ndefine gb_LinkTarget__use_zlib_multiarch\n$(if $(2),,$(call gb_Output_error,gb_LinkTarget__use_zlib_multiarch needs two arguments))\n\n$(call gb_LinkTarget_add_defs,$(1), \\\n    -DZLIB_CONST \\\n)\n\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$(ZLIB_CFLAGS) \\\n\t$$(INCLUDE) \\\n)\n\n$(call gb_LinkTarget_use_static_libraries,$(1),\\\n\t$(2) \\\n)\n\nendef\n\ndefine gb_LinkTarget__use_zlib\n$(call gb_LinkTarget__use_zlib_multiarch,$(1),zlib)\n\nendef\n\ndefine gb_LinkTarget__use_zlib_x64\n$(call gb_LinkTarget__use_zlib_multiarch,$(1),zlib_x64)\n\nendef\n\ndefine gb_ExternalProject__use_zlib\n$(call gb_ExternalProject_use_static_libraries,$(1),zlib)\n\nendef\n\nendif # SYSTEM_ZLIB\n\n\nifneq ($(SYSTEM_LIBJPEG),)\n\ndefine gb_LinkTarget__use_libjpeg\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(LIBJPEG_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(LIBJPEG_LIBS))\n$(call gb_LinkTarget_set_ldflags,$(1),\\\n\t$$(filter-out -L/usr/lib/jvm%,$$(T_LDFLAGS)) \\\n)\n\nendef\n\ngb_ExternalProject__use_libjpeg :=\n\nelse\n\ndefine gb_LinkTarget__use_libjpeg\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/libjpeg-turbo \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_use_static_libraries,$(1),libjpeg-turbo)\n\nendef\n\ndefine gb_ExternalProject__use_libjpeg\n$(call gb_ExternalProject_use_static_libraries,$(1),libjpeg-turbo)\n\nendef\n\nendif # SYSTEM_LIBJPEG\n\nifneq ($(SYSTEM_MYTHES),)\n\ndefine gb_LinkTarget__use_mythes\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(MYTHES_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(MYTHES_LIBS))\n\nendef\n\nelse # !SYSTEM_MYTHES\n\ndefine gb_LinkTarget__use_mythes\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/mythes \\\n\t$$(INCLUDE) \\\n)\n\nifeq ($(COM),MSC)\n$(call gb_LinkTarget_use_static_libraries,$(1),\\\n\tmythes \\\n)\nelse\n$(call gb_LinkTarget_add_libs,$(1),$(MYTHES_LIBS))\n$(call gb_LinkTarget_use_external_project,$(1),mythes)\nendif\n\nendef\n\nendif # SYSTEM_MYTHES\n\n\nifneq ($(SYSTEM_EXPAT),)\n\ndefine gb_LinkTarget__use_expat_impl\n$(if $(2),,$(error gb_LinkTarget__use_expat_impl needs additional parameter))\n\n$(call gb_LinkTarget_add_defs,$(1),\\\n\t-DSYSTEM_EXPAT \\\n)\n\n$(call gb_LinkTarget_add_libs,$(1),-lexpat)\n\nendef\n\ngb_ExternalProject__use_expat :=\n\nelse # !SYSTEM_EXPAT\n\ndefine gb_LinkTarget__use_expat_impl\n$(if $(2),,$(error gb_LinkTarget__use_expat_impl needs additional parameter))\n\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/expat/lib \\\n    $$(INCLUDE) \\\n)\n\n$(call gb_LinkTarget_use_static_libraries,$(1),\\\n\t$(2) \\\n)\n\nendef\n\ndefine gb_ExternalProject__use_expat\n$(call gb_ExternalProject_use_static_libraries,$(1),expat)\n\nendef\n\nendif # SYSTEM_EXPAT\n\ndefine gb_LinkTarget__use_expat\n$(call gb_LinkTarget__use_expat_impl,$(1),expat)\n\nendef\n\ndefine gb_LinkTarget__use_expat_x64\n$(call gb_LinkTarget__use_expat_impl,$(1),expat_x64)\n\nendef\n\nifneq ($(SYSTEM_HYPH),)\n\ndefine gb_LinkTarget__use_hyphen\n$(call gb_LinkTarget_add_libs,$(1),$(HYPHEN_LIB))\n\nendef\n\nelse # !SYSTEM_HYPH\n\ndefine gb_LinkTarget__use_hyphen\n$(call gb_LinkTarget_use_unpacked,$(1),hyphen)\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/hyphen\\\n\t$$(INCLUDE) \\\n)\n\nifeq ($(COM),MSC)\n$(call gb_LinkTarget_use_static_libraries,$(1),\\\n\thyphen \\\n)\nelse\n$(call gb_LinkTarget_add_libs,$(1),$(HYPHEN_LIB))\n$(call gb_LinkTarget_use_external_project,$(1),hyphen)\nendif\n\nendef\n\nendif # SYSTEM_HYPH\n\nifneq ($(SYSTEM_HUNSPELL),)\n\ndefine gb_LinkTarget__use_hunspell\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(HUNSPELL_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(HUNSPELL_LIBS))\n\nendef\n\ngb_ExternalProject__use_hunspell :=\n\nelse # !SYSTEM_HUNSPELL\nifneq ($(ENABLE_WASM_STRIP_HUNSPELL),TRUE)\n\ndefine gb_LinkTarget__use_hunspell\n$(call gb_LinkTarget_add_defs,$(1),\\\n\t-DHUNSPELL_STATIC \\\n)\n$(call gb_LinkTarget_use_unpacked,$(1),hunspell)\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/hunspell/src/hunspell\\\n\t$$(INCLUDE) \\\n)\n\nifeq ($(COM),MSC)\n$(call gb_LinkTarget_use_static_libraries,$(1),\\\n\thunspell \\\n)\nelse\n$(call gb_LinkTarget_add_libs,$(1),$(HUNSPELL_LIBS))\n$(call gb_LinkTarget_use_external_project,$(1),hunspell)\nendif\n\nendef\n\ndefine gb_ExternalProject__use_hunspell\n$(call gb_ExternalProject_use_external_project,$(1),hunspell)\n\nendef\n\nendif # ENABLE_WASM_STRIP_HUNSPELL\nendif # SYSTEM_HUNSPELL\n\n\nifneq ($(SYSTEM_BOOST),)\n\ndefine gb_LinkTarget__use_boost_lib\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(BOOST_CPPFLAGS) \\\n)\n\n$(call gb_LinkTarget_add_ldflags,$(1),\\\n\t$(BOOST_LDFLAGS) \\\n)\n\n$(call gb_LinkTarget_add_libs,$(1),$(2))\n\nendef\n\ndefine gb_LinkTarget__use_boost_locale\n$(call gb_LinkTarget__use_boost_lib,$(1),$(BOOST_LOCALE_LIB))\n\nendef\n\ndefine gb_LinkTarget__use_boost_date_time\n$(call gb_LinkTarget__use_boost_lib,$(1),$(BOOST_DATE_TIME_LIB))\n\nendef\n\ndefine gb_LinkTarget__use_boost_filesystem\n$(call gb_LinkTarget__use_boost_lib,$(1),$(BOOST_FILESYSTEM_LIB))\n\nendef\n\ngb_ExternalProject__use_boost_filesystem :=\n\ndefine gb_LinkTarget__use_boost_iostreams\n$(call gb_LinkTarget__use_boost_lib,$(1),$(BOOST_IOSTREAMS_LIB))\n\nendef\n\ngb_ExternalProject__use_boost_iostreams :=\n\ndefine gb_LinkTarget__use_boost_system\n$(call gb_LinkTarget__use_boost_lib,$(1),$(BOOST_SYSTEM_LIB))\n\nendef\n\ngb_ExternalProject__use_boost_system :=\n\ndefine gb_LinkTarget__use_boost_headers\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(BOOST_CPPFLAGS) \\\n)\n\nendef\n\ngb_ExternalProject__use_boost_headers:=\n\nelse # !SYSTEM_BOOST\n\ndefine gb_LinkTarget__use_boost_lib\n$(call gb_LinkTarget_add_defs,$(1),\\\n\t-DBOOST_ALL_NO_LIB \\\n)\n\n$(call gb_LinkTarget_use_static_libraries,$(1),$(2))\n\nendef\n\ndefine gb_LinkTarget__use_boost_locale\n$(call gb_LinkTarget__use_boost_lib,$(1),boost_locale)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(if $(filter $(OS),MACOSX),-liconv) \\\n)\n\nendef\n\ndefine gb_LinkTarget__use_boost_date_time\n$(call gb_LinkTarget__use_boost_lib,$(1),boost_date_time)\n\nendef\n\ndefine gb_LinkTarget__use_boost_filesystem\n$(call gb_LinkTarget__use_boost_lib,$(1),boost_filesystem)\n\nendef\n\ndefine gb_ExternalProject__use_boost_filesystem\n$(call gb_ExternalProject_use_static_libraries,$(1),boost_filesystem)\nendef\n\ndefine gb_LinkTarget__use_boost_iostreams\n$(call gb_LinkTarget__use_boost_lib,$(1),boost_iostreams)\n\nendef\n\ndefine gb_ExternalProject__use_boost_iostreams\n$(call gb_ExternalProject_use_static_libraries,$(1),boost_iostreams)\nendef\n\ndefine gb_LinkTarget__use_boost_system\n$(call gb_LinkTarget__use_boost_lib,$(1),boost_system)\n\nendef\n\ndefine gb_ExternalProject__use_boost_system\n$(call gb_ExternalProject_use_static_libraries,$(1),boost_system)\nendef\n\ndefine gb_LinkTarget__use_boost_headers\n$(call gb_LinkTarget_use_unpacked,$(1),boost)\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$(BOOST_CPPFLAGS) \\\n\t$$(INCLUDE) \\\n)\n\nendef\n\ndefine gb_ExternalProject__use_boost_headers\n$(call gb_ExternalProject_use_unpacked,$(1),boost)\n\nendef\n\nendif # SYSTEM_BOOST\n\n\nifneq ($(SYSTEM_LIBCMIS),)\n\ndefine gb_LinkTarget__use_libcmis\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(LIBCMIS_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(LIBCMIS_LIBS))\n\nendef\n\nelse # !SYSTEM_LIBCMIS\n\ndefine gb_LinkTarget__use_libcmis\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/libcmis/inc \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_use_static_libraries,$(1),\\\n\tlibcmis \\\n)\n\nendef\n\nendif # SYSTEM_LIBCMIS\n\nifeq ($(ENABLE_JAVA),TRUE)\n\ndefine gb_LinkTarget__use_jawt\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(JAWTLIB) \\\n)\n\nendef\n\nelse # !ENABLE_JAVA\n\ngb_LinkTarget__use_jawt :=\n\nendif # ENABLE_JAVA\n\nifneq ($(SYSTEM_LIBATOMIC_OPS),)\n\ndefine gb_LinkTarget__use_libatomic_ops\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(LIBATOMIC_OPS_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1), $(LIBATOMIC_OPS_LIBS))\n\nendef\ngb_ExternalProject__use_libatomic_ops :=\n\nelse # !SYSTEM_LIBATOMIC_OPS\n\ndefine gb_LinkTarget__use_libatomic_ops\n$(call gb_LinkTarget_set_include,$(1),\\\n$(LIBATOMIC_OPS_CFLAGS) \\\n\t$$(INCLUDE) \\\n\t$(LIBATOMIC_OPS_CFLAGS) \\\n)\n$(call gb_LinkTarget_use_external_project,$(1),\\\n\tlibatomic_ops \\\n)\n\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-L$(gb_UnpackedTarball_workdir)/libatomic_ops/src/lib -latomic_ops \\\n)\n\nendef\n\ndefine gb_ExternalProject__use_libatomic_ops\n$(call gb_ExternalProject_use_external_project,$(1),libatomic_ops)\n\nendef\n\nendif # SYSTEM_LIBATOMIC_OPS\n\n\nifneq ($(SYSTEM_LIBEXTTEXTCAT),)\n\ndefine gb_LinkTarget__use_libexttextcat\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(LIBEXTTEXTCAT_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_defs,$(1),\\\n\t-DSYSTEM_LIBEXTTEXTCAT \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(LIBEXTTEXTCAT_LIBS))\n\nendef\n\nelse # !SYSTEM_LIBEXTTEXTCAT\n\ndefine gb_LinkTarget__use_libexttextcat\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/libexttextcat/src \\\n\t$$(INCLUDE) \\\n)\n\nifeq ($(COM),MSC)\n$(call gb_LinkTarget_use_static_libraries,$(1),\\\n\tlibexttextcat \\\n)\nelse\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/libexttextcat/src/.libs/libexttextcat-2.0.a\\\n)\n$(call gb_LinkTarget_use_external_project,$(1),libexttextcat)\nendif\n\n\nendef\n\nendif # SYSTEM_LIBEXTTEXTCAT\n\n\nifneq ($(SYSTEM_LIBNUMBERTEXT),)\n\ndefine gb_LinkTarget__use_libnumbertext\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(LIBNUMBERTEXT_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_defs,$(1),\\\n\t-DSYSTEM_LIBNUMBERTEXT \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(LIBNUMBERTEXT_LIBS))\n\nendef\n\nelse # !SYSTEM_LIBNUMBERTEXT\n\n$(eval $(call gb_Helper_register_packages_for_install,ooo, \\\n\tlibnumbertext_numbertext \\\n))\n\ndefine gb_LinkTarget__use_libnumbertext\n$(call gb_LinkTarget_use_package,$(1),libnumbertext_numbertext)\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/libnumbertext/src \\\n\t$$(INCLUDE) \\\n)\n\nifeq ($(COM),MSC)\n$(call gb_LinkTarget_use_static_libraries,$(1),\\\n\tlibnumbertext \\\n)\nelse\n\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/libnumbertext/src/.libs/libnumbertext-1.0.a\\\n)\n$(call gb_LinkTarget_use_external_project,$(1),libnumbertext,full)\n\nendif\n\nendef\n\nendif # SYSTEM_LIBNUMBERTEXT\n\n\nifneq ($(SYSTEM_LIBXML),)\n\ndefine gb_LinkTarget__use_libxml2\n$(call gb_LinkTarget_add_defs,$(1),\\\n\t-DSYSTEM_LIBXML \\\n)\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(LIBXML_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(LIBXML_LIBS))\n\nendef\ngb_ExternalProject__use_libxml2:=\n\nelse # !SYSTEM_LIBXML\n\n$(eval $(call gb_Helper_register_packages_for_install,ure,\\\n\tlibxml2 \\\n))\n\ndefine gb_LinkTarget__use_libxml2\n$(call gb_LinkTarget_use_package,$(1),libxml2)\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(LIBXML_CFLAGS) \\\n)\n\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(LIBXML_LIBS) \\\n)\n\nifeq ($(COM),MSC)\n$(call gb_LinkTarget_use_external,$(1),icu_headers)\nendif\n\nendef\ndefine gb_ExternalProject__use_libxml2\n$(call gb_ExternalProject_use_package,$(1),libxml2)\n\nifeq ($(COM),MSC)\n$(call gb_ExternalProject_use_packages,$(1),icu icu_ure)\nendif\n\nendef\n\nendif # SYSTEM_LIBXML\n\n\nifneq ($(SYSTEM_LIBXSLT),)\n\ndefine gb_LinkTarget__use_libxslt\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(LIBXSLT_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(LIBXSLT_LIBS))\n\nendef\n\ndefine gb_LinkTarget__use_libexslt\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(LIBEXSLT_CFLAGS) \\\n)\n\n$(call gb_LinkTarget_add_libs,$(1),$(LIBEXSLT_LIBS))\n\nendef\n\nelse # !SYSTEM_LIBXSLT\n\n$(eval $(call gb_Helper_register_packages_for_install,ooo,\\\n\tlibxslt \\\n))\n\ndefine gb_LinkTarget__use_libxslt\n$(call gb_LinkTarget_use_package,$(1),libxslt)\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t-I$(gb_UnpackedTarball_workdir)/libxslt \\\n)\n\nifeq ($(COM),MSC)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/libxslt/win32/bin.msvc/libxslt.lib \\\n)\nelse\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-L$(gb_UnpackedTarball_workdir)/libxslt/libxslt/.libs -lxslt \\\n)\nendif\n\nendef\n\ndefine gb_LinkTarget__use_libexslt\n$(call gb_LinkTarget_use_package,$(1),libxslt)\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t-I$(gb_UnpackedTarball_workdir)/libxslt \\\n)\n\nifeq ($(COM),MSC)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/libxslt/win32/bin.msvc/libexslt.lib \\\n)\nelse\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-L$(gb_UnpackedTarball_workdir)/libxslt/libexslt/.libs -lexslt \\\n)\nendif\n\nendef\n\nendif # SYSTEM_LIBXSLT\n\n\nifneq ($(SYSTEM_XMLSEC),)\n\ndefine gb_LinkTarget__use_xmlsec\n$(call gb_LinkTarget_add_defs,$(1),\\\n\t-DSYSTEM_XMLSEC \\\n)\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(XMLSEC_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(XMLSEC_LIBS))\n\nendef\n\ngb_ExternalProject__use_xmlsec:=\n\nelse # !SYSTEM_XMLSEC\n\n$(eval $(call gb_Helper_register_packages_for_install,ooo,\\\n\txmlsec \\\n))\n\ndefine gb_LinkTarget__use_xmlsec\n\nendef\n\nendif # SYSTEM_XMLSEC\n\nifneq ($(SYSTEM_LIBLANGTAG),)\n\ndefine gb_LinkTarget__use_liblangtag\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(LIBLANGTAG_CFLAGS) \\\n)\n\n$(call gb_LinkTarget_add_libs,$(1),$(LIBLANGTAG_LIBS))\n\nendef\n\ngb_ExternalProject__use_liblangtag :=\n\nelse # !SYSTEM_LIBLANGTAG\n\n$(eval $(call gb_Helper_register_packages_for_install,ure,\\\n\tliblangtag_data \\\n))\n\nifeq ($(COM),MSC)\n\ndefine gb_LinkTarget__use_liblangtag\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$(LIBLANGTAG_CFLAGS) \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(LIBLANGTAG_LIBS))\n$(call gb_LinkTarget_use_external_project,$(1),liblangtag)\n\nendef\n\nelse\n\n$(eval $(call gb_Helper_register_packages_for_install,ure,\\\n\tliblangtag \\\n))\n\ndefine gb_LinkTarget__use_liblangtag\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$(LIBLANGTAG_CFLAGS) \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(LIBLANGTAG_LIBS))\n$(call gb_LinkTarget_use_package,$(1),liblangtag)\n\nendef\n\nendif # MSC\n\ndefine gb_ExternalProject__use_liblangtag\n$(call gb_ExternalProject_use_external_project,$(1),liblangtag)\n\nendef\n\nendif # SYSTEM_LIBLANGTAG\n\n\nifneq ($(SYSTEM_REDLAND),)\n\ndefine gb_LinkTarget__use_librdf\n$(call gb_LinkTarget_add_defs,$(1),\\\n\t-DSYSTEM_REDLAND \\\n)\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(REDLAND_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(REDLAND_LIBS))\n\nendef\n\ngb_LinkTarget__use_redland_headers:=\n\ngb_LinkTarget__use_raptor_headers:=\n\ngb_LinkTarget__use_rasqal_headers:=\n\nelse # !SYSTEM_REDLAND\n\ndefine gb_LinkTarget__use_redland_headers\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/redland/src \\\n\t$$(INCLUDE) \\\n)\n\nendef\n\ndefine gb_LinkTarget__use_raptor_headers\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/raptor/src \\\n\t$$(INCLUDE) \\\n)\n\nendef\n\ndefine gb_LinkTarget__use_rasqal_headers\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/rasqal/src \\\n\t$$(INCLUDE) \\\n)\n\nendef\n\nifneq ($(OS),ANDROID)\n\nifeq ($(COM),MSC)\n$(eval $(call gb_Helper_register_libraries_for_install,PLAINLIBS_OOO,ooo, \\\n\traptor2 \\\n\trasqal \\\n\trdf \\\n))\nelse\n$(eval $(call gb_Helper_register_packages_for_install,ooo, \\\n\traptor \\\n\trasqal \\\n\tredland \\\n))\nendif\n\ndefine gb_LinkTarget__use_librdf\nifeq ($(COM),MSC)\n$(call gb_LinkTarget_use_libraries,$(1),\\\n\traptor2 \\\n\trdf \\\n)\nelse\n$(call gb_LinkTarget_use_packages,$(1),redland raptor rasqal)\n\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-L$(gb_UnpackedTarball_workdir)/redland/src/.libs -lrdf \\\n\t-L$(gb_UnpackedTarball_workdir)/raptor/src/.libs -lraptor2 \\\n\t-L$(gb_UnpackedTarball_workdir)/rasqal/src/.libs -lrasqal \\\n)\nendif\n\nendef\n\nelse # ANDROID\n\ndefine gb_LinkTarget__use_librdf\n$(call gb_LinkTarget_use_packages,$(1),redland raptor rasqal)\n\nendef\n\nendif # ANDROID\n\nendif # SYSTEM_REDLAND\n\nifneq ($(SYSTEM_CAIRO),)\n\ndefine gb_LinkTarget__use_cairo\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(CAIRO_CFLAGS) \\\n\t-DSYSTEM_CAIRO \\\n)\n$(call gb_LinkTarget_use_external,$(1),freetype_headers)\n$(call gb_LinkTarget_add_libs,$(1),$(CAIRO_LIBS))\n\nendef\n\nelse # !SYSTEM_CAIRO\n\nifneq ($(filter-out MACOSX WNT,$(OS)),)\n\n$(eval $(call gb_Helper_register_packages_for_install,ooo,\\\n\tcairo \\\n    pixman \\\n))\n\ndefine gb_LinkTarget__use_cairo\n$(call gb_LinkTarget_use_package,$(1),cairo)\n$(call gb_LinkTarget_use_package,$(1),pixman)\n$(call gb_LinkTarget_use_external,$(1),freetype_headers)\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/cairo \\\n\t-I$(gb_UnpackedTarball_workdir)/cairo/src \\\n\t-I$(gb_UnpackedTarball_workdir)/pixman/pixman \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(if $(filter EMSCRIPTEN,$(OS)), \\\n\t\t$(gb_UnpackedTarball_workdir)/cairo/src/.libs/libcairo.a \\\n\t\t$(gb_UnpackedTarball_workdir)/pixman/pixman/.libs/libpixman-1.a, \\\n\t\t-L$(gb_UnpackedTarball_workdir)/cairo/src/.libs -lcairo \\\n\t\t-L$(gb_UnpackedTarball_workdir)/pixman/pixman/.libs -lpixman-1) \\\n)\n\nendef\n\nendif # !MACOSX, !WNT\n\nendif # !SYSTEM_CAIRO\n\nifneq ($(SYSTEM_FREETYPE),)\n\ndefine gb_LinkTarget__use_freetype_headers\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(FREETYPE_CFLAGS) \\\n)\n\nendef\n\ngb_ExternalProject__use_freetype :=\n\nelse\n\ndefine gb_LinkTarget__use_freetype_headers\n$(call gb_LinkTarget_use_external_project,$(1),freetype)\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$(FREETYPE_CFLAGS) \\\n\t$$(INCLUDE) \\\n)\n\nendef\n\ndefine gb_ExternalProject__use_freetype\n$(call gb_ExternalProject_use_external_project,$(1),freetype)\n\nendef\n\nendif # SYSTEM_FREETYPE\n\ndefine gb_LinkTarget__use_freetype\n$(call gb_LinkTarget_use_external,$(1),freetype_headers)\n$(call gb_LinkTarget_add_libs,$(1),$(FREETYPE_LIBS))\n\nendef\n\nifneq ($(SYSTEM_FONTCONFIG),)\n\ndefine gb_LinkTarget__use_fontconfig\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(FONTCONFIG_CFLAGS) \\\n)\n\n$(call gb_LinkTarget_add_libs,$(1),$(FONTCONFIG_LIBS))\n\nendef\n\nifeq ($(OS),EMSCRIPTEN)\n$(eval $(call gb_Helper_register_packages_for_install,ooo,\\\n    libfontconfig_data \\\n))\nendif\n\ngb_ExternalProject__use_fontconfig :=\n\nelse # SYSTEM_FONTCONFIG\n\nifneq ($(filter-out MACOSX WNT,$(OS)),)\n\n$(eval $(call gb_Helper_register_packages_for_install,ooo,\\\n\tfontconfig \\\n))\n\nendif\n\ndefine gb_LinkTarget__use_fontconfig\nifeq ($(OS),LINUX)\n$(call gb_LinkTarget_use_package,$(1),fontconfig)\nelse\n$(call gb_LinkTarget_use_external_project,$(1),fontconfig)\nendif\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/fontconfig \\\n\t$$(INCLUDE) \\\n)\n\n$(call gb_LinkTarget_add_libs,$(1),\\\n    -L$(gb_UnpackedTarball_workdir)/fontconfig/src/.libs -lfontconfig \\\n)\n\nendef\n\ndefine gb_ExternalProject__use_fontconfig\n$(call gb_ExternalProject_use_external_project,$(1),fontconfig)\n\nendef\n\nendif # SYSTEM_FONTCONFIG\n\nifneq ($(SYSTEM_GRAPHITE),)\n\ndefine gb_LinkTarget__use_graphite\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(GRAPHITE_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(GRAPHITE_LIBS))\n\nendef\n\ngb_ExternalProject__use_graphite:=\n\nelse # !SYSTEM_GRAPHITE\n\ndefine gb_LinkTarget__use_graphite\n$(call gb_LinkTarget_use_unpacked,$(1),graphite)\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/graphite/include \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_use_static_libraries,$(1),\\\n    graphite \\\n)\n\nendef\n\ndefine gb_ExternalProject__use_graphite\n$(call gb_ExternalProject_use_static_libraries,$(1),\\\n\tgraphite \\\n)\n\nendef\nendif # SYSTEM_GRAPHITE\n\nifneq ($(SYSTEM_ICU),)\n\ngb_LinkTarget__use_icu_headers:=\ngb_ExternalProject__use_icu:=\n\ndefine gb_LinkTarget__use_icudata\n$(call gb_LinkTarget_add_libs,$(1),-licudata)\n\nendef\ndefine gb_LinkTarget__use_icui18n\n$(call gb_LinkTarget_add_libs,$(1),-licui18n)\n\nendef\ndefine gb_LinkTarget__use_icuuc\n$(call gb_LinkTarget_add_libs,$(1),-licuuc)\n\nendef\n\nelse # !SYSTEM_ICU\n\n$(eval $(call gb_Helper_register_packages_for_install,ure, \\\n\ticu_ure \\\n))\n\n$(eval $(call gb_Helper_register_packages_for_install,ooo, \\\n\ticu \\\n))\n\nifeq ($(OS)$(DISABLE_DYNLOADING),ANDROID)\ngb_ICU_suffix:=lo\nelse\ngb_ICU_suffix:=\nendif\n\ndefine gb_LinkTarget__use_icu_headers\n$(call gb_LinkTarget_use_unpacked,$(1),icu)\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/icu/source \\\n\t-I$(gb_UnpackedTarball_workdir)/icu/source/i18n \\\n\t-I$(gb_UnpackedTarball_workdir)/icu/source/common \\\n\t$$(INCLUDE) \\\n)\n\nendef\n\ndefine gb_ExternalProject__use_icu\n$(call gb_ExternalProject_use_package,$(1),icu)\n\nendef\n\n# icudata and icui18n is called icudt and icuin when built with MSVC :-/\ndefine gb_LinkTarget__use_icudata\n$(call gb_LinkTarget_use_package,$(1),icu_ure)\n\nifeq ($(OS),WNT)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/icu/source/lib/icudt$(if $(MSVC_USE_DEBUG_RUNTIME),d).lib \\\n)\nelse\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-L$(gb_UnpackedTarball_workdir)/icu/source/lib -licudata$(gb_ICU_suffix) \\\n)\nendif\n\nendef\n\ndefine gb_LinkTarget__use_icui18n\n$(call gb_LinkTarget_use_package,$(1),icu)\n\nifeq ($(OS),WNT)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/icu/source/lib/icuin$(if $(MSVC_USE_DEBUG_RUNTIME),d).lib \\\n)\nelse\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-L$(gb_UnpackedTarball_workdir)/icu/source/lib -licui18n$(gb_ICU_suffix) \\\n)\nendif\n\nendef\n\ndefine gb_LinkTarget__use_icuuc\n$(call gb_LinkTarget_use_package,$(1),icu_ure)\n\nifeq ($(OS),WNT)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/icu/source/lib/icuuc$(if $(MSVC_USE_DEBUG_RUNTIME),d).lib \\\n)\nelse\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-L$(gb_UnpackedTarball_workdir)/icu/source/lib -licuuc$(gb_ICU_suffix) \\\n)\nendif\n\nendef\n\nendif # SYSTEM_ICU\n\nifneq ($(SYSTEM_HARFBUZZ),)\n\ndefine gb_LinkTarget__use_harfbuzz\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(HARFBUZZ_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(HARFBUZZ_LIBS))\n\nendef\n\ngb_ExternalProject__use_harfbuzz :=\n\nelse # SYSTEM_HARFBUZZ != TRUE\n\ndefine gb_LinkTarget__use_harfbuzz\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$(HARFBUZZ_CFLAGS) \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(HARFBUZZ_LIBS))\n$(call gb_LinkTarget_use_external,$(1),icuuc)\n$(call gb_LinkTarget_use_external_project,$(1),harfbuzz)\n\nendef\n\ndefine gb_ExternalProject__use_harfbuzz\n$(call gb_ExternalProject_use_external_project,$(1),harfbuzz)\n\nendef\n\nendif # SYSTEM_HARFBUZZ\n\nifneq ($(ENABLE_OPENSSL),TRUE)\n\ngb_ExternalProject__use_openssl:=\ngb_LinkTarget__use_openssl_headers:=\ngb_LinkTarget__use_openssl:=\n\nelse # ENABLE_OPENSSL\n\nifneq ($(SYSTEM_OPENSSL),)\n\ngb_LinkTarget__use_openssl_headers:=\ngb_ExternalProject__use_openssl:=\n\ndefine gb_LinkTarget__use_openssl\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(OPENSSL_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(OPENSSL_LIBS))\n\nendef\n\nelse # !SYSTEM_OPENSSL\n\n$(eval $(call gb_Helper_register_packages_for_install,ooo, \\\n\topenssl \\\n))\n\ndefine gb_ExternalProject__use_openssl\n$(call gb_ExternalProject_use_package,$(1),openssl)\n\nendef\n\ndefine gb_LinkTarget__use_openssl_headers\n$(call gb_LinkTarget_use_external_project,$(1),openssl,full)\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/openssl/include \\\n\t$$(INCLUDE) \\\n)\n\nendef\n\ndefine gb_LinkTarget__use_openssl\n$(call gb_LinkTarget_use_package,$(1),openssl)\nifeq ($(OS),WNT)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/openssl/libcrypto.lib \\\n\t$(gb_UnpackedTarball_workdir)/openssl/libssl.lib \\\n)\nelse\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/openssl/libssl.a \\\n\t$(gb_UnpackedTarball_workdir)/openssl/libcrypto.a \\\n\t$(if $(filter $(OS),LINUX),-pthread) \\\n)\n$(call gb_LinkTarget_use_external_project,$(1),openssl)\nifeq ($(OS),SOLARIS)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-lnsl \\\n\t-lsocket \\\n)\nendif\nendif\n\nendef\n\nendif # SYSTEM_OPENSSL\nendif # ENABLE_OPENSSL\n\n\nifneq ($(SYSTEM_ARGON2),)\n\ndefine gb_LinkTarget__use_argon2\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$(ARGON2_CFLAGS) \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(ARGON2_LIBS))\n\nendef\n\nelse # !SYSTEM_ARGON2\n\n$(eval $(call gb_Helper_register_packages_for_install,ooo, \\\n\targon2 \\\n))\n\ndefine gb_LinkTarget__use_argon2\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$(ARGON2_CFLAGS) \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(ARGON2_LIBS))\n$(call gb_LinkTarget_use_package,$(1),argon2)\nendef\n\nendif # SYSTEM_ARGON2\n\n\nifneq ($(SYSTEM_CDR),)\n\ndefine gb_LinkTarget__use_cdr\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n    $(CDR_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(CDR_LIBS))\n\nendef\n\nelse # !SYSTEM_CDR\n\ndefine gb_LinkTarget__use_cdr\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/libcdr/inc \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/libcdr/src/lib/.libs/libcdr-0.1$(gb_StaticLibrary_PLAINEXT) \\\n)\n$(call gb_LinkTarget_use_external_project,$(1),libcdr)\nendef\n\nendif # SYSTEM_CDR\n\n\nifneq ($(SYSTEM_EBOOK),)\n\ndefine gb_LinkTarget__use_ebook\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n    $(EBOOK_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(EBOOK_LIBS))\n\nendef\n\ngb_ExternalProject__use_ebook :=\n\nelse # !SYSTEM_EBOOK\n\ndefine gb_LinkTarget__use_ebook\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I${WORKDIR}/UnpackedTarball/libebook/inc \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/libebook/src/lib/.libs/libe-book-0.1$(gb_StaticLibrary_PLAINEXT) \\\n)\n$(call gb_LinkTarget_use_external_project,$(1),libebook)\n\nendef\n\ndefine gb_ExternalProject__use_ebook\n$(call gb_ExternalProject_use_external_project,$(1),libebook)\n\nendef\n\nendif # SYSTEM_EBOOK\n\n\nifneq ($(SYSTEM_ETONYEK),)\n\ndefine gb_LinkTarget__use_etonyek\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n    $(ETONYEK_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(ETONYEK_LIBS))\n\nendef\n\ngb_ExternalProject__use_etonyek :=\n\nelse # !SYSTEM_ETONYEK\n\nifeq ($(COM),MSC)\n\n$(eval $(call gb_Helper_register_libraries_for_install,PLAINLIBS_OOO,ooo,\\\n\tetonyek \\\n))\n\ndefine gb_LinkTarget__use_etonyek\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/libetonyek/inc \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_use_libraries,$(1),\\\n\tetonyek \\\n)\n\nendef\n\nelse # !MSC\n\n$(eval $(call gb_Helper_register_packages_for_install,ooo, \\\n\tlibetonyek \\\n))\n\ndefine gb_LinkTarget__use_etonyek\n$(call gb_LinkTarget_use_package,$(1),libetonyek)\n\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I${WORKDIR}/UnpackedTarball/libetonyek/inc \\\n\t-DLIBETONYEK_VISIBILITY \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-L$(gb_UnpackedTarball_workdir)/libetonyek/src/lib/.libs -letonyek-0.1 \\\n)\n$(call gb_LinkTarget_use_external_project,$(1),libetonyek)\n\nendef\n\ndefine gb_ExternalProject__use_etonyek\n$(call gb_ExternalProject_use_external_project,$(1),libetonyek)\n\nendef\n\nendif\n\nendif # SYSTEM_ETONYEK\n\n\nifneq ($(SYSTEM_FREEHAND),)\n\ndefine gb_LinkTarget__use_freehand\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n    $(FREEHAND_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(FREEHAND_LIBS))\n\nendef\n\ngb_ExternalProject__use_freehand :=\n\nelse # !SYSTEM_FREEHAND\n\ndefine gb_LinkTarget__use_freehand\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I${WORKDIR}/UnpackedTarball/libfreehand/inc \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/libfreehand/src/lib/.libs/libfreehand-0.1$(gb_StaticLibrary_PLAINEXT) \\\n)\n$(call gb_LinkTarget_use_external_project,$(1),libfreehand)\n\nendef\n\ndefine gb_ExternalProject__use_freehand\n$(call gb_ExternalProject_use_external_project,$(1),libfreehand)\n\nendef\n\nendif # SYSTEM_FREEHAND\n\n\nifneq ($(SYSTEM_ODFGEN),)\n\ndefine gb_LinkTarget__use_odfgen\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n    $(ODFGEN_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(ODFGEN_LIBS))\n\nendef\n\nelse # !SYSTEM_ODFGEN\n\nifeq ($(COM),MSC)\n\n$(eval $(call gb_Helper_register_libraries_for_install,PLAINLIBS_OOO,ooo,\\\n\todfgen \\\n))\n\ndefine gb_LinkTarget__use_odfgen\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/libodfgen/inc \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_use_libraries,$(1),\\\n\todfgen \\\n)\n\nendef\n\nelse # !MSC\n\n$(eval $(call gb_Helper_register_packages_for_install,ooo, \\\n\tlibodfgen \\\n))\n\ndefine gb_LinkTarget__use_odfgen\n$(call gb_LinkTarget_use_package,$(1),libodfgen)\n\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/libodfgen/inc \\\n\t-DLIBODFGEN_VISIBILITY \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-L$(gb_UnpackedTarball_workdir)/libodfgen/src/.libs -lodfgen-0.1 \\\n)\n\nendef\n\nendif\n\nendif # SYSTEM_ODFGEN\n\nifneq ($(SYSTEM_EPUBGEN),)\n\ndefine gb_LinkTarget__use_epubgen\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n    $(EPUBGEN_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(EPUBGEN_LIBS))\n\nendef\ngb_ExternalProject__use_epubgen :=\n\nelse # !SYSTEM_EPUBGEN\nifneq ($(ENABLE_WASM_STRIP_EPUB),TRUE)\n\ndefine gb_LinkTarget__use_epubgen\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/libepubgen/inc \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/libepubgen/src/lib/.libs/libepubgen-0.1$(gb_StaticLibrary_PLAINEXT) \\\n)\n$(call gb_LinkTarget_use_external_project,$(1),libepubgen)\n\nendef\ndefine gb_ExternalProject__use_epubgen\n$(call gb_ExternalProject_use_external_project,$(1),libepubgen)\n\nendef\n\nendif # ENABLE_WASM_STRIP_EPUB\nendif # SYSTEM_EPUBGEN\n\nifneq ($(SYSTEM_REVENGE),)\n\ndefine gb_LinkTarget__use_revenge\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n    $(REVENGE_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(REVENGE_LIBS))\n\nendef\n\ngb_ExternalProject__use_revenge :=\n\nelse # !SYSTEM_REVENGE\n\nifeq ($(COM),MSC)\n\n$(eval $(call gb_Helper_register_libraries_for_install,PLAINLIBS_OOO,ooo,\\\n\trevenge \\\n))\n\ndefine gb_LinkTarget__use_revenge\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$(REVENGE_CFLAGS) \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_use_libraries,$(1),\\\n\trevenge \\\n)\n\nendef\n\ndefine gb_ExternalProject__use_revenge\n$(call gb_ExternalProject_get_preparation_target,$(1)) : $(call gb_Library_get_target,revenge)\n\nendef\n\nelse # !MSC\n\n$(eval $(call gb_Helper_register_packages_for_install,ooo, \\\n\tlibrevenge \\\n))\n\ndefine gb_LinkTarget__use_revenge\n$(call gb_LinkTarget_use_package,$(1),librevenge)\n\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$(REVENGE_CFLAGS) \\\n\t-DLIBREVENGE_VISIBILITY \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(REVENGE_LIBS) \\\n)\nendef\n\ndefine gb_ExternalProject__use_revenge\n$(call gb_ExternalProject_use_package,$(1),librevenge)\n\nendef\n\nendif # MSC\n\nendif # SYSTEM_REVENGE\n\n\nifneq ($(SYSTEM_ABW),)\n\ndefine gb_LinkTarget__use_abw\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n    $(ABW_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(ABW_LIBS))\n\nendef\ngb_ExternalProject__use_abw :=\n\nelse # !SYSTEM_ABW\n\ndefine gb_LinkTarget__use_abw\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/libabw/inc \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/libabw/src/lib/.libs/libabw-0.1$(gb_StaticLibrary_PLAINEXT) \\\n)\n$(call gb_LinkTarget_use_external_project,$(1),libabw)\n\nendef\ndefine gb_ExternalProject__use_abw\n$(call gb_ExternalProject_use_external_project,$(1),libabw)\n\nendef\n\nendif # SYSTEM_ABW\n\n\nifneq ($(SYSTEM_MSPUB),)\n\ndefine gb_LinkTarget__use_mspub\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n    $(MSPUB_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(MSPUB_LIBS))\n\nendef\n\nelse # !SYSTEM_MSPUB\n\ndefine gb_LinkTarget__use_mspub\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/libmspub/inc \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/libmspub/src/lib/.libs/libmspub-0.1$(gb_StaticLibrary_PLAINEXT) \\\n)\n$(call gb_LinkTarget_use_external_project,$(1),libmspub)\n\nendef\n\nendif # SYSTEM_MSPUB\n\n\nifneq ($(SYSTEM_PAGEMAKER),)\n\ndefine gb_LinkTarget__use_pagemaker\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n    $(PAGEMAKER_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(PAGEMAKER_LIBS))\n\nendef\ngb_ExternalProject__use_pagemaker :=\n\nelse # !SYSTEM_PAGEMAKER\n\ndefine gb_LinkTarget__use_pagemaker\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/libpagemaker/inc \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/libpagemaker/src/lib/.libs/libpagemaker-0.0$(gb_StaticLibrary_PLAINEXT) \\\n)\n$(call gb_LinkTarget_use_external_project,$(1),libpagemaker)\n\nendef\ndefine gb_ExternalProject__use_pagemaker\n$(call gb_ExternalProject_use_external_project,$(1),libpagemaker)\n\nendef\n\nendif # SYSTEM_PAGEMAKER\n\n\nifneq ($(SYSTEM_QXP),)\n\ndefine gb_LinkTarget__use_qxp\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n    $(QXP_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(QXP_LIBS))\n\nendef\ngb_ExternalProject__use_qxp :=\n\nelse # !SYSTEM_QXP\n\ndefine gb_LinkTarget__use_qxp\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/libqxp/inc \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/libqxp/src/lib/.libs/libqxp-0.0$(gb_StaticLibrary_PLAINEXT) \\\n)\n$(call gb_LinkTarget_use_external_project,$(1),libqxp)\n\nendef\ndefine gb_ExternalProject__use_qxp\n$(call gb_ExternalProject_use_external_project,$(1),libqxp)\n\nendef\n\nendif # SYSTEM_QXP\n\n\nifneq ($(SYSTEM_ZMF),)\n\ndefine gb_LinkTarget__use_zmf\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n    $(ZMF_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(ZMF_LIBS))\n\nendef\ngb_ExternalProject__use_zmf :=\n\nelse # !SYSTEM_ZMF\n\ndefine gb_LinkTarget__use_zmf\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/libzmf/inc \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/libzmf/src/lib/.libs/libzmf-0.0$(gb_StaticLibrary_PLAINEXT) \\\n)\n$(call gb_LinkTarget_use_external_project,$(1),libzmf)\n\nendef\ndefine gb_ExternalProject__use_zmf\n$(call gb_ExternalProject_use_external_project,$(1),libzmf)\n\nendef\n\nendif # SYSTEM_ZMF\n\n\nifneq ($(SYSTEM_VISIO),)\n\ndefine gb_LinkTarget__use_visio\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n    $(VISIO_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(VISIO_LIBS))\n\nendef\n\nelse # !SYSTEM_VISIO\n\ndefine gb_LinkTarget__use_visio\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/libvisio/inc \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/libvisio/src/lib/.libs/libvisio-0.1$(gb_StaticLibrary_PLAINEXT) \\\n)\n$(call gb_LinkTarget_use_external_project,$(1),libvisio)\n\nendef\n\nendif # SYSTEM_VISIO\n\n\nifneq ($(SYSTEM_WPD),)\n\ndefine gb_LinkTarget__use_wpd\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n    $(WPD_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(WPD_LIBS))\n\nendef\ngb_ExternalProject__use_wpd :=\n\nelse # !SYSTEM_WPD\n\nifeq ($(COM),MSC)\n\n$(eval $(call gb_Helper_register_libraries_for_install,PLAINLIBS_OOO,ooo,\\\n\twpd \\\n))\n\ndefine gb_LinkTarget__use_wpd\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$(WPD_CFLAGS) \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_use_libraries,$(1),\\\n\twpd \\\n)\n\nendef\n\ndefine gb_ExternalProject__use_wpd\n$(call gb_ExternalProject_get_preparation_target,$(1)) : $(call gb_Library_get_target,wpd)\n\nendef\n\nelse # !MSC\n\n$(eval $(call gb_Helper_register_packages_for_install,ooo, \\\n\tlibwpd \\\n))\n\ndefine gb_LinkTarget__use_wpd\n$(call gb_LinkTarget_use_package,$(1),libwpd)\n\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$(WPD_CFLAGS) \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(WPD_LIBS) \\\n)\n\nendef\n\ndefine gb_ExternalProject__use_wpd\n$(call gb_ExternalProject_use_package,$(1),libwpd)\n\nendef\n\nendif # MSC\n\nendif # SYSTEM_WPD\n\n\nifneq ($(SYSTEM_WPG),)\n\ndefine gb_LinkTarget__use_wpg\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n    $(WPG_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(WPG_LIBS))\n\nendef\ngb_ExternalProject__use_wpg :=\n\nelse # !SYSTEM_WPG\n\nifeq ($(COM),MSC)\n\n$(eval $(call gb_Helper_register_libraries_for_install,PLAINLIBS_OOO,ooo,\\\n\twpg \\\n))\n\ndefine gb_LinkTarget__use_wpg\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/libwpg/inc \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_use_libraries,$(1),\\\n\twpg \\\n)\n\nendef\n\nelse # !MSC\n\n$(eval $(call gb_Helper_register_packages_for_install,ooo, \\\n\tlibwpg \\\n))\n\ndefine gb_LinkTarget__use_wpg\n$(call gb_LinkTarget_use_package,$(1),libwpg)\n\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/libwpg/inc \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-L$(gb_UnpackedTarball_workdir)/libwpg/src/lib/.libs -lwpg-0.3 \\\n)\n\nendef\n\nendif # MSC\n\nendif # SYSTEM_WPG\n\n\nifneq ($(SYSTEM_WPS),)\n\ndefine gb_LinkTarget__use_wps\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n    $(WPS_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(WPS_LIBS))\n\nendef\ngb_ExternalProject__use_wps :=\n\nelse # !SYSTEM_WPS\n\nifeq ($(COM),MSC)\n\n$(eval $(call gb_Helper_register_libraries_for_install,PLAINLIBS_OOO,ooo,\\\n\twps \\\n))\n\ndefine gb_LinkTarget__use_wps\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/libwps/inc \\\n\t$$(INCLUDE) \\\n)\n\n$(call gb_LinkTarget_use_libraries,$(1),\\\n\twps \\\n)\n\nendef\n\nelse # !MSC\n\n$(eval $(call gb_Helper_register_packages_for_install,ooo, \\\n\tlibwps \\\n))\n\ndefine gb_LinkTarget__use_wps\n$(call gb_LinkTarget_use_package,$(1),libwps)\n\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/libwps/inc \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-L$(gb_UnpackedTarball_workdir)/libwps/src/lib/.libs -lwps-0.4 \\\n)\n\nendef\n\nendif # MSC\n\nendif # SYSTEM_WPS\n\n\nifneq ($(SYSTEM_MWAW),)\n\ndefine gb_LinkTarget__use_mwaw\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n    $(MWAW_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(MWAW_LIBS))\n\nendef\n\nelse # !SYSTEM_MWAW\n\nifeq ($(COM),MSC)\n\n$(eval $(call gb_Helper_register_libraries_for_install,PLAINLIBS_OOO,ooo,\\\n\tmwaw \\\n))\n\ndefine gb_LinkTarget__use_mwaw\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/libmwaw/inc \\\n\t$$(INCLUDE) \\\n)\n\n$(call gb_LinkTarget_use_libraries,$(1),\\\n\tmwaw \\\n)\n\nendef\n\nelse # !MSC\n\n$(eval $(call gb_Helper_register_packages_for_install,ooo,\\\n\tlibmwaw \\\n))\n\ndefine gb_LinkTarget__use_mwaw\n$(call gb_LinkTarget_use_package,$(1),libmwaw)\n\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/libmwaw/inc \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-L$(gb_UnpackedTarball_workdir)/libmwaw/src/lib/.libs -lmwaw-0.3 \\\n)\n\nendef\n\nendif # MSC\n\nendif # SYSTEM_MWAW\n\nifneq ($(SYSTEM_STAROFFICE),)\n\ndefine gb_LinkTarget__use_staroffice\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n    $(STAROFFICE_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(STAROFFICE_LIBS))\n\nendef\n\nelse # !SYSTEM_STAROFFICE\n\nifeq ($(COM),MSC)\n\n$(eval $(call gb_Helper_register_libraries_for_install,PLAINLIBS_OOO,ooo,\\\n\tstaroffice \\\n))\n\ndefine gb_LinkTarget__use_staroffice\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/libstaroffice/inc \\\n\t$$(INCLUDE) \\\n)\n\n$(call gb_LinkTarget_use_libraries,$(1),\\\n\tstaroffice \\\n)\n\nendef\n\nelse # !MSC\n\n$(eval $(call gb_Helper_register_packages_for_install,ooo,\\\n\tlibstaroffice \\\n))\n\ndefine gb_LinkTarget__use_staroffice\n$(call gb_LinkTarget_use_package,$(1),libstaroffice)\n\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/libstaroffice/inc \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-L$(gb_UnpackedTarball_workdir)/libstaroffice/src/lib/.libs -lstaroffice-0.0 \\\n)\n\nendef\n\nendif # MSC\n\nendif # SYSTEM_STAROFFICE\n\n\nifneq ($(SYSTEM_LCMS2),)\n\ndefine gb_LinkTarget__use_lcms2\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(LCMS2_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(LCMS2_LIBS))\n\nendef\n\ngb_ExternalProject__use_lcms2 :=\n\nelse # !SYSTEM_LCMS2\n\n$(eval $(call gb_Helper_register_packages_for_install,ooo,\\\n\tlcms2 \\\n))\n\ndefine gb_ExternalProject__use_lcms2\n$(call gb_ExternalProject_use_package,$(1),lcms2)\n\nendef\n\nifeq ($(OS),ANDROID)\n\ndefine gb_LinkTarget__use_lcms2\n$(call gb_LinkTarget_use_package,$(1),lcms2)\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/lcms2/include \\\n\t$$(INCLUDE) \\\n)\n\nendef\n\nelse\n\ndefine gb_LinkTarget__use_lcms2\n$(call gb_LinkTarget_use_package,$(1),lcms2)\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/lcms2/include \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(LCMS2_LIBS))\n\nendef\n\nendif # ANDROID\nendif # SYSTEM_LCMS2\n\nifneq ($(ENABLE_LPSOLVE),)\n\nifneq ($(SYSTEM_LPSOLVE),)\n\ndefine gb_LinkTarget__use_lpsolve\n$(call gb_LinkTarget_add_libs,$(1),-llpsolve55)\n$(call gb_LinkTarget_add_defs,$(1),\\\n\t-DSYSTEM_LPSOLVE \\\n)\n\nendef\n\nelse # !SYSTEM_LPSOLVE\n\ndefine gb_LinkTarget__use_lpsolve\n$(call gb_LinkTarget_use_package,$(1),lpsolve)\nifeq ($(COM),MSC)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/lpsolve/lpsolve55/lpsolve55.lib \\\n)\nelse\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-L$(gb_UnpackedTarball_workdir)/lpsolve/lpsolve55 -llpsolve55 \\\n)\nendif\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/lpsolve \\\n\t$$(INCLUDE) \\\n)\n\nendef\n\n$(eval $(call gb_Helper_register_packages_for_install,ooo,\\\n\tlpsolve \\\n))\n\nendif # SYSTEM_LPSOLVE\n\nelse\n\ngb_LinkTarget__use_lpsolve :=\n\nendif # ENABLE_LPSOLVE\n\nifneq ($(ENABLE_COINMP),)\n\nifneq ($(SYSTEM_COINMP),TRUE)\n\ndefine gb_LinkTarget__use_coinmp\n$(call gb_LinkTarget_use_package,$(1),coinmp)\nifeq ($(COM),MSC)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/coinmp/CoinMP/MSVisualStudio/v9/$(wnt_arch_subdir_optional)$(if $(MSVC_USE_DEBUG_RUNTIME),Debug,Release)/CoinMP.lib \\\n)\nelse\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-L$(gb_UnpackedTarball_workdir)/coinmp/Cbc/src/.libs -lCbc -lCbcSolver \\\n\t-L$(gb_UnpackedTarball_workdir)/coinmp/Cgl/src/.libs -lCgl \\\n\t-L$(gb_UnpackedTarball_workdir)/coinmp/Clp/src/.libs -lClp \\\n\t-L$(gb_UnpackedTarball_workdir)/coinmp/Clp/src/OsiClp/.libs -lOsiClp \\\n\t-L$(gb_UnpackedTarball_workdir)/coinmp/CoinMP/src/.libs -lCoinMP \\\n\t-L$(gb_UnpackedTarball_workdir)/coinmp/CoinUtils/src/.libs -lCoinUtils \\\n\t-L$(gb_UnpackedTarball_workdir)/coinmp/Osi/src/Osi/.libs -lOsi \\\n)\nendif\n$(call gb_LinkTarget_set_include,$(1),\\\n   -I$(gb_UnpackedTarball_workdir)/coinmp/CoinMP/src \\\n   -I$(gb_UnpackedTarball_workdir)/coinmp/CoinUtils/src \\\n   $$(INCLUDE) \\\n)\n\nendef\n\n$(eval $(call gb_Helper_register_packages_for_install,ooo,\\\n\tcoinmp \\\n))\n\nelse # SYSTEM_COINMP\n\ndefine gb_LinkTarget__use_coinmp\n$(call gb_LinkTarget_set_include,$(1),\\\n       $$(INCLUDE) \\\n       $(COINMP_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(COINMP_LIBS))\n\nendef\n\nendif\n\nelse\n\ngb_LinkTarget__use_coinmp :=\n\nendif # ENABLE_COINMP\n\nifneq (,$(filter MDNSRESPONDER,$(BUILD_TYPE)))\n\ndefine gb_LinkTarget__use_mDNSResponder\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/mDNSResponder/mDNSShared \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_use_static_libraries,$(1),mDNSResponder)\nendef\n\nendif # MDNSRESPONDER\n\nifeq ($(ENABLE_GIO),TRUE)\n\ndefine gb_LinkTarget__use_gio\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(GIO_CFLAGS) \\\n)\n\n$(call gb_LinkTarget_add_libs,$(1),$(GIO_LIBS))\n\nendef\n\nelse # ENABLE_GIO\n\ndefine gb_LinkTarget__use_gio\n\nendef\n\nendif # ENABLE_GIO\n\nifeq ($(ENABLE_AVAHI),TRUE)\n\ndefine gb_LinkTarget__use_avahi\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(AVAHI_CFLAGS) \\\n)\n\n$(call gb_LinkTarget_add_defs,$(1),\\\n    -DENABLE_AVAHI \\\n)\n\n$(call gb_LinkTarget_add_libs,$(1),$(AVAHI_LIBS))\n\nendef\n\nelse # ENABLE_AVAHI\n\ngb_LinkTarget__use_avahi :=\n\nendif # ENABLE_AVAHI\n\nifeq ($(ENABLE_CPDB),TRUE)\n\ndefine gb_LinkTarget__use_cpdb\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(CPDB_CFLAGS) \\\n)\n\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(CPDB_LIBS) \\\n)\n\nendef\n\nelse # ENABLE_CPDB\n\ndefine gb_LinkTarget__use_cpdb\n\nendef\n\nendif # ENABLE_CPDB\n\nifeq ($(ENABLE_CUPS),TRUE)\n\ndefine gb_LinkTarget__use_cups\n\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-lcups \\\n)\n\nendef\n\nelse # ENABLE_CUPS\n\ndefine gb_LinkTarget__use_cups\n\nendef\n\nendif # ENABLE_CUPS\n\nifeq ($(ENABLE_DBUS),TRUE)\n\ndefine gb_LinkTarget__use_dbus\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(DBUS_CFLAGS) \\\n)\n\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(DBUS_LIBS) \\\n)\n\nendef\n\nelse # ENABLE_DBUS\n\ndefine gb_LinkTarget__use_dbus\n\nendef\n\nendif # ENABLE_DBUS\n\n\nifneq ($(SYSTEM_LIBPNG),)\n\ndefine gb_LinkTarget__use_libpng\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(LIBPNG_CFLAGS) \\\n)\n\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(LIBPNG_LIBS) \\\n)\n\nendef\n\ngb_ExternalProject__use_libpng :=\n\nelse # !SYSTEM_LIBPNG\n\ndefine gb_LinkTarget__use_libpng\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$(LIBPNG_CFLAGS) \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_use_static_libraries,$(1),\\\n\tlibpng \\\n)\n$(call gb_LinkTarget__use_zlib,$(1))\n\nendef\n\ndefine gb_ExternalProject__use_libpng\n$(call gb_ExternalProject_use_static_libraries,$(1),\\\n\tlibpng \\\n)\n\nendef\n\nendif # !SYSTEM_LIBPNG\n\nifneq ($(SYSTEM_LIBTIFF),)\n\ndefine gb_LinkTarget__use_libtiff\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(LIBTIFF_CFLAGS) \\\n)\n\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(LIBTIFF_LIBS) \\\n)\n\nendef\n\ngb_ExternalProject__use_libtiff :=\n\nelse # !SYSTEM_LIBTIFF\n\ndefine gb_LinkTarget__use_libtiff\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$(LIBTIFF_CFLAGS) \\\n\t$$(INCLUDE) \\\n)\n\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/libtiff/libtiff \\\n\t$$(INCLUDE) \\\n)\nifeq ($(OS),WNT)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/libtiff/libtiff/.libs/libtiff$(gb_StaticLibrary_PLAINEXT) \\\n)\nelse\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-L$(gb_UnpackedTarball_workdir)/libtiff/libtiff/.libs -ltiff \\\n)\nendif\n$(call gb_LinkTarget_use_external_project,$(1),libtiff,full)\n\nendef\n\ndefine gb_ExternalProject__use_libtiff\n$(call gb_ExternalProject_use_external_project,$(1),libtiff)\n\nendef\n\nendif # !SYSTEM_LIBTIFF\n\nifneq ($(SYSTEM_LIBWEBP),)\n\ndefine gb_LinkTarget__use_libwebp\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(LIBWEBP_CFLAGS) \\\n)\n\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(LIBWEBP_LIBS) \\\n)\n\nendef\n\ngb_ExternalProject__use_libwebp :=\n\nelse # !SYSTEM_LIBWEBP\n\ndefine gb_LinkTarget__use_libwebp\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$(LIBWEBP_CFLAGS) \\\n\t$$(INCLUDE) \\\n)\n\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/libwebp/src \\\n\t$$(INCLUDE) \\\n)\nifeq ($(OS),WNT)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/libwebp/output/lib/libwebp$(if $(MSVC_USE_DEBUG_RUNTIME),_debug)$(gb_StaticLibrary_PLAINEXT) \\\n)\nelse\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-L$(gb_UnpackedTarball_workdir)/libwebp/src/.libs -lwebp \\\n\t-L$(gb_UnpackedTarball_workdir)/libwebp/sharpyuv/.libs -lsharpyuv \\\n)\nendif\n$(call gb_LinkTarget_use_external_project,$(1),libwebp)\n\nendef\n\ndefine gb_ExternalProject__use_libwebp\n$(call gb_ExternalProject_use_external_project,$(1),libwebp)\n\nendef\n\nendif # !SYSTEM_LIBWEBP\n\n\nifneq ($(SYSTEM_CURL),)\n\ndefine gb_LinkTarget__use_curl\n$(call gb_LinkTarget_add_defs,$(1),\\\n\t-DSYSTEM_CURL \\\n)\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(CURL_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(CURL_LIBS))\n\nendef\n\nelse # !SYSTEM_CURL\n\n$(if $(ENABLE_CURL),\\\n$(eval $(call gb_Helper_register_packages_for_install,ooo,\\\n\tcurl \\\n)))\n\ndefine gb_LinkTarget__use_curl\n$(call gb_LinkTarget_use_package,$(1),curl)\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/curl/include \\\n\t$$(INCLUDE) \\\n)\n\nifeq ($(COM),MSC)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/curl/builds/libcurl-vc12-$(gb_MSBUILD_PLATFORM)-$(gb_MSBUILD_CONFIG)-dll-zlib-static-ipv6-sspi-schannel/lib/libcurl$(if $(MSVC_USE_DEBUG_RUNTIME),_debug).lib \\\n)\nelse\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-L$(gb_UnpackedTarball_workdir)/curl/lib/.libs -lcurl \\\n)\nendif\n\nendef\n\nendif # SYSTEM_CURL\n\nifeq ($(ENABLE_VALGRIND),TRUE)\n\ndefine gb_LinkTarget__use_valgrind\n$(call gb_LinkTarget_add_defs,$(1),\\\n\t-DHAVE_VALGRIND_HEADERS \\\n)\n\n$(call gb_LinkTarget_set_include,$(1),\\\n    $$(INCLUDE) \\\n    $(VALGRIND_CFLAGS) \\\n)\n\nendef\n\nelse # !ENABLE_VALGRIND\n\ndefine gb_LinkTarget__use_valgrind\n\nendef\n\nendif # ENABLE_VALGRIND\n\nifeq ($(ENABLE_POPPLER),TRUE)\n\nifneq ($(SYSTEM_POPPLER),)\n\ndefine gb_LinkTarget__use_poppler\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$(POPPLER_CFLAGS) \\\n\t$$(INCLUDE) \\\n)\n\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(POPPLER_LIBS) \\\n)\n\nendef\n\nelse # !SYSTEM_POPPLER\n\n$(eval $(call gb_Helper_register_packages_for_install,pdfimport,\\\n\tpoppler_data \\\n))\n\ndefine gb_LinkTarget__use_poppler\n$(call gb_LinkTarget_use_external_project,$(1),poppler,full)\n$(call gb_LinkTarget_use_package,$(1),poppler_data)\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/poppler \\\n\t-I$(gb_UnpackedTarball_workdir)/poppler/poppler \\\n\t-I$(gb_UnpackedTarball_workdir)/poppler/goo \\\n\t$$(INCLUDE) \\\n)\n\n$(call gb_LinkTarget_use_static_libraries,$(1),poppler)\n$(call gb_LinkTarget_use_external,$(1),libjpeg)\n\nifeq ($(OS),MACOSX)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-lobjc \\\n)\nelse ifeq ($(OS),LINUX)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-pthread \\\n)\nelse ifeq ($(OS),WNT)\n$(call gb_LinkTarget_use_system_win32_libs,$(1),\\\n\tadvapi32 \\\n\tgdi32 \\\n)\nendif\n\nendef\n\nendif # SYSTEM_POPPLER\n\nendif # ENABLE_POPPLER\n\n\nifneq ($(SYSTEM_CLUCENE),)\n\ndefine gb_LinkTarget__use_clucene\n$(call gb_LinkTarget_add_defs,$(1),\\\n\t$(filter-out -I% -isystem%,$(subst -isystem /,-isystem/,$(CLUCENE_CFLAGS))) \\\n\t-DSYSTEM_CLUCENE \\\n)\n\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$(subst -isystem/,-isystem /,$(filter -I% -isystem%,$(subst -isystem /,-isystem/,$(CLUCENE_CFLAGS)))) \\\n\t$$(INCLUDE) \\\n)\n\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(CLUCENE_LIBS) \\\n)\n\nendef\n\nelse # !SYSTEM_CLUCENE\n\ndefine gb_LinkTarget__use_clucene\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/clucene/src/core \\\n\t-I$(gb_UnpackedTarball_workdir)/clucene/src/shared \\\n\t-I$(gb_UnpackedTarball_workdir)/clucene/src/contribs-lib \\\n\t$$(INCLUDE) \\\n)\n\n$(call gb_LinkTarget_use_libraries,$(1),\\\n\tclucene \\\n)\n\nendef\n\n$(eval $(call gb_Helper_register_libraries_for_install,PLAINLIBS_OOO,ooo,\\\n    $(call gb_Helper_optionals_or,HELPTOOLS XMLHELP,clucene) \\\n))\n\nendif # SYSTEM_CLUCENE\n\ndefine gb_LinkTarget__use_gobject\n$(call gb_LinkTarget_add_libs,$(1),\\\n       $(GOBJECT_LIBS) \\\n)\n\n$(call gb_LinkTarget_set_include,$(1),\\\n       $$(INCLUDE) \\\n       $(GOBJECT_CFLAGS) \\\n)\nendef\n\nifneq ($(SYSTEM_HSQLDB),)\n\ndefine gb_LinkTarget__use_hsqldb\n\n$(call gb_LinkTarget_add_defs,$(1),\\\n\t-DSYSTEM_HSQLDB \\\n\t-DHSQLDB_JAR=\\\"\"file://$(HSQLDB_JAR)\"\\\" \\\n)\n\nendef\n\nelse # !SYSTEM_HSQLDB\n\ndefine gb_LinkTarget__use_hsqldb\n\nendef\n\nendif # SYSTEM_HSQLDB\n\nifeq ($(ENABLE_LDAP),TRUE)\nifneq ($(SYSTEM_OPENLDAP),)\n\ndefine gb_LinkTarget__use_openldap\n\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-lldap \\\n\t-llber \\\n)\n\nendef\n\ngb_ExternalProject__use_openldap :=\n\nelse # !SYSTEM_OPENLDAP\n\ndefine gb_LinkTarget__use_openldap\n$(call gb_LinkTarget_use_unpacked,$(1),openldap)\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/openldap/include \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_use_external_project,$(1),openldap,full)\n$(call gb_LinkTarget_add_libs,$(1), \\\n\t$(gb_UnpackedTarball_workdir)/openldap/libraries/libldap/.libs/libldap.a \\\n\t$(gb_UnpackedTarball_workdir)/openldap/libraries/liblber/.libs/liblber.a \\\n)\n\nendef\nendif\n\ndefine gb_ExternalProject__use_openldap\n$(call gb_ExternalProject_use_external_project,$(1),openldap)\n\nendef\n\nendif # SYSTEM_OPENLDAP\n\nifneq ($(SYSTEM_LIBTOMMATH),)\n\ndefine gb_LinkTarget__use_libtommath\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$(LIBTOMMATH_CFLAGS) \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(LIBTOMMATH_LIBS))\n\nendef\n\nelse # !SYSTEM_LIBTOMMATH\ndefine gb_LinkTarget__use_libtommath\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I${WORKDIR}/UnpackedTarball/libtommath \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/libtommath/libtommath$(gb_StaticLibrary_PLAINEXT) \\\n)\n$(call gb_LinkTarget_use_external_project,$(1),libtommath)\n\nendef\n\nendif # SYSTEM_LIBTOMMATH\n\ndefine gb_ExternalProject__use_libtommath\n$(call gb_ExternalProject_use_external_project,$(1),libtommath)\n\nendef\n\nifeq ($(ENABLE_FIREBIRD_SDBC),TRUE)\n\nifneq ($(SYSTEM_FIREBIRD),)\n\ndefine gb_LinkTarget__use_libfbembed\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$(FIREBIRD_CFLAGS) \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(FIREBIRD_LIBS))\n\nendef\n\nelse # !SYSTEM_FIREBIRD\n\n$(eval $(call gb_Helper_register_packages_for_install,firebirdsdbc,\\\n\tfirebird \\\n))\n\n#$(call gb_LinkTarget__use_libatomic_ops,$(1))\n#$(call gb_LinkTarget__use_libtommath,$(1))\n\ndefine gb_LinkTarget__use_libfbembed\n$(call gb_LinkTarget_use_package,$(1),firebird)\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/firebird/gen/$(if $(ENABLE_DEBUG),Debug,Release)/firebird/include \\\n\t$$(INCLUDE) \\\n)\nifeq ($(COM),MSC)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/firebird/gen/$(if $(ENABLE_DEBUG),Debug,Release)/firebird/bin/ifbclient.lib \\\n)\nelse\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-L$(gb_UnpackedTarball_workdir)/firebird/gen/$(if $(ENABLE_DEBUG),Debug,Release)/firebird/lib -lfbclient \\\n)\nendif\n\nendef\n\n\n# endef\n\nendif # SYSTEM_FIREBIRD\n\nelse # !ENABLE_FIREBIRD_SDBC\n\ngb_LinkTarget__use_firebird :=\n# gb_LinkTarget__use_atomic_ops :=\n# gb_LinkTarget__use_libtommath :=\n\nendif # ENABLE_FIREBIRD_SDBC\n\n\nifneq ($(SYSTEM_POSTGRESQL),)\n\ndefine gb_LinkTarget__use_postgresql\n\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$(POSTGRESQL_INC) \\\n\t$$(INCLUDE) \\\n)\n\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-lpq \\\n)\n\n$(call gb_LinkTarget_add_ldflags,$(1),\\\n\t$(POSTGRESQL_LIB) \\\n)\n\nendef\n\nelse # !SYSTEM_POSTGRESQL\n\nifeq ($(OS),WNT)\n$(if $(MPL_SUBSET),,\\\n$(eval $(call gb_Helper_register_packages_for_install,postgresqlsdbc,\\\n\tpostgresql \\\n)))\nendif # WNT\n\ndefine gb_LinkTarget__use_postgresql\n\n$(call gb_LinkTarget_use_external_project,$(1),postgresql,full)\n\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/postgresql/src/include \\\n\t-I$(gb_UnpackedTarball_workdir)/postgresql/src/interfaces/libpq \\\n\t$$(INCLUDE) \\\n)\n\nifeq ($(OS),WNT)\n\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/postgresql/$(gb_MSBUILD_CONFIG)/libpq/libpq.lib \\\n)\n\nelse # !WNT\n\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/postgresql/src/interfaces/libpq/libpq$(gb_StaticLibrary_PLAINEXT) \\\n\t$(gb_UnpackedTarball_workdir)/postgresql/src/common/libpgcommon$(gb_StaticLibrary_PLAINEXT) \\\n\t$(gb_UnpackedTarball_workdir)/postgresql/src/port/libpgport$(gb_StaticLibrary_PLAINEXT) \\\n    $(if $(WITH_GSSAPI),$(GSSAPI_LIBS)) \\\n)\n\nendif # !WNT\n\nendef # gb_LinkTarget__use_postgresql\n\nendif # !SYSTEM_POSTGRESQL\n\nifneq (,$(filter TRUE,$(ENABLE_KF5) $(ENABLE_GTK3_KDE5)))\n\ndefine gb_LinkTarget__use_kf5\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$(subst -isystem/,-isystem /,$(filter -I% -isystem%,$(subst -isystem /,-isystem/,$(KF5_CFLAGS)))) \\\n\t$$(INCLUDE) \\\n)\n\n$(call gb_LinkTarget_add_cxxflags,$(1),\\\n\t$(filter-out -I% -isystem%,$(subst -isystem /,-isystem/,$(KF5_CFLAGS))) \\\n)\n\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(KF5_LIBS) \\\n)\n\nendef\n\nelse # !ENABLE_KF5\n\ndefine gb_LinkTarget__use_kf5\n\nendef\n\nendif # ENABLE_KF5\n\nifneq (,$(filter TRUE,$(ENABLE_KF6)))\n\ndefine gb_LinkTarget__use_kf6\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$(subst -isystem/,-isystem /,$(filter -I% -isystem%,$(subst -isystem /,-isystem/,$(KF6_CFLAGS)))) \\\n\t$$(INCLUDE) \\\n)\n\n$(call gb_LinkTarget_add_cxxflags,$(1),\\\n\t$(filter-out -I% -isystem%,$(subst -isystem /,-isystem/,$(KF6_CFLAGS))) \\\n)\n\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(KF6_LIBS) \\\n)\n\nendef\n\nelse # !ENABLE_KF6\n\ndefine gb_LinkTarget__use_kf6\n\nendef\n\nendif # ENABLE_KF6\n\nifneq (,$(filter TRUE,$(ENABLE_QT5) $(ENABLE_GTK3_KDE5)))\n\ndefine gb_LinkTarget__use_qt5\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$(subst -isystem/,-isystem /,$(filter -I% -isystem%,$(subst -isystem /,-isystem/,$(QT5_CFLAGS)))) \\\n\t$$(INCLUDE) \\\n)\n\n$(call gb_LinkTarget_add_defs,$(1),\\\n\t$(filter-out -I% -isystem%,$(subst -isystem /,-isystem/,$(QT5_CFLAGS))) \\\n)\n\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(QT5_LIBS) \\\n)\n\nendef\n\nelse # !ENABLE_QT5\n\ndefine gb_LinkTarget__use_qt5\n\nendef\n\nendif # ENABLE_QT5\n\nifeq ($(ENABLE_QT6),TRUE)\n\ndefine gb_LinkTarget__use_qt6\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$(subst -isystem/,-isystem /,$(filter -I% -isystem%,$(subst -isystem /,-isystem/,$(QT6_CFLAGS)))) \\\n\t$$(INCLUDE) \\\n)\n\n$(call gb_LinkTarget_add_defs,$(1),\\\n\t$(filter-out -I% -isystem%,$(subst -isystem /,-isystem/,$(QT6_CFLAGS))) \\\n)\n\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(QT6_LIBS) \\\n)\n\nendef\n\nelse # !ENABLE_QT6\n\ndefine gb_LinkTarget__use_qt6\n\nendef\n\nendif # ENABLE_QT6\n\n\n# PYTHON\n# extra python_headers external because pyuno wrapper must not link python\nifneq ($(SYSTEM_PYTHON),)\n\ndefine gb_LinkTarget__use_python_headers\n$(call gb_LinkTarget_add_defs,$(1),\\\n\t$(filter-out -I% -isystem%,$(subst -isystem /,-isystem/,$(PYTHON_CFLAGS)))) \\\n)\n\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$(subst -isystem/,-isystem /,$(filter -I% -isystem%,$(subst -isystem /,-isystem/,$(PYTHON_CFLAGS)))) \\\n\t$$(INCLUDE) \\\n)\n\nendef\n\ndefine gb_LinkTarget__use_python\n$(call gb_LinkTarget__use_python_headers,$(1))\n\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(PYTHON_LIBS) \\\n)\n\nendef\n\nelse # !SYSTEM_PYTHON\n\n$(eval $(call gb_Helper_register_packages_for_install,python,\\\n\tpython3 \\\n    $(if $(filter WNT,$(OS)),libffi) \\\n))\n\ndefine gb_LinkTarget__use_python_headers\n$(call gb_LinkTarget_use_external_project,$(1),python3,full)\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/python3 \\\n\t-I$(gb_UnpackedTarball_workdir)/python3/PC \\\n\t-I$(gb_UnpackedTarball_workdir)/python3/Include \\\n\t$$(INCLUDE) \\\n)\n\nendef\n\ndefine gb_LinkTarget__use_python\n$(call gb_LinkTarget__use_python_headers,$(1))\nifeq ($(OS),MACOSX)\n$(call gb_LinkTarget_use_generated_package,$(1),python3)\nelse\n$(call gb_LinkTarget_use_package,$(1),python3)\nendif\n\nifeq ($(OS),WNT)\nifeq ($(CPUNAME),X86_64)\npython_arch_subdir=amd64/\nelse ifeq ($(CPUNAME),AARCH64)\npython_arch_subdir=arm64/\nelse\npython_arch_subdir=win32/\nendif\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/python3/PCbuild/$(python_arch_subdir)python$(PYTHON_VERSION_MAJOR)$(PYTHON_VERSION_MINOR)$(if $(MSVC_USE_DEBUG_RUNTIME),_d).lib \\\n)\nelse ifeq ($(OS),MACOSX)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-F$(gb_UnpackedTarball_workdir)/python3/python-inst/@__________________________________________________OOO -framework LibreOfficePython \\\n)\nelse\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-L$(gb_UnpackedTarball_workdir)/python3 \\\n\t-lpython$(PYTHON_VERSION_MAJOR).$(PYTHON_VERSION_MINOR)$(if $(ENABLE_DBGUTIL),d) \\\n)\nendif\n\nendef\n\n# this is only used by python currently\ndefine gb_ExternalProject__use_libffi\n$(call gb_ExternalProject_use_external_project,$(1),libffi)\n\nendef\n\nendif # SYSTEM_PYTHON\n\n# ORCUS\nifneq ($(SYSTEM_LIBORCUS),)\n\ndefine gb_LinkTarget__use_orcus\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n    $(ORCUS_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(ORCUS_LIBS))\nendef\n\ndefine gb_LinkTarget__use_orcus-parser\n\nendef\n\nelse # !SYSTEM_LIBORCUS\n\nifeq ($(COM),MSC)\n\n$(eval $(call gb_Helper_register_libraries_for_install,PLAINLIBS_OOO,ooo,\\\n\torcus \\\n\torcus-parser \\\n))\n\ndefine gb_LinkTarget__use_orcus\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/liborcus/include \\\n\t$$(INCLUDE) \\\n)\n\n$(call gb_LinkTarget_use_libraries,$(1),\\\n\torcus \\\n)\n\nendef\n\ndefine gb_LinkTarget__use_orcus-parser\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/liborcus/include \\\n\t$$(INCLUDE) \\\n)\n\n$(call gb_LinkTarget_use_libraries,$(1),\\\n\torcus-parser \\\n)\n\nendef\n\nelse # !MSC\n\n$(eval $(call gb_Helper_register_packages_for_install,ooo,\\\n\tliborcus \\\n))\n\ndefine gb_LinkTarget__use_orcus\n$(call gb_LinkTarget_use_package,$(1),liborcus)\n\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/liborcus/include \\\n\t$$(INCLUDE) \\\n)\n\n$(call gb_LinkTarget_add_libs,$(1),\\\n       -L$(gb_UnpackedTarball_workdir)/liborcus/src/liborcus/.libs -lorcus-0.18 \\\n)\n\n$(if $(SYSTEM_BOOST), \\\n\t$(call gb_LinkTarget_add_ldflags,$(1),$(BOOST_LDFLAGS)) \\\n\t$(call gb_LinkTarget_add_libs,$(1),$(BOOST_SYSTEM_LIB)) \\\n)\n\nendef\n\ndefine gb_LinkTarget__use_orcus-parser\n$(call gb_LinkTarget_use_package,$(1),liborcus)\n\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/liborcus/include \\\n\t$$(INCLUDE) \\\n)\n\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-L$(gb_UnpackedTarball_workdir)/liborcus/src/parser/.libs -lorcus-parser-0.18 \\\n)\n\nendef\n\nendif # MSC\n\nendif # SYSTEM_LIBORCUS\n\nifeq ($(ENABLE_EOT),TRUE)\n\nifneq ($(SYSTEM_LIBEOT),)\n\ndefine gb_LinkTarget__use_libeot\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n    $(LIBEOT_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(LIBEOT_LIBS))\n\nendef\n\ngb_ExternalProject__use_libeot :=\n\nelse # !SYSTEM_LIBEOT\n\ndefine gb_LinkTarget__use_libeot\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/libeot/inc \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/libeot/.libs/libeot$(gb_StaticLibrary_PLAINEXT) \\\n)\n$(call gb_LinkTarget_use_external_project,$(1),libeot)\n\nendef\n\ndefine gb_ExternalProject__use_libeot\n$(call gb_ExternalProject_use_external_project,$(1),libeot)\n\nendef\n\nendif # SYSTEM_LIBEOT\n\nelse # !ENABLE_EOT\n\ngb_LinkTarget__use_libeot :=\ngb_ExternalProject__use_libeot :=\n\nendif # ENABLE_EOT\n\n### X11 stuff ###\n\nifeq ($(USING_X11), TRUE)\n\ndefine gb_LinkTarget__use_Xrandr\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(XRANDR_CFLAGS) \\\n)\n\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(XRANDR_LIBS) \\\n)\nendef\n\ndefine gb_LinkTarget__use_Xrender\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(XRENDER_CFLAGS) \\\n)\n\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(XRENDER_LIBS) \\\n)\nendef\n\nendif # USING_X11\n\n\ngb_ExternalProject__use_nss3:=\n\n\nifneq ($(SYSTEM_NSS),)\n\ndefine gb_LinkTarget__use_nss3\n$(call gb_LinkTarget_add_defs,$(1),\\\n\t-DSYSTEM_NSS \\\n)\n\n$(call gb_LinkTarget_set_include,$(1),\\\n    $$(INCLUDE) \\\n    $(NSS_CFLAGS) \\\n)\n\n$(call gb_LinkTarget_add_libs,$(1),\\\n    $(NSS_LIBS) \\\n)\n\nendef\n\ndefine gb_LinkTarget__use_nssutil3\n$(call gb_LinkTarget__use_nss3,$(1))\n\nendef\n\ndefine gb_LinkTarget__use_plc4\n$(call gb_LinkTarget__use_nss3,$(1))\n\nendef\n\ndefine gb_LinkTarget__use_ssl3\n$(call gb_LinkTarget__use_nss3,$(1))\n\nendef\n\nelse # !SYSTEM_NSS\n\n$(eval $(call gb_Helper_register_packages_for_install,ooo, \\\n\tnss \\\n))\n\ndefine gb_LinkTarget__use_nss3\n$(call gb_LinkTarget_use_package,$(1),nss)\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t-I$(gb_UnpackedTarball_workdir)/nss/dist/public/nss \\\n\t-I$(gb_UnpackedTarball_workdir)/nss/dist/out/include \\\n)\n\nifeq ($(COM),MSC)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/nss/dist/out/lib/nspr4.lib \\\n\t$(gb_UnpackedTarball_workdir)/nss/dist/out/lib/nss3.lib \\\n\t$(gb_UnpackedTarball_workdir)/nss/dist/out/lib/smime3.lib \\\n)\nelse\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-L$(gb_UnpackedTarball_workdir)/nss/dist/out/lib \\\n\t-lnspr4 \\\n\t-lnss3 \\\n\t-lsmime3 \\\n)\nendif\n\nendef\n\ndefine gb_LinkTarget__use_plc4\n$(call gb_LinkTarget_use_package,$(1),nss)\nifeq ($(COM),MSC)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/nss/dist/out/lib/plc4.lib \\\n)\nelse\n$(call gb_LinkTarget_add_libs,$(1),\\\n    -L$(gb_UnpackedTarball_workdir)/nss/dist/out/lib -lplc4 \\\n)\nendif\n\nendef\n\ndefine gb_LinkTarget__use_ssl3\n$(call gb_LinkTarget_use_package,$(1),nss)\nifeq ($(COM),MSC)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/nss/dist/out/lib/ssl3.lib \\\n)\nelse\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-L$(gb_UnpackedTarball_workdir)/nss/dist/out/lib -lssl3 \\\n)\nendif\n\nendef\n\ndefine gb_LinkTarget__use_nssutil3\n$(call gb_LinkTarget_use_package,$(1),nss)\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t-I$(gb_UnpackedTarball_workdir)/nss/dist/public/nss \\\n\t-I$(gb_UnpackedTarball_workdir)/nss/dist/out/include \\\n)\n\nifeq ($(COM),MSC)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/nss/dist/out/lib/nssutil3.lib \\\n)\nelse\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-L$(gb_UnpackedTarball_workdir)/nss/dist/out/lib \\\n\t-lnssutil3 \\\n)\nendif\n\nendef\n\ndefine gb_ExternalProject__use_nss3\n$(call gb_ExternalProject_use_package,$(1),nss)\n\nendef\n\nendif # SYSTEM_NSS\n\nifeq ($(ENABLE_BREAKPAD),TRUE)\n\ndefine gb_LinkTarget__use_breakpad\n$(call gb_LinkTarget_set_include,$(1),\\\n    -I$(gb_UnpackedTarball_workdir)/breakpad/src \\\n    $$(INCLUDE) \\\n)\n\nifeq ($(COM),MSC)\n$(call gb_LinkTarget_use_static_libraries,$(1),\\\n    breakpad \\\n)\nelse\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/breakpad/src/client/linux/libbreakpad_client.a \\\n)\nendif\n\n$(call gb_LinkTarget_use_external_project,$(1),breakpad)\n\nendef\n\nendif # ENABLE_BREAKPAD\n\nifeq ($(ENABLE_GPGMEPP),TRUE)\n\nifneq ($(SYSTEM_GPGMEPP),)\n\ngb_ExternalProject__use_gpgmepp:=\ngb_ExternalProject__use_libassuan:=\ngb_ExternalProject__use_libgpg-error:=\n\ndefine gb_LinkTarget__use_gpgmepp\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$$(GPGMEPP_CFLAGS) \\\n)\n\n$(call gb_LinkTarget_add_libs,$(1),\\\n    $(GPGMEPP_LIBS) \\\n)\n\nendef\n\nelse ifneq ($(filter GPGMEPP,$(BUILD_TYPE)),) # NON-SYSTEM_GPGME\n\ndefine gb_ExternalProject__use_gpgmepp\n$(call gb_ExternalProject_use_external_project,$(1),gpgmepp)\n\nendef\ndefine gb_ExternalProject__use_libassuan\n$(call gb_ExternalProject_use_external_project,$(1),libassuan)\n\nendef\ndefine gb_ExternalProject__use_libgpg-error\n$(call gb_ExternalProject_use_external_project,$(1),libgpg-error)\n\nendef\n\nifneq ($(filter WNT,$(OS)),)\n\ndefine gb_LinkTarget__use_libgpg-error\n$(call gb_LinkTarget_use_package,$(1),libgpg-error)\n\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$(GPG_ERROR_CFLAGS) \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),\\\n       -LIBPATH:$(gb_UnpackedTarball_workdir)/libgpg-error/src/.libs libgpg-error.lib \\\n)\n\nendef\n\ndefine gb_LinkTarget__use_libassuan\n$(call gb_LinkTarget_use_package,$(1),libassuan)\n\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$(LIBASSUAN_CFLAGS) \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),\\\n       -LIBPATH:$(gb_UnpackedTarball_workdir)/libassuan/src/.libs libassuan.lib \\\n)\n\nendef\n\ndefine gb_LinkTarget__use_gpgmepp\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/gpgmepp/lang/cpp/src \\\n\t-I$(gb_UnpackedTarball_workdir)/gpgmepp/src \\\n\t$$(GPG_ERROR_CFLAGS) \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_use_libraries,$(1),\\\n\tgpgmepp \\\n)\n\nendef\n\n$(eval $(call gb_Helper_register_packages_for_install,ooo,\\\n\tgpgmepp \\\n\tlibassuan \\\n\tlibgpg-error \\\n))\n\n$(eval $(call gb_Helper_register_libraries_for_install,PLAINLIBS_OOO,ooo,\\\n\tgpgmepp \\\n))\n\nendif\n\nifneq ($(filter MACOSX LINUX,$(OS)),)\n\ndefine gb_LinkTarget__use_gpgmepp\n$(call gb_LinkTarget_use_package,$(1),gpgmepp)\n\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/gpgmepp/lang/cpp/src \\\n\t-I$(gb_UnpackedTarball_workdir)/gpgmepp/src \\\n\t$$(GPG_ERROR_CFLAGS) \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-L$(gb_UnpackedTarball_workdir)/gpgmepp/lang/cpp/src/.libs/ -lgpgmepp \\\n\t$(if $(filter TRUE,$(DISABLE_DYNLOADING)),-L$(gb_UnpackedTarball_workdir)/gpgmepp/src/.libs/ -lgpgme) \\\n\t$(if $(filter TRUE,$(DISABLE_DYNLOADING)),$$(GPG_ERROR_LIBS)) \\\n\t$(if $(filter TRUE,$(DISABLE_DYNLOADING)),$$(LIBASSUAN_LIBS)) \\\n)\n\nendef\n\n$(eval $(call gb_Helper_register_packages_for_install,ooo,\\\n\tgpgmepp \\\n\tlibassuan \\\n\tlibgpg-error \\\n))\n\nendif\n\nendif\n\nelse # !ENABLE_GPGMEPP\n\ngb_ExternalProject__use_gpgmepp :=\ngb_ExternalProject__use_libassuan :=\ngb_ExternalProject__use_libgpg-error :=\n\ngb_LinkTarget__use_gpgmepp :=\ngb_LinkTarget__use_libassuan :=\ngb_LinkTarget__use_libgpg-error :=\n\nendif # ENABLE_GPGMEPP\n\ndefine gb_LinkTarget__use_dconf\n$(call gb_LinkTarget_set_include,$(1),\\\n\t\t$$(INCLUDE) \\\n\t\t$(DCONF_CFLAGS) \\\n)\n\n$(call gb_LinkTarget_add_libs,$(1),$(DCONF_LIBS))\nendef\n\n### Jars ############################################################\n\nifneq ($(SYSTEM_HSQLDB),)\n\ndefine gb_Jar__use_hsqldb\n$(call gb_Jar_use_system_jar,$(1),$(HSQLDB_JAR))\nendef\ndefine gb_JunitTest__use_hsqldb\n$(call gb_JunitTest_use_system_jar,$(1),$(HSQLDB_JAR))\nendef\n\nelse # !SYSTEM_HSQLDB\n\nifeq ($(ENABLE_JAVA),TRUE)\n$(eval $(call gb_Helper_register_jars_for_install,OOO,ooo, \\\n\thsqldb \\\n))\nendif\n\ndefine gb_Jar__use_hsqldb\n$(call gb_Jar_use_jar,$(1),hsqldb)\nendef\ndefine gb_JunitTest__use_hsqldb\n$(call gb_JunitTest_use_jar,$(1),hsqldb)\nendef\n\nendif # SYSTEM_HSQLDB\n\n\nifeq ($(ENABLE_SCRIPTING_BEANSHELL),TRUE)\n\nifneq ($(SYSTEM_BSH),)\n\ndefine gb_Jar__use_bsh\n$(call gb_Jar_use_system_jar,$(1),$(BSH_JAR))\nendef\n\nelse # !SYSTEM_BSH\n\nifeq ($(ENABLE_JAVA),TRUE)\n$(eval $(call gb_Helper_register_jars_for_install,OOO,extensions_bsh, \\\n\tbsh \\\n))\nendif\n\ndefine gb_Jar__use_bsh\n$(call gb_Jar_use_jar,$(1),bsh)\nendef\n\nendif # SYSTEM_BSH\n\nendif\n\nifeq ($(ENABLE_SCRIPTING_JAVASCRIPT),TRUE)\n\nifneq ($(SYSTEM_RHINO),)\n\ndefine gb_Jar__use_rhino\n$(call gb_Jar_use_system_jar,$(1),$(RHINO_JAR))\nendef\n\nelse # !SYSTEM_RHINO\n\nifeq ($(ENABLE_JAVA),TRUE)\n$(eval $(call gb_Helper_register_jars_for_install,OOO,extensions_rhino, \\\n\tjs \\\n))\nendif\n\ndefine gb_Jar__use_rhino\n$(call gb_Jar_use_jar,$(1),js)\nendef\n\nendif # SYSTEM_RHINO\n\nendif\n\nifneq ($(SYSTEM_JFREEREPORT),)\n\ndefine gb_Jar__use_flow-engine\n$(call gb_Jar_use_system_jar,$(1),$(JFREEREPORT_JAR))\nendef\n\ndefine gb_Jar__use_flute\n$(call gb_Jar_use_system_jar,$(1),$(FLUTE_JAR))\nendef\n\ndefine gb_Jar__use_libbase\n$(call gb_Jar_use_system_jar,$(1),$(LIBBASE_JAR))\nendef\n\ndefine gb_Jar__use_libfonts\n$(call gb_Jar_use_system_jar,$(1),$(LIBFONTS_JAR))\nendef\n\ndefine gb_Jar__use_libformula\n$(call gb_Jar_use_system_jar,$(1),$(LIBFORMULA_JAR))\nendef\n\ndefine gb_Jar__use_liblayout\n$(call gb_Jar_use_system_jar,$(1),$(LIBLAYOUT_JAR))\nendef\n\ndefine gb_Jar__use_libloader\n$(call gb_Jar_use_system_jar,$(1),$(LIBLOADER_JAR))\nendef\n\ndefine gb_Jar__use_librepository\n$(call gb_Jar_use_system_jar,$(1),$(LIBREPOSITORY_JAR))\nendef\n\ndefine gb_Jar__use_libserializer\n$(call gb_Jar_use_system_jar,$(1),$(LIBSERIALIZER_JAR))\nendef\n\ndefine gb_Jar__use_libxml\n$(call gb_Jar_use_system_jar,$(1),$(LIBXML_JAR))\nendef\n\ndefine gb_Jar__use_sac\n$(call gb_Jar_use_system_jar,$(1),$(SAC_JAR))\nendef\n\nelse # !SYSTEM_JFREEREPORT\n\nifeq ($(ENABLE_JAVA),TRUE)\n$(eval $(call gb_Helper_register_jars_for_install,OOO,reportbuilder,\\\n\tflow-engine \\\n\tflute-1.1.6 \\\n\tlibbase-1.1.6 \\\n\tlibfonts-1.1.6 \\\n\tlibformula-1.1.7 \\\n\tliblayout \\\n\tlibloader-1.1.6 \\\n\tlibrepository-1.1.6 \\\n\tlibserializer-1.1.6 \\\n\tlibxml-1.1.7 \\\n\tsac \\\n))\nendif\n\ndefine gb_Jar__use_flow-engine\n$(call gb_Jar_use_jar,$(1),flow-engine)\nendef\n\ndefine gb_Jar__use_flute\n$(call gb_Jar_use_jar,$(1),flute-1.1.6)\nendef\n\ndefine gb_Jar__use_libbase\n$(call gb_Jar_use_jar,$(1),libbase-1.1.6)\nendef\n\ndefine gb_Jar__use_libfonts\n$(call gb_Jar_use_jar,$(1),libfonts-1.1.6)\nendef\n\ndefine gb_Jar__use_libformula\n$(call gb_Jar_use_jar,$(1),libformula-1.1.7)\nendef\n\ndefine gb_Jar__use_liblayout\n$(call gb_Jar_use_jar,$(1),liblayout)\nendef\n\ndefine gb_Jar__use_libloader\n$(call gb_Jar_use_jar,$(1),libloader-1.1.6)\nendef\n\ndefine gb_Jar__use_librepository\n$(call gb_Jar_use_jar,$(1),librepository-1.1.6)\nendef\n\ndefine gb_Jar__use_libserializer\n$(call gb_Jar_use_jar,$(1),libserializer-1.1.6)\nendef\n\ndefine gb_Jar__use_libxml\n$(call gb_Jar_use_jar,$(1),libxml-1.1.7)\nendef\n\ndefine gb_Jar__use_sac\n$(call gb_Jar_use_jar,$(1),sac)\nendef\n\nendif # SYSTEM_JFREEREPORT\n\n# As a guide, Java-Websocket was packaged for Fedora 35\n# https://src.fedoraproject.org/rpms/Java-WebSocket/tree/f35\nifneq ($(SYSTEM_JAVA_WEBSOCKET),)\n\ndefine gb_Jar__use_java_websocket\n$(call gb_Jar_use_system_jar,$(1),$(JAVA_WEBSOCKET_JAR))\nendef\n\nelse # !SYSTEM_JAVA_WEBSOCKET\n\nifeq ($(ENABLE_JAVA),TRUE)\n$(eval $(call gb_Helper_register_jars_for_install,URE,ure, \\\n\tjava_websocket \\\n))\nendif\n\ndefine gb_Jar__use_java_websocket\n$(call gb_Jar_use_jar,$(1),java_websocket)\nendef\n\nendif # SYSTEM_JAVA_WEBSOCKET\n\n# Executables\n\ndefine gb_Executable__register_bestreversemap\n$(call gb_Executable_add_runtime_dependencies,bestreversemap,\\\n    $(call gb_CondLibSalTextenc,$(call gb_Library_get_target_for_build,sal_textenc)) \\\n)\nendef\n\n# TODO depending on the whole URE might be overkill, but I do not have a\n# Windows machine to debug it...\ndefine gb_Executable__register_climaker\n$(call gb_Executable_add_runtime_dependencies,climaker,\\\n\t$(call gb_Library_get_target_for_build,$(CPPU_ENV_FOR_BUILD)_uno) \\\n\t$(INSTROOT_FOR_BUILD)/$(LIBO_URE_MISC_FOLDER)/services.rdb \\\n\t$(call gb_UnoApi_get_target_for_build,udkapi) \\\n\t$(INSTROOT_FOR_BUILD)/$(LIBO_URE_ETC_FOLDER)/$(call gb_Helper_get_rcfile,uno)\n)\nendef\n\ndefine gb_Executable__register_cppumaker\n$(call gb_Executable_add_runtime_dependencies,cppumaker,\\\n    $(call gb_CondLibSalTextenc,$(call gb_Library_get_target,sal_textenc)) \\\n)\nendef\n\n# This is used to determine what we need for 'build' platform.\ndefine gb_Executable__register_gengal\n$(call gb_Executable_add_runtime_dependencies,gengal,\\\n\t$(call gb_Library_get_target_for_build,$(CPPU_ENV_FOR_BUILD)_uno) \\\n\t$(call gb_Library_get_target_for_build,localedata_en) \\\n\t$(if $(filter MACOSX,$(OS_FOR_BUILD)),$(call gb_Library_get_target_for_build,vclplug_osx)) \\\n\t$(if $(filter WNT,$(OS_FOR_BUILD)),$(call gb_Library_get_target_for_build,vclplug_win)) \\\n\t$(if $(filter host,$(gb_Side)),$(call gb_Package_get_target,postprocess_images)) \\\n\t$(call gb_Package_get_target_for_build,postprocess_registry) \\\n\t$(INSTROOT_FOR_BUILD)/$(LIBO_URE_ETC_FOLDER)/$(call gb_Helper_get_rcfile,uno) \\\n\t$(INSTROOT_FOR_BUILD)/$(LIBO_ETC_FOLDER)/$(call gb_Helper_get_rcfile,fundamental) \\\n\t$(INSTROOT_FOR_BUILD)/$(LIBO_ETC_FOLDER)/$(call gb_Helper_get_rcfile,louno) \\\n\t$(INSTROOT_FOR_BUILD)/$(LIBO_URE_MISC_FOLDER)/services.rdb \\\n\t$(INSTROOT_FOR_BUILD)/$(LIBO_ETC_FOLDER)/services/services.rdb \\\n\t$(call gb_UnoApi_get_target_for_build,offapi) \\\n\t$(call gb_UnoApi_get_target_for_build,udkapi) \\\n)\nendef\n\nifeq ($(SYSTEM_ICU),)\n\ndefine gb_Executable__register_gendict\n$(call gb_Executable_add_runtime_dependencies,gendict,\\\n\t$(call gb_Package_get_target_for_build,icu) \\\n\t$(call gb_Package_get_target_for_build,icu_ure) \\\n)\nendef\n\nendif\n\ndefine gb_Executable__register_localize\n$(call gb_Executable_add_runtime_dependencies,localize,\\\n\t$(foreach exec,cfgex helpex propex treex ulfex xrmex,\\\n\t\t$(call gb_Executable_get_runtime_dependencies,$(exec)) \\\n\t) \\\n)\nendef\n\n# FIXME ure/services.rdb needs cleanup\n# The dependencies on ure/services.rdb and udkapi.rdb are implicitly required\n# due to the settings for URE_SERVICES and URE_TYPES in cppuhelper/source/unorc:\ndefine gb_Executable__register_saxparser\n$(call gb_Executable_add_runtime_dependencies,saxparser,\\\n\t$(call gb_Library_get_target_for_build,$(CPPU_ENV_FOR_BUILD)_uno) \\\n\t$(call gb_Package_get_target_for_build,instsetoo_native_setup_ure) \\\n\t$(call gb_Rdb_get_target_for_build,saxparser) \\\n\t$(INSTROOT_FOR_BUILD)/$(LIBO_URE_MISC_FOLDER_FOR_BUILD)/services.rdb \\\n\t$(call gb_UnoApi_get_target_for_build,udkapi) \\\n)\nendef\n\n# NOTE: the dependencies on ure/services.rdb and udkapi.rdb are implicitly\n# required due to the settings for URE_SERVICES and URE_TYPES in\n# cppuhelper/source/unorc\ndefine gb_Executable__register_uno\n$(call gb_Executable_add_runtime_dependencies,uno,\\\n\t$(call gb_Library_get_target_for_build,$(CPPU_ENV_FOR_BUILD)_uno) \\\n\t$(INSTROOT_FOR_BUILD)/$(LIBO_URE_MISC_FOLDER)/services.rdb \\\n\t$(call gb_UnoApi_get_target_for_build,udkapi) \\\n)\nendef\n\n\n# External executables\n\nifneq ($(SYSTEM_LIBXML_FOR_BUILD),)\n\ngb_ExternalExecutable__register_xmllint :=\n\nelse # ! SYSTEM_LIBXML_FOR_BUILD\n\ndefine gb_ExternalExecutable__register_xmllint\n$(call gb_ExternalExecutable_set_internal,xmllint,$(WORKDIR_FOR_BUILD)/UnpackedTarball/libxml2/$(if $(filter MSC,$(COM)),win32/bin.msvc)/xmllint$(gb_Executable_EXT_for_build),libxml2)\n$(call gb_ExternalExecutable_add_dependencies,xmllint,\\\n\t$(if $(filter WNT,$(OS)),$(call gb_Package_get_target,icu_ure)) \\\n\t$(call gb_Package_get_target,libxml2) \\\n)\n\nendef\n\nendif # SYSTEM_LIBXML_FOR_BUILD\n\nifneq ($(SYSTEM_LIBXSLT_FOR_BUILD),)\n\ngb_ExternalExecutable__register_xsltproc :=\n\nelse # ! SYSTEM_LIBXSLT_FOR_BUILD\n\ndefine gb_ExternalExecutable__register_xsltproc\n$(call gb_ExternalExecutable_set_internal,xsltproc,$(WORKDIR_FOR_BUILD)/UnpackedTarball/libxslt/$(if $(filter MSC,$(COM)),win32/bin.msvc,xsltproc)/xsltproc$(gb_Executable_EXT_for_build),libxslt)\n$(call gb_ExternalExecutable_add_dependencies,xsltproc,\\\n\t$(if $(filter WNT,$(OS)),$(call gb_Package_get_target,icu_ure)) \\\n\t$(call gb_Package_get_target,libxml2) \\\n\t$(call gb_Package_get_target,libxslt) \\\n)\n\nendef\n\nendif # SYSTEM_LIBXSLT_FOR_BUILD\n\nifeq (,$(PYTHON_FOR_BUILD))\n\ndefine gb_ExternalExecutable__register_python\nifeq ($(OS),MACOSX)\n\n# use set_external, to avoid having the command added as prerequisite for the\n# targets that make use of it. (Otherwise make will choke as it doesn't have a\n# matching rule to build that specific file)\n$(call gb_ExternalExecutable_set_external,python,$(gb_UnpackedTarball_workdir)/python3/python-inst/@__________________________________________________OOO/LibreOfficePython.framework/Versions/$(PYTHON_VERSION_MAJOR).$(PYTHON_VERSION_MINOR)/bin/python$(PYTHON_VERSION_MAJOR).$(PYTHON_VERSION_MINOR))\n# the Zip ensures that internal python has been built (cannot use the Package\n# target, as that is not used on Mac)\n$(call gb_ExternalExecutable_add_dependencies,python,$(call gb_GeneratedPackage_get_target_for_build,python3))\n\nelse\n\n$(call gb_ExternalExecutable_set_internal,python,$(INSTROOT_FOR_BUILD)/$(LIBO_BIN_FOLDER)/$(if $(filter WNT,$(OS)),python-core-$(PYTHON_VERSION)/bin/python.exe,python.bin))\n$(call gb_ExternalExecutable_set_precommand,python,$(subst $$,$$$$,$(gb_Python_PRECOMMAND)))\n$(call gb_ExternalExecutable_add_dependencies,python,$(call gb_Package_get_target_for_build,python3))\n\nendif\n\nendef\n\nelse\n\ndefine gb_ExternalExecutable__register_python\n$(call gb_ExternalExecutable_set_external,python,$(PYTHON_FOR_BUILD))\n\nendef\n\nendif # PYTHON_FOR_BUILD\n\nifneq ($(SYSTEM_GENBRK),)\n\ndefine gb_ExternalExecutable__register_genbrk\n$(call gb_ExternalExecutable_set_external,genbrk,$(SYSTEM_GENBRK))\n\nendef\n\nelse # ! SYSTEM_GENBRK\n\ndefine gb_ExternalExecutable__register_genbrk\n$(call gb_ExternalExecutable_set_internal,genbrk,$(WORKDIR_FOR_BUILD)/UnpackedTarball/icu/source/bin/genbrk$(gb_Executable_EXT_for_build),icu)\n$(call gb_ExternalExecutable_set_precommand,genbrk,$(subst $$,$$$$,$(gb_ICU_PRECOMMAND)))\n$(call gb_ExternalExecutable_add_dependencies,genbrk,\\\n\t$(call gb_Package_get_target_for_build,icu) \\\n\t$(call gb_Package_get_target_for_build,icu_ure) \\\n)\n\nendef\n\nendif\n\nifneq ($(SYSTEM_GENCCODE),)\n\ndefine gb_ExternalExecutable__register_genccode\n$(call gb_ExternalExecutable_set_external,genccode,$(SYSTEM_GENCCODE))\n\nendef\n\nelse # ! SYSTEM_GENCCODE\n\ndefine gb_ExternalExecutable__register_genccode\n$(call gb_ExternalExecutable_set_internal,genccode,$(WORKDIR_FOR_BUILD)/UnpackedTarball/icu/source/bin/genccode$(gb_Executable_EXT_for_build),icu)\n$(call gb_ExternalExecutable_set_precommand,genccode,$(subst $$,$$$$,$(gb_ICU_PRECOMMAND)))\n$(call gb_ExternalExecutable_add_dependencies,genccode,\\\n\t$(call gb_Package_get_target_for_build,icu) \\\n\t$(call gb_Package_get_target_for_build,icu_ure) \\\n)\n\nendef\n\nendif\n\nifneq ($(SYSTEM_GENCMN),)\n\ndefine gb_ExternalExecutable__register_gencmn\n$(call gb_ExternalExecutable_set_external,gencmn,$(SYSTEM_GENCMN))\n\nendef\n\nelse # ! SYSTEM_GENCMN\n\ndefine gb_ExternalExecutable__register_gencmn\n$(call gb_ExternalExecutable_set_internal,gencmn,$(WORKDIR_FOR_BUILD)/UnpackedTarball/icu/source/bin/gencmn$(gb_Executable_EXT_for_build),icu)\n$(call gb_ExternalExecutable_set_precommand,gencmn,$(subst $$,$$$$,$(gb_ICU_PRECOMMAND)))\n$(call gb_ExternalExecutable_add_dependencies,gencmn,\\\n\t$(call gb_Package_get_target_for_build,icu) \\\n\t$(call gb_Package_get_target_for_build,icu_ure) \\\n)\n\nendef\n\nendif\n\nifneq ($(SYSTEM_BZIP2),)\n\ndefine gb_LinkTarget__use_bzip2\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$(BZIP2_CFLAGS) \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(BZIP2_LIBS))\n\nendef\n\ngb_ExternalProject__use_bzip2 :=\n\nelse # !SYSTEM_BZIP2\n\ndefine gb_LinkTarget__use_bzip2\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/bzip2 \\\n\t$$(INCLUDE) \\\n)\n\nifeq ($(COM),MSC)\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t$(gb_UnpackedTarball_workdir)/bzip2/libbz2.lib \\\n)\nelse\n$(call gb_LinkTarget_add_libs,$(1),\\\n\t-L$(gb_UnpackedTarball_workdir)/bzip2 -lbz2 \\\n)\nendif\n\n$(call gb_LinkTarget_use_external_project,$(1),bzip2)\nendef\n\ndefine gb_ExternalProject__use_bzip2\n$(call gb_ExternalProject_use_external_project,$(1),bzip2)\nendef\n\nendif # SYSTEM_BZIP2\n\ndefine gb_LinkTarget__use_clew\n$(call gb_LinkTarget_set_include,$(1), \\\n    -I$(SRCDIR)/external/clew/source/include \\\n    $$(INCLUDE) \\\n)\n$(call gb_LinkTarget_use_libraries,$(1),clew)\nendef\n\nifneq ($(ENABLE_PDFIUM),)\ndefine gb_LinkTarget__use_pdfium\n$(call gb_LinkTarget_set_include,$(1),\\\n       -I$(gb_UnpackedTarball_workdir)/pdfium/public \\\n       -DCOMPONENT_BUILD \\\n       $$(INCLUDE) \\\n)\n$(call gb_LinkTarget_use_libraries,$(1),pdfium)\nendef\n$(eval $(call gb_Helper_register_libraries_for_install,OOOLIBS,ooo,\\\n       pdfium \\\n))\nendif\n\nifneq ($(SYSTEM_DRAGONBOX),)\n\ndefine gb_LinkTarget__use_dragonbox\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$$(DRAGONBOX_CFLAGS) \\\n)\nendef\n\nelse\n\ndefine gb_LinkTarget__use_dragonbox\n$(call gb_LinkTarget_use_unpacked,$(1),dragonbox)\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/dragonbox/include/\\\n\t$$(INCLUDE) \\\n)\nendef\n\nendif\n\ndefine gb_LinkTarget__use_dtoa\n$(call gb_LinkTarget_use_unpacked,$(1),dtoa)\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/dtoa/include/\\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_use_static_libraries,$(1),\\\n\tdtoa \\\n)\n\nendef\n\ndefine gb_ExternalProject__use_dtoa\n$(call gb_ExternalProject_use_static_libraries,$(1),dtoa)\n\nendef\n\nifneq ($(SYSTEM_BOX2D),)\n\ndefine gb_LinkTarget__use_box2d\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-DSYSTEM_BOX2D \\\n\t$$(INCLUDE) \\\n\t$(BOX2D_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(BOX2D_LIBS))\n\nendef\n\ngb_ExternalProject__use_box2d :=\n\nelse # !SYSTEM_BOX2D\n\ndefine gb_LinkTarget__use_box2d\n$(call gb_LinkTarget_use_unpacked,$(1),box2d)\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/box2d/include/\\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_use_static_libraries,$(1),\\\n\tbox2d \\\n)\n\nendef\n\ndefine gb_ExternalProject__use_box2d\n$(call gb_ExternalProject_use_static_libraries,$(1),box2d)\n\nendef\n\nendif # SYSTEM_BOX2D\n\nifneq ($(SYSTEM_ZXCVBN),)\ndefine gb_LinkTarget__use_zxcvbn-c\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-DSYSTEM_ZXCVBN \\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),-lzxcvbn)\nendef\n\nelse\n\ndefine gb_LinkTarget__use_zxcvbn-c\n$(call gb_LinkTarget_use_unpacked,$(1),zxcvbn-c)\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/zxcvbn-c\\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_use_static_libraries,$(1),\\\n\tzxcvbn-c \\\n)\nendef\nendif\n\n\nifneq ($(SYSTEM_ZXING),)\n\ndefine gb_LinkTarget__use_zxing\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-DSYSTEM_ZXING \\\n\t$$(INCLUDE) \\\n\t$(ZXING_CFLAGS) \\\n)\n$(call gb_LinkTarget_add_libs,$(1),$(ZXING_LIBS))\n\nendef\n\ngb_ExternalProject__use_zxing :=\n\nelse # !SYSTEM_ZXING\n\nifneq ($(ENABLE_ZXING),)\n\ndefine gb_LinkTarget__use_zxing\n$(call gb_LinkTarget_use_unpacked,$(1),zxing)\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/zxing/core/src/\\\n\t$$(INCLUDE) \\\n)\n$(call gb_LinkTarget_use_static_libraries,$(1),\\\n\tzxing \\\n)\n\nendef\n\ndefine gb_ExternalProject__use_zxing\n$(call gb_ExternalProject_use_static_libraries,$(1),zxing)\n\nendef\n\nelse # !ENABLE_ZXING\n\ndefine gb_LinkTarget__use_zxing\nendef\n\nendif # ENABLE_ZXING\n\nendif # SYSTEM_ZXING\n\n\nifneq ($(SYSTEM_FROZEN),)\ndefine gb_LinkTarget__use_frozen\n$(call gb_LinkTarget_set_include,$(1),\\\n\t$$(INCLUDE) \\\n\t$(FROZEN_CFLAGS)\n)\nendef\nelse\ndefine gb_LinkTarget__use_frozen\n$(call gb_LinkTarget_use_unpacked,$(1),frozen)\n$(call gb_LinkTarget_set_include,$(1),\\\n\t-I$(gb_UnpackedTarball_workdir)/frozen/include/\\\n\t$$(INCLUDE) \\\n)\nendef\nendif\n\n# vim: set noet sw=4 ts=4:\n"
        },
        {
          "name": "RepositoryFixes.mk",
          "type": "blob",
          "size": 4.953125,
          "content": "# -*- Mode: makefile-gmake; tab-width: 4; indent-tabs-mode: t -*-\n#\n# This file is part of the LibreOffice project.\n#\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n#\n# This file incorporates work covered by the following license notice:\n#\n#   Licensed to the Apache Software Foundation (ASF) under one or more\n#   contributor license agreements. See the NOTICE file distributed\n#   with this work for additional information regarding copyright\n#   ownership. The ASF licenses this file to you under the Apache\n#   License, Version 2.0 (the \"License\"); you may not use this file\n#   except in compliance with the License. You may obtain a copy of\n#   the License at http://www.apache.org/licenses/LICENSE-2.0 .\n#\n\n# fixes for executables\n\ngb_Executable_FILENAMES := $(foreach group,$(gb_Executable_VALIDGROUPS),\\\n\t$(foreach exe,$(gb_Executable_$(group)),$(exe):$(exe)$(gb_Executable_EXT)))\n\nifneq (,$(filter-out MACOSX WNT,$(OS)))\ngb_Executable_FILENAMES := $(patsubst uno:uno,uno:uno.bin,$(gb_Executable_FILENAMES))\nendif\ngb_Executable_FILENAMES := $(patsubst unopkg_bin:unopkg_bin%,unopkg_bin:unopkg$(if $(filter-out MACOSX,$(OS)),.bin),$(gb_Executable_FILENAMES))\ngb_Executable_FILENAMES := $(patsubst unopkg_com:unopkg_com%,unopkg_com:unopkg.com,$(gb_Executable_FILENAMES))\nifneq ($(OS),MACOSX)\ngb_Executable_FILENAMES := $(patsubst gengal:gengal,gengal:gengal.bin,$(gb_Executable_FILENAMES))\nendif\n\nifeq ($(OS),MACOSX)\ngb_Executable_FILENAMES := $(patsubst soffice_bin:soffice_bin,soffice_bin:soffice,$(gb_Executable_FILENAMES))\nelse\nifeq ($(OS),EMSCRIPTEN)\ngb_Executable_FILENAMES := $(patsubst soffice_bin:soffice_bin%,soffice_bin:soffice.js,$(gb_Executable_FILENAMES))\nelse\ngb_Executable_FILENAMES := $(patsubst soffice_bin:soffice_bin%,soffice_bin:soffice.bin,$(gb_Executable_FILENAMES))\nendif\nendif\n\ngb_Executable_FILENAMES := $(patsubst soffice_exe:soffice_exe%,soffice_exe:soffice.exe,$(gb_Executable_FILENAMES))\ngb_Executable_FILENAMES := $(patsubst soffice_com:soffice_com%,soffice_com:soffice.com,$(gb_Executable_FILENAMES))\n\n# fixes for .jnilibs on macOS that are not also needed as .dylibs:\nifeq ($(OS),MACOSX)\ngb_Library_FILENAMES := \\\n    $(subst jpipe:libjpipe.dylib,jpipe:libjpipe.jnilib,$(gb_Library_FILENAMES))\ngb_Library_FILENAMES := \\\n    $(subst juh:libjuh.dylib,juh:libjuh.jnilib,$(gb_Library_FILENAMES))\ngb_Library_FILENAMES := \\\n    $(subst hsqldb:libhsqldb.dylib,hsqldb:libhsqldb.jnilib,$(gb_Library_FILENAMES))\nendif\n\n# fixes for all the libraries that are named with too much creativity and do\n# not follow any of the established nameschemes\n\n# Make has no support for 'or' clauses in conditionals,\n# we use a filter expression instead.\nifneq (,$(filter SOLARIS GCC,$(OS) $(COM)))\ngb_Library_FILENAMES := $(patsubst cppuhelper:libcppuhelper%,cppuhelper:libuno_cppuhelper%,$(gb_Library_FILENAMES))\ngb_Library_FILENAMES := $(patsubst purpenvhelper:libpurpen%,purpenvhelper:libuno_purpen%,$(gb_Library_FILENAMES))\ngb_Library_FILENAMES := $(patsubst salhelper:libsalhelper%,salhelper:libuno_salhelper%,$(gb_Library_FILENAMES))\n\nifeq ($(OS),MACOSX)\n# libpyuno_wrapper.dylib => pyuno.so\ngb_Library_FILENAMES := $(patsubst pyuno_wrapper:libpyuno_wrapper.dylib,pyuno_wrapper:pyuno.so,$(gb_Library_FILENAMES))\nelse\n# libpyuno_wrapper.so => pyuno.so\ngb_Library_FILENAMES := $(patsubst pyuno_wrapper:libpyuno_wrapper.so,pyuno_wrapper:pyuno.so,$(gb_Library_FILENAMES))\nendif\n\nifneq ($(OS),ANDROID)\ngb_Library_FILENAMES := $(patsubst unobootstrapprotector:libuno%,unobootstrapprotector:uno%,$(gb_Library_FILENAMES))\ngb_Library_FILENAMES := $(patsubst unoexceptionprotector:libuno%,unoexceptionprotector:uno%,$(gb_Library_FILENAMES))\nendif\nendif\n\nifeq ($(OS),WNT)\ngb_Library_FILENAMES := $(patsubst z:z%,z:zlib%,$(gb_Library_FILENAMES))\ngb_Library_FILENAMES := $(patsubst rdf:rdf%,rdf:librdf%,$(gb_Library_FILENAMES))\n\n# libpyuno_wrapper.dll => pyuno.pyd\ngb_Library_FILENAMES := $(patsubst pyuno:pyuno.dll,pyuno:pyuno$(if $(MSVC_USE_DEBUG_RUNTIME),_d).pyd,$(gb_Library_FILENAMES))\n\ngb_Library_ILIBFILENAMES := $(patsubst z:z%,z:zlib%,$(gb_Library_ILIBFILENAMES))\n\n# these have prefix \"lib\" instead of \"i\"\ngb_Library_LIBLIBFILENAMES := \\\n\trdf \\\n\ngb_Library_ILIBFILENAMES := \\\n\t$(filter-out $(foreach lib,$(gb_Library_LIBLIBFILENAMES),$(lib):%) \\\n\t\t,$(gb_Library_ILIBFILENAMES))\ngb_Library_ILIBFILENAMES += \\\n\t$(foreach lib,$(gb_Library_LIBLIBFILENAMES),$(lib):lib$(lib)$(gb_Library_PLAINEXT))\n\ngb_Library_FILENAMES := $(filter-out $(foreach lib,$(gb_Library_LIBLIBFILENAMES),$(lib):%),$(gb_Library_FILENAMES))\ngb_Library_FILENAMES += $(foreach lib,$(gb_Library_LIBLIBFILENAMES),$(lib):lib$(lib).dll)\n\nendif # ifeq ($(OS),WNT)\n\ngb_Executable_FILENAMES_FOR_BUILD := $(subst $(gb_Executable_EXT),$(gb_Executable_EXT_for_build),$(gb_Executable_FILENAMES))\ngb_Library_FILENAMES_FOR_BUILD := $(subst $(gb_Library_PLAINEXT),$(gb_Library_PLAINEXT_FOR_BUILD),$(gb_Library_FILENAMES))\n\n# vim: set noet sw=4 ts=4:\n"
        },
        {
          "name": "RepositoryModule_build.mk",
          "type": "blob",
          "size": 1.580078125,
          "content": "# -*- Mode: makefile-gmake; tab-width: 4; indent-tabs-mode: t -*-\n#\n# This file is part of the LibreOffice project.\n#\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n#\n\n$(eval $(call gb_Module_Module,cross_toolset))\n\n$(eval $(call gb_Module_add_moduledirs,cross_toolset,\\\n\tbasegfx \\\n\tbinaryurp \\\n\tbridges \\\n\tcli_ure \\\n\tcodemaker \\\n\tcomphelper \\\n\tcppu \\\n\tcppuhelper \\\n\texternal \\\n\ti18nlangtag \\\n\ti18nutil \\\n\ti18npool \\\n\tinstsetoo_native \\\n\tidl \\\n\tio \\\n\tjavaunohelper \\\n\tjurt \\\n\tjvmaccess \\\n\tjvmfwk \\\n\tl10ntools \\\n\tnet_ure \\\n\to3tl \\\n\toffapi \\\n\tofficecfg \\\n\toovbaapi \\\n\tpch \\\n\tregistry \\\n\tremotebridges \\\n\tridljar \\\n\tsal \\\n\tsalhelper \\\n\tsax \\\n\tsetup_native \\\n\tshell \\\n\tsolenv \\\n\tsoltools \\\n\t$(if $(filter EMSCRIPTEN,$(BUILD_TYPE_FOR_HOST)),static) \\\n\tstoc \\\n\tstore \\\n\ttools \\\n\tucbhelper \\\n\tudkapi \\\n\tunoidl \\\n\tunoil \\\n\tunotest \\\n\tunotools \\\n\ture \\\n\txmlreader \\\n\t$(if $(WITH_GALLERY_BUILD), \\\n\t\tavmedia \\\n\t\tbasic \\\n\t\tcanvas \\\n\t\tconfigmgr \\\n\t\tconnectivity \\\n\t\tcppcanvas \\\n\t\tdocmodel \\\n\t\tdrawinglayer \\\n\t\tediteng \\\n\t\temfio \\\n\t\tfilter \\\n\t\tframework \\\n\t\tlinguistic \\\n\t\tofficecfg \\\n\t\toox \\\n\t\tpackage \\\n\t\tpostprocess \\\n\t\tsfx2 \\\n\t\tshell \\\n\t\tsot \\\n\t\tsvgio \\\n\t\tsvl \\\n\t\tsvtools \\\n\t\tsvx \\\n\t\ttoolkit \\\n\t\tucb \\\n\t\tunoxml \\\n\t\tuui \\\n\t\tvcl \\\n\t\txmloff \\\n\t\txmlscript \\\n\t) \\\n    $(call gb_Helper_optionals_or,HELPTOOLS XMLHELP,helpcompiler) \\\n    $(call gb_Helper_optional,XMLHELP,xmlhelp) \\\n\t$(call gb_Helper_optional,QADEVOOO,qadevOOo) \\\n))\n\n# vim: set shiftwidth=4 tabstop=4 noexpandtab:\n"
        },
        {
          "name": "RepositoryModule_host.mk",
          "type": "blob",
          "size": 5.400390625,
          "content": "# -*- Mode: makefile-gmake; tab-width: 4; indent-tabs-mode: t -*-\n#\n#\n# This file is part of the LibreOffice project.\n#\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n#\n\n\n$(eval $(call gb_Module_Module,libreoffice))\n\n# This makefile needs to be read first because some variables like T_LIBS\n# for libmerged are cleared there and then later we append stuff to it\n# through e.g. gb_Library_use_external for various libraries in libmerged.\nifneq ($(MERGELIBS),)\n$(eval $(call gb_Module_add_targets,libreoffice,\\\n\tLibrary_merged \\\n))\nendif\n\n# WASM_CHART change\nifneq ($(ENABLE_WASM_STRIP_CHART),TRUE)\n$(eval $(call gb_Module_add_moduledirs,libreoffice,\\\n\tchart2 \\\n))\nendif\n\n# WASM_CANVAS change\nifneq ($(ENABLE_WASM_STRIP_CANVAS),TRUE)\n$(eval $(call gb_Module_add_moduledirs,libreoffice,\\\n\tcanvas \\\n\tcppcanvas \\\n))\nendif\n\nifneq ($(ENABLE_WASM_STRIP_DBACCESS),TRUE)\n$(eval $(call gb_Module_add_moduledirs,libreoffice,\\\n\tdbaccess \\\n))\nendif\n\nifneq ($(ENABLE_WASM_STRIP_ACCESSIBILITY),TRUE)\n$(eval $(call gb_Module_add_moduledirs,libreoffice,\\\n\twinaccessibility \\\n))\nendif\n\n$(eval $(call gb_Module_add_moduledirs,libreoffice,\\\n\tandroid \\\n    $(if $(ENABLE_WASM_STRIP_BASIC_DRAW_MATH_IMPRESS),, \\\n\tanimations \\\n    ) \\\n\tapple_remote \\\n\tavmedia \\\n\t$(if $(ENABLE_WASM_STRIP_CALC),, \\\n\tbasctl \\\n\t) \\\n\tbasegfx \\\n\tbasic \\\n\tbean \\\n\tbinaryurp \\\n\tbridges \\\n\tcli_ure \\\n    codemaker \\\n\tcomphelper \\\n\tconfigmgr \\\n\tconnectivity \\\n\tcppu \\\n\tcppuhelper \\\n\tcpputools \\\n\tcui \\\n\tdesktop \\\n\t$(call gb_Helper_optional,DICTIONARIES,dictionaries) \\\n\tdocmodel\\\n\tdrawinglayer \\\n\tediteng \\\n\tembeddedobj \\\n\tembedserv \\\n\teventattacher \\\n\textensions \\\n\texternal \\\n\textras \\\n\tfilter \\\n\t$(call gb_Helper_optional,DBCONNECTIVITY,forms) \\\n\tformula \\\n\t$(call gb_Helper_optional,DESKTOP,fpicker) \\\n\tframework \\\n    $(call gb_Helper_optionals_or,HELPTOOLS XMLHELP,helpcompiler) \\\n\t$(call gb_Helper_optional,HELP,helpcontent2) \\\n\thwpfilter \\\n\ti18nlangtag \\\n\ti18npool \\\n\ti18nutil \\\n\tidl \\\n\tinstsetoo_native \\\n\tio \\\n\tjavaunohelper \\\n\tjurt \\\n\tjvmaccess \\\n\tjvmfwk \\\n\t$(call gb_Helper_optional,LIBRELOGO,librelogo) \\\n\tlibreofficekit \\\n\tlingucomponent \\\n\tlinguistic \\\n\tlotuswordpro \\\n\t$(call gb_Helper_optional,DESKTOP,l10ntools) \\\n\tnet_ure \\\n\t$(call gb_Helper_optional,NLPSOLVER,nlpsolver) \\\n\to3tl \\\n\t$(call gb_Helper_optional,ODK,odk) \\\n\toffapi \\\n\tofficecfg \\\n\toovbaapi \\\n\toox \\\n\t$(call gb_Helper_optional,OPENCL,opencl) \\\n\tpackage \\\n\tpch \\\n\tpostprocess \\\n\t$(call gb_Helper_optional,PYUNO,pyuno) \\\n\t$(call gb_Helper_optional,QADEVOOO,qadevOOo) \\\n\treadlicense_oo \\\n\tregistry \\\n\tremotebridges \\\n\treportbuilder \\\n\t$(call gb_Helper_optional,DBCONNECTIVITY,reportdesign) \\\n\tridljar \\\n\tsal \\\n\tsalhelper \\\n\tsax \\\n\t$(if $(ENABLE_WASM_STRIP_CALC),, \\\n\tsc \\\n\tscaddins \\\n\tsccomp \\\n\t) \\\n\t$(call gb_Helper_optional,DESKTOP,scp2) \\\n\tscripting \\\n    $(if $(ENABLE_WASM_STRIP_BASIC_DRAW_MATH_IMPRESS),, \\\n\tsd \\\n\tsdext \\\n    ) \\\n\t$(call gb_Helper_optional,DESKTOP,setup_native) \\\n\tsfx2 \\\n\tshell \\\n    $(if $(ENABLE_WASM_STRIP_BASIC_DRAW_MATH_IMPRESS),, \\\n\tslideshow \\\n    ) \\\n\tsmoketest \\\n\tsolenv \\\n\tsoltools \\\n\tsot \\\n    $(if $(ENABLE_WASM_STRIP_BASIC_DRAW_MATH_IMPRESS),, \\\n\tstarmath \\\n    ) \\\n    $(if $(ENABLE_CUSTOMTARGET_COMPONENTS),static) \\\n\tstoc \\\n\tstore \\\n\tsvl \\\n\tsvtools \\\n\tsvgio \\\n\temfio \\\n\tsvx \\\n\t$(if $(ENABLE_WASM_STRIP_WRITER),, \\\n\tsw \\\n\tswext \\\n\t) \\\n\tsysui \\\n\ttest \\\n\ttesttools \\\n\ttoolkit \\\n\ttools \\\n\tucb \\\n\tucbhelper \\\n\tudkapi \\\n\t$(call gb_Helper_optional,PYUNO,uitest) \\\n\tUnoControls \\\n\tunodevtools \\\n\tunoil \\\n\tunoidl \\\n\tunotest \\\n\tunotools \\\n\tunoxml \\\n\ture \\\n\tuui \\\n\tvbahelper \\\n\tvcl \\\n\twizards \\\n\twriterperfect \\\n    $(call gb_Helper_optional,XMLHELP,xmlhelp) \\\n\txmloff \\\n\txmlreader \\\n\txmlscript \\\n\txmlsecurity \\\n))\n\nifeq (,$(DISABLE_DYNLOADING))\n# Especially when building everything with symbols, the linking of the largest\n# libraries takes enormous amounts of RAM.\tTo prevent annoying OOM situations\n# etc., try to prevent linking these in parallel by adding artificial build\n# order dependencies here.\n# Do this only if a linker is not explicitly set, as this should only apply\n# to the BFD linker and any decently modern linker presumably performs better.\nifeq (,$(USE_LD))\ndefine repositorymodule_serialize1\n$(call gb_Library_get_linktarget_target,$(1)) :| $(foreach lib,$(2),$(call gb_Library_get_target,$(lib)))\nendef\nelse\ndefine repositorymodule_serialize1\nendef\nendif\n\ndefine repositorymodule_serialize\n$(if $(filter-out 0 1,$(words $(1))),\\\n$(call repositorymodule_serialize1,$(firstword $(1)),$(wordlist 2,$(words $(1)),$(1))))\n$(if $(strip $(1)),\\\n$(call repositorymodule_serialize,$(wordlist 2,$(words $(1)),$(1))))\nendef\n\n# DO NOT SORT ALPHABETICALLY: the libraries must be listed in dependency order,\n# otherwise cyclic dependencies ruin everything.\n# do not serialize on a partial build as that may fail due to missing deps.\n# the default goal is build (see Module.mk)\nifeq (,$(filter-out build check unitcheck slowcheck screenshot subsequentcheck uicheck coverage,$(MAKECMDGOALS)))\n$(eval $(call repositorymodule_serialize,\\\n\tscfilt \\\n\t$(call gb_Helper_optional,SCRIPTING,vbaobj) \\\n\tsc msword \\\n\t$(call gb_Helper_optional,DESKTOP,swui) \\\n\tsw \\\n\t$(if $(MERGELIBS_MORE),, \\\n\t\tsd \\\n\t\t$(call gb_Helper_optional,DBCONNECTIVITY,dbu) \\\n\t\tcui) \\\n\t$(if $(MERGELIBS), merged, \\\n\t\tchartcontroller chartcore oox svx svxcore xo sfx fwk svt vcl) \\\n))\nendif\nendif # !$(DISABLE_DYNLOADING)\n\n# vim: set noet sw=4 ts=4:\n"
        },
        {
          "name": "TEMPLATE.SOURCECODE.HEADER",
          "type": "blob",
          "size": 5.8916015625,
          "content": "------------------------------------------------------------------------\n\n                          * Stop / Think *\n\n\tYou need to choose either a pure MPLv2 header (from the top),\nor an MPLv2 on ALv2 header (from the bottom).\n\n\tIf the new module you created is based in any way on an\nexisting module, then:\n\n\ta) if that module has an MPLv2 on ALv2 header - please use\n\t   this option or\n\n\tb) if the module is entirely your own work, and/or based on an\n\t   existing MPLv2 header - please use that header.\n\n\tOtherwise, use the pure MPLv2 header for new code.\n\n\tFor any questions please contact me directly:\n\t\t\t    michael.meeks@collabora.com.\n\n\tThanks !\n\n------------------------------------------------------------------------\n\n             For all entirely new, original source files created by\n                        LibreOffice hackers:\n\n------------------------------------------------------------------------\n\nFor C/C++/Java/IDL etc.\n\n/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4; fill-column: 100 -*- */\n/*\n * This file is part of the LibreOffice project.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n...\n/* vim:set shiftwidth=4 softtabstop=4 expandtab cinoptions=b1,g0,N-s cinkeys+=0=break: */\n\nFor makefiles:\n\n# -*- Mode: makefile-gmake; tab-width: 4; indent-tabs-mode: t; fill-column: 100 -*-\n#\n# This file is part of the LibreOffice project.\n#\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n#\n...\n# vim: set noet sw=4 ts=4:\n\nFor Python files:\n\n# -*- tab-width: 4; indent-tabs-mode: nil; py-indent-offset: 4 -*-\n#\n# This file is part of the LibreOffice project.\n#\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n#\n...\n# vim: set shiftwidth=4 softtabstop=4 expandtab:\n\nFor XML / .component:\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n * This file is part of the LibreOffice project.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n-->\n\n\n------------------------------------------------------------------------\n\n             For source files which may contain code\n               from the Apache Software Foundation:\n\n------------------------------------------------------------------------\n\nFor C/C++/Java/IDL etc.\n\n/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4; fill-column: 100 -*- */\n/*\n * This file is part of the LibreOffice project.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * This file incorporates work covered by the following license notice:\n *\n *   Licensed to the Apache Software Foundation (ASF) under one or more\n *   contributor license agreements. See the NOTICE file distributed\n *   with this work for additional information regarding copyright\n *   ownership. The ASF licenses this file to you under the Apache\n *   License, Version 2.0 (the \"License\"); you may not use this file\n *   except in compliance with the License. You may obtain a copy of\n *   the License at http://www.apache.org/licenses/LICENSE-2.0 .\n */\n...\n/* vim:set shiftwidth=4 softtabstop=4 expandtab cinoptions=b1,g0,N-s cinkeys+=0=break: */\n\nFor makefiles, perl, scripts etc.\n\n# -*- Mode: makefile-gmake; tab-width: 4; indent-tabs-mode: t; fill-column: 100 -*-\n#\n# This file is part of the LibreOffice project.\n#\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n#\n# This file incorporates work covered by the following license notice:\n#\n#   Licensed to the Apache Software Foundation (ASF) under one or more\n#   contributor license agreements. See the NOTICE file distributed\n#   with this work for additional information regarding copyright\n#   ownership. The ASF licenses this file to you under the Apache\n#   License, Version 2.0 (the \"License\"); you may not use this file\n#   except in compliance with the License. You may obtain a copy of\n#   the License at http://www.apache.org/licenses/LICENSE-2.0 .\n#\n...\n# vim: set noet sw=4 ts=4:\n\nFor XML / .component:\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n * This file is part of the LibreOffice project.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * This file incorporates work covered by the following license notice:\n *\n *   Licensed to the Apache Software Foundation (ASF) under one or more\n *   contributor license agreements. See the NOTICE file distributed\n *   with this work for additional information regarding copyright\n *   ownership. The ASF licenses this file to you under the Apache\n *   License, Version 2.0 (the \"License\"); you may not use this file\n *   except in compliance with the License. You may obtain a copy of\n *   the License at http://www.apache.org/licenses/LICENSE-2.0 .\n-->\n\n\n------------------------------------------------------------------------\n\n             For source headers which are part of\n               LibreOffice published API:\n\n------------------------------------------------------------------------\n\nIn published API header files, the following notice should be appended after the license header:\n\n/*\n * This file is part of LibreOffice project published API\n */\n...\n"
        },
        {
          "name": "UnoControls",
          "type": "tree",
          "content": null
        },
        {
          "name": "android",
          "type": "tree",
          "content": null
        },
        {
          "name": "animations",
          "type": "tree",
          "content": null
        },
        {
          "name": "antivirusDetection.vbs",
          "type": "blob",
          "size": 1.1142578125,
          "content": "On Error Resume Next\r\nSet objWMIService = GetObject(\"winmgmts:{impersonationLevel=impersonate}!\\\\.\\root\\SecurityCenter2\")\r\nIf objWMIService is Nothing Then\r\n    Wscript.StdOut.Write \"NULL\"\r\nElse\r\n    Set installedAntiviruses = objWMIService.ExecQuery(\"Select * from AntivirusProduct\")\r\n'Iterates through all the antivirus software,retrieved by the WMI query,present on the system and prints only the ones that are active\r\n'this is done by checking the 12th bit of the productState property of the antivirus\r\n'if 12th bit is on then it means that the antivirus is in active state\r\n'if 12th bit is off then it is inactive.\r\n'see http://neophob.com/2010/03/wmi-query-windows-securitycenter2/\r\n    count=0\r\n    list=\"\"\r\n    For Each antivirus in installedAntiviruses\r\n        If  antivirus.productState And &h01000 Then 'checking the state of the 12th bit of productState property of the antivirus\r\n            count=count+1\r\n            list=list & VBNewLine & VBtab & \"*\" & antivirus.displayName\r\n        End if\r\n    Next\r\n    If count = 0 Then\r\n        Wscript.StdOut.Write \"NOT_FOUND\"\r\n    Else\r\n        Wscript.Echo list\r\n    End if\r\nEnd if"
        },
        {
          "name": "apple_remote",
          "type": "tree",
          "content": null
        },
        {
          "name": "autogen.sh",
          "type": "blob",
          "size": 11.283203125,
          "content": ":\n#\n# This script checks various configure parameters and uses three files:\n#   * autogen.input (ro)\n#   * autogen.lastrun (rw)\n#   * autogen.lastrun.bak (rw)\n#\n# If _no_ parameters:\n#   Read args from autogen.input or autogen.lastrun\n# Else\n#   Backup autogen.lastrun as autogen.lastrun.bak\n#   Write autogen.lastrun with new commandline args\n#\n# Run configure with checked args\n#\n    eval 'exec perl -S $0 ${1+\"$@\"}'\n        if 0;\n\nuse strict;\nuse Cwd ('cwd', 'realpath');\nuse File::Basename;\n\nmy $src_path=dirname(realpath($0));\nmy $build_path=realpath(cwd());\n# since this looks crazy, if you have a symlink on a path up to and including\n# the current directory, we need our configure to run in the realpath of that\n# such that compiled (realpath'd) dependency filenames match the filenames\n# used in our makefiles - ie. this gets dependencies right via SRC_ROOT\nchdir ($build_path);\n# more amazingly, if you don't clobber 'PWD' shells will re-assert their\n# old path from the environment, not cwd.\n$ENV{PWD} = $build_path;\n\nmy $aclocal;\nmy $autoconf;\n\n# check we have various vital tools\nsub sanity_checks($)\n{\n    my $system = shift;\n    my @path = split (':', $ENV{'PATH'});\n    my %required =\n      (\n       'pkg-config' => \"pkg-config is required to be installed\",\n       $autoconf    => \"autoconf is required\",\n       $aclocal     => \"$aclocal is required\",\n      );\n    if ($ENV{WSL_DISTRO_NAME} && $ENV{PATH} =~ /mingw64/) {\n        # for wsl-as-helper build we only need the m4 macros like for macOS\n        delete $required{'pkg-config'};\n    }\n    for my $elem (@path) {\n        for my $app (keys %required) {\n            if (-f \"$elem/$app\") {\n                delete $required{$app};\n            }\n        }\n    }\n    if ((keys %required) > 0) {\n        print (\"Various low-level dependencies are missing, please install them:\\n\");\n        for my $app (keys %required) {\n            print \"\\t $app: \" . $required{$app} . \"\\n\";\n        }\n        exit (1);\n    }\n}\n\n# one argument per line\nsub read_args($)\n{\n    my $file = shift;\n    my $fh;\n    my @lst;\n    open ($fh, $file) || die \"can't open file: $file\";\n    while (<$fh>) {\n        chomp();\n        s/^\\s+//;\n        s/\\s+$//;\n        # migrate from the old system\n        if ( substr($_, 0, 1) eq \"'\" ) {\n            print STDERR \"Migrating options from the old autogen.lastrun format, using:\\n\";\n            my @opts;\n            @opts = split(/'/);\n            foreach my $opt (@opts) {\n                if ( substr($opt, 0, 1) eq \"-\" ) {\n                    push @lst, $opt;\n                    print STDERR \"  $opt\\n\";\n                }\n            }\n        } elsif ( /^INCLUDE:(.*)/ ) {\n            # include another .conf into this one\n            my $config = \"$src_path/distro-configs/$1.conf\";\n            if (! -f $config) {\n                invalid_distro ($config, $1);\n            }\n            push @lst, read_args ($config);\n        } elsif ( substr($_, 0, 1) eq \"#\" ) {\n            # comment\n        } elsif ( length == 0 ) {\n            # empty line\n        } else {\n            push @lst, $_;\n        }\n    }\n    close ($fh);\n    # print \"read args from file '$file': @lst\\n\";\n    return @lst;\n}\n\nsub show_distro_configs($$)\n{\n    my ($prefix, $path) = @_;\n    my $dirh;\n    opendir ($dirh, \"$path\");\n    while (($_ = readdir ($dirh))) {\n        if (-d \"$path/$_\") {\n            show_distro_configs(\n                    $prefix eq \"\" ? \"$_/\" : \"$prefix/$_/\", \"$path/$_\")\n                unless $_ eq '.' || $_ eq '..';\n            next;\n        }\n        /(.*)\\.conf$/ || next;\n        print STDERR \"\\t$prefix$1\\n\";\n    }\n    closedir ($dirh);\n}\n\nsub invalid_distro($$)\n{\n    my ($config, $distro) = @_;\n    print STDERR \"Can't find distro option set: $config\\n\";\n    print STDERR \"Distros with distro option sets are:\\n\";\n    show_distro_configs(\"\", \"$src_path/distro-configs\");\n    exit (1);\n}\n\n# Avoid confusing \"aclocal: error: non-option arguments are not accepted: '.../m4'.\" error message.\ndie \"\\$src_path must not contain spaces, but it is '$src_path'.\" if ($src_path =~ / /);\n\n# Alloc $ACLOCAL to specify which aclocal to use\n$aclocal = $ENV{ACLOCAL} ? $ENV{ACLOCAL} : 'aclocal';\n# Alloc $AUTOCONF to specify which autoconf to use\n# (e.g. autoconf268 from a backports repo)\n$autoconf = $ENV{AUTOCONF} ? $ENV{AUTOCONF} : 'autoconf';\n\nmy $system = `uname -s`;\nchomp $system;\n\nsanity_checks ($system) unless($system eq 'Darwin');\n\n# If we are running in a LODE env, make sure we find the right aclocal\n# by making sure that LODE_HOME/opt/bin is in the PATH\nif (defined $ENV{LODE_HOME})\n{\n    my $lode_path = quotemeta \"$ENV{LODE_HOME}/opt/bin\";\n    if($ENV{PATH} !~ $lode_path)\n    {\n        $ENV{PATH}=\"$ENV{LODE_HOME}/opt/bin:$ENV{PATH}\";\n        print STDERR \"add LODE_HOME/opt/bin in PATH\\n\";\n    }\n}\n\nmy $aclocal_flags = $ENV{ACLOCAL_FLAGS};\n\n$aclocal_flags .= \" -I $src_path/m4\";\n# the m4/mac directory provides the pkg-config macros used in configure\n$aclocal_flags .= \" -I $src_path/m4/mac\" if ($system eq 'Darwin' || ($ENV{WSL_DISTRO_NAME} && $ENV{PATH} =~ /mingw64/));\n\n$ENV{AUTOMAKE_EXTRA_FLAGS} = '--warnings=no-portability' if (!($system eq 'Darwin'));\n\nif ($src_path ne $build_path)\n{\n    system (\"ln -sf $src_path/configure.ac configure.ac\");\n    system (\"ln -sf $src_path/g g\");\n    my $src_path_win=$src_path;\n    if ($system =~ /CYGWIN.*/) {\n        $src_path_win=`cygpath -m $src_path`;\n        chomp $src_path_win;\n    }\n    # wsl-as-helper method: autogen.sh/configure runs within a wsl-container (WSL_DISTRO_NAME)\n    # and build is run from within git-bash (that adds .../Git/mingw64/bin to PATH)\n    if ($ENV{WSL_DISTRO_NAME} && $ENV{PATH} =~ /mingw64/) {\n        $src_path_win=`wslpath -m $src_path`;\n        chomp $src_path_win;\n    }\n    my @modules = <$src_path/*/Makefile>;\n    foreach my $module (@modules)\n    {\n        my $dir = basename (dirname ($module));\n        mkdir ($dir);\n        system (\"rm -f $dir/Makefile\");\n        system (\"printf 'module_directory:=$src_path_win/$dir/\\ninclude \\$(module_directory)/../solenv/gbuild/partial_build.mk\\n' > $dir/Makefile\");\n    }\n    my @external_modules = <$src_path/external/*/Makefile>;\n    mkdir (\"external\");\n    system (\"ln -sf $src_path/external/Module_external.mk external/\");\n    foreach my $module (@external_modules)\n    {\n        my $dir = basename (dirname ($module));\n        mkdir (\"external/$dir\");\n        system (\"rm -f external/$dir/Makefile\");\n        system (\"printf 'module_directory:=$src_path_win/external/$dir/\\ninclude \\$(module_directory)/../../solenv/gbuild/partial_build.mk\\n' > external/$dir/Makefile\");\n    }\n}\nsystem (\"$aclocal $aclocal_flags\") && die \"Failed to run aclocal\";\nunlink (\"configure\");\nsystem (\"$autoconf -I ${src_path}\") && die \"Failed to run autoconf\";\ndie \"Failed to generate the configure script\" if (! -f \"configure\");\n\n# Handle help arguments first, so we don't clobber autogen.lastrun\nfor my $arg (@ARGV) {\n    if ($arg =~ /^(--help|-h|-\\?)$/) {\n        print STDOUT \"autogen.sh - libreoffice configuration helper\\n\";\n        print STDOUT \"When called without arguments, arguments from autogen.input are used.\\n\";\n        print STDOUT \"\\nArguments processed in the helper:\\n\";\n        print STDOUT \"   --with-distro  use a config from distro-configs/\\n\";\n        print STDOUT \"                  the name needs to be passed without extension\\n\";\n        print STDOUT \"   --best-effort  don't fail on un-known configure with/enable options\\n\";\n        print STDOUT \"\\nOther arguments passed directly to configure:\\n\\n\";\n        system (\"./configure --help\");\n        exit;\n    }\n}\n\nmy @cmdline_args = ();\n\nmy $input = \"autogen.input\";\nmy $lastrun = \"autogen.lastrun\";\n\nif (!@ARGV) {\n    if (-f $input) {\n        if (-f $lastrun) {\n            print STDERR <<WARNING;\n********************************************************************\n*\n*   Reading $input and ignoring $lastrun!\n*   Consider removing $lastrun to get rid of this warning.\n*\n********************************************************************\nWARNING\n        }\n        @cmdline_args = read_args ($input);\n    } elsif (-f $lastrun) {\n        print STDERR \"Reading $lastrun. Please rename it to $input to avoid this message.\\n\";\n        @cmdline_args = read_args ($lastrun);\n    }\n} else {\n    if (-f $input) {\n        print STDERR <<WARNING;\n********************************************************************\n*\n*   Using commandline arguments and ignoring $input!\n*\n********************************************************************\nWARNING\n    }\n    @cmdline_args = @ARGV;\n}\n\nmy @args;\nmy $default_config = \"$src_path/distro-configs/default.conf\";\nmy $option_checking = 'fatal';\n\nif (-f $default_config) {\n    print STDERR \"Reading default config file: $default_config.\\n\";\n    push @args, read_args ($default_config);\n}\nfor my $arg (@cmdline_args) {\n    if ($arg =~ m/--with-distro=(.*)$/) {\n        my $config = \"$src_path/distro-configs/$1.conf\";\n        if (! -f $config) {\n            invalid_distro ($config, $1);\n        }\n        push @args, read_args ($config);\n    } elsif ($arg =~ m/--best-effort$/) {\n        $option_checking = 'warn';\n    } else {\n        push @args, $arg;\n    }\n}\n\nif (defined $ENV{NOCONFIGURE}) {\n    print \"Skipping configure process.\";\n} else {\n    # Save autogen.lastrun only if we did get some arguments on the command-line\n    if (! -f $input && @ARGV) {\n        if (scalar(@cmdline_args) > 0) {\n            # if there's already an autogen.lastrun, make a backup first\n            if (-e $lastrun) {\n                open (my $fh, $lastrun) || warn \"Can't open $lastrun.\\n\";\n                open (BAK, \">$lastrun.bak\") || warn \"Can't create backup file $lastrun.bak.\\n\";\n                while (<$fh>) {\n                    print BAK;\n                }\n                close (BAK) && close ($fh);\n            }\n            # print \"Saving command-line args to $lastrun\\n\";\n            my $fh;\n            open ($fh, \">autogen.lastrun\") || die \"Can't open autogen.lastrun: $!\";\n            for my $arg (@cmdline_args) {\n                print $fh \"$arg\\n\";\n            }\n            close ($fh);\n        }\n    }\n    push @args, \"--srcdir=$src_path\";\n    push @args, \"--enable-option-checking=$option_checking\";\n\n    # When running a shell script from Perl on WSL, weirdly named\n    # environment variables like the \"ProgramFiles(x86)\" one don't get\n    # imported by the shell. So export it as PROGRAMFILESX86 instead.\n    my $building_for_linux = 0;\n    my $building_with_emscripten = 0;\n    foreach my $arg (@args) {\n        $building_for_linux = 1 if ($arg =~ /--host=x86_64.*linux/);\n        $building_with_emscripten = 1 if ($arg =~ /^--host=wasm.*-emscripten$/);\n    }\n\n    unshift @args, \"./configure\";\n    unshift @args, \"emconfigure\" if ($building_with_emscripten);\n\n    print \"Running '\" . join (\" \", @args), \"'\\n\";\n\n    if (`wslsys 2>/dev/null` ne \"\" && !$building_for_linux) {\n        if (!$ENV{\"ProgramFiles(x86)\"}) {\n            print STDERR \"To build for Windows on WSL, you need to set the WSLENV environment variable in the Control Panel to 'ProgramFiles(x86)'\\n\";\n            print STDERR \"If you actually do want to build for WSL (Linux) on WSL, pass a --host=x86_64-pc-linux-gnu option\\n\";\n            exit (1);\n        }\n        $ENV{\"PROGRAMFILESX86\"} = $ENV{\"ProgramFiles(x86)\"};\n    }\n\n    system (@args) && die \"Error running configure\";\n}\n\n# Local Variables:\n# mode: perl\n# cperl-indent-level: 4\n# tab-width: 4\n# indent-tabs-mode: nil\n# End:\n\n# vim:set ft=perl shiftwidth=4 softtabstop=4 expandtab: #\n"
        },
        {
          "name": "avmedia",
          "type": "tree",
          "content": null
        },
        {
          "name": "basctl",
          "type": "tree",
          "content": null
        },
        {
          "name": "basegfx",
          "type": "tree",
          "content": null
        },
        {
          "name": "basic",
          "type": "tree",
          "content": null
        },
        {
          "name": "bean",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "binaryurp",
          "type": "tree",
          "content": null
        },
        {
          "name": "bridges",
          "type": "tree",
          "content": null
        },
        {
          "name": "canvas",
          "type": "tree",
          "content": null
        },
        {
          "name": "chart2",
          "type": "tree",
          "content": null
        },
        {
          "name": "cli_ure",
          "type": "tree",
          "content": null
        },
        {
          "name": "codemaker",
          "type": "tree",
          "content": null
        },
        {
          "name": "comphelper",
          "type": "tree",
          "content": null
        },
        {
          "name": "compilerplugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "config.guess",
          "type": "blob",
          "size": 48.767578125,
          "content": "#! /bin/sh\n# Attempt to guess a canonical system name.\n#   Copyright 1992-2022 Free Software Foundation, Inc.\n\n# shellcheck disable=SC2006,SC2268 # see below for rationale\n\ntimestamp='2022-09-17'\n\n# This file is free software; you can redistribute it and/or modify it\n# under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, see <https://www.gnu.org/licenses/>.\n#\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program that contains a\n# configuration script generated by Autoconf, you may include it under\n# the same distribution terms that you use for the rest of that\n# program.  This Exception is an additional permission under section 7\n# of the GNU General Public License, version 3 (\"GPLv3\").\n#\n# Originally written by Per Bothner; maintained since 2000 by Ben Elliston.\n#\n# You can get the latest version of this script from:\n# https://git.savannah.gnu.org/cgit/config.git/plain/config.guess\n#\n# Please send patches to <config-patches@gnu.org>.\n\n\n# The \"shellcheck disable\" line above the timestamp inhibits complaints\n# about features and limitations of the classic Bourne shell that were\n# superseded or lifted in POSIX.  However, this script identifies a wide\n# variety of pre-POSIX systems that do not have POSIX shells at all, and\n# even some reasonably current systems (Solaris 10 as case-in-point) still\n# have a pre-POSIX /bin/sh.\n\n\nme=`echo \"$0\" | sed -e 's,.*/,,'`\n\nusage=\"\\\nUsage: $0 [OPTION]\n\nOutput the configuration name of the system \\`$me' is run on.\n\nOptions:\n  -h, --help         print this help, then exit\n  -t, --time-stamp   print date of last modification, then exit\n  -v, --version      print version number, then exit\n\nReport bugs and patches to <config-patches@gnu.org>.\"\n\nversion=\"\\\nGNU config.guess ($timestamp)\n\nOriginally written by Per Bothner.\nCopyright 1992-2022 Free Software Foundation, Inc.\n\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n\nhelp=\"\nTry \\`$me --help' for more information.\"\n\n# Parse command line\nwhile test $# -gt 0 ; do\n  case $1 in\n    --time-stamp | --time* | -t )\n       echo \"$timestamp\" ; exit ;;\n    --version | -v )\n       echo \"$version\" ; exit ;;\n    --help | --h* | -h )\n       echo \"$usage\"; exit ;;\n    -- )     # Stop option processing\n       shift; break ;;\n    - )\t# Use stdin as input.\n       break ;;\n    -* )\n       echo \"$me: invalid option $1$help\" >&2\n       exit 1 ;;\n    * )\n       break ;;\n  esac\ndone\n\nif test $# != 0; then\n  echo \"$me: too many arguments$help\" >&2\n  exit 1\nfi\n\n# Just in case it came from the environment.\nGUESS=\n\n# CC_FOR_BUILD -- compiler used by this script. Note that the use of a\n# compiler to aid in system detection is discouraged as it requires\n# temporary files to be created and, as you can see below, it is a\n# headache to deal with in a portable fashion.\n\n# Historically, `CC_FOR_BUILD' used to be named `HOST_CC'. We still\n# use `HOST_CC' if defined, but it is deprecated.\n\n# Portable tmp directory creation inspired by the Autoconf team.\n\ntmp=\n# shellcheck disable=SC2172\ntrap 'test -z \"$tmp\" || rm -fr \"$tmp\"' 0 1 2 13 15\n\nset_cc_for_build() {\n    # prevent multiple calls if $tmp is already set\n    test \"$tmp\" && return 0\n    : \"${TMPDIR=/tmp}\"\n    # shellcheck disable=SC2039,SC3028\n    { tmp=`(umask 077 && mktemp -d \"$TMPDIR/cgXXXXXX\") 2>/dev/null` && test -n \"$tmp\" && test -d \"$tmp\" ; } ||\n\t{ test -n \"$RANDOM\" && tmp=$TMPDIR/cg$$-$RANDOM && (umask 077 && mkdir \"$tmp\" 2>/dev/null) ; } ||\n\t{ tmp=$TMPDIR/cg-$$ && (umask 077 && mkdir \"$tmp\" 2>/dev/null) && echo \"Warning: creating insecure temp directory\" >&2 ; } ||\n\t{ echo \"$me: cannot create a temporary directory in $TMPDIR\" >&2 ; exit 1 ; }\n    dummy=$tmp/dummy\n    case ${CC_FOR_BUILD-},${HOST_CC-},${CC-} in\n\t,,)    echo \"int x;\" > \"$dummy.c\"\n\t       for driver in cc gcc c89 c99 ; do\n\t\t   if ($driver -c -o \"$dummy.o\" \"$dummy.c\") >/dev/null 2>&1 ; then\n\t\t       CC_FOR_BUILD=$driver\n\t\t       break\n\t\t   fi\n\t       done\n\t       if test x\"$CC_FOR_BUILD\" = x ; then\n\t\t   CC_FOR_BUILD=no_compiler_found\n\t       fi\n\t       ;;\n\t,,*)   CC_FOR_BUILD=$CC ;;\n\t,*,*)  CC_FOR_BUILD=$HOST_CC ;;\n    esac\n}\n\n# This is needed to find uname on a Pyramid OSx when run in the BSD universe.\n# (ghazi@noc.rutgers.edu 1994-08-24)\nif test -f /.attbin/uname ; then\n\tPATH=$PATH:/.attbin ; export PATH\nfi\n\nUNAME_MACHINE=`(uname -m) 2>/dev/null` || UNAME_MACHINE=unknown\nUNAME_RELEASE=`(uname -r) 2>/dev/null` || UNAME_RELEASE=unknown\nUNAME_SYSTEM=`(uname -s) 2>/dev/null` || UNAME_SYSTEM=unknown\nUNAME_VERSION=`(uname -v) 2>/dev/null` || UNAME_VERSION=unknown\n\ncase $UNAME_SYSTEM in\nLinux|GNU|GNU/*)\n\tLIBC=unknown\n\n\tset_cc_for_build\n\tcat <<-EOF > \"$dummy.c\"\n\t#include <features.h>\n\t#if defined(__UCLIBC__)\n\tLIBC=uclibc\n\t#elif defined(__dietlibc__)\n\tLIBC=dietlibc\n\t#elif defined(__GLIBC__)\n\tLIBC=gnu\n\t#else\n\t#include <stdarg.h>\n\t/* First heuristic to detect musl libc.  */\n\t#ifdef __DEFINED_va_list\n\tLIBC=musl\n\t#endif\n\t#endif\n\tEOF\n\tcc_set_libc=`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^LIBC' | sed 's, ,,g'`\n\teval \"$cc_set_libc\"\n\n\t# Second heuristic to detect musl libc.\n\tif [ \"$LIBC\" = unknown ] &&\n\t   command -v ldd >/dev/null &&\n\t   ldd --version 2>&1 | grep -q ^musl; then\n\t\tLIBC=musl\n\tfi\n\n\t# If the system lacks a compiler, then just pick glibc.\n\t# We could probably try harder.\n\tif [ \"$LIBC\" = unknown ]; then\n\t\tLIBC=gnu\n\tfi\n\t;;\nesac\n\n# Note: order is significant - the case branches are not exclusive.\n\ncase $UNAME_MACHINE:$UNAME_SYSTEM:$UNAME_RELEASE:$UNAME_VERSION in\n    *:NetBSD:*:*)\n\t# NetBSD (nbsd) targets should (where applicable) match one or\n\t# more of the tuples: *-*-netbsdelf*, *-*-netbsdaout*,\n\t# *-*-netbsdecoff* and *-*-netbsd*.  For targets that recently\n\t# switched to ELF, *-*-netbsd* would select the old\n\t# object file format.  This provides both forward\n\t# compatibility and a consistent mechanism for selecting the\n\t# object file format.\n\t#\n\t# Note: NetBSD doesn't particularly care about the vendor\n\t# portion of the name.  We always set it to \"unknown\".\n\tUNAME_MACHINE_ARCH=`(uname -p 2>/dev/null || \\\n\t    /sbin/sysctl -n hw.machine_arch 2>/dev/null || \\\n\t    /usr/sbin/sysctl -n hw.machine_arch 2>/dev/null || \\\n\t    echo unknown)`\n\tcase $UNAME_MACHINE_ARCH in\n\t    aarch64eb) machine=aarch64_be-unknown ;;\n\t    armeb) machine=armeb-unknown ;;\n\t    arm*) machine=arm-unknown ;;\n\t    sh3el) machine=shl-unknown ;;\n\t    sh3eb) machine=sh-unknown ;;\n\t    sh5el) machine=sh5le-unknown ;;\n\t    earmv*)\n\t\tarch=`echo \"$UNAME_MACHINE_ARCH\" | sed -e 's,^e\\(armv[0-9]\\).*$,\\1,'`\n\t\tendian=`echo \"$UNAME_MACHINE_ARCH\" | sed -ne 's,^.*\\(eb\\)$,\\1,p'`\n\t\tmachine=${arch}${endian}-unknown\n\t\t;;\n\t    *) machine=$UNAME_MACHINE_ARCH-unknown ;;\n\tesac\n\t# The Operating System including object format, if it has switched\n\t# to ELF recently (or will in the future) and ABI.\n\tcase $UNAME_MACHINE_ARCH in\n\t    earm*)\n\t\tos=netbsdelf\n\t\t;;\n\t    arm*|i386|m68k|ns32k|sh3*|sparc|vax)\n\t\tset_cc_for_build\n\t\tif echo __ELF__ | $CC_FOR_BUILD -E - 2>/dev/null \\\n\t\t\t| grep -q __ELF__\n\t\tthen\n\t\t    # Once all utilities can be ECOFF (netbsdecoff) or a.out (netbsdaout).\n\t\t    # Return netbsd for either.  FIX?\n\t\t    os=netbsd\n\t\telse\n\t\t    os=netbsdelf\n\t\tfi\n\t\t;;\n\t    *)\n\t\tos=netbsd\n\t\t;;\n\tesac\n\t# Determine ABI tags.\n\tcase $UNAME_MACHINE_ARCH in\n\t    earm*)\n\t\texpr='s/^earmv[0-9]/-eabi/;s/eb$//'\n\t\tabi=`echo \"$UNAME_MACHINE_ARCH\" | sed -e \"$expr\"`\n\t\t;;\n\tesac\n\t# The OS release\n\t# Debian GNU/NetBSD machines have a different userland, and\n\t# thus, need a distinct triplet. However, they do not need\n\t# kernel version information, so it can be replaced with a\n\t# suitable tag, in the style of linux-gnu.\n\tcase $UNAME_VERSION in\n\t    Debian*)\n\t\trelease='-gnu'\n\t\t;;\n\t    *)\n\t\trelease=`echo \"$UNAME_RELEASE\" | sed -e 's/[-_].*//' | cut -d. -f1,2`\n\t\t;;\n\tesac\n\t# Since CPU_TYPE-MANUFACTURER-KERNEL-OPERATING_SYSTEM:\n\t# contains redundant information, the shorter form:\n\t# CPU_TYPE-MANUFACTURER-OPERATING_SYSTEM is used.\n\tGUESS=$machine-${os}${release}${abi-}\n\t;;\n    *:Bitrig:*:*)\n\tUNAME_MACHINE_ARCH=`arch | sed 's/Bitrig.//'`\n\tGUESS=$UNAME_MACHINE_ARCH-unknown-bitrig$UNAME_RELEASE\n\t;;\n    *:OpenBSD:*:*)\n\tUNAME_MACHINE_ARCH=`arch | sed 's/OpenBSD.//'`\n\tGUESS=$UNAME_MACHINE_ARCH-unknown-openbsd$UNAME_RELEASE\n\t;;\n    *:SecBSD:*:*)\n\tUNAME_MACHINE_ARCH=`arch | sed 's/SecBSD.//'`\n\tGUESS=$UNAME_MACHINE_ARCH-unknown-secbsd$UNAME_RELEASE\n\t;;\n    *:LibertyBSD:*:*)\n\tUNAME_MACHINE_ARCH=`arch | sed 's/^.*BSD\\.//'`\n\tGUESS=$UNAME_MACHINE_ARCH-unknown-libertybsd$UNAME_RELEASE\n\t;;\n    *:MidnightBSD:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-midnightbsd$UNAME_RELEASE\n\t;;\n    *:ekkoBSD:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-ekkobsd$UNAME_RELEASE\n\t;;\n    *:SolidBSD:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-solidbsd$UNAME_RELEASE\n\t;;\n    *:OS108:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-os108_$UNAME_RELEASE\n\t;;\n    macppc:MirBSD:*:*)\n\tGUESS=powerpc-unknown-mirbsd$UNAME_RELEASE\n\t;;\n    *:MirBSD:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-mirbsd$UNAME_RELEASE\n\t;;\n    *:Sortix:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-sortix\n\t;;\n    *:Twizzler:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-twizzler\n\t;;\n    *:Redox:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-redox\n\t;;\n    mips:OSF1:*.*)\n\tGUESS=mips-dec-osf1\n\t;;\n    alpha:OSF1:*:*)\n\t# Reset EXIT trap before exiting to avoid spurious non-zero exit code.\n\ttrap '' 0\n\tcase $UNAME_RELEASE in\n\t*4.0)\n\t\tUNAME_RELEASE=`/usr/sbin/sizer -v | awk '{print $3}'`\n\t\t;;\n\t*5.*)\n\t\tUNAME_RELEASE=`/usr/sbin/sizer -v | awk '{print $4}'`\n\t\t;;\n\tesac\n\t# According to Compaq, /usr/sbin/psrinfo has been available on\n\t# OSF/1 and Tru64 systems produced since 1995.  I hope that\n\t# covers most systems running today.  This code pipes the CPU\n\t# types through head -n 1, so we only detect the type of CPU 0.\n\tALPHA_CPU_TYPE=`/usr/sbin/psrinfo -v | sed -n -e 's/^  The alpha \\(.*\\) processor.*$/\\1/p' | head -n 1`\n\tcase $ALPHA_CPU_TYPE in\n\t    \"EV4 (21064)\")\n\t\tUNAME_MACHINE=alpha ;;\n\t    \"EV4.5 (21064)\")\n\t\tUNAME_MACHINE=alpha ;;\n\t    \"LCA4 (21066/21068)\")\n\t\tUNAME_MACHINE=alpha ;;\n\t    \"EV5 (21164)\")\n\t\tUNAME_MACHINE=alphaev5 ;;\n\t    \"EV5.6 (21164A)\")\n\t\tUNAME_MACHINE=alphaev56 ;;\n\t    \"EV5.6 (21164PC)\")\n\t\tUNAME_MACHINE=alphapca56 ;;\n\t    \"EV5.7 (21164PC)\")\n\t\tUNAME_MACHINE=alphapca57 ;;\n\t    \"EV6 (21264)\")\n\t\tUNAME_MACHINE=alphaev6 ;;\n\t    \"EV6.7 (21264A)\")\n\t\tUNAME_MACHINE=alphaev67 ;;\n\t    \"EV6.8CB (21264C)\")\n\t\tUNAME_MACHINE=alphaev68 ;;\n\t    \"EV6.8AL (21264B)\")\n\t\tUNAME_MACHINE=alphaev68 ;;\n\t    \"EV6.8CX (21264D)\")\n\t\tUNAME_MACHINE=alphaev68 ;;\n\t    \"EV6.9A (21264/EV69A)\")\n\t\tUNAME_MACHINE=alphaev69 ;;\n\t    \"EV7 (21364)\")\n\t\tUNAME_MACHINE=alphaev7 ;;\n\t    \"EV7.9 (21364A)\")\n\t\tUNAME_MACHINE=alphaev79 ;;\n\tesac\n\t# A Pn.n version is a patched version.\n\t# A Vn.n version is a released version.\n\t# A Tn.n version is a released field test version.\n\t# A Xn.n version is an unreleased experimental baselevel.\n\t# 1.2 uses \"1.2\" for uname -r.\n\tOSF_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/^[PVTX]//' | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`\n\tGUESS=$UNAME_MACHINE-dec-osf$OSF_REL\n\t;;\n    Amiga*:UNIX_System_V:4.0:*)\n\tGUESS=m68k-unknown-sysv4\n\t;;\n    *:[Aa]miga[Oo][Ss]:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-amigaos\n\t;;\n    *:[Mm]orph[Oo][Ss]:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-morphos\n\t;;\n    *:OS/390:*:*)\n\tGUESS=i370-ibm-openedition\n\t;;\n    *:z/VM:*:*)\n\tGUESS=s390-ibm-zvmoe\n\t;;\n    *:OS400:*:*)\n\tGUESS=powerpc-ibm-os400\n\t;;\n    arm:RISC*:1.[012]*:*|arm:riscix:1.[012]*:*)\n\tGUESS=arm-acorn-riscix$UNAME_RELEASE\n\t;;\n    arm*:riscos:*:*|arm*:RISCOS:*:*)\n\tGUESS=arm-unknown-riscos\n\t;;\n    SR2?01:HI-UX/MPP:*:* | SR8000:HI-UX/MPP:*:*)\n\tGUESS=hppa1.1-hitachi-hiuxmpp\n\t;;\n    Pyramid*:OSx*:*:* | MIS*:OSx*:*:* | MIS*:SMP_DC-OSx*:*:*)\n\t# akee@wpdis03.wpafb.af.mil (Earle F. Ake) contributed MIS and NILE.\n\tcase `(/bin/universe) 2>/dev/null` in\n\t    att) GUESS=pyramid-pyramid-sysv3 ;;\n\t    *)   GUESS=pyramid-pyramid-bsd   ;;\n\tesac\n\t;;\n    NILE*:*:*:dcosx)\n\tGUESS=pyramid-pyramid-svr4\n\t;;\n    DRS?6000:unix:4.0:6*)\n\tGUESS=sparc-icl-nx6\n\t;;\n    DRS?6000:UNIX_SV:4.2*:7* | DRS?6000:isis:4.2*:7*)\n\tcase `/usr/bin/uname -p` in\n\t    sparc) GUESS=sparc-icl-nx7 ;;\n\tesac\n\t;;\n    s390x:SunOS:*:*)\n\tSUN_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\n\tGUESS=$UNAME_MACHINE-ibm-solaris2$SUN_REL\n\t;;\n    sun4H:SunOS:5.*:*)\n\tSUN_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\n\tGUESS=sparc-hal-solaris2$SUN_REL\n\t;;\n    sun4*:SunOS:5.*:* | tadpole*:SunOS:5.*:*)\n\tSUN_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\n\tGUESS=sparc-sun-solaris2$SUN_REL\n\t;;\n    i86pc:AuroraUX:5.*:* | i86xen:AuroraUX:5.*:*)\n\tGUESS=i386-pc-auroraux$UNAME_RELEASE\n\t;;\n    i86pc:SunOS:5.*:* | i86xen:SunOS:5.*:*)\n\tset_cc_for_build\n\tSUN_ARCH=i386\n\t# If there is a compiler, see if it is configured for 64-bit objects.\n\t# Note that the Sun cc does not turn __LP64__ into 1 like gcc does.\n\t# This test works for both compilers.\n\tif test \"$CC_FOR_BUILD\" != no_compiler_found; then\n\t    if (echo '#ifdef __amd64'; echo IS_64BIT_ARCH; echo '#endif') | \\\n\t\t(CCOPTS=\"\" $CC_FOR_BUILD -m64 -E - 2>/dev/null) | \\\n\t\tgrep IS_64BIT_ARCH >/dev/null\n\t    then\n\t\tSUN_ARCH=x86_64\n\t    fi\n\tfi\n\tSUN_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\n\tGUESS=$SUN_ARCH-pc-solaris2$SUN_REL\n\t;;\n    sun4*:SunOS:6*:*)\n\t# According to config.sub, this is the proper way to canonicalize\n\t# SunOS6.  Hard to guess exactly what SunOS6 will be like, but\n\t# it's likely to be more like Solaris than SunOS4.\n\tSUN_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\n\tGUESS=sparc-sun-solaris3$SUN_REL\n\t;;\n    sun4*:SunOS:*:*)\n\tcase `/usr/bin/arch -k` in\n\t    Series*|S4*)\n\t\tUNAME_RELEASE=`uname -v`\n\t\t;;\n\tesac\n\t# Japanese Language versions have a version number like `4.1.3-JL'.\n\tSUN_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/-/_/'`\n\tGUESS=sparc-sun-sunos$SUN_REL\n\t;;\n    sun3*:SunOS:*:*)\n\tGUESS=m68k-sun-sunos$UNAME_RELEASE\n\t;;\n    sun*:*:4.2BSD:*)\n\tUNAME_RELEASE=`(sed 1q /etc/motd | awk '{print substr($5,1,3)}') 2>/dev/null`\n\ttest \"x$UNAME_RELEASE\" = x && UNAME_RELEASE=3\n\tcase `/bin/arch` in\n\t    sun3)\n\t\tGUESS=m68k-sun-sunos$UNAME_RELEASE\n\t\t;;\n\t    sun4)\n\t\tGUESS=sparc-sun-sunos$UNAME_RELEASE\n\t\t;;\n\tesac\n\t;;\n    aushp:SunOS:*:*)\n\tGUESS=sparc-auspex-sunos$UNAME_RELEASE\n\t;;\n    # The situation for MiNT is a little confusing.  The machine name\n    # can be virtually everything (everything which is not\n    # \"atarist\" or \"atariste\" at least should have a processor\n    # > m68000).  The system name ranges from \"MiNT\" over \"FreeMiNT\"\n    # to the lowercase version \"mint\" (or \"freemint\").  Finally\n    # the system name \"TOS\" denotes a system which is actually not\n    # MiNT.  But MiNT is downward compatible to TOS, so this should\n    # be no problem.\n    atarist[e]:*MiNT:*:* | atarist[e]:*mint:*:* | atarist[e]:*TOS:*:*)\n\tGUESS=m68k-atari-mint$UNAME_RELEASE\n\t;;\n    atari*:*MiNT:*:* | atari*:*mint:*:* | atarist[e]:*TOS:*:*)\n\tGUESS=m68k-atari-mint$UNAME_RELEASE\n\t;;\n    *falcon*:*MiNT:*:* | *falcon*:*mint:*:* | *falcon*:*TOS:*:*)\n\tGUESS=m68k-atari-mint$UNAME_RELEASE\n\t;;\n    milan*:*MiNT:*:* | milan*:*mint:*:* | *milan*:*TOS:*:*)\n\tGUESS=m68k-milan-mint$UNAME_RELEASE\n\t;;\n    hades*:*MiNT:*:* | hades*:*mint:*:* | *hades*:*TOS:*:*)\n\tGUESS=m68k-hades-mint$UNAME_RELEASE\n\t;;\n    *:*MiNT:*:* | *:*mint:*:* | *:*TOS:*:*)\n\tGUESS=m68k-unknown-mint$UNAME_RELEASE\n\t;;\n    m68k:machten:*:*)\n\tGUESS=m68k-apple-machten$UNAME_RELEASE\n\t;;\n    powerpc:machten:*:*)\n\tGUESS=powerpc-apple-machten$UNAME_RELEASE\n\t;;\n    RISC*:Mach:*:*)\n\tGUESS=mips-dec-mach_bsd4.3\n\t;;\n    RISC*:ULTRIX:*:*)\n\tGUESS=mips-dec-ultrix$UNAME_RELEASE\n\t;;\n    VAX*:ULTRIX*:*:*)\n\tGUESS=vax-dec-ultrix$UNAME_RELEASE\n\t;;\n    2020:CLIX:*:* | 2430:CLIX:*:*)\n\tGUESS=clipper-intergraph-clix$UNAME_RELEASE\n\t;;\n    mips:*:*:UMIPS | mips:*:*:RISCos)\n\tset_cc_for_build\n\tsed 's/^\t//' << EOF > \"$dummy.c\"\n#ifdef __cplusplus\n#include <stdio.h>  /* for printf() prototype */\n\tint main (int argc, char *argv[]) {\n#else\n\tint main (argc, argv) int argc; char *argv[]; {\n#endif\n\t#if defined (host_mips) && defined (MIPSEB)\n\t#if defined (SYSTYPE_SYSV)\n\t  printf (\"mips-mips-riscos%ssysv\\\\n\", argv[1]); exit (0);\n\t#endif\n\t#if defined (SYSTYPE_SVR4)\n\t  printf (\"mips-mips-riscos%ssvr4\\\\n\", argv[1]); exit (0);\n\t#endif\n\t#if defined (SYSTYPE_BSD43) || defined(SYSTYPE_BSD)\n\t  printf (\"mips-mips-riscos%sbsd\\\\n\", argv[1]); exit (0);\n\t#endif\n\t#endif\n\t  exit (-1);\n\t}\nEOF\n\t$CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" &&\n\t  dummyarg=`echo \"$UNAME_RELEASE\" | sed -n 's/\\([0-9]*\\).*/\\1/p'` &&\n\t  SYSTEM_NAME=`\"$dummy\" \"$dummyarg\"` &&\n\t    { echo \"$SYSTEM_NAME\"; exit; }\n\tGUESS=mips-mips-riscos$UNAME_RELEASE\n\t;;\n    Motorola:PowerMAX_OS:*:*)\n\tGUESS=powerpc-motorola-powermax\n\t;;\n    Motorola:*:4.3:PL8-*)\n\tGUESS=powerpc-harris-powermax\n\t;;\n    Night_Hawk:*:*:PowerMAX_OS | Synergy:PowerMAX_OS:*:*)\n\tGUESS=powerpc-harris-powermax\n\t;;\n    Night_Hawk:Power_UNIX:*:*)\n\tGUESS=powerpc-harris-powerunix\n\t;;\n    m88k:CX/UX:7*:*)\n\tGUESS=m88k-harris-cxux7\n\t;;\n    m88k:*:4*:R4*)\n\tGUESS=m88k-motorola-sysv4\n\t;;\n    m88k:*:3*:R3*)\n\tGUESS=m88k-motorola-sysv3\n\t;;\n    AViiON:dgux:*:*)\n\t# DG/UX returns AViiON for all architectures\n\tUNAME_PROCESSOR=`/usr/bin/uname -p`\n\tif test \"$UNAME_PROCESSOR\" = mc88100 || test \"$UNAME_PROCESSOR\" = mc88110\n\tthen\n\t    if test \"$TARGET_BINARY_INTERFACE\"x = m88kdguxelfx || \\\n\t       test \"$TARGET_BINARY_INTERFACE\"x = x\n\t    then\n\t\tGUESS=m88k-dg-dgux$UNAME_RELEASE\n\t    else\n\t\tGUESS=m88k-dg-dguxbcs$UNAME_RELEASE\n\t    fi\n\telse\n\t    GUESS=i586-dg-dgux$UNAME_RELEASE\n\tfi\n\t;;\n    M88*:DolphinOS:*:*)\t# DolphinOS (SVR3)\n\tGUESS=m88k-dolphin-sysv3\n\t;;\n    M88*:*:R3*:*)\n\t# Delta 88k system running SVR3\n\tGUESS=m88k-motorola-sysv3\n\t;;\n    XD88*:*:*:*) # Tektronix XD88 system running UTekV (SVR3)\n\tGUESS=m88k-tektronix-sysv3\n\t;;\n    Tek43[0-9][0-9]:UTek:*:*) # Tektronix 4300 system running UTek (BSD)\n\tGUESS=m68k-tektronix-bsd\n\t;;\n    *:IRIX*:*:*)\n\tIRIX_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/-/_/g'`\n\tGUESS=mips-sgi-irix$IRIX_REL\n\t;;\n    ????????:AIX?:[12].1:2)   # AIX 2.2.1 or AIX 2.1.1 is RT/PC AIX.\n\tGUESS=romp-ibm-aix    # uname -m gives an 8 hex-code CPU id\n\t;;                    # Note that: echo \"'`uname -s`'\" gives 'AIX '\n    i*86:AIX:*:*)\n\tGUESS=i386-ibm-aix\n\t;;\n    ia64:AIX:*:*)\n\tif test -x /usr/bin/oslevel ; then\n\t\tIBM_REV=`/usr/bin/oslevel`\n\telse\n\t\tIBM_REV=$UNAME_VERSION.$UNAME_RELEASE\n\tfi\n\tGUESS=$UNAME_MACHINE-ibm-aix$IBM_REV\n\t;;\n    *:AIX:2:3)\n\tif grep bos325 /usr/include/stdio.h >/dev/null 2>&1; then\n\t\tset_cc_for_build\n\t\tsed 's/^\t\t//' << EOF > \"$dummy.c\"\n\t\t#include <sys/systemcfg.h>\n\n\t\tmain()\n\t\t\t{\n\t\t\tif (!__power_pc())\n\t\t\t\texit(1);\n\t\t\tputs(\"powerpc-ibm-aix3.2.5\");\n\t\t\texit(0);\n\t\t\t}\nEOF\n\t\tif $CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" && SYSTEM_NAME=`\"$dummy\"`\n\t\tthen\n\t\t\tGUESS=$SYSTEM_NAME\n\t\telse\n\t\t\tGUESS=rs6000-ibm-aix3.2.5\n\t\tfi\n\telif grep bos324 /usr/include/stdio.h >/dev/null 2>&1; then\n\t\tGUESS=rs6000-ibm-aix3.2.4\n\telse\n\t\tGUESS=rs6000-ibm-aix3.2\n\tfi\n\t;;\n    *:AIX:*:[4567])\n\tIBM_CPU_ID=`/usr/sbin/lsdev -C -c processor -S available | sed 1q | awk '{ print $1 }'`\n\tif /usr/sbin/lsattr -El \"$IBM_CPU_ID\" | grep ' POWER' >/dev/null 2>&1; then\n\t\tIBM_ARCH=rs6000\n\telse\n\t\tIBM_ARCH=powerpc\n\tfi\n\tif test -x /usr/bin/lslpp ; then\n\t\tIBM_REV=`/usr/bin/lslpp -Lqc bos.rte.libc | \\\n\t\t\t   awk -F: '{ print $3 }' | sed s/[0-9]*$/0/`\n\telse\n\t\tIBM_REV=$UNAME_VERSION.$UNAME_RELEASE\n\tfi\n\tGUESS=$IBM_ARCH-ibm-aix$IBM_REV\n\t;;\n    *:AIX:*:*)\n\tGUESS=rs6000-ibm-aix\n\t;;\n    ibmrt:4.4BSD:*|romp-ibm:4.4BSD:*)\n\tGUESS=romp-ibm-bsd4.4\n\t;;\n    ibmrt:*BSD:*|romp-ibm:BSD:*)            # covers RT/PC BSD and\n\tGUESS=romp-ibm-bsd$UNAME_RELEASE    # 4.3 with uname added to\n\t;;                                  # report: romp-ibm BSD 4.3\n    *:BOSX:*:*)\n\tGUESS=rs6000-bull-bosx\n\t;;\n    DPX/2?00:B.O.S.:*:*)\n\tGUESS=m68k-bull-sysv3\n\t;;\n    9000/[34]??:4.3bsd:1.*:*)\n\tGUESS=m68k-hp-bsd\n\t;;\n    hp300:4.4BSD:*:* | 9000/[34]??:4.3bsd:2.*:*)\n\tGUESS=m68k-hp-bsd4.4\n\t;;\n    9000/[34678]??:HP-UX:*:*)\n\tHPUX_REV=`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*.[0B]*//'`\n\tcase $UNAME_MACHINE in\n\t    9000/31?)            HP_ARCH=m68000 ;;\n\t    9000/[34]??)         HP_ARCH=m68k ;;\n\t    9000/[678][0-9][0-9])\n\t\tif test -x /usr/bin/getconf; then\n\t\t    sc_cpu_version=`/usr/bin/getconf SC_CPU_VERSION 2>/dev/null`\n\t\t    sc_kernel_bits=`/usr/bin/getconf SC_KERNEL_BITS 2>/dev/null`\n\t\t    case $sc_cpu_version in\n\t\t      523) HP_ARCH=hppa1.0 ;; # CPU_PA_RISC1_0\n\t\t      528) HP_ARCH=hppa1.1 ;; # CPU_PA_RISC1_1\n\t\t      532)                      # CPU_PA_RISC2_0\n\t\t\tcase $sc_kernel_bits in\n\t\t\t  32) HP_ARCH=hppa2.0n ;;\n\t\t\t  64) HP_ARCH=hppa2.0w ;;\n\t\t\t  '') HP_ARCH=hppa2.0 ;;   # HP-UX 10.20\n\t\t\tesac ;;\n\t\t    esac\n\t\tfi\n\t\tif test \"$HP_ARCH\" = \"\"; then\n\t\t    set_cc_for_build\n\t\t    sed 's/^\t\t//' << EOF > \"$dummy.c\"\n\n\t\t#define _HPUX_SOURCE\n\t\t#include <stdlib.h>\n\t\t#include <unistd.h>\n\n\t\tint main ()\n\t\t{\n\t\t#if defined(_SC_KERNEL_BITS)\n\t\t    long bits = sysconf(_SC_KERNEL_BITS);\n\t\t#endif\n\t\t    long cpu  = sysconf (_SC_CPU_VERSION);\n\n\t\t    switch (cpu)\n\t\t\t{\n\t\t\tcase CPU_PA_RISC1_0: puts (\"hppa1.0\"); break;\n\t\t\tcase CPU_PA_RISC1_1: puts (\"hppa1.1\"); break;\n\t\t\tcase CPU_PA_RISC2_0:\n\t\t#if defined(_SC_KERNEL_BITS)\n\t\t\t    switch (bits)\n\t\t\t\t{\n\t\t\t\tcase 64: puts (\"hppa2.0w\"); break;\n\t\t\t\tcase 32: puts (\"hppa2.0n\"); break;\n\t\t\t\tdefault: puts (\"hppa2.0\"); break;\n\t\t\t\t} break;\n\t\t#else  /* !defined(_SC_KERNEL_BITS) */\n\t\t\t    puts (\"hppa2.0\"); break;\n\t\t#endif\n\t\t\tdefault: puts (\"hppa1.0\"); break;\n\t\t\t}\n\t\t    exit (0);\n\t\t}\nEOF\n\t\t    (CCOPTS=\"\" $CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" 2>/dev/null) && HP_ARCH=`\"$dummy\"`\n\t\t    test -z \"$HP_ARCH\" && HP_ARCH=hppa\n\t\tfi ;;\n\tesac\n\tif test \"$HP_ARCH\" = hppa2.0w\n\tthen\n\t    set_cc_for_build\n\n\t    # hppa2.0w-hp-hpux* has a 64-bit kernel and a compiler generating\n\t    # 32-bit code.  hppa64-hp-hpux* has the same kernel and a compiler\n\t    # generating 64-bit code.  GNU and HP use different nomenclature:\n\t    #\n\t    # $ CC_FOR_BUILD=cc ./config.guess\n\t    # => hppa2.0w-hp-hpux11.23\n\t    # $ CC_FOR_BUILD=\"cc +DA2.0w\" ./config.guess\n\t    # => hppa64-hp-hpux11.23\n\n\t    if echo __LP64__ | (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) |\n\t\tgrep -q __LP64__\n\t    then\n\t\tHP_ARCH=hppa2.0w\n\t    else\n\t\tHP_ARCH=hppa64\n\t    fi\n\tfi\n\tGUESS=$HP_ARCH-hp-hpux$HPUX_REV\n\t;;\n    ia64:HP-UX:*:*)\n\tHPUX_REV=`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*.[0B]*//'`\n\tGUESS=ia64-hp-hpux$HPUX_REV\n\t;;\n    3050*:HI-UX:*:*)\n\tset_cc_for_build\n\tsed 's/^\t//' << EOF > \"$dummy.c\"\n\t#include <unistd.h>\n\tint\n\tmain ()\n\t{\n\t  long cpu = sysconf (_SC_CPU_VERSION);\n\t  /* The order matters, because CPU_IS_HP_MC68K erroneously returns\n\t     true for CPU_PA_RISC1_0.  CPU_IS_PA_RISC returns correct\n\t     results, however.  */\n\t  if (CPU_IS_PA_RISC (cpu))\n\t    {\n\t      switch (cpu)\n\t\t{\n\t\t  case CPU_PA_RISC1_0: puts (\"hppa1.0-hitachi-hiuxwe2\"); break;\n\t\t  case CPU_PA_RISC1_1: puts (\"hppa1.1-hitachi-hiuxwe2\"); break;\n\t\t  case CPU_PA_RISC2_0: puts (\"hppa2.0-hitachi-hiuxwe2\"); break;\n\t\t  default: puts (\"hppa-hitachi-hiuxwe2\"); break;\n\t\t}\n\t    }\n\t  else if (CPU_IS_HP_MC68K (cpu))\n\t    puts (\"m68k-hitachi-hiuxwe2\");\n\t  else puts (\"unknown-hitachi-hiuxwe2\");\n\t  exit (0);\n\t}\nEOF\n\t$CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" && SYSTEM_NAME=`\"$dummy\"` &&\n\t\t{ echo \"$SYSTEM_NAME\"; exit; }\n\tGUESS=unknown-hitachi-hiuxwe2\n\t;;\n    9000/7??:4.3bsd:*:* | 9000/8?[79]:4.3bsd:*:*)\n\tGUESS=hppa1.1-hp-bsd\n\t;;\n    9000/8??:4.3bsd:*:*)\n\tGUESS=hppa1.0-hp-bsd\n\t;;\n    *9??*:MPE/iX:*:* | *3000*:MPE/iX:*:*)\n\tGUESS=hppa1.0-hp-mpeix\n\t;;\n    hp7??:OSF1:*:* | hp8?[79]:OSF1:*:*)\n\tGUESS=hppa1.1-hp-osf\n\t;;\n    hp8??:OSF1:*:*)\n\tGUESS=hppa1.0-hp-osf\n\t;;\n    i*86:OSF1:*:*)\n\tif test -x /usr/sbin/sysversion ; then\n\t    GUESS=$UNAME_MACHINE-unknown-osf1mk\n\telse\n\t    GUESS=$UNAME_MACHINE-unknown-osf1\n\tfi\n\t;;\n    parisc*:Lites*:*:*)\n\tGUESS=hppa1.1-hp-lites\n\t;;\n    C1*:ConvexOS:*:* | convex:ConvexOS:C1*:*)\n\tGUESS=c1-convex-bsd\n\t;;\n    C2*:ConvexOS:*:* | convex:ConvexOS:C2*:*)\n\tif getsysinfo -f scalar_acc\n\tthen echo c32-convex-bsd\n\telse echo c2-convex-bsd\n\tfi\n\texit ;;\n    C34*:ConvexOS:*:* | convex:ConvexOS:C34*:*)\n\tGUESS=c34-convex-bsd\n\t;;\n    C38*:ConvexOS:*:* | convex:ConvexOS:C38*:*)\n\tGUESS=c38-convex-bsd\n\t;;\n    C4*:ConvexOS:*:* | convex:ConvexOS:C4*:*)\n\tGUESS=c4-convex-bsd\n\t;;\n    CRAY*Y-MP:*:*:*)\n\tCRAY_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'`\n\tGUESS=ymp-cray-unicos$CRAY_REL\n\t;;\n    CRAY*[A-Z]90:*:*:*)\n\techo \"$UNAME_MACHINE\"-cray-unicos\"$UNAME_RELEASE\" \\\n\t| sed -e 's/CRAY.*\\([A-Z]90\\)/\\1/' \\\n\t      -e y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/ \\\n\t      -e 's/\\.[^.]*$/.X/'\n\texit ;;\n    CRAY*TS:*:*:*)\n\tCRAY_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'`\n\tGUESS=t90-cray-unicos$CRAY_REL\n\t;;\n    CRAY*T3E:*:*:*)\n\tCRAY_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'`\n\tGUESS=alphaev5-cray-unicosmk$CRAY_REL\n\t;;\n    CRAY*SV1:*:*:*)\n\tCRAY_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'`\n\tGUESS=sv1-cray-unicos$CRAY_REL\n\t;;\n    *:UNICOS/mp:*:*)\n\tCRAY_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'`\n\tGUESS=craynv-cray-unicosmp$CRAY_REL\n\t;;\n    F30[01]:UNIX_System_V:*:* | F700:UNIX_System_V:*:*)\n\tFUJITSU_PROC=`uname -m | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`\n\tFUJITSU_SYS=`uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///'`\n\tFUJITSU_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/ /_/'`\n\tGUESS=${FUJITSU_PROC}-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\n\t;;\n    5000:UNIX_System_V:4.*:*)\n\tFUJITSU_SYS=`uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///'`\n\tFUJITSU_REL=`echo \"$UNAME_RELEASE\" | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/ /_/'`\n\tGUESS=sparc-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\n\t;;\n    i*86:BSD/386:*:* | i*86:BSD/OS:*:* | *:Ascend\\ Embedded/OS:*:*)\n\tGUESS=$UNAME_MACHINE-pc-bsdi$UNAME_RELEASE\n\t;;\n    sparc*:BSD/OS:*:*)\n\tGUESS=sparc-unknown-bsdi$UNAME_RELEASE\n\t;;\n    *:BSD/OS:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-bsdi$UNAME_RELEASE\n\t;;\n    arm:FreeBSD:*:*)\n\tUNAME_PROCESSOR=`uname -p`\n\tset_cc_for_build\n\tif echo __ARM_PCS_VFP | $CC_FOR_BUILD -E - 2>/dev/null \\\n\t    | grep -q __ARM_PCS_VFP\n\tthen\n\t    FREEBSD_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[-(].*//'`\n\t    GUESS=$UNAME_PROCESSOR-unknown-freebsd$FREEBSD_REL-gnueabi\n\telse\n\t    FREEBSD_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[-(].*//'`\n\t    GUESS=$UNAME_PROCESSOR-unknown-freebsd$FREEBSD_REL-gnueabihf\n\tfi\n\t;;\n    *:FreeBSD:*:*)\n\tUNAME_PROCESSOR=`/usr/bin/uname -p`\n\tcase $UNAME_PROCESSOR in\n\t    amd64)\n\t\tUNAME_PROCESSOR=x86_64 ;;\n\t    i386)\n\t\tUNAME_PROCESSOR=i586 ;;\n\tesac\n\tFREEBSD_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[-(].*//'`\n\tGUESS=$UNAME_PROCESSOR-unknown-freebsd$FREEBSD_REL\n\t;;\n    i*:CYGWIN*:*)\n\tGUESS=$UNAME_MACHINE-pc-cygwin\n\t;;\n    *:MINGW64*:*)\n\tGUESS=$UNAME_MACHINE-pc-mingw64\n\t;;\n    *:MINGW*:*)\n\tGUESS=$UNAME_MACHINE-pc-mingw32\n\t;;\n    *:MSYS*:*)\n\tGUESS=$UNAME_MACHINE-pc-msys\n\t;;\n    i*:PW*:*)\n\tGUESS=$UNAME_MACHINE-pc-pw32\n\t;;\n    *:SerenityOS:*:*)\n        GUESS=$UNAME_MACHINE-pc-serenity\n        ;;\n    *:Interix*:*)\n\tcase $UNAME_MACHINE in\n\t    x86)\n\t\tGUESS=i586-pc-interix$UNAME_RELEASE\n\t\t;;\n\t    authenticamd | genuineintel | EM64T)\n\t\tGUESS=x86_64-unknown-interix$UNAME_RELEASE\n\t\t;;\n\t    IA64)\n\t\tGUESS=ia64-unknown-interix$UNAME_RELEASE\n\t\t;;\n\tesac ;;\n    i*:UWIN*:*)\n\tGUESS=$UNAME_MACHINE-pc-uwin\n\t;;\n    amd64:CYGWIN*:*:* | x86_64:CYGWIN*:*:*)\n\tGUESS=x86_64-pc-cygwin\n\t;;\n    prep*:SunOS:5.*:*)\n\tSUN_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\n\tGUESS=powerpcle-unknown-solaris2$SUN_REL\n\t;;\n    *:GNU:*:*)\n\t# the GNU system\n\tGNU_ARCH=`echo \"$UNAME_MACHINE\" | sed -e 's,[-/].*$,,'`\n\tGNU_REL=`echo \"$UNAME_RELEASE\" | sed -e 's,/.*$,,'`\n\tGUESS=$GNU_ARCH-unknown-$LIBC$GNU_REL\n\t;;\n    *:GNU/*:*:*)\n\t# other systems with GNU libc and userland\n\tGNU_SYS=`echo \"$UNAME_SYSTEM\" | sed 's,^[^/]*/,,' | tr \"[:upper:]\" \"[:lower:]\"`\n\tGNU_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[-(].*//'`\n\tGUESS=$UNAME_MACHINE-unknown-$GNU_SYS$GNU_REL-$LIBC\n\t;;\n    x86_64:[Mm]anagarm:*:*|i?86:[Mm]anagarm:*:*)\n\tGUESS=\"$UNAME_MACHINE-pc-managarm-mlibc\"\n\t;;\n    *:[Mm]anagarm:*:*)\n\tGUESS=\"$UNAME_MACHINE-unknown-managarm-mlibc\"\n\t;;\n    *:Minix:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-minix\n\t;;\n    aarch64:Linux:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-linux-$LIBC\n\t;;\n    aarch64_be:Linux:*:*)\n\tUNAME_MACHINE=aarch64_be\n\tGUESS=$UNAME_MACHINE-unknown-linux-$LIBC\n\t;;\n    alpha:Linux:*:*)\n\tcase `sed -n '/^cpu model/s/^.*: \\(.*\\)/\\1/p' /proc/cpuinfo 2>/dev/null` in\n\t  EV5)   UNAME_MACHINE=alphaev5 ;;\n\t  EV56)  UNAME_MACHINE=alphaev56 ;;\n\t  PCA56) UNAME_MACHINE=alphapca56 ;;\n\t  PCA57) UNAME_MACHINE=alphapca56 ;;\n\t  EV6)   UNAME_MACHINE=alphaev6 ;;\n\t  EV67)  UNAME_MACHINE=alphaev67 ;;\n\t  EV68*) UNAME_MACHINE=alphaev68 ;;\n\tesac\n\tobjdump --private-headers /bin/sh | grep -q ld.so.1\n\tif test \"$?\" = 0 ; then LIBC=gnulibc1 ; fi\n\tGUESS=$UNAME_MACHINE-unknown-linux-$LIBC\n\t;;\n    arc:Linux:*:* | arceb:Linux:*:* | arc32:Linux:*:* | arc64:Linux:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-linux-$LIBC\n\t;;\n    arm*:Linux:*:*)\n\tset_cc_for_build\n\tif echo __ARM_EABI__ | $CC_FOR_BUILD -E - 2>/dev/null \\\n\t    | grep -q __ARM_EABI__\n\tthen\n\t    GUESS=$UNAME_MACHINE-unknown-linux-$LIBC\n\telse\n\t    if echo __ARM_PCS_VFP | $CC_FOR_BUILD -E - 2>/dev/null \\\n\t\t| grep -q __ARM_PCS_VFP\n\t    then\n\t\tGUESS=$UNAME_MACHINE-unknown-linux-${LIBC}eabi\n\t    else\n\t\tGUESS=$UNAME_MACHINE-unknown-linux-${LIBC}eabihf\n\t    fi\n\tfi\n\t;;\n    avr32*:Linux:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-linux-$LIBC\n\t;;\n    cris:Linux:*:*)\n\tGUESS=$UNAME_MACHINE-axis-linux-$LIBC\n\t;;\n    crisv32:Linux:*:*)\n\tGUESS=$UNAME_MACHINE-axis-linux-$LIBC\n\t;;\n    e2k:Linux:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-linux-$LIBC\n\t;;\n    frv:Linux:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-linux-$LIBC\n\t;;\n    hexagon:Linux:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-linux-$LIBC\n\t;;\n    i*86:Linux:*:*)\n\tGUESS=$UNAME_MACHINE-pc-linux-$LIBC\n\t;;\n    ia64:Linux:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-linux-$LIBC\n\t;;\n    k1om:Linux:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-linux-$LIBC\n\t;;\n    loongarch32:Linux:*:* | loongarch64:Linux:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-linux-$LIBC\n\t;;\n    m32r*:Linux:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-linux-$LIBC\n\t;;\n    m68*:Linux:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-linux-$LIBC\n\t;;\n    mips:Linux:*:* | mips64:Linux:*:*)\n\tset_cc_for_build\n\tIS_GLIBC=0\n\ttest x\"${LIBC}\" = xgnu && IS_GLIBC=1\n\tsed 's/^\t//' << EOF > \"$dummy.c\"\n\t#undef CPU\n\t#undef mips\n\t#undef mipsel\n\t#undef mips64\n\t#undef mips64el\n\t#if ${IS_GLIBC} && defined(_ABI64)\n\tLIBCABI=gnuabi64\n\t#else\n\t#if ${IS_GLIBC} && defined(_ABIN32)\n\tLIBCABI=gnuabin32\n\t#else\n\tLIBCABI=${LIBC}\n\t#endif\n\t#endif\n\n\t#if ${IS_GLIBC} && defined(__mips64) && defined(__mips_isa_rev) && __mips_isa_rev>=6\n\tCPU=mipsisa64r6\n\t#else\n\t#if ${IS_GLIBC} && !defined(__mips64) && defined(__mips_isa_rev) && __mips_isa_rev>=6\n\tCPU=mipsisa32r6\n\t#else\n\t#if defined(__mips64)\n\tCPU=mips64\n\t#else\n\tCPU=mips\n\t#endif\n\t#endif\n\t#endif\n\n\t#if defined(__MIPSEL__) || defined(__MIPSEL) || defined(_MIPSEL) || defined(MIPSEL)\n\tMIPS_ENDIAN=el\n\t#else\n\t#if defined(__MIPSEB__) || defined(__MIPSEB) || defined(_MIPSEB) || defined(MIPSEB)\n\tMIPS_ENDIAN=\n\t#else\n\tMIPS_ENDIAN=\n\t#endif\n\t#endif\nEOF\n\tcc_set_vars=`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^CPU\\|^MIPS_ENDIAN\\|^LIBCABI'`\n\teval \"$cc_set_vars\"\n\ttest \"x$CPU\" != x && { echo \"$CPU${MIPS_ENDIAN}-unknown-linux-$LIBCABI\"; exit; }\n\t;;\n    mips64el:Linux:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-linux-$LIBC\n\t;;\n    openrisc*:Linux:*:*)\n\tGUESS=or1k-unknown-linux-$LIBC\n\t;;\n    or32:Linux:*:* | or1k*:Linux:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-linux-$LIBC\n\t;;\n    padre:Linux:*:*)\n\tGUESS=sparc-unknown-linux-$LIBC\n\t;;\n    parisc64:Linux:*:* | hppa64:Linux:*:*)\n\tGUESS=hppa64-unknown-linux-$LIBC\n\t;;\n    parisc:Linux:*:* | hppa:Linux:*:*)\n\t# Look for CPU level\n\tcase `grep '^cpu[^a-z]*:' /proc/cpuinfo 2>/dev/null | cut -d' ' -f2` in\n\t  PA7*) GUESS=hppa1.1-unknown-linux-$LIBC ;;\n\t  PA8*) GUESS=hppa2.0-unknown-linux-$LIBC ;;\n\t  *)    GUESS=hppa-unknown-linux-$LIBC ;;\n\tesac\n\t;;\n    ppc64:Linux:*:*)\n\tGUESS=powerpc64-unknown-linux-$LIBC\n\t;;\n    ppc:Linux:*:*)\n\tGUESS=powerpc-unknown-linux-$LIBC\n\t;;\n    ppc64le:Linux:*:*)\n\tGUESS=powerpc64le-unknown-linux-$LIBC\n\t;;\n    ppcle:Linux:*:*)\n\tGUESS=powerpcle-unknown-linux-$LIBC\n\t;;\n    riscv32:Linux:*:* | riscv32be:Linux:*:* | riscv64:Linux:*:* | riscv64be:Linux:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-linux-$LIBC\n\t;;\n    s390:Linux:*:* | s390x:Linux:*:*)\n\tGUESS=$UNAME_MACHINE-ibm-linux-$LIBC\n\t;;\n    sh64*:Linux:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-linux-$LIBC\n\t;;\n    sh*:Linux:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-linux-$LIBC\n\t;;\n    sparc:Linux:*:* | sparc64:Linux:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-linux-$LIBC\n\t;;\n    tile*:Linux:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-linux-$LIBC\n\t;;\n    vax:Linux:*:*)\n\tGUESS=$UNAME_MACHINE-dec-linux-$LIBC\n\t;;\n    x86_64:Linux:*:*)\n\tset_cc_for_build\n\tCPU=$UNAME_MACHINE\n\tLIBCABI=$LIBC\n\tif test \"$CC_FOR_BUILD\" != no_compiler_found; then\n\t    ABI=64\n\t    sed 's/^\t    //' << EOF > \"$dummy.c\"\n\t    #ifdef __i386__\n\t    ABI=x86\n\t    #else\n\t    #ifdef __ILP32__\n\t    ABI=x32\n\t    #endif\n\t    #endif\nEOF\n\t    cc_set_abi=`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^ABI' | sed 's, ,,g'`\n\t    eval \"$cc_set_abi\"\n\t    case $ABI in\n\t\tx86) CPU=i686 ;;\n\t\tx32) LIBCABI=${LIBC}x32 ;;\n\t    esac\n\tfi\n\tGUESS=$CPU-pc-linux-$LIBCABI\n\t;;\n    xtensa*:Linux:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-linux-$LIBC\n\t;;\n    i*86:DYNIX/ptx:4*:*)\n\t# ptx 4.0 does uname -s correctly, with DYNIX/ptx in there.\n\t# earlier versions are messed up and put the nodename in both\n\t# sysname and nodename.\n\tGUESS=i386-sequent-sysv4\n\t;;\n    i*86:UNIX_SV:4.2MP:2.*)\n\t# Unixware is an offshoot of SVR4, but it has its own version\n\t# number series starting with 2...\n\t# I am not positive that other SVR4 systems won't match this,\n\t# I just have to hope.  -- rms.\n\t# Use sysv4.2uw... so that sysv4* matches it.\n\tGUESS=$UNAME_MACHINE-pc-sysv4.2uw$UNAME_VERSION\n\t;;\n    i*86:OS/2:*:*)\n\t# If we were able to find `uname', then EMX Unix compatibility\n\t# is probably installed.\n\tGUESS=$UNAME_MACHINE-pc-os2-emx\n\t;;\n    i*86:XTS-300:*:STOP)\n\tGUESS=$UNAME_MACHINE-unknown-stop\n\t;;\n    i*86:atheos:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-atheos\n\t;;\n    i*86:syllable:*:*)\n\tGUESS=$UNAME_MACHINE-pc-syllable\n\t;;\n    i*86:LynxOS:2.*:* | i*86:LynxOS:3.[01]*:* | i*86:LynxOS:4.[02]*:*)\n\tGUESS=i386-unknown-lynxos$UNAME_RELEASE\n\t;;\n    i*86:*DOS:*:*)\n\tGUESS=$UNAME_MACHINE-pc-msdosdjgpp\n\t;;\n    i*86:*:4.*:*)\n\tUNAME_REL=`echo \"$UNAME_RELEASE\" | sed 's/\\/MP$//'`\n\tif grep Novell /usr/include/link.h >/dev/null 2>/dev/null; then\n\t\tGUESS=$UNAME_MACHINE-univel-sysv$UNAME_REL\n\telse\n\t\tGUESS=$UNAME_MACHINE-pc-sysv$UNAME_REL\n\tfi\n\t;;\n    i*86:*:5:[678]*)\n\t# UnixWare 7.x, OpenUNIX and OpenServer 6.\n\tcase `/bin/uname -X | grep \"^Machine\"` in\n\t    *486*)\t     UNAME_MACHINE=i486 ;;\n\t    *Pentium)\t     UNAME_MACHINE=i586 ;;\n\t    *Pent*|*Celeron) UNAME_MACHINE=i686 ;;\n\tesac\n\tGUESS=$UNAME_MACHINE-unknown-sysv${UNAME_RELEASE}${UNAME_SYSTEM}${UNAME_VERSION}\n\t;;\n    i*86:*:3.2:*)\n\tif test -f /usr/options/cb.name; then\n\t\tUNAME_REL=`sed -n 's/.*Version //p' </usr/options/cb.name`\n\t\tGUESS=$UNAME_MACHINE-pc-isc$UNAME_REL\n\telif /bin/uname -X 2>/dev/null >/dev/null ; then\n\t\tUNAME_REL=`(/bin/uname -X|grep Release|sed -e 's/.*= //')`\n\t\t(/bin/uname -X|grep i80486 >/dev/null) && UNAME_MACHINE=i486\n\t\t(/bin/uname -X|grep '^Machine.*Pentium' >/dev/null) \\\n\t\t\t&& UNAME_MACHINE=i586\n\t\t(/bin/uname -X|grep '^Machine.*Pent *II' >/dev/null) \\\n\t\t\t&& UNAME_MACHINE=i686\n\t\t(/bin/uname -X|grep '^Machine.*Pentium Pro' >/dev/null) \\\n\t\t\t&& UNAME_MACHINE=i686\n\t\tGUESS=$UNAME_MACHINE-pc-sco$UNAME_REL\n\telse\n\t\tGUESS=$UNAME_MACHINE-pc-sysv32\n\tfi\n\t;;\n    pc:*:*:*)\n\t# Left here for compatibility:\n\t# uname -m prints for DJGPP always 'pc', but it prints nothing about\n\t# the processor, so we play safe by assuming i586.\n\t# Note: whatever this is, it MUST be the same as what config.sub\n\t# prints for the \"djgpp\" host, or else GDB configure will decide that\n\t# this is a cross-build.\n\tGUESS=i586-pc-msdosdjgpp\n\t;;\n    Intel:Mach:3*:*)\n\tGUESS=i386-pc-mach3\n\t;;\n    paragon:*:*:*)\n\tGUESS=i860-intel-osf1\n\t;;\n    i860:*:4.*:*) # i860-SVR4\n\tif grep Stardent /usr/include/sys/uadmin.h >/dev/null 2>&1 ; then\n\t  GUESS=i860-stardent-sysv$UNAME_RELEASE    # Stardent Vistra i860-SVR4\n\telse # Add other i860-SVR4 vendors below as they are discovered.\n\t  GUESS=i860-unknown-sysv$UNAME_RELEASE     # Unknown i860-SVR4\n\tfi\n\t;;\n    mini*:CTIX:SYS*5:*)\n\t# \"miniframe\"\n\tGUESS=m68010-convergent-sysv\n\t;;\n    mc68k:UNIX:SYSTEM5:3.51m)\n\tGUESS=m68k-convergent-sysv\n\t;;\n    M680?0:D-NIX:5.3:*)\n\tGUESS=m68k-diab-dnix\n\t;;\n    M68*:*:R3V[5678]*:*)\n\ttest -r /sysV68 && { echo 'm68k-motorola-sysv'; exit; } ;;\n    3[345]??:*:4.0:3.0 | 3[34]??A:*:4.0:3.0 | 3[34]??,*:*:4.0:3.0 | 3[34]??/*:*:4.0:3.0 | 4400:*:4.0:3.0 | 4850:*:4.0:3.0 | SKA40:*:4.0:3.0 | SDS2:*:4.0:3.0 | SHG2:*:4.0:3.0 | S7501*:*:4.0:3.0)\n\tOS_REL=''\n\ttest -r /etc/.relid \\\n\t&& OS_REL=.`sed -n 's/[^ ]* [^ ]* \\([0-9][0-9]\\).*/\\1/p' < /etc/.relid`\n\t/bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n\t  && { echo i486-ncr-sysv4.3\"$OS_REL\"; exit; }\n\t/bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \\\n\t  && { echo i586-ncr-sysv4.3\"$OS_REL\"; exit; } ;;\n    3[34]??:*:4.0:* | 3[34]??,*:*:4.0:*)\n\t/bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n\t  && { echo i486-ncr-sysv4; exit; } ;;\n    NCR*:*:4.2:* | MPRAS*:*:4.2:*)\n\tOS_REL='.3'\n\ttest -r /etc/.relid \\\n\t    && OS_REL=.`sed -n 's/[^ ]* [^ ]* \\([0-9][0-9]\\).*/\\1/p' < /etc/.relid`\n\t/bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n\t    && { echo i486-ncr-sysv4.3\"$OS_REL\"; exit; }\n\t/bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \\\n\t    && { echo i586-ncr-sysv4.3\"$OS_REL\"; exit; }\n\t/bin/uname -p 2>/dev/null | /bin/grep pteron >/dev/null \\\n\t    && { echo i586-ncr-sysv4.3\"$OS_REL\"; exit; } ;;\n    m68*:LynxOS:2.*:* | m68*:LynxOS:3.0*:*)\n\tGUESS=m68k-unknown-lynxos$UNAME_RELEASE\n\t;;\n    mc68030:UNIX_System_V:4.*:*)\n\tGUESS=m68k-atari-sysv4\n\t;;\n    TSUNAMI:LynxOS:2.*:*)\n\tGUESS=sparc-unknown-lynxos$UNAME_RELEASE\n\t;;\n    rs6000:LynxOS:2.*:*)\n\tGUESS=rs6000-unknown-lynxos$UNAME_RELEASE\n\t;;\n    PowerPC:LynxOS:2.*:* | PowerPC:LynxOS:3.[01]*:* | PowerPC:LynxOS:4.[02]*:*)\n\tGUESS=powerpc-unknown-lynxos$UNAME_RELEASE\n\t;;\n    SM[BE]S:UNIX_SV:*:*)\n\tGUESS=mips-dde-sysv$UNAME_RELEASE\n\t;;\n    RM*:ReliantUNIX-*:*:*)\n\tGUESS=mips-sni-sysv4\n\t;;\n    RM*:SINIX-*:*:*)\n\tGUESS=mips-sni-sysv4\n\t;;\n    *:SINIX-*:*:*)\n\tif uname -p 2>/dev/null >/dev/null ; then\n\t\tUNAME_MACHINE=`(uname -p) 2>/dev/null`\n\t\tGUESS=$UNAME_MACHINE-sni-sysv4\n\telse\n\t\tGUESS=ns32k-sni-sysv\n\tfi\n\t;;\n    PENTIUM:*:4.0*:*)\t# Unisys `ClearPath HMP IX 4000' SVR4/MP effort\n\t\t\t# says <Richard.M.Bartel@ccMail.Census.GOV>\n\tGUESS=i586-unisys-sysv4\n\t;;\n    *:UNIX_System_V:4*:FTX*)\n\t# From Gerald Hewes <hewes@openmarket.com>.\n\t# How about differentiating between stratus architectures? -djm\n\tGUESS=hppa1.1-stratus-sysv4\n\t;;\n    *:*:*:FTX*)\n\t# From seanf@swdc.stratus.com.\n\tGUESS=i860-stratus-sysv4\n\t;;\n    i*86:VOS:*:*)\n\t# From Paul.Green@stratus.com.\n\tGUESS=$UNAME_MACHINE-stratus-vos\n\t;;\n    *:VOS:*:*)\n\t# From Paul.Green@stratus.com.\n\tGUESS=hppa1.1-stratus-vos\n\t;;\n    mc68*:A/UX:*:*)\n\tGUESS=m68k-apple-aux$UNAME_RELEASE\n\t;;\n    news*:NEWS-OS:6*:*)\n\tGUESS=mips-sony-newsos6\n\t;;\n    R[34]000:*System_V*:*:* | R4000:UNIX_SYSV:*:* | R*000:UNIX_SV:*:*)\n\tif test -d /usr/nec; then\n\t\tGUESS=mips-nec-sysv$UNAME_RELEASE\n\telse\n\t\tGUESS=mips-unknown-sysv$UNAME_RELEASE\n\tfi\n\t;;\n    BeBox:BeOS:*:*)\t# BeOS running on hardware made by Be, PPC only.\n\tGUESS=powerpc-be-beos\n\t;;\n    BeMac:BeOS:*:*)\t# BeOS running on Mac or Mac clone, PPC only.\n\tGUESS=powerpc-apple-beos\n\t;;\n    BePC:BeOS:*:*)\t# BeOS running on Intel PC compatible.\n\tGUESS=i586-pc-beos\n\t;;\n    BePC:Haiku:*:*)\t# Haiku running on Intel PC compatible.\n\tGUESS=i586-pc-haiku\n\t;;\n    ppc:Haiku:*:*)\t# Haiku running on Apple PowerPC\n\tGUESS=powerpc-apple-haiku\n\t;;\n    *:Haiku:*:*)\t# Haiku modern gcc (not bound by BeOS compat)\n\tGUESS=$UNAME_MACHINE-unknown-haiku\n\t;;\n    SX-4:SUPER-UX:*:*)\n\tGUESS=sx4-nec-superux$UNAME_RELEASE\n\t;;\n    SX-5:SUPER-UX:*:*)\n\tGUESS=sx5-nec-superux$UNAME_RELEASE\n\t;;\n    SX-6:SUPER-UX:*:*)\n\tGUESS=sx6-nec-superux$UNAME_RELEASE\n\t;;\n    SX-7:SUPER-UX:*:*)\n\tGUESS=sx7-nec-superux$UNAME_RELEASE\n\t;;\n    SX-8:SUPER-UX:*:*)\n\tGUESS=sx8-nec-superux$UNAME_RELEASE\n\t;;\n    SX-8R:SUPER-UX:*:*)\n\tGUESS=sx8r-nec-superux$UNAME_RELEASE\n\t;;\n    SX-ACE:SUPER-UX:*:*)\n\tGUESS=sxace-nec-superux$UNAME_RELEASE\n\t;;\n    Power*:Rhapsody:*:*)\n\tGUESS=powerpc-apple-rhapsody$UNAME_RELEASE\n\t;;\n    *:Rhapsody:*:*)\n\tGUESS=$UNAME_MACHINE-apple-rhapsody$UNAME_RELEASE\n\t;;\n    arm64:Darwin:*:*)\n\tGUESS=aarch64-apple-darwin$UNAME_RELEASE\n\t;;\n    *:Darwin:*:*)\n\tUNAME_PROCESSOR=`uname -p`\n\tcase $UNAME_PROCESSOR in\n\t    unknown) UNAME_PROCESSOR=powerpc ;;\n\tesac\n\tif command -v xcode-select > /dev/null 2> /dev/null && \\\n\t\t! xcode-select --print-path > /dev/null 2> /dev/null ; then\n\t    # Avoid executing cc if there is no toolchain installed as\n\t    # cc will be a stub that puts up a graphical alert\n\t    # prompting the user to install developer tools.\n\t    CC_FOR_BUILD=no_compiler_found\n\telse\n\t    set_cc_for_build\n\tfi\n\tif test \"$CC_FOR_BUILD\" != no_compiler_found; then\n\t    if (echo '#ifdef __LP64__'; echo IS_64BIT_ARCH; echo '#endif') | \\\n\t\t   (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\\n\t\t   grep IS_64BIT_ARCH >/dev/null\n\t    then\n\t\tcase $UNAME_PROCESSOR in\n\t\t    i386) UNAME_PROCESSOR=x86_64 ;;\n\t\t    powerpc) UNAME_PROCESSOR=powerpc64 ;;\n\t\tesac\n\t    fi\n\t    # On 10.4-10.6 one might compile for PowerPC via gcc -arch ppc\n\t    if (echo '#ifdef __POWERPC__'; echo IS_PPC; echo '#endif') | \\\n\t\t   (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\\n\t\t   grep IS_PPC >/dev/null\n\t    then\n\t\tUNAME_PROCESSOR=powerpc\n\t    fi\n\telif test \"$UNAME_PROCESSOR\" = i386 ; then\n\t    # uname -m returns i386 or x86_64\n\t    UNAME_PROCESSOR=$UNAME_MACHINE\n\tfi\n\tGUESS=$UNAME_PROCESSOR-apple-darwin$UNAME_RELEASE\n\t;;\n    *:procnto*:*:* | *:QNX:[0123456789]*:*)\n\tUNAME_PROCESSOR=`uname -p`\n\tif test \"$UNAME_PROCESSOR\" = x86; then\n\t\tUNAME_PROCESSOR=i386\n\t\tUNAME_MACHINE=pc\n\tfi\n\tGUESS=$UNAME_PROCESSOR-$UNAME_MACHINE-nto-qnx$UNAME_RELEASE\n\t;;\n    *:QNX:*:4*)\n\tGUESS=i386-pc-qnx\n\t;;\n    NEO-*:NONSTOP_KERNEL:*:*)\n\tGUESS=neo-tandem-nsk$UNAME_RELEASE\n\t;;\n    NSE-*:NONSTOP_KERNEL:*:*)\n\tGUESS=nse-tandem-nsk$UNAME_RELEASE\n\t;;\n    NSR-*:NONSTOP_KERNEL:*:*)\n\tGUESS=nsr-tandem-nsk$UNAME_RELEASE\n\t;;\n    NSV-*:NONSTOP_KERNEL:*:*)\n\tGUESS=nsv-tandem-nsk$UNAME_RELEASE\n\t;;\n    NSX-*:NONSTOP_KERNEL:*:*)\n\tGUESS=nsx-tandem-nsk$UNAME_RELEASE\n\t;;\n    *:NonStop-UX:*:*)\n\tGUESS=mips-compaq-nonstopux\n\t;;\n    BS2000:POSIX*:*:*)\n\tGUESS=bs2000-siemens-sysv\n\t;;\n    DS/*:UNIX_System_V:*:*)\n\tGUESS=$UNAME_MACHINE-$UNAME_SYSTEM-$UNAME_RELEASE\n\t;;\n    *:Plan9:*:*)\n\t# \"uname -m\" is not consistent, so use $cputype instead. 386\n\t# is converted to i386 for consistency with other x86\n\t# operating systems.\n\tif test \"${cputype-}\" = 386; then\n\t    UNAME_MACHINE=i386\n\telif test \"x${cputype-}\" != x; then\n\t    UNAME_MACHINE=$cputype\n\tfi\n\tGUESS=$UNAME_MACHINE-unknown-plan9\n\t;;\n    *:TOPS-10:*:*)\n\tGUESS=pdp10-unknown-tops10\n\t;;\n    *:TENEX:*:*)\n\tGUESS=pdp10-unknown-tenex\n\t;;\n    KS10:TOPS-20:*:* | KL10:TOPS-20:*:* | TYPE4:TOPS-20:*:*)\n\tGUESS=pdp10-dec-tops20\n\t;;\n    XKL-1:TOPS-20:*:* | TYPE5:TOPS-20:*:*)\n\tGUESS=pdp10-xkl-tops20\n\t;;\n    *:TOPS-20:*:*)\n\tGUESS=pdp10-unknown-tops20\n\t;;\n    *:ITS:*:*)\n\tGUESS=pdp10-unknown-its\n\t;;\n    SEI:*:*:SEIUX)\n\tGUESS=mips-sei-seiux$UNAME_RELEASE\n\t;;\n    *:DragonFly:*:*)\n\tDRAGONFLY_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/[-(].*//'`\n\tGUESS=$UNAME_MACHINE-unknown-dragonfly$DRAGONFLY_REL\n\t;;\n    *:*VMS:*:*)\n\tUNAME_MACHINE=`(uname -p) 2>/dev/null`\n\tcase $UNAME_MACHINE in\n\t    A*) GUESS=alpha-dec-vms ;;\n\t    I*) GUESS=ia64-dec-vms ;;\n\t    V*) GUESS=vax-dec-vms ;;\n\tesac ;;\n    *:XENIX:*:SysV)\n\tGUESS=i386-pc-xenix\n\t;;\n    i*86:skyos:*:*)\n\tSKYOS_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/ .*$//'`\n\tGUESS=$UNAME_MACHINE-pc-skyos$SKYOS_REL\n\t;;\n    i*86:rdos:*:*)\n\tGUESS=$UNAME_MACHINE-pc-rdos\n\t;;\n    i*86:Fiwix:*:*)\n\tGUESS=$UNAME_MACHINE-pc-fiwix\n\t;;\n    *:AROS:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-aros\n\t;;\n    x86_64:VMkernel:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-esx\n\t;;\n    amd64:Isilon\\ OneFS:*:*)\n\tGUESS=x86_64-unknown-onefs\n\t;;\n    *:Unleashed:*:*)\n\tGUESS=$UNAME_MACHINE-unknown-unleashed$UNAME_RELEASE\n\t;;\nesac\n\n# Do we have a guess based on uname results?\nif test \"x$GUESS\" != x; then\n    echo \"$GUESS\"\n    exit\nfi\n\n# No uname command or uname output not recognized.\nset_cc_for_build\ncat > \"$dummy.c\" <<EOF\n#ifdef _SEQUENT_\n#include <sys/types.h>\n#include <sys/utsname.h>\n#endif\n#if defined(ultrix) || defined(_ultrix) || defined(__ultrix) || defined(__ultrix__)\n#if defined (vax) || defined (__vax) || defined (__vax__) || defined(mips) || defined(__mips) || defined(__mips__) || defined(MIPS) || defined(__MIPS__)\n#include <signal.h>\n#if defined(_SIZE_T_) || defined(SIGLOST)\n#include <sys/utsname.h>\n#endif\n#endif\n#endif\nmain ()\n{\n#if defined (sony)\n#if defined (MIPSEB)\n  /* BFD wants \"bsd\" instead of \"newsos\".  Perhaps BFD should be changed,\n     I don't know....  */\n  printf (\"mips-sony-bsd\\n\"); exit (0);\n#else\n#include <sys/param.h>\n  printf (\"m68k-sony-newsos%s\\n\",\n#ifdef NEWSOS4\n  \"4\"\n#else\n  \"\"\n#endif\n  ); exit (0);\n#endif\n#endif\n\n#if defined (NeXT)\n#if !defined (__ARCHITECTURE__)\n#define __ARCHITECTURE__ \"m68k\"\n#endif\n  int version;\n  version=`(hostinfo | sed -n 's/.*NeXT Mach \\([0-9]*\\).*/\\1/p') 2>/dev/null`;\n  if (version < 4)\n    printf (\"%s-next-nextstep%d\\n\", __ARCHITECTURE__, version);\n  else\n    printf (\"%s-next-openstep%d\\n\", __ARCHITECTURE__, version);\n  exit (0);\n#endif\n\n#if defined (MULTIMAX) || defined (n16)\n#if defined (UMAXV)\n  printf (\"ns32k-encore-sysv\\n\"); exit (0);\n#else\n#if defined (CMU)\n  printf (\"ns32k-encore-mach\\n\"); exit (0);\n#else\n  printf (\"ns32k-encore-bsd\\n\"); exit (0);\n#endif\n#endif\n#endif\n\n#if defined (__386BSD__)\n  printf (\"i386-pc-bsd\\n\"); exit (0);\n#endif\n\n#if defined (sequent)\n#if defined (i386)\n  printf (\"i386-sequent-dynix\\n\"); exit (0);\n#endif\n#if defined (ns32000)\n  printf (\"ns32k-sequent-dynix\\n\"); exit (0);\n#endif\n#endif\n\n#if defined (_SEQUENT_)\n  struct utsname un;\n\n  uname(&un);\n  if (strncmp(un.version, \"V2\", 2) == 0) {\n    printf (\"i386-sequent-ptx2\\n\"); exit (0);\n  }\n  if (strncmp(un.version, \"V1\", 2) == 0) { /* XXX is V1 correct? */\n    printf (\"i386-sequent-ptx1\\n\"); exit (0);\n  }\n  printf (\"i386-sequent-ptx\\n\"); exit (0);\n#endif\n\n#if defined (vax)\n#if !defined (ultrix)\n#include <sys/param.h>\n#if defined (BSD)\n#if BSD == 43\n  printf (\"vax-dec-bsd4.3\\n\"); exit (0);\n#else\n#if BSD == 199006\n  printf (\"vax-dec-bsd4.3reno\\n\"); exit (0);\n#else\n  printf (\"vax-dec-bsd\\n\"); exit (0);\n#endif\n#endif\n#else\n  printf (\"vax-dec-bsd\\n\"); exit (0);\n#endif\n#else\n#if defined(_SIZE_T_) || defined(SIGLOST)\n  struct utsname un;\n  uname (&un);\n  printf (\"vax-dec-ultrix%s\\n\", un.release); exit (0);\n#else\n  printf (\"vax-dec-ultrix\\n\"); exit (0);\n#endif\n#endif\n#endif\n#if defined(ultrix) || defined(_ultrix) || defined(__ultrix) || defined(__ultrix__)\n#if defined(mips) || defined(__mips) || defined(__mips__) || defined(MIPS) || defined(__MIPS__)\n#if defined(_SIZE_T_) || defined(SIGLOST)\n  struct utsname *un;\n  uname (&un);\n  printf (\"mips-dec-ultrix%s\\n\", un.release); exit (0);\n#else\n  printf (\"mips-dec-ultrix\\n\"); exit (0);\n#endif\n#endif\n#endif\n\n#if defined (alliant) && defined (i860)\n  printf (\"i860-alliant-bsd\\n\"); exit (0);\n#endif\n\n  exit (1);\n}\nEOF\n\n$CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" 2>/dev/null && SYSTEM_NAME=`\"$dummy\"` &&\n\t{ echo \"$SYSTEM_NAME\"; exit; }\n\n# Apollos put the system type in the environment.\ntest -d /usr/apollo && { echo \"$ISP-apollo-$SYSTYPE\"; exit; }\n\necho \"$0: unable to guess system type\" >&2\n\ncase $UNAME_MACHINE:$UNAME_SYSTEM in\n    mips:Linux | mips64:Linux)\n\t# If we got here on MIPS GNU/Linux, output extra information.\n\tcat >&2 <<EOF\n\nNOTE: MIPS GNU/Linux systems require a C compiler to fully recognize\nthe system type. Please install a C compiler and try again.\nEOF\n\t;;\nesac\n\ncat >&2 <<EOF\n\nThis script (version $timestamp), has failed to recognize the\noperating system you are using. If your script is old, overwrite *all*\ncopies of config.guess and config.sub with the latest versions from:\n\n  https://git.savannah.gnu.org/cgit/config.git/plain/config.guess\nand\n  https://git.savannah.gnu.org/cgit/config.git/plain/config.sub\nEOF\n\nour_year=`echo $timestamp | sed 's,-.*,,'`\nthisyear=`date +%Y`\n# shellcheck disable=SC2003\nscript_age=`expr \"$thisyear\" - \"$our_year\"`\nif test \"$script_age\" -lt 3 ; then\n   cat >&2 <<EOF\n\nIf $0 has already been updated, send the following data and any\ninformation you think might be pertinent to config-patches@gnu.org to\nprovide the necessary information to handle your system.\n\nconfig.guess timestamp = $timestamp\n\nuname -m = `(uname -m) 2>/dev/null || echo unknown`\nuname -r = `(uname -r) 2>/dev/null || echo unknown`\nuname -s = `(uname -s) 2>/dev/null || echo unknown`\nuname -v = `(uname -v) 2>/dev/null || echo unknown`\n\n/usr/bin/uname -p = `(/usr/bin/uname -p) 2>/dev/null`\n/bin/uname -X     = `(/bin/uname -X) 2>/dev/null`\n\nhostinfo               = `(hostinfo) 2>/dev/null`\n/bin/universe          = `(/bin/universe) 2>/dev/null`\n/usr/bin/arch -k       = `(/usr/bin/arch -k) 2>/dev/null`\n/bin/arch              = `(/bin/arch) 2>/dev/null`\n/usr/bin/oslevel       = `(/usr/bin/oslevel) 2>/dev/null`\n/usr/convex/getsysinfo = `(/usr/convex/getsysinfo) 2>/dev/null`\n\nUNAME_MACHINE = \"$UNAME_MACHINE\"\nUNAME_RELEASE = \"$UNAME_RELEASE\"\nUNAME_SYSTEM  = \"$UNAME_SYSTEM\"\nUNAME_VERSION = \"$UNAME_VERSION\"\nEOF\nfi\n\nexit 1\n\n# Local variables:\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-start: \"timestamp='\"\n# time-stamp-format: \"%:y-%02m-%02d\"\n# time-stamp-end: \"'\"\n# End:\n"
        },
        {
          "name": "config.sub",
          "type": "blob",
          "size": 34.9794921875,
          "content": "#! /bin/sh\n# Configuration validation subroutine script.\n#   Copyright 1992-2022 Free Software Foundation, Inc.\n\n# shellcheck disable=SC2006,SC2268 # see below for rationale\n\ntimestamp='2022-09-17'\n\n# This file is free software; you can redistribute it and/or modify it\n# under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, see <https://www.gnu.org/licenses/>.\n#\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program that contains a\n# configuration script generated by Autoconf, you may include it under\n# the same distribution terms that you use for the rest of that\n# program.  This Exception is an additional permission under section 7\n# of the GNU General Public License, version 3 (\"GPLv3\").\n\n\n# Please send patches to <config-patches@gnu.org>.\n#\n# Configuration subroutine to validate and canonicalize a configuration type.\n# Supply the specified configuration type as an argument.\n# If it is invalid, we print an error message on stderr and exit with code 1.\n# Otherwise, we print the canonical config type on stdout and succeed.\n\n# You can get the latest version of this script from:\n# https://git.savannah.gnu.org/cgit/config.git/plain/config.sub\n\n# This file is supposed to be the same for all GNU packages\n# and recognize all the CPU types, system types and aliases\n# that are meaningful with *any* GNU software.\n# Each package is responsible for reporting which valid configurations\n# it does not support.  The user should be able to distinguish\n# a failure to support a valid configuration from a meaningless\n# configuration.\n\n# The goal of this file is to map all the various variations of a given\n# machine specification into a single specification in the form:\n#\tCPU_TYPE-MANUFACTURER-OPERATING_SYSTEM\n# or in some cases, the newer four-part form:\n#\tCPU_TYPE-MANUFACTURER-KERNEL-OPERATING_SYSTEM\n# It is wrong to echo any other type of specification.\n\n# The \"shellcheck disable\" line above the timestamp inhibits complaints\n# about features and limitations of the classic Bourne shell that were\n# superseded or lifted in POSIX.  However, this script identifies a wide\n# variety of pre-POSIX systems that do not have POSIX shells at all, and\n# even some reasonably current systems (Solaris 10 as case-in-point) still\n# have a pre-POSIX /bin/sh.\n\nme=`echo \"$0\" | sed -e 's,.*/,,'`\n\nusage=\"\\\nUsage: $0 [OPTION] CPU-MFR-OPSYS or ALIAS\n\nCanonicalize a configuration name.\n\nOptions:\n  -h, --help         print this help, then exit\n  -t, --time-stamp   print date of last modification, then exit\n  -v, --version      print version number, then exit\n\nReport bugs and patches to <config-patches@gnu.org>.\"\n\nversion=\"\\\nGNU config.sub ($timestamp)\n\nCopyright 1992-2022 Free Software Foundation, Inc.\n\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n\nhelp=\"\nTry \\`$me --help' for more information.\"\n\n# Parse command line\nwhile test $# -gt 0 ; do\n  case $1 in\n    --time-stamp | --time* | -t )\n       echo \"$timestamp\" ; exit ;;\n    --version | -v )\n       echo \"$version\" ; exit ;;\n    --help | --h* | -h )\n       echo \"$usage\"; exit ;;\n    -- )     # Stop option processing\n       shift; break ;;\n    - )\t# Use stdin as input.\n       break ;;\n    -* )\n       echo \"$me: invalid option $1$help\" >&2\n       exit 1 ;;\n\n    *local*)\n       # First pass through any local machine types.\n       echo \"$1\"\n       exit ;;\n\n    * )\n       break ;;\n  esac\ndone\n\ncase $# in\n 0) echo \"$me: missing argument$help\" >&2\n    exit 1;;\n 1) ;;\n *) echo \"$me: too many arguments$help\" >&2\n    exit 1;;\nesac\n\n# Split fields of configuration type\n# shellcheck disable=SC2162\nsaved_IFS=$IFS\nIFS=\"-\" read field1 field2 field3 field4 <<EOF\n$1\nEOF\nIFS=$saved_IFS\n\n# Separate into logical components for further validation\ncase $1 in\n\t*-*-*-*-*)\n\t\techo Invalid configuration \\`\"$1\"\\': more than four components >&2\n\t\texit 1\n\t\t;;\n\t*-*-*-*)\n\t\tbasic_machine=$field1-$field2\n\t\tbasic_os=$field3-$field4\n\t\t;;\n\t*-*-*)\n\t\t# Ambiguous whether COMPANY is present, or skipped and KERNEL-OS is two\n\t\t# parts\n\t\tmaybe_os=$field2-$field3\n\t\tcase $maybe_os in\n\t\t\tnto-qnx* | linux-* | uclinux-uclibc* \\\n\t\t\t| uclinux-gnu* | kfreebsd*-gnu* | knetbsd*-gnu* | netbsd*-gnu* \\\n\t\t\t| netbsd*-eabi* | kopensolaris*-gnu* | cloudabi*-eabi* \\\n\t\t\t| storm-chaos* | os2-emx* | rtmk-nova* | managarm-*)\n\t\t\t\tbasic_machine=$field1\n\t\t\t\tbasic_os=$maybe_os\n\t\t\t\t;;\n\t\t\tandroid-linux)\n\t\t\t\tbasic_machine=$field1-unknown\n\t\t\t\tbasic_os=linux-android\n\t\t\t\t;;\n\t\t\t*)\n\t\t\t\tbasic_machine=$field1-$field2\n\t\t\t\tbasic_os=$field3\n\t\t\t\t;;\n\t\tesac\n\t\t;;\n\t*-*)\n\t\t# A lone config we happen to match not fitting any pattern\n\t\tcase $field1-$field2 in\n\t\t\tdecstation-3100)\n\t\t\t\tbasic_machine=mips-dec\n\t\t\t\tbasic_os=\n\t\t\t\t;;\n\t\t\t*-*)\n\t\t\t\t# Second component is usually, but not always the OS\n\t\t\t\tcase $field2 in\n\t\t\t\t\t# Prevent following clause from handling this valid os\n\t\t\t\t\tsun*os*)\n\t\t\t\t\t\tbasic_machine=$field1\n\t\t\t\t\t\tbasic_os=$field2\n\t\t\t\t\t\t;;\n\t\t\t\t\tzephyr*)\n\t\t\t\t\t\tbasic_machine=$field1-unknown\n\t\t\t\t\t\tbasic_os=$field2\n\t\t\t\t\t\t;;\n\t\t\t\t\t# Manufacturers\n\t\t\t\t\tdec* | mips* | sequent* | encore* | pc533* | sgi* | sony* \\\n\t\t\t\t\t| att* | 7300* | 3300* | delta* | motorola* | sun[234]* \\\n\t\t\t\t\t| unicom* | ibm* | next | hp | isi* | apollo | altos* \\\n\t\t\t\t\t| convergent* | ncr* | news | 32* | 3600* | 3100* \\\n\t\t\t\t\t| hitachi* | c[123]* | convex* | sun | crds | omron* | dg \\\n\t\t\t\t\t| ultra | tti* | harris | dolphin | highlevel | gould \\\n\t\t\t\t\t| cbm | ns | masscomp | apple | axis | knuth | cray \\\n\t\t\t\t\t| microblaze* | sim | cisco \\\n\t\t\t\t\t| oki | wec | wrs | winbond)\n\t\t\t\t\t\tbasic_machine=$field1-$field2\n\t\t\t\t\t\tbasic_os=\n\t\t\t\t\t\t;;\n\t\t\t\t\t*)\n\t\t\t\t\t\tbasic_machine=$field1\n\t\t\t\t\t\tbasic_os=$field2\n\t\t\t\t\t\t;;\n\t\t\t\tesac\n\t\t\t;;\n\t\tesac\n\t\t;;\n\t*)\n\t\t# Convert single-component short-hands not valid as part of\n\t\t# multi-component configurations.\n\t\tcase $field1 in\n\t\t\t386bsd)\n\t\t\t\tbasic_machine=i386-pc\n\t\t\t\tbasic_os=bsd\n\t\t\t\t;;\n\t\t\ta29khif)\n\t\t\t\tbasic_machine=a29k-amd\n\t\t\t\tbasic_os=udi\n\t\t\t\t;;\n\t\t\tadobe68k)\n\t\t\t\tbasic_machine=m68010-adobe\n\t\t\t\tbasic_os=scout\n\t\t\t\t;;\n\t\t\talliant)\n\t\t\t\tbasic_machine=fx80-alliant\n\t\t\t\tbasic_os=\n\t\t\t\t;;\n\t\t\taltos | altos3068)\n\t\t\t\tbasic_machine=m68k-altos\n\t\t\t\tbasic_os=\n\t\t\t\t;;\n\t\t\tam29k)\n\t\t\t\tbasic_machine=a29k-none\n\t\t\t\tbasic_os=bsd\n\t\t\t\t;;\n\t\t\tamdahl)\n\t\t\t\tbasic_machine=580-amdahl\n\t\t\t\tbasic_os=sysv\n\t\t\t\t;;\n\t\t\tamiga)\n\t\t\t\tbasic_machine=m68k-unknown\n\t\t\t\tbasic_os=\n\t\t\t\t;;\n\t\t\tamigaos | amigados)\n\t\t\t\tbasic_machine=m68k-unknown\n\t\t\t\tbasic_os=amigaos\n\t\t\t\t;;\n\t\t\tamigaunix | amix)\n\t\t\t\tbasic_machine=m68k-unknown\n\t\t\t\tbasic_os=sysv4\n\t\t\t\t;;\n\t\t\tapollo68)\n\t\t\t\tbasic_machine=m68k-apollo\n\t\t\t\tbasic_os=sysv\n\t\t\t\t;;\n\t\t\tapollo68bsd)\n\t\t\t\tbasic_machine=m68k-apollo\n\t\t\t\tbasic_os=bsd\n\t\t\t\t;;\n\t\t\taros)\n\t\t\t\tbasic_machine=i386-pc\n\t\t\t\tbasic_os=aros\n\t\t\t\t;;\n\t\t\taux)\n\t\t\t\tbasic_machine=m68k-apple\n\t\t\t\tbasic_os=aux\n\t\t\t\t;;\n\t\t\tbalance)\n\t\t\t\tbasic_machine=ns32k-sequent\n\t\t\t\tbasic_os=dynix\n\t\t\t\t;;\n\t\t\tblackfin)\n\t\t\t\tbasic_machine=bfin-unknown\n\t\t\t\tbasic_os=linux\n\t\t\t\t;;\n\t\t\tcegcc)\n\t\t\t\tbasic_machine=arm-unknown\n\t\t\t\tbasic_os=cegcc\n\t\t\t\t;;\n\t\t\tconvex-c1)\n\t\t\t\tbasic_machine=c1-convex\n\t\t\t\tbasic_os=bsd\n\t\t\t\t;;\n\t\t\tconvex-c2)\n\t\t\t\tbasic_machine=c2-convex\n\t\t\t\tbasic_os=bsd\n\t\t\t\t;;\n\t\t\tconvex-c32)\n\t\t\t\tbasic_machine=c32-convex\n\t\t\t\tbasic_os=bsd\n\t\t\t\t;;\n\t\t\tconvex-c34)\n\t\t\t\tbasic_machine=c34-convex\n\t\t\t\tbasic_os=bsd\n\t\t\t\t;;\n\t\t\tconvex-c38)\n\t\t\t\tbasic_machine=c38-convex\n\t\t\t\tbasic_os=bsd\n\t\t\t\t;;\n\t\t\tcray)\n\t\t\t\tbasic_machine=j90-cray\n\t\t\t\tbasic_os=unicos\n\t\t\t\t;;\n\t\t\tcrds | unos)\n\t\t\t\tbasic_machine=m68k-crds\n\t\t\t\tbasic_os=\n\t\t\t\t;;\n\t\t\tda30)\n\t\t\t\tbasic_machine=m68k-da30\n\t\t\t\tbasic_os=\n\t\t\t\t;;\n\t\t\tdecstation | pmax | pmin | dec3100 | decstatn)\n\t\t\t\tbasic_machine=mips-dec\n\t\t\t\tbasic_os=\n\t\t\t\t;;\n\t\t\tdelta88)\n\t\t\t\tbasic_machine=m88k-motorola\n\t\t\t\tbasic_os=sysv3\n\t\t\t\t;;\n\t\t\tdicos)\n\t\t\t\tbasic_machine=i686-pc\n\t\t\t\tbasic_os=dicos\n\t\t\t\t;;\n\t\t\tdjgpp)\n\t\t\t\tbasic_machine=i586-pc\n\t\t\t\tbasic_os=msdosdjgpp\n\t\t\t\t;;\n\t\t\tebmon29k)\n\t\t\t\tbasic_machine=a29k-amd\n\t\t\t\tbasic_os=ebmon\n\t\t\t\t;;\n\t\t\tes1800 | OSE68k | ose68k | ose | OSE)\n\t\t\t\tbasic_machine=m68k-ericsson\n\t\t\t\tbasic_os=ose\n\t\t\t\t;;\n\t\t\tgmicro)\n\t\t\t\tbasic_machine=tron-gmicro\n\t\t\t\tbasic_os=sysv\n\t\t\t\t;;\n\t\t\tgo32)\n\t\t\t\tbasic_machine=i386-pc\n\t\t\t\tbasic_os=go32\n\t\t\t\t;;\n\t\t\th8300hms)\n\t\t\t\tbasic_machine=h8300-hitachi\n\t\t\t\tbasic_os=hms\n\t\t\t\t;;\n\t\t\th8300xray)\n\t\t\t\tbasic_machine=h8300-hitachi\n\t\t\t\tbasic_os=xray\n\t\t\t\t;;\n\t\t\th8500hms)\n\t\t\t\tbasic_machine=h8500-hitachi\n\t\t\t\tbasic_os=hms\n\t\t\t\t;;\n\t\t\tharris)\n\t\t\t\tbasic_machine=m88k-harris\n\t\t\t\tbasic_os=sysv3\n\t\t\t\t;;\n\t\t\thp300 | hp300hpux)\n\t\t\t\tbasic_machine=m68k-hp\n\t\t\t\tbasic_os=hpux\n\t\t\t\t;;\n\t\t\thp300bsd)\n\t\t\t\tbasic_machine=m68k-hp\n\t\t\t\tbasic_os=bsd\n\t\t\t\t;;\n\t\t\thppaosf)\n\t\t\t\tbasic_machine=hppa1.1-hp\n\t\t\t\tbasic_os=osf\n\t\t\t\t;;\n\t\t\thppro)\n\t\t\t\tbasic_machine=hppa1.1-hp\n\t\t\t\tbasic_os=proelf\n\t\t\t\t;;\n\t\t\ti386mach)\n\t\t\t\tbasic_machine=i386-mach\n\t\t\t\tbasic_os=mach\n\t\t\t\t;;\n\t\t\tisi68 | isi)\n\t\t\t\tbasic_machine=m68k-isi\n\t\t\t\tbasic_os=sysv\n\t\t\t\t;;\n\t\t\tm68knommu)\n\t\t\t\tbasic_machine=m68k-unknown\n\t\t\t\tbasic_os=linux\n\t\t\t\t;;\n\t\t\tmagnum | m3230)\n\t\t\t\tbasic_machine=mips-mips\n\t\t\t\tbasic_os=sysv\n\t\t\t\t;;\n\t\t\tmerlin)\n\t\t\t\tbasic_machine=ns32k-utek\n\t\t\t\tbasic_os=sysv\n\t\t\t\t;;\n\t\t\tmingw64)\n\t\t\t\tbasic_machine=x86_64-pc\n\t\t\t\tbasic_os=mingw64\n\t\t\t\t;;\n\t\t\tmingw32)\n\t\t\t\tbasic_machine=i686-pc\n\t\t\t\tbasic_os=mingw32\n\t\t\t\t;;\n\t\t\tmingw32ce)\n\t\t\t\tbasic_machine=arm-unknown\n\t\t\t\tbasic_os=mingw32ce\n\t\t\t\t;;\n\t\t\tmonitor)\n\t\t\t\tbasic_machine=m68k-rom68k\n\t\t\t\tbasic_os=coff\n\t\t\t\t;;\n\t\t\tmorphos)\n\t\t\t\tbasic_machine=powerpc-unknown\n\t\t\t\tbasic_os=morphos\n\t\t\t\t;;\n\t\t\tmoxiebox)\n\t\t\t\tbasic_machine=moxie-unknown\n\t\t\t\tbasic_os=moxiebox\n\t\t\t\t;;\n\t\t\tmsdos)\n\t\t\t\tbasic_machine=i386-pc\n\t\t\t\tbasic_os=msdos\n\t\t\t\t;;\n\t\t\tmsys)\n\t\t\t\tbasic_machine=i686-pc\n\t\t\t\tbasic_os=msys\n\t\t\t\t;;\n\t\t\tmvs)\n\t\t\t\tbasic_machine=i370-ibm\n\t\t\t\tbasic_os=mvs\n\t\t\t\t;;\n\t\t\tnacl)\n\t\t\t\tbasic_machine=le32-unknown\n\t\t\t\tbasic_os=nacl\n\t\t\t\t;;\n\t\t\tncr3000)\n\t\t\t\tbasic_machine=i486-ncr\n\t\t\t\tbasic_os=sysv4\n\t\t\t\t;;\n\t\t\tnetbsd386)\n\t\t\t\tbasic_machine=i386-pc\n\t\t\t\tbasic_os=netbsd\n\t\t\t\t;;\n\t\t\tnetwinder)\n\t\t\t\tbasic_machine=armv4l-rebel\n\t\t\t\tbasic_os=linux\n\t\t\t\t;;\n\t\t\tnews | news700 | news800 | news900)\n\t\t\t\tbasic_machine=m68k-sony\n\t\t\t\tbasic_os=newsos\n\t\t\t\t;;\n\t\t\tnews1000)\n\t\t\t\tbasic_machine=m68030-sony\n\t\t\t\tbasic_os=newsos\n\t\t\t\t;;\n\t\t\tnecv70)\n\t\t\t\tbasic_machine=v70-nec\n\t\t\t\tbasic_os=sysv\n\t\t\t\t;;\n\t\t\tnh3000)\n\t\t\t\tbasic_machine=m68k-harris\n\t\t\t\tbasic_os=cxux\n\t\t\t\t;;\n\t\t\tnh[45]000)\n\t\t\t\tbasic_machine=m88k-harris\n\t\t\t\tbasic_os=cxux\n\t\t\t\t;;\n\t\t\tnindy960)\n\t\t\t\tbasic_machine=i960-intel\n\t\t\t\tbasic_os=nindy\n\t\t\t\t;;\n\t\t\tmon960)\n\t\t\t\tbasic_machine=i960-intel\n\t\t\t\tbasic_os=mon960\n\t\t\t\t;;\n\t\t\tnonstopux)\n\t\t\t\tbasic_machine=mips-compaq\n\t\t\t\tbasic_os=nonstopux\n\t\t\t\t;;\n\t\t\tos400)\n\t\t\t\tbasic_machine=powerpc-ibm\n\t\t\t\tbasic_os=os400\n\t\t\t\t;;\n\t\t\tOSE68000 | ose68000)\n\t\t\t\tbasic_machine=m68000-ericsson\n\t\t\t\tbasic_os=ose\n\t\t\t\t;;\n\t\t\tos68k)\n\t\t\t\tbasic_machine=m68k-none\n\t\t\t\tbasic_os=os68k\n\t\t\t\t;;\n\t\t\tparagon)\n\t\t\t\tbasic_machine=i860-intel\n\t\t\t\tbasic_os=osf\n\t\t\t\t;;\n\t\t\tparisc)\n\t\t\t\tbasic_machine=hppa-unknown\n\t\t\t\tbasic_os=linux\n\t\t\t\t;;\n\t\t\tpsp)\n\t\t\t\tbasic_machine=mipsallegrexel-sony\n\t\t\t\tbasic_os=psp\n\t\t\t\t;;\n\t\t\tpw32)\n\t\t\t\tbasic_machine=i586-unknown\n\t\t\t\tbasic_os=pw32\n\t\t\t\t;;\n\t\t\trdos | rdos64)\n\t\t\t\tbasic_machine=x86_64-pc\n\t\t\t\tbasic_os=rdos\n\t\t\t\t;;\n\t\t\trdos32)\n\t\t\t\tbasic_machine=i386-pc\n\t\t\t\tbasic_os=rdos\n\t\t\t\t;;\n\t\t\trom68k)\n\t\t\t\tbasic_machine=m68k-rom68k\n\t\t\t\tbasic_os=coff\n\t\t\t\t;;\n\t\t\tsa29200)\n\t\t\t\tbasic_machine=a29k-amd\n\t\t\t\tbasic_os=udi\n\t\t\t\t;;\n\t\t\tsei)\n\t\t\t\tbasic_machine=mips-sei\n\t\t\t\tbasic_os=seiux\n\t\t\t\t;;\n\t\t\tsequent)\n\t\t\t\tbasic_machine=i386-sequent\n\t\t\t\tbasic_os=\n\t\t\t\t;;\n\t\t\tsps7)\n\t\t\t\tbasic_machine=m68k-bull\n\t\t\t\tbasic_os=sysv2\n\t\t\t\t;;\n\t\t\tst2000)\n\t\t\t\tbasic_machine=m68k-tandem\n\t\t\t\tbasic_os=\n\t\t\t\t;;\n\t\t\tstratus)\n\t\t\t\tbasic_machine=i860-stratus\n\t\t\t\tbasic_os=sysv4\n\t\t\t\t;;\n\t\t\tsun2)\n\t\t\t\tbasic_machine=m68000-sun\n\t\t\t\tbasic_os=\n\t\t\t\t;;\n\t\t\tsun2os3)\n\t\t\t\tbasic_machine=m68000-sun\n\t\t\t\tbasic_os=sunos3\n\t\t\t\t;;\n\t\t\tsun2os4)\n\t\t\t\tbasic_machine=m68000-sun\n\t\t\t\tbasic_os=sunos4\n\t\t\t\t;;\n\t\t\tsun3)\n\t\t\t\tbasic_machine=m68k-sun\n\t\t\t\tbasic_os=\n\t\t\t\t;;\n\t\t\tsun3os3)\n\t\t\t\tbasic_machine=m68k-sun\n\t\t\t\tbasic_os=sunos3\n\t\t\t\t;;\n\t\t\tsun3os4)\n\t\t\t\tbasic_machine=m68k-sun\n\t\t\t\tbasic_os=sunos4\n\t\t\t\t;;\n\t\t\tsun4)\n\t\t\t\tbasic_machine=sparc-sun\n\t\t\t\tbasic_os=\n\t\t\t\t;;\n\t\t\tsun4os3)\n\t\t\t\tbasic_machine=sparc-sun\n\t\t\t\tbasic_os=sunos3\n\t\t\t\t;;\n\t\t\tsun4os4)\n\t\t\t\tbasic_machine=sparc-sun\n\t\t\t\tbasic_os=sunos4\n\t\t\t\t;;\n\t\t\tsun4sol2)\n\t\t\t\tbasic_machine=sparc-sun\n\t\t\t\tbasic_os=solaris2\n\t\t\t\t;;\n\t\t\tsun386 | sun386i | roadrunner)\n\t\t\t\tbasic_machine=i386-sun\n\t\t\t\tbasic_os=\n\t\t\t\t;;\n\t\t\tsv1)\n\t\t\t\tbasic_machine=sv1-cray\n\t\t\t\tbasic_os=unicos\n\t\t\t\t;;\n\t\t\tsymmetry)\n\t\t\t\tbasic_machine=i386-sequent\n\t\t\t\tbasic_os=dynix\n\t\t\t\t;;\n\t\t\tt3e)\n\t\t\t\tbasic_machine=alphaev5-cray\n\t\t\t\tbasic_os=unicos\n\t\t\t\t;;\n\t\t\tt90)\n\t\t\t\tbasic_machine=t90-cray\n\t\t\t\tbasic_os=unicos\n\t\t\t\t;;\n\t\t\ttoad1)\n\t\t\t\tbasic_machine=pdp10-xkl\n\t\t\t\tbasic_os=tops20\n\t\t\t\t;;\n\t\t\ttpf)\n\t\t\t\tbasic_machine=s390x-ibm\n\t\t\t\tbasic_os=tpf\n\t\t\t\t;;\n\t\t\tudi29k)\n\t\t\t\tbasic_machine=a29k-amd\n\t\t\t\tbasic_os=udi\n\t\t\t\t;;\n\t\t\tultra3)\n\t\t\t\tbasic_machine=a29k-nyu\n\t\t\t\tbasic_os=sym1\n\t\t\t\t;;\n\t\t\tv810 | necv810)\n\t\t\t\tbasic_machine=v810-nec\n\t\t\t\tbasic_os=none\n\t\t\t\t;;\n\t\t\tvaxv)\n\t\t\t\tbasic_machine=vax-dec\n\t\t\t\tbasic_os=sysv\n\t\t\t\t;;\n\t\t\tvms)\n\t\t\t\tbasic_machine=vax-dec\n\t\t\t\tbasic_os=vms\n\t\t\t\t;;\n\t\t\tvsta)\n\t\t\t\tbasic_machine=i386-pc\n\t\t\t\tbasic_os=vsta\n\t\t\t\t;;\n\t\t\tvxworks960)\n\t\t\t\tbasic_machine=i960-wrs\n\t\t\t\tbasic_os=vxworks\n\t\t\t\t;;\n\t\t\tvxworks68)\n\t\t\t\tbasic_machine=m68k-wrs\n\t\t\t\tbasic_os=vxworks\n\t\t\t\t;;\n\t\t\tvxworks29k)\n\t\t\t\tbasic_machine=a29k-wrs\n\t\t\t\tbasic_os=vxworks\n\t\t\t\t;;\n\t\t\txbox)\n\t\t\t\tbasic_machine=i686-pc\n\t\t\t\tbasic_os=mingw32\n\t\t\t\t;;\n\t\t\tymp)\n\t\t\t\tbasic_machine=ymp-cray\n\t\t\t\tbasic_os=unicos\n\t\t\t\t;;\n\t\t\t*)\n\t\t\t\tbasic_machine=$1\n\t\t\t\tbasic_os=\n\t\t\t\t;;\n\t\tesac\n\t\t;;\nesac\n\n# Decode 1-component or ad-hoc basic machines\ncase $basic_machine in\n\t# Here we handle the default manufacturer of certain CPU types.  It is in\n\t# some cases the only manufacturer, in others, it is the most popular.\n\tw89k)\n\t\tcpu=hppa1.1\n\t\tvendor=winbond\n\t\t;;\n\top50n)\n\t\tcpu=hppa1.1\n\t\tvendor=oki\n\t\t;;\n\top60c)\n\t\tcpu=hppa1.1\n\t\tvendor=oki\n\t\t;;\n\tibm*)\n\t\tcpu=i370\n\t\tvendor=ibm\n\t\t;;\n\torion105)\n\t\tcpu=clipper\n\t\tvendor=highlevel\n\t\t;;\n\tmac | mpw | mac-mpw)\n\t\tcpu=m68k\n\t\tvendor=apple\n\t\t;;\n\tpmac | pmac-mpw)\n\t\tcpu=powerpc\n\t\tvendor=apple\n\t\t;;\n\n\t# Recognize the various machine names and aliases which stand\n\t# for a CPU type and a company and sometimes even an OS.\n\t3b1 | 7300 | 7300-att | att-7300 | pc7300 | safari | unixpc)\n\t\tcpu=m68000\n\t\tvendor=att\n\t\t;;\n\t3b*)\n\t\tcpu=we32k\n\t\tvendor=att\n\t\t;;\n\tbluegene*)\n\t\tcpu=powerpc\n\t\tvendor=ibm\n\t\tbasic_os=cnk\n\t\t;;\n\tdecsystem10* | dec10*)\n\t\tcpu=pdp10\n\t\tvendor=dec\n\t\tbasic_os=tops10\n\t\t;;\n\tdecsystem20* | dec20*)\n\t\tcpu=pdp10\n\t\tvendor=dec\n\t\tbasic_os=tops20\n\t\t;;\n\tdelta | 3300 | motorola-3300 | motorola-delta \\\n\t      | 3300-motorola | delta-motorola)\n\t\tcpu=m68k\n\t\tvendor=motorola\n\t\t;;\n\tdpx2*)\n\t\tcpu=m68k\n\t\tvendor=bull\n\t\tbasic_os=sysv3\n\t\t;;\n\tencore | umax | mmax)\n\t\tcpu=ns32k\n\t\tvendor=encore\n\t\t;;\n\telxsi)\n\t\tcpu=elxsi\n\t\tvendor=elxsi\n\t\tbasic_os=${basic_os:-bsd}\n\t\t;;\n\tfx2800)\n\t\tcpu=i860\n\t\tvendor=alliant\n\t\t;;\n\tgenix)\n\t\tcpu=ns32k\n\t\tvendor=ns\n\t\t;;\n\th3050r* | hiux*)\n\t\tcpu=hppa1.1\n\t\tvendor=hitachi\n\t\tbasic_os=hiuxwe2\n\t\t;;\n\thp3k9[0-9][0-9] | hp9[0-9][0-9])\n\t\tcpu=hppa1.0\n\t\tvendor=hp\n\t\t;;\n\thp9k2[0-9][0-9] | hp9k31[0-9])\n\t\tcpu=m68000\n\t\tvendor=hp\n\t\t;;\n\thp9k3[2-9][0-9])\n\t\tcpu=m68k\n\t\tvendor=hp\n\t\t;;\n\thp9k6[0-9][0-9] | hp6[0-9][0-9])\n\t\tcpu=hppa1.0\n\t\tvendor=hp\n\t\t;;\n\thp9k7[0-79][0-9] | hp7[0-79][0-9])\n\t\tcpu=hppa1.1\n\t\tvendor=hp\n\t\t;;\n\thp9k78[0-9] | hp78[0-9])\n\t\t# FIXME: really hppa2.0-hp\n\t\tcpu=hppa1.1\n\t\tvendor=hp\n\t\t;;\n\thp9k8[67]1 | hp8[67]1 | hp9k80[24] | hp80[24] | hp9k8[78]9 | hp8[78]9 | hp9k893 | hp893)\n\t\t# FIXME: really hppa2.0-hp\n\t\tcpu=hppa1.1\n\t\tvendor=hp\n\t\t;;\n\thp9k8[0-9][13679] | hp8[0-9][13679])\n\t\tcpu=hppa1.1\n\t\tvendor=hp\n\t\t;;\n\thp9k8[0-9][0-9] | hp8[0-9][0-9])\n\t\tcpu=hppa1.0\n\t\tvendor=hp\n\t\t;;\n\ti*86v32)\n\t\tcpu=`echo \"$1\" | sed -e 's/86.*/86/'`\n\t\tvendor=pc\n\t\tbasic_os=sysv32\n\t\t;;\n\ti*86v4*)\n\t\tcpu=`echo \"$1\" | sed -e 's/86.*/86/'`\n\t\tvendor=pc\n\t\tbasic_os=sysv4\n\t\t;;\n\ti*86v)\n\t\tcpu=`echo \"$1\" | sed -e 's/86.*/86/'`\n\t\tvendor=pc\n\t\tbasic_os=sysv\n\t\t;;\n\ti*86sol2)\n\t\tcpu=`echo \"$1\" | sed -e 's/86.*/86/'`\n\t\tvendor=pc\n\t\tbasic_os=solaris2\n\t\t;;\n\tj90 | j90-cray)\n\t\tcpu=j90\n\t\tvendor=cray\n\t\tbasic_os=${basic_os:-unicos}\n\t\t;;\n\tiris | iris4d)\n\t\tcpu=mips\n\t\tvendor=sgi\n\t\tcase $basic_os in\n\t\t    irix*)\n\t\t\t;;\n\t\t    *)\n\t\t\tbasic_os=irix4\n\t\t\t;;\n\t\tesac\n\t\t;;\n\tminiframe)\n\t\tcpu=m68000\n\t\tvendor=convergent\n\t\t;;\n\t*mint | mint[0-9]* | *MiNT | *MiNT[0-9]*)\n\t\tcpu=m68k\n\t\tvendor=atari\n\t\tbasic_os=mint\n\t\t;;\n\tnews-3600 | risc-news)\n\t\tcpu=mips\n\t\tvendor=sony\n\t\tbasic_os=newsos\n\t\t;;\n\tnext | m*-next)\n\t\tcpu=m68k\n\t\tvendor=next\n\t\tcase $basic_os in\n\t\t    openstep*)\n\t\t        ;;\n\t\t    nextstep*)\n\t\t\t;;\n\t\t    ns2*)\n\t\t      basic_os=nextstep2\n\t\t\t;;\n\t\t    *)\n\t\t      basic_os=nextstep3\n\t\t\t;;\n\t\tesac\n\t\t;;\n\tnp1)\n\t\tcpu=np1\n\t\tvendor=gould\n\t\t;;\n\top50n-* | op60c-*)\n\t\tcpu=hppa1.1\n\t\tvendor=oki\n\t\tbasic_os=proelf\n\t\t;;\n\tpa-hitachi)\n\t\tcpu=hppa1.1\n\t\tvendor=hitachi\n\t\tbasic_os=hiuxwe2\n\t\t;;\n\tpbd)\n\t\tcpu=sparc\n\t\tvendor=tti\n\t\t;;\n\tpbb)\n\t\tcpu=m68k\n\t\tvendor=tti\n\t\t;;\n\tpc532)\n\t\tcpu=ns32k\n\t\tvendor=pc532\n\t\t;;\n\tpn)\n\t\tcpu=pn\n\t\tvendor=gould\n\t\t;;\n\tpower)\n\t\tcpu=power\n\t\tvendor=ibm\n\t\t;;\n\tps2)\n\t\tcpu=i386\n\t\tvendor=ibm\n\t\t;;\n\trm[46]00)\n\t\tcpu=mips\n\t\tvendor=siemens\n\t\t;;\n\trtpc | rtpc-*)\n\t\tcpu=romp\n\t\tvendor=ibm\n\t\t;;\n\tsde)\n\t\tcpu=mipsisa32\n\t\tvendor=sde\n\t\tbasic_os=${basic_os:-elf}\n\t\t;;\n\tsimso-wrs)\n\t\tcpu=sparclite\n\t\tvendor=wrs\n\t\tbasic_os=vxworks\n\t\t;;\n\ttower | tower-32)\n\t\tcpu=m68k\n\t\tvendor=ncr\n\t\t;;\n\tvpp*|vx|vx-*)\n\t\tcpu=f301\n\t\tvendor=fujitsu\n\t\t;;\n\tw65)\n\t\tcpu=w65\n\t\tvendor=wdc\n\t\t;;\n\tw89k-*)\n\t\tcpu=hppa1.1\n\t\tvendor=winbond\n\t\tbasic_os=proelf\n\t\t;;\n\tnone)\n\t\tcpu=none\n\t\tvendor=none\n\t\t;;\n\tleon|leon[3-9])\n\t\tcpu=sparc\n\t\tvendor=$basic_machine\n\t\t;;\n\tleon-*|leon[3-9]-*)\n\t\tcpu=sparc\n\t\tvendor=`echo \"$basic_machine\" | sed 's/-.*//'`\n\t\t;;\n\n\t*-*)\n\t\t# shellcheck disable=SC2162\n\t\tsaved_IFS=$IFS\n\t\tIFS=\"-\" read cpu vendor <<EOF\n$basic_machine\nEOF\n\t\tIFS=$saved_IFS\n\t\t;;\n\t# We use `pc' rather than `unknown'\n\t# because (1) that's what they normally are, and\n\t# (2) the word \"unknown\" tends to confuse beginning users.\n\ti*86 | x86_64)\n\t\tcpu=$basic_machine\n\t\tvendor=pc\n\t\t;;\n\t# These rules are duplicated from below for sake of the special case above;\n\t# i.e. things that normalized to x86 arches should also default to \"pc\"\n\tpc98)\n\t\tcpu=i386\n\t\tvendor=pc\n\t\t;;\n\tx64 | amd64)\n\t\tcpu=x86_64\n\t\tvendor=pc\n\t\t;;\n\t# Recognize the basic CPU types without company name.\n\t*)\n\t\tcpu=$basic_machine\n\t\tvendor=unknown\n\t\t;;\nesac\n\nunset -v basic_machine\n\n# Decode basic machines in the full and proper CPU-Company form.\ncase $cpu-$vendor in\n\t# Here we handle the default manufacturer of certain CPU types in canonical form. It is in\n\t# some cases the only manufacturer, in others, it is the most popular.\n\tcraynv-unknown)\n\t\tvendor=cray\n\t\tbasic_os=${basic_os:-unicosmp}\n\t\t;;\n\tc90-unknown | c90-cray)\n\t\tvendor=cray\n\t\tbasic_os=${Basic_os:-unicos}\n\t\t;;\n\tfx80-unknown)\n\t\tvendor=alliant\n\t\t;;\n\tromp-unknown)\n\t\tvendor=ibm\n\t\t;;\n\tmmix-unknown)\n\t\tvendor=knuth\n\t\t;;\n\tmicroblaze-unknown | microblazeel-unknown)\n\t\tvendor=xilinx\n\t\t;;\n\trs6000-unknown)\n\t\tvendor=ibm\n\t\t;;\n\tvax-unknown)\n\t\tvendor=dec\n\t\t;;\n\tpdp11-unknown)\n\t\tvendor=dec\n\t\t;;\n\twe32k-unknown)\n\t\tvendor=att\n\t\t;;\n\tcydra-unknown)\n\t\tvendor=cydrome\n\t\t;;\n\ti370-ibm*)\n\t\tvendor=ibm\n\t\t;;\n\torion-unknown)\n\t\tvendor=highlevel\n\t\t;;\n\txps-unknown | xps100-unknown)\n\t\tcpu=xps100\n\t\tvendor=honeywell\n\t\t;;\n\n\t# Here we normalize CPU types with a missing or matching vendor\n\tarmh-unknown | armh-alt)\n\t\tcpu=armv7l\n\t\tvendor=alt\n\t\tbasic_os=${basic_os:-linux-gnueabihf}\n\t\t;;\n\tdpx20-unknown | dpx20-bull)\n\t\tcpu=rs6000\n\t\tvendor=bull\n\t\tbasic_os=${basic_os:-bosx}\n\t\t;;\n\n\t# Here we normalize CPU types irrespective of the vendor\n\tamd64-*)\n\t\tcpu=x86_64\n\t\t;;\n\tblackfin-*)\n\t\tcpu=bfin\n\t\tbasic_os=linux\n\t\t;;\n\tc54x-*)\n\t\tcpu=tic54x\n\t\t;;\n\tc55x-*)\n\t\tcpu=tic55x\n\t\t;;\n\tc6x-*)\n\t\tcpu=tic6x\n\t\t;;\n\te500v[12]-*)\n\t\tcpu=powerpc\n\t\tbasic_os=${basic_os}\"spe\"\n\t\t;;\n\tmips3*-*)\n\t\tcpu=mips64\n\t\t;;\n\tms1-*)\n\t\tcpu=mt\n\t\t;;\n\tm68knommu-*)\n\t\tcpu=m68k\n\t\tbasic_os=linux\n\t\t;;\n\tm9s12z-* | m68hcs12z-* | hcs12z-* | s12z-*)\n\t\tcpu=s12z\n\t\t;;\n\topenrisc-*)\n\t\tcpu=or32\n\t\t;;\n\tparisc-*)\n\t\tcpu=hppa\n\t\tbasic_os=linux\n\t\t;;\n\tpentium-* | p5-* | k5-* | k6-* | nexgen-* | viac3-*)\n\t\tcpu=i586\n\t\t;;\n\tpentiumpro-* | p6-* | 6x86-* | athlon-* | athalon_*-*)\n\t\tcpu=i686\n\t\t;;\n\tpentiumii-* | pentium2-* | pentiumiii-* | pentium3-*)\n\t\tcpu=i686\n\t\t;;\n\tpentium4-*)\n\t\tcpu=i786\n\t\t;;\n\tpc98-*)\n\t\tcpu=i386\n\t\t;;\n\tppc-* | ppcbe-*)\n\t\tcpu=powerpc\n\t\t;;\n\tppcle-* | powerpclittle-*)\n\t\tcpu=powerpcle\n\t\t;;\n\tppc64-*)\n\t\tcpu=powerpc64\n\t\t;;\n\tppc64le-* | powerpc64little-*)\n\t\tcpu=powerpc64le\n\t\t;;\n\tsb1-*)\n\t\tcpu=mipsisa64sb1\n\t\t;;\n\tsb1el-*)\n\t\tcpu=mipsisa64sb1el\n\t\t;;\n\tsh5e[lb]-*)\n\t\tcpu=`echo \"$cpu\" | sed 's/^\\(sh.\\)e\\(.\\)$/\\1\\2e/'`\n\t\t;;\n\tspur-*)\n\t\tcpu=spur\n\t\t;;\n\tstrongarm-* | thumb-*)\n\t\tcpu=arm\n\t\t;;\n\ttx39-*)\n\t\tcpu=mipstx39\n\t\t;;\n\ttx39el-*)\n\t\tcpu=mipstx39el\n\t\t;;\n\tx64-*)\n\t\tcpu=x86_64\n\t\t;;\n\txscale-* | xscalee[bl]-*)\n\t\tcpu=`echo \"$cpu\" | sed 's/^xscale/arm/'`\n\t\t;;\n\tarm64-* | aarch64le-*)\n\t\tcpu=aarch64\n\t\t;;\n\n\t# Recognize the canonical CPU Types that limit and/or modify the\n\t# company names they are paired with.\n\tcr16-*)\n\t\tbasic_os=${basic_os:-elf}\n\t\t;;\n\tcrisv32-* | etraxfs*-*)\n\t\tcpu=crisv32\n\t\tvendor=axis\n\t\t;;\n\tcris-* | etrax*-*)\n\t\tcpu=cris\n\t\tvendor=axis\n\t\t;;\n\tcrx-*)\n\t\tbasic_os=${basic_os:-elf}\n\t\t;;\n\tneo-tandem)\n\t\tcpu=neo\n\t\tvendor=tandem\n\t\t;;\n\tnse-tandem)\n\t\tcpu=nse\n\t\tvendor=tandem\n\t\t;;\n\tnsr-tandem)\n\t\tcpu=nsr\n\t\tvendor=tandem\n\t\t;;\n\tnsv-tandem)\n\t\tcpu=nsv\n\t\tvendor=tandem\n\t\t;;\n\tnsx-tandem)\n\t\tcpu=nsx\n\t\tvendor=tandem\n\t\t;;\n\tmipsallegrexel-sony)\n\t\tcpu=mipsallegrexel\n\t\tvendor=sony\n\t\t;;\n\ttile*-*)\n\t\tbasic_os=${basic_os:-linux-gnu}\n\t\t;;\n\n\t*)\n\t\t# Recognize the canonical CPU types that are allowed with any\n\t\t# company name.\n\t\tcase $cpu in\n\t\t\t1750a | 580 \\\n\t\t\t| a29k \\\n\t\t\t| aarch64 | aarch64_be \\\n\t\t\t| abacus \\\n\t\t\t| alpha | alphaev[4-8] | alphaev56 | alphaev6[78] \\\n\t\t\t| alpha64 | alpha64ev[4-8] | alpha64ev56 | alpha64ev6[78] \\\n\t\t\t| alphapca5[67] | alpha64pca5[67] \\\n\t\t\t| am33_2.0 \\\n\t\t\t| amdgcn \\\n\t\t\t| arc | arceb | arc32 | arc64 \\\n\t\t\t| arm | arm[lb]e | arme[lb] | armv* \\\n\t\t\t| avr | avr32 \\\n\t\t\t| asmjs \\\n\t\t\t| ba \\\n\t\t\t| be32 | be64 \\\n\t\t\t| bfin | bpf | bs2000 \\\n\t\t\t| c[123]* | c30 | [cjt]90 | c4x \\\n\t\t\t| c8051 | clipper | craynv | csky | cydra \\\n\t\t\t| d10v | d30v | dlx | dsp16xx \\\n\t\t\t| e2k | elxsi | epiphany \\\n\t\t\t| f30[01] | f700 | fido | fr30 | frv | ft32 | fx80 \\\n\t\t\t| h8300 | h8500 \\\n\t\t\t| hppa | hppa1.[01] | hppa2.0 | hppa2.0[nw] | hppa64 \\\n\t\t\t| hexagon \\\n\t\t\t| i370 | i*86 | i860 | i960 | ia16 | ia64 \\\n\t\t\t| ip2k | iq2000 \\\n\t\t\t| k1om \\\n\t\t\t| le32 | le64 \\\n\t\t\t| lm32 \\\n\t\t\t| loongarch32 | loongarch64 \\\n\t\t\t| m32c | m32r | m32rle \\\n\t\t\t| m5200 | m68000 | m680[012346]0 | m68360 | m683?2 | m68k \\\n\t\t\t| m6811 | m68hc11 | m6812 | m68hc12 | m68hcs12x \\\n\t\t\t| m88110 | m88k | maxq | mb | mcore | mep | metag \\\n\t\t\t| microblaze | microblazeel \\\n\t\t\t| mips | mipsbe | mipseb | mipsel | mipsle \\\n\t\t\t| mips16 \\\n\t\t\t| mips64 | mips64eb | mips64el \\\n\t\t\t| mips64octeon | mips64octeonel \\\n\t\t\t| mips64orion | mips64orionel \\\n\t\t\t| mips64r5900 | mips64r5900el \\\n\t\t\t| mips64vr | mips64vrel \\\n\t\t\t| mips64vr4100 | mips64vr4100el \\\n\t\t\t| mips64vr4300 | mips64vr4300el \\\n\t\t\t| mips64vr5000 | mips64vr5000el \\\n\t\t\t| mips64vr5900 | mips64vr5900el \\\n\t\t\t| mipsisa32 | mipsisa32el \\\n\t\t\t| mipsisa32r2 | mipsisa32r2el \\\n\t\t\t| mipsisa32r3 | mipsisa32r3el \\\n\t\t\t| mipsisa32r5 | mipsisa32r5el \\\n\t\t\t| mipsisa32r6 | mipsisa32r6el \\\n\t\t\t| mipsisa64 | mipsisa64el \\\n\t\t\t| mipsisa64r2 | mipsisa64r2el \\\n\t\t\t| mipsisa64r3 | mipsisa64r3el \\\n\t\t\t| mipsisa64r5 | mipsisa64r5el \\\n\t\t\t| mipsisa64r6 | mipsisa64r6el \\\n\t\t\t| mipsisa64sb1 | mipsisa64sb1el \\\n\t\t\t| mipsisa64sr71k | mipsisa64sr71kel \\\n\t\t\t| mipsr5900 | mipsr5900el \\\n\t\t\t| mipstx39 | mipstx39el \\\n\t\t\t| mmix \\\n\t\t\t| mn10200 | mn10300 \\\n\t\t\t| moxie \\\n\t\t\t| mt \\\n\t\t\t| msp430 \\\n\t\t\t| nds32 | nds32le | nds32be \\\n\t\t\t| nfp \\\n\t\t\t| nios | nios2 | nios2eb | nios2el \\\n\t\t\t| none | np1 | ns16k | ns32k | nvptx \\\n\t\t\t| open8 \\\n\t\t\t| or1k* \\\n\t\t\t| or32 \\\n\t\t\t| orion \\\n\t\t\t| picochip \\\n\t\t\t| pdp10 | pdp11 | pj | pjl | pn | power \\\n\t\t\t| powerpc | powerpc64 | powerpc64le | powerpcle | powerpcspe \\\n\t\t\t| pru \\\n\t\t\t| pyramid \\\n\t\t\t| riscv | riscv32 | riscv32be | riscv64 | riscv64be \\\n\t\t\t| rl78 | romp | rs6000 | rx \\\n\t\t\t| s390 | s390x \\\n\t\t\t| score \\\n\t\t\t| sh | shl \\\n\t\t\t| sh[1234] | sh[24]a | sh[24]ae[lb] | sh[23]e | she[lb] | sh[lb]e \\\n\t\t\t| sh[1234]e[lb] |  sh[12345][lb]e | sh[23]ele | sh64 | sh64le \\\n\t\t\t| sparc | sparc64 | sparc64b | sparc64v | sparc86x | sparclet \\\n\t\t\t| sparclite \\\n\t\t\t| sparcv8 | sparcv9 | sparcv9b | sparcv9v | sv1 | sx* \\\n\t\t\t| spu \\\n\t\t\t| tahoe \\\n\t\t\t| thumbv7* \\\n\t\t\t| tic30 | tic4x | tic54x | tic55x | tic6x | tic80 \\\n\t\t\t| tron \\\n\t\t\t| ubicom32 \\\n\t\t\t| v70 | v850 | v850e | v850e1 | v850es | v850e2 | v850e2v3 \\\n\t\t\t| vax \\\n\t\t\t| visium \\\n\t\t\t| w65 \\\n\t\t\t| wasm32 | wasm64 \\\n\t\t\t| we32k \\\n\t\t\t| x86 | x86_64 | xc16x | xgate | xps100 \\\n\t\t\t| xstormy16 | xtensa* \\\n\t\t\t| ymp \\\n\t\t\t| z8k | z80)\n\t\t\t\t;;\n\n\t\t\t*)\n\t\t\t\techo Invalid configuration \\`\"$1\"\\': machine \\`\"$cpu-$vendor\"\\' not recognized 1>&2\n\t\t\t\texit 1\n\t\t\t\t;;\n\t\tesac\n\t\t;;\nesac\n\n# Here we canonicalize certain aliases for manufacturers.\ncase $vendor in\n\tdigital*)\n\t\tvendor=dec\n\t\t;;\n\tcommodore*)\n\t\tvendor=cbm\n\t\t;;\n\t*)\n\t\t;;\nesac\n\n# Decode manufacturer-specific aliases for certain operating systems.\n\nif test x$basic_os != x\nthen\n\n# First recognize some ad-hoc cases, or perhaps split kernel-os, or else just\n# set os.\ncase $basic_os in\n\tgnu/linux*)\n\t\tkernel=linux\n\t\tos=`echo \"$basic_os\" | sed -e 's|gnu/linux|gnu|'`\n\t\t;;\n\tos2-emx)\n\t\tkernel=os2\n\t\tos=`echo \"$basic_os\" | sed -e 's|os2-emx|emx|'`\n\t\t;;\n\tnto-qnx*)\n\t\tkernel=nto\n\t\tos=`echo \"$basic_os\" | sed -e 's|nto-qnx|qnx|'`\n\t\t;;\n\t*-*)\n\t\t# shellcheck disable=SC2162\n\t\tsaved_IFS=$IFS\n\t\tIFS=\"-\" read kernel os <<EOF\n$basic_os\nEOF\n\t\tIFS=$saved_IFS\n\t\t;;\n\t# Default OS when just kernel was specified\n\tnto*)\n\t\tkernel=nto\n\t\tos=`echo \"$basic_os\" | sed -e 's|nto|qnx|'`\n\t\t;;\n\tlinux*)\n\t\tkernel=linux\n\t\tos=`echo \"$basic_os\" | sed -e 's|linux|gnu|'`\n\t\t;;\n\tmanagarm*)\n\t\tkernel=managarm\n\t\tos=`echo \"$basic_os\" | sed -e 's|managarm|mlibc|'`\n\t\t;;\n\t*)\n\t\tkernel=\n\t\tos=$basic_os\n\t\t;;\nesac\n\n# Now, normalize the OS (knowing we just have one component, it's not a kernel,\n# etc.)\ncase $os in\n\t# First match some system type aliases that might get confused\n\t# with valid system types.\n\t# solaris* is a basic system type, with this one exception.\n\tauroraux)\n\t\tos=auroraux\n\t\t;;\n\tbluegene*)\n\t\tos=cnk\n\t\t;;\n\tsolaris1 | solaris1.*)\n\t\tos=`echo \"$os\" | sed -e 's|solaris1|sunos4|'`\n\t\t;;\n\tsolaris)\n\t\tos=solaris2\n\t\t;;\n\tunixware*)\n\t\tos=sysv4.2uw\n\t\t;;\n\t# es1800 is here to avoid being matched by es* (a different OS)\n\tes1800*)\n\t\tos=ose\n\t\t;;\n\t# Some version numbers need modification\n\tchorusos*)\n\t\tos=chorusos\n\t\t;;\n\tisc)\n\t\tos=isc2.2\n\t\t;;\n\tsco6)\n\t\tos=sco5v6\n\t\t;;\n\tsco5)\n\t\tos=sco3.2v5\n\t\t;;\n\tsco4)\n\t\tos=sco3.2v4\n\t\t;;\n\tsco3.2.[4-9]*)\n\t\tos=`echo \"$os\" | sed -e 's/sco3.2./sco3.2v/'`\n\t\t;;\n\tsco*v* | scout)\n\t\t# Don't match below\n\t\t;;\n\tsco*)\n\t\tos=sco3.2v2\n\t\t;;\n\tpsos*)\n\t\tos=psos\n\t\t;;\n\tqnx*)\n\t\tos=qnx\n\t\t;;\n\thiux*)\n\t\tos=hiuxwe2\n\t\t;;\n\tlynx*178)\n\t\tos=lynxos178\n\t\t;;\n\tlynx*5)\n\t\tos=lynxos5\n\t\t;;\n\tlynxos*)\n\t\t# don't get caught up in next wildcard\n\t\t;;\n\tlynx*)\n\t\tos=lynxos\n\t\t;;\n\tmac[0-9]*)\n\t\tos=`echo \"$os\" | sed -e 's|mac|macos|'`\n\t\t;;\n\topened*)\n\t\tos=openedition\n\t\t;;\n\tos400*)\n\t\tos=os400\n\t\t;;\n\tsunos5*)\n\t\tos=`echo \"$os\" | sed -e 's|sunos5|solaris2|'`\n\t\t;;\n\tsunos6*)\n\t\tos=`echo \"$os\" | sed -e 's|sunos6|solaris3|'`\n\t\t;;\n\twince*)\n\t\tos=wince\n\t\t;;\n\tutek*)\n\t\tos=bsd\n\t\t;;\n\tdynix*)\n\t\tos=bsd\n\t\t;;\n\tacis*)\n\t\tos=aos\n\t\t;;\n\tatheos*)\n\t\tos=atheos\n\t\t;;\n\tsyllable*)\n\t\tos=syllable\n\t\t;;\n\t386bsd)\n\t\tos=bsd\n\t\t;;\n\tctix* | uts*)\n\t\tos=sysv\n\t\t;;\n\tnova*)\n\t\tos=rtmk-nova\n\t\t;;\n\tns2)\n\t\tos=nextstep2\n\t\t;;\n\t# Preserve the version number of sinix5.\n\tsinix5.*)\n\t\tos=`echo \"$os\" | sed -e 's|sinix|sysv|'`\n\t\t;;\n\tsinix*)\n\t\tos=sysv4\n\t\t;;\n\ttpf*)\n\t\tos=tpf\n\t\t;;\n\ttriton*)\n\t\tos=sysv3\n\t\t;;\n\toss*)\n\t\tos=sysv3\n\t\t;;\n\tsvr4*)\n\t\tos=sysv4\n\t\t;;\n\tsvr3)\n\t\tos=sysv3\n\t\t;;\n\tsysvr4)\n\t\tos=sysv4\n\t\t;;\n\tose*)\n\t\tos=ose\n\t\t;;\n\t*mint | mint[0-9]* | *MiNT | MiNT[0-9]*)\n\t\tos=mint\n\t\t;;\n\tdicos*)\n\t\tos=dicos\n\t\t;;\n\tpikeos*)\n\t\t# Until real need of OS specific support for\n\t\t# particular features comes up, bare metal\n\t\t# configurations are quite functional.\n\t\tcase $cpu in\n\t\t    arm*)\n\t\t\tos=eabi\n\t\t\t;;\n\t\t    *)\n\t\t\tos=elf\n\t\t\t;;\n\t\tesac\n\t\t;;\n\t*)\n\t\t# No normalization, but not necessarily accepted, that comes below.\n\t\t;;\nesac\n\nelse\n\n# Here we handle the default operating systems that come with various machines.\n# The value should be what the vendor currently ships out the door with their\n# machine or put another way, the most popular os provided with the machine.\n\n# Note that if you're going to try to match \"-MANUFACTURER\" here (say,\n# \"-sun\"), then you have to tell the case statement up towards the top\n# that MANUFACTURER isn't an operating system.  Otherwise, code above\n# will signal an error saying that MANUFACTURER isn't an operating\n# system, and we'll never get to this point.\n\nkernel=\ncase $cpu-$vendor in\n\tscore-*)\n\t\tos=elf\n\t\t;;\n\tspu-*)\n\t\tos=elf\n\t\t;;\n\t*-acorn)\n\t\tos=riscix1.2\n\t\t;;\n\tarm*-rebel)\n\t\tkernel=linux\n\t\tos=gnu\n\t\t;;\n\tarm*-semi)\n\t\tos=aout\n\t\t;;\n\tc4x-* | tic4x-*)\n\t\tos=coff\n\t\t;;\n\tc8051-*)\n\t\tos=elf\n\t\t;;\n\tclipper-intergraph)\n\t\tos=clix\n\t\t;;\n\thexagon-*)\n\t\tos=elf\n\t\t;;\n\ttic54x-*)\n\t\tos=coff\n\t\t;;\n\ttic55x-*)\n\t\tos=coff\n\t\t;;\n\ttic6x-*)\n\t\tos=coff\n\t\t;;\n\t# This must come before the *-dec entry.\n\tpdp10-*)\n\t\tos=tops20\n\t\t;;\n\tpdp11-*)\n\t\tos=none\n\t\t;;\n\t*-dec | vax-*)\n\t\tos=ultrix4.2\n\t\t;;\n\tm68*-apollo)\n\t\tos=domain\n\t\t;;\n\ti386-sun)\n\t\tos=sunos4.0.2\n\t\t;;\n\tm68000-sun)\n\t\tos=sunos3\n\t\t;;\n\tm68*-cisco)\n\t\tos=aout\n\t\t;;\n\tmep-*)\n\t\tos=elf\n\t\t;;\n\tmips*-cisco)\n\t\tos=elf\n\t\t;;\n\tmips*-*)\n\t\tos=elf\n\t\t;;\n\tor32-*)\n\t\tos=coff\n\t\t;;\n\t*-tti)\t# must be before sparc entry or we get the wrong os.\n\t\tos=sysv3\n\t\t;;\n\tsparc-* | *-sun)\n\t\tos=sunos4.1.1\n\t\t;;\n\tpru-*)\n\t\tos=elf\n\t\t;;\n\t*-be)\n\t\tos=beos\n\t\t;;\n\t*-ibm)\n\t\tos=aix\n\t\t;;\n\t*-knuth)\n\t\tos=mmixware\n\t\t;;\n\t*-wec)\n\t\tos=proelf\n\t\t;;\n\t*-winbond)\n\t\tos=proelf\n\t\t;;\n\t*-oki)\n\t\tos=proelf\n\t\t;;\n\t*-hp)\n\t\tos=hpux\n\t\t;;\n\t*-hitachi)\n\t\tos=hiux\n\t\t;;\n\ti860-* | *-att | *-ncr | *-altos | *-motorola | *-convergent)\n\t\tos=sysv\n\t\t;;\n\t*-cbm)\n\t\tos=amigaos\n\t\t;;\n\t*-dg)\n\t\tos=dgux\n\t\t;;\n\t*-dolphin)\n\t\tos=sysv3\n\t\t;;\n\tm68k-ccur)\n\t\tos=rtu\n\t\t;;\n\tm88k-omron*)\n\t\tos=luna\n\t\t;;\n\t*-next)\n\t\tos=nextstep\n\t\t;;\n\t*-sequent)\n\t\tos=ptx\n\t\t;;\n\t*-crds)\n\t\tos=unos\n\t\t;;\n\t*-ns)\n\t\tos=genix\n\t\t;;\n\ti370-*)\n\t\tos=mvs\n\t\t;;\n\t*-gould)\n\t\tos=sysv\n\t\t;;\n\t*-highlevel)\n\t\tos=bsd\n\t\t;;\n\t*-encore)\n\t\tos=bsd\n\t\t;;\n\t*-sgi)\n\t\tos=irix\n\t\t;;\n\t*-siemens)\n\t\tos=sysv4\n\t\t;;\n\t*-masscomp)\n\t\tos=rtu\n\t\t;;\n\tf30[01]-fujitsu | f700-fujitsu)\n\t\tos=uxpv\n\t\t;;\n\t*-rom68k)\n\t\tos=coff\n\t\t;;\n\t*-*bug)\n\t\tos=coff\n\t\t;;\n\t*-apple)\n\t\tos=macos\n\t\t;;\n\t*-atari*)\n\t\tos=mint\n\t\t;;\n\t*-wrs)\n\t\tos=vxworks\n\t\t;;\n\t*)\n\t\tos=none\n\t\t;;\nesac\n\nfi\n\n# Now, validate our (potentially fixed-up) OS.\ncase $os in\n\t# Sometimes we do \"kernel-libc\", so those need to count as OSes.\n\tmusl* | newlib* | relibc* | uclibc*)\n\t\t;;\n\t# Likewise for \"kernel-abi\"\n\teabi* | gnueabi*)\n\t\t;;\n\t# VxWorks passes extra cpu info in the 4th filed.\n\tsimlinux | simwindows | spe)\n\t\t;;\n\t# Now accept the basic system types.\n\t# The portable systems comes first.\n\t# Each alternative MUST end in a * to match a version number.\n\tgnu* | android* | bsd* | mach* | minix* | genix* | ultrix* | irix* \\\n\t     | *vms* | esix* | aix* | cnk* | sunos | sunos[34]* \\\n\t     | hpux* | unos* | osf* | luna* | dgux* | auroraux* | solaris* \\\n\t     | sym* |  plan9* | psp* | sim* | xray* | os68k* | v88r* \\\n\t     | hiux* | abug | nacl* | netware* | windows* \\\n\t     | os9* | macos* | osx* | ios* \\\n\t     | mpw* | magic* | mmixware* | mon960* | lnews* \\\n\t     | amigaos* | amigados* | msdos* | newsos* | unicos* | aof* \\\n\t     | aos* | aros* | cloudabi* | sortix* | twizzler* \\\n\t     | nindy* | vxsim* | vxworks* | ebmon* | hms* | mvs* \\\n\t     | clix* | riscos* | uniplus* | iris* | isc* | rtu* | xenix* \\\n\t     | mirbsd* | netbsd* | dicos* | openedition* | ose* \\\n\t     | bitrig* | openbsd* | secbsd* | solidbsd* | libertybsd* | os108* \\\n\t     | ekkobsd* | freebsd* | riscix* | lynxos* | os400* \\\n\t     | bosx* | nextstep* | cxux* | aout* | elf* | oabi* \\\n\t     | ptx* | coff* | ecoff* | winnt* | domain* | vsta* \\\n\t     | udi* | lites* | ieee* | go32* | aux* | hcos* \\\n\t     | chorusrdb* | cegcc* | glidix* | serenity* \\\n\t     | cygwin* | msys* | pe* | moss* | proelf* | rtems* \\\n\t     | midipix* | mingw32* | mingw64* | mint* \\\n\t     | uxpv* | beos* | mpeix* | udk* | moxiebox* \\\n\t     | interix* | uwin* | mks* | rhapsody* | darwin* \\\n\t     | openstep* | oskit* | conix* | pw32* | nonstopux* \\\n\t     | storm-chaos* | tops10* | tenex* | tops20* | its* \\\n\t     | os2* | vos* | palmos* | uclinux* | nucleus* | morphos* \\\n\t     | scout* | superux* | sysv* | rtmk* | tpf* | windiss* \\\n\t     | powermax* | dnix* | nx6 | nx7 | sei* | dragonfly* \\\n\t     | skyos* | haiku* | rdos* | toppers* | drops* | es* \\\n\t     | onefs* | tirtos* | phoenix* | fuchsia* | redox* | bme* \\\n\t     | midnightbsd* | amdhsa* | unleashed* | emscripten* | wasi* \\\n\t     | nsk* | powerunix* | genode* | zvmoe* | qnx* | emx* | zephyr* \\\n\t     | fiwix* | mlibc* )\n\t\t;;\n\t# This one is extra strict with allowed versions\n\tsco3.2v2 | sco3.2v[4-9]* | sco5v6*)\n\t\t# Don't forget version if it is 3.2v4 or newer.\n\t\t;;\n\tnone)\n\t\t;;\n\tkernel* )\n\t\t# Restricted further below\n\t\t;;\n\t*)\n\t\techo Invalid configuration \\`\"$1\"\\': OS \\`\"$os\"\\' not recognized 1>&2\n\t\texit 1\n\t\t;;\nesac\n\n# As a final step for OS-related things, validate the OS-kernel combination\n# (given a valid OS), if there is a kernel.\ncase $kernel-$os in\n\tlinux-gnu* | linux-dietlibc* | linux-android* | linux-newlib* \\\n\t\t   | linux-musl* | linux-relibc* | linux-uclibc* | linux-mlibc* )\n\t\t;;\n\tuclinux-uclibc* )\n\t\t;;\n\tmanagarm-mlibc* | managarm-kernel* )\n\t\t;;\n\t-dietlibc* | -newlib* | -musl* | -relibc* | -uclibc* | -mlibc* )\n\t\t# These are just libc implementations, not actual OSes, and thus\n\t\t# require a kernel.\n\t\techo \"Invalid configuration \\`$1': libc \\`$os' needs explicit kernel.\" 1>&2\n\t\texit 1\n\t\t;;\n\t-kernel* )\n\t\techo \"Invalid configuration \\`$1': \\`$os' needs explicit kernel.\" 1>&2\n\t\texit 1\n\t\t;;\n\t*-kernel* )\n\t\techo \"Invalid configuration \\`$1': \\`$kernel' does not support \\`$os'.\" 1>&2\n\t\texit 1\n\t\t;;\n\tkfreebsd*-gnu* | kopensolaris*-gnu*)\n\t\t;;\n\tvxworks-simlinux | vxworks-simwindows | vxworks-spe)\n\t\t;;\n\tnto-qnx*)\n\t\t;;\n\tos2-emx)\n\t\t;;\n\t*-eabi* | *-gnueabi*)\n\t\t;;\n\t-*)\n\t\t# Blank kernel with real OS is always fine.\n\t\t;;\n\t*-*)\n\t\techo \"Invalid configuration \\`$1': Kernel \\`$kernel' not known to work with OS \\`$os'.\" 1>&2\n\t\texit 1\n\t\t;;\nesac\n\n# Here we handle the case where we know the os, and the CPU type, but not the\n# manufacturer.  We pick the logical manufacturer.\ncase $vendor in\n\tunknown)\n\t\tcase $cpu-$os in\n\t\t\t*-riscix*)\n\t\t\t\tvendor=acorn\n\t\t\t\t;;\n\t\t\t*-sunos*)\n\t\t\t\tvendor=sun\n\t\t\t\t;;\n\t\t\t*-cnk* | *-aix*)\n\t\t\t\tvendor=ibm\n\t\t\t\t;;\n\t\t\t*-beos*)\n\t\t\t\tvendor=be\n\t\t\t\t;;\n\t\t\t*-hpux*)\n\t\t\t\tvendor=hp\n\t\t\t\t;;\n\t\t\t*-mpeix*)\n\t\t\t\tvendor=hp\n\t\t\t\t;;\n\t\t\t*-hiux*)\n\t\t\t\tvendor=hitachi\n\t\t\t\t;;\n\t\t\t*-unos*)\n\t\t\t\tvendor=crds\n\t\t\t\t;;\n\t\t\t*-dgux*)\n\t\t\t\tvendor=dg\n\t\t\t\t;;\n\t\t\t*-luna*)\n\t\t\t\tvendor=omron\n\t\t\t\t;;\n\t\t\t*-genix*)\n\t\t\t\tvendor=ns\n\t\t\t\t;;\n\t\t\t*-clix*)\n\t\t\t\tvendor=intergraph\n\t\t\t\t;;\n\t\t\t*-mvs* | *-opened*)\n\t\t\t\tvendor=ibm\n\t\t\t\t;;\n\t\t\t*-os400*)\n\t\t\t\tvendor=ibm\n\t\t\t\t;;\n\t\t\ts390-* | s390x-*)\n\t\t\t\tvendor=ibm\n\t\t\t\t;;\n\t\t\t*-ptx*)\n\t\t\t\tvendor=sequent\n\t\t\t\t;;\n\t\t\t*-tpf*)\n\t\t\t\tvendor=ibm\n\t\t\t\t;;\n\t\t\t*-vxsim* | *-vxworks* | *-windiss*)\n\t\t\t\tvendor=wrs\n\t\t\t\t;;\n\t\t\t*-aux*)\n\t\t\t\tvendor=apple\n\t\t\t\t;;\n\t\t\t*-hms*)\n\t\t\t\tvendor=hitachi\n\t\t\t\t;;\n\t\t\t*-mpw* | *-macos*)\n\t\t\t\tvendor=apple\n\t\t\t\t;;\n\t\t\t*-*mint | *-mint[0-9]* | *-*MiNT | *-MiNT[0-9]*)\n\t\t\t\tvendor=atari\n\t\t\t\t;;\n\t\t\t*-vos*)\n\t\t\t\tvendor=stratus\n\t\t\t\t;;\n\t\tesac\n\t\t;;\nesac\n\necho \"$cpu-$vendor-${kernel:+$kernel-}$os\"\nexit\n\n# Local variables:\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-start: \"timestamp='\"\n# time-stamp-format: \"%:y-%02m-%02d\"\n# time-stamp-end: \"'\"\n# End:\n"
        },
        {
          "name": "config_host.mk.in",
          "type": "blob",
          "size": 33.109375,
          "content": " # config variable for LibreOffice\n # this file is intended to be able to be included in a Makefile\n # and not to be sourced in a shell session\n #\n\n# Horrible hack to prepend spaces to expansions\n# Spaces are usually eaten by make parser but not if variable expands to space.\n# Space prefix is desirable because system CFLAGS may be completely empty,\n# which means that the variables defined here would need extra twiddling\n# to get them into invoked external configures and override pkg-config there.\ngb_SPACE:=$(gb_SPACE) $(gb_SPACE)\nexport SRC_ROOT=@SRC_ROOT@\nexport BUILDDIR=@BUILDDIR@\n\n@x_AFLAGS@ export AFLAGS=@AFLAGS@\nexport ABW_CFLAGS=$(gb_SPACE)@ABW_CFLAGS@\nexport ABW_LIBS=$(gb_SPACE)@ABW_LIBS@\nexport ANDROID_NDK_DIR=@ANDROID_NDK_DIR@\nexport ANDROID_NDK_VERSION=@ANDROID_NDK_VERSION@\nexport ANDROID_API_LEVEL=@ANDROID_API_LEVEL@\nexport ANDROID_APP_ABI=@ANDROID_APP_ABI@\nexport ANDROID_SDK_DIR=@ANDROID_SDK_DIR@\nexport ANDROID_SYSROOT_PLATFORM=@ANDROID_SYSROOT_PLATFORM@\nexport ANDROID_PACKAGE_NAME=@ANDROID_PACKAGE_NAME@\nexport ANDROID_TOOLCHAIN=@ANDROID_TOOLCHAIN@\nexport ANDROID_GCC_TOOLCHAIN_VERSION=@ANDROID_GCC_TOOLCHAIN_VERSION@\nexport ANT=@ANT@\nexport ANT_HOME=@ANT_HOME@\nexport ANT_LIB=@ANT_LIB@\nexport AR=@AR@\nexport ASSERT_ALWAYS_ABORT=@ASSERT_ALWAYS_ABORT@\nexport ATL_INCLUDE=@ATL_INCLUDE@\nexport ATL_LIB=@ATL_LIB@\nexport ATOMIC_LIB=@ATOMIC_LIB@\nexport ATSPI2_CFLAGS=$(gb_SPACE)@ATSPI2_CFLAGS@\nexport ATSPI2_LIBS=$(gb_SPACE)@ATSPI2_LIBS@\nexport AVAHI_CFLAGS=$(gb_SPACE)@AVAHI_CFLAGS@\nexport AVAHI_LIBS=$(gb_SPACE)@AVAHI_LIBS@\nexport LIBATOMIC_OPS_CFLAGS=$(gb_SPACE)@LIBATOMIC_OPS_CFLAGS@\nexport LIBATOMIC_OPS_LIBS=$(gb_SPACE)@LIBATOMIC_OPS_LIBS@\nexport BACKTRACE_CFLAGS=@BACKTRACE_CFLAGS@\nexport BACKTRACE_LIBS=@BACKTRACE_LIBS@\nexport BINDIR=@BINDIR@\nexport BISON=@BISON@\nexport BOOST_CPPFLAGS=@BOOST_CPPFLAGS@\nexport BOOST_CXXFLAGS=@BOOST_CXXFLAGS@\nexport BOOST_LOCALE_LIB=@BOOST_LOCALE_LIB@\nexport BOOST_DATE_TIME_LIB=@BOOST_DATE_TIME_LIB@\nexport BOOST_FILESYSTEM_LIB=@BOOST_FILESYSTEM_LIB@\nexport BOOST_IOSTREAMS_LIB=@BOOST_IOSTREAMS_LIB@\nexport BOOST_LDFLAGS=@BOOST_LDFLAGS@\nexport BOOST_SYSTEM_LIB=@BOOST_SYSTEM_LIB@\nexport BOX2D_CFLAGS=@BOX2D_CFLAGS@\nexport BOX2D_LIBS=@BOX2D_LIBS@\nexport BRAND_INTRO_IMAGES=@BRAND_INTRO_IMAGES@\nexport BREAKPAD_SYMBOL_CONFIG=@BREAKPAD_SYMBOL_CONFIG@\nexport BSH_JAR=@BSH_JAR@\nexport BUILD_PLATFORM=@build@\nexport BUILD_POSTGRESQL_SDBC=@BUILD_POSTGRESQL_SDBC@\nexport BUILD_TYPE=@BUILD_TYPE@\nexport BUILD_X64=@BUILD_X64@\nexport BUILD_X86=@BUILD_X86@\nexport BUILDING_PCH_WITH_OBJ=@BUILDING_PCH_WITH_OBJ@\nexport BZIP2_CFLAGS=$(gb_SPACE)@BZIP2_CFLAGS@\nexport BZIP2_LIBS=$(gb_SPACE)@BZIP2_LIBS@\nexport CAIRO_CFLAGS=$(gb_SPACE)@CAIRO_CFLAGS@\nexport CAIRO_LIBS=$(gb_SPACE)@CAIRO_LIBS@\nexport CC=@CC@\nexport CC_FOR_BUILD=@CC_FOR_BUILD@\nexport CCACHE_DEPEND_MODE=@CCACHE_DEPEND_MODE@\nexport CDR_CFLAGS=$(gb_SPACE)@CDR_CFLAGS@\nexport CDR_LIBS=$(gb_SPACE)@CDR_LIBS@\n@x_CFLAGS@ export CFLAGS=@CFLAGS@\nexport CLANG_USE_LD=@CLANG_USE_LD@\nexport CLANGDIR=@CLANGDIR@\nexport CLANGLIBDIR=@CLANGLIBDIR@\nexport CLANGSYSINCLUDE=@CLANGSYSINCLUDE@\nexport CLANGTOOLLIBS=@CLANGTOOLLIBS@\nexport CLUCENE_CFLAGS=$(gb_SPACE)@CLUCENE_CFLAGS@\nexport CLUCENE_LIBS=$(gb_SPACE)@CLUCENE_LIBS@\nexport LIBCMIS_CFLAGS=$(gb_SPACE)@LIBCMIS_CFLAGS@\nexport LIBCMIS_LIBS=$(gb_SPACE)@LIBCMIS_LIBS@\nexport COM=@COM@\nexport COMPATH=@COMPATH@\nexport COMPILER_PLUGINS=@COMPILER_PLUGINS@\nexport COMPILER_PLUGINS_ANALYZER_PCH=@COMPILER_PLUGINS_ANALYZER_PCH@\nexport COMPILER_PLUGINS_COM_IS_CLANG=@COMPILER_PLUGINS_COM_IS_CLANG@\nexport COMPILER_PLUGINS_CXX=@COMPILER_PLUGINS_CXX@\nexport COMPILER_PLUGINS_CXXFLAGS=@COMPILER_PLUGINS_CXXFLAGS@\nexport COMPILER_PLUGINS_CXX_LINKFLAGS=@COMPILER_PLUGINS_CXX_LINKFLAGS@\nexport COMPILER_PLUGINS_DEBUG=@COMPILER_PLUGINS_DEBUG@\nexport COMPILER_PLUGINS_TOOLING_ARGS=@COMPILER_PLUGINS_TOOLING_ARGS@\nexport COMPRESSIONTOOL=@COMPRESSIONTOOL@\nexport COM_IS_CLANG=@COM_IS_CLANG@\nexport COREDUMPCTL=@COREDUMPCTL@\nexport CPDB_CFLAGS=@CPDB_CFLAGS@\nexport CPDB_LIBS=@CPDB_LIBS@\nexport CPPU_ENV=@CPPU_ENV@\nexport CPPU_ENV_FOR_BUILD=@CPPU_ENV_FOR_BUILD@\nexport CPPUNIT_CFLAGS=$(gb_SPACE)@CPPUNIT_CFLAGS@\nexport CPPUNIT_LIBS=$(gb_SPACE)@CPPUNIT_LIBS@\nexport CPUNAME=@CPUNAME@\nexport CROSS_COMPILING=@CROSS_COMPILING@\nexport CURL=@CURL@\nexport CURL_CFLAGS=$(gb_SPACE)@CURL_CFLAGS@\nexport CURL_LIBS=$(gb_SPACE)@CURL_LIBS@\nexport CUSTOM_BRAND_DIR=@CUSTOM_BRAND_DIR@\nexport CUSTOM_BRAND_IMAGES=@CUSTOM_BRAND_IMAGES@\nexport CXX=@CXX@\nexport CXX_FOR_BUILD=@CXX_FOR_BUILD@\nexport CXX_X64_BINARY=@CXX_X64_BINARY@\nexport CXX_X86_BINARY=@CXX_X86_BINARY@\n@x_CXXFLAGS@ export CXXFLAGS=@CXXFLAGS@\nexport CXXFLAGS_CXX11=@CXXFLAGS_CXX11@\nexport CXXFLAGS_INTRINSICS_SSE2=@CXXFLAGS_INTRINSICS_SSE2@\nexport CXXFLAGS_INTRINSICS_SSSE3=@CXXFLAGS_INTRINSICS_SSSE3@\nexport CXXFLAGS_INTRINSICS_SSE41=@CXXFLAGS_INTRINSICS_SSE41@\nexport CXXFLAGS_INTRINSICS_SSE42=@CXXFLAGS_INTRINSICS_SSE42@\nexport CXXFLAGS_INTRINSICS_AVX=@CXXFLAGS_INTRINSICS_AVX@\nexport CXXFLAGS_INTRINSICS_AVX2=@CXXFLAGS_INTRINSICS_AVX2@\nexport CXXFLAGS_INTRINSICS_AVX512=@CXXFLAGS_INTRINSICS_AVX512@\nexport CXXFLAGS_INTRINSICS_AVX512F=@CXXFLAGS_INTRINSICS_AVX512F@\nexport CXXFLAGS_INTRINSICS_F16C=@CXXFLAGS_INTRINSICS_F16C@\nexport CXXFLAGS_INTRINSICS_FMA=@CXXFLAGS_INTRINSICS_FMA@\nexport DATADIR=@DATADIR@\nexport DBUS_CFLAGS=$(gb_SPACE)@DBUS_CFLAGS@\nexport DBUS_LIBS=$(gb_SPACE)@DBUS_LIBS@\nexport DBUS_GLIB_CFLAGS=$(gb_SPACE)@DBUS_GLIB_CFLAGS@\nexport DBUS_GLIB_LIBS=$(gb_SPACE)@DBUS_GLIB_LIBS@\nexport DBUS_HAVE_GLIB=@DBUS_HAVE_GLIB@\nexport DBUS_LAUNCH=@DBUS_LAUNCH@\nexport DCONF_CFLAGS=@DCONF_CFLAGS@\nexport DCONF_LIBS=@DCONF_LIBS@\nexport DEFAULT_BRAND_IMAGES=@DEFAULT_BRAND_IMAGES@\nexport DICT_SYSTEM_DIR=@DICT_SYSTEM_DIR@\nexport DISABLE_CVE_TESTS=@DISABLE_CVE_TESTS@\nDISABLE_NAN_TESTS=@DISABLE_NAN_TESTS@\nexport DISABLE_DYNLOADING=@DISABLE_DYNLOADING@\nexport DISABLE_PYTHON=@DISABLE_PYTHON@\nexport DOCDIR=@DOCDIR@\nDOTNET=@DOTNET@\nDOTNET_ROOT=@DOTNET_ROOT@\nexport DOXYGEN=@DOXYGEN@\nexport DO_FETCH_TARBALLS=@DO_FETCH_TARBALLS@\nexport DRAGONBOX_CFLAGS=@DRAGONBOX_CFLAGS@\nexport FROZEN_CFLAGS=@FROZEN_CFLAGS@\nexport DPKG=@DPKG@\nexport EBOOK_CFLAGS=$(gb_SPACE)@EBOOK_CFLAGS@\nexport EBOOK_LIBS=$(gb_SPACE)@EBOOK_LIBS@\nexport EMSDK_FILE_PACKAGER=@EMSDK_FILE_PACKAGER@\nexport EMSCRIPTEN_EXTRA_SOFFICE_PRE_JS=@EMSCRIPTEN_EXTRA_SOFFICE_PRE_JS@\nexport EMSCRIPTEN_WORKERJS=@EMSCRIPTEN_WORKERJS@\nexport ENABLE_ANDROID_LOK=@ENABLE_ANDROID_LOK@\nexport ENABLE_ANDROID_EDITING=@ENABLE_ANDROID_EDITING@\nexport ENABLE_AVAHI=@ENABLE_AVAHI@\nexport ENABLE_MSVC_ANALYZE=@ENABLE_MSVC_ANALYZE@\nexport ENABLE_BREAKPAD=@ENABLE_BREAKPAD@\nexport DEFAULT_CRASHDUMP_VALUE=@DEFAULT_CRASHDUMP_VALUE@\nexport ENABLE_CAIRO_CANVAS=@ENABLE_CAIRO_CANVAS@\nexport ENABLE_CAIRO_RGBA=@ENABLE_CAIRO_RGBA@\nexport ENABLE_CIPHER_OPENSSL_BACKEND=@ENABLE_CIPHER_OPENSSL_BACKEND@\nexport ENABLE_CLI=@ENABLE_CLI@\nexport ENABLE_CLUCENE=@ENABLE_CLUCENE@\nexport ENABLE_LIBCMIS=@ENABLE_LIBCMIS@\nexport ENABLE_COINMP=@ENABLE_COINMP@\nSYSTEM_COINMP=@SYSTEM_COINMP@\nexport COINMP_CFLAGS=@COINMP_CFLAGS@\nexport COINMP_LIBS=@COINMP_LIBS@\nexport ENABLE_ATSPI_TESTS=@ENABLE_ATSPI_TESTS@\nexport ENABLE_CPDB=@ENABLE_CPDB@\nexport ENABLE_CUPS=@ENABLE_CUPS@\nexport ENABLE_CURL=@ENABLE_CURL@\nexport ENABLE_DBGUTIL=@ENABLE_DBGUTIL@\nexport ENABLE_DBUS=@ENABLE_DBUS@\nexport ENABLE_DCONF=@ENABLE_DCONF@\nexport ENABLE_DEBUG=@ENABLE_DEBUG@\nENABLE_DOTNET=@ENABLE_DOTNET@\nSYSTEM_DRAGONBOX=@SYSTEM_DRAGONBOX@\nSYSTEM_FROZEN=@SYSTEM_FROZEN@\nexport ENABLE_EMSCRIPTEN_JSPI=@ENABLE_EMSCRIPTEN_JSPI@\nexport ENABLE_EMSCRIPTEN_PROXY_POSIX_SOCKETS=@ENABLE_EMSCRIPTEN_PROXY_POSIX_SOCKETS@\nexport ENABLE_EMSCRIPTEN_PROXY_TO_PTHREAD=@ENABLE_EMSCRIPTEN_PROXY_TO_PTHREAD@\nexport ENABLE_EPOXY=@ENABLE_EPOXY@\nexport ENABLE_EOT=@ENABLE_EOT@\nexport ENABLE_EVOAB2=@ENABLE_EVOAB2@\nexport ENABLE_FIREBIRD_SDBC=@ENABLE_FIREBIRD_SDBC@\nexport ENABLE_FORMULA_LOGGER=@ENABLE_FORMULA_LOGGER@\nexport ENABLE_GDB_INDEX=@ENABLE_GDB_INDEX@\nexport ENABLE_GEN=@ENABLE_GEN@\nexport ENABLE_GIO=@ENABLE_GIO@\nexport ENABLE_GPGMEPP=@ENABLE_GPGMEPP@\nexport ENABLE_GSTREAMER_1_0=@ENABLE_GSTREAMER_1_0@\nexport ENABLE_GTK3=@ENABLE_GTK3@\nexport ENABLE_GTK4=@ENABLE_GTK4@\nexport ENABLE_GTKTILEDVIEWER=@ENABLE_GTKTILEDVIEWER@\nexport DISABLE_GUI=@DISABLE_GUI@\nexport ENABLE_HARDENING_FLAGS=@ENABLE_HARDENING_FLAGS@\nexport HARDENING_CFLAGS=@HARDENING_CFLAGS@\nexport HARDENING_OPT_CFLAGS=@HARDENING_OPT_CFLAGS@\nexport ENABLE_HEADLESS=@ENABLE_HEADLESS@\nexport ENABLE_HTMLHELP=@ENABLE_HTMLHELP@\nexport ENABLE_JAVA=@ENABLE_JAVA@\nexport ENABLE_JUMBO_SHEETS=@ENABLE_JUMBO_SHEETS@\nexport ENABLE_LDAP=@ENABLE_LDAP@\nexport ENABLE_LPSOLVE=@ENABLE_LPSOLVE@\nexport ENABLE_LTO=@ENABLE_LTO@\nexport ENABLE_LWP=@ENABLE_LWP@\nexport ENABLE_MACOSX_SANDBOX=@ENABLE_MACOSX_SANDBOX@\nexport ENABLE_MEDIAWIKI=@ENABLE_MEDIAWIKI@\nexport ENABLE_MARIADBC=@ENABLE_MARIADBC@\nexport ENABLE_NSS=@ENABLE_NSS@\nexport ENABLE_ONLINE_UPDATE=@ENABLE_ONLINE_UPDATE@\nexport ENABLE_ONLINE_UPDATE_MAR=@ENABLE_ONLINE_UPDATE_MAR@\nexport ENABLE_EXTENSION_UPDATE=@ENABLE_EXTENSION_UPDATE@\nexport ENABLE_OOENV=@ENABLE_OOENV@\nexport ENABLE_OPENGL_TRANSITIONS=@ENABLE_OPENGL_TRANSITIONS@\nexport ENABLE_OPENGL_CANVAS=@ENABLE_OPENGL_CANVAS@\nexport ENABLE_OPENSSL=@ENABLE_OPENSSL@\nexport ENABLE_OPTIMIZED=@ENABLE_OPTIMIZED@\nexport ENABLE_OPTIMIZED_DEBUG=@ENABLE_OPTIMIZED_DEBUG@\nexport ENABLE_PAGEIN=@ENABLE_PAGEIN@\nexport ENABLE_PCH=@ENABLE_PCH@\nexport ENABLE_PDFIMPORT=@ENABLE_PDFIMPORT@\nexport ENABLE_PDFIUM=@ENABLE_PDFIUM@\nexport ENABLE_POPPLER=@ENABLE_POPPLER@\nexport ENABLE_QT5=@ENABLE_QT5@\nexport ENABLE_QT6=@ENABLE_QT6@\nexport ENABLE_QT6_MULTIMEDIA=@ENABLE_QT6_MULTIMEDIA@\nexport ENABLE_KF5=@ENABLE_KF5@\nexport ENABLE_KF6=@ENABLE_KF6@\nexport ENABLE_GTK3_KDE5=@ENABLE_GTK3_KDE5@\nexport ENABLE_RANDR=@ENABLE_RANDR@\nexport ENABLE_RELEASE_BUILD=@ENABLE_RELEASE_BUILD@\nexport ENABLE_REPORTBUILDER=@ENABLE_REPORTBUILDER@\nexport ENABLE_RUNTIME_OPTIMIZATIONS=@ENABLE_RUNTIME_OPTIMIZATIONS@\nexport ENABLE_SAL_LOG=@ENABLE_SAL_LOG@\nexport ENABLE_SCRIPTING_BEANSHELL=@ENABLE_SCRIPTING_BEANSHELL@\nexport ENABLE_SCRIPTING_JAVASCRIPT=@ENABLE_SCRIPTING_JAVASCRIPT@\nexport ENABLE_SDREMOTE=@ENABLE_SDREMOTE@\nexport ENABLE_SDREMOTE_BLUETOOTH=@ENABLE_SDREMOTE_BLUETOOTH@\nexport ENABLE_CUSTOMTARGET_COMPONENTS=@ENABLE_CUSTOMTARGET_COMPONENTS@\nexport ENABLE_SILENT_MSI=@ENABLE_SILENT_MSI@\nexport ENABLE_SKIA=@ENABLE_SKIA@\nexport ENABLE_SKIA_DEBUG=@ENABLE_SKIA_DEBUG@\nexport ENABLE_SYMBOLS_FOR=@ENABLE_SYMBOLS_FOR@\nexport ENABLE_VALGRIND=@ENABLE_VALGRIND@\nexport ENABLE_WASM_STRIP_ACCESSIBILITY=@ENABLE_WASM_STRIP_CALC@\nexport ENABLE_WASM_STRIP_BASIC_DRAW_MATH_IMPRESS=@ENABLE_WASM_STRIP@\nexport ENABLE_WASM_STRIP_WRITER=@ENABLE_WASM_STRIP_WRITER@\nexport ENABLE_WASM_STRIP_CALC=@ENABLE_WASM_STRIP_CALC@\nexport ENABLE_WASM_STRIP_CANVAS=@ENABLE_WASM_STRIP@\nexport ENABLE_WASM_STRIP_CHART=\nexport ENABLE_WASM_STRIP_DBACCESS=@ENABLE_WASM_STRIP@\nexport ENABLE_WASM_STRIP_EPUB=@ENABLE_WASM_STRIP@\nexport ENABLE_WASM_STRIP_EXTRA=@ENABLE_WASM_STRIP@\nexport ENABLE_WASM_STRIP_GUESSLANG=@ENABLE_WASM_STRIP@\nexport ENABLE_WASM_STRIP_HUNSPELL=\nexport ENABLE_WASM_STRIP_LANGUAGETOOL=@ENABLE_WASM_STRIP@\nexport ENABLE_WASM_STRIP_LOCALES=@ENABLE_WASM_STRIP@\nexport ENABLE_WASM_STRIP_PINGUSER=@ENABLE_WASM_STRIP@\nexport ENABLE_WASM_STRIP_PREMULTIPLY=@ENABLE_WASM_STRIP@\nexport ENABLE_WASM_STRIP_RECENT=\nexport ENABLE_WASM_STRIP_RECOVERYUI=@ENABLE_WASM_STRIP@\nexport ENABLE_WASM_STRIP_SPLASH=@ENABLE_WASM_STRIP@\nexport ENABLE_WASM_STRIP_SWEXPORTS=@ENABLE_WASM_STRIP@\nexport ENABLE_WASM_STRIP_SCEXPORTS=@ENABLE_WASM_STRIP@\nexport ENABLE_WERROR=@ENABLE_WERROR@\nENABLE_WIX=@ENABLE_WIX@\nexport ENABLE_Z7_DEBUG=@ENABLE_Z7_DEBUG@\nexport ENDIANNESS=@ENDIANNESS@\nexport EPM=@EPM@\nexport EPM_FLAGS=@EPM_FLAGS@\nexport EPUBGEN_CFLAGS=$(gb_SPACE)@EPUBGEN_CFLAGS@\nexport EPUBGEN_LIBS=$(gb_SPACE)@EPUBGEN_LIBS@\nexport ETONYEK_CFLAGS=$(gb_SPACE)@ETONYEK_CFLAGS@\nexport ETONYEK_LIBS=$(gb_SPACE)@ETONYEK_LIBS@\nexport debug=@ENABLE_DEBUG@\nexport FIND=@FIND@\nexport FIREBIRD_CFLAGS=$(gb_SPACE)@FIREBIRD_CFLAGS@\nexport FIREBIRD_LIBS=$(gb_SPACE)@FIREBIRD_LIBS@\nexport FLEX=@FLEX@\nexport FLUTE_JAR=@FLUTE_JAR@\nexport FONTCONFIG_CFLAGS=$(gb_SPACE)@FONTCONFIG_CFLAGS@\nexport FONTCONFIG_LIBS=$(gb_SPACE)@FONTCONFIG_LIBS@\nexport FONTFORGE=@FONTFORGE@\nexport FREEHAND_CFLAGS=$(gb_SPACE)@FREEHAND_CFLAGS@\nexport FREEHAND_LIBS=$(gb_SPACE)@FREEHAND_LIBS@\nexport FREETYPE_CFLAGS=$(gb_SPACE)@FREETYPE_CFLAGS@\nexport FREETYPE_LIBS=$(gb_SPACE)@FREETYPE_LIBS@\nexport GCC_VERSION=@GCC_VERSION@\nexport GIO_CFLAGS=$(gb_SPACE)@GIO_CFLAGS@\nexport GIO_LIBS=$(gb_SPACE)@GIO_LIBS@\nexport GIT_REFERENCE_SRC=@GIT_REFERENCE_SRC@\nexport GIT_LINK_SRC=@GIT_LINK_SRC@\nexport GIT_NEEDED_SUBMODULES=@GIT_NEEDED_SUBMODULES@\nexport EPOXY_CFLAGS=$(gb_SPACE)@EPOXY_CFLAGS@\nexport EPOXY_LIBS=$(gb_SPACE)@EPOXY_LIBS@\nexport GLM_CFLAGS=$(gb_SPACE)@GLM_CFLAGS@\nexport GPG_ERROR_CFLAGS=$(gb_SPACE)@GPG_ERROR_CFLAGS@\nexport GPG_ERROR_LIBS=$(gb_SPACE)@GPG_ERROR_LIBS@\nexport GPGMEPP_CFLAGS=$(gb_SPACE)@GPGMEPP_CFLAGS@\nexport GPGMEPP_LIBS=$(gb_SPACE)@GPGMEPP_LIBS@\nexport PARALLELISM?=@PARALLELISM@\n@x_GNUCP@ export GNUCOPY=@GNUCP@\nexport GNUPATCH=@GNUPATCH@\nexport GNUTAR=@GNUTAR@\nexport GOBJECT_CFLAGS=$(gb_SPACE)@GOBJECT_CFLAGS@\nexport GOBJECT_LIBS=$(gb_SPACE)@GOBJECT_LIBS@\nexport GPERF=@GPERF@\nexport GRAPHITE_CFLAGS=$(gb_SPACE)@GRAPHITE_CFLAGS@\nexport GRAPHITE_LIBS=$(gb_SPACE)@GRAPHITE_LIBS@\nexport HARFBUZZ_CFLAGS=$(gb_SPACE)@HARFBUZZ_CFLAGS@\nexport HARFBUZZ_LIBS=$(gb_SPACE)@HARFBUZZ_LIBS@\n@x_Cygwin@ export GREP=@WIN_GREP@\nexport GSSAPI_LIBS=@GSSAPI_LIBS@\nexport GSTREAMER_1_0_CFLAGS=$(gb_SPACE)@GSTREAMER_1_0_CFLAGS@\nexport GSTREAMER_1_0_LIBS=$(gb_SPACE)@GSTREAMER_1_0_LIBS@\nexport GTK3_CFLAGS=$(gb_SPACE)@GTK3_CFLAGS@\nexport GTK3_LIBS=$(gb_SPACE)@GTK3_LIBS@\nexport GTK4_CFLAGS=$(gb_SPACE)@GTK4_CFLAGS@\nexport GTK4_LIBS=$(gb_SPACE)@GTK4_LIBS@\nexport USING_X11=@USING_X11@\nexport HAMCREST_JAR=@HAMCREST_JAR@\nexport HAVE_ASM_END_BRANCH_INS_SUPPORT=@HAVE_ASM_END_BRANCH_INS_SUPPORT@\nexport HAVE_BROKEN_GCC_WMAYBE_UNINITIALIZED=@HAVE_BROKEN_GCC_WMAYBE_UNINITIALIZED@\nexport HAVE_BROKEN_GCC_WSTRINGOP_OVERFLOW=@HAVE_BROKEN_GCC_WSTRINGOP_OVERFLOW@\nexport HAVE_CLANG_DEBUG_INFO_KIND_CONSTRUCTOR=@HAVE_CLANG_DEBUG_INFO_KIND_CONSTRUCTOR@\nexport HAVE_CXX20_ATOMIC_REF=@HAVE_CXX20_ATOMIC_REF@\nexport HAVE_DLLEXPORTINLINES=@HAVE_DLLEXPORTINLINES@\nexport HAVE_EXTERNAL_DWARF=@HAVE_EXTERNAL_DWARF@\nexport HAVE_LO_CLANG_DLLEXPORTINLINES=@HAVE_LO_CLANG_DLLEXPORTINLINES@\nexport HAVE_GCC_AVX=@HAVE_GCC_AVX@\nexport HAVE_GCC_BUILTIN_ATOMIC=@HAVE_GCC_BUILTIN_ATOMIC@\nexport HAVE_GCC_FNO_ENFORCE_EH_SPECS=@HAVE_GCC_FNO_ENFORCE_EH_SPECS@\nexport HAVE_GCC_FNO_SIZED_DEALLOCATION=@HAVE_GCC_FNO_SIZED_DEALLOCATION@\nexport HAVE_GCC_GGDB2=@HAVE_GCC_GGDB2@\nexport HAVE_GCC_STACK_CLASH_PROTECTION=@HAVE_GCC_STACK_CLASH_PROTECTION@\nexport HAVE_LD_BSYMBOLIC_FUNCTIONS=@HAVE_LD_BSYMBOLIC_FUNCTIONS@\nexport HAVE_LD_HASH_STYLE=@HAVE_LD_HASH_STYLE@\nexport HAVE_LIBCPP=@HAVE_LIBCPP@\nexport HAVE_LIBSTDCPP=@HAVE_LIBSTDCPP@\nexport HAVE_POSIX_FALLOCATE=@HAVE_POSIX_FALLOCATE@\nexport HAVE_WDEPRECATED_COPY_DTOR=@HAVE_WDEPRECATED_COPY_DTOR@\nexport HELP_ONLINE=@HELP_ONLINE@\nexport HELP_OMINDEX_PAGE=@HELP_OMINDEX_PAGE@\nexport HOST_PLATFORM=@HOST_PLATFORM@\nexport HSQLDB_JAR=@HSQLDB_JAR@\nexport HUNSPELL_CFLAGS=$(gb_SPACE)@HUNSPELL_CFLAGS@\nexport HUNSPELL_LIBS=$(gb_SPACE)@HUNSPELL_LIBS@\nexport HYPHEN_LIB=$(gb_SPACE)@HYPHEN_LIB@\nexport HYPH_SYSTEM_DIR=@HYPH_SYSTEM_DIR@\nexport ICECREAM_RUN=@ICECREAM_RUN@\n@x_ICECC_VERSION@ export ICECC_VERSION=@ICECC_VERSION@\nexport ICU_CFLAGS=$(gb_SPACE)@ICU_CFLAGS@\nexport ICU_LIBS=$(gb_SPACE)@ICU_LIBS@\nexport ICU_MAJOR=@ICU_MAJOR@\nexport ICU_MINOR=@ICU_MINOR@\nexport INTROSPECTION_SCANNER=@INTROSPECTION_SCANNER@\nexport ILIB=@ILIB@\nexport ILIB_FOR_BUILD=@ILIB_FOR_BUILD@\nexport INSTALLDIR=@INSTALLDIR@\nexport INSTALLDIRNAME=@INSTALLDIRNAME@\nexport INSTALL_NAME_TOOL=@INSTALL_NAME_TOOL@\nexport INSTDIR=@INSTDIR@\nexport INSTDIR_FOR_BUILD=@INSTDIR_FOR_BUILD@\nexport INSTROOT=@INSTROOT@\nexport INSTROOTBASE=@INSTROOTBASE@\nexport INSTROOT_FOR_BUILD=@INSTROOT_FOR_BUILD@\nexport JAVACOMPILER=@JAVACOMPILER@\nexport JAVADOC=@JAVADOC@\nexport JAVADOCISGJDOC=@JAVADOCISGJDOC@\nexport JAVACFLAGS=@JAVACFLAGS@\nexport JAVAIFLAGS=@JAVAIFLAGS@\nexport JAVAIFLAGS_FOR_BUILD=@JAVAIFLAGS_FOR_BUILD@\nexport JAVAINTERPRETER=@JAVAINTERPRETER@\nexport JAVA_HOME=@JAVA_HOME@\nexport JAVA_HOME_FOR_BUILD=@JAVA_HOME_FOR_BUILD@\nexport JAVA_SOURCE_VER=@JAVA_SOURCE_VER@\nexport JAVA_TARGET_VER=@JAVA_TARGET_VER@\nexport JAWTLIB=@JAWTLIB@\nexport JDK=@JDK@\nexport JDK_FOR_BUILD=@JDK_FOR_BUILD@\nexport JDK_SECURITYMANAGER_DISALLOWED_FOR_BUILD=@JDK_SECURITYMANAGER_DISALLOWED_FOR_BUILD@\nexport JFREEREPORT_JAR=@JFREEREPORT_JAR@\nexport JITC_PROCESSOR_TYPE=@JITC_PROCESSOR_TYPE@\nJOM=@JOM@\nexport JQ=@JQ@\nexport JVM_ONE_PATH_CHECK=@JVM_ONE_PATH_CHECK@\nexport KF5_CFLAGS=$(gb_SPACE)@KF5_CFLAGS@\nexport KF5_LIBS=$(gb_SPACE)@KF5_LIBS@\nexport KF6_CFLAGS=$(gb_SPACE)@KF6_CFLAGS@\nexport KF6_LIBS=$(gb_SPACE)@KF6_LIBS@\nexport KRB5_LIBS=@KRB5_LIBS@\nexport JAVA_WEBSOCKET_JAR=@JAVA_WEBSOCKET_JAR@\nexport LCMS2_CFLAGS=$(gb_SPACE)@LCMS2_CFLAGS@\nexport LCMS2_LIBS=$(gb_SPACE)@LCMS2_LIBS@\nexport LD=@LD@\nexport LD_GC_SECTIONS=@LD_GC_SECTIONS@\nexport LD_PLUGIN=@LD_PLUGIN@\n@x_LDFLAGS@ export LDFLAGS=@LDFLAGS@\nexport LFS_CFLAGS=@LFS_CFLAGS@\nexport LIBASSUAN_CFLAGS=$(gb_SPACE)@LIBASSUAN_CFLAGS@\nexport LIBASSUAN_LIBS=$(gb_SPACE)@LIBASSUAN_LIBS@\nexport LIBBASE_JAR=@LIBBASE_JAR@\nexport LIBCPP_DEBUG=@LIBCPP_DEBUG@\nexport LIBDIR=@LIBDIR@\nexport LIBEOT_CFLAGS=$(gb_SPACE)@LIBEOT_CFLAGS@\nexport LIBEOT_LIBS=$(gb_SPACE)@LIBEOT_LIBS@\nexport LIBEXSLT_CFLAGS=$(gb_SPACE)@LIBEXSLT_CFLAGS@\nexport LIBEXSLT_LIBS=$(gb_SPACE)@LIBEXSLT_LIBS@\nexport LIBEXTTEXTCAT_CFLAGS=$(gb_SPACE)@LIBEXTTEXTCAT_CFLAGS@\nexport LIBEXTTEXTCAT_LIBS=$(gb_SPACE)@LIBEXTTEXTCAT_LIBS@\nexport LIBFONTS_JAR=@LIBFONTS_JAR@\nexport LIBFORMULA_JAR=@LIBFORMULA_JAR@\nexport LIBJPEG_CFLAGS=$(gb_SPACE)@LIBJPEG_CFLAGS@\nexport LIBJPEG_LIBS=$(gb_SPACE)@LIBJPEG_LIBS@\nexport LIBLANGTAG_CFLAGS=$(gb_SPACE)@LIBLANGTAG_CFLAGS@\nexport LIBLANGTAG_LIBS=$(gb_SPACE)@LIBLANGTAG_LIBS@\nexport LIBLAYOUT_JAR=@LIBLAYOUT_JAR@\nexport LIBLOADER_JAR=@LIBLOADER_JAR@\nexport LIBNUMBERTEXT_CFLAGS=$(gb_SPACE)@LIBNUMBERTEXT_CFLAGS@\nexport LIBNUMBERTEXT_LIBS=$(gb_SPACE)@LIBNUMBERTEXT_LIBS@\nexport LIB_FUZZING_ENGINE=@LIB_FUZZING_ENGINE@\nexport LIBO_BIN_FOLDER=@LIBO_BIN_FOLDER@\nexport LIBO_BIN_FOLDER_FOR_BUILD=@LIBO_BIN_FOLDER_FOR_BUILD@\nexport LIBO_ETC_FOLDER=@LIBO_ETC_FOLDER@\nexport LIBO_LIB_FOLDER=@LIBO_LIB_FOLDER@\nexport LIBO_LIB_FOLDER_FOR_BUILD=@LIBO_LIB_FOLDER_FOR_BUILD@\nexport LIBO_LIB_PYUNO_FOLDER=@LIBO_LIB_PYUNO_FOLDER@\nexport LIBO_SHARE_FOLDER=@LIBO_SHARE_FOLDER@\nexport LIBO_SHARE_HELP_FOLDER=@LIBO_SHARE_HELP_FOLDER@\nLIBO_SHARE_DOTNET_FOLDER=@LIBO_SHARE_DOTNET_FOLDER@\nexport LIBO_SHARE_JAVA_FOLDER=@LIBO_SHARE_JAVA_FOLDER@\nexport LIBO_SHARE_PRESETS_FOLDER=@LIBO_SHARE_PRESETS_FOLDER@\nexport LIBO_SHARE_READMES_FOLDER=@LIBO_SHARE_READMES_FOLDER@\nexport LIBO_SHARE_RESOURCE_FOLDER=@LIBO_SHARE_RESOURCE_FOLDER@\nexport LIBO_URE_BIN_FOLDER=@LIBO_URE_BIN_FOLDER@\nexport LIBO_URE_ETC_FOLDER=@LIBO_URE_ETC_FOLDER@\nexport LIBO_URE_LIB_FOLDER=@LIBO_URE_LIB_FOLDER@\nexport LIBO_URE_LIB_FOLDER_FOR_BUILD=@LIBO_URE_LIB_FOLDER_FOR_BUILD@\nexport LIBO_URE_MISC_FOLDER=@LIBO_URE_MISC_FOLDER@\nexport LIBO_URE_MISC_FOLDER_FOR_BUILD=@LIBO_URE_MISC_FOLDER_FOR_BUILD@\nexport LIBO_URE_SHARE_JAVA_FOLDER=@LIBO_URE_SHARE_JAVA_FOLDER@\nexport LIBO_VERSION_MAJOR=@LIBO_VERSION_MAJOR@\nexport LIBO_VERSION_MICRO=@LIBO_VERSION_MICRO@\nexport LIBO_VERSION_MINOR=@LIBO_VERSION_MINOR@\nexport LIBO_VERSION_PATCH=@LIBO_VERSION_PATCH@\nexport LIBO_VERSION_SUFFIX=@LIBO_VERSION_SUFFIX@\nexport LIBO_VERSION_SUFFIX_SUFFIX=@LIBO_VERSION_SUFFIX_SUFFIX@\nexport LIBPNG_CFLAGS=$(gb_SPACE)@LIBPNG_CFLAGS@\nexport LIBPNG_LIBS=$(gb_SPACE)@LIBPNG_LIBS@\nexport LIBREPOSITORY_JAR=@LIBREPOSITORY_JAR@\nexport LIBSERIALIZER_JAR=@LIBSERIALIZER_JAR@\nexport LIBTIFF_CFLAGS=$(gb_SPACE)@LIBTIFF_CFLAGS@\nexport LIBTIFF_LIBS=$(gb_SPACE)@LIBTIFF_LIBS@\nexport LIBTOMMATH_CFLAGS=@LIBTOMMATH_CFLAGS@\nexport LIBTOMMATH_LIBS=@LIBTOMMATH_LIBS@\nexport LIBTOOL=@LIBTOOL@\nexport LIBWEBP_CFLAGS=$(gb_SPACE)@LIBWEBP_CFLAGS@\nexport LIBWEBP_LIBS=$(gb_SPACE)@LIBWEBP_LIBS@\nexport LIBXML_CFLAGS=$(gb_SPACE)@LIBXML_CFLAGS@\nexport LIBXML_JAR=@LIBXML_JAR@\nexport LIBXML_LIBS=$(gb_SPACE)@LIBXML_LIBS@\nexport LIBXSLT_CFLAGS=$(gb_SPACE)@LIBXSLT_CFLAGS@\nexport LIBXSLT_LIBS=$(gb_SPACE)@LIBXSLT_LIBS@\nexport LIBFIXMATH_LIBS=$(gb_SPACE)@LIBFIXMATH_LIBS@\nexport LOCKFILE=@LOCKFILE@\nexport LO_CLANG_CC=@LO_CLANG_CC@\nexport LO_CLANG_CXX=@LO_CLANG_CXX@\nexport LO_CLANG_CXXFLAGS_INTRINSICS_SSE2=@LO_CLANG_CXXFLAGS_INTRINSICS_SSE2@\nexport LO_CLANG_CXXFLAGS_INTRINSICS_SSSE3=@LO_CLANG_CXXFLAGS_INTRINSICS_SSSE3@\nexport LO_CLANG_CXXFLAGS_INTRINSICS_SSE41=@LO_CLANG_CXXFLAGS_INTRINSICS_SSE41@\nexport LO_CLANG_CXXFLAGS_INTRINSICS_SSE42=@LO_CLANG_CXXFLAGS_INTRINSICS_SSE42@\nexport LO_CLANG_CXXFLAGS_INTRINSICS_AVX=@LO_CLANG_CXXFLAGS_INTRINSICS_AVX@\nexport LO_CLANG_CXXFLAGS_INTRINSICS_AVX2=@LO_CLANG_CXXFLAGS_INTRINSICS_AVX2@\nexport LO_CLANG_CXXFLAGS_INTRINSICS_AVX512=@LO_CLANG_CXXFLAGS_INTRINSICS_AVX512@\nexport LO_CLANG_CXXFLAGS_INTRINSICS_AVX512F=@LO_CLANG_CXXFLAGS_INTRINSICS_AVX512F@\nexport LO_CLANG_CXXFLAGS_INTRINSICS_F16C=@LO_CLANG_CXXFLAGS_INTRINSICS_F16C@\nexport LO_CLANG_CXXFLAGS_INTRINSICS_FMA=@LO_CLANG_CXXFLAGS_INTRINSICS_FMA@\nexport LO_CLANG_SHOWINCLUDES_PREFIX=@LO_CLANG_SHOWINCLUDES_PREFIX@\nexport LO_CLANG_VERSION=@LO_CLANG_VERSION@\n@x_LO_ELFCHECK_ALLOWLIST@ export LO_ELFCHECK_ALLOWLIST=@LO_ELFCHECK_ALLOWLIST@\n@x_Cygwin@ export LS=@WIN_LS@\nexport MACOSX_BUNDLE_IDENTIFIER=@MACOSX_BUNDLE_IDENTIFIER@\nexport MACOSX_CODESIGNING_IDENTITY=@MACOSX_CODESIGNING_IDENTITY@\nexport MACOSX_DEPLOYMENT_TARGET=@MACOSX_DEPLOYMENT_TARGET@\nexport MACOSX_PACKAGE_SIGNING_IDENTITY=@MACOSX_PACKAGE_SIGNING_IDENTITY@\nexport MACOSX_PROVISIONING_PROFILE=@MACOSX_PROVISIONING_PROFILE@\nexport MACOSX_SDK_PATH=@MACOSX_SDK_PATH@\nexport MAC_OS_X_VERSION_MIN_REQUIRED=@MAC_OS_X_VERSION_MIN_REQUIRED@\nexport MANDIR=@MANDIR@\nexport MARIADBC_MAJOR=@MARIADBC_MAJOR@\nexport MARIADBC_MICRO=@MARIADBC_MICRO@\nexport MARIADBC_MINOR=@MARIADBC_MINOR@\nexport MARIADB_CFLAGS=$(gb_SPACE)@MARIADB_CFLAGS@\nexport MARIADB_LIBS=$(gb_SPACE)@MARIADB_LIBS@\nexport LIBMARIADB=@LIBMARIADB@\nexport LIBMARIADB_PATH=@LIBMARIADB_PATH@\nexport BUNDLE_MARIADB_CONNECTOR_C=@BUNDLE_MARIADB_CONNECTOR_C@\nexport MDDS_CFLAGS=$(gb_SPACE)@MDDS_CFLAGS@\nexport MDDS_LIBS=$(gb_SPACE)@MDDS_LIBS@\nexport MERGELIBS=@MERGELIBS@\nexport MERGELIBS_MORE=@MERGELIBS_MORE@\nexport ML_EXE=@ML_EXE@\nexport MOC5=@MOC5@\nexport MOC6=@MOC6@\nMODULAR_JAVA=@MODULAR_JAVA@\nexport MPL_SUBSET=@MPL_SUBSET@\nexport MSGFMT=@MSGFMT@\nexport MSGUNIQ=@MSGUNIQ@\nexport MSM_PATH=@MSM_PATH@\nexport MSPUB_CFLAGS=$(gb_SPACE)@MSPUB_CFLAGS@\nexport MSPUB_LIBS=$(gb_SPACE)@MSPUB_LIBS@\nexport MSVC_CXX=@MSVC_CXX@\nexport MSVC_DLLS=@MSVC_DLLS@\nexport MSVC_DLL_PATH=@MSVC_DLL_PATH@\nexport MSVC_USE_DEBUG_RUNTIME=@MSVC_USE_DEBUG_RUNTIME@\nexport MWAW_CFLAGS=$(gb_SPACE)@MWAW_CFLAGS@\nexport MWAW_LIBS=$(gb_SPACE)@MWAW_LIBS@\nexport MYTHES_CFLAGS=$(gb_SPACE)@MYTHES_CFLAGS@\nexport MYTHES_LIBS=$(gb_SPACE)@MYTHES_LIBS@\nexport NASM=@NASM@\nexport NAFLAGS=@NAFLAGS@\nexport NM=@NM@\nexport NSS_CFLAGS=$(gb_SPACE)@NSS_CFLAGS@\nexport NSS_LIBS=$(gb_SPACE)@NSS_LIBS@\nexport NUMBERTEXT_EXTENSION_PACK=@NUMBERTEXT_EXTENSION_PACK@\nexport nodep=@nodep@\n@x_OBJCFLAGS@ export OBJCFLAGS=@OBJCFLAGS@\n@x_OBJCXXFLAGS@ export OBJCXXFLAGS=@OBJCXXFLAGS@\nexport OBJDUMP=@OBJDUMP@\nexport ODFGEN_CFLAGS=$(gb_SPACE)@ODFGEN_CFLAGS@\nexport ODFGEN_LIBS=$(gb_SPACE)@ODFGEN_LIBS@\nexport ODFVALIDATOR=@ODFVALIDATOR@\nexport OFFICEOTRON=@OFFICEOTRON@\nexport BFFVALIDATOR=@BFFVALIDATOR@\nexport ONLINEUPDATE_MAR_BASEURL=@ONLINEUPDATE_MAR_BASEURL@\nexport ONLINEUPDATE_MAR_CERTIFICATEDER=@ONLINEUPDATE_MAR_CERTIFICATEDER@\nexport ONLINEUPDATE_MAR_CERTIFICATENAME=@ONLINEUPDATE_MAR_CERTIFICATENAME@\nexport ONLINEUPDATE_MAR_CERTIFICATEPATH=@ONLINEUPDATE_MAR_CERTIFICATEPATH@\nexport OOO_JUNIT_JAR=@OOO_JUNIT_JAR@\nexport OOO_VENDOR=@OOO_VENDOR@\nexport OPENSSL_CFLAGS=$(gb_SPACE)@OPENSSL_CFLAGS@\nexport OPENSSL_LIBS=$(gb_SPACE)@OPENSSL_LIBS@\nexport ORCUS_CFLAGS=$(gb_SPACE)@ORCUS_CFLAGS@\nexport ORCUS_LIBS=$(gb_SPACE)@ORCUS_LIBS@\nexport OS=@OS@\nexport OS_FOR_BUILD=@OS_FOR_BUILD@\nexport PATH=@LO_PATH@\nexport LIBO_PATH_SEPARATOR=@P_SEP@\nexport PAGEMAKER_CFLAGS=$(gb_SPACE)@PAGEMAKER_CFLAGS@\nexport PAGEMAKER_LIBS=$(gb_SPACE)@PAGEMAKER_LIBS@\nexport PCH_INSTANTIATE_TEMPLATES=@PCH_INSTANTIATE_TEMPLATES@\nexport PCH_CODEGEN=@PCH_CODEGEN@\nexport PCH_DEBUGINFO=@PCH_DEBUGINFO@\nexport PCH_NO_CODEGEN=@PCH_NO_CODEGEN@\nexport PERL=@PERL@\nexport PKGFORMAT?=@PKGFORMAT@\nexport PKGMK=@PKGMK@\nexport PKG_CONFIG=@PKG_CONFIG@\nifneq (@PKG_CONFIG_PATH@,)\nexport PKG_CONFIG_PATH=@PKG_CONFIG_PATH@\nelse\nunexport PKG_CONFIG_PATH\nendif\nifneq (@PKG_CONFIG_LIBDIR@,)\nexport PKG_CONFIG_LIBDIR=@PKG_CONFIG_LIBDIR@\nelse\nunexport PKG_CONFIG_LIBDIR\nendif\nexport PLATFORMID=@PLATFORMID@\nexport POPPLER_CFLAGS=$(gb_SPACE)@POPPLER_CFLAGS@\nexport POPPLER_LIBS=$(gb_SPACE)@POPPLER_LIBS@\nexport POSTGRESQL_INC=@POSTGRESQL_INC@\nexport POSTGRESQL_LIB=@POSTGRESQL_LIB@\nexport PREFIXDIR=@PREFIXDIR@\nexport PRIVACY_POLICY_URL=@PRIVACY_POLICY_URL@\nexport PRODUCTNAME=@PRODUCTNAME@\nexport PRODUCTNAME_WITHOUT_SPACES=@PRODUCTNAME_WITHOUT_SPACES@\nexport PRODUCTVERSION=@PRODUCTVERSION@\nexport PROGRESSBARCOLOR=@PROGRESSBARCOLOR@\nexport PROGRESSFRAMECOLOR=@PROGRESSFRAMECOLOR@\nexport PROGRESSPOSITION=@PROGRESSPOSITION@\nexport PROGRESSSIZE=@PROGRESSSIZE@\nexport PROGRESSTEXTBASELINE=@PROGRESSTEXTBASELINE@\nexport PROGRESSTEXTCOLOR=@PROGRESSTEXTCOLOR@\nexport PTHREAD_CFLAGS=@PTHREAD_CFLAGS@\nexport PTHREAD_LIBS=@PTHREAD_LIBS@\nexport PYTHON_CFLAGS=$(gb_SPACE)@PYTHON_CFLAGS@\nexport PYTHON_FOR_BUILD=@PYTHON_FOR_BUILD@\nexport PYTHON_LIBS=$(gb_SPACE)@PYTHON_LIBS@\nexport PYTHON_VERSION=@PYTHON_VERSION@\nexport PYTHON_VERSION_MAJOR=@PYTHON_VERSION_MAJOR@\nexport PYTHON_VERSION_MINOR=@PYTHON_VERSION_MINOR@\nexport PYTHONWARNINGS=@PYTHONWARNINGS@\nexport ENABLE_ZXING=@ENABLE_ZXING@\nexport ZXING_CFLAGS=$(gb_SPACE)@ZXING_CFLAGS@\nexport ZXING_LIBS=$(gb_SPACE)@ZXING_LIBS@\nexport QT5_CFLAGS=$(gb_SPACE)@QT5_CFLAGS@\nexport QT5_LIBS=$(gb_SPACE)@QT5_LIBS@\nexport QT5_GOBJECT_CFLAGS=$(gb_SPACE)@QT5_GOBJECT_CFLAGS@\nexport QT5_GOBJECT_LIBS=$(gb_SPACE)@QT5_GOBJECT_LIBS@\nexport QT5_HAVE_GOBJECT=@QT5_HAVE_GOBJECT@\nexport QT5_PLATFORMS_SRCDIR=@QT5_PLATFORMS_SRCDIR@\nexport QT6_CFLAGS=$(gb_SPACE)@QT6_CFLAGS@\nexport QT6_LIBS=$(gb_SPACE)@QT6_LIBS@\nexport QT6_PLATFORMS_SRCDIR=@QT6_PLATFORMS_SRCDIR@\nexport QXP_CFLAGS=$(gb_SPACE)@QXP_CFLAGS@\nexport QXP_LIBS=$(gb_SPACE)@QXP_LIBS@\nexport RANLIB=@RANLIB@\nexport RAPTOR_MAJOR=@RAPTOR_MAJOR@\nexport RASQAL_MAJOR=@RASQAL_MAJOR@\nexport READELF=@READELF@\nexport REDLAND_CFLAGS=$(gb_SPACE)@REDLAND_CFLAGS@\nexport REDLAND_LIBS=$(gb_SPACE)@REDLAND_LIBS@\nexport REDLAND_MAJOR=@REDLAND_MAJOR@\nexport REVENGE_CFLAGS=$(gb_SPACE)@REVENGE_CFLAGS@\nexport REVENGE_LIBS=$(gb_SPACE)@REVENGE_LIBS@\nexport RHINO_JAR=@RHINO_JAR@\nexport RPM=@RPM@\nexport RTL_ARCH=@RTL_ARCH@\nexport RTL_OS=@RTL_OS@\nexport SAC_JAR=@SAC_JAR@\nexport SAL_ENABLE_FILE_LOCKING=1\nexport SCPDEFS=@SCPDEFS@\nexport SDKDIRNAME=@SDKDIRNAME@\nexport SDKDIRNAME_FOR_BUILD=@SDKDIRNAME_FOR_BUILD@\nexport SHA256SUM=@SHA256SUM@\nexport SHOWINCLUDES_PREFIX=@SHOWINCLUDES_PREFIX@\nexport SIZEOF_SIZE_T=@SIZEOF_SIZE_T@\nexport SKIA_DISABLE_VMA_USE_STL_SHARED_MUTEX=@SKIA_DISABLE_VMA_USE_STL_SHARED_MUTEX@\nexport SKIA_GPU=@SKIA_GPU@\nexport SOLARINC=@SOLARINC@\nexport SORT=@SORT@\nexport SPLIT_APP_MODULES=@SPLIT_APP_MODULES@\nexport SPLIT_OPT_FEATURES=@SPLIT_OPT_FEATURES@\nexport SRCDIR=@SRC_ROOT@\nexport STAROFFICE_CFLAGS=$(gb_SPACE)@STAROFFICE_CFLAGS@\nexport STAROFFICE_LIBS=$(gb_SPACE)@STAROFFICE_LIBS@\nexport STRIP=@STRIP@\nexport STRIP_COMPONENTS=@STRIP_COMPONENTS@\nexport SYSBASE=@SYSBASE@\nSYSTEM_ABSEIL=@SYSTEM_ABSEIL@\nexport ABSEIL_CFLAGS=@ABSEIL_CFLAGS@\nexport ABSEIL_LIBS=@ABSEIL_LIBS@\nSYSTEM_ABW=@SYSTEM_ABW@\nARGON2_CFLAGS=$(gb_SPACE)@ARGON2_CFLAGS@\nARGON2_LIBS=$(gb_SPACE)@ARGON2_LIBS@\nSYSTEM_ARGON2=@SYSTEM_ARGON2@\nSYSTEM_BLUEZ=@SYSTEM_BLUEZ@\n# FIXME: concat-deps reads SYSTEM_BOOST from env\nSYSTEM_BOOST=@SYSTEM_BOOST@\nSYSTEM_BSH=@SYSTEM_BSH@\nSYSTEM_BOX2D=@SYSTEM_BOX2D@\nSYSTEM_BZIP2=@SYSTEM_BZIP2@\nSYSTEM_CAIRO=@SYSTEM_CAIRO@\nSYSTEM_CLUCENE=@SYSTEM_CLUCENE@\nSYSTEM_CPPUNIT=@SYSTEM_CPPUNIT@\nSYSTEM_CURL=@SYSTEM_CURL@\nSYSTEM_DICTS=@SYSTEM_DICTS@\nSYSTEM_EXPAT=@SYSTEM_EXPAT@\nSYSTEM_FONTCONFIG=@SYSTEM_FONTCONFIG@\nSYSTEM_FREETYPE=@SYSTEM_FREETYPE@\nSYSTEM_FIREBIRD=@SYSTEM_FIREBIRD@\nSYSTEM_GENBRK=@SYSTEM_GENBRK@\nSYSTEM_GENCCODE=@SYSTEM_GENCCODE@\nSYSTEM_GENCMN=@SYSTEM_GENCMN@\nSYSTEM_EPOXY=@SYSTEM_EPOXY@\nSYSTEM_GLM=@SYSTEM_GLM@\nSYSTEM_GPGMEPP=@SYSTEM_GPGMEPP@\nSYSTEM_GRAPHITE=@SYSTEM_GRAPHITE@\nSYSTEM_HARFBUZZ=@SYSTEM_HARFBUZZ@\nSYSTEM_HSQLDB=@SYSTEM_HSQLDB@\nSYSTEM_HUNSPELL=@SYSTEM_HUNSPELL@\nSYSTEM_HYPH=@SYSTEM_HYPH@\nSYSTEM_ICU=@SYSTEM_ICU@\nSYSTEM_JFREEREPORT=@SYSTEM_JFREEREPORT@\nSYSTEM_LIBJPEG=@SYSTEM_LIBJPEG@\nSYSTEM_LCMS2=@SYSTEM_LCMS2@\nSYSTEM_CDR=@SYSTEM_CDR@\nSYSTEM_LIBCMIS=@SYSTEM_LIBCMIS@\nSYSTEM_EBOOK=@SYSTEM_EBOOK@\nSYSTEM_ETONYEK=@SYSTEM_ETONYEK@\nSYSTEM_EPUBGEN=@SYSTEM_EPUBGEN@\nSYSTEM_FREEHAND=@SYSTEM_FREEHAND@\nSYSTEM_JAVA_WEBSOCKET=@SYSTEM_JAVA_WEBSOCKET@\nSYSTEM_LIBATOMIC_OPS=@SYSTEM_LIBATOMIC_OPS@\nSYSTEM_LIBEOT=@SYSTEM_LIBEOT@\nSYSTEM_LIBEXTTEXTCAT=@SYSTEM_LIBEXTTEXTCAT@\nSYSTEM_LIBEXTTEXTCAT_DATA=@SYSTEM_LIBEXTTEXTCAT_DATA@\nSYSTEM_LIBFIXMATH=@SYSTEM_LIBFIXMATH@\nSYSTEM_LIBLANGTAG=@SYSTEM_LIBLANGTAG@\nSYSTEM_LIBNUMBERTEXT=@SYSTEM_LIBNUMBERTEXT@\nSYSTEM_LIBNUMBERTEXT_DATA=@SYSTEM_LIBNUMBERTEXT_DATA@\nSYSTEM_LIBORCUS=@SYSTEM_LIBORCUS@\nSYSTEM_LIBPNG=@SYSTEM_LIBPNG@\nSYSTEM_LIBTIFF=@SYSTEM_LIBTIFF@\nSYSTEM_LIBTOMMATH=@SYSTEM_LIBTOMMATH@\nSYSTEM_LIBWEBP=@SYSTEM_LIBWEBP@\nSYSTEM_LIBXML=@SYSTEM_LIBXML@\nSYSTEM_LIBXML_FOR_BUILD=@SYSTEM_LIBXML_FOR_BUILD@\nSYSTEM_LIBXSLT=@SYSTEM_LIBXSLT@\nSYSTEM_LIBXSLT_FOR_BUILD=@SYSTEM_LIBXSLT_FOR_BUILD@\nSYSTEM_LPSOLVE=@SYSTEM_LPSOLVE@\nSYSTEM_MDDS=@SYSTEM_MDDS@\nSYSTEM_MARIADB_CONNECTOR_C=@SYSTEM_MARIADB_CONNECTOR_C@\nSYSTEM_MSPUB=@SYSTEM_MSPUB@\nSYSTEM_MWAW=@SYSTEM_MWAW@\nSYSTEM_MYTHES=@SYSTEM_MYTHES@\nSYSTEM_NSS=@SYSTEM_NSS@\nSYSTEM_ODBC_HEADERS=@SYSTEM_ODBC_HEADERS@\nSYSTEM_ODFGEN=@SYSTEM_ODFGEN@\nSYSTEM_OPENJPEG2=@SYSTEM_OPENJPEG2@\nexport OPENJPEG2_CFLAGS=@OPENJPEG2_CFLAGS@\nexport OPENJPEG2_LIBS=@OPENJPEG2_LIBS@\nSYSTEM_OPENLDAP=@SYSTEM_OPENLDAP@\nSYSTEM_OPENSSL=@SYSTEM_OPENSSL@\nSYSTEM_PAGEMAKER=@SYSTEM_PAGEMAKER@\nSYSTEM_POPPLER=@SYSTEM_POPPLER@\nSYSTEM_POSTGRESQL=@SYSTEM_POSTGRESQL@\nSYSTEM_PYTHON=@SYSTEM_PYTHON@\nSYSTEM_ZXCVBN=@SYSTEM_ZXCVBN@\nSYSTEM_ZXING=@SYSTEM_ZXING@\nSYSTEM_QXP=@SYSTEM_QXP@\nSYSTEM_REDLAND=@SYSTEM_REDLAND@\nSYSTEM_REVENGE=@SYSTEM_REVENGE@\nSYSTEM_RHINO=@SYSTEM_RHINO@\nSYSTEM_STAROFFICE=@SYSTEM_STAROFFICE@\nSYSTEM_VISIO=@SYSTEM_VISIO@\nSYSTEM_WPD=@SYSTEM_WPD@\nSYSTEM_WPG=@SYSTEM_WPG@\nSYSTEM_WPS=@SYSTEM_WPS@\nSYSTEM_XMLSEC=@SYSTEM_XMLSEC@\nSYSTEM_ZLIB=@SYSTEM_ZLIB@\nSYSTEM_ZMF=@SYSTEM_ZMF@\nexport SYSTEMD_ESCAPE=@SYSTEMD_ESCAPE@\nexport SYSTEMD_RUN=@SYSTEMD_RUN@\nexport TARFILE_LOCATION=@TARFILE_LOCATION@\nexport TESTINSTALLDIR=@TESTINSTALLDIR@\nexport THES_SYSTEM_DIR=@THES_SYSTEM_DIR@\nexport TLS=@TLS@\nexport TMP=@TEMP_DIRECTORY@\nexport TMPDIR=@TEMP_DIRECTORY@\nexport TOUCH=@TOUCH@\nexport UCRTSDKDIR=@UCRTSDKDIR@\nexport UCRTVERSION=@UCRTVERSION@\nexport UNIQ=@UNIQ@\nexport UNIX_DLAPI_LIBS=@UNIX_DLAPI_LIBS@\nexport USE_HEADLESS_CODE=@USE_HEADLESS_CODE@\nexport USE_LD=@USE_LD@\nexport USE_LIBRARY_BIN_TAR=@USE_LIBRARY_BIN_TAR@\nexport UUIDGEN=@UUIDGEN@\nexport VALGRIND_CFLAGS=$(gb_SPACE)@VALGRIND_CFLAGS@\nexport VCL_PLUGIN_INFO=@VCL_PLUGIN_INFO@\nexport VCTOOLSET=@VCTOOLSET@\nexport VCVER=@VCVER@\nexport DEVENV=@DEVENV@\nexport VISIO_CFLAGS=$(gb_SPACE)@VISIO_CFLAGS@\nexport VISIO_LIBS=$(gb_SPACE)@VISIO_LIBS@\nexport WGET=@WGET@\nexport WINDOWS_BUILD_SIGNING=@WINDOWS_BUILD_SIGNING@\nexport WINDOWS_SDK_HOME=@WINDOWS_SDK_HOME@\nexport WINDOWS_SDK_LIB_SUBDIR=@WINDOWS_SDK_LIB_SUBDIR@\nexport WINDOWS_SDK_VERSION=@WINDOWS_SDK_VERSION@\nexport WINDOWS_SDK_WILANGID=@WINDOWS_SDK_WILANGID@\nexport WINDOWS_X64=@WINDOWS_X64@\nexport WITH_COMPAT_OOWRAPPERS=@WITH_COMPAT_OOWRAPPERS@\nexport WITH_COREDUMPCTL=@WITH_COREDUMPCTL@\nexport WITH_EXTENSION_INTEGRATION=@WITH_EXTENSION_INTEGRATION@\nexport WITH_EXTRA_EXTENSIONS=@WITH_EXTRA_EXTENSIONS@\nexport WITH_FONTS=@WITH_FONTS@\nexport WITH_DOCREPAIR_FONTS=@WITH_DOCREPAIR_FONTS@\nexport WITH_GALLERY_BUILD=@WITH_GALLERY_BUILD@\nexport WITH_TEMPLATES=@WITH_TEMPLATES@\nexport WITH_GSSAPI=@WITH_GSSAPI@\nexport WITH_KRB5=@WITH_KRB5@\nexport WITH_LINKER_HASH_STYLE=@WITH_LINKER_HASH_STYLE@\nexport WITH_LOCALES=@WITH_LOCALES@\nexport WITH_MYSPELL_DICTS=@WITH_MYSPELL_DICTS@\nexport WITH_THEMES=@WITH_THEMES@\nexport WITH_WEBDAV=@WITH_WEBDAV@\nexport WORKDIR=@WORKDIR@\nexport WORKDIR_FOR_BUILD=@WORKDIR_FOR_BUILD@\nexport WPD_CFLAGS=$(gb_SPACE)@WPD_CFLAGS@\nexport WPD_LIBS=$(gb_SPACE)@WPD_LIBS@\nexport WPG_CFLAGS=$(gb_SPACE)@WPG_CFLAGS@\nexport WPG_LIBS=$(gb_SPACE)@WPG_LIBS@\nexport WPS_CFLAGS=$(gb_SPACE)@WPS_CFLAGS@\nexport WPS_LIBS=$(gb_SPACE)@WPS_LIBS@\nexport XINERAMA_LINK=@XINERAMA_LINK@\nexport XMLLINT=@XMLLINT@\nexport XMLSEC_CFLAGS=$(gb_SPACE)@XMLSEC_CFLAGS@\nexport XMLSEC_LIBS=$(gb_SPACE)@XMLSEC_LIBS@\nexport XRANDR_CFLAGS=$(gb_SPACE)@XRANDR_CFLAGS@\nexport XRANDR_LIBS=$(gb_SPACE)@XRANDR_LIBS@\nexport XRENDER_CFLAGS=$(gb_SPACE)@XRENDER_CFLAGS@\nexport XRENDER_LIBS=$(gb_SPACE)@XRENDER_LIBS@\nexport XSLTPROC=@XSLTPROC@\nexport XVFB_RUN=@XVFB_RUN@\nexport ZLIB_CFLAGS=$(gb_SPACE)@ZLIB_CFLAGS@\nexport ZLIB_LIBS=$(gb_SPACE)@ZLIB_LIBS@\nexport ZMF_CFLAGS=$(gb_SPACE)@ZMF_CFLAGS@\nexport ZMF_LIBS=$(gb_SPACE)@ZMF_LIBS@\nexport GET_TASK_ALLOW_ENTITLEMENT=@GET_TASK_ALLOW_ENTITLEMENT@\n\n# lang-related stuff\ninclude $(BUILDDIR)/config_$(gb_Side)_lang.mk\n\n# tarball names\n# does use some of the variables defined above\ninclude @SRC_ROOT@/download.lst\n\nKEEP_AWAKE_CMD:=@KEEP_AWAKE_CMD@\n\n# used for WSL-as-helper-builds where the build runs from within git-bash/MSYS that otherwise would\n# mess with anything that looks like a path (starts with a /) but cannot be resolved to a target\nexport MSYS_NO_PATHCONV=1\nSTRAWBERRY_PERL=@STRAWBERRY_PERL@\nWSL=@WSL@\n"
        },
        {
          "name": "config_host",
          "type": "tree",
          "content": null
        },
        {
          "name": "config_host_lang.mk.in",
          "type": "blob",
          "size": 0.294921875,
          "content": " # language-related config variables for LibreOffice\n # this file is intended to be able to be included in a Makefile\n # and not to be sourced in a shell session\n #\n\nALL_LANGS=@ALL_LANGS@\nWITH_LANG=@WITH_LANG@\nWITH_LANG_LIST=@WITH_LANG_LIST@\nWITH_POOR_HELP_LOCALIZATIONS=@WITH_POOR_HELP_LOCALIZATIONS@\n"
        },
        {
          "name": "configmgr",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 564.490234375,
          "content": "dnl -*- Mode: Autoconf; tab-width: 4; indent-tabs-mode: nil; fill-column: 100 -*-\ndnl configure.ac serves as input for the GNU autoconf package\ndnl in order to create a configure script.\n\n# The version number in the second argument to AC_INIT should be four numbers separated by\n# periods. Some parts of the code requires the first one to be less than 128 and the others to be less\n# than 256. The four numbers can optionally be followed by a period and a free-form string containing\n# no spaces or periods, like \"frobozz-mumble-42\" or \"alpha0\". If the free-form string ends with one or\n# several non-alphanumeric characters, those are split off and used only for the\n# ABOUTBOXPRODUCTVERSIONSUFFIX in openoffice.lst. Why that is necessary, no idea.\n\nAC_INIT([LibreOffice],[25.8.0.0.alpha0+],[],[],[http://documentfoundation.org/])\n\ndnl libnumbertext needs autoconf 2.68, but that can pick up autoconf268 just fine if it is installed\ndnl whereas aclocal (as run by autogen.sh) insists on using autoconf and fails hard\ndnl so check for the version of autoconf that is actually used to create the configure script\nAC_PREREQ([2.59])\nm4_if(m4_version_compare(m4_defn([AC_AUTOCONF_VERSION]), [2.68]), -1,\n    [AC_MSG_ERROR([at least autoconf version 2.68 is needed (you can use AUTOCONF environment variable to point to a suitable one)])])\n\nif test -n \"$BUILD_TYPE\"; then\n    AC_MSG_ERROR([You have sourced config_host.mk in this shell.  This may lead to trouble, please run in a fresh (login) shell.])\nfi\n\nsave_CC=$CC\nsave_CXX=$CXX\n\nfirst_arg_basename()\n{\n    for i in $1; do\n        basename \"$i\"\n        break\n    done\n}\n\nCC_BASE=`first_arg_basename \"$CC\"`\nCXX_BASE=`first_arg_basename \"$CXX\"`\n\nBUILD_TYPE=\"LibO\"\nSCPDEFS=\"\"\nGIT_NEEDED_SUBMODULES=\"\"\nLO_PATH= # used by path_munge to construct a PATH variable\n\n\nFilterLibs()\n{\n    # Return value: $filteredlibs\n\n    filteredlibs=\n    if test \"$COM\" = \"MSC\"; then\n        for f in $1; do\n            if test \"x$f\" != \"x${f#-L}\"; then\n                filteredlibs=\"$filteredlibs -LIBPATH:${f:2}\"\n            elif test \"x$f\" != \"x${f#-l}\"; then\n                filteredlibs=\"$filteredlibs ${f:2}.lib\"\n            else\n                filteredlibs=\"$filteredlibs $f\"\n            fi\n        done\n    else\n        for f in $1; do\n            case \"$f\" in\n                # let's start with Fedora's paths for now\n                -L/lib|-L/lib/|-L/lib64|-L/lib64/|-L/usr/lib|-L/usr/lib/|-L/usr/lib64|-L/usr/lib64/)\n                    # ignore it: on UNIXoids it is searched by default anyway\n                    # but if it's given explicitly then it may override other paths\n                    # (on macOS it would be an error to use it instead of SDK)\n                    ;;\n                *)\n                    filteredlibs=\"$filteredlibs $f\"\n                    ;;\n            esac\n        done\n    fi\n}\n\nPathFormat()\n{\n    # Args: $1: A pathname. On Cygwin and WSL, in either the Unix or the Windows format. Note that this\n    # function is called also on Unix.\n    #\n    # Return value: $formatted_path and $formatted_path_unix.\n    #\n    # $formatted_path is the argument in Windows format, but using forward slashes instead of\n    # backslashes, using 8.3 pathname components if necessary (if it otherwise would contains spaces\n    # or shell metacharacters).\n    #\n    # $formatted_path_unix is the argument in a form usable in Cygwin or WSL, using 8.3 components if\n    # necessary. On Cygwin, it is the same as $formatted_path, but on WSL it is $formatted_path as a\n    # Unix pathname.\n    #\n    # Errors out if 8.3 names are needed but aren't present for some of the path components.\n\n    # Examples:\n    #\n    # /home/tml/lo/master-optimised => C:/cygwin64/home/tml/lo/master-optimised\n    #\n    # C:\\Program Files (x86)\\Microsoft Visual Studio\\Installer\\vswhere.exe => C:/PROGRA~2/MICROS~3/INSTAL~1/vswhere.exe\n    #\n    # C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community => C:/PROGRA~2/MICROS~3/2019/COMMUN~1\n    #\n    # C:/PROGRA~2/WI3CF2~1/10/Include/10.0.18362.0/ucrt => C:/PROGRA~2/WI3CF2~1/10/Include/10.0.18362.0/ucrt\n    #\n    # /cygdrive/c/PROGRA~2/WI3CF2~1/10 => C:/PROGRA~2/WI3CF2~1/10\n    #\n    # C:\\Program Files (x86)\\Windows Kits\\NETFXSDK\\4.8\\ => C:/PROGRA~2/WI3CF2~1/NETFXSDK/4.8/\n    #\n    # /usr/bin/find.exe => C:/cygwin64/bin/find.exe\n\n    if test -n \"$UNITTEST_WSL_PATHFORMAT\"; then\n        printf \"PathFormat $1 ==> \"\n    fi\n\n    formatted_path=\"$1\"\n    if test \"$build_os\" = \"cygwin\" -o \"$build_os\" = \"wsl\"; then\n        if test \"$build_os\" = \"wsl\"; then\n            formatted_path=$(echo \"$formatted_path\" | tr -d '\\r')\n        fi\n\n        pf_conv_to_dos=\n        # spaces,parentheses,brackets,braces are problematic in pathname\n        # so are backslashes\n        case \"$formatted_path\" in\n            *\\ * | *\\)* | *\\(* | *\\{* | *\\}* | *\\[* | *\\]* | *\\\\* )\n                pf_conv_to_dos=\"yes\"\n            ;;\n        esac\n        if test \"$pf_conv_to_dos\" = \"yes\"; then\n            if test \"$build_os\" = \"wsl\"; then\n                case \"$formatted_path\" in\n                    /*)\n                        formatted_path=$(wslpath -w \"$formatted_path\")\n                        ;;\n                esac\n                formatted_path=$($WSL_LO_HELPER --8.3 \"$formatted_path\")\n            elif test \"$GNUMAKE_WIN_NATIVE\" = \"TRUE\" ; then\n                formatted_path=`cygpath -sm \"$formatted_path\"`\n            else\n                formatted_path=`cygpath -d \"$formatted_path\"`\n            fi\n            if test $? -ne 0;  then\n                AC_MSG_ERROR([path conversion failed for \"$1\".])\n            fi\n        fi\n        fp_count_colon=`echo \"$formatted_path\" | $GREP -c \"[:]\"`\n        fp_count_slash=`echo \"$formatted_path\" | $GREP -c \"[/]\"`\n        if test \"$fp_count_slash$fp_count_colon\" != \"00\"; then\n            if test \"$fp_count_colon\" = \"0\"; then\n                new_formatted_path=`realpath \"$formatted_path\"`\n                if test $? -ne 0;  then\n                    AC_MSG_WARN([realpath failed for \"$formatted_path\", not necessarily a problem.])\n                else\n                    formatted_path=\"$new_formatted_path\"\n                fi\n            fi\n            if test \"$build_os\" = \"wsl\"; then\n                if test \"$fp_count_colon\" != \"0\"; then\n                    formatted_path=$(wslpath \"$formatted_path\")\n                    local final_slash=\n                    case \"$formatted_path\" in\n                        */)\n                            final_slash=/\n                            ;;\n                    esac\n                    formatted_path=$(wslpath -m $formatted_path)\n                    case \"$formatted_path\" in\n                        */)\n                            ;;\n                        *)\n                            formatted_path=\"$formatted_path\"$final_slash\n                            ;;\n                    esac\n                else\n                    formatted_path=$(wslpath -m \"$formatted_path\")\n                fi\n            else\n                formatted_path=`cygpath -m \"$formatted_path\"`\n            fi\n            if test $? -ne 0;  then\n                AC_MSG_ERROR([path conversion failed for \"$1\".])\n            fi\n        fi\n        fp_count_space=`echo \"$formatted_path\" | $GREP -c \"[ ]\"`\n        if test \"$fp_count_space\" != \"0\"; then\n            AC_MSG_ERROR([converted path \"$formatted_path\" still contains spaces. Short filenames (8.3 filenames) support was disabled on this system?])\n        fi\n    fi\n    if test \"$build_os\" = \"wsl\"; then\n        # WSL can't run Windows binaries from Windows pathnames so we need a separate return value in Unix format\n        formatted_path_unix=$(wslpath \"$formatted_path\")\n    else\n        # But Cygwin can\n        formatted_path_unix=\"$formatted_path\"\n    fi\n    if test -n \"$WSL_ONLY_AS_HELPER\"; then\n        # if already in unix format, switch to windows format to create shortened path\n        case \"$formatted_path\" in\n            /*)\n                formatted_path=$(wslpath -m \"$formatted_path\")\n                ;;\n        esac\n\n        # cd to /mnt/c to avoid wsl/cmd complaining about not supporting UNC paths/the current working directory\n        formatted_path_unix=$(wslpath -u \"$(cd /mnt/c; cmd.exe /c $shortpath_cmd \"$formatted_path\" | tr -d '\\r')\")\n        # WSL can't run Windows binaries from Windows pathnames so we need a separate return value in Unix format\n        formatted_path=$(wslpath -m \"$formatted_path_unix\")\n    fi\n}\n\nAbsolutePath()\n{\n    # There appears to be no simple and portable method to get an absolute and\n    # canonical path, so we try creating the directory if does not exist and\n    # utilizing the shell and pwd.\n\n    # Args: $1: A possibly relative pathname\n    # Return value: $absolute_path\n\n    # Convert to unix path, mkdir would treat c:/path as a relative path.\n    PathFormat \"$1\"\n    local rel=\"$formatted_path_unix\"\n    absolute_path=\"\"\n    test ! -e \"$rel\" && mkdir -p \"$rel\"\n    if test -d \"$rel\" ; then\n        cd \"$rel\" || AC_MSG_ERROR([absolute path resolution failed for \"$rel\".])\n        absolute_path=\"$(pwd)\"\n        cd - > /dev/null\n    else\n        AC_MSG_ERROR([Failed to resolve absolute path.  \"$rel\" does not exist or is not a directory.])\n    fi\n}\n\nWARNINGS_FILE=config.warn\nWARNINGS_FILE_FOR_BUILD=config.Build.warn\nrm -f \"$WARNINGS_FILE\" \"$WARNINGS_FILE_FOR_BUILD\"\nhave_WARNINGS=\"no\"\nadd_warning()\n{\n    if test \"$have_WARNINGS\" = \"no\"; then\n        echo \"*************************************\" > \"$WARNINGS_FILE\"\n        have_WARNINGS=\"yes\"\n        if command -v tput >/dev/null && test \"`tput colors 2>/dev/null || echo 0`\" -ge 8; then\n            dnl <esc> as actual byte (U+1b), [ escaped using quadrigraph @<:@\n            COLORWARN='*\u001b@<:@1;33;40m WARNING \u001b@<:@0m:'\n        else\n            COLORWARN=\"* WARNING :\"\n        fi\n    fi\n    echo \"$COLORWARN $@\" >> \"$WARNINGS_FILE\"\n}\n\ndnl Some Mac User have the bad habit of letting a lot of crap\ndnl accumulate in their PATH and even adding stuff in /usr/local/bin\ndnl that confuse the build.\ndnl For the ones that use LODE, let's be nice and protect them\ndnl from themselves\n\nmac_sanitize_path()\n{\n    mac_path=\"$LODE_HOME/opt/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\ndnl a common but nevertheless necessary thing that may be in a fancy\ndnl path location is git, so make sure we have it\n    mac_git_path=`command -v git`\n    if test -n \"$mac_git_path\" -a -x \"$mac_git_path\" -a \"$mac_git_path\" != \"/usr/bin/git\" ; then\n        mac_path=\"$mac_path:`dirname $mac_git_path`\"\n    fi\ndnl a not so common but nevertheless quite helpful thing that may be in a fancy\ndnl path location is gpg, so make sure we find it\n    mac_gpg_path=`command -v gpg`\n    if test -n \"$mac_gpg_path\" -a -x \"$mac_gpg_path\" -a \"$mac_gpg_path\" != \"/usr/bin/gpg\" ; then\n        mac_path=\"$mac_path:`dirname $mac_gpg_path`\"\n    fi\n    PATH=\"$mac_path\"\n    unset mac_path\n    unset mac_git_path\n    unset mac_gpg_path\n}\n\ndnl semantically test a three digits version\ndnl $1 - $3 = minimal version\ndnl $4 - $6 = current version\n\ncheck_semantic_version_three()\n{\n    test \"$4\" -gt \"$1\" \\\n        -o \\( \"$4\" -eq \"$1\" -a \"$5\" -gt \"$2\" \\) \\\n        -o \\( \"$4\" -eq \"$1\" -a \"$5\" -eq \"$2\" -a \"$6\" -ge \"$3\" \\)\n    return $?\n}\n\ndnl calls check_semantic_version_three with digits in named variables $1_MAJOR, $1_MINOR, $1_TINY\ndnl $1 = current version prefix, e.g. EMSCRIPTEN => EMSCRIPTEN_\ndnl $2 = postfix to $1, e.g. MIN => EMSCRIPTEN_MIN_\n\ncheck_semantic_version_three_prefixed()\n{\n    eval local MIN_MAJOR=\"\\$${1}_${2}_MAJOR\"\n    eval local MIN_MINOR=\"\\$${1}_${2}_MINOR\"\n    eval local MIN_TINY=\"\\$${1}_${2}_TINY\"\n    eval local CUR_MAJOR=\"\\$${1}_MAJOR\"\n    eval local CUR_MINOR=\"\\$${1}_MINOR\"\n    eval local CUR_TINY=\"\\$${1}_TINY\"\n    check_semantic_version_three $MIN_MAJOR $MIN_MINOR $MIN_TINY $CUR_MAJOR $CUR_MINOR $CUR_TINY\n    return $?\n}\n\necho \"********************************************************************\"\necho \"*\"\necho \"*   Running ${PACKAGE_NAME} build configuration.\"\necho \"*\"\necho \"********************************************************************\"\necho \"\"\n\ndnl ===================================================================\ndnl checks build and host OSes\ndnl do this before argument processing to allow for platform dependent defaults\ndnl ===================================================================\n\n# are we running in wsl but are called from git-bash/env with mingw64 in path?\n# if so, we aim to run nearly everything in the Windows realm, and only run autogen/configure\n# in wsl and run a few tools via wsl\nWSL_ONLY_AS_HELPER=\nif test -n \"$WSL_DISTRO_NAME\" && $(echo $PATH |grep -q mingw64); then\n    WSL_ONLY_AS_HELPER=TRUE\n    AC_ARG_WITH([strawberry-perl-portable],\n        [AS_HELP_STRING([--with-strawberry-perl-portable],\n            [Specify the base path to strawberry perl portable])],\n        [],\n        [AC_MSG_ERROR(\n            [for the moment strawberry-perl-portable is a requirement, feel free to replace it])])\n    shortpath_cmd=$(wslpath -m $srcdir/solenv/bin/shortpath.cmd)\n    PathFormat \"$with_strawberry_perl_portable\"\n    if test ! -f \"$formatted_path_unix/perl/bin/perl.exe\" -o ! -d \"$formatted_path_unix/c/bin\"; then\n        AC_MSG_ERROR([$formatted_path doesn't contain perl or the utilities - sure you provided the base path?])\n    fi\n    STRAWBERRY_TOOLS=\"$formatted_path/c/bin\"\n    STRAWBERRY_PERL=\"$formatted_path/perl/bin/perl.exe\"\n    STRAWBERRY_PERL_UNIX=\"$formatted_path_unix/perl/bin/perl.exe\"\n    AC_ARG_WITH([wsl-command],\n        [AS_HELP_STRING([--with-wsl-command],\n            [Specify your wsl distro command if it isn't the default/the one used with just wsl.exe –\n             for example: wsl.exe -d MyDistro -u NonDefaultUser])],\n        [],\n        [with_wsl_command=\"wsl.exe\"])\n    WSL=\"$with_wsl_command\"\nfi\nAC_SUBST([STRAWBERRY_PERL])\nAC_SUBST([WSL])\n\n# Check for WSL (version 2, at least). But if --host is explicitly specified (to really do build for\n# Linux on WSL) trust that.\nif test -z \"$host\" -a -z \"$build\" -a \"`wslsys -v 2>/dev/null`\" != \"\"; then\n    ac_cv_host=\"x86_64-pc-wsl\"\n    ac_cv_host_cpu=\"x86_64\"\n    ac_cv_host_os=\"wsl\"\n    ac_cv_build=\"$ac_cv_host\"\n    ac_cv_build_cpu=\"$ac_cv_host_cpu\"\n    ac_cv_build_os=\"$ac_cv_host_os\"\n\n    # Emulation of Cygwin's cygpath command for WSL.\n    cygpath()\n    {\n        if test -n \"$UNITTEST_WSL_CYGPATH\"; then\n            echo -n cygpath \"$@\" \"==> \"\n        fi\n\n        # Cygwin's real cygpath has a plethora of options but we use only a few here.\n        local args=\"$@\"\n        local opt\n        local opt_d opt_m opt_u opt_w opt_l opt_s opt_p\n        OPTIND=1\n\n        while getopts dmuwlsp opt; do\n            case \"$opt\" in\n                \\?)\n                    AC_MSG_ERROR([Unimplemented cygpath emulation option in invocation: cygpath $args])\n                    ;;\n                ?)\n                    eval opt_$opt=yes\n                    ;;\n            esac\n        done\n\n        shift $((OPTIND-1))\n\n        if test $# -ne 1; then\n            AC_MSG_ERROR([Invalid cygpath emulation invocation: Pathname missing]);\n        fi\n\n        local input=\"$1\"\n\n        local result\n\n        if test -n \"$opt_d\" -o -n \"$opt_m\" -o -n \"$opt_w\"; then\n            # Print Windows path, possibly in 8.3 form (-d) or with forward slashes (-m)\n\n            if test -n \"$opt_u\"; then\n                AC_MSG_ERROR([Invalid cygpath invocation: Both Windows and Unix path output requested])\n            fi\n\n            case \"$input\" in\n                /mnt/*)\n                    # A Windows file in WSL format\n                    input=$(wslpath -w \"$input\")\n                    ;;\n                [[a-zA-Z]]:\\\\* | \\\\* | [[a-zA-Z]]:/* | /*)\n                    # Already in Windows format\n                    ;;\n                /*)\n                    input=$(wslpath -w \"$input\")\n                    ;;\n                *)\n                    AC_MSG_ERROR([Invalid cygpath invocation: Path '$input' is not absolute])\n                    ;;\n            esac\n            if test -n \"$opt_d\" -o -n \"$opt_s\"; then\n                input=$($WSL_LO_HELPER --8.3 \"$input\")\n            fi\n            if test -n \"$opt_m\"; then\n                input=\"${input//\\\\//}\"\n            fi\n            echo \"$input\"\n        else\n            # Print Unix path\n\n            case \"$input\" in\n                [[a-zA-Z]]:\\\\* | \\\\* | [[a-zA-Z]]:/* | /*)\n                    wslpath -u \"$input\"\n                    ;;\n                /)\n                    echo \"$input\"\n                    ;;\n                *)\n                    AC_MSG_ERROR([Invalid cygpath invocation: Path '$input' is not absolute])\n                    ;;\n            esac\n        fi\n    }\n\n    if test -n \"$UNITTEST_WSL_CYGPATH\"; then\n        BUILDDIR=.\n\n        # Nothing special with these file names, just arbitrary ones picked to test with\n        cygpath -d /usr/lib64/ld-linux-x86-64.so.2\n        cygpath -w /usr/lib64/ld-linux-x86-64.so.2\n        cygpath -m /usr/lib64/ld-linux-x86-64.so.2\n        cygpath -m -s /usr/lib64/ld-linux-x86-64.so.2\n        # At least on my machine for instance this file does have an 8.3 name\n        cygpath -d /mnt/c/windows/WindowsUpdate.log\n        # But for instance this one doesn't\n        cygpath -w /mnt/c/windows/system32/AboutSettingsHandlers.dll\n        cygpath -ws /mnt/c/windows/WindowsUpdate.log\n        cygpath -m /mnt/c/windows/system32/AboutSettingsHandlers.dll\n        cygpath -ms /mnt/c/windows/WindowsUpdate.log\n\n        cygpath -u 'c:\\windows\\system32\\AboutSettingsHandlers.dll'\n        cygpath -u 'c:/windows/system32/AboutSettingsHandlers.dll'\n\n        exit 0\n    fi\n\n    if test -z \"$WSL_LO_HELPER\"; then\n        if test -n \"$LODE_HOME\" -a -x \"$LODE_HOME/opt/bin/wsl-lo-helper\" ; then\n            WSL_LO_HELPER=\"$LODE_HOME/opt/bin/wsl-lo-helper\"\n        elif test -x \"/opt/lo/bin/wsl-lo-helper\"; then\n            WSL_LO_HELPER=\"/opt/lo/bin/wsl-lo-helper\"\n        fi\n    fi\n    if test -z \"$WSL_LO_HELPER\"; then\n        AC_MSG_ERROR([wsl-lo-helper not found. See solenv/wsl/README.])\n    fi\nfi\n\nAC_CANONICAL_HOST\nAC_CANONICAL_BUILD\n\nif test -n \"$UNITTEST_WSL_PATHFORMAT\"; then\n    BUILDDIR=.\n    GREP=grep\n\n    # Use of PathFormat must be after AC_CANONICAL_BUILD above\n    PathFormat /\n    printf \"$formatted_path , $formatted_path_unix\\n\"\n\n    PathFormat $PWD\n    printf \"$formatted_path , $formatted_path_unix\\n\"\n\n    PathFormat \"$PROGRAMFILESX86\"\n    printf \"$formatted_path , $formatted_path_unix\\n\"\n\n    exit 0\nfi\n\nAC_MSG_CHECKING([for product name])\nPRODUCTNAME=\"AC_PACKAGE_NAME\"\nif test -n \"$with_product_name\" -a \"$with_product_name\" != no; then\n    PRODUCTNAME=\"$with_product_name\"\nfi\nif test \"$enable_release_build\" = \"\" -o \"$enable_release_build\" = \"no\"; then\n    PRODUCTNAME=\"${PRODUCTNAME}Dev\"\nfi\nAC_MSG_RESULT([$PRODUCTNAME])\nAC_SUBST(PRODUCTNAME)\nPRODUCTNAME_WITHOUT_SPACES=$(printf %s \"$PRODUCTNAME\" | sed 's/ //g')\nAC_SUBST(PRODUCTNAME_WITHOUT_SPACES)\n\ndnl ===================================================================\ndnl Our version is defined by the AC_INIT() at the top of this script.\ndnl ===================================================================\n\nAC_MSG_CHECKING([for package version])\nif test -n \"$with_package_version\" -a \"$with_package_version\" != no; then\n    PACKAGE_VERSION=\"$with_package_version\"\nfi\nAC_MSG_RESULT([$PACKAGE_VERSION])\n\nset `echo \"$PACKAGE_VERSION\" | sed \"s/\\./ /g\"`\n\nLIBO_VERSION_MAJOR=$1\nLIBO_VERSION_MINOR=$2\nLIBO_VERSION_MICRO=$3\nLIBO_VERSION_PATCH=$4\n\nLIBO_VERSION_SUFFIX=$5\n\n# Split out LIBO_VERSION_SUFFIX_SUFFIX... horrible crack. But apparently wanted separately in\n# openoffice.lst as ABOUTBOXPRODUCTVERSIONSUFFIX. Note that the double brackets are for m4's sake,\n# they get undoubled before actually passed to sed.\nLIBO_VERSION_SUFFIX_SUFFIX=`echo \"$LIBO_VERSION_SUFFIX\" | sed -e 's/.*[[a-zA-Z0-9]]\\([[^a-zA-Z0-9]]*\\)$/\\1/'`\ntest -n \"$LIBO_VERSION_SUFFIX_SUFFIX\" && LIBO_VERSION_SUFFIX=\"${LIBO_VERSION_SUFFIX%${LIBO_VERSION_SUFFIX_SUFFIX}}\"\n# LIBO_VERSION_SUFFIX, if non-empty, should include the period separator\ntest -n \"$LIBO_VERSION_SUFFIX\" && LIBO_VERSION_SUFFIX=\".$LIBO_VERSION_SUFFIX\"\n\n# The value for key CFBundleVersion in the Info.plist file must be a period-separated list of at most\n# three non-negative integers. Please find more information about CFBundleVersion at\n# https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundleversion\n\n# The value for key CFBundleShortVersionString in the Info.plist file must be a period-separated list\n# of at most three non-negative integers. Please find more information about\n# CFBundleShortVersionString at\n# https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundleshortversionstring\n\n# But that is enforced only in the App Store, and we apparently want to break the rules otherwise.\n\nif test \"$enable_macosx_sandbox\" = yes; then\n    MACOSX_BUNDLE_SHORTVERSION=$LIBO_VERSION_MAJOR.$LIBO_VERSION_MINOR.`expr $LIBO_VERSION_MICRO '*' 1000 + $LIBO_VERSION_PATCH`\n    MACOSX_BUNDLE_VERSION=$MACOSX_BUNDLE_SHORTVERSION\nelse\n    MACOSX_BUNDLE_SHORTVERSION=$LIBO_VERSION_MAJOR.$LIBO_VERSION_MINOR.$LIBO_VERSION_MICRO.$LIBO_VERSION_PATCH\n    MACOSX_BUNDLE_VERSION=$MACOSX_BUNDLE_SHORTVERSION$LIBO_VERSION_SUFFIX\nfi\n\nAC_SUBST(LIBO_VERSION_MAJOR)\nAC_SUBST(LIBO_VERSION_MINOR)\nAC_SUBST(LIBO_VERSION_MICRO)\nAC_SUBST(LIBO_VERSION_PATCH)\nAC_SUBST(LIBO_VERSION_SUFFIX)\nAC_SUBST(LIBO_VERSION_SUFFIX_SUFFIX)\nAC_SUBST(MACOSX_BUNDLE_SHORTVERSION)\nAC_SUBST(MACOSX_BUNDLE_VERSION)\n\nAC_DEFINE_UNQUOTED(LIBO_VERSION_MAJOR,$LIBO_VERSION_MAJOR)\nAC_DEFINE_UNQUOTED(LIBO_VERSION_MINOR,$LIBO_VERSION_MINOR)\nAC_DEFINE_UNQUOTED(LIBO_VERSION_MICRO,$LIBO_VERSION_MICRO)\nAC_DEFINE_UNQUOTED(LIBO_VERSION_PATCH,$LIBO_VERSION_PATCH)\n\ngit_date=`git log -1 --pretty=format:\"%cd\" --date=format:'%Y' 2>/dev/null`\nLIBO_THIS_YEAR=${git_date:-2025}\nAC_DEFINE_UNQUOTED(LIBO_THIS_YEAR,$LIBO_THIS_YEAR)\n\ndnl ===================================================================\ndnl Product version\ndnl ===================================================================\nAC_MSG_CHECKING([for product version])\nPRODUCTVERSION=\"$LIBO_VERSION_MAJOR.$LIBO_VERSION_MINOR\"\nAC_MSG_RESULT([$PRODUCTVERSION])\nAC_SUBST(PRODUCTVERSION)\n\nAC_PROG_EGREP\n# AC_PROG_EGREP doesn't set GREP on all systems as well\nAC_PATH_PROG(GREP, grep)\n\nBUILDDIR=`pwd`\ncd $srcdir\nSRC_ROOT=`pwd`\ncd $BUILDDIR\nx_Cygwin=[\\#]\n\ndnl ======================================\ndnl Required GObject introspection version\ndnl ======================================\nINTROSPECTION_REQUIRED_VERSION=1.32.0\n\ndnl ===================================================================\ndnl Search all the common names for GNU Make\ndnl ===================================================================\nAC_MSG_CHECKING([for GNU Make])\n\n# try to use our own make if it is available and GNUMAKE was not already defined\nif test -z \"$GNUMAKE\"; then\n    if test -n \"$LODE_HOME\" -a -x \"$LODE_HOME/opt/bin/make\" ; then\n        GNUMAKE=\"$LODE_HOME/opt/bin/make\"\n    elif test -x \"/opt/lo/bin/make\"; then\n        GNUMAKE=\"/opt/lo/bin/make\"\n    fi\nfi\n\nGNUMAKE_WIN_NATIVE=\nfor a in \"$MAKE\" \"$GNUMAKE\" make gmake gnumake; do\n    if test -n \"$a\"; then\n        $a --version 2> /dev/null | grep GNU  2>&1 > /dev/null\n        if test $? -eq 0;  then\n            if test \"$build_os\" = \"cygwin\"; then\n                if test -n \"$($a -v | grep 'Built for Windows')\" ; then\n                    GNUMAKE=\"$(cygpath -m \"$(command -v \"$(cygpath -u $a)\")\")\"\n                    GNUMAKE_WIN_NATIVE=\"TRUE\"\n                else\n                    GNUMAKE=`command -v $a`\n                fi\n            else\n                GNUMAKE=`command -v $a`\n            fi\n            break\n        fi\n    fi\ndone\nAC_MSG_RESULT($GNUMAKE)\nif test -z \"$GNUMAKE\"; then\n    AC_MSG_ERROR([not found. install GNU Make.])\nelse\n    if test \"$GNUMAKE_WIN_NATIVE\" = \"TRUE\" ; then\n        AC_MSG_NOTICE([Using a native Win32 GNU Make version.])\n    fi\nfi\n\nwin_short_path_for_make()\n{\n    local short_path=\"$1\"\n    if test \"$GNUMAKE_WIN_NATIVE\" = \"TRUE\" ; then\n        cygpath -sm \"$short_path\"\n    elif test -n \"$WSL_ONLY_AS_HELPER\"; then\n        # when already unix-style path, wslpath doesn't return anything\n        case \"$short_path\" in\n        /*)\n            echo $short_path\n            exit\n            ;;\n        esac\n        wslpath -m \"$(wslpath -u \"$short_path\")\"\n    else\n        cygpath -u \"$(cygpath -d \"$short_path\")\"\n    fi\n}\n\n\nif test \"$build_os\" = \"cygwin\"; then\n    PathFormat \"$SRC_ROOT\"\n    SRC_ROOT=\"$formatted_path\"\n    PathFormat \"$BUILDDIR\"\n    BUILDDIR=\"$formatted_path\"\n    x_Cygwin=\n    AC_MSG_CHECKING(for explicit COMSPEC)\n    if test -z \"$COMSPEC\"; then\n        AC_MSG_ERROR([COMSPEC not set in environment, please set it and rerun])\n    else\n        AC_MSG_RESULT([found: $COMSPEC])\n    fi\nfi\n\nAC_SUBST(SRC_ROOT)\nAC_SUBST(BUILDDIR)\nAC_SUBST(x_Cygwin)\nAC_DEFINE_UNQUOTED(SRCDIR,\"$SRC_ROOT\")\nAC_DEFINE_UNQUOTED(SRC_ROOT,\"$SRC_ROOT\")\nAC_DEFINE_UNQUOTED(BUILDDIR,\"$BUILDDIR\")\n\nif test \"z$EUID\" = \"z0\" -a \"`uname -o 2>/dev/null`\" = \"Cygwin\"; then\n    AC_MSG_ERROR([You must build LibreOffice as a normal user - not using an administrative account])\nfi\n\n# need sed in os checks...\nAC_PATH_PROGS(SED, sed)\nif test -z \"$SED\"; then\n    AC_MSG_ERROR([install sed to run this script])\nfi\n\n# Set the ENABLE_LTO variable\n# ===================================================================\nAC_MSG_CHECKING([whether to use link-time optimization])\nif test -n \"$enable_lto\" -a \"$enable_lto\" != \"no\"; then\n    ENABLE_LTO=\"TRUE\"\n    AC_MSG_RESULT([yes])\nelse\n    ENABLE_LTO=\"\"\n    AC_MSG_RESULT([no])\nfi\nAC_SUBST(ENABLE_LTO)\n\nAC_ARG_ENABLE(fuzz-options,\n    AS_HELP_STRING([--enable-fuzz-options],\n        [Randomly enable or disable each of those configurable options\n         that are supposed to be freely selectable without interdependencies,\n         or where bad interaction from interdependencies is automatically avoided.])\n)\n\ndnl ===================================================================\ndnl When building for Android, --with-android-ndk,\ndnl --with-android-ndk-toolchain-version and --with-android-sdk are\ndnl mandatory\ndnl ===================================================================\n\nAC_ARG_WITH(android-ndk,\n    AS_HELP_STRING([--with-android-ndk],\n        [Specify location of the Android Native Development Kit. Mandatory when building for Android.]),\n,)\n\nAC_ARG_WITH(android-ndk-toolchain-version,\n    AS_HELP_STRING([--with-android-ndk-toolchain-version],\n        [Specify which toolchain version to use, of those present in the\n        Android NDK you are using. The default (and only supported version currently) is \"clang5.0\"]),,\n        with_android_ndk_toolchain_version=clang5.0)\n\nAC_ARG_WITH(android-sdk,\n    AS_HELP_STRING([--with-android-sdk],\n        [Specify location of the Android SDK. Mandatory when building for Android.]),\n,)\n\nAC_ARG_WITH(android-api-level,\n    AS_HELP_STRING([--with-android-api-level],\n        [Specify the API level when building for Android. Defaults to 16 for ARM and x86 and to 21 for ARM64 and x86-64]),\n,)\n\nANDROID_NDK_DIR=\nif test -z \"$with_android_ndk\" -a -e \"$SRC_ROOT/external/android-ndk\" -a \"$build\" != \"$host\"; then\n    with_android_ndk=\"$SRC_ROOT/external/android-ndk\"\nfi\nif test -n \"$with_android_ndk\"; then\n    eval ANDROID_NDK_DIR=$with_android_ndk\n\n    ANDROID_API_LEVEL=21\n    if test -n \"$with_android_api_level\" ; then\n        ANDROID_API_LEVEL=\"$with_android_api_level\"\n    fi\n\n    if test $host_cpu = arm; then\n        LLVM_TRIPLE=armv7a-linux-androideabi\n        ANDROID_SYSROOT_PLATFORM=arm-linux-androideabi\n        ANDROID_APP_ABI=armeabi-v7a\n        ANDROIDCFLAGS=\"-mthumb -march=armv7-a -mfloat-abi=softfp -mfpu=neon -Wl,--fix-cortex-a8\"\n    elif test $host_cpu = aarch64; then\n        LLVM_TRIPLE=aarch64-linux-android\n        ANDROID_SYSROOT_PLATFORM=$LLVM_TRIPLE\n        ANDROID_APP_ABI=arm64-v8a\n    elif test $host_cpu = x86_64; then\n        LLVM_TRIPLE=x86_64-linux-android\n        ANDROID_SYSROOT_PLATFORM=$LLVM_TRIPLE\n        ANDROID_APP_ABI=x86_64\n    else\n        # host_cpu is something like \"i386\" or \"i686\" I guess, NDK uses\n        # \"x86\" in some contexts\n        LLVM_TRIPLE=i686-linux-android\n        ANDROID_SYSROOT_PLATFORM=$LLVM_TRIPLE\n        ANDROID_APP_ABI=x86\n    fi\n\n    # Set up a lot of pre-canned defaults\n\n    if test ! -f $ANDROID_NDK_DIR/RELEASE.TXT; then\n        if test ! -f $ANDROID_NDK_DIR/source.properties; then\n            AC_MSG_ERROR([Unrecognized Android NDK. Missing RELEASE.TXT or source.properties file in $ANDROID_NDK_DIR.])\n        fi\n        ANDROID_NDK_VERSION=`sed -n -e 's/Pkg.Revision = //p' $ANDROID_NDK_DIR/source.properties`\n    else\n        ANDROID_NDK_VERSION=`cut -f1 -d' ' <$ANDROID_NDK_DIR/RELEASE.TXT`\n    fi\n    if test -z \"$ANDROID_NDK_VERSION\";  then\n        AC_MSG_ERROR([Failed to determine Android NDK version. Please check your installation.])\n    fi\n    case $ANDROID_NDK_VERSION in\n    r9*|r10*)\n        AC_MSG_ERROR([Building for Android requires NDK version >= 23.*])\n        ;;\n    11.1.*|12.1.*|13.1.*|14.1.*|16.*|17.*|18.*|19.*|20.*|21.*|22.*)\n        AC_MSG_ERROR([Building for Android requires NDK version >= 23.*])\n        ;;\n    23.*|24.*|25.*)\n        ;;\n    *)\n        AC_MSG_WARN([Untested Android NDK version $ANDROID_NDK_VERSION, only versions 23.* to 25.* have been used successfully. Proceed at your own risk.])\n        add_warning \"Untested Android NDK version $ANDROID_NDK_VERSION, only versions 23.* to 25.* have been used successfully. Proceed at your own risk.\"\n        ;;\n    esac\n\n    case \"$with_android_ndk_toolchain_version\" in\n    clang5.0)\n        ANDROID_GCC_TOOLCHAIN_VERSION=4.9\n        ;;\n    *)\n        AC_MSG_ERROR([Unrecognized value for the --with-android-ndk-toolchain-version option. Building for Android is only supported with Clang 5.*])\n    esac\n\n    AC_MSG_NOTICE([using the Android API level... $ANDROID_API_LEVEL])\n\n    # NDK 15 or later toolchain is 64bit-only, except for Windows that we don't support. Using a 64-bit\n    # linker is required if you compile large parts of the code with -g. A 32-bit linker just won't\n    # manage to link the (app-specific) single huge .so that is built for the app in\n    # android/source/ if there is debug information in a significant part of the object files.\n    # (A 64-bit ld.gold grows too much over 10 gigabytes of virtual space when linking such a .so if\n    # all objects have been built with debug information.)\n    case $build_os in\n    linux-gnu*)\n        android_HOST_TAG=linux-x86_64\n        ;;\n    darwin*)\n        android_HOST_TAG=darwin-x86_64\n        ;;\n    *)\n        AC_MSG_ERROR([We only support building for Android from Linux or macOS])\n        # ndk would also support windows and windows-x86_64\n        ;;\n    esac\n    ANDROID_TOOLCHAIN=$ANDROID_NDK_DIR/toolchains/llvm/prebuilt/$android_HOST_TAG\n    ANDROID_COMPILER_BIN=$ANDROID_TOOLCHAIN/bin\n\n    test -z \"$AR\" && AR=$ANDROID_COMPILER_BIN/llvm-ar\n    test -z \"$NM\" && NM=$ANDROID_COMPILER_BIN/llvm-nm\n    test -z \"$OBJDUMP\" && OBJDUMP=$ANDROID_COMPILER_BIN/llvm-objdump\n    test -z \"$RANLIB\" && RANLIB=$ANDROID_COMPILER_BIN/llvm-ranlib\n    test -z \"$STRIP\" && STRIP=$ANDROID_COMPILER_BIN/llvm-strip\n\n    ANDROIDCFLAGS=\"$ANDROIDCFLAGS -target ${LLVM_TRIPLE}${ANDROID_API_LEVEL}\"\n    ANDROIDCFLAGS=\"$ANDROIDCFLAGS -no-canonical-prefixes -ffunction-sections -fdata-sections -Qunused-arguments\"\n    if test \"$ENABLE_LTO\" = TRUE; then\n        # -flto comes from com_GCC_defs.mk, too, but we need to make sure it gets passed as part of\n        # $CC and $CXX when building external libraries\n        ANDROIDCFLAGS=\"$ANDROIDCFLAGS -flto -fuse-linker-plugin -O2\"\n    fi\n\n    ANDROIDCXXFLAGS=\"$ANDROIDCFLAGS -stdlib=libc++\"\n\n    if test -z \"$CC\"; then\n        CC=\"$ANDROID_COMPILER_BIN/clang $ANDROIDCFLAGS\"\n        CC_BASE=\"clang\"\n    fi\n    if test -z \"$CXX\"; then\n        CXX=\"$ANDROID_COMPILER_BIN/clang++ $ANDROIDCXXFLAGS\"\n        CXX_BASE=\"clang++\"\n    fi\nfi\nAC_SUBST(ANDROID_NDK_DIR)\nAC_SUBST(ANDROID_NDK_VERSION)\nAC_SUBST(ANDROID_API_LEVEL)\nAC_SUBST(ANDROID_APP_ABI)\nAC_SUBST(ANDROID_GCC_TOOLCHAIN_VERSION)\nAC_SUBST(ANDROID_SYSROOT_PLATFORM)\nAC_SUBST(ANDROID_TOOLCHAIN)\n\ndnl ===================================================================\ndnl --with-android-sdk\ndnl ===================================================================\nANDROID_SDK_DIR=\nif test -z \"$with_android_sdk\" -a -e \"$SRC_ROOT/external/android-sdk-linux\" -a \"$build\" != \"$host\"; then\n    with_android_sdk=\"$SRC_ROOT/external/android-sdk-linux\"\nfi\nif test -n \"$with_android_sdk\"; then\n    eval ANDROID_SDK_DIR=$with_android_sdk\n    PATH=\"$ANDROID_SDK_DIR/platform-tools:$ANDROID_SDK_DIR/tools:$PATH\"\nfi\nAC_SUBST(ANDROID_SDK_DIR)\n\nAC_ARG_ENABLE([android-lok],\n    AS_HELP_STRING([--enable-android-lok],\n        [The Android app from the android/ subdir needs several tweaks all\n         over the place that break the LOK when used in the Online-based\n         Android app.  This switch indicates that the intent of this build is\n         actually the Online-based, non-modified LOK.])\n)\nENABLE_ANDROID_LOK=\nif test -n \"$ANDROID_NDK_DIR\" ; then\n    if test \"$enable_android_lok\" = yes; then\n        ENABLE_ANDROID_LOK=TRUE\n        AC_DEFINE(HAVE_FEATURE_ANDROID_LOK)\n        AC_MSG_NOTICE([building the Android version... for the Online-based Android app])\n    else\n        AC_MSG_NOTICE([building the Android version... for the app from the android/ subdir])\n    fi\nfi\nAC_SUBST([ENABLE_ANDROID_LOK])\n\nlibo_FUZZ_ARG_ENABLE([android-editing],\n    AS_HELP_STRING([--enable-android-editing],\n        [Enable the experimental editing feature on Android.])\n)\nENABLE_ANDROID_EDITING=\nif test \"$enable_android_editing\" = yes; then\n    ENABLE_ANDROID_EDITING=TRUE\nfi\nAC_SUBST([ENABLE_ANDROID_EDITING])\n\ndisable_database_connectivity_dependencies()\n{\n    enable_evolution2=no\n    enable_firebird_sdbc=no\n    enable_mariadb_sdbc=no\n    enable_postgresql_sdbc=no\n    enable_report_builder=no\n}\n\n# ===================================================================\n#\n# Start initial platform setup\n#\n# The using_* variables reflect platform support and should not be\n# changed after the \"End initial platform setup\" block.\n# This is also true for most test_* variables.\n# ===================================================================\nbuild_crypto=yes\ntest_clucene=no\ntest_gdb_index=no\ntest_openldap=yes\ntest_split_debug=no\ntest_webdav=yes\nusable_dlapi=yes\n\n# There is currently just iOS not using salplug, so this explicitly enables it.\n# must: using_freetype_fontconfig\n#  may: using_headless_plugin defaults to $using_freetype_fontconfig\n# must: using_x11\n\n# Default values, as such probably valid just for Linux, set\n# differently below just for Mac OSX, but at least better than\n# hardcoding these as we used to do. Much of this is duplicated also\n# in solenv for old build system and for gbuild, ideally we should\n# perhaps define stuff like this only here in configure.ac?\n\nLINKFLAGSSHL=\"-shared\"\nPICSWITCH=\"-fpic\"\nDLLPOST=\".so\"\n\nLINKFLAGSNOUNDEFS=\"-Wl,-z,defs\"\n\nINSTROOTBASESUFFIX=\nINSTROOTCONTENTSUFFIX=\nSDKDIRNAME=sdk\n\nHOST_PLATFORM=\"$host\"\n\nhost_cpu_for_clang=\"$host_cpu\"\n\ncase \"$host_os\" in\n\nsolaris*)\n    using_freetype_fontconfig=yes\n    using_x11=yes\n    build_skia=yes\n    _os=SunOS\n\n    dnl ===========================================================\n    dnl Check whether we're using Solaris 10 - SPARC or Intel.\n    dnl ===========================================================\n    AC_MSG_CHECKING([the Solaris operating system release])\n    _os_release=`echo $host_os | $SED -e s/solaris2\\.//`\n    if test \"$_os_release\" -lt \"10\"; then\n        AC_MSG_ERROR([use Solaris >= 10 to build LibreOffice])\n    else\n        AC_MSG_RESULT([ok ($_os_release)])\n    fi\n\n    dnl Check whether we're using a SPARC or i386 processor\n    AC_MSG_CHECKING([the processor type])\n    if test \"$host_cpu\" = \"sparc\" -o \"$host_cpu\" = \"i386\"; then\n        AC_MSG_RESULT([ok ($host_cpu)])\n    else\n        AC_MSG_ERROR([only SPARC and i386 processors are supported])\n    fi\n    ;;\n\nlinux-gnu*|k*bsd*-gnu*|linux-musl*)\n    using_freetype_fontconfig=yes\n    using_x11=yes\n    build_skia=yes\n    test_gdb_index=yes\n    test_split_debug=yes\n    if test \"$enable_fuzzers\" = yes; then\n        test_system_freetype=no\n    fi\n    _os=Linux\n    ;;\n\ngnu)\n    using_freetype_fontconfig=yes\n    using_x11=no\n    _os=GNU\n     ;;\n\ncygwin*|wsl*)\n    # When building on Windows normally with MSVC under Cygwin,\n    # configure thinks that the host platform (the platform the\n    # built code will run on) is Cygwin, even if it obviously is\n    # Windows, which in Autoconf terminology is called\n    # \"mingw32\". (Which is misleading as MinGW is the name of the\n    # tool-chain, not an operating system.)\n\n    # Somewhat confusing, yes. But this configure script doesn't\n    # look at $host etc that much, it mostly uses its own $_os\n    # variable, set here in this case statement.\n\n    using_freetype_fontconfig=no\n    using_x11=no\n    test_unix_dlapi=no\n    test_openldap=no\n    enable_pagein=no\n    build_skia=yes\n    _os=WINNT\n\n    DLLPOST=\".dll\"\n    LINKFLAGSNOUNDEFS=\n\n    if test \"$host_cpu\" = \"aarch64\"; then\n        build_skia=no\n        enable_gpgmepp=no\n        enable_coinmp=no\n        enable_firebird_sdbc=no\n    fi\n    ;;\n\ndarwin*) # macOS\n    using_freetype_fontconfig=no\n    using_x11=no\n    build_skia=yes\n    enable_pagein=no\n    if test -n \"$LODE_HOME\" ; then\n        mac_sanitize_path\n        AC_MSG_NOTICE([sanitized the PATH to $PATH])\n    fi\n    _os=Darwin\n    INSTROOTBASESUFFIX=/$PRODUCTNAME_WITHOUT_SPACES.app\n    INSTROOTCONTENTSUFFIX=/Contents\n    SDKDIRNAME=${PRODUCTNAME_WITHOUT_SPACES}${PRODUCTVERSION}_SDK\n    # See \"Default values, as such probably valid just for Linux\" comment above the case \"$host_os\"\n    LINKFLAGSSHL=\"-dynamiclib\"\n\n    # -fPIC is default\n    PICSWITCH=\"\"\n\n    DLLPOST=\".dylib\"\n\n    # -undefined error is the default\n    LINKFLAGSNOUNDEFS=\"\"\n    case \"$host_cpu\" in\n    aarch64|arm64)\n        # Apple's Clang uses \"arm64\"\n        host_cpu_for_clang=arm64\n    esac\n;;\n\nios*) # iOS\n    using_freetype_fontconfig=no\n    using_x11=no\n    build_crypto=no\n    test_libcmis=no\n    test_openldap=no\n    test_webdav=no\n    with_gssapi=no\n    if test -n \"$LODE_HOME\" ; then\n        mac_sanitize_path\n        AC_MSG_NOTICE([sanitized the PATH to $PATH])\n    fi\n    enable_gpgmepp=no\n    _os=iOS\n    enable_mpl_subset=yes\n    enable_lotuswordpro=no\n    disable_database_connectivity_dependencies\n    enable_coinmp=no\n    enable_lpsolve=no\n    enable_extension_integration=no\n    enable_xmlhelp=no\n    with_ppds=no\n    if test \"$enable_ios_simulator\" = \"yes\"; then\n        host=x86_64-apple-darwin\n    fi\n    # See \"Default values, as such probably valid just for Linux\" comment above the case \"$host_os\"\n    LINKFLAGSSHL=\"-dynamiclib\"\n\n    # -fPIC is default\n    PICSWITCH=\"\"\n\n    DLLPOST=\".dylib\"\n\n    # -undefined error is the default\n    LINKFLAGSNOUNDEFS=\"\"\n\n    # HOST_PLATFORM is used for external projects and their configury typically doesn't like the \"ios\"\n    # part, so use aarch64-apple-darwin for now.\n    HOST_PLATFORM=aarch64-apple-darwin\n\n    # Apple's Clang uses \"arm64\"\n    host_cpu_for_clang=arm64\n;;\n\nfreebsd*)\n    using_freetype_fontconfig=yes\n    using_x11=yes\n    build_skia=yes\n    AC_MSG_CHECKING([the FreeBSD operating system release])\n    if test -n \"$with_os_version\"; then\n        OSVERSION=\"$with_os_version\"\n    else\n        OSVERSION=`/sbin/sysctl -n kern.osreldate`\n    fi\n    AC_MSG_RESULT([found OSVERSION=$OSVERSION])\n    AC_MSG_CHECKING([which thread library to use])\n    if test \"$OSVERSION\" -lt \"500016\"; then\n        PTHREAD_CFLAGS=\"-D_THREAD_SAFE\"\n        PTHREAD_LIBS=\"-pthread\"\n    elif test \"$OSVERSION\" -lt \"502102\"; then\n        PTHREAD_CFLAGS=\"-D_THREAD_SAFE\"\n        PTHREAD_LIBS=\"-lc_r\"\n    else\n        PTHREAD_CFLAGS=\"\"\n        PTHREAD_LIBS=\"-pthread\"\n    fi\n    AC_MSG_RESULT([$PTHREAD_LIBS])\n    _os=FreeBSD\n    ;;\n\n*netbsd*)\n    using_freetype_fontconfig=yes\n    using_x11=yes\n    test_gtk3_kde5=no\n    build_skia=yes\n    PTHREAD_LIBS=\"-pthread -lpthread\"\n    _os=NetBSD\n    ;;\n\nopenbsd*)\n    using_freetype_fontconfig=yes\n    using_x11=yes\n    PTHREAD_CFLAGS=\"-D_THREAD_SAFE\"\n    PTHREAD_LIBS=\"-pthread\"\n    _os=OpenBSD\n    ;;\n\ndragonfly*)\n    using_freetype_fontconfig=yes\n    using_x11=yes\n    build_skia=yes\n    PTHREAD_LIBS=\"-pthread\"\n    _os=DragonFly\n    ;;\n\nlinux-android*)\n    # API exists, but seems not really usable since Android 7 AFAIK\n    usable_dlapi=no\n    using_freetype_fontconfig=yes\n    using_headless_plugin=no\n    using_x11=no\n    build_crypto=no\n    test_openldap=no\n    test_system_freetype=no\n    test_webdav=no\n    with_gssapi=no\n    disable_database_connectivity_dependencies\n    enable_lotuswordpro=no\n    enable_mpl_subset=yes\n    enable_cairo_canvas=no\n    enable_coinmp=yes\n    enable_lpsolve=no\n    enable_odk=no\n    enable_python=no\n    enable_xmlhelp=no\n    _os=Android\n    ;;\n\nhaiku*)\n    using_freetype_fontconfig=yes\n    using_x11=no\n    test_gtk3=no\n    test_gtk3_kde5=no\n    test_kf5=yes\n    test_kf6=yes\n    enable_odk=no\n    enable_coinmp=no\n    enable_pdfium=no\n    enable_sdremote=no\n    enable_postgresql_sdbc=no\n    enable_firebird_sdbc=no\n    _os=Haiku\n    ;;\n\nemscripten)\n    # API currently just exists in headers, not code\n    usable_dlapi=no\n    using_freetype_fontconfig=yes\n    using_x11=yes\n    test_openldap=no\n    test_qt5=yes\n    test_split_debug=yes\n    test_system_freetype=no\n    enable_compiler_plugins=no\n    enable_customtarget_components=yes\n    enable_split_debug=yes\n    enable_wasm_strip=yes\n    with_system_zlib=no\n    with_theme=\"colibre\"\n    _os=Emscripten\n    ;;\n\n*)\n    AC_MSG_ERROR([$host_os operating system is not suitable to build LibreOffice for!])\n    ;;\nesac\n\nAC_SUBST(HOST_PLATFORM)\n\nif test -z \"$using_x11\" -o -z \"$using_freetype_fontconfig\"; then\n    AC_MSG_ERROR([You must set \\$using_freetype_fontconfig and \\$using_x11 for your platform])\nfi\n\n# Set defaults, if not set by platform\ntest \"${test_cpdb+set}\" = set || test_cpdb=\"$using_x11\"\ntest \"${test_cups+set}\" = set || test_cups=\"$using_x11\"\ntest \"${test_dbus+set}\" = set || test_dbus=\"$using_x11\"\ntest \"${test_gen+set}\" = set || test_gen=\"$using_x11\"\ntest \"${test_gstreamer_1_0+set}\" = set || test_gstreamer_1_0=\"$using_x11\"\ntest \"${test_gtk3+set}\" = set || test_gtk3=\"$using_x11\"\ntest \"${test_gtk4+set}\" = set || test_gtk4=\"$using_x11\"\ntest \"${test_kf5+set}\" = set || test_kf5=\"$using_x11\"\ntest \"${test_kf6+set}\" = set || test_kf6=\"$using_x11\"\n# don't handle test_qt5, so it can disable test_kf5 later\ntest \"${test_qt6+set}\" = set || test_qt6=\"$using_x11\"\ntest \"${test_randr+set}\" = set || test_randr=\"$using_x11\"\ntest \"${test_xrender+set}\" = set || test_xrender=\"$using_x11\"\ntest \"${using_headless_plugin+set}\" = set || using_headless_plugin=\"$using_freetype_fontconfig\"\n\ntest \"${test_gtk3_kde5+set}\" != set -a \"$test_kf5\" = yes -a \"$test_gtk3\" = yes && test_gtk3_kde5=\"yes\"\n# Make sure fontconfig and freetype test both either system or not\ntest \"${test_system_fontconfig+set}\" != set -a \"${test_system_freetype+set}\" = set && test_system_fontconfig=\"$test_system_freetype\"\ntest \"${test_system_freetype+set}\" != set -a \"${test_system_fontconfig+set}\" = set && test_system_freetype=\"$test_system_fontconfig\"\n\n# convenience / platform overriding \"fixes\"\n# Don't sort!\ntest \"$test_kf5\" = yes -a \"$test_qt5\" = no && test_kf5=no\ntest \"$test_kf5\" = yes && test_qt5=yes\ntest \"$test_gtk3\" != yes && enable_gtk3=no\ntest \"$test_gtk3\" != yes -o \"$test_kf5\" != yes && test_gtk3_kde5=no\ntest \"$using_freetype_fontconfig\" = no && using_headless_plugin=no\ntest \"$using_freetype_fontconfig\" = yes && test_cairo=yes\n\n# Keep in sync with the above $using_x11 depending test default list\ndisable_x11_tests()\n{\n    test_cpdb=no\n    test_cups=no\n    test_dbus=no\n    test_gen=no\n    test_gstreamer_1_0=no\n    test_gtk3_kde5=no\n    test_gtk3=no\n    test_gtk4=no\n    test_kf5=no\n    test_kf6=no\n    test_qt5=no\n    test_qt6=no\n    test_randr=no\n    test_xrender=no\n}\n\ntest \"$using_x11\" = yes && USING_X11=TRUE\n\nif test \"$using_freetype_fontconfig\" = yes; then\n    AC_DEFINE(USE_HEADLESS_CODE)\n    USE_HEADLESS_CODE=TRUE\n    if test \"$using_headless_plugin\" = yes; then\n        AC_DEFINE(ENABLE_HEADLESS)\n        ENABLE_HEADLESS=TRUE\n    fi\nelse\n    test_fontconfig=no\n    test_freetype=no\nfi\n\nAC_SUBST(ENABLE_HEADLESS)\nAC_SUBST(USE_HEADLESS_CODE)\n\nAC_MSG_NOTICE([VCL platform has a usable dynamic loading API: $usable_dlapi])\nAC_MSG_NOTICE([VCL platform uses freetype+fontconfig: $using_freetype_fontconfig])\nAC_MSG_NOTICE([VCL platform uses headless plugin: $using_headless_plugin])\nAC_MSG_NOTICE([VCL platform uses X11: $using_x11])\n\n# ===================================================================\n#\n# End initial platform setup\n#\n# ===================================================================\n\nif test \"$_os\" = \"Android\" ; then\n    # Verify that the NDK and SDK options are proper\n    if test -z \"$with_android_ndk\"; then\n        AC_MSG_ERROR([the --with-android-ndk option is mandatory, unless it is available at external/android-ndk/.])\n    elif test ! -f \"$ANDROID_NDK_DIR/meta/abis.json\"; then\n        AC_MSG_ERROR([the --with-android-ndk option does not point to an Android NDK])\n    fi\n\n    if test -z \"$ANDROID_SDK_DIR\"; then\n        AC_MSG_ERROR([the --with-android-sdk option is mandatory, unless it is available at external/android-sdk-linux/.])\n    elif test ! -d \"$ANDROID_SDK_DIR/platforms\"; then\n        AC_MSG_ERROR([the --with-android-sdk option does not point to an Android SDK])\n    fi\nfi\n\nAC_SUBST(SDKDIRNAME)\n\nAC_SUBST(PTHREAD_CFLAGS)\nAC_SUBST(PTHREAD_LIBS)\n\n# Check for explicit A/C/CXX/OBJC/OBJCXX/LDFLAGS.\n# By default use the ones specified by our build system,\n# but explicit override is possible.\nAC_MSG_CHECKING(for explicit AFLAGS)\nif test -n \"$AFLAGS\"; then\n    AC_MSG_RESULT([$AFLAGS])\n    x_AFLAGS=\nelse\n    AC_MSG_RESULT(no)\n    x_AFLAGS=[\\#]\nfi\nAC_MSG_CHECKING(for explicit CFLAGS)\nif test -n \"$CFLAGS\"; then\n    AC_MSG_RESULT([$CFLAGS])\n    x_CFLAGS=\nelse\n    AC_MSG_RESULT(no)\n    x_CFLAGS=[\\#]\nfi\nAC_MSG_CHECKING(for explicit CXXFLAGS)\nif test -n \"$CXXFLAGS\"; then\n    AC_MSG_RESULT([$CXXFLAGS])\n    x_CXXFLAGS=\nelse\n    AC_MSG_RESULT(no)\n    x_CXXFLAGS=[\\#]\nfi\nAC_MSG_CHECKING(for explicit OBJCFLAGS)\nif test -n \"$OBJCFLAGS\"; then\n    AC_MSG_RESULT([$OBJCFLAGS])\n    x_OBJCFLAGS=\nelse\n    AC_MSG_RESULT(no)\n    x_OBJCFLAGS=[\\#]\nfi\nAC_MSG_CHECKING(for explicit OBJCXXFLAGS)\nif test -n \"$OBJCXXFLAGS\"; then\n    AC_MSG_RESULT([$OBJCXXFLAGS])\n    x_OBJCXXFLAGS=\nelse\n    AC_MSG_RESULT(no)\n    x_OBJCXXFLAGS=[\\#]\nfi\nAC_MSG_CHECKING(for explicit LDFLAGS)\nif test -n \"$LDFLAGS\"; then\n    AC_MSG_RESULT([$LDFLAGS])\n    x_LDFLAGS=\nelse\n    AC_MSG_RESULT(no)\n    x_LDFLAGS=[\\#]\nfi\nAC_SUBST(AFLAGS)\nAC_SUBST(CFLAGS)\nAC_SUBST(CXXFLAGS)\nAC_SUBST(OBJCFLAGS)\nAC_SUBST(OBJCXXFLAGS)\nAC_SUBST(LDFLAGS)\nAC_SUBST(x_AFLAGS)\nAC_SUBST(x_CFLAGS)\nAC_SUBST(x_CXXFLAGS)\nAC_SUBST(x_OBJCFLAGS)\nAC_SUBST(x_OBJCXXFLAGS)\nAC_SUBST(x_LDFLAGS)\n\ndnl These are potentially set for MSVC, in the code checking for UCRT below:\nmy_original_CFLAGS=$CFLAGS\nmy_original_CXXFLAGS=$CXXFLAGS\nmy_original_CPPFLAGS=$CPPFLAGS\n\ndnl The following checks for gcc, cc and then cl (if it weren't guarded for win32)\ndnl Needs to precede the AC_C_BIGENDIAN and AC_SEARCH_LIBS calls below, which apparently call\ndnl AC_PROG_CC internally.\nif test \"$_os\" != \"WINNT\"; then\n    # AC_PROG_CC sets CFLAGS to -g -O2 if not set, avoid that (and avoid -O2 during AC_PROG_CC,\n    # Clang 12.0.1 occasionally SEGVs on some of the test invocations during AC_PROG_CC with -O2):\n    save_CFLAGS=$CFLAGS\n    CFLAGS=-g\n    AC_PROG_CC\n    CFLAGS=$save_CFLAGS\n    if test -z \"$CC_BASE\"; then\n        CC_BASE=`first_arg_basename \"$CC\"`\n    fi\nfi\n\nif test \"$_os\" != \"WINNT\"; then\n    AC_C_BIGENDIAN([ENDIANNESS=big], [ENDIANNESS=little])\nelse\n    ENDIANNESS=little\nfi\nAC_SUBST(ENDIANNESS)\n\nif test \"$usable_dlapi\" != no; then\n    AC_DEFINE([HAVE_DLAPI])\n    if test \"$test_unix_dlapi\" != no; then\n        save_LIBS=\"$LIBS\"\n        AC_SEARCH_LIBS([dlsym], [dl],\n            [case \"$ac_cv_search_dlsym\" in -l*) UNIX_DLAPI_LIBS=\"$ac_cv_search_dlsym\";; esac],\n            [AC_MSG_ERROR([dlsym not found in either libc nor libdl])])\n        LIBS=\"$save_LIBS\"\n        AC_DEFINE([HAVE_UNIX_DLAPI])\n    fi\nfi\nAC_SUBST(UNIX_DLAPI_LIBS)\n\n# Check for a (GNU) backtrace implementation\nAC_ARG_VAR([BACKTRACE_CFLAGS], [Compiler flags needed to use backtrace(3)])\nAC_ARG_VAR([BACKTRACE_LIBS], [Linker flags needed to use backtrace(3)])\nAS_IF([test \"x$BACKTRACE_LIBS$BACKTRACE_CFLAGS\" = x], [\n    save_LIBS=\"$LIBS\"\n    AC_SEARCH_LIBS([backtrace], [libexecinfo],\n        [case \"$ac_cv_search_backtrace\" in -l*) BACKTRACE_LIBS=\"$ac_cv_search_backtrace\";; esac],\n        [PKG_CHECK_MODULES([BACKTRACE], [libexecinfo], [ac_cv_search_backtrace=], [:])])\n    LIBS=\"$save_LIBS\"\n])\nAS_IF([test \"x$ac_cv_search_backtrace\" != xno ], [\n    AC_DEFINE([HAVE_FEATURE_BACKTRACE])\n])\n\ndnl ===================================================================\ndnl Sanity checks for Emscripten SDK setup\ndnl ===================================================================\n\nEMSCRIPTEN_MIN_MAJOR=3\nEMSCRIPTEN_MIN_MINOR=1\nEMSCRIPTEN_MIN_TINY=46\nEMSCRIPTEN_MIN_VERSION=\"${EMSCRIPTEN_MIN_MAJOR}.${EMSCRIPTEN_MIN_MINOR}.${EMSCRIPTEN_MIN_TINY}\"\n\nEMSCRIPTEN_WORKERJS=\nif test \"$_os\" = \"Emscripten\"; then\n    AC_MSG_CHECKING([if Emscripten is at least $EMSCRIPTEN_MIN_VERSION])\n    if test -z \"$EMSCRIPTEN_VERSION_H\"; then\n        AS_IF([test -z \"$EMSDK\"],\n              [AC_MSG_ERROR([No \\$EMSDK environment variable.])])\n        EMSCRIPTEN_VERSION_H=$EMSDK/upstream/emscripten/cache/sysroot/include/emscripten/version.h\n        if test ! -f \"$EMSCRIPTEN_VERSION_H\"; then\n            EMSCRIPTEN_VERSION_H=$EMSDK/emscripten/main/cache/sysroot/include/emscripten/version.h\n        fi\n    fi\n    if test -f \"$EMSCRIPTEN_VERSION_H\"; then\n        EMSCRIPTEN_MAJOR=$($GREP __EMSCRIPTEN_major__ \"$EMSCRIPTEN_VERSION_H\" | $SED -ne 's/.*__EMSCRIPTEN_major__ //p')\n        EMSCRIPTEN_MINOR=$($GREP __EMSCRIPTEN_minor__ \"$EMSCRIPTEN_VERSION_H\" | $SED -ne 's/.*__EMSCRIPTEN_minor__ //p')\n        EMSCRIPTEN_TINY=$($GREP __EMSCRIPTEN_tiny__ \"$EMSCRIPTEN_VERSION_H\" | $SED -ne 's/.*__EMSCRIPTEN_tiny__ //p')\n    else\n        EMSCRIPTEN_DEFINES=$(echo | emcc -dM -E - | $GREP __EMSCRIPTEN_)\n        EMSCRIPTEN_MAJOR=$(echo \"$EMSCRIPTEN_DEFINES\" | $SED -ne 's/.*__EMSCRIPTEN_major__ //p')\n        EMSCRIPTEN_MINOR=$(echo \"$EMSCRIPTEN_DEFINES\" | $SED -ne 's/.*__EMSCRIPTEN_minor__ //p')\n        EMSCRIPTEN_TINY=$(echo \"$EMSCRIPTEN_DEFINES\" | $SED -ne 's/.*__EMSCRIPTEN_tiny__ //p')\n    fi\n\n    EMSCRIPTEN_VERSION=\"${EMSCRIPTEN_MAJOR}.${EMSCRIPTEN_MINOR}.${EMSCRIPTEN_TINY}\"\n\n    check_semantic_version_three_prefixed EMSCRIPTEN MIN\n    if test $? -eq 0; then\n        AC_MSG_RESULT([yes ($EMSCRIPTEN_VERSION)])\n    else\n        AC_MSG_ERROR([no, found $EMSCRIPTEN_VERSION])\n    fi\n\n    EMSCRIPTEN_ERROR=0\n    if ! command -v emconfigure >/dev/null 2>&1; then\n        AC_MSG_WARN([emconfigure must be in your \\$PATH])\n        EMSCRIPTEN_ERROR=1\n    fi\n    if test -z \"$EMMAKEN_JUST_CONFIGURE\"; then\n        AC_MSG_WARN([\"\\$EMMAKEN_JUST_CONFIGURE wasn't set by emconfigure. Prefix configure or use autogen.sh])\n        EMSCRIPTEN_ERROR=1\n    fi\n    EMSDK_FILE_PACKAGER=\"$(em-config EMSCRIPTEN_ROOT)\"/tools/file_packager\n    if ! test -x \"$EMSDK_FILE_PACKAGER\"; then\n        AC_MSG_WARN([No file_packager found in $(em-config EMSCRIPTEN_ROOT)/tools/file_packager.])\n        EMSCRIPTEN_ERROR=1\n    fi\n    if test $EMSCRIPTEN_ERROR -ne 0; then\n        AC_MSG_ERROR([\"Please fix your EMSDK setup to build with Emscripten!\"])\n    fi\n\n    dnl Some build-side things are conditional on \"EMSCRIPTEN in BUILD_TYPE_FOR_HOST\":\n    BUILD_TYPE=\"$BUILD_TYPE EMSCRIPTEN\"\n\n    dnl Generation of .worker.js files has been dropped completely from Emscripten 3.1.68, and the\n    dnl generated files were just unused dummies since Emscripten 3.1.58:\n    AC_MSG_CHECKING([if Emscripten still depends on a separate .worker.js file])\n    check_semantic_version_three 3 1 58 \"$EMSCRIPTEN_MAJOR\" \"$EMSCRIPTEN_MINOR\" \"$EMSCRIPTEN_TINY\"\n    if test $? -ne 0; then\n        AC_MSG_RESULT([yes])\n        EMSCRIPTEN_WORKERJS=TRUE\n    else\n        AC_MSG_RESULT([no])\n    fi\nfi\nAC_SUBST(EMSDK_FILE_PACKAGER)\nAC_SUBST(EMSCRIPTEN_EXTRA_SOFFICE_PRE_JS)\nAC_SUBST(EMSCRIPTEN_WORKERJS)\n\n###############################################################################\n# Extensions switches --enable/--disable\n###############################################################################\n# By default these should be enabled unless having extra dependencies.\n# If there is extra dependency over configure options then the enable should\n# be automagic based on whether the requiring feature is enabled or not.\n# All this options change anything only with --enable-extension-integration.\n\n# The name of this option and its help string makes it sound as if\n# extensions are built anyway, just not integrated in the installer,\n# if you use --disable-extension-integration. Is that really the\n# case?\n\nAC_ARG_ENABLE(ios-simulator,\n    AS_HELP_STRING([--enable-ios-simulator],\n        [build for iOS simulator])\n)\n\nlibo_FUZZ_ARG_ENABLE(extension-integration,\n    AS_HELP_STRING([--disable-extension-integration],\n        [Disable integration of the built extensions in the installer of the\n         product. Use this switch to disable the integration.])\n)\n\nAC_ARG_ENABLE(avmedia,\n    AS_HELP_STRING([--disable-avmedia],\n        [Disable displaying and inserting AV media in documents. Work in progress, use only if you are hacking on it.]),\n,test \"${enable_avmedia+set}\" = set || enable_avmedia=yes)\n\nAC_ARG_ENABLE(database-connectivity,\n    AS_HELP_STRING([--disable-database-connectivity],\n        [Disable various database connectivity. Work in progress, use only if you are hacking on it.])\n)\n\n# This doesn't mean not building (or \"integrating\") extensions\n# (although it probably should; i.e. it should imply\n# --disable-extension-integration I guess), it means not supporting\n# any extension mechanism at all\nlibo_FUZZ_ARG_ENABLE(extensions,\n    AS_HELP_STRING([--disable-extensions],\n        [Disable all add-on extension functionality. Work in progress, use only if you are hacking on it.])\n)\n\nAC_ARG_ENABLE(scripting,\n    AS_HELP_STRING([--disable-scripting],\n        [Disable BASIC, Java, Python and .NET. Work in progress, use only if you are hacking on it.]),\n,test \"${enable_scripting+set}\" = set || enable_scripting=yes)\n\n# This is mainly for Android and iOS, but could potentially be used in some\n# special case otherwise, too, so factored out as a separate setting\n\nAC_ARG_ENABLE(dynamic-loading,\n    AS_HELP_STRING([--disable-dynamic-loading],\n        [Disable any use of dynamic loading of code. Work in progress, use only if you are hacking on it.])\n)\n\nlibo_FUZZ_ARG_ENABLE(report-builder,\n    AS_HELP_STRING([--disable-report-builder],\n        [Disable the Report Builder.])\n)\n\nlibo_FUZZ_ARG_ENABLE(ext-wiki-publisher,\n    AS_HELP_STRING([--enable-ext-wiki-publisher],\n        [Enable the Wiki Publisher extension.])\n)\n\nlibo_FUZZ_ARG_ENABLE(lpsolve,\n    AS_HELP_STRING([--disable-lpsolve],\n        [Disable compilation of the lp solve solver ])\n)\nlibo_FUZZ_ARG_ENABLE(coinmp,\n    AS_HELP_STRING([--disable-coinmp],\n        [Disable compilation of the CoinMP solver ])\n)\n\nlibo_FUZZ_ARG_ENABLE(pdfimport,\n    AS_HELP_STRING([--disable-pdfimport],\n        [Disable building the PDF import feature.])\n)\n\nlibo_FUZZ_ARG_ENABLE(pdfium,\n    AS_HELP_STRING([--disable-pdfium],\n        [Disable building PDFium. Results in insecure PDF signature verification.])\n)\n\nlibo_FUZZ_ARG_ENABLE(skia,\n    AS_HELP_STRING([--disable-skia],\n        [Disable building Skia. Use --enable-skia=debug to build without optimizations.])\n)\n\nlibo_FUZZ_ARG_ENABLE(skia-vulkan-validation,\n    AS_HELP_STRING([--enable-skia-vulkan-validation],\n        [Enable Vulkan validation layers under Skia. The Vulkan SDK must be installed externally.])\n)\n\n###############################################################################\n\ndnl ---------- *** ----------\n\nlibo_FUZZ_ARG_ENABLE(mergelibs,\n    AS_HELP_STRING([--enable-mergelibs=yes/no/more],\n        [Merge several of the smaller libraries into one big \"merged\" library.\n         The \"more\" option will link even more of the smaller libraries.\n         \"more\" not appropriate for distros which split up LibreOffice into multiple packages.\n         It is only appropriate for situations where all of LO is delivered in a single install/package. ])\n)\n\nlibo_FUZZ_ARG_ENABLE(breakpad,\n    AS_HELP_STRING([--enable-breakpad],\n        [Enables breakpad for crash reporting.])\n)\n\nlibo_FUZZ_ARG_ENABLE(crashdump,\n    AS_HELP_STRING([--disable-crashdump],\n        [Disable dump.ini and dump-file, when --enable-breakpad])\n)\n\nAC_ARG_ENABLE(fetch-external,\n    AS_HELP_STRING([--disable-fetch-external],\n        [Disables fetching external tarballs from web sources.])\n)\n\nAC_ARG_ENABLE(fuzzers,\n    AS_HELP_STRING([--enable-fuzzers],\n        [Enables building libfuzzer targets for fuzz testing.])\n)\n\nlibo_FUZZ_ARG_ENABLE(pch,\n    AS_HELP_STRING([--enable-pch=<yes/no/system/base/normal/full>],\n        [Enables precompiled header support for C++. Forced default on Windows/VC build.\n         Using 'system' will include only external headers, 'base' will add also headers\n         from base modules, 'normal' will also add all headers except from the module built,\n         'full' will use all suitable headers even from a module itself.])\n)\n\nlibo_FUZZ_ARG_ENABLE(epm,\n    AS_HELP_STRING([--enable-epm],\n        [LibreOffice includes self-packaging code, that requires epm, however epm is\n         useless for large scale package building.])\n)\n\nlibo_FUZZ_ARG_ENABLE(odk,\n    AS_HELP_STRING([--enable-odk],\n        [Enable building the Office Development Kit, the part that extensions need to build against])\n)\n\nAC_ARG_ENABLE(mpl-subset,\n    AS_HELP_STRING([--enable-mpl-subset],\n        [Don't compile any pieces which are not MPL or more liberally licensed])\n)\n\nlibo_FUZZ_ARG_ENABLE(evolution2,\n    AS_HELP_STRING([--enable-evolution2],\n        [Allows the built-in evolution 2 addressbook connectivity build to be\n         enabled.])\n)\n\nAC_ARG_ENABLE(avahi,\n    AS_HELP_STRING([--enable-avahi],\n        [Determines whether to use Avahi to advertise Impress to remote controls.])\n)\n\nAC_ARG_ENABLE(msvc-analyze,\n    AS_HELP_STRING([--enable-msvc-analyze],\n        [Determines whether to enable the Microsoft Visual Studio /analyze flag to provide additional warnings.])\n)\n\nlibo_FUZZ_ARG_ENABLE(werror,\n    AS_HELP_STRING([--enable-werror],\n        [Turn warnings to errors. (Has no effect in modules where the treating\n         of warnings as errors is disabled explicitly.)]),\n,)\n\nlibo_FUZZ_ARG_ENABLE(assert-always-abort,\n    AS_HELP_STRING([--enable-assert-always-abort],\n        [make assert() failures abort even when building without --enable-debug or --enable-dbgutil.]),\n,)\n\nlibo_FUZZ_ARG_ENABLE(dbgutil,\n    AS_HELP_STRING([--enable-dbgutil],\n        [Provide debugging support from --enable-debug and include additional debugging\n         utilities such as object counting or more expensive checks.\n         This is the recommended option for developers.\n         Note that this makes the build ABI incompatible, it is not possible to mix object\n         files or libraries from a --enable-dbgutil and a --disable-dbgutil build.]))\n\nlibo_FUZZ_ARG_ENABLE(debug,\n    AS_HELP_STRING([--enable-debug],\n        [Include debugging information, disable compiler optimization and inlining plus\n         extra debugging code like assertions. Extra large build! (enables -g compiler flag).]))\n\nlibo_FUZZ_ARG_ENABLE(split-debug,\n    AS_HELP_STRING([--disable-split-debug],\n        [Disable using split debug information (-gsplit-dwarf compile flag). Split debug information\n         saves disk space and build time, but requires tools that support it (both build tools and debuggers).]))\n\nlibo_FUZZ_ARG_ENABLE(gdb-index,\n    AS_HELP_STRING([--disable-gdb-index],\n        [Disables creating debug information in the gdb index format, which makes gdb start faster.\n         The feature requires a linker that supports the --gdb-index option.]))\n\nlibo_FUZZ_ARG_ENABLE(sal-log,\n    AS_HELP_STRING([--enable-sal-log],\n        [Make SAL_INFO and SAL_WARN calls do something even in a non-debug build.]))\n\nlibo_FUZZ_ARG_ENABLE(symbols,\n    AS_HELP_STRING([--enable-symbols],\n        [Generate debug information.\n         By default, enabled for --enable-debug and --enable-dbgutil, disabled\n         otherwise. It is possible to explicitly specify gbuild build targets\n         (where 'all' means everything, '-' prepended means to not enable, '/' appended means\n         everything in the directory; there is no ordering, more specific overrides\n         more general, and disabling takes precedence).\n         Example: --enable-symbols=\"all -sw/ -Library_sc\".]))\n\nlibo_FUZZ_ARG_ENABLE(optimized,\n    AS_HELP_STRING([--enable-optimized=<yes/no/debug>],\n        [Whether to compile with optimization flags.\n         By default, disabled for --enable-debug and --enable-dbgutil, enabled\n         otherwise. Using 'debug' will try to use only optimizations that should\n         not interfere with debugging. For Emscripten we default to optimized (-O1)\n         debug build, as otherwise binaries become too large.]))\n\nlibo_FUZZ_ARG_ENABLE(runtime-optimizations,\n    AS_HELP_STRING([--disable-runtime-optimizations],\n        [Statically disable certain runtime optimizations (like rtl/alloc.h or\n         JVM JIT) that are known to interact badly with certain dynamic analysis\n         tools (like -fsanitize=address or Valgrind).  By default, disabled iff\n         CC contains \"-fsanitize=*\".  (For Valgrind, those runtime optimizations\n         are typically disabled dynamically via RUNNING_ON_VALGRIND.)]))\n\nAC_ARG_WITH(valgrind,\n    AS_HELP_STRING([--with-valgrind],\n        [Make availability of Valgrind headers a hard requirement.]))\n\nlibo_FUZZ_ARG_ENABLE(compiler-plugins,\n    AS_HELP_STRING([--enable-compiler-plugins],\n        [Enable compiler plugins that will perform additional checks during\n         building. Enabled automatically by --enable-dbgutil.\n         Use --enable-compiler-plugins=debug to also enable debug code in the plugins.]))\nCOMPILER_PLUGINS_DEBUG=\nif test \"$enable_compiler_plugins\" = debug; then\n    enable_compiler_plugins=yes\n    COMPILER_PLUGINS_DEBUG=TRUE\nfi\n\nlibo_FUZZ_ARG_ENABLE(compiler-plugins-analyzer-pch,\n    AS_HELP_STRING([--disable-compiler-plugins-analyzer-pch],\n        [Disable use of precompiled headers when running the Clang compiler plugin analyzer.  Not\n         relevant in the --disable-compiler-plugins case.]))\n\nlibo_FUZZ_ARG_ENABLE(ooenv,\n    AS_HELP_STRING([--enable-ooenv],\n        [Enable ooenv for the instdir installation.]))\n\nAC_ARG_ENABLE(lto,\n    AS_HELP_STRING([--enable-lto],\n        [Enable link-time optimization. Suitable for (optimised) product builds. Building might take\n         longer but libraries and executables are optimized for speed. For GCC, best to use the 'gold'\n         linker.)]))\n\nAC_ARG_ENABLE(python,\n    AS_HELP_STRING([--enable-python=<no/auto/system/internal/fully-internal>],\n        [Enables or disables Python support at run-time.\n         Also specifies what Python to use at build-time.\n         'fully-internal' even forces the internal version for uses of Python\n         during the build.\n         On macOS the only choices are\n         'internal' (default) or 'fully-internal'. Otherwise the default is 'auto'.\n         ]))\n\nlibo_FUZZ_ARG_ENABLE(gtk3,\n    AS_HELP_STRING([--disable-gtk3],\n        [Determines whether to use Gtk+ 3.0 vclplug on platforms where Gtk+ 3.0 is available.]),\n,test \"${test_gtk3}\" = no -o \"${enable_gtk3+set}\" = set || enable_gtk3=yes)\n\nAC_ARG_ENABLE(gtk4,\n    AS_HELP_STRING([--enable-gtk4],\n        [Determines whether to use Gtk+ 4.0 vclplug on platforms where Gtk+ 4.0 is available.]))\n\nAC_ARG_ENABLE(atspi-tests,\n    AS_HELP_STRING([--disable-atspi-tests],\n        [Determines whether to enable AT-SPI2 tests for the GTK3 vclplug.]))\n\nAC_ARG_ENABLE(introspection,\n    AS_HELP_STRING([--enable-introspection],\n        [Generate files for GObject introspection.  Requires --enable-gtk3.  (Typically used by\n         Linux distributions.)]))\n\nAC_ARG_ENABLE(split-app-modules,\n    AS_HELP_STRING([--enable-split-app-modules],\n        [Split file lists for app modules, e.g. base, calc.\n         Has effect only with make distro-pack-install]),\n,)\n\nAC_ARG_ENABLE(split-opt-features,\n    AS_HELP_STRING([--enable-split-opt-features],\n        [Split file lists for some optional features, e.g. pyuno, testtool.\n         Has effect only with make distro-pack-install]),\n,)\n\nlibo_FUZZ_ARG_ENABLE(cairo-canvas,\n    AS_HELP_STRING([--disable-cairo-canvas],\n        [Determines whether to build the Cairo canvas on platforms where Cairo is available.]),\n,)\n\nlibo_FUZZ_ARG_ENABLE(dbus,\n    AS_HELP_STRING([--disable-dbus],\n        [Determines whether to enable features that depend on dbus.\n         e.g. Presentation mode screensaver control, bluetooth presentation control, automatic font install]),\n,test \"${enable_dbus+set}\" = set || enable_dbus=yes)\n\nlibo_FUZZ_ARG_ENABLE(sdremote,\n    AS_HELP_STRING([--disable-sdremote],\n        [Determines whether to enable Impress remote control (i.e. the server component).]),\n,test \"${enable_sdremote+set}\" = set || enable_sdremote=yes)\n\nlibo_FUZZ_ARG_ENABLE(sdremote-bluetooth,\n    AS_HELP_STRING([--disable-sdremote-bluetooth],\n        [Determines whether to build sdremote with bluetooth support.\n         Requires dbus on Linux.]))\n\nlibo_FUZZ_ARG_ENABLE(gio,\n    AS_HELP_STRING([--disable-gio],\n        [Determines whether to use the GIO support.]),\n,test \"${enable_gio+set}\" = set || enable_gio=yes)\n\nAC_ARG_ENABLE(qt5,\n    AS_HELP_STRING([--enable-qt5],\n        [Determines whether to use Qt5 vclplug on platforms where Qt5 is\n         available.]),\n,)\n\nAC_ARG_ENABLE(qt6,\n    AS_HELP_STRING([--enable-qt6],\n        [Determines whether to use Qt6 vclplug on platforms where Qt6 is\n         available.]),\n,)\n\nAC_ARG_ENABLE(qt6-multimedia,\n    AS_HELP_STRING([--disable-qt6-multimedia],\n        [Determines whether to enable media playback using QtMultimedia when using the qt6/kf6 VCL plugins.]))\n\nAC_ARG_ENABLE(kf5,\n    AS_HELP_STRING([--enable-kf5],\n        [Determines whether to use Qt5/KF5 vclplug on platforms where Qt5 and\n         KF5 are available.]),\n,)\n\nAC_ARG_ENABLE(kf6,\n    AS_HELP_STRING([--enable-kf6],\n        [Determines whether to use KF6 vclplug on platforms where Qt6 and\n         KF6 are available.]),\n,)\n\n\nAC_ARG_ENABLE(gtk3_kde5,\n    AS_HELP_STRING([--enable-gtk3-kde5],\n        [Determines whether to use Gtk3 vclplug with KF5 file dialogs on\n         platforms where Gtk3, Qt5 and Plasma is available.]),\n,)\n\nAC_ARG_ENABLE(gen,\n    AS_HELP_STRING([--enable-gen],\n        [To select the gen backend in case of --disable-dynamic-loading.\n         Per default auto-enabled when X11 is used.]),\n,test \"${test_gen}\" = no -o \"${enable_gen+set}\" = set || enable_gen=yes)\n\nAC_ARG_ENABLE(gui,\n    AS_HELP_STRING([--disable-gui],\n        [Disable use of X11 or Wayland to reduce dependencies (e.g. for building LibreOfficeKit).]),\n,enable_gui=yes)\n\nlibo_FUZZ_ARG_ENABLE(randr,\n    AS_HELP_STRING([--disable-randr],\n        [Disable RandR support in the vcl project.]),\n,test \"${enable_randr+set}\" = set || enable_randr=yes)\n\nlibo_FUZZ_ARG_ENABLE(gstreamer-1-0,\n    AS_HELP_STRING([--disable-gstreamer-1-0],\n        [Disable building with the gstreamer 1.0 avmedia backend.]),\n,test \"${enable_gstreamer_1_0+set}\" = set || enable_gstreamer_1_0=yes)\n\nlibo_FUZZ_ARG_ENABLE([eot],\n    [AS_HELP_STRING([--enable-eot],\n        [Enable support for Embedded OpenType fonts.])],\n,test \"${enable_eot+set}\" = set || enable_eot=no)\n\nlibo_FUZZ_ARG_ENABLE(cve-tests,\n    AS_HELP_STRING([--disable-cve-tests],\n        [Prevent CVE tests to be executed]),\n,)\n\nlibo_FUZZ_ARG_ENABLE(nan-tests,\n    AS_HELP_STRING([--disable-nan-tests],\n        [Prevent NaN payload tests to be executed]),\n,)\n\nAC_ARG_ENABLE(build-opensymbol,\n    AS_HELP_STRING([--enable-build-opensymbol],\n        [Do not use the prebuilt opens___.ttf. Build it instead. This needs\n         fontforge installed.]),\n,)\n\nAC_ARG_ENABLE(dependency-tracking,\n    AS_HELP_STRING([--enable-dependency-tracking],\n        [Do not reject slow dependency extractors.])[\n  --disable-dependency-tracking\n                          Disables generation of dependency information.\n                          Speed up one-time builds.],\n,)\n\nAC_ARG_ENABLE(icecream,\n    AS_HELP_STRING([--enable-icecream],\n        [Use the 'icecream' distributed compiling tool to speedup the compilation.\n         It defaults to /opt/icecream for the location of the icecream gcc/g++\n         wrappers, you can override that using --with-gcc-home=/the/path switch.]),\n,)\n\nAC_ARG_ENABLE(ld,\n    AS_HELP_STRING([--enable-ld=<linker>],\n        [Use the specified linker. Both 'gold' and 'lld' linkers generally use less memory and link faster.\n         By default tries to use the best linker possible, use --disable-ld to use the default linker.\n         If <linker> contains any ':', the part before the first ':' is used as the value of\n         -fuse-ld, while the part after the first ':' is used as the value of --ld-path (which is\n         needed for Clang 12).]),\n,)\n\nAC_ARG_ENABLE(cpdb,\n    AS_HELP_STRING([--enable-cpdb],\n        [Build CPDB (Common Print Dialog Backends) support.]),\n,)\n\nlibo_FUZZ_ARG_ENABLE(cups,\n    AS_HELP_STRING([--disable-cups],\n        [Do not build cups support.])\n)\n\nAC_ARG_ENABLE(ccache,\n    AS_HELP_STRING([--disable-ccache],\n        [Do not try to use ccache automatically.\n         By default we will try to detect if ccache is available; in that case if\n         CC/CXX are not yet set, and --enable-icecream is not given, we\n         attempt to use ccache. --disable-ccache disables ccache completely.\n         Additionally ccache's depend mode is enabled if possible,\n         use --enable-ccache=nodepend to enable ccache without depend mode.\n]),\n,)\n\nAC_ARG_ENABLE(z7-debug,\n    AS_HELP_STRING([--enable-z7-debug],\n        [Makes the MSVC compiler use -Z7 for debugging instead of the default -Zi. Using this option takes\n         more disk spaces but allows to use ccache. Final PDB files are created even with this option enabled.\n         Enabled by default if ccache is detected.]))\n\nlibo_FUZZ_ARG_ENABLE(online-update,\n    AS_HELP_STRING([--enable-online-update],\n        [Enable the online update service that will check for new versions of\n         LibreOffice. Disabled by default. Requires --with-privacy-policy-url to be set.]),\n,)\n\nlibo_FUZZ_ARG_ENABLE(online-update-mar,\n    AS_HELP_STRING([--enable-online-update-mar],\n        [Enable the Mozilla-like online update service that will\n         check for new versions of LibreOffice. Currently only works for\n         Windows and Linux. Disabled by default.]),\n,)\n\nlibo_FUZZ_ARG_WITH(online-update-mar-baseurl,\n    AS_HELP_STRING([--with-online-update-mar-baseurl=...],\n        [Set the base URL value for --enable-online-update-mar.\n         (Can be left off for debug purposes, even if that may render the feature\n         non-functional.)]),\n,)\n\nlibo_FUZZ_ARG_WITH(online-update-mar-certificateder,\n    AS_HELP_STRING([--with-online-update-mar-certificateder=...],\n        [Set the certificate DER value for --enable-online-update-mar.\n         (Can be left off for debug purposes, even if that may render the feature\n         non-functional.)]),\n,)\n\nlibo_FUZZ_ARG_WITH(online-update-mar-certificatename,\n    AS_HELP_STRING([--with-online-update-mar-certificatename=...],\n        [Set the certificate name value for --enable-online-update-mar.\n         (Can be left off for debug purposes, even if that may render the feature\n         non-functional.)]),\n,)\n\nlibo_FUZZ_ARG_WITH(online-update-mar-certificatepath,\n    AS_HELP_STRING([--with-online-update-mar-certificatepath=...],\n        [Set the certificate path value for --enable-online-update-mar.\n         (Can be left off for debug purposes, even if that may render the feature\n         non-functional.)]),\n,)\n\nlibo_FUZZ_ARG_ENABLE(extension-update,\n    AS_HELP_STRING([--disable-extension-update],\n        [Disable possibility to update installed extensions.]),\n,)\n\nlibo_FUZZ_ARG_ENABLE(release-build,\n    AS_HELP_STRING([--enable-release-build],\n        [Enable release build. Note that the \"release build\" choice is orthogonal to\n         whether symbols are present, debug info is generated, or optimization\n         is done.\n         See https://wiki.documentfoundation.org/Development/DevBuild]),\n,)\n\nlibo_FUZZ_ARG_ENABLE(hardening-flags,\n    AS_HELP_STRING([--enable-hardening-flags],\n        [Enable automatically using hardening compiler flags. Distros typically\n         instead use their default configuration via CXXFLAGS, etc. But this provides a\n         convenient set of default hardening flags for non-distros]),\n,)\n\nAC_ARG_ENABLE(windows-build-signing,\n    AS_HELP_STRING([--enable-windows-build-signing],\n        [Enable signing of windows binaries (*.exe, *.dll)]),\n,)\n\nAC_ARG_ENABLE(silent-msi,\n    AS_HELP_STRING([--enable-silent-msi],\n        [Enable MSI with LIMITUI=1 (silent install).]),\n,)\n\nAC_ARG_ENABLE(wix,\n    AS_HELP_STRING([--enable-wix],\n        [Build Windows installer using WiX.]),\n,)\n\nAC_ARG_ENABLE(macosx-code-signing,\n    AS_HELP_STRING([--enable-macosx-code-signing=<identity>],\n        [Sign executables, dylibs, frameworks and the app bundle. If you\n         don't provide an identity the first suitable certificate\n         in your keychain is used.]),\n,)\n\nAC_ARG_ENABLE(macosx-package-signing,\n    AS_HELP_STRING([--enable-macosx-package-signing=<identity>],\n        [Create a .pkg suitable for uploading to the Mac App Store and sign\n         it. If you don't provide an identity the first suitable certificate\n         in your keychain is used.]),\n,)\n\nAC_ARG_ENABLE(macosx-sandbox,\n    AS_HELP_STRING([--enable-macosx-sandbox],\n        [Make the app bundle run in a sandbox. Requires code signing.\n         Is required by apps distributed in the Mac App Store, and implies\n         adherence to App Store rules.]),\n,)\n\nAC_ARG_WITH(macosx-bundle-identifier,\n    AS_HELP_STRING([--with-macosx-bundle-identifier=tld.mumble.orifice.TheOffice],\n        [Define the macOS bundle identifier. Default is the somewhat weird\n         org.libreoffice.script (\"script\", huh?).]),\n,with_macosx_bundle_identifier=org.libreoffice.script)\n\nAC_ARG_WITH(macosx-provisioning-profile,\n    AS_HELP_STRING([--with-macosx-provisioning-profile=/path/to/mac.provisionprofile],\n        [Specify the path to a provisioning profile to use]),\n,)\n\nAC_ARG_WITH(product-name,\n    AS_HELP_STRING([--with-product-name='My Own Office Suite'],\n        [Define the product name. Default is AC_PACKAGE_NAME.]),\n,with_product_name=$PRODUCTNAME)\n\nlibo_FUZZ_ARG_ENABLE(community-flavor,\n    AS_HELP_STRING([--disable-community-flavor],\n        [Disable the Community branding.]),\n,)\n\nAC_ARG_WITH(package-version,\n    AS_HELP_STRING([--with-package-version='3.1.4.5'],\n        [Define the package version. Default is AC_PACKAGE_VERSION. Use only if you distribute an own build for macOS.]),\n,)\n\nlibo_FUZZ_ARG_ENABLE(readonly-installset,\n    AS_HELP_STRING([--enable-readonly-installset],\n        [Prevents any attempts by LibreOffice to write into its installation. That means\n         at least that no \"system-wide\" extensions can be added. Partly experimental work in\n         progress, probably not fully implemented. Always enabled for macOS.]),\n,)\n\nlibo_FUZZ_ARG_ENABLE(mariadb-sdbc,\n    AS_HELP_STRING([--disable-mariadb-sdbc],\n        [Disable the build of the MariaDB/MySQL-SDBC driver.])\n)\n\nlibo_FUZZ_ARG_ENABLE(postgresql-sdbc,\n    AS_HELP_STRING([--disable-postgresql-sdbc],\n        [Disable the build of the PostgreSQL-SDBC driver.])\n)\n\nlibo_FUZZ_ARG_ENABLE(lotuswordpro,\n    AS_HELP_STRING([--disable-lotuswordpro],\n        [Disable the build of the Lotus Word Pro filter.]),\n,test \"${enable_lotuswordpro+set}\" = set || enable_lotuswordpro=yes)\n\nlibo_FUZZ_ARG_ENABLE(firebird-sdbc,\n    AS_HELP_STRING([--disable-firebird-sdbc],\n        [Disable the build of the Firebird-SDBC driver if it doesn't compile for you.]),\n,test \"${enable_firebird_sdbc+set}\" = set || enable_firebird_sdbc=yes)\n\nAC_ARG_ENABLE(bogus-pkg-config,\n    AS_HELP_STRING([--enable-bogus-pkg-config],\n        [MACOSX only: on MacOSX pkg-config can cause trouble. by default if one is found in the PATH, an error is issued. This flag turn that error into a warning.]),\n)\n\nAC_ARG_ENABLE(openssl,\n    AS_HELP_STRING([--disable-openssl],\n        [Disable using libssl/libcrypto from OpenSSL. If disabled,\n         components will use NSS. Work in progress,\n         use only if you are hacking on it.]),\n,enable_openssl=yes)\n\nlibo_FUZZ_ARG_ENABLE(cipher-openssl-backend,\n    AS_HELP_STRING([--enable-cipher-openssl-backend],\n        [Enable using OpenSSL as the actual implementation of the rtl/cipher.h functionality.\n         Requires --enable-openssl.]))\n\nAC_ARG_ENABLE(nss,\n    AS_HELP_STRING([--disable-nss],\n        [Disable using NSS. If disabled,\n         components will use openssl. Work in progress,\n         use only if you are hacking on it.]),\n,enable_nss=yes)\n\nAC_ARG_ENABLE(library-bin-tar,\n    AS_HELP_STRING([--enable-library-bin-tar],\n        [Enable the building and reused of tarball of binary build for some 'external' libraries.\n        Some libraries can save their build result in a tarball\n        stored in TARFILE_LOCATION. That binary tarball is\n        uniquely identified by the source tarball,\n        the content of the config_host.mk file and the content\n        of the top-level directory in core for that library\n        If this option is enabled, then if such a tarfile exist, it will be untarred\n        instead of the source tarfile, and the build step will be skipped for that\n        library.\n        If a proper tarfile does not exist, then the normal source-based\n        build is done for that library and a proper binary tarfile is created\n        for the next time.]),\n)\n\nAC_ARG_ENABLE(dconf,\n    AS_HELP_STRING([--disable-dconf],\n        [Disable the dconf configuration backend (enabled by default where\n         available).]))\n\nlibo_FUZZ_ARG_ENABLE(formula-logger,\n    AS_HELP_STRING(\n        [--enable-formula-logger],\n        [Enable formula logger for logging formula calculation flow in Calc.]\n    )\n)\n\nAC_ARG_ENABLE(ldap,\n    AS_HELP_STRING([--disable-ldap],\n        [Disable LDAP support.]),\n,enable_ldap=yes)\n\nAC_ARG_ENABLE(opencl,\n    AS_HELP_STRING([--disable-opencl],\n        [Disable OpenCL support.]),\n,enable_opencl=yes)\n\nlibo_FUZZ_ARG_ENABLE(librelogo,\n    AS_HELP_STRING([--disable-librelogo],\n        [Do not build LibreLogo.]),\n,enable_librelogo=yes)\n\nAC_ARG_ENABLE(wasm-strip,\n    AS_HELP_STRING([--enable-wasm-strip],\n        [Strip the static build like for WASM/emscripten platform.]),\n,)\n\nAC_ARG_WITH(main-module,\n    AS_HELP_STRING([--with-main-module=<writer/calc>],\n        [Specify which main module to build for wasm.\n        Default value is 'writer'.]),\n,)\n\nif test \"$_os\" = Emscripten; then\n    AC_ARG_ENABLE(emscripten-jspi,\n        AS_HELP_STRING([--enable-emscripten-jspi],\n            [Experimentally enable use of the Emscripten -sJSPI feature.]))\nelse\n    enable_emscripten_jspi=\nfi\n\nif test \"$_os\" = Emscripten; then\n    AC_ARG_ENABLE(emscripten-proxy-to-pthread,\n        AS_HELP_STRING([--disable-emscripten-proxy-to-pthread],\n            [Experimentally disable use of the Emscripten -sPROXY_TO_PTHREAD feature.]),,\n        enable_emscripten_proxy_to_pthread=yes)\nelse\n    enable_emscripten_proxy_to_pthread=\nfi\n\nif test \"$_os\" = Emscripten; then\n    AC_ARG_ENABLE(emscripten-proxy-posix-sockets,\n        AS_HELP_STRING([--enable-emscripten-proxy-posix-sockets],\n            [Enable experimental Emscripten support for full POSIX sockets over WebSocket proxy\n             server (-sPROXY_POSIX_SOCKETS).]))\nelse\n    enable_emscripten_proxy_posix_sockets=\nfi\n\nAC_ARG_ENABLE(xmlhelp,\n    AS_HELP_STRING([--disable-xmlhelp],\n        [Disable XML help support]),\n,enable_xmlhelp=yes)\n\nAC_ARG_ENABLE(customtarget-components,\n    AS_HELP_STRING([--enable-customtarget-components],\n        [Generates the static UNO object constructor mapping from the build.]))\n\nAC_ARG_ENABLE(cli,\n    AS_HELP_STRING([--disable-cli],\n        [Disable the generation of old CLI bindings.]),\n,enable_cli=yes)\n\nAC_ARG_WITH(extra-cc-flags,\n    AS_HELP_STRING([--with-extra-cc-flags=...],\n        [Specify extra flags (like GCC's -fdiagnostics-color=always, which is useful in combination\n         with the GNU Make --output-sync option) to add to the end of the CC variable.]))\n\nAC_ARG_WITH(extra-cxx-flags,\n    AS_HELP_STRING([--with-extra-cxx-flags=...],\n        [Specify extra flags (like GCC's -fdiagnostics-color=always, which is useful in combination\n         with the GNU Make --output-sync option) to add to the end of the CXX variable.]))\n\ndnl ===================================================================\ndnl Optional Packages (--with/without-)\ndnl ===================================================================\n\nAC_ARG_WITH(gcc-home,\n    AS_HELP_STRING([--with-gcc-home],\n        [Specify the location of gcc/g++ manually. This can be used in conjunction\n         with --enable-icecream when icecream gcc/g++ wrappers are installed in a\n         non-default path.]),\n,)\n\nAC_ARG_WITH(gnu-patch,\n    AS_HELP_STRING([--with-gnu-patch],\n        [Specify location of GNU patch on Solaris or FreeBSD.]),\n,)\n\nAC_ARG_WITH(build-platform-configure-options,\n    AS_HELP_STRING([--with-build-platform-configure-options],\n        [Specify options for the configure script run for the *build* platform in a cross-compilation]),\n,)\n\nAC_ARG_WITH(gnu-cp,\n    AS_HELP_STRING([--with-gnu-cp],\n        [Specify location of GNU cp on Solaris or FreeBSD.]),\n,)\n\nAC_ARG_WITH(external-tar,\n    AS_HELP_STRING([--with-external-tar=<TARFILE_PATH>],\n        [Specify an absolute path of where to find (and store) tarfiles.]),\n    TARFILE_LOCATION=$withval ,\n)\n\nAC_ARG_WITH(referenced-git,\n    AS_HELP_STRING([--with-referenced-git=<OTHER_CHECKOUT_DIR>],\n        [Specify another checkout directory to reference. This makes use of\n                 git submodule update --reference, and saves a lot of diskspace\n                 when having multiple trees side-by-side.]),\n    GIT_REFERENCE_SRC=$withval ,\n)\n\nAC_ARG_WITH(linked-git,\n    AS_HELP_STRING([--with-linked-git=<submodules repo basedir>],\n        [Specify a directory where the repositories of submodules are located.\n         This uses a method similar to git-new-workdir to get submodules.]),\n    GIT_LINK_SRC=$withval ,\n)\n\nAC_ARG_WITH(galleries,\n    AS_HELP_STRING([--with-galleries],\n        [Specify how galleries should be built. It is possible either to\n         build these internally from source (\"build\"),\n         or to disable them (\"no\")]),\n)\n\nAC_ARG_WITH(templates,\n    AS_HELP_STRING([--with-templates],\n        [Specify we build with or without template files. It is possible either to\n         build with templates (\"yes\"),\n         or to disable them (\"no\")]),\n)\n\nAC_ARG_WITH(theme,\n    AS_HELP_STRING([--with-theme=\"theme1 theme2...\"],\n        [Choose which themes to include. By default those themes with an '*' are included.\n         Possible choices: *breeze, *breeze_dark, *breeze_dark_svg, *breeze_svg,\n         *colibre, *colibre_svg, *colibre_dark, *colibre_dark_svg,\n         *elementary, *elementary_svg,\n         *karasa_jaga, *karasa_jaga_svg,\n         *sifr, *sifr_dark, *sifr_dark_svg, *sifr_svg,\n         *sukapura, *sukapura_dark, *sukapura_dark_svg, *sukapura_svg.]),\n,)\n\nlibo_FUZZ_ARG_WITH(helppack-integration,\n    AS_HELP_STRING([--without-helppack-integration],\n        [It will not integrate the helppacks to the installer\n         of the product. Please use this switch to use the online help\n         or separate help packages.]),\n,)\n\nlibo_FUZZ_ARG_WITH(fonts,\n    AS_HELP_STRING([--without-fonts],\n        [LibreOffice includes some third-party fonts to provide a reliable basis for\n         help content, templates, samples, etc. When these fonts are already\n         known to be available on the system then you should use this option.]),\n,)\n\nlibo_FUZZ_ARG_WITH(docrepair-fonts,\n    AS_HELP_STRING([--with-docrepair-fonts],\n        [LibreOffice optionally includes fonts from 'The DocRepair Project' that\n         provide metrically equivalent fallback fonts for a variety of common fonts\n         seen in Office Open XML documents. See https://github.com/docrepair-fonts\n         for more details. This option has no effect when --without-fonts is used.]),\n,)\n\nAC_ARG_WITH(epm,\n    AS_HELP_STRING([--with-epm],\n        [Decides which epm to use. Default is to use the one from the system if\n         one is built. When either this is not there or you say =internal epm\n         will be built.]),\n,)\n\nAC_ARG_WITH(package-format,\n    AS_HELP_STRING([--with-package-format],\n        [Specify package format(s) for LibreOffice installation sets. The\n         implicit --without-package-format leads to no installation sets being\n         generated. Possible values: archive, bsd, deb, dmg, emscripten,\n         installed, msi, pkg, and rpm.\n         Example: --with-package-format='deb rpm']),\n,)\n\nAC_ARG_WITH(tls,\n    AS_HELP_STRING([--with-tls],\n        [Decides which TLS/SSL and cryptographic implementations to use for\n         LibreOffice's code. Default is to use NSS although OpenSSL is also\n         possible. Notice that selecting NSS restricts the usage of OpenSSL\n         in LO's code but selecting OpenSSL doesn't restrict by now the\n         usage of NSS in LO's code. Possible values: openssl, nss.\n         Example: --with-tls=\"nss\"]),\n,)\n\nAC_ARG_WITH(system-libs,\n    AS_HELP_STRING([--with-system-libs],\n        [Use libraries already on system -- enables all --with-system-* flags.]),\n,)\n\nAC_ARG_WITH(system-bzip2,\n    AS_HELP_STRING([--with-system-bzip2],\n        [Use bzip2 already on system. Used when --enable-online-update-mar\n        or --enable-python=internal]),,\n    [with_system_bzip2=\"$with_system_libs\"])\n\nAC_ARG_WITH(system-headers,\n    AS_HELP_STRING([--with-system-headers],\n        [Use headers already on system -- enables all --with-system-* flags for\n         external packages whose headers are the only entities used i.e.\n         boost/odbc/sane-header(s).]),,\n    [with_system_headers=\"$with_system_libs\"])\n\nAC_ARG_WITH(system-jars,\n    AS_HELP_STRING([--without-system-jars],\n        [When building with --with-system-libs, also the needed jars are expected\n         on the system. Use this to disable that]),,\n    [with_system_jars=\"$with_system_libs\"])\n\nAC_ARG_WITH(system-cairo,\n    AS_HELP_STRING([--with-system-cairo],\n        [Use cairo libraries already on system.  Happens automatically for\n         (implicit) --enable-gtk3.]))\n\nAC_ARG_WITH(system-epoxy,\n    AS_HELP_STRING([--with-system-epoxy],\n        [Use epoxy libraries already on system.  Happens automatically for\n         (implicit) --enable-gtk3.]),,\n       [with_system_epoxy=\"$with_system_libs\"])\n\nAC_ARG_WITH(myspell-dicts,\n    AS_HELP_STRING([--with-myspell-dicts],\n        [Adds myspell dictionaries to the LibreOffice installation set]),\n,)\n\nAC_ARG_WITH(system-dicts,\n    AS_HELP_STRING([--without-system-dicts],\n        [Do not use dictionaries from system paths.]),\n,)\n\nAC_ARG_WITH(external-dict-dir,\n    AS_HELP_STRING([--with-external-dict-dir],\n        [Specify external dictionary dir.]),\n,)\n\nAC_ARG_WITH(external-hyph-dir,\n    AS_HELP_STRING([--with-external-hyph-dir],\n        [Specify external hyphenation pattern dir.]),\n,)\n\nAC_ARG_WITH(external-thes-dir,\n    AS_HELP_STRING([--with-external-thes-dir],\n        [Specify external thesaurus dir.]),\n,)\n\nAC_ARG_WITH(system-zlib,\n    AS_HELP_STRING([--with-system-zlib],\n        [Use zlib already on system.]),,\n    [with_system_zlib=auto])\n\nAC_ARG_WITH(system-jpeg,\n    AS_HELP_STRING([--with-system-jpeg],\n        [Use jpeg already on system.]),,\n    [with_system_jpeg=\"$with_system_libs\"])\n\nAC_ARG_WITH(system-expat,\n    AS_HELP_STRING([--with-system-expat],\n        [Use expat already on system.]),,\n    [with_system_expat=\"$with_system_libs\"])\n\nAC_ARG_WITH(system-libxml,\n    AS_HELP_STRING([--with-system-libxml],\n        [Use libxml/libxslt already on system.]),,\n    [with_system_libxml=auto])\n\nAC_ARG_WITH(system-openldap,\n    AS_HELP_STRING([--with-system-openldap],\n        [Use the OpenLDAP LDAP SDK already on system.]),,\n    [with_system_openldap=\"$with_system_libs\"])\n\nlibo_FUZZ_ARG_ENABLE(poppler,\n    AS_HELP_STRING([--disable-poppler],\n        [Disable building Poppler.])\n)\n\nAC_ARG_WITH(system-poppler,\n    AS_HELP_STRING([--with-system-poppler],\n        [Use system poppler (only needed for PDF import).]),,\n    [with_system_poppler=\"$with_system_libs\"])\n\nAC_ARG_WITH(system-abseil,\n    AS_HELP_STRING([--with-system-abseil],\n        [Use the abseil libraries already on system.]),,\n    [with_system_abseil=\"$with_system_libs\"])\n\nAC_ARG_WITH(system-openjpeg,\n    AS_HELP_STRING([--with-system-openjpeg],\n        [Use the OpenJPEG library already on system.]),,\n    [with_system_openjpeg=\"$with_system_libs\"])\n\nlibo_FUZZ_ARG_ENABLE(gpgmepp,\n    AS_HELP_STRING([--disable-gpgmepp],\n        [Disable building gpgmepp. Do not use in normal cases unless you want to fix potential problems it causes.])\n)\n\nAC_ARG_WITH(system-gpgmepp,\n    AS_HELP_STRING([--with-system-gpgmepp],\n        [Use gpgmepp already on system]),,\n    [with_system_gpgmepp=\"$with_system_libs\"])\n\nAC_ARG_WITH(system-mariadb,\n    AS_HELP_STRING([--with-system-mariadb],\n        [Use MariaDB/MySQL libraries already on system.]),,\n    [with_system_mariadb=\"$with_system_libs\"])\n\nAC_ARG_ENABLE(bundle-mariadb,\n    AS_HELP_STRING([--enable-bundle-mariadb],\n        [When using MariaDB/MySQL libraries already on system, bundle them with the MariaDB Connector/LibreOffice.])\n)\n\nAC_ARG_WITH(system-postgresql,\n    AS_HELP_STRING([--with-system-postgresql],\n        [Use PostgreSQL libraries already on system, for building the PostgreSQL-SDBC\n         driver. If pg_config is not in PATH, use PGCONFIG to point to it.]),,\n    [with_system_postgresql=\"$with_system_libs\"])\n\nAC_ARG_WITH(libpq-path,\n    AS_HELP_STRING([--with-libpq-path=<absolute path to your libpq installation>],\n        [Use this PostgreSQL C interface (libpq) installation for building\n         the PostgreSQL-SDBC extension.]),\n,)\n\nAC_ARG_WITH(system-firebird,\n    AS_HELP_STRING([--with-system-firebird],\n        [Use Firebird libraries already on system, for building the Firebird-SDBC\n         driver. If fb_config is not in PATH, use FBCONFIG to point to it.]),,\n    [with_system_firebird=\"$with_system_libs\"])\n\nAC_ARG_WITH(system-libtommath,\n            AS_HELP_STRING([--with-system-libtommath],\n                           [Use libtommath already on system]),,\n            [with_system_libtommath=\"$with_system_libs\"])\n\nAC_ARG_WITH(system-hsqldb,\n    AS_HELP_STRING([--with-system-hsqldb],\n        [Use hsqldb already on system.]))\n\nAC_ARG_WITH(hsqldb-jar,\n    AS_HELP_STRING([--with-hsqldb-jar=JARFILE],\n        [Specify path to jarfile manually.]),\n    HSQLDB_JAR=$withval)\n\nlibo_FUZZ_ARG_ENABLE(scripting-beanshell,\n    AS_HELP_STRING([--disable-scripting-beanshell],\n        [Disable support for scripts in BeanShell.]),\n,\n)\n\nAC_ARG_WITH(system-beanshell,\n    AS_HELP_STRING([--with-system-beanshell],\n        [Use beanshell already on system.]),,\n    [with_system_beanshell=\"$with_system_jars\"])\n\nAC_ARG_WITH(beanshell-jar,\n    AS_HELP_STRING([--with-beanshell-jar=JARFILE],\n        [Specify path to jarfile manually.]),\n    BSH_JAR=$withval)\n\nlibo_FUZZ_ARG_ENABLE(scripting-javascript,\n    AS_HELP_STRING([--disable-scripting-javascript],\n        [Disable support for scripts in JavaScript.]),\n,\n)\n\nAC_ARG_WITH(system-rhino,\n    AS_HELP_STRING([--with-system-rhino],\n        [Use rhino already on system.]),,\n    [with_system_rhino=\"$with_system_jars\"])\n\nAC_ARG_WITH(rhino-jar,\n    AS_HELP_STRING([--with-rhino-jar=JARFILE],\n        [Specify path to jarfile manually.]),\n    RHINO_JAR=$withval)\n\nAC_ARG_WITH(system-jfreereport,\n    AS_HELP_STRING([--with-system-jfreereport],\n        [Use JFreeReport already on system.]),,\n    [with_system_jfreereport=\"$with_system_jars\"])\n\nAC_ARG_WITH(sac-jar,\n    AS_HELP_STRING([--with-sac-jar=JARFILE],\n        [Specify path to jarfile manually.]),\n    SAC_JAR=$withval)\n\nAC_ARG_WITH(libxml-jar,\n    AS_HELP_STRING([--with-libxml-jar=JARFILE],\n        [Specify path to jarfile manually.]),\n    LIBXML_JAR=$withval)\n\nAC_ARG_WITH(flute-jar,\n    AS_HELP_STRING([--with-flute-jar=JARFILE],\n        [Specify path to jarfile manually.]),\n    FLUTE_JAR=$withval)\n\nAC_ARG_WITH(jfreereport-jar,\n    AS_HELP_STRING([--with-jfreereport-jar=JARFILE],\n        [Specify path to jarfile manually.]),\n    JFREEREPORT_JAR=$withval)\n\nAC_ARG_WITH(liblayout-jar,\n    AS_HELP_STRING([--with-liblayout-jar=JARFILE],\n        [Specify path to jarfile manually.]),\n    LIBLAYOUT_JAR=$withval)\n\nAC_ARG_WITH(libloader-jar,\n    AS_HELP_STRING([--with-libloader-jar=JARFILE],\n        [Specify path to jarfile manually.]),\n    LIBLOADER_JAR=$withval)\n\nAC_ARG_WITH(libformula-jar,\n    AS_HELP_STRING([--with-libformula-jar=JARFILE],\n        [Specify path to jarfile manually.]),\n    LIBFORMULA_JAR=$withval)\n\nAC_ARG_WITH(librepository-jar,\n    AS_HELP_STRING([--with-librepository-jar=JARFILE],\n        [Specify path to jarfile manually.]),\n    LIBREPOSITORY_JAR=$withval)\n\nAC_ARG_WITH(libfonts-jar,\n    AS_HELP_STRING([--with-libfonts-jar=JARFILE],\n        [Specify path to jarfile manually.]),\n    LIBFONTS_JAR=$withval)\n\nAC_ARG_WITH(libserializer-jar,\n    AS_HELP_STRING([--with-libserializer-jar=JARFILE],\n        [Specify path to jarfile manually.]),\n    LIBSERIALIZER_JAR=$withval)\n\nAC_ARG_WITH(libbase-jar,\n    AS_HELP_STRING([--with-libbase-jar=JARFILE],\n        [Specify path to jarfile manually.]),\n    LIBBASE_JAR=$withval)\n\nAC_ARG_WITH(system-odbc,\n    AS_HELP_STRING([--with-system-odbc],\n        [Use the odbc headers already on system.]),,\n    [with_system_odbc=\"auto\"])\n\nAC_ARG_WITH(system-sane,\n    AS_HELP_STRING([--with-system-sane],\n        [Use sane.h already on system.]),,\n    [with_system_sane=\"$with_system_headers\"])\n\nAC_ARG_WITH(system-bluez,\n    AS_HELP_STRING([--with-system-bluez],\n        [Use bluetooth.h already on system.]),,\n    [with_system_bluez=\"$with_system_headers\"])\n\nAC_ARG_WITH(system-boost,\n    AS_HELP_STRING([--with-system-boost],\n        [Use boost already on system.]),,\n    [with_system_boost=\"$with_system_headers\"])\n\nAC_ARG_WITH(system-dragonbox,\n    AS_HELP_STRING([--with-system-dragonbox],\n        [Use dragonbox already on system.]),,\n    [with_system_dragonbox=\"$with_system_headers\"])\n\nAC_ARG_WITH(system-frozen,\n    AS_HELP_STRING([--with-system-frozen],\n        [Use frozen already on system.]),,\n    [with_system_frozen=\"$with_system_headers\"])\n\nAC_ARG_WITH(system-libfixmath,\n    AS_HELP_STRING([--with-system-libfixmath],\n        [Use libfixmath already on system.]),,\n    [with_system_libfixmath=\"$with_system_libs\"])\n\nAC_ARG_WITH(system-glm,\n    AS_HELP_STRING([--with-system-glm],\n        [Use glm already on system.]),,\n    [with_system_glm=\"$with_system_headers\"])\n\nAC_ARG_WITH(system-hunspell,\n    AS_HELP_STRING([--with-system-hunspell],\n        [Use libhunspell already on system.]),,\n    [with_system_hunspell=\"$with_system_libs\"])\n\nlibo_FUZZ_ARG_ENABLE(cairo-rgba,\n    AS_HELP_STRING([--enable-cairo-rgba],\n        [Use RGBA order, instead of default BRGA. Not possible with --with-system-cairo]))\n\nlibo_FUZZ_ARG_ENABLE(zxing,\n    AS_HELP_STRING([--disable-zxing],\n       [Disable use of zxing external library.]))\n\nAC_ARG_WITH(system-zxing,\n    AS_HELP_STRING([--with-system-zxing],\n        [Use libzxing already on system.]),,\n    [with_system_zxing=\"$with_system_libs\"])\n\nAC_ARG_WITH(system-zxcvbn,\n    AS_HELP_STRING([--with-system-zxcvbn],\n        [Use libzxcvbn already on system.]),,\n    [with_system_zxcvbn=\"$with_system_libs\"])\n\nAC_ARG_WITH(system-box2d,\n    AS_HELP_STRING([--with-system-box2d],\n        [Use box2d already on system.]),,\n    [with_system_box2d=\"$with_system_libs\"])\n\nAC_ARG_WITH(system-mythes,\n    AS_HELP_STRING([--with-system-mythes],\n        [Use mythes already on system.]),,\n    [with_system_mythes=\"$with_system_libs\"])\n\nAC_ARG_WITH(system-altlinuxhyph,\n    AS_HELP_STRING([--with-system-altlinuxhyph],\n        [Use ALTLinuxhyph already on system.]),,\n    [with_system_altlinuxhyph=\"$with_system_libs\"])\n\nAC_ARG_WITH(system-lpsolve,\n    AS_HELP_STRING([--with-system-lpsolve],\n        [Use lpsolve already on system.]),,\n    [with_system_lpsolve=\"$with_system_libs\"])\n\nAC_ARG_WITH(system-coinmp,\n    AS_HELP_STRING([--with-system-coinmp],\n        [Use CoinMP already on system.]),,\n    [with_system_coinmp=\"$with_system_libs\"])\n\nAC_ARG_WITH(system-liblangtag,\n    AS_HELP_STRING([--with-system-liblangtag],\n        [Use liblangtag library already on system.]),,\n    [with_system_liblangtag=\"$with_system_libs\"])\n\nAC_ARG_WITH(system-lockfile,\n    AS_HELP_STRING([--with-system-lockfile[=file]],\n        [Detect a system lockfile program or use the \\$file argument.]))\n\nAC_ARG_WITH(webdav,\n    AS_HELP_STRING([--without-webdav],\n        [Disable WebDAV support in the UCB.]))\n\nAC_ARG_WITH(linker-hash-style,\n    AS_HELP_STRING([--with-linker-hash-style],\n        [Use linker with --hash-style=<style> when linking shared objects.\n         Possible values: \"sysv\", \"gnu\", \"both\". The default value is \"gnu\"\n         if supported on the build system, and \"sysv\" otherwise.]))\n\nAC_ARG_WITH(jdk-home,\n    AS_HELP_STRING([--with-jdk-home=<absolute path to JDK home>],\n        [If you have installed JDK 8 or later on your system please supply the\n         path here. Note that this is not the location of the java command but the\n         location of the entire distribution. In case of cross-compiling, this\n         is the JDK of the host os. Use --with-build-platform-configure-options\n         to point to a different build platform JDK.]),\n,)\n\nAC_ARG_WITH(help,\n    AS_HELP_STRING([--with-help],\n        [Enable the build of help. There is a special parameter \"common\" that\n         can be used to bundle only the common part, .e.g help-specific icons.\n         This is useful when you build the helpcontent separately.])\n    [\n                          Usage:     --with-help    build the old local help\n                                 --without-help     no local help (default)\n                                 --with-help=html   build the new HTML local help\n                                 --with-help=online build the new HTML online help\n    ],\n,)\n\nAC_ARG_WITH(omindex,\n   AS_HELP_STRING([--with-omindex],\n        [Enable the support of xapian-omega index for online help.])\n   [\n                         Usage: --with-omindex=server prepare the pages for omindex\n                                but let xapian-omega be built in server.\n                                --with-omindex=noxap do not prepare online pages\n                                for xapian-omega\n  ],\n,)\n\nlibo_FUZZ_ARG_WITH(java,\n    AS_HELP_STRING([--with-java=<java command>],\n        [Specify the name of the Java interpreter command. Typically \"java\"\n         which is the default.\n\n         To build without support for Java components, applets, accessibility\n         or the XML filters written in Java, use --without-java or --with-java=no.]),\n    [ test -z \"$with_java\" -o \"$with_java\" = \"yes\" && with_java=java ],\n    [ test -z \"$with_java\" -o \"$with_java\" = \"yes\" && with_java=java ]\n)\n\nAC_ARG_WITH(jvm-path,\n    AS_HELP_STRING([--with-jvm-path=<absolute path to parent of jvm home>],\n        [Use a specific JVM search path at runtime.\n         e.g. use --with-jvm-path=/usr/lib/ to find JRE/JDK in /usr/lib/jvm/]),\n,)\n\nAC_ARG_WITH(ant-home,\n    AS_HELP_STRING([--with-ant-home=<absolute path to Ant home>],\n        [If you have installed Apache Ant on your system, please supply the path here.\n         Note that this is not the location of the Ant binary but the location\n         of the entire distribution.]),\n,)\n\nAC_ARG_WITH(symbol-config,\n    AS_HELP_STRING([--with-symbol-config],\n        [Configuration for the crashreport symbol upload]),\n        [],\n        [with_symbol_config=no])\n\nAC_ARG_WITH(export-validation,\n    AS_HELP_STRING([--without-export-validation],\n        [Disable validating OOXML and ODF files as exported from in-tree tests.]),\n,with_export_validation=auto)\n\nAC_ARG_WITH(bffvalidator,\n    AS_HELP_STRING([--with-bffvalidator=<absolute path to BFFValidator>],\n        [Enables export validation for Microsoft Binary formats (doc, xls, ppt).\n         Requires installed Microsoft Office Binary File Format Validator.\n         Note: export-validation (--with-export-validation) is required to be turned on.\n         See https://web.archive.org/web/20200804155745/https://www.microsoft.com/en-us/download/details.aspx?id=26794]),\n,with_bffvalidator=no)\n\nlibo_FUZZ_ARG_WITH(junit,\n    AS_HELP_STRING([--with-junit=<absolute path to JUnit 4 jar>],\n        [Specifies the JUnit 4 jar file to use for JUnit-based tests.\n         --without-junit disables those tests. Not relevant in the --without-java case.]),\n,with_junit=yes)\n\nAC_ARG_WITH(hamcrest,\n    AS_HELP_STRING([--with-hamcrest=<absolute path to hamcrest jar>],\n        [Specifies the hamcrest jar file to use for JUnit-based tests.\n         --without-junit disables those tests. Not relevant in the --without-java case.]),\n,with_hamcrest=yes)\n\nAC_ARG_WITH(perl-home,\n    AS_HELP_STRING([--with-perl-home=<abs. path to Perl 5 home>],\n        [If you have installed Perl 5 Distribution, on your system, please\n         supply the path here. Note that this is not the location of the Perl\n         binary but the location of the entire distribution.]),\n,)\n\nlibo_FUZZ_ARG_WITH(doxygen,\n    AS_HELP_STRING(\n        [--with-doxygen=<absolute path to doxygen executable>],\n        [Only relevant when --enable-odk is set. Specifies the doxygen\n         executable to use when generating ODK C/C++ documentation.\n         --without-doxygen disables generation of ODK C/C++ documentation.]),\n,with_doxygen=yes)\n\nAC_ARG_WITH(visual-studio,\n    AS_HELP_STRING([--with-visual-studio=<2019/2022/2022preview>],\n        [Specify which Visual Studio version to use in case several are\n         installed. Currently 2019 (default) and 2022 are supported.]),\n,)\n\nAC_ARG_WITH(windows-sdk,\n    AS_HELP_STRING([--with-windows-sdk=<8.0(A)/8.1(A)/10.0>],\n        [Specify which Windows SDK, or \"Windows Kit\", version to use\n         in case the one that came with the selected Visual Studio\n         is not what you want for some reason. Note that not all compiler/SDK\n         combinations are supported. The intent is that this option should not\n         be needed.]),\n,)\n\nAC_ARG_WITH(lang,\n    AS_HELP_STRING([--with-lang=\"es sw tu cs sk\"],\n        [Use this option to build LibreOffice with additional UI language support.\n         English (US) is always included by default.\n         Separate multiple languages with space.\n         For all languages, use --with-lang=ALL.]),\n,)\n\nAC_ARG_WITH(locales,\n    AS_HELP_STRING([--with-locales=\"en es pt fr zh kr ja\"],\n        [Use this option to limit the locale information built in.\n         Separate multiple locales with space.\n         Very experimental and might well break stuff.\n         Just a desperate measure to shrink code and data size.\n         By default all the locales available is included.\n         Just works with --disable-dynloading. Defaults to \"ALL\".\n         This option is completely unrelated to --with-lang.])\n    [\n                          Affects also our character encoding conversion\n                          tables for encodings mainly targeted for a\n                          particular locale, like EUC-CN and EUC-TW for\n                          zh, ISO-2022-JP for ja.\n\n                          Affects also our add-on break iterator data for\n                          some languages.\n\n                          For the default, all locales, don't use this switch at all.\n                          Specifying just the language part of a locale means all matching\n                          locales will be included.\n    ],\n,)\n\n# Kerberos and GSSAPI used only by PostgreSQL as of LibO 3.5\n# and also by Mariadb/Mysql and libcurl since LibO 24.8\nlibo_FUZZ_ARG_WITH(krb5,\n    AS_HELP_STRING([--with-krb5],\n        [Enable MIT Kerberos 5 support in modules that support it.\n         By default automatically enabled on platforms\n         where a good system Kerberos 5 is available.]),\n,)\n\nlibo_FUZZ_ARG_WITH(gssapi,\n    AS_HELP_STRING([--with-gssapi],\n        [Enable GSSAPI support in modules that support it.\n         By default automatically enabled on platforms\n         where a good system GSSAPI is available.]),\n,)\n\nlibo_FUZZ_ARG_WITH(lxml,\n    AS_HELP_STRING([--without-lxml],\n        [gla11y will use python lxml when available, potentially building a local copy if necessary.\n         --without-lxml tells it to not use python lxml at all, which means that gla11y will only\n         report widget classes and ids.]),\n,)\n\nlibo_FUZZ_ARG_WITH(latest-c++,\n    AS_HELP_STRING([--with-latest-c++],\n        [Try to enable the latest features of the C++ compiler, even if they are not yet part of a\n         published standard.  This option is ignored when CXXFLAGS_CXX11 is set explicitly.]),,\n        [with_latest_c__=no])\n\nAC_ARG_WITH(gtk3-build,\n    AS_HELP_STRING([--with-gtk3-build=<absolute path to GTK3 build>],\n        [(Windows-only) In order to build GtkTiledViewer on Windows, pass the path\n         to a GTK3 build, like '--with-gtk3-build=C:/gtk-build/gtk/x64/release'.]))\n\nAC_ARG_WITH(keep-awake,\n    AS_HELP_STRING([--with-keep-awake],\n        [command to prefix make with in order to prevent the system from going to sleep/suspend\n         while building.\n         If no command is specified, defaults to using Awake (from Microsoft PowerToys) on Windows\n         and caffeinate on macOS]))\n\nAC_ARG_WITH(dotnet,\n    AS_HELP_STRING([--with-dotnet=<absolute path to dotnet executable>],\n        [Specify the dotnet executable used to build .NET bindings and components.\n         Requires .NET SDK 8 or higher. To disable building .NET components, use\n         --without-dotnet or --with-dotnet=no.]))\n\ndnl ===================================================================\ndnl Branding\ndnl ===================================================================\n\nAC_ARG_WITH(branding,\n    AS_HELP_STRING([--with-branding=/path/to/images],\n        [Use given path to retrieve branding images set.])\n    [\n                          Search for intro.png about.svg and logo.svg.\n                          If any is missing, default ones will be used instead.\n\n                          Search also progress.conf for progress\n                          settings on intro screen :\n\n                          PROGRESSBARCOLOR=\"255,255,255\" Set color of\n                          progress bar. Comma separated RGB decimal values.\n                          PROGRESSSIZE=\"407,6\" Set size of progress bar.\n                          Comma separated decimal values (width, height).\n                          PROGRESSPOSITION=\"61,317\" Set position of progress\n                          bar from left,top. Comma separated decimal values.\n                          PROGRESSFRAMECOLOR=\"20,136,3\" Set color of progress\n                          bar frame. Comma separated RGB decimal values.\n                          PROGRESSTEXTCOLOR=\"0,0,0\" Set color of progress\n                          bar text. Comma separated RGB decimal values.\n                          PROGRESSTEXTBASELINE=\"287\" Set vertical position of\n                          progress bar text from top. Decimal value.\n\n                          Default values will be used if not found.\n    ],\n,)\n\n\nAC_ARG_WITH(extra-buildid,\n    AS_HELP_STRING([--with-extra-buildid=\"Tinderbox: Win-x86@6, Branch:master, Date:2012-11-26_00.29.34\"],\n        [Show addition build identification in about dialog.]),\n,)\n\n\nAC_ARG_WITH(vendor,\n    AS_HELP_STRING([--with-vendor=\"John the Builder\"],\n        [Set vendor of the build.]),\n,)\n\nAC_ARG_WITH(privacy-policy-url,\n    AS_HELP_STRING([--with-privacy-policy-url=\"https://yourdomain/privacy-policy\"],\n        [The URL to your privacy policy (needed when\n         enabling online-update or crashreporting via breakpad)]),\n        [if test \"x$with_privacy_policy_url\" = \"xyes\"; then\n            AC_MSG_FAILURE([you need to specify an argument when using --with-privacy-policy-url])\n         elif test \"x$with_privacy_policy_url\" = \"xno\"; then\n            with_privacy_policy_url=\"undefined\"\n         fi]\n,[with_privacy_policy_url=\"undefined\"])\n\nAC_ARG_WITH(android-package-name,\n    AS_HELP_STRING([--with-android-package-name=\"org.libreoffice\"],\n        [Set Android package name of the build.]),\n,)\n\nAC_ARG_WITH(compat-oowrappers,\n    AS_HELP_STRING([--with-compat-oowrappers],\n        [Install oo* wrappers in parallel with\n         lo* ones to keep backward compatibility.\n         Has effect only with make distro-pack-install]),\n,)\n\nAC_ARG_WITH(os-version,\n    AS_HELP_STRING([--with-os-version=<OSVERSION>],\n        [For FreeBSD users, use this option to override the detected OSVERSION.]),\n,)\n\nAC_ARG_WITH(parallelism,\n    AS_HELP_STRING([--with-parallelism],\n        [Number of jobs to run simultaneously during build. Parallel builds can\n        save a lot of time on multi-cpu machines. Defaults to the number of\n        CPUs on the machine, unless you configure --enable-icecream - then to\n        40.]),\n,)\n\nAC_ARG_WITH(all-tarballs,\n    AS_HELP_STRING([--with-all-tarballs],\n        [Download all external tarballs unconditionally]))\n\nAC_ARG_WITH(gdrive-client-id,\n    AS_HELP_STRING([--with-gdrive-client-id],\n        [Provides the client id of the application for OAuth2 authentication\n        on Google Drive. If either this or --with-gdrive-client-secret is\n        empty, the feature will be disabled]),\n)\n\nAC_ARG_WITH(gdrive-client-secret,\n    AS_HELP_STRING([--with-gdrive-client-secret],\n        [Provides the client secret of the application for OAuth2\n        authentication on Google Drive. If either this or\n        --with-gdrive-client-id is empty, the feature will be disabled]),\n)\n\nAC_ARG_WITH(alfresco-cloud-client-id,\n    AS_HELP_STRING([--with-alfresco-cloud-client-id],\n        [Provides the client id of the application for OAuth2 authentication\n        on Alfresco Cloud. If either this or --with-alfresco-cloud-client-secret is\n        empty, the feature will be disabled]),\n)\n\nAC_ARG_WITH(alfresco-cloud-client-secret,\n    AS_HELP_STRING([--with-alfresco-cloud-client-secret],\n        [Provides the client secret of the application for OAuth2\n        authentication on Alfresco Cloud. If either this or\n        --with-alfresco-cloud-client-id is empty, the feature will be disabled]),\n)\n\nAC_ARG_WITH(onedrive-client-id,\n    AS_HELP_STRING([--with-onedrive-client-id],\n        [Provides the client id of the application for OAuth2 authentication\n        on OneDrive. If either this or --with-onedrive-client-secret is\n        empty, the feature will be disabled]),\n)\n\nAC_ARG_WITH(onedrive-client-secret,\n    AS_HELP_STRING([--with-onedrive-client-secret],\n        [Provides the client secret of the application for OAuth2\n        authentication on OneDrive. If either this or\n        --with-onedrive-client-id is empty, the feature will be disabled]),\n)\n\ndnl Check for coredumpctl support to present information about crashing test processes:\nAC_ARG_WITH(coredumpctl,\n    AS_HELP_STRING([--with-coredumpctl],\n        [Use coredumpctl (together with systemd-run) to retrieve core dumps of crashing test\n        processes.]))\n\nAC_ARG_WITH(buildconfig-recorded,\n    AS_HELP_STRING([--with-buildconfig-recorded],\n        [Put build config into version info reported by LOK. Incompatible with reproducible builds.]),\n)\n\nAC_MSG_CHECKING([whether to record build config])\nif test -z \"$with_buildconfig_recorded\"; then\n    with_buildconfig_recorded=no\nfi\nif test \"$with_buildconfig_recorded\" = no; then\n    AC_MSG_RESULT([no])\nelse\n    AC_MSG_RESULT([yes])\n    # replace backslashes, to get a valid c++ string\n    config_args=$(echo $ac_configure_args | tr '\\\\' '/')\n    AC_DEFINE_UNQUOTED([BUILDCONFIG],[[\"$config_args\"]],[Options passed to configure script])\n    AC_DEFINE([BUILDCONFIG_RECORDED],[1],[Options passed to configure script])\nfi\n\ndnl ===================================================================\ndnl Do we want to use pre-build binary tarball for recompile\ndnl ===================================================================\n\nif test \"$enable_library_bin_tar\" = \"yes\" ; then\n    USE_LIBRARY_BIN_TAR=TRUE\nelse\n    USE_LIBRARY_BIN_TAR=\nfi\nAC_SUBST(USE_LIBRARY_BIN_TAR)\n\ndnl ===================================================================\ndnl Test whether build target is Release Build\ndnl ===================================================================\nAC_MSG_CHECKING([whether build target is Release Build])\nif test \"$enable_release_build\" = \"\" -o \"$enable_release_build\" = \"no\"; then\n    AC_MSG_RESULT([no])\n    ENABLE_RELEASE_BUILD=\n    dnl Pu the value on one line as make (at least on macOS) seems to ignore\n    dnl the newlines and then complains about spaces.\n    GET_TASK_ALLOW_ENTITLEMENT='<!-- We want to be able to debug a hardened process when not building for release --><key>com.apple.security.get-task-allow</key><true/>'\nelse\n    AC_MSG_RESULT([yes])\n    ENABLE_RELEASE_BUILD=TRUE\n    GET_TASK_ALLOW_ENTITLEMENT=\nfi\nAC_SUBST(ENABLE_RELEASE_BUILD)\nAC_SUBST(GET_TASK_ALLOW_ENTITLEMENT)\n\ndnl ===================================================================\ndnl Test whether build should auto use hardening compiler flags\ndnl ===================================================================\nAC_MSG_CHECKING([whether build should auto use hardening compiler flags])\nif test \"$enable_hardening_flags\" = \"\" -o \"$enable_hardening_flags\" = \"no\"; then\n    AC_MSG_RESULT([no])\n    ENABLE_HARDENING_FLAGS=\nelse\n    AC_MSG_RESULT([yes])\n    ENABLE_HARDENING_FLAGS=TRUE\nfi\nAC_SUBST(ENABLE_HARDENING_FLAGS)\n\nAC_MSG_CHECKING([whether to build a Community flavor])\nif test -z \"$enable_community_flavor\" -o \"$enable_community_flavor\" = \"yes\"; then\n    AC_DEFINE(HAVE_FEATURE_COMMUNITY_FLAVOR)\n    AC_MSG_RESULT([yes])\nelse\n    AC_MSG_RESULT([no])\nfi\n\ndnl ===================================================================\ndnl Test whether to sign Windows Build\ndnl ===================================================================\nAC_MSG_CHECKING([whether to sign windows build])\nif test \"$enable_windows_build_signing\" = \"yes\" -a \"$_os\" = \"WINNT\"; then\n    AC_MSG_RESULT([yes])\n    WINDOWS_BUILD_SIGNING=\"TRUE\"\nelse\n    AC_MSG_RESULT([no])\n    WINDOWS_BUILD_SIGNING=\"FALSE\"\nfi\nAC_SUBST(WINDOWS_BUILD_SIGNING)\n\ndnl ===================================================================\ndnl MacOSX build and runtime environment options\ndnl ===================================================================\n\nAC_ARG_WITH(macosx-version-min-required,\n    AS_HELP_STRING([--with-macosx-version-min-required=<version>],\n        [set the minimum OS version needed to run the built LibreOffice])\n    [\n                          e. g.: --with-macosx-version-min-required=10.15\n    ],\n,)\n\ndnl ===================================================================\ndnl Check for incompatible options set by fuzzing, and reset those\ndnl automatically to working combinations\ndnl ===================================================================\n\nif test \"$libo_fuzzed_enable_dbus\" = yes -a \"$libo_fuzzed_enable_avahi\" -a \\\n        \"$enable_dbus\" != \"$enable_avahi\"; then\n    AC_MSG_NOTICE([Resetting --enable-avahi=$enable_dbus])\n    enable_avahi=$enable_dbus\nfi\n\nadd_lopath_after ()\n{\n    if ! echo \"$LO_PATH\" | $EGREP -q \"(^|${P_SEP})$1($|${P_SEP})\"; then\n        LO_PATH=\"${LO_PATH:+$LO_PATH$P_SEP}$1\"\n    fi\n}\n\nadd_lopath_before ()\n{\n    local IFS=${P_SEP}\n    local path_cleanup\n    local dir\n    for dir in $LO_PATH ; do\n        if test \"$dir\" != \"$1\" ; then\n            path_cleanup=${path_cleanup:+$path_cleanup$P_SEP}$dir\n        fi\n    done\n    LO_PATH=\"$1${path_cleanup:+$P_SEP$path_cleanup}\"\n}\n\ndnl ===================================================================\ndnl check for required programs (grep, awk, sed, bash)\ndnl ===================================================================\n\npathmunge ()\n{\n    local new_path\n    if test -n \"$1\"; then\n        if test \"$build_os\" = \"cygwin\"; then\n            if test \"$GNUMAKE_WIN_NATIVE\" = \"TRUE\" ; then\n                PathFormat \"$1\"\n                new_path=`cygpath -sm \"$formatted_path\"`\n            else\n                PathFormat \"$1\"\n                new_path=`cygpath -u \"$formatted_path\"`\n            fi\n        else\n            new_path=\"$1\"\n        fi\n        if test \"$2\" = \"after\"; then\n            add_lopath_after \"$new_path\"\n        else\n            add_lopath_before \"$new_path\"\n        fi\n    fi\n}\n\nAC_PROG_AWK\nAC_PATH_PROG( AWK, $AWK)\nif test -z \"$AWK\"; then\n    AC_MSG_ERROR([install awk to run this script])\nfi\n\nAC_PATH_PROG(BASH, bash)\nif test -z \"$BASH\"; then\n    AC_MSG_ERROR([bash not found in \\$PATH])\nfi\nAC_SUBST(BASH)\n\n# prefer parallel compression tools, if available\nAC_PATH_PROG(COMPRESSIONTOOL, pigz)\nif test -z \"$COMPRESSIONTOOL\"; then\n    AC_PATH_PROG(COMPRESSIONTOOL, gzip)\n    if test -z \"$COMPRESSIONTOOL\"; then\n        AC_MSG_ERROR([gzip not found in \\$PATH])\n    fi\nfi\nAC_SUBST(COMPRESSIONTOOL)\n\nAC_MSG_CHECKING([for GNU or BSD tar])\nfor a in $GNUTAR gtar gnutar tar bsdtar /usr/sfw/bin/gtar; do\n    $a --version 2> /dev/null | grep -E \"GNU|bsdtar\"  2>&1 > /dev/null\n    if test $? -eq 0;  then\n        GNUTAR=$a\n        break\n    fi\ndone\nAC_MSG_RESULT($GNUTAR)\nif test -z \"$GNUTAR\"; then\n    AC_MSG_ERROR([not found. install GNU or BSD tar.])\nfi\nAC_SUBST(GNUTAR)\n\nAC_MSG_CHECKING([for tar's option to strip components])\n$GNUTAR --help 2> /dev/null | grep -E \"bsdtar|strip-components\" 2>&1 >/dev/null\nif test $? -eq 0; then\n    STRIP_COMPONENTS=\"--strip-components\"\nelse\n    $GNUTAR --help 2> /dev/null | grep -E \"strip-path\" 2>&1 >/dev/null\n    if test $? -eq 0; then\n        STRIP_COMPONENTS=\"--strip-path\"\n    else\n        STRIP_COMPONENTS=\"unsupported\"\n    fi\nfi\nAC_MSG_RESULT($STRIP_COMPONENTS)\nif test x$STRIP_COMPONENTS = xunsupported; then\n    AC_MSG_ERROR([you need a tar that is able to strip components.])\nfi\nAC_SUBST(STRIP_COMPONENTS)\n\ndnl It is useful to have a BUILD_TYPE keyword to distinguish \"normal\"\ndnl desktop OSes from \"mobile\" ones.\n\ndnl We assume that a non-DESKTOP build type is also a non-NATIVE one.\ndnl In other words, that when building for an OS that is not a\ndnl \"desktop\" one but a \"mobile\" one, we are always cross-compiling.\n\ndnl Note the direction of the implication; there is no assumption that\ndnl cross-compiling would imply a non-desktop OS.\n\nif test $_os != iOS -a $_os != Android -a \"$enable_fuzzers\" != \"yes\"; then\n    BUILD_TYPE=\"$BUILD_TYPE DESKTOP\"\n    AC_DEFINE(HAVE_FEATURE_DESKTOP)\n    if test \"$_os\" != Emscripten; then\n        AC_DEFINE(HAVE_FEATURE_MULTIUSER_ENVIRONMENT)\n    fi\nfi\n\n# explicitly doesn't include enable_gtk3=no and enable_qt5=yes, so it should\n# also work with the default gtk3 plugin.\nif test \"$enable_wasm_strip\" = \"yes\"; then\n    enable_avmedia=no\n    enable_libcmis=no\n    enable_coinmp=no\n    enable_cups=no\n    enable_database_connectivity=no\n    enable_dbus=no\n    enable_dconf=no\n    test \"${enable_dynamic_loading+set}\" = set -o \"$_os\" != Emscripten || enable_dynamic_loading=no\n    enable_extension_integration=no\n    enable_extensions=no\n    enable_extension_update=no\n    enable_gio=no\n    enable_gpgmepp=no\n    enable_ldap=no\n    enable_lotuswordpro=no\n    enable_lpsolve=no\n    enable_nss=no\n    enable_odk=no\n    enable_online_update=no\n    enable_opencl=no\n    enable_pdfimport=no\n    enable_randr=no\n    enable_report_builder=no\n    enable_scripting=no\n    enable_sdremote_bluetooth=no\n    enable_skia=no\n    enable_xmlhelp=no\n    enable_zxing=no\n    test_libepubgen=no\n    test_libcdr=no\n    test_libcmis=no\n    test_libetonyek=no\n    test_libfreehand=no\n    test_libmspub=no\n    test_libpagemaker=no\n    test_libqxp=no\n    test_libvisio=no\n    test_libzmf=no\n    with_galleries=no\n    with_gssapi=no\n    with_templates=no\n    with_x=no\n\n    test \"${with_fonts+set}\" = set || with_fonts=yes\n\n    AC_DEFINE(ENABLE_WASM_STRIP_ACCESSIBILITY)\n    AC_DEFINE(ENABLE_WASM_STRIP_WRITER)\n    AC_DEFINE(ENABLE_WASM_STRIP_CALC)\n    AC_DEFINE(ENABLE_WASM_STRIP_CANVAS)\n#    AC_DEFINE(ENABLE_WASM_STRIP_CHART)\n    AC_DEFINE(ENABLE_WASM_STRIP_DBACCESS)\n    AC_DEFINE(ENABLE_WASM_STRIP_EPUB)\n    AC_DEFINE(ENABLE_WASM_STRIP_EXTRA)\n    AC_DEFINE(ENABLE_WASM_STRIP_GUESSLANG)\n#    AC_DEFINE(ENABLE_WASM_STRIP_HUNSPELL)\n    AC_DEFINE(ENABLE_WASM_STRIP_LANGUAGETOOL)\n    AC_DEFINE(ENABLE_WASM_STRIP_PINGUSER)\n    AC_DEFINE(ENABLE_WASM_STRIP_PREMULTIPLY)\n    AC_DEFINE(ENABLE_WASM_STRIP_RECENT)\n    AC_DEFINE(ENABLE_WASM_STRIP_RECOVERYUI)\n    AC_DEFINE(ENABLE_WASM_STRIP_SPLASH)\n    AC_DEFINE(ENABLE_WASM_STRIP_SWEXPORTS)\n    AC_DEFINE(ENABLE_WASM_STRIP_SCEXPORTS)\nfi\n\n# Whether to build \"avmedia\" functionality or not.\n\nif test \"$enable_avmedia\" = yes; then\n    BUILD_TYPE=\"$BUILD_TYPE AVMEDIA\"\n    AC_DEFINE(HAVE_FEATURE_AVMEDIA)\nelse\n    test_gstreamer_1_0=no\nfi\n\n# Decide whether to build database connectivity stuff (including Base) or not.\nif test \"$enable_database_connectivity\" != no; then\n    BUILD_TYPE=\"$BUILD_TYPE DBCONNECTIVITY\"\n    AC_DEFINE(HAVE_FEATURE_DBCONNECTIVITY)\nelse\n    if test \"$_os\" = iOS; then\n        AC_MSG_ERROR([Presumly can't disable DB connectivity on iOS.])\n    fi\n    disable_database_connectivity_dependencies\nfi\n\nif test -z \"$enable_extensions\"; then\n    # For iOS and Android Viewer, disable extensions unless specifically overridden with --enable-extensions.\n    if test $_os != iOS && test $_os != Android -o \"$ENABLE_ANDROID_LOK\" = TRUE ; then\n        enable_extensions=yes\n    fi\nfi\n\nDISABLE_SCRIPTING=''\nif test \"$enable_scripting\" = yes; then\n    BUILD_TYPE=\"$BUILD_TYPE SCRIPTING\"\n    AC_DEFINE(HAVE_FEATURE_SCRIPTING)\nelse\n    DISABLE_SCRIPTING='TRUE'\n    SCPDEFS=\"$SCPDEFS -DDISABLE_SCRIPTING\"\nfi\n\nif test $_os = iOS -o $_os = Android -o $_os = Emscripten; then\n    # Disable dynamic_loading always for iOS and Android\n    enable_dynamic_loading=no\nelif test -z \"$enable_dynamic_loading\"; then\n    # Otherwise enable it unless specifically disabled\n    enable_dynamic_loading=yes\nfi\n\nDISABLE_DYNLOADING=''\nif test \"$enable_dynamic_loading\" = yes; then\n    BUILD_TYPE=\"$BUILD_TYPE DYNLOADING\"\nelse\n    DISABLE_DYNLOADING='TRUE'\n    if test $_os != iOS -a $_os != Android; then\n        enable_database_connectivity=no\n        enable_nss=no\n        enable_odk=no\n        enable_python=no\n        enable_skia=no\n        with_java=no\n    fi\nfi\nAC_SUBST(DISABLE_DYNLOADING)\n\nENABLE_CUSTOMTARGET_COMPONENTS=\nif test \"$enable_customtarget_components\" = yes -a \"$DISABLE_DYNLOADING\" = TRUE; then\n    ENABLE_CUSTOMTARGET_COMPONENTS=TRUE\n    if test -n \"$with_locales\" -a \"$with_locales\" != en -a \"$with_locales\" != ALL; then\n        AC_MSG_ERROR([Currently just --with-locales=all or en is supported with --enable-customtarget-components])\n    fi\nfi\nAC_SUBST(ENABLE_CUSTOMTARGET_COMPONENTS)\n\nif test \"$enable_extensions\" = yes; then\n    BUILD_TYPE=\"$BUILD_TYPE EXTENSIONS\"\n    AC_DEFINE(HAVE_FEATURE_EXTENSIONS)\nelse\n    enable_extension_integration=no\n    enable_extension_update=no\nfi\n\n# remember SYSBASE value\nAC_SUBST(SYSBASE)\n\ndnl ===================================================================\ndnl  Sort out various gallery compilation options\ndnl ===================================================================\nWITH_GALLERY_BUILD=TRUE\nAC_MSG_CHECKING([how to build and package galleries])\nif test -n \"${with_galleries}\"; then\n    if test \"$with_galleries\" = \"build\"; then\n        if test \"$enable_database_connectivity\" = no; then\n            AC_MSG_ERROR([DB connectivity is needed for gengal / svx])\n        fi\n        AC_MSG_RESULT([build from source images internally])\n    elif test \"$with_galleries\" = \"no\"; then\n        WITH_GALLERY_BUILD=\n        AC_MSG_RESULT([disable non-internal gallery build])\n    else\n        AC_MSG_ERROR([unknown value --with-galleries=$with_galleries])\n    fi\nelse\n    if test $_os != iOS -a $_os != Android; then\n        AC_MSG_RESULT([internal src images for desktop])\n    else\n        WITH_GALLERY_BUILD=\n        AC_MSG_RESULT([disable src image build])\n    fi\nfi\nAC_SUBST(WITH_GALLERY_BUILD)\n\ndnl ===================================================================\ndnl  Sort out various templates compilation options\ndnl ===================================================================\nWITH_TEMPLATES=TRUE\nAC_MSG_CHECKING([build with or without template files])\nif test -n \"${with_templates}\"; then\n    if test \"$with_templates\" = \"yes\"; then\n        AC_MSG_RESULT([enable all templates])\n    elif test \"$with_templates\" = \"no\"; then\n        WITH_TEMPLATES=\n        AC_MSG_RESULT([disable non-internal templates])\n    else\n        AC_MSG_ERROR([unknown value --with-templates=$with_templates])\n    fi\nelse\n    if test $_os != iOS -a $_os != Android -a $_os != Emscripten; then\n        AC_MSG_RESULT([enable all templates])\n    else\n        WITH_TEMPLATES=\n        AC_MSG_RESULT([disable non-internal templates])\n    fi\nfi\nAC_SUBST(WITH_TEMPLATES)\n\ndnl ===================================================================\ndnl  Checks if ccache is available\ndnl ===================================================================\nCCACHE_DEPEND_MODE=\nif test \"$enable_ccache\" = \"no\"; then\n    CCACHE=\"\"\nelif test -n \"$enable_ccache\" -o \\( \"$enable_ccache\" = \"\" -a \"$enable_icecream\" != \"yes\" \\); then\n    case \"%$CC%$CXX%\" in\n    # If $CC and/or $CXX already contain \"ccache\" (possibly suffixed with some version number etc),\n    # assume that's good then\n    *%ccache[[-_' ']]*|*/ccache[[-_' ']]*)\n        AC_MSG_NOTICE([ccache seems to be included in a pre-defined CC and/or CXX])\n        CCACHE_DEPEND_MODE=1\n        ;;\n    *)\n        # try to use our own ccache if it is available and CCACHE was not already defined\n        if test -z \"$CCACHE\"; then\n            if test \"$_os\" = \"WINNT\"; then\n                ccache_ext=.exe # e.g. openssl build needs ccache.exe, not just ccache\n            fi\n            if test -n \"$LODE_HOME\" -a -x \"$LODE_HOME/opt/bin/ccache$ccache_ext\" ; then\n                CCACHE=\"$LODE_HOME/opt/bin/ccache$ccache_ext\"\n            elif test -x \"/opt/lo/bin/ccache$ccache_ext\"; then\n                CCACHE=\"/opt/lo/bin/ccache$ccache_ext\"\n            fi\n        fi\n        AC_PATH_PROG([CCACHE],[ccache],[not found])\n        if test \"$CCACHE\" != \"not found\" -a \"$_os\" = \"WINNT\"; then\n            CCACHE=`win_short_path_for_make \"$CCACHE\"`\n            # check that it has MSVC support (it should recognize it in CCACHE_COMPILERTYPE)\n            rm -f conftest.txt\n            AC_MSG_CHECKING([whether $CCACHE has MSVC support])\n            CCACHE_COMPILERTYPE=cl CCACHE_LOGFILE=conftest.txt $CCACHE echo >/dev/null 2>/dev/null\n            if grep -q 'Config: (environment) compiler_type = cl' conftest.txt; then\n                AC_MSG_RESULT(yes)\n            else\n                AC_MSG_RESULT(no)\n                CCACHE=\"not found\"\n            fi\n            rm -f conftest.txt\n        fi\n        if test \"$CCACHE\" = \"not found\" -a \"$_os\" = \"WINNT\"; then\n            # on windows/VC perhaps sccache is around?\n            case \"%$CC%$CXX%\" in\n            # If $CC and/or $CXX already contain \"sccache\" (possibly suffixed with some version number etc),\n            # assume that's good then\n            *%sccache[[-_' ']]*|*/sccache[[-_' ']]*)\n                AC_MSG_NOTICE([sccache seems to be included in a pre-defined CC and/or CXX])\n                CCACHE_DEPEND_MODE=1\n                SCCACHE=1\n                ;;\n            *)\n                # for sharing code below, reuse CCACHE env var\n                AC_PATH_PROG([CCACHE],[sccache],[not found])\n                if test \"$CCACHE\" != \"not found\"; then\n                    CCACHE=`win_short_path_for_make \"$CCACHE\"`\n                    SCCACHE=1\n                    CCACHE_DEPEND_MODE=1\n                fi\n                ;;\n            esac\n        fi\n        if test \"$CCACHE\" = \"not found\"; then\n            CCACHE=\"\"\n        fi\n        if test -n \"$CCACHE\" -a -z \"$SCCACHE\"; then\n            CCACHE_DEPEND_MODE=1\n            # Need to check for ccache version: otherwise prevents\n            # caching of the results (like \"-x objective-c++\" for Mac)\n            if test $_os = Darwin -o $_os = iOS; then\n                # Check ccache version\n                AC_MSG_CHECKING([whether version of ccache is suitable])\n                CCACHE_VERSION=`\"$CCACHE\" -V | \"$AWK\" '/^ccache version/{print $3}'`\n                CCACHE_NUMVER=`echo $CCACHE_VERSION | $AWK -F. '{ print \\$1*10000+\\$2*100+\\$3 }'`\n                if test \"$CCACHE_VERSION\" = \"2.4_OOo\" -o \"$CCACHE_NUMVER\" -ge \"030100\"; then\n                    AC_MSG_RESULT([yes, $CCACHE_VERSION])\n                else\n                    AC_MSG_RESULT([no, $CCACHE_VERSION])\n                    CCACHE=\"\"\n                    CCACHE_DEPEND_MODE=\n                fi\n            fi\n        fi\n        if test \"$enable_ccache\" = yes && test -z \"$CCACHE\"; then\n            AC_MSG_ERROR([No suitable ccache found])\n        fi\n        ;;\n    esac\nelse\n    CCACHE=\"\"\nfi\nif test \"$enable_ccache\" = \"nodepend\"; then\n    CCACHE_DEPEND_MODE=\"\"\nfi\nAC_SUBST(CCACHE_DEPEND_MODE)\n\n# sccache defaults are good enough\nif test \"$CCACHE\" != \"\" -a -z \"$SCCACHE\"; then\n    # e.g. (/home/rene/.config/ccache/ccache.conf) max_size = 20.0G\n    # or (...) max_size = 20.0 G\n    # -p works with both 4.2 and 4.4\n    ccache_size_msg=$([$CCACHE -p | $AWK /max_size/'{ print $4 $5 }' | sed -e 's/\\.[0-9]*//'])\n    ccache_size=$(echo \"$ccache_size_msg\" | grep \"G\" | sed -e 's/G.*$//')\n    if test \"$ccache_size\" = \"\"; then\n        ccache_size=$(echo \"$ccache_size_msg\" | grep \"M\" | sed -e 's/\\ M.*$//')\n        if test \"$ccache_size\" = \"\"; then\n            ccache_size=0\n        fi\n        # we could not determine the size or it was less than 1GB -> disable auto-ccache\n        if test $ccache_size -lt 1024; then\n            CCACHE=\"\"\n            AC_MSG_WARN([ccache's cache size is less than 1GB using it is counter-productive: Disabling auto-ccache detection])\n            add_warning \"ccache's cache size is less than 1GB using it is counter-productive: auto-ccache detection disabled\"\n        else\n            # warn that ccache may be too small for debug build\n            AC_MSG_WARN([ccache's cache size is less than 5GB using it may be counter-productive for debug or symbol-enabled build])\n            add_warning \"ccache's cache size is less than 5GB using it may be counter-productive for debug or symbol-enabled build\"\n        fi\n    else\n        if test $ccache_size -lt 5; then\n            #warn that ccache may be too small for debug build\n            AC_MSG_WARN([ccache's cache size is less than 5GB using it may be counter-productive for debug or symbol-enabled build])\n            add_warning \"ccache's cache size is less than 5GB using it may be counter-productive for debug or symbol-enabled build\"\n        fi\n    fi\nfi\n\nENABLE_Z7_DEBUG=\nif test \"$enable_z7_debug\" != no; then\n    if test \"$enable_z7_debug\" = yes -o -n \"$CCACHE\"; then\n        ENABLE_Z7_DEBUG=TRUE\n    fi\nelse\n    AC_MSG_WARN([ccache will not work with --disable-z7-debug])\n    add_warning \"ccache will not work with --disable-z7-debug\"\nfi\nAC_SUBST(ENABLE_Z7_DEBUG)\n\ndnl ===================================================================\ndnl  Checks for C compiler,\ndnl  The check for the C++ compiler is later on.\ndnl ===================================================================\nif test \"$_os\" != \"WINNT\"; then\n    GCC_HOME_SET=\"true\"\n    AC_MSG_CHECKING([gcc home])\n    if test -z \"$with_gcc_home\"; then\n        if test \"$enable_icecream\" = \"yes\"; then\n            if test -d \"/usr/lib/icecc/bin\"; then\n                GCC_HOME=\"/usr/lib/icecc/\"\n            elif test -d \"/usr/libexec/icecc/bin\"; then\n                GCC_HOME=\"/usr/libexec/icecc/\"\n            elif test -d \"/opt/icecream/bin\"; then\n                GCC_HOME=\"/opt/icecream/\"\n            else\n                AC_MSG_ERROR([Could not figure out the location of icecream GCC wrappers, manually use --with-gcc-home])\n\n            fi\n        else\n            GCC_HOME=`command -v gcc | $SED -e s,/bin/gcc,,`\n            GCC_HOME_SET=\"false\"\n        fi\n    else\n        GCC_HOME=\"$with_gcc_home\"\n    fi\n    AC_MSG_RESULT($GCC_HOME)\n\n    if test \"$GCC_HOME_SET\" = \"true\"; then\n        if test -z \"$CC\"; then\n            CC=\"$GCC_HOME/bin/gcc\"\n            CC_BASE=\"gcc\"\n        fi\n        if test -z \"$CXX\"; then\n            CXX=\"$GCC_HOME/bin/g++\"\n            CXX_BASE=\"g++\"\n        fi\n    fi\nfi\n\nCOMPATH=`dirname \"$CC\"`\nif test \"$COMPATH\" = \".\"; then\n    AC_PATH_PROGS(COMPATH, $CC)\n    dnl double square bracket to get single because of M4 quote...\n    COMPATH=`echo $COMPATH | $SED \"s@/[[^/:]]*\\\\\\$@@\"`\nfi\nCOMPATH=`echo $COMPATH | $SED \"s@/[[Bb]][[Ii]][[Nn]]\\\\\\$@@\"`\n\ndnl ===================================================================\ndnl Java support\ndnl ===================================================================\nAC_MSG_CHECKING([whether to build with Java support])\njavacompiler=\"javac\"\njavadoc=\"javadoc\"\nif test \"$with_java\" != \"no\"; then\n    if test \"$DISABLE_SCRIPTING\" = TRUE; then\n        AC_MSG_RESULT([no, overridden by --disable-scripting])\n        ENABLE_JAVA=\"\"\n        with_java=no\n    else\n        AC_MSG_RESULT([yes])\n        ENABLE_JAVA=\"TRUE\"\n        AC_DEFINE(HAVE_FEATURE_JAVA)\n    fi\nelse\n    AC_MSG_RESULT([no])\n    ENABLE_JAVA=\"\"\nfi\n\nAC_SUBST(ENABLE_JAVA)\n\ndnl ENABLE_JAVA=\"TRUE\" if we want there to be *run-time* (and build-time) support for Java\n\ndnl ENABLE_JAVA=\"\" indicate no Java support at all\n\ndnl ===================================================================\ndnl Check macOS SDK and compiler\ndnl ===================================================================\n\nif test $_os = Darwin; then\n\n    # The SDK in the currently selected Xcode should be found.\n\n    AC_MSG_CHECKING([what macOS SDK to use])\n    # XCode only ships with a single SDK for a while now, and using older SDKs alongside is not\n    # really supported anymore, instead you'd use different copies of Xcode, each with their own\n    # SDK, and thus xcrun will pick the SDK that matches the currently selected Xcode version\n    # also restricting the SDK version to \"known good\" versions doesn't seem necessary anymore, the\n    # problems that existed in the PPC days with target versions not being respected or random\n    # failures seems to be a thing of the past or rather: limiting either the Xcode version or the\n    # SDK version is enough, no need to do both...\n    MACOSX_SDK_PATH=`xcrun --sdk macosx --show-sdk-path 2> /dev/null`\n    if test ! -d \"$MACOSX_SDK_PATH\"; then\n        AC_MSG_ERROR([Could not find an appropriate macOS SDK])\n    fi\n    macosx_sdk=`xcodebuild -version -sdk \"$MACOSX_SDK_PATH\" SDKVersion`\n    MACOSX_SDK_BUILD_VERSION=$(xcodebuild -version -sdk \"$MACOSX_SDK_PATH\" ProductBuildVersion)\n    # format changed between 10.9 and 10.10 - up to 10.9 it was just four digits (1090), starting\n    # with macOS 10.10 it was switched to account for x.y.z with six digits, 10.10 is 101000,\n    # 10.10.2 is 101002\n    # we don't target the lower versions anymore, so it doesn't matter that we don't generate the\n    # correct version in case such an old SDK is specified, it will be rejected later anyway\n    MACOSX_SDK_VERSION=$(echo $macosx_sdk | $AWK -F. '{ print $1*10000+$2*100+$3 }')\n    if test $MACOSX_SDK_VERSION -lt 101500; then\n        AC_MSG_ERROR([macOS SDK $macosx_sdk is not supported, lowest supported version is 10.15])\n    fi\n    if test \"$host_cpu\" = arm64 -a $MACOSX_SDK_VERSION -lt 110000; then\n        AC_MSG_ERROR([macOS SDK $macosx_sdk is not supported for Apple Silicon (need at least 11.0)])\n    fi\n    AC_MSG_RESULT([macOS SDK $macosx_sdk at $MACOSX_SDK_PATH])\n\n    AC_MSG_CHECKING([what minimum version of macOS to require])\n    if test \"$with_macosx_version_min_required\" = \"\" ; then\n        if test \"$host_cpu\" = x86_64; then\n            with_macosx_version_min_required=\"10.15\";\n        else\n            with_macosx_version_min_required=\"11.0\";\n        fi\n    fi\n    # see same notes about MACOSX_SDK_VERSION above\n    MAC_OS_X_VERSION_MIN_REQUIRED=$(echo $with_macosx_version_min_required | $AWK -F. '{ print $1*10000+$2*100+$3 }')\n    if test $MAC_OS_X_VERSION_MIN_REQUIRED -lt 101500; then\n        AC_MSG_ERROR([with-macosx-version-min-required $with_macosx_version_min_required is not a supported value, minimum supported version is 10.15])\n    fi\n    AC_MSG_RESULT([$with_macosx_version_min_required])\n\n    AC_MSG_CHECKING([that macosx-version-min-required is coherent with macos-with-sdk])\n    if test $MAC_OS_X_VERSION_MIN_REQUIRED -gt $MACOSX_SDK_VERSION; then\n        AC_MSG_ERROR([the version minimum required ($with_macosx_version_min_required) cannot be greater than the sdk level ($macosx_sdk)])\n    else\n        AC_MSG_RESULT([yes])\n    fi\n\n    # export this so that \"xcrun\" invocations later return matching values\n    DEVELOPER_DIR=\"${MACOSX_SDK_PATH%/SDKs*}\"\n    DEVELOPER_DIR=\"${DEVELOPER_DIR%/Platforms*}\"\n    export DEVELOPER_DIR\n    FRAMEWORKSHOME=\"$MACOSX_SDK_PATH/System/Library/Frameworks\"\n    MACOSX_DEPLOYMENT_TARGET=\"$with_macosx_version_min_required\"\n\n    AC_MSG_CHECKING([whether Xcode is new enough])\n    my_xcode_ver1=$(xcrun xcodebuild -version | head -n 1)\n    my_xcode_ver2=${my_xcode_ver1#Xcode }\n    my_xcode_ver3=$(printf %s \"$my_xcode_ver2\" | $AWK -F. '{ print $1*100+($2<100?$2:99) }')\n    if test \"$my_xcode_ver3\" -ge 1205; then\n        AC_MSG_RESULT([yes ($my_xcode_ver2)])\n        if test $MAC_OS_X_VERSION_MIN_REQUIRED -lt 120000; then\n            if test \"$my_xcode_ver3\" -eq 1500; then\n                dnl the bug was already fixed on 15.1 and 15.2 still has the same OS requirements as 15.0\n                dnl in other words all affected users could update to a working Xcode version\n                AC_MSG_WARN([Use a current version of XCode or bump the minimum deployment target])\n                AC_MSG_WARN([[see https://developer.apple.com/documentation/xcode-release-notes/xcode-15-release-notes#Linking]])\n                AC_MSG_ERROR([Xcode 15.0 has a bug in the new linker that causes runtime crashes on macOS 11 - aborting])\n            fi\n        fi\n    else\n        AC_MSG_ERROR([\"$my_xcode_ver1\" is too old or unrecognized, must be at least Xcode 12.5])\n    fi\n\n    my_xcode_ver1=$(xcrun xcodebuild -version | tail -n 1)\n    MACOSX_XCODE_BUILD_VERSION=${my_xcode_ver1#Build version }\n\n    LIBTOOL=/usr/bin/libtool\n    INSTALL_NAME_TOOL=install_name_tool\n    if test -z \"$save_CC\"; then\n        stdlib=-stdlib=libc++\n\n        AC_MSG_CHECKING([what C compiler to use])\n        CC=\"`xcrun -find clang`\"\n        CC_BASE=`first_arg_basename \"$CC\"`\n        if test \"$host_cpu\" = x86_64; then\n            CC+=\" -target x86_64-apple-macos\"\n        else\n            CC+=\" -target arm64-apple-macos\"\n        fi\n        CC+=\" -mmacosx-version-min=$with_macosx_version_min_required -isysroot $MACOSX_SDK_PATH\"\n        AC_MSG_RESULT([$CC])\n\n        AC_MSG_CHECKING([what C++ compiler to use])\n        CXX=\"`xcrun -find clang++`\"\n        CXX_BASE=`first_arg_basename \"$CXX\"`\n        if test \"$host_cpu\" = x86_64; then\n            CXX+=\" -target x86_64-apple-macos\"\n        else\n            CXX+=\" -target arm64-apple-macos\"\n        fi\n        CXX+=\" $stdlib -mmacosx-version-min=$with_macosx_version_min_required -isysroot $MACOSX_SDK_PATH\"\n        AC_MSG_RESULT([$CXX])\n\n        INSTALL_NAME_TOOL=`xcrun -find install_name_tool`\n        AR=`xcrun -find ar`\n        NM=`xcrun -find nm`\n        STRIP=`xcrun -find strip`\n        LIBTOOL=`xcrun -find libtool`\n        RANLIB=`xcrun -find ranlib`\n    fi\n\n    AC_MSG_CHECKING([whether to do code signing])\n\n    if test -z \"$enable_macosx_code_signing\" -o \"$enable_macosx_code_signing\" == \"no\" ; then\n        AC_MSG_RESULT([no])\n    else\n        if test \"$enable_macosx_code_signing\" = yes; then\n            # By default use the first suitable certificate (?).\n\n            # https://stackoverflow.com/questions/13196291/difference-between-mac-developer-and-3rd-party-mac-developer-application\n            # says that the \"Mac Developer\" certificate is useful just for self-testing. For distribution\n            # outside the Mac App Store, use the \"Developer ID Application\" one, and for distribution in\n            # the App Store, the \"3rd Party Mac Developer\" one. I think it works best to the\n            # \"Developer ID Application\" one.\n            identity=\"Developer ID Application:\"\n        else\n            identity=$enable_macosx_code_signing\n        fi\n        identity=`security find-identity -p codesigning -v 2>/dev/null | $AWK \"/$identity/{print \\\\$2; exit}\"`\n        if test -n \"$identity\"; then\n            MACOSX_CODESIGNING_IDENTITY=$identity\n            pretty_name=`security find-identity -p codesigning -v | grep \"$MACOSX_CODESIGNING_IDENTITY\" | sed -e 's/^[[^\"]]*\"//' -e 's/\"//'`\n            AC_MSG_RESULT([yes, using the identity $MACOSX_CODESIGNING_IDENTITY for $pretty_name])\n        else\n            AC_MSG_ERROR([cannot determine identity to use])\n        fi\n    fi\n\n    AC_MSG_CHECKING([whether to create a Mac App Store package])\n\n    if test -z \"$enable_macosx_package_signing\" || test \"$enable_macosx_package_signing\" == no; then\n        AC_MSG_RESULT([no])\n    elif test -z \"$MACOSX_CODESIGNING_IDENTITY\"; then\n        AC_MSG_ERROR([You forgot --enable-macosx-code-signing])\n    else\n        if test \"$enable_macosx_package_signing\" = yes; then\n            # By default use the first suitable certificate.\n            # It should be a \"3rd Party Mac Developer Installer\" one\n            identity=\"3rd Party Mac Developer Installer:\"\n        else\n            identity=$enable_macosx_package_signing\n        fi\n        identity=`security find-identity -v 2>/dev/null | $AWK \"/$identity/ {print \\\\$2; exit}\"`\n        if test -n \"$identity\"; then\n            MACOSX_PACKAGE_SIGNING_IDENTITY=$identity\n            pretty_name=`security find-identity -v | grep \"$MACOSX_PACKAGE_SIGNING_IDENTITY\" | sed -e 's/^[[^\"]]*\"//' -e 's/\"//'`\n            AC_MSG_RESULT([yes, using the identity $MACOSX_PACKAGE_SIGNING_IDENTITY for $pretty_name])\n        else\n            AC_MSG_ERROR([Could not find any suitable '3rd Party Mac Developer Installer' certificate])\n        fi\n    fi\n\n    if test -n \"$MACOSX_CODESIGNING_IDENTITY\" -a -n \"$MACOSX_PACKAGE_SIGNING_IDENTITY\" -a \"$MACOSX_CODESIGNING_IDENTITY\" = \"$MACOSX_PACKAGE_SIGNING_IDENTITY\"; then\n        AC_MSG_ERROR([You should not use the same identity for code and package signing])\n    fi\n\n    AC_MSG_CHECKING([whether to sandbox the application])\n\n    if test -n \"$ENABLE_JAVA\" -a \"$enable_macosx_sandbox\" = yes; then\n        AC_MSG_ERROR([macOS sandboxing (actually App Store rules) disallows use of Java])\n    elif test \"$enable_macosx_sandbox\" = yes; then\n        ENABLE_MACOSX_SANDBOX=TRUE\n        AC_DEFINE(HAVE_FEATURE_MACOSX_SANDBOX)\n        AC_MSG_RESULT([yes])\n    else\n        AC_MSG_RESULT([no])\n    fi\n\n    AC_MSG_CHECKING([what macOS app bundle identifier to use])\n    MACOSX_BUNDLE_IDENTIFIER=$with_macosx_bundle_identifier\n    AC_MSG_RESULT([$MACOSX_BUNDLE_IDENTIFIER])\n\n    if test -n \"$with_macosx_provisioning_profile\" ; then\n        if test ! -f \"$with_macosx_provisioning_profile\"; then\n            AC_MSG_ERROR([provisioning profile not found at $with_macosx_provisioning_profile])\n        else\n            MACOSX_PROVISIONING_PROFILE=$with_macosx_provisioning_profile\n            MACOSX_PROVISIONING_INFO=$([security cms -D -i \"$MACOSX_PROVISIONING_PROFILE\" | \\\n                xmllint --xpath \"//key[.='com.apple.application-identifier' or .='com.apple.developer.team-identifier'] \\\n                    | //key[.='com.apple.application-identifier' or .='com.apple.developer.team-identifier']/following-sibling::string[1]\" - | \\\n                sed -e 's#><#>\\n\\t<#g' -e 's#^#\\t#'])\n        fi\n    fi\nfi\nAC_SUBST(MACOSX_SDK_PATH)\nAC_SUBST(MACOSX_DEPLOYMENT_TARGET)\nAC_SUBST(MAC_OS_X_VERSION_MIN_REQUIRED)\nAC_SUBST(INSTALL_NAME_TOOL)\nAC_SUBST(LIBTOOL) # Note that the macOS libtool command is unrelated to GNU libtool\nAC_SUBST(MACOSX_CODESIGNING_IDENTITY)\nAC_SUBST(MACOSX_PACKAGE_SIGNING_IDENTITY)\nAC_SUBST(ENABLE_MACOSX_SANDBOX)\nAC_SUBST(MACOSX_BUNDLE_IDENTIFIER)\nAC_SUBST(MACOSX_PROVISIONING_INFO)\nAC_SUBST(MACOSX_PROVISIONING_PROFILE)\nAC_SUBST(MACOSX_SDK_BUILD_VERSION)\nAC_SUBST(MACOSX_XCODE_BUILD_VERSION)\n\ndnl ===================================================================\ndnl Check iOS SDK and compiler\ndnl ===================================================================\n\nif test $_os = iOS; then\n    AC_MSG_CHECKING([what iOS SDK to use])\n\n    if test \"$enable_ios_simulator\" = \"yes\"; then\n        platformlc=iphonesimulator\n        versionmin=-mios-simulator-version-min=14.5\n    else\n        platformlc=iphoneos\n        versionmin=-miphoneos-version-min=14.5\n    fi\n\n    sysroot=`xcrun --sdk $platformlc --show-sdk-path`\n\n    if ! test -d \"$sysroot\"; then\n        AC_MSG_ERROR([Could not find iOS SDK $sysroot])\n    fi\n\n    AC_MSG_RESULT($sysroot)\n\n    stdlib=\"-stdlib=libc++\"\n\n    AC_MSG_CHECKING([what C compiler to use])\n    CC=\"`xcrun -find clang`\"\n    CC_BASE=`first_arg_basename \"$CC\"`\n    CC+=\" -arch $host_cpu_for_clang -isysroot $sysroot $versionmin\"\n    AC_MSG_RESULT([$CC])\n\n    AC_MSG_CHECKING([what C++ compiler to use])\n    CXX=\"`xcrun -find clang++`\"\n    CXX_BASE=`first_arg_basename \"$CXX\"`\n    CXX+=\" -arch $host_cpu_for_clang $stdlib -isysroot $sysroot $versionmin\"\n    AC_MSG_RESULT([$CXX])\n\n    INSTALL_NAME_TOOL=`xcrun -find install_name_tool`\n    AR=`xcrun -find ar`\n    NM=`xcrun -find nm`\n    STRIP=`xcrun -find strip`\n    LIBTOOL=`xcrun -find libtool`\n    RANLIB=`xcrun -find ranlib`\nfi\n\nAC_MSG_CHECKING([whether to treat the installation as read-only])\n\nif test $_os = Darwin; then\n    enable_readonly_installset=yes\nelif test \"$enable_extensions\" != yes; then\n    enable_readonly_installset=yes\nfi\nif test \"$enable_readonly_installset\" = yes; then\n    AC_MSG_RESULT([yes])\n    AC_DEFINE(HAVE_FEATURE_READONLY_INSTALLSET)\nelse\n    AC_MSG_RESULT([no])\nfi\n\ndnl ===================================================================\ndnl Structure of install set\ndnl ===================================================================\n\nif test $_os = Darwin; then\n    LIBO_BIN_FOLDER=MacOS\n    LIBO_ETC_FOLDER=Resources\n    LIBO_LIBEXEC_FOLDER=MacOS\n    LIBO_LIB_FOLDER=Frameworks\n    LIBO_LIB_PYUNO_FOLDER=Resources\n    LIBO_SHARE_FOLDER=Resources\n    LIBO_SHARE_HELP_FOLDER=Resources/help\n    LIBO_SHARE_DOTNET_FOLDER=Resources/dotnet\n    LIBO_SHARE_JAVA_FOLDER=Resources/java\n    LIBO_SHARE_PRESETS_FOLDER=Resources/presets\n    LIBO_SHARE_READMES_FOLDER=Resources/readmes\n    LIBO_SHARE_RESOURCE_FOLDER=Resources/resource\n    LIBO_SHARE_SHELL_FOLDER=Resources/shell\n    LIBO_URE_BIN_FOLDER=MacOS\n    LIBO_URE_ETC_FOLDER=Resources/ure/etc\n    LIBO_URE_LIB_FOLDER=Frameworks\n    LIBO_URE_MISC_FOLDER=Resources/ure/share/misc\n    LIBO_URE_SHARE_JAVA_FOLDER=Resources/java\nelif test $_os = WINNT; then\n    LIBO_BIN_FOLDER=program\n    LIBO_ETC_FOLDER=program\n    LIBO_LIBEXEC_FOLDER=program\n    LIBO_LIB_FOLDER=program\n    LIBO_LIB_PYUNO_FOLDER=program\n    LIBO_SHARE_FOLDER=share\n    LIBO_SHARE_HELP_FOLDER=help\n    LIBO_SHARE_DOTNET_FOLDER=program/dotnet\n    LIBO_SHARE_JAVA_FOLDER=program/classes\n    LIBO_SHARE_PRESETS_FOLDER=presets\n    LIBO_SHARE_READMES_FOLDER=readmes\n    LIBO_SHARE_RESOURCE_FOLDER=program/resource\n    LIBO_SHARE_SHELL_FOLDER=program/shell\n    LIBO_URE_BIN_FOLDER=program\n    LIBO_URE_ETC_FOLDER=program\n    LIBO_URE_LIB_FOLDER=program\n    LIBO_URE_MISC_FOLDER=program\n    LIBO_URE_SHARE_JAVA_FOLDER=program/classes\nelse\n    LIBO_BIN_FOLDER=program\n    LIBO_ETC_FOLDER=program\n    LIBO_LIBEXEC_FOLDER=program\n    LIBO_LIB_FOLDER=program\n    LIBO_LIB_PYUNO_FOLDER=program\n    LIBO_SHARE_FOLDER=share\n    LIBO_SHARE_HELP_FOLDER=help\n    LIBO_SHARE_DOTNET_FOLDER=program/dotnet\n    LIBO_SHARE_JAVA_FOLDER=program/classes\n    LIBO_SHARE_PRESETS_FOLDER=presets\n    LIBO_SHARE_READMES_FOLDER=readmes\n    if test \"$enable_fuzzers\" != yes; then\n        LIBO_SHARE_RESOURCE_FOLDER=program/resource\n    else\n        LIBO_SHARE_RESOURCE_FOLDER=resource\n    fi\n    LIBO_SHARE_SHELL_FOLDER=program/shell\n    LIBO_URE_BIN_FOLDER=program\n    LIBO_URE_ETC_FOLDER=program\n    LIBO_URE_LIB_FOLDER=program\n    LIBO_URE_MISC_FOLDER=program\n    LIBO_URE_SHARE_JAVA_FOLDER=program/classes\nfi\nAC_DEFINE_UNQUOTED(LIBO_BIN_FOLDER,\"$LIBO_BIN_FOLDER\")\nAC_DEFINE_UNQUOTED(LIBO_ETC_FOLDER,\"$LIBO_ETC_FOLDER\")\nAC_DEFINE_UNQUOTED(LIBO_LIBEXEC_FOLDER,\"$LIBO_LIBEXEC_FOLDER\")\nAC_DEFINE_UNQUOTED(LIBO_LIB_FOLDER,\"$LIBO_LIB_FOLDER\")\nAC_DEFINE_UNQUOTED(LIBO_LIB_PYUNO_FOLDER,\"$LIBO_LIB_PYUNO_FOLDER\")\nAC_DEFINE_UNQUOTED(LIBO_SHARE_FOLDER,\"$LIBO_SHARE_FOLDER\")\nAC_DEFINE_UNQUOTED(LIBO_SHARE_HELP_FOLDER,\"$LIBO_SHARE_HELP_FOLDER\")\nAC_DEFINE_UNQUOTED(LIBO_SHARE_DOTNET_FOLDER,\"$LIBO_SHARE_DOTNET_FOLDER\")\nAC_DEFINE_UNQUOTED(LIBO_SHARE_JAVA_FOLDER,\"$LIBO_SHARE_JAVA_FOLDER\")\nAC_DEFINE_UNQUOTED(LIBO_SHARE_PRESETS_FOLDER,\"$LIBO_SHARE_PRESETS_FOLDER\")\nAC_DEFINE_UNQUOTED(LIBO_SHARE_RESOURCE_FOLDER,\"$LIBO_SHARE_RESOURCE_FOLDER\")\nAC_DEFINE_UNQUOTED(LIBO_SHARE_SHELL_FOLDER,\"$LIBO_SHARE_SHELL_FOLDER\")\nAC_DEFINE_UNQUOTED(LIBO_URE_BIN_FOLDER,\"$LIBO_URE_BIN_FOLDER\")\nAC_DEFINE_UNQUOTED(LIBO_URE_ETC_FOLDER,\"$LIBO_URE_ETC_FOLDER\")\nAC_DEFINE_UNQUOTED(LIBO_URE_LIB_FOLDER,\"$LIBO_URE_LIB_FOLDER\")\nAC_DEFINE_UNQUOTED(LIBO_URE_MISC_FOLDER,\"$LIBO_URE_MISC_FOLDER\")\nAC_DEFINE_UNQUOTED(LIBO_URE_SHARE_JAVA_FOLDER,\"$LIBO_URE_SHARE_JAVA_FOLDER\")\n\n# Not all of them needed in config_host.mk, add more if need arises\nAC_SUBST(LIBO_BIN_FOLDER)\nAC_SUBST(LIBO_ETC_FOLDER)\nAC_SUBST(LIBO_LIB_FOLDER)\nAC_SUBST(LIBO_LIB_PYUNO_FOLDER)\nAC_SUBST(LIBO_SHARE_FOLDER)\nAC_SUBST(LIBO_SHARE_HELP_FOLDER)\nAC_SUBST(LIBO_SHARE_DOTNET_FOLDER)\nAC_SUBST(LIBO_SHARE_JAVA_FOLDER)\nAC_SUBST(LIBO_SHARE_PRESETS_FOLDER)\nAC_SUBST(LIBO_SHARE_READMES_FOLDER)\nAC_SUBST(LIBO_SHARE_RESOURCE_FOLDER)\nAC_SUBST(LIBO_URE_BIN_FOLDER)\nAC_SUBST(LIBO_URE_ETC_FOLDER)\nAC_SUBST(LIBO_URE_LIB_FOLDER)\nAC_SUBST(LIBO_URE_MISC_FOLDER)\nAC_SUBST(LIBO_URE_SHARE_JAVA_FOLDER)\n\ndnl ===================================================================\ndnl Windows specific tests and stuff\ndnl ===================================================================\n\nreg_get_value()\n{\n    # Return value: $regvalue\n    unset regvalue\n\n    if test \"$build_os\" = \"wsl\"; then\n        regvalue=$($WSL_LO_HELPER --read-registry $1 \"$2/$3\" 2>/dev/null)\n        return\n    elif test -n \"$WSL_ONLY_AS_HELPER\"; then\n        regvalue=$(reg.exe query \"$(echo $2 | tr '/' '\\\\')\" /v \"$3\" /reg:$1 |sed -ne \"s|\\s*$3.*REG_SZ\\s*\\(.*\\)[\\s\\r]*$|\\1|p\")\n        return\n    fi\n\n    local _regentry=\"/proc/registry${1}/${2}/${3}\"\n    if test -f \"$_regentry\"; then\n        # Stop bash complaining about \\0 bytes in input, as it can't handle them.\n        # Registry keys read via /proc/registry* are always \\0 terminated!\n        local _regvalue=$(tr -d '\\0' < \"$_regentry\")\n        if test $? -eq 0; then\n            regvalue=$_regvalue\n        fi\n    fi\n}\n\n# Get a value from the 32-bit side of the Registry\nreg_get_value_32()\n{\n    reg_get_value \"32\" \"$1\" \"$2\"\n}\n\n# Get a value from the 64-bit side of the Registry\nreg_get_value_64()\n{\n    reg_get_value \"64\" \"$1\" \"$2\"\n}\n\nreg_list_values()\n{\n    # Return value: $reglist\n    unset reglist\n\n    if test \"$build_os\" = \"wsl\"; then\n        reglist=$($WSL_LO_HELPER --list-registry $1 \"$2\" 2>/dev/null | tr -d '\\r')\n        return\n    fi\n\n    reglist=$(ls \"/proc/registry${1}/${2}\")\n}\n\n# List values from the 32-bit side of the Registry\nreg_list_values_32()\n{\n    reg_list_values \"32\" \"$1\"\n}\n\n# List values from the 64-bit side of the Registry\nreg_list_values_64()\n{\n    reg_list_values \"64\" \"$1\"\n}\n\ncase \"$host_os\" in\ncygwin*|wsl*)\n    COM=MSC\n    OS=WNT\n    RTL_OS=Windows\n    if test \"$GNUMAKE_WIN_NATIVE\" = \"TRUE\" ; then\n        P_SEP=\";\"\n    else\n        P_SEP=:\n    fi\n    case \"$host_cpu\" in\n    x86_64)\n        CPUNAME=X86_64\n        RTL_ARCH=X86_64\n        PLATFORMID=windows_x86_64\n        WINDOWS_X64=1\n        SCPDEFS=\"$SCPDEFS -DWINDOWS_X64\"\n        WIN_HOST_ARCH=\"x64\"\n        WIN_MULTI_ARCH=\"x86\"\n        WIN_HOST_BITS=64\n        ;;\n    i*86)\n        CPUNAME=INTEL\n        RTL_ARCH=x86\n        PLATFORMID=windows_x86\n        WIN_HOST_ARCH=\"x86\"\n        WIN_HOST_BITS=32\n        WIN_OTHER_ARCH=\"x64\"\n        ;;\n    aarch64)\n        CPUNAME=AARCH64\n        RTL_ARCH=AARCH64\n        PLATFORMID=windows_aarch64\n        WINDOWS_X64=1\n        SCPDEFS=\"$SCPDEFS -DWINDOWS_AARCH64\"\n        WIN_HOST_ARCH=\"arm64\"\n        WIN_HOST_BITS=64\n        ;;\n    *)\n        AC_MSG_ERROR([Unsupported host_cpu $host_cpu for host_os $host_os])\n        ;;\n    esac\n\n    case \"$build_cpu\" in\n    x86_64) WIN_BUILD_ARCH=\"x64\" ;;\n    i*86) WIN_BUILD_ARCH=\"x86\" ;;\n    aarch64) WIN_BUILD_ARCH=\"arm64\" ;;\n    *)\n        AC_MSG_ERROR([Unsupported build_cpu $build_cpu for host_os $host_os])\n        ;;\n    esac\n\n    SCPDEFS=\"$SCPDEFS -D_MSC_VER\"\n    ;;\nesac\n\n# multi-arch is an arch, which can execute on the host (x86 on x64), while\n# other-arch won't, but wouldn't break the build (x64 on x86).\nif test -n \"$WIN_MULTI_ARCH\" -a -n \"$WIN_OTHER_ARCH\"; then\n    AC_MSG_ERROR([Broken configure.ac file: can't have set \\$WIN_MULTI_ARCH and $WIN_OTHER_ARCH])\nfi\n\n\nif test \"$build_cpu\" != \"$host_cpu\" -o \"$DISABLE_DYNLOADING\" = TRUE; then\n    # To allow building Windows multi-arch releases without cross-tooling\n    if test \"$DISABLE_DYNLOADING\" = TRUE -o \\( -z \"$WIN_MULTI_ARCH\" -a -z \"$WIN_OTHER_ARCH\" \\); then\n        cross_compiling=\"yes\"\n    fi\nfi\n\nif test \"$cross_compiling\" = \"yes\"; then\n    export CROSS_COMPILING=TRUE\n    if test \"$enable_dynamic_loading\" != yes -a \"$enable_wasm_strip\" = yes; then\n        ENABLE_WASM_STRIP=TRUE\n    fi\n    if test \"$_os\" = \"Emscripten\"; then\n        if test \"$with_main_module\" = \"calc\"; then\n            ENABLE_WASM_STRIP_WRITER=TRUE\n        elif test \"$with_main_module\" = \"writer\"; then\n            ENABLE_WASM_STRIP_CALC=TRUE\n        fi\n    fi\nelse\n    CROSS_COMPILING=\n    BUILD_TYPE=\"$BUILD_TYPE NATIVE\"\nfi\nAC_SUBST(CROSS_COMPILING)\nAC_SUBST(ENABLE_WASM_STRIP)\nAC_SUBST(ENABLE_WASM_STRIP_WRITER)\nAC_SUBST(ENABLE_WASM_STRIP_CALC)\n\nif test \"$enable_emscripten_jspi\" = yes; then\n    ENABLE_EMSCRIPTEN_JSPI=TRUE\n    AC_DEFINE(HAVE_EMSCRIPTEN_JSPI)\nelse\n    ENABLE_EMSCRIPTEN_JSPI=\nfi\nAC_SUBST(ENABLE_EMSCRIPTEN_JSPI)\n\nif test \"$enable_emscripten_proxy_to_pthread\" = yes; then\n    ENABLE_EMSCRIPTEN_PROXY_TO_PTHREAD=TRUE\n    AC_DEFINE(HAVE_EMSCRIPTEN_PROXY_TO_PTHREAD)\nelse\n    ENABLE_EMSCRIPTEN_PROXY_TO_PTHREAD=\nfi\nAC_SUBST(ENABLE_EMSCRIPTEN_PROXY_TO_PTHREAD)\n\nif test \"$enable_emscripten_proxy_posix_sockets\" = yes; then\n    ENABLE_EMSCRIPTEN_PROXY_POSIX_SOCKETS=TRUE\n    AC_DEFINE(HAVE_EMSCRIPTEN_PROXY_POSIX_SOCKETS)\nelse\n    ENABLE_EMSCRIPTEN_PROXY_POSIX_SOCKETS=\nfi\nAC_SUBST(ENABLE_EMSCRIPTEN_PROXY_POSIX_SOCKETS)\n\n# Use -isystem (gcc) if possible, to avoid warnings in 3rd party headers.\n# NOTE: must _not_ be used for bundled external libraries!\nISYSTEM=\nif test \"$GCC\" = \"yes\"; then\n    AC_MSG_CHECKING( for -isystem )\n    save_CFLAGS=$CFLAGS\n    CFLAGS=\"$CFLAGS -isystem /usr/include -Werror\"\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[ return 0; ]])],[ ISYSTEM=\"-isystem \" ],[])\n    CFLAGS=$save_CFLAGS\n    if test -n \"$ISYSTEM\"; then\n        AC_MSG_RESULT(yes)\n    else\n        AC_MSG_RESULT(no)\n    fi\nfi\nif test -z \"$ISYSTEM\"; then\n    # fall back to using -I\n    ISYSTEM=-I\nfi\nAC_SUBST(ISYSTEM)\n\ndnl ===================================================================\ndnl  Check which Visual Studio compiler is used\ndnl ===================================================================\n\nmap_vs_year_to_version()\n{\n    # Return value: $vsversion\n\n    unset vsversion\n\n    case $1 in\n    2019)\n        vsversion=16;;\n    2022)\n        vsversion=17;;\n    2022preview)\n        vsversion=17.13;;\n    *)\n        AC_MSG_ERROR([Assertion failure - invalid argument \"$1\" to map_vs_year_to_version()]);;\n    esac\n}\n\nvs_versions_to_check()\n{\n    # Args: $1 (optional) : versions to check, in the order of preference\n    # Return value: $vsversions\n\n    unset vsversions\n\n    if test -n \"$1\"; then\n        map_vs_year_to_version \"$1\"\n        vsversions=$vsversion\n    else\n        # Default version is 2019\n        vsversions=\"16\"\n    fi\n}\n\nwin_get_env_from_vsdevcmdbat()\n{\n    local WRAPPERBATCHFILEPATH=\"`mktemp -t wrpXXXXXX.bat`\"\n    printf '@set VSCMD_SKIP_SENDTELEMETRY=1\\r\\n' > $WRAPPERBATCHFILEPATH\n    PathFormat \"$VC_PRODUCT_DIR\"\n    printf '@call \"%s/../Common7/Tools/VsDevCmd.bat\" /no_logo\\r\\n' \"$formatted_path\" >> $WRAPPERBATCHFILEPATH\n    # use 'echo.%ENV%' syntax (instead of 'echo %ENV%') to avoid outputting \"ECHO is off.\" in case when ENV is empty or a space\n    printf '@setlocal\\r\\n@echo.%%%s%%\\r\\n@endlocal\\r\\n' \"$1\" >> $WRAPPERBATCHFILEPATH\n    local result\n    if test \"$build_os\" = \"wsl\" -o -n \"$WSL_ONLY_AS_HELPER\"; then\n        result=$(cd /mnt/c && cmd.exe /c $(wslpath -w $WRAPPERBATCHFILEPATH) | tr -d '\\r')\n    else\n        chmod +x $WRAPPERBATCHFILEPATH\n        result=$(\"$WRAPPERBATCHFILEPATH\" | tr -d '\\r')\n    fi\n    rm -f $WRAPPERBATCHFILEPATH\n    printf '%s' \"$result\"\n}\n\nfind_ucrt()\n{\n    reg_get_value_32 \"HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Microsoft SDKs/Windows/v10.0\" \"InstallationFolder\"\n    if test -n \"$regvalue\"; then\n        PathFormat \"$regvalue\"\n        UCRTSDKDIR=$formatted_path_unix\n        reg_get_value_32 \"HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Microsoft SDKs/Windows/v10.0\" \"ProductVersion\"\n        if test -n \"$regvalue\"; then\n            UCRTVERSION=\"$regvalue\".0\n        fi\n\n        # Rest if not exist\n        if ! test -d \"${UCRTSDKDIR}Include/$UCRTVERSION/ucrt\"; then\n          UCRTSDKDIR=\n        fi\n    fi\n    if test -z \"$UCRTSDKDIR\"; then\n        ide_env_dir=\"$VC_PRODUCT_DIR/../Common7/Tools/\"\n        ide_env_file=\"${ide_env_dir}VsDevCmd.bat\"\n        if test -f \"$ide_env_file\"; then\n            PathFormat \"$(win_get_env_from_vsdevcmdbat UniversalCRTSdkDir)\"\n            UCRTSDKDIR=$formatted_path_unix\n            UCRTVERSION=$(win_get_env_from_vsdevcmdbat UCRTVersion)\n            dnl Hack needed at least by tml:\n            if test \"$UCRTVERSION\" = 10.0.15063.0 \\\n                -a ! -f \"${UCRTSDKDIR}Include/10.0.15063.0/um/sqlext.h\" \\\n                -a -f \"${UCRTSDKDIR}Include/10.0.14393.0/um/sqlext.h\"\n            then\n                UCRTVERSION=10.0.14393.0\n            fi\n        else\n          AC_MSG_ERROR([No UCRT found])\n        fi\n    fi\n}\n\nfind_msvc()\n{\n    # Find Visual C++\n    # Args: $1 (optional) : The VS version year\n    # Return values: $vctest, $vcyear, $vctoolset, $vcnumwithdot, $vcbuildnumber\n\n    unset vctest vctoolset vcnumwithdot vcbuildnumber\n\n    vs_versions_to_check \"$1\"\n    if test \"$build_os\" = wsl; then\n        vswhere=\"$PROGRAMFILESX86\"\n        if test -z \"$vswhere\"; then\n            vswhere=\"c:\\\\Program Files (x86)\"\n        fi\n    elif test -n \"$WSL_ONLY_AS_HELPER\"; then\n        vswhere=\"$(perl.exe -e 'print $ENV{\"ProgramFiles(x86)\"}')\"\n    else\n        vswhere=\"$(perl -e 'print $ENV{\"ProgramFiles(x86)\"}')\"\n    fi\n    vswhere+=\"\\\\Microsoft Visual Studio\\\\Installer\\\\vswhere.exe\"\n    PathFormat \"$vswhere\"\n    vswhere=$formatted_path_unix\n    for ver in $vsversions; do\n        vswhereoutput=`$vswhere -version \"@<:@ $ver , $(expr ${ver%%.*} + 1) @:}@\" -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath | head -1`\n        if test -z \"$vswhereoutput\"; then\n            vswhereoutput=`$vswhere -prerelease -version \"@<:@ $ver , $(expr ${ver%%.*} + 1) @:}@\" -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath | head -1`\n        fi\n        # Fall back to all MS products (this includes VC++ Build Tools)\n        if ! test -n \"$vswhereoutput\"; then\n            AC_MSG_CHECKING([VC++ Build Tools and similar])\n            vswhereoutput=`$vswhere -products \\* -version \"@<:@ $ver , $(expr ${ver%%.*} + 1) @:}@\" -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath | head -1`\n        fi\n        if test -n \"$vswhereoutput\"; then\n            PathFormat \"$vswhereoutput\"\n            vctest=$formatted_path_unix\n            break\n        fi\n    done\n\n    if test -n \"$vctest\"; then\n        vcnumwithdot=\"$ver\"\n        if test \"${vcnumwithdot%%.*}\" = \"$vcnumwithdot\"; then\n            vcnumwithdot=$vcnumwithdot.0\n        fi\n        case \"$vcnumwithdot\" in\n        16.0)\n            vcyear=2019\n            vctoolset=v142\n            ;;\n        17.0 | 17.13)\n            vcyear=2022\n            vctoolset=v143\n            ;;\n        esac\n        vcbuildnumber=`ls $vctest/VC/Tools/MSVC -A1r | head -1`\n\n    fi\n}\n\ntest_cl_exe()\n{\n    AC_MSG_CHECKING([$1 compiler])\n\n    CL_EXE_PATH=\"$2/cl.exe\"\n\n    if test ! -f \"$CL_EXE_PATH\"; then\n        if test \"$1\" = \"multi-arch\"; then\n            AC_MSG_WARN([no compiler (cl.exe) in $2])\n            return 1\n        else\n            AC_MSG_ERROR([no compiler (cl.exe) in $2])\n        fi\n    fi\n\n    dnl ===========================================================\n    dnl  Check for the corresponding mspdb*.dll\n    dnl ===========================================================\n\n    # MSVC 15.0 has libraries from 14.0?\n    mspdbnum=\"140\"\n\n    if test ! -e \"$2/mspdb${mspdbnum}.dll\"; then\n        AC_MSG_ERROR([No mspdb${mspdbnum}.dll in $2, Visual Studio installation broken?])\n    fi\n\n    # The compiler has to find its shared libraries\n    OLD_PATH=\"$PATH\"\n    PathFormat \"$2\"\n    PATH=\"$formatted_path_unix:$PATH\"\n\n    if ! \"$CL_EXE_PATH\" -? </dev/null >/dev/null 2>&1; then\n        AC_MSG_ERROR([no compiler (cl.exe) in $2])\n    fi\n\n    PATH=\"$OLD_PATH\"\n\n    AC_MSG_RESULT([$CL_EXE_PATH])\n}\n\nSOLARINC=\nMSBUILD_PATH=\nDEVENV=\nif test \"$_os\" = \"WINNT\"; then\n    AC_MSG_CHECKING([Visual C++])\n    find_msvc \"$with_visual_studio\"\n    if test -z \"$vctest\"; then\n        if test -n \"$with_visual_studio\"; then\n            AC_MSG_ERROR([no Visual Studio $with_visual_studio installation found])\n        else\n            AC_MSG_ERROR([no Visual Studio installation found])\n        fi\n    fi\n    AC_MSG_RESULT([])\n\n    VC_PRODUCT_DIR=\"$vctest/VC\"\n    COMPATH=\"$VC_PRODUCT_DIR/Tools/MSVC/$vcbuildnumber\"\n\n    # $WIN_OTHER_ARCH is a hack to test the x64 compiler on x86, even if it's not multi-arch\n    if test -n \"$WIN_MULTI_ARCH\" -o -n \"$WIN_OTHER_ARCH\"; then\n        MSVC_MULTI_PATH=\"$COMPATH/bin/Host$WIN_BUILD_ARCH/${WIN_MULTI_ARCH}${WIN_OTHER_ARCH}\"\n        test_cl_exe \"multi-arch\" \"$MSVC_MULTI_PATH\"\n        if test $? -ne 0; then\n            WIN_MULTI_ARCH=\"\"\n            WIN_OTHER_ARCH=\"\"\n        fi\n    fi\n\n    if test \"$WIN_BUILD_ARCH\" = \"$WIN_HOST_ARCH\"; then\n        MSVC_BUILD_PATH=\"$COMPATH/bin/Host$WIN_BUILD_ARCH/$WIN_BUILD_ARCH\"\n        test_cl_exe \"build\" \"$MSVC_BUILD_PATH\"\n    fi\n\n    if test \"$WIN_BUILD_ARCH\" != \"$WIN_HOST_ARCH\"; then\n        MSVC_HOST_PATH=\"$COMPATH/bin/Host$WIN_BUILD_ARCH/$WIN_HOST_ARCH\"\n        test_cl_exe \"host\" \"$MSVC_HOST_PATH\"\n    else\n        MSVC_HOST_PATH=\"$MSVC_BUILD_PATH\"\n    fi\n\n    AC_MSG_CHECKING([for short pathname of VC product directory])\n    VC_PRODUCT_DIR=`win_short_path_for_make \"$VC_PRODUCT_DIR\"`\n    AC_MSG_RESULT([$VC_PRODUCT_DIR])\n\n    UCRTSDKDIR=\n    UCRTVERSION=\n\n    AC_MSG_CHECKING([for UCRT location])\n    find_ucrt\n    # find_ucrt errors out if it doesn't find it\n    AC_MSG_RESULT([$UCRTSDKDIR ($UCRTVERSION)])\n    PathFormat \"${UCRTSDKDIR}Include/$UCRTVERSION/ucrt\"\n    ucrtincpath_formatted=$formatted_path\n    # SOLARINC is used for external modules and must be set too.\n    # And no, it's not sufficient to set SOLARINC only, as configure\n    # itself doesn't honour it.\n    SOLARINC=\"$SOLARINC -I$ucrtincpath_formatted\"\n    CFLAGS=\"$CFLAGS -I$ucrtincpath_formatted\"\n    CXXFLAGS=\"$CXXFLAGS -I$ucrtincpath_formatted\"\n    CPPFLAGS=\"$CPPFLAGS -I$ucrtincpath_formatted\"\n\n    AC_SUBST(UCRTSDKDIR)\n    AC_SUBST(UCRTVERSION)\n\n    AC_MSG_CHECKING([for MSBuild.exe location for: $vcnumwithdot])\n    # Find the proper version of MSBuild.exe to use based on the VS version\n    reg_get_value_32 HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/MSBuild/$vcnumwithdot MSBuildOverrideTasksPath\n    if test -z \"$regvalue\" ; then\n        if test \"$WIN_BUILD_ARCH\" != \"x64\"; then\n            regvalue=\"$VC_PRODUCT_DIR/../MSBuild/Current/Bin\"\n        else\n            regvalue=\"$VC_PRODUCT_DIR/../MSBuild/Current/Bin/amd64\"\n        fi\n    fi\n    if test -d \"$regvalue\" ; then\n        MSBUILD_PATH=`win_short_path_for_make \"$regvalue\"`\n        AC_MSG_RESULT([$regvalue])\n    else\n        AC_MSG_ERROR([MSBuild.exe location not found])\n    fi\n\n    # Find the version of devenv.exe\n    PathFormat \"$VC_PRODUCT_DIR/../Common7/IDE/devenv.exe\"\n    DEVENV=\"$formatted_path\"\n    DEVENV_unix=\"$formatted_path_unix\"\n    if test ! -e \"$DEVENV_unix\"; then\n        AC_MSG_WARN([No devenv.exe found - this is expected for VC++ Build Tools])\n    fi\n\n    dnl Save the true MSVC cl.exe for use when CC/CXX is actually clang-cl,\n    dnl needed when building CLR code:\n    if test -z \"$MSVC_CXX\"; then\n        # This gives us a posix path with 8.3 filename restrictions\n        MSVC_CXX=`win_short_path_for_make \"$MSVC_HOST_PATH/cl.exe\"`\n    fi\n\n    if test -z \"$CC\"; then\n        CC=$MSVC_CXX\n        CC_BASE=`first_arg_basename \"$CC\"`\n    fi\n    if test -z \"$CXX\"; then\n        CXX=$MSVC_CXX\n        CXX_BASE=`first_arg_basename \"$CXX\"`\n    fi\n\n    if test -n \"$CC\"; then\n        # Remove /cl.exe from CC case insensitive\n        AC_MSG_NOTICE([found Visual C++ $vcyear])\n\n        PathFormat \"$COMPATH\"\n        COMPATH=\"$formatted_path\"\n        COMPATH_unix=\"$formatted_path_unix\"\n        CPPFLAGS=\"$CPPFLAGS -I$COMPATH/Include\"\n\n        VCVER=$vcnumwithdot\n        VCTOOLSET=$vctoolset\n\n        # The WINDOWS_SDK_ACCEPTABLE_VERSIONS is mostly an educated guess...  Assuming newer ones\n        # are always \"better\", we list them in reverse chronological order.\n\n        case \"$vcnumwithdot\" in\n        16.0 | 17.0 | 17.13)\n            WINDOWS_SDK_ACCEPTABLE_VERSIONS=\"10.0 8.1A 8.1 8.0\"\n            ;;\n        esac\n\n        # The expectation is that --with-windows-sdk should not need to be used\n        if test -n \"$with_windows_sdk\"; then\n            case \" $WINDOWS_SDK_ACCEPTABLE_VERSIONS \" in\n            *\" \"$with_windows_sdk\" \"*)\n                WINDOWS_SDK_ACCEPTABLE_VERSIONS=$with_windows_sdk\n                ;;\n            *)\n                AC_MSG_ERROR([Windows SDK $with_windows_sdk is not known to work with VS $vcyear])\n                ;;\n            esac\n        fi\n\n        # Make AC_COMPILE_IFELSE etc. work (set by AC_PROG_C, which we don't use for MSVC)\n        ac_objext=obj\n        ac_exeext=exe\n\n    else\n        AC_MSG_ERROR([Visual C++ not found after all, huh])\n    fi\n\n    # ERROR if VS version < 16.5\n    AC_MSG_CHECKING([$CC_BASE is at least Visual Studio 2019 version 16.5])\n    AC_COMPILE_IFELSE([AC_LANG_SOURCE([[\n        // See <https://docs.microsoft.com/en-us/cpp/preprocessor/predefined-macros> for mapping\n        // between Visual Studio versions and _MSC_VER:\n        #if _MSC_VER < 1925\n        #error\n        #endif\n    ]])],[AC_MSG_RESULT([yes])],[AC_MSG_ERROR([no])])\n\n    # WARN if VS version < 16.10\n    AC_MSG_CHECKING([$CC_BASE is at least Visual Studio 2019 version 16.10])\n    AC_COMPILE_IFELSE([AC_LANG_SOURCE([[\n        #if _MSC_VER < 1929\n        #error\n        #endif\n    ]])],[vs2019_recommended_version=yes],[vs2019_recommended_version=no])\n\n    if test $vs2019_recommended_version = yes; then\n        AC_MSG_RESULT([yes])\n    else\n        AC_MSG_WARN([no])\n        add_warning \"You should have at least Visual Studio 2019 version 16.10 to avoid build problems. Otherwise, you may face problems with the build of some modules including dragonbox.\"\n    fi\n\n    # Check for 64-bit (cross-)compiler to use to build the 64-bit\n    # version of the Explorer extension (and maybe other small\n    # bits, too) needed when installing a 32-bit LibreOffice on a\n    # 64-bit OS. The 64-bit Explorer extension is a feature that\n    # has been present since long in OOo. Don't confuse it with\n    # building LibreOffice itself as 64-bit code.\n\n    BUILD_X64=\n    CXX_X64_BINARY=\n\n    if test \"$WIN_HOST_ARCH\" = \"x86\" -a -n \"$WIN_OTHER_ARCH\"; then\n        AC_MSG_CHECKING([for the libraries to build the 64-bit Explorer extensions])\n        if test -f \"$COMPATH/atlmfc/lib/x64/atls.lib\" -o \\\n             -f \"$COMPATH/atlmfc/lib/spectre/x64/atls.lib\"\n        then\n            BUILD_X64=TRUE\n            CXX_X64_BINARY=`win_short_path_for_make \"$MSVC_MULTI_PATH/cl.exe\"`\n            AC_MSG_RESULT([found])\n        else\n            AC_MSG_RESULT([not found])\n            AC_MSG_WARN([Installation set will not contain 64-bit Explorer extensions])\n        fi\n    elif test \"$WIN_HOST_ARCH\" = \"x64\"; then\n        CXX_X64_BINARY=$CXX\n    fi\n    AC_SUBST(BUILD_X64)\n\n    # These are passed to the environment and then used in gbuild/platform/com_MSC_class.mk\n    AC_SUBST(CXX_X64_BINARY)\n\n    # Check for 32-bit compiler to use to build the 32-bit TWAIN shim\n    # needed to support TWAIN scan on both 32- and 64-bit systems\n\n    case \"$WIN_HOST_ARCH\" in\n    x64)\n        AC_MSG_CHECKING([for a x86 compiler and libraries for 32-bit binaries required for TWAIN support])\n        if test -n \"$CXX_X86_BINARY\"; then\n            BUILD_X86=TRUE\n            AC_MSG_RESULT([preset])\n        elif test -n \"$WIN_MULTI_ARCH\"; then\n            BUILD_X86=TRUE\n            CXX_X86_BINARY=`win_short_path_for_make \"$MSVC_MULTI_PATH/cl.exe\"`\n            AC_MSG_RESULT([found])\n        else\n            AC_MSG_RESULT([not found])\n            AC_MSG_WARN([Installation set will not contain 32-bit binaries required for TWAIN support])\n        fi\n        ;;\n    x86)\n        BUILD_X86=TRUE\n        CXX_X86_BINARY=$MSVC_CXX\n        ;;\n    esac\n    AC_SUBST(BUILD_X86)\n    AC_SUBST(CXX_X86_BINARY)\nfi\nAC_SUBST(VCVER)\nAC_SUBST(VCTOOLSET)\nAC_SUBST(DEVENV)\nAC_SUBST(MSVC_CXX)\n\nCOM_IS_CLANG=\nAC_MSG_CHECKING([whether the compiler is actually Clang])\nAC_COMPILE_IFELSE([AC_LANG_SOURCE([[\n    #ifndef __clang__\n    you lose\n    #endif\n    int foo=42;\n    ]])],\n    [AC_MSG_RESULT([yes])\n     COM_IS_CLANG=TRUE],\n    [AC_MSG_RESULT([no])])\nAC_SUBST(COM_IS_CLANG)\n\nCLANGVER=\nif test \"$COM_IS_CLANG\" = TRUE; then\n    AC_MSG_CHECKING([whether Clang is new enough])\n    AC_COMPILE_IFELSE([AC_LANG_SOURCE([[\n        #if !defined __apple_build_version__\n        #error\n        #endif\n        ]])],\n        [my_apple_clang=yes],[my_apple_clang=])\n    if test \"$my_apple_clang\" = yes; then\n        AC_MSG_RESULT([assumed yes (Apple Clang)])\n    elif test \"$_os\" = Emscripten; then\n        AC_MSG_RESULT([assumed yes (Emscripten Clang)])\n    else\n        if test \"$_os\" = WINNT; then\n            dnl In which case, assume clang-cl:\n            my_args=\"/EP /TC\"\n        else\n            my_args=\"-E -P\"\n        fi\n        clang_version=`echo __clang_major__.__clang_minor__.__clang_patchlevel__ | $CC $my_args - | sed 's/ //g'`\n        CLANG_FULL_VERSION=`echo __clang_version__ | $CC $my_args -`\n        CLANGVER=`echo $clang_version \\\n            | $AWK -F. '{ print \\$1*10000+(\\$2<100?\\$2:99)*100+(\\$3<100?\\$3:99) }'`\n        if test \"$CLANGVER\" -ge 120000; then\n            AC_MSG_RESULT([yes ($clang_version)])\n        else\n            AC_MSG_ERROR([\"$CLANG_FULL_VERSION\" is too old or unrecognized, must be at least Clang 12])\n        fi\n        AC_DEFINE_UNQUOTED(CLANG_VERSION,$CLANGVER)\n        AC_DEFINE_UNQUOTED(CLANG_FULL_VERSION,$CLANG_FULL_VERSION)\n    fi\nfi\n\nSHOWINCLUDES_PREFIX=\nif test \"$_os\" = WINNT; then\n    dnl We need to guess the prefix of the -showIncludes output, it can be\n    dnl localized\n    AC_MSG_CHECKING([the dependency generation prefix (cl.exe -showIncludes)])\n    echo \"#include <stdlib.h>\" > conftest.c\n    SHOWINCLUDES_PREFIX=`VSLANG=1033 $CC $CFLAGS -c -showIncludes conftest.c 2>/dev/null | \\\n        grep 'stdlib\\.h' | head -n1 | sed 's/ [[[:alpha:]]]:.*//'`\n    rm -f conftest.c conftest.obj\n    if test -z \"$SHOWINCLUDES_PREFIX\"; then\n        AC_MSG_ERROR([cannot determine the -showIncludes prefix])\n    else\n        AC_MSG_RESULT([\"$SHOWINCLUDES_PREFIX\"])\n    fi\nfi\nAC_SUBST(SHOWINCLUDES_PREFIX)\n\n#\n# prefix C with ccache if needed\n#\nif test \"$CCACHE\" != \"\"; then\n    AC_MSG_CHECKING([whether $CC_BASE is already ccached])\n\n    AC_LANG_PUSH([C])\n    save_CFLAGS=$CFLAGS\n    CFLAGS=\"$CFLAGS --ccache-skip -O2\"\n    # msvc does not fail on unknown options, check stdout\n    if test \"$COM\" = MSC; then\n        CFLAGS=\"$CFLAGS -nologo\"\n    fi\n    save_ac_c_werror_flag=$ac_c_werror_flag\n    ac_c_werror_flag=yes\n    dnl an empty program will do, we're checking the compiler flags\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([],[])],\n                      [use_ccache=yes], [use_ccache=no])\n    CFLAGS=$save_CFLAGS\n    ac_c_werror_flag=$save_ac_c_werror_flag\n    if test $use_ccache = yes -a \"${CCACHE##*sccache*}\" != \"\"; then\n        AC_MSG_RESULT([yes])\n    else\n        CC=\"$CCACHE $CC\"\n        CC_BASE=\"ccache $CC_BASE\"\n        AC_MSG_RESULT([no])\n    fi\n    AC_LANG_POP([C])\nfi\n\n# ===================================================================\n# check various GCC options that Clang does not support now but maybe\n# will somewhen in the future, check them even for GCC, so that the\n# flags are set\n# ===================================================================\n\nHAVE_GCC_GGDB2=\nif test \"$GCC\" = \"yes\" -a \"$_os\" != \"Emscripten\"; then\n    AC_MSG_CHECKING([whether $CC_BASE supports -ggdb2])\n    save_CFLAGS=$CFLAGS\n    CFLAGS=\"$CFLAGS -Werror -ggdb2\"\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([[]], [[ return 0; ]])],[ HAVE_GCC_GGDB2=TRUE ],[])\n    CFLAGS=$save_CFLAGS\n    if test \"$HAVE_GCC_GGDB2\" = \"TRUE\"; then\n        AC_MSG_RESULT([yes])\n    else\n        AC_MSG_RESULT([no])\n    fi\n\n    if test \"$host_cpu\" = \"m68k\"; then\n        AC_MSG_CHECKING([whether $CC_BASE supports -mlong-jump-table-offsets])\n        save_CFLAGS=$CFLAGS\n        CFLAGS=\"$CFLAGS -Werror -mlong-jump-table-offsets\"\n        AC_LINK_IFELSE([AC_LANG_PROGRAM([[]], [[ return 0; ]])],[ HAVE_GCC_LONG_JUMP_TABLE_OFFSETS=TRUE ],[])\n        CFLAGS=$save_CFLAGS\n        if test \"$HAVE_GCC_LONG_JUMP_TABLE_OFFSETS\" = \"TRUE\"; then\n            AC_MSG_RESULT([yes])\n        else\n            AC_MSG_ERROR([no])\n        fi\n    fi\nfi\nAC_SUBST(HAVE_GCC_GGDB2)\n\ndnl ===================================================================\ndnl  Test the gcc version\ndnl ===================================================================\nif test \"$GCC\" = \"yes\" -a -z \"$COM_IS_CLANG\"; then\n    AC_MSG_CHECKING([the GCC version])\n    _gcc_version=`$CC -dumpfullversion`\n    gcc_full_version=$(printf '%s' \"$_gcc_version\" | \\\n        $AWK -F. '{ print $1*10000+$2*100+(NF<3?1:$3) }')\n    GCC_VERSION=`echo $_gcc_version | $AWK -F. '{ print \\$1*100+\\$2 }'`\n\n    AC_MSG_RESULT([gcc $_gcc_version ($gcc_full_version)])\n\n    if test \"$gcc_full_version\" -lt 120000; then\n        AC_MSG_ERROR([GCC $_gcc_version is too old, must be at least GCC 12])\n    fi\nelse\n    # Explicitly force GCC_VERSION to be empty, even for Clang, to check incorrect uses.\n    # GCC version should generally be checked only when handling GCC-specific bugs, for testing\n    # things like features configure checks should be used, otherwise they may e.g. fail with Clang\n    # (which reports itself as GCC 4.2.1).\n    GCC_VERSION=\nfi\nAC_SUBST(GCC_VERSION)\n\ndnl Set the ENABLE_DBGUTIL variable\ndnl ===================================================================\nAC_MSG_CHECKING([whether to build with additional debug utilities])\nif test -n \"$enable_dbgutil\" -a \"$enable_dbgutil\" != \"no\"; then\n    ENABLE_DBGUTIL=\"TRUE\"\n    # this is an extra var so it can have different default on different MSVC\n    # versions (in case there are version specific problems with it)\n    MSVC_USE_DEBUG_RUNTIME=\"TRUE\"\n\n    AC_MSG_RESULT([yes])\n    # cppunit and graphite expose STL in public headers\n    if test \"$with_system_cppunit\" = \"yes\"; then\n        AC_MSG_ERROR([--with-system-cppunit conflicts with --enable-dbgutil])\n    else\n        with_system_cppunit=no\n    fi\n    if test \"$with_system_graphite\" = \"yes\"; then\n        AC_MSG_ERROR([--with-system-graphite conflicts with --enable-dbgutil])\n    else\n        with_system_graphite=no\n    fi\n    if test \"$with_system_orcus\" = \"yes\"; then\n        AC_MSG_ERROR([--with-system-orcus conflicts with --enable-dbgutil])\n    else\n        with_system_orcus=no\n    fi\n    if test \"$with_system_libcmis\" = \"yes\"; then\n        AC_MSG_ERROR([--with-system-libcmis conflicts with --enable-dbgutil])\n    else\n        with_system_libcmis=no\n    fi\n    if test \"$with_system_hunspell\" = \"yes\"; then\n        AC_MSG_ERROR([--with-system-hunspell conflicts with --enable-dbgutil])\n    else\n        with_system_hunspell=no\n    fi\n    if test \"$with_system_gpgmepp\" = \"yes\"; then\n        AC_MSG_ERROR([--with-system-gpgmepp conflicts with --enable-dbgutil])\n    else\n        with_system_gpgmepp=no\n    fi\n    if test \"$with_system_zxing\" = \"yes\"; then\n        AC_MSG_ERROR([--with-system-zxing conflicts with --enable-dbgutil])\n    else\n        with_system_zxing=no\n    fi\n    if test \"$with_system_poppler\" = \"yes\"; then\n        AC_MSG_ERROR([--with-system-poppler conflicts with --enable-dbgutil])\n    else\n        with_system_poppler=no\n    fi\n    # As mixing system libwps and non-system libnumbertext or vice versa likely causes trouble (see\n    # 603074c5f2b84de8a24593faf807da784b040625 \"Pass _GLIBCXX_DEBUG into external/libwps\" and the\n    # mail thread starting at <https://gcc.gnu.org/ml/gcc/2018-05/msg00057.html> \"libstdc++: ODR\n    # violation when using std::regex with and without -D_GLIBCXX_DEBUG\"), simply make sure neither\n    # of those two is using the system variant:\n    if test \"$with_system_libnumbertext\" = \"yes\"; then\n        AC_MSG_ERROR([--with-system-libnumbertext conflicts with --enable-dbgutil])\n    else\n        with_system_libnumbertext=no\n    fi\n    if test \"$with_system_libwps\" = \"yes\"; then\n        AC_MSG_ERROR([--with-system-libwps conflicts with --enable-dbgutil])\n    else\n        with_system_libwps=no\n    fi\nelse\n    ENABLE_DBGUTIL=\"\"\n    MSVC_USE_DEBUG_RUNTIME=\"\"\n    AC_MSG_RESULT([no])\nfi\nAC_SUBST(ENABLE_DBGUTIL)\nAC_SUBST(MSVC_USE_DEBUG_RUNTIME)\n\ndnl Set the ENABLE_DEBUG variable.\ndnl ===================================================================\nif test -n \"$enable_debug\" && test \"$enable_debug\" != \"yes\" && test \"$enable_debug\" != \"no\"; then\n    AC_MSG_ERROR([--enable-debug now accepts only yes or no, use --enable-symbols])\nfi\nif test -n \"$ENABLE_DBGUTIL\" -a \"$enable_debug\" = \"no\"; then\n    if test -z \"$libo_fuzzed_enable_debug\"; then\n        AC_MSG_ERROR([--disable-debug cannot be used with --enable-dbgutil])\n    else\n        AC_MSG_NOTICE([Resetting --enable-debug=yes])\n        enable_debug=yes\n    fi\nfi\n\nAC_MSG_CHECKING([whether to do a debug build])\nif test -n \"$ENABLE_DBGUTIL\" -o \\( -n \"$enable_debug\" -a \"$enable_debug\" != \"no\" \\) ; then\n    ENABLE_DEBUG=\"TRUE\"\n    if test -n \"$ENABLE_DBGUTIL\" ; then\n        AC_MSG_RESULT([yes (dbgutil)])\n    else\n        AC_MSG_RESULT([yes])\n    fi\nelse\n    ENABLE_DEBUG=\"\"\n    AC_MSG_RESULT([no])\nfi\nAC_SUBST(ENABLE_DEBUG)\n\ndnl ===================================================================\ndnl Select the linker to use (gold/lld/ld.bfd/mold).\ndnl This is done only after compiler checks (need to know if Clang is\ndnl used, for different defaults) and after checking if a debug build\ndnl is wanted (non-debug builds get the default linker if not explicitly\ndnl specified otherwise).\ndnl All checks for linker features/options should come after this.\ndnl ===================================================================\ncheck_use_ld()\n{\n    use_ld=-fuse-ld=${1%%:*}\n    use_ld_path=${1#*:}\n    if test \"$use_ld_path\" != \"$1\"; then\n        if test \"$COM_IS_CLANG\" = TRUE; then\n            if test \"$CLANGVER\" -ge 120000; then\n                use_ld=\"${use_ld} --ld-path=${use_ld_path}\"\n            else\n                use_ld=\"-fuse-ld=${use_ld_path}\"\n            fi\n        else\n            # I tried to use gcc's '-B<path>' and a directory + symlink setup in\n            # $BUILDDIR, but libtool always filtered-out that option, so gcc wouldn't\n            # pickup the alternative linker, when called by libtool for linking.\n            # For mold, one can use LD_PRELOAD=/usr/lib/mold/mold-wrapper.so instead.\n            AC_MSG_ERROR([A linker path is just supported with clang, because of libtool's -B filtering!])\n        fi\n    fi\n    use_ld_fail_if_error=$2\n    use_ld_ok=\n    AC_MSG_CHECKING([for $use_ld linker support])\n    use_ld_ldflags_save=\"$LDFLAGS\"\n    LDFLAGS=\"$LDFLAGS $use_ld\"\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([\n#include <stdio.h>\n        ],[\nprintf (\"hello world\\n\");\n        ])], USE_LD=$use_ld, [])\n    if test -n \"$USE_LD\"; then\n        AC_MSG_RESULT( yes )\n        use_ld_ok=yes\n    else\n        if test -n \"$use_ld_fail_if_error\"; then\n            AC_MSG_ERROR( no )\n        else\n            AC_MSG_RESULT( no )\n        fi\n    fi\n    if test -n \"$use_ld_ok\"; then\n        dnl keep the value of LDFLAGS\n        return 0\n    fi\n    LDFLAGS=\"$use_ld_ldflags_save\"\n    return 1\n}\nUSE_LD=\nif test \"$enable_ld\" != \"no\"; then\n    if test \"$GCC\" = \"yes\" -a \"$_os\" != \"Emscripten\"; then\n        if test -n \"$enable_ld\"; then\n            check_use_ld \"$enable_ld\" fail_if_error\n        elif test -z \"$ENABLE_DEBUG$ENABLE_DBGUTIL\"; then\n            dnl non-debug builds default to the default linker\n            true\n        elif test -n \"$COM_IS_CLANG\"; then\n            check_use_ld lld\n            if test $? -ne 0; then\n                check_use_ld gold\n                if test $? -ne 0; then\n                    check_use_ld mold\n                fi\n            fi\n        else\n            # For gcc first try gold, new versions also support lld/mold.\n            check_use_ld gold\n            if test $? -ne 0; then\n                check_use_ld lld\n                if test $? -ne 0; then\n                    check_use_ld mold\n                fi\n            fi\n        fi\n        ld_output=$(echo 'int main() { return 0; }' | $CC -Wl,-v -x c -o conftest.out - $CFLAGS $LDFLAGS 2>/dev/null)\n        rm conftest.out\n        ld_used=$(echo \"$ld_output\" | grep -E '(^GNU gold|^GNU ld|^LLD|^mold)')\n        if test -z \"$ld_used\"; then\n            ld_used=\"unknown\"\n        fi\n        AC_MSG_CHECKING([for linker that is used])\n        AC_MSG_RESULT([$ld_used])\n        if test -n \"$ENABLE_DEBUG$ENABLE_DBGUTIL\"; then\n            if echo \"$ld_used\" | grep -q \"^GNU ld\"; then\n                AC_MSG_WARN([The default GNU linker is slow, consider using LLD, mold or the GNU gold linker.])\n                add_warning \"The default GNU linker is slow, consider using LLD, mold or the GNU gold linker.\"\n            fi\n        fi\n    else\n        if test \"$enable_ld\" = \"yes\"; then\n            AC_MSG_ERROR([--enable-ld not supported])\n        fi\n    fi\nfi\nAC_SUBST(USE_LD)\nAC_SUBST(LD)\n\nHAVE_LD_BSYMBOLIC_FUNCTIONS=\nif test \"$GCC\" = \"yes\" -a \"$_os\" != Emscripten ; then\n    AC_MSG_CHECKING([for -Bsymbolic-functions linker support])\n    bsymbolic_functions_ldflags_save=$LDFLAGS\n    LDFLAGS=\"$LDFLAGS -Wl,-Bsymbolic-functions\"\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([\n#include <stdio.h>\n        ],[\nprintf (\"hello world\\n\");\n        ])], HAVE_LD_BSYMBOLIC_FUNCTIONS=TRUE, [])\n    if test \"$HAVE_LD_BSYMBOLIC_FUNCTIONS\" = \"TRUE\"; then\n        AC_MSG_RESULT( found )\n    else\n        AC_MSG_RESULT( not found )\n    fi\n    LDFLAGS=$bsymbolic_functions_ldflags_save\nfi\nAC_SUBST(HAVE_LD_BSYMBOLIC_FUNCTIONS)\n\nLD_GC_SECTIONS=\nif test \"$GCC\" = \"yes\"; then\n    for flag in \"--gc-sections\" \"-dead_strip\"; do\n        AC_MSG_CHECKING([for $flag linker support])\n        ldflags_save=$LDFLAGS\n        LDFLAGS=\"$LDFLAGS -Wl,$flag\"\n        AC_LINK_IFELSE([AC_LANG_PROGRAM([\n#include <stdio.h>\n            ],[\nprintf (\"hello world\\n\");\n            ])],[\n            LD_GC_SECTIONS=\"-Wl,$flag\"\n            AC_MSG_RESULT( found )\n            ], [\n            AC_MSG_RESULT( not found )\n            ])\n        LDFLAGS=$ldflags_save\n        if test -n \"$LD_GC_SECTIONS\"; then\n            break\n        fi\n    done\nfi\nAC_SUBST(LD_GC_SECTIONS)\n\nHAVE_EXTERNAL_DWARF=\nif test \"$enable_split_debug\" != no; then\n    use_split_debug=\n    if test -n \"$ENABLE_LTO\"; then\n        : # Inherently incompatible, since no debug info is created while compiling, GCC complains.\n    elif test \"$enable_split_debug\" = yes; then\n        use_split_debug=1\n    dnl Currently by default enabled only on Linux, feel free to set test_split_debug above also for other platforms.\n    elif test \"$test_split_debug\" = \"yes\" -a -n \"$ENABLE_DEBUG$ENABLE_DBGUTIL\"; then\n        use_split_debug=1\n    fi\n    if test -n \"$use_split_debug\"; then\n        if test \"$_os\" = \"Emscripten\"; then\n            TEST_CC_FLAG='-gsplit-dwarf -gpubnames'\n        else\n            TEST_CC_FLAG=-gsplit-dwarf\n        fi\n        AC_MSG_CHECKING([whether $CC_BASE supports $TEST_CC_FLAG])\n        save_CFLAGS=$CFLAGS\n        CFLAGS=\"$CFLAGS -Werror $TEST_CC_FLAG\"\n        AC_LINK_IFELSE([AC_LANG_PROGRAM([[]], [[ return 0; ]])],[ HAVE_EXTERNAL_DWARF=TRUE ],[])\n        CFLAGS=$save_CFLAGS\n        if test \"$HAVE_EXTERNAL_DWARF\" = \"TRUE\"; then\n            AC_MSG_RESULT([yes])\n        else\n            if test \"$enable_split_debug\" = yes; then\n                AC_MSG_ERROR([no])\n            else\n                AC_MSG_RESULT([no])\n            fi\n        fi\n    fi\n    if test -z \"$HAVE_EXTERNAL_DWARF\" -a \"$test_split_debug\" = \"yes\" -a -n \"$use_split_debug\"; then\n        AC_MSG_WARN([Compiler is not capable of creating split debug info, linking will require more time and disk space.])\n        add_warning \"Compiler is not capable of creating split debug info, linking will require more time and disk space.\"\n    fi\nfi\nAC_SUBST(HAVE_EXTERNAL_DWARF)\n\nHAVE_CLANG_DEBUG_INFO_KIND_CONSTRUCTOR=\nAC_MSG_CHECKING([whether $CC_BASE supports -Xclang -debug-info-kind=constructor])\nsave_CFLAGS=$CFLAGS\nCFLAGS=\"$CFLAGS -Werror -Xclang -debug-info-kind=constructor\"\nAC_LINK_IFELSE([AC_LANG_PROGRAM([[]], [[ return 0; ]])],[ HAVE_CLANG_DEBUG_INFO_KIND_CONSTRUCTOR=TRUE ],[])\nCFLAGS=$save_CFLAGS\nif test \"$HAVE_CLANG_DEBUG_INFO_KIND_CONSTRUCTOR\" = \"TRUE\"; then\n    AC_MSG_RESULT([yes])\nelse\n    AC_MSG_RESULT([no])\nfi\nAC_SUBST(HAVE_CLANG_DEBUG_INFO_KIND_CONSTRUCTOR)\n\nENABLE_GDB_INDEX=\nif test \"$enable_gdb_index\" != \"no\"; then\n    dnl Currently by default enabled only on Linux, feel free to set test_gdb_index above also for other platforms.\n    if test \"$enable_gdb_index\" = yes -o \\( \"$test_gdb_index\" = \"yes\" -a -n \"$ENABLE_DEBUG$ENABLE_DBGUTIL\" \\); then\n        AC_MSG_CHECKING([whether $CC_BASE supports -ggnu-pubnames])\n        save_CFLAGS=$CFLAGS\n        CFLAGS=\"$CFLAGS -Werror -g -ggnu-pubnames\"\n        have_ggnu_pubnames=\n        AC_LINK_IFELSE([AC_LANG_PROGRAM([[]], [[ return 0; ]])],[have_ggnu_pubnames=TRUE],[have_ggnu_pubnames=])\n        if test \"$have_ggnu_pubnames\" != \"TRUE\"; then\n            if test \"$enable_gdb_index\" = \"yes\"; then\n                AC_MSG_ERROR([no, --enable-gdb-index not supported])\n            else\n                AC_MSG_RESULT( no )\n            fi\n        else\n            AC_MSG_RESULT( yes )\n            AC_MSG_CHECKING([whether $CC_BASE supports -Wl,--gdb-index])\n            ldflags_save=$LDFLAGS\n            LDFLAGS=\"$LDFLAGS -Wl,--gdb-index\"\n            AC_LINK_IFELSE([AC_LANG_PROGRAM([\n#include <stdio.h>\n                ],[\nprintf (\"hello world\\n\");\n                ])], ENABLE_GDB_INDEX=TRUE, [])\n            if test \"$ENABLE_GDB_INDEX\" = \"TRUE\"; then\n                AC_MSG_RESULT( yes )\n            else\n                if test \"$enable_gdb_index\" = \"yes\"; then\n                    AC_MSG_ERROR( no )\n                else\n                    AC_MSG_RESULT( no )\n                fi\n            fi\n            LDFLAGS=$ldflags_save\n        fi\n        CFLAGS=$save_CFLAGS\n        fi\n    if test -z \"$ENABLE_GDB_INDEX\" -a \"$test_gdb_index\" = \"yes\" -a -n \"$ENABLE_DEBUG$ENABLE_DBGUTIL\"; then\n        AC_MSG_WARN([Linker is not capable of creating gdb index, debugger startup will be slow.])\n        add_warning \"Linker is not capable of creating gdb index, debugger startup will be slow.\"\n    fi\nfi\nAC_SUBST(ENABLE_GDB_INDEX)\n\nif test -z \"$enable_sal_log\" && test \"$ENABLE_DEBUG\" = TRUE; then\n    enable_sal_log=yes\nfi\nif test \"$enable_sal_log\" = yes; then\n    ENABLE_SAL_LOG=TRUE\nfi\nAC_SUBST(ENABLE_SAL_LOG)\n\ndnl Check for enable symbols option\ndnl ===================================================================\nAC_MSG_CHECKING([whether to generate debug information])\nif test -z \"$enable_symbols\"; then\n    if test -n \"$ENABLE_DEBUG$ENABLE_DBGUTIL\"; then\n        enable_symbols=yes\n    else\n        enable_symbols=no\n    fi\nfi\nif test \"$enable_symbols\" = yes; then\n    ENABLE_SYMBOLS_FOR=all\n    AC_MSG_RESULT([yes])\nelif test \"$enable_symbols\" = no; then\n    ENABLE_SYMBOLS_FOR=\n    AC_MSG_RESULT([no])\nelse\n    # Selective debuginfo.\n    ENABLE_SYMBOLS_FOR=\"$enable_symbols\"\n    AC_MSG_RESULT([for \"$enable_symbols\"])\nfi\nAC_SUBST(ENABLE_SYMBOLS_FOR)\n\nif test -n \"$with_android_ndk\" -a \\( -n \"$ENABLE_DEBUG\" -o -n \"$ENABLE_DBGUTIL\" \\) -a \"$ENABLE_SYMBOLS_FOR\" = \"all\"; then\n    # Building on Android with full symbols: without enough memory the linker never finishes currently.\n    AC_MSG_CHECKING([whether enough memory is available for linking])\n    mem_size=$(grep -o 'MemTotal: *.\\+ kB' /proc/meminfo | sed 's/MemTotal: *\\(.\\+\\) kB/\\1/')\n    # Check for 15GB, as Linux reports a bit less than the physical memory size.\n    if test -n \"$mem_size\" -a $mem_size -lt 15728640; then\n        AC_MSG_ERROR([building with full symbols and less than 16GB of memory is not supported])\n    else\n        AC_MSG_RESULT([yes])\n    fi\nfi\n\nENABLE_OPTIMIZED=\nENABLE_OPTIMIZED_DEBUG=\nAC_MSG_CHECKING([whether to compile with optimization flags])\nif test -z \"$enable_optimized\"; then\n    if test -n \"$ENABLE_DEBUG$ENABLE_DBGUTIL\"; then\n        enable_optimized=no\n    else\n        enable_optimized=yes\n    fi\nfi\nif test \"$enable_optimized\" = yes; then\n    ENABLE_OPTIMIZED=TRUE\n    AC_MSG_RESULT([yes])\nelif test \"$enable_optimized\" = debug; then\n    ENABLE_OPTIMIZED_DEBUG=TRUE\n    AC_MSG_RESULT([yes (debug)])\n    HAVE_GCC_OG=\n    if test \"$GCC\" = \"yes\" -a \"$_os\" != \"Emscripten\"; then\n        AC_MSG_CHECKING([whether $CC_BASE supports -Og])\n        save_CFLAGS=$CFLAGS\n        CFLAGS=\"$CFLAGS -Werror -Og\"\n        AC_LINK_IFELSE([AC_LANG_PROGRAM([[]], [[ return 0; ]])],[ HAVE_GCC_OG=TRUE ],[])\n        CFLAGS=$save_CFLAGS\n        if test \"$HAVE_GCC_OG\" = \"TRUE\"; then\n            AC_MSG_RESULT([yes])\n        else\n            AC_MSG_RESULT([no])\n        fi\n    fi\n    if test -z \"$HAVE_GCC_OG\" -a \"$_os\" != \"Emscripten\"; then\n        AC_MSG_ERROR([The compiler does not support optimizations suitable for debugging.])\n    fi\nelse\n    AC_MSG_RESULT([no])\nfi\nAC_SUBST(ENABLE_OPTIMIZED)\nAC_SUBST(ENABLE_OPTIMIZED_DEBUG)\n\n#\n# determine CPUNAME, OS, ...\n#\ncase \"$host_os\" in\n\ncygwin*|wsl*)\n    # Already handled\n    ;;\n\ndarwin*)\n    COM=GCC\n    OS=MACOSX\n    RTL_OS=MacOSX\n    P_SEP=:\n\n    case \"$host_cpu\" in\n    aarch64|arm64)\n        if test \"$enable_ios_simulator\" = \"yes\"; then\n            OS=iOS\n        else\n            CPUNAME=AARCH64\n            RTL_ARCH=AARCH64\n            PLATFORMID=macosx_aarch64\n        fi\n        ;;\n    x86_64)\n        if test \"$enable_ios_simulator\" = \"yes\"; then\n            OS=iOS\n        fi\n        CPUNAME=X86_64\n        RTL_ARCH=X86_64\n        PLATFORMID=macosx_x86_64\n        ;;\n    *)\n        AC_MSG_ERROR([Unsupported host_cpu $host_cpu for host_os $host_os])\n        ;;\n    esac\n    ;;\n\nios*)\n    COM=GCC\n    OS=iOS\n    RTL_OS=iOS\n    P_SEP=:\n\n    case \"$host_cpu\" in\n    aarch64|arm64)\n        if test \"$enable_ios_simulator\" = \"yes\"; then\n            AC_MSG_ERROR([iOS simulator is only available in macOS not iOS])\n        fi\n        ;;\n    *)\n        AC_MSG_ERROR([Unsupported host_cpu $host_cpu for host_os $host_os])\n        ;;\n    esac\n    CPUNAME=AARCH64\n    RTL_ARCH=AARCH64\n    PLATFORMID=ios_arm64\n    ;;\n\ndragonfly*)\n    COM=GCC\n    OS=DRAGONFLY\n    RTL_OS=DragonFly\n    P_SEP=:\n\n    case \"$host_cpu\" in\n    i*86)\n        CPUNAME=INTEL\n        RTL_ARCH=x86\n        PLATFORMID=dragonfly_x86\n        ;;\n    x86_64)\n        CPUNAME=X86_64\n        RTL_ARCH=X86_64\n        PLATFORMID=dragonfly_x86_64\n        ;;\n    *)\n        AC_MSG_ERROR([Unsupported host_cpu $host_cpu for host_os $host_os])\n        ;;\n    esac\n    ;;\n\nfreebsd*)\n    COM=GCC\n    RTL_OS=FreeBSD\n    OS=FREEBSD\n    P_SEP=:\n\n    case \"$host_cpu\" in\n    aarch64)\n        CPUNAME=AARCH64\n        PLATFORMID=freebsd_aarch64\n        RTL_ARCH=AARCH64\n        ;;\n    i*86)\n        CPUNAME=INTEL\n        RTL_ARCH=x86\n        PLATFORMID=freebsd_x86\n        ;;\n    x86_64|amd64)\n        CPUNAME=X86_64\n        RTL_ARCH=X86_64\n        PLATFORMID=freebsd_x86_64\n        ;;\n    powerpc64)\n        CPUNAME=POWERPC64\n        RTL_ARCH=PowerPC_64\n        PLATFORMID=freebsd_powerpc64\n        ;;\n    powerpc|powerpcspe)\n        CPUNAME=POWERPC\n        RTL_ARCH=PowerPC\n        PLATFORMID=freebsd_powerpc\n        ;;\n    *)\n        AC_MSG_ERROR([Unsupported host_cpu $host_cpu for host_os $host_os])\n        ;;\n    esac\n    ;;\n\nhaiku*)\n    COM=GCC\n    GUIBASE=haiku\n    RTL_OS=Haiku\n    OS=HAIKU\n    P_SEP=:\n\n    case \"$host_cpu\" in\n    i*86)\n        CPUNAME=INTEL\n        RTL_ARCH=x86\n        PLATFORMID=haiku_x86\n        ;;\n    x86_64|amd64)\n        CPUNAME=X86_64\n        RTL_ARCH=X86_64\n        PLATFORMID=haiku_x86_64\n        ;;\n    *)\n        AC_MSG_ERROR([Unsupported host_cpu $host_cpu for host_os $host_os])\n        ;;\n    esac\n    ;;\n\nkfreebsd*)\n    COM=GCC\n    OS=LINUX\n    RTL_OS=kFreeBSD\n    P_SEP=:\n\n    case \"$host_cpu\" in\n\n    i*86)\n        CPUNAME=INTEL\n        RTL_ARCH=x86\n        PLATFORMID=kfreebsd_x86\n        ;;\n    x86_64)\n        CPUNAME=X86_64\n        RTL_ARCH=X86_64\n        PLATFORMID=kfreebsd_x86_64\n        ;;\n    *)\n        AC_MSG_ERROR([Unsupported host_cpu $host_cpu for host_os $host_os])\n        ;;\n    esac\n    ;;\n\nlinux-gnu*|linux-musl*)\n    COM=GCC\n    OS=LINUX\n    RTL_OS=Linux\n    P_SEP=:\n\n    case \"$host_cpu\" in\n\n    aarch64)\n        CPUNAME=AARCH64\n        PLATFORMID=linux_aarch64\n        RTL_ARCH=AARCH64\n        EPM_FLAGS=\"-a arm64\"\n        ;;\n    alpha)\n        CPUNAME=AXP\n        RTL_ARCH=ALPHA\n        PLATFORMID=linux_alpha\n        ;;\n    arm*)\n        CPUNAME=ARM\n        EPM_FLAGS=\"-a arm\"\n        RTL_ARCH=ARM_EABI\n        PLATFORMID=linux_arm_eabi\n        case \"$host_cpu\" in\n        arm*-linux)\n            RTL_ARCH=ARM_OABI\n            PLATFORMID=linux_arm_oabi\n            ;;\n        esac\n        ;;\n    hppa)\n        CPUNAME=HPPA\n        RTL_ARCH=HPPA\n        EPM_FLAGS=\"-a hppa\"\n        PLATFORMID=linux_hppa\n        ;;\n    i*86)\n        CPUNAME=INTEL\n        RTL_ARCH=x86\n        PLATFORMID=linux_x86\n        ;;\n    ia64)\n        CPUNAME=IA64\n        RTL_ARCH=IA64\n        PLATFORMID=linux_ia64\n        ;;\n    mips)\n        CPUNAME=MIPS\n        RTL_ARCH=MIPS_EB\n        EPM_FLAGS=\"-a mips\"\n        PLATFORMID=linux_mips_eb\n        ;;\n    mips64)\n        CPUNAME=MIPS64\n        RTL_ARCH=MIPS64_EB\n        EPM_FLAGS=\"-a mips64\"\n        PLATFORMID=linux_mips64_eb\n        ;;\n    mips64el)\n        CPUNAME=MIPS64\n        RTL_ARCH=MIPS64_EL\n        EPM_FLAGS=\"-a mips64el\"\n        PLATFORMID=linux_mips64_el\n        ;;\n    mipsel)\n        CPUNAME=MIPS\n        RTL_ARCH=MIPS_EL\n        EPM_FLAGS=\"-a mipsel\"\n        PLATFORMID=linux_mips_el\n        ;;\n    riscv64)\n        CPUNAME=RISCV64\n        RTL_ARCH=RISCV64\n        EPM_FLAGS=\"-a riscv64\"\n        PLATFORMID=linux_riscv64\n        ;;\n    m68k)\n        CPUNAME=M68K\n        RTL_ARCH=M68K\n        PLATFORMID=linux_m68k\n        ;;\n    powerpc)\n        CPUNAME=POWERPC\n        RTL_ARCH=PowerPC\n        PLATFORMID=linux_powerpc\n        ;;\n    powerpc64)\n        CPUNAME=POWERPC64\n        RTL_ARCH=PowerPC_64\n        PLATFORMID=linux_powerpc64\n        ;;\n    powerpc64le)\n        CPUNAME=POWERPC64\n        RTL_ARCH=PowerPC_64_LE\n        PLATFORMID=linux_powerpc64_le\n        ;;\n    sparc)\n        CPUNAME=SPARC\n        RTL_ARCH=SPARC\n        PLATFORMID=linux_sparc\n        ;;\n    sparc64)\n        CPUNAME=SPARC64\n        RTL_ARCH=SPARC64\n        PLATFORMID=linux_sparc64\n        ;;\n    s390x)\n        CPUNAME=S390X\n        RTL_ARCH=S390x\n        PLATFORMID=linux_s390x\n        ;;\n    x86_64)\n        CPUNAME=X86_64\n        RTL_ARCH=X86_64\n        PLATFORMID=linux_x86_64\n        ;;\n    loongarch64)\n        CPUNAME=LOONGARCH64\n        RTL_ARCH=LOONGARCH64\n        PLATFORMID=linux_loongarch64\n        ;;\n    *)\n        AC_MSG_ERROR([Unsupported host_cpu $host_cpu for host_os $host_os])\n        ;;\n    esac\n    ;;\n\nlinux-android*)\n    COM=GCC\n    OS=ANDROID\n    RTL_OS=Android\n    P_SEP=:\n\n    case \"$host_cpu\" in\n\n    arm|armel)\n        CPUNAME=ARM\n        RTL_ARCH=ARM_EABI\n        PLATFORMID=android_arm_eabi\n        ;;\n    aarch64)\n        CPUNAME=AARCH64\n        RTL_ARCH=AARCH64\n        PLATFORMID=android_aarch64\n        ;;\n    i*86)\n        CPUNAME=INTEL\n        RTL_ARCH=x86\n        PLATFORMID=android_x86\n        ;;\n    x86_64)\n        CPUNAME=X86_64\n        RTL_ARCH=X86_64\n        PLATFORMID=android_x86_64\n        ;;\n    *)\n        AC_MSG_ERROR([Unsupported host_cpu $host_cpu for host_os $host_os])\n        ;;\n    esac\n    ;;\n\n*netbsd*)\n    COM=GCC\n    OS=NETBSD\n    RTL_OS=NetBSD\n    P_SEP=:\n\n    case \"$host_cpu\" in\n    i*86)\n        CPUNAME=INTEL\n        RTL_ARCH=x86\n        PLATFORMID=netbsd_x86\n        ;;\n    powerpc)\n        CPUNAME=POWERPC\n        RTL_ARCH=PowerPC\n        PLATFORMID=netbsd_powerpc\n        ;;\n    sparc)\n        CPUNAME=SPARC\n        RTL_ARCH=SPARC\n        PLATFORMID=netbsd_sparc\n        ;;\n    x86_64)\n        CPUNAME=X86_64\n        RTL_ARCH=X86_64\n        PLATFORMID=netbsd_x86_64\n        ;;\n    *)\n        AC_MSG_ERROR([Unsupported host_cpu $host_cpu for host_os $host_os])\n        ;;\n    esac\n    ;;\n\nopenbsd*)\n    COM=GCC\n    OS=OPENBSD\n    RTL_OS=OpenBSD\n    P_SEP=:\n\n    case \"$host_cpu\" in\n    i*86)\n        CPUNAME=INTEL\n        RTL_ARCH=x86\n        PLATFORMID=openbsd_x86\n        ;;\n    x86_64)\n        CPUNAME=X86_64\n        RTL_ARCH=X86_64\n        PLATFORMID=openbsd_x86_64\n        ;;\n    *)\n        AC_MSG_ERROR([Unsupported host_cpu $host_cpu for host_os $host_os])\n        ;;\n    esac\n    SOLARINC=\"$SOLARINC -I/usr/local/include\"\n    ;;\n\nsolaris*)\n    COM=GCC\n    OS=SOLARIS\n    RTL_OS=Solaris\n    P_SEP=:\n\n    case \"$host_cpu\" in\n    i*86)\n        CPUNAME=INTEL\n        RTL_ARCH=x86\n        PLATFORMID=solaris_x86\n        ;;\n    sparc)\n        CPUNAME=SPARC\n        RTL_ARCH=SPARC\n        PLATFORMID=solaris_sparc\n        ;;\n    sparc64)\n        CPUNAME=SPARC64\n        RTL_ARCH=SPARC64\n        PLATFORMID=solaris_sparc64\n        ;;\n    *)\n        AC_MSG_ERROR([Unsupported host_cpu $host_cpu for host_os $host_os])\n        ;;\n    esac\n    SOLARINC=\"$SOLARINC -I/usr/local/include\"\n    ;;\n\nemscripten*)\n    COM=GCC\n    OS=EMSCRIPTEN\n    RTL_OS=Emscripten\n    P_SEP=:\n\n    case \"$host_cpu\" in\n    wasm32|wasm64)\n        ;;\n    *)\n        AC_MSG_ERROR([Unsupported host_cpu $host_cpu for host_os $host_os])\n        ;;\n    esac\n    CPUNAME=INTEL\n    RTL_ARCH=x86\n    PLATFORMID=linux_x86\n    ;;\n\n*)\n    AC_MSG_ERROR([$host_os operating system is not suitable to build LibreOffice for!])\n    ;;\nesac\n\ndnl ===================================================================\ndnl .NET support\ndnl ===================================================================\n\nAC_MSG_CHECKING([whether to build with .NET support])\nif test \"$with_dotnet\" != no; then\n    if test \"$DISABLE_SCRIPTING\" = TRUE; then\n        AC_MSG_RESULT([no, overridden by --disable-scripting])\n        with_dotnet=no\n        ENABLE_DOTNET=\"\"\n    else\n        AC_MSG_RESULT([yes])\n        ENABLE_DOTNET=TRUE\n    fi\nelse\n    AC_MSG_RESULT([no])\n    ENABLE_DOTNET=\"\"\nfi\n\nif test \"$ENABLE_DOTNET\" = TRUE; then\n    if test -n \"$with_dotnet\" && test \"$with_dotnet\" != yes; then\n        dnl the user explicitly asks for a particular dotnet executable here\n\n        AC_MSG_CHECKING([for dotnet])\n        PathFormat \"$with_dotnet\"\n        DOTNET=\"$formatted_path_unix\"\n\n        if test -f \"$DOTNET\"; then\n            dnl the user provided dotnet is valid\n            AC_MSG_RESULT([$formatted_path])\n        else\n            dnl since the user wants to use a particular dotnet executable,\n            dnl error out and let them correct the path instead of silently disabling.\n\n            AC_MSG_ERROR([$DOTNET is not a valid dotnet executable])\n            ENABLE_DOTNET=\"\"\n        fi\n    else\n        dnl no specific path to dotnet provided, try looking in $PATH\n\n        if test \"$OS\" = WNT\n        then\n                AC_PATH_PROGS(DOTNET, [dotnet.exe])\n        else\n                AC_PATH_PROGS(DOTNET, [dotnet])\n        fi\n        PathFormat \"$DOTNET\"\n        DOTNET=\"$formatted_path_unix\"\n\n        if test -z \"$DOTNET\"; then\n            dnl since the user does not specify any particular dotnet\n            dnl silently disable here instead of erroring out, to prevent\n            dnl breaking their build, as --with-dotnet is enabled by default.\n\n            AC_MSG_WARN([dotnet not found, disabling .NET support])\n            ENABLE_DOTNET=\"\"\n        fi\n    fi\n\n    if test -n \"$DOTNET\"; then\n        dnl the dotnet executable was found, but no guarantees on whether\n        dnl it contains SDK version 8 or higher unless we check.\n\n        AC_MSG_CHECKING([for .NET SDK 8 or higher])\n        dotnet_sdk_ver_major=`\"$DOTNET\" --version | \"$AWK\" -F. '{ print $1 }'`\n        if test \"$dotnet_sdk_ver_major\" -ge 8; then\n            dnl the SDK seems valid, get the root directory\n\n            dotnet_sdk_ver=`\"$DOTNET\" --version | \"$SED\" 's/\\r//g'`\n            dotnet_sdk_dir=`\"$DOTNET\" --list-sdks | \"$AWK\" -F [[]][[]] \"/^$dotnet_sdk_ver/\"'{ print $2 }' | \"$SED\" 's/\\r//g'`\n            PathFormat \"$dotnet_sdk_dir\"\n            DOTNET_ROOT=`dirname \"$formatted_path_unix\"`\n\n            AC_MSG_RESULT([yes])\n        else\n            dnl silently disable for same reason as before\n\n            AC_MSG_RESULT([no, disabling .NET support])\n            ENABLE_DOTNET=\"\"\n        fi\n    fi\nfi\n\nif test \"$ENABLE_DOTNET\" != TRUE; then\n    DOTNET=\"\"\n    DOTNET_ROOT=\"\"\nfi\n\nAC_SUBST(ENABLE_DOTNET)\nAC_SUBST(DOTNET)\nAC_SUBST(DOTNET_ROOT)\n\nDISABLE_GUI=\"\"\nif test \"$enable_gui\" = \"no\"; then\n    if test \"$using_x11\" != yes; then\n        AC_MSG_ERROR([$host_os operating system is not suitable to build LibreOffice with --disable-gui.])\n    fi\n    USING_X11=\n    DISABLE_GUI=TRUE\n    test_epoxy=no\nelse\n    AC_DEFINE(HAVE_FEATURE_UI)\nfi\nAC_SUBST(DISABLE_GUI)\n\nif test \"$with_x\" = \"no\"; then\n    USING_X11=\nfi\n\nif test -z \"$USING_X11\" -a \"$enable_qt5\" = \"yes\" -a \"$enable_gen\" = \"yes\"; then\n    AC_MSG_ERROR([Can't select gen VCL plugin, if --without-x is used!])\nfi\n\nif test \"$using_x11\" = yes; then\n    if test \"$USING_X11\" = TRUE; then\n        AC_DEFINE(USING_X11)\n    else\n        disable_x11_tests\n        if test \"$DISABLE_DYNLOADING\" = TRUE; then\n            test_qt5=yes\n            test_qt6=yes\n        fi\n    fi\nelse\n    if test \"$USING_X11\" = TRUE; then\n        AC_MSG_ERROR([Platform doesn't support X11 (\\$using_x11), but \\$USING_X11 is set!])\n    fi\nfi\n\nWORKDIR=\"${BUILDDIR}/workdir\"\nINSTDIR=\"${BUILDDIR}/instdir\"\nINSTROOTBASE=${INSTDIR}${INSTROOTBASESUFFIX}\nINSTROOT=${INSTROOTBASE}${INSTROOTCONTENTSUFFIX}\nAC_SUBST(COM)\nAC_SUBST(CPUNAME)\nAC_SUBST(RTL_OS)\nAC_SUBST(RTL_ARCH)\nAC_SUBST(EPM_FLAGS)\nAC_SUBST(USING_X11)\nAC_SUBST([INSTDIR])\nAC_SUBST([INSTROOT])\nAC_SUBST([INSTROOTBASE])\nAC_SUBST(OS)\nAC_SUBST(P_SEP)\nAC_SUBST(WORKDIR)\nAC_SUBST(PLATFORMID)\nAC_SUBST(WINDOWS_X64)\nAC_DEFINE_UNQUOTED(SDKDIR, \"$INSTDIR/$SDKDIRNAME\")\nAC_DEFINE_UNQUOTED(WORKDIR,\"$WORKDIR\")\n\nif test \"$OS\" = WNT -a \"$COM\" = MSC; then\n    case \"$CPUNAME\" in\n    INTEL) CPPU_ENV=msci ;;\n    X86_64) CPPU_ENV=mscx ;;\n    AARCH64) CPPU_ENV=msca ;;\n    *)\n        AC_MSG_ERROR([Unknown \\$CPUNAME '$CPUNAME' for $OS / $COM\"])\n        ;;\n    esac\nelse\n    CPPU_ENV=gcc3\nfi\nAC_SUBST(CPPU_ENV)\n\ndnl ===================================================================\ndnl Test which package format to use\ndnl ===================================================================\nAC_MSG_CHECKING([which package format to use])\nif test -n \"$with_package_format\" -a \"$with_package_format\" != no; then\n    for i in $with_package_format; do\n        case \"$i\" in\n        bsd | deb | pkg | rpm | archive | dmg | installed | msi | emscripten)\n            ;;\n        *)\n            AC_MSG_ERROR([unsupported format $i. Supported by EPM are:\nbsd - FreeBSD, NetBSD, or OpenBSD software distribution\ndeb - Debian software distribution\npkg - Solaris software distribution\nrpm - RedHat software distribution\n\nLibreOffice additionally supports:\narchive - .tar.gz or .zip\ndmg - macOS .dmg\nemscripten - directory with qt_soffice.html etc.\ninstalled - installation tree\nmsi - Windows .msi\n        ])\n            ;;\n        esac\n    done\n    # fakeroot is needed to ensure correct file ownerships/permissions\n    # inside deb packages and tar archives created on Linux and Solaris.\n    if test \"$OS\" = \"LINUX\" || test \"$OS\" = \"SOLARIS\"; then\n        AC_PATH_PROG(FAKEROOT, fakeroot, no)\n        if test \"$FAKEROOT\" = \"no\"; then\n            AC_MSG_ERROR(\n                [--with-package-format='$with_package_format' requires fakeroot. Install fakeroot.])\n        fi\n    fi\n    PKGFORMAT=\"$with_package_format\"\n    AC_MSG_RESULT([$PKGFORMAT])\nelse\n    PKGFORMAT=\n    AC_MSG_RESULT([none])\nfi\nAC_SUBST(PKGFORMAT)\n\ndnl ===================================================================\ndnl handle help related options\ndnl\ndnl If you change help related options, please update README.help\ndnl ===================================================================\n\nENABLE_HTMLHELP=\nHELP_OMINDEX_PAGE=\nHELP_ONLINE=\nWITH_HELPPACKS=\n\nAC_MSG_CHECKING([which help to build])\nif test -n \"$with_help\" -a \"$with_help\" != \"no\"; then\n    GIT_NEEDED_SUBMODULES=\"helpcontent2 $GIT_NEEDED_SUBMODULES\"\n    BUILD_TYPE=\"$BUILD_TYPE HELP\"\n    case \"$with_help\" in\n    \"html\")\n        ENABLE_HTMLHELP=TRUE\n        WITH_HELPPACKS=TRUE\n        SCPDEFS=\"$SCPDEFS -DWITH_HELPPACKS\"\n        AC_MSG_RESULT([HTML (local)])\n        ;;\n    \"online\")\n        ENABLE_HTMLHELP=TRUE\n        HELP_ONLINE=TRUE\n        AC_MSG_RESULT([HTML (online)])\n        ;;\n    yes)\n        WITH_HELPPACKS=TRUE\n        SCPDEFS=\"$SCPDEFS -DWITH_HELPPACKS\"\n        AC_MSG_RESULT([XML (local)])\n        ;;\n    *)\n        AC_MSG_ERROR([Unknown --with-help=$with_help])\n        ;;\n    esac\nelse\n    AC_MSG_RESULT([no])\nfi\n\nAC_MSG_CHECKING([if we need to build the help index tooling])\nif test \\( \"$with_help\" = yes -o \"$enable_extension_integration\" != no \\) -a -z \"$DISABLE_DYNLOADING\"; then\n    BUILD_TYPE=\"$BUILD_TYPE HELPTOOLS\"\n    test_clucene=yes\n    AC_MSG_RESULT([yes])\nelse\n    AC_MSG_RESULT([no])\nfi\n\nAC_MSG_CHECKING([whether to enable xapian-omega support for online help])\nif test -n \"$with_omindex\" -a \"$with_omindex\" != \"no\"; then\n    if test \"$HELP_ONLINE\" != TRUE; then\n        AC_MSG_ERROR([Can't build xapian-omega index without --help=online])\n    fi\n    case \"$with_omindex\" in\n    \"server\")\n        HELP_OMINDEX_PAGE=TRUE\n        AC_MSG_RESULT([SERVER])\n        ;;\n    \"noxap\")\n        AC_MSG_RESULT([NOXAP])\n        ;;\n    *)\n        AC_MSG_ERROR([Unknown --with-omindex=$with_omindex])\n        ;;\n    esac\nelse\n    AC_MSG_RESULT([no])\nfi\n\nAC_MSG_CHECKING([whether to include the XML-help support])\nif test \"$enable_xmlhelp\" = yes; then\n    BUILD_TYPE=\"$BUILD_TYPE XMLHELP\"\n    test_clucene=yes\n    AC_DEFINE(HAVE_FEATURE_XMLHELP)\n    AC_MSG_RESULT([yes])\nelse\n    if test \"$with_help\" = yes; then\n        add_warning \"Building the XML help, but LO with disabled xmlhelp support. Generated help can't be accessed from this LO build!\"\n    fi\n    AC_MSG_RESULT([no])\nfi\n\ndnl Test whether to integrate helppacks into the product's installer\nAC_MSG_CHECKING([for helppack integration])\nif test -z \"$WITH_HELPPACKS\" -o \"$with_helppack_integration\" = no; then\n    AC_MSG_RESULT([no integration])\nelse\n    SCPDEFS=\"$SCPDEFS -DWITH_HELPPACK_INTEGRATION\"\n    AC_MSG_RESULT([integration])\nfi\n\nAC_SUBST([ENABLE_HTMLHELP])\nAC_SUBST([HELP_OMINDEX_PAGE])\nAC_SUBST([HELP_ONLINE])\n# WITH_HELPPACKS is used only in configure\n\ndnl ===================================================================\ndnl Set up a different compiler to produce tools to run on the build\ndnl machine when doing cross-compilation\ndnl ===================================================================\n\nm4_pattern_allow([PKG_CONFIG_FOR_BUILD])\nm4_pattern_allow([PKG_CONFIG_LIBDIR])\nif test \"$cross_compiling\" = \"yes\"; then\n    AC_MSG_CHECKING([for BUILD platform configuration])\n    echo\n    rm -rf CONF-FOR-BUILD config_build.mk\n    mkdir CONF-FOR-BUILD\n    # Here must be listed all files needed when running the configure script. In particular, also\n    # those expanded by the AC_CONFIG_FILES() call near the end of this configure.ac. For clarity,\n    # keep them in the same order as there.\n    (cd $SRC_ROOT && tar cf - \\\n        config.guess \\\n        bin/get_config_variables \\\n        solenv/bin/getcompver.awk \\\n        solenv/inc/langlist.mk \\\n        download.lst \\\n        config_host.mk.in \\\n        config_host_lang.mk.in \\\n        Makefile.in \\\n        bin/bffvalidator.sh.in \\\n        bin/odfvalidator.sh.in \\\n        bin/officeotron.sh.in \\\n        instsetoo_native/util/openoffice.lst.in \\\n        config_host/*.in \\\n        sysui/desktop/macosx/Info.plist.in \\\n        sysui/desktop/macosx/hardened_runtime.xcent.in \\\n        sysui/desktop/macosx/lo.xcent.in \\\n        .vscode/vs-code-template.code-workspace.in \\\n        solenv/lockfile/autoconf.h.in \\\n        ) \\\n    | (cd CONF-FOR-BUILD && tar xf -)\n    cp configure CONF-FOR-BUILD\n    test -d config_build && cp -p config_build/*.h CONF-FOR-BUILD/config_host 2>/dev/null\n    (\n    unset COM USING_X11 OS CPUNAME\n    unset CC CXX SYSBASE CFLAGS\n    unset AR LD NM OBJDUMP PKG_CONFIG RANLIB READELF STRIP\n    unset CPPUNIT_CFLAGS CPPUNIT_LIBS\n    unset LIBXML_CFLAGS LIBXML_LIBS LIBXSLT_CFLAGS LIBXSLT_LIBS XSLTPROC\n    unset PKG_CONFIG_LIBDIR PKG_CONFIG_PATH\n    if test -n \"$CC_FOR_BUILD\"; then\n        export CC=\"$CC_FOR_BUILD\"\n        CC_BASE=`first_arg_basename \"$CC\"`\n    fi\n    if test -n \"$CXX_FOR_BUILD\"; then\n        export CXX=\"$CXX_FOR_BUILD\"\n        CXX_BASE=`first_arg_basename \"$CXX\"`\n    fi\n    test -n \"$PKG_CONFIG_FOR_BUILD\" && export PKG_CONFIG=\"$PKG_CONFIG_FOR_BUILD\"\n    cd CONF-FOR-BUILD\n\n    # Handle host configuration, which affects the cross-toolset too\n    sub_conf_opts=\"\"\n    test -n \"$enable_ccache\" && sub_conf_opts=\"$sub_conf_opts --enable-ccache=$enable_ccache\"\n    test -n \"$with_ant_home\" && sub_conf_opts=\"$sub_conf_opts --with-ant-home=$with_ant_home\"\n    test \"$with_junit\" = \"no\" && sub_conf_opts=\"$sub_conf_opts --without-junit\"\n    # While we don't need scripting support, we don't have a PYTHON_FOR_BUILD Java equivalent, so must enable scripting for Java\n    if test -n \"$ENABLE_JAVA\"; then\n        case \"$_os\" in\n        Android)\n            # Hack for Android - the build doesn't need a host JDK, so just forward to build for convenience\n            test -n \"$with_jdk_home\" && sub_conf_opts=\"$sub_conf_opts --with-jdk-home=$with_jdk_home\"\n            ;;\n        *)\n            if test -z \"$with_jdk_home\"; then\n                AC_MSG_ERROR([Missing host JDK! This can't be detected for the build OS, so you have to specify it with --with-jdk-home.])\n            fi\n            ;;\n        esac\n    else\n        sub_conf_opts=\"$sub_conf_opts --without-java\"\n    fi\n    test -n \"$TARFILE_LOCATION\" && sub_conf_opts=\"$sub_conf_opts --with-external-tar=$TARFILE_LOCATION\"\n    test \"$with_galleries\" = \"no\" -o -z \"$WITH_GALLERY_BUILD\" && sub_conf_opts=\"$sub_conf_opts --with-galleries=no --disable-database-connectivity\"\n    test \"$with_templates\" = \"no\" -o -z \"$WITH_TEMPLATES\" && sub_conf_opts=\"$sub_conf_opts --with-templates=no\"\n    test -n \"$with_help\" -a \"$with_help\" != \"no\" && sub_conf_opts=\"$sub_conf_opts --with-help=$with_help\"\n    test \"$enable_extensions\" = yes || sub_conf_opts=\"$sub_conf_opts --disable-extensions\"\n    test \"${enable_ld+set}\" = set -a \"$build_cpu\" = \"$host_cpu\" && sub_conf_opts=\"$sub_conf_opts --enable-ld=${enable_ld}\"\n    test \"${enable_pch+set}\" = set && sub_conf_opts=\"$sub_conf_opts --enable-pch=${enable_pch}\"\n    test \"$enable_wasm_strip\" = \"yes\" && sub_conf_opts=\"$sub_conf_opts --enable-wasm-strip\"\n    test \"${with_system_lockfile+set}\" = set && sub_conf_opts=\"$sub_conf_opts --with-system-lockfile=${with_system_lockfile}\"\n    test \"${enable_fuzzers}\" = yes && sub_conf_opts=\"$sub_conf_opts --without-system-libxml\"\n    if test \"$_os\" = \"Emscripten\"; then\n        sub_conf_opts=\"$sub_conf_opts --without-system-libxml --without-system-fontconfig --without-system-freetype --without-system-zlib\"\n        if test \"${with_main_module+set}\" = set; then\n            sub_conf_opts=\"$sub_conf_opts --with-main-module=${with_main_module}\"\n        else\n            sub_conf_opts=\"$sub_conf_opts --with-main-module=writer\"\n        fi\n    fi\n    # windows uses full-internal python and that in turn relies on openssl, so also enable openssl\n    # when cross-compiling for aarch64, overriding the defaults below\n    test \"${PLATFORMID}\" = \"windows_aarch64\" && sub_conf_opts=\"$sub_conf_opts --enable-openssl --with-tls=openssl\"\n\n    # Don't bother having configure look for stuff not needed for the build platform anyway\n    # WARNING: any option with an argument containing spaces must be handled separately (see --with-theme)\n    sub_conf_defaults=\" \\\n        --build=\"$build_alias\" \\\n        --disable-cairo-canvas \\\n        --disable-cups \\\n        --disable-customtarget-components \\\n        --disable-firebird-sdbc \\\n        --disable-gpgmepp \\\n        --disable-gstreamer-1-0 \\\n        --disable-gtk3 \\\n        --disable-gtk4 \\\n        --disable-libcmis \\\n        --disable-mariadb-sdbc \\\n        --disable-nss \\\n        --disable-online-update \\\n        --disable-opencl \\\n        --disable-openssl \\\n        --disable-pdfimport \\\n        --disable-postgresql-sdbc \\\n        --disable-skia \\\n        --disable-xmlhelp \\\n        --enable-dynamic-loading \\\n        --enable-icecream=\"$enable_icecream\" \\\n        --without-gssapi \\\n        --without-doxygen \\\n        --without-tls \\\n        --without-webdav \\\n        --without-x \\\n\"\n    # single quotes added for better readability in case of spaces\n    echo \"    Running CONF-FOR-BUILD/configure\" \\\n        $sub_conf_defaults \\\n        --with-parallelism=\"'$with_parallelism'\" \\\n        --with-theme=\"'$with_theme'\" \\\n        --with-vendor=\"'$with_vendor'\" \\\n        $sub_conf_opts \\\n        $with_build_platform_configure_options \\\n        --srcdir=$srcdir\n\n    ./configure \\\n        $sub_conf_defaults \\\n        --with-parallelism=\"$with_parallelism\" \\\n        --with-theme=\"$with_theme\" \\\n        \"--with-vendor=$with_vendor\" \\\n        $sub_conf_opts \\\n        $with_build_platform_configure_options \\\n        --srcdir=$srcdir \\\n        2>&1 | sed -e 's/^/    /'\n    if test [${PIPESTATUS[0]}] -ne 0; then\n        AC_MSG_ERROR([Running the configure script for BUILD side failed, see CONF-FOR-BUILD/config.log])\n    fi\n\n    # filter permitted build targets\n    PERMITTED_BUILD_TARGETS=\"\n        ARGON2\n        AVMEDIA\n        BOOST\n        BZIP2\n        CAIRO\n        CLUCENE\n        CURL\n        DBCONNECTIVITY\n        DESKTOP\n        DRAGONBOX\n        DYNLOADING\n        EPOXY\n        EXPAT\n        FROZEN\n        GLM\n        GRAPHITE\n        HARFBUZZ\n        HELPTOOLS\n        ICU\n        LCMS2\n        LIBJPEG_TURBO\n        LIBLANGTAG\n        LibO\n        LIBFFI\n        LIBPN\n        LIBTIFF\n        LIBWEBP\n        LIBXML2\n        LIBXSLT\n        MDDS\n        NATIVE\n        OPENSSL\n        ORCUS\n        PYTHON\n        REPORTBUILDER\n        SCRIPTING\n        ZLIB\n        ZXCVBN\n\"\n    # converts BUILD_TYPE and PERMITTED_BUILD_TARGETS into non-whitespace,\n    # newlined lists, to use grep as a filter\n    PERMITTED_BUILD_TARGETS=$(echo \"$PERMITTED_BUILD_TARGETS\" | sed -e '/^ *$/d' -e 's/ *//')\n    BUILD_TARGETS=\"$(sed -n -e '/^export BUILD_TYPE=/ s/.*=//p' config_host.mk | tr ' ' '\\n')\"\n    BUILD_TARGETS=\"$(echo \"$BUILD_TARGETS\" | grep -F \"$PERMITTED_BUILD_TARGETS\" | tr '\\n' ' ')\"\n    sed -i -e \"s/ BUILD_TYPE=.*$/ BUILD_TYPE=$BUILD_TARGETS/\" config_host.mk\n\n    cp config_host.mk ../config_build.mk\n    cp config_host_lang.mk ../config_build_lang.mk\n    mv config.log ../config.Build.log\n    mkdir -p ../config_build\n    mv config_host/*.h ../config_build\n    test -f \"$WARNINGS_FILE\" && mv \"$WARNINGS_FILE\" \"../$WARNINGS_FILE_FOR_BUILD\"\n\n    # all these will get a _FOR_BUILD postfix\n    DIRECT_FOR_BUILD_SETTINGS=\"\n        CC\n        CPPU_ENV\n        CXX\n        ILIB\n        JAVA_HOME\n        JAVAIFLAGS\n        JDK\n        JDK_SECURITYMANAGER_DISALLOWED\n        LIBO_BIN_FOLDER\n        LIBO_LIB_FOLDER\n        LIBO_URE_LIB_FOLDER\n        LIBO_URE_MISC_FOLDER\n        OS\n        SDKDIRNAME\n        SYSTEM_LIBXML\n        SYSTEM_LIBXSLT\n\"\n    # these overwrite host config with build config\n    OVERWRITING_SETTINGS=\"\n        ANT\n        ANT_HOME\n        ANT_LIB\n        JAVA_SOURCE_VER\n        JAVA_TARGET_VER\n        JAVACFLAGS\n        JAVACOMPILER\n        JAVADOC\n        JAVADOCISGJDOC\n        LOCKFILE\n        SYSTEM_GENBRK\n        SYSTEM_GENCCODE\n        SYSTEM_GENCMN\n\"\n    # these need some special handling\n    EXTRA_HANDLED_SETTINGS=\"\n        INSTDIR\n        INSTROOT\n        PATH\n        WORKDIR\n\"\n    OLD_PATH=$PATH\n    . ./bin/get_config_variables $DIRECT_FOR_BUILD_SETTINGS $OVERWRITING_SETTINGS $EXTRA_HANDLED_SETTINGS\n    BUILD_PATH=$PATH\n    PATH=$OLD_PATH\n\n    line=`echo \"LO_PATH_FOR_BUILD='${BUILD_PATH}'\" | sed -e 's,/CONF-FOR-BUILD,,g'`\n    echo \"$line\" >>build-config\n\n    for V in $DIRECT_FOR_BUILD_SETTINGS; do\n        VV='$'$V\n        VV=`eval \"echo $VV\"`\n        if test -n \"$VV\"; then\n            line=${V}_FOR_BUILD='${'${V}_FOR_BUILD:-$VV'}'\n            echo \"$line\" >>build-config\n        fi\n    done\n\n    for V in $OVERWRITING_SETTINGS; do\n        VV='$'$V\n        VV=`eval \"echo $VV\"`\n        if test -n \"$VV\"; then\n            line=${V}='${'${V}:-$VV'}'\n            echo \"$line\" >>build-config\n        fi\n    done\n\n    for V in INSTDIR INSTROOT WORKDIR; do\n        VV='$'$V\n        VV=`eval \"echo $VV\"`\n        VV=`echo $VV | sed -e \"s,/CONF-FOR-BUILD/\\([[a-z]]*\\),/\\1_for_build,g\"`\n        if test -n \"$VV\"; then\n            line=\"${V}_FOR_BUILD='$VV'\"\n            echo \"$line\" >>build-config\n        fi\n    done\n\n    )\n    test -f CONF-FOR-BUILD/build-config || AC_MSG_ERROR([setup/configure for BUILD side failed, see CONF-FOR-BUILD/config.log])\n    test -f config_build.mk || AC_MSG_ERROR([A file called config_build.mk was supposed to have been copied here, but it isn't found])\n    perl -pi -e 's,/(workdir|instdir)(/|$),/\\1_for_build\\2,g;' \\\n             -e 's,/CONF-FOR-BUILD,,g;' config_build.mk\n\n    eval `cat CONF-FOR-BUILD/build-config`\n\n    AC_MSG_RESULT([checking for BUILD platform configuration... done])\n\n    rm -rf CONF-FOR-BUILD\nelse\n    OS_FOR_BUILD=\"$OS\"\n    CC_FOR_BUILD=\"$CC\"\n    CPPU_ENV_FOR_BUILD=\"$CPPU_ENV\"\n    CXX_FOR_BUILD=\"$CXX\"\n    INSTDIR_FOR_BUILD=\"$INSTDIR\"\n    INSTROOT_FOR_BUILD=\"$INSTROOT\"\n    LIBO_BIN_FOLDER_FOR_BUILD=\"$LIBO_BIN_FOLDER\"\n    LIBO_LIB_FOLDER_FOR_BUILD=\"$LIBO_LIB_FOLDER\"\n    LIBO_URE_LIB_FOLDER_FOR_BUILD=\"$LIBO_URE_LIB_FOLDER\"\n    LIBO_URE_MISC_FOLDER_FOR_BUILD=\"$LIBO_URE_MISC_FOLDER\"\n    SDKDIRNAME_FOR_BUILD=\"$SDKDIRNAME\"\n    WORKDIR_FOR_BUILD=\"$WORKDIR\"\nfi\nAC_SUBST(OS_FOR_BUILD)\nAC_SUBST(INSTDIR_FOR_BUILD)\nAC_SUBST(INSTROOT_FOR_BUILD)\nAC_SUBST(LIBO_BIN_FOLDER_FOR_BUILD)\nAC_SUBST(LIBO_LIB_FOLDER_FOR_BUILD)\nAC_SUBST(LIBO_URE_LIB_FOLDER_FOR_BUILD)\nAC_SUBST(LIBO_URE_MISC_FOLDER_FOR_BUILD)\nAC_SUBST(SDKDIRNAME_FOR_BUILD)\nAC_SUBST(WORKDIR_FOR_BUILD)\nAC_SUBST(CC_FOR_BUILD)\nAC_SUBST(CXX_FOR_BUILD)\nAC_SUBST(CPPU_ENV_FOR_BUILD)\n\ndnl ===================================================================\ndnl Check for lockfile deps\ndnl ===================================================================\nif test -z \"$CROSS_COMPILING\"; then\n    test -n \"$LOCKFILE\" -a \"${with_system_lockfile+set}\" != set && with_system_lockfile=\"$LOCKFILE\"\n    test \"${with_system_lockfile+set}\" = set || with_system_lockfile=no\n    AC_MSG_CHECKING([which lockfile binary to use])\n    case \"$with_system_lockfile\" in\n    yes)\n        AC_MSG_RESULT([external])\n        AC_PATH_PROGS([LOCKFILE],[dotlockfile lockfile])\n        ;;\n    no)\n        AC_MSG_RESULT([internal])\n        ;;\n    *)\n        if test -x \"$with_system_lockfile\"; then\n            LOCKFILE=\"$with_system_lockfile\"\n        else\n            AC_MSG_ERROR(['$with_system_lockfile' is not executable.])\n        fi\n        AC_MSG_RESULT([$with_system_lockfile])\n        ;;\n    esac\nfi\n\nif test -n \"$LOCKFILE\" -a \"$DISABLE_DYNLOADING\" = TRUE; then\n    add_warning \"The default system lockfile has increasing poll intervals up to 60s, so linking executables may be delayed.\"\nfi\n\nAC_CHECK_HEADERS([getopt.h paths.h sys/param.h])\nAC_CHECK_FUNCS([utime utimes])\nAC_SUBST(LOCKFILE)\n\ndnl ===================================================================\ndnl Check for syslog header\ndnl ===================================================================\nAC_CHECK_HEADER(syslog.h, AC_DEFINE(HAVE_SYSLOG_H))\n\ndnl Set the ENABLE_WERROR variable. (Activate --enable-werror)\ndnl ===================================================================\nAC_MSG_CHECKING([whether to turn warnings to errors])\nif test -n \"$enable_werror\" -a \"$enable_werror\" != \"no\"; then\n    ENABLE_WERROR=\"TRUE\"\n    PYTHONWARNINGS=\"error\"\n    AC_MSG_RESULT([yes])\nelse\n    if test -n \"$LODE_HOME\" -a -z \"$enable_werror\"; then\n        ENABLE_WERROR=\"TRUE\"\n        PYTHONWARNINGS=\"error\"\n        AC_MSG_RESULT([yes])\n    else\n        AC_MSG_RESULT([no])\n    fi\nfi\nAC_SUBST(ENABLE_WERROR)\nAC_SUBST(PYTHONWARNINGS)\n\ndnl Check for --enable-assert-always-abort, set ASSERT_ALWAYS_ABORT\ndnl ===================================================================\nAC_MSG_CHECKING([whether to have assert() failures abort even without --enable-debug])\nif test -z \"$enable_assert_always_abort\"; then\n   if test \"$ENABLE_DEBUG\" = TRUE; then\n       enable_assert_always_abort=yes\n   else\n       enable_assert_always_abort=no\n   fi\nfi\nif test \"$enable_assert_always_abort\" = \"yes\"; then\n    ASSERT_ALWAYS_ABORT=\"TRUE\"\n    AC_MSG_RESULT([yes])\nelse\n    ASSERT_ALWAYS_ABORT=\"FALSE\"\n    AC_MSG_RESULT([no])\nfi\nAC_SUBST(ASSERT_ALWAYS_ABORT)\n\n# Determine whether to use ooenv for the instdir installation\n# ===================================================================\nif test $_os != \"WINNT\" -a $_os != \"Darwin\"; then\n    AC_MSG_CHECKING([whether to use ooenv for the instdir installation])\n    if test -z \"$enable_ooenv\"; then\n        if test -n \"$ENABLE_DEBUG$ENABLE_DBGUTIL\"; then\n            enable_ooenv=yes\n        else\n            enable_ooenv=no\n        fi\n    fi\n    if test \"$enable_ooenv\" = \"no\"; then\n        AC_MSG_RESULT([no])\n    else\n        ENABLE_OOENV=\"TRUE\"\n        AC_MSG_RESULT([yes])\n    fi\nfi\nAC_SUBST(ENABLE_OOENV)\n\nif test \"$test_kf5\" = \"yes\" -a \"$enable_kf5\" = \"yes\"; then\n    if test \"$enable_qt5\" = \"no\"; then\n        AC_MSG_ERROR([KF5 support depends on QT5, so it conflicts with --disable-qt5])\n    else\n        enable_qt5=yes\n    fi\nfi\n\nif test \"$test_kf6\" = \"yes\" -a \"$enable_kf6\" = \"yes\"; then\n    if test \"$enable_qt6\" = \"no\"; then\n        AC_MSG_ERROR([KF6 support depends on QT6, so it conflicts with --disable-qt6])\n    else\n        enable_qt6=yes\n    fi\nfi\n\n\nAC_MSG_CHECKING([whether to build the pagein binaries for oosplash])\nif test \"${enable_pagein}\" != no -a -z \"$DISABLE_DYNLOADING\"; then\n    AC_MSG_RESULT([yes])\n    ENABLE_PAGEIN=TRUE\n    AC_DEFINE(HAVE_FEATURE_PAGEIN)\nelse\n    AC_MSG_RESULT([no])\nfi\nAC_SUBST(ENABLE_PAGEIN)\n\n\nAC_MSG_CHECKING([whether to enable CPDB support])\nENABLE_CPDB=\"\"\nCPDB_CFLAGS=\"\"\nCPDB_LIBS=\"\"\nif test \"$test_cpdb\" = yes -a \"x$enable_cpdb\" = \"xyes\"; then\n    ENABLE_CPDB=\"TRUE\"\n    AC_MSG_RESULT([yes])\n    PKG_CHECK_MODULES(CPDB, cpdb-frontend)\n    CPDB_CFLAGS=$(printf '%s' \"$CPDB_CFLAGS\" | sed -e \"s/-I/${ISYSTEM?}/g\")\n    FilterLibs \"${CPDB_LIBS}\"\n    CPDB_LIBS=\"${filteredlibs}\"\n    AC_DEFINE([ENABLE_CPDB],[1])\nelse\n    AC_MSG_RESULT([no])\nfi\nAC_SUBST(ENABLE_CPDB)\nAC_SUBST(CPDB_LIBS)\nAC_SUBST(CPDB_CFLAGS)\n\ndnl ===================================================================\ndnl check for cups support\ndnl ===================================================================\n\nAC_MSG_CHECKING([whether to enable CUPS support])\nif test \"$test_cups\" = yes -a \"$enable_cups\" != no; then\n    ENABLE_CUPS=TRUE\n    AC_MSG_RESULT([yes])\n\n    AC_MSG_CHECKING([whether cups support is present])\n    AC_CHECK_LIB([cups], [cupsPrintFiles], [:])\n    AC_CHECK_HEADER(cups/cups.h, AC_DEFINE(HAVE_CUPS_H))\n    if test \"$ac_cv_lib_cups_cupsPrintFiles\" != \"yes\" -o \"$ac_cv_header_cups_cups_h\" != \"yes\"; then\n        AC_MSG_ERROR([Could not find CUPS. Install libcups2-dev or cups-devel.])\n    fi\n    AC_DEFINE([ENABLE_CUPS],[1])\nelse\n    AC_MSG_RESULT([no])\nfi\n\nAC_SUBST(ENABLE_CUPS)\n\nlibo_CHECK_SYSTEM_MODULE([fontconfig],[FONTCONFIG],[fontconfig >= 2.12.0],,system,TRUE)\n\ndnl whether to find & fetch external tarballs?\ndnl ===================================================================\nif test -z \"$TARFILE_LOCATION\" -a -n \"$LODE_HOME\" ; then\n   if test \"$GNUMAKE_WIN_NATIVE\" = \"TRUE\" ; then\n       TARFILE_LOCATION=\"`cygpath -m $LODE_HOME/ext_tar`\"\n   else\n       TARFILE_LOCATION=\"$LODE_HOME/ext_tar\"\n   fi\nfi\nif test -z \"$TARFILE_LOCATION\"; then\n    if test -d \"$SRC_ROOT/src\" ; then\n        mv \"$SRC_ROOT/src\" \"$SRC_ROOT/external/tarballs\"\n        ln -s \"$SRC_ROOT/external/tarballs\" \"$SRC_ROOT/src\"\n    fi\n    TARFILE_LOCATION=\"$SRC_ROOT/external/tarballs\"\nelse\n    AbsolutePath \"$TARFILE_LOCATION\"\n    PathFormat \"${absolute_path}\"\n    TARFILE_LOCATION=\"${formatted_path_unix}\"\nfi\nPathFormat \"$TARFILE_LOCATION\"\nTARFILE_LOCATION_NATIVE=\"$formatted_path\"\nAC_SUBST(TARFILE_LOCATION)\nAC_SUBST(TARFILE_LOCATION_NATIVE)\n\nAC_MSG_CHECKING([whether we want to fetch tarballs])\nif test \"$enable_fetch_external\" != \"no\"; then\n    if test \"$with_all_tarballs\" = \"yes\"; then\n        AC_MSG_RESULT([yes, all of them])\n        DO_FETCH_TARBALLS=\"ALL\"\n    else\n        AC_MSG_RESULT([yes, if we use them])\n        DO_FETCH_TARBALLS=\"TRUE\"\n    fi\nelse\n    AC_MSG_RESULT([no])\n    DO_FETCH_TARBALLS=\nfi\nAC_SUBST(DO_FETCH_TARBALLS)\n\ndnl Test whether to include MySpell dictionaries\ndnl ===================================================================\nAC_MSG_CHECKING([whether to include MySpell dictionaries])\nif test \"$with_myspell_dicts\" = \"yes\"; then\n    AC_MSG_RESULT([yes])\n    WITH_MYSPELL_DICTS=TRUE\n    BUILD_TYPE=\"$BUILD_TYPE DICTIONARIES\"\n    GIT_NEEDED_SUBMODULES=\"dictionaries $GIT_NEEDED_SUBMODULES\"\nelse\n    AC_MSG_RESULT([no])\n    WITH_MYSPELL_DICTS=\nfi\nAC_SUBST(WITH_MYSPELL_DICTS)\n\n# There are no \"system\" myspell, hyphen or mythes dictionaries on macOS, Windows, Android or iOS.\nif test $_os = Darwin -o $_os = WINNT -o $_os = iOS -o $_os = Android; then\n    if test \"$with_system_dicts\" = yes; then\n        AC_MSG_ERROR([There are no system dicts on this OS in the formats the 3rd-party libs we use expect]);\n    fi\n    with_system_dicts=no\nfi\n\nAC_MSG_CHECKING([whether to use dicts from external paths])\nif test -z \"$with_system_dicts\" -o \"$with_system_dicts\" != \"no\"; then\n    AC_MSG_RESULT([yes])\n    SYSTEM_DICTS=TRUE\n    AC_MSG_CHECKING([for spelling dictionary directory])\n    if test -n \"$with_external_dict_dir\"; then\n        DICT_SYSTEM_DIR=file://$with_external_dict_dir\n    else\n        DICT_SYSTEM_DIR=file:///usr/share/hunspell\n        if test ! -d /usr/share/hunspell -a -d /usr/share/myspell; then\n            DICT_SYSTEM_DIR=file:///usr/share/myspell\n        fi\n    fi\n    AC_MSG_RESULT([$DICT_SYSTEM_DIR])\n    AC_MSG_CHECKING([for hyphenation patterns directory])\n    if test -n \"$with_external_hyph_dir\"; then\n        HYPH_SYSTEM_DIR=file://$with_external_hyph_dir\n    else\n        HYPH_SYSTEM_DIR=file:///usr/share/hyphen\n    fi\n    AC_MSG_RESULT([$HYPH_SYSTEM_DIR])\n    AC_MSG_CHECKING([for thesaurus directory])\n    if test -n \"$with_external_thes_dir\"; then\n        THES_SYSTEM_DIR=file://$with_external_thes_dir\n    else\n        THES_SYSTEM_DIR=file:///usr/share/mythes\n    fi\n    AC_MSG_RESULT([$THES_SYSTEM_DIR])\nelse\n    AC_MSG_RESULT([no])\n    SYSTEM_DICTS=\nfi\nAC_SUBST(SYSTEM_DICTS)\nAC_SUBST(DICT_SYSTEM_DIR)\nAC_SUBST(HYPH_SYSTEM_DIR)\nAC_SUBST(THES_SYSTEM_DIR)\n\ndnl ===================================================================\ndnl Precompiled headers.\nENABLE_PCH=\"\"\nAC_MSG_CHECKING([whether to enable pch feature])\nif test -z \"$enable_pch\"; then\n    if test \"$_os\" = \"WINNT\"; then\n        # Enabled by default on Windows.\n        enable_pch=yes\n        # never use sccache on auto-enabled PCH builds, except if requested explicitly\n        if test -z \"$enable_ccache\" -a \"$SCCACHE\"; then\n            CCACHE=\"\"\n        fi\n    else\n        enable_pch=no\n    fi\nfi\nif test \"$enable_pch\" != no -a \"$_os\" = Emscripten; then\n    AC_MSG_ERROR([PCH currently isn't supported for Emscripten with native EH (nEH) because of missing Sj/Lj support with nEH in clang.])\nfi\nif test \"$enable_pch\" != \"no\" -a \"$_os\" != \"WINNT\" -a \"$GCC\" != \"yes\" ; then\n    AC_MSG_ERROR([Precompiled header not yet supported for your platform/compiler])\nfi\nif test \"$enable_pch\" = \"system\"; then\n    ENABLE_PCH=\"1\"\n    AC_MSG_RESULT([yes (system headers)])\nelif test \"$enable_pch\" = \"base\"; then\n    ENABLE_PCH=\"2\"\n    AC_MSG_RESULT([yes (system and base headers)])\nelif test \"$enable_pch\" = \"normal\"; then\n    ENABLE_PCH=\"3\"\n    AC_MSG_RESULT([yes (normal)])\nelif test \"$enable_pch\" = \"full\"; then\n    ENABLE_PCH=\"4\"\n    AC_MSG_RESULT([yes (full)])\nelif test \"$enable_pch\" = \"yes\"; then\n    # Pick a suitable default.\n    if test \"$GCC\" = \"yes\"; then\n        # With Clang and GCC higher levels do not seem to make a noticeable improvement,\n        # while making the PCHs larger and rebuilds more likely.\n        ENABLE_PCH=\"2\"\n        AC_MSG_RESULT([yes (system and base headers)])\n    else\n        # With MSVC the highest level makes a significant difference,\n        # and it was the default when there used to be no PCH levels.\n        ENABLE_PCH=\"4\"\n        AC_MSG_RESULT([yes (full)])\n    fi\nelif test \"$enable_pch\" = \"no\"; then\n    AC_MSG_RESULT([no])\nelse\n    AC_MSG_ERROR([Unknown value for --enable-pch])\nfi\nAC_SUBST(ENABLE_PCH)\nif test -n \"$ENABLE_PCH\"; then\n    AC_DEFINE(ENABLE_PCH)\nfi\n# ccache 3.7.1 and older do not properly detect/handle -include .gch in CCACHE_DEPEND mode\nif test -n \"$ENABLE_PCH\" -a -n \"$CCACHE_DEPEND_MODE\" -a \"$GCC\" = \"yes\" -a \"$COM_IS_CLANG\" != \"TRUE\"; then\n    AC_PATH_PROG([CCACHE_BIN],[ccache],[not found])\n    if test \"$CCACHE_BIN\" != \"not found\"; then\n        AC_MSG_CHECKING([ccache version])\n        CCACHE_VERSION=`\"$CCACHE_BIN\" -V | \"$AWK\" '/^ccache version/{print $3}'`\n        CCACHE_NUMVER=`echo $CCACHE_VERSION | $AWK -F. '{ print \\$1*10000+\\$2*100+\\$3 }'`\n        AC_MSG_RESULT([$CCACHE_VERSION])\n        AC_MSG_CHECKING([whether ccache depend mode works properly with GCC PCH])\n        if test \"$CCACHE_NUMVER\" -gt \"030701\"; then\n            AC_MSG_RESULT([yes])\n        else\n            AC_MSG_RESULT([no (not newer than 3.7.1)])\n            CCACHE_DEPEND_MODE=\n        fi\n    fi\nfi\n\nPCH_INSTANTIATE_TEMPLATES=\nif test -n \"$ENABLE_PCH\"; then\n    AC_MSG_CHECKING([whether $CC supports -fpch-instantiate-templates])\n    save_CFLAGS=$CFLAGS\n    CFLAGS=\"$CFLAGS -Werror -fpch-instantiate-templates\"\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[ return 0; ]])],[ PCH_INSTANTIATE_TEMPLATES=\"-fpch-instantiate-templates\" ],[])\n    CFLAGS=$save_CFLAGS\n    if test -n \"$PCH_INSTANTIATE_TEMPLATES\"; then\n        AC_MSG_RESULT(yes)\n    else\n        AC_MSG_RESULT(no)\n    fi\nfi\nAC_SUBST(PCH_INSTANTIATE_TEMPLATES)\n\nBUILDING_PCH_WITH_OBJ=\nif test -n \"$ENABLE_PCH\"; then\n    AC_MSG_CHECKING([whether $CC supports -Xclang -building-pch-with-obj])\n    save_CFLAGS=$CFLAGS\n    CFLAGS=\"$CFLAGS -Werror -Xclang -building-pch-with-obj\"\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[ return 0; ]])],[ BUILDING_PCH_WITH_OBJ=\"-Xclang -building-pch-with-obj\" ],[])\n    CFLAGS=$save_CFLAGS\n    if test -n \"$BUILDING_PCH_WITH_OBJ\"; then\n        AC_MSG_RESULT(yes)\n    else\n        AC_MSG_RESULT(no)\n    fi\nfi\nAC_SUBST(BUILDING_PCH_WITH_OBJ)\n\nPCH_CODEGEN=\nPCH_NO_CODEGEN=\nfpch_prefix=\nif test \"$COM\" = MSC; then\n    fpch_prefix=\"-Xclang \"\nfi\nif test -n \"$BUILDING_PCH_WITH_OBJ\"; then\n    AC_MSG_CHECKING([whether $CC supports ${fpch_prefix}-fpch-codegen])\n    save_CFLAGS=$CFLAGS\n    CFLAGS=\"$CFLAGS -Werror ${fpch_prefix}-fpch-codegen\"\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[ return 0; ]])],\n        [ PCH_CODEGEN=\"${fpch_prefix}-fpch-codegen\" ],[])\n    CFLAGS=$save_CFLAGS\n    CFLAGS=\"$CFLAGS -Werror ${fpch_prefix}-fno-pch-codegen\"\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[ return 0; ]])],\n        [ PCH_NO_CODEGEN=\"${fpch_prefix}-fno-pch-codegen\" ],[])\n    CFLAGS=$save_CFLAGS\n    if test -n \"$PCH_CODEGEN\"; then\n        AC_MSG_RESULT(yes)\n    else\n        AC_MSG_RESULT(no)\n    fi\nfi\nAC_SUBST(PCH_CODEGEN)\nAC_SUBST(PCH_NO_CODEGEN)\nPCH_DEBUGINFO=\nif test -n \"$BUILDING_PCH_WITH_OBJ\"; then\n    AC_MSG_CHECKING([whether $CC supports ${fpch_prefix}-fpch-debuginfo])\n    save_CFLAGS=$CFLAGS\n    CFLAGS=\"$CFLAGS -Werror ${fpch_prefix}-fpch-debuginfo\"\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[ return 0; ]])],[ PCH_DEBUGINFO=\"${fpch_prefix}-fpch-debuginfo\" ],[])\n    CFLAGS=$save_CFLAGS\n    if test -n \"$PCH_DEBUGINFO\"; then\n        AC_MSG_RESULT(yes)\n    else\n        AC_MSG_RESULT(no)\n    fi\nfi\nAC_SUBST(PCH_DEBUGINFO)\n\nTAB=`printf '\\t'`\n\nAC_MSG_CHECKING([the GNU Make version])\n_make_version=`$GNUMAKE --version | grep GNU | $GREP -v GPL | $SED -e 's@^[[^0-9]]*@@' -e 's@ .*@@' -e 's@,.*@@'`\n_make_longver=`echo $_make_version | $AWK -F. '{ print \\$1*10000+\\$2*100+\\$3 }'`\nif test \"$_make_longver\" -ge \"040000\"; then\n    AC_MSG_RESULT([$GNUMAKE $_make_version])\nelse\n    AC_MSG_ERROR([failed ($GNUMAKE version >= 4.0 needed)])\nfi\n\n_make_ver_check=`$GNUMAKE --version | grep \"Built for Windows\"`\nSTALE_MAKE=\nif test \"$_make_ver_check\" = \"\"; then\n   STALE_MAKE=TRUE\nfi\n\nHAVE_LD_HASH_STYLE=FALSE\nWITH_LINKER_HASH_STYLE=\nAC_MSG_CHECKING([for --hash-style gcc linker support])\nif test \"$GCC\" = \"yes\"; then\n    if test -z \"$with_linker_hash_style\" -o \"$with_linker_hash_style\" = \"yes\"; then\n        hash_styles=\"gnu sysv\"\n    elif test \"$with_linker_hash_style\" = \"no\"; then\n        hash_styles=\n    else\n        hash_styles=\"$with_linker_hash_style\"\n    fi\n\n    for hash_style in $hash_styles; do\n        test \"$HAVE_LD_HASH_STYLE\" = \"TRUE\" && continue\n        hash_style_ldflags_save=$LDFLAGS\n        LDFLAGS=\"$LDFLAGS -Wl,--hash-style=$hash_style\"\n\n        AC_RUN_IFELSE([AC_LANG_PROGRAM(\n            [\n#include <stdio.h>\n            ],[\nprintf (\"\");\n            ])],\n            [\n                  HAVE_LD_HASH_STYLE=TRUE\n                  WITH_LINKER_HASH_STYLE=$hash_style\n            ],\n            [HAVE_LD_HASH_STYLE=FALSE],\n            [HAVE_LD_HASH_STYLE=FALSE])\n        LDFLAGS=$hash_style_ldflags_save\n    done\n\n    if test \"$HAVE_LD_HASH_STYLE\" = \"TRUE\"; then\n        AC_MSG_RESULT( $WITH_LINKER_HASH_STYLE )\n    else\n        AC_MSG_RESULT( no )\n    fi\n    LDFLAGS=$hash_style_ldflags_save\nelse\n    AC_MSG_RESULT( no )\nfi\nAC_SUBST(HAVE_LD_HASH_STYLE)\nAC_SUBST(WITH_LINKER_HASH_STYLE)\n\ndnl ===================================================================\ndnl Check whether there's a Perl version available.\ndnl ===================================================================\nif test -z \"$with_perl_home\"; then\n    AC_PATH_PROG(PERL, perl)\nelse\n    test \"$build_os\" = \"cygwin\" && with_perl_home=`cygpath -u \"$with_perl_home\"`\n    _perl_path=\"$with_perl_home/bin/perl\"\n    if test -x \"$_perl_path\"; then\n        PERL=$_perl_path\n    else\n        AC_MSG_ERROR([$_perl_path not found])\n    fi\nfi\n\ndnl ===================================================================\ndnl Testing for Perl version 5 or greater.\ndnl $] is the Perl version variable, it is returned as an integer\ndnl ===================================================================\nif test \"$PERL\"; then\n    AC_MSG_CHECKING([the Perl version])\n    ${PERL} -e \"exit($]);\"\n    _perl_version=$?\n    if test \"$_perl_version\" -lt 5; then\n        AC_MSG_ERROR([found Perl $_perl_version, use Perl 5])\n    fi\n    AC_MSG_RESULT([Perl $_perl_version])\nelse\n    AC_MSG_ERROR([Perl not found, install Perl 5])\nfi\n\ndnl ===================================================================\ndnl Testing for required Perl modules\ndnl ===================================================================\n\nAC_MSG_CHECKING([for required Perl modules])\ndnl Digest::MD5 seems only be used for packaging, but is basically a given\nperl_use_string=\"use Cwd ; use Digest::MD5\"\nperl_use_string_spp=\"use Cwd ; use Digest::MD5\"\nif test \"$_os\" = \"WINNT\"; then\n    if test -n \"$PKGFORMAT\"; then\n        for i in $PKGFORMAT; do\n            case \"$i\" in\n            msi)\n                # for getting fonts versions to use in MSI\n                if test -n \"$WSL_ONLY_AS_HELPER\"; then\n                    # in case of a wsl-as-helper build, the packaging is done using strawberry-perl\n                    # and not the perl provided by git-bash\n                    perl_use_string_spp=\"$perl_use_string_spp ; use Font::TTF::Font\"\n                else\n                    perl_use_string=\"$perl_use_string ; use Font::TTF::Font\"\n                fi\n                ;;\n            esac\n        done\n    fi\nfi\nif test \"$with_system_hsqldb\" = \"yes\"; then\n    perl_use_string=\"$perl_use_string ; use Archive::Zip\"\nfi\nif test \"$enable_openssl\" = \"yes\" -a \"$with_system_openssl\" != \"yes\"; then\n    # OpenSSL needs that to build\n    if test -n \"$WSL_ONLY_AS_HELPER\"; then\n        # OpenSSL is built via spp, FindBin is provided by default, but deps might change in future\n        perl_use_string_spp=\"$perl_use_string_spp ; use FindBin\"\n    else\n        perl_use_string=\"$perl_use_string ; use FindBin\"\n    fi\nfi\ndnl in WSL_ONLY_AS_HELPER case the test should be done with git-bash-provided-perl and not perl from\ndnl the wsl container, but that can wait until we require a module that's not provided by default\nif $PERL -e \"$perl_use_string\">/dev/null 2>&1; then\n    AC_MSG_RESULT([all modules found])\n    if test -n \"$WSL_ONLY_AS_HELPER\"; then\n        AC_MSG_CHECKING([for required Perl modules in Strawberry Perl])\n        if $STRAWBERRY_PERL_UNIX -e \"$perl_use_string_spp\">/dev/null 2>&1; then\n            AC_MSG_RESULT([all modules found])\n        else\n            AC_MSG_RESULT([failed to find some modules])\n            # Find out which modules are missing.\n            for i in $perl_use_string_spp; do\n                if test \"$i\" != \"use\" -a \"$i\" != \";\"; then\n                    if ! $STRAWBERRY_PERL_UNIX -e \"use $i;\">/dev/null 2>&1; then\n                        missing_perl_modules=\"$missing_perl_modules $i\"\n                    fi\n                fi\n            done\n            PathFormat \"$(dirname $STRAWBERRY_PERL_UNIX)\"\n            spp_cpan_command='PATH=\"$(cygpath.exe -up \"'$STRAWBERRY_TOOLS';'$formatted_path'\"):$PATH\" cpanm'\n            AC_MSG_ERROR([\n            The missing Perl modules are: $missing_perl_modules\n            Install them with »$spp_cpan_command $missing_perl_modules«])\n        fi\n    fi\nelse\n    AC_MSG_RESULT([failed to find some modules])\n    # Find out which modules are missing.\n    for i in $perl_use_string; do\n        if test \"$i\" != \"use\" -a \"$i\" != \";\"; then\n            if ! $PERL -e \"use $i;\">/dev/null 2>&1; then\n                missing_perl_modules=\"$missing_perl_modules $i\"\n            fi\n        fi\n    done\n    AC_MSG_ERROR([\n    The missing Perl modules are: $missing_perl_modules\n    Install them as superuser/administrator with \"cpan -i $missing_perl_modules\"])\nfi\n\ndnl ===================================================================\ndnl Check for pkg-config\ndnl ===================================================================\nif test \"$_os\" != \"WINNT\"; then\n    PKG_PROG_PKG_CONFIG\nfi\nAC_SUBST(PKG_CONFIG)\nAC_SUBST(PKG_CONFIG_PATH)\nAC_SUBST(PKG_CONFIG_LIBDIR)\n\nif test \"$_os\" != \"WINNT\"; then\n\n    # If you use CC=/path/to/compiler/foo-gcc or even CC=\"ccache\n    # /path/to/compiler/foo-gcc\" you need to set the AR etc env vars\n    # explicitly. Or put /path/to/compiler in PATH yourself.\n\n    toolprefix=gcc\n    if test \"$COM_IS_CLANG\" = \"TRUE\"; then\n        toolprefix=llvm\n    fi\n    AC_CHECK_TOOLS(AR,$toolprefix-ar ar)\n    AC_CHECK_TOOLS(NM,$toolprefix-nm nm)\n    AC_CHECK_TOOLS(RANLIB,$toolprefix-ranlib ranlib)\n    AC_CHECK_TOOLS(OBJDUMP,$toolprefix-objdump objdump)\n    AC_CHECK_TOOLS(READELF,$toolprefix-readelf readelf)\n    AC_CHECK_TOOLS(STRIP,$toolprefix-strip strip)\nfi\nAC_SUBST(AR)\nAC_SUBST(NM)\nAC_SUBST(OBJDUMP)\nAC_SUBST(RANLIB)\nAC_SUBST(READELF)\nAC_SUBST(STRIP)\n\ndnl ===================================================================\ndnl pkg-config checks on macOS\ndnl ===================================================================\n\nif test $_os = Darwin; then\n    AC_MSG_CHECKING([for bogus pkg-config])\n    if test -n \"$PKG_CONFIG\"; then\n        if test \"$PKG_CONFIG\" = /usr/bin/pkg-config && ls -l /usr/bin/pkg-config | $GREP -q Mono.framework; then\n            AC_MSG_ERROR([yes, from Mono. This *will* break the build. Please remove or hide $PKG_CONFIG])\n        else\n            if test \"$enable_bogus_pkg_config\" = \"yes\"; then\n                AC_MSG_RESULT([yes, user-approved from unknown origin.])\n            else\n                AC_MSG_ERROR([yes, from unknown origin. This *will* break the build. Please modify your PATH variable so that $PKG_CONFIG is no longer found by configure scripts.])\n            fi\n        fi\n    else\n        AC_MSG_RESULT([no, good])\n    fi\nfi\n\nfind_csc()\n{\n    # Return value: $csctest\n\n    unset csctest\n\n    reg_get_value_32 \"HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/NET Framework Setup/NDP/v4/Client\" \"InstallPath\"\n    if test -n \"$regvalue\"; then\n        csctest=$regvalue\n        return\n    fi\n}\n\nfind_al()\n{\n    # Return value: $altest\n\n    unset altest\n\n    # We need this check to detect 4.6.1 or above.\n    for ver in 4.8.1 4.8 4.7.2 4.7.1 4.7 4.6.2 4.6.1; do\n        reg_get_value_32 \"HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Microsoft SDKs/NETFXSDK/$ver/WinSDK-NetFx40Tools\" \"InstallationFolder\"\n        PathFormat \"$regvalue\"\n        if test -n \"$regvalue\" -a \\( -f \"$formatted_path_unix/al.exe\" -o -f \"$formatted_path_unix/bin/al.exe\" \\); then\n            altest=$regvalue\n            return\n        fi\n    done\n\n    reg_list_values_32 \"HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Microsoft SDKs/Windows\"\n    for x in $reglist; do\n        reg_get_value_32 \"HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Microsoft SDKs/Windows/$x/WinSDK-NetFx40Tools\" \"InstallationFolder\"\n        PathFormat \"$regvalue\"\n        if test -n \"$regvalue\" -a \\( -f \"$formatted_path_unix/al.exe\" -o -f \"$formatted_path_unix/bin/al.exe\" \\); then\n            altest=$regvalue\n            return\n        fi\n    done\n}\n\nfind_dotnetsdk()\n{\n    unset frametest\n\n    for ver in 4.8.1 4.8 4.7.2 4.7.1 4.7 4.6.2 4.6.1 4.6; do\n        reg_get_value_32 \"HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Microsoft SDKs/NETFXSDK/$ver\" \"KitsInstallationFolder\"\n        if test -n \"$regvalue\"; then\n            frametest=$regvalue\n            return\n        fi\n    done\n    AC_MSG_ERROR([The Windows NET SDK (minimum 4.6) not found, check the installation])\n}\n\nfind_winsdk_version()\n{\n    # Args: $1 : SDK version as in \"8.0\", \"8.1A\" etc\n    # Return values: $winsdktest, $winsdkbinsubdir, $winsdklibsubdir\n\n    unset winsdktest winsdkbinsubdir winsdklibsubdir\n\n    case \"$1\" in\n    8.0|8.0A)\n        reg_get_value_32 \"HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Windows Kits/Installed Roots\" \"KitsRoot\"\n        if test -n \"$regvalue\"; then\n            winsdktest=$regvalue\n            winsdklibsubdir=win8\n            return\n        fi\n        ;;\n    8.1|8.1A)\n        reg_get_value_32 \"HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Windows Kits/Installed Roots\" \"KitsRoot81\"\n        if test -n \"$regvalue\"; then\n            winsdktest=$regvalue\n            winsdklibsubdir=winv6.3\n            return\n        fi\n        ;;\n    10.0)\n        reg_get_value_32 \"HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Microsoft SDKs/Windows/v${1}\" \"InstallationFolder\"\n        if test -n \"$regvalue\"; then\n            winsdktest=$regvalue\n            reg_get_value_32 \"HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Microsoft SDKs/Windows/v${1}\" \"ProductVersion\"\n            if test -n \"$regvalue\"; then\n                winsdkbinsubdir=\"$regvalue\".0\n                winsdklibsubdir=$winsdkbinsubdir\n                local tmppath=\"$winsdktest\\\\Include\\\\$winsdklibsubdir\"\n                PathFormat \"$tmppath\"\n                local tmppath_unix=$formatted_path_unix\n                # test exist the SDK path\n                if test ! -d \"$tmppath_unix\"; then\n                   AC_MSG_ERROR([The Windows SDK not found, check the installation])\n                fi\n            fi\n            return\n        fi\n        ;;\n    esac\n}\n\nfind_winsdk()\n{\n    # Return value: From find_winsdk_version\n\n    unset winsdktest\n\n    for ver in $WINDOWS_SDK_ACCEPTABLE_VERSIONS; do\n        find_winsdk_version $ver\n        if test -n \"$winsdktest\"; then\n            return\n        fi\n    done\n}\n\nfind_msms()\n{\n    # Return value: $msmdir\n    local version=\"$1\"\n\n    AC_MSG_CHECKING([for MSVC $version merge modules directory])\n    local my_msm_file=\"Microsoft_VC${version}_CRT_x86.msm\"\n    local my_msm_dir\n\n    echo \"$as_me:$LINENO: searching for $my_msm_file\" >&5\n\n    msmdir=\n    case \"$VCVER\" in\n    16.0 | 17.0 | 17.13)\n        for l in `ls -1 $VC_PRODUCT_DIR/redist/MSVC/`; do\n            my_msm_dir=\"$VC_PRODUCT_DIR/redist/MSVC/$l/MergeModules/\"\n            echo \"$as_me:$LINENO: looking for $my_msm_dir${my_msm_file}])\" >&5\n            if test -e \"$my_msm_dir${my_msm_file}\"; then\n                msmdir=$my_msm_dir\n            fi\n        done\n        ;;\n    esac\n\n    if test -n \"$msmdir\"; then\n        PathFormat \"$msmdir\"\n        msmdir=\"$formatted_path\"\n        AC_MSG_RESULT([$msmdir])\n    else\n        if test \"$ENABLE_RELEASE_BUILD\" = \"TRUE\" ; then\n            AC_MSG_FAILURE([not found])\n        else\n            AC_MSG_WARN([not found (check config.log)])\n            add_warning \"MSM ${my_msm_file} not found\"\n        fi\n    fi\n}\n\nfind_msvc_x64_dlls()\n{\n    # Return value: $msvcdllpath, $msvcdlls\n\n    AC_MSG_CHECKING([for MSVC x64 DLL path])\n\n    dnl Order crtver in increasing order. Then check the directories returned by\n    dnl ls in an inner loop; assuming they are also ordered in increasing order,\n    dnl the result will be the highest CRT version found in the highest directory.\n\n    msvcdllpath=\"$VC_PRODUCT_DIR/redist/x64/Microsoft.VC${VCVER}.CRT\"\n    case \"$VCVER\" in\n    16.0 | 17.0 | 17.13)\n        for crtver in 141 142 143; do\n            for l in `ls -1 $VC_PRODUCT_DIR/redist/MSVC/`; do\n                echo \"$as_me:$LINENO: testing $VC_PRODUCT_DIR/redist/MSVC/$l/x64/Microsoft.VC$crtver.CRT\" >&5\n                if test -d \"$VC_PRODUCT_DIR/redist/MSVC/$l/x64/Microsoft.VC$crtver.CRT\"; then\n                    msvcdllpath=\"$VC_PRODUCT_DIR/redist/MSVC/$l/x64/Microsoft.VC$crtver.CRT\"\n                fi\n            done\n        done\n        ;;\n    esac\n    AC_MSG_RESULT([$msvcdllpath])\n    AC_MSG_CHECKING([for MSVC x64 DLLs])\n    msvcdlls=\"msvcp140.dll vcruntime140.dll\"\n    for dll in $msvcdlls; do\n        if ! test -f \"$msvcdllpath/$dll\"; then\n            AC_MSG_FAILURE([missing $dll])\n        fi\n    done\n    AC_MSG_RESULT([found all ($msvcdlls)])\n}\n\ndnl =========================================\ndnl Check for the Windows  SDK.\ndnl =========================================\nif test \"$_os\" = \"WINNT\"; then\n    AC_MSG_CHECKING([for Windows SDK])\n    if test \"$build_os\" = \"cygwin\" -o \"$build_os\" = \"wsl\" -o -n \"$WSL_ONLY_AS_HELPER\"; then\n        find_winsdk\n        WINDOWS_SDK_HOME=$winsdktest\n\n        # normalize if found\n        if test -n \"$WINDOWS_SDK_HOME\"; then\n            PathFormat \"$WINDOWS_SDK_HOME\"\n            WINDOWS_SDK_HOME=$formatted_path_unix\n        fi\n\n        WINDOWS_SDK_LIB_SUBDIR=$winsdklibsubdir\n        # The variable also contains the Windows SDK version\n        echo $WINDOWS_SDK_LIB_SUBDIR\n        # Assuming maximum of 5 digits for each part and ignoring last part\n        SDK_NORMALIZED_VER=$(echo $WINDOWS_SDK_LIB_SUBDIR | awk -F. '{printf(\"%d%05d%05d\\n\", $1, $2, $3)}')\n        # 10.0.20348.0 is the minimum required version\n        if test \"$SDK_NORMALIZED_VER\" -lt 100000020348; then\n            AC_MSG_ERROR([You need Windows SDK greater than or equal 10.0.20348.0])\n        fi\n    fi\n\n    if test -n \"$WINDOWS_SDK_HOME\"; then\n        # Remove a possible trailing backslash\n        WINDOWS_SDK_HOME=`echo $WINDOWS_SDK_HOME | $SED 's/\\/$//'`\n\n        if test -f \"$WINDOWS_SDK_HOME/Include/adoint.h\" \\\n             -a -f \"$WINDOWS_SDK_HOME/Include/SqlUcode.h\" \\\n             -a -f \"$WINDOWS_SDK_HOME/Include/usp10.h\"; then\n            have_windows_sdk_headers=yes\n        elif test -f \"$WINDOWS_SDK_HOME/Include/um/adoint.h\" \\\n             -a -f \"$WINDOWS_SDK_HOME/Include/um/SqlUcode.h\" \\\n             -a -f \"$WINDOWS_SDK_HOME/Include/um/usp10.h\"; then\n            have_windows_sdk_headers=yes\n        elif test -f \"$WINDOWS_SDK_HOME/Include/$winsdklibsubdir/um/adoint.h\" \\\n             -a -f \"$WINDOWS_SDK_HOME/Include/$winsdklibsubdir/um/SqlUcode.h\" \\\n             -a -f \"$WINDOWS_SDK_HOME/Include/$winsdklibsubdir/um/usp10.h\"; then\n            have_windows_sdk_headers=yes\n        else\n            have_windows_sdk_headers=no\n        fi\n\n        if test -f \"$WINDOWS_SDK_HOME/lib/user32.lib\"; then\n            have_windows_sdk_libs=yes\n        elif test -f \"$WINDOWS_SDK_HOME/lib/$winsdklibsubdir/um/$WIN_BUILD_ARCH/user32.lib\"; then\n            have_windows_sdk_libs=yes\n        else\n            have_windows_sdk_libs=no\n        fi\n\n        if test $have_windows_sdk_headers = no -o $have_windows_sdk_libs = no; then\n            AC_MSG_ERROR([Some (all?) Windows SDK files not found, please check if all needed parts of\nthe  Windows SDK are installed.])\n        fi\n    fi\n\n    if test -z \"$WINDOWS_SDK_HOME\"; then\n        AC_MSG_RESULT([no, hoping the necessary headers and libraries will be found anyway!?])\n    elif echo $WINDOWS_SDK_HOME | grep \"8.0\" >/dev/null 2>/dev/null; then\n        WINDOWS_SDK_VERSION=80\n        AC_MSG_RESULT([found Windows SDK 8.0 ($WINDOWS_SDK_HOME)])\n    elif echo $WINDOWS_SDK_HOME | grep \"8.1\" >/dev/null 2>/dev/null; then\n        WINDOWS_SDK_VERSION=81\n        AC_MSG_RESULT([found Windows SDK 8.1 ($WINDOWS_SDK_HOME)])\n    elif echo $WINDOWS_SDK_HOME | grep \"/10\" >/dev/null 2>/dev/null; then\n        WINDOWS_SDK_VERSION=10\n        AC_MSG_RESULT([found Windows SDK 10.0 ($WINDOWS_SDK_HOME)])\n    else\n        AC_MSG_ERROR([Found legacy Windows Platform SDK ($WINDOWS_SDK_HOME)])\n    fi\n    PathFormat \"$WINDOWS_SDK_HOME\"\n    WINDOWS_SDK_HOME=\"$formatted_path\"\n    WINDOWS_SDK_HOME_unix=\"$formatted_path_unix\"\n    if test \"$build_os\" = \"cygwin\" -o \"$build_os\" = \"wsl\" -o -n \"$WSL_ONLY_AS_HELPER\"; then\n        SOLARINC=\"$SOLARINC -I$WINDOWS_SDK_HOME/include -I$COMPATH/Include\"\n        if test -d \"$WINDOWS_SDK_HOME_unix/include/um\"; then\n            SOLARINC=\"$SOLARINC -I$WINDOWS_SDK_HOME/include/um -I$WINDOWS_SDK_HOME/include/shared\"\n        elif test -d \"$WINDOWS_SDK_HOME_unix/Include/$winsdklibsubdir/um\"; then\n            SOLARINC=\"$SOLARINC -I$WINDOWS_SDK_HOME/Include/$winsdklibsubdir/um -I$WINDOWS_SDK_HOME/Include/$winsdklibsubdir/shared\"\n        fi\n    fi\n\n    dnl TODO: solenv/bin/modules/installer/windows/msiglobal.pm wants to use a\n    dnl WiLangId.vbs that is included only in some SDKs (e.g., included in v7.1\n    dnl but not in v8.0), so allow this to be overridden with a\n    dnl WINDOWS_SDK_WILANGID for now; a full-blown --with-windows-sdk-wilangid\n    dnl and configuration error if no WiLangId.vbs is found would arguably be\n    dnl better, but I do not know under which conditions exactly it is needed by\n    dnl msiglobal.pm:\n    if test -z \"$WINDOWS_SDK_WILANGID\" -a -n \"$WINDOWS_SDK_HOME\"; then\n        WINDOWS_SDK_WILANGID_unix=$WINDOWS_SDK_HOME_unix/Samples/sysmgmt/msi/scripts/WiLangId.vbs\n        if ! test -e \"$WINDOWS_SDK_WILANGID_unix\" ; then\n            WINDOWS_SDK_WILANGID_unix=\"${WINDOWS_SDK_HOME_unix}/bin/${WINDOWS_SDK_LIB_SUBDIR}/${WIN_BUILD_ARCH}/WiLangId.vbs\"\n        fi\n        if ! test -e \"$WINDOWS_SDK_WILANGID_unix\" ; then\n            WINDOWS_SDK_WILANGID_unix=$WINDOWS_SDK_HOME_unix/bin/$WIN_BUILD_ARCH/WiLangId.vbs\n        fi\n        if ! test -e \"$WINDOWS_SDK_WILANGID_unix\" ; then\n            WINDOWS_SDK_WILANGID_unix=\"C:/Program Files (x86)/Windows Kits/8.1/bin/$WIN_BUILD_ARCH/WiLangId.vbs\"\n        fi\n        PathFormat \"$WINDOWS_SDK_WILANGID_unix\"\n        WINDOWS_SDK_WILANGID=\"$formatted_path\"\n    fi\n    if test -n \"$with_lang\" -a \"$with_lang\" != \"en-US\"; then\n        if test -n \"$with_package_format\" -a \"$with_package_format\" != no; then\n            for i in \"$with_package_format\"; do\n                if test \"$i\" = \"msi\"; then\n                    if ! test -e \"$WINDOWS_SDK_WILANGID_unix\" ; then\n                        AC_MSG_ERROR([WiLangId.vbs not found - building translated packages will fail])\n                    fi\n                fi\n            done\n        fi\n    fi\nfi\nAC_SUBST(WINDOWS_SDK_HOME)\nAC_SUBST(WINDOWS_SDK_LIB_SUBDIR)\nAC_SUBST(WINDOWS_SDK_VERSION)\nAC_SUBST(WINDOWS_SDK_WILANGID)\n\nif test \"$build_os\" = \"cygwin\" -o \"$build_os\" = \"wsl\" -o -n \"$WSL_ONLY_AS_HELPER\"; then\n    dnl Check midl.exe; this being the first check for a tool in the SDK bin\n    dnl dir, it also determines that dir's path w/o an arch segment if any,\n    dnl WINDOWS_SDK_BINDIR_NO_ARCH:\n    AC_MSG_CHECKING([for midl.exe])\n\n    find_winsdk\n    PathFormat \"$winsdktest\"\n    winsdktest_unix=\"$formatted_path_unix\"\n\n    if test -n \"$winsdkbinsubdir\" \\\n        -a -f \"$winsdktest_unix/Bin/$winsdkbinsubdir/$WIN_BUILD_ARCH/midl.exe\"\n    then\n        MIDL_PATH=$winsdktest_unix/Bin/$winsdkbinsubdir/$WIN_BUILD_ARCH\n        WINDOWS_SDK_BINDIR_NO_ARCH=$WINDOWS_SDK_HOME_unix/Bin/$winsdkbinsubdir\n    elif test -f \"$winsdktest_unix/Bin/$WIN_BUILD_ARCH/midl.exe\"; then\n        MIDL_PATH=$winsdktest_unix/Bin/$WIN_BUILD_ARCH\n        WINDOWS_SDK_BINDIR_NO_ARCH=$WINDOWS_SDK_HOME_unix/Bin\n    elif test -f \"$winsdktest_unix/Bin/midl.exe\"; then\n        MIDL_PATH=$winsdktest_unix/Bin\n        WINDOWS_SDK_BINDIR_NO_ARCH=$WINDOWS_SDK_HOME_unix/Bin\n    fi\n    PathFormat \"$MIDL_PATH\"\n    if test ! -f \"$formatted_path_unix/midl.exe\"; then\n        AC_MSG_ERROR([midl.exe not found in $winsdktest/Bin/$WIN_BUILD_ARCH, Windows SDK installation broken?])\n    else\n        AC_MSG_RESULT([$MIDL_PATH/midl.exe])\n    fi\n\n    # Convert to posix path with 8.3 filename restrictions ( No spaces )\n    MIDL_PATH=`win_short_path_for_make \"$MIDL_PATH\"`\n\n    if test -f \"$WINDOWS_SDK_BINDIR_NO_ARCH/msiinfo.exe\" \\\n         -a -f \"$WINDOWS_SDK_BINDIR_NO_ARCH/msidb.exe\" \\\n         -a -f \"$WINDOWS_SDK_BINDIR_NO_ARCH/uuidgen.exe\" \\\n         -a -f \"$WINDOWS_SDK_BINDIR_NO_ARCH/msitran.exe\"; then :\n    elif test -f \"$WINDOWS_SDK_BINDIR_NO_ARCH/x86/msiinfo.exe\" \\\n         -a -f \"$WINDOWS_SDK_BINDIR_NO_ARCH/x86/msidb.exe\" \\\n         -a -f \"$WINDOWS_SDK_BINDIR_NO_ARCH/x86/uuidgen.exe\" \\\n         -a -f \"$WINDOWS_SDK_BINDIR_NO_ARCH/x86/msitran.exe\"; then :\n    elif test -f \"$WINDOWS_SDK_HOME/bin/x86/msiinfo.exe\" \\\n         -a -f \"$WINDOWS_SDK_HOME/bin/x86/msidb.exe\" \\\n         -a -f \"$WINDOWS_SDK_BINDIR_NO_ARCH/x86/uuidgen.exe\" \\\n         -a -f \"$WINDOWS_SDK_HOME/bin/x86/msitran.exe\"; then :\n    else\n        AC_MSG_ERROR([Some (all?) Windows Installer tools in the Windows SDK are missing, please install.])\n    fi\n\n    PathFormat \"$MIDL_PATH\"\n    MIDL_PATH=\"$formatted_path\"\n\n    if test \"$enable_cli\" = yes; then\n        dnl Check csc.exe\n        AC_MSG_CHECKING([for csc.exe])\n        find_csc\n        PathFormat \"$csctest\"\n        csctest_unix=\"$formatted_path_unix\"\n        if test -f \"$csctest_unix/csc.exe\"; then\n            CSC_PATH=\"$csctest\"\n        fi\n        if test ! -f \"$csctest_unix/csc.exe\"; then\n            AC_MSG_ERROR([csc.exe not found as $CSC_PATH/csc.exe])\n        else\n            AC_MSG_RESULT([$CSC_PATH/csc.exe])\n        fi\n\n        CSC_PATH=`win_short_path_for_make \"$CSC_PATH\"`\n\n        dnl Check al.exe\n        AC_MSG_CHECKING([for al.exe])\n        if test -n \"$winsdkbinsubdir\" \\\n            -a -f \"$winsdktest_unix/Bin/$winsdkbinsubdir/$WIN_BUILD_ARCH/al.exe\"\n        then\n            AL_PATH=\"$winsdktest/Bin/$winsdkbinsubdir/$WIN_BUILD_ARCH\"\n        elif test -f \"$winsdktest_unix/Bin/$WIN_BUILD_ARCH/al.exe\"; then\n            AL_PATH=\"$winsdktest/Bin/$WIN_BUILD_ARCH\"\n        elif test -f \"$winsdktest_unix/Bin/al.exe\"; then\n            AL_PATH=\"$winsdktest/Bin\"\n        fi\n\n        if test -z \"$AL_PATH\"; then\n            find_al\n            PathFormat \"$altest\"\n            altest_unix=\"$formatted_path_unix\"\n            if test -f \"$altest_unix/bin/al.exe\"; then\n                AL_PATH=\"$altest/bin\"\n            elif test -f \"$altest_unix/al.exe\"; then\n                AL_PATH=\"$altest\"\n            fi\n        fi\n        PathFormat \"$AL_PATH\"\n        if test ! -f \"$formatted_path_unix/al.exe\"; then\n            AC_MSG_ERROR([al.exe not found as $AL_PATH/al.exe])\n        else\n            AC_MSG_RESULT([$AL_PATH/al.exe])\n        fi\n\n        AL_PATH=`win_short_path_for_make \"$AL_PATH\"`\n\n        dnl Check mscoree.lib / .NET Framework dir\n        AC_MSG_CHECKING(.NET Framework)\n        find_dotnetsdk\n        PathFormat \"$frametest\"\n        frametest=\"$formatted_path_unix\"\n        if test -f \"$frametest/Lib/um/$WIN_BUILD_ARCH/mscoree.lib\"; then\n            DOTNET_FRAMEWORK_HOME=\"$frametest\"\n        else\n            if test -f \"$winsdktest_unix/lib/mscoree.lib\" -o -f \"$winsdktest_unix/lib/$winsdklibsubdir/um/$WIN_BUILD_ARCH/mscoree.lib\"; then\n                DOTNET_FRAMEWORK_HOME=\"$winsdktest\"\n            fi\n        fi\n        PathFormat \"$DOTNET_FRAMEWORK_HOME\"\n        if test ! -f \"$formatted_path_unix/lib/mscoree.lib\" -a ! -f \"$formatted_path_unix/lib/$winsdklibsubdir/um/$WIN_BUILD_ARCH/mscoree.lib\" -a ! -f \"$formatted_path_unix/Lib/um/$WIN_BUILD_ARCH/mscoree.lib\"; then\n            AC_MSG_ERROR([mscoree.lib not found])\n        fi\n        AC_MSG_RESULT([found: $DOTNET_FRAMEWORK_HOME])\n\n        PathFormat \"$AL_PATH\"\n        AL_PATH=\"$formatted_path\"\n\n        PathFormat \"$DOTNET_FRAMEWORK_HOME\"\n        DOTNET_FRAMEWORK_HOME=\"$formatted_path\"\n\n        PathFormat \"$CSC_PATH\"\n        CSC_PATH=\"$formatted_path\"\n\n        ENABLE_CLI=\"TRUE\"\n    else\n        ENABLE_CLI=\"\"\n    fi\nelse\n    ENABLE_CLI=\"\"\nfi\nAC_SUBST(ENABLE_CLI)\n\ndnl ===================================================================\ndnl Testing for C++ compiler and version...\ndnl ===================================================================\n\nif test \"$_os\" != \"WINNT\"; then\n    # AC_PROG_CXX sets CXXFLAGS to -g -O2 if not set, avoid that (and avoid -O2 during AC_PROG_CXX,\n    # see AC_PROG_CC above):\n    save_CXXFLAGS=$CXXFLAGS\n    CXXFLAGS=-g\n    AC_PROG_CXX\n    CXXFLAGS=$save_CXXFLAGS\n    if test -z \"$CXX_BASE\"; then\n        CXX_BASE=`first_arg_basename \"$CXX\"`\n    fi\nfi\n\nCC=\"$CC $with_extra_cc_flags\"\nCXX=\"$CXX $with_extra_cxx_flags\"\n\ndnl check for GNU C++ compiler version\nif test \"$GXX\" = \"yes\" -a -z \"$COM_IS_CLANG\"; then\n    AC_MSG_CHECKING([the GNU C++ compiler version])\n\n    _gpp_version=`$CXX -dumpversion`\n    _gpp_majmin=`echo $_gpp_version | $AWK -F. '{ print \\$1*100+\\$2 }'`\n\n    if test \"$_gpp_majmin\" -lt \"1200\"; then\n        AC_MSG_ERROR([You need to use GNU C++ compiler version >= 12.0 to build LibreOffice, you have $_gpp_version.])\n    else\n        AC_MSG_RESULT([ok (g++ $_gpp_version)])\n    fi\n\n    dnl see https://issuetracker.google.com/issues/36962819\n        glibcxx_threads=no\n        AC_LANG_PUSH([C++])\n        AC_REQUIRE_CPP\n        AC_MSG_CHECKING([whether $CXX_BASE is broken with boost.thread])\n        AC_PREPROC_IFELSE([AC_LANG_PROGRAM([[\n            #include <bits/c++config.h>]],[[\n            #if !defined(_GLIBCXX_HAVE_GTHR_DEFAULT) \\\n            && !defined(_GLIBCXX__PTHREADS) \\\n            && !defined(_GLIBCXX_HAS_GTHREADS)\n            choke me\n            #endif\n        ]])],[AC_MSG_RESULT([yes])\n        glibcxx_threads=yes],[AC_MSG_RESULT([no])])\n        AC_LANG_POP([C++])\n        if test $glibcxx_threads = yes; then\n            BOOST_CXXFLAGS=\"-D_GLIBCXX_HAS_GTHREADS\"\n        fi\nfi\nAC_SUBST(BOOST_CXXFLAGS)\n\n#\n# prefx CXX with ccache if needed\n#\nif test \"$CCACHE\" != \"\"; then\n    AC_MSG_CHECKING([whether $CXX_BASE is already ccached])\n    AC_LANG_PUSH([C++])\n    save_CXXFLAGS=$CXXFLAGS\n    CXXFLAGS=\"$CXXFLAGS --ccache-skip -O2\"\n    # msvc does not fail on unknown options, check stdout\n    if test \"$COM\" = MSC; then\n        CXXFLAGS=\"$CXXFLAGS -nologo\"\n    fi\n    save_ac_cxx_werror_flag=$ac_cxx_werror_flag\n    ac_cxx_werror_flag=yes\n    dnl an empty program will do, we're checking the compiler flags\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([],[])],\n                      [use_ccache=yes], [use_ccache=no])\n    if test $use_ccache = yes -a \"${CCACHE##*sccache*}\" != \"\"; then\n        AC_MSG_RESULT([yes])\n    else\n        CXX=\"$CCACHE $CXX\"\n        CXX_BASE=\"ccache $CXX_BASE\"\n        AC_MSG_RESULT([no])\n    fi\n    CXXFLAGS=$save_CXXFLAGS\n    ac_cxx_werror_flag=$save_ac_cxx_werror_flag\n    AC_LANG_POP([C++])\nfi\n\ndnl ===================================================================\ndnl Find pre-processors.(should do that _after_ messing with CC/CXX)\ndnl ===================================================================\n\nif test \"$_os\" != \"WINNT\"; then\n    AC_PROG_CXXCPP\n\n    dnl Check whether there's a C pre-processor.\n    AC_PROG_CPP\nfi\n\n\ndnl ===================================================================\ndnl Find integral type sizes and alignments\ndnl ===================================================================\n\nif test \"$_os\" != \"WINNT\"; then\n\n    AC_CHECK_SIZEOF(long)\n    AC_CHECK_SIZEOF(short)\n    AC_CHECK_SIZEOF(int)\n    AC_CHECK_SIZEOF(long long)\n    AC_CHECK_SIZEOF(double)\n    AC_CHECK_SIZEOF(void*)\n    AC_CHECK_SIZEOF(size_t)\n\n    SAL_TYPES_SIZEOFSHORT=$ac_cv_sizeof_short\n    SAL_TYPES_SIZEOFINT=$ac_cv_sizeof_int\n    SAL_TYPES_SIZEOFLONG=$ac_cv_sizeof_long\n    SAL_TYPES_SIZEOFLONGLONG=$ac_cv_sizeof_long_long\n    SAL_TYPES_SIZEOFPOINTER=$ac_cv_sizeof_voidp\n    SIZEOF_SIZE_T=$ac_cv_sizeof_size_t\n\n    dnl Allow build without AC_CHECK_ALIGNOF, grrr\n    m4_pattern_allow([AC_CHECK_ALIGNOF])\n    m4_ifdef([AC_CHECK_ALIGNOF],\n        [\n            AC_CHECK_ALIGNOF(short,[#include <stddef.h>])\n            AC_CHECK_ALIGNOF(int,[#include <stddef.h>])\n            AC_CHECK_ALIGNOF(long,[#include <stddef.h>])\n            AC_CHECK_ALIGNOF(double,[#include <stddef.h>])\n        ],\n        [\n            case \"$_os-$host_cpu\" in\n            Linux-i686)\n                test -z \"$ac_cv_alignof_short\" && ac_cv_alignof_short=2\n                test -z \"$ac_cv_alignof_int\" && ac_cv_alignof_int=4\n                test -z \"$ac_cv_alignof_long\" && ac_cv_alignof_long=4\n                test -z \"$ac_cv_alignof_double\" && ac_cv_alignof_double=4\n                ;;\n            Linux-x86_64)\n                test -z \"$ac_cv_alignof_short\" && ac_cv_alignof_short=2\n                test -z \"$ac_cv_alignof_int\" && ac_cv_alignof_int=4\n                test -z \"$ac_cv_alignof_long\" && ac_cv_alignof_long=8\n                test -z \"$ac_cv_alignof_double\" && ac_cv_alignof_double=8\n                ;;\n            *)\n                if test -z \"$ac_cv_alignof_short\" -o \\\n                        -z \"$ac_cv_alignof_int\" -o \\\n                        -z \"$ac_cv_alignof_long\" -o \\\n                        -z \"$ac_cv_alignof_double\"; then\n                   AC_MSG_ERROR([Your Autoconf doesn't have [AC_][CHECK_ALIGNOF]. You need to set the environment variables ac_cv_alignof_short, ac_cv_alignof_int, ac_cv_alignof_long and ac_cv_alignof_double.])\n                fi\n                ;;\n            esac\n        ])\n\n    SAL_TYPES_ALIGNMENT2=$ac_cv_alignof_short\n    SAL_TYPES_ALIGNMENT4=$ac_cv_alignof_int\n    if test $ac_cv_sizeof_long -eq 8; then\n        SAL_TYPES_ALIGNMENT8=$ac_cv_alignof_long\n    elif test $ac_cv_sizeof_double -eq 8; then\n        SAL_TYPES_ALIGNMENT8=$ac_cv_alignof_double\n    else\n        AC_MSG_ERROR([Cannot find alignment of 8 byte types.])\n    fi\n\n    dnl Check for large file support\n    AC_SYS_LARGEFILE\n    if test -n \"$ac_cv_sys_largefile_opts\"  -a \"$ac_cv_sys_largefile_opts\" != \"none needed\" -a \"$ac_cv_sys_largefile_opts\" != \"support not detected\"; then\n        LFS_CFLAGS=\"$ac_cv_sys_largefile_opts\"\n    elif test -n \"$ac_cv_sys_file_offset_bits\" -a \"$ac_cv_sys_file_offset_bits\" != \"no\"; then\n        LFS_CFLAGS=\"-D_FILE_OFFSET_BITS=$ac_cv_sys_file_offset_bits\"\n    fi\n    if test -n \"$ac_cv_sys_large_files\" -a \"$ac_cv_sys_large_files\" != \"no\"; then\n        LFS_CFLAGS=\"$LFS_CFLAGS -D_LARGE_FILES\"\n    fi\nelse\n    # Hardcode for MSVC\n    SAL_TYPES_SIZEOFSHORT=2\n    SAL_TYPES_SIZEOFINT=4\n    SAL_TYPES_SIZEOFLONG=4\n    SAL_TYPES_SIZEOFLONGLONG=8\n    if test $WIN_HOST_BITS -eq 32; then\n        SAL_TYPES_SIZEOFPOINTER=4\n        SIZEOF_SIZE_T=4\n    else\n        SAL_TYPES_SIZEOFPOINTER=8\n        SIZEOF_SIZE_T=8\n    fi\n    SAL_TYPES_ALIGNMENT2=2\n    SAL_TYPES_ALIGNMENT4=4\n    SAL_TYPES_ALIGNMENT8=8\n    LFS_CFLAGS=''\nfi\nAC_SUBST(LFS_CFLAGS)\nAC_SUBST(SIZEOF_SIZE_T)\n\nAC_DEFINE_UNQUOTED(SAL_TYPES_SIZEOFSHORT,$SAL_TYPES_SIZEOFSHORT)\nAC_DEFINE_UNQUOTED(SAL_TYPES_SIZEOFINT,$SAL_TYPES_SIZEOFINT)\nAC_DEFINE_UNQUOTED(SAL_TYPES_SIZEOFLONG,$SAL_TYPES_SIZEOFLONG)\nAC_DEFINE_UNQUOTED(SAL_TYPES_SIZEOFLONGLONG,$SAL_TYPES_SIZEOFLONGLONG)\nAC_DEFINE_UNQUOTED(SAL_TYPES_SIZEOFPOINTER,$SAL_TYPES_SIZEOFPOINTER)\nAC_DEFINE_UNQUOTED(SAL_TYPES_ALIGNMENT2,$SAL_TYPES_ALIGNMENT2)\nAC_DEFINE_UNQUOTED(SAL_TYPES_ALIGNMENT4,$SAL_TYPES_ALIGNMENT4)\nAC_DEFINE_UNQUOTED(SAL_TYPES_ALIGNMENT8,$SAL_TYPES_ALIGNMENT8)\n\ndnl Calc jumbo sheets (1m+ rows) depend on 64 bit tools::Long .\nAC_MSG_CHECKING([whether jumbo sheets are supported])\nif test \"$_os\" != \"WINNT\"; then\n    if test $SAL_TYPES_SIZEOFLONG -gt 4; then\n        AC_MSG_RESULT([yes])\n        ENABLE_JUMBO_SHEETS=TRUE\n        AC_DEFINE(HAVE_FEATURE_JUMBO_SHEETS)\n    else\n        AC_MSG_RESULT([no])\n    fi\nelse\n    if test $WIN_HOST_BITS -gt 32; then\n        # 64bit windows is special-cased for tools::Long because long is 32bit\n        AC_MSG_RESULT([yes])\n        ENABLE_JUMBO_SHEETS=TRUE\n        AC_DEFINE(HAVE_FEATURE_JUMBO_SHEETS)\n    else\n        AC_MSG_RESULT([no])\n    fi\nfi\nAC_SUBST(ENABLE_JUMBO_SHEETS)\n\ndnl ===================================================================\ndnl Check whether to enable runtime optimizations\ndnl ===================================================================\nENABLE_RUNTIME_OPTIMIZATIONS=\nAC_MSG_CHECKING([whether to enable runtime optimizations])\nif test -z \"$enable_runtime_optimizations\"; then\n    for i in $CC; do\n        case $i in\n        -fsanitize=*)\n            enable_runtime_optimizations=no\n            break\n            ;;\n        esac\n    done\nfi\nif test \"$enable_runtime_optimizations\" != no; then\n    ENABLE_RUNTIME_OPTIMIZATIONS=TRUE\n    AC_DEFINE(ENABLE_RUNTIME_OPTIMIZATIONS)\n    AC_MSG_RESULT([yes])\nelse\n    AC_MSG_RESULT([no])\nfi\nAC_SUBST([ENABLE_RUNTIME_OPTIMIZATIONS])\n\ndnl ===================================================================\ndnl Check if valgrind headers are available\ndnl ===================================================================\nENABLE_VALGRIND=\nif test \"$cross_compiling\" != yes -a \"$with_valgrind\" != no; then\n    prev_cppflags=$CPPFLAGS\n    # Is VALGRIND_CFLAGS something one is supposed to have in the environment,\n    # or where does it come from?\n    CPPFLAGS=\"$CPPFLAGS $VALGRIND_CFLAGS\"\n    AC_CHECK_HEADER([valgrind/valgrind.h],\n        [ENABLE_VALGRIND=TRUE])\n    CPPFLAGS=$prev_cppflags\nfi\nAC_SUBST([ENABLE_VALGRIND])\nif test -z \"$ENABLE_VALGRIND\"; then\n    if test \"$with_valgrind\" = yes; then\n        AC_MSG_ERROR([--with-valgrind specified but no Valgrind headers found])\n    fi\n    VALGRIND_CFLAGS=\nfi\nAC_SUBST([VALGRIND_CFLAGS])\n\n\ndnl ===================================================================\ndnl Check if SDT probes (for systemtap, gdb, dtrace) are available\ndnl ===================================================================\n\n# We need at least the sys/sdt.h include header.\nAC_CHECK_HEADER([sys/sdt.h], [SDT_H_FOUND='TRUE'], [SDT_H_FOUND='FALSE'])\nif test \"$SDT_H_FOUND\" = \"TRUE\"; then\n    # Found sys/sdt.h header, now make sure the c++ compiler works.\n    # Old g++ versions had problems with probes in constructors/destructors.\n    AC_MSG_CHECKING([working sys/sdt.h and c++ support])\n    AC_LANG_PUSH([C++])\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n    #include <sys/sdt.h>\n    class ProbeClass\n    {\n    private:\n      int& ref;\n      const char *name;\n\n    public:\n      ProbeClass(int& v, const char *n) : ref(v), name(n)\n      {\n        DTRACE_PROBE2(_test_, cons, name, ref);\n      }\n\n      void method(int min)\n      {\n        DTRACE_PROBE3(_test_, meth, name, ref, min);\n        ref -= min;\n      }\n\n      ~ProbeClass()\n      {\n        DTRACE_PROBE2(_test_, dest, name, ref);\n      }\n    };\n    ]],[[\n    int i = 64;\n    DTRACE_PROBE1(_test_, call, i);\n    ProbeClass inst = ProbeClass(i, \"call\");\n    inst.method(24);\n    ]])], [AC_MSG_RESULT([yes]); AC_DEFINE([USE_SDT_PROBES])],\n          [AC_MSG_RESULT([no, sdt.h or c++ compiler too old])])\n    AC_LANG_POP([C++])\nfi\nAC_CONFIG_HEADERS([config_host/config_probes.h])\n\ndnl ===================================================================\ndnl GCC features\ndnl ===================================================================\nHAVE_GCC_STACK_CLASH_PROTECTION=\nHARDENING_CFLAGS=\nHARDENING_OPT_CFLAGS=\nif test \"$GCC\" = \"yes\" -o \"$COM_IS_CLANG\" = TRUE; then\n    AC_MSG_CHECKING([whether $CC_BASE supports -grecord-gcc-switches])\n    save_CFLAGS=$CFLAGS\n    CFLAGS=\"$CFLAGS -Werror -grecord-gcc-switches\"\n    AC_LINK_IFELSE(\n        [AC_LANG_PROGRAM(, [[return 0;]])],\n        [AC_MSG_RESULT([yes]); HARDENING_CFLAGS=\"$HARDENING_CFLAGS -grecord-gcc-switches\"],\n        [AC_MSG_RESULT([no])])\n    CFLAGS=$save_CFLAGS\n\n    AC_MSG_CHECKING([whether $CC_BASE supports -D_FORTIFY_SOURCE=2])\n    save_CFLAGS=$CFLAGS\n    CFLAGS=\"$CFLAGS -Werror -Wp,-U_FORTIFY_SOURCE,-D_FORTIFY_SOURCE=2\"\n    if test \"$ENABLE_OPTIMIZED\" = TRUE; then\n        CFLAGS=\"$CFLAGS -O2\"\n    fi\n    AC_LINK_IFELSE(\n        [AC_LANG_PROGRAM([[#include <string.h>]], [[return 0;]])],\n        [AC_MSG_RESULT([yes]); HARDENING_OPT_CFLAGS=\"$HARDENING_OPT_CFLAGS -Wp,-U_FORTIFY_SOURCE,-D_FORTIFY_SOURCE=2\"],\n        [AC_MSG_RESULT([no])])\n    CFLAGS=$save_CFLAGS\n\n    AC_MSG_CHECKING([whether $CC_BASE supports -D_GLIBCXX_ASSERTIONS])\n    save_CFLAGS=$CFLAGS\n    CFLAGS=\"$CFLAGS -Werror -Wp,-D_GLIBCXX_ASSERTIONS\"\n    AC_LINK_IFELSE(\n        [AC_LANG_PROGRAM(, [[return 0;]])],\n        [AC_MSG_RESULT([yes]); HARDENING_CFLAGS=\"$HARDENING_CFLAGS -Wp,-D_GLIBCXX_ASSERTIONS\"],\n        [AC_MSG_RESULT([no])])\n    CFLAGS=$save_CFLAGS\n\n    AC_MSG_CHECKING([whether $CC_BASE supports -fstack-clash-protection])\n    save_CFLAGS=$CFLAGS\n    CFLAGS=\"$CFLAGS -Werror -fstack-clash-protection\"\n    AC_LINK_IFELSE(\n        [AC_LANG_PROGRAM(, [[return 0;]])],\n        [AC_MSG_RESULT([yes]); HAVE_GCC_STACK_CLASH_PROTECTION=TRUE; HARDENING_CFLAGS=\"$HARDENING_CFLAGS -fstack-clash-protection\"],\n        [AC_MSG_RESULT([no])])\n    CFLAGS=$save_CFLAGS\n\n    AC_MSG_CHECKING([whether $CC_BASE supports -fcf-protection])\n    save_CFLAGS=$CFLAGS\n    CFLAGS=\"$CFLAGS -Werror -fcf-protection\"\n    AC_LINK_IFELSE(\n        [AC_LANG_PROGRAM(, [[return 0;]])],\n        [AC_MSG_RESULT([yes]); HARDENING_CFLAGS=\"$HARDENING_CFLAGS -fcf-protection\"],\n        [AC_MSG_RESULT([no])])\n    CFLAGS=$save_CFLAGS\n\n    AC_MSG_CHECKING([whether $CC_BASE supports -mno-avx])\n    save_CFLAGS=$CFLAGS\n    CFLAGS=\"$CFLAGS -Werror -mno-avx\"\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([[]], [[ return 0; ]])],[ HAVE_GCC_AVX=TRUE ],[])\n    CFLAGS=$save_CFLAGS\n    if test \"$HAVE_GCC_AVX\" = \"TRUE\"; then\n        AC_MSG_RESULT([yes])\n    else\n        AC_MSG_RESULT([no])\n    fi\n\n    AC_MSG_CHECKING([whether $CC_BASE supports atomic functions])\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([[]], [[\n    int v = 0;\n    if (__sync_add_and_fetch(&v, 1) != 1 ||\n        __sync_sub_and_fetch(&v, 1) != 0)\n        return 1;\n    __sync_synchronize();\n    if (__sync_val_compare_and_swap(&v, 0, 1) != 0 ||\n        v != 1)\n        return 1;\n    return 0;\n]])],[HAVE_GCC_BUILTIN_ATOMIC=TRUE],[])\n    if test \"$HAVE_GCC_BUILTIN_ATOMIC\" = \"TRUE\"; then\n        AC_MSG_RESULT([yes])\n        AC_DEFINE(HAVE_GCC_BUILTIN_ATOMIC)\n    else\n        AC_MSG_RESULT([no])\n    fi\n\n    AC_MSG_CHECKING([whether $CXX_BASE defines __base_class_type_info in cxxabi.h])\n    AC_LANG_PUSH([C++])\n    AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n            #include <cstddef>\n            #include <cxxabi.h>\n            std::size_t f() { return sizeof(__cxxabiv1::__base_class_type_info); }\n        ])], [\n            AC_DEFINE([HAVE_CXXABI_H_BASE_CLASS_TYPE_INFO],[1])\n            AC_MSG_RESULT([yes])\n        ], [AC_MSG_RESULT([no])])\n    AC_LANG_POP([C++])\n\n    AC_MSG_CHECKING([whether $CXX_BASE defines __class_type_info in cxxabi.h])\n    AC_LANG_PUSH([C++])\n    AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n            #include <cstddef>\n            #include <cxxabi.h>\n            std::size_t f() { return sizeof(__cxxabiv1::__class_type_info); }\n        ])], [\n            AC_DEFINE([HAVE_CXXABI_H_CLASS_TYPE_INFO],[1])\n            AC_MSG_RESULT([yes])\n        ], [AC_MSG_RESULT([no])])\n    AC_LANG_POP([C++])\n\n    AC_MSG_CHECKING([whether $CXX_BASE declares __cxa_allocate_exception in cxxabi.h])\n    AC_LANG_PUSH([C++])\n    AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n            #include <cxxabi.h>\n            void * f() { return __cxxabiv1::__cxa_allocate_exception(0); }\n        ])], [\n            AC_DEFINE([HAVE_CXXABI_H_CXA_ALLOCATE_EXCEPTION],[1])\n            AC_MSG_RESULT([yes])\n        ], [AC_MSG_RESULT([no])])\n    AC_LANG_POP([C++])\n\n    AC_MSG_CHECKING([whether $CXX_BASE defines __cxa_eh_globals in cxxabi.h])\n    AC_LANG_PUSH([C++])\n    AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n            #include <cstddef>\n            #include <cxxabi.h>\n            std::size_t f() { return sizeof(__cxxabiv1::__cxa_eh_globals); }\n        ])], [\n            AC_DEFINE([HAVE_CXXABI_H_CXA_EH_GLOBALS],[1])\n            AC_MSG_RESULT([yes])\n        ], [AC_MSG_RESULT([no])])\n    AC_LANG_POP([C++])\n\n    AC_MSG_CHECKING([whether $CXX_BASE defines __cxa_exception in cxxabi.h])\n    AC_LANG_PUSH([C++])\n    AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n            #include <cstddef>\n            #include <cxxabi.h>\n            std::size_t f() { return sizeof(__cxxabiv1::__cxa_exception); }\n        ])], [\n            AC_DEFINE([HAVE_CXXABI_H_CXA_EXCEPTION],[1])\n            AC_MSG_RESULT([yes])\n        ], [AC_MSG_RESULT([no])])\n    AC_LANG_POP([C++])\n\n    AC_MSG_CHECKING([whether $CXX_BASE declares __cxa_get_globals in cxxabi.h])\n    AC_LANG_PUSH([C++])\n    AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n            #include <cxxabi.h>\n            void * f() { return __cxxabiv1::__cxa_get_globals(); }\n        ])], [\n            AC_DEFINE([HAVE_CXXABI_H_CXA_GET_GLOBALS],[1])\n            AC_MSG_RESULT([yes])\n        ], [AC_MSG_RESULT([no])])\n    AC_LANG_POP([C++])\n\n    AC_MSG_CHECKING([whether $CXX_BASE declares __cxa_current_exception_type in cxxabi.h])\n    AC_LANG_PUSH([C++])\n    AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n            #include <cxxabi.h>\n            void * f() { return __cxxabiv1::__cxa_current_exception_type(); }\n        ])], [\n            AC_DEFINE([HAVE_CXXABI_H_CXA_CURRENT_EXCEPTION_TYPE],[1])\n            AC_MSG_RESULT([yes])\n        ], [AC_MSG_RESULT([no])])\n    AC_LANG_POP([C++])\n\n    AC_MSG_CHECKING([whether $CXX_BASE declares __cxa_throw in cxxabi.h])\n    AC_LANG_PUSH([C++])\n    AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n            #include <cxxabi.h>\n            void f() { __cxxabiv1::__cxa_throw(0, 0, 0); }\n        ])], [\n            AC_DEFINE([HAVE_CXXABI_H_CXA_THROW],[1])\n            AC_MSG_RESULT([yes])\n        ], [AC_MSG_RESULT([no])])\n    AC_LANG_POP([C++])\n\n    AC_MSG_CHECKING([whether $CXX_BASE defines __si_class_type_info in cxxabi.h])\n    AC_LANG_PUSH([C++])\n    AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n            #include <cstddef>\n            #include <cxxabi.h>\n            std::size_t f() { return sizeof(__cxxabiv1::__si_class_type_info); }\n        ])], [\n            AC_DEFINE([HAVE_CXXABI_H_SI_CLASS_TYPE_INFO],[1])\n            AC_MSG_RESULT([yes])\n        ], [AC_MSG_RESULT([no])])\n    AC_LANG_POP([C++])\n\n    AC_MSG_CHECKING([whether $CXX_BASE defines __vmi_class_type_info in cxxabi.h])\n    AC_LANG_PUSH([C++])\n    AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n            #include <cstddef>\n            #include <cxxabi.h>\n            std::size_t f() { return sizeof(__cxxabiv1::__vmi_class_type_info); }\n        ])], [\n            AC_DEFINE([HAVE_CXXABI_H_VMI_CLASS_TYPE_INFO],[1])\n            AC_MSG_RESULT([yes])\n        ], [AC_MSG_RESULT([no])])\n    AC_LANG_POP([C++])\nfi\n\nAC_SUBST(HAVE_GCC_AVX)\nAC_SUBST(HAVE_GCC_BUILTIN_ATOMIC)\nAC_SUBST(HAVE_GCC_STACK_CLASH_PROTECTION)\nAC_SUBST(HARDENING_CFLAGS)\nAC_SUBST(HARDENING_OPT_CFLAGS)\n\ndnl ===================================================================\ndnl Identify the C++ library\ndnl ===================================================================\n\nAC_MSG_CHECKING([what the C++ library is])\nHAVE_LIBSTDCPP=\nHAVE_LIBCPP=\nAC_LANG_PUSH([C++])\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#include <utility>\n#ifndef __GLIBCXX__\nfoo bar\n#endif\n]])],\n    [CPP_LIBRARY=GLIBCXX\n     cpp_library_name=\"GNU libstdc++\"\n     HAVE_LIBSTDCPP=TRUE\n    ],\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#include <utility>\n#ifndef _LIBCPP_VERSION\nfoo bar\n#endif\n]])],\n    [CPP_LIBRARY=LIBCPP\n     cpp_library_name=\"LLVM libc++\"\n     AC_DEFINE([HAVE_LIBCPP])\n     HAVE_LIBCPP=TRUE\n    ],\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#include <utility>\n#ifndef _MSC_VER\nfoo bar\n#endif\n]])],\n    [CPP_LIBRARY=MSVCRT\n     cpp_library_name=\"Microsoft\"\n    ],\n    AC_MSG_ERROR([Could not figure out what C++ library this is]))))\nAC_MSG_RESULT([$cpp_library_name])\nAC_LANG_POP([C++])\nAC_SUBST([HAVE_LIBSTDCPP])\nAC_SUBST([HAVE_LIBCPP])\n\nif test -z \"${LIBCPP_DEBUG+x}\" -a -z \"$CROSS_COMPILING\" -a -n \"$HAVE_LIBCPP\" -a -n \"$ENABLE_DBGUTIL\"\nthen\n    # Libc++ has two levels of debug mode, assertions mode enabled with -D_LIBCPP_DEBUG=0,\n    # and actual debug mode enabled with -D_LIBCPP_DEBUG=1 (and starting with LLVM15\n    # assertions mode will be separate and controlled by -D_LIBCPP_ENABLE_ASSERTIONS=1,\n    # although there will be backwards compatibility).\n    # Debug mode is supported by libc++ only if built for it, e.g. Mac libc++ isn't,\n    # and there would be undefined references to debug functions.\n    # Moreover std::to_string() has a bug (https://reviews.llvm.org/D125184).\n    # So check if debug mode can be used and disable or downgrade it to assertions\n    # if needed.\n    AC_MSG_CHECKING([if libc++ has a usable debug mode])\n    AC_LANG_PUSH([C++])\n    libcpp_debug_links=\n    AC_LINK_IFELSE([AC_LANG_SOURCE([[\n#define _LIBCPP_DEBUG 0 // only assertions\n#include <vector>\nint main()\n{\n    std::vector<int> v;\n    v.push_back( 1 );\n    return v[ 3 ];\n}\n]])], [libcpp_debug_links=1])\n    if test -n \"$libcpp_debug_links\"; then\n        # we can use at least assertions, check if debug mode works\n        AC_RUN_IFELSE([AC_LANG_SOURCE([[\n#define _LIBCPP_DEBUG 1 // debug mode\n#include <string>\n#include <vector>\nint foo(const std::vector<int>& v) { return *v.begin(); }\nint main()\n{\n    std::vector<int> v;\n    v.push_back( 1 );\n    std::string s = \"xxxxxxxxxxxxxxxxxxxxxxxxx\" + std::to_string(10);\n    return (foo(v) + s.size()) != 0 ? 0 : 1;\n}\n]])],\n        [AC_MSG_RESULT(yes)\n         LIBCPP_DEBUG=-D_LIBCPP_DEBUG=1\n        ],\n        [AC_MSG_RESULT(no, using only assertions)\n         LIBCPP_DEBUG=-D_LIBCPP_DEBUG=0\n        ]\n        )\n    else\n        AC_MSG_RESULT(no)\n    fi\n    AC_LANG_POP([C++])\nfi\nAC_SUBST([LIBCPP_DEBUG])\n\ndnl ===================================================================\ndnl Check for gperf\ndnl ===================================================================\nAC_PATH_PROG(GPERF, gperf)\nif test -z \"$GPERF\"; then\n    AC_MSG_ERROR([gperf not found but needed. Install it.])\nfi\nif test \"$GNUMAKE_WIN_NATIVE\" = \"TRUE\" ; then\n    GPERF=`cygpath -m $GPERF`\nfi\nAC_MSG_CHECKING([whether gperf is new enough])\nmy_gperf_ver1=$($GPERF --version | head -n 1)\nmy_gperf_ver2=${my_gperf_ver1#GNU gperf }\nmy_gperf_ver3=$(printf %s \"$my_gperf_ver2\" | $AWK -F. '{ print $1*100+($2<100?$2:99) }')\nif test \"$my_gperf_ver3\" -ge 301; then\n    AC_MSG_RESULT([yes ($my_gperf_ver2)])\nelse\n    AC_MSG_ERROR([\"$my_gperf_ver1\" is too old or unrecognized, must be at least gperf 3.1])\nfi\nAC_SUBST(GPERF)\n\ndnl ===================================================================\ndnl Check for system libcmis\ndnl ===================================================================\nlibo_CHECK_SYSTEM_MODULE([libcmis],[LIBCMIS],[libcmis-0.6 >= 0.6.1],enabled)\n\ndnl ===================================================================\ndnl C++11\ndnl ===================================================================\n\nif test -z \"${CXXFLAGS_CXX11+x}\"; then\n    AC_MSG_CHECKING([whether $CXX_BASE supports C++20])\n    if test \"$COM\" = MSC -a \"$COM_IS_CLANG\" != TRUE; then\n        if test \"$with_latest_c__\" = yes; then\n            CXXFLAGS_CXX11=-std:c++latest\n        else\n            CXXFLAGS_CXX11=-std:c++20\n        fi\n        CXXFLAGS_CXX11=\"$CXXFLAGS_CXX11 -permissive- -Zc:__cplusplus,preprocessor\"\n    elif test \"$GCC\" = \"yes\" -o \"$COM_IS_CLANG\" = TRUE; then\n        my_flags='-std=c++20 -std=c++2a'\n        if test \"$with_latest_c__\" = yes; then\n            my_flags=\"-std=c++26 -std=c++2c -std=c++23 -std=c++2b $my_flags\"\n        fi\n        for flag in $my_flags; do\n            if test \"$COM\" = MSC; then\n                flag=\"-Xclang $flag\"\n            fi\n            save_CXXFLAGS=$CXXFLAGS\n            CXXFLAGS=\"$CXXFLAGS $flag -Werror\"\n            AC_LANG_PUSH([C++])\n            AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n                #include <algorithm>\n                #include <functional>\n                #include <vector>\n\n                void f(std::vector<int> & v, std::function<bool(int, int)> fn) {\n                    std::sort(v.begin(), v.end(), fn);\n                }\n                ]])],[CXXFLAGS_CXX11=$flag])\n            AC_LANG_POP([C++])\n            CXXFLAGS=$save_CXXFLAGS\n            if test -n \"$CXXFLAGS_CXX11\"; then\n                break\n            fi\n        done\n    fi\n    if test -n \"$CXXFLAGS_CXX11\"; then\n        AC_MSG_RESULT([yes ($CXXFLAGS_CXX11)])\n    else\n        AC_MSG_ERROR(no)\n    fi\nfi\nAC_SUBST(CXXFLAGS_CXX11)\n\nif test \"$GCC\" = \"yes\"; then\n    save_CXXFLAGS=$CXXFLAGS\n    CXXFLAGS=\"$CXXFLAGS $CXXFLAGS_CXX11\"\n    CHECK_L_ATOMIC\n    CXXFLAGS=$save_CXXFLAGS\n    AC_SUBST(ATOMIC_LIB)\nfi\n\nAC_MSG_CHECKING([whether $CXX_BASE supports C++11 without Language Defect 757])\nsave_CXXFLAGS=$CXXFLAGS\nCXXFLAGS=\"$CXXFLAGS $CXXFLAGS_CXX11\"\nAC_LANG_PUSH([C++])\n\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#include <stddef.h>\n\ntemplate <typename T, size_t S> char (&sal_n_array_size( T(&)[S] ))[S];\n\nnamespace\n{\n        struct b\n        {\n                int i;\n                int j;\n        };\n}\n]], [[\nstruct a\n{\n        int i;\n        int j;\n};\na thinga[]={{0,0}, {1,1}};\nb thingb[]={{0,0}, {1,1}};\nsize_t i = sizeof(sal_n_array_size(thinga));\nsize_t j = sizeof(sal_n_array_size(thingb));\nreturn !(i != 0 && j != 0);\n]])\n    ], [ AC_MSG_RESULT(yes) ],\n    [ AC_MSG_ERROR(no)])\nAC_LANG_POP([C++])\nCXXFLAGS=$save_CXXFLAGS\n\nHAVE_GCC_FNO_SIZED_DEALLOCATION=\nif test \"$GCC\" = yes; then\n    AC_MSG_CHECKING([whether $CXX_BASE supports -fno-sized-deallocation])\n    AC_LANG_PUSH([C++])\n    save_CXXFLAGS=$CXXFLAGS\n    CXXFLAGS=\"$CXXFLAGS -fno-sized-deallocation\"\n    AC_LINK_IFELSE([AC_LANG_PROGRAM()],[HAVE_GCC_FNO_SIZED_DEALLOCATION=TRUE])\n    CXXFLAGS=$save_CXXFLAGS\n    AC_LANG_POP([C++])\n    if test \"$HAVE_GCC_FNO_SIZED_DEALLOCATION\" = TRUE; then\n        AC_MSG_RESULT([yes])\n    else\n        AC_MSG_RESULT([no])\n    fi\nfi\nAC_SUBST([HAVE_GCC_FNO_SIZED_DEALLOCATION])\n\nAC_MSG_CHECKING([whether $CXX_BASE supports C++2a constinit sorted vectors])\nAC_LANG_PUSH([C++])\nsave_CXXFLAGS=$CXXFLAGS\nCXXFLAGS=\"$CXXFLAGS $CXXFLAGS_CXX11\"\nAC_COMPILE_IFELSE([AC_LANG_SOURCE([\n        #include <algorithm>\n        #include <initializer_list>\n        #include <vector>\n        template<typename T> class S {\n        private:\n            std::vector<T> v_;\n        public:\n            constexpr S(std::initializer_list<T> i): v_(i) { std::sort(v_.begin(), v_.end()); }\n        };\n        constinit S<int> s{3, 2, 1};\n    ])], [\n        AC_DEFINE([HAVE_CPP_CONSTINIT_SORTED_VECTOR],[1])\n        AC_MSG_RESULT([yes])\n    ], [AC_MSG_RESULT([no])])\nCXXFLAGS=$save_CXXFLAGS\nAC_LANG_POP([C++])\n\nAC_MSG_CHECKING([whether $CXX_BASE implements C++ DR P1155R3])\nAC_LANG_PUSH([C++])\nsave_CXXFLAGS=$CXXFLAGS\nCXXFLAGS=\"$CXXFLAGS $CXXFLAGS_CXX11\"\nAC_COMPILE_IFELSE([AC_LANG_SOURCE([\n        struct S1 { S1(S1 &&); };\n        struct S2: S1 {};\n        S1 f(S2 s) { return s; }\n    ])], [\n        AC_DEFINE([HAVE_P1155R3],[1])\n        AC_MSG_RESULT([yes])\n    ], [AC_MSG_RESULT([no])])\nCXXFLAGS=$save_CXXFLAGS\nAC_LANG_POP([C++])\n\nAC_MSG_CHECKING([whether $CXX_BASE supports C++20 std::atomic_ref])\nHAVE_CXX20_ATOMIC_REF=\nAC_LANG_PUSH([C++])\nsave_CXXFLAGS=$CXXFLAGS\nCXXFLAGS=\"$CXXFLAGS $CXXFLAGS_CXX11\"\nAC_COMPILE_IFELSE([AC_LANG_SOURCE([\n        #include <atomic>\n        int x;\n        std::atomic_ref<int> y(x);\n    ])], [\n        HAVE_CXX20_ATOMIC_REF=TRUE\n        AC_MSG_RESULT([yes])\n    ], [AC_MSG_RESULT([no])])\nCXXFLAGS=$save_CXXFLAGS\nAC_LANG_POP([C++])\nAC_SUBST([HAVE_CXX20_ATOMIC_REF])\n\ndnl Supported since GCC 9 and Clang 10 (which each also started to support -Wdeprecated-copy, but\ndnl which is included in -Wextra anyway):\nHAVE_WDEPRECATED_COPY_DTOR=\nif test \"$GCC\" = yes; then\n    AC_MSG_CHECKING([whether $CXX_BASE supports -Wdeprecated-copy-dtor])\n    AC_LANG_PUSH([C++])\n    save_CXXFLAGS=$CXXFLAGS\n    CXXFLAGS=\"$CXXFLAGS -Werror -Wdeprecated-copy-dtor\"\n    AC_COMPILE_IFELSE([AC_LANG_SOURCE()], [\n            HAVE_WDEPRECATED_COPY_DTOR=TRUE\n            AC_MSG_RESULT([yes])\n        ], [AC_MSG_RESULT([no])])\n    CXXFLAGS=$save_CXXFLAGS\n    AC_LANG_POP([C++])\nfi\nAC_SUBST([HAVE_WDEPRECATED_COPY_DTOR])\n\ndnl At least GCC 8.2 with -O2 (i.e., --enable-optimized) causes a false-positive -Wmaybe-\ndnl uninitialized warning for code like\ndnl\ndnl   OString f();\ndnl   boost::optional<OString> * g(bool b) {\ndnl       boost::optional<OString> o;\ndnl       if (b) o = f();\ndnl       return new boost::optional<OString>(o);\ndnl   }\ndnl\ndnl (as is e.g. present, in a slightly more elaborate form, in\ndnl librdf_TypeConverter::extractNode_NoLock in unoxml/source/rdf/librdf_repository.cxx); the below\ndnl code is meant to be a faithfully stripped-down and self-contained version of the above code:\nHAVE_BROKEN_GCC_WMAYBE_UNINITIALIZED=\nif test \"$GCC\" = yes && test \"$COM_IS_CLANG\" != TRUE; then\n    AC_MSG_CHECKING([whether $CXX_BASE might report false -Werror=maybe-uninitialized])\n    AC_LANG_PUSH([C++])\n    save_CXXFLAGS=$CXXFLAGS\n    CXXFLAGS=\"$CXXFLAGS $CXXFLAGS_CXX11 -Werror -Wmaybe-uninitialized\"\n    if test \"$ENABLE_OPTIMIZED\" = TRUE; then\n        CXXFLAGS=\"$CXXFLAGS -O2\"\n    else\n        CXXFLAGS=\"$CXXFLAGS -O0\"\n    fi\n    AC_COMPILE_IFELSE([AC_LANG_SOURCE([[\n            #include <new>\n            void f1(int);\n            struct S1 {\n                ~S1() { f1(n); }\n                int n = 0;\n            };\n            struct S2 {\n                S2() {}\n                S2(S2 const & s) { if (s.init) set(*reinterpret_cast<S1 const *>(s.stg)); }\n                ~S2() { if (init) reinterpret_cast<S1 *>(stg)->S1::~S1(); }\n                void set(S1 s) {\n                    new (stg) S1(s);\n                    init = true;\n                }\n                bool init = false;\n                char stg[sizeof (S1)];\n            } ;\n            S1 f2();\n            S2 * f3(bool b) {\n                S2 o;\n                if (b) o.set(f2());\n                return new S2(o);\n            }\n        ]])], [AC_MSG_RESULT([no])], [\n            HAVE_BROKEN_GCC_WMAYBE_UNINITIALIZED=TRUE\n            AC_MSG_RESULT([yes])\n        ])\n    CXXFLAGS=$save_CXXFLAGS\n    AC_LANG_POP([C++])\nfi\nAC_SUBST([HAVE_BROKEN_GCC_WMAYBE_UNINITIALIZED])\n\ndnl Check for <https://gcc.gnu.org/bugzilla/show_bug.cgi?id=87296#c5> \"[8/9/10/11 Regression]\ndnl -Wstringop-overflow false positive due to using MEM_REF type of &MEM\" (fixed in GCC 11), which\ndnl hits us e.g. with GCC 10 and --enable-optimized at\ndnl\ndnl   In file included from include/rtl/string.hxx:49,\ndnl                    from include/rtl/ustring.hxx:43,\ndnl                    from include/osl/file.hxx:35,\ndnl                    from include/codemaker/global.hxx:28,\ndnl                    from include/codemaker/options.hxx:23,\ndnl                    from codemaker/source/commoncpp/commoncpp.cxx:24:\ndnl   In function ‘char* rtl::addDataHelper(char*, const char*, std::size_t)’,\ndnl       inlined from ‘static char* rtl::ToStringHelper<const char [N]>::addData(char*, const char*) [with long unsigned int N = 3]’ at include/rtl/stringconcat.hxx:147:85,\ndnl       inlined from ‘char* rtl::OStringConcat<T1, T2>::addData(char*) const [with T1 = const char [3]; T2 = rtl::OString]’ at include/rtl/stringconcat.hxx:226:103,\ndnl       inlined from ‘rtl::OStringBuffer& rtl::OStringBuffer::append(rtl::OStringConcat<T1, T2>&&) [with T1 = const char [3]; T2 = rtl::OString]’ at include/rtl/strbuf.hxx:599:30,\ndnl       inlined from ‘rtl::OString codemaker::cpp::scopedCppName(const rtl::OString&, bool)’ at codemaker/source/commoncpp/commoncpp.cxx:53:55:\ndnl   include/rtl/stringconcat.hxx:78:15: error: writing 2 bytes into a region of size 1 [-Werror=stringop-overflow=]\ndnl      78 |         memcpy( buffer, data, length );\ndnl         |         ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\nHAVE_BROKEN_GCC_WSTRINGOP_OVERFLOW=\nif test \"$GCC\" = yes && test \"$COM_IS_CLANG\" != TRUE; then\n    AC_MSG_CHECKING([whether $CXX_BASE might report false -Werror=stringop-overflow=])\n    AC_LANG_PUSH([C++])\n    save_CXXFLAGS=$CXXFLAGS\n    CXXFLAGS=\"$CXXFLAGS $CXXFLAGS_CXX11 -Werror -Wstringop-overflow\"\n    if test \"$ENABLE_OPTIMIZED\" = TRUE; then\n        CXXFLAGS=\"$CXXFLAGS -O2\"\n    else\n        CXXFLAGS=\"$CXXFLAGS -O0\"\n    fi\n    dnl Test code taken from <https://gcc.gnu.org/bugzilla/show_bug.cgi?id=87296#c0>:\n    AC_COMPILE_IFELSE([AC_LANG_SOURCE([[\n            void fill(char const * begin, char const * end, char c);\n            struct q {\n                char ids[4];\n                char username[6];\n            };\n            void test(q & c) {\n                fill(c.ids, c.ids + sizeof(c.ids), '\\0');\n                __builtin_strncpy(c.username, \"root\", sizeof(c.username));\n            }\n        ]])], [AC_MSG_RESULT([no])], [\n            HAVE_BROKEN_GCC_WSTRINGOP_OVERFLOW=TRUE\n            AC_MSG_RESULT([yes])\n        ])\n    CXXFLAGS=$save_CXXFLAGS\n    AC_LANG_POP([C++])\nfi\nAC_SUBST([HAVE_BROKEN_GCC_WSTRINGOP_OVERFLOW])\n\nHAVE_DLLEXPORTINLINES=\nif test \"$_os\" = \"WINNT\"; then\n    AC_MSG_CHECKING([whether $CXX_BASE supports -Zc:dllexportInlines-])\n    AC_LANG_PUSH([C++])\n    save_CXXFLAGS=$CXXFLAGS\n    CXXFLAGS=\"$CXXFLAGS -Werror -Zc:dllexportInlines-\"\n    AC_COMPILE_IFELSE([AC_LANG_SOURCE()], [\n            HAVE_DLLEXPORTINLINES=TRUE\n            AC_MSG_RESULT([yes])\n        ], [AC_MSG_RESULT([no])])\n    CXXFLAGS=$save_CXXFLAGS\n    AC_LANG_POP([C++])\nfi\nAC_SUBST([HAVE_DLLEXPORTINLINES])\n\ndnl ===================================================================\ndnl CPU Intrinsics support - SSE, AVX\ndnl ===================================================================\n\nCXXFLAGS_INTRINSICS_SSE2=\nCXXFLAGS_INTRINSICS_SSSE3=\nCXXFLAGS_INTRINSICS_SSE41=\nCXXFLAGS_INTRINSICS_SSE42=\nCXXFLAGS_INTRINSICS_AVX=\nCXXFLAGS_INTRINSICS_AVX2=\nCXXFLAGS_INTRINSICS_AVX512=\nCXXFLAGS_INTRINSICS_AVX512F=\nCXXFLAGS_INTRINSICS_F16C=\nCXXFLAGS_INTRINSICS_FMA=\n\nif test \"$GCC\" = \"yes\" -o \"$COM_IS_CLANG\" = TRUE; then\n    # GCC, Clang or Clang-cl (clang-cl + MSVC's -arch options don't work well together)\n    flag_sse2=-msse2\n    flag_ssse3=-mssse3\n    flag_sse41=-msse4.1\n    flag_sse42=-msse4.2\n    flag_avx=-mavx\n    flag_avx2=-mavx2\n    flag_avx512=\"-mavx512f -mavx512vl -mavx512bw -mavx512dq -mavx512cd\"\n    flag_avx512f=-mavx512f\n    flag_f16c=-mf16c\n    flag_fma=-mfma\nelse\n    # With MSVC using -arch is in fact not necessary for being able\n    # to use CPU intrinsics, code using AVX512F intrinsics will compile\n    # even if compiled with -arch:AVX, the -arch option really only affects\n    # instructions generated for C/C++ code.\n    # So use the matching same (or lower) -arch options, but only in order\n    # to generate the best matching instructions for the C++ code surrounding\n    # the intrinsics.\n    # SSE2 is the default for x86/x64, so no need to specify the option.\n    flag_sse2=\n    # No specific options for these, use the next lower.\n    flag_ssse3=\"$flag_sse2\"\n    flag_sse41=\"$flag_sse2\"\n    flag_sse42=\"$flag_sse2\"\n    flag_avx=-arch:AVX\n    flag_avx2=-arch:AVX2\n    flag_avx512=-arch:AVX512\n    # Using -arch:AVX512 would enable more than just AVX512F, so use only AVX2.\n    flag_avx512f=-arch:AVX2\n    # No MSVC options for these.\n    flag_f16c=\"$flag_sse2\"\n    flag_fma=\"$flag_sse2\"\nfi\n\nAC_MSG_CHECKING([whether $CXX can compile SSE2 intrinsics])\nAC_LANG_PUSH([C++])\nsave_CXXFLAGS=$CXXFLAGS\nCXXFLAGS=\"$CXXFLAGS $flag_sse2\"\nAC_COMPILE_IFELSE([AC_LANG_SOURCE([\n    #include <emmintrin.h>\n    int main () {\n        __m128i a = _mm_set1_epi32 (0), b = _mm_set1_epi32 (0), c;\n        c = _mm_xor_si128 (a, b);\n        return 0;\n    }\n    ])],\n    [can_compile_sse2=yes],\n    [can_compile_sse2=no])\nAC_LANG_POP([C++])\nCXXFLAGS=$save_CXXFLAGS\nAC_MSG_RESULT([${can_compile_sse2}])\nif test \"${can_compile_sse2}\" = \"yes\" ; then\n    CXXFLAGS_INTRINSICS_SSE2=\"$flag_sse2\"\nfi\n\nAC_MSG_CHECKING([whether $CXX can compile SSSE3 intrinsics])\nAC_LANG_PUSH([C++])\nsave_CXXFLAGS=$CXXFLAGS\nCXXFLAGS=\"$CXXFLAGS $flag_ssse3\"\nAC_COMPILE_IFELSE([AC_LANG_SOURCE([\n    #include <tmmintrin.h>\n    int main () {\n        __m128i a = _mm_set1_epi32 (0), b = _mm_set1_epi32 (0), c;\n        c = _mm_maddubs_epi16 (a, b);\n        return 0;\n    }\n    ])],\n    [can_compile_ssse3=yes],\n    [can_compile_ssse3=no])\nAC_LANG_POP([C++])\nCXXFLAGS=$save_CXXFLAGS\nAC_MSG_RESULT([${can_compile_ssse3}])\nif test \"${can_compile_ssse3}\" = \"yes\" ; then\n    CXXFLAGS_INTRINSICS_SSSE3=\"$flag_ssse3\"\nfi\n\nAC_MSG_CHECKING([whether $CXX can compile SSE4.1 intrinsics])\nAC_LANG_PUSH([C++])\nsave_CXXFLAGS=$CXXFLAGS\nCXXFLAGS=\"$CXXFLAGS $flag_sse41\"\nAC_COMPILE_IFELSE([AC_LANG_SOURCE([\n    #include <smmintrin.h>\n    int main () {\n        __m128i a = _mm_set1_epi32 (0), b = _mm_set1_epi32 (0), c;\n        c = _mm_cmpeq_epi64 (a, b);\n        return 0;\n    }\n    ])],\n    [can_compile_sse41=yes],\n    [can_compile_sse41=no])\nAC_LANG_POP([C++])\nCXXFLAGS=$save_CXXFLAGS\nAC_MSG_RESULT([${can_compile_sse41}])\nif test \"${can_compile_sse41}\" = \"yes\" ; then\n    CXXFLAGS_INTRINSICS_SSE41=\"$flag_sse41\"\nfi\n\nAC_MSG_CHECKING([whether $CXX can compile SSE4.2 intrinsics])\nAC_LANG_PUSH([C++])\nsave_CXXFLAGS=$CXXFLAGS\nCXXFLAGS=\"$CXXFLAGS $flag_sse42\"\nAC_COMPILE_IFELSE([AC_LANG_SOURCE([\n    #include <nmmintrin.h>\n    int main () {\n        __m128i a = _mm_set1_epi32 (0), b = _mm_set1_epi32 (0), c;\n        c = _mm_cmpgt_epi64 (a, b);\n        return 0;\n    }\n    ])],\n    [can_compile_sse42=yes],\n    [can_compile_sse42=no])\nAC_LANG_POP([C++])\nCXXFLAGS=$save_CXXFLAGS\nAC_MSG_RESULT([${can_compile_sse42}])\nif test \"${can_compile_sse42}\" = \"yes\" ; then\n    CXXFLAGS_INTRINSICS_SSE42=\"$flag_sse42\"\nfi\n\nAC_MSG_CHECKING([whether $CXX can compile AVX intrinsics])\nAC_LANG_PUSH([C++])\nsave_CXXFLAGS=$CXXFLAGS\nCXXFLAGS=\"$CXXFLAGS $flag_avx\"\nAC_COMPILE_IFELSE([AC_LANG_SOURCE([\n    #include <immintrin.h>\n    int main () {\n        __m256 a = _mm256_set1_ps (0.0f), b = _mm256_set1_ps (0.0f), c;\n        c = _mm256_xor_ps(a, b);\n        return 0;\n    }\n    ])],\n    [can_compile_avx=yes],\n    [can_compile_avx=no])\nAC_LANG_POP([C++])\nCXXFLAGS=$save_CXXFLAGS\nAC_MSG_RESULT([${can_compile_avx}])\nif test \"${can_compile_avx}\" = \"yes\" ; then\n    CXXFLAGS_INTRINSICS_AVX=\"$flag_avx\"\nfi\n\nAC_MSG_CHECKING([whether $CXX can compile AVX2 intrinsics])\nAC_LANG_PUSH([C++])\nsave_CXXFLAGS=$CXXFLAGS\nCXXFLAGS=\"$CXXFLAGS $flag_avx2\"\nAC_COMPILE_IFELSE([AC_LANG_SOURCE([\n    #include <immintrin.h>\n    int main () {\n        __m256i a = _mm256_set1_epi32 (0), b = _mm256_set1_epi32 (0), c;\n        c = _mm256_maddubs_epi16(a, b);\n        return 0;\n    }\n    ])],\n    [can_compile_avx2=yes],\n    [can_compile_avx2=no])\nAC_LANG_POP([C++])\nCXXFLAGS=$save_CXXFLAGS\nAC_MSG_RESULT([${can_compile_avx2}])\nif test \"${can_compile_avx2}\" = \"yes\" ; then\n    CXXFLAGS_INTRINSICS_AVX2=\"$flag_avx2\"\nfi\n\nAC_MSG_CHECKING([whether $CXX can compile AVX512 intrinsics])\nAC_LANG_PUSH([C++])\nsave_CXXFLAGS=$CXXFLAGS\nCXXFLAGS=\"$CXXFLAGS $flag_avx512\"\nAC_COMPILE_IFELSE([AC_LANG_SOURCE([\n    #include <immintrin.h>\n    int main () {\n        __m512i a = _mm512_loadu_si512(0);\n        __m512d v1 = _mm512_load_pd(0);\n        // https://gcc.gnu.org/git/?p=gcc.git;a=commit;f=gcc/config/i386/avx512fintrin.h;h=23bce99cbe7016a04e14c2163ed3fe6a5a64f4e2\n        __m512d v2 = _mm512_abs_pd(v1);\n        return 0;\n    }\n    ])],\n    [can_compile_avx512=yes],\n    [can_compile_avx512=no])\nAC_LANG_POP([C++])\nCXXFLAGS=$save_CXXFLAGS\nAC_MSG_RESULT([${can_compile_avx512}])\nif test \"${can_compile_avx512}\" = \"yes\" ; then\n    CXXFLAGS_INTRINSICS_AVX512=\"$flag_avx512\"\n    CXXFLAGS_INTRINSICS_AVX512F=\"$flag_avx512f\"\nfi\n\nAC_MSG_CHECKING([whether $CXX can compile F16C intrinsics])\nAC_LANG_PUSH([C++])\nsave_CXXFLAGS=$CXXFLAGS\nCXXFLAGS=\"$CXXFLAGS $flag_f16c\"\nAC_COMPILE_IFELSE([AC_LANG_SOURCE([\n    #include <immintrin.h>\n    int main () {\n        __m128i a = _mm_set1_epi32 (0);\n        __m128 c;\n        c = _mm_cvtph_ps(a);\n        return 0;\n    }\n    ])],\n    [can_compile_f16c=yes],\n    [can_compile_f16c=no])\nAC_LANG_POP([C++])\nCXXFLAGS=$save_CXXFLAGS\nAC_MSG_RESULT([${can_compile_f16c}])\nif test \"${can_compile_f16c}\" = \"yes\" ; then\n    CXXFLAGS_INTRINSICS_F16C=\"$flag_f16c\"\nfi\n\nAC_MSG_CHECKING([whether $CXX can compile FMA intrinsics])\nAC_LANG_PUSH([C++])\nsave_CXXFLAGS=$CXXFLAGS\nCXXFLAGS=\"$CXXFLAGS $flag_fma\"\nAC_COMPILE_IFELSE([AC_LANG_SOURCE([\n    #include <immintrin.h>\n    int main () {\n        __m256 a = _mm256_set1_ps (0.0f), b = _mm256_set1_ps (0.0f), c = _mm256_set1_ps (0.0f), d;\n        d = _mm256_fmadd_ps(a, b, c);\n        return 0;\n    }\n    ])],\n    [can_compile_fma=yes],\n    [can_compile_fma=no])\nAC_LANG_POP([C++])\nCXXFLAGS=$save_CXXFLAGS\nAC_MSG_RESULT([${can_compile_fma}])\nif test \"${can_compile_fma}\" = \"yes\" ; then\n    CXXFLAGS_INTRINSICS_FMA=\"$flag_fma\"\nfi\n\nAC_SUBST([CXXFLAGS_INTRINSICS_SSE2])\nAC_SUBST([CXXFLAGS_INTRINSICS_SSSE3])\nAC_SUBST([CXXFLAGS_INTRINSICS_SSE41])\nAC_SUBST([CXXFLAGS_INTRINSICS_SSE42])\nAC_SUBST([CXXFLAGS_INTRINSICS_AVX])\nAC_SUBST([CXXFLAGS_INTRINSICS_AVX2])\nAC_SUBST([CXXFLAGS_INTRINSICS_AVX512])\nAC_SUBST([CXXFLAGS_INTRINSICS_AVX512F])\nAC_SUBST([CXXFLAGS_INTRINSICS_F16C])\nAC_SUBST([CXXFLAGS_INTRINSICS_FMA])\n\ndnl ===================================================================\ndnl system stl sanity tests\ndnl ===================================================================\nif test \"$_os\" != \"WINNT\"; then\n\n    AC_LANG_PUSH([C++])\n\n    save_CPPFLAGS=\"$CPPFLAGS\"\n    if test -n \"$MACOSX_SDK_PATH\"; then\n        CPPFLAGS=\"-isysroot $MACOSX_SDK_PATH $CPPFLAGS\"\n    fi\n\n    # Assume visibility is not broken with libc++. The below test is very much designed for libstdc++\n    # only.\n    if test \"$CPP_LIBRARY\" = GLIBCXX; then\n        dnl gcc#19664, gcc#22482, rhbz#162935\n        AC_MSG_CHECKING([if STL headers are visibility safe (GCC bug 22482)])\n        AC_EGREP_HEADER(visibility push, string, stlvisok=yes, stlvisok=no)\n        AC_MSG_RESULT([$stlvisok])\n        if test \"$stlvisok\" = \"no\"; then\n            AC_MSG_ERROR([Your libstdc++ headers are not visibility safe. This is no longer supported.])\n        fi\n    fi\n\n    # As the below test checks things when linking self-compiled dynamic libraries, it presumably is irrelevant\n    # when we don't make any dynamic libraries?\n    if test \"$DISABLE_DYNLOADING\" = \"\"; then\n        AC_MSG_CHECKING([if $CXX_BASE is -fvisibility-inlines-hidden safe (Clang bug 11250)])\n        cat > conftestlib1.cc <<_ACEOF\ntemplate<typename T> struct S1 { virtual ~S1() {} virtual void f() {} };\nstruct S2: S1<int> { virtual ~S2(); };\nS2::~S2() {}\n_ACEOF\n        cat > conftestlib2.cc <<_ACEOF\ntemplate<typename T> struct S1 { virtual ~S1() {} virtual void f() {} };\nstruct S2: S1<int> { virtual ~S2(); };\nstruct S3: S2 { virtual ~S3(); }; S3::~S3() {}\n_ACEOF\n        gccvisinlineshiddenok=yes\n        if ! $CXX $CXXFLAGS $CPPFLAGS $LINKFLAGSSHL -fPIC -fvisibility-inlines-hidden conftestlib1.cc -o libconftest1$DLLPOST >/dev/null 2>&5; then\n            gccvisinlineshiddenok=no\n        else\n            dnl At least Clang -fsanitize=address and -fsanitize=undefined are\n            dnl known to not work with -z defs (unsetting which makes the test\n            dnl moot, though):\n            my_linkflagsnoundefs=$LINKFLAGSNOUNDEFS\n            if test \"$COM_IS_CLANG\" = TRUE; then\n                for i in $CXX $CXXFLAGS; do\n                    case $i in\n                    -fsanitize=*)\n                        my_linkflagsnoundefs=\n                        break\n                        ;;\n                    esac\n                done\n            fi\n            if ! $CXX $CXXFLAGS $CPPFLAGS $LINKFLAGSSHL -fPIC -fvisibility-inlines-hidden conftestlib2.cc -L. -lconftest1 $my_linkflagsnoundefs -o libconftest2$DLLPOST >/dev/null 2>&5; then\n                gccvisinlineshiddenok=no\n            fi\n        fi\n\n        rm -fr libconftest*\n        AC_MSG_RESULT([$gccvisinlineshiddenok])\n        if test \"$gccvisinlineshiddenok\" = \"no\"; then\n            AC_MSG_ERROR([Your gcc/clang is not -fvisibility-inlines-hidden safe. This is no longer supported.])\n        fi\n    fi\n\n   AC_MSG_CHECKING([if $CXX_BASE has a visibility bug with class-level attributes (GCC bug 26905)])\n    cat >visibility.cxx <<_ACEOF\n#pragma GCC visibility push(hidden)\nstruct __attribute__ ((visibility (\"default\"))) TestStruct {\n  static void Init();\n};\n__attribute__ ((visibility (\"default\"))) void TestFunc() {\n  TestStruct::Init();\n}\n_ACEOF\n    if ! $CXX $CXXFLAGS $CPPFLAGS -fpic -S visibility.cxx; then\n        gccvisbroken=yes\n    else\n        case \"$host_cpu\" in\n        i?86|x86_64)\n            if test \"$_os\" = \"Darwin\" -o \"$_os\" = \"iOS\"; then\n                gccvisbroken=no\n            else\n                if $EGREP -q '@PLT|@GOT' visibility.s || test \"$ENABLE_LTO\" = \"TRUE\"; then\n                    gccvisbroken=no\n                else\n                    gccvisbroken=yes\n                fi\n            fi\n            ;;\n        *)\n            gccvisbroken=no\n            ;;\n        esac\n    fi\n    rm -f visibility.s visibility.cxx\n\n    AC_MSG_RESULT([$gccvisbroken])\n    if test \"$gccvisbroken\" = \"yes\"; then\n        AC_MSG_ERROR([Your gcc is not -fvisibility=hidden safe. This is no longer supported.])\n    fi\n\n    CPPFLAGS=\"$save_CPPFLAGS\"\n\n    AC_MSG_CHECKING([if CET endbranch is recognized])\ncat > endbr.s <<_ACEOF\nendbr32\n_ACEOF\n    HAVE_ASM_END_BRANCH_INS_SUPPORT=\n    if $CXX -c endbr.s -o endbr.o >/dev/null 2>&5; then\n        AC_MSG_RESULT([yes])\n        HAVE_ASM_END_BRANCH_INS_SUPPORT=TRUE\n    else\n        AC_MSG_RESULT([no])\n    fi\n    rm -f endbr.s endbr.o\n    AC_SUBST(HAVE_ASM_END_BRANCH_INS_SUPPORT)\n\n    AC_LANG_POP([C++])\nfi\n\ndnl ===================================================================\ndnl  Clang++ tests\ndnl ===================================================================\n\nHAVE_GCC_FNO_ENFORCE_EH_SPECS=\nif test \"$GCC\" = \"yes\"; then\n    AC_MSG_CHECKING([whether $CXX_BASE supports -fno-enforce-eh-specs])\n    AC_LANG_PUSH([C++])\n    save_CXXFLAGS=$CXXFLAGS\n    CXXFLAGS=\"$CFLAGS -Werror -fno-enforce-eh-specs\"\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([[]], [[ return 0; ]])],[ HAVE_GCC_FNO_ENFORCE_EH_SPECS=TRUE ],[])\n    CXXFLAGS=$save_CXXFLAGS\n    AC_LANG_POP([C++])\n    if test \"$HAVE_GCC_FNO_ENFORCE_EH_SPECS\" = \"TRUE\"; then\n        AC_MSG_RESULT([yes])\n    else\n        AC_MSG_RESULT([no])\n    fi\nfi\nAC_SUBST(HAVE_GCC_FNO_ENFORCE_EH_SPECS)\n\ndnl ===================================================================\ndnl Compiler plugins\ndnl ===================================================================\n\nCOMPILER_PLUGINS=\n# currently only Clang\n\nif test \"$COM_IS_CLANG\" != \"TRUE\"; then\n    if test \"$libo_fuzzed_enable_compiler_plugins\" = yes -a \"$enable_compiler_plugins\" = yes; then\n        AC_MSG_NOTICE([Resetting --enable-compiler-plugins=no])\n        enable_compiler_plugins=no\n    fi\nfi\n\nCOMPILER_PLUGINS_COM_IS_CLANG=\nif test \"$COM_IS_CLANG\" = \"TRUE\"; then\n    if test -n \"$enable_compiler_plugins\"; then\n        compiler_plugins=\"$enable_compiler_plugins\"\n    elif test -n \"$ENABLE_DBGUTIL\"; then\n        compiler_plugins=test\n    else\n        compiler_plugins=no\n    fi\n    if test \"$compiler_plugins\" != no -a \"$my_apple_clang\" != yes; then\n        if test \"$CLANGVER\" -lt 120001; then\n            if test \"$compiler_plugins\" = yes; then\n                AC_MSG_ERROR(\n                    [Clang $CLANGVER is too old to build compiler plugins; need >= 12.0.1.])\n            else\n                compiler_plugins=no\n            fi\n        fi\n    fi\n    if test \"$compiler_plugins\" != \"no\"; then\n        dnl The prefix where Clang resides, override to where Clang resides if\n        dnl using a source build:\n        if test -z \"$CLANGDIR\"; then\n            CLANGDIR=$(dirname $(dirname $($CXX -print-prog-name=$(basename $(printf '%s\\n' $CXX | grep clang | head -n 1)))))\n        fi\n        # Assume Clang is self-built, but allow overriding COMPILER_PLUGINS_CXX to the compiler Clang was built with.\n        if test -z \"$COMPILER_PLUGINS_CXX\"; then\n            COMPILER_PLUGINS_CXX=[$(echo $CXX | sed -e 's/-fsanitize=[^ ]*//g')]\n        fi\n        clangbindir=$CLANGDIR/bin\n        if test \"$build_os\" = \"cygwin\"; then\n            clangbindir=$(cygpath -u \"$clangbindir\")\n        fi\n        AC_PATH_PROG(LLVM_CONFIG, llvm-config,[],\"$clangbindir\" $PATH)\n        if test -n \"$LLVM_CONFIG\"; then\n            COMPILER_PLUGINS_CXXFLAGS=$($LLVM_CONFIG --cxxflags)\n            COMPILER_PLUGINS_LINKFLAGS=$($LLVM_CONFIG --ldflags --libs --system-libs | tr '\\n' ' ')\n            if test -z \"$CLANGLIBDIR\"; then\n                CLANGLIBDIR=$($LLVM_CONFIG --libdir)\n            fi\n            # Try if clang is built from source (in which case its includes are not together with llvm includes).\n            # src-root is [llvm-toplevel-src-dir]/llvm, clang is [llvm-toplevel-src-dir]/clang\n            if $LLVM_CONFIG --src-root >/dev/null 2>&1; then\n                clangsrcdir=$(dirname $($LLVM_CONFIG --src-root))\n                if test -n \"$clangsrcdir\" -a -d \"$clangsrcdir\" -a -d \"$clangsrcdir/clang/include\"; then\n                    COMPILER_PLUGINS_CXXFLAGS=\"$COMPILER_PLUGINS_CXXFLAGS -I$clangsrcdir/clang/include\"\n                fi\n            fi\n            # obj-root is [llvm-toplevel-obj-dir]/, clang is [llvm-toplevel-obj-dir]/tools/clang\n            clangobjdir=$($LLVM_CONFIG --obj-root)\n            if test -n \"$clangobjdir\" -a -d \"$clangobjdir\" -a -d \"$clangobjdir/tools/clang/include\"; then\n                COMPILER_PLUGINS_CXXFLAGS=\"$COMPILER_PLUGINS_CXXFLAGS -I$clangobjdir/tools/clang/include\"\n            fi\n        fi\n        AC_MSG_NOTICE([compiler plugins compile flags: $COMPILER_PLUGINS_CXXFLAGS])\n        AC_LANG_PUSH([C++])\n        save_CXX=$CXX\n        save_CXXCPP=$CXXCPP\n        save_CPPFLAGS=$CPPFLAGS\n        save_CXXFLAGS=$CXXFLAGS\n        save_LDFLAGS=$LDFLAGS\n        save_LIBS=$LIBS\n        CXX=$COMPILER_PLUGINS_CXX\n        CXXCPP=\"$COMPILER_PLUGINS_CXX -E\"\n        CPPFLAGS=\"$COMPILER_PLUGINS_CXXFLAGS\"\n        CXXFLAGS=\"$COMPILER_PLUGINS_CXXFLAGS\"\n        AC_CHECK_HEADER(clang/Basic/SourceLocation.h,\n            [COMPILER_PLUGINS=TRUE],\n            [\n            if test \"$compiler_plugins\" = \"yes\"; then\n                AC_MSG_ERROR([Cannot find Clang headers to build compiler plugins.])\n            else\n                AC_MSG_WARN([Cannot find Clang headers to build compiler plugins, plugins disabled])\n                add_warning \"Cannot find Clang headers to build compiler plugins, plugins disabled.\"\n            fi\n            ])\n        dnl TODO: Windows doesn't use LO_CLANG_SHARED_PLUGINS for now, see corresponding TODO\n        dnl comment in compilerplugins/Makefile-clang.mk:\n        if test -n \"$COMPILER_PLUGINS\" && test \"$_os\" != \"WINNT\"; then\n            LDFLAGS=\"\"\n            AC_MSG_CHECKING([for clang libraries to use])\n            if test -z \"$CLANGTOOLLIBS\"; then\n                LIBS=\"-lclang-cpp $COMPILER_PLUGINS_LINKFLAGS\"\n                AC_LINK_IFELSE([\n                    AC_LANG_PROGRAM([[#include \"clang/Basic/SourceLocation.h\"]],\n                        [[ clang::FullSourceLoc().dump(); ]])\n                ],[CLANGTOOLLIBS=\"$LIBS\"],[])\n            fi\n            dnl If the above check for the combined -lclang-cpp failed, fall back to a hand-curated\n            dnl list of individual -lclang* (but note that that list can become outdated over time,\n            dnl see e.g. the since-reverted 5078591de9a0e65ca560a4f1913e90dfe95f66bf \"CLANGTOOLLIBS\n            dnl needs to include -lclangSupport now\"):\n            if test -z \"$CLANGTOOLLIBS\"; then\n                LIBS=\"-lclangTooling -lclangFrontend -lclangDriver -lclangParse -lclangSema -lclangEdit \\\n -lclangAnalysis -lclangAST -lclangLex -lclangSerialization -lclangBasic $COMPILER_PLUGINS_LINKFLAGS\"\n                AC_LINK_IFELSE([\n                    AC_LANG_PROGRAM([[#include \"clang/Basic/SourceLocation.h\"]],\n                        [[ clang::FullSourceLoc().dump(); ]])\n                ],[CLANGTOOLLIBS=\"$LIBS\"],[])\n            fi\n            AC_MSG_RESULT([$CLANGTOOLLIBS])\n            if test -z \"$CLANGTOOLLIBS\"; then\n                if test \"$compiler_plugins\" = \"yes\"; then\n                    AC_MSG_ERROR([Cannot find Clang libraries to build compiler plugins.])\n                else\n                    AC_MSG_WARN([Cannot find Clang libraries to build compiler plugins, plugins disabled])\n                    add_warning \"Cannot find Clang libraries to build compiler plugins, plugins disabled.\"\n                fi\n                COMPILER_PLUGINS=\n            fi\n            if test -n \"$COMPILER_PLUGINS\"; then\n                if test -z \"$CLANGSYSINCLUDE\"; then\n                    if test -n \"$LLVM_CONFIG\"; then\n                        # Path to the clang system headers (no idea if there's a better way to get it).\n                        CLANGSYSINCLUDE=$($LLVM_CONFIG --libdir)/clang/$($LLVM_CONFIG --version | sed 's/git\\|svn//')/include\n                    fi\n                fi\n            fi\n        fi\n        CXX=$save_CXX\n        CXXCPP=$save_CXXCPP\n        CPPFLAGS=$save_CPPFLAGS\n        CXXFLAGS=$save_CXXFLAGS\n        LDFLAGS=$save_LDFLAGS\n        LIBS=\"$save_LIBS\"\n        AC_LANG_POP([C++])\n\n        AC_MSG_CHECKING([whether the compiler for building compilerplugins is actually Clang])\n        AC_COMPILE_IFELSE([AC_LANG_SOURCE([[\n            #ifndef __clang__\n            you lose\n            #endif\n            int foo=42;\n            ]])],\n            [AC_MSG_RESULT([yes])\n             COMPILER_PLUGINS_COM_IS_CLANG=TRUE],\n            [AC_MSG_RESULT([no])])\n        AC_SUBST(COMPILER_PLUGINS_COM_IS_CLANG)\n    fi\nelse\n    if test \"$enable_compiler_plugins\" = \"yes\"; then\n        AC_MSG_ERROR([Compiler plugins are currently supported only with the Clang compiler.])\n    fi\nfi\nCOMPILER_PLUGINS_ANALYZER_PCH=\nif test \"$enable_compiler_plugins_analyzer_pch\" != no; then\n    COMPILER_PLUGINS_ANALYZER_PCH=TRUE\nfi\nAC_SUBST(COMPILER_PLUGINS)\nAC_SUBST(COMPILER_PLUGINS_ANALYZER_PCH)\nAC_SUBST(COMPILER_PLUGINS_COM_IS_CLANG)\nAC_SUBST(COMPILER_PLUGINS_CXX)\nAC_SUBST(COMPILER_PLUGINS_CXXFLAGS)\nAC_SUBST(COMPILER_PLUGINS_CXX_LINKFLAGS)\nAC_SUBST(COMPILER_PLUGINS_DEBUG)\nAC_SUBST(COMPILER_PLUGINS_TOOLING_ARGS)\nAC_SUBST(CLANGDIR)\nAC_SUBST(CLANGLIBDIR)\nAC_SUBST(CLANGTOOLLIBS)\nAC_SUBST(CLANGSYSINCLUDE)\n\n# Plugin to help linker.\n# Add something like LD_PLUGIN=/usr/lib64/LLVMgold.so to your autogen.input.\n# This makes --enable-lto build with clang work.\nAC_SUBST(LD_PLUGIN)\n\nAC_CHECK_FUNCS(posix_fallocate, HAVE_POSIX_FALLOCATE=YES, [HAVE_POSIX_FALLOCATE=NO])\nAC_SUBST(HAVE_POSIX_FALLOCATE)\n\nJITC_PROCESSOR_TYPE=\"\"\nif test \"$_os\" = \"Linux\" -a \"$host_cpu\" = \"powerpc\"; then\n    # IBMs JDK needs this...\n    JITC_PROCESSOR_TYPE=6\n    export JITC_PROCESSOR_TYPE\nfi\nAC_SUBST([JITC_PROCESSOR_TYPE])\n\nif test $_os = \"WINNT\"; then\n    find_msvc_x64_dlls\n    MSVC_DLL_PATH=`win_short_path_for_make \"$msvcdllpath\"`\n    MSVC_DLLS=\"$msvcdlls\"\n    if echo \"$msvcdllpath\" | grep -q \"VC143.CRT$\"; then\n        with_redist=143\n    elif echo \"$msvcdllpath\" | grep -q \"VC142.CRT$\"; then\n        with_redist=142\n    elif echo \"$msvcdllpath\" | grep -q \"VC141.CRT$\"; then\n        with_redist=141\n    fi\n    for i in $PKGFORMAT; do\n        if test \"$i\" = msi; then\n            find_msms \"$with_redist\"\n            if test -n \"$msmdir\"; then\n                MSM_PATH=`win_short_path_for_make \"$msmdir\"`/\n                SCPDEFS=\"$SCPDEFS -DWITH_VC_REDIST=$with_redist\"\n            fi\n            break\n        fi\n    done\nfi\n\nAC_SUBST(MSVC_DLL_PATH)\nAC_SUBST(MSVC_DLLS)\nAC_SUBST(MSM_PATH)\n\n\ndnl ===================================================================\ndnl Checks for Java\ndnl ===================================================================\nif test \"$ENABLE_JAVA\" != \"\"; then\n\n    # Windows-specific tests\n    if test \"$build_os\" = \"cygwin\" -o -n \"$WSL_ONLY_AS_HELPER\"; then\n        if test -z \"$with_jdk_home\"; then\n            dnl See <https://docs.oracle.com/javase/9/migrate/toc.htm#JSMIG-GUID-EEED398E-AE37-4D12-\n            dnl AB10-49F82F720027> section \"Windows Registry Key Changes\":\n            reg_get_value \"$WIN_HOST_BITS\" \"HKEY_LOCAL_MACHINE/SOFTWARE/JavaSoft/JDK\" \"CurrentVersion\"\n            if test -n \"$regvalue\"; then\n                ver=$regvalue\n                reg_get_value \"$WIN_HOST_BITS\" \"HKEY_LOCAL_MACHINE/SOFTWARE/JavaSoft/JDK/$ver\" \"JavaHome\"\n                with_jdk_home=$regvalue\n            fi\n            howfound=\"found automatically\"\n        else\n            howfound=\"you passed\"\n        fi\n        PathFormat \"$with_jdk_home\"\n        with_jdk_home=\"$formatted_path_unix\"\n\n        if ! test -f \"$with_jdk_home/lib/jvm.lib\" -a -f \"$with_jdk_home/bin/java.exe\"; then\n            AC_MSG_ERROR([No JDK found, pass the --with-jdk-home option (or fix the path) pointing to a $WIN_HOST_BITS-bit JDK >= 8])\n        fi\n        with_java=\"java.exe\"\n        javacompiler=\"javac.exe\"\n        javadoc=\"javadoc.exe\"\n    fi\n\n    # macOS: /usr/libexec/java_home helps to set the current JDK_HOME. Actually JDK_HOME should NOT be set where java (/usr/bin/java) is located.\n    # /usr/bin/java -> /System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/java, but /usr does not contain the JDK libraries\n    if test -z \"$with_jdk_home\" -a \"$_os\" = \"Darwin\" -a -x /usr/libexec/java_home; then\n        with_jdk_home=`/usr/libexec/java_home`\n    fi\n\n    JAVA_HOME=; export JAVA_HOME\n    if test -z \"$with_jdk_home\"; then\n        AC_PATH_PROG(JAVAINTERPRETER, $with_java)\n    else\n        _java_path=\"$with_jdk_home/bin/$with_java\"\n        dnl Check if there is a Java interpreter at all.\n        if test -x \"$_java_path\"; then\n            JAVAINTERPRETER=$_java_path\n        else\n            AC_MSG_ERROR([$_java_path not found, pass --with-jdk-home])\n        fi\n    fi\n\n    dnl Check that the JDK found is correct architecture (at least 2 reasons to\n    dnl check: officebean needs to link -ljawt, and libjpipe.so needs to be\n    dnl loaded by java to run JunitTests:\n    if test \"$build_os\" = \"cygwin\" -a \"$cross_compiling\" != \"yes\"; then\n        shortjdkhome=`cygpath -d \"$with_jdk_home\"`\n        if test $WIN_HOST_BITS -eq 64 -a -f \"$with_jdk_home/bin/java.exe\" -a \"`$shortjdkhome/bin/java.exe -version 2>&1 | $GREP -i 64-bit`\" = \"\" >/dev/null; then\n            AC_MSG_WARN([You are building 64-bit binaries but the JDK $howfound is 32-bit])\n            AC_MSG_ERROR([You should pass the --with-jdk-home option pointing to a 64-bit JDK])\n        elif test $WIN_HOST_BITS -eq 32 -a -f \"$with_jdk_home/bin/java.exe\" -a \"`$shortjdkhome/bin/java.exe -version 2>&1 | $GREP -i 64-bit`\" != \"\"  >/dev/null; then\n            AC_MSG_WARN([You are building 32-bit binaries but the JDK $howfound is 64-bit])\n            AC_MSG_ERROR([You should pass the --with-jdk-home option pointing to a (32-bit) JDK])\n        fi\n\n        if test x`echo \"$JAVAINTERPRETER\" | $GREP -i '\\.exe$'` = x; then\n            JAVAINTERPRETER=\"${JAVAINTERPRETER}.exe\"\n        fi\n        JAVAINTERPRETER=`win_short_path_for_make \"$JAVAINTERPRETER\"`\n    elif test \"$cross_compiling\" != \"yes\"; then\n        case $CPUNAME in\n            AARCH64|AXP|X86_64|IA64|POWERPC64|S390X|SPARC64|MIPS64|RISCV64|LOONGARCH64)\n                if test -f \"$JAVAINTERPRETER\" -a \"`$JAVAINTERPRETER -version 2>&1 | $GREP -i 64-bit`\" = \"\" >/dev/null; then\n                    AC_MSG_WARN([You are building 64-bit binaries but the JDK $JAVAINTERPRETER is 32-bit])\n                    AC_MSG_ERROR([You should pass the --with-jdk-home option pointing to a 64-bit JDK])\n                fi\n                ;;\n            *) # assumption: everything else 32-bit\n                if test -f \"$JAVAINTERPRETER\" -a \"`$JAVAINTERPRETER -version 2>&1 | $GREP -i 64-bit`\" != \"\"  >/dev/null; then\n                    AC_MSG_WARN([You are building 32-bit binaries but the JDK $howfound is 64-bit])\n                    AC_MSG_ERROR([You should pass the --with-jdk-home option pointing to a (32-bit) JDK])\n                fi\n                ;;\n        esac\n    fi\nfi\n\ndnl ===================================================================\ndnl Checks for JDK.\ndnl ===================================================================\n\n# Whether all the complexity here actually is needed any more or not, no idea.\n\nJDK_SECURITYMANAGER_DISALLOWED=\nMODULAR_JAVA=\nif test \"$ENABLE_JAVA\" != \"\" -a \"$cross_compiling\" != \"yes\"; then\n    _gij_longver=0\n    AC_MSG_CHECKING([the installed JDK])\n    if test -n \"$JAVAINTERPRETER\"; then\n        dnl java -version sends output to stderr!\n        if test `$JAVAINTERPRETER -version 2>&1 | $GREP -c \"Kaffe\"` -gt 0; then\n            AC_MSG_ERROR([No valid check available. Please check the block for your desired java in configure.ac])\n        elif test `$JAVAINTERPRETER --version 2>&1 | $GREP -c \"GNU libgcj\"` -gt 0; then\n            AC_MSG_ERROR([No valid check available. Please check the block for your desired java in configure.ac])\n        elif test `$JAVAINTERPRETER -version 2>&1 | $AWK '{ print }' | $GREP -c \"BEA\"` -gt 0; then\n            AC_MSG_ERROR([No valid check available. Please check the block for your desired java in configure.ac])\n        elif test `$JAVAINTERPRETER -version 2>&1 | $AWK '{ print }' | $GREP -c \"IBM\"` -gt 0; then\n            AC_MSG_ERROR([No valid check available. Please check the block for your desired java in configure.ac])\n        else\n            JDK=sun\n\n            dnl Sun JDK specific tests\n            _jdk=`$JAVAINTERPRETER -version 2>&1 | $AWK -F'\"' '{ print \\$2 }' | $SED '/^$/d' | $SED s/[[-A-Za-z]]*//`\n            _jdk_ver=`echo \"$_jdk\" | $AWK -F. '{ print (($1 * 100) + $2) * 100 + $3;}'`\n\n            if test \"$_jdk_ver\" -lt 10800; then\n                AC_MSG_ERROR([JDK is too old, you need at least 8 ($_jdk_ver < 10800)])\n            fi\n            dnl TODO: Presumably, the Security Manager will not merely be disallowed, but be\n            dnl completely removed in some Java version > 18 (see\n            dnl <https://openjdk.java.net/jeps/411> \"Deprecate the Security Manager for Removal\"):\n            if test \"$_jdk_ver\" -ge 180000; then\n                JDK_SECURITYMANAGER_DISALLOWED=TRUE\n            fi\n\n            JAVA_HOME=`echo $JAVAINTERPRETER | $SED -n \"s,//*bin//*java,,p\"`\n            if test \"$_os\" = \"WINNT\"; then\n                JAVA_HOME=`echo $JAVA_HOME | $SED \"s,\\.[[eE]][[xX]][[eE]]$,,\"`\n            fi\n            AC_MSG_RESULT([found $JAVA_HOME (JDK $_jdk)])\n\n            dnl Check whether the build Java supports modules\n            if test \"$_jdk_ver\" -ge 90000; then\n                MODULAR_JAVA=TRUE\n            else\n                AC_MSG_WARN([Modular jars will not be built. They need at least Java 9 ($_jdk_ver < 90000)])\n                add_warning \"Modular jars will not be built. They need at least Java 9 ($_jdk_ver < 90000)\"\n            fi\n\n            # set to limit VM usage for JunitTests\n            JAVAIFLAGS=-Xmx64M\n            # set to limit VM usage for javac\n            JAVACFLAGS=-J-Xmx128M\n        fi\n    else\n        AC_MSG_ERROR([Java not found. You need at least JDK 8])\n    fi\nelse\n    if test -z \"$ENABLE_JAVA\"; then\n        dnl Java disabled\n        JAVA_HOME=\n        export JAVA_HOME\n    elif test \"$cross_compiling\" = \"yes\"; then\n        # Just assume compatibility of build and host JDK\n        JDK=$JDK_FOR_BUILD\n        JAVAIFLAGS=$JAVAIFLAGS_FOR_BUILD\n    fi\nfi\n\ndnl ===================================================================\ndnl Checks for javac\ndnl ===================================================================\nif test \"$ENABLE_JAVA\" != \"\" -a \"$cross_compiling\" != \"yes\"; then\n    : ${JAVA_SOURCE_VER=8}\n    : ${JAVA_TARGET_VER=8}\n    if test -z \"$with_jdk_home\"; then\n        AC_PATH_PROG(JAVACOMPILER, $javacompiler)\n    else\n        _javac_path=\"$with_jdk_home/bin/$javacompiler\"\n        dnl Check if there is a Java compiler at all.\n        if test -x \"$_javac_path\"; then\n            JAVACOMPILER=$_javac_path\n        fi\n    fi\n    if test -z \"$JAVACOMPILER\"; then\n        AC_MSG_ERROR([$javacompiler not found set with_jdk_home])\n    fi\n    if test \"$build_os\" = \"cygwin\"; then\n        if test x`echo \"$JAVACOMPILER\" | $GREP -i '\\.exe$'` = x; then\n            JAVACOMPILER=\"${JAVACOMPILER}.exe\"\n        fi\n        JAVACOMPILER=`win_short_path_for_make \"$JAVACOMPILER\"`\n    fi\nfi\n\ndnl ===================================================================\ndnl Checks for javadoc\ndnl ===================================================================\nif test \"$ENABLE_JAVA\" != \"\" -a \"$cross_compiling\" != \"yes\"; then\n    if test -z \"$with_jdk_home\"; then\n        AC_PATH_PROG(JAVADOC, $javadoc)\n    else\n        _javadoc_path=\"$with_jdk_home/bin/$javadoc\"\n        dnl Check if there is a javadoc at all.\n        if test -x \"$_javadoc_path\"; then\n            JAVADOC=$_javadoc_path\n        else\n            AC_PATH_PROG(JAVADOC, $javadoc)\n        fi\n    fi\n    if test -z \"$JAVADOC\"; then\n        AC_MSG_ERROR([$_javadoc_path not found set with_jdk_home])\n    fi\n    if test \"$build_os\" = \"cygwin\"; then\n        if test x`echo \"$JAVADOC\" | $GREP -i '\\.exe$'` = x; then\n            JAVADOC=\"${JAVADOC}.exe\"\n        fi\n        JAVADOC=`win_short_path_for_make \"$JAVADOC\"`\n    fi\n\n    if test `$JAVADOC --version 2>&1 | $GREP -c \"gjdoc\"` -gt 0; then\n    JAVADOCISGJDOC=\"yes\"\n    fi\nfi\nAC_SUBST(JAVADOC)\nAC_SUBST(JAVADOCISGJDOC)\n\nif test \"$ENABLE_JAVA\" != \"\" -a \\( \"$cross_compiling\" != \"yes\" -o -n \"$with_jdk_home\" \\); then\n    # check if JAVA_HOME was (maybe incorrectly?) set automatically to /usr\n    if test \"$JAVA_HOME\" = \"/usr\" -a \"x$with_jdk_home\" = \"x\"; then\n        if basename $(readlink $(readlink $JAVACOMPILER)) >/dev/null 2>/dev/null; then\n           # try to recover first by looking whether we have an alternative\n           # system as in Debian or newer SuSEs where following /usr/bin/javac\n           # over /etc/alternatives/javac leads to the right bindir where we\n           # just need to strip a bit away to get a valid JAVA_HOME\n           JAVA_HOME=$(readlink $(readlink $JAVACOMPILER))\n        elif readlink $JAVACOMPILER >/dev/null 2>/dev/null; then\n            # maybe only one level of symlink (e.g. on Mac)\n            JAVA_HOME=$(readlink $JAVACOMPILER)\n            if test \"$(dirname $JAVA_HOME)\" = \".\"; then\n                # we've got no path to trim back\n                JAVA_HOME=\"\"\n            fi\n        else\n            # else warn\n            AC_MSG_WARN([JAVA_HOME is set to /usr - this is very likely to be incorrect])\n            AC_MSG_WARN([if this is the case, please inform the correct JAVA_HOME with --with-jdk-home])\n            add_warning \"JAVA_HOME is set to /usr - this is very likely to be incorrect\"\n            add_warning \"if this is the case, please inform the correct JAVA_HOME with --with-jdk-home\"\n        fi\n        dnl now that we probably have the path to the real javac, make a JAVA_HOME out of it...\n        if test \"$JAVA_HOME\" != \"/usr\"; then\n            if test \"$_os\" = \"Darwin\" -o \"$OS_FOR_BUILD\" = MACOSX; then\n                dnl Leopard returns a non-suitable path with readlink - points to \"Current\" only\n                JAVA_HOME=$(echo $JAVA_HOME | $SED -e s,/Current/Commands/javac$,/CurrentJDK/Home,)\n                dnl Tiger already returns a JDK path...\n                JAVA_HOME=$(echo $JAVA_HOME | $SED -e s,/CurrentJDK/Commands/javac$,/CurrentJDK/Home,)\n            else\n                JAVA_HOME=$(echo $JAVA_HOME | $SED -e s,/bin/javac$,,)\n                dnl check that we have a directory as certain distros eg gentoo substitute javac for a script\n                dnl that checks which version to run\n                if test -f \"$JAVA_HOME\"; then\n                    JAVA_HOME=\"\"; # set JAVA_HOME to null if it's a file\n                fi\n            fi\n        fi\n    fi\n    # as we drop out of this, JAVA_HOME may have been set to the empty string by readlink\n\n    dnl now if JAVA_HOME has been set to empty, then call findhome to find it\n    if test -z \"$JAVA_HOME\"; then\n        if test \"x$with_jdk_home\" = \"x\"; then\n            cat > findhome.java <<_ACEOF\n[import java.io.File;\n\nclass findhome\n{\n    public static void main(String args[])\n    {\n        String jrelocation = System.getProperty(\"java.home\");\n        File jre = new File(jrelocation);\n        System.out.println(jre.getParent());\n    }\n}]\n_ACEOF\n            AC_MSG_CHECKING([if javac works])\n            javac_cmd=\"$JAVACOMPILER findhome.java 1>&2\"\n            AC_TRY_EVAL(javac_cmd)\n            if test $? = 0 -a -f ./findhome.class; then\n                AC_MSG_RESULT([javac works])\n            else\n                echo \"configure: javac test failed\" >&5\n                cat findhome.java >&5\n                AC_MSG_ERROR([javac does not work - java projects will not build!])\n            fi\n            AC_MSG_CHECKING([if gij knows its java.home])\n            JAVA_HOME=`$JAVAINTERPRETER findhome`\n            if test $? = 0 -a \"$JAVA_HOME\" != \"\"; then\n                AC_MSG_RESULT([$JAVA_HOME])\n            else\n                echo \"configure: java test failed\" >&5\n                cat findhome.java >&5\n                AC_MSG_ERROR([gij does not know its java.home - use --with-jdk-home])\n            fi\n            # clean-up after ourselves\n            rm -f ./findhome.java ./findhome.class\n        else\n            JAVA_HOME=`echo $JAVAINTERPRETER | $SED -n \"s,//*bin//*$with_java,,p\"`\n        fi\n    fi\n\n    # now check if $JAVA_HOME is really valid\n    if test \"$_os\" = \"Darwin\" -o \"$OS_FOR_BUILD\" = MACOSX; then\n        if test ! -f \"$JAVA_HOME/lib/jvm.cfg\" -a \"x$with_jdk_home\" = \"x\"; then\n            AC_MSG_WARN([JAVA_HOME was not explicitly informed with --with-jdk-home. the configure script])\n            AC_MSG_WARN([attempted to find JAVA_HOME automatically, but apparently it failed])\n            AC_MSG_WARN([in case JAVA_HOME is incorrectly set, some projects will not be built correctly])\n            add_warning \"JAVA_HOME was not explicitly informed with --with-jdk-home. the configure script\"\n            add_warning \"attempted to find JAVA_HOME automatically, but apparently it failed\"\n            add_warning \"in case JAVA_HOME is incorrectly set, some projects will not be built correctly\"\n        fi\n    fi\n    PathFormat \"$JAVA_HOME\"\n    JAVA_HOME=\"$formatted_path_unix\"\nfi\n\nif test -z \"$JAWTLIB\" -a -n \"$ENABLE_JAVA\" -a \"$_os\" != Android -a \\\n    \"$_os\" != Darwin\nthen\n    AC_MSG_CHECKING([for JAWT lib])\n    if test \"$_os\" = WINNT; then\n        # The path to $JAVA_HOME/lib/$JAWTLIB is part of $ILIB:\n        JAWTLIB=jawt.lib\n    else\n        case \"$host_cpu\" in\n        arm*)\n            AS_IF([test -e \"$JAVA_HOME/jre/lib/aarch32/libjawt.so\"], [my_java_arch=aarch32], [my_java_arch=arm])\n            JAVA_ARCH=$my_java_arch\n            ;;\n        i*86)\n            my_java_arch=i386\n            ;;\n        m68k)\n            my_java_arch=m68k\n            ;;\n        powerpc)\n            my_java_arch=ppc\n            ;;\n        powerpc64)\n            my_java_arch=ppc64\n            ;;\n        powerpc64le)\n            AS_IF([test -e \"$JAVA_HOME/jre/lib/ppc64le/libjawt.so\"], [my_java_arch=ppc64le], [my_java_arch=ppc64])\n            JAVA_ARCH=$my_java_arch\n            ;;\n        sparc64)\n            my_java_arch=sparcv9\n            ;;\n        x86_64)\n            my_java_arch=amd64\n            ;;\n        *)\n            my_java_arch=$host_cpu\n            ;;\n        esac\n        # This is where JDK9 puts the library\n        if test -e \"$JAVA_HOME/lib/libjawt.so\"; then\n            JAWTLIB=\"-L$JAVA_HOME/lib/ -ljawt\"\n        else\n            JAWTLIB=\"-L$JAVA_HOME/jre/lib/$my_java_arch -ljawt\"\n        fi\n        AS_IF([test \"$JAVA_ARCH\" != \"\"], [AC_DEFINE_UNQUOTED([JAVA_ARCH], [\"$JAVA_ARCH\"])])\n    fi\n    AC_MSG_RESULT([$JAWTLIB])\nfi\nAC_SUBST(JAWTLIB)\n\nif test -n \"$ENABLE_JAVA\" -a -z \"$JAVAINC\"; then\n    case \"$host_os\" in\n\n    cygwin*|wsl*)\n        JAVAINC=\"-I$JAVA_HOME/include/win32\"\n        JAVAINC=\"$JAVAINC -I$JAVA_HOME/include\"\n        ;;\n\n    darwin*)\n        if test -d \"$JAVA_HOME/include/darwin\"; then\n            JAVAINC=\"-I$JAVA_HOME/include  -I$JAVA_HOME/include/darwin\"\n        else\n            JAVAINC=${ISYSTEM}$FRAMEWORKSHOME/JavaVM.framework/Versions/Current/Headers\n        fi\n        ;;\n\n    dragonfly*)\n        JAVAINC=\"-I$JAVA_HOME/include\"\n        test -d \"$JAVA_HOME/include/native_thread\" && JAVAINC=\"$JAVAINC -I$JAVA_HOME/include/native_thread\"\n        ;;\n\n    freebsd*)\n        JAVAINC=\"-I$JAVA_HOME/include\"\n        JAVAINC=\"$JAVAINC -I$JAVA_HOME/include/freebsd\"\n        JAVAINC=\"$JAVAINC -I$JAVA_HOME/include/bsd\"\n        JAVAINC=\"$JAVAINC -I$JAVA_HOME/include/linux\"\n        test -d \"$JAVA_HOME/include/native_thread\" && JAVAINC=\"$JAVAINC -I$JAVA_HOME/include/native_thread\"\n        ;;\n\n    k*bsd*-gnu*)\n        JAVAINC=\"-I$JAVA_HOME/include\"\n        JAVAINC=\"$JAVAINC -I$JAVA_HOME/include/linux\"\n        test -d \"$JAVA_HOME/include/native_thread\" && JAVAINC=\"$JAVAINC -I$JAVA_HOME/include/native_thread\"\n        ;;\n\n    linux-gnu*)\n        JAVAINC=\"-I$JAVA_HOME/include\"\n        JAVAINC=\"$JAVAINC -I$JAVA_HOME/include/linux\"\n        test -d \"$JAVA_HOME/include/native_thread\" && JAVAINC=\"$JAVAINC -I$JAVA_HOME/include/native_thread\"\n        ;;\n\n    *netbsd*)\n        JAVAINC=\"-I$JAVA_HOME/include\"\n        JAVAINC=\"$JAVAINC -I$JAVA_HOME/include/netbsd\"\n        test -d \"$JAVA_HOME/include/native_thread\" && JAVAINC=\"$JAVAINC -I$JAVA_HOME/include/native_thread\"\n       ;;\n\n    openbsd*)\n        JAVAINC=\"-I$JAVA_HOME/include\"\n        JAVAINC=\"$JAVAINC -I$JAVA_HOME/include/openbsd\"\n        test -d \"$JAVA_HOME/include/native_thread\" && JAVAINC=\"$JAVAINC -I$JAVA_HOME/include/native_thread\"\n        ;;\n\n    solaris*)\n        JAVAINC=\"-I$JAVA_HOME/include\"\n        JAVAINC=\"$JAVAINC -I$JAVA_HOME/include/solaris\"\n        test -d \"$JAVA_HOME/include/native_thread\" && JAVAINC=\"$JAVAINC -I$JAVA_HOME/include/native_thread\"\n        ;;\n    esac\nfi\nSOLARINC=\"$SOLARINC $JAVAINC\"\n\nif test \"$ENABLE_JAVA\" != \"\" -a \"$cross_compiling\" != \"yes\"; then\n    JAVA_HOME_FOR_BUILD=$JAVA_HOME\n    JAVAIFLAGS_FOR_BUILD=$JAVAIFLAGS\n    JDK_FOR_BUILD=$JDK\n    JDK_SECURITYMANAGER_DISALLOWED_FOR_BUILD=$JDK_SECURITYMANAGER_DISALLOWED\nfi\n\nAC_SUBST(JAVACFLAGS)\nAC_SUBST(JAVACOMPILER)\nAC_SUBST(JAVAINTERPRETER)\nAC_SUBST(JAVAIFLAGS)\nAC_SUBST(JAVAIFLAGS_FOR_BUILD)\nAC_SUBST(JAVA_HOME)\nAC_SUBST(JAVA_HOME_FOR_BUILD)\nAC_SUBST(JDK)\nAC_SUBST(JDK_FOR_BUILD)\nAC_SUBST(JDK_SECURITYMANAGER_DISALLOWED_FOR_BUILD)\nAC_SUBST(JAVA_SOURCE_VER)\nAC_SUBST(JAVA_TARGET_VER)\nAC_SUBST(MODULAR_JAVA)\n\n\ndnl ===================================================================\ndnl Export file validation\ndnl ===================================================================\nAC_MSG_CHECKING([whether to enable export file validation])\nif test \"$with_export_validation\" != \"no\"; then\n    if test -z \"$ENABLE_JAVA\"; then\n        if test \"$with_export_validation\" = \"yes\"; then\n            AC_MSG_ERROR([requested, but Java is disabled])\n        else\n            AC_MSG_RESULT([no, as Java is disabled])\n        fi\n    elif ! test -d \"${SRC_ROOT}/schema\"; then\n        if test \"$with_export_validation\" = \"yes\"; then\n            AC_MSG_ERROR([requested, but schema directory is missing (it is excluded from tarballs)])\n        else\n            AC_MSG_RESULT([no, schema directory is missing (it is excluded from tarballs)])\n        fi\n    else\n        AC_MSG_RESULT([yes])\n        AC_DEFINE(HAVE_EXPORT_VALIDATION)\n\n        AC_PATH_PROGS(ODFVALIDATOR, odfvalidator)\n        if test -z \"$ODFVALIDATOR\"; then\n            # remember to download the ODF toolkit with validator later\n            AC_MSG_NOTICE([no odfvalidator found, will download it])\n            BUILD_TYPE=\"$BUILD_TYPE ODFVALIDATOR\"\n            ODFVALIDATOR=\"$BUILDDIR/bin/odfvalidator.sh\"\n\n            # and fetch name of odfvalidator jar name from download.lst\n            ODFVALIDATOR_JAR=`$SED -n -e \"s/^ODFVALIDATOR_JAR *:= *\\(.*\\) */\\1/p\" $SRC_ROOT/download.lst`\n            AC_SUBST(ODFVALIDATOR_JAR)\n\n            if test -z \"$ODFVALIDATOR_JAR\"; then\n                AC_MSG_ERROR([cannot determine odfvalidator jar location (--with-export-validation)])\n            fi\n        fi\n        if test \"$build_os\" = \"cygwin\"; then\n            # In case of Cygwin it will be executed from Windows,\n            # so we need to run bash and absolute path to validator\n            # so instead of \"odfvalidator\" it will be\n            # something like \"bash.exe C:\\cygwin\\opt\\lo\\bin\\odfvalidator\"\n            ODFVALIDATOR=\"bash.exe `cygpath -m \"$ODFVALIDATOR\"`\"\n        else\n            ODFVALIDATOR=\"sh $ODFVALIDATOR\"\n        fi\n        AC_SUBST(ODFVALIDATOR)\n\n\n        AC_PATH_PROGS(OFFICEOTRON, officeotron)\n        if test -z \"$OFFICEOTRON\"; then\n            # remember to download the officeotron with validator later\n            AC_MSG_NOTICE([no officeotron found, will download it])\n            BUILD_TYPE=\"$BUILD_TYPE OFFICEOTRON\"\n            OFFICEOTRON=\"$BUILDDIR/bin/officeotron.sh\"\n\n            # and fetch name of officeotron jar name from download.lst\n            OFFICEOTRON_JAR=`$SED -n -e \"s/^OFFICEOTRON_JAR *:= *\\(.*\\) */\\1/p\" $SRC_ROOT/download.lst`\n            AC_SUBST(OFFICEOTRON_JAR)\n\n            if test -z \"$OFFICEOTRON_JAR\"; then\n                AC_MSG_ERROR([cannot determine officeotron jar location (--with-export-validation)])\n            fi\n        else\n            # check version of existing officeotron\n            OFFICEOTRON_VER=`$OFFICEOTRON --version | $AWK -F. '{ print \\$1*10000+\\$2*100+\\$3 }'`\n            if test 0\"$OFFICEOTRON_VER\" -lt 704; then\n                AC_MSG_ERROR([officeotron too old])\n            fi\n        fi\n        if test \"$build_os\" = \"cygwin\"; then\n            # In case of Cygwin it will be executed from Windows,\n            # so we need to run bash and absolute path to validator\n            # so instead of \"odfvalidator\" it will be\n            # something like \"bash.exe C:\\cygwin\\opt\\lo\\bin\\odfvalidator\"\n            OFFICEOTRON=\"bash.exe `cygpath -m \"$OFFICEOTRON\"`\"\n        else\n            OFFICEOTRON=\"sh $OFFICEOTRON\"\n        fi\n    fi\n    AC_SUBST(OFFICEOTRON)\nelse\n    AC_MSG_RESULT([no])\nfi\n\nAC_MSG_CHECKING([for Microsoft Binary File Format Validator])\nif test \"$with_bffvalidator\" != \"no\"; then\n    AC_DEFINE(HAVE_BFFVALIDATOR)\n\n    if test \"$with_export_validation\" = \"no\"; then\n        AC_MSG_ERROR([Please enable export validation (-with-export-validation)!])\n    fi\n\n    if test \"$with_bffvalidator\" = \"yes\"; then\n        BFFVALIDATOR=`win_short_path_for_make \"$PROGRAMFILES/Microsoft Office/BFFValidator/BFFValidator.exe\"`\n    else\n        BFFVALIDATOR=\"$with_bffvalidator\"\n    fi\n\n    if test \"$build_os\" = \"cygwin\"; then\n        if test -n \"$BFFVALIDATOR\" -a -e \"`cygpath $BFFVALIDATOR`\"; then\n            AC_MSG_RESULT($BFFVALIDATOR)\n        else\n            AC_MSG_ERROR([bffvalidator not found, but required by --with-bffvalidator])\n        fi\n    elif test -n \"$BFFVALIDATOR\"; then\n        # We are not in Cygwin but need to run Windows binary with wine\n        AC_PATH_PROGS(WINE, wine)\n\n        # so swap in a shell wrapper that converts paths transparently\n        BFFVALIDATOR_EXE=\"$BFFVALIDATOR\"\n        BFFVALIDATOR=\"sh $BUILDDIR/bin/bffvalidator.sh\"\n        AC_SUBST(BFFVALIDATOR_EXE)\n        AC_MSG_RESULT($BFFVALIDATOR)\n    else\n        AC_MSG_ERROR([bffvalidator not found, but required by --with-bffvalidator])\n    fi\n    AC_SUBST(BFFVALIDATOR)\nelse\n    AC_MSG_RESULT([no])\nfi\n\ndnl ===================================================================\ndnl Check for epm (not needed for Windows)\ndnl ===================================================================\nAC_MSG_CHECKING([whether to enable EPM for packing])\nif test \"$enable_epm\" = \"yes\"; then\n    AC_MSG_RESULT([yes])\n    if test \"$_os\" != \"WINNT\"; then\n        if test $_os = Darwin; then\n            EPM=internal\n        elif test -n \"$with_epm\"; then\n            EPM=$with_epm\n        else\n            AC_PATH_PROG(EPM, epm, no)\n        fi\n        if test \"$EPM\" = \"no\" -o \"$EPM\" = \"internal\"; then\n            AC_MSG_NOTICE([EPM will be built.])\n            BUILD_TYPE=\"$BUILD_TYPE EPM\"\n            EPM=${WORKDIR}/UnpackedTarball/epm/epm\n        else\n            # Gentoo has some epm which is something different...\n            AC_MSG_CHECKING([whether the found epm is the right epm])\n            if $EPM | grep \"ESP Package Manager\" >/dev/null 2>/dev/null; then\n                AC_MSG_RESULT([yes])\n            else\n                AC_MSG_ERROR([no. Install ESP Package Manager (https://jimjag.github.io/epm/) and/or specify the path to the right epm])\n            fi\n            AC_MSG_CHECKING([epm version])\n            EPM_VERSION=`$EPM | grep 'ESP Package Manager' | cut -d' ' -f4 | $SED -e s/v//`\n            if test \"`echo $EPM_VERSION | cut -d'.' -f1`\" -gt \"3\" || \\\n               test \"`echo $EPM_VERSION | cut -d'.' -f1`\" -eq \"3\" -a \"`echo $EPM_VERSION | cut -d'.' -f2`\" -ge \"7\"; then\n                AC_MSG_RESULT([OK, >= 3.7])\n            else\n                AC_MSG_RESULT([too old. epm >= 3.7 is required.])\n                AC_MSG_ERROR([Install ESP Package Manager (https://jimjag.github.io/epm/) and/or specify the path to the right epm])\n            fi\n        fi\n    fi\n\n    if echo \"$PKGFORMAT\" | $EGREP rpm 2>&1 >/dev/null; then\n        AC_MSG_CHECKING([for rpm])\n        for a in \"$RPM\" rpmbuild rpm; do\n            $a --usage >/dev/null 2> /dev/null\n            if test $? -eq 0; then\n                RPM=$a\n                break\n            else\n                $a --version >/dev/null 2> /dev/null\n                if test $? -eq 0; then\n                    RPM=$a\n                    break\n                fi\n            fi\n        done\n        if test -z \"$RPM\"; then\n            AC_MSG_ERROR([not found])\n        elif \"$RPM\" --help 2>&1 | $EGREP buildroot >/dev/null; then\n            RPM_PATH=`command -v $RPM`\n            AC_MSG_RESULT([$RPM_PATH])\n            SCPDEFS=\"$SCPDEFS -DWITH_RPM\"\n        else\n            AC_MSG_ERROR([cannot build packages. Try installing rpmbuild.])\n        fi\n    fi\n    if echo \"$PKGFORMAT\" | $EGREP deb 2>&1 >/dev/null; then\n        AC_PATH_PROG(DPKG, dpkg, no)\n        if test \"$DPKG\" = \"no\"; then\n            AC_MSG_ERROR([dpkg needed for deb creation. Install dpkg.])\n        fi\n    fi\n    if echo \"$PKGFORMAT\" | $EGREP rpm 2>&1 >/dev/null || \\\n       echo \"$PKGFORMAT\" | $EGREP pkg 2>&1 >/dev/null; then\n        if test \"$with_epm\" = \"no\" -a \"$_os\" != \"Darwin\"; then\n            if test \"`echo $EPM_VERSION | cut -d'.' -f1`\" -lt \"4\"; then\n                AC_MSG_CHECKING([whether epm is patched for LibreOffice's needs])\n                if grep \"Patched for .*Office\" $EPM >/dev/null 2>/dev/null; then\n                    AC_MSG_RESULT([yes])\n                else\n                    AC_MSG_RESULT([no])\n                    if echo \"$PKGFORMAT\" | $GREP -q rpm; then\n                        _pt=\"rpm\"\n                        AC_MSG_WARN([the rpms will need to be installed with --nodeps])\n                        add_warning \"the rpms will need to be installed with --nodeps\"\n                    else\n                        _pt=\"pkg\"\n                    fi\n                    AC_MSG_WARN([the ${_pt}s will not be relocatable])\n                    add_warning \"the ${_pt}s will not be relocatable\"\n                    AC_MSG_WARN([if you want to make sure installation without --nodeps and\n                                 relocation will work, you need to patch your epm with the\n                                 patch in epm/epm-3.7.patch or build with\n                                 --with-epm=internal which will build a suitable epm])\n                fi\n            fi\n        fi\n    fi\n    if echo \"$PKGFORMAT\" | $EGREP pkg 2>&1 >/dev/null; then\n        AC_PATH_PROG(PKGMK, pkgmk, no)\n        if test \"$PKGMK\" = \"no\"; then\n            AC_MSG_ERROR([pkgmk needed for Solaris pkg creation. Install it.])\n        fi\n    fi\n    AC_SUBST(RPM)\n    AC_SUBST(DPKG)\n    AC_SUBST(PKGMK)\nelse\n    for i in $PKGFORMAT; do\n        case \"$i\" in\n        bsd | deb | pkg | rpm | native | portable)\n            AC_MSG_ERROR(\n                [--with-package-format='$PKGFORMAT' requires --enable-epm])\n            ;;\n        esac\n    done\n    AC_MSG_RESULT([no])\n    EPM=NO\nfi\nAC_SUBST(EPM)\n\nENABLE_LWP=\nif test \"$enable_lotuswordpro\" = \"yes\"; then\n    ENABLE_LWP=\"TRUE\"\nfi\nAC_SUBST(ENABLE_LWP)\n\ndnl ===================================================================\ndnl Check for building ODK\ndnl ===================================================================\nAC_MSG_CHECKING([whether to build the ODK])\nif test \"$enable_odk\" = yes; then\n    if test \"$DISABLE_DYNLOADING\" = TRUE; then\n        AC_MSG_ERROR([can't build ODK for --disable-dynamic-loading builds])\n    fi\n    AC_MSG_RESULT([yes])\n    BUILD_TYPE=\"$BUILD_TYPE ODK\"\nelse\n    AC_MSG_RESULT([no])\nfi\n\nif test \"$enable_odk\" != yes; then\n    unset DOXYGEN\nelse\n    if test \"$with_doxygen\" = no; then\n        AC_MSG_CHECKING([for doxygen])\n        unset DOXYGEN\n        AC_MSG_RESULT([no])\n    else\n        if test \"$with_doxygen\" = yes; then\n            AC_PATH_PROG([DOXYGEN], [doxygen])\n            if test -z \"$DOXYGEN\"; then\n                AC_MSG_ERROR([doxygen not found in \\$PATH; specify its pathname via --with-doxygen=..., or disable its use via --without-doxygen])\n            fi\n            if $DOXYGEN -g - | grep -q \"HAVE_DOT *= *YES\"; then\n                if ! dot -V 2>/dev/null; then\n                    AC_MSG_ERROR([dot not found in \\$PATH but doxygen defaults to HAVE_DOT=YES; install graphviz or disable its use via --without-doxygen])\n                fi\n            fi\n        else\n            AC_MSG_CHECKING([for doxygen])\n            PathFormat \"$with_doxygen\"\n            DOXYGEN=\"$formatted_path_unix\"\n            AC_MSG_RESULT([$formatted_path])\n        fi\n        if test -n \"$DOXYGEN\"; then\n            DOXYGEN_VERSION=`$DOXYGEN --version 2>/dev/null`\n            DOXYGEN_NUMVERSION=`echo $DOXYGEN_VERSION | $AWK -F. '{ print \\$1*10000 + \\$2*100 + \\$3 }'`\n            if ! test \"$DOXYGEN_NUMVERSION\" -ge \"10804\" ; then\n                AC_MSG_ERROR([found doxygen is too old; need at least version 1.8.4 or specify --without-doxygen])\n            fi\n        fi\n        if test -n \"$WSL_ONLY_AS_HELPER\"; then\n            dnl what really should be tested is whether it is doxygen from windows-realm\n            dnl i.e. one that runs on the windows-side and deals with windows-pathnames\n            dnl using doxygen from wsl container would be possible, but there's a performance\n            dnl penalty when accessing the files outside the container\n            AC_MSG_CHECKING([whether doxygen is a windows executable])\n            if $(file \"$DOXYGEN\" | grep -q \"PE32\"); then\n                AC_MSG_RESULT([yes])\n            else\n                AC_MSG_RESULT([no])\n                AC_MSG_ERROR([please provide a path to a windows version of doxygen or use --without-doxygen])\n            fi\n        fi\n    fi\nfi\nAC_SUBST([DOXYGEN])\n\ndnl ==================================================================\ndnl libfuzzer\ndnl ==================================================================\nAC_MSG_CHECKING([whether to enable fuzzers])\nif test \"$enable_fuzzers\" != yes; then\n    AC_MSG_RESULT([no])\nelse\n    if test -z $LIB_FUZZING_ENGINE; then\n      AC_MSG_ERROR(['LIB_FUZZING_ENGINE' must be set when using --enable-fuzzers. Examples include '-fsanitize=fuzzer'.])\n    fi\n    AC_MSG_RESULT([yes])\n    ENABLE_FUZZERS=\"TRUE\"\n    AC_DEFINE([ENABLE_FUZZERS],1)\n    BUILD_TYPE=\"$BUILD_TYPE FUZZERS\"\nfi\nAC_SUBST(LIB_FUZZING_ENGINE)\n\ndnl ===================================================================\ndnl Check for system zlib\ndnl ===================================================================\nif test \"$with_system_zlib\" = \"auto\"; then\n    case \"$_os\" in\n    WINNT)\n        with_system_zlib=\"$with_system_libs\"\n        ;;\n    *)\n        if test \"$enable_fuzzers\" != \"yes\"; then\n            with_system_zlib=yes\n        else\n            with_system_zlib=no\n        fi\n        ;;\n    esac\nfi\n\ndnl we want to use libo_CHECK_SYSTEM_MODULE here too, but macOS is too stupid\ndnl and has no pkg-config for it at least on some tinderboxes,\ndnl so leaving that out for now\ndnl libo_CHECK_SYSTEM_MODULE([zlib],[ZLIB],[zlib])\nAC_MSG_CHECKING([which zlib to use])\nif test \"$with_system_zlib\" = \"yes\"; then\n    AC_MSG_RESULT([external])\n    SYSTEM_ZLIB=TRUE\n    AC_CHECK_HEADER(zlib.h, [],\n        [AC_MSG_ERROR(zlib.h not found. install zlib)], [])\n    AC_CHECK_LIB(z, deflate, [ ZLIB_LIBS=-lz ],\n        [AC_MSG_ERROR(zlib not found or functional)], [])\nelse\n    AC_MSG_RESULT([internal])\n    SYSTEM_ZLIB=\n    BUILD_TYPE=\"$BUILD_TYPE ZLIB\"\n    ZLIB_CFLAGS=\"-I${WORKDIR}/UnpackedTarball/zlib\"\n    if test \"$COM\" = \"MSC\"; then\n        ZLIB_LIBS='$(gb_StaticLibrary_WORKDIR)/zlib.lib'\n    else\n        ZLIB_LIBS='-L$(gb_StaticLibrary_WORKDIR) -lzlib'\n    fi\nfi\nAC_SUBST(ZLIB_CFLAGS)\nAC_SUBST(ZLIB_LIBS)\nAC_SUBST(SYSTEM_ZLIB)\n\ndnl ===================================================================\ndnl Check for system jpeg\ndnl ===================================================================\nAC_MSG_CHECKING([which libjpeg to use])\nif test \"$with_system_jpeg\" = \"yes\"; then\n    AC_MSG_RESULT([external])\n    SYSTEM_LIBJPEG=TRUE\n    AC_CHECK_HEADER(jpeglib.h, [ LIBJPEG_CFLAGS= ],\n        [AC_MSG_ERROR(jpeg.h not found. install libjpeg)], [])\n    AC_CHECK_LIB(jpeg, jpeg_resync_to_restart, [ LIBJPEG_LIBS=\"-ljpeg\" ],\n        [AC_MSG_ERROR(jpeg library not found or functional)], [])\nelse\n    SYSTEM_LIBJPEG=\n    AC_MSG_RESULT([internal, libjpeg-turbo])\n    BUILD_TYPE=\"$BUILD_TYPE LIBJPEG_TURBO\"\n\n    case \"$host_cpu\" in\n    x86_64 | amd64 | i*86 | x86 | ia32)\n        AC_CHECK_PROGS(NASM, [nasm nasmw yasm])\n        if test -z \"$NASM\" -a \"$build_os\" = \"cygwin\"; then\n            if test -n \"$LODE_HOME\" -a -x \"$LODE_HOME/opt/bin/nasm\"; then\n                NASM=\"$LODE_HOME/opt/bin/nasm\"\n            elif test -x \"/opt/lo/bin/nasm\"; then\n                NASM=\"/opt/lo/bin/nasm\"\n            fi\n        fi\n\n        if test -n \"$NASM\"; then\n            AC_MSG_CHECKING([for object file format of host system])\n            case \"$host_os\" in\n              cygwin* | mingw* | pw32* | wsl*)\n                case \"$host_cpu\" in\n                  x86_64)\n                    objfmt='Win64-COFF'\n                    ;;\n                  *)\n                    objfmt='Win32-COFF'\n                    ;;\n                esac\n              ;;\n              msdosdjgpp* | go32*)\n                objfmt='COFF'\n              ;;\n              os2-emx*) # not tested\n                objfmt='MSOMF' # obj\n              ;;\n              linux*coff* | linux*oldld*)\n                objfmt='COFF' # ???\n              ;;\n              linux*aout*)\n                objfmt='a.out'\n              ;;\n              linux*)\n                case \"$host_cpu\" in\n                  x86_64)\n                    objfmt='ELF64'\n                    ;;\n                  *)\n                    objfmt='ELF'\n                    ;;\n                esac\n              ;;\n              kfreebsd* | freebsd* | netbsd* | openbsd*)\n                if echo __ELF__ | $CC -E - | grep __ELF__ > /dev/null; then\n                  objfmt='BSD-a.out'\n                else\n                  case \"$host_cpu\" in\n                    x86_64 | amd64)\n                      objfmt='ELF64'\n                      ;;\n                    *)\n                      objfmt='ELF'\n                      ;;\n                  esac\n                fi\n              ;;\n              solaris* | sunos* | sysv* | sco*)\n                case \"$host_cpu\" in\n                  x86_64)\n                    objfmt='ELF64'\n                    ;;\n                  *)\n                    objfmt='ELF'\n                    ;;\n                esac\n              ;;\n              darwin* | rhapsody* | nextstep* | openstep* | macos*)\n                case \"$host_cpu\" in\n                  x86_64)\n                    objfmt='Mach-O64'\n                    ;;\n                  *)\n                    objfmt='Mach-O'\n                    ;;\n                esac\n              ;;\n              *)\n                objfmt='ELF ?'\n              ;;\n            esac\n\n            AC_MSG_RESULT([$objfmt])\n            if test \"$objfmt\" = 'ELF ?'; then\n              objfmt='ELF'\n              AC_MSG_WARN([unexpected host system. assumed that the format is $objfmt.])\n            fi\n\n            AC_MSG_CHECKING([for object file format specifier (NAFLAGS) ])\n            case \"$objfmt\" in\n              MSOMF)      NAFLAGS='-fobj -DOBJ32 -DPIC';;\n              Win32-COFF) NAFLAGS='-fwin32 -DWIN32 -DPIC';;\n              Win64-COFF) NAFLAGS='-fwin64 -DWIN64 -D__x86_64__ -DPIC';;\n              COFF)       NAFLAGS='-fcoff -DCOFF -DPIC';;\n              a.out)      NAFLAGS='-faout -DAOUT -DPIC';;\n              BSD-a.out)  NAFLAGS='-faoutb -DAOUT -DPIC';;\n              ELF)        NAFLAGS='-felf -DELF -DPIC';;\n              ELF64)      NAFLAGS='-felf64 -DELF -D__x86_64__ -DPIC';;\n              RDF)        NAFLAGS='-frdf -DRDF -DPIC';;\n              Mach-O)     NAFLAGS='-fmacho -DMACHO -DPIC';;\n              Mach-O64)   NAFLAGS='-fmacho64 -DMACHO -D__x86_64__ -DPIC';;\n            esac\n            AC_MSG_RESULT([$NAFLAGS])\n\n            AC_MSG_CHECKING([whether the assembler ($NASM $NAFLAGS) works])\n            cat > conftest.asm << EOF\n            [%line __oline__ \"configure\"\n                    section .text\n                    global  _main,main\n            _main:\n            main:   xor     eax,eax\n                    ret\n            ]\nEOF\n            try_nasm='$NASM $NAFLAGS -o conftest.o conftest.asm'\n            if AC_TRY_EVAL(try_nasm) && test -s conftest.o; then\n              AC_MSG_RESULT(yes)\n            else\n              echo \"configure: failed program was:\" >&AS_MESSAGE_LOG_FD\n              cat conftest.asm >&AS_MESSAGE_LOG_FD\n              rm -rf conftest*\n              AC_MSG_RESULT(no)\n              AC_MSG_WARN([installation or configuration problem: assembler cannot create object files.])\n              NASM=\"\"\n            fi\n\n        fi\n\n        if test -z \"$NASM\"; then\ncat << _EOS\n****************************************************************************\nYou need yasm or nasm (Netwide Assembler) to build the internal jpeg library optimally.\nTo get one please:\n\n_EOS\n            if test \"$build_os\" = \"cygwin\"; then\ncat << _EOS\ninstall a pre-compiled binary for Win32\n\nmkdir -p /opt/lo/bin\ncd /opt/lo/bin\nwget https://dev-www.libreoffice.org/bin/cygwin/nasm.exe\nchmod +x nasm\n\nor get and install one from https://www.nasm.us/\n\nThen re-run autogen.sh\n\nNote: autogen.sh will try to use /opt/lo/bin/nasm if the environment variable NASM is not already defined.\nAlternatively, you can install the 'new' nasm where ever you want and make sure that \\`command -v nasm\\` finds it.\n\n_EOS\n            else\ncat << _EOS\nconsult https://github.com/libjpeg-turbo/libjpeg-turbo/blob/main/BUILDING.md\n\n_EOS\n            fi\n            AC_MSG_WARN([no suitable nasm (Netwide Assembler) found])\n            add_warning \"no suitable nasm (Netwide Assembler) found for internal libjpeg-turbo\"\n        fi\n      ;;\n    esac\nfi\n\nAC_SUBST(NASM)\nAC_SUBST(NAFLAGS)\nAC_SUBST(LIBJPEG_CFLAGS)\nAC_SUBST(LIBJPEG_LIBS)\nAC_SUBST(SYSTEM_LIBJPEG)\n\ndnl ===================================================================\ndnl Check for system clucene\ndnl ===================================================================\nlibo_CHECK_SYSTEM_MODULE([clucene],[CLUCENE],[libclucene-core])\nif test \"$SYSTEM_CLUCENE\" = TRUE; then\n    AC_LANG_PUSH([C++])\n    save_CXXFLAGS=$CXXFLAGS\n    save_CPPFLAGS=$CPPFLAGS\n    CXXFLAGS=\"$CXXFLAGS $CLUCENE_CFLAGS\"\n    CPPFLAGS=\"$CPPFLAGS $CLUCENE_CFLAGS\"\n    dnl https://sourceforge.net/p/clucene/bugs/200/\n    dnl https://bugzilla.redhat.com/show_bug.cgi?id=794795\n    AC_CHECK_HEADER([CLucene/analysis/cjk/CJKAnalyzer.h], [],\n                 [AC_MSG_ERROR([Your version of libclucene has contribs-lib missing.])], [#include <CLucene.h>])\n    CXXFLAGS=$save_CXXFLAGS\n    CPPFLAGS=$save_CPPFLAGS\n    AC_LANG_POP([C++])\n    CLUCENE_LIBS=\"$CLUCENE_LIBS -lclucene-contribs-lib\"\nfi\n\ndnl ===================================================================\ndnl Check for system expat\ndnl ===================================================================\nlibo_CHECK_SYSTEM_MODULE([expat], [EXPAT], [expat])\n\ndnl ===================================================================\ndnl Check for system xmlsec\ndnl ===================================================================\nlibo_CHECK_SYSTEM_MODULE([xmlsec], [XMLSEC], [xmlsec1-nss >= 1.2.35])\n\nAC_MSG_CHECKING([whether to enable Embedded OpenType support])\nif test \"$enable_eot\" = \"yes\"; then\n    ENABLE_EOT=\"TRUE\"\n    AC_DEFINE([ENABLE_EOT])\n    AC_MSG_RESULT([yes])\n\n    libo_CHECK_SYSTEM_MODULE([libeot],[LIBEOT],[libeot >= 0.01])\nelse\n    ENABLE_EOT=\n    AC_MSG_RESULT([no])\nfi\nAC_SUBST([ENABLE_EOT])\n\ndnl ===================================================================\ndnl Check for DLP libs\ndnl ===================================================================\nREVENGE_CFLAGS_internal=\"-I${WORKDIR}/UnpackedTarball/librevenge/inc\"\nAS_IF([test \"$COM\" = \"MSC\"],\n      [librevenge_libdir='$(gb_Library_DLLDIR)'],\n      [librevenge_libdir=\"${WORKDIR}/UnpackedTarball/librevenge/src/lib/.libs\"]\n)\nREVENGE_LIBS_internal=\"-L${librevenge_libdir} -lrevenge-0.0\"\nlibo_CHECK_SYSTEM_MODULE([librevenge],[REVENGE],[librevenge-0.0 >= 0.0.1])\n\nlibo_CHECK_SYSTEM_MODULE([libodfgen],[ODFGEN],[libodfgen-0.1])\n\nlibo_CHECK_SYSTEM_MODULE([libepubgen],[EPUBGEN],[libepubgen-0.1])\n\nWPD_CFLAGS_internal=\"-I${WORKDIR}/UnpackedTarball/libwpd/inc\"\nAS_IF([test \"$COM\" = \"MSC\"],\n      [libwpd_libdir='$(gb_Library_DLLDIR)'],\n      [libwpd_libdir=\"${WORKDIR}/UnpackedTarball/libwpd/src/lib/.libs\"]\n)\nWPD_LIBS_internal=\"-L${libwpd_libdir} -lwpd-0.10\"\nlibo_CHECK_SYSTEM_MODULE([libwpd],[WPD],[libwpd-0.10])\n\nlibo_CHECK_SYSTEM_MODULE([libwpg],[WPG],[libwpg-0.3])\n\nlibo_CHECK_SYSTEM_MODULE([libwps],[WPS],[libwps-0.4])\nlibo_PKG_VERSION([WPS], [libwps-0.4], [0.4.14])\n\nlibo_CHECK_SYSTEM_MODULE([libvisio],[VISIO],[libvisio-0.1])\n\nlibo_CHECK_SYSTEM_MODULE([libcdr],[CDR],[libcdr-0.1])\n\nlibo_CHECK_SYSTEM_MODULE([libmspub],[MSPUB],[libmspub-0.1])\n\nlibo_CHECK_SYSTEM_MODULE([libmwaw],[MWAW],[libmwaw-0.3 >= 0.3.21])\nlibo_PKG_VERSION([MWAW], [libmwaw-0.3], [0.3.21])\n\nlibo_CHECK_SYSTEM_MODULE([libetonyek],[ETONYEK],[libetonyek-0.1])\nlibo_PKG_VERSION([ETONYEK], [libetonyek-0.1], [0.1.10])\n\nlibo_CHECK_SYSTEM_MODULE([libfreehand],[FREEHAND],[libfreehand-0.1])\n\nlibo_CHECK_SYSTEM_MODULE([libebook],[EBOOK],[libe-book-0.1])\nlibo_PKG_VERSION([EBOOK], [libe-book-0.1], [0.1.2])\n\nlibo_CHECK_SYSTEM_MODULE([libabw],[ABW],[libabw-0.1])\n\nlibo_CHECK_SYSTEM_MODULE([libpagemaker],[PAGEMAKER],[libpagemaker-0.0])\n\nlibo_CHECK_SYSTEM_MODULE([libqxp],[QXP],[libqxp-0.0])\n\nlibo_CHECK_SYSTEM_MODULE([libzmf],[ZMF],[libzmf-0.0])\n\nlibo_CHECK_SYSTEM_MODULE([libstaroffice],[STAROFFICE],[libstaroffice-0.0])\nlibo_PKG_VERSION([STAROFFICE], [libstaroffice-0.0], [0.0.7])\n\ndnl ===================================================================\ndnl Check for system lcms2\ndnl ===================================================================\nif test \"$with_system_lcms2\" != \"yes\"; then\n    SYSTEM_LCMS2=\nfi\nLCMS2_CFLAGS_internal=\"-I${WORKDIR}/UnpackedTarball/lcms2/include\"\nLCMS2_LIBS_internal=\"-L${WORKDIR}/UnpackedTarball/lcms2/src/.libs -llcms2\"\nlibo_CHECK_SYSTEM_MODULE([lcms2],[LCMS2],[lcms2])\nif test \"$GCC\" = \"yes\"; then\n    LCMS2_CFLAGS=\"${LCMS2_CFLAGS} -Wno-long-long\"\nfi\nif test \"$COM\" = \"MSC\"; then # override the above\n    LCMS2_LIBS=${WORKDIR}/UnpackedTarball/lcms2/bin/lcms2.lib\nfi\n\ndnl ===================================================================\ndnl Check for system cppunit\ndnl ===================================================================\nif test \"$_os\" != \"Android\" ; then\n    libo_CHECK_SYSTEM_MODULE([cppunit],[CPPUNIT],[cppunit >= 1.14.0])\nfi\n\ndnl ===================================================================\ndnl Check whether freetype is available\ndnl\ndnl FreeType has 3 different kinds of versions\ndnl * release, like 2.4.10\ndnl * libtool, like 13.0.7 (this what pkg-config returns)\ndnl * soname\ndnl FreeType's docs/VERSION.DLL provides a table mapping between the three\ndnl\ndnl 9.9.3 is 2.2.0\ndnl When the minimal version is at least 2.8.1, remove Skia's check down below.\ndnl ===================================================================\nFREETYPE_CFLAGS_internal=\"${ISYSTEM}${WORKDIR}/UnpackedTarball/freetype/include\"\nif test \"x$ac_config_site_64bit_host\" = xYES; then\n    FREETYPE_LIBS_internal=\"-L${WORKDIR}/UnpackedTarball/freetype/instdir/lib64 -lfreetype\"\nelse\n    FREETYPE_LIBS_internal=\"-L${WORKDIR}/UnpackedTarball/freetype/instdir/lib -lfreetype\"\nfi\nlibo_CHECK_SYSTEM_MODULE([freetype],[FREETYPE],[freetype2 >= 9.9.3],,system,TRUE)\n\n# ===================================================================\n# Check for system libxslt\n# to prevent incompatibilities between internal libxml2 and external libxslt,\n# or vice versa, use with_system_libxml here\n# ===================================================================\nif test \"$with_system_libxml\" = \"auto\"; then\n    case \"$_os\" in\n    WINNT|iOS|Android)\n        with_system_libxml=\"$with_system_libs\"\n        ;;\n    Emscripten)\n        with_system_libxml=no\n        ;;\n    *)\n        if test \"$enable_fuzzers\" != \"yes\"; then\n            with_system_libxml=yes\n        else\n            with_system_libxml=no\n        fi\n        ;;\n    esac\nfi\n\nAC_MSG_CHECKING([which libxslt to use])\nif test \"$with_system_libxml\" = \"yes\"; then\n    AC_MSG_RESULT([external])\n    SYSTEM_LIBXSLT=TRUE\n    if test \"$_os\" = \"Darwin\"; then\n        dnl make sure to use SDK path\n        LIBXSLT_CFLAGS=\"-I$MACOSX_SDK_PATH/usr/include/libxml2\"\n        LIBEXSLT_CFLAGS=\"$LIBXSLT_CFLAGS\"\n        dnl omit -L/usr/lib\n        LIBXSLT_LIBS=\"-lxslt -lxml2 -lz -lpthread -liconv -lm\"\n        LIBEXSLT_LIBS=\"-lexslt $LIBXSLT_LIBS\"\n    else\n        PKG_CHECK_MODULES(LIBXSLT, libxslt)\n        LIBXSLT_CFLAGS=$(printf '%s' \"$LIBXSLT_CFLAGS\" | sed -e \"s/-I/${ISYSTEM?}/g\")\n        FilterLibs \"${LIBXSLT_LIBS}\"\n        LIBXSLT_LIBS=\"${filteredlibs}\"\n        PKG_CHECK_MODULES(LIBEXSLT, libexslt)\n        LIBEXSLT_CFLAGS=$(printf '%s' \"$LIBEXSLT_CFLAGS\" | sed -e \"s/-I/${ISYSTEM?}/g\")\n        FilterLibs \"${LIBEXSLT_LIBS}\"\n        LIBEXSLT_LIBS=$(printf '%s' \"${filteredlibs}\" | sed -e \"s/-lgpg-error//\"  -e \"s/-lgcrypt//\")\n    fi\n\n    dnl Check for xsltproc\n    AC_PATH_PROG(XSLTPROC, xsltproc, no)\n    if test \"$XSLTPROC\" = \"no\"; then\n        AC_MSG_ERROR([xsltproc is required])\n    fi\nelse\n    AC_MSG_RESULT([internal])\n    SYSTEM_LIBXSLT=\n    BUILD_TYPE=\"$BUILD_TYPE LIBXSLT\"\nfi\nAC_SUBST(SYSTEM_LIBXSLT)\nif test -z \"$SYSTEM_LIBXSLT_FOR_BUILD\"; then\n    SYSTEM_LIBXSLT_FOR_BUILD=\"$SYSTEM_LIBXSLT\"\nfi\nAC_SUBST(SYSTEM_LIBXSLT_FOR_BUILD)\n\nAC_SUBST(LIBEXSLT_CFLAGS)\nAC_SUBST(LIBEXSLT_LIBS)\nAC_SUBST(LIBXSLT_CFLAGS)\nAC_SUBST(LIBXSLT_LIBS)\nAC_SUBST(XSLTPROC)\n\n# ===================================================================\n# Check for system libxml\n# ===================================================================\nAC_MSG_CHECKING([which libxml to use])\nif test \"$with_system_libxml\" = \"yes\"; then\n    AC_MSG_RESULT([external])\n    SYSTEM_LIBXML=TRUE\n    if test \"$_os\" = \"Darwin\"; then\n        dnl make sure to use SDK path\n        LIBXML_CFLAGS=\"-I$MACOSX_SDK_PATH/usr/include/libxml2\"\n        dnl omit -L/usr/lib\n        LIBXML_LIBS=\"-lxml2 -lz -lpthread -liconv -lm\"\n    elif test $_os = iOS; then\n        dnl make sure to use SDK path\n        usr=`echo '#include <stdlib.h>' | $CC -E -MD - | grep usr/include/stdlib.h | head -1 | sed -e 's,# 1 \",,' -e 's,/usr/include/.*,/usr,'`\n        LIBXML_CFLAGS=\"-I$usr/include/libxml2\"\n        LIBXML_LIBS=\"-L$usr/lib -lxml2 -liconv\"\n    else\n        PKG_CHECK_MODULES(LIBXML, libxml-2.0 >= 2.0)\n        LIBXML_CFLAGS=$(printf '%s' \"$LIBXML_CFLAGS\" | sed -e \"s/-I/${ISYSTEM?}/g\")\n        FilterLibs \"${LIBXML_LIBS}\"\n        LIBXML_LIBS=\"${filteredlibs}\"\n    fi\n\n    dnl Check for xmllint\n    AC_PATH_PROG(XMLLINT, xmllint, no)\n    if test \"$XMLLINT\" = \"no\"; then\n        AC_MSG_ERROR([xmllint is required])\n    fi\nelse\n    AC_MSG_RESULT([internal])\n    SYSTEM_LIBXML=\n    LIBXML_CFLAGS=\"-I${WORKDIR}/UnpackedTarball/libxml2/include\"\n    if test \"$COM\" = \"MSC\"; then\n        LIBXML_CFLAGS=\"${LIBXML_CFLAGS} -I${WORKDIR}/UnpackedTarball/icu/source/i18n -I${WORKDIR}/UnpackedTarball/icu/source/common\"\n    fi\n    if test \"$COM\" = \"MSC\"; then\n        LIBXML_LIBS=\"${WORKDIR}/UnpackedTarball/libxml2/win32/bin.msvc/libxml2.lib\"\n    else\n        LIBXML_LIBS=\"-L${WORKDIR}/UnpackedTarball/libxml2/.libs -lxml2\"\n        if test \"$DISABLE_DYNLOADING\" = TRUE; then\n            LIBXML_LIBS=\"$LIBXML_LIBS -lm\"\n        fi\n    fi\n    BUILD_TYPE=\"$BUILD_TYPE LIBXML2\"\nfi\nAC_SUBST(SYSTEM_LIBXML)\nif test -z \"$SYSTEM_LIBXML_FOR_BUILD\"; then\n    SYSTEM_LIBXML_FOR_BUILD=\"$SYSTEM_LIBXML\"\nfi\nAC_SUBST(SYSTEM_LIBXML_FOR_BUILD)\nAC_SUBST(LIBXML_CFLAGS)\nAC_SUBST(LIBXML_LIBS)\nAC_SUBST(XMLLINT)\n\n# =====================================================================\n# Checking for a Python interpreter with version >= 3.3.\n# Optionally user can pass an option to configure, i. e.\n# ./configure PYTHON=/usr/bin/python\n# =====================================================================\nif test $_os = Darwin -a \"$enable_python\" != no -a \"$enable_python\" != fully-internal -a \"$enable_python\" != internal -a \"$enable_python\" != system; then\n    # Only allowed choices for macOS are 'no', 'internal' (default), and 'fully-internal'\n    # unless PYTHON is defined as above which allows 'system'\n    enable_python=internal\nfi\nif test \"$build_os\" != \"cygwin\" -a \"$enable_python\" != fully-internal; then\n    if test -n \"$PYTHON\"; then\n        PYTHON_FOR_BUILD=$PYTHON\n    else\n        # This allows a lack of system python with no error, we use internal one in that case.\n        AM_PATH_PYTHON([3.3],, [:])\n        # Clean PYTHON_VERSION checked below if cross-compiling\n        PYTHON_VERSION=\"\"\n        if test \"$PYTHON\" != \":\"; then\n            PYTHON_FOR_BUILD=$PYTHON\n        fi\n    fi\nfi\n\n# Checks for Python to use for Pyuno\nAC_MSG_CHECKING([which Python to use for Pyuno])\ncase \"$enable_python\" in\nno|disable)\n    if test -z \"$PYTHON_FOR_BUILD\" -a \"$cross_compiling\" != yes; then\n        # Python is required to build LibreOffice. In theory we could separate the build-time Python\n        # requirement from the choice whether to include Python stuff in the installer, but why\n        # bother?\n        AC_MSG_ERROR([Python is required at build time.])\n    fi\n    enable_python=no\n    AC_MSG_RESULT([none])\n    ;;\n\"\"|yes|auto)\n    if test \"$DISABLE_SCRIPTING\" = TRUE; then\n        if test -z \"$PYTHON_FOR_BUILD\" -a \"$cross_compiling\" != yes; then\n            AC_MSG_ERROR([Python support can't be disabled without cross-compiling or a system python.])\n        fi\n        AC_MSG_RESULT([none, overridden by --disable-scripting])\n        enable_python=no\n    elif test $build_os = cygwin -o $build_os = wsl; then\n        dnl When building on Windows we don't attempt to use any installed\n        dnl \"system\"  Python.\n        AC_MSG_RESULT([fully internal])\n        enable_python=internal\n    elif test \"$cross_compiling\" = yes; then\n        AC_MSG_RESULT([system])\n        enable_python=system\n    else\n        # Unset variables set by the above AM_PATH_PYTHON so that\n        # we actually do check anew.\n        AC_MSG_RESULT([])\n        unset PYTHON am_cv_pathless_PYTHON ac_cv_path_PYTHON am_cv_python_version am_cv_python_platform am_cv_python_pythondir am_cv_python_pyexecdir\n        AM_PATH_PYTHON([3.3],, [:])\n        AC_MSG_CHECKING([which Python to use for Pyuno])\n        if test \"$PYTHON\" = \":\"; then\n            if test -z \"$PYTHON_FOR_BUILD\"; then\n                AC_MSG_RESULT([fully internal])\n            else\n                AC_MSG_RESULT([internal])\n            fi\n            enable_python=internal\n        else\n            AC_MSG_RESULT([system])\n            enable_python=system\n        fi\n    fi\n    ;;\ninternal)\n    AC_MSG_RESULT([internal])\n    ;;\nfully-internal)\n    AC_MSG_RESULT([fully internal])\n    enable_python=internal\n    ;;\nsystem)\n    AC_MSG_RESULT([system])\n    if test \"$_os\" = Darwin -a -z \"$PYTHON\"; then\n        AC_MSG_ERROR([--enable-python=system doesn't work on macOS because the version provided is obsolete])\n    fi\n    ;;\n*)\n    AC_MSG_ERROR([Incorrect --enable-python option])\n    ;;\nesac\n\nif test $enable_python != no; then\n    BUILD_TYPE=\"$BUILD_TYPE PYUNO\"\nfi\n\nif test $enable_python = system; then\n    if test -n \"$PYTHON_CFLAGS\" -a -n \"$PYTHON_LIBS\"; then\n        # Fallback: Accept these in the environment, or as set above\n        # for MacOSX.\n        :\n    elif test \"$cross_compiling\" != yes; then\n        # Unset variables set by the above AM_PATH_PYTHON so that\n        # we actually do check anew.\n        unset PYTHON am_cv_pathless_PYTHON ac_cv_path_PYTHON am_cv_python_version am_cv_python_platform am_cv_python_pythondir am_cv_python_pyexecdir\n        # This causes an error if no python command is found\n        AM_PATH_PYTHON([3.3])\n        python_include=`$PYTHON -c \"import distutils.sysconfig; print(distutils.sysconfig.get_config_var('INCLUDEPY'));\"`\n        python_version=`$PYTHON -c \"import distutils.sysconfig; print(distutils.sysconfig.get_config_var('VERSION'));\"`\n        python_libs=`$PYTHON -c \"import distutils.sysconfig; print(distutils.sysconfig.get_config_var('LIBS'));\"`\n        python_libdir=`$PYTHON -c \"import distutils.sysconfig; print(distutils.sysconfig.get_config_var('LIBDIR'));\"`\n        if test -z \"$PKG_CONFIG\"; then\n            PYTHON_CFLAGS=\"-I$python_include\"\n            PYTHON_LIBS=\"-L$python_libdir -lpython$python_version $python_libs\"\n        elif $PKG_CONFIG --exists python-$python_version-embed; then\n            PYTHON_CFLAGS=\"`$PKG_CONFIG --cflags python-$python_version-embed`\"\n            PYTHON_LIBS=\"`$PKG_CONFIG --libs python-$python_version-embed` $python_libs\"\n        elif $PKG_CONFIG --exists python-$python_version; then\n            PYTHON_CFLAGS=\"`$PKG_CONFIG --cflags python-$python_version`\"\n            PYTHON_LIBS=\"`$PKG_CONFIG --libs python-$python_version` $python_libs\"\n        else\n            PYTHON_CFLAGS=\"-I$python_include\"\n            PYTHON_LIBS=\"-L$python_libdir -lpython$python_version $python_libs\"\n        fi\n        FilterLibs \"${PYTHON_LIBS}\"\n        PYTHON_LIBS=\"${filteredlibs}\"\n    else\n        dnl How to find out the cross-compilation Python installation path?\n        AC_MSG_CHECKING([for python version])\n        AS_IF([test -n \"$PYTHON_VERSION\"],\n              [AC_MSG_RESULT([$PYTHON_VERSION])],\n              [AC_MSG_RESULT([not found])\n               AC_MSG_ERROR([no usable python found])])\n        test -n \"$PYTHON_CFLAGS\" && break\n    fi\n\n    dnl Check if the headers really work\n    save_CPPFLAGS=\"$CPPFLAGS\"\n    CPPFLAGS=\"$CPPFLAGS $PYTHON_CFLAGS\"\n    AC_CHECK_HEADER(Python.h)\n    CPPFLAGS=\"$save_CPPFLAGS\"\n\n    # let the PYTHON_FOR_BUILD match the same python installation that\n    # provides PYTHON_CFLAGS/PYTHON_LDFLAGS for pyuno, which should be\n    # better for PythonTests.\n    PYTHON_FOR_BUILD=$PYTHON\nfi\n\nif test \"$with_lxml\" != no; then\n    if test -z \"$PYTHON_FOR_BUILD\"; then\n        case $build_os in\n            cygwin)\n                AC_MSG_WARN([No system-provided python lxml, gla11y will only report widget classes and ids])\n                ;;\n            *)\n                if test \"$cross_compiling\" != yes ; then\n                    BUILD_TYPE=\"$BUILD_TYPE LXML\"\n                fi\n                ;;\n        esac\n    else\n        AC_MSG_CHECKING([for python lxml])\n        if $PYTHON_FOR_BUILD -c \"import lxml.etree as ET\" 2> /dev/null ; then\n            AC_MSG_RESULT([yes])\n        else\n            case $build_os in\n                cygwin)\n                    AC_MSG_RESULT([no, gla11y will only report widget classes and ids])\n                    ;;\n                *)\n                    if test \"$cross_compiling\" != yes -a \"x$ac_cv_header_Python_h\" = \"xyes\"; then\n                        if test -n ${SYSTEM_LIBXSLT} -o -n ${SYSTEM_LIBXML}; then\n                            AC_MSG_RESULT([no, and no system libxml/libxslt, gla11y will only report widget classes and ids])\n                        else\n                            BUILD_TYPE=\"$BUILD_TYPE LXML\"\n                            AC_MSG_RESULT([no, using internal lxml])\n                        fi\n                    else\n                        AC_MSG_RESULT([no, and system does not provide python development headers, gla11y will only report widget classes and ids])\n                    fi\n                    ;;\n            esac\n        fi\n    fi\nfi\n\nif test \\( \"$cross_compiling\" = yes -a -z \"$PYTHON_FOR_BUILD\" \\) -o \"$enable_python\" = internal; then\n    SYSTEM_PYTHON=\n    PYTHON_VERSION_MAJOR=3\n    PYTHON_VERSION_MINOR=11\n    PYTHON_VERSION=${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}.11\n    if ! grep -q -i python.*${PYTHON_VERSION} ${SRC_ROOT}/download.lst; then\n        AC_MSG_ERROR([PYTHON_VERSION ${PYTHON_VERSION} but no matching file in download.lst])\n    fi\n    AC_DEFINE_UNQUOTED([PYTHON_VERSION_STRING], [L\"${PYTHON_VERSION}\"])\n\n    # Embedded Python dies without Home set\n    if test \"$HOME\" = \"\"; then\n        export HOME=\"\"\n    fi\nfi\n\ndnl By now enable_python should be \"system\", \"internal\" or \"no\"\ncase $enable_python in\nsystem)\n    SYSTEM_PYTHON=TRUE\n\n    if test \"x$ac_cv_header_Python_h\" != \"xyes\"; then\n       AC_MSG_ERROR([Python headers not found. You probably want to set both the PYTHON_CFLAGS and PYTHON_LIBS environment variables.])\n    fi\n\n    AC_LANG_PUSH(C)\n    CFLAGS=\"$CFLAGS $PYTHON_CFLAGS\"\n    AC_MSG_CHECKING([for correct python library version])\n       AC_RUN_IFELSE([AC_LANG_SOURCE([[\n#include <Python.h>\n\nint main(int argc, char **argv) {\n   if ((PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION >= 3)) return 0;\n   else return 1;\n}\n       ]])],[AC_MSG_RESULT([ok])],[AC_MSG_ERROR([Python >= 3.3 is needed when building with Python 3])],[AC_MSG_RESULT([skipped; cross-compiling])])\n    AC_LANG_POP(C)\n\n    dnl FIXME Check if the Python library can be linked with, too?\n    ;;\n\ninternal)\n    BUILD_TYPE=\"$BUILD_TYPE PYTHON\"\n    if test \"$OS\" = LINUX -o \"$OS\" = WNT ; then\n        BUILD_TYPE=\"$BUILD_TYPE LIBFFI\"\n    fi\n    ;;\nno)\n    DISABLE_PYTHON=TRUE\n    SYSTEM_PYTHON=\n    ;;\n*)\n    AC_MSG_ERROR([Internal configure script error, invalid enable_python value \"$enable_python\"])\n    ;;\nesac\n\nAC_SUBST(DISABLE_PYTHON)\nAC_SUBST(SYSTEM_PYTHON)\nAC_SUBST(PYTHON_CFLAGS)\nAC_SUBST(PYTHON_FOR_BUILD)\nAC_SUBST(PYTHON_LIBS)\nAC_SUBST(PYTHON_VERSION)\nAC_SUBST(PYTHON_VERSION_MAJOR)\nAC_SUBST(PYTHON_VERSION_MINOR)\n\nAC_MSG_CHECKING([whether to build LibreLogo])\ncase \"$enable_python\" in\nno|disable)\n    AC_MSG_RESULT([no; Python disabled])\n    ;;\n*)\n    if test \"${enable_librelogo}\" = \"no\"; then\n        AC_MSG_RESULT([no])\n    else\n        AC_MSG_RESULT([yes])\n        BUILD_TYPE=\"${BUILD_TYPE} LIBRELOGO\"\n        AC_DEFINE([ENABLE_LIBRELOGO],1)\n    fi\n    ;;\nesac\nAC_SUBST(ENABLE_LIBRELOGO)\n\nENABLE_MARIADBC=\nMARIADBC_MAJOR=1\nMARIADBC_MINOR=0\nMARIADBC_MICRO=2\nAC_MSG_CHECKING([whether to build the MariaDB/MySQL SDBC driver])\nif test \"x$enable_mariadb_sdbc\" != \"xno\" -a \"$enable_mpl_subset\" != \"yes\"; then\n    ENABLE_MARIADBC=TRUE\n    AC_MSG_RESULT([yes])\n    BUILD_TYPE=\"$BUILD_TYPE MARIADBC\"\nelse\n    AC_MSG_RESULT([no])\nfi\nAC_SUBST(ENABLE_MARIADBC)\nAC_SUBST(MARIADBC_MAJOR)\nAC_SUBST(MARIADBC_MINOR)\nAC_SUBST(MARIADBC_MICRO)\n\nif test \"$ENABLE_MARIADBC\" = \"TRUE\"; then\n    dnl ===================================================================\n    dnl Check for system MariaDB\n    dnl ===================================================================\n\n    if test \"$with_gssapi\" = \"yes\" -a \"$enable_openssl\" = \"no\"; then\n        AC_MSG_ERROR([GSSAPI needs OpenSSL, but --disable-openssl was given.])\n    fi\n\n    AC_MSG_CHECKING([which MariaDB to use])\n    if test \"$with_system_mariadb\" = \"yes\"; then\n        AC_MSG_RESULT([external])\n        SYSTEM_MARIADB_CONNECTOR_C=TRUE\n        #AC_PATH_PROG(MARIADBCONFIG, [mariadb_config])\n        if test -z \"$MARIADBCONFIG\"; then\n            AC_PATH_PROG(MARIADBCONFIG, [mysql_config])\n            if test -z \"$MARIADBCONFIG\"; then\n                AC_MSG_ERROR([mysql_config is missing. Install MySQL client library development package.])\n                #AC_MSG_ERROR([mariadb_config and mysql_config are missing. Install MariaDB or MySQL client library development package.])\n            fi\n        fi\n        AC_MSG_CHECKING([MariaDB version])\n        MARIADB_VERSION=`$MARIADBCONFIG --version`\n        MARIADB_MAJOR=`$MARIADBCONFIG --version | cut -d\".\" -f1`\n        if test \"$MARIADB_MAJOR\" -ge \"5\"; then\n            AC_MSG_RESULT([OK])\n        else\n            AC_MSG_ERROR([too old, use 5.0.x or later])\n        fi\n        AC_MSG_CHECKING([for MariaDB Client library])\n        MARIADB_CFLAGS=`$MARIADBCONFIG --cflags`\n        if test \"$COM_IS_CLANG\" = TRUE; then\n            MARIADB_CFLAGS=$(printf '%s' \"$MARIADB_CFLAGS\" | sed -e s/-fstack-protector-strong//)\n        fi\n        MARIADB_LIBS=`$MARIADBCONFIG --libs_r`\n        dnl At least mariadb-5.5.34-3.fc20.x86_64 plus\n        dnl mariadb-5.5.34-3.fc20.i686 reports 64-bit specific output even under\n        dnl linux32:\n        if test \"$OS\" = LINUX -a \"$CPUNAME\" = INTEL; then\n            MARIADB_CFLAGS=$(printf '%s' \"$MARIADB_CFLAGS\" | sed -e s/-m64//)\n            MARIADB_LIBS=$(printf '%s' \"$MARIADB_LIBS\" \\\n                | sed -e 's|/lib64/|/lib/|')\n        fi\n        FilterLibs \"${MARIADB_LIBS}\"\n        MARIADB_LIBS=\"${filteredlibs}\"\n        AC_MSG_RESULT([includes '$MARIADB_CFLAGS', libraries '$MARIADB_LIBS'])\n        AC_MSG_CHECKING([whether to bundle the MySQL/MariaDB client library])\n        if test \"$enable_bundle_mariadb\" = \"yes\"; then\n            AC_MSG_RESULT([yes])\n            BUNDLE_MARIADB_CONNECTOR_C=TRUE\n            LIBMARIADB=lib$(echo \"${MARIADB_LIBS}\" | sed -e 's/[[[:space:]]]\\{1,\\}-l\\([[^[:space:]]]\\{1,\\}\\)/\\\n\\1\\\n/g' -e 's/^-l\\([[^[:space:]]]\\{1,\\}\\)[[[:space:]]]*/\\\n\\1\\\n/g' | grep -E '(mysqlclient|mariadb)')\n            if test \"$_os\" = \"Darwin\"; then\n                LIBMARIADB=${LIBMARIADB}.dylib\n                if test \"$with_gssapi\" != \"no\"; then\n                    WITH_GSSAPI=TRUE\n                    save_LIBS=$LIBS\n                    AC_SEARCH_LIBS(gss_init_sec_context, [gssapi_krb5 gss 'gssapi -lkrb5 -lcrypto'], [],\n                        [AC_MSG_ERROR([could not find function 'gss_init_sec_context' required for GSSAPI])])\n                    GSSAPI_LIBS=$LIBS\n                    LIBS=$save_LIBS\n                fi\n            elif test \"$_os\" = \"WINNT\"; then\n                LIBMARIADB=${LIBMARIADB}.dll\n            else\n                LIBMARIADB=${LIBMARIADB}.so\n                if test \"$with_gssapi\" != \"no\"; then\n                    WITH_GSSAPI=TRUE\n                    save_LIBS=$LIBS\n                    AC_SEARCH_LIBS(gss_init_sec_context, [gssapi_krb5 gss 'gssapi -lkrb5 -lcrypto'], [],\n                        [AC_MSG_ERROR([could not find function 'gss_init_sec_context' required for GSSAPI])])\n                    GSSAPI_LIBS=$LIBS\n                    LIBS=$save_LIBS\n                fi\n            fi\n            LIBMARIADB_PATH=$($MARIADBCONFIG --variable=pkglibdir)\n            AC_MSG_CHECKING([for $LIBMARIADB in $LIBMARIADB_PATH])\n            if test -e \"$LIBMARIADB_PATH/$LIBMARIADB\"; then\n                AC_MSG_RESULT([found.])\n                PathFormat \"$LIBMARIADB_PATH\"\n                LIBMARIADB_PATH=\"$formatted_path\"\n            else\n                AC_MSG_ERROR([not found.])\n            fi\n        else\n            AC_MSG_RESULT([no])\n            BUNDLE_MARIADB_CONNECTOR_C=\n        fi\n    else\n        AC_MSG_RESULT([internal])\n        SYSTEM_MARIADB_CONNECTOR_C=\n        MARIADB_CFLAGS=\"-I${WORKDIR}/UnpackedTarball/mariadb-connector-c/include\"\n        MARIADB_LIBS='-L$(gb_StaticLibrary_WORKDIR) -lmariadb-connector-c'\n        BUILD_TYPE=\"$BUILD_TYPE MARIADB_CONNECTOR_C\"\n    fi\n\n    AC_SUBST(SYSTEM_MARIADB_CONNECTOR_C)\n    AC_SUBST(MARIADB_CFLAGS)\n    AC_SUBST(MARIADB_LIBS)\n    AC_SUBST(LIBMARIADB)\n    AC_SUBST(LIBMARIADB_PATH)\n    AC_SUBST(BUNDLE_MARIADB_CONNECTOR_C)\nfi\n\ndnl ===================================================================\ndnl Check for system hsqldb\ndnl ===================================================================\nif test \"$with_java\" != \"no\" -a \"$cross_compiling\" != \"yes\"; then\n    AC_MSG_CHECKING([which hsqldb to use])\n    if test \"$with_system_hsqldb\" = \"yes\"; then\n        AC_MSG_RESULT([external])\n        SYSTEM_HSQLDB=TRUE\n        if test -z $HSQLDB_JAR; then\n            HSQLDB_JAR=/usr/share/java/hsqldb.jar\n        fi\n        if ! test -f $HSQLDB_JAR; then\n               AC_MSG_ERROR(hsqldb.jar not found.)\n        fi\n        AC_MSG_CHECKING([whether hsqldb is 1.8.0.x])\n        export HSQLDB_JAR\n        if $PERL -e \\\n           'use Archive::Zip;\n            my $file = \"$ENV{'HSQLDB_JAR'}\";\n            my $zip = Archive::Zip->new( $file );\n            my $mf = $zip->contents ( \"META-INF/MANIFEST.MF\" );\n            if ( $mf =~ m/Specification-Version: 1.8.*/ )\n            {\n                push @l, split(/\\n/, $mf);\n                foreach my $line (@l)\n                {\n                    if ($line =~ m/Specification-Version:/)\n                    {\n                        ($t, $version) = split (/:/,$line);\n                        $version =~ s/^\\s//;\n                        ($a, $b, $c, $d) = split (/\\./,$version);\n                        if ($c == \"0\" && $d > \"8\")\n                        {\n                            exit 0;\n                        }\n                        else\n                        {\n                            exit 1;\n                        }\n                    }\n                }\n            }\n            else\n            {\n                exit 1;\n            }'; then\n            AC_MSG_RESULT([yes])\n        else\n            AC_MSG_ERROR([no, you need hsqldb >= 1.8.0.9 but < 1.8.1])\n        fi\n    else\n        AC_MSG_RESULT([internal])\n        SYSTEM_HSQLDB=\n        BUILD_TYPE=\"$BUILD_TYPE HSQLDB\"\n        NEED_ANT=TRUE\n    fi\nelse\n    if test \"$with_java\" != \"no\" -a -z \"$HSQLDB_JAR\"; then\n        BUILD_TYPE=\"$BUILD_TYPE HSQLDB\"\n    fi\nfi\nAC_SUBST(SYSTEM_HSQLDB)\nAC_SUBST(HSQLDB_JAR)\n\ndnl ===================================================================\ndnl Check for PostgreSQL stuff\ndnl ===================================================================\nAC_MSG_CHECKING([whether to build the PostgreSQL SDBC driver])\nif test \"x$enable_postgresql_sdbc\" != \"xno\"; then\n    AC_MSG_RESULT([yes])\n    SCPDEFS=\"$SCPDEFS -DWITH_POSTGRESQL_SDBC\"\n\n    if test \"$with_krb5\" = \"yes\" -a \"$enable_openssl\" = \"no\"; then\n        AC_MSG_ERROR([krb5 needs OpenSSL, but --disable-openssl was given.])\n    fi\n    if test \"$with_gssapi\" = \"yes\" -a \"$enable_openssl\" = \"no\"; then\n        AC_MSG_ERROR([GSSAPI needs OpenSSL, but --disable-openssl was given.])\n    fi\n\n    postgres_interface=\"\"\n    if test \"$with_system_postgresql\" = \"yes\"; then\n        postgres_interface=\"external PostgreSQL\"\n        SYSTEM_POSTGRESQL=TRUE\n        if test \"$_os\" = Darwin; then\n            supp_path=''\n            for d in /Library/PostgreSQL/9.*/bin /sw/opt/postgresql/9.*/bin /opt/local/lib/postgresql9*/bin; do\n                pg_supp_path=\"$P_SEP$d$pg_supp_path\"\n            done\n        fi\n        AC_PATH_PROG(PGCONFIG, pg_config, ,$PATH$pg_supp_path)\n        if test -n \"$PGCONFIG\"; then\n            POSTGRESQL_INC=-I$(${PGCONFIG} --includedir)\n            POSTGRESQL_LIB=\"-L$(${PGCONFIG} --libdir)\"\n        else\n            PKG_CHECK_MODULES(POSTGRESQL, libpq, [\n              POSTGRESQL_INC=$POSTGRESQL_CFLAGS\n              POSTGRESQL_LIB=$POSTGRESQL_LIBS\n            ],[\n              AC_MSG_ERROR([pg_config or 'pkg-config libpq' needed; set PGCONFIG if not in PATH])\n            ])\n        fi\n        FilterLibs \"${POSTGRESQL_LIB}\"\n        POSTGRESQL_LIB=\"${filteredlibs}\"\n    else\n        # if/when anything else than PostgreSQL uses Kerberos,\n        # move this out of `test \"x$enable_postgresql_sdbc\" != \"xno\"'\n        WITH_KRB5=\n        WITH_GSSAPI=\n        case \"$_os\" in\n        Darwin)\n            # macOS has system MIT Kerberos 5 since 10.4\n            if test \"$with_krb5\" != \"no\"; then\n                WITH_KRB5=TRUE\n                save_LIBS=$LIBS\n                # Not sure whether it makes any sense here to search multiple potential libraries; it is not likely\n                # that the libraries where these functions are located on macOS will change, is it?\n                AC_SEARCH_LIBS(com_err, [com_err 'com_err -lssl -lcrypto' krb5 'krb5 -lcrypto -ldes -lasn1 -lroken'], [],\n                    [AC_MSG_ERROR([could not find function 'com_err' required for Kerberos 5])])\n                KRB5_LIBS=$LIBS\n                LIBS=$save_LIBS\n                AC_SEARCH_LIBS(krb5_sendauth, [krb5 'krb5 -lcrypto -ldes -lasn1 -lroken'], [],\n                    [AC_MSG_ERROR([could not find function 'krb5_sendauth' required for Kerberos 5])])\n                KRB5_LIBS=\"$KRB5_LIBS $LIBS\"\n                LIBS=$save_LIBS\n            fi\n            if test \"$with_gssapi\" != \"no\"; then\n                WITH_GSSAPI=TRUE\n                save_LIBS=$LIBS\n                AC_SEARCH_LIBS(gss_init_sec_context, [gssapi_krb5 gss 'gssapi -lkrb5 -lcrypto'], [],\n                    [AC_MSG_ERROR([could not find function 'gss_init_sec_context' required for GSSAPI])])\n                GSSAPI_LIBS=$LIBS\n                LIBS=$save_LIBS\n            fi\n            ;;\n        WINNT)\n            if test \"$with_krb5\" = \"yes\" -o \"$with_gssapi\" = \"yes\"; then\n                AC_MSG_ERROR([Refusing to enable MIT Kerberos 5 or GSSAPI on Windows.])\n            fi\n            ;;\n        Linux|GNU|*BSD|DragonFly)\n            if test \"$with_krb5\" != \"no\"; then\n                WITH_KRB5=TRUE\n                save_LIBS=$LIBS\n                AC_SEARCH_LIBS(com_err, [com_err 'com_err -lssl -lcrypto' krb5 'krb5 -lcrypto -ldes -lasn1 -lroken'], [],\n                    [AC_MSG_ERROR([could not find function 'com_err' required for Kerberos 5])])\n                KRB5_LIBS=$LIBS\n                LIBS=$save_LIBS\n                AC_SEARCH_LIBS(krb5_sendauth, [krb5 'krb5 -lcrypto -ldes -lasn1 -lroken'], [],\n                    [AC_MSG_ERROR([could not find function 'krb5_sendauth' required for Kerberos 5])])\n                KRB5_LIBS=\"$KRB5_LIBS $LIBS\"\n                LIBS=$save_LIBS\n            fi\n            if test \"$with_gssapi\" != \"no\"; then\n                WITH_GSSAPI=TRUE\n                save_LIBS=$LIBS\n                AC_SEARCH_LIBS(gss_init_sec_context, [gssapi_krb5 gss 'gssapi -lkrb5 -lcrypto'], [],\n                    [AC_MSG_ERROR([could not find function 'gss_init_sec_context' required for GSSAPI])])\n                GSSAPI_LIBS=$LIBS\n                LIBS=$save_LIBS\n            fi\n            ;;\n        *)\n            if test \"$with_krb5\" = \"yes\"; then\n                WITH_KRB5=TRUE\n                save_LIBS=$LIBS\n                AC_SEARCH_LIBS(com_err, [com_err 'com_err -lssl -lcrypto' krb5 'krb5 -lcrypto -ldes -lasn1 -lroken'], [],\n                    [AC_MSG_ERROR([could not find function 'com_err' required for Kerberos 5])])\n                KRB5_LIBS=$LIBS\n                LIBS=$save_LIBS\n                AC_SEARCH_LIBS(krb5_sendauth, [krb5 'krb5 -lcrypto -ldes -lasn1 -lroken'], [],\n                    [AC_MSG_ERROR([could not find function 'krb5_sendauth' required for Kerberos 5])])\n                KRB5_LIBS=\"$KRB5_LIBS $LIBS\"\n                LIBS=$save_LIBS\n            fi\n            if test \"$with_gssapi\" = \"yes\"; then\n                WITH_GSSAPI=TRUE\n                save_LIBS=$LIBS\n                AC_SEARCH_LIBS(gss_init_sec_context, [gssapi_krb5 gss 'gssapi -lkrb5 -lcrypto'], [],\n                    [AC_MSG_ERROR([could not find function 'gss_init_sec_context' required for GSSAPI])])\n                LIBS=$save_LIBS\n                GSSAPI_LIBS=$LIBS\n            fi\n        esac\n\n        if test -n \"$with_libpq_path\"; then\n            SYSTEM_POSTGRESQL=TRUE\n            postgres_interface=\"external libpq\"\n            POSTGRESQL_LIB=\"-L${with_libpq_path}/lib/\"\n            POSTGRESQL_INC=-I\"${with_libpq_path}/include/\"\n        else\n            SYSTEM_POSTGRESQL=\n            postgres_interface=\"internal\"\n            POSTGRESQL_LIB=\"\"\n            POSTGRESQL_INC=\"%OVERRIDE_ME%\"\n            BUILD_TYPE=\"$BUILD_TYPE POSTGRESQL\"\n        fi\n    fi\n\n    AC_MSG_CHECKING([PostgreSQL C interface])\n    AC_MSG_RESULT([$postgres_interface])\n\n    if test \"${SYSTEM_POSTGRESQL}\" = \"TRUE\"; then\n        AC_MSG_NOTICE([checking system PostgreSQL prerequisites])\n        save_CFLAGS=$CFLAGS\n        save_CPPFLAGS=$CPPFLAGS\n        save_LIBS=$LIBS\n        CPPFLAGS=\"${CPPFLAGS} ${POSTGRESQL_INC}\"\n        LIBS=\"${LIBS} ${POSTGRESQL_LIB}\"\n        AC_CHECK_HEADER([libpq-fe.h], [], [AC_MSG_ERROR([libpq-fe.h is needed])], [])\n        AC_CHECK_LIB([pq], [PQconnectdbParams], [:],\n            [AC_MSG_ERROR(libpq not found or too old. Need >= 9.0)], [])\n        CFLAGS=$save_CFLAGS\n        CPPFLAGS=$save_CPPFLAGS\n        LIBS=$save_LIBS\n    fi\n    BUILD_POSTGRESQL_SDBC=TRUE\nelse\n    AC_MSG_RESULT([no])\nfi\nAC_SUBST(WITH_KRB5)\nAC_SUBST(WITH_GSSAPI)\nAC_SUBST(GSSAPI_LIBS)\nAC_SUBST(KRB5_LIBS)\nAC_SUBST(BUILD_POSTGRESQL_SDBC)\nAC_SUBST(SYSTEM_POSTGRESQL)\nAC_SUBST(POSTGRESQL_INC)\nAC_SUBST(POSTGRESQL_LIB)\n\ndnl ===================================================================\ndnl Check for Firebird stuff\ndnl ===================================================================\nENABLE_FIREBIRD_SDBC=\nif test \"$enable_firebird_sdbc\" = \"yes\" ; then\n    SCPDEFS=\"$SCPDEFS -DWITH_FIREBIRD_SDBC\"\n\n    dnl ===================================================================\n    dnl Check for system Firebird\n    dnl ===================================================================\n    AC_MSG_CHECKING([which Firebird to use])\n    if test \"$with_system_firebird\" = \"yes\"; then\n        AC_MSG_RESULT([external])\n        SYSTEM_FIREBIRD=TRUE\n        AC_PATH_PROG(FIREBIRDCONFIG, [fb_config])\n        if test -z \"$FIREBIRDCONFIG\"; then\n            AC_MSG_NOTICE([No fb_config -- using pkg-config])\n            PKG_CHECK_MODULES([FIREBIRD], [fbclient >= 3], [FIREBIRD_PKGNAME=fbclient], [\n                PKG_CHECK_MODULES([FIREBIRD], [fbembed], [FIREBIRD_PKGNAME=fbembed])\n            ])\n            FIREBIRD_VERSION=`pkg-config --modversion \"$FIREBIRD_PKGNAME\"`\n        else\n            AC_MSG_NOTICE([fb_config found])\n            FIREBIRD_VERSION=`$FIREBIRDCONFIG --version`\n            AC_MSG_CHECKING([for Firebird Client library])\n            FIREBIRD_CFLAGS=`$FIREBIRDCONFIG --cflags`\n            FIREBIRD_LIBS=`$FIREBIRDCONFIG --embedlibs`\n            FilterLibs \"${FIREBIRD_LIBS}\"\n            FIREBIRD_LIBS=\"${filteredlibs}\"\n        fi\n        AC_MSG_RESULT([includes `$FIREBIRD_CFLAGS', libraries `$FIREBIRD_LIBS'])\n        AC_MSG_CHECKING([Firebird version])\n        if test -n \"${FIREBIRD_VERSION}\"; then\n            FIREBIRD_MAJOR=`echo $FIREBIRD_VERSION | cut -d\".\" -f1`\n            if test \"$FIREBIRD_MAJOR\" -ge \"3\"; then\n                AC_MSG_RESULT([OK])\n            else\n                AC_MSG_ERROR([Ensure firebird >= 3 is installed])\n            fi\n        else\n            save_CFLAGS=\"${CFLAGS}\"\n            CFLAGS=\"${CFLAGS} ${FIREBIRD_CFLAGS}\"\n            AC_COMPILE_IFELSE([AC_LANG_SOURCE([[#include <ibase.h>\n#if defined(FB_API_VER) && FB_API_VER == 30\nint fb_api_is_30(void) { return 0; }\n#else\n#error \"Wrong Firebird API version\"\n#endif]])],AC_MSG_RESULT([OK]),AC_MSG_ERROR([Ensure firebird 3.0.x is installed]))\n            CFLAGS=\"$save_CFLAGS\"\n        fi\n        ENABLE_FIREBIRD_SDBC=TRUE\n        AC_DEFINE([ENABLE_FIREBIRD_SDBC],1)\n    elif test \"$enable_database_connectivity\" = no; then\n        AC_MSG_RESULT([none])\n    elif test \"$cross_compiling\" = \"yes\"; then\n        AC_MSG_RESULT([none])\n    else\n        dnl Embedded Firebird has version 3.0\n        dnl We need libatomic_ops for any non X86/X64 system\n        if test \"${CPUNAME}\" != INTEL -a \"${CPUNAME}\" != X86_64; then\n            dnl ===================================================================\n            dnl Check for system libatomic_ops\n            dnl ===================================================================\n            libo_CHECK_SYSTEM_MODULE([libatomic_ops],[LIBATOMIC_OPS],[atomic_ops >= 0.7.2])\n            if test \"$with_system_libatomic_ops\" = \"yes\"; then\n                SYSTEM_LIBATOMIC_OPS=TRUE\n                AC_CHECK_HEADERS(atomic_ops.h, [],\n                [AC_MSG_ERROR(atomic_ops.h not found. install libatomic_ops)], [])\n            else\n                SYSTEM_LIBATOMIC_OPS=\n                LIBATOMIC_OPS_CFLAGS=\"-I${WORKDIR}/UnpackedTarball/libatomic_ops/include\"\n                LIBATOMIC_OPS_LIBS=\"-latomic_ops\"\n                BUILD_TYPE=\"$BUILD_TYPE LIBATOMIC_OPS\"\n            fi\n        fi\n\n        AC_MSG_RESULT([internal])\n        SYSTEM_FIREBIRD=\n        FIREBIRD_CFLAGS=\"-I${WORKDIR}/UnpackedTarball/firebird/gen/Release/firebird/include\"\n        FIREBIRD_LIBS=\"-lfbclient\"\n\n        if test \"$with_system_libtommath\" = \"yes\"; then\n            SYSTEM_LIBTOMMATH=TRUE\n            dnl check for tommath presence\n            save_LIBS=$LIBS\n            AC_CHECK_HEADER(tommath.h,,AC_MSG_ERROR(Include file for tommath not found - please install development tommath package))\n            AC_CHECK_LIB(tommath, mp_init, LIBTOMMATH_LIBS=-ltommath, AC_MSG_ERROR(Library tommath not found - please install development tommath package))\n            LIBS=$save_LIBS\n        else\n            SYSTEM_LIBTOMMATH=\n            LIBTOMMATH_CFLAGS=\"-I${WORKDIR}/UnpackedTarball/libtommath\"\n            LIBTOMMATH_LIBS=\"-ltommath\"\n            BUILD_TYPE=\"$BUILD_TYPE LIBTOMMATH\"\n        fi\n\n        BUILD_TYPE=\"$BUILD_TYPE FIREBIRD\"\n        ENABLE_FIREBIRD_SDBC=TRUE\n        AC_DEFINE([ENABLE_FIREBIRD_SDBC],1)\n    fi\nfi\nAC_SUBST(ENABLE_FIREBIRD_SDBC)\nAC_SUBST(SYSTEM_LIBATOMIC_OPS)\nAC_SUBST(LIBATOMIC_OPS_CFLAGS)\nAC_SUBST(LIBATOMIC_OPS_LIBS)\nAC_SUBST(SYSTEM_FIREBIRD)\nAC_SUBST(FIREBIRD_CFLAGS)\nAC_SUBST(FIREBIRD_LIBS)\nAC_SUBST(SYSTEM_LIBTOMMATH)\nAC_SUBST(LIBTOMMATH_CFLAGS)\nAC_SUBST(LIBTOMMATH_LIBS)\n\ndnl ===================================================================\ndnl Check for system curl\ndnl ===================================================================\nlibo_CHECK_SYSTEM_MODULE([curl],[CURL],[libcurl >= 7.68.0],enabled)\n\nif test \"$enable_curl\" = \"yes\" -a \"$with_system_curl\" != \"yes\" -a \"$with_gssapi\" != \"no\"; then\n    if test \"$_os\" != \"WINNT\"; then\n        WITH_GSSAPI=TRUE\n        save_LIBS=$LIBS\n        AC_SEARCH_LIBS(gss_init_sec_context, [gssapi_krb5 gss 'gssapi -lkrb5 -lcrypto'], [],\n            [AC_MSG_ERROR([could not find function 'gss_init_sec_context' required for GSSAPI])])\n        GSSAPI_LIBS=$LIBS\n        LIBS=$save_LIBS\n    fi\nfi\n\ndnl ===================================================================\ndnl Check for system boost\ndnl ===================================================================\nAC_MSG_CHECKING([which boost to use])\nif test \"$with_system_boost\" = \"yes\"; then\n    AC_MSG_RESULT([external])\n    SYSTEM_BOOST=TRUE\n    AX_BOOST_BASE([1.69],,[AC_MSG_ERROR([no suitable Boost found])])\n    AX_BOOST_DATE_TIME\n    AX_BOOST_FILESYSTEM\n    AX_BOOST_IOSTREAMS\n    AX_BOOST_LOCALE\n    AC_LANG_PUSH([C++])\n    save_CXXFLAGS=$CXXFLAGS\n    CXXFLAGS=\"$CXXFLAGS $BOOST_CPPFLAGS $CXXFLAGS_CXX11\"\n    AC_CHECK_HEADER(boost/shared_ptr.hpp, [],\n       [AC_MSG_ERROR(boost/shared_ptr.hpp not found. install boost)], [])\n    AC_CHECK_HEADER(boost/spirit/include/classic_core.hpp, [],\n       [AC_MSG_ERROR(boost/spirit/include/classic_core.hpp not found. install boost >= 1.36)], [])\n    CXXFLAGS=$save_CXXFLAGS\n    AC_LANG_POP([C++])\n    # this is in m4/ax_boost_base.m4\n    FilterLibs \"${BOOST_LDFLAGS}\"\n    BOOST_LDFLAGS=\"${filteredlibs}\"\nelse\n    AC_MSG_RESULT([internal])\n    BUILD_TYPE=\"$BUILD_TYPE BOOST\"\n    SYSTEM_BOOST=\n    if test \"${COM}\" = \"GCC\" -o \"${COM_IS_CLANG}\" = \"TRUE\"; then\n        # use warning-suppressing wrapper headers\n        BOOST_CPPFLAGS=\"-I${SRC_ROOT}/external/boost/include -I${WORKDIR}/UnpackedTarball/boost\"\n    else\n        BOOST_CPPFLAGS=\"-I${WORKDIR}/UnpackedTarball/boost\"\n    fi\nfi\nAC_SUBST(SYSTEM_BOOST)\n\ndnl ===================================================================\ndnl Check for system mdds\ndnl ===================================================================\nMDDS_CFLAGS_internal=\"-I${WORKDIR}/UnpackedTarball/mdds/include\"\nlibo_CHECK_SYSTEM_MODULE([mdds],[MDDS],[mdds-2.1 >= 2.1.0])\n\ndnl ===================================================================\ndnl Check for system dragonbox\ndnl ===================================================================\nAC_MSG_CHECKING([which dragonbox to use])\nif test \"$with_system_dragonbox\" = \"yes\"; then\n    AC_MSG_RESULT([external])\n    SYSTEM_DRAGONBOX=TRUE\n    AC_LANG_PUSH([C++])\n    save_CPPFLAGS=$CPPFLAGS\n    # This is where upstream installs to, unfortunately no .pc or so...\n    DRAGONBOX_CFLAGS=-I/usr/include/dragonbox-1.1.3\n    CPPFLAGS=\"$CPPFLAGS $DRAGONBOX_CFLAGS\"\n    AC_CHECK_HEADER([dragonbox/dragonbox.h], [],\n       [AC_MSG_ERROR([dragonbox/dragonbox.h not found. install dragonbox])], [])\n    AC_LANG_POP([C++])\n    CPPFLAGS=$save_CPPFLAGS\nelse\n    AC_MSG_RESULT([internal])\n    BUILD_TYPE=\"$BUILD_TYPE DRAGONBOX\"\n    SYSTEM_DRAGONBOX=\nfi\nAC_SUBST([SYSTEM_DRAGONBOX])\nAC_SUBST([DRAGONBOX_CFLAGS])\n\ndnl ===================================================================\ndnl Check for system frozen\ndnl ===================================================================\nAC_MSG_CHECKING([which frozen to use])\nif test \"$with_system_frozen\" = \"yes\"; then\n    AC_MSG_RESULT([external])\n    SYSTEM_FROZEN=TRUE\n    AC_LANG_PUSH([C++])\n    save_CPPFLAGS=$CPPFLAGS\n    AC_CHECK_HEADER([frozen/unordered_map.h], [],\n       [AC_MSG_ERROR([frozen/unordered_map.h not found. install frozen headers])], [])\n    AC_LANG_POP([C++])\n    CPPFLAGS=$save_CPPFLAGS\nelse\n    AC_MSG_RESULT([internal])\n    BUILD_TYPE=\"$BUILD_TYPE FROZEN\"\n    SYSTEM_FROZEN=\nfi\nAC_SUBST([SYSTEM_FROZEN])\nAC_SUBST([FROZEN_CFLAGS])\n\ndnl ===================================================================\ndnl Check for system libfixmath\ndnl ===================================================================\nAC_MSG_CHECKING([which libfixmath to use])\nif test \"$with_system_libfixmath\" = \"yes\"; then\n    AC_MSG_RESULT([external])\n    SYSTEM_LIBFIXMATH=TRUE\n    AC_LANG_PUSH([C++])\n    AC_CHECK_HEADER([libfixmath/fix16.hpp], [],\n       [AC_MSG_ERROR([libfixmath/fix16.hpp not found. install libfixmath])], [])\n    AC_CHECK_LIB([libfixmath], [fix16_mul], [LIBFIXMATH_LIBS=-llibfixmath],\n                 [AC_CHECK_LIB([fixmath], [fix16_mul], [LIBFIXMATH_LIBS=-lfixmath],\n                               [AC_MSG_ERROR(libfixmath lib not found or functional)])])\n    AC_LANG_POP([C++])\nelse\n    AC_MSG_RESULT([internal])\n    SYSTEM_LIBFIXMATH=\n    LIBFIXMATH_LIBS=\nfi\nAC_SUBST([SYSTEM_LIBFIXMATH])\nAC_SUBST([LIBFIXMATH_LIBS])\n\ndnl ===================================================================\ndnl Check for system glm\ndnl ===================================================================\nAC_MSG_CHECKING([which glm to use])\nif test \"$with_system_glm\" = \"yes\"; then\n    AC_MSG_RESULT([external])\n    SYSTEM_GLM=TRUE\n    AC_LANG_PUSH([C++])\n    AC_CHECK_HEADER([glm/glm.hpp], [],\n       [AC_MSG_ERROR([glm/glm.hpp not found. install glm])], [])\n    AC_LANG_POP([C++])\nelse\n    AC_MSG_RESULT([internal])\n    BUILD_TYPE=\"$BUILD_TYPE GLM\"\n    SYSTEM_GLM=\n    GLM_CFLAGS=\"${ISYSTEM}${WORKDIR}/UnpackedTarball/glm\"\nfi\nAC_SUBST([GLM_CFLAGS])\nAC_SUBST([SYSTEM_GLM])\n\ndnl ===================================================================\ndnl Check for system odbc\ndnl ===================================================================\nAC_MSG_CHECKING([which odbc headers to use])\nif test \"$with_system_odbc\" = \"yes\" -o '(' \"$with_system_headers\" = \"yes\" -a \"$with_system_odbc\" = \"auto\" ')' -o '(' \"$_os\" = \"WINNT\" -a  \"$with_system_odbc\" != \"no\" ')'; then\n    AC_MSG_RESULT([external])\n    SYSTEM_ODBC_HEADERS=TRUE\n\n    if test \"$build_os\" = \"cygwin\" -o \"$build_os\" = \"wsl\" -o -n \"$WSL_ONLY_AS_HELPER\"; then\n        save_CPPFLAGS=$CPPFLAGS\n        find_winsdk\n        PathFormat \"$winsdktest\"\n        CPPFLAGS=\"$CPPFLAGS -I$formatted_path/include/um -I$formatted_path/Include/$winsdklibsubdir/um -I$formatted_path/include -I$formatted_path/include/shared -I$formatted_path/include/$winsdklibsubdir/shared\"\n        AC_CHECK_HEADER(sqlext.h, [],\n            [AC_MSG_ERROR(odbc not found. install odbc)],\n            [#include <windows.h>])\n        CPPFLAGS=$save_CPPFLAGS\n    else\n        AC_CHECK_HEADER(sqlext.h, [],\n            [AC_MSG_ERROR(odbc not found. install odbc)],[])\n    fi\nelif test \"$enable_database_connectivity\" = no; then\n    AC_MSG_RESULT([none])\nelse\n    AC_MSG_RESULT([internal])\n    SYSTEM_ODBC_HEADERS=\nfi\nAC_SUBST(SYSTEM_ODBC_HEADERS)\n\ndnl ===================================================================\ndnl Check for system NSS\ndnl ===================================================================\nif test \"$enable_fuzzers\" != \"yes\" -a \"$enable_nss\" = \"yes\"; then\n    libo_CHECK_SYSTEM_MODULE([nss],[NSS],[nss >= 3.9.3 nspr >= 4.8],,system-if-linux)\n    AC_DEFINE(HAVE_FEATURE_NSS)\n    ENABLE_NSS=TRUE\nelif test $_os != iOS -a \"$enable_openssl\" != \"no\"; then\n    with_tls=openssl\nfi\nAC_SUBST(ENABLE_NSS)\n\ndnl ===================================================================\ndnl Enable LDAP support\ndnl ===================================================================\n\nif test \"$test_openldap\" = yes; then\n    AC_MSG_CHECKING([whether to enable LDAP support])\n    if test \"$enable_ldap\" = yes -a \\( \"$enable_openssl\" = yes -o \"$with_system_openldap\" = yes \\); then\n        AC_MSG_RESULT([yes])\n        ENABLE_LDAP=TRUE\n    else\n        if test \"$enable_ldap\" != \"yes\"; then\n            AC_MSG_RESULT([no])\n        else\n            AC_MSG_RESULT([no (needs OPENSSL or system openldap)])\n        fi\n    fi\n\ndnl ===================================================================\ndnl Check for system openldap\ndnl ===================================================================\n\n    if test \"$ENABLE_LDAP\" = TRUE; then\n        AC_MSG_CHECKING([which openldap library to use])\n        if test \"$with_system_openldap\" = yes; then\n            AC_MSG_RESULT([external])\n            SYSTEM_OPENLDAP=TRUE\n            AC_CHECK_HEADERS(ldap.h, [], [AC_MSG_ERROR(ldap.h not found. install openldap libs)], [])\n            AC_CHECK_LIB([ldap], [ldap_simple_bind_s], [:], [AC_MSG_ERROR(openldap lib not found or functional)], [])\n            AC_CHECK_LIB([ldap], [ldap_set_option], [:], [AC_MSG_ERROR(openldap lib not found or functional)], [])\n        else\n            AC_MSG_RESULT([internal])\n            BUILD_TYPE=\"$BUILD_TYPE OPENLDAP\"\n        fi\n    fi\nfi\n\nAC_SUBST(ENABLE_LDAP)\nAC_SUBST(SYSTEM_OPENLDAP)\n\ndnl ===================================================================\ndnl Check for TLS/SSL and cryptographic implementation to use\ndnl ===================================================================\nAC_MSG_CHECKING([which TLS/SSL and cryptographic implementation to use])\nif test -n \"$with_tls\"; then\n    case $with_tls in\n    openssl)\n        AC_DEFINE(USE_TLS_OPENSSL)\n        TLS=OPENSSL\n        AC_MSG_RESULT([$TLS])\n\n        if test \"$enable_openssl\" != \"yes\"; then\n            AC_MSG_ERROR([\"Disabling OpenSSL was requested, but the requested TLS to use is actually OpenSSL.\"])\n        fi\n\n        # warn that OpenSSL has been selected but not all TLS code has this option\n        AC_MSG_WARN([TLS/SSL implementation to use is OpenSSL but some code may still depend on NSS])\n        add_warning \"TLS/SSL implementation to use is OpenSSL but some code may still depend on NSS\"\n        ;;\n    nss)\n        AC_DEFINE(USE_TLS_NSS)\n        TLS=NSS\n        AC_MSG_RESULT([$TLS])\n        ;;\n    no)\n        AC_MSG_RESULT([none])\n        AC_MSG_WARN([Skipping TLS/SSL])\n        ;;\n    *)\n        AC_MSG_RESULT([])\n        AC_MSG_ERROR([unsupported implementation $with_tls. Supported are:\nopenssl - OpenSSL\nnss - Mozilla's Network Security Services (NSS)\n    ])\n        ;;\n    esac\nelse\n    # default to using NSS, it results in smaller oox lib\n    AC_DEFINE(USE_TLS_NSS)\n    TLS=NSS\n    AC_MSG_RESULT([$TLS])\nfi\nAC_SUBST(TLS)\n\ndnl ===================================================================\ndnl Check for system sane\ndnl ===================================================================\nAC_MSG_CHECKING([which sane header to use])\nif test \"$with_system_sane\" = \"yes\"; then\n    AC_MSG_RESULT([external])\n    AC_CHECK_HEADER(sane/sane.h, [],\n      [AC_MSG_ERROR(sane not found. install sane)], [])\nelse\n    AC_MSG_RESULT([internal])\n    BUILD_TYPE=\"$BUILD_TYPE SANE\"\nfi\n\ndnl ===================================================================\ndnl Check for system icu\ndnl ===================================================================\nICU_MAJOR=75\nICU_MINOR=1\nICU_CFLAGS_internal=\"-I${WORKDIR}/UnpackedTarball/icu/source/i18n -I${WORKDIR}/UnpackedTarball/icu/source/common\"\nICU_LIBS_internal=\"-L${WORKDIR}/UnpackedTarball/icu/source/lib -licuuc\"\nlibo_CHECK_SYSTEM_MODULE([icu],[ICU],[icu-i18n >= 66])\nif test \"$SYSTEM_ICU\" = TRUE; then\n    AC_LANG_PUSH([C++])\n    AC_MSG_CHECKING([for unicode/rbbi.h])\n    AC_PREPROC_IFELSE([AC_LANG_SOURCE([[unicode/rbbi.h]])],[AC_MSG_RESULT([yes])],[AC_MSG_ERROR([icu headers not found])])\n    AC_LANG_POP([C++])\n\n    ICU_VERSION=`$PKG_CONFIG --modversion icu-i18n 2>/dev/null`\n    ICU_MAJOR=`echo $ICU_VERSION | cut -d\".\" -f1`\n    ICU_MINOR=`echo $ICU_VERSION | cut -d\".\" -f2`\n\n    if test \"$CROSS_COMPILING\" != TRUE; then\n        # using the system icu tools can lead to version confusion, use the\n        # ones from the build environment when cross-compiling\n        AC_PATH_PROG(SYSTEM_GENBRK, genbrk, [], [$PATH:/usr/sbin:/sbin])\n        if test -z \"$SYSTEM_GENBRK\"; then\n            AC_MSG_ERROR([\\'genbrk\\' not found in \\$PATH, install the icu development tool \\'genbrk\\'])\n        fi\n        AC_PATH_PROG(SYSTEM_GENCCODE, genccode, [], [$PATH:/usr/sbin:/sbin:/usr/local/sbin])\n        if test -z \"$SYSTEM_GENCCODE\"; then\n            AC_MSG_ERROR([\\'genccode\\' not found in \\$PATH, install the icu development tool \\'genccode\\'])\n        fi\n        AC_PATH_PROG(SYSTEM_GENCMN, gencmn, [], [$PATH:/usr/sbin:/sbin:/usr/local/sbin])\n        if test -z \"$SYSTEM_GENCMN\"; then\n            AC_MSG_ERROR([\\'gencmn\\' not found in \\$PATH, install the icu development tool \\'gencmn\\'])\n        fi\n    fi\nfi\n\nAC_SUBST(SYSTEM_GENBRK)\nAC_SUBST(SYSTEM_GENCCODE)\nAC_SUBST(SYSTEM_GENCMN)\nAC_SUBST(ICU_MAJOR)\nAC_SUBST(ICU_MINOR)\n\ndnl ==================================================================\ndnl CURL\ndnl ==================================================================\nif test \"$enable_curl\" = \"yes\"; then\n    AC_DEFINE([HAVE_FEATURE_CURL])\nfi\n\ndnl ==================================================================\ndnl Breakpad\ndnl ==================================================================\nDEFAULT_CRASHDUMP_VALUE=\"true\"\nAC_MSG_CHECKING([whether to enable breakpad])\nif test \"$enable_breakpad\" != yes; then\n    AC_MSG_RESULT([no])\nelse\n    if test \"$enable_curl\" != \"yes\"; then\n        AC_MSG_ERROR([--disable-breakpad must be used when --disable-curl is used])\n    fi\n    AC_MSG_RESULT([yes])\n    ENABLE_BREAKPAD=\"TRUE\"\n    AC_DEFINE(ENABLE_BREAKPAD)\n    AC_DEFINE(HAVE_FEATURE_BREAKPAD, 1)\n    BUILD_TYPE=\"$BUILD_TYPE BREAKPAD\"\n\n    AC_MSG_CHECKING([for disable crash dump])\n    if test \"$enable_crashdump\" = no; then\n        DEFAULT_CRASHDUMP_VALUE=\"false\"\n        AC_MSG_RESULT([yes])\n    else\n       AC_MSG_RESULT([no])\n    fi\n\n    AC_MSG_CHECKING([for crashreport config])\n    if test \"$with_symbol_config\" = \"no\"; then\n        BREAKPAD_SYMBOL_CONFIG=\"invalid\"\n        AC_MSG_RESULT([no])\n    else\n        BREAKPAD_SYMBOL_CONFIG=\"$with_symbol_config\"\n        AC_DEFINE(BREAKPAD_SYMBOL_CONFIG)\n        AC_MSG_RESULT([yes])\n    fi\n    AC_SUBST(BREAKPAD_SYMBOL_CONFIG)\nfi\nAC_SUBST(ENABLE_BREAKPAD)\nAC_SUBST(DEFAULT_CRASHDUMP_VALUE)\n\ndnl ==================================================================\ndnl libcmis\ndnl ==================================================================\nif test \"$enable_libcmis\" = \"yes\"; then\n    if test \"$enable_curl\" != \"yes\"; then\n        AC_MSG_ERROR([--disable-libcmis must be used when --disable-curl is used])\n    fi\nfi\n\ndnl ===================================================================\ndnl Orcus\ndnl ===================================================================\nlibo_CHECK_SYSTEM_MODULE([orcus],[ORCUS],[liborcus-0.18 >= 0.19.1])\nif test \"$with_system_orcus\" != \"yes\"; then\n    if test \"$SYSTEM_BOOST\" = \"TRUE\"; then\n        dnl Link with Boost.System\n        dnl This seems to be necessary since boost 1.50 (1.48 does not need it,\n        dnl 1.49 is untested). The macro BOOST_THREAD_DONT_USE_SYSTEM mentioned\n        dnl in documentation has no effect.\n        AX_BOOST_SYSTEM\n    fi\nfi\ndnl FIXME by renaming SYSTEM_LIBORCUS to SYSTEM_ORCUS in the build system world\nSYSTEM_LIBORCUS=$SYSTEM_ORCUS\nAC_SUBST([BOOST_SYSTEM_LIB])\nAC_SUBST(SYSTEM_LIBORCUS)\n\ndnl ===================================================================\ndnl HarfBuzz\ndnl ===================================================================\nharfbuzz_required_version=5.1.0\n\nGRAPHITE_CFLAGS_internal=\"-I${WORKDIR}/UnpackedTarball/graphite/include -DGRAPHITE2_STATIC\"\nHARFBUZZ_CFLAGS_internal=\"-I${WORKDIR}/UnpackedTarball/harfbuzz/src\"\ncase \"$_os\" in\n    Linux)\n        GRAPHITE_LIBS_internal='$(gb_StaticLibrary_WORKDIR)/libgraphite.a'\n        HARFBUZZ_LIBS_internal=\"${WORKDIR}/UnpackedTarball/harfbuzz/src/.libs/libharfbuzz.a\"\n        ;;\n    *)\n        GRAPHITE_LIBS_internal='-L$(gb_StaticLibrary_WORKDIR) -lgraphite'\n        HARFBUZZ_LIBS_internal=\"-L${WORKDIR}/UnpackedTarball/harfbuzz/src/.libs -lharfbuzz\"\n        ;;\nesac\nlibo_CHECK_SYSTEM_MODULE([graphite],[GRAPHITE],[graphite2 >= 0.9.3])\nlibo_CHECK_SYSTEM_MODULE([harfbuzz],[HARFBUZZ],[harfbuzz-icu >= $harfbuzz_required_version])\n\nif test \"$COM\" = \"MSC\"; then # override the above\n    GRAPHITE_LIBS='$(gb_StaticLibrary_WORKDIR)/graphite.lib'\n    HARFBUZZ_LIBS=\"${WORKDIR}/UnpackedTarball/harfbuzz/src/.libs/libharfbuzz.lib\"\nfi\n\nif test \"$with_system_harfbuzz\" = \"yes\"; then\n    if test \"$with_system_graphite\" = \"no\"; then\n        AC_MSG_ERROR([--with-system-graphite must be used when --with-system-harfbuzz is used])\n    fi\n    AC_MSG_CHECKING([whether system Harfbuzz is built with Graphite support])\n    save_LIBS=\"$LIBS\"\n    save_CFLAGS=\"$CFLAGS\"\n    LIBS=\"$LIBS $HARFBUZZ_LIBS\"\n    CFLAGS=\"$CFLAGS $HARFBUZZ_CFLAGS\"\n    AC_CHECK_FUNC(hb_graphite2_face_get_gr_face,,[AC_MSG_ERROR([Harfbuzz needs to be built with Graphite support.])])\n    LIBS=\"$save_LIBS\"\n    CFLAGS=\"$save_CFLAGS\"\nelse\n    if test \"$with_system_graphite\" = \"yes\"; then\n        AC_MSG_ERROR([--without-system-graphite must be used when --without-system-harfbuzz is used])\n    fi\nfi\n\nif test \"$USING_X11\" = TRUE; then\n    AC_PATH_X\n    AC_PATH_XTRA\n    CPPFLAGS=\"$CPPFLAGS $X_CFLAGS\"\n\n    if test -z \"$x_includes\"; then\n        x_includes=\"default_x_includes\"\n    fi\n    if test -z \"$x_libraries\"; then\n        x_libraries=\"default_x_libraries\"\n    fi\n    CFLAGS=\"$CFLAGS $X_CFLAGS\"\n    LDFLAGS=\"$LDFLAGS $X_LDFLAGS $X_LIBS\"\n    AC_CHECK_LIB(X11, XOpenDisplay, x_libs=\"-lX11 $X_EXTRA_LIBS\", [AC_MSG_ERROR([X Development libraries not found])])\nelse\n    x_includes=\"no_x_includes\"\n    x_libraries=\"no_x_libraries\"\nfi\n\nif test \"$USING_X11\" = TRUE; then\n    dnl ===================================================================\n    dnl Check for extension headers\n    dnl ===================================================================\n    AC_CHECK_HEADERS(X11/extensions/shape.h,[],[AC_MSG_ERROR([libXext headers not found])],\n     [#include <X11/extensions/shape.h>])\n\n    # vcl needs ICE and SM\n    AC_CHECK_HEADERS(X11/ICE/ICElib.h,[],[AC_MSG_ERROR([libICE headers not found])])\n    AC_CHECK_LIB([ICE], [IceConnectionNumber], [:],\n        [AC_MSG_ERROR(ICE library not found)])\n    AC_CHECK_HEADERS(X11/SM/SMlib.h,[],[AC_MSG_ERROR([libSM headers not found])])\n    AC_CHECK_LIB([SM], [SmcOpenConnection], [:],\n        [AC_MSG_ERROR(SM library not found)])\nfi\n\nif test \"$USING_X11\" = TRUE -a \"$ENABLE_JAVA\" != \"\"; then\n    # bean/native/unix/com_sun_star_comp_beans_LocalOfficeWindow.c needs Xt\n    AC_CHECK_HEADERS(X11/Intrinsic.h,[],[AC_MSG_ERROR([libXt headers not found])])\nfi\n\ndnl ===================================================================\ndnl Check for system Xrender\ndnl ===================================================================\nAC_MSG_CHECKING([whether to use Xrender])\nif test \"$USING_X11\" = TRUE -a  \"$test_xrender\" = \"yes\"; then\n    AC_MSG_RESULT([yes])\n    PKG_CHECK_MODULES(XRENDER, xrender)\n    XRENDER_CFLAGS=$(printf '%s' \"$XRENDER_CFLAGS\" | sed -e \"s/-I/${ISYSTEM?}/g\")\n    FilterLibs \"${XRENDER_LIBS}\"\n    XRENDER_LIBS=\"${filteredlibs}\"\n    AC_CHECK_LIB([Xrender], [XRenderQueryVersion], [:],\n      [AC_MSG_ERROR(libXrender not found or functional)], [])\n    AC_CHECK_HEADER(X11/extensions/Xrender.h, [],\n      [AC_MSG_ERROR(Xrender not found. install X)], [])\nelse\n    AC_MSG_RESULT([no])\nfi\nAC_SUBST(XRENDER_CFLAGS)\nAC_SUBST(XRENDER_LIBS)\n\ndnl ===================================================================\ndnl Check for XRandr\ndnl ===================================================================\nAC_MSG_CHECKING([whether to enable RandR support])\nif test \"$USING_X11\" = TRUE -a \"$test_randr\" = \"yes\" -a \\( \"$enable_randr\" = \"yes\" -o \"$enable_randr\" = \"TRUE\" \\); then\n    AC_MSG_RESULT([yes])\n    PKG_CHECK_MODULES(XRANDR, xrandr >= 1.2, ENABLE_RANDR=\"TRUE\", ENABLE_RANDR=\"\")\n    if test \"$ENABLE_RANDR\" != \"TRUE\"; then\n        AC_CHECK_HEADER(X11/extensions/Xrandr.h, [],\n                    [AC_MSG_ERROR([X11/extensions/Xrandr.h could not be found. X11 dev missing?])], [])\n        XRANDR_CFLAGS=\" \"\n        AC_CHECK_LIB([Xrandr], [XRRQueryExtension], [:],\n          [ AC_MSG_ERROR(libXrandr not found or functional) ], [])\n        XRANDR_LIBS=\"-lXrandr \"\n        ENABLE_RANDR=\"TRUE\"\n    fi\n    XRANDR_CFLAGS=$(printf '%s' \"$XRANDR_CFLAGS\" | sed -e \"s/-I/${ISYSTEM?}/g\")\n    FilterLibs \"${XRANDR_LIBS}\"\n    XRANDR_LIBS=\"${filteredlibs}\"\nelse\n    ENABLE_RANDR=\"\"\n    AC_MSG_RESULT([no])\nfi\nAC_SUBST(XRANDR_CFLAGS)\nAC_SUBST(XRANDR_LIBS)\nAC_SUBST(ENABLE_RANDR)\n\nif test -z \"$with_webdav\"; then\n    with_webdav=$test_webdav\nfi\n\nAC_MSG_CHECKING([for WebDAV support])\ncase \"$with_webdav\" in\nno)\n    AC_MSG_RESULT([no])\n    WITH_WEBDAV=\"\"\n    ;;\n*)\n    AC_MSG_RESULT([yes])\n    # curl is already mandatory (almost) and checked elsewhere\n    if test \"$enable_curl\" = \"no\"; then\n        AC_MSG_ERROR([\"--without-webdav must be used when --disable-curl is used\"])\n    fi\n    WITH_WEBDAV=TRUE\n    ;;\nesac\nAC_SUBST(WITH_WEBDAV)\n\ndnl ===================================================================\ndnl Check for disabling cve_tests\ndnl ===================================================================\nAC_MSG_CHECKING([whether to execute CVE tests])\nif test \"$enable_cve_tests\" = \"no\"; then\n    AC_MSG_RESULT([no])\n    DISABLE_CVE_TESTS=TRUE\n    AC_SUBST(DISABLE_CVE_TESTS)\nelse\n    AC_MSG_RESULT([yes])\nfi\n\ndnl ===================================================================\ndnl Check for disabling nan_tests\ndnl ===================================================================\nAC_MSG_CHECKING([whether to execute NaN payload tests])\nif test \"$enable_nan_tests\" = \"no\"; then\n    AC_MSG_RESULT([no])\n    DISABLE_NAN_TESTS=TRUE\n    AC_SUBST(DISABLE_NAN_TESTS)\nelse\n    AC_MSG_RESULT([yes])\nfi\n\ndnl ===================================================================\ndnl Check for system openssl\ndnl ===================================================================\nENABLE_OPENSSL=\nAC_MSG_CHECKING([whether to disable OpenSSL usage])\nif test \"$enable_openssl\" = \"yes\"; then\n    AC_MSG_RESULT([no])\n    ENABLE_OPENSSL=TRUE\n    if test \"$_os\" = Darwin ; then\n        # OpenSSL is deprecated when building for 10.7 or later.\n        #\n        # https://stackoverflow.com/questions/7406946/why-is-apple-deprecating-openssl-in-macos-10-7-lion\n        # https://stackoverflow.com/questions/7475914/libcrypto-deprecated-on-mac-os-x-10-7-lion\n\n        with_system_openssl=no\n        libo_CHECK_SYSTEM_MODULE([openssl],[OPENSSL],[openssl])\n    elif test \"$_os\" = \"FreeBSD\" -o \"$_os\" = \"NetBSD\" -o \"$_os\" = \"OpenBSD\" -o \"$_os\" = \"DragonFly\" \\\n            && test \"$with_system_openssl\" != \"no\"; then\n        with_system_openssl=yes\n        SYSTEM_OPENSSL=TRUE\n        OPENSSL_CFLAGS=\n        OPENSSL_LIBS=\"-lssl -lcrypto\"\n    else\n        libo_CHECK_SYSTEM_MODULE([openssl],[OPENSSL],[openssl])\n        if test -n \"${SYSTEM_OPENSSL}\"; then\n            AC_DEFINE([SYSTEM_OPENSSL])\n        fi\n    fi\n    if test \"$with_system_openssl\" = \"yes\"; then\n        AC_MSG_CHECKING([whether openssl supports SHA512])\n        AC_LANG_PUSH([C])\n        AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <openssl/sha.h>]],[[\n            SHA512_CTX context;\n]])],[AC_MSG_RESULT([yes])],[AC_MSG_ERROR([no, openssl too old. Need >= 0.9.8.])])\n        AC_LANG_POP(C)\n    fi\nelse\n    AC_MSG_RESULT([yes])\n\n    # warn that although OpenSSL is disabled, system libraries may depend on it\n    AC_MSG_WARN([OpenSSL has been disabled. No code compiled here will make use of it but system libraries may create indirect dependencies])\n    add_warning \"OpenSSL has been disabled. No code compiled here will make use of it but system libraries may create indirect dependencies\"\nfi\n\nAC_SUBST([ENABLE_OPENSSL])\n\nif test \"$enable_cipher_openssl_backend\" = yes && test \"$ENABLE_OPENSSL\" != TRUE; then\n    if test \"$libo_fuzzed_enable_cipher_openssl_backend\" = yes; then\n        AC_MSG_NOTICE([Resetting --enable-cipher-openssl-backend=no])\n        enable_cipher_openssl_backend=no\n    else\n        AC_MSG_ERROR([--enable-cipher-openssl-backend needs OpenSSL, but --disable-openssl was given.])\n    fi\nfi\nAC_MSG_CHECKING([whether to enable the OpenSSL backend for rtl/cipher.h])\nENABLE_CIPHER_OPENSSL_BACKEND=\nif test \"$enable_cipher_openssl_backend\" = yes; then\n    AC_MSG_RESULT([yes])\n    ENABLE_CIPHER_OPENSSL_BACKEND=TRUE\nelse\n    AC_MSG_RESULT([no])\nfi\nAC_SUBST([ENABLE_CIPHER_OPENSSL_BACKEND])\n\ndnl ===================================================================\ndnl Select the crypto backends used by LO\ndnl ===================================================================\n\nif test \"$build_crypto\" = yes; then\n    if test \"$OS\" = WNT; then\n        BUILD_TYPE=\"$BUILD_TYPE CRYPTO_MSCAPI\"\n        AC_DEFINE([USE_CRYPTO_MSCAPI])\n    elif test \"$ENABLE_NSS\" = TRUE; then\n        BUILD_TYPE=\"$BUILD_TYPE CRYPTO_NSS\"\n        AC_DEFINE([USE_CRYPTO_NSS])\n    fi\nfi\n\nARGON2_CFLAGS_internal=\"-I${WORKDIR}/UnpackedTarball/argon2/include\"\nif test \"$COM\" = \"MSC\"; then\n    ARGON2_LIBS_internal=\"${WORKDIR}/UnpackedTarball/argon2/vs2015/build/Argon2OptDll.lib\"\nelse\n    ARGON2_LIBS_internal=\"${WORKDIR}/UnpackedTarball/argon2/libargon2.a\"\nfi\nlibo_CHECK_SYSTEM_MODULE([argon2],[ARGON2],[libargon2])\n\ndnl ===================================================================\ndnl Check for system redland\ndnl ===================================================================\ndnl redland: versions before 1.0.8 write RDF/XML that is useless for ODF (@xml:base)\ndnl raptor2: need at least 2.0.7 for CVE-2012-0037\nlibo_CHECK_SYSTEM_MODULE([redland],[REDLAND],[redland >= 1.0.8 raptor2 >= 2.0.7])\nif test \"$with_system_redland\" = \"yes\"; then\n    AC_CHECK_LIB([rdf], [librdf_world_set_raptor_init_handler], [:],\n            [AC_MSG_ERROR(librdf too old. Need >= 1.0.16)], [])\nelse\n    RAPTOR_MAJOR=\"0\"\n    RASQAL_MAJOR=\"3\"\n    REDLAND_MAJOR=\"0\"\nfi\nAC_SUBST(RAPTOR_MAJOR)\nAC_SUBST(RASQAL_MAJOR)\nAC_SUBST(REDLAND_MAJOR)\n\ndnl ===================================================================\ndnl Check for system hunspell\ndnl ===================================================================\nAC_MSG_CHECKING([which libhunspell to use])\nif test \"$with_system_hunspell\" = \"yes\"; then\n    AC_MSG_RESULT([external])\n    SYSTEM_HUNSPELL=TRUE\n    AC_LANG_PUSH([C++])\n    PKG_CHECK_MODULES(HUNSPELL, hunspell, HUNSPELL_PC=\"TRUE\", HUNSPELL_PC=\"\" )\n    if test \"$HUNSPELL_PC\" != \"TRUE\"; then\n        AC_CHECK_HEADER(hunspell.hxx, [],\n            [\n            AC_CHECK_HEADER(hunspell/hunspell.hxx, [ HUNSPELL_CFLAGS=-I/usr/include/hunspell ],\n            [AC_MSG_ERROR(hunspell headers not found.)], [])\n            ], [])\n        AC_CHECK_LIB([hunspell], [main], [:],\n           [ AC_MSG_ERROR(hunspell library not found.) ], [])\n        HUNSPELL_LIBS=-lhunspell\n    fi\n    AC_LANG_POP([C++])\n    HUNSPELL_CFLAGS=$(printf '%s' \"$HUNSPELL_CFLAGS\" | sed -e \"s/-I/${ISYSTEM?}/g\")\n    FilterLibs \"${HUNSPELL_LIBS}\"\n    HUNSPELL_LIBS=\"${filteredlibs}\"\nelse\n    AC_MSG_RESULT([internal])\n    SYSTEM_HUNSPELL=\n    HUNSPELL_CFLAGS=\"-I${WORKDIR}/UnpackedTarball/hunspell/src/hunspell\"\n    if test \"$COM\" = \"MSC\"; then\n        HUNSPELL_LIBS='$(gb_StaticLibrary_WORKDIR)/hunspell.lib'\n    else\n        HUNSPELL_LIBS=\"-L${WORKDIR}/UnpackedTarball/hunspell/src/hunspell/.libs -lhunspell-1.7\"\n    fi\n    BUILD_TYPE=\"$BUILD_TYPE HUNSPELL\"\nfi\nAC_SUBST(SYSTEM_HUNSPELL)\nAC_SUBST(HUNSPELL_CFLAGS)\nAC_SUBST(HUNSPELL_LIBS)\n\ndnl ===================================================================\ndnl Check for system zxcvbn\ndnl ===================================================================\nAC_MSG_CHECKING([which zxcvbn to use])\nif test \"$with_system_zxcvbn\" = \"yes\"; then\n    AC_MSG_RESULT([external])\n    SYSTEM_ZXCVBN=TRUE\n    AC_CHECK_HEADER(zxcvbn.h, [],\n       [ AC_MSG_ERROR(zxcvbn headers not found.)], [])\n    AC_CHECK_LIB(zxcvbn, ZxcvbnMatch, [],\n        [ AC_MSG_ERROR(zxcvbn library not found.)], [])\nelse\n   AC_MSG_RESULT([internal])\n   BUILD_TYPE=\"$BUILD_TYPE ZXCVBN\"\n   SYSTEM_ZXCVBN=\nfi\nAC_SUBST(SYSTEM_ZXCVBN)\n\ndnl ===================================================================\ndnl Check for system zxing\ndnl ===================================================================\nAC_MSG_CHECKING([whether to use zxing])\nif test \"$enable_zxing\" = \"no\"; then\n    AC_MSG_RESULT([no])\n    ENABLE_ZXING=\n    SYSTEM_ZXING=\nelse\n    AC_MSG_RESULT([yes])\n    ENABLE_ZXING=TRUE\n    AC_MSG_CHECKING([which libzxing to use])\n    if test \"$with_system_zxing\" = \"yes\"; then\n        AC_MSG_RESULT([external])\n        SYSTEM_ZXING=TRUE\n        ZXING_CFLAGS=\n        AC_LANG_PUSH([C++])\n        save_CXXFLAGS=$CXXFLAGS\n        save_IFS=$IFS\n        IFS=$P_SEP\n        for i in $CPLUS_INCLUDE_PATH /usr/include; do\n            dnl Reset IFS as soon as possible, to avoid unexpected side effects (and the\n            dnl \"/usr/include\" fallback makes sure we get here at least once; resetting rather than\n            dnl unsetting follows the advice at <https://git.savannah.gnu.org/gitweb/?p=autoconf.git;\n            dnl a=commitdiff;h=e51c9919f2cf70185b7916ac040bc0bbfd0f743b> \"Add recommendation on (not)\n            dnl unsetting IFS.\"):\n            IFS=$save_IFS\n            dnl TODO: GCC and Clang treat empty paths in CPLUS_INCLUDE_PATH like \".\", but we simply\n            dnl ignore them here:\n            if test -z \"$i\"; then\n                continue\n            fi\n            dnl TODO: White space in $i would cause problems:\n            CXXFLAGS=\"$save_CXXFLAGS ${CXXFLAGS_CXX11} -I$i/ZXing\"\n            AC_CHECK_HEADER(MultiFormatWriter.h, [ZXING_CFLAGS=-I$i/ZXing; break],\n                [unset ac_cv_header_MultiFormatWriter_h], [#include <stdexcept>])\n        done\n        CXXFLAGS=$save_CXXFLAGS\n        if test -z \"$ZXING_CFLAGS\"; then\n            AC_MSG_ERROR(zxing headers not found.)\n        fi\n        AC_CHECK_LIB([ZXing], [main], [ZXING_LIBS=-lZXing],\n            [ AC_CHECK_LIB([ZXingCore], [main], [ZXING_LIBS=-lZXingCore],\n            [ AC_MSG_ERROR(zxing C++ library not found.) ])], [])\n        AC_LANG_POP([C++])\n        ZXING_CFLAGS=$(printf '%s' \"$ZXING_CFLAGS\" | sed -e \"s/-I/${ISYSTEM?}/g\")\n        FilterLibs \"${ZXING_LIBS}\"\n        ZXING_LIBS=\"${filteredlibs}\"\n    else\n        AC_MSG_RESULT([internal])\n        SYSTEM_ZXING=\n        BUILD_TYPE=\"$BUILD_TYPE ZXING\"\n        ZXING_CFLAGS=\"-I${WORKDIR}/UnpackedTarball/zxing/core/src\"\n    fi\n    if test \"$ENABLE_ZXING\" = TRUE; then\n        AC_DEFINE(ENABLE_ZXING)\n    fi\n    AC_MSG_CHECKING([whether zxing::tosvg function is available])\n    AC_LANG_PUSH([C++])\n    save_CXXFLAGS=$CXXFLAGS\n    CXXFLAGS=\"$CXXFLAGS $CXXFLAGS_CXX11 $ZXING_CFLAGS\"\n    AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n            #include <BitMatrix.h>\n            #include <BitMatrixIO.h>\n            int main(){\n                ZXing::BitMatrix matrix(1, 1);\n                matrix.set(0, 0, true);\n                ZXing::ToSVG(matrix);\n                return 0;\n            }\n        ])], [\n            AC_DEFINE([HAVE_ZXING_TOSVG],[1])\n            AC_MSG_RESULT([yes])\n        ], [AC_MSG_RESULT([no])])\n    CXXFLAGS=$save_CXXFLAGS\n    AC_LANG_POP([C++])\n    AC_SUBST(HAVE_ZXING_TOSVG)\nfi\nAC_SUBST(SYSTEM_ZXING)\nAC_SUBST(ENABLE_ZXING)\nAC_SUBST(ZXING_CFLAGS)\nAC_SUBST(ZXING_LIBS)\n\ndnl ===================================================================\ndnl Check for system box2d\ndnl ===================================================================\nAC_MSG_CHECKING([which box2d to use])\nif test \"$with_system_box2d\" = \"yes\"; then\n    AC_MSG_RESULT([external])\n    SYSTEM_BOX2D=TRUE\n    AC_LANG_PUSH([C++])\n    AC_CHECK_HEADER(box2d/box2d.h, [BOX2D_H_FOUND='TRUE'],\n        [BOX2D_H_FOUND='FALSE'])\n    if test \"$BOX2D_H_FOUND\" = \"TRUE\"; then # 2.4.0+\n        _BOX2D_LIB=box2d\n        AC_DEFINE(BOX2D_HEADER,<box2d/box2d.h>)\n    else\n        # fail this. there's no other alternative to check when we are here.\n        AC_CHECK_HEADER([Box2D/Box2D.h], [],\n            [AC_MSG_ERROR(box2d headers not found.)])\n        _BOX2D_LIB=Box2D\n        AC_DEFINE(BOX2D_HEADER,<Box2D/Box2D.h>)\n    fi\n    AC_CHECK_LIB([$_BOX2D_LIB], [main], [:],\n        [ AC_MSG_ERROR(box2d library not found.) ], [])\n    BOX2D_LIBS=-l$_BOX2D_LIB\n    AC_LANG_POP([C++])\n    BOX2D_CFLAGS=$(printf '%s' \"$BOX2D_CFLAGS\" | sed -e \"s/-I/${ISYSTEM?}/g\")\n    FilterLibs \"${BOX2D_LIBS}\"\n    BOX2D_LIBS=\"${filteredlibs}\"\nelse\n    AC_MSG_RESULT([internal])\n    SYSTEM_BOX2D=\n    BUILD_TYPE=\"$BUILD_TYPE BOX2D\"\nfi\nAC_SUBST(SYSTEM_BOX2D)\nAC_SUBST(BOX2D_CFLAGS)\nAC_SUBST(BOX2D_LIBS)\n\ndnl ===================================================================\ndnl Checking for altlinuxhyph\ndnl ===================================================================\nAC_MSG_CHECKING([which altlinuxhyph to use])\nif test \"$with_system_altlinuxhyph\" = \"yes\"; then\n    AC_MSG_RESULT([external])\n    SYSTEM_HYPH=TRUE\n    AC_CHECK_HEADER(hyphen.h, [],\n       [ AC_MSG_ERROR(altlinuxhyph headers not found.)], [])\n    AC_CHECK_MEMBER(struct _HyphenDict.cset, [],\n       [ AC_MSG_ERROR(no. You are sure you have altlinuyhyph headers?)],\n       [#include <hyphen.h>])\n    AC_CHECK_LIB(hyphen, hnj_hyphen_hyphenate2, [HYPHEN_LIB=-lhyphen],\n        [ AC_MSG_ERROR(altlinuxhyph library not found or too old.)], [])\n    if test -z \"$HYPHEN_LIB\"; then\n        AC_CHECK_LIB(hyph, hnj_hyphen_hyphenate2, [HYPHEN_LIB=-lhyph],\n           [ AC_MSG_ERROR(altlinuxhyph library not found or too old.)], [])\n    fi\n    if test -z \"$HYPHEN_LIB\"; then\n        AC_CHECK_LIB(hnj, hnj_hyphen_hyphenate2, [HYPHEN_LIB=-lhnj],\n           [ AC_MSG_ERROR(altlinuxhyph library not found or too old.)], [])\n    fi\nelse\n    AC_MSG_RESULT([internal])\n    SYSTEM_HYPH=\n    BUILD_TYPE=\"$BUILD_TYPE HYPHEN\"\n    if test \"$COM\" = \"MSC\"; then\n        HYPHEN_LIB='$(gb_StaticLibrary_WORKDIR)/hyphen.lib'\n    else\n        HYPHEN_LIB=\"-L${WORKDIR}/UnpackedTarball/hyphen/.libs -lhyphen\"\n    fi\nfi\nAC_SUBST(SYSTEM_HYPH)\nAC_SUBST(HYPHEN_LIB)\n\ndnl ===================================================================\ndnl Checking for mythes\ndnl ===================================================================\nAC_MSG_CHECKING([which mythes to use])\nif test \"$with_system_mythes\" = \"yes\"; then\n    AC_MSG_RESULT([external])\n    SYSTEM_MYTHES=TRUE\n    AC_LANG_PUSH([C++])\n    PKG_CHECK_MODULES(MYTHES, mythes, MYTHES_PKGCONFIG=yes, MYTHES_PKGCONFIG=no)\n    if test \"$MYTHES_PKGCONFIG\" = \"no\"; then\n        AC_CHECK_HEADER(mythes.hxx, [],\n            [ AC_MSG_ERROR(mythes.hxx headers not found.)], [])\n        AC_CHECK_LIB([mythes-1.2], [main], [:],\n            [ MYTHES_FOUND=no], [])\n    if test \"$MYTHES_FOUND\" = \"no\"; then\n        AC_CHECK_LIB(mythes, main, [MYTHES_FOUND=yes],\n                [ MYTHES_FOUND=no], [])\n    fi\n    if test \"$MYTHES_FOUND\" = \"no\"; then\n        AC_MSG_ERROR([mythes library not found!.])\n    fi\n    fi\n    AC_LANG_POP([C++])\n    MYTHES_CFLAGS=$(printf '%s' \"$MYTHES_CFLAGS\" | sed -e \"s/-I/${ISYSTEM?}/g\")\n    FilterLibs \"${MYTHES_LIBS}\"\n    MYTHES_LIBS=\"${filteredlibs}\"\nelse\n    AC_MSG_RESULT([internal])\n    SYSTEM_MYTHES=\n    BUILD_TYPE=\"$BUILD_TYPE MYTHES\"\n    if test \"$COM\" = \"MSC\"; then\n        MYTHES_LIBS='$(gb_StaticLibrary_WORKDIR)/mythes.lib'\n    else\n        MYTHES_LIBS=\"-L${WORKDIR}/UnpackedTarball/mythes/.libs -lmythes-1.2\"\n    fi\nfi\nAC_SUBST(SYSTEM_MYTHES)\nAC_SUBST(MYTHES_CFLAGS)\nAC_SUBST(MYTHES_LIBS)\n\ndnl ===================================================================\ndnl How should we build the linear programming solver ?\ndnl ===================================================================\n\nENABLE_COINMP=\nAC_MSG_CHECKING([whether to build with CoinMP])\nif test \"$enable_coinmp\" != \"no\"; then\n    ENABLE_COINMP=TRUE\n    AC_MSG_RESULT([yes])\n    if test \"$with_system_coinmp\" = \"yes\"; then\n        SYSTEM_COINMP=TRUE\n        PKG_CHECK_MODULES(COINMP, coinmp coinutils)\n        FilterLibs \"${COINMP_LIBS}\"\n        COINMP_LIBS=\"${filteredlibs}\"\n    else\n        BUILD_TYPE=\"$BUILD_TYPE COINMP\"\n    fi\nelse\n    AC_MSG_RESULT([no])\nfi\nAC_SUBST(ENABLE_COINMP)\nAC_SUBST(SYSTEM_COINMP)\nAC_SUBST(COINMP_CFLAGS)\nAC_SUBST(COINMP_LIBS)\n\nENABLE_LPSOLVE=\nAC_MSG_CHECKING([whether to build with lpsolve])\nif test \"$enable_lpsolve\" != \"no\"; then\n    ENABLE_LPSOLVE=TRUE\n    AC_MSG_RESULT([yes])\nelse\n    AC_MSG_RESULT([no])\nfi\nAC_SUBST(ENABLE_LPSOLVE)\n\nif test \"$ENABLE_LPSOLVE\" = TRUE; then\n    AC_MSG_CHECKING([which lpsolve to use])\n    if test \"$with_system_lpsolve\" = \"yes\"; then\n        AC_MSG_RESULT([external])\n        SYSTEM_LPSOLVE=TRUE\n        AC_CHECK_HEADER(lpsolve/lp_lib.h, [],\n           [ AC_MSG_ERROR(lpsolve headers not found.)], [])\n        save_LIBS=$LIBS\n        # some systems need this. Like Ubuntu...\n        AC_CHECK_LIB(m, floor)\n        AC_CHECK_LIB(dl, dlopen)\n        AC_CHECK_LIB([lpsolve55], [make_lp], [:],\n            [ AC_MSG_ERROR(lpsolve library not found or too old.)], [])\n        LIBS=$save_LIBS\n    else\n        AC_MSG_RESULT([internal])\n        SYSTEM_LPSOLVE=\n        BUILD_TYPE=\"$BUILD_TYPE LPSOLVE\"\n    fi\nfi\nAC_SUBST(SYSTEM_LPSOLVE)\n\ndnl ===================================================================\ndnl Checking for libexttextcat\ndnl ===================================================================\nlibo_CHECK_SYSTEM_MODULE([libexttextcat],[LIBEXTTEXTCAT],[libexttextcat >= 3.4.1])\nif test \"$with_system_libexttextcat\" = \"yes\"; then\n    SYSTEM_LIBEXTTEXTCAT_DATA=file://`$PKG_CONFIG --variable=pkgdatadir libexttextcat`\nfi\nAC_SUBST(SYSTEM_LIBEXTTEXTCAT_DATA)\n\ndnl ===================================================================\ndnl Checking for libnumbertext\ndnl ===================================================================\nlibo_CHECK_SYSTEM_MODULE([libnumbertext],[LIBNUMBERTEXT],[libnumbertext >= 1.0.6])\nif test \"$with_system_libnumbertext\" = \"yes\"; then\n    SYSTEM_LIBNUMBERTEXT_DATA=file://`$PKG_CONFIG --variable=pkgdatadir libnumbertext`\n    SYSTEM_LIBNUMBERTEXT=YES\nelse\n    SYSTEM_LIBNUMBERTEXT=\nfi\nAC_SUBST(SYSTEM_LIBNUMBERTEXT)\nAC_SUBST(SYSTEM_LIBNUMBERTEXT_DATA)\n\ndnl ***************************************\ndnl testing libc version for Linux...\ndnl ***************************************\nif test \"$_os\" = \"Linux\"; then\n    AC_MSG_CHECKING([whether the libc is recent enough])\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n    #include <features.h>\n    #if defined(__GNU_LIBRARY__) && (__GLIBC__ < 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ < 1))\n    #error glibc >= 2.1 is required\n    #endif\n    ]])],, [AC_MSG_RESULT([yes])], [AC_MSG_ERROR([no, upgrade libc])])\nfi\n\ndnl =========================================\ndnl Check for uuidgen\ndnl =========================================\nif test \"$_os\" = \"WINNT\"; then\n    # we must use the uuidgen from the Windows SDK, which will be in the LO_PATH, but isn't in\n    # the PATH for AC_PATH_PROG. It is already tested above in the WINDOWS_SDK_HOME check.\n    UUIDGEN=uuidgen.exe\n    AC_SUBST(UUIDGEN)\nelse\n    AC_PATH_PROG([UUIDGEN], [uuidgen])\n    if test -z \"$UUIDGEN\"; then\n        AC_MSG_WARN([uuid is needed for building installation sets])\n    fi\nfi\n\ndnl ***************************************\ndnl Checking for bison and flex\ndnl ***************************************\nAC_PATH_PROG(BISON, bison)\nif test -z \"$BISON\"; then\n    AC_MSG_ERROR([no bison found in \\$PATH, install it])\nelse\n    AC_MSG_CHECKING([the bison version])\n    _bison_version=`$BISON --version | grep GNU | $SED -e 's@^[[^0-9]]*@@' -e 's@ .*@@' -e 's@,.*@@'`\n    _bison_longver=`echo $_bison_version | $AWK -F. '{ print \\$1*1000+\\$2}'`\n    dnl Accept newer than 2.0; for --enable-compiler-plugins at least 2.3 is known to be bad and\n    dnl cause\n    dnl\n    dnl   idlc/source/parser.y:222:15: error: externally available entity 'YYSTYPE' is not previously declared in an included file (if it is only used in this translation unit, put it in an unnamed namespace; otherwise, provide a declaration of it in an included file) [loplugin:external]\n    dnl   typedef union YYSTYPE\n    dnl           ~~~~~~^~~~~~~\n    dnl\n    dnl while at least 3.4.1 is know to be good:\n    if test \"$COMPILER_PLUGINS\" = TRUE; then\n        if test \"$_bison_longver\" -lt 2004; then\n            AC_MSG_ERROR([failed ($BISON $_bison_version need 2.4+ for --enable-compiler-plugins)])\n        fi\n    else\n        if test \"$_bison_longver\" -lt 2000; then\n            AC_MSG_ERROR([failed ($BISON $_bison_version need 2.0+)])\n        fi\n    fi\nfi\nAC_SUBST([BISON])\n\nAC_PATH_PROG(FLEX, flex)\nif test \"$GNUMAKE_WIN_NATIVE\" = \"TRUE\" ; then\n    FLEX=`cygpath -m $FLEX`\nfi\nif test -z \"$FLEX\"; then\n    AC_MSG_ERROR([no flex found in \\$PATH, install it])\nelse\n    AC_MSG_CHECKING([the flex version])\n    _flex_version=$($FLEX --version | $SED -e 's/^.*\\([[[:digit:]]]\\{1,\\}\\.[[[:digit:]]]\\{1,\\}\\.[[[:digit:]]]\\{1,\\}\\).*$/\\1/')\n    if test $(echo $_flex_version | $AWK -F. '{printf(\"%d%03d%03d\", $1, $2, $3)}') -lt 2006000; then\n        AC_MSG_ERROR([failed ($FLEX $_flex_version found, but need at least 2.6.0)])\n    fi\nfi\nAC_SUBST([FLEX])\n\nAC_PATH_PROG(DIFF, diff)\nif test -z \"$DIFF\"; then\n    AC_MSG_ERROR([\"diff\" not found in \\$PATH, install it])\nfi\nAC_SUBST([DIFF])\n\nAC_PATH_PROG(UNIQ, uniq)\nif test -z \"$UNIQ\"; then\n    AC_MSG_ERROR([\"uniq\" not found in \\$PATH, install it])\nfi\nAC_SUBST([UNIQ])\n\ndnl ***************************************\ndnl Checking for patch\ndnl ***************************************\nAC_PATH_PROG(PATCH, patch)\nif test -z \"$PATCH\"; then\n    AC_MSG_ERROR([\"patch\" not found in \\$PATH, install it])\nfi\n\ndnl On Solaris or macOS, check if --with-gnu-patch was used\nif test \"$_os\" = \"SunOS\" -o \"$_os\" = \"Darwin\" -o \"$_os\" = \"FreeBSD\"; then\n    if test -z \"$with_gnu_patch\"; then\n        GNUPATCH=$PATCH\n    else\n        if test -x \"$with_gnu_patch\"; then\n            GNUPATCH=$with_gnu_patch\n        else\n            AC_MSG_ERROR([--with-gnu-patch did not point to an executable])\n        fi\n    fi\n\n    AC_MSG_CHECKING([whether $GNUPATCH is GNU patch])\n    if $GNUPATCH --version | grep \"Free Software Foundation\" >/dev/null 2>/dev/null; then\n        AC_MSG_RESULT([yes])\n    else\n        if $GNUPATCH --version | grep \"2\\.0-.*-Apple\" >/dev/null 2>/dev/null; then\n            AC_MSG_RESULT([no, but accepted (Apple patch)])\n            add_warning \"patch utility is not GNU patch. Apple's patch should work OK, but it might experience issues where GNU patch doesn't.\"\n        else\n            AC_MSG_ERROR([no, GNU patch needed. install or specify with --with-gnu-patch=/path/to/it])\n        fi\n    fi\nelse\n    GNUPATCH=$PATCH\nfi\n\nif test \"$GNUMAKE_WIN_NATIVE\" = \"TRUE\" ; then\n    GNUPATCH=`cygpath -m $GNUPATCH`\nfi\n\ndnl We also need to check for --with-gnu-cp\n\nif test -z \"$with_gnu_cp\"; then\n    # check the place where the good stuff is hidden on Solaris...\n    if test -x /usr/gnu/bin/cp; then\n        GNUCP=/usr/gnu/bin/cp\n    else\n        AC_PATH_PROGS(GNUCP, gnucp cp)\n    fi\n    if test -z $GNUCP; then\n        AC_MSG_ERROR([Neither gnucp nor cp found. Install GNU cp and/or specify --with-gnu-cp=/path/to/it])\n    fi\nelse\n    if test -x \"$with_gnu_cp\"; then\n        GNUCP=$with_gnu_cp\n    else\n        AC_MSG_ERROR([--with-gnu-cp did not point to an executable])\n    fi\nfi\n\nif test \"$GNUMAKE_WIN_NATIVE\" = \"TRUE\" ; then\n    GNUCP=`cygpath -m $GNUCP`\nfi\n\nAC_MSG_CHECKING([whether $GNUCP is GNU cp from coreutils with preserve= support])\nif $GNUCP --version 2>/dev/null | grep \"coreutils\" >/dev/null 2>/dev/null; then\n    AC_MSG_RESULT([yes])\nelif $GNUCP --version 2>/dev/null | grep \"GNU fileutils\" >/dev/null 2>/dev/null; then\n    AC_MSG_RESULT([yes])\nelse\n    case \"$build_os\" in\n    darwin*|netbsd*|openbsd*|freebsd*|dragonfly*)\n        x_GNUCP=[\\#]\n        GNUCP=''\n        AC_MSG_RESULT([no gnucp found - using the system's cp command])\n        ;;\n    *)\n        AC_MSG_ERROR([no, GNU cp needed. install or specify with --with-gnu-cp=/path/to/it])\n        ;;\n    esac\nfi\n\nAC_SUBST(GNUPATCH)\nAC_SUBST(GNUCP)\nAC_SUBST(x_GNUCP)\n\ndnl ***************************************\ndnl testing assembler path\ndnl ***************************************\nML_EXE=\"\"\nif test \"$_os\" = \"WINNT\"; then\n    case \"$WIN_HOST_ARCH\" in\n    x86) assembler=ml.exe ;;\n    x64) assembler=ml64.exe ;;\n    arm64) assembler=armasm64.exe ;;\n    esac\n\n    AC_MSG_CHECKING([for the MSVC assembler ($assembler)])\n    if test -f \"$MSVC_HOST_PATH/$assembler\"; then\n        ML_EXE=`win_short_path_for_make \"$MSVC_HOST_PATH/$assembler\"`\n        AC_MSG_RESULT([$ML_EXE])\n    else\n        AC_MSG_ERROR([not found in $MSVC_HOST_PATH])\n    fi\nfi\n\nAC_SUBST(ML_EXE)\n\ndnl ===================================================================\ndnl We need zip and unzip\ndnl ===================================================================\nAC_PATH_PROG(ZIP, zip)\ntest -z \"$ZIP\" && AC_MSG_ERROR([zip is required])\nif ! \"$ZIP\" --filesync < /dev/null 2>/dev/null > /dev/null; then\n    AC_MSG_ERROR([Zip version 3.0 or newer is required to build, please install it and make sure it is the one found first in PATH],,)\nfi\n\nAC_PATH_PROG(UNZIP, unzip)\ntest -z \"$UNZIP\" && AC_MSG_ERROR([unzip is required])\n\ndnl ===================================================================\ndnl Zip must be a specific type for different build types.\ndnl ===================================================================\nif test $build_os = cygwin; then\n    if test -n \"`$ZIP -h | $GREP -i WinNT`\"; then\n        AC_MSG_ERROR([$ZIP is not the required Cygwin version of Info-ZIP's zip.exe.])\n    fi\nfi\n\ndnl ===================================================================\ndnl We need touch with -h option support.\ndnl ===================================================================\nAC_PATH_PROG(TOUCH, touch)\ntest -z \"$TOUCH\" && AC_MSG_ERROR([touch is required])\ntouch \"$WARNINGS_FILE\"\nif ! \"$TOUCH\" -h \"$WARNINGS_FILE\" 2>/dev/null > /dev/null; then\n    AC_MSG_ERROR([touch version with -h option support is required to build, please install it and make sure it is the one found first in PATH],,)\nfi\n\ndnl ===================================================================\ndnl Check for system epoxy\ndnl ===================================================================\nEPOXY_CFLAGS_internal=\"-I${WORKDIR}/UnpackedTarball/epoxy/include\"\nlibo_CHECK_SYSTEM_MODULE([epoxy], [EPOXY], [epoxy >= 1.2])\n\ndnl ===================================================================\ndnl Show which vclplugs will be built.\ndnl ===================================================================\nR=\"\"\n\nlibo_ENABLE_VCLPLUG([gen])\nlibo_ENABLE_VCLPLUG([gtk3])\nlibo_ENABLE_VCLPLUG([gtk3_kde5])\nlibo_ENABLE_VCLPLUG([gtk4])\nlibo_ENABLE_VCLPLUG([kf5])\nlibo_ENABLE_VCLPLUG([kf6])\nlibo_ENABLE_VCLPLUG([qt5])\nlibo_ENABLE_VCLPLUG([qt6])\n\nif test \"$_os\" = \"WINNT\"; then\n    R=\"$R win\"\nelif test \"$_os\" = \"Darwin\"; then\n    R=\"$R osx\"\nelif test \"$_os\" = \"iOS\"; then\n    R=\"ios\"\nelif test \"$_os\" = Android; then\n    R=\"android\"\nfi\n\nbuild_vcl_plugins=\"$R\"\nif test -z \"$build_vcl_plugins\"; then\n    build_vcl_plugins=\" none\"\nfi\nAC_MSG_NOTICE([VCLplugs to be built:${build_vcl_plugins}])\nVCL_PLUGIN_INFO=$R\nAC_SUBST([VCL_PLUGIN_INFO])\n\nif test \"$DISABLE_DYNLOADING\" = TRUE -a -z \"$DISABLE_GUI\" -a \\( -z \"$R\" -o $(echo \"$R\" | wc -w) -ne 1 \\); then\n    AC_MSG_ERROR([Can't build --disable-dynamic-loading without --disable-gui and a single VCL plugin\"])\nfi\n\ndnl ===================================================================\ndnl Check for GTK libraries\ndnl ===================================================================\n\nGTK3_CFLAGS=\"\"\nGTK3_LIBS=\"\"\nENABLE_GTKTILEDVIEWER=\"\"\nif test \"$test_gtk3\" = yes -a \"x$enable_gtk3\" = \"xyes\" -o \"x$enable_gtk3_kde5\" = \"xyes\"; then\n    if test \"$with_system_cairo\" = no; then\n        add_warning 'Non-system cairo combined with gtk3 is known to cause trouble (eg. broken image in the splashscreen). Use --with-system-cairo unless you know what you are doing.'\n    fi\n    : ${with_system_cairo:=yes}\n    PKG_CHECK_MODULES(GTK3, gtk+-3.0 >= 3.20 gmodule-no-export-2.0 glib-2.0 >= 2.38 atk >= 2.28.1 cairo)\n    GTK3_CFLAGS=$(printf '%s' \"$GTK3_CFLAGS\" | sed -e \"s/-I/${ISYSTEM?}/g\")\n    GTK3_CFLAGS=\"$GTK3_CFLAGS -DGDK_DISABLE_DEPRECATED -DGTK_DISABLE_DEPRECATED\"\n    FilterLibs \"${GTK3_LIBS}\"\n    GTK3_LIBS=\"${filteredlibs}\"\n\n    dnl We require egl only for the gtk3 plugin. Otherwise we use glx.\n    if test \"$with_system_epoxy\" != \"yes\"; then\n        AC_CHECK_LIB(EGL, eglMakeCurrent, [:], AC_MSG_ERROR([libEGL required.]))\n        AC_CHECK_HEADER(EGL/eglplatform.h, [],\n                        [AC_MSG_ERROR(EGL headers not found. install mesa-libEGL-devel)], [])\n    fi\nelif test -n \"$with_gtk3_build\" -a \"$OS\" = \"WNT\"; then\n    PathFormat \"${with_gtk3_build}/lib/pkgconfig\"\n    if test \"$build_os\" = \"cygwin\"; then\n        dnl cygwin's pkg-config does not recognize \"C:/...\"-style paths, only \"/cygdrive/c/...\"\n        formatted_path_unix=`cygpath -au \"$formatted_path_unix\"`\n    fi\n\n    PKG_CONFIG_PATH=\"$formatted_path_unix\"; export PKG_CONFIG_PATH\n    PKG_CHECK_MODULES(GTK3, cairo gdk-3.0 gio-2.0 glib-2.0 gobject-2.0 gtk+-3.0)\n    GTK3_CFLAGS=\"$GTK3_CFLAGS -DGDK_DISABLE_DEPRECATED -DGTK_DISABLE_DEPRECATED\"\n    FilterLibs \"${GTK3_LIBS}\"\n    GTK3_LIBS=\"${filteredlibs}\"\n    ENABLE_GTKTILEDVIEWER=\"yes\"\nfi\nAC_SUBST(GTK3_LIBS)\nAC_SUBST(GTK3_CFLAGS)\nAC_SUBST(ENABLE_GTKTILEDVIEWER)\n\nGTK4_CFLAGS=\"\"\nGTK4_LIBS=\"\"\nif test \"$test_gtk4\" = yes -a \"x$enable_gtk4\" = \"xyes\"; then\n    if test \"$with_system_cairo\" = no; then\n        add_warning 'Non-system cairo combined with gtk4 is assumed to cause trouble; proceed at your own risk.'\n    fi\n    : ${with_system_cairo:=yes}\n    PKG_CHECK_MODULES(GTK4, gtk4 >= 4.10 gmodule-no-export-2.0 glib-2.0 >= 2.38 cairo atk)\n    GTK4_CFLAGS=$(printf '%s' \"$GTK4_CFLAGS\" | sed -e \"s/-I/${ISYSTEM?}/g\")\n    GTK4_CFLAGS=\"$GTK4_CFLAGS -DGDK_DISABLE_DEPRECATED -DGTK_DISABLE_DEPRECATED\"\n    FilterLibs \"${GTK4_LIBS}\"\n    GTK4_LIBS=\"${filteredlibs}\"\n\n    dnl We require egl only for the gtk4 plugin. Otherwise we use glx.\n    if test \"$with_system_epoxy\" != \"yes\"; then\n        AC_CHECK_LIB(EGL, eglMakeCurrent, [:], AC_MSG_ERROR([libEGL required.]))\n        AC_CHECK_HEADER(EGL/eglplatform.h, [],\n                        [AC_MSG_ERROR(EGL headers not found. install mesa-libEGL-devel)], [])\n    fi\nfi\nAC_SUBST(GTK4_LIBS)\nAC_SUBST(GTK4_CFLAGS)\n\nif test \"$enable_introspection\" = yes; then\n    if test \"$ENABLE_GTK3\" = \"TRUE\" -o \"$ENABLE_GTK3_KDE5\" = \"TRUE\"; then\n        GOBJECT_INTROSPECTION_REQUIRE(INTROSPECTION_REQUIRED_VERSION)\n    else\n        AC_MSG_ERROR([--enable-introspection requires --enable-gtk3])\n    fi\nfi\n\n# AT-SPI2 tests require gtk3, xvfb-run, dbus-launch and atspi-2\nif ! test \"$ENABLE_GTK3\" = TRUE; then\n    if test \"$enable_atspi_tests\" = yes; then\n        AC_MSG_ERROR([--enable-atspi-tests requires --enable-gtk3])\n    fi\n    enable_atspi_tests=no\nfi\nif ! test \"$enable_atspi_tests\" = no; then\n    AC_PATH_PROGS([XVFB_RUN], [xvfb-run], no)\n    if ! test \"$XVFB_RUN\" = no; then\n        dnl make sure the found xvfb-run actually works\n        AC_MSG_CHECKING([whether $XVFB_RUN works...])\n        if $XVFB_RUN --auto-servernum true >&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD; then\n            AC_MSG_RESULT([yes])\n        else\n            AC_MSG_RESULT([no])\n            XVFB_RUN=no\n        fi\n    fi\n    if test \"$XVFB_RUN\" = no; then\n        if test \"$enable_atspi_tests\" = yes; then\n            AC_MSG_ERROR([xvfb-run required by --enable-atspi-tests not found])\n        fi\n        enable_atspi_tests=no\n    fi\nfi\nif ! test \"$enable_atspi_tests\" = no; then\n    AC_PATH_PROGS([DBUS_LAUNCH], [dbus-launch], no)\n    if test \"$DBUS_LAUNCH\" = no; then\n        if test \"$enable_atspi_tests\" = yes; then\n            AC_MSG_ERROR([dbus-launch required by --enable-atspi-tests not found])\n        fi\n        enable_atspi_tests=no\n    fi\nfi\nif ! test \"$enable_atspi_tests\" = no; then\n    PKG_CHECK_MODULES([ATSPI2], [atspi-2 gobject-2.0],,\n                      [if test \"$enable_atspi_tests\" = yes; then\n                           AC_MSG_ERROR([$ATSPI2_PKG_ERRORS])\n                       else\n                           enable_atspi_tests=no\n                       fi])\nfi\nif ! test \"x$enable_atspi_tests\" = xno; then\n    PKG_CHECK_MODULES([ATSPI2_2_32], [atspi-2 >= 2.32],\n                      [have_atspi_scroll_to=1],\n                      [have_atspi_scroll_to=0])\n    AC_DEFINE_UNQUOTED([HAVE_ATSPI2_SCROLL_TO], [$have_atspi_scroll_to],\n                       [Whether AT-SPI2 has the scrollTo API])\nfi\nENABLE_ATSPI_TESTS=\ntest \"$enable_atspi_tests\" = no || ENABLE_ATSPI_TESTS=TRUE\nAC_SUBST([ENABLE_ATSPI_TESTS])\n\ndnl ===================================================================\ndnl check for dbus support\ndnl ===================================================================\nENABLE_DBUS=\"\"\nDBUS_CFLAGS=\"\"\nDBUS_LIBS=\"\"\nDBUS_GLIB_CFLAGS=\"\"\nDBUS_GLIB_LIBS=\"\"\nDBUS_HAVE_GLIB=\"\"\n\nif test \"$enable_dbus\" = \"no\"; then\n    test_dbus=no\nfi\n\nAC_MSG_CHECKING([whether to enable DBUS support])\nif test \"$test_dbus\" = \"yes\"; then\n    ENABLE_DBUS=\"TRUE\"\n    AC_MSG_RESULT([yes])\n    PKG_CHECK_MODULES(DBUS, dbus-1 >= 0.60)\n    AC_DEFINE(ENABLE_DBUS)\n    DBUS_CFLAGS=$(printf '%s' \"$DBUS_CFLAGS\" | sed -e \"s/-I/${ISYSTEM?}/g\")\n    FilterLibs \"${DBUS_LIBS}\"\n    DBUS_LIBS=\"${filteredlibs}\"\n\n    # Glib is needed for BluetoothServer\n    # Sets also DBUS_GLIB_CFLAGS/DBUS_GLIB_LIBS if successful.\n    PKG_CHECK_MODULES(DBUS_GLIB,[glib-2.0 >= 2.4],\n        [\n            DBUS_HAVE_GLIB=\"TRUE\"\n            AC_DEFINE(DBUS_HAVE_GLIB,1)\n        ],\n        AC_MSG_WARN([[No Glib found, Bluetooth support will be disabled]])\n    )\nelse\n    AC_MSG_RESULT([no])\nfi\n\nAC_SUBST(ENABLE_DBUS)\nAC_SUBST(DBUS_CFLAGS)\nAC_SUBST(DBUS_LIBS)\nAC_SUBST(DBUS_GLIB_CFLAGS)\nAC_SUBST(DBUS_GLIB_LIBS)\nAC_SUBST(DBUS_HAVE_GLIB)\n\nAC_MSG_CHECKING([whether to enable Impress remote control])\nif test -n \"$enable_sdremote\" -a \"$enable_sdremote\" != \"no\"; then\n    AC_MSG_RESULT([yes])\n    ENABLE_SDREMOTE=TRUE\n    SDREMOTE_ENTITLEMENT=\"\t<key>com.apple.security.network.server</key>\n\t<true/>\"\n    AC_MSG_CHECKING([whether to enable Bluetooth support in Impress remote control])\n\n    if test $OS = MACOSX && test \"$MACOSX_SDK_VERSION\" -ge 101500; then\n        # The Bluetooth code doesn't compile with macOS SDK 10.15\n        if test \"$enable_sdremote_bluetooth\" = yes; then\n            AC_MSG_ERROR([macOS SDK $macosx_sdk does not currently support --enable-sdremote-bluetooth])\n        fi\n        add_warning \"not building the bluetooth part of the sdremote - used api was removed from macOS SDK 10.15\"\n        enable_sdremote_bluetooth=no\n    fi\n    # If not explicitly enabled or disabled, default\n    if test -z \"$enable_sdremote_bluetooth\"; then\n        case \"$OS\" in\n        LINUX|MACOSX|WNT)\n            # Default to yes for these\n            enable_sdremote_bluetooth=yes\n            ;;\n        *)\n            # otherwise no\n            enable_sdremote_bluetooth=no\n            ;;\n        esac\n    fi\n    # $enable_sdremote_bluetooth is guaranteed non-empty now\n\n    if test \"$enable_sdremote_bluetooth\" != \"no\"; then\n        if test \"$OS\" = \"LINUX\"; then\n            if test \"$ENABLE_DBUS\" = \"TRUE\" -a \"$DBUS_HAVE_GLIB\" = \"TRUE\"; then\n                AC_MSG_RESULT([yes])\n                ENABLE_SDREMOTE_BLUETOOTH=TRUE\n                dnl ===================================================================\n                dnl Check for system bluez\n                dnl ===================================================================\n                AC_MSG_CHECKING([which Bluetooth header to use])\n                if test \"$with_system_bluez\" = \"yes\"; then\n                    AC_MSG_RESULT([external])\n                    AC_CHECK_HEADER(bluetooth/bluetooth.h, [],\n                        [AC_MSG_ERROR(bluetooth.h not found. install bluez)], [])\n                    SYSTEM_BLUEZ=TRUE\n                else\n                    AC_MSG_RESULT([internal])\n                    SYSTEM_BLUEZ=\n                fi\n            else\n                AC_MSG_RESULT([no, dbus disabled])\n                ENABLE_SDREMOTE_BLUETOOTH=\n                SYSTEM_BLUEZ=\n            fi\n        else\n            AC_MSG_RESULT([yes])\n            ENABLE_SDREMOTE_BLUETOOTH=TRUE\n            SYSTEM_BLUEZ=\n            SDREMOTE_ENTITLEMENT=\"$SDREMOTE_ENTITLEMENT\n\t<key>com.apple.security.device.bluetooth</key>\n\t<true/>\"\n        fi\n    else\n        AC_MSG_RESULT([no])\n        ENABLE_SDREMOTE_BLUETOOTH=\n        SYSTEM_BLUEZ=\n    fi\nelse\n    ENABLE_SDREMOTE=\n    SYSTEM_BLUEZ=\n    AC_MSG_RESULT([no])\nfi\nAC_SUBST(ENABLE_SDREMOTE)\nAC_SUBST(ENABLE_SDREMOTE_BLUETOOTH)\nAC_SUBST(SDREMOTE_ENTITLEMENT)\nAC_SUBST(SYSTEM_BLUEZ)\n\ndnl ===================================================================\ndnl Check whether to enable GIO support\ndnl ===================================================================\nif test \"$ENABLE_GTK4\" = \"TRUE\" -o \"$ENABLE_GTK3\" = \"TRUE\" -o \"$ENABLE_GTK3_KDE5\" = \"TRUE\"; then\n    AC_MSG_CHECKING([whether to enable GIO support])\n    if test \"$_os\" != \"WINNT\" -a \"$_os\" != \"Darwin\" -a \"$enable_gio\" = \"yes\"; then\n        dnl Need at least 2.26 for the dbus support.\n        PKG_CHECK_MODULES([GIO], [gio-2.0 >= 2.26],\n                          [ENABLE_GIO=\"TRUE\"], [ENABLE_GIO=\"\"])\n        if test \"$ENABLE_GIO\" = \"TRUE\"; then\n            AC_DEFINE(ENABLE_GIO)\n            GIO_CFLAGS=$(printf '%s' \"$GIO_CFLAGS\" | sed -e \"s/-I/${ISYSTEM?}/g\")\n            FilterLibs \"${GIO_LIBS}\"\n            GIO_LIBS=\"${filteredlibs}\"\n        fi\n    else\n        AC_MSG_RESULT([no])\n    fi\nfi\nAC_SUBST(ENABLE_GIO)\nAC_SUBST(GIO_CFLAGS)\nAC_SUBST(GIO_LIBS)\n\n\ndnl ===================================================================\n\nSPLIT_APP_MODULES=\"\"\nif test \"$enable_split_app_modules\" = \"yes\"; then\n    SPLIT_APP_MODULES=\"TRUE\"\nfi\nAC_SUBST(SPLIT_APP_MODULES)\n\nSPLIT_OPT_FEATURES=\"\"\nif test \"$enable_split_opt_features\" = \"yes\"; then\n    SPLIT_OPT_FEATURES=\"TRUE\"\nfi\nAC_SUBST(SPLIT_OPT_FEATURES)\n\ndnl ===================================================================\ndnl Check whether the GStreamer libraries are available.\ndnl ===================================================================\n\nENABLE_GSTREAMER_1_0=\"\"\n\nif test \"$test_gstreamer_1_0\" = yes; then\n\n    AC_MSG_CHECKING([whether to enable the GStreamer 1.0 avmedia backend])\n    if test \"$enable_avmedia\" = yes -a \"$enable_gstreamer_1_0\" != no; then\n        ENABLE_GSTREAMER_1_0=\"TRUE\"\n        AC_MSG_RESULT([yes])\n        PKG_CHECK_MODULES( [GSTREAMER_1_0], [gstreamer-1.0 gstreamer-plugins-base-1.0 gstreamer-pbutils-1.0 gstreamer-video-1.0] )\n        GSTREAMER_1_0_CFLAGS=$(printf '%s' \"$GSTREAMER_1_0_CFLAGS\" | sed -e \"s/-I/${ISYSTEM?}/g\")\n        FilterLibs \"${GSTREAMER_1_0_LIBS}\"\n        GSTREAMER_1_0_LIBS=\"${filteredlibs}\"\n        AC_DEFINE(ENABLE_GSTREAMER_1_0)\n    else\n        AC_MSG_RESULT([no])\n    fi\nfi\nAC_SUBST(GSTREAMER_1_0_CFLAGS)\nAC_SUBST(GSTREAMER_1_0_LIBS)\nAC_SUBST(ENABLE_GSTREAMER_1_0)\n\nENABLE_OPENGL_TRANSITIONS=\nENABLE_OPENGL_CANVAS=\nif test $_os = iOS -o $_os = Android -o \"$ENABLE_FUZZERS\" = \"TRUE\"; then\n   : # disable\nelif test \"$_os\" = \"Darwin\"; then\n    # We use frameworks on macOS, no need for detail checks\n    ENABLE_OPENGL_TRANSITIONS=TRUE\n    AC_DEFINE(HAVE_FEATURE_OPENGL,1)\n    ENABLE_OPENGL_CANVAS=TRUE\nelif test $_os = WINNT; then\n    ENABLE_OPENGL_TRANSITIONS=TRUE\n    AC_DEFINE(HAVE_FEATURE_OPENGL,1)\n    ENABLE_OPENGL_CANVAS=TRUE\nelse\n    if test \"$USING_X11\" = TRUE; then\n        AC_CHECK_LIB(GL, glBegin, [:], AC_MSG_ERROR([libGL required.]))\n        ENABLE_OPENGL_TRANSITIONS=TRUE\n        AC_DEFINE(HAVE_FEATURE_OPENGL,1)\n        ENABLE_OPENGL_CANVAS=TRUE\n    fi\nfi\n\nAC_SUBST(ENABLE_OPENGL_TRANSITIONS)\nAC_SUBST(ENABLE_OPENGL_CANVAS)\n\ndnl =================================================\ndnl Check whether to build with OpenCL support.\ndnl =================================================\n\nif test $_os != iOS -a $_os != Android -a \"$ENABLE_FUZZERS\" != \"TRUE\" -a \"$enable_opencl\" = \"yes\"; then\n    # OPENCL in BUILD_TYPE and HAVE_FEATURE_OPENCL tell that OpenCL is potentially available on the\n    # platform (optional at run-time, used through clew).\n    BUILD_TYPE=\"$BUILD_TYPE OPENCL\"\n    AC_DEFINE(HAVE_FEATURE_OPENCL)\nfi\n\ndnl =================================================\ndnl Check whether to build with dconf support.\ndnl =================================================\n\nif test $_os != Android -a $_os != iOS -a \"$enable_dconf\" != no; then\n    PKG_CHECK_MODULES([DCONF], [dconf >= 0.40.0], [], [\n        if test \"$enable_dconf\" = yes; then\n            AC_MSG_ERROR([dconf not found])\n        else\n            enable_dconf=no\n        fi])\nfi\nAC_MSG_CHECKING([whether to enable dconf])\nif test $_os = Android -o $_os = iOS -o \"$enable_dconf\" = no; then\n    DCONF_CFLAGS=\n    DCONF_LIBS=\n    ENABLE_DCONF=\n    AC_MSG_RESULT([no])\nelse\n    ENABLE_DCONF=TRUE\n    AC_DEFINE(ENABLE_DCONF)\n    AC_MSG_RESULT([yes])\nfi\nAC_SUBST([DCONF_CFLAGS])\nAC_SUBST([DCONF_LIBS])\nAC_SUBST([ENABLE_DCONF])\n\n# pdf import?\nAC_MSG_CHECKING([whether to build the PDF import feature])\nENABLE_PDFIMPORT=\nif test -z \"$enable_pdfimport\" -o \"$enable_pdfimport\" = yes; then\n    AC_MSG_RESULT([yes])\n    ENABLE_PDFIMPORT=TRUE\n    AC_DEFINE(HAVE_FEATURE_PDFIMPORT)\nelse\n    AC_MSG_RESULT([no])\nfi\n\n# Pdfium?\nAC_MSG_CHECKING([whether to build PDFium])\nENABLE_PDFIUM=\nif test \\( -z \"$enable_pdfium\" -a \"$ENABLE_PDFIMPORT\" = \"TRUE\" \\) -o \"$enable_pdfium\" = yes; then\n    AC_MSG_RESULT([yes])\n    ENABLE_PDFIUM=TRUE\n    BUILD_TYPE=\"$BUILD_TYPE PDFIUM\"\nelse\n    AC_MSG_RESULT([no])\nfi\nAC_SUBST(ENABLE_PDFIUM)\n\nif test \"$ENABLE_PDFIUM\" = \"TRUE\"; then\n    AC_MSG_CHECKING([which OpenJPEG library to use])\n    if test \"$with_system_openjpeg\" = \"yes\"; then\n        SYSTEM_OPENJPEG2=TRUE\n        AC_MSG_RESULT([external])\n        PKG_CHECK_MODULES( OPENJPEG2, libopenjp2 )\n        OPENJPEG2_CFLAGS=$(printf '%s' \"$OPENJPEG2_CFLAGS\" | sed -e \"s/-I/${ISYSTEM?}/g\")\n        FilterLibs \"${OPENJPEG2_LIBS}\"\n        OPENJPEG2_LIBS=\"${filteredlibs}\"\n    else\n        SYSTEM_OPENJPEG2=FALSE\n        AC_MSG_RESULT([internal])\n    fi\n\n    AC_MSG_CHECKING([which Abseil library to use])\n    if test \"$with_system_abseil\" = \"yes\"; then\n        AC_MSG_RESULT([external])\n        SYSTEM_ABSEIL=TRUE\n        AC_LANG_PUSH([C++])\n        PKG_CHECK_MODULES(ABSEIL, absl_bad_optional_access absl_bad_variant_access absl_inlined_vector )\n        AC_LANG_POP([C++])\n        ABSEIL_CFLAGS=$(printf '%s' \"$ABSEIL_CFLAGS\" | sed -e \"s/-I/${ISYSTEM?}/g\")\n        FilterLibs \"${ABSEIL_LIBS}\"\n        ABSEIL_LIBS=\"${filteredlibs}\"\n    else\n        AC_MSG_RESULT([internal])\n    fi\nfi\nAC_SUBST(SYSTEM_OPENJPEG2)\nAC_SUBST(SYSTEM_ABSEIL)\nAC_SUBST(ABSEIL_CFLAGS)\nAC_SUBST(ABSEIL_LIBS)\n\ndnl ===================================================================\ndnl Check for poppler\ndnl ===================================================================\nENABLE_POPPLER=\nAC_MSG_CHECKING([whether to build Poppler])\nif test \\( -z \"$enable_poppler\" -a \"$ENABLE_PDFIMPORT\" = \"TRUE\" -a $_os != Android \\) -o \"$enable_poppler\" = yes; then\n    AC_MSG_RESULT([yes])\n    ENABLE_POPPLER=TRUE\n    AC_DEFINE(HAVE_FEATURE_POPPLER)\nelse\n    AC_MSG_RESULT([no])\nfi\nAC_SUBST(ENABLE_POPPLER)\n\nif test \"$ENABLE_PDFIMPORT\" = \"TRUE\" -a \"$ENABLE_POPPLER\" != \"TRUE\" -a \"$ENABLE_PDFIUM\" != \"TRUE\"; then\n    AC_MSG_ERROR([Cannot import PDF without either Pdfium or Poppler; please enable either of them.])\nfi\n\nif test \"$ENABLE_PDFIMPORT\" != \"TRUE\" -a \\( \"$ENABLE_POPPLER\" = \"TRUE\" -o \"$ENABLE_PDFIUM\" = \"TRUE\" \\); then\n    AC_MSG_ERROR([Cannot enable Pdfium or Poppler when PDF importing is disabled; please enable PDF import first.])\nfi\n\nif test \"$ENABLE_PDFIMPORT\" = \"TRUE\" -a \"$ENABLE_POPPLER\" = \"TRUE\"; then\n    dnl ===================================================================\n    dnl Check for system poppler\n    dnl ===================================================================\n    AC_MSG_CHECKING([which PDF import poppler to use])\n    if test \"$with_system_poppler\" = \"yes\"; then\n        AC_MSG_RESULT([external])\n        SYSTEM_POPPLER=TRUE\n        PKG_CHECK_MODULES(POPPLER,[poppler >= 0.14 poppler-cpp])\n        POPPLER_CFLAGS=$(printf '%s' \"$POPPLER_CFLAGS\" | sed -e \"s/-I/${ISYSTEM?}/g\")\n        FilterLibs \"${POPPLER_LIBS}\"\n        POPPLER_LIBS=\"${filteredlibs}\"\n    else\n        AC_MSG_RESULT([internal])\n        SYSTEM_POPPLER=\n        BUILD_TYPE=\"$BUILD_TYPE POPPLER\"\n    fi\n    AC_DEFINE([ENABLE_PDFIMPORT],1)\nfi\nAC_SUBST(ENABLE_PDFIMPORT)\nAC_SUBST(SYSTEM_POPPLER)\nAC_SUBST(POPPLER_CFLAGS)\nAC_SUBST(POPPLER_LIBS)\n\n# Skia?\nENABLE_SKIA=\nif test \"$enable_skia\" != \"no\" -a \"$build_skia\" = \"yes\" -a -z \"$DISABLE_GUI\"; then\n    # Skia now requires at least freetype2 >= 2.8.1, which is less that what LO requires as system freetype.\n    if test \"$SYSTEM_FREETYPE\" = TRUE; then\n        PKG_CHECK_EXISTS(freetype2 >= 21.0.15, # 21.0.15 = 2.8.1\n            [skia_freetype_ok=yes],\n            [skia_freetype_ok=no])\n    else # internal is ok\n        skia_freetype_ok=yes\n    fi\n    AC_MSG_CHECKING([whether to build Skia])\n    if test \"$skia_freetype_ok\" = \"yes\"; then\n        if test \"$enable_skia\" = \"debug\"; then\n            AC_MSG_RESULT([yes (debug)])\n            ENABLE_SKIA_DEBUG=TRUE\n        else\n            AC_MSG_RESULT([yes])\n            ENABLE_SKIA_DEBUG=\n        fi\n        ENABLE_SKIA=TRUE\n        if test \"$ENDIANNESS\" = \"big\" && test \"$ENABLE_SKIA\" = \"TRUE\"; then\n            AC_MSG_ERROR([skia doesn't work/isn't supported upstream on big-endian. Use --disable-skia])\n        fi\n\n        AC_DEFINE(HAVE_FEATURE_SKIA)\n        BUILD_TYPE=\"$BUILD_TYPE SKIA\"\n\n        if test \"$OS\" = \"MACOSX\"; then\n            AC_DEFINE(SK_GANESH,1)\n            AC_DEFINE(SK_METAL,1)\n            SKIA_GPU=METAL\n            AC_SUBST(SKIA_GPU)\n        else\n            AC_DEFINE(SK_GANESH,1)\n            AC_DEFINE(SK_VULKAN,1)\n            SKIA_GPU=VULKAN\n            AC_SUBST(SKIA_GPU)\n        fi\n\n        if test \"$enable_skia_vulkan_validation\" = \"yes\"; then\n            AC_DEFINE(SK_ENABLE_VK_LAYERS,1)\n        fi\n    else\n        AC_MSG_RESULT([no (freetype too old)])\n        add_warning \"freetype version is too old for Skia library, at least 2.8.1 required, Skia support disabled\"\n    fi\n\nelse\n    AC_MSG_CHECKING([whether to build Skia])\n    AC_MSG_RESULT([no])\nfi\nAC_SUBST(ENABLE_SKIA)\nAC_SUBST(ENABLE_SKIA_DEBUG)\n\nLO_CLANG_CXXFLAGS_INTRINSICS_SSE2=\nLO_CLANG_CXXFLAGS_INTRINSICS_SSSE3=\nLO_CLANG_CXXFLAGS_INTRINSICS_SSE41=\nLO_CLANG_CXXFLAGS_INTRINSICS_SSE42=\nLO_CLANG_CXXFLAGS_INTRINSICS_AVX=\nLO_CLANG_CXXFLAGS_INTRINSICS_AVX2=\nLO_CLANG_CXXFLAGS_INTRINSICS_AVX512=\nLO_CLANG_CXXFLAGS_INTRINSICS_AVX512F=\nLO_CLANG_CXXFLAGS_INTRINSICS_F16C=\nLO_CLANG_CXXFLAGS_INTRINSICS_FMA=\nLO_CLANG_VERSION=\nHAVE_LO_CLANG_DLLEXPORTINLINES=\n\nif test \"$ENABLE_SKIA\" = TRUE -a \"$COM_IS_CLANG\" != TRUE; then\n    if test -n \"$LO_CLANG_CC\" -a -n \"$LO_CLANG_CXX\"; then\n        AC_MSG_CHECKING([for Clang])\n        AC_MSG_RESULT([$LO_CLANG_CC / $LO_CLANG_CXX])\n    else\n        if test \"$_os\" = \"WINNT\"; then\n            AC_MSG_CHECKING([for clang-cl])\n            if test -x \"$VC_PRODUCT_DIR/Tools/Llvm/bin/clang-cl.exe\"; then\n                LO_CLANG_CC=`win_short_path_for_make \"$VC_PRODUCT_DIR/Tools/Llvm/bin/clang-cl.exe\"`\n            elif test -n \"$PROGRAMFILES\" -a -x \"$(cygpath -u \"$PROGRAMFILES/LLVM/bin/clang-cl.exe\")\"; then\n                LO_CLANG_CC=`win_short_path_for_make \"$PROGRAMFILES/LLVM/bin/clang-cl.exe\"`\n            elif test -x \"$(cygpath -u \"c:/Program Files/LLVM/bin/clang-cl.exe\")\"; then\n                LO_CLANG_CC=`win_short_path_for_make \"c:/Program Files/LLVM/bin/clang-cl.exe\"`\n            fi\n            if test -n \"$LO_CLANG_CC\"; then\n                dnl explicitly set -m32/-m64\n                LO_CLANG_CC=\"$LO_CLANG_CC -m$WIN_HOST_BITS\"\n                LO_CLANG_CXX=\"$LO_CLANG_CC\"\n                AC_MSG_RESULT([$LO_CLANG_CC])\n            else\n                AC_MSG_RESULT([no])\n            fi\n\n            AC_MSG_CHECKING([the dependency generation prefix (clang.exe -showIncludes)])\n            echo \"#include <stdlib.h>\" > conftest.c\n            LO_CLANG_SHOWINCLUDES_PREFIX=`VSLANG=1033 $LO_CLANG_CC $CFLAGS -c -showIncludes conftest.c 2>/dev/null | \\\n                grep 'stdlib\\.h' | head -n1 | sed 's/ [[[:alpha:]]]:.*//'`\n            rm -f conftest.c conftest.obj\n            if test -z \"$LO_CLANG_SHOWINCLUDES_PREFIX\"; then\n                AC_MSG_ERROR([cannot determine the -showIncludes prefix])\n            else\n                AC_MSG_RESULT([\"$LO_CLANG_SHOWINCLUDES_PREFIX\"])\n            fi\n        else\n            AC_CHECK_PROG(LO_CLANG_CC,clang,clang,[])\n            AC_CHECK_PROG(LO_CLANG_CXX,clang++,clang++,[])\n        fi\n    fi\n    if test -n \"$LO_CLANG_CC\" -a -n \"$LO_CLANG_CXX\"; then\n        clang2_version=`echo __clang_major__.__clang_minor__.__clang_patchlevel__ | $LO_CLANG_CC -E - | tail -1 | sed 's/ //g'`\n        LO_CLANG_VERSION=`echo \"$clang2_version\" | $AWK -F. '{ print \\$1*10000+(\\$2<100?\\$2:99)*100+(\\$3<100?\\$3:99) }'`\n        if test \"$LO_CLANG_VERSION\" -lt 50002; then\n            AC_MSG_WARN([\"$clang2_version\" is too old or unrecognized, must be at least Clang 5.0.2])\n            LO_CLANG_CC=\n            LO_CLANG_CXX=\n        fi\n    fi\n    if test -n \"$LO_CLANG_CC\" -a -n \"$LO_CLANG_CXX\" -a \"$_os\" = \"WINNT\"; then\n        save_CXX=\"$CXX\"\n        CXX=\"$LO_CLANG_CXX\"\n        AC_MSG_CHECKING([whether $CXX supports -Zc:dllexportInlines-])\n        AC_LANG_PUSH([C++])\n        save_CXXFLAGS=$CXXFLAGS\n        CXXFLAGS=\"$CXXFLAGS -Werror -Zc:dllexportInlines-\"\n        AC_COMPILE_IFELSE([AC_LANG_SOURCE()], [\n                HAVE_LO_CLANG_DLLEXPORTINLINES=TRUE\n                AC_MSG_RESULT([yes])\n            ], [AC_MSG_RESULT([no])])\n        CXXFLAGS=$save_CXXFLAGS\n        AC_LANG_POP([C++])\n        CXX=\"$save_CXX\"\n        if test -z \"$HAVE_LO_CLANG_DLLEXPORTINLINES\"; then\n            AC_MSG_ERROR([Clang compiler does not support -Zc:dllexportInlines-. The Skia library needs to be built using a newer Clang version, or use --disable-skia.])\n        fi\n    fi\n    if test -z \"$LO_CLANG_CC\" -o -z \"$LO_CLANG_CXX\"; then\n        # Skia is the default on Windows and Mac, so hard-require Clang.\n        # Elsewhere it's used just by the 'gen' VCL backend which is rarely used.\n        if test \"$_os\" = \"WINNT\" -o \"$_os\" = \"Darwin\"; then\n            AC_MSG_ERROR([Clang compiler not found. The Skia library needs to be built using Clang, or use --disable-skia.])\n        else\n            AC_MSG_WARN([Clang compiler not found.])\n        fi\n    else\n\n        save_CXX=\"$CXX\"\n        CXX=\"$LO_CLANG_CXX\"\n        # copy&paste (and adjust) of intrinsics checks, since MSVC's -arch doesn't work well for Clang-cl\n        flag_sse2=-msse2\n        flag_ssse3=-mssse3\n        flag_sse41=-msse4.1\n        flag_sse42=-msse4.2\n        flag_avx=-mavx\n        flag_avx2=-mavx2\n        flag_avx512=\"-mavx512f -mavx512vl -mavx512bw -mavx512dq -mavx512cd\"\n        flag_avx512f=-mavx512f\n        flag_f16c=-mf16c\n        flag_fma=-mfma\n\n        AC_MSG_CHECKING([whether $CXX can compile SSE2 intrinsics])\n        AC_LANG_PUSH([C++])\n        save_CXXFLAGS=$CXXFLAGS\n        CXXFLAGS=\"$CXXFLAGS $flag_sse2\"\n        AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n            #include <emmintrin.h>\n            int main () {\n                __m128i a = _mm_set1_epi32 (0), b = _mm_set1_epi32 (0), c;\n                c = _mm_xor_si128 (a, b);\n                return 0;\n            }\n            ])],\n            [can_compile_sse2=yes],\n            [can_compile_sse2=no])\n        AC_LANG_POP([C++])\n        CXXFLAGS=$save_CXXFLAGS\n        AC_MSG_RESULT([${can_compile_sse2}])\n        if test \"${can_compile_sse2}\" = \"yes\" ; then\n            LO_CLANG_CXXFLAGS_INTRINSICS_SSE2=\"$flag_sse2\"\n        fi\n\n        AC_MSG_CHECKING([whether $CXX can compile SSSE3 intrinsics])\n        AC_LANG_PUSH([C++])\n        save_CXXFLAGS=$CXXFLAGS\n        CXXFLAGS=\"$CXXFLAGS $flag_ssse3\"\n        AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n            #include <tmmintrin.h>\n            int main () {\n                __m128i a = _mm_set1_epi32 (0), b = _mm_set1_epi32 (0), c;\n                c = _mm_maddubs_epi16 (a, b);\n                return 0;\n            }\n            ])],\n            [can_compile_ssse3=yes],\n            [can_compile_ssse3=no])\n        AC_LANG_POP([C++])\n        CXXFLAGS=$save_CXXFLAGS\n        AC_MSG_RESULT([${can_compile_ssse3}])\n        if test \"${can_compile_ssse3}\" = \"yes\" ; then\n            LO_CLANG_CXXFLAGS_INTRINSICS_SSSE3=\"$flag_ssse3\"\n        fi\n\n        AC_MSG_CHECKING([whether $CXX can compile SSE4.1 intrinsics])\n        AC_LANG_PUSH([C++])\n        save_CXXFLAGS=$CXXFLAGS\n        CXXFLAGS=\"$CXXFLAGS $flag_sse41\"\n        AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n            #include <smmintrin.h>\n            int main () {\n                __m128i a = _mm_set1_epi32 (0), b = _mm_set1_epi32 (0), c;\n                c = _mm_cmpeq_epi64 (a, b);\n                return 0;\n            }\n            ])],\n            [can_compile_sse41=yes],\n            [can_compile_sse41=no])\n        AC_LANG_POP([C++])\n        CXXFLAGS=$save_CXXFLAGS\n        AC_MSG_RESULT([${can_compile_sse41}])\n        if test \"${can_compile_sse41}\" = \"yes\" ; then\n            LO_CLANG_CXXFLAGS_INTRINSICS_SSE41=\"$flag_sse41\"\n        fi\n\n        AC_MSG_CHECKING([whether $CXX can compile SSE4.2 intrinsics])\n        AC_LANG_PUSH([C++])\n        save_CXXFLAGS=$CXXFLAGS\n        CXXFLAGS=\"$CXXFLAGS $flag_sse42\"\n        AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n            #include <nmmintrin.h>\n            int main () {\n                __m128i a = _mm_set1_epi32 (0), b = _mm_set1_epi32 (0), c;\n                c = _mm_cmpgt_epi64 (a, b);\n                return 0;\n            }\n            ])],\n            [can_compile_sse42=yes],\n            [can_compile_sse42=no])\n        AC_LANG_POP([C++])\n        CXXFLAGS=$save_CXXFLAGS\n        AC_MSG_RESULT([${can_compile_sse42}])\n        if test \"${can_compile_sse42}\" = \"yes\" ; then\n            LO_CLANG_CXXFLAGS_INTRINSICS_SSE42=\"$flag_sse42\"\n        fi\n\n        AC_MSG_CHECKING([whether $CXX can compile AVX intrinsics])\n        AC_LANG_PUSH([C++])\n        save_CXXFLAGS=$CXXFLAGS\n        CXXFLAGS=\"$CXXFLAGS $flag_avx\"\n        AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n            #include <immintrin.h>\n            int main () {\n                __m256 a = _mm256_set1_ps (0.0f), b = _mm256_set1_ps (0.0f), c;\n                c = _mm256_xor_ps(a, b);\n                return 0;\n            }\n            ])],\n            [can_compile_avx=yes],\n            [can_compile_avx=no])\n        AC_LANG_POP([C++])\n        CXXFLAGS=$save_CXXFLAGS\n        AC_MSG_RESULT([${can_compile_avx}])\n        if test \"${can_compile_avx}\" = \"yes\" ; then\n            LO_CLANG_CXXFLAGS_INTRINSICS_AVX=\"$flag_avx\"\n        fi\n\n        AC_MSG_CHECKING([whether $CXX can compile AVX2 intrinsics])\n        AC_LANG_PUSH([C++])\n        save_CXXFLAGS=$CXXFLAGS\n        CXXFLAGS=\"$CXXFLAGS $flag_avx2\"\n        AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n            #include <immintrin.h>\n            int main () {\n                __m256i a = _mm256_set1_epi32 (0), b = _mm256_set1_epi32 (0), c;\n                c = _mm256_maddubs_epi16(a, b);\n                return 0;\n            }\n            ])],\n            [can_compile_avx2=yes],\n            [can_compile_avx2=no])\n        AC_LANG_POP([C++])\n        CXXFLAGS=$save_CXXFLAGS\n        AC_MSG_RESULT([${can_compile_avx2}])\n        if test \"${can_compile_avx2}\" = \"yes\" ; then\n            LO_CLANG_CXXFLAGS_INTRINSICS_AVX2=\"$flag_avx2\"\n        fi\n\n        AC_MSG_CHECKING([whether $CXX can compile AVX512 intrinsics])\n        AC_LANG_PUSH([C++])\n        save_CXXFLAGS=$CXXFLAGS\n        CXXFLAGS=\"$CXXFLAGS $flag_avx512\"\n        AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n            #include <immintrin.h>\n            int main () {\n                __m512i a = _mm512_loadu_si512(0);\n                __m512d v1 = _mm512_load_pd(0);\n                // https://gcc.gnu.org/git/?p=gcc.git;a=commit;f=gcc/config/i386/avx512fintrin.h;h=23bce99cbe7016a04e14c2163ed3fe6a5a64f4e2\n                __m512d v2 = _mm512_abs_pd(v1);\n                return 0;\n            }\n            ])],\n            [can_compile_avx512=yes],\n            [can_compile_avx512=no])\n        AC_LANG_POP([C++])\n        CXXFLAGS=$save_CXXFLAGS\n        AC_MSG_RESULT([${can_compile_avx512}])\n        if test \"${can_compile_avx512}\" = \"yes\" ; then\n            LO_CLANG_CXXFLAGS_INTRINSICS_AVX512=\"$flag_avx512\"\n            LO_CLANG_CXXFLAGS_INTRINSICS_AVX512F=\"$flag_avx512f\"\n        fi\n\n        AC_MSG_CHECKING([whether $CXX can compile F16C intrinsics])\n        AC_LANG_PUSH([C++])\n        save_CXXFLAGS=$CXXFLAGS\n        CXXFLAGS=\"$CXXFLAGS $flag_f16c\"\n        AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n            #include <immintrin.h>\n            int main () {\n                __m128i a = _mm_set1_epi32 (0);\n                __m128 c;\n                c = _mm_cvtph_ps(a);\n                return 0;\n            }\n            ])],\n            [can_compile_f16c=yes],\n            [can_compile_f16c=no])\n        AC_LANG_POP([C++])\n        CXXFLAGS=$save_CXXFLAGS\n        AC_MSG_RESULT([${can_compile_f16c}])\n        if test \"${can_compile_f16c}\" = \"yes\" ; then\n            LO_CLANG_CXXFLAGS_INTRINSICS_F16C=\"$flag_f16c\"\n        fi\n\n        AC_MSG_CHECKING([whether $CXX can compile FMA intrinsics])\n        AC_LANG_PUSH([C++])\n        save_CXXFLAGS=$CXXFLAGS\n        CXXFLAGS=\"$CXXFLAGS $flag_fma\"\n        AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n            #include <immintrin.h>\n            int main () {\n                __m256 a = _mm256_set1_ps (0.0f), b = _mm256_set1_ps (0.0f), c = _mm256_set1_ps (0.0f), d;\n                d = _mm256_fmadd_ps(a, b, c);\n                return 0;\n            }\n            ])],\n            [can_compile_fma=yes],\n            [can_compile_fma=no])\n        AC_LANG_POP([C++])\n        CXXFLAGS=$save_CXXFLAGS\n        AC_MSG_RESULT([${can_compile_fma}])\n        if test \"${can_compile_fma}\" = \"yes\" ; then\n            LO_CLANG_CXXFLAGS_INTRINSICS_FMA=\"$flag_fma\"\n        fi\n\n        CXX=\"$save_CXX\"\n    fi\nfi\n#\n# prefix LO_CLANG_CC/LO_CLANG_CXX with ccache if needed\n#\nif test \"$CCACHE\" != \"\" -a -n \"$LO_CLANG_CC\" -a -n \"$LO_CLANG_CXX\"; then\n    AC_MSG_CHECKING([whether $LO_CLANG_CC is already ccached])\n    AC_LANG_PUSH([C])\n    save_CC=\"$CC\"\n    CC=\"$LO_CLANG_CC\"\n    save_CFLAGS=$CFLAGS\n    CFLAGS=\"$CFLAGS --ccache-skip -O2 -Werror\"\n    dnl an empty program will do, we're checking the compiler flags\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([],[])],\n                      [use_ccache=yes], [use_ccache=no])\n    CFLAGS=$save_CFLAGS\n    CC=$save_CC\n    if test $use_ccache = yes -a \"${CCACHE##*sccache*}\" != \"\"; then\n        AC_MSG_RESULT([yes])\n    else\n        LO_CLANG_CC=\"$CCACHE $LO_CLANG_CC\"\n        AC_MSG_RESULT([no])\n    fi\n    AC_LANG_POP([C])\n\n    AC_MSG_CHECKING([whether $LO_CLANG_CXX is already ccached])\n    AC_LANG_PUSH([C++])\n    save_CXX=\"$CXX\"\n    CXX=\"$LO_CLANG_CXX\"\n    save_CXXFLAGS=$CXXFLAGS\n    CXXFLAGS=\"$CXXFLAGS --ccache-skip -O2 -Werror\"\n    dnl an empty program will do, we're checking the compiler flags\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([],[])],\n                      [use_ccache=yes], [use_ccache=no])\n    if test $use_ccache = yes -a \"${CCACHE##*sccache*}\" != \"\"; then\n        AC_MSG_RESULT([yes])\n    else\n        LO_CLANG_CXX=\"$CCACHE $LO_CLANG_CXX\"\n        AC_MSG_RESULT([no])\n    fi\n    CXXFLAGS=$save_CXXFLAGS\n    CXX=$save_CXX\n    AC_LANG_POP([C++])\nfi\n\nAC_SUBST(LO_CLANG_CC)\nAC_SUBST(LO_CLANG_CXX)\nAC_SUBST(LO_CLANG_CXXFLAGS_INTRINSICS_SSE2)\nAC_SUBST(LO_CLANG_CXXFLAGS_INTRINSICS_SSSE3)\nAC_SUBST(LO_CLANG_CXXFLAGS_INTRINSICS_SSE41)\nAC_SUBST(LO_CLANG_CXXFLAGS_INTRINSICS_SSE42)\nAC_SUBST(LO_CLANG_CXXFLAGS_INTRINSICS_AVX)\nAC_SUBST(LO_CLANG_CXXFLAGS_INTRINSICS_AVX2)\nAC_SUBST(LO_CLANG_CXXFLAGS_INTRINSICS_AVX512)\nAC_SUBST(LO_CLANG_CXXFLAGS_INTRINSICS_AVX512F)\nAC_SUBST(LO_CLANG_CXXFLAGS_INTRINSICS_F16C)\nAC_SUBST(LO_CLANG_CXXFLAGS_INTRINSICS_FMA)\nAC_SUBST(LO_CLANG_SHOWINCLUDES_PREFIX)\nAC_SUBST(LO_CLANG_VERSION)\nAC_SUBST(CLANG_USE_LD)\nAC_SUBST([HAVE_LO_CLANG_DLLEXPORTINLINES])\n\nSYSTEM_GPGMEPP=\n\nAC_MSG_CHECKING([whether to enable gpgmepp])\nif test \"$enable_gpgmepp\" = no; then\n    AC_MSG_RESULT([no])\nelif test \"$enable_mpl_subset\" = \"yes\"; then\n    AC_MSG_RESULT([no (MPL only)])\nelif test \"$enable_fuzzers\" = \"yes\"; then\n    AC_MSG_RESULT([no (oss-fuzz)])\nelif test \\( \\( \"$_os\" = \"Linux\" -o \"$_os\" = \"Darwin\" \\) -a \"$ENABLE_NSS\" = TRUE \\) -o \"$_os\" = \"WINNT\" ; then\n    AC_MSG_RESULT([yes])\n    dnl ===================================================================\n    dnl Check for system gpgme\n    dnl ===================================================================\n    AC_MSG_CHECKING([which gpgmepp to use])\n    if test \"$with_system_gpgmepp\" = \"yes\"; then\n        AC_MSG_RESULT([external])\n        SYSTEM_GPGMEPP=TRUE\n\n        # C++ library doesn't come with fancy gpgmepp-config, check for headers the old-fashioned way\n        AC_CHECK_HEADER(gpgme++/gpgmepp_version.h, [ GPGMEPP_CFLAGS=-I/usr/include/gpgme++ ],\n            [AC_MSG_ERROR([gpgmepp headers not found, install gpgmepp >= 1.14 development package])], [])\n        AC_CHECK_HEADER(gpgme.h, [],\n            [AC_MSG_ERROR([gpgme headers not found, install gpgme development package])], [])\n        AC_CHECK_LIB(gpgmepp, main, [],\n            [AC_MSG_ERROR(gpgmepp not found or not functional)], [])\n        GPGMEPP_LIBS=-lgpgmepp\n    else\n        AC_MSG_RESULT([internal])\n        BUILD_TYPE=\"$BUILD_TYPE LIBGPGERROR LIBASSUAN GPGMEPP\"\n\n        GPG_ERROR_CFLAGS=\"-I${WORKDIR}/UnpackedTarball/libgpg-error/src\"\n        LIBASSUAN_CFLAGS=\"-I${WORKDIR}/UnpackedTarball/libassuan/src\"\n        if test \"$_os\" != \"WINNT\"; then\n            GPG_ERROR_LIBS=\"-L${WORKDIR}/UnpackedTarball/libgpg-error/src/.libs -lgpg-error\"\n            LIBASSUAN_LIBS=\"-L${WORKDIR}/UnpackedTarball/libassuan/src/.libs -lassuan\"\n        fi\n    fi\n    ENABLE_GPGMEPP=TRUE\n    AC_DEFINE([HAVE_FEATURE_GPGME])\n    AC_PATH_PROG(GPG, gpg)\n    # TODO: Windows's cygwin gpg does not seem to work with our gpgme,\n    # so let's exclude that manually for the moment\n    if test -n \"$GPG\" -a \"$_os\" != \"WINNT\"; then\n        # make sure we not only have a working gpgme, but a full working\n        # gpg installation to run OpenPGP signature verification\n        AC_DEFINE([HAVE_FEATURE_GPGVERIFY])\n    fi\n    if test \"$_os\" = \"Linux\"; then\n      uid=`id -u`\n      AC_MSG_CHECKING([for /run/user/$uid])\n      if test -d /run/user/$uid; then\n        AC_MSG_RESULT([yes])\n        AC_PATH_PROG(GPGCONF, gpgconf)\n\n        # Older versions of gpgconf are not working as expected, since\n        # `gpgconf --remove-socketdir` fails to exit any gpg-agent daemon operating\n        # on that socket dir that has (indirectly) been started by the tests in xmlsecurity/qa/unit/signing/signing.cxx\n        # (see commit message of f0305ec0a7d199e605511844d9d6af98b66d4bfd%5E )\n        AC_MSG_CHECKING([whether version of gpgconf is suitable ... ])\n        GPGCONF_VERSION=`\"$GPGCONF\" --version | \"$AWK\" '/^gpgconf \\(GnuPG\\)/{print $3}'`\n        GPGCONF_NUMVER=`echo $GPGCONF_VERSION | $AWK -F. '{ print \\$1*10000+\\$2*100+\\$3 }'`\n        if test \"$GPGCONF_VERSION\" = \"2.2_OOo\" -o \"$GPGCONF_NUMVER\" -ge \"020200\"; then\n          AC_MSG_RESULT([yes, $GPGCONF_VERSION])\n          AC_MSG_CHECKING([for gpgconf --create-socketdir... ])\n          if $GPGCONF --dump-options > /dev/null ; then\n            if $GPGCONF --dump-options | grep -q create-socketdir ; then\n              AC_MSG_RESULT([yes])\n              AC_DEFINE([HAVE_GPGCONF_SOCKETDIR])\n              AC_DEFINE_UNQUOTED([GPGME_GPGCONF], [\"$GPGCONF\"])\n            else\n              AC_MSG_RESULT([no])\n            fi\n          else\n            AC_MSG_RESULT([no. missing or broken gpgconf?])\n          fi\n        else\n          AC_MSG_RESULT([no, $GPGCONF_VERSION])\n        fi\n      else\n        AC_MSG_RESULT([no])\n     fi\n   fi\nelse\n    AC_MSG_RESULT([no (unsupported OS or missing NSS)])\nfi\nAC_SUBST(ENABLE_GPGMEPP)\nAC_SUBST(SYSTEM_GPGMEPP)\nAC_SUBST(GPG_ERROR_CFLAGS)\nAC_SUBST(GPG_ERROR_LIBS)\nAC_SUBST(LIBASSUAN_CFLAGS)\nAC_SUBST(LIBASSUAN_LIBS)\nAC_SUBST(GPGMEPP_CFLAGS)\nAC_SUBST(GPGMEPP_LIBS)\n\nAC_ARG_WITH(system-java-websocket,\n    AS_HELP_STRING([--with-system-java-websocket],\n        [Use Java-WebSocket already on system.]),,\n    [with_system_java_websocket=\"$with_system_jars\"])\n\nAC_ARG_WITH(java-websocket-jar,\n    AS_HELP_STRING([--with-java-websocket-jar=JARFILE],\n        [Specify path to jarfile manually.]),\n    JAVA_WEBSOCKET_JAR=$withval)\n\nAC_MSG_CHECKING([whether to build Java Websocket for the UNO remote websocket client])\nif test \"$with_java\" != \"no\"; then\n    AC_MSG_RESULT([yes])\n    ENABLE_JAVA_WEBSOCKET=TRUE\n\n    dnl ===================================================================\n    dnl Check for system Java-WebSocket\n    dnl ===================================================================\n    AC_MSG_CHECKING([which Java-WebSocket to use])\n    if test \"$with_system_java_websocket\" = \"yes\"; then\n        AC_MSG_RESULT([external])\n        SYSTEM_JAVA_WEBSOCKET=TRUE\n        if test -z $JAVA_WEBSOCKET_JAR; then\n            JAVA_WEBSOCKET_JAR=/usr/share/java/Java-WebSocket/Java-WebSocket.jar\n        fi\n        if ! test -f $JAVA_WEBSOCKET_JAR; then\n            AC_MSG_ERROR(Java-WebSocket.jar not found.)\n        fi\n    else\n        AC_MSG_RESULT([internal])\n        SYSTEM_JAVA_WEBSOCKET=\n        BUILD_TYPE=\"$BUILD_TYPE JAVA_WEBSOCKET\"\n        NEED_ANT=TRUE\n    fi\nelse\n    AC_MSG_RESULT([no])\n    ENABLE_JAVA_WEBSOCKET=\nfi\nAC_SUBST(ENABLE_JAVA_WEBSOCKET)\nAC_SUBST(SYSTEM_JAVA_WEBSOCKET)\nAC_SUBST(JAVA_WEBSOCKET_JAR)\n\nAC_MSG_CHECKING([whether to build the Wiki Publisher extension])\nif test \"x$enable_ext_wiki_publisher\" = \"xyes\" -a \"x$enable_extension_integration\" != \"xno\" -a \"$with_java\" != \"no\"; then\n    AC_MSG_RESULT([yes])\n    ENABLE_MEDIAWIKI=TRUE\n    BUILD_TYPE=\"$BUILD_TYPE XSLTML\"\n    if test  \"x$with_java\" = \"xno\"; then\n        AC_MSG_ERROR([Wiki Publisher requires Java! Enable Java if you want to build it.])\n    fi\nelse\n    AC_MSG_RESULT([no])\n    ENABLE_MEDIAWIKI=\n    SCPDEFS=\"$SCPDEFS -DWITHOUT_EXTENSION_MEDIAWIKI\"\nfi\nAC_SUBST(ENABLE_MEDIAWIKI)\n\nAC_MSG_CHECKING([whether to build the Report Builder])\nif test \"$enable_report_builder\" != \"no\" -a \"$with_java\" != \"no\"; then\n    AC_MSG_RESULT([yes])\n    ENABLE_REPORTBUILDER=TRUE\n    AC_MSG_CHECKING([which jfreereport libs to use])\n    if test \"$with_system_jfreereport\" = \"yes\"; then\n        SYSTEM_JFREEREPORT=TRUE\n        AC_MSG_RESULT([external])\n        if test -z $SAC_JAR; then\n            SAC_JAR=/usr/share/java/sac.jar\n        fi\n        if ! test -f $SAC_JAR; then\n             AC_MSG_ERROR(sac.jar not found.)\n        fi\n\n        if test -z $LIBXML_JAR; then\n            if test -f /usr/share/java/libxml-1.0.0.jar; then\n                LIBXML_JAR=/usr/share/java/libxml-1.0.0.jar\n            elif test -f /usr/share/java/libxml.jar; then\n                LIBXML_JAR=/usr/share/java/libxml.jar\n            else\n                AC_MSG_ERROR(libxml.jar replacement not found.)\n            fi\n        elif ! test -f $LIBXML_JAR; then\n            AC_MSG_ERROR(libxml.jar not found.)\n        fi\n\n        if test -z $FLUTE_JAR; then\n            if test -f /usr/share/java/flute-1.3.0.jar; then\n                FLUTE_JAR=/usr/share/java/flute-1.3.0.jar\n            elif test -f /usr/share/java/flute.jar; then\n                FLUTE_JAR=/usr/share/java/flute.jar\n            else\n                AC_MSG_ERROR(flute-1.3.0.jar replacement not found.)\n            fi\n        elif ! test -f $FLUTE_JAR; then\n            AC_MSG_ERROR(flute-1.3.0.jar not found.)\n        fi\n\n        if test -z $JFREEREPORT_JAR; then\n            if test -f /usr/share/java/flow-engine-0.9.2.jar; then\n                JFREEREPORT_JAR=/usr/share/java/flow-engine-0.9.2.jar\n            elif test -f /usr/share/java/flow-engine.jar; then\n                JFREEREPORT_JAR=/usr/share/java/flow-engine.jar\n            else\n                AC_MSG_ERROR(jfreereport.jar replacement not found.)\n            fi\n        elif ! test -f  $JFREEREPORT_JAR; then\n                AC_MSG_ERROR(jfreereport.jar not found.)\n        fi\n\n        if test -z $LIBLAYOUT_JAR; then\n            if test -f /usr/share/java/liblayout-0.2.9.jar; then\n                LIBLAYOUT_JAR=/usr/share/java/liblayout-0.2.9.jar\n            elif test -f /usr/share/java/liblayout.jar; then\n                LIBLAYOUT_JAR=/usr/share/java/liblayout.jar\n            else\n                AC_MSG_ERROR(liblayout.jar replacement not found.)\n            fi\n        elif ! test -f $LIBLAYOUT_JAR; then\n                AC_MSG_ERROR(liblayout.jar not found.)\n        fi\n\n        if test -z $LIBLOADER_JAR; then\n            if test -f /usr/share/java/libloader-1.0.0.jar; then\n                LIBLOADER_JAR=/usr/share/java/libloader-1.0.0.jar\n            elif test -f /usr/share/java/libloader.jar; then\n                LIBLOADER_JAR=/usr/share/java/libloader.jar\n            else\n                AC_MSG_ERROR(libloader.jar replacement not found.)\n            fi\n        elif ! test -f  $LIBLOADER_JAR; then\n            AC_MSG_ERROR(libloader.jar not found.)\n        fi\n\n        if test -z $LIBFORMULA_JAR; then\n            if test -f /usr/share/java/libformula-0.2.0.jar; then\n                LIBFORMULA_JAR=/usr/share/java/libformula-0.2.0.jar\n            elif test -f /usr/share/java/libformula.jar; then\n                LIBFORMULA_JAR=/usr/share/java/libformula.jar\n            else\n                AC_MSG_ERROR(libformula.jar replacement not found.)\n            fi\n        elif ! test -f $LIBFORMULA_JAR; then\n                AC_MSG_ERROR(libformula.jar not found.)\n        fi\n\n        if test -z $LIBREPOSITORY_JAR; then\n            if test -f /usr/share/java/librepository-1.0.0.jar; then\n                LIBREPOSITORY_JAR=/usr/share/java/librepository-1.0.0.jar\n            elif test -f /usr/share/java/librepository.jar; then\n                LIBREPOSITORY_JAR=/usr/share/java/librepository.jar\n            else\n                AC_MSG_ERROR(librepository.jar replacement not found.)\n            fi\n        elif ! test -f $LIBREPOSITORY_JAR; then\n            AC_MSG_ERROR(librepository.jar not found.)\n        fi\n\n        if test -z $LIBFONTS_JAR; then\n            if test -f /usr/share/java/libfonts-1.0.0.jar; then\n                LIBFONTS_JAR=/usr/share/java/libfonts-1.0.0.jar\n            elif test -f /usr/share/java/libfonts.jar; then\n                LIBFONTS_JAR=/usr/share/java/libfonts.jar\n            else\n                AC_MSG_ERROR(libfonts.jar replacement not found.)\n            fi\n        elif ! test -f $LIBFONTS_JAR; then\n                AC_MSG_ERROR(libfonts.jar not found.)\n        fi\n\n        if test -z $LIBSERIALIZER_JAR; then\n            if test -f /usr/share/java/libserializer-1.0.0.jar; then\n                LIBSERIALIZER_JAR=/usr/share/java/libserializer-1.0.0.jar\n            elif test -f /usr/share/java/libserializer.jar; then\n                LIBSERIALIZER_JAR=/usr/share/java/libserializer.jar\n            else\n                AC_MSG_ERROR(libserializer.jar replacement not found.)\n            fi\n        elif ! test -f $LIBSERIALIZER_JAR; then\n                AC_MSG_ERROR(libserializer.jar not found.)\n        fi\n\n        if test -z $LIBBASE_JAR; then\n            if test -f /usr/share/java/libbase-1.0.0.jar; then\n                LIBBASE_JAR=/usr/share/java/libbase-1.0.0.jar\n            elif test -f /usr/share/java/libbase.jar; then\n                LIBBASE_JAR=/usr/share/java/libbase.jar\n            else\n                AC_MSG_ERROR(libbase.jar replacement not found.)\n            fi\n        elif ! test -f $LIBBASE_JAR; then\n            AC_MSG_ERROR(libbase.jar not found.)\n        fi\n\n    else\n        AC_MSG_RESULT([internal])\n        SYSTEM_JFREEREPORT=\n        BUILD_TYPE=\"$BUILD_TYPE JFREEREPORT\"\n        NEED_ANT=TRUE\n    fi\n    BUILD_TYPE=\"$BUILD_TYPE REPORTBUILDER\"\nelse\n    AC_MSG_RESULT([no])\n    ENABLE_REPORTBUILDER=\n    SYSTEM_JFREEREPORT=\nfi\nAC_SUBST(ENABLE_REPORTBUILDER)\nAC_SUBST(SYSTEM_JFREEREPORT)\nAC_SUBST(SAC_JAR)\nAC_SUBST(LIBXML_JAR)\nAC_SUBST(FLUTE_JAR)\nAC_SUBST(JFREEREPORT_JAR)\nAC_SUBST(LIBBASE_JAR)\nAC_SUBST(LIBLAYOUT_JAR)\nAC_SUBST(LIBLOADER_JAR)\nAC_SUBST(LIBFORMULA_JAR)\nAC_SUBST(LIBREPOSITORY_JAR)\nAC_SUBST(LIBFONTS_JAR)\nAC_SUBST(LIBSERIALIZER_JAR)\n\n# scripting provider for BeanShell?\nAC_MSG_CHECKING([whether to build support for scripts in BeanShell])\nif test \"${enable_scripting_beanshell}\" != \"no\" -a \"x$with_java\" != \"xno\"; then\n    AC_MSG_RESULT([yes])\n    ENABLE_SCRIPTING_BEANSHELL=TRUE\n\n    dnl ===================================================================\n    dnl Check for system beanshell\n    dnl ===================================================================\n    AC_MSG_CHECKING([which beanshell to use])\n    if test \"$with_system_beanshell\" = \"yes\"; then\n        AC_MSG_RESULT([external])\n        SYSTEM_BSH=TRUE\n        if test -z $BSH_JAR; then\n            BSH_JAR=/usr/share/java/bsh.jar\n        fi\n        if ! test -f $BSH_JAR; then\n            AC_MSG_ERROR(bsh.jar not found.)\n        fi\n    else\n        AC_MSG_RESULT([internal])\n        SYSTEM_BSH=\n        BUILD_TYPE=\"$BUILD_TYPE BSH\"\n    fi\nelse\n    AC_MSG_RESULT([no])\n    ENABLE_SCRIPTING_BEANSHELL=\n    SCPDEFS=\"$SCPDEFS -DWITHOUT_SCRIPTING_BEANSHELL\"\nfi\nAC_SUBST(ENABLE_SCRIPTING_BEANSHELL)\nAC_SUBST(SYSTEM_BSH)\nAC_SUBST(BSH_JAR)\n\n# scripting provider for JavaScript?\nAC_MSG_CHECKING([whether to build support for scripts in JavaScript])\nif test \"${enable_scripting_javascript}\" != \"no\" -a \"x$with_java\" != \"xno\"; then\n    AC_MSG_RESULT([yes])\n    ENABLE_SCRIPTING_JAVASCRIPT=TRUE\n\n    dnl ===================================================================\n    dnl Check for system rhino\n    dnl ===================================================================\n    AC_MSG_CHECKING([which rhino to use])\n    if test \"$with_system_rhino\" = \"yes\"; then\n        AC_MSG_RESULT([external])\n        SYSTEM_RHINO=TRUE\n        if test -z $RHINO_JAR; then\n            RHINO_JAR=/usr/share/java/js.jar\n        fi\n        if ! test -f $RHINO_JAR; then\n            AC_MSG_ERROR(js.jar not found.)\n        fi\n    else\n        AC_MSG_RESULT([internal])\n        SYSTEM_RHINO=\n        BUILD_TYPE=\"$BUILD_TYPE RHINO\"\n        NEED_ANT=TRUE\n    fi\nelse\n    AC_MSG_RESULT([no])\n    ENABLE_SCRIPTING_JAVASCRIPT=\n    SCPDEFS=\"$SCPDEFS -DWITHOUT_SCRIPTING_JAVASCRIPT\"\nfi\nAC_SUBST(ENABLE_SCRIPTING_JAVASCRIPT)\nAC_SUBST(SYSTEM_RHINO)\nAC_SUBST(RHINO_JAR)\n\n# This is only used in Qt5/Qt6/KF5/KF6 checks to determine if /usr/lib64\n# paths should be added to library search path. So let's put all 64-bit\n# platforms there.\nsupports_multilib=\ncase \"$host_cpu\" in\nx86_64 | powerpc64 | powerpc64le | s390x | aarch64 | mips64 | mips64el | loongarch64 | riscv64)\n    if test \"$SAL_TYPES_SIZEOFLONG\" = \"8\"; then\n        supports_multilib=\"yes\"\n    fi\n    ;;\n*)\n    ;;\nesac\n\ndnl ===================================================================\ndnl QT5 Integration\ndnl ===================================================================\n\nQT5_CFLAGS=\"\"\nQT5_LIBS=\"\"\nQT5_GOBJECT_CFLAGS=\"\"\nQT5_GOBJECT_LIBS=\"\"\nQT5_HAVE_GOBJECT=\"\"\nQT5_PLATFORMS_SRCDIR=\"\"\nif test \\( \"$test_kf5\" = \"yes\" -a \"$ENABLE_KF5\" = \"TRUE\" \\) -o \\\n        \\( \"$test_qt5\" = \"yes\" -a \"$ENABLE_QT5\" = \"TRUE\" \\) -o \\\n        \\( \"$test_gtk3_kde5\" = \"yes\" -a \"$ENABLE_GTK3_KDE5\" = \"TRUE\" \\)\nthen\n    qt5_incdirs=\"$QT5INC /usr/include/qt5 /usr/include $x_includes\"\n    qt5_libdirs=\"$QT5LIB /usr/lib/qt5 /usr/lib $x_libraries\"\n\n    if test -n \"$supports_multilib\"; then\n        qt5_libdirs=\"$qt5_libdirs /usr/lib64/qt5 /usr/lib64/qt /usr/lib64\"\n    fi\n\n    qt5_test_include=\"QtWidgets/qapplication.h\"\n    if test \"$_os\" = \"Emscripten\"; then\n        qt5_test_library=\"libQt5Widgets.a\"\n    else\n        qt5_test_library=\"libQt5Widgets.so\"\n    fi\n\n    dnl Check for qmake5\n    if test -n \"$QT5DIR\"; then\n        AC_PATH_PROG(QMAKE5, [qmake], no, [$QT5DIR/bin])\n    else\n        AC_PATH_PROGS(QMAKE5, [qmake-qt5 qmake], no)\n    fi\n    if test \"$QMAKE5\" = \"no\"; then\n        AC_MSG_ERROR([Qmake not found.  Please specify the root of your Qt5 installation by exporting QT5DIR before running \"configure\".])\n    else\n        qmake5_test_ver=\"`$QMAKE5 -v 2>&1 | $SED -n -e 's/^Using Qt version \\(5\\.[[0-9.]]\\+\\).*$/\\1/p'`\"\n        if test -z \"$qmake5_test_ver\"; then\n            AC_MSG_ERROR([Wrong qmake for Qt5 found. Please specify the root of your Qt5 installation by exporting QT5DIR before running \"configure\".])\n        fi\n        qmake5_minor_version=\"`echo $qmake5_test_ver | cut -d. -f2`\"\n        qt5_minimal_minor=\"15\"\n        if test \"$qmake5_minor_version\" -lt \"$qt5_minimal_minor\"; then\n            AC_MSG_ERROR([The minimal supported Qt5 version is 5.${qt5_minimal_minor}, but your 'qmake -v' reports Qt5 version $qmake5_test_ver.])\n        else\n            AC_MSG_NOTICE([Detected Qt5 version: $qmake5_test_ver])\n        fi\n    fi\n\n    qt5_incdirs=\"`$QMAKE5 -query QT_INSTALL_HEADERS` $qt5_incdirs\"\n    qt5_libdirs=\"`$QMAKE5 -query QT_INSTALL_LIBS` $qt5_libdirs\"\n    qt5_platformsdir=\"`$QMAKE5 -query QT_INSTALL_PLUGINS`/platforms\"\n    QT5_PLATFORMS_SRCDIR=\"$qt5_platformsdir\"\n\n    AC_MSG_CHECKING([for Qt5 headers])\n    qt5_incdir=\"no\"\n    for inc_dir in $qt5_incdirs; do\n        if test -r \"$inc_dir/$qt5_test_include\"; then\n            qt5_incdir=\"$inc_dir\"\n            break\n        fi\n    done\n    AC_MSG_RESULT([$qt5_incdir])\n    if test \"x$qt5_incdir\" = \"xno\"; then\n        AC_MSG_ERROR([Qt5 headers not found.  Please specify the root of your Qt5 installation by exporting QT5DIR before running \"configure\".])\n    fi\n    # check for scenario: qt5-qtbase-devel-*.86_64 installed but host is i686\n    AC_LANG_PUSH([C++])\n    save_CPPFLAGS=$CPPFLAGS\n    CPPFLAGS=\"${CPPFLAGS} -I${qt5_incdir}\"\n    AC_CHECK_HEADER(QtCore/qconfig.h, [],\n        [AC_MSG_ERROR(qconfig.h header not found.)], [])\n    CPPFLAGS=$save_CPPFLAGS\n    AC_LANG_POP([C++])\n\n    AC_MSG_CHECKING([for Qt5 libraries])\n    qt5_libdir=\"no\"\n    for lib_dir in $qt5_libdirs; do\n        if test -r \"$lib_dir/$qt5_test_library\"; then\n            qt5_libdir=\"$lib_dir\"\n            break\n        fi\n    done\n    AC_MSG_RESULT([$qt5_libdir])\n    if test \"x$qt5_libdir\" = \"xno\"; then\n        AC_MSG_ERROR([Qt5 libraries not found.  Please specify the root of your Qt5 installation by exporting QT5DIR before running \"configure\".])\n    fi\n\n    if test \"$_os\" = \"Emscripten\"; then\n        if test ! -f \"$QT5_PLATFORMS_SRCDIR\"/wasm_shell.html ; then\n            QT5_PLATFORMS_SRCDIR=\"${QT5_PLATFORMS_SRCDIR/plugins/src\\/plugins}/wasm\"\n        fi\n        if test ! -f \"${qt5_platformsdir}\"/libqwasm.a -o ! -f \"$QT5_PLATFORMS_SRCDIR\"/wasm_shell.html; then\n            AC_MSG_ERROR([No Qt5 WASM QPA plugin found in ${qt5_platformsdir} or ${QT5_PLATFORMS_SRCDIR}])\n        fi\n\n        EMSDK_LLVM_NM=\"$(em-config LLVM_ROOT)\"/llvm-nm\n        if ! test -x \"$EMSDK_LLVM_NM\"; then\n            AC_MSG_ERROR([Missing llvm-nm expected to be found at \"$EMSDK_LLVM_NM\".])\n        fi\n        if test ! -f \"${qt5_libdir}\"/libQt5Gui.a; then\n            AC_MSG_ERROR([No Qt5 WASM libQt5Gui.a in ${qt5_libdir}])\n        fi\n        QT5_WASM_SJLJ=\"`${EMSDK_LLVM_NM} \"${qt5_libdir}\"/libQt5Gui.a 2>/dev/null | $GREP emscripten_longjmp`\"\n        if test -n \"$QT5_WASM_SJLJ\"; then\n            AC_MSG_ERROR(['emscripten_longjmp' symbol found in libQt5Gui.a (missing '-s SUPPORT_LONGJMP=wasm'). See static/README.wasm.md.])\n        fi\n    fi\n\n    QT5_CFLAGS=\"-I$qt5_incdir -DQT_NO_VERSION_TAGGING\"\n    QT5_CFLAGS=$(printf '%s' \"$QT5_CFLAGS\" | sed -e \"s/-I/${ISYSTEM?}/g\")\n    QT5_LIBS=\"-L$qt5_libdir -lQt5Core -lQt5Gui -lQt5Widgets -lQt5Network\"\n    if test \"$_os\" = \"Emscripten\"; then\n        QT5_LIBS=\"$QT5_LIBS -lqtpcre2 -lQt5EventDispatcherSupport -lQt5FontDatabaseSupport -L${qt5_platformsdir} -lqwasm\"\n    fi\n\n    if test \"$USING_X11\" = TRUE; then\n        PKG_CHECK_MODULES(QT5_XCB,[xcb],,[AC_MSG_ERROR([XCB not found, which is needed for correct app grouping in X11.])])\n        QT5_CFLAGS=\"$QT5_CFLAGS $QT5_XCB_CFLAGS $QT5_XCB_ICCCM_CFLAGS\"\n        QT5_LIBS=\"$QT5_LIBS $QT5_XCB_LIBS $QT5_XCB_ICCCM_LIBS -lQt5X11Extras\"\n        QT5_USING_X11=1\n        AC_DEFINE(QT5_USING_X11)\n    fi\n\n    dnl Check for Meta Object Compiler\n\n    AC_PATH_PROGS( MOC5, [moc-qt5 moc], no, [`dirname $qt5_libdir`/bin:$QT5DIR/bin:$PATH])\n    if test \"$MOC5\" = \"no\"; then\n        AC_MSG_ERROR([Qt Meta Object Compiler not found.  Please specify\nthe root of your Qt installation by exporting QT5DIR before running \"configure\".])\n    fi\n\n    if test \"$test_gstreamer_1_0\" = yes; then\n        PKG_CHECK_MODULES(QT5_GOBJECT,[gobject-2.0], [\n                QT5_HAVE_GOBJECT=1\n                AC_DEFINE(QT5_HAVE_GOBJECT)\n            ],\n            AC_MSG_WARN([[No GObject found, can't use QWidget GStreamer sink on wayland!]])\n        )\n    fi\nfi\nAC_SUBST(QT5_CFLAGS)\nAC_SUBST(QT5_LIBS)\nAC_SUBST(MOC5)\nAC_SUBST(QT5_GOBJECT_CFLAGS)\nAC_SUBST(QT5_GOBJECT_LIBS)\nAC_SUBST(QT5_HAVE_GOBJECT)\nAC_SUBST(QT5_PLATFORMS_SRCDIR)\n\ndnl ===================================================================\ndnl QT6 Integration\ndnl ===================================================================\n\nQT6_CFLAGS=\"\"\nQT6_LIBS=\"\"\nQT6_PLATFORMS_SRCDIR=\"\"\nENABLE_QT6_MULTIMEDIA=\"\"\nif test \\( \"$test_kf6\" = \"yes\" -a \"$ENABLE_KF6\" = \"TRUE\" \\) -o \\\n        \\( \"$test_qt6\" = \"yes\" -a \"$ENABLE_QT6\" = \"TRUE\" \\)\nthen\n    qt6_incdirs=\"$QT6INC /usr/include/qt6 /usr/include $x_includes\"\n    qt6_libdirs=\"$QT6LIB /usr/lib/qt6 /usr/lib $x_libraries\"\n\n    if test -n \"$supports_multilib\"; then\n        qt6_libdirs=\"$qt6_libdirs /usr/lib64/qt6 /usr/lib64/qt /usr/lib64\"\n    fi\n\n    qt6_test_include=\"QtWidgets/qapplication.h\"\n    if test \"$_os\" = \"Emscripten\"; then\n        qt6_test_library=\"libQt6Widgets.a\"\n    else\n        qt6_test_library=\"libQt6Widgets.so\"\n    fi\n\n    dnl Check for qmake6\n    if test -n \"$QT6DIR\"; then\n        AC_PATH_PROG(QMAKE6, [qmake], no, [$QT6DIR/bin])\n    else\n        AC_PATH_PROGS(QMAKE6, [qmake-qt6 qmake6 qmake], no)\n    fi\n    if test \"$QMAKE6\" = \"no\"; then\n        AC_MSG_ERROR([Qmake not found.  Please specify the root of your Qt6 installation by exporting QT6DIR before running \"configure\".])\n    else\n        qmake6_test_ver=\"`$QMAKE6 -v 2>&1 | $SED -n -e 's/^Using Qt version \\(6\\.[[0-9.]]\\+\\).*$/\\1/p'`\"\n        if test -z \"$qmake6_test_ver\"; then\n            AC_MSG_ERROR([Wrong qmake for Qt6 found. Please specify the root of your Qt6 installation by exporting QT6DIR before running \"configure\".])\n        fi\n        AC_MSG_NOTICE([Detected Qt6 version: $qmake6_test_ver])\n    fi\n\n    qt6_incdirs=\"`$QMAKE6 -query QT_INSTALL_HEADERS` $qt6_incdirs\"\n    qt6_libdirs=\"`$QMAKE6 -query QT_INSTALL_LIBS` $qt6_libdirs\"\n    qt6_platformsdir=\"`$QMAKE6 -query QT_INSTALL_PLUGINS`/platforms\"\n    QT6_PLATFORMS_SRCDIR=\"$qt6_platformsdir\"\n\n    AC_MSG_CHECKING([for Qt6 headers])\n    qt6_incdir=\"no\"\n    for inc_dir in $qt6_incdirs; do\n        if test -r \"$inc_dir/$qt6_test_include\"; then\n            qt6_incdir=\"$inc_dir\"\n            break\n        fi\n    done\n    AC_MSG_RESULT([$qt6_incdir])\n    if test \"x$qt6_incdir\" = \"xno\"; then\n        AC_MSG_ERROR([Qt6 headers not found.  Please specify the root of your Qt6 installation by exporting QT6DIR before running \"configure\".])\n    fi\n    # check for scenario: qt6-qtbase-devel-*.86_64 installed but host is i686\n    AC_LANG_PUSH([C++])\n    save_CPPFLAGS=$CPPFLAGS\n    CPPFLAGS=\"${CPPFLAGS} -I${qt6_incdir}\"\n    AC_CHECK_HEADER(QtCore/qconfig.h, [],\n        [AC_MSG_ERROR(qconfig.h header not found.)], [])\n    CPPFLAGS=$save_CPPFLAGS\n    AC_LANG_POP([C++])\n\n    AC_MSG_CHECKING([for Qt6 libraries])\n    qt6_libdir=\"no\"\n    for lib_dir in $qt6_libdirs; do\n        if test -r \"$lib_dir/$qt6_test_library\"; then\n            qt6_libdir=\"$lib_dir\"\n            break\n        fi\n    done\n    AC_MSG_RESULT([$qt6_libdir])\n    if test \"x$qt6_libdir\" = \"xno\"; then\n        AC_MSG_ERROR([Qt6 libraries not found.  Please specify the root of your Qt6 installation by exporting QT6DIR before running \"configure\".])\n    fi\n\n    if test \"$_os\" = \"Emscripten\"; then\n        if test ! -f \"$QT6_PLATFORMS_SRCDIR\"/wasm_shell.html ; then\n            QT6_PLATFORMS_SRCDIR=\"${QT6_PLATFORMS_SRCDIR/plugins/src\\/plugins}/wasm\"\n        fi\n        if test ! -f \"${qt6_platformsdir}\"/libqwasm.a -o ! -f \"$QT6_PLATFORMS_SRCDIR\"/wasm_shell.html; then\n            AC_MSG_ERROR([No Qt6 WASM QPA plugin found in ${qt6_platformsdir} or ${QT6_PLATFORMS_SRCDIR}])\n        fi\n    fi\n\n    QT6_CFLAGS=\"-I$qt6_incdir -DQT_NO_VERSION_TAGGING\"\n    QT6_CFLAGS=$(printf '%s' \"$QT6_CFLAGS\" | sed -e \"s/-I/${ISYSTEM?}/g\")\n    QT6_LIBS=\"-L$qt6_libdir -lQt6Core -lQt6Gui -lQt6Widgets -lQt6Network\"\n    if test \"$_os\" = \"Emscripten\"; then\n        QT6_LIBS=\"$QT6_LIBS -lQt6BundledPcre2 -lQt6BundledZLIB -L${qt6_platformsdir} -lqwasm -sGL_ENABLE_GET_PROC_ADDRESS\"\n    else\n        if ! test \"$enable_qt6_multimedia\" = \"no\"; then\n            if ! test -r \"$qt6_incdir/QtMultimediaWidgets/QVideoWidget\"; then\n                AC_MSG_ERROR([Qt 6 QMultimedia not found.])\n                break\n            fi\n            ENABLE_QT6_MULTIMEDIA=TRUE\n            QT6_LIBS=\"$QT6_LIBS -lQt6Multimedia -lQt6MultimediaWidgets\"\n        fi\n    fi\n\n    if test \"$USING_X11\" = TRUE; then\n        PKG_CHECK_MODULES(QT6_XCB,[xcb],,[AC_MSG_ERROR([XCB not found, which is needed for key modifier handling in X11.])])\n        QT6_CFLAGS=\"$QT6_CFLAGS $QT6_XCB_CFLAGS\"\n        QT6_LIBS=\"$QT6_LIBS $QT6_XCB_LIBS\"\n        QT6_USING_X11=1\n        AC_DEFINE(QT6_USING_X11)\n    fi\n\n    dnl Check for Meta Object Compiler\n\n    for lib_dir in $qt6_libdirs; do\n        if test -z \"$qt6_libexec_dirs\"; then\n            qt6_libexec_dirs=\"$lib_dir/libexec\"\n        else\n            qt6_libexec_dirs=\"$qt6_libexec_dirs:$lib_dir/libexec\"\n        fi\n    done\n    AC_PATH_PROGS( MOC6, [moc-qt6 moc], no, [`dirname $qt6_libdir`/libexec:$QT6DIR/libexec:$qt6_libexec_dirs:`echo $qt6_libdirs | $SED -e 's/ /:/g'`:$PATH])\n    if test \"$MOC6\" = \"no\"; then\n        AC_MSG_ERROR([Qt Meta Object Compiler not found.  Please specify\nthe root of your Qt installation by exporting QT6DIR before running \"configure\".])\n    else\n        moc6_test_ver=\"`$MOC6 -v 2>&1 | $SED -n -e 's/^moc \\(6.*\\)/\\1/p'`\"\n        if test -z \"$moc6_test_ver\"; then\n            AC_MSG_ERROR([Wrong moc for Qt6 found.])\n        fi\n        AC_MSG_NOTICE([Detected moc version: $moc_test_ver])\n    fi\nfi\nAC_SUBST(QT6_CFLAGS)\nAC_SUBST(QT6_LIBS)\nAC_SUBST(MOC6)\nAC_SUBST(QT6_PLATFORMS_SRCDIR)\nAC_SUBST(ENABLE_QT6_MULTIMEDIA)\n\ndnl ===================================================================\ndnl KF5 Integration\ndnl ===================================================================\n\nKF5_CFLAGS=\"\"\nKF5_LIBS=\"\"\nKF5_CONFIG=\"kf5-config\"\nif test \\( \"$test_kf5\" = \"yes\" -a \"$ENABLE_KF5\" = \"TRUE\" \\) -o \\\n        \\( \"$test_gtk3_kde5\" = \"yes\" -a \"$ENABLE_GTK3_KDE5\" = \"TRUE\" \\)\nthen\n    if test \"$OS\" = \"HAIKU\"; then\n        haiku_arch=\"`echo $RTL_ARCH | tr X x`\"\n        kf5_haiku_incdirs=\"`findpaths -c ' ' -a $haiku_arch B_FIND_PATH_HEADERS_DIRECTORY`\"\n        kf5_haiku_libdirs=\"`findpaths -c ' ' -a $haiku_arch B_FIND_PATH_DEVELOP_LIB_DIRECTORY`\"\n    fi\n\n    kf5_incdirs=\"$KF5INC /usr/include $kf5_haiku_incdirs $x_includes\"\n    kf5_libdirs=\"$KF5LIB /usr/lib /usr/lib/kf5 /usr/lib/kf5/devel $kf5_haiku_libdirs $x_libraries\"\n    if test -n \"$supports_multilib\"; then\n        kf5_libdirs=\"$kf5_libdirs /usr/lib64 /usr/lib64/kf5 /usr/lib64/kf5/devel\"\n    fi\n\n    kf5_test_include=\"KF5/KIOFileWidgets/KFileWidget\"\n    kf5_test_library=\"libKF5KIOFileWidgets.so\"\n    kf5_libdirs=\"$qt5_libdir $kf5_libdirs\"\n\n    dnl kf5 KDE4 support compatibility installed\n    AC_PATH_PROG( KF5_CONFIG, $KF5_CONFIG, no, )\n    if test \"$KF5_CONFIG\" != \"no\"; then\n        kf5_incdirs=\"`$KF5_CONFIG --path include` $kf5_incdirs\"\n        kf5_libdirs=\"`$KF5_CONFIG --path lib` $kf5_libdirs\"\n    fi\n\n    dnl Check for KF5 headers\n    AC_MSG_CHECKING([for KF5 headers])\n    kf5_incdir=\"no\"\n    for kf5_check in $kf5_incdirs; do\n        if test -r \"$kf5_check/$kf5_test_include\"; then\n            kf5_incdir=\"$kf5_check/KF5\"\n            break\n        fi\n    done\n    AC_MSG_RESULT([$kf5_incdir])\n    if test \"x$kf5_incdir\" = \"xno\"; then\n        AC_MSG_ERROR([KF5 headers not found.  Please specify the root of your KF5 installation by exporting KF5DIR before running \"configure\".])\n    fi\n\n    dnl Check for KF5 libraries\n    AC_MSG_CHECKING([for KF5 libraries])\n    kf5_libdir=\"no\"\n    for kf5_check in $kf5_libdirs; do\n        if test -r \"$kf5_check/$kf5_test_library\"; then\n            kf5_libdir=\"$kf5_check\"\n            break\n        fi\n    done\n\n    AC_MSG_RESULT([$kf5_libdir])\n    if test \"x$kf5_libdir\" = \"xno\"; then\n        AC_MSG_ERROR([KF5 libraries not found.  Please specify the root of your KF5 installation by exporting KF5DIR before running \"configure\".])\n    fi\n\n    KF5_CFLAGS=\"-I$kf5_incdir -I$kf5_incdir/KCoreAddons -I$kf5_incdir/KI18n -I$kf5_incdir/KConfigCore -I$kf5_incdir/KWindowSystem -I$kf5_incdir/KIOCore -I$kf5_incdir/KIOWidgets -I$kf5_incdir/KIOFileWidgets -I$qt5_incdir -I$qt5_incdir/QtCore -I$qt5_incdir/QtGui -I$qt5_incdir/QtWidgets -I$qt5_incdir/QtNetwork -DQT_NO_VERSION_TAGGING\"\n    KF5_LIBS=\"-L$kf5_libdir -lKF5CoreAddons -lKF5I18n -lKF5ConfigCore -lKF5WindowSystem -lKF5KIOCore -lKF5KIOWidgets -lKF5KIOFileWidgets -L$qt5_libdir -lQt5Core -lQt5Gui -lQt5Widgets -lQt5Network\"\n    KF5_CFLAGS=$(printf '%s' \"$KF5_CFLAGS\" | sed -e \"s/-I/${ISYSTEM?}/g\")\n\n    if test \"$USING_X11\" = TRUE; then\n        KF5_LIBS=\"$KF5_LIBS -lQt5X11Extras\"\n    fi\n\n    AC_LANG_PUSH([C++])\n    save_CXXFLAGS=$CXXFLAGS\n    CXXFLAGS=\"$CXXFLAGS $KF5_CFLAGS\"\n    AC_MSG_CHECKING([whether KDE is >= 5.0])\n       AC_COMPILE_IFELSE([AC_LANG_SOURCE([[\n#include <kcoreaddons_version.h>\n\nint main(int argc, char **argv) {\n       static_assert(KCOREADDONS_VERSION_MAJOR == 5);\n       return 0;\n}\n       ]])],[AC_MSG_RESULT([yes])],[AC_MSG_ERROR([KDE version too old])],[])\n    CXXFLAGS=$save_CXXFLAGS\n    AC_LANG_POP([C++])\nfi\nAC_SUBST(KF5_CFLAGS)\nAC_SUBST(KF5_LIBS)\n\ndnl ===================================================================\ndnl KF6 Integration\ndnl ===================================================================\n\nKF6_CFLAGS=\"\"\nKF6_LIBS=\"\"\nif test \\( \"$test_kf6\" = \"yes\" -a \"$ENABLE_KF6\" = \"TRUE\" \\)\nthen\n    if test \"$OS\" = \"HAIKU\"; then\n        haiku_arch=\"`echo $RTL_ARCH | tr X x`\"\n        kf6_haiku_incdirs=\"`findpaths -c ' ' -a $haiku_arch B_FIND_PATH_HEADERS_DIRECTORY`\"\n        kf6_haiku_libdirs=\"`findpaths -c ' ' -a $haiku_arch B_FIND_PATH_DEVELOP_LIB_DIRECTORY`\"\n    fi\n\n    kf6_incdirs=\"$KF6INC /usr/include $kf6_haiku_incdirs $x_includes\"\n    kf6_libdirs=\"$KF6LIB /usr/lib /usr/lib/kf6 /usr/lib/kf6/devel $kf6_haiku_libdirs $x_libraries\"\n    if test -n \"$supports_multilib\"; then\n        kf6_libdirs=\"$kf6_libdirs /usr/lib64 /usr/lib64/kf6 /usr/lib64/kf6/devel\"\n    fi\n\n    kf6_test_include=\"KF6/KIOFileWidgets/KFileWidget\"\n    kf6_test_library=\"libKF6KIOFileWidgets.so\"\n    kf6_libdirs=\"$qt6_libdir $kf6_libdirs\"\n\n    dnl Check for KF6 headers\n    AC_MSG_CHECKING([for KF6 headers])\n    kf6_incdir=\"no\"\n    for kf6_check in $kf6_incdirs; do\n        if test -r \"$kf6_check/$kf6_test_include\"; then\n            kf6_incdir=\"$kf6_check/KF6\"\n            break\n        fi\n    done\n    AC_MSG_RESULT([$kf6_incdir])\n    if test \"x$kf6_incdir\" = \"xno\"; then\n        AC_MSG_ERROR([KF6 headers not found.  Please specify the root of your KF6 installation by exporting KF6DIR before running \"configure\".])\n    fi\n\n    dnl Check for KF6 libraries\n    AC_MSG_CHECKING([for KF6 libraries])\n    kf6_libdir=\"no\"\n    for kf6_check in $kf6_libdirs; do\n        if test -r \"$kf6_check/$kf6_test_library\"; then\n            kf6_libdir=\"$kf6_check\"\n            break\n        fi\n    done\n\n    AC_MSG_RESULT([$kf6_libdir])\n    if test \"x$kf6_libdir\" = \"xno\"; then\n        AC_MSG_ERROR([KF6 libraries not found.  Please specify the root of your KF6 installation by exporting KF6DIR before running \"configure\".])\n    fi\n\n    KF6_CFLAGS=\"-I$kf6_incdir -I$kf6_incdir/KCoreAddons -I$kf6_incdir/KI18n -I$kf6_incdir/KConfig -I$kf6_incdir/KConfigCore -I$kf6_incdir/KWindowSystem -I$kf6_incdir/KIO -I$kf6_incdir/KIOCore -I$kf6_incdir/KIOWidgets -I$kf6_incdir/KIOFileWidgets -I$qt6_incdir -I$qt6_incdir/QtCore -I$qt6_incdir/QtGui -I$qt6_incdir/QtWidgets -I$qt6_incdir/QtNetwork -DQT_NO_VERSION_TAGGING\"\n    KF6_LIBS=\"-L$kf6_libdir -lKF6CoreAddons -lKF6I18n -lKF6ConfigCore -lKF6WindowSystem -lKF6KIOCore -lKF6KIOWidgets -lKF6KIOFileWidgets -L$qt6_libdir -lQt6Core -lQt6Gui -lQt6Widgets -lQt6Network\"\n    KF6_CFLAGS=$(printf '%s' \"$KF6_CFLAGS\" | sed -e \"s/-I/${ISYSTEM?}/g\")\n\n    AC_LANG_PUSH([C++])\n    save_CXXFLAGS=$CXXFLAGS\n    CXXFLAGS=\"$CXXFLAGS $KF6_CFLAGS\"\n    dnl KF6 development version as of 2023-06 uses version number 5.240\n    AC_MSG_CHECKING([whether KDE Frameworks version is >= 6.0])\n       AC_COMPILE_IFELSE([AC_LANG_SOURCE([[\n#include <kcoreaddons_version.h>\n\nint main(int argc, char **argv) {\n       static_assert(KCOREADDONS_VERSION_MAJOR == 6);\n       return 0;\n}\n       ]])],[AC_MSG_RESULT([yes])],[AC_MSG_ERROR([KDE version too old])],[])\n    CXXFLAGS=$save_CXXFLAGS\n    AC_LANG_POP([C++])\nfi\nAC_SUBST(KF6_CFLAGS)\nAC_SUBST(KF6_LIBS)\n\nif test \"$enable_qt6_multimedia\" = \"yes\" -a \"$ENABLE_QT6\" != \"TRUE\"; then\n    AC_MSG_ERROR([--enable-qt6-multimedia requires --enable-qt6 or --enable-kf6])\nfi\n\ndnl ===================================================================\ndnl Test whether to include Evolution 2 support\ndnl ===================================================================\nAC_MSG_CHECKING([whether to enable evolution 2 support])\nif test \"$enable_evolution2\" = yes; then\n    AC_MSG_RESULT([yes])\n    PKG_CHECK_MODULES(GOBJECT, gobject-2.0)\n    GOBJECT_CFLAGS=$(printf '%s' \"$GOBJECT_CFLAGS\" | sed -e \"s/-I/${ISYSTEM?}/g\")\n    FilterLibs \"${GOBJECT_LIBS}\"\n    GOBJECT_LIBS=\"${filteredlibs}\"\n    ENABLE_EVOAB2=\"TRUE\"\nelse\n    AC_MSG_RESULT([no])\nfi\nAC_SUBST(ENABLE_EVOAB2)\nAC_SUBST(GOBJECT_CFLAGS)\nAC_SUBST(GOBJECT_LIBS)\n\ndnl ===================================================================\ndnl Test which themes to include\ndnl ===================================================================\nAC_MSG_CHECKING([which themes to include])\n# if none given use default subset of available themes\nif test \"x$with_theme\" = \"x\" -o \"x$with_theme\" = \"xyes\"; then\n    with_theme=\"breeze breeze_dark breeze_dark_svg breeze_svg colibre colibre_svg colibre_dark colibre_dark_svg elementary elementary_svg karasa_jaga karasa_jaga_svg sifr sifr_svg sifr_dark sifr_dark_svg sukapura sukapura_dark sukapura_dark_svg sukapura_svg\"\nfi\n\nWITH_THEMES=\"\"\nif test \"x$with_theme\" != \"xno\"; then\n    for theme in $with_theme; do\n        case $theme in\n        breeze|breeze_dark|breeze_dark_svg|breeze_svg|colibre|colibre_svg|colibre_dark|colibre_dark_svg|elementary|elementary_svg|karasa_jaga|karasa_jaga_svg|sifr|sifr_svg|sifr_dark|sifr_dark_svg|sukapura|sukapura_dark|sukapura_dark_svg|sukapura_svg) WITH_THEMES=\"${WITH_THEMES:+$WITH_THEMES }$theme\" ;;\n        *) AC_MSG_ERROR([Unknown value for --with-theme: $theme]) ;;\n        esac\n    done\nfi\nAC_MSG_RESULT([$WITH_THEMES])\nAC_SUBST([WITH_THEMES])\n\n###############################################################################\n# Extensions checking\n###############################################################################\nAC_MSG_CHECKING([for extensions integration])\nif test \"x$enable_extension_integration\" != \"xno\"; then\n    WITH_EXTENSION_INTEGRATION=TRUE\n    SCPDEFS=\"$SCPDEFS -DWITH_EXTENSION_INTEGRATION\"\n    AC_MSG_RESULT([yes, use integration])\nelse\n    WITH_EXTENSION_INTEGRATION=\n    AC_MSG_RESULT([no, do not integrate])\nfi\nAC_SUBST(WITH_EXTENSION_INTEGRATION)\n\ndnl Should any extra extensions be included?\ndnl There are standalone tests for each of these below.\nWITH_EXTRA_EXTENSIONS=\nAC_SUBST([WITH_EXTRA_EXTENSIONS])\n\nlibo_CHECK_EXTENSION([Numbertext],[NUMBERTEXT],[numbertext],[numbertext],[b7cae45ad2c23551fd6ccb8ae2c1f59e-numbertext_0.9.5.oxt])\nif test \"x$with_java\" != \"xno\"; then\n    libo_CHECK_EXTENSION([NLPSolver],[NLPSOLVER],[nlpsolver],[nlpsolver],[])\nfi\n\nAC_MSG_CHECKING([whether to build opens___.ttf])\nif test \"$enable_build_opensymbol\" = \"yes\"; then\n    AC_MSG_RESULT([yes])\n    AC_PATH_PROG(FONTFORGE, fontforge)\n    if test -z \"$FONTFORGE\"; then\n        AC_MSG_ERROR([fontforge not installed])\n    fi\nelse\n    AC_MSG_RESULT([no])\n    BUILD_TYPE=\"$BUILD_TYPE OPENSYMBOL\"\nfi\nAC_SUBST(FONTFORGE)\n\ndnl ===================================================================\ndnl Test whether to include fonts\ndnl ===================================================================\nWITH_FONTS=\nWITH_DOCREPAIR_FONTS=\nAC_MSG_CHECKING([whether to include third-party fonts])\nif test \"$with_fonts\" != \"no\"; then\n    AC_MSG_RESULT([yes])\n    WITH_FONTS=TRUE\n    BUILD_TYPE=\"$BUILD_TYPE MORE_FONTS\"\n    AC_DEFINE(HAVE_MORE_FONTS)\n    AC_MSG_CHECKING([whether to include 'docrepair' fonts])\n    if test \"$with_docrepair_fonts\" = \"yes\"; then\n        AC_MSG_RESULT([yes])\n        WITH_DOCREPAIR_FONTS=TRUE\n    fi\nelse\n    AC_MSG_RESULT([no])\n    SCPDEFS=\"$SCPDEFS -DWITHOUT_FONTS\"\nfi\nAC_SUBST(WITH_FONTS)\nAC_SUBST(WITH_DOCREPAIR_FONTS)\n\ndnl ===================================================================\ndnl Test whether to enable online update service\ndnl ===================================================================\nAC_MSG_CHECKING([whether to enable online update])\nENABLE_ONLINE_UPDATE=\nif test \"$enable_online_update\" = \"\"; then\n    AC_MSG_RESULT([no])\nelse\n    if test \"$enable_online_update\" = \"mar\"; then\n        AC_MSG_ERROR([--enable-online-update=mar is deprecated, use --enable-online-update-mar instead])\n    elif test \"$enable_online_update\" = \"yes\"; then\n        if test \"$enable_curl\" != \"yes\"; then\n            AC_MSG_ERROR([--disable-online-update must be used when --disable-curl is used])\n        fi\n        AC_MSG_RESULT([yes])\n        ENABLE_ONLINE_UPDATE=\"TRUE\"\n    else\n        AC_MSG_RESULT([no])\n    fi\nfi\nAC_SUBST(ENABLE_ONLINE_UPDATE)\n\n\ndnl ===================================================================\ndnl Test whether to enable mar online update service\ndnl ===================================================================\nAC_MSG_CHECKING([whether to enable mar online update])\nENABLE_ONLINE_UPDATE_MAR=\nif test \"$enable_online_update_mar\" = yes; then\n    AC_MSG_RESULT([yes])\n    BUILD_TYPE=\"$BUILD_TYPE ONLINEUPDATE\"\n    ENABLE_ONLINE_UPDATE_MAR=\"TRUE\"\n "
        },
        {
          "name": "connectivity",
          "type": "tree",
          "content": null
        },
        {
          "name": "cpp.hint",
          "type": "blob",
          "size": 2.734375,
          "content": "// Hint files help the Visual Studio IDE interpret Visual C++ identifiers\n// such as names of functions and macros.\n// For more information see https://go.microsoft.com/fwlink/?linkid=865984\n\n#define SAL_THROW_EXTERN_C()\n\n#define SAL_UNUSED_PARAMETER\n\n#define SAL_LOPLUGIN_ANNOTATE(id)\n\n#define DECL_LINK(Member, ArgType, RetType) \\\n    RetType Member(ArgType)\n\n#define DECL_STATIC_LINK(Class, Member, ArgType, RetType) \\\n    static RetType Member(Class *, ArgType)\n\n#define DECL_DLLPRIVATE_LINK(Member, ArgType, RetType) \\\n    SAL_DLLPRIVATE RetType Member(ArgType)\n\n#define DECL_DLLPRIVATE_STATIC_LINK(Class, Member, ArgType, RetType) \\\n    SAL_DLLPRIVATE static RetType Member(Class *, ArgType)\n\n#define IMPL_LINK(Class, Member, ArgType, ArgName, RetType) \\\n    RetType Class::Member(ArgType ArgName)\n\n#define IMPL_LINK_NOARG(Class, Member, ArgType, RetType) \\\n    RetType Class::Member(ArgType)\n\n#define IMPL_STATIC_LINK(Class, Member, ArgType, ArgName, RetType) \\\n    RetType Class::Member(Class *, ArgType ArgName)\n\n#define IMPL_STATIC_LINK_NOARG(Class, Member, ArgType, RetType) \\\n    RetType Class::Member(Class *, ArgType)\n\n// From workdir/UnpackedTarball/cppunit/include/cppunit/plugin/TestPlugIn.h\n\n#define CPPUNIT_PLUGIN_IMPLEMENT()\n\n// From workdir/UnpackedTarball/cppunit/include/cppunit/extensions/HelperMacros.h\n// To allow searching for the test names, where they are defined using the macros\n\n#define CPPUNIT_TEST_FIXTURE(TestClass, TestName)                              \\\n    class TestName : public TestClass                                          \\\n    {                                                                          \\\n    public:                                                                    \\\n        void TestBody();                                                       \\\n    };                                                                         \\\n    void TestName::TestBody()\n\n// From sw/qa/inc/swmodeltestbase.hxx\n// To allow searching for the test names, where they are defined using the macros\n#define DECLARE_SW_ROUNDTRIP_TEST(TestName, filename, password, BaseClass) \\\n    class TestName : public BaseClass {                                    \\\n    public:                                                                \\\n        void verify() override;                                            \\\n    };                                                                     \\\n    void TestName::verify()\n\n#define DECLARE_OOXMLEXPORT_TEST(TestName, filename) DECLARE_SW_ROUNDTRIP_TEST(TestName, filename, nullptr, Test)\n#define DECLARE_ODFEXPORT_TEST(TestName, filename) DECLARE_SW_ROUNDTRIP_TEST(TestName, filename, nullptr, Test)\n#define DECLARE_WW8EXPORT_TEST(TestName, filename) DECLARE_SW_ROUNDTRIP_TEST(TestName, filename, nullptr, Test)\n"
        },
        {
          "name": "cppcanvas",
          "type": "tree",
          "content": null
        },
        {
          "name": "cppu",
          "type": "tree",
          "content": null
        },
        {
          "name": "cppuhelper",
          "type": "tree",
          "content": null
        },
        {
          "name": "cpputools",
          "type": "tree",
          "content": null
        },
        {
          "name": "cui",
          "type": "tree",
          "content": null
        },
        {
          "name": "dbaccess",
          "type": "tree",
          "content": null
        },
        {
          "name": "desktop",
          "type": "tree",
          "content": null
        },
        {
          "name": "dictionaries",
          "type": "commit",
          "content": null
        },
        {
          "name": "distro-configs",
          "type": "tree",
          "content": null
        },
        {
          "name": "docmodel",
          "type": "tree",
          "content": null
        },
        {
          "name": "download.lst",
          "type": "blob",
          "size": 31.0458984375,
          "content": "# For the Flatpak build (which cannot execute `make fetch` from its---sandboxed---build\n# environment), there is a solenv/flatpak-manifest.in that references these variables.\n# There is a script solenv/bin/generate-flatpak-manifest.sh to substitute the variables,\n# so upgrading to a new version only requires changes in download.lst.\n\nABW_SHA256SUM := e763a9dc21c3d2667402d66e202e3f8ef4db51b34b79ef41f56cacb86dcd6eed\nABW_TARBALL := libabw-0.1.3.tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nARGON2_SHA256SUM := daf972a89577f8772602bf2eb38b6a3dd3d922bf5724d45e7f9589b5e830442c\nARGON2_TARBALL := phc-winner-argon2-20190702.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\n# please repack the tarball using external/boost/repack_tarball.sh\nBOOST_SHA256SUM := efd6d4ce7e8571ba86f77a30bee2d3dd8dccd306721351464fc6998dd00b0c8c\nBOOST_TARBALL := boost_1_86_0.tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nBOX2D_SHA256SUM := d6b4650ff897ee1ead27cf77a5933ea197cbeef6705638dd181adc2e816b23c2\nBOX2D_TARBALL := box2d-2.4.1.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nBREAKPAD_SHA256SUM := c44a2e898895cfc13b42d2371ba4b88b0777d7782214d6cdc91c33720f3b0d91\nBREAKPAD_TARBALL := breakpad-b324760c7f53667af128a6b77b790323da04fcb9.tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nBSH_SHA256SUM := 2248387ceaa319840434a3547a8b2fec12f95a8418ee039ce5ff5726053a139c\nBSH_TARBALL := bsh-2.1.1-src.zip\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nBZIP2_SHA256SUM := ab5a03176ee106d3f0fa90e381da478ddae405918153cca248e682cd0c4a2269\nBZIP2_TARBALL := bzip2-1.0.8.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nCAIRO_SHA256SUM := 4eebc4c2bad0402bc3f501db184417094657d111fb6c06f076a82ea191fe1faf\nCAIRO_VERSION_MICRO := 6\nCAIRO_TARBALL := cairo-1.17.$(CAIRO_VERSION_MICRO).tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nCDR_SHA256SUM := ced677c8300b29c91d3004bb1dddf0b99761bf5544991c26c2ee8f427e87193c\nCDR_TARBALL := libcdr-0.1.8.tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nCLUCENE_SHA256SUM := ddfdc433dd8ad31b5c5819cc4404a8d2127472a3b720d3e744e8c51d79732eab\nCLUCENE_TARBALL := 48d647fbd8ef8889e5a7f422c1bfda94-clucene-core-2.3.3.4.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nDRAGONBOX_SHA256SUM := 09d63b05e9c594ec423778ab59b7a5aa1d76fdd71d25c7048b0258c4ec9c3384\nDRAGONBOX_TARBALL := dragonbox-1.1.3.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nDTOA_SHA256SUM := 0082d0684f7db6f62361b76c4b7faba19e0c7ce5cb8e36c4b65fea8281e711b4\nDTOA_TARBALL := dtoa-20180411.tgz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nLIBCMIS_SHA256SUM := 1b5c2d7258ff93eb5f9958ff0e4dfd7332dc75a071bb717dde2217a26602a644\nLIBCMIS_TARBALL := libcmis-0.6.2.tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nCOINMP_SHA256SUM := 3459fb0ccbdd39342744684338984ac4cc153fb0434f4cae8cf74bd67490a38d\nCOINMP_TARBALL := CoinMP-1.8.4.tgz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nCPPUNIT_SHA256SUM := 89c5c6665337f56fd2db36bc3805a5619709d51fb136e51937072f63fcc717a7\nCPPUNIT_TARBALL := cppunit-1.15.1.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nCURL_SHA256SUM := c7ca7db48b0909743eaef34250da02c19bc61d4f1dcedd6603f109409536ab56\nCURL_TARBALL := curl-8.11.1.tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nEBOOK_SHA256SUM := 7e8d8ff34f27831aca3bc6f9cc532c2f90d2057c778963b884ff3d1e34dfe1f9\nEBOOK_TARBALL := libe-book-0.1.3.tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nEPOXY_SHA256SUM := a7ced37f4102b745ac86d6a70a9da399cc139ff168ba6b8002b4d8d43c900c15\nEPOXY_TARBALL := libepoxy-1.5.10.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nEPM_SHA256SUM := b3fc4c5445de6c9a801504a3ea3efb2d4ea9d5a622c9427e716736e7713ddb91\nEPM_TARBALL := 3ade8cfe7e59ca8e65052644fed9fca4-epm-3.7.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nEPUBGEN_SHA256SUM := 03e084b994cbeffc8c3dd13303b2cb805f44d8f2c3b79f7690d7e3fc7f6215ad\nEPUBGEN_TARBALL := libepubgen-0.1.1.tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nETONYEK_SHA256SUM := b9fa82fbeb8cb7a701101060e4f3e1e4ef7c38f574b2859d3ecbe43604c21f83\nETONYEK_VERSION_MICRO := 12\nETONYEK_TARBALL := libetonyek-0.1.$(ETONYEK_VERSION_MICRO).tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nEXPAT_SHA256SUM := a695629dae047055b37d50a0ff4776d1d45d0a4c842cf4ccee158441f55ff7ee\nEXPAT_TARBALL := expat-2.6.4.tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFIREBIRD_SHA256SUM := acb85cedafa10ce106b1823fb236b1b3e5d942a5741e8f8435cc8ccfec0afe76\nFIREBIRD_TARBALL := Firebird-3.0.7.33374-0.tar.bz2\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFONTCONFIG_SHA256SUM := 63a0658d0e06e0fa886106452b58ef04f21f58202ea02a94c39de0d3335d7c0e\nFONTCONFIG_TARBALL := fontconfig-2.15.0.tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\n# There are sadly now two Caladea fonts with different metrics, see:\n#  https://bugzilla.redhat.com/show_bug.cgi?id=2162532\n#  https://github.com/huertatipografica/Caladea/issues/4\n# be careful on potential upgrades\nFONT_CALADEA_SHA256SUM := c48d1c2fd613c9c06c959c34da7b8388059e2408d2bb19845dc3ed35f76e4d09\nFONT_CALADEA_TARBALL := 368f114c078f94214a308a74c7e991bc-crosextrafonts-20130214.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFONT_CARLITO_SHA256SUM := 4bd12b6cbc321c1cf16da76e2c585c925ce956a08067ae6f6c64eff6ccfdaf5a\nFONT_CARLITO_TARBALL := c74b7223abe75949b4af367942d96c7a-crosextrafonts-carlito-20130920.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFONT_DEJAVU_SHA256SUM := 7576310b219e04159d35ff61dd4a4ec4cdba4f35c00e002a136f00e96a908b0a\nFONT_DEJAVU_TARBALL := 33e1e61fab06a547851ed308b4ffef42-dejavu-fonts-ttf-2.37.zip\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFONT_GENTIUM_SHA256SUM := 2f1a2c5491d7305dffd3520c6375d2f3e14931ee35c6d8ae1e8f098bf1a7b3cc\nFONT_GENTIUM_TARBALL := 1725634df4bb3dcb1b2c91a6175f8789-GentiumBasic_1102.zip\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFONT_LIBERATION_NARROW_SHA256SUM := 8879d89b5ff7b506c9fc28efc31a5c0b954bbe9333e66e5283d27d20a8519ea3\nFONT_LIBERATION_NARROW_TARBALL := liberation-narrow-fonts-ttf-1.07.6.tar.gz\nFONT_LIBERATION_SHA256SUM := 7191c669bf38899f73a2094ed00f7b800553364f90e2637010a69c0e268f25d0\nFONT_LIBERATION_TARBALL := liberation-fonts-ttf-2.1.5.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFONT_LINLIBERTINEG_SHA256SUM := 54adcb2bc8cac0927a647fbd9362f45eff48130ce6e2379dc3867643019e08c5\nFONT_LINLIBERTINEG_TARBALL := e7a384790b13c29113e22e596ade9687-LinLibertineG-20120116.zip\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFONT_NOTO_KUFI_ARABIC_SHA256SUM := 1b6880e4b8df09c3b9e246d6084bfd94bf32a0ffff60cf2dcffd3622d0e2d79f\nFONT_NOTO_KUFI_ARABIC_TARBALL := NotoKufiArabic-v2.109.zip\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFONT_NOTO_SANS_SHA256SUM := 0c34df072a3fa7efbb7cbf34950e1f971a4447cffe365d3a359e2d4089b958f5\nFONT_NOTO_SANS_TARBALL := NotoSans-v2.015.zip\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFONT_NOTO_SERIF_SHA256SUM := 0e9a43c8a4b94ac76f55069ed1d7385bbcaf6b99527a94deb5619e032b7e76c1\nFONT_NOTO_SERIF_TARBALL := NotoSerif-v2.015.zip\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFONT_NOTO_SERIF_HEBREW_SHA256SUM := 99523f4f21051495f18cbd5169ed0d1e9b395eefe770fece1844a4a7a00c46da\nFONT_NOTO_SERIF_HEBREW_TARBALL := NotoSerifHebrew-v2.004.zip\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFONT_NOTO_SANS_ARABIC_SHA256SUM := a5a34ac1ea01d0d71c083f99440ebfb1f64224474a0d88bb7ef0e2f8d9a996d2\nFONT_NOTO_SANS_ARABIC_TARBALL := NotoSansArabic-v2.010.zip\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFONT_NOTO_NASKH_ARABIC_SHA256SUM := 7a509e10c9c8d21f384a26807ef2f5fbbecec46fdb8626c5441bed6d894edb81\nFONT_NOTO_NASKH_ARABIC_TARBALL := NotoNaskhArabic-v2.019.zip\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFONT_NOTO_SANS_HEBREW_SHA256SUM := df0a71814b4e63644cf40fcc4529111b61266b7a2dafbe95068b29a7520cc3cb\nFONT_NOTO_SANS_HEBREW_TARBALL := NotoSansHebrew-v3.001.zip\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFONT_NOTO_SANS_ARMENIAN_SHA256SUM := eab89b99e134177ca6a3f9f0412a7cb812aafceb13175d686b4c45cb237f64ac\nFONT_NOTO_SANS_ARMENIAN_TARBALL := NotoSansArmenian-v2.008.zip\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFONT_NOTO_SERIF_ARMENIAN_SHA256SUM := b21c198a4c76ae598a304decefb3b5c2a4c2d4c3ae226728eff359185f291c6f\nFONT_NOTO_SERIF_ARMENIAN_TARBALL := NotoSerifArmenian-v2.008.zip\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFONT_NOTO_SANS_GEORGIAN_SHA256SUM := 10e85011008108308e6feab0408242acb07804da61ede3d3ff236461ae07ab1b\nFONT_NOTO_SANS_GEORGIAN_TARBALL := NotoSansGeorgian-v2.005.zip\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFONT_NOTO_SERIF_GEORGIAN_SHA256SUM := cfb41a264b97d463bab6807a5be937ba4a6ddcfa93d519a21b98b0ba73ca27d4\nFONT_NOTO_SERIF_GEORGIAN_TARBALL := NotoSerifGeorgian-v2.003.zip\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFONT_NOTO_SANS_LAO_SHA256SUM := 5a87c31b1a40ef8147c1e84437e5f0ceba2d4dbbfc0b56a65821ad29870da8c0\nFONT_NOTO_SANS_LAO_TARBALL := NotoSansLao-v2.003.zip\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFONT_NOTO_SERIF_LAO_SHA256SUM := e96a303d3347790b0ef3db274971a989a736ce766ec9ea1bea0e1458568a80b2\nFONT_NOTO_SERIF_LAO_TARBALL := NotoSerifLao-v2.003.zip\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFONT_NOTO_SANS_LISU_SHA256SUM := b12a1ff762680681b7ce4d98dd29a7f54d90f5bcadd10c955afc640a27b3a268\nFONT_NOTO_SANS_LISU_TARBALL := NotoSansLisu-v2.102.zip\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFONT_CULMUS_SHA256SUM := 6daed104481007752a76905000e71c0093c591c8ef3017d1b18222c277fc52e3\nFONT_CULMUS_TARBALL := culmus-0.140.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFONT_LIBRE_HEBREW_SHA256SUM := f596257c1db706ce35795b18d7f66a4db99d427725f20e9384914b534142579a\nFONT_LIBRE_HEBREW_TARBALL := libre-hebrew-1.0.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFONT_ALEF_SHA256SUM := b98b67602a2c8880a1770f0b9e37c190f29a7e2ade5616784f0b89fbdb75bf52\nFONT_ALEF_TARBALL := alef-1.001.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFONT_AMIRI_SHA256SUM := 926fe1bd7dfde8e55178281f645258bfced6420c951c6f2fd532fd21691bca30\nFONT_AMIRI_TARBALL := Amiri-1.000.zip\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFONT_REEM_SHA256SUM := 2359f036c7bddeb4d5529d7b3c9139c3288c920cc26053d417cdbb563eafe0a4\nFONT_REEM_TARBALL := ReemKufi-1.7.zip\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFONT_SCHEHERAZADE_SHA256SUM := 251c8817ceb87d9b661ce1d5b49e732a0116add10abc046be4b8ba5196e149b5\nFONT_SCHEHERAZADE_TARBALL := Scheherazade-2.100.zip\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFONT_AGDASIMA_TARBALL := Agdasima-2.002.zip\nFONT_AGDASIMA_SHA256SUM := b4c17499f8bc183320ffdcf1f8491c778dd68a237adc056dc08e1fcb2da488f3\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFONT_BACASIME_ANTIQUE_TARBALL := Bacasime_Antique-2.000.zip\nFONT_BACASIME_ANTIQUE_SHA256SUM := 81127cebc97d4ee0b950c2bc2d6be0ed29abfe0d5988435eb9a39e382557250a\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFONT_BELANOSIMA_TARBALL := Belanosima-2.000.zip\nFONT_BELANOSIMA_SHA256SUM := 9c30e9e7cdb0797b651113a77f6b789659b8d8598a466b2ba92754e9dec30449\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFONT_CAPRASIMO_TARBALL := Caprasimo-1.001.zip\nFONT_CAPRASIMO_SHA256SUM := f066d27cfc99b6601083be102d08b4039da8d2834e2795aabd890f16c6fd1b9b\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFONT_LUGRASIMO_TARBALL := Lugrasimo-1.001.zip\nFONT_LUGRASIMO_SHA256SUM := db24dff31e8ddf6a113556c947a219f9534b072852e9ce2079a08c94854a7503\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFONT_LUMANOSIMO_TARBALL := Lumanosimo-1.010.zip\nFONT_LUMANOSIMO_SHA256SUM := d4545ad6afded9a55d9a7728cfc7453cf5637861db87aafe0a730676a0cb960f\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFONT_LUNASIMA_TARBALL := Lunasima-2.009.zip\nFONT_LUNASIMA_SHA256SUM := 4302809cf4b95b481bec53de87484d919b391c90a518d065f6c775fd435a5393\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFREEHAND_SHA256SUM := 0e422d1564a6dbf22a9af598535425271e583514c0f7ba7d9091676420de34ac\nFREEHAND_TARBALL := libfreehand-0.1.2.tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFREETYPE_SHA256SUM := 0550350666d427c74daeb85d5ac7bb353acba5f76956395995311a9c6f063289\nFREETYPE_TARBALL := freetype-2.13.3.tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nFROZEN_SHA256SUM := ed8339c017d7c5fe019ac2c642477f435278f0dc643c1d69d3f3b1e95915e823\nFROZEN_TARBALL := frozen-1.2.0.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nGLM_SHA256SUM := 09c5716296787e1f7fcb87b1cbdbf26814ec1288ed6259ccd30d5d9795809fa5\nGLM_TARBALL := glm-1.0.1.zip\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nGPGME_SHA256SUM := ea05d0258e71061d61716584ec34cef59330a91340571edc46b78374973ba85f\nGPGME_TARBALL := gpgme-1.24.1.tar.bz2\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nGRAPHITE_SHA256SUM := b8e892d8627c41888ff121e921455b9e2d26836978f2359173d19825da62b8fc\nGRAPHITE_TARBALL := graphite2-minimal-1.3.14.tgz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nHARFBUZZ_SHA256SUM := 77e4f7f98f3d86bf8788b53e6832fb96279956e1c3961988ea3d4b7ca41ddc27\nHARFBUZZ_TARBALL := harfbuzz-8.5.0.tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nHSQLDB_SHA256SUM := d30b13f4ba2e3b6a2d4f020c0dee0a9fb9fc6fbcc2d561f36b78da4bf3802370\nHSQLDB_TARBALL := 17410483b5b5f267aa18b7e00b65e6e0-hsqldb_1_8_0.zip\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nHUNSPELL_SHA256SUM := 11ddfa39afe28c28539fe65fc4f1592d410c1e9b6dd7d8a91ca25d85e9ec65b8\nHUNSPELL_TARBALL := hunspell-1.7.2.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nHYPHEN_SHA256SUM := 304636d4eccd81a14b6914d07b84c79ebb815288c76fe027b9ebff6ff24d5705\nHYPHEN_TARBALL := 5ade6ae2a99bc1e9e57031ca88d36dad-hyphen-2.8.8.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nIACCESSIBLE2_SHA256SUM := 0e279003f5199f80031c6dcd08f79d6f65a0505139160e7df0d09b226bff4023\nIACCESSIBLE2_TARBALL := IAccessible2-1.3+git20231013.3d8c7f0.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nICU_SHA256SUM := cb968df3e4d2e87e8b11c49a5d01c787bd13b9545280fc6642f826527618caef\nICU_TARBALL := icu4c-75_1-src.tgz\nICU_DATA_SHA256SUM := a5104212dc317a64f9b035723ea706f2f4fd5a0f37b7923fae7aeb9d1d0061b1\nICU_DATA_TARBALL := icu4c-75_1-data.zip\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nJAVA_WEBSOCKET_SHA256SUM := f3ce29efde338707241d47ab4784b19a1e3658bfa0564b5bc5f80c27e5118728\nJAVA_WEBSOCKET_TARBALL := Java-WebSocket-1.6.0.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nJFREEREPORT_FLOW_ENGINE_SHA256SUM := 233f66e8d25c5dd971716d4200203a612a407649686ef3b52075d04b4c9df0dd\nJFREEREPORT_FLOW_ENGINE_TARBALL := ba2930200c9f019c2d93a8c88c651a0f-flow-engine-0.9.4.zip\nJFREEREPORT_FLUTE_SHA256SUM := 1b5b24f7bc543c0362b667692f78db8bab4ed6dafc6172f104d0bd3757d8a133\nJFREEREPORT_FLUTE_TARBALL := d8bd5eed178db6e2b18eeed243f85aa8-flute-1.1.6.zip\nJFREEREPORT_LIBBASE_SHA256SUM := 75c80359c9ce343c20aab8a36a45cb3b9ee7c61cf92c13ae45399d854423a9ba\nJFREEREPORT_LIBBASE_TARBALL := eeb2c7ddf0d302fba4bfc6e97eac9624-libbase-1.1.6.zip\nJFREEREPORT_LIBFONTS_SHA256SUM := e0531091787c0f16c83965fdcbc49162c059d7f0c64669e7f119699321549743\nJFREEREPORT_LIBFONTS_TARBALL := 3bdf40c0d199af31923e900d082ca2dd-libfonts-1.1.6.zip\nJFREEREPORT_LIBFORMULA_SHA256SUM := 5826d1551bf599b85742545f6e01a0079b93c1b2c8434bf409eddb3a29e4726b\nJFREEREPORT_LIBFORMULA_TARBALL := 3404ab6b1792ae5f16bbd603bd1e1d03-libformula-1.1.7.zip\nJFREEREPORT_LIBLAYOUT_SHA256SUM := e1fb87f3f7b980d33414473279615c4644027e013012d156efa538bc2b031772\nJFREEREPORT_LIBLAYOUT_TARBALL := db60e4fde8dd6d6807523deb71ee34dc-liblayout-0.2.10.zip\nJFREEREPORT_LIBLOADER_SHA256SUM := 3d853b19b1d94a6efa69e7af90f7f2b09ecf302913bee3da796c15ecfebcfac8\nJFREEREPORT_LIBLOADER_TARBALL := 97b2d4dba862397f446b217e2b623e71-libloader-1.1.6.zip\nJFREEREPORT_LIBREPOSITORY_SHA256SUM := abe2c57ac12ba45d83563b02e240fa95d973376de2f720aab8fe11f2e621c095\nJFREEREPORT_LIBREPOSITORY_TARBALL := 8ce2fcd72becf06c41f7201d15373ed9-librepository-1.1.6.zip\nJFREEREPORT_LIBSERIALIZER_SHA256SUM := 05640a1f6805b2b2d7e2cb9c50db9a5cb084e3c52ab1a71ce015239b4a1d4343\nJFREEREPORT_LIBSERIALIZER_TARBALL := f94d9870737518e3b597f9265f4e9803-libserializer-1.1.6.zip\nJFREEREPORT_LIBXML_SHA256SUM := 7d2797fe9f79a77009721e3f14fa4a1dec17a6d706bdc93f85f1f01d124fab66\nJFREEREPORT_LIBXML_TARBALL := ace6ab49184e329db254e454a010f56d-libxml-1.1.7.zip\nJFREEREPORT_SAC_SHA256SUM := 085f2112c51fa8c1783fac12fbd452650596415121348393bb51f0f7e85a9045\nJFREEREPORT_SAC_TARBALL := 39bb3fcea1514f1369fcfc87542390fd-sacjava-1.3.zip\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nLIBJPEG_TURBO_SHA256SUM := 2fdc3feb6e9deb17adec9bafa3321419aa19f8f4e5dea7bf8486844ca22207bf\nLIBJPEG_TURBO_TARBALL := libjpeg-turbo-2.1.5.1.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nLANGTAGREG_SHA256SUM := 121f27bd1fabac9a74fb042cf68396b6df74cdf5d1ccc30f4c9b78584cc13864\nLANGTAGREG_TARBALL := language-subtag-registry-2024-11-19.tar.bz2\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nLCMS2_SHA256SUM := d873d34ad8b9b4cea010631f1a6228d2087475e4dc5e763eb81acc23d9d45a51\nLCMS2_TARBALL := lcms2-2.16.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nLIBASSUAN_SHA256SUM := c8f0f42e6103dea4b1a6a483cb556654e97302c7465308f58363778f95f194b1\nLIBASSUAN_TARBALL := libassuan-3.0.1.tar.bz2\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nLIBATOMIC_OPS_SHA256SUM := d305207fe207f2b3fb5cb4c019da12b44ce3fcbc593dfd5080d867b1a2419b51\nLIBATOMIC_OPS_TARBALL := libatomic_ops-7.8.2.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nLIBEOT_SHA256SUM := cf5091fa8e7dcdbe667335eb90a2cfdd0a3fe8f8c7c8d1ece44d9d055736a06a\nLIBEOT_TARBALL := libeot-0.01.tar.bz2\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nLIBEXTTEXTCAT_SHA256SUM := df0a59d413a5b202573d8d4f5159e33a8538da4f8e8e60979facc64d6290cebd\nLIBEXTTEXTCAT_TARBALL := libexttextcat-3.4.7.tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nLIBFFI_SHA256SUM := b0dea9df23c863a7a50e825440f3ebffabd65df1497108e5d437747843895a4e\nLIBFFI_TARBALL := libffi-3.4.6.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nLIBGPGERROR_SHA256SUM := be0f1b2db6b93eed55369cdf79f19f72750c8c7c39fc20b577e724545427e6b2\nLIBGPGERROR_TARBALL := libgpg-error-1.51.tar.bz2\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nLIBLANGTAG_SHA256SUM := 5ed6bcd4ae3f3c05c912e62f216cd1a44123846147f729a49fb5668da51e030e\nLIBLANGTAG_TARBALL := liblangtag-0.6.7.tar.bz2\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nLIBNUMBERTEXT_SHA256SUM := 5dcb4db3b2340f81f601ce86d8d76b69e34d70f84f804192c901e4b7f84d5fb0\nLIBNUMBERTEXT_TARBALL := libnumbertext-1.0.11.tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nLIBTOMMATH_SHA256SUM := 296272d93435991308eb73607600c034b558807a07e829e751142e65ccfa9d08\nLIBTOMMATH_TARBALL := ltm-1.3.0.tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nLIBWEBP_SHA256SUM := 7d6fab70cf844bf6769077bd5d7a74893f8ffd4dfb42861745750c63c2a5c92c\nLIBWEBP_TARBALL := libwebp-1.5.0.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nXMLSEC_SHA256SUM := 952b626ad3f3be1a4598622dab52fdab2a8604d0837c1b00589f3637535af92f\nXMLSEC_TARBALL := xmlsec1-1.3.6.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nLIBXML_SHA256SUM := 74fc163217a3964257d3be39af943e08861263c4231f9ef5b496b6f6d4c7b2b6\nLIBXML_VERSION_MICRO := 5\nLIBXML_TARBALL := libxml2-2.13.$(LIBXML_VERSION_MICRO).tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nLIBXSLT_SHA256SUM := 85ca62cac0d41fc77d3f6033da9df6fd73d20ea2fc18b0a3609ffb4110e1baeb\nLIBXSLT_VERSION_MICRO := 42\nLIBXSLT_TARBALL := libxslt-1.1.$(LIBXSLT_VERSION_MICRO).tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nLPSOLVE_SHA256SUM := 171816288f14215c69e730f7a4f1c325739873e21f946ff83884b350574e6695\nLPSOLVE_TARBALL := 26b3e95ddf3d9c077c480ea45874b3b8-lp_solve_5.5.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nLXML_SHA256SUM := 4e109ca30d1edec1ac60cdbe341905dc3b8f55b16855e03a54aaf59e51ec8c6f\nLXML_TARBALL := lxml-5.3.0.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nMARIADB_CONNECTOR_C_SHA256SUM := 1c03c30b394871ab354dbdb47574beae19e2657da21a911ecc9e33e9388a3bef\nMARIADB_CONNECTOR_C_TARBALL := mariadb-connector-c-3.3.13-src.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nMDDS_SHA256SUM := 1483d90cefb8aa4563c4d0a85cb7b243aa95217d235d422e9ca6722fd5b97e56\nMDDS_TARBALL := mdds-2.1.1.tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nMDNSRESPONDER_SHA256SUM := e777b4d7dbf5eb1552cb80090ad1ede319067ab6e45e3990d68aabf6e8b3f5a0\nMDNSRESPONDER_TARBALL := mDNSResponder-878.200.35.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nMSPUB_SHA256SUM := ef36c1a1aabb2ba3b0bedaaafe717bf4480be2ba8de6f3894be5fd3702b013ba\nMSPUB_TARBALL := libmspub-0.1.4.tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nMWAW_SHA256SUM := a1a39ffcea3ff2a7a7aae0c23877ddf4918b554bf82b0de5d7ce8e7f61ea8e32\nMWAW_VERSION_MICRO := 22\nMWAW_TARBALL := libmwaw-0.3.$(MWAW_VERSION_MICRO).tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nMYTHES_SHA256SUM := 19279f70707bbe5ffa619f2dc319f888cec0c4a8d339dc0a21330517bd6f521d\nMYTHES_TARBALL := mythes-1.2.5.tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nNSS_SHA256SUM := ddfdec73fb4b0eedce5fc4de09de9ba14d2ddbfbf67e42372903e1510f2d3d65\nNSS_TARBALL := nss-3.102.1-with-nspr-4.35.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nODFGEN_SHA256SUM := 55200027fd46623b9bdddd38d275e7452d1b0ff8aeddcad6f9ae6dc25f610625\nODFGEN_VERSION_MICRO := 8\nODFGEN_TARBALL := libodfgen-0.1.$(ODFGEN_VERSION_MICRO).tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nODFVALIDATOR_SHA256SUM := d55495ab3a86544650587de2a72180ddf8bfc6376d14ddfa923992dbc86a06e0\nODFVALIDATOR_JAR := odfvalidator-0.9.0-RC2-SNAPSHOT-jar-with-dependencies-2726ab578664434a545f8379a01a9faffac0ae73.jar\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nOFFICEOTRON_SHA256SUM := f2443f27561af52324eee03a1892d9f569adc8db9e7bca55614898bc2a13a770\nOFFICEOTRON_JAR := 8249374c274932a21846fa7629c2aa9b-officeotron-0.7.4-master.jar\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nONLINEUPDATE_SHA256SUM := 37206cf981e8409d048b59ac5839621ea107ff49af72beb9d7769a2f41da8d90\nONLINEUPDATE_TARBALL := onlineupdate-c003be8b9727672e7d30972983b375f4c200233f-2.tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nOPENLDAP_SHA256SUM := 2cb7dc73e9c8340dff0d99357fbaa578abf30cc6619f0521972c555681e6b2ff\nOPENLDAP_TARBALL := openldap-2.6.9.tgz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nOPENSSL_SHA256SUM := 23c666d0edf20f14249b3d8f0368acaee9ab585b09e1de82107c66e1f3ec9533\nOPENSSL_TARBALL := openssl-3.0.15.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nORCUS_SHA256SUM := 69ed26a00d4aaa7688e62a6e003cbc81928521a45e96605e53365aa499719e39\nORCUS_TARBALL := liborcus-0.19.2.tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nPAGEMAKER_SHA256SUM := 66adacd705a7d19895e08eac46d1e851332adf2e736c566bef1164e7a442519d\nPAGEMAKER_TARBALL := libpagemaker-0.0.4.tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nPDFIUM_SHA256SUM := 03aabafd8bed319f87aa96871264dc599879e482a0923450070dac987c8a671e\nPDFIUM_TARBALL := pdfium-6887.tar.bz2\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nPIXMAN_SHA256SUM := ea1480efada2fd948bc75366f7c349e1c96d3297d09a3fe62626e38e234a625e\nPIXMAN_TARBALL := pixman-0.42.2.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nLIBPNG_SHA256SUM := 926485350139ffb51ef69760db35f78846c805fef3d59bfdcb2fba704663f370\nLIBPNG_TARBALL := libpng-1.6.45.tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nLIBTIFF_SHA256SUM := 273a0a73b1f0bed640afee4a5df0337357ced5b53d3d5d1c405b936501f71017\nLIBTIFF_TARBALL := tiff-4.7.0.tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nPOPPLER_SHA256SUM := 7eefc122207bbbd72a303c5e0743f4941e8ae861e24dcf0501e18ce1d1414112\nPOPPLER_TARBALL := poppler-25.01.0.tar.xz\nPOPPLER_DATA_SHA256SUM := c835b640a40ce357e1b83666aabd95edffa24ddddd49b8daff63adb851cdab74\nPOPPLER_DATA_TARBALL := poppler-data-0.4.12.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nPOSTGRESQL_SHA256SUM := 02e891e314b4e9ee24cbd78028dab7c73f9c1ba3e30835bcbef71fe220401fc5\nPOSTGRESQL_TARBALL := postgresql-14.15.tar.bz2\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nPYTHON_SHA256SUM := 2a9920c7a0cd236de33644ed980a13cbbc21058bfdc528febb6081575ed73be3\nPYTHON_TARBALL := Python-3.11.11.tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nPYTHON_BOOTSTRAP_SHA256SUM := 406856be971d957e0bee7a5cefe20a5ec78d70a495e9e33cd0e53d31faec049d\nPYTHON_BOOTSTRAP_TARBALL := python.3.12.8.nupkg\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nQXP_SHA256SUM := e137b6b110120a52c98edd02ebdc4095ee08d0d5295a94316a981750095a945c\nQXP_TARBALL := libqxp-0.0.2.tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nRAPTOR_SHA256SUM := 089db78d7ac982354bdbf39d973baf09581e6904ac4c92a98c5caadb3de44680\nRAPTOR_TARBALL := raptor2-2.0.16.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nRASQAL_SHA256SUM := 6924c9ac6570bd241a9669f83b467c728a322470bf34f4b2da4f69492ccfd97c\nRASQAL_TARBALL := 1f5def51ca0026cd192958ef07228b52-rasqal-0.9.33.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nREDLAND_SHA256SUM := de1847f7b59021c16bdc72abb4d8e2d9187cd6124d69156f3326dd34ee043681\nREDLAND_TARBALL := e5be03eda13ef68aabab6e42aa67715e-redland-1.0.17.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nREVENGE_SHA256SUM := 5892ca6796f7a2a93d580832e907e849b19d980b40d326a283b18877ab6de0c5\nREVENGE_VERSION_MICRO := 5\nREVENGE_TARBALL := librevenge-0.0.$(REVENGE_VERSION_MICRO).tar.bz2\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nRHINO_SHA256SUM := 42fce6baf1bf789b62bf938b8e8ec18a1ac92c989dd6e7221e9531454cbd97fa\nRHINO_TARBALL := rhino-1.7.15.zip\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nSKIA_SHA256SUM := 53f55303821158b6de9e6b90f1cc3a548611a7e430c1a0883ff159a8db89677d\nSKIA_TARBALL := skia-m130-3c64459d5df2fa9794b277f0959ed8a92552bf4c.tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nSTAROFFICE_SHA256SUM := f94fb0ad8216f97127bedef163a45886b43c62deac5e5b0f5e628e234220c8db\nSTAROFFICE_VERSION_MICRO := 7\nSTAROFFICE_TARBALL := libstaroffice-0.0.$(STAROFFICE_VERSION_MICRO).tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nTWAIN_DSM_SHA256SUM := 82c818be771f242388457aa8c807e4b52aa84dc22b21c6c56184a6b4cbb085e6\nTWAIN_DSM_TARBALL := twaindsm_2.4.1.orig.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nVISIO_SHA256SUM := b4098ffbf4dcb9e71213fa0acddbd928f27bed30db2d80234813b15d53d0405b\nVISIO_TARBALL := libvisio-0.1.8.tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nWPD_SHA256SUM := 2465b0b662fdc5d4e3bebcdc9a79027713fb629ca2bff04a3c9251fdec42dd09\nWPD_VERSION_MICRO := 3\nWPD_TARBALL := libwpd-0.10.$(WPD_VERSION_MICRO).tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nWPG_SHA256SUM := b55fda9440d1e070630eb2487d8b8697cf412c214a27caee9df69cec7c004de3\nWPG_VERSION_MICRO := 4\nWPG_TARBALL := libwpg-0.3.$(WPG_VERSION_MICRO).tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nWPS_SHA256SUM := 365b968e270e85a8469c6b160aa6af5619a4e6c995dbb04c1ecc1b4dd13e80de\nWPS_VERSION_MICRO := 14\nWPS_TARBALL := libwps-0.4.$(WPS_VERSION_MICRO).tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nXSLTML_SHA256SUM := 75823776fb51a9c526af904f1503a7afaaab900fba83eda64f8a41073724c870\nXSLTML_TARBALL := a7983f859eafb2677d7ff386a023bc40-xsltml_2.1.2.zip\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nZLIB_SHA256SUM := 38ef96b8dfe510d42707d9c781877914792541133e1870841463bfa73f883e32\nZLIB_TARBALL := zlib-1.3.1.tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nZMF_SHA256SUM := 27051a30cb057fdb5d5de65a1f165c7153dc76e27fe62251cbb86639eb2caf22\nZMF_TARBALL := libzmf-0.0.2.tar.xz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nZXCVBN_C_SHA256SUM := 77d6c6ecb35952a8d8ce7f736b7a2bf466275c48210e309b73782d6b7e84dffd\nZXCVBN_C_TARBALL := zxcvbn-c-2.5.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nZXING_SHA256SUM := 64e4139103fdbc57752698ee15b5f0b0f7af9a0331ecbdc492047e0772c417ba\nZXING_TARBALL := zxing-cpp-2.3.0.tar.gz\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nNUMBERTEXT_EXTENSION_SHA256SUM := 1568ed1d2feb8210bb5de61d69574a165cded536cfa17c6953c9064076469de2\n# three static lines\n# so that git cherry-pick\n# will not run into conflicts\nOPENSYMBOL_SHA256SUM := f543e6e2d7275557a839a164941c0a86e5f2c3f2a0042bfc434c88c6dde9e140\nOPENSYMBOL_TTF := f543e6e2d7275557a839a164941c0a86e5f2c3f2a0042bfc434c88c6dde9e140-opens___.ttf\n"
        },
        {
          "name": "drawinglayer",
          "type": "tree",
          "content": null
        },
        {
          "name": "editeng",
          "type": "tree",
          "content": null
        },
        {
          "name": "embeddedobj",
          "type": "tree",
          "content": null
        },
        {
          "name": "embedserv",
          "type": "tree",
          "content": null
        },
        {
          "name": "emfio",
          "type": "tree",
          "content": null
        },
        {
          "name": "eventattacher",
          "type": "tree",
          "content": null
        },
        {
          "name": "extensions",
          "type": "tree",
          "content": null
        },
        {
          "name": "external",
          "type": "tree",
          "content": null
        },
        {
          "name": "extras",
          "type": "tree",
          "content": null
        },
        {
          "name": "filter",
          "type": "tree",
          "content": null
        },
        {
          "name": "forms",
          "type": "tree",
          "content": null
        },
        {
          "name": "formula",
          "type": "tree",
          "content": null
        },
        {
          "name": "fpicker",
          "type": "tree",
          "content": null
        },
        {
          "name": "framework",
          "type": "tree",
          "content": null
        },
        {
          "name": "g",
          "type": "blob",
          "size": 10.33203125,
          "content": "#!/usr/bin/env bash\n#\n# Wrapper for git to handle more subdirs at the same time\n#\n\nif [ -n \"$g_debug\" ] ; then\n    set -x\nfi\n\nSUBMODULES_ALL=\"dictionaries helpcontent2 translations\"\n\npushd $(dirname $0) > /dev/null\nif [ -f ${BUILDDIR}/config_host.mk ] ; then\n    # we are in the SRCDIR\n    SRC_ROOT=$(< ${BUILDDIR}/config_host.mk grep -a SRC_ROOT | sed -e \"s/.*=//\")\nelse\n    SRC_ROOT=$(pwd)\nfi\npopd > /dev/null\n\nCOREDIR=\"$SRC_ROOT\"\n\nusage()\n{\n    git\n    echo\n    echo \"Usage: g [options] [git (checkout|clone|fetch|gc|grep|pull|push|reset) [git options/args..]]\"\n    echo \"\"\n    echo \" -z restore the git hooks and do other sanity checks\"\n}\n\nrefresh_create_link()\n{\n    local hook_name=$1\n    local hook=$2\n    local lnarg=$3\n\n    # if it doesn't exist or is neither a symlink nor sharing the same inode (hardlink)\n    if [ ! -e \"${hook?}\" ] || [ ! \\( -L \"${hook?}\" -o \"${hook_name}\" -ef \"${hook?}\" \\) ] ; then\n        rm -f \"${hook?}\"\n        ln -f $lnarg \"${hook_name}\" \"${hook?}\"\n    fi\n}\n\nrefresh_submodule_hooks()\n{\n    local repo=$1\n    local lnarg=$2\n    local hook\n    local hook_name\n\n    if [ -d \"${repo?}\"/.git ] ; then\n        # use core's hook by default\n        for hook_name in \"${COREDIR?}/.git-hooks\"/* ; do\n            if [ ! -e \"${hook_name}\" ] ; then\n                continue\n            fi\n            hook=\"${repo?}/.git/hooks/${hook_name##*/}\"\n            refresh_create_link \"${hook_name}\" \"${hook?}\" \"$lnarg\"\n        done\n        # override if need be by the submodules' own hooks\n        for hook_name in \"${COREDIR?}/${repo?}/.git-hooks\"/* ; do\n            if [ ! -e \"${hook_name}\" ] ; then\n                continue\n            fi\n            hook=\"${repo?}/.git/hooks/${hook_name##*/}\"\n            refresh_create_link \"${hook_name}\" \"${hook?}\" \"$lnarg\"\n        done\n    elif [ -d .git/modules/\"${repo}\"/hooks ] ; then\n        for hook_name in \"${COREDIR?}/.git-hooks\"/* ; do\n            if [ ! -e \"${hook_name}\" ] ; then\n                continue\n            fi\n            hook=\".git/modules/${repo?}/hooks/${hook_name##*/}\"\n            refresh_create_link \"${hook_name}\" \"${hook?}\" \"$lnarg\"\n        done\n        # override if need be by the submodules' own hooks\n        for hook_name in \"${COREDIR?}/${repo?}/.git-hooks\"/* ; do\n            if [ ! -e \"${hook_name}\" ] ; then\n                continue\n            fi\n            hook=\".git/modules/${repo?}/hooks/${hook_name##*/}\"\n            refresh_create_link \"${hook_name}\" \"${hook?}\" \"$lnarg\"\n        done\n    fi\n\n}\n\nrefresh_all_hooks()\n{\n    local repo\n    local hook_name\n    local hook\n    local gitbash\n    local lnarg\n\n    pushd \"${COREDIR?}\" > /dev/null\n\n    # it is 'GIT for Windows'\n    gitbash=$(echo $OSTYPE | grep -ic msys)\n\n    # git-bash/MSYS doesn't create symlinks by default, and \"real\" symlinks are restricted to\n    # Admin-mode or when devmode is activated, junction points as fallback would work for bash/\n    # regular use but not when git tries to spawn them, similar for plain windows shortcuts (worse\n    # because running the hooks will fail silently/they'd be inactive)\n    # ln -s without setting MSYS to contain winsymlinks:{lnk,native,nativestrict,sys} to force one\n    # of the other modes described above will do plain copies.\n    # So in case of git-bash use hardlinks since those work just fine, everywhere else use symlinks\n    if [ $gitbash -ne 1 ]; then\n        lnarg=\"-s\"\n    fi\n    # There's no \".git\" e.g. in a secondary worktree\n    if [ -d \".git\" ]; then\n        for hook_name in \"${COREDIR?}/.git-hooks\"/* ; do\n            hook=\".git/hooks/${hook_name##*/}\"\n            refresh_create_link \"${hook_name}\" \"${hook?}\" \"$lnarg\"\n        done\n    fi\n\n    for repo in ${SUBMODULES_ALL?} ; do\n        refresh_submodule_hooks \"$repo\" \"$lnarg\"\n    done\n\n    popd > /dev/null\n\n}\n\nset_push_url()\n{\n    local repo\n\n    repo=\"$1\"\n    if [ -n \"$repo\" ] ; then\n        pushd \"${COREDIR?}/${repo?}\" > /dev/null\n    else\n        pushd \"${COREDIR?}\" > /dev/null\n        repo=\"core\"\n    fi\n    echo \"setting up push url for ${repo?}\"\n    if [ \"${repo?}\" = \"helpcontent2\" ] ; then\n        git config remote.origin.pushurl \"ssh://${PUSH_USER}logerrit/help\"\n    else\n        git config remote.origin.pushurl \"ssh://${PUSH_USER}logerrit/${repo?}\"\n    fi\n    popd > /dev/null\n}\n\nset_push_urls()\n{\n    PUSH_USER=\"$1\"\n    set_push_url\n    for repo in ${SUBMODULES_ACTIVE?} ; do\n        set_push_url \"${repo?}\"\n    done\n}\n\nget_active_submodules()\n{\n    SUBMODULES_ACTIVE=\"\"\n    local repo\n\n    for repo in ${SUBMODULES_ALL?} ; do\n        if [ -d \"${repo?}\"/.git ] || [ -f \"${repo?}\"/.git ] ; then\n            SUBMODULES_ACTIVE=\"${repo?} ${SUBMODULES_ACTIVE?}\"\n        fi\n    done\n}\n\nget_configured_submodules()\n{\n    SUBMODULES_CONFIGURED=\"\"\n    if [ -f ${BUILDDIR}/config_host.mk ] ; then\n        SUBMODULES_CONFIGURED=$(< ${BUILDDIR}/config_host.mk grep -a GIT_NEEDED_SUBMODULES | sed -e \"s/.*=//\")\n    else\n        # if we need the configured submodule before the configuration is done. we assumed you want them all\n        SUBMODULES_CONFIGURED=${SUBMODULES_ALL?}\n    fi\n}\n\nget_git_reference()\n{\n    REFERENCED_GIT=\"\"\n    if [ -f ${BUILDDIR}/config_host.mk ]; then\n        REFERENCED_GIT=$(< ${BUILDDIR}/config_host.mk grep -a GIT_REFERENCE_SRC | sed -e \"s/.*=//\")\n    fi\n    LINKED_GIT=\"\"\n    if [ -f ${BUILDDIR}/config_host.mk ]; then\n        LINKED_GIT=$(< ${BUILDDIR}/config_host.mk grep -a GIT_LINK_SRC | sed -e \"s/.*=//\")\n    fi\n}\n\ndo_shortcut_update()\n{\n    local module\n    local repo\n\n    for module in $SUBMODULES_CONFIGURED ; do\n        if [ ! -d \"${module?}\"/.git ] ; then\n            case \"${module?}\" in\n                helpcontent2)\n                    if [ -d clone/help/.git ] ; then\n                        repo=\"clone/help/.git\"\n                    fi\n                    ;;\n                *)\n                    if [ -d clone/\"${module?}\"/.git ] ; then\n                        repo=\"clone/${module?}/.git\"\n                    fi\n                    ;;\n            esac\n            if [ -n \"$repo\" ] ; then\n                cp -r \"${repo?}\" \"${module?}/.\"\n            fi\n        fi\n    done\n}\n\ndo_git_cmd()\n{\n    echo \"cmd:$*\"\n    git \"$@\"\n    git submodule foreach git \"$@\" $KEEP_GOING\n}\n\ndo_checkout()\n{\n    local cmd\n    local create_branch=\"0\"\n    local branch\n    local module\n\n    git checkout \"$@\" || return $?\n    for cmd in \"$@\" ; do\n        if [ \"$cmd\" = \"-f\" ]; then\n            continue\n        elif [ \"$cmd\" = \"-b\" ] ; then\n            create_branch=1\n        elif [ \"$create_branch\" = \"1\" ] ; then\n            branch=\"$cmd\"\n            create_branch=0\n        fi\n    done\n    if [ -f .gitmodules ] ; then\n        git submodule update --progress\n        if [ -n \"$branch\" ] ; then\n            git submodule foreach git checkout -b \"${branch}\" HEAD || return $?\n        fi\n    else\n        # now that is the nasty case we moved prior to submodules\n        # delete the submodules left over if any\n        for module in $SUBMODULES_ALL ; do\n            echo \"clean-up submodule $module\"\n            rm -fr \"${module}\"\n        done\n        # make sure we have the needed repo in clone\n        ./g clone && ./g -f checkout \"$@\" || return $?\n    fi\n    return $?\n}\n\ndo_reset()\n{\n    git reset \"$@\" || return $?\n    if [ -f .gitmodules ] ; then\n        git submodule update --progress || return $?\n    else\n        # now that is the nasty case we moved prior to submodules\n        # delete the submodules left over if any\n        for module in $SUBMODULES_ALL ; do\n            echo \"clean-up submodule $module\"\n            rm -fr \"${module}\"\n        done\n        # make sure we have the needed repo in clone\n        ./g clone && ./g -f reset \"$@\"\n    fi\n    return $?;\n}\n\ndo_init_modules()\n{\n    local module\n    local configured\n\n    do_shortcut_update\n\n    for module in $SUBMODULES_CONFIGURED ; do\n        if [ -n \"$LINKED_GIT\" ] ; then\n            if ! [ -d \".git/modules/${module}\" ]; then\n                ./bin/git-new-module-workdir \"${LINKED_GIT}/${module}\" \"${module}\"\n            fi\n        fi\n        configured=$(git config --local --get submodule.\"${module}\".url)\n        if [ -z \"$configured\" ] ; then\n            git submodule init \"$module\" || return $?\n        fi\n    done\n    for module in $SUBMODULES_CONFIGURED ; do\n        if [ -n \"$REFERENCED_GIT\" ] ; then\n            git submodule update --reference \"$REFERENCED_GIT/.git/modules/$module\" --progress \"$module\" || return $?\n        else\n            git submodule update --progress \"$module\" || return $?\n        fi\n    done\n    return 0\n}\n\n\n# no params, no action\nif [ \"$#\" -eq \"0\" ] ; then\n    usage\nfi\n\n\nif [ ! \"$(type -p git)\" ]; then\n    echo \"Cannot find the git binary! Is git installed and is in PATH?\"\n    exit 1\nfi\n\n\nget_active_submodules\nget_configured_submodules\nget_git_reference\n\n\n\n\n# extra params for some commands, like log\nEXTRA=\nCOMMAND=\"$1\"\nPAGER=\nRELATIVIZE=1\nPUSH_ALL=\nPUSH_USER=\nPUSH_NOTES=\nLAST_WORKING=\nSET_LAST_WORKING=\nALLOW_EMPTY=\nKEEP_GOING=\nREPORT_REPOS=1\nREPORT_COMMANDS=0\nREPORT_COMPACT=0\nDO_HOOK_REFRESH=false\n\n\nwhile [ \"${COMMAND:0:1}\" = \"-\" ] ; do\n    case \"$COMMAND\" in\n        -f )KEEP_GOING=\"||:\"\n            ;;\n        -z)\n            refresh_all_hooks\n            exit 0;\n            ;;\n        --set-push-urls)\n            shift\n            PUSH_USER=\"$1\"\n            if [ -n \"${PUSH_USER}\" ] ; then\n                PUSH_USER=\"${PUSH_USER}@\"\n            fi\n            set_push_urls \"$PUSH_USER\"\n            exit 0;\n            ;;\n        -*)\n            echo \"option: $COMMAND not supported\" 1>&2\n            exit 1\n    esac\n    shift\n    COMMAND=\"$1\"\ndone\n\nshift\n\ncase \"$COMMAND\" in\n    branch)\n        do_git_cmd \"${COMMAND}\" \"$@\"\n        ;;\n    checkout)\n        do_checkout \"$@\"\n        ;;\n    clone)\n        do_init_modules && refresh_all_hooks\n        ;;\n    fetch)\n        (git fetch \"$@\" && git submodule foreach git fetch \"$@\" ) && git submodule update --progress\n\n        ;;\n    gc)\n         (git gc \"$@\" && git submodule foreach git gc \"$@\" )\n        ;;\n    grep)\n        KEEP_GOING=\"||:\"\n        do_git_cmd \"${COMMAND}\" \"$@\"\n        ;;\n    pull)\n        git pull \"$@\" && git submodule update --progress && refresh_all_hooks\n        ;;\n    push)\n        git submodule foreach git push \"$@\"\n        if [ \"$?\" = \"0\" ] ; then\n            git push \"$@\"\n        fi\n        ;;\n    reset)\n        do_reset\n        ;;\n    tag)\n        do_git_cmd \"${COMMAND}\" \"$@\"\n        ;;\n    \"\")\n        ;;\n    *)\n        echo \"./g does not support command: $COMMAND\" 1>&2\n        exit 1;\n        ;;\nesac\n\nexit $?\n\n# vi:set shiftwidth=4 expandtab:\n"
        },
        {
          "name": "helpcompiler",
          "type": "tree",
          "content": null
        },
        {
          "name": "helpcontent2",
          "type": "commit",
          "content": null
        },
        {
          "name": "hwpfilter",
          "type": "tree",
          "content": null
        },
        {
          "name": "i18nlangtag",
          "type": "tree",
          "content": null
        },
        {
          "name": "i18npool",
          "type": "tree",
          "content": null
        },
        {
          "name": "i18nutil",
          "type": "tree",
          "content": null
        },
        {
          "name": "icon-themes",
          "type": "tree",
          "content": null
        },
        {
          "name": "idl",
          "type": "tree",
          "content": null
        },
        {
          "name": "idlc",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "install-sh",
          "type": "blob",
          "size": 13.6689453125,
          "content": "#!/bin/sh\n# install - install a program, script, or datafile\n\nscriptversion=2011-01-19.21; # UTC\n\n# This originates from X11R5 (mit/util/scripts/install.sh), which was\n# later released in X11R6 (xc/config/util/install.sh) with the\n# following copyright and license.\n#\n# Copyright (C) 1994 X Consortium\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to\n# deal in the Software without restriction, including without limitation the\n# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n# sell copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n# X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN\n# AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNEC-\n# TION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n#\n# Except as contained in this notice, the name of the X Consortium shall not\n# be used in advertising or otherwise to promote the sale, use or other deal-\n# ings in this Software without prior written authorization from the X Consor-\n# tium.\n#\n#\n# FSF changes to this file are in the public domain.\n#\n# Calling this script install-sh is preferred over install.sh, to prevent\n# `make' implicit rules from creating a file called install from it\n# when there is no Makefile.\n#\n# This script is compatible with the BSD install script, but was written\n# from scratch.\n\nnl='\n'\nIFS=\" \"\"\t$nl\"\n\n# set DOITPROG to echo to test this script\n\n# Don't use :- since 4.3BSD and earlier shells don't like it.\ndoit=${DOITPROG-}\nif test -z \"$doit\"; then\n  doit_exec=exec\nelse\n  doit_exec=$doit\nfi\n\n# Put in absolute file names if you don't have them in your path;\n# or use environment vars.\n\nchgrpprog=${CHGRPPROG-chgrp}\nchmodprog=${CHMODPROG-chmod}\nchownprog=${CHOWNPROG-chown}\ncmpprog=${CMPPROG-cmp}\ncpprog=${CPPROG-cp}\nmkdirprog=${MKDIRPROG-mkdir}\nmvprog=${MVPROG-mv}\nrmprog=${RMPROG-rm}\nstripprog=${STRIPPROG-strip}\n\nposix_glob='?'\ninitialize_posix_glob='\n  test \"$posix_glob\" != \"?\" || {\n    if (set -f) 2>/dev/null; then\n      posix_glob=\n    else\n      posix_glob=:\n    fi\n  }\n'\n\nposix_mkdir=\n\n# Desired mode of installed file.\nmode=0755\n\nchgrpcmd=\nchmodcmd=$chmodprog\nchowncmd=\nmvcmd=$mvprog\nrmcmd=\"$rmprog -f\"\nstripcmd=\n\nsrc=\ndst=\ndir_arg=\ndst_arg=\n\ncopy_on_change=false\nno_target_directory=\n\nusage=\"\\\nUsage: $0 [OPTION]... [-T] SRCFILE DSTFILE\n   or: $0 [OPTION]... SRCFILES... DIRECTORY\n   or: $0 [OPTION]... -t DIRECTORY SRCFILES...\n   or: $0 [OPTION]... -d DIRECTORIES...\n\nIn the 1st form, copy SRCFILE to DSTFILE.\nIn the 2nd and 3rd, copy all SRCFILES to DIRECTORY.\nIn the 4th, create DIRECTORIES.\n\nOptions:\n     --help     display this help and exit.\n     --version  display version info and exit.\n\n  -c            (ignored)\n  -C            install only if different (preserve the last data modification time)\n  -d            create directories instead of installing files.\n  -g GROUP      $chgrpprog installed files to GROUP.\n  -m MODE       $chmodprog installed files to MODE.\n  -o USER       $chownprog installed files to USER.\n  -s            $stripprog installed files.\n  -t DIRECTORY  install into DIRECTORY.\n  -T            report an error if DSTFILE is a directory.\n\nEnvironment variables override the default commands:\n  CHGRPPROG CHMODPROG CHOWNPROG CMPPROG CPPROG MKDIRPROG MVPROG\n  RMPROG STRIPPROG\n\"\n\nwhile test $# -ne 0; do\n  case $1 in\n    -c) ;;\n\n    -C) copy_on_change=true;;\n\n    -d) dir_arg=true;;\n\n    -g) chgrpcmd=\"$chgrpprog $2\"\n\tshift;;\n\n    --help) echo \"$usage\"; exit $?;;\n\n    -m) mode=$2\n\tcase $mode in\n\t  *' '* | *'\t'* | *'\n'*\t  | *'*'* | *'?'* | *'['*)\n\t    echo \"$0: invalid mode: $mode\" >&2\n\t    exit 1;;\n\tesac\n\tshift;;\n\n    -o) chowncmd=\"$chownprog $2\"\n\tshift;;\n\n    -s) stripcmd=$stripprog;;\n\n    -t) dst_arg=$2\n\t# Protect names problematic for `test' and other utilities.\n\tcase $dst_arg in\n\t  -* | [=\\(\\)!]) dst_arg=./$dst_arg;;\n\tesac\n\tshift;;\n\n    -T) no_target_directory=true;;\n\n    --version) echo \"$0 $scriptversion\"; exit $?;;\n\n    --)\tshift\n\tbreak;;\n\n    -*)\techo \"$0: invalid option: $1\" >&2\n\texit 1;;\n\n    *)  break;;\n  esac\n  shift\ndone\n\nif test $# -ne 0 && test -z \"$dir_arg$dst_arg\"; then\n  # When -d is used, all remaining arguments are directories to create.\n  # When -t is used, the destination is already specified.\n  # Otherwise, the last argument is the destination.  Remove it from $@.\n  for arg\n  do\n    if test -n \"$dst_arg\"; then\n      # $@ is not empty: it contains at least $arg.\n      set fnord \"$@\" \"$dst_arg\"\n      shift # fnord\n    fi\n    shift # arg\n    dst_arg=$arg\n    # Protect names problematic for `test' and other utilities.\n    case $dst_arg in\n      -* | [=\\(\\)!]) dst_arg=./$dst_arg;;\n    esac\n  done\nfi\n\nif test $# -eq 0; then\n  if test -z \"$dir_arg\"; then\n    echo \"$0: no input file specified.\" >&2\n    exit 1\n  fi\n  # It's OK to call `install-sh -d' without argument.\n  # This can happen when creating conditional directories.\n  exit 0\nfi\n\nif test -z \"$dir_arg\"; then\n  do_exit='(exit $ret); exit $ret'\n  trap \"ret=129; $do_exit\" 1\n  trap \"ret=130; $do_exit\" 2\n  trap \"ret=141; $do_exit\" 13\n  trap \"ret=143; $do_exit\" 15\n\n  # Set umask so as not to create temps with too-generous modes.\n  # However, 'strip' requires both read and write access to temps.\n  case $mode in\n    # Optimize common cases.\n    *644) cp_umask=133;;\n    *755) cp_umask=22;;\n\n    *[0-7])\n      if test -z \"$stripcmd\"; then\n\tu_plus_rw=\n      else\n\tu_plus_rw='% 200'\n      fi\n      cp_umask=`expr '(' 777 - $mode % 1000 ')' $u_plus_rw`;;\n    *)\n      if test -z \"$stripcmd\"; then\n\tu_plus_rw=\n      else\n\tu_plus_rw=,u+rw\n      fi\n      cp_umask=$mode$u_plus_rw;;\n  esac\nfi\n\nfor src\ndo\n  # Protect names problematic for `test' and other utilities.\n  case $src in\n    -* | [=\\(\\)!]) src=./$src;;\n  esac\n\n  if test -n \"$dir_arg\"; then\n    dst=$src\n    dstdir=$dst\n    test -d \"$dstdir\"\n    dstdir_status=$?\n  else\n\n    # Waiting for this to be detected by the \"$cpprog $src $dsttmp\" command\n    # might cause directories to be created, which would be especially bad\n    # if $src (and thus $dsttmp) contains '*'.\n    if test ! -f \"$src\" && test ! -d \"$src\"; then\n      echo \"$0: $src does not exist.\" >&2\n      exit 1\n    fi\n\n    if test -z \"$dst_arg\"; then\n      echo \"$0: no destination specified.\" >&2\n      exit 1\n    fi\n    dst=$dst_arg\n\n    # If destination is a directory, append the input filename; won't work\n    # if double slashes aren't ignored.\n    if test -d \"$dst\"; then\n      if test -n \"$no_target_directory\"; then\n\techo \"$0: $dst_arg: Is a directory\" >&2\n\texit 1\n      fi\n      dstdir=$dst\n      dst=$dstdir/`basename \"$src\"`\n      dstdir_status=0\n    else\n      # Prefer dirname, but fall back on a substitute if dirname fails.\n      dstdir=`\n\t(dirname \"$dst\") 2>/dev/null ||\n\texpr X\"$dst\" : 'X\\(.*[^/]\\)//*[^/][^/]*/*$' \\| \\\n\t     X\"$dst\" : 'X\\(//\\)[^/]' \\| \\\n\t     X\"$dst\" : 'X\\(//\\)$' \\| \\\n\t     X\"$dst\" : 'X\\(/\\)' \\| . 2>/dev/null ||\n\techo X\"$dst\" |\n\t    sed '/^X\\(.*[^/]\\)\\/\\/*[^/][^/]*\\/*$/{\n\t\t   s//\\1/\n\t\t   q\n\t\t }\n\t\t /^X\\(\\/\\/\\)[^/].*/{\n\t\t   s//\\1/\n\t\t   q\n\t\t }\n\t\t /^X\\(\\/\\/\\)$/{\n\t\t   s//\\1/\n\t\t   q\n\t\t }\n\t\t /^X\\(\\/\\).*/{\n\t\t   s//\\1/\n\t\t   q\n\t\t }\n\t\t s/.*/./; q'\n      `\n\n      test -d \"$dstdir\"\n      dstdir_status=$?\n    fi\n  fi\n\n  obsolete_mkdir_used=false\n\n  if test $dstdir_status != 0; then\n    case $posix_mkdir in\n      '')\n\t# Create intermediate dirs using mode 755 as modified by the umask.\n\t# This is like FreeBSD 'install' as of 1997-10-28.\n\tumask=`umask`\n\tcase $stripcmd.$umask in\n\t  # Optimize common cases.\n\t  *[2367][2367]) mkdir_umask=$umask;;\n\t  .*0[02][02] | .[02][02] | .[02]) mkdir_umask=22;;\n\n\t  *[0-7])\n\t    mkdir_umask=`expr $umask + 22 \\\n\t      - $umask % 100 % 40 + $umask % 20 \\\n\t      - $umask % 10 % 4 + $umask % 2\n\t    `;;\n\t  *) mkdir_umask=$umask,go-w;;\n\tesac\n\n\t# With -d, create the new directory with the user-specified mode.\n\t# Otherwise, rely on $mkdir_umask.\n\tif test -n \"$dir_arg\"; then\n\t  mkdir_mode=-m$mode\n\telse\n\t  mkdir_mode=\n\tfi\n\n\tposix_mkdir=false\n\tcase $umask in\n\t  *[123567][0-7][0-7])\n\t    # POSIX mkdir -p sets u+wx bits regardless of umask, which\n\t    # is incompatible with FreeBSD 'install' when (umask & 300) != 0.\n\t    ;;\n\t  *)\n\t    tmpdir=${TMPDIR-/tmp}/ins$RANDOM-$$\n\t    trap 'ret=$?; rmdir \"$tmpdir/d\" \"$tmpdir\" 2>/dev/null; exit $ret' 0\n\n\t    if (umask $mkdir_umask &&\n\t\texec $mkdirprog $mkdir_mode -p -- \"$tmpdir/d\") >/dev/null 2>&1\n\t    then\n\t      if test -z \"$dir_arg\" || {\n\t\t   # Check for POSIX incompatibilities with -m.\n\t\t   # HP-UX 11.23 and IRIX 6.5 mkdir -m -p sets group- or\n\t\t   # other-writable bit of parent directory when it shouldn't.\n\t\t   # FreeBSD 6.1 mkdir -m -p sets mode of existing directory.\n\t\t   ls_ld_tmpdir=`ls -ld \"$tmpdir\"`\n\t\t   case $ls_ld_tmpdir in\n\t\t     d????-?r-*) different_mode=700;;\n\t\t     d????-?--*) different_mode=755;;\n\t\t     *) false;;\n\t\t   esac &&\n\t\t   $mkdirprog -m$different_mode -p -- \"$tmpdir\" && {\n\t\t     ls_ld_tmpdir_1=`ls -ld \"$tmpdir\"`\n\t\t     test \"$ls_ld_tmpdir\" = \"$ls_ld_tmpdir_1\"\n\t\t   }\n\t\t }\n\t      then posix_mkdir=:\n\t      fi\n\t      rmdir \"$tmpdir/d\" \"$tmpdir\"\n\t    else\n\t      # Remove any dirs left behind by ancient mkdir implementations.\n\t      rmdir ./$mkdir_mode ./-p ./-- 2>/dev/null\n\t    fi\n\t    trap '' 0;;\n\tesac;;\n    esac\n\n    if\n      $posix_mkdir && (\n\tumask $mkdir_umask &&\n\t$doit_exec $mkdirprog $mkdir_mode -p -- \"$dstdir\"\n      )\n    then :\n    else\n\n      # The umask is ridiculous, or mkdir does not conform to POSIX,\n      # or it failed possibly due to a race condition.  Create the\n      # directory the slow way, step by step, checking for races as we go.\n\n      case $dstdir in\n\t/*) prefix='/';;\n\t[-=\\(\\)!]*) prefix='./';;\n\t*)  prefix='';;\n      esac\n\n      eval \"$initialize_posix_glob\"\n\n      oIFS=$IFS\n      IFS=/\n      $posix_glob set -f\n      set fnord $dstdir\n      shift\n      $posix_glob set +f\n      IFS=$oIFS\n\n      prefixes=\n\n      for d\n      do\n\ttest X\"$d\" = X && continue\n\n\tprefix=$prefix$d\n\tif test -d \"$prefix\"; then\n\t  prefixes=\n\telse\n\t  if $posix_mkdir; then\n\t    (umask=$mkdir_umask &&\n\t     $doit_exec $mkdirprog $mkdir_mode -p -- \"$dstdir\") && break\n\t    # Don't fail if two instances are running concurrently.\n\t    test -d \"$prefix\" || exit 1\n\t  else\n\t    case $prefix in\n\t      *\\'*) qprefix=`echo \"$prefix\" | sed \"s/'/'\\\\\\\\\\\\\\\\''/g\"`;;\n\t      *) qprefix=$prefix;;\n\t    esac\n\t    prefixes=\"$prefixes '$qprefix'\"\n\t  fi\n\tfi\n\tprefix=$prefix/\n      done\n\n      if test -n \"$prefixes\"; then\n\t# Don't fail if two instances are running concurrently.\n\t(umask $mkdir_umask &&\n\t eval \"\\$doit_exec \\$mkdirprog $prefixes\") ||\n\t  test -d \"$dstdir\" || exit 1\n\tobsolete_mkdir_used=true\n      fi\n    fi\n  fi\n\n  if test -n \"$dir_arg\"; then\n    { test -z \"$chowncmd\" || $doit $chowncmd \"$dst\"; } &&\n    { test -z \"$chgrpcmd\" || $doit $chgrpcmd \"$dst\"; } &&\n    { test \"$obsolete_mkdir_used$chowncmd$chgrpcmd\" = false ||\n      test -z \"$chmodcmd\" || $doit $chmodcmd $mode \"$dst\"; } || exit 1\n  else\n\n    # Make a couple of temp file names in the proper directory.\n    dsttmp=$dstdir/_inst.$$_\n    rmtmp=$dstdir/_rm.$$_\n\n    # Trap to clean up those temp files at exit.\n    trap 'ret=$?; rm -f \"$dsttmp\" \"$rmtmp\" && exit $ret' 0\n\n    # Copy the file name to the temp name.\n    (umask $cp_umask && $doit_exec $cpprog \"$src\" \"$dsttmp\") &&\n\n    # and set any options; do chmod last to preserve setuid bits.\n    #\n    # If any of these fail, we abort the whole thing.  If we want to\n    # ignore errors from any of these, just make sure not to ignore\n    # errors from the above \"$doit $cpprog $src $dsttmp\" command.\n    #\n    { test -z \"$chowncmd\" || $doit $chowncmd \"$dsttmp\"; } &&\n    { test -z \"$chgrpcmd\" || $doit $chgrpcmd \"$dsttmp\"; } &&\n    { test -z \"$stripcmd\" || $doit $stripcmd \"$dsttmp\"; } &&\n    { test -z \"$chmodcmd\" || $doit $chmodcmd $mode \"$dsttmp\"; } &&\n\n    # If -C, don't bother to copy if it wouldn't change the file.\n    if $copy_on_change &&\n       old=`LC_ALL=C ls -dlL \"$dst\"\t2>/dev/null` &&\n       new=`LC_ALL=C ls -dlL \"$dsttmp\"\t2>/dev/null` &&\n\n       eval \"$initialize_posix_glob\" &&\n       $posix_glob set -f &&\n       set X $old && old=:$2:$4:$5:$6 &&\n       set X $new && new=:$2:$4:$5:$6 &&\n       $posix_glob set +f &&\n\n       test \"$old\" = \"$new\" &&\n       $cmpprog \"$dst\" \"$dsttmp\" >/dev/null 2>&1\n    then\n      rm -f \"$dsttmp\"\n    else\n      # Rename the file to the real destination.\n      $doit $mvcmd -f \"$dsttmp\" \"$dst\" 2>/dev/null ||\n\n      # The rename failed, perhaps because mv can't rename something else\n      # to itself, or perhaps because mv is so ancient that it does not\n      # support -f.\n      {\n\t# Now remove or move aside any old file at destination location.\n\t# We try this two ways since rm can't unlink itself on some\n\t# systems and the destination file might be busy for other\n\t# reasons.  In this case, the final cleanup might fail but the new\n\t# file should still install successfully.\n\t{\n\t  test ! -f \"$dst\" ||\n\t  $doit $rmcmd -f \"$dst\" 2>/dev/null ||\n\t  { $doit $mvcmd -f \"$dst\" \"$rmtmp\" 2>/dev/null &&\n\t    { $doit $rmcmd -f \"$rmtmp\" 2>/dev/null; :; }\n\t  } ||\n\t  { echo \"$0: cannot unlink or rename $dst\" >&2\n\t    (exit 1); exit 1\n\t  }\n\t} &&\n\n\t# Now rename the file to the real destination.\n\t$doit $mvcmd \"$dsttmp\" \"$dst\"\n      }\n    fi || exit 1\n\n    trap '' 0\n  fi\ndone\n\n# Local variables:\n# eval: (add-hook 'write-file-hooks 'time-stamp)\n# time-stamp-start: \"scriptversion=\"\n# time-stamp-format: \"%:y-%02m-%02d.%02H\"\n# time-stamp-time-zone: \"UTC\"\n# time-stamp-end: \"; # UTC\"\n# End:\n"
        },
        {
          "name": "install_deps.sh",
          "type": "blob",
          "size": 1.85546875,
          "content": "#!/usr/bin/env bash\n#\n# This file is part of the LibreOffice project.\n#\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n#\n# This script attempts to install the necessary dependencies to do LibreOffice development.\n#\n# It should be kept in sync with the instructions at\n#    https://wiki.documentfoundation.org/Development/BuildingOnLinux\n#\n\n# Detect OS (i.e. distro)\nif [ -f /etc/os-release ]; then\n    # freedesktop.org and systemd\n    . /etc/os-release\n    OS=$NAME\n    VER=$VERSION_ID\nelif type lsb_release >/dev/null 2>&1; then\n    # linuxbase.org\n    OS=$(lsb_release -si)\n    VER=$(lsb_release -sr)\nelif [ -f /etc/lsb-release ]; then\n    # For some versions of Debian/Ubuntu without lsb_release command\n    . /etc/lsb-release\n    OS=$DISTRIB_ID\n    VER=$DISTRIB_RELEASE\nelif [ -f /etc/debian_version ]; then\n    # Older Debian/Ubuntu/etc.\n    OS=Debian\n    VER=$(cat /etc/debian_version)\nelif [ -f /etc/SuSe-release ]; then\n    # Older SuSE/etc.\n    ...\nelif [ -f /etc/redhat-release ]; then\n    # Older Red Hat, CentOS, etc.\n    ...\nelse\n    # Fall back to uname, e.g. \"Linux <version>\", also works for BSD, etc.\n    OS=$(uname -s)\n    VER=$(uname -r)\nfi\n\necho \"Detected OS/Distro/Version\" $OS $VER\n\nif [ \"$OS\" = \"Debian\" -o \"$OS\" = \"Ubuntu\" ]; then\n    apt-get install git build-essential zip ccache junit4 libkrb5-dev nasm graphviz python3 python3-dev qtbase5-dev libkf5coreaddons-dev libkf5i18n-dev libkf5config-dev libkf5windowsystem-dev libkf5kio-dev autoconf libcups2-dev libfontconfig1-dev gperf default-jdk doxygen libxslt1-dev xsltproc libxml2-utils libxrandr-dev bison flex libgtk-3-dev libgstreamer-plugins-base1.0-dev libgstreamer1.0-dev ant ant-optional\nelse\n    echo \"Sorry, I don't know how to install dependencies for\" $OS\nfi\n"
        },
        {
          "name": "instsetoo_native",
          "type": "tree",
          "content": null
        },
        {
          "name": "io",
          "type": "tree",
          "content": null
        },
        {
          "name": "ios",
          "type": "tree",
          "content": null
        },
        {
          "name": "javaunohelper",
          "type": "tree",
          "content": null
        },
        {
          "name": "jurt",
          "type": "tree",
          "content": null
        },
        {
          "name": "jvmaccess",
          "type": "tree",
          "content": null
        },
        {
          "name": "jvmfwk",
          "type": "tree",
          "content": null
        },
        {
          "name": "l10ntools",
          "type": "tree",
          "content": null
        },
        {
          "name": "leak-suppress.txt",
          "type": "blob",
          "size": 2.1591796875,
          "content": "#\n# This file is part of the LibreOffice project.\n#\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n#\n\n# Use via environment variable LSAN_OPTIONS=suppressions=.../leak-suppress.txt\n\n# uno typelib\nleak:cppu/source/typelib/typelib.cxx\nleak:cppuhelper/source/typemanager.cxx\n\n# uno component context\nleak:cppu::defaultBootstrap_InitialComponentContext\n\n# global objects\nleak:SfxFilterContainer::ReadSingleFilter_Impl\n\n# build-time tool soltools/cpp:\nleak:soltools/cpp/_cpp.c\n\n# bridge's RTTI information, leaked knowingly\nleak:RTTI::getRTTI\n\n# ignore glib reported leaks, most likely false positives\n# glib not built with asan/lsan\nleak:libglib\n\n# ignore gdk reported leaks, most likely false positives\n# gdk not built with asan/lsan\nleak:libgdk\n\n# ignore fontconfig reported leaks, most likely false positives\n# fontconfig not built with asan/lsan\nleak:libfontconfig.so\n\n# ignore libGL related leaks, most likely false positives\n# libGL is not built with asan/lsan\nleak:libGL.so\n\n# knowingly leaked in the unit tests to get a SfxMedium\nleak:SfxObjectShell::DoInitUnitTest\n\n# ignore some libc related leaks\nleak:__new_exitfn\nleak:__GI___strdup\n\n# ignore python leaks\nleak:_PyMem_RawMalloc\n\n# ignore leak in gpgmepp external library\nleak:mkdefsinc\n\n# idlc deliberately leaks\nleak:idlc/source/idlcmain.cxx\n\n# deliberate leak in cppunit\nleak:sal/cppunittester/cppunittester.cxx\n\n# TODO Firebird appears to be leaking like a sieve\nleak:connectivity::firebird::\nleak:Firebird::\n\n# TODO leaks in basic module\n# these appears to be some kind of ref-counting cycle\nleak:SbiRuntime::\nleak:SbModule::\n\n# LibXML leaks a couple of objects\nleak:libxml2.so\n\n# LibCoin leaks a little\nleak:coinComputeIntVariables\nleak:CoinMessages::operator=(CoinMessages const&)\n\n# ignore the in-process Java VM\nleak:libjvm\n\n# TODO The code in Signing::Verify is clearly leaking this structure, but naively destroying it inside\n# that method results in heap-use-after-free errors\nleak:NSS_CMSMessage_CreateFromDER\nleak:PK11_FindPrivateKeyFromCert\nleak:PK11_ImportDERPrivateKeyInfoAndReturnKey\n"
        },
        {
          "name": "librelogo",
          "type": "tree",
          "content": null
        },
        {
          "name": "libreofficekit",
          "type": "tree",
          "content": null
        },
        {
          "name": "lingucomponent",
          "type": "tree",
          "content": null
        },
        {
          "name": "linguistic",
          "type": "tree",
          "content": null
        },
        {
          "name": "logerrit",
          "type": "blob",
          "size": 10.4267578125,
          "content": "#!/usr/bin/env bash\n\n#GERRITHOST=gerrit.libreoffice.org\nGERRITHOST=logerrit\nGERRITURL=\"ssh://$GERRITHOST/core\"\n\nget_SHA_for_change() {\n    SHA=$(ssh \"${GERRITHOST?}\" gerrit query --all-approvals change:\"$1\" | grep ref | tail -1 | cut -d: -f2 | sed 's/^ *//')\n}\n\nbranch_or_default() {\n    local branch=$1\n    if test -z \"${branch}\"; then\n        # Try to use the tracked branch\n        branch=$(git symbolic-ref HEAD|sed 's|refs/heads/||')\n        local remote=$(git config branch.${branch}.remote)\n        branch=$(git rev-parse --abbrev-ref --symbolic-full-name HEAD@{upstream}|sed \"s|${remote}/||\")\n        if test -z \"$branch\"; then\n            branch=$(git symbolic-ref HEAD 2> /dev/null)\n            branch=\"${branch##refs/heads/}\"\n            if test -z \"${branch}\"; then\n                echo >&2 \"no branch specified, and could not guess the current branch\"\n                exit 1\n            fi\n            echo >&2 \"no branch specified, guessing current branch ${branch}\"\n        else\n            echo >&2 \"no branch specified, guessing tracked branch ${branch}\"\n        fi\n    fi\n    echo \"${branch}\"\n}\n\nlogerrit() {\n    echo \"Host logerrit gerrit.libreoffice.org\"\n    if test -n \"${2-}\" && test -f \"$HOME/.ssh/id_$2\"; then\n        echo \"    IdentityFile ~/.ssh/id_$2\"\n    fi\n    echo \"    User $1\"\n    echo \"    Port 29418\"\n    echo \"    HostName gerrit.libreoffice.org\"\n}\n\ncase \"$1\" in\n    help|--help|\"\")\n        echo \"Usage: ./logerrit subcommand [options]\"\n        echo \"simple and basic tool to interact with LibreOffice gerrit\"\n        echo \"see https://wiki.documentfoundation.org/Development/gerrit for details.\"\n        echo\n        echo \"subcommands:\"\n        echo \"             setup                   walking you though your gerrit setup\"\n        echo \"             test                    test your gerrit setup\"\n        echo\n        echo \" --- for submitters:\"\n        echo \"             submit [BRANCH]         submit your change for review\"\n        echo \"             submit [BRANCH]%private submit your change as private\"\n        echo \"             submit [BRANCH]%wip     submit your change as work-in-progress\"\n        echo \"             nextchange [BRANCH]     reset branch to the remote to start with the next change\"\n        echo \"             testfeature [BRANCH] [CHANGEID]\"\n        echo \"                                     trigger a test of a feature branch on gerrit\"\n        echo\n        echo \"Note: private changes are only visibly to yourself and those that you explicitly add as reviewers.\"\n        echo \"For full documentation, see https://gerrit.libreoffice.org/Documentation/intro-user.html#private-changes\"\n        echo\n        echo \" --- for reviewers:\"\n        echo \"             checkout CHANGEID       checkout the changes for review\"\n        echo \"             pull CHANGEID           pull (and merge) the changes on current branch\"\n        echo \"             cherry-pick CHANGEID    cherry-pick the change on current branch\"\n        echo \"             patch CHANGEID          show the change as a patch\"\n        echo \"             query ...               query for changes for review on project core\"\n        echo \"             <any other gerrit command>\"\n        echo\n        echo \"advanced users should consider using git review instead:\"\n        echo \"https://wiki.documentfoundation.org/Development/GitReview\"\n        exit\n    ;;\n    setup)\n        script_canonical_file=$(readlink -f \"$0\")\n        script_canonical_dir=$(dirname \"$script_canonical_file\")\n        if ! cd \"$script_canonical_dir\"; then\n            echo \"Can't cd to $script_canonical_dir\"\n            exit 1\n        fi\n        ssh_home=\"$HOME/.ssh\";\n        ssh_key=\n        created_ssh=\n        if ! test -d \"$ssh_home\"; then\n            echo \"It appears that you have no ssh setup, running ssh-keygen to create that:\"\n            mkdir -m0700 \"$ssh_home\"\n            created_ssh=TRUE\n            echo\n            echo \"Hit enter to generate an ssh key - you will need to enter a pass-phrase\"\n            echo\n            read -r\n            all_algo=\"$(ssh -Q key)\"\n            if grep -q -x ssh-ed25519 <<< \"$all_algo\"; then\n                algo=\"ed25519\"\n            elif grep -q -x ssh-rsa <<< \"$all_algo\"; then\n                algo=\"rsa\"\n            else\n                echo \"Could not find 'ssh-ed25519' or 'ssh-rsa' in the output from 'ssh -Q key'\"\n                exit 1\n            fi\n            ssh-keygen -t \"$algo\" # Generate the key pair using the selected algorithm\n        fi\n        if test -d \"$ssh_home\"; then\n            # order algos based on the PubkeyAcceptedKeyTypes option from OpenSSH 8.1\n            for ssh_key_type in ecdsa ed25519 rsa; do\n                pk=\"$ssh_home/id_${ssh_key_type}.pub\"\n                ssh_key=\"\"\n                if test -f \"$pk\" && ssh_key=\"$(< \"$pk\")\" && test -n \"$ssh_key\"; then\n                    break\n                fi\n            done\n        fi\n        echo \"Please go to https://gerrit.libreoffice.org/ and click the \\\"Sign in\\\" link\"\n        echo \"at the top right of the page. You'll be sent to our Single Sign-On portal\"\n        echo \"for authentication (create an account if needs be), and automatically\"\n        echo \"redirected back to gerrit afterwards.\"\n        echo\n        echo \"Visit https://gerrit.libreoffice.org/settings/#SSHKeys and paste the public\"\n        if test -z \"$ssh_key\"; then\n            echo \"part of your SSH key in the 'New SSH key' form.\"\n        else\n            echo \"key below in the 'New SSH key' form.\"\n            echo\n            printf '%s\\n' \"$ssh_key\"\n            echo\n        fi\n        echo\n        echo \"Note that you need to register additional email addresses, if you want to\"\n        echo \"commit from them. Each additional email address must be confirmed by\"\n        echo \"following the verification link sent to it.\"\n        echo\n        read -r -p 'Which user name did you choose? ' GERRITUSER\n        if test -z \"$created_ssh\"; then\n            echo\n            echo \"Please now add the following to your ~/.ssh/config, creating the file if needed:\"\n            echo\n            logerrit \"$GERRITUSER\" ${ssh_key:+\"$ssh_key_type\"}\n            echo\n        else\n        echo \"Automatically creating your ssh config\"\n        logerrit \"$GERRITUSER\" ${ssh_key:+\"$ssh_key_type\"} >\"$ssh_home/config\"\n        fi\n        # setup the remote properly ...\n        git config remote.origin.pushurl ssh://logerrit/core\n        echo \"To see if your setup was successful, run './logerrit test' then.\"\n        # a good place to make sure the hooks are set up\n        ./g -z\n    ;;\n    test)\n        if test -n \"$(ssh \"$GERRITHOST\" 2>&1|grep \"Welcome to Gerrit Code Review\")\"; then\n            echo \"Your gerrit setup was successful!\"\n        else\n            echo \"There seems to be trouble. Please have the output of:\"\n            echo \"ssh -vvvv $GERRITHOST\"\n            echo \"at hand when looking for help.\"\n        fi\n    ;;\n    submit)\n        BRANCH=$(branch_or_default $2)\n        TYPE=${3:+\"%$3\"}\n\n        if [ \"$BRANCH\" = \"master\" ]; then\n            WEEKOLDDATE=$(date --date=\"7 days ago\" +%s 2> /dev/null)\n            if [ \"$WEEKOLDDATE\" = \"\" ]; then\n                WEEKOLDDATE=$(date -v-7d +%s) # BSD equivalent\n            fi\n            PARENTDATE=$(git show -s --format=%ct HEAD~1)\n            if [[ $PARENTDATE -lt $WEEKOLDDATE ]]; then\n                echo \"Your branch is older than a week, do './g pull -r' and retry\"\n                exit 1\n            fi\n        fi\n        git push \"$GERRITURL\" \"HEAD:refs/for/$BRANCH$TYPE\"\n    ;;\n    nextchange)\n        if test -n \"$(git status -s -uno)\"; then\n            echo \"You have uncommitted changes. Please commit or stash these:\"\n            git status\n            exit 1\n        fi\n        CHANGEID=$(git log --format=format:%b -1 HEAD|grep Change-Id|cut -d: -f2|tr -d \\ )\n        if test -z \"$CHANGEID\"; then\n            CHANGEID=\"NOCHANGEID\"\n        fi\n        BACKUPBRANCH=backup/$CHANGEID-$(date +%F-%H%M%S)\n        git branch \"$BACKUPBRANCH\"\n        echo \"current state backed up as $BACKUPBRANCH\"\n        BRANCH=$(branch_or_default $2)\n        git reset --hard \"remotes/origin/$BRANCH\"\n    ;;\n    checkout)\n        get_SHA_for_change \"$2\"\n        git fetch \"$GERRITURL\" \"$SHA\" && git checkout FETCH_HEAD\n    ;;\n    review)\n        echo \"'./logerrit review' has been removed as obsolete.\"\n        echo \"Please use either:\"\n        echo \" - git-review:              https://wiki.documentfoundation.org/Development/GitReview\"\n        echo \" - or the web-UI directly:  https://gerrit.libreoffice.org/\"\n        echo \"Both provide a better experience.\"\n        exit 1;\n    ;;\n    pull)\n        get_SHA_for_change \"$2\"\n        git pull \"$GERRITURL\" \"$SHA\"\n    ;;\n    cherry-pick)\n        get_SHA_for_change \"$2\"\n        git fetch \"$GERRITURL\" \"$SHA\" && git cherry-pick FETCH_HEAD\n    ;;\n    patch)\n        get_SHA_for_change \"$2\"\n        git fetch \"$GERRITURL\" \"$SHA\" && git format-patch -1 --stdout FETCH_HEAD\n    ;;\n    query)\n        shift\n        ssh \"${GERRITHOST?}\" gerrit query project:core \"${@@Q}\"\n    ;;\n    testfeature)\n        CHANGEID=${3#I}\n        if test -n \"$3\" -a \\( ${#3} -ne 41 -o -n \"${CHANGEID//[0-9a-f]/}\" \\); then\n            echo \"${3} is not a valid Gerrit change id\"\n            exit 1\n        fi\n        CHANGEID=$3\n\n        BRANCH=$(branch_or_default $2)\n        BRANCH=\"${BRANCH##feature/}\"\n        WORKDIR=$(mktemp -d)\n        if test -z \"$WORKDIR\"; then\n            echo \"could not create work directory.\"\n            exit 1\n        fi\n        echo \"workdir at $WORKDIR\"\n        git clone -s \"$(dirname \"$0\")\" \"$WORKDIR/core\"\n\n        pushd \"$WORKDIR/core\" || { echo \"Changing directory failed.\"; exit 1; }\n        echo \"noop commit: trigger test build for branch feature/$BRANCH\" > ../commitmsg\n        echo >> ../commitmsg\n        echo \"branch is at:\" >> ../commitmsg\n        echo >> ../commitmsg\n        git log -1|sed -e \"s/Change-Id:/XXXXXX:/\" >> ../commitmsg\n        if test -n \"$CHANGEID\"; then\n            echo >> ../commitmsg\n            echo \"Change-Id: $CHANGEID\" >> ../commitmsg\n        fi\n        git fetch https://git.libreoffice.org/core \"feature/$BRANCH\" && \\\n            git checkout -b featuretst FETCH_HEAD && \\\n            cp -a .git-hooks/* .git/hooks && \\\n            git commit --allow-empty -F ../commitmsg && \\\n            git push \"$GERRITURL\" \"HEAD:refs/for/feature/$BRANCH\"\n        popd || { echo \"Changing directory failed.\"; exit 1; }\n\n        rm -rf \"$WORKDIR/core\"\n        rm -f \"$WORKDIR/commitmsg\"\n        rmdir \"$WORKDIR\"\n    ;;\n    *)\n        ssh \"${GERRITHOST?}\" gerrit \"${@@Q}\"\n    ;;\nesac\n\n# vim: set noet sw=4 ts=4:\n"
        },
        {
          "name": "lotuswordpro",
          "type": "tree",
          "content": null
        },
        {
          "name": "m4",
          "type": "tree",
          "content": null
        },
        {
          "name": "msicreator",
          "type": "tree",
          "content": null
        },
        {
          "name": "net_ure",
          "type": "tree",
          "content": null
        },
        {
          "name": "nlpsolver",
          "type": "tree",
          "content": null
        },
        {
          "name": "o3tl",
          "type": "tree",
          "content": null
        },
        {
          "name": "odk",
          "type": "tree",
          "content": null
        },
        {
          "name": "offapi",
          "type": "tree",
          "content": null
        },
        {
          "name": "officecfg",
          "type": "tree",
          "content": null
        },
        {
          "name": "oovbaapi",
          "type": "tree",
          "content": null
        },
        {
          "name": "oox",
          "type": "tree",
          "content": null
        },
        {
          "name": "opencl",
          "type": "tree",
          "content": null
        },
        {
          "name": "osx",
          "type": "tree",
          "content": null
        },
        {
          "name": "package",
          "type": "tree",
          "content": null
        },
        {
          "name": "pch",
          "type": "tree",
          "content": null
        },
        {
          "name": "postprocess",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyuno",
          "type": "tree",
          "content": null
        },
        {
          "name": "qadevOOo",
          "type": "tree",
          "content": null
        },
        {
          "name": "readlicense_oo",
          "type": "tree",
          "content": null
        },
        {
          "name": "registry",
          "type": "tree",
          "content": null
        },
        {
          "name": "remotebridges",
          "type": "tree",
          "content": null
        },
        {
          "name": "reportbuilder",
          "type": "tree",
          "content": null
        },
        {
          "name": "reportdesign",
          "type": "tree",
          "content": null
        },
        {
          "name": "ridljar",
          "type": "tree",
          "content": null
        },
        {
          "name": "sal",
          "type": "tree",
          "content": null
        },
        {
          "name": "salhelper",
          "type": "tree",
          "content": null
        },
        {
          "name": "sanitize-ubsan-excludelist",
          "type": "blob",
          "size": 0.0419921875,
          "content": "fun:*_Ios_FmtflagsS_\nfun:*yyremoveDeletes*\n"
        },
        {
          "name": "sax",
          "type": "tree",
          "content": null
        },
        {
          "name": "sc",
          "type": "tree",
          "content": null
        },
        {
          "name": "scaddins",
          "type": "tree",
          "content": null
        },
        {
          "name": "sccomp",
          "type": "tree",
          "content": null
        },
        {
          "name": "schema",
          "type": "tree",
          "content": null
        },
        {
          "name": "scp2",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripting",
          "type": "tree",
          "content": null
        },
        {
          "name": "sd",
          "type": "tree",
          "content": null
        },
        {
          "name": "sdext",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.03515625,
          "content": "[pycodestyle]\nmax-line-length = 100\n"
        },
        {
          "name": "setup_native",
          "type": "tree",
          "content": null
        },
        {
          "name": "sfx2",
          "type": "tree",
          "content": null
        },
        {
          "name": "shell",
          "type": "tree",
          "content": null
        },
        {
          "name": "slideshow",
          "type": "tree",
          "content": null
        },
        {
          "name": "smoketest",
          "type": "tree",
          "content": null
        },
        {
          "name": "solenv",
          "type": "tree",
          "content": null
        },
        {
          "name": "soltools",
          "type": "tree",
          "content": null
        },
        {
          "name": "sot",
          "type": "tree",
          "content": null
        },
        {
          "name": "starmath",
          "type": "tree",
          "content": null
        },
        {
          "name": "static",
          "type": "tree",
          "content": null
        },
        {
          "name": "stoc",
          "type": "tree",
          "content": null
        },
        {
          "name": "store",
          "type": "tree",
          "content": null
        },
        {
          "name": "svgio",
          "type": "tree",
          "content": null
        },
        {
          "name": "svl",
          "type": "tree",
          "content": null
        },
        {
          "name": "svtools",
          "type": "tree",
          "content": null
        },
        {
          "name": "svx",
          "type": "tree",
          "content": null
        },
        {
          "name": "sw",
          "type": "tree",
          "content": null
        },
        {
          "name": "swext",
          "type": "tree",
          "content": null
        },
        {
          "name": "sysui",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "testtools",
          "type": "tree",
          "content": null
        },
        {
          "name": "toolkit",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "translations",
          "type": "commit",
          "content": null
        },
        {
          "name": "tsan-suppress.txt",
          "type": "blob",
          "size": 4.203125,
          "content": "#\n# This file is part of the LibreOffice project.\n#\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n#\n\n# Use via environment variable TSAN_OPTIONS=suppressions=.../tsan-suppress.txt\n\n# There looks to be a lock ordering problem here, but I can't see how it could\n# actually be hit in practice.\ndeadlock:cppuhelper::ServiceManager::disposing()\ndeadlock:cppuhelper::ServiceManager::loadImplementation\ndeadlock:AffineBridge::v_callInto_v\n\n# Ignore stuff in external DBUS library.\n# Some kind of dbus lock issue when we call it from psp::CUPSManager.\ndeadlock:_dbus_lock\nrace:g_dbus_connection_signal_unsubscribe\nrace:g_path_get_basename\nrace:g_date_time_format_iso8601\nrace:g_realloc\n\n# inside an assert so I don't care.\nrace:cppu::OWeakConnectionPoint::acquire\nrace:AffineBridge::v_enter\nrace:__vsnprintf_chk\n\n# right now, I'm not interested in deadlocks at all, too many false+\ndeadlock:\n\n# This is checking SAL_STRING_IS_STATIC, which is safe because that is written at compile time.\n# Depending on the optimisation/debug level, the call stack may have different leaves, hence\n# specifying this in more than one way.\nrace:rtl::str::acquire<_rtl_uString>\nrace:rtl::str::release<_rtl_uString>\nrace:rtl_uString_acquire\nrace:rtl_uString_release\nrace:rtl_uString_assign\n\n# I've convinced myself this is a false+, caused by ping-ponging the buffer between two\n# threads, but I might be wrong.\nrace:XBufferedThreadedStream::getNextBlock\n\n# I am not interested in stuff the embedded JVM does.\nrace:libjvm.so\n\n# I think this is OK, because at this point we are doing\n#  if (nRefCount > 1)\n# and we know from our callers that the refcount must be at least one\n# so there is no failure mode.\nrace:ireallocSequence\n\n# TODO There appears to be a race here, initialising the\n#   ::com::sun::star::uno::Sequence< T >::s_pType\n# field. But no idea at all how to fix it.\nrace:cppu::getTypeFavourUnsigned\n\n\n# This is all inside GIO/Glib, no idea what it is doing.\n#\nrace:slab_allocator_alloc_chunk\nrace:g_source_destroy_internal\nrace:g_source_unref_internal\nrace:g_task_finalize\nrace:g_socket_send_message_with_timeout\nrace:g_idle_source_new\nrace:g_slice_alloc0\nrace:g_str_has_suffix\nrace:g_str_equal\nrace:g_strsplit\nrace:g_variant_store\n\n# Python build, lock order inversion\ndeadlock:take_gil\n\n# Not interested in deadlock issues when they involve the shutdown path \n# - the shutdown path is special, so if we see a lock-ordering here that conflicts with\n# a \"normal\" lock-ordering path, that is highly unlikely to result in a real issue.\ndeadlock:DeInitVCL\n\n# Sometimes tsan will report data-races in these, who knows why, they should be thread-safe\nrace:malloc\nrace:free\nrace:close\n\n# There is a lock-cycle here, together with the mutexes acquired in\n#    SvtSysLocaleOptions::SvtSysLocaleOptions\n#    SvtSysLocale::SvtSysLocale\n# but I can't see how it could lead to a problem in practice\ndeadlock:ItemHolder1::impl_addItem\n\n# ignore warning about nRefCount in sal_Sequence.\n# <sberg> noelgrandin, we generally assume that sal_Int32 is small enough, and hardware sane enough,\n#      that reading it will always give a sane value, i.e., if the read happens in parallel with a write,\n#      the read produces either the old, original value, or the newly written one.\nrace:cppu::createEmptySequence\nrace:uno_type_sequence_reference2One\n\n# ignore harmless data race on m_nTimeoutMS\nrace:GtkSalTimer::Start\n\n# TODO data-race with fields on salhelper::Timer, but I see no way of fixing this because this class\n# is in URE\nrace:salhelper::Timer\n\n# TODO LanguageTag is copying data around without any locking at all, but it seems to be touched\n# from multiple threads. I am nervous to randomly add locks because it is performance sensitive.\nrace:LanguageTag::\n\n# harmless race on m_storedTypeRefs\nrace:cppu::getTypeEntries\n\n# double-checked locking in our \n#    inline ::css::uno::Type const & cppu_detail_getUnoType(css:uno:Foo const *)\n# generated code\nrace:typelib_typedescription_newEmpty\nrace:typelib_typedescriptionreference_getByName\n\n# harmless race where two fields are sharing an address slot/word\nrace:ScFormulaCell::GetMatrixFlag\nrace:ScFormulaCell::InterpretTail\n"
        },
        {
          "name": "ucb",
          "type": "tree",
          "content": null
        },
        {
          "name": "ucbhelper",
          "type": "tree",
          "content": null
        },
        {
          "name": "udkapi",
          "type": "tree",
          "content": null
        },
        {
          "name": "uitest",
          "type": "tree",
          "content": null
        },
        {
          "name": "unodevtools",
          "type": "tree",
          "content": null
        },
        {
          "name": "unoidl",
          "type": "tree",
          "content": null
        },
        {
          "name": "unoil",
          "type": "tree",
          "content": null
        },
        {
          "name": "unotest",
          "type": "tree",
          "content": null
        },
        {
          "name": "unotools",
          "type": "tree",
          "content": null
        },
        {
          "name": "unoxml",
          "type": "tree",
          "content": null
        },
        {
          "name": "ure",
          "type": "tree",
          "content": null
        },
        {
          "name": "uui",
          "type": "tree",
          "content": null
        },
        {
          "name": "vbahelper",
          "type": "tree",
          "content": null
        },
        {
          "name": "vcl",
          "type": "tree",
          "content": null
        },
        {
          "name": "winaccessibility",
          "type": "tree",
          "content": null
        },
        {
          "name": "wizards",
          "type": "tree",
          "content": null
        },
        {
          "name": "writerperfect",
          "type": "tree",
          "content": null
        },
        {
          "name": "xmlhelp",
          "type": "tree",
          "content": null
        },
        {
          "name": "xmloff",
          "type": "tree",
          "content": null
        },
        {
          "name": "xmlreader",
          "type": "tree",
          "content": null
        },
        {
          "name": "xmlscript",
          "type": "tree",
          "content": null
        },
        {
          "name": "xmlsecurity",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}