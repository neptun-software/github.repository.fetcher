{
  "metadata": {
    "timestamp": 1736565432974,
    "page": 280,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pytorch/ELF",
      "stars": 3381,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.4169921875,
          "content": "---\nAccessModifierOffset: -1\nAlignAfterOpenBracket: AlwaysBreak\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlinesLeft: true\nAlignOperands:   false\nAlignTrailingComments: false\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: Empty\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: true\nBinPackArguments: false\nBinPackParameters: false\nBraceWrapping:\n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   false\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Attach\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nColumnLimit:     80\nCommentPragmas:  '^ IWYU pragma:'\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nDisableFormat:   false\nForEachMacros:   [ FOR_EACH_RANGE, FOR_EACH, ]\nIncludeCategories:\n  - Regex:           '^<.*\\.h(pp)?>'\n    Priority:        1\n  - Regex:           '^<.*'\n    Priority:        2\n  - Regex:           '.*'\n    Priority:        3\nIndentCaseLabels: true\nIndentWidth:     2\nIndentWrappedFunctionNames: false\nKeepEmptyLinesAtTheStartOfBlocks: false\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: false\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 200\nPointerAlignment: Left\nReflowComments:  true\nSortIncludes:    true\nSpaceAfterCStyleCast: false\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Cpp11\nTabWidth:        8\nUseTab:          Never\n...\n"
        },
        {
          "name": ".flake8",
          "type": "blob",
          "size": 0.10546875,
          "content": "[flake8]\nexclude =\n    __init__.py\n    __pycache__,\n    .git,\n    build,\n    experimental,\n    third_party,\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2607421875,
          "content": "# Build and interpreter artifacts\n*.a\n*.bin\n*.dSYM\n*.o\n*.pyc\n*.so\nbuild/\n__pycache__/\n\n# Random junk\n*.sw?\n*.db\n*.json\n*.swo\n*.tree\n.codemod.bookmark\n.nfs*\ntmp*.sh\ntags\nbuild/\nsave_dir*/\ntest-*/\nTesting/\npachi-*/\nexperimental/patterns.prob\nexperimental/patterns.spat\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.7646484375,
          "content": "[submodule \"third_party/concurrentqueue\"]\n\tpath = third_party/concurrentqueue\n\turl = https://github.com/cameron314/concurrentqueue.git\n[submodule \"third_party/pybind11\"]\n\tpath = third_party/pybind11\n\turl = https://github.com/pybind/pybind11.git\n[submodule \"third_party/spdlog\"]\n\tpath = third_party/spdlog\n\turl = https://github.com/gabime/spdlog.git\n[submodule \"third_party/json\"]\n\tpath = third_party/json\n\turl = https://github.com/nlohmann/json.git\n[submodule \"third_party/googletest\"]\n\tpath = third_party/googletest\n\turl = https://github.com/google/googletest.git\n[submodule \"third_party/tbb\"]\n\tpath = third_party/tbb\n\turl = https://github.com/01org/tbb.git\n\tignore = untracked\n[submodule \"third_party/cppzmq\"]\n\tpath = third_party/cppzmq\n\turl = https://github.com/zeromq/cppzmq.git\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 2.109375,
          "content": "cmake_minimum_required(VERSION 3.3)\n\n# Basic third-party dependencies\n\nfind_package(Threads)\n\n#find_package(Boost REQUIRED COMPONENTS\n#    thread\n#)\n#include_directories(${Boost_INCLUDE_DIR})\n\n# Include third-party dependencies\n\nadd_subdirectory(\n    third_party\n    ${CMAKE_CURRENT_BINARY_DIR}/third_party)\nfind_package(TBB REQUIRED tbb)  # Need to find_package in parent scope\n\n# Sanity checks\n\nif(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n    # require at least gcc 7.1\n    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 7.1)\n        message(FATAL_ERROR \"GCC version must be at least 7.1!\")\n    endif()\nendif()\n\n# Variables from Git\n\nexecute_process(COMMAND git rev-parse HEAD\n    OUTPUT_VARIABLE GIT_COMMIT_HASH)\nstring(STRIP ${GIT_COMMIT_HASH} GIT_COMMIT_HASH)\nexecute_process(COMMAND git diff-index --quiet HEAD --\n    RESULT_VARIABLE GIT_UNSTAGED)\nif(${GIT_UNSTAGED})\n    set(GIT_STAGED_STRING unstaged)\nelse()\n    set(GIT_STAGED_STRING staged)\nendif()\n\n# Global compiler config\n\nset(CMAKE_CXX_STANDARD 17)\nset(PYBIND11_CPP_STANDARD -std=c++17)\nset(CMAKE_CXX_FLAGS\n    \"${CMAKE_CXX_FLAGS} -Wall -Werror -Wextra -Wno-register -Wno-deprecated-declarations -fPIC -march=native\")\nset(CMAKE_CXX_FLAGS_RELEASE \"-O3\")\nif(NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE Release)\nendif()\n\n# Define a convenience function for tests\nfunction(add_cpp_tests prefix lib_to_link)\n    set(test_list ${ARGV})\n    list(REMOVE_AT test_list 0)\n    list(REMOVE_AT test_list 0)\n    foreach(test_file ${test_list})\n        string(REPLACE \"/\" \"_\" test_name ${test_file})\n        string(REPLACE \".cc\" \"\" test_name ${test_name})\n        string(CONCAT test_name ${prefix} ${test_name})\n        add_executable(${test_name} ${test_file})\n        add_test(${test_name} ${test_name})\n        target_link_libraries(${test_name} ${lib_to_link} gtest)\n    endforeach(test_file)\nendfunction(add_cpp_tests)\n\n# Include everything in src_cpp\n\ninclude_directories(${CMAKE_CURRENT_SOURCE_DIR}/src_cpp/)\n\n# Main ELF library\n\nadd_subdirectory(\n    src_cpp/elf\n    ${CMAKE_CURRENT_BINARY_DIR}/elf)\n\n# ELF games\n\nadd_subdirectory(\n    src_cpp/elfgames/go\n    ${CMAKE_CURRENT_BINARY_DIR}/elfgames/go)\n"
        },
        {
          "name": "CODE_OF_CONDUCT.rst",
          "type": "blob",
          "size": 0.2734375,
          "content": "===============\nCode of Conduct\n===============\n\nFacebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read the `full text`__  so that you can understand what actions will and will not be tolerated.\n\n__ https://code.fb.com/codeofconduct/\n"
        },
        {
          "name": "CONTRIBUTING.rst",
          "type": "blob",
          "size": 2.099609375,
          "content": "===================\nContributing to ELF\n===================\n\nWe want to make contributing to this project as easy and transparent as possible.\n\nDependencies\n============\n\nIn addition to the project dependencies, you'll need the following if you'd like to contribute code to ELF2::\n\n    sudo apt-get install clang-format clang-tidy\n    conda install flake8 pytest\n    conda install -c conda-forge autopep8\n\nPull Requests\n=============\n\nWe actively welcome your pull requests.\n\n1. Fork the repo and create your branch from ``master``.\n2. If you've added code that should be tested, add tests.\n3. If you've changed APIs, update the documentation.\n4. Ensure the test suite passes.\n5. Make sure your code lints (see the ``codetools/`` directory).\n6. If you haven't already, complete the Contributor License Agreement (\"CLA\").\n\nWe have a continuous integration system that will double-check steps 4 and 5 for you.\n\nContributor License Agreement (\"CLA\")\n=====================================\n\nIn order to accept your pull request, we need you to submit a CLA. You only need\nto do this once to work on any of Facebook's open source projects.\n\nComplete your CLA `here`__.\n\n__ https://code.facebook.com/cla\n\nIssues\n======\n\nWe use GitHub issues to track public bugs. Please ensure your description is\nclear and has sufficient instructions to be able to reproduce the issue.\n\nThis project is still an extremely unstable prototype so we will be limited in\nthe amount of support we're able to provide.\n\nCoding Style\n============\n\n- For C++, we use a style very similar to the `HHVM style guide`__. This prescription is not formal, and our ``.clang-format`` file and existing code should eventually be a good source of truth. Due to a quirk of ``Python.h``, all ``pybind`` includes must be first in the include order.\n- For Python, we use pep8.\n\n__ https://github.com/facebook/hhvm/blob/master/hphp/doc/coding-conventions.md\n\nWe have tools to check your C++ and Python code in the ``codetools/`` directory\n\nLicense\n=======\n\nBy contributing to ELF, you agree that your contributions will be licensed\nunder the LICENSE file in the root directory of this source tree.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 2.91015625,
          "content": "FROM ubuntu:18.04\n\n# Due to nVidia not officially supporting CUDA 9.0 in Ubuntu 18.04\n# CUDA 9.0 is manually installed from the Ubuntu 16.04 repositories\n# If in the future Nvidia releases CUDA 9.0 on Ubuntu 18.04, you can skip this part\nRUN apt-get update && apt-get install -y --no-install-recommends ca-certificates apt-transport-https gnupg2 curl && \\\n        curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub | apt-key add - && \\\n        echo \"deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64 /\" > /etc/apt/sources.list.d/cuda.list && \\\n        echo \"deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64 /\" > /etc/apt/sources.list.d/nvidia-ml.list\n\nENV CUDA_VERSION 9.0.176\nENV NVIDIA_VISIBLE_DEVICES all\nENV NVIDIA_DRIVER_CAPABILITIES compute,utility\nENV NVIDIA_REQUIRE_CUDA \"cuda>=9.0\"\n\nENV NCCL_VERSION 2.2.12\nENV CUDNN_VERSION 7.1.4.18\nENV CUDA_PKG_VERSION 9-0=$CUDA_VERSION-1\n\nENV ELF_FOLDER /go-elf\nENV MINICONDA_INSTALL_SCRIPT_NAME Miniconda3.sh\n\n# nvidia-docker 1.0\nLABEL com.nvidia.volumes.needed=\"nvidia_driver\"\nLABEL com.nvidia.cuda.version=\"${CUDA_VERSION}\"\nLABEL com.nvidia.cudnn.version=\"${CUDNN_VERSION}\"\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        cuda-cudart-$CUDA_PKG_VERSION && \\\n        ln -s cuda-9.0 /usr/local/cuda\n\n\nRUN echo \"/usr/local/nvidia/lib\" >> /etc/ld.so.conf.d/nvidia.conf && \\\necho \"/usr/local/nvidia/lib64\" >> /etc/ld.so.conf.d/nvidia.conf\n\nENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}\nENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64\n\n# install CUDA libs\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        cuda-libraries-$CUDA_PKG_VERSION \\\n        cuda-cublas-9-0=9.0.176.3-1 \\\n        libnccl2=$NCCL_VERSION-1+cuda9.0\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        libcudnn7=$CUDNN_VERSION-1+cuda9.0 && \\\n        rm -rf /var/lib/apt/lists/*\n\n# CUDA Has been fully installed, now install the dependencies for ELF\n\nRUN mkdir -p ${ELF_FOLDER}\n\nRUN apt update -y && apt install -y cmake git libboost-all-dev libzmq3-dev\n\nADD https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh ${ELF_FOLDER}/${MINICONDA_INSTALL_SCRIPT_NAME}\nRUN chmod +x ${ELF_FOLDER}/${MINICONDA_INSTALL_SCRIPT_NAME}\nRUN ${ELF_FOLDER}/${MINICONDA_INSTALL_SCRIPT_NAME} -b\nENV PATH=\"${PATH}:/root/miniconda3/bin\"\nRUN conda install -c pytorch pytorch-nightly cuda90 numpy zeromq pyzmq\n\nRUN mkdir -p ${ELF_FOLDER}/ELF\nADD . ${ELF_FOLDER}/ELF\nWORKDIR ${ELF_FOLDER}/ELF\n\nRUN git submodule sync && git submodule update --init --recursive \n\n# Use the Conda environment to compile ELF\nRUN bash -c \"source activate base && make -j4\"\n\n# Install the pretrained model\nADD https://github.com/pytorch/ELF/releases/download/pretrained-go-19x19-v0/pretrained-go-19x19-v0.bin ${ELF_FOLDER}/ELF\n\n# Set up the interactive environment\nCMD bash\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.48828125,
          "content": "BSD License\n\nFor ELF software\n\nCopyright (c) 2018-present, Facebook, Inc. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n * Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n * Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n * Neither the name Facebook nor the names of its contributors may be used to\n   endorse or promote products derived from this software without specific\n   prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.6513671875,
          "content": ".PHONY: all\nall: elf elfgames/go\n\n.PHONY: clean\nclean:\n\trm -rf build/\n\n.PHONY: test\ntest: test_cpp\n\n.PHONY: test_cpp\ntest_cpp: test_cpp_elf test_cpp_elfgames_go\n\nbuild/Makefile: CMakeLists.txt */CMakeLists.txt\n\tmkdir -p build\n\t(cd build && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..)\n\n.PHONY: elf\nelf: build/Makefile\n\t(cd build && cmake --build elf -- -j)\n\n.PHONY: test_cpp_elf\ntest_cpp_elf:\n\t(cd build/elf && GTEST_COLOR=1 ctest --output-on-failure)\n\n.PHONY: test_cpp_elfgames_go\ntest_cpp_elfgames_go:\n\t(cd build/elfgames/go && GTEST_COLOR=1 ctest --output-on-failure)\n\n.PHONY: elfgames/go\nelfgames/go: build/Makefile\n\t(cd build && cmake --build elfgames/go -- -j)\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 6.796875,
          "content": ".. footer::\n\n    Copyright |copy| 2018-present, Facebook, Inc. |---|\n    all rights reserved.\n\n.. |copy| unicode:: 0xA9\n.. |---| unicode:: U+02014\n\n===\nELF\n===\n\nELF is an Extensive, Lightweight, and Flexible platform for game research. We have used it to build our Go playing bot, `ELF OpenGo`__, which achieved a 14-0 record versus four global top-30 players in April 2018. The final score is 20-0 (each professional Go player plays 5 games).\n\n__ https://ai.facebook.com/blog/open-sourcing-new-elf-opengo-bot-and-go-research/\n\nPlease refer to `our website`__ for a full overview of ELF OpenGo-related resources, including pretrained models, numerous datasets, and a comprehensive visualization of human Go games throughout history leveraging ELF OpenGo's analysis capabilities.\n\n__ https://facebook.ai/developers/tools/elf-opengo\n\nThis version is a successor to the `original ELF platform`__.\n\n__ https://github.com/facebookresearch/ELF\n\n**DISCLAIMER**: this code is early research code. What this means is:\n\n- It may not work reliably (or at all) on your system.\n- The code quality and documentation are quite lacking, and much of the code might still feel \"in-progress\".\n- There are quite a few hacks made specifically for our systems and infrastructure.\n\n|build|\n\n.. |build| image:: https://circleci.com/gh/pytorch/ELF.png?style=shield\n\nLicense\n=======\n\nELF is released under the BSD-style licence found in the ``LICENSE`` file.\n\nCiting ELF\n==========\n\nIf you use ELF in your research, please consider citing the original NIPS paper as follows::\n\n    @inproceedings{tian2017elf,\n      author = {Yuandong Tian and Qucheng Gong and Wenling Shang and Yuxin Wu and C. Lawrence Zitnick},\n      title = {ELF: An extensive, lightweight and flexible research platform for real-time strategy games},\n      booktitle = {Advances in Neural Information Processing Systems},\n      pages = {2656--2666},\n      year = {2017}\n    }\n\nIf you use ELF OpenGo or OpenGo-like functionality, please consider citing the technical report as follows::\n\n    @inproceedings{tian2019opengo,\n      author    = {Yuandong Tian and\n                   Jerry Ma and\n                   Qucheng Gong and\n                   Shubho Sengupta and\n                   Zhuoyuan Chen and\n                   James Pinkerton and\n                   Larry Zitnick},\n      title     = {{ELF} OpenGo: an analysis and open reimplementation of AlphaZero},\n      booktitle = {Proceedings of the 36th International Conference on Machine Learning,\n                   {ICML} 2019, 9-15 June 2019, Long Beach, California, {USA}},\n      pages     = {6244--6253},\n      year      = {2019},\n      url       = {http://proceedings.mlr.press/v97/tian19a.html}\n    }\n\n\n\\* Jerry Ma, Qucheng Gong, and Shubho Sengupta contributed equally.\n\n\\*\\* We also thank Yuxin Wu for his help on this project.\n\nDependencies\n============\n\nWe run ELF using:\n\n- Ubuntu **18.04**\n- Python **3.7**\n- GCC **7.3**\n- CUDA **10.0**\n- CUDNN **7.3**\n- NCCL **2.1.2**\n\nAt the moment, this is the only supported environment. Other environments may also work, but we unfortunately do not have the manpower to investigate compatibility issues.\n\nHere are the dependency installation commands for Ubuntu 18.04 and conda::\n\n    sudo apt-get install cmake g++ gcc libboost-all-dev libzmq3-dev\n    conda install numpy zeromq pyzmq\n\n    # From the project root\n    git submodule sync && git submodule update --init --recursive\n\nYou also need to install PyTorch 1.0.0 or later::\n\n    conda install pytorch torchvision cudatoolkit=10.0 -c pytorch\n\nA Dockerfile has been provided if you wish to build ELF using Docker.\n\nBuilding\n========\n\n``cd`` to the project root and run ``make`` to build.\n\nTesting\n=======\n\nAfter building, ``cd`` to the project root and run ``make test`` to test.\n\nUsing ELF\n=========\n\nCurrently, ELF must be run straight from source. You'll need to run ``source scripts/devmode_set_pythonpath.sh`` to augment ``$PYTHONPATH`` appropriately.\n\nTraining a Go bot\n-----------------\n\nTo train a model, please follow these steps:\n\n1) Build ELF and run ``source scripts/devmode_set_pythonpath.sh`` as described above.\n\n2) Change directory to ``scripts/elfgames/go/``\n\n3) Edit ``server_addrs.py`` to specify the server's IP address. This is the machine that will train the neural network.\n\n4) Create the directory where the server will write the model directory. This defaults to ``myserver``\n\n5) Run ``start_server.sh`` to start the server. We have tested this on a machine with 8 GPUs.\n\n6) Run ``start_client.sh`` to start the clients. The clients should be able to read the model written by the server, so the clients and the server need to mount the same directory via NFS. We have tested this on 2000 clients, each running exclusively on one GPU.\n\nRunning a Go bot\n----------------\n\nHere is a basic set of commands to run and play the bot via the GTP protocol:\n\n1) Build ELF and run ``source scripts/devmode_set_pythonpath.sh`` as described above.\n\n2) Train a model, or grab a `pretrained model`_.\n\n3) Change directory to ``scripts/elfgames/go/``\n\n4) Run ``./gtp.sh path/to/modelfile.bin --verbose --gpu 0 --num_block 20 --dim 256 --mcts_puct 1.50 --batchsize 16 --mcts_rollout_per_batch 16 --mcts_threads 2 --mcts_rollout_per_thread 8192 --resign_thres 0.05 --mcts_virtual_loss 1``\n\nWe've found that the above settings work well for playing the bot. You may change ``mcts_rollout_per_thread`` to tune the thinking time per move.\n\nAfter the environment is set up and the model is loaded, you can start to type gtp commands to get the response from the engine.\n\nAnalysis mode\n-------------\n\nHere is the command to analyze an existing sgf file:\n\n1) Build ELF and run ``source scripts/devmode_set_pythonpath.sh`` as described above.\n\n2) Train a model, or grab a `pretrained model`_.\n\n3) Change directory to ``scripts/elfgames/go/``\n\n4) Run ``./analysis.sh /path/to/model --preload_sgf /path/to/sgf --preload_sgf_move_to [move_number] --dump_record_prefix [tree] --verbose --gpu 0 --mcts_puct 1.50 --batchsize 16 --mcts_rollout_per_batch 16 --mcts_threads 2 --mcts_rollout_per_thread 8192 --resign_thres 0.0 --mcts_virtual_loss 1 --num_games 1``\n\nThe settings for rollouts are similar as above. The process should run automatically after loading the environment, models and previous moves. You should see the move suggested by the AI after each move, along with its value and prior. This process will also generate a lot of tree files, prefixed with ``tree`` (you can change it with ``--dump_record_prefix`` option above.) The tree files will contain the full search at each move along with its prior and value. To abort the process simply kill it as the current implementation will run it to the end of the game.\n\n.. _pretrained model: https://dl.fbaipublicfiles.com/elfopengo/pretrained_models/pretrained-go-19x19-v2.bin\n\nLadder tests\n============\n\nWe provide a collection of just over 100 ladder scenarios in the ``ladder_suite/`` directory.\n"
        },
        {
          "name": "codetools",
          "type": "tree",
          "content": null
        },
        {
          "name": "design_doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "ladder_suite",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src_cpp",
          "type": "tree",
          "content": null
        },
        {
          "name": "src_py",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}