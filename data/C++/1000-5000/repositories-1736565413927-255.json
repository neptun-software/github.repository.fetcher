{
  "metadata": {
    "timestamp": 1736565413927,
    "page": 255,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/zopfli",
      "stars": 3453,
      "defaultBranch": "master",
      "files": [
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 5.8173828125,
          "content": "cmake_minimum_required(VERSION 2.8.11)\n\nproject(Zopfli)\n\n# Check if Zopfli is the top-level project (standalone), or a subproject\nset(zopfli_standalone FALSE)\nget_directory_property(zopfli_parent_directory PARENT_DIRECTORY)\nif(zopfli_parent_directory STREQUAL \"\")\n  set(zopfli_standalone TRUE)\nendif()\nunset(zopfli_parent_directory)\n\n#\n# Options\n#\n\n# ZOPFLI_BUILD_SHARED controls if Zopfli libraries are built as shared or\n# static\n#\n# It defaults to the value of BUILD_SHARED_LIBS if set, and in most cases\n# that should be used instead. The purpose of ZOPFLI_BUILD_SHARED is to allow\n# overriding it when built as a subproject.\nset(zopfli_shared_default OFF)\nif(DEFINED BUILD_SHARED_LIBS)\n  set(zopfli_shared_default ${BUILD_SHARED_LIBS})\nendif()\noption(ZOPFLI_BUILD_SHARED \"Build Zopfli with shared libraries\" ${zopfli_shared_default})\nunset(zopfli_shared_default)\n\n# ZOPFLI_BUILD_INSTALL controls if Zopfli adds an install target to the build\n#\n# When built standalone or as a shared library subproject, the default is ON,\n# and for static library subproject the default is OFF.\nif(zopfli_standalone OR ZOPFLI_BUILD_SHARED)\n  option(ZOPFLI_BUILD_INSTALL \"Add Zopfli install target\" ON)\nelse()\n  option(ZOPFLI_BUILD_INSTALL \"Add Zopfli install target\" OFF)\nendif()\n\n# ZOPFLI_DEFAULT_RELEASE enables changing empty build type to Release\n#\n# Make based single-configuration generators default to an empty build type,\n# which might be surprising, but could be useful if you want full control over\n# compiler and linker flags. When ZOPFLI_DEFAULT_RELEASE is ON, change an\n# empty default build type to Release.\noption(ZOPFLI_DEFAULT_RELEASE \"If CMAKE_BUILD_TYPE is empty, default to Release\" ON)\n\nif(zopfli_standalone AND ZOPFLI_DEFAULT_RELEASE)\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    message(STATUS \"CMAKE_BUILD_TYPE empty, defaulting to Release\")\n    set(CMAKE_BUILD_TYPE Release)\n  endif()\nendif()\n\n#\n# Library version\n#\nset(ZOPFLI_VERSION_MAJOR 1)\nset(ZOPFLI_VERSION_MINOR 0)\nset(ZOPFLI_VERSION_PATCH 3)\nset(ZOPFLI_VERSION ${ZOPFLI_VERSION_MAJOR}.${ZOPFLI_VERSION_MINOR}.${ZOPFLI_VERSION_PATCH})\n\nif(ZOPFLI_BUILD_SHARED)\n  set(zopfli_library_type SHARED)\nelse()\n  set(zopfli_library_type STATIC)\nendif()\n\ninclude(GNUInstallDirs)\n\n#\n# libzopfli\n#\nadd_library(libzopfli ${zopfli_library_type}\n  src/zopfli/blocksplitter.c\n  src/zopfli/cache.c\n  src/zopfli/deflate.c\n  src/zopfli/gzip_container.c\n  src/zopfli/hash.c\n  src/zopfli/katajainen.c\n  src/zopfli/lz77.c\n  src/zopfli/squeeze.c\n  src/zopfli/tree.c\n  src/zopfli/util.c\n  src/zopfli/zlib_container.c\n  src/zopfli/zopfli_lib.c\n)\ntarget_include_directories(libzopfli\n  INTERFACE\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/zopfli>\n    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\n)\nset_target_properties(libzopfli PROPERTIES\n  OUTPUT_NAME zopfli\n  VERSION ${ZOPFLI_VERSION}\n  SOVERSION ${ZOPFLI_VERSION_MAJOR}\n)\nif(UNIX AND NOT (BEOS OR HAIKU))\n  target_link_libraries(libzopfli m)\nendif()\n\n#\n# libzopflipng\n#\nadd_library(libzopflipng ${zopfli_library_type}\n  src/zopflipng/zopflipng_lib.cc\n  src/zopflipng/lodepng/lodepng.cpp\n  src/zopflipng/lodepng/lodepng_util.cpp\n)\ntarget_link_libraries(libzopflipng libzopfli)\ntarget_include_directories(libzopflipng\n  INTERFACE\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/zopflipng>\n    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\n)\nset_target_properties(libzopflipng PROPERTIES\n  OUTPUT_NAME zopflipng\n  VERSION ${ZOPFLI_VERSION}\n  SOVERSION ${ZOPFLI_VERSION_MAJOR}\n)\n\n# MSVC does not export symbols by default when building a DLL, this is a\n# workaround for recent versions of CMake\nif(MSVC AND ZOPFLI_BUILD_SHARED)\n  if(CMAKE_VERSION VERSION_LESS 3.4)\n    message(WARNING \"Automatic export of all symbols to DLL not supported until CMake 3.4\")\n  else()\n    set_target_properties(libzopfli PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS ON)\n    set_target_properties(libzopflipng PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS ON)\n  endif()\nendif()\n\n#\n# zopfli\n#\nadd_executable(zopfli src/zopfli/zopfli_bin.c)\ntarget_link_libraries(zopfli libzopfli)\nif(MSVC)\n  target_compile_definitions(zopfli PRIVATE _CRT_SECURE_NO_WARNINGS)\nendif()\n\n#\n# zopflipng\n#\nadd_executable(zopflipng src/zopflipng/zopflipng_bin.cc)\ntarget_link_libraries(zopflipng libzopflipng)\nif(MSVC)\n  target_compile_definitions(zopflipng PRIVATE _CRT_SECURE_NO_WARNINGS)\nendif()\n\n# Create aliases\n#\n# Makes targets available to projects using Zopfli as a subproject using the\n# same names as in the config file package.\nif(NOT CMAKE_VERSION VERSION_LESS 3.0)\n  add_library(Zopfli::libzopfli ALIAS libzopfli)\n  add_library(Zopfli::libzopflipng ALIAS libzopflipng)\n  add_executable(Zopfli::zopfli ALIAS zopfli)\n  add_executable(Zopfli::zopflipng ALIAS zopflipng)\nendif()\n\n#\n# Install\n#\nif(ZOPFLI_BUILD_INSTALL)\n  # Install binaries, libraries, and headers\n  install(TARGETS libzopfli libzopflipng zopfli zopflipng\n    EXPORT ZopfliTargets\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n  )\n  install(FILES src/zopfli/zopfli.h src/zopflipng/zopflipng_lib.h\n    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n  )\n\n  # Install config file package\n  #\n  # This allows CMake based projects to use the installed libraries with\n  # find_package(Zopfli).\n  if(NOT CMAKE_VERSION VERSION_LESS 3.0)\n    include(CMakePackageConfigHelpers)\n    write_basic_package_version_file(${CMAKE_CURRENT_BINARY_DIR}/ZopfliConfigVersion.cmake\n      VERSION ${ZOPFLI_VERSION}\n      COMPATIBILITY SameMajorVersion\n    )\n    # Since we have no dependencies, use export file directly as config file\n    install(EXPORT ZopfliTargets\n      DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/Zopfli\n      NAMESPACE Zopfli::\n      FILE ZopfliConfig.cmake\n    )\n    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ZopfliConfigVersion.cmake\n      DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/Zopfli\n    )\n  endif()\nendif()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.3623046875,
          "content": "Want to contribute? Great! First, read this page (including the small print at the end).\n\n### Before you contribute\nBefore we can use your code, you must sign the\n[Google Individual Contributor License Agreement](https://developers.google.com/open-source/cla/individual?csw=1)\n(CLA), which you can do online. The CLA is necessary mainly because you own the\ncopyright to your changes, even after your contribution becomes part of our\ncodebase, so we need your permission to use and distribute your code. We also\nneed to be sure of various other things—for instance that you'll tell us if you\nknow that your code infringes on other people's patents. You don't have to sign\nthe CLA until after you've submitted your code for review and a member has\napproved it, but you must do it before we can put your code into our codebase.\nBefore you start working on a larger contribution, you should get in touch with\nus first through the issue tracker with your idea so that we can help out and\npossibly guide you. Coordinating up front makes it much easier to avoid\nfrustration later on.\n\n### Code reviews\nAll submissions, including submissions by project members, require review. We\nuse Github pull requests for this purpose.\n\n### The small print\nContributions made by corporations are covered by a different agreement than\nthe one above, the Software Grant and Corporate Contributor License Agreement.\n"
        },
        {
          "name": "CONTRIBUTORS",
          "type": "blob",
          "size": 0.1337890625,
          "content": "Mark Adler\nJyrki Alakuijala\nFrédéric Kayser\nJeffrey Lim\nDaniel Reed\nHuzaifa Sidhpurwala\nPéter Szabó\nLode Vandevenne\nDerek Buitenhuis\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 11.0751953125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2011 Google Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.2568359375,
          "content": "CC ?= gcc\nCXX ?= g++\n\noverride CFLAGS := -W -Wall -Wextra -ansi -pedantic -lm -O3 -Wno-unused-function -fPIC $(CFLAGS)\noverride CXXFLAGS := -W -Wall -Wextra -ansi -pedantic -O3 -fPIC $(CXXFLAGS)\n\nZOPFLILIB_SRC = src/zopfli/blocksplitter.c src/zopfli/cache.c\\\n                src/zopfli/deflate.c src/zopfli/gzip_container.c\\\n                src/zopfli/hash.c src/zopfli/katajainen.c\\\n                src/zopfli/lz77.c src/zopfli/squeeze.c\\\n                src/zopfli/tree.c src/zopfli/util.c\\\n                src/zopfli/zlib_container.c src/zopfli/zopfli_lib.c\nZOPFLILIB_OBJ := $(patsubst %.c,obj/%.o,$(ZOPFLILIB_SRC))\nZOPFLIBIN_SRC := src/zopfli/zopfli_bin.c\nZOPFLIBIN_OBJ := $(patsubst %.c,obj/%.o,$(ZOPFLIBIN_SRC))\nLODEPNG_SRC := src/zopflipng/lodepng/lodepng.cpp src/zopflipng/lodepng/lodepng_util.cpp\nLODEPNG_OBJ := $(patsubst %.cpp,obj/%.o,$(LODEPNG_SRC))\nZOPFLIPNGLIB_SRC := src/zopflipng/zopflipng_lib.cc\nZOPFLIPNGLIB_OBJ := $(patsubst %.cc,obj/%.o,$(ZOPFLIPNGLIB_SRC))\nZOPFLIPNGBIN_SRC := src/zopflipng/zopflipng_bin.cc\nZOPFLIPNGBIN_OBJ := $(patsubst %.cc,obj/%.o,$(ZOPFLIPNGBIN_SRC))\n\n.PHONY: all libzopfli libzopflipng\n\nall: zopfli libzopfli libzopfli.a zopflipng libzopflipng libzopflipng.a\n\nobj/%.o: %.c\n\t@mkdir -p `dirname $@`\n\t$(CC) $(CFLAGS) -c $< -o $@\n\nobj/%.o: %.cc\n\t@mkdir -p `dirname $@`\n\t$(CXX) $(CXXFLAGS) -c $< -o $@\n\nobj/%.o: %.cpp\n\t@mkdir -p `dirname $@`\n\t$(CXX) $(CXXFLAGS) -c $< -o $@\n\n# Zopfli binary\nzopfli: $(ZOPFLILIB_OBJ) $(ZOPFLIBIN_OBJ)\n\t$(CC) $^ $(CFLAGS) -o $@ $(LDFLAGS)\n\n# Zopfli shared library\nlibzopfli: $(ZOPFLILIB_OBJ)\n\t$(CC) $^ $(CFLAGS) -shared -Wl,-soname,libzopfli.so.1 -o libzopfli.so.1.0.3 $(LDFLAGS)\n\n# Zopfli static library\nlibzopfli.a: $(ZOPFLILIB_OBJ)\n\tar rcs $@ $^\n\n# ZopfliPNG binary\nzopflipng: $(ZOPFLILIB_OBJ) $(LODEPNG_OBJ) $(ZOPFLIPNGLIB_OBJ) $(ZOPFLIPNGBIN_OBJ)\n\t$(CXX) $^ $(CFLAGS) -o $@ $(LDFLAGS)\n\n# ZopfliPNG shared library\nlibzopflipng: $(ZOPFLILIB_OBJ) $(LODEPNG_OBJ) $(ZOPFLIPNGLIB_OBJ)\n\t$(CXX) $^ $(CFLAGS) --shared -Wl,-soname,libzopflipng.so.1 -o libzopflipng.so.1.0.3 $(LDFLAGS)\n\n# ZopfliPNG static library\nlibzopflipng.a: $(LODEPNG_OBJ) $(ZOPFLIPNGLIB_OBJ)\n\tar rcs $@ $^\n\n# Remove all libraries and binaries\nclean:\n\trm -f zopflipng zopfli $(ZOPFLILIB_OBJ) $(ZOPFLIBIN_OBJ) $(LODEPNG_OBJ) $(ZOPFLIPNGLIB_OBJ) $(ZOPFLIPNGBIN_OBJ) libzopfli*\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 1.8134765625,
          "content": "Zopfli Compression Algorithm is a compression library programmed in C to perform\nvery good, but slow, deflate or zlib compression.\n\nThe basic function to compress data is ZopfliCompress in zopfli.h. Use the\nZopfliOptions object to set parameters that affect the speed and compression.\nUse the ZopfliInitOptions function to place the default values in the\nZopfliOptions first.\n\nZopfliCompress supports deflate, gzip and zlib output format with a parameter.\nTo support only one individual format, you can instead use ZopfliDeflate in\ndeflate.h, ZopfliZlibCompress in zlib_container.h or ZopfliGzipCompress in\ngzip_container.h.\n\nZopfliDeflate creates a valid deflate stream in memory, see:\nhttp://www.ietf.org/rfc/rfc1951.txt\nZopfliZlibCompress creates a valid zlib stream in memory, see:\nhttp://www.ietf.org/rfc/rfc1950.txt\nZopfliGzipCompress creates a valid gzip stream in memory, see:\nhttp://www.ietf.org/rfc/rfc1952.txt\n\nThis library can only compress, not decompress. Existing zlib or deflate\nlibraries can decompress the data.\n\nzopfli_bin.c is separate from the library and contains an example program to\ncreate very well compressed gzip files. Currently the makefile builds this\nprogram with the library statically linked in.\n\nThe source code of Zopfli is under src/zopfli. Build instructions:\n\nTo build zopfli, compile all .c source files under src/zopfli to a single binary\nwith C, and link to the standard C math library, e.g.:\ngcc src/zopfli/*.c -O2 -W -Wall -Wextra -Wno-unused-function -ansi -pedantic -lm -o zopfli\n\nA makefile is provided as well, but only for linux. Use \"make\" to build the\nbinary, \"make libzopfli\" to build it as a shared library. For other platforms,\nplease use the build instructions above instead.\n\nZopfli Compression Algorithm was created by Lode Vandevenne and Jyrki\nAlakuijala, based on an algorithm by Jyrki Alakuijala.\n"
        },
        {
          "name": "README.zopflipng",
          "type": "blob",
          "size": 2.9267578125,
          "content": "ZopfliPNG is a command line program to optimize the Portable Network Graphics\n(PNG) images. This version has the following features:\n- uses Zopfli compression for the Deflate compression,\n- compares several strategies for choosing scanline filter codes,\n- chooses a suitable color type to losslessly encode the image,\n- removes all chunks that are unimportant for the typical web use (metadata,\n  text, etc...),\n- optionally alters the hidden colors of fully transparent pixels for more\n  compression, and,\n- optionally converts 16-bit color channels to 8-bit.\n\nThis is an alpha-release for testing while improvements, particularly to add\npalette selection, are still being made. Feedback and bug reports are welcome.\n\nImportant:\n\nThis PNG optimizer removes ancillary chunks (pieces of metadata) from the\nPNG image that normally do not affect rendering. However in special\ncircumstances you may wish to keep some. For example for a design using\ncustom gamma correction, keeping it may be desired. Visually check in the\ntarget renderer after using ZopfliPNG. Use --keepchunks to keep chunks, e.g.\n--keepchunks=gAMA,pHYs to keep gamma and DPI information. This will increase\nfile size. The following page contains a list of ancillary PNG chunks:\nhttp://www.libpng.org/pub/png/spec/1.2/PNG-Chunks.html\n\nBuild instructions:\n\nTo build ZopfliPNG, compile all .c, .cc and .cpp files from src/zopfli,\nsrc/zopflipng and src/zopflipng/lodepng, except src/zopfli/zopfli_bin.c, to a\nsingle binary with C++, e.g.:\ng++ src/zopfli/{blocksplitter,cache,deflate,gzip_container,hash,katajainen,lz77,squeeze,tree,util,zlib_container,zopfli_lib}.c src/zopflipng/*.cc src/zopflipng/lodepng/*.cpp -O2 -W -Wall -Wextra -Wno-unused-function -ansi -pedantic -o zopflipng\n\nA makefile is provided as well, but only for linux: use \"make zopflipng\" with\nthe Zopfli makefile. For other platforms, please use the build instructions\nabove instead.\n\nThe main compression algorithm in ZopfliPNG is ported from WebP lossless, but\nnaturally cannot give as much compression gain for PNGs as it does for a more\nmodern compression codec like WebP\nhttps://developers.google.com/speed/webp/docs/webp_lossless_bitstream_specification.\n\nCompared to libpng -- an often used PNG encoder implementation -- ZopfliPNG uses\n2-3 orders of magnitude more CPU time for compression. Initial testing using a\ncorpus of 1000 PNGs with translucency, randomly selected from the internet,\ngives a compression improvement of 12% compared to convert -q 95, but only 0.5%\ncompared to pngout (from better of /f0 and /f5 runs).\n\nBy releasing this software we hope to make images on the web load faster without\na new image format, but the opportunities for optimization within PNG are\nlimited. When targeting Android, Chrome, Opera, and Yandex browsers, or by using\nsuitable plugins for other browsers, it is good to note that WebP lossless\nimages are still 26 % smaller than images recompressed with ZopfliPNG.\n\n2013-05-07, Lode Vandevenne and Jyrki Alakuijala\n"
        },
        {
          "name": "go",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}