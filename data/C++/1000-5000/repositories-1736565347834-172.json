{
  "metadata": {
    "timestamp": 1736565347834,
    "page": 172,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "abumq/easyloggingpp",
      "stars": 3819,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.095703125,
          "content": "build/*\nbuild-*\n*.pro.user\n.DS_Store\nrelease.info\nbin/*\nlogs/*\nexperiments/*\nCMakeLists.txt.user*\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 2.3212890625,
          "content": "language: cpp\nmatrix:\n  include:\n#  - os: linux\n#    dist: trusty\n#    compiler: clang\n#    before_install:\n#    - sudo add-apt-repository ppa:kubuntu-ppa/backports -y\n#    - sudo apt-get -qq update\n#    - sudo apt-get install -y libgtest-dev valgrind cmake\n#    - sudo apt-get install --only-upgrade cmake\n#    - sudo wget https://github.com/google/googletest/archive/release-1.7.0.tar.gz\n#    - sudo tar xf release-1.7.0.tar.gz\n#    - cd googletest-release-1.7.0\n#    - sudo cmake -DBUILD_SHARED_LIBS=ON .\n#    - sudo make\n#    - sudo cp -a include/gtest /usr/include\n#    - sudo cp -a libgtest_main.so libgtest.so /usr/lib/\n#    - g++ -v\n\n  - os: linux\n    dist: trusty\n    compiler: gcc\n    env:\n      - COMPILER=g++-4.8\n    addons:\n      apt:\n        sources: ['ubuntu-toolchain-r-test']\n        packages: [g++-4.8, valgrind]\n  - os: linux\n    dist: trusty\n    compiler: gcc\n    env:\n      - COMPILER=g++-4.9\n    addons:\n      apt:\n        sources: ['ubuntu-toolchain-r-test']\n        packages: [g++-4.9, valgrind]\n  - os: linux\n    dist: trusty\n    compiler: gcc\n    env:\n      - COMPILER=g++-5\n    addons:\n      apt:\n        sources: ['ubuntu-toolchain-r-test']\n        packages: [g++-5, valgrind]\n  - os: linux\n    dist: trusty\n    compiler: gcc\n    env:\n      - COMPILER=g++-6\n    addons:\n      apt:\n        sources: ['ubuntu-toolchain-r-test']\n        packages: [g++-6, valgrind]\n  - os: linux\n    dist: trusty\n    compiler: gcc\n    env:\n      - COMPILER=g++-7\n    addons:\n      apt:\n        sources: ['ubuntu-toolchain-r-test']\n        packages: [g++-7, valgrind]\n\nbefore_install:\n - sudo apt-get -qq update\n - sudo apt-get install -y libgtest-dev valgrind cmake\n - sudo wget https://github.com/google/googletest/archive/release-1.7.0.tar.gz\n - sudo tar xf release-1.7.0.tar.gz\n - cd googletest-release-1.7.0\n - sudo cmake -DBUILD_SHARED_LIBS=ON .\n - sudo make\n - sudo cp -a include/gtest /usr/include\n - sudo cp -a libgtest_main.so libgtest.so /usr/lib/\n - which valgrind\n - cd \"${TRAVIS_BUILD_DIR}\"\nbefore_script:\n - cd test/\n - cmake -Dtest=ON ../\n - make\n - ls -l\nscript: \"./easyloggingpp-unit-tests -v && cd ../samples/STL && pwd && sh ./.travis_build.sh && valgrind ./bin/very-basic.cpp.bin\"\nbranches:\n  only:\n    - master\n    - develop\nnotifications:\n  recipients:\n    - mkhan3189@gmail.com\n  email:\n    on_success: never\n    on_failure: change\nrvm:\n  - 9.00\n"
        },
        {
          "name": "ACKNOWLEDGEMENTS.md",
          "type": "blob",
          "size": 1.5986328125,
          "content": "# Acknowledgements\nThis file contains list of contributors and acknowledgement of their efforts in making this library better especially by making acceptable code changes.\n\nIf we have missed your name please feel free to add it with contribution link.\n\n| **Github User**                      |          **Contribution**        |\n|--------------------------------------|----------------------------------|\n| [@aparajita](https://github.com/aparajita)                           | [Separated out .h and .cc file](https://github.com/amrayn/easyloggingpp/pulls?q=is%3Apr+author%3Aaparajita)    |\n| [@adah1972](https://github.com/adah1972)                            | [A lot of contributions](https://github.com/amrayn/easyloggingpp/pulls?q=is%3Apr+author%3Aadah1972) |\n| [@miguelmartin75](https://github.com/miguelmartin75)                      | [Issue #11](https://github.com/amrayn/easyloggingpp/issues/11), [PR #16](https://github.com/amrayn/easyloggingpp/pull/16) |\n| [@moneromooo-monero](https://github.com/moneromooo-monero)                   | [A lot of contributions](https://github.com/amrayn/easyloggingpp/pulls?q=is%3Apr+author%3Amoneromooo-monero)|\n| [@MonsieurNicolas](https://github.com/MonsieurNicolas)                     | [PR #593](https://github.com/amrayn/easyloggingpp/pull/593) |\n| [@acowley](https://github.com/acowley)                             | [PR #593](https://github.com/amrayn/easyloggingpp/pull/577) |\n| [@rggjan](https://github.com/rggjan)                              | [PR 561](https://github.com/amrayn/easyloggingpp/pull/561) |\n| [@sgtcodfish](https://github.com/sgtcodfish) | Support for emscripten |\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 4.6796875,
          "content": "# Change Log\n\n## [9.97.1] - 20-07-2023\n### Chore\n * Rebuilt with latest gtest\n\n## [9.97.0] - 25-12-2020\n### Features\n * Support for QNX OS\n * Add library via vcpkg\n * `ENABLE_EXECINFO` option in CMake to enable/disable stack trace\n\n### Bug Fixes\n * Fix attempt to access the released memory\n * Fix `April` month name\n * Refer to unknown user as `unknown-user` instead of `user`\n * Handle low memory situation\n * Fix many compiler warnings\n\n## [9.96.7] - 24-11-2018\n- Adds support for compiling easyloggingpp using Emscripten. This allows the library to be compiled into JavaScript or WebAssembly and run in the browser while logging to the browser's JavaScript console.\n\n## [9.96.6] - 24-11-2018\n- Storage constructor (indirectly) attempts to access elStorage before it's initialized (issue #660) (@Barteks2x)\n- Fixed unused variable warning while build without performance logging feature (@wrgcpp)\n- Updated license\n\n## [9.96.5] - 07-09-2018\n### Fixes\n- Check for level enabled when using custom log message (Advanced) (issue #666)\n- Ignore interruption signal crash log\n\n## [9.96.4] - 03-04-2018\n### Fixes\n- Fixes seg fault with global lock (issue #580)\n\n## [9.96.3] - 01-04-2018\n### Fixes\n- Demangling in GCC fixed\n- `ELPP_NO_DEFAULT_LOG_FILE` now logs to null device on major platforms (windows and unix)\n- Fixes unused warnings for constants\n\n## [9.96.2] - 27-02-2018\n### Updates\n- Dispatcher now passes in pointer to log message instead of creating on the fly\n- Introduced new constructor for `Writer` for advanced usage (see amrayn/residue)\n- Use `std::unordered_map` for memory management instead of `std::map` issue #611\n\n## [9.96.1] - 23-02-2018\n### Fixes\n- Two loggers writing to same file is undefined behaviour #613\n\n## [9.96.0] - 14-02-2018\n### Fixes\n- Potential deadlocks in extreme edge case #609\n- Respect `MaxLogFileSize` setting even when `ELPP_NO_DEFAULT_LOG_FILE` is set (@MonsieurNicolas)\n- Disable log file **initially** when using `ELPP_NO_LOG_TO_FILE`, to be consistent with documentation (@rggjan)\n\n### Updates\n- `el::Storage` no longer contains locks as it should be\n- Reformatted both files with `astyle`\n- License text updated\n\n### Added\n- Install a pkg-config `.pc` file (@acowley)\n\n## [9.95.4] - 10-02-2018\n### Fixes\n- Fix documentation (see PR#597)\n- Fix buffer underflow in getBashOutput (see PR#596)\n\n### Updates\n- Added new function `Helpers::reserveCustomFormatSpecifier` (see #606)\n- Made `DateTime::buildTimeInfo` public for use\n\n## [9.95.3] - 13-10-2017\n### Fixes\n- Multithreading issue fixed raised from last release at log builder\n\n## [9.95.2] - 12-06-2017\n### Fixes\n - Build fix for kFreeBSD as suggested in issue #563\n - Fixed issue with deadlock on dispatch (see #571)\n - Fixed printf like logging with thread safety (see #572)\n\n### Updates\n - Added support for AIX (thanks to @apollo13)\n\n## [9.95.0] - 02-08-2017\n### Added\n - Added NetBSD as unix [coypoop](https://github.com/amrayn/easyloggingpp/pull/548/commits)\n - Ignore `NDEBUG` or `_DEBUG` to determine whether debug logs should be enabled or not. Use `ELPP_DISABLE_DEBUG_LOGS`\n\n### Fixes\n - Fix compile when `_USE_32_BIT_TIME_T` defined [gggin](https://github.com/amrayn/easyloggingpp/pull/542/files)\n - Fix invalid usage of safeDelete which can cause an error with valgrind [Touyote](https://github.com/amrayn/easyloggingpp/pull/544/files)\n - Add code to ensure no nullptr references [tepperly](https://github.com/amrayn/easyloggingpp/pull/512/files)\n\n## [9.94.2] - 12-04-2017\n### Added\n - CMake option to create static lib (thanks to @romariorios)\n - Ability to use UTC time using `ELPP_UTC_DATETIME` (thanks to @romariorios)\n - CMake module updated to support static lib\n\n### Changes\n - Renamed long format specifiers to full names with padding for readbility\n\n### Fixes\n - Fixed Android NDK build (thanks to @MoroccanMalinois)\n - Fix `ELPP_DISABLE_LOGS` not working in VS (thanks to @goloap) #365\n\n## [9.94.1] - 25-02-2017\n### Fixed\n - Fixes for `/W4` level warnings generated in MSVC compile (Thanks to [Falconne](https://github.com/Falconne))\n - Fixed links\n - Fixes removing default logger if other than `default`\n\n### Changes\n - Changed documentation to mention `easylogging++.cc` in introduction and added links to features\n\n## [9.94.0] - 14-02-2017\n### Fixed\n - Fixed performance tracking time unit and calculations\n\n### Added\n - Restored `ELPP_DEFAULT_LOGGER` and `ELPP_DEFAULT_PERFORMANCE_LOGGER`\n - `Helpers::getThreadName` for reading current thread name\n - Custom format specifier now has to return `std::string` instead\n - Merged `thread_name` with `thread` if thread name is available it's used otherwise ID is displayed\n\nFor older versions please refer to [https://github.com/amrayn/easyloggingpp/tree/master/doc](https://github.com/amrayn/easyloggingpp/tree/master/doc)\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 3.5517578125,
          "content": "cmake_minimum_required(VERSION 2.8.7)\n\nproject(Easyloggingpp CXX)\n\nmacro(require_cpp14)\n        if (${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION} GREATER 3.0)\n                # CMake 3.1 has built-in CXX standard checks.\n                message(\"-- Setting C++14\")\n                set(CMAKE_CXX_STANDARD 14)\n                set(CMAKE_CXX_STANDARD_REQUIRED on)\n        else()\n                if (CMAKE_CXX_COMPILER_ID MATCHES \"GCC\")\n                    message (\"-- GNU CXX (-std=c++14)\")\n                    list(APPEND CMAKE_CXX_FLAGS \"-std=c++14\")\n                elseif (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n                    message (\"-- CLang CXX (-std=c++14)\")\n                    list(APPEND CMAKE_CXX_FLAGS \"-std=c++14\")\n                else()\n                    message (\"-- Easylogging++ requires C++14. Your compiler does not support it.\")\n                endif()\n        endif()\nendmacro()\n\noption(test \"Build all tests\" OFF)\noption(build_static_lib \"Build easyloggingpp as a static library\" OFF)\noption(lib_utc_datetime \"Build library with UTC date/time logging\" OFF)\n\nset(ELPP_MAJOR_VERSION \"9\")\nset(ELPP_MINOR_VERSION \"96\")\nset(ELPP_PATCH_VERSION \"7\")\nset(ELPP_VERSION_STRING \"${ELPP_MAJOR_VERSION}.${ELPP_MINOR_VERSION}.${ELPP_PATCH_VERSION}\")\n\nset(ELPP_INCLUDE_INSTALL_DIR \"${CMAKE_INSTALL_PREFIX}/include\" CACHE PATH \"The directory the headers are installed in\")\nset(ELPP_PKGCONFIG_INSTALL_DIR \"${CMAKE_INSTALL_PREFIX}/share/pkgconfig\" CACHE PATH \"Installation directory for pkgconfig (.pc) files\")\n\ninclude_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)\n\ninstall(FILES\n    src/easylogging++.h\n    src/easylogging++.cc\n    DESTINATION \"${ELPP_INCLUDE_INSTALL_DIR}\"\n    COMPONENT dev)\n\nconfigure_file( ${CMAKE_CURRENT_SOURCE_DIR}/cmake/easyloggingpp.pc.cmakein\n    ${CMAKE_CURRENT_BINARY_DIR}/easyloggingpp.pc @ONLY)\n\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/easyloggingpp.pc DESTINATION \"${ELPP_PKGCONFIG_INSTALL_DIR}\")\n\ninclude(CheckIncludeFileCXX)\ncheck_include_file_cxx(\"execinfo.h\" HAVE_EXECINFO)\nif (HAVE_EXECINFO)\n\tadd_definitions(-DHAVE_EXECINFO)\nendif()\n\nif (build_static_lib)\n        if (lib_utc_datetime)\n                add_definitions(-DELPP_UTC_DATETIME)\n        endif()\n\n        require_cpp14()\n        add_library(easyloggingpp STATIC src/easylogging++.cc)\n        set_property(TARGET easyloggingpp PROPERTY POSITION_INDEPENDENT_CODE ON)\n\n        install(TARGETS\n            easyloggingpp\n            ARCHIVE DESTINATION lib)\nendif()\n\nexport(PACKAGE ${PROJECT_NAME})\n\n\n########################################## Unit Testing ###################################\nif (test)\n    # We need C++14 (Google Test requirement)\n    require_cpp14()\n    set (CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${CMAKE_SOURCE_DIR}/cmake\")\n\n    find_package (GTest REQUIRED)\n    include_directories (${GTEST_INCLUDE_DIRS})\n\n    enable_testing()\n\n    if (EMSCRIPTEN)\n        set(CMAKE_EXE_LINKER_FLAGS \"-O2 -s TOTAL_MEMORY=134217728\")\n    endif()\n\n    add_executable(easyloggingpp-unit-tests\n        src/easylogging++.cc\n        test/main.cc\n    )\n\n    target_compile_definitions(easyloggingpp-unit-tests PUBLIC\n        ELPP_FEATURE_ALL\n        ELPP_LOGGING_FLAGS_FROM_ARG\n        ELPP_NO_DEFAULT_LOG_FILE\n        ELPP_FRESH_LOG_FILE\n        ELPP_STOP_ON_FIRST_ASSERTION\n        ELPP_STL_LOGGING\n        ELPP_FORCE_ENV_VAR_FROM_BASH\n        ELPP_ENABLE_THREADING\n        ELPP_FEATURE_CRASH_LOG\n        ELPP_SYSLOG\n    )\n\n    # Standard linking to gtest stuff.\n    target_link_libraries(easyloggingpp-unit-tests ${GTEST_BOTH_LIBRARIES})\n\n    add_test(NAME easyloggingppUnitTests COMMAND easyloggingpp-unit-tests -v)\nendif()\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.06640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2012-present @abumq (Majid Q.)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 96.4794921875,
          "content": "<p align=\"center\">\n  ﷽\n</p>\n\n![banner]\n\n> **Documentation for v9.97.1**\n\n[![Tests](https://github.com/abumq/easyloggingpp/actions/workflows/run-tests.yml/badge.svg)](https://github.com/abumq/easyloggingpp/actions/workflows/run-tests.yml)\n[![Node Binding Version](https://img.shields.io/github/release/abumq/easyloggingpp.svg)](https://github.com/abumq/easyloggingpp-node/releases/latest)\n[![Version](https://img.shields.io/npm/v/easyloggingpp.svg)](https://www.npmjs.com/package/easyloggingpp)\n[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/abumq/easyloggingpp/blob/master/LICENCE)\n[![Downloads](https://img.shields.io/github/downloads/abumq/easyloggingpp/total.svg)](https://github.com/abumq/easyloggingpp/releases/latest)\n\n### Quick Links\n\n  → [Latest Release](https://github.com/abumq/easyloggingpp/releases/latest)\n\n  → [Changelog](/CHANGELOG.md)\n\n  → [Samples](/samples)\n\n---\n\n### Table of Contents\n<pre>\n<a href=\"#overview\">Overview</a>\n    <a href=\"#why-yet-another-library\">Why yet another library</a>\n    <a href=\"#features-at-a-glance\">Features at a glance</a>\n<a href=\"#getting-started\">Getting Started</a>\n    <a href=\"#download\">Download</a>\n    <a href=\"#quick-start\">Quick Start</a>\n    <a href=\"#install-optional\">Install (Optional)</a>\n    <a href=\"#setting-application-arguments\">Setting Application Arguments</a>\n<a href=\"#configuration\">Configuration</a>\n    <a href=\"#level\">Level</a>\n    <a href=\"#configure\">Configure</a>\n        <a href=\"#using-configuration-file\">Using Configuration File</a>\n        <a href=\"#using-elconfigurations-class\">Using el::Configurations Class</a>\n        <a href=\"#using-in-line-configurations\">Using In line Configurations</a>\n    <a href=\"#default-configurations\">Default Configurations</a>\n    <a href=\"#global-configurations\">Global Configurations</a>\n    <a href=\"#logging-format-specifiers\">Logging Format Specifiers</a>\n    <a href=\"#datetime-format-specifiers\">Date/Time Format Specifiers</a>\n    <a href=\"#custom-format-specifiers\">Custom Format Specifiers</a>\n    <a href=\"#logging-flags\">Logging Flags</a>\n    <a href=\"#application-arguments\">Application Arguments</a>\n    <a href=\"#configuration-macros\">Configuration Macros</a>\n    <a href=\"#reading-configurations\">Reading Configurations</a>\n<a href=\"#logging\">Logging</a>\n    <a href=\"#basic\">Basic</a>\n    <a href=\"#conditional-logging\">Conditional Logging</a>\n    <a href=\"#occasional-logging\">Occasional Logging</a>\n    <a href=\"#printf-like-logging\">printf Like Logging</a>\n    <a href=\"#network-logging\">Network Logging</a>\n    <a href=\"#verbose-logging\">Verbose Logging</a>\n        <a href=\"#basic-1\">Basic</a>\n        <a href=\"#conditional-and-occasional-logging\">Conditional and Occasional</a>\n        <a href=\"#verbose-level\">Verbose Level</a>\n        <a href=\"#check-if-verbose-logging-is-on\">Check If Verbose Logging Is On</a>\n        <a href=\"#vmodule\">VModule</a>\n    <a href=\"#registering-new-loggers\">Registering New Loggers</a>\n    <a href=\"#unregister-loggers\">Unregister Loggers</a>\n    <a href=\"#populating-existing-logger-ids\">Populating Existing Logger IDs</a>\n    <a href=\"#sharing-logging-repository\">Sharing Logging Repository</a>\n<a href=\"#extra-features\">Extra Features</a>\n    <a href=\"#performance-tracking\">Performance Tracking</a>\n        <a href=\"#conditional-performance-tracking\">Conditional Performance Tracking</a>\n        <a href=\"#make-use-of-performance-tracking-data\">Make Use of Performance Tracking Data</a>\n    <a href=\"#log-file-rotating\">Log File Rotating</a>\n    <a href=\"#crash-handling\">Crash Handling</a>\n        <a href=\"#installing-custom-crash-handlers\">Installing Custom Crash Handlers</a>\n    <a href=\"#stacktrace\">Stacktrace</a>\n    <a href=\"#multi-threading\">Multi-threading</a>\n    <a href=\"#check-macros\">CHECK Macros</a>\n    <a href=\"#logging-perror\">Logging perror()</a>\n    <a href=\"#syslog\">Using Syslog</a>\n    <a href=\"#stl-logging\">STL Logging</a>\n        <a href=\"#supported-templates\">Supported Templates</a>\n    <a href=\"#qt-logging\">Qt Logging</a>\n    <a href=\"#boost-logging\">Boost Logging</a>\n    <a href=\"#wxwidgets-logging\">wxWidgets Logging</a>\n    <a href=\"#extending-library\">Extending Library</a>\n        <a href=\"#logging-your-own-class\">Logging Your Own Class</a>\n        <a href=\"#logging-third-party-class\">Logging Third-party Class</a>\n    <a href=\"#manually-flushing-and-rolling-log-files\">Manually Flushing and Rolling Log Files</a>\n    <a href=\"#log-dispatch-callback\">Log Dispatch Callback</a>\n    <a href=\"#logger-registration-callback\">Logger Registration Callback</a>\n    <a href=\"#asynchronous-logging\">Asynchronous Logging</a>\n    <a href=\"#helper-classes\">Helper Classes</a>\n<a href=\"#contribution\">Contribution</a>\n    <a href=\"#submitting-patches\">Submitting Patches</a>\n    <a href=\"#reporting-a-bug\">Reporting a Bug</a>\n<a href=\"#compatibility\">Compatibility</a>\n    <a href=\"#build-matrix\">Build Matrix</a>\n<a href=\"#licence\">Licence</a>\n<a href=\"#disclaimer\">Disclaimer</a>\n</pre>\n\n# Overview\nEasylogging++ is single header efficient logging library for C++ applications. It is extremely powerful, highly extendable and configurable to user's requirements. It provides ability to [write your own _sinks_](/samples/send-to-network) (via featured referred as `LogDispatchCallback`). This library is currently used by [hundreds of open-source projects on github](https://github.com/search?q=%22easylogging%2B%2B.h%22&type=Code&utf8=%E2%9C%93) and other open-source source control management sites.\n\nThis manual is for Easylogging++ v9.97.1. For other versions please refer to corresponding [release](https://github.com/abumq/easyloggingpp/releases) on github.\n\n> You may also be interested in [Residue](https://github.com/abumq/residue/) logging server.\n\n [![top] Goto Top](#table-of-contents)\n\n### Why yet another library\nIf you are working on a small utility or large project in C++, this library can be handy. Its based on single header and only requires to link to single source file. (Originally it was header-only and was changed to use source file in [issue #445](https://github.com/abumq/easyloggingpp/issues/445). You can still use header-only in [v9.89](https://github.com/abumq/easyloggingpp/releases/tag/9.89)).\n\nThis library has been designed with various thoughts in mind (i.e, portability, performance, usability, features and easy to setup).\n\nWhy yet another library? Well, answer is pretty straight forward, use it as you wrote it so you can fix issues (if any) as you go or raise them on github. In addition to that, I personally have not seen any logging library based on single-header with such a design where you can configure on the go, extend it to your needs and get fast performance. I have seen other single-header logging libraries for C++ but either they use external libraries, e.g, boost or Qt to support certain features like threading, regular expression or date etc. This library has everything built-in to prevent usage of external libraries, not that I don't like those libraries, in fact I love them, but because not all projects use these libraries, I couldn't take risk of depending on them.\n\n [![top] Goto Top](#table-of-contents)\n\n### Features at a glance\nEasylogging++ is feature-rich containing many features that both typical and advanced developer will require while writing a software;\n * [Highly configurable](#configuration)\n * [Extendable](#extending-library)\n * Extremely fast\n * [Thread](#multi-threading) and type safe\n * [Cross-platform](#compatibility)\n * [Custom log patterns](#logging-format-specifiers)\n * [Conditional and occasional logging](#conditional-logging)\n * [Performance tracking](#performance-tracking)\n * [Verbose logging](#verbose-logging)\n * [Crash handling](#crash-handling)\n * [Helper CHECK macros](#check-macros)\n * [STL logging](#stl-logging)\n * [Send to Syslog](#syslog)\n * [Third-party library logging (Qt, boost, wxWidgets etc)](#logging-third-party-class)\n * [Extensible (Logging your own class or third-party class)](#logging-your-own-class)\n * [And many more...](#extra-features)\n\n [![top] Goto Top](#table-of-contents)\n\n# Getting Started\n### Download\nDownload latest version from [Latest Release](https://github.com/abumq/easyloggingpp/releases/latest)\n\nFor other releases, please visit [releases page](https://github.com/abumq/easyloggingpp/releases). If you application does not support C++11, please consider using [v8.91](https://github.com/abumq/easyloggingpp/tree/v8.91). This is stable version for C++98 and C++03, just lack some features.\n\n [![top] Goto Top](#table-of-contents)\n\n### Quick Start\nIn order to get started with Easylogging++, you can follow three easy steps:\n* Download latest version\n* Include into your project (`easylogging++.h` and `easylogging++.cc`)\n* Initialize using single macro... and off you go!\n\n```c++\n#include \"easylogging++.h\"\n\nINITIALIZE_EASYLOGGINGPP\n\nint main(int argc, char* argv[]) {\n   LOG(INFO) << \"My first info log using default logger\";\n   return 0;\n}\n```\n\nNow compile using\n\n```\ng++ main.cc easylogging++.cc -o prog -std=c++11\n```\n\nThat simple! Please note that `INITIALIZE_EASYLOGGINGPP` should be used once and once-only otherwise you will end up getting compilation errors. This is the definition of several `extern` variables. This means it can be defined only once per application. Best place to put this initialization statement is in file where `int main(int, char**)` function is defined, right after last include statement.\n\n### Install (Optional)\nIf you want to install this header system-wide, you can do so via:\n```\nmkdir build\ncd build\ncmake -Dtest=ON ../\nmake\nmake test\nmake install\n```\n\nFollowing options are supported by Easylogging++ cmake and you can turn these options on using `-D<option>=ON`\n\n * `lib_utc_datetime` - Defines `ELPP_UTC_DATETIME`\n * `build_static_lib` - Builds static library for Easylogging++\n\nWith that said, you will still need `easylogging++.cc` file in order to compile. For header only, please check [v9.89](https://github.com/abumq/easyloggingpp/releases/tag/9.89) and lower.\n\nAlternatively, you can download and install easyloggingpp using the [vcpkg](https://github.com/Microsoft/vcpkg/) dependency manager:\n\n    git clone https://github.com/Microsoft/vcpkg.git\n    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n    ./vcpkg install easyloggingpp\n\nThe easyloggingpp port in vcpkg is kept up to date by Microsoft team members and community contributors.\nIf the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\n [![top] Goto Top](#table-of-contents)\n\n### Setting Application Arguments\nIt is always recommended to pass application arguments to Easylogging++. Some features of Easylogging++ require you to set application arguments, e.g, verbose logging to set verbose level or vmodules (explained later). In order to do that you can use helper macro or helper class;\n\n```c++\nint main(int argc, char* argv[]) {\n   START_EASYLOGGINGPP(argc, argv);\n   ...\n}\n```\n [![top] Goto Top](#table-of-contents)\n\n# Configuration\n### Level\nIn order to start configuring your logging library, you must understand severity levels. Easylogging++ deliberately does not use hierarchical logging in order to fully control what's enabled and what's not. That being said, there is still option to use hierarchical logging using `LoggingFlag::HierarchicalLogging`. Easylogging++ has following levels (ordered for hierarchical levels)\n\n|   Level  |                 Description                                                                                                                                   |\n|----------|---------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Global   | Generic level that represents all levels. Useful when setting global configuration for all levels.                                                            |\n| Trace    | Information that can be useful to back-trace certain events - mostly useful than debug logs.                                                                  |\n| Debug    | Informational events most useful for developers to debug application. Only applicable if NDEBUG is not defined (for non-VC++) or _DEBUG is defined (for VC++).|\n| Fatal    | Very severe error event that will presumably lead the application to abort.                                                                                   |\n| Error    | Error information but will continue application to keep running.                                                                                              |\n| Warning  | Information representing errors in application but application will keep running.                                                                             |\n| Info     | Mainly useful to represent current progress of application.                                                                                                   |\n| Verbose  | Information that can be highly useful and vary with verbose logging level. Verbose logging is not applicable to hierarchical logging.                         |\n| Unknown  | Only applicable to hierarchical logging and is used to turn off logging completely.                                                                           |\n\n [![top] Goto Top](#table-of-contents)\n\n### Configure\nEasylogging++ is easy to configure. There are three possible ways to do so,\n* Using configuration file\n* Using el::Configurations class\n* Using inline configuration\n\n#### Using Configuration File\nConfiguration can be done by file that is loaded at runtime by `Configurations` class. This file has following format;\n```\n* LEVEL:\n  CONFIGURATION NAME  = \"VALUE\" ## Comment\n  ANOTHER CONFIG NAME = \"VALUE\"\n```\n\nLevel name starts with a star (*) and ends with colon (:). It is highly recommended to start your configuration file with `Global` level so that any configuration not specified in the file will automatically use configuration from `Global`. For example, if you set `Filename` in `Global` and you want all the levels to use same filename, do not set it explicitly for each level, library will use configuration value from `Global` automatically.\nFollowing table contains configurations supported by configuration file.\n\n|   Configuration Name  |   Type   |                 Description                                                                                                                                                 |\n|-----------------------|----------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `Enabled`               |   bool   | Determines whether or not corresponding level for logger is enabled. You may disable all logs by using `el::Level::Global`                                                |\n| `To_File`               |   bool   | Whether or not to write corresponding log to log file                                                                                                                     |\n| `To_Standard_Output`    |   bool   | Whether or not to write logs to standard output e.g, terminal or command prompt                                                                                           |\n| `Format`                |   char*  | Determines format/pattern of logging for corresponding level and logger.                                                                                                  |\n| `Filename`              |   char*  | Determines log file (full path) to write logs to for corresponding level and logger                                                                                       |\n| `Subsecond_Precision`   |   uint   | Specifies subsecond precision (previously called 'milliseconds width'). Width can be within range (1-6)                                                                   |\n| `Performance_Tracking`  |   bool   | Determines whether or not performance tracking is enabled. This does not depend on logger or level. Performance tracking always uses 'performance' logger unless specified|\n| `Max_Log_File_Size`     |   size_t | If log file size of corresponding level is >= specified size, log file will be truncated.                                                                                 |\n| `Log_Flush_Threshold`   |  size_t  | Specifies number of log entries to hold until we flush pending log data                                                                                                   |\n\n\nPlease do not use double-quotes anywhere in comment, you might end up in unexpected behaviour.\n\nSample Configuration File\n```\n* GLOBAL:\n   FORMAT               =  \"%datetime %msg\"\n   FILENAME             =  \"/tmp/logs/my.log\"\n   ENABLED              =  true\n   TO_FILE              =  true\n   TO_STANDARD_OUTPUT   =  true\n   SUBSECOND_PRECISION  =  6\n   PERFORMANCE_TRACKING =  true\n   MAX_LOG_FILE_SIZE    =  2097152 ## 2MB - Comment starts with two hashes (##)\n   LOG_FLUSH_THRESHOLD  =  100 ## Flush after every 100 logs\n* DEBUG:\n   FORMAT               = \"%datetime{%d/%M} %func %msg\"\n```\n\n##### Explanation\nConfiguration file contents in above sample is straightforward. We start with `GLOBAL` level in order to override all the levels. Any explicitly defined subsequent level will override configuration from `GLOBAL`. For example, all the levels except for `DEBUG` have the same format, i.e, datetime and log message. For `DEBUG` level, we have only date (with day and month), source function and log message. The rest of configurations for `DEBUG` are used from `GLOBAL`. Also, notice `{%d/%M}` in `DEBUG` format above, if you do not specify date format, default format is used. Default values of date/time is `%d/%M/%Y %h:%m:%s,%g` For more information on these format specifiers, please refer to [Date/Time Format Specifier](#datetime-format-specifiers) section below\n\n##### Usage\n```c++\n#include \"easylogging++.h\"\n\nINITIALIZE_EASYLOGGINGPP\n\nint main(int argc, const char** argv) {\n    // Load configuration from file\n    el::Configurations conf(\"/path/to/my-conf.conf\");\n    // Reconfigure single logger\n    el::Loggers::reconfigureLogger(\"default\", conf);\n    // Actually reconfigure all loggers instead\n    el::Loggers::reconfigureAllLoggers(conf);\n    // Now all the loggers will use configuration from file\n}\n```\n\n > Your configuration file can be converted to `el::Configurations` object (using constructor) that can be used where ever it is needed (like in above example).\n\n [![top] Goto Top](#table-of-contents)\n\n#### Using el::Configurations Class\nYou can set configurations or reset configurations;\n```c++\n#include \"easylogging++.h\"\n\nINITIALIZE_EASYLOGGINGPP\n\nint main(int argc, const char** argv) {\n   el::Configurations defaultConf;\n   defaultConf.setToDefault();\n    // Values are always std::string\n   defaultConf.set(el::Level::Info,\n            el::ConfigurationType::Format, \"%datetime %level %msg\");\n    // default logger uses default configurations\n    el::Loggers::reconfigureLogger(\"default\", defaultConf);\n    LOG(INFO) << \"Log using default file\";\n    // To set GLOBAL configurations you may use\n   defaultConf.setGlobally(\n            el::ConfigurationType::Format, \"%date %msg\");\n   el::Loggers::reconfigureLogger(\"default\", defaultConf);\n    return 0;\n}\n```\n\n > Configuration just needs to be set once. If you are happy with default configuration, you may use it as well.\n\n [![top] Goto Top](#table-of-contents)\n\n#### Using In line Configurations\nInline configuration means you can set configurations in `std::string` but make sure you add all the new line characters etc. This is not recommended because it's always messy.\n```c++\nel::Configurations c;\nc.setToDefault();\nc.parseFromText(\"*GLOBAL:\\n FORMAT = %level %msg\");\n```\n\n > Above code only sets Configurations object, you still need to re-configure logger/s using this configurations.\n\n [![top] Goto Top](#table-of-contents)\n\n### Default Configurations\nIf you wish to have a configuration for existing and future loggers, you can use `el::Loggers::setDefaultConfigurations(el::Configurations& configurations, bool configureExistingLoggers = false)`. This is useful when you are working on fairly large scale, or using a third-party library that is already using Easylogging++. Any newly created logger will use default configurations. If you wish to configure existing loggers as well, you can set second argument to `true` (it defaults to `false`).\n\n [![top] Goto Top](#table-of-contents)\n\n### Global Configurations\n`Level::Global` is nothing to do with global configurations, it is concept where you can register configurations for all/or some loggers and even register new loggers using configuration file. Syntax of configuration file is:\n```\n-- LOGGER ID ## Case sensitive\n  ## Everything else is same as configuration file\n\n\n-- ANOTHER LOGGER ID\n  ## Configuration for this logger\n```\n\nLogger ID starts with two dashes. Once you have written your global configuration file you can configure your all loggers (and register new ones) using single function;\n```c++\nint main(void) {\n   // Registers new and configures it or\n   // configures existing logger - everything in global.conf\n   el::Loggers::configureFromGlobal(\"global.conf\");\n   // .. Your prog\n   return 0;\n}\n```\nPlease note, it is not possible to register new logger using global configuration without defining its configuration. You must define at least single configuration. Other ways to register loggers are discussed in [Logging](#logging) section below.\n\n [![top] Goto Top](#table-of-contents)\n\n### Logging Format Specifiers\nYou can customize format of logging using following specifiers:\n\n|     Specifier   |                 Replaced By                                                                 |\n|-----------------|---------------------------------------------------------------------------------------------|\n| `%logger`       | Logger ID                                                                                   |\n| `%thread`       | Thread ID - Uses std::thread if available, otherwise GetCurrentThreadId() on windows        |\n| `%thread_name`  | Use `Helpers::setThreadName` to set name of current thread (where you run `setThreadName` from). See [Thread Names sample](/samples/STL/thread-names.cpp)|\n| `%level`        | Severity level (Info, Debug, Error, Warning, Fatal, Verbose, Trace)                         |\n| `%levshort`     | Severity level (Short version i.e, I for Info and respectively D, E, W, F, V, T)            |\n| `%vlevel`       | Verbosity level (Applicable to verbose logging)                                             |\n| `%datetime`     | Date and/or time - Pattern is customizable - see Date/Time Format Specifiers below          |\n| `%user`         | User currently running application                                                          |\n| `%host`         | Computer name application is running on                                                     |\n| `%file`*         | File name of source file (Full path) - This feature is subject to availability of `__FILE__` macro of compiler                                                        |\n| `%fbase`*        | File name of source file (Only base name)                                                   |\n| `%line`*         | Source line number - This feature is subject to availability of `__LINE__` macro of compile |\n| `%func`*         | Logging function                                                                            |\n| `%loc`*          | Source filename and line number of logging (separated by colon)                             |\n| `%msg`          | Actual log message                                                                          |\n| `%`             | Escape character (e.g, %%level will write %level)                                           |\n\n* Subject to compiler's availability of certain macros, e.g, `__LINE__`, `__FILE__` etc\n\n [![top] Goto Top](#table-of-contents)\n\n### Date/Time Format Specifiers\nYou can customize date/time format using following specifiers\n\n|    Specifier    |                 Replaced By                                                                                      |\n|-----------------|------------------------------------------------------------------------------------------------------------------|\n| `%d`            | Day of month (zero-padded)                                                                                       |\n| `%a`            | Day of the week - short (Mon, Tue, Wed, Thu, Fri, Sat, Sun)                                                      |\n| `%A`            | Day of the week - long (Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday)                          |\n| `%M`            | Month (zero-padded)                                                                                              |\n| `%b`            | Month - short (Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec)                                       |\n| `%B`            | Month - Long (January, February, March, April, May, June, July, August, September, October, November, December)  |\n| `%y`            | Year - Two digit (13, 14 etc)                                                                                    |\n| `%Y`            | Year - Four digit (2013, 2014 etc)                                                                               |\n| `%h`            | Hour (12-hour format)                                                                                            |\n| `%H`            | Hour (24-hour format)                                                                                            |\n| `%m`            | Minute (zero-padded)                                                                                             |\n| `%s`            | Second (zero-padded)                                                                                             |\n| `%g`            | Subsecond part (precision is configured by ConfigurationType::SubsecondPrecision)                               |\n| `%F`            | AM/PM designation                                                                                                |\n| `%`             | Escape character                                                                                                 |\n\nPlease note, date/time is limited to `30` characters at most.\n\n [![top] Goto Top](#table-of-contents)\n\n### Custom Format Specifiers\n\nYou can also specify your own format specifiers. In order to do that you can use `el::Helpers::installCustomFormatSpecifier`. A perfect example is `%ip_addr` for TCP server application;\n\n```C++\nconst char* getIp(const el::LogMessage*) {\n    return \"192.168.1.1\";\n}\n\nint main(void) {\n    el::Helpers::installCustomFormatSpecifier(el::CustomFormatSpecifier(\"%ip_addr\", getIp));\n    el::Loggers::reconfigureAllLoggers(el::ConfigurationType::Format, \"%datetime %level %ip_addr : %msg\");\n    LOG(INFO) << \"This is request from client\";\n    return 0;\n}\n```\n\n [![top] Goto Top](#table-of-contents)\n\n### Logging Flags\nForm some parts of logging you can set logging flags; here are flags supported:\n\n|     Flag                                               |                 Description                                                                                                                   |\n|--------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|\n| `NewLineForContainer (1)`                              | Makes sure we have new line for each container log entry                                                                                      |\n| `AllowVerboseIfModuleNotSpecified (2)`                 | Makes sure if -vmodule is used and does not specifies a module, then verbose logging is allowed via that module. Say param was -vmodule=main*=3 and a verbose log is being written from a file called something.cpp then if this flag is enabled, log will be written otherwise it will be disallowed. Note: having this defeats purpose of -vmodule                                 |\n| `LogDetailedCrashReason (4)`                           | When handling crashes by default, detailed crash reason will be logged as well (Disabled by default) ([issue #90](https://github.com/abumq/easyloggingpp/issues/90))                                                                                                                                                                                |\n| `DisableApplicationAbortOnFatalLog (8)`                | Allows to disable application abortion when logged using FATAL level. Note that this does not apply to default crash handlers as application should be aborted after crash signal is handled. (Not added by default) ([issue #119](https://github.com/abumq/easyloggingpp/issues/119))                                                                                                                                                                               |\n| `ImmediateFlush (16)`                                  | Flushes log with every log-entry (performance sensitive) - Disabled by default                                                                |\n| `StrictLogFileSizeCheck (32)`                          | Makes sure log file size is checked with every log                                                                                            |\n| `ColoredTerminalOutput (64)`                           | Terminal output will be colorful if supported by terminal.                                                                                            |\n| `MultiLoggerSupport (128)`                             | Enables support for using multiple loggers to log single message. (E.g, `CLOG(INFO, \"default\", \"network\") << This will be logged using default and network loggers;`) |\n| `DisablePerformanceTrackingCheckpointComparison (256)` | Disables checkpoint comparison |\n| `DisableVModules (512)`                               | Disables usage of vmodules\n| `DisableVModulesExtensions (1024)`                     | Disables vmodules extension. This means if you have a vmodule -vmodule=main*=4 it will cover everything starting with main, where as if you do not have this defined you will be covered for any file starting with main and ending with one of the following extensions; .h .c .cpp .cc .cxx .-inl-.h .hxx .hpp. Please note following vmodule is not correct -vmodule=main.=4 with this macro not defined because this will check for main..c, notice double dots. If you want this to be valid, have a look at logging flag above: AllowVerboseIfModuleNotSpecified '?' and '' wildcards are supported |\n| `HierarchicalLogging (2048)`                          | Enables hierarchical logging. This is not applicable to verbose logging.|\n| `CreateLoggerAutomatically (4096)`                          | Creates logger automatically when not available. |\n| `AutoSpacing (8192)`                          | Automatically adds spaces. E.g, `LOG(INFO) << \"DODGE\" << \"THIS!\";` will output \"DODGE THIS!\"|\n| `FixedTimeFormat (16384)`                          | Applicable to performance tracking only - this prevents formatting time. E.g, `1001 ms` will be logged as is, instead of formatting it as `1.01 sec`|\n| `IgnoreSigInt (32768)`                          | When application crashes ignore Interruption signal |\n\nYou can set/unset these flags by using static `el::Loggers::addFlag` and `el::Loggers::removeFlag`. You can check to see if certain flag is available by using `el::Loggers::hasFlag`, all these functions take strongly-typed enum `el::LoggingFlag`\n\n > You can set these flags by using `--logging-flags` command line arg. You need to enable this functionality by defining macro `ELPP_LOGGING_FLAGS_FROM_ARG` (You will need to make sure to use `START_EASYLOGGINGPP(argc, argv)` to configure arguments).\n\n > You can also set default (initial) flags using `ELPP_DEFAULT_LOGGING_FLAGS` and set numerical value for initial flags\n\n [![top] Goto Top](#table-of-contents)\n\n### Application Arguments\nFollowing table will explain all command line arguments that you may use to define certain behaviour; You will need to initialize application arguments by using `START_EASYLOGGINGPP(argc, argv)` in your `main(int, char**)` function.\n\n|        Argument            |                                      Description                                        |\n|----------------------------|-----------------------------------------------------------------------------------------|\n| `-v`                       | Activates maximum verbosity                                                             |\n| `--v=2`                    | Activates verbosity upto verbose level 2 (valid range: 0-9)                             |\n| `--verbose`                | Activates maximum verbosity                                                             |\n| `-vmodule=MODULE_NAME`     | Activates verbosity for files starting with main to level 1, the rest of the files depend on logging flag `AllowVerboseIfModuleNotSpecified` Please see Logging Flags section above. Two modules can be separated by comma. Please note vmodules are last in order of precedence of checking arguments for verbose logging, e.g, if we have -v in application arguments before vmodules, vmodules will be ignored.                                                                                                               |\n| `--logging-flags=3`        | Sets logging flag. In example `i.e, 3`, it sets logging flag to `NewLineForContainer` and `AllowVerboseIfModuleNotSpecified`. See logging flags section above for further details and values. See macros section to disable this function.                                                                   |\n| `--default-log-file=FILE`  |Sets default log file for existing and future loggers. You may want to consider defining `ELPP_NO_DEFAULT_LOG_FILE` to prevent creation of default empty log file during pre-processing. See macros section to disable this function.                                                                           |\n\n [![top] Goto Top](#table-of-contents)\n\n### Configuration Macros\nSome of logging options can be set by macros, this is a thoughtful decision, for example if we have `ELPP_THREAD_SAFE` defined, all the thread-safe functionalities are enabled otherwise disabled (making sure over-head of thread-safety goes with it). To make it easy to remember and prevent possible conflicts, all the macros start with `ELPP_`\n\n**NOTE:** All the macros can be defined in one of the following ways:\n\n 1. Define macros using `-D` option of compiler, for example in case of `g++` you will do `g++ source.cpp ... -DELPP_SYSLOG -DELPP_THREAD_SAFE ...` (**recommended way**)\n\n 2. Define macros inside `\"easylogging++.h\"` ([defining macros in other files won't work](https://github.com/abumq/easyloggingpp/issues/590#issuecomment-346753951))\n\n|   Macro Name                             |                 Description                                                                                                                        |\n|------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------|\n| `ELPP_DEBUG_ASSERT_FAILURE`             | Aborts application on first assertion failure. This assertion is due to invalid input e.g, invalid configuration file etc.                         |\n| `ELPP_UNICODE`                          | Enables Unicode support when logging. Requires `START_EASYLOGGINGPP`                 |\n| `ELPP_THREAD_SAFE`                      | Enables thread-safety - make sure -lpthread linking for linux.                                                                                     |\n| `ELPP_FORCE_USE_STD_THREAD`             | Forces to use C++ standard library for threading (Only useful when using `ELPP_THREAD_SAFE`            |\n| `ELPP_FEATURE_CRASH_LOG`              | Applicable to GCC only. Enables stacktrace on application crash                                                                                    |\n| `ELPP_DISABLE_DEFAULT_CRASH_HANDLING`   | Disables default crash handling. You can use el::Helpers::setCrashHandler to use your own handler.                                                 |\n| `ELPP_DISABLE_LOGS`                     | Disables all logs - (preprocessing)                                                                                                                |\n| `ELPP_DISABLE_DEBUG_LOGS`               | Disables debug logs - (preprocessing)                                                                                                              |\n| `ELPP_DISABLE_INFO_LOGS`                | Disables info logs - (preprocessing)                                                                                                               |\n| `ELPP_DISABLE_WARNING_LOGS`             | Disables warning logs - (preprocessing)                                                                                                            |\n| `ELPP_DISABLE_ERROR_LOGS`               | Disables error logs - (preprocessing)                                                                                                              |\n| `ELPP_DISABLE_FATAL_LOGS`               | Disables fatal logs - (preprocessing)                                                                                                              |\n| `ELPP_DISABLE_VERBOSE_LOGS`             | Disables verbose logs - (preprocessing)                                                                                                            |\n| `ELPP_DISABLE_TRACE_LOGS`               | Disables trace logs - (preprocessing)                                                                                                              |\n| `ELPP_FORCE_ENV_VAR_FROM_BASH`          | If environment variable could not be found, force using alternative bash command to find value, e.g, `whoami` for username. (DO NOT USE THIS MACRO WITH `LD_PRELOAD` FOR LIBRARIES THAT ARE ALREADY USING Easylogging++ OR YOU WILL END UP IN STACK OVERFLOW FOR PROCESSES (`popen`) (see [issue #87](https://github.com/abumq/easyloggingpp/issues/87) for details))                                                                                                                                                                                       |\n| `ELPP_DEFAULT_LOG_FILE`                 | Full filename where you want initial files to be created. You need to embed value of this macro with quotes, e.g, `-DELPP_DEFAULT_LOG_FILE='\"logs/el.gtest.log\"'` Note the double quotes inside single quotes, double quotes are the values for `const char*` and single quotes specifies value of macro                                                                                 |\n| `ELPP_NO_LOG_TO_FILE`                 | Disable logging to file initially|\n| `ELPP_NO_DEFAULT_LOG_FILE`              | If you dont want to initialize library with default log file, define this macro. This will log to null device for unix and windows. In other platforms you may get error and you will need to use `ELPP_DEFAULT_LOG_FILE`. (PR for other platform's null devices are most welcomed) |\n| `ELPP_FRESH_LOG_FILE`              | Never appends log file whenever log file is created (Use with care as it may cause some unexpected result for some users)                                                  |\n| `ELPP_DEBUG_ERRORS`                    | If you wish to find out internal errors raised by Easylogging++ that can be because of configuration or something else, you can enable them by defining this macro. You will get your errors on standard output i.e, terminal or command prompt.                                                                                                                                             |\n| `ELPP_DISABLE_CUSTOM_FORMAT_SPECIFIERS` | Forcefully disables custom format specifiers                                                                                                       |\n| `ELPP_DISABLE_LOGGING_FLAGS_FROM_ARG`   | Forcefully disables ability to set logging flags using command-line arguments                                                                      |\n| `ELPP_DISABLE_LOG_FILE_FROM_ARG`        | Forcefully disables ability to set default log file from command-line arguments                                                                    |\n| `ELPP_WINSOCK2`        | On windows system force to use `winsock2.h` instead of `winsock.h` when `WIN32_LEAN_AND_MEAN` is defined                                                                    |\n| `ELPP_CUSTOM_COUT` (advanced)     | Resolves to a value e.g, `#define ELPP_CUSTOM_COUT qDebug()` or `#define ELPP_CUSTOM_COUT std::cerr`. This will use the value for standard output (instead of using `std::cout`|\n| `ELPP_CUSTOM_COUT_LINE` (advanced) | Used with `ELPP_CUSTOM_COUT` to define how to write a log line with custom cout. e.g, `#define ELPP_CUSTOM_COUT_LINE(msg) QString::fromStdString(msg).trimmed()` |\n| `ELPP_NO_CHECK_MACROS`             | Do not define the *CHECK* macros                                                                                                                  |\n| `ELPP_NO_DEBUG_MACROS`             | Do not define the *DEBUG* macros                                                                                                                  |\n| `ELPP_UTC_DATETIME`                | Uses UTC time instead of local time (essentially uses `gmtime` instead of `localtime` and family functions)\n| `ELPP_NO_GLOBAL_LOCK`  | Do not lock the whole storage on dispatch. This should be used with care. See [issue #580](https://github.com/abumq/easyloggingpp/issues/580)|\n\n [![top] Goto Top](#table-of-contents)\n\n### Reading Configurations\nIf you wish to read configurations of certain logger, you can do so by using `typedConfigurations()` function in Logger class.\n```c++\nel::Logger* l = el::Loggers::getLogger(\"default\");\nbool enabled = l->typedConfigurations()->enabled(el::Level::Info);\n// Or to read log format/pattern\nstd::string format =\n        l->typedConfigurations()->logFormat(el::Level::Info).format();\n```\n\n [![top] Goto Top](#table-of-contents)\n\n# Logging\nLogging in easylogging++ is done using collection of macros. This is to make it easier for user and to prevent them knowing about unnecessary greater details of how things are done.\n\n### Basic\nYou are provided with two basic macros that you can use in order to write logs:\n* `LOG(LEVEL)`\n* `CLOG(LEVEL, logger ID)`\n\n`LOG` uses 'default' logger while in CLOG (Custom LOG) you specify the logger ID. For LEVELs please refer to Configurations - Levels section above. Different loggers might have different configurations depending on your need, you may as well write custom macro to access custom logger. You also have different macros for verbose logging that is explained in section below.\nHere is very simple example of using these macros after you have initialized easylogging++.\n```c++\nLOG(INFO) << \"This is info log\";\nCLOG(ERROR, \"performance\") << \"This is info log using performance logger\";\n```\n\nThere is another way to use same macro i.e, `LOG` (and associated macros). This is that you define macro `ELPP_DEFAULT_LOGGER` and `ELPP_DEFAULT_PERFORMANCE_LOGGER` with logger ID that is already registered, and now when you use `LOG` macro, it automatically will use specified logger instead of `default` logger. Please note that this should be defined in source file instead of header file. This is so that when we include header we dont accidently use invalid logger.\n\nA quick example is here\n```c++\n#ifndef ELPP_DEFAULT_LOGGER\n#   define ELPP_DEFAULT_LOGGER \"update_manager\"\n#endif\n#ifndef ELPP_DEFAULT_PERFORMANCE_LOGGER\n#   define ELPP_DEFAULT_PERFORMANCE_LOGGER ELPP_DEFAULT_LOGGER\n#endif\n#include \"easylogging++.h\"\nUpdateManager::UpdateManager {\n    _TRACE; // Logs using LOG(TRACE) provided logger is already registered - i.e, update_manager\n    LOG(INFO) << \"This will log using update_manager logger as well\";\n}\n```\n\n```c++\n#include \"easylogging++.h\"\nUpdateManager::UpdateManager {\n    _TRACE; // Logs using LOG(TRACE) using default logger because no `ELPP_DEFAULT_LOGGER` is defined unless you have it in makefile\n}\n```\n\n > You can also write logs by using `Logger` class directly. This feature is available on compilers that support variadic templates. You can explore more by looking at `samples/STL/logger-log-functions.cpp`.\n\n [![top] Goto Top](#table-of-contents)\n\n### Conditional Logging\nEasylogging++ provides certain aspects of logging, one these aspects is conditional logging, i.e, log will be written only if certain condition fulfils. This comes very handy in some situations.\nHelper macros end with _IF;\n* `LOG_IF(condition, LEVEL)`\n* `CLOG_IF(condition, LEVEL, logger ID)`\n\n\n#### Some examples:\n```c++\nLOG_IF(condition, INFO) << \"Logged if condition is true\";\n\nLOG_IF(false, WARNING) << \"Never logged\";\nCLOG_IF(true, INFO, \"performance\") << \"Always logged (performance logger)\"\n```\n\nSame macros are available for verbose logging with `V` in the beginning, i.e, `VLOG_IF` and `CVLOG_IF`. see verbose logging section below for further information. You may have as complicated conditions as you want depending on your need.\n\n [![top] Goto Top](#table-of-contents)\n\n### Occasional Logging\nOccasional logging is another useful aspect of logging with Easylogging++. This means a log will be written if it's hit certain times or part of certain times, e.g, every 10th hit or 100th hit or 2nd hit.\nHelper macros end with `_EVERY_N`;\n* `LOG_EVERY_N(n, LEVEL)`\n* `CLOG_EVERY_N(n, LEVEL, logger ID)`\n\n#### Other Hit Counts Based Logging\nThere are some other ways of logging as well based on hit counts. These useful macros are\n* `LOG_AFTER_N(n, LEVEL)`; Only logs when we have reached hit counts of `n`\n* `LOG_N_TIMES(n, LEVEL)`; Logs n times\n\n#### Some examples:\n```c++\nfor (int i = 1; i <= 10; ++i) {\n   LOG_EVERY_N(2, INFO) << \"Logged every second iter\";\n}\n// 5 logs written; 2, 4, 6, 7, 10\n\nfor (int i = 1; i <= 10; ++i) {\n   LOG_AFTER_N(2, INFO) << \"Log after 2 hits; \" << i;\n}\n// 8 logs written; 3, 4, 5, 6, 7, 8, 9, 10\n\nfor (int i = 1; i <= 100; ++i) {\n   LOG_N_TIMES(3, INFO) << \"Log only 3 times; \" << i;\n}\n// 3 logs writter; 1, 2, 3\n```\n\n > Same versions of macros are available for `DEBUG` only mode, these macros start with `D` (for debug) followed by the same name. e.g, `DLOG` to log only in debug mode (i.e, when `_DEBUG` is defined or `NDEBUG` is undefined)\n\n [![top] Goto Top](#table-of-contents)\n\n### `printf` Like Logging\nFor compilers that support C++11's variadic templates, ability to log like \"printf\" is available. This is done by using `Logger` class. This feature is thread and type safe (as we do not use any macros like `LOG(INFO)` etc)\n\nThis is done in two steps:\n 1. Pulling registered logger using `el::Loggers::getLogger(<logger_id>);`\n 2. Using one of logging functions\n\nThe only difference from `printf` is that logging using these functions require `%v` for each arg (This is for type-safety); instead of custom format specifiers. You can escape this by `%%v`\n\nFollowing are various function signatures:\n * `info(const char*, const T&, const Args&...)`\n * `warn(const char*, const T&, const Args&...)`\n * `error(const char*, const T&, const Args&...)`\n * `debug(const char*, const T&, const Args&...)`\n * `fatal(const char*, const T&, const Args&...)`\n * `trace(const char*, const T&, const Args&...)`\n * `verbose(int vlevel, const char*, const T&, const Args&...)`\n\n#### Simple example:\n\n```c++\n// Use default logger\nel::Logger* defaultLogger = el::Loggers::getLogger(\"default\");\n\n// STL logging (`ELPP_STL_LOGGING` should be defined)\nstd::vector<int> i;\ni.push_back(1);\ndefaultLogger->warn(\"My first ultimate log message %v %v %v\", 123, 222, i);\n\n// Escaping\ndefaultLogger->info(\"My first ultimate log message %% %%v %v %v\", 123, 222);\n\n```\n\n > `%file`, `%func` `%line` and `%loc` format specifiers will not work with `printf` like logging.\n\n [![top] Goto Top](#table-of-contents)\n\n### Network Logging\n\nYou can send your messages to network. But you will have to implement your own way using log dispatcher API. We have written fully working sample for this purpose. Please see [Send to Network sample](/samples/send-to-network)\n\n [![top] Goto Top](#table-of-contents)\n\n### Verbose Logging\n#### Basic\nVerbose logging is useful in every software to record more information than usual. Very useful for troubleshooting. Following are verbose logging specific macros;\n* `VLOG(verbose-level)`\n* `CVLOG(verbose-level, logger ID)`\n\n [![top] Goto Top](#table-of-contents)\n\n#### Conditional and Occasional Logging\nVerbose logging also has conditional and occasional logging aspects i.e,\n* `VLOG_IF(condition, verbose-level)`\n* `CVLOG_IF(condition, verbose-level, loggerID)`\n* `VLOG_EVERY_N(n, verbose-level)`\n* `CVLOG_EVERY_N(n, verbose-level, loggerID)`\n* `VLOG_AFTER_N(n, verbose-level)`\n* `CVLOG_AFTER_N(n, verbose-level, loggerID)`\n* `VLOG_N_TIMES(n, verbose-level)`\n* `CVLOG_N_TIMES(n, verbose-level, loggerID)`\n\n [![top] Goto Top](#table-of-contents)\n\n\n#### Verbose-Level\nVerbose level is level of verbosity that can have range of 1-9. Verbose level will not be active unless you either set application arguments for it. Please read through [Application Arguments](#application-arguments) section to understand more about verbose logging.\n\nIn order to change verbose level on the fly, please use `Loggers::setVerboseLevel(base::type::VerboseLevel)` aka `Loggers::setVerboseLevel(int)` function. (You can check current verbose level by `Loggers::verboseLevel()`\n\n [![top] Goto Top](#table-of-contents)\n\n#### Check If Verbose Logging Is On\nYou can use a macro `VLOG_IS_ON(verbose-level)` to check to see if certain logging is on for source file for specified verbose level. This returns boolean that you can embed into if condition.\n```c++\nif (VLOG_IS_ON(2)) {\n   // Verbosity level 2 is on for this file\n}\n```\n\n [![top] Goto Top](#table-of-contents)\n\n#### VModule\nVModule is functionality for verbose logging (as mentioned in above table) where you can specify verbosity by modules/source file. Following are some examples with explanation; Any of vmodule below starts with `-vmodule=` and `LoggingFlag::DisableVModulesExtensions` flag not set. Vmodule can completely be disabled by adding flag `LoggingFlag::DisableVModules`\n\nExample with `LoggingFlag::AllowVerboseIfModuleNotSpecified` flag;\n\n`main=3,parser*=4`:\n * A bad example but good enough for explanation;\n * Verbosity for any following file will be allowed;\n    `main{.h, .c, .cpp, .cc, .cxx, -inl.h, .hxx, .hpp}`\n    `parser{.h, .c, .cpp, .cc, .cxx, -inl.h, .hxx, .hpp}`\n * No other file will be logged for verbose level\n\nExample with no `LoggingFlag::AllowVerboseIfModuleNotSpecified` flag;\n\n`main=3,parser*=4`:\n Same explanation but any other file that does not fall under specified modules will have verbose logging enabled.\n\nIn order to change vmodules on the fly (instead of via command line args) - use `Loggers::setVModules(const char*)` where `const char*` represents the modules e.g, `main=3,parser*=4` (as per above example)\n\n [![top] Goto Top](#table-of-contents)\n\n### Registering New Loggers\nLoggers are unique in logger repository by ID. You can register new logger the same way as you would get logger. Using `getLogger(.., ..)` from `el::Loggers` helper class. This function takes two params, first being ID and second being boolean (optional) to whether or not to register new logger if does not already exist and returns pointer to existing (or newly created) el::Logger class. This second param is optional and defaults to true. If you set it to false and logger does not exist already, it will return nullptr.\n\nBy default, Easylogging++ registers three loggers (+ an internal logger);\n* Default logger (ID: `default`)\n* Performance logger (ID: `performance`)\n* Syslog logger (if `ELPP_SYSLOG` macro is defined) (ID: `syslog`)\n\nIf you wish to register a new logger, say e.g, with ID `business`\n```c++\nel::Logger* businessLogger = el::Loggers::getLogger(\"business\");\n```\n\nThis will register a new logger if it does not already exist otherwise it will get an existing one. But if you have passed in `false` to the second param and logger does not already exist, `businessLogger` will be nullptr.\n\nWhen you register a new logger, default configurations are used (see Default Configurations section above). Also worth noticing, logger IDs are case sensitive.\n\n [![top] Goto Top](#table-of-contents)\n\n### Unregister Loggers\nYou may unregister loggers; any logger except for `default`. You should be really careful with this function, only unregister loggers that you have created yourself otherwise you may end up in unexpected errors. For example, you dont want to unregister logger that is used or initialized by a third-party library and it may be using it.\n\nTo unregister logger, use `el::Loggers::unregisterLogger(\"logger-id\")`\n\n [![top] Goto Top](#table-of-contents)\n\n### Populating Existing Logger IDs\nAlthough this is a rare situation but if you wish to get list of all the logger IDs currently in repository, you may use `el::Loggers::populateAllLoggerIds(std::vector<std::string>&)` function to do that. The list passed in is cleared and filled up with all existing logger IDs.\n\n [![top] Goto Top](#table-of-contents)\n\n### Sharing Logging Repository\nFor advance logging, you can share your logging repositories to shared or static libraries, or even from library to application. This is rare case but a very good example is as follows;\n\nLet's say we have an application that uses easylogging++ and has its own configuration, now you are importing library that uses easylogging++ and wants to access logging repository of main application. You can do this using two ways;\n\n * Instead of using `INITIALIZE_EASYLOGGINGPP` you use `SHARE_EASYLOGGINGPP(access-function-to-repository)`\n * Instead of using `INITIALIZE_EASYLOGGINGPP` you use `INITIALIZE_NULL_EASYLOGGINGPP` and then `el::Helpers::setStorage(el::base::type::StoragePointer)`\n\nAfter you share repository, you can reconfigure the only repository (i.e, the one that is used by application and library both), and use both to write logs.\n\n [![top] Goto Top](#table-of-contents)\n\n# Extra Features\nEasylogging++ is feature-rich logging library. Apart from features already mentioned above, here are some extra features. If code snippets don't make sense and further sample is needed, there are many samples available at github repository (samples). Feel free to browse around.\n\nSome features require you to define macros (marked as prerequisite in each section) to enable them. This is to reduce compile time. If you want to enable all features you can define `ELPP_FEATURE_ALL`.\n\n### Performance Tracking\nPrerequisite: Define macro `ELPP_FEATURE_PERFORMANCE_TRACKING`\n\nOne of the most notable features of Easylogging++ is its ability to track performance of your function or block of function.\nPlease note, this is not backward compatible as previously we had macros that user must had defined in order to track performance and I am sure many users had avoided in doing so. (Read v8.91 ReadMe for older way of doing it)\nThe new way of tracking performance is much easier and reliable. All you need to do is use one of two macros from where you want to start tracking.\n* `TIMED_FUNC(obj-name)`\n* `TIMED_SCOPE(obj-name, block-name)`\n* `TIMED_BLOCK(obj-name, block-name)`\n\nAn example that just uses usleep\n```c++\nvoid performHeavyTask(int iter) {\n   TIMED_FUNC(timerObj);\n   // Some initializations\n   // Some more heavy tasks\n   usleep(5000);\n   while (iter-- > 0) {\n       TIMED_SCOPE(timerBlkObj, \"heavy-iter\");\n       // Perform some heavy task in each iter\n       usleep(10000);\n   }\n}\n```\n\nThe result of above execution for iter = 10, is as following\n```\n06:22:31,368 INFO Executed [heavy-iter] in [10 ms]\n06:22:31,379 INFO Executed [heavy-iter] in [10 ms]\n06:22:31,389 INFO Executed [heavy-iter] in [10 ms]\n06:22:31,399 INFO Executed [heavy-iter] in [10 ms]\n06:22:31,409 INFO Executed [heavy-iter] in [10 ms]\n06:22:31,419 INFO Executed [heavy-iter] in [10 ms]\n06:22:31,429 INFO Executed [heavy-iter] in [10 ms]\n06:22:31,440 INFO Executed [heavy-iter] in [10 ms]\n06:22:31,450 INFO Executed [heavy-iter] in [10 ms]\n06:22:31,460 INFO Executed [heavy-iter] in [10 ms]\n06:22:31,460 INFO Executed [void performHeavyTask(int)] in [106 ms]\n```\n\nIn the above example, we have used both the macros. In line-2 we have `TIMED_FUNC` with object pointer name timerObj and line-7 we have TIMED_SCOPE with object pointer name `timerBlkObj` and block name `heavy-iter`. Notice how block name is thrown out to the logs with every hit.  (Note: `TIMED_FUNC` is `TIMED_SCOPE` with block name = function name)\n\nYou might wonder why do we need object name. Well easylogging++ performance tracking feature takes it further and provides ability to add, what's called checkpoints.\nCheckpoints have two macros:\n* `PERFORMANCE_CHECKPOINT(timed-block-obj-name)`\n* `PERFORMANCE_CHECKPOINT_WITH_ID(timed-block-obj-name, id)`\n\nTake a look at following example\n```c++\nvoid performHeavyTask(int iter) {\n   TIMED_FUNC(timerObj);\n   // Some initializations\n   // Some more heavy tasks\n   usleep(5000);\n   while (iter-- > 0) {\n       TIMED_SCOPE(timerBlkObj, \"heavy-iter\");\n       // Perform some heavy task in each iter\n       // Notice following sleep varies with each iter\n       usleep(iter * 1000);\n       if (iter % 3) {\n           PERFORMANCE_CHECKPOINT(timerBlkObj);\n       }\n   }\n}\n```\n\nNotice macro on line-11 (also note comment on line-8). It's checkpoint for heavy-iter block. Now notice following output\n```\n06:33:07,558 INFO Executed [heavy-iter] in [9 ms]\n06:33:07,566 INFO Performance checkpoint for block [heavy-iter] : [8 ms]\n06:33:07,566 INFO Executed [heavy-iter] in [8 ms]\n06:33:07,573 INFO Performance checkpoint for block [heavy-iter] : [7 ms]\n06:33:07,573 INFO Executed [heavy-iter] in [7 ms]\n06:33:07,579 INFO Executed [heavy-iter] in [6 ms]\n06:33:07,584 INFO Performance checkpoint for block [heavy-iter] : [5 ms]\n06:33:07,584 INFO Executed [heavy-iter] in [5 ms]\n06:33:07,589 INFO Performance checkpoint for block [heavy-iter] : [4 ms]\n06:33:07,589 INFO Executed [heavy-iter] in [4 ms]\n06:33:07,592 INFO Executed [heavy-iter] in [3 ms]\n06:33:07,594 INFO Performance checkpoint for block [heavy-iter] : [2 ms]\n06:33:07,594 INFO Executed [heavy-iter] in [2 ms]\n06:33:07,595 INFO Performance checkpoint for block [heavy-iter] : [1 ms]\n06:33:07,595 INFO Executed [heavy-iter] in [1 ms]\n06:33:07,595 INFO Executed [heavy-iter] in [0 ms]\n06:33:07,595 INFO Executed [void performHeavyTask(int)] in [51 ms]\n```\n\nYou can also compare two checkpoints if they are in sub-blocks e.g, changing from `PERFORMANCE_CHECKPOINT(timerBlkObj)` to `PERFORMANCE_CHECKPOINT(timerObj)` will result in following output\n```\n06:40:35,522 INFO Performance checkpoint for block [void performHeavyTask(int)] : [51 ms ([1 ms] from last checkpoint)]\n```\n\nIf you had used `PERFORMANCE_CHECKPOINT_WITH_ID(timerObj, \"mychkpnt\");` instead, you will get\n```\n06:44:37,979 INFO Performance checkpoint [mychkpnt] for block [void performHeavyTask(int)] : [51 ms ([1 ms] from checkpoint 'mychkpnt')]\n```\n\nFollowing are some useful macros that you can define to change the behaviour\n\n|   Macro Name                                        |                 Description                                                                                                    |\n|-----------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------|\n| `ELPP_DISABLE_PERFORMANCE_TRACKING`                | Disables performance tracking                                                                                                  |\n| `ELPP_PERFORMANCE_MICROSECONDS`                    | Track up-to microseconds (this includes initializing of el::base::PerformanceTracker as well so might time not be 100% accurate)        |\n\nNotes:\n\n1. Performance tracking uses `performance` logger (INFO level) by default unless `el::base::PerformanceTracker` is constructed manually (not using macro - not recommended). When configuring other loggers, make sure you configure this one as well.\n\n2. In above examples, `timerObj` and `timerBlkObj` is of type `el::base::type::PerformanceTrackerPtr`. The `checkpoint()` routine of the `el::base::PerformanceTracker` can be accessed by `timerObj->checkpoint()` but not recommended as this will override behaviour of using macros, behaviour like location of checkpoint.\n\n3. In order to access `el::base::type::PerformanceTrackerPtr` while in `TIMED_BLOCK`, you can use `timerObj.timer`\n\n4. `TIMED_BLOCK` macro resolves to a single-looped for-loop, so be careful where you define `TIMED_BLOCK`, if for-loop is allowed in the line where you use it, you should have no errors.\n\n > You may be interested in [python script to parse performance logs](https://github.com/abumq/easyloggingpp/issues/206)\n\n [![top] Goto Top](#table-of-contents)\n\n#### Conditional Performance Tracking\nIf you want to enable performance tracking for certain conditions only, e.g. based on a certain verbosity level, you can use the variants `TIMED_FUNC_IF` or `TIMED_SCOPE_IF`.\n\n A verbosity level example is given below\n\n```c++\n void performHeavyTask(int iter) {\n    // enable performance tracking for verbosity level 4 or higher\n    TIMED_FUNC_IF( timerObj, VLOG_IS_ON(4) );\n    // Some more heavy tasks\n }\n```\n\n [![top] Goto Top](#table-of-contents)\n\n#### Make Use of Performance Tracking Data\nIf you wish to capture performance tracking data right after it is finished, you can do so by extending `el::PerformanceTrackingCallback`.\n\nIn order to install this handler, use `void Helpers::installPerformanceTrackingCallback<T>(const std::string& id)`. Where `T` is type of your handler. If you wish to uninstall a callback, you can do so by using `Helpers::uninstallPerformanceTrackingCallback<T>(const std::string& id)`. See samples for details\n\n > DO NOT TRACK PERFORMANCE IN THIS HANDLER OR YOU WILL END UP IN INFINITE-LOOP\n\n [![top] Goto Top](#table-of-contents)\n\n### Log File Rotating\nEasylogging++ has ability to roll out (or throw away / rotate) log files if they reach certain limit. You can configure this by setting `Max_Log_File_Size`. See Configuration section above.\n\nRollout checking happens when Easylogging++ flushes the log file, or, if you have added the flag `el::LoggingFlags::StrictLogFileSizeCheck`, at each log output.\n\nThis feature has its own section in this reference manual because you can do stuffs with the file being thrown away. This is useful, for example if you wish to back this file up etc.\nThis can be done by using `el::Helpers::installPreRollOutCallback(const PreRollOutCallback& handler)` where `PreRollOutCallback` is typedef of type `std::function<void(const char*, std::size_t)>`. Please note following if you are using this feature\n\nThere is a [sample](/samples/STL/logrotate.cpp) available that you can use as basis.\n\n> You should not log anything in this function. This is because logger would already be locked in multi-threaded application and you can run into dead lock conditions. If you are sure that you are not going to log to same file and not using same logger, feel free to give it a try.\n\n [![top] Goto Top](#table-of-contents)\n\n### Crash Handling\nPrerequisite: Define macro `ELPP_FEATURE_CRASH_LOG`\n\nEasylogging++ provides ability to handle unexpected crashes for GCC compilers. This is active by default and can be disabled by defining macro `ELPP_DISABLE_DEFAULT_CRASH_HANDLING`. By doing so you are telling library not to handle any crashes. Later on if you wish to handle crash yourself, you can assign crash handler of type void func(int) where int is signal caught.\n\nFollowing signals are handled;\n* SIGABRT (If `ELPP_HANDLE_SIGABRT` macro is defined)\n* SIGFPE\n* SIGILL\n* SIGSEGV\n* SIGINT\n\nStacktraces are not printed by default, in order to do so define macro `ELPP_FEATURE_CRASH_LOG`. Remember, stack trace is only available for GCC compiler.\n\n> Default handler and stack trace uses `default` logger.\n\nFollowing are some useful macros that you can define to change the behaviour\n\n|   Macro Name                                        |                 Description                                                                                                    |\n|-----------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------|\n| `ELPP_DISABLE_DEFAULT_CRASH_HANDLING`              | Disables default crash handling.                                                                                               |\n| `ELPP_HANDLE_SIGABRT`                              | Enables handling `SIGABRT`. This is disabled by default to prevent annoying `CTRL + C` behaviour when you wish to abort.       |\n\n [![top] Goto Top](#table-of-contents)\n\n#### Installing Custom Crash Handlers\nYou can use your own crash handler by using `el::Helpers::setCrashHandler(const el::base::debug::CrashHandler::Handler&);`.\n\n> Make sure to abort application at the end of your crash handler using `el::Helpers::crashAbort(int)`. If you fail to do so, you will get into endless loop of crashes.\n\nHere is a good example of your own handler\n```c++\n#include \"easylogging++.h\"\n\nINITIALIZE_EASYLOGGINGPP\n\nvoid myCrashHandler(int sig) {\n    LOG(ERROR) << \"Woops! Crashed!\";     \n    // FOLLOWING LINE IS ABSOLUTELY NEEDED AT THE END IN ORDER TO ABORT APPLICATION\n    el::Helpers::crashAbort(sig);\n}\nint main(void) {\n    el::Helpers::setCrashHandler(myCrashHandler);\n\n    LOG(INFO) << \"My crash handler!\";\n\n    int* i;\n    *i = 0; // Crash!\n\n    return 0;\n}\n```\n\n> If you wish to log reason for crash you can do so by using `el::Helpers::logCrashReason(int, bool, const el::Level&, const char*)`. Following are default parameters for this function:\n```c++\n>  bool stackTraceIfAvailable = false\n>  const el::Level& level = el::Level::Fatal\n>  const char* logger = \"default\"\n```\n\n [![top] Goto Top](#table-of-contents)\n\n### Stacktrace\nPrerequisite: Define macro `ELPP_FEATURE_CRASH_LOG`\n\nEasylogging++ supports stack trace printing for GCC compilers. You can print stack trace at anytime by calling `el::base::debug::StackTrace()`, formatting will be done automatically. Note, if you are using non-GCC compiler, you will end-up getting empty output.\n\n [![top] Goto Top](#table-of-contents)\n\n### Multi-threading\nPrerequisite: Define macro `ELPP_THREAD_SAFE`\n\nEasylogging++ is thread-safe. By default thread-safety is disabled. You can enable it by defining `ELPP_THREAD_SAFE` otherwise you will see unexpected results. This is intentional to make library efficient for single threaded application.\n\n [![top] Goto Top](#table-of-contents)\n\n### CHECK Macros\nEasylogging++ supports CHECK macros, with these macros you can quickly check whether certain condition fulfills or not. If not Easylogging++ writes FATAL log, causing application to stop (unless defined macro to prevent stopping application on fatal).\n\n|                     CHECK Name              |                 Notes + Example                                                                                                 |\n|---------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------|\n| `CHECK(condition)`                          | Checks for condition e.g, `CHECK(isLoggedIn()) << \"Not logged in\";`                                                             |\n| `CHECK_EQ(a, b)`                            | Equality check e.g, `CHECK_EQ(getId(), getLoggedOnId()) << \"Invalid user logged in\";`                                           |\n| `CHECK_NE(a, b)`                            | Inequality check e.g, `CHECK_NE(isUserBlocked(userId), false) << \"User is blocked\";`                                            |\n| `CHECK_LT(a, b)`                            | Less than e.g, `CHECK_LT(1, 2) << \"How 1 is not less than 2\";`                                                                  |\n| `CHECK_GT(a, b)`                            | Greater than e.g, `CHECK_GT(2, 1) << \"How 2 is not greater than 1?\";`                                                           |\n| `CHECK_LE(a, b)`                            | Less than or equal e.g, `CHECK_LE(1, 1) << \"1 is not equal or less than 1\";`                                                    |\n| `CHECK_GE(a, b)`                            | Greater than or equal e.g, `CHECK_GE(1, 1) << \"1 is not equal or greater than 1\";`                                              |\n| `CHECK_NOTNULL(pointer)`                    | Ensures pointer is not null. This function does not return anything           |\n| `CHECK_STREQ(str1, str2)`                   | C-string equality (case-sensitive) e.g, `CHECK_STREQ(argv[1], \"0\") << \"First arg cannot be 0\";`                                 |\n| `CHECK_STRNE(str1, str2)`                   | C-string inequality (case-sensitive) e.g, `CHECK_STRNE(username1, username2) << \"Usernames cannot be same\";`                    |\n| `CHECK_STRCASEEQ(str1, str2)`               | C-string inequality (*case-insensitive*) e.g, `CHECK_CASESTREQ(argv[1], \"Z\") << \"First arg cannot be 'z' or 'Z'\";`              |\n| `CHECK_STRCASENE(str1, str2)`               | C-string inequality (*case-insensitive*) e.g, `CHECK_STRCASENE(username1, username2) << \"Same username not allowed\";`           |\n| `CHECK_BOUNDS(val, min, max)`               | Checks that `val` falls under the `min` and `max` range e.g, `CHECK_BOUNDS(i, 0, list.size() - 1) << \"Index out of bounds\";`    |\n\n> Same versions of macros are available for `DEBUG` only mode, these macros start with `D` (for debug) followed by the same name. e.g, `DCHECK` to check only in debug mode (i.e, when `_DEBUG` is defined or `NDEBUG` is undefined)\n\n [![top] Goto Top](#table-of-contents)\n\n### Logging perror()\nEasylogging++ supports `perror()` styled logging using `PLOG(LEVEL)`, `PLOG_IF(Condition, LEVEL)`, and `PCHECK()` using `default` logger; and for custom logger use `CPLOG(LEVEL, LoggerId)`, `CPLOG_IF(Condition, LEVEL, LoggerId)`. This will append `: log-error [errno]` in the end of log line.\n\n [![top] Goto Top](#table-of-contents)\n\n### Syslog\nPrerequisite: Define macro `ELPP_SYSLOG`\n\nEasylogging++ supports syslog for platforms that have `syslog.h` header. If your platform does not have `syslog.h`, make sure you do not define this macro or you will end up in errors. Once you are ready to use syslog, you can do so by using one of `SYSLOG(LEVEL)`, `SYSLOG_IF(Condition, LEVEL)`, `SYSLOG_EVERY_N(n, LEVEL)` and uses logger ID: `syslog`. If you want to use custom logger you can do so by using `CSYSLOG(LEVEL, loggerId)` or `CSYSLOG_IF(Condition, LEVEL, loggerId)` or `CSYSLOG_EVERY_N(n, LEVEL, loggerId)`\n\nSyslog in Easylogging++ supports C++ styled streams logging, following example;\n```c++\n#include \"easylogging++.h\"\n\nINITIALIZE_EASYLOGGINGPP\nint main(void) {\n    ELPP_INITIALIZE_SYSLOG(\"my_proc\", LOG_PID | LOG_CONS | LOG_PERROR, LOG_USER) // This is optional, you may not add it if you dont want to specify options\n    // Alternatively you may do\n    // el::SysLogInitializer elSyslogInit(\"my_proc\", LOG_PID | LOG_CONS | LOG_PERROR, LOG_USER);\n    SYSLOG(INFO) << \"This is syslog - read it from /var/log/syslog\"\n    return 0;\n}\n```\n\nSyslog support for Easylogging++ only supports following levels; each level is corresponded with syslog priority as following\n\n * INFO (LOG_INFO)\n * DEBUG (LOG_DEBUG)\n * WARNING (LOG_WARNING)\n * ERROR (LOG_ERR)\n * FATAL (LOG_EMERG)\n\nFollowing levels are not supported and correspond to `LOG_NOTICE`: TRACE, whereas VERBOSE level is completely not supported\n\n [![top] Goto Top](#table-of-contents)\n\n### STL Logging\nPrerequisite: Define macro `ELPP_STL_LOGGING`\n\nAs mentioned earlier, with easylogging++, you can log your STL templates including most containers. In order to do so you will need to define `ELPP_STL_LOGGING` macro. This enables including all the necessary headers and defines all necessary functions.\nFor performance, containers are limited to log maximum of 100 entries. This behaviour can be changed by changed header file (base::consts::kMaxLogPerContainer) but not recommended as in order to log, writer has to go through each entry causing potential delays. But if you are not really concerned with performance, you may change this value.\n\n [![top] Goto Top](#table-of-contents)\n\n#### Supported Templates\nFollowing templates are supported as part of STL Logging; note: basic and primitive types e.g, std::string or long are not listed as they is supported anyway, following list only contains non-basic types e.g, containers or bitset etc.\n\n|     *       |          *              |       *          |       *          |\n|-------------|-------------------------|------------------|------------------|\n| std::vector |  std::list              |  std::deque      |    std::queue    |\n| std::stack  |  std::priority_queue    |  std::set        |    std::multiset |\n| std::pair   |  std::bitset            |  std::map        |    std::multimap |\n\nSome C++11 specific templates are supported by further explicit macro definitions; note these also need `ELPP_STL_LOGGING`\n\n|   Template              |     Macro Needed            |\n|-------------------------|-----------------------------|\n| std::array              | `ELPP_LOG_STD_ARRAY`       |\n| std::unordered_map      | `ELPP_LOG_UNORDERED_MAP`   |\n| std::unordered_multimap | `ELPP_LOG_UNORDERED_MAP`   |\n| std::unordered_set      | `ELPP_LOG_UNORDERED_SET`   |\n| std::unordered_multiset | `ELPP_LOG_UNORDERED_SET`   |\n\nStandard manipulators are also supported, in addition std::stringstream is also supported.\n\n[![top] Goto Top](#table-of-contents)\n\n### Qt Logging\nPrerequisite: Define macro `ELPP_QT_LOGGING`\n\nEasylogging++ has complete logging support for Qt core library. When enabled, this will include all the headers supported Qt logging. Once you did that, you should be good to go.\n\nFollowing Qt classes and containers are supported by Easylogging++ v9.0+\n\n|     *         |          *                |       *            |         *          |         *          |         *          |\n|---------------|---------------------------|--------------------|--------------------|--------------------|--------------------|\n| `QString`     |  `QByteArray`             |  `QLatin`          |    `QList`         |    `QVector`       |    `QQueue`        |\n| `QSet`        |  `QPair`                  |  `QMap`            |    `QMultiMap`     |    `QHash`         |    `QMultiHash`    |\n| `QLinkedList` |  `QStack`                 |  `QChar`           |    `q[u]int[64]`   |                    |                    |\n\nSimilar to STL logging, Qt containers are also limit to log 100 entries per log, you can change this behaviour by changing base::consts::kMaxLogPerContainer from header but this is not recommended as this was done for performance purposes.\n\nAlso note, if you are logging a container that contains custom class, make sure you have read Extending Library section below.\n\n [![top] Goto Top](#table-of-contents)\n\n### Boost Logging\nPrerequisite: Define macro `ELPP_BOOST_LOGGING`\n\nEasylogging++ supports some of boost templates. Following table shows the templates supported.\n\n|     *                               |          *                               |\n|-------------------------------------|------------------------------------------|\n| `boost::container::vector`          |  `boost::container::stable_vector`       |\n| `boost::container::map`             |  `boost::container::flat_map`            |\n| `boost::container::set`             |  `boost::container::flat_set`            |\n| `boost::container::deque`           |  `boost::container::list`                |\n| `boost::container::string`          |                                          |\n\n [![top] Goto Top](#table-of-contents)\n\n### wxWidgets Logging\nPrerequisite: Define macro `ELPP_WXWIDGETS_LOGGING`\n\nEasylogging++ supports some of wxWidgets templates.\n\nFollowing table shows the templates supported.\n\n|     *               |          *        |      *                    |      *                    |      *              |      *               |\n|---------------------|-------------------|---------------------------|---------------------------|---------------------|----------------------|\n| `wxString`          |  `wxVector`       |  `wxList`                 |  `wxString`               | `wxHashSet`         |  `wxHashMap`         |\n\nwxWidgets has its own way of declaring and defining some templates e.g, `wxList` where  you use `WX_DECLARE_LIST` macro to declare a list.\n\nIn order to setup a container for logging that holds pointers to object, use `ELPP_WX_PTR_ENABLED`, otherwise if container holds actual object e.g, wxHashSet use `ELPP_WX_ENABLED`. For containers like `wxHashMap` because it contains value and pair, use `ELPP_WX_HASH_MAP_ENABLED` macro.\n\n```c++\n// wxList example\nWX_DECLARE_LIST(int, MyList);\nWX_DEFINE_LIST(MyList);\n// Following line does the trick\nELPP_WX_PTR_ENABLED(MyList);\n\n// wxHashSet example\nWX_DECLARE_HASH_SET(int, wxIntegerHash, wxIntegerEqual, IntHashSet);\n// Following line does the trick!\nELPP_WX_ENABLED(IntHashSet)\n\n// wxHashMap example\nWX_DECLARE_STRING_HASH_MAP(wxString, MyHashMap);\n// Following line does the trick\nELPP_WX_HASH_MAP_ENABLED(MyHashMap)\n```\nYou may also have a look at wxWidgets sample\n\n [![top] Goto Top](#table-of-contents)\n\n### Extending Library\nYou can extend this library using various callback handlers and inheritable classes.\n\nA perfect example of using these features is the logging server built with this library. It's called [Residue](https://github.com/abumq/residue/) that is feature rich. In fact, you may be interested in using that instead of this library for your medium to large sized projects.\n\n#### Logging Your Own Class\n\nYou can log your own classes by extending `el::Loggable` class and implementing pure-virtual function `void log(std::ostream& os) const`. Following example shows a good way to extend a class.\n```c++\n#include \"easylogging++.h\"\n\nINITIALIZE_EASYLOGGINGPP\nclass Integer : public el::Loggable {\npublic:\n    Integer(int i) : m_underlyingInt(i) {\n    }\n    Integer& operator=(const Integer& integer) {\n        m_underlyingInt = integer.m_underlyingInt;\n        return *this;\n    }\n    // Following line does the trick!\n    // Note: el::base::type::ostream_t is either std::wostream or std::ostream depending on unicode enabled or not\n    virtual void log(el::base::type::ostream_t& os) const {\n        os << m_underlyingInt;\n    }\nprivate:\n    int m_underlyingInt;\n};\n\nint main(void) {\n    Integer count = 5;\n    LOG(INFO) << count;\n    return 0;\n}\n```\n\n [![top] Goto Top](#table-of-contents)\n\n#### Logging Third-party Class\nLet's say you have third-party class that you don't have access to make changes to, and it's not yet loggable. In order to make it loggable, you can use `MAKE_LOGGABLE(ClassType, ClassInstance, OutputStreamInstance)` to make it Easylogging++ friendly.\n\nFollowing sample shows a good usage:\n```c++\n#include \"easylogging++.h\"\n\nINITIALIZE_EASYLOGGINGPP\n\nclass Integer {\npublic:\n    Integer(int i) : m_underlyingInt(i) {\n    }\n    Integer& operator=(const Integer& integer) {\n        m_underlyingInt = integer.m_underlyingInt;\n        return *this;\n    }\n    int getInt(void) const { return m_underlyingInt; }\nprivate:\n    int m_underlyingInt;\n};\n\n// Following line does the trick!\ninline MAKE_LOGGABLE(Integer, integer, os) {\n    os << integer.getInt();\n    return os;\n}\nint main(void) {\n    Integer count = 5;\n    LOG(INFO) << count;\n    return 0;\n}\n```\n\nAnother very nice example (to log `std::chrono::system_clock::time_point`)\n\n```c++\ninline MAKE_LOGGABLE(std::chrono::system_clock::time_point, when, os) {\n    time_t t = std::chrono::system_clock::to_time_t(when);\n    auto tm = std::localtime(&t);\n    char buf[1024];\n    strftime(buf,sizeof(buf), \"%F %T (%Z)\", tm);\n    os << buf;\n    return os;\n}\n```\n\nThis may not be practically best implementation but you get the point.\n\n > Just be careful with this as having a time-consuming overloading of `log(el::base::type::ostream_t& os)` and `MAKE_LOGGABLE`, they get called everytime class is being logged.\n\n [![top] Goto Top](#table-of-contents)\n\n### Manually Flushing and Rolling Log Files\nYou can manually flush log files using `el::Logger::flush()` (to flush single logger with all referencing log files) or `el::Loggers::flushAll()` (to flush all log files for all levels).\n\nIf you have not set flag `LoggingFlag::StrictLogFileSizeCheck` for some reason, you can manually check for log files that need rolling; by using `el::Helpers::validateFileRolling(el::Logger*, const el::Level&)`.\n\n [![top] Goto Top](#table-of-contents)\n\n### Log Dispatch Callback\nIf you wish to capture log message right after it is dispatched, you can do so by having a class that extends `el::LogDispatchCallback` and implement the pure-virtual functions, then install it at anytime using `el::Helpers::installLogDispatchCallback<T>(const std::string&)`. If you wish to uninstall a pre-installed handler with same ID, you can do so by using `el::Helpers::uninstallLogDispatchCallback<T>(const std::string&)`\n\nYou can use this feature to send it to custom destinations e.g, log stash or TCP client etc.\n\nYou can also look at [send-to-network](/samples/send-to-network) sample for practical usage of this.\n\n```c++\n// samples/send-to-network/network-logger.cpp\n\n#include \"easylogging++.h\"\n\n#include <boost/asio.hpp>\n\nINITIALIZE_EASYLOGGINGPP\n\n\nclass Client\n{\n    boost::asio::io_service* io_service;\n    boost::asio::ip::tcp::socket socket;\n\npublic:\n    Client(boost::asio::io_service* svc, const std::string& host, const std::string& port)\n        : io_service(svc), socket(*io_service)\n    {\n        boost::asio::ip::tcp::resolver resolver(*io_service);\n        boost::asio::ip::tcp::resolver::iterator endpoint = resolver.resolve(boost::asio::ip::tcp::resolver::query(host, port));\n        boost::asio::connect(this->socket, endpoint);\n    };\n\n    void send(std::string const& message) {\n        socket.send(boost::asio::buffer(message));\n    }\n};\n\nclass NetworkDispatcher : public el::LogDispatchCallback\n{\npublic:\n    void updateServer(const std::string& host, int port) {\n        m_client = std::unique_ptr<Client>(new Client(&m_svc, host, std::to_string(port)));\n    }\nprotected:\n  void handle(const el::LogDispatchData* data) noexcept override {\n      m_data = data;\n      // Dispatch using default log builder of logger\n      dispatch(m_data->logMessage()->logger()->logBuilder()->build(m_data->logMessage(),\n                 m_data->dispatchAction() == el::base::DispatchAction::NormalLog));\n  }\nprivate:\n  const el::LogDispatchData* m_data;\n  boost::asio::io_service m_svc;\n  std::unique_ptr<Client> m_client;\n\n  void dispatch(el::base::type::string_t&& logLine) noexcept\n  {\n      m_client->send(logLine);\n  }\n};\n\n\nint main() {\n    el::Helpers::installLogDispatchCallback<NetworkDispatcher>(\"NetworkDispatcher\");\n    // you can uninstall default one by\n    // el::Helpers::uninstallLogDispatchCallback<el::base::DefaultLogDispatchCallback>(\"DefaultLogDispatchCallback\");\n    // Set server params\n    NetworkDispatcher* dispatcher = el::Helpers::logDispatchCallback<NetworkDispatcher>(\"NetworkDispatcher\");\n    dispatcher->setEnabled(true);\n    dispatcher->updateServer(\"127.0.0.1\", 9090);\n\n    // Start logging and normal program...\n    LOG(INFO) << \"First network log\";\n\n    // You can even use a different logger, say \"network\" and send using a different log pattern\n}\n```\n\n > DO NOT LOG ANYTHING IN THIS HANDLER OR YOU WILL END UP IN INFINITE-LOOP\n\n [![top] Goto Top](#table-of-contents)\n\n### Logger Registration Callback\nIf you wish to capture event of logger registration (and potentially want to reconfigure this logger without changing default configuration) you can use `el::LoggerRegistrationCallback`. The syntax is similar to [other callbacks](#log-dispatch-callback). You can use [this sample](https://github.com/abumq/easyloggingpp/blob/master/samples/STL/new-logger-registration-callback.cpp) as basis.\n\n > DO NOT LOG ANYTHING IN THIS HANDLER\n\n [![top] Goto Top](#table-of-contents)\n\n### Asynchronous Logging\nPrerequisite: Define macro `ELPP_EXPERIMENTAL_ASYNC`\n\nAsynchronous logging is in experimental stages and they are not widely promoted. You may enable and test this feature by defining macro `ELPP_EXPERIMENTAL_ASYNC` and if you find some issue with the feature please report in [this issue](https://github.com/abumq/easyloggingpp/issues/202). Reporting issues always help for constant improvements.\n\nPlease note:\n* Asynchronous will only work with few compilers (it purely uses `std::thread`)\n* Compiler should support `std::this_thread::sleep_for`. This restriction may (or may not) be removed in future (stable) version of asynchronous logging.\n* You should not rely on asynchronous logging in production, this is because feature is in experimental stages.\n\n [![top] Goto Top](#table-of-contents)\n\n### Helper Classes\nThere are static helper classes available to make it easy to do stuffs;\n\n * `el::Helpers`\n * `el::Loggers`\n\nYou can do various cool stuffs using functions in these classes, see [this issue](https://github.com/abumq/easyloggingpp/issues/210) for instance.\n\n [![top] Goto Top](#table-of-contents)\n\n# Contribution\n### Submitting Patches\nYou can submit patches to `develop` branch and we will try and merge them. Since it's based on single header, it can be sometimes difficult to merge without having merge conflicts.\n\n [![top] Goto Top](#table-of-contents)\n\n### Reporting a Bug\nIf you have found a bug and wish to report it, feel free to do so at [github issue tracker](https://github.com/abumq/easyloggingpp/issues?state=open). I will try to look at it as soon as possible. Some information should be provided to make it easy to reproduce;\n* Platform (OS, Compiler)\n* Log file location\n* Macros defined (on compilation) OR simple compilation\n* Please assign issue label.\n\nTry to provide as much information as possible. Any bug with no clear information will be ignored and closed.\n\n [![top] Goto Top](#table-of-contents)\n\n# Compatibility\n\nEasylogging++ requires a decent C++0x compliant compiler. Some compilers known to work with v9.0+ are shown in table below, for older versions please refer to readme on corresponding release at github\n\n| *****   |     Compiler/Platform     |      Notes                                                                                                                                               |\n|---------|---------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------|\n|![gcc]   | GCC 4.6.4+                  | Stack trace logging. Very close to support GCC 4.6.0 if it had supported strong enum types casting to underlying type. It causes internal compiler error.  |\n|![llvm]  | Clang++ 3.1+              | Stack trace logging only with gcc compliant.                                                                                                             |\n|![intel] | Intel C++ 13.0+           | Workarounds to support: Use if instead of switch on strong enum type. No `final` keyword etc. Stack trace logging only with gcc compliant                |\n|![vcpp]  | Visual C++ 11.0+          | Tested with VS2012, VS2013; Use of argument templates instead of variadic templates. CRT warnings control. No stack trace logging.                       |\n|![mingw] | MinGW                     | (gcc version 4.7+) Workarounds to support: Mutex wrapper, no stack trace logging. No thread ID on windows                                                |\n|![tdm]   | TDM-GCC 4.7.1             | Tested with TDM-GCC 4.7.1 32 and 64 bit compilers                                                                                                        |\n|![cygwin]| Cygwin                    | Tested with gcc version 4.8+                                                                                                                             |\n|![devcpp]| Dev C++ 5.4+              | Tested with Dev-C++ 5.4.2 using TDM-GCC 4.7.1 32 & 64-bit compilers                                                                                      |\n\nOperating systems that have been tested are shown in table below. Easylogging++ should work on other major operating systems that are not in the list.\n\n| *****         | Operating System       |   Notes                                                                             |\n|---------------|------------------------|-------------------------------------------------------------------------------------|\n|![win10]        | Windows 10            | Tested on 64-bit, should also work on 32-bit                                        |\n|![win8]        | Windows 8              | Tested on 64-bit, should also work on 32-bit                                        |\n|![win7]        | Windows 7              | Tested on 64-bit, should also work on 32-bit                                        |\n|![winxp]       | Windows XP             | Tested on 32-bit, should also work on 64-bit                                        |\n|![mac]         | Mac OSX                | Clang++ 3.1, g++ (You need `-std=c++11 -stdlib=libc++` to successfully compile)     |\n|![sl]          | Scientific Linux 6.2   | Tested using Intel C++ 13.1.3 (gcc version 4.4.6 compatibility)                     |\n|![mint]        | Linux Mint 14          | 64-bit, mainly developed on this machine using all compatible linux compilers       |\n|![fedora]      | Fedora 19              | 64-bit, using g++ 4.8.1                                                             |\n|![ubuntu]      | Ubuntu 13.04           | 64-bit, using g++ 4.7.3 (libstdc++6-4.7-dev)                                        |\n|![freebsd]     | FreeBSD                | (from github user)                                                                  |\n|![android]     | Android                | Tested with C4droid (g++) on Galaxy Tab 2                                           |\n|![raspberrypi] | RaspberryPi 7.6        | Tested with 7.6.2-1.1 (gcc version 4.9.1 (Raspbian 4.9.1-1)) by contributor         |\n|![solaris]     | Solaris i86            | Tested by contributor                                                               |\n|![aix]     | IBM AIX            | Support added by contributor                                                               |\n\nEasylogging++ has also been tested with following C++ libraries;\n\n| *****       | Library                |    Notes                                                                            |\n|-------------|------------------------|-------------------------------------------------------------------------------------|\n|![qt]        | Qt                     | Tested with Qt 4.6.2, Qt 5 and Qt 5.5 (with C++0x and C++11)                        |\n|![boost]     | Boost                  | Tested with boost 1.51                                                              |\n|![wxwidgets] | wxWidgets              | Tested with wxWidgets 2.9.4                                                         |\n|![gtkmm]     | gtkmm                  | Tested with gtkmm 2.4                                                               |\n\n [![top] Goto Top](#table-of-contents)\n\n ## Build Matrix\n\n | Branch | Platform | Build Status |\n | -------- |:------------:|:------------:|\n | `develop` | GNU/Linux 4.4 / Ubuntu 4.8.4 64-bit / `clang++` | [![Build Status](https://travis-matrix-badges.herokuapp.com/repos/abumq/easyloggingpp/branches/develop/1)](https://travis-ci.org/abumq/easyloggingpp) |\n | `develop` | GNU/Linux 4.4 / Ubuntu 4.8.4 64-bit / `g++-4.9` | [![Build Status](https://travis-matrix-badges.herokuapp.com/repos/abumq/easyloggingpp/branches/develop/2)](https://travis-ci.org/abumq/easyloggingpp) |\n | `develop` | GNU/Linux 4.4 / Ubuntu 4.8.4 64-bit / `g++-5` | [![Build Status](https://travis-matrix-badges.herokuapp.com/repos/abumq/easyloggingpp/branches/develop/3)](https://travis-ci.org/abumq/easyloggingpp) |\n | `develop` | GNU/Linux 4.4 / Ubuntu 4.8.4 64-bit / `g++-6` | [![Build Status](https://travis-matrix-badges.herokuapp.com/repos/abumq/easyloggingpp/branches/develop/4)](https://travis-ci.org/abumq/easyloggingpp) |\n | `develop` | GNU/Linux 4.4 / Ubuntu 4.8.4 64-bit / `g++-7` | [![Build Status](https://travis-matrix-badges.herokuapp.com/repos/abumq/easyloggingpp/branches/develop/5)](https://travis-ci.org/abumq/easyloggingpp) |\n | `master` | GNU/Linux 4.4 / Ubuntu 4.8.4 64-bit / `clang++` | [![Build Status](https://travis-matrix-badges.herokuapp.com/repos/abumq/easyloggingpp/branches/master/1)](https://travis-ci.org/abumq/easyloggingpp) |\n | `master` | GNU/Linux 4.4 / Ubuntu 4.8.4 64-bit / `g++-4.9` | [![Build Status](https://travis-matrix-badges.herokuapp.com/repos/abumq/easyloggingpp/branches/master/2)](https://travis-ci.org/abumq/easyloggingpp) |\n | `master` | GNU/Linux 4.4 / Ubuntu 4.8.4 64-bit / `g++-5` | [![Build Status](https://travis-matrix-badges.herokuapp.com/repos/abumq/easyloggingpp/branches/master/3)](https://travis-ci.org/abumq/easyloggingpp) |\n | `master` | GNU/Linux 4.4 / Ubuntu 4.8.4 64-bit / `g++-6` | [![Build Status](https://travis-matrix-badges.herokuapp.com/repos/abumq/easyloggingpp/branches/master/4)](https://travis-ci.org/abumq/easyloggingpp) |\n | `master` | GNU/Linux 4.4 / Ubuntu 4.8.4 64-bit / `g++-7` | [![Build Status](https://travis-matrix-badges.herokuapp.com/repos/abumq/easyloggingpp/branches/master/5)](https://travis-ci.org/abumq/easyloggingpp) |\n\n  [![top] Goto Top](#table-of-contents)\n\n# Licence\n```\nThe MIT License (MIT)\n\nCopyright (c) 2012-present @abumq (Majid Q.)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n [![top] Goto Top](#table-of-contents)\n\n# Disclaimer\nIcons used in this manual (in compatibility section) are solely for information readability purposes. I do not own these icons. If anyone has issues with usage of these icon, please feel free to contact me via company's email and I will look for an alternative. Company's email address is required so that I can verify the ownership, any other email address for this purpose will be ignored.\n\n\"Pencil +\" icon is Easylogging++ logo and should only be used where giving credit to Easylogging++ library.\n\n\n [![top] Goto Top](#table-of-contents)\n\n  [ubuntu]: https://abumq.github.io/easyloggingpp/images/icons/ubuntu.png?v=2\n  [mint]: https://abumq.github.io/easyloggingpp/images/icons/linux-mint.png?v=2\n  [freebsd]: https://abumq.github.io/easyloggingpp/images/icons/free-bsd.png?v=2\n  [sl]: https://abumq.github.io/easyloggingpp/images/icons/scientific-linux.png?v=2\n  [fedora]: https://abumq.github.io/easyloggingpp/images/icons/fedora.png?v=3\n  [mac]: https://abumq.github.io/easyloggingpp/images/icons/mac-osx.png?v=2\n  [winxp]: https://abumq.github.io/easyloggingpp/images/icons/windowsxp.png?v=2\n  [win7]: https://abumq.github.io/easyloggingpp/images/icons/windows7.png?v=2\n  [win8]: https://abumq.github.io/easyloggingpp/images/icons/windows8.png?v=2\n  [win10]: https://abumq.github.io/easyloggingpp/images/icons/windows10.png?v=2\n  [qt]: https://abumq.github.io/easyloggingpp/images/icons/qt.png?v=3\n  [boost]: https://abumq.github.io/easyloggingpp/images/icons/boost.png?v=3\n  [wxwidgets]: https://abumq.github.io/easyloggingpp/images/icons/wxwidgets.png?v=3\n  [devcpp]: https://abumq.github.io/easyloggingpp/images/icons/devcpp.png?v=3\n  [gtkmm]: https://abumq.github.io/easyloggingpp/images/icons/gtkmm.png?v=3\n  [tdm]: https://abumq.github.io/easyloggingpp/images/icons/tdm.png?v=3\n  [raspberrypi]: https://abumq.github.io/easyloggingpp/images/icons/raspberry-pi.png?v=3\n  [solaris]: https://abumq.github.io/easyloggingpp/images/icons/solaris.png?v=3\n  [aix]: https://abumq.github.io/easyloggingpp/images/icons/aix.png?v=4\n\n\n  [gcc]: https://abumq.github.io/easyloggingpp/images/icons/gcc.png?v=4\n  [mingw]: https://abumq.github.io/easyloggingpp/images/icons/mingw.png?v=2\n  [cygwin]: https://abumq.github.io/easyloggingpp/images/icons/cygwin.png?v=2\n  [vcpp]: https://abumq.github.io/easyloggingpp/images/icons/vcpp.png?v=2\n  [llvm]: https://abumq.github.io/easyloggingpp/images/icons/llvm.png?v=2\n  [intel]: https://abumq.github.io/easyloggingpp/images/icons/intel.png?v=2\n  [android]: https://abumq.github.io/easyloggingpp/images/icons/android.png?v=2\n  [manual]: https://abumq.github.io/easyloggingpp/images/help.png?v=3\n  [download]: https://abumq.github.io/easyloggingpp/images/download.png?v=2\n  [samples]: https://abumq.github.io/easyloggingpp/images/sample.png?v=2\n  [notes]: https://abumq.github.io/easyloggingpp/images/notes.png?v=4\n  [top]: https://github.com/abumq/easyloggingpp/raw/master/tools/uparrow2.png?v3\n  [www]: https://abumq.github.io/easyloggingpp/images/logo-www.png?v=6\n\n [banner]: https://github.com/abumq/easyloggingpp/raw/master/tools/easyloggingpp.png?v3\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "easyloggingpp.pri",
          "type": "blob",
          "size": 0.3623046875,
          "content": "QT += core\n\nCONFIG += c++11\n\nINCLUDEPATH += $$PWD/src\n\nDEFINES += ELPP_QT_LOGGING \\\n           ELPP_STL_LOGGING \\\n           ELPP_STRICT_SIZE_CHECK ELPP_UNICODE \\\n           ELPP_MULTI_LOGGER_SUPPORT \\\n           ELPP_THREAD_SAFE \\\n           ELPP_UNICODE \\\n           ELPP_NO_DEFAULT_LOG_FILE\n\nSOURCES += $$PWD/src/easylogging++.cc\n\nHEADERS += $$PWD/src/easylogging++.h\n"
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}