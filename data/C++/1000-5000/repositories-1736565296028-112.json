{
  "metadata": {
    "timestamp": 1736565296028,
    "page": 112,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cmu-db/bustub",
      "stars": 4182,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.2353515625,
          "content": "BasedOnStyle: Google\nDerivePointerAlignment: false\nPointerAlignment: Right\nColumnLimit: 120\n\n# Default for clang-8, changed in later clangs. Set explicitly for forwards\n# compatibility for students with modern clangs\nIncludeBlocks: Preserve\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 5.0078125,
          "content": "# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n# Modified from the Apache Arrow project for the Terrier project.\n#\n---\nChecks:     '\n            bugprone-*,\n            clang-analyzer-*,\n            google-*,\n            modernize-*,\n            performance-*,\n            portability-*,\n            readability-*,\n            -bugprone-easily-swappable-parameters,\n            -bugprone-implicit-widening-of-multiplication-result,\n            -bugprone-narrowing-conversions,\n            -bugprone-reserved-identifier,\n            -bugprone-signed-char-misuse,\n            -bugprone-suspicious-include,\n            -bugprone-unhandled-self-assignment,\n            -clang-analyzer-cplusplus.NewDelete,\n            -clang-analyzer-cplusplus.NewDeleteLeaks,\n            -clang-analyzer-security.insecureAPI.rand,\n            -clang-diagnostic-implicit-int-float-conversion,\n            -google-readability-avoid-underscore-in-googletest-name,\n            -modernize-avoid-c-arrays,\n            -modernize-use-nodiscard,\n            -readability-convert-member-functions-to-static,\n            -readability-identifier-length,\n            -readability-function-cognitive-complexity,\n            -readability-magic-numbers,\n            -readability-make-member-function-const,\n            -readability-qualified-auto,\n            -readability-redundant-access-specifiers,\n            -bugprone-exception-escape,\n            '\nCheckOptions:\n  - { key: readability-identifier-naming.ClassCase,           value: CamelCase  }\n  - { key: readability-identifier-naming.EnumCase,            value: CamelCase  }\n  - { key: readability-identifier-naming.FunctionCase,        value: CamelCase  }\n  - { key: readability-identifier-naming.GlobalConstantCase,  value: UPPER_CASE }\n  - { key: readability-identifier-naming.MemberCase,          value: lower_case }\n  - { key: readability-identifier-naming.MemberSuffix,        value: _          }\n  - { key: readability-identifier-naming.NamespaceCase,       value: lower_case }\n  - { key: readability-identifier-naming.StructCase,          value: CamelCase  }\n  - { key: readability-identifier-naming.UnionCase,           value: CamelCase  }\n  - { key: readability-identifier-naming.VariableCase,        value: lower_case }\nWarningsAsErrors: '*'\nHeaderFilterRegex: '/(src|test)/include'\nAnalyzeTemporaryDtors: true\n\n#### Disabled checks and why: #####\n#\n# -readability-convert-member-functions-to-static,\n#     This check started going off in the upgrade from clang-tidy-8 to clang-tidy-12.  It is not always correct because \n#     we hide the reference implementation in another repository.\n# -clang-analyzer-security.insecureAPI.rand, -clang-analyzer-security.insecureAPI.rand, -bugprone-unhandled-self-assignment, \n# -bugprone-implicit-widening-of-multiplication-result\n#     These have not been investigated yet.\n# -bugprone-reserved-identifier, \n#     Fails due to use of some __SHORT_FILE__ symbol, originating from very old code.\n# -bugprone-suspicious-include, \n#     False positive due to GTest code.\n# -bugprone-too-small-loop-variable,\n#     Complains about uint8_t or uint16_t when the limit on the loop is a container's .size() (size_t).\n#     We usually do this when we know the maximum size of the container though, so propose leaving disabled.\n# -clang-analyzer-cplusplus.NewDelete,\n#     Seems to generate false positives. Suggest relying on ASAN and valgrind for memory stuff.\n# -clang-analyzer-cplusplus.NewDeleteLeaks,\n#     Seems to generate false positives. Suggest relying on ASAN and valgrind for memory stuff.\n# -modernize-use-nodiscard,\n#     New C++17 feature, slightly polarizing. Would clutter codebase.\n# -modernize-avoid-c-arrays,\n#     We use C-style arrays in page.h, type.h and logger.h. They're a little more ergonomic than std::array. Thoughts?\n# -readability-magic-numbers,\n#     Let's not deal with people doing ridiculous things to hack around this. If it bites them, it bites them.\n# -bugprone-signed-char-misuse, -clang-diagnostic-implicit-int-float-conversion, -readability-make-member-function-const, \n# -readability-qualified-auto, -readability-redundant-access-specifiers\n#     These were previously disabled for not being available in clang-tidy-8. They are now available on our clang-tidy-12, \n#     and potentially worth investigating/fixing.\n# -bugprone-exception-escape\n#     Weird. No idea how to resolve.\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.04296875,
          "content": "# Don't send any build context to Docker.\n**"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.017578125,
          "content": "*.slt text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.2578125,
          "content": "#==============================================================================#\n# This file specifies intentionally untracked files that git should ignore.\n#==============================================================================#\n/GRADESCOPE.md\n\n#==============================================================================#\n# File extensions to be ignored anywhere in the tree.\n#==============================================================================#\n# Temp files created by most text editors.\n*~\n# Merge files created by git.\n*.orig\n# Java bytecode\n*.class\n# Byte compiled python modules.\n*.pyc\n# vim swap files\n.*.sw?\n.sw?\n# vscode settings directory\n.vscode\n#OS X specific files.\n.DS_store\n# Core files\n#core\n\n#==============================================================================#\n# Explicit files to ignore (only matches one).\n#==============================================================================#\n# Various tag programs\n/tags\n/TAGS\n/GPATH\n/GRTAGS\n/GSYMS\n/GTAGS\n.gitusers\nautom4te.cache\ncscope.files\ncscope.out\nautoconf/aclocal.m4\nautoconf/autom4te.cache\n/compile_commands.json\n\n#==============================================================================#\n# Build artifacts\n#==============================================================================#\n#m4/\nbuild/\n#*.m4\n*.o\n*.lo\n*.la\n*~\n*.pdf\n*.swp\na.out\n\n#==============================================================================#\n# Kate Swap Files\n#==============================================================================#\n*.kate-swp\n.#kate-*\n\n#==============================================================================#\n# Backup artifacts\n#==============================================================================#\n~*\n*~\ntmp/\n\n#==============================================================================#\n# KDevelop files\n#==============================================================================#\n.kdev4\n*.kdev4\n.dirstamp\n.deps\n.libs\n\n#==============================================================================#\n# Eclipse files\n#==============================================================================#\n.wtpmodules\n.classpath\n.project\n.cproject\n.pydevproject\n.settings\n.autotools\n\n/Debug/\n/misc/\n\n#==============================================================================#\n# Intellij files\n#==============================================================================#\n.idea\n*.iml\n\n#==============================================================================#\n# Code Coverage files\n#==============================================================================#\n*.gcno\n*.gcda\n\n\n#==============================================================================#\n# Eclipse\n#==============================================================================#\n\n.metadata\nbin/\ntmp/\n*.tmp\n*.bak\n*.swp\n*~.nib\nlocal.properties\n.settings/\n.loadpath\n.recommenders\n\n# Eclipse Core\n.project\n\n# External tool builders\n.externalToolBuilders/\n\n# Locally stored \"Eclipse launch configurations\"\n*.launch\n\n# PyDev specific (Python IDE for Eclipse)\n*.pydevproject\n\n# CDT-specific (C/C++ Development Tooling)\n.cproject\n\n# JDT-specific (Eclipse Java Development Tools)\n.classpath\n\n# Java annotation processor (APT)\n.factorypath\n\n# PDT-specific (PHP Development Tools)\n.buildpath\n\n# sbteclipse plugin\n.target\n\n# Tern plugin\n.tern-project\n\n# TeXlipse plugin\n.texlipse\n\n# STS (Spring Tool Suite)\n.springBeans\n\n# Code Recommenders\n.recommenders/\nio_file\n\n## General\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.cuo\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n\n# Compiled python\n*.pyc\n\n# Compiled MATLAB\n*.mex*\n\n# IPython notebook checkpoints\n.ipynb_checkpoints\n\n# Editor temporaries\n*.swp\n*~\n\n# Sublime Text settings\n*.sublime-workspace\n*.sublime-project\n\n# Eclipse Project settings\n*.*project\n.settings\n\n# Visual Studio\n.vs\n\n# QtCreator files\n*.user\n\n# PyCharm files\n.idea\n\n# OSX dir files\n.DS_Store\n\n# User's build configuration\nMakefile.config\n\n# build, distribute, and bins (+ python proto bindings)\nbuild\n.build_debug/*\n.build_release/*\ndistribute/*\n*.testbin\n*.bin\ncmake_build\n.cmake_build\ncmake-build-*\n\n# Generated documentation\napidoc/doc\ndocs/_site\ndocs/gathered\n_site\ndoxygen\ndocs/dev\n\n# Config files\n*.conf\n\n# Vagrant\n.vagrant\n\n# Clangd cache index\n.cache\n\n# Submission zip files\n*.zip\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 16.4306640625,
          "content": "cmake_minimum_required(VERSION 3.10)\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON) # For clang-tidy.\nset(BUILD_SHARED_LIBS OFF) # We expect external libraries to be linked statically.\nset(CMAKE_CXX_STANDARD 17) # Compile as C++17.\nset(CMAKE_CXX_STANDARD_REQUIRED ON) # Require C++17 support.\n\nproject(BusTub\n        VERSION 2023.1\n        DESCRIPTION \"The BusTub Relational Database Management System (Educational) @ https://github.com/cmu-db/bustub\"\n        LANGUAGES C CXX\n)\n\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n        message(STATUS \"Setting build type to `Debug` as none was specified.\")\n        set(CMAKE_BUILD_TYPE \"Debug\")\nendif()\n\nif(EMSCRIPTEN)\n        add_compile_options(-fexceptions)\n        add_link_options(-fexceptions)\n\n        # Memory configuration\n        add_compile_options(-sALLOW_MEMORY_GROWTH=1)\n        add_compile_options(-sMAXIMUM_MEMORY=64MB)\n        add_link_options(-sALLOW_MEMORY_GROWTH=1)\n        add_link_options(-sMAXIMUM_MEMORY=64MB)\nendif()\n\n# People keep running CMake in the wrong folder, completely nuking their project or creating weird bugs.\n# This checks if you're running CMake from a folder that already has CMakeLists.txt.\n# Importantly, this catches the common case of running it from the root directory.\nfile(TO_CMAKE_PATH \"${PROJECT_BINARY_DIR}/CMakeLists.txt\" PATH_TO_CMAKELISTS_TXT)\n\nif(EXISTS \"${PATH_TO_CMAKELISTS_TXT}\")\n        message(FATAL_ERROR \"Run CMake from a build subdirectory! \\\"mkdir build ; cd build ; cmake ..\\\" \\\n    Some junk files were created in this folder (CMakeCache.txt, CMakeFiles); you should delete those.\")\nendif()\n\n# Expected directory structure.\nset(BUSTUB_BUILD_SUPPORT_DIR \"${CMAKE_SOURCE_DIR}/build_support\")\nset(BUSTUB_CLANG_SEARCH_PATH \"/usr/local/bin\" \"/usr/bin\" \"/usr/local/opt/llvm/bin\" \"/usr/local/opt/llvm@14/bin\"\n        \"/opt/homebrew/opt/llvm@14/bin/\")\n\nif(CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n        if(CMAKE_CXX_COMPILER_VERSION MATCHES \"^14.\")\n                message(STATUS \"You're using ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}\")\n        else()\n                message(WARNING \"!! We recommend that you use clang-14 for developing BusTub. You're using ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}, a different version.\")\n        endif()\nelseif(CMAKE_CXX_COMPILER_ID STREQUAL \"AppleClang\")\n        message(STATUS \"You're using ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}\")\nelse()\n        message(WARNING \"!! We recommend that you use clang-14 for developing BusTub. You're using ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}, which is not clang.\")\nendif()\n\n# #####################################################################################################################\n# DEPENDENCIES\n# #####################################################################################################################\n\n# CTest\nenable_testing()\n\n# clang-format\n\n# attempt to find the binary if user did not specify\nfind_program(CLANG_FORMAT_BIN\n        NAMES clang-format clang-format-14\n        HINTS ${BUSTUB_CLANG_SEARCH_PATH})\n\nif(\"${CLANG_FORMAT_BIN}\" STREQUAL \"CLANG_FORMAT_BIN-NOTFOUND\")\n        message(WARNING \"BusTub/main couldn't find clang-format.\")\nelse()\n        message(STATUS \"BusTub/main found clang-format at ${CLANG_FORMAT_BIN}\")\nendif()\n\n# attempt to find the binary if user did not specify\nfind_program(CLANG_TIDY_BIN\n        NAMES clang-tidy clang-tidy-14\n        HINTS ${BUSTUB_CLANG_SEARCH_PATH})\n\nif(\"${CLANG_TIDY_BIN}\" STREQUAL \"CLANG_TIDY_BIN-NOTFOUND\")\n        message(WARNING \"BusTub/main couldn't find clang-tidy.\")\nelse()\n        # Output compile_commands.json\n        set(CMAKE_EXPORT_COMPILE_COMMANDS 1)\n        message(STATUS \"BusTub/main found clang-tidy at ${CLANG_TIDY_BIN}\")\nendif()\n\nfind_program(CLANG_APPLY_REPLACEMENTS_BIN\n        NAMES clang-apply-replacements clang-apply-replacements-14\n        HINTS ${BUSTUB_CLANG_SEARCH_PATH})\n\nif(\"${CLANG_APPLY_REPLACEMENTS_BIN}\" STREQUAL \"CLANG_APPLY_REPLACEMENTS_BIN-NOTFOUND\")\n        message(WARNING \"BusTub/main couldn't find clang-apply-replacements.\")\nelse()\n        # Output compile_commands.json\n        set(CMAKE_EXPORT_COMPILE_COMMANDS 1)\n        message(STATUS \"BusTub/main found clang-apply-replacements at ${CLANG_APPLY_REPLACEMENTS_BIN}\")\nendif()\n\n# cpplint\nfind_program(CPPLINT_BIN\n        NAMES cpplint cpplint.py\n        HINTS \"${BUSTUB_BUILD_SUPPORT_DIR}\")\n\nif(\"${CPPLINT_BIN}\" STREQUAL \"CPPLINT_BIN-NOTFOUND\")\n        message(WARNING \"BusTub/main couldn't find cpplint.\")\nelse()\n        message(STATUS \"BusTub/main found cpplint at ${CPPLINT_BIN}\")\nendif()\n\n# #####################################################################################################################\n# COMPILER SETUP\n# #####################################################################################################################\nif(NOT DEFINED BUSTUB_SANITIZER)\n        set(BUSTUB_SANITIZER address)\nendif()\n\nmessage(\"Build mode: ${CMAKE_BUILD_TYPE}\")\nmessage(\"${BUSTUB_SANITIZER} sanitizer will be enabled in debug mode.\")\n\n# Compiler flags.\nset(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -Wall -Wextra -Werror\")\nset(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -Wno-unused-parameter -Wno-attributes\") # TODO: remove\nset(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -O0 -ggdb -fsanitize=${BUSTUB_SANITIZER} -fno-omit-frame-pointer -fno-optimize-sibling-calls\")\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\n\nmessage(STATUS \"CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}\")\nmessage(STATUS \"CMAKE_CXX_FLAGS_DEBUG: ${CMAKE_CXX_FLAGS_DEBUG}\")\nmessage(STATUS \"CMAKE_EXE_LINKER_FLAGS: ${CMAKE_EXE_LINKER_FLAGS}\")\nmessage(STATUS \"CMAKE_SHARED_LINKER_FLAGS: ${CMAKE_SHARED_LINKER_FLAGS}\")\n\n# Output directory.\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\n\n# Includes.\nset(BUSTUB_SRC_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/src/include)\nset(BUSTUB_TEST_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/test/include)\nset(BUSTUB_THIRD_PARTY_INCLUDE_DIR\n        ${PROJECT_SOURCE_DIR}/third_party\n        ${PROJECT_SOURCE_DIR}/third_party/fmt/include\n        ${PROJECT_SOURCE_DIR}/third_party/libpg_query/include\n        ${PROJECT_SOURCE_DIR}/third_party/argparse/include\n        ${PROJECT_SOURCE_DIR}/third_party/cpp_random_distributions\n        ${PROJECT_SOURCE_DIR}/third_party/backward-cpp\n)\n\ninclude_directories(${BUSTUB_SRC_INCLUDE_DIR} ${BUSTUB_TEST_INCLUDE_DIR} ${BUSTUB_THIRD_PARTY_INCLUDE_DIR})\ninclude_directories(BEFORE src) # This is needed for gtest.\n\nfunction(disable_target_warnings NAME)\n        target_compile_options(${NAME} PRIVATE \"-w\")\nendfunction()\n\n# #####################################################################################################################\n# Other CMake modules\n# MUST BE ADDED AFTER CONFIGURING COMPILER PARAMETERS\n# #####################################################################################################################\nset(CMAKE_MODULE_PATH \"${BUSTUB_BUILD_SUPPORT_DIR}/cmake;${CMAKE_MODULE_PATH}\")\nfind_package(LibElf)\nfind_package(LibDwarf)\n\nadd_subdirectory(third_party)\nadd_subdirectory(src)\nadd_subdirectory(test)\nadd_subdirectory(tools)\n\n# #####################################################################################################################\n# MAKE TARGETS\n# #####################################################################################################################\n\n# #########################################\n# \"make format\"\n# \"make check-format\"\n# #########################################\nstring(CONCAT BUSTUB_FORMAT_DIRS\n        \"${CMAKE_CURRENT_SOURCE_DIR}/src,\"\n        \"${CMAKE_CURRENT_SOURCE_DIR}/test,\"\n)\n\n# Runs clang format and updates files in place.\nadd_custom_target(format ${BUSTUB_BUILD_SUPPORT_DIR}/run_clang_format.py\n        ${CLANG_FORMAT_BIN}\n        ${BUSTUB_BUILD_SUPPORT_DIR}/clang_format_exclusions.txt\n        --source_dirs\n        ${BUSTUB_FORMAT_DIRS}\n        --fix\n        --quiet\n)\n\n# Runs clang format and exits with a non-zero exit code if any files need to be reformatted\nadd_custom_target(check-format ${BUSTUB_BUILD_SUPPORT_DIR}/run_clang_format.py\n        ${CLANG_FORMAT_BIN}\n        ${BUSTUB_BUILD_SUPPORT_DIR}/clang_format_exclusions.txt\n        --source_dirs\n        ${BUSTUB_FORMAT_DIRS}\n        --quiet\n)\n\n# #########################################\n# \"make check-lint\"\n# #########################################\nfile(GLOB_RECURSE BUSTUB_LINT_FILES\n        \"${CMAKE_CURRENT_SOURCE_DIR}/src/*.h\"\n        \"${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp\"\n        \"${CMAKE_CURRENT_SOURCE_DIR}/test/*.h\"\n        \"${CMAKE_CURRENT_SOURCE_DIR}/test/*.cpp\"\n)\n\n# Balancing act: cpplint.py takes a non-trivial time to launch,\n# so process 12 files per invocation, while still ensuring parallelism\nadd_custom_target(check-lint echo '${BUSTUB_LINT_FILES}' | xargs -n12 -P8\n        ${CPPLINT_BIN}\n        --verbose=2 --quiet\n        --linelength=120\n        --filter=-legal/copyright,-build/header_guard,-runtime/references # https://github.com/cpplint/cpplint/issues/148\n)\n\n# ##########################################################\n# \"make check-clang-tidy\" target\n# ##########################################################\n# runs clang-tidy and exits with a non-zero exit code if any errors are found.\n# note that clang-tidy automatically looks for a .clang-tidy file in parent directories\nadd_custom_target(check-clang-tidy\n        ${BUSTUB_BUILD_SUPPORT_DIR}/run_clang_tidy.py # run LLVM's clang-tidy script\n        -clang-tidy-binary ${CLANG_TIDY_BIN} # using our clang-tidy binary\n        -p ${CMAKE_BINARY_DIR} # using cmake's generated compile commands\n)\nadd_custom_target(fix-clang-tidy\n        ${BUSTUB_BUILD_SUPPORT_DIR}/run_clang_tidy.py # run LLVM's clang-tidy script\n        -clang-tidy-binary ${CLANG_TIDY_BIN} # using our clang-tidy binary\n        -p ${CMAKE_BINARY_DIR} # using cmake's generated compile commands\n        -clang-apply-replacements-binary ${CLANG_APPLY_REPLACEMENTS_BIN} # using our clang-apply-replacements binary\n        -fix # apply suggested changes generated by clang-tidy\n)\nadd_custom_target(check-clang-tidy-diff\n        ${BUSTUB_BUILD_SUPPORT_DIR}/run_clang_tidy.py # run LLVM's clang-tidy script\n        -clang-tidy-binary ${CLANG_TIDY_BIN} # using our clang-tidy binary\n        -p ${CMAKE_BINARY_DIR} # using cmake's generated compile commands\n        -only-diff # only check diff files to master\n)\nadd_custom_target(fix-clang-tidy-diff\n        ${BUSTUB_BUILD_SUPPORT_DIR}/run_clang_tidy.py # run LLVM's clang-tidy script\n        -clang-tidy-binary ${CLANG_TIDY_BIN} # using our clang-tidy binary\n        -p ${CMAKE_BINARY_DIR} # using cmake's generated compile commands\n        -clang-apply-replacements-binary ${CLANG_APPLY_REPLACEMENTS_BIN} # using our clang-apply-replacements binary\n        -fix # apply suggested changes generated by clang-tidy\n        -only-diff # only check diff files to master\n)\n\n# ##########################################################\n# \"make check-clang-tidy\" target for projects\n# check clang-tidy on the whole projects is slow, so we\n# hardcode some files to check here for each project.\n# ##########################################################\nset(P0_FILES\n        \"src/include/primer/hyperloglog.h\"\n        \"src/include/primer/hyperloglog_presto.h\"\n        \"src/primer/hyperloglog.cpp\"\n        \"src/primer/hyperloglog_presto.cpp\"\n)\n\nadd_custom_target(check-clang-tidy-p0\n        ${BUSTUB_BUILD_SUPPORT_DIR}/run_clang_tidy.py # run LLVM's clang-tidy script\n        -clang-tidy-binary ${CLANG_TIDY_BIN} # using our clang-tidy binary\n        -p ${CMAKE_BINARY_DIR} # using cmake's generated compile commands\n        ${P0_FILES}\n)\nadd_custom_target(submit-p0\n        zip project0-submission.zip\n        ${P0_FILES}\n        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n)\n\nset(P1_FILES\n        \"src/include/buffer/lru_k_replacer.h\"\n        \"src/buffer/lru_k_replacer.cpp\"\n        \"src/include/buffer/buffer_pool_manager.h\"\n        \"src/buffer/buffer_pool_manager.cpp\"\n        \"src/include/storage/disk/disk_scheduler.h\"\n        \"src/storage/disk/disk_scheduler.cpp\"\n        \"src/storage/page/page_guard.cpp\"\n        \"src/include/storage/page/page_guard.h\"\n)\nadd_custom_target(check-clang-tidy-p1\n        ${BUSTUB_BUILD_SUPPORT_DIR}/run_clang_tidy.py # run LLVM's clang-tidy script\n        -clang-tidy-binary ${CLANG_TIDY_BIN} # using our clang-tidy binary\n        -p ${CMAKE_BINARY_DIR} # using cmake's generated compile commands\n        ${P1_FILES}\n)\nadd_custom_target(submit-p1\n        zip project1-submission.zip\n        ${P1_FILES}\n        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n)\n\nset(P2_FILES\n        \"src/include/storage/page/b_plus_tree_page.h\"\n        \"src/storage/page/b_plus_tree_page.cpp\"\n        \"src/include/storage/page/b_plus_tree_internal_page.h\"\n        \"src/storage/page/b_plus_tree_internal_page.cpp\"\n        \"src/include/storage/page/b_plus_tree_leaf_page.h\"\n        \"src/storage/page/b_plus_tree_leaf_page.cpp\"\n        \"src/include/storage/index/index_iterator.h\"\n        \"src/storage/index/index_iterator.cpp\"\n        \"src/include/storage/index/b_plus_tree.h\"\n        \"src/include/storage/index/b_plus_tree_debug.h\"\n        \"src/storage/index/b_plus_tree.cpp\"\n        ${P1_FILES}\n)\nadd_custom_target(check-clang-tidy-p2\n        ${BUSTUB_BUILD_SUPPORT_DIR}/run_clang_tidy.py # run LLVM's clang-tidy script\n        -clang-tidy-binary ${CLANG_TIDY_BIN} # using our clang-tidy binary\n        -p ${CMAKE_BINARY_DIR} # using cmake's generated compile commands\n        ${P2_FILES}\n)\nadd_custom_target(submit-p2\n        zip project2-submission.zip\n        ${P2_FILES}\n        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n)\n\nset(P3_FILES\n        \"src/include/execution/executors/aggregation_executor.h\"\n        \"src/include/execution/executors/delete_executor.h\"\n        \"src/include/execution/executors/filter_executor.h\"\n        \"src/include/execution/executors/hash_join_executor.h\"\n        \"src/include/execution/executors/index_scan_executor.h\"\n        \"src/include/execution/executors/insert_executor.h\"\n        \"src/include/execution/executors/limit_executor.h\"\n        \"src/include/execution/executors/nested_index_join_executor.h\"\n        \"src/include/execution/executors/nested_loop_join_executor.h\"\n        \"src/include/execution/executors/seq_scan_executor.h\"\n        \"src/include/execution/executors/external_merge_sort_executor.h\"\n        \"src/include/execution/executors/update_executor.h\"\n        \"src/execution/aggregation_executor.cpp\"\n        \"src/execution/delete_executor.cpp\"\n        \"src/execution/filter_executor.cpp\"\n        \"src/execution/hash_join_executor.cpp\"\n        \"src/execution/index_scan_executor.cpp\"\n        \"src/execution/insert_executor.cpp\"\n        \"src/execution/limit_executor.cpp\"\n        \"src/execution/nested_index_join_executor.cpp\"\n        \"src/execution/nested_loop_join_executor.cpp\"\n        \"src/execution/seq_scan_executor.cpp\"\n        \"src/execution/external_merge_sort_executor.cpp\"\n        \"src/execution/update_executor.cpp\"\n        \"src/include/execution/execution_common.h\"\n        \"src/include/optimizer/optimizer.h\"\n        \"src/include/optimizer/optimizer_internal.h\"\n        \"src/execution/execution_common.cpp\"\n        \"src/optimizer/nlj_as_hash_join.cpp\"\n        \"src/optimizer/optimizer_custom_rules.cpp\"\n        \"src/optimizer/optimizer_internal.cpp\"\n        \"src/optimizer/seqscan_as_indexscan.cpp\"\n        \"src/optimizer/column_pruning.cpp\"\n        \"src/common/bustub_ddl.cpp\"\n        ${P2_FILES}\n)\n\nadd_custom_target(check-clang-tidy-p3\n        ${BUSTUB_BUILD_SUPPORT_DIR}/run_clang_tidy.py # run LLVM's clang-tidy script\n        -clang-tidy-binary ${CLANG_TIDY_BIN} # using our clang-tidy binary\n        -p ${CMAKE_BINARY_DIR} # using cmake's generated compile commands\n        ${P3_FILES}\n)\nadd_custom_target(submit-p3\n        zip project3-submission.zip\n        ${P3_FILES}\n        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n)\n\nset(P4_FILES\n        \"src/include/concurrency/transaction_manager.h\"\n        \"src/concurrency/transaction_manager.cpp\"\n        \"src/include/concurrency/watermark.h\"\n        \"src/concurrency/watermark.cpp\"\n        ${P3_FILES}\n)\n\nadd_custom_target(check-clang-tidy-p4\n        ${BUSTUB_BUILD_SUPPORT_DIR}/run_clang_tidy.py # run LLVM's clang-tidy script\n        -clang-tidy-binary ${CLANG_TIDY_BIN} # using our clang-tidy binary\n        -p ${CMAKE_BINARY_DIR} # using cmake's generated compile commands\n        ${P4_FILES}\n)\n\nadd_custom_target(submit-p4\n        zip project4-submission.zip\n        ${P4_FILES}\n        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n)\n\nadd_dependencies(check-clang-tidy gtest bustub) # needs gtest headers, compile_commands.json\n"
        },
        {
          "name": "GRADESCOPE.md.template",
          "type": "blob",
          "size": 1.1572265625,
          "content": "To create a fair learning environment for all students and avoid potential Academic Integrity Violations within Carnegie Mellon University, we ask you to sign this short agreement before submitting to Gradescope.\n\n1. I agree NOT to make my solution public. i.e., DO NOT make it public on GitHub or create videos explaining the solution code.\n2. I agree NOT to hack Gradescope. i.e., DO NOT retrieve private test cases from Gradescope, or bypass correctness checks.\n3. I affirm that the work I submit for assessment is my original work. i.e., DO NOT purchase/copy solution from others.\n4. I understand that the course staff does not provide official help for students outside CMU. i.e., DO NOT email the course staff or create GitHub issues for course-related questions. Use the unofficial Discord server.\nI understand that if I violate the rules, I will be banned from using Gradescope.\n\nName:\nAffiliation (School/Company):\nEmail:\nGitHub ID:\nDate:\n\nI understand that if I provide a fake signature, I will be banned from using Gradescope.\n\n[id]: bustub-non-cmu-gradescope-23333\n\n<!-- Hopefully GitHub can index the above slug and we can easily find BusTub repos with GitHub search. -->\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0498046875,
          "content": "MIT License\n\nCopyright (c) 2019 CMU Database Group\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.8193359375,
          "content": "<img src=\"logo/bustub-whiteborder.svg\" alt=\"BusTub Logo\" height=\"200\">\n\n-----------------\n\n[![Build Status](https://github.com/cmu-db/bustub/actions/workflows/cmake.yml/badge.svg)](https://github.com/cmu-db/bustub/actions/workflows/cmake.yml)\n\nBusTub is a relational database management system built at [Carnegie Mellon University](https://db.cs.cmu.edu) for the [Introduction to Database Systems](https://15445.courses.cs.cmu.edu) (15-445/645) course. This system was developed for educational purposes and should not be used in production environments.\n\nBusTub supports basic SQL and comes with an interactive shell. You can get it running after finishing all the course projects.\n\n<img src=\"logo/sql.png\" alt=\"BusTub SQL\" width=\"400\">\n\n**WARNING: IF YOU ARE A STUDENT IN THE CLASS, DO NOT DIRECTLY FORK THIS REPO. DO NOT PUSH PROJECT SOLUTIONS PUBLICLY. THIS IS AN ACADEMIC INTEGRITY VIOLATION AND CAN LEAD TO GETTING YOUR DEGREE REVOKED, EVEN AFTER YOU GRADUATE.**\n\nWe make the autograder for each assignment available to non-CMU students on Gradescope after their due date for CMU students. In exchange for making this available to the public, we ask that you do not make your project implementations public on Github or other source code repositories. Please read the course FAQ on how to use the autograder on Gradescope. Run `python3 gradescope_sign.py` to sign an agreement before submitting to the autograder.\n\n**WARNING: IF YOU ARE A STUDENT OUTSIDE CMU, DO NOT MAKE YOUR SOLUTION PUBLICLY AVAILABLE, AND DO SUBMIT YOUR OWN WORK. OTHERWISE, YOU WILL BE BANNED FROM USING THE AUTOGRADER.** Thank you for creating a fair learning environment.\n\n## Cloning this Repository\n\nThe following instructions are adapted from the Github documentation on [duplicating a repository](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-on-github/duplicating-a-repository). The procedure below walks you through creating a private BusTub repository that you can use for development.\n\n1. Go [here](https://github.com/new) to create a new repository under your account. Pick a name (e.g. `bustub-private`) and select **Private** for the repository visibility level.\n2. On your development machine, create a bare clone of the public BusTub repository:\n   ```console\n   $ git clone --bare https://github.com/cmu-db/bustub.git bustub-public\n   ```\n3. Next, [mirror](https://git-scm.com/docs/git-push#Documentation/git-push.txt---mirror) the public BusTub repository to your own private BusTub repository. Suppose your GitHub name is `student` and your repository name is `bustub-private`. The procedure for mirroring the repository is then:\n   ```console\n   $ cd bustub-public\n   \n   # If you pull / push over HTTPS\n   $ git push https://github.com/student/bustub-private.git master\n\n   # If you pull / push over SSH\n   $ git push git@github.com:student/bustub-private.git master\n   ```\n   This copies everything in the public BusTub repository to your own private repository. You can now delete your local clone of the public repository:\n   ```console\n   $ cd ..\n   $ rm -rf bustub-public\n   ```\n4. Clone your private repository to your development machine:\n   ```console\n   # If you pull / push over HTTPS\n   $ git clone https://github.com/student/bustub-private.git\n\n   # If you pull / push over SSH\n   $ git clone git@github.com:student/bustub-private.git\n   ```\n5. Add the public BusTub repository as a second remote. This allows you to retrieve changes from the CMU-DB repository and merge them with your solution throughout the semester:\n   ```console\n   $ git remote add public https://github.com/cmu-db/bustub.git\n   ```\n   You can verify that the remote was added with the following command:\n   ```console\n   $ git remote -v\n   origin\thttps://github.com/student/bustub-private.git (fetch)\n   origin\thttps://github.com/student/bustub-private.git (push)\n   public\thttps://github.com/cmu-db/bustub.git (fetch)\n   public\thttps://github.com/cmu-db/bustub.git (push)\n   ```\n6. You can now pull in changes from the public BusTub repository as needed with:\n   ```console\n   $ git pull public master\n   ```\n7. **Disable GitHub Actions** from the project settings of your private repository, otherwise you may run out of GitHub Actions quota.\n   ```\n   Settings > Actions > General > Actions permissions > Disable actions.\n   ```\n\nWe suggest working on your projects in separate branches. If you do not understand how Git branches work, [learn how](https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging). If you fail to do this, you might lose all your work at some point in the semester, and nobody will be able to help you.\n\n## Build\n\nWe recommend developing BusTub on Ubuntu 22.04, or macOS (M1/M2/Intel). We do not support any other environments (i.e., do not open issues or come to office hours to debug them). We do not support WSL. The grading environment runs\nUbuntu 22.04.\n\n### Linux (Recommended) / macOS (Development Only)\n\nTo ensure that you have the proper packages on your machine, run the following script to automatically install them:\n\n```console\n# Linux\n$ sudo build_support/packages.sh\n# macOS\n$ build_support/packages.sh\n```\n\nThen run the following commands to build the system:\n\n```console\n$ mkdir build\n$ cd build\n$ cmake ..\n$ make\n```\n\nIf you want to compile the system in debug mode, pass in the following flag to cmake:\nDebug mode:\n\n```console\n$ cmake -DCMAKE_BUILD_TYPE=Debug ..\n$ make -j`nproc`\n```\nThis enables [AddressSanitizer](https://github.com/google/sanitizers) by default.\n\nIf you want to use other sanitizers,\n\n```console\n$ cmake -DCMAKE_BUILD_TYPE=Debug -DBUSTUB_SANITIZER=thread ..\n$ make -j`nproc`\n```\n\nThere are some differences between macOS and Linux (i.e., mutex behavior) that might cause test cases\nto produce different results in different platforms. We recommend students to use a Linux VM for running\ntest cases and reproducing errors whenever possible.\n"
        },
        {
          "name": "build_support",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradescope_sign.py",
          "type": "blob",
          "size": 3.462890625,
          "content": "#!/usr/bin/env python3\n\nfrom datetime import datetime\nfrom pathlib import Path\nimport subprocess\n\n\ndef request_yn(buffer, msg):\n    print(msg, end=\"\")\n    print(\" [y/N] \", end=\"\")\n    yn = input()\n    assert yn == \"y\"\n    buffer += msg\n    buffer += \"\\n\"\n    return buffer\n\n\ndef request_sign(buffer, msg):\n    print(msg, end=\"\")\n    print(\" \", end=\"\")\n    data = input()\n    assert len(data) >= 2\n    buffer += msg\n    buffer += \" \"\n    buffer += data\n    buffer += \"\\n\"\n    return buffer\n\n\ndef request_date(buffer, msg):\n    print(msg, end=\"\")\n    buffer += msg\n    date = datetime.today().strftime(\"%Y-%m-%d\")\n    print(\" \" + date)\n    buffer += \" \"\n    buffer += date\n    buffer += \"\\n\"\n    return buffer\n\n\ndef add_to_submission():\n    for item in Path().iterdir():\n        name = item.name\n        if name.startswith(\"project\") and name.endswith(\"-submission.zip\"):\n            print(\"adding GRADESCOPE.md to\", name)\n            subprocess.run([\"zip\", name, \"GRADESCOPE.md\"])\n\n\ndef main():\n    if Path(\"GRADESCOPE.md\").exists():\n        print(\"Found existing signature GRADESCOPE.md, adding to all submissions...\")\n        add_to_submission()\n        print(\n            \"If you want to make modifications to signed document, run `rm GRADESCOPE.md` and then run this script again.\"\n        )\n        return\n    buffer = \"\"\n    buffer = request_yn(\n        buffer,\n        \"To create a fair learning environment for all students and avoid potential Academic Integrity Violations within Carnegie Mellon University, we ask you to sign this short agreement before submitting to Gradescope.\",\n    )\n    buffer += \"\\n\"\n    buffer = request_yn(\n        buffer,\n        \"1. I agree NOT to make my solution public. i.e., DO NOT make it public on GitHub or create videos explaining the solution code.\",\n    )\n    buffer = request_yn(\n        buffer,\n        \"2. I agree NOT to hack Gradescope. i.e., DO NOT retrieve private test cases from Gradescope, or bypass correctness checks.\",\n    )\n    buffer = request_yn(\n        buffer,\n        \"3. I affirm that the work I submit for assessment is my original work. i.e., DO NOT purchase/copy solution from others.\",\n    )\n    buffer = request_yn(\n        buffer,\n        \"4. I understand that the course staff does not provide official help for students outside CMU. i.e., DO NOT email the course staff or create GitHub issues for course-related questions. Use the unofficial Discord server.\",\n    )\n    buffer = request_yn(\n        buffer,\n        \"I understand that if I violate the rules, I will be banned from using Gradescope.\",\n    )\n    buffer += \"\\n\"\n    buffer = request_sign(buffer, \"Name:\")\n    buffer = request_sign(buffer, \"Affiliation (School/Company):\")\n    buffer = request_sign(buffer, \"Email:\")\n    buffer = request_sign(buffer, \"GitHub ID:\")\n    buffer = request_date(buffer, \"Date:\")\n    buffer += \"\\n\"\n    buffer = request_yn(\n        buffer,\n        \"I understand that if I provide a fake signature, I will be banned from using Gradescope.\",\n    )\n    print()\n    print(\"--- THIS IS A COPY OF THE SIGNED DOCUMENT ---\")\n    print(buffer)\n    print(\"--- END OF THE SIGNED DOCUMENT ---\")\n    print()\n    print(\n        \"Saving the signature to GRADESCOPE.md and adding the signed document to submission zips...\"\n    )\n    Path(\"GRADESCOPE.md\").write_text(buffer)\n    add_to_submission()\n    print(\"Run this script again if you create new submission zips.\")\n\n\nif __name__ == \"__main__\":\n    try:\n        main()\n    except KeyboardInterrupt:\n        print(\"\\nthe sign process was aborted\")\n"
        },
        {
          "name": "logo",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}