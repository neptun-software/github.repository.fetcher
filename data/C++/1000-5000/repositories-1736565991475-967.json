{
  "metadata": {
    "timestamp": 1736565991475,
    "page": 967,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "DanielSWolf/rhubarb-lip-sync",
      "stars": 1891,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2333984375,
          "content": "# Config file for generic text editors.\n\nroot = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_style = tab\nindent_size = 4\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.{yml,yaml}]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1953125,
          "content": "# Use Git LFS for binary files\n*.wav filter=lfs diff=lfs merge=lfs -text\n*.flac filter=lfs diff=lfs merge=lfs -text\n*.ogg filter=lfs diff=lfs merge=lfs -text\n*.mp3 filter=lfs diff=lfs merge=lfs -text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.017578125,
          "content": ".vs/\nbuild/\n*.user"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 11.994140625,
          "content": "# Version history\n\n## Version 1.13.0\n\n* **Improved** animation rules for \"F\" sound when using just the basic mouth shapes.\n\n## Version 1.12.0\n\n* **Added** support for skinning in Rhubarb for Spine ([issue #108](https://github.com/DanielSWolf/rhubarb-lip-sync/issues/108))\n\n## Version 1.11.0\n\n* **Added** support for more WAVE file features ([issue #101](https://github.com/DanielSWolf/rhubarb-lip-sync/issues/101))\n* **Changed** Rhubarb Lip Sync for Spine so that it works with any modern JRE ([issue #97](https://github.com/DanielSWolf/rhubarb-lip-sync/issues/97))\n* **Changed** Windows build from 32 bit to 64 bit ([issue #98](https://github.com/DanielSWolf/rhubarb-lip-sync/issues/98))\n\n## Version 1.10.0\n\n* **Added** switch data file exporter for Moho (formerly Anime Studio) and OpenToonz ([issue #69](https://github.com/DanielSWolf/rhubarb-lip-sync/issues/69))\n* **Added** support for Spine 3.8 beta ([issue #74](https://github.com/DanielSWolf/rhubarb-lip-sync/issues/74))\n* **Improved** animation rule for OW sound: animating it as E-F rather than F.\n\n## Version 1.9.1\n\n* **Fixed** segmentation fault on OS X ([issue #65](https://github.com/DanielSWolf/rhubarb-lip-sync/issues/65)).\n\n## Version 1.9.0\n\n* **Added** basic support for non-English recordings through phonetic recognition ([issue #45](https://github.com/DanielSWolf/rhubarb-lip-sync/issues/45)).\n* **Improved** processing speed for WAVE files ([issue #58](https://github.com/DanielSWolf/rhubarb-lip-sync/issues/58)).\n* **Fixed** a bug that resulted in unwanted mouth movement at beginning of a recording ([issue #53](https://github.com/DanielSWolf/rhubarb-lip-sync/issues/53)).\n* **Fixed** a bug that garbled special characters in the output file path ([issue #54](https://github.com/DanielSWolf/rhubarb-lip-sync/issues/54)).\n* **Fixed** a bug that prevented the progress bar from reaching 100% ([issue #48](https://github.com/DanielSWolf/rhubarb-lip-sync/issues/48)).\n* **Fixed** file paths in exported XML and JSON files ([issue #59](https://github.com/DanielSWolf/rhubarb-lip-sync/issues/59)).\n\n## Version 1.8.0\n\n* **Added** support for Ogg Vorbis (.ogg) file format ([issue #40](https://github.com/DanielSWolf/rhubarb-lip-sync/issues/40)).\n* **Fixed** build error with some versions of Boost ([issue #41](https://github.com/DanielSWolf/rhubarb-lip-sync/issues/41)).\n\n## Version 1.7.2\n\n* **Fixed** bug in Rhubarb for Spine where processing failed depending on the number of existing animations ([issue #34](https://github.com/DanielSWolf/rhubarb-lip-sync/issues/34#issuecomment-378198776)).\n\n## Version 1.7.1\n\n* **Added** more helpful error dialogs for internal errors in Rhubarb Lip Sync for Spine.\n* **Added**: Internal errors in Rhubarb Lip Sync for Spine are logged to the console (`stderr`).\n* **Fixed** generic error message in Rhubarb for Spine ([issue #34](https://github.com/DanielSWolf/rhubarb-lip-sync/issues/34)).\n\n## Version 1.7.0\n\n* **Added** integration with Spine animation software (Rhubarb Lip Sync for Spine).\n* **Added** full Unicode support: File names, dialog files, strings in exported files etc. should now be fully Unicode-compatible.\n* **Added** `--machineReadable` command-line option to allow for better integration with other applications.\n* **Added** `--consoleLevel` command-line option to control how much detail to log to the console (`stderr`).\n* **Changed** message output to the console: Unless specified using `--consoleLevel`, only errors and fatal errors are printed to the console. Previously, warnings were also printed.\n* **Fixed** segfault with WAVE file containing some initial music before spoken words ([issue #25](https://github.com/DanielSWolf/rhubarb-lip-sync/issues/25))\n\n## Version 1.6.0\n\n* **Added** a script for lip-syncing in Adobe After Effects.\n* **Added** `--output` command-line option.\n* **Changed** the official spelling of the project: Rhubarb Lip-Sync is now Rhubarb Lip Sync (without the hyphen).\n\n## Version 1.5.0\n\n* **Added** animation code optimizing animation for words containing \"to\".\n* **Improved** animation rules: better animation of ER and AW sounds.\n* **Fixed** compilation with Boost 1.56.0+ ([issue #9](https://github.com/DanielSWolf/rhubarb-lip-sync/issues/9)).\n\n## Version 1.4.2\n\n* **Fixed** incorrect animation before some pauses ([issue #7](https://github.com/DanielSWolf/rhubarb-lip-sync/issues/7)).\n\n## Version 1.4.1\n\n* **Fixed** crash with message \"Time range start must not be less than end.\" ([issue #6](https://github.com/DanielSWolf/rhubarb-lip-sync/issues/6))\n\n## Version 1.4.0\n\n* **Added** animation code preventing long static segments.\n\n  Watch yourself in a mirror saying \"He seized his keys.\" Your lips barely moved, right? That's exactly what would happen in previous versions of Rhubarb Lip Sync. Only worse: Because there is only one \"clenched teeth\" mouth shape, the mouth would stay completely static during phrases like this. Rhubarb Lip Sync 1.4.0 now does what [a professional animator would do](http://animateducated.blogspot.de/2016/10/lip-sync-animation-2.html?showComment=1478861729702#c2940729096183546458): It opens the mouth a bit wider for some syllables, keeping the lips moving. This may be cheating, but it looks much better!\n\n* **Improved** animation rules to use wide-open mouth shape more often.\n\n  Previous versions used mouth shape D (the wide-open mouth) very sparingly. This release uses it more often, which makes the resulting animation more lively and interesting.\n\n## Version 1.3.0\n\n* **Improved** animation algorithm: Implemented new, bidirectional animation algorithm.\n\n  Since version 1.0.0, Rhubarb Lip Sync has used a predictive animation algorithm. That means that in many situations (usually before a vowel), the mouth *anticipates* the upcoming sound. It moves *ahead of time*, resulting in more natural animation.\n\n  For version 1.3.0, this core animation algorithm has been re-written from scratch. The new algorithm still anticipates the *next* vowel, but now also considers the *previous* vowel. The resulting animation is even closer to human speech.\n\n* **Added** artistic timing.\n\n  Previous versions of Rhubarb Lip Sync have tried to reproduce the timing of the recording as precisely as possible. For rapid speech, this often resulted in jittery animation that didn't look good: It tried to fit too much information into the available time. Traditional animators have known this problem since the 1930s. Instead of slavishly following the timing of the recording, they focus on important sounds and mouth shapes, showing them earlier (and thus longer) than would be realistic. On the other hand, they often skip unimportant sounds and mouth shapes altogether.\n\n  Rhubarb Lip Sync 1.3.0 adds a new step in the animation pipeline that emulates this artistic approach. The resulting animation looks much cleaner and smoother. Ironically, it also looks more in-sync than the precise animation created by earlier versions.\n\n* **Added** `--extendedShapes` command-line option.\n\n  Previous versions of Rhubarb Lip Sync used a fixed set of eight or nine mouth shapes for animation. If users wanted to use fewer mouth shapes, they had to modify the output, for instance by replacing every \"X\" shape with an \"A\". This version of Rhubarb Lip Sync introduces the `--extendedShapes` command-line option that allows the user to specify which mouth shapes should be used. This is not only more convenient; knowing which mouth shapes are actually available also allows Rhubarb Lip Sync to create better animation.\n\n* **Added** `--quiet` mode.\n\n  A \"quiet\" mode has been added. In that mode, Rhubarb Lip Sync doesn't create any output except for animation data and error messages. This is helpful when using Rhubarb Lip Sync as part of an automated process.\n\n* **Improved** animation rules and tweening for better animation.\n\n  Animation rules define which mouth shapes can be used to represent a specific sound. For this release, there have been many tweaks to the animation rules, making some sounds look much more convincing. In addition, the rules for inbetweens (\"tweening\") have been improved. As in traditional animation, the mouth now \"pops\" open without inbetweens, then closes smoothly.\n\n* **Improved** pause animations.\n\n  Pauses in speech are tricky to animate. Early version of Rhubarb Lip Sync always closed the mouth, which looks strange for very short pauses. Later versions kept the mouth open for short pauses, which can also look weird if the first mouth shape *after* the pause is identical to the mouth shape *during* the pause: It looks as if somebody just forgot to animate that part.\n\n  This version of Rhubarb Lip Sync uses three different strategies for animating pauses, depending on the duration of the pause and the mouth shapes before and after it.\n\n* **Fixed** bugs in the grapheme-to-phoneme algorithm.\n\n  Rhubarb Lip Sync comes with a huge dictionary containing pronunciations for more than 100,000 English words. If the dialog text contains words not found in this dictionary, Rhubarb Lip Sync will try to guess the correct pronunciation. I've fixed several bugs in the G2P algorithm that does this. As a result, using the `--dialogFile` option now results in even better animation.\n\n## Version 1.2.0\n\n* **Improved** dialog handling to allow for incorrect input dialog.\n\n  Since version 1.0.0, Rhubarb Lip Sync can handle situations where the dialog text is specified (using the `-dialogFile` option), but the actual recording omits some words. For instance, the specified dialog text can be \"That's all gobbledygook to me,\" but the recording only says \"That's gobbledygook to me,\" dropping the word \"all.\"\n\n  Until now, however, Rhubarb Lip Sync couldn't handle *changed* or *inserted* words, such as a recording saying \"That's *just* gobbledygook to me.\" This restriction has been removed. As of version 1.2.0, the actual recording may freely deviate from the specified dialog text. Rhubarb Lip Sync will ignore the dialog file where it audibly differs from the recording, and benefit from it where it matches.\n\n## Version 1.1.0\n\n* **Improved** speech recognition to be more reliable.\n\n  The first step in automatic lip sync is speech recognition.\n  Rhubarb Lip Sync 1.1.0 recognizes spoken dialog more accurately, especially at the beginning of recordings.\n  This improves the overall quality of the resulting animation.\n\n* **Improved** breath detection to be more accurate.\n\n  Rhubarb Lip Sync animates not only dialog, but also noises such as taking a breath.\n  For this version, the accuracy of breath detection has been improved.\n  You shouldn't see actors opening their mouth for no reason any more.\n\n* **Improved** animation of short pauses.\n\n  During short pauses between words or sentences (up to 0.35s), the mouth is kept open.\n  Now, this open mouth shape is chosen based on the previous and following mouth shapes.\n  This gives pauses in speech a more natural, less mechanical look.\n\n* **Added** capability to build on Linux\n\n  In addition to Windows and OS X, Rhubarb Lip Sync can now be built on Linux systems.\n  I'm not offering binary distributions for Linux at this time.\n  To build the application yourself, you need CMake, Boost, and a C++14-compatible compiler.\n\n## Version 1.0.0\n\n* **Improved** animation algorithm: More realistic animation using new, predictive algorithm.\n* **Added** tweening for smoother animation.\n* **Added** support for non-dialog noises (breathing, smacking, etc.)\n* **Improved** processing speed substantially through multithreading.\n* **Improved** reliability of voice recognition.\n* **Added** support for long recordings (I've tested a 30-minute file).\n* **Added** capability to handle recording that deviate from the specified dialog text.\n* **Added** capability to handle unknown words as well as numbers, abbreviations, etc. in the specified dialog text.\n\n## Version 0.2.0\n\n* **Added** multiple output formats: TSV, XML, JSON.\n* **Added** experimental option to supply dialog text.\n* **Improved** error handling and error messages.\n\n## Version 0.1.0\n\n* **Added** two-pass phone detection using [CMU PocketSphinx](http://cmusphinx.sourceforge.net/).\n* **Added** fixed set of eight mouth shapes, based on the Hanna-Barbera shapes.\n* **Added** naive (but well-tuned) mapping from phones to mouth shapes.\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 1.095703125,
          "content": "cmake_minimum_required(VERSION 3.2)\n\ninclude(appInfo.cmake)\n\nproject(${appName})\n\n# Build and install main executable\nadd_subdirectory(rhubarb)\n\n# Build and install extras\nadd_subdirectory(\"extras/AdobeAfterEffects\")\nadd_subdirectory(\"extras/MagixVegas\")\nadd_subdirectory(\"extras/EsotericSoftwareSpine\")\n\n# Install misc. files\ninstall(\n\tFILES README.adoc LICENSE.md CHANGELOG.md\n\tDESTINATION .\n)\n\n# Configure CPack\nfunction(get_short_system_name variable)\n\tif (\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Darwin\")\n\t\tset(${variable} \"macOS\" PARENT_SCOPE)\n\telse()\n\t\tset(${variable} \"${CMAKE_SYSTEM_NAME}\" PARENT_SCOPE)\n\tendif()\nendfunction()\n\nset(CPACK_PACKAGE_NAME ${appName})\nstring(REPLACE \" \" \"-\" CPACK_PACKAGE_NAME \"${CPACK_PACKAGE_NAME}\")\nget_short_system_name(CPACK_SYSTEM_NAME)\nset(CPACK_PACKAGE_VERSION_MAJOR ${appVersionMajor})\nset(CPACK_PACKAGE_VERSION_MINOR ${appVersionMinor})\nset(CPACK_PACKAGE_VERSION_PATCH ${appVersionPatch})\nset(CPACK_PACKAGE_VERSION ${appVersion})\nset(CPACK_PACKAGE_FILE_NAME \"${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CPACK_SYSTEM_NAME}\")\nset(CPACK_GENERATOR ZIP)\n\n# Run CPack\ninclude(CPack)\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 28.74609375,
          "content": "# License\n\n## Summary\n\nThis summary is not legally binding. The actual license terms are defined by the license texts below.\n\n* Rhubarb Lip Sync is released under the MIT license. All its third-party dependencies (libraries, resources, etc.) are released under the MIT license, a BSD license, or a similar permissive license. This means that you can use Rhubarb Lip Sync in almost any way you want, including the creation of commercial software based on it.\n* When you run Rhubarb Lip Sync on an audio file, the resulting lip sync data belongs to you alone. This means that if you use Rhubarb Lip Sync in the production process of a video game, an animated cartoon, or a similar product *that doesn't ship with lip sync functionality*, you don't even have to care about the MIT license.\n\n## Rhubarb Lip Sync\n\n[Rhubarb Lip Sync](https://github.com/DanielSWolf/rhubarb-lip-sync) is released under the **MIT License (MIT)**.\n\n> Copyright (c) 2015-2016 Daniel Wolf\n>\n> Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n>\n> The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n>\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n## Third-party dependencies\n\n### `[boost]` Boost\n\nThe [Boost](http://www.boost.org/) libraries are released under the **Boost Software License**.\n\n> Boost Software License - Version 1.0 - August 17th, 2003\n>\n> Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and accompanying documentation covered by this license (the \"Software\") to use, reproduce, display, distribute, execute, and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the Software is furnished to do so, all subject to the following:\n>\n> The copyright notices in the Software and this entire statement, including the above license grant, this restriction and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all derivative works of the Software, unless such copies or derivative works are solely in the form of machine-executable object code generated by a source language processor.\n>\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n### `[cmusphinx-en-us]` CMU Sphinx US English acoustic model\n\nThe [CMU Sphinx US English acoustic model](https://sourceforge.net/projects/cmusphinx/files/Acoustic%20and%20Language%20Models/US%20English/)  is released under a variation of the **2-clause BSD License**.\n\n> Copyright (c) 2015 Alpha Cephei Inc. All rights reserved.\n>\n> Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n>\n> 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n> 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n>\n> THIS SOFTWARE IS PROVIDED BY ALPHA CEPHEI INC. ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL ALPHA CEPHEI INC. NOR ITS EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n### `[cppformat]` C++ Format\n\nThe [C++ Format](https://github.com/cppformat/cppformat) library is released under the **2-clause BSD License**.\n\n> Copyright (c) 2012 - 2015, Victor Zverovich\n>\n> All rights reserved.\n>\n> Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n>\n> 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n> 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n>\n> THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n### `[flite]` Flite\n\nThe [CMU Flite](http://www.festvox.org/flite/) engine is released under a **BSD**-like license. For details see the license file in the Flite directory.\n\n> Language Technologies Institute\n> Carnegie Mellon University\n> Copyright (c) 1999-2008\n> All Rights Reserved.\n>\n> Permission is hereby granted, free of charge, to use and distribute this software and its documentation without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of this work, and to permit persons to whom this work is furnished to do so, subject to the following conditions:\n>\n>   1. The code must retain the above copyright notice, this list of conditions and the following disclaimer.\n>   2. Any modifications must be clearly marked as such.\n>   3. Original authors' names are not deleted.\n>   4. The authors' names are not used to endorse or promote products derived from this software without specific prior written permission.\n>\n> CARNEGIE MELLON UNIVERSITY AND THE CONTRIBUTORS TO THIS WORK DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY NOR THE CONTRIBUTORS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n### `[googletest]` Google Test\n\nThe [Google Test](https://github.com/google/googletest) framework is released under the **3-clause BSD License**.\n\n> Copyright 2008, Google Inc.\n> All rights reserved.\n>\n> Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n>\n> * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n> * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n> * Neither the name of Google Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n>\n> THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n### `[gsl]` Guidelines Support Library\n\nThe [Guidelines Support Library](https://github.com/Microsoft/GSL) is released under the **MIT License (MIT)**.\n\n> Copyright (c) 2015 Microsoft Corporation. All rights reserved.\n>\n> This code is licensed under the MIT License (MIT).\n>\n> Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n>\n> The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n>\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n### `[ogg]` libogg\n\nlibogg is released under the **3-clause BSD license**.\n\n> Copyright (c) 2002, Xiph.org Foundation\n>\n> Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n>\n> - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n>\n> - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n>\n> - Neither the name of the Xiph.org Foundation nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n>\n> THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n### `[pocketsphinx]` PocketSphinx\n\nThe [PocketSphinx](https://github.com/cmusphinx/pocketsphinx) library is released under a variation of the **2-clause BSD License**.\n\n> Copyright (c) 1999-2015 Carnegie Mellon University.  All rights reserved.\n>\n> Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n>\n> 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n> 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n>\n> This work was supported in part by funding from the Defense Advanced Research Projects Agency and the National Science Foundation of the United States of America, and the CMU Sphinx Speech Consortium.\n>\n> THIS SOFTWARE IS PROVIDED BY CARNEGIE MELLON UNIVERSITY ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY NOR ITS EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n### `[soundchange]` Sound Change Applier\n\nThe [Sound Change Applier](http://www.zompist.com/sounds.htm) and its [rule set for American English](http://www.zompist.com/spell.html) are released under the **MIT License (MIT)**.\n\n> **The MIT License (MIT)**\n>\n> Copyright (c) 2000 Mark Rosenfelder\n>\n> Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n>\n> The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n>\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n### `[sphinxbase]` CMU Sphinx common libraries\n\nThe [sphinxbase](https://github.com/cmusphinx/sphinxbase) library is released under a variation of the **2-clause BSD License**.\n\n> Copyright (c) 1999-2015 Carnegie Mellon University.  All rights reserved.\n>\n> Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n>\n> 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n> 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n>\n> This work was supported in part by funding from the Defense Advanced Research Projects Agency and the National Science Foundation of the United States of America, and the CMU Sphinx Speech Consortium.\n>\n> THIS SOFTWARE IS PROVIDED BY CARNEGIE MELLON UNIVERSITY ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY NOR ITS EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n### `[tclap]` Templatized C++ Command Line Parser Library\n\nThe [TCLAP](http://tclap.sourceforge.net/) library is released under the **MIT License (MIT)**.\n\n> Copyright (c) 2003 Michael E. Smoot\n>\n> Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n>\n> The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n>\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n### `[utfcpp]` UTF8-CPP\n\nThe [UTF8-CPP](https://github.com/nemtrif/utfcpp) library is released under the **Boost Software License**.\n\n> Copyright 2006 Nemanja Trifunovic\n>\n>Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and accompanying documentation covered by this license (the \"Software\") to use, reproduce, display, distribute, execute, and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the Software is furnished to do so, all subject to the following:\n>\n> The copyright notices in the Software and this entire statement, including the above license grant, this restriction and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all derivative works of the Software, unless such copies or derivative works are solely in the form of machine-executable object code generated by a source language processor.\n>\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n### `[utf8proc]` utf8proc\n\nThe [utf8proc](https://github.com/JuliaLang/utf8proc) library is released under the **MIT License (MIT)**, while some of its data is released under the **UNICODE License**.\n\n#### utf8proc license\n\n> **utf8proc** is a software package originally developed by Jan Behrens and the rest of the Public Software Group, who deserve nearly all of the credit for this library, that is now maintained by the Julia-language developers. Like the original utf8proc, whose copyright and license statements are reproduced below, all new work on the utf8proc library is licensed under the [MIT \"expat\" license](http://opensource.org/licenses/MIT):\n>\n> *Copyright &copy; 2014-2015 by Steven G. Johnson, Jiahao Chen, Tony Kelman, Jonas Fonseca, and other contributors listed in the git history.*\n>\n> Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n>\n> The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n>\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#### Original utf8proc license\n\n> *Copyright (c) 2009, 2013 Public Software Group e. V., Berlin, Germany*\n>\n> Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n>\n> The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n>\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#### Unicode data license\n\n> This software distribution contains derived data from a modified version of the Unicode data files. The following license applies to that data:\n>\n> **COPYRIGHT AND PERMISSION NOTICE**\n>\n> *Copyright (c) 1991-2007 Unicode, Inc. All rights reserved. Distributed under the Terms of Use in http://www.unicode.org/copyright.html.*\n>\n> Permission is hereby granted, free of charge, to any person obtaining a copy of the Unicode data files and any associated documentation (the \"Data Files\") or Unicode software and any associated documentation (the \"Software\") to deal in the Data Files or Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, and/or sell copies of the Data Files or Software, and to permit persons to whom the Data Files or Software are furnished to do so, provided that (a) the above copyright notice(s) and this permission notice appear with all copies of the Data Files or Software, (b) both the above copyright notice(s) and this permission notice appear in associated documentation, and (c) there is clear notice in each modified Data File or in the Software as well as in the documentation associated with the Data File(s) or Software that the data or software has been modified.\n>\n> THE DATA FILES AND SOFTWARE ARE PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THE DATA FILES OR SOFTWARE.\n>\n> Except as contained in this notice, the name of a copyright holder shall not be used in advertising or otherwise to promote the sale, use or other dealings in these Data Files or Software without prior written authorization of the copyright holder.\n>\n> Unicode and the Unicode logo are trademarks of Unicode, Inc., and may be registered in some jurisdictions. All other trademarks and registered trademarks mentioned herein are the property of their respective owners.\n\n### `[vorbis]` libvorbis\n\nlibvorbis is released under the **3-clause BSD license**.\n\n> Copyright (c) 2002-2018 Xiph.org Foundation\n>\n> Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n>\n> - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n>\n> - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n>\n> - Neither the name of the Xiph.org Foundation nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n>\n> THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n### `[webrtc]` WebRTC\n\nThe [WebRTC](https://chromium.googlesource.com/external/webrtc) library is released under the **3-clause BSD License**.\n\n> Copyright (c) 2011, The WebRTC project authors. All rights reserved.\n>\n> Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n>\n> * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n> * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n> * Neither the name of Google nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n>\n> THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n### `[whereami]` Where Am I?\n\nThe [Where Am I?](https://github.com/gpakosz/whereami) library is released under the **DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE**.\n\n> DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n> Version 2, December 2004\n>\n> Copyright (C) 2004 Sam Hocevar <sam@hocevar.net>\n>\n> Everyone is permitted to copy and distribute verbatim or modified copies of this license document, and changing it is allowed as long as the name is changed.\n>\n> DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n>\n> 0. You just DO WHAT THE FUCK YOU WANT TO.\n> 1. Bla bla bla\n> 2. Montesqieu et camembert, vive la France, zut alors!\n>\n> WTFPLv2 is very permissive, see http://www.wtfpl.net/faq/\n>\n> However, if this WTFPLV2 is REALLY a blocker and is the reason you can't use this project, contact me and I'll dual license it.\n\n"
        },
        {
          "name": "README.adoc",
          "type": "blob",
          "size": 22.5869140625,
          "content": "= Rhubarb Lip Sync\n:toc:\n:icons: font\n\n:A: &#9398;\n:B: &#9399;\n:C: &#9400;\n:D: &#9401;\n:E: &#9402;\n:F: &#9403;\n:G: &#9404;\n:H: &#9405;\n:X: &#9421;\n\nimage:https://img.shields.io/twitter/follow/RhubarbLipSync.svg?style=social&label=Follow[\"Twitter\", link=\"https://twitter.com/RhubarbLipSync\"]\nimage:https://github.com/DanielSWolf/rhubarb-lip-sync/actions/workflows/ci.yml/badge.svg[\"Build status\", link=\"https://github.com/DanielSWolf/rhubarb-lip-sync/actions/workflows/ci.yml\"]\n\n---\n\nimage:img/logo.png[align=\"center\"]\n\n---\n\nRhubarb Lip Sync allows you to quickly create 2D mouth animation from voice recordings. It analyzes your audio files, recognizes what is being said, then automatically generates lip sync information. You can use it for animating speech in computer games, animated cartoons, or any similar project.\n\nRhubarb Lip Sync integrates with the following applications:\n\n* *Adobe After Effects* (see <<afterEffects,below>>)\n* *Moho* and *OpenToonz* (see <<moho,below>>)\n* *Spine* by Esoteric Software (see <<spine,below>>)\n* *Vegas Pro* by Magix (see <<vegas,below>>)\n* *Visionaire Studio* (see https://www.visionaire-studio.net/forum/thread/mouth-animation-using-rhubarb-lip-sync[external link])\n\nIn addition, you can use Rhubarb Lip Sync's command line interface (*CLI*) to generate files in various <<outputFormats,output formats>> (<<tsv,TSV>>/<<xml,XML>>/<<json,JSON>>).\n\n== Demo video\n\nClick the image for a demo video.\n\nhttps://www.youtube.com/watch?v=zzdPSFJRlEo[image:http://img.youtube.com/vi/zzdPSFJRlEo/0.jpg[]]\n\n== Integrations\n\n[[afterEffects]]\n=== Adobe After Effects\n\nYou can use Rhubarb Lip Sync to animate dialog right from Adobe After Effects. For more information, <<extras/AdobeAfterEffects/README.adoc#,follow this link>> or see the directory `extras/AdobeAfterEffects`.\n\nimage:img/after-effects.png[]\n\n[[moho]]\n=== Moho and OpenToonz\n\nRhubarb Lip Sync can create .dat switch data files, which are understood by Moho and OpenToonz. You can set the frame rate using the `--datFrameRate` option; to control the shape names, use the `--datUsePrestonBlair` flag. For more details, see <<options>>.\n\nimage:img/moho.png[]\n\n[[spine]]\n=== Spine by Esoteric Software\n\nRhubarb Lip Sync for Spine is a graphical tool that allows you to import a Spine project, perform automatic lip sync, then re-import the result into Spine. For more information, <<extras/EsotericSoftwareSpine/README.adoc#,follow this link>> or see the directory `extras/EsotericSoftwareSpine` of the download.\n\nimage:img/spine.png[]\n\n[[vegas]]\n=== Vegas Pro by Magix\n\nRhubarb Lip Sync also comes with two plugin scripts for Vegas Pro (previously Sony Vegas).  For more information, <<extras/MagixVegas/README.adoc#,follow this link>> or see the directory `extras/MagixVegas` of the download.\n\nimage:img/vegas.png[]\n\n[[mouth-shapes]]\n== Mouth shapes\n\nRhubarb Lip Sync can use between six and nine different mouth positions. The first six mouth shapes ({A}-{F}) are the _basic mouth shapes_ and the absolute minimum you have to draw for your character. These six mouth shapes were invented at the Hanna-Barbera studios for shows such as Scooby-Doo and The Flintstones. Since then, they have evolved into a _de-facto_ standard for 2D animation, and have been widely used by studios like Disney and Warner Bros.\n\nIn addition to the six basic mouth shapes, there are three _extended mouth shapes_: {G}, {H}, and {X}. These are optional. You may choose to draw all three of them, pick just one or two, or leave them out entirely.\n\n[cols=\"1h,2,6\"]\n|===\n\n| {A} | image:img/lisa-A.png[]\n| Closed mouth for the \"`P`\", \"`B`\", and \"`M`\" sounds. This is almost identical to the {X} shape, but there is ever-so-slight pressure between the lips.\n\n| {B} | image:img/lisa-B.png[]\n| Slightly open mouth with clenched teeth. This mouth shape is used for most consonants (\"`K`\", \"`S`\", \"`T`\", etc.). It's also used for some vowels such as the \"`EE`\" sound in b**ee**.\n\n| {C} | image:img/lisa-C.png[]\n| Open mouth. This mouth shape is used for vowels like \"`EH`\" as in m**e**n and \"`AE`\" as in b**a**t. It's also used for some consonants, depending on context.\n\nThis shape is also used as an in-between when animating from {A} or {B} to {D}. So make sure the animations {A}{C}{D} and {B}{C}{D} look smooth!\n\n| {D} | image:img/lisa-D.png[]\n| Wide open mouth. This mouth shapes is used for vowels like \"`AA`\" as in f**a**ther.\n\n| {E} | image:img/lisa-E.png[]\n| Slightly rounded mouth. This mouth shape is used for vowels like \"`AO`\" as in **o**ff and \"`ER`\" as in b**ir**d.\n\nThis shape is also used as an in-between when animating from {C} or {D} to {F}. Make sure the mouth isn't wider open than for {C}. Both {C}{E}{F} and {D}{E}{F} should result in smooth animation.\n\n| {F} | image:img/lisa-F.png[]\n| Puckered lips. This mouth shape is used for \"`UW`\" as in y**ou**, \"`OW`\" as in sh**ow**, and \"`W`\" as in **w**ay.\n\n| {G} | image:img/lisa-G.png[]\n| Upper teeth touching the lower lip for \"`F`\" as in **f**or and \"`V`\" as in **v**ery.\n\n*This extended mouth shape is optional.* If your art style is detailed enough, it greatly improves the overall look of the animation. If you decide not to use it, you can specify so using the <<extendedShapes,`extendedShapes`>> option.\n\n| {H} | image:img/lisa-H.png[]\n| This shape is used for long \"`L`\" sounds, with the tongue raised behind the upper teeth. The mouth should be at least far open as in {C}, but not quite as far as in {D}.\n\n*This extended mouth shape is optional.* Depending on your art style and the angle of the head, the tongue may not be visible at all. In this case, there is no point in drawing this extra shape. If you decide not to use it, you can specify so using the <<extendedShapes,`extendedShapes`>> option.\n\n| {X} | image:img/lisa-X.png[]\n| Idle position. This mouth shape is used for pauses in speech. This should be the same mouth drawing you use when your character is walking around without talking. It is almost identical to {A}, but with slightly less pressure between the lips: For {X}, the lips should be closed but relaxed.\n\n*This extended mouth shape is optional.* Whether there should be any visible difference between the rest position {X} and the closed talking mouth {A} depends on your art style and personal taste. If you decide not to use it, you can specify so using the <<extendedShapes,`extendedShapes`>> option.\n|===\n\n== How to run Rhubarb Lip Sync\n\n=== General usage ===\n\nRhubarb Lip Sync is a command-line tool that is currently available for Windows, macOS, and Linux.\n\n* Download the https://github.com/DanielSWolf/rhubarb-lip-sync/releases[latest release] for your operating system and unpack the file anywhere on your computer.\n* On the command-line, call `rhubarb`, passing it an audio file as argument and telling it where to create the output file. In its simplest form, this might look like this: `rhubarb -o output.txt my-recording.wav`. There are additional <<options,command-line options>> you can specify in order to get better results.\n* Rhubarb Lip Sync will analyze the sound file, animate it, and create an output file containing the animation. If an error occurs, it will instead print an error message to `stderr` and exit with a non-zero exit code.\n\n[[options]]\n=== Command-line options ===\n\n==== Basic command-line options ====\n\nThe following command-line options are the most common:\n\n[cols=\"2,5a\"]\n|===\n| Option | Description\n\n| _<input file>_\n| The audio file to be analyzed. This must be the last command-line argument. Supported file formats are WAVE (.wav) and Ogg Vorbis (.ogg).\n\n| `-r` _<recognizer>_, `--recognizer` _<recognizer>_\n| Specifies how Rhubarb Lip Sync recognizes speech within the recording. Options: `pocketSphinx` (use for English recordings), `phonetic` (use for non-English recordings). For details, see <<recognizers>>.\n\n_Default value: ``pocketSphinx``_\n\n| `-f` _<format>_, `--exportFormat` _<format>_\n| The export format. Options: `tsv` (tab-separated values, see <<tsv,details>>), `xml` (see <<xml,details>>), `json` (see <<json,details>>), `dat` (see <<moho>>).\n\n_Default value: ``tsv``_\n\n| `-d` _<path>_, `--dialogFile` _<path>_\n| With this option, you can provide Rhubarb Lip Sync with the dialog text to get more reliable results. Specify the path to a plain-text file (in ASCII or UTF-8 format) containing the dialog contained in the audio file. Rhubarb Lip Sync will still perform word recognition internally, but it will prefer words and phrases that occur in the dialog file. This leads to better recognition results and thus more reliable animation.\n\nFor instance, let's say you're recording dialog for a computer game. The script says: \"`That's all gobbledygook to me.`\" But actually, the voice artist ends up saying \"`That's _just_ gobbledygook to me,`\" deviating from the dialog. If you specify a dialog file with the original line (\"`That's all gobbledygook to me`\"), this will still allow Rhubarb Lip Sync to produce better results, because it will watch out for the uncommon word \"`gobbledygook`\". Rhubarb Lip Sync will ignore the dialog file where it audibly differs from the recording, and benefit from it where it matches.\n\n_It is always a good idea to specify the dialog text. This will usually lead to more reliable mouth animation, even if the text is not completely accurate._\n\n[[extendedShapes]]\n| `--extendedShapes` _<string>_\n| As described in <<mouth-shapes>>, Rhubarb Lip Sync uses six basic mouth shapes and up to three _extended mouth shapes_, which are optional. Use this option to specify which extended mouth shapes should be used. For example, to use only the {G} and {X} extended mouth shapes, specify `GX`; to use only the six basic mouth shapes, specify an empty string: `\"\"`.\n\n_Default value: ``GHX``_\n\n| `-o`, `--output` _<output file>_\n| The name of the output file to create. If the file already exists, it will be overwritten. If you don't specify an output file, the result will be written to `stdout`.\n\n| `--version`\n| Displays version information and exits.\n\n| `-h`, `--help`\n| Displays usage information and exits.\n\n| `--datFrameRate` _number_\n| Only valid when using the `dat` export format. Controls the frame rate for the output file.\n\n_Default value: 24_\n\n| `--datUsePrestonBlair`\n| Only valid when using the `dat` export format. Uses Preston Blair mouth shapes names instead of the default alphabetical ones. This applies the following mapping:\n\n!===\n! Alphabetic name ! Preston Blair name\n\n! A ! MBP\n! B ! etc\n! C ! E\n! D ! AI\n! E ! O\n! F ! U\n! G ! FV\n! H ! L\n! X ! rest\n!===\n\n*Caution:* This mapping is only applied when exporting, _after_ the recording has been animated. To control which mouth shapes to use, use the <<extendedShapes,`extendedShapes`>> option _with the alphabetic names_.\n\n*Tip:* For optimal results, make sure your mouth drawings follow the guidelines in the <<mouth-shapes>> section. This is easier if you stick to the alphabetic names instead of the Preston Blair names. The only situation where you _need_ to use the Preston Blair names is when you're using OpenToonz, because OpenToonz only supports the Preston Blair names.\n\n|===\n\n==== Advanced command-line options ====\n\nThe following command-line options can be helpful in special situations, especially when automating Rhubarb Lip Sync.\n\n[cols=\"2,5\"]\n|===\n| Option | Description\n\n[[quiet]]\n| `-q`, `--quiet`\n| By default, Rhubarb Lip Sync writes a number of progress messages to `stderr`. If you're using it as part of a batch process, this may clutter your console. If you specify the `--quiet` flag, there won't be any output to `stderr` unless an error occurred.\n\nYou can combine this option with the <<consoleLevel,`consoleLevel`>> option to change the minimum event level that is printed to `stderr`.\n\n| `--machineReadable`\na| This option is useful if you want to integrate Rhubarb Lip Sync with another (possibly graphical) application. All status messages to `stderr` will be in structured JSON format, allowing your program to parse them and display a graphical progress bar or something similar. For details, see <<machineReadable,Machine-readable status messages>>.\n\n[[consoleLevel]]\n| `--consoleLevel` _<level>_\n| Sets the log level for reporting to the console (`stderr`). Options: `trace`, `debug`, `info`, `warning`, `error`, `fatal`.\n\nIf <<quiet,`--quiet`>> is also specified, only events with the specified level or higher will be printed. Otherwise, a small number of essential events (startup, progress, etc.) will be printed even if their levels are below the specified value.\n\n_Default value: ``error``_\n\n| `--logFile` _<path>_\n| Creates a log file with diagnostic information at the specified path.\n\n|`--logLevel` _<level>_\n| Sets the log level for the log file. Only events with the specified level or higher will be logged. Options: `trace`, `debug`, `info`, `warning`, `error`, `fatal`.\n\n_Default value: ``debug``_\n\n| `--threads` _<number>_\n| Rhubarb Lip Sync uses multithreading to speed up processing. By default, it creates as many worker threads as there are cores on your CPU, which results in optimal processing speed. You may choose to specify a lower number if you feel that Rhubarb Lip Sync is slowing down other applications. Specifying a higher number is not recommended, as it won't result in any additional speed-up.\n\nNote that for short audio files, Rhubarb Lip Sync may choose to use fewer threads than specified.\n\n_Default value: as many threads as your CPU has cores_\n|===\n\n[[recognizers]]\n== Recognizers\n\nThe first step in processing an audio file is determining what is being said. More specifically, Rhubarb Lip Sync uses speech recognition to figure out what sound is being said at what point in time. You can choose between two recognizers:\n\n=== PocketSphinx\n\nPocketSphinx is an open-source speech recognition library that generally gives good results. This is the default recognizer. The downside is that PocketSphinx only recognizes English dialog. So if your recordings are in a language other than English, this is not a good choice.\n\n=== Phonetic\n\nRhubarb Lip Sync also comes with a phonetic recognizer. _Phonetic_ means that this recognizer won't try to understand entire (English) words and phrases. Instead, it will recognize individual sounds and syllables. The results are usually less precise than those from the PocketSphinx recognizer. The advantage is that this recognizer is language-independent. Use it if your recordings are not in English.\n\n[[outputFormats]]\n== Output formats\n\nThe output of Rhubarb Lip Sync is a file that tells you which mouth shape to display at what time within the recording. You can choose between three file formats -- TSV, XML, and JSON. The following paragraphs show you what each of these formats looks like.\n\n[[tsv]]\n=== Tab-separated values (`tsv`)\n\nTSV is the simplest and most compact export format supported by Rhubarb Lip Sync. Each line starts with a timestamp (in seconds), followed by a tab, followed by the name of the mouth shape. The following is the output for a recording of a person saying 'Hi.'\n\n[source]\n----\n0.00\tX\n0.05\tD\n0.27\tC\n0.31\tB\n0.43\tX\n0.47\tX\n----\n\nHere's how to read it:\n\n* At the beginning of the recording (0.00s), the mouth is closed (shape {X}). The very first output will always have the timestamp 0.00s.\n* 0.05s into the recording, the mouth opens wide (shape {D}) for the \"`HH`\" sound, anticipating the \"`AY`\" sound that will follow.\n* The second half of the \"`AY`\" diphtong (0.31s into the recording) requires clenched teeth (shape {B}). Before that, shape {C} is inserted as an in-between at 0.27s. This allows for a smoother animation from {D} to {B}.\n* 0.43s into the recording, the dialog is finished and the mouth closes again (shape {X}).\n* The last output line in TSV format is special: Its timestamp is always the very end of the recording (truncated to a multiple of 0.01s) and its value is always a closed mouth (shape {X} or {A}, depending on your <<extendedShapes,`extendedShapes`>> settings).\n\n[[xml]]\n=== XML format (`xml`)\n\nXML format is rather verbose. The following is the output for a person saying 'Hi,' the same recording as above.\n\n[source,xml]\n----\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<rhubarbResult>\n  <metadata>\n    <soundFile>C:\\Users\\Daniel\\Desktop\\av\\hi\\hi.wav</soundFile>\n    <duration>0.47</duration>\n  </metadata>\n  <mouthCues>\n    <mouthCue start=\"0.00\" end=\"0.05\">X</mouthCue>\n    <mouthCue start=\"0.05\" end=\"0.27\">D</mouthCue>\n    <mouthCue start=\"0.27\" end=\"0.31\">C</mouthCue>\n    <mouthCue start=\"0.31\" end=\"0.43\">B</mouthCue>\n    <mouthCue start=\"0.43\" end=\"0.47\">X</mouthCue>\n  </mouthCues>\n</rhubarbResult>\n----\n\nThe file starts with a `metadata` block containing the full path of the original recording and its duration (truncated to a multiple of 0.01s). After that, each `mouthCue` element indicates the start and end of a certain mouth shape, as explained for <<tsv,TSV format>>. Note that the end of each mouth cue is identical with the start of the following one. This is a bit redundant, but it means that we don't need a special final element like in TSV format.\n\n[[json]]\n=== JSON format (`json`)\n\nJSON format is very similar to <<xml,XML format>>. The choice mainly depends on the programming language you use, which may have built-in support for one format but not the other. The following is the output for a person saying 'Hi,' the same recording as above.\n\n[source,json]\n----\n{\n  \"metadata\": {\n    \"soundFile\": \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\av\\\\hi\\\\hi.wav\",\n    \"duration\": 0.47\n  },\n  \"mouthCues\": [\n    { \"start\": 0.00, \"end\": 0.05, \"value\": \"X\" },\n    { \"start\": 0.05, \"end\": 0.27, \"value\": \"D\" },\n    { \"start\": 0.27, \"end\": 0.31, \"value\": \"C\" },\n    { \"start\": 0.31, \"end\": 0.43, \"value\": \"B\" },\n    { \"start\": 0.43, \"end\": 0.47, \"value\": \"X\" }\n  ]\n}\n----\n\nThere is nothing surprising here; everything said about XML format applies to JSON, too.\n\n[[machineReadable]]\n== Machine-readable status messages\n\nUse the `--machineReadable` command-line option to enable machine-readable status messages. In this mode, each line printed to `stderr` will be an object in JSON format. Every object contains the following:\n\n* Property `type`: The type of the event. Currently, one of `\"start\"` (application start), `\"progress\"` (numeric progress), `\"success\"` (successful termination), `\"failure\"` (unsuccessful termination), and `\"log\"` (a log message without structured information).\n* Event-specific structured data. For instance, a `\"progress\"` event contains the property `value` with a numeric value between 0.0 and 1.0.\n* Property `log`: A log message describing the event, plus severity information. If you aren't interested in the structured data, you can display this as a fallback. For instance, a `\"progress\"` event with the structured information `\"value\": 0.69` may contain the following redundant log message: `\"Progress: 69%\"`.\n\nYou can combine this option with the <<consoleLevel,`consoleLevel`>> option. Note, however, that this only affects unstructured events of type `\"log\"` (not to be confused with the `log` property each event contains).\n\nThe following is an example output to `stderr` from a _successful_ run:\n\n[source,json]\n----\n{ \"type\": \"start\", \"file\": \"hi.wav\", \"log\": { \"level\": \"Info\", \"message\": \"Application startup. Input file: \\\"hi.wav\\\".\" } }\n{ \"type\": \"progress\", \"value\": 0.00, \"log\": { \"level\": \"Trace\", \"message\": \"Progress: 0%\" } }\n{ \"type\": \"progress\", \"value\": 0.01, \"log\": { \"level\": \"Trace\", \"message\": \"Progress: 1%\" } }\n{ \"type\": \"progress\", \"value\": 0.03, \"log\": { \"level\": \"Trace\", \"message\": \"Progress: 3%\" } }\n{ \"type\": \"progress\", \"value\": 0.06, \"log\": { \"level\": \"Trace\", \"message\": \"Progress: 6%\" } }\n{ \"type\": \"progress\", \"value\": 0.69, \"log\": { \"level\": \"Trace\", \"message\": \"Progress: 68%\" } }\n{ \"type\": \"progress\", \"value\": 1.00, \"log\": { \"level\": \"Trace\", \"message\": \"Progress: 100%\" } }\n// Result data, printed to stdout...\n{ \"type\": \"success\", \"log\": { \"level\": \"Info\", \"message\": \"Application terminating normally.\" } }\n----\n\nThe following is an example output to `stderr` from a _failed_ run:\n\n[source,json]\n----\n{ \"type\": \"start\", \"file\": \"no-such-file.wav\", \"log\": { \"level\": \"Info\", \"message\": \"Application startup. Input file: \\\"no-such-file.wav\\\".\" } }\n{ \"type\": \"failure\", \"reason\": \"Error processing file \\\"no-such-file.wav\\\".\\nCould not open sound file \\\"no-such-file.wav\\\".\\nNo such file or directory\", \"log\": { \"level\": \"Fatal\", \"message\": \"Application terminating with error: Error processing file \\\"no-such-file.wav\\\".\\nCould not open sound file \\\"no-such-file.wav\\\".\\nNo such file or directory\" } }\n----\n\nNote that the output format <<Versioning,adheres to SemVer>>. That means that the JSON output created after a minor upgrade will still be compatible. Note, however, that the following kinds of changes may occur at any time, because I consider them non-breaking:\n\n* Additional types of progress events. Just ignore those events whose types you do not know or use their unstructured `log` property.\n* Additional properties in any object. Just ignore properties you aren't interested in.\n* Changes in JSON formatting, such as a re-ordering of properties or changes in whitespaces (except for line breaks -- every event will remain on a singe line)\n* Fewer or more events of type `\"log\"` or changes in the wording of log messages\n\n[[versioning]]\n== Versioning (SemVer)\n\nRhubarb Lip Sync uses Semantic Versioning (SemVer) for its command-line interface. For general information on Semantic Versioning, have a look at the http://semver.org/[official SemVer website].\n\nAs a rule of thumb, everything you can use through the command-line interface adheres to SemVer. Everything else (i.e., the source code, integrations with third-party software, etc.) does not.\n\n[[building-from-source]]\n== Building from source\n\nTo use Rhubarb Lip Sync on Windows, macOS, or Linux, you can just download the binary release for your operating system. If you want to modify the code or use Rhubarb on a less-common operating system, this section describes how to build it yourself.\n\nYou'll need the following software installed:\n\n* CMake 3.10+\n* A C{plus}{plus} compiler that supports C{plus}{plus}17 +\n(Rhubarb Lip Sync is regularly built using Visual Studio 2019, Xcode 14, GCC 10, and Clang 12.)\n* A current version of Boost\n* JDK 8.x (for building Rhubarb for Spine)\n\nThen, follow these steps:\n\n. Create an empty directory `/build` within the Rhubarb repository\n. Move to the new `/build` directory\n. Configure CMake by running `cmake ..` +\nOptionally, pass flags for setting the generator, compiler etc.. For working examples, see `.github\\workflows\\ci.yml`.\n. Build Rhubarb Lip Sync by running `cmake --build . --config Release`\n\n== I'd love to hear from you!\n\nHave you created something great using Rhubarb Lip Sync? -- *https://twitter.com/RhubarbLipSync[Let me know on Twitter]* or *send me an email* at +++&#100;&#119;&#111;&#108;&#102;&#064;&#100;&#097;&#110;&#110;&#097;&#100;&#046;&#100;&#101;+++!\n\nDo you need help? Have you spotted a bug? Do you have a suggestion? -- *https://github.com/DanielSWolf/rhubarb-lip-sync/issues[Create an issue!]*\n"
        },
        {
          "name": "appInfo.cmake",
          "type": "blob",
          "size": 0.251953125,
          "content": "cmake_minimum_required(VERSION 3.2)\n\nset(appName \"Rhubarb Lip Sync\")\nset(appVersionMajor 1)\nset(appVersionMinor 13)\nset(appVersionPatch 0)\nset(appVersionSuffix \"\")\nset(appVersion \"${appVersionMajor}.${appVersionMinor}.${appVersionPatch}${appVersionSuffix}\")\n"
        },
        {
          "name": "extras",
          "type": "tree",
          "content": null
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "package-osx.sh",
          "type": "blob",
          "size": 0.109375,
          "content": "#!/bin/sh\nrm -rf build\nmkdir build\ncd build\ncmake .. -G Xcode\ncmake --build . --config Release --target package\n"
        },
        {
          "name": "package-win.bat",
          "type": "blob",
          "size": 0.1220703125,
          "content": "rmdir /s /q build\nmkdir build\ncd build\ncmake .. -G \"Visual Studio 16 2019\"\ncmake --build . --config Release --target package\n"
        },
        {
          "name": "rhubarb",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}