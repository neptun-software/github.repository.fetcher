{
  "metadata": {
    "timestamp": 1736565633711,
    "page": 518,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Hopson97/MineCraft-One-Week-Challenge",
      "stars": 2659,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.2529296875,
          "content": "Language: Cpp\nBasedOnStyle: LLVM\nIndentWidth: 4\n\nBreakBeforeBraces: Stroustrup\nFixNamespaceComments: true\nIndentCaseLabels: true\nNamespaceIndentation: None\n\nBreakConstructorInitializersBeforeComma: true\n\nAllowShortFunctionsOnASingleLine: None\n\nColumnLimit: 80"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2490234375,
          "content": "#Visual Studio\nDebug/\nRelease/\n*.sln\n*.vcxproj\n*.filters\n*.users\n*.user\n*.dll\n.vs \n\n# Visual Studio Code\n.vscode/\n\n\n# Builds\nbin/\nMakefile\nbuild/\n\n# Manually Added\nCMakeFiles/\ncmake_install.cmake \nCMakeCache.txt\nmc-one-week\nlibglad.a\ndevelopment_notes.txt"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 3.619140625,
          "content": "cmake_minimum_required(VERSION 3.10)\n\n#Set up project\nproject(mc-one-week VERSION 1.0)\n\nconfigure_file(config.txt ${CMAKE_BINARY_DIR}/config.txt COPYONLY)\n\n# Copy the resource files to the new binary dir\nadd_custom_target(copy_resources ALL\n    COMMAND ${CMAKE_COMMAND} -E copy_directory\n    ${PROJECT_SOURCE_DIR}/Res\n    ${PROJECT_BINARY_DIR}/Res\n    COMMENT \"Copying game resources into Res folder\")\n\n\nadd_custom_target(copy_shaders ALL\n    COMMAND ${CMAKE_COMMAND} -E copy_directory\n    ${PROJECT_SOURCE_DIR}/Shaders\n    ${PROJECT_BINARY_DIR}/Shaders\n    COMMENT \"Copying shaders into Shaders folder\")\n\n#Set executable\nadd_executable(mc-one-week\n    Source/Item/Material.cpp\n    Source/Item/ItemStack.cpp\n    Source/Application.cpp\n    Source/World/Event/PlayerDigEvent.cpp\n    Source/World/Block/BlockDatabase.cpp\n    Source/World/Block/BlockData.cpp\n    Source/World/Block/ChunkBlock.cpp\n    Source/World/Block/BlockTypes/BlockType.cpp\n    Source/World/World.cpp\n    Source/World/Generation/Biome/LightForest.cpp\n    Source/World/Generation/Biome/Biome.cpp\n    Source/World/Generation/Biome/DesertBiome.cpp\n    Source/World/Generation/Biome/GrasslandBiome.cpp\n    Source/World/Generation/Biome/TemperateForestBiome.cpp\n    Source/World/Generation/Biome/OceanBiome.cpp\n    Source/World/Generation/Structures/TreeGenerator.cpp\n    Source/World/Generation/Structures/StructureBuilder.cpp\n    Source/World/Generation/Terrain/SuperFlatGenerator.cpp\n    Source/World/Generation/Terrain/ClassicOverWorldGenerator.cpp\n    Source/World/Chunk/ChunkMesh.cpp\n    Source/World/Chunk/ChunkManager.cpp\n    Source/World/Chunk/Chunk.cpp\n    Source/World/Chunk/ChunkSection.cpp\n    Source/World/Chunk/ChunkMeshBuilder.cpp\n    Source/States/PlayState.cpp\n    Source/Player/Player.cpp\n    Source/Maths/Ray.cpp\n    Source/Maths/Frustum.cpp\n    Source/Maths/NoiseGenerator.cpp\n    Source/Maths/Vector2XZ.cpp\n    Source/Maths/Matrix.cpp\n    Source/Maths/GeneralMaths.cpp\n    Source/Camera.cpp\n    Source/GL/GLFunctions.cpp\n    Source/Context.cpp\n    Source/Texture/CubeTexture.cpp\n    Source/Texture/BasicTexture.cpp\n    Source/Texture/TextureAtlas.cpp\n    Source/Input/ToggleKey.cpp\n    Source/Input/Keyboard.cpp\n    Source/Main.cpp\n    Source/Controller.cpp\n    Source/Util/Random.cpp\n    Source/Util/FPSCounter.cpp\n    Source/Util/FileUtil.cpp\n    Source/Shaders/FloraShader.cpp\n    Source/Shaders/WaterShader.cpp\n    Source/Shaders/SkyboxShader.cpp\n    Source/Shaders/Shader.cpp\n    Source/Shaders/ChunkShader.cpp\n    Source/Shaders/BasicShader.cpp\n    Source/Shaders/ShaderLoader.cpp\n    Source/Renderer/RenderMaster.cpp\n    Source/Renderer/WaterRenderer.cpp\n    Source/Renderer/ChunkRenderer.cpp\n    Source/Renderer/SkyboxRenderer.cpp\n    Source/Renderer/FloraRenderer.cpp\n    Source/Model.cpp\n)\n\n#Set module path\nset(CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/cmake_modules\" ${CMAKE_MODULE_PATH})\n\n#Find libraries\nfind_package(Threads)\nfind_package(SFML REQUIRED audio network graphics window system)\n\nadd_subdirectory(deps/glm)\nadd_subdirectory(deps/glad)\n\nfunction(setup_target TARGET)\n    #Set C++17\n    target_compile_features(${TARGET} PUBLIC cxx_std_17)\n    set_target_properties(${TARGET} PROPERTIES CXX_EXTENSIONS OFF)\n\n    #Set flags\n    if(MSVC)\n        target_compile_options(${TARGET} PRIVATE \n            /W4 /WX)\n    else()\n        target_compile_options(${TARGET} PRIVATE \n            -Wall -Wextra -pedantic)\n    endif()\n\n    target_include_directories(\n        ${TARGET}\n        PRIVATE\n        deps\n    )\nendfunction(setup_target)\n\nsetup_target(mc-one-week)\n\ntarget_link_libraries(mc-one-week\n    glm\n    glad\n    Threads::Threads \n    ${SFML_LIBRARIES} \n    ${SFML_DEPENDENCIES}\n    ${CMAKE_DL_LIBS}\n)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0458984375,
          "content": "MIT License\n\nCopyright (c) 2018 Matthew Hopson\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.8037109375,
          "content": "# MineCraft-One-Week-Challenge\n\nI challenged myself to see if I could create Minecraft in just one week... So lets go!\n\nVideo: https://www.youtube.com/watch?v=Xq3isov6mZ8\n\nNote: I continued to edit after the 7 days, however the version seen in the video is found here https://github.com/Hopson97/MineCraft-One-Week-Challenge/tree/eb01640580cc5ad403f6a8b9fb58af37e2f03f0c\n\nAnd the \"optimized\" version can be found here: https://github.com/Hopson97/MineCraft-One-Week-Challenge/tree/792df07e9780b444be5290fd05a3c8598aacafc8 (~1 week later version) \n\nThere also is a version of this game with very good graphics, and things like a day/night cycle. However, it was causing rendering issues for many people. This version can be found here:\nhttps://github.com/Hopson97/MineCraft-One-Week-Challenge/tree/aa50ad8077ef0e617a9cfc336bdb7db81c313017\n\n## Other People's Projects\n\nThis was made in a week, as a challenge for a video. There do exist other, more mature and developed Minecraft clones written in C++.\n\nMineTest here: https://github.com/minetest/minetest\n\n## Building\n\nYou will need GLM and SFML 2.4.1+ libraries w/headers, and this also requires a compiler that supports C++14 (or newer) with threads.\n\n### macOS\n\nInstall macports from https://www.macports.org \n\n`sudo port install sfml glm`\n\n### Ubuntu\n\n`sudo apt-get install libsfml-dev libglm-dev`\n\n## Compile Source and Running\n\n### Linux\n\n#### Debug\n\n```sh\nsh scripts/build.sh\nsh scripts/run.sh\n```\n\n#### Release\n\n```sh\nsh scripts/build.sh release\nsh scripts/run.sh release\n```\n\n## The Challenge\n\n### Day One\n\nEnd of day one commit: https://github.com/Hopson97/MineCraft-One-Week-Challenge/tree/44ace72573833796da05a97972be5765b05ce94f\n\nThe first day was spent setting up boilerplate code such as the game state/ game screen system, and the basic rendering engines, starting off with a mere quad.\n\nThe day was finished off by creating a first person camera.\n\n![Quad](http://i.imgur.com/fJDgA2a.png)\n\nEnd of day stats:\n\nTitle | Data\n------------ | -------------\nTime programming Today | 3:21:51\nLines of Code Today | 829\nTotal Time programming | 3:21:51\nTotal Lines of Code | 829\n\n### Day Two\n\nEnd of day two commit: https://github.com/Hopson97/MineCraft-One-Week-Challenge/tree/98055215f735335de80193221a30c0bb8586fba5\n\nThe second day was spent setting up the basic ChunkSection and various block classes.\n\nI also worked out the coordinates for a cube, and thus created a cube renderer.\n\nI finished up the day attempting to create a mesh builder for the chunk; however, this did not go well at all, and two had ended before I got it to work correctly.\n\n![Messed up chunk](http://i.imgur.com/UsKHJrR.png)\n\nEnd of day stats:\n\nTitle | Data\n------------ | -------------\nTime programming Today | 4:16:07\nLines of Code Today | 732\nTotal Time programming | 7:37:58\nTotal Lines of Code | 1561\n\n\n### Day Three\n\nEnd of day three commit: https://github.com/Hopson97/MineCraft-One-Week-Challenge/commit/78bd637581542576372d75cf7638f76381e933b4\n\nTo start the day off, I fixed the chunk drawing. Turns out I was telling OpenGL the indices were ```GL_UNSIGNED_BYTE```, but they were actually ```GL_UNSIGNED_INT```. This took 3 hours to work out...\n\n![gl bytesss](http://i.imgur.com/PD44aRg.png)\n\nAnyways, after this I got the game working with more chunks. I now have an area of 16x16 chunks, made out of chunk sections of 16x16x16 blocks.\n\nTo finish the day off, I got some naive block editing to work.\n\n![Block editing](http://i.imgur.com/ilTJr8i.png)\n\nEnd of day stats:\n\nTitle | Data\n------------ | -------------\nTime programming Today | 3:15:38\nLines of Code Today | 410\nTotal Time programming | 10:53:36\nTotal Lines of Code | 1974\n\n### Day 4\n\nThe first thing I did on day 4 was create a sky box using OpenGL cube maps.\n\nAfter this, I started work on the world generation, eg adding height map and trees.\n\n![Skybox and world gen](http://i.imgur.com/mzUwqPo.png)\n\nEnd of day stats:\n\nTitle | Data\n------------ | -------------\nTime programming Today | 3:14:15\nLines of Code Today | 523\nTotal Time programming | 14:07:51\nTotal Lines of Code | 2489\n\n### Day 5\n\nI started off the day by cleaning up some of the chunk code, and then proceeded to make the world infinite, but\nI felt it was not needed, so I simply went back to a fixed-sized world.\n\nI then added an item system. My implementation probably was not great for this, but it was my first time\nat creating that sort of the thing.\n\nBasically, when a player breaks a block, it gets added to their inventory. When they place a block, a block\nis placed.\n\nTitle | Data\n------------ | -------------\nTime programming Today | 2:54:14\nLines of Code Today | 560\nTotal Time programming | 17:02:05\nTotal Lines of Code | 3049\n\n### Day 6\n\nMostly optimizations, such as view-frustum culling and making the mesh building faster.\n\n### Day 7\n\nFocus on improving how it looks, eg adding directional lighting\n\nAlso implemented concurrency :)\n\n"
        },
        {
          "name": "Res",
          "type": "tree",
          "content": null
        },
        {
          "name": "Shaders",
          "type": "tree",
          "content": null
        },
        {
          "name": "Source",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake_modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "config.txt",
          "type": "blob",
          "size": 0.056640625,
          "content": "renderdistance 8\nfullscreen 0\nwindowsize 1600 900\nfov 105\n"
        },
        {
          "name": "deps",
          "type": "tree",
          "content": null
        },
        {
          "name": "premake5.lua",
          "type": "blob",
          "size": 0.501953125,
          "content": "workspace \"mconeweek\"\n    configurations {\"Debug\", \"Release\"}\n\nproject \"mconeweek\"\n    kind \"WindowedApp\"\n    language \"C++\"\n    targetdir \"bin/%{cfg.buildcfg}\"\n\n    links {os.findlib(\"sfml\")}\n    links {\"sfml-audio\", \"sfml-network\", \"sfml-graphics\", \"sfml-window\", \"sfml-system\", \"pthread\", \"dl\"}\n\n\n\n    files {\"./Source/**.cpp\", \"./Source/**.c\", \"./Source/**.h\"}\n\n\nfilter \"configurations:Debug\"\n    defines { \"DEBUG\" }\n    symbols \"On\"\n\n filter \"configurations:Release\"\n    defines { \"NDEBUG\" }\n    optimize \"On\""
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}