{
  "metadata": {
    "timestamp": 1736565389143,
    "page": 229,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "openthread/openthread",
      "stars": 3561,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 3.1005859375,
          "content": "---\nLanguage:        Cpp\n# BasedOnStyle:  LLVM\nAccessModifierOffset: -4\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: true\nAlignConsecutiveDeclarations: true\nAlignEscapedNewlines: Left\nAlignOperands:   true\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: All\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: true\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: false\nBinPackArguments: true\nBinPackParameters: false\nBraceWrapping:\n  AfterCaseLabel:  true\n  AfterClass:      true\n  AfterControlStatement: true\n  AfterEnum:       true\n  AfterFunction:   true\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     true\n  AfterUnion:      true\n  BeforeCatch:     false\n  BeforeElse:      true\n  IndentBraces:    false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Custom\nBreakBeforeInheritanceComma: false\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: BeforeComma\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit:     120\nCommentPragmas:  '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nForEachMacros:\n  - foreach\n  - Q_FOREACH\n  - BOOST_FOREACH\nIncludeCategories:\n  - Regex:           '^<openthread/.*/'\n    Priority:        4\n  - Regex:           '^<openthread/'\n    Priority:        3\n  - Regex:           '^<'\n    Priority:        2\n  - Regex:           '^\".*/'\n    Priority:        5\n  - Regex:           '^\"'\n    Priority:        1\nIncludeIsMainRegex: '(Test)?$'\nIndentCaseLabels: false\nIndentWidth:     4\nIndentWrappedFunctionNames: false\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: false\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 19\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 1000\nPointerAlignment: Right\nReflowComments:  true\nSortIncludes:    true\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Cpp11\nTabWidth:        4\nUseTab:          Never\n...\n\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 0.72265625,
          "content": "---\nChecks: >\n  -*,\n  bugprone-argument-comment,\n  bugprone-too-small-loop-variable,\n  google-explicit-constructor,\n  google-readability-casting,\n  misc-unused-using-decls,\n  modernize-loop-convert,\n  modernize-use-bool-literals,\n  modernize-use-equals-default,\n  modernize-use-equals-delete,\n  modernize-use-nullptr,\n  readability-avoid-const-params-in-decls,\n  readability-else-after-return,\n  readability-inconsistent-declaration-parameter-name,\n  readability-make-member-function-const,\n  readability-redundant-control-flow,\n  readability-redundant-member-init,\n  readability-simplify-boolean-expr,\n  readability-static-accessed-through-instance\nWarningsAsErrors: '*'\nHeaderFilterRegex: '(examples|include|src).*(?<!third_party.*repo)'\n"
        },
        {
          "name": ".code-spell-ignore",
          "type": "blob",
          "size": 0.1669921875,
          "content": "aactual\naafter\naanother\nacount\naddrss\nafile\naline\nalocator\nans\nanumber\naother\naparent\napending\nasender\nasent\natleast\nect\nintialize\nnd\not\nre-use\nshashes\nue\nunknwn\nunsecure\n"
        },
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.1552734375,
          "content": "coverage:\n  status:\n    project: off\n    patch: off\n\nignore:\n  - \"tests/*\"\n  - \"third_party/**/*\"\n\ncomment:\n  layout: \"diff, flags, files\"\n  after_n_builds: 5\n"
        },
        {
          "name": ".default-version",
          "type": "blob",
          "size": 0.0078125,
          "content": "0.01.00\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.3994140625,
          "content": "# Auto normalize all files which appear to be text files.\n*        text=auto\n\n# Auto normalize files which are explicitly text\n*.[ch]   text\n*.[ch]pp text\n*.txt    text\n*.md     text\n*.yml    text\n*.html   text\n*.py     text\n\n# Files which are explicitly binary\n*.gz     binary !eol\n*.xz     binary !eol\n*.bz2    binary !eol\n*.tar    binary !eol\n*.png    binary !eol\n*.jpg    binary !eol\n*.gif    binary !eol\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5556640625,
          "content": "*.a\n*.a.*\n*.bak\n*.flash\n*.gcda\n*.gcno\n*.log\n*.o\n*.ninja*\n*.orig\n*.pcap\n*.pyc\n*.swn\n*.swo\n*.swp\n*.trs\n*.bak\n*.map\n*~\n.DS_Store\n.vagrant\nbuild\nCMakeCache.txt\nCMakeFiles\ncmake_install.cmake\ndoc/Doxyfile\ndoc/html\noutput\n/tmp/\n\n# OT exectuables\not-cli-ftd\not-cli-mtd\not-cli-radio\not-ncp-ftd\not-ncp-mtd\not-rcp\n\n# IDE / editor files\n.idea/**\n.vscode/**\ncmake-build-*/**\n/tags\n\n# Python bytecodes\n__pycache__\n\n# Unit test files\nCTestTestfile.cmake\not-test-*\not_testing/\nTesting/\ntests/nexus/nexus_*\n\n# Misc\nDartConfiguration.tcl\nthird_party/mbedtls/openthread-mbedtls-config.h\n"
        },
        {
          "name": ".gn",
          "type": "blob",
          "size": 0.08203125,
          "content": "buildconfig = \"//third_party/build_gn/BUILDCONFIG.gn\"\n\ncheck_system_includes = true\n"
        },
        {
          "name": ".prettierrc",
          "type": "blob",
          "size": 0.1455078125,
          "content": "{\n    \"$schema\": \"http://json.schemastore.org/prettierrc\",\n    \"printWidth\": 80,\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"proseWrap\": \"never\"\n}\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.6240234375,
          "content": "# This is the official list of OpenThread authors for copyright purposes.\n#\n# This does not necessarily list everyone who has contributed code, since in\n# some cases, their employer may be the copyright holder. To see the full list\n# of contributors, see the revision history in source control or\n# https://github.com/openthread/openthread/graphs/contributors\n#\n# Authors who wish to be recognized in this file should add themselves (or\n# their employer, as appropriate).\n\nNest Labs, Inc.\nMicrosoft Corporation\nNordic Semiconductor\nTexas Instruments Incorporated\nNXP Semiconductors\nSynopsys, Inc.\nCascoda Limited\nSilicon Laboratories, Inc\n"
        },
        {
          "name": "BUILD.gn",
          "type": "blob",
          "size": 3.291015625,
          "content": "#  Copyright (c) 2019, The OpenThread Authors.\n#  All rights reserved.\n#\n#  Redistribution and use in source and binary forms, with or without\n#  modification, are permitted provided that the following conditions are met:\n#  1. Redistributions of source code must retain the above copyright\n#     notice, this list of conditions and the following disclaimer.\n#  2. Redistributions in binary form must reproduce the above copyright\n#     notice, this list of conditions and the following disclaimer in the\n#     documentation and/or other materials provided with the distribution.\n#  3. Neither the name of the copyright holder nor the\n#     names of its contributors may be used to endorse or promote products\n#     derived from this software without specific prior written permission.\n#\n#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n#  POSSIBILITY OF SUCH DAMAGE.\n#\n\nimport(\"etc/gn/openthread.gni\")\n\nconfig(\"openthread_config\") {\n  defines = []\n  if (openthread_config_file != \"\") {\n    defines += [ \"OPENTHREAD_CONFIG_FILE=${openthread_config_file}\" ]\n  }\n\n  include_dirs = openthread_project_include_dirs\n\n  include_dirs += [\n    \"${root_gen_dir}/include\",\n    \"include\",\n    \"src/include\",\n  ]\n}\n\nconfig(\"openthread_ftd_config\") {\n  defines = [\n    \"OPENTHREAD_FTD=1\",\n    \"OPENTHREAD_MTD=0\",\n    \"OPENTHREAD_RADIO=0\",\n  ]\n}\n\nconfig(\"openthread_mtd_config\") {\n  defines = [\n    \"OPENTHREAD_MTD=1\",\n    \"OPENTHREAD_FTD=0\",\n    \"OPENTHREAD_RADIO=0\",\n  ]\n}\n\nconfig(\"openthread_radio_config\") {\n  defines = [\n    \"OPENTHREAD_RADIO=1\",\n    \"OPENTHREAD_FTD=0\",\n    \"OPENTHREAD_MTD=0\",\n  ]\n}\n\ngroup(\"libopenthread-ftd\") {\n  public_deps = [ \"include/openthread\" ]\n  deps = [ \"src/core:libopenthread-ftd\" ]\n}\n\ngroup(\"libopenthread-mtd\") {\n  public_deps = [ \"include/openthread\" ]\n  deps = [ \"src/core:libopenthread-mtd\" ]\n}\n\ngroup(\"libopenthread-radio\") {\n  public_deps = [ \"include/openthread\" ]\n  deps = [ \"src/core:libopenthread-radio\" ]\n}\n\ngroup(\"libopenthread-cli-ftd\") {\n  public_deps = [ \"include/openthread\" ]\n  deps = [ \"src/cli:libopenthread-cli-ftd\" ]\n}\n\ngroup(\"libopenthread-cli-mtd\") {\n  public_deps = [ \"include/openthread\" ]\n  deps = [ \"src/cli:libopenthread-cli-mtd\" ]\n}\n\ngroup(\"libopenthread-spinel-ncp\") {\n  public_deps = [ \"src/lib/spinel:spinel-api\" ]\n  deps = [ \"src/lib/spinel:libopenthread-spinel-ncp\" ]\n}\n\ngroup(\"libopenthread-spinel-rcp\") {\n  public_deps = [ \"src/lib/spinel:spinel-api\" ]\n  deps = [ \"src/lib/spinel:libopenthread-spinel-rcp\" ]\n}\n\nif (current_os == \"fuchsia\") {\n  group(\"lib-ot-core\") {\n    public_deps = [\n      \":libopenthread-ftd\",\n      \"src/core:libopenthread-ftd\",\n      \"src/ncp:libopenthread-ncp-ftd\",\n    ]\n  }\n}\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 7.1455078125,
          "content": "#\n#  Copyright (c) 2019, The OpenThread Authors.\n#  All rights reserved.\n#\n#  Redistribution and use in source and binary forms, with or without\n#  modification, are permitted provided that the following conditions are met:\n#  1. Redistributions of source code must retain the above copyright\n#     notice, this list of conditions and the following disclaimer.\n#  2. Redistributions in binary form must reproduce the above copyright\n#     notice, this list of conditions and the following disclaimer in the\n#     documentation and/or other materials provided with the distribution.\n#  3. Neither the name of the copyright holder nor the\n#     names of its contributors may be used to endorse or promote products\n#     derived from this software without specific prior written permission.\n#\n#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n#  POSSIBILITY OF SUCH DAMAGE.\n#\n\ncmake_policy(SET CMP0048 NEW)\ncmake_minimum_required(VERSION 3.10.2)\n\nfile(READ .default-version OT_DEFAULT_VERSION)\nstring(STRIP ${OT_DEFAULT_VERSION} OT_DEFAULT_VERSION)\n\nproject(openthread VERSION ${OT_DEFAULT_VERSION})\ninclude(CTest)\n\noption(OT_BUILD_EXECUTABLES \"Build executables\" ON)\noption(OT_COVERAGE \"enable coverage\" OFF)\nset(OT_EXTERNAL_MBEDTLS \"\" CACHE STRING \"Specify external mbedtls library\")\noption(OT_MBEDTLS_THREADING \"enable mbedtls threading\" OFF)\n\nadd_library(ot-config INTERFACE)\nadd_library(ot-config-ftd INTERFACE)\nadd_library(ot-config-mtd INTERFACE)\nadd_library(ot-config-radio INTERFACE)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_C_EXTENSIONS OFF)\nset(CMAKE_C_STANDARD 99)\n\nmessage(STATUS \"OpenThread Source Directory: ${PROJECT_SOURCE_DIR}\")\n\ntarget_include_directories(ot-config INTERFACE\n    ${PROJECT_SOURCE_DIR}/include\n    ${PROJECT_SOURCE_DIR}/src\n    ${PROJECT_SOURCE_DIR}/src/core\n    ${PROJECT_SOURCE_DIR}/src/include\n)\n\ninclude(TestBigEndian)\nTEST_BIG_ENDIAN(OT_BIG_ENDIAN)\nif(OT_BIG_ENDIAN)\n    target_compile_definitions(ot-config INTERFACE \"BYTE_ORDER_BIG_ENDIAN=1\")\nendif()\n\ninclude(\"${PROJECT_SOURCE_DIR}/etc/cmake/options.cmake\")\ninclude(\"${PROJECT_SOURCE_DIR}/etc/cmake/functions.cmake\")\n\nif(NOT CMAKE_BUILD_TYPE)\n    # Check if this is a top-level CMake.\n    # If it is not, do not set the CMAKE_BUILD_TYPE because OpenThread is a part of something bigger.\n    if (\"${CMAKE_PROJECT_NAME}\" STREQUAL \"openthread\")\n        set(CMAKE_BUILD_TYPE \"Debug\" CACHE STRING \"default build type: Debug\" FORCE)\n    endif ()\nendif()\n\nif (CMAKE_BUILD_TYPE)\n    message(STATUS \"OpenThread CMake build type: ${CMAKE_BUILD_TYPE}\")\nendif ()\n\nif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_C_COMPILER_ID MATCHES \"(Apple)?[Cc]lang\")\n    option(OT_COMPILE_WARNING_AS_ERROR \"whether to include -Werror -pedantic-errors with gcc-compatible compilers\")\n    if (OT_COMPILE_WARNING_AS_ERROR)\n        set(OT_CFLAGS -Werror -pedantic-errors)\n    endif()\n\n    if(OT_COVERAGE)\n        target_compile_definitions(ot-config INTERFACE \"OPENTHREAD_ENABLE_COVERAGE=1\")\n        target_compile_options(ot-config INTERFACE -g -O0 --coverage)\n        target_link_libraries(ot-config INTERFACE --coverage)\n    endif()\n\n    set(OT_CFLAGS\n        $<$<COMPILE_LANGUAGE:C>:${OT_CFLAGS} -Wall -Wextra -Wshadow>\n        $<$<COMPILE_LANGUAGE:CXX>:${OT_CFLAGS} -Wall -Wextra -Wshadow -Wno-c++14-compat -fno-exceptions>\n        $<$<CXX_COMPILER_ID:Clang>:-Wc99-extensions>\n    )\nendif()\n\nset(OT_PACKAGE_NAME \"OPENTHREAD\" CACHE STRING \"OpenThread Package Name\")\ntarget_compile_definitions(ot-config INTERFACE \"PACKAGE_NAME=\\\"${OT_PACKAGE_NAME}\\\"\")\nmessage(STATUS \"Package Name: ${OT_PACKAGE_NAME}\")\n\nset(OT_PACKAGE_VERSION \"\" CACHE STRING \"OpenThread Package Version\")\nif(OT_PACKAGE_VERSION STREQUAL \"\")\n    ot_git_version(OT_PACKAGE_VERSION)\n    message(STATUS \"Setting default package version: ${OT_PACKAGE_VERSION}\")\nendif()\nmessage(STATUS \"Package Version: ${OT_PACKAGE_VERSION}\")\n\n# Deprecated\nset(OT_CONFIG \"\" CACHE STRING \"OpenThread config header file (deprecated, use `OT_PROJECT_CONFIG` or `OT_PLATFORM_CONFIG` instead\")\n\nset(OT_PROJECT_CONFIG \"\" CACHE STRING \"OpenThread project-specific config header file\")\nset(OT_PLATFORM_CONFIG \"\" CACHE STRING \"OpenThread platform-specific config header file\")\n\nlist(APPEND OT_PUBLIC_INCLUDES ${PROJECT_BINARY_DIR}/etc/cmake)\nlist(APPEND OT_PUBLIC_INCLUDES ${PROJECT_SOURCE_DIR}/etc/cmake)\nlist(APPEND OT_PUBLIC_INCLUDES ${PROJECT_SOURCE_DIR}/include)\n\nif(OT_PLATFORM STREQUAL \"posix\")\n    target_include_directories(ot-config INTERFACE ${PROJECT_SOURCE_DIR}/src/posix/platform)\n    target_compile_definitions(ot-config INTERFACE OPENTHREAD_PLATFORM_POSIX=1)\n    add_subdirectory(\"${PROJECT_SOURCE_DIR}/src/posix/platform\")\nelseif(OT_PLATFORM STREQUAL \"external\")\n    # skip in this case\nelseif(OT_PLATFORM STREQUAL \"nexus\")\n    if (OT_APP_CLI OR OT_APP_NCP OR OT_APP_RCP)\n        message(FATAL_ERROR \"no app (cli/ncp/rcp) should be enabled with nexus simulation platform\")\n    endif()\n    target_compile_definitions(ot-config INTERFACE OPENTHREAD_PLATFORM_NEXUS=1)\nelse()\n    target_include_directories(ot-config INTERFACE ${PROJECT_SOURCE_DIR}/examples/platforms/${OT_PLATFORM})\n    add_subdirectory(\"${PROJECT_SOURCE_DIR}/examples/platforms/${OT_PLATFORM}\")\nendif()\n\nif(OT_CONFIG)\n    target_compile_definitions(ot-config INTERFACE \"OPENTHREAD_CONFIG_FILE=\\\"${OT_CONFIG}\\\"\")\n    message(WARNING \"OT_CONFIG is deprecated - use `OT_PROJECT_CONFIG` and `OT_PLATFORM_CONFIG` instead\")\n    message(STATUS \"OT_CONFIG=\\\"${OT_CONFIG}\\\"\")\nendif()\n\nif (OT_PROJECT_CONFIG)\n    target_compile_definitions(ot-config INTERFACE \"OPENTHREAD_PROJECT_CORE_CONFIG_FILE=\\\"${OT_PROJECT_CONFIG}\\\"\")\n    message(STATUS \"OT_PROJECT_CONFIG=\\\"${OT_PROJECT_CONFIG}\\\"\")\nendif()\n\nif (OT_PLATFORM_CONFIG)\n    target_compile_definitions(ot-config INTERFACE \"OPENTHREAD_PLATFORM_CORE_CONFIG_FILE=\\\"${OT_PLATFORM_CONFIG}\\\"\")\n    message(STATUS \"OT_PLATFORM_CONFIG=\\\"${OT_PLATFORM_CONFIG}\\\"\")\nendif()\n\ntarget_compile_definitions(ot-config INTERFACE ${OT_PLATFORM_DEFINES})\n\nif(OT_PLATFORM STREQUAL \"posix\")\n    if(OT_BUILD_EXECUTABLES)\n        add_subdirectory(src/posix)\n    else()\n        add_subdirectory(src/posix EXCLUDE_FROM_ALL)\n    endif()\nelseif(OT_PLATFORM)\n    add_subdirectory(examples)\nendif()\n\nif (OT_DOC)\n    add_subdirectory(doc)\nendif()\n\nadd_subdirectory(src)\nadd_subdirectory(third_party EXCLUDE_FROM_ALL)\n\nadd_subdirectory(tests)\nadd_subdirectory(tools)\n\nadd_custom_target(print-ot-config ALL\n                  COMMAND ${CMAKE_COMMAND}\n                  -DLIST=\"$<TARGET_PROPERTY:ot-config,INTERFACE_COMPILE_DEFINITIONS>\"\n                  -P ${PROJECT_SOURCE_DIR}/etc/cmake/print.cmake\n)\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.345703125,
          "content": "# OpenThread Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our community include:\n\n- Demonstrating empathy and kindness toward other people\n- Being respectful of differing opinions, viewpoints, and experiences\n- Giving and gracefully accepting constructive feedback\n- Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience\n- Focusing on what is best not just for us as individuals, but for the overall community\n\nExamples of unacceptable behavior include:\n\n- The use of sexualized language or imagery, and sexual attention or advances of any kind\n- Trolling, insulting or derogatory comments, and personal or political attacks\n- Public or private harassment\n- Publishing others' private information, such as a physical or email address, without their explicit permission\n- Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at openthread-conduct@google.com. All complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the reporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series of actions.\n\n**Consequence**: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including sustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within the community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 2.1, available at [https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct enforcement ladder][mozilla coc].\n\nFor answers to common questions about this code of conduct, see the FAQ at [https://www.contributor-covenant.org/faq][faq]. Translations are available at [https://www.contributor-covenant.org/translations][translations].\n\n[homepage]: https://www.contributor-covenant.org\n[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html\n[mozilla coc]: https://github.com/mozilla/diversity\n[faq]: https://www.contributor-covenant.org/faq\n[translations]: https://www.contributor-covenant.org/translations\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 9.1494140625,
          "content": "# Contributing to OpenThread\n\nWe would love for you to contribute to OpenThread and help make it even better than it is today! As a contributor, here are the guidelines we would like you to follow.\n\n- [1 Code of Conduct](#code-of-conduct)\n- [2 Bugs](#bugs)\n- [3 New Features](#new-features)\n- [4 Contributing Code](#contributing-code)\n  - [4.1 Initial Setup](#initial-setup)\n  - [4.2 Contributor License Agreement (CLA)](#contributor-license-agreement--cla-)\n  - [4.3 Submitting a Pull Request](#submitting-a-pull-request)\n- [5 Contributing Documentation](#contributing-documentation)\n\n## Code of Conduct\n\nHelp us keep OpenThread open and inclusive. Please read and follow our [Code of Conduct](CODE_OF_CONDUCT.md).\n\n## Bugs\n\nIf you find a bug in the source code, you can help us by [submitting a GitHub Issue](https://github.com/openthread/openthread/issues/new). The best bug reports provide a detailed description of the issue and step-by-step instructions for predictably reproducing the issue. Even better, you can [submit a Pull Request](#submitting-a-pull-request) with a fix.\n\n## New Features\n\nYou can request a new feature by [submitting a GitHub Issue](https://github.com/openthread/openthread/issues/new).\n\nIf you would like to implement a new feature, please consider the scope of the new feature:\n\n- _Large feature_: first [submit a GitHub Issue](https://github.com/openthread/openthread/issues/new) and communicate your proposal so that the community can review and provide feedback. Getting early feedback will help ensure your implementation work is accepted by the community. This will also allow us to better coordinate our efforts and minimize duplicated effort.\n\n- _Small feature_: can be implemented and directly [submitted as a Pull Request](#submitting-a-pull-request).\n\n## Contributing Code\n\nThe OpenThread Project follows the \"Fork-and-Pull\" model for accepting contributions.\n\n### Initial Setup\n\nSetup your GitHub fork and continuous-integration services:\n\n1. Fork the [OpenThread repository](https://github.com/openthread/openthread) by clicking \"Fork\" on the web UI.\n\nSetup your local development environment:\n\n```bash\n# Clone your fork\ngit clone git@github.com:<username>/openthread.git\n\n# Configure upstream alias\ngit remote add upstream git@github.com:openthread/openthread.git\n```\n\n### Contributor License Agreement (CLA)\n\nContributions to this project must be accompanied by a Contributor License Agreement. You (or your employer) retain the copyright to your contribution; this simply gives us permission to use and redistribute your contributions as part of the project. Head over to <https://cla.developers.google.com/> to see your current agreements on file or to sign a new one.\n\nYou generally only need to submit a CLA once, so if you've already submitted one (even if it was for a different project), you probably don't need to do it again.\n\n### Submitting a Pull Request\n\n#### Branch\n\nFor each new feature, create a working branch:\n\n```bash\n# Create a working branch for your new feature\ngit branch --track <branch-name> origin/main\n\n# Checkout the branch\ngit checkout <branch-name>\n```\n\n#### Create Commits\n\n```bash\n# Add each modified file you'd like to include in the commit\ngit add <file1> <file2>\n\n# Create a commit\ngit commit\n```\n\nThis will open up a text editor where you can craft your commit message.\n\n#### Upstream Sync and Clean Up\n\nPrior to submitting your pull request, you might want to do a few things to clean up your branch and make it as simple as possible for the original repo's maintainer to test, accept, and merge your work.\n\nIf any commits have been made to the upstream main branch, you should rebase your development branch so that merging it will be a simple fast-forward that won't require any conflict resolution work.\n\n```bash\n# Fetch upstream main and merge with your repo's main branch\ngit checkout main\ngit pull upstream main\n\n# If there were any new commits, rebase your development branch\ngit checkout <branch-name>\ngit rebase main\n```\n\nNow, it may be desirable to squash some of your smaller commits down into a small number of larger more cohesive commits. You can do this with an interactive rebase:\n\n```bash\n# Rebase all commits on your development branch\ngit checkout\ngit rebase -i main\n```\n\nThis will open up a text editor where you can specify which commits to squash.\n\n#### Coding Conventions and Style\n\nOpenThread uses and enforces the [OpenThread Coding Conventions and Style](STYLE_GUIDE.md) on all code, except for code located in [third_party](third_party). Use `script/make-pretty` and `script/make-pretty check` to automatically reformat code and check for code-style compliance, respectively. OpenThread currently requires [clang-format v14.0.0](https://releases.llvm.org/download.html#14.0.0) for C/C++ and [yapf v0.31.0](https://github.com/google/yapf) for Python.\n\nAs part of the cleanup process, you should also run `script/make-pretty check` to ensure that your code passes the baseline code style checks.\n\n#### Push and Test\n\n```bash\n# Checkout your branch\ngit checkout <branch-name>\n\n# Push to your GitHub fork:\ngit push origin <branch-name>\n```\n\nThis will trigger continuous-integration checks using GitHub Actions. You can view the status and logs via the \"Actions\" tab in your fork.\n\n#### Submit Pull Request\n\nOnce you've validated that all continuous-integration checks have passed, go to the page for your fork on GitHub, select your development branch, and click the pull request button. If you need to make any adjustments to your pull request, just push the updates to GitHub. Your pull request will automatically track the changes on your development branch and update.\n\n#### Checks fail\n\nOnce you've submitted a pull request, all continuous-integration checks are triggered again. If some of these checks fail, it could be either problems with the pull request or an intermittent failure of some test cases. For more information on the failure, check the output and download artifacts. (After all jobs in one group are completed, an `Artifacts` button appears beside the `Re-run` jobs button.) If the failure is intermittent, the check will usually pass after rerunning once or twice.\n\nWe want to eliminate intermittent failures as well, so when you experience such a failure, please log an issue and attach any relevant artifacts. If the artifacts are too big, provide the link of the failed run (do not rerun checks again, or it will be overwritten). Alternatively, upload the artifacts to a file-sharing service like Google Drive and share a link to it.\n\n##### Analyze core dumps in failed checks\n\nFor some checks, core dumps for crashed programs are uploaded as artifacts in a failed check. Besides core dumps, binaries and shared libraries are also uploaded so that we can analyze the dumps locally. To analyze the dumps, download the artifact `core-xxx` and unzip it. The package is in the following format:\n\n```\n|-- build\n|   `-- cmake\n|       `-- openthread-simulation-1.2\n|           `-- examples\n|               `-- apps\n|                   `-- cli\n|                       |-- ot-cli-ftd\n|                       `-- ot-cli-mtd\n|-- ot-core-dump\n|   `-- corefile-ot-cli-ftd-11323-1606274703\n`-- so-lib\n    |-- ld-linux-x86-64.so.2\n    |-- libc.so.6\n    `-- libgcc_s.so.1\n```\n\nOnce unzipped:\n\n1. `cd` to the unzipped directory\n2. Run `gdb build/cmake/openthread-simulation-1.2/examples/apps/cli/ot-cli-ftd ./ot-core-dump/corefile-ot-cli-ftd-XXX`.\n3. Set the absolute path of `so-lib`. In gdb, run `set solib-absolute-prefix /ABSOLUTE/PATH/TO/so-lib/`, then run `set solib-search-path /ABSOLUTE/PATH/TO/so-lib/`.\n4. In gdb, run `backtrace` or `bt`. Then you should see the stack of the crashed program. Find and fix the problem!\n\n## Contributing Documentation\n\nDocumentation undergoes the same review process as code and contributions may be mirrored on our [openthread.io](https://openthread.io) website.\n\n### Codelabs and Guides\n\nTo review and contribute to OpenThread Codelabs and Guides, refer to the following GitHub repositories:\n\n- [Codelabs](https://github.com/openthread/ot-docs/tree/main/site/en/codelabs)\n- [Guides](https://github.com/openthread/ot-docs/tree/main/site/en/guides)\n\nFor information on how to author and format documentation for contribution, refer to the [Documentation Style Guide](https://github.com/openthread/ot-docs/blob/main/STYLE_GUIDE.md).\n\n### API Reference topics\n\nAPI Reference topics use [Doxygen comment blocks](https://www.doxygen.nl/manual/docblocks.html) to render the HTML output on [https://openthread.io/reference](https://openthread.io/reference). OpenThread scripts support the following Doxygen [special commands](https://www.doxygen.nl/manual/commands.html):\n\n- @file\n- @brief\n- @param\n- @returns\n\nYou can find most of these comments in the [OpenThread header files](https://github.com/openthread/openthread/tree/main/include/openthread). To review an example, refer to [`border_agent.h`](https://github.com/openthread/openthread/tree/main/include/openthread/border_agent.h). The Doxygen comments in `border_agent.h` output the [Border Agent](https://openthread.io/reference/group/api-border-agent) reference topic on openthread.io. For more information, refer to [Comments](https://github.com/openthread/openthread/blob/main/STYLE_GUIDE.md#comments) in the OpenThread Coding Conventions and Style guide.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.470703125,
          "content": "Copyright (c) 2016, The OpenThread Authors.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n3. Neither the name of the copyright holder nor the\n   names of its contributors may be used to endorse or promote products\n   derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 1.2939453125,
          "content": "OpenThread is an open source implementation of the Thread 1.4.0 Final Specification.\nThe Thread 1.4.0 Final Specification is promulgated by the Thread Group. The Thread\nGroup is a non-profit organization formed for the purposes of defining one or\nmore specifications, best practices, reference architectures, implementation\nguidelines and certification programs to promote the availability of compliant\nimplementations of the Thread protocol. Information on becoming a Member, including\ninformation about the benefits thereof, can be found at http://threadgroup.org.\n\nOpenThread is not affiliated with or endorsed by the Thread Group. Implementation\nof this OpenThread code does not assure compliance with the Thread 1.4.0 Final\nSpecification and does not convey the right to identify any final product as Thread\ncertified. Members of the Thread Group may hold patents and other intellectual\nproperty rights relating to the Thread 1.4.0 Final Specification, ownership and\nlicenses of which are subject to the Thread Group’s IP Policies, and not this license.\n\nThe included copyright to the OpenThread code is subject to the license in the\nLICENSE file, and all other rights and licenses are expressly reserved.\nNo warranty or assurance is made with respect to additional rights that may be\nrequired to implement this code.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.013671875,
          "content": "[![OpenThread][ot-logo]][ot-repo] [![Build][ot-gh-action-build-svg]][ot-gh-action-build] [![Simulation][ot-gh-action-simulation-svg]][ot-gh-action-simulation] [![Docker][ot-gh-action-docker-svg]][ot-gh-action-docker] [![Coverage Status][ot-codecov-svg]][ot-codecov]\n\n---\n\n# What is OpenThread?\n\nOpenThread released by Google is... <a href=\"https://www.threadgroup.org/What-is-Thread/Thread-Benefits#certifiedproducts\"> <img src=\"https://cdn.rawgit.com/openthread/openthread/ab4c4e1e/doc/images/certified.svg\" alt=\"Thread Certified Component\" width=\"150px\" align=\"right\"> </a>\n\n**...an open-source implementation of the [Thread](https://www.threadgroup.org/What-is-Thread/Overview) networking protocol.** Google Nest has released OpenThread to make the technology used in Nest products more broadly available to developers to accelerate the development of products for the connected home.\n\n**...OS and platform agnostic**, with a narrow platform abstraction layer and a small memory footprint, making it highly portable. It supports both system-on-chip (SoC) and network co-processor (NCP) designs.\n\n**...a Thread Certified Component**, implementing all features defined in the [Thread 1.4.0 specification](https://www.threadgroup.org/support#specifications), including all Thread networking layers (IPv6, 6LoWPAN, IEEE 802.15.4 with MAC security, Mesh Link Establishment, Mesh Routing) and device roles, as well as [Border Router](https://github.com/openthread/ot-br-posix) support.\n\nMore information about Thread can be found at [threadgroup.org](http://threadgroup.org/). Thread is a registered trademark of the Thread Group, Inc.\n\n[ot-repo]: https://github.com/openthread/openthread\n[ot-logo]: https://github.com/openthread/openthread/raw/main/doc/images/openthread_logo.png\n[ot-gh-action-build]: https://github.com/openthread/openthread/actions?query=workflow%3ABuild+branch%3Amain+event%3Apush\n[ot-gh-action-build-svg]: https://github.com/openthread/openthread/workflows/Build/badge.svg?branch=main&event=push\n[ot-gh-action-simulation]: https://github.com/openthread/openthread/actions?query=workflow%3ASimulation+branch%3Amain+event%3Apush\n[ot-gh-action-simulation-svg]: https://github.com/openthread/openthread/workflows/Simulation/badge.svg?branch=main&event=push\n[ot-gh-action-docker]: https://github.com/openthread/openthread/actions?query=workflow%3ADocker+branch%3Amain+event%3Apush\n[ot-gh-action-docker-svg]: https://github.com/openthread/openthread/workflows/Docker/badge.svg?branch=main&event=push\n[ot-codecov]: https://codecov.io/gh/openthread/openthread\n[ot-codecov-svg]: https://codecov.io/gh/openthread/openthread/branch/main/graph/badge.svg\n\n# Who supports OpenThread?\n\n<a href=\"https://www.amazon.com/\"><img src=\"https://github.com/openthread/openthread/raw/main/doc/images/ot-contrib-amazon.png\" alt=\"Amazon\" width=\"200px\"></a><a href=\"https://www.aqara.com/\"><img src=\"https://github.com/openthread/openthread/raw/main/doc/images/ot-contrib-aqara.png\" alt=\"Aqara\" width=\"200px\"></a><a href=\"https://www.arm.com/\"><img src=\"https://github.com/openthread/openthread/raw/main/doc/images/ot-contrib-arm.png\" alt=\"ARM\" width=\"200px\"></a><a href=\"https://www.cascoda.com/\"><img src=\"https://github.com/openthread/openthread/raw/main/doc/images/ot-contrib-cascoda.png\" alt=\"Cascoda\" width=\"200px\"></a><a href=\"https://www.eero.com/\"><img src=\"https://github.com/openthread/openthread/raw/main/doc/images/ot-contrib-eero.png\" alt=\"Eero\" width=\"200px\"></a><a href=\"https://www.espressif.com/\"><img src=\"https://github.com/openthread/openthread/raw/main/doc/images/ot-contrib-espressif-github.png\" alt=\"Espressif\" width=\"200px\"></a><a href=\"https://www.google.com/\"><img src=\"https://github.com/openthread/openthread/raw/main/doc/images/ot-contrib-google.png\" alt=\"Google\" width=\"200px\"></a><a href=\"https://www.infineon.com/\"><img src=\"https://github.com/openthread/openthread/raw/main/doc/images/ot-contrib-infineon.png\" alt=\"Infineon\" width=\"200px\"></a><a href=\"https://mmbnetworks.com/\"><img src=\"https://github.com/openthread/openthread/raw/main/doc/images/ot-contrib-mmb-networks.png\" alt=\"MMB Networks\" width=\"200px\"></a><a href=\"https://www.nabucasa.com/\"><img src=\"https://github.com/openthread/openthread/raw/main/doc/images/ot-contrib-nabu-casa.png\" alt=\"Nabu Casa\" width=\"200px\"></a><a href=\"https://www.nanoleaf.me/\"><img src=\"https://github.com/openthread/openthread/raw/main/doc/images/ot-contrib-nanoleaf.png\" alt=\"Nanoleaf\" width=\"200px\"></a><a href=\"http://www.nordicsemi.com/\"><img src=\"https://github.com/openthread/openthread/raw/main/doc/images/ot-contrib-nordic.png\" alt=\"Nordic\" width=\"200px\"></a><a href=\"http://www.nxp.com/\"><img src=\"https://github.com/openthread/openthread/raw/main/doc/images/ot-contrib-nxp.png\" alt=\"NXP\" width=\"200px\"></a><a href=\"http://www.qorvo.com/\"><img src=\"https://github.com/openthread/openthread/raw/main/doc/images/ot-contrib-qorvo.png\" alt=\"Qorvo\" width=\"200px\"></a><a href=\"https://www.qualcomm.com/\"><img src=\"https://github.com/openthread/openthread/raw/main/doc/images/ot-contrib-qc.png\" alt=\"Qualcomm\" width=\"200px\"></a><a href=\"https://www.samsung.com/\"><img src=\"https://github.com/openthread/openthread/raw/main/doc/images/ot-contrib-samsung.png\" alt=\"Samsung\" width=\"200px\"></a><a href=\"https://www.silabs.com/\"><img src=\"https://github.com/openthread/openthread/raw/main/doc/images/ot-contrib-silabs.png\" alt=\"Silicon Labs\" width=\"200px\"></a><a href=\"https://www.st.com/\"><img src=\"https://github.com/openthread/openthread/raw/main/doc/images/ot-contrib-stm.png\" alt=\"STMicroelectronics\" width=\"200px\"></a><a href=\"https://www.synopsys.com/\"><img src=\"https://github.com/openthread/openthread/raw/main/doc/images/ot-contrib-synopsys.png\" alt=\"Synopsys\" width=\"200px\"></a><a href=\"https://www.telink-semi.com/\"><img src=\"https://github.com/openthread/openthread/raw/main/doc/images/ot-contrib-telink-github.png\" alt=\"Telink Semiconductor\" width=\"200px\"></a><a href=\"https://www.ti.com/\"><img src=\"https://github.com/openthread/openthread/raw/main/doc/images/ot-contrib-ti.png\" alt=\"Texas Instruments\" width=\"200px\"></a><a href=\"https://www.zephyrproject.org/\"><img src=\"https://github.com/openthread/openthread/raw/main/doc/images/ot-contrib-zephyr.png\" alt=\"Zephyr Project\" width=\"200px\"></a>\n\n# Getting started\n\nAll end-user documentation and guides are located at [openthread.io](https://openthread.io). If you're looking to do things like...\n\n- Learn more about OpenThread features and enhancements\n- Use OpenThread in your products\n- Learn how to build and configure a Thread network\n- Port OpenThread to a new platform\n- Build an application on top of OpenThread\n- Certify a product using OpenThread\n\n...then [openthread.io](https://openthread.io) is the place for you.\n\n> Note: For users in China, end-user documentation is available at [openthread.google.cn](https://openthread.google.cn).\n\nIf you're interested in contributing to OpenThread, read on.\n\n# Contributing\n\nWe would love for you to contribute to OpenThread and help make it even better than it is today! See our [Contributing Guidelines](https://github.com/openthread/openthread/blob/main/CONTRIBUTING.md) for more information.\n\nContributors are required to abide by our [Code of Conduct](https://github.com/openthread/openthread/blob/main/CODE_OF_CONDUCT.md) and [Coding Conventions and Style Guide](https://github.com/openthread/openthread/blob/main/STYLE_GUIDE.md).\n\n# License\n\nOpenThread is released under the [BSD 3-Clause license](https://github.com/openthread/openthread/blob/main/LICENSE). See the [`LICENSE`](https://github.com/openthread/openthread/blob/main/LICENSE) file for more information.\n\nPlease only use the OpenThread name and marks when accurately referencing this software distribution. Do not use the marks in a way that suggests you are endorsed by or otherwise affiliated with Nest, Google, or The Thread Group.\n\n# Need help?\n\nOpenThread support is available on GitHub:\n\n- Bugs and feature requests — [submit to the Issue Tracker](https://github.com/openthread/openthread/issues)\n- Community Discussion - [ask questions, share ideas, and engage with other community members](https://github.com/openthread/openthread/discussions)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.2919921875,
          "content": "To report a security issue, please use [https://g.co/vulnz](https://g.co/vulnz). We use g.co/vulnz for our intake, and do coordination and disclosure here on GitHub (including using GitHub Security Advisory). The Google Security Team will respond within 5 working days of your report on g.co/vulnz.\n"
        },
        {
          "name": "STYLE_GUIDE.md",
          "type": "blob",
          "size": 13.3583984375,
          "content": "# OpenThread Coding Conventions and Style\n\n- [1 C and C++](#c-and-c)\n  - [1.1 Standards](#standards)\n  - [1.2 Conventions and Best Practices](#conventions-and-best-practices)\n  - [1.3 Tightly-constrained Systems and Shared Infrastructure](#tightly-constrained-systems-and-shared-infrastructure)\n  - [1.4 Format and Style](#format-and-style)\n  - [1.5 Comments](#comments)\n- [2 Python](#python)\n  - [2.1 Standards](#standards)\n  - [2.2 Conventions and Best Practices](#conventions-and-best-practices)\n  - [2.3 Format and Style](#format-and-style)\n\n# C and C++\n\n## Standards\n\n- C\n  - OpenThread uses and enforces the ISO9899:1999 (aka ISO C99, C99) C language standard as the minimum.\n- C++\n  - OpenThread uses and enforces the ISO14882:2011 (aka ISO C++11, C++11) C++ language standard as the minimum.\n- Extensions\n  - Wherever possible, toolchain-specific (e.g GCC/GNU) extensions or the use of later standards shall be avoided or shall be leveraged through toolchain-compatibility preprocessor macros.\n\n## Conventions and Best Practices\n\n### Language Independent\n\n- Inline functions should be used judiciously.\n  - The use of code in headers and, more specifically, the use of the non-local scope inline functions should be avoided. Exception: Simple setters and getters are fine since the compiler can efficiently optimize these and make their overhead as low as a direct data member access.\n- Return Statements\n  - There should be one return statement per free function or method at the end of the free function or method.\n- Non-local Goto\n  - There should be no calls to the functions `setjmp` or `longjmp`.\n- Local Goto\n  - There should be no calls to the C/C++ keyword goto. Exception: The use of local gotos for the purposes of common error handling blocks and single points of function return at the bottom of a function.\n- C Preprocessor\n  - Use of the C preprocessor should be limited to file inclusion and simple macros.\n  - Macros shall not be defined within a function or a block and should be defined at the top of a file.\n  - All `#else`, `#elif`, and `#endif` preprocessor directives shall reside in the same file as the `#if` or `#ifdef` directive to which they are related.\n  - All `#endif` directives equal to or greater than 20 lines away from the `#if` or `#ifdef` directive to which they are related shall be decorated by language comment indicating the conditional they are associated with.\n  - Preprocessor `#include` directives in a file shall only be preceded by other preprocessor directives or comments.\n  - Preprocessor `#include` directives shall use brace (“<”) and (“>”) style for all public headers, including C and C++ standard library, or other first- and third-party public library headers.\n  - Preprocessor `#include` directives should use double quote (‘“‘) and (‘“‘) style for all private or relative headers.\n  - Preprocessor `#include` directives should be grouped, ordered, or sorted as follows:\n    - If the unit is a core/private header file, `\"openthread-core-config.h\"` should be the first header file included.\n    - If the unit is a core/private `.c` or `.cpp` file:\n      - If the unit has a corresponding header file, the unit's corresponding header file should be included before any other header file.\n      - If the unit has no corresponding header file, then it should directly include `\"openthread-core-config.h\"` before any other header file.\n    - C++ Standard Library headers\n    - C Standard Library headers\n    - Third-party library headers\n    - First-party library headers\n    - Private or local headers\n    - Alphanumeric order within each subgroup\n  - The preprocessor shall not be used to redefine reserved language keywords.\n  - Unused code shall not be disabled by commenting it out with C- or C++-style comments or with preprocessor `#if 0 ... #endif` semantics.\n  - Use of the preprocessor token concatenation operator '##' should be avoided.\n  - The `undef` preprocessor directive should be avoided and shall never be used to undefine a symbol from a foreign module.\n- Object Scope\n  - Data objects shall be declared at the smallest possible level of scope.\n  - No declaration in an inner scope shall hide or shadow a declaration in an outer scope. Compiler flags shall be set to flag and enforce this.\n- Unbounded Recursion\n  - There shall be no direct or indirect use of unbounded recursive function calls.\n- Symmetric APIs\n  - Wherever possible and appropriate, particularly around the management of resources, APIs should be symmetric. For example, if there is a free function or object method that allocates a resource, then there should be one that deallocates it. If there is a free function or object method that opens a file or network stream, then there should be one that closes it.\n- Use C stdint.h or C++ cstdint for Plain Old Data Types\n  - Standard, scalar data types defined in stdint.h (C) or cstdint (C++) should be used for basic signed and unsigned integer types, especially when size and serialization to non-volatile storage or across a network is concerned. Examples of these are: `uint8_t`, `int8_t`, etc.\n- Constant Qualifiers\n  - Read-only methods, global variables, stack variables, or data members are read-only should be qualified using the C or C++ `const` qualifier.\n  - Pointers or references to read-only objects or storage, including but not limited to function parameters, should be qualified using the C or C++ `const` qualifier.\n- Header Include Guard\n  - All C and C++ headers shall use preprocessor header include guards.\n  - The terminating endif preprocessor directive shall have a comment, C or C++ depending on the header type, containing the preprocessor symbol introduced by the ifndef directive starting the guard.\n  - The symbol used for the guard should be the file name, converted to all uppercase, with any spaces (“ “) or dots (“.”) converted to underscores (“\\_”).\n- Function and Method Prototypes\n  - All void functions or methods shall explicitly declare and specify the void type keyword.\n- Unused parameters\n  - All unused parameters shall be declared as such using the `OT_UNUSED_VARIABLE` macro at the top of a function or method before all local variable declarations.\n\n### C\n\n- C / C++ Linkage Wrappers\n  - All header files intended to have C symbol linkage shall use “extern C” linkage wrappers.\n\n### C++\n\n- Prefer Passing Parameters by Reference to Pointer\n  - Unlike C, C++ offers an alternate way to alias data over and above a pointer, the reference, indicated by the & symbol. Where appropriate, the reference should be preferred to the pointer.\n- Passing Base Scalars\n  - Size- and call frequency-based considerations should be made when passing scalars as to whether they should be passed by value or by constant reference; however, pass-by-value should generally be preferred.\n- Eliminate Unnecessary Destructors\n  - The creation of empty or useless destructors should be avoided. Empty or useless destructors should be removed.\n- Default Parameters\n  - When you declare C++ free functions and object methods, you should avoid or minimize using default parameters.\n  - When you declare C++ virtual object methods, you shall avoid using default parameters.\n- Global and Scoped Static Construction\n  - There shall be no use of global, static or otherwise, object construction. The use of scoped static object construction should be avoided.\n- C++-style Casts\n  - Wherever possible and practical, C++ style casts should be used and preferred to the C style cast equivalent.\n- Avoid `using namespace` Statements in Headers\n  - The C++ `using namespace` statement should not be used outside of object scope inside header files.\n\n## Tightly-constrained Systems and Shared Infrastructure\n\n- Heap-based resource allocation should be avoided.\n- There shall be no direct or indirect use of recursive function calls.\n- The use of virtual functions should be avoided.\n- The use of the C++ Standard Library shall be avoided.\n- The use of the C++ Standard Template Library (STL) should be avoided or minimized.\n- The use of the C++ templates should be avoided or minimized.\n- Code shall not use exceptions.\n- Code shall not use C++ runtime type information (RTTI), including facilities that rely upon it, such as `dynamic_cast` and `typeid`.\n\n## Format and Style\n\n- OpenThread uses `script/make-pretty` to reformat code and enforce code format and style. `script/make-pretty check` build target is included in OpenThread's continuous integration and must pass before a pull request is merged.\n\n- `script/make-pretty` requires [clang-format v14.0.0](https://releases.llvm.org/download.html#14.0.0) for C/C++ and [yapf v0.31.0](https://github.com/google/yapf) for Python.\n\n### File Names\n\n- File names should match the names and types of what is described in the file. If a file contains many declarations and definitions, the author should choose the one that predominantly describes or that makes the most sense.\n- File contents and names should be limited in the scope of what they contain. It may also be possible that there is too much stuff in one file and you need to break it up into multiple files.\n- File names should be all lower case.\n- File extensions shall be indicative and appropriate for the type and usage of the source or header file.\n\n### Naming\n\n- Names should be descriptive but not overly so and they should give some idea of scope and should be selected such that _wrong code looks wrong_.\n- Names shall not give any idea of type, such as is done with System Hungarian notation.\n- Case\n  - C preprocessor symbols should be all uppercase.\n  - All OpenThread class, namespace, structure, method, function, enumeration, and type names in the C/C++ language shall be in _upper camel case_. Exception: the top level OpenThread namespace 'ot'.\n  - All OpenThread instantiated names of instances of classes, namespaces, structures, methods, functions, enumerations, and types as well as method and function parameters in the C++ language shall be in _lower camel case_.\n- Symbol Qualification\n  - All OpenThread C public data types and free functions should have `ot` prepended to their name.\n  - All OpenThread C++ code should be in the ‘ot’ top-level namespace.\n- Scope\n  - All global data shall have a `g` prepended to the name to denote global scope.\n  - All static data shall have a `s` prepended to the name to denote static scope.\n  - All class or structure data members shall have a `m` prepended to the name to denote member scope.\n  - All free function or method parameters should have an `a` prepended to the name to denote function parameter scope.\n  - All variables that do not have such prefixes shall be assumed to be function local scope.\n\n### White Space\n\n- Indentation shall be 4 space characters.\n- Conditionals shall always appear on a separate line from the code to execute as a result of the condition.\n- Scoped Variable declarations\n  - All scoped (i.e. stack) variable declarations should be placed together at the top of the enclosing scope in which they are used.\n  - There shall be an empty line after all such variable declarations.\n  - The names of all variable declarations should be left aligned.\n- Data Member declarations\n  - All data member declarations should be placed together.\n  - The names of all data member declarations should be left aligned.\n  - The data member declarations for C++ classes should be placed at the end or tail of the class.\n- Braces\n  - Braces should go on their own lines.\n  - Statements should never be on the same line following a closing brace.\n- Keywords\n  - There should be a single space after language-reserved keywords (for, while, if, etc).\n\n## Comments\n\n- All code should use Doxygen to:\n  - Detail what the various source and header files are and how they fit into the broader context.\n  - Detail what the various C++ namespaces are.\n  - Detail what the constants, C preprocessor definitions, and enumerations are.\n  - Detail what the globals are and how they are to be used.\n  - Detail what the free function and object / class methods are and how they are to be used, what their parameters are, and what their return values are.\n  - Detail any other important technical information or theory of operation unique and relevant to the stack that is not otherwise captured in architecture, design, or protocol documentation.\n- Every public, and ideally private, free function and class method should likewise have a prologue comment that:\n  - Briefly describes what it is and what it does.\n  - Describes in detail, optionally, what it is and what it does.\n  - Describes the purpose, function, and influence of each parameter as well as whether it is an input, an output, or both.\n  - Describes the return value, if present, and the expected range or constraints of it.\n\nIf your description is longer than 120 characters, continue the comment on the next line:\n\n```\n * @brief\n *   Records the history of different events, for example RX and TX messages or network info changes. All tracked\n *   entries are timestamped.\n```\n\n# Python\n\n## Standards\n\n- OpenThread uses and enforces Python 3.\n\n## Conventions and Best Practices\n\n- Run `pylint` over your code. `pylint` is a tool for finding bugs and style problems in Python source code. It finds problems that are typically caught by a compiler for less dynamic languages like C and C++. Because of the dynamic nature of Python, some warnings may be incorrect; however, spurious warnings should be fairly infrequent.\n\n## Format and Style\n\n- All code should adhere to [Google Python Style Guide](https://google.github.io/styleguide/pyguide.html) except maximum line length being 119.\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "script",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "zephyr",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}