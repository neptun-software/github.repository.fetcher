{
  "metadata": {
    "timestamp": 1736565281363,
    "page": 93,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/highway",
      "stars": 4329,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".bazelrc",
          "type": "blob",
          "size": 0.0224609375,
          "content": "common --enable_bzlmod\n"
        },
        {
          "name": ".bcr",
          "type": "tree",
          "content": null
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.0205078125,
          "content": "BasedOnStyle: Google\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1162109375,
          "content": "build\nbazel-bin\nbazel-highway\nbazel-out\nbazel-testlogs\nMODULE.bazel.lock\ndocs/g3doc/*\ndocs/html/*\ndocs/md/*\ndocs/rst/*\n"
        },
        {
          "name": "BUILD",
          "type": "blob",
          "size": 15.8828125,
          "content": "# Placeholder#1 for Guitar, do not remove\nload(\"@bazel_skylib//lib:selects.bzl\", \"selects\")\nload(\"@rules_license//rules:license.bzl\", \"license\")\n\nload(\"@rules_cc//cc:defs.bzl\", \"cc_test\")\n# Placeholder#2 for Guitar, do not remove\n\npackage(\n    default_applicable_licenses = [\"//:license\"],\n    default_visibility = [\"//visibility:public\"],\n)\n\nlicense(\n    name = \"license\",\n    package_name = \"highway\",\n    license_kinds = [\"@rules_license//licenses/generic:notice\"],\n)\n\n# Dual-licensed Apache 2 and 3-clause BSD.\nlicenses([\"notice\"])\n\nexports_files([\"LICENSE\"])\n\n# Detect compiler:\nconfig_setting(\n    name = \"compiler_clang\",\n    flag_values = {\"@bazel_tools//tools/cpp:compiler\": \"clang\"},\n)\n\nconfig_setting(\n    name = \"compiler_clangcl\",\n    flag_values = {\"@bazel_tools//tools/cpp:compiler\": \"lexan\"},\n)\n\nconfig_setting(\n    name = \"compiler_msvc_actual\",\n    flag_values = {\"@bazel_tools//tools/cpp:compiler\": \"msvc\"},\n)\n\n# The above is insufficient for Bazel on Windows, which does not seem to\n# detect/set a compiler flag. This workaround prevents compile errors due to\n# passing clang-only warning flags to MSVC.\nconfig_setting(\n    name = \"compiler_msvc_cpu\",\n    values = {\n        \"cpu\": \"x64_windows\",\n    },\n)\n\nselects.config_setting_group(\n    name = \"compiler_msvc\",\n    match_any = [\n        \":compiler_msvc_actual\",\n        \":compiler_msvc_cpu\",\n    ],\n)\n\nconfig_setting(\n    name = \"compiler_emscripten\",\n    constraint_values = [\n        \"@platforms//cpu:wasm32\",\n    ],\n)\n\n# See https://github.com/bazelbuild/bazel/issues/12707\nconfig_setting(\n    name = \"compiler_gcc_bug\",\n    flag_values = {\n        \"@bazel_tools//tools/cpp:compiler\": \"compiler\",\n    },\n)\n\nconfig_setting(\n    name = \"compiler_gcc_actual\",\n    flag_values = {\n        \"@bazel_tools//tools/cpp:compiler\": \"gcc\",\n    },\n)\n\nselects.config_setting_group(\n    name = \"compiler_gcc\",\n    match_any = [\n        \":compiler_gcc_bug\",\n        \":compiler_gcc_actual\",\n    ],\n)\n\n# Additional warnings for Clang OR GCC (skip for MSVC)\nCLANG_GCC_COPTS = [\n    \"-Wunused\",\n    \"-Wextra-semi\",\n    \"-Wunreachable-code\",\n    \"-Wshadow\",\n]\n\n# Warnings supported by Clang and Clang-cl\nCLANG_OR_CLANGCL_OPTS = CLANG_GCC_COPTS + [\n    \"-Wfloat-overflow-conversion\",\n    \"-Wfloat-zero-conversion\",\n    \"-Wfor-loop-analysis\",\n    \"-Wgnu-redeclared-enum\",\n    \"-Winfinite-recursion\",\n    \"-Wliteral-conversion\",\n    \"-Wno-c++98-compat\",\n    \"-Wno-unused-command-line-argument\",\n    \"-Wprivate-header\",\n    \"-Wself-assign\",\n    \"-Wstring-conversion\",\n    \"-Wtautological-overlap-compare\",\n    \"-Wthread-safety-analysis\",\n    \"-Wundefined-func-template\",\n    \"-Wunreachable-code-aggressive\",\n    \"-Wunused-comparison\",\n]\n\n# Warnings only supported by Clang, but not Clang-cl\nCLANG_ONLY_COPTS = CLANG_OR_CLANGCL_OPTS + [\n    # Do not treat the third_party headers as system headers when building\n    # highway - the errors are pertinent.\n    \"--no-system-header-prefix=third_party/highway\",\n]\n\nCOPTS = select({\n    \":compiler_msvc\": [],\n    \":compiler_gcc\": CLANG_GCC_COPTS,\n    \":compiler_clangcl\": CLANG_OR_CLANGCL_OPTS,\n    # Default to clang because compiler detection only works in Bazel\n    \"//conditions:default\": CLANG_ONLY_COPTS,\n}) + select({\n    \"@platforms//cpu:riscv64\": [\n        \"-march=rv64gcv1p0\",\n        \"-menable-experimental-extensions\",\n    ],\n    \"//conditions:default\": [\n    ],\n})\n\nDEFINES = select({\n    \":compiler_msvc\": [\"HWY_SHARED_DEFINE\"],\n    \":compiler_clangcl\": [\"HWY_SHARED_DEFINE\"],\n    \"//conditions:default\": [],\n})\n\n# Unused on Bazel builds, where this is not defined/known; Copybara replaces\n# usages with an empty list.\nCOMPAT = [\n    \"//buildenv/target:non_prod\",  # includes mobile/vendor.\n]\n\n# WARNING: changing flags such as HWY_DISABLED_TARGETS may break users without\n# failing integration tests, if the machine running tests does not support the\n# newly enabled instruction set, or the failure is only caught by sanitizers\n# which do not run in CI.\n\n# NOTE: when adding a new dependency on the Highway library, please add your\n# test to the highway.users list in highway.blueprint.\ncc_library(\n    name = \"hwy\",\n    srcs = [\n        \"hwy/abort.cc\",\n        \"hwy/aligned_allocator.cc\",\n        \"hwy/per_target.cc\",\n        \"hwy/print.cc\",\n        \"hwy/targets.cc\",\n    ],\n    # Normal headers with include guards\n    hdrs = [\n        \"hwy/abort.h\",\n        \"hwy/aligned_allocator.h\",\n        \"hwy/base.h\",\n        \"hwy/cache_control.h\",\n        \"hwy/detect_compiler_arch.h\",  # private\n        \"hwy/print.h\",\n    ],\n    compatible_with = [],\n    copts = COPTS,\n    defines = DEFINES,\n    local_defines = [\"hwy_EXPORTS\"],\n    textual_hdrs = [\n        # These are textual because config macros influence them:\n        \"hwy/detect_targets.h\",  # private\n        \"hwy/targets.h\",\n        # This .cc file #includes itself through foreach_target.h\n        \"hwy/per_target.cc\",\n        # End of list\n        \"hwy/highway.h\",  # public\n        \"hwy/foreach_target.h\",  # public\n        \"hwy/per_target.h\",  # public\n        \"hwy/print-inl.h\",  # public\n        \"hwy/highway_export.h\",  # public\n        \"hwy/ops/arm_neon-inl.h\",\n        \"hwy/ops/arm_sve-inl.h\",\n        \"hwy/ops/emu128-inl.h\",\n        \"hwy/ops/generic_ops-inl.h\",\n        \"hwy/ops/inside-inl.h\",\n        \"hwy/ops/scalar-inl.h\",\n        \"hwy/ops/set_macros-inl.h\",\n        \"hwy/ops/shared-inl.h\",\n        \"hwy/ops/x86_128-inl.h\",\n        \"hwy/ops/x86_256-inl.h\",\n        \"hwy/ops/x86_512-inl.h\",\n        \"hwy/ops/x86_avx3-inl.h\",\n        # Select avoids recompiling native arch if only non-native changed\n    ] + select({\n        \":compiler_emscripten\": [\n            \"hwy/ops/wasm_128-inl.h\",\n            \"hwy/ops/wasm_256-inl.h\",\n        ],\n        \"//conditions:default\": [],\n    }) + select({\n        \"@platforms//cpu:riscv64\": [\"hwy/ops/rvv-inl.h\"],\n        \"//conditions:default\": [],\n    }),\n)\n\ncc_library(\n    name = \"stats\",\n    srcs = [\n        \"hwy/stats.cc\",\n    ],\n    hdrs = [\n        \"hwy/stats.h\",\n    ],\n    compatible_with = [],\n    copts = COPTS,\n    deps = [\":hwy\"],\n)\n\ncc_library(\n    name = \"nanobenchmark\",\n    srcs = [\n        \"hwy/nanobenchmark.cc\",\n        \"hwy/timer.cc\",\n    ],\n    hdrs = [\n        \"hwy/nanobenchmark.h\",\n        \"hwy/robust_statistics.h\",\n        \"hwy/timer.h\",\n    ],\n    compatible_with = [],\n    copts = COPTS,\n    local_defines = [\"hwy_EXPORTS\"],\n    textual_hdrs = [\n        \"hwy/timer-inl.h\",\n    ],\n    deps = [\":hwy\"],\n)\n\ncc_library(\n    name = \"bit_set\",\n    hdrs = [\"hwy/bit_set.h\"],\n    compatible_with = [],\n    copts = COPTS,\n    deps = [\n        \":hwy\",  # HWY_ASSERT\n    ],\n)\n\ncc_library(\n    name = \"perf_counters\",\n    srcs = [\"hwy/perf_counters.cc\"],\n    hdrs = [\"hwy/perf_counters.h\"],\n    compatible_with = [],\n    copts = COPTS,\n    deps = [\n        \":bit_set\",\n        \":hwy\",\n        \":nanobenchmark\",\n    ],\n)\n\ncc_library(\n    name = \"profiler\",\n    hdrs = [\n        \"hwy/profiler.h\",\n    ],\n    compatible_with = [],\n    copts = COPTS,\n    deps = [\n        \":hwy\",\n        \":nanobenchmark\",\n        # \"//hwy/contrib/sort:vqsort\",\n    ],\n)\n\ncc_binary(\n    name = \"profiler_example\",\n    srcs = [\"hwy/examples/profiler_example.cc\"],\n    copts = COPTS,\n    deps = [\n        \":hwy\",\n        \":nanobenchmark\",\n        \":profiler\",\n    ],\n)\n\ncc_library(\n    name = \"algo\",\n    compatible_with = [],\n    copts = COPTS,\n    textual_hdrs = [\n        \"hwy/contrib/algo/copy-inl.h\",\n        \"hwy/contrib/algo/find-inl.h\",\n        \"hwy/contrib/algo/transform-inl.h\",\n    ],\n    deps = [\n        \":hwy\",\n    ],\n)\n\ncc_library(\n    name = \"bit_pack\",\n    compatible_with = [],\n    copts = COPTS,\n    textual_hdrs = [\n        \"hwy/contrib/bit_pack/bit_pack-inl.h\",\n    ],\n    deps = [\n        \":hwy\",\n    ],\n)\n\ncc_library(\n    name = \"dot\",\n    compatible_with = [],\n    copts = COPTS,\n    textual_hdrs = [\n        \"hwy/contrib/dot/dot-inl.h\",\n    ],\n    deps = [\n        \":hwy\",\n    ],\n)\n\ncc_library(\n    name = \"topology\",\n    srcs = [\"hwy/contrib/thread_pool/topology.cc\"],\n    hdrs = [\"hwy/contrib/thread_pool/topology.h\"],\n    compatible_with = [],\n    copts = COPTS,\n    deps = [\n        \":bit_set\",\n        \":hwy\",  # HWY_ASSERT\n    ],\n)\n\ncc_library(\n    name = \"thread_pool\",\n    hdrs = [\n        \"hwy/contrib/thread_pool/futex.h\",\n        \"hwy/contrib/thread_pool/thread_pool.h\",\n    ],\n    compatible_with = [],\n    copts = COPTS,\n    deps = [\n        \":hwy\",  # HWY_ASSERT\n        \":nanobenchmark\",\n        \":profiler\",\n        \":stats\",\n        \":topology\",\n    ],\n)\n\ncc_library(\n    name = \"matvec\",\n    compatible_with = [],\n    copts = COPTS,\n    textual_hdrs = [\n        \"hwy/contrib/matvec/matvec-inl.h\",\n    ],\n    deps = [\n        \":hwy\",\n        \":nanobenchmark\",\n        \":thread_pool\",\n    ],\n)\n\ncc_library(\n    name = \"image\",\n    srcs = [\n        \"hwy/contrib/image/image.cc\",\n    ],\n    hdrs = [\n        \"hwy/contrib/image/image.h\",\n    ],\n    compatible_with = [],\n    copts = COPTS,\n    local_defines = [\"hwy_contrib_EXPORTS\"],\n    deps = [\n        \":hwy\",\n    ],\n)\n\ncc_library(\n    name = \"math\",\n    compatible_with = [],\n    copts = COPTS,\n    textual_hdrs = [\n        \"hwy/contrib/math/math-inl.h\",\n    ],\n    deps = [\n        \":hwy\",\n    ],\n)\n\ncc_library(\n    name = \"random\",\n    compatible_with = [],\n    copts = COPTS,\n    textual_hdrs = [\n        \"hwy/contrib/random/random-inl.h\",\n    ],\n    deps = [\n        \":hwy\",\n    ],\n)\n\ncc_library(\n    name = \"unroller\",\n    compatible_with = [],\n    copts = COPTS,\n    textual_hdrs = [\n        \"hwy/contrib/unroller/unroller-inl.h\",\n    ],\n    deps = [\n        \":hwy\",\n    ],\n)\n\n# Everything required for tests that use Highway.\ncc_library(\n    name = \"hwy_test_util\",\n    srcs = [\"hwy/tests/test_util.cc\"],\n    hdrs = [\"hwy/tests/test_util.h\"],\n    compatible_with = [],\n    copts = COPTS,\n    local_defines = [\"hwy_test_EXPORTS\"],\n    textual_hdrs = [\n        \"hwy/tests/test_util-inl.h\",\n        \"hwy/tests/hwy_gtest.h\",\n    ],\n    # Must not depend on a gtest variant, which can conflict with the\n    # GUNIT_INTERNAL_BUILD_MODE defined by the test.\n    deps = [\n        \":hwy\",\n        \":nanobenchmark\",\n    ],\n)\n\ncc_binary(\n    name = \"benchmark\",\n    srcs = [\"hwy/examples/benchmark.cc\"],\n    copts = COPTS,\n    deps = [\n        \":hwy\",\n        \":nanobenchmark\",\n    ],\n)\n\ncc_library(\n    name = \"skeleton\",\n    srcs = [\"hwy/examples/skeleton.cc\"],\n    hdrs = [\"hwy/examples/skeleton.h\"],\n    copts = COPTS,\n    local_defines = [\"hwy_EXPORTS\"],\n    textual_hdrs = [\"hwy/examples/skeleton-inl.h\"],\n    deps = [\n        \":hwy\",\n    ],\n)\n\ncc_test(\n    name = \"list_targets\",\n    size = \"small\",\n    srcs = [\"hwy/tests/list_targets.cc\"],\n    deps = [\":hwy\"],\n)\n\n# path, name\nHWY_TESTS = [\n    (\"hwy/contrib/algo/\", \"copy_test\"),\n    (\"hwy/contrib/algo/\", \"find_test\"),\n    (\"hwy/contrib/algo/\", \"transform_test\"),\n    (\"hwy/contrib/bit_pack/\", \"bit_pack_test\"),\n    (\"hwy/contrib/dot/\", \"dot_test\"),\n    (\"hwy/contrib/image/\", \"image_test\"),\n    (\"hwy/contrib/math/\", \"math_test\"),\n    (\"hwy/contrib/random/\", \"random_test\"),\n    (\"hwy/contrib/matvec/\", \"matvec_test\"),\n    (\"hwy/contrib/thread_pool/\", \"thread_pool_test\"),\n    (\"hwy/contrib/thread_pool/\", \"topology_test\"),\n    (\"hwy/contrib/unroller/\", \"unroller_test\"),\n    # contrib/sort has its own BUILD, we also add sort_test to GUITAR_TESTS.\n    # To run bench_sort, specify --test=hwy/contrib/sort:bench_sort.\n    (\"hwy/examples/\", \"skeleton_test\"),\n    (\"hwy/\", \"abort_test\"),\n    (\"hwy/\", \"aligned_allocator_test\"),\n    (\"hwy/\", \"base_test\"),\n    (\"hwy/\", \"bit_set_test\"),\n    (\"hwy/\", \"highway_test\"),\n    (\"hwy/\", \"nanobenchmark_test\"),\n    (\"hwy/\", \"perf_counters_test\"),\n    (\"hwy/\", \"targets_test\"),\n    (\"hwy/tests/\", \"arithmetic_test\"),\n    (\"hwy/tests/\", \"bit_permute_test\"),\n    (\"hwy/tests/\", \"blockwise_combine_test\"),\n    (\"hwy/tests/\", \"blockwise_shift_test\"),\n    (\"hwy/tests/\", \"blockwise_test\"),\n    (\"hwy/tests/\", \"cast_test\"),\n    (\"hwy/tests/\", \"combine_test\"),\n    (\"hwy/tests/\", \"compare_test\"),\n    (\"hwy/tests/\", \"compress_test\"),\n    (\"hwy/tests/\", \"concat_test\"),\n    (\"hwy/tests/\", \"convert_test\"),\n    (\"hwy/tests/\", \"count_test\"),\n    (\"hwy/tests/\", \"crypto_test\"),\n    (\"hwy/tests/\", \"demote_test\"),\n    (\"hwy/tests/\", \"div_test\"),\n    (\"hwy/tests/\", \"dup128_vec_test\"),\n    (\"hwy/tests/\", \"expand_test\"),\n    (\"hwy/tests/\", \"float_test\"),\n    (\"hwy/tests/\", \"fma_test\"),\n    (\"hwy/tests/\", \"foreach_vec_test\"),\n    (\"hwy/tests/\", \"if_test\"),\n    (\"hwy/tests/\", \"in_range_float_to_int_conv_test\"),\n    (\"hwy/tests/\", \"interleaved_test\"),\n    (\"hwy/tests/\", \"logical_test\"),\n    (\"hwy/tests/\", \"mask_combine_test\"),\n    (\"hwy/tests/\", \"mask_convert_test\"),\n    (\"hwy/tests/\", \"mask_mem_test\"),\n    (\"hwy/tests/\", \"mask_set_test\"),\n    (\"hwy/tests/\", \"mask_slide_test\"),\n    (\"hwy/tests/\", \"mask_test\"),\n    (\"hwy/tests/\", \"masked_arithmetic_test\"),\n    (\"hwy/tests/\", \"masked_minmax_test\"),\n    (\"hwy/tests/\", \"memory_test\"),\n    (\"hwy/tests/\", \"minmax_test\"),\n    (\"hwy/tests/\", \"mul_by_pow2_test\"),\n    (\"hwy/tests/\", \"mul_pairwise_test\"),\n    (\"hwy/tests/\", \"mul_test\"),\n    (\"hwy/tests/\", \"reduction_test\"),\n    (\"hwy/tests/\", \"resize_test\"),\n    (\"hwy/tests/\", \"reverse_test\"),\n    (\"hwy/tests/\", \"rotate_test\"),\n    (\"hwy/tests/\", \"saturated_test\"),\n    (\"hwy/tests/\", \"shift_test\"),\n    (\"hwy/tests/\", \"shuffle4_test\"),\n    (\"hwy/tests/\", \"sign_test\"),\n    (\"hwy/tests/\", \"slide_up_down_test\"),\n    (\"hwy/tests/\", \"sums_abs_diff_test\"),\n    (\"hwy/tests/\", \"swizzle_block_test\"),\n    (\"hwy/tests/\", \"swizzle_test\"),\n    (\"hwy/tests/\", \"table_test\"),\n    (\"hwy/tests/\", \"test_util_test\"),\n    (\"hwy/tests/\", \"truncate_test\"),\n    (\"hwy/tests/\", \"tuple_test\"),\n    (\"hwy/tests/\", \"widen_mul_test\"),\n]\n\nHWY_TEST_COPTS = select({\n    \":compiler_msvc\": [],\n    \"//conditions:default\": [\n        # gTest triggers this warning (which is enabled by the\n        # extra-semi in COPTS), so we need to disable it here,\n        # but it's still enabled for :hwy.\n        \"-Wno-c++98-compat-extra-semi\",\n    ],\n})\n\nHWY_TEST_DEPS = [\n    \":algo\",\n    \":bit_pack\",\n    \":bit_set\",\n    \":dot\",\n    \":hwy_test_util\",\n    \":hwy\",\n    \":image\",\n    \":math\",\n    \":matvec\",\n    \":nanobenchmark\",\n    \":perf_counters\",\n    \":random\",\n    \":skeleton\",\n    \":thread_pool\",\n    \":topology\",\n    \":unroller\",\n    \"//hwy/contrib/sort:vqsort\",\n] + select({\n    \":compiler_msvc\": [],\n    \"//conditions:default\": [\"@com_google_googletest//:gtest_main\"],\n})\n\n[\n    [\n        cc_test(\n            name = test,\n            size = \"medium\",\n            timeout = \"long\",  # default moderate is not enough for math_test\n            srcs = [\n                subdir + test + \".cc\",\n            ],\n            copts = COPTS + HWY_TEST_COPTS,\n            # Fixes OOM for matvec_test on RVV.\n            exec_properties = select({\n                \"@platforms//cpu:riscv64\": {\"mem\": \"16g\"},\n                \"//conditions:default\": None,\n            }),\n            features = select({\n                \"@platforms//cpu:riscv64\": [\"fully_static_link\"],\n                \"//conditions:default\": [],\n            }),\n            linkopts = select({\n                \":compiler_emscripten\": [\n                    \"-s ASSERTIONS=2\",\n                    \"-s ENVIRONMENT=node,shell,web\",\n                    \"-s ERROR_ON_UNDEFINED_SYMBOLS=1\",\n                    \"-s EXIT_RUNTIME=1\",\n                    \"-s ALLOW_MEMORY_GROWTH=1\",\n                    \"--pre-js $(location :preamble.js.lds)\",\n                ],\n                \"//conditions:default\": [],\n            }),\n            linkstatic = select({\n                \"@platforms//cpu:riscv64\": True,\n                \"//conditions:default\": False,\n            }),\n            local_defines = [\"HWY_IS_TEST\"],\n            # Placeholder for malloc, do not remove\n            # for test_suite.\n            tags = [\"hwy_ops_test\"],\n            deps = HWY_TEST_DEPS + select({\n                \":compiler_emscripten\": [\":preamble.js.lds\"],\n                \"//conditions:default\": [],\n            }),\n        ),\n    ]\n    for subdir, test in HWY_TESTS\n]\n\n# For manually building the tests we define here (:all does not work in --config=msvc)\ntest_suite(\n    name = \"hwy_ops_tests\",\n    tags = [\"hwy_ops_test\"],\n)\n\n# Placeholder for integration test, do not remove\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 27.9248046875,
          "content": "# Copyright 2019 Google LLC\n# Copyright 2024 Arm Limited and/or its affiliates <open-source-office@arm.com>\n# SPDX-License-Identifier: Apache-2.0\n# SPDX-License-Identifier: BSD-3-Clause\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\ncmake_minimum_required(VERSION 3.10)\n\n# Set PIE flags for POSITION_INDEPENDENT_CODE targets, added in 3.14.\nif(POLICY CMP0083)\n  cmake_policy(SET CMP0083 NEW)\nendif()\n\n# Workaround for 3.19 raising error 'IMPORTED_LOCATION not set for imported\n# target \"GTest::gtest_main\"'.\nif(POLICY CMP0111)\n  cmake_policy(SET CMP0111 OLD)\nendif()\n\n# Starting with GCC-13, we want to make sure to remove gnu extension (ie.\n# explicit -std=c++17 instead of implicit `gnu++17`)\n# Without this cmake property, CMAKE_CXX_EXTENSIONS=OFF was not properly\n# considered\nif(POLICY CMP0128)\n  cmake_policy(SET CMP0128 NEW)\nendif()\n\nproject(hwy VERSION 1.2.0)  # Keep in sync with base.h version\n# `hwy` is lowercase to handle find_package() in Config mode:\nset(namespace \"${PROJECT_NAME}::\")\n\n# Directly define the ABI version from the cmake project() version values:\nset(LIBRARY_VERSION \"${hwy_VERSION}\")\nset(LIBRARY_SOVERSION ${hwy_VERSION_MAJOR})\n\nset(CMAKE_CXX_EXTENSIONS OFF)\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\n# Search for Atomics implementation:\nfind_package(Atomics REQUIRED)\n\n# Enabled PIE binaries by default if supported.\ninclude(CheckPIESupported OPTIONAL RESULT_VARIABLE CHECK_PIE_SUPPORTED)\nif(CHECK_PIE_SUPPORTED)\n  check_pie_supported(LANGUAGES CXX)\n  if(CMAKE_CXX_LINK_PIE_SUPPORTED)\n    set(CMAKE_POSITION_INDEPENDENT_CODE TRUE)\n  endif()\nendif()\n\ninclude(GNUInstallDirs)\n\nif (NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE RelWithDebInfo)\nendif()\n\n# The following is only required with GCC < 6.1.0 or CLANG < 16.0\nset(HWY_CMAKE_ARM7 OFF CACHE BOOL \"Set copts for Armv7 with NEON (requires vfpv4)?\")\n\n# This must be set on 32-bit x86 with GCC < 13.1, otherwise math_test will be\n# skipped. For GCC 13.1+, you can also build with -fexcess-precision=standard.\nset(HWY_CMAKE_SSE2 OFF CACHE BOOL \"Set SSE2 as baseline for 32-bit x86?\")\n\n# Currently this will compile the entire codebase with `-march=rv<XLEN>gcv1p0`:\nset(HWY_CMAKE_RVV ON CACHE BOOL \"Set copts for RISCV with RVV?\")\n\n# Unconditionally adding -Werror risks breaking the build when new warnings\n# arise due to compiler/platform changes. Enable this in CI/tests.\nset(HWY_WARNINGS_ARE_ERRORS OFF CACHE BOOL \"Add -Werror flag?\")\n\n# Experimental support for header-only builds\nset(HWY_CMAKE_HEADER_ONLY OFF CACHE BOOL \"Change to header-only?\")\n\nset(HWY_ENABLE_CONTRIB ON CACHE BOOL \"Include contrib/\")\nset(HWY_ENABLE_EXAMPLES ON CACHE BOOL \"Build examples\")\nset(HWY_ENABLE_INSTALL ON CACHE BOOL \"Install library\")\nset(HWY_ENABLE_TESTS ON CACHE BOOL \"Enable HWY tests\")\n\nif (MSVC)\nset(HWY_TEST_STANDALONE ON CACHE BOOL \"Disable use of googletest\")\nelse()\nset(HWY_TEST_STANDALONE OFF CACHE BOOL \"Disable use of googletest\")\nendif()\n\nif (NOT DEFINED CMAKE_CXX_STANDARD)\n  if (\"cxx_std_17\" IN_LIST CMAKE_CXX_COMPILE_FEATURES)\n    set(HWY_CXX_STD_TGT_COMPILE_FEATURE cxx_std_17)\n  else()\n    if (\"cxx_std_14\" IN_LIST CMAKE_CXX_COMPILE_FEATURES)\n      set(HWY_CXX_STD_TGT_COMPILE_FEATURE cxx_std_14)\n    else()\n      set(HWY_CXX_STD_TGT_COMPILE_FEATURE cxx_std_11)\n    endif()\n  endif()\nelse()\n  if (CMAKE_CXX_STANDARD GREATER_EQUAL 14 AND CMAKE_CXX_STANDARD LESS 98)\n    if (CMAKE_CXX_STANDARD GREATER_EQUAL 17)\n      set(HWY_CXX_STD_TGT_COMPILE_FEATURE cxx_std_17)\n    else()\n      set(HWY_CXX_STD_TGT_COMPILE_FEATURE cxx_std_14)\n    endif()\n  else()\n    set(HWY_CXX_STD_TGT_COMPILE_FEATURE cxx_std_11)\n  endif()\nendif()\n\ninclude(CheckCXXSourceCompiles)\ncheck_cxx_source_compiles(\n   \"int main() {\n      #if !defined(__EMSCRIPTEN__)\n      static_assert(false, \\\"__EMSCRIPTEN__ is not defined\\\");\n      #endif\n      return 0;\n    }\"\n  HWY_EMSCRIPTEN\n)\n\ncheck_cxx_source_compiles(\n   \"int main() {\n      #if !defined(__riscv)\n      static_assert(false, \\\"__riscv is not defined\\\");\n      #endif\n      return 0;\n    }\"\n  HWY_RISCV\n)\n\nif (HWY_RISCV OR CMAKE_CXX_COMPILER_ARCHITECTURE_ID MATCHES \"RISCV32|RISCV64|RISCV128\" OR CMAKE_SYSTEM_PROCESSOR MATCHES \"riscv32|riscv64|riscv128\")\n  include(CheckCSourceCompiles)\n  check_c_source_compiles(\"\n  #if __riscv_xlen == 64\n  int main() { return 0; }\n  #else\n  #error Not RISCV-64\n  #endif\n  \" IS_RISCV_XLEN_64)\n\n  check_c_source_compiles(\"\n  #if __riscv_xlen == 32\n  int main() { return 0; }\n  #else\n  #error Not RISCV-32\n  #endif\n  \" IS_RISCV_XLEN_32)\n\n  if(IS_RISCV_XLEN_32)\n    set(RISCV_XLEN 32)\n  elseif(IS_RISCV_XLEN_64)\n    set(RISCV_XLEN 64)\n  else()\n    message(WARNING \"Unable to determine RISC-V XLEN\")\n  endif()\nendif()\n\nif (HWY_ENABLE_CONTRIB)\n# Glob all the traits so we don't need to modify this file when adding\n# additional special cases.\nfile(GLOB HWY_CONTRIB_SOURCES \"hwy/contrib/sort/vqsort_*.cc\")\nlist(APPEND HWY_CONTRIB_SOURCES\n    hwy/contrib/bit_pack/bit_pack-inl.h\n    hwy/contrib/dot/dot-inl.h\n    hwy/contrib/image/image.cc\n    hwy/contrib/image/image.h\n    hwy/contrib/math/math-inl.h\n    hwy/contrib/matvec/matvec-inl.h\n    hwy/contrib/random/random-inl.h\n    hwy/contrib/sort/order.h\n    hwy/contrib/sort/shared-inl.h\n    hwy/contrib/sort/sorting_networks-inl.h\n    hwy/contrib/sort/traits-inl.h\n    hwy/contrib/sort/traits128-inl.h\n    hwy/contrib/sort/vqsort-inl.h\n    hwy/contrib/sort/vqsort.cc\n    hwy/contrib/sort/vqsort.h\n    hwy/contrib/thread_pool/futex.h\n    hwy/contrib/thread_pool/thread_pool.h\n    hwy/contrib/thread_pool/topology.cc\n    hwy/contrib/thread_pool/topology.h\n    hwy/contrib/algo/copy-inl.h\n    hwy/contrib/algo/find-inl.h\n    hwy/contrib/algo/transform-inl.h\n    hwy/contrib/unroller/unroller-inl.h\n)\nendif()  # HWY_ENABLE_CONTRIB\n\nset(HWY_SOURCES\n    hwy/abort.h\n    hwy/aligned_allocator.h\n    hwy/base.h\n    hwy/cache_control.h\n    hwy/detect_compiler_arch.h  # private\n    hwy/detect_targets.h  # private\n    hwy/foreach_target.h\n    hwy/highway_export.h\n    hwy/highway.h\n    hwy/nanobenchmark.h\n    hwy/ops/arm_neon-inl.h\n    hwy/ops/arm_sve-inl.h\n    hwy/ops/emu128-inl.h\n    hwy/ops/generic_ops-inl.h\n    hwy/ops/inside-inl.h\n    hwy/ops/ppc_vsx-inl.h\n    hwy/ops/rvv-inl.h\n    hwy/ops/scalar-inl.h\n    hwy/ops/set_macros-inl.h\n    hwy/ops/shared-inl.h\n    hwy/ops/wasm_128-inl.h\n    hwy/ops/x86_128-inl.h\n    hwy/ops/x86_256-inl.h\n    hwy/ops/x86_512-inl.h\n    hwy/ops/x86_avx3-inl.h\n    hwy/per_target.h\n    hwy/print-inl.h\n    hwy/print.h\n    hwy/profiler.h\n    hwy/robust_statistics.h\n    hwy/targets.h\n    hwy/timer-inl.h\n    hwy/timer.h\n)\n\nif (NOT HWY_CMAKE_HEADER_ONLY)\n  list(APPEND HWY_SOURCES\n    hwy/abort.cc\n    hwy/aligned_allocator.cc\n    hwy/nanobenchmark.cc\n    hwy/per_target.cc\n    hwy/perf_counters.cc\n    hwy/print.cc\n    hwy/targets.cc\n    hwy/timer.cc\n  )\nendif()\n\nset(HWY_TEST_SOURCES\n    hwy/tests/hwy_gtest.h\n    hwy/tests/test_util-inl.h\n    hwy/tests/test_util.cc\n    hwy/tests/test_util.h\n)\n\nif (MSVC)\n  set(HWY_FLAGS\n    # fix build error C1128 in blockwise*_test & arithmetic_test\n    /bigobj\n\n    # Warnings\n    /W4\n    # Disable some W4 warnings.  Enable them individually after they are cleaned up.\n    /wd4100\n    /wd4127\n    /wd4324\n    /wd4456\n    /wd4701\n    /wd4702\n    /wd4723\n\n    # CMake automatically adds exception handling flags.  Remove them.\n    /GR-\n    /EHs-c-\n    # Disable exceptions in STL code.\n    -D_HAS_EXCEPTIONS=0\n  )\n\n  # This adds extra warnings for the clang-cl compiler on Windows.\n  # This is the same as the sections in the else part.\n  # These could be refactored.\n  if (${CMAKE_CXX_COMPILER_ID} MATCHES \"Clang\")\n    list(APPEND HWY_FLAGS\n      # These are not included in Wall nor Wextra:\n      -Wconversion\n      -Wsign-conversion\n      -Wvla\n      -Wnon-virtual-dtor\n\n      -Wfloat-overflow-conversion\n      -Wfloat-zero-conversion\n      -Wfor-loop-analysis\n      -Wgnu-redeclared-enum\n      -Winfinite-recursion\n      -Wself-assign\n      -Wstring-conversion\n      -Wtautological-overlap-compare\n      -Wthread-safety-analysis\n      -Wundefined-func-template\n    )\n  endif()\n\n  if (HWY_WARNINGS_ARE_ERRORS)\n    list(APPEND HWY_FLAGS /WX)\n  endif()\nelse()\n  set(HWY_FLAGS\n    # Avoid changing binaries based on the current time and date.\n    -Wno-builtin-macro-redefined\n    -D__DATE__=\"redacted\"\n    -D__TIMESTAMP__=\"redacted\"\n    -D__TIME__=\"redacted\"\n\n    # Optimizations\n    -fmerge-all-constants\n\n    # Warnings\n    -Wall\n    -Wextra\n    # These are not included in Wall nor Wextra:\n    -Wconversion\n    -Wsign-conversion\n    -Wvla\n    -Wnon-virtual-dtor\n    -Wcast-align # see -Wcast-align=strict on x86\n  )\n\n  if(${CMAKE_CXX_COMPILER_ID} MATCHES \"Clang\")\n    list(APPEND HWY_FLAGS\n      -Wfloat-overflow-conversion\n      -Wfloat-zero-conversion\n      -Wfor-loop-analysis\n      -Wgnu-redeclared-enum\n      -Winfinite-recursion\n      -Wself-assign\n      -Wstring-conversion\n      -Wtautological-overlap-compare\n      -Wthread-safety-analysis\n      -Wundefined-func-template\n\n      -fno-cxx-exceptions\n      -fno-slp-vectorize\n      -fno-vectorize\n\n      # Use color in messages\n      -fdiagnostics-show-option -fcolor-diagnostics\n    )\n    if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 6.0)\n      list(APPEND HWY_FLAGS -Wc++2a-extensions)\n    endif()\n  endif()\n\n  if (WIN32)\n    if(${CMAKE_CXX_COMPILER_ID} MATCHES \"Clang\")\n      list(APPEND HWY_FLAGS\n        -Wno-global-constructors\n        -Wno-language-extension-token\n        -Wno-used-but-marked-unused\n        -Wno-shadow-field-in-constructor\n        -Wno-unused-member-function\n        -Wno-unused-template\n        -Wno-c++98-compat-pedantic\n        -Wno-used-but-marked-unused\n        -Wno-zero-as-null-pointer-constant\n      )\n    endif()\n\n    list(APPEND HWY_FLAGS\n      -Wno-cast-align\n      -Wno-double-promotion\n      -Wno-float-equal\n      -Wno-format-nonliteral\n      -Wno-shadow\n      -Wno-sign-conversion\n    )\n  else()\n    list(APPEND HWY_FLAGS\n      -fmath-errno\n      -fno-exceptions\n    )\n  endif()  # WIN32\n\n  # Workaround for excess precision, see #1488.\n  if (HWY_CMAKE_SSE2)\n    list(APPEND HWY_FLAGS -msse2 -mfpmath=sse)\n  endif()\n\n  # Suppress STL iterator warnings. Supported by GCC 4.4.7 and newer, which\n  # predates the C++11 we require.\n  if (${CMAKE_CXX_COMPILER_ID} MATCHES \"GNU\")\n    list(APPEND HWY_FLAGS -Wno-psabi)\n  endif()\n  # Clang supports this flag from 11.0.\n  if (${CMAKE_CXX_COMPILER_ID} MATCHES \"Clang\")\n    if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 11.0)\n      list(APPEND HWY_FLAGS -Wno-psabi)\n    endif()\n  endif()\n\n  if (HWY_CMAKE_ARM7)\n    list(APPEND HWY_FLAGS\n      -march=armv7-a\n      -mfpu=neon-vfpv4\n      -mfloat-abi=hard  # must match the toolchain specified as CXX=\n    )\n    if(${CMAKE_CXX_COMPILER_ID} MATCHES \"GNU\")\n      # using GCC\n      list(APPEND HWY_FLAGS\n        -mfp16-format=ieee  # required for vcvt_f32_f16\n      )\n    endif()\n  endif()  # HWY_CMAKE_ARM7\n\n  if(HWY_RISCV)\n    # gcc(13) and recent clang both support V, but not yet runtime dispatch, so\n    # we add the gcv compiler flag, which then requires the CPU (now when using\n    # either compiler) to support V.\n    if(HWY_CMAKE_RVV)\n      if(RISCV_XLEN EQUAL 64)\n        list(APPEND HWY_FLAGS -march=rv64gcv1p0)\n        add_link_options(-march=rv64gcv1p0)\n      elseif(RISCV_XLEN EQUAL 32)\n        list(APPEND HWY_FLAGS -march=rv32gcv1p0)\n        add_link_options(-march=rv32gcv1p0)\n      endif()\n      if(${CMAKE_CXX_COMPILER_ID} MATCHES \"Clang\")\n        list(APPEND HWY_FLAGS -menable-experimental-extensions)\n      endif()\n    endif()\n  endif()\n\n  if (HWY_WARNINGS_ARE_ERRORS)\n    list(APPEND HWY_FLAGS -Werror)\n  endif()\n\n  # Prevent \"wasm-ld: error: --shared-memory is disallowed by targets.cc.o\n  # because it was not compiled with 'atomics' or 'bulk-memory' features.\"\n  if (HWY_EMSCRIPTEN)\n    list(APPEND HWY_FLAGS -matomics)\n  endif()\n\nendif()  # !MSVC\n\nif (HWY_CMAKE_HEADER_ONLY)\n  list(APPEND HWY_FLAGS -DHWY_HEADER_ONLY)\nendif()\n\ninclude(CheckIncludeFile)\ncheck_include_file(sys/auxv.h  HAVE_SYS_AUXV_H)\ncheck_include_file(asm/hwcap.h HAVE_ASM_HWCAP_H)\n\n# By default prefer STATIC build (legacy behavior)\noption(BUILD_SHARED_LIBS \"Build shared libraries\" OFF)\noption(HWY_FORCE_STATIC_LIBS \"Ignore BUILD_SHARED_LIBS\" OFF)\n# only expose shared/static options to advanced users:\nmark_as_advanced(BUILD_SHARED_LIBS)\nmark_as_advanced(HWY_FORCE_STATIC_LIBS)\n# Define visibility settings globally:\nset(CMAKE_CXX_VISIBILITY_PRESET hidden)\nset(CMAKE_VISIBILITY_INLINES_HIDDEN 1)\n\n# Copy-cat \"add_library\" logic + add override.\nset(HWY_LIBRARY_TYPE \"SHARED\")\nif (NOT BUILD_SHARED_LIBS OR HWY_FORCE_STATIC_LIBS)\n  set(HWY_LIBRARY_TYPE \"STATIC\")\nendif()\n\n# This preprocessor define will drive the build, also used in the *.pc files:\nif(\"${HWY_LIBRARY_TYPE}\" STREQUAL \"SHARED\")\n  set(DLLEXPORT_TO_DEFINE \"HWY_SHARED_DEFINE\")\nelse()\n  set(DLLEXPORT_TO_DEFINE \"HWY_STATIC_DEFINE\")\nendif()\n\nadd_library(hwy ${HWY_LIBRARY_TYPE} ${HWY_SOURCES})\nif(NOT HAVE_SYS_AUXV_H)\n  target_compile_definitions(hwy PUBLIC TOOLCHAIN_MISS_SYS_AUXV_H)\nendif()\nif(NOT HAVE_ASM_HWCAP_H)\n  target_compile_definitions(hwy PUBLIC TOOLCHAIN_MISS_ASM_HWCAP_H)\nendif()\ntarget_compile_definitions(hwy PUBLIC \"${DLLEXPORT_TO_DEFINE}\")\ntarget_compile_options(hwy PRIVATE ${HWY_FLAGS})\nset_property(TARGET hwy PROPERTY POSITION_INDEPENDENT_CODE ON)\nset_target_properties(hwy PROPERTIES VERSION ${LIBRARY_VERSION} SOVERSION ${LIBRARY_SOVERSION})\ntarget_include_directories(hwy PUBLIC\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}>\n    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)\ntarget_compile_features(hwy PUBLIC cxx_std_11)\nif (NOT HWY_CXX_STD_TGT_COMPILE_FEATURE STREQUAL \"cxx_std_11\")\n  target_compile_features(hwy PRIVATE ${HWY_CXX_STD_TGT_COMPILE_FEATURE})\nendif()\nset_target_properties(hwy PROPERTIES\n  LINK_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/hwy/hwy.version)\n# For GCC __atomic_store_8, see #887\ntarget_link_libraries(hwy PRIVATE ${ATOMICS_LIBRARIES})\n# not supported by MSVC/Clang, safe to skip (we use DLLEXPORT annotations)\nif(UNIX AND NOT APPLE)\n  set_property(TARGET hwy APPEND_STRING PROPERTY\n    LINK_FLAGS \" -Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/hwy/hwy.version\")\nendif()\n\nif (HWY_ENABLE_CONTRIB)\nadd_library(hwy_contrib ${HWY_LIBRARY_TYPE} ${HWY_CONTRIB_SOURCES})\ntarget_link_libraries(hwy_contrib PUBLIC hwy)\ntarget_compile_options(hwy_contrib PRIVATE ${HWY_FLAGS})\nset_property(TARGET hwy_contrib PROPERTY POSITION_INDEPENDENT_CODE ON)\nset_target_properties(hwy_contrib PROPERTIES VERSION ${LIBRARY_VERSION} SOVERSION ${LIBRARY_SOVERSION})\ntarget_include_directories(hwy_contrib PUBLIC\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}>\n    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)\ntarget_compile_features(hwy_contrib PUBLIC cxx_std_11)\nif (NOT HWY_CXX_STD_TGT_COMPILE_FEATURE STREQUAL \"cxx_std_11\")\n  target_compile_features(hwy_contrib PRIVATE ${HWY_CXX_STD_TGT_COMPILE_FEATURE})\nendif()\nset_target_properties(hwy_contrib PROPERTIES\n  LINK_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/hwy/hwy.version)\n# For GCC __atomic_store_8, see #887\ntarget_link_libraries(hwy_contrib PRIVATE ${ATOMICS_LIBRARIES})\n# not supported by MSVC/Clang, safe to skip (we use DLLEXPORT annotations)\nif(UNIX AND NOT APPLE)\n  set_property(TARGET hwy_contrib APPEND_STRING PROPERTY\n    LINK_FLAGS \" -Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/hwy/hwy.version\")\nendif()\nendif()  # HWY_ENABLE_CONTRIB\n\nadd_library(hwy_test ${HWY_LIBRARY_TYPE} ${HWY_TEST_SOURCES})\ntarget_link_libraries(hwy_test PUBLIC hwy)\ntarget_compile_options(hwy_test PRIVATE ${HWY_FLAGS})\nset_property(TARGET hwy_test PROPERTY POSITION_INDEPENDENT_CODE ON)\nset_target_properties(hwy_test PROPERTIES VERSION ${LIBRARY_VERSION} SOVERSION ${LIBRARY_SOVERSION})\ntarget_include_directories(hwy_test PUBLIC\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}>\n    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)\ntarget_compile_features(hwy_test PUBLIC cxx_std_11)\nif (NOT HWY_CXX_STD_TGT_COMPILE_FEATURE STREQUAL \"cxx_std_11\")\n  target_compile_features(hwy_test PRIVATE ${HWY_CXX_STD_TGT_COMPILE_FEATURE})\nendif()\nset_target_properties(hwy_test PROPERTIES\n  LINK_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/hwy/hwy.version)\n# not supported by MSVC/Clang, safe to skip (we use DLLEXPORT annotations)\nif(UNIX AND NOT APPLE)\n  set_property(TARGET hwy_test APPEND_STRING PROPERTY\n    LINK_FLAGS \" -Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/hwy/hwy.version\")\nendif()\n\n# -------------------------------------------------------- hwy_list_targets\n# Generate a tool to print the compiled-in targets as defined by the current\n# flags. This tool will print to stderr at build time, after building hwy.\nadd_executable(hwy_list_targets hwy/tests/list_targets.cc)\ntarget_compile_options(hwy_list_targets PRIVATE ${HWY_FLAGS})\ntarget_compile_features(hwy_list_targets PRIVATE ${HWY_CXX_STD_TGT_COMPILE_FEATURE})\ntarget_link_libraries(hwy_list_targets PRIVATE hwy)\ntarget_include_directories(hwy_list_targets PRIVATE\n  $<TARGET_PROPERTY:hwy,INCLUDE_DIRECTORIES>)\n# TARGET_FILE always returns the path to executable\n# Naked target also not always could be run (due to the lack of '.\\' prefix)\n# Thus effective command to run should contain the full path\n# and emulator prefix (if any).\nif (NOT CMAKE_CROSSCOMPILING OR CMAKE_CROSSCOMPILING_EMULATOR)\nadd_custom_command(TARGET hwy_list_targets POST_BUILD\n    COMMAND ${CMAKE_CROSSCOMPILING_EMULATOR} $<TARGET_FILE:hwy_list_targets> || (exit 0))\nendif()\n\n# --------------------------------------------------------\n# Allow skipping the following sections for projects that do not need them:\n# tests, examples, benchmarks and installation.\n\n# -------------------------------------------------------- install library\nif (HWY_ENABLE_INSTALL)\n\ninstall(TARGETS hwy EXPORT hwy_targets\n  LIBRARY DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n  ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n  RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\")\n# Install all the headers keeping the relative path to the current directory\n# when installing them.\nforeach (source ${HWY_SOURCES})\n  if (\"${source}\" MATCHES \"\\.h$\")\n    get_filename_component(dirname \"${source}\" DIRECTORY)\n    install(FILES \"${source}\"\n        DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/${dirname}\")\n  endif()\nendforeach()\n\nif (HWY_ENABLE_CONTRIB)\ninstall(TARGETS hwy_contrib EXPORT hwy_targets\n  LIBRARY DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n  ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n  RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\")\n# Install all the headers keeping the relative path to the current directory\n# when installing them.\nforeach (source ${HWY_CONTRIB_SOURCES})\n  if (\"${source}\" MATCHES \"\\.h$\")\n    get_filename_component(dirname \"${source}\" DIRECTORY)\n    install(FILES \"${source}\"\n        DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/${dirname}\")\n  endif()\nendforeach()\nendif()  # HWY_ENABLE_CONTRIB\n\nif (HWY_ENABLE_TESTS)\ninstall(TARGETS hwy_test EXPORT hwy_targets\n  LIBRARY DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n  ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n  RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\")\n# Install all the headers keeping the relative path to the current directory\n# when installing them.\nforeach (source ${HWY_TEST_SOURCES})\n  if (\"${source}\" MATCHES \"\\.h$\")\n    get_filename_component(dirname \"${source}\" DIRECTORY)\n    install(FILES \"${source}\"\n        DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/${dirname}\")\n  endif()\nendforeach()\nendif()  # HWY_ENABLE_TESTS\n\n# Add a pkg-config file for libhwy and the contrib/test libraries.\nset(HWY_LIBRARY_VERSION \"${CMAKE_PROJECT_VERSION}\")\nset(HWY_PC_FILES libhwy.pc)\nif (HWY_ENABLE_CONTRIB)\nlist(APPEND HWY_PC_FILES libhwy-contrib.pc)\nendif()  # HWY_ENABLE_CONTRIB\nif (HWY_ENABLE_TESTS)\n\nif (HWY_TEST_STANDALONE)\n  set(HWY_PC_HWY_TEST_REQUIRES \"\")\n  set(HWY_PC_HWY_TEST_CFLAGS \"-DHWY_TEST_STANDALONE=1\")\nelse()\n  set(HWY_PC_HWY_TEST_REQUIRES \"gtest\")\n  set(HWY_PC_HWY_TEST_CFLAGS \"\")\nendif()\n\nlist(APPEND HWY_PC_FILES libhwy-test.pc)\nendif()  # HWY_ENABLE_TESTS\nforeach (pc ${HWY_PC_FILES})\n  configure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/${pc}.in\" \"${pc}\" @ONLY)\n  install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/${pc}\"\n      DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\nendforeach()\n\nendif()  # HWY_ENABLE_INSTALL\n# -------------------------------------------------------- Examples\nif (HWY_ENABLE_EXAMPLES)\n\n# Avoids mismatch between GTest's static CRT and our dynamic.\nset(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n\n# Programming exercise with integrated benchmark\nadd_executable(hwy_benchmark hwy/examples/benchmark.cc)\ntarget_sources(hwy_benchmark PRIVATE\n    hwy/nanobenchmark.h)\n# Try adding one of -DHWY_COMPILE_ONLY_SCALAR, -DHWY_COMPILE_ONLY_EMU128 or\n# -DHWY_COMPILE_ONLY_STATIC to observe the difference in targets printed.\ntarget_compile_options(hwy_benchmark PRIVATE ${HWY_FLAGS})\ntarget_compile_features(hwy_benchmark PRIVATE ${HWY_CXX_STD_TGT_COMPILE_FEATURE})\ntarget_link_libraries(hwy_benchmark PRIVATE hwy)\ntarget_link_libraries(hwy_benchmark PRIVATE ${ATOMICS_LIBRARIES})\nset_target_properties(hwy_benchmark\n    PROPERTIES RUNTIME_OUTPUT_DIRECTORY \"examples/\")\n\n# Profiler demo\nadd_executable(hwy_profiler_example hwy/examples/profiler_example.cc)\ntarget_sources(hwy_profiler_example PRIVATE\n    hwy/profiler.h)\ntarget_compile_options(hwy_profiler_example PRIVATE ${HWY_FLAGS})\ntarget_compile_features(hwy_profiler_example PRIVATE ${HWY_CXX_STD_TGT_COMPILE_FEATURE})\ntarget_link_libraries(hwy_profiler_example PRIVATE hwy)\ntarget_link_libraries(hwy_profiler_example PRIVATE ${ATOMICS_LIBRARIES})\nset_target_properties(hwy_profiler_example\n    PROPERTIES RUNTIME_OUTPUT_DIRECTORY \"examples/\")\n\nendif()  # HWY_ENABLE_EXAMPLES\n# -------------------------------------------------------- Tests\n\ninclude(CTest)\n\nif(BUILD_TESTING AND HWY_ENABLE_TESTS)\nenable_testing()\ninclude(GoogleTest)\n\nset(HWY_SYSTEM_GTEST OFF CACHE BOOL \"Use pre-installed googletest?\")\n\nif(NOT HWY_TEST_STANDALONE)\nif(HWY_SYSTEM_GTEST)\nfind_package(GTest REQUIRED)\nelse()\n# Download and unpack googletest at configure time\nconfigure_file(CMakeLists.txt.in googletest-download/CMakeLists.txt)\nexecute_process(COMMAND ${CMAKE_COMMAND} -G \"${CMAKE_GENERATOR}\" .\n  RESULT_VARIABLE result\n  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/googletest-download )\nif(result)\n  message(FATAL_ERROR \"CMake step for googletest failed: ${result}\")\nendif()\nexecute_process(COMMAND ${CMAKE_COMMAND} --build .\n  RESULT_VARIABLE result\n  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/googletest-download )\nif(result)\n  message(FATAL_ERROR \"Build step for googletest failed: ${result}\")\nendif()\n\n# Prevent overriding the parent project's compiler/linker\n# settings on Windows\nset(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n\n# Add googletest directly to our build. This defines\n# the gtest and gtest_main targets.\nadd_subdirectory(${CMAKE_CURRENT_BINARY_DIR}/googletest-src\n                 ${CMAKE_CURRENT_BINARY_DIR}/googletest-build\n                 EXCLUDE_FROM_ALL)\nendif()  # HWY_SYSTEM_GTEST\nendif()  # HWY_TEST_STANDALONE\n\nset(HWY_TEST_FILES\n  hwy/contrib/algo/copy_test.cc\n  hwy/contrib/algo/find_test.cc\n  hwy/contrib/algo/transform_test.cc\n  hwy/abort_test.cc\n  hwy/aligned_allocator_test.cc\n  hwy/base_test.cc\n  hwy/bit_set_test.cc\n  hwy/highway_test.cc\n  hwy/nanobenchmark_test.cc\n  hwy/perf_counters_test.cc\n  hwy/targets_test.cc\n  hwy/examples/skeleton_test.cc\n  hwy/tests/arithmetic_test.cc\n  hwy/tests/bit_permute_test.cc\n  hwy/tests/blockwise_combine_test.cc\n  hwy/tests/blockwise_shift_test.cc\n  hwy/tests/blockwise_test.cc\n  hwy/tests/cast_test.cc\n  hwy/tests/combine_test.cc\n  hwy/tests/compare_test.cc\n  hwy/tests/compress_test.cc\n  hwy/tests/concat_test.cc\n  hwy/tests/convert_test.cc\n  hwy/tests/count_test.cc\n  hwy/tests/crypto_test.cc\n  hwy/tests/demote_test.cc\n  hwy/tests/div_test.cc\n  hwy/tests/dup128_vec_test.cc\n  hwy/tests/expand_test.cc\n  hwy/tests/float_test.cc\n  hwy/tests/fma_test.cc\n  hwy/tests/foreach_vec_test.cc\n  hwy/tests/if_test.cc\n  hwy/tests/in_range_float_to_int_conv_test.cc\n  hwy/tests/interleaved_test.cc\n  hwy/tests/logical_test.cc\n  hwy/tests/mask_combine_test.cc\n  hwy/tests/mask_convert_test.cc\n  hwy/tests/mask_mem_test.cc\n  hwy/tests/mask_set_test.cc\n  hwy/tests/mask_slide_test.cc\n  hwy/tests/mask_test.cc\n  hwy/tests/masked_arithmetic_test.cc\n  hwy/tests/masked_minmax_test.cc\n  hwy/tests/memory_test.cc\n  hwy/tests/minmax_test.cc\n  hwy/tests/mul_by_pow2_test.cc\n  hwy/tests/mul_pairwise_test.cc\n  hwy/tests/mul_test.cc\n  hwy/tests/reduction_test.cc\n  hwy/tests/resize_test.cc\n  hwy/tests/reverse_test.cc\n  hwy/tests/rotate_test.cc\n  hwy/tests/saturated_test.cc\n  hwy/tests/shift_test.cc\n  hwy/tests/shuffle4_test.cc\n  hwy/tests/sign_test.cc\n  hwy/tests/slide_up_down_test.cc\n  hwy/tests/sums_abs_diff_test.cc\n  hwy/tests/swizzle_block_test.cc\n  hwy/tests/swizzle_test.cc\n  hwy/tests/table_test.cc\n  hwy/tests/test_util_test.cc\n  hwy/tests/truncate_test.cc\n  hwy/tests/tuple_test.cc\n  hwy/tests/widen_mul_test.cc\n)\n\nset(HWY_TEST_LIBS hwy hwy_test)\n\nif (HWY_ENABLE_CONTRIB)\nlist(APPEND HWY_TEST_LIBS hwy_contrib)\n\nlist(APPEND HWY_TEST_FILES\n  hwy/contrib/bit_pack/bit_pack_test.cc\n  hwy/contrib/dot/dot_test.cc\n  hwy/contrib/matvec/matvec_test.cc\n  hwy/contrib/image/image_test.cc\n  # Disabled due to SIGILL in clang7 debug build during gtest discovery phase,\n  # not reproducible locally. Still tested via bazel build.\n  hwy/contrib/math/math_test.cc\n  hwy/contrib/random/random_test.cc\n  hwy/contrib/sort/bench_sort.cc\n  hwy/contrib/sort/sort_test.cc\n  hwy/contrib/sort/sort_unit_test.cc\n  hwy/contrib/thread_pool/thread_pool_test.cc\n  hwy/contrib/thread_pool/topology_test.cc\n  hwy/contrib/unroller/unroller_test.cc\n)\nendif()  # HWY_ENABLE_CONTRIB\n\nif(HWY_TEST_STANDALONE)\n  set(HWY_GTEST_LIBS \"\")\nelse()\n  if(HWY_SYSTEM_GTEST)\n    if (CMAKE_VERSION VERSION_LESS 3.20)\n      set(HWY_GTEST_LIBS GTest::GTest GTest::Main)\n    else()\n      set(HWY_GTEST_LIBS GTest::gtest GTest::gtest_main)\n    endif()\n  else()\n    set(HWY_GTEST_LIBS gtest gtest_main)\n  endif()\nendif()  # HWY_TEST_STANDALONE\n\nfile(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/tests)\nforeach (TESTFILE IN LISTS HWY_TEST_FILES)\n  # The TESTNAME is the name without the extension or directory.\n  get_filename_component(TESTNAME ${TESTFILE} NAME_WE)\n  add_executable(${TESTNAME} ${TESTFILE})\n  target_compile_options(${TESTNAME} PRIVATE ${HWY_FLAGS})\n  # Test all targets, not just the best/baseline. This changes the default\n  # policy to all-attainable; note that setting -DHWY_COMPILE_* directly can\n  # cause compile errors because only one may be set, and other CMakeLists.txt\n  # that include us may set them.\n  target_compile_options(${TESTNAME} PRIVATE -DHWY_IS_TEST=1)\n  if(HWY_TEST_STANDALONE)\n    target_compile_options(${TESTNAME} PRIVATE -DHWY_TEST_STANDALONE=1)\n  endif()\n  target_compile_features(${TESTNAME} PRIVATE ${HWY_CXX_STD_TGT_COMPILE_FEATURE})\n\n  target_link_libraries(${TESTNAME} PRIVATE ${HWY_TEST_LIBS} ${HWY_GTEST_LIBS})\n  # For GCC __atomic_store_8, see #887\n  target_link_libraries(${TESTNAME} PRIVATE ${ATOMICS_LIBRARIES})\n  # Output test targets in the test directory.\n  set_target_properties(${TESTNAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY \"tests\")\n\n  if (HWY_EMSCRIPTEN)\n    set_target_properties(${TESTNAME} PROPERTIES LINK_FLAGS \"-s SINGLE_FILE=1\")\n  endif()\n\n  if(${CMAKE_VERSION} VERSION_LESS \"3.10.3\")\n    gtest_discover_tests(${TESTNAME} TIMEOUT 60)\n  else ()\n    gtest_discover_tests(${TESTNAME} DISCOVERY_TIMEOUT 60)\n  endif ()\nendforeach ()\n\n# The skeleton test uses the skeleton library code.\ntarget_sources(skeleton_test PRIVATE hwy/examples/skeleton.cc)\n\nendif()  # BUILD_TESTING\n\nif (HWY_ENABLE_INSTALL)\n  # write hwy-config file to handle `Config` mode\n  include(CMakePackageConfigHelpers)\n  write_basic_package_version_file(\"${CMAKE_CURRENT_BINARY_DIR}/hwy-config-version.cmake\" COMPATIBILITY SameMajorVersion)\n  install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/hwy-config-version.cmake\" DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/hwy\")\n  install(EXPORT hwy_targets NAMESPACE \"${namespace}\" FILE hwy-config.cmake DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/hwy\")\nendif()\n"
        },
        {
          "name": "CMakeLists.txt.in",
          "type": "blob",
          "size": 0.4677734375,
          "content": "cmake_minimum_required(VERSION 2.8.12)\n\nproject(googletest-download NONE)\n\ninclude(ExternalProject)\nExternalProject_Add(googletest\n  GIT_REPOSITORY    https://github.com/google/googletest.git\n  GIT_TAG           43efa0a4efd40c78b9210d15373112081899a97c\n  SOURCE_DIR        \"${CMAKE_CURRENT_BINARY_DIR}/googletest-src\"\n  BINARY_DIR        \"${CMAKE_CURRENT_BINARY_DIR}/googletest-build\"\n  CONFIGURE_COMMAND \"\"\n  BUILD_COMMAND     \"\"\n  INSTALL_COMMAND   \"\"\n  TEST_COMMAND      \"\"\n)\n"
        },
        {
          "name": "CONTRIBUTING",
          "type": "blob",
          "size": 1.470703125,
          "content": "# How to Contribute\n\nWe'd love to accept your patches and contributions to this project.\nPull requests are very welcome. Bug reports (via issue) are also appreciated.\n\nLooking for a starter project? See the [wishlist](g3doc/op_wishlist.md) for\nsome ideas for extensions and codegen improvements.\n\nThere are just a few small guidelines you need to follow.\n\n## Contributor License Agreement\n\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution;\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to <https://cla.developers.google.com/> to see\nyour current agreements on file or to sign a new one.\n\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\n\n## Code reviews\n\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\n[GitHub Help](https://help.github.com/articles/about-pull-requests/) for more\ninformation on using pull requests.\n\n## API changes\n\nHighway promises to be backwards-compatible to the current documented API. If\nyou would like to propose a change, please raise an issue to discuss how we can\nretain compatibility.\n\n## Community Guidelines\n\nThis project follows\n[Google's Open Source Community Guidelines](https://opensource.google.com/conduct/).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.08984375,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "LICENSE-BSD3",
          "type": "blob",
          "size": 1.4794921875,
          "content": "Copyright (c) The Highway Project Authors. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1.  Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n\n2.  Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation\n    and/or other materials provided with the distribution.\n\n3.  Neither the name of the copyright holder nor the names of its\n    contributors may be used to endorse or promote products derived from\n    this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
        },
        {
          "name": "MODULE.bazel",
          "type": "blob",
          "size": 0.3388671875,
          "content": "module(\n    name = \"highway\",\n    version = \"1.2.0\",\n)\n\nbazel_dep(name = \"bazel_skylib\", version = \"1.6.1\")\nbazel_dep(name = \"googletest\", version = \"1.15.2\", repo_name = \"com_google_googletest\")\nbazel_dep(name = \"rules_cc\", version = \"0.0.9\")\nbazel_dep(name = \"rules_license\", version = \"0.0.7\")\nbazel_dep(name = \"platforms\", version = \"0.0.10\")\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 21.896484375,
          "content": "# Efficient and performance-portable vector software\n\n[//]: # (placeholder, do not remove)\n\nHighway is a C++ library that provides portable SIMD/vector intrinsics.\n\n[Documentation](https://google.github.io/highway/en/master/)\n\nPreviously licensed under Apache 2, now dual-licensed as Apache 2 / BSD-3.\n\n## Why\n\nWe are passionate about high-performance software. We see major untapped\npotential in CPUs (servers, mobile, desktops). Highway is for engineers who want\nto reliably and economically push the boundaries of what is possible in\nsoftware.\n\n## How\n\nCPUs provide SIMD/vector instructions that apply the same operation to multiple\ndata items. This can reduce energy usage e.g. *fivefold* because fewer\ninstructions are executed. We also often see *5-10x* speedups.\n\nHighway makes SIMD/vector programming practical and workable according to these\nguiding principles:\n\n**Does what you expect**: Highway is a C++ library with carefully-chosen\nfunctions that map well to CPU instructions without extensive compiler\ntransformations. The resulting code is more predictable and robust to code\nchanges/compiler updates than autovectorization.\n\n**Works on widely-used platforms**: Highway supports five architectures; the\nsame application code can target various instruction sets, including those with\n'scalable' vectors (size unknown at compile time). Highway only requires C++11\nand supports four families of compilers. If you would like to use Highway on\nother platforms, please raise an issue.\n\n**Flexible to deploy**: Applications using Highway can run on heterogeneous\nclouds or client devices, choosing the best available instruction set at\nruntime. Alternatively, developers may choose to target a single instruction set\nwithout any runtime overhead. In both cases, the application code is the same\nexcept for swapping `HWY_STATIC_DISPATCH` with `HWY_DYNAMIC_DISPATCH` plus one\nline of code. See also @kfjahnke's\n[introduction to dispatching](https://github.com/kfjahnke/zimt/blob/multi_isa/examples/multi_isa_example/multi_simd_isa.md).\n\n**Suitable for a variety of domains**: Highway provides an extensive set of\noperations, used for image processing (floating-point), compression, video\nanalysis, linear algebra, cryptography, sorting and random generation. We\nrecognise that new use-cases may require additional ops and are happy to add\nthem where it makes sense (e.g. no performance cliffs on some architectures). If\nyou would like to discuss, please file an issue.\n\n**Rewards data-parallel design**: Highway provides tools such as Gather,\nMaskedLoad, and FixedTag to enable speedups for legacy data structures. However,\nthe biggest gains are unlocked by designing algorithms and data structures for\nscalable vectors. Helpful techniques include batching, structure-of-array\nlayouts, and aligned/padded allocations.\n\nWe recommend these resources for getting started:\n\n-   [SIMD for C++ Developers](http://const.me/articles/simd/simd.pdf)\n-   [Algorithms for Modern Hardware](https://en.algorithmica.org/hpc/)\n-   [Optimizing software in C++](https://agner.org/optimize/optimizing_cpp.pdf)\n-   [Improving performance with SIMD intrinsics in three use cases](https://stackoverflow.blog/2020/07/08/improving-performance-with-simd-intrinsics-in-three-use-cases/)\n\n## Examples\n\nOnline demos using Compiler Explorer:\n\n-   [multiple targets with dynamic dispatch](https://gcc.godbolt.org/z/KM3ben7ET)\n    (more complicated, but flexible and uses best available SIMD)\n-   [single target using -m flags](https://gcc.godbolt.org/z/rGnjMevKG)\n    (simpler, but requires/only uses the instruction set enabled by compiler\n    flags)\n\nWe observe that Highway is referenced in the following open source projects,\nfound via sourcegraph.com. Most are GitHub repositories. If you would like to\nadd your project or link to it directly, feel free to raise an issue or contact\nus via the below email.\n\n*   Audio: [Zimtohrli perceptual metric](https://github.com/google/zimtohrli)\n*   Browsers: Chromium (+Vivaldi), Firefox (+floorp / foxhound / librewolf /\n    Waterfox)\n*   Computational biology: [RNA analysis](https://github.com/bnprks/BPCells)\n*   Computer graphics: [Sparse voxel renderer](https://github.com/rools/voxl)\n*   Cryptography: google/distributed_point_functions, google/shell-encryption\n*   Data structures: bkille/BitLib\n*   Image codecs: eustas/2im,\n    [Grok JPEG 2000](https://github.com/GrokImageCompression/grok),\n    [JPEG XL](https://github.com/libjxl/libjxl),\n    [JPEGenc](https://github.com/osamu620/JPEGenc),\n    [Jpegli](https://github.com/google/jpegli), OpenHTJ2K\n*   Image processing: cloudinary/ssimulacra2, m-ab-s/media-autobuild_suite,\n    [libvips](https://github.com/libvips/libvips)\n*   Image viewers: AlienCowEatCake/ImageViewer, diffractor/diffractor,\n    mirillis/jpegxl-wic,\n    [Lux panorama/image viewer](https://bitbucket.org/kfj/pv/)\n*   Information retrieval:\n    [iresearch database index](https://github.com/iresearch-toolkit/iresearch),\n    michaeljclark/zvec,\n    [nebula interactive analytics / OLAP](https://github.com/varchar-io/nebula),\n    [ScaNN Scalable Nearest Neighbors](https://github.com/google-research/google-research/tree/7a269cb2ce0ae1db591fe11b62cbc0be7d72532a/scann),\n    [vectorlite vector search](https://github.com/1yefuwang1/vectorlite/)\n*   Machine learning: [gemma.cpp](https://github.com/google/gemma.cpp),\n    Tensorflow, Numpy, zpye/SimpleInfer\n*   Robotics:\n    [MIT Model-Based Design and Verification](https://github.com/RobotLocomotion/drake)\n\nOther\n\n*   [Evaluation of C++ SIMD Libraries](https://www.mnm-team.org/pub/Fopras/rock23/):\n    \"Highway excelled with a strong performance across multiple SIMD extensions\n    [..]. Thus, Highway may currently be the most suitable SIMD library for many\n    software projects.\"\n*   [zimt](https://github.com/kfjahnke/zimt): C++11 template library to process n-dimensional arrays with multi-threaded SIMD code\n*   [vectorized Quicksort](https://github.com/google/highway/tree/master/hwy/contrib/sort) ([paper](https://arxiv.org/abs/2205.05982))\n\nIf you'd like to get Highway, in addition to cloning from this GitHub repository\nor using it as a Git submodule, you can also find it in the following package\nmanagers or repositories:\n\n*   alpinelinux\n*   conan-io\n*   conda-forge\n*   DragonFlyBSD,\n*   fd00/yacp\n*   freebsd\n*   getsolus/packages\n*   ghostbsd\n*   microsoft/vcpkg\n*   MidnightBSD\n*   MSYS2\n*   NetBSD\n*   openSUSE\n*   opnsense\n*   Xilinx/Vitis_Libraries\n*   xmake-io/xmake-repo\n\nSee also the list at https://repology.org/project/highway-simd-library/versions\n.\n\n## Current status\n\n### Targets\n\nHighway supports 24 targets, listed in alphabetical order of platform:\n\n-   Any: `EMU128`, `SCALAR`;\n-   Armv7+: `NEON_WITHOUT_AES`, `NEON`, `NEON_BF16`, `SVE`, `SVE2`, `SVE_256`,\n    `SVE2_128`;\n-   IBM Z: `Z14`, `Z15`;\n-   POWER: `PPC8` (v2.07), `PPC9` (v3.0), `PPC10` (v3.1B, not yet supported due\n    to compiler bugs, see #1207; also requires QEMU 7.2);\n-   RISC-V: `RVV` (1.0);\n-   WebAssembly: `WASM`, `WASM_EMU256` (a 2x unrolled version of wasm128,\n    enabled if `HWY_WANT_WASM2` is defined. This will remain supported until it\n    is potentially superseded by a future version of WASM.);\n-   x86:\n    -   `SSE2`\n    -   `SSSE3` (~Intel Core)\n    -   `SSE4` (~Nehalem, also includes AES + CLMUL).\n    -   `AVX2` (~Haswell, also includes BMI2 + F16 + FMA)\n    -   `AVX3` (~Skylake, AVX-512F/BW/CD/DQ/VL)\n    -   `AVX3_DL` (~Icelake, includes BitAlg + CLMUL + GFNI + VAES + VBMI +\n        VBMI2 + VNNI + VPOPCNT; requires opt-in by defining `HWY_WANT_AVX3_DL`\n        unless compiling for static dispatch),\n    -   `AVX3_ZEN4` (like AVX3_DL but optimized for AMD Zen4; requires opt-in by\n        defining `HWY_WANT_AVX3_ZEN4` if compiling for static dispatch, but\n        enabled by default for runtime dispatch),\n    -   `AVX3_SPR` (~Sapphire Rapids, includes AVX-512FP16)\n\nOur policy is that unless otherwise specified, targets will remain supported as\nlong as they can be (cross-)compiled with currently supported Clang or GCC, and\ntested using QEMU. If the target can be compiled with LLVM trunk and tested\nusing our version of QEMU without extra flags, then it is eligible for inclusion\nin our continuous testing infrastructure. Otherwise, the target will be manually\ntested before releases with selected versions/configurations of Clang and GCC.\n\nSVE was initially tested using farm_sve (see acknowledgments).\n\n### Versioning\n\nHighway releases aim to follow the semver.org system (MAJOR.MINOR.PATCH),\nincrementing MINOR after backward-compatible additions and PATCH after\nbackward-compatible fixes. We recommend using releases (rather than the Git tip)\nbecause they are tested more extensively, see below.\n\nThe current version 1.0 signals an increased focus on backwards compatibility.\nApplications using documented functionality will remain compatible with future\nupdates that have the same major version number.\n\n### Testing\n\nContinuous integration tests build with a recent version of Clang (running on\nnative x86, or QEMU for RISC-V and Arm) and MSVC 2019 (v19.28, running on native\nx86).\n\nBefore releases, we also test on x86 with Clang and GCC, and Armv7/8 via GCC\ncross-compile. See the [testing process](g3doc/release_testing_process.md) for\ndetails.\n\n### Related modules\n\nThe `contrib` directory contains SIMD-related utilities: an image class with\naligned rows, a math library (16 functions already implemented, mostly\ntrigonometry), and functions for computing dot products and sorting.\n\n### Other libraries\n\nIf you only require x86 support, you may also use Agner Fog's\n[VCL vector class library](https://github.com/vectorclass). It includes many\nfunctions including a complete math library.\n\nIf you have existing code using x86/NEON intrinsics, you may be interested in\n[SIMDe](https://github.com/simd-everywhere/simde), which emulates those\nintrinsics using other platforms' intrinsics or autovectorization.\n\n## Installation\n\nThis project uses CMake to generate and build. In a Debian-based system you can\ninstall it via:\n\n```bash\nsudo apt install cmake\n```\n\nHighway's unit tests use [googletest](https://github.com/google/googletest).\nBy default, Highway's CMake downloads this dependency at configuration time.\nYou can avoid this by setting the `HWY_SYSTEM_GTEST` CMake variable to ON and\ninstalling gtest separately:\n\n```bash\nsudo apt install libgtest-dev\n```\n\nAlternatively, you can define `HWY_TEST_STANDALONE=1` and remove all occurrences\nof `gtest_main` in each BUILD file, then tests avoid the dependency on GUnit.\n\nRunning cross-compiled tests requires support from the OS, which on Debian is\nprovided by the `qemu-user-binfmt` package.\n\nTo build Highway as a shared or static library (depending on BUILD_SHARED_LIBS),\nthe standard CMake workflow can be used:\n\n```bash\nmkdir -p build && cd build\ncmake ..\nmake -j && make test\n```\n\nOr you can run `run_tests.sh` (`run_tests.bat` on Windows).\n\nBazel is also supported for building, but it is not as widely used/tested.\n\nWhen building for Armv7, a limitation of current compilers requires you to add\n`-DHWY_CMAKE_ARM7:BOOL=ON` to the CMake command line; see #834 and #1032. We\nunderstand that work is underway to remove this limitation.\n\nBuilding on 32-bit x86 is not officially supported, and AVX2/3 are disabled by\ndefault there. Note that johnplatts has successfully built and run the Highway\ntests on 32-bit x86, including AVX2/3, on GCC 7/8 and Clang 8/11/12. On Ubuntu\n22.04, Clang 11 and 12, but not later versions, require extra compiler flags\n`-m32 -isystem /usr/i686-linux-gnu/include`. Clang 10 and earlier require the\nabove plus `-isystem /usr/i686-linux-gnu/include/c++/12/i686-linux-gnu`. See\n#1279.\n\n## Building highway - Using vcpkg\n\nhighway is now available in [vcpkg](https://github.com/Microsoft/vcpkg)\n\n```bash\nvcpkg install highway\n```\n\nThe highway port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\n## Quick start\n\nYou can use the `benchmark` inside examples/ as a starting point.\n\nA [quick-reference page](g3doc/quick_reference.md) briefly lists all operations\nand their parameters, and the [instruction_matrix](g3doc/instruction_matrix.pdf)\nindicates the number of instructions per operation.\n\nThe [FAQ](g3doc/faq.md) answers questions about portability, API design and\nwhere to find more information.\n\nWe recommend using full SIMD vectors whenever possible for maximum performance\nportability. To obtain them, pass a `ScalableTag<float>` (or equivalently\n`HWY_FULL(float)`) tag to functions such as `Zero/Set/Load`. There are two\nalternatives for use-cases requiring an upper bound on the lanes:\n\n-   For up to `N` lanes, specify `CappedTag<T, N>` or the equivalent\n    `HWY_CAPPED(T, N)`. The actual number of lanes will be `N` rounded down to\n    the nearest power of two, such as 4 if `N` is 5, or 8 if `N` is 8. This is\n    useful for data structures such as a narrow matrix. A loop is still required\n    because vectors may actually have fewer than `N` lanes.\n\n-   For exactly a power of two `N` lanes, specify `FixedTag<T, N>`. The largest\n    supported `N` depends on the target, but is guaranteed to be at least\n    `16/sizeof(T)`.\n\nDue to ADL restrictions, user code calling Highway ops must either:\n*   Reside inside `namespace hwy { namespace HWY_NAMESPACE {`; or\n*   prefix each op with an alias such as `namespace hn = hwy::HWY_NAMESPACE;\n    hn::Add()`; or\n*   add using-declarations for each op used: `using hwy::HWY_NAMESPACE::Add;`.\n\nAdditionally, each function that calls Highway ops (such as `Load`) must either\nbe prefixed with `HWY_ATTR`, OR reside between `HWY_BEFORE_NAMESPACE()` and\n`HWY_AFTER_NAMESPACE()`. Lambda functions currently require `HWY_ATTR` before\ntheir opening brace.\n\nDo not use namespace-scope nor `static` initializers for SIMD vectors because\nthis can cause SIGILL when using runtime dispatch and the compiler chooses an\ninitializer compiled for a target not supported by the current CPU. Instead,\nconstants initialized via `Set` should generally be local (const) variables.\n\nThe entry points into code using Highway differ slightly depending on whether\nthey use static or dynamic dispatch. In both cases, we recommend that the\ntop-level function receives one or more pointers to arrays, rather than\ntarget-specific vector types.\n\n*   For static dispatch, `HWY_TARGET` will be the best available target among\n    `HWY_BASELINE_TARGETS`, i.e. those allowed for use by the compiler (see\n    [quick-reference](g3doc/quick_reference.md)). Functions inside\n    `HWY_NAMESPACE` can be called using `HWY_STATIC_DISPATCH(func)(args)` within\n    the same module they are defined in. You can call the function from other\n    modules by wrapping it in a regular function and declaring the regular\n    function in a header.\n\n*   For dynamic dispatch, a table of function pointers is generated via the\n    `HWY_EXPORT` macro that is used by `HWY_DYNAMIC_DISPATCH(func)(args)` to\n    call the best function pointer for the current CPU's supported targets. A\n    module is automatically compiled for each target in `HWY_TARGETS` (see\n    [quick-reference](g3doc/quick_reference.md)) if `HWY_TARGET_INCLUDE` is\n    defined and `foreach_target.h` is included. Note that the first invocation\n    of `HWY_DYNAMIC_DISPATCH`, or each call to the pointer returned by the first\n    invocation of `HWY_DYNAMIC_POINTER`, involves some CPU detection overhead.\n    You can prevent this by calling the following before any invocation of\n    `HWY_DYNAMIC_*`: `hwy::GetChosenTarget().Update(hwy::SupportedTargets());`.\n\nSee also a separate\n[introduction to dynamic dispatch](https://github.com/kfjahnke/zimt/blob/multi_isa/examples/multi_isa_example/multi_simd_isa.md)\nby @kfjahnke.\n\nWhen using dynamic dispatch, `foreach_target.h` is included from translation\nunits (.cc files), not headers. Headers containing vector code shared between\nseveral translation units require a special include guard, for example the\nfollowing taken from `examples/skeleton-inl.h`:\n\n```\n#if defined(HIGHWAY_HWY_EXAMPLES_SKELETON_INL_H_) == defined(HWY_TARGET_TOGGLE)\n#ifdef HIGHWAY_HWY_EXAMPLES_SKELETON_INL_H_\n#undef HIGHWAY_HWY_EXAMPLES_SKELETON_INL_H_\n#else\n#define HIGHWAY_HWY_EXAMPLES_SKELETON_INL_H_\n#endif\n\n#include \"hwy/highway.h\"\n// Your vector code\n#endif\n```\n\nBy convention, we name such headers `-inl.h` because their contents (often\nfunction templates) are usually inlined.\n\n## Compiler flags\n\nApplications should be compiled with optimizations enabled. Without inlining\nSIMD code may slow down by factors of 10 to 100. For clang and GCC, `-O2` is\ngenerally sufficient.\n\nFor MSVC, we recommend compiling with `/Gv` to allow non-inlined functions to\npass vector arguments in registers. If intending to use the AVX2 target together\nwith half-width vectors (e.g. for `PromoteTo`), it is also important to compile\nwith `/arch:AVX2`. This seems to be the only way to reliably generate\nVEX-encoded SSE instructions on MSVC. Sometimes MSVC generates VEX-encoded SSE\ninstructions, if they are mixed with AVX, but not always, see\n[DevCom-10618264](https://developercommunity.visualstudio.com/t/10618264).\nOtherwise, mixing VEX-encoded AVX2 instructions and non-VEX SSE may cause severe\nperformance degradation. Unfortunately, with `/arch:AVX2` option, the resulting\nbinary will then require AVX2. Note that no such flag is needed for clang and\nGCC because they support target-specific attributes, which we use to ensure\nproper VEX code generation for AVX2 targets.\n\n## Strip-mining loops\n\nWhen vectorizing a loop, an important question is whether and how to deal with\na number of iterations ('trip count', denoted `count`) that does not evenly\ndivide the vector size `N = Lanes(d)`. For example, it may be necessary to avoid\nwriting past the end of an array.\n\nIn this section, let `T` denote the element type and `d = ScalableTag<T>`.\nAssume the loop body is given as a function `template<bool partial, class D>\nvoid LoopBody(D d, size_t index, size_t max_n)`.\n\n\"Strip-mining\" is a technique for vectorizing a loop by transforming it into an\nouter loop and inner loop, such that the number of iterations in the inner loop\nmatches the vector width. Then, the inner loop is replaced with vector\noperations.\n\nHighway offers several strategies for loop vectorization:\n\n*   Ensure all inputs/outputs are padded. Then the (outer) loop is simply\n\n    ```\n    for (size_t i = 0; i < count; i += N) LoopBody<false>(d, i, 0);\n    ```\n    Here, the template parameter and second function argument are not needed.\n\n    This is the preferred option, unless `N` is in the thousands and vector\n    operations are pipelined with long latencies. This was the case for\n    supercomputers in the 90s, but nowadays ALUs are cheap and we see most\n    implementations split vectors into 1, 2 or 4 parts, so there is little cost\n    to processing entire vectors even if we do not need all their lanes. Indeed\n    this avoids the (potentially large) cost of predication or partial\n    loads/stores on older targets, and does not duplicate code.\n\n*   Process whole vectors and include previously processed elements\n    in the last vector:\n    ```\n    for (size_t i = 0; i < count; i += N) LoopBody<false>(d, HWY_MIN(i, count - N), 0);\n    ```\n\n    This is the second preferred option provided that `count >= N`\n    and `LoopBody` is idempotent. Some elements might be processed twice, but\n    a single code path and full vectorization is usually worth it. Even if\n    `count < N`, it usually makes sense to pad inputs/outputs up to `N`.\n\n*   Use the `Transform*` functions in hwy/contrib/algo/transform-inl.h. This\n    takes care of the loop and remainder handling and you simply define a\n    generic lambda function (C++14) or functor which receives the current vector\n    from the input/output array, plus optionally vectors from up to two extra\n    input arrays, and returns the value to write to the input/output array.\n\n    Here is an example implementing the BLAS function SAXPY (`alpha * x + y`):\n\n    ```\n    Transform1(d, x, n, y, [](auto d, const auto v, const auto v1) HWY_ATTR {\n      return MulAdd(Set(d, alpha), v, v1);\n    });\n    ```\n\n*   Process whole vectors as above, followed by a scalar loop:\n\n    ```\n    size_t i = 0;\n    for (; i + N <= count; i += N) LoopBody<false>(d, i, 0);\n    for (; i < count; ++i) LoopBody<false>(CappedTag<T, 1>(), i, 0);\n    ```\n    The template parameter and second function arguments are again not needed.\n\n    This avoids duplicating code, and is reasonable if `count` is large.\n    If `count` is small, the second loop may be slower than the next option.\n\n*   Process whole vectors as above, followed by a single call to a modified\n    `LoopBody` with masking:\n\n    ```\n    size_t i = 0;\n    for (; i + N <= count; i += N) {\n      LoopBody<false>(d, i, 0);\n    }\n    if (i < count) {\n      LoopBody<true>(d, i, count - i);\n    }\n    ```\n    Now the template parameter and third function argument can be used inside\n    `LoopBody` to non-atomically 'blend' the first `num_remaining` lanes of `v`\n    with the previous contents of memory at subsequent locations:\n    `BlendedStore(v, FirstN(d, num_remaining), d, pointer);`. Similarly,\n    `MaskedLoad(FirstN(d, num_remaining), d, pointer)` loads the first\n    `num_remaining` elements and returns zero in other lanes.\n\n    This is a good default when it is infeasible to ensure vectors are padded,\n    but is only safe `#if !HWY_MEM_OPS_MIGHT_FAULT`!\n    In contrast to the scalar loop, only a single final iteration is needed.\n    The increased code size from two loop bodies is expected to be worthwhile\n    because it avoids the cost of masking in all but the final iteration.\n\n## Additional resources\n\n*   [Highway introduction (slides)](g3doc/highway_intro.pdf)\n*   [Overview of instructions per operation on different architectures](g3doc/instruction_matrix.pdf)\n*   [Design philosophy and comparison](g3doc/design_philosophy.md)\n*   [Implementation details](g3doc/impl_details.md)\n\n## Acknowledgments\n\nWe have used [farm-sve](https://gitlab.inria.fr/bramas/farm-sve) by Berenger\nBramas; it has proved useful for checking the SVE port on an x86 development\nmachine.\n\nThis is not an officially supported Google product.\nContact: janwas@google.com\n"
        },
        {
          "name": "WORKSPACE",
          "type": "blob",
          "size": 1.611328125,
          "content": "workspace(name = \"highway\")\n\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\nload(\"@bazel_tools//tools/build_defs/repo:utils.bzl\", \"maybe\")\n\n# Bazel platform rules.\nmaybe(\n    http_archive,\n    name = \"platforms\",\n    urls = [\n        \"https://github.com/bazelbuild/platforms/releases/download/0.0.7/platforms-0.0.7.tar.gz\",\n    ],\n    sha256 = \"3a561c99e7bdbe9173aa653fd579fe849f1d8d67395780ab4770b1f381431d51\",\n)\n\nmaybe(\n    http_archive,\n    name = \"com_google_googletest\",\n    urls = [\"https://github.com/google/googletest/archive/e2239ee6043f73722e7aa812a459f54a28552929.zip\"],\n    sha256 = \"8daa1a71395892f7c1ec5f7cb5b099a02e606be720d62f1a6a98f8f8898ec826\",\n    strip_prefix = \"googletest-e2239ee6043f73722e7aa812a459f54a28552929\",\n)\n\n# See https://google.github.io/googletest/quickstart-bazel.html\nmaybe(\n    http_archive,\n    name = \"rules_cc\",\n    urls = [\"https://github.com/bazelbuild/rules_cc/releases/download/0.0.9/rules_cc-0.0.9.tar.gz\"],\n    sha256 = \"2037875b9a4456dce4a79d112a8ae885bbc4aad968e6587dca6e64f3a0900cdf\",\n    strip_prefix = \"rules_cc-0.0.9\",\n)\n\n# Need recent version for config_setting_group\nmaybe(\n    http_archive,\n    name = \"bazel_skylib\",\n    urls = [\"https://github.com/bazelbuild/bazel-skylib/releases/download/0.9.0/bazel_skylib-0.9.0.tar.gz\"],\n    sha256 = \"1dde365491125a3db70731e25658dfdd3bc5dbdfd11b840b3e987ecf043c7ca0\",\n)\n\nmaybe(\n    http_archive,\n    name = \"rules_license\",\n    urls = [\n        \"https://github.com/bazelbuild/rules_license/releases/download/0.0.7/rules_license-0.0.7.tar.gz\",\n    ],\n    sha256 = \"4531deccb913639c30e5c7512a054d5d875698daeb75d8cf90f284375fe7c360\",\n)\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "debian",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "g3doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "google_internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "hwy.gni",
          "type": "blob",
          "size": 1.201171875,
          "content": "_hwy = get_path_info(\"hwy\", \"abspath\")\n\nhwy_public = [\n  # Public\n  \"$_hwy/abort.h\",\n  \"$_hwy/aligned_allocator.h\",\n  \"$_hwy/base.h\",\n  \"$_hwy/cache_control.h\",\n  \"$_hwy/per_target.h\",\n  \"$_hwy/print.h\",\n\n  # Public, textual\n  \"$_hwy/foreach_target.h\",\n  \"$_hwy/highway_export.h\",\n  \"$_hwy/highway.h\",\n  \"$_hwy/print-inl.h\",\n  \"$_hwy/timer-inl.h\",\n\n  # Private\n  \"$_hwy/detect_compiler_arch.h\",\n  \"$_hwy/detect_targets.h\",\n  \"$_hwy/targets.h\",\n\n  # Private, textual:\n  \"$_hwy/ops/arm_neon-inl.h\",\n  \"$_hwy/ops/arm_sve-inl.h\",\n  \"$_hwy/ops/emu128-inl.h\",\n  \"$_hwy/ops/generic_ops-inl.h\",\n  \"$_hwy/ops/scalar-inl.h\",\n  \"$_hwy/ops/set_macros-inl.h\",\n  \"$_hwy/ops/shared-inl.h\",\n  \"$_hwy/ops/x86_128-inl.h\",\n  \"$_hwy/ops/x86_256-inl.h\",\n  \"$_hwy/ops/x86_512-inl.h\",\n  \"$_hwy/ops/x86_avx3-inl.h\",\n]\n\nhwy_sources = [\n  \"$_hwy/abort.cc\",\n  \"$_hwy/aligned_allocator.cc\",\n  \"$_hwy/per_target.cc\",\n  \"$_hwy/print.cc\",\n  \"$_hwy/targets.cc\",\n]\n\nhwy_contrib_public = [\n  \"$_hwy/contrib/algo/copy-inl.h\",\n  \"$_hwy/contrib/algo/find-inl.h\",\n  \"$_hwy/contrib/algo/transform-inl.h\",\n  \"$_hwy/contrib/dot/dot-inl.h\",\n  \"$_hwy/contrib/image/image.h\",\n  \"$_hwy/contrib/math/math-inl.h\",\n]\n\nhwy_contrib_sources = [\n  \"$_hwy/contrib/image/image.cc\",\n]\n"
        },
        {
          "name": "hwy",
          "type": "tree",
          "content": null
        },
        {
          "name": "libhwy-contrib.pc.in",
          "type": "blob",
          "size": 0.3125,
          "content": "prefix=@CMAKE_INSTALL_PREFIX@\nexec_prefix=${prefix}\nlibdir=${exec_prefix}/@CMAKE_INSTALL_LIBDIR@\nincludedir=${prefix}/@CMAKE_INSTALL_INCLUDEDIR@\n\nName: libhwy-contrib\nDescription: Additions to Highway: dot product, image, math, sort\nVersion: @HWY_LIBRARY_VERSION@\nLibs: -L${libdir} -lhwy_contrib\nCflags: -I${includedir}\n"
        },
        {
          "name": "libhwy-test.pc.in",
          "type": "blob",
          "size": 0.376953125,
          "content": "prefix=@CMAKE_INSTALL_PREFIX@\nexec_prefix=${prefix}\nlibdir=${exec_prefix}/@CMAKE_INSTALL_LIBDIR@\nincludedir=${prefix}/@CMAKE_INSTALL_INCLUDEDIR@\n\nName: libhwy-test\nDescription: Efficient and performance-portable SIMD wrapper, test helpers.\nRequires: @HWY_PC_HWY_TEST_REQUIRES@\nVersion: @HWY_LIBRARY_VERSION@\nLibs: -L${libdir} -lhwy_test\nCflags: -I${includedir} @HWY_PC_HWY_TEST_CFLAGS@\n"
        },
        {
          "name": "libhwy.pc.in",
          "type": "blob",
          "size": 0.3154296875,
          "content": "prefix=@CMAKE_INSTALL_PREFIX@\nexec_prefix=${prefix}\nlibdir=${exec_prefix}/@CMAKE_INSTALL_LIBDIR@\nincludedir=${prefix}/@CMAKE_INSTALL_INCLUDEDIR@\n\nName: libhwy\nDescription: Efficient and performance-portable SIMD wrapper\nVersion: @HWY_LIBRARY_VERSION@\nLibs: -L${libdir} -lhwy\nCflags: -I${includedir} -D@DLLEXPORT_TO_DEFINE@\n"
        },
        {
          "name": "preamble.js.lds",
          "type": "blob",
          "size": 0.3828125,
          "content": "/*\n * Copyright 2019 Google LLC\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* mock crypto module for benchmarks and unit tests or std::random_device fails at runtime */\nvar crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"
        },
        {
          "name": "run_tests.bat",
          "type": "blob",
          "size": 0.28125,
          "content": "@echo off\nREM Switch directory of this batch file\ncd %~dp0\n\nif not exist build_win mkdir build_win\n\ncd build_win\ncmake .. -DHWY_WARNINGS_ARE_ERRORS:BOOL=ON -G Ninja || goto error\nninja || goto error\nctest -j || goto error\n\ncd ..\necho Success\ngoto end\n\n:error\necho Failure\nexit /b 1\n\n:end\n"
        },
        {
          "name": "run_tests.sh",
          "type": "blob",
          "size": 5.353515625,
          "content": "#!/bin/bash\n\n# Switch to directory of this script\nMYDIR=$(dirname $(realpath \"$0\"))\ncd \"${MYDIR}\"\n\n# Exit if anything fails\nset -e\n\n#######################################\necho RELEASE\nrm -rf build && mkdir build && cd build\ncmake .. -DHWY_WARNINGS_ARE_ERRORS:BOOL=ON -DCMAKE_BUILD_TYPE=Release\nmake -j && ctest -j && cd .. && rm -rf build\n\n#######################################\necho DEBUG Clang 13\nrm -rf build_dbg && mkdir build_dbg && cd build_dbg\nCXX=clang++-13 CC=clang-13 cmake .. -DHWY_WARNINGS_ARE_ERRORS:BOOL=ON -DCMAKE_BUILD_TYPE=Debug\nmake -j && ctest -j && cd .. && rm -rf build_dbg\n\n#######################################\necho 32-bit GCC\nrm -rf build_32 && mkdir build_32 && cd build_32\nCFLAGS=-m32 CXXFLAGS=-m32 LDFLAGS=-m32 CXX=g++ CC=gcc cmake .. -DHWY_WARNINGS_ARE_ERRORS:BOOL=ON -DHWY_CMAKE_SSE2:BOOL=ON  -DCMAKE_BUILD_TYPE=Release\nmake -j && ctest -j && cd .. && rm -rf build_32\n\n#######################################\nfor VER in 11 12 13; do\n  echo GCC $VER\n  rm -rf build_g$VER && mkdir build_g$VER && cd build_g$VER\n  CC=gcc-$VER CXX=g++-$VER cmake .. -DHWY_WARNINGS_ARE_ERRORS:BOOL=ON -DCMAKE_BUILD_TYPE=Release\n  make -j && make test && cd .. && rm -rf build_g$VER\ndone\n\n#######################################\necho Armv7 GCC\nexport QEMU_LD_PREFIX=/usr/arm-linux-gnueabihf\nrm -rf build_arm7 && mkdir build_arm7 && cd build_arm7\nCC=arm-linux-gnueabihf-gcc-11 CXX=arm-linux-gnueabihf-g++-11 cmake .. -DHWY_CMAKE_ARM7:BOOL=ON -DHWY_WARNINGS_ARE_ERRORS:BOOL=ON -DCMAKE_BUILD_TYPE=Release\nmake -j && ctest -j && cd .. && rm -rf build_arm7\n\n#######################################\necho Armv8 GCC\nexport QEMU_LD_PREFIX=/usr/aarch64-linux-gnu\nrm -rf build_arm8 && mkdir build_arm8 && cd build_arm8\nCC=aarch64-linux-gnu-gcc-11 CXX=aarch64-linux-gnu-g++-11 cmake .. -DHWY_WARNINGS_ARE_ERRORS:BOOL=ON -DCMAKE_BUILD_TYPE=Release\nmake -j && ctest -j && cd .. && rm -rf build_arm8\n\n#######################################\necho POWER GCC\nexport QEMU_LD_PREFIX=/usr/powerpc64le-linux-gnu\nrm -rf build_ppc_gcc && mkdir build_ppc_gcc && cd build_ppc_gcc\nCC=powerpc64le-linux-gnu-gcc-12 CXX=powerpc64le-linux-gnu-g++-12 cmake .. -DCMAKE_BUILD_TYPE=Release -DHWY_WARNINGS_ARE_ERRORS:BOOL=ON -DCMAKE_CROSSCOMPILING_EMULATOR=/usr/bin/qemu-ppc64le-static -DCMAKE_C_COMPILER_TARGET=\"powerpc64le-linux-gnu\" -DCMAKE_CXX_COMPILER_TARGET=\"powerpc64le-linux-gnu\" -DCMAKE_CROSSCOMPILING=true -DCMAKE_SYSTEM_NAME=Linux\n\nclear && make -j && ctest -j && cd .. && rm -rf build_ppc_gcc\n\n#######################################\necho POWER clang\nexport QEMU_LD_PREFIX=/usr/powerpc64le-linux-gnu\nrm -rf build_ppc_clang && mkdir build_ppc_clang && cd build_ppc_clang\nCC=clang-15 CXX=clang++-15 cmake .. -DCMAKE_BUILD_TYPE=Release -DHWY_WARNINGS_ARE_ERRORS:BOOL=ON -DCMAKE_CROSSCOMPILING_EMULATOR=/usr/bin/qemu-ppc64le-static -DCMAKE_C_COMPILER_TARGET=\"powerpc64le-linux-gnu\" -DCMAKE_CXX_COMPILER_TARGET=\"powerpc64le-linux-gnu\" -DCMAKE_CROSSCOMPILING=true -DCMAKE_SYSTEM_NAME=Linux\n\nclear && make -j && ctest -j && cd .. && rm -rf build_ppc_clang\n\n#######################################\necho POWER big endian GCC\nexport QEMU_LD_PREFIX=/usr/powerpc64-linux-gnu\nrm -rf build_ppc9be && mkdir build_ppc9be && cd build_ppc9be\nCC=powerpc64-linux-gnu-gcc-11 CXX=powerpc64-linux-gnu-g++-11 cmake .. -DCMAKE_BUILD_TYPE=Release -DHWY_WARNINGS_ARE_ERRORS:BOOL=ON -DCMAKE_CROSSCOMPILING_EMULATOR=/usr/bin/qemu-ppc64 -DCMAKE_SYSTEM_NAME=Linux -DCMAKE_C_COMPILER_TARGET=\"powerpc64-linux-musl\" -DCMAKE_CXX_COMPILER_TARGET=\"powerpc64-linux-musl\" -DCMAKE_CROSSCOMPILING=true  -DCMAKE_SYSTEM_NAME=Linux\nclear && make -j && ctest -j && cd .. && rm -rf build_ppc9be\n\n#######################################\necho Z14\nexport QEMU_LD_PREFIX=/usr/s390x-linux-gnu\nrm -rf build_z14 && mkdir build_z14 && cd build_z14\nCC=s390x-linux-gnu-gcc-11 CXX=s390x-linux-gnu-g++-11 cmake .. -DCMAKE_C_COMPILER_TARGET=\"s390x-linux-gnu\" -DCMAKE_CXX_COMPILER_TARGET=\"s390x-linux-gnu\" -DCMAKE_C_FLAGS='-march=z14 -mzvector' -DCMAKE_CXX_FLAGS='-march=z14 -mzvector -DHWY_DISABLED_TARGETS=\"(HWY_SCALAR|HWY_EMU128|HWY_Z15)\" -DHWY_COMPILE_ONLY_STATIC=1' -DCMAKE_CROSSCOMPILING=true -DCMAKE_CROSSCOMPILING_EMULATOR=\"/usr/bin/qemu-s390x;-L;/usr/s390x-linux-gnu\" -DCMAKE_SYSTEM_NAME=Linux\nclear && make -j && ctest -j && cd .. && rm -rf build_z14\n\n#######################################\necho Z15\nexport QEMU_LD_PREFIX=/usr/s390x-linux-gnu\nrm -rf build_z15 && mkdir build_z15 && cd build_z15\nCC=s390x-linux-gnu-gcc-11 CXX=s390x-linux-gnu-g++-11 cmake .. -DCMAKE_C_COMPILER_TARGET=\"s390x-linux-gnu\" -DCMAKE_CXX_COMPILER_TARGET=\"s390x-linux-gnu\" -DCMAKE_C_FLAGS='-march=z15 -mzvector' -DCMAKE_CXX_FLAGS='-march=z15 -mzvector -DHWY_DISABLED_TARGETS=\"(HWY_SCALAR|HWY_EMU128|HWY_Z14)\" -DHWY_COMPILE_ONLY_STATIC=1' -DCMAKE_CROSSCOMPILING=true -DCMAKE_CROSSCOMPILING_EMULATOR=\"/usr/bin/qemu-s390x;-cpu;max,vxeh2=on;-L;/usr/s390x-linux-gnu\" -DCMAKE_SYSTEM_NAME=Linux\nclear && make -j && ctest -j && cd .. && rm -rf build_z15\n\n#######################################\necho RVV\nexport QEMU_LD_PREFIX=/usr/riscv64-linux-gnu\nrm -rf build_rvv && mkdir build_rvv && cd build_rvv\nCC=riscv64-linux-gnu-gcc-13 CXX=riscv64-linux-gnu-g++-13 cmake .. -DCMAKE_C_COMPILER_TARGET=\"riscv64-linux-gnu\" -DCMAKE_CXX_COMPILER_TARGET=\"riscv64-linux-gnu\" -DCMAKE_CROSSCOMPILING=true -DCMAKE_CROSSCOMPILING_EMULATOR=\"/usr/bin/qemu-riscv64;-cpu;max;-L;/usr/riscv64-linux-gnu\" -DCMAKE_SYSTEM_NAME=Linux\nclear && make -j && ctest -j && cd .. && rm -rf build_rvv\n\n\necho Success\n"
        }
      ]
    }
  ]
}