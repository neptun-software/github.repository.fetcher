{
  "metadata": {
    "timestamp": 1736565478716,
    "page": 336,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Haivision/srt",
      "stars": 3163,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".appveyor.yml",
          "type": "blob",
          "size": 1.1103515625,
          "content": "configuration:\n  - Release\n  - Debug\n\nimage:\n  - Visual Studio 2022\n  - Visual Studio 2019\n  - Visual Studio 2015\n\nplatform:\n  - x64\n  - x86\n\nbuild_script:\n  - ps: $VSIMG = $Env:APPVEYOR_BUILD_WORKER_IMAGE; $CNFG = $Env:CONFIGURATION\n  # use a few differing arguments depending on VS version to exercise different options during builds\n  - ps: if ($CNFG -eq \"Release\") { .\\scripts\\build-windows.ps1 -STATIC_LINK_SSL ON -BUILD_APPS ON -UNIT_TESTS ON -BONDING ON}\n  - ps: if ($CNFG -eq \"Debug\") { if ($VSIMG -match '2015') { .\\scripts\\build-windows.ps1 -STATIC_LINK_SSL ON -BUILD_APPS OFF } else {.\\scripts\\build-windows.ps1 -STATIC_LINK_SSL ON -BUILD_APPS ON }}\n\ntest_script:\n  - ps: if ( $Env:RUN_UNIT_TESTS ) { cd ./_build; ctest -E \"TestIPv6.v6_calls_v4\" --extra-verbose -C $Env:CONFIGURATION; cd ../ }\n  \nafter_build:\n- cmd: >-\n    scripts/gather-package.bat\n        7z a SRT-%APPVEYOR_REPO_BRANCH%-%CONFIGURATION%-Win%PLATFORM%-%VS_VERSION%-%APPVEYOR_BUILD_VERSION%.zip %APPVEYOR_BUILD_FOLDER%\\package\\*\n        appveyor PushArtifact SRT-%APPVEYOR_REPO_BRANCH%-%CONFIGURATION%-Win%PLATFORM%-%VS_VERSION%-%APPVEYOR_BUILD_VERSION%.zip\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.82421875,
          "content": "Language:      Cpp\nBasedOnStyle:  LLVM\nAccessModifierOffset: -4\n# AlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: true\nAlignConsecutiveDeclarations: true\n# AlignEscapedNewlinesLeft: false\nAlignOperands:   true\nAlignTrailingComments: true\n# AllowAllArgumentsOnNextLine: true    # Requires clang-format v9 and higher\n# AllowAllConstructorInitializersOnNextLine: false\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: false\n# AllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: Inline\n# AllowShortIfStatementsOnASingleLine: false\n# AllowShortLoopsOnASingleLine: false\n# AlwaysBreakAfterDefinitionReturnType: None\n# AlwaysBreakAfterReturnType: None\n# AlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: true\nBinPackArguments: false\nBinPackParameters: false\n# BraceWrapping:   \n#   AfterClass:      false\n#   AfterControlStatement: false\n#   AfterEnum:       false\n#   AfterFunction:   false\n#   AfterNamespace:  false\n#   AfterObjCDeclaration: false\n#   AfterStruct:     false\n#   AfterUnion:      false\n#   BeforeCatch:     false\n#   BeforeElse:      false\n#   IndentBraces:    false\n# BreakBeforeBinaryOperators: None\nBreakBeforeBraces: Allman\n# BreakInheritanceList: BeforeComma\n# BreakBeforeTernaryOperators: true\nBreakConstructorInitializers: BeforeComma\n# BreakAfterJavaFieldAnnotations: false\n# BreakStringLiterals: true\nColumnLimit:     120\n# CommentPragmas:  '^ IWYU pragma:'\n# ConstructorInitializerAllOnOneLineOrOnePerLine: false\n# ConstructorInitializerIndentWidth: 4\n# ContinuationIndentWidth: 4\n# Cpp11BracedListStyle: true\n# DerivePointerAlignment: false\n# DisableFormat:   false\n# ExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\n# ForEachMacros:   [ foreach, Q_FOREACH, BOOST_FOREACH ]\n# IncludeIsMainRegex: '$'\n# IndentCaseLabels: false\nIndentWidth:     4\n# IndentWrappedFunctionNames: false\n# JavaScriptQuotes: Leave\n# JavaScriptWrapImports: true\n# KeepEmptyLinesAtTheStartOfBlocks: true\n# MacroBlockBegin: ''\n# MacroBlockEnd:   ''\n# MaxEmptyLinesToKeep: 1\n# NamespaceIndentation: None\n# ObjCBlockIndentWidth: 2\n# ObjCSpaceAfterProperty: false\n# ObjCSpaceBeforeProtocolList: true\n# PenaltyBreakBeforeFirstCallParameter: 19\n# PenaltyBreakComment: 300\n# PenaltyBreakFirstLessLess: 120\n# PenaltyBreakString: 1000\n# PenaltyExcessCharacter: 1000000\n# PenaltyReturnTypeOnItsOwnLine: 60\nPointerAlignment: Left\n# ReflowComments:  true\nSortIncludes:    false\n# SpaceAfterCStyleCast: false\n# SpaceAfterTemplateKeyword: true\n# SpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\n# SpaceInEmptyParentheses: false\n# SpacesBeforeTrailingComments: 1\n# SpacesInAngles:  false\n# SpacesInContainerLiterals: true\n# SpacesInCStyleCastParentheses: false\n# SpacesInParentheses: false\n# SpacesInSquareBrackets: false\nStandard: Cpp03\nTabWidth:        4\nUseTab:          Never\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.49609375,
          "content": "# Prerequisites\n*.d\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n*.smod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\n# Ignore any folder starting from underscore\n_*/\n\n# Ignode Visual Studio Code temp folder\n.vs/\n.vscode/\n\n# Ignore vcpkg submodule\nvcpkg/\n\n# LSP\ncompile_commands.json\n\n# ignore files generated by clion and cmake\n.idea/\ncmake-build-debug/\n"
        },
        {
          "name": ".lgtm.yml",
          "type": "blob",
          "size": 0.1064453125,
          "content": "extraction:\n  cpp:\n    configure:\n      command:\n      - cmake . -DENABLE_HEAVY_LOGGING=1 -DENABLE_BONDING=1\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 2.7587890625,
          "content": "language: cpp\ndist: xenial\n\naddons:\n    apt:\n        packages:\n        - tclsh\n        - pkg-config\n        - cmake\n        - libssl-dev\n        - build-essential\n        - libmbedtls-dev\n        - gdb\n    homebrew:\n        update: false\n        packages:\n        - openssl\n\nmatrix:\n    include:\n        - os: linux\n          env:\n          - BUILD_TYPE=Debug\n          - BUILD_OPTS='-DENABLE_BONDING=ON -DCMAKE_CXX_FLAGS=\"-Werror\"'\n        - env:\n          - BUILD_TYPE=Debug\n          - BUILD_OPTS='-DENABLE_LOGGING=OFF -DUSE_ENCLIB=mbedtls -DENABLE_MONOTONIC_CLOCK=ON -DENABLE_BONDING=ON -DCMAKE_CXX_FLAGS=\"-Werror\"'\n        - os: linux\n          env: BUILD_TYPE=Release\n        - os: osx\n          osx_image: xcode11.1\n          env:\n          - BUILD_TYPE=Debug\n          - BUILD_OPTS='-DCMAKE_CXX_FLAGS=\"-Werror\"'\n        - os: osx\n          osx_image: xcode11.1\n          env:\n          - BUILD_TYPE=Release\n          - BUILD_OPTS='-DCMAKE_CXX_FLAGS=\"-Werror\"'\n        - os: linux\n          compiler: x86_64-w64-mingw32-g++\n          addons:\n            apt:\n              packages:\n                - gcc-mingw-w64-base\n                - binutils-mingw-w64-x86-64\n                - gcc-mingw-w64-x86-64\n                - gcc-mingw-w64\n                - g++-mingw-w64-x86-64\n          before_script:\n            - git clone -b OpenSSL_1_1_1g https://github.com/openssl/openssl.git openssl\n            - cd openssl\n            - ./Configure --cross-compile-prefix=x86_64-w64-mingw32- mingw64\n            - make\n            - cd ..\n          env: BUILD_TYPE=Release\n\n         # Power jobs\n        - os: linux\n          arch: ppc64le\n          env:\n          - BUILD_TYPE=Debug\n        - arch: ppc64le\n          env:\n          - BUILD_TYPE=Release\n          - BUILD_OPTS='-DENABLE_MONOTONIC_CLOCK=ON'\nscript:\n    - if [ \"$TRAVIS_COMPILER\" == \"x86_64-w64-mingw32-g++\" ]; then\n        export CC=\"x86_64-w64-mingw32-gcc\";\n        export CXX=\"x86_64-w64-mingw32-g++\";\n        cmake . -DCMAKE_BUILD_TYPE=$BUILD_TYPE $BUILD_OPTS -DENABLE_UNITTESTS=\"OFF\" -DUSE_OPENSSL_PC=\"OFF\" -DOPENSSL_ROOT_DIR=\"$PWD/openssl\" -DCMAKE_SYSTEM_NAME=\"Windows\";\n      elif [ \"$TRAVIS_OS_NAME\" == \"linux\" ]; then\n        cmake . -DCMAKE_BUILD_TYPE=$BUILD_TYPE $BUILD_OPTS -DENABLE_UNITTESTS=\"ON\";\n      elif [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then\n        export PKG_CONFIG_PATH=$(brew --prefix openssl)\"/lib/pkgconfig\";\n        cmake . -DCMAKE_BUILD_TYPE=$BUILD_TYPE $BUILD_OPTS -DENABLE_UNITTESTS=\"ON\";\n      fi\n    - make -j$(nproc);\n    - if [ \"$TRAVIS_COMPILER\" != \"x86_64-w64-mingw32-g++\" ]; then\n        ulimit -c unlimited;\n        ./test-srt -disable-ipv6;\n        SUCCESS=$?;\n        if [ -f core ]; then gdb -batch ./test-srt -c core -ex bt -ex \"info thread\" -ex quit; else echo \"NO CORE - NO CRY!\"; fi;\n        test $SUCCESS == 0;\n      fi\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 52.6220703125,
          "content": "#\n# SRT - Secure, Reliable, Transport\n# Copyright (c) 2018 Haivision Systems Inc.\n#\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n#\n\ncmake_minimum_required (VERSION 2.8.12 FATAL_ERROR)\nset (SRT_VERSION 1.5.4)\n\nset (CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/scripts\")\ninclude(haiUtil) # needed for set_version_variables\n# CMake version 3.0 introduced the VERSION option of the project() command\n# to specify a project version as well as the name.\nif(${CMAKE_VERSION} VERSION_LESS \"3.0.0\")\n\tproject(SRT C CXX)\n\t# Sets SRT_VERSION_MAJOR, SRT_VERSION_MINOR, SRT_VERSION_PATCH\n\tset_version_variables(SRT_VERSION ${SRT_VERSION})\nelse()\n\tcmake_policy(SET CMP0048 NEW)\n\t# Also sets SRT_VERSION_MAJOR, SRT_VERSION_MINOR, SRT_VERSION_PATCH\n\tproject(SRT VERSION ${SRT_VERSION} LANGUAGES C CXX)\nendif()\n\nif (NOT ${CMAKE_VERSION} VERSION_LESS \"3.28.1\")\n\tcmake_policy(SET CMP0054 NEW)\nendif ()\n\ninclude(FindPkgConfig)\n# XXX See 'if (MINGW)' condition below, may need fixing.\ninclude(FindThreads)\ninclude(CheckFunctionExists)\n\n# Platform shortcuts\nstring(TOLOWER ${CMAKE_SYSTEM_NAME} SYSNAME_LC)\nset_if(DARWIN\t   (${CMAKE_SYSTEM_NAME} MATCHES \"Darwin\")\n\t\t\t\t\tOR (${CMAKE_SYSTEM_NAME} MATCHES \"iOS\")\n\t\t\t\t\tOR (${CMAKE_SYSTEM_NAME} MATCHES \"tvOS\")\n\t\t\t\t\tOR (${CMAKE_SYSTEM_NAME} MATCHES \"watchOS\")\n\t\t\t\t\tOR (${CMAKE_SYSTEM_NAME} MATCHES \"visionOS\"))\nset_if(LINUX       ${CMAKE_SYSTEM_NAME} MATCHES \"Linux\")\nset_if(BSD         ${SYSNAME_LC} MATCHES \"bsd$\")\nset_if(MICROSOFT   WIN32 AND (NOT MINGW AND NOT CYGWIN))\nset_if(GNU         ${CMAKE_SYSTEM_NAME} MATCHES \"GNU\")\nset_if(ANDROID     ${SYSNAME_LC} MATCHES \"android\")\nset_if(SUNOS       \"${SYSNAME_LC}\" MATCHES \"sunos\")\nset_if(POSIX       LINUX OR DARWIN OR BSD OR SUNOS OR ANDROID OR (CYGWIN AND CYGWIN_USE_POSIX))\nset_if(SYMLINKABLE LINUX OR DARWIN OR BSD OR SUNOS OR CYGWIN OR GNU)\nset_if(NEED_DESTINATION  ${CMAKE_VERSION} VERSION_LESS \"3.14.0\")\n\ninclude(GNUInstallDirs)\n\n# The CMAKE_BUILD_TYPE seems not to be always set, weird.\nif (NOT DEFINED ENABLE_DEBUG)\n\n\tif (CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n\t\tset (ENABLE_DEBUG ON)\n\telse()\n\t\tset (ENABLE_DEBUG OFF)\n\tendif()\nendif()\n\n# XXX This is a kind of workaround - this part to set the build\n# type and associated other flags should not be done for build\n# systems (cmake generators) that generate a multi-configuration\n# build definition. At least it is known that MSVC does it and it\n# sets _DEBUG and NDEBUG flags itself, so this shouldn't be done\n# at all in this case.\nif (NOT MICROSOFT)\n\n\t# Set CMAKE_BUILD_TYPE properly, now that you know\n\t# that ENABLE_DEBUG is set as it should.\n\tif (ENABLE_DEBUG EQUAL 2)\n\t\tset (CMAKE_BUILD_TYPE \"RelWithDebInfo\")\n\t\tif (ENABLE_ASSERT)\n\t\t\t# Add _DEBUG macro if explicitly requested, to enable SRT_ASSERT().\n\t\t\tadd_definitions(-D_DEBUG)\n\t\telse()\n\t\t\tadd_definitions(-DNDEBUG)\n\t\tendif()\n\telseif (ENABLE_DEBUG) # 1, ON, YES, TRUE, Y, or any other non-zero number\n\t\tset (CMAKE_BUILD_TYPE \"Debug\")\n\n\t\t# Add _DEBUG macro in debug mode only, to enable SRT_ASSERT().\n\t\tadd_definitions(-D_DEBUG)\n\telse()\n\t\tset (CMAKE_BUILD_TYPE \"Release\")\n\t\tadd_definitions(-DNDEBUG)\n\tendif()\nendif()\n\nmessage(STATUS \"BUILD TYPE: ${CMAKE_BUILD_TYPE}\")\n\ngetVarsWith(ENFORCE_ enforcers)\nforeach(ef ${enforcers})\n\tset (val ${${ef}})\n\tif (NOT val STREQUAL \"\")\n\t\tset(val =${val})\n\tendif()\n\tstring(LENGTH ENFORCE_ pflen)\n\tstring(LENGTH ${ef} eflen)\n\tmath(EXPR alen ${eflen}-${pflen})\n\tstring(SUBSTRING ${ef} ${pflen} ${alen} ef)\n\tmessage(STATUS \"FORCED PP VARIABLE: ${ef}${val}\")\n\tadd_definitions(-D${ef}${val})\nendforeach()\n\n# NOTE: Known options you can change using ENFORCE_ variables:\n\n# SRT_ENABLE_ECN 1                /* Early Congestion Notification (for source bitrate control) */\n# SRT_DEBUG_TSBPD_OUTJITTER 1     /* Packet Delivery histogram */\n# SRT_DEBUG_TRACE_DRIFT 1         /* Create a trace log for Encoder-Decoder Clock Drift */\n# SRT_DEBUG_TSBPD_WRAP 1          /* Debug packet timestamp wraparound */\n# SRT_DEBUG_TLPKTDROP_DROPSEQ 1\n# SRT_DEBUG_SNDQ_HIGHRATE 1\n# SRT_DEBUG_BONDING_STATES 1\n# SRT_DEBUG_RTT 1                 /* RTT trace */\n# SRT_MAVG_SAMPLING_RATE 40       /* Max sampling rate */\n# SRT_ENABLE_FREQUENT_LOG_TRACE 0 : set to 1 to enable printing reason for suppressed freq logs\n\n# option defaults\nset(ENABLE_HEAVY_LOGGING_DEFAULT OFF)\n\n# Always turn logging on if the build type is debug\nif (ENABLE_DEBUG)\n\tset(ENABLE_HEAVY_LOGGING_DEFAULT ON)\nendif()\n\n# Note that the IP_PKTINFO  has a limited portability and may not work on some platforms\n# (Windows, FreeBSD, ...).\nset (ENABLE_PKTINFO_DEFAULT OFF)\n\nset(ENABLE_STDCXX_SYNC_DEFAULT OFF)\nset(ENABLE_MONOTONIC_CLOCK_DEFAULT OFF)\nset(MONOTONIC_CLOCK_LINKLIB \"\")\nif (MICROSOFT)\n\tset(ENABLE_STDCXX_SYNC_DEFAULT ON)\nelseif (POSIX)\n\ttest_requires_clock_gettime(ENABLE_MONOTONIC_CLOCK_DEFAULT MONOTONIC_CLOCK_LINKLIB)\nendif()\n\n\n# options\noption(CYGWIN_USE_POSIX \"Should the POSIX API be used for cygwin. Ignored if the system isn't cygwin.\" OFF)\nif (CMAKE_CXX_COMPILER_ID MATCHES \"^GNU$\" AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.7)\n\toption(ENABLE_CXX11 \"Should the c++11 parts (srt-live-transmit) be enabled\" OFF)\nelse()\n\toption(ENABLE_CXX11 \"Should the c++11 parts (srt-live-transmit) be enabled\" ON)\nendif()\noption(ENABLE_APPS \"Should the Support Applications be Built?\" ON)\noption(ENABLE_BONDING \"Should the bonding functionality be enabled?\" OFF)\noption(ENABLE_TESTING \"Should the Developer Test Applications be Built?\" OFF)\noption(ENABLE_PROFILE \"Should instrument the code for profiling. Ignored for non-GNU compiler.\" $ENV{HAI_BUILD_PROFILE})\noption(ENABLE_LOGGING \"Should logging be enabled\" ON)\noption(ENABLE_HEAVY_LOGGING \"Should heavy debug logging be enabled\" ${ENABLE_HEAVY_LOGGING_DEFAULT})\noption(ENABLE_HAICRYPT_LOGGING \"Should logging in haicrypt be enabled\" 0)\noption(ENABLE_SHARED \"Should libsrt be built as a shared library\" ON)\noption(ENABLE_STATIC \"Should libsrt be built as a static library\" ON)\noption(ENABLE_PKTINFO \"Enable using IP_PKTINFO to allow the listener extracting the target IP address from incoming packets\" ${ENABLE_PKTINFO_DEFAULT})\noption(ENABLE_RELATIVE_LIBPATH \"Should application contain relative library paths, like ../lib\" OFF)\noption(ENABLE_GETNAMEINFO \"In-logs sockaddr-to-string should do rev-dns\" OFF)\noption(ENABLE_UNITTESTS \"Enable unit tests\" OFF)\noption(ENABLE_ENCRYPTION \"Enable encryption in SRT\" ON)\noption(ENABLE_AEAD_API_PREVIEW \"Enable AEAD API preview in SRT\" Off)\noption(ENABLE_MAXREXMITBW \"Enable SRTO_MAXREXMITBW (v1.6.0 API preview)\" Off)\noption(ENABLE_CXX_DEPS \"Extra library dependencies in srt.pc for the CXX libraries useful with C language\" ON)\noption(USE_STATIC_LIBSTDCXX \"Should use static rather than shared libstdc++\" OFF)\noption(ENABLE_INET_PTON \"Set to OFF to prevent usage of inet_pton when building against modern SDKs while still requiring compatibility with older Windows versions, such as Windows XP, Windows Server 2003 etc.\" ON)\noption(ENABLE_CODE_COVERAGE \"Enable code coverage reporting\" OFF)\noption(ENABLE_MONOTONIC_CLOCK \"Enforced clock_gettime with monotonic clock on GC CV\" ${ENABLE_MONOTONIC_CLOCK_DEFAULT})\noption(ENABLE_STDCXX_SYNC \"Use C++11 chrono and threads for timing instead of pthreads\" ${ENABLE_STDCXX_SYNC_DEFAULT})\noption(USE_OPENSSL_PC \"Use pkg-config to find OpenSSL libraries\" ON)\noption(OPENSSL_USE_STATIC_LIBS \"Link OpenSSL libraries statically.\" OFF)\noption(USE_BUSY_WAITING \"Enable more accurate sending times at a cost of potentially higher CPU load\" OFF)\noption(USE_GNUSTL \"Get c++ library/headers from the gnustl.pc\" OFF)\noption(ENABLE_SOCK_CLOEXEC \"Enable setting SOCK_CLOEXEC on a socket\" ON)\noption(ENABLE_SHOW_PROJECT_CONFIG \"Enable show Project Configuration\" OFF)\n\noption(ENABLE_CLANG_TSA \"Enable Clang Thread Safety Analysis\" OFF)\n\n# NOTE: Use ATOMIC_USE_SRT_SYNC_MUTEX and will override the auto-detection of the\n#  Atomic implemetation in srtcore/atomic.h.\noption(ATOMIC_USE_SRT_SYNC_MUTEX \"Use srt::sync::Mutex to Implement Atomics\" OFF)\nif (ATOMIC_USE_SRT_SYNC_MUTEX)\n   add_definitions(-DATOMIC_USE_SRT_SYNC_MUTEX=1)\nendif()\n\nset(TARGET_srt \"srt\" CACHE STRING \"The name for the SRT library\")\n\n# Use application-defined group reader\n# (currently the only one implemented)\nadd_definitions(-DSRT_ENABLE_APP_READER)\n\n# XXX This was added once as experimental, it is now in force for\n# write-blocking-mode sockets. Still unclear if all issues around\n# closing while data still not written are eliminated.\nadd_definitions(-DSRT_ENABLE_CLOSE_SYNCH)\n\nif (NOT ENABLE_LOGGING)\n\tset (ENABLE_HEAVY_LOGGING OFF)\n\tmessage(STATUS \"LOGGING: DISABLED\")\nelse()\n\tif (ENABLE_HEAVY_LOGGING)\n\t\tmessage(STATUS \"LOGGING: HEAVY\")\n\telse()\n\t\tmessage(STATUS \"LOGGING: ENABLED\")\n\tendif()\nendif()\n\nif (USE_BUSY_WAITING)\n\tmessage(STATUS \"USE_BUSY_WAITING: ON\")\n\tlist(APPEND SRT_EXTRA_CFLAGS \"-DUSE_BUSY_WAITING=1\")\nelse()\n\tmessage(STATUS \"USE_BUSY_WAITING: OFF (default)\")\nendif()\n\n# Reduce the frequency of some frequent logs, milliseconds\nset(SRT_LOG_SLOWDOWN_FREQ_MS_DEFAULT 1000) # 1s\nif (NOT DEFINED SRT_LOG_SLOWDOWN_FREQ_MS)\n\tif (ENABLE_HEAVY_LOGGING)\n\t\tset(SRT_LOG_SLOWDOWN_FREQ_MS 0) # Just show every log message.\n\telse()\n\t\tset(SRT_LOG_SLOWDOWN_FREQ_MS ${SRT_LOG_SLOWDOWN_FREQ_MS_DEFAULT})\n\tendif()\nendif()\n\nif ( CYGWIN AND NOT CYGWIN_USE_POSIX )\n\tset(WIN32 1)\n\tset(CMAKE_LEGACY_CYGWIN_WIN32 1)\n\tadd_definitions(-DWIN32=1 -DCYGWIN=1)\n\tmessage(STATUS \"HAVE CYGWIN. Setting backward compat CMAKE_LEGACY_CYGWIN_WIN32 and -DWIN32\")\nendif()\n\nif (NOT USE_ENCLIB)\n\tif (USE_GNUTLS)\n\t\tmessage(\"NOTE: USE_GNUTLS is deprecated. Use -DUSE_ENCLIB=gnutls instead.\")\n\t\tset (USE_ENCLIB gnutls)\n\telse()\n\t\tset (USE_ENCLIB openssl-evp)\n\tendif()\nendif()\n\nset(USE_ENCLIB \"${USE_ENCLIB}\" CACHE STRING \"The crypto library that SRT uses\")\nset_property(CACHE USE_ENCLIB PROPERTY STRINGS \"openssl\" \"openssl-evp\" \"gnutls\" \"mbedtls\" \"botan\")\n\n# Make sure DLLs and executabes go to the same path regardles of subdirectory\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})\n\nif (NOT DEFINED WITH_COMPILER_TYPE)\n\n\t# This is for a case when you provided the prefix, but you didn't\n\t# provide compiler type. This option is in this form predicted to work\n\t# only on POSIX systems. Just typical compilers for Linux and Mac are\n\t# included. \n\tif (DARWIN)\n\t\tset (WITH_COMPILER_TYPE clang)\n\telseif (POSIX) # Posix, but not DARWIN\n\t\tset(WITH_COMPILER_TYPE gcc)\n\telse()\n\t\tget_filename_component(WITH_COMPILER_TYPE ${CMAKE_C_COMPILER} NAME)\n\tendif()\n\tset (USING_DEFAULT_COMPILER_PREFIX 1)\nendif()\n\nif (NOT USING_DEFAULT_COMPILER_PREFIX OR DEFINED WITH_COMPILER_PREFIX)\n\tmessage(STATUS \"Handling compiler with PREFIX=${WITH_COMPILER_PREFIX} TYPE=${WITH_COMPILER_TYPE}\")\n\n\tparse_compiler_type(${WITH_COMPILER_TYPE} COMPILER_TYPE COMPILER_SUFFIX)\n\n\tif (${COMPILER_TYPE} STREQUAL gcc)\n\t\tset (CMAKE_C_COMPILER ${WITH_COMPILER_PREFIX}gcc${COMPILER_SUFFIX})\n\t\tset (CMAKE_CXX_COMPILER ${WITH_COMPILER_PREFIX}g++${COMPILER_SUFFIX})\n\t\tset (HAVE_COMPILER_GNU_COMPAT 1)\n\telseif (${COMPILER_TYPE} STREQUAL cc)\n\t\tset (CMAKE_C_COMPILER ${WITH_COMPILER_PREFIX}cc${COMPILER_SUFFIX})\n\t\tset (CMAKE_CXX_COMPILER ${WITH_COMPILER_PREFIX}c++${COMPILER_SUFFIX})\n\t\tset (HAVE_COMPILER_GNU_COMPAT 1)\n\telseif (${COMPILER_TYPE} STREQUAL icc)\n\t\tset (CMAKE_C_COMPILER ${WITH_COMPILER_PREFIX}icc${COMPILER_SUFFIX})\n\t\tset (CMAKE_CXX_COMPILER ${WITH_COMPILER_PREFIX}icpc${COMPILER_SUFFIX})\n\t\tset (HAVE_COMPILER_GNU_COMPAT 1)\n\telse()\n\t\t# Use blindly <command> for C compiler and <command>++ for C++.\n\t\t# At least this matches clang.\n\t\tset (CMAKE_C_COMPILER ${WITH_COMPILER_PREFIX}${WITH_COMPILER_TYPE})\n\t\tset (CMAKE_CXX_COMPILER ${WITH_COMPILER_PREFIX}${COMPILER_TYPE}++${COMPILER_SUFFIX})\n\t\tif (${COMPILER_TYPE} STREQUAL clang)\n\t\t\tset (HAVE_COMPILER_GNU_COMPAT 1)\n\t\tendif()\n\tendif()\n\tmessage(STATUS \"Compiler type: ${WITH_COMPILER_TYPE}. C: ${CMAKE_C_COMPILER}; C++: ${CMAKE_CXX_COMPILER}\")\n\tunset(USING_DEFAULT_COMPILER_PREFIX)\nelse()\n\tmessage(STATUS \"No WITH_COMPILER_PREFIX - using C++ compiler ${CMAKE_CXX_COMPILER}\")\nendif()\n\n\nif (DEFINED WITH_SRT_TARGET)\n\tset (TARGET_haisrt ${WITH_SRT_TARGET})\nendif()\n\n# When you use crosscompiling, you have to take care that PKG_CONFIG_PATH\n# and CMAKE_PREFIX_PATH are set properly.\n\n# symbol exists in win32, but function does not.\nif(WIN32)\n\tif(ENABLE_INET_PTON)\n\t\tset(CMAKE_REQUIRED_LIBRARIES ws2_32)\n\t\tcheck_function_exists(inet_pton HAVE_INET_PTON)\n\t\ttry_compile(AT_LEAST_VISTA\n\t\t\t${CMAKE_BINARY_DIR}\n\t\t\t\"${CMAKE_CURRENT_SOURCE_DIR}/scripts/test_vista.c\")\n\t\tif(NOT AT_LEAST_VISTA)\n\t\t\t# force targeting Vista\n\t\t\tadd_definitions(-D_WIN32_WINNT=0x0600)\n\t\tendif()\n\telse()\n\t\tadd_definitions(-D_WIN32_WINNT=0x0501)\n\tendif()\nelse()\n\tcheck_function_exists(inet_pton HAVE_INET_PTON)\nendif()\nif (DEFINED HAVE_INET_PTON)\n\tadd_definitions(-DHAVE_INET_PTON=1)\nendif()\n\n# Defines HAVE_PTHREAD_GETNAME_* and HAVE_PTHREAD_SETNAME_*\ninclude(FindPThreadGetSetName)\nFindPThreadGetSetName()\n\nif (ENABLE_MONOTONIC_CLOCK)\n\tif (NOT ENABLE_MONOTONIC_CLOCK_DEFAULT)\n\t\tmessage(FATAL_ERROR \"Your platform does not support CLOCK_MONOTONIC. Build with -DENABLE_MONOTONIC_CLOCK=OFF.\")\n\tendif()\n\tset (WITH_EXTRALIBS \"${WITH_EXTRALIBS} ${MONOTONIC_CLOCK_LINKLIB}\")\n\tadd_definitions(-DENABLE_MONOTONIC_CLOCK=1)\nendif()\n\nif (ENABLE_ENCRYPTION)\n\tif (\"${USE_ENCLIB}\" STREQUAL \"gnutls\")\n\t\tset (SSL_REQUIRED_MODULES \"gnutls nettle\")\n\t\tif (WIN32)\n\t\t\tif (MINGW)\n\t\t\t\tset (SSL_REQUIRED_MODULES \"${SSL_REQUIRED_MODULES} zlib\")\n\t\t\tendif()\n\t\tendif()\n\n\t\tpkg_check_modules (SSL REQUIRED ${SSL_REQUIRED_MODULES})\n\n\t\tadd_definitions(\n\t\t\t-DUSE_GNUTLS=1\n\t\t)\n\n\t\tlink_directories(\n\t\t\t${SSL_LIBRARY_DIRS}\n\t\t)\n\telseif (\"${USE_ENCLIB}\" STREQUAL \"mbedtls\")\n\t\tadd_definitions(-DUSE_MBEDTLS=1)\n\t\tif (\"${SSL_LIBRARY_DIRS}\" STREQUAL \"\")\n\t\t\tset(MBEDTLS_PREFIX \"${CMAKE_PREFIX_PATH}\" CACHE PATH \"The path of mbedtls\")\n\t\t\tfind_package(MbedTLS REQUIRED)\n\t\t\tset (SSL_INCLUDE_DIRS ${MBEDTLS_INCLUDE_DIR})\n\t\t\tset (SSL_LIBRARIES  ${MBEDTLS_LIBRARIES})\n\t\tendif()\n\t\tif (WIN32)\n\t\t\tset (SSL_LIBRARIES ${SSL_LIBRARIES} bcrypt)\n\t\tendif()\n\t\tif (\"${SSL_LIBRARIES}\" STREQUAL \"\")\n\t\t\tset (SSL_LIBRARIES  mbedtls mbedcrypto)\n\t\tendif()\n\t\tmessage(STATUS \"SSL enforced mbedtls: -I ${SSL_INCLUDE_DIRS} -l;${SSL_LIBRARIES}\")\n\n\t\tforeach(LIB ${SSL_LIBRARIES})\n\t\t\tif(IS_ABSOLUTE ${LIB} AND EXISTS ${LIB})\n\t\t\t\tset (SRT_LIBS_PRIVATE ${SRT_LIBS_PRIVATE} ${LIB})\n\t\t\telse()\n\t\t\t\tset(SRT_LIBS_PRIVATE ${SRT_LIBS_PRIVATE} \"-l${LIB}\")\n\t\t\tendif()\n\t\tendforeach()\n\telseif (\"${USE_ENCLIB}\" STREQUAL \"openssl-evp\")\n\t\t# Openssl-EVP requires CRYSPR2\n\t\tadd_definitions(-DUSE_OPENSSL_EVP=1 -DCRYSPR2)\n\t\tset (SSL_REQUIRED_MODULES \"openssl libcrypto\")\n\t\t# Try using pkg-config method first if enabled,\n\t\t# fall back to find_package method otherwise\n\t\tif (USE_OPENSSL_PC)\n\t\t\tpkg_check_modules(SSL ${SSL_REQUIRED_MODULES})\n\t\t\tif (OPENSSL_USE_STATIC_LIBS)\n\t\t\t\t# use `pkg-config --static xxx` found libs\n\t\t\t\tset(SSL_LIBRARIES ${SSL_STATIC_LIBRARIES})\n\t\t\tendif()\n\t\tendif()\n\t\tif (SSL_FOUND)\n\t\t\t# We have some cases when pkg-config is improperly configured\n\t\t\t# When it doesn't ship the -L and -I options, and the CMAKE_PREFIX_PATH\n\t\t\t# is set (also through `configure`), then we have this problem. If so,\n\t\t\t# set forcefully the -I and -L contents to prefix/include and\n\t\t\t# prefix/lib.\n\t\t\tif (\"${SSL_LIBRARY_DIRS}\" STREQUAL \"\")\n\t\t\tif (NOT \"${CMAKE_PREFIX_PATH}\" STREQUAL \"\")\n\t\t\t\tmessage(STATUS \"WARNING: pkg-config has incorrect prefix - enforcing target path prefix: ${CMAKE_PREFIX_PATH}\")\n\t\t\t\tset (SSL_LIBRARY_DIRS ${CMAKE_PREFIX_PATH}/${CMAKE_INSTALL_LIBDIR})\n\t\t\t\tset (SSL_INCLUDE_DIRS ${CMAKE_PREFIX_PATH}/include)\n\t\t\tendif()\n\t\t\tendif()\n\n\t\t\tlink_directories(\n\t\t\t\t${SSL_LIBRARY_DIRS}\n\t\t\t)\n\t\t\tmessage(STATUS \"SSL via pkg-config: -L ${SSL_LIBRARY_DIRS} -I ${SSL_INCLUDE_DIRS} -l;${SSL_LIBRARIES}\")\n\t\telse()\n\t\t\tfind_package(OpenSSL REQUIRED)\n\t\t\tset (SSL_INCLUDE_DIRS ${OPENSSL_INCLUDE_DIR})\n\t\t\tset (SSL_LIBRARIES ${OPENSSL_LIBRARIES})\n\t\t\tmessage(STATUS \"SSL via find_package(OpenSSL): -I ${SSL_INCLUDE_DIRS} -l;${SSL_LIBRARIES}\")\n\t\tendif()\n\telseif (\"${USE_ENCLIB}\" STREQUAL \"botan\")\n\t\tadd_definitions(-DUSE_BOTAN=1 -DCRYSPR2)\n\t\tset (SSL_REQUIRED_MODULES \"botan\")\n\t\tfind_package(Botan 3.0.0 REQUIRED)\n\t\tbotan_generate(\n\t\t\tbotan\n\t\t\tffi\n\t\t\tnist_keywrap\n\t\t\taes_armv8\n\t\t\taes_ni\n\t\t\taes_power8\n\t\t\taes_vperm\n\t\t\tidea_sse2\n\t\t\tserpent_avx2\n\t\t\tshacal2_armv8\n\t\t\tshacal2_avx2\n\t\t\tshacal2_x86\n\t\t\tsm4_armv8\n\t\t\trdseed\n\t\t\tsha1_armv8\n\t\t\tsha1_sse2\n\t\t\tsha1_x86\n\t\t\tsha2_32_armv8\n\t\t\tsha2_32_bmi2\n\t\t\tsha2_32_x86\n\t\t\tsha2_64_bmi2\n\t\t\tsha3_bmi2\n\t\t\tzfec_sse2\n\t\t\tzfec_vperm\n\t\t\targon2_avx2\n\t\t\targon2_ssse3\n\t\t\tprocessor_rng\n\t\t\tchacha_avx2\n\t\t\tghash_cpu\n\t\t\tghash_vperm\n\t\t\tsimd\n\t\t\tsimd_avx2)\n\t\ttarget_compile_features(\"botan\" PRIVATE \"cxx_std_20\")\n\t\tset (SSL_INCLUDE_DIRS ${CMAKE_CURRENT_BINARY_DIR})\n\t\tset (SSL_LIBRARIES \"botan\")\n\telse() # openssl\n\t\t# Openssl (Direct-AES API) can use CRYSPR2\n\t\tadd_definitions(-DUSE_OPENSSL=1 -DCRYSPR2)\n\t\t\tset (SSL_REQUIRED_MODULES \"openssl libcrypto\")\n\t\t# Try using pkg-config method first if enabled,\n\t\t# fall back to find_package method otherwise\n\t\tif (USE_OPENSSL_PC)\n\t\t\tpkg_check_modules(SSL ${SSL_REQUIRED_MODULES})\n\t\tendif()\n\t\tif (SSL_FOUND)\n\t\t\t# We have some cases when pkg-config is improperly configured\n\t\t\t# When it doesn't ship the -L and -I options, and the CMAKE_PREFIX_PATH\n\t\t\t# is set (also through `configure`), then we have this problem. If so,\n\t\t\t# set forcefully the -I and -L contents to prefix/include and\n\t\t\t# prefix/lib.\n\t\t\tif (\"${SSL_LIBRARY_DIRS}\" STREQUAL \"\")\n\t\t\tif (NOT \"${CMAKE_PREFIX_PATH}\" STREQUAL \"\")\n\t\t\t\tmessage(STATUS \"WARNING: pkg-config has incorrect prefix - enforcing target path prefix: ${CMAKE_PREFIX_PATH}\")\n\t\t\t\tset (SSL_LIBRARY_DIRS ${CMAKE_PREFIX_PATH}/${CMAKE_INSTALL_LIBDIR})\n\t\t\t\tset (SSL_INCLUDE_DIRS ${CMAKE_PREFIX_PATH}/include)\n\t\t\tendif()\n\t\t\tendif()\n\n\t\t\tlink_directories(\n\t\t\t\t${SSL_LIBRARY_DIRS}\n\t\t\t)\n\t\t\tmessage(STATUS \"SSL via pkg-config: -L ${SSL_LIBRARY_DIRS} -I ${SSL_INCLUDE_DIRS} -l;${SSL_LIBRARIES}\")\n\t\telse()\n\t\t\tfind_package(OpenSSL REQUIRED)\n\t\t\tset (SSL_INCLUDE_DIRS ${OPENSSL_INCLUDE_DIR})\n\t\t\tset (SSL_LIBRARIES ${OPENSSL_LIBRARIES})\n\t\t\tmessage(STATUS \"SSL via find_package(OpenSSL): -I ${SSL_INCLUDE_DIRS} -l;${SSL_LIBRARIES}\")\n\t\tendif()\n\n\tendif()\n\n\tadd_definitions(-DSRT_ENABLE_ENCRYPTION)\n\tmessage(STATUS \"ENCRYPTION: ENABLED, using: ${SSL_REQUIRED_MODULES}\")\n\tmessage (STATUS \"SSL libraries: ${SSL_LIBRARIES}\")\n\n\tif (ENABLE_AEAD_API_PREVIEW)\n\t\tif ((\"${USE_ENCLIB}\" STREQUAL \"openssl-evp\") OR (\"${USE_ENCLIB}\" STREQUAL \"botan\"))\n\t\t\tadd_definitions(-DENABLE_AEAD_API_PREVIEW)\n\t\t\tmessage(STATUS \"ENCRYPTION AEAD API: ENABLED\")\n\t\telse()\n\t\t\tmessage(FATAL_ERROR \"ENABLE_AEAD_API_PREVIEW is only available with USE_ENCLIB=[openssl-evp | botan]!\")\n\t\tendif()\n\telse()\n\t\tmessage(STATUS \"ENCRYPTION AEAD API: DISABLED\")\n\tendif()\n\nelse()\n\tmessage(STATUS \"ENCRYPTION: DISABLED\")\n\tmessage(STATUS \"ENCRYPTION AEAD API: N/A\")\nendif()\n\nif (USE_GNUSTL)\n\tpkg_check_modules (GNUSTL REQUIRED gnustl)\n\tlink_directories(${GNUSTL_LIBRARY_DIRS})\n\tinclude_directories(${GNUSTL_INCLUDE_DIRS})\n\tset (SRT_LIBS_PRIVATE ${SRT_LIBS_PRIVATE} ${GNUSTL_LIBRARIES} ${GNUSTL_LDFLAGS})\nendif()\n\nif (ENABLE_MAXREXMITBW)\n\tadd_definitions(-DENABLE_MAXREXMITBW)\n\tmessage(STATUS \"MAXREXMITBW API: ENABLED\")\nelse()\n\tmessage(STATUS \"MAXREXMITBW API: DISABLED\")\nendif()\n\nif (USING_DEFAULT_COMPILER_PREFIX)\n# Detect if the compiler is GNU compatible for flags\nif (CMAKE_CXX_COMPILER_ID MATCHES \"GNU|Intel|Clang|AppleClang\")\n\tmessage(STATUS \"COMPILER: ${CMAKE_CXX_COMPILER_ID} (${CMAKE_CXX_COMPILER}) - GNU compat\")\n\tset(HAVE_COMPILER_GNU_COMPAT 1)\n\n\t# See https://gcc.gnu.org/projects/cxx-status.html\n\t# At the bottom there's information about C++98, which is default up to 6.1 version.\n\t# For all other compilers - including Clang - we state that the default C++ standard is AT LEAST 11.\n\tif (${CMAKE_CXX_COMPILER_ID} STREQUAL GNU AND ${CMAKE_CXX_COMPILER_VERSION} VERSION_LESS 6.1)\n\t\tmessage(STATUS \"NOTE: GCC ${CMAKE_CXX_COMPILER_VERSION} is detected with default C++98. Forcing C++11 on applications.\")\n\t\tset (FORCE_CXX_STANDARD 1)\n\telseif (${CMAKE_CXX_COMPILER_ID} MATCHES \"Clang|AppleClang\")\n\t\tmessage(STATUS \"NOTE: CLANG ${CMAKE_CXX_COMPILER_VERSION} detected, unsure if >=C++11 is default, forcing C++11 on applications\")\n\t\tset (FORCE_CXX_STANDARD 1)\n\telse() \n\t\tmessage(STATUS \"NOTE: ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION} - assuming default C++11.\")\n\tendif()\nelse()\n\tmessage(STATUS \"COMPILER: ${CMAKE_CXX_COMPILER_ID} (${CMAKE_CXX_COMPILER}) - NOT GNU compat\")\n\tset(HAVE_COMPILER_GNU_COMPAT 0)\nendif()\n\nelse() # Compiler altered by WITH_COMPILER_TYPE/PREFIX - can't rely on CMAKE_CXX_*\n\n\t# Force the C++ standard as C++11\n\t# HAVE_COMPILER_GNU_COMPAT was set in the handler of WITH_COMPILER_TYPE\n\tset (FORCE_CXX_STANDARD 1)\n\tmessage(STATUS \"COMPILER CHANGED TO: ${COMPILER_TYPE} - forcing C++11 standard for apps\")\nendif()\n\n# Check for GCC Atomic Intrinsics and C++11 Atomics.\n# Sets:\n#  HAVE_LIBATOMIC\n#  HAVE_LIBATOMIC_COMPILES\n#  HAVE_LIBATOMIC_COMPILES_STATIC\n#  HAVE_GCCATOMIC_INTRINSICS\n#  HAVE_GCCATOMIC_INTRINSICS_REQUIRES_LIBATOMIC\ninclude(CheckGCCAtomicIntrinsics)\nCheckGCCAtomicIntrinsics()\n#  HAVE_CXX_ATOMIC\n#  HAVE_CXX_ATOMIC_STATIC\ninclude(CheckCXXAtomic)\nCheckCXXAtomic()\n\n# Check for std::put_time():\n# Sets:\n#  HAVE_CXX_STD_PUT_TIME\ninclude(CheckCXXStdPutTime)\nCheckCXXStdPutTime()\nif (HAVE_CXX_STD_PUT_TIME)\n\tadd_definitions(-DHAVE_CXX_STD_PUT_TIME=1)\nendif()\n\nif (DISABLE_CXX11)\n\tset (ENABLE_CXX11 0)\nelseif( DEFINED ENABLE_CXX11 )\nelse()\n\tset (ENABLE_CXX11 1)\nendif()\n\nfunction (srt_check_cxxstd stdval OUT_STD OUT_PFX)\n\n\tset (STDPFX c++)\n\tif (stdval MATCHES \"([^+]+\\\\++)([0-9]*)\")\n\t\tset (STDPFX ${CMAKE_MATCH_1})\n\t\tset (STDCXX ${CMAKE_MATCH_2})\n\telseif (stdval MATCHES \"[0-9]*\")\n\t\tset (STDCXX ${stdval})\n\telse()\n\t\tset (STDCXX 0)\n\tendif()\n\n\t# Handle C++98 < C++11\n\t# Please fix this around 2070 year.\n\tif (${STDCXX} GREATER 80)\n\t\t\tset (STDCXX 03)\n\tendif()\n\n\t# return\n\tset (${OUT_STD} ${STDCXX} PARENT_SCOPE)\n\tset (${OUT_PFX} ${STDPFX} PARENT_SCOPE)\nendfunction()\n\nif (NOT ENABLE_CXX11)\n\tmessage(WARNING \"Parts that require C++11 support will be disabled (srt-live-transmit)\")\n\tif (ENABLE_STDCXX_SYNC)\n\t\tmessage(FATAL_ERROR \"ENABLE_STDCXX_SYNC is set, but C++11 is disabled by ENABLE_CXX11\")\n\tendif()\nelseif (ENABLE_STDCXX_SYNC)\n\tadd_definitions(-DENABLE_STDCXX_SYNC=1)\n\tif (DEFINED USE_CXX_STD)\n\t\tsrt_check_cxxstd(${USE_CXX_STD} STDCXX STDPFX)\n\t\t# If defined, make sure it's at least C++11\n\t\tif (${STDCXX} LESS 11)\n\t\t\tmessage(FATAL_ERROR \"If ENABLE_STDCXX_SYNC, then USE_CXX_STD must specify at least C++11\")\n\t\tendif()\n\telse()\n\t\tset (USE_CXX_STD 11)\n\tendif()\nendif()\n\nmessage(STATUS \"STDCXX_SYNC: ${ENABLE_STDCXX_SYNC}\")\nmessage(STATUS \"MONOTONIC_CLOCK: ${ENABLE_MONOTONIC_CLOCK}\")\n\nif (ENABLE_SOCK_CLOEXEC)\n\tadd_definitions(-DENABLE_SOCK_CLOEXEC=1)\nendif()\n\nif (CMAKE_MAJOR_VERSION LESS 3)\n\tset (FORCE_CXX_STANDARD_GNUONLY 1)\nendif()\n\nif (DEFINED USE_CXX_STD)\n\tsrt_check_cxxstd(${USE_CXX_STD} STDCXX STDPFX)\n\n\tif (${STDCXX} EQUAL 0)\n\t\tmessage(FATAL_ERROR \"USE_CXX_STD: Must specify 03/11/14/17/20 possibly with c++/gnu++ prefix\")\n\tendif()\n\n\tif (NOT STDCXX STREQUAL \"\")\n\n\t\tif (${STDCXX} LESS 11)\n\t\t\tif (ENABLE_STDCXX_SYNC)\n\t\t\t\tmessage(FATAL_ERROR \"If ENABLE_STDCXX_SYNC, then you can't USE_CXX_STD less than 11\")\n\t\t\tendif()\n\t\t\t# Set back to 98 because cmake doesn't understand 03.\n\t\t\tset (STDCXX 98)\n\t\t\t# This enforces C++03 standard on SRT.\n\t\t\t# Apps still use C++11\n\n\t\t\t# Set this through independent flags\n\t\t\tset (USE_CXX_STD_LIB ${STDCXX})\n\t\t\tset (FORCE_CXX_STANDARD 1)\n\t\t\tif (NOT ENABLE_APPS)\n\t\t\t\tset (USE_CXX_STD_APP ${STDCXX})\n\t\t\t\tmessage(STATUS \"C++ STANDARD: library: C++${STDCXX}, apps disabled (examples will follow C++${STDCXX})\")\n\t\t\telse()\n\t\t\t\tset (USE_CXX_STD_APP \"\")\n\t\t\t\tmessage(STATUS \"C++ STANDARD: library: C++${STDCXX}, but apps still at least C++11\")\n\t\t\tendif()\n\t\telseif (FORCE_CXX_STANDARD_GNUONLY)\n\t\t\t# CMake is too old to handle CMAKE_CXX_STANDARD,\n\t\t\t# use bare GNU options.\n\t\t\tset (FORCE_CXX_STANDARD 1)\n\t\t\tset (USE_CXX_STD_APP ${STDCXX})\n\t\t\tset (USE_CXX_STD_LIB ${STDCXX})\n\t\t\tmessage(STATUS \"C++ STANDARD: using C++${STDCXX} for all - GNU only\")\n\t\telse()\n\t\t\t# This enforces this standard on both apps and library,\n\t\t\t# so set this as global C++ standard option\n\t\t\tset (CMAKE_CXX_STANDARD ${STDCXX})\n\t\t\tunset (FORCE_CXX_STANDARD)\n\n\t\t\t# Do not set variables to not duplicate flags\n\t\t\tset (USE_CXX_STD_LIB \"\")\n\t\t\tset (USE_CXX_STD_APP \"\")\n\t\t\tmessage(STATUS \"C++ STANDARD: using C++${STDCXX} for all\")\n\t\tendif()\n\n\t\tmessage(STATUS \"C++: Setting C++ standard for gnu compiler: lib: ${USE_CXX_STD_LIB} apps: ${USE_CXX_STD_APP}\")\n\tendif()\nelse()\n\tset (USE_CXX_STD_LIB \"\")\n\tset (USE_CXX_STD_APP \"\")\nendif()\n\nif (FORCE_CXX_STANDARD)\n\tmessage(STATUS \"C++ STD: Forcing C++11 on applications\")\n\tif (USE_CXX_STD_APP STREQUAL \"\")\n\t\tset (USE_CXX_STD_APP 11)\n\tendif()\n\n\tif (USE_CXX_STD_LIB STREQUAL \"\" AND ENABLE_STDCXX_SYNC)\n\t\tmessage(STATUS \"C++ STD: Forcing C++11 on library, as C++11 sync requested\")\n\t\tset (USE_CXX_STD_LIB 11)\n\tendif()\nendif()\n\n# add extra warning flags for gccish compilers\nif (HAVE_COMPILER_GNU_COMPAT)\n\tset (SRT_GCC_WARN \"-Wall -Wextra\")\n\tif (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 7.0 AND CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n\t\tset (SRT_GCC_WARN \"${SRT_GCC_WARN} -Wshadow=local\")\n\tendif()\nelse()\n\t# cpp debugging on Windows :D\n\t#set (SRT_GCC_WARN \"/showIncludes\")\nendif()\n\nif (USE_STATIC_LIBSTDCXX)\n\tif (HAVE_COMPILER_GNU_COMPAT)\n\t\tset(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -static-libstdc++\")\n\telse()\n\t\tmessage(FATAL_ERROR \"On non-GNU-compat compiler it's not known how to use static C++ standard library.\")\n\tendif()\nendif()\n\n\n# This options is necessary on some systems; on a cross-ARM compiler it\n# has been detected, for example, that -lrt is necessary for some applications\n# because clock_gettime is needed by some functions and it is alternatively\n# provided by libc, but only in newer versions. This options is rarely necessary,\n# but may help in several corner cases in unusual platforms.\nif (WITH_EXTRALIBS)\n\tset(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${WITH_EXTRALIBS}\")\nendif()\n\n# CMake has only discovered in 3.3 version that some set-finder is\n# necessary. Using variables for shortcut to a clumsy check syntax.\n\nset (srt_libspec_shared ${ENABLE_SHARED})\nset (srt_libspec_static ${ENABLE_STATIC})\n\nset (srtpack_libspec_common)\nif (srt_libspec_shared)\n\tlist(APPEND srtpack_libspec_common ${TARGET_srt}_shared)\n\nendif()\nif (srt_libspec_static)\n\tlist(APPEND srtpack_libspec_common ${TARGET_srt}_static)\nendif()\n\nset (SRT_SRC_HAICRYPT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/haicrypt)\nset (SRT_SRC_SRTCORE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/srtcore)\nset (SRT_SRC_COMMON_DIR ${CMAKE_CURRENT_SOURCE_DIR}/common)\nset (SRT_SRC_TOOLS_DIR ${CMAKE_CURRENT_SOURCE_DIR}/tools)\nset (SRT_SRC_TEST_DIR ${CMAKE_CURRENT_SOURCE_DIR}/test)\n\nif(WIN32)\n\tmessage(STATUS \"DETECTED SYSTEM: WINDOWS;  WIN32=1; PTW32_STATIC_LIB=1\")\n\tadd_definitions(-DWIN32=1 -DPTW32_STATIC_LIB=1)\nelseif(DARWIN)\n\tmessage(STATUS \"DETECTED SYSTEM: DARWIN\")\nelseif(BSD)\n\tmessage(STATUS \"DETECTED SYSTEM: BSD;  BSD=1\")\n\tadd_definitions(-DBSD=1)\nelseif(LINUX)\n\tadd_definitions(-DLINUX=1)\n\tmessage(STATUS \"DETECTED SYSTEM: LINUX;  LINUX=1\" )\nelseif(ANDROID)\n\tadd_definitions(-DLINUX=1)\n\tmessage(STATUS \"DETECTED SYSTEM: ANDROID;  LINUX=1\" )\nelseif(CYGWIN)\n\tadd_definitions(-DCYGWIN=1)\n\tmessage(STATUS \"DETECTED SYSTEM: CYGWIN (posix mode); CYGWIN=1\")\nelseif(GNU)\n\tadd_definitions(-DGNU=1)\n\tmessage(STATUS \"DETECTED SYSTEM: GNU;  GNU=1\" )\nelseif(SUNOS)\n\tadd_definitions(-DSUNOS=1)\n\tmessage(STATUS \"DETECTED SYSTEM: SunOS|Solaris;  SUNOS=1\" )\nelse()\n\tmessage(FATAL_ERROR \"Unsupported system: ${CMAKE_SYSTEM_NAME}\")\nendif()\n\nadd_definitions(\n\t-D_GNU_SOURCE\n\t-DHAI_PATCH=1\n\t-DHAI_ENABLE_SRT=1\n\t-DSRT_VERSION=\"${SRT_VERSION}\"\n)\n\nif (LINUX)\n# This is an option supported only on Linux\n\tadd_definitions(-DSRT_ENABLE_BINDTODEVICE)\nendif()\n\n# This is obligatory include directory for all targets. This is only\n# for private headers. Installable headers should be exclusively used DIRECTLY.\ninclude_directories(${SRT_SRC_COMMON_DIR} ${SRT_SRC_SRTCORE_DIR} ${SRT_SRC_HAICRYPT_DIR})\n\nif (ENABLE_LOGGING)\n\tlist(APPEND SRT_EXTRA_CFLAGS \"-DENABLE_LOGGING=1\")\n\tif (ENABLE_HEAVY_LOGGING)\n\t\tlist(APPEND SRT_EXTRA_CFLAGS \"-DENABLE_HEAVY_LOGGING=1\")\n\tendif()\n\tif (ENABLE_HAICRYPT_LOGGING)\n\t\tif (ENABLE_HAICRYPT_LOGGING STREQUAL 2) # Allow value 2 for INSECURE DEBUG logging\n\t\t\tmessage(WARNING \" *** ENABLED INSECURE HAICRYPT LOGGING - USE FOR TESTING ONLY!!! ***\")\n\t\t\tlist(APPEND SRT_EXTRA_CFLAGS \"-DENABLE_HAICRYPT_LOGGING=2\")\n\t\telse()\n\t\t\tlist(APPEND SRT_EXTRA_CFLAGS \"-DENABLE_HAICRYPT_LOGGING=1\")\n\t\tendif()\n\tendif()\nendif()\n\nif (ENABLE_GETNAMEINFO)\n\tlist(APPEND SRT_EXTRA_CFLAGS \"-DENABLE_GETNAMEINFO=1\")\nendif()\n\nif (ENABLE_PKTINFO)\n\tif (WIN32 OR BSD)\n\t\tmessage(FATAL_ERROR \"PKTINFO is not implemented on Windows or *BSD.\")\n\tendif()\n\n\tlist(APPEND SRT_EXTRA_CFLAGS \"-DSRT_ENABLE_PKTINFO=1\")\nendif()\n\n\n# ENABLE_EXPERIMENTAL_BONDING is deprecated. Use ENABLE_BONDING. ENABLE_EXPERIMENTAL_BONDING is be removed in v1.6.0.\nif (ENABLE_EXPERIMENTAL_BONDING)\n\tmessage(DEPRECATION \"ENABLE_EXPERIMENTAL_BONDING is deprecated. Please use ENABLE_BONDING instead.\")\n\tset (ENABLE_BONDING ON)\nendif()\n\nif (ENABLE_BONDING)\n\tlist(APPEND SRT_EXTRA_CFLAGS \"-DENABLE_BONDING=1\")\n\tmessage(STATUS \"ENABLE_BONDING: ON\")\nelse()\n\tmessage(STATUS \"ENABLE_BONDING: OFF\")\nendif()\n\nif (ENABLE_THREAD_CHECK)\n\tadd_definitions(\n\t\t-DSRT_ENABLE_THREADCHECK=1\n\t\t-DFUGU_PLATFORM=1\n\t\t-I${WITH_THREAD_CHECK_INCLUDEDIR}\n\t)\nendif()\n\nif (ENABLE_CLANG_TSA)\n\tlist(APPEND SRT_EXTRA_CFLAGS \"-Wthread-safety\")\n\tmessage(STATUS \"Clang TSA: Enabled\")\nendif()\n\nif (ENABLE_PROFILE)\n\tif (HAVE_COMPILER_GNU_COMPAT)\n\t\t# They are actually cflags, not definitions, but CMake is stupid enough.\n\t\tadd_definitions(-g -pg)\n\t\tlink_libraries(-g -pg)\n\telse()\n\t\tmessage(FATAL_ERROR \"Profiling option is not supported on this platform\")\n\tendif()\nendif()\n\nif (ENABLE_CODE_COVERAGE)\n\tif (HAVE_COMPILER_GNU_COMPAT)\n\t\tadd_definitions(-g -O0 --coverage)\n\t\tlink_libraries(--coverage)\n\t\tmessage(STATUS \"ENABLE_CODE_COVERAGE: ON\")\n\telse()\n\t\tmessage(FATAL_ERROR \"ENABLE_CODE_COVERAGE: option is not supported on this platform\")\n\tendif()\nendif()\n\n# On Linux pthreads have to be linked even when using C++11 threads\nif (ENABLE_STDCXX_SYNC AND NOT LINUX)\n\tmessage(STATUS \"Pthread library: C++11\")\nelseif (PTHREAD_LIBRARY AND PTHREAD_INCLUDE_DIR)\n\tmessage(STATUS \"Pthread library: ${PTHREAD_LIBRARY}\")\n\tmessage(STATUS \"Pthread include dir: ${PTHREAD_INCLUDE_DIR}\")\nelseif (MICROSOFT)\n\tfind_package(pthreads QUIET)\n\n\tif (NOT PTHREAD_INCLUDE_DIR OR NOT PTHREAD_LIBRARY)\n\t\t#search package folders with GLOB to add as extra hint for headers\n\t\tfile(GLOB PTHREAD_PACKAGE_INCLUDE_HINT ./_packages/cinegy.pthreads-win*/sources)\n\t\tif (PTHREAD_PACKAGE_INCLUDE_HINT)\n\t\t\tmessage(STATUS \"PTHREAD_PACKAGE_INCLUDE_HINT value: ${PTHREAD_PACKAGE_INCLUDE_HINT}\")\n\t\tendif()\n\n\t\t# find pthread header\n\t\tfind_path(PTHREAD_INCLUDE_DIR pthread.h HINTS C:/pthread-win32/include ${PTHREAD_PACKAGE_INCLUDE_HINT})\n\n\t\tif (PTHREAD_INCLUDE_DIR)\n\t\t\tmessage(STATUS \"Pthread include dir: ${PTHREAD_INCLUDE_DIR}\")\n\t\telse()\n\t\t\tmessage(FATAL_ERROR \"Failed to find pthread.h. Specify PTHREAD_INCLUDE_DIR.\")\n\t\tendif()\n\n\t\t#search package folders with GLOB to add as extra hint for libs\n\t\tfile(GLOB PTHREAD_PACKAGE_LIB_HINT ./_packages/cinegy.pthreads-win*/runtimes/win-*/native/release)\n\t\tif (PTHREAD_PACKAGE_LIB_HINT)\n\t\t\tmessage(STATUS \"PTHREAD_PACKAGE_LIB_HINT value: ${PTHREAD_PACKAGE_LIB_HINT}\")\n\t\tendif()\n\n\t\t#find pthread library\n\t\tset(PTHREAD_LIB_SUFFIX \"\")\n\t\tif (ENABLE_DEBUG)\n\t\t\tset(PTHREAD_LIB_SUFFIX \"d\")\n\t\tendif ()\n\n\t\tset(PTHREAD_COMPILER_FLAG \"\")\n\t\tif (MICROSOFT)\n\t\t\tset(PTHREAD_COMPILER_FLAG \"V\")\n\t\telseif (MINGW)\n\t\t\tset(PTHREAD_COMPILER_FLAG \"G\")\n\t\tendif ()\n\n\t\tforeach(EXHAND C CE SE)\n\t\t\tforeach(COMPAT 1 2)\n\t\t\t\tlist(APPEND PTHREAD_W32_LIBRARY \"pthread${PTHREAD_COMPILER_FLAG}${EXHAND}${PTHREAD_LIB_SUFFIX}${COMPAT}\")\n\t\t\tendforeach()\n\t\tendforeach()\n\n\t\tfind_library(PTHREAD_LIBRARY NAMES ${PTHREAD_W32_LIBRARY} pthread pthread_dll pthread_lib HINTS C:/pthread-win32/lib C:/pthread-win64/lib ${PTHREAD_PACKAGE_LIB_HINT})\n\t\tif (PTHREAD_LIBRARY)\n\t\t\tmessage(STATUS \"Pthread library: ${PTHREAD_LIBRARY}\")\n\t\telse()\n\t\t\tmessage(FATAL_ERROR \"Failed to find pthread library. Specify PTHREAD_LIBRARY.\")\n\t\tendif()\n\tendif()\nelse ()\n\tfind_package(Threads REQUIRED)\n\tset(PTHREAD_LIBRARY ${CMAKE_THREAD_LIBS_INIT})\nendif()\n\n# This is required in some projects that add some other sources\n# to the SRT library to be compiled together (aka \"virtual library\").\nif (DEFINED SRT_EXTRA_LIB_INC)\n\tinclude(${SRT_EXTRA_LIB_INC}.cmake)\n\t# Expected to provide variables:\n\t# - SOURCES_srt_extra\n\t# - EXTRA_stransmit\nendif()\n\n# ---------------------------------------------------------------------------\n\n# ---\n# Target: haicrypt.\n# Completing sources and installable headers. Flag settings will follow.\n# ---\nif (ENABLE_ENCRYPTION)\n\tset (HAICRYPT_FILELIST_MAF \"filelist-${USE_ENCLIB}.maf\")\n\n\tMafReadDir(haicrypt ${HAICRYPT_FILELIST_MAF}\n\t\tSOURCES SOURCES_haicrypt\n\t\tPUBLIC_HEADERS HEADERS_haicrypt\n\t\tPROTECTED_HEADERS HEADERS_haicrypt\n\t)\nendif()\n\nif (WIN32)\n\tMafReadDir(common filelist_win32.maf\n\t\tSOURCES SOURCES_common\n\t\tPUBLIC_HEADERS HEADERS_srt_win32\n\t\tPROTECTED_HEADERS HEADERS_srt_win32\n\t)\n\tmessage(STATUS \"WINDOWS detected: adding compat sources: ${SOURCES_common}\")\nendif()\n\n\n# Make the OBJECT library for haicrypt and srt. Then they'll be bound into\n# real libraries later, either one common, or separate.\n\n# This is needed for Xcode to properly handle CMake OBJECT Libraries\n# From docs (https://cmake.org/cmake/help/latest/command/add_library.html#object-libraries):\n#\n# ... Some native build systems (such as Xcode) may not like targets that have only object files,\n# so consider adding at least one real source file to any target that references $<TARGET_OBJECTS:objlib>.\nset(OBJECT_LIB_SUPPORT \"${PROJECT_SOURCE_DIR}/cmake_object_lib_support.c\")\n\n# NOTE: The \"virtual library\" is a library specification that cmake\n# doesn't support (the library of OBJECT type is something in kind of that,\n# but not fully supported - for example it doesn't support transitive flags,\n# so this can't be used desired way). It's a private-only dependency type,\n# where the project isn't compiled into any library file at all - instead, all\n# of its source files are incorporated directly to the source list of the\n# project that depends on it. In cmake this must be handled manually.\n\n\n# ---\n# Target: srt. DEFINITION ONLY. Haicrypt flag settings follow.\n# ---\n\nif (ENABLE_SHARED AND MICROSOFT)\n\t#add resource files to shared library, to set DLL metadata on Windows DLLs\n\tset (EXTRA_WIN32_SHARED 1)\n\tmessage(STATUS \"WIN32: extra resource file will be added\")\nendif()\n\nMafReadDir(srtcore filelist.maf\n\tSOURCES SOURCES_srt\n\tPUBLIC_HEADERS HEADERS_srt\n\tPROTECTED_HEADERS HEADERS_srt\n\tPRIVATE_HEADERS HEADERS_srt_private\n)\n\n# Auto generated version file and add it to the HEADERS_srt list.\nif(DEFINED ENV{APPVEYOR_BUILD_NUMBER})\n\tset(SRT_VERSION_BUILD ON)\n\tset(CI_BUILD_NUMBER_STRING $ENV{APPVEYOR_BUILD_NUMBER})\n\tmessage(STATUS \"AppVeyor build environment detected: Adding build number to version header\")\nendif()\nif(DEFINED ENV{TEAMCITY_VERSION})\n\tset(SRT_VERSION_BUILD ON)\n\tset(CI_BUILD_NUMBER_STRING $ENV{CI_BUILD_COUNTER})\n\tmessage(STATUS \"TeamCity build environment detected: Adding build counter to version header\")\nendif()\n\nconfigure_file(\"srtcore/version.h.in\" \"version.h\" @ONLY)\n\nlist(INSERT HEADERS_srt 0 \"${CMAKE_CURRENT_BINARY_DIR}/version.h\")\ninclude_directories(\"${CMAKE_CURRENT_BINARY_DIR}\")\n\nadd_library(srt_virtual OBJECT ${SOURCES_srt} ${SOURCES_srt_extra} ${HEADERS_srt} ${SOURCES_haicrypt} ${SOURCES_common})\n\nif (ENABLE_SHARED)\n\t# Set this to sources as well, as it won't be automatically handled\n\tset_target_properties(srt_virtual PROPERTIES POSITION_INDEPENDENT_CODE 1)\nendif()\n\nmacro(srt_set_stdcxx targetname spec)\n\tset (stdcxxspec ${spec})\n\tif (NOT \"${stdcxxspec}\" STREQUAL \"\")\n\t\tif (FORCE_CXX_STANDARD_GNUONLY)\n\t\t\ttarget_compile_options(${targetname} PRIVATE -std=c++${stdcxxspec})\n\t\t\tmessage(STATUS \"C++ STD: ${targetname}: forced C++${stdcxxspec} standard - GNU option: -std=c++${stdcxxspec}\")\n\t\telse()\n\t\t\tset_target_properties(${targetname} PROPERTIES CXX_STANDARD ${stdcxxspec})\n\t\t\tmessage(STATUS \"C++ STD: ${targetname}: forced C++${stdcxxspec} standard - portable way\")\n\t\tendif()\n\telse()\n\t\tmessage(STATUS \"APP: ${targetname}: using default C++ standard\")\n\tendif()\nendmacro()\n\nmacro(srt_set_stdc targetname spec)\n\tset (stdcspec ${spec})\n\tif (NOT \"${stdcspec}\" STREQUAL \"\")\n\t\tif (CMAKE_VERSION VERSION_LESS \"3.1\")\n\t\t\ttarget_compile_options(${targetname} PRIVATE -std=c${stdcspec})\n\t\t\tmessage(STATUS \"C STD: ${targetname}: forced C${stdcspec} standard - GNU option: -std=c${stdcspec}\")\n\t\telse()\n\t\t\tset_target_properties(${targetname} PROPERTIES C_STANDARD ${stdcspec})\n\t\t\tmessage(STATUS \"C STD: ${targetname}: forced C${stdcspec} standard - portable way\")\n\t\tendif()\n\telse()\n\t\tmessage(STATUS \"APP: ${targetname}: using default C standard\")\n\tendif()\nendmacro()\n\nsrt_set_stdcxx(srt_virtual \"${USE_CXX_STD_LIB}\")\nsrt_set_stdc(srt_virtual \"99\")\n\nset (VIRTUAL_srt $<TARGET_OBJECTS:srt_virtual>)\n\nif (srt_libspec_shared)\n\tadd_library(${TARGET_srt}_shared SHARED ${OBJECT_LIB_SUPPORT} ${VIRTUAL_srt})\n\t# shared libraries need PIC\n\tset (CMAKE_POSITION_INDEPENDENT_CODE ON)\n\tset_property(TARGET ${TARGET_srt}_shared PROPERTY OUTPUT_NAME ${TARGET_srt})\n\tset_target_properties (${TARGET_srt}_shared PROPERTIES VERSION ${SRT_VERSION} SOVERSION ${SRT_VERSION_MAJOR}.${SRT_VERSION_MINOR})\n\tlist (APPEND INSTALL_TARGETS ${TARGET_srt}_shared)\n\tif (ENABLE_ENCRYPTION)\n\t\ttarget_link_libraries(${TARGET_srt}_shared PRIVATE ${SSL_LIBRARIES})\n\tendif()\n\tif (MICROSOFT)\n\t\ttarget_link_libraries(${TARGET_srt}_shared PRIVATE ws2_32.lib)\n\t\tif (NOT (ENABLE_ENCRYPTION AND \"${USE_ENCLIB}\" STREQUAL \"botan\"))\n\t\t\tif (OPENSSL_USE_STATIC_LIBS)\n\t\t\t\ttarget_link_libraries(${TARGET_srt}_shared PRIVATE crypt32.lib)\n\t\t\telse()\n\t\t\t\tset_target_properties(${TARGET_srt}_shared PROPERTIES LINK_FLAGS \"/DELAYLOAD:libeay32.dll\")\n\t\t\tendif()\n\t\tendif()\n\telseif (MINGW)\n\t\ttarget_link_libraries(${TARGET_srt}_shared PRIVATE wsock32 ws2_32)\n\telseif (APPLE)\n\t\tset_property(TARGET ${TARGET_srt}_shared PROPERTY MACOSX_RPATH ON)\n\tendif()\n\tif (USE_GNUSTL)\n\t\ttarget_link_libraries(${TARGET_srt}_shared PRIVATE ${GNUSTL_LIBRARIES} ${GNUSTL_LDFLAGS})\n\tendif()\nendif()\n\nif (srt_libspec_static)\n\tadd_library(${TARGET_srt}_static STATIC ${OBJECT_LIB_SUPPORT} ${VIRTUAL_srt})\n\n\t# For Windows, leave the name to be \"srt_static.lib\".\n\t# Windows generates two different library files:\n\t# - a usual static library for static linkage\n\t# - a shared library exposer, which allows pre-resolution and later dynamic\n\t#   linkage when running the executable\n\t# Both having unfortunately the same names created by MSVC compiler.\n\t# It's not the case of Cygwin/MINGW - they are named there libsrt.a and libsrt.dll.a\n\tif (MICROSOFT)\n\t\t# Keep _static suffix. By unknown reason, the name must still be set explicitly.\n\t\tset_property(TARGET ${TARGET_srt}_static PROPERTY OUTPUT_NAME ${TARGET_srt}_static)\n\telse()\n\t\tset_property(TARGET ${TARGET_srt}_static PROPERTY OUTPUT_NAME ${TARGET_srt})\n\tendif()\n\n\tlist (APPEND INSTALL_TARGETS ${TARGET_srt}_static)\n\tif (ENABLE_ENCRYPTION)\n\t\ttarget_link_libraries(${TARGET_srt}_static PRIVATE ${SSL_LIBRARIES})\n\tendif()\n\tif (MICROSOFT)\n\t\ttarget_link_libraries(${TARGET_srt}_static PRIVATE ws2_32.lib)\n\t\tif (OPENSSL_USE_STATIC_LIBS)\n\t\t\ttarget_link_libraries(${TARGET_srt}_static PRIVATE crypt32.lib)\n\t\tendif()\n\telseif (MINGW)\n\t\ttarget_link_libraries(${TARGET_srt}_static PRIVATE wsock32 ws2_32)\n\tendif()\n\tif (USE_GNUSTL)\n\t\ttarget_link_libraries(${TARGET_srt}_static PRIVATE ${GNUSTL_LIBRARIES} ${GNUSTL_LDFLAGS})\n\tendif()\nendif()\n\ntarget_include_directories(srt_virtual PRIVATE  ${SSL_INCLUDE_DIRS})\n\nif (MICROSOFT)\n\tif (OPENSSL_USE_STATIC_LIBS)\n\t\tset (SRT_LIBS_PRIVATE ${SRT_LIBS_PRIVATE} ws2_32.lib crypt32.lib)\n\telse()\n\t\tset (SRT_LIBS_PRIVATE ${SRT_LIBS_PRIVATE} ws2_32.lib)\n\tendif()\nelseif (MINGW)\n\tset (SRT_LIBS_PRIVATE ${SRT_LIBS_PRIVATE} -lwsock32 -lws2_32)\nendif()\n\n# Applying this to public includes is not transitive enough.\n# On Windows, apps require this as well, so it's safer to\n# spread this to all targets.\nif (PTHREAD_INCLUDE_DIR)\n\tinclude_directories(${PTHREAD_INCLUDE_DIR})\nendif()\n\n# Link libraries must be applied directly to the derivatives\n# as virtual libraries (OBJECT-type) cannot have linkage declarations\n# transitive or not.\n\nforeach(tar ${srtpack_libspec_common})\n\tmessage(STATUS \"ADDING TRANSITIVE LINK DEP to:${tar} : ${PTHREAD_LIBRARY} ${dep}\")\n\ttarget_link_libraries (${tar} PUBLIC ${PTHREAD_LIBRARY} ${dep})\nendforeach()\n\n\nset (SRT_LIBS_PRIVATE ${SRT_LIBS_PRIVATE} ${PTHREAD_LIBRARY})\n\ntarget_compile_definitions(srt_virtual PRIVATE -DSRT_EXPORTS )\nif (ENABLE_SHARED)\n\ttarget_compile_definitions(srt_virtual PUBLIC -DSRT_DYNAMIC)\nendif()\n\ntarget_compile_definitions(srt_virtual PRIVATE -DSRT_LOG_SLOWDOWN_FREQ_MS=${SRT_LOG_SLOWDOWN_FREQ_MS})\n\nif (ENABLE_ENCRYPTION AND \"${USE_ENCLIB}\" STREQUAL \"botan\")\n\tadd_dependencies(srt_virtual botan)\nendif()\n\nif (srt_libspec_shared)\n\tif (MICROSOFT)\n\t\ttarget_link_libraries(${TARGET_srt}_shared PUBLIC Ws2_32.lib)\n\t\tif (OPENSSL_USE_STATIC_LIBS)\n\t\t\ttarget_link_libraries(${TARGET_srt}_shared PUBLIC crypt32.lib)\n\t\tendif()\n\tendif()\nendif()\n\n# Required by some toolchains when statically linking this library if the\n#  GCC Atomic Intrinsics are being used.\nif (HAVE_GCCATOMIC_INTRINSICS_REQUIRES_LIBATOMIC AND HAVE_LIBATOMIC)\n\tif (srt_libspec_static)\n\t\ttarget_link_libraries(${TARGET_srt}_static PUBLIC atomic)\n\tendif()\n\tif (srt_libspec_shared)\n\t\ttarget_link_libraries(${TARGET_srt}_shared PUBLIC atomic)\n\tendif()\nelseif (HAVE_LIBATOMIC AND HAVE_LIBATOMIC_COMPILES_STATIC)\n\t# This is a workaround for ANDROID NDK<17 builds, which need to link\n\t#  to libatomic when linking statically to the SRT library.\n\tif (srt_libspec_static)\n\t\ttarget_link_libraries(${TARGET_srt}_static PUBLIC atomic)\n\tendif()\nelseif (LINUX AND HAVE_LIBATOMIC AND HAVE_LIBATOMIC_COMPILES)\n\t# This is a workaround for some older Linux Toolchains.\n\tif (srt_libspec_static)\n\t\ttarget_link_libraries(${TARGET_srt}_static PUBLIC atomic)\n\tendif()\nendif()\n\n# Cygwin installs the *.dll libraries in bin directory and uses PATH.\n\nset (INSTALL_SHARED_DIR ${CMAKE_INSTALL_LIBDIR})\nif (CYGWIN)\n\tset (INSTALL_SHARED_DIR ${CMAKE_INSTALL_BINDIR})\nendif()\n\nmessage(STATUS \"INSTALL DIRS: bin=${CMAKE_INSTALL_BINDIR} lib=${CMAKE_INSTALL_LIBDIR} shlib=${INSTALL_SHARED_DIR} include=${CMAKE_INSTALL_INCLUDEDIR}\")\nif (NEED_DESTINATION)\n\tif (DEFINED CMAKE_INSTALL_BINDIR AND DEFINED CMAKE_INSTALL_LIBDIR AND NOT INSTALL_SHARED_DIR STREQUAL \"\")\n\t\tinstall(TARGETS ${INSTALL_TARGETS}\n\t\t\tRUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n\t\t\tARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n\t\t\tLIBRARY DESTINATION ${INSTALL_SHARED_DIR}\n\t\t)\n\telse()\n\t\tmessage(WARNING \"No location to install ${INSTALL_TARGETS}\")\n\tendif()\nelseif (NOT INSTALL_SHARED_DIR STREQUAL \"\")\n\tinstall(TARGETS ${INSTALL_TARGETS}\n\t\tLIBRARY DESTINATION ${INSTALL_SHARED_DIR}\n\t)\nelse()\n\tinstall(TARGETS ${INSTALL_TARGETS})\nendif()\n\nif (DEFINED CMAKE_INSTALL_INCLUDEDIR)\n\tinstall(FILES ${HEADERS_srt} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/srt)\n\tif (WIN32)\n\t\tinstall(FILES ${HEADERS_srt_win32} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/srt/win)\n\tendif()\nendif()\n\n# ---\n# That's all for target definition\n# ---\n\njoin_arguments(SRT_EXTRA_CFLAGS ${SRT_EXTRA_CFLAGS})\n\n#message(STATUS \"Target srt: LIBSPEC: ${srtpack_libspec_common} SOURCES: {${SOURCES_srt}}  HEADERS: {${HEADERS_srt}}\")\n\nset (CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${SRT_DEBUG_OPT} ${SRT_EXTRA_CFLAGS} ${SRT_GCC_WARN}\")\nset (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${SRT_DEBUG_OPT} ${SRT_EXTRA_CFLAGS} ${SRT_GCC_WARN}\")\n\n# PC file generation.\nif (NOT DEFINED INSTALLDIR)\n\tset (INSTALLDIR ${CMAKE_INSTALL_PREFIX})\n\tget_filename_component(INSTALLDIR ${INSTALLDIR} ABSOLUTE)\nendif()\n\n# Required if linking a C application.\n# This may cause trouble when you want to compile your app with static libstdc++;\n# if your build requires it, you'd probably remove -lstdc++ from the list\n# obtained by `pkg-config --libs`.\nif(ENABLE_CXX_DEPS)\n\tforeach(LIB ${CMAKE_CXX_IMPLICIT_LINK_LIBRARIES})\n\t\tif((IS_ABSOLUTE ${LIB} AND EXISTS ${LIB}) OR (${LIB} MATCHES \"^-l\"))\n\t\t\tset(SRT_LIBS_PRIVATE ${SRT_LIBS_PRIVATE} ${LIB})\n\t\telse()\n\t\t\tset(SRT_LIBS_PRIVATE ${SRT_LIBS_PRIVATE} \"-l${LIB}\")\n\t\tendif()\n\tendforeach()\nendif()\n\njoin_arguments(SRT_LIBS_PRIVATE ${SRT_LIBS_PRIVATE})\n\nif (DEFINED CMAKE_INSTALL_LIBDIR)\n\t# haisrt.pc left temporarily for backward compatibility. To be removed in future!\n\tconfigure_file(scripts/srt.pc.in haisrt.pc @ONLY)\n\tinstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/haisrt.pc DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)\n\tconfigure_file(scripts/srt.pc.in srt.pc @ONLY)\n\tinstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/srt.pc DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)\nendif()\n\n# Applications\n\n# If static is available, link apps against static one.\n# Otherwise link against shared one.\n\nif (srt_libspec_static)\n\tset (srt_link_library ${TARGET_srt}_static)\n\tif (ENABLE_RELATIVE_LIBPATH)\n\t\tmessage(STATUS \"ENABLE_RELATIVE_LIBPATH=ON will be ignored due to static linking.\")\n\tendif()\nelseif(srt_libspec_shared)\n\tset (srt_link_library ${TARGET_srt}_shared)\nelse()\n\tmessage(FATAL_ERROR \"Either ENABLE_STATIC or ENABLE_SHARED has to be ON!\")\nendif()\n\nmacro(srt_add_program_dont_install name)\n\tadd_executable(${name} ${ARGN})\n\ttarget_include_directories(${name} PRIVATE apps)\n\ttarget_include_directories(${name} PRIVATE common)\nendmacro()\n\nmacro(srt_add_program name)\n\tsrt_add_program_dont_install(${name} ${ARGN})\n\tif(NOT NEED_DESTINATION)\n\t\tinstall(TARGETS ${name} RUNTIME)\n\telseif (DEFINED CMAKE_INSTALL_BINDIR)\n\t\tinstall(TARGETS ${name} RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})\n\telse()\n\t\tmessage(WARNING \"No location to install program ${name}\")\n\tendif()\nendmacro()\n\nmacro(srt_make_application name)\n\n\tsrt_set_stdcxx(${name} \"${USE_CXX_STD_APP}\")\n\t\n\t# This is recommended by cmake, but it doesn't work anyway.\n\t# What is needed is that this below CMAKE_INSTALL_RPATH (yes, relative)\n\t# is added as is.\n\t# set (CMAKE_SKIP_RPATH FALSE)\n\t# set (CMAKE_SKIP_BUILD_RPATH FALSE)\n\t# set (CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)\n\t# set (CMAKE_INSTALL_RPATH \"../${CMAKE_INSTALL_LIBDIR}\")\n\t# set (CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\n\t# set (FORCE_RPATH BUILD_WITH_INSTALL_RPATH TRUE INSTALL_RPATH_USE_LINK_PATH TRUE)\n\n\tif (LINUX AND ENABLE_RELATIVE_LIBPATH AND NOT srt_libspec_static)\n\t\t# This is only needed on Linux, on Windows (including Cygwin) the library file will\n\t\t# be placed into the binrary directory anyway.\n\t\t# XXX not sure about Mac.\n\t\t# See this name used already in install(${TARGET_srt} LIBRARY DESTINATION...).\n\t\tset(FORCE_RPATH LINK_FLAGS -Wl,-rpath,.,-rpath,../${CMAKE_INSTALL_LIBDIR} BUILD_WITH_INSTALL_RPATH TRUE INSTALL_RPATH_USE_LINK_PATH TRUE)\n\n\t\tset_target_properties(${name} PROPERTIES ${FORCE_RPATH})\n\tendif()\n\n\ttarget_link_libraries(${name} ${srt_link_library})\n\tif (USE_GNUSTL)\n\t\ttarget_link_libraries(${name} PRIVATE ${GNUSTL_LIBRARIES} ${GNUSTL_LDFLAGS})\n\tendif()\n\tif (srt_libspec_static AND CMAKE_DL_LIBS)\n\t\ttarget_link_libraries(${name} ${CMAKE_DL_LIBS})\n\tendif()\nendmacro()\n\nmacro(srt_add_application name) # ARGN=sources...\n\tsrt_add_program(${name} apps/${name}.cpp ${ARGN})\n\tsrt_make_application(${name})\n\tif(NOT NEED_DESTINATION)\n\t\tinstall(TARGETS ${name} RUNTIME)\n\telseif (DEFINED CMAKE_INSTALL_BINDIR)\n\t\tinstall(TARGETS ${name} RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})\n\telse()\n\t\tmessage(WARNING \"No location to install program ${name}\")\n\tendif()\nendmacro()\n\n## FIXME: transmitmedia.cpp does not build on OpenBSD\n##    Issue: https://github.com/Haivision/srt/issues/590\nif (BSD\n   AND ${SYSNAME_LC} MATCHES \"^openbsd$\")\n   set(ENABLE_APPS OFF)\nendif()\n## The applications currently require c++11.\nif (NOT ENABLE_CXX11)\n   set(ENABLE_APPS OFF)\nendif()\n\nif (ENABLE_APPS)\n\n\tmessage(STATUS \"APPS: ENABLED, std=${USE_CXX_STD_APP}\")\n\n\t# Make a virtual library of all shared app files\n\tMafReadDir(apps support.maf\n\t\tSOURCES SOURCES_support\n\t)\n\n\t# A special trick that makes the shared application sources\n\t# to be compiled once for all applications. Maybe this virtual\n\t# library should be changed into a static one and made useful\n\t# for users.\n\tadd_library(srtsupport_virtual OBJECT ${SOURCES_support})\n\tsrt_set_stdcxx(srtsupport_virtual \"${USE_CXX_STD_APP}\")\n\tset (VIRTUAL_srtsupport $<TARGET_OBJECTS:srtsupport_virtual>)\n\n\t# Applications\n\n\tsrt_add_application(srt-live-transmit ${VIRTUAL_srtsupport})\n\tif (DEFINED EXTRA_stransmit)\n\t\tset_target_properties(srt-live-transmit PROPERTIES COMPILE_FLAGS \"${EXTRA_stransmit}\")\n\tendif()\n\tsrt_add_application(srt-file-transmit ${VIRTUAL_srtsupport})\n\n\tif (MINGW)\n\t\t# FIXME: with MINGW, it fails to build apps that require C++11\n\t\t# https://github.com/Haivision/srt/issues/177\n\t\tmessage(WARNING \"On MinGW, some C++11 apps are blocked due to lacking proper C++11 headers for <thread>. FIX IF POSSIBLE.\")\n\telse()\n\t\t# srt-multiplex temporarily blocked\n\t\t#srt_add_application(srt-multiplex ${VIRTUAL_srtsupport})\n\t\tsrt_add_application(srt-tunnel ${VIRTUAL_srtsupport})\n\tendif()\n\n\tif (ENABLE_TESTING)\n\t\tmessage(STATUS \"DEVEL APPS (testing): ENABLED\")\n\n\t\tmacro(srt_add_testprogram name)\n\t\t\t# Variables in macros are not local. Clear them forcefully.\n\t\t\tset (SOURCES_app_indir \"\")\n\t\t\tset (SOURCES_app \"\")\n\t\t\t# Unlike Silvercat, in cmake you must know the full list\n\t\t\t# of source files at the moment when defining the target\n\t\t\t# and it can't be altered later.\n\t\t\t#\n\t\t\t# For testing applications, every application has its exclusive\n\t\t\t# list of source files in its own Manifest file.\n\t\t\tMafReadDir(testing ${name}.maf SOURCES SOURCES_app)\n\t\t\tsrt_add_program_dont_install(${name} ${SOURCES_app})\n\t\tendmacro()\n\n\t\tsrt_add_testprogram(utility-test)\n\t\tsrt_set_stdcxx(utility-test \"${USE_CXX_STD_APP}\")\n\t\tif (NOT WIN32)\n\t\t\t# This program is symlinked under git-cygwin.\n\t\t\t# Avoid misleading syntax error.\n\t\t\tsrt_add_testprogram(uriparser-test)\n\t\t\ttarget_compile_options(uriparser-test PRIVATE -DTEST)\n\t\t\tsrt_set_stdcxx(uriparser-test \"${USE_CXX_STD_APP}\")\n\t\tendif()\n\t\t\n\t\tsrt_add_testprogram(srt-test-live)\n\t\tsrt_make_application(srt-test-live)\n\n\t\tsrt_add_testprogram(srt-test-file)\n\t\tsrt_make_application(srt-test-file)\n\n\t\tsrt_add_testprogram(srt-test-relay)\n\t\tsrt_make_application(srt-test-relay)\n\n\t\tsrt_add_testprogram(srt-test-multiplex)\n\t\tsrt_make_application(srt-test-multiplex)\n\n\t\tif (ENABLE_BONDING)\n\t\t\tsrt_add_testprogram(srt-test-mpbond)\n\t\t\tsrt_make_application(srt-test-mpbond)\n\t\tendif()\n\n\telse()\n\t\tmessage(STATUS \"DEVEL APPS (testing): DISABLED\")\n\tendif()\n\n\nelse()\n\tmessage(STATUS \"APPS: DISABLED\")\nendif()\n\nif (ENABLE_EXAMPLES)\n\n\t# No examples should need C++11\n\tmacro(srt_add_example mainsrc)\n\t\tget_filename_component(name ${mainsrc} NAME_WE)\n\t\tsrt_add_program_dont_install(${name} examples/${mainsrc} ${ARGN})\n\t\ttarget_link_libraries(${name} ${srt_link_library} ${DEPENDS_srt})\n\tendmacro()\n\n\tsrt_add_example(recvlive.cpp)\n\n\tsrt_add_example(sendfile.cpp)\n\t\t\n\tsrt_add_example(recvfile.cpp)\n\n\tsrt_add_example(sendmsg.cpp)\n\t\t\n\tsrt_add_example(recvmsg.cpp)\n\n\tsrt_add_example(test-c-client.c)\n\n\tsrt_add_example(example-client-nonblock.c)\n\n\tsrt_add_example(test-c-server.c)\n\nif (ENABLE_BONDING)\n\tsrt_add_example(test-c-client-bonding.c)\n\n\tsrt_add_example(test-c-server-bonding.c)\nendif()\n\n\tsrt_add_example(testcapi-connect.c)\nendif()\n\n\nif (ENABLE_UNITTESTS AND ENABLE_CXX11)\n\n\tif (${CMAKE_VERSION} VERSION_LESS \"3.10.0\") \n\t\tmessage(STATUS \"VERSION < 3.10 -- adding test using the old method\")\n\t\tset (USE_OLD_ADD_METHOD 1)\n\telse()\n\t\tmessage(STATUS \"VERSION > 3.10 -- using NEW POLICY for in_list operator\")\n\t\tcmake_policy(SET CMP0057 NEW) # Support the new IN_LIST operator.\n\tendif()\n\n\n\tset(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n\n\t# Version ranges are only supported with CMake 3.19 or later.\n\t# Need GTest v1.10 or higher to support GTEST_SKIP.\n\tif (${CMAKE_VERSION} VERSION_LESS \"3.19.0\")\n\t\tfind_package(GTest 1.10)\n\telse()\n\t\tfind_package(GTest 1.10...1.12)\n\tendif()\n\tif (NOT GTEST_FOUND)\n\t\tmessage(STATUS \"GTEST not found! Fetching from git.\")\n\t\tinclude(googletest)\n\t\tfetch_googletest(\n\t\t\t${PROJECT_SOURCE_DIR}/scripts\n\t\t\t${PROJECT_BINARY_DIR}/googletest\n\t\t)\n\t\tset(GTEST_BOTH_LIBRARIES \"gtest_main\" CACHE STRING \"Add gtest_main target\")\n\tendif()\n\n\tMafReadDir(test filelist.maf\n\t\tHEADERS SOURCES_unittests\n\t\tSOURCES SOURCES_unittests\n\t)\n\n\tsrt_add_program_dont_install(test-srt ${SOURCES_unittests})\n\tsrt_make_application(test-srt)\n\ttarget_include_directories(test-srt PRIVATE  ${SSL_INCLUDE_DIRS} ${GTEST_INCLUDE_DIRS})\n\ttarget_compile_definitions(test-srt PRIVATE \"-DSRT_TEST_SYSTEM_NAME=\\\"${CMAKE_SYSTEM_NAME}\\\"\")\n\n\ttarget_link_libraries(\n\t\ttest-srt\n\t\t${GTEST_BOTH_LIBRARIES}\n\t\t${srt_link_library}\n\t\t${PTHREAD_LIBRARY}\n\t\t)\n\n\tif (USE_OLD_ADD_METHOD)\n\t\tadd_test(\n\t\t\tNAME\ttest-srt\n\t\t\tCOMMAND\t${CMAKE_BINARY_DIR}/test-srt\n\t\t)\n\t\t#set_tests_properties(test-srt PROPERTIES RUN_SERIAL TRUE)\n\telse()\n\t\tset_tests_properties(${tests_srt} PROPERTIES RUN_SERIAL TRUE)\n\t\tgtest_discover_tests(test-srt)\n\tendif()\n\n\tenable_testing()\nendif()\n\n\nif(NOT NEED_DESTINATION)\n\tinstall(PROGRAMS scripts/srt-ffplay TYPE BIN)\nelseif (DEFINED CMAKE_INSTALL_BINDIR)\n\tinstall(PROGRAMS scripts/srt-ffplay DESTINATION ${CMAKE_INSTALL_BINDIR})\nelse()\n\tmessage(WARNING \"No location to install scripts/srt-ffplay\")\nendif()\n\n\nif (DEFINED SRT_EXTRA_APPS_INC)\n\tinclude(${SRT_EXTRA_APPS_INC}.cmake)\n\t# No extra variables expected. Just use the variables\n\t# already provided and define additional targets.\nendif()\n\nif (ENABLE_SHOW_PROJECT_CONFIG)\n\tinclude(ShowProjectConfig)\n\tShowProjectConfig()\nendif()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.3974609375,
          "content": "## License\n\nBy contributing code to the [SRT project](https://github.com/Haivision/srt/), you agree to license your contribution under the [MPLv2.0 License](LICENSE).\n\n## Issues\n\nOpen a GitHub issue for anything you find or any questions you have.\n\n## Comments\n\nComment on any GitHub issue, open or closed. The only guidelines here are to be friendly and welcoming. If you see that a question has been asked and you think you know the answer, don't wait!\n\n## Pull Requests\n\nSubmit a pull request at any time, whether an issue has been created or not. It may be helpful to discuss your goals in an issue first, though many things can best be shown with code. Also do not hesitate to ask other users for opinion and discuss the ideas using the ticketing system before you start making your changes. This is especially important in these areas:\n\n* the build system and its variables\n* the SRT library public API\n* command line tools and their call syntax\n* the reusable parts (such as utilities)\n* SRT protocol definitions\n* portability and platform-specific parts\n\nPlease follow the [SRT Developer's Guide](docs/dev/developers-guide.md).\n\n## Code Style\n\nPlease follow existing style.\n\n## Attribution\n\nThis contributing guide is adapted from [VVV's guide](https://github.com/Varying-Vagrant-Vagrants/VVV/blob/develop/.github/CONTRIBUTING.md).\n\n## Developer's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n* (a) The contribution was created in whole or in part by me and I\n  have the right to submit it under the open source license\n  indicated in the file; or\n\n* (b) The contribution is based upon previous work that, to the best\n  of my knowledge, is covered under an appropriate open source\n  license and I have the right under that license to submit that\n  work with modifications, whether created in whole or in part\n  by me, under the same open source license (unless I am\n  permitted to submit under a different license), as indicated\n  in the file; or\n\n* (c) The contribution was provided directly to me by some other\n  person who certified (a), (b) or (c) and I have not modified\n  it.\n\n* (d) I understand and agree that this project and the contribution\n  are public and that a record of the contribution (including all\n  personal information I submit with it, including my sign-off) is\n  maintained indefinitely and may be redistributed consistent with\n  this project or the open source license(s) involved.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 16.333984375,
          "content": "Mozilla Public License Version 2.0\n==================================\n\n1. Definitions\n--------------\n\n1.1. \"Contributor\"\n    means each individual or legal entity that creates, contributes to\n    the creation of, or owns Covered Software.\n\n1.2. \"Contributor Version\"\n    means the combination of the Contributions of others (if any) used\n    by a Contributor and that particular Contributor's Contribution.\n\n1.3. \"Contribution\"\n    means Covered Software of a particular Contributor.\n\n1.4. \"Covered Software\"\n    means Source Code Form to which the initial Contributor has attached\n    the notice in Exhibit A, the Executable Form of such Source Code\n    Form, and Modifications of such Source Code Form, in each case\n    including portions thereof.\n\n1.5. \"Incompatible With Secondary Licenses\"\n    means\n\n    (a) that the initial Contributor has attached the notice described\n        in Exhibit B to the Covered Software; or\n\n    (b) that the Covered Software was made available under the terms of\n        version 1.1 or earlier of the License, but not also under the\n        terms of a Secondary License.\n\n1.6. \"Executable Form\"\n    means any form of the work other than Source Code Form.\n\n1.7. \"Larger Work\"\n    means a work that combines Covered Software with other material, in \n    a separate file or files, that is not Covered Software.\n\n1.8. \"License\"\n    means this document.\n\n1.9. \"Licensable\"\n    means having the right to grant, to the maximum extent possible,\n    whether at the time of the initial grant or subsequently, any and\n    all of the rights conveyed by this License.\n\n1.10. \"Modifications\"\n    means any of the following:\n\n    (a) any file in Source Code Form that results from an addition to,\n        deletion from, or modification of the contents of Covered\n        Software; or\n\n    (b) any new file in Source Code Form that contains any Covered\n        Software.\n\n1.11. \"Patent Claims\" of a Contributor\n    means any patent claim(s), including without limitation, method,\n    process, and apparatus claims, in any patent Licensable by such\n    Contributor that would be infringed, but for the grant of the\n    License, by the making, using, selling, offering for sale, having\n    made, import, or transfer of either its Contributions or its\n    Contributor Version.\n\n1.12. \"Secondary License\"\n    means either the GNU General Public License, Version 2.0, the GNU\n    Lesser General Public License, Version 2.1, the GNU Affero General\n    Public License, Version 3.0, or any later versions of those\n    licenses.\n\n1.13. \"Source Code Form\"\n    means the form of the work preferred for making modifications.\n\n1.14. \"You\" (or \"Your\")\n    means an individual or a legal entity exercising rights under this\n    License. For legal entities, \"You\" includes any entity that\n    controls, is controlled by, or is under common control with You. For\n    purposes of this definition, \"control\" means (a) the power, direct\n    or indirect, to cause the direction or management of such entity,\n    whether by contract or otherwise, or (b) ownership of more than\n    fifty percent (50%) of the outstanding shares or beneficial\n    ownership of such entity.\n\n2. License Grants and Conditions\n--------------------------------\n\n2.1. Grants\n\nEach Contributor hereby grants You a world-wide, royalty-free,\nnon-exclusive license:\n\n(a) under intellectual property rights (other than patent or trademark)\n    Licensable by such Contributor to use, reproduce, make available,\n    modify, display, perform, distribute, and otherwise exploit its\n    Contributions, either on an unmodified basis, with Modifications, or\n    as part of a Larger Work; and\n\n(b) under Patent Claims of such Contributor to make, use, sell, offer\n    for sale, have made, import, and otherwise transfer either its\n    Contributions or its Contributor Version.\n\n2.2. Effective Date\n\nThe licenses granted in Section 2.1 with respect to any Contribution\nbecome effective for each Contribution on the date the Contributor first\ndistributes such Contribution.\n\n2.3. Limitations on Grant Scope\n\nThe licenses granted in this Section 2 are the only rights granted under\nthis License. No additional rights or licenses will be implied from the\ndistribution or licensing of Covered Software under this License.\nNotwithstanding Section 2.1(b) above, no patent license is granted by a\nContributor:\n\n(a) for any code that a Contributor has removed from Covered Software;\n    or\n\n(b) for infringements caused by: (i) Your and any other third party's\n    modifications of Covered Software, or (ii) the combination of its\n    Contributions with other software (except as part of its Contributor\n    Version); or\n\n(c) under Patent Claims infringed by Covered Software in the absence of\n    its Contributions.\n\nThis License does not grant any rights in the trademarks, service marks,\nor logos of any Contributor (except as may be necessary to comply with\nthe notice requirements in Section 3.4).\n\n2.4. Subsequent Licenses\n\nNo Contributor makes additional grants as a result of Your choice to\ndistribute the Covered Software under a subsequent version of this\nLicense (see Section 10.2) or under the terms of a Secondary License (if\npermitted under the terms of Section 3.3).\n\n2.5. Representation\n\nEach Contributor represents that the Contributor believes its\nContributions are its original creation(s) or it has sufficient rights\nto grant the rights to its Contributions conveyed by this License.\n\n2.6. Fair Use\n\nThis License is not intended to limit any rights You have under\napplicable copyright doctrines of fair use, fair dealing, or other\nequivalents.\n\n2.7. Conditions\n\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted\nin Section 2.1.\n\n3. Responsibilities\n-------------------\n\n3.1. Distribution of Source Form\n\nAll distribution of Covered Software in Source Code Form, including any\nModifications that You create or to which You contribute, must be under\nthe terms of this License. You must inform recipients that the Source\nCode Form of the Covered Software is governed by the terms of this\nLicense, and how they can obtain a copy of this License. You may not\nattempt to alter or restrict the recipients' rights in the Source Code\nForm.\n\n3.2. Distribution of Executable Form\n\nIf You distribute Covered Software in Executable Form then:\n\n(a) such Covered Software must also be made available in Source Code\n    Form, as described in Section 3.1, and You must inform recipients of\n    the Executable Form how they can obtain a copy of such Source Code\n    Form by reasonable means in a timely manner, at a charge no more\n    than the cost of distribution to the recipient; and\n\n(b) You may distribute such Executable Form under the terms of this\n    License, or sublicense it under different terms, provided that the\n    license for the Executable Form does not attempt to limit or alter\n    the recipients' rights in the Source Code Form under this License.\n\n3.3. Distribution of a Larger Work\n\nYou may create and distribute a Larger Work under terms of Your choice,\nprovided that You also comply with the requirements of this License for\nthe Covered Software. If the Larger Work is a combination of Covered\nSoftware with a work governed by one or more Secondary Licenses, and the\nCovered Software is not Incompatible With Secondary Licenses, this\nLicense permits You to additionally distribute such Covered Software\nunder the terms of such Secondary License(s), so that the recipient of\nthe Larger Work may, at their option, further distribute the Covered\nSoftware under the terms of either this License or such Secondary\nLicense(s).\n\n3.4. Notices\n\nYou may not remove or alter the substance of any license notices\n(including copyright notices, patent notices, disclaimers of warranty,\nor limitations of liability) contained within the Source Code Form of\nthe Covered Software, except that You may alter any license notices to\nthe extent required to remedy known factual inaccuracies.\n\n3.5. Application of Additional Terms\n\nYou may choose to offer, and to charge a fee for, warranty, support,\nindemnity or liability obligations to one or more recipients of Covered\nSoftware. However, You may do so only on Your own behalf, and not on\nbehalf of any Contributor. You must make it absolutely clear that any\nsuch warranty, support, indemnity, or liability obligation is offered by\nYou alone, and You hereby agree to indemnify every Contributor for any\nliability incurred by such Contributor as a result of warranty, support,\nindemnity or liability terms You offer. You may include additional\ndisclaimers of warranty and limitations of liability specific to any\njurisdiction.\n\n4. Inability to Comply Due to Statute or Regulation\n---------------------------------------------------\n\nIf it is impossible for You to comply with any of the terms of this\nLicense with respect to some or all of the Covered Software due to\nstatute, judicial order, or regulation then You must: (a) comply with\nthe terms of this License to the maximum extent possible; and (b)\ndescribe the limitations and the code they affect. Such description must\nbe placed in a text file included with all distributions of the Covered\nSoftware under this License. Except to the extent prohibited by statute\nor regulation, such description must be sufficiently detailed for a\nrecipient of ordinary skill to be able to understand it.\n\n5. Termination\n--------------\n\n5.1. The rights granted under this License will terminate automatically\nif You fail to comply with any of its terms. However, if You become\ncompliant, then the rights granted under this License from a particular\nContributor are reinstated (a) provisionally, unless and until such\nContributor explicitly and finally terminates Your grants, and (b) on an\nongoing basis, if such Contributor fails to notify You of the\nnon-compliance by some reasonable means prior to 60 days after You have\ncome back into compliance. Moreover, Your grants from a particular\nContributor are reinstated on an ongoing basis if such Contributor\nnotifies You of the non-compliance by some reasonable means, this is the\nfirst time You have received notice of non-compliance with this License\nfrom such Contributor, and You become compliant prior to 30 days after\nYour receipt of the notice.\n\n5.2. If You initiate litigation against any entity by asserting a patent\ninfringement claim (excluding declaratory judgment actions,\ncounter-claims, and cross-claims) alleging that a Contributor Version\ndirectly or indirectly infringes any patent, then the rights granted to\nYou by any and all Contributors for the Covered Software under Section\n2.1 of this License shall terminate.\n\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all\nend user license agreements (excluding distributors and resellers) which\nhave been validly granted by You or Your distributors under this License\nprior to termination shall survive termination.\n\n************************************************************************\n*                                                                      *\n*  6. Disclaimer of Warranty                                           *\n*  -------------------------                                           *\n*                                                                      *\n*  Covered Software is provided under this License on an \"as is\"       *\n*  basis, without warranty of any kind, either expressed, implied, or  *\n*  statutory, including, without limitation, warranties that the       *\n*  Covered Software is free of defects, merchantable, fit for a        *\n*  particular purpose or non-infringing. The entire risk as to the     *\n*  quality and performance of the Covered Software is with You.        *\n*  Should any Covered Software prove defective in any respect, You     *\n*  (not any Contributor) assume the cost of any necessary servicing,   *\n*  repair, or correction. This disclaimer of warranty constitutes an   *\n*  essential part of this License. No use of any Covered Software is   *\n*  authorized under this License except under this disclaimer.         *\n*                                                                      *\n************************************************************************\n\n************************************************************************\n*                                                                      *\n*  7. Limitation of Liability                                          *\n*  --------------------------                                          *\n*                                                                      *\n*  Under no circumstances and under no legal theory, whether tort      *\n*  (including negligence), contract, or otherwise, shall any           *\n*  Contributor, or anyone who distributes Covered Software as          *\n*  permitted above, be liable to You for any direct, indirect,         *\n*  special, incidental, or consequential damages of any character      *\n*  including, without limitation, damages for lost profits, loss of    *\n*  goodwill, work stoppage, computer failure or malfunction, or any    *\n*  and all other commercial damages or losses, even if such party      *\n*  shall have been informed of the possibility of such damages. This   *\n*  limitation of liability shall not apply to liability for death or   *\n*  personal injury resulting from such party's negligence to the       *\n*  extent applicable law prohibits such limitation. Some               *\n*  jurisdictions do not allow the exclusion or limitation of           *\n*  incidental or consequential damages, so this exclusion and          *\n*  limitation may not apply to You.                                    *\n*                                                                      *\n************************************************************************\n\n8. Litigation\n-------------\n\nAny litigation relating to this License may be brought only in the\ncourts of a jurisdiction where the defendant maintains its principal\nplace of business and such litigation shall be governed by laws of that\njurisdiction, without reference to its conflict-of-law provisions.\nNothing in this Section shall prevent a party's ability to bring\ncross-claims or counter-claims.\n\n9. Miscellaneous\n----------------\n\nThis License represents the complete agreement concerning the subject\nmatter hereof. If any provision of this License is held to be\nunenforceable, such provision shall be reformed only to the extent\nnecessary to make it enforceable. Any law or regulation which provides\nthat the language of a contract shall be construed against the drafter\nshall not be used to construe this License against a Contributor.\n\n10. Versions of the License\n---------------------------\n\n10.1. New Versions\n\nMozilla Foundation is the license steward. Except as provided in Section\n10.3, no one other than the license steward has the right to modify or\npublish new versions of this License. Each version will be given a\ndistinguishing version number.\n\n10.2. Effect of New Versions\n\nYou may distribute the Covered Software under the terms of the version\nof the License under which You originally received the Covered Software,\nor under the terms of any subsequent version published by the license\nsteward.\n\n10.3. Modified Versions\n\nIf you create software not governed by this License, and you want to\ncreate a new license for such software, you may create and use a\nmodified version of this License if you rename the license and remove\nany references to the name of the license steward (except to note that\nsuch modified license differs from this License).\n\n10.4. Distributing Source Code Form that is Incompatible With Secondary\nLicenses\n\nIf You choose to distribute Source Code Form that is Incompatible With\nSecondary Licenses under the terms of this version of the License, the\nnotice described in Exhibit B of this License must be attached.\n\nExhibit A - Source Code Form License Notice\n-------------------------------------------\n\n  This Source Code Form is subject to the terms of the Mozilla Public\n  License, v. 2.0. If a copy of the MPL was not distributed with this\n  file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular\nfile, then You may include the notice in a location (such as a LICENSE\nfile in a relevant directory) where a recipient would be likely to look\nfor such a notice.\n\nYou may add additional accurate notices of copyright ownership.\n\nExhibit B - \"Incompatible With Secondary Licenses\" Notice\n---------------------------------------------------------\n\n  This Source Code Form is \"Incompatible With Secondary Licenses\", as\n  defined by the Mozilla Public License, v. 2.0.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.2646484375,
          "content": "# Secure Reliable Transport (SRT) Protocol\n\n[About SRT](#what-is-srt) | [Features](#features) | [Getting Started](#getting-started-with-srt) | [Build Instructions](#build-instructions) | [Sample Apps and Tools](#sample-applications-and-tools) | [Contribute](#contributing) | [License](#license) | [Releases](#release-history)\n\n<p align=\"left\">\n  <a href=\"http://srtalliance.org/\">\n    <img alt=\"SRT\" src=\"http://www.srtalliance.org/wp-content/uploads/SRT_text_hor_logo_grey.png\" width=\"500\"/>\n  </a>\n</p>\n\n[![License: MPLv2.0][license-badge]](./LICENSE)\n[![Latest release][release-badge]][github releases]\n[![Quality Gate Status][sonarcloud-badge]][sonarcloud-project]\n[![codecov][codecov-badge]][codecov-project]\n[![Build Status Linux and macOS][travis-badge]][travis]\n[![Build Status Windows][appveyor-badge]][appveyor]\n\n[![Ubuntu 23.04][Ubuntu-badge]][Ubuntu-package]\n[![Fedora 37][fedora-badge]][fedora-package]\n[![Debian][debian-badge]][debian-package]\n[![Homebrew][Homebrew-badge]][Homebrew-package]\n[![Vcpkg][Vcpkg-badge]][Vcpkg-package]\n[![ConanCenter][ConanCenter-badge]][ConanCenter-package]\n\n\n## What is SRT?\n\n**Secure Reliable Transport (SRT)** is a transport protocol for ultra low (sub-second) latency live video and audio streaming, as well as for generic bulk data transfer[^1]. SRT is available as an open-source technology with the code on GitHub, a published [Internet Draft](https://datatracker.ietf.org/doc/html/draft-sharabayko-srt-01), and a growing [community of SRT users](https://www.srtalliance.org/).\n\nSRT is applied to contribution and distribution endpoints as part of a video stream workflow to deliver the best quality and lowest latency video at all times.\n\n|               |                                                   |\n| ------------- | ------------------------------------------------- |\n| **S**ecure    | Encrypts video streams                            |\n| **R**eliable  | Recovers from severe packet loss                  |\n| **T**ransport | Dynamically adapts to changing network conditions |\n\nIn live streaming configurations, the SRT protocol maintains a constant end-to-end latency. This allows the live stream's signal characteristics to be recreated on the receiver side, reducing the need for buffering. As packets are streamed from source to destination, SRT detects and adapts to real-time network conditions between the two endpoints. It helps compensate for jitter and bandwidth fluctuations due to congestion over noisy networks.\n\n[SRT implements AES encryption](https://datatracker.ietf.org/doc/html/draft-sharabayko-srt-01#section-6) to protect the payload of the media streams, and offers various error recovery mechanisms for minimizing the packet loss that is typical of Internet connections, of which Automatic Repeat reQuest (ARQ) is the primary method. With ARQ, when a receiver detects that a packet is missing it sends an alert to the sender requesting retransmission of this missing packet. [Forward Error Correction (FEC)](./docs/features/packet-filtering-and-fec.md) and [Connection Bonding](./docs/features/bonding-quick-start.md), which adds seamless stream protection and hitless failover, are also supported by the protocol.\n\n<p align=\"right\"><em>To learn more about the protocol subscribe to the <a href=\"https://medium.com/innovation-labs-blog/tagged/secure-reliable-transport\">Innovation Labs Blog</a> on &nbsp;<img alt=\"slack logo\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0d/Medium_%28website%29_logo.svg/500px-Medium_%28website%29_logo.svg.png\" width=\"80\"></em></p>\n\n<p align=\"right\"><em>To ask a question <a href=\"https://slackin-srtalliance.azurewebsites.net\">join the conversation</a> in the <b>#development</b> channel on &nbsp;<a href=\"https://srtalliance.slack.com\"><img alt=\"slack logo\" src=\"https://github.com/stevomatthews/srt/blob/master/docs/images/Slack_RGB2.svg\" width=\"60\"></a></em></p>\n\n## Features\n\n> :point_down: Click on the &#9658; button to expand a feature description.\n\n<details>\n  <summary>Pristine Quality and Reliability</summary>\n\n  <p>\n\n  No matter how unreliable your network, SRT can recover from severe packet loss and jitter, ensuring the integrity and quality of your video streams.\n\n  </p>\n</details>\n\n<details>\n  <summary>Low Latency</summary>\n\n  <p>\n\n  SRT’s stream error correction is configurable to accommodate a user’s deployment conditions. Leveraging real-time IP communications development to extend traditional network error recovery practices, SRT delivers media with significantly lower latency than TCP/IP, while offering the speed of UDP transmission with greatly improved reliability.\n\n  </p>\n</details>\n\n<details>\n  <summary>Content Agnostic</summary>\n\n  <p>\n\n  Unlike some other streaming protocols that only support specific video and audio formats, SRT is payload agnostic. Because SRT operates at the network transport level, acting as a wrapper around your content, it can transport any type of video format, codec, resolution, or frame rate.\n\n  </p>\n</details>\n\n<details>\n  <summary>Easy Firewall Traversal with Rendezvous Mode</summary>\n\n  <p>\n\n  The handshaking process used by SRT supports outbound connections without the potential risks and dangers of permanent exterior ports being opened in a firewall, thereby maintaining corporate LAN security policies and minimizing the need for IT intervention.\n\n  </p>\n</details>\n\n<details>\n  <summary><a href=\"https://datatracker.ietf.org/doc/html/draft-sharabayko-srt-01#section-6\">AES Encryption</a></summary>\n\n  <p>\n\n  Using 128/192/256-bit AES encryption trusted by governments and organizations around the world, SRT ensures that valuable content is protected end-to-end from contribution to distribution so that no unauthorized parties can listen.\n\n  </p>\n</details>\n\n<details>\n  <summary><a href=\"./docs/features/packet-filtering-and-fec.md\">Forward Error Correction (FEC) and Packet Filter API</a></summary>\n\n  <p>\n\n  [SRT 1.4](https://github.com/Haivision/srt/releases/tag/v1.4.0) sees the introduction of the _packet filter API_. This mechanism allows custom processing to be performed on network packets on the sender side before they are sent, and on the receiver side once received from the network. The API allows users to write their own plugin, thereby extending the SRT protocol's capabilities even further with all kinds of different packet filtering. Users can manipulate the resulting packet filter data in any way, such as for custom encryption, packet inspection, or accessing data before it is sent.\n\n  The first plugin created as an example of what can be achieved with the packet filter API is for Forward Error Correction (FEC) which, in certain use cases, can offer slightly lower latency than Automatic Repeat reQuest (ARQ). This plugin allows three different modes:\n\n   - ARQ only – retransmits lost packets,\n   - FEC only – provides the overhead needed for FEC recovery on the receiver side,\n   - FEC and ARQ – retransmits lost packets that FEC fails to recover.\n\n  </p>\n</details>\n\n<details>\n  <summary><a href=\"./docs/features/bonding-quick-start.md\">Connection Bonding</a></summary>\n\n  <p>\n\n  Similar to SMPTE-2022-7 over managed networks, Connection Bonding adds seamless stream protection and hitless failover to the SRT protocol. This technology relies on more than one IP network path to prevent disruption to live video streams in the event of network congestion or outages, maintaining continuity of service.\n\n  This is accomplished using the [socket groups](./docs/features/socket-groups.md) introduced in [SRT v1.5](https://github.com/Haivision/srt/releases/tag/v1.5.0). The general concept of socket groups means having a group that contains multiple sockets, where one operation for sending one data signal is applied to the group. Single sockets inside the group will take over this operation and do what is necessary to deliver the signal to the receiver.\n\n  Two modes are supported:\n\n  - [Broadcast](./docs/features/socket-groups.md#1-broadcast) - In *Broadcast* mode, data is sent redundantly over all the member links in a group. If one of the links fails or experiences network jitter and/or packet loss, the missing data will be received over another link in the group. Redundant packets are simply discarded at the receiver side.\n\n  - [Main/Backup](./docs/features/bonding-main-backup.md) - In *Main/Backup* mode, only one (main) link at a time is used for data transmission while other (backup) connections are on standby to ensure the transmission will continue if the main link fails. The goal of Main/Backup mode is to identify a potential link break before it happens, thus providing a time window within which to seamlessly switch to one of the backup links.\n\n  </p>\n</details>\n\n<details>\n  <summary><a href=\"./docs/features/access-control.md\">Access Control (Stream ID)</a></summary>\n\n  <p>\n\n  Access Control enables the upstream application to assign a Stream ID to individual SRT streams. By using a unique Stream ID, either automatically generated or customized, the upstream application can send multiple SRT streams to a single IP address and UDP port. The Stream IDs can then be used by a receiver to identify and differentiate between ingest streams, apply user password access methods, and in some cases even apply automation based on the naming of the Stream ID. For example, contribution could be sent to a video production workflow and monitoring to a monitoring service.\n\n  For broadcasters, Stream ID is key to replacing RTMP for ingesting video streams, especially HEVC/H.265 content, into cloud service or CDNs that have a single IP socket (address + port) open for incoming video.\n\n  </p>\n</details>\n\n## Getting Started with SRT\n\n|                                                                                                                               |                                                                                      |                                                                                   |\n|:-----------------------------------------------------------------------------------------------------------------------------:|:------------------------------------------------------------------------------------:|:---------------------------------------------------------------------------------:|\n| [The SRT API](./docs#srt-api-documents)                                                                                       | [IETF Internet Draft](https://datatracker.ietf.org/doc/html/draft-sharabayko-srt-01) | [Sample Apps](./docs#sample-applications)                                         |\n| Reference documentation for the SRT library API                                                                               | The SRT Protocol Internet Draft                                                      | Instructions for using test apps (`srt-live-transmit`, `srt-file-transmit`, etc.) |\n| [SRT Technical Overview](https://github.com/Haivision/srt/files/2489142/SRT_Protocol_TechnicalOverview_DRAFT_2018-10-17.pdf)  | [SRT Deployment Guide](https://www.srtalliance.org/srt-deployment-guide/)            | [SRT CookBook](https://srtlab.github.io/srt-cookbook)                             |\n| Early draft technical overview (precursor to the Internet Draft)                                                              | A comprehensive overview of the protocol with deployment guidelines                  | Development notes on the SRT protocol                                             |\n| [Innovation Labs Blog](https://medium.com/innovation-labs-blog/tagged/secure-reliable-transport)                              | [SRTLab YouTube Channel](https://www.youtube.com/channel/UCr35JJ32jKKWIYymR1PTdpA)   | [Slack](https://srtalliance.slack.com)                                            |\n| The blog on Medium with SRT-related technical articles                                                                        | Technical YouTube channel with useful videos                                         | Slack channels to get the latest updates and ask questions <br />[Join SRT Alliance on Slack](https://slackin-srtalliance.azurewebsites.net/) |\n\n### Additional Documentation\n\n- [Why SRT?](./docs/misc/why-srt-was-created.md) - A brief history and rationale for SRT by Marc Cymontkowski.\n- [RTMP vs. SRT: Comparing Latency and Maximum Bandwidth](https://www.haivision.com/resources/white-paper/srt-versus-rtmp/) White Paper.\n- [Documentation on GitHub](./docs#documentation-overview) with SRT API documents, features decsriptions, etc.\n- The SRT Protocol Internet Draft: [Datatracker](https://datatracker.ietf.org/doc/draft-sharabayko-srt/) | [Latest Version](https://datatracker.ietf.org/doc/html/draft-sharabayko-srt-01) | [Latest Working Copy](https://haivision.github.io/srt-rfc/draft-sharabayko-srt.html) | [GitHub Repo](https://github.com/Haivision/srt-rfc)\n\n## Build Instructions\n\n[Linux (Ubuntu/CentOS)](./docs/build/build-linux.md) | [Windows](./docs/build/build-win.md) | [macOS](./docs/build/build-macOS.md) | [iOS](./docs/build/build-iOS.md) | [Android](./docs/build/build-android.md) | [Package Managers](./docs/build/package-managers.md)\n\n### Requirements\n\n* C++03 or above compliant compiler.\n* CMake 2.8.12 or above as a build system.\n* OpenSSL 1.1 to enable encryption, otherwise build with [`-DENABLE_ENCRYPTION=OFF`](./docs/build/build-options.md#enable_encryption).\n* Multithreading is provided by either of the following:\n  * C++11: standard library (`std` by [`-DENABLE_STDCXX_SYNC=ON`](./docs/build/build-options.md#enable_stdcxx_sync) CMake option),\n  * C++03: Pthreads (for POSIX systems it's built in, for Windows there is a ported library).\n* Tcl 8.5 is optional and is used by `./configure` script. Otherwise, use CMake directly.\n\n### Build Options\n\nFor detailed descriptions of the build system and options, please read the [SRT Build Options](./docs/build/build-options.md) document.\n\n## Sample Applications and Tools\n\nThe current repo provides [sample applications](./apps) and [code examples](./examples) that demonstrate the usage of the SRT library API. Among them are [`srt-live-transmit`](./apps/srt-live-transmit.cpp), [`srt-file-transmit`](./apps/srt-file-transmit.cpp), and other applications. The respective documentation can be found [here](./docs#sample-applications). Note that all samples are provided for instructional purposes, and should not be used in a production environment.\n\nThe [`srt-xtransmit`](https://github.com/maxsharabayko/srt-xtransmit) utility is actively used for internal testing and performance evaluation. Among other features it supports dummy payload generation, traffic routings, and connection bonding. Additional details are available in the [`srt-xtransmit`](https://github.com/maxsharabayko/srt-xtransmit) repo itself.\n\nPython tools that might be useful during development are:\n\n- [`srt-stats-plotting`](https://github.com/mbakholdina/srt-stats-plotting) - A script designed to plot graphs based on SRT `.csv` statistics.\n- [`lib-tcpdump-processing`](https://github.com/mbakholdina/lib-tcpdump-processing) - A library designed to process `.pcap(ng)` [tcpdump](https://www.tcpdump.org/) or [Wireshark](https://www.wireshark.org/) trace files and extract SRT packets of interest for further analysis.\n- [`lib-srt-utils`](https://github.com/mbakholdina/lib-srt-utils) - A Python library containing supporting code for running SRT tests based on an experiment configuration.\n\n## Contributing\n\nAnyone is welcome to contribute. If you decide to get involved, please take a moment to review the guidelines:\n\n* [SRT Developer's Guide](docs/dev/developers-guide.md)\n* [Contributing](CONTRIBUTING.md)\n* [Reporting Issues](docs/dev/making-srt-better.md)\n\nFor information on contributing to the [Internet Draft](https://datatracker.ietf.org/doc/html/draft-sharabayko-srt-01) or to submit issues please go to the following [repo](https://github.com/Haivision/srt-rfc). The repo for contributing in [SRT CookBook](https://srtlab.github.io/srt-cookbook/) can be found [here](https://github.com/SRTLab/srt-cookbook/).\n\n## License\n\nBy contributing code to the SRT project, you agree to license your contribution under the [MPLv2.0 License](LICENSE).\n\n## Release History\n\n- [Release notes](https://github.com/Haivision/srt/releases)\n- [SRT versioning](./docs/dev/developers-guide.md#versioning)\n\n\n[^1]: The term “live streaming” refers to continuous data transmission (MPEG-TS or equivalent) with latency management. Live streaming based on segmentation and transmission of files like in the HTTP Live Streaming (HLS) protocol (as described in RFC8216) is not part of this use case. File transmission in either message or buffer mode should be considered in this case. See [Section 7. Best Practices and Configuration Tips for Data Transmission via SRT](https://datatracker.ietf.org/doc/html/draft-sharabayko-srt-01#section-7) of the Internet Draft for details. Note that SRT is content agnostic, meaning that any type of data can be transmitted via its payload.\n\n\n[appveyor-badge]: https://img.shields.io/appveyor/ci/Haivision/srt/master.svg?label=Windows\n[appveyor]: https://ci.appveyor.com/project/Haivision/srt\n[travis-badge]: https://img.shields.io/travis/Haivision/srt/master.svg?label=Linux/macOS\n[travis]: https://travis-ci.org/Haivision/srt\n[license-badge]: https://img.shields.io/badge/License-MPLv2.0-blue\n\n[Vcpkg-package]: https://repology.org/project/srt/versions\n[Vcpkg-badge]: https://repology.org/badge/version-for-repo/vcpkg/srt.svg\n\n[ConanCenter-package]: https://conan.io/center/recipes/srt\n[ConanCenter-badge]: https://img.shields.io/conan/v/srt\n\n[sonarcloud-project]: https://sonarcloud.io/project/overview?id=srt\n[sonarcloud-badge]: https://sonarcloud.io/api/project_badges/measure?project=srt&metric=alert_status\n\n[codecov-project]: https://codecov.io/gh/haivision/srt\n[codecov-badge]: https://codecov.io/gh/haivision/srt/branch/master/graph/badge.svg\n\n[github releases]: https://github.com/Haivision/srt/releases\n[release-badge]: https://img.shields.io/github/release/Haivision/srt.svg\n\n[debian-badge]: https://badges.debian.net/badges/debian/testing/libsrt1.5-gnutls/version.svg\n[debian-package]: https://packages.debian.org/testing/libs/libsrt1.5-gnutls\n\n[fedora-package]: https://repology.org/project/srt/versions\n[fedora-badge]: https://repology.org/badge/version-for-repo/fedora_37/srt.svg\n\n[homebrew-package]: https://repology.org/project/srt/versions\n[homebrew-badge]: https://repology.org/badge/version-for-repo/homebrew/srt.svg\n\n[Ubuntu-package]: https://repology.org/project/srt/versions\n[Ubuntu-badge]: https://repology.org/badge/version-for-repo/ubuntu_23_04/srt.svg\n"
        },
        {
          "name": "apps",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake_object_lib_support.c",
          "type": "blob",
          "size": 0.4658203125,
          "content": "// DO NOT DELETE\n// This file is needed for Xcode to properly handle CMake OBJECT Libraries\n// From docs (https://cmake.org/cmake/help/latest/command/add_library.html#object-libraries):\n//\n// ... Some native build systems (such as Xcode) may not like targets that have only object files,\n// so consider adding at least one real source file to any target that references $<TARGET_OBJECTS:objlib>.\n\n// Just a dummy symbol to avoid compiler warnings\nint srt_object_lib_dummy = 0;\n"
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.169921875,
          "content": "coverage:\n  status:\n    project:\n      default:\n        target: 40%\n        threshold: null\n    patch: false\n    changes: false\nignore:\n  - \"testing\"\n  - \"apps\"\n  - \"example\""
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure",
          "type": "blob",
          "size": 6.31640625,
          "content": "#!/usr/bin/tclsh\n\n#\n# SRT - Secure, Reliable, Transport\n# Copyright (c) 2018 Haivision Systems Inc.\n#\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n#\n\n# This is a general-purpose configure script, which is a user-friendly\n# wrapper to call the \"cmake\" command.\n\n# There are two options that are handled specifically:\n#\n# --help: show the list of official options\n# --prefix: alias to --cmake-install-prefix\n\n# The processing done automatically on all options by default is:\n# Every option like:\n#    --long-c++-option\n#    --cmake-special-option=ON\n# Turns into:\n#    -DLONG_CXX_OPTION=1\n#    -DCMAKE_SPECIAL_OPTION=ON\n#\n# In the configuration file, \"configure-data.tcl\", you can add\n# special processing for options and define explicit options\n# in the \"::options\" dictionary. Explicit options (in contrast\n# to \"blind\" options) have additional properties:\n#\n# - only those options are mentioned with --help\n# - you can pass a value for this option without = character\n# - you can specify --disable-option instead of --enable-option=0\n#\n# In \"configure-data.tcl\", beside ::options, you can define \"preprocess\" and\n# \"postprocess\" procedures. In \"preprocess\", use ::optval array to modify the\n# list of options to be processed further. Additionally in \"postprocess\"\n# procedure you can influence directly the options for \"cmake\" command in\n# ::cmakeopt variable (modifying ::optval in \"postprocess\" is useless).\n\n# The idea is that CMakeLists.txt contains things that are highly\n# customizable, but no system or option autodetection AWA \"sensible\n# defaults\" are provided. This is done by this script.\n\n\nset here [file dirname $argv0]\n\nset options \"\"\nset toolchain_changers \"\"\n\nsource $here/configure-data.tcl\n\n# Update alias with default alias\ndict set alias --prefix --cmake-install-prefix=\n\nproc resolve opt {\n\tset type arg\n\tset pos [string first $opt =]\n\tif { $pos == -1 } {\n\t\tset type bool\n\t\tset mark \"\"\n\t} else {\n\t\tset type arg\n\t\tset mark [string range $opt $pos+1 end]\n\t\tset opt [string range $opt 0 $pos-1]\n\t}\n\tset var [string toupper [string map {- _ + x} $opt]]\n\treturn [list --$opt $var $type $mark]\n}\n\n# Check if a --disable option has its --enable counterpart. If so,\n# then just invert the option.\nproc resolve_disablers {} {\n\tset enablers \"\"\n\tset optkeys_len [llength $::optkeys]\n\tfor {set pos 0} {$pos < $optkeys_len} {incr pos} {\n\t\tset opt [lindex $::optkeys $pos]\n\t\tif { [string match --disable-* $opt] } {\n\t\t\tset inverted enable-[string range $opt 10 end]\n\t\t\tif { $inverted in [dict keys $::options] } {\n\t\t\t\tlset ::optkeys $pos --$inverted\n\t\t\t\tset val $::optval($opt)\n\t\t\t\tunset ::optval($opt)\n\t\t\t\tif { $val == \"\" || ![string is boolean $val] } {\n\t\t\t\t\tset ::optval(--$inverted) 0\n\t\t\t\t} else {\n\t\t\t\t\tset ::optval(--$inverted) [expr {!$val}]\n\t\t\t\t}\n\n\t\t\t\tputs \"NOTE: $opt changed into --$inverted=$::optval(--$inverted)\"\n\t\t\t}\n\t\t}\n\t}\n}\n\nforeach {o desc} $options {\n\tlassign [resolve $o] optname optvar opttype optmark\n\tset opt($optname) [list $optvar $opttype $optmark]\n\tset info($optname) $desc\n}\n\n\nif { $argv == \"--help\" || $argv == \"-h\" } {\n\tputs stderr \"Usage: ./configure \\[options\\]\"\n\tputs stderr \"OPTIONS:\"\n\tforeach o [lsort [array names opt]] {\n\t\tlassign $opt($o) unu type mark\n\t\tset imark \"\"\n\t\tif { $mark != \"\" } {\n\t\t\tset imark \"=$mark\"\n\t\t}\n\t\tputs stderr \"\\t$o$imark - $info($o)\"\n\t}\n\n\tputs stderr \"NOTE1: Option list may be incomplete. Refer to variables in CMakeLists.txt\"\n\tputs stderr \"NOTE2: Non-internal options turn e.g. --enable-c++11 into cmake -DENABLE_CXX11=1\"\n\tputs stderr \"NOTE3: You can use --disable-x instead of --enable-x=0 for the above options.\"\n\t\n\texit 1\n}\n\nif { [info proc init] != \"\" } {\n\tinit\n}\n\n#parray opt\n\nset saveopt \"\"\nset optkeys \"\"\n\nset dryrun 0\nset type \"\"\n\nforeach a $argv {\n\tif { [info exists val] } { unset val }\n\n\tif { $saveopt != \"\" } {\n\t\tset optval($saveopt) $a\n\t\tset saveopt \"\"\n\t\tcontinue\n\t}\n\n\tif { [string range $a 0 1] != \"--\" } {\n\t\terror \"Unexpected argument '$a'. Options must start with --\"\n\t}\n\n\tif { $a == \"--dryrun\" } {\n\t\tset dryrun 1\n\t\tcontinue\n\t}\n\n\tset type \"\"\n\n\tif { [set a1 [string first = $a]] != -1 } {\n\t\t# Do not split. Options may include =.\n\t\tset val [string range $a $a1+1 end]\n\t\tset a [string range $a 0 $a1-1]\n\t}\n\n\tif { [dict exists $::alias $a] } {\n\t\tset aname [dict get $::alias $a]\n\t\tif { [string first = $aname] != -1 } {\n\t\t\tlassign [split $aname =] a aval\n\t\t\tset type arg\n\t\t}\n\t}\n\n\tif { ![info exists opt($a)] } {\n\t\t#puts stderr \"WARNING: Unknown option: $a\"\n\t\t# But still, simply turn the option to assign-based use.\n\t\tlassign [resolve [string range $a 2 end]] oname var\n\t\tif { ![info exists val] && $type == \"\" } {\n\t\t\tset type bool\n\t\t}\n\t} else {\n\t\tlassign $opt($a) var type\n\t}\n\n\tif { $type == \"bool\" } {\n\t\tif { ![info exists val] } {\n\t\t\tset val 1\n\t\t}\n\t\tset optval($a) $val\n\t} elseif { [info exists val] } {\n\t\tset optval($a) $val\n\t} else {\n\t\tset saveopt $a\n\t}\n\n\tlappend optkeys $a\n}\n\nif { $saveopt != \"\" } {\n\terror \"Extra unhandled argument: $saveopt\"\n}\n\n# Save the original call into config-status.sh\n\nset ofd [open config-status.sh w]\nputs $ofd \"#!/bin/bash\"\nputs -nonewline $ofd \"$argv0 \"\nforeach a $argv {\n\tset len 1\n\tif {[catch {llength $a} len] || $len > 1 } {\n\t\tputs -nonewline $ofd \"'$a' \"\n\t} else {\n\t\tputs -nonewline $ofd \"$a \"\n\t}\n}\nputs $ofd \"\"\nclose $ofd\nfile attributes config-status.sh -permissions +x\n\nset cmakeopt \"\"\n\nresolve_disablers\n\nif { [info proc preprocess] != \"\" } {\n\tpreprocess\n}\n\n# Check if there were new values added not added to optkeys\nforeach a [array names optval] {\n\tif { $a ni $optkeys } {\n\t\tlappend optkeys $a\n\t}\n}\n\n\nforeach a $optkeys {\n\n\tif { ![info exists optval($a)] } {\n\t\tcontinue  ;# user action might have removed it.\n\t}\n\n\tif { ![info exists opt($a)] } {\n\t\t#puts stderr \"WARNING: Unknown option: $a\"\n\t\t# But still, simply turn the option to assign-based use.\n\t\tlassign [resolve [string range $a 2 end]] oname var\n\t\tif { ![info exists val] && $type == \"\" } {\n\t\t\tset type bool\n\t\t}\n\t} else {\n\t\tlassign $opt($a) var type\n\t}\n\n\tset val $optval($a)\n\tlappend cmakeopt \"-D$var=$val\"\n}\n\n\nif { [info proc postprocess] != \"\" } {\n\tpostprocess\n}\n\n#puts \"VARSPEC: $cmakeopt\"\n\nset cmd [list cmake $here {*}$cmakeopt]\nputs \"Running: $cmd\"\nif { !$dryrun} {\n\tif { [catch {exec 2>@stderr >@stdout {*}$cmd} result] } {\n\t\tputs \"CONFIGURE: cmake reported error: $result\"\n\t}\n} else {\n\tputs \"(not really - dry run)\"\n}\n"
        },
        {
          "name": "configure-data.tcl",
          "type": "blob",
          "size": 15.23046875,
          "content": "#\n# SRT - Secure, Reliable, Transport\n# Copyright (c) 2018 Haivision Systems Inc.\n#\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n#\n\n# API description:\n\n# Expected variables:\n# - options: dictionary \"option-name\" : \"description\"\n#   if there's '=' in option name, it expects an argument. Otherwise it's boolean.\n# - alias: optional, you can make shortcuts to longer named options. Remember to use = in target name.\n# \n# Optional procedures:\n# - preprocess: run before command-line arguments ($argv) are reviewed\n# - postprocess: run after options are reviewed and all data filled in\n#\n# Available variables in postprocess:\n#\n# - optval (array): contains all option names with their assigned values\n# - cmakeopt (scalar): a list of all options for \"cmake\" command line\n\n# Options processed here internally, not passed to cmake\nset internal_options {\n    with-compiler-prefix=<prefix> \"set C/C++ toolchains <prefix>gcc and <prefix>g++\"\n    with-compiler-type=<name> \"compiler type: gcc(default), cc, others simply add ++ for C++\"\n    with-srt-name=<name> \"Override srt library name\"\n    with-haicrypt-name=<name> \"Override haicrypt library name (if compiled separately)\"\n    with-atomic=<spec> \"Select implementation for atomics (compiler-intrinsics or sync-mutex)\"\n}\n\n# Options that refer directly to variables used in CMakeLists.txt\nset cmake_options {\n    cygwin-use-posix \"Should the POSIX API be used for cygwin. Ignored if the system isn't cygwin. (default: OFF)\"\n    enable-c++11 \"Should the c++11 parts (srt-live-transmit) be enabled (default: ON, with gcc < 4.7 OFF)\"\n    enable-apps \"Should the Support Applications be Built? (default: ON)\"\n    enable-bonding \"Enable 'bonding' SRT feature (default: OFF)\"\n    enable-testing \"Should developer testing applications be built (default: OFF)\"\n    enable-profile \"Should instrument the code for profiling. Ignored for non-GNU compiler. (default: OFF)\"\n    enable-logging \"Should logging be enabled (default: ON)\"\n    enable-heavy-logging \"Should heavy debug logging be enabled (default: OFF)\"\n    enable-haicrypt-logging \"Should logging in haicrypt be enabled (default: OFF)\"\n    enable-pktinfo \"Should pktinfo reading and using be enabled (POSIX only) (default: OFF)\"\n    enable-shared \"Should libsrt be built as a shared library (default: ON)\"\n    enable-static \"Should libsrt be built as a static library (default: ON)\"\n    enable-relative-libpath \"Should applications contain relative library paths, like ../lib (default: OFF)\"\n    enable-getnameinfo \"In-logs sockaddr-to-string should do rev-dns (default: OFF)\"\n    enable-unittests \"Enable Unit Tests (will download Google UT) (default: OFF)\"\n    enable-encryption \"Should encryption features be enabled (default: ON)\"\n    enable-c++-deps \"Extra library dependencies in srt.pc for C language (default: ON)\"\n    use-static-libstdc++ \"Should use static rather than shared libstdc++ (default: OFF)\"\n    enable-inet-pton \"Set to OFF to prevent usage of inet_pton when building against modern SDKs (default: ON)\"\n    enable-code-coverage \"Enable code coverage reporting (default: OFF)\"\n    enable-monotonic-clock \"Enforced clock_gettime with monotonic clock on GC CV /temporary fix for #729/ (default: OFF)\"\n    enable-thread-check \"Enable #include <threadcheck.h> that implements THREAD_* macros\"\n    enable-stdc++-sync \"Use standard C++11 chrono/threads instead of pthread wrapper (default: OFF, on Windows: ON)\"\n    use-openssl-pc \"Use pkg-config to find OpenSSL libraries (default: ON)\"\n    openssl-use-static-libs \"Link OpenSSL statically (default: OFF).\"\n    use-busy-waiting \"Enable more accurate sending times at a cost of potentially higher CPU load (default: OFF)\"\n    use-gnustl \"Get c++ library/headers from the gnustl.pc\"\n    enable-sock-cloexec \"Enable setting SOCK_CLOEXEC on a socket (default: ON)\"\n    enable-show-project-config \"Enables use of ShowProjectConfig() in cmake (default: OFF)\"\n    enable-new-rcvbuffer \"Enables the new receiver buffer implementation (default: ON)\"\n    enable-clang-tsa \"Enable Clang's Thread-Safety-Analysis (default: OFF)\"\n    atomic-use-srt-sync-mutex \"Use mutex to implement atomics (alias: --with-atomic=sync-mutex) (default: OFF)\"\n\n    use-enclib \"Encryption library to be used: openssl(default), gnutls, mbedtls, botan\"\n    enable-debug=<0,1,2> \"Enable debug mode (0=disabled, 1=debug, 2=rel-with-debug)\"\n    pkg-config-executable=<filepath> \"pkg-config executable\"\n    openssl-crypto-library=<filepath> \"OpenSSL: Path to a libcrypto library.\"\n    openssl-include-dir=<path> \"OpenSSL: Path to includes.\"\n    openssl-ssl-library=<filepath> \"OpenSSL: Path to a libssl library.\"\n    pthread-include-dir=<path> \"PThread: Path to includes\"\n    pthread-library=<filepath> \"PThread: Path to the pthread library.\"\n}\n\nset options $internal_options$cmake_options\n\n# Just example. Available in the system.\nset alias {\n\t--prefix --cmake-install-prefix=\n}\n\nproc pkg-config args {\n\treturn [string trim [exec pkg-config {*}$args]]\n}\n\nproc flagval v {\n\tset out \"\"\n\tforeach o $v {\n\t\tlappend out [string trim [string range $o 2 en]]\n\t}\n\treturn $out\n}\n\nset haicrypt_name \"\"\nset srt_name \"\"\n\nproc preprocess {} {\n\n\t# Prepare windows basic path info\n\tset ::CYGWIN 0\n\tset e [catch {exec uname -o} res]\n\t# We have Cygwin, if uname -o returns \"cygwin\" and does not fail.\n\tif { !$e && $res == \"Cygwin\" } {\n\t\tset ::CYGWIN 1\n\t\tputs \"CYGWIN DETECTED\"\n\t}\n\n\tset ::HAVE_LINUX [expr {$::tcl_platform(os) == \"Linux\"}]\n\tset ::HAVE_DARWIN [expr {$::tcl_platform(os) == \"Darwin\"}]\n\n\tset ::CYGWIN_USE_POSIX 0\n\tif { \"--cygwin-use-posix\" in $::optkeys } {\n\t\tset ::CYGWIN_USE_POSIX 1\n\t}\n\n\tset ::HAVE_WINDOWS 0\n\tif { $::tcl_platform(platform) == \"windows\" } {\n\t\tputs \"WINDOWS PLATFORM detected\"\n\t\tset ::HAVE_WINDOWS 1\n\t}\n\n\tif { $::CYGWIN && !$::CYGWIN_USE_POSIX } {\n\t\tputs \"CYGWIN - MINGW enforced\"\n\t\t# Make Cygwin tools see it right, to compile for MinGW\n\n\t\tif { \"--with-compiler-prefix\" ni $::optkeys } {\n\t\t\tset ::optval(--with-compiler-prefix) /bin/x86_64-w64-mingw32-\n\t\t}\n\n\t\t# Extract drive C: information\n\t\tset drive_path [exec mount -p | tail -1 | cut {-d } -f 1]\n\t\tset ::DRIVE_C $drive_path/c\n\t\tset ::HAVE_WINDOWS 1\n\t} else {\n\n\t\t# Don't check for Windows, non-Windows parts will not use it.\n\t\tset ::DRIVE_C C:\n\t}\n\n\t# Alias to old name --with-gnutls, which enforces using gnutls instead of openssl\n\tif { [info exists ::optval(--with-gnutls)] } {\n\t\tunset ::optval(--with-gnutls)\n\t\tset ::optval(--use-enclib) gnutls\n\t\tputs \"WARNING: --with-gnutls is a deprecated alias to --use-enclib=gnutls, please use the latter one\"\n\t}\n\n\t# Alias to old name --use-gnutls, which enforces using gnutls instead of openssl\n\tif { [info exists ::optval(--use-gnutls)] } {\n\t\tunset ::optval(--use-gnutls)\n\t\tset ::optval(--use-enclib) gnutls\n\t\tputs \"WARNING: --use-gnutls is a deprecated alias to --use-enclib=gnutls, please use the latter one\"\n\t}\n\n\tif { [info exists ::optval(--with-target-path)] } {\n\t\tset ::target_path $::optval(--with-target-path)\n\t\tunset ::optval(--with-target-path)\n\t\tputs \"NOTE: Explicit target path: $::target_path\"\n\t}\n\n\tif { \"--with-srt-name\" in $::optkeys } {\n\t\tset ::srt_name $::optval(--with-srt-name)\n\t\tunset ::optval(--with-srt-name)\n\t}\n\n\tif { \"--with-haicrypt-name\" in $::optkeys } {\n\t\tset ::haicrypt_name $::optval(--with-haicrypt-name)\n\t\tunset ::optval(--with-haicrypt-name)\n\t}\n\n\tif { \"--with-atomic\" in $::optkeys } {\n\t\tswitch -- $::optval(--with-atomic) {\n\t\t\tcompiler-intrinsics {\n\t\t\t}\n\n\t\t\tsync-mutex {\n\t\t\t\tset ::optval(--atomic-use-srt-sync-mutex) 1\n\t\t\t}\n\n\t\t\tdefault {\n\t\t\t\tputs \"ERROR: --with-atomic option accepts two values: compiler-intrinsics (default) or sync-mutex\"\n\t\t\t\texit 1\n\t\t\t}\n\t\t}\n\n\t\tunset ::optval(--with-atomic)\n\t}\n}\n\n# Added also the Intel compiler names, just in case.\nset compiler_map {\n\tcc c++\n\tgcc g++\n\ticc icpc\n\ticx icpx\n}\n\nproc SplitCompilerVersionSuffix {cmd} {\n\t# If there's no version suffix, return just $cmd.\n\t# Otherwise return a list with cmd cut and version suffix\n\n\tset parts [split $cmd -]\n\tif {[llength $parts] == 1} {\n\t\treturn $cmd\n\t}\n\n\tset last [lindex $parts end]\n\tif {![regexp {[0-9]+.*} $last]} {\n\t\treturn $cmd\n\t}\n\n\t# Got the version\n\tif {[llength $parts] == 2} {\n\t\tset first [lindex $parts 0]\n\t} else {\n\t\tset first [join [lrange $parts 0 end-1] -]\n\t}\n\n\treturn [list $first -$last]\n}\n\n# This uses 'compiler' in the form of the C compiler\n# command line. For C++ it returns the C++ command line,\n# which is normally the C compiler command with ++.\nproc GetCompilerCmdName {compiler lang} {\n\tlassign [SplitCompilerVersionSuffix $compiler] compiler suffix\n\tif {$lang == \"c++\"} {\n\t\tif { [dict exists $::compiler_map $compiler] } {\n\t\t\treturn [dict get $::compiler_map $compiler]$suffix\n\t\t}\n\n\t\treturn ${compiler}++${suffix}\n\t}\n\n\treturn $compiler${suffix}\n}\n\nproc GetCompilerCommand { {lang {}} } {\n\t# Expect that the compiler was set through:\n\t# --with-compiler-prefix\n\t# --cmake-c[++]-compiler\n\t# (cmake-toolchain-file will set things up without the need to check things here)\n\n\tset compiler gcc\n\tif { [info exists ::optval(--with-compiler-type)] } {\n\t\tset compiler $::optval(--with-compiler-type)\n\t}\n\n\tif { [info exists ::optval(--with-compiler-prefix)] } {\n\t\tset prefix $::optval(--with-compiler-prefix)\n\t\treturn ${prefix}[GetCompilerCmdName $compiler $lang]\n\t} else {\n\t\treturn [GetCompilerCmdName $compiler $lang]\n\t}\n\n\tif { $lang != \"c++\" } {\n\t\tif { [info exists ::optval(--cmake-c-compiler)] } {\n\t\t\treturn $::optval(--cmake-c-compiler)\n\t\t}\n\t}\n\n\tif { $lang != \"c\" } {\n\t\tif { [info exists ::optval(--cmake-c++-compiler)] } {\n\t\t\treturn $::optval(--cmake-c++-compiler)\n\t\t}\n\n\t\tif { [info exists ::optval(--cmake-cxx-compiler)] } {\n\t\t\treturn $::optval(--cmake-cxx-compiler)\n\t\t}\n\t}\n\n\tputs \"NOTE: Cannot obtain compiler, assuming toolchain file will do what's necessary\"\n\n\treturn \"\"\n}\n\nproc postprocess {} {\n\n\tset iscross 0\n\n\t# Check if there was any option that changed the toolchain. If so, don't apply any autodetection-based toolchain change.\n\tset all_options [array names ::optval]\n\tset toolchain_changed no\n\tforeach changer {\n\t\t--with-compiler-prefix\n\t\t--with-compiler-type\n\t\t--cmake-c-compiler\n\t\t--cmake-c++-compiler\n\t\t--cmake-cxx-compiler\n\t\t--cmake-toolchain-file\n\t} {\n\t\tif { $changer in $all_options } {\n\t\t\tputs \"NOTE: toolchain changed by '$changer' option\"\n\t\t\tset toolchain_changed yes\n\t\t\tbreak\n\t\t}\n\t}\n\n\tset cygwin_posix 0\n\tif { \"--cygwin-use-posix\" in $all_options } {\n\t\t# Will enforce OpenSSL autodetection\n\t\tset cygwin_posix 1\n\t}\n\n\tif { $toolchain_changed } {\n\t\t# Check characteristics of the compiler - in particular, whether the target is different\n\t\t# than the current target.\n\t\tset compiler_path \"\"\n\t\tset target_platform \"\"\n\t\tset cmd [GetCompilerCommand]\n\t\tif { $cmd != \"\" } {\n\t\t\tset gcc_version [exec $cmd -v 2>@1]\n\t\t\tset target \"\"\n\t\t\tset compiler_path [file dirname $cmd]\n\t\t\tforeach l [split $gcc_version \\n] {\n\t\t\t\tif { [string match Target:* $l] } {\n\t\t\t\t\tset target [lindex $l 1] ;# [0]Target: [1]x86_64-some-things-further\n\t\t\t\t\tset target_platform [lindex [split $target -] 0]  ;# [0]x86_64 [1]redhat [2]linux\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif { $target_platform == \"\" } {\n\t\t\t\tputs \"NOTE: can't obtain target from '[file tail $cmd] -v': $l - ASSUMING HOST compiler\"\n\t\t\t} else {\n\t\t\t\tif { $target_platform != $::tcl_platform(machine) } {\n\t\t\t\t\tputs \"NOTE: foreign target type detected ($target)\" ;# - setting CROSSCOMPILING flag\"\n\t\t\t\t\t#lappend ::cmakeopt \"-DHAVE_CROSSCOMPILER=1\"\n\t\t\t\t\tset iscross 1\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tputs \"CONFIGURE: default compiler used\"\n\t\t}\n\n\t\t# Complete the variables before calling cmake, otherwise it might not work\n\n\t\tif { [info exists ::optval(--with-compiler-type)] } {\n\t\t\tif { ![info exists ::optval(--cmake-c-compiler)] } {\n\t\t\t\tlappend ::cmakeopt \"-DCMAKE_C_COMPILER=[GetCompilerCommand c]\"\n\t\t\t}\n\n\t\t\tif { ![info exists ::optval(--cmake-c++-compiler)] } {\n\t\t\t\tlappend ::cmakeopt \"-DCMAKE_CXX_COMPILER=[GetCompilerCommand c++]\"\n\t\t\t}\n\t\t}\n\t}\n\n\tif { $::srt_name != \"\" } {\n\t\tlappend ::cmakeopt \"-DTARGET_srt=$::srt_name\"\n\t}\n\n\tif { $::haicrypt_name != \"\" } {\n\t\tlappend ::cmakeopt \"-DTARGET_haicrypt=$::haicrypt_name\"\n\t}\n\n\tset have_openssl 0\n\tif { [lsearch -glob $::optkeys --openssl*] != -1 } {\n\t\tset have_openssl 1\n\t}\n\n\tset have_gnutls 0\n\tif { [lsearch -glob $::optkeys --use-gnutls] != -1 } {\n\t\tset have_gnutls 1\n\t}\n\n\tif { $have_openssl && $have_gnutls } {\n\t\tputs \"NOTE: SSL library is exclusively selectable. Thus, --use-gnutls option will be ignored\"\n\t\tset have_gnutls 0\n\t}\n\n\tif { $have_gnutls } {\n\t\tlappend ::cmakeopt \"-DUSE_GNUTLS=ON\"\n\t}\n\n\tif {$iscross} {\n\n\t\tproc check-target-path {path} {\n\t\t\tputs \"Checking path '$path'\"\n\t\t\tif { [file isdir $path]\n\t\t\t\t\t&& [file isdir $path/bin]\n\t\t\t\t\t&& [file isdir $path/include]\n\t\t\t\t\t&& ([file isdir $path/lib] || [file isdir $path/lib64]) } {\n\t\t\t\treturn yes\n\t\t\t}\n\t\t\treturn no\n\t\t}\n\n\t\tif { ![info exists ::target_path] } {\n\t\t\t# Try to autodetect the target path by having the basic 3 directories.\n\t\t\tset target_path \"\"\n\t\t\tset compiler_prefix [file dirname $compiler_path] ;# strip 'bin' directory\n\t\t\tputs \"NOTE: no --with-target-path found, will try to autodetect at $compiler_path\"\n\t\t\tforeach path [list $compiler_path $compiler_prefix/$target] {\n\t\t\t\tif { [check-target-path $path] } {\n\t\t\t\t\tset target_path $path\n\t\t\t\t\tputs \"NOTE: target path detected: $target_path\"\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif { $target_path == \"\" } {\n\t\t\t\tputs \"ERROR: Can't determine compiler's platform files root path (using compiler command path). Specify --with-target-path.\"\n\t\t\t\texit 1\n\t\t\t}\n\t\t} else {\n\t\t\tset target_path $::target_path\n\t\t\t# Still, check if correct.\n\t\t\tif { ![check-target-path $target_path] } {\n\t\t\t\tputs \"ERROR: path in --with-target-path does not contain typical subdirectories\"\n\t\t\t\texit 1\n\t\t\t}\n\t\t\tputs \"NOTE: Using explicit target path: $target_path\"\n\t\t}\n\n\t\t# Add this for cmake, should it need for something\n\t\tlappend ::cmakeopt \"-DCMAKE_PREFIX_PATH=$target_path\"\n\n\t\t# Add explicitly the path for pkg-config\n\t\t# which lib\n\t\tif { [file isdir $target_path/lib64/pkgconfig] } {\n\t\t\tset ::env(PKG_CONFIG_PATH) $target_path/lib64/pkgconfig\n\t\t\tputs \"PKG_CONFIG_PATH: Found pkgconfig in lib64 for '$target_path' - using it\"\n\t\t} elseif { [file isdir $target_path/lib/pkgconfig] } {\n\t\t\tset ::env(PKG_CONFIG_PATH) $target_path/lib/pkgconfig\n\t\t\tputs \"PKG_CONFIG_PATH: Found pkgconfig in lib for '$target_path' - using it\"\n\t\t} else {\n\t\t\tputs \"PKG_CONFIG_PATH: NOT changed, no pkgconfig in '$target_path'\"\n\t\t}\n\t\t# Otherwise don't set PKG_CONFIG_PATH and we'll see.\n\t}\n\n\tset use_brew 0\n\tif { $::HAVE_DARWIN && !$toolchain_changed } {\n\t\tset use_brew 1\n\t}\n\tif { [info exists ::optval(--use-enclib)] && $::optval(--use-enclib) == \"botan\"} {\n\t\tset use_brew 0\n\t}\n\n\tif { $use_brew } {\n\t\tforeach item $::cmakeopt {\n\t\t\tif { [string first \"Android\" $item] != -1 } {\n\t\t\t\tset use_brew 0\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\tif { $use_brew } {\n\t\tif { $have_gnutls } {\n\t\t\t# Use gnutls explicitly, as found in brew\n\t\t\tset er [catch {exec brew info gnutls} res]\n\t\t\tif { $er } {\n\t\t\t\terror \"Cannot find gnutls in brew\"\n\t\t\t}\n\t\t} else {\n\t\t\t# ON Darwin there's a problem with linking against the Mac-provided OpenSSL.\n\t\t\t# This must use brew-provided OpenSSL.\n\t\t\t#\n\t\t\tif { !$have_openssl } {\n\t\t\n\t\t\t\tset er [catch {exec brew info openssl} res]\n\t\t\t\tif { $er } {\n\t\t\t\t\terror \"You must have OpenSSL installed from 'brew' tool. The standard Mac version is inappropriate.\"\n\t\t\t\t}\n\n\t\t\t\tlappend ::cmakeopt \"-DOPENSSL_INCLUDE_DIR=/usr/local/opt/openssl/include\"\n\t\t\t\tlappend ::cmakeopt \"-DOPENSSL_LIBRARIES=/usr/local/opt/openssl/lib/libcrypto.a\"\n\t\t\t}\n\t\t}\n\t}\n\n}\n\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "haicrypt",
          "type": "tree",
          "content": null
        },
        {
          "name": "nuget.config",
          "type": "blob",
          "size": 0.43359375,
          "content": "<configuration>\n    <config>\n        <add key=\"dependencyVersion\" value=\"Highest\" />\n        <add key=\"globalPackagesFolder\" value=\"c:\\packages\" />\n        <add key=\"repositoryPath\" value=\"packages\" />\n    </config>\n    <packageSources>\n        <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\n        <!--<add key=\"Local Source\" value=\"D:\\Data\\Dev\\LocalNuget\" />-->\n    </packageSources>\n</configuration>"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "sonar-project.properties",
          "type": "blob",
          "size": 1.1435546875,
          "content": "# must be unique in a given SonarQube instance\nsonar.projectKey=srt\nsonar.organization=haivision\n\n# --- optional properties ---\n\n# This is the name and version displayed in the SonarCloud UI.\n#sonar.projectName=srt\n#sonar.projectVersion=1.0\n \n# Path is relative to the sonar-project.properties file. Replace \"\\\" by \"/\" on Windows.\n#sonar.sources=.\n \n# Encoding of the source code. Default is default system encoding\n#sonar.sourceEncoding=UTF-8\n\n# =====================================================\n#   Meta-data for the project\n# =====================================================\n\nsonar.links.homepage=https://github.com/Haivision/srt\nsonar.links.scm=https://github.com/Haivision/srt\nsonar.links.issue=https://github.com/Haivision/srt/issues\n\n\n# =====================================================\n#   Properties that will be shared amongst all modules\n# =====================================================\n\n# SQ standard properties\nsonar.sources=srtcore/,apps/,common/,examples/,haicrypt/,scripts/,testing/\nsonar.tests=test/\n\n# Properties specific to the C/C++ analyzer:\nsonar.cfamily.build-wrapper-output=_build/sonar-output\nsonar.cfamily.gcov.reportsPath=.\n"
        },
        {
          "name": "srt-ffplay",
          "type": "blob",
          "size": 0.017578125,
          "content": "scripts/srt-ffplay"
        },
        {
          "name": "srtcore",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "testing",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}