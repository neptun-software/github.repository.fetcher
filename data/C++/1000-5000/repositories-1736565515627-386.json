{
  "metadata": {
    "timestamp": 1736565515627,
    "page": 386,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "CtripMobile/DynamicAPK",
      "stars": 3027,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4658203125,
          "content": "#built application files\n*.apk\n*.ap_\n# files for the dex VM\n*.dex\n# Java class files\n*.class\n# generated files\nbin/\ngen/\n# Local configuration file (sdk path, etc)\nlocal.properties\n# Windows thumbnail db\nThumbs.db\n# OSX files\n.DS_Store\n# Eclipse project files\n.classpath\n.project\n# Android Studio\n*.iml\n.idea\n#.idea/workspace.xml - remove # and delete .idea if it better suit your needs.\n.gradle\nbuild/\nbuild-outputs\nout/\n/*/*/build\n/*/*/production\n*.iws\n*.ipr\n*~\n*.swp\n*.trace"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0546875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Ctrip Mobile\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.0654296875,
          "content": "\n## Introduction\n\nWhat is DynamicAPK?\n\nDynamicAPK is a solution that contains framework, tool and configuration to implement multi apk/dex dynamic loading. It can help reorganize Android project configuration and development model to achieve sub-projects parallel development (in the form of android studio module), while supporting hot fix (repairing online bug), on-demand loading seldom-used modules. All dynamically loaded modules not only contain code but also contain resources if you need.\n\nDynamicAPK is already uesed in Ctrip Android App (Simplified Chinese Version). Ctrip is  the biggest online travel agency in China, while 72 percent of orders are from App.\n\n## Benefits\n\n* Less transformation effort (no activity/fragment/resource proxy stuff)\n\t\n\tDynamicAPK doesn't need activity or fragment proxy to manage their life cycle. Modules' resources are processed by modified aapt, so resource reference in R.java is not different with normal Android project. Developers can maintain their original development paradigm.\t\n\t\n* Parallel development\n\n* Speed up compilation\n\n* Speed up app booting\n\n\tMultiDex solution offered by Google will execute dex decompression, dexopt, load operation in the main thread. That means a very long process, while users will see significant long black screen and more likely to encounter the ANR. By DynamicAPK, app loads only the necessary modules, other modules are loaded on demand. \n\t\n* Hot fix (code and resource)\n\n* On-demand module (code and resource) downloading and loading \n\n## Comparasion\n\n* [DynamicLoadApk](https://github.com/singwhatiwanna/dynamic-load-apk)\n\t\n\tHeavy develpment paradigm transformation: use \"that\" instead of \"this\", activity should inherit from their proxy avtivity (The proxy activity manage life cycle).\n\t\n\tRestrictions of starting activity within module apk.\n\t\n\tDoesn't support Service and BroadcastReceiver.\n\n* [AndroidDynamicLoader](https://github.com/mmin18/AndroidDynamicLoader)\n\n\tHeavy develpment paradigm transformation: \n\t\n\tChanges the usage of resources: `MyResources.getResource(Me.class)` instead of `context.getResources()`. \n\t\n\tUse Fragment as UI container, each page is implemented in Fragment instead of Activity. So you need use URL mapping to start new page.\n\n* [android-pluginmgr](https://github.com/houkx/android-pluginmgr)\n\t\n\tNot tested in released App.\n\t\n\tDoesn't support Service and BroadcastReceiver.\n\n* [DroidPlugin](https://github.com/Qihoo360/DroidPlugin) from Qihu360\n\t\n\tVery interesting framework! DroidPlugin can start totally independent app (not installed) in your app. The features are more suitable for Qihu360 security app because the bundle apk is totally irrelevant to host apk. \n\t\n\tDoesn't support custom nitification.  \n\n## Implementation\n\n[Android Build Process](http://7xns6i.com1.z0.glb.clouddn.com/ctrip-pluggable/android_build_process.png \"Android Build Process\")\n\nWe focus on aapt, javac, proguard and dex process. The key of dynamic loading is about two things:\n\n### Code compilation and loading\n\nJava compilation is nothing special, while class loading needs some hacking. Android's DexClassLoader has some restrictions, so we use Android's system PathClassLoader. PathClassLoader has a member pathList, as the name suggests it is essentially a List to  load classes from each dex path in the list at runtime. So we can add our dynamically loaded dex at the head of the list. In fact, Google's official MultiDex library is also implemented by the method. The following snippet shows the details:\n\nMultiDex.java\n\n```java\nprivate static void install(ClassLoader loader, List<File> additionalClassPathEntries,\n     File optimizedDirectory)\n             throws IllegalArgumentException, IllegalAccessException,\n             NoSuchFieldException, InvocationTargetException, NoSuchMethodException {\n    /* The patched class loader is expected to be a descendant of\n    * dalvik.system.BaseDexClassLoader. We modify its\n    * dalvik.system.DexPathList pathList field to append additional DEX\n    * file entries.\n    */\n    Field pathListField = findField(loader, \"pathList\");\n    Object dexPathList = pathListField.get(loader);\n    expandFieldArray(dexPathList, \"dexElements\", makeDexElements(dexPathList,\n         new ArrayList<File>(additionalClassPathEntries), optimizedDirectory));\n}\n```\n\nFor different versions of Android, class loading has a slightly different way. Reference [MultiDex Source] (https://android.googlesource.com/platform/frameworks/multidex/+/d79604bd38c101b54e41745f85ddc2e04d978af2/library/src/android/support/multidex/MultiDex.java).\n\n### Resource compilation and loading\n\nResource compilation is proceesed by Android tool: aapt, which is located in `<SDK> / build-tools / <buildToolsVersion> / aapt`, with many [command line parameter] (http: //7xns6i.com1.z0 .glb.clouddn.com / ctrip-pluggable / aapt.txt \"aapt Command Line Reference\"). Some of them deserve special attention:\n\n- `-I Add an existing package to base include set`\n\n\tThis parameter is to add an existing package in the dependency path. In Android, the compilation of resources also need rely on android.jar. \"android.jar\" is not an ordinary jar package, which contains the existing SDK library class, compiled resources  and resource index file (resources.arsc). Similarly, we can also use this parameter references an existing apk packages as dependencies resources to participate in the compilation. \n\n- `-G A file to output proguard options into.`\n\n\tIn resource compilation, component class and method references will result in runtime reflection invocation, so this kind of symbol can not be confused. -G parameter will derive classes and interfaces found in the resource compilation process that must be kept. It will participate to the confusion in the late stage as an additional configuration file.\n\n- `-J Specify where to output R.java resource constant definitions`\n\n\tIn Android, all resources will be generated as corresponding constant ID, the ID will be merged to R.java file. Resource ID in R.java is a four-byte int type. Actually it consists of three fields. The first byte represents the package, the second byte represents type, three and four bytes represent real ID. E.g:\n    \n\n\t```\n\t//android.jar resources, PackageID is 0x01\n\tpublic static final int cancel = 0x01040000;\n    \n\t// User app resources, PackageID is 0x7F\n\tpublic static final int zip_code = 0x7f090f2e;\n\t```\n\n\tWe modifed aapt to provide each module different PackageID, so there will be no conflict.\n\n- To add new aapt `--apk-module` parameter.\n\n\tAs previously mentioned, we specified for each module project unique PackageID field, so we can find where to find and load resources. In the resource loading section there will be more details.\n   \n- To add new aapt `--public-R-path` parameter.\n\n\tAndroid system resources can be referenced by its fully qualified name `android.R`  to refer specific source. If we use `base.package.name.R` for modules to refer public app common resources, that means we need modify every existed resource reference code. It's error-prone and less transparent in the future development. We add `--public-R-path` parameter to specify `base.R`'s location and make copy of common resource ID into modules' R.java.\n\t\n\nResource loading is processed by AssetManager and Resources class. We can access them in the Context.\n\nContext.java\n\n```java\n/** Return an AssetManager instance for your application's package. */\npublic abstract AssetManager getAssets();\n\n/** Return a Resources instance for your application's package. */\npublic abstract Resources getResources();\n```\n\nThey are two abstract methods, implementation is in ContextImpl class. After initialization of ContextImpl class objects, each subclass of Context such as Activity, Service and other components can access resources by these two methods.\n\nContextImpl.java\n\n```java\nprivate final Resources mResources;\n\n@Override\npublic AssetManager getAssets() {\n   return getResources().getAssets();\n}\n\n@Override\npublic Resources getResources() {\n   return mResources;\n}\n```\n\nSince we allocate PackageID (the first byte of resource ID) by aapt to know where to find resource's apk, we override these two methods to find specific resource.\n\nAnd there is a hidden method addAssetPath in AssetManager, so we can add a resource path to AssetManager.\n\n```\n/ **\n* Add an additional set of assets to the asset manager. This can be\n* Either a directory or ZIP file. Not for use by applications. Returns\n* The cookie of the added asset, or 0 on failure.\n* {hide}\n* /\npublic final int addAssetPath(String path) {\n   synchronized(this) {\n       int res = addAssetPathNative(path);\n       makeStringBlocks(mStringBlocks);\n       return res;\n   }\n}\n```\n\nWe just need to reflect this method, then add all apk's location to AssetManager. AssetManager will finish the resource loading by compiled resources.arsc resources within apk.\n\nTo achieve \"seamless\" experience, we need last step: using the Instrumentation to take over all creation of Activity , Service and other components. Activity, Service and other system components will be loaded in the main thread by android.app.ActivityThread. ActivityThread class has a member mInstrumentation, that is responsible for creating Activity and other operations. So it's the best candidate for loading our modified resource class. Every time the system creates Activity, we replace its mResources by our DelegateResources that will know how to load resources. Done!\n\n\n## Usage\n\n### aapt\n\n- Use parameter --apk-module to allocate packageID\n\t\n\tE.g: ex: aapt ...... --apk-module 0x58 （PackageID in ResourceID is 0x58）\n\t\n- Use parameter --public-R-path to merge R.java (RMerge.cpp)  \n\n\tThen the output R file contains the base apk R.java and the module apk R.java.\n\n### Build\n- $ git clone https://github.com/CtripMobile/DynamicAPK.git\n- $ cd DynamicAPK/\n- $ gradle assembleRelease bundleRelease repackAll\n- Release APK in /build-outputs/***-release-final.apk\n\n\n# Simplified Chinese Version\n\n\n## 介绍\n\nDynamicAPK是一套用于实现多dex/apk加载的解决方案。它可以帮助你重新组织Android工程的配置和开发模式，实现多个子工程并行开发（以android studio module的形式），同时支持hot fix（在线修复有问题的功能）, 插件式载入不常用的功能（下载插件后再载入）。所有动态加载的插件不仅包含代码，也可以包含资源（资源的动态加载比代码要麻烦很多），因此是以APK形式实现的。\n\nDynamicAPK已经在携程旅行Android App中使用，欢迎关注携程移动技术公众号：CtripMobile\n\n## 价值\n\n* 更少的迁移成本（无需做任何activity/fragment/resource的proxy实现）\n\t\n\tDynamicAPK不需要实现任何activity或fragment proxy来管理他们的生命周期。修改后的aapt会处理插件中的资源，因此R.java中的资源引用和普通Android工程没有区别。开发者可以保持原有的开发范式，无需做特殊的更改。\n\t\n* 并发开发\n\n* 提升编译速度\n\n* 提升启动速度\n\n\tGoogle提供的MultiDex方案，会在主线程中执行所有dex的解压、dexopt、加载操作，这是一个非常漫长的过程，用户会明显的看到长久的黑屏，更容易造成主线程的ANR，导致首次启动初始化失败。DynamicAPK可以在App启动时仅加载必须的模块，其他模块按需加载。\t\n\n* Hot fix (包含代码和资源)\n\n* 按需下载和加载任意功能模块(包含代码和资源)\n\n## 对比\n\n* [DynamicLoadApk](https://github.com/singwhatiwanna/dynamic-load-apk)\n\t\n\t迁移成本很重：需要使用『that』而不是『this』，所有activity都需要继承自proxy avtivity（proxy avtivity负责管理所有activity的生命周期）。\n\t\n\t无法启动apk内部的activity。\n\t\n\t不支持Service和BroadcastReceiver。\n\n* [AndroidDynamicLoader](https://github.com/mmin18/AndroidDynamicLoader)\n\n\t迁移成本很重：\n\t\n\t使用资源时要用`MyResources.getResource(Me.class)`而不是`context.getResources()`\n\t\n\t使用Fragment作为UI容器，所有每个页面都是使用Fragment而不是Activity，需要使用URL mapping才能实现页面跳转。\n\t\n* [android-pluginmgr](https://github.com/houkx/android-pluginmgr)\n\t\n\t未经过生产环境App测试。\n\t\n\t不支持Service和BroadcastReceiver。\n\n* [DroidPlugin](https://github.com/Qihoo360/DroidPlugin) from 奇虎360\n\t\n\t非常有趣的框架！DroidPlugin能够在一个App内启动一个没有安装的App。这个特性可能更适合360的安全产品，因为被启动的App和宿主App完全没有任何关联，相互间不能支持资源和代码调用。\n\t\n\t不支持自定义推送栏。\n\t\n## 实现细节\n\n更深入的分析文章详见 [InfoQ -《携程Android App插件化和动态加载实践》](http://www.infoq.com/cn/articles/ctrip-android-dynamic-loading)\n\n## 使用方法\n\n### aapt\n\n- 使用参数 --apk-module 来分配PackageID\n\t\n\tE.g: ex: aapt ...... --apk-module 0x58 （ResourceID的PackageID定义为0x58）\n\t\n- 使用个参数 --public-R-path 来合并R.java (实现文件在RMerge.cpp中)  \n\n\t生成的R.java文件会合并基础APK和模块APK中的R.java。\n\n### Build\n- $ git clone https://github.com/CtripMobile/DynamicAPK.git\n- $ cd DynamicAPK/\n- $ gradle assembleRelease bundleRelease repackAll\n- Release APK in /build-outputs/***-release-final.apk"
        },
        {
          "name": "aapt_linux",
          "type": "blob",
          "size": 6808.3828125,
          "content": ""
        },
        {
          "name": "aapt_mac",
          "type": "blob",
          "size": 1678.97265625,
          "content": null
        },
        {
          "name": "aapt_win.exe",
          "type": "blob",
          "size": 14459.216796875,
          "content": ""
        },
        {
          "name": "apk_module_config.xml",
          "type": "blob",
          "size": 0.19921875,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApkModules>\n\n    <Module  packageName=\"ctrip.android.demo1\" resourceId=\"0x31\"/>\n\n    <Module  packageName=\"ctrip.android.demo2\" resourceId=\"0x36\"/>\n\n\n\n</ApkModules>"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 1.6552734375,
          "content": "// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    repositories {\n        //jcenter()\n        maven { url \"http://mirrors.ibiblio.org/maven2\"}\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:1.3.1'\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\next{\n\n    //这是工程根目录\n    ctripRoot = project(\":\").projectDir\n\n    // local.properties 来自于AS自动创建\n    // 可以保存所有本地工程配置\n    // 不允许上传git库\n    Properties properties = new Properties()\n    properties.load(project.rootProject.file('local.properties').newDataInputStream())\n\n    // 从系统环境变量中或者local.properties配置文件中读取SDK位置\n    if(System.getenv(\"ANDROID_HOME\")!=null){\n        sdkDir = System.getenv(\"ANDROID_HOME\")\n    }\n    else{ // 在local.properties中定义\n        sdkDir = properties.getProperty('sdk.dir')\n    }\n\n    //Debug代码：开发人员可以手动改为false，这样工程就是标准Android工程，可供开发调试。\n    //改为true，请使用 gradle assembleRelease bundleRelease repackAll 命令打出多apk的release包。\n    solidMode = true\n    //可以在local.properties里修改这个值。添加一行 solidMode=false 即可。\n    solidModeConfigValue = properties.getProperty('solidMode')\n    if('true'.equalsIgnoreCase(solidModeConfigValue)){\n        solidMode = true\n    }\n    else if ('false'.equalsIgnoreCase(solidModeConfigValue)){\n        solidMode = false\n    }\n}\n\nallprojects {\n    repositories {\n        jcenter()\n    }\n}\n"
        },
        {
          "name": "bundle",
          "type": "tree",
          "content": null
        },
        {
          "name": "caapt",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo.jks",
          "type": "blob",
          "size": 2.15234375,
          "content": null
        },
        {
          "name": "demo1",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo2",
          "type": "tree",
          "content": null
        },
        {
          "name": "global_config.gradle",
          "type": "blob",
          "size": 1.6640625,
          "content": "//所有工程都要用的公共配置，由各个子模块直接apply from\r\n\r\n\r\nandroid {\r\n\tcompileSdkVersion 23\r\n    buildToolsVersion \"21.1.2\"\r\n\r\n    useLibrary 'org.apache.http.legacy'\r\n\r\n    defaultConfig {\r\n        minSdkVersion 14\r\n        targetSdkVersion 19\r\n    }\r\n\r\n    buildTypes {\r\n        debug {\r\n            debuggable true\r\n            minifyEnabled false\r\n        }\r\n        release {\r\n            minifyEnabled false\r\n        }\r\n    }\r\n\r\n    sourceSets {\r\n        main {\r\n            manifest.srcFile 'AndroidManifest.xml'\r\n            java.srcDirs = ['src']\r\n            res.srcDirs = ['res']\r\n            assets.srcDirs = ['assets']\r\n            jniLibs.srcDirs = ['libs']\r\n        }\r\n    }\r\n\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_7\r\n        targetCompatibility JavaVersion.VERSION_1_7\r\n    }\r\n\r\n    packagingOptions{\r\n        exclude 'META-INF/MANIFEST.MF'\r\n        exclude 'META-INF/NOTICE.TXT'\r\n        exclude 'META-INF/LICENSE.TXT'\r\n        exclude 'META-INF/LICENSE.TXT'\r\n        exclude 'META-INF/LICENSE.txt'\r\n    }\r\n\r\n\tdexOptions {\r\n\t\tjavaMaxHeapSize \"4g\"\r\n        preDexLibraries = false\r\n    }\r\n\r\n    // lint所有选项请单独加入\r\n    lintOptions {\r\n        checkReleaseBuilds true\r\n        abortOnError false\r\n        check 'NewApi'  //新API\r\n        showAll true\r\n        textReport true\r\n        textOutput file(\"${ctripRoot}/build-outputs/lint/${project.name}_lint-report.txt\")\r\n        xmlReport true\r\n        xmlOutput file(\"${ctripRoot}/build-outputs/lint/${project.name}_lint-report.xml\")\r\n        htmlReport true\r\n        htmlOutput file(\"${ctripRoot}/build-outputs/lint/${project.name}_lint-report.html\")\r\n    }\r\n}\r\n\r\n\r\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.80859375,
          "content": "## Project-wide Gradle settings.\n#\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n#\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\n# Default value: -Xmx10248m -XX:MaxPermSize=256m\n# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\n#\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true\n#Tue Nov 10 14:25:21 CST 2015\nsystemProp.http.proxyHost=mirrors.opencas.cn\nsystemProp.http.proxyPort=80\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.9609375,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# For Cygwin, ensure paths are in UNIX format before anything is touched.\nif $cygwin ; then\n    [ -n \"$JAVA_HOME\" ] && JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`\nfi\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >&-\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >&-\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.34765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windowz variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\ngoto execute\r\n\r\n:4NT_args\r\n@rem Get arguments from the 4NT Shell from JP Software\r\nset CMD_LINE_ARGS=%$\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.048828125,
          "content": "include  ':bundle', ':sample', ':demo1', ':demo2'\n"
        },
        {
          "name": "sub-project-build.gradle",
          "type": "blob",
          "size": 6.890625,
          "content": "\nbuildscript {\n    repositories {\n         mavenCentral()\n    }\n    dependencies {\n        classpath 'net.sf.proguard:proguard-gradle:5.2.1'\n    }\n}\n\nimport org.apache.tools.ant.taskdefs.condition.Os\nproject.ext {\n    BUILD_TOOLS_VERSION = '21.1.2'\n    TARGET_SDK_VERSION = 23\n\n    sdk = [:]\n    if(Os.isFamily(Os.FAMILY_WINDOWS)){\n        sdk.aapt = \"${rootDir}/aapt_win.exe\"\n        sdk.dex = \"$sdkDir/build-tools/$BUILD_TOOLS_VERSION/dx.bat\"\n    }\n    else if (Os.isFamily(Os.FAMILY_MAC)){\n        sdk.aapt = \"${rootDir}/aapt_mac\"\n        sdk.dex = \"$sdkDir/build-tools/$BUILD_TOOLS_VERSION/dx\"\n    }\n    else if (Os.isFamily(Os.FAMILY_UNIX)){\n        sdk.aapt = \"${rootDir}/aapt_linux\"\n        sdk.dex = \"$sdkDir/build-tools/$BUILD_TOOLS_VERSION/dx\"\n    }\n    sdk.androidJar = \"$sdkDir/platforms/android-$TARGET_SDK_VERSION/android.jar\"\n    if(TARGET_SDK_VERSION >= 23){\n        sdk.apacheJar = \"$sdkDir/platforms/android-23/optional/org.apache.http.legacy.jar\";\n    }\n}\n\n//初始化，确保必要目录都存在\ntask init << {\n    new File(rootDir, 'build-outputs').mkdirs()\n\n    buildDir.mkdirs()\n\n    new File(buildDir, 'gen/r').mkdirs()\n\n    new File(buildDir, 'intermediates').mkdirs()\n\n    new File(buildDir, 'intermediates/classes').mkdirs()\n\n    new File(buildDir, 'intermediates/classes-obfuscated').mkdirs()\n\n    new File(buildDir, 'intermediates/res').mkdirs()\n\n    new File(buildDir, 'intermediates/dex').mkdirs()\n\n\n}\n\n\n//清除build产出物\ntask clean (type:Delete) {\n    delete buildDir\n    delete \"${rootDir}/build-outputs/${apkName}-mapping.txt\"\n    delete \"${rootDir}/build-outputs/${apkName}.so\"\n}\n\ntask aaptRelease (type: Exec,dependsOn:'init'){\n\n\n    inputs.file \"$sdk.androidJar\"\n    inputs.file \"${rootDir}/build-outputs/demo-base-release.apk\"\n    inputs.file \"$projectDir/AndroidManifest.xml\"\n    inputs.dir \"$projectDir/res\"\n    inputs.dir \"$projectDir/assets\"\n    inputs.file \"${rootDir}/sample/build/generated/source/r/release/ctrip/android/sample/R.java\"\n\n    outputs.dir \"$buildDir/gen/r\"\n    outputs.file \"$buildDir/intermediates/res/resources.zip\"\n    outputs.file \"$buildDir/intermediates/res/aapt-rules.txt\"\n\n    workingDir buildDir\n    executable sdk.aapt\n\n    def resourceId=''\n    def parseApkXml=(new XmlParser()).parse(new File(rootDir,'apk_module_config.xml'))\n    parseApkXml.Module.each{ module->\n        if( module.@packageName==\"${packageName}\") {\n            resourceId=module.@resourceId\n            println \"find packageName: \" + module.@packageName + \" ,resourceId:\" + resourceId\n        }\n    }\n    def argv = []\n    argv << 'package'   //打包\n    argv << \"-v\"\n    argv << '-f' //强制覆盖已有文件\n    argv << \"-I\"\n    argv << \"$sdk.androidJar\"        //添加一个已有的固化jar包\n    argv << '-I'\n    argv << \"${rootDir}/build-outputs/demo-base-release.apk\"\n    argv << '-M'\n    argv << \"$projectDir/AndroidManifest.xml\"    //指定manifest文件\n    argv << '-S'\n    argv << \"$projectDir/res\"                    //res目录\n    argv << '-A'\n    argv << \"$projectDir/assets\"                 //assets目录\n    argv << '-m'        //make package directories under location specified by -J\n    argv << '-J'\n    argv << \"$buildDir/gen/r\"         //哪里输出R.java定义\n    argv << '-F'\n    argv << \"$buildDir/intermediates/res/resources.zip\"   //指定apk的输出位置\n    argv << '-G'        //-G  A file to output proguard options into.\n    argv << \"$buildDir/intermediates/res/aapt-rules.txt\"\n    // argv << '--debug-mode'      //manifest的application元素添加android:debuggable=\"true\"\n    argv << '--custom-package'      //指定R.java生成的package包名\n    argv << \"${packageName}\"\n    argv << '-0'    //指定哪些后缀名不会被压缩\n    argv << 'apk'\n    argv << '--public-R-path'\n    argv << \"${rootDir}/sample/build/generated/source/r/release/ctrip/android/sample/R.java\"\n    argv << '--apk-module'\n    argv << \"$resourceId\"\n\n    args = argv\n\n}\n\ntask compileRelease(type: JavaCompile,dependsOn:'aaptRelease') {\n    inputs.file \"$sdk.androidJar\"\n    inputs.files fileTree(\"${projectDir}/libs\").include('*.jar')\n    inputs.file \"${rootDir}/sample/build/intermediates/classes-proguard/release/classes.jar\"\n    inputs.files fileTree(\"$projectDir/src\").include('**/*.java')\n    inputs.files fileTree(\"$buildDir/gen/r\").include('**/*.java')\n\n    outputs.dir \"$buildDir/intermediates/classes\"\n    sourceCompatibility = '1.6'\n    targetCompatibility = '1.6'\n    classpath = files(\n            \"${sdk.androidJar}\",\n            \"${sdk.apacheJar}\",\n    \t    fileTree(\"${projectDir}/libs\").include('*.jar'),\n\n    \t\n    \t    \"${rootDir}/sample/build/intermediates/classes-proguard/release/classes.jar\"\n    \t)\n\n    destinationDir = file(\"$buildDir/intermediates/classes\")\n\n    dependencyCacheDir = file(\"${buildDir}/dependency-cache\")\n\n    source = files(fileTree(\"$projectDir/src\").include('**/*.java'),\n            fileTree(\"$buildDir/gen/r\").include('**/*.java'))\n    options.encoding = 'UTF-8'\n}\n\ntask obfuscateRelease(type:proguard.gradle.ProGuardTask, dependsOn:'compileRelease') {\n    inputs.file \"$rootDir/sub-project-proguard-rules.txt\"\n    inputs.file \"$buildDir/intermediates/res/aapt-rules.txt\"\n    inputs.dir \"$buildDir/intermediates/classes\"\n    inputs.files fileTree(\"${projectDir}/libs\").include('*.jar')\n    inputs.file \"${sdk.androidJar}\"\n    inputs.file \"${rootDir}/sample/build/intermediates/classes-proguard/release/classes.jar\"\n\n    outputs.file \"$buildDir/intermediates/classes-obfuscated/classes-obfuscated.jar\"\n    outputs.file \"${rootDir}/build-outputs/${apkName}-mapping.txt\"\n    configuration file(\"$rootDir/sub-project-proguard-rules.txt\")\n    configuration file (\"$buildDir/intermediates/res/aapt-rules.txt\")\n    injars file(\"$buildDir/intermediates/classes\")\n    injars fileTree(\"${projectDir}/libs\").include('*.jar')\n\n    outjars file(\"$buildDir/intermediates/classes-obfuscated/classes-obfuscated.jar\")\n    printmapping file(\"${rootDir}/build-outputs/${apkName}-mapping.txt\")\n\n    libraryjars file(\"${sdk.androidJar}\")\n    libraryjars file(\"${rootDir}/sample/build/intermediates/classes-proguard/release/classes.jar\")\n\n}\n\ntask dexRelease (type:Exec){\n    inputs.file \"${buildDir}/intermediates/classes\"\n    outputs.file \"${buildDir}/intermediates/dex/${project.name}_dex.zip\"\n    workingDir buildDir\n    executable sdk.dex\n\n    def argv = []\n    argv << '--dex'\n    argv << \"--output=${buildDir}/intermediates/dex/${project.name}_dex.zip\"\n    argv << \"${buildDir}/intermediates/classes\"\n\n    args = argv\n}\n\ntask bundleRelease (type:Zip,dependsOn:['compileRelease','aaptRelease','dexRelease']){\n    inputs.file \"$buildDir/intermediates/dex/${project.name}_dex.zip\"\n    inputs.file \"$buildDir/intermediates/res/resources.zip\"\n\n    outputs.file \"${rootDir}/build-outputs/${apkName}.so\"\n\n    archiveName = \"${apkName}.so\"\n    destinationDir = file(\"${rootDir}/build-outputs\")\n    duplicatesStrategy = 'fail'\n    from zipTree(\"$buildDir/intermediates/dex/${project.name}_dex.zip\")\n    from zipTree(\"$buildDir/intermediates/res/resources.zip\")\n}\n\n"
        },
        {
          "name": "sub-project-proguard-rules.txt",
          "type": "blob",
          "size": 4.5244140625,
          "content": "# Add project specific ProGuard rules here.\r\n# By default, the flags in this file are appended to flags specified\r\n# in D:/android-sdk-windows/tools/proguard/proguard-android.txt\r\n# You can edit the include path and order by changing the proguardFiles\r\n# directive in build.gradle.\r\n#\r\n# For more details, see\r\n#   http://developer.android.com/guide/developing/tools/proguard.html\r\n\r\n# Add any project specific keep options here:\r\n\r\n# If your project uses WebView with JS, uncomment the following\r\n# and specify the fully qualified class name to the JavaScript interface\r\n# class:\r\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\r\n#   public *;\r\n#}\r\n\r\n\r\n\r\n################################################\r\n# hockey configuration\r\n-keep public class javax.net.ssl.**\r\n-keepclassmembers public class javax.net.ssl.** {*;}\r\n\r\n-keep public class org.apache.http.**\r\n-keepclassmembers public class org.apache.http.** {*;}\r\n\r\n-keepclassmembers class net.hockeyapp.android.UpdateFragment {*;}\r\n-renamesourcefileattribute SourceFile\r\n-keepattributes SourceFile,LineNumberTable\r\n\r\n################################################\r\n# standard android proguard config, copied from android sdk\r\n\r\n# This is a configuration file for ProGuard.\r\n# http://proguard.sourceforge.net/index.html#manual/usage.html\r\n\r\n-dontusemixedcaseclassnames\r\n-dontskipnonpubliclibraryclasses\r\n-verbose\r\n\r\n# Optimization is turned off by default. Dex does not like code run\r\n# through the ProGuard optimize and preverify steps (and performs some\r\n# of these optimizations on its own).\r\n-dontoptimize\r\n-dontpreverify\r\n# Note that if you want to enable optimization, you cannot just\r\n# include optimization flags in your own project configuration file;\r\n# instead you will need to point to the\r\n# \"proguard-android-optimize.txt\" file instead of this one from your\r\n# project.properties file.\r\n\r\n-keepattributes *Annotation*\r\n-keep public class com.google.vending.licensing.ILicensingService\r\n-keep public class com.android.vending.licensing.ILicensingService\r\n\r\n# For native methods, see http://proguard.sourceforge.net/manual/examples.html#native\r\n-keepclasseswithmembernames class * {\r\n    native <methods>;\r\n}\r\n\r\n# keep setters in Views so that animations can still work.\r\n# see http://proguard.sourceforge.net/manual/examples.html#beans\r\n-keepclassmembers public class * extends android.view.View {\r\n   void set*(***);\r\n   *** get*();\r\n}\r\n\r\n# We want to keep methods in Activity that could be used in the XML attribute onClick\r\n-keepclassmembers class * extends android.app.Activity {\r\n   public void *(android.view.View);\r\n}\r\n\r\n# For enumeration classes, see http://proguard.sourceforge.net/manual/examples.html#enumerations\r\n-keepclassmembers enum * {\r\n    public static **[] values();\r\n    public static ** valueOf(java.lang.String);\r\n}\r\n\r\n-keep class * implements android.os.Parcelable {\r\n  public static final android.os.Parcelable$Creator *;\r\n}\r\n\r\n-keepclassmembers class **.R$* {\r\n    public static <fields>;\r\n}\r\n\r\n# The support library contains references to newer platform versions.\r\n# Don't warn about those in case this app is linking against an older\r\n# platform version.  We know about them, and they are safe.\r\n-dontwarn android.support.**\r\n\r\n\r\n################################################\r\n# javascript callback\r\n-keepclassmembers class * {\r\n    @android.webkit.JavascriptInterface <methods>;\r\n}\r\n-keepattributes JavascriptInterface\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n-ignorewarnings\r\n\r\n# Note that if you want to enable optimization, you cannot just\r\n# include optimization flags in your own project configuration file;\r\n# instead you will need to point to the\r\n# \"proguard-android-optimize.txt\" file instead of this one from your\r\n# project.properties file.\r\n\r\n-keepattributes Signature\r\n\r\n\r\n\r\n\r\n# The support library contains references to newer platform versions.\r\n# Don't warn about those in case this app is linking against an older\r\n# platform version.  We know about them, and they are safe.\r\n\r\n\r\n-dontwarn **CompatHoneycomb\r\n-dontwarn **CompatHoneycombMR2\r\n-dontwarn **CompatCreatorHoneycombMR2\r\n\r\n\r\n\r\n\r\n-keep public class android.net.http.**\r\n{\r\n\t*;\r\n}\r\n-keep public class android.webkit.**\r\n{\r\n\t*;\r\n}\r\n-keep public class com.weibo.net.**\r\n{\r\n\t*;\r\n}\r\n\r\n\r\n\r\n-keep public class android.webkit.WebViewClient\r\n\r\n-dontwarn android.content.**\r\n\r\n-dontwarn android.webkit.WebView\r\n-dontwarn android.webkit.WebViewClient\r\n\r\n#-keepattributes type\r\n#-keepattributes length\r\n#-keepattributes index\r\n#-keepattributes require\r\n-keepattributes SerializeField\r\n\r\n\r\n-keep public class * extends android.app.Application\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
        }
      ]
    }
  ]
}