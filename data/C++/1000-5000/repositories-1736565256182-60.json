{
  "metadata": {
    "timestamp": 1736565256182,
    "page": 60,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "plaidml/plaidml",
      "stars": 4582,
      "defaultBranch": "plaidml-v1",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.0791015625,
          "content": "---\nLanguage:        Cpp\n# BasedOnStyle:  Google\nAccessModifierOffset: -1\nAlignAfterOpenBracket: true\nAlignConsecutiveAssignments: false\nAlignEscapedNewlinesLeft: true\nAlignOperands:   true\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: All\nAllowShortIfStatementsOnASingleLine: true\nAllowShortLoopsOnASingleLine: true\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: true\nBinPackArguments: true\nBinPackParameters: true\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Attach\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nColumnLimit:     120\nCommentPragmas:  '^ IWYU pragma:'\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nForEachMacros:   [ foreach, Q_FOREACH, BOOST_FOREACH ]\nIndentCaseLabels: true\nIndentWidth:     2\nIndentWrappedFunctionNames: false\nKeepEmptyLinesAtTheStartOfBlocks: false\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: true\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 200\nPointerAlignment: Left\nSpaceAfterCStyleCast: false\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 2\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Cpp11\nTabWidth:        8\nUseTab:          Never\n---\nLanguage: Proto\nBasedOnStyle: Google\n---\nLanguage: JavaScript\nBasedOnStyle: WebKit\n---\nLanguage: ObjC\nBasedOnStyle: Google\n...\n\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.560546875,
          "content": "root=true\n\n[*]\nindent_style=space\nindent_size=4\ntab_width=4\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.cc]\nindent_size=2\ntab_width=8\n\n[*.h]\nindent_size=2\ntab_width=8\n\n[*.yml]\nindent_size=2\n\n[*.yaml]\nindent_size=2\n\n[Makefile]\nindent_style=tab\n\n[*.groovy]\nindent_size=2\n\n[*.html]\nindent_size=2\n\n[*.proto]\nindent_size=2\n\n[*.pbtxt]\nindent_size=2\n\n[*.cl]\nindent_size=2\n\n[*.rst]\nindent_size=3\nindent_style=space\n\n[*.md]\nindent_size=2\n\n[*.j2]\nindent_size=2\n\n[*.td]\nindent_size=2\n\n[*.mlir]\nindent_size=2\n\n[CMakeLists.txt]\nindent_size=2\n\n[*.cmake]\nindent_size=2\n"
        },
        {
          "name": ".exclude",
          "type": "blob",
          "size": 0.1083984375,
          "content": "/.cenv\n/.git\n/.tools\n/.vs\n/.vscode\n/build-*\n/docs/_build\n/docs/venv\n/tmp\n*.pyc\n/**/x64/Debug/\n/**/x64/Release/\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.6103515625,
          "content": "# Python\ndist/\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Sphinx documentation\ndocs/_build/\n# Sphinx autoapi generated module summaries\ndocs/plaidml/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# dotenv\n.env\n\n# virtualenv\n.venv\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n\n# macos\n.DS_Store\n*~\n\n# Visual Studio Code\n.vscode\n\n/tmp\n/.cenv\n\n# Source code tagging tools\ntags\n\n# CMake stuff\nbuild-*/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1015625,
          "content": "[submodule \"vendor/mlir-hlo\"]\n\tpath = vendor/mlir-hlo\n\turl = https://github.com/tensorflow/mlir-hlo.git\n"
        },
        {
          "name": ".mergify.yml",
          "type": "blob",
          "size": 0.658203125,
          "content": "pull_request_rules:\n  - name: automatic squash (master)\n    conditions:\n      - \"#approved-reviews-by>=1\"\n      - \"#changes-requested-reviews-by=0\"\n      - status-success=buildkite/plaidml-plaidml/pr\n      - base=master\n    actions:\n      merge:\n        method: squash\n        strict: smart\n\n  - name: automatic squash (plaidml-v1)\n    conditions:\n      - \"#approved-reviews-by>=1\"\n      - \"#changes-requested-reviews-by=0\"\n      - status-success=buildkite/plaidml-plaidml/pr\n      - base=plaidml-v1\n    actions:\n      merge:\n        method: squash\n        strict: smart\n\n  - name: delete head branch after merge\n    conditions: []\n    actions:\n      delete_head_branch: {}\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.494140625,
          "content": "exclude: >\n  (?x)^(\n    ci/pipeline.yml|\n    plaidbench/plaidbench/networks/keras/imdb_lstm.h5|\n    pmlc/target/x86/heatmap_skx_xeonplat_8180_1-7GHz_mblocked.csv.gz|\n    networks/openvino/mobilenet-v2/FP16/mobilenet-v2.bin|\n    networks/openvino/resnet-50-pytorch/FP16/resnet-50-pytorch.bin|\n    networks/openvino/yolo-v2-tiny-ava-0001/FP16/yolo-v2-tiny-ava-0001.bin|\n    vendor/half/half.hpp\n  )$\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v1.4.0\n    hooks:\n      - id: check-added-large-files\n      - id: check-case-conflict\n      - id: check-json\n      - id: check-merge-conflict\n      - id: check-symlinks\n      - id: check-xml\n      - id: check-yaml\n  - repo: local\n    hooks:\n      - id: buildifier\n        name: buildifier\n        entry: buildifier\n        language: system\n        files: (^BUILD|\\.BUILD|\\.bzl|^WORKSPACE)$\n      - id: clang-format\n        name: clang-format\n        entry: clang-format\n        language: system\n        files: \\.(c|cc|cxx|cpp|h|hpp|hxx|js|proto)$\n        args: [\"-i\"]\n      - id: cpplint\n        name: cpplint\n        entry: cpplint\n        language: system\n        files: \\.(c|cc|cxx|cpp|h|hpp|hxx)$\n        args:\n          - --filter=-legal/copyright,-readability/todo,-build/c++11\n          - --linelength=120\n      - id: nbstripout\n        name: nbstripout\n        entry: nbstripout\n        language: python\n        files: '\\.ipynb$'\n      - id: yapf\n        name: yapf\n        entry: yapf\n        language: system\n        files: \\.py$\n        args: [-i]\n"
        },
        {
          "name": ".style.yapf",
          "type": "blob",
          "size": 0.078125,
          "content": "[style]\nbased_on_style = google\ncolumn_limit = 99\nindent_dictionary_value = yes\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 4.4609375,
          "content": "cmake_minimum_required(VERSION 3.13.4 FATAL_ERROR)\n\nif(POLICY CMP0068)\n  cmake_policy(SET CMP0068 NEW)\n  set(CMAKE_BUILD_WITH_INSTALL_NAME_DIR ON)\nendif()\n\nif(POLICY CMP0075)\n  cmake_policy(SET CMP0075 NEW)\nendif()\n\nif(POLICY CMP0077)\n  cmake_policy(SET CMP0077 NEW)\n  set(CMAKE_POLICY_DEFAULT_CMP0077 NEW)\nendif()\n\ninclude(FetchContent)\n\nproject(PlaidML LANGUAGES C CXX)\nset(CMAKE_C_STANDARD 11)\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\nset(PML_IDE_FOLDER PML)\nset(PLAIDML_VERSION 1.0.0)\nset(MAIN_BRANCH plaidml-v1)\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\nif(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Windows\")\n  # Support for ninja on windows\n  enable_language(ASM)\n  add_compile_definitions(\n    _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS\n    NOMINMAX\n    WIN32_LEAN_AND_MEAN\n  )\nendif()\n\n# -------------------------------------------------------------------------------\n# Project component configuration\n# -------------------------------------------------------------------------------\noption(PML_BUILD_TESTS \"Builds PML unit tests\" ON)\noption(PML_ENABLE_DEVKIT \"Enable the devkit\" ON)\noption(PML_INCLUDE_LLVM \"Fetch and include the llvm-project\" ON)\noption(PML_OPENVINO_BRIDGE \"Enable the OpenVINO plugin\" OFF)\noption(PML_ENABLE_ASSERTIONS \"Enable assertions\" ON)\n\nif(CMAKE_BUILD_TYPE STREQUAL \"Release\")\n  option(PML_ENABLE_ASSERTIONS \"Enable assertions\" OFF)\nelse()\n  option(PML_ENABLE_ASSERTIONS \"Enable assertions\" ON)\nendif()\n\n# Enable assertion LLVM style.\nif(PML_ENABLE_ASSERTIONS)\n  # MSVC doesn't like _DEBUG on release builds.\n  if(NOT MSVC)\n    add_definitions(-D_DEBUG)\n  endif()\n  # On Release builds cmake automatically defines NDEBUG, so we\n  # explicitly undefine it:\n  if(CMAKE_BUILD_TYPE STREQUAL \"Release\")\n    add_definitions( -UNDEBUG )\n  endif()\nelse()\n  if(NOT CMAKE_BUILD_TYPE STREQUAL \"Release\")\n    add_definitions( -DNDEBUG )\n  endif()\nendif()\n\nlist(APPEND CMAKE_MODULE_PATH\n  ${CMAKE_CURRENT_LIST_DIR}/cmake\n  ${CMAKE_CURRENT_LIST_DIR}/cmake/third_party\n)\n\n# -------------------------------------------------------------------------------\n# Third party dependencies\n# -------------------------------------------------------------------------------\nif(PML_INCLUDE_LLVM)\n  include(llvm-project)\nendif()\ninclude(boost)\ninclude(easylogging)\nif(NOT InferenceEngineDeveloperPackage_FOUND)\n  include(gflags)\nendif()\ninclude(googletest)\ninclude(pybind11)\ninclude(mlperf)\ninclude(xsmm)\n\nadd_subdirectory(vendor)\n\n# -------------------------------------------------------------------------------\n# Enable testing\n# -------------------------------------------------------------------------------\nif(PML_BUILD_TESTS)\n  enable_testing()\nendif()\n\n# -------------------------------------------------------------------------------\n# cmake modules\n# -------------------------------------------------------------------------------\ninclude(pml_format)\ninclude(pml_copts)\ninclude(pml_macros)\ninclude(pml_cc_binary)\ninclude(pml_cc_library)\ninclude(pml_cc_test)\ninclude(pml_lit_test)\ninclude(pml_python)\ninclude(pml_tblgen_library)\ninclude(pml_whole_archive_link)\n\nget_directory_property(IS_SUBPROJECT PARENT_DIRECTORY)\n\n# Set general cpack variables for package description\nset(CPACK_GENERATOR \"TGZ\")\nset(CPACK_ARCHIVE_COMPONENT_INSTALL 1)\nset(CPACK_PACKAGE_NAME \"PlaidML\")\nset(CPACK_PACKAGE_VENDOR \"Intel Corp\")\nset(CPACK_PACKAGE_CONTACT \"Intel\")\nset(CPACK_PACKAGE_VERSION ${PLAIDML_VERSION})\nset(CPACK_COMPONENTS_IGNORE_GROUPS 1)\nset(CPACK_COMPONENTS_ALL\n  devkit\n  testkit\n)\ninclude(CPack)\n\n\nadd_subdirectory(plaidbench)\nadd_subdirectory(plaidml)\nadd_subdirectory(pmlc)\nadd_subdirectory(docs)\nadd_subdirectory(networks)\nadd_subdirectory(mlperf)\n\n# Note: this must be called after all libraries have been declared.\npml_complete_binary_link_options()\n\nconfigure_lit_site_cfg(\n  ${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.py.in\n  ${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg.py\n  MAIN_CONFIG\n  ${CMAKE_CURRENT_SOURCE_DIR}/lit.cfg.py\n)\n\nif(PML_ENABLE_DEVKIT)\n  include(devkit)\nendif()\n\nif(PML_BUILD_TESTS)\n  get_property(_CHECKS GLOBAL PROPERTY GLOBAL_CHECKS)\n  foreach(_CHECK ${_CHECKS})\n    get_property(_CHECK_DEPS GLOBAL PROPERTY GLOBAL_CHECK_DEPS_${_CHECK})\n    add_custom_target(check-${_CHECK}\n      COMMAND ${CMAKE_CTEST_COMMAND} -L ${_CHECK} --output-on-failure\n      USES_TERMINAL\n      DEPENDS ${_CHECK_DEPS}\n    )\n  endforeach()\nendif()\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.0419921875,
          "content": "<div align=center><a href=\"https://www.intel.ai/plaidml\"><img\nsrc=\"docs/assets/images/plaid-final.png\" height=\"200\"></a><br>\n\n*A platform for making deep learning work everywhere.*\n\n</div>\n\n[![License]](https://github.com/plaidml/plaidml/blob/master/LICENSE)\n[![Build status](https://badge.buildkite.com/87cb87799399a2e27c6f99b1839a66e9101b6f132b46d36089.svg)](https://buildkite.com/intel/tpp-plaidml)\n\n# To Our Users\n\nFirst off, we’d like to thank you for choosing PlaidML. Whether you’re a new\nuser or a multi-year veteran, we greatly appreciate you for the time you’ve\nspent tinkering around with our source code, sending us feedback, and improving\nour codebase. PlaidML would truly not be the same without you.\n\nThe feedback we have received from our users indicates an ever-increasing need\nfor performance, programmability, and portability.  During the past few months,\nwe have been restructuring PlaidML to address those needs. Below is a summary of\nthe biggest changes: \n* We’ve adopted [MLIR], an extensible compiler infrastructure that has gained\n  industry-wide adoption since its release in early 2019. MLIR makes it easier\n  to integrate new software and hardware into our compiler stack, as well as\n  making it easier to write optimizations for our compiler.\n* We’ve worked extensively on [Stripe], our low-level intermediate\n  representation within PlaidML. Stripe contains optimizations that greatly\n  improve the performance of our compiler. While our work on Stripe began before\n  we decided to use MLIR, we are in the process of fully integrating Stripe into\n  MLIR.\n* We created our C++/Python embedded domain-specific language ([EDSL])\n  to improve the programmability of PlaidML.\n\nToday, we’re announcing a new branch of PlaidML — `plaidml-v1`. This will act as\nour development branch going forward and will allow us to more rapidly prototype\nthe changes we’re making without breaking our existing user base. As a\nprecaution, please note that certain features, tests, and hardware targets may\nbe broken in `plaidml-v1` as is a research project. Right now `plaidml-v1`\nonly supports Intel and AMD CPUs with AVX2 and AVX512 support.\n\nYou can continue to use code on the `master` branch or from our releases on\nPyPI. For your convenience, the contents of our `master` branch will be released\nas version 0.7.0. There is no further development in this branch. `plaidml-v1` is \na research project.\n\n-----\n\nPlaidML is an advanced and portable tensor compiler for enabling deep learning\non laptops, embedded devices, or other devices where the available computing\nhardware is not well supported or the available software stack contains\nunpalatable license restrictions.\n\nPlaidML sits underneath common machine learning frameworks, enabling users to\naccess any hardware supported by PlaidML. PlaidML supports [Keras], [ONNX], and\n[nGraph].\n\nAs a component within the [nGraph Compiler stack], PlaidML further extends the\ncapabilities of specialized deep-learning hardware (especially GPUs,) and makes\nit both easier and faster to access or make use of subgraph-level optimizations\nthat would otherwise be bounded by the compute limitations of the device.\n\nAs a component under [Keras], PlaidML can accelerate training workloads with\ncustomized or automatically-generated Tile code. It works especially well on\nGPUs, and it doesn't require use of CUDA/cuDNN on Nvidia hardware, while\nachieving comparable performance.\n\nPlaidML works on all major operating systems: Linux, macOS, and Windows.\n\n\n## Building PlaidML from source \n\nDue to use of conda PlaidML runs on all major Linux distributions.\n\n```\nexport PLAIDML_WORKSPACE_DIR=[choose a directory of your choice]\n\n# setting up miniconda env\ncd ${PLAIDML_WORKSPACE_DIR}\nwget https://repo.anaconda.com/miniconda/Miniconda3-py37_4.12.0-Linux-x86_64.sh\nbash Miniconda3-py37_4.12.0-Linux-x86_64.sh -p ${PLAIDML_WORKSPACE_DIR}/miniconda3\neval \"$(${PLAIDML_WORKSPACE_DIR}/miniconda3/bin/conda shell.bash hook)\"\nconda activate\n\n# clone plaidml-v1 and set up env\ngit clone https://github.com/plaidml/plaidml.git --recursive -b plaidml-v1\ncd plaidml\nconda env create -f environment.yml -p .cenv/\nconda activate .cenv/\n\n# we might need to go into .cenv/bin and create a sym-link \ncd .cenv/bin/\nln -s ninja ninja-build\ncd ../../\n\n# preparing PlaidML build\n./configure\n\n# buidling PlaidML\ncd build-x86_64/Release\nninja && PYTHONPATH=$PWD python plaidml/plaidml_setup.py\n```\n\n## Demos and Related Projects\n\n### Plaidbench\n\n[Plaidbench] is a performance testing suite designed to help users compare the\nperformance of different cards and different frameworks.\n\n```\ncd build-x86_64/Release\nninja plaidbench_py && PYTHONPATH=$PWD KMP_AFFINITY=granularity=fine,verbose,compact,1,0 OMP_NUM_THREADS=8 python plaidbench/plaidbench.py -n128 keras resnet50\n```\n\nThe command above is suited for 8-core Intel/AMD CPUs with hyper-threading enabled. E.g. on an Intel i9-11900K we expect around 8.5ms latency. \n\n\n## Reporting Issues\n\nEither open a ticket on [GitHub].\n\n## CI & Validation\n\n### Validated Hardware\n\nA comprehensive set of tests for each release are run against the hardware\ntargets listed below.\n\n* AMD CPUs with AVX2 and AVX512\n* Intel CPUs with AVX2 and AVX512\n\n### Validated Networks\n\nWe support all of the Keras application networks from\ncurrent versions of 2.x. Validated networks are tested for performance and\ncorrectness as part of our continuous integration system.\n\n* CNNs\n  * Inception v3\n  * ResNet50\n  * VGG19\n  * VGG16\n  * Xception\n  * DenseNet\n\n[LIBXSMM]: https://github.com/libxsmm/libxsmm/ \n[nGraph Compiler stack]: https://ngraph.nervanasys.com/docs/latest/\n[Keras]: https://keras.io/\n[GitHub]: https://github.com/plaidml/plaidml/issues\n[ONNX]: https://github.com/onnx\n[nGraph]: https://github.com/NervanaSystems/ngraph\n[License]: https://img.shields.io/badge/License-Apache%202.0-blue.svg\n[Build status]: https://badge.buildkite.com/5c9add6b89a14fd498e69a5035062368480e688c4c74cbfab3.svg?branch=master\n[Plaidbench]: https://github.com/plaidml/plaidml/tree/plaidml-v1/plaidbench\n[EDSL]: https://plaidml.github.io/plaidml/docs/edsl\n[MLIR]: https://mlir.llvm.org/\n[Stripe]: https://arxiv.org/abs/1903.06498\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.005859375,
          "content": "1.0.0\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure",
          "type": "blob",
          "size": 11.421875,
          "content": "#!/usr/bin/env python3\n\nimport subprocess\nimport platform\nimport argparse\nimport pathlib\nimport shutil\nimport sys\nimport os\n\n\ndef printf(*args, **kwargs):\n    excludes_env = {key: kwargs[key] for key in kwargs if key not in [\"env\"]}\n    if excludes_env:\n        print(*args, excludes_env)\n    else:\n        print(*args)\n    sys.stdout.flush()\n\n\ndef run(cmd, **kwargs):\n    printf(cmd, **kwargs)\n    subprocess.run(cmd, **kwargs)\n\n\nclass Configure:\n\n    def __init__(self, args):\n        install = (\"https://docs.conda.io/projects/conda/en/latest/user-guide/install\")\n        conda = shutil.which(\"mamba\")\n        if not conda:\n            conda = shutil.which(\"conda\")\n            if not conda:\n                print(\"Please install conda.\")\n                print(f\"See: {install}\")\n                sys.exit(1)\n        self.args = args\n        self.conda = pathlib.Path(conda)\n        self.this_dir = pathlib.Path(__file__).absolute().parent\n        # cenv_dir must be resolved since comparison with CONDA_PREFIX\n        # determines if configuration is reinvoked\n        self.cenv_dir = ((args.build_prefix if args.build_prefix else self.this_dir) /\n                         \".cenv\").resolve()\n        self.build_dir = (args.build_prefix / f\"build-{args.target}\" / args.type).resolve()\n        print(\"conda found at: {}\".format(self.conda))\n        if args.ci:\n            self.configure_cmake()\n        else:\n            if not self.is_activated():\n                self.configure_conda()\n                self.activate_conda()\n            else:\n                printf(\"Skipping environment update since \"\n                       \"Conda is already activated\")\n                if not args.skip_precommit:\n                    self.configure_precommit()\n                self.configure_cmake()\n            print()\n            print(\"Your build is configured.\")\n            print()\n            print(\"1) Activate Conda environment (if not already enabled):\")\n            print(f\"   $ conda activate {self.cenv_dir}\")\n            print(\"   $ # consider to restore original $CC and $CXX\")\n            print(f'   $ export CXX=\"{os.getenv(\"CXX\")}\"')\n            print(f'   $ export CC=\"{os.getenv(\"CC\")}\"')\n            print()\n            print(\"2) Build PlaidML and Plaidbench:\")\n            print(f\"   $ cd {self.build_dir}\")\n            print(\"   $ ninja && ninja plaidbench_py\")\n            print()\n            print(\"3) Setup a device:\")\n            print(f\"   $ ninja -C {self.build_dir} setup\")\n            print(\"   Non-interactive:\")\n            print(\"   $ export PLAIDML_DEVICE_IDS=llvm_cpu.0\")\n            print(\"   $ export PLAIDML_EXPERIMENTAL=1\")\n            print()\n            print(\"4) Run unit tests (check build):\")\n            print(f\"   $ cd {self.build_dir}\")\n            print(\"   $ ninja check-smoke\")\n            print()\n            print(\"5) Benchmark (keras: resnet50, vgg16, vgg19, xception):\")\n            print(f\"   $ cd {self.build_dir}\")\n            print(\"   $ export OMP_PROC_BIND=TRUE OMP_NUM_THREADS=8\")\n            print(f\"   $ LD_PRELOAD={self.cenv_dir}/lib/libtcmalloc.so \\\\\")\n            print(\"     PYTHONPATH=${PWD} \\\\\")\n            print(\"     python3 plaidbench/plaidbench.py -n128 keras resnet50\")\n            print()\n            print()\n            print(\"Install packages (another environment):\")\n            print(\"   $ # consider pip-flags --no-deps --force-reinstall\")\n            print(f\"   $ python3 -m pip install {self.build_dir}/*.whl\")\n            print()\n\n    def is_activated(self):\n        return os.getenv(\"CONDA_PREFIX\") == str(self.cenv_dir)\n\n    def activate_conda(self):\n        printf(\"Activating conda environment\")\n        env = os.environ.copy()\n        env[\"SKIP_BOOTSTRAP\"] = \"1\"\n        cmd = [\n            self.conda,\n            \"run\",\n            \"--no-capture-output\",\n            \"-p\",\n            self.cenv_dir,\n            \"python3\",\n        ] + sys.argv\n        run(cmd, check=True, env=env)\n\n    def configure_conda(self):\n        if self.args.env:\n            env_file = pathlib.Path(self.args.env)\n            if not env_file.exists():\n                env_file = self.this_dir / self.args.env\n                if not env_file.exists():\n                    env_file = self.this_dir / f\"{self.args.env}.yml\"\n        else:\n            env_file = None\n        if not env_file or not env_file.exists():\n            if platform.system() == \"Windows\":\n                env_file = self.this_dir / \"environment-windows.yml\"\n            else:\n                env_file = self.this_dir / \"environment.yml\"\n        if self.cenv_dir.exists():\n            if not self.args.skip_conda_update:\n                print(\"Updating conda environment from: {}\".format(env_file))\n                cmd = [\n                    str(self.conda),\n                    \"env\",\n                    \"update\",\n                    \"-f\",\n                    str(env_file),\n                    \"-p\",\n                    str(self.cenv_dir),\n                    \"--prune\",\n                ]\n                run(cmd, check=True, stdout=subprocess.DEVNULL)\n        elif not self.args.skip_conda_env:\n            print(\"Creating conda environment from: {}\".format(env_file))\n            cmd = [\n                str(self.conda),\n                \"env\",\n                \"create\",\n                \"-f\",\n                str(env_file),\n                \"-p\",\n                str(self.cenv_dir),\n            ]\n            run(cmd, check=True, stdout=subprocess.DEVNULL)\n\n    def configure_precommit(self):\n        if platform.system() == \"Windows\":\n            search_path = self.cenv_dir / \"Scripts\"\n        else:\n            search_path = self.cenv_dir / \"bin\"\n        print()\n        print(\"Searching for pre-commit in: {}\".format(search_path))\n        pre_commit = shutil.which(\"pre-commit\", path=str(search_path))\n        if not pre_commit:\n            print(\"pre-commit could not be found.\")\n            print(\"Is your conda environment created and up to date?\")\n            sys.exit(1)\n        run([pre_commit, \"install\"], check=True)\n\n    def configure_compiler(self):\n        cmake_compiler_flags = []\n        cxx = (os.getenv(\"CXX\") if self.args.cxx is None else self.args.cxx).split(\" \", 1)\n        cc = (os.getenv(\"CC\") if self.args.cc is None else self.args.cc).split(\" \", 1)\n        if cc:\n            cmake_compiler_flags.append(f\"-DCMAKE_C_COMPILER={cc[0]}\")\n            if \"clang\" in os.path.basename(cc[0]):\n                if 2 == len(cc):\n                    toolchain = cc[1].split(\"=\", 1)\n                    if \"--gcc-toolchain\" == toolchain[0] and 2 == len(toolchain):\n                        envar = \"CMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN\"\n                        cmake_compiler_flags.append(f\"-D{envar}={toolchain[1]}\")\n        if cxx:\n            cmake_compiler_flags.append(f\"-DCMAKE_CXX_COMPILER={cxx[0]}\")\n            # support newer GCC/compilers with potentially fewer implicit header dependencies (-include)\n            cmake_compiler_flags.append(\n                \"-DCMAKE_CXX_FLAGS=-D__STDC_FORMAT_MACROS -include cstdint\")\n            if \"clang++\" in os.path.basename(cxx[0]):\n                # cmake_compiler_flags.append(\"-DCMAKE_CXX_FLAGS=-w\")\n                if 2 == len(cxx):\n                    toolchain = cxx[1].split(\"=\", 1)\n                    if \"--gcc-toolchain\" == toolchain[0] and 2 == len(toolchain):\n                        envar = \"CMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN\"\n                        cmake_compiler_flags.append(f\"-D{envar}={toolchain[1]}\")\n        if self.args.cxx_std and 0 < self.args.cxx_std:\n            cmake_compiler_flags.append(f\"-DCMAKE_CXX_STANDARD={self.args.cxx_std}\")\n        if self.args.ld:\n            cmake_compiler_flags.append(f\"-DLLVM_USE_LINKER={self.args.ld}\")\n        return cmake_compiler_flags\n\n    def configure_cmake(self):\n        targets = \"AArch64;X86;AMDGPU;NVPTX\"\n        cmd = [\n            \"cmake\",\n            \"-S.\",\n            f\"-B{self.build_dir}\",\n            \"-GNinja\",\n            \"-Wno-dev\",\n            f\"-DCMAKE_BUILD_TYPE={self.args.type}\",\n            \"-DCMAKE_CXX_FLAGS=-D__STDC_FORMAT_MACROS\",\n            \"-DCMAKE_BUILD_WITH_INSTALL_RPATH=ON\",\n            f\"-DLLVM_TARGETS_TO_BUILD={targets}\",\n            f\"-DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD={targets}\",\n            \"-DPML_OPENVINO_BRIDGE=OFF\",\n            \"-DFETCHCONTENT_QUIET=OFF\",\n        ]\n        if self.args.temp_dir:\n            fc_dir = self.args.temp_dir / f\"fc-{self.args.target}\"\n            cmd.append(f\"-DFETCHCONTENT_BASE_DIR={fc_dir}\")\n        if self.args.local_llvm:\n            cmd.append(f\"-DLOCAL_LLVM_DIR={self.args.local_llvm}\")\n        else:\n            cmd.append(\"-ULOCAL_LLVM_DIR\")\n        if self.args.launcher:\n            cmd.append(f\"-DCMAKE_CXX_COMPILER_LAUNCHER={self.args.launcher}\")\n            cmd.append(f\"-DCMAKE_C_COMPILER_LAUNCHER={self.args.launcher}\")\n        cmd.extend(self.configure_compiler())\n        run(cmd, check=True)\n\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"Configuring PlaidML build environment\")\n    parser.add_argument(\"--ci\", action=\"store_true\", help=\"Enable CI mode\")\n    parser.add_argument(\n        \"--skip_conda_update\",\n        action=\"store_true\",\n        help=\"Skip updating the conda environment.\",\n    )\n    parser.add_argument(\n        \"--skip_conda_env\",\n        action=\"store_true\",\n        help=\"Skip the conda environment creation step.\",\n    )\n    parser.add_argument(\n        \"--skip_precommit\",\n        action=\"store_true\",\n        help=\"Skip the precommit configuration step.\",\n    )\n    parser.add_argument(\n        \"--local_llvm\",\n        type=pathlib.Path,\n        help=\"Avoid fetching LLVM source (LOCAL_LLVML_DIR).\",\n    )\n    parser.add_argument(\n        \"--type\",\n        default=\"Release\",\n        choices=[\"Debug\", \"Release\", \"RelWithDebInfo\"],\n        help=\"Configures CMAKE_BUILD_TYPE\",\n    )\n    parser.add_argument(\n        \"--target\",\n        default=\"x86_64\",\n        choices=[\"aarch64\", \"x86_64\"],\n        help=\"Set the target architecture.\",\n    )\n    parser.add_argument(\n        \"--build-prefix\",\n        type=pathlib.Path,\n        default=\".\",\n        help=\"Turn build directory into an absolute path.\",\n    )\n    parser.add_argument(\n        \"--temp-dir\",\n        type=pathlib.Path,\n        help=\"Temporary directory for cached assets.\",\n    )\n    parser.add_argument(\n        \"--launcher\",\n        type=str,\n        default=shutil.which(\"ccache\"),\n        help=\"Path/command of a compiler launcher.\",\n    )\n    parser.add_argument(\"--env\", type=str, help=\"YAML environment file (.yml).\")\n    parser.add_argument(\"--cc\", type=str, help=\"Path/command of the C compiler.\")\n    parser.add_argument(\"--cxx\", type=str, help=\"Path/command of the C++ compiler.\")\n    parser.add_argument(\n        \"--cxx-std\",\n        type=int,\n        help=\"C++ standard, e.g., 20 for C++20 or 0 for none.\",\n    )\n    parser.add_argument(\"--ld\", type=str, help=\"Path/command of the linker, e.g., mold.\")\n    args = parser.parse_args()\n\n    print(parser.description)\n    print(args)\n\n    Configure(args)\n\n\nif __name__ == \"__main__\":\n    try:\n        main()\n    except subprocess.CalledProcessError:\n        print()\n        print(\"Configuration failed. Suggested checks:\")\n        print(\"* Try minimize the prerequisites and requirements,\")\n        print(\"  e.g., run the following configuration:\")\n        print('  ./configure --skip_precommit --launcher=\"\" \\\\')\n        print(\"              --env=environment-minimal-restrictive.yml\")\n        print(\"* Ensure your repository is fully checked out:\")\n        print(\"  git submodule update --init --recursive\")\n        print()\n    except KeyboardInterrupt:\n        pass\n"
        },
        {
          "name": "demos",
          "type": "tree",
          "content": null
        },
        {
          "name": "devkit",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "environment-minimal-restrictive.yml",
          "type": "blob",
          "size": 0.6083984375,
          "content": "channels:\n  - conda-forge\ndependencies:\n  - ccache\n  - cffi\n  - clang-format\n  - click\n  - cmake\n  - cython\n  - doxygen\n  - git\n  - gperftools\n  - h5py\n  - keras-applications\n  - matplotlib\n  - ninja\n  - numpy=1.21.6\n  - pip\n  - pre_commit\n  - protobuf\n  - python>=3.7,<3.8 # fixed\n  - pyyaml\n  - tensorflow>=1.15,<1.16 # fixed\n  - theano\n  - yapf\n  - pip:\n    - asq\n    - breathe\n    - cpplint\n    - keras==2.2.4 # fixed\n    - livereload\n    - nbstripout\n    - opencv-python-headless\n    - pcpp==1.20.1 # fixed\n    - pystache\n    - sphinx-rtd-theme\n    - sphinx-tabs\n    - sphinxcontrib-katex\n    - sphinxcontrib-napoleon\n"
        },
        {
          "name": "environment.yml",
          "type": "blob",
          "size": 0.65625,
          "content": "channels:\n  - conda-forge\ndependencies:\n  - ccache\n  - cffi=1.15.1\n  - clang-format\n  - click=8.1.3\n  - cmake\n  - cython=0.29.32\n  - doxygen\n  - git\n  - gperftools\n  - keras-applications=1.0.8\n  - matplotlib=3.5.3\n  - ninja\n  - numpy=1.21.6\n  - pip\n  - pre_commit\n  - protobuf=4.21.5\n  - python>=3.7,<3.8\n  - pyyaml=6.0\n  - tensorflow=1.14.0\n  - theano=1.0.5\n  - yapf=0.32.0\n  - pip:\n    - asq==1.3\n    - breathe==4.34.0\n    - cpplint==1.6.1\n    - keras==2.2.4\n    - livereload==2.6.3\n    - nbstripout==0.6.0\n    - pcpp==1.20.1\n    - pystache==0.6.0\n    - sphinx-rtd-theme==1.0.0\n    - sphinx-tabs==3.4.0\n    - sphinxcontrib-katex==0.9.0\n    - sphinxcontrib-napoleon==0.7\n"
        },
        {
          "name": "lit.cfg.py",
          "type": "blob",
          "size": 2.087890625,
          "content": "# -*- Python -*-\n\nimport os\nimport platform\nimport re\nimport subprocess\nimport tempfile\n\nimport lit.formats\nimport lit.util\n\nfrom lit.llvm import llvm_config\nfrom lit.llvm.subst import ToolSubst\nfrom lit.llvm.subst import FindTool\n\n# Configuration file for the 'lit' test runner.\n\n# name: The name of this test suite.\nconfig.name = 'PML'\n\nconfig.test_format = lit.formats.ShTest(not llvm_config.use_lit_shell)\n\n# suffixes: A list of file extensions to treat as test files.\nconfig.suffixes = ['.mlir']\n\n# test_source_root: The root path where tests are located.\nconfig.test_source_root = os.path.dirname(__file__)\n\n# test_exec_root: The root path where tests should be run.\nconfig.test_exec_root = os.path.join(config.pml_obj_root, 'test')\n\nconfig.substitutions.append(('%PATH%', config.environment['PATH']))\nconfig.substitutions.append(('%shlibext', config.llvm_shlib_ext))\n\nllvm_config.with_system_environment(['HOME', 'INCLUDE', 'LIB', 'TMP', 'TEMP'])\n\n# excludes: A list of directories to exclude from the testsuite. The 'Inputs'\n# subdirectories contain auxiliary inputs for various tests in their parent\n# directories.\nconfig.excludes = [\n    'Inputs', 'CMakeLists.txt', 'README.txt', 'LICENSE.txt', 'lit.cfg.py', 'lit.site.cfg.py'\n]\n\n# Tweak the PATH to include the tools dir.\nllvm_config.with_environment('PATH', config.llvm_tools_dir, append_path=True)\n\ntool_dirs = [\n    config.pml_bin_dir,\n    config.llvm_tools_dir,\n]\ntools = [\n    'pmlc-jit',\n    'pmlc-opt',\n    ToolSubst('cc_test', FindTool('plaidml_edsl_tests_cc_test')),\n]\n\nllvm_config.add_tool_substitutions(tools, tool_dirs)\n\n# FileCheck -enable-var-scope is enabled by default in MLIR test\n# This option avoids to accidentally reuse variable across -LABEL match,\n# it can be explicitly opted-in by prefixing the variable name with $\nconfig.environment['FILECHECK_OPTS'] = \"-enable-var-scope\"\n\n# LLVM can be configured with an empty default triple\n# by passing ` -DLLVM_DEFAULT_TARGET_TRIPLE=\"\" `.\n# This is how LLVM filters tests that require the host target\n# to be available for JIT tests.\nif config.target_triple:\n    config.available_features.add('default_triple')\n"
        },
        {
          "name": "lit.site.cfg.py.in",
          "type": "blob",
          "size": 1.841796875,
          "content": "@LIT_SITE_CFG_IN_HEADER@\n\nimport sys\n\nconfig.host_triple = \"@LLVM_HOST_TRIPLE@\"\nconfig.target_triple = \"@TARGET_TRIPLE@\"\nconfig.llvm_src_root = \"@LLVM_SOURCE_DIR@\"\nconfig.llvm_obj_root = \"@LLVM_BINARY_DIR@\"\nconfig.llvm_tools_dir = \"@LLVM_BINARY_DIR@/bin\"\nconfig.llvm_lib_dir = \"@LLVM_LIBRARY_DIR@\"\nconfig.llvm_shlib_dir = \"@SHLIBDIR@\"\nconfig.llvm_shlib_ext = \"@SHLIBEXT@\"\nconfig.llvm_exe_ext = \"@EXEEXT@\"\nconfig.lit_tools_dir = \"@LLVM_LIT_TOOLS_DIR@\"\nconfig.python_executable = \"@PYTHON_EXECUTABLE@\"\nconfig.gold_executable = \"@GOLD_EXECUTABLE@\"\nconfig.ld64_executable = \"@LD64_EXECUTABLE@\"\nconfig.enable_shared = @ENABLE_SHARED@\nconfig.enable_assertions = @ENABLE_ASSERTIONS@\nconfig.targets_to_build = \"@TARGETS_TO_BUILD@\"\nconfig.native_target = \"@LLVM_NATIVE_ARCH@\"\nconfig.llvm_bindings = \"@LLVM_BINDINGS@\".split(' ')\nconfig.host_os = \"@HOST_OS@\"\nconfig.host_cc = \"@HOST_CC@\"\nconfig.host_cxx = \"@HOST_CXX@\"\n# Note: ldflags can contain double-quoted paths, so must use single quotes here.\nconfig.host_ldflags = '@HOST_LDFLAGS@'\nconfig.llvm_use_sanitizer = \"@LLVM_USE_SANITIZER@\"\nconfig.llvm_host_triple = '@LLVM_HOST_TRIPLE@'\nconfig.host_arch = \"@HOST_ARCH@\"\nconfig.pml_src_root = \"@CMAKE_SOURCE_DIR@\"\nconfig.pml_obj_root = \"@CMAKE_BINARY_DIR@\"\nconfig.pml_bin_dir = \"@CMAKE_BINARY_DIR@/bin\"\n\n# Support substitution of the tools_dir with user parameters. This is\n# used when we can't determine the tool dir at configuration time.\ntry:\n    config.llvm_tools_dir = config.llvm_tools_dir % lit_config.params\n    config.llvm_shlib_dir = config.llvm_shlib_dir % lit_config.params\nexcept KeyError:\n    e = sys.exc_info()[1]\n    key, = e.args\n    lit_config.fatal(\"unable to find %r parameter, use '--param=%s=VALUE'\" % (key,key))\n\n\nimport lit.llvm\nlit.llvm.initialize(lit_config, config)\n\n# Let the main config do the real work.\nlit_config.load_config(config, \"@CMAKE_SOURCE_DIR@/lit.cfg.py\")\n"
        },
        {
          "name": "mlperf",
          "type": "tree",
          "content": null
        },
        {
          "name": "networks",
          "type": "tree",
          "content": null
        },
        {
          "name": "plaidbench",
          "type": "tree",
          "content": null
        },
        {
          "name": "plaidml",
          "type": "tree",
          "content": null
        },
        {
          "name": "pmlc",
          "type": "tree",
          "content": null
        },
        {
          "name": "remote",
          "type": "blob",
          "size": 1.2109375,
          "content": "#!/usr/bin/env python3\n\nimport argparse\nimport os\nimport pathlib\nimport subprocess\n\n\ndef main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('host')\n    args, remainder = parser.parse_known_args()\n\n    # 1. compute target directory based on CWD\n    cwd = pathlib.Path(os.getcwd())\n    home = pathlib.Path('~').expanduser()\n    tgt_dir = cwd.relative_to(home)\n    base_dir = tgt_dir.parent\n    if base_dir:\n        subprocess.check_call(['ssh', '-q', args.host, 'mkdir -p {}'.format(base_dir.as_posix())])\n\n    # 2. upload CWD to remote using rsync\n    exclude_from = cwd / '.exclude'\n    spec = '{}:{}'.format(args.host, tgt_dir.as_posix())\n    subprocess.check_call([\n        'rsync',\n        '-av',\n        '-F',\n        '--delete',\n        '--exclude-from',\n        str(exclude_from),\n        '.',\n        spec,\n    ])\n\n    # 3. run remote command from remote CWD\n    # if '--' in remainder:\n    #     remainder.remove('--')\n    remote_cmd = ' '.join(remainder)\n    bash_cmd = \"'cd {}; {}'\".format(tgt_dir.as_posix(), remote_cmd)\n    subprocess.check_call(['ssh', '-q', '-t', args.host, \"bash -l -c {}\".format(bash_cmd)])\n\n\nif __name__ == '__main__':\n    try:\n        main()\n    except KeyboardInterrupt:\n        pass\n"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}