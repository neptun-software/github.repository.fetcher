{
  "metadata": {
    "timestamp": 1736565888981,
    "page": 850,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "koide3/hdl_graph_slam",
      "stars": 2047,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 3.205078125,
          "content": "---\nLanguage:        Cpp\n# BasedOnStyle:  Google\nAccessModifierOffset: -2\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlines: Left\nAlignOperands:   true\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: Empty\nAllowShortIfStatementsOnASingleLine: true\nAllowShortLoopsOnASingleLine: true\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: true\nBinPackArguments: true\nBinPackParameters: false\nBraceWrapping:   \n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   false\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  AfterExternBlock: false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Attach\nBreakBeforeInheritanceComma: false\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: BeforeColon\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: false\nColumnLimit:     256\nCommentPragmas:  '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: true\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nForEachMacros:   \n  - foreach\n  - Q_FOREACH\n  - BOOST_FOREACH\nIncludeBlocks:   Preserve\nIncludeCategories: \n  - Regex:           '^<ext/.*\\.h>'\n    Priority:        2\n  - Regex:           '^<.*\\.h>'\n    Priority:        1\n  - Regex:           '^<.*'\n    Priority:        2\n  - Regex:           '.*'\n    Priority:        3\nIncludeIsMainRegex: '([-_](test|unittest))?$'\nIndentCaseLabels: true\nIndentPPDirectives: None\nIndentWidth:     2\nIndentWrappedFunctionNames: false\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: false\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: false\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyExcessCharacter: 0\nPenaltyReturnTypeOnItsOwnLine: 200\nPointerAlignment: Left\nRawStringFormats: \n  - Delimiter:       pb\n    Language:        TextProto\n    BasedOnStyle:    google\nReflowComments:  true\nSortIncludes:    false\nSortUsingDeclarations: false\nSpaceAfterCStyleCast: false\nSpaceAfterTemplateKeyword: false\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: Never\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 2\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Auto\nTabWidth:        8\nUseTab:          Never\n...\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0263671875,
          "content": ".vscode/*\nimgui.ini\nrviz/*\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 4.287109375,
          "content": "# SPDX-License-Identifier: BSD-2-Clause\ncmake_minimum_required(VERSION 2.8.3)\nproject(hdl_graph_slam)\n\n# Can we use C++17 in indigo?\nif(CMAKE_SYSTEM_PROCESSOR MATCHES \"aarch64\")\n  add_definitions(-std=c++11)\n  set(CMAKE_CXX_FLAGS \"-std=c++11\")\nelse()\n  add_definitions(-std=c++14 -msse -msse2 -msse3 -msse4 -msse4.1 -msse4.2)\n  set(CMAKE_CXX_FLAGS \"-std=c++14 -msse -msse2 -msse3 -msse4 -msse4.1 -msse4.2\")\nendif()\n\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${CMAKE_CURRENT_LIST_DIR}/cmake\")\n\n# pcl 1.7 causes a segfault when it is built with debug mode\nset(CMAKE_BUILD_TYPE \"RELEASE\")\n\nfind_package(catkin REQUIRED COMPONENTS\n  fast_gicp\n  geodesy\n  geometry_msgs\n  interactive_markers\n  message_generation\n  ndt_omp\n  nmea_msgs\n  pcl_ros\n  roscpp\n  rospy\n  sensor_msgs\n  std_msgs\n  tf_conversions\n)\ncatkin_python_setup()\n\nfind_package(PCL REQUIRED)\ninclude_directories(${PCL_INCLUDE_DIRS})\nlink_directories(${PCL_LIBRARY_DIRS})\nadd_definitions(${PCL_DEFINITIONS})\n\nmessage(STATUS \"PCL_INCLUDE_DIRS:\" ${PCL_INCLUDE_DIRS})\nmessage(STATUS \"PCL_LIBRARY_DIRS:\" ${PCL_LIBRARY_DIRS})\nmessage(STATUS \"PCL_DEFINITIONS:\" ${PCL_DEFINITIONS})\n\nfind_package(G2O REQUIRED)\ninclude_directories(SYSTEM ${G2O_INCLUDE_DIR} ${G2O_INCLUDE_DIRS})\nlink_directories(${G2O_LIBRARY_DIRS})\n# link_libraries(${G2O_LIBRARIES})\n\nfind_package(OpenMP)\nif (OPENMP_FOUND)\n    set (CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}\")\n    set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}\")\nendif()\n\nfind_library(VGICP_CUDA_FOUND NAMES fast_vgicp_cuda)\nmessage(STATUS \"VGICP_CUDA_FOUND:\" ${VGICP_CUDA_FOUND})\nif(VGICP_CUDA_FOUND)\n  add_definitions(-DUSE_VGICP_CUDA)\nendif()\n\n########################\n## message generation ##\n########################\nadd_message_files(FILES\n  FloorCoeffs.msg\n  ScanMatchingStatus.msg\n)\n\nadd_service_files(FILES\n  SaveMap.srv\n  LoadGraph.srv\n  DumpGraph.srv\n)\n\ngenerate_messages(DEPENDENCIES std_msgs geometry_msgs)\n\n###################################\n## catkin specific configuration ##\n###################################\ncatkin_package(\n  INCLUDE_DIRS include\n  LIBRARIES hdl_graph_slam_nodelet\n  CATKIN_DEPENDS\n    geometry_msgs\n    message_runtime\n    nmea_msgs\n    roscpp\n    sensor_msgs\n    std_msgs\n    tf_conversions\n#  DEPENDS system_lib\n)\n\n###########\n## Build ##\n###########\ninclude_directories(include)\ninclude_directories(\n  ${PCL_INCLUDE_DIRS}\n  ${catkin_INCLUDE_DIRS}\n)\n\n# nodelets\nadd_library(prefiltering_nodelet apps/prefiltering_nodelet.cpp)\ntarget_link_libraries(prefiltering_nodelet\n  ${catkin_LIBRARIES}\n  ${PCL_LIBRARIES}\n)\n\n\nadd_library(floor_detection_nodelet apps/floor_detection_nodelet.cpp)\ntarget_link_libraries(floor_detection_nodelet\n  ${catkin_LIBRARIES}\n  ${PCL_LIBRARIES}\n)\nadd_dependencies(floor_detection_nodelet ${PROJECT_NAME}_gencpp)\n\n\nadd_library(scan_matching_odometry_nodelet\n  apps/scan_matching_odometry_nodelet.cpp\n  src/hdl_graph_slam/registrations.cpp\n)\ntarget_link_libraries(scan_matching_odometry_nodelet\n  ${catkin_LIBRARIES}\n  ${PCL_LIBRARIES}\n)\nadd_dependencies(scan_matching_odometry_nodelet ${PROJECT_NAME}_gencpp)\n\n\nadd_library(hdl_graph_slam_nodelet\n  apps/hdl_graph_slam_nodelet.cpp\n  src/hdl_graph_slam/graph_slam.cpp\n  src/hdl_graph_slam/keyframe.cpp\n  src/hdl_graph_slam/map_cloud_generator.cpp\n  src/hdl_graph_slam/registrations.cpp\n  src/hdl_graph_slam/information_matrix_calculator.cpp\n  src/g2o/robust_kernel_io.cpp\n)\ntarget_link_libraries(hdl_graph_slam_nodelet\n  ${catkin_LIBRARIES}\n  ${PCL_LIBRARIES}\n  ${G2O_TYPES_DATA}\n  ${G2O_CORE_LIBRARY}\n  ${G2O_STUFF_LIBRARY}\n  ${G2O_SOLVER_PCG}\n  ${G2O_SOLVER_CSPARSE}   # be aware of that CSPARSE is released under LGPL\n  ${G2O_SOLVER_CHOLMOD}   # be aware of that cholmod is released under GPL\n  ${G2O_TYPES_SLAM3D}\n  ${G2O_TYPES_SLAM3D_ADDONS}\n)\nadd_dependencies(hdl_graph_slam_nodelet ${PROJECT_NAME}_gencpp)\n\ncatkin_install_python(\n  PROGRAMS\n    src/${PROJECT_NAME}/bag_player.py\n    src/${PROJECT_NAME}/ford2bag.py\n    src/${PROJECT_NAME}/map2odom_publisher.py\n  DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}\n)\n\ninstall(FILES nodelet_plugins.xml\n  DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}\n)\n\ninstall(TARGETS\n  prefiltering_nodelet\n  floor_detection_nodelet\n  scan_matching_odometry_nodelet\n  hdl_graph_slam_nodelet\n  LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION})\n\ninstall(DIRECTORY include/\n   DESTINATION ${CATKIN_GLOBAL_INCLUDE_DESTINATION}\n)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.2861328125,
          "content": "BSD 2-Clause License\n\nCopyright (c) 2019, k.koide\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.6630859375,
          "content": "# New SLAM package is released\n\nA new 3D SLAM package is released: https://github.com/koide3/glim.\n\n# hdl_graph_slam\n***hdl_graph_slam*** is an open source ROS package for real-time 6DOF SLAM using a 3D LIDAR. It is based on 3D Graph SLAM with NDT scan matching-based odometry estimation and loop detection. It also supports several graph constraints, such as GPS, IMU acceleration (gravity vector), IMU orientation (magnetic sensor), and floor plane (detected in a point cloud). We have tested this package with Velodyne (HDL32e, VLP16) and RoboSense (16 channels) sensors in indoor and outdoor environments.\n\n<img src=\"imgs/hdl_graph_slam.png\" width=\"712pix\" />\n\n[![Build](https://github.com/koide3/hdl_graph_slam/actions/workflows/build.yml/badge.svg)](https://github.com/koide3/hdl_graph_slam/actions/workflows/build.yml) on melodic & noetic\n\n## Third-party extensions\n\nSee also the following nice works built upon hdl_graph_slam. Feel free to request to include your work in the list :)\n\n- Multi-Robot Mapping (ROS2) developed by [Andreas Serov](https://github.com/aserbremen) : [aserbremen/Multi-Robot-Graph-SLAM](https://github.com/aserbremen/Multi-Robot-Graph-SLAM)\n- [CURB-SG: Collaborative Dynamic 3D Scene Graphs](http://curb.cs.uni-freiburg.de/) developed by Elias Greve : [robot-learning-freiburg/CURB-SG](https://github.com/robot-learning-freiburg/CURB-SG)\n\n## Nodelets\n***hdl_graph_slam*** consists of four nodelets.\n\n- *prefiltering_nodelet*\n- *scan_matching_odometry_nodelet*\n- *floor_detection_nodelet*\n- *hdl_graph_slam_nodelet*\n\nThe input point cloud is first downsampled by *prefiltering_nodelet*, and then passed to the next nodelets. While *scan_matching_odometry_nodelet* estimates the sensor pose by iteratively applying a scan matching between consecutive frames (i.e., odometry estimation), *floor_detection_nodelet* detects floor planes by RANSAC. The estimated odometry and the detected floor planes are sent to *hdl_graph_slam*. To compensate the accumulated error of the scan matching, it performs loop detection and optimizes a pose graph which takes various constraints into account.\n\n<img src=\"imgs/nodelets.png\" width=\"712pix\" />\n\n## Constraints (Edges)\n\nYou can enable/disable each constraint by changing params in the launch file, and you can also change the weight (\\*_stddev) and the robust kernel (\\*_robust_kernel) of each constraint.\n\n- ***Odometry***\n\n- ***Loop closure***\n\n- ***GPS***\n  - */gps/geopoint* (geographic_msgs/GeoPointStamped)\n  - */gps/navsat* (sensor_msgs/NavSatFix)\n  - */gpsimu_driver/nmea_sentence* (nmea_msgs/Sentence)\n\nhdl_graph_slam supports several GPS message types. All the supported types contain (latitude, longitude, and altitude). hdl_graph_slam converts them into [the UTM coordinate](http://wiki.ros.org/geodesy), and adds them into the graph as 3D position constraints. If altitude is set to NaN, the GPS data is treated as a 2D constrait. GeoPoint is the most basic one, which consists of only (lat, lon, alt). Although NavSatFix provides many information, we use only (lat, lon, alt) and ignore all other data. If you're using HDL32e, you can directly connect *hdl_graph_slam* with *velodyne_driver* via */gpsimu_driver/nmea_sentence*.\n\n- ***IMU acceleration (gravity vector)***\n  - */gpsimu_driver/imu_data* (sensor_msgs/Imu)\n\nThis constraint rotates each pose node so that the acceleration vector associated with the node becomes vertical (as the gravity vector). This is useful to compensate for accumulated tilt rotation errors of the scan matching. Since we ignore acceleration by sensor motion, you should not give a big weight for this constraint.\n\n- ***IMU orientation (magnetic sensor)***\n  - */gpsimu_driver/imu_data* (sensor_msgs/Imu)\n\n  If your IMU has a reliable magnetic orientation sensor, you can add orientation data to the graph as 3D rotation constraints. Note that, magnetic orientation sensors can be affected by external magnetic disturbances. In such cases, this constraint should be disabled.\n\n- ***Floor plane***\n  - */floor_detection/floor_coeffs* (hdl_graph_slam/FloorCoeffs)\n\nThis constraint optimizes the graph so that the floor planes (detected by RANSAC) of the pose nodes becomes the same. This is designed to compensate the accumulated rotation error of the scan matching in large flat indoor environments.\n\n\n## Parameters\nAll the configurable parameters are listed in *launch/hdl_graph_slam.launch* as ros params.\n\n## Services\n- */hdl_graph_slam/dump*  (hdl_graph_slam/DumpGraph)\n  - save all the internal data (point clouds, floor coeffs, odoms, and pose graph) to a directory.\n- */hdl_graph_slam/save_map*  (hdl_graph_slam/SaveMap)\n  - save the generated map as a PCD file.\n\n## Requirements\n***hdl_graph_slam*** requires the following libraries:\n\n- OpenMP\n- PCL\n- g2o\n- suitesparse\n\nThe following ROS packages are required:\n\n- geodesy\n- nmea_msgs\n- pcl_ros\n- [ndt_omp](https://github.com/koide3/ndt_omp)\n- [fast_gicp](https://github.com/SMRT-AIST/fast_gicp)\n\n```bash\n# for melodic\nsudo apt-get install ros-melodic-geodesy ros-melodic-pcl-ros ros-melodic-nmea-msgs ros-melodic-libg2o\ncd catkin_ws/src\ngit clone https://github.com/koide3/ndt_omp.git -b melodic\ngit clone https://github.com/SMRT-AIST/fast_gicp.git --recursive\ngit clone https://github.com/koide3/hdl_graph_slam\n\ncd .. && catkin_make -DCMAKE_BUILD_TYPE=Release\n\n# for noetic\nsudo apt-get install ros-noetic-geodesy ros-noetic-pcl-ros ros-noetic-nmea-msgs ros-noetic-libg2o\n\ncd catkin_ws/src\ngit clone https://github.com/koide3/ndt_omp.git\ngit clone https://github.com/SMRT-AIST/fast_gicp.git --recursive\ngit clone https://github.com/koide3/hdl_graph_slam\n\ncd .. && catkin_make -DCMAKE_BUILD_TYPE=Release\n```\n\n**[optional]** *bag_player.py* script requires ProgressBar2.\n```bash\nsudo pip install ProgressBar2\n```\n\n## Example1 (Indoor)\n\nBag file (recorded in a small room):\n\n- [hdl_501.bag.tar.gz](http://www.aisl.cs.tut.ac.jp/databases/hdl_graph_slam/hdl_501.bag.tar.gz) (raw data, 344MB)\n- [hdl_501_filtered.bag.tar.gz](http://www.aisl.cs.tut.ac.jp/databases/hdl_graph_slam/hdl_501_filtered.bag.tar.gz) (downsampled data, 57MB, **Recommended!**)\n- [Mirror link](https://zenodo.org/record/6960371)\n\n```bash\nrosparam set use_sim_time true\nroslaunch hdl_graph_slam hdl_graph_slam_501.launch\n```\n\n```bash\nroscd hdl_graph_slam/rviz\nrviz -d hdl_graph_slam.rviz\n```\n\n```bash\nrosbag play --clock hdl_501_filtered.bag\n```\n\nWe also provide bag_player.py which automatically adjusts the playback speed and processes data as fast as possible.\n\n```bash\nrosrun hdl_graph_slam bag_player.py hdl_501_filtered.bag\n```\n\nYou'll see a point cloud like:\n\n<img src=\"imgs/top.png\" height=\"256pix\" /> <img src=\"imgs/birds.png\" height=\"256pix\" />\n\nYou can save the generated map by:\n```bash\nrosservice call /hdl_graph_slam/save_map \"resolution: 0.05\ndestination: '/full_path_directory/map.pcd'\"\n```\n\n## Example2 (Outdoor)\n\nBag file (recorded in an outdoor environment):\n- [hdl_400.bag.tar.gz](http://www.aisl.cs.tut.ac.jp/databases/hdl_graph_slam/hdl_400.bag.tar.gz) (raw data, about 900MB)\n- [Mirror link](https://zenodo.org/record/6960371)\n\n```bash\nrosparam set use_sim_time true\nroslaunch hdl_graph_slam hdl_graph_slam_400.launch\n```\n\n```bash\nroscd hdl_graph_slam/rviz\nrviz -d hdl_graph_slam.rviz\n```\n\n```bash\nrosbag play --clock hdl_400.bag\n```\n\n<img src=\"imgs/hdl_400_points.png\" height=\"256pix\" /> <img src=\"imgs/hdl_400_graph.png\" height=\"256pix\" />\n\n## Example with GPS\nFord Campus Vision and Lidar Data Set [\\[URL\\]](http://robots.engin.umich.edu/SoftwareData/Ford)\n\nThe following script converts the Ford Lidar Dataset to a rosbag and plays it. In this example, ***hdl_graph_slam*** utilizes the GPS data to correct the pose graph.\n\n```bash\ncd IJRR-Dataset-2\nrosrun hdl_graph_slam ford2bag.py dataset-2.bag\nrosrun hdl_graph_slam bag_player.py dataset-2.bag\n```\n\n<img src=\"imgs/ford1.png\" height=\"200pix\"/> <img src=\"imgs/ford2.png\" height=\"200pix\"/> <img src=\"imgs/ford3.png\" height=\"200pix\"/>\n\n## Use hdl_graph_slam in your system\n\n1. Define the transformation between your sensors (LIDAR, IMU, GPS) and base_link of your system using static_transform_publisher (see line #11, hdl_graph_slam.launch). All the sensor data will be transformed into the common base_link frame, and then fed to the SLAM algorithm.\n\n2. Remap the point cloud topic of ***prefiltering_nodelet***. Like:\n\n```bash\n  <node pkg=\"nodelet\" type=\"nodelet\" name=\"prefiltering_nodelet\" ...\n    <remap from=\"/velodyne_points\" to=\"/rslidar_points\"/>\n  ...\n```\n\n## Common Problems\n\n### Parameter tuning guide\n\nThe mapping quality largely depends on the parameter setting. In particular, scan matching parameters have a big impact on the result. Tune the parameters accoding to the following instructions:\n\n- ***registration_method***\n  **[updated] In short, use FAST_GICP for most cases and FAST_VGICP or NDT_OMP if the processing speed matters** This parameter allows to change the registration method to be used for odometry estimation and loop detection. Note that GICP in PCL1.7 (ROS kinetic) or earlier has a bug in the initial guess handling. **If you are on ROS kinectic or earlier, do not use GICP**.\n\n- ***ndt_resolution***\n  This parameter decides the voxel size of NDT. Typically larger values are good for outdoor environements (0.5 - 2.0 [m] for indoor, 2.0 - 10.0 [m] for outdoor). If you chose NDT or NDT_OMP, tweak this parameter so you can obtain a good odometry estimation result.\n\n- ***other parameters***\n  All the configurable parameters are available in the launch file. Copy a template launch file (hdl_graph_slam_501.launch for indoor, hdl_graph_slam_400.launch for outdoor) and tweak parameters in the launch file to adapt it to your application.\n\n## License\n\nThis package is released under the BSD-2-Clause License.\n\n\nNote that the cholmod solver in g2o is licensed under GPL. You may need to build g2o without cholmod dependency to avoid the GPL.\n\n## Related packages\n\n- [interactive_slam](https://github.com/koide3/interactive_slam)\n- [hdl_graph_slam](https://github.com/koide3/hdl_graph_slam)\n- [hdl_localization](https://github.com/koide3/hdl_localization)\n- [hdl_people_tracking](https://github.com/koide3/hdl_people_tracking)\n\n<img src=\"imgs/packages.png\"/>\n\n## Papers\nKenji Koide, Jun Miura, and Emanuele Menegatti, A Portable 3D LIDAR-based System for Long-term and Wide-area People Behavior Measurement, Advanced Robotic Systems, 2019 [[link]](https://www.researchgate.net/publication/331283709_A_Portable_3D_LIDAR-based_System_for_Long-term_and_Wide-area_People_Behavior_Measurement).\n\n## Contact\nKenji Koide, k.koide@aist.go.jp, https://staff.aist.go.jp/k.koide\n\nActive Intelligent Systems Laboratory, Toyohashi University of Technology, Japan [\\[URL\\]](http://www.aisl.cs.tut.ac.jp)  \nMobile Robotics Research Team, National Institute of Advanced Industrial Science and Technology (AIST), Japan  [\\[URL\\]](https://unit.aist.go.jp/hcmrc/mr-rt/contact.html)\n"
        },
        {
          "name": "apps",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "imgs",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "launch",
          "type": "tree",
          "content": null
        },
        {
          "name": "msg",
          "type": "tree",
          "content": null
        },
        {
          "name": "nodelet_plugins.xml",
          "type": "blob",
          "size": 0.771484375,
          "content": "<library path=\"lib/libscan_matching_odometry_nodelet\">\n  <class name=\"hdl_graph_slam/ScanMatchingOdometryNodelet\" type=\"hdl_graph_slam::ScanMatchingOdometryNodelet\" base_class_type=\"nodelet::Nodelet\" />\n</library>\n\n<library path=\"lib/libfloor_detection_nodelet\">\n  <class name=\"hdl_graph_slam/FloorDetectionNodelet\" type=\"hdl_graph_slam::FloorDetectionNodelet\" base_class_type=\"nodelet::Nodelet\" />\n</library>\n\n<library path=\"lib/libprefiltering_nodelet\">\n  <class name=\"hdl_graph_slam/PrefilteringNodelet\" type=\"hdl_graph_slam::PrefilteringNodelet\" base_class_type=\"nodelet::Nodelet\" />\n</library>\n\n<library path=\"lib/libhdl_graph_slam_nodelet\">\n  <class name=\"hdl_graph_slam/HdlGraphSlamNodelet\" type=\"hdl_graph_slam::HdlGraphSlamNodelet\" base_class_type=\"nodelet::Nodelet\" />\n</library>\n"
        },
        {
          "name": "package.xml",
          "type": "blob",
          "size": 1.3076171875,
          "content": "<?xml version=\"1.0\"?>\n<package format=\"3\">\n  <name>hdl_graph_slam</name>\n  <version>0.0.0</version>\n  <description>The hdl_graph_slam package</description>\n\n  <maintainer email=\"koide@aisl.cs.tut.ac.jp\">koide</maintainer>\n\n  <license>BSD</license>\n\n  <buildtool_depend>catkin</buildtool_depend>\n  <build_depend>libg2o</build_depend>\n  <build_depend>message_generation</build_depend>\n  <depend>eigen</depend>\n  <depend>fast_gicp</depend>\n  <depend>geodesy</depend>\n  <depend>geometry_msgs</depend>\n  <depend>interactive_markers</depend>\n  <depend>ndt_omp</depend>\n  <depend>nmea_msgs</depend>\n  <depend>pcl_ros</depend>\n  <depend>roscpp</depend>\n  <depend>rospy</depend>\n  <depend>sensor_msgs</depend>\n  <depend>std_msgs</depend>\n  <depend>tf_conversions</depend>\n  <exec_depend>message_runtime</exec_depend>\n  <exec_depend>msf_updates</exec_depend>\n  <exec_depend>nodelet</exec_depend>\n  <exec_depend>tf</exec_depend>\n\n  <exec_depend condition=\"$ROS_PYTHON_VERSION == 2\">python-scipy</exec_depend>\n  <exec_depend condition=\"$ROS_PYTHON_VERSION == 3\">python3-scipy</exec_depend>\n  <exec_depend condition=\"$ROS_PYTHON_VERSION == 2\">python-progressbar</exec_depend>\n  <exec_depend condition=\"$ROS_PYTHON_VERSION == 3\">python3-progressbar</exec_depend>\n\n  <export>\n    <nodelet plugin=\"${prefix}/nodelet_plugins.xml\" />\n  </export>\n</package>\n"
        },
        {
          "name": "rviz",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.3017578125,
          "content": "## ! DO NOT MANUALLY INVOKE THIS setup.py, USE CATKIN INSTEAD\n\nfrom setuptools import setup\nfrom catkin_pkg.python_setup import generate_distutils_setup\n\n# fetch values from package.xml\nsetup_args = generate_distutils_setup(\n    packages=['hdl_graph_slam'],\n    package_dir={'': 'src'})\n\nsetup(**setup_args)\n\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "srv",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}