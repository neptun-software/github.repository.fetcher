{
  "metadata": {
    "timestamp": 1736565490494,
    "page": 352,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mpromonet/webrtc-streamer",
      "stars": 3107,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 5.8173828125,
          "content": "linux_docker_builder:    \n  env:\n    DOCKERHUB_USER: ENCRYPTED[ccd1af2835558f6b3e08fa3dd8ad95e7b3eaf3b83220433093d6335a3f4727f4c53c4053587d1594799e72e331d1017d]\n    DOCKERHUB_PASS: ENCRYPTED[864955f576fec35ebe9ebb2102689412213437cf0db640570b886bdf6369950dacbb77c7c9e690a720607a87e7ea3b18]\n  clone_script: |\n    if [ -z \"$CIRRUS_PR\" ]; then\n      git clone --recursive --branch=$CIRRUS_BRANCH https://x-access-token:${CIRRUS_REPO_CLONE_TOKEN}@github.com/${CIRRUS_REPO_FULL_NAME}.git $CIRRUS_WORKING_DIR\n      git reset --hard $CIRRUS_CHANGE_IN_REPO\n    else\n      git clone --recursive https://x-access-token:${CIRRUS_REPO_CLONE_TOKEN}@github.com/${CIRRUS_REPO_FULL_NAME}.git $CIRRUS_WORKING_DIR\n      git fetch origin pull/$CIRRUS_PR/head:pull/$CIRRUS_PR\n      git reset --hard $CIRRUS_CHANGE_IN_REPO\n    fi  \n  script: |\n    docker info\n    export TAG=${CIRRUS_TAG:-${CIRRUS_BRANCH}}\n    [ \"$TAG\" == \"master\" ] && export TAG=latest\n    docker build -t $CIRRUS_REPO_FULL_NAME:${TAG}-amd64 . -f Dockerfile\n    docker login --username=$DOCKERHUB_USER --password=$DOCKERHUB_PASS \n    #docker push $CIRRUS_REPO_FULL_NAME:${TAG}-amd64\n\nlinuxarmv7_docker_builder:    \n  timeout_in: 120m\n  env:\n    DOCKERHUB_USER: ENCRYPTED[ccd1af2835558f6b3e08fa3dd8ad95e7b3eaf3b83220433093d6335a3f4727f4c53c4053587d1594799e72e331d1017d]\n    DOCKERHUB_PASS: ENCRYPTED[864955f576fec35ebe9ebb2102689412213437cf0db640570b886bdf6369950dacbb77c7c9e690a720607a87e7ea3b18]\n  clone_script: |\n    if [ -z \"$CIRRUS_PR\" ]; then\n      git clone --recursive --branch=$CIRRUS_BRANCH https://x-access-token:${CIRRUS_REPO_CLONE_TOKEN}@github.com/${CIRRUS_REPO_FULL_NAME}.git $CIRRUS_WORKING_DIR\n      git reset --hard $CIRRUS_CHANGE_IN_REPO\n    else\n      git clone --recursive https://x-access-token:${CIRRUS_REPO_CLONE_TOKEN}@github.com/${CIRRUS_REPO_FULL_NAME}.git $CIRRUS_WORKING_DIR\n      git fetch origin pull/$CIRRUS_PR/head:pull/$CIRRUS_PR\n      git reset --hard $CIRRUS_CHANGE_IN_REPO\n    fi  \n  script: |\n    docker info\n    export TAG=${CIRRUS_TAG:-${CIRRUS_BRANCH}}\n    [ \"$TAG\" == \"master\" ] && export TAG=latest\n    docker build -t $CIRRUS_REPO_FULL_NAME:${TAG}-armv7 . -f Dockerfile.rpi --build-arg ARCH=armv7l --build-arg CROSSCOMPILER=https://sourceforge.net/projects/raspberry-pi-cross-compilers/files/Raspberry%20Pi%20GCC%20Cross-Compiler%20Toolchains/Buster/GCC%2010.2.0/Raspberry%20Pi%202%2C%203/cross-gcc-10.2.0-pi_2-3.tar.gz --build-arg IMAGE=balenalib/raspberry-pi2\n    docker login --username=$DOCKERHUB_USER --password=$DOCKERHUB_PASS \n    #docker push $CIRRUS_REPO_FULL_NAME:${TAG}-armv7\n\nlinuxarmv6_docker_builder:    \n  timeout_in: 120m\n  env:\n    DOCKERHUB_USER: ENCRYPTED[ccd1af2835558f6b3e08fa3dd8ad95e7b3eaf3b83220433093d6335a3f4727f4c53c4053587d1594799e72e331d1017d]\n    DOCKERHUB_PASS: ENCRYPTED[864955f576fec35ebe9ebb2102689412213437cf0db640570b886bdf6369950dacbb77c7c9e690a720607a87e7ea3b18]\n  clone_script: |\n    if [ -z \"$CIRRUS_PR\" ]; then\n      git clone --recursive --branch=$CIRRUS_BRANCH https://x-access-token:${CIRRUS_REPO_CLONE_TOKEN}@github.com/${CIRRUS_REPO_FULL_NAME}.git $CIRRUS_WORKING_DIR\n      git reset --hard $CIRRUS_CHANGE_IN_REPO\n    else\n      git clone --recursive https://x-access-token:${CIRRUS_REPO_CLONE_TOKEN}@github.com/${CIRRUS_REPO_FULL_NAME}.git $CIRRUS_WORKING_DIR\n      git fetch origin pull/$CIRRUS_PR/head:pull/$CIRRUS_PR\n      git reset --hard $CIRRUS_CHANGE_IN_REPO\n    fi      \n  script: |\n    docker info\n    export TAG=${CIRRUS_TAG:-${CIRRUS_BRANCH}}\n    [ \"$TAG\" == \"master\" ] && export TAG=latest\n    docker build -t $CIRRUS_REPO_FULL_NAME:${TAG}-armv6 . -f Dockerfile.rpi\n    docker login --username=$DOCKERHUB_USER --password=$DOCKERHUB_PASS \n    #docker push $CIRRUS_REPO_FULL_NAME:${TAG}-armv6\n\nlinuxarm64_docker_builder:\n  env:\n    DOCKERHUB_USER: ENCRYPTED[ccd1af2835558f6b3e08fa3dd8ad95e7b3eaf3b83220433093d6335a3f4727f4c53c4053587d1594799e72e331d1017d]\n    DOCKERHUB_PASS: ENCRYPTED[864955f576fec35ebe9ebb2102689412213437cf0db640570b886bdf6369950dacbb77c7c9e690a720607a87e7ea3b18]\n  clone_script: |\n    if [ -z \"$CIRRUS_PR\" ]; then\n      git clone --recursive --branch=$CIRRUS_BRANCH https://x-access-token:${CIRRUS_REPO_CLONE_TOKEN}@github.com/${CIRRUS_REPO_FULL_NAME}.git $CIRRUS_WORKING_DIR\n      git reset --hard $CIRRUS_CHANGE_IN_REPO\n    else\n      git clone --recursive https://x-access-token:${CIRRUS_REPO_CLONE_TOKEN}@github.com/${CIRRUS_REPO_FULL_NAME}.git $CIRRUS_WORKING_DIR\n      git fetch origin pull/$CIRRUS_PR/head:pull/$CIRRUS_PR\n      git reset --hard $CIRRUS_CHANGE_IN_REPO\n    fi      \n  script: |\n    docker info\n    export TAG=${CIRRUS_TAG:-${CIRRUS_BRANCH}}\n    [ \"$TAG\" == \"master\" ] && export TAG=latest\n    docker build -t $CIRRUS_REPO_FULL_NAME:${TAG}-arm64 . -f Dockerfile.arm64 \n    docker login --username=$DOCKERHUB_USER --password=$DOCKERHUB_PASS\n    #docker push $CIRRUS_REPO_FULL_NAME:${TAG}-arm64\n\n    \npublish_docker_builder:\n  depends_on: \n    - linuxarmv6\n    - linuxarmv7\n    - linuxarm64\n    - linux\n  env:\n    DOCKER_CLI_EXPERIMENTAL: enabled\n    DOCKERHUB_USER: ENCRYPTED[ccd1af2835558f6b3e08fa3dd8ad95e7b3eaf3b83220433093d6335a3f4727f4c53c4053587d1594799e72e331d1017d]\n    DOCKERHUB_PASS: ENCRYPTED[864955f576fec35ebe9ebb2102689412213437cf0db640570b886bdf6369950dacbb77c7c9e690a720607a87e7ea3b18]\n  script: | \n    docker info\n    export TAG=${CIRRUS_TAG:-latest}\n    docker login --username=$DOCKERHUB_USER --password=$DOCKERHUB_PASS \n    docker manifest create --amend $CIRRUS_REPO_FULL_NAME:${TAG} $CIRRUS_REPO_FULL_NAME:${TAG}-amd64 $CIRRUS_REPO_FULL_NAME:${TAG}-armv7 $CIRRUS_REPO_FULL_NAME:${TAG}-armv6 $CIRRUS_REPO_FULL_NAME:${TAG}-arm64\n    docker manifest annotate $CIRRUS_REPO_FULL_NAME:${TAG} $CIRRUS_REPO_FULL_NAME:${TAG}-armv7 --os linux --arch arm --variant v7\n    docker manifest annotate $CIRRUS_REPO_FULL_NAME:${TAG} $CIRRUS_REPO_FULL_NAME:${TAG}-armv6 --os linux --arch arm --variant v6l\n    #docker manifest push $CIRRUS_REPO_FULL_NAME:${TAG} -p\n"
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2568359375,
          "content": "*.o*\n*.a\n*.tar.gz\nwebrtc-streamer\nwebrtc-streamer.exe\n/node_modules/\npackage-lock.json\n*.sln\n*.vcxproj*\n*.tlog\n*.log\n*.pdb\n*.lib\n*.dir\n*.cmake\n*.ilk\nCMakeCache.txt\nCMakeFiles/\n*.manifest\n_CPack_Packages\nlive\n/.vs/\ninstall_manifest.txt\nMakefile\n.ninja*\nbuild.ninja"
        },
        {
          "name": ".gitlab-ci.yml",
          "type": "blob",
          "size": 0.7666015625,
          "content": "variables:\n  GIT_SUBMODULE_STRATEGY: recursive\n\nbefore_script:\n  - docker info\n  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY\n\nbuild_x86_64:\n  image: docker:stable\n  services:\n  - docker:dind\n  stage: build\n  script:\n    - docker build -t ${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_COMMIT_REF_SLUG}-linux .\n    - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_COMMIT_REF_SLUG}-linux\n\nbuild_windows:\n  image: servercore:ltsc2019\n  tags:\n  - shared-windows\n  - windows\n  - windows-1809\n  before_script:\n    - Start-Service -Name \"docker\"  \n  stage: build\n  script:\n    - docker build -t ${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_COMMIT_REF_SLUG}-windows -f Dockerfile.windows .\n    - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_COMMIT_REF_SLUG}-windows\n\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.53125,
          "content": "[submodule \"live555helper\"]\n\tpath = live555helper\n\turl = https://github.com/mpromonet/live555helper\n[submodule \"civetweb\"]\n\tpath = civetweb\n\turl = https://github.com/civetweb/civetweb\n[submodule \"html\"]\n\tpath = html\n\turl = https://github.com/mpromonet/webrtc-streamer-html\n[submodule \"getopt\"]\n\tpath = getopt\n\turl = https://github.com/kimgr/getopt_port\n[submodule \"prometheus-cpp\"]\n\tpath = prometheus-cpp\n\turl = https://github.com/jupp0r/prometheus-cpp\n[submodule \"libv4l2cpp\"]\n\tpath = libv4l2cpp\n\turl = https://github.com/mpromonet/libv4l2cpp\n"
        },
        {
          "name": ".gitpod.yml",
          "type": "blob",
          "size": 0.515625,
          "content": "image: gitpod/workspace-full\ncheckoutLocation: webrtc-streamer\ntasks: \n  - name: build\n    init: |\n      pushd ..\n      git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git\n      popd\n      export PATH=$PATH:`realpath ../depot_tools`\n\n      mkdir ../webrtc\n      pushd ../webrtc\n      fetch webrtc \n      popd\n\n      cmake -DCMAKE_BUILD_TYPE=Debug .\n      make\n\n    command: |\n      ./webrtc-streamer -C config.json\n\nports:\n  - port: 8000\n    onOpen: open-browser\nvscode:\n  extensions:\n    - webfreak.debug"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.234375,
          "content": "CMakeFiles/\n_CPack_Packages/\n*.cmake\nCMake*\nMakefile\ninc/\nsrc/\nsnap/\ncivetweb/\ngetopt/\nimages/\nlive555helper/\nlive/\n*.gz\n*.a\nwebrtc-streamer\nDockerfile*\n*.y*ml\n*.tgz\n.github\ncad/\nhtml/jsdoc/\ngrafana/\nprometheus-cpp/\nconfig.json\n.gitmodules\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 18.4404296875,
          "content": "cmake_minimum_required (VERSION 3.5)\nproject (webrtc-streamer)\n\nset (WEBRTCROOT \"${CMAKE_CURRENT_SOURCE_DIR}/../webrtc\" CACHE STRING \"WEBRTC root directory\")\nset (WEBRTCDESKTOPCAPTURE \"ON\" CACHE STRING \"WEBRTC Desktop capture\")\nset (WEBRTCCHROMEBRANDED \"ON\" CACHE STRING \"WEBRTC Chrome branded\")\nset (WEBRTCVERSION \"549c9b717fcbdfdf5d76068b3dd37076a9ffeacb\" CACHE STRING \"WEBRTC version\")\n\nif(NOT CMAKE_BUILD_TYPE)\nset (CMAKE_BUILD_TYPE \"Release\")\nendif()\nMESSAGE(\"CMAKE_BUILD_TYPE = ${CMAKE_BUILD_TYPE}\\nWEBRTCROOT = ${WEBRTCROOT}\\nWEBRTCDESKTOPCAPTURE= ${WEBRTCDESKTOPCAPTURE}\\nCMAKE_CXX_COMPILER_ID=${CMAKE_CXX_COMPILER_ID}\\nWEBRTCVERSION=${WEBRTCVERSION}\")\n\nset (CMAKE_POSITION_INDEPENDENT_CODE ON)\nset (CMAKE_CXX_STANDARD 20)\nset (CMAKE_CXX_EXTENSIONS OFF)\n\n\n# set CMAKE_FIND_ROOT_PATH to search package in WebRTC sysroot\nif(CMAKE_SYSTEM_PROCESSOR MATCHES \"armv.*\")\n  set (CMAKE_FIND_ROOT_PATH ${WEBRTCROOT}/src/build/linux/debian_bullseye_arm-sysroot)\nelseif(CMAKE_SYSTEM_PROCESSOR MATCHES \"arm64\")\n  set (CMAKE_FIND_ROOT_PATH ${WEBRTCROOT}/src/build/linux/debian_bullseye_arm64-sysroot)\n  add_compile_options(--sysroot=${CMAKE_FIND_ROOT_PATH})\nendif()\nMESSAGE(\"CMAKE_FIND_ROOT_PATH = ${CMAKE_FIND_ROOT_PATH}\")\n\n# alsa ?\nfind_package(ALSA QUIET)\nMESSAGE(\"ALSA_FOUND = ${ALSA_FOUND}\")\n\n# pulse ?\nfind_package(PulseAudio QUIET)\nMESSAGE(\"PulseAudio_FOUND = ${PulseAudio_FOUND}\")\n\nset(ENV{PATH} \"${WEBRTCROOT}/src/third_party/llvm-build/Release+Asserts/bin:$ENV{PATH}\")\nMESSAGE(\"PATH = $ENV{PATH}\")\n\nfind_package(Git)\n\n# webrtc build\nset (WEBRTCOBJS ${WEBRTCROOT}/src/out/${CMAKE_BUILD_TYPE}/obj)\n\nif (NOT EXISTS ${WEBRTCOBJS}/${CMAKE_STATIC_LIBRARY_PREFIX}webrtc${CMAKE_STATIC_LIBRARY_SUFFIX})\n  if(GIT_FOUND)\n    EXECUTE_PROCESS(WORKING_DIRECTORY ${WEBRTCROOT}/src COMMAND ${GIT_EXECUTABLE} status)\n    EXECUTE_PROCESS(WORKING_DIRECTORY ${WEBRTCROOT}/src COMMAND ${GIT_EXECUTABLE} checkout ${WEBRTCVERSION})\n  endif()\n\n  file(READ ${WEBRTCROOT}/src/DEPS filecontent)\n  string(REPLACE \"'src/resources'],$\" \"'src/resources'],'condition':'rtc_include_tests==true',\" filecontent \"${filecontent}\")\n  file(WRITE ${WEBRTCROOT}/src/DEPS \"${filecontent}\")\n\n  EXECUTE_PROCESS(WORKING_DIRECTORY ${WEBRTCROOT}/src COMMAND gclient sync)\n\n  if(CMAKE_SYSTEM_PROCESSOR MATCHES \"armv.*\")\n    EXECUTE_PROCESS(WORKING_DIRECTORY ${WEBRTCROOT}/src\n                    COMMAND build/linux/sysroot_scripts/install-sysroot.py --arch=arm \n                    RESULT_VARIABLE SYSROOT_RESULT\n                    OUTPUT_VARIABLE SYSROOT_OUTPUT\n                    ERROR_VARIABLE SYSROOT_ERROR\n                    OUTPUT_STRIP_TRAILING_WHITESPACE\n                    ERROR_STRIP_TRAILING_WHITESPACE)\n    if(NOT SYSROOT_RESULT EQUAL 0)\n      message(FATAL_ERROR \"install-sysroot.py failed with exit code ${SYSROOT_RESULT}\\nOutput:\\n${SYSROOT_OUTPUT}\\nError:\\n${SYSROOT_ERROR}\")\n    else()\n      message(\"install-sysroot.py succeeded ${SYSROOT_OUTPUT}\")\n    endif()\n  elseif (CMAKE_SYSTEM_PROCESSOR MATCHES \"arm64\")\n    EXECUTE_PROCESS(WORKING_DIRECTORY ${WEBRTCROOT}/src \n                    COMMAND build/linux/sysroot_scripts/install-sysroot.py --arch=arm64\n                    RESULT_VARIABLE SYSROOT_RESULT\n                    OUTPUT_VARIABLE SYSROOT_OUTPUT\n                    ERROR_VARIABLE SYSROOT_ERROR\n                    OUTPUT_STRIP_TRAILING_WHITESPACE\n                    ERROR_STRIP_TRAILING_WHITESPACE)\n    if(NOT SYSROOT_RESULT EQUAL 0)\n      message(FATAL_ERROR \"install-sysroot.py failed with exit code ${SYSROOT_RESULT}\\nOutput:\\n${SYSROOT_OUTPUT}\\nError:\\n${SYSROOT_ERROR}\")\n    else()\n      message(\"install-sysroot.py succeeded ${SYSROOT_OUTPUT}\")\n    endif()\n  endif()\n\n\n  set (WEBRTCARGS rtc_include_tests=false\\nrtc_enable_protobuf=false\\nrtc_build_examples=false\\nrtc_build_tools=false\\ntreat_warnings_as_errors=false\\nenable_js_protobuf=false\\nuse_glib=false\\n)\n  set (WEBRTCARGS use_custom_libcxx=false\\nlibyuv_use_sme=false\\n${WEBRTCARGS})\n  # debug/release\n  if(CMAKE_BUILD_TYPE STREQUAL \"Release\")\n    set (WEBRTCARGS is_debug=false\\n${WEBRTCARGS})\n  else()\n    set (WEBRTCARGS is_debug=true\\n${WEBRTCARGS})\n  endif()\n\n  # enable H264 support\n  if (WEBRTCCHROMEBRANDED STREQUAL \"ON\")\n    set (WEBRTCARGS is_chrome_branded=true\\n${WEBRTCARGS})\n  else()\n    set (WEBRTCARGS rtc_use_h264=true\\nrtc_use_h265=true\\n${WEBRTCARGS})\n  endif()\n  if (CMAKE_SYSTEM_PROCESSOR MATCHES \"armv6.*\")\n    set (CONFIGURE_ARGS --disable-everything --disable-all --disable-doc --disable-htmlpages --disable-manpages --disable-podpages --disable-txtpages --disable-static --enable-avcodec --enable-avformat --enable-avutil --enable-static --enable-libopus --disable-debug --disable-bzlib --disable-iconv --disable-network --disable-schannel --disable-sdl2 --disable-symver --disable-xlib --disable-zlib --disable-securetransport --disable-faan --disable-alsa --disable-autodetect --disable-error-resilience --enable-decoder=vorbis,libopus,flac --enable-decoder=pcm_u8,pcm_s16le,pcm_s24le,pcm_s32le,pcm_f32le,mp3 --enable-decoder=pcm_s16be,pcm_s24be,pcm_mulaw,pcm_alaw --enable-demuxer=ogg,matroska,wav,flac,mp3,mov --enable-parser=opus,vorbis,flac,mpegaudio,vp9 --extra-cflags=-I${WEBRTCROOT}/src/third_party/opus/src/include --disable-linux-perf --x86asmexe=nasm --optflags=\"-O2\" --arch=arm --enable-armv6 --disable-armv6t2 --enable-vfp --disable-thumb --extra-cflags=-march=armv6 --enable-cross-compile --target-os=linux --extra-cflags=--target=arm-linux-gnueabihf --extra-ldflags=--target=arm-linux-gnueabihf --sysroot=${WEBRTCROOT}/src/build/linux/debian_bullseye_armhf-sysroot --extra-cflags=-mtune=cortex-a8 --extra-cflags=-mfloat-abi=hard --extra-cflags=-O2 --disable-neon --extra-cflags=-mfpu=vfpv3-d16 --enable-pic --cc=clang --cxx=clang++ --ld=clang --extra-ldflags=-fuse-ld=lld --enable-decoder=aac,h264 --enable-demuxer=aac --enable-parser=aac,h264)\n    MESSAGE(\"CONFIGURE_ARGS = ${CONFIGURE_ARGS}\")\n    EXECUTE_PROCESS(WORKING_DIRECTORY ${WEBRTCROOT}/src/third_party/ffmpeg COMMAND ./configure ${CONFIGURE_ARGS})\n\n    file(COPY ${WEBRTCROOT}/src/third_party/ffmpeg/config.h DESTINATION ${WEBRTCROOT}/src/third_party/ffmpeg/chromium/config/Chrome/linux/arm/)\n    file(COPY ${WEBRTCROOT}/src/third_party/ffmpeg/config_components.h DESTINATION ${WEBRTCROOT}/src/third_party/ffmpeg/chromium/config/Chrome/linux/arm/)\n    file(COPY ${WEBRTCROOT}/src/third_party/ffmpeg/libavutil/avconfig.h DESTINATION ${WEBRTCROOT}/src/third_party/ffmpeg/chromium/config/Chrome/linux/arm/libavutil/)\n    file(COPY ${WEBRTCROOT}/src/third_party/ffmpeg/libavfilter/filter_list.c DESTINATION ${WEBRTCROOT}/src/third_party/ffmpeg/chromium/config/Chrome/linux/arm/libavutil/)\n    file(COPY ${WEBRTCROOT}/src/third_party/ffmpeg/libavcodec/codec_list.c DESTINATION ${WEBRTCROOT}/src/third_party/ffmpeg/chromium/config/Chrome/linux/arm/libavcodec/)\n    file(COPY ${WEBRTCROOT}/src/third_party/ffmpeg/libavcodec/parser_list.c DESTINATION ${WEBRTCROOT}/src/third_party/ffmpeg/chromium/config/Chrome/linux/arm/libavcodec/)\n    file(COPY ${WEBRTCROOT}/src/third_party/ffmpeg/libavcodec/bsf_list.c DESTINATION ${WEBRTCROOT}/src/third_party/ffmpeg/chromium/config/Chrome/linux/arm/libavcodec/)\n    file(COPY ${WEBRTCROOT}/src/third_party/ffmpeg/libavformat/demuxer_list.c DESTINATION ${WEBRTCROOT}/src/third_party/ffmpeg/chromium/config/Chrome/linux/arm/libavformat/)\n    file(COPY ${WEBRTCROOT}/src/third_party/ffmpeg/libavformat/muxer_list.c DESTINATION ${WEBRTCROOT}/src/third_party/ffmpeg/chromium/config/Chrome/linux/arm/libavformat/)\n    file(COPY ${WEBRTCROOT}/src/third_party/ffmpeg/libavformat/protocol_list.c DESTINATION ${WEBRTCROOT}/src/third_party/ffmpeg/chromium/config/Chrome/linux/arm/libavformat/)\n  endif()\n\n  #patch\n  file(READ ${WEBRTCROOT}/src/third_party/perfetto/include/perfetto/tracing/track.h filecontent)\n  string(REPLACE \"#include <map>\" \"#include <map>\\n#include <optional>\" filecontent \"${filecontent}\")\n  file(WRITE ${WEBRTCROOT}/src/third_party/perfetto/include/perfetto/tracing/track.h  \"${filecontent}\")\n\n  file(READ ${WEBRTCROOT}/src/media/base/media_channel.h filecontent)\n  string(REGEX REPLACE \"ost << ToStringIfSet[^;]*;\" \"\" filecontent \"${filecontent}\")\n  file(WRITE ${WEBRTCROOT}/src/media/base/media_channel.h \"${filecontent}\")\n  \n\n  # sound support\n  if (APPLE)\n    set (WEBRTCARGS rtc_include_internal_audio_device=true\\n${WEBRTCARGS})\n    set (WEBRTCARGS rtc_include_pulse_audio=true\\n${WEBRTCARGS})\n  elseif (WIN32)\n    set (WEBRTCARGS rtc_include_internal_audio_device=true\\n${WEBRTCARGS})\n  else()\n    if (NOT PulseAudio_FOUND)\n      set (WEBRTCARGS rtc_include_pulse_audio=false\\n${WEBRTCARGS})\n    endif()\n    if (NOT ALSA_FOUND)\n      set (WEBRTCARGS rtc_include_internal_audio_device=false\\n${WEBRTCARGS})\n    endif()\n  endif()\n\n  # compilation mode depending on target\n  if(CMAKE_SYSTEM_PROCESSOR MATCHES \"armv6.*\")\n    set (WEBRTCARGS target_cpu=\"arm\"\\narm_version=6\\narm_float_abi=\"hard\"\\nenable_libaom=false\\n${WEBRTCARGS})\n  elseif(CMAKE_SYSTEM_PROCESSOR MATCHES \"armv.*\")\n    set (WEBRTCARGS target_cpu=\"arm\"\\n${WEBRTCARGS})\n  elseif(CMAKE_SYSTEM_PROCESSOR MATCHES \"arm64\")\n    set (WEBRTCARGS target_cpu=\"arm64\"\\n${WEBRTCARGS})\n  endif()\n  if (DEFINED CMAKE_FIND_ROOT_PATH)\n    set (WEBRTCARGS use_sysroot=true\\n${WEBRTCARGS})\n  else()\n    set (WEBRTCARGS use_sysroot=false\\n${WEBRTCARGS})\n  endif()\n  set (WEBRTCARGS is_clang=true\\n${WEBRTCARGS})\n\n  # screen capture support\n  find_package(PkgConfig QUIET)\n  pkg_check_modules(GTK3 QUIET gtk+-3.0)\n  MESSAGE(\"GTK3_FOUND = ${GTK3_FOUND}\")\n  if(NOT GTK3_FOUND OR (WEBRTCDESKTOPCAPTURE STREQUAL \"OFF\"))\n    set (WEBRTCARGS rtc_use_x11=false\\nrtc_use_pipewire=false\\n${WEBRTCARGS})\n  endif()\n\n  # write conf file\n  FILE(WRITE ${WEBRTCROOT}/src/out/${CMAKE_BUILD_TYPE}/args.gn ${WEBRTCARGS})\n\n  if (WIN32)\n    SET (SHELLCOMMAND cmd /c )\n  endif()\n  EXECUTE_PROCESS(WORKING_DIRECTORY ${WEBRTCROOT}/src/out/${CMAKE_BUILD_TYPE} COMMAND ${SHELLCOMMAND} gn gen .)  \n  SET(NINJA_TARGET webrtc rtc_json builtin_video_decoder_factory builtin_video_encoder_factory p2p_server_utils task_queue default_task_queue_factory)\n  EXECUTE_PROCESS(WORKING_DIRECTORY ${WEBRTCROOT}/src/out/${CMAKE_BUILD_TYPE} COMMAND ${SHELLCOMMAND} ninja ${NINJA_TARGET})\nendif() \n\n\n# build version identifier\nif(GIT_FOUND)\n    EXECUTE_PROCESS(COMMAND ${GIT_EXECUTABLE} submodule update --init)\n    EXECUTE_PROCESS(COMMAND ${GIT_EXECUTABLE} describe --tags --always --dirty OUTPUT_VARIABLE PROJECTVERSION OUTPUT_STRIP_TRAILING_WHITESPACE)\n    set (VERSION \"${PROJECTVERSION}/${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR}\")\n    \n    EXECUTE_PROCESS(COMMAND ${GIT_EXECUTABLE} -C civetweb describe --tags --always --dirty OUTPUT_VARIABLE CIVETVERSION OUTPUT_STRIP_TRAILING_WHITESPACE)\n    set (VERSION \"${VERSION} civetweb@${CIVETVERSION}\")\n\n    EXECUTE_PROCESS(COMMAND ${GIT_EXECUTABLE} -C ${WEBRTCROOT}/src describe --tags --always --dirty OUTPUT_VARIABLE WEBRTCVERSION OUTPUT_STRIP_TRAILING_WHITESPACE)\n    set (VERSION \"${VERSION} webrtc@${WEBRTCVERSION}\")\n\n    EXECUTE_PROCESS(COMMAND ${GIT_EXECUTABLE} -C live555helper describe --tags --always --dirty OUTPUT_VARIABLE LIVEVERSION OUTPUT_STRIP_TRAILING_WHITESPACE)\n    set (VERSION \"${VERSION} live555helper@${LIVEVERSION}\")\nendif()\nadd_definitions(-DVERSION=\\\"${VERSION}\\\")\nMESSAGE(\"VERSION = ${VERSION}\")\n\n# project target\nFILE(GLOB_RECURSE WEBRTJSONCPPCOBJS ${WEBRTCOBJS}/third_party/jsoncpp/jsoncpp/*${CMAKE_C_OUTPUT_EXTENSION} ${WEBRTCOBJS}/rtc_base/rtc_json/*${CMAKE_C_OUTPUT_EXTENSION})\nFILE(GLOB_RECURSE WEBRTP2POBJ ${WEBRTCOBJS}/p2p/p2p_server_utils/*${CMAKE_C_OUTPUT_EXTENSION})\nSET (WEBRTCEXTRAOBJS ${WEBRTJSONCPPCOBJS} ${WEBRTP2POBJ} ${WEBRTCCOMOBJ})\t\nFILE(GLOB SOURCE src/*.cpp)\nadd_executable (${CMAKE_PROJECT_NAME} ${SOURCE} ${WEBRTCEXTRAOBJS})\ntarget_include_directories(${CMAKE_PROJECT_NAME} PRIVATE inc) \n\n# webrtc \nset (WEBRTCINCLUDE ${WEBRTCROOT}/src ${WEBRTCROOT}/src/third_party/abseil-cpp ${WEBRTCROOT}/src/third_party/jsoncpp/source/include  ${WEBRTCROOT}/src/third_party/jsoncpp/generated ${WEBRTCROOT}/src/third_party/libyuv/include)\ntarget_include_directories(${CMAKE_PROJECT_NAME} PRIVATE ${WEBRTCINCLUDE})\nset(WEBRTC_LIBS_INFO\n    \"${WEBRTCOBJS}/api/video_codecs/${CMAKE_STATIC_LIBRARY_PREFIX}builtin_video_encoder_factory${CMAKE_STATIC_LIBRARY_SUFFIX}\"\n    \"${WEBRTCOBJS}/api/video_codecs/${CMAKE_STATIC_LIBRARY_PREFIX}builtin_video_decoder_factory${CMAKE_STATIC_LIBRARY_SUFFIX}\"\n    \"${WEBRTCOBJS}/media/${CMAKE_STATIC_LIBRARY_PREFIX}rtc_internal_video_codecs${CMAKE_STATIC_LIBRARY_SUFFIX}\"\n    \"${WEBRTCOBJS}/media/${CMAKE_STATIC_LIBRARY_PREFIX}rtc_simulcast_encoder_adapter${CMAKE_STATIC_LIBRARY_SUFFIX}\"\n    \"${WEBRTCOBJS}/${CMAKE_STATIC_LIBRARY_PREFIX}webrtc${CMAKE_STATIC_LIBRARY_SUFFIX}\"\n)\nforeach(LIB ${WEBRTC_LIBS_INFO})\n    target_link_libraries(${CMAKE_PROJECT_NAME} ${LIB})\nendforeach()\nadd_definitions(-DHAVE_JPEG)\n\n# thread\nset(CMAKE_THREAD_PREFER_PTHREAD TRUE)\nset(THREADS_PREFER_PTHREAD_FLAG TRUE)\nfind_package (Threads)\ntarget_link_libraries (${CMAKE_PROJECT_NAME} Threads::Threads) \n\n# civetweb\nadd_library (civetweb STATIC civetweb/src/civetweb.c civetweb/src/CivetServer.cpp)\t\nadd_definitions(-DOPENSSL_API_3_0 -DUSE_WEBSOCKET)\ntarget_link_libraries (${CMAKE_PROJECT_NAME} civetweb) \ntarget_include_directories(civetweb PUBLIC civetweb/include) \n\n# rtmp ?\nfind_package(PkgConfig QUIET)\npkg_check_modules(RTMP QUIET librtmp)\nMESSAGE(\"RTMP_FOUND = ${RTMP_FOUND} RTMP_INCLUDE_DIRS=${RTMP_INCLUDE_DIRS} RTMP_LIBRARY_DIRS=${RTMP_LIBRARY_DIRS} RTMP_LIBRARIES=${RTMP_LIBRARIES}\")\nif (RTMP_FOUND)\n  add_definitions(-DHAVE_RTMP)\n  target_include_directories (${CMAKE_PROJECT_NAME} PUBLIC ${RTMP_INCLUDE_DIRS}) \n  target_link_directories (${CMAKE_PROJECT_NAME} PUBLIC ${RTMP_LIBRARY_DIRS})\n  find_library(RTMP_LIB rtmp)\n  MESSAGE(\"RTMP_LIB=${RTMP_LIB}\")\n  target_link_libraries (${CMAKE_PROJECT_NAME} ${RTMP_LIB}) \nendif()\n\n# compiler specific\nif (WIN32)\n    # overide compilation flags\n    set(CompilerFlags CMAKE_CXX_FLAGS_DEBUG CMAKE_C_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE CMAKE_C_FLAGS_RELEASE)\n    foreach(CompilerFlag ${CompilerFlags})\n      string(REPLACE \"/MD\" \"/MT\" ${CompilerFlag} \"${${CompilerFlag}}\")\n    endforeach()\n\n    # getopt\n    add_library (getopt getopt/getopt.c)\n    target_include_directories(getopt PUBLIC getopt) \n    target_link_libraries (${CMAKE_PROJECT_NAME} getopt)\n\n    # webrtc\n    add_definitions(-DWEBRTC_WIN -EHsc -DNOMINMAX -D__PRETTY_FUNCTION__=__FUNCTION__ -D_HAS_ITERATOR_DEBUGGING=0)\n    add_definitions(-DUSE_X11 -DHAVE_SOUND -D_WINSOCKAPI_)\n    target_link_libraries (${CMAKE_PROJECT_NAME} secur32 dmoguids wmcodecdspuuid strmiids msdmo winmm dxgi d3d11 iphlpapi dwmapi shcore)\nelseif (APPLE)\n    # use lld to link\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fuse-ld=lld -B${WEBRTCROOT}/src/third_party/llvm-build/Release+Asserts/bin\")\n\n    # live555\n    add_definitions(-DNEED_XLOCALE_H=1)\n    # webrtc\n    add_definitions(-DHAVE_SOUND)\n    add_definitions(-DWEBRTC_MAC -DWEBRTC_POSIX -fno-rtti)\n\n    find_library(CORE_FOUNDATION Foundation)\n    find_library(APPLICATION_SERVICES ApplicationServices)\n    find_library(CORE_SERVICES CoreServices)\n    find_library(CORE_AUDIO CoreAudio)\n    find_library(AUDIO_TOOLBOX AudioToolBox)\n    find_library(IO_SURFACE IOSurface)\n    find_library(APP_KIT AppKit)\n    \n    \n    target_link_libraries (${CMAKE_PROJECT_NAME} ${CORE_FOUNDATION} ${APPLICATION_SERVICES} ${CORE_SERVICES}\n                           ${CORE_AUDIO} ${AUDIO_TOOLBOX} ${IO_SURFACE} ${APP_KIT})\nelse()\n    # use lld to link\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fuse-ld=lld -B${WEBRTCROOT}/src/third_party/llvm-build/Release+Asserts/bin\")\n\n    # libv4l2cpp\n    add_definitions(-DHAVE_V4L2)\n    aux_source_directory(libv4l2cpp/src LIBSRC_FILES)\n    include_directories(\"libv4l2cpp/inc\")\n    add_library(libv4l2cpp STATIC ${LIBSRC_FILES})\n    target_link_libraries (${CMAKE_PROJECT_NAME} libv4l2cpp) \n\n    # webrtc\n    add_definitions(-DWEBRTC_POSIX -fno-rtti)\n    if (CMAKE_SYSTEM_PROCESSOR MATCHES \"armv6.*\")\n        add_definitions(-marm -march=armv6 -mfpu=vfp -mfloat-abi=hard)\n    endif()\n    if (EXISTS ${WEBRTCROOT}/src/out/${CMAKE_BUILD_TYPE}/obj/modules/desktop_capture/desktop_capture.ninja)\n        add_definitions(-DUSE_X11)\n        find_package(X11)\n        target_link_libraries(${CMAKE_PROJECT_NAME} ${X11_LIBRARIES} ${X11_Xdamage_LIB} ${X11_Xfixes_LIB} ${X11_Xcomposite_LIB} ${X11_Xrandr_LIB} ${X11_Xtst_LIB})\n    endif()\n    # civetweb\n    target_link_libraries(${CMAKE_PROJECT_NAME} dl)    \n    #alsa\n    if (ALSA_FOUND)\n        add_definitions(-DHAVE_SOUND)\n    endif()\nendif()\n\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n    message(STATUS \"Compiler is Clang CMAKE_LIBRARY_ARCHITECTURE:${CMAKE_LIBRARY_ARCHITECTURE} CMAKE_SYSTEM_PROCESSOR:${CMAKE_SYSTEM_PROCESSOR}\")\n    if(CMAKE_SYSTEM_PROCESSOR MATCHES \"armv.*\")\n      add_definitions(-target arm-linux-gnueabihf)\n    elseif(CMAKE_SYSTEM_PROCESSOR MATCHES \"arm64\")\n      if (NOT APPLE)\n        add_definitions(-target aarch64-linux-gnu)\n      else ()\n        add_definitions(-target aarch64-apple-macos)\n      endif()  \n    endif()\nendif()\n\n# prometheus \ninclude(GenerateExportHeader)\ninclude(GNUInstallDirs)\nset(PROJECT_NAME prometheus-cpp)\nadd_subdirectory(prometheus-cpp/core EXCLUDE_FROM_ALL)\ntarget_link_libraries (${CMAKE_PROJECT_NAME} core)  \ntarget_include_directories(${CMAKE_PROJECT_NAME} PRIVATE prometheus-cpp/core/include)\n\n# live555helper \ninclude_directories(${WEBRTCROOT}/src/third_party/boringssl/src/include)\nadd_subdirectory(live555helper EXCLUDE_FROM_ALL)\ntarget_link_libraries (${CMAKE_PROJECT_NAME} liblive555helper ${WEBRTCOBJS}/third_party/boringssl/${CMAKE_STATIC_LIBRARY_PREFIX}boringssl${CMAKE_STATIC_LIBRARY_SUFFIX}) \nadd_definitions(-DHAVE_LIVE555)\n\n# static link of libatomic on armv6l\nif (CMAKE_SYSTEM_PROCESSOR MATCHES \"armv6.*\")\n    target_link_libraries (${CMAKE_PROJECT_NAME} -Wl,-Bstatic -latomic -Wl,-Bdynamic)\nendif()\n# static link of stdc++ if available\nif (NOT APPLE)\n  include(CheckCXXCompilerFlag)\n  CHECK_CXX_COMPILER_FLAG(\"-static-libgcc\" CXX_SUPPORTS_STATIC_LIBGCC)\n  if (CXX_SUPPORTS_STATIC_LIBGCC) \n    target_link_libraries (${CMAKE_PROJECT_NAME} -static-libgcc)\n  endif()    \n  CHECK_CXX_COMPILER_FLAG(\"-static-libstdc++\" CXX_SUPPORTS_STATIC_LIBSTDCPP)\n  if (CXX_SUPPORTS_STATIC_LIBSTDCPP) \n    target_link_libraries (${CMAKE_PROJECT_NAME} -static-libstdc++)\n  endif()\nendif()\n\n#cpack\ninstall (TARGETS ${CMAKE_PROJECT_NAME} RUNTIME DESTINATION ${CMAKE_PROJECT_NAME})\ninstall (DIRECTORY html DESTINATION ${CMAKE_PROJECT_NAME})\ninstall (FILES config.json DESTINATION ${CMAKE_PROJECT_NAME})\nSET(CPACK_GENERATOR \"TGZ\")\nSET(CPACK_SYSTEM_NAME ${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR}-${CMAKE_BUILD_TYPE})\nSET(CPACK_PACKAGE_CONTACT \"michel.promonet@free.fr\") \nif(PROJECTVERSION)\n    SET(CPACK_PACKAGE_VERSION \"${PROJECTVERSION}\")\nendif()\nINCLUDE(CPack)\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.72265625,
          "content": "# build\nFROM ubuntu:24.04 AS builder\nLABEL maintainer=michel.promonet@free.fr\nARG USERNAME=dev\nARG USERID=10000\nWORKDIR /build/webrtc-streamer\n\nCOPY . .\n\nENV PATH /depot_tools:/build/webrtc/src/third_party/llvm-build/Release+Asserts/bin:$PATH\n\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends ca-certificates wget git python3 python3-pkg-resources g++ autoconf automake libtool xz-utils libpulse-dev libasound2-dev libgtk-3-dev libxtst-dev libssl-dev librtmp-dev cmake make pkg-config p7zip-full sudo \\\n\t&& groupadd --gid $USERID $USERNAME && useradd --uid $USERID --gid $USERNAME -m -s /bin/bash $USERNAME \\\n\t&& echo $USERNAME ALL=\\(root\\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \\\n\t&& chmod 0440 /etc/sudoers.d/$USERNAME \\\n\t&& git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git /depot_tools \\\n\t&& mkdir ../webrtc \\\n\t&& cd ../webrtc \\\n\t&& fetch --nohooks webrtc \\\n\t&& cd ../webrtc-streamer \\\n\t&& cmake -DCMAKE_INSTALL_PREFIX=/app . && make \\\n\t&& make install \\\n\t&& git clean -xfd \\\n\t&& find ../webrtc/src -type d -name .git -exec rm -rf {} \\; || true \\\n\t&& rm -rf ../webrtc/src/out \\\n\t&& apt-get clean && rm -rf /var/lib/apt/lists/ \\\n\t&& chown -R $USERNAME:$USERNAME ../webrtc\n\nUSER $USERNAME\n\n# run\nFROM ubuntu:24.04\nLABEL maintainer=michel.promonet@free.fr\n\nWORKDIR /app/webrtc-streamer\n\nCOPY --from=builder /app/ /app/\n\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends libssl-dev libasound2-dev libgtk-3-0 libxtst6 libsm6 libpulse0 librtmp1 avahi-utils \\\n\t&& useradd -m user -G video,audio \\\n\t&& apt-get clean && rm -rf /var/lib/apt/lists/ \\\n\t&& ./webrtc-streamer -V\n\nUSER user\n\nENTRYPOINT [ \"./webrtc-streamer\" ]\nCMD [ \"-C\", \"config.json\" ]\n"
        },
        {
          "name": "Dockerfile.arm64",
          "type": "blob",
          "size": 1.2744140625,
          "content": "# build\nFROM ubuntu:24.04 AS builder\nLABEL maintainer=michel.promonet@free.fr\n\nWORKDIR /build/webrtc-streamer\n\nCOPY . .\n\nENV PATH /depot_tools:$PATH\n\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends ca-certificates wget git python3 python3-pkg-resources xz-utils cmake make pkg-config gcc-aarch64-linux-gnu g++-aarch64-linux-gnu build-essential \\\n\t&& git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git /depot_tools \\\n\t&& mkdir ../webrtc \\\n\t&& cd ../webrtc \\\n\t&& fetch --nohooks webrtc \\\n\t&& cd ../webrtc-streamer \\\n\t&& cmake -DCMAKE_INSTALL_PREFIX=/app -DCMAKE_SYSTEM_PROCESSOR=arm64 -DCMAKE_SYSTEM_NAME=Linux -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY -DCMAKE_FIND_ROOT_PATH_MODE_PACKAGE=ONLY -DWEBRTCDESKTOPCAPTURE=OFF . && make \\\n\t&& make install \\\n\t&& rm -rf ../webrtc && rm -f *.a && rm -f src/*.o \\\n\t&& apt-get clean && rm -rf /var/lib/apt/lists/\n\n# run\nFROM --platform=arm64 ubuntu:24.04\nLABEL maintainer=michel.promonet@free.fr\n\nWORKDIR /app/webrtc-streamer\n\nCOPY --from=builder /app/ /app/\n\nENTRYPOINT [ \"./webrtc-streamer\" ]\nCMD [ \"-a\", \"-C\", \"config.json\" ]\n"
        },
        {
          "name": "Dockerfile.rpi",
          "type": "blob",
          "size": 1.6396484375,
          "content": "ARG IMAGE=balenalib/raspberry-pi\n\n# build\nFROM ubuntu:24.04 AS builder\nLABEL maintainer=michel.promonet@free.fr\n\nARG ARCH=armv6l\nARG CROSSCOMPILER=https://sourceforge.net/projects/raspberry-pi-cross-compilers/files/Raspberry%20Pi%20GCC%20Cross-Compiler%20Toolchains/Buster/GCC%2010.2.0/Raspberry%20Pi%201%2C%20Zero/cross-gcc-10.2.0-pi_0-1.tar.gz\n\nWORKDIR /build/webrtc-streamer\n\nCOPY . .\n\nENV PATH /depot_tools:$PATH\n\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends ca-certificates build-essential gcc wget git python3 python3-pkg-resources xz-utils cmake make pkg-config \\\n    && wget -qO- ${CROSSCOMPILER} | tar xz -C /build \\\n\t&& export PATH=$(ls -d /build/cross-pi-gcc-*/bin):$PATH \\\n\t&& git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git /depot_tools \\\n\t&& mkdir ../webrtc \\\n\t&& cd ../webrtc \\\n\t&& fetch --nohooks webrtc \\\n\t&& cd ../webrtc-streamer \\\n\t&& cmake -DCMAKE_INSTALL_PREFIX=/app -DCMAKE_SYSTEM_PROCESSOR=${ARCH} -DCMAKE_LIBRARY_ARCHITECTURE=arm-linux-gnueabihf -DCMAKE_SYSTEM_NAME=Linux -DCMAKE_C_COMPILER=arm-linux-gnueabihf-gcc -DCMAKE_CXX_COMPILER=arm-linux-gnueabihf-g++ -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY -DCMAKE_FIND_ROOT_PATH_MODE_PACKAGE=ONLY -DWEBRTCDESKTOPCAPTURE=OFF . && make \\\n\t&& make install \\\n\t&& rm -rf ../webrtc && rm -f *.a && rm -f src/*.o \\\n\t&& apt-get clean && rm -rf /var/lib/apt/lists/\n\n# run\nFROM $IMAGE\nLABEL maintainer=michel.promonet@free.fr\n\nWORKDIR /app/webrtc-streamer\n\nCOPY --from=builder /app/ /app/\n\nENTRYPOINT [ \"./webrtc-streamer\" ]\nCMD [ \"-a\", \"-C\", \"config.json\" ]\n"
        },
        {
          "name": "Dockerfile.windows",
          "type": "blob",
          "size": 2.5390625,
          "content": "# build\nFROM mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore-ltsc2022 AS builder\nLABEL maintainer=michel.promonet@free.fr\nWORKDIR /webrtc-streamer\nCOPY . /webrtc-streamer\n\nSHELL [\"cmd\", \"/S\", \"/C\"]\nENV    DEPOT_TOOLS_WIN_TOOLCHAIN=0 \\\n       CLANG_VERSION=ToT \\\n       PYTHONIOENCODING=UTF-8 \\\n       MSVC_PATH=\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\" \n\n\n# Install Windows 10 SDK\nRUN powershell -c \"Invoke-WebRequest -Uri 'https://go.microsoft.com/fwlink/?linkid=2272610' -OutFile winsdksetup.exe -UseBasicParsing ;\"\nRUN winsdksetup.exe /features OptionId.WindowsDesktopDebuggers /q /norestart\n\n# Install Chocolatey & packages \nRUN powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" && SETX PATH \"%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\" \n\nRUN choco install --no-progress -y 7zip git curl sed\nRUN choco install --no-progress -y cmake --installargs 'ADD_CMAKE_TO_PATH=System'\nRUN choco install --ignoredetectedreboot --no-progress -y visualstudio2022buildtools --package-parameters \"--add Microsoft.VisualStudio.Workload.VCTools --add Microsoft.VisualStudio.Workload.NativeDesktop --add Microsoft.VisualStudio.Component.VC.ATLMFC --includeRecommended --nocache --installPath %MSVC_PATH%\" || IF \"%ERRORLEVEL%\"==\"3010\" EXIT 0\n       \nRUN git config --global core.autocrlf false \\\n       && git config --global core.filemode false \\\n       && git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git C:\\depot_tools \\\n       && SETX PATH \"C:\\depot_tools\\;C:\\webrtc\\src\\third_party\\llvm-build\\Release+Asserts\\bin;C:\\webrtc\\src\\build\\toolchain\\win\\rc\\win;%PATH%\" \\\n       && refreshenv \\\n       && call \"%MSVC_PATH%\\VC\\Auxiliary\\Build\\vcvars64.bat\" \\\n       && set \\\n       && time /t \\\n       && mkdir c:\\webrtc && cd c:\\webrtc \\\n       && fetch webrtc \\\n       && time /t \\\n       && cd C:\\webrtc-streamer \\\n       && cmake -G Ninja -DCMAKE_INSTALL_PREFIX=/app -DCMAKE_C_COMPILER=clang-cl.exe -DCMAKE_CXX_COMPILER=clang-cl.exe -DCMAKE_MAKE_PROGRAM=ninja.bat . \\\n       && time /t \\\n       && ninja \\\n       && ninja install \\\n       && del /f /s /q c:\\webrtc > nul && rmdir /s /q c:\\webrtc \\\n       && time /t\n\nRUN powershell -c \"sleep -Seconds 60\" && time /t\n\n# run\nFROM mcr.microsoft.com/windows/server:ltsc2022\nLABEL maintainer=michel.promonet@free.fr\n\nWORKDIR /app/webrtc-streamer\n\nCOPY --from=builder /app/ /app/\n\nRUN dir /w && set\nRUN webrtc-streamer.exe -V\n\nENTRYPOINT [ \"webrtc-streamer.exe\" ]\nCMD [ \"-a\", \"-C\", \"config.json\" ]\n"
        },
        {
          "name": "Procfile",
          "type": "blob",
          "size": 0.091796875,
          "content": "#\n# configure application to run on Heroku\n#\nweb: ./webrtc-streamer -a -C config.json -N10 -o\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.7509765625,
          "content": "\n# WebRTC-Streamer\n<a href=\"https://wiki.friendlyelec.com/wiki/index.php/NanoPi_NEO_Air\"><img alt=\"A picture of a Nano PI NEO Air\" src=\"images/nanopi.jpg\" width=\"500\"></a>\n\n[![CircleCI](https://img.shields.io/circleci/build/github/mpromonet/webrtc-streamer?label=circleci&logo=circleci)](https://circleci.com/gh/mpromonet/webrtc-streamer)\n[![CirusCI](https://img.shields.io/cirrus/github/mpromonet/webrtc-streamer?label=cirrusci&logo=cirrusci)](https://cirrus-ci.com/github/mpromonet/webrtc-streamer)\n[![Snap Status](https://snapcraft.io//webrtc-streamer/badge.svg)](https://snapcraft.io/webrtc-streamer)\n\n[![GithubCI](https://img.shields.io/github/actions/workflow/status/mpromonet/webrtc-streamer/cpp-linux.yml?label=C%2FC%2B%2B%20ci%20linux&logo=github)](https://github.com/mpromonet/webrtc-streamer/actions/workflows/cpp-linux.yml)\n[![GithubCI](https://img.shields.io/github/actions/workflow/status/mpromonet/webrtc-streamer/cpp-windows.yml?label=C%2FC%2B%2B%20ci%20windows&logo=github)](https://github.com/mpromonet/webrtc-streamer/actions/workflows/cpp-windows.yml)\n[![GithubCI](https://img.shields.io/github/actions/workflow/status/mpromonet/webrtc-streamer/cpp-macos.yml?label=C%2FC%2B%2B%20ci%20macos&logo=github)](https://github.com/mpromonet/webrtc-streamer/actions/workflows/cpp-macos.yml)\n\n[![Release](https://img.shields.io/github/release/mpromonet/webrtc-streamer.svg)](https://github.com/mpromonet/webrtc-streamer/releases/latest)\n[![Download](https://img.shields.io/github/downloads/mpromonet/webrtc-streamer/total.svg)](https://github.com/mpromonet/webrtc-streamer/releases/latest)\n[![Docker Pulls](https://img.shields.io/docker/pulls/mpromonet/webrtc-streamer.svg)](https://hub.docker.com/r/mpromonet/webrtc-streamer/)\n\n[![Demo](https://img.shields.io/badge/azure-livedemo-green)](https://webrtcstreamer.agreeabletree-365b9a90.canadacentral.azurecontainerapps.io/)\n[![Gitpod ready-to-code](https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod)](https://gitpod.io/#https://github.com/mpromonet/webrtc-streamer)\n\nExperimentation to stream WebRTC media sources like capture devices, screen capture, mkv files and RMTP/RTSP sources using simple signaling mechanism (see [api](docs/api.md)). It is also compatible with [WHEP](https://datatracker.ietf.org/doc/html/draft-ietf-wish-whep-01) interface.\n\n## Artefacts\n\n* packages are available from https://github.com/mpromonet/webrtc-streamer/releases/latest\n* container image are available from  https://hub.docker.com/r/mpromonet/webrtc-streamer\n\n\n## Usage\n\n```roff\n./webrtc-streamer [-H http port] [-S[embeded stun address]] -[v[v]]  [urls...]\n./webrtc-streamer [-H http port] [-s[external stun address]] -[v[v]] [urls...]\n./webrtc-streamer -V\n\t-v[v[v]]           : verbosity\n\t-V                 : print version\n\t-C config.json                     : load urls from JSON config file \n\t-n name -u videourl -U audiourl    : register a name for a video url and an audio url\n\t[url]                              : url to register in the source list\n\n\t-H [hostname:]port : HTTP server binding (default 0.0.0.0:8000)\n\t-w webroot         : path to get files\n\t-c sslkeycert      : path to private key and certificate for HTTPS\n\t-N nbthreads       : number of threads for HTTP server\n\t-A passwd          : password file for HTTP server access\n\t-D authDomain      : authentication domain for HTTP server access (default:mydomain.com)\n\n\t-S[stun_address]                   : start embeded STUN server bind to address (default 0.0.0.0:3478)\n\t-s[stun_address]                   : use an external STUN server (default:stun.l.google.com:19302 , -:means no STUN)\n\t-T[username:password@]turn_address : start embeded TURN server (default:disabled)\n\t-t[username:password@]turn_address : use an external TURN relay server (default:disabled)\n\t-R [Udp port range min:max]        : Set the webrtc udp port range (default 0:65535)\n\t-W webrtc_trials_fields            : Set the webrtc trials fields (default:WebRTC-FrameDropper/Disabled/)\t\t\n\t-a[audio layer]                    : spefify audio capture layer to use (default:0)\t\t\n\t-q[filter]                         : spefify publish filter (default:.*)\n\t-o                                 : use null codec (keep frame encoded)\n```\n\nArguments of '-H' are forwarded to option\n[`listening_ports`](https://github.com/civetweb/civetweb/blob/master/docs/UserManual.md#listening_ports-8080)\nof civetweb, allowing use of the civetweb syntax like `-H8000,9000` or\n`-H8080r,8443s`.\n\nUsing `-o` allows storing compressed frame data from the backend stream using\n`webrtc::VideoFrameBuffer::Type::kNative`. This hacks the stucture\n`webrtc::VideoFrameBuffer` storing data in a override of the i420 buffer. This\nallows forwarding H264 frames from V4L2 device or RTSP stream to WebRTC stream.\nIt uses less CPU, but has less features (resize, codec, and bandwidth are\ndisabled).\n\nOptions for the WebRTC stream name:\n\n- an alias defined using `-n` argument then the corresponding `-u` argument will\n  be used to create the capturer\n- an \"rtsp://\" url that will be opened using an RTSP capturer based on live555\n- an \"file://\" url that will be opened using an MKV capturer based on live555\n- an \"rmtp://\" url that will be opened using an RMTP capturer based on librmtp\n- an \"screen://\" url that will be opened by\n  `webrtc::DesktopCapturer::CreateScreenCapturer`\n- an \"window://\" url that will be opened by\n  `webrtc::DesktopCapturer::CreateWindowCapturer`\n- an \"v4l2://\" url that will capture\n  [H264](https://en.wikipedia.org/wiki/Advanced_Video_Coding) frames and store\n  it using webrtc::VideoFrameBuffer::Type::kNative type (not supported on\n  Windows)\n- an \"videocap://\" url video capture device name\n- an \"audiocap://\" url audio capture device name\n\n#### Examples\n\n```sh\n./webrtc-streamer -C config.json\n```\n\n[![Screenshot](images/snapshot.png)](https://webrtcstreamer.agreeabletree-365b9a90.canadacentral.azurecontainerapps.io/)\n\n[Live Demo](https://webrtcstreamer.agreeabletree-365b9a90.canadacentral.azurecontainerapps.io/)\n\nWe can access to the WebRTC stream using\n[webrtcstreamer.html](https://github.com/mpromonet/webrtc-streamer-html/blob/master/webrtcstreamer.html).\nFor instance:\n\n- [webrtcstreamer.html?rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mov](https://webrtcstreamer.agreeabletree-365b9a90.canadacentral.azurecontainerapps.io/webrtcstreamer.html?rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mov)\n- [webrtcstreamer.html?Bunny](https://webrtcstreamer.agreeabletree-365b9a90.canadacentral.azurecontainerapps.io/webrtcstreamer.html?Bunny)\n\nAn example displaying grid of WebRTC Streams is available using option\n`layout=<lines>x<columns>`\n[![Screenshot](images/layout2x4.png)](https://webrtcstreamer.agreeabletree-365b9a90.canadacentral.azurecontainerapps.io/?layout=2x4)\n\n[Live Demo](https://webrtcstreamer.agreeabletree-365b9a90.canadacentral.azurecontainerapps.io/?layout=2x4)\n\n## Using docker image\n\nYou can start the application using the docker image:\n\n```sh\ndocker run -p 8000:8000 -it mpromonet/webrtc-streamer\n```\n\nYou can expose V4L2 devices from your host using:\n\n```sh\ndocker run --device=/dev/video0 -p 8000:8000 -it mpromonet/webrtc-streamer\n```\n\nThe container entry point is the webrtc-streamer application, then you can:\n\n- view all commands\n  ```sh\n  docker run -p 8000:8000 -it mpromonet/webrtc-streamer --help\n  ```\n- run the container registering a RTSP url:\n\n  ```sh\n  docker run -p 8000:8000 -it mpromonet/webrtc-streamer -n raspicam -u rtsp://pi2.local:8554/unicast\n  ```\n- run the container giving config.json file:\n\n  ```sh\n  docker run -p 8000:8000 -v $PWD/config.json:/app/config.json mpromonet/webrtc-streamer\n  ```\n\n## Using embedded STUN/TURN server behind a NAT\n\nIt is possible to start an embeded [STUN](https://en.wikipedia.org/wiki/STUN)\nand [TURN](https://en.wikipedia.org/wiki/Traversal_Using_Relays_around_NAT)\nserver and publish its URL:\n\n```sh\n./webrtc-streamer -S0.0.0.0:3478 -s$(curl -s ifconfig.me):3478\n./webrtc-streamer -s- -T0.0.0.0:3478 -tturn:turn@$(curl -s ifconfig.me):3478\n./webrtc-streamer -S0.0.0.0:3478 -s$(curl -s ifconfig.me):3478 -T0.0.0.0:3479 -tturn:turn@$(curl -s ifconfig.me):3479\n```\n\nThe command `curl -s ifconfig.me` is getting the public IP, it could also given\nas a static parameter.\n\nIn order to configure the NAT rules using the upnp feature of the router, it is\npossible to use\n[upnpc](https://manpages.debian.org/unstable/miniupnpc/upnpc.1.en.html) like\nthis:\n\n```sh\nupnpc -r 8000 tcp 3478 tcp 3478 udp\n```\n\nAdapting with the HTTP port, STUN port, TURN port.\n\n## HTML Embedding\n\nInstead of using the internal HTTP server, it is easy to display a WebRTC stream\nin a HTML page served by another HTTP server. The URL of the WebRTC-streamer to\nuse should be given creating the\n[WebRtcStreamer](http://htmlpreview.github.io/?https://github.com/mpromonet/webrtc-streamer-html/blob/master/jsdoc/WebRtcStreamer.html)\ninstance:\n\n```js\nvar webRtcServer = new WebRtcStreamer(<video tag>, <webrtc-streamer url>);\n```\n\nA short sample HTML page using webrtc-streamer running locally on port 8000:\n\n```html\n<html>\n<head>\n<script src=\"libs/adapter.min.js\" ></script>\n<script src=\"webrtcstreamer.js\" ></script>\n<script>        \n\tvar webRtcServer      = null;\n\twindow.onload         = function() { \n\t\twebRtcServer      = new WebRtcStreamer(\"video\",location.protocol+\"//\"+location.hostname+\":8000\");\n\t\twebRtcServer.connect(\"rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mov\");\n\t}\n\twindow.onbeforeunload = function() { webRtcServer.disconnect(); }\n</script>\n</head>\n<body> \n\t<video id=\"video\" />\n</body>\n</html>\n```\n\n## Using WebComponents\n\nWebRTC-streamer provides its own\n[Web Components](https://www.webcomponents.org/) as an alternative way to\ndisplay a WebRTC stream in an HTML page. For example:\n\n```html\n<html>\n<head>\n\t<script type=\"module\" src=\"webrtc-streamer-element.js\"></script>\n</head>\n<body>\n\t<webrtc-streamer url=\"rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mov\"></webrtc-streamer>\n</body>\n</html>\n```\n\n[Live Demo](https://webrtcstreamer.agreeabletree-365b9a90.canadacentral.azurecontainerapps.io/Bunny.html)\n\nUsing the webcomponent with a stream selector:\n\n[![Screenshot](images/wc-selector.jpg)](https://webrtcstreamer.agreeabletree-365b9a90.canadacentral.azurecontainerapps.io/webrtc-streamer-element.html)\n\n[Live Demo](https://webrtcstreamer.agreeabletree-365b9a90.canadacentral.azurecontainerapps.io/webrtc-streamer-element.html)\n\nUsing the webcomponent over google map:\n\n[![Screenshot](images/wc-map.jpg)](https://webrtcstreamer.agreeabletree-365b9a90.canadacentral.azurecontainerapps.io/map.html)\n\n[Live Demo](https://webrtcstreamer.agreeabletree-365b9a90.canadacentral.azurecontainerapps.io/map.html)\n\n## Using WHEP\n\nIt allow to stream using draft standard [WHEP](https://datatracker.ietf.org/doc/html/draft-ietf-wish-whep-01)\n\n[WebRTC player](https://github.com/Eyevinn/webrtc-player) can display WebRTC stream from webrtc-streamer.\n\nA minimal example:\n```html\n<html>\n<head>\n    <script src=\"https://unpkg.com/@eyevinn/whep-video-component@latest/dist/whep-video.component.js\"></script>\n</head>\n<body>\n    <whep-video id=\"video\" muted autoplay></whep-video>\n    <script>\n        video.setAttribute('src', `${location.origin}/api/whep?url=Asahi&options=rtptransport%3dtcp%26timeout%3d60`);\n    </script>\n</body>\n</html>\n```\n[Live Demo](https://webrtc-streamer-whep.pages.dev/)\n\n\n## Object detection using tensorflow.js\n\n[![Screenshot](images/tensorflow.jpg)](https://webrtcstreamer.agreeabletree-365b9a90.canadacentral.azurecontainerapps.io/tensorflow.html)\n\n[Live Demo](https://webrtcstreamer.agreeabletree-365b9a90.canadacentral.azurecontainerapps.io/tensorflow.html)\n\n## Connect to Janus Gateway Video Room\n\nA simple way to publish WebRTC stream to a\n[Janus Gateway](https://janus.conf.meetecho.com) Video Room is to use the\n[JanusVideoRoom](http://htmlpreview.github.io/?https://github.com/mpromonet/webrtc-streamer-html/blob/master/jsdoc/JanusVideoRoom.html)\ninterface\n\n```js\nvar janus = new JanusVideoRoom(<janus url>, <webrtc-streamer url>)\n```\n\nA short sample to publish WebRTC streams to Janus Video Room could be:\n\n```html\n<html>\n<head>\n<script src=\"janusvideoroom.js\" ></script>\n<script>        \n\tvar janus = new JanusVideoRoom(\"https://janus.conf.meetecho.com/janus\", null);\n\tjanus.join(1234, \"rtsp://pi2.local:8554/unicast\",\"pi2\");\n\tjanus.join(1234, \"rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mov\",\"media\");\t    \n</script>\n</head>\n</html>\n```\n\n[![Screenshot](images/janusvideoroom.png)](https://webrtcstreamer.agreeabletree-365b9a90.canadacentral.azurecontainerapps.io/janusvideoroom.html)\n\n[Live Demo](https://webrtcstreamer.agreeabletree-365b9a90.canadacentral.azurecontainerapps.io/janusvideoroom.html)\n\nThis way the communication between\n[Janus API](https://janus.conf.meetecho.com/docs/JS.html) and\n[WebRTC Streamer API](https://webrtcstreamer.agreeabletree-365b9a90.canadacentral.azurecontainerapps.io/help)\nis implemented in Javascript running in browser.\n\nThe same logic could be implemented in NodeJS using the same JS API:\n\n```js\nglobal.request = require(\"then-request\");\nvar JanusVideoRoom = require(\"./html/janusvideoroom.js\");\nvar janus = new JanusVideoRoom(\n  \"http://192.168.0.15:8088/janus\",\n  \"http://192.168.0.15:8000\",\n);\njanus.join(1234, \"videocap://0\", \"video\");\n```\n\n## Connect to Jitsi\n\nA simple way to publish WebRTC stream to a [Jitsi](https://meet.jit.si) Video\nRoom is to use the\n[XMPPVideoRoom](http://htmlpreview.github.io/?https://github.com/mpromonet/webrtc-streamer-html/blob/master/jsdoc/XMPPVideoRoom.html)\ninterface\n\n```js\nvar xmpp = new XMPPVideoRoom(<xmpp server url>, <webrtc-streamer url>)\n```\n\nA short sample to publish WebRTC streams to a Jitsi Video Room could be:\n\n```html\n<html>\n<head>\n<script src=\"libs/strophe.min.js\" ></script>\n<script src=\"libs/strophe.muc.min.js\" ></script>\n<script src=\"libs/strophe.disco.min.js\" ></script>\n<script src=\"libs/strophe.jingle.sdp.js\"></script>\n<script src=\"libs/jquery-3.5.1.min.js\"></script>\n<script src=\"xmppvideoroom.js\" ></script>\n<script>        \n\tvar xmpp = new XMPPVideoRoom(\"meet.jit.si\", null);\n\txmpp.join(\"testroom\", \"rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mov\",\"Bunny\");\t    \n</script>\n</head>\n</html>\n```\n\n[Live Demo](https://webrtcstreamer.agreeabletree-365b9a90.canadacentral.azurecontainerapps.io/xmppvideoroom.html)\n\n## Dependencies\n\nThis package depends on the following packages:\n\n- [WebRTC Native Code Package](http://www.webrtc.org) for WebRTC (see license https://webrtc.github.io/webrtc-org/license)\n- [civetweb HTTP server](https://github.com/civetweb/civetweb) for HTTP server (see license https://github.com/civetweb/civetweb/blob/master/LICENSE.md)\n- [live555](http://www.live555.com/liveMedia) for RTSP/MKV source (see license http://www.live555.com/liveMedia/faq.html#copyright-and-license)\n\n## Build\n\nThe following steps are required to build the project, and will install the\ndependencies above:\n\n1. Install the Chromium depot tools\n\n   ```sh\n   pushd ..\n   git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git\n   export PATH=$PATH:`realpath depot_tools`\n   popd\n   ```\n2. Download WebRTC\n\n   ```sh\n   mkdir ../webrtc\n   pushd ../webrtc\n   fetch webrtc \n   popd\n   ```\n\n3. Build WebRTC Streamer\n\n   ```sh\n   cmake . && make\n   ```\n\nIt is possible to specify cmake parameters `WEBRTCROOT` &\n`WEBRTCDESKTOPCAPTURE`:\n\n- `$WEBRTCROOT/src` should contains source (default is $(pwd)/../webrtc)\n- `WEBRTCDESKTOPCAPTURE` enabling desktop capture if available (default is ON)\n\n\n## Pipelines\n\nThere is pipelines on [CircleCI](https://circleci.com/gh/mpromonet/webrtc-streamer),\n[CirrusCI](https://cirrus-ci.com/github/mpromonet/webrtc-streamer), or\n[GitHub CI](https://github.com/mpromonet/webrtc-streamer/actions), for the\nfollowing architectures:\n\n- x86_64 on Ubuntu\n- armv7 crosscompiled (this build is running on Raspberry Pi2 and NanoPi NEO)\n- armv6+vfp crosscompiled (this build is running on Raspberry PiB and should run\n  on a Raspberry Zero)\n- arm64 crosscompiled\n- Windows x64 build with clang\n- MacOS\n"
        },
        {
          "name": "UNLICENSE",
          "type": "blob",
          "size": 1.1826171875,
          "content": "This is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <https://unlicense.org>\n"
        },
        {
          "name": "cad",
          "type": "tree",
          "content": null
        },
        {
          "name": "civetweb",
          "type": "commit",
          "content": null
        },
        {
          "name": "config.json",
          "type": "blob",
          "size": 1.8056640625,
          "content": "{\n    \"urls\":{       \n\n        \"PriceCenterPlaza\" : { \"video\": \"rtsp://132.239.12.145/axis-media/media.amp\"},\n        \"Waterford\" : { \"video\": \"rtsp://86.44.41.160/axis-media/media.amp\", \"position\":\"52.258330,-7.111940\"},\n        \"Bayonne\" : { \"video\": \"rtsp://193.142.128.20/axis-media/media.amp\", \"position\":\"43.483330,-1.483330\"},\n        \"Asahi\" : { \"video\": \"rtsp://211.132.61.124/axis-media/media.amp\", \"position\":\"35.717000,140.650000\"},\n                \n        \"VyhladJazero\": {\"video\": \"rtsp://stream.strba.sk:1935/strba/VYHLAD_JAZERO.stream\"}, \n\n        \"Zeeland\": { \"video\": \"rtsp://213.34.225.97/axis-media/media.amp\", \"position\":\"51.5,3.613890\"},\n        \"Vancouver\": { \"video\": \"rtsp://174.6.126.86/axis-media/media.amp\", \"position\":\"49.249660,-123.119340\"},\n\n        \"Bedford Hills\": {\"video\": \"rtsp://73.114.177.111/axis-media/media.amp\"},\n        \"Pocapaglia\": {\"video\": \"rtsp://176.65.94.105/axis-media/media.amp\"},\n\n        \"Great Falls\": {\"video\": \"rtsp://76.75.8.116/axis-media/media.amp\", \"position\":\"47.551039,-111.539400\"},\n        \"Western Cape\": {\"video\":\"rtsp://196.21.92.82/axis-media/media.amp\", \"position\":\"-33.925840,18.423220\"},\n        \"Mendoza\": {\"video\":\"rtsp://190.113.172.8/\", \"position\":\"-32.890840,-68.827170\"},\n        \"Nordland\": {\"video\":\"rtsp://77.110.228.219/axis-media/media.amp\", \"position\":\"67.280000,14.405010\" },\n\n        \"Allendale\": {\"video\":\"rtsp://71.83.5.156/axis-media/media.amp?videocodec=h265\", \"position\":\"42.972250,-85.953650\" },\n        \n        \"Vaison-La-Romaine\": {\"video\":\"rtsp://176.139.87.16/axis-media/media.amp\", \"position\":\"44.238960,5.074610\" },\n\n        \"BigSky\": {\"video\":\"rtsp://76.75.8.120/axis-media/media.amp\", \"position\":\"45.284650,-111.368290\"},\n        \"Orlando\": {\"video\":\"rtsp://97.68.104.34/axis-media/media.amp\", \"position\":\"28.538340,-81.379240\"}\n        \n    }\n}\n"
        },
        {
          "name": "deploy.yaml",
          "type": "blob",
          "size": 0.935546875,
          "content": "apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  labels:\n    app: webrtc-streamer\n  name: webrtc-streamer\nspec:\n  selector:\n    matchLabels:\n      app: webrtc-streamer\n  template:\n    metadata:\n      labels:\n        app: webrtc-streamer\n    spec:\n      hostNetwork: true\n      containers:\n      - image: mpromonet/webrtc-streamer\n        args: [\"-o\",\"-C\",\"config.json\"]\n        name: webrtc-streamer\n        ports:\n        - name: web\n          containerPort: 8000\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: webrtc-streamer\n  annotations:\n    traefik.ingress.kubernetes.io/affinity: \"true\"\nspec:\n  selector:\n    app: webrtc-streamer\n  ports:\n    - name: web\n      port: 8000\n---\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  labels:\n    app: webrtc-streamer\n  name: webrtc-streamer\nspec:\n  rules:\n    - http:\n        paths:\n          - path: /\n            backend:\n              serviceName: webrtc-streamer\n              servicePort: 8000\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.87890625,
          "content": "version: '3'\n\nvolumes:\n    prometheus_data: {}\n    grafana_data: {}\n\nservices:\n  webrtc-streamer:\n    image: mpromonet/webrtc-streamer:latest\n    command: [\"-C\", \"config.json\"]\n    ports:\n      - 8000:8000\n\n  prometheus:\n    image: prom/prometheus\n    volumes:\n      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml\n      - prometheus_data:/prometheus\n    command:\n      - '--config.file=/etc/prometheus/prometheus.yml'\n      - '--storage.tsdb.path=/prometheus'\n    ports:\n      - 9090:9090\n\n  grafana:\n    image: grafana/grafana\n    user: \"472\"\n    depends_on:\n      - prometheus\n    ports:\n      - 3000:3000\n    volumes:\n      - grafana_data:/var/lib/grafana\n      - ./grafana/grafana.ini:/etc/grafana/grafana.ini\n      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources     \n      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards       \n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "getopt",
          "type": "commit",
          "content": null
        },
        {
          "name": "grafana",
          "type": "tree",
          "content": null
        },
        {
          "name": "html",
          "type": "commit",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "inc",
          "type": "tree",
          "content": null
        },
        {
          "name": "joinjanusvideoroom.js",
          "type": "blob",
          "size": 0.818359375,
          "content": "#!/usr/bin/env node\n/*\n* NodeJS example to send a webrtc-streamer stream to janus-gateway\n*/\n\n// decode arguments\nif (process.argv.length < 4) {\n    console.log(\"Usage: \" + __filename + \" <webrtc-streamer url> <videourl> <janus url> <janus room>\");\n    process.exit(-1);\n}\nvar webrtcstreamerurl = process.argv[2];\nconsole.log(\"webrtcstreamerurl: \" + webrtcstreamerurl);\nvar videourl = process.argv[3];\nconsole.log(\"videourl: \" + videourl);\nvar janusRoomUrl = process.argv[4];\nconsole.log(\"janusRoomUrl: \" + janusRoomUrl);\nvar roomId = 1234\nif (process.argv.length >= 5) {\n\troomId = process.argv[5];\n}\nconsole.log(\"roomId: \" + roomId);\n\nglobal.fetch = require(\"node-fetch\");\nvar JanusVideoRoom = require(\"./html/janusvideoroom.js\"); \nvar janus = new JanusVideoRoom(janusRoomUrl, webrtcstreamerurl);\n\njanus.join(roomId,videourl,\"video\");\n\n\n"
        },
        {
          "name": "joinxmpproom.js",
          "type": "blob",
          "size": 1.6064453125,
          "content": "#!/usr/bin/env node\n/*\n* NodeJS example to send a webrtc-streamer stream to jitsi\n*/\nprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = \"0\";\n// decode arguments\nif (process.argv.length <= 4) {\n    console.log(\"Usage: \" + __filename + \" <webrtc-streamer url> <videourl> <xmpp url> <xmpp room>\");\n    process.exit(-1);\n}\nvar webrtcstreamerurl = process.argv[2];\nconsole.log(\"webrtcstreamerurl: \" + webrtcstreamerurl);\nvar videourl = process.argv[3];\nconsole.log(\"videourl: \" + videourl);\nvar xmppRoomUrl = process.argv[4];\nconsole.log(\"xmppRoomUrl: \" + xmppRoomUrl);\nvar xmppRoomId = \"testroom\"\nif (process.argv.length >= 5) {\n\txmppRoomId = process.argv[5];\n}\nconsole.log(\"xmppRoomId: \" + xmppRoomId);\n\nvar jsdom = require(\"jsdom\");\nconst { JSDOM } = jsdom;\nconst { window } = new JSDOM(\"\");\n\nglobal.jquery = require(\"jquery\")(window);\nglobal.$ = (selector,context) => {return new jquery.fn.init(selector,context); };\n\nglobal.window = window;\nglobal.document = window.document;\nglobal.DOMParser = window.document.DOMParser;\nglobal.XMLHttpRequest = window.XMLHttpRequest;\n\nvar strophe = require(\"strophe.js\");\nglobal.Strophe = strophe.Strophe;\nglobal.$iq = strophe.$iq;\n//global.Strophe.log = console.log;\n\nrequire(\"strophejs-plugin-disco\");\nrequire(\"strophejs-plugin-muc\"); \n\nglobal.SDP = require(\"strophe.jingle/strophe.jingle.sdp.js\");\n\nglobal.fetch = require(\"node-fetch\");\nvar XMPPVideoRoom = require(\"./html/xmppvideoroom.js\"); \n\n\t\t\t\nvar xmpp = new XMPPVideoRoom(xmppRoomUrl, webrtcstreamerurl);\nvar username = \"user\"+Math.random().toString(36).slice(2);\nconsole.log(\"join \" + xmppRoomId + \"/\" + username);\n\nxmpp.join(xmppRoomId,videourl,username);\n\n"
        },
        {
          "name": "libv4l2cpp",
          "type": "commit",
          "content": null
        },
        {
          "name": "live555helper",
          "type": "commit",
          "content": null
        },
        {
          "name": "manifest.yml",
          "type": "blob",
          "size": 0.103515625,
          "content": "---\napplications:\n- name: webrtc-streamer\n  buildpack: binary_buildpack\n  memory: 256M\n  disk_quota: 128M\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.53125,
          "content": "{\n  \"name\": \"webrtc-streamer\",\n  \"version\": \"0.0.0\",\n  \"description\": \"\",\n  \"main\": \"joinjanusvideoroom.js\",\n  \"dependencies\": {\n    \"jquery\": \"^3.3.1\",\n    \"jsdom\": \"^16.2.2\",\n    \"node-fetch\": \"^2.6.1\",\n    \"strophe.jingle\": \"0.0.9\",\n    \"strophe.js\": \"^1.2.15\",\n    \"strophejs-plugin-caps\": \"^1.1.0\",\n    \"strophejs-plugin-disco\": \"0.0.2\",\n    \"strophejs-plugin-muc\": \"^1.1.0\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mpromonet/webrtc-streamer/\"\n  },\n  \"author\": \"Michel Promonet\",\n  \"license\": \"Unlicense\"\n}\n"
        },
        {
          "name": "prometheus-cpp",
          "type": "commit",
          "content": null
        },
        {
          "name": "prometheus",
          "type": "tree",
          "content": null
        },
        {
          "name": "snap",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}