{
  "metadata": {
    "timestamp": 1736565719453,
    "page": 629,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "FEX-Emu/FEX",
      "stars": 2428,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 3.1875,
          "content": "Language: Cpp\nBasedOnStyle: WebKit\nAccessModifierOffset: -2\nAlignAfterOpenBracket: Align\nAlignArrayOfStructures: None\nAlignConsecutiveAssignments: None\nAlignConsecutiveBitFields: Consecutive\nAlignConsecutiveDeclarations: None\nAlignConsecutiveMacros: None\nAlignEscapedNewlines: Left\nAlignOperands: Align\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortCaseLabelsOnASingleLine: true\nAllowShortEnumsOnASingleLine: true\nAllowShortFunctionsOnASingleLine: Empty\nAllowShortIfStatementsOnASingleLine: WithoutElse\nAllowShortLambdasOnASingleLine: Inline\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: true\nAttributeMacros:\n  - JEMALLOC_NOTHROW\n  - FEX_ALIGNED\n  - FEX_ANNOTATE\n  - FEX_DEFAULT_VISIBILITY\n  - FEX_NAKED\n  - FEX_PACKED\n  - FEXCORE_PRESERVE_ALL_ATTR\n  - GLIBC_ALIAS_FUNCTION\nBinPackArguments: true\nBinPackParameters: true\nBitFieldColonSpacing: Both\nBreakAfterAttributes: Always # clang 16 required\nBreakBeforeBraces: Attach\nBreakBeforeBinaryOperators: None\nBreakBeforeInlineASMColon: OnlyMultiline # clang 16 required\nBreakBeforeTernaryOperators: false\nBreakConstructorInitializers: BeforeComma\nBreakInheritanceList: BeforeColon\nColumnLimit: 140\nCompactNamespaces: false\nConstructorInitializerIndentWidth: 2\nContinuationIndentWidth: 2\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nEmptyLineAfterAccessModifier: Leave\nEmptyLineBeforeAccessModifier: Leave\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nIncludeBlocks: Preserve\nIndentAccessModifiers: false\nIndentCaseBlocks: false\nIndentCaseLabels: false\nIndentExternBlock: AfterExternBlock\nIndentGotoLabels: false\nIndentPPDirectives: None\nIndentRequires: false\nIndentWidth: 2\nInsertBraces: true\nKeepEmptyLinesAtTheStartOfBlocks: true\nLambdaBodyIndentation: OuterScope\nLineEnding: LF # clang 16 required\nMaxEmptyLinesToKeep: 2\nNamespaceIndentation: Inner\nQualifierAlignment: Left\nPackConstructorInitializers: Never\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 2\nPenaltyBreakOpenParenthesis: 2\nPenaltyBreakString: 10\nPenaltyBreakTemplateDeclaration: 8\nPenaltyExcessCharacter: 2\nPenaltyReturnTypeOnItsOwnLine: 16\nPointerAlignment: Left\nRemoveBracesLLVM: false\nReferenceAlignment: Left\nReflowComments: true\nRequiresClausePosition: WithPreceding\nSeparateDefinitionBlocks: Leave\nSortIncludes: Never\nSpaceAfterCStyleCast: false\nSpaceAfterLogicalNot: false\nSpaceAfterTemplateKeyword: false\nSpaceAroundPointerQualifiers: Default\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCaseColon: false\nSpaceBeforeCpp11BracedList: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: Custom\nSpaceBeforeParensOptions:\n  AfterControlStatements: true\n  AfterFunctionDeclarationName: false\n  AfterFunctionDefinitionName: false\n  AfterOverloadedOperator: false\n  AfterRequiresInClause: true\n  BeforeNonEmptyParentheses: false\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceBeforeSquareBrackets: false\nSpaceInEmptyBlock: false\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles: Leave\nSpacesInCStyleCastParentheses: false\nSpacesInConditionalStatement: false\nSpacesInParentheses: false\nStandard: c++20\nUseTab: Never\n"
        },
        {
          "name": ".clang-format-ignore",
          "type": "blob",
          "size": 0.3466796875,
          "content": "# This file is used to ignore files and directories from clang-format\n\n# Ignore all files in the External directory\nExternal/*\n\n# SoftFloat-3e code doesn't belong to us \nFEXCore/Source/Common/SoftFloat-3e/*\nSource/Common/cpp-optparse/*\n\n# Files with human-indented tables for readability - don't mess with these\nFEXCore/Source/Interface/Core/X86Tables/*\n\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.552734375,
          "content": "# Since version 2.23 (released in August 2019), git-blame has a feature\n# to ignore or bypass certain commits.\n#\n# This file contains a list of commits that are not likely what you\n# are looking for in a blame, such as mass reformatting or renaming.\n# You can set this file as a default ignore file for blame by running\n# the following command.\n#\n# $ git config blame.ignoreRevsFile .git-blame-ignore-revs\n\n# Whole tree reformat PR#3571\n2b4ec88daebd35fefb5bf5c73d7fc2b4155771ed\n\n# Second reformat to find fixed point PR#3577\n905aa935f5ce344a48ef4d5edab3c31efa8d793e\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1015625,
          "content": "# Existing\n\ncompile_commands.json\nvim_rc\nConfig.json\n\n[Bb]uild*\n[Bb]in/\nout/\n.vscode/\n.vs/\n*.pyc\n.cache\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 1.68359375,
          "content": "[submodule \"External/vixl\"]\n\tshallow = true\n\tpath = External/vixl\n\turl = https://github.com/FEX-Emu/vixl.git\n[submodule \"External/cpp-optparse\"]\n\tpath = Source/Common/cpp-optparse\n\turl = https://github.com/Sonicadvance1/cpp-optparse\n[submodule \"External/xbyak\"]\n  shallow = true\n\tpath = External/xbyak\n\turl = https://github.com/herumi/xbyak.git\n[submodule \"External/fex-posixtest-bins\"]\n  shallow = true\n\tpath = External/fex-posixtest-bins\n\turl = https://github.com/FEX-Emu/fex-posixtest-bins.git\n[submodule \"External/fex-gvisor-tests-bins\"]\n  shallow = true\n\tpath = External/fex-gvisor-tests-bins\n\turl = https://github.com/FEX-Emu/fex-gvisor-tests-bins.git\n[submodule \"External/fex-gcc-target-tests-bins\"]\n  shallow = true\n\tpath = External/fex-gcc-target-tests-bins\n\turl = https://github.com/FEX-Emu/fex-gcc-target-tests-bins.git\n[submodule \"External/jemalloc\"]\n\tpath = External/jemalloc\n\turl = https://github.com/FEX-Emu/jemalloc.git\n[submodule \"External/fmt\"]\n\tpath = External/fmt\n\turl = https://github.com/fmtlib/fmt.git\n[submodule \"External/drm-headers\"]\n\tpath = External/drm-headers\n\turl = https://github.com/FEX-Emu/drm-headers.git\n[submodule \"External/xxhash\"]\n\tpath = External/xxhash\n\turl = https://github.com/Cyan4973/xxHash.git\n[submodule \"External/Catch2\"]\n\tpath = External/Catch2\n\turl = https://github.com/catchorg/Catch2.git\n[submodule \"External/robin-map\"]\n\tshallow = true\n\tpath = External/robin-map\n\turl = https://github.com/FEX-Emu/robin-map.git\n[submodule \"External/Vulkan-Headers\"]\n\tshallow = true\n\tpath = External/Vulkan-Headers\n\turl = https://github.com/KhronosGroup/Vulkan-Headers.git\n[submodule \"External/jemalloc_glibc\"]\n\tpath = External/jemalloc_glibc\n\turl = https://github.com/FEX-Emu/jemalloc.git\n"
        },
        {
          "name": "CI",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeFiles",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 20.7373046875,
          "content": "cmake_minimum_required(VERSION 3.14)\nproject(FEX C CXX ASM)\n\nINCLUDE (CheckIncludeFiles)\nCHECK_INCLUDE_FILES (\"gdb/jit-reader.h\" HAVE_GDB_JIT_READER_H)\n\noption(BUILD_TESTS \"Build unit tests to ensure sanity\" TRUE)\noption(BUILD_FEX_LINUX_TESTS \"Build FEXLinuxTests, requires x86 compiler\" FALSE)\noption(BUILD_THUNKS \"Build thunks\" FALSE)\noption(BUILD_FEXCONFIG \"Build FEXConfig\" TRUE)\noption(ENABLE_CLANG_THUNKS \"Build thunks with clang\" FALSE)\noption(ENABLE_IWYU \"Enables include what you use program\" FALSE)\noption(ENABLE_LTO \"Enable LTO with compilation\" TRUE)\noption(ENABLE_XRAY \"Enable building with LLVM X-Ray\" FALSE)\nset(USE_LINKER \"\" CACHE STRING \"Allow overriding the linker path directly\")\noption(ENABLE_ASAN \"Enables Clang ASAN\" FALSE)\noption(ENABLE_TSAN \"Enables Clang TSAN\" FALSE)\noption(ENABLE_COVERAGE \"Enables Coverage\" FALSE)\noption(ENABLE_ASSERTIONS \"Enables assertions in build\" FALSE)\noption(ENABLE_GDB_SYMBOLS \"Enables GDBSymbols integration support\" ${HAVE_GDB_JIT_READER_H})\noption(ENABLE_STRICT_WERROR \"Enables stricter -Werror for CI\" FALSE)\noption(ENABLE_WERROR \"Enables -Werror\" FALSE)\noption(ENABLE_JEMALLOC \"Enables jemalloc allocator\" TRUE)\noption(ENABLE_JEMALLOC_GLIBC_ALLOC \"Enables jemalloc glibc allocator\" TRUE)\noption(ENABLE_OFFLINE_TELEMETRY \"Enables FEX offline telemetry\" TRUE)\noption(ENABLE_COMPILE_TIME_TRACE \"Enables time trace compile option\" FALSE)\noption(ENABLE_LIBCXX \"Enables LLVM libc++\" FALSE)\noption(ENABLE_CCACHE \"Enables ccache for compile caching\" TRUE)\noption(ENABLE_VIXL_SIMULATOR \"Forces the FEX JIT to use the VIXL simulator\" FALSE)\noption(ENABLE_VIXL_DISASSEMBLER \"Enables debug disassembler output with VIXL\" FALSE)\noption(USE_LEGACY_BINFMTMISC \"Uses legacy method of setting up binfmt_misc\" FALSE)\noption(COMPILE_VIXL_DISASSEMBLER \"Compiles the vixl disassembler in to vixl\" FALSE)\noption(ENABLE_FEXCORE_PROFILER \"Enables use of the FEXCore timeline profiling capabilities\" FALSE)\nset (FEXCORE_PROFILER_BACKEND \"gpuvis\" CACHE STRING \"Set which backend you want to use for the FEXCore profiler\")\noption(ENABLE_GLIBC_ALLOCATOR_HOOK_FAULT \"Enables glibc memory allocation hooking with fault for CI testing\")\noption(USE_PDB_DEBUGINFO \"Builds debug info in PDB format\" FALSE)\n\nset (X86_32_TOOLCHAIN_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/toolchain_x86_32.cmake\" CACHE FILEPATH \"Toolchain file for the (cross-)compiler targeting i686\")\nset (X86_64_TOOLCHAIN_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/toolchain_x86_64.cmake\" CACHE FILEPATH \"Toolchain file for the (cross-)compiler targeting x86_64\")\nset (X86_DEV_ROOTFS \"/\" CACHE FILEPATH \"Path to the sysroot used for cross-compiling for i686 and x86_64\")\nset (DATA_DIRECTORY \"${CMAKE_INSTALL_PREFIX}/share/fex-emu\" CACHE PATH \"global data directory\")\n\nstring(FIND ${CMAKE_BASE_NAME} mingw CONTAINS_MINGW)\nif (NOT CONTAINS_MINGW EQUAL -1)\n  message (STATUS \"Mingw build\")\n  set (MINGW_BUILD TRUE)\n  set (ENABLE_JEMALLOC TRUE)\n  set (ENABLE_JEMALLOC_GLIBC_ALLOC FALSE)\nendif()\n\nif (NOT MINGW_BUILD)\n  message (STATUS \"Clang version ${CMAKE_CXX_COMPILER_VERSION}\")\n  set (CLANG_MINIMUM_VERSION 13.0)\n  if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS ${CLANG_MINIMUM_VERSION})\n    message (FATAL_ERROR \"Clang version too old for FEX. Need at least ${CLANG_MINIMUM_VERSION} but has ${CMAKE_CXX_COMPILER_VERSION}\")\n  endif()\nendif()\n\nif (ENABLE_FEXCORE_PROFILER)\n  add_definitions(-DENABLE_FEXCORE_PROFILER=1)\n  string(TOUPPER \"${FEXCORE_PROFILER_BACKEND}\" FEXCORE_PROFILER_BACKEND)\n\n  if (FEXCORE_PROFILER_BACKEND STREQUAL \"GPUVIS\")\n    add_definitions(-DFEXCORE_PROFILER_BACKEND=1)\n  else()\n    message(FATAL_ERROR \"Unknown FEXCore profiler backend ${FEXCORE_PROFILER_BACKEND}\")\n  endif()\nendif()\n\nif (ENABLE_JEMALLOC_GLIBC_ALLOC AND ENABLE_GLIBC_ALLOCATOR_HOOK_FAULT)\n  message(FATAL_ERROR \"Can't have both glibc fault allocator and jemalloc glibc allocator enabled at the same time\")\nendif()\n\nif (ENABLE_GLIBC_ALLOCATOR_HOOK_FAULT)\n  add_definitions(-DGLIBC_ALLOCATOR_FAULT=1)\nendif()\n\n# uninstall target\nif(NOT TARGET uninstall)\n  configure_file(\n    \"${CMAKE_CURRENT_SOURCE_DIR}/CMakeFiles/cmake_uninstall.cmake.in\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/cmake_uninstall.cmake\"\n    IMMEDIATE @ONLY)\n\n  add_custom_target(uninstall\n    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/cmake_uninstall.cmake)\nendif()\n\n# These options are meant for package management\nset (TUNE_CPU \"native\" CACHE STRING \"Override the CPU the build is tuned for\")\nset (TUNE_ARCH \"generic\" CACHE STRING \"Override the Arch the build is tuned for\")\nset (OVERRIDE_VERSION \"detect\" CACHE STRING \"Override the FEX version in the format of <MMYY>{.<REV>}\")\n\nstring(TOUPPER \"${CMAKE_BUILD_TYPE}\" CMAKE_BUILD_TYPE)\nif (CMAKE_BUILD_TYPE MATCHES \"DEBUG\")\n  set(ENABLE_ASSERTIONS TRUE)\nendif()\n\nif (ENABLE_ASSERTIONS)\n  message(STATUS \"Assertions enabled\")\n  add_definitions(-DASSERTIONS_ENABLED=1)\nendif()\n\nif (ENABLE_GDB_SYMBOLS)\n  message(STATUS \"GDBSymbols support enabled\")\n  add_definitions(-DGDB_SYMBOLS_ENABLED=1)\nendif()\n\n\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/Bin)\nset(CMAKE_INCLUDE_CURRENT_DIR ON)\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\ncmake_policy(SET CMP0083 NEW) # Follow new PIE policy\ninclude(CheckPIESupported)\ncheck_pie_supported()\n\nif (ENABLE_LTO)\n  set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)\nelse()\n  set(CMAKE_INTERPROCEDURAL_OPTIMIZATION FALSE)\nendif()\n\nif (CMAKE_SYSTEM_PROCESSOR MATCHES \"x86_64\")\n  option(ENABLE_X86_HOST_DEBUG \"Enables compiling on x86_64 host\" FALSE)\n  if (NOT ENABLE_X86_HOST_DEBUG)\n    message(FATAL_ERROR\n    \" FEX-Emu doesn't support compiling for x86-64 hosts!\"\n    \" This is /only/ a supported configuration for FEX CI and nothing else!\")\n  endif()\n  set(_M_X86_64 1)\n  add_definitions(-D_M_X86_64=1)\n  set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -mcx16\")\nendif()\n\nif (CMAKE_SYSTEM_PROCESSOR MATCHES \"^aarch64|^arm64|^armv8\\.*\")\n  set(_M_ARM_64 1)\n  add_definitions(-D_M_ARM_64=1)\nendif()\n\nif (CMAKE_SYSTEM_PROCESSOR MATCHES \"^arm64ec\")\n  set(_M_ARM_64EC 1)\n  add_definitions(-D_M_ARM_64EC=1)\nendif()\n\ninclude(CheckCXXSourceCompiles)\nset(CMAKE_REQUIRED_FLAGS \"-std=c++11 -Wattributes -Werror=attributes\")\ncheck_cxx_source_compiles(\n  \"\n  __attribute__((preserve_all))\n  int Testy(int a, int b, int c, int d, int e, int f) {\n  return a + b + c + d + e + f;\n  }\n  int main() {\n  return Testy(0, 1, 2, 3, 4, 5);\n  }\"\n  HAS_CLANG_PRESERVE_ALL)\nunset(CMAKE_REQUIRED_FLAGS)\nif (HAS_CLANG_PRESERVE_ALL)\n  if (MINGW_BUILD)\n    message(STATUS \"Ignoring broken clang::preserve_all support\")\n    set(HAS_CLANG_PRESERVE_ALL FALSE)\n  else()\n    message(STATUS \"Has clang::preserve_all\")\n  endif()\nendif ()\n\nif (_M_ARM_64 AND HAS_CLANG_PRESERVE_ALL)\n  add_definitions(\"-DFEX_PRESERVE_ALL_ATTR=__attribute__((preserve_all))\" \"-DFEX_HAS_PRESERVE_ALL_ATTR=1\")\nelse()\n  add_definitions(\"-DFEX_PRESERVE_ALL_ATTR=\" \"-DFEX_HAS_PRESERVE_ALL_ATTR=0\")\nendif()\n\nif (ENABLE_VIXL_SIMULATOR)\n  # We can run the simulator on both x86-64 or AArch64 hosts\n  add_definitions(-DVIXL_SIMULATOR=1 -DVIXL_INCLUDE_SIMULATOR_AARCH64=1)\nendif()\n\nif (ENABLE_CCACHE)\n  find_program(CCACHE_PROGRAM ccache)\n  if(CCACHE_PROGRAM)\n    message(STATUS \"CCache enabled\")\n    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE \"${CCACHE_PROGRAM}\")\n  endif()\nendif()\n\nif (ENABLE_XRAY)\n  add_compile_options(-fxray-instrument)\n  link_libraries(-fxray-instrument)\nendif()\n\nif (ENABLE_COMPILE_TIME_TRACE)\n  add_compile_options(-ftime-trace)\n  link_libraries(-ftime-trace)\nendif()\n\nset (PTHREAD_LIB pthread)\n\nif (USE_LINKER)\n  message(STATUS \"Overriding linker to: ${USE_LINKER}\")\n  add_link_options(\"-fuse-ld=${USE_LINKER}\")\nendif()\n\nif (ENABLE_LIBCXX)\n  message(WARNING \"This is an unsupported configuration and should only be used for testing\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11 -stdlib=libc++\")\n  set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -stdlib=libc++ -lc++abi\")\nendif()\n\nif (NOT ENABLE_OFFLINE_TELEMETRY)\n  # Disable FEX offline telemetry entirely if asked\n  add_definitions(-DFEX_DISABLE_TELEMETRY=1)\nendif()\n\nif (ENABLE_ASAN)\n  add_definitions(-DENABLE_ASAN=1)\n  add_compile_options(-fno-omit-frame-pointer -fsanitize=address -fsanitize-address-use-after-scope)\n  link_libraries(-fno-omit-frame-pointer -fsanitize=address -fsanitize-address-use-after-scope)\nendif()\n\nif (ENABLE_TSAN)\n  add_compile_options(-fno-omit-frame-pointer -fsanitize=thread)\n  link_libraries(-fno-omit-frame-pointer -fsanitize=thread)\nendif()\n\nif (ENABLE_COVERAGE)\n  add_compile_options(-fprofile-instr-generate -fcoverage-mapping)\n  link_libraries(-fprofile-instr-generate -fcoverage-mapping)\nendif()\n\nif (ENABLE_JEMALLOC_GLIBC_ALLOC)\n  # The glibc jemalloc subproject which hooks the glibc allocator.\n  # Required for thunks to work.\n  # All host native libraries will use this allocator, while *most* other FEX internal allocations will use the other jemalloc allocator.\n  add_subdirectory(External/jemalloc_glibc/)\nelseif (NOT MINGW_BUILD)\n  message (STATUS\n    \" jemalloc glibc allocator disabled!\\n\"\n    \" This is not a recommended configuration!\\n\"\n    \" This will very explicitly break thunk execution!\\n\"\n    \" Use at your own risk!\")\nendif()\n\nif (ENABLE_JEMALLOC)\n  # The jemalloc subproject that all FEXCore fextl objects allocate through.\n  add_subdirectory(External/jemalloc/)\nelseif (NOT MINGW_BUILD)\n  message (STATUS\n    \" jemalloc disabled!\\n\"\n    \" This is not a recommended configuration!\\n\"\n    \" This will very explicitly break 32-bit application execution!\\n\"\n    \" Use at your own risk!\")\nendif()\n\nif (USE_PDB_DEBUGINFO)\n  add_compile_options(-g -gcodeview)\n  add_link_options(-g -Wl,--pdb=)\nendif()\n\nset (CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -fno-omit-frame-pointer\")\nset (CMAKE_LINKER_FLAGS_RELWITHDEBINFO \"${CMAKE_LINKER_FLAGS_RELWITHDEBINFO} -fno-omit-frame-pointer\")\n\nset (CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -fomit-frame-pointer\")\nset (CMAKE_LINKER_FLAGS_RELEASE \"${CMAKE_LINKER_FLAGS_RELEASE} -fomit-frame-pointer\")\n\ninclude_directories(External/robin-map/include/)\n\nif (BUILD_TESTS)\n  # Enable vixl disassembler if tests are enabled.\n  set(COMPILE_VIXL_DISASSEMBLER TRUE)\nendif()\n\nif (COMPILE_VIXL_DISASSEMBLER OR ENABLE_VIXL_SIMULATOR)\n  add_subdirectory(External/vixl/)\n  include_directories(SYSTEM External/vixl/src/)\nendif()\n\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n  # This means we were attempted to get compiled with GCC\n  message(FATAL_ERROR \"FEX doesn't support getting compiled with GCC!\")\nendif()\n\nfind_package(PkgConfig REQUIRED)\nfind_package(Python 3.0 REQUIRED COMPONENTS Interpreter)\n\nset(BUILD_SHARED_LIBS OFF)\n\npkg_search_module(xxhash IMPORTED_TARGET xxhash libxxhash)\nif (TARGET PkgConfig::xxhash AND NOT CMAKE_CROSSCOMPILING)\n  add_library(xxHash::xxhash ALIAS PkgConfig::xxhash)\nelse()\n  set(XXHASH_BUNDLED_MODE TRUE)\n  set(XXHASH_BUILD_XXHSUM FALSE)\n  add_subdirectory(External/xxhash/cmake_unofficial/)\nendif()\n\nadd_definitions(-Wno-trigraphs)\nadd_definitions(-DGLOBAL_DATA_DIRECTORY=\"${DATA_DIRECTORY}/\")\n\nif (BUILD_TESTS)\n  find_package(Catch2 QUIET)\n  if (NOT Catch2_FOUND)\n    add_subdirectory(External/Catch2/)\n\n    # Pull in catch_discover_tests definition\n    list(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/External/Catch2/contrib/\")\n  endif()\n\n  include(Catch)\nendif()\n\nfind_package(fmt QUIET)\nif (NOT fmt_FOUND)\n  # Disable fmt install\n  set(FMT_INSTALL OFF)\n  add_subdirectory(External/fmt/)\nendif()\n\nadd_subdirectory(External/tiny-json/)\ninclude_directories(External/tiny-json/)\n\ninclude_directories(Source/)\ninclude_directories(\"${CMAKE_BINARY_DIR}/Source/\")\n\ninclude(CheckCXXCompilerFlag)\n\n# Add in diagnostic colours if the option is available.\n# Ninja code generator will kill colours if this isn't here\ncheck_cxx_compiler_flag(-fdiagnostics-color=always GCC_COLOR)\ncheck_cxx_compiler_flag(-fcolor-diagnostics CLANG_COLOR)\ncheck_cxx_compiler_flag(-Wno-deprecated-enum-enum-conversion ENUM_ENUM_WARNING)\n\nif (GCC_COLOR)\n  add_compile_options(-fdiagnostics-color=always)\nendif()\nif (CLANG_COLOR)\n  add_compile_options(-fcolor-diagnostics)\nendif()\n\nif(ENUM_ENUM_WARNING)\n  add_compile_options(-Wno-deprecated-enum-enum-conversion)\nendif()\n\nif(ENABLE_WERROR OR ENABLE_STRICT_WERROR)\n  add_compile_options(-Werror)\n  if (NOT ENABLE_STRICT_WERROR)\n    # Disable some Werror that can add frustration when developing\n    add_compile_options(-Wno-error=unused-variable)\n  endif()\nendif()\n\nset(FEX_TUNE_COMPILE_FLAGS)\nif (NOT TUNE_ARCH STREQUAL \"generic\")\n  check_cxx_compiler_flag(\"-march=${TUNE_ARCH}\" COMPILER_SUPPORTS_ARCH_TYPE)\n  if(COMPILER_SUPPORTS_ARCH_TYPE)\n    list(APPEND FEX_TUNE_COMPILE_FLAGS \"-march=${TUNE_ARCH}\")\n  else()\n    message(FATAL_ERROR \"Trying to compile arch type '${TUNE_ARCH}' but the compiler doesn't support this\")\n  endif()\nendif()\n\nif (TUNE_CPU STREQUAL \"native\")\n  if(_M_ARM_64)\n    if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 999999.0)\n      # Clang 12.0 fixed the -mcpu=native bug with mixed big.little implementers\n      # Clang can not currently check for native Apple M1 type in hypervisor. Currently disabled\n      check_cxx_compiler_flag(\"-mcpu=native\" COMPILER_SUPPORTS_CPU_TYPE)\n      if(COMPILER_SUPPORTS_CPU_TYPE)\n        list(APPEND FEX_TUNE_COMPILE_FLAGS \"-mcpu=native\")\n      endif()\n    else()\n      # Due to an oversight in llvm, it declares any reasonably new Kryo CPU to only be ARMv8.0\n      # Manually detect newer CPU revisions until clang and llvm fixes their bug\n      # This script will either provide a supported CPU or 'native'\n      # Additionally -march doesn't work under AArch64+Clang, so you have to use -mcpu or -mtune\n      execute_process(COMMAND python3 \"${PROJECT_SOURCE_DIR}/Scripts/aarch64_fit_native.py\" \"/proc/cpuinfo\" \"${CMAKE_CXX_COMPILER_VERSION}\"\n        OUTPUT_VARIABLE AARCH64_CPU)\n\n      string(STRIP ${AARCH64_CPU} AARCH64_CPU)\n\n      check_cxx_compiler_flag(\"-mcpu=${AARCH64_CPU}\" COMPILER_SUPPORTS_CPU_TYPE)\n      if(COMPILER_SUPPORTS_CPU_TYPE)\n        list(APPEND FEX_TUNE_COMPILE_FLAGS \"-mcpu=${AARCH64_CPU}\")\n      endif()\n    endif()\n  else()\n    check_cxx_compiler_flag(\"-march=native\" COMPILER_SUPPORTS_MARCH_NATIVE)\n    if(COMPILER_SUPPORTS_MARCH_NATIVE)\n      list(APPEND FEX_TUNE_COMPILE_FLAGS \"-march=native\")\n    endif()\n  endif()\nelse()\n  check_cxx_compiler_flag(\"-mcpu=${TUNE_CPU}\" COMPILER_SUPPORTS_CPU_TYPE)\n  if(COMPILER_SUPPORTS_CPU_TYPE)\n    list(APPEND FEX_TUNE_COMPILE_FLAGS \"-mcpu=${TUNE_CPU}\")\n  else()\n    message(FATAL_ERROR \"Trying to compile cpu type '${TUNE_CPU}' but the compiler doesn't support this\")\n  endif()\nendif()\n\nif (ENABLE_IWYU)\n  find_program(IWYU_EXE \"iwyu\")\n  if (IWYU_EXE)\n    message(STATUS \"IWYU enabled\")\n    set(CMAKE_CXX_INCLUDE_WHAT_YOU_USE \"${IWYU_EXE}\")\n  endif()\nendif()\n\nadd_compile_options(-Wall)\n\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/include/Config.h.in\n  ${CMAKE_BINARY_DIR}/generated/ConfigDefines.h)\n\ninclude(CTest)\nif (BUILD_TESTS)\n  message(STATUS \"Unit tests are enabled\")\n  if (NOT BUILD_TESTING)\n    # CMake checks this variable before generating CTestTestfile.cmake\n    message(SEND_ERROR \"Unit tests require BUILD_TESTING to be enabled\")\n  endif()\n\n  set (TEST_JOB_COUNT \"\" CACHE STRING \"Override number of parallel jobs to use while running tests\")\n  if (TEST_JOB_COUNT)\n    message(STATUS \"Running tests with ${TEST_JOB_COUNT} jobs\")\n  elseif(CMAKE_VERSION VERSION_LESS \"3.29\")\n    execute_process(COMMAND \"nproc\" OUTPUT_STRIP_TRAILING_WHITESPACE OUTPUT_VARIABLE TEST_JOB_COUNT)\n  endif()\n  set(TEST_JOB_FLAG \"-j${TEST_JOB_COUNT}\")\nendif()\n\nadd_subdirectory(FEXHeaderUtils/)\nadd_subdirectory(CodeEmitter/)\nadd_subdirectory(FEXCore/)\n\nif (_M_ARM_64 AND NOT MINGW_BUILD)\n  # Binfmt_misc files must be installed prior to Source/ installs\n  add_subdirectory(Data/binfmts/)\nendif()\n\nadd_subdirectory(Source/)\nadd_subdirectory(Data/AppConfig/)\n\n# Install the ThunksDB file\nfile(GLOB CONFIG_SOURCES CONFIGURE_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/Data/*.json)\n\n# Any application configuration json file gets installed\nforeach(CONFIG_SRC ${CONFIG_SOURCES})\n  install(FILES ${CONFIG_SRC}\n    DESTINATION ${DATA_DIRECTORY}/)\nendforeach()\n\nif (BUILD_TESTS)\n  add_subdirectory(unittests/)\nendif()\n\nif (BUILD_THUNKS)\n  set (FEX_PROJECT_SOURCE_DIR ${PROJECT_SOURCE_DIR})\n  add_subdirectory(ThunkLibs/Generator)\n\n  # Thunk targets for both host libraries and IDE integration\n  add_subdirectory(ThunkLibs/HostLibs)\n\n  # Thunk targets for IDE integration of guest code, only\n  add_subdirectory(ThunkLibs/GuestLibs)\n\n  # Thunk targets for guest libraries\n  include(ExternalProject)\n  ExternalProject_Add(guest-libs\n    PREFIX guest-libs\n    SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ThunkLibs/GuestLibs\"\n    BINARY_DIR \"Guest\"\n    CMAKE_ARGS\n      \"-DBITNESS=64\"\n      \"-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}\"\n      \"-DBUILD_FEX_LINUX_TESTS=${BUILD_FEX_LINUX_TESTS}\"\n      \"-DENABLE_CLANG_THUNKS=${ENABLE_CLANG_THUNKS}\"\n      \"-DCMAKE_TOOLCHAIN_FILE:FILEPATH=${X86_64_TOOLCHAIN_FILE}\"\n      \"-DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}\"\n      \"-DFEX_PROJECT_SOURCE_DIR=${FEX_PROJECT_SOURCE_DIR}\"\n      \"-DGENERATOR_EXE=$<TARGET_FILE:thunkgen>\"\n      \"-DX86_DEV_ROOTFS=${X86_DEV_ROOTFS}\"\n    INSTALL_COMMAND \"\"\n    BUILD_ALWAYS ON\n    DEPENDS thunkgen\n  )\n\n  ExternalProject_Add(guest-libs-32\n    PREFIX guest-libs-32\n    SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ThunkLibs/GuestLibs\"\n    BINARY_DIR \"Guest_32\"\n    CMAKE_ARGS\n      \"-DBITNESS=32\"\n      \"-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}\"\n      \"-DBUILD_FEX_LINUX_TESTS=${BUILD_FEX_LINUX_TESTS}\"\n      \"-DENABLE_CLANG_THUNKS=${ENABLE_CLANG_THUNKS}\"\n      \"-DCMAKE_TOOLCHAIN_FILE:FILEPATH=${X86_32_TOOLCHAIN_FILE}\"\n      \"-DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}\"\n      \"-DFEX_PROJECT_SOURCE_DIR=${FEX_PROJECT_SOURCE_DIR}\"\n      \"-DGENERATOR_EXE=$<TARGET_FILE:thunkgen>\"\n      \"-DX86_DEV_ROOTFS=${X86_DEV_ROOTFS}\"\n    INSTALL_COMMAND \"\"\n    BUILD_ALWAYS ON\n    DEPENDS thunkgen\n  )\n\n  install(\n    CODE \"MESSAGE(\\\"-- Installing: guest-libs\\\")\"\n    CODE \"\n    EXECUTE_PROCESS(COMMAND ${CMAKE_COMMAND} --build . --target install\n    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/Guest\n    )\"\n    DEPENDS guest-libs\n  )\n\n  install(\n    CODE \"MESSAGE(\\\"-- Installing: guest-libs-32\\\")\"\n    CODE \"\n    EXECUTE_PROCESS(COMMAND ${CMAKE_COMMAND} --build . --target install\n    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/Guest_32\n    )\"\n    DEPENDS guest-libs-32\n  )\n\n  add_custom_target(uninstall_guest-libs\n    COMMAND ${CMAKE_COMMAND} \"--build\" \".\" \"--target\" \"uninstall\"\n    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/Guest\n  )\n\n  add_custom_target(uninstall_guest-libs-32\n    COMMAND ${CMAKE_COMMAND} \"--build\" \".\" \"--target\" \"uninstall\"\n    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/Guest_32\n  )\n\n  add_dependencies(uninstall uninstall_guest-libs)\n  add_dependencies(uninstall uninstall_guest-libs-32)\nendif()\n\nset(FEX_VERSION_MAJOR \"0\")\nset(FEX_VERSION_MINOR \"0\")\nset(FEX_VERSION_PATCH \"0\")\n\nif (OVERRIDE_VERSION STREQUAL \"detect\")\n  find_package(Git)\n  if (GIT_FOUND)\n    execute_process(\n      COMMAND ${GIT_EXECUTABLE} describe --abbrev=0\n      WORKING_DIRECTORY \"${CMAKE_SOURCE_DIR}\"\n      OUTPUT_VARIABLE GIT_DESCRIBE_STRING\n      RESULT_VARIABLE GIT_ERROR\n      ERROR_QUIET\n      OUTPUT_STRIP_TRAILING_WHITESPACE\n    )\n\n    if (NOT ${GIT_ERROR} EQUAL 0)\n      # Likely built in a way that doesn't have tags\n      # Setup a version tag that is unknown\n      set(GIT_DESCRIBE_STRING \"FEX-0000\")\n    endif()\n  endif()\nelse()\n  set(GIT_DESCRIBE_STRING \"FEX-${OVERRIDE_VERSION}\")\nendif()\n\n# Parse the version here\n# Change something like `FEX-2106.1-76-<hash>` in to a list\nstring(REPLACE \"-\" \";\" DESCRIBE_LIST ${GIT_DESCRIBE_STRING})\n\n# Extract the `2106.1` element\nlist(GET DESCRIBE_LIST 1 DESCRIBE_LIST)\n\n# Change `2106.1` in to a list\nstring(REPLACE \".\" \";\" DESCRIBE_LIST ${DESCRIBE_LIST})\n\n# Calculate list size\nlist(LENGTH DESCRIBE_LIST LIST_SIZE)\n\n# Pull out the major version\nlist(GET DESCRIBE_LIST 0 FEX_VERSION_MAJOR)\n\n# Minor version only exists if there is a .1 at the end\n# eg: 2106 versus 2106.1\nif (LIST_SIZE GREATER 1)\n  list(GET DESCRIBE_LIST 1 FEX_VERSION_MINOR)\nendif()\n\n# Package creation\nset (CPACK_GENERATOR \"DEB\")\nset (CPACK_PACKAGE_NAME fex-emu)\nset (CPACK_PACKAGE_FILE_NAME \"${CPACK_PACKAGE_NAME}-${GIT_DESCRIBE_STRING}_${CMAKE_SYSTEM_PROCESSOR}\")\nset (CPACK_PACKAGE_CONTACT \"FEX-Emu Maintainers <team@fex-emu.com>\")\nset (CPACK_PACKAGE_VERSION_MAJOR \"${FEX_VERSION_MAJOR}\")\nset (CPACK_PACKAGE_VERSION_MINOR \"${FEX_VERSION_MINOR}\")\nset (CPACK_PACKAGE_VERSION_PATCH \"${FEX_VERSION_PATCH}\")\nset (CPACK_PACKAGE_DESCRIPTION_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/CPack/Description.txt\")\n\n# Debian defines\nset (CPACK_DEBIAN_PACKAGE_DEPENDS \"libc6, libstdc++6, libepoxy0, libsdl2-2.0-0, libegl1, libx11-6, squashfuse\")\nset (CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA\n  \"${CMAKE_CURRENT_SOURCE_DIR}/CPack/postinst;${CMAKE_CURRENT_SOURCE_DIR}/CPack/prerm;${CMAKE_CURRENT_SOURCE_DIR}/CPack/triggers\")\nif (CMAKE_SYSTEM_PROCESSOR MATCHES \"aarch64\")\n  # binfmt_misc conflicts with qemu-user-static\n  # We also only install binfmt_misc on aarch64 hosts\n  set (CPACK_DEBIAN_PACKAGE_CONFLICTS \"${CPACK_DEBIAN_PACKAGE_CONFLICTS}, qemu-user-static\")\nendif()\ninclude (CPack)\n"
        },
        {
          "name": "CMakeSettings.json",
          "type": "blob",
          "size": 3.4970703125,
          "content": "﻿{\r\n\t\"environments\": [\r\n\t\t{\r\n\t\t\t\"BuildPath\": \"${projectDir}\\\\out\\\\build\\\\${name}\",\r\n\t\t\t\"InstallPath\": \"${projectDir}\\\\out\\\\install\\\\${name}\",\r\n\t\t\t\"clangcl\": \"clang-cl.exe\",\r\n\t\t\t\"cc\": \"clang\",\r\n\t\t\t\"cxx\": \"clang++\"\r\n\t\t}\r\n\t],\r\n\t\"configurations\": [\r\n\t\t{\r\n\t\t\t\"name\": \"WSL-Clang-Debug\",\r\n\t\t\t\"generator\": \"Ninja\",\r\n\t\t\t\"configurationType\": \"Debug\",\r\n\t\t\t\"buildRoot\": \"${env.BuildPath}\",\r\n\t\t\t\"installRoot\": \"${env.InstallPath}\",\r\n\t\t\t\"cmakeExecutable\": \"/usr/bin/cmake\",\r\n\t\t\t\"cmakeCommandArgs\": \"\",\r\n\t\t\t\"buildCommandArgs\": \"-v\",\r\n\t\t\t\"ctestCommandArgs\": \"\",\r\n\t\t\t\"wslPath\": \"${defaultWSLPath}\",\r\n\t\t\t\"inheritEnvironments\": [ \"linux_clang_x64\" ],\r\n\t\t\t\"addressSanitizerRuntimeFlags\": \"detect_leaks=0\",\r\n\t\t\t\"variables\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"WSL\",\r\n\t\t\t\t\t\"value\": \"TRUE\",\r\n\t\t\t\t\t\"type\": \"BOOL\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"WSL-Clang-Release\",\r\n\t\t\t\"generator\": \"Ninja\",\r\n\t\t\t\"configurationType\": \"RelWithDebInfo\",\r\n\t\t\t\"buildRoot\": \"${env.BuildPath}\",\r\n\t\t\t\"installRoot\": \"${env.InstallPath}\",\r\n\t\t\t\"cmakeExecutable\": \"/usr/bin/cmake\",\r\n\t\t\t\"cmakeCommandArgs\": \"\",\r\n\t\t\t\"buildCommandArgs\": \"-v\",\r\n\t\t\t\"ctestCommandArgs\": \"\",\r\n\t\t\t\"wslPath\": \"${defaultWSLPath}\",\r\n\t\t\t\"inheritEnvironments\": [ \"linux_clang_x64\" ],\r\n\t\t\t\"addressSanitizerRuntimeFlags\": \"detect_leaks=0\",\r\n\t\t\t\"variables\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"WSL\",\r\n\t\t\t\t\t\"value\": \"TRUE\",\r\n\t\t\t\t\t\"type\": \"BOOL\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"x86-Clang-Cross-Debug\",\r\n\t\t\t\"generator\": \"Ninja\",\r\n\t\t\t\"configurationType\": \"Debug\",\r\n\t\t\t\"buildRoot\": \"${env.BuildPath}\",\r\n\t\t\t\"installRoot\": \"${env.InstallPath}\",\r\n\t\t\t\"cmakeCommandArgs\": \"\",\r\n\t\t\t\"buildCommandArgs\": \"-v\",\r\n\t\t\t\"ctestCommandArgs\": \"\",\r\n\t\t\t\"inheritEnvironments\": [ \"clang_cl_x86\" ],\r\n\t\t\t\"variables\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"CMAKE_C_COMPILER\",\r\n\t\t\t\t\t\"value\": \"${env.cc}\",\r\n\t\t\t\t\t\"type\": \"STRING\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"CMAKE_CXX_COMPILER\",\r\n\t\t\t\t\t\"value\": \"${env.cxx}\",\r\n\t\t\t\t\t\"type\": \"STRING\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"CMAKE_SYSROOT\",\r\n\t\t\t\t\t\"value\": \"${env.fexsysroot}\",\r\n\t\t\t\t\t\"type\": \"STRING\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"x64-Clang-Cross-Release\",\r\n\t\t\t\"generator\": \"Ninja\",\r\n\t\t\t\"configurationType\": \"RelWithDebInfo\",\r\n\t\t\t\"buildRoot\": \"${env.BuildPath}\",\r\n\t\t\t\"installRoot\": \"${env.InstallPath}\",\r\n\t\t\t\"cmakeCommandArgs\": \"\",\r\n\t\t\t\"buildCommandArgs\": \"-v\",\r\n\t\t\t\"ctestCommandArgs\": \"\",\r\n\t\t\t\"inheritEnvironments\": [ \"clang_cl_x86\" ],\r\n\t\t\t\"variables\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"CMAKE_C_COMPILER\",\r\n\t\t\t\t\t\"value\": \"${env.cc}\",\r\n\t\t\t\t\t\"type\": \"STRING\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"CMAKE_CXX_COMPILER\",\r\n\t\t\t\t\t\"value\": \"${env.cxx}\",\r\n\t\t\t\t\t\"type\": \"STRING\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"CMAKE_SYSROOT\",\r\n\t\t\t\t\t\"value\": \"${env.fexsysroot}\",\r\n\t\t\t\t\t\"type\": \"STRING\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"name\": \"Linux-Clang-Remote-Debug\",\r\n\t\t\t\"generator\": \"Ninja\",\r\n\t\t\t\"configurationType\": \"Debug\",\r\n\t\t\t\"cmakeExecutable\": \"/usr/bin/cmake\",\r\n\t\t\t\"remoteCopySourcesExclusionList\": [ \".vs\", \".vscode\", \".git\", \".github\", \"build\", \"out\", \"bin\" ],\r\n\t\t\t\"cmakeCommandArgs\": \"\",\r\n\t\t\t\"buildCommandArgs\": \"-v\",\r\n\t\t\t\"ctestCommandArgs\": \"\",\r\n\t\t\t\"inheritEnvironments\": [ \"linux_clang_x64\" ],\r\n\t\t\t\"remoteMachineName\": \"${env.fexremote}\",\r\n\t\t\t\"remoteCMakeListsRoot\": \"$HOME/projects/.vs/${projectDirName}/src\",\r\n\t\t\t\"remoteBuildRoot\": \"$HOME/projects/.vs/${projectDirName}/build/${name}\",\r\n\t\t\t\"remoteInstallRoot\": \"$HOME/projects/.vs/${projectDirName}/install/${name}\",\r\n\t\t\t\"remoteCopySources\": true,\r\n\t\t\t\"rsyncCommandArgs\": \"-t --delete --delete-excluded\",\r\n\t\t\t\"remoteCopyBuildOutput\": false,\r\n\t\t\t\"remoteCopySourcesMethod\": \"rsync\",\r\n\t\t\t\"addressSanitizerRuntimeFlags\": \"detect_leaks=0\",\r\n\t\t\t\"variables\": []\r\n\t\t}\r\n\t]\r\n}"
        },
        {
          "name": "CMakeToolchains",
          "type": "tree",
          "content": null
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.26953125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at team@fex-emu.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "CPack",
          "type": "tree",
          "content": null
        },
        {
          "name": "CodeEmitter",
          "type": "tree",
          "content": null
        },
        {
          "name": "Data",
          "type": "tree",
          "content": null
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.7744140625,
          "content": "# --- Stage 1: Builder ---\nFROM ubuntu:20.04 as builder\n\nRUN DEBIAN_FRONTEND=\"noninteractive\" apt-get update\nRUN DEBIAN_FRONTEND=\"noninteractive\" apt install -y cmake \\\nclang-10 llvm-10 nasm ninja-build pkg-config \\\nlibcap-dev libglfw3-dev libepoxy-dev python3-dev libsdl2-dev \\\npython3 linux-headers-generic \\\ngit\n\nRUN git clone --recurse-submodules https://github.com/FEX-Emu/FEX.git\n\nCMD [ \"mkdir /opt/FEX/build\" ]\n\nWORKDIR /opt/FEX/build\n\nARG CC=clang-10\nARG CXX=clang++-10\nRUN cmake -G Ninja .. -DCMAKE_BUILD_TYPE=Release\nRUN ninja\n\n# --- Stage 2: Runner ---\nFROM ubuntu:20.04\n\nRUN DEBIAN_FRONTEND=\"noninteractive\" apt-get update\nRUN DEBIAN_FRONTEND=\"noninteractive\" apt install -y \\\nlibcap-dev libglfw3-dev libepoxy-dev\n\nCOPY --from=builder /opt/FEX/build/Bin/* /usr/bin/\n\nWORKDIR /root\n"
        },
        {
          "name": "External",
          "type": "tree",
          "content": null
        },
        {
          "name": "FEXCore",
          "type": "tree",
          "content": null
        },
        {
          "name": "FEXHeaderUtils",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.068359375,
          "content": "MIT License\n\nCopyright (c) 2019 Ryan Houdek <Sonicadvance1@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Readme.md",
          "type": "blob",
          "size": 1.8427734375,
          "content": "[中文](https://github.com/FEX-Emu/FEX/blob/main/docs/Readme_CN.md)\n# FEX - Fast x86 emulation frontend\nFEX allows you to run x86 and x86-64 binaries on an AArch64 host, similar to qemu-user and box86.\nIt has native support for a rootfs overlay, so you don't need to chroot, as well as some thunklibs so it can forward things like GL to the host.\nFEX presents a Linux 5.15+ interface to the guest, and supports only AArch64 as a host.\nFEX is very much work in progress, so expect things to change.\n\n\n## Quick start guide\n### For Ubuntu 22.04, 24.04 and 24.10\nExecute the following command in the terminal to install FEX through a PPA.\n\n`curl --silent https://raw.githubusercontent.com/FEX-Emu/FEX/main/Scripts/InstallFEX.py --output /tmp/InstallFEX.py && python3 /tmp/InstallFEX.py && rm /tmp/InstallFEX.py`\n\nThis command will walk you through installing FEX through a PPA, and downloading a RootFS for use with FEX.\n\nUbuntu PPA is updated with our monthly releases.\n\n### For everyone else\nPlease see [Building FEX](#building-fex).\n\n## Getting Started\nFEX has been tested to build and run on ARMv8.0+ hardware.\nARMv7 hardware will not work.\nExpected operating system usage is Linux. FEX has been tested with the following Linux OSes:\n\n- Ubuntu 22.04\n- Ubuntu 24.04\n- Ubuntu 24.10\n- Arch Linux\n\nOn AArch64 hosts the user **MUST** have an x86-64 RootFS [Creating a RootFS](#RootFS-Generation).\n\n### Navigating the Source\nSee the [Source Outline](docs/SourceOutline.md) for more information.\n\n### Building FEX\nFollow the guide on the official FEX-Emu Wiki [here](https://wiki.fex-emu.com/index.php/Development:Setting_up_FEX).\n\n### RootFS generation\nAArch64 hosts require a rootfs for running applications.\nFollow the guide on the wiki page for seeing how to set up the rootfs from scratch\nhttps://wiki.fex-emu.com/index.php/Development:Setting_up_RootFS\n\n![FEX diagram](docs/Diagram.svg)\n"
        },
        {
          "name": "Scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "Source",
          "type": "tree",
          "content": null
        },
        {
          "name": "ThunkLibs",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "toolchain_mingw.cmake",
          "type": "blob",
          "size": 1.033203125,
          "content": "set(MINGW_TRIPLE \"\" CACHE STRING \"MinGW compiler target architecture triple\")\n\nset(CMAKE_RC_COMPILER ${MINGW_TRIPLE}-windres)\nset(CMAKE_C_COMPILER ${MINGW_TRIPLE}-clang)\nset(CMAKE_CXX_COMPILER ${MINGW_TRIPLE}-clang++)\nset(CMAKE_DLLTOOL ${MINGW_TRIPLE}-dlltool)\n\n# Compile everything as static to avoid requiring the MinGW runtime libraries, force page aligned sections so that\n# debug symbols work correctly, and disable loop alignment to workaround an LLVM bug\n# (https://github.com/llvm/llvm-project/issues/47432)\nset(CMAKE_SHARED_LINKER_FLAGS_INIT \"-static -static-libgcc -static-libstdc++ -Wl,--file-alignment=4096,/mllvm:-align-loops=1\")\nset(CMAKE_EXE_LINKER_FLAGS_INIT \"-static -static-libgcc -static-libstdc++ -Wl,--file-alignment=4096,/mllvm:-align-loops=1\")\nset(CMAKE_C_STANDARD_LIBRARIES \"\" CACHE STRING \"\" FORCE)\nset(CMAKE_CXX_STANDARD_LIBRARIES \"\" CACHE STRING \"\" FORCE)\nset(CMAKE_STANDARD_LIBRARIES \"\" CACHE STRING \"\" FORCE)\nset(CMAKE_SYSTEM_NAME Windows)\nset(CMAKE_SYSTEM_PROCESSOR ${MINGW_TRIPLE})\n\nset(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n"
        },
        {
          "name": "toolchain_x86_32.cmake",
          "type": "blob",
          "size": 0.7080078125,
          "content": "option(ENABLE_CLANG_THUNKS \"Enable building thunks with clang\" FALSE)\n\nset(CMAKE_SYSTEM_PROCESSOR i686)\n\nif (ENABLE_CLANG_THUNKS)\n  message(STATUS \"Enabling thunk clang building. Force enabling LLD as well\")\n\n  set(CMAKE_EXE_LINKER_FLAGS_INIT \"-fuse-ld=lld\")\n  set(CMAKE_MODULE_LINKER_FLAGS_INIT \"-fuse-ld=lld\")\n  set(CMAKE_SHARED_LINKER_FLAGS_INIT \"-fuse-ld=lld\")\n  set(CMAKE_C_COMPILER clang)\n  set(CMAKE_CXX_COMPILER clang++)\n  set(CLANG_FLAGS \"-target i686-linux-gnu -msse2 -mfpmath=sse\")\n\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${CLANG_FLAGS}\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${CLANG_FLAGS}\")\nelse()\n  set(CMAKE_C_COMPILER x86_64-linux-gnu-gcc -m32)\n  set(CMAKE_CXX_COMPILER x86_64-linux-gnu-g++ -m32)\nendif()\n"
        },
        {
          "name": "toolchain_x86_64.cmake",
          "type": "blob",
          "size": 0.6826171875,
          "content": "option(ENABLE_CLANG_THUNKS \"Enable building thunks with clang\" FALSE)\n\nset(CMAKE_SYSTEM_PROCESSOR x86_64)\n\nif (ENABLE_CLANG_THUNKS)\n  message(STATUS \"Enabling thunk clang building. Force enabling LLD as well\")\n\n  set(CMAKE_EXE_LINKER_FLAGS_INIT \"-fuse-ld=lld\")\n  set(CMAKE_MODULE_LINKER_FLAGS_INIT \"-fuse-ld=lld\")\n  set(CMAKE_SHARED_LINKER_FLAGS_INIT \"-fuse-ld=lld\")\n  set(CMAKE_C_COMPILER clang)\n  set(CMAKE_CXX_COMPILER clang++)\n  set(CLANG_FLAGS \"-target x86_64-linux-gnu\")\n\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${CLANG_FLAGS}\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${CLANG_FLAGS}\")\nelse()\n  set(CMAKE_C_COMPILER x86_64-linux-gnu-gcc)\n  set(CMAKE_CXX_COMPILER x86_64-linux-gnu-g++)\nendif()\n"
        },
        {
          "name": "unittests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}