{
  "metadata": {
    "timestamp": 1736565902812,
    "page": 866,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "CytopiaTeam/Cytopia",
      "stars": 2015,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.361328125,
          "content": "ï»¿BreakBeforeBraces: Allman\nIndentWidth: 2\nReflowComments: false\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesInParentheses: false\nColumnLimit: 130\n---\nLanguage: Cpp\nCpp11BracedListStyle: true\nSortIncludes: false\nStandard: Cpp11\nAllowShortIfStatementsOnASingleLine: Never\n---\nLanguage: JavaScript\nAllowShortIfStatementsOnASingleLine: Always"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.697265625,
          "content": "build/*\nbuild-mixer-only/*\n\n# ignore CLion generated directory\n.idea\n\n# ignore Vim caches.\n*.swp\n\n# ignore build directories\ncmake-build-*\n\n#ignore VStudio code generated directory\n.vscode\n.vs\n\n#ignore .exe, .dll and .so to be able to use the TileDataEditor in the source directory\n*.exe\n*.dll\n*.so\nTileDataEditor\n\n# ignore macOS stuff.\n.DS_Store\n_pmm\nDoxygen_Docs/*\n*.mo\ntools/l10n/TMP\n\n#ignore redist directory\nredist/*\n\n#ignore Cytopia Resources directory\nCytopia_resources/*\nresources/*\n\n#ignore CMakeFiles\nsrc/CMakeFiles/*\nCMakeFiles\nCMakeCache.txt\nCPackConfig.cmake\nCPackSourceConfig.cmake\n\ncmake_install.cmake\nsrc/cmake_install.cmake\nsrc/Makefile\n\ntools/l10n/TMP.pot\n_build/\n/build*/\n\nCMakeUserPresets.json\n"
        },
        {
          "name": ".lgtm.yml",
          "type": "blob",
          "size": 0.353515625,
          "content": "path_classifiers:\n  library:\n    - Cytopia_Resources\n    - src/ThirdParty\n\nextraction:\n  cpp:\n    prepare:\n      packages:\n        - libsdl2-dev \n        - libsdl2-image-dev \n        - libsdl2-ttf-dev \n        - libopenal-dev \n        - libvorbis-dev \n        - libpng-dev \n        - libnoise-dev\n    configure:\n      command:\n        - cmake -DBUILD_TEST=OFF .\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 4.1171875,
          "content": "cmake_minimum_required(VERSION 3.16 FATAL_ERROR)\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${CMAKE_SOURCE_DIR}/cmake\" \"${CMAKE_SOURCE_DIR}/cmake/find-modules\" \"${CMAKE_SOURCE_DIR}/cmake/dependencies-helpers\")\n\ncmake_policy(SET CMP0127 OLD)\n\ninclude(FindPkgConfig)\nset(PKG_CONFIG_USE_CMAKE_PREFIX_PATH TRUE)\ninclude(CMakeDependentOption)\ninclude(Macros)\ninclude(FeatureSummary)\ninclude(SourceFileUtils)\ninclude(CMakeCM)\n\n# create the cmake project\nproject(\n        # this will be the ${PROJECT_NAME}\n        Cytopia\n        # this will provide ${PROJECT_VERSION}\n        VERSION 0.4\n        # Description\n        DESCRIPTION \"A city-building game\"\n        # we are using C++\n        LANGUAGES CXX\n)\n\n\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\noption(BUILD_TEST \"Build Cytopia Tests\" ON)\noption(ENABLE_PHC \"Use a Precompiled header for speeding up the build\" ON)\noption(ENABLE_DEBUG \"Enable Debug (asserts and logs)\" OFF)\noption(ENABLE_ASAN \"Enable Address Sanitizer\" OFF)\noption(ENABLE_UBSAN \"Enable Undefined Behaviour Sanitizer\" OFF)\noption(ENABLE_TSAN \"Enable Thread Sanitizer\" OFF)\n\n# setup paths\nset(RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/bin/\")\nset(LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/lib/\")\nset(ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/lib/\")\nset(EXECUTABLE_OUTPUT_PATH ${RUNTIME_OUTPUT_DIRECTORY})\nset(LIBRARY_OUTPUT_PATH ${RUNTIME_OUTPUT_DIRECTORY})\n\nif (WIN32)\n    # fix executable paths for windows\n    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${RUNTIME_OUTPUT_DIRECTORY})\n    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${RUNTIME_OUTPUT_DIRECTORY})\n    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${RUNTIME_OUTPUT_DIRECTORY})\n    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${RUNTIME_OUTPUT_DIRECTORY})\nendif ()\n\nset(_include_directories \"${CMAKE_CURRENT_SOURCE_DIR}/external/header_only\")\nset(_compile_definitions \"\")\nset(_link_libraries \"\")\n\nif (CMAKE_BUILD_TYPE STREQUAL \"Debug\" OR CMAKE_BUILD_TYPE STREQUAL \"RelWithDebInfo\")\n    list(APPEND _compile_definitions DEBUG)\nendif ()\n\n################################################################################\n# Check for dependencies\n################################################################################\ninclude(DependenciesConfig)\n\nif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"MSVC\")\n    link_libraries(dbghelp.lib)\nelseif (NOT APPLE AND NOT BUILD_ANDROID)\n    # Note: Apple supports std::filesystem with macOS10.15 and upwards.\n    # Needed for filesystem library\n    list(APPEND _link_libraries \"stdc++fs\")\nendif ()\n\nif (MINGW)\n    # need to link with mingw32 before SDL2\n    list(APPEND _link_libraries mingw32)\nendif ()\n\n\n# get linux distribution\nif (UNIX AND NOT APPLE)\n    execute_process(COMMAND head -1 /etc/os-release OUTPUT_VARIABLE linux_distribution)\nendif ()\n\n# Configuration for packaging\ninclude(CpackConfiguration)\n\n# Compile options\ninclude(CompileOptions)\n\nmessage(STATUS \"Building Project:  ${PROJECT_NAME}\")\nmessage(STATUS \"Build configuration: \" ${CMAKE_BUILD_TYPE})\n\nif (UNIX)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pthread -fdiagnostics-color=always\")\nendif ()\n\n# Include imgui project\nadd_subdirectory(external/imgui)\n\nadd_subdirectory(src)\n\nif (BUILD_TEST)\n    include(CTest)\n    enable_testing()\n    add_subdirectory(tests)\nendif (BUILD_TEST)\n\nif (NOT BUILD_ANDROID)\n    # use Doxygen to generate the documentation\n    find_package(Doxygen)\nendif ()\n\nif (DOXYGEN_FOUND)\n    add_custom_target(\n            doc\n            COMMAND \"${DOXYGEN_EXECUTABLE}\" \"${PROJECT_SOURCE_DIR}/Doxyfile\"\n            WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n            VERBATIM\n    )\nendif ()\n\n# copy itch.toml to build folder to install our prerequisits\nif (WIN32)\n    if (CMAKE_SIZEOF_VOID_P EQUAL 8) ## 64 bit\n        message(STATUS \"Using Win64 itch.toml file\")\n        INSTALL(FILES ${CMAKE_SOURCE_DIR}/tools/itch/win64/.itch.toml\n                DESTINATION ${CMAKE_BINARY_DIR}/redist\n                )\n    elseif (CMAKE_SIZEOF_VOID_P EQUAL 4) ## 32 bit\n        message(STATUS \"Using Win64 itch.toml file\")\n        INSTALL(FILES ${CMAKE_SOURCE_DIR}/tools/itch/win32/.itch.toml\n                DESTINATION ${CMAKE_BINARY_DIR}/redist\n                )\n    endif ()\nendif ()\n\n\nfeature_summary(WHAT ALL)"
        },
        {
          "name": "Doxyfile",
          "type": "blob",
          "size": 0.994140625,
          "content": "PROJECT_NAME = Cytopia\nPROJECT_NUMBER = 0.3\nPROJECT_BRIEF = \"A city building simulation game\"\nPROJECT_LOGO = ./data/resources/images/app_icons/cytopia_icon_iso.png\nSHOW_FILES = YES\nEXTRACT_ALL = YES\nEXTRACT_PRIVATE = YES\nEXTRACT_PACKAGE = YES\nEXTRACT_STATIC = YES\nEXTRACT_LOCAL_CLASSES = YES\nEXTRACT_LOCAL_METHODS = YES\nEXTRACT_ANON_NSPACES = YES\nSUBGROUPING = YES\nSOURCE_BROWSER = YES\nOUTPUT_DIRECTORY = \"./Doxygen_Docs\"\nINPUT = ./src\nRECURSIVE = YES\nGENERATE_LATEX = NO\nINLINE_SOURCES = YES\nGENERATE_TREEVIEW = YES\nUML_LOOK = YES\nMULTILINE_CPP_IS_BRIEF = YES\nHTML_TIMESTAMP = YES\nHTML_DYNAMIC_SECTIONS = YES\nHTML_COLORSTYLE_HUE = 29\nHTML_COLORSTYLE_SAT = 0\nHTML_COLORSTYLE_GAMMA = 240\nHAVE_DOT = YES\nDOT_IMAGE_FORMAT = svg\nINTERACTIVE_SVG = YES\nDOT_TRANSPARENT = YES\nCALL_GRAPH = YES\nCALLER_GRAPH = YES\nTEMPLATE_RELATIONS = YES\nEXAMPLE_PATH = .\nHTML_EXTRA_STYLESHEET = src/doc/Doc-styles.css\nUSE_MATHJAX = YES\nMATHJAX_EXTENSIONS = TeX/AMSmath TeX/AMSsymbols\nMATHJAX_RELPATH = https://cdn.mathjax.org/mathjax/latest/\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.779296875,
          "content": "![Cytopia Logo](data/resources/images/app_icons/logo_big_textured.png?raw=1)\n\n[![Discord](https://img.shields.io/discord/448344322887254018.svg?logo=discord)](https://discord.gg/qwa2H3G)\n\n[![Total alerts](https://img.shields.io/lgtm/alerts/g/JimmySnails/Cytopia.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/JimmySnails/Cytopia/alerts/)\n[![Language grade: C/C++](https://img.shields.io/lgtm/grade/cpp/g/JimmySnails/Cytopia.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/JimmySnails/Cytopia/context:cpp)\n\n[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=cytopia&metric=alert_status)](https://sonarcloud.io/dashboard?id=cytopia)\n[![Coverage](https://sonarcloud.io/api/project_badges/measure?project=cytopia&metric=coverage)](https://sonarcloud.io/dashboard?id=cytopia)\n\n[![Translations](https://hosted.weblate.org/widgets/cytopia/-/game/svg-badge.svg)](https://hosted.weblate.org/projects/cytopia/)\n\n\n<b>Website/Forums</b> - Cytopia.net - <https://www.cytopia.net/><br>\n<b>YouTube</b> - Cytopia - <https://www.youtube.com/channel/UCJIzKBD3wl6KRohiX6i53GA><br>\n<b>Twitter</b> - @CytopiaGame - <https://twitter.com/CytopiaGame><br>\n<b>Reddit</b> - r/Cytopia - <https://www.reddit.com/r/Cytopia/><br>\n<b>Discord</b> - Cytopia - <https://discord.gg/MG3tgYV6ce><br>\n<b>Patreon</b> - Cytopia by Jimmy Snails - <https://www.patreon.com/cytopia><br>\n<b>Itch io</b> - Cytopia - <https://cytopia.itch.io/cytopia><br>\n<b>GitHub</b> - Cytopia by CytopiaTeam - <https://github.com/CytopiaTeam/Cytopia><br>\n<b>Translation project on Weblate</b> - Cytopia - <https://hosted.weblate.org/projects/cytopia/><br>\n\nCytopia is a free, open source retro pixel-art city building game with a big focus on mods. It utilizes a custom isometric rendering engine based on SDL2.\n\n#### Current Key Features:\n- Custom UI System\n- SDL2 based rendering engine written in C++\n- Camera panning, zooming, relocating\n- Terrain manipulation\n- Procedural Terrain Generation\n- Pixel-art graphics made by graphics team lead by Kingtut 101\n- An original soundtrack, ambient noises, and sound effects made mostly by MB22\n- A Qt based tile editor for editing TileData JSON files\n\n#### Planned features:\n- Biomes\n- OpenGL Renderer\n- Gameplay mechanics\n- In-Game Mod downloading mechanism\n- Android / iOS\n- Scripting language for mods (like LUA)\n\nFor code documentation, see the project's [Doxygen Documentation](https://cytopia-docs.netlify.app/).\n\nIf you have questions or if you want to join the project, visit the [Project's Discord Server](https://discord.gg/qwa2H3G).\nIf Discord is not for you, visit our IRC channel on freenode at #Cytopia\n\nIn case you want to support our project on patreon, visit our [Patreon Page](https://patreon.com/cytopia).\n\n\n#### Supported Platforms\nLinux (clang / g++-5 or higher)\nWindows\nMac\n\n#### Prerequisites\n\n- [CMake 3.16 or later](https://cmake.org/)\n- [Conan](https://conan.io)\n- [SDL2](https://www.libsdl.org/)\n- [SDL2_tff](https://www.libsdl.org/)\n- [SDL2_image](https://www.libsdl.org/)\n- [OpenAL](https://www.openal.org/)\n- [zlib](https://www.zlib.net/)\n- [libnoise](http://libnoise.sourceforge.net/)\n- [libogg](https://www.xiph.org/ogg/)\n- [libvorbis](https://www.xiph.org/vorbis/)\n- [libpng](http://www.libpng.org/pub/png/libpng.html)\n- [imgui](https://github.com/ocornut/imgui)\n\n#### Build instructions\n\nSee: <https://github.com/CytopiaTeam/Cytopia/wiki/Build-instructions>\n\n#### Coding guidelines\n\nSee: <https://github.com/CytopiaTeam/Cytopia/wiki/Coding-guidelines>\n\n#### Work-in-Progress Screenshot\n\n![alt text](https://cytopia.net/github/Screenshot1.png)\n![alt text](https://cytopia.net/github/Screenshot2.jpg)\n\nWe're proud to be part of Jetbrains opensource program!  \n[<img src=\"https://cytopia.net/github/jetbrains.png\" alt=\"Jetbrains logo\" width=\"200\" height=\"200\"> ](https://www.jetbrains.com/?from=Cytopia)\n"
        },
        {
          "name": "ReleaseNotes.txt",
          "type": "blob",
          "size": 5.0048828125,
          "content": "===Cytopia Changelog:===\n\n===Cytopia v0.2.1 Changelog:===\nGeneral:\n- Fixed a bug where the game would crash when the terrain was elevated and an in-between tile was created.\n- Fixed a few bugs in the line placement mode.\n- Added a preview for buildings that are bigger than 1x1.\n- When placing buildings bigger than 1x1, the placement is now correctly checked.\n- Added support for diagonal roads.\n- Pressing ESC now stops the tile-placement mode.\n- Added shorelines.\n- Added two new fantastic soundtracks by MB22.\nGameplay:\n- Added three different selection modes; single, rectangular, and line. The mode is chosen automatically for the right tiles.\n- Added RCI zone tiles by RockFort.\n- Added a blueprint layer mode. When placing water pipes, the game switches to this blueprint mode automatically.\n- Roads of different types now won't autotile to each other.\n- Holding down the SHIFT key will use straight line placement mode instead of the diagonal line placement mode.\n- Holding down the CTRL key will place straight road corners instead of diagonal ones.\n- Added De-Zone tool - Hold down SHIFT key while in demolish mode.\n- Added a tool to remove ground decoration only. - Hold down CTRL key while in demolish mode. \n- Added panning for both WASD and the arrow keys.\nTiles:\n- Fixed a bug in autotiling.\n- Added new trees and other biome-related graphics and prepared biome JSON information for further terrain generation improvements.\n- Changed how road spritesheets are handled. Now the tiles are used from a single spritesheet instead of having \"default\" tiles in an extra spritesheet.\n- Added a \"tileType\" property to define certain behaviors, like \"autotile\" instead of handling this via tileCategory.\n- Items can now be placed over certain items, like trees, without deleting them first.\n- Added a property to allow placement of tiles on water\n- Added ground decoration tiles, that can be placed on a seperate layer underneath buildings.\n- Added a json property to define multiple ground decoration tiles that will be chosen randomly on placement\nUI:\n- Opening the settings menu now hides the category UI.\n- The UI can be hidden for screenshots by pressing the H key.\n- Fixed the UI text alignment in ComboBoxes.\n- Added subcategory buttons to the debug menu to show more buildings.\n- Centered UI items if they would normally go off the screen.\n- Right-click will no longer trigger a UI interaction.\n- Screen resolution can now be changed in-game.\n- The UI menu position can now be changed in-game.\n\nv0.2\n- A new 32-bit version of Cytopia has been made for users with older machines\n- The new procedural terrain generation system can be used to make new maps with hills, lakes, oceans, and forests\n- Roads can now be placed using our new linetool\n- The new tile variation system allows buildings to pick a random frame after being placed\n- The grass and water tiles have been updated with new textures and variations\n- Lots of new buildings, decorations, and trees have been added\n- Items can be placed over flora tiles without manually removing them first\n- Tiles are now highlighted while placing items\n- You can now pan the camera using WASD\n- The GUI has been improved with previews for each building and new icons\n- The layer system fixes the black void that used to go under buildings\n- There is now touch screen support for Windows Tablets\n- New music tracks by MB22 have been added to the game\n- There is now spatial 3D audio\n- There is now Audio playback and track switching\n- Cytopia now has multi-language support\n\n\nv0.1.1\n - Save / Load Game functionality (including ZLib compression)\n - macOS support\n - TileDate Editor\n   - Automatically calculate TileSize if count is changed\n   - Added scrollbars if the preview image is bigger than the preview window\n   - Fixed a crash when changing category of a tile\n - New Soundtrack made by MB22\n - Reformated the terrain system with brand new graphics and standardized frames for all slopes by KingTut 101.\n - A lot of code quality improvements and bug fixes.\n\nv0.1\n- Renamed the Project to Cytopia\n- Added a Qt based tool to edit TileData JSON File (by Kollix)\n- A lot of new buildings by Kingtut 101 and Pineapples Trix\n- Placement of buildings (Power, Water, Debug, ...)\n- Support tilemaps and improved tilemanagement\n- Camera panning (hold down right mouse button)\n- Added a background image for image buttons. \n- highlight mouse over tile when in edit/placement mode\n- Added window and desktop icons\n- Performance Improvements and code refactoring\n\nv0.0.2\n- Improved User Interface Library\n- Performance Improvements\n- Audio playback and a custom theme song made by sqwdmusic\n- Tilemap support\n- Bugfixes for Terrain editing\n- Custom Textures made by Kingtut 101\n- Roads and water\n- Performance Improvements\n- Lots of improvements to code design\n\nv0.0.1\n- Basic Render Engine\n- Read inputs from SDL Keys\n- Read configuration from resources/settings.json\n- Read tile list mapping from resources/tilelist.json\n- support multiple height levels of tiles\n- different zoomLevels\n- convert screen coordinates to iso coordinates (with pixel collision detection)\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "conanfile.py",
          "type": "blob",
          "size": 1.52734375,
          "content": "import os\nfrom conan import ConanFile\nfrom conan.tools.files import copy\n\n\nclass Cytopia(ConanFile):\n    name = \"Cytopia\"\n    settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n    generators = \"CMakeDeps\", \"CMakeToolchain\"\n\n    def requirements(self):\n        # self.requires(\"microprofile/3.1\")\n        self.requires(\"angelscript/2.37.0\")\n        self.requires(\"libnoise/1.0.0\")\n        self.requires(\"libpng/1.6.45\", force=True)\n        self.requires(\"openal/1.22.2\")\n        self.requires(\"sdl/2.30.9\", force=True)\n        self.requires(\"sdl_image/2.8.2\")\n        self.requires(\"sdl_ttf/2.22.0\")\n        self.requires(\"vorbis/1.3.7\")\n        self.requires(\"zlib/1.3.1\", force=True)\n        self.requires(\"libwebp/1.5.0\", override=True)\n        if self.settings.os == \"Linux\":\n            self.requires(\"xz_utils/5.4.5\", override=True)\n            self.requires(\"libalsa/1.2.13\", override=True)\n\n    def generate(self):\n        for dep in self.dependencies.values():\n            if len(dep.cpp_info.bindirs) > 0:\n                self.cp_data(dep.cpp_info.bindirs[0])\n            if len(dep.cpp_info.libdirs) > 0:\n                self.cp_data(dep.cpp_info.libdirs[0])\n\n    def cp_data(self, src):\n        # bin, *.dll -> bin @ keep_path=False\n        # lib, *.dll -> bin @ keep_path=False\n        # lib, *.dylib -> bin @ keep_path=False\n        # lib, *.so* -> bin @ keep_path=False\n        bindir = os.path.join(self.build_folder, \"bin\")\n        copy(self, \"*.dll\", src, bindir)\n        copy(self, \"*.dylib\", src, bindir)\n        copy(self, \".so*\", src, bindir)\n"
        },
        {
          "name": "credits.txt",
          "type": "blob",
          "size": 0.7890625,
          "content": "=====Project Lead / Lead Developer=====\nJimmySnails (Engine, UI, ...)\nErcadio (Engine, Unittests)\nCad'ika Orade (Procedural Terrain Generation) \n\n=====Developers=====\nadct23 (Engine, Audiosystem)\nAnotherFoxGuy (BuildSystem, WebSite, Community Manager)\nKollix (TileData Editor)\nlizzyd710 (UI, Translator)\nNotakas (Engine, Gameplay)\nParagoumba (Engine, Gameplay, Translator)\nutilForever (Code Reviews, Consulting)\nWestrox (Engine, Gameplay)\nYukyduky (Engine, Gameplay)\n\n=====Graphics Artists=====\nKingtut 101 (Lead Artist, Community Manager)\nPineapples Trix\nRockFort (Translator)\nFolesnaid\nMaroonShaded (Translator)\nYusuf8a684\nJustKekman\nTHEMAX\nBangBoom\nPanzerkampfwagen 2 ausf (Junior Graphics Artist)\n\n=====Audio Director=====\nMB22 (OST, Sound Effects, Ambient Noise)\n\n=====Sound Design=====\nsqwdmusic (OST)\n"
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "external",
          "type": "tree",
          "content": null
        },
        {
          "name": "get_dependencies.sh",
          "type": "blob",
          "size": 2.0361328125,
          "content": "#!/bin/bash -x\n\ncd external/android/SDL\n\nwget https://www.libsdl.org/release/SDL2-2.0.9.tar.gz\nrm -rf SDL2\ntar xf SDL2-2.0.9.tar.gz\nrm SDL2-2.0.9.tar.gz\nmv SDL2-2.0.9 SDL2\nrm SDL2-2.0.9.tar.gz\n\nwget https://www.libsdl.org/projects/SDL_image/release/SDL2_image-2.0.5.tar.gz\nrm -rf SDL2_image\ntar xf SDL2_image-2.0.5.tar.gz\nrm SDL2_image-2.0.5.tar.gz\nmv SDL2_image-2.0.5 SDL2_image\nrm SDL2_image-2.0.5.tar.gz\n\nwget https://www.libsdl.org/projects/SDL_ttf/release/SDL2_ttf-2.0.15.tar.gz\nrm -rf SDL2_ttf\ntar xf SDL2_ttf-2.0.15.tar.gz\nrm SDL2_ttf-2.0.15.tar.gz\nmv SDL2_ttf-2.0.15 SDL2_ttf\nrm SDL2_ttf-2.0.15.tar.gz\n\ncd ..\n\nmkdir -p externLibs\ncd other\n\nrm -rf libnoise\ngit clone https://github.com/qknight/libnoise.git\n\nrm -rf zlib\nwget https://www.zlib.net/zlib-1.2.11.tar.gz\ntar xf zlib-1.2.11.tar.gz\nrm zlib-1.2.11.tar.gz\nmv zlib-1.2.11 zlib\n\nrm -rf openal-soft\nwget https://github.com/kcat/openal-soft/archive/openal-soft-1.20.1.tar.gz\ntar xf openal-soft-1.20.1.tar.gz\nrm openal-soft-1.20.1.tar.gz\nmv openal-soft-openal-soft-1.20.1 openal-soft\n\nrm -rf ogg\ngit clone https://github.com/xiph/ogg.git\n\nrm -rf vorbis\ngit clone https://github.com/xiph/vorbis.git\n\nrm -rf libpng\nwget https://nchc.dl.sourceforge.net/project/libpng/libpng16/1.6.37/libpng-1.6.37.tar.xz\ntar xf libpng-1.6.37.tar.xz\nrm libpng-1.6.37.tar.xz\nmv libpng-1.6.37 libpng\ncp libpng/scripts/pnglibconf.h.prebuilt libpng/pnglibconf.h\n\n#adjust vorbis cmakelists to make it buildable on android\nsed -i '10istring(REPLACE \"libvorbis\" \"libogg\" OGG_BINARY_DIR ${CMAKE_BINARY_DIR})' vorbis/CMakeLists.txt\nsed -i '11istring(REPLACE \"libvorbis\" \"libogg\" OGG_LIBRARY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY})' vorbis/CMakeLists.txt\nsed -i '12istring(REPLACE \"vorbis\" \"ogg\" OGG_SOURCE_DIR ${CMAKE_SOURCE_DIR})' vorbis/CMakeLists.txt\nsed -i '13ifile(COPY ${OGG_BINARY_DIR}/include/ogg/config_types.h DESTINATION ${OGG_SOURCE_DIR}/include/ogg)' vorbis/CMakeLists.txt\nsed -i '14iset (OGG_INCLUDE_DIR \"${OGG_SOURCE_DIR}/include\")' vorbis/CMakeLists.txt\nsed -i '15iset (OGG_LIBRARY ${OGG_LIBRARY}/libogg.so)' vorbis/CMakeLists.txt\n\ncd ../../..\n"
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 0.34765625,
          "content": "<!DOCTYPE HTML>\n<html lang=\"en-US\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta http-equiv=\"refresh\" content=\"1;url=build/html/index.html\">\n        <title>Page Redirection</title>\n    </head>\n    <body>\n        If you are not redirected automatically, follow the <a href=\"build/html/index.html\">link to the documentation</a>\n    </body>\n</html>"
        },
        {
          "name": "ios.toolchain.cmake",
          "type": "blob",
          "size": 41.6044921875,
          "content": "# This file is part of the ios-cmake project. It was retrieved from\n# https://github.com/leetal/ios-cmake.git, which is a fork of\n# https://github.com/gerstrong/ios-cmake.git, which is a fork of\n# https://github.com/cristeab/ios-cmake.git, which is a fork of\n# https://code.google.com/p/ios-cmake/. Which in turn is based off of\n# the Platform/Darwin.cmake and Platform/UnixPaths.cmake files which\n# are included with CMake 2.8.4\n#\n# The ios-cmake project is licensed under the new BSD license.\n#\n# Copyright (c) 2014, Bogdan Cristea and LTE Engineering Software,\n# Kitware, Inc., Insight Software Consortium.  All rights reserved.\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions\n# are met:\n# 1. Redistributions of source code must retain the above copyright\n# notice, this list of conditions and the following disclaimer.\n#\n# 2. Redistributions in binary form must reproduce the above copyright\n# notice, this list of conditions and the following disclaimer in the\n# documentation and/or other materials provided with the distribution.\n#\n# 3. Neither the name of the copyright holder nor the names of its\n# contributors may be used to endorse or promote products derived from\n# this software without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\n# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n# POSSIBILITY OF SUCH DAMAGE.\n#\n# This file is based off of the Platform/Darwin.cmake and\n# Platform/UnixPaths.cmake files which are included with CMake 2.8.4\n# It has been altered for iOS development.\n#\n# Updated by Alex Stewart (alexs.mac@gmail.com)\n#\n# *****************************************************************************\n#      Now maintained by Alexander Widerberg (widerbergaren [at] gmail.com)\n#                      under the BSD-3-Clause license\n#                   https://github.com/leetal/ios-cmake\n# *****************************************************************************\n#\n#                           INFORMATION / HELP\n#\n# The following options control the behaviour of this toolchain:\n#\n# PLATFORM: (default \"OS64\")\n#    OS = Build for iPhoneOS.\n#    OS64 = Build for arm64 iphoneOS.\n#    OS64COMBINED = Build for arm64 x86_64 iphoneOS. Combined into FAT STATIC lib (supported on 3.14+ of CMakewith \"-G Xcode\" argument ONLY)\n#    SIMULATOR = Build for x86 i386 iphoneOS Simulator.\n#    SIMULATOR64 = Build for x86_64 iphoneOS Simulator.\n#    SIMULATORARM64 = Build for arm64 iphoneOS Simulator.\n#    TVOS = Build for arm64 tvOS.\n#    TVOSCOMBINED = Build for arm64 x86_64 tvOS. Combined into FAT STATIC lib (supported on 3.14+ of CMake with \"-G Xcode\" argument ONLY)\n#    SIMULATOR_TVOS = Build for x86_64 tvOS Simulator.\n#    WATCHOS = Build for armv7k arm64_32 for watchOS.\n#    WATCHOSCOMBINED = Build for armv7k arm64_32 x86_64 watchOS. Combined into FAT STATIC lib (supported on 3.14+ of CMake with \"-G Xcode\" argument ONLY)\n#    SIMULATOR_WATCHOS = Build for x86_64 for watchOS Simulator.\n#    MAC = Build for x86_64 macOS.\n#    MAC_ARM64 = Build for Apple Silicon macOS.\n#    MAC_CATALYST = Build for x86_64 macOS with Catalyst support (iOS toolchain on macOS).\n#                   Note: The build argument \"MACOSX_DEPLOYMENT_TARGET\" can be used to control min-version of macOS\n#    MAC_CATALYST_ARM64 = Build for Apple Silicon macOS with Catalyst support (iOS toolchain on macOS).\n#                         Note: The build argument \"MACOSX_DEPLOYMENT_TARGET\" can be used to control min-version of macOS\n#\n# CMAKE_OSX_SYSROOT: Path to the SDK to use.  By default this is\n#    automatically determined from PLATFORM and xcodebuild, but\n#    can also be manually specified (although this should not be required).\n#\n# CMAKE_DEVELOPER_ROOT: Path to the Developer directory for the platform\n#    being compiled for.  By default this is automatically determined from\n#    CMAKE_OSX_SYSROOT, but can also be manually specified (although this should\n#    not be required).\n#\n# DEPLOYMENT_TARGET: Minimum SDK version to target. Default 2.0 on watchOS and 9.0 on tvOS+iOS\n#\n# ENABLE_BITCODE: (1|0) Enables or disables bitcode support. Default 1 (true)\n#\n# ENABLE_ARC: (1|0) Enables or disables ARC support. Default 1 (true, ARC enabled by default)\n#\n# ENABLE_VISIBILITY: (1|0) Enables or disables symbol visibility support. Default 0 (false, visibility hidden by default)\n#\n# ENABLE_STRICT_TRY_COMPILE: (1|0) Enables or disables strict try_compile() on all Check* directives (will run linker\n#    to actually check if linking is possible). Default 0 (false, will set CMAKE_TRY_COMPILE_TARGET_TYPE to STATIC_LIBRARY)\n#\n# ARCHS: (armv7 armv7s armv7k arm64 arm64_32 i386 x86_64) If specified, will override the default architectures for the given PLATFORM\n#    OS = armv7 armv7s arm64 (if applicable)\n#    OS64 = arm64 (if applicable)\n#    SIMULATOR = i386\n#    SIMULATOR64 = x86_64\n#    SIMULATORARM64 = arm64\n#    TVOS = arm64\n#    SIMULATOR_TVOS = x86_64 (i386 has since long been deprecated)\n#    WATCHOS = armv7k arm64_32 (if applicable)\n#    SIMULATOR_WATCHOS = x86_64 (i386 has since long been deprecated)\n#    MAC = x86_64\n#    MAC_ARM64 = arm64\n#    MAC_CATALYST = x86_64\n#    MAC_CATALYST_ARM64 = arm64\n#\n# This toolchain defines the following properties (available via get_property()) for use externally:\n#\n# PLATFORM: The currently targeted platform.\n# XCODE_VERSION: Version number (not including Build version) of Xcode detected.\n# SDK_VERSION: Version of SDK being used.\n# OSX_ARCHITECTURES: Architectures being compiled for (generated from PLATFORM).\n# APPLE_TARGET_TRIPLE: Used by autoconf build systems. NOTE: If \"ARCHS\" are overridden, this will *NOT* be set!\n#\n# This toolchain defines the following macros for use externally:\n#\n# set_xcode_property (TARGET XCODE_PROPERTY XCODE_VALUE XCODE_VARIANT)\n#   A convenience macro for setting xcode specific properties on targets.\n#   Available variants are: All, Release, RelWithDebInfo, Debug, MinSizeRel\n#   example: set_xcode_property (myioslib IPHONEOS_DEPLOYMENT_TARGET \"3.1\" \"all\").\n#\n# find_host_package (PROGRAM ARGS)\n#   A macro used to find executable programs on the host system, not within the\n#   environment. Thanks to the android-cmake project for providing the\n#   command.\n#\n\ncmake_minimum_required(VERSION 3.8.0)\n\n# CMake invokes the toolchain file twice during the first build, but only once during subsequent rebuilds.\nif(DEFINED ENV{_IOS_TOOLCHAIN_HAS_RUN})\n  return()\nendif()\nset(ENV{_IOS_TOOLCHAIN_HAS_RUN} true)\n\n###############################################################################\n#                                  OPTIONS                                    #\n###############################################################################\n\noption(DROP_32_BIT \"Drops the 32-bit targets universally.\" YES)\n\n###############################################################################\n#                                END OPTIONS                                  #\n###############################################################################\n\n# List of supported platform values\nlist(APPEND _supported_platforms\n        \"OS\" \"OS64\" \"OS64COMBINED\" \"SIMULATOR\" \"SIMULATOR64\" \"SIMULATORARM64\"\n        \"TVOS\" \"TVOSCOMBINED\" \"SIMULATOR_TVOS\"\n        \"WATCHOS\" \"WATCHOSCOMBINED\" \"SIMULATOR_WATCHOS\"\n        \"MAC\" \"MAC_ARM64\"\n        \"MAC_CATALYST\" \"MAC_CATALYST_ARM64\")\n\n# Cache what generator is used\nset(USED_CMAKE_GENERATOR \"${CMAKE_GENERATOR}\")\n\n# Check if using a CMake version capable of building combined FAT builds (simulator and target slices combined in one static lib)\nif(${CMAKE_VERSION} VERSION_GREATER_EQUAL \"3.14\")\n  set(MODERN_CMAKE YES)\nendif()\n\n# Get the Xcode version being used.\n# Problem: CMake runs toolchain files multiple times, but can't read cache variables on some runs.\n# Workaround: On first run (in which cache variables are always accessible), set an intermediary environment variable.\n#\n# NOTE: This pattern is used i many places in this toolchain to speed up checks of all sorts\nif(DEFINED XCODE_VERSION_INT)\n  # Environment variables are always preserved.\n  set(ENV{_XCODE_VERSION_INT} \"${XCODE_VERSION_INT}\")\nelseif(DEFINED ENV{_XCODE_VERSION_INT})\n  set(XCODE_VERSION_INT \"$ENV{_XCODE_VERSION_INT}\")\nelseif(NOT DEFINED XCODE_VERSION_INT)\n  find_program(XCODEBUILD_EXECUTABLE xcodebuild)\n  if(NOT XCODEBUILD_EXECUTABLE)\n    message(FATAL_ERROR \"xcodebuild not found. Please install either the standalone commandline tools or Xcode.\")\n  endif()\n  execute_process(COMMAND ${XCODEBUILD_EXECUTABLE} -version\n          OUTPUT_VARIABLE XCODE_VERSION_INT\n          ERROR_QUIET\n          OUTPUT_STRIP_TRAILING_WHITESPACE)\n  string(REGEX MATCH \"Xcode [0-9\\\\.]+\" XCODE_VERSION_INT \"${XCODE_VERSION_INT}\")\n  string(REGEX REPLACE \"Xcode ([0-9\\\\.]+)\" \"\\\\1\" XCODE_VERSION_INT \"${XCODE_VERSION_INT}\")\n  set(XCODE_VERSION_INT \"${XCODE_VERSION_INT}\" CACHE INTERNAL \"\")\nendif()\n\n# Assuming that xcode 12.0 is installed you most probably have ios sdk 14.0 or later installed (tested on Big Sur)\n# if you don't set a deployment target it will be set the way you only get 64-bit builds\nif(NOT DEFINED DEPLOYMENT_TARGET AND XCODE_VERSION_INT VERSION_GREATER 12.0)\n  # Temporarily fix the arm64 issues in CMake install-combined by excluding arm64 for simulator builds (needed for Apple Silicon...)\n  set(CMAKE_XCODE_ATTRIBUTE_EXCLUDED_ARCHS[sdk=iphonesimulator*] \"arm64\")\nendif()\n\n# Check if the platform variable is set\nif(DEFINED PLATFORM)\n  # Environment variables are always preserved.\n  set(ENV{_PLATFORM} \"${PLATFORM}\")\nelseif(DEFINED ENV{_PLATFORM})\n  set(PLATFORM \"$ENV{_PLATFORM}\")\nelseif(NOT DEFINED PLATFORM)\n  message(FATAL_ERROR \"PLATFORM argument not set. Bailing configure since I don't know what target you want to build for!\")\nendif ()\n\nif(PLATFORM MATCHES \".*COMBINED\" AND NOT CMAKE_GENERATOR MATCHES \"Xcode\")\n  message(FATAL_ERROR \"The combined builds support requires Xcode to be used as generator via '-G Xcode' command-line argument in CMake\")\nendif()\n\n# Safeguard that the platform value is set and is one of the supported values\nlist(FIND _supported_platforms ${PLATFORM} contains_PLATFORM)\nif(\"${contains_PLATFORM}\" EQUAL \"-1\")\n  string(REPLACE \";\"  \"\\n * \" _supported_platforms_formatted \"${_supported_platforms}\")\n  message(FATAL_ERROR \" Invalid PLATFORM specified! Current value: ${PLATFORM}.\\n\"\n          \" Supported PLATFORM values: \\n * ${_supported_platforms_formatted}\")\nendif()\n\n# Check if Apple Silicon is supported\nif(PLATFORM MATCHES \"^(MAC_ARM64)$|^(MAC_CATALYST_ARM64)$\" AND ${CMAKE_VERSION} VERSION_LESS \"3.19.5\")\n  message(FATAL_ERROR \"Apple Silicon builds requires a minimum of CMake 3.19.5\")\nendif()\n\n# Touch toolchain variable to suppress \"unused variable\" warning.\n# This happens if CMake is invoked with the same command line the second time.\nif(CMAKE_TOOLCHAIN_FILE)\nendif()\n\n# Fix for PThread library not in path\nset(CMAKE_THREAD_LIBS_INIT \"-lpthread\")\nset(CMAKE_HAVE_THREADS_LIBRARY 1)\nset(CMAKE_USE_WIN32_THREADS_INIT 0)\nset(CMAKE_USE_PTHREADS_INIT 1)\n\n# Specify minimum version of deployment target.\nif(NOT DEFINED DEPLOYMENT_TARGET)\n  if (PLATFORM MATCHES \"WATCHOS\")\n    # Unless specified, SDK version 4.0 is used by default as minimum target version (watchOS).\n    set(DEPLOYMENT_TARGET \"4.0\")\n  elseif(PLATFORM STREQUAL \"MAC\")\n    # Unless specified, SDK version 10.13 (High sierra) is used by default as minimum target version (macos).\n    set(DEPLOYMENT_TARGET \"10.13\")\n  elseif(PLATFORM STREQUAL \"MAC_ARM64\")\n    # Unless specified, SDK version 11.0 (Big Sur) is used by default as minimum target version (macos on arm).\n    set(DEPLOYMENT_TARGET \"11.0\")\n  elseif(PLATFORM STREQUAL \"MAC_CATALYST\" OR PLATFORM STREQUAL \"MAC_CATALYST_ARM64\")\n    # Unless specified, SDK version 13.0 is used by default as minimum target version (mac catalyst minimum requirement).\n    set(DEPLOYMENT_TARGET \"13.0\")\n  else()\n    # Unless specified, SDK version 11.0 is used by default as minimum target version (iOS, tvOS).\n    set(DEPLOYMENT_TARGET \"11.0\")\n  endif()\n  message(STATUS \"[DEFAULTS] Using the default min-version since DEPLOYMENT_TARGET not provided!\")\nelseif(DEFINED DEPLOYMENT_TARGET AND PLATFORM MATCHES \"^MAC_CATALYST\" AND ${DEPLOYMENT_TARGET} VERSION_LESS \"13.0\")\n  message(FATAL_ERROR \"Mac Catalyst builds requires a minimum deployment target of 13.0!\")\nendif()\n\n# Store the DEPLOYMENT_TARGET in the cache\nset(DEPLOYMENT_TARGET \"${DEPLOYMENT_TARGET}\" CACHE INTERNAL \"\")\n\n# Handle the case where we are targeting iOS and a version above 10.3.4 (32-bit support dropped officially)\nif(PLATFORM STREQUAL \"OS\" AND DEPLOYMENT_TARGET VERSION_GREATER_EQUAL 10.3.4)\n  set(PLATFORM \"OS64\")\n  message(STATUS \"Targeting minimum SDK version ${DEPLOYMENT_TARGET}. Dropping 32-bit support.\")\nelseif(PLATFORM STREQUAL \"SIMULATOR\" AND DEPLOYMENT_TARGET VERSION_GREATER_EQUAL 10.3.4)\n  set(PLATFORM \"SIMULATOR64\")\n  message(STATUS \"Targeting minimum SDK version ${DEPLOYMENT_TARGET}. Dropping 32-bit support.\")\nendif()\n\nset(PLATFORM_INT \"${PLATFORM}\")\n\nif(DEFINED ARCHS)\n  string(REPLACE \";\" \"-\" ARCHS_SPLIT \"${ARCHS}\")\nendif()\n\n# Determine the platform name and architectures for use in xcodebuild commands\n# from the specified PLATFORM_INT name.\nif(PLATFORM_INT STREQUAL \"OS\")\n  set(SDK_NAME iphoneos)\n  if(NOT ARCHS)\n    set(ARCHS armv7 armv7s arm64)\n    set(APPLE_TARGET_TRIPLE_INT arm-apple-ios$${DEPLOYMENT_TARGET})\n  else()\n    set(APPLE_TARGET_TRIPLE_INT ${ARCHS_SPLIT}-apple-ios${DEPLOYMENT_TARGET})  \n  endif()\nelseif(PLATFORM_INT STREQUAL \"OS64\")\n  set(SDK_NAME iphoneos)\n  if(NOT ARCHS)\n    if (XCODE_VERSION_INT VERSION_GREATER 10.0)\n      set(ARCHS arm64) # Add arm64e when Apple have fixed the integration issues with it, libarclite_iphoneos.a is currently missung bitcode markers for example\n    else()\n      set(ARCHS arm64)\n    endif()\n    set(APPLE_TARGET_TRIPLE_INT aarch64-apple-ios${DEPLOYMENT_TARGET})\n  else()\n    set(APPLE_TARGET_TRIPLE_INT ${ARCHS_SPLIT}-apple-ios${DEPLOYMENT_TARGET})\n  endif()\nelseif(PLATFORM_INT STREQUAL \"OS64COMBINED\")\n  set(SDK_NAME iphoneos)\n  if(MODERN_CMAKE)\n    if(NOT ARCHS)\n      if (XCODE_VERSION_INT VERSION_GREATER 10.0)\n        set(ARCHS arm64 x86_64) # Add arm64e when Apple have fixed the integration issues with it, libarclite_iphoneos.a is currently missung bitcode markers for example\n        set(CMAKE_XCODE_ATTRIBUTE_ARCHS[sdk=iphoneos*] \"arm64\")\n        set(CMAKE_XCODE_ATTRIBUTE_ARCHS[sdk=iphonesimulator*] \"x86_64\")\n        set(CMAKE_XCODE_ATTRIBUTE_VALID_ARCHS[sdk=iphoneos*] \"arm64\")\n        set(CMAKE_XCODE_ATTRIBUTE_VALID_ARCHS[sdk=iphonesimulator*] \"x86_64\")\n      else()\n        set(ARCHS arm64 x86_64)\n        set(CMAKE_XCODE_ATTRIBUTE_ARCHS[sdk=iphoneos*] \"arm64\")\n        set(CMAKE_XCODE_ATTRIBUTE_ARCHS[sdk=iphonesimulator*] \"x86_64\")\n        set(CMAKE_XCODE_ATTRIBUTE_VALID_ARCHS[sdk=iphoneos*] \"arm64\")\n        set(CMAKE_XCODE_ATTRIBUTE_VALID_ARCHS[sdk=iphonesimulator*] \"x86_64\")\n      endif()\n      set(APPLE_TARGET_TRIPLE_INT aarch64-x86_64-apple-ios${DEPLOYMENT_TARGET})\n    else()\n      set(APPLE_TARGET_TRIPLE_INT ${ARCHS_SPLIT}-apple-ios${DEPLOYMENT_TARGET})\n    endif()\n  else()\n    message(FATAL_ERROR \"Please make sure that you are running CMake 3.14+ to make the OS64COMBINED setting work\")\n  endif()\nelseif(PLATFORM_INT STREQUAL \"SIMULATOR\")\n  set(SDK_NAME iphonesimulator)\n  if(NOT ARCHS)\n    set(ARCHS i386)\n    set(APPLE_TARGET_TRIPLE_INT i386-apple-ios${DEPLOYMENT_TARGET}-simulator)\n  else()\n    set(APPLE_TARGET_TRIPLE_INT ${ARCHS_SPLIT}-apple-ios${DEPLOYMENT_TARGET}-simulator)\n  endif()\n  message(DEPRECATION \"SIMULATOR IS DEPRECATED. Consider using SIMULATOR64 instead.\")\nelseif(PLATFORM_INT STREQUAL \"SIMULATOR64\")\n  set(SDK_NAME iphonesimulator)\n  if(NOT ARCHS)\n    set(ARCHS x86_64)\n    set(APPLE_TARGET_TRIPLE_INT x86_64-apple-ios${DEPLOYMENT_TARGET}-simulator)\n  else()\n    set(APPLE_TARGET_TRIPLE_INT ${ARCHS_SPLIT}-apple-ios${DEPLOYMENT_TARGET}-simulator)\n  endif()\nelseif(PLATFORM_INT STREQUAL \"SIMULATORARM64\")\n  set(SDK_NAME iphonesimulator)\n  if(NOT ARCHS)\n    set(ARCHS arm64)\n    set(APPLE_TARGET_TRIPLE_INT aarch64-apple-ios${DEPLOYMENT_TARGET}-simulator)\n  else()\n    set(APPLE_TARGET_TRIPLE_INT ${ARCHS_SPLIT}-apple-ios${DEPLOYMENT_TARGET}-simulator)\n  endif()\nelseif(PLATFORM_INT STREQUAL \"TVOS\")\n  set(SDK_NAME appletvos)\n  if(NOT ARCHS)\n    set(ARCHS arm64)\n    set(APPLE_TARGET_TRIPLE_INT aarch64-apple-tvos${DEPLOYMENT_TARGET})\n  else()\n    set(APPLE_TARGET_TRIPLE_INT ${ARCHS_SPLIT}-apple-tvos${DEPLOYMENT_TARGET})\n  endif()\nelseif (PLATFORM_INT STREQUAL \"TVOSCOMBINED\")\n  set(SDK_NAME appletvos)\n  if(MODERN_CMAKE)\n    if(NOT ARCHS)\n      set(ARCHS arm64 x86_64)\n      set(APPLE_TARGET_TRIPLE_INT aarch64-x86_64-apple-tvos${DEPLOYMENT_TARGET})\n      set(CMAKE_XCODE_ATTRIBUTE_ARCHS[sdk=appletvos*] \"arm64\")\n      set(CMAKE_XCODE_ATTRIBUTE_ARCHS[sdk=appletvsimulator*] \"x86_64\")\n      set(CMAKE_XCODE_ATTRIBUTE_VALID_ARCHS[sdk=appletvos*] \"arm64\")\n      set(CMAKE_XCODE_ATTRIBUTE_VALID_ARCHS[sdk=appletvsimulator*] \"x86_64\")\n    else()\n      set(APPLE_TARGET_TRIPLE_INT ${ARCHS_SPLIT}-apple-tvos${DEPLOYMENT_TARGET})\n    endif()\n  else()\n    message(FATAL_ERROR \"Please make sure that you are running CMake 3.14+ to make the TVOSCOMBINED setting work\")\n  endif()\nelseif(PLATFORM_INT STREQUAL \"SIMULATOR_TVOS\")\n  set(SDK_NAME appletvsimulator)\n  if(NOT ARCHS)\n    set(ARCHS x86_64)\n    set(APPLE_TARGET_TRIPLE_INT x86_64-apple-tvos${DEPLOYMENT_TARGET}-simulator)\n  else()\n    set(APPLE_TARGET_TRIPLE_INT ${ARCHS_SPLIT}-apple-tvos${DEPLOYMENT_TARGET}-simulator)\n  endif()\nelseif(PLATFORM_INT STREQUAL \"WATCHOS\")\n  set(SDK_NAME watchos)\n  if(NOT ARCHS)\n    if (XCODE_VERSION_INT VERSION_GREATER 10.0)\n      set(ARCHS armv7k arm64_32)\n      set(APPLE_TARGET_TRIPLE_INT aarch64_32-apple-watchos${DEPLOYMENT_TARGET})\n    else()\n      set(ARCHS armv7k)\n      set(APPLE_TARGET_TRIPLE_INT arm-apple-watchos${DEPLOYMENT_TARGET})\n    endif()\n  else()\n    set(APPLE_TARGET_TRIPLE_INT ${ARCHS_SPLIT}-apple-watchos${DEPLOYMENT_TARGET})\n  endif()\nelseif(PLATFORM_INT STREQUAL \"WATCHOSCOMBINED\")\n  set(SDK_NAME watchos)\n  if(MODERN_CMAKE)\n    if(NOT ARCHS)\n      if (XCODE_VERSION_INT VERSION_GREATER 10.0)\n        set(ARCHS armv7k arm64_32 i386)\n        set(APPLE_TARGET_TRIPLE_INT aarch64_32-i386-apple-watchos${DEPLOYMENT_TARGET})\n        set(CMAKE_XCODE_ATTRIBUTE_ARCHS[sdk=watchos*] \"armv7k arm64_32\")\n        set(CMAKE_XCODE_ATTRIBUTE_ARCHS[sdk=watchsimulator*] \"i386\")\n        set(CMAKE_XCODE_ATTRIBUTE_VALID_ARCHS[sdk=watchos*] \"armv7k arm64_32\")\n        set(CMAKE_XCODE_ATTRIBUTE_VALID_ARCHS[sdk=watchsimulator*] \"i386\")\n      else()\n        set(ARCHS armv7k i386)\n        set(APPLE_TARGET_TRIPLE_INT arm-i386-apple-watchos${DEPLOYMENT_TARGET})\n        set(CMAKE_XCODE_ATTRIBUTE_ARCHS[sdk=watchos*] \"armv7k\")\n        set(CMAKE_XCODE_ATTRIBUTE_ARCHS[sdk=watchsimulator*] \"i386\")\n        set(CMAKE_XCODE_ATTRIBUTE_VALID_ARCHS[sdk=watchos*] \"armv7k\")\n        set(CMAKE_XCODE_ATTRIBUTE_VALID_ARCHS[sdk=watchsimulator*] \"i386\")\n      endif()\n    else()\n      set(APPLE_TARGET_TRIPLE_INT ${ARCHS_SPLIT}-apple-watchos${DEPLOYMENT_TARGET})\n    endif()\n  else()\n    message(FATAL_ERROR \"Please make sure that you are running CMake 3.14+ to make the WATCHOSCOMBINED setting work\")\n  endif()\nelseif(PLATFORM_INT STREQUAL \"SIMULATOR_WATCHOS\")\n  set(SDK_NAME watchsimulator)\n  if(NOT ARCHS)\n    set(ARCHS i386)\n    set(APPLE_TARGET_TRIPLE_INT i386-apple-watchos${DEPLOYMENT_TARGET}-simulator)\n  else()\n    set(APPLE_TARGET_TRIPLE_INT ${ARCHS_SPLIT}-apple-watchos${DEPLOYMENT_TARGET}-simulator)\n  endif()\nelseif(PLATFORM_INT STREQUAL \"MAC\" OR PLATFORM_INT STREQUAL \"MAC_CATALYST\")\n  set(SDK_NAME macosx)\n  if(NOT ARCHS)\n    set(ARCHS x86_64)\n  endif()\n  string(REPLACE \";\" \"-\" ARCHS_SPLIT \"${ARCHS}\")\n  if(PLATFORM_INT STREQUAL \"MAC\")\n    set(APPLE_TARGET_TRIPLE_INT ${ARCHS_SPLIT}-apple-macosx${DEPLOYMENT_TARGET})\n  elseif(PLATFORM_INT STREQUAL \"MAC_CATALYST\")\n    set(APPLE_TARGET_TRIPLE_INT ${ARCHS_SPLIT}-apple-ios${DEPLOYMENT_TARGET}-macabi)\n  endif()\nelseif(PLATFORM_INT MATCHES \"^(MAC_ARM64)$|^(MAC_CATALYST_ARM64)$\")\n  set(SDK_NAME macosx)\n  if(NOT ARCHS)\n    set(ARCHS arm64)\n  endif()\n  string(REPLACE \";\" \"-\" ARCHS_SPLIT \"${ARCHS}\")\n  if(PLATFORM_INT STREQUAL \"MAC_ARM64\")\n    set(APPLE_TARGET_TRIPLE_INT ${ARCHS_SPLIT}-apple-macosx${DEPLOYMENT_TARGET})\n  elseif(PLATFORM_INT STREQUAL \"MAC_CATALYST_ARM64\")\n    set(APPLE_TARGET_TRIPLE_INT ${ARCHS_SPLIT}-apple-ios${DEPLOYMENT_TARGET}-macabi)\n  endif()\nelse()\n  message(FATAL_ERROR \"Invalid PLATFORM: ${PLATFORM_INT}\")\nendif()\n\nif(MODERN_CMAKE AND PLATFORM_INT MATCHES \".*COMBINED\" AND NOT CMAKE_GENERATOR MATCHES \"Xcode\")\n  message(FATAL_ERROR \"The COMBINED options only work with Xcode generator, -G Xcode\")\nendif()\n\nif(CMAKE_GENERATOR MATCHES \"Xcode\" AND PLATFORM_INT MATCHES \"^MAC_CATALYST\")\n  set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY \"libc++\")\n  set(CMAKE_XCODE_ATTRIBUTE_SUPPORTED_PLATFORMS \"macosx\")\n  set(CMAKE_XCODE_EFFECTIVE_PLATFORMS \"-maccatalyst\")\n  if(NOT DEFINED MACOSX_DEPLOYMENT_TARGET)\n    set(CMAKE_XCODE_ATTRIBUTE_MACOSX_DEPLOYMENT_TARGET \"10.15\")\n  else()\n    set(CMAKE_XCODE_ATTRIBUTE_MACOSX_DEPLOYMENT_TARGET \"${MACOSX_DEPLOYMENT_TARGET}\")\n  endif()\nelseif(CMAKE_GENERATOR MATCHES \"Xcode\")\n  set(CMAKE_XCODE_ATTRIBUTE_IPHONEOS_DEPLOYMENT_TARGET \"${DEPLOYMENT_TARGET}\")\n  if(NOT PLATFORM_INT MATCHES \".*COMBINED\")\n    set(CMAKE_XCODE_ATTRIBUTE_ARCHS[sdk=${SDK_NAME}*] \"${ARCHS}\")\n    set(CMAKE_XCODE_ATTRIBUTE_VALID_ARCHS[sdk=${SDK_NAME}*] \"${ARCHS}\")\n  endif()\nendif()\n\n# If user did not specify the SDK root to use, then query xcodebuild for it.\nif(DEFINED CMAKE_OSX_SYSROOT_INT)\n  # Environment variables are always preserved.\n  set(ENV{_CMAKE_OSX_SYSROOT_INT} \"${CMAKE_OSX_SYSROOT_INT}\")\nelseif(DEFINED ENV{_CMAKE_OSX_SYSROOT_INT})\n  set(CMAKE_OSX_SYSROOT_INT \"$ENV{_CMAKE_OSX_SYSROOT_INT}\")\nelseif(NOT DEFINED CMAKE_OSX_SYSROOT_INT)\n  execute_process(COMMAND ${XCODEBUILD_EXECUTABLE} -version -sdk ${SDK_NAME} Path\n          OUTPUT_VARIABLE CMAKE_OSX_SYSROOT_INT\n          ERROR_QUIET\n          OUTPUT_STRIP_TRAILING_WHITESPACE)\nendif()\n\nif (NOT DEFINED CMAKE_OSX_SYSROOT_INT AND NOT DEFINED CMAKE_OSX_SYSROOT)\n  message(SEND_ERROR \"Please make sure that Xcode is installed and that the toolchain\"\n          \"is pointing to the correct path. Please run:\"\n          \"sudo xcode-select -s /Applications/Xcode.app/Contents/Developer\"\n          \"and see if that fixes the problem for you.\")\n  message(FATAL_ERROR \"Invalid CMAKE_OSX_SYSROOT: ${CMAKE_OSX_SYSROOT} \"\n          \"does not exist.\")\nelseif(DEFINED CMAKE_OSX_SYSROOT_INT)\n  set(CMAKE_OSX_SYSROOT_INT \"${CMAKE_OSX_SYSROOT_INT}\" CACHE INTERNAL \"\")\n  # Specify the location or name of the platform SDK to be used in CMAKE_OSX_SYSROOT.\n  set(CMAKE_OSX_SYSROOT \"${CMAKE_OSX_SYSROOT_INT}\" CACHE INTERNAL \"\")\nendif()\n\n# Use bitcode or not\nif(NOT DEFINED ENABLE_BITCODE AND NOT ARCHS MATCHES \"((^|;|, )(i386|x86_64))+\")\n  # Unless specified, enable bitcode support by default\n  message(STATUS \"[DEFAULTS] Enabling bitcode support by default. ENABLE_BITCODE not provided!\")\n  set(ENABLE_BITCODE TRUE)\nelseif(NOT DEFINED ENABLE_BITCODE)\n  message(STATUS \"[DEFAULTS] Disabling bitcode support by default on simulators. ENABLE_BITCODE not provided for override!\")\n  set(ENABLE_BITCODE FALSE)\nendif()\nset(ENABLE_BITCODE_INT ${ENABLE_BITCODE} CACHE BOOL\n        \"Whether or not to enable bitcode\" FORCE)\n# Use ARC or not\nif(NOT DEFINED ENABLE_ARC)\n  # Unless specified, enable ARC support by default\n  set(ENABLE_ARC TRUE)\n  message(STATUS \"[DEFAULTS] Enabling ARC support by default. ENABLE_ARC not provided!\")\nendif()\nset(ENABLE_ARC_INT ${ENABLE_ARC} CACHE BOOL \"Whether or not to enable ARC\" FORCE)\n# Use hidden visibility or not\nif(NOT DEFINED ENABLE_VISIBILITY)\n  # Unless specified, disable symbols visibility by default\n  set(ENABLE_VISIBILITY FALSE)\n  message(STATUS \"[DEFAULTS] Hiding symbols visibility by default. ENABLE_VISIBILITY not provided!\")\nendif()\nset(ENABLE_VISIBILITY_INT ${ENABLE_VISIBILITY} CACHE BOOL \"Whether or not to hide symbols from the dynamic linker (-fvisibility=hidden)\" FORCE)\n# Set strict compiler checks or not\nif(NOT DEFINED ENABLE_STRICT_TRY_COMPILE)\n  # Unless specified, disable strict try_compile()\n  set(ENABLE_STRICT_TRY_COMPILE FALSE)\n  message(STATUS \"[DEFAULTS] Using NON-strict compiler checks by default. ENABLE_STRICT_TRY_COMPILE not provided!\")\nendif()\nset(ENABLE_STRICT_TRY_COMPILE_INT ${ENABLE_STRICT_TRY_COMPILE} CACHE BOOL\n        \"Whether or not to use strict compiler checks\" FORCE)\n\n# Get the SDK version information.\nif(DEFINED SDK_VERSION)\n  # Environment variables are always preserved.\n  set(ENV{_SDK_VERSION} \"${SDK_VERSION}\")\nelseif(DEFINED ENV{_SDK_VERSION})\n  set(SDK_VERSION \"$ENV{_SDK_VERSION}\")\nelseif(NOT DEFINED SDK_VERSION)\n  execute_process(COMMAND ${XCODEBUILD_EXECUTABLE} -sdk ${CMAKE_OSX_SYSROOT_INT} -version SDKVersion\n          OUTPUT_VARIABLE SDK_VERSION\n          ERROR_QUIET\n          OUTPUT_STRIP_TRAILING_WHITESPACE)\nendif()\n\n# Find the Developer root for the specific iOS platform being compiled for\n# from CMAKE_OSX_SYSROOT.  Should be ../../ from SDK specified in\n# CMAKE_OSX_SYSROOT. There does not appear to be a direct way to obtain\n# this information from xcrun or xcodebuild.\nif (NOT DEFINED CMAKE_DEVELOPER_ROOT AND NOT CMAKE_GENERATOR MATCHES \"Xcode\")\n  get_filename_component(PLATFORM_SDK_DIR ${CMAKE_OSX_SYSROOT_INT} PATH)\n  get_filename_component(CMAKE_DEVELOPER_ROOT ${PLATFORM_SDK_DIR} PATH)\n  if (NOT EXISTS \"${CMAKE_DEVELOPER_ROOT}\")\n    message(FATAL_ERROR \"Invalid CMAKE_DEVELOPER_ROOT: ${CMAKE_DEVELOPER_ROOT} does not exist.\")\n  endif()\nendif()\n\n# Find the C & C++ compilers for the specified SDK.\nif(DEFINED CMAKE_C_COMPILER)\n  # Environment variables are always preserved.\n  set(ENV{_CMAKE_C_COMPILER} \"${CMAKE_C_COMPILER}\")\nelseif(DEFINED ENV{_CMAKE_C_COMPILER})\n  set(CMAKE_C_COMPILER \"$ENV{_CMAKE_C_COMPILER}\")\n  set(CMAKE_ASM_COMPILER ${CMAKE_C_COMPILER})\nelseif(NOT DEFINED CMAKE_C_COMPILER)\n  execute_process(COMMAND xcrun -sdk ${CMAKE_OSX_SYSROOT_INT} -find clang\n          OUTPUT_VARIABLE CMAKE_C_COMPILER\n          ERROR_QUIET\n          OUTPUT_STRIP_TRAILING_WHITESPACE)\n  set(CMAKE_ASM_COMPILER ${CMAKE_C_COMPILER})\nendif()\nif(DEFINED CMAKE_CXX_COMPILER)\n  # Environment variables are always preserved.\n  set(ENV{_CMAKE_CXX_COMPILER} \"${CMAKE_CXX_COMPILER}\")\nelseif(DEFINED ENV{_CMAKE_CXX_COMPILER})\n  set(CMAKE_CXX_COMPILER \"$ENV{_CMAKE_CXX_COMPILER}\")\nelseif(NOT DEFINED CMAKE_CXX_COMPILER)\n  execute_process(COMMAND xcrun -sdk ${CMAKE_OSX_SYSROOT_INT} -find clang++\n          OUTPUT_VARIABLE CMAKE_CXX_COMPILER\n          ERROR_QUIET\n          OUTPUT_STRIP_TRAILING_WHITESPACE)\nendif()\n# Find (Apple's) libtool.\nif(DEFINED BUILD_LIBTOOL)\n  # Environment variables are always preserved.\n  set(ENV{_BUILD_LIBTOOL} \"${BUILD_LIBTOOL}\")\nelseif(DEFINED ENV{_BUILD_LIBTOOL})\n  set(BUILD_LIBTOOL \"$ENV{_BUILD_LIBTOOL}\")\nelseif(NOT DEFINED BUILD_LIBTOOL)\n  execute_process(COMMAND xcrun -sdk ${CMAKE_OSX_SYSROOT_INT} -find libtool\n          OUTPUT_VARIABLE BUILD_LIBTOOL\n          ERROR_QUIET\n          OUTPUT_STRIP_TRAILING_WHITESPACE)\nendif()\n# Find the toolchain's provided install_name_tool if none is found on the host\nif(DEFINED CMAKE_INSTALL_NAME_TOOL)\n  # Environment variables are always preserved.\n  set(ENV{_CMAKE_INSTALL_NAME_TOOL} \"${CMAKE_INSTALL_NAME_TOOL}\")\nelseif(DEFINED ENV{_CMAKE_INSTALL_NAME_TOOL})\n  set(CMAKE_INSTALL_NAME_TOOL \"$ENV{_CMAKE_INSTALL_NAME_TOOL}\")\nelseif(NOT DEFINED CMAKE_INSTALL_NAME_TOOL)\n  execute_process(COMMAND xcrun -sdk ${CMAKE_OSX_SYSROOT_INT} -find install_name_tool\n          OUTPUT_VARIABLE CMAKE_INSTALL_NAME_TOOL_INT\n          ERROR_QUIET\n          OUTPUT_STRIP_TRAILING_WHITESPACE)\n  set(CMAKE_INSTALL_NAME_TOOL ${CMAKE_INSTALL_NAME_TOOL_INT} CACHE INTERNAL \"\")\nendif()\n\n# Configure libtool to be used instead of ar + ranlib to build static libraries.\n# This is required on Xcode 7+, but should also work on previous versions of\n# Xcode.\nget_property(languages GLOBAL PROPERTY ENABLED_LANGUAGES)\nforeach(lang ${languages})\n  set(CMAKE_${lang}_CREATE_STATIC_LIBRARY \"${BUILD_LIBTOOL} -static -o <TARGET> <LINK_FLAGS> <OBJECTS> \" CACHE INTERNAL \"\")\nendforeach()\n\n# CMake 3.14+ support building for iOS, watchOS and tvOS out of the box.\nif(MODERN_CMAKE)\n  if(SDK_NAME MATCHES \"iphone\")\n    set(CMAKE_SYSTEM_NAME iOS)\n  elseif(SDK_NAME MATCHES \"macosx\")\n    set(CMAKE_SYSTEM_NAME Darwin)\n  elseif(SDK_NAME MATCHES \"appletv\")\n    set(CMAKE_SYSTEM_NAME tvOS)\n  elseif(SDK_NAME MATCHES \"watch\")\n    set(CMAKE_SYSTEM_NAME watchOS)\n  endif()\n  # Provide flags for a combined FAT library build on newer CMake versions\n  if(PLATFORM_INT MATCHES \".*COMBINED\")\n    set(CMAKE_XCODE_ATTRIBUTE_ONLY_ACTIVE_ARCH \"NO\")\n    set(CMAKE_IOS_INSTALL_COMBINED YES)\n    message(STATUS \"Will combine built (static) artifacts into FAT lib...\")\n  endif()\nelseif(NOT DEFINED CMAKE_SYSTEM_NAME AND ${CMAKE_VERSION} VERSION_GREATER_EQUAL \"3.10\")\n  # Legacy code path prior to CMake 3.14 or fallback if no CMAKE_SYSTEM_NAME specified\n  set(CMAKE_SYSTEM_NAME iOS)\nelseif(NOT DEFINED CMAKE_SYSTEM_NAME)\n  # Legacy code path prior to CMake 3.14 or fallback if no CMAKE_SYSTEM_NAME specified\n  set(CMAKE_SYSTEM_NAME Darwin)\nendif()\n# Standard settings.\nset(CMAKE_SYSTEM_VERSION ${SDK_VERSION} CACHE INTERNAL \"\")\nset(UNIX TRUE CACHE BOOL \"\")\nset(APPLE TRUE CACHE BOOL \"\")\nif(PLATFORM STREQUAL \"MAC\" OR PLATFORM STREQUAL \"MAC_ARM64\")\n  set(IOS FALSE CACHE BOOL \"\")\n  set(MACOS TRUE CACHE BOOL \"\")\nelseif(PLATFORM STREQUAL \"MAC_CATALYST\" OR PLATFORM STREQUAL \"MAC_CATALYST_ARM64\")\n  set(IOS TRUE CACHE BOOL \"\")\n  set(MACOS TRUE CACHE BOOL \"\")\nelse()\n  set(IOS TRUE CACHE BOOL \"\")\nendif()\nset(CMAKE_AR ar CACHE FILEPATH \"\" FORCE)\nset(CMAKE_RANLIB ranlib CACHE FILEPATH \"\" FORCE)\nset(CMAKE_STRIP strip CACHE FILEPATH \"\" FORCE)\n# Set the architectures for which to build.\nset(CMAKE_OSX_ARCHITECTURES ${ARCHS} CACHE INTERNAL \"\")\n# Change the type of target generated for try_compile() so it'll work when cross-compiling, weak compiler checks\nif(NOT ENABLE_STRICT_TRY_COMPILE_INT)\n  set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)\nendif()\n# All iOS/Darwin specific settings - some may be redundant.\nset(CMAKE_MACOSX_BUNDLE YES)\nset(CMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_REQUIRED \"NO\")\nset(CMAKE_SHARED_LIBRARY_PREFIX \"lib\")\nset(CMAKE_SHARED_LIBRARY_SUFFIX \".dylib\")\nset(CMAKE_SHARED_MODULE_PREFIX \"lib\")\nset(CMAKE_SHARED_MODULE_SUFFIX \".so\")\nset(CMAKE_C_COMPILER_ABI ELF)\nset(CMAKE_CXX_COMPILER_ABI ELF)\nset(CMAKE_C_HAS_ISYSROOT 1)\nset(CMAKE_CXX_HAS_ISYSROOT 1)\nset(CMAKE_MODULE_EXISTS 1)\nset(CMAKE_DL_LIBS \"\")\nset(CMAKE_C_OSX_COMPATIBILITY_VERSION_FLAG \"-compatibility_version \")\nset(CMAKE_C_OSX_CURRENT_VERSION_FLAG \"-current_version \")\nset(CMAKE_CXX_OSX_COMPATIBILITY_VERSION_FLAG \"${CMAKE_C_OSX_COMPATIBILITY_VERSION_FLAG}\")\nset(CMAKE_CXX_OSX_CURRENT_VERSION_FLAG \"${CMAKE_C_OSX_CURRENT_VERSION_FLAG}\")\n\nif(ARCHS MATCHES \"((^|;|, )(arm64|arm64e|x86_64))+\")\n  set(CMAKE_C_SIZEOF_DATA_PTR 8)\n  set(CMAKE_CXX_SIZEOF_DATA_PTR 8)\n  if(ARCHS MATCHES \"((^|;|, )(arm64|arm64e))+\")\n    set(CMAKE_SYSTEM_PROCESSOR \"aarch64\")\n  else()\n    set(CMAKE_SYSTEM_PROCESSOR \"x86_64\")\n  endif()\nelse()\n  set(CMAKE_C_SIZEOF_DATA_PTR 4)\n  set(CMAKE_CXX_SIZEOF_DATA_PTR 4)\n  set(CMAKE_SYSTEM_PROCESSOR \"arm\")\nendif()\n\n# Note that only Xcode 7+ supports the newer more specific:\n# -m${SDK_NAME}-version-min flags, older versions of Xcode use:\n# -m(ios/ios-simulator)-version-min instead.\nif(${CMAKE_VERSION} VERSION_LESS \"3.11\")\n  if(PLATFORM_INT STREQUAL \"OS\" OR PLATFORM_INT STREQUAL \"OS64\")\n    if(XCODE_VERSION_INT VERSION_LESS 7.0)\n      set(SDK_NAME_VERSION_FLAGS\n              \"-mios-version-min=${DEPLOYMENT_TARGET}\")\n    else()\n      # Xcode 7.0+ uses flags we can build directly from SDK_NAME.\n      set(SDK_NAME_VERSION_FLAGS\n              \"-m${SDK_NAME}-version-min=${DEPLOYMENT_TARGET}\")\n    endif()\n  elseif(PLATFORM_INT STREQUAL \"TVOS\")\n    set(SDK_NAME_VERSION_FLAGS\n            \"-mtvos-version-min=${DEPLOYMENT_TARGET}\")\n  elseif(PLATFORM_INT STREQUAL \"SIMULATOR_TVOS\")\n    set(SDK_NAME_VERSION_FLAGS\n            \"-mtvos-simulator-version-min=${DEPLOYMENT_TARGET}\")\n  elseif(PLATFORM_INT STREQUAL \"WATCHOS\")\n    set(SDK_NAME_VERSION_FLAGS\n            \"-mwatchos-version-min=${DEPLOYMENT_TARGET}\")\n  elseif(PLATFORM_INT STREQUAL \"SIMULATOR_WATCHOS\")\n    set(SDK_NAME_VERSION_FLAGS\n            \"-mwatchos-simulator-version-min=${DEPLOYMENT_TARGET}\")\n  elseif(PLATFORM_INT STREQUAL \"MAC\")\n    set(SDK_NAME_VERSION_FLAGS\n            \"-mmacosx-version-min=${DEPLOYMENT_TARGET}\")\n  else()\n    # SIMULATOR or SIMULATOR64 both use -mios-simulator-version-min.\n    set(SDK_NAME_VERSION_FLAGS\n            \"-mios-simulator-version-min=${DEPLOYMENT_TARGET}\")\n  endif()\nelseif(NOT PLATFORM_INT MATCHES \"^MAC_CATALYST\")\n  # Newer versions of CMake sets the version min flags correctly, skip this for Mac Catalyst targets\n  set(CMAKE_OSX_DEPLOYMENT_TARGET ${DEPLOYMENT_TARGET})\nendif()\n\nif(DEFINED APPLE_TARGET_TRIPLE_INT)\n  set(APPLE_TARGET_TRIPLE ${APPLE_TARGET_TRIPLE_INT} CACHE INTERNAL \"\")\n  set(CMAKE_C_COMPILER_TARGET ${APPLE_TARGET_TRIPLE})\n  set(CMAKE_CXX_COMPILER_TARGET ${APPLE_TARGET_TRIPLE})\n  set(CMAKE_ASM_COMPILER_TARGET ${APPLE_TARGET_TRIPLE})\nendif()\n\nif(PLATFORM_INT MATCHES \"^MAC_CATALYST\")\n  set(C_TARGET_FLAGS \"-isystem ${CMAKE_OSX_SYSROOT_INT}/System/iOSSupport/usr/include -iframework ${CMAKE_OSX_SYSROOT_INT}/System/iOSSupport/System/Library/Frameworks\")\nendif()\n\nif(ENABLE_BITCODE_INT)\n  set(BITCODE \"-fembed-bitcode\")\n  set(CMAKE_XCODE_ATTRIBUTE_BITCODE_GENERATION_MODE \"bitcode\")\n  set(CMAKE_XCODE_ATTRIBUTE_ENABLE_BITCODE \"YES\")\nelse()\n  set(BITCODE \"\")\n  set(CMAKE_XCODE_ATTRIBUTE_ENABLE_BITCODE \"NO\")\nendif()\n\nif(ENABLE_ARC_INT)\n  set(FOBJC_ARC \"-fobjc-arc\")\n  set(CMAKE_XCODE_ATTRIBUTE_CLANG_ENABLE_OBJC_ARC \"YES\")\nelse()\n  set(FOBJC_ARC \"-fno-objc-arc\")\n  set(CMAKE_XCODE_ATTRIBUTE_CLANG_ENABLE_OBJC_ARC \"NO\")\nendif()\n\nif(NOT ENABLE_VISIBILITY_INT)\n  foreach(lang ${languages})\n    set(CMAKE_${lang}_VISIBILITY_PRESET \"hidden\" CACHE INTERNAL \"\")\n  endforeach()\n  set(CMAKE_XCODE_ATTRIBUTE_GCC_SYMBOLS_PRIVATE_EXTERN \"YES\")\n  set(VISIBILITY \"-fvisibility=hidden -fvisibility-inlines-hidden\")\nelse()\n  foreach(lang ${languages})\n    set(CMAKE_${lang}_VISIBILITY_PRESET \"default\" CACHE INTERNAL \"\")\n  endforeach()\n  set(CMAKE_XCODE_ATTRIBUTE_GCC_SYMBOLS_PRIVATE_EXTERN \"NO\")\n  set(VISIBILITY \"-fvisibility=default\")\nendif()\n\nif(DEFINED APPLE_TARGET_TRIPLE)\n  set(APPLE_TARGET_TRIPLE_FLAG \"-target ${APPLE_TARGET_TRIPLE}\")\nendif()\n\n#Check if Xcode generator is used, since that will handle these flags automagically\nif(CMAKE_GENERATOR MATCHES \"Xcode\")\n  message(STATUS \"Not setting any manual command-line buildflags, since Xcode is selected as generator.\")\nelse()\n  # Hidden visibility is required for C++ on iOS.\n  set(CMAKE_C_FLAGS \"${C_TARGET_FLAGS} ${APPLE_TARGET_TRIPLE_FLAG} ${SDK_NAME_VERSION_FLAGS} ${BITCODE} -fobjc-abi-version=2 ${FOBJC_ARC} ${CMAKE_C_FLAGS}\")\n  set(CMAKE_CXX_FLAGS \"${C_TARGET_FLAGS} ${APPLE_TARGET_TRIPLE_FLAG} ${SDK_NAME_VERSION_FLAGS} ${BITCODE} ${VISIBILITY} -fobjc-abi-version=2 ${FOBJC_ARC} ${CMAKE_CXX_FLAGS}\")\n  set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS} -O0 -g ${CMAKE_CXX_FLAGS_DEBUG}\")\n  set(CMAKE_CXX_FLAGS_MINSIZEREL \"${CMAKE_CXX_FLAGS} -DNDEBUG -Os -ffast-math ${CMAKE_CXX_FLAGS_MINSIZEREL}\")\n  set(CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS} -DNDEBUG -O2 -g -ffast-math ${CMAKE_CXX_FLAGS_RELWITHDEBINFO}\")\n  set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS} -DNDEBUG -O3 -ffast-math ${CMAKE_CXX_FLAGS_RELEASE}\")\n  set(CMAKE_C_LINK_FLAGS \"${C_TARGET_FLAGS} ${SDK_NAME_VERSION_FLAGS} -Wl,-search_paths_first ${CMAKE_C_LINK_FLAGS}\")\n  set(CMAKE_CXX_LINK_FLAGS \"${C_TARGET_FLAGS} ${SDK_NAME_VERSION_FLAGS}  -Wl,-search_paths_first ${CMAKE_CXX_LINK_FLAGS}\")\n  set(CMAKE_ASM_FLAGS \"${CMAKE_C_FLAGS} -x assembler-with-cpp -arch ${CMAKE_OSX_ARCHITECTURES} ${APPLE_TARGET_TRIPLE_FLAG}\")\nendif()\n\n## Print status messages to inform of the current state\nmessage(STATUS \"Configuring ${SDK_NAME} build for platform: ${PLATFORM_INT}, architecture(s): ${ARCHS}\")\nmessage(STATUS \"Using SDK: ${CMAKE_OSX_SYSROOT_INT}\")\nmessage(STATUS \"Using C compiler: ${CMAKE_C_COMPILER}\")\nmessage(STATUS \"Using CXX compiler: ${CMAKE_CXX_COMPILER}\")\nmessage(STATUS \"Using libtool: ${BUILD_LIBTOOL}\")\nmessage(STATUS \"Using install name tool: ${CMAKE_INSTALL_NAME_TOOL}\")\nif(DEFINED APPLE_TARGET_TRIPLE)\n  message(STATUS \"Autoconf target triple: ${APPLE_TARGET_TRIPLE}\")\nendif()\nmessage(STATUS \"Using minimum deployment version: ${DEPLOYMENT_TARGET}\"\n        \" (SDK version: ${SDK_VERSION})\")\nif(MODERN_CMAKE)\n  message(STATUS \"Merging integrated CMake 3.14+ iOS,tvOS,watchOS,macOS toolchain(s) with this toolchain!\")\nendif()\nif(CMAKE_GENERATOR MATCHES \"Xcode\")\n  message(STATUS \"Using Xcode version: ${XCODE_VERSION_INT}\")\nendif()\nmessage(STATUS \"CMake version: ${CMAKE_VERSION}\")\nif(DEFINED SDK_NAME_VERSION_FLAGS)\n  message(STATUS \"Using version flags: ${SDK_NAME_VERSION_FLAGS}\")\nendif()\nmessage(STATUS \"Using a data_ptr size of: ${CMAKE_CXX_SIZEOF_DATA_PTR}\")\nif(ENABLE_BITCODE_INT)\n  message(STATUS \"Bitcode: Enabled\")\nelse()\n  message(STATUS \"Bitcode: Disabled\")\nendif()\n\nif(ENABLE_ARC_INT)\n  message(STATUS \"ARC: Enabled\")\nelse()\n  message(STATUS \"ARC: Disabled\")\nendif()\n\nif(ENABLE_VISIBILITY_INT)\n  message(STATUS \"Hiding symbols: Disabled\")\nelse()\n  message(STATUS \"Hiding symbols: Enabled\")\nendif()\n\n# Set global properties\nset_property(GLOBAL PROPERTY PLATFORM \"${PLATFORM}\")\nset_property(GLOBAL PROPERTY APPLE_TARGET_TRIPLE \"${APPLE_TARGET_TRIPLE_INT}\")\nset_property(GLOBAL PROPERTY SDK_VERSION \"${SDK_VERSION}\")\nset_property(GLOBAL PROPERTY XCODE_VERSION \"${XCODE_VERSION_INT}\")\nset_property(GLOBAL PROPERTY OSX_ARCHITECTURES \"${CMAKE_OSX_ARCHITECTURES}\")\n\n# Export configurable variables for the try_compile() command.\nset(CMAKE_TRY_COMPILE_PLATFORM_VARIABLES\n        PLATFORM\n        XCODE_VERSION_INT\n        SDK_VERSION\n        DEPLOYMENT_TARGET\n        CMAKE_DEVELOPER_ROOT\n        CMAKE_OSX_SYSROOT_INT\n        ENABLE_BITCODE\n        ENABLE_ARC\n        CMAKE_ASM_COMPILER\n        CMAKE_C_COMPILER\n        CMAKE_C_COMPILER_TARGET\n        CMAKE_CXX_COMPILER\n        CMAKE_CXX_COMPILER_TARGET\n        BUILD_LIBTOOL\n        CMAKE_INSTALL_NAME_TOOL\n        CMAKE_C_FLAGS\n        CMAKE_CXX_FLAGS\n        CMAKE_CXX_FLAGS_DEBUG\n        CMAKE_CXX_FLAGS_MINSIZEREL\n        CMAKE_CXX_FLAGS_RELWITHDEBINFO\n        CMAKE_CXX_FLAGS_RELEASE\n        CMAKE_C_LINK_FLAGS\n        CMAKE_CXX_LINK_FLAGS\n        CMAKE_ASM_FLAGS\n        )\n\nset(CMAKE_PLATFORM_HAS_INSTALLNAME 1)\nset(CMAKE_SHARED_LINKER_FLAGS \"-rpath @executable_path/Frameworks -rpath @loader_path/Frameworks\")\nset(CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS \"-dynamiclib -Wl,-headerpad_max_install_names\")\nset(CMAKE_SHARED_MODULE_CREATE_C_FLAGS \"-bundle -Wl,-headerpad_max_install_names\")\nset(CMAKE_SHARED_MODULE_LOADER_C_FLAG \"-Wl,-bundle_loader,\")\nset(CMAKE_SHARED_MODULE_LOADER_CXX_FLAG \"-Wl,-bundle_loader,\")\nset(CMAKE_FIND_LIBRARY_SUFFIXES \".tbd\" \".dylib\" \".so\" \".a\")\nset(CMAKE_SHARED_LIBRARY_SONAME_C_FLAG \"-install_name\")\n\n# Set the find root to the SDK developer roots.\n# Note: CMAKE_FIND_ROOT_PATH is only useful when cross-compiling. Thus, do not set on macOS builds.\nif(NOT PLATFORM_INT STREQUAL \"MAC\" AND NOT PLATFORM_INT STREQUAL \"MAC_ARM64\")\n  list(APPEND CMAKE_FIND_ROOT_PATH \"${CMAKE_OSX_SYSROOT_INT}\" CACHE INTERNAL \"\")\n  set(CMAKE_IGNORE_PATH \"/System/Library/Frameworks;/usr/local/lib\" CACHE INTERNAL \"\")\nendif()\n\n# Default to searching for frameworks first.\nset(CMAKE_FIND_FRAMEWORK FIRST)\n\n# Set up the default search directories for frameworks.\nif(PLATFORM_INT MATCHES \"^MAC_CATALYST\") \n  set(CMAKE_FRAMEWORK_PATH\n          ${CMAKE_DEVELOPER_ROOT}/Library/PrivateFrameworks\n          ${CMAKE_OSX_SYSROOT_INT}/System/Library/Frameworks\n          ${CMAKE_OSX_SYSROOT_INT}/System/iOSSupport/System/Library/Frameworks\n          ${CMAKE_FRAMEWORK_PATH} CACHE INTERNAL \"\")\nelse()\n  set(CMAKE_FRAMEWORK_PATH\n          ${CMAKE_DEVELOPER_ROOT}/Library/PrivateFrameworks\n          ${CMAKE_OSX_SYSROOT_INT}/System/Library/Frameworks\n          ${CMAKE_FRAMEWORK_PATH} CACHE INTERNAL \"\")\nendif()\n\n# By default, search both the specified iOS SDK and the remainder of the host filesystem.\nif(NOT CMAKE_FIND_ROOT_PATH_MODE_PROGRAM)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM BOTH CACHE INTERNAL \"\")\nendif()\nif(NOT CMAKE_FIND_ROOT_PATH_MODE_LIBRARY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY BOTH CACHE INTERNAL \"\")\nendif()\nif(NOT CMAKE_FIND_ROOT_PATH_MODE_INCLUDE)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE BOTH CACHE INTERNAL \"\")\nendif()\nif(NOT CMAKE_FIND_ROOT_PATH_MODE_PACKAGE)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE BOTH CACHE INTERNAL \"\")\nendif()\n\n#\n# Some helper-macros below to simplify and beautify the CMakeFile\n#\n\n# This little macro lets you set any Xcode specific property.\nmacro(set_xcode_property TARGET XCODE_PROPERTY XCODE_VALUE XCODE_RELVERSION)\n  set(XCODE_RELVERSION_I \"${XCODE_RELVERSION}\")\n  if(XCODE_RELVERSION_I STREQUAL \"All\")\n    set_property(TARGET ${TARGET} PROPERTY XCODE_ATTRIBUTE_${XCODE_PROPERTY} \"${XCODE_VALUE}\")\n  else()\n    set_property(TARGET ${TARGET} PROPERTY XCODE_ATTRIBUTE_${XCODE_PROPERTY}[variant=${XCODE_RELVERSION_I}] \"${XCODE_VALUE}\")\n  endif()\nendmacro(set_xcode_property)\n\n# This macro lets you find executable programs on the host system.\nmacro(find_host_package)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE NEVER)\n  set(_TOOLCHAIN_IOS ${IOS})\n  set(IOS FALSE)\n  find_package(${ARGN})\n  set(IOS ${_TOOLCHAIN_IOS})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM BOTH)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY BOTH)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE BOTH)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE BOTH)\nendmacro(find_host_package)\n"
        },
        {
          "name": "license.txt",
          "type": "blob",
          "size": 34.3232421875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "renovate.json",
          "type": "blob",
          "size": 0.1591796875,
          "content": "{\n    \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n    \"extends\": [\n        \"config:base\"\n    ],\n    \"conan\": {\n        \"enabled\": true\n    }\n}\n"
        },
        {
          "name": "sonar-project.properties",
          "type": "blob",
          "size": 0.42578125,
          "content": "sonar.host.url=https://sonarcloud.io\nsonar.projectKey=cytopia\nsonar.organization=cytopia\n\nsonar.projectVersion=0.2.1\n\n\n# =====================================================\n#   Properties that will be shared amongst all modules\n# =====================================================\n\n# SQ standard properties\nsonar.sources=src\n\nsonar.cfamily.threads=2\nsonar.cfamily.gcov.reportsPath=tests\nsonar.cfamily.build-wrapper-output=bw-output"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}