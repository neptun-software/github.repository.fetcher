{
  "metadata": {
    "timestamp": 1736565653003,
    "page": 544,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "microsoft/bond",
      "stars": 2619,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.94140625,
          "content": "# Have Git automatically detect text files and normalize them.\n\n* text=auto\n\n# Explicit listing for files we know to be text\n\n*.bond text\n*.cabal text\n*.cmake text\n*.config text\n*.cpp text\n*.cs text\n*.csproj text\n*.css text\n*.doxygen text\n*.el text\n*.expressions text\n*.gitattributes text\n*.gitignore text\n*.gitmodules text\n*.gradle text\n*.groovy text\n*.h text\n*.hs text\n*.html text\n*.iml text\n*.java text\n*.json text\n*.md text\n*.name text\n*.nuspec text\n*.proj text\n*.properties text\n*.props text\n*.ps1 text\n*.py text\n*.targets text\n*.tmLanguage text\n*.txt text\n*.xml text\n*.yaml text\n\n# Some Windows-specific files should always be CRLF.\n\n*.cmd text eol=crlf\n*.DotSettings text eol=crlf\n*.sln text eol=crlf\n\n# Linux scripts need to always have LF. If not, things like building a\n# Docker image from Windows will result in un-runable scripts.\n\n*.sh text eol=lf\n*.zsh text eol=lf\n\n# These are binary file types.\n\n*.dat binary\n*.pfx binary\n*.png binary\n*.snk binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1650390625,
          "content": "# CMake\n# Our documentation recommends that the root directory /build/ be used for\n# CMake files.\n/build/\n\n# Emacs\n*~\n\\#*\\#\n\n# Vim\n*.swp\n*.swo\n*.swm\n\n# VS\n.vs/\n.vscode/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.115234375,
          "content": "[submodule \"thirdparty/rapidjson\"]\n    path = thirdparty/rapidjson\n    url = https://github.com/Tencent/rapidjson.git\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 59.0419921875,
          "content": "# Bond Changelog #\n\nNotable changes--especially new features and **breaking changes**--are\nrecorded here.\n\nBond's version numbers follow [Semantic Versioning](http://semver.org/).\nEach release is tagged with a Git tag. The\n[NuGet packages](https://www.nuget.org/packages/Bond.CSharp/) follow the Git\ntag versions. The Bond compiler (`gbc`) and\n[compiler library](https://hackage.haskell.org/package/bond) have a slightly\ndifferent versioning scheme, following the Haskell community's\n[package versioning policy](https://wiki.haskell.org/Package_versioning_policy).\n\n## Bond open-source project ending March 2025\n\nThe Bond open-source project will be ending development on March 31, 2025.\nFor more information, see [the shutdown announcement\nissue](https://github.com/microsoft/bond/issues/1215).\n\n\n## 13.0.2: 2024-11-06 ##\n\n* IDL core version: 3.0\n* C++ version: 13.0.1\n* C# NuGet version: 13.0.2\n* Java version: 13.0.1\n* `gbc` & compiler library: 0.13.0.0\n\n### Java ###\n\n* There were no Java changes in this release.\n\n### C++ ###\n\n* There were no Java changes in this release.\n\n### C# ###\n\n* Fixed assembly versions in NuGet packages.\n\n## 13.0.1: 2024-10-02 ##\n\n* IDL core version: 3.0\n* C++ version: 13.0.1\n* C# NuGet version: 13.0.1\n* Java version: 13.0.1\n* `gbc` & compiler library: 0.13.0.0\n\n### Java ###\n\n* There were no Java changes in this release.\n\n### C++ ###\n\n* `InputBuffer` throws a `StreamException` when trying to skip beyond the \n  end of the stream. This mitigates a CPU DoS vulnerability.\n* Deserialization from JSON payloads will no longer process very deeply\n  nested structures. Instead, a `bond::CoreException` will be thrown in\n  order to protect against stack overflows. The depth limit may be changed\n  by calling the function `bond::SetDeserializeMaxDepth(uint32_t)`.\n* **Breaking change**: Protocols must now implement `CanReadArray` method and\n  Buffers must implement `CanRead` method. These are used to perform checks that\n  mitigate memory allocation vulnerabilities.\n* **Breaking change**: Custom containers must implement `reset_list` and `list_insert`.\n  Standard implementations are provided. This API is used to incrementally fill\n  containers of complex types when preallocation may be unsafe. Expected container\n  size is provided in `reset_list`, where client code can perform sanity checks before\n  any memory is allocated by Bond.\n* `bond::CoreException` is thrown when the payload has a greater declared size\n  than the backing buffer.\n* **Known issue**: Debug builds with MSVC 14.0 (Visual Studio 2015) may fail at\n  runtime if custom allocators for containers are used. Newer MSVC versions and\n  other compilers are not affected, neither are Release builds with MSVC 14.0. This\n  can be worked around by using newer MSVC version or building in Release configuration.\n* Added support for Boost 1.83.\n\n### C# ###\n\n* Fixed compatibility with .NET 9.\n\n## 13.0 ##\n\nThis version was allocated but never released.\n\n## 12.0 ##\n\nThis version was allocated but never released.\n\n## 11.0.1: 2024-06-26 ##\n\n* IDL core version: 3.0\n* C++ version: 11.0.1\n* C# NuGet version: 11.0.1\n* Java version: 11.0.1\n* `gbc` & compiler library: 0.13.0.0\n\n### `gbc` and Bond compiler library ###\n* **Breaking change**: Codegen for Bond-over-gRPC has been removed: the\n  `--grpc` switch is no longer supported. Service definitions are still\n  parsed, but codegen can no longer be done for C++ or C#. See [issue\n  \\#1131, Bond-over-gRPC will be deprecated February\n  2022](https://github.com/microsoft/bond/issues/1131), for the full\n  announcement.\n\n### C++ ###\n\n* **Breaking change**: All Bond-over-gRPC code has been removed. This is\n  everything under the `bond::ext:grpc` namespace. Service definitions can\n  still appear in .bond files, but no C++ code will be generated for them.\n  See [issue \\#1131, Bond-over-gRPC will be deprecated February\n  2022](https://github.com/microsoft/bond/issues/1131), for the full\n  announcement.\n* By default, deserialization will no longer process very deeply nested\n  structures. Instead, an `bond::CoreException` will be thrown in order to\n  protect against stack overflows. The depth limit may be changed by calling\n  the function `bond::SetDeserializeMaxDepth(uint32_t)`.\n* Fixed handling of large containers of invalid types that could cause\n  excessive CPU use when deserializing some payloads.\n\n### C# ###\n\n* **Breaking change**: Update of Newtonsoft.Json library to version 13.3.0.\n([Issue \\#1156](https://github.com/microsoft/bond/issues/1156))\n\n  This update fixes depth check in input JSON string (by default: 64).\n  Depth check is necessary to prevent stack overflow issue with long payloads.\n* **Breaking change**: The minimum supported version of .NET Framework is\n  4.6.2. Support for .NET Framework 4.5 has been dropped.\n* **Breaking change**: All Bond-over-gRPC code has been removed. This is\n  everything under the `Bond.Grpc` namespace and the Bond.Grpc.CSharp NuGet\n  package. Service definitions can still appear in .bond files, but no C#\n  code will be generated for them. See [issue \\#1131, Bond-over-gRPC will be\n  deprecated February 2022](https://github.com/microsoft/bond/issues/1131),\n  for the full announcement.\n* Added codegen and deserialization support for container type aliases to\n  use\n  [System.Collections.Immutable](https://learn.microsoft.com/dotnet/api/system.collections.immutable)\n  collections. (Pull request\n  [\\#1161](https://github.com/microsoft/bond/pull/1161))\n* By default, deserialization will no longer process very deeply nested\n  structures. Instead, an `InvalidOperationException` will be thrown in\n  order to protect against stack overflows. The depth limit may be changed\n  by setting the property `Bond.DeserializerControls.Active.MaxDepth`.\n\n### Java ###\n\n* By default, deserialization will no longer process very deeply nested\n  structures. Instead, a `org.bondlib.InvalidBondDataException` exception\n  will be thrown in order to protect against stack overflows. The depth\n  limit may be changed by calling the method\n  `org.bondlib.bond.DeserializerControls.setMaxDepth`.\n\n## 11.0.0 ##\n\nThis version was allocated but never released.\n\n## 10.0: 2022-03-07 ##\n\n* IDL core version: 3.0\n* C++ version: 10.0\n* C# NuGet version: 10.0\n* `gbc` & compiler library: 0.12.1.0\n\n### C++ ###\n\n* **Breaking change**: Bond-over-gRPC has been marked deprecated.\n  Bond-over-gRPC will be removed in the next major version of Bond. See\n  [issue \\#1131, Bond-over-gRPC will be deprecated February\n  2022](https://github.com/microsoft/bond/issues/1131), for the full\n  announcement.\n  * The `[[deprecated]]` attribute has been added to the `bond::ext::grpc`\n    namespace in every top-level Bond-over-gRPC++ header. This will cause\n    compiler warnings/errors for uses of Bond-over-gRPC++ that you may need\n    to handle.\n* Fixed multiple symbol definition for Win32Exception in\n  `grpc/win_thread_pool.h`. ([Issue\n  \\#1129](https://github.com/microsoft/bond/issues/1129))\n* Add forward declaration for `GenericWriteVariableUnsigned` to fix \"C3861:\n  'GenericWriteVariableUnsigned': identifier not found\" when using custom\n  streams that do not have their own implementation of\n  `WriteVariableUnsigned`. ([Issue\n  \\#1115](https://github.com/microsoft/bond/issues/1115))\n* Fixed `bond::DynamicParser` that may not emit transform's `OmittedField`\n  for compile-time schema and an omitted optional field in the payload.\n  ([Issue \\#1120](https://github.com/microsoft/bond/issues/1120))\n* Fixed missing include directives.\n* Removed `bond::blob`'s unnecessary `_content` member, reducing its size\n  by 1 pointer.\n* Added an ability to apply transform to a schema.\n* Added `noexcept` to `bond::blob`'s non-throwing functions.\n\n### C# ###\n\n* **Breaking change**: Bond-over-gRPC code has been marked deprecated.\n  Bond-over-gRPC will be removed in the next major version of Bond. See\n  [issue \\#1131, Bond-over-gRPC will be deprecated February\n  2022](https://github.com/microsoft/bond/issues/1131), for the full\n  announcement.\n  * The `[Obsolete]` attribute has been added to every public type in the\n    `Bond.Grpc` assembly. This will cause compiler warnings/errors for uses\n    of Bond-over-gRPC# that you may need to handle.\n* Added virtual method `OutputBuffer.ResizeBuffer` that can be overridden to\n  use buffer allocators other than `new byte[]` (e.g.\n  `ArrayPool<byte>.Rent()`). ([Pull request\n  \\#1128](https://github.com/microsoft/bond/pull/1128))\n* The error message emitted when duplicate .bond items are detected by the\n  MSBuild codegen now correctly refers to `$(EnableDefaultItems)` as the\n  switch that controls this behavior. ([Issue\n  \\#1110](https://github.com/microsoft/bond/issues/1110))\n\n## 9.0.5: 2021-04-14 ##\n\n* IDL core version: 3.0\n* C++ version: 9.0.5\n* C# NuGet version: 9.0.5\n* `gbc` & compiler library: 0.12.1.0\n\n### C++/Python ###\n\n* Added CMake variable `BOND_FIND_GRPC` to allow for external gRPC\n  installations. The search for external GRPC installations is only done\n  when `BOND_ENABLE_GRPC` is `TRUE`.\n* Removed use of deprecated `std::ptr_fun` in the Python library. ([Issue\n  \\#1080](https://github.com/microsoft/bond/issues/1080))\n\n### C# ###\n\n* Implicit codegen now excludes any .bond files in the project's output\n  directories (e.g., `bin/`, `obj/debug/netstandard1.0`). This behavior\n  matches the implicit compilation behavior for .cs files.\n\n## 9.0.4: 2020-11-23 ##\n\n* IDL core version: 3.0\n* C++ version: 9.0.4\n* C# NuGet version: 9.0.3\n* `gbc` & compiler library: 0.12.1.0\n\n### C++ ###\n\n* Bond now uses the `[[noreturn]]` attribute to annotate functions that do\n  not return. Previously, it used compiler-specific annotations.\n\n### C# ###\n\n* There were no C# changes in this release.\n\n## 9.0.3: 2020-08-06 ##\n\n* IDL core version: 3.0\n* C++ version: 9.0.2\n* C# NuGet version: 9.0.3\n* `gbc` & compiler library: 0.12.1.0\n\n### C++ ###\n\n* There were no C++ changes in this release.\n\n### C# ###\n\n* Fixed a performance regression in `OutputBuffer.Grow`: it was incorrectly\n  growing the buffer by one byte at a time instead of geometrically. ([Issue\n  \\#1065](https://github.com/microsoft/bond/issues/1065), [Pull request\n  \\#1066](https://github.com/microsoft/bond/pull/1066))\n\n## 9.0.2: 2020-08-03 ##\n* IDL core version: 3.0\n* C++ version: 9.0.2\n* C# NuGet version: 9.0.2\n* `gbc` & compiler library: 0.12.1.0\n\n### C++ ###\n\n* gbc is now installed with 555 (r-xr-xr-x) permissions. ([Issue\n  \\#1062](https://github.com/microsoft/bond/issues/1062))\n\n### C# ###\n\n* Fixed a regression writing to non-seekable streams using\n  `CompactBinaryWriter`. The fix in commit\n  [b0fd4a1](https://github.com/microsoft/bond/commit/b0fd4a15a7cae946dd2855122559ca59cc34dbea#diff-9534daaa1fb3d4776494b25c8bba3939L212)\n  inadvertently added a call to `Stream.Position` in the Release\n  configuration. This call is only intended to be made when Bond is built in\n  the Debug configuration.\n\n## 9.0.1: 2020-07-14 ##\n* IDL core version: 3.0\n* C++ version: 9.0.1\n* C# NuGet version: 9.0.1\n* `gbc` & compiler library: 0.12.1.0\n\n### C++ ###\n* The RapidJSON submodule now points to commit\n  [8f4c021](https://github.com/Tencent/rapidjson/commit/8f4c021fa2f1e001d2376095928fc0532adf2ae6).\n  This addresses some aliasing warnings in recent versions of Clang and GCC.\n    * The RapidJSON submodule now uses its new home under the [Tencent\n      organization](https://github.com/Tencent/rapidjson.git).\n\n### C# ###\n\n* Fixed MSB3105/CS2002 error about duplicate Compile items when a directory\n  contains multiple .bond files and `--gprc` is in `$BondOptions`. ([Issue\n  \\#1050](https://github.com/microsoft/bond/issues/1050))\n* Fix handling of large container lengths that could cause an infinite loop\n  when deserializing some payloads. This fix addresses\n  [CVE-2020-1469](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-1469).\n\n## 9.0: 2020-05-26  ##\n* IDL core version: 3.0\n* C++ version: 9.0.0\n* C# NuGet version: 9.0.0\n* `gbc` & compiler library: 0.12.1.0\n\n### C++ ###\n* **Breaking change** MSVC 2013 support has been removed. ([Issue\n  \\#851](https://github.com/microsoft/bond/issues/851))\n* **Breaking change** `bond/core/warning.h` has been deleted. Since the\n  [5.3.0 release](#530-2017-04-12), Bond hasn't needed global warning\n  suppressions for any compiler except MSVC 2013. This file was only used\n  for MSVC 2013, which is no longer a supported compiler.\n* Fixed MSVC warning for deprecation of `std::result_of_t` in `/std:c++17`.\n  ([Issue \\#1007](https://github.com/microsoft/bond/issues/1007))\n* Fixed MSVC warning C5208: unnamed class used in typedef name cannot\n  declare members other than non-static data members, member enumerations,\n  or member classes. ([Issue\n  \\#1027](https://github.com/microsoft/bond/issues/1027))\n* Fixed Boost 1.73 warning \"The practice of declaring the Bind placeholders\n  (_1, _2, ...) in the global namespace is deprecated.\" ([Pull request\n  \\#1036](https://github.com/microsoft/bond/pull/1036))\n\n### C# ###\n\n* Fixed creation of duplicate default constructor when defining an empty struct\n  and using `--preview-constructor-parameters`.\n  ([Issue \\#963](https://github.com/microsoft/bond/issues/963))\n* The .NET assemblies are now only Authenticode signed with SHA-2. Legacy\n  Windows OS versions may need [updates to work with SHA-2\n  signatures](https://support.microsoft.com/en-us/help/4472027/2019-sha-2-code-signing-support-requirement-for-windows-and-wsus).\n\n### `gbc` and Bond compiler library ###\n* C++ codegen no longer supports MSVC 2013.\n* gbc is now only Authenticode signed with SHA-2. Legacy Windows OS versions\n  may need [updates to work with SHA-2\n  signatures](https://support.microsoft.com/en-us/help/4472027/2019-sha-2-code-signing-support-requirement-for-windows-and-wsus).\n\n## gbc & compiler library 0.12.0.1: 2019-11-21 ##\n* IDL core version: 3.0\n* C++ version: 8.2.0\n* C# NuGet version: 8.2.0\n* `gbc` & compiler library: 0.12.0.1\n\nThere are no changes to code generation or the language projections.\n\n### Bond compiler library ###\n\n* Fixed Cabal packaging issues that prevented the publication of\n  [0.12.0.0](#820-2019-11-18).\n\n## 8.2.0: 2019-11-18  ##\n* IDL core version: 3.0\n* C++ version: 8.2.0\n* C# NuGet version: 8.2.0\n* `gbc` & compiler library: 0.12.0.0\n\n### C++ ###\n\n* gRPC v1.17.1 is now required to use Bond-over-gRPC.\n* Fixed an ambiguous `HexDigit` overload compilation error when\n  compiling with some versions of GCC. ([Pull request\n  \\#954](https://github.com/Microsoft/bond/pull/954))\n* Fixed ambiguous call to `maybe::operator==` that breaks GCC 9\n  build. ([Pull request\n  \\#975](https://github.com/microsoft/bond/pull/975))\n* Fixed MSVC warning C4296: \"'<': expression is always false\" in protocol.h.\n  ([Issue\n  \\#981](https://github.com/microsoft/bond/issues/981))\n\n### C# ###\n\n* Added .NET 4.6 target framework to Bond.IO.dll so that it can use\n  `MemoryStream.TryGetBuffer()` when cloning streams like is done when\n  targeting .NET Standard 1.3+.\n\n### Bond compiler library ###\n\n* **Breaking change** The bond compiler library (the Haskell library) and\n  `gbc` have been switched to build with stackage snapshot lts-14.4. This\n  snapshot uses megaparsec 7 and aeson 1.4.4, both of which had breaking\n  changes that are reflected in the library, e.g., the `parseBond` signature\n  has changed. There is no impact to users of the gbc command line tool or\n  changes to C++ and C# code generation.\n\n## 8.1.0: 2019-03-27 ##\n\n### C++ ###\n\n* There were no C++ changes in this release.\n\n### C# ###\n\n* Updated to gRPC v1.17.1.\n* Add a constructor that accepts a `CallInvoker` instance to the generated\n  gRPC clients to support client-side interceptors. For more details about\n  C# interceptors, see the [proposal in the gRPC\n  project](https://github.com/grpc/proposal/blob/master/L12-csharp-interceptors.md).\n  [Issue \\#950](https://github.com/microsoft/bond/issues/950)\n\n## 8.0.1: 2018-06-29 ##\n* `gbc` & compiler library: 0.11.0.3\n* IDL core version: 3.0\n* C++ version: 8.0.1\n* C# NuGet version: 8.0\n\n### C++ ###\n* Fixed a crash in `bond::ext::grpc::server`'s destructor when invoked on\n  a moved-from object instance.\n* Added move-assignment operator to `bond::blob`.\n* Added cmake variable `BOND_FIND_RAPIDJSON` to allow for external RapidJSON installations.\n\n### C# ###\n\n* There were no C# changes in this release.\n\n### C# ###\n* Fixed alias conversion issue for generic fields [Issue\n  \\#928](https://github.com/microsoft/bond/issues/928).\n\n## 8.0.0: 2018-05-30 ##\n* `gbc` & compiler library: 0.11.0.0\n* IDL core version: 3.0\n* C++ version: 8.0\n* C# NuGet version: 8.0\n\n### `gbc` and Bond compiler library ###\n\n* **Breaking change** The deprecated Bond Comm functionality has been removed.\n  This includes all gbc options related to Comm and the Comm codegen templates\n  in the Haskell library. [Issue\n  \\#824](https://github.com/microsoft/bond/issues/824)\n* C++ codegen now properly generates move assignment operators. Previously,\n  this was broken for some cases.\n* C++ codegen no longer generates checks for C++11, except for MSVC 2013\n  workarounds.\n* C++ codegen no longer generates data member initialization that invokes a\n  constructor accepting `Comparer` for associative containers.\n* C++ codegen can now generate copy and move constructors with an allocator\n  argument when a custom allocator is used and `--alloc-ctors` is passed to\n  `gbc`.\n* C++ codegen can now generate [type\n  aliases](http://en.cppreference.com/w/cpp/language/type_alias) that\n  correspond to ones in IDL when the `--type-aliases` flag is passed to `gbc`.\n* C++ codegen can now use\n  [`std::scoped_allocator_adaptor`](http://en.cppreference.com/w/cpp/memory/scoped_allocator_adaptor)\n  for strings and containers when a custom allocator is used and the\n  `--scoped-alloc` flag is passed to `gbc`.\n* C++ codegen now generates lazily constructed enum name-to-value and\n  value-to-name maps. Additionally, a user-defined map type can now be\n  provided to `GetNameToValueMap` and `GetValueToNameMap`.\n* C++ codegen now applies the `--export-attribute` to the `ToString`,\n  `FromString`, `ToEnum` and `FromEnum` functions.\n* Fixed a bug in C++ codegen that incorrectly applied the export attribute to\n  generic gRPC services.\n* C++ codegen now generates an `allocator_type` typedef for a struct when the\n  `--allocator` option is passed to `gbc`, instead of specializing\n  `std::uses_allocator`.\n* `import` statements can now end with an optional semicolon.\n* File and directory paths on the command line, in response files, or in\n  `import` statements can now use a mix of forward and backslashes. [Issue\n  \\#869](https://github.com/microsoft/bond/issues/869)\n* gbc is now Authenticode dual-signed with both SHA-1 and SHA-2.\n\n### C++ ###\n\n* **Breaking change** The deprecated Bond Comm functionality has been removed.\n  This includes all gbc options related to Comm and all Comm APIs and header\n  files. [Issue \\#824](https://github.com/microsoft/bond/issues/824)\n* **Breaking change** Only versions of Boost released in the past two years\n  (1.61 and newer) are supported. Bond will *likely* continue to work with\n  older versions, but it is no longer tested with anything older than 1.61.\n  Test coverage for Boost versions 1.61&ndash;1.66 has been improved. [Issue\n  \\#771](https://github.com/microsoft/bond/issues/771)\n* **Breaking change** Constructors accepting a `Comparer` have been removed\n  from the `bond::maybe` and `bond::nullable` types.\n* **Breaking change** The `bond::is_blob` and `bond::is_nullable` traits have\n  been removed. The `blob` and `nullable` types are not customizable, so these\n  where never needed or used. The related functionality provided by\n  `bond::get_list_sub_type_id` remains.\n* **Breaking change** Removed a dangerous implicit conversion operator from\n  `bond::maybe<T>` to `const T&`. To access a `bond::maybe<T>` value, use one\n  of the `bond::maybe<T>::value` functions.\n* **Breaking change** The nested `pointer`, `const_pointer`, `reference` and\n  `const_reference` typedefs have been removed from `bond::nullable<T>`.\n* **Breaking change** The `Allocator` (second) type parameter has be removed\n  from `bond::nullable<T>` and now it is always deduced from `T`.\n* **Breaking change** The `bond::capped_allocator` and related types have been\n  moved to the `bond::ext` namespace and the \"bond/ext\" include directory.\n* **Breaking changes** in Bond-over-gRPC (based on real-world use and\n  feedback). Check the updated\n  [examples](https://github.com/microsoft/bond/tree/master/examples/cpp/grpc)\n  to see how to use the changed APIs.\n  - The generated `ClientCore` and `ServiceCore` class templates and the\n    `Client` and `Service` convenience typedefs have all been replaced with\n    normal classes named `Client` and `Service`. The `ThreadPool` type\n    parameter has been removed in favor of a simplified runtime representation\n    of a `Scheduler`.\n  - The `Scheduler` concept and the `bond::ext::gRPC::thread_pool`\n    implementation now use `operator()` instead of a `schedule()` member\n    function.\n  - The `bond::ext::gRPC::server_core` class template and the\n    `bond::ext::gRPC::server` convenience typedef have been replaced with the\n    normal class `bond::ext::gRPC::server`.\n  - The generated `Client::Async*` functions now accept the\n    `std::shared_ptr<grpc::ClientContext>` argument as the last parameter\n    instead of as the first. This makes is easier to omit this parameter when\n    no context customization is needed.\n  - The client callback now directly accepts\n    `bond::ext::gRPC::unary_call_result<Response>` (drops the\n    `std::shared_ptr`). Also the `unary_call_result` now exposes read-only\n    getters rather than fields. This simplified the type that clients need to\n    deal with.\n  - The `bond::ext::gRPC::wait_callback::arg_type` has been removed.\n  - The `client_callback.h` header file has been renamed to\n    `unary_call_result.h` to align with its contents.\n  - The `bond::ext::gRPC::server_builder` has been replaced by the\n    `bond::ext::gRPC::server::Start` factory function which now returns a\n    plain `bond::ext::gRPC::server` object and accepts service instances\n    managed by `std::unique_ptr`. This properly models the lifetime\n    requirements. Service implementations must now pass a `Scheduler` to the\n    generated `Service` base class which is no longer default constructible.\n  - The generated method reflection information no longer uses a redundant\n    `bonded<T>` wrapper for `input_type` and `result_type` typedefs.\n  - The `bond::ext::gRPC::unary_call` no longer requires `bonded<T>` wrapper\n    for request type.\n  - The `bond::ext::gRPC::unary_call::FinishWithError` has been renamed to\n    `Finish`. Overloads that take a status can be used to signal an error.\n  - The `grpc::Status` second argument has been removed from\n    `bond::ext::gRPC::unary_call::Finish`. gRPC does not support sending a\n    response with a non-OK status, so the payload was being droped anyway.\n  - Fixed `bond::ext::gRPC::unary_call`, `bond::ext::gRPC::shared_unary_call`\n    and `bond::ext::gRPC::unary_call_result` types to properly use `void` and\n    `bond::reflection::nothing` instead of the `bond::Void` empty struct. Also\n    removed unnecessary functions from `unary_call` and `shared_unary_call`\n    for those cases when they are not applicable (e.g. `Finish` is not\n    available when return type is `nothing`).\n* gRPC v1.12.0 is now required to use Bond-over-gRPC.\n    * This version include a number of memory leak fixes that users of\n      Bond-over-gRPC were encountering. [Issue\n      \\#810](https://github.com/microsoft/bond/issues/810)\n    * This version include some Windows-specific performance\n      improvements for loopback connections.\n* The `bond::ext::gRPC::wait_callback` has been deprecated in favor of\n  additionally generated client functions that return `std::future`.\n* Fixed includes for gRPC services with events or parameterless methods.\n  [Issue \\#735](https://github.com/microsoft/bond/issues/735)\n* Fixed a bug which would read an unrelated struct's field(s) when\n  deserializing a base struct. [Issue\n  \\#742](https://github.com/microsoft/bond/issues/742)\n* Fixed a bug in `bond::MapTo<T>::Field` that failed to pass the `Protocols`\n  type parameter to `bond::Apply`.\n* Fixed a race condition when `bond::ext::gRPC::io_manager::shutdown` and\n  `bond::ext::gRPC::io_manager::wait` are called concurrently.\n* Fixed a race condition during `bond::ext::gRPC::unary_call` destruction.\n* Fixed the broken move constructor of `bond::bonded<T, Reader&>`.\n* Fixed the move constructor of `bond::value` to actually move the underlying reader.\n* Added the `bond::blob_prolong` helper function that will return a\n  `bond::blob` with a copied data if the original one does not own the memory.\n* The `bond::OutputBuffer::GetBuffers` now can accept arbitrary STL-like\n  containers.\n* `bond::maybe<T>` has been overhauled.\n    * Fixed a bug that default initialized an instance of `T` even when a\n      maybe held nothing.\n    * Added `noexcept` variants of `bond::maybe<T>::value`.\n    * Added `bond::maybe<T>::emplace` to construct a maybe's value in place.\n    * Added various rvalue-reference and allocator-aware constructors and\n      assignment operators.\n    * Added `operator==(const bond::maybe<T>&, const T&)` and\n      `operator==(const T&, const bond::maybe<T>&)` to compare directly to\n      instances of `T`.\n* Fixed an issue with the `ToString`, `FromString`, `ToEnum` and `FromEnum`\n  functions that were previously not exported from a DLL when the\n  `--export-attribute` option was passed to `gbc`. [Issue\n  \\#861](https://github.com/microsoft/bond/issues/861)\n* Fixed a bug in `bond::nullable<T, Alloc>` where it was not propagating an\n  allocator to `T` when `allocator_type` was not explicitly defined.\n* Fixed a bug in `bond::make_box` where `const T&` was not handled correctly.\n* The use of `bond::check_method` has been replaced with less restricting\n  expression SFINAE checks on supported compilers. [Issue\n  \\#896](https://github.com/microsoft/bond/issues/896)\n* Fixed a bug where `bond::ext::gRPC::io_manager` could cause a thread to join\n  itself.\n* The preferred namespace for Bond-over-gRPC is now `bond::ext::grpc`. The\n  previous namespace, `bond::ext::gRPC`, continues to work.\n* Added a Windows-specific implementation of a [thread\n  pool](https://msdn.microsoft.com/en-us/library/windows/desktop/ms686766(v=vs.85).aspx).\n\n### C# ###\n\n* **Breaking change** The deprecated Bond Comm functionality has been removed.\n  This includes all gbc options related to Comm and all Comm APIs, assemblies,\n  and NuGet packages. [Issue\n  \\#824](https://github.com/microsoft/bond/issues/824)\n* **Breaking change** The Bond.CSharp and Bond.Compiler.CSharp NuGet packages\n  perform implicit codegen when the simplified .NET Core `.csproj` format is\n  used. This breaking change *does not* affect projects using the classic\n  `.csproj` format. Any .NET Core projects that encounter the build error\n  \"Duplicate BondCodegen items were included.\" and were explicitly listing\n  `BondCodegen` items will either need to rely on implicit codegen or [disable\n  all implicit inclusion](https://aka.ms/sdkimplicititems). To set per-item\n  metadata, use the [item update\n  syntax](https://docs.microsoft.com/en-us/visualstudio/msbuild/item-element-msbuild#examples).\n  [Issue \\#636](https://github.com/microsoft/bond/issues/636)\n* The C# attribute `Bond.Attribute` can now be applied to methods. This fixes\n  broken codegen when attributes are used on service methods. [Issue\n  \\#617](https://github.com/microsoft/bond/issues/617)\n* Bond Attributes on service methods are now present on all the client\n  overloads for the methods. Previously, just the \"friendly\" method had the\n  attributes.\n* Grpc.Core v1.12.0 is now required to use Bond-over-gRPC.\n    * This version include a number of memory leak fixes that users of\n      Bond-over-gRPC were encountering. [Issue\n      \\#810](https://github.com/microsoft/bond/issues/810)\n    * This version include some Windows-specific performance improvements for\n      loopback connections.\n* `BondCodegen` items will now appear in the Visual Studio 2017+ UI in .NET\n  Core projects.\n* The .NET Standard assemblies are fully strong-name signed. Previously, they\n  were inadvertently only public strong-name signed.\n* The .NET assemblies are now Authenticode dual-signed with both SHA-1 and\n  SHA-2.\n* Fixed a bug in the codegen targets when using `gbc` from $PATH on macOS and\n  Linux that prevented the C# compiler from finding the generated C# files.\n* *Preview*: Added preliminary support for generating types with constructors\n  with parameters for each field. This functionality will change in the future\n  and may be removed. [Pull request\n  \\#857](https://github.com/microsoft/bond/pull/857)\n\n## 7.0.2: 2017-10-30 ##\n* `gbc` & compiler library: 0.10.1.0\n* IDL core version: 2.0\n* IDL comm version: 1.2\n* C++ version: 7.0.2\n* C# NuGet version: 7.0.1\n* C# Comm NuGet version: 0.14.0\n\n### C++ ###\n\n* Fixed a memory leak when deserializing Bond-over-gRPC messages that were\n  stored as multiple slices.\n\n### C# ###\n\n* There were no C# changes in this release.\n\n## 7.0.1: 2017-10-26 ##\n* `gbc` & compiler library: 0.10.1.0\n* IDL core version: 2.0\n* IDL comm version: 1.2\n* C++ version: 7.0.0\n* C# NuGet version: 7.0.1\n* C# Comm NuGet version: 0.14.0\n\n### C# ###\n\n* Fixes a regression introduced in 7.0.0 that resulted in an exception during\n  generation of Serializer instances if the type contained an aliased\n  `required` blob field.\n\n## 7.0.0: 2017-10-24 ##\n* `gbc` & compiler library: 0.10.1.0\n* IDL core version: 2.0\n* IDL comm version: 1.2\n* C++ version: 7.0.0\n* C# NuGet version: 7.0.0\n* C# Comm NuGet version: 0.13.0\n\n### `gbc` and Bond compiler library ###\n\n* Add service/method annotations in C# for Comm and gRPC.\n* Add service/method metadata support in C++ for gRPC.\n* C++ codegen now uses [`std::allocator_traits`](http://en.cppreference.com/w/cpp/memory/allocator_traits)\n  for rebinding allocator types.\n\n### C++ ###\n\n* Added `bond::make_box` helper function to create `bond::Box<T>` instances.\n* When Unicode conversion fails during JSON deserialization to wstring, a\n  bond::CoreException is now thrown instead of a Boost exception.\n* When SimpleJSON deserializes a map key with no matching value, a\n  bond::CoreException is now thrown.\n* When SimpleJSON deserializes a map key of non-primitive type, a\n  bond::CoreException is now thrown.\n* Errors from some versions of G++ like \"non-template type `Deserialize`\n  used as a template\" have been fixed.\n  [Issue \\#538](https://github.com/microsoft/bond/issues/538)\n* Guard against overflows in OutputMemoryStream, blob, and SimpleArray.\n* Use RapidJSON's iterative parser to handle deeply nested JSON data without\n  causing a stack overflow.\n* Guard against min/max being function-style macros in more places.\n* Allow Bond-generated C++ types to use non-default-constructable\n  allocators. (This works even on MSVC 2013 by only compiling the\n  generated-type's default constructor if it is used. The default\n  constructor is now a templated constructor that is invokable with zero\n  arguments.)\n* Fixed some macro uses that did not have sufficient parenthesis around\n  parameters and resulted in compiler errors.\n* Added the `bond::ext::gRPC::shared_unary_call` type. This type can be used\n  when shared ownership semantics are needed for `unary_call` instances.\n* Provide compile-time access to metadata about gRPC services and methods.\n* Using `bond::ext::gRPC::wait_callback` no longer causes a shared_ptr cycle\n  and the resulting resource leak.\n* Ensure that `bond_grpc.h` and `bond_const_grpc.h` are generated when the\n  CMake variable `BOND_ENABLE_GRPC` is set to that importing `bond.bond` and\n  `bond_const.bond` when defining a service works.\n* Added `bond::capped_allocator` adapter that will allow to limit the max\n  number of bytes to allocate during deserialization.\n\n### C# ###\n\n* **Breaking change** The code generation MSBuild targets no longer support\n  Mono's xbuild: only MSBuild is supported. Mono has\n  [deprecated xbuild in favor of MSBuild](http://www.mono-project.com/docs/about-mono/releases/5.0.0/#msbuild)\n  now that\n  [MSBuild is open source and cross-platform](https://github.com/microsoft/msbuild).\n* **Breaking change** The code generation MSBuild targets now automatically\n  compile the generated `_grpc.cs` files if `--grpc` is passed to `gbc`.\n  Explicit `<Compile Include=\"$(IntermediateOutputPath)foo_grpc.cs\" />`\n  lines in MSBuild projects will need to be removed to fix error MSB3105\n  about duplicate items. See commit\n  [a120cd99](https://github.com/microsoft/bond/commit/a120cd9995d74e11b75766c5195ea4587c304dd7#diff-3b0b4bed9029ae89dbfb824ce7eff5e8R54)\n  for an example of how to fix this.\n  [Issue \\#448](https://github.com/microsoft/bond/issues/448)\n* **Breaking change** The low-level API `IParser.ContainerHandler` now has an\n  `arraySegment` parameter for the converted blob.\n* The code generation MSBuild targets will now skip compiling the\n  `_types.cs` files when `--structs=false` is passed to `gbc`.\n* Added `Bond.Box.Create` helper method to create `Bond.Box<T>` instances.\n* Reflection.IsBonded now recognizes custom IBonded implementations.\n* Use Newtonsoft's JSON.NET BigInteger support -- when available -- to\n  handle the full range of uint64 values in the SimpleJson protocol (.NET\n  4.5 or greater, .NET Standard 1.6 or greater).\n* `Bond.IO.Unsafe.InputStream` can now be used with streams that do not\n  implement [`Stream.Seek`][msdn-stream-seek], like\n  [`System.IO.Compression.GzipStream`][msdn-gzipstream].\n  [Issue \\#498](https://github.com/microsoft/bond/issues/498)\n    * Such streams are detected by inspecting\n      [`Stream.CanSeek`][msdn-stream-canseek].\n* Fix a bug in CompactBinaryWriter when using v2 that repeated first pass\n  when a bonded field was serailized, resulting in extra work and extra\n  state left in the CompactBinaryWriter.\n* Apply IDL annotations to services and methods for gRPC.\n  [Issue \\#617](https://github.com/microsoft/bond/issues/617)\n* Fixed a bug that produced C# code that couldn't be compiled when using\n  Bond-over-gRPC with a generic type instantiated with a collection.\n  [Issue \\#623](https://github.com/microsoft/bond/issues/623)\n* When targeting .NET 4.5, avoid resolving external entities when using\n  `SimpleXmlReader`.\n* Remove redundant conversions during serialization of aliased blobs.\n\n[msdn-gzipstream]: https://msdn.microsoft.com/en-us/library/system.io.compression.gzipstream(v=vs.110).aspx\n[msdn-stream-canseek]: https://msdn.microsoft.com/en-us/library/system.io.stream.canseek(v=vs.110).aspx\n[msdn-stream-seek]: https://msdn.microsoft.com/en-us/library/system.io.stream.seek(v=vs.110).aspx\n\n### C# Comm ###\n\n* Apply IDL annotations to services and methods for Comm.\n\n## 6.0.1 ##\n\nThis version was allocated but never released.\n\n## 6.0.0: 2017-06-29 ##\n* `gbc` & compiler library: 0.10.0.0\n* IDL core version: 2.0\n* IDL comm version: 1.2\n* C++ version: 6.0.0\n* C# NuGet version: 6.0.0\n* C# Comm NuGet version: 0.12.0\n\n### `gbc` and Bond compiler library ###\n\n* IDL support for service inheritance syntax\n    * **Breaking change** In the Bond Haskell library, the `Service` type\n      has a new field `serviceBase`.\n* C++ codegen now generates\n  [extern templates](http://en.cppreference.com/w/cpp/language/function_template)\n  of `bond::Apply` instead of overloads.\n* C++ codegen hides FieldTemplate details, shortening symbol names.\n\n### C++ ###\n\n* **Breaking change** A C++11 compiler is now required. The minimum\n  supported C++ compiler versions are now:\n    * Clang 3.4 or newer\n    * GNU C++ 4.7 or newer\n    * Microsoft Visual C++ 2013 or newer\n* **Breaking change** The generated apply.h/.cpp files now contain\n  [extern templates](http://en.cppreference.com/w/cpp/language/function_template)\n  of `bond::Apply` instead of overload implementations. Calls to bare `Apply`\n  or `TypeNamespace::Apply` must be changed to `bond::Apply`.\n* **Breaking change** Users who are implementing custom streams are now\n  required to provide the free functions `CreateInputBuffer`,\n  `CreateOutputBuffer` and `GetBufferRange`, depending on which scenarios\n  are used (there will be a corresponding compilation error for each case).\n    * Users who were _mistakenly_ calling `bond::Merge<T>` with explicit an\n      template argument will get a compilation error. To fix, remove the\n      `<T>` part.\n    * In addition, users of MSVC12 are required to define a `range_type`\n      typedef as a return type of corresponding `GetBufferRange` inside\n      their custom input buffer implementation.\n    * Please see\n      [InputBuffer](https://github.com/microsoft/bond/commit/11beaf5319639e4bdee96a25f95154e4fed93a75#diff-9260b18a00d12a6102a69b9fffd7e33f),\n      [OutputBuffer](https://github.com/microsoft/bond/commit/11beaf5319639e4bdee96a25f95154e4fed93a75#diff-1f15d4c92f87d4bd41f705b20cce80ad),\n      and\n      [the bf example](https://github.com/microsoft/bond/commit/11beaf5319639e4bdee96a25f95154e4fed93a75#diff-bdda0f39d99280d4858b4453906eea17)\n      for more details.\n* **Breaking change** The `bond::customize<protocols>` has been removed. All the\n  public APIs that require a protocol list (e.g. `bond::Marshal`) now accept\n  an extra template argument `Protocols` which defaults to `bond::BuiltInProtocols`.\n  Custom input streams now require `bond::type_id<>` to be specialized with a\n  unique magic number. For more details please see [the bf example](https://github.com/microsoft/bond/tree/master/examples/cpp/core/bf).\n* Initial support for sending\n  [Bond objects over gRPC](https://microsoft.github.io/bond/manual/bond_over_grpc.html)\n  has been added.\n* The `bond::Apply` function now has a uniform signature. Call sites for the\n  `Marshaler<Writer>` transform overload that were _mistakenly_ passing\n  `Writer` explicitly (e.g. `bond::Apply<Writer>(marshaler, value)`) will\n  now get a compiler error. To fix, remove the `<Writer>` part:\n  `bond::Apply(marshaler, value)`.\n* Fixed a bug that caused serialization using\n  `CompactBinaryWriter<OutputCounter>` (to get the expected length of\n  serializing with compact binary) to produced bogus results.\n* Fixed\n  [custom streams](https://microsoft.github.io/bond/manual/bond_cpp.html#custom-streams)\n  support which was broken for some scenarios.\n* For Visual C++ 2017 compability, RapidJSON v1.0.0 or newer is now\n  required. The RapidJSON submodule that Bond uses by default has been\n  updated to v1.1.0 due to a warning from clang in earlier versions.\n* C++ codegen hides FieldTemplate details, shortening symbol names.\n\n### C# ###\n\n* **Breaking change** Support for .NET 4.0 has been dropped from the\n  [supported frameworks](https://microsoft.github.io/bond/manual/bond_cs.html#frameworks-targeted).\n* **Breaking change** The deprecated type `Bond.BondReflection` has been\n  removed. The type `Bond.Reflection` should be used instead.\n* **Breaking change** Bond assemblies are now\n  [strong-name signed](https://msdn.microsoft.com/en-us/library/wd40t7ad(v=vs.110).aspx)\n  with the\n  [bond.snk](https://github.com/microsoft/bond/blob/82c97e12621eeb906d1bd46e3abba9da14289c61/cs/build/internal/bond.snk)\n  key in the repository instead of with a Microsoft key. This allows anyone\n  to produce compatible assemblies, not just Microsoft. Official\n  distribution of Bond will continue to be\n  [Authenticode signed](https://msdn.microsoft.com/en-us/library/ms537361(v=vs.85).aspx)\n  with a Microsoft certificate.\n  [Issue \\#414](https://github.com/microsoft/bond/issues/414)\n    * The new public key for assemblies is now\n      `00240000048000009400000006020000002400005253413100040000010001000d504ac18b4b149d2f7b0059b482f9b6d44d39059e6a96ff0a2a52678b5cfd8567cc67254132cd2debb5b95f6a1206a15c6f8ddac137c6c3ef4995f28c359acaa683a90995c8f08df7ce0aaa8836d331a344a514c443f112f80bf2ebed40ccb32d7df63c09b0d7bef80aecdc23ec200a458d4f8bafbcdeb9bf5ba111fbbd4787`\n* **Breaking change** Bond assemblies now have assembly and file versions\n  that correspond to their NuGet package version. Strong name identities\n  will now change release-over-release in line with the NuGet package\n  versions. [Issue \\#325](https://github.com/microsoft/bond/issues/325)\n* The codegen MSBuild targets will now re-run codegen if gbc itself has been\n  changed.\n* Fixed a bug where JSON and XML protocols would permit the serialization of\n  non-nullable string fields that were set to null instead of throwing a\n  NullReferenceException.\n  [Issue \\#417](https://github.com/microsoft/bond/issues/417)\n\n## 5.3.1: 2017-04-25 ##\n\n* `gbc` & compiler library: 0.9.0.0\n* IDL core version: 2.0\n* IDL comm version: 1.2\n* C++ version: 5.3.0\n* C# NuGet version: 5.3.1\n* C# Comm NuGet version: 0.11.1\n\n### C# ###\n\n* Cleaned up documentation comments.\n\n## 5.3.0: 2017-04-12 ##\n\n* `gbc` & compiler library: 0.9.0.0\n* IDL core version: 2.0\n* IDL comm version: 1.2\n* C++ version: 5.3.0\n* C# NuGet version: 5.3.0\n* C# Comm NuGet version: 0.11.0\n\n### `gbc` and Bond compiler library ###\n\n* C++ codegen ensures that parameter names do not shadow field names.\n* When generating C++ apply files, there are now explicit `bond::Apply<>`\n  instantiations for `CompactBinaryWriter<OutputCounter>` and\n  `SimpleBinaryWriter<Null>` writers.\n  [Pull request \\#373](https://github.com/microsoft/bond/pull/373)\n    * **Breaking change (Haskell library only):**\n      `Language.Bond.Codegen.Cpp.ApplyOverloads.Protocol` is now a union of\n      `ProtocolReader` and `ProtocolWriter` to permit mixing and matching of\n      reader/writer protocols without having to explicitly compute the full\n      cross product.\n* Add gbc flags to pick which C# files to generate (structs, gRPC, and\n  comm). Only structs are generated by default.\n* gbc ensures that method names are unique within a service.\n  [Issue \\#381](https://github.com/microsoft/bond/issues/381)\n\n### C++ ###\n\n* Fix Python shared_ptr converter build break with Boost 1.63.\n* Improve compliance with\n  [Microsoft's SDL](https://www.microsoft.com/en-us/sdl/).\n    * Bond now builds on MSVC with\n      [`_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES`](https://msdn.microsoft.com/en-us/library/ms175759.aspx)\n      instead of `_CTR_SECURE_NO_WARNINGS`.\n    * Bond builds on MSVC with SDL recommended warnings enabled.\n* Eliminate need for warning suppression on MSVC14 via warning.h in Bond\n  itself. warning.h is still in place on MSVC12; furthermore, we don't alter\n  warning.h for now as it may be depended upon by application code.\n* Avoid unaligned memory access on non-x86/x64 platforms.\n  [Issue \\#305](https://github.com/microsoft/bond/issues/305)\n* Improve compliance with strict-aliasing rules.\n    * Bond now builds on Clang/GCC with `-fstrict-aliasing`.\n* When generating C++ apply files, there are now explicit `bond::Apply<>`\n  instantiations for `CompactBinaryWriter<OutputCounter>` and\n  `SimpleBinaryWriter<Null>` writers.\n  [Pull request \\#373](https://github.com/microsoft/bond/pull/373)\n* Improve C++ allocator support\n  [Issue \\#379](https://github.com/microsoft/bond/issues/379)\n  [Pull request \\#380](https://github.com/microsoft/bond/pull/380)\n    * Support C++11 and above allocator model for rebind\n    * Simplify detection of the default allocator\n* Remove per-field instantiation of DynamicParser<>::UnknownFieldOrTypeMismatch method.\n\n## C# ###\n\n* Added gRPC integration. See the\n  [Bond-over-gRPC manual](https://microsoft.github.io/bond/manual/bond_over_grpc.html).\n* Added controls to cap incremental allocation between reads in\n  `Bond.IO.Unsafe.InputStream`.\n* Extended fix for bug parsing JSON when a string value is a date.\n  [Pull request \\#358](https://github.com/microsoft/bond/pull/358)\n* Bond C# 5.1.0 accidentally broke backward compability by renaming\n  `Bond.Reflection` to `Bond.BondReflection`. This has been fixed:\n  `Bond.BondReflection` was unrenamed back to `Bond.Reflection`, and a shim\n  `Bond.BondReflection` type now redirects all calls to their original names\n  to minimize further breakage.\n  [Issue \\#369](https://github.com/microsoft/bond/issues/369)\n    * Code that started using `Bond.BondReflection` by name will encounter\n      warning CS0618 indicating use of an obselete method/type. To fix this,\n      use the original name `Bond.Reflection`. This warning can be\n      suppressed if needed. However...\n    * ...the shim type `Bond.BondReflection` will be removed during or after\n      the next major release of C# Bond.\n\n### C# Comm ###\n\n* **Breaking change** To generate C# Comm files, be sure to pass the\n  `--comm` flag to gbc.\n  [See how the pingpong example was updated](https://github.com/microsoft/bond/blob/581d88632e0ad8b2fc87f5674273f613e78af752/examples/cs/comm/pingpong/pingpong.csproj#L39).\n* C# Comm is now deprecated. We recommend that you use Bond-over-gRPC. See\n  the\n  [Bond-over-gRPC manual](https://microsoft.github.io/bond/manual/bond_over_grpc.html).\n* EpoxyListener's StopAsync() now stops all the outstanding connections that\n  it accepted.\n* EpoxyTransport's StopAsync() now stops all the connections and listeners\n  that it created.\n\n## 5.2.0: 2017-02-07 ##\n\n* `gbc` & compiler library: 0.8.0.0\n* IDL core version: 2.0\n* IDL comm version: 1.2\n* C++ version: 5.2.0\n* C# NuGet version: 5.2.0\n* C# Comm NuGet version: 0.10.0\n\n### `gbc` and Bond compiler library ###\n\n* **Breaking change:** The C++ Comm .cpp template has been renamed to\n  `comm_cpp` from `types_comm_cpp` to match the file it generates.\n* Add export-attribute option for C++ and make apply-attribute a\n  deprecated synonym for export-attribute\n* Fix C++ Comm build problems when services are shared via DLL.\n  [Issue \\#314](https://github.com/microsoft/bond/issues/314)\n\n### C++ ###\n\n* Fixed compatibility with RapidJSON v1.1.0.\n  [Issue \\#271](https://github.com/microsoft/bond/issues/271)\n* The minimum supported version of Boost is now 1.58\n* The `bf` utility now supports multiple payloads.\n  [Pull request \\#288](https://github.com/microsoft/bond/pull/288)\n* Fixed an issue with aliased enums.\n  [Pull request \\#288](https://github.com/microsoft/bond/pull/298)\n* Fixed an issue with template parameter deduction in `bond::is_nullable`\n  that occurs with Microsoft Visual C++ 2015 Update 3.\n  [Issue \\#306](https://github.com/microsoft/bond/issues/306)\n\n### C++ Comm ###\n* Fixed a multiply-defined symbol linker error for\n  `bond::comm::epoxy::detail::MakeConfigFrame`.\n\n### C# ###\n\n* Added controls to cap pre-allocation during deserialization of containers\n  and blobs.\n* Fixed computation of default value for aliased bool and wstring fields.\n  [Issue \\#300](https://github.com/microsoft/bond/issue/300)\n\n### C# Comm ###\n\n* Resources are now properly cleaned up if failures are encountered when\n  establishing client-side Epoxy connections.\n* The generated interfaces for services are now public. They were\n  inadvertently internal before.\n\n## 5.1.0: 2016-11-14 ##\n\n* `gbc` & compiler library: 0.7.0.0\n* IDL core version: 2.0\n* IDL comm version: 1.2\n* C++ version: 5.1.0\n* C# NuGet version: 5.1.0\n* C# Comm NuGet version: 0.9.0\n\n### `gbc` and Bond compiler library ###\n\n* **Breaking change:** The Haskell utility functions `structName` and\n  `structParams` were renamed to `className` and `classParams` (in the\n  `Language.Bond.Codegen.Cpp.Util` module).\n* Added initial support for generating C++ Comm services and proxies.\n\n### C++ Comm ###\n* The initial C++ Comm code has been merged in, but there is still work left\n  to be done before the first preview release. Use at your own risk.\n\n### C# ###\n* Bond C# now supports\n  [.NET Standard 1.0, 1.3, and 1.6](https://blogs.msdn.microsoft.com/dotnet/2016/09/26/introducing-net-standard/),\n  so you can use Bond in .NET Core applications.\n  [Pull request \\#243](https://github.com/microsoft/bond/pull/243)\n    * Not all assemblies work with all versions of the .NET Standard or on\n      all platforms. The\n      [manual](https://microsoft.github.io/bond/manual/bond_cs.html#frameworks-targeted)\n      lists which assemblies target which frameworks.\n    * Bond C# Comm is not yet building with .NET Core toolchain, so its\n      .NET Core support is preliminary.\n* Bond.JSON now depends on Newsoft.JSON 9.0.1, the earliest version that\n  supports .NET Standard 1.0.\n* A new assembly, Bond.Reflection.dll, has been added, due to some internal\n  refactoring needed for .NET Core support. Many of the Bond assemblies now\n  have a dependency on this assembly, so you'll need to deploy it. If you\n  use NuGet to consume Bond, this is should be handled automatically.\n* Fixed a bug in the MSBuild targets that caused codegen to always be run if\n  all of the BondCodegen items have Options metadata.\n* Fixed a bug in the MSBuild targets that caused compilation to fail if the\n  $BondOutputDirectory did not end with a trailing slash.\n\n### C# Comm ###\n* The constructor for `LayerStackProvider` no longer requires a logger;\n  instead, the transport's logger is passed to `OnSend`/`OnReceive`. Before,\n  using the same logger with a transport and `LayerStackProvider` required a\n  duplicate implementation.\n* Fixed a bug that prevented `EpoxyListener` from accepting multiple\n  connections in parallel.\n\n## C# Comm 0.8.0: 2016-10-12 ##\n\n* C# Comm NuGet version: 0.8.0\n\n### C# Comm ###\n* `EpoxyTransport` can be configured to enable TCP keep-alive to help detect\n  dead connections. See `EpoxyTransportBuilder.SetKeepAliveTimes` for\n  details.\n\n## 5.0.0: 2016-09-12 #\n\n* `gbc` & compiler library: 0.6.0.0\n* IDL core version: 2.0\n* IDL comm version: 1.1\n* C++ version: 5.0.0\n* C# NuGet version: 5.0.0\n* C# Comm NuGet version: 0.7.0\n\n### IDL core ###\n* **Breaking change:** `bond.TypeDef.list_sub_type` field removed, as it was\n  breaking some consumers of serialized SchemaDef. We plan to restore this\n  field in the future.\n  [Issue \\#161 re-opened](https://github.com/microsoft/bond/issues/161)\n\n### IDL comm ###\n* Update IDL to conform to naming conventions.\n* Adjust IDL for changes made to Epoxy internals\n\n### C++ ###\n* **Breaking change:** Runtime SchemaDef `list_sub_type` field removed, as\n  it was breaking some consumers of serialized SchemaDef. We plan to restore\n  this field in the future.\n  [Issue \\#161 re-opened](https://github.com/microsoft/bond/issues/161)\n* Generated enum types now have a `FromEnum` method that can be used to\n  convert from an enum value to a string. Now generated enum types have all\n  four of `ToEnum`, `FromEnum`, `ToString`, and `FromString`. (The `...Enum`\n  variants return false on failure, while the `...String` variants throw.)\n\n### C# ###\n* **Breaking change:** Runtime SchemaDef `list_sub_type` field removed, as\n  it was breaking some consumers of serialized SchemaDef. We plan to restore\n  this field in the future.\n  [Issue \\#161 re-opened](https://github.com/microsoft/bond/issues/161)\n* The Bond.Runtime NuGet package no longer artificially limits\n  Newtonsoft.Json to versions before 10.\n  [Issue \\#212](https://github.com/microsoft/bond/issues/212)\n\n### C# Comm ###\n* `EpoxyListeners` can now be configured to require clients to authenticate\n  themselves with a certificate. This is configured via the\n  `clientCertificateRequired` parameter when creating an\n  `EpoxyServerTlsConfig`.\n* Internals of the Epoxy protocol cleaned up. See the\n  [updated wire format specification](https://microsoft.github.io/bond/manual/bond_comm_epoxy_wire.html).\n\n## 4.3.0: 2016-08-23 ##\n\n* `gbc` & compiler library: 0.5.0.0\n* IDL core version: 1.0 (first release)\n* IDL comm version: 1.0 (first release)\n* C++ version: 4.3.0\n* C# NuGet version: 4.3.0\n* C# Comm NuGet version: 0.6.0\n\n### `gbc` and Bond compiler library ###\n\n* **Breaking change:** Runtime SchemaDef now includes information about\n  whether BT_LIST fields are nullable or blobs.\n  [Issue \\#161](https://github.com/microsoft/bond/issues/161)\n* User-defined `TypeMapping`s can now be created. This makes is easier to\n  implement code generation for new languages. [Pull request\n  \\#172](https://github.com/microsoft/bond/pull/172)\n* Validate default value type mistmatches.\n  [Issue \\#72](https://github.com/microsoft/bond/issues/72)\n  [Issue \\#128](https://github.com/microsoft/bond/issues/128)\n* Validate default value out-of-range values.\n  [Issue \\#73](https://github.com/microsoft/bond/issues/73)\n* Fail when struct field has default value of `nothing`.\n  [Issue \\#164](https://github.com/microsoft/bond/issues/164)\n* Fail when enum field doesn't have default value.\n  [Issue \\#177](https://github.com/microsoft/bond/issues/177)\n* Validate default value of type aliases\n* Generated types will used `= default` move constructors if possible. This\n  results in many generated types having `noexcept` move constructors.\n* Fix a bug where, if a Bond namespace contained a struct and an enum value with\n  the same name, generated C++ would contain ambiguous references.\n  [Issue \\#202](https://github.com/microsoft/bond/issues/202)\n\n### IDL core ###\n\n* Set up a separate IDL directory so that IDL is independent of language\n  bindings. [Pull request \\#219](https://github.com/microsoft/bond/pull/219)\n\n### IDL comm ###\n\n* Set up a separate IDL directory so that IDL is independent of language\n  bindings. Convert comm IDL files to use C++-style naming convention. [Pull\n  request \\#219](https://github.com/microsoft/bond/pull/219)\n\n### C++ ###\n\n* Improvements in the `nullable` implementation. [Pull request \\#174](https://github.com/microsoft/bond/pull/174)\n    * Correctly use allocator model.\n    * Reduce size of `nullable` in the normal case.\n    * And others\n* Runtime SchemaDef now includes information about whether BT_LIST fields\n  are nullable or blobs.\n  [Issue \\#161](https://github.com/microsoft/bond/issues/161)\n* The following Bond types have (possibly conditional) `noexcept` move\n  constructors: `blob`, `bonded`, `maybe`, `nullable`, `RuntimeSchema`,\n  `value`.\n\n### C# ###\n\n* Bond can now be used with Newtonsoft.Json >= 7.0.1 and < 10\n* Runtime SchemaDef now includes information about whether BT_LIST fields\n  are nullable or blobs.\n  [Issue \\#161](https://github.com/microsoft/bond/issues/161)\n\n### C# Comm ###\n\n* Logging interface revamped to make it non-static, eliminate boilerplate code, and to handle\n  logging-related exceptions gracefully.\n    * `LogHandler` renamed to `ILogSink`.\n    * `TransportBuilder.SetLogSink` added to associate a logger with a\n      transport.\n    * `TransportBuilder.EnableDebugLogging` added to control whether debug\n      logs are emitted or not.\n    * The `ILogSink.Log` method is now provided a pre-formatted string\n      instead of a format string and its arguments.\n* Transport is now parameterized with Connection and Listener\n  implementations. This eliminates the need to cast the results of\n  `transport.ConnectToAsync()` and `transport.MakeListener()` to\n  transport-specific subtypes.\n* Epoxy has a hook for performing custom host to IP address resolution. This\n  is configured with `EpoxyTransportBuilder.SetResolver`.\n* Bond-generated Errors now give clients opaque GUIDs. These GUIDs can be\n  matched against emitted metrics for debugging.\n* Epoxy can now be configured to use TLS to secure the connection.\n    * TLS configuration is set via\n      `EpoxyTransportBuilder.SetClientTlsConfig`/`EpoxyTransportBuilder.SetServerTlsConfig`.\n    * See the\n      [TLS example](https://github.com/microsoft/bond/tree/master/examples/cs/comm/tls/)\n      for even more details.\n\n## 4.2.1: 2016-06-02 ##\n\n* `gbc` & compiler library: 0.4.1.0\n* C# NuGet version: 4.2.1\n* C# Comm NuGet version: 0.5.0\n\n### `gbc` ###\n\n* Support for parsing\n  [service definitions](https://microsoft.github.io/bond/manual/compiler.html#service-definition)\n  and generating C# service bases, interfaces, and proxies.\n    * New types for\n      [services](https://microsoft.github.io/bond/manual/compiler.html#services)\n      and\n      [methods](https://microsoft.github.io/bond/manual/compiler.html#methods)\n      have been added to the compiler AST.\n* MSBuild-compatible error messages.\n  [Issue \\#136](https://github.com/microsoft/bond/issues/136)\n\n### C# ###\n\n* Added\n  [`Deserializer.TryDeserialize()`](https://github.com/microsoft/bond/blob/db315adaf4b812adc5ca484b1bcffafe1df6d351/cs/src/core/Deserializer.cs#L231-239).\n* Added two new\n  [NuGet packages](https://microsoft.github.io/bond/manual/bond_cs.html#nuget-packages)\n  to make it easier to consume Bond piecemeal.\n    * Bond.Compiler: contains `gbc`, `bond.bond`, and `bond_const.bond` in a\n      tools-only package\n    * Bond.Compiler.CSharp: contains `gbc` and C# MSBuild targets. No longer\n      do you have to consume Bond.CSharp (which pulls in all of the rest of\n      Bond) just to get codegen.\n\n### C# Comm ###\n\n* Initial preview release of the\n  [Bond Communications framework](https://microsoft.github.io/bond/manual/bond_comm.html).\n\n## 4.2.0: 2016-04-28 ##\n\n* `gbc` & compiler library: 0.4.0.2\n* C# NuGet version: 4.2.0\n\n### C# ###\n\n* Add support for Compact Binary v2 writing.\n  [Issue \\#70](https://github.com/microsoft/bond/issues/70)\n\n## 4.1.0: 2016-04-22\n\n* `gbc` & compiler library: 0.4.0.2\n* C# NuGet version: 4.1.0\n\n### `gbc` ###\n\n* Field ordinals larger than 65535 are now rejected.\n  [Issue \\#111](https://github.com/microsoft/bond/issues/111)\n* Fields that duplicate the name of an existing field are now rejected.\n  [Issue \\#123](https://github.com/microsoft/bond/issues/123)\n* The generated C# code now compiles with no errors or warnings at\n  `/warn:4`. [Issue \\#82](https://github.com/microsoft/bond/issues/82)\n* Added\n  [Visual Studio Code highlighting rules for `.bond` files](https://github.com/microsoft/bond/tree/b2b9cd7256286fd484444dfaf7645d380a3ee936/tools/syntax/VsCode).\n\n### C++ ###\n\n* Enums are now cast to 32-bit integers to avoid some compiler warnings.\n* Bond can be used in code bases where there is a function-style macro named\n  `U`.\n\n### C# ###\n\n* The generated C# code now compiles with no errors or warnings at\n  `/warn:4`. [Issue \\#82](https://github.com/microsoft/bond/issues/82)\n* Bond-generated enums constants are now cast to 32-bit integers to avoid\n  some compiler warnings.\n* [Implicit conversion between `bond.GUID` and `System.Guid`](https://github.com/microsoft/bond/blob/bc4c56a3ca0858f4bd93916e80ceff9bbeada606/cs/test/core/GuidConversionTests.cs#L14)\n  has been added.\n  [Pull request \\#145](https://github.com/microsoft/bond/pull/145)\n* The ability to\n  [customize the implementation of `IBonded<T>` used](https://microsoft.github.io/bond/manual/bond_cs.html#understanding-bondedt)\n  has been added.\n  [Pull request \\#153](https://github.com/microsoft/bond/pull/153)\n\n## 4.0.2: 2015-12-14\n\n* `gbc` & compiler library: 0.4.0.1\n* C# NuGet version: 4.0.2\n\n### Bond compiler library ###\n\n* Added a\n  [custom codegen example](https://github.com/microsoft/bond/tree/master/examples/codegen/read-only).\n\n### C# ###\n\n* Added support to\n  [not inline nested structs in `Serializers`](https://github.com/microsoft/bond/blob/cb95fdb3e1e10c3e4cae2f2d55e2b116041010a8/cs/src/core/Serializer.cs#L69).\n  This can be used to speed up the time to create the serializer for very\n  complex schemas.\n* Fix for rare buffer corruption in InputStream.\n  [Issue \\#114](https://github.com/microsoft/bond/issues/114).\n* Fix for SimpleXmlParser not handling XML declarations. [Issue \\#112](https://github.com/microsoft/bond/issues/82)\n\n## Breaking changes between 3.x and 4.x ##\n\nBond C# had the following breaking changes introduced in 4.x compared to the\n3.x versions:\n\n* The\n  [Bond.Core.CSharp NuGet package](https://www.nuget.org/packages/Bond.Core.CSharp/)\n  was introduced so that not all uses of Bond depend on Json.NET. The\n  [Bond.Runtime.CSharp package](https://www.nuget.org/packages/Bond.Runtime.CSharp/)\n  still depends on Json.NET and also depends on Bond.Core.CSharp. The\n  primary package remains Bond.CSharp.\n* `CompactBinaryReader<InputStream>` now\n  [explicitly implements](https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/interfaces/explicit-interface-implementation)\n  `ICloneable<CompactBinaryReader<InputStream>>` instead of implicitly.\n  `FastBinaryReader` and `SimpleBinaryReader` were likewise changed.\n\n## Earlier release ##\n\nThese sections need to be written. In the meantime, consult the\n[repository's history](https://github.com/microsoft/bond/commits/master).\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 2.013671875,
          "content": "cmake_minimum_required (VERSION 3.1)\n\nproject (bond)\ncmake_policy (SET CMP0022 NEW)\n\nif (POLICY CMP0077)\n    # Allow CMake 3.13+ to override options when using FetchContent/add_subdirectory.\n    cmake_policy(SET CMP0077 NEW)\nendif ()\n\nset (CMAKE_MODULE_PATH\n    ${CMAKE_CURRENT_SOURCE_DIR}/cmake\n    ${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/cmake-modules)\n\nset (BOND_FIND_RAPIDJSON\n    \"FALSE\"\n    CACHE BOOL \"If FALSE, then use and install rapidjson from the /thirdparty subdirectory\")\n\nenable_testing()\n\nset (BOND_IDL ${CMAKE_CURRENT_SOURCE_DIR}/idl)\nset (BOND_INCLUDE ${CMAKE_CURRENT_SOURCE_DIR}/cpp/inc)\nset (BOND_PYTHON_INCLUDE ${CMAKE_CURRENT_SOURCE_DIR}/python/inc)\nset (BOND_GENERATED ${CMAKE_CURRENT_SOURCE_DIR}/cpp/generated)\nset (BOND_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/cpp/src)\nset (BOND_COMPAT_TEST_DIR ${CMAKE_CURRENT_SOURCE_DIR}/test/compat)\n\ninclude (Config)\ninclude (Bond)\ninclude (NoDebug)\ninclude (Compiler)\ninclude (PythonTest)\n\nadd_custom_target(check COMMAND ${CMAKE_CTEST_COMMAND} -C ${CMAKE_CFG_INTDIR} --output-on-failure)\n\nif (NOT BOND_GBC_PATH)\n    add_subfolder (compiler \"compiler\")\n    if (NOT BOND_SKIP_GBC_TESTS)\n        add_dependencies (check gbc-tests)\n    endif()\nendif()\n\nadd_subdirectory (cpp)\nadd_subfolder (doc \"doc\")\nadd_python_subdirectory (python)\nadd_subdirectory (examples)\n\nif (BOND_ENABLE_JAVA)\n    add_subdirectory (java)\nendif()\n\n\ninstall (DIRECTORY\n    cpp/inc/bond\n    cpp/generated/bond\n    python/inc/bond\n    DESTINATION include\n    PATTERN *.cpp EXCLUDE)\n\ninstall (EXPORT bond\n    DESTINATION lib/bond\n    EXPORT_LINK_INTERFACE_LIBRARIES)\n\nif (NOT BOND_FIND_RAPIDJSON)\n    install (DIRECTORY\n        thirdparty/rapidjson/include/rapidjson\n        DESTINATION include\n        PATTERN *.cpp EXCLUDE)\nendif()\n\n# if BOND_GBC_PATH is set we must copy over that gbc to the install location\nif (BOND_GBC_PATH)\n  if (WIN32)\n    set(INSTALLED_GBC_NAME gbc.exe)\n  else()\n    set(INSTALLED_GBC_NAME gbc)\n  endif()\n\n  install (\n    FILES ${BOND_GBC_PATH}\n    DESTINATION bin\n    RENAME ${INSTALLED_GBC_NAME})\nendif()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.326171875,
          "content": "# Contributing\n\nBond welcomes contributions from the community.\n\n## Process\n\n1. Make a proposal.\n1. Implement the proposal and its tests.\n1. Squash commits and write a good commit message.\n1. Start a pull request & address comments.\n1. Merge.\n\n### Proposal\n\nFor things like fixing typos and small bug fixes, you can skip this step.\n\nIf your change is more than a simple fix, please don't just create a big\npull request. Instead, start by opening an issue describing the problem you\nwant to solve and how you plan to approach the problem. This will let us\nhave a brief discussion about the problem and, hopefully, identify some\npotential pitfalls before too much time is spent.\n\n### Implementation\n\n* Fork the repository on GitHub.\n* Start on a new topic branch off of master.\n* Instructions for getting Bond building and running the tests are in the\n  [README](https://github.com/microsoft/bond/blob/master/README.md).\n* Aim for each pull request to have one commit. If the commit starts to get\n  too large, consider splitting it into multiple, independent pull requests.\n    * Some changes are more naturally authored in multiple commits. This is\n      fine, though we find this to be a rare occurrence. These sort of changes\n      are harder to review and interate on with GitHub's tooling.\n* Make sure that all the tests continue to pass.\n    * The CMake `check` target will run the C++ tests for you.\n    * The C# unit tests can be run from\n      [the command line](https://github.com/microsoft/bond/blob/56b5914a5bb41178521e01f6ce078d429e3e6b71/appveyor.yml#L214)\n      or from within Visual Studio.\n* Update the [changelog](https://github.com/microsoft/bond/blob/master/CHANGELOG.md).\n\n### Squash commits\n\nBefore submitting your pull request, you'll probably want to squash any\nintermediate commits you have into one commit. No \"fix syntax error\"\ncommits, please. :-)\n\nEach commit should build and pass all of the tests. If you want to add new\ntests for functionality that's not yet written, ensure the tests are added\ndisabled.\n\n* For Haskell tests, add the tests functions, but don't add a test case for\n  them.\n* For CTest tests, add the executable to the CMakeLists.txt file to ensure\n  that it builds, but do not include a `add_test()` (or similar) entry for\n  it.\n* For C# NUnit tests, use the\n  [`[Ignore]`](http://www.nunit.org/index.php?p=ignore&r=2.6.4) attribute to\n  annotate the test cases to be ignored.\n\nDon't forget to run `git diff --check` to catch those annoying whitespace\nchanges.\n\nIn your commit message, explain the reasoning behind the commit. The code\nchanges answer the question \"What changed?\", but the commit message answers\nthe question \"Why did it need to change?\".\n\nPlease follow the established Git\n[convention for commit messages](https://www.git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project#Commit-Guidelines).\nThe first line is a summary in the imperative, about 50 characters or less,\nand should *not* end with a period. An optional, longer description must be\npreceded by an empty line and should be wrapped at around 72 characters.\nThis helps with various outputs from Git or other tools.\n\nYou can update messages of local commits you haven't pushed yet using `git\ncommit --amend` or `git rebase --interactive` with *reword* command.\n\n### Pull request\n\nStart a GitHub pull request to merge your topic branch into the\n[main repository's master branch](https://github.com/microsoft/bond/tree/master).\n(If you are a Microsoft employee and are not a member of the\n[Microsoft organization on GitHub](https://github.com/microsoft) yet, please\ncontact the Bond Development team via e-mail for instructions before\nstarting your pull request. There's some process stuff you'll need to do\nahead of time.)\n\nIf you haven't contributed to a Microsoft project before, you may be asked\nto sign a [contribution license agreement](https://cla.microsoft.com/). A\ncomment in the PR will let you know if you do.\n\nWhen you submit a pull request, a suite of builds and tests will be run\nautomatically, and the results will show up in the \"Checks\" section of the\nPR. If any of these fail, you'll need to figure out why and make the\nappropriate fixes. If you think the failures are due to infrastructure\nissues, please mention this in a comment, and one of the maintainers will\nhelp.\n\nThe project maintainers will review your changes. We aim to review all\nchanges within three business days.\n\nAddress any review comments by adding commits that address the comments.\nDon't worry about having fixup/tiny commits at this stage. They'll get\nsquashed together when the change is finally merged. Push these new commits\nto your topic branch, and we'll review the edits.\n\n### Merge\n\nOnce the comments in the pull request have been addressed, a project\nmaintainer will merge your changes. Thank you for helping improve Bond!\n\nBy default we'll perform a squash merge unless requested otherwise in the\nPR.\n\n# Reporting Security Issues\n\nSecurity issues and bugs should be reported privately to Microsoft. See [our\nguidance for how to report these sort of issues](SECRUITY.md).\n\n# Code of Conduct\n\nThis project has adopted the\n[Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the\n[Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/)\nor contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any\nadditional questions or comments.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0517578125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014 Microsoft\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "NuGet.Config",
          "type": "blob",
          "size": 0.2587890625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n  <packageSources>\n    <clear />\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\n  </packageSources>\n  <disabledPackageSources>\n    <clear />\n  </disabledPackageSources>\n</configuration>"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.5849609375,
          "content": "![The Bond logo: a stylized glue gun](https://raw.githubusercontent.com/microsoft/bond/master/doc/src/logos/bond-logo-64x64-white.png)\n<hr />\n\n[![Build Status](https://github.com/microsoft/bond/workflows/Linux%20CI/badge.svg?event=push)](https://github.com/microsoft/bond/actions?query=event%3Apush)\n[![Bond.CSharp NuGet package](https://img.shields.io/nuget/v/Bond.CSharp.svg?style=flat)](https://microsoft.github.io/bond/manual/bond_cs.html#nuget-packages)\n\n# Bond\n\nBond is an open-source, cross-platform framework for working with schematized\ndata. It supports cross-language serialization/deserialization and powerful\ngeneric mechanisms for efficiently manipulating data. Bond is broadly used at\nMicrosoft in high scale services.\n\nBond is published on GitHub at [https://github.com/microsoft/bond/](https://github.com/microsoft/bond/).\n\n## Bond open-source project ending March 2025\n\nThe Bond open-source project will be ending development on March 31, 2025.\nFor more information, see [the shutdown announcement\nissue](https://github.com/microsoft/bond/issues/1215).\n\n## Documentation\n\nFor details, see the User's Manuals:\n\n* [C++](https://microsoft.github.io/bond/manual/bond_cpp.html)\n* [C#](https://microsoft.github.io/bond/manual/bond_cs.html)\n* [Java](https://microsoft.github.io/bond/manual/bond_java.html)\n* [Python](https://microsoft.github.io/bond/manual/bond_py.html)\n* [`gbc`, the Bond compiler/codegen tool](https://microsoft.github.io/bond/manual/compiler.html)\n    * See also\n      [the compiler library](https://hackage.haskell.org/package/bond) that\n      powers `gbc`.\n\nFor a discussion about how Bond compares to similar frameworks see [Why Bond](https://microsoft.github.io/bond/why_bond.html).\n\n## Dependencies\n\nBond C++ library requires some C++11 features (currently limited to those\nsupported by Visual C++ 2015); a C++11 compiler is required. Additionally,\nto build Bond you will need CMake (3.1+),\n[Haskell Stack](https://docs.haskellstack.org/en/stable/README/#how-to-install)\n(1.5.1+) and Boost (1.61+).\n\nAdditionally, Bond requires RapidJSON. The Bond repository has a Git submodules for RapidJSON. It should be cloned with the `--recursive` flag:\n\n```bash\ngit clone --recursive https://github.com/microsoft/bond.git\n```\n\nIf you already have RapidJSON and would like to build against it, add argument `-DBOND_FIND_RAPIDJSON=TRUE` to the CMake invocation. It will use find_package(RapidJSON). If you do not provide a RapidJSON library, Bond will also install RapidJSON.\n\nFollowing are specific instructions for building on various platforms.\n\n### Linux\n\nBond must be built with C++11 compiler. We test with Clang (3.8) and GNU C++\n(5.4). We recommend Clang as it's faster with template-heavy code like Bond.\n\nRun the following commands to install the minimal set of packages needed to\nbuild the core Bond library on Ubuntu 14.04:\n\n```bash\nsudo apt-get install \\\n    clang \\\n    cmake \\\n    zlib1g-dev \\\n    libboost-dev \\\n    libboost-thread-dev\n```\n\nAdditionally, you need the [Haskell Tool\nStack](https://docs.haskellstack.org/en/stable/README/). If your distro isn't\nshipping a new enough version of it, you may encounter some non-obvious build\nfailures, so we recommend installing the latest Stack outside of package\nmanagement:\n\n```bash\ncurl -sSL https://get.haskellstack.org/ | sh\n```\n\nIn the root `bond` directory run:\n\n```bash\nmkdir build\ncd build\ncmake ..\nmake\nsudo make install\n```\n\nThe `build` directory is just an example. Any directory can be used as the\nbuild destination.\n\nTo build the Bond Python module and all the C++/Python tests and\nexamples, a few more packages are needed.\n\n```bash\nsudo apt-get install \\\n    autoconf \\\n    build-essential \\\n    libboost-date-time-dev \\\n    libboost-python-dev \\\n    libboost-test-dev \\\n    libtool \\\n    python2.7-dev\n```\n\nCMake needs to be re-run with different options. This can be done after\nbuilding just the core libraries: the build tree will simply be updated with\nthe new options.\n\n```bash\ncd build # or wherever you ran CMake before\n```\n\nRunning the following command in the `build` directory will build and execute all\nthe tests and examples:\n\n```bash\nmake --jobs 8 check\nsudo make install # To install the other libraries just built\n```\n\n(The unit tests are large so you may want to run 4-8 build jobs in parallel,\nassuming you have enough memory.)\n\n### macOS\n\nInstall Xcode and then run the following command to install the required\npackages using Homebrew ([http://brew.sh/](http://brew.sh/)):\n\n```bash\nbrew install \\\n    cmake \\\n    haskell-stack \\\n    boost \\\n    boost-python\n```\n\n(boost-python is optional and only needed for Python support.)\n\nBond can be built on macOS using either standard \\*nix makefiles or Xcode. In\norder to generate and build from makefiles, in the root `bond` directory run:\n\n```bash\nmkdir build\ncd build\ncmake ..\nmake\nsudo make install\n```\n\nAlternatively, you can generate Xcode projects by passing the `-G Xcode` option\nto cmake:\n\n```bash\ncmake -G Xcode ..\n```\n\nYou can build and run unit tests by building the `check` target in Xcode or by\nrunning make in the `build` directory:\n\n```bash\nmake --jobs 8 check\n```\n\nNote that if you are using Homebrew's Python, you'll need to build\nboost-python from source:\n\n```bash\nbrew install --build-from-source boost-python\n```\n\nand tell cmake the location of Homebrew's libpython by setting the\n`PYTHON_LIBRARY` variable, e.g.:\n\n```bash\ncmake .. \\\n    -DPYTHON_LIBRARY=/usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/libpython2.7.dylib\n```\n\n### Windows\n\n[![Build Status](https://ci.appveyor.com/api/projects/status/7xd2a54x9cwco314/branch/master?svg=true)](https://ci.appveyor.com/project/MicrosoftBond/bond/branch/master)\n\nInstall the following tools:\n\n- Visual Studio 2017 or newer. The following components are required:\n  - .NET Framework 4.6.2 targeting pack\n  - C++ development tools. A working C++ compiler is needed to build gbc.\n- .NET SDK ([https://dotnet.microsoft.com/en-us/download](https://dotnet.microsoft.com/en-us/download))\n- CMake ([http://www.cmake.org/download/](http://www.cmake.org/download/))\n- Haskell Stack ([https://docs.haskellstack.org/en/stable/install_and_upgrade/#windows](https://docs.haskellstack.org/en/stable/install_and_upgrade/#windows))\n\nIf you are building on a network behind a proxy, set the environment variable\n`HTTP_PROXY`, e.g.:\n\n```bash\nset HTTP_PROXY=http://your-proxy-name:80\n```\n\nNow you are ready to build the C# version of Bond. Open the solution file\n`cs\\cs.sln` in Visual Studio and build as usual. The C# unit tests can\nalso be run from within the solution.\n\nTo build using the .NET SDK:\n\n```bash\ndotnet restore cs\\cs.sln\ndotnet msbuild cs\\cs.sln\n```\n\nThe C++ and Python versions of Bond additionally require:\n\n- Boost 1.61+ ([http://www.boost.org/users/download/](http://www.boost.org/users/download/))\n- Python 2.7 ([https://www.python.org/downloads/](https://www.python.org/downloads/))\n\nYou may need to set the environment variables `BOOST_ROOT` and `BOOST_LIBRARYDIR`\nto specify where Boost and its pre-built libraries for your environment (MSVC 12 or MSVC 14) can be\nfound, e.g.:\n\n```bash\nset BOOST_ROOT=D:\\boost_1_61_0\nset BOOST_LIBRARYDIR=D:\\boost_1_61_0\\lib64-msvc-14.0\n```\n\nThe core Bond library and most examples only require Boost headers. The\npre-built libraries are only needed for unit tests, and Python. If Boost or\nPython libraries are not found on the system, then some tests and examples\nwill not be built.\n\nYou can also get an appropriate version of boost using the same approach as employed\nby CI.  The appveyor.yml file includes an invocation of:\n```\ntools\\ci-scripts\\windows\\Install-Boost.ps1 `\n                        -Version $env:BOND_BOOST `\n                        -VcToolSetVer $vcToolSetVer `\n                        -Components $boostComponents\n```\nwhich can also be invoked manually in order to download the relevant version, e.g.\n```\nInstall-Boost.ps1 -Version 1.61.0 -VcToolSetVer 14.0\n```\nThis will return the location to which the files were downloaded.  It will be a temporary\nlocation, so you should subsequently copy the directories to a more permanent location and\nthen configure your environment variables to point to those locations.\n\nTo generate a solution to build the Bond Core C++ and Python with Visual\nStudio 2015 run the following commands from the root `bond` directory:\n\n```bash\nmkdir build\ncd build\nset PreferredToolArchitecture=x64\ncmake -G \"Visual Studio 14 2015 Win64\" ..\n```\n\nSetting `PreferredToolArchitecture=x64` selects the 64-bit toolchain which\ndramatically improves build speed. (The Bond unit tests are too big to build\nwith 32-bit tools.)\n\nInstead of `cmake` you can also use `cmake-gui` and specify configuration\nsettings in the UI. This configuration step has to be performed only once. From\nthen on you can use the generated solution `build\\bond.sln` from Visual Studio\nor build from the command line using `cmake`:\n\n```bash\ncmake --build . --target\ncmake --build . --target INSTALL\n```\n\nTo build and execute the unit tests and examples run:\n\n```bash\ncmake --build . --target check -- /maxcpucount:8\n```\n\nAlternatively, you can build and install Bond using the [vcpkg](https://github.com/microsoft/vcpkg/) dependency manager:\n\n```batch\ngit clone https://github.com/microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.bat\n./vcpkg integrate install\n./vcpkg install bond\n```\n\nThe Bond port in vcpkg is kept up to date by Microsoft team members and community contributors.\nIf the version is out of date, please [create an issue or pull request in the vcpkg repository](https://github.com/microsoft/vcpkg/issues/new/choose).\n\n## Contributing\n\nInterested in contributing to Bond? Take a look at our\n[contribution guidelines](https://github.com/microsoft/bond/blob/master/CONTRIBUTING.md)\nto get started.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.6923828125,
          "content": "<!-- BEGIN MICROSOFT SECURITY.MD V0.0.7 BLOCK -->\n\n## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/Microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).\n\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://aka.ms/opensource/security/definition), please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://aka.ms/opensource/security/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://aka.ms/opensource/security/pgpkey).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://aka.ms/opensource/security/msrc). \n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://aka.ms/opensource/security/bounty) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://aka.ms/opensource/security/cvd).\n\n<!-- END MICROSOFT SECURITY.MD BLOCK -->\n"
        },
        {
          "name": "ThirdPartyNotices.txt",
          "type": "blob",
          "size": 6.7666015625,
          "content": "THIRD-PARTY SOFTWARE NOTICES AND INFORMATION\nDo Not Translate or Localize\n\nThis project incorporates components from the projects listed below. The original copyright notices and the licenses under which Microsoft received such components are set forth below. Microsoft reserves all rights not expressly granted herein, whether by implication, estoppel or otherwise.\n\n1.\tcmake-modules (https://github.com/rpavlik/cmake-modules)\n2.\tRapidJSON (https://github.com/miloyip/rapidjson/)\n\ncmake-modules NOTICES AND INFORMATION BEGIN HERE\n=========================================\nCopyright Iowa State University 2009-2014, or Copyright Sensics, Inc. 2014-2015, or Copyright Ryan A. Pavlik 2009-2015\nDistributed under the Boost Software License, Version 1.0.\n\nBoost Software License - Version 1.0 - August 17th, 2003\n\nPermission is hereby granted, free of charge, to any person or organization\nobtaining a copy of the software and accompanying documentation covered by\nthis license (the \"Software\") to use, reproduce, display, distribute,\nexecute, and transmit the Software, and to prepare derivative works of the\nSoftware, and to permit third-parties to whom the Software is furnished to\ndo so, all subject to the following:\n\nThe copyright notices in the Software and this entire statement, including\nthe above license grant, this restriction and the following disclaimer,\nmust be included in all copies of the Software, in whole or in part, and\nall derivative works of the Software, unless such copies or derivative\nworks are solely in the form of machine-executable object code generated by\na source language processor.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\nSHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\nFOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n=========================================\nEND OF cmake-modules NOTICES AND INFORMATION\n\nRapidJSON NOTICES AND INFORMATION BEGIN HERE\n=========================================\nCopyright (C) 2015 THL A29 Limited, a Tencent company, and Milo Yip.  All rights reserved.\n\nIf you have downloaded a copy of the RapidJSON binary from Tencent, please note that the RapidJSON binary is licensed under the MIT License.\nIf you have downloaded a copy of the RapidJSON source code from Tencent, please note that RapidJSON source code is licensed under the MIT License, except for the third-party components listed below which are subject to different license terms.  Your integration of RapidJSON into your own projects may require compliance with the MIT License, as well as the other licenses applicable to the third-party components included within RapidJSON.\nA copy of the MIT License is included in this file.\n\nOther dependencies and licenses:\n\nOpen Source Software Licensed Under the BSD License:\n--------------------------------------------------------------------\n\nThe msinttypes r29 \nCopyright (c) 2006-2013 Alexander Chemeris \nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. \n* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n* Neither the name of  copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nOpen Source Software Licensed Under the JSON License:\n--------------------------------------------------------------------\n\njson.org \nCopyright (c) 2002 JSON.org\nAll Rights Reserved.\n\nJSON_checker\nCopyright (c) 2002 JSON.org\nAll Rights Reserved.\n\n\nTerms of the JSON License:\n---------------------------------------------------\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nThe Software shall be used for Good, not Evil.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nTerms of the MIT License:\n--------------------------------------------------------------------\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY\n=========================================\nEND OF RapidJSON NOTICES AND INFORMATION\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 10.5703125,
          "content": "# fsharp feature branch\n-\n    version: 1.0.{build}\n    clone_depth: 15\n    branches:\n        only:\n            - fsharp\n    configuration: Debug\n    build:\n        project: fsharp\\fsharp.sln\n        verbosity: minimal\n    test:\n        assemblies: fsharp\\test\\TypeProvider\\bin\\$(configuration)\\BondFsharpUnitTest.dll\n\n# other branches\n-\n    version: 1.0.{build}\n    clone_depth: 15\n\n    skip_commits:\n      files:\n        # These files are high-churn, but don't affect the build.\n        #\n        # NB: README.md is NOT in this list; the documentation build\n        # consumes it.\n        - CHANGELOG.md\n        - CONTRIBUTING.md\n        - SECURITY.md\n        # These files are only used by the Linux CI builds and don't affect\n        # the Windows builds.\n        - .github/**/*\n        - .travis.yml\n        - tools/ci-scripts/linux/**\n\n    environment:\n        global:\n            STACK_ROOT: \"c:\\\\sr\"\n        BOND_TOKEN:\n            secure: MdnZ86SpR3+/fVz2u31blV83LH6juiobrvO/l1Ak4zG7ykxtvfUI/Vd4l7etYB4J\n        # The slowest configurations should come first to help reduce\n        # overall completion time since we run multiple configurations in\n        # parallel.\n        matrix:\n              # C++ Core build and tests\n            - BOND_BUILD: C++\n              APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015\n              BOND_ARCH: 64\n              BOND_BOOST: \"1.61.0\"\n            - BOND_BUILD: C#\n              BOND_OUTPUT: Properties\n              BOND_CONFIG: Debug\n            - BOND_BUILD: Doc\n            - BOND_BUILD: C#\n              BOND_OUTPUT: Fields\n              BOND_CONFIG: Fields\n            - BOND_BUILD: Python\n              APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015\n              BOND_ARCH: 32\n              BOND_BOOST: \"1.62.0\"\n            - BOND_BUILD: Python\n              APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015\n              BOND_ARCH: 64\n              BOND_BOOST: \"1.63.0\"\n    install:\n          # Installing .NET Core needs Windows Update enabled.\n        - sc config wuauserv start= auto\n        - net start wuauserv\n        - ps: >-\n            if (-not $env:BOND_VS_VERSION)\n            {\n                $env:BOND_VS_VERSION = $env:APPVEYOR_BUILD_WORKER_IMAGE\n                if (-not $env:BOND_VS_VERSION)\n                {\n                    $env:BOND_VS_VERSION = 'Visual Studio 2015'\n                }\n            }\n\n            if (($env:BOND_BUILD -eq 'C++') -or ($env:BOND_BUILD -eq 'Python')) {\n\n                git submodule update --init thirdparty\\rapidjson\n\n                $boostComponents = (\n                    'boost_chrono',\n                    'boost_date_time',\n                    'boost_thread',\n                    'boost_system',\n                    'boost_unit_test_framework')\n\n                if ($env:BOND_BUILD -eq 'Python') {\n                    $boostComponents += 'boost_python'\n                }\n\n                $vcToolsetVer = tools\\ci-scripts\\windows\\ConvertTo-MsvcVersion.ps1 `\n                    -ImageName $env:BOND_VS_VERSION `\n                    -Format VcToolSetVer\n\n                $boostLoc = tools\\ci-scripts\\windows\\Get-BoostLocation.ps1 `\n                    -Version $env:BOND_BOOST `\n                    -VcToolSetVer $vcToolSetVer\n\n                if (-not $boostLoc)\n                {\n                    $boostLoc = tools\\ci-scripts\\windows\\Install-Boost.ps1 `\n                        -Version $env:BOND_BOOST `\n                        -VcToolSetVer $vcToolSetVer `\n                        -Components $boostComponents\n                }\n\n                if ((-not $boostLoc) -or (-not $boostLoc['BOOST_LIBRARYDIR'][$env:BOND_ARCH]))\n                {\n                    throw \"No Boost libraries found/installed for $env:BOND_BOOST $env:BOND_ARCH\"\n                }\n\n                $env:BOOST_ROOT = $boostLoc['BOOST_ROOT']\n                $env:BOOST_LIBRARYDIR = $boostLoc['BOOST_LIBRARYDIR'][$env:BOND_ARCH]\n            }\n\n            choco install haskell-stack -y\n\n            choco install dotnetcore-sdk -y\n\n            # choco install updated the path, so re-read them from the registry and reset $env:path\n\n            $machinePath = [System.Environment]::GetEnvironmentVariable(\"Path\",\"Machine\")\n\n            $userPath = [System.Environment]::GetEnvironmentVariable(\"Path\",\"User\")\n\n            $env:Path = \"$machinePath;$userPath\"\n\n            if ($env:BOND_BUILD -eq \"Doc\") {\n\n                choco install pandoc --version 1.19.2  -y\n\n                choco install doxygen.install -y\n\n                $machinePath = [System.Environment]::GetEnvironmentVariable(\"Path\",\"Machine\")\n\n                $userPath = [System.Environment]::GetEnvironmentVariable(\"Path\",\"User\")\n\n                $env:Path = \"$machinePath;$userPath\"\n\n                $env:Path += \"C:\\Program Files\\doxygen\\bin\"\n\n                Get-Command doxygen,pandoc\n\n            }\n\n    cache:\n        - cs\\packages -> cs\\test\\core\\packages.config\n        - \"c:\\\\sr\"\n\n    before_build:\n        - ps: >-\n            $env:PreferredToolArchitecture = \"x64\"\n\n            $env:_IsNativeEnvironment = \"true\"\n\n            $vsCmakeGeneratorNum = tools\\ci-scripts\\windows\\ConvertTo-MsvcVersion.ps1 `\n                -ImageName $env:BOND_VS_VERSION `\n                -Format CMakeGeneratorNum\n\n            $vsYear = tools\\ci-scripts\\windows\\ConvertTo-MsvcVersion.ps1 `\n                -ImageName $env:BOND_VS_VERSION `\n                -Format Year\n\n            $cmakeGenerator = \"Visual Studio $vsCmakeGeneratorNum $vsYear\"\n\n            if ($env:BOND_ARCH -eq 64) {\n                $cmakeGenerator += \" Win64\"\n            }\n\n            $cmakeFlags = $env:BOND_CMAKE_FLAGS -split ';'\n\n            if ($env:BOND_BUILD -eq \"C#\" -Or $env:BOND_BUILD -eq \"C++\") {\n\n                dotnet restore cs\\cs.sln\n\n            }\n\n            if ($env:BOND_BUILD -eq \"Python\" -Or $env:BOND_BUILD -eq \"C++\") {\n\n                # Make sure we have Python27-64 before any other version\n\n                $env:Path = \"C:\\Python27\\;${env:Path}\"\n\n                if ($env:BOND_ARCH -eq 64) {\n                    $env:Path = \"C:\\Python27-x64\\scripts;C:\\Python27-x64\\;${env:Path}\"\n                }\n\n            }\n\n            if ($env:BOND_ARCH -eq 64) {\n\n                $pythonExt = \"-x64\"\n\n            }\n\n            if ($env:BOND_BUILD -eq \"Python\") {\n\n                mkdir build\n\n                cd build\n\n                cmake \"-DBoost_ADDITIONAL_VERSIONS=${env:BOND_BOOST}\" \"-DPYTHON_EXECUTABLE:FILEPATH=C:\\Python27${pythonExt}\\python.exe\" $cmakeFlags -G $cmakeGenerator ..\n\n            }\n\n            if ($env:BOND_BUILD -eq \"C++\") {\n\n                # We don't always need all of these compat tests--depending\n                # on what part of C++ we're building--but they're pretty\n                # fast to build, so build them all.\n\n                $compatTests = ('Tests\\Compat' )\n\n                dotnet msbuild cs\\cs.sln /verbosity:minimal \"/target:$($compatTests -join ';')\"\n\n                if (-not $?) { throw \"cs compat build failed\" }\n\n                mkdir build\n\n                cd build\n\n                cmake \"-DPYTHON_EXECUTABLE:FILEPATH=C:\\Python27${pythonExt}\\python.exe\" $cmakeFlags -G $cmakeGenerator .. 2>cmake_stderr.log\n\n                Get-Content cmake_stderr.log\n\n            }\n\n            if ($env:BOND_BUILD -eq \"Doc\") {\n\n                mkdir build\n\n                cd build\n\n                cmake ../doc\n\n            }\n\n\n    build_script:\n        - ps: >-\n            $env:PreferredToolArchitecture = \"x64\"\n\n            $env:_IsNativeEnvironment = \"true\"\n\n            if ($env:BOND_BUILD -eq \"Doc\") {\n\n                cmake --build . --target documentation -- /verbosity:minimal /logger:\"C:\\Program Files\\AppVeyor\\BuildAgent\\Appveyor.MSBuildLogger.dll\"\n\n                if (($LASTEXITCODE -eq 0) -And ($env:BOND_TOKEN) -And ($env:APPVEYOR_REPO_BRANCH -eq \"master\")) {\n\n                    git config --global user.email \"bondlab@microsoft.com\"\n\n                    git config --global user.name \"Appveyor\"\n\n                    git clone -b gh-pages \"https://${env:BOND_TOKEN}@github.com/microsoft/bond.git\" gh-pages 2>&1 | Out-Null\n\n                    if ($LASTEXITCODE -ne 0) { throw \"Cloning gh-pages branch failed: $LASTEXITCODE\" }\n\n                    cd gh-pages\n\n                    robocopy ..\\html . /E /J /MIR /MT /NFL /XD .git 2>&1\n\n                    # Robocopy uses exit codes 0-7 to convey details about\n                    # what was copied. Exit code 8 starts the range of\n                    # errors.\n\n                    if ($LASTEXITCODE -ge 8) { throw \"Robocopy documentation failed: $LASTEXITCODE\" }\n\n                    git add --all .\n\n                    if ($LASTEXITCODE -ne 0) { throw \"git add failed: $LASTEXITCODE\" }\n\n                    # Don't test exit code of 'git commit'. When there is\n                    # nothing to commit, it exits with 1. The push below\n                    # should still exit with 0 after not doing anything, so\n                    # the build will still pass.\n\n                    git commit -m \"Update documentation\"\n\n                    git push origin gh-pages 2>&1 | out-null\n\n                    if ($LASTEXITCODE -ne 0) { throw \"git push failed: $LASTEXITCODE\" }\n\n                    cd ..\n                }\n\n            }\n\n            if ($env:BOND_BUILD -eq \"Python\") {\n\n                cmake --build . --target python_unit_test -- /verbosity:minimal /logger:\"C:\\Program Files\\AppVeyor\\BuildAgent\\Appveyor.MSBuildLogger.dll\"\n\n            }\n\n            if ($env:BOND_BUILD -eq \"C++\") {\n\n                cmake --build . --target check -- /verbosity:minimal /logger:\"C:\\Program Files\\AppVeyor\\BuildAgent\\Appveyor.MSBuildLogger.dll\"\n\n            }\n\n            if ($env:BOND_BUILD -eq \"C#\") {\n\n                dotnet msbuild cs\\cs.sln /verbosity:minimal /p:Configuration=${env:BOND_CONFIG}\n\n            }\n\n            if (-not $?) { throw \"build failed\" }\n\n    test_script:\n        - ps: >-\n            if ($env:BOND_BUILD -eq \"Python\") {\n\n                ctest -C Debug --tests-regex python_unit_test --output-on-failure\n                if (-not $?) { throw \"tests failed\" }\n\n            }\n\n            if ($env:BOND_BUILD -eq \"C#\") {\n                dotnet test cs\\test\\core\\Core.csproj\n                if (-not $?) { throw \"tests failed\" }\n\n                dotnet test cs\\test\\coreNS10\\CoreNS10.csproj\n                if (-not $?) { throw \"tests failed\" }\n\n                dotnet test cs\\test\\internal\\Internal.csproj\n                if (-not $?) { throw \"tests failed\" }\n\n                & cs\\test\\test-examples.ps1 -IgnorePatterns '*\\shared-types-assembly\\*' -ErrorVariable exampleErrors\n                if ($exampleErrors) { throw \"One or more example failed. See above for details.\" }\n            }\n\n            if (-not $?) { throw \"build failed\" }\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "compiler",
          "type": "tree",
          "content": null
        },
        {
          "name": "cpp",
          "type": "tree",
          "content": null
        },
        {
          "name": "cs",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "idl",
          "type": "tree",
          "content": null
        },
        {
          "name": "java",
          "type": "tree",
          "content": null
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "thirdparty",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}