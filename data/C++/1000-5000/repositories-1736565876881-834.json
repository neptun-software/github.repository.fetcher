{
  "metadata": {
    "timestamp": 1736565876881,
    "page": 834,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "zeroc-ice/ice",
      "stars": 2069,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 1.453125,
          "content": "---\n# See https://clang.llvm.org/docs/ClangFormatStyleOptions.html\nBasedOnStyle: LLVM\nIndentWidth: 4\n---\nLanguage: Cpp\nAccessModifierOffset: -4\nAlignAfterOpenBracket: AlwaysBreak\nAllowAllArgumentsOnNextLine: false\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowAllConstructorInitializersOnNextLine: false\nAllowShortIfStatementsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: TopLevel\nBinPackArguments: false\nBinPackParameters: false\nBreakBeforeBraces: Allman\nColumnLimit: 120\nDerivePointerAlignment: false\nFixNamespaceComments: false\nIndentCaseLabels: true\nIndentPPDirectives: AfterHash\nKeepEmptyLinesAtTheStartOfBlocks: false\nNamespaceIndentation: All\nPackConstructorInitializers: CurrentLine\nPointerAlignment: Left\nSpaceAfterTemplateKeyword: false\nTabWidth: 4\nUseTab: Never\n---\nLanguage: ObjC\nAccessModifierOffset: -4\nAlignAfterOpenBracket: AlwaysBreak\nAllowAllArgumentsOnNextLine: false\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowAllConstructorInitializersOnNextLine: false\nAllowShortIfStatementsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: TopLevel\nBinPackArguments: false\nBinPackParameters: false\nBreakBeforeBraces: Allman\nColumnLimit: 120\nDerivePointerAlignment: false\nFixNamespaceComments: false\nIndentCaseLabels: true\nIndentPPDirectives: AfterHash\nKeepEmptyLinesAtTheStartOfBlocks: false\nNamespaceIndentation: All\nPackConstructorInitializers: CurrentLine\nPointerAlignment: Left\nSpaceAfterTemplateKeyword: false\nTabWidth: 4\nUseTab: Never\n"
        },
        {
          "name": ".clang-format-ignore",
          "type": "blob",
          "size": 0.5361328125,
          "content": "# C++ code generated from Slice files\ncpp/include/generated\ncpp/src/**/generated\ncpp/test/**/generated\ncpp/src/**/msbuild/*\ncpp/test/**/msbuild/*\n\n# C++ code generated from the Bison/Flex parsers\ncpp/src/Slice/Grammar.h\ncpp/src/Slice/Grammar.cpp\ncpp/src/Slice/Scanner.cpp\ncpp/src/IceGrid/Grammar.h\ncpp/src/IceGrid/Grammar.cpp\ncpp/src/IceGrid/Scanner.cpp\ncpp/src/IceStorm/Grammar.h\ncpp/src/IceStorm/Grammar.cpp\ncpp/src/IceStorm/Scanner.cpp\n\n# The property files generated from `makeprops.py`\ncpp/src/Ice/PropertyNames.h\ncpp/src/Ice/PropertyNames.cpp\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 0.671875,
          "content": "Checks:\n'-*,\n  clang-analyzer-*,\n  -clang-diagnostic-shadow-uncaptured-local,\n  -clang-analyzer-optin.core.EnumCastOutOfRange,\n  cert-*,\n  modernize-*,\n  -modernize-avoid-c-arrays,\n  -modernize-use-trailing-return-type,\n  -modernize-concat-nested-namespaces,\n  performance-*,\n  -performance-avoid-endl\n'\nWarningsAsErrors:  '*'\nHeaderFilterRegex: '.*'\nExcludeHeaderFilterRegex: 'include/lmdb.h|Grammar.h'\nUseColor: true\nFormatStyle: 'file'\nExtraArgs: ['-std=c++17']\nCheckOptions:\n  modernize-use-nullptr.NullMacros: 'NULL'\n  # std::exception_ptr is a cheap to copy, pointer-like type; we pass it by value all the time.\n  performance-unnecessary-value-param.AllowedTypes: 'exception_ptr$;'\n"
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.310546875,
          "content": "# Remove the line below if you want to inherit .editorconfig settings from higher directories\nroot = true\n\n# all files\n[*]\n\n#### Guidelines ####\nguidelines = 120\n\n#### Core EditorConfig Options ####\n\n# New line preferences\ninsert_final_newline = true\n\n# License header\nfile_header_template = Copyright (c) ZeroC, Inc.\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0966796875,
          "content": "* text=auto\njs/package.json text eol=lf\njs/package-lock.json text eol=lf\ngradlew.bat text eol=crlf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.7939453125,
          "content": "# Ignore objects and archives.\n*.aps\n*.[oa]\n*.obj\n*.dll\n*.ilk\n*.so\n*.so.*\n*.sl\n*.dylib\n*.pyc\n*.class\n*.exe\n*.mdb\n*.pdb\n*.tds\n*.bak\n*.ncb\n# .sdf is the Visual Studio 2010 equivalent to .ncb\n*.sdf\n# .VC.db is is the new IntelliSense database, it replaces the old .sdf\n*.VC.db\n# Visual Studio Hosting process configuration files\n*.vshost.exe.*\n*.opt\n*.user\n*.res\n*.exp\n.gdb_history\n.DS_Store\n*#\n.#*\n*~\n*.lib\n*.idb\n*.suo\n*.xap\ncore.*\ntmp_*.xml\nobj\n*.RES\nClientBin\nvcproj\n.metadata\n# VIM swap file\n*.swp\n.keychain\n\n# Eclipse\n.externalToolBuilders\n\n# macOS Keychain\n*.keychain\n.fl????????\npasswords\n\n# Makefile Build System\nbuild\ngenerated\n.depend\n\n# MSBuild Build System\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio\n*.opendb\n\n# Visual Studio 2015 cache/options directory\n.vs/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# IceBuilder dependency files\nSliceCompile.d\n\nxcuserdata\nxcshareddata\n/sdk\n\n# SliceCompile build log\nSliceCompile.command.*.log\n# Nuget packages\n**/msbuild/packages/*\n**/msbuild/zeroc.ice.*\n*.nupkg\n\n**/netstandard2.0/netstandard2.0/*\n**/netstandard2.0/netcoreapp3.*/*\n\nAppPackages\nBundleArtifacts\ncsharp/AppX\n*.deps.json\n*.runtimeconfig.dev.json\n*.runtimeconfig.json\ncpp/AppX\ncpp/test/Slice/errorDetection/tmp\n\nCarthage\n\n# iOS builds\n\n**/objs-*/\n**/build-*/\n\n.classpath\n.project\n.settings\n*.dep\n# Android Tets\n**/android/**/raw/*.bks\n\n# Log files generated by the test suite.\n*.log\n\n# Clang's compilation database file\n/compile_commands.json\n\n# Python Formatter cache\n.ruff_cache\n\n# Python venv\n.venv\n\n# SPM build artifacts\n.build\n.swiftpm\n\n# LLVM Code Coverage maps\n*.profraw\n*.profdata\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 0.08984375,
          "content": "<joe@zeroc.com> <externl@users.noreply.github.com>\nBenoit Foucher <benoit@zeroc.com> bentoi\n"
        },
        {
          "name": ".markdownlint.json",
          "type": "blob",
          "size": 0.083984375,
          "content": "{\n  \"no-duplicate-heading\": {\n    \"siblings_only\": true\n  },\n  \"line-length\": false\n}\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG-3.3.md",
          "type": "blob",
          "size": 39.033203125,
          "content": "The entries below contain brief descriptions of the changes in a release, in no\nparticular order. Some of the entries reflect significant new additions, while\nothers represent minor corrections. Although this list is not a comprehensive\nreport of every change we made in a release, it does provide details on the\nchanges we feel Ice users might need to be aware of.\n\nWe recommend that you use the release notes as a guide for migrating your\napplications to this release, and the manual for complete details on a\nparticular aspect of Ice.\n\n- [Changes in Ice 3.3.1](#changes-in-ice-331)\n  - [General Changes](#general-changes)\n  - [C++ Changes](#c-changes)\n  - [Java Changes](#java-changes)\n  - [C# Changes](#c#-changes)\n  - [Python Changes](#python-changes)\n  - [Ruby Changes](#ruby-changes)\n  - [PHP Changes](#php-changes)\n- [Changes in Ice 3.3.0](#changes-in-ice-330)\n  - [General Changes](#general-changes-1)\n  - [C++ Changes](#c-changes-1)\n  - [Java Changes](#java-changes-1)\n  - [.NET Changes](#net-changes)\n  - [Python Changes](#python-changes-1)\n  - [Ruby Changes](#ruby-changes-1)\n  - [PHP Changes](#php-changes-1)\n\n# Changes in Ice 3.3.1\n\nThese are changes since Ice 3.3.0.\n\n## General Changes\n\nThese entries apply to all relevant language mappings unless otherwise\nnoted.\n\n- Fixed a bug where `ice_getCachedConnection` could throw if called\n  shortly after connection establishment failed.\n\n- Fixed an IceGrid bug where an application update could trigger the\n  deactivation of all session-activated servers even if these servers\n  were not updated.\n\n- The frequency at which Ice checks for connections that can be reaped\n  by active connection management (ACM) is now set by default to 10%\n  of the smallest, non-zero ACM setting (`Ice.ACM.Client` and\n  `Ice.ACM.Server`), with a minimum value of 5 seconds and a maximum\n  value of 5 minutes. This default can be overridden by setting\n  `Ice.MonitorConnections`, which is no longer deprecated, and whose\n  value is the check frequency in seconds.\n\n- Fixed a bug in IceBox where services using the shared communicator\n  would be passed the wrong communicator if re-started with the IceBox\n  service manager interface.\n\n- Improved Glacier2 to automatically destroy the client session if the\n  forwarding of a request from a back-end server to the client fails\n  with an unrecoverable error. This is particularly useful for clients\n  that receive requests from back-end servers on a regular basis and\n  disable the Glacier2 session timeout. If for some reason the client\n  becomes unreachable, Glacier2 will eventually destroy the client\n  session (assuming timeouts are properly configured on the Glacier2\n  client endpoints).\n\n- Added support for updating locator cache endpoints in the background\n  if the new `Ice.BackgroundLocatorCacheUpdates` property is set to 1.\n\n  Locator cache updates are triggered if the proxy locator cache\n  timeout is configured and the cached endpoints are older than the\n  configured timeout.\n\n  By default, locator cache updates are performed before making an\n  invocation, delaying the invocation until the new endpoints are\n  retrieved from the locator. With this feature enabled, the locator\n  cache updates are performed in the background and the invocation\n  that triggered the update uses the previously cached endpoints.\n\n- Optimized the Ice client run time to minimize locator requests when\n  multiple concurrent or AMI requests need to resolve the endpoints of\n  the same well-known object, object adapter, or replica group.\n\n- Fixed a bug in IceGrid that would cause it to generate incorrect\n  configuration files for servers whose `ice-version` was set to a\n  version previous to Ice 3.3.0.\n\n- Fixed a bug in the Slice translators that prevented them from being\n  run from a directory without write permissions, even if no output\n  files were being written to the directory.\n\n- Fixed a bug where retried AMI calls could cause the timer thread to\n  print an error message if the retry failed and if `Ice.RetryIntervals`\n  was configured with non-zero time intervals.\n\n- All error output from the Slice compilers now goes to stderr.\n\n- Made unmarshaling code robust against messages containing invalid\n  indexes for class instances.\n\n- Fixed IcePatch2 to handle non-ASCII file names properly.\n\n- Fixed a bug in IceGrid that could cause the registry to fail with an\n  assertion if an application is synchronized concurrently by multiple\n  administrative clients (or by nodes started with the `--deploy`\n  option).\n\n- IceGrid locator implementation changes:\n\n  - Fixed a bug where the registry could crash when resolving the\n    endpoints of a replica group if some servers were activating\n    concurrently.\n\n  - Fixed a bug where the registry could hang when resolving the\n    endpoints of a round-robin replica group if a member of the\n    replica group was removed concurrently.\n\n  - Improved the scalability of the locator implementation to better\n    handle a high volume of concurrent requests. The registry now\n    limits the number of invocations to the IceGrid nodes to get the\n    object adapter endpoints.\n\n- A Slice compiler now removes any files it has generated during the\n  current execution if it fails or is interrupted.\n\n- The Slice compilers that support the `--depend` option now use an exit\n  status of 1 if a failure occurs while generating dependencies. In\n  previous releases the compilers used an exit status of 0.\n\n- Fixed a bug in the iceca script that prevented the command `init --overwrite`\n  from working properly on Windows.\n\n- Fixed a bug where the IceBox shared communicator ignored Ice\n  communicator properties specified in an IceBox service configuration\n  file.\n\n- Fixed a bug where Ice plug-ins could be destroyed more than once.\n\n- Fixed several issues in the IceGrid GUI.\n\n## C++ Changes\n\n- Fixed a bug in IceSSL plug-in which could cause a crash on\n  communicator destruction.\n\n- Changed the thread pool to ensure that references to AMI callback\n  objects are released as soon as possible.\n\n- Fixed bug in `slice2cpp` that caused bad code to be generated for\n  classes and modules whose name was a C++ keyword.\n\n- Fixed a bug in IceSSL where the `IceSSL.CheckCertName` property did\n  not have any effect.\n\n- Fixed `icegridadmin` `service list` command crash.\n\n- Fixed a bug where `slice2cpp` and `slice2freeze` would generate absolute\n  include paths if the command line option `-I.` was used.\n\n- Fixed a Freeze transactional evictor bug that could cause the\n  transaction of an asynchronous method dispatch to be rolled back if\n  rollback on user exception was enabled.\n\n- Fixed a bug that could cause the first invocation on a proxy to\n  incorrectly be sent compressed or not compressed.\n\n- Fixed a bug on Windows that could cause an interrupted application\n  to spin for a while before terminating.\n\n## Java Changes\n\n- Slice types now implement `java.io.Serializable`.\n\n- If a servant raises `OutOfMemoryError` while dispatching an operation,\n  the Ice run time now traps it and treats it as a hard error, meaning\n  Ice logs an error message and closes the connection on which the\n  request was received.\n\n- Added object serialization that allows native Java objects to be\n  sent as operation parameters. See the Slice chapter and the Java\n  language mapping chapter in the manual for more information.\n\n- Fixed bug in `slice2java` that caused bad code to be generated for a\n  class whose name was a Java keyword if the class contained data\n  members.\n\n- The path names specified by the `IceSSL.Keystore`, `IceSSL.Truststore`,\n  and `IceSSL.Random` properties can now refer to class path resources.\n\n- Added methods to the IceSSL plug-in to allow keystores, truststores,\n  and RNG seeds to be specified using input streams.\n\n- Fixed the `IceSSL.ConnectionInfo` type so that the \"incoming\" and\n  `adapterName` members are public.\n\n- Added support for using Ice in an applet, along with a new demo.\n\n## C# Changes\n\n- Added object serialization that allows native C# objects to be sent\n  as operation parameters. See the Slice chapter and the C# language\n  mapping chapter in the manual for more information.\n\n- Changed the Ice run time to no longer rely on .NET worker threads\n  to start asynchronous I/O operations.\n\n- Fixed a bug in `slice2cs` that caused a core dump if a dictionary had\n  a value type of Object.\n\n- Fixed a bug in `slice2cs` that caused incorrect code to be generated\n  if an operation had a parameter named `ex`.\n\n- Fixed a bug in `slice2cs` that caused incorrect code to be generated\n  if a Slice class used the property mapping and also applied\n  a `[\"cs:attribute:...\"]` metadata directive to a data member.\n\n- Fixed an issue that could cause an application to fail to start if\n  Ice was unable to load an assembly that was referenced (but not\n  required) by the program and not present on the system.\n\n- Fixed a bug in marshaling code that caused a trailing zero byte\n  to be marshaled for user exceptions without class data members.\n\n- Fixed a bug in `slice2cs` that caused incorrect code to be generated\n  for a dictionary that used a structure as the key type.\n\n- Fixed a bug in `slice2cs` that caused incorrect code to be generated\n  for a sequence whose element type is a structure that uses the\n  class mapping.\n\n## Python Changes\n\n- Implemented the `Ice.Trace.Slicing` property for user exceptions.\n\n- It is now possible to pass a sequence of 64-bit integer values\n  using an object that supports the buffer protocol.\n\n- Fixed a bug in the constructors of user-defined types that have\n  structures as data members. Consider this example:\n\n  ```\n  // Slice\n  struct Point {\n      int x;\n      int y;\n  };\n  struct Event {\n      Point location;\n      ...\n  };\n  ```\n\n  The Event constructor supplied a default instance of the Point\n  member if the caller did not supply one. However, this default\n  instance was unintentionally shared by all Event objects that\n  omitted a value for the Point member during construction. The\n  generated code now ensures that each instance of Event assigns a\n  new instance of Point.\n\n- Fixed bugs in `getImplicitContext` related to using it when an\n  implicit context had not been set.\n\n- Fixed bugs in `stringToProxy` and `propertyToProxy` related to null\n  proxies.\n\n- `Ice.getSliceDir()` now only searches for the `slice` directory in a\n  standard Ice installation.\n\n- Improved the way the build system locates the Python framework on\n  macOS.\n\n## Ruby Changes\n\n- The translator now generates an `eql?` method for Slice structures.\n\n- Implemented the `Ice.Trace.Slicing` property for user exceptions.\n\n- Added helper `Ice.getSliceDir`, which locates the `slice` directory in\n  a standard Ice installation.\n\n## PHP Changes\n\n- It is now possible to specify multiple Slice files in your profile\n  configuration that have common include files. For example, if `A.ice`\n  and `B.ice` both include `Common.ice`, you can now do the following:\n\n  ```\n  ice.slice=-I. A.ice B.ice\n  ```\n\n  In previous releases this would have caused a redefinition error,\n  which you could work around by creating a single Slice file that\n  included both `A.ice` and `B.ice`. This workaround is no longer\n  necessary.\n\n- Fixed bugs in the `ice_router` and `ice_locator` proxy methods.\n\n# Changes in Ice 3.3.0\n\nThese are changes since Ice 3.2.1.\n\n## General Changes\n\nThese entries apply to all relevant language mappings unless otherwise\nnoted.\n\n- It is now possible to use UNC paths on Windows in the configuration\n  of Ice services, such as in the value of the `IceGrid.Node.Data`\n  property for an IceGrid node.\n\n- Fixed bug in `slice2html` that caused incorrect hyperlinks to be\n  generated if nested modules were used.\n\n- Added support for non-blocking AMI and batch requests. Activities\n  such as DNS lookups, endpoint resolution, connection establishment,\n  and sending the request are now performed in the background if\n  necessary.\n\n- AMI requests now return a boolean to indicate if the request is\n  sent synchronously. If not sent synchronously and the AMI callback\n  implements the `Ice::AMISentCallback` interface, the Ice run time\n  calls the `ice_sent()` method once the request is sent.\n\n- AMI timeouts are no longer triggered by the connection monitor\n  thread at regular time intervals. Instead, timeouts are now\n  triggered on time just like synchronous invocations. As a result,\n  the setting of the `Ice.MonitorConnections` is no longer useful and\n  this property has been deprecated.\n\n- Added the proxy methods `ice_flushBatchRequests()` and\n  `ice_flushBatchRequests_async()` to flush the batch requests of the\n  connection associated with the proxy. Like AMI requests, the\n  `ice_flushBatchRequests_async()` method is guaranteed to not block.\n\n- Added support for oneway AMI requests. The `ice_response()` method of\n  the AMI callback is never called for oneway requests sent with AMI.\n  Unlike regular oneway requests which might block until the request\n  is passed to the TCP/IP stack, oneway AMI requests can't block.\n\n- Removed the thread-per-connection (TPC) concurrency model.\n  Applications that were using TPC for its ordering guarantees can use\n  the new thread pool serialization feature.\n\n- The Ice thread pool now supports a new serialization mode that\n  serializes the processing of messages received over a connection.\n  For example, this is useful when you want to ensure the orderly\n  dispatching of oneway requests from a client even if the thread pool\n  has multiple threads. Serialization is enabled by setting the thread\n  pool's `Serialize` property to 1.\n\n- An Ice server will now `abort()` if there are no more file descriptors\n  available to accept incoming connections. Note that this behavior is\n  subject to change in the final release.\n\n- An IceGrid node is more conservative when removing the directory of\n  a server. The node only removes the directory when the server is\n  explicitly removed from a deployed application or if the directory\n  contains only files and directories that were created by the node.\n\n- IceGrid's round-robin load balancing policy better handles servers\n  that are unreachable.\n\n- Fixed an IceGrid bug where patching servers deployed with the\n  attribute `application-distrib` set to false wouldn't work.\n\n- Added an object adapter to the IceGrid registry. The adapter is\n  named `IceGrid.Registry.AdminSessionManager` and is responsible for\n  Glacier2 administrative sessions.\n\n- When resolving the endpoints of a replica group, the IceGrid locator\n  no longer waits for an object adapter to complete its activation if\n  another adapter is already active.\n\n- Fixed an IceGrid descriptor bug where re-opening an unnamed property\n  set would cause multiple property definitions.\n\n- Added a fix to prevent the IceGrid node from printing an annoying\n  thread pool size warning on startup.\n\n- Fixed IceGrid bug where updates to IceBox services were not\n  correctly sent to the IceGrid GUI or to IceGrid registry slaves.\n\n- The IceGrid node now unblocks the `SIGHUP`, `SIGINT` and `SIGTERM` signals\n  from forked servers.\n\n- The IceGrid node now prints a warning if it can't reach the IceGrid\n  registry when it starts. This warning can be disabled with `--nowarn`.\n\n- An IceBox service can now recursively start and stop other IceBox\n  services from within its start and stop methods. The level of\n  recursion is limited to the threads in the administrative object\n  adapter's thread pool.\n\n- Configuration properties for IceBox services can now be defined on\n  the command line.\n\n- IceBox services that share a communicator now use a dedicated\n  communicator instance that is not used by the IceBox server. This\n  dedicated communicator only inherits properties from the server's\n  communicator if `IceBox.InheritProperties` is set to a non-zero value.\n\n- It is no longer necessary to define a value for the property\n  `IceBox.ServiceManager.Endpoints`. If this property is not defined,\n  the `ServiceManager` interface is not available.\n\n- Changes related to Highly-Available IceStorm\n\n  - IceStorm now supports master/slave replication with automatic\n    failover.\n\n  - IceStorm also supports a transient mode that uses no databases.\n    This mode is enabled using the new property `<service>.Transient.Replication`\n    is not supported in this mode.\n\n  - Subscriptions are now persistent (except in transient mode).\n\n  - Added a new Quality of Service (QoS) parameter, `retryCount`, to\n    control when subscribers are removed. IceStorm automatically\n    removes a subscriber after the specified number of unsuccessful\n    event deliveries. The default value of `retryCount` is 0, meaning\n    the subscriber is removed immediately upon any failure. A\n    subscriber is always removed on a hard failure, which is defined\n    as the occurrence of `ObjectNotExistException` or\n    `NotRegisteredException`.\n\n  - The IceStorm database format has changed. Use the utility\n    icestormmigrate to migrate from the database formats of Ice 3.1.1\n    and Ice 3.2.1. The old migration script (`updateicestorm.py`) has\n    been removed.\n\n  - Added the new C++ example `demo/IceStorm/replication2`, which\n    demonstrates how to manually configure IceStorm replication.\n\n  - Added the `replica` command to `icestormadmin` to get debugging\n    information on IceStorm replication.\n\n  - The `TopicManager` object adapter now uses its own thread pool in\n    the replicated case to ensure that ordering is guaranteed by\n    default even if a publisher uses a oneway proxy.\n\n  - Upon shutdown IceStorm now guarantees that all received events\n    are delivered to all subscribers.\n\n  - Added `Topic::getNonReplicatedPublisher`, which always return a\n    non-replicated publisher proxy.\n\n  - All IceStorm properties must be prefixed with the service name.\n    For example, consider the following IceBox service configuration:\n\n    `IceBox.Service.Foo=IceStormService,33:createIceStorm ...`\n\n    In this case the IceStorm configuration properties must use the\n    `Foo` prefix, such as\n\n    `Foo.Discard.Interval=10`\n\n  - Removed the `icestormadmin` Slice checksum check. This avoids\n    warnings when using `icestormadmin` against an older version of\n    IceStorm.\n\n- It is now possible to specify properties in a config file with\n  `space`, `#` or `=` in either the key or value string. It is necessary\n  to escape `#` and `=` as `\\#` and `\\=`. Leading or trailing spaces\n  are only allowed in keys and need to be escaped as `\\ `.\n\n- Properties set programmatically can no longer have leading or\n  trailing whitespace in the key.\n\n- There is no longer a limit on the allowable length of a property\n  line in an Ice config file. Previously the limit was 1024.\n\n- The new property `Ice.Warn.UnusedProperties` causes the communicator\n  to display a warning during its destruction that lists all\n  properties that were set but whose values were never read.\n\n- The way that the Ice run time determines whether a proxy invocation\n  is eligible for collocation optimization has changed somewhat. The\n  Ice run time no longer performs a DNS lookup; instead, invocations\n  on a direct proxy will use the optimization only if the host and\n  port of one of its endpoints match the host and port of an endpoint\n  or published endpoint of an object adapter from the same\n  communicator.\n\n- Exceptions thrown from collocation-optimized invocations are now\n  fully transparent. If an operation throws an exception that is not\n  in the operation's exception specification, or throws a non-Ice\n  exception, the client receives `UnknownUserException` or\n  `UnknownException`, exactly as if the servant for a remote invocation\n  had thrown the same exception. (In earlier versions, the client\n  received the original exception, rather than an unknown exception.)\n\n  For Ice run-time exceptions, all run-time exceptions are passed\n  to the client as `UnknownLocalException`, except for\n\n  - `ObjectNotExistException`\n  - `FacetNotExistException`\n  - `OperationNotExistException`\n  - `OperationNotExistException`\n  - `UnknownException`\n  - `UnknownLocalException`\n  - `UnknownUserException`\n  - `CollocationOptimizationException`\n\n- The property `Ice.Default.CollocationOptimization` and the proxy\n  property `<proxy>.CollocationOptimization` have been deprecated and\n  replaced by `Ice.Default.CollocationOptimized` and\n  `<proxy>.CollocationOptimized`, respectively.\n\n- Most proxy factory methods now return a proxy of the same type as\n  the original and no longer require the use of a checked or unchecked\n  cast. For example, in C++ you can write\n\n  ```\n  HelloPrx hello = ...;\n  hello = hello->ice_oneway();\n  ```\n\n  Previously you would have needed a cast, such as\n\n  ```\n  hello = HelloPrx::uncheckedCast(hello->ice_oneway());\n  ```\n\n  In Java and .NET, you must use a type cast:\n\n  ```\n  hello = (HelloPrx)hello.ice_oneway();\n  ```\n\n- If a proxy contains a host that is multihomed, the client will now\n  try all the available IP addresses. Previously, only the first in\n  the address list returned by the DNS was used and others were\n  ignored.\n\n- It's now possible to change the compression setting for a fixed\n  proxy. In previous releases, calling `ice_compress` on a fixed proxy\n  would raise `Ice::FixedProxyException`.\n\n- Added a new `skipEncapsulation` method to the `Ice::InputStream`\n  interface. This method can be used to skip an encapsulation when\n  reading from a stream.\n\n- The `endEncapsulation` method from the `Ice::InputStream` interface will\n  now throw `Ice::EncapsulationException` if not all the data from the\n  encapsulation has been read.\n\n- The marshaling code now throws an exception if an enumerator that is\n  out of range for its enumeration is sent or received.\n\n- Network tracing now also includes failures to connect if\n  the `Ice.Trace.Network` property is set to 2.\n\n- The property `Ice.Trace.Location` has been deprecated and replaced\n  by `Ice.Trace.Locator`.\n\n- The Ice locator tracing (enabled with the `Ice.Trace.Locator`\n  property) now traces calls to locator registry when an object\n  adapter updates its endpoints or the server process proxy is\n  registered.\n\n- The new property `Ice.TCP.Backlog` allows you to specify the size of\n  incoming connection backlog for TCP/IP sockets. This setting is\n  also used for SSL. In C++ the default value is `SOMAXCONN` or 511 if\n  that macro is not defined. In Java and .NET the default value is\n  511.\n\n- Added support for IPv6. It is disabled by default but can be enabled\n  using the configuration property `Ice.IPv6`. The property `Ice.IPv4` can\n  be used to disable IPv4 support.\n\n- Added support for UDP multicast.\n\n- A new object adapter property, `<adapter>.ProxyOptions`, lets you\n  customize the proxies that the adapter creates.\n\n- Added a new operation to the `ObjectAdapter` interface named\n  `refreshPublishedEndpoints()`. This operation allows you to update an\n  adapter's published endpoints after a change in the available local\n  interfaces or after a change to the `PublishedEndpoints` property.\n\n- The `-h *` endpoint option is now only valid for object adapter\n  endpoints. It can no longer be used in proxy endpoints or object\n  adapter published endpoints.\n\n- Ice now listens on `INADDR_ANY` for object adapter endpoints that do\n  not contain a host name (or are set to use `-h *` or `-h 0.0.0.0`).\n  Previously, Ice would only listen on the local interfaces that were\n  present when the adapter was created.\n\n- Accepting incoming connections can no longer block a thread from a\n  server thread pool. This includes activities such as connection\n  validation and SSL handshaking.\n\n- Changed servant locators so both `locate()` and `finished()` can throw\n  user exceptions.\n\n- Improved Glacier2 to take advantage of the new non-blocking aspects\n  of Ice. Glacier2 now uses the thread pool concurrency model and, in\n  buffered mode, Glacier2 only uses a single thread to forward queued\n  requests. As a result, Glacier2 now requires a fixed number of\n  threads regardless of the number of connected clients.\n\n- Glacier2 filters are now disabled by default for IceGrid client\n  and administrative sessions created with the IceGrid session\n  managers. If you rely on these filters being enabled, you must now\n  explicitly set the property `IceGrid.Registry.SessionFilters` or\n  `IceGrid.Registry.AdminSessionFilters`.\n\n- The use of sequences (and structs containing sequences) as valid\n  dictionary keys has been deprecated and will be removed in a future\n  release.\n\n- `slice2vb` has been removed from the distribution and is no longer\n  supported. To use Visual Basic .NET with Ice, use `slice2cs` to\n  generate C# code from Slice definitions, and then use a C# compiler\n  to create a DLL from the generated code. Then link against that DLL\n  in your Visual Basic project.\n\n- Fixed a variety of bugs with `slice2cpp` where incorrect code\n  would be generated when C++ reserved words are used as Slice\n  identifiers.\n\n- If a class, interface, or exception has a base, `slice2html` now\n  generates a hyperlink to the base. (Previously, only the name of the\n  base was shown, without a hyperlink.)\n\n- `slice2html` now generates documentation for Slice constant\n  definitions.\n\n- `slice2html` now generates the scoped name for the `<h1>` element of\n  each page instead of the unqualified name. For example, it now shows\n  `Ice::DNSException` instead of `DNSException`.\n\n- The ability to install a logger via the `Ice.LoggerPlugin` property\n  has been removed. The new mechanism requires that you create an\n  instance of the `Ice::LoggerPlugin` class in your plug-in factory.\n  Please see the manual for more details.\n\n- It is no longer possible to provide input files on the command line\n  for `icestormadmin` or `icegridadmin`.\n\n- Freeze evictor update:\n\n  - the existing evictor was renamed `BackgroundSaveEvictor`\n  - added new `TransactionalEvictor`\n\n- Fixed a bug in FreezeScript that caused a failure when a script\n  attempted to access the `length` member of a string value.\n\n- Added support for string concatenation in FreezeScript using the\n  `+` operator.\n\n- `dumpdb` output now goes to stdout.\n\n## C++ Changes\n\n- Fixed `icepatch2server` crash on exit bug.\n\n- Fixed race condition in `IceUtil::Cache`.\n\n- Changed the string methods in `InputStream` and `OutputStream` to accept\n  an optional boolean argument. If true (the default), strings are\n  processed by the string converter (if any) before marshaling or\n  unmarshaling. If false, the string converter is bypassed. No source\n  code changes are necessary for existing programs.\n\n- The new `Ice::StringConverterPlugin` class allows you to install a\n  custom string converter and/or wstring converter during communicator\n  initialization.\n\n- The Ice shared library now provides a string converter plug-in\n  factory: `createStringConverter`. See the Ice manual for details.\n\n- `IceUtil::stringToWstring` and `IceUtil::wstringToString` now take\n  a second argument of type `ConversionFlags`. It can be either\n  `strictConversion` or `lenientConversion`. The default is\n  `lenientConversion` for compatibility with previous releases. See\n  the Ice manual for further details.\n\n- Added IceGrid secure demo to demonstrate how to setup a secure\n  IceGrid deployment.\n\n- Fixed a Glacier2 assert that would occur if the configuration\n  defined only the SSL permissions verifier.\n\n- The `IceUtil::Timer` destroy method no longer joins with the timer\n  execution thread if it's called from a timer task. Instead, the\n  thread is detached.\n\n- The `IceUtil::Timer` `schedule` and `scheduleRepeated` methods now throw\n  `IceUtil::IllegalArgumentException` if the timer is destroyed.\n\n- Fixed potential Slice parser assert.\n\n- Added an HA IceStorm template to `config/templates.xml`.\n\n- Removed the index parameter from the IceStorm template.\n\n- It is now possible to manually configure the node proxies when\n  using HA IceStorm in conjunction with IceGrid.\n\n- iceca and associated `ImportKey.class` are now copied into bin and lib\n  respectively.\n\n- iceca did not correctly support the `--verbose` flag with the import\n  command.\n\n- iceca request has been simplified. The command now takes the name of\n  the file to generate, the common name, and an optional email\n  address.\n\n- The iceca `ImportKey.class` utility is now installed in\n  `/usr/share/Ice-3.3.0` for an RPM install or `${prefix}/lib` otherwise.\n\n- The following APIs were deprecated in Ice 3.1 and have been removed:\n\n  - `Application::main(int, char*[], const char*, const Ice::LoggerPtr&)`\n  - `initializeWithLogger`\n  - `initializeWithProperties`\n  - `initializeWithPropertiesAndLogger`\n  - `stringToIdentity`\n  - `identityToString`\n  - `ObjectPrx::ice_hash`\n  - `ObjectPrx::ice_communicator`\n  - `ObjectPrx::ice_newIdentity`\n  - `ObjectPrx::ice_newContext`\n  - `ObjectPrx::ice_newFacet`\n  - `ObjectPrx::ice_newAdapterId`\n  - `ObjectPrx::ice_newEndpoints`\n  - `ObjectPrx::ice_collocationOptimization`\n  - `ObjectPrx::ice_connection`\n\n- Added `public` keyword to the definition of `IceSSL::PublicKey`.\n\n- Fixed a bug in `slice2freeze` in which it was not properly handling\n  the `cpp:type:wstring` metadata, which would result in narrow\n  strings being used in generated code when wstring should have been\n  used instead.\n\n- `IceInternal::GCShared` now derives from `IceUtil::Shared`. This now\n  makes it possible to have a servant class derived from\n  `IceUtil::Thread` (which, previously, was impossible).\n\n- The thread stack size specified with the `IceUtil::Thread::start()`\n  method parameter is now adjusted to `PTHREAD_STACK_MIN` if it's\n  inferior to it. On macOS, it's also adjusted to the next closest\n  multiple of the page size (4KB).\n\n- Added a new overloading of the Ice::createInputStream method:\n\n  ```\n  Ice::InputStreamPtr createInputStream(\n      const CommunicatorPtr&,\n      const pair< const Byte*, const Byte*>&);\n  ```\n\n- Fixed a bug in the encoding of user exceptions with a class\n  attribute and returned by AMD-dispatched invocations. An extra byte\n  was encoded at the end. This fix doesn't affect on the wire\n  compatibility with old Ice clients.\n\n- Added `what()` member to `IceUtil::Exception`, so a single catch handler\n  can be used for Ice exceptions:\n\n  ```\n  try\n  {\n      // Call something that may throw an Ice exception\n  }\n  catch(const ::std::exception& ex)\n  {\n      cerr << ex.what() << endl; // Works for any ::std::exception,\n                                 // including Ice exceptions\n  }\n  ```\n\n  `what()` is implemented in terms of `ice_print()`, so overriding\n  `ice_print()` also changes the string returned by `what()`.\n\n## Java Changes\n\n- Fixed the `slice2java` ant task to redirect stderr output so that\n  messages from the preprocessor are not interpreted as dependencies.\n\n- Fixed the `slice2java` ant task to recompile all of the files in the\n  file list if at least one of the files has changed and checksums are\n  being generated.\n\n- Deprecated the class `IceUtil.Version`.\n\n- Added the methods `stringVersion` and `intVersion` to `Ice.Util` for\n  obtaining the Ice version.\n\n- Fixed a `NullPointerException` thrown when allocating an `InputStream`\n  with an empty buffer.\n\n- Fixed a `NullPointerException` thrown when calling `startEncapsulation`\n  on an `OutputStream`.\n\n- The following APIs were deprecated in Ice 3.1 and have been removed:\n\n  - `Application.main(String, String[], String, Logger)`\n  - `Util.initializeWithLogger`\n  - `Util.initializeWithProperties`\n  - `Util.initializeWithPropertiesAndLogger`\n  - `ObjectPrx.ice_hash`\n  - `ObjectPrx.ice_communicator`\n  - `ObjectPrx.ice_newIdentity`\n  - `ObjectPrx.ice_newContext`\n  - `ObjectPrx.ice_newFacet`\n  - `ObjectPrx.ice_newAdapterId`\n  - `ObjectPrx.ice_newEndpoints`\n  - `ObjectPrx.ice_collocationOptimization`\n  - `ObjectPrx.ice_connection`\n\n- Ice for Java now supports the `ICE_CONFIG` environment variable.\n\n- The Java2 language mapping is now deprecated.\n\n- Added support for a password callback in IceSSL. Also added new\n  properties for specifying the name of a password callback class or\n  certificate verifier class.\n\n- `LocalObject` is now mapped to `java.lang.Object`; an `out LocalObject`\n  parameter is still mapped to an `Ice.LocalObjectHolder` object.\n  `Ice.LocalObjectHolder` now holds a `java.lang.Object`. The interface\n  `Ice.LocalObject` and the abstract class `Ice.LocalObjectImpl` are now\n  deprecated.\n\n- `Ice.LocalException` and `Ice.UserException` now implement\n  `java.lang.Cloneable`.\n\n- Fixed the generated hashCode method to prevent `NullPointerException`.\n\n## .NET Changes\n\n- Added the methods `stringVersion` and `intVersion` to `Ice.Util` for\n  obtaining the Ice version.\n\n- Fixed a `NullReferenceException` thrown when allocating an `InputStream`\n  with an empty buffer.\n\n- Fixed a `NullReferenceException` thrown when calling\n  `startEncapsulation` on an `OutputStream`.\n\n- Changed `Ice.Exception` to derive from `System.Exception` rather than\n  `System.ApplicationException` in accordance with Microsoft's\n  recommendations for writing custom exceptions.\n\n- The following APIs were deprecated in Ice 3.1 and have been removed:\n\n  - `Application.main(string, string[], string, Logger)`\n  - `Util.initializeWithLogger`\n  - `Util.initializeWithProperties`\n  - `Util.initializeWithPropertiesAndLogger`\n  - `ObjectPrx.ice_hash`\n  - `ObjectPrx.ice_communicator`\n  - `ObjectPrx.ice_newIdentity`\n  - `ObjectPrx.ice_newContext`\n  - `ObjectPrx.ice_newFacet`\n  - `ObjectPrx.ice_newAdapterId`\n  - `ObjectPrx.ice_newEndpoints`\n  - `ObjectPrx.ice_collocationOptimization`\n  - `ObjectPrx.ice_connection`\n\n- The `Ice.Application` class now supports signal handling on Mono.\n\n- Added the build macro `MANAGED`, which can be enabled if you want to\n  build a version of the Ice run time that uses only managed code.\n\n- Improved marshaling performance for Ice for .NET. This particularly\n  affects programs running under Mono on big-endian machines, where\n  marshaling performance of sequences improves by up to a factor of\n  10. For little-endian machines (both Windows and Mono), marshaling\n  performance is also improved.\n\n- Added `ice_name()` method to exceptions, in keeping with the C++\n  and Java convention. The method returns the Slice type ID of\n  exception, without a leading `::` qualifier.\n\n- Fixed a bug that caused a `NullPointer` exception for sequences\n  of structs if the structs used the class mapping and the sequence\n  contained null elements.\n\n- Fixed a bug that caused a `NullPointer` exception when marshaling\n  a struct containing reference types if that was nested inside\n  a data type, such as another exception or struct.\n\n- Added support for a password callback in IceSSL. Also added new\n  properties for specifying the name of a password callback class or\n  certificate verifier class. See manual for more details.\n\n- Fixed a bug in `slice2cs` that caused incorrect code to be generated\n  for data members of classes and structures that used the\n  `[\"clr:property\"]` metadata directive.\n\n- Fixed a bug in `slice2cs` that caused incorrect code to be generated\n  for Slice exceptions with data members that had the same name as one\n  of the data members of `System.ApplicationException`.\n\n- The metadata directive `cs:collection` is no longer valid.\n  Use `[\"clr:collection\"]` instead.\n\n- Added a new mapping for Slice sequences to use C# 2.0\n  generics:\n\n  ```\n  // Slice\n  [\"clr:generic:List\"] sequence<int> S;\n  ```\n\n  maps to:\n\n  ```\n  // C#\n  System.Collections.Generic.List<int> S;\n  ```\n\n  This also works for types other than `List`. Please see the manual for\n  more details.\n\n- Added a new mapping for Slice dictionaries to use C# 2.0\n  generics:\n\n  ```\n  // Slice\n  dictionary<string, int> D;\n  ```\n\n  maps to:\n\n  ```\n  // C#\n  System.Collections.Generic.Dictionary<string, int> D;\n  ```\n\n  The previous mapping to the .NET 1.1 `DictionaryBase` class is still\n  supported with the `clr:collection` metadata directive.\n\n- `LocalObject` is now mapped to `System.Object`. The interface\n  `Ice.LocalObject` and the abstract class `Ice.LocalObjectImpl` are now\n  deprecated.\n\n- The `Ice.Util.proxyIdentityCompare` and `proxyIdentityAndFacetCompare`\n  methods are now using `string.CompareOrdinal` to compare the identity\n  category, name and the facet instead of string.Compare with the\n  `CultureInfo.InvariantCulture` culture-specific information.\n\n- `Ice.LocalException` and `Ice.UserException` now implement\n  `System.ICloneable`.\n\n- Ice for C# has been renamed Ice for .NET and the assemblies have\n  been renamed as well. For example `icecs.dll` is now just `Ice.dll`.\n\n## Python Changes\n\n- Fixed a bug that occurred when converting an `Ice.Identity` object to\n  a string via `str()`. In prior releases, this conversion used the\n  global method Ice.identityToString, but that method is no longer\n  supported. As a result, the output now resembles that of other\n  user-defined types.\n\n- Added the methods `Ice.stringVersion` and `Ice.intVersion`.\n\n- Unicode objects are now accepted as arguments (or data members of\n  arguments) to remote Slice operations. The local Ice API still uses\n  8-bit strings.\n\n- Added new `Ice/converter` demo to illustrate how to use the new Ice\n  for C++ string converter plug-in. This demo is very similar to the\n  C++ demo.\n\n- Fixed a deadlock bug that could occur when a multithreaded client\n  executes Slice operations that return abstract objects by value.\n\n- Removed `#!/usr/bin/env python` where unnecessary.\n\n- Added `ice_staticId()` method to generated Slice classes.\n\n- The following APIs were deprecated in Ice 3.1 and have been removed:\n\n  - `initializeWithLogger`\n  - `initializeWithProperties`\n  - `initializeWithPropertiesAndLogger`\n  - `identityToString`\n  - `stringToIdentity`\n  - `ObjectPrx.ice_communicator`\n  - `ObjectPrx.ice_newIdentity`\n  - `ObjectPrx.ice_newContext`\n  - `ObjectPrx.ice_newFacet`\n  - `ObjectPrx.ice_newAdapterId`\n  - `ObjectPrx.ice_newEndpoints`\n  - `ObjectPrx.ice_connection`\n\n- Fixed a bug where returning an AMD servant from a `ServantLocator`\n  would cause a deadlock in the IcePy extension.\n\n- Added support for blobjects.\n\n- Fixed a code generation bug with `slice2py` where the proxy type\n  for a Python reserved word would be incorrectly named. For example,\n  interface def would generate a proxy class named `_defPrx`, not the\n  correct class name `defPrx`.\n\n- `LocalObject` is now mapped to the Python base `object` type. The\n  class `Ice.LocalObject` is now deprecated.\n\n- Fixed a bug in `Ice.initialize` that would cause a crash if the\n  configuration file specified by `--Ice.Config` was not found.\n\n## Ruby Changes\n\n- Added the methods `Ice::stringVersion` and `Ice::intVersion`.\n\n- Removed `#!/usr/bin/env ruby` where unnecessary.\n\n- Added `ice_staticId()` method to generated Slice classes.\n\n- Fixed a code generation bug with `slice2rb` where the reserved words\n  `BEGIN` and `END` would generate classes, modules and constants named\n  `_BEGIN`, and `_END` which is illegal. They now generate `BEGIN_` and\n  `END_`.\n\n- Fixed a bug where marshaling a plain object proxy fails with an\n  uninitialized constant exception.\n\n## PHP Changes\n\n- Constructors are now generated for Slice structure, exception, and\n  class types. Constructor parameters supply default values for each\n  data member.\n\n- A null value is now allowed where a sequence or dictionary value is\n  expected.\n\n- Added the methods `Ice_stringVersion` and `Ice_intVersion`.\n\n- Removed the undocumented PHP constants `ICE_STRING_VERSION` and\n  `ICE_INT_VERSION`.\n\n- LocalObject is now mapped to PHP's base `object` type. The interface\n  `Ice.LocalObject` and the abstract class `Ice.LocalObjectImpl` are now\n  deprecated.\n\n- Added support for an optional context argument to `ice_checkedCast`\n  and `ice_uncheckedCast`.\n\n- Added the following proxy methods:\n\n  - `ice_getRouter/ice_router`\n  - `ice_getLocator/ice_locator`\n\n- Added the translator option `-w` to suppress warnings during Slice\n  translation.\n"
        },
        {
          "name": "CHANGELOG-3.4.md",
          "type": "blob",
          "size": 36.587890625,
          "content": "The entries below contain brief descriptions of the changes in a release, in no\nparticular order. Some of the entries reflect significant new additions, while\nothers represent minor corrections. Although this list is not a comprehensive\nreport of every change we made in a release, it does provide details on the\nchanges we feel Ice users might need to be aware of.\n\nWe recommend that you use the release notes as a guide for migrating your\napplications to this release, and the manual for complete details on a\nparticular aspect of Ice.\n\n- [Changes in Ice 3.4.2](#changes-in-ice-342)\n  - [General Changes](#general-changes)\n  - [C++ Changes](#c-changes)\n  - [Java Changes](#java-changes)\n  - [C# Changes](#c#-changes)\n  - [Python Changes](#python-changes)\n  - [Ruby Changes](#ruby-changes)\n  - [PHP Changes](#php-changes)\n  - [Visual Studio Add-in Changes](#visual-studio-add-in-changes)\n- [Changes in 3.4.1](#changes-in-341)\n  - [General Changes](#general-changes-1)\n  - [C++ Changes](#c-changes-1)\n  - [Java Changes](#java-changes-1)\n  - [C# Changes](#c#-changes-1)\n  - [Python Changes](#python-changes-1)\n- [Changes for 3.4.0](#changes-for-340)\n  - [General Changes](#general-changes-2)\n  - [C++ Changes](#c-changes-2)\n  - [Java Changes](#java-changes-2)\n  - [C# Changes](#c#-changes-2)\n  - [Python Changes](#python-changes-2)\n  - [Ruby Changes](#ruby-changes-1)\n  - [PHP Changes](#php-changes-1)\n  - [Visual Studio Plugin Changes](#visual-studio-plugin-changes)\n\n# Changes in Ice 3.4.2\n\nThese are changes since Ice 3.4.1.\n\n## General Changes\n\n- The operation mode sent over the wire for the Object operations\n  `ice_ping`, `ice_isA`, `ice_ids`, and `ice_id` should be Nonmutating, but\n  the language mappings were inconsistent in this respect. All\n  language mappings now send the correct mode.\n\n- Fixed a bug where under certain circumstances, Ice would\n  indefinitely re-try to add a proxy to the Glacier2 routing table.\n\n- Improved queuing of Glacier2 requests to the client to not invoke\n  requests if the client connection already has requests pending for\n  send. Instead, Glacier2 waits for the pending requests to be\n  sent. This allow request overriding to occur more often when the\n  client connection is slow.\n\n- Fixed bug where an IceGrid node or registry could hang for a long\n  time on startup if some IceGrid registry replicas weren't reachable.\n\n- Added `throwLocalException` method to the `Ice::AsyncResult` class. If\n  the request fails with a local exception, this method throws the\n  local exception.\n\n- Fixed a bug that caused a crash if a timeout occurs while sending\n  an AMI request and if automatic retry is enabled (the default).\n\n- It is now possible to use a constant as the default value for a data\n  member. For example:\n\n  ```\n  const int MIN = 1;\n\n  struct Info\n  {\n      int size = MIN;\n  };\n  ```\n\n  It is also possible for a constant to refer to another constant:\n\n  ```\n  const int MAXIMUM_SIZE = 100;\n  const int DEFAULT_SIZE = MAXIMUM_SIZE;\n  ```\n\n## C++ Changes\n\n- Fixed a bug in the Linux epoll selector implementation that could\n  cause hangs when using the thread pool serialization mode.\n\n- Fixed a memory leak in IceSSL on Windows.\n\n- Fixed a bug in the generated code for a Slice structure containing\n  at least one data member that declares a default value. The\n  constructors were not being exported correctly in this case.\n\n- Fixed a bug where the `IceUtil::Timer` thread could die in case very\n  large delays were specified.\n\n- Removed extra `include/IceGrid/Perf.h` file.\n\n## Java Changes\n\n- Added support for Android.\n\n- Added overloaded constructors for user and system exceptions that\n  accept a `Throwable` argument.\n\n- Added an `ice_staticId` method to generated `PrxHelper` classes.\n\n- Fixed a bug in `slice2java` in which a floating point default value\n  could cause a compile error.\n\n- Fixed a bug where `Ice.ServerIdleTime` wouldn't consistently shutdown\n  servers after the given period of inactivity.\n\n## C# Changes\n\n- Added support for the .NET Compact Framework.\n\n- Added `demo/Ice/compact`, which is a simple graphical client that uses\n  Ice for .NET Compact Framework.\n\n- Fixed bugs in the generated code that caused naming conflicts when\n  using a Slice module named `System`.\n\n- Added an `ice_staticId` method to generated `PrxHelper` classes.\n\n- Fixed a bug in the generated code when a Slice class uses the\n  property mapping and declares default values for its members.\n\n## Python Changes\n\n- Fixed bug where `None` was not recognized as a keyword.\n\n## Ruby Changes\n\n- Fixed a bug in the Ice extension that would cause an `ArgumentError`\n  to be raised when attempting to print a byte sequence whose value is\n  a string that contains null bytes.\n\n## PHP Changes\n\n- Fixed a bug that caused `undefined symbol IcePHP__t_XXX` errors when\n  `Ice.php` or a generated file is included from a non-global scope.\n\n- `slice2php` now generates `require_once` statements corresponding to\n  Slice `#include` directives, replacing the `require` statements used\n  in previous releases.\n\n- Fixed a bug in the Ice extension that caused Ice-related INI\n  settings to be ignored.\n\n## Visual Studio Add-in Changes\n\n- Fixed a bug that prevented the Add-in from automatically compiling\n  Slice files when using a non-English version of Visual Studio.\n\n- Improved the layout and wording of the Ice Configuration dialogs.\n\n- Added `$(IceHome)` macro to VS 2008 project configurations.\n\n- Changed C++ project configurations to use `$(IceHome)` macro in\n  configuration settings.\n\n- Removed Ice Home field from `Ice Configuration` dialog. Projects\n  now always use the Ice installation corresponding to the location\n  of the add-in DLL.\n\n- Fixed issues that prevented the use of solution folders in Ice\n  projects.\n\n- Fixed an issue that caused the add-in to not work when using\n  Visual Studio 2010 and `Solution Navigator`.\n\n- Added a check to prevent incorrect Runtime library usage in C++\n  projects.\n\n- Added support for .NET Smart Device project types used by the .NET\n  Compact Framework.\n\n- Improved add-in output messages.\n\n- Fixed an issue that produced a deadlock in Visual Studio when\n  Slice compiler output was large enough to fill the output buffer.\n\n- Fixed support for parallel builds. The Slice compiler was run\n  several times, once for each parallel build. Now the Slice\n  compiler is run only once, before all parallel builds begin.\n\n- Fixed an issue that could cause errors with Visual Studio if a\n  Slice file was saved while the project was building.\n\n- Fixed the add-in to work properly when `--header-ext` and\n  `--source-ext` are present in Extra Compiler Options.\n\n- Fixed the add-in to support building Freeze demos without the need\n  to set environment variables.\n\n- Fixed the add-in to always open generated files as read only;\n  previously the generated files were not opened read only until the\n  first project build.\n\n- Added support for setting the output directory for generated files,\n  making the add-in more VCS friendly.\n\n- Added support for .NET `DEVPATH`.\n\n- Added support for canceling changes in configuration dialogs. All\n  the configuration dialogs now have `OK`, `Cancel`, and `Apply` buttons with\n  the standard semantics.\n\n- Added warnings to prevent incorrect options from being entered in\n  Extra Compiler Options.\n\n- Added a timestamp to Slice build output, which is only printed when\n  the trace level is Debug.\n\n- The add-in now supports command-line builds.\n\n- The add-in now avoids making extraneous changes to projects that\n  could result in merge issues when projects are in a shared\n  development.\n\n- The add-in no longer overrides the debug environment setting for\n  `PATH`, but rather appends appropriately.\n\n- On the loss of focus when adding an include directory in the Slice\n  Include Path, the addition is now saved rather than lost.\n\n- Fixed an issue where moving a Slice-generated file to a filter so\n  that it would be ignored by source control did not always work\n  because the generated files could be moved back into the regular\n  Source Files list by a build.\n\n- Improved the tracing output generated by the add-in and changed\n  the tracing options.\n\n# Changes in 3.4.1\n\nThese are changes since Ice 3.4.0.\n\n## General Changes\n\n- Added the new property `Freeze.DbEnv.<db>.LockFile` and changed the\n  `dumpdb` and `transformdb` utilities so that they can be run safely on\n  a database environment that is currently open in another process.\n\n- Changed the Glacier2 helper classes to cache the client category.\n\n- Added the ability to use underscores in Slice identifiers. See the\n  release notes for important information on this change.\n\n- Added the `setConnectContext` method to `Glacier2.SessionFactoryHelper`,\n  which allows an application to provide a request context to be used\n  when creating a Glacier2 session. (Java and C#)\n\n- Fixed IceGrid bug where node observers would not be notified when a\n  server is re-enabled after it has been updated and if the server was\n  disabled following an activation failure.\n\n- Fixed a bug in the `Glacier2.SessionFactoryHelper` class (Java/C#) in\n  which the `getPort()` method would return an incorrect default port if\n  no port was configured.\n\n## C++ Changes\n\n- Fixed a bug in `slice2cpp` in which streaming code was not generated\n  properly for types in nested modules.\n\n- `slice2cpp` now generates a \"one-shot\" constructor for a Slice\n  structure if at least one of its members has a default value.\n\n- Fixed a bug in `slice2cpp` so that asynchronous `end_op` methods are\n  now exported properly.\n\n- Fixed a bug in `slice2cpp` that would generate invalid code for a\n  Slice exception when the `--stream` option was not used.\n\n- Fixed compatibility issues with OpenSSL 1.0.\n\n- Fixed a bug in `slice2cpp` that would cause invalid code to be\n  generated for a nested Slice definition when the `--stream` option was\n  used.\n\n- Fixed a bug in Freeze that disabled automatic log deletion.\n\n## Java Changes\n\n- Fixed an issue in which intensive use of Freeze or the stream API\n  could cause an `OutOfMemoryError`. Note that Freeze maps must be\n  regenerated with `slice2freezej` to incorporate this fix.\n\n- Fixed a bug in the Slice2Java ant task in which duplicate Slice\n  files could be passed to `slice2java`. Also fixed a bug in `slice2java`\n  that caused the translator to fail if a duplicate file was passed\n  on the command line.\n\n- Fixed race condition which could cause the thread pool selector\n  thread to go away (causing the thread pool to not dispatch further\n  incoming messages).\n\n- Deprecated `Ice.AsyncCallback`. To use the generic asynchronous\n  callback facility, applications should derive their classes from\n  `Ice.Callback`.\n\n- The `size` method on a `Freeze.Map` and on the value of an indexed\n  submap now use the current transaction associated with the\n  connection, if any.\n\n## C# Changes\n\n- Fixed a bug in the generated code that prevented sequences from\n  being marshaled using the stream API if the sequences used generic\n  collection types.\n\n- Fixed a bug in the IceSSL plug-in that could incorrectly report a\n  certificate verification failure when the `IceSSL.CheckCertName`\n  property is enabled.\n\n## Python Changes\n\n- Fixed a bug in which destroyed Communicator instances were not being\n  garbage collected.\n\n- Fixed a bug in `Ice.Application` in which the exit status was not\n  properly returned from `main()`.\n\n# Changes in 3.4.0\n\nThese are changes since Ice 3.3.1.\n\n## General Changes\n\n- Added ability to define default values for Slice data members. For\n  example, you can write:\n\n  ```\n  class C\n  {\n      int i = 2;\n      string name = \"John\";\n  };\n  ```\n\n- Fixed IceGrid bug where the IceGrid node would disconnect from the\n  registry if the clock was moved backward.\n\n- Fixed hang in `slice2cs` and `slice2py` that would occur if a comment\n  contained a `<` with no closing `>`.\n\n- Fixed a bug in the Java and C# stream classes where `readString()` and\n  `readBlob()` were not checking the size before allocating memory.\n\n- Fixed source files to have consistent end of line terminators.\n\n- Fixed the `Ice.initialize()`, `Ice.initialize(Ice.InitializationData)`\n  and `Ice.createProperties()` overloads in Python, Ruby and PHP to\n  match the C++, .NET and Java behavior. These overloads no longer\n  read the `ICE_CONFIG` environment variable.\n\n- Fixed IceGrid bug where updating an application could cause a\n  temporary hang if a server deactivation hanged during the update.\n\n- Added a new asynchronous method invocation (AMI) facility for C++,\n  C#, Java, and Python. The previous API is now deprecated.\n\n- Added the ability to invoke `flushBatchRequests` asynchronously on a\n  communicator or connection.\n\n- The Ice extension for Visual Studio is now included in the Ice\n  distribution. The source code for the extension can be found in the\n  `vsplugin` subdirectory of the source distribution. Note that the\n  extension no longer supports Visual Studio 2005.\n\n- Added a `cloneWithPrefix` operation to the `Logger` interface.\n\n- Added a `removeServantLocator` operation to the `ObjectAdapter`\n  interface.\n\n- The translators now include a comment at the beginning of each\n  generated file to indicate that the file is machine-generated.\n  This is particularly useful for tools such as StyleCop.\n\n- The IceGrid graphical administration tool now allows you to filter\n  the live deployment for a particular application.\n\n- Added the ability to query an IceGrid node to determine the number\n  of CPU sockets on its host machine. Currently this only works for\n  Windows Vista (or later) and native (non-VM) Linux. You can also\n  manually configure the number of CPU sockets.\n\n- Freeze now uses file locks to prevent multiple processes from\n  opening the same database environment.\n\n- Added new utility classes to simplify the use of Glacier2. The\n  `Glacier2::Application` class extends `Ice::Application` to add support\n  for keeping a Glacier2 session alive and automatically restarting it\n  when necessary. For Java and C#, helper classes are also provided\n  for use in graphical programs. See the Ice manual for more\n  information.\n\n- Added new `InputStream::readAndCheckSeqSize` method to read and check\n  the size of a sequence. The check ensures the sequence size is\n  consistent with the stream buffer size. This is useful to prevent\n  over-allocating memory for the sequence if the input stream data\n  cannot be trusted.\n\n- When using the system logger (enabled when `Ice.UseSyslog` is set), it\n  is now possible to set the facility via the `Ice.SyslogFacility`\n  property. The default value is `LOG_USER`.\n\n- It is now legal to pass an empty name to `createObjectAdapterWithRouter`\n  and `createObjectAdapterWithEndpoints`. If so, a UUID will be used for\n  the object adapter's name.\n\n- Added support for dispatching servant invocations and AMI callbacks\n  in application-specific threads (e.g., in a GUI-safe thread). The\n  application needs to implement the `Ice::Dispatcher` interface and\n  initialize the communicator appropriately to use this dispatcher\n  implementation. See the Ice manual for more information.\n\n- `icegridadmin` now clears the user-supplied password after use.\n\n- `icegridadmin` now correctly handles EOF when reading username and\n  password.\n\n- The `Connection::createProxy` method will now create a secure\n  proxy if the connection is secure and a datagram proxy if the\n  connection is a datagram connection.\n\n- Added `Communicator::proxyToProperty` which converts a proxy to a\n  property set.\n\n- Calling `Glacier2::Router::destroySession()` no longer raises an\n  `Ice::ConnectionLostException` exception. Glacier2 no longer\n  forcefully closes the connection of a destroyed session but instead\n  allows active connection management (ACM) for client connections to\n  close it (see below).\n\n- Glacier2 has been changed to support the use of active connection\n  management. Active connection management is enabled by default for\n  Glacier2 client connections if `Glacier2.SessionTimeout` is set.\n  The ACM timeout is set to twice the value of the session timeout. If\n  the session timeout is disabled, ACM is also disabled for client\n  connections.\n\n- Added support for a per-object adapter ACM timeout configured via\n  the `<adapter>.ACM property`. If not set, the property defaults to\n  value of `Ice.ACM.Server` set for the adapter's communicator.\n\n- Improved the Ice run time's invocation retry facility to always\n  retry at least once on `Ice::CloseConnectionException` failures even\n  if the retry limit has been reached. If retries are disabled, this\n  ensures that an invocation is retried if it fails with an\n  `Ice::CloseConnectionException`.\n\n- Added `Glacier2.AddConnectionContext` property to enable forwarding\n  connection information into the context of routed invocations. See\n  the manual for more information. `Glacier2.AddSSLContext` has been\n  deprecated, this new property should be used instead.\n\n- Added `Ice.Override.CloseTimeout` property. This property overrides\n  timeout settings used to close connections.\n\n- Ice connections are now forcefully closed after sending a close\n  connection message and once the connection timeout\n  expires. Previously, the connection would only be closed when the\n  object adapter or communicator was destroyed.\n\n- The new `Ice::ThreadHookPlugin` class allows you to install thread\n  notification hooks during communicator initialization via plug-ins.\n\n- Added `Glacier2::Router::refreshSession`, which keeps the client's\n  Glacier2 session alive. This is useful in the case that the\n  application architecture does not use a Glacier2 session\n  manager. Modified `demo/Glacier2/callback` to demonstrate the use of\n  this method.\n\n- Fixed bug in `icegridadmin` where invalid XML could cause a crash.\n\n- Fixed a bug where calling the object adapter `waitForHold()` method\n  would cause other calls on the object adapter to hang until the\n  `waitForHold()` method returned.\n\n- Improved connection establishment scalability. Creating or accepting\n  a new connection should now be done in constant time regardless of\n  the number of connections already established or accepted.\n\n- Fixed Glacier2 router bug which would cause the `getCategoryForClient`\n  method to throw `Ice::NullHandleException` if the server endpoints\n  were not set; instead it now returns an empty string.\n\n- `Ice.NegativeSizeException` has been removed. The run time now throws\n  `MarshalException` or `UnmarshalOutOfBoundsException` instead.\n\n- The Ice thread pool now supports receiving and sending data over Ice\n  connections using multiple threads. Allowing multiple connections to\n  concurrently send and receive data improves CPU usage on machines\n  with multiple cores. The maximum number of threads allowed to\n  concurrently send/receive data is capped by the number of available\n  cores.\n\n- The Ice run time now uses Windows completion ports and overlapped IO\n  to accept, connect, and receive and send data over connections. This\n  improves scalability of server applications handling many\n  connections on Windows.\n\n- Ice connections now support read timeouts. A connection will now\n  eventually timeout once the connection timeout is reached if no more\n  data is available for reading after the message header was received.\n  ACM no longer closes a connection for which a message is being\n  received.\n\n- The `IceSSL.TrustOnly` properties support a new syntax that allows you\n  to reject a peer whose distinguished name matches certain criteria.\n\n- IceSSL now compares the host name or IP address in a proxy endpoint\n  (if any) against the common name of the server's certificate when\n  the property `IceSSL.CheckCertName` is enabled. This is in addition to\n  the existing behavior that compared the host name or IP address\n  against the DNS names and IP addresses in the server certificate's\n  subject alternative name extension.\n\n- `slice2docbook` is no longer supported and has been removed from\n  the distribution.\n\n- `slice2html` comments now use a syntax that matches the javadoc\n  syntax. Instead of\n\n      module::interface::operation\n\n  `slice2html` now expects\n\n      module.interface#operation\n\n  Similarly, the link syntax now follows the javadoc syntax. Instead\n  of\n\n      [module::interface::operation]\n\n  `slice2html` now expects\n\n      {@link module.interface#operation}\n\n  The old syntax is still supported; `slice2html` prints a warning for\n  each source file in which it encounters the old syntax.\n\n- A batch invocation now only throws if the connection associated\n  with the proxy failed and there were batch requests queued at the\n  time of the failure. If there were no batch requests queued, the\n  batch invocation does not throw but instead tries to obtain a new\n  connection.\n\n- Added the ability to read properties from the Windows registry. This\n  is done by setting the Ice.Config property to a value such as the\n  following:\n\n    ```\n    HKLM\\Software\\MyCompany\\IceProperties\n    ```\n\n  This will read all the string values from the specified key in\n  `HKEY_LOCAL_MACHINE` and set them as Ice properties.\n\n- `iceserviceinstall`, the Windows service installation utility, now\n  supports reading its configuration settings from HKLM in the Windows\n  registry.\n\n- Added ability to get information from endpoints such as host and\n  port without having to parse the stringified endpoint.\n\n- Added ability to get addressing information from a connection.\n\n- The `IceSSL::ConnectionInfo` type is now generated from a local Slice\n  definition. You can downcast this type to `NativeConnectionInfo` if\n  you require access to native certificates.\n\n- Slice files are now allowed to be in UTF-8 format and include UTF-8\n  BOM at start of file and include UTF-8 characters in comments.\n\n- Fixed bug in Slice compilers that would cause a crash if a Slice\n  file had double slashes in its path.\n\n- The following properties were deprecated in Ice 3.2 and have been\n  removed:\n\n  `Glacier2.AddUserToAllowCategories`\n\n  `Glacier2.AllowCategories`\n\n  `Ice.UseEventLog`\n\n- The following APIs were deprecated in Ice 3.2 and have been removed:\n\n  `Communicator::setDefaultContext`\n\n  `Communicator::getDefaultContext`\n\n  `ObjectPrx:ice_defaultContext`\n\n- Support for the deprecated Slice keyword `nonmutating` has been\n  removed. As a result the following property has also been removed:\n\n  `Freeze.UseNonmutating`\n\n- HP-UX is no longer a supported platform for Ice.\n\n- Added extra network tracing to show the list of local interfaces\n  currently available when an endpoint is using a wildcard host, as\n  well as the published endpoints for an object adapter. Both of these\n  traces will be shown when `Ice.Trace.Network` >= 1.\n\n- Added new property, `Ice.Trace.ThreadPool`, that when set >= 1 enables\n  tracing of thread pool creation as dynamic thread pools grow and\n  shrink.\n\n- Changed the format of the default logger output. Traces are now\n  prepended by '--', warnings by '-!' and errors by '!!'.\n\n- The value of the thread pool `SizeWarn` property is now 0 by default\n  rather than 80% of Size. This means that by default warnings about\n  thread pool growth will now be disabled.\n\n- Added example `demo/Ice/plugin` to show how to write a simple Ice\n  plug-in as well as a Logger plug-in.\n\n- Added `getPlugins` method to `PluginManager` which returns a list of the\n  names of all installed plug-ins.\n\n- The reason member of `MemoryLimitException` now contains the size of\n  the request that caused the exception as well as the value of the\n  maximum message size.\n\n- The `Ice::Application` helper classes now use the process logger to\n  emit errors rather than just writing directly to stderr.\n\n- A Slice class that implements an interface but does not define or\n  inherit any operations is now mapped to a concrete class. This\n  change affects the Java, C#, Python, and Ruby language mappings.\n\n- It is now possible to use an UNC path as an include directive for\n  the Slice compilers.\n\n- Fixed a bug in `slice2html` that caused incorrect hyperlinks to be\n  generated for the summary of the index sections of a module page.\n\n- Added a new property, `Ice.LogFile`, which causes the default Ice\n  logger to write to a file rather than stderr. The file name is the\n  property's value.\n\n- Added the following operations to the `ObjectAdapter` API:\n\n  `addDefaultServant`\n\n  `removeDefaultServant`\n\n  `findDefaultServant`\n\n  These methods provide a simpler way of using default servants in\n  Ice. Please refer to the manual for more information.\n\n- Using the `--depend` option with Slice compilers that support it no\n  longer outputs dependency info even if the Slice file itself\n  contains errors.\n\n## C++ Changes\n\n- Renamed the `createIceStringConverter` function back to\n  `createStringConverter` for compatibility with previous releases.\n\n- Added a new demo named `interleaved` that shows how to use\n  asynchronous invocation and dispatch to achieve maximum throughput\n  with Ice.\n\n- Fixed a bug that prevented an application from using Unicode path\n  names for Freeze databases on Windows.\n\n- Enhanced the portable streaming API to provide better support for\n  template programming.\n\n- The C++ class generated for a derived Slice class no longer uses\n  virtual inheritance by default. The metadata `cpp:virtual` can be\n  defined for a Slice class to force the translator to use virtual\n  inheritance when necessary.\n\n- The following functions have new overloaded versions on Windows that\n  accept a Unicode argument vector:\n\n  `Ice::Application::main`\n\n  `Ice::Service::main`\n\n  `Ice::argsToStringSeq`\n\n- Added support for specifying the priority of threads in a thread\n  pool. See the Ice manual for more information.\n\n- Added new demo `book/map_filesystem`.\n\n- `IceUtil:: Shared` now uses the native atomic functions provided by gcc\n  4.1 and later on supported platforms. For details see\n  http://gcc.gnu.org/onlinedocs/gcc-4.1.0/gcc/Atomic-Builtins.html\n\n- Fixed a bug in `slice2cpp` that could cause incorrect includes to be\n  generated if a Slice file was included that was a symbolic link.\n\n- On Windows it is now possible to build the Ice DLLs with unique names\n  for each supported compiler. See `UNIQUE_DLL_NAMES` setting in\n  `cpp/config/Make.rules.mak`.\n\n- The Ice DLLs no longer all use the default base load address.\n\n- Changed the signature of the `Ice::Service` start method.\n\n- Added new static methods to initialize an `IceUtil::Time` class from\n  a double:\n\n  `IceUtil::Time::secondsDouble(double)`\n\n  `IceUtil::Time::milliSecondsDouble(double)`\n\n  `IceUtil::Time::microSecondsDouble(double)`\n\n- Added the ability to use alternative database storage for IceStorm\n  and IceGrid other than Freeze. The following SQL databases are\n  supported: SQLite and PostgreSQL. Please see the manual for more\n  information.\n\n- Fixed a bug where globally-scoped garbage collected class pointers\n  could cause a crash on application termination.\n\n- Fixed a bug where an SSL connection was rejected because of a\n  certificate validation failure even if `IceSSL.VerifyPeer=0`.\n\n- Added `ice_stackTrace()` method to `Exception` classes, which returns\n  the exception stack trace on platforms/compilers that support it.\n  Currently this is only supported with the GCC compiler.\n\n- Added new property, `Ice.PrintStackTraces`, which controls whether the\n  Ice logger utility classes (`Ice::Trace`, `Ice::Warning`, etc) print the\n  stack trace for Ice exceptions. By default it is enabled for debug\n  builds and disabled for release builds.\n\n- Removed `AMD_Array_Object_ice_invoke` class and instead added an\n  ice_response method to `AMD_Object_ice_invoke` that uses the array\n  type.\n\n- The system logger (enabled when `Ice.UseSyslog` is set) now uses the\n  value of `Ice.ProgramName` as the log identifier prefix.\n\n- Fixed crash if `Application::main()` or Service::main() were called\n  with `argc == 0`.\n\n## Java Changes\n\n- The Freeze map API now uses Java5 generic type conventions.\n\n- Ice now tests for the presence of the Bzip2 classes only if an\n  application attempts to use compression.\n\n- Added new demo `book/map_filesystem`.\n\n- Changed IceSSL to use the keystore as the truststore if no\n  truststore is explicitly defined.\n\n- Added new `ice_dispatch` method to `Object` that does not take a\n  `DispatchInterceptorAsyncCallback` parameter to be used for\n  synchronous dispatch only.\n\n- Added support for using direct buffers in the transport layer to\n  minimize copying. The semantics of the `Ice.CacheMessageBuffers`\n  property have been extended as follows:\n\n  0 = no buffer caching\n  1 = buffer caching using non-direct buffers\n  2 = buffer caching using direct buffers\n\n  If this property is not defined, the new default value is 2.\n\n- The Ice run time now re-throws exceptions using fillInStackTrace to\n  ensure the exception stack trace includes the calling point.\n\n- Added the `classLoader` member to `Ice.InitializationData`, which\n  allows you to supply a custom class loader that Ice uses to load\n  plug-ins, user exceptions, concrete Slice classes, etc.\n\n- Fixed a bug in the implementation of `ice_invoke_async`.\n\n- The Freeze classes are now stored in a separate JAR file named\n  `Freeze.jar`.\n\n- The translator no longer generates one-shot constructors for class,\n  struct and exception types if doing so would exceed Java's limit of\n  255 parameters for a method.\n\n- Fixed a bug where an outgoing SSL connection was allowed even though\n  certificate validation failed.\n\n- A holder class generated for a Slice class or interface now extends\n  the generic base class `Ice.ObjectHolderBase` and implements the\n  streaming interface `Ice.ReadObjectCallback`.\n\n- `slice2java` no longer generates a `<name>OperationsNC` interface for\n  local interfaces and classes. This makes the code easier to browse\n  with IDEs.\n\n- `slice2java` now preserves javadoc comments that appear in the Slice\n  source and writes them through to the corresponding APIs in the\n  generated code.\n\n- `Ice.jar` and `Freeze.jar` now include source files. This allows IDEs\n  such as Eclipse to browse the Ice source code and to display javadoc\n  comments.\n\n- Fixed a bug that caused `UnmarshalOutOfBoundsException` during an\n  attempt to unmarshal an exception or class if `Ice.jar` is installed\n  in the JVM's extension directory.\n\n- The following APIs are deprecated and will be removed in a future\n  release.\n\n  `Ice.Object.ice_hash()`\n\n  `Ice.ObjectPrx.ice_getHash()`\n\n  `Ice.ObjectPrx.ice_toString()`\n\n- The `StackSize` thread pool configuration property is now used.\n\n- The generated classes for Slice structs are no longer declared final.\n\n- `Ice.Util.generateUUID` has been deprecated. Use\n  `java.util.UUID.randomUUID().toString()` instead.\n\n- Ice now supports the ability to load a configuration file as a class\n  path resource. For a path name specified in the `ICE_CONFIG`\n  environment variable, in the `--Ice.Config` command-line option, or\n  passed to `Properties::load()`, Ice first attempts to open the file as\n  a class path resource and, if that fails, tries to open it as a file\n  in the local file system. See the manual for more information.\n\n- Removed the Java2 mapping. The release notes contain instructions\n  for migrating an application to the Java5 mapping.\n\n- Changed the Slice compiler to emit `@SuppressWarning` annotations only\n  when necessary.\n\n- Fixed a discrepancy between the documented behavior of the property\n  `IceSSL.CheckCertName` and its actual behavior. The documented\n  behavior states that IceSSL compares the host name as it appears in\n  the proxy's endpoint against the server certificate's alternative\n  subject names. The actual behavior in Ice 3.3 differed slightly in\n  that the host name may have undergone a translation that could\n  result in IceSSL using a different host name than that of the proxy.\n  For example, the proxy may have contained \"127.0.0.1\" but IceSSL\n  used \"localhost\". This could cause the SSL connection attempt to\n  fail if `IceSSL.CheckCertName` is enabled. IceSSL now uses the host\n  name from the proxy for this validation step.\n\n## C# Changes\n\n- The Ice DLLs no longer all use the default base load address.\n\n- Both Ice Plugin and IceBox Service configuration now allow you to\n  enter a full path as the assembly DLL name.\n\n- Added new `ice_dispatch` method to Object that does not take a\n  `DispatchInterceptorAsyncCallback` parameter to be used for\n  synchronous dispatch only.\n\n- IceSSL's behavior with respect to the `IceSSL.CheckCertName` property\n  is now consistent with that of C++ and Java. Specifically, IceSSL\n  compares the host name or IP address in a proxy endpoint (if any)\n  against the common name and subject alternative names of the\n  server's certificate. In prior releases, IceSSL relied on .NET to\n  perform the validation of the common name but no comparison was made\n  with the subject alternative names.\n\n- Fixed bug where random endpoint selection would only work for\n  proxies with more than two endpoints.\n\n- Fixed thread safety issue in random endpoint selection.\n\n- `slice2cs` no longer generates a `<name>OperationsNC` interface for\n  local interfaces and classes. This makes the code easier to browse\n  with IDEs.\n\n- `slice2cs` now converts javadoc comments in Slice files into Visual C#\n  XML documentation comments. This allows you to generate\n  an `<assembly>.xml` file from the documentation comments by passing\n  the `/doc` option to Visual C#. The comments in the <assembly>.xml\n  file are shown as Visual C# tooltips if the `<assembly>.xml` file is\n  installed in the same directory as the `<assembly>.dll` file.\n\n  The build for Ice now generates the `<assembly>.xml` file for each\n  assembly and installs it, so Visual C# displays tooltips for Ice\n  APIs.\n\n- The generated types for Slice classes, interfaces, structs and\n  exceptions are now declared as partial.\n\n- The following APIs are deprecated and will be removed in a future\n  release.\n\n  `Ice.Object.ice_hash()`\n\n  `Ice.ObjectPrx.ice_getHash()`\n\n  `Ice.ObjectPrx.ice_toString()`\n\n- The `StackSize` thread pool configuration property is now used.\n\n- The default Ice logger now uses `System.Diagnostics.Trace` to\n  output messages. Please see manual and Trace documentation for\n  more information.\n\n- `Ice.Util.generateUUID` has been deprecated. Use\n  `System.Guid.NewGuid.ToString()` instead.\n\n## Python Changes\n\n- Fixed a code generation bug that could lead to undefined Slice\n  types, depending on the order in which the generated code was\n  imported.\n\n- Changed the Python mapping for long integer constants so that 64-bit\n  values are no longer generated as strings.\n\n- The extension now restores the pre-existing dlopen flags.\n\n- The `__cmp__` method generated for slice structures and enumerations\n  has been replaced by the rich operators `__lt__`, `__le__`, `__eq__`,\n  `__ne__`, `__gt__`, `__ge__`.\n\n- Slice comments are now converted into Python docstrings in the\n  generated code.\n\n- Added the administrative facet API.\n\n- Integer values are now accepted where floating point values are\n  expected.\n\n- Objects that support the number protocol are now accepted as legal\n  values for Slice integer and floating-point types.\n\n- 64-bit integers are now supported in buffer types.\n\n## Ruby Changes\n\n- Fixed a compilation error when using Ruby 1.8.7 (patch level >=\n  248).\n\n- The following API as been deprecated and will be removed in a\n  future release.\n\n  `Ice::ObjectPrx::ice_getHash()`\n\n## PHP Changes\n\n- Enumerations are now supported as dictionary key types.\n\n- Integer values are now accepted where floating point values are\n  expected.\n\n- Added `slice2php` and removed dynamic Slice translation.\n\n- Added support for PHP namespaces (requires PHP 5.3 or later).\n\n- Added ability to create and destroy communicators. Use the function\n  `Ice_initialize` (`\\Ice\\initialize`) to create a communicator. By\n  default, all communicators created during a page request are\n  destroyed automatically at the end of the request.\n\n- Added ability to register a communicator for use in a subsequent\n  page request. Three new functions are provided:\n\n  - `Ice_register`   (`\\Ice\\register`)\n\n  - `Ice_unregister` (`\\Ice\\unregister`)\n\n  - `Ice_find`       (`\\Ice\\find`)\n\n- Added a demo (in `Glacier2/hello`) that shows how to register and\n  use the same communicator instance for multiple page requests in a\n  PHP session.\n\n- Added support for all Slice local exceptions.\n\n- The INI settings are now used to configure property sets that a\n  script can use to initialize a communicator. The `ice.slice` directive\n  is no longer supported.\n\n- Added the function `Ice_createProperties()`.\n\n- Now generating minimal proxy classes to simplify downcasting.\n\n- Removed the `$ICE` global variable.\n\n- Removed the following methods:\n\n  `$ICE->setProperty()`\n\n  `$ICE->getProperty()`\n\n- Removed the following functions:\n\n  `Ice_stringToIdentity()`\n\n  `Ice_identityToString()`\n\n  `Ice_loadProfile()`\n\n  `Ice_loadProfileWithArgs()`\n\n  `Ice_dumpProfile()`\n\n## Visual Studio Add-in Changes\n\n- Added support for Visual Basic projects. For Visual Basic projects\n  the plug-in only takes care of managing Ice references and not slice\n  compilation.\n\n- It is now possible to install the plug-in when `My Documents` is\n  linked to a network drive.\n\n- The plug-in will no longer modify projects for which it is not\n  enabled.\n\n- The plug-in will now compile slice files for C++ projects even if\n  the project does not have `C++ Options`.\n"
        },
        {
          "name": "CHANGELOG-3.5.md",
          "type": "blob",
          "size": 19.572265625,
          "content": "The entries below contain brief descriptions of the changes in a release, in no particular order. Some of the entries reflect significant new additions, while others represent minor corrections. Although this list is not a comprehensive report of every change we made in a release, it does provide details on the changes we feel Ice users might need to be aware of.\n\nWe recommend that you use the release notes as a guide for migrating your applications to this release, and the manual for complete details on a particular aspect of Ice.\n\n- [Changes in Ice 3.5.1](#changes-in-ice-351)\n  - [General Changes](#general-changes)\n  - [C++ Changes](#c-changes)\n  - [Java Changes](#java-changes)\n  - [C# Changes](#c#-changes)\n  - [PHP Changes](#php-changes)\n- [Changes in Ice 3.5.0](#changes-in-ice-350)\n  - [General Changes](#general-changes-1)\n  - [C++ Changes](#c-changes-1)\n  - [Java Changes](#java-changes-1)\n  - [C# Changes](#c#-changes-1)\n  - [Python Changes](#python-changes)\n  - [PHP Changes](#php-changes-1)\n  - [Ruby Changes](#ruby-changes)\n  - [Visual Studio Add-in Changes](#visual-studio-add-in-changes)\n\n# Changes in Ice 3.5.1\n\nThese are changes since Ice 3.5.0.\n\n## General Changes\n\n- Moved instructions for building a source distribution to the Ice manual.\n\n- It's now possible to install an instrumentation observer with the communicator initialization data structure and still have the metrics administrative facet enabled. Previously, installing an observer would disable the metrics facet.\n\n- IceGrid database replication now keeps track of a serial number to compare the slave and master databases on startup. A slave database with a more recent serial number than the master database will no longer be overwritten when the slave connects and synchronizes its database with the master. Instead, an error message will be printed on both the master and slave consoles and the slave connection will be rejected by the master.\n\n  Upon getting this error, the IceGrid administrator can decide which database to keep and either initialize the master database with the slave database or vice-versa. A new `--initdb-from-replica=<replica>` command-line option has been added to allow initializing a registry database from another replica.\n\n  This change is backward compatible with Ice 3.5.0. If a 3.5.0 slave connects to an Ice 3.5.1 master, or vice-versa, no check is performed and the previous behavior applies (the slave database always gets overwritten by the master database when the slave connects to the master).\n\n- Improved IceGrid algorithm to find registry replicas on node or slave startup.\n\n- Fixed bug in `IceGrid::Query::findAllReplicas` implementation that could cause a crash when trying to find the proxies of an empty replica group.\n\n- Added support for SOCKSv4 proxies to the Ice core in C++, C# and Java. This allows outgoing TCP & SSL connections using IPv4 to be mediated by a network proxy service.\n\n- Fixed bug that could cause an unexpected exception or error on connection closure when the connection is closed shortly before sending pending messages.\n\n- Fixed the graphical IceGrid administrative tool to run and build in JVMs without JavaFX support.\n\n- IceGrid node now initializes the process supplementary groups.\n\n- Added man pages for Ice executable tools and commands.\n\n- Added ability to list IceStorm topic subscribers.\n\n- Fixed a bug in the graphical IceGrid administrative tool that caused the \"Save\" and \"Save to File\" commands to produce an empty file without reporting any errors.\n\n- The Visual Studio Add-in now supports configuration-specific compiler options.\n\n## C++ Changes\n\n- Reading an optional with the `Ice::InputStream::read` method should now clear the optional if the optional isn't marshaled on the input stream.\n\n- Fixed file descriptor leak that would occur if an object adapter listened on a UDP endpoint (one descriptor leaked per UDP endpoint).\n\n- Fixed a bug that could cause an unexpected exception to be thrown on plug-in loading when a plug-in property specified both a path and version.\n\n- Fixed a bug in `slice2cpp` that generated invalid C++ code for C++11 asynchronous invocations.\n\n- Fixed a bug in `slice2cpp` that generated invalid C++ code when using `cpp:virtual` metadata.\n\n- Fixed a bug in `slice2cpp` that generated invalid C++ code when a Slice operation has more than ten output parameters.\n\n## Java Changes\n\n- Fixed an SSL issue with anonymous ciphers on SLES 11 SP3 when using the IBM JDK.\n\n- To simplify the use of optional values with the stream API, an `optionalFormat()` method is now generated in Helper classes when the `--stream` option is enabled.\n\n- Fixed an assertion that would occur if a memory limit exception was raised while marshaling the response of an AMD callback.\n\n## C# Changes\n\n- To simplify the use of optional values with the stream API, an `optionalFormat()` method is now generated in Helper classes when the `--stream` option is enabled.\n\n- Fixed an assertion that would occur if a memory limit exception was raised while marshaling the response of an AMD callback.\n\n- Fixed a bug in `slice2cs` that caused incorrect code to be generated for a Slice structure that declares default values for its members.\n\n## PHP Changes\n\n- Fixed PHP namespace builds.\n\n# Changes in Ice 3.5.0\n\nThese are the changes since Ice 3.4.2.\n\n## General Changes\n\n- Fixed a bug where the `CtrlCHandler` destruction would cause a segfault on some recent Linux distributions with GCC 4.7.\n\n- IPv6 is now enabled by default. A server listening on an endpoint with the wildcard address will therefore now accept connections from both IPv4 and IPv6 clients. It will also publish endpoints with IPv6 addresses if some network interfaces are configured with IPv6 addresses. Ice will still prefer IPv4 addresses when resolving hostnames from endpoints and the result includes both types of addresses. This behavior can be changed by setting `Ice.PreferIPv6Address` to 1. In this case, Ice prefers the IPv6 address over the IPv4 address if the hostname resolves to both IPv4 and IPv6 addresses. IPv6 can be disabled by setting `Ice.IPv6` to 0.\n\n- Fixed a bug where an erroneous connection warning could be printed on the server side if the client closed the connection before receiving the connection validation message.\n\n- Fixed a Freeze map issue where the clear method could throw an exception if active cursors were still opened.\n\n- Added support for `wrapInputStream` function. Unlike the `createInputStream` function, the returned input stream wraps the provided encoded data rather than copying it. While it avoids copying the data, care must be taken to not modify the data while the input stream is being used.\n\n- The IceBox server no longer configures a service's logger if the service defines `Ice.LogFile` or `Ice.UseSyslog`.\n\n- IceGrid should now interoperate with IceGrid node versions >= 3.2.\n\n- Fixed issue where defining an `IceUtil::Handle` for a specialization of a generated Slice class would fail to compile because the Slice class privately inherited from `IceInternal::GCShared`.\n\n- Fixed client side checks for encoding version. An invocation on a proxy with a compatible encoding (same major version) will now succeed even if the encoding minor version is not supported. In this case, the Ice run time uses the greatest supported encoding.\n\n- Fixed bug where the retry of an AMI invocation could trigger an assertion.\n\n- Improved the dispatch and remote invocation metrics classes to support additional `size` and `replySize` data members.\n\n- Improved the 1.1 encoding to further reduce the size of encoded objects. Objects are no longer encoded at the end of the encapsulation. Instead, an object is encoded as soon as it's written and it has not already been encoded within the encapsulation. IMPORTANT: This change implies that the 1.1 class encoding from Ice 3.5.0 is incompatible with the encoding from the 3.5 beta version.\n\n- Added support for Slice class compact IDs. A compact ID is defined as a numeric value in the Slice class definition. For example:\n```\n// Slice\nclass Compact(1)\n{\n    string v;\n};\n```\n  When using the 1.1 encoding, Ice will marshal this numeric value instead of the string type ID of the class.\n\n- Fixed bugs in the Slice parser related to optional values:\n\n    - The parser was too strict when validating tags of optional data members. It is legal to reuse the tag of an inherited data member but the parser treated it as an error.\n\n    - The parser did not detect duplicate tags among the optional parameters in an operation.\n\n- The properties `IcePatch2.ChunkSize`, `IcePatch2.Directory`, `IcePatch2.Remove` and `IcePatch2.Thorough` have been deprecated for IcePatch2 clients. The replacements are `IcePatch2Client.ChunkSize`, `IcePatch2Client.Directory`, `IcePatch2Client.Remove` and `IcePatch2Client.Thorough`, respectively.\n\n- The `Ice::ConnectionInfo` class supports an additional `connectionId` field. This ID matches the connection ID set on a proxy with the `ice_connectionId` proxy method.\n\n- The `Ice::UDPEndpointInfo` class no longer supports encoding` and protocol version members. These members have been deprecated with the 1.1 encoding.\n\n- Added support for TLS 1.1 and TLS 1.2 in IceSSL for C++ and Java.\n\n- IceGrid now supports a new `proxy-options` attribute on the `<adapter>`, `<replica-group>`, `<object>` and `<allocatable>` XML descriptor elements. This attribute allows to specify the proxy options to use for well-known objects or allocatable objects. For adapters, it also generates the object adapter `ProxyOptions` property in the server or service configuration file. This change requires an IceGrid database upgrade.\n\n- Improved Glacier2 permission verifiers to permit throwing `Glacier2::PermissionDeniedException` exceptions. Glacier2 now forwards permission denied exceptions to the client.\n\n- The Slice compilers now define the `ICE_VERSION` preprocessor macro so that you can use the Ice version to conditionally compile your Slice definitions.\n\n- Fixed bug where the UDP client endpoint `--interface` option would be ignored on some platforms (Windows and macOS).\nIceGrid now enables active connection management for its object adapters to allow client connections to be closed automatically when inactive.\n\n- Improved `Ice.Trace.Network` tracing for transport acceptors. The tracing now shows when the object adapter starts listening for incoming connections and when it starts accepting them.\n\n- Improved IceStorm batch subscriber sending to wait for the batch to be sent before sending another batch.\n\n- Added a new \"compact\" encoding for Slice classes and exceptions. This format significantly reduces the \"on-the-wire\" size of class and exception instances, but sacrifices the ability for the receiver to \"slice\" an unknown derived type to a known type. The compact format is now the default encoding. Applications can selectively enable the traditional \"sliced\" format using metadata and the property `Ice.Default.SlicedFormat`.\n\n- When using the \"sliced\" format for Slice classes and exceptions, Ice now has the ability to preserve the slices of unknown derived types and forward the original value intact. This allows an intermediary without knowledge of all derived types to forward a value while retaining the slices of unknown types. Types must be annotated with the \"preserve-slice\" metadata to support this feature.\n\n- Added support for optional data members in classes and exceptions, and optional parameters in operations.\nThe changes necessary to support the compact encoding, preserved slices, and optional members and parameters required a revision to the Ice encoding. The default encoding version is now 1.1. Ice remains fully backward-compatible with existing applications that use version 1.0 of the Ice encoding, however these new features cannot be used in mixed environments.\n\n- Slice enumerators can now be assigned arbitrary values:\n```\n// Slice\nenum Color\n{\n    red = 1,\n    green, // Value is 2\n    blue = 9\n};\n```\n\n- IceGrid and the IceGrid administrative clients have been enhanced to support updating server configuration properties at run time without requiring the servers to be restarted.\n\n- Added support for updating Ice properties at run time using the Ice administrative \"Properties\" facet. The facet also allows user code to register a callback to be notified of the updates.\n\n- Fixed a bug where batched requests could cause invalid `Ice::UnmarshalOutOfBoundsException` exceptions if a request from the batch failed because no servants could be found to dispatch the request.\n\n- Fixed issue where IceGrid round-robin load balancing policy returned the same adapter endpoints multiple times if some IceGrid nodes were down.\n\n- Fixed a bug where, under certain circumstances, Ice could assert when a connection was being closed.\n\n- Improved server disable to prevent the IceGrid locator from returning endpoints of disabled servers.\n\n- Fixed a per-session memory leak in Glacier2 that occurred when request buffering was enabled.\n\n- Fixed IceStorm bug that could cause a crash when using the Freeze database backend and multiple threads were trying to write to the database.\n\n- Fixed minor performance issue with bi-directional proxies.\n\n- Added support for replica and node name verification when securing the IceGrid node and registries. The names are matched against the certificate common name. The connection is rejected if the certificate CN does not match the replica or node name. The properties `IceGrid.Registry.RequireNodeCertCN` and `IceGrid.Registry.RequireReplicaCertCN` must be set to 1 to enable this verification.\n\n- Fixed IceGrid bug where the server deactivation timeout would be ignored if the server was not deactivated using the IceGrid administrative facility.\n\n- Fixed IceSSL bug in all language mappings that could cause a server to crash if a failure occurred during connection establishment and network tracing was enabled.\n\n## C++ Changes\n\n- `operator==` and `operator<` are now only generated by default for Slice structures that can be used as dictionary keys. For other structures you will need to add the metadata `[\"cpp:comparable\"]` if you need these operators. For example:\n```\n[\"cpp:comparable\"]\nstruct MyStruct {\n    Ice::StringSeq ids;\n};\n```\n\n- Added support for a zero-copy `Ice::OutputStream::finished()` method. If supported by the stream implementation, the memory returned by this method points to the output stream's internal buffer. Special care must be taken to ensure the memory is not accessed after the de-allocation of the output stream object.\n\n- Added support for zero-copy on x86_64 processors when using the sequence C++ array mapping.\n\n- Added support for WinRT.\n\n- Added new AMI mapping with support for C++11 lambda functions. This mapping is only available on platforms supporting the new C++11 features.\n\n- Fixed a Windows bug where a connection failure would be reported with `Ice::SocketException` instead of `Ice:ConnectFailedException`.\n\n- Added the property `IceSSL.InitOpenSSL`, which allows an application to disable the OpenSSL startup and shutdown activities in the IceSSL plug-in.\n\n- Fixed a bug that could cause an assertion failure when flushing batch requests.\n\n- Added support for clang compiler on macOS.\n\n- Fixed issue where a connection to a remote address would always fail with an assertion on Windows 8.\n\n- Declaring `ice_print` for local exceptions is now optional. This method is not declared by default, but you can use the metadata tag `[\"cpp:ice_print\"]` to enable the method declaration.\n\n- The `slice2cpp --depend` option now includes the generated header file in Makefile dependencies.\n\n- Deprecated `ice_getHash`. Users should create their own hash implementations when needed.\n\n## Java Changes\n\n- Added support for the `Ice.UseApplicationClassLoader` configuration property. When set to 1, the Ice core will set the thread context class loader to the class loader of the servant or AMI callback before dispatching the call.\n\n- Fixed a Freeze map index marshaling bug. The encoding of the key would write an additional byte if the map value used classes. This bug fix requires that you recreate your indices if your Freeze map value uses classes.\n\n- Fixed a bug in IceSSL that could cause delays due to DNS lookups.\n\n- Fixed a bug in the generated code for a Slice exception with no data members: constructors are now generated correctly.\n\n- Fixed an IceSSL bug in which the `IceSSL.Alias` property was not working correctly.\n\n- The mapping for Slice classes, exceptions and structures now defines a `serialVersionUID` member. You can override the default UID using the metadata `[java:serialVersionUID:<value>]`.\n\n- Ice services are now built in separate JAR files.\n\n## C# Changes\n\n- Fixed potential leak which could eventually result in an `OutOfMemoryException` for applications creating proxies on a regular basis.\n\n- Added the properties `IceSSL.KeySet` and `IceSSL.PersistKeySet` to control how and where to import private keys of X.509 certificates.\n\n- Changed the marshaling code for sequences of user-defined types that are mapped to `System.Collections.Generic.Stack<T>`. In previous releases the elements were marshaled in bottom-to-top order; now they are marshaled in top-to-bottom order. Stacks of primitive types have always been marshaled in top-to-bottom order.\n\n- Fixed a bug that could cause an infinite loop while visiting all referenced assemblies of an executable.\n\n- The generated constructors for an abstract Slice class now use protected visibility instead of public visibility.\n\n- Fixed a bug in `Ice.Application` for Mono that could cause the VM to crash when a signal occurred.\n\n- Minor marshaling/un-marshaling performance improvement (removed virtual specifier from streaming class).\n\n- Added missing throwLocalException method to `Ice.AsyncResult` interface.\n\n- Struct types that contains default values are mapped to a class.\n\n## Python Changes\n\n- Fixed a bug in the `Glacier2.Application` class where the code was using the old asynchronous API.\n\n- Added \"self\" to the Slice compiler's list of Python keywords.\n\n- Added support for Python 3.\n\n- Fixed a bug in the `checkedCast` operation when using a non-existent facet. In previous releases this operation raised a `FacetNotExistException`; now it returns a nil proxy as in other language mappings.\n\n- Fixed a bug that caused IceGrid activation of a Python server to hang when tracing was enabled for the server.\n\n## PHP Changes\n\n- SLES 11 RPMs now require PHP 5.3.\n\n- Added compatibility with PHP 5.4.\n\n- Fixed a bug in the `checkedCast` operation when using a non-existent facet. In previous releases this operation raised a `FacetNotExistException`; now it returns a nil proxy as in other language mappings.\n\n- Fixed a bug in `Ice_initialize`: if an array was passed representing the command-line arguments, the function was not updating that array to remove Ice-specific options.\n\n- It is no longer necessary to use call-time reference arguments when passing the command-line argument array to `Ice_initialize` and `Ice_createProperties`, as these functions now force their arguments to be passed by reference. For example, where you used to call a function like this:\n  `$communicator = Ice_initialize(&$argv);`\n  you can now use this:\n  `$communicator = Ice_initialize($argv);`\n\n## Ruby Changes\n\n- Fixed a bug in the `checkedCast` operation when using a non-existent facet. In previous releases this operation raised a `FacetNotExistException`; now it returns a nil proxy as in other language mappings.\n\n## Visual Studio Add-in Changes\n\n- Fixed a bug with C++ projects that build static libraries.\n\n- Fixed a bug that could cause Visual Studio to hang while opening or building solutions containing a large number of projects.\n\n- Fixed a bug during project cleaning in which an exception was thrown when trying to remove generated files and the user is not authorized to remove the files.\n\n- Fixed a bug with solutions that contain unloaded projects.\n"
        },
        {
          "name": "CHANGELOG-3.6.md",
          "type": "blob",
          "size": 40.333984375,
          "content": "The entries below contain brief descriptions of the changes in a release, in no\nparticular order. Some of the entries reflect significant new additions, while\nothers represent minor corrections. Although this list is not a comprehensive\nreport of every change we made in a release, it does provide details on the\nchanges we feel Ice users might need to be aware of.\n\nWe recommend that you use the release notes as a guide for migrating your\napplications to this release, and the manual for complete details on a\nparticular aspect of Ice.\n\n- [Changes in Ice 3.6.4](#changes-in-ice-364)\n  - [General Changes](#general-changes)\n  - [C++ Changes](#c-changes)\n  - [Java Changes](#java-changes)\n  - [JavaScript Changes](#javascript-changes)\n  - [C# Changes](#csharp-changes)\n- [Changes in Ice 3.6.3](#changes-in-ice-363)\n  - [General Changes](#general-changes)\n  - [C++ Changes](#c-changes)\n  - [Objective-C Changes](#objective-c-changes)\n  - [PHP Changes](#php-changes)\n  - [Python Changes](#python-changes)\n- [Changes in Ice 3.6.2](#changes-in-ice-362)\n  - [General Changes](#general-changes-1)\n  - [C++ Changes](#c-changes-1)\n  - [C# Changes](#c-changes-2)\n  - [Java Changes](#java-changes)\n  - [Python Changes](#python-changes-1)\n  - [Ruby Changes](#ruby-changes)\n- [Changes in Ice 3.6.1](#changes-in-ice-361)\n  - [General Changes](#general-changes-1)\n  - [C++ Changes](#c-changes-3)\n  - [JavaScript Changes](#javascript-changes)\n  - [PHP Changes](#php-changes-1)\n- [Changes in Ice 3.6.0](#changes-in-ice-360)\n  - [General Changes](#general-changes-3)\n  - [C++ Changes](#c-changes-4)\n  - [C# Changes](#c-changes-5)\n  - [Java Changes](#java-changes-1)\n  - [JavaScript Changes](#javascript-changes-1)\n  - [Objective-C Changes](#objective-c-changes-1)\n  - [PHP Changes](#php-changes-2)\n  - [Python Changes](#python-changes-2)\n  - [Ruby Changes](#ruby-changes-1)\n\n# Changes in Ice 3.6.4\n\nThese are the changes since Ice 3.6.3.\n\n## General Changes\n\n- Fixed IceGrid node bug where a replica might not get up-to-date object\n  adapter information about a server if an update is pending for this\n  server. Thanks to Michael Gmelin for the bug report and fix.\n\n- Added support for a new `Ice.ClassGraphDepthMax` property to prevent stack\n  overflows in case a sender sends a very large graph.\n\n  The unmarshaling or destruction of a graph of Slice class instances is a\n  recursive operation. This property limits the amount of stack size required to\n  perform these operations. This property is supported with all the language\n  mappings except Java and JavaScript where it's not needed (the run time\n  environment allows graceful handling of stack overflows).\n\n  The default maximum class graph depth is infinite. If your application\n  receives class graphs in an insecure environment, you should set the\n  `Ice.ClassGraphDepthMax` to a value that ensures the thread pool stack size is\n  large enough to allow reading graphs without causing a stack overflow.\n\n- Fixed IceGrid bug where updating properties of an IceBox service at runtime\n  would fail if the service used the IceBox shared communicator. Thanks to\n  Andreas Sommer for the bug report and fix.\n\n- Fixed a bug in the Slice compilers: they generated incorrect dependencies for\n  Slice files in directories with the string \".ice\" in their path.\n\n- Significantly reduced the size of the Windows binary distribution by\n  moving all C++ debug information (PDB files) to https://symbols.zeroc.com.\n  Also removed the WinRT libraries from the Windows binary distribution.\n\n## C++ Changes\n\n- Fixed a spurious and harmless error message related to the kqueue selector.\n  This message would only show up under certain circumstances when using Ice\n  on macOS Sierra (10.2).\n\n- Fixed a bug which would cause an IceUtil::NullHandleException to be raised when\n  using a proxy configured with ice_invocationTimeout(-2) with collocated calls.\n\n- Fixed a bug which caused PTHREAD_PRIO_INHERIT to be ignored when building Ice\n  with -DICE_PRIO_INHERIT.\n\n## Java Changes\n\n- Fixed generated code bug which would cause a build failure if an interface\n  inherited from an interface from another module and if this interface had\n  operations returning multiple values.\n\n## JavaScript Changes\n\n- Fixed a bug in the Ice.Long toNumber implementation: negative integers\n  smaller than -(2^52 - 1) were not correctly handled.\n\n## CSharp Changes\n\n- Fixed a bug that affects the Stack sequence mapping. When using the Stack\nmapping with a sequence<Object*>, items were unmarshaled in reverse\norder.\n\n- Fixed a bug where incorrect code could be generated for invalid metadata\ndirectives.\n\n# Changes in Ice 3.6.3\n\nThese are the changes since Ice 3.6.2.\n\n## General Changes\n\n- Fixed IceGrid bug where deployment of an application would fail if a well-\n  known object was registered with an adapter whose adapter ID contained spaces.\n\n- Added support for limiting the number of events queued for a given subscriber.\n  This is useful to prevent IceStorm from consuming too much memory when a\n  subscriber is too slow to consume published events. The queue maximum size is\n  configured with the IceStorm.Send.QueueSizeMax property. You can use the\n  property IceStorm.Send.QueueSizeMaxPolicy=RemoveSubscriber|DropEvents to\n  configure the behavior of IceStorm when the limit is reached. By default,\n  IceStorm will queue events indefinitely.\n\n- Speed-up the update of IceStorm replicas after the election of a new IceStorm\n  coordinator.\n\n- Fixed a bug in the IceLocatorDiscovery plug-in that could occasionally\n  trigger an infinite loop.\n\n- Fixed a bug in the unmarshaling code where passing optional input\n  parameters to an operation with no required input parameters would\n  cause an Ice::EncapsulationException to be thrown if the receiver\n  didn't expect the optional input parameters. The same applies for\n  passing optional output parameters to operations without required\n  output parameters.\n\n- Fixed a bug in icegridadmin and IceGridGUI which was preventing to get\n  properties for IceBox services using the IceBox shared communicator.\n\n- Fixed a bug in IceGrid Admin (IceGridGUI) that resulted in an incorrect\n  state when you removed and then re-added the same IceGrid application.\n\n- The Slice compilers now support non-ASCII paths on all platforms.\n\n- General clean up in slice2html, including a fix for broken link paths.\n\n## C++ Changes\n\n- Added support for archiving log files. The property Ice.LogFile.SizeMax\n  controls the maximum size in bytes of log files; when a log file reaches\n  this size, the log file is renamed and a new log file is started.\n  The Ice.LogFile.SizeMax property is set to 0 by default, which means the\n  log file size is unlimited and a single log file is created.\n\n## Objective-C Changes\n\n- Added identityToString and stringToIdentity non-member functions, which\n  were missing from previous releases.\n\n## PHP Changes\n\n- Added support for PHP 7.0.\n\n## Python Changes\n\n- Fixed a bug in the Slice compiler in which a Slice comment that begins or\n  ends with a double quote could generate a bogus Python docstring.\n\n- Fixed bug where Ice::UnknownUserException would sometimes be raised in C++\n  extension instead of being passed to Python.\n\n# Changes in Ice 3.6.2\n\nThese are the changes since Ice 3.6.1.\n\n## General Changes\n\n- Added two new tools, icegriddb and icestormdb, used to import/export the\n  IceGrid and IceStorm databases.\n\n- Fixed a bug that affects Java and C# generated code. The generated patcher\n  for reading class data members was bogus when the class had more than one\n  class data member and derived from a class that contained class data\n  members. The same issue was true for exceptions with class data members\n  deriving from exceptions with class data members.\n\n- Fixed a bug that prevented scripting languages (Python, Ruby, Javascript and\n  PHP) from marshaling NaN or Infinity as a floating point value.\n\n- Fixed an IceGrid bug where resolving endpoints of dynamically registered\n  replica groups would fail unless the client was using an encoding superior\n  to the encoding   of the dynamically registered object adapters.\n\n- Added missing functions Ice::identityToString and Ice::stringToIdentity\n  (C++, Objective-C, PHP, Python and Ruby).\n\n- Added support for universal character names (\\uNNNN and \\UNNNNNNNN) in Slice\n  string constants.\n\n- Fixed Glacier2 router bug where requests from client to server could be lost\n  if forwarded as batch requests with the _fwd=O context.\n\n- Fixed Glacier2 bug which would occur in un-buffered mode and when forwarding\n  one-way requests. The Glacier2 router could eventually leak and hang on\n  shutdown.\n\n## C++ Changes\n\n- Fixed El Capitan build issues caused by a new security feature that no longer\n  exports DYLD_LIBRARY_PATH to child processes.\n\n- Fixed potential deadlock that could occur when using collocation optimization\n  and serialized server thread pools.\n\n- Fixed IceSSL bug that would only show up with WSS servers running on macOS\n  and Linux. The WSS server could stop reading requests if the client sent\n  multiple requests within the same SSL record.\n\n## C# Changes\n\n- Minor fixes to release the memory used by the transports to send and receive\n  data sooner. The garbage collector can therefore collect this memory sooner\n  as well.\n\n## Java Changes\n\n- Fixed a bug where unmarshaling Ice objects was really slow when using\n  compact type IDs.\n\n- Fixed an IceGridGUI bug where metrics attributes for Glacier2 and IceStorm\n  were not displayed.\n\n- Fixed an IceGridGUI bug where the GUI started minimized in macOS.\n\n## Python Changes\n\n- Added compatibility with Python 3.5.\n\n## Ruby Changes\n\n- Added compatibility with Ruby 2.3.\n\n# Changes in Ice 3.6.1\n\nThese are the changes since Ice 3.6.0.\n\n## General Changes\n\n- Fixed IceStorm performance issue when creating a large number of topics.\n\n- Added support for Visual Studio 2015 and Universal Windows Platform (UWP)\n  apps.\n\n- Connection and transport buffers are now released when the connection is\n  closed rather than waiting for the collection or destruction of the Ice\n  connection object.\n\n- Calling `destroy()` on the `Glacier2::SessionHelper` during connection\n  establishment will now immediately cause the termination of the connection\n  attempt and `SessionCallback::connectFailed()` will be called with a\n  `CommunicatorDestroyedException`. Previously, the helper would wait until\n  the connection attempt either succeeded or failed before calling\n  `SessionCallback::disconnected()` or `SessionCallback::connectFailed`.\n\n- Fixed a bug in Slice compilers that would incorrectly reject valid Slice\n  where a parameter with the same name as a type would prevent further use of\n  that type in the same scope. For example:\n  ```\n  module Test\n  {\n  sequence<int> Seq;\n  struct S1\n  {\n    Seq seq;\n    Seq seq2; // This would fail with 'Seq is not a type'\n  };\n\n  interface Intf\n  {\n    void method(Seq seq, Seq seq2); // This would fail with 'Seq is not a type' for second parameter\n  };\n  };\n  ```\n\n- Added `--validate` option to Slice compilers. This option validates the\n  options that are passed to the Slice compiler and emits any errors but does\n  not create the generated files.\n\n## C++ Changes\n\n- Added registration function for Ice plug-ins (Ice::registerIceSSL, ...). Use\n  these functions if you don't want to rely on plug-in dynamic loading at run\n  time. Your application will need to link with the plug-in's dynamic library\n  if it uses the register function.\n\n- C++ source builds in Windows now use third-party packages from NuGet\n  (https://www.nuget.org).\n\n- Windows C++ builds now install the required third-party dependencies to the\n  install directory.\n\n## JavaScript Changes\n\n- Fixed an issue in connection code that would cause an unexpected exception to\n  be raised in some browsers when connection caching was enabled.\n\n- Fixed an issue where JavaScript browser code was trying to use TCP endpoints.\n\n- Fixed an issue that prevents Ice for JavaScript from running in a Web Worker.\n\n- JavaScript browser libraries no longer include a sourceMappingURL. To use\n  source maps you must enable them manually.\n\n## PHP Changes\n\n- Update PHP builds for Linux and macOS to use php-config from PATH. It is no\n  longer necessary to set PHP_HOME.\n\n# Changes in Ice 3.6.0\n\nThese are the changes since Ice 3.5.1.\n\n## General Changes\n\n- Exceptions raised by the `Ice::Plugin` initialize method are now caught by the\n  communicator, which raises `Ice::PluginInitializationException` instead.\n\n- Fixed IceGrid bug where an application update could fail and leave the\n  registry in an invalid state if some allocation requests were pending while\n  the application was updated.\n\n- Deprecated the `IceSSL.PersistKeySet` which is now only used when importing\n  certificates with the deprecated `IceSSL.ImportCert` property.\n\n- Deprecated the `IceSSL.KeySet` property, use the `IceSSL.CertStoreLocation`\n  property instead.\n\n- Added `IceSSL.CertStoreLocation` property. This is a Windows specific property\n  to specify the location of the certificate store or key set for IceSSL\n  operation. The LocalMachine and CurrentUser locations are supported.\n\n- Added `IceSSL::WSSConnectionInfo` local Slice class to provide information on\n  a WSS connection. This class extends the `IceSSL::ConnectionInfo` class. The\n  `IceSSL::WSSNativeConnectionInfo` was also added to provide the language\n  mapping specific certificates associated with the SSL connection.\n\n- Added `IceSSL::WSSEndpointInfo` local Slice class to provide WSS endpoint\n  information. This class extends the `IceSSL::EndpointInfo` class.\n\n- Updated `Ice::WSEndpointInfo` to extend `Ice::TCPEndpointInfo` and\n  `Ice::WSConnectionInfo` to extend `Ice::TCPConnectionInfo`\n\n- IceSSL now supports using the platform Root Certificate Authorities to\n  validate remote certificates. The use of the platform Root CAs can be enabled\n  with the `IceSSL.UsePlatformCAs` property. The platform Root CAs are only\n  checked if `IceSSL.CAs` is not set.\n\n- The `IceSSL.CertAuthFile` and `IceSSL.CertAuthDir` properties have been\n  deprecated. You should now use the `IceSSL.CAs` property to configure the path\n  of the PEM file containing the Root Certificate Authorities or the path of a\n  directory containing the certificates (OpenSSL only).\n\n- The `IceSSL.KeyFile` property has been deprecated. You should instead use\n  `IceSSL.CertFile` and PKCS12 files to configure the IceSSL identity.\n\n- The default value of the `IceSSL.VerifyDepthMax` property is now 3 (it was\n  previously 2). This allows certificate chains of 3 certificates (e.g., a Peer,\n  CA and Root certificate chain).\n\n- The certificate chain provided in the `IceSSL::ConnectionInfo` should now\n  always include the root certificate if the chain could successfully be\n  verified.\n\n- Added `verified` member to the `IceSSL::ConnectionInfo` class. This member\n  indicates whether or not the peer certificate was successfully verified. This\n  member is useful for clients which set `IceSSL.VerifyPeer=0` to check if the\n  server certificate could be verified or not. For server connections, the\n  member should always be `true` since servers always reject invalid client\n  certificates.\n\n- The Ice distribution now supports the Objective-C mapping on macOS.\n\n- The Glacier2 `SessionHelper` class now creates the callback object adapter\n  automatically unless the application calls\n  `SessionFactoryHelper.setUseCallbacks(false)`.\n\n- Added the `headers` member to the `Ice::WSConnectionInfo` class. This member\n  contains the HTTP headers provided during WebSocket connection establishment.\n\n- Significantly changed the behavior of batch requests:\n\n    - Invocations on batch fixed proxies are still queued by the Ice connection\n      object as in previous releases.\n\n    - Invocations on batch direct or indirect proxies are now queued directly\n      by the proxy object.\n\n    - As a result, calling `flushBatchRequests` on the Ice communicator or\n      connection will no longer flush batch requests queued with proxies.\n\n    - You should instead call `flushBatchRequests` on the proxy to flush its\n      batch request queue. The flushing of those batch requests is handled like\n      a regular one-way request (e.g., the Ice run time will retry if the\n      connection fails).\n\n- Added support for batch request interceptors (C++, Java, C#, Python,\n  Objective-C). You can assign a batch request interceptor on communicator\n  initialization using the `InitializationData` structure.\n\n- IPv6 is now disabled by default if the operating system doesn't support the\n  creation of IPv6 sockets.\n\n- Added new `Ice.BatchAutoFlushSize` property to allow controlling how much data\n  (in kilobytes) is queued for batching before the batch is sent over the\n  connection. Previously, this was controlled by the `Ice.MessageSizeMax`\n  property. The `Ice.BatchAutoFlush` property has also been deprecated. To\n  disable auto flush you can set `Ice.BatchAutoFlushSize=0`. The default value\n  is 1024.\n\n- We have relaxed the semantics of `Ice.MessageSizeMax`. The check for the\n  maximum message size is now only performed on the receiver side. If the\n  size of the message is greater than the limit, Ice raises\n  `Ice::MemoryLimitException` and closes the connection. Previously, it was also\n  used to limit the amount of data sent to a peer (either for a request or\n  reply). This is no longer the case. A zero or negative value now also disables\n  the check and allows an unlimited amount of data to be received (this should\n  only be used in a trusted environment). Finally, support for the\n  `objectAdapter.MessageSizeMax` property was added to allow setting this limit\n  on specific object adapters.\n\n- The Ice run time now raises `Ice::IllegalServantException` if a null servant\n  is provided to a method that requires a non-null servant (such as the\n  `Ice::ObjectAdapter::add` methods or the Freeze evictor `add` methods).\n\n- It's now possible to specify an IPv6 address for the UDP `--interface` local\n  option; previously it only accepted an interface name or index.\n\n- Ice now guarantees that invocations made on different proxy objects will be\n  serialized if the proxies are equal and if connection caching is enabled.\n  Previously, invocations could be sent out of order if the connection wasn't\n  established.\n\n- IceGrid now permits removing or moving servers when saving an application\n  \"without restart\" (to ensure the update doesn't cause any server shutdown).\n  The servers to be removed or moved must be stopped or the saving will fail.\n  Previously, IceGrid prevented the saving of the application even if the\n  servers were stopped.\n\n- It's now possible to pass indirect proxies to\n  `IceGrid::AdminSession::setObservers`. Previously, the IceGrid registry would\n  fail to resolve the endpoints and the observer updates weren't sent.\n\n- The IceGrid implementation of `Ice::Locator::getRegistry` now returns a\n  replicated proxy if IceGrid replication is used. This way, if an IceGrid\n  replica becomes unavailable during a server's activation, the server will\n  still be able to register its endpoints with one of the other replicas.\n\n- Added a `cancel` method to `AsyncResult`. Calling it prevents a queued\n  asynchronous request from being sent, or ignores the reply if the request has\n  already been sent. It does not cancel the request in the server. Canceled\n  requests throw `Ice::InvocationCanceledException`.\n\n- Removed the \"old\" asynchronous invocation API that was deprecated in Ice 3.4.\n\n- Removed the following deprecated Slice operations:\n    - `Ice::Router::addProxy`\n    - `IceGrid::Admin::writeMessage`\n    - `IceStorm::Topic::subscribe`\n\n- Added the WebSocket transports to the Ice core, including new implementations\n  in Java and C#. This means it's no longer necessary to use Glacier2 as an\n  intermediary when a JavaScript client needs to communicate with a Java or C#\n  server.\n\n- Added a \"Logger\" facet to the admin object, which allows remote applications\n  to attach `RemoteLogger` objects and receive log messages. Both the\n  icegridadmin command-line utility and IceGrid Admin GUI use this new facet\n  to retrieve the logs of Ice servers, IceBox services, IceGrid nodes and\n  IceGrid registries.\n\n- Added `getNodeAdmin` and `getRegistryAdmin` operations to the `IceGrid::Admin`\n  interface. They return the admin object of a given IceGrid registry or node.\n\n- Added new `getPrefix` operation to `Ice::Logger`; it returns the prefix of the\n  logger.\n\n- The admin object can now be hosted in an application-supplied object adapter\n  using the new property `Ice.Admin.Enabled` and the new operation\n  `Ice::Communicator::createAdmin`.\n\n- Added methods to proxies to asynchronously get the connection associated with\n  the proxy. The current synchronous methods can block as they may cause the\n  connection to be established.\n\n- Added support for HTTP proxies to the Ice core in C++, C# and Java. This\n  allows outgoing TCP & SSL connections to be mediated by an HTTP network proxy\n  service that supports HTTP CONNECT tunneling. The new properties\n  `Ice.HTTPProxyHost` and `Ice.HTTPProxyPort` provide addressing information\n  for the proxy.\n\n- Added the `IceStorm::InvalidSubscriber` exception, which is thrown by the\n  `subscribe/unsubscribe` operations when an invalid subscriber (such as a null\n  proxy) is passed. IceStorm would previously either abort (if built in debug\n  mode) or throw an `Ice::UnknownLocalException` if such a subscriber proxy was\n  provided.\n\n- Added `Ice.Default.SourceAddress` property and `--sourceAddress` endpoint\n  setting to control the interface used for an outgoing connection. The\n  configured source address can be retrieved with the `sourceAddress` member\n  of the `Ice::IPEndpointInfo` class.\n\n- The signatures of `Ice::OutputStream startSize` and `endSize` have been\n  modified. It is now necessary for the caller of `startSize` to save the\n  returned position and pass it into `endSize`.\n\n- Added `IceStormAdmin.Host` and `IceStormAdmin.Port` properties. You can set\n  these properties to connect to an IceStorm instance running on a given host\n  and port.\n\n- Added IceStorm finder interface (defined in `IceStorm/IceStorm.ice`) to enable\n  clients to easily find the proxy of the topic manager with just the endpoint\n  information of the IceStorm service. The client doesn't need to know the\n  instance name. IceStorm provides an Ice object with the identity\n  `IceStorm/Finder` that implements this interface.\n\n- Added IceLocatorDiscovery plug-in, which enables Ice applications to discover\n  locators (such as IceGrid registries) running on the network using UDP\n  multicast.\n\n- Added support for IceLocatorDiscovery to the IceGrid administrative utilities.\n  Also added `IceGridAdmin.Host` and `IceGridAdmin.Port` properties; you can set\n  these properties to connect to an IceGrid registry running on a given host and\n  port.\n\n- Added \"finder\" interfaces for locators and routers to enable clients to easily\n  find proxies for the locator or router (defined in `Ice/Locator.ice` and\n  `Ice/Router.ice`). Glacier2 and IceGrid implement these interfaces and provide\n  finder Ice objects with the identities `Ice/RouterFinder` and\n  `Ice/LocatorFinder`, respectively. Clients can use these objects to connect\n  to Glacier2 and IceGrid using only the endpoint information; they don't need\n  to know the instance name of the Glacier2 or IceGrid service.\n\n- Ice metrics now support collocation optimization. The\n  `Ice::Instrumentation::CollocatedObserver` local interface and the\n  `IceMX::CollocatedMetrics` class have been added to monitor collocated\n  requests.\n\n- Collocation optimization has been significantly improved to remove\n  limitations. It now works with AMI, AMD, blobjects and batching. Collocated\n  requests are now always marshaled and unmarshaled but they don't go through\n  any transport. The `Ice::CollocationOptimizationException` is no longer used\n  and as a result is now deprecated.\n\n- Fixed a bug where retries might fail if the request failed right after\n  connection establishment.\n\n- Added callbacks for connection closure and heartbeats. The callback is invoked\n  when the connection is closed or when a heartbeat is received. Callbacks are\n  installed on the connection with the `Ice::Connection::setCallback` method and\n  implement the `Ice::ConnectionCallback` interface.\n\n- Active connection management improvements:\n\n    - Active connection management now supports sending heartbeats over the Ice\n      connection. Depending on the configuration, heartbeats are sent when there\n      are long invocations in progress, when the connection is idle, or at\n      regular time intervals.\n\n    - Connection closure by active connection management can be configured to\n      close connections under certain conditions. For example, a connection can\n      be closed gracefully or forcefully if it's idle for the specified timeout\n      period.\n\n    - The ACM properties to configure the ACM timeout have been deprecated. You\n      should now use the `prefix.Timeout` property where prefix can be\n      `Ice.ACM`, `Ice.ACM.Client`, `Ice.ACM.Server` or `objectAdapter.ACM`.\n\n- IceGrid and Glacier2 now support the new ACM mechanism to keep sessions alive.\n  The `Glacier2::Router` and `IceGrid::Registry` interfaces support a new\n  `getACMTimeout` operation. To keep the connection alive the client should\n  configure its connection to always send heartbeats using the timeout returned\n  by `getACMTimeout`. A client can also install a connection callback to be\n  notified when the connection is unexpectedly closed.\n\n- Added support for invocation timeouts. Invocation timeouts can be set on a\n  per-proxy basis with the `ice_invocationTimeout` proxy method. By default,\n  there's no invocation timeout meaning that an invocation will never timeout\n  if the connection between the client and server is alive. An invocation\n  timeout does not cause a connection to be closed. If the timeout is triggered\n  the invocation will raise `Ice::InvocationTimeoutException`.\n\n- With the addition of invocation timeouts, the existing connection timeout\n  mechanism no longer applies to invocations. Connection timeouts are now\n  enabled by default using the new property `Ice.Default.Timeout`, which\n  specifies the timeout for stringified proxy endpoints that do not have a\n  timeout explicitly set. The default setting for the property is 60 seconds.\n  It is also now possible to set an infinite timeout using `-t infinite` in\n  the endpoint configuration.\n\n- Added IceDiscovery plug-in, which provides a UDP multicast-based Ice locator\n  implementation. This can be used as an alternative to IceGrid when running a\n  few clients and servers on the same network and you don't want to deploy a\n  central service such as IceGrid.\n\n- Added support for IceGrid custom load balancing with the addition of replica\n  group and type filters. These filters allow you to select the set of replicas\n  that are sent back to the client when it resolves replica group endpoints.\n  It's also possible to filter the objects returned to the client when it uses\n  the `IceGrid::Query` interface.\n\n- This addition requires the upgrade of IceGrid registry databases if you\n  deployed replica groups for your IceGrid applications. See the release notes\n  for information on how to upgrade your IceGrid databases.\n\n- Fixed a marshaling bug where the marshaling of a type with nested optionals\n  of variable size could trigger an assertion.\n\n- Fixed an IceGrid registry replication bug where database synchronization could\n  fail on startup or connection establishment with the master if multiple\n  applications referred to a replica group defined in another application that\n  wasn't yet added.\n\n- FreezeScript can now transform classes to structures and structures to\n  classes. It also supports the use of compact type IDs for classes.\n\n- The `CryptPasswords` file support for Glacier2 and IceGrid is now implemented\n  in a separate C++ plug-in, the `Glacier2CryptPermissionsVerifier` plug-in. On\n  Windows, this plug-in is the only remaining Ice run time dependency on\n  OpenSSL.\n\n- Removed the `Ice::Stats` interface, which was deprecated in Ice 3.5 and\n  replaced by the new metrics facility.\n\n- The `IceBox.ServiceManager` object adapter has been deprecated. Use\n  `Ice.Admin` and the `IceBox.ServiceManager` facet instead.\n\n- Removed the following deprecated properties:\n    - `Glacier2.AddSSLContext`\n    - `IcePatch2.ChunkSize`\n    - `IcePatch2.Directory`\n    - `IcePatch2.Remove`\n    - `IcePatch2.Thorough`\n\n- Fixed a bug where optional class data members were not correctly marshaled and\n  unmarshaled when non optional class data members were defined after the\n  optional class data members or the optional tag were not in ascending order.\n  This bugs affects Java, CSharp and JavaScript language mappings.\n\n## C++ Changes\n\n- Calling Glacier2::SessionFactoryHelper::destroy() is now required to ensure\n  resources allocated for session helpers are correctly released.\n\n- Fixed a bug where the object adapter default servant map wasn't cleared on\n  object adapter destruction. This could potential lead to leaks if the default\n  servant had a reference to the object adapter.\n\n- IceStorm is now faster when creating persistent topics and subscribers.\n\n- Ice for C++ now supports the GCC and clang symbol visibility options: we build\n  by default with `-fvisibility=hidden` and we define `ICE_DECLSPEC_EXPORT` and\n  `ICE_DECLSPEC_IMPORT` for these compilers.\n\n- Refactored the capture and printing of exception stack traces to be more\n  efficient when the stack traces are not printed. The signature of\n  `IceUtil::Exception::ice_stackTrace` changed to:\n  `std::string ice_stackTrace() const;`\n\n- Fixed a bug where a private Windows Runtime delegate type could be published\n  in Windows Store Components metadata files (WINMD).\n\n- New garbage collection support for object graphs with cycles. Ice no longer\n  uses a background thread to collect objects. Instead, `Ice::Object` now has a\n  new `ice_collectable` method to indicate whether or not the object graph can\n  be collected. When a graph is marked as collectable with this method, you\n  shouldn't update the structure of the object graph. Ice tries to collect the\n  graph each time a reference count is dropped for an object in the cycle. By\n  default, object collection is turned off. When it's turned on with\n  `Ice.CollectObjects=1`, the Ice run time calls `ice_collectable(true)` on all\n  the objects it unmarshals. The properties `Ice.GC.Interval` and `Ice.Trace.GC`\n  are no longer supported, nor is the `Ice::collectGarbage` function.\n\n- Significant changes to the IceSSL plug-in:\n\n    - Now uses the native SecureTransport API on macOS\n    - Now uses the native SChannel API on Windows\n    - OpenSSL is only used in IceSSL on Linux\n\n- Added support for the `IceSSL.FindCert` property on Windows and macOS.\n\n- Added the new metadata tag `cpp:view-type:Type`, where `Type` is a type that\n  can safely provide a \"view\" into the Ice unmarshaling buffer and thereby avoid\n  extra copies. This tag can only be applied to operation parameters of type\n  string, sequence and dictionary, and only has an effect in situations where\n  the Ice data buffer is guaranteed to still exist.\n\n- It is no longer necessary to provide import libraries such as `IceD.lib`,\n  `IceUtilD.lib` or `IceGridD.lib` when linking on Windows with Visual C++. The\n  linker finds the import library names automatically through\n  `pragma comment(lib, ...)` in the Ice header files.\n\n- Ice header files no longer disable or downgrade any warning reported by the\n  C++ compiler in your code. In Ice 3.5, all header files indirectly included\n  the following:\n  ```\n  #ifdef _MSC_VER\n  //\n  // Move some warnings to level 4\n  //\n  # pragma warning( 4 : 4250 ) // ... : inherits ... via dominance\n  # pragma warning( 4 : 4251 ) // class ... needs to have\n  // dll-interface to be used by clients of class...\n  #endif\n  ```\n  When upgrading your Visual C++ application to Ice 3.6, you may need to fix,\n  disable or downgrade these warnings in your C++ code.\n\n- Fixed a bug where communicator destruction could raise\n  `Ice::NullHandleException` if a custom observer was present.\n\n- Fixed a bug where the selector wouldn't check for EPOLLERR on Linux. This\n  could cause the selector thread to spin if this condition occurred (which is\n  the case with UDP connected sockets).\n\n- Added per-process string converters for narrow and wide strings. The functions\n  `setProcessStringConverter` and `getProcessStringConverter` in the IceUtil\n  namespace can be used to establish and access the process narrow string\n  converter. Likewise `setProcessWstringConverter` and\n  `getProcessWstringConverter` can be used to establish and access the process\n  wide string converter.\n\n- Removed the `stringConverter` and `wstringConverter` data members of\n  `Ice::InitializationData`.\n\n- Moved the `StringConverter` template and classes from the Ice namespace to the\n  IceUtil namespace.\n\n- Added `Ice.LogStdErr.Convert` property which controls whether or not the\n  default StdErr logger converts messages from native narrow encoding to the\n  console code page. The default value is 1, meaning by default messages are\n  converted to the console code page encoding. The property is only used on\n  Windows.\n\n- Added `ice_staticId` to the ProxyHandle template.\n\n- Removed deprecated `Ice::Object::ice_getHash` function.\n\n## C# Changes\n\n- Fixed the Java IceSSL implementation to behave like the C++ and Java\n  implementation when `IceSSL.VerifyPeer=1` is set for servers. The server will\n  now request a certificate to the client and not abort the connection if the\n  client doesn't provide a certificate.\n\n- The default constructor for a Slice structure, exception or class now\n  initializes string, structure or enumerator data members. A string data member\n  is initialized to the empty string, a structure data member is initialized\n  with a new default-constructed structure, and an enumerator is initialized\n  with the first enumerator value.\n\n- Fixed a bug in the Slice-to-C# compiler that would generate invalid code if an\n  interface inherited a method that had an optional value as a return value.\n\n- Deprecated the `clr:collection` Slice metadata for sequences and dictionaries\n  as well as the `CollectionBase` and `DictionaryBase` classes.\n\n- Fixed a security vulnerability in IceSSL in which an untrusted self-signed CA\n  certificate was accepted.\n\n- Added `IceSSL.CertAuthFile` property, which allows you to specify a CA\n  certificate without having to import it into a certificate store.\n\n- Deprecated the `IceSSL.ImportCert` property. Certificates should be imported\n  using standard Windows tools.\n\n- Fixed a bug where under certain circumstances the thread pool could serialize\n  dispatch.\n\n- The `Ice.Communicator` type now implements `IDisposable`, which allows\n  communicator objects to be used as resources in `using()` statements.\n\n- Added the metadata tag `clr:implements:Base`, which adds the specified base\n  type to the generated code for a Slice structure, class or interface.\n\n- Most Slice data types now support .NET serialization, which allows Ice\n  exceptions to cross AppDomain boundaries. The only limitation is that data\n  members whose types are proxies cannot be serialized; these members will be\n  set to null after deserialization. Note that the `Ice.Optional` type now\n  implements `ISerializable` and the .NET serialization format in Ice 3.6 is\n  not backward-compatible with Ice 3.5.\n\n- It is now possible for users to provide a base class for a Slice-generated\n  class with .NET partial classes.\n\n- Fixed leak in C# transport. The leak occurred for each Ice connection.\n\n- Mono is no longer an officially-supported platform for Ice for .NET.\n\n## Java Changes\n\n- Fixed the Java IceSSL implementation to behave like the C++ and C#\n  implementation when `IceSSL.VerifyPeer=1` is set for servers. The server will\n  now reject the connection if the client provides a certificate and this\n  certificate can't be verified.\n\n- Passing null for a Slice structure or enumerator is now tolerated. Ice\n  marshals an empty structure or the first enumerator value.\n\n- The default constructor for a Slice structure, exception or class now\n  initializes string, structure or enumerator data members. A string data member\n  is initialized to the empty string, a structure data member is initialized\n  with a new default-constructed structure, and an enumerator is initialized\n  with the first enumerator value.\n\n- The `clone` method provided by Java classes generated from Slice definitions\n  is now returning the generated class, instead of `java.lang.Object`. For\n  example, the `Ice.Identity` class generated from the `Ice::Identity` Slice\n  structure contains:\n  ```\n  // Prior to Ice 3.6\n  public java.lang.Object clone() { ... }\n\n  // Starting with Ice 3.6\n  public Identity clone() { ... }\n  ```\n  This way, you typically no longer need to cast after cloning an Ice structure or other Ice object.\n\n- Added new Slice metadata `java:buffer` to enable the use of `java.nio.Buffer`\n  types in the generated code for sequences of byte, short, int, long, float and\n  double. For example, `sequence<byte>` maps to `java.nio.ByteBuffer` instead of\n  `byte[]`.\n\n- Changed the Ice core to allow applications to safely interrupt threads that\n  are calling Ice APIs. The new property `Ice.ThreadInterruptSafe` must be\n  enabled in order to use thread interrupts. Ice raises the new exception\n  `Ice.OperationInterruptedException` if an API call is interrupted.\n\n- Added support for Java 8.\n\n- Java 8 lambda expressions can be used as callbacks for asynchronous proxy\n  invocations.\n\n- Removed deprecated `IceUtil.Version` class.\n\n## JavaScript Changes\n\n- JavaScript is now an officially-supported language mapping.\n\n- Passing null for a Slice structure or enumerator is now tolerated. Ice\n  marshals an empty structure or the first enumerator value.\n\n- The default constructor for a Slice structure, exception or class now\n  initializes string, structure or enumerator data members. A string data member\n  is initialized to the empty string, a structure data member is initialized\n  with a new default-constructed structure, and an enumerator is initialized\n  with the first enumerator value.\n\n- Added the following methods to `AsyncResult` for consistency with the other\n  language mappings: `cancel`, `isCompleted`, `isSent`, `throwLocalException`,\n  `sentSynchronously`.\n\n- Changed the NodeJS packaging such that existing Ice for JavaScript programs\n  will need to modify their require statements. For example, to use Ice you\n  would now write:\n  `var Ice = require(\"icejs\").Ice;`\n\n## Objective-C Changes\n\n- The Objective-C headers are now installed under the `include/objc` directory.\n  You will need to change the `#import` in your code to import `objc/Ice.h`\n  where you were previously importing `Ice/Ice.h`. You will need to make similar\n  changes as well if you include headers for Ice services:\n  `IceStorm/IceStorm.h`, `IceGrid/IceGrid.h`, `Glacier2/Glacier2.h` should be\n  changed to `objc/IceStorm.h`, `objc/IceGrid.h`, `objc/Glacier2.h`\n  respectively.\n\n- The IceSSL types are no longer included with the `IceObjC` library. You should\n  now import `objc/IceSSL.h` in your source code and link with the `IceSSLObjC`\n  library if you need to use IceSSL types (`ICESSLEndpointInfo` and\n  `IceSSLConnectionInfo`).\n\n- The Ice run time local interfaces (such as `ICECommunicator`,\n  `ICEObjectAdapter`, etc.) are now generated from the Slice definitions.\n\n- Added support for the `[objc:param:ID]` metadata to allow changing the\n  generated identifier for the parameter in the generated interface selector for\n  a Slice operation. For example, the Slice operation\n  `void op(int a, [\"objc:param:withB\"] int b)` will be generated as the selector\n  `op:(int)a withB:(int)b`.\n\n- Added support for servant locators.\n\n- The default constructor for a Slice structure, exception or class now\n  initializes string, structure or enumerator data members. A string data member\n  is initialized to the empty string, a structure data member is initialized\n  with a new default-constructed structure, and an enumerator is initialized\n  with the first enumerator value.\n\n## PHP Changes\n\n- Passing null for a Slice structure is now tolerated, an empty structure will\n  be marshaled.\n\n- Added support for PHP 5.6.\n\n- Added `ice_staticId` to generated proxy helper classes.\n\n- Generated interfaces now extend the `Object` base interface.\n\n- Added `ObjectPrxHelper` class.\n\n## Python Changes\n\n- Passing `None` for a Slice structure is now tolerated, an empty structure will\n  be marshaled.\n\n- Added support for Python 3.4.\n\n- Changed the semantics of `Ice.Unset` so that it evaluates as false in a\n  boolean context.\n\n- Fixed a bug in the Slice-to-Python translator that eliminates the use of\n  implicit relative imports for nested Slice modules.\n\n- Added `ice_staticId` to generated proxy classes.\n\n## Ruby Changes\n\n- Passing null for a Slice structure is now tolerated, an empty structure will\n  be marshaled.\n\n- Added support for Ruby 2.1.\n\n- Added `ice_staticId` to generated proxy classes.\n"
        },
        {
          "name": "CHANGELOG-3.7.md",
          "type": "blob",
          "size": 55.203125,
          "content": "The entries below contain brief descriptions of the changes in each release, in no\nparticular order. Some of the entries reflect significant new additions, while\nothers represent minor corrections. Although this list is not a comprehensive\nreport of every change we made in a release, it does provide details on the\nchanges we feel Ice users might need to be aware of.\n\nWe recommend that you use the release notes as a guide for migrating your\napplications to this release, and the manual for complete details on a\nparticular aspect of Ice.\n\n- [Changes since Ice 3.7.10](#changes-since-ice-3710)\n  - [C++ Changes](#c-changes)\n  - [C# Changes](#c-changes)\n- [Changes in Ice 3.7.10](#changes-in-ice-3710)\n  - [C++ Changes](#c-changes)\n  - [C# Changes](#c-changes-1)\n  - [Java Changes](#java-changes)\n  - [Python Changes](#python-changes)\n- [Changes in Ice 3.7.9](#changes-in-ice-379)\n  - [C++ Changes](#c-changes-2)\n  - [C# Changes](#c-changes-3)\n  - [Java Changes](#java-changes-1)\n  - [PHP Changes](#php-changes)\n  - [Python Changes](#python-changes-1)\n  - [Ruby Changes](#ruby-changes)\n  - [Swift Changes](#swift-changes)\n- [Changes in Ice 3.7.8](#changes-in-ice-378)\n  - [C++ Changes](#c-changes-4)\n  - [JavaScript Changes](#javascript-changes)\n  - [MATLAB Changes](#matlab-changes)\n  - [PHP Changes](#php-changes-1)\n  - [Python Changes](#python-changes-2)\n- [Changes in Ice 3.7.7](#changes-in-ice-377)\n  - [C++ Changes](#c-changes-5)\n  - [Java Changes](#java-changes-2)\n- [Changes in Ice 3.7.6](#changes-in-ice-376)\n  - [General Changes](#general-changes)\n  - [C++ Changes](#c-changes-6)\n  - [Java Changes](#java-changes-3)\n  - [JavaScript Changes](#javascript-changes-1)\n  - [Swift Changes](#swift-changes-1)\n- [Changes in Ice 3.7.5](#changes-in-ice-375)\n  - [General Changes](#general-changes-1)\n  - [C++ Changes](#c-changes-7)\n  - [C# Changes](#c-changes-8)\n  - [JavaScript Changes](#javascript-changes-2)\n  - [PHP Changes](#php-changes-2)\n  - [Python Changes](#python-changes-3)\n  - [Ruby Changes](#ruby-changes-1)\n  - [Swift Changes](#swift-changes-2)\n- [Changes in Ice 3.7.4](#changes-in-ice-374)\n  - [General Changes](#general-changes-2)\n  - [C++ Changes](#c-changes-9)\n  - [C# Changes](#c-changes-10)\n  - [JavaScript Changes](#javascript-changes-3)\n  - [MATLAB Changes](#matlab-changes-1)\n  - [Python Changes](#python-changes-4)\n  - [Ruby Changes](#ruby-changes-2)\n  - [Swift Changes](#swift-changes-3)\n- [Changes in Ice 3.7.3](#changes-in-ice-373)\n  - [General Changes](#general-changes-3)\n  - [C++ Changes](#c-changes-11)\n  - [C# Changes](#c-changes-12)\n  - [Java Changes](#java-changes-4)\n  - [JavaScript Changes](#javascript-changes-4)\n  - [MATLAB Changes](#matlab-changes-2)\n  - [Python Changes](#python-changes-5)\n- [Changes in Ice 3.7.2](#changes-in-ice-372)\n  - [General Changes](#general-changes-4)\n  - [C++ Changes](#c-changes-13)\n  - [C# Changes](#c-changes-14)\n  - [Java Changes](#java-changes-5)\n  - [JavaScript Changes](#javascript-changes-5)\n  - [MATLAB Changes](#matlab-changes-3)\n  - [Objective-C Changes](#objective-c-changes)\n  - [PHP Changes](#php-changes-3)\n  - [Python Changes](#python-changes-6)\n- [Changes in Ice 3.7.1](#changes-in-ice-371)\n  - [General Changes](#general-changes-5)\n  - [C++ Changes](#c-changes-15)\n  - [C# Changes](#c-changes-16)\n  - [Java Changes](#java-changes-6)\n  - [JavaScript Changes](#javascript-changes-6)\n  - [MATLAB Changes](#matlab-changes-4)\n  - [Objective-C Changes](#objective-c-changes-1)\n  - [PHP Changes](#php-changes-4)\n  - [Python Changes](#python-changes-7)\n  - [Ruby Changes](#ruby-changes-3)\n- [Changes in Ice 3.7.0](#changes-in-ice-370)\n  - [General Changes](#general-changes-6)\n  - [C++ Changes](#c-changes-17)\n  - [C# Changes](#c-changes-18)\n  - [Java Changes](#java-changes-7)\n  - [JavaScript Changes](#javascript-changes-7)\n  - [Objective-C Changes](#objective-c-changes-2)\n  - [PHP Changes](#php-changes-5)\n  - [Python Changes](#python-changes-8)\n  - [Ruby Changes](#ruby-changes-4)\n\n# Changes since Ice 3.7.10\n\n## C++ Changes\n\n- Fix bug with the Ice.ServerIdleTime affecting Apple platforms. (https://github.com/zeroc-ice/ice/issues/2025)\n\n## C# Changes\n\n- Fixed bug in the Ice for C# connection code. A connection no longer reads messages off the network when its\n  associated thread-pool has no thread available to process these messages. As a result, back-pressure now works in\n  Ice for C# just like in other language mappings.\n\n# Changes in Ice 3.7.10\n\nThese are the major changes since Ice 3.7.9.\n\n## C++ Changes\n\n- Fixed failures building from source with G++ 13. (https://github.com/zeroc-ice/ice/issues/1489)\n\n- Removed UWP support. (https://github.com/zeroc-ice/ice/issues/1503)\n\n## C# Changes\n\n- Fixed generated code to be compatible with .NET 8. (https://github.com/zeroc-ice/ice/issues/1548)\n\n## Java Changes\n\n- Added support for JDK 21.\n\n- Fixed the generated Java code to ensure constructor parameters don't exceed JDK limits.\n  (https://github.com/zeroc-ice/ice/issues/1540)\n\n## Python Changes\n\n- Added support for Python 3.12. (https://github.com/zeroc-ice/ice/issues/1558)\n\n# Changes in Ice 3.7.9\n\nThese are the major changes since Ice 3.7.8.\n\n## C++ Changes\n\n- Various fixes for compatibility with the latest compilers.\n\n- Fixed an IceSSL bug where the OpenSSL error description was not correctly included with the `Ice::ProtocolException`\n  thrown when a read failure occurred. OpenSSL versions previous to `1.1.1e` are not affected.\n\n## C# Changes\n\n- Added support for .NET 7.\n\n## Java Changes\n\n- Fixed an IceGridGUI bug that resulted in a null pointer exception when resolving a named property set failed.\n\n## PHP Changes\n\n- Added support for PHP 8.2.\n\n- `slice2php` will now generate code compatible with PHP >= 7 by default. To generate PHP 5 compatible code, use the\n  new `--php5` flag.\n\n## Python Changes\n\n- Added support for Python 3.11.\n\n## Ruby Changes\n\n- Added support for Ruby 3.2.\n\n## Swift Changes\n\n- Added support for Xcode 14.2.\n\n# Changes in Ice 3.7.8\n\nThese are the changes since Ice 3.7.7.\n\n## C++ Changes\n\n- Fixed the list of C++ keywords the compiler checks Slice identifiers against.\n\n## JavaScript Changes\n\n- Updated the JavaScript NPM module to be compatible with browser applications, with this change applications\n  targeting the web browser can use the NPM module with a bundler that supports CommonJS modules, like Vite, Rollup\n  or WebPack.\n\n- Added JavaScript module metadata \"js:cjs-module\" that maps a JavaScript module to a CommonJS module.\n\n## MATLAB Changes\n\n- Added Linux support for MATLAB language mapping.\n\n- Performance improvements.\n\n## PHP Changes\n\n- Fix a bug that result in a warning when calling Ice\\\\createProperties with no arguments.\nSee https://github.com/zeroc-ice/ice/issues/1384\n\n## Python Changes\n\n- Optional parameters declared after all required parameters now use `Ice.Unset` as the default value.\n\n# Changes in Ice 3.7.7\n\nThese are the changes since Ice 3.7.6.\n\n## C++ Changes\n\n- Fix binary compatibility regression introduced in 3.7.6.\n\n- Added support for SSL certificate revocation checks.\n\n- Added `getKeyUsage` and `getExtendedKeyUsage` methods to `IceSSL::Certificate` to allow\n  retrieving the values of the \"Key Usage\" and \"Extended Key Usage\" extensions of an X509\n  certificate.\n\n- Undeprecate `IceSSL.KeyFile` property.\n\n- Added MSBuild target that copy the Ice DLL and PDB files to the projects output directory.\n  The target can be enabled by setting MSbuild property `Ice_CopyDLLs` to `Yes` in the project.\n\n- The iOS transports were updated to ensure potential deadlocks are not\n  possible when using the CFStream/NSStream APIs. Such a deadlock could\n  be reproduced with the iAP transport implementation.\n\n## Java Changes\n\n- Updated IceGrid GUI to include the registry instance name in the window title\n\n# Changes in Ice 3.7.6\n\nThese are the changes since Ice 3.7.5.\n\n## General Changes\n\n- Added support for Apple Silicon.\n\n## C++ Changes\n\n- Added `IceSSL::TrustError` enumerator and `IceSSL::getTrustError` function to allow getting the reason for a trust\n  failure from `IceSSL::ConnectionInfo`. To get the description of a `IceSSL::TrustError` pass it to\n  `IceSSL::getTrustErrorDescription`.\n\n- Added `IceSSL::getHost` function to allow retrieving the host that was used to create an SSL connection from\n  the `IceSSL::ConnectionInfo` object. The returned host corresponds to the `Endpoint::host` member of the endpoint\n  that was used to create the connection.\n\n- Fixed a bug in `IceSSL` that would result in a partial chain when the intermediate CA certificates were not installed\n  in the client certificate store and were provided by the peer. This only affects the Windows Schannel implementation.\n\n- Fixed a bug in `IceUtil::Time::toString` that gave bogus results when the microsecond representation of `IceUtil::Time`\n  didn't fit in a 32 bit word. Thanks Fabio Osorio for reporting this issue [#1283](https://github.com/zeroc-ice/ice/issues/1283).\n\n- The C++11 mapping builds now use the compiler's default C++ mode when the compiler's default mode is greater than or equal to the\n  required C++11 mode.\n\n- Fixed a bug in IceStorm tracing where the subscribers collection was not locked while it was being traced and could be modified\n  concurrently. Thanks to Bill Stoffel for reporting the issue and creating a pull request [#1259](https://github.com/zeroc-ice/ice/pull/1259).\n\n## Java Changes\n\n- Fixed a race condition in the IceBT transport for Android that could result in a `NullPointerException`. Thanks Marco Pfattner for\n  reporting this issue [#1262](https://github.com/zeroc-ice/ice/issues/1262).\n\n## JavaScript Changes\n\n- Fixed a bug in the JavaScript mapping where reading interface by value arguments could result in `Ice.UnexpectedObjectException` during\n  unmarshaling.\n\n## Swift Changes\n\n- Added support for XCFrameworks. Carthage package users should now use XCFrameworks, see carthage update instructions.\n\n# Changes in Ice 3.7.5\n\nThese are the changes since Ice 3.7.4.\n\n## General Changes\n\n- Add support for detection of class cycles during unmarshaling in\n  languages which do not have garbage collection: C++, Swift, and Objective-C.\n  A `MarshalException` is thrown when a cycle is detected.\n\n  The property `Ice.AcceptClassCycles` can be set to a value greater than `0`\n  to change this behavior.\n\n- Add support for readline in `icegridadmin` and `icestormadmin`, this feature is only supported\n  with macOS and Linux platforms.\n\n- Fixed IceGridGUI bug where service metrics were missing [#1203](https://github.com/zeroc-ice/ice/issues/1203)\n\n- Fixed a bug in the marshaling of exceptions optional data members, that affects Swift and C# mappings,\n  other language mappings where not affected. See [#889](https://github.com/zeroc-ice/ice/issues/889)\n\n## C++ Changes\n\n- string literals using the narrow string mapping are no longer map to u8 string literals, instead\n  they are map to a regular string with unicode characters encoded in utf-8 using octal escape\n  sequences.\n\n## C# Changes\n\n- Fixed dispatch warnings and unknown exceptions to report the original exception raised by\n  the servant implementation.\n\n- Add .NET 5.0 support, Ice for C# assemblies are now build for .NET 5.0, .NET Standard 2.1 and .NET 4.5.\n\n- Fixed a bug that can result in the file logger log files not correctly close.\n\n- Fixed slice2cs to disable FxCop warnings in the generated code, some generated methods didn't include\n  the required attributes to disable FxCop warnings.\n\n## JavaScript Changes\n\n- Add default constructor for Promise derived objects, this works around problems with\n  JavaScript frameworks that don't support Symbol.species with their Promise implementations.\n\n- Fix JavaScript OutputStream to better handle undefined values, see [#1170](https://github.com/zeroc-ice/ice/pull/1188)\n\n## PHP Changes\n\n- Add support for PHP 8.0\n\n## Python Changes\n\n- Fix Python 3.9 build failures\n\n## Ruby Changes\n\n- Fix a bug that can result in a segmentation fault when unmarshal a dictionary\n  with a class value type see [#1220](https://github.com/zeroc-ice/ice/pull/1220)\n\n- Fix a bug that can result in a segmentation fault when unmarshal an exception\n  with a class data member see [#1224](https://github.com/zeroc-ice/ice/issues/1224)\n\n## Swift Changes\n\n- Fix Xcode 12 build failures\n\n# Changes in Ice 3.7.4\n\nThese are the changes since Ice 3.7.3.\n\n## General Changes\n\n- Fixed bug that would cause certificate verification failure on macOS Catalina\n  and iOS 13 when using SecureTransport and with `IceSSL.CheckCertName` property\n  is set to a value greater than `0`. This only affects certificates generated\n  after July 1, 2019.\n\n- Fixed bug in Glacier2 session helper classes that could cause an unhandled\n  `CommunicatorDestroyedException` [#744](https://github.com/zeroc-ice/ice/issues/744).\n\n## C++ Changes\n\n- Fixed a bug that causes a build failure when using OpenSSL < 1.0.2. Thanks to\n  @Harvey-Liu for the pull request [#801](https://github.com/zeroc-ice/ice/issues/801).\n\n- Fixed build failures with clang when building with C++ 17 mode.\n\n- Fixed nodiscard warnings reported by Visual Studio 2019 (16.4.0).\n\n## C# Changes\n\n- Update .NET Core build to use .Net Core 3.1.\n\n- Fixed a bug that causes TCPEndpoint `--sourceAddress` to be ignored by C#.\n\n## JavaScript Changes\n\n- Added `js:defined-in:` metadata for forward defined types, this metadata is\n  required to generate the correct JavaScript import statements for forward defined\n  types. [#633](https://github.com/zeroc-ice/ice/issues/633).\n\n## MATLAB Changes\n\n- Fixed a bug in slice2matlab that will result in invalid code generated for local\n  Slice interfaces.\n\n## Python Changes\n\n- Fixed Python 3.8 build failures caused by bogus ldflags set with python-config.\n\n## Ruby Changes\n\n- Add support for Ruby 2.7.\n\n## Swift Changes\n\n- Add support for Swift 5.2.\n\n# Changes in Ice 3.7.3\n\nThese are the changes since Ice 3.7.2.\n\n## General Changes\n\n- Fixed Slice compilers to allow forward declared interfaces and classes that\n  are marshaled or unmarshaled in a Slice file without being fully defined in\n  that Slice file. This was allowed (but not documented) in Ice 3.6 and earlier\n  releases, and disallowed in Ice 3.7.0 - Ice 3.7.2.\n\n- Added `ice_isFixed` proxy method to test whether a proxy is a fixed proxy\n  or not.\n\n- Fixed a retry bug occurring with invocations made on proxies configured with\n  the backward compatible invocation timeout -2. The invocation failed instead\n  of being retried.\n\n- Added support to enable SNI (Server Name Indication) in outgoing SSL/TLS\n  connections. The SNI TLS extension is enabled by setting\n  `IceSSL.CheckCertName` to `2`.\n\n  This new value for `IceSSL.CheckCertName` is useful with OpenSSL,\n  SecureTransport and Java; these implementations did not send the SNI extension\n  before. The C# and SChannel implementations always send the SNI extension. The\n  Java-Compat mapping does not support SNI. Thanks to @AndiDog for the pull\n  request: https://github.com/zeroc-ice/ice/pull/482\n\n- Fixed a bug in the conversion of endpoints to strings: the colon character\n  was not escaped in the `--sourceAddress` and `--interface` endpoint options.\n\n- Fixed IceGrid issue which could cause hangs if an IceGrid node became\n  unreachable and a client either tried to get adapter endpoints with\n  `IceGrid::Admin::getAdapterInfo` or called `IceGrid::Query::findAllReplicas`.\n\n- Fixed IceGrid issue where gracefully interrupted IceGrid nodes wouldn't notify\n  observers of the deactivation of its servers.\n\n- Fixed bug where the `IceGrid.Registry.CryptPasswords` or\n  `IceGrid.Registry.AdminCryptPasswords` properties were ignored if the IceGrid\n  registry was collocated with the IceGrid node executable using the\n  `IceGrid.Node.CollocateRegistry` property.\n\n- Fixed IceGrid node bug where the setting of supplementary groups would fail\n  if the user had more than NGROUPS_MAX groups.\n\n- Fixed IceGrid node bug where the setting of supplementary groups for a server\n  ran as a given user was incorrect when running the IceGrid node as root. The\n  server would be ran with the root/wheel supplementary group.\n\n- Fixed a bug in IceGrid node that could result in an infinite loop when\n  the system call to `getpwuid_r` fails with `ERANGE`.\n\n- Removed IceStorm restriction where `retryCount` could only be used with\n  two-way proxies. It's now possible to use it with one-way or batch proxies.\n\n## C++ Changes\n\n- Added new metadata directive `cpp:source-include`, to include a header file in\n  the generated source (.cpp) file.\n\n- Fixed build failures on Linux ppc64el due to `__linux` macro not being defined\n  in C++11 mode. Switched to `__linux__` macro.\n\n- Added support for Visual Studio 2019.\n\n- Fixed GCC 9 build failures.\n\n- Added support for AIX 7.2 with the IBM XL C/C++ 16.1 compiler (C++98 only).\n\n- Fixed a bug in IceSSL that could result in `IceSSL::ConnectionInfo` not having\n  the `verified` data member set to `false` when the certificate hostname\n  verification failed. This affected IceSSL based on OpenSSL < 1.0.2 and\n  SChannel.\n\n- Fixed IceSSL to ignore hostname verification errors when `IceSSL.VerifyPeer`\n  is set to 0. This affected IceSSL based on OpenSSL >= 1.0.2.\n\n## C# Changes\n\n- Added back support for caching the output stream used to marshal the response\n  of a synchronous dispatch.\n\n- Fixed C# to not require unsafe code. `AllowUnsafeBlocks` is not longer set\n  when building Ice for C#.\n\n- Fixed loading of Bzip2 native libraries on Linux to fallback to libbz2.so.1\n  if libbz2.so.1.0 doesn't exists.\n\n- Fixed IceSSL to ignore hostname verification errors when `IceSSL.VerifyPeer`\n  is set to 0.\n\n## Java Changes\n\n- Added back support for caching the output stream used to marshal the response\n  of a synchronous dispatch.\n\n- Added support to build Ice as modular JAR files. This is automatically done\n  when building Ice for Java with JDK 9 or greater. The resulting JARs are\n  compatible with JDK 8.\n\n## JavaScript Changes\n\n- Fixed a bug in the IP endpoint initialization. The default value for the port\n  was `null` instead of `0`.\n\n## MATLAB Changes\n\n- Added support for the `Ice.ClassGraphDepthMax` property to prevent a stack\n  overflow in case a sender sends a very large graph. This was already\n  supported with other language mappings but it was missing in MATLAB.\n\n- Fixed a bug in the `ice_isA` implementation that resulted in `ice_isA` throwing\n  `FacetNotExistException` when it should return null.\n\n## Python Changes\n\n- Fixed a bug where using an optional data member with the `python:numpy.ndarray`\n  sequence mapping could result in a segmentation fault of the python interpreter.\n\n- Fixed a bug where using an empty sequence with a type that uses the Python buffer\n  protocol could result in an assert if running with a python debug build.\n\n# Changes in Ice 3.7.2\n\nThese are the changes since Ice 3.7.1.\n\n## General Changes\n\n- Add support for TLS 1.3 to IceSSL.\n\n- Add support for reading Ice properties from the HKCU Windows registry hive.\n  Previously you could only read properties from the HKLM Windows registry hive.\n\n## C++ Changes\n\n- Fixed bug where Ice thread pools would print an invalid and harmless \"low on\n  threads\" warning message when the thread pool was destroyed and if the number\n  of threads in the thread pool was superior or equal to the SizeWarn property.\n\n- Fixed a bug where the callback set with the `IceUtil::CtrlCHandler` was not\n  cleared on destruction of the `CtrlCHandler` object. Variables captured by the\n  callback were therefore not released until static destruction. This fix\n  ensures that the destruction of the `CtrlCHandler` object clears the\n  callback.\n\n- Fixed a debug assert in the Windows SChannel IceSSL implementation which would\n  occur in rare circumstances where SChannel returned `SEC_E_INCOMPLETE_MESSAGE`\n  with a `cbBuffer` value of 0. This occurred when running the JavaScript tests\n  with Firefox and using a C++ debug build.\n\n- Fixed a bug in the syslog logger that caused the program name to not be correctly\n  displayed with log messages.\n\n- Fixed an IceStorm bug that prevented topics from being restored from the database\n  when there was multiple topics.\n\n- Added support for systemd `Type=Notify` to `Ice::Service`. Services\n  started without the `--daemon` command-line option send notifications\n  to systemd using the `sd_notify` API.\n\n- Added systemd journal logger. This logger is enabled by setting the\n  `Ice.UseSystemdJournal` property to a value of 1 or greater.\n\n- Fixed memory leak in the Ice iAP transport where the `EASession` object wasn't\n  correctly released. Thanks to @astreube on GitHub for reporting this bug and\n  suggesting a fix.\n\n- Fixed a bug in the Windows build system that disabled wildcard expansion for\n  Slice compiler command line arguments.\n\n- Fixed a bug in the code that parses command line options that caused short command\n  line options to be incorrectly parsed when multiple short command line options\n  are specified together.\n\n- Fixed a bug in IceGrid that could result in an infinite loop when `Ice.ChangeUser` is\n  set and the call to `getpwnam_r` fails with `ERANGE`.\n\n- Fixed SChannel initialization to use a global mutex to avoid crashes occurring with\n  latest SChannel updates. See: https://github.com/zeroc-ice/ice/issues/242\n\n- Add support to build Ice in C++17 mode.\n\n- Add support for ARM builds with RHELP and CentOS.\n\n- Allow users to configure the adapter created by `icegridadmin` when run in server mode.\n  Thanks to Michael Dorner for the pull request: https://github.com/zeroc-ice/ice/pull/58\n\n## C# Changes\n\n- Fixed metrics bug where remote invocations for `flushBatchRequests` weren't\n  counted.\n\n- Add ability to build .NET Core assemblies with strong name.\n\n- Add Android, iOS and UWP platform support to Ice for .NET Core. The Ice test\n  suite now works with Xamarin and runs on Android, iOS and UWP.\n\n- Fixed marshaling code: removed unsafe code used in ByteBuffer that was\n  causing problems with mono on Android.\n\n- Fixed a bug in `slice2cs` that could result in generated code using\n  invalid namespace qualification for a type.\n  See: https://github.com/zeroc-ice/ice/issues/122\n\n- Removed dependency on the Ice Builder Visual Studio Extension for C# source builds.\n\n- You can now map Slice modules to custom C# namespaces using the `cs:namespace`\n  metadata directive.\n\n## Java Changes\n\n- Fixed bug where Ice thread pools would print an invalid and harmless \"low on\n  threads\" warning message when the thread pool was destroyed and if the number\n  of threads in the thread pool was superior or equal to the SizeWarn property.\n\n- Fixed Android IceSSL issue that caused SSL connections to hang\n  with Android >= 8.0.\n\n- Fixed metrics bug where remote invocations for `flushBatchRequests` weren't\n  counted.\n\n- Improved Javadoc support for the Java mapping (and not Java-Compat). Internal\n  classes and methods with public or protected visibility are now excluded or\n  tagged `@hidden`. Since `@hidden` requires javadoc 9 or greater, javadoc is no\n  longer generated with javadoc 8.\n  The new Gradle target `alljavadoc` generates a complete API reference for all\n  Ice components (Ice, IceSSL, IceGrid, IceStorm, Glacier2, etc.).\n\n- IceGrid GUI settings are now stored in the operating system application data\n  directory `%LOCALAPPDATA%/ZeroC` for Windows, `~/Library/Application Support/ZeroC`\n  for macOS and `~/.ZeroC` for Linux. Previous settings are automatically migrated to the\n  new location without user intervention.\n\n- Add support to build IceGrid GUI with OpenJFX and Java 11 JDK.\n\n- Fixed a bug in the IceGrid GUI that could cause IceGrid GUI to hang after a login\n  failure.\n\n## JavaScript Changes\n\n- Add TypeScript declaration files for Ice for JavaScript.\n\n- The Slice to JavaScript compiler can now generate TypeScript declaration files\n  for JavaScript generated code using the `--typescript` command line option.\n\n- Fixed generated code for sequences of interface by value types. The generated\n  sequence helper must use `Ice.Value` as the element type for the sequence\n  and not a class with the name of the interface when the element type is an\n  interface by value.\n\n- Add missing `OutputStream.writeException` method.\n\n- Update JavaScript build system to Babel 7 and gulp 4.0. Support for building\n  Ice for JavaScript with NodeJS 4 and NodeJS 5 has been removed.\n\n- Fixed a bug in Slice-to-JavaScript compiler that resulted in incorrect generated\n  code for classes containing a data member of type `Value`. Thanks to Daniel Lytkin\n  for the bug report and fix. See https://github.com/zeroc-ice/ice/pull/203\n\n## MATLAB Changes\n\n- Fixed a bug that caused the code generated by `slice2matlab` to throw a type\n  conversion exception. This affected classes or structs containing a dictionary\n  mapped to a structure array.\n\n- Add support for `IceSSL::ConnectionInfo`.\n\n## Objective-C Changes\n\n- Fixed a bug in Slice-to-Objective-C compiler that resulted in incorrect generated\n  code for classes containing a data member of type `Value`.\n\n## PHP Changes\n\n- Fixed build failure when building with the Debug configuration on Windows.\n\n- Fixed a bug that caused the generated code to reference undefined variables\n  when included (using `require` or `require_once`) from a static method.\n\n## Python Changes\n\n- Add support for unmarshaling sequences of basic types using the [buffer\n  protocol][1]. This can be enabled using the metadata `python:array.array`,\n  `python:numpy.ndarray` or `python:memoryview:<factory>`. The first two enable\n  mapping to the `array.array` and `numpy.ndarray` types respectively and the\n  last one allows to specify a custom Python factory function responsible for\n  creating the sequence from a `memoryview` object.\n\n- Add `python:default`, `python:list` and `python:tuple` metadata which are\n  equivalent to `python:seq:default`, `python:seq:list` and `python:seq:tuple`\n  respectively.\n\n- Fixed Python segfault that could occur because of a KeyboardInterrupt.\n\n- Add support to build Ice for Python using Python 3.7.\n\n# Changes in Ice 3.7.1\n\nThese are the changes since Ice 3.7.0.\n\n## General Changes\n\n- Fixed UDP multicast issue where adding multicast membership on all the\n  available network interfaces on the host would fail with an \"Address already\n  in use\" error if the host had network interfaces with multiple IPv4 addresses\n  or different interfaces using the same IP address.\n\n- Improved `Ice::ObjectAdapter` `getPublishedEndpoints` and\n  `refreshPublishedEndpoints` methods to now return or refresh the Ice router\n  server endpoints if the adapter is associated with a router. Calling the\n  `setPublishedEndpoints` method on an adapter associated with a router also now\n  raises an invalid argument exception.\n\n- Added tracing support for IceGrid and locator discovery. The IceGrid registry\n  supports the `IceGrid.Registry.Trace.Discovery` property and the\n  `IceLocatorDiscovery` plug-in supports `IceLocatorDiscovery.Trace.Lookup` to\n  trace lookup requests.\n\n- Instead of succeeding, `Ice::Connection::setAdapter` now raises\n  `Ice.ObjectAdapterDeactivatedException` if the adapter is deactivated.\n\n- Fixed bug where the `IceGrid.Registry.Client.ACM.Timeout` property setting\n  was ignored.\n\n- Added the ice_fixed proxy method to create a fixed proxy bound to a given\n  connection.\n\n- Added the ice_getTimeout and ice_getCompress proxy methods. These methods\n  return an optional value that contains the proxy timeout or compression\n  override setting. If the timeout or the compression setting haven't been\n  overridden with ice_timeout or ice_compress, the optional value is unset.\n\n- Fixed IceGrid node bug where a replica would not get up-to-date object\n  adapter information about a server if an update was pending for the\n  server. Thanks to Michael Gmelin for the bug report and fix.\n\n- Fixed IceGrid registry to no longer allow dynamic registration of a replica\n  group if this replica group is already registered with the deployment\n  facility. Registration was previously allowed but the dynamically registered\n  adapter members of the replica group were never used.\n\n- IceBridge can now be configured as a router in a client's object adapter,\n  which means the Ice run time in the client will automatically set up a\n  bidirectional connection.\n\n## C++ Changes\n\n- Fixed a Windows bug with the WS transport where at-most-once semantics weren't\n  always enforced causing invalid invocation retries on failures.\n\n- Added the \"cpp:noexcept\" metadata to operations in several local Slice\n  interfaces, including Communicator, Connection, and ObjectAdapter.\n  This helps to clarify that these operations do not raise exceptions.\n\n- Slice documentation comments are now preserved in the generated C++ code\n  using Doxygen markup.\n\n## C# Changes\n\n- Disabled Windows fast path loopback socket option. This option was\n  already disabled with the C++ mapping. It's causing hangs at the\n  TCP/IP level when connections are closed.\n\n- Added support for .NET Core 2.0 on Windows and Linux.\n\n- Added the ice_initialize partial method to generated structs and classes.\n  This method is called by constructors after initialization of the data\n  members. By implementing this method users can customize struct and\n  class initialization.\n\n## Java Changes\n\n- The java:package metadata can now be applied to modules. It can still\n  be used as file metadata, in which case it serves as the default\n  directive unless overridden by module metadata.\n\n## JavaScript Changes\n\n- Updated the generated code for compatibility with WebPack.\n\n## MATLAB Changes\n\n- Added a MATLAB language mapping. It provides a client-side run time and\n  supports MATLAB versions R2016a through R2018a on Windows.\n\n## Objective-C Changes\n\n- Fixed the generated code to specify the `__autoreleasing` qualifier on\n  parameters returned by reference. Xcode 9.0 now emits a warning if this\n  qualifier is omitted.\n\n## PHP Changes\n\n- Fixed Ice for PHP build failure when building with PHP5 ZTS.\n\n## Python Changes\n\n- The python:package metadata can now be applied to modules. It can still\n  be used as file metadata, in which case it serves as the default\n  directive unless overridden by module metadata.\n\n- Fixed a bug that caused Python to crash on exit when the extension is\n  built with GCC 7.\n\n## Ruby Changes\n\n- Ice::initialize now accepts an implicit block. If provided, initialize\n  will pass the communicator (and optionally the argument vector) to the\n  block, destroy the communicator upon the block's completion, and return\n  the block's result as the result of initialize.\n\n# Changes in Ice 3.7.0\n\nThese are the changes since the Ice 3.6 release or snapshot described in\n[CHANGELOG-3.6.md](./CHANGELOG-3.6.md).\n\n## General Changes\n\n- Added `ice_getSlicedData` method to the `Value` and `UserException` base\n  classes. This method can be used to obtain the sliced data when available.\n\n- Fixed IceGrid inconsistency when resolving dynamically registered replica\n  group endpoints. Like for replica group registered with descriptors, if the\n  replica group members don't support the encoding requested by the client, the\n  client will raise `Ice::NoEndpointException` instead of\n  `Ice::NotRegisteredException`.\n\n- Defining operations on non-local classes is now deprecated: operations should\n  be defined only on interfaces and local classes. Likewise, having a class\n  implement an interface, passing a class by proxy and passing an interface by\n  value are now deprecated.\n\n- Added new Slice keyword `Value`. All Slice classes implicitly derive from the\n  `Value` class, and a parameter of type `Value` can represent any class\n  instance. In prior release, the base class for Slice classes was `Object`,\n  and for non-local definitions, `Object` remains a synonym for `Value`.\n  (However, `Value*` is invalid: it cannot be used as a synonym for `Object*`).\n  For local definitions, `Object` designates a servant while `Value`\n  designates a class instance.\n\n- Semicolons are now optional after braces in Slice definitions. For example\n  ```\n  module M\n  {\n      enum { A, B, C , D }\n\n      interface Intf\n      {\n          void op();\n      }\n  }\n  ```\n  is equivalent to\n  ```\n  module M\n  {\n      enum { A, B, C , D };\n\n      interface Intf\n      {\n          void op();\n      };\n  };\n  ```\n\n- The server run time will now bind to all the addresses associated with a DNS\n  name specified in an endpoint of the object adapter (with the endpoint -h\n  option). You must make sure the DNS name resolves to local addresses only.\n\n  If no `PublishedEndpoints` property is specified for the object adapter, the\n  published endpoints for an endpoint with a DNS name will either be, if the\n  endpoint doesn't specifies a fixed port, a list of endpoints with each of\n  the addresses associated with the DNS name or, if it specifies a fixed port,\n  the endpoint with the DNS name.\n\n- Added the IceBridge service, which acts as a bridge between a client and\n  server to relay requests and replies in both directions.\n\n- Added new operation metadata, `marshaled-result`, in C++11, C#, Java,\n  and Python. When this metadata is specified, the generated code for the\n  servant dispatch returns a generated struct that contains the marshaled\n  values for the return and out parameters.\n\n- A Slice enumeration (enum) now creates a new namespace scope for its\n  enumerators. In previous releases, the enumerators were in the same\n  namespace scope as the enumeration. For example:\n  ```\n     enum Fruit { Apple, Orange, Pear }\n     enum ComputerBrands { Apple, Dell, HP } // Ok as of Ice 3.7, error in\n                                              // prior releases\n  ```\n  The mapping of enum to C++, C#, Java etc. is not affected by this\n  change. Slice constants and data member default values that reference\n  enumerators should be updated to use only the enumerator's name when the\n  enclosing enum is in a different module. For example:\n  ```\n  module M1\n  {\n      enum Fruit { Apple, Orange, Pear }\n      enum ComputerBrands { Apple, Dell, HP }\n\n      const Fruit a = Apple; // Recommended syntax for all Ice releases\n  }\n\n  module M2\n  {\n      const M1::Fruit a1 = Apple;             // The recommended syntax as of\n                                              // Ice 3.7\n      const M1::Fruit a2 = M1::Fruit::Apple;  // Ok as well\n      const M1::Fruit a3 = M1::Apple;         // Supported for backwards\n                                              // compatibility with earlier\n                                              // Ice releases\n  }\n\n  ```\n\n- Added Bluetooth transport plug-in for C++ and Android. The C++ plug-in\n  requires BlueZ 5.40 or later.\n\n- Added support for iAP transport to allow iOS clients to communicate with\n  connected accessories.\n\n- Added new overloads to `Ice::initialize` in C++11, C++98, C#, Java,\n  Java Compat, Python and Ruby. They accept a `configFile` string parameter as\n  an alternative to the `InitializationData` parameter of several existing\n  `Ice::initialize` overloads.\n\n- Added support for a new `Ice.ClassGraphDepthMax` property to prevent stack\n  overflows in case a sender sends a very large graph.\n\n  The unmarshaling or destruction of a graph of Slice class instances is a\n  recursive operation. This property limits the amount of stack size required to\n  perform these operations. This property is supported with all the language\n  mappings except Java and JavaScript where it's not needed (the run time\n  environment allows graceful handling of stack overflows).\n\n  The default maximum class graph depth is 100. If you increase this value, you\n  must ensure the thread pool stack size is large enough to allow reading graphs\n  without causing a stack overflow.\n\n- Minor change to the network and retry tracing. Connection establishment\n  attempts on endpoints are no longer traced with Ice.Trace.Retry. They are\n  now traced when Ice.Trace.Network is set to 2.\n\n- Renamed ACM heartbeat enumerator `HeartbeatOnInvocation` to\n  `HeartbeatOnDispatch`.\n\n- Added `Ice::ObjectAdapter::setPublishedEndpoints` to allow updating the\n  published endpoints programmatically.\n\n- Added new `ice_id` method or member function to all Ice exceptions; `ice_id`\n  returns the Slice type ID of the exception. It replaces the now deprecated\n  `ice_name` method or member function.\n\n- Added `Ice::Connection::throwException`. When the connection is closed, this\n  method throws an exception indicating the reason of the connection closure.\n\n- Changed the Slice definition of the `Connection::close` operation to take an\n  enumerator instead of a boolean. The new enumeration, `ConnectionClose`,\n  defines three enumerators for controlling how the connection is closed:\n\n  - `Forcefully` - Closes the connection immediately. Equivalent to the boolean\n  value true in previous releases.\n\n  - `Gracefully` - Closes the connection gracefully without waiting for pending\n  invocations to complete.\n\n  - `GracefullyWithWait` - Closes the connection gracefully after all pending\n  invocations have completed. Equivalent to the boolean value false in previous\n  releases.\n\n  The `Ice::ForcedCloseConnectionException` exception has also been replaced\n  with `Ice::ConnectionManuallyClosedException`. This exception is set on the\n  connection when `Connection::close` is called.\n\n- Added support for IceStorm subscriber `locatorCacheTimeout` and\n  `connectionCached` QoS settings. These settings match the proxy settings and\n  allow configuring per-request load balancing on the subscriber proxy.\n\n- Implementations of the `Ice::Router` interface can now indicate whether or not\n  they support a routing table through the optional out parameter\n  `hasRoutingTable` of the `getClientProxy` operation. The Ice run time won't\n  call the `addProxies` operation if the router implementation indicates that it\n  doesn't manage a routing table.\n\n- The `findObjectByType`, `findAllObjectsByType`,\n  `findObjectByTypeOnLeastLoadedNode` operations from the `IceGrid::Query`\n  interface and the `allocateObjectByType` operation from the `IceGrid::Session`\n  interfaces now only return proxies for Ice objects from enabled servers. If a\n  server is disabled, its well-known or allocatable Ice objects won't be\n  returned anymore to clients.\n\n- The Communicator and Connection `flushBatchRequests` operations now require\n  an argument to specify whether or not the batch requests to flush should be\n  compressed. See the documentation of the `Ice::CompressBatch` enumeration\n  for the different options available to specify when the batch should be\n  compressed.\n\n- The UDP server endpoint now supports specifying `--interface *` to join the\n  multicast group using all the local interfaces. It's also now the default\n  behavior if no `--interface` option is specified.\n\n- Ice no longer halts a program if it can't accept new incoming connections when\n  the system runs out of file descriptors. Instead, it rejects queued pending\n  connections and temporarily stops accepting new connections. An error message\n  is also sent to the Ice logger.\n\n- Dispatch interceptors and `ice_dispatch` can now catch user exceptions. User\n  exceptions raised by a servant dispatch are propagated to `ice_dispatch` and\n  may be raised by the implementation of `Ice::DispatchInterceptor::dispatch`.\n  As a result, the `Ice::DispatchStatus` enumeration has been removed. See the\n  Ice Manual for details on the new dispatch interceptor API.\n\n- The `ice_getConnection` operation now correctly returns a connection if\n  connection caching is disabled (it previously returned a null connection).\n\n- The iOS SSL transport is now based on the same implementation as macOS. Most\n  of the functionality supported on macOS is now also supported on iOS. There\n  are still few limitations however:\n\n  - the `checkValidity`, `getNotBefore`, `getNotAfter` methods are not supported\n    on the `IceSSL::Certificate` class.\n\n  - only PKCS12 certificates are supported (no support for PEM).\n\n- The `Ice::ConnectionInfo` `sndSize` and `rcvSize` data members have been moved\n  to the TCP and UDP connection info classes. The `Ice::WSEndpointInfo` and\n  `IceSSL::EndpointInfo` classes no longer inherit `Ice::IPConnectionInfo` and\n  instead directly extend `Ice::ConnectionInfo`. IP connection information can\n  still be retrieved by accessing the connection information object stored with\n  the new `underlying` data member.\n\n- IceGrid and IceStorm now use LMDB for their persistent storage instead of\n  Freeze/Berkeley DB.\n\n- Added support for two additional IceGrid variables: `server.data` and\n  `service.data`. These variables point to server and service specific data\n  directories created by IceGrid on the node. These data directories are\n  automatically removed by IceGrid if you remove the server from the\n  deployment.\n\n  For consistency, the `node.datadir` variable has been deprecated, use the\n  `node.data` variable instead.\n\n- Added the new metadata tag `delegate` for local interfaces with one operation.\n  Interfaces with this metadata will be generated as a `std::function` in C++11,\n  `delegate` in C#, `FunctionalInterface` in Java, `function callback` in\n  JavaScript, `block` in Objective-C, `function/lambda` in Python. Other language\n  mappings keep their default behavior.\n\n- `ObjectFactory` has been deprecated in favor of the new local interface\n  `ValueFactory`. Communicator operations `addObjectFactory`and\n  `findObjectFactory` have been deprecated in favor of similar operations on the\n  new interface `ValueFactoryManager`.\n\n- Replaced `Ice::NoObjectFactoryException` with `Ice::NoValueFactoryException`.\n\n- The Slice compiler options `--ice` and `--underscore` are now deprecated, and\n  replaced by the file Slice metadata `ice-prefix` and `underscore`.\n\n- Renamed local interface metadata `async` to `async-oneway`.\n\n- Replaced `ConnectionCallback` by delegates `CloseCallback` and\n `HeartbeatCallback`.  Also replaced `setCallback` by `setCloseCallback` and\n  `setHeartbeatCallback` on the `Connection` interface.\n\n- Updating Windows build system to use MSBuild instead of nmake.\n\n- Changed the parsing of hex escape sequences (\\x....) in Slice string literals:\n  the parsing now stops after 2 hex digits. For example, `\\x0ab` is now read as\n  `\\x0a` followed by `b`. Previously all the hex digits were read like in C++.\n\n- Stringified identities and proxies now support non-ASCII characters\n  and universal character names (`\\unnnn` and `\\Unnnnnnnn`). See the property\n  `Ice.ToStringMode` and the static function/method `identityToString`.\n\n- Fixed proxies stringification: `Communicator::proxyToString` and equivalent\n  \"to string\" methods on fixed proxies no longer raise a `FixedProxyException`;\n  the proxy is just stringified without endpoints.\n\n- An empty endpoint in an Object Adapter endpoint list is now rejected with an\n  `EndpointParseException`; such an endpoint was ignored in previous releases.\n\n- IcePatch2 and IceGrid's distribution mechanism (based on IcePatch2) are now\n  deprecated.\n\n- Updated IceSSL hostname verification (enabled with `IceSSL.CheckCertName`) to\n  use the native checks of the platform's SSL implementation.\n\n- Removed `IceSSL::NativeConnectionInfo`. `IceSSL::ConnectionInfo`'s `certs` data\n  member is now mapped to the native certificate type in C++, Java and C#. In\n  other languages, it remains mapped to a string sequence containing the PEM\n  encoded certificates.\n\n- Freeze has been moved to its own source repository,\n  https://github.com/zeroc-ice/freeze.\n\n- Added support for suppressing Slice warnings using the `[[\"suppress-warning\"]]`\n  file metadata directive. If one or more categories are specified (for\n  example `\"suppress-warning:invalid-metadata\"` or\n  `\"suppress-warning:deprecated, invalid-metadata\"`) only warnings matching these\n  categories are suppressed, otherwise all warnings are suppressed.\n\n## C++ Changes\n\n- Added `Ice::SlicedData::clear` method to allow clearing the slices associated\n  with the slice data. Calling `clear` can be useful if the sliced data contains\n  cycles. You should call this method if your application receives sliced values\n  which might contain cycles.\n\n- Added a new C++11 mapping that takes advantage of C++11 language features. This\n  new mapping is very different from the Slice-to-C++ mapping provided in prior\n  releases. The old mapping, now known as the C++98 mapping, is still supported\n  so that existing applications can be migrated to Ice 3.7 without much change.\n\n- Added support for Visual Studio 2010 (C++98 only)\n\n- The `Ice::Communicator` and `Ice::ObjectAdapter` `destroy` functions are now\n  declared as `noexcept` (C++11) or `throw()` (C++98).\n\n- Added new helper class `Ice::CommunicatorHolder`. `CommunicatorHolder`\n  creates a `Communicator` in its constructor and destroys it in its destructor.\n\n- The `--dll-export` option of `slice2cpp` is now deprecated, and replaced by\n  the file Slice metadata `cpp:dll-export:SYMBOL`.\n\n- The UDP and WS transports are no longer enabled by default with static builds\n  of the Ice library. You need to register them explicitly with the\n  `Ice::registerIceUDP` or `Ice::registerIceWS` function to use these transports\n   with your statically linked application.\n\n  NOTE: this affects UWP and iOS applications which are linked statically with\n  Ice libraries.\n\n- Added `cpp:scoped` metadata for enums in the C++98 mapping. The generated C++\n  enumerators for a \"scoped enum\" are prefixed with the enumeration's name. For\n  example:\n  ```\n     // Slice\n     [\"cpp:scoped\"] enum Fruit { Apple, Orange, Pear }\n  ```\n  corresponds to:\n  ```\n     // C++98\n     enum Fruit { FruitApple, FruitOrange, FruitPear };\n  ```\n\n- Upgrade the UWP IceSSL implementation to support client side certificates and\n  custom certificate verification.\n\n- Added `getOpenSSLVersion` function to `IceSSL::OpenSSL::Plugin` to retrieve\n  the OpenSSL version used by the Ice run time.\n\n- Added `getAuthorityKeyIdentifier` and `getSubjectKeyIdentifier` functions to\n  `IceSSL::Certificate`. These functions are not supported on iOS or UWP.\n\n- Improved the IceSSL Certificate API to allow retrieving X509v3 extensions.\n  This feature is currently only available with OpenSSL and SChannel.\n\n- Refactored the IceSSL Plug-in API to allow loading multiple implementations of\n  the plug-in in the same process. Each communicator can load a single\n  implementation, but separate communicators in the same process can load\n  different implementations.\n\n- Added ability to build IceSSL with OpenSSL on Windows. The resulting library\n  is named `icesslopenssl`. An application can load this plug-in with the\n  `IceSSLOpenSSL:createIceSSLOpenSSL` entry point.\n\n- Added `IceSSL.SchannelStrongCrypto` property: when set to a value greater than\n  0, the IceSSL SChannel implementation sets the `SCH_USE_STRONG_CRYPTO` flag,\n  which instructs SChannel to disable weak cryptographic algorithms. The default\n  values for this property is 0 for increased interoperability.\n\n- Improve Linux stack traces generated by `Exception::ice_stackTrace`, by using\n  libbacktrace when available.\n\n- Fixed IceGrid PlatformInfo to report the correct release and version number\n  for recent versions of Windows.\n\n- IceSSL has been updated to support OpenSSL 1.1.0 version.\n\n## C# Changes\n\n- Added a new C# AMI mapping based on TAP (Task-based Asynchronous Pattern).\n  With this mapping, you can use the C# async/away keywords with\n  asynchronous invocations and dispatches (AMI and AMD).\n\n- Updated the AMD mapping to be Task-based. Chaining AMD and AMI calls is now\n  straightforward.\n\n- Added the proxy method `ice_scheduler`. It returns an instance of\n  `System.Threading.Tasks.TaskScheduler` that you can pass to `Task` methods\n  such as `ContinueWith` in order to force a continuation to be executed by\n  an Ice thread pool thread.\n\n- The `batchRequestInterceptor` data member of `Ice.InitializationData` is now\n  defined as a `System.Action<Ice.BatchRequest, int, int>` delegate. You will\n  need to update your code accordingly if you were using the now removed\n  `Ice.BatchRequestInterceptor` interface.\n\n- The `Ice.PropertiesUpdateCallback` interface is deprecated, use the\n  `System.Action<Dictionary<string, string>>` delegate instead to receive\n  property updates.\n\n- The `threadHook` member of `InitializationData` is now deprecated. Instead,\n  set `threadStart` and `threadStop`.\n\n- The `Ice.ClassResolver` delegate has been replaced with the\n  `System.Func<string, Type>` delegate. The `Ice.CompactIdResolver` delegate\n  has been replaced with the `System.Func<int, string>` delegate. The\n  `Ice.Dispatcher` delegate has been replaced with the\n  `System.Action<System.Action, Ice.Connection>` delegate.\n\n- Added new interface/class metadata `cs:tie`. Use this metadata to generate a\n  tie class for a given interface or class.\n\n- `cs:` and `clr:` are now interchangeable in metadata directives.\n\n- Add support to preload referenced assemblies. The property\n  `Ice.PreloadAssemblies` controls this behavior. If set to a value greater than\n  0 the Ice run-time will try to load all the assemblies referenced by the\n  process during communicator initialization, otherwise the referenced\n  assemblies will be initialized when the Ice run-time needs to lookup a C#\n  class. The default value is 0.\n\n- Update C# proxy implementation to implement `ISerializable`.\n\n## Java Changes\n\n- Added a new Java mapping that takes advantage of Java 8 language features. The\n  new mapping is significantly different than prior releases in many ways,\n  including the package name (com.zeroc) as well as APIs such as AMI, AMD, out\n  parameters and optional values. The prior mapping, now known as Java Compat,\n  is still supported so that existing applications can be migrated to Ice 3.7\n  without much change.\n\n- The Ice Communicator interface now implements `java.lang.AutoCloseable`.\n  This enables the code to initialize the communicator within a\n  `try-with-resources` statement. The communicator will be destroyed\n   automatically at the end of this statement.\n\n- Fixed a bug where unmarshaling Ice objects was very slow when using\n  compact type IDs.\n\n- (Java) Added the proxy method `ice_executor`, which returns an instance of\n  `java.util.concurrent.Executor` that you can pass to `CompletableFuture`\n  methods such as `whenCompleteAsync` in order to force an action to be\n  executed by an Ice thread pool thread.\n\n- (Java Compat) Added new interface/class metadata `java:tie`. Use this metadata\n  to generate a tie class for a given interface or class.\n\n- Protocol compression now uses Bzip2 implementation from Apache Commons Compress,\n  previous versions use Bizp2 implementation from Apache Ant.\n\n## JavaScript Changes\n\n- Improved the `Ice.Long` class to allow creating `Ice.Long` instance from\n  JavaScript `Numbers`.\n\n- Updated the `Ice.Promise` class. It now extends the standard JavaScript\n  `Promise` class.\n\n- The `Ice.Class` helper function used to create classes has been removed. The\n  Ice run time and the generated code now use the JavaScript `class` keyword to\n  define the classes.\n\n- `Ice.HashMap` usage is now limited to dictionaries with mutable keys, for all\n  other cases the standard JavaScript `Map` type is used.\n\n- `Ice.HashMap` API has been aligned with the API of JavaScript `Map` type.\n\n- Added support to map Slice modules to JavaScript native modules this requires\n  using the file metadata `[[\"js:es6-module\"]]`.\n\n- The `[\"amd\"]` metadata is now ignored in JavaScript. An operation can now be\n  be dispatched asynchronously by just returning a JavaScript Promise object.\n\n- `sequence<byte>` is now always mapped to the `Uint8Array` JavaScript type. It\n  used to be mapped to the `Buffer` type for NodeJS and to `Uint8Array` for\n  browsers.\n\n- The helper method `Ice.Buffer.createNative` has been removed and replaced by\n  the use of `Uint8Array`.\n\n## Objective-C Changes\n\n- Added clear selector to `ICESlicedData` to allow clearing the slices\n  associated with the slice data. Calling `clear` can be useful if the sliced\n  data contains cycles. You should call this method if your application receives\n  sliced values which might contain cycles.\n\n- The UDP and WS transports are no longer enabled by default with static builds\n  of the IceObjC library. You need to register them explicitly with the\n  `ICEregisterIceUDP` or `ICEregisterIceWS` function to use these transports\n   with your statically linked application.\n\n  NOTE: this affects iOS applications which are linked statically with Ice\n  libraries.\n\n- Fixed a bug where optional object dictionary parameters would\n  trigger an assert on marshaling.\n\n- The `--dll-export` option of `slice2objc` is now deprecated, and replaced by\n  the file Slice metadata `objc:dll-export:SYMBOL`.\n\n- Added `objc:scoped` metadata for enums. The generated Objective-C enumerators\n  for a \"scoped enum\" are prefixed with the enumeration's name. For example:\n  ```\n  // Slice\n  module M\n  {\n     [\"objc:scoped\"] enum Fruit { Apple, Orange, Pear }\n  }\n\n  ```\n  corresponds to:\n  ```\n  // Objective-C\n  typedef enum : ICEInt\n  {\n      MFruitApple,\n      MFruitPear,\n      MFruitOrange\n  } MFruit;\n  ```\n\n## PHP Changes\n\n- Ice for PHP now uses namespace by default.\n\n- Added support for PHP 7.0 and PHP 7.1.\n\n- The symbol used to indicate an unset optional value for the PHP namespace\n  mapping is `Ice\\None`. The symbol for the flattened mapping remains\n `Ice_Unset`,  but since `unset` is a PHP keyword, we could not use `Ice\\Unset`.\n\n## Python Changes\n\n- Added a new AMI mapping that returns `Ice.Future`. The Future class provides\n  an API that is compatible with `concurrent.futures.Future`, with some\n  additional Ice-specific methods. Programs can use the new mapping by adding the\n  suffix `Async` to operation names, such as `sayHelloAsync`. The existing\n  `begin_/end_` mapping is still supported.\n\n- Changed the AMD mapping. AMD servant methods must no longer append the `_async`\n  suffix to their names. Additionally, an AMD callback is no longer passed to a\n  servant method.\n  Now a servant method always uses the mapped name, and it can either return the\n  results (for a synchronous implementation) or return an `Ice.Future` (for an\n  asynchronous implementation).\n\n  With Python 3, a servant method can also be implemented as a coroutine. Ice\n  will start the coroutine, and coroutines can `await` on `Ice.Future` objects.\n  Note that because Ice is multithreaded, users who also want to use the asyncio\n  package must make sure it's done in a thread-safe manner. To assist with this,\n  the `Ice.wrap_future` function accepts an `Ice.Future` and returns an\n  `asyncio.Future`.\n\n- Revised the Ice for Python packaging layout. Using the new Slice metadata\n  directive `python:pkgdir`, all generated files are now placed in their\n  respective package directories.\n\n- The Ice Communicator now implements the context manager protocol. This enables\n  the code to initialize the communicator within a `with` statement.\n  The communicator is destroyed automatically at the end of the `with` statement.\n\n- Added support for the Dispatcher facility. The `dispatcher` member of\n  `InitializationData` can be set to a callable that Ice invokes when it\n  needs to dispatch a servant invocation or an AMI callback. This facility\n  is useful for example in UI applications where it's convenient to\n  schedule Ice activity for execution on the main UI thread.\n\n- The `threadHook` member of `InitializationData` is now deprecated. We have\n  added `threadStart` and `threadStop` members for consistency with the C++11\n  and Java mappings. A program should set these members to a callable, such as\n  a lambda function.\n\n- The `batchRequestInterceptor` member of `InitializationData` can now be set\n  to a callable. For backward compatibility, a program can also continue to\n  supply an instance of the deprecated class `Ice.BatchRequestInterceptor`.\n\n- Renamed optional invocation context parameter to `context` for consistency\n  with other language mappings (was `_ctx` in previous versions).\n\n- Fixed a bug where `Ice.Application` Ctrl-C handler was installed even if\n  `Ice.Application.NoSignalHandling` was set.\n\n## Ruby Changes\n\n- Ice for Ruby is no longer supported on Windows.\n\n- Fix `Application` Ctrl-C handling to be compatible with Ruby 2.x signal\n   handler restrictions.\n\n- Fixed a bug that prevented the data members of `IceSSL::ConnectionInfo` from\n  being defined correctly.\n\n[1]: https://docs.python.org/3/c-api/buffer.html\n"
        },
        {
          "name": "CHANGELOG-3.8.md",
          "type": "blob",
          "size": 12.7919921875,
          "content": "The entries below contain brief descriptions of the changes in each release, in no particular order. Some of the\nentries reflect significant new additions, while others represent minor corrections. Although this list is not a\ncomprehensive report of every change we made in a release, it does provide details on the changes we feel Ice users\nmight need to be aware of.\n\nWe recommend that you use the release notes as a guide for migrating your applications to this release, and the manual\nfor complete details on a particular aspect of Ice.\n\n# Changes in Ice 3.8.0\n\nThese are the changes since the Ice 3.7.10 release in [CHANGELOG-3.7.md](./CHANGELOG-3.7.md).\n\n## General Changes\n\n- Replaced ACM and connection timeouts by idle, inactivity, connect, and close timeouts.\n  - Idle timeout\\\n  Once a connection is established, this connection is considered healthy as long as it does not wait for more than idle\n  timeout to read a byte. If a connection waits for more than idle timeout to read a byte, it's deemed idle and aborted.\n  Idle is never a good state. To prevent connections from becoming idle, Ice ensures there is regular write activity on\n  established connections: if there is no write on a connection for idle timeout / 2, Ice sends a heartbeat on this\n  connection. A heartbeat is a one-way, unacknowledged, ValidateConnection message. The default idle timeout is\n  60 seconds. You can change this value with the configuration property `Ice.Connection.Client.IdleTimeout` (for client\n  connections) or `Ice.Connection.Server.IdleTimeout` (for server connections). The unit for this timeout is seconds.\n   You can also override this value for a specific object adapter with the configuration property\n  `AdapterName.Connection.IdleTimeout`. Our general recommendation is to keep things simple: use the same value\n  (typically the default) for all your Ice applications. In particular, the idle timeout is not negotiated during\n  connection establishment and an idle timeout mismatch may result in untimely connection aborts.\n    - **Interop with Ice 3.7 and earlier releases**\\\n    If your Ice 3.8 application connects to an older Ice server or accepts a connection from an older Ice client, you\n    need to change the configuration of your older Ice application to send regular heartbeats. Otherwise, your Ice 3.8\n    application can deem the connection idle (after idle timeout) and abort this connection. With Ice 3.7 and Ice 3.6,\n    you can set the property `Ice.ACM.Heartbeat` to 3, and make sure the `Ice.ACM.Timeout` property matches your idle\n    timeout (the default for the ACM timeout is 60 seconds, just like the default idle timeout). If you are unable to\n    change the configuration of your older Ice application, you can switch off the idle detection on the Ice 3.8 side\n    by setting `Ice.Connection.Client.EnableIdleCheck` or `Ice.Connection.Server.EnableIdleCheck` to 0. You can also\n    switch off the idle check for just a specific object adapter by setting `AdapterName.Connection.EnableIdleCheck` to\n    0.\n    - **Interop with IceRPC**\\\n    IceRPC uses the same idle timeout and idle check mechanism for connections that use the `ice` protocol.\n  - Inactivity timeout\\\n  A connection is considered inactive when there is no application-level activity on this connection:\n  there is no outstanding invocation (we're not waiting for a response for a request we've sent), there is no\n  outstanding dispatch, and no request or response is being sent or received. Sending or receiving a heartbeat (see\n  above) does not count as application-level activity. When a connection remains inactive for more than the inactivity\n  timeout, this connection is closed gracefully. Inactive is a good state: the connection is healthy but unused, so we\n  shut it down to reclaim resources. The default inactivity timeout is 300 seconds. You can change this default by\n  setting `Ice.Connection.Client.InactivityTimeout` (for client connections) or\n  `Ice.Connection.Server.InactivityTimeout` (for server connections). The unit for this timeout is seconds. You\n  can also override this value for a specific object adapter with the configuration property\n  `AdapterName.Connection.InactivityTimeout`.\\\n  Note: make sure your inactivity timeout is greater than your idle timeout, as the implementation of the inactivity\n  timeout relies on a smaller idle timeout value. If you disable your idle timeout by setting it to 0 or very large\n  value (not something we recommend), you will effectively disable your inactivity timeout as well.\n  - Connect timeout\\\n  A connection establishment fails if it takes more than connect timeout to complete. The default connect timeout is 10\n  seconds. You can change this value by setting `Ice.Connection.Client.ConnectTimeout` (for client connections) or\n  `Ice.Connection.Server.ConnectTimeout` (for server connections). The unit for this timeout is seconds. You can also\n  override this value for a specific object adapter with the configuration property\n  `AdapterName.Connection.ConnectTimeout`.\n  - Close timeout\\\n  A graceful connection closure transitions to connection abort if it takes more than close timeout to complete. The\n  default close timeout is 10 seconds. You can change this value by setting `Ice.Connection.Client.CloseTimeout` (for\n  client connections) or `Ice.Connection.Server.CloseTimeout` (for server connections). The unit for this timeout is\n  seconds, as usual. You can also override this value for a specific object adapter with the configuration\n  property `AdapterName.Connection.CloseTimeout`.\n\n- Simplify proxy creation.\n  You can now create a typed proxy directly from a communicator and a string in all languages. For example:\n\n  ```cpp\n  // C++\n  GreeterPrx greeter{communicator, \"greeter:tcp -h localhost -p 4061\"};\n  ```\n\n  ```csharp\n  // C#\n  var greeter = GreeterPrxHelper.createProxy(communicator, \"greeter:tcp -h localhost -p 4061\");\n  ```\n\n  ```java\n  // Java\n  var greeter = GreeterPrx.createProxy(communicator, \"greeter:tcp -h localhost -p 4061\");\n  ```\n\n   ```js\n  // JavaScript\n  const greeter = new GreeterPrx(communicator, \"greeter:tcp -h localhost -p 4061\");\n  ```\n\n  ```matlab\n  % MATLAB\n  greeter = GreeterPrx(communicator, 'greeter:tcp -h localhost -p 4061');\n  ```\n\n  ```php\n  // PHP\n  $greeter = GreeterPrx::createProxy($communicator, 'greeter:tcp -h localhost -p 4061');\n  ```\n\n  ```python\n  # Python\n  greeter = GreeterPrx(communicator, \"greeter:tcp -h localhost -p 4061\")\n  ```\n\n  ```ruby\n  # Ruby\n  greeter = GreeterPrx.new(communicator, \"greeter:tcp -h localhost -p 4061\")\n  ```\n\n  ```swift\n  // Swift\n  let greeter = try makeProxy(\n    communicator: communicator,\n    proxyString: \"greeter:tcp -h localhost -p 4061\",\n    type: GreeterPrx.self)\n  ```\n\n  ```ts\n  // TypeScript\n  const greeter = new GreeterPrx(communicator, \"greeter:tcp -h localhost -p 4061\");\n  ```\n\n  The existing `stringToProxy` operation on `Communicator` remains available. However, the new\n  syntax is now the preferred way to create a proxy from a string.\n\n- Rework the published endpoints of object adapters\n  - The published endpoints of an object adapter are the endpoint(s) included in the proxies returned by the `add` and\n`createProxy` operations on an object adapter. For indirect object adapters, the published endpoints are the endpoints\nregistered with the Ice Locator (typically the IceGrid registry).\n  - Improved the algorithm for computing the default published endpoints.\n  - Add new _AdapterName_.PublishedHost property, used to compute the default published endpoints.\n  - Removed the `refreshPublishedEndpoints` operation on `ObjectAdapter`.\n\n- Consolidate and refactor the exceptions derived from LocalException.\n  | Local exception in Ice 3.7          | Replacement                | Notes    |\n  |-------------------------------------|----------------------------| ---------|\n  | BadMagicException                   | ProtocolException (base)   |          |\n  | CFNetworkException                  | SocketException (base)     |          |\n  | CloneNotImplementedException        | std::logic_error           | C++ only |\n  | CompressionException                | ProtocolException (base)   |          |\n  | ConnectionManuallyClosedException   | ConnectionAbortedException, ConnectionClosedException   | |\n  | ConnectionNotValidatedException     | ProtocolException (base)   |          |\n  | EncapsulationException              | MarshalException (base)    |          |\n  | EndpointParseException              | ParseException             |          |\n  | EndpointSelectionTypeParseException | ParseException             |          |\n  | IllegalIdentityException            | ArgumentException (C#), std::invalid_argument (C++), IllegalArgumentException (Java)     | |\n  | IllegalMessageSizeException         | MarshalException           |          |\n  | IllegalServantException             | ArgumentNullException (C#), std::invalid_argument (C++), IllegalArgumentException (Java) | |\n  | IdentityParseException              | ParseException             |          |\n  | MemoryLimitException                | MarshalException (base)    |          |\n  | NoValueFactoryException             | MarshalException (base)    |          |\n  | ProxyParseException                 | ParseException             |          |\n  | ProxyUnmarshalException             | MarshalException (base)    |          |\n  | StringConversionException           | MarshalException (base)    |          |\n  | UnexpectedObjectException           | MarshalException (base)    |          |\n  | UnknownMessageException             | ProtocolException (base)   |          |\n  | UnknownReplyStatusException         | MarshalException           |          |\n  | UnmarshalOutOfBoundsException       | MarshalException (base)    |          |\n  | UnsupportedEncodingException        | MarshalException           |          |\n  | UnsupportedProtocolException        | MarshalException, FeatureNotSupportedException | |\n  | VersionMismatchException            | InitializationException    |          |\n  | VersionParseException               | ParseException             |          |\n\n  base = was existing base class\n\n  New local exceptions:\\\n  ConnectionAbortedException, ConnectionClosedException, ParseException\n\n## Slice Language Changes\n\n- Removed local Slice. `local` is no longer a Slice keyword.\n\n- Removed the `[\"preserve-slice\"]` metadata. Slice classes encoded in the sliced format are now always preserved.\n\n- Exceptions are now always encoded in the sliced format and no longer support preservation of unknown slices.\n\n- Slice classes can no longer define operations or implement interfaces, and `implements` is no longer a Slice keyword.\nThis feature has been deprecated since Ice 3.7.\n\n- Slice classes no longer represent remote Ice objects; the syntax `MyClass*` (a proxy to a class) is now invalid.\n\n- An interface can no longer be used as a type. This feature, known as \"interface by value\", has been deprecated since\nIce 3.7. You can still define proxies with the usual syntax, `Greeter*`, where `Greeter` represents an interface.\n\n## Property Changes\n\n- Removed `IceSSL.SchannelStrongCrypto`. Strong crypto is now enabled by default.\n\n## C++ Changes\n\n- There is now a single C++ mapping, based on the C++11 mapping provided by Ice 3.7. This new C++ mapping requires a\nC++ compiler with support for std=c++17 or higher.\n\n- All functions that create proxies, including `Communicator::stringToProxy`, `ObjectAdapter::add`,\n  `Connection::createProxy` and more, are now template functions that allow you to choose the type of the returned\n  proxy. The default proxy type is `Ice::ObjectPrx` for backwards compatibility. We recommend you always specify the\n  desired proxy type explicitly. For example:\n\n  ```cpp\n  // widget is a std::optional<WidgetPrx>\n  auto widget = communicator->propertyToProxy<WidgetPrx>(\"MyWidget\");\n  ```\n\n- When unmarshaling an array of short, int, long, float, or double, you can now choose to use unaligned unmarshaling by\ndefining ICE_UNALIGNED when building your application. This optimization requires the non-default array mapping for\nSlice sequences, enabled by the `cpp:array` metadata directive, and a compatible little endian platform. In Ice 3.7 and\nearlier releases, this unaligned unmarshaling was turned on automatically on x86 and x64 CPUs, and turned off on all\nother CPUs.\n\n## C# Changes\n\n- The thread pools created by Ice no longer set a synchronization context. As a result, the continuation from an async\ninvocation made from an Ice thread pool thread executes in a .NET thread pool thread; previously, this continuation\nwas executed in a thread managed by the same Ice thread pool unless you specified `.ConfigureAwait(false)`.\n\n## Objective-C Changes\n\n- The Objective-C mapping was removed.\n\n## PHP Changes\n\n- Removed the flattened mapping deprecated in 3.7.\n\n## IceGrid Changes\n\n- Removed deprecated server and application distributions in IceGrid. These distributions relied on the IcePatch2\nservice.\n\n## IcePatch2 Changes\n\n- The IcePatch2 service was removed.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.24609375,
          "content": "# Contributing to Ice\n\nThank you for your interest in contributing to Ice!\n\n## How to Contribute\n\nTo contribute code or documentation to this project, please follow these steps:\n\n1. Review the [ZeroC Contributor Agreement](https://gist.github.com/zcabot/1a4c24dca55adaa83d78cdeabc63226b).\n   The CLA assistant bot will ask you to sign this agreement when you submit\n   your first pull request.\n\n2. If you're planning to make a significant contribution, such as a new feature\n   or major changes, please discuss your ideas with the community first by\n   starting a [discussion](https://github.com/zeroc-ice/ice/discussions) or by\n   contacting us via [email](mailto:contributing@zeroc.com).\n\n3. Fork this repository.\n\n4. When implementing your contribution, please adhere to the project's naming\n   and coding conventions to maintain consistency in the source code.\n\n5. Submit a pull request.\n\nWe review carefully any contribution that we accept, and these reviews may take\nsome time. Please keep in mind there is no guarantee your contribution will be\naccepted: we may reject a pull request for any reason, or no reason.\n\n## Contact\n\n- GitHub Discussions: <https://github.com/zeroc-ice/ice/discussions>\n- Twitter: <https://twitter.com/zeroc>\n- Email: <contributing@zeroc.com>\n"
        },
        {
          "name": "ICE_LICENSE",
          "type": "blob",
          "size": 2.2470703125,
          "content": "Copyright (c) ZeroC, Inc. All rights reserved.\n\nThis copy of Ice is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License version 2 as\npublished by the Free Software Foundation.\n\nIce is distributed in the hope that it will be useful, but WITHOUT ANY\nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\nFOR A PARTICULAR PURPOSE. See the GNU General Public License for more\ndetails.\n\nYou should have received a copy of the GNU General Public License version\n2 along with this program; if not, see http://www.gnu.org/licenses.\n\nLinking Ice statically or dynamically with other software (such as a\nlibrary, module or application) is making a combined work based on Ice.\nThus, the terms and conditions of the GNU General Public License version\n2 cover this combined work.\n\nIf such software can only be used together with Ice, then not only the\ncombined work but the software itself is a work derived from Ice and as\nsuch shall be licensed under the terms of the GNU General Public License\nversion 2. This includes the situation where Ice is only being used\nthrough an abstraction layer.\n\nAs a special exception to the above, ZeroC grants to the copyright\nholders and contributors of the Mumble project (http://www.mumble.info)\nthe permission to license the Ice-based software they contribute to\nMumble under the terms of the BSD license. This exception does not extend\nto the parts of Ice used by Mumble, or to any other derived work: as a\nwhole, any work based on Ice shall be licensed under the terms and\nconditions of the GNU General Public License version 2.\n\nYou may also combine Ice with any software not derived from Ice, provided\nthe license of such software is compatible with the GNU General Public\nLicense version 2. In addition, as a special exception, ZeroC grants you\npermission to combine Ice with:\n\n - the OpenSSL library, or with a modified version of the OpenSSL library\n   that uses the same license as OpenSSL\n\n - any library not derived from Ice and licensed under the terms of\n   the Apache License, version 2.0\n   (http://www.apache.org/licenses/LICENSE-2.0.html)\n\nIf you modify this copy of Ice, you may extend any of the exceptions\nprovided above to your version of Ice, but you are not obligated to\ndo so.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 17.6689453125,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Library General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Library General\nPublic License instead of this License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.1669921875,
          "content": "#\n# Copyright (c) ZeroC, Inc. All rights reserved.\n#\n\ntop_srcdir := .\n\ninclude $(top_srcdir)/config/Make.rules\n\ndefine make-global-rule\n$1::\n\t+@for subdir in $2; \\\n\tdo \\\n\t\techo \"making all in $$$$subdir\"; \\\n\t\t( cd $$$$subdir && $(MAKE) $1 ) || exit 1; \\\n\tdone\nendef\n\n$(eval $(call make-global-rule,srcs,$(languages)))\n$(eval $(call make-global-rule,tests,$(languages)))\n$(eval $(call make-global-rule,all,$(languages)))\n$(eval $(call make-global-rule,clean,$(languages)))\n$(eval $(call make-global-rule,distclean,$(languages)))\n$(eval $(call make-global-rule,install,$(languages)))\n\n#\n# Install documentation and slice files (don't install IceDiscovery and IceLocatorDiscovery slice files)\n#\ninstall:: install-doc install-slice\n\n$(eval $(call install-data-files,$(wildcard $(top_srcdir)/*LICENSE),$(top_srcdir),$(install_docdir),\\\n         install-doc,\"Installing documentation files\"))\n\n$(eval $(call install-data-files,$(filter-out %Discovery.ice,$(wildcard $(slicedir)/*/*.ice)),$(slicedir),$(install_slicedir),\\\n         install-slice,\"Installing slice files\"))\n\n#\n# Remove top-level sdk directory on macOS\n#\nifneq ($(filter Darwin,$(os)),)\ndistclean::\n\t$(Q)$(RM) -r $(top_srcdir)/sdk\nendif\n"
        },
        {
          "name": "Package.resolved",
          "type": "blob",
          "size": 0.830078125,
          "content": "{\n  \"pins\" : [\n    {\n      \"identity\" : \"mcpp\",\n      \"kind\" : \"remoteSourceControl\",\n      \"location\" : \"https://github.com/zeroc-ice/mcpp.git\",\n      \"state\" : {\n        \"branch\" : \"master\",\n        \"revision\" : \"406c5e05578438c5df4c62cb9f33038f093c700f\"\n      }\n    },\n    {\n      \"identity\" : \"swift-docc-plugin\",\n      \"kind\" : \"remoteSourceControl\",\n      \"location\" : \"https://github.com/apple/swift-docc-plugin\",\n      \"state\" : {\n        \"revision\" : \"26ac5758409154cc448d7ab82389c520fa8a8247\",\n        \"version\" : \"1.3.0\"\n      }\n    },\n    {\n      \"identity\" : \"swift-docc-symbolkit\",\n      \"kind\" : \"remoteSourceControl\",\n      \"location\" : \"https://github.com/apple/swift-docc-symbolkit\",\n      \"state\" : {\n        \"revision\" : \"b45d1f2ed151d057b54504d653e0da5552844e34\",\n        \"version\" : \"1.0.0\"\n      }\n    }\n  ],\n  \"version\" : 2\n}\n"
        },
        {
          "name": "Package.swift",
          "type": "blob",
          "size": 3.955078125,
          "content": "// swift-tools-version: 5.9\n\nimport Foundation\nimport PackageDescription\n\nlet iceUtilSources: [String] = [\n    \"src/Ice/ConsoleUtil.cpp\",\n    \"src/Ice/CtrlCHandler.cpp\",\n    \"src/Ice/Demangle.cpp\",\n    \"src/Ice/Exception.cpp\",\n    \"src/Ice/FileUtil.cpp\",\n    \"src/Ice/LocalException.cpp\",\n    \"src/Ice/Options.cpp\",\n    \"src/Ice/OutputUtil.cpp\",\n    \"src/Ice/Random.cpp\",\n    \"src/Ice/StringConverter.cpp\",\n    \"src/Ice/StringUtil.cpp\",\n    \"src/Ice/UUID.cpp\",\n]\n\nlet package = Package(\n    name: \"ice\",\n    defaultLocalization: \"en\",\n    platforms: [\n        .macOS(.v14),\n        .iOS(.v17),\n    ],\n    products: [\n        .library(name: \"Ice\", targets: [\"Ice\"]),\n        .library(name: \"Glacier2\", targets: [\"Glacier2\"]),\n        .library(name: \"IceGrid\", targets: [\"IceGrid\"]),\n        .library(name: \"IceStorm\", targets: [\"IceStorm\"]),\n        .plugin(name: \"CompileSlice\", targets: [\"CompileSlice\"]),\n    ],\n    dependencies: [\n        .package(url: \"https://github.com/zeroc-ice/mcpp.git\", branch: \"master\"),\n        .package(url: \"https://github.com/apple/swift-docc-plugin\", from: \"1.1.0\"),\n    ],\n    targets: [\n        .target(\n            name: \"Ice\",\n            dependencies: [\"IceImpl\"],\n            path: \"swift/src/Ice\",\n            resources: [.process(\"slice-plugin.json\")],\n            plugins: [.plugin(name: \"CompileSlice\")]\n        ),\n        .target(\n            name: \"Glacier2\",\n            dependencies: [\"Ice\"],\n            path: \"swift/src/Glacier2\",\n            resources: [.process(\"slice-plugin.json\")],\n            plugins: [.plugin(name: \"CompileSlice\")]\n        ),\n        .target(\n            name: \"IceGrid\",\n            dependencies: [\"Ice\", \"Glacier2\"],\n            path: \"swift/src/IceGrid\",\n            resources: [.process(\"slice-plugin.json\")],\n            plugins: [.plugin(name: \"CompileSlice\")]\n        ),\n        .target(\n            name: \"IceStorm\",\n            dependencies: [\"Ice\"],\n            path: \"swift/src/IceStorm\",\n            resources: [.process(\"slice-plugin.json\")],\n            plugins: [.plugin(name: \"CompileSlice\")]\n        ),\n        .target(\n            name: \"IceImpl\",\n            dependencies: [\n                \"IceCpp\",\n                \"IceDiscoveryCpp\",\n                \"IceLocatorDiscoveryCpp\",\n            ],\n            path: \"swift/src/IceImpl\",\n            cxxSettings: [\n                // We rely on a few private headers from Ice\n                .headerSearchPath(\"../../../cpp/src/\"),\n            ],\n            linkerSettings: [\n                .linkedLibrary(\"bz2\"),\n                .linkedFramework(\"ExternalAccessory\")\n            ]\n        ),\n        .binaryTarget(\n            name: \"IceCpp\",\n            path: \"cpp/lib/Ice.xcframework\"\n        ),\n        .binaryTarget(\n            name: \"IceDiscoveryCpp\",\n            path: \"cpp/lib/IceDiscovery.xcframework\"\n\n        ),\n        .binaryTarget(\n            name: \"IceLocatorDiscoveryCpp\",\n            path: \"cpp/lib/IceLocatorDiscovery.xcframework\"\n\n        ),\n        .executableTarget(\n            name: \"slice2swift\",\n            dependencies: [\"mcpp\"],\n            path: \"cpp\",\n            exclude: [\n                \"test\",\n                \"src/slice2swift/build\",\n                \"src/slice2swift/msbuild\",\n                \"src/slice2swift/Slice2Swift.rc\",\n                \"src/Slice/build\",\n                \"src/Slice/msbuild\",\n                \"src/Slice/Scanner.l\",\n                \"src/Slice/Grammar.y\",\n                \"src/Slice/Makefile.mk\",\n            ],\n            sources: [\"src/slice2swift\", \"src/Slice\"] + iceUtilSources,\n            publicHeadersPath: \"src/slice2swift\",\n            cxxSettings: [\n                .headerSearchPath(\"src\"),\n                .headerSearchPath(\"include\")\n            ]\n        ),\n        .plugin(\n            name: \"CompileSlice\",\n            capability: .buildTool(),\n            dependencies: [\"slice2swift\"],\n            path: \"swift/src/CompileSlicePlugin\"\n        ),\n    ],\n    swiftLanguageVersions: [SwiftVersion.v5],\n    cxxLanguageStandard: .cxx20\n)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.376953125,
          "content": "<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/zeroc-ice/ice/3.7/.github/assets/ice-banner.svg\" height=\"150\" width=\"150\" />\n</p>\n\n[![Join the chat at https://gitter.im/zeroc-ice/ice](https://badges.gitter.im/zeroc-ice/ice.svg)][gitter]\n[![GPLv2](https://img.shields.io/github/license/zeroc-ice/ice?color=red)][GPLv2]\n[![Static Badge](https://img.shields.io/badge/license-Commercial-blue)][Commercial]\n\n# The Ice framework\n\nIce helps you build networked applications with minimal effort. By taking care of all interactions with low-level\nnetwork programming interfaces, Ice allows you to focus your efforts on your application logic. You don't need to\nworry about details such as opening network connections, encoding and decoding data for network transmission,\nor retrying failed connection attempts (to name just a few of dozens of such low-level details).\n\n[Downloads][downloads] | [Examples][examples] | [Documentation][docs]\n\n## RPCs with Ice\n\nRemote procedure calls ([RPCs][rpcs]) are at the heart of the Ice framework.\n\nYou create RPCs with an easy 2-step process:\n\n1. Define the contract between your client and your server with the [Slice][slice] language—Ice's [IDL][idl].\n2. Run the Slice compiler on these Slice definitions to generate stubs in the programming language(s) of your choice.\n\nFor example:\n\n```slice\n// The contract specified using Slice.\ninterface Hello\n{\n    // The caller says \"hello\".\n    void sayHello();\n}\n```\n\n```shell\n# Compile the Slice contract with the Slice compiler for C++ (slice2cpp)\nslice2cpp Hello.ice\n```\n\n```c++\n// C++ client\n\n// Call operation sayHello on a remote object that implements\n// interface Hello using the generated proxy class (HelloPrx).\nhelloPrx->sayHello();\n```\n\n```c++\n// C++ server\n\n// Implements the Hello interface by deriving from the generated\n// Hello abstract base class.\nclass Printer final : public Hello\n{\npublic:\n\n    string sayHello(const Ice::Current&) final\n    {\n        cout << \"Hello World!\" << endl;\n    }\n};\n```\n\nYou can use any supported programming language for your client and server. For example, a Python client could call a C++\nserver; neither side knows the programming language used by the other side.\n\n## Complete solution with a uniform API\n\nThe Ice framework provides everything you need to build networked applications:\n\n- RPCs with a compact binary [protocol][protocol] over a variety of network transports (TCP, UDP, WebSocket,\nBluetooth...)\n- Secure communications ([IceSSL][icessl])\n- Configuration ([Ice Properties][properties])\n- Logging ([Ice Logger][logger])\n- Instrumentation and metrics ([IceMX][icemx])\n- Pub-sub ([IceStorm][icestorm], [DataStorm][datastorm])\n- Server deployment, replication and monitoring ([IceGrid][icegrid])\n- Application gateway ([Glacier2][glacier2])\n\nThe Ice API is defined almost entirely using Slice; as a result, it is essentially the same in all programming\nlanguages.\n\n## Building Ice from source\n\n[C++](cpp/BUILDING.md) | [C#](csharp/BUILDING.md) | [Java](java/BUILDING.md) | [JavaScript/TypeScript](js/BUILDING.md) | [MATLAB](matlab/BUILDING.md) | [PHP](php/BUILDING.md) | [Python](python/BUILDING.md) | [Ruby](ruby/BUILDING.md) | [Swift](swift/BUILDING.md)\n\n## Copyright and license\n\nIce is a single-copyright project: all the source code in this [ice repository][ice-repo] is\nCopyright &copy; ZeroC, Inc., with very few exceptions.\n\nAs copyright owner, ZeroC can license Ice under different license terms, and offers the following licenses for Ice:\n\n- [GPLv2], a popular open-source license with strong [copyleft][copyleft] conditions (the default license)\n- Commercial or closed-source licenses\n\nIf you license Ice under GPLv2, there is no license fee or signed license agreement: you just need to comply with the\nGPLv2 terms and conditions. ZeroC also grants a few [exceptions](ICE_LICENSE) to the GPLv2 terms and conditions.\n\nIf you purchase a commercial or closed-source license for Ice, you must comply with the terms and conditions listed in\nthe associated license agreement; the GPLv2 terms and conditions do not apply.\n\nThe Ice software itself remains the same: the only difference between an open-source Ice and a commercial Ice are the\nlicense terms.\n\n[Commercial]: https://zeroc.com/ice/pricing\n[copyleft]: https://en.wikipedia.org/wiki/Copyleft\n[datastorm]: https://doc.zeroc.com/datastorm/latest/introduction\n[docs]: https://doc.zeroc.com/ice/3.7\n[downloads]: https://zeroc.com/downloads/ice\n[examples]: https://github.com/zeroc-ice/ice-demos\n[gitter]: https://gitter.im/zeroc-ice/ice?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n[glacier2]: https://doc.zeroc.com/ice/3.7/ice-services/glacier2\n[GPLv2]: https://github.com/zeroc-ice/ice/blob/3.7/LICENSE\n[ice-repo]: https://github.com/zeroc-ice/ice\n[icegrid]: https://doc.zeroc.com/ice/3.7/ice-services/icegrid\n[icemx]: https://doc.zeroc.com/ice/3.7/administration-and-diagnostics/administrative-facility/the-metrics-facet\n[icessl]: https://doc.zeroc.com/ice/3.7/ice-plugins/icessl\n[icestorm]: https://doc.zeroc.com/ice/3.7/ice-services/icestorm\n[idl]: https://en.wikipedia.org/wiki/Interface_description_language\n[logger]: https://doc.zeroc.com/ice/3.7/administration-and-diagnostics/logger-facility\n[properties]: https://doc.zeroc.com/ice/3.7/properties-and-configuration\n[protocol]: https://doc.zeroc.com/ice/3.7/ice-protocol-and-encoding\n[rpcs]: https://en.wikipedia.org/wiki/Remote_procedure_call\n[slice]: https://doc.zeroc.com/ice/3.7/the-slice-language\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.4072265625,
          "content": "# Security Policy\n\n## Supported Versions\n\nThe following versions of Ice are currently supported with security updates.\n\n| Version | Supported          |\n| ------- | ------------------ |\n| 3.7     | :white_check_mark: |\n| 3.6     | :white_check_mark: |\n| 3.5     | :white_check_mark: |\n| < 3.5   | :x:                |\n\n## Reporting a Vulnerability\n\nPlease report all security vulnerabilities to <security@zeroc.com>.\n"
        },
        {
          "name": "allTests.py",
          "type": "blob",
          "size": 0.2001953125,
          "content": "#!/usr/bin/env python3\n#\n# Copyright (c) ZeroC, Inc. All rights reserved.\n#\n\nimport os\nimport sys\nsys.path.append(os.path.join(os.path.dirname(__file__), \"scripts\"))\n\nfrom Util import runTests\n\nrunTests()\n"
        },
        {
          "name": "certs",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "cpp",
          "type": "tree",
          "content": null
        },
        {
          "name": "csharp",
          "type": "tree",
          "content": null
        },
        {
          "name": "doxygen",
          "type": "tree",
          "content": null
        },
        {
          "name": "ice.proj",
          "type": "blob",
          "size": 1.7138671875,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project DefaultTargets=\"Build\"\n  xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n\n  <PropertyGroup>\n    <Platform Condition=\"'$(Platform)' == ''\">Win32</Platform>\n    <Configuration Condition=\"'$(Configuration)' == ''\">Release</Configuration>\n  </PropertyGroup>\n\n  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n\n  <ItemGroup>\n    <Projects Include=\"$(MSBuildThisFileDirectory)cpp\\msbuild\\ice.proj\">\n      <Properties>Platform=$(Platform);Configuration=$(Configuration)</Properties>\n    </Projects>\n\n    <Projects Include=\"$(MSBuildThisFileDirectory)csharp\\msbuild\\ice.proj\">\n      <Properties>Platform=$(Platform);Configuration=$(Configuration)</Properties>\n    </Projects>\n\n    <Projects Include=\"$(MSBuildThisFileDirectory)java\\msbuild\\ice.proj\">\n      <Properties>Platform=$(Platform);Configuration=$(Configuration)</Properties>\n    </Projects>\n\n    <Projects Include=\"$(MSBuildThisFileDirectory)js\\msbuild\\ice.proj\">\n      <Properties>Platform=$(Platform);Configuration=$(Configuration)</Properties>\n    </Projects>\n\n    <Projects Include=\"$(MSBuildThisFileDirectory)python\\msbuild\\ice.proj\">\n      <Properties>Platform=$(Platform);Configuration=$(Configuration)</Properties>\n    </Projects>\n  </ItemGroup>\n\n  <Target Name=\"Build\">\n    <MSBuild Projects=\"@(Projects)\" BuildInParallel=\"false\" Properties=\"%(Properties)\" />\n  </Target>\n\n  <Target Name=\"BuildDist\">\n    <MSBuild Projects=\"@(Projects)\" BuildInParallel=\"false\" Properties=\"%(Properties)\" Targets=\"BuildDist\" />\n  </Target>\n\n  <Target Name=\"Clean\">\n    <MSBuild Projects=\"@(Projects)\" BuildInParallel=\"false\" Targets=\"Clean\" Properties=\"Platform=$(Platform);Configuration=%(Configuration)\" />\n  </Target>\n\n</Project>\n"
        },
        {
          "name": "java",
          "type": "tree",
          "content": null
        },
        {
          "name": "js",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo.png",
          "type": "blob",
          "size": 6.912109375,
          "content": null
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "matlab",
          "type": "tree",
          "content": null
        },
        {
          "name": "php",
          "type": "tree",
          "content": null
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "ruby",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "slice",
          "type": "tree",
          "content": null
        },
        {
          "name": "swift",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.2822265625,
          "content": "[flake8]\n# E402 module level import not at top of file\nignore = E402\nmax-line-length = 120\n\n[pep8]\n# E402 module level import not at top of file\nignore = E402\nmax-line-length = 120\n\n[pylint]\nmax-line-length = 120\ndisable=\n    invalid-name,\n    missing-docstring,\n    wrong-import-position\n"
        }
      ]
    }
  ]
}