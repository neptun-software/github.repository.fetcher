{
  "metadata": {
    "timestamp": 1736565222353,
    "page": 23,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/bloaty",
      "stars": 4849,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.0234375,
          "content": "\r\nBasedOnStyle: google\r\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0478515625,
          "content": "*.a\n*.o\n.*.sw?\n/bloaty\n!tests/testdata/**\n*.dSYM\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.736328125,
          "content": "[submodule \"third_party/re2\"]\n\tpath = third_party/re2\n\turl = https://github.com/google/re2\n[submodule \"third_party/googletest\"]\n\tpath = third_party/googletest\n\turl = https://github.com/google/googletest.git\n[submodule \"third_party/abseil-cpp\"]\n\tpath = third_party/abseil-cpp\n\turl = https://github.com/abseil/abseil-cpp.git\n[submodule \"third_party/protobuf\"]\n\tpath = third_party/protobuf\n\turl = https://github.com/protocolbuffers/protobuf.git\n[submodule \"third_party/capstone\"]\n\tpath = third_party/capstone\n\turl = https://github.com/aquynh/capstone.git\n[submodule \"third_party/demumble\"]\n\tpath = third_party/demumble\n\turl = https://github.com/nico/demumble.git\n[submodule \"third_party/zlib\"]\n\tpath = third_party/zlib\n\turl = https://github.com/madler/zlib\n"
        },
        {
          "name": "CHANGES.md",
          "type": "blob",
          "size": 5.5751953125,
          "content": "# Change Log\n\n## [Bloaty McBloatface v1.1](https://github.com/google/bloaty/releases/tag/v1.1) (2020-05-23)\n\n### Added\n\n* **Source Filtering**: Bloaty can now filter the results based on a regex\n  match. See \"Source filter\" in [README.md](README.md) for details. (#177)\n* **Show only File or VM**: It is possible to restrict the output to show only\n  \"VM SIZE\" or \"FILE SIZE\" by passing `--domain=vm` or `--domain=file`. (#165)\n\n### Fixed\n\n* **Use system deps in CMake build**: The CMake build can now use system deps\n  for protobuf, capstone, and re2 if they are present. Hopefully this will make\n  Bloaty easier to package in package managers. (#155)\n* **DWARF 4 Support**: Fixed one place in Bloaty that was not accepting DWARF 4.\n  (#166)\n* **DWARF fix**: Added support for `DW_FORM_ref_udata`. (#197)\n* **Big-endian fix**: Added missing byte swapping when getting the build ID for\n  a big-endian binary. (#182)\n* **WASM demangling**: WASM symbols are now properly demangled. (#149)\n* **New WASM sections**: Added support for new DataCount and Event sections\n  in WASM. (#178)\n* **Scaling fixes**: Fixed integer overflow in 32-bit builds, and other issues\n  that arise when using Bloaty with many files and/or large files. (#193)\n* **Improved coverage**: Bloaty now properly attributes `.eh_frame` in object\n  files, and attributes ELF headers to the corresponding section. (#168)\n* **CSV escaping**: Bloaty now properly escapes CSV output when a field contains\n  a comma or double quote. (#174)\n\n### Changed\n\n* **File size column moved left**: In the default output, the file size now\n  appears on the left. This means that all numbers are now on the left, which\n  leads to more readable output when viewing in a proportional font or in a\n  limited-width window.\n\n  Old:\n  ```\n       VM SIZE                         FILE SIZE\n   --------------                   --------------\n     0.0%       0 .debug_info        7.97Mi  29.5%\n     0.0%       0 .debug_loc         6.40Mi  23.7%\n  ```\n\n  New:\n  ```\n      FILE SIZE        VM SIZE    \n   --------------  -------------- \n    30.0%  8.85Mi   0.0%       0    .debug_info\n    24.7%  7.29Mi   0.0%       0    .debug_loc\n  ```\n\n  This shouldn't cause breakage, as anything consuming Bloaty's output\n  programmatically should be using `--csv` or `--tsv`. (#165)\n* **ELF Segment labels now contain index**: Previously ELF segment labels looked\n  like `LOAD [RW]` with segment flags only. Now they also contain the segment\n  index, eg. `LOAD #1 [RW]`, so the output can distinguish between different\n  segments with the same flags. (#159)\n\n### Security\n\nBloaty should not be considered fully hardened against malicious binaries.  This\nis one of the major reasons why Bloaty is not offered as an in-process library,\nand should only be used through its command-line interface in a dedicated\naddress space. If you do not trust the input, further process sandboxing is\nadvisable.\n\nHowever we do perform fuzzing of the parsers, and fix and crash bugs that are\nfound by fuzzing.\n\n* **Fixed crash bugs found by fuzzing** (#173, #175)\n\n## [Bloaty McBloatface v1.0](https://github.com/google/bloaty/releases/tag/v1.0) (2018-08-07)\n\nThis is the first formal release of Bloaty.\n\nChanges since Bloaty was [first announced in Nov\n2016](http://blog.reverberate.org/2016/11/07/introducing-bloaty-mcbloatface.html):\n\n* **Much better coverage / data quality**: Bloaty now properly attributes\n  sections of the binary like the symbol table, debugging information,\n  relocations, and frame unwinding info. We even disassemble the binary looking\n  for references to anonymous data members that do not have symbol table\n  entries. This all means higher quality output, and much less of the binary is\n  attributed to `[None]`.\n* **Native Mach-O support**: Bloaty can now parse Mach-O files directly,\n  instead of shelling out to other programs. The result is much faster and\n  higher-quality output for Mach-O. Also the data sources that require debug\n  info (like `-d compileunits`) now work with Mach-O.\n* **WebAssembly support (EXPERIMENTAL)**: Bloaty can analyze sections and\n  symbols in binary WebAssembly files.\n* **Native C++ Demangling**: Bloaty can now demangle C++ symbols without\n  shelling out to `c++filt`. There are two separate demangling modes, one which\n  strips all template parameters and parameter/return types (`shortsymbols`) and\n  one that returns full demangled names (`fullsymbols`).\n* **Profiling stripped binaries**: Bloaty can read symbols and debug info from\n  separate files. This allows you to profile stripped binaries.\n* **Parallel file parsing**: If you pass multiple files to Bloaty, it will\n  scan them in parallel. If you are parsing lots of files and have lots of CPUs,\n  this can save a lot of time.\n* **Configuration files**: All options you can specify on the command-line can\n  be put in a configuration file instead (and vice versa). This is helpful if\n  the options might otherwise overflow the command-line (for example, if you\n  are parsing thousands of files). It also lets you save bits of configuration\n  to a file for reuse.\n* **Custom data sources**: you can create your own data sources by applying\n  regexes to the built-in sources. This lets you bucket symbols, source files,\n  etc. in ways that make sense for your project.\n* **CSV/TSV output**: this is a robust way to parse Bloaty's output and use it\n  in other programs. (The default, human-readable output is not designed to be\n  parsed and its format may change in backward-incompatible ways).\n* **Lots of bugfixes**: Fixed lots of bugs that people reported in various\n  platforms and configurations. Bloaty is fuzzed regularly now, and this has\n  led to many bugfixes also.\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 13.80859375,
          "content": "cmake_minimum_required(VERSION 3.5)\ncmake_policy(SET CMP0048 NEW)\nif(POLICY CMP0091)\n  cmake_policy(SET CMP0091 NEW)\nendif()\nproject (Bloaty VERSION 1.1)\ninclude(CTest)\nset(CMAKE_CXX_STANDARD 17)\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)  # Group projects in visual studio\n\n# Options we define for users.\noption(BLOATY_ENABLE_ASAN \"Enable address sanitizer.\" OFF)\noption(BLOATY_ENABLE_UBSAN \"Enable undefined behavior sanitizer.\" OFF)\noption(BLOATY_ENABLE_CMAKETARGETS \"Enable installing cmake target files.\" ON)\noption(BLOATY_ENABLE_BUILDID \"Enable build id.\" ON)\noption(BLOATY_ENABLE_RE2 \"Enable the support for regular expression functions.\" ON)\noption(BLOATY_PREFER_SYSTEM_CAPSTONE \"Prefer to use the system capstone if available\" YES)\n\nif(UNIX OR MINGW)\nfind_package(PkgConfig)\nfind_package(ZLIB)\nif(BLOATY_ENABLE_RE2)\n  pkg_search_module(RE2 re2)\nendif()\nif(BLOATY_PREFER_SYSTEM_CAPSTONE)\n  pkg_search_module(CAPSTONE capstone)\nendif()\npkg_search_module(PROTOBUF protobuf)\nif(BLOATY_ENABLE_RE2)\n  if(RE2_FOUND)\n    MESSAGE(STATUS \"System re2 found, using\")\n  else()\n    MESSAGE(STATUS \"System re2 not found, using bundled version\")\n  endif()\nendif()\nif(CAPSTONE_FOUND)\n  MESSAGE(STATUS \"System capstone found, using\")\nelse()\n  MESSAGE(STATUS \"System capstone not found, using bundled version\")\nendif()\nif(PROTOBUF_FOUND)\n  MESSAGE(STATUS \"System protobuf found, using\")\nelse()\n  MESSAGE(STATUS \"System protobuf not found, using bundled version\")\nendif()\nif (ZLIB_FOUND)\n  MESSAGE(STATUS \"System zlib found, using\")\nelse()\n  MESSAGE(STATUS \"System zlib not found, using bundled version\")\nendif()\nendif()\n\nfind_package(absl CONFIG)\nif(absl_FOUND)\n  MESSAGE(STATUS \"System absl found, using\")\nelse()\n  MESSAGE(STATUS \"System absl not found, using bundled version\")\nendif()\n\n# Set default build type.\nif(NOT CMAKE_BUILD_TYPE)\n  message(STATUS \"Setting build type to 'RelWithDebInfo' as none was specified.\")\n  set(CMAKE_BUILD_TYPE \"RelWithDebInfo\" CACHE STRING\n      \"Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel.\"\n      FORCE)\nendif()\n\n# Check out Git submodules.\nif (EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/.gitmodules\")\n  execute_process (COMMAND git submodule update --init --recursive\n                   WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})\nendif()\n\n# Add third_party libraries, disabling as much as we can of their builds.\n\nadd_definitions(-D_LIBCXXABI_FUNC_VIS=)  # For Demumble.\nif(BLOATY_ENABLE_RE2)\n  add_definitions(-DUSE_RE2)\nendif()\n\n# Set MSVC runtime before including thirdparty libraries\nif(MSVC)\n  if(CMAKE_VERSION VERSION_GREATER_EQUAL 3.15)\n    set(CMAKE_MSVC_RUNTIME_LIBRARY MultiThreaded$<$<CONFIG:Debug>:Debug>)\n  else()\n    # Link also the runtime library statically so that MSVCR*.DLL is not required at runtime.\n    # https://msdn.microsoft.com/en-us/library/2kzt1wy3.aspx\n    # This is achieved by replacing msvc option /MD with /MT and /MDd with /MTd\n    # http://www.cmake.org/Wiki/CMake_FAQ#How_can_I_build_my_MSVC_application_with_a_static_runtime.3F\n    foreach(flag_var\n        CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE\n        CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)\n      if (flag_var MATCHES \"/MD\")\n        string(REGEX REPLACE \"/MD\" \"/MT\" ${flag_var} \"${${flag_var}}\")\n      endif()\n    endforeach()\n  endif()\nendif()\n\nset(THREADS_PREFER_PTHREAD_FLAG TRUE)\nfind_package(Threads REQUIRED)\n\nif(UNIX OR MINGW)\n  if(BLOATY_ENABLE_RE2)\n    if(RE2_FOUND)\n      include_directories(${RE2_INCLUDE_DIRS})\n    else()\n      set(RE2_BUILD_TESTING OFF CACHE BOOL \"enable testing for RE2\" FORCE)\n      add_subdirectory(third_party/re2)\n      include_directories(third_party/re2)\n    endif()\n  endif()\n  if(CAPSTONE_FOUND)\n    include_directories(${CAPSTONE_INCLUDE_DIRS})\n  else()\n    set(CAPSTONE_BUILD_SHARED OFF CACHE BOOL \"Build shared library\" FORCE)\n    set(CAPSTONE_BUILD_TESTS OFF CACHE BOOL \"Build tests\" FORCE)\n    add_subdirectory(third_party/capstone)\n    include_directories(third_party/capstone/include)\n  endif()\n  if(PROTOBUF_FOUND)\n    include_directories(${PROTOBUF_INCLUDE_DIRS})\n  else()\n    set(protobuf_BUILD_TESTS OFF CACHE BOOL \"enable tests for proto2\" FORCE)\n    set(protobuf_BUILD_SHARED_LIBS OFF CACHE BOOL \"enable shared libs for proto2\" FORCE)\n    add_subdirectory(third_party/protobuf/cmake)\n    include_directories(SYSTEM third_party/protobuf/src)\n  endif()\n  if(NOT ZLIB_FOUND)\n    add_subdirectory(third_party/zlib)\n    include_directories(SYSTEM third_party/zlib)\n  endif()\nelse()\n  if(BLOATY_ENABLE_RE2)\n    set(RE2_BUILD_TESTING OFF CACHE BOOL \"enable testing for RE2\" FORCE)\n    add_subdirectory(third_party/re2)\n    include_directories(third_party/re2)\n    set_property(TARGET re2 PROPERTY FOLDER \"third_party\")\n  endif()\n\n  set(CAPSTONE_BUILD_SHARED OFF CACHE BOOL \"Build shared library\" FORCE)\n  set(CAPSTONE_BUILD_TESTS OFF CACHE BOOL \"Build tests\" FORCE)\n  add_subdirectory(third_party/capstone)\n  include_directories(third_party/capstone/include)\n  set_property(TARGET capstone-static PROPERTY FOLDER \"third_party\")\n\n  set(protobuf_BUILD_TESTS OFF CACHE BOOL \"enable tests for proto2\" FORCE)\n  set(protobuf_BUILD_SHARED_LIBS OFF CACHE BOOL \"enable shared libs for proto2\" FORCE)\n  add_subdirectory(third_party/protobuf/cmake)\n  include_directories(SYSTEM third_party/protobuf/src)\n\n  add_subdirectory(third_party/zlib)\n  include_directories(third_party/zlib)\n  include_directories(${CMAKE_CURRENT_BINARY_DIR}/third_party/zlib)\n  set_property(TARGET example PROPERTY FOLDER \"third_party\")\n  set_property(TARGET minigzip PROPERTY FOLDER \"third_party\")\n  set_property(TARGET zlib PROPERTY FOLDER \"third_party\")\n  set_property(TARGET zlibstatic PROPERTY FOLDER \"third_party\")\n  set_property(TARGET libprotobuf PROPERTY FOLDER \"third_party\")\n  set_property(TARGET libprotobuf-lite PROPERTY FOLDER \"third_party\")\n  set_property(TARGET libprotoc PROPERTY FOLDER \"third_party\")\n  set_property(TARGET protoc PROPERTY FOLDER \"third_party\")\nendif()\n\ninclude_directories(.)\ninclude_directories(src)\nif(NOT absl_FOUND)\n  include_directories(third_party/abseil-cpp)\nendif()\ninclude_directories(\"${CMAKE_CURRENT_BINARY_DIR}/src\")\n\n# Baseline build flags.\nif(MSVC)\n  set(CMAKE_CXX_FLAGS \"/EHsc /wd4018 /D_CRT_SECURE_NO_WARNINGS /DNOMINMAX\")\nelse()\n  set(CMAKE_CXX_FLAGS \"-W -Wall -Wno-sign-compare\")\n  set(CMAKE_CXX_FLAGS_DEBUG \"-g1\")\n  set(CMAKE_CXX_FLAGS_RELEASE \"-O2\")\n  set(CMAKE_CXX_FLAGS_RELWITHDEBINFO \"-O2 -g1\")\n  set_source_files_properties(third_party/demumble/third_party/libcxxabi/cxa_demangle.cpp PROPERTIES COMPILE_FLAGS -Wno-implicit-fallthrough)\nendif()\n\nif(APPLE)\nelseif(UNIX)\n  if(BLOATY_ENABLE_BUILDID)\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -Wl,--build-id\")\n  endif()\nendif()\n\n# When using Ninja, compiler output won't be colorized without this.\ninclude(CheckCXXCompilerFlag)\nCHECK_CXX_COMPILER_FLAG(-fdiagnostics-color=always SUPPORTS_COLOR_ALWAYS)\nif(SUPPORTS_COLOR_ALWAYS)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fdiagnostics-color=always\")\nendif()\n\n# Implement ASAN/UBSAN options\nif(BLOATY_ENABLE_ASAN)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=address\")\n  set(CMAKE_LINKER_FLAGS_DEBUG \"${CMAKE_LINKER_FLAGS_DEBUG} -fsanitize=address\")\nendif()\n\nif(BLOATY_ENABLE_UBSAN)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=undefined\")\n  set(CMAKE_LINKER_FLAGS_DEBUG \"${CMAKE_LINKER_FLAGS_DEBUG} -fsanitize=undefined\")\nendif()\n\nif(DEFINED ENV{CXXFLAGS})\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} $ENV{CXXFLAGS}\")\nendif()\n\nfile(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/src)\nif(PROTOC_FOUND)\nadd_custom_command(\n  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/src/bloaty.pb.cc\n  DEPENDS protoc ${CMAKE_CURRENT_SOURCE_DIR}/src/bloaty.proto\n  COMMAND protoc ${CMAKE_CURRENT_SOURCE_DIR}/src/bloaty.proto\n      --cpp_out=${CMAKE_CURRENT_BINARY_DIR}/src\n      -I${CMAKE_CURRENT_SOURCE_DIR}/src\n)\nelse()\nadd_custom_command(\n  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/src/bloaty.pb.cc\n  COMMAND protoc ${CMAKE_CURRENT_SOURCE_DIR}/src/bloaty.proto\n      --cpp_out=${CMAKE_CURRENT_BINARY_DIR}/src\n      -I${CMAKE_CURRENT_SOURCE_DIR}/src\n)\nendif()\n\nfile(COPY ${CMAKE_CURRENT_SOURCE_DIR}/src/bloaty_package.bloaty\n     DESTINATION ${CMAKE_CURRENT_BINARY_DIR})\n\nadd_library(libbloaty STATIC\n    src/bloaty.cc\n    src/bloaty.h\n    src/disassemble.cc\n    ${CMAKE_CURRENT_BINARY_DIR}/src/bloaty.pb.cc\n    src/dwarf/attr.h\n    src/dwarf/attr.cc\n    src/dwarf/dwarf_util.cc\n    src/dwarf/debug_info.cc\n    src/dwarf/line_info.cc\n    src/dwarf.cc\n    src/dwarf_constants.h\n    src/eh_frame.cc\n    src/elf.cc\n    src/macho.cc\n    src/pe.cc\n    third_party/lief_pe/pe_structures.h\n    src/range_map.cc\n    src/range_map.h\n    src/re.h\n    src/source_map.cc\n    src/source_map.h\n    src/util.cc\n    src/util.h\n    src/webassembly.cc\n    # One source file, no special build system needed.\n    third_party/demumble/third_party/libcxxabi/cxa_demangle.cpp\n    )\nset_property(TARGET libbloaty PROPERTY FOLDER \"bloaty\")\n\nif(UNIX OR MINGW)\n  set(LIBBLOATY_LIBS libbloaty)\n  if(PROTOBUF_FOUND)\n    list(APPEND LIBBLOATY_LIBS ${PROTOBUF_LIBRARIES})\n  else()\n    list(APPEND LIBBLOATY_LIBS libprotoc)\n  endif()\n  if(BLOATY_ENABLE_RE2)\n    if(RE2_FOUND)\n      list(APPEND LIBBLOATY_LIBS ${RE2_LIBRARIES})\n    else()\n      list(APPEND LIBBLOATY_LIBS re2)\n    endif()\n  endif()\n  if(CAPSTONE_FOUND)\n    list(APPEND LIBBLOATY_LIBS ${CAPSTONE_LIBRARIES})\n  else()\n    list(APPEND LIBBLOATY_LIBS capstone-static)\n  endif()\n  if(ZLIB_FOUND)\n    list(APPEND LIBBLOATY_LIBS ZLIB::ZLIB)\n  else()\n    list(APPEND LIBBLOATY_LIBS zlibstatic)\n  endif()\nelse()\n  set(LIBBLOATY_LIBS libbloaty libprotoc capstone-static)\n  if(BLOATY_ENABLE_RE2)\n    list(APPEND LIBBLOATY_LIBS  re2)\n  endif()\n  list(APPEND LIBBLOATY_LIBS zlibstatic)\nendif()\n\nif(UNIX OR MINGW)\n  if(BLOATY_ENABLE_RE2)\n    if(RE2_FOUND)\n      link_directories(${RE2_LIBRARY_DIRS})\n    endif()\n  endif()\n  if(CAPSTONE_FOUND)\n    link_directories(${CAPSTONE_LIBRARY_DIRS})\n  endif()\n  if(PROTOBUF_FOUND)\n    link_directories(${PROTOBUF_LIBRARY_DIRS})\n  endif()\nendif()\n\nif(NOT absl_FOUND)\n  set(BLOATY_BUILD_TESTING_SAVE \"${BUILD_TESTING}\")\n  set(BUILD_TESTING OFF)\n  set(ABSL_MSVC_STATIC_RUNTIME ON)\n  add_subdirectory(third_party/abseil-cpp)\n  set(BUILD_TESTING \"${BLOATY_BUILD_TESTING_SAVE}\")\nendif()\nlist(APPEND LIBBLOATY_LIBS absl::strings)\nlist(APPEND LIBBLOATY_LIBS absl::optional)\nlist(APPEND LIBBLOATY_LIBS absl::demangle_internal)\nlist(APPEND LIBBLOATY_LIBS Threads::Threads)\n\nif(DEFINED ENV{LIB_FUZZING_ENGINE})\n  message(\"LIB_FUZZING_ENGINE set, building fuzz_target instead of Bloaty\")\n  add_executable(fuzz_target tests/fuzz_target.cc)\n  target_link_libraries(fuzz_target ${LIBBLOATY_LIBS} $ENV{LIB_FUZZING_ENGINE})\nelse()\n  add_executable(bloaty src/main.cc)\n  target_link_libraries(bloaty ${LIBBLOATY_LIBS})\n\n  set_property(TARGET bloaty PROPERTY FOLDER \"bloaty\")\n\n  if(BLOATY_ENABLE_CMAKETARGETS)\n    install(\n      TARGETS bloaty\n      EXPORT ${PROJECT_NAME}Targets\n      RUNTIME DESTINATION bin\n    )\n  else()\n    install(\n      TARGETS bloaty\n      RUNTIME DESTINATION bin\n    )\n  endif()\n\n  if (IS_DIRECTORY \"${PROJECT_SOURCE_DIR}/tests\")\n    enable_testing()\n\n    find_package(Python COMPONENTS Interpreter)\n    find_program(LIT_EXECUTABLE NAMES lit-script.py lit.py lit)\n    find_program(FILECHECK_EXECUTABLE FileCheck)\n    find_program(YAML2OBJ_EXECUTABLE yaml2obj)\n    if(Python_FOUND AND LIT_EXECUTABLE AND FILECHECK_EXECUTABLE AND YAML2OBJ_EXECUTABLE)\n      set(BLOATY_SRC_DIR ${PROJECT_SOURCE_DIR})\n      set(BLOATY_OBJ_DIR ${PROJECT_BINARY_DIR})\n      configure_file(tests/lit.site.cfg.in tests/lit.site.cfg @ONLY)\n\n      add_custom_target(check-bloaty\n        COMMAND ${Python_EXECUTABLE} ${LIT_EXECUTABLE} -sv ${PROJECT_BINARY_DIR}/tests --param bloaty=$<TARGET_FILE:bloaty>\n        DEPENDS\n          bloaty\n          ${CMAKE_CURRENT_SOURCE_DIR}/tests/lit.cfg\n          ${CMAKE_CURRENT_BINARY_DIR}/tests/lit.site.cfg\n        COMMENT \"Running bloaty tests...\"\n        USES_TERMINAL)\n      set_property(TARGET check-bloaty PROPERTY FOLDER \"tests\")\n    endif()\n\n    if(BUILD_TESTING)\n      option(INSTALL_GTEST \"\" OFF)\n      add_subdirectory(third_party/googletest)\n      include_directories(third_party/googletest/googletest/include)\n      include_directories(third_party/googletest/googlemock/include)\n\n      set(TEST_TARGETS\n          bloaty_test\n          bloaty_test_pe\n          bloaty_misc_test\n          range_map_test\n          )\n\n      foreach(target ${TEST_TARGETS})\n        add_executable(${target} tests/${target}.cc)\n        target_link_libraries(${target} ${LIBBLOATY_LIBS} gtest_main gmock)\n        set_property(TARGET ${target} PROPERTY FOLDER \"tests\")\n      endforeach(target)\n\n      add_executable(fuzz_test tests/fuzz_target.cc tests/fuzz_driver.cc)\n      target_link_libraries(fuzz_test ${LIBBLOATY_LIBS})\n      set_property(TARGET fuzz_test PROPERTY FOLDER \"tests\")\n\n      foreach(testlib gmock gmock_main gtest gtest_main)\n        set_property(TARGET ${testlib} PROPERTY FOLDER \"tests/libs\")\n      endforeach(testlib)\n\n      file(GLOB fuzz_corpus tests/testdata/fuzz_corpus/*)\n\n      add_test(NAME range_map_test COMMAND range_map_test)\n      add_test(NAME bloaty_test_x86-64 COMMAND bloaty_test WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/tests/testdata/linux-x86_64)\n      add_test(NAME bloaty_test_x86 COMMAND bloaty_test WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/tests/testdata/linux-x86)\n      add_test(NAME bloaty_test_pe_x64 COMMAND bloaty_test_pe WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/tests/testdata/PE/x64)\n      add_test(NAME bloaty_test_pe_x86 COMMAND bloaty_test_pe WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/tests/testdata/PE/x86)\n      add_test(NAME bloaty_misc_test COMMAND bloaty_misc_test WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/tests/testdata/misc)\n      add_test(NAME fuzz_test COMMAND fuzz_test ${fuzz_corpus} WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/tests/testdata/fuzz_corpus)\n    endif()\n  endif()\n\n  if(BLOATY_ENABLE_CMAKETARGETS)\n    install(EXPORT ${PROJECT_NAME}Targets NAMESPACE ${PROJECT_NAME} DESTINATION lib/${PROJECT_NAME})\n  endif()\nendif()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.9052734375,
          "content": "Want to contribute? Great! First, read this page (including\nthe small print at the end).\n\n### Get in touch\n\nIf your idea will take you more than, say, 30 minutes to\nimplement, please get in touch first via the issue tracker\nto touch base about your plan.  That will give an\nopportunity for early feedback and help avoid wasting your\ntime.\n\n### Add tests\n\nPlease add tests for any new features or bugfixes.  Bloaty\nhas a lot of functionality (different data sources, file\nformats, diff mode, hierarchical reports, etc).  Having\ntests helps ensure that we don't regress any of these\nfeatures.\n\n### Coding style\n\nPlease follow the [Google C++ Style\nGuide](https://google.github.io/styleguide/cppguide.html). I\nrecommend using `clang-format`, [which has a preset for the\nGoogle Style\nGuide](http://clang.llvm.org/docs/ClangFormatStyleOptions.html)\n\n### Code reviews\n\nAll submissions, including submissions by project members,\nrequire review. We use Github pull requests for this\npurpose.\n\n### Legal Requirements\nBefore we can use your code, you must sign the [Google\nIndividual Contributor License\nAgreement](https://cla.developers.google.com/about/google-individual)\n(CLA), which you can do online. The CLA is necessary mainly\nbecause you own the copyright to your changes, even after\nyour contribution becomes part of our codebase, so we need\nyour permission to use and distribute your code. We also\nneed to be sure of various other things—for instance that\nyou'll tell us if you know that your code infringes on other\npeople's patents. You don't have to sign the CLA until after\nyou've submitted your code for review and a member has\napproved it, but you must do it before we can put your code\ninto our codebase.\n\n### The small print\nContributions made by corporations are covered by a\ndifferent agreement than the one above, the [Software Grant\nand Corporate Contributor License\nAgreement](https://cla.developers.google.com/about/google-corporate).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.232421875,
          "content": "\n# Bloaty: a size profiler for binaries\n\n[![build](https://github.com/google/bloaty/actions/workflows/build.yml/badge.svg)](https://github.com/google/bloaty/actions/workflows/build.yml)\n\nEver wondered what's making your binary big?  Bloaty will\nshow you a size profile of the binary so you can understand\nwhat's taking up space inside.\n\n```cmdoutput\n$ ./bloaty bloaty -d compileunits\n    FILE SIZE        VM SIZE    \n --------------  -------------- \n  34.8%  10.2Mi  43.4%  2.91Mi    [163 Others]\n  17.2%  5.08Mi   4.3%   295Ki    third_party/protobuf/src/google/protobuf/descriptor.cc\n   7.3%  2.14Mi   2.6%   179Ki    third_party/protobuf/src/google/protobuf/descriptor.pb.cc\n   4.6%  1.36Mi   1.1%  78.4Ki    third_party/protobuf/src/google/protobuf/text_format.cc\n   3.7%  1.10Mi   4.5%   311Ki    third_party/capstone/arch/ARM/ARMDisassembler.c\n   1.3%   399Ki  15.9%  1.07Mi    third_party/capstone/arch/M68K/M68KDisassembler.c\n   3.2%   980Ki   1.1%  75.3Ki    third_party/protobuf/src/google/protobuf/generated_message_reflection.cc\n   3.2%   965Ki   0.6%  40.7Ki    third_party/protobuf/src/google/protobuf/descriptor_database.cc\n   2.8%   854Ki  12.0%   819Ki    third_party/capstone/arch/X86/X86Mapping.c\n   2.8%   846Ki   1.0%  66.4Ki    third_party/protobuf/src/google/protobuf/extension_set.cc\n   2.7%   800Ki   0.6%  41.2Ki    third_party/protobuf/src/google/protobuf/generated_message_util.cc\n   2.3%   709Ki   0.7%  50.7Ki    third_party/protobuf/src/google/protobuf/wire_format.cc\n   2.1%   637Ki   1.7%   117Ki    third_party/demumble/third_party/libcxxabi/cxa_demangle.cpp\n   1.8%   549Ki   1.7%   114Ki    src/bloaty.cc\n   1.7%   503Ki   0.7%  48.1Ki    third_party/protobuf/src/google/protobuf/repeated_field.cc\n   1.6%   469Ki   6.2%   427Ki    third_party/capstone/arch/X86/X86DisassemblerDecoder.c\n   1.4%   434Ki   0.2%  15.9Ki    third_party/protobuf/src/google/protobuf/message.cc\n   1.4%   422Ki   0.3%  23.4Ki    third_party/re2/re2/dfa.cc\n   1.3%   407Ki   0.4%  24.9Ki    third_party/re2/re2/regexp.cc\n   1.3%   407Ki   0.4%  29.9Ki    third_party/protobuf/src/google/protobuf/map_field.cc\n   1.3%   397Ki   0.4%  24.8Ki    third_party/re2/re2/re2.cc\n 100.0%  29.5Mi 100.0%  6.69Mi    TOTAL\n```\n\nBloaty performs a deep analysis of the binary. Using custom\nELF, DWARF, and Mach-O parsers, Bloaty aims to accurately\nattribute every byte of the binary to the symbol or\ncompileunit that produced it. It will even disassemble the\nbinary looking for references to anonymous data.\n\nBloaty supports many features:\n\n- **file formats:** ELF, Mach-O, PE/COFF (experimental), WebAssembly (experimental)\n- **data sources:** compileunit (shown above), symbol, section, segment, etc.\n- **hierarchical profiles:** combine multiple data sources into a single report\n- **size diffs:** see where the binary grew, perfect for CI tests\n- **separate debug files:** strip the binary under test, while making debug data available for analysis\n- **flexible demangling:** demangle C++ symbols, optionally discarding function/template parameters\n- **custom data sources:** regex rewrites of built-in data sources, for custom munging/bucketing\n- **regex filtering:** filter out parts of the binary that do or don't match a given regex\n- **easy to deploy:** statically-linked C++ binary, easy to copy around\n\nFor detailed info on all of Bloaty's features, see the [User\nDocumentation](doc/using.md).\n\nFor more information about the analysis performed by Bloaty,\nplease see [How Bloaty Works](doc/how-bloaty-works.md).\n\n\n## Install\n\nTo build, use `cmake`. For example:\n\n```\n$ cmake -B build -G Ninja -S .\n$ cmake --build build\n$ cmake --build build --target install\n```\n\nBloaty bundles ``libprotobuf``, ``re2``, ``capstone``, and\n``pkg-config`` as Git submodules, and uses ``protoc`` build\nfrom libprotobuf, but it will prefer the system's versions\nof those dependencies if available. All other dependencies\nare included as Git submodules.\n\nIf the Git repository hasn't been cloned with the\n`--recursive`, the submodules can be checked out with:\n\n```\n$ git submodule update --init --recursive\n```\n\nTo run the tests, see the info in\n[tests/README.md](tests/README.md).\n\n## Support\n\nGitHub issues and PRs welcome.  Please include tests when possible, see: \n[tests/README.md](tests/README.md).\n\nThis is not an official Google product.\n"
        },
        {
          "name": "config.bloaty",
          "type": "blob",
          "size": 0.234375,
          "content": "custom_data_source: {\n  name: \"bloaty_package\"\n  base_data_source: \"compileunits\"\n\n  rewrite: {\n    pattern: \"^(\\\\.\\\\./)?src\"\n    replacement: \"src\"\n  }\n  rewrite: {\n    pattern: \"^(\\\\.\\\\./)?(third_party/\\\\w+)\"\n    replacement: \"\\\\2\"\n  }\n}\n"
        },
        {
          "name": "custom_sources.bloaty",
          "type": "blob",
          "size": 4.21875,
          "content": "\n# Custom data sources that are generally useful, so we ship them\n# with Bloaty.\n\n##\n# class_or_namespace: grabs everything up until the last \"::\".\n#\n# This is especially useful when paired with shortsymbols, eg.\n#\n#      VM SIZE                                                                                        FILE SIZE\n# --------------                                                                                  --------------\n#  37.6%  4.18Mi [None]                                                                            4.17Mi  37.6%\n#  30.9%  3.44Mi [Other]                                                                           3.44Mi  30.9%\n#   5.7%   648Ki insns                                                                              648Ki   5.7%\n#   2.9%   330Ki printAliasInstr                                                                    330Ki   2.9%\n#   2.9%   326Ki __cxxabiv1::(anonymous namespace)                                                  326Ki   2.9%\n#      23.6%  77.1Ki [Other]                                                                           77.1Ki  23.6%\n#      12.7%  41.5Ki __cxxabiv1::(anonymous namespace)::parse_type<>()                                 41.5Ki  12.7%\n#      10.1%  32.9Ki __cxxabiv1::(anonymous namespace)::parse_expression<>()                           32.9Ki  10.1%\n#      <...>\n#   2.7%   306Ki std::__1::__tree<>                                                                 306Ki   2.7%\n#      27.2%  83.3Ki std::__1::__tree<>::__find_equal<>()                                              83.3Ki  27.2%\n#      20.9%  64.0Ki std::__1::__tree<>::__construct_node()                                            64.0Ki  20.9%\n#      12.6%  38.8Ki std::__1::__tree<>::find<>()                                                      38.8Ki  12.6%\n#      <...>\n#   2.2%   247Ki std::__1::__hash_table<>                                                           247Ki   2.2%\n#      23.6%  58.5Ki std::__1::__hash_table<>::__rehash()                                              58.5Ki  23.6%\n#      20.3%  50.2Ki std::__1::__hash_table<>::__construct_node_hash()                                 50.2Ki  20.3%\n#      15.4%  38.2Ki std::__1::__hash_table<>::find<>()                                                38.2Ki  15.4%\n#      <...>\n#   1.8%   208Ki google::protobuf                                                                   207Ki   1.8%\n#      35.2%  73.2Ki google::protobuf::InsertIfNotPresent<>()                                          73.2Ki  35.2%\n#      25.8%  53.7Ki [Other]                                                                           53.4Ki  25.7%\n#       6.1%  12.7Ki google::protobuf::StrCat()                                                        12.7Ki   6.1%\n#      <...>\n#\n# etc.\n\ncustom_data_source: {\n  name: \"class_or_namespace\"\n  base_data_source: \"shortsymbols\"\n\n  rewrite: {\n    pattern: \"^(.*)::[^:]+$\"\n    replacement: \"\\\\1\"\n  }\n}\n\n##\n# stripped_sections: the base section name\n#\n# This is useful when you are profiling object files that you have compiled\n# with -ffunction-sections/-fdata-sections.  Normally this makes \"-d sections\"\n# very noisy, because every function has a distinct section name.  This\n# removes the noise and gives you a base section name.\ncustom_data_source: {\n  name: \"stripped_sections\"\n  base_data_source: \"sections\"\n\n rewrite: {\n    pattern: \"^\\\\.text\"\n    replacement: \".text\"\n  }\n  rewrite: {\n    pattern: \"^\\\\.data.rel.ro\"\n    replacement: \".data.rel.ro\"\n  }\n  rewrite: {\n    pattern: \"^\\\\.data\"\n    replacement: \".data\"\n  }\n  rewrite: {\n    pattern: \"^\\\\.rela\\\\.text\"\n    replacement: \".rela.text\"\n  }\n  rewrite: {\n    pattern: \"^.rela.data.rel.ro\"\n    replacement: \".rela.data.rel.ro\"\n  }\n  rewrite: {\n    pattern: \"^.rela.rodata\"\n    replacement: \".rela.rodata\"\n  }\n  rewrite: {\n    pattern: \"^.rela.data\"\n    replacement: \".rela.data\"\n  }\n  rewrite: {\n    pattern: \"^.tdata\"\n    replacement: \".tdata\"\n  }\n  rewrite: {\n    pattern: \"^.rodata\"\n    replacement: \".rodata\"\n  }\n  rewrite: {\n    pattern: \"^.bss\"\n    replacement: \".bss\"\n  }\n  rewrite: {\n    pattern: \"^.tbss\"\n    replacement: \".tbss\"\n  }\n}\n\ncustom_data_source: {\n  name: \"section_prefix\"\n  base_data_source: \"sections\"\n  rewrite: {\n    pattern: \"^(\\\\.[^.]+)\"\n    replacement: \"\\\\1\"\n  }\n}\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "make-release-tarball.sh",
          "type": "blob",
          "size": 1.146484375,
          "content": "#!/usr/bin/env bash\n\n# Makes a release tarball.  We include our dependencies/submodules,\n# but we heavily prune their file lists to avoid including lots of\n# extraneous baggage.  We also leave out Bloaty's tests, especially\n# because some of the test data is large.\n\nset -e\n\nif [ \"$#\" -ne 1 ]; then\n  echo \"Usage: make-release.tarball.sh VERSION\"\n  exit 1\nfi\n\nVERSION=$1\n\nFILES=$(git ls-files --exclude-standard --recurse-submodules |\n          grep -v googletest |\n          grep -v ^tests |\n          grep -v third_party/protobuf |\n          grep -v 'third_party/capstone/\\(suite\\|bindings\\|xcode\\|msvc\\|contrib\\)' |\n          grep -v third_party/abseil-cpp/absl/time/internal/cctz/testdata |\n          grep -v ^.git)\nFILES=\"$FILES $(git ls-files --exclude-standard --recurse-submodules |\n          grep 'third_party/protobuf/\\(src\\|cmake\\|configure.ac\\)')\"\n\n# Unfortunately tar on Mac doesn't support --transform, so we have to\n# actually move our files to a different directory to get the prefix.\nDIR=/tmp/bloaty-$VERSION\nrm -rf $DIR\nmkdir $DIR\nrsync -R $FILES $DIR\n\nBASE=$PWD\ncd /tmp\nOUT=bloaty-$VERSION.tar.bz2\ntar cjf $BASE/$OUT bloaty-$VERSION\n\necho \"Created $OUT\"\n\n"
        },
        {
          "name": "regen-readme.py",
          "type": "blob",
          "size": 0.681640625,
          "content": "#!/usr/bin/env python\n\nimport subprocess\nimport os\nimport sys\n\nbasedir = os.path.dirname(sys.argv[0])\nreadme = os.path.join(basedir, \"doc/using.md\")\n\nwith open(readme) as f:\n  inp = f.read()\n\nout = \"\"\n\nit = iter(inp.splitlines(True))\n\nfor line in it:\n  out += line\n  if line.startswith(\"```cmdoutput\"):\n    # Get command.\n    cmd = next(it)\n    assert cmd.startswith(\"$ \"), cmd\n    real_cmd = cmd[2:].strip()\n    out += cmd\n\n    print(\"Running: \" + real_cmd)\n    out += subprocess.check_output(real_cmd, shell=True)\n\n    # Skip pre-existing command output.\n    line = next(it)\n    while not line.startswith(\"```\"):\n      line = next(it)\n    out += line\n\nwith open(readme, \"w\") as f:\n  f.write(out)\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}