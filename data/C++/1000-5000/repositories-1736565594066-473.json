{
  "metadata": {
    "timestamp": 1736565594066,
    "page": 473,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Zylann/godot_voxel",
      "stars": 2760,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 6.0400390625,
          "content": "# Commented out parameters are those with the same value as base LLVM style.\n# We can uncomment them if we want to change their value, or enforce the\n# chosen value in case the base style changes (last sync: Clang 13.0).\n---\n### General config, applies to all languages ###\nBasedOnStyle:  LLVM\nAccessModifierOffset: -4\nAlignAfterOpenBracket: BlockIndent\n# AlignArrayOfStructures: None\n# AlignConsecutiveMacros: None\n# AlignConsecutiveAssignments: None\n# AlignConsecutiveBitFields: None\n# AlignConsecutiveDeclarations: None\n# AlignEscapedNewlines: Right\nAlignOperands:   DontAlign\nAlignTrailingComments: false\n# AllowAllArgumentsOnNextLine: true\n# AllowAllConstructorInitializersOnNextLine: true\nAllowAllParametersOfDeclarationOnNextLine: false\n\n# TODO Formatting: I want this, but if I enable it, enums will always end up with a line break before the opening brace,\n# even if I set `BreakBeforeBraces: Attach` or specify `BraceWrapping`...\n# AllowShortEnumsOnASingleLine: false\n\n# AllowShortBlocksOnASingleLine: Never\n# AllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: Empty\n# AllowShortLambdasOnASingleLine: All\n# AllowShortIfStatementsOnASingleLine: Never\n# AllowShortLoopsOnASingleLine: false\n# AlwaysBreakAfterDefinitionReturnType: None\n# AlwaysBreakAfterReturnType: None\n# AlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: Yes\nBreakAfterReturnType: Automatic\n# AttributeMacros:\n#   - __capability\nBinPackArguments: false\nBinPackParameters: false\n#BraceWrapping:\n#   AfterCaseLabel:  false\n#   AfterClass:      false\n#   AfterControlStatement: Never\n#   AfterEnum:       true\n#   AfterFunction:   false\n#   AfterNamespace:  false\n#   AfterObjCDeclaration: false\n#   AfterStruct:     false\n#   AfterUnion:      false\n#   AfterExternBlock: false\n#   BeforeCatch:     false\n#   BeforeElse:      false\n#   BeforeLambdaBody: false\n#   BeforeWhile:     false\n#   IndentBraces:    false\n#   SplitEmptyFunction: true\n#   SplitEmptyRecord: true\n#   SplitEmptyNamespace: true\n# BreakBeforeBinaryOperators: None\n# BreakBeforeConceptDeclarations: true\n# BreakBeforeBraces: Attach\n# BreakBeforeInheritanceComma: false\n# BreakInheritanceList: BeforeColon\n# BreakBeforeTernaryOperators: true\n# BreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: AfterColon\n# BreakStringLiterals: true\nColumnLimit:     120 # Sorry but I can't stand longer lines\n# CommentPragmas:  '^ IWYU pragma:'\n# CompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 8\nContinuationIndentWidth: 8\nCpp11BracedListStyle: false\n# DeriveLineEnding: true\n# DerivePointerAlignment: false\n# DisableFormat:   false\n# EmptyLineAfterAccessModifier: Never\n# EmptyLineBeforeAccessModifier: LogicalBlock\n# ExperimentalAutoDetectBinPacking: false\n# FixNamespaceComments: true\n# ForEachMacros:\n#   - foreach\n#   - Q_FOREACH\n#   - BOOST_FOREACH\n# IfMacros:\n#   - KJ_IF_MAYBE\n# IncludeBlocks:   Preserve\nIncludeCategories:\n  - Regex:           '\".*\"'\n    Priority:        1\n  - Regex:           '^<.*\\.h>'\n    Priority:        2\n  - Regex:           '^<.*'\n    Priority:        3\n# IncludeIsMainRegex: '(Test)?$'\n# IncludeIsMainSourceRegex: ''\n# IndentAccessModifiers: false\nIndentCaseLabels: true\n# IndentCaseBlocks: false\n# IndentGotoLabels: true\n# IndentPPDirectives: None\n# IndentExternBlock: AfterExternBlock\n# IndentRequires:  false\nIndentWidth:     4\n# IndentWrappedFunctionNames: false\n# InsertTrailingCommas: None\n# JavaScriptQuotes: Leave\n# JavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: false\n# LambdaBodyIndentation: Signature\n# MacroBlockBegin: ''\n# MacroBlockEnd:   ''\n# MaxEmptyLinesToKeep: 1\n# NamespaceIndentation: None\n# PenaltyBreakAssignment: 2\n# PenaltyBreakBeforeFirstCallParameter: 19\n# PenaltyBreakComment: 300\n# PenaltyBreakFirstLessLess: 120\n# PenaltyBreakString: 1000\n# PenaltyBreakTemplateDeclaration: 10\n# PenaltyExcessCharacter: 1000000\n\n# Original was 60. I increased it after adding `AlignAfterOpenBracket: BlockIndent` and disabling binpacking of \n# arguments, because for some reason return types sometimes ended up on their own line, not sure why.\nPenaltyReturnTypeOnItsOwnLine: 600\n\n# PenaltyIndentedWhitespace: 0\n# PointerAlignment: Right\n# PPIndentWidth:   -1\n# ReferenceAlignment: Pointer\n# ReflowComments:  true\n# ShortNamespaceLines: 1\n# SortIncludes:    CaseSensitive\n# SortJavaStaticImport: Before\n# SortUsingDeclarations: true\n# SpaceAfterCStyleCast: false\n# SpaceAfterLogicalNot: false\n# SpaceAfterTemplateKeyword: true\n# SpaceBeforeAssignmentOperators: true\n# SpaceBeforeCaseColon: false\n# SpaceBeforeCpp11BracedList: false\n# SpaceBeforeCtorInitializerColon: true\n# SpaceBeforeInheritanceColon: true\n# SpaceBeforeParens: ControlStatements\n# SpaceAroundPointerQualifiers: Default\n# SpaceBeforeRangeBasedForLoopColon: true\n# SpaceInEmptyParentheses: false\n# SpacesBeforeTrailingComments: 1\n# SpaceInEmptyBlock: false\n# SpaceInEmptyParentheses: false\n# SpacesBeforeTrailingComments: 1\n# SpacesInAngles:  Never\n# SpacesInContainerLiterals: true\n# SpacesInConditionalStatement: false\n# SpacesInContainerLiterals: true\n# SpacesInCStyleCastParentheses: false\nSpacesInLineCommentPrefix:\n  Minimum:         1\n  Maximum:         -1\n# SpacesInParentheses: false\n# SpacesInSquareBrackets: false\n# SpaceBeforeSquareBrackets: false\n# BitFieldColonSpacing: Both\n# StatementAttributeLikeMacros:\n#   - Q_EMIT\n# StatementMacros:\n#   - Q_UNUSED\n#   - QT_REQUIRE_VERSION\nTabWidth:        4\n# UseCRLF:         false\nUseTab:          Always\n# WhitespaceSensitiveMacros:\n#   - STRINGIZE\n#   - PP_STRINGIZE\n#   - BOOST_PP_STRINGIZE\n#   - NS_SWIFT_NAME\n#   - CF_SWIFT_NAME\n---\n### C++ specific config ###\nLanguage:        Cpp\nStandard:        c++17\n---\n### ObjC specific config ###\nLanguage:        ObjC\n# ObjCBinPackProtocolList: Auto\nObjCBlockIndentWidth: 4\n# ObjCBreakBeforeNestedBlockParam: true\n# ObjCSpaceAfterProperty: false\n# ObjCSpaceBeforeProtocolList: true\n---\n### Java specific config ###\nLanguage:        Java\n# BreakAfterJavaFieldAnnotations: false\nJavaImportGroups: ['org.godotengine', 'android', 'androidx', 'com.android', 'com.google', 'java', 'javax']\n...\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1337890625,
          "content": "*.autosave\n*.bc\n*.d\n*.log\n*.o\n*.obj\n*.pyc\n*.tmp\n*.dblite\n.DS_Store\n*.lib\n*.exp\n*.pdb\n*.dll\n*.ilk\n\nshaders/dev/.godot/\n*.gen.glsl\n*.gen.h\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.4150390625,
          "content": "# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\nversion: 2\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.11\"\n\nmkdocs:\n  configuration: doc/mkdocs.yml\n\npython:\n  install:\n    # Added this to fix an MkDocs error about `site_dir`\n    # https://github.com/readthedocs/readthedocs.org/issues/4974#issuecomment-735320443\n    - requirements: doc/requirements.txt\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0498046875,
          "content": "MIT License\n\nCopyright (c) 2016-2024 Marc Gilleron\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.271484375,
          "content": "Voxel Tools for Godot\n=========================\n\nA C++ module for creating volumetric worlds in Godot Engine 4.\n\n[![🚪 Windows Builds](https://github.com/Zylann/godot_voxel/actions/workflows/windows.yml/badge.svg)](https://github.com/Zylann/godot_voxel/actions/workflows/windows.yml)\n[![🐧 Linux Builds](https://github.com/Zylann/godot_voxel/actions/workflows/linux.yml/badge.svg)](https://github.com/Zylann/godot_voxel/actions/workflows/linux.yml)\n[![🐒 Mono Builds](https://github.com/Zylann/godot_voxel/actions/workflows/mono.yml/badge.svg)](https://github.com/Zylann/godot_voxel/actions/workflows/mono.yml)\n[![Documentation Status](https://readthedocs.org/projects/voxel-tools/badge/?version=latest)](https://voxel-tools.readthedocs.io/en/latest/?badge=latest)\n\n[![Discord](https://img.shields.io/discord/850070170793410582?style=flat-square&logo=discord \"Discord\")](https://discord.gg/pkXmESmrAR)\n\n![Blocky screenshot](doc/source/images/blocky_screenshot.webp)\n![Smooth screenshot](doc/source/images/smooth_screenshot.webp)\n![Textured screenshot](doc/source/images/textured-terrain.jpg)\n\nFeatures\n---------------------------\n\n- Realtime 3D terrain editable in-game (Unlike a heightmap based terrain, this allows for overhangs, tunnels, and user creation/destruction)\n- Polygon-based: voxels are transformed into chunked meshes to be rendered\n- Godot physics integration + alternate fast Minecraft-like collisions\n- Infinite terrains made by paging chunks in and out\n- Voxel data is streamed from a variety of sources, which includes the ability to write your own generators\n- Minecraft-style blocky voxel terrain, with multiple materials and baked ambient occlusion\n- Smooth terrain with level of detail using Transvoxel\n- Voxel storage using 8-bit or 16-bit channels for any general purpose\n- Instancing system to spawn foliage, rocks and other decoration on surfaces\n\nCheck the [changelog](https://voxel-tools.readthedocs.io/en/latest/changelog/) for more recent details.\n\n\nDocumentation\n---------------\n\n- [Main documentation](https://voxel-tools.readthedocs.io/en/latest/)\n- [How to get the module](https://voxel-tools.readthedocs.io/en/latest/getting_the_module/)\n- [Quick start](https://voxel-tools.readthedocs.io/en/latest/quick_start/)\n\n\nRoadmap\n---------\n\nAreas of interest:\n\n* Multiplayer synchronization\n* Smooth voxel texturing\n* Level of detail with blocky voxels\n* Make GDExtension work\n\n\nSupporters\n-----------\n\nThis module is a non-profit project developed by voluntary contributors. The following is the list of who donated at least once.\nThanks for your support :)\n\n### Gold supporters\n\n```\nAaron Franke (aaronfranke)\nBewildering\nEerrikki\n```\n\n### Silver supporters\n\n```\nTheConceptBoy\nChris Bolton (yochrisbolton)\nGamerfiend (Snowminx) \ngreenlion (Justin Swanhart) \nsegfault-god (jp.owo.Manda)\nRonanZe\nPhyronnaz\nNoFr1ends (Lynx)\nKluskey (Jared McCluskey)\nTrey2k (Trey Moller)\nmarcinn (Marcin Nowak)\nbfoster68\ngumby-cmyk\nJoshua Woods (jpw1991)\njjoshpoland (Josh)\njbbieber1127 (John Bieber)\n```\n\n### Supporters\n\n```\nrcorre (Ryan Roden-Corrent) \nduchainer (Raphaël Duchaîne)\nMadMartian\nstackdump (stackdump.eth)\nTreer\nMrGreaterThan\nlenis0012\nilievmark (Iliev Mark)\nOrbitalHare\nmatthewhilton (Matthew Hilton)\nPugulishus\nFabian (nan0m)\nSummitCollie\nnulshift\nddel-rio (Daniel del Río Román)\nCyberphinx\nMia (Tigxette)\n```\n\n\n"
        },
        {
          "name": "SConstruct",
          "type": "blob",
          "size": 3.20703125,
          "content": "#!/usr/bin/env python\n\n# This is the entry point for SCons to build this engine as a GDExtension.\n# To build as a module, see `SCsub`.\n\nimport os\nimport sys\n\nimport common\nimport voxel_version\n\nLIB_NAME = \"libvoxel\"\nBIN_FOLDER = \"project/addons/zylann.voxel/bin\"\n\nvoxel_version.generate_version_header()\n\n# TODO Enhancement: not sure how to provide this as a SCons option since we get our environment *by running GodotCpp*...\n#env_vars.Add(PathVariable(\"godot_cpp_path\", \"Path to the GodotCpp library source code\", None, PathVariable.PathIsDir))\n# TODO GDX: Have GodotCpp in thirdparty/ eventually\ngodot_cpp_path = os.environ.get(\"GODOT_CPP_PATH\", \"D:/PROJETS/INFO/GODOT/Engine/godot_cpp_fork\")\n\n# Dependency on GodotCpp.\n# Use the same cross-platform configurations.\n# TODO GDX: Make sure this isn't doing too much?\nenv = SConscript(godot_cpp_path + \"/SConstruct\")\n\n# TODO GDX: Adding our variables produces a warning when provided.\n# \"WARNING: Unknown SCons variables were passed and will be ignored\"\n# This is printed by GodotCpp's SConstruct file, which doesn't recognizes them.\n# However they seem to be taken into account in our `SConstruct` file though.\n# If such a check should exist, it needs to be HERE, not in GodotCpp.\n\nenv_vars = Variables()\n# TODO Enhancement: share options between module and extension?\nenv_vars.Add(BoolVariable(\"voxel_tests\", \n    \"Build with tests for the voxel module, which will run on startup of the engine\", False))\n# FastNoise2 is disabled by default, may want to integrate as dynamic library\nenv_vars.Add(BoolVariable(\"voxel_fast_noise_2\", \"Build FastNoise2 support (x86-only)\", True))\nenv_vars.Update(env)\nHelp(env_vars.GenerateHelpText(env))\n\nenv.Append(CPPDEFINES=[\n\t# Tell engine-agnostic code we are using Godot Engine as an extension\n\t\"ZN_GODOT_EXTENSION\"\n])\n\nis_editor_build = (env[\"target\"] == \"editor\")\n\ninclude_tests = env[\"voxel_tests\"]\nsources = common.get_sources(env, is_editor_build, include_tests)\n\n# TODO Enhancement: the way SQLite is integrated should not be duplicated between Godot and GodotCpp targets.\n# It cannot be in the common script...\n# Because when compiling with warnings=extra, SQLite produces warnings, so we have to turn them off only for SQLite.\n# But doing this requires specific code from Godot's build system, and no idea what code to use with GodotCpp...\n# Ideally I'd like to use the same code for both targets.\n# FastNoise2 has the same problem!\nsources += [\n    \"thirdparty/sqlite/sqlite3.c\"\n]\n\nsources += [\n\t\"util/thread/godot_thread_helper.cpp\",\n\n\t# GodotCpp doesn't come with RandomPCG\n\t\"util/godot/core/pcg.cpp\",\n\t\"util/godot/core/random_pcg.cpp\"\n]\n\nif is_editor_build:\n    sources += [\n        \"util/godot/editor_scale.cpp\"\n    ]\n\nif env[\"platform\"] == \"macos\":\n    library = env.SharedLibrary(\n        \"{}/{}.{}.{}.framework/{}.{}.{}\".format(\n            BIN_FOLDER,\n            LIB_NAME,\n            env[\"platform\"],\n            env[\"target\"],\n            LIB_NAME,\n            env[\"platform\"],\n            env[\"target\"]\n        ),\n        source = sources\n    )\nelse:\n    library = env.SharedLibrary(\n        \"{}/{}{}{}\".format(\n            BIN_FOLDER,\n            LIB_NAME,\n            env[\"suffix\"],\n            env[\"SHLIBSUFFIX\"]\n        ),\n        source = sources\n    )\n\nDefault(library)\n"
        },
        {
          "name": "SCsub",
          "type": "blob",
          "size": 3.2744140625,
          "content": "\n# This is the entry point for SCons to build this engine as a module.\n# It has to be integrated to Godot's codebase, so it cannot be run on its own, see `README` for more information.\n# To build as an extension, see `SConstruct`.\n\nImport(\"env\")\nImport(\"env_modules\")\n\nimport common\nimport voxel_version\n\nvoxel_version.generate_version_header()\n\n# Note, support for FastNoise2 requires C++17, and only works on x86.\nFAST_NOISE_2_SRC = env[\"voxel_fast_noise_2\"]\nif not env[\"arch\"].startswith(\"x86\"):\n\tFAST_NOISE_2_SRC = False\n\nINCLUDE_TESTS = env[\"voxel_tests\"]\n\nenv_voxel = env_modules.Clone()\n\nvoxel_files = common.get_sources(env_voxel, env.editor_build, INCLUDE_TESTS)\n\nenv_voxel.Append(CPPDEFINES=[\n\t# Tell engine-agnostic code we are using Godot Engine as a module\n\t\"ZN_GODOT\"\n])\n\nif INCLUDE_TESTS:\n\tif FAST_NOISE_2_SRC:\n\t\tvoxel_files += [\"tests/fast_noise_2/*.cpp\"]\n\n\tenv_voxel.Append(CPPDEFINES={\"VOXEL_TESTS\": 1})\n\n# ----------------------------------------------------------------------------------------------------------------------\n# SQLite\nenv_sqlite = env_voxel.Clone()\n\n# Turn off warnings, we get some with Clang and with `warnings=extra`\nenv_sqlite.disable_warnings()\n\n# if not env_sqlite.msvc:\n#     env_sqlite.Append(CXXFLAGS=[\"-Wno-discarded-qualifiers\"])\n\n# TODO Enhancement: the way SQLite is integrated should not be duplicated between Godot and GodotCpp targets.\n# Had to do so, because this line below is specific to Godot's build system!\nenv_sqlite.add_source_files(env.modules_sources, [\"thirdparty/sqlite/sqlite3.c\"])\n\n# ----------------------------------------------------------------------------------------------------------------------\n# FastNoise 2\n\nif FAST_NOISE_2_SRC:\n\tif not env.msvc:\n\t\t# TODO Enhancement: workaround for https://github.com/Auburn/FastNoise2/issues/80\n\t\t# FastNoise2 is using MSVC-specific compiler directives.\n\t\t# Done before calling FastNoise2 SConscript, as FastNoise2 also includes the headers\n\t\tenv_voxel.Append(CXXFLAGS=[\"-Wno-unknown-pragmas\"])\n\t\n\t# Build from source. Should be the simplest, but requires C++17\n\tSConscript(\"thirdparty/fast_noise_2/SConscript\", exports = [\"env\", \"env_voxel\"])\n\n\tenv_voxel.Append(CPPPATH=[\"thirdparty/fast_noise_2/include\"])\n\t\n\tvoxel_files += [\n\t\t\"util/noise/fast_noise_2.cpp\"\n\t]\n\n\tif env.editor_build:\n\t\tvoxel_files += [\n\t\t\t\"editor/fast_noise_2/*.cpp\"\n\t\t]\n\n# ----------------------------------------------------------------------------------------------------------------------\n# Tracy library\n\nif env[\"tracy\"]:\n\t# This is not a feature of Godot's build system so we have to define a few things ourselves\n\tenv.Append(CPPDEFINES=\"TRACY_ENABLE\")\n\tenv_voxel.Append(CPPDEFINES=\"TRACY_ENABLE\")\n\tenv_voxel.Append(CPPPATH=[\"#thirdparty/tracy/public\"])\n\tvoxel_files += [\n\t\t\"#thirdparty/tracy/public/TracyClient.cpp\"\n\t]\n\n# ----------------------------------------------------------------------------------------------------------------------\n\nfor f in voxel_files:\n\tenv_voxel.add_source_files(env.modules_sources, f)\n\n# TODO Feature: check webassembly builds (`env[\"platform\"] == \"javascript\"`)\n\n# Doesn't work, since the rest of Godot doesn't use this, linking fails.\n# No safe STL boundary checks for you.\n#if env[\"target\"] == \"debug\":\n#\tif env.msvc:\n#\t\t# Enable STL bound checks, Godot's master environment doesn't do it\n#\t\tenv_voxel.Append(CXXFLAGS=[\"/D_DEBUG\"])\n"
        },
        {
          "name": "common.py",
          "type": "blob",
          "size": 5.52734375,
          "content": "import glob\n\n# Gets sources and configurations that are common to compiling as a module and an extension.\n# For module-specific configuration, see `SCsub`.\n# For extension-specific configuration, see `SConstruct`.\ndef get_sources(env, is_editor_build, include_tests):\n    env.Append(CPPPATH=[\".\"])\n\n    env.Append(CPPDEFINES=[\n        # See https://github.com/zeux/meshoptimizer/issues/311\n        \"MESHOPTIMIZER_ZYLANN_NEVER_COLLAPSE_BORDERS\",\n        # Because of the above, the MeshOptimizer library in this module is different to an official one.\n        # Godot 4 includes an official version, which means they would both conflict at linking time.\n        # To prevent this clash we wrap the entire library within an additional namespace.\n        # This should be solved either by solving issue #311 or by porting the module to a dynamic library (GDExtension).\n        \"MESHOPTIMIZER_ZYLANN_WRAP_LIBRARY_IN_NAMESPACE\",\n    ])\n    if env[\"platform\"] == \"windows\":\n        # When compiling SQLite with Godot on Windows with MSVC, it produces the following warning:\n        # `sqlite3.c(42754): warning C4996: 'GetVersionExA': was declared deprecated `\n        # To fix it, let's indicate to SQLite it should not use this function, even if it is available.\n        # https://stackoverflow.com/questions/20031597/error-c4996-received-when-compiling-sqlite-c-in-visual-studio-2013\n        env.Append(CPPDEFINES={\"SQLITE_WIN32_GETVERSIONEX\": 0})\n\n    sources = [\n        \"constants/*.cpp\",\n\n        \"meshers/blocky/*.cpp\",\n        \"meshers/blocky/types/*.cpp\",\n        \"meshers/transvoxel/*.cpp\",\n        \"meshers/dmc/*.cpp\",\n        \"meshers/cubes/*.cpp\",\n        \"meshers/*.cpp\",\n\n        \"streams/*.cpp\",\n        \"streams/sqlite/*.cpp\",\n        \"streams/region/*.cpp\",\n        \"streams/vox/*.cpp\",\n\n        \"storage/*.cpp\",\n        \"storage/metadata/*.cpp\",\n\n        \"generators/*.cpp\",\n        \"generators/graph/*.cpp\",\n        \"generators/simple/*.cpp\",\n        \"generators/multipass/*.cpp\",\n\n        \"modifiers/*.cpp\",\n        \"modifiers/godot/*.cpp\",\n\n        \"terrain/*.cpp\",\n        \"terrain/instancing/*.cpp\",\n        \"terrain/fixed_lod/*.cpp\",\n        \"terrain/variable_lod/*.cpp\",\n\n        \"engine/*.cpp\",\n        \"engine/gpu/*.cpp\",\n        \"engine/detail_rendering/*.cpp\",\n\n        \"edition/*.cpp\",\n        \"shaders/*.cpp\",\n\n        \"register_types.cpp\",\n\n        # Utility\n\n        \"util/*.cpp\",\n        \"util/containers/*.cpp\",\n        \"util/math/*.cpp\",\n        \"util/memory/*.cpp\",\n        \"util/noise/fast_noise_lite/*.cpp\",\n        \"util/noise/gd_noise_range.cpp\",\n        \"util/noise/spot_noise_gd.cpp\",\n        \"util/string/*.cpp\",\n        \"util/thread/thread.cpp\",\n        \"util/thread/spatial_lock_2d.cpp\",\n        \"util/thread/spatial_lock_3d.cpp\",\n        \"util/tasks/*.cpp\",\n        \"util/tasks/godot/*.cpp\",\n\n        \"util/godot/classes/array_mesh.cpp\",\n        \"util/godot/classes/concave_polygon_shape_3d.cpp\",\n        \"util/godot/classes/geometry_2d.cpp\",\n        \"util/godot/classes/geometry_instance_3d.cpp\",\n        \"util/godot/classes/input_event_key.cpp\",\n        \"util/godot/classes/image_texture_3d.cpp\",\n        \"util/godot/classes/mesh.cpp\",\n        \"util/godot/classes/multimesh.cpp\",\n        \"util/godot/classes/node.cpp\",\n        \"util/godot/classes/object.cpp\",\n        \"util/godot/classes/project_settings.cpp\",\n        \"util/godot/classes/rendering_device.cpp\",\n        \"util/godot/classes/rendering_server.cpp\",\n        \"util/godot/classes/resource_loader.cpp\",\n        \"util/godot/classes/shader.cpp\",\n\n        \"util/godot/core/string.cpp\",\n        \"util/godot/core/variant.cpp\",\n        \"util/godot/core/packed_arrays.cpp\",\n        \"util/godot/core/rect2i.cpp\",\n\n        \"util/godot/direct_mesh_instance.cpp\",\n        \"util/godot/direct_multimesh_instance.cpp\",\n        \"util/godot/direct_static_body.cpp\",\n        \"util/godot/file_utils.cpp\",\n        \"util/godot/shader_material_pool.cpp\",\n\n        \"util/io/*.cpp\",\n\n        # Thirdparty\n\n        \"thirdparty/lz4/*.c\",\n        # \"thirdparty/sqlite/*.c\",\n        \"thirdparty/meshoptimizer/*.cpp\"\n    ]\n\n    if is_editor_build:\n        sources += [\n            \"editor/*.cpp\",\n            \"editor/terrain/*.cpp\",\n            \"editor/fast_noise_lite/*.cpp\",\n            \"editor/spot_noise/*.cpp\",\n            \"editor/vox/*.cpp\",\n            \"editor/instancer/*.cpp\",\n            \"editor/instance_library/*.cpp\",\n            \"editor/mesh_sdf/*.cpp\",\n            \"editor/graph/*.cpp\",\n            \"editor/blocky_library/*.cpp\",\n            \"editor/blocky_library/types/*.cpp\",\n            \"editor/multipass/*.cpp\",\n\n            \"util/godot/debug_renderer.cpp\",\n            \"util/godot/check_ref_ownership.cpp\",\n\n            \"util/godot/classes/editor_plugin.cpp\",\n            \"util/godot/classes/editor_import_plugin.cpp\",\n            \"util/godot/classes/editor_inspector_plugin.cpp\",\n            \"util/godot/classes/editor_property.cpp\",\n            \"util/godot/classes/editor_settings.cpp\",\n            \"util/godot/classes/graph_edit.cpp\", # Not editor-only, but only used in editor for now\n            \"util/godot/classes/graph_node.cpp\" # Not editor-only, but only used in editor for now\n        ]\n\n    if include_tests:\n        sources += [\n            \"tests/*.cpp\",\n            \"tests/util/*.cpp\",\n            \"tests/voxel/*.cpp\"\n        ]\n\n    def process_glob_paths(p_sources):\n        out = []\n        for path in p_sources:\n            if '*' in path:\n                paths = glob.glob(path)\n                out += paths\n            else:\n                out.append(path)\n        return out\n\n    sources = process_glob_paths(sources)\n\n    return sources\n\n"
        },
        {
          "name": "config.py",
          "type": "blob",
          "size": 2.8759765625,
          "content": "\n# This file is for compiling as a module. It may not be used when compiling as an extension.\n\ndef can_build(env, platform):\n    return True\n\n\ndef configure(env):\n    from SCons.Script import BoolVariable, Variables, Help\n\n    env_vars = Variables()\n\n    env_vars.Add(BoolVariable(\"voxel_tests\",\n        \"Build with tests for the voxel module, which will run on startup of the engine\", False))\n\n    env_vars.Add(BoolVariable(\"voxel_fast_noise_2\", \"Build FastNoise2 support (x86-only)\", True))\n\n    env_vars.Add(BoolVariable(\"tracy\", \"Build with enabled Tracy Profiler integration\", False))\n\n    env_vars.Update(env)\n    Help(env_vars.GenerateHelpText(env))\n\n\ndef get_icons_path():\n    return \"editor/icons\"\n\n\ndef get_doc_classes():\n    return [\n        \"FastNoise2\",\n        \"VoxelAStarGrid3D\",\n        \"VoxelBlockSerializer\",\n        \"VoxelBlockyAttribute\",\n        \"VoxelBlockyAttributeAxis\",\n        \"VoxelBlockyAttributeCustom\",\n        \"VoxelBlockyAttributeDirection\",\n        \"VoxelBlockyAttributeRotation\",\n        \"VoxelBlockyLibrary\",\n        \"VoxelBlockyLibraryBase\",\n        \"VoxelBlockyModel\",\n        \"VoxelBlockyModelCube\",\n        \"VoxelBlockyModelEmpty\",\n        \"VoxelBlockyModelMesh\",\n        \"VoxelBlockyType\",\n        \"VoxelBlockyTypeLibrary\",\n        \"VoxelBoxMover\",\n        \"VoxelBuffer\",\n        \"VoxelColorPalette\",\n        \"VoxelDataBlockEnterInfo\",\n        \"VoxelEngine\",\n        \"VoxelGenerator\",\n        \"VoxelGeneratorFlat\",\n        \"VoxelGeneratorGraph\",\n        \"VoxelGeneratorHeightmap\",\n        \"VoxelGeneratorImage\",\n        \"VoxelGeneratorMultipassCB\",\n        \"VoxelGeneratorNoise\",\n        \"VoxelGeneratorNoise2D\",\n        \"VoxelGeneratorScript\",\n        \"VoxelGeneratorWaves\",\n        \"VoxelGraphFunction\",\n        \"VoxelInstanceComponent\",\n        \"VoxelInstanceGenerator\",\n        \"VoxelInstanceLibrary\",\n        \"VoxelInstanceLibraryItem\",\n        \"VoxelInstanceLibraryMultiMeshItem\",\n        \"VoxelInstanceLibrarySceneItem\",\n        \"VoxelInstancer\",\n        \"VoxelInstancerRigidBody\",\n        \"VoxelLodTerrain\",\n        \"VoxelMesher\",\n        \"VoxelMesherBlocky\",\n        \"VoxelMesherCubes\",\n        \"VoxelMesherTransvoxel\",\n        \"VoxelMeshSDF\",\n        \"VoxelModifier\",\n        \"VoxelModifierMesh\",\n        \"VoxelModifierSphere\",\n        \"VoxelNode\",\n        \"VoxelRaycastResult\",\n        \"VoxelSaveCompletionTracker\",\n        \"VoxelStream\",\n        \"VoxelStreamMemory\",\n        \"VoxelStreamRegionFiles\",\n        \"VoxelStreamScript\",\n        \"VoxelStreamSQLite\",\n        \"VoxelTerrain\",\n        \"VoxelTerrainMultiplayerSynchronizer\",\n        \"VoxelTool\",\n        \"VoxelToolBuffer\",\n        \"VoxelToolLodTerrain\",\n        \"VoxelToolMultipassGenerator\",\n        \"VoxelToolTerrain\",\n        \"VoxelViewer\",\n        \"VoxelVoxLoader\",\n        \"ZN_FastNoiseLite\",\n        \"ZN_FastNoiseLiteGradient\",\n        \"ZN_SpotNoise\",\n        \"ZN_ThreadedTask\",\n    ]\n\n\ndef get_doc_path():\n    return \"doc/classes\"\n"
        },
        {
          "name": "constants",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "edition",
          "type": "tree",
          "content": null
        },
        {
          "name": "editor",
          "type": "tree",
          "content": null
        },
        {
          "name": "engine",
          "type": "tree",
          "content": null
        },
        {
          "name": "generators",
          "type": "tree",
          "content": null
        },
        {
          "name": "gource_view.sh",
          "type": "blob",
          "size": 0.2314453125,
          "content": "# You need Gource to run this command.\n# Get it here : https://gource.io/\n\n# -s : seconds per day\n\n# Displays an animation of a versioned project over time.\ngource -s 0.2 -i 0 --hide filenames --max-user-speed 1000 --auto-skip-seconds 1\n"
        },
        {
          "name": "meshers",
          "type": "tree",
          "content": null
        },
        {
          "name": "misc",
          "type": "tree",
          "content": null
        },
        {
          "name": "modifiers",
          "type": "tree",
          "content": null
        },
        {
          "name": "nuget.config",
          "type": "blob",
          "size": 0.2734375,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <!--To inherit the global NuGet package sources remove the <clear/> line below -->\n    <clear />\n    <add key=\"nuget\" value=\"https://api.nuget.org/v3/index.json\" />\n  </packageSources>\n</configuration>\n"
        },
        {
          "name": "project",
          "type": "tree",
          "content": null
        },
        {
          "name": "register_types.cpp",
          "type": "blob",
          "size": 25.0771484375,
          "content": "#ifdef ZN_GODOT\n// Module specific\n#include \"register_types.h\"\n#endif\n\n#include \"constants/voxel_string_names.h\"\n#include \"edition/voxel_mesh_sdf_gd.h\"\n#include \"edition/voxel_tool.h\"\n#include \"edition/voxel_tool_buffer.h\"\n#include \"edition/voxel_tool_lod_terrain.h\"\n#include \"edition/voxel_tool_terrain.h\"\n#include \"engine/voxel_engine_gd.h\"\n#include \"generators/graph/node_type_db.h\"\n#include \"generators/graph/voxel_generator_graph.h\"\n#include \"generators/multipass/voxel_generator_multipass_cb.h\"\n#include \"generators/simple/voxel_generator_flat.h\"\n#include \"generators/simple/voxel_generator_heightmap.h\"\n#include \"generators/simple/voxel_generator_image.h\"\n#include \"generators/simple/voxel_generator_noise.h\"\n#include \"generators/simple/voxel_generator_noise_2d.h\"\n#include \"generators/simple/voxel_generator_waves.h\"\n#include \"generators/voxel_generator_script.h\"\n#include \"meshers/blocky/types/voxel_blocky_attribute_axis.h\"\n#include \"meshers/blocky/types/voxel_blocky_attribute_custom.h\"\n#include \"meshers/blocky/types/voxel_blocky_attribute_direction.h\"\n#include \"meshers/blocky/types/voxel_blocky_attribute_rotation.h\"\n#include \"meshers/blocky/types/voxel_blocky_type_library.h\"\n#include \"meshers/blocky/voxel_blocky_library.h\"\n#include \"meshers/blocky/voxel_blocky_model_cube.h\"\n#include \"meshers/blocky/voxel_blocky_model_empty.h\"\n#include \"meshers/blocky/voxel_blocky_model_mesh.h\"\n#include \"meshers/blocky/voxel_mesher_blocky.h\"\n#include \"meshers/cubes/voxel_mesher_cubes.h\"\n#include \"meshers/transvoxel/voxel_mesher_transvoxel.h\"\n#include \"modifiers/godot/voxel_modifier_gd.h\"\n#include \"modifiers/godot/voxel_modifier_mesh_gd.h\"\n#include \"modifiers/godot/voxel_modifier_sphere_gd.h\"\n#include \"storage/metadata/voxel_metadata_factory.h\"\n#include \"storage/metadata/voxel_metadata_variant.h\"\n#include \"storage/voxel_buffer_gd.h\"\n#include \"storage/voxel_memory_pool.h\"\n#include \"streams/region/voxel_stream_region_files.h\"\n#include \"streams/sqlite/voxel_stream_sqlite.h\"\n#include \"streams/vox/vox_loader.h\"\n#include \"streams/voxel_block_serializer_gd.h\"\n#include \"streams/voxel_stream_memory.h\"\n#include \"streams/voxel_stream_script.h\"\n#include \"terrain/fixed_lod/voxel_box_mover.h\"\n#include \"terrain/fixed_lod/voxel_terrain.h\"\n#include \"terrain/fixed_lod/voxel_terrain_multiplayer_synchronizer.h\"\n#include \"terrain/instancing/voxel_instance_component.h\"\n#include \"terrain/instancing/voxel_instance_library.h\"\n#include \"terrain/instancing/voxel_instance_library_multimesh_item.h\"\n#include \"terrain/instancing/voxel_instance_library_scene_item.h\"\n#include \"terrain/instancing/voxel_instancer.h\"\n#include \"terrain/instancing/voxel_instancer_rigidbody.h\"\n#include \"terrain/variable_lod/voxel_lod_terrain.h\"\n#include \"terrain/voxel_a_star_grid_3d.h\"\n#include \"terrain/voxel_mesh_block.h\"\n#include \"terrain/voxel_save_completion_tracker.h\"\n#include \"terrain/voxel_viewer.h\"\n#include \"util/godot/check_ref_ownership.h\"\n#include \"util/macros.h\"\n#include \"util/noise/fast_noise_lite/fast_noise_lite.h\"\n#include \"util/noise/fast_noise_lite/fast_noise_lite_gradient.h\"\n#include \"util/noise/spot_noise_gd.h\"\n#include \"util/string/format.h\"\n#include \"util/tasks/async_dependency_tracker.h\"\n#include \"util/tasks/godot/threaded_task_gd.h\"\n\n#ifdef ZN_GODOT_EXTENSION\n#include \"engine/voxel_engine_updater.h\"\n#include \"util/thread/godot_thread_helper.h\"\n#endif\n\n#ifdef VOXEL_ENABLE_FAST_NOISE_2\n#include \"util/noise/fast_noise_2.h\"\n#endif\n\n#include \"util/godot/classes/engine.h\"\n#include \"util/godot/classes/project_settings.h\"\n#include \"util/godot/core/class_db.h\"\n// Just for size reminders\n#include \"util/godot/classes/control.h\"\n#include \"util/godot/classes/mesh_instance_3d.h\"\n#include \"util/godot/classes/sprite_2d.h\"\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n#ifdef TOOLS_ENABLED\n\n#include \"editor/blocky_library/voxel_blocky_library_editor_plugin.h\"\n#include \"editor/fast_noise_lite/fast_noise_lite_editor_plugin.h\"\n#include \"editor/graph/graph_nodes_doc_tool.h\"\n#include \"editor/graph/voxel_graph_editor_node_preview.h\"\n#include \"editor/graph/voxel_graph_editor_plugin.h\"\n#include \"editor/instance_library/control_sizer.h\"\n#include \"editor/instance_library/voxel_instance_library_editor_plugin.h\"\n#include \"editor/instance_library/voxel_instance_library_list_editor.h\"\n#include \"editor/instance_library/voxel_instance_library_multimesh_item_editor_plugin.h\"\n#include \"editor/instancer/voxel_instancer_editor_plugin.h\"\n#include \"editor/mesh_sdf/voxel_mesh_sdf_editor_plugin.h\"\n#include \"editor/multipass/voxel_generator_multipass_editor_plugin.h\"\n#include \"editor/spot_noise/spot_noise_editor_plugin.h\"\n#include \"editor/terrain/voxel_terrain_editor_plugin.h\"\n#include \"editor/vox/vox_editor_plugin.h\"\n#include \"util/godot/classes/os.h\"\n\n#ifdef VOXEL_ENABLE_FAST_NOISE_2\n#include \"editor/fast_noise_2/fast_noise_2_editor_plugin.h\"\n#endif\n\n#ifdef ZN_GODOT_EXTENSION\n#include \"editor/about_window.h\"\n#include \"editor/blocky_library/axes_3d_control.h\"\n#include \"editor/blocky_library/model_viewer.h\"\n#include \"editor/blocky_library/types/voxel_blocky_type_attribute_combination_selector.h\"\n#include \"editor/blocky_library/types/voxel_blocky_type_editor_inspector_plugin.h\"\n#include \"editor/blocky_library/types/voxel_blocky_type_library_editor_inspector_plugin.h\"\n#include \"editor/blocky_library/types/voxel_blocky_type_library_ids_dialog.h\"\n#include \"editor/blocky_library/types/voxel_blocky_type_variant_list_editor.h\"\n#include \"editor/blocky_library/types/voxel_blocky_type_viewer.h\"\n#include \"editor/blocky_library/voxel_blocky_model_editor_inspector_plugin.h\"\n#include \"editor/blocky_library/voxel_blocky_model_viewer.h\"\n#include \"editor/fast_noise_lite/fast_noise_lite_editor_inspector_plugin.h\"\n#include \"editor/fast_noise_lite/fast_noise_lite_viewer.h\"\n#include \"editor/graph/editor_property_text_change_on_submit.h\"\n#include \"editor/graph/voxel_graph_editor.h\"\n#include \"editor/graph/voxel_graph_editor_inspector_plugin.h\"\n#include \"editor/graph/voxel_graph_editor_io_dialog.h\"\n#include \"editor/graph/voxel_graph_editor_node.h\"\n#include \"editor/graph/voxel_graph_editor_node_preview.h\"\n#include \"editor/graph/voxel_graph_editor_shader_dialog.h\"\n#include \"editor/graph/voxel_graph_editor_window.h\"\n#include \"editor/graph/voxel_graph_function_inspector_plugin.h\"\n#include \"editor/graph/voxel_graph_node_dialog.h\"\n#include \"editor/graph/voxel_graph_node_inspector_wrapper.h\"\n#include \"editor/graph/voxel_range_analysis_dialog.h\"\n#include \"editor/instance_library/voxel_instance_library_inspector_plugin.h\"\n#include \"editor/instance_library/voxel_instance_library_multimesh_item_inspector_plugin.h\"\n#include \"editor/instancer/voxel_instancer_stat_view.h\"\n#include \"editor/mesh_sdf/voxel_mesh_sdf_viewer.h\"\n#include \"editor/multipass/voxel_generator_multipass_cache_viewer.h\"\n#include \"editor/spot_noise/spot_noise_editor_inspector_plugin.h\"\n#include \"editor/spot_noise/spot_noise_viewer.h\"\n#include \"editor/terrain/editor_property_aabb_min_max.h\"\n#include \"editor/terrain/voxel_terrain_editor_task_indicator.h\"\n#endif // ZN_GODOT_EXTENSION\n\n#endif // TOOLS_ENABLED\n\n#ifdef VOXEL_TESTS\n#include \"tests/tests.h\"\n#endif\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// This is used to have an idea of the memory footprint of various objects as Godot and Voxel development progresses.\nvoid print_size_reminders() {\n\tusing namespace zylann;\n\tusing namespace voxel;\n\n\t// Note, this only logs the base size each of these classes. They can often have a bigger memory\n\t// footprint due to dynamically-allocated members (arrays, dictionaries, RIDs referring to even more data in\n\t// RenderingServer...)\n\n\tZN_PRINT_VERBOSE(format(\"Size of Variant: {}\", sizeof(Variant)));\n\tZN_PRINT_VERBOSE(format(\"Size of Object: {}\", sizeof(Object)));\n\tZN_PRINT_VERBOSE(format(\"Size of RefCounted: {}\", sizeof(RefCounted)));\n\tZN_PRINT_VERBOSE(format(\"Size of Node: {}\", sizeof(Node)));\n\tZN_PRINT_VERBOSE(format(\"Size of Node3D: {}\", sizeof(Node3D)));\n\tZN_PRINT_VERBOSE(format(\"Size of MeshInstance3D: {}\", sizeof(MeshInstance3D)));\n\tZN_PRINT_VERBOSE(format(\"Size of GeometryInstance3D: {}\", sizeof(MeshInstance3D)));\n\tZN_PRINT_VERBOSE(format(\"Size of Resource: {}\", sizeof(Resource)));\n\tZN_PRINT_VERBOSE(format(\"Size of Mesh: {}\", sizeof(Mesh)));\n\tZN_PRINT_VERBOSE(format(\"Size of ArrayMesh: {}\", sizeof(ArrayMesh)));\n\n\tZN_PRINT_VERBOSE(format(\"Size of CanvasItem: {}\", sizeof(CanvasItem)));\n\tZN_PRINT_VERBOSE(format(\"Size of Node2D: {}\", sizeof(Node2D)));\n\tZN_PRINT_VERBOSE(format(\"Size of Sprite2D: {}\", sizeof(Sprite2D)));\n\tZN_PRINT_VERBOSE(format(\"Size of Control: {}\", sizeof(Control)));\n\n\tZN_PRINT_VERBOSE(format(\"Size of RWLock: {}\", sizeof(zylann::RWLock)));\n\tZN_PRINT_VERBOSE(format(\"Size of Mutex: {}\", sizeof(zylann::Mutex)));\n\tZN_PRINT_VERBOSE(format(\"Size of BinaryMutex: {}\", sizeof(zylann::BinaryMutex)));\n\n\tZN_PRINT_VERBOSE(format(\"Size of godot::VoxelBuffer: {}\", sizeof(voxel::godot::VoxelBuffer)));\n\tZN_PRINT_VERBOSE(format(\"Size of VoxelBuffer: {}\", sizeof(VoxelBuffer)));\n\tZN_PRINT_VERBOSE(format(\"Size of VoxelMeshBlock: {}\", sizeof(VoxelMeshBlock)));\n\tZN_PRINT_VERBOSE(format(\"Size of VoxelTerrain: {}\", sizeof(VoxelTerrain)));\n\tZN_PRINT_VERBOSE(format(\"Size of VoxelLodTerrain: {}\", sizeof(VoxelLodTerrain)));\n\tZN_PRINT_VERBOSE(format(\"Size of VoxelInstancer: {}\", sizeof(VoxelInstancer)));\n\tZN_PRINT_VERBOSE(format(\"Size of VoxelDataMap: {}\", sizeof(VoxelDataMap)));\n\tZN_PRINT_VERBOSE(format(\"Size of VoxelData: {}\", sizeof(VoxelData)));\n\tZN_PRINT_VERBOSE(format(\"Size of VoxelMesher::Output: {}\", sizeof(VoxelMesher::Output)));\n\tZN_PRINT_VERBOSE(format(\"Size of VoxelEngine::BlockMeshOutput: {}\", sizeof(VoxelEngine::BlockMeshOutput)));\n\tZN_PRINT_VERBOSE(format(\"Size of VoxelModifierStack: {}\", sizeof(VoxelModifierStack)));\n\tZN_PRINT_VERBOSE(format(\"Size of AsyncDependencyTracker: {}\", sizeof(AsyncDependencyTracker)));\n}\n\nvoid initialize_voxel_module(ModuleInitializationLevel p_level) {\n\tusing namespace zylann;\n\tusing namespace zylann::godot;\n\tusing namespace voxel;\n\n\tif (p_level == MODULE_INITIALIZATION_LEVEL_SCENE) {\n#ifdef ZN_DEBUG_LOG_FILE_ENABLED\n\t\topen_log_file();\n#endif\n\n\t\t// TODO Enhancement: can I prevent users from instancing `VoxelEngine`?\n\t\t// This class is used as a singleton so it's not really abstract.\n\t\t// Should I use `register_abstract_class` anyways?\n\t\tClassDB::register_class<zylann::voxel::godot::VoxelEngine>();\n\n\t\t// Misc\n\n\t\t// Should be abstract, but isn't for compatibility with old versions that didn't have separate VoxelBlockyModel\n\t\t// classes\n\t\tClassDB::register_class<VoxelBlockyModel>();\n\n\t\tClassDB::register_class<VoxelBlockyModelCube>();\n\t\tClassDB::register_class<VoxelBlockyModelMesh>();\n\t\tClassDB::register_class<VoxelBlockyModelEmpty>();\n\t\tClassDB::register_abstract_class<VoxelBlockyLibraryBase>();\n\t\tClassDB::register_class<VoxelBlockyLibrary>();\n\t\tClassDB::register_abstract_class<VoxelBlockyAttribute>();\n\t\tClassDB::register_class<VoxelBlockyAttributeAxis>();\n\t\tClassDB::register_class<VoxelBlockyAttributeDirection>();\n\t\tClassDB::register_class<VoxelBlockyAttributeRotation>();\n\t\tClassDB::register_class<VoxelBlockyAttributeCustom>();\n\t\tClassDB::register_class<VoxelBlockyType>();\n\t\tClassDB::register_class<VoxelBlockyTypeLibrary>();\n\n\t\tClassDB::register_class<VoxelColorPalette>();\n\t\tClassDB::register_class<VoxelInstanceLibrary>();\n\t\tClassDB::register_abstract_class<VoxelInstanceLibraryItem>();\n\t\tClassDB::register_class<VoxelInstanceLibraryMultiMeshItem>();\n\t\tClassDB::register_class<VoxelInstanceLibrarySceneItem>();\n\t\tClassDB::register_class<VoxelDataBlockEnterInfo>();\n\t\tClassDB::register_class<VoxelSaveCompletionTracker>();\n\t\tClassDB::register_class<pg::VoxelGraphFunction>();\n\n\t\t// Storage\n\t\tClassDB::register_class<zylann::voxel::godot::VoxelBuffer>();\n\n\t\t// Nodes\n\t\tClassDB::register_abstract_class<VoxelNode>();\n\t\tClassDB::register_class<VoxelTerrain>();\n\t\tClassDB::register_class<VoxelLodTerrain>();\n\t\tClassDB::register_class<VoxelViewer>();\n\t\tClassDB::register_class<VoxelInstanceGenerator>();\n\t\tClassDB::register_class<VoxelInstancer>();\n\t\tClassDB::register_class<VoxelInstanceComponent>();\n\t\tClassDB::register_abstract_class<VoxelInstancerRigidBody>();\n\t\tClassDB::register_abstract_class<zylann::voxel::godot::VoxelModifier>();\n\t\tClassDB::register_class<zylann::voxel::godot::VoxelModifierSphere>();\n\t\tClassDB::register_class<zylann::voxel::godot::VoxelModifierMesh>();\n\n\t\t// Streams\n\t\tClassDB::register_abstract_class<VoxelStream>();\n\t\tClassDB::register_class<VoxelStreamRegionFiles>();\n\t\tClassDB::register_class<VoxelStreamScript>();\n\t\tClassDB::register_class<VoxelStreamSQLite>();\n\t\tClassDB::register_class<VoxelStreamMemory>();\n\n\t\t// Generators\n\t\tClassDB::register_abstract_class<VoxelGenerator>();\n\t\tClassDB::register_class<VoxelGeneratorFlat>();\n\t\tClassDB::register_abstract_class<VoxelGeneratorHeightmap>();\n\t\tClassDB::register_class<VoxelGeneratorWaves>();\n\t\tClassDB::register_class<VoxelGeneratorImage>();\n\t\tClassDB::register_class<VoxelGeneratorNoise2D>();\n\t\tClassDB::register_class<VoxelGeneratorNoise>();\n\t\tClassDB::register_class<VoxelGeneratorGraph>();\n\t\tClassDB::register_class<VoxelGeneratorScript>();\n\t\tClassDB::register_class<VoxelGeneratorMultipassCB>();\n\n\t\t// Utilities\n\t\tClassDB::register_class<VoxelBoxMover>();\n\t\tClassDB::register_class<VoxelRaycastResult>();\n\t\tClassDB::register_abstract_class<VoxelTool>();\n\t\tClassDB::register_abstract_class<VoxelToolTerrain>();\n\t\tClassDB::register_abstract_class<VoxelToolLodTerrain>();\n\t\t// I had to bind this one despite it being useless as-is because otherwise Godot lazily initializes its class.\n\t\t// And this can happen in a thread, causing crashes due to the concurrent access\n\t\tClassDB::register_abstract_class<VoxelToolBuffer>();\n\t\tClassDB::register_abstract_class<VoxelToolMultipassGenerator>();\n\t\tClassDB::register_class<zylann::voxel::godot::VoxelBlockSerializer>();\n\t\tClassDB::register_class<VoxelVoxLoader>();\n\t\tClassDB::register_class<ZN_FastNoiseLite>();\n\t\tClassDB::register_class<ZN_FastNoiseLiteGradient>();\n\t\tClassDB::register_class<ZN_SpotNoise>();\n\t\tClassDB::register_class<ZN_ThreadedTask>();\n\t\t// See SCsub\n#ifdef VOXEL_ENABLE_FAST_NOISE_2\n\t\tClassDB::register_class<FastNoise2>();\n#endif\n\t\tClassDB::register_class<VoxelMeshSDF>();\n\t\tClassDB::register_class<VoxelTerrainMultiplayerSynchronizer>();\n\t\tClassDB::register_class<VoxelAStarGrid3D>();\n\n\t\t// Meshers\n\t\tClassDB::register_abstract_class<VoxelMesher>();\n\t\tClassDB::register_class<VoxelMesherBlocky>();\n\t\tClassDB::register_class<VoxelMesherTransvoxel>();\n\t\tClassDB::register_class<VoxelMesherCubes>();\n\n#ifdef ZN_GODOT_EXTENSION\n\t\t// TODO GDX: I don't want to expose these classes, but there is no way not to expose them\n\t\tClassDB::register_class<ZN_GodotThreadHelper>();\n\t\tClassDB::register_class<VoxelEngineUpdater>();\n#endif\n\n\t\tprint_size_reminders();\n\n#ifdef ZN_GODOT\n\t\tif (RenderingDevice::get_singleton() != nullptr) {\n\t\t\tZN_PRINT_VERBOSE(\n\t\t\t\t\tformat(\"TextureArray max layers: {}\",\n\t\t\t\t\t\t   RenderingDevice::get_singleton()->limit_get(RenderingDevice::LIMIT_MAX_TEXTURE_ARRAY_LAYERS))\n\t\t\t);\n\t\t}\n#else\n\t\t// TODO GDX: Not possible to access the default `RenderingDevice` to query its limits\n#endif\n\n#ifdef ZN_GODOT\n\t\t// Compatibility with older version\n\t\t// ClassDB::add_compatibility_class(\"VoxelLibrary\", \"VoxelBlockyLibrary\");\n\t\t// ClassDB::add_compatibility_class(\"Voxel\", \"VoxelBlockyModel\");\n\t\tClassDB::add_compatibility_class(\"VoxelInstanceLibraryItem\", \"VoxelInstanceLibraryMultiMeshItem\");\n\t\t// Not possible to add a compat class for this one because the new name is indistinguishable from an old one.\n\t\t// However this is an abstract class so it should not be found in resources hopefully\n\t\t// ClassDB::add_compatibility_class(\"VoxelInstanceLibraryItemBase\", \"VoxelInstanceLibraryItem\");\n#endif\n\t\t// Setup engine after classes are registered.\n\t\t// This is necessary when using GDExtension because classes can't be instantiated until they are registered.\n\n\t\tVoxelMemoryPool::create_singleton();\n\t\tVoxelStringNames::create_singleton();\n\t\tpg::NodeTypeDB::create_singleton();\n\n\t\tconst zylann::voxel::godot::VoxelEngine::Config config =\n\t\t\t\tzylann::voxel::godot::VoxelEngine::get_config_from_godot();\n#ifdef TOOLS_ENABLED\n\t\tCheckRefCountDoesNotChange::set_enabled(config.ownership_checks);\n#endif\n\t\tVoxelEngine::create_singleton(config.inner);\n#if defined(ZN_GODOT)\n\t\t// RenderingServer can be null with `tests=yes`.\n\t\t// TODO There is no hook to integrate modules to Godot's test framework, update this when it gets improved\n\t\tif (RenderingServer::get_singleton() != nullptr) {\n\t\t\t// TODO Enhancement: threaded graphics resource building should be initialized better.\n\t\t\t// Pick this from the current renderer + user option (at time of writing, Godot 4 has only one\n\t\t\t// renderer and has not figured out how such option would be exposed). Could use\n\t\t\t// `can_create_resources_async` but this is internal. AFAIK `is_low_end` will be `true` only for OpenGL\n\t\t\t// backends, which are the only ones not supporting async resource creation.\n\t\t\tVoxelEngine::get_singleton().set_threaded_graphics_resource_building_enabled(\n\t\t\t\t\tRenderingServer::get_singleton()->is_low_end() == false\n\t\t\t);\n\t\t}\n#else\n\t\t// TODO GDX: RenderingServer::is_low_end() is not exposed, can't tell if we can generate graphics resources in\n\t\t// different threads\n#endif\n\n\t\tzylann::voxel::godot::VoxelEngine::create_singleton();\n\t\tzylann::godot::add_singleton(\"VoxelEngine\", zylann::voxel::godot::VoxelEngine::get_singleton());\n\n\t\tVoxelMetadataFactory::get_singleton().add_constructor_by_type<zylann::voxel::godot::VoxelMetadataVariant>(\n\t\t\t\tzylann::voxel::godot::METADATA_TYPE_VARIANT\n\t\t);\n\n\t\tVoxelMesherTransvoxel::load_static_resources();\n\n#ifdef VOXEL_TESTS\n\t\tconst PackedStringArray command_line_arguments = zylann::godot::get_command_line_arguments();\n\t\tconst String tests_cmd = \"--run_voxel_tests\";\n\n\t\tfor (int i = 0; i < command_line_arguments.size(); ++i) {\n\t\t\tconst String arg = command_line_arguments[i];\n\t\t\tif (arg == tests_cmd) {\n\t\t\t\tzylann::voxel::tests::run_voxel_tests();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n#endif\n\t}\n\n#ifdef TOOLS_ENABLED\n\tif (p_level == MODULE_INITIALIZATION_LEVEL_EDITOR) {\n\t\tVoxelGraphEditorNodePreview::load_resources();\n\n#if defined(ZN_GODOT_EXTENSION)\n\t\t// In GDExtension we have to explicitely register all classes deriving from Object even if they are not exposed\n\n\t\tClassDB::register_internal_class<ZN_EditorPlugin>();\n\t\tClassDB::register_internal_class<ZN_EditorImportPlugin>();\n\t\tClassDB::register_internal_class<ZN_EditorInspectorPlugin>();\n\t\tClassDB::register_internal_class<ZN_EditorProperty>();\n\t\tClassDB::register_internal_class<ZN_Axes3DControl>();\n\t\tClassDB::register_internal_class<ZN_ModelViewer>();\n\t\tClassDB::register_internal_class<ZN_EditorPropertyAABBMinMax>();\n\t\tClassDB::register_internal_class<ZN_EditorPropertyTextChangeOnSubmit>();\n\t\tClassDB::register_internal_class<ZN_ControlSizer>();\n\n\t\tClassDB::register_internal_class<ZN_FastNoiseLiteEditorPlugin>();\n\t\tClassDB::register_internal_class<ZN_FastNoiseLiteEditorInspectorPlugin>();\n\t\tClassDB::register_internal_class<ZN_FastNoiseLiteViewer>();\n\n\t\tClassDB::register_internal_class<ZN_SpotNoiseEditorPlugin>();\n\t\tClassDB::register_internal_class<ZN_SpotNoiseEditorInspectorPlugin>();\n\t\tClassDB::register_internal_class<ZN_SpotNoiseViewer>();\n\n\t\tClassDB::register_internal_class<VoxelAboutWindow>();\n\t\tClassDB::register_internal_class<VoxelTerrainEditorInspectorPlugin>();\n\t\tClassDB::register_internal_class<VoxelTerrainEditorPlugin>();\n\t\tClassDB::register_internal_class<VoxelTerrainEditorTaskIndicator>();\n\n\t\tClassDB::register_internal_class<VoxelBlockyModelViewer>();\n\t\tClassDB::register_internal_class<VoxelBlockyLibraryEditorPlugin>();\n\t\tClassDB::register_internal_class<VoxelBlockyModelEditorInspectorPlugin>();\n\n\t\tClassDB::register_internal_class<VoxelBlockyTypeViewer>();\n\t\tClassDB::register_internal_class<VoxelBlockyTypeEditorInspectorPlugin>();\n\t\tClassDB::register_internal_class<VoxelBlockyTypeLibraryIDSDialog>();\n\t\tClassDB::register_internal_class<VoxelBlockyTypeLibraryEditorInspectorPlugin>();\n\t\tClassDB::register_internal_class<VoxelBlockyTypeAttributeCombinationSelector>();\n\t\tClassDB::register_internal_class<VoxelBlockyTypeVariantListEditor>();\n\n\t\tClassDB::register_internal_class<magica::VoxelVoxEditorPlugin>();\n\t\tClassDB::register_internal_class<magica::VoxelVoxMeshImporter>();\n\t\tClassDB::register_internal_class<magica::VoxelVoxSceneImporter>();\n\n\t\tClassDB::register_internal_class<VoxelInstancerEditorPlugin>();\n\t\tClassDB::register_internal_class<VoxelInstancerStatView>();\n\n\t\tClassDB::register_internal_class<VoxelInstanceLibraryEditorPlugin>();\n\t\tClassDB::register_internal_class<VoxelInstanceLibraryInspectorPlugin>();\n\t\tClassDB::register_internal_class<VoxelInstanceLibraryMultiMeshItemEditorPlugin>();\n\t\tClassDB::register_internal_class<VoxelInstanceLibraryMultiMeshItemInspectorPlugin>();\n\t\tClassDB::register_internal_class<VoxelInstanceLibraryListEditor>();\n\n\t\tClassDB::register_internal_class<VoxelMeshSDFViewer>();\n\t\tClassDB::register_internal_class<VoxelMeshSDFEditorPlugin>();\n\t\tClassDB::register_internal_class<VoxelMeshSDFInspectorPlugin>();\n\n\t\tClassDB::register_internal_class<VoxelGraphEditorInspectorPlugin>();\n\t\tClassDB::register_internal_class<VoxelGraphFunctionInspectorPlugin>();\n\t\tClassDB::register_internal_class<VoxelGraphEditorNodePreview>();\n\t\tClassDB::register_internal_class<VoxelGraphEditorNode>();\n\t\tClassDB::register_internal_class<VoxelGraphEditor>();\n\t\tClassDB::register_internal_class<VoxelGraphEditorPlugin>();\n\t\tClassDB::register_internal_class<VoxelGraphEditorShaderDialog>();\n\t\tClassDB::register_internal_class<VoxelGraphEditorIODialog>();\n\t\tClassDB::register_internal_class<VoxelGraphNodeInspectorWrapper>();\n\t\tClassDB::register_internal_class<VoxelGraphNodeDialog>();\n\t\tClassDB::register_internal_class<VoxelRangeAnalysisDialog>();\n\n\t\tClassDB::register_internal_class<VoxelGeneratorMultipassEditorPlugin>();\n\t\tClassDB::register_internal_class<VoxelGeneratorMultipassEditorInspectorPlugin>();\n\t\tClassDB::register_internal_class<VoxelGeneratorMultipassCacheViewer>();\n#endif // ZN_GODOT_EXTENSION\n\n\t\tEditorPlugins::add_by_type<VoxelGraphEditorPlugin>();\n\t\tEditorPlugins::add_by_type<VoxelTerrainEditorPlugin>();\n\t\tEditorPlugins::add_by_type<VoxelInstanceLibraryEditorPlugin>();\n\t\tEditorPlugins::add_by_type<VoxelInstanceLibraryMultiMeshItemEditorPlugin>();\n\t\tEditorPlugins::add_by_type<ZN_FastNoiseLiteEditorPlugin>();\n\t\tEditorPlugins::add_by_type<ZN_SpotNoiseEditorPlugin>();\n\t\tEditorPlugins::add_by_type<magica::VoxelVoxEditorPlugin>();\n\t\tEditorPlugins::add_by_type<VoxelInstancerEditorPlugin>();\n\t\tEditorPlugins::add_by_type<VoxelMeshSDFEditorPlugin>();\n\t\tEditorPlugins::add_by_type<VoxelBlockyLibraryEditorPlugin>();\n\t\tEditorPlugins::add_by_type<VoxelGeneratorMultipassEditorPlugin>();\n#ifdef VOXEL_ENABLE_FAST_NOISE_2\n\t\tEditorPlugins::add_by_type<FastNoise2EditorPlugin>();\n#endif\n\n#ifdef TOOLS_ENABLED\n\t\t// TODO Any way to define a custom command line argument that closes Godot afterward?\n\n\t\tconst PackedStringArray command_line_arguments = zylann::godot::get_command_line_arguments();\n\t\tconst String doc_tool_cmd = \"--voxel_doc_tool\";\n\n\t\tfor (int i = 0; i < command_line_arguments.size(); ++i) {\n\t\t\tconst String arg = command_line_arguments[i];\n\t\t\tif (arg == doc_tool_cmd) {\n\t\t\t\tif (i + 2 >= command_line_arguments.size()) {\n\t\t\t\t\tERR_PRINT(String(\"Expected source and destination file paths after {0}\").format(varray(arg)));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tconst String src_path = command_line_arguments[i + 1];\n\t\t\t\tconst String dst_path = command_line_arguments[i + 2];\n\t\t\t\trun_graph_nodes_doc_tool(src_path, dst_path);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n// run_graph_nodes_doc_tool\n#endif\n\t}\n#endif // TOOLS_ENABLED\n}\n\nvoid uninitialize_voxel_module(ModuleInitializationLevel p_level) {\n\tusing namespace zylann;\n\tusing namespace voxel;\n\n\tif (p_level == MODULE_INITIALIZATION_LEVEL_SCENE) {\n\t\tzylann::godot::remove_singleton(\"VoxelEngine\");\n\n\t\t// At this point, the GDScript module has nullified GDScriptLanguage::singleton!!\n\t\t// That means it's impossible to free scripts still referenced by VoxelEngine. And that can happen, because\n\t\t// users can write custom generators, which run inside threads, and these threads are hosted in the engine\n\t\t// singleton... See https://github.com/Zylann/godot_voxel/issues/189\n\n\t\tVoxelMesherTransvoxel::free_static_resources();\n\t\tVoxelStringNames::destroy_singleton();\n\t\tpg::NodeTypeDB::destroy_singleton();\n\t\tzylann::voxel::godot::VoxelEngine::destroy_singleton();\n\t\tVoxelEngine::destroy_singleton();\n\n\t\t// Do this last as VoxelEngine might still be holding some refs to voxel blocks\n\t\tVoxelMemoryPool::destroy_singleton();\n\n#ifdef ZN_DEBUG_LOG_FILE_ENABLED\n\t\tclose_log_file();\n#endif\n\t}\n\n#ifdef TOOLS_ENABLED\n\tif (p_level == MODULE_INITIALIZATION_LEVEL_EDITOR) {\n\t\tVoxelGraphEditorNodePreview::unload_resources();\n\n\t\t// Plugins are automatically unregistered since https://github.com/godotengine/godot-cpp/pull/1138\n\t}\n#endif // TOOLS_ENABLED\n}\n\n#ifdef ZN_GODOT_EXTENSION\nextern \"C\" {\n// Library entry point\nGDExtensionBool GDE_EXPORT voxel_library_init(\n\t\tGDExtensionInterfaceGetProcAddress p_get_proc_address,\n\t\tGDExtensionClassLibraryPtr p_library,\n\t\tGDExtensionInitialization *r_initialization\n) {\n\tgodot::GDExtensionBinding::InitObject init_obj(p_get_proc_address, p_library, r_initialization);\n\n\tinit_obj.register_initializer(initialize_voxel_module);\n\tinit_obj.register_terminator(uninitialize_voxel_module);\n\tinit_obj.set_minimum_library_initialization_level(godot::MODULE_INITIALIZATION_LEVEL_SCENE);\n\n\treturn init_obj.init();\n}\n}\n#endif\n"
        },
        {
          "name": "register_types.h",
          "type": "blob",
          "size": 0.171875,
          "content": "#include \"modules/register_module_types.h\"\n\nvoid initialize_voxel_module(ModuleInitializationLevel p_level);\nvoid uninitialize_voxel_module(ModuleInitializationLevel p_level);\n"
        },
        {
          "name": "shaders",
          "type": "tree",
          "content": null
        },
        {
          "name": "storage",
          "type": "tree",
          "content": null
        },
        {
          "name": "streams",
          "type": "tree",
          "content": null
        },
        {
          "name": "terrain",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "thirdparty",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        },
        {
          "name": "voxel_version.py",
          "type": "blob",
          "size": 2.4609375,
          "content": "\n# Version information for the voxel project.\n# TODO Could not name the file just \"version.py\" because otherwise `import version` imports the wrong one from Godot...\n\nMAJOR = 1\nMINOR = 4\nPATCH = 0\nSTATUS = \"dev\"\n\nimport os\n\n\ndef generate_version_header():\n    git_hash = get_git_commit_hash()\n\n    info = {\n        \"major\": MAJOR,\n        \"minor\": MINOR,\n        \"patch\": PATCH,\n        \"status\": STATUS,\n        \"git_hash\": git_hash\n    }\n\n    f = open(\"constants/version.gen.h\", \"w\")\n\n    f.write(\n        \"\"\"/* THIS FILE IS GENERATED DO NOT EDIT */\n#ifndef VOXEL_VERSION_GEN_H\n#define VOXEL_VERSION_GEN_H\n\n#define VOXEL_VERSION_MAJOR {major}\n#define VOXEL_VERSION_MINOR {minor}\n#define VOXEL_VERSION_PATCH {patch}\n#define VOXEL_VERSION_STATUS \"{status}\"\n#define VOXEL_VERSION_GIT_HASH \"{git_hash}\"\n\n#endif // VOXEL_VERSION_GENERATED_GEN_H\n\"\"\".format(**info))\n\n    f.close()\n\n\ndef get_git_commit_hash():\n    # Parse Git hash if we're in a Git repo.\n    # Copied from Godot methods.py\n\n    githash = \"\"\n    gitfolder = \".git\"\n\n    if os.path.isfile(\".git\"):\n        module_folder = open(\".git\", \"r\").readline().strip()\n        if module_folder.startswith(\"gitdir: \"):\n            gitfolder = module_folder[8:]\n\n    head_path = os.path.join(gitfolder, \"HEAD\")\n\n    if os.path.isfile(head_path):\n        head = open(head_path, \"r\", encoding=\"utf8\").readline().strip()\n        if head.startswith(\"ref: \"):\n            ref = head[5:]\n            # If this directory is a Git worktree instead of a root clone.\n            parts = gitfolder.split(\"/\")\n            if len(parts) > 2 and parts[-2] == \"worktrees\":\n                gitfolder = \"/\".join(parts[0:-2])\n            head = os.path.join(gitfolder, ref)\n            packedrefs = os.path.join(gitfolder, \"packed-refs\")\n            if os.path.isfile(head):\n                githash = open(head, \"r\").readline().strip()\n            elif os.path.isfile(packedrefs):\n                # Git may pack refs into a single file. This code searches .git/packed-refs file for the current ref's hash.\n                # https://mirrors.edge.kernel.org/pub/software/scm/git/docs/git-pack-refs.html\n                for line in open(packedrefs, \"r\").read().splitlines():\n                    if line.startswith(\"#\"):\n                        continue\n                    (line_hash, line_ref) = line.split(\" \")\n                    if ref == line_ref:\n                        githash = line_hash\n                        break\n        else:\n            githash = head\n    \n    return githash\n"
        }
      ]
    }
  ]
}