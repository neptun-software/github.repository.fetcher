{
  "metadata": {
    "timestamp": 1736565976724,
    "page": 956,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/marl",
      "stars": 1898,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.1044921875,
          "content": "# http://clang.llvm.org/docs/ClangFormatStyleOptions.html\nBasedOnStyle: Chromium\n\n---\nLanguage:        Cpp\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0791015625,
          "content": "/.vs/\n/.vscode/\n/build/\n/cmake-build-*/\n/out/\nbazel-*\nCMakeSettings.json\n/.idea/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.2236328125,
          "content": "[submodule \"third_party/googletest\"]\n\tpath = third_party/googletest\n\turl = https://github.com/google/googletest.git\n[submodule \"third_party/benchmark\"]\n\tpath = third_party/benchmark\n\turl = https://github.com/google/benchmark.git\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.3955078125,
          "content": "# This is the list of the Marl authors for copyright purposes.\n#\n# This does not necessarily list everyone who has contributed code, since in\n# some cases, their employer may be the copyright holder.  To see the full list\n# of contributors, see the revision history in source control.\nGoogle LLC\nShawn Anastasio <shawn@anastas.io>\nA. Wilcox <awilfox@adelielinux.org>\nJiaxun Yang <jiaxun.yang@flygoat.com>\n"
        },
        {
          "name": "BUILD.bazel",
          "type": "blob",
          "size": 1.5625,
          "content": "# Copyright 2019 The Marl Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nconfig_setting(\n    name = \"linux_x86_64\",\n    constraint_values = [\n        \"@platforms//os:linux\",\n        \"@platforms//cpu:x86_64\",\n    ],\n)\n\nconfig_setting(\n    name = \"windows\",\n    constraint_values = [\"@platforms//os:windows\"],\n)\n\ncc_library(\n    name = \"marl\",\n    srcs = glob(\n        [\n            \"src/**/*.cpp\",\n            \"src/**/*.c\",\n            \"src/**/*.h\",\n        ],\n        exclude = glob([\n            \"src/**/*_bench.cpp\",\n            \"src/**/*_test.cpp\",\n        ]),\n    ) + select({\n        \":windows\": [],\n        \"//conditions:default\": glob([\"src/**/*.S\"]),\n    }),\n    hdrs = glob([\n        \"include/marl/**/*.h\",\n    ]),\n    includes = [\n        \"include\",\n    ],\n    linkopts = select({\n        \":linux_x86_64\": [\"-pthread\"],\n        \"//conditions:default\": [],\n    }),\n    visibility = [\n        \"//visibility:public\",\n    ],\n)\n\ncc_test(\n    name = \"tests\",\n    srcs = glob([\n        \"src/**/*_test.cpp\",\n    ]),\n    deps = [\n        \"//:marl\",\n        \"@googletest//:gtest\",\n    ],\n)\n"
        },
        {
          "name": "CHANGES.md",
          "type": "blob",
          "size": 0.2109375,
          "content": "# Revision history for `marl`\n\nAll notable changes to this project will be documented in this file.\nThis project adheres to [Semantic Versioning](https://semver.org/).\n\n## 1.0.0-dev\n\nFirst versioned release of marl.\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 14.7587890625,
          "content": "# Copyright 2019 The Marl Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\ncmake_minimum_required(VERSION 3.22.1)\n\ninclude(cmake/parse_version.cmake)\nparse_version(\"${CMAKE_CURRENT_SOURCE_DIR}/CHANGES.md\" MARL)\n\n# Marl only needs C++11, but it has sometimes been tested with C++20\nset(CMAKE_CXX_STANDARD 11)\n\nproject(Marl\n    VERSION   \"${MARL_VERSION_MAJOR}.${MARL_VERSION_MINOR}.${MARL_VERSION_PATCH}\"\n    LANGUAGES C CXX ASM\n)\n\nif (EMSCRIPTEN)\n    add_compile_options(-O3 -pthread)\nendif()\n\ninclude(CheckCXXSourceCompiles)\n\n# MARL_IS_SUBPROJECT is 1 if added via add_subdirectory() from another project.\nget_directory_property(MARL_IS_SUBPROJECT PARENT_DIRECTORY)\nif(MARL_IS_SUBPROJECT)\n    set(MARL_IS_SUBPROJECT 1)\nendif()\n\n###########################################################\n# Options\n###########################################################\nfunction(option_if_not_defined name description default)\n    if(NOT DEFINED ${name})\n        option(${name} ${description} ${default})\n    endif()\nendfunction()\n\noption_if_not_defined(MARL_WARNINGS_AS_ERRORS \"Treat warnings as errors\" OFF)\noption_if_not_defined(MARL_BUILD_EXAMPLES \"Build example applications\" OFF)\noption_if_not_defined(MARL_BUILD_TESTS \"Build tests\" OFF)\noption_if_not_defined(MARL_BUILD_BENCHMARKS \"Build benchmarks\" OFF)\noption_if_not_defined(MARL_BUILD_SHARED \"Build marl as a shared / dynamic library (default static)\" OFF)\noption_if_not_defined(MARL_USE_PTHREAD_THREAD_LOCAL \"Use pthreads for thread local storage\" OFF)\noption_if_not_defined(MARL_ASAN \"Build marl with address sanitizer\" OFF)\noption_if_not_defined(MARL_MSAN \"Build marl with memory sanitizer\" OFF)\noption_if_not_defined(MARL_TSAN \"Build marl with thread sanitizer\" OFF)\noption_if_not_defined(MARL_UBSAN \"Build marl with undefined-behavior sanitizer\" OFF)\noption_if_not_defined(MARL_INSTALL \"Create marl install target\" OFF)\noption_if_not_defined(MARL_FULL_BENCHMARK \"Run benchmarks for [0 .. numLogicalCPUs] with no stepping\" OFF)\noption_if_not_defined(MARL_FIBERS_USE_UCONTEXT \"Use ucontext instead of assembly for fibers (ignored for platforms that do not support ucontext)\" OFF)\noption_if_not_defined(MARL_DEBUG_ENABLED \"Enable debug checks even in release builds\" OFF)\n\n###########################################################\n# Directories\n###########################################################\nfunction(set_if_not_defined name value)\n    if(NOT DEFINED ${name})\n        set(${name} ${value} PARENT_SCOPE)\n    endif()\nendfunction()\n\nset(MARL_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src)\nset(MARL_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/include)\nset_if_not_defined(MARL_THIRD_PARTY_DIR ${CMAKE_CURRENT_SOURCE_DIR}/third_party)\nset_if_not_defined(MARL_GOOGLETEST_DIR ${MARL_THIRD_PARTY_DIR}/googletest)\nset_if_not_defined(MARL_BENCHMARK_DIR ${MARL_THIRD_PARTY_DIR}/benchmark)\n\n###########################################################\n# Submodules\n###########################################################\nif(MARL_BUILD_TESTS)\n    if(NOT EXISTS ${MARL_GOOGLETEST_DIR}/.git)\n        message(WARNING \"third_party/googletest submodule missing.\")\n        message(WARNING \"Run: `git submodule update --init` to build tests.\")\n        set(MARL_BUILD_TESTS OFF)\n    endif()\nendif(MARL_BUILD_TESTS)\n\nif(MARL_BUILD_BENCHMARKS)\n    if(NOT EXISTS ${MARL_BENCHMARK_DIR}/.git)\n        message(WARNING \"third_party/benchmark submodule missing.\")\n        message(WARNING \"Run: `git submodule update --init` to build benchmarks.\")\n        set(MARL_BUILD_BENCHMARKS OFF)\n    endif()\nendif(MARL_BUILD_BENCHMARKS)\n\nif(MARL_BUILD_BENCHMARKS)\n    set(BENCHMARK_ENABLE_TESTING FALSE CACHE BOOL FALSE FORCE)\n    add_subdirectory(${MARL_BENCHMARK_DIR})\nendif(MARL_BUILD_BENCHMARKS)\n\n###########################################################\n# Compiler feature tests\n###########################################################\n# Check that the Clang Thread Safety Analysis' try_acquire_capability behaves\n# correctly. This is broken on some earlier versions of clang.\n# See: https://bugs.llvm.org/show_bug.cgi?id=32954\nset(SAVE_CMAKE_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS})\nset(CMAKE_REQUIRED_FLAGS \"-Wthread-safety -Werror\")\ncheck_cxx_source_compiles(\n    \"int main() {\n      struct __attribute__((capability(\\\"mutex\\\"))) Mutex {\n        void Unlock() __attribute__((release_capability)) {};\n        bool TryLock() __attribute__((try_acquire_capability(true))) { return true; };\n      };\n      Mutex m;\n      if (m.TryLock()) {\n        m.Unlock();  // Should not warn.\n      }\n      return 0;\n    }\"\n    MARL_THREAD_SAFETY_ANALYSIS_SUPPORTED)\nset(CMAKE_REQUIRED_FLAGS ${SAVE_CMAKE_REQUIRED_FLAGS})\n\n# Check whether ucontext is supported.\nset(SAVE_CMAKE_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS})\nset(CMAKE_REQUIRED_FLAGS \"-Werror\")\ncheck_cxx_source_compiles(\n    \"#include <ucontext.h>\n    int main() {\n      ucontext_t ctx;\n      getcontext(&ctx);\n      makecontext(&ctx, nullptr, 2, 1, 2);\n      swapcontext(&ctx, &ctx);\n      return 0;\n    }\"\n    MARL_UCONTEXT_SUPPORTED)\nset(CMAKE_REQUIRED_FLAGS ${SAVE_CMAKE_REQUIRED_FLAGS})\nif (MARL_FIBERS_USE_UCONTEXT AND NOT MARL_UCONTEXT_SUPPORTED)\n    # Disable MARL_FIBERS_USE_UCONTEXT and warn if MARL_UCONTEXT_SUPPORTED is 0.\n    message(WARNING \"MARL_FIBERS_USE_UCONTEXT is enabled, but ucontext is not supported by the target. Disabling\")\n    set(MARL_FIBERS_USE_UCONTEXT 0)\nendif()\n\nif(MARL_IS_SUBPROJECT)\n    # Export supported flags as this may be useful to parent projects\n    set(MARL_THREAD_SAFETY_ANALYSIS_SUPPORTED PARENT_SCOPE ${MARL_THREAD_SAFETY_ANALYSIS_SUPPORTED})\n    set(MARL_UCONTEXT_SUPPORTED               PARENT_SCOPE ${MARL_UCONTEXT_SUPPORTED})\nendif()\n\n###########################################################\n# File lists\n###########################################################\nset(MARL_LIST\n    ${MARL_SRC_DIR}/debug.cpp\n    ${MARL_SRC_DIR}/memory.cpp\n    ${MARL_SRC_DIR}/scheduler.cpp\n    ${MARL_SRC_DIR}/thread.cpp\n    ${MARL_SRC_DIR}/trace.cpp\n)\nif(NOT MSVC)\n    list(APPEND MARL_LIST\n        ${MARL_SRC_DIR}/osfiber_aarch64.c\n        ${MARL_SRC_DIR}/osfiber_arm.c\n        ${MARL_SRC_DIR}/osfiber_asm_aarch64.S\n        ${MARL_SRC_DIR}/osfiber_asm_arm.S\n        ${MARL_SRC_DIR}/osfiber_asm_loongarch64.S\n        ${MARL_SRC_DIR}/osfiber_asm_mips64.S\n        ${MARL_SRC_DIR}/osfiber_asm_ppc64.S\n        ${MARL_SRC_DIR}/osfiber_asm_rv64.S\n        ${MARL_SRC_DIR}/osfiber_asm_x64.S\n        ${MARL_SRC_DIR}/osfiber_asm_x86.S\n        ${MARL_SRC_DIR}/osfiber_loongarch64.c\n        ${MARL_SRC_DIR}/osfiber_mips64.c\n        ${MARL_SRC_DIR}/osfiber_ppc64.c\n        ${MARL_SRC_DIR}/osfiber_rv64.c\n        ${MARL_SRC_DIR}/osfiber_x64.c\n        ${MARL_SRC_DIR}/osfiber_x86.c\n        ${MARL_SRC_DIR}/osfiber_emscripten.cpp\n    )\nendif(NOT MSVC)\n\n###########################################################\n# OS libraries\n###########################################################\nfind_package(Threads REQUIRED)\n\n###########################################################\n# Functions\n###########################################################\nfunction(marl_set_target_options target)\n    if(MARL_THREAD_SAFETY_ANALYSIS_SUPPORTED)\n        target_compile_options(${target} PRIVATE \"-Wthread-safety\")\n    endif()\n\n    # Enable all warnings\n    if(MSVC)\n        target_compile_options(${target} PRIVATE \"-W4\")\n    else()\n        target_compile_options(${target} PRIVATE \"-Wall\")\n    endif()\n\n    # Disable specific, pedantic warnings\n    if(MSVC)\n        target_compile_options(${target} PRIVATE\n            \"-D_CRT_SECURE_NO_WARNINGS\"\n            \"/wd4127\" # conditional expression is constant\n            \"/wd4324\" # structure was padded due to alignment specifier\n        )\n    endif()\n\n    # Treat all warnings as errors\n    if(MARL_WARNINGS_AS_ERRORS)\n        if(MSVC)\n            target_compile_options(${target} PRIVATE \"/WX\")\n        else()\n            target_compile_options(${target} PRIVATE \"-Werror\")\n        endif()\n    endif(MARL_WARNINGS_AS_ERRORS)\n\n    if(MARL_USE_PTHREAD_THREAD_LOCAL)\n        target_compile_definitions(${target} PRIVATE \"MARL_USE_PTHREAD_THREAD_LOCAL=1\")\n        target_link_libraries(${target} PUBLIC pthread)\n    endif()\n\n    if(MARL_ASAN)\n        target_compile_options(${target} PUBLIC \"-fsanitize=address\")\n        target_link_libraries(${target} PUBLIC \"-fsanitize=address\")\n    elseif(MARL_MSAN)\n        target_compile_options(${target} PUBLIC \"-fsanitize=memory\")\n        target_link_libraries(${target} PUBLIC \"-fsanitize=memory\")\n    elseif(MARL_TSAN)\n        target_compile_options(${target} PUBLIC \"-fsanitize=thread\")\n        target_link_libraries(${target} PUBLIC \"-fsanitize=thread\")\n    elseif(MARL_UBSAN)\n        target_compile_options(${target} PUBLIC \"-fsanitize=undefined\")\n        target_link_libraries(${target} PUBLIC \"-fsanitize=undefined\")\n    endif()\n\n    if(MARL_FIBERS_USE_UCONTEXT)\n        target_compile_definitions(${target} PRIVATE \"MARL_FIBERS_USE_UCONTEXT=1\")\n    endif()\n\n    if(MARL_DEBUG_ENABLED)\n        target_compile_definitions(${target} PRIVATE \"MARL_DEBUG_ENABLED=1\")\n    endif()\n\n    if(CMAKE_SYSTEM_PROCESSOR MATCHES \"^rv.*\")\n        target_link_libraries(${target} INTERFACE atomic) #explicitly use -latomic for RISC-V linking\n    endif()\n\n    target_include_directories(${target} PUBLIC $<BUILD_INTERFACE:${MARL_INCLUDE_DIR}>)\nendfunction(marl_set_target_options)\n\n###########################################################\n# Targets\n###########################################################\n\n# marl\nif(MARL_BUILD_SHARED OR BUILD_SHARED_LIBS)\n    add_library(marl SHARED ${MARL_LIST})\n    if(MSVC)\n        target_compile_definitions(marl\n            PRIVATE \"MARL_BUILDING_DLL=1\"\n            PUBLIC  \"MARL_DLL=1\"\n        )\n    endif()\nelse()\n    add_library(marl ${MARL_LIST})\nendif()\n\nif(NOT MSVC)\n    # Public API symbols are made visible with the MARL_EXPORT annotation.\n    target_compile_options(marl PRIVATE \"-fvisibility=hidden\")\nendif()\n\nset_target_properties(marl PROPERTIES\n    POSITION_INDEPENDENT_CODE 1\n    VERSION ${MARL_VERSION}\n    SOVERSION \"${MARL_VERSION_MAJOR}\"\n)\n\nmarl_set_target_options(marl)\n\ntarget_link_libraries(marl PUBLIC Threads::Threads)\n\n# install\nif(MARL_INSTALL)\n    include(CMakePackageConfigHelpers)\n    include(GNUInstallDirs)\n\n    configure_package_config_file(\n        ${CMAKE_CURRENT_SOURCE_DIR}/cmake/marl-config.cmake.in\n        ${CMAKE_CURRENT_BINARY_DIR}/marl-config.cmake\n        INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/marl\n    )\n\n    install(DIRECTORY ${MARL_INCLUDE_DIR}/marl\n        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n        USE_SOURCE_PERMISSIONS\n    )\n\n    install(TARGETS marl\n        EXPORT marl-targets\n        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n        INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n    )\n\n    install(EXPORT marl-targets\n        FILE marl-targets.cmake\n        NAMESPACE marl::\n        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/marl\n    )\n\n    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/marl-config.cmake\n        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/marl\n    )\nendif(MARL_INSTALL)\n\n# tests\nif(MARL_BUILD_TESTS)\n    set(MARL_TEST_LIST\n        ${MARL_SRC_DIR}/blockingcall_test.cpp\n        ${MARL_SRC_DIR}/conditionvariable_test.cpp\n        ${MARL_SRC_DIR}/containers_test.cpp\n        ${MARL_SRC_DIR}/dag_test.cpp\n        ${MARL_SRC_DIR}/defer_test.cpp\n        ${MARL_SRC_DIR}/event_test.cpp\n        ${MARL_SRC_DIR}/marl_test.cpp\n        ${MARL_SRC_DIR}/marl_test.h\n        ${MARL_SRC_DIR}/memory_test.cpp\n        ${MARL_SRC_DIR}/osfiber_test.cpp\n        ${MARL_SRC_DIR}/parallelize_test.cpp\n        ${MARL_SRC_DIR}/pool_test.cpp\n        ${MARL_SRC_DIR}/scheduler_test.cpp\n        ${MARL_SRC_DIR}/thread_test.cpp\n        ${MARL_SRC_DIR}/ticket_test.cpp\n        ${MARL_SRC_DIR}/waitgroup_test.cpp\n        ${MARL_GOOGLETEST_DIR}/googletest/src/gtest-all.cc\n        ${MARL_GOOGLETEST_DIR}/googlemock/src/gmock-all.cc\n    )\n\n    # Disable warnings for third party code\n    set_property(SOURCE\n        ${MARL_GOOGLETEST_DIR}/googletest/src/gtest-all.cc\n        ${MARL_GOOGLETEST_DIR}/googlemock/src/gmock-all.cc\n\tAPPEND PROPERTY COMPILE_OPTIONS -w)\n\n    set(MARL_TEST_INCLUDE_DIR\n        ${MARL_GOOGLETEST_DIR}/googletest/include/\n        ${MARL_GOOGLETEST_DIR}/googlemock/include/\n        ${MARL_GOOGLETEST_DIR}/googletest/\n        ${MARL_GOOGLETEST_DIR}/googlemock/\n    )\n\n    add_executable(marl-unittests ${MARL_TEST_LIST})\n\n    set_target_properties(marl-unittests PROPERTIES\n        INCLUDE_DIRECTORIES \"${MARL_TEST_INCLUDE_DIR}\"\n        FOLDER \"Tests\"\n    )\n\n    marl_set_target_options(marl-unittests)\n\n    target_link_libraries(marl-unittests PRIVATE marl)\nendif(MARL_BUILD_TESTS)\n\n# benchmarks\nif(MARL_BUILD_BENCHMARKS)\n    set(MARL_BENCHMARK_LIST\n        ${MARL_SRC_DIR}/blockingcall_bench.cpp\n        ${MARL_SRC_DIR}/defer_bench.cpp\n        ${MARL_SRC_DIR}/event_bench.cpp\n        ${MARL_SRC_DIR}/marl_bench.cpp\n        ${MARL_SRC_DIR}/non_marl_bench.cpp\n        ${MARL_SRC_DIR}/scheduler_bench.cpp\n        ${MARL_SRC_DIR}/ticket_bench.cpp\n        ${MARL_SRC_DIR}/waitgroup_bench.cpp\n    )\n\n    add_executable(marl-benchmarks ${MARL_BENCHMARK_LIST})\n    set_target_properties(${target} PROPERTIES FOLDER \"Benchmarks\")\n\n    marl_set_target_options(marl-benchmarks)\n\n    target_compile_definitions(marl-benchmarks PRIVATE\n        \"MARL_FULL_BENCHMARK=${MARL_FULL_BENCHMARK}\"\n    )\n\n    target_link_libraries(marl-benchmarks PRIVATE benchmark::benchmark marl)\nendif(MARL_BUILD_BENCHMARKS)\n\n# examples\nif(MARL_BUILD_EXAMPLES)\n    function(build_example target)\n        add_executable(${target} \"${CMAKE_CURRENT_SOURCE_DIR}/examples/${target}.cpp\")\n        set_target_properties(${target} PROPERTIES FOLDER \"Examples\")\n        marl_set_target_options(${target})\n        target_link_libraries(${target} PRIVATE marl)\n        if (EMSCRIPTEN)\n            target_link_options(${target} PRIVATE\n                    -O1\n                    -pthread -sPTHREAD_POOL_SIZE=2 -sPROXY_TO_PTHREAD\n                    -sASYNCIFY # -sASYNCIFY_STACK_SIZE=1000000\n                    -sALLOW_MEMORY_GROWTH=1 -sASSERTIONS\n                    -sENVIRONMENT=web,worker\n                    \"SHELL:--shell-file ${CMAKE_CURRENT_SOURCE_DIR}/examples/shell.emscripten.html\")\n            set_target_properties(${target} PROPERTIES SUFFIX .html)\n        endif()\n    endfunction(build_example)\n\n    build_example(fractal)\n    build_example(hello_task)\n    build_example(primes)\n    build_example(tasks_in_tasks)\nendif(MARL_BUILD_EXAMPLES)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.07421875,
          "content": "# How to Contribute\n\nWe'd love to accept your patches and contributions to this project. There are\njust a few small guidelines you need to follow.\n\n## Contributor License Agreement\n\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution;\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to <https://cla.developers.google.com/> to see\nyour current agreements on file or to sign a new one.\n\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\n\n## Code reviews\n\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\n[GitHub Help](https://help.github.com/articles/about-pull-requests/) for more\ninformation on using pull requests.\n\n## Community Guidelines\n\nThis project follows\n[Google's Open Source Community Guidelines](https://opensource.google.com/conduct/)."
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.66796875,
          "content": "# Marl\n\nMarl is a hybrid thread / fiber task scheduler written in C++ 11.\n\n## About\n\nMarl is a C++ 11 library that provides a fluent interface for running tasks across a number of threads.\n\nMarl uses a combination of fibers and threads to allow efficient execution of tasks that can block, while keeping a fixed number of hardware threads.\n\nMarl supports Windows, macOS, Linux, FreeBSD, Fuchsia, Emscripten, Android and iOS (arm, aarch64, loongarch64, mips64, ppc64, rv64, x86 and x64).\n\nMarl has no dependencies on other libraries (with an exception on googletest for building the optional unit tests).\n\nExample:\n\n```cpp\n#include \"marl/defer.h\"\n#include \"marl/event.h\"\n#include \"marl/scheduler.h\"\n#include \"marl/waitgroup.h\"\n\n#include <cstdio>\n\nint main() {\n  // Create a marl scheduler using all the logical processors available to the process.\n  // Bind this scheduler to the main thread so we can call marl::schedule()\n  marl::Scheduler scheduler(marl::Scheduler::Config::allCores());\n  scheduler.bind();\n  defer(scheduler.unbind());  // Automatically unbind before returning.\n\n  constexpr int numTasks = 10;\n\n  // Create an event that is manually reset.\n  marl::Event sayHello(marl::Event::Mode::Manual);\n\n  // Create a WaitGroup with an initial count of numTasks.\n  marl::WaitGroup saidHello(numTasks);\n\n  // Schedule some tasks to run asynchronously.\n  for (int i = 0; i < numTasks; i++) {\n    // Each task will run on one of the 4 worker threads.\n    marl::schedule([=] {  // All marl primitives are capture-by-value.\n      // Decrement the WaitGroup counter when the task has finished.\n      defer(saidHello.done());\n\n      printf(\"Task %d waiting to say hello...\\n\", i);\n\n      // Blocking in a task?\n      // The scheduler will find something else for this thread to do.\n      sayHello.wait();\n\n      printf(\"Hello from task %d!\\n\", i);\n    });\n  }\n\n  sayHello.signal();  // Unblock all the tasks.\n\n  saidHello.wait();  // Wait for all tasks to complete.\n\n  printf(\"All tasks said hello.\\n\");\n\n  // All tasks are guaranteed to complete before the scheduler is destructed.\n}\n```\n\n## Benchmarks\n\nGraphs of several microbenchmarks can be found [here](https://google.github.io/marl/benchmarks).\n\n## Building\n\nMarl contains many unit tests and examples that can be built using CMake.\n\nUnit tests require fetching the `googletest` external project, which can be done by typing the following in your terminal:\n\n```bash\ncd <path-to-marl>\ngit submodule update --init\n```\n\n### Linux and macOS\n\nTo build the unit tests and examples, type the following in your terminal:\n\n```bash\ncd <path-to-marl>\nmkdir build\ncd build\ncmake .. -DMARL_BUILD_EXAMPLES=1 -DMARL_BUILD_TESTS=1\nmake\n```\n\nThe resulting binaries will be found in `<path-to-marl>/build`\n\n### Emscripten\n\n1. install and activate the emscripten sdk following [standard instructions for your platform](https://emscripten.org/docs/getting_started/downloads.html).\n2. build an example from the examples folder using emscripten, say `hello_task`. \n```bash\ncd <path-to-marl>\nmkdir build\ncd build\nemcmake cmake .. -DMARL_BUILD_EXAMPLES=1\nmake hello_task -j 8\n```\nNOTE: you want to change the value of the linker flag `sPTHREAD_POOL_SIZE` that must be at least as large as the number of threads used by your application.\n3. Test the emscripten output.\nYou can use the provided python script to create a local web server:\n```bash\n../run_webserver\n```\nIn your browser, navigate to the example URL: [http://127.0.0.1:8080/hello_task.html](http://127.0.0.1:8080/hello_task.html).  \nVoilà - you should see the log output appear on the web page.\n\n### Installing Marl (vcpkg)\n\nAlternatively, you can build and install Marl using [vcpkg](https://github.com/Microsoft/vcpkg/) dependency manager:\n\n```bash or powershell\ngit clone https://github.com/Microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.sh\n./vcpkg integrate install\n./vcpkg install marl\n```\n\nThe Marl port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\n### Windows\n\nMarl can be built using [Visual Studio 2019's CMake integration](https://docs.microsoft.com/en-us/cpp/build/cmake-projects-in-visual-studio?view=vs-2019).\n\n### Using Marl in your CMake project\n\nYou can build and link Marl using `add_subdirectory()` in your project's `CMakeLists.txt` file:\n\n```cmake\nset(MARL_DIR <path-to-marl>) # example <path-to-marl>: \"${CMAKE_CURRENT_SOURCE_DIR}/third_party/marl\"\nadd_subdirectory(${MARL_DIR})\n```\n\nThis will define the `marl` library target, which you can pass to `target_link_libraries()`:\n\n```cmake\ntarget_link_libraries(<target> marl) # replace <target> with the name of your project's target\n```\n\nYou may also wish to specify your own paths to the third party libraries used by `marl`.\nYou can do this by setting any of the following variables before the call to `add_subdirectory()`:\n\n```cmake\nset(MARL_THIRD_PARTY_DIR <third-party-root-directory>) # defaults to ${MARL_DIR}/third_party\nset(MARL_GOOGLETEST_DIR  <path-to-googletest>)         # defaults to ${MARL_THIRD_PARTY_DIR}/googletest\nadd_subdirectory(${MARL_DIR})\n```\n\n### Usage Recommendations\n\n#### Capture marl synchronization primitives by value\n\nAll marl synchronization primitives aside from `marl::ConditionVariable` should be lambda-captured by **value**:\n\n```c++\nmarl::Event event;\nmarl::schedule([=]{ // [=] Good, [&] Bad.\n  event.signal();\n})\n```\n\nInternally, these primitives hold a shared pointer to the primitive state. By capturing by value we avoid common issues where the primitive may be destructed before the last reference is used.\n\n#### Create one instance of `marl::Scheduler`, use it for the lifetime of the process\n\nThe `marl::Scheduler` constructor can be expensive as it may spawn a number of hardware threads. \\\nDestructing the `marl::Scheduler` requires waiting on all tasks to complete.\n\nMultiple `marl::Scheduler`s may fight each other for hardware thread utilization.\n\nFor these reasons, it is recommended to create a single `marl::Scheduler` for the lifetime of your process.\n\nFor example:\n\n```c++\nint main() {\n  marl::Scheduler scheduler(marl::Scheduler::Config::allCores());\n  scheduler.bind();\n  defer(scheduler.unbind());\n\n  return do_program_stuff();\n}\n```\n\n#### Bind the scheduler to externally created threads\n\nIn order to call `marl::schedule()` the scheduler must be bound to the calling thread. Failure to bind the scheduler to the thread before calling `marl::schedule()` will result in undefined behavior.\n\n`marl::Scheduler` may be simultaneously bound to any number of threads, and the scheduler can be retrieved from a bound thread with `marl::Scheduler::get()`.\n\nA typical way to pass the scheduler from one thread to another would be:\n\n```c++\nstd::thread spawn_new_thread() {\n  // Grab the scheduler from the currently running thread.\n  marl::Scheduler* scheduler = marl::Scheduler::get();\n\n  // Spawn the new thread.\n  return std::thread([=] {\n    // Bind the scheduler to the new thread.\n    scheduler->bind();\n    defer(scheduler->unbind());\n\n    // You can now safely call `marl::schedule()`\n    run_thread_logic();\n  });\n}\n\n```\n\nAlways remember to unbind the scheduler before terminating the thread. Forgetting to unbind will result in the `marl::Scheduler` destructor blocking indefinitely.\n\n#### Don't use externally blocking calls in marl tasks\n\nThe `marl::Scheduler` internally holds a number of worker threads which will execute the scheduled tasks. If a marl task becomes blocked on a marl synchronization primitive, marl can yield from the blocked task and continue execution of other scheduled tasks.\n\nCalling a non-marl blocking function on a marl worker thread will prevent that worker thread from being able to switch to execute other tasks until the blocking function has returned. Examples of these non-marl blocking functions include: [`std::mutex::lock()`](https://en.cppreference.com/w/cpp/thread/mutex/lock), [`std::condition_variable::wait()`](https://en.cppreference.com/w/cpp/thread/condition_variable/wait), [`accept()`](http://man7.org/linux/man-pages/man2/accept.2.html).\n\nShort blocking calls are acceptable, such as a mutex lock to access a data structure. However be careful that you do not use a marl blocking call with a `std::mutex` lock held - the marl task may yield with the lock held, and block other tasks from re-locking the mutex. This sort of situation may end up with a deadlock.\n\nIf you need to make a blocking call from a marl worker thread, you may wish to use [`marl::blocking_call()`](https://github.com/google/marl/blob/main/include/marl/blockingcall.h), which will spawn a new thread for performing the call, allowing the marl worker to continue processing other scheduled tasks.\n\n---\n\nNote: This is not an officially supported Google product\n"
        },
        {
          "name": "WORKSPACE",
          "type": "blob",
          "size": 1.25390625,
          "content": "# Copyright 2019 The Marl Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\n\nhttp_archive(\n    name = \"googletest\",  # 2021-07-09\n    sha256 = \"353571c2440176ded91c2de6d6cd88ddd41401d14692ec1f99e35d013feda55a\",\n    strip_prefix = \"googletest-release-1.11.0\",\n    urls = [\"https://github.com/google/googletest/archive/refs/tags/release-1.11.0.zip\"],\n)\n\nhttp_archive(\n    name = \"platforms\",\n    urls = [\n        \"https://mirror.bazel.build/github.com/bazelbuild/platforms/releases/download/0.0.6/platforms-0.0.6.tar.gz\",\n        \"https://github.com/bazelbuild/platforms/releases/download/0.0.6/platforms-0.0.6.tar.gz\",\n    ],\n    sha256 = \"5308fc1d8865406a49427ba24a9ab53087f17f5266a7aabbfc28823f3916e1ca\",\n)\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.0380859375,
          "content": "module github.com/google/marl\n\ngo 1.16\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "kokoro",
          "type": "tree",
          "content": null
        },
        {
          "name": "license-checker.cfg",
          "type": "blob",
          "size": 0.65234375,
          "content": "{\n    \"licenses\": [\n        \"Apache-2.0\",\n        \"Apache-2.0-Header\"\n    ],\n    \"paths\": [\n        {\n            \"exclude\": [\n                \".clang-format\",\n                \".gitignore\",\n                \".gitmodules\",\n                \".vscode/*.json\",\n                \"**.md\",\n                \"AUTHORS\",\n                \"LICENSE\",\n                \"go.mod\",\n                \"build/**\",\n                \"docs/imgs/*.svg\",\n                \"kokoro/**.cfg\",\n                \"third_party/benchmark/**\",\n                \"third_party/googletest/**\",\n                \"examples/run_webserver\",\n                \"examples/shell.emscripten.html\"\n            ]\n        }\n    ]\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}