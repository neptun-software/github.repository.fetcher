{
  "metadata": {
    "timestamp": 1736565603390,
    "page": 483,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "eteran/edb-debugger",
      "stars": 2734,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 5.31640625,
          "content": "---\nLanguage:        Cpp\nAccessModifierOffset: -4\nAlignAfterOpenBracket: Align\nAlignArrayOfStructures: None\nAlignConsecutiveMacros: Consecutive\nAlignConsecutiveAssignments: Consecutive\nAlignConsecutiveBitFields: None\nAlignConsecutiveDeclarations: None\nAlignEscapedNewlines: Left\nAlignOperands:   Align\nAlignTrailingComments: true\nAllowAllArgumentsOnNextLine: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortEnumsOnASingleLine: true\nAllowShortBlocksOnASingleLine: Never\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: InlineOnly\nAllowShortLambdasOnASingleLine: All\nAllowShortIfStatementsOnASingleLine: WithoutElse\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: Yes\nAttributeMacros:\n  - __capability\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:\n  AfterCaseLabel:  false\n  AfterClass:      false\n  AfterControlStatement: Never\n  AfterEnum:       false\n  AfterFunction:   false\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  AfterExternBlock: false\n  BeforeCatch:     false\n  BeforeElse:      false\n  BeforeLambdaBody: false\n  BeforeWhile:     false\n  IndentBraces:    false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakBeforeBinaryOperators: None\nBreakBeforeConceptDeclarations: true\nBreakBeforeBraces: Attach\nBreakBeforeInheritanceComma: false\nBreakInheritanceList: BeforeColon\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: BeforeColon\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit:     0\nCommentPragmas:  '^ IWYU pragma:'\nQualifierAlignment: Leave\nCompactNamespaces: false\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDeriveLineEnding: true\nDerivePointerAlignment: false\nDisableFormat:   false\nEmptyLineAfterAccessModifier: Never\nEmptyLineBeforeAccessModifier: LogicalBlock\nExperimentalAutoDetectBinPacking: false\nPackConstructorInitializers: NextLine\nBasedOnStyle:    ''\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nAllowAllConstructorInitializersOnNextLine: true\nFixNamespaceComments: false\nForEachMacros:\n  - foreach\n  - Q_FOREACH\n  - BOOST_FOREACH\nIfMacros:\n  - KJ_IF_MAYBE\nIncludeBlocks:   Preserve\nIncludeCategories:\n  - Regex:           '^\"(llvm|llvm-c|clang|clang-c)/'\n    Priority:        2\n    SortPriority:    0\n    CaseSensitive:   false\n  - Regex:           '^(<|\"(gtest|gmock|isl|json)/)'\n    Priority:        3\n    SortPriority:    0\n    CaseSensitive:   false\n  - Regex:           '.*'\n    Priority:        1\n    SortPriority:    0\n    CaseSensitive:   false\nIncludeIsMainRegex: '(Test)?$'\nIncludeIsMainSourceRegex: ''\nIndentAccessModifiers: false\nIndentCaseLabels: false\nIndentCaseBlocks: false\nIndentGotoLabels: true\nIndentPPDirectives: None\nIndentExternBlock: AfterExternBlock\nIndentRequires:  false\nIndentWidth:     4\nIndentWrappedFunctionNames: false\nInsertTrailingCommas: None\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: true\nLambdaBodyIndentation: Signature\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBinPackProtocolList: Auto\nObjCBlockIndentWidth: 2\nObjCBreakBeforeNestedBlockParam: true\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 19\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakOpenParenthesis: 0\nPenaltyBreakString: 1000\nPenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 60\nPenaltyIndentedWhitespace: 0\nPointerAlignment: Right\nPPIndentWidth:   -1\nReferenceAlignment: Pointer\nReflowComments:  true\nRemoveBracesLLVM: false\nSeparateDefinitionBlocks: Leave\nShortNamespaceLines: 1\nSortIncludes:    CaseSensitive\nSortJavaStaticImport: Before\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: false\nSpaceAfterLogicalNot: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCaseColon: false\nSpaceBeforeCpp11BracedList: false\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: ControlStatements\nSpaceBeforeParensOptions:\n  AfterControlStatements: true\n  AfterForeachMacros: true\n  AfterFunctionDefinitionName: false\n  AfterFunctionDeclarationName: false\n  AfterIfMacros:   true\n  AfterOverloadedOperator: false\n  BeforeNonEmptyParentheses: false\nSpaceAroundPointerQualifiers: Default\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceInEmptyBlock: false\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  Never\nSpacesInConditionalStatement: false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInLineCommentPrefix:\n  Minimum:         1\n  Maximum:         -1\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nSpaceBeforeSquareBrackets: false\nBitFieldColonSpacing: Both\nStandard:        Latest\nStatementAttributeLikeMacros:\n  - Q_EMIT\nStatementMacros:\n  - Q_UNUSED\n  - QT_REQUIRE_VERSION\nTabWidth:        4\nUseCRLF:         false\nUseTab:          ForContinuationAndIndentation\nWhitespaceSensitiveMacros:\n  - STRINGIZE\n  - PP_STRINGIZE\n  - BOOST_PP_STRINGIZE\n  - NS_SWIFT_NAME\n  - CF_SWIFT_NAME\n...\n\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.373046875,
          "content": "# EditorConfig is awesome: http://EditorConfig.org\n\n# top-most EditorConfig file\nroot = true\n\n# Unix-style newlines with a newline ending every file\n[*]\nend_of_line = lf\ninsert_final_newline = true\n\n\n# Matches multiple files with brace expansion notation\n# Set default charset\n[*.{c,h,cpp,hpp,tcc}]\ncharset = utf-8\nindent_style = tab\nindent_size = 4\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0263671875,
          "content": "CMakeLists.txt.user*\nbuild\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.2001953125,
          "content": "[submodule \"src/qhexview\"]\n\tpath = src/qhexview\n\turl = https://github.com/eteran/qhexview.git\n[submodule \"lib/gdtoa-desktop\"]\n\tpath = lib/gdtoa-desktop\n\turl = https://github.com/10110111/gdtoa-desktop.git\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.4775390625,
          "content": "language: cpp\n\ndist: bionic\n\ncache: apt\n\ncompiler:\n    - gcc\n\nenv:\n    global:\n        - MAKEFLAGS=\"-j2\"\n\nbefore_script:\n    - mkdir build && cd build && cmake ..\n\nscript:\n    - make\n\nos:\n    - linux\n\naddons:\n    apt:\n        packages:\n            - build-essential\n            - cmake\n            - libcapstone-dev\n            - libgraphviz-dev\n            - libqt5svg5-dev\n            - libqt5xmlpatterns5-dev\n            - pkg-config\n            - qt5-default\n            - qtbase5-dev\n"
        },
        {
          "name": "BUGS",
          "type": "blob",
          "size": 0.0986328125,
          "content": "This file has been superseded by the issue tracker at: https://github.com/eteran/edb-debugger/issues\n"
        },
        {
          "name": "CHANGELOG",
          "type": "blob",
          "size": 69.416015625,
          "content": "NOTE: for future change logs, please refer to the commit logs found at:\n      https://github.com/eteran/edb-debugger/commits/master\n\n\n2011-07-11\n----------\n* Fixed a typo in the configuration where the close_behavior wasn't getting\n  loaded correctly.\n\n2011-07-07\n----------\n* Environment plugin now can get environment variables when no symbols are found\n  it doesn't know the address of the variables, but at least you can view them.\n\n\n2011-06-22\n----------\n* Code cleanup, some minor optimizations.\n\n2010-10-16\n----------\n\n* Since the tools that ./edb_make_symbolmap is dependant on are not uniform \n  across all the platforms that I intend to support. I have built symbol\n  file generation into edb directly. Running './edb --symbols <filename>' will\n  create a symbol file in the same format as the old script. For now, ELF is the\n  only supported format but more will be added as needed. This also means\n  that future versions of edb will be able to generate symbols as needed\n  if no symbol file is provided, making things \"just work\" more often.\n\n2010-10-14\n----------\n\n* Improved the way that different OS's are handled in the source tree a bit\n\n* Added more detection of suspicious breakpoints (ones that are likely \n  a user error).\n  \n* OpenBSD support is now at a functional level. There are some features\n  missing, but it is a good start. You can do all of the basic debugging\n  tasks now.\n\n2010-10-10\n----------\n\n* Reference finder now will find calls/jumps and consider them code refernces\n  double clicking those results will jump to the address in the CPU view.\n  \n* Code in general has now adopted a more clean and consistant style. It is\n  a work in progress, but almost all plugin accessible code is conformant.\n  \n* Compiles and attaches on OpenBSD, but unfortunately cannot step yet. Almost\n  functional.\n  \n* OpenBSD use KVM to get process maps, much cleaner than relying on other \n  meathods.\n\n* The breakpoint API is simpler and has less redundancy between the core and \n  the edb namespace.\n  \n* Minor fixes for arches that don't support unaligned access. No such arch is\n  currently supported, but may as well plan ahead ;-).\n  \n* New ROP gadget finder plugin. It is in the early stages, but will evolve over\n  time. I hope to support some form of automatic shellcode generation in the\n  future.\n  \n* Experimental \"run until return\" support. This is slow and not always correct\n  but a start. It seems that linux delivers a different event when stepping\n  over a syscall instruction, so I'm not sure of the best way to address that.\n  \n2010-09-20\n----------\n\n* Lots of small fixes here and there.\n\n* Lots of work towards a working OSX port. It isn't quite there yet, but the\n  ground work is being layed.\n  \n* Fixed a bug in the expression parser.\n\n* Working towards a new improved edisassm API which will make introducing new\n  arches much simpler in the long run.\n  \n* Fixed a hang when trying to use gnome-terminal as the I/O TTY. It's not what\n  I consider an ideal fix (string compare to determine what terminal you are\n  using), but it appears to be reasonable.\n  \n* LOTS of small speed tweaks all over the place.\n\n* Did some work trying to get a functional trace mode, in my tests it is almost\n  working correctly, but not quite there.\n\n2010-07-02\n----------\n\n* Added Ctrl+G shortcut. This is a global shortcut which will activate the \n  \"goto\" functionality of the widget with the focus.\n  \n* Made the instruction analysis window update the register values are\n  changed by the user.\n\n2010-06-07\n----------\n\n* Added the ability to analyze the currently *viewed* region, not just the one\n  that the IP is in currently. Also added an \"Analyze Here\" context menu to the\n  cpu view.\n\n2010-05-27\n----------\n\n* Added display of fs and gs base addresses. There is not an aweful lot of\n  things you can do with this information since you cannot set this value\n  directly. But it does provide a nice way to see what the address of the\n  what is commonly the TEB/TCB.\n\n* [E/R]FLAGS is now editable again in the GUI. I accidentally disabled this\n  in the last release while refactoring some code.\n\n* Much cleaner event model implemented. It is much more robust and simpler too!\n  Now handlers simply return codes describing the resume state. The only thing \n  to keep in mind is that if you play with the state in a handler. You almost \n  always have to call edb::v1::syncronizeState() so the resume functions have \n  an up to date view to work with.\n  \n* Thanks to the new event model, breakpoint conditions work much more reliably.\n\n* Minor optimization in resuming, no longer steps before a resume when it isn't \n  necessary.\n  \n* NOTE: I believe that I found a kernel bug where stepping in a signal handler\n  can cause the target process to have the TF flag set incorrectly. Resulting\n  in a purpetual stepping state. I may be able to work around this by \n  explicitly masking the flag in certain circumstances. But I feel this might\n  result in other subtle bugs. Hopefully, if this isn't the expected behavior\n  the linux guys will have this fixed soon. \n  See: https://bugzilla.kernel.org/show_bug.cgi?id=16061 for details.\n\n2010-05-26\n----------\n\n* Fixed decoding of cmpxchg8b in 64-bit mode. It was incorrectly being\n  decoded as cmpxchg16b.\n\n* Started working on improving the event model of edb. It will be a lot of\n  work, but in the end it will be much more robust\n  \n* Fixed a fairly major bug, I'm suprised that noone noticed ;) Opcodes which \n  are completely different in 64-bit mode (like 0x06 is \"push es\" in 32-bit\n  but invalid in 64-bit) were not being decoded properly at all. The alternated\n  tables were not being linked into the disassembly library correctly.\n\n2010-04-27\n----------\n\n* Lots of minor tweaks and code refactoring\n\n* Themes! there is no UI for modifying them, but you can set them up in the \n  config file (~/.config/codef00.com/edb.conf) manually. Basically there is a \n  \"[Theme]\" section which gets read on startup (a change will need a restart \n  to take effect). In this section  there are a bunch of settings that effect \n  the look of the disassembly which looks like this:\n  \n\ttheme.<category>.<property>=<value>\n  \n  Valid categories are:\n  \n\tregister\n\tconstant\n\tptr\n\tprefix\n\tflow_ctrl\n\tfunction\n\tstack\n\tcomparison\n\tdata_xfer\n\tarithmetic\n\tlogic\n\tshift\n  \n  Valid properties are:\n  \n\tforeground\n\tbackground\n\tweight\n\titalic\n\tunderline\n  \n  NOTES:\n  \n  you may omit any property, which will yield the default value look for that\n  property.\n  \n  foreground and background are colors, this is a string which can be anything\n  you can pass to a QColor(const char *) constructor. So, it can take named \n  constants such as \"green\" or hex color codes like \"#00ff00\", the special value,\n  transparent is also allowed.  See the Qt documentation for the full details.\n  \n  weight is on a scale of 0 to 99. 50 being normal and 75 being bold.\n  \n  italic and underline are typical boolean values.\n  \n  EXAMPLE (this will give the default look):\n  \n\t[Theme]\n\ttheme.register.foreground=red\n\ttheme.register.background=transparent\n\ttheme.register.weight=75\n\ttheme.register.italic=false\n\ttheme.register.underline=false\n\ttheme.constant.foreground=black\n\ttheme.constant.background=transparent\n\ttheme.constant.weight=50\n\ttheme.constant.italic=false\n\ttheme.constant.underline=false\n\ttheme.ptr.foreground=darkGreen\n\ttheme.ptr.background=transparent\n\ttheme.ptr.weight=50\n\ttheme.ptr.italic=false\n\ttheme.ptr.underline=false\n\ttheme.prefix.foreground=black\n\ttheme.prefix.background=transparent\n\ttheme.prefix.weight=75\n\ttheme.prefix.italic=false\n\ttheme.prefix.underline=false\n\ttheme.flow_ctrl.foreground=blue\n\ttheme.flow_ctrl.background=yellow\n\ttheme.flow_ctrl.weight=50\n\ttheme.flow_ctrl.italic=false\n\ttheme.flow_ctrl.underline=false\n\ttheme.function.foreground=blue\n\ttheme.function.background=yellow\n\ttheme.function.weight=50\n\ttheme.function.italic=false\n\ttheme.function.underline=false\n\ttheme.stack.foreground=blue\n\ttheme.stack.background=transparent\n\ttheme.stack.weight=50\n\ttheme.stack.italic=false\n\ttheme.stack.underline=false\n\ttheme.comparison.foreground=blue\n\ttheme.comparison.background=transparent\n\ttheme.comparison.weight=50\n\ttheme.comparison.italic=false\n\ttheme.comparison.underline=false\n\ttheme.data_xfer.foreground=blue\n\ttheme.data_xfer.background=transparent\n\ttheme.data_xfer.weight=50\n\ttheme.data_xfer.italic=false\n\ttheme.data_xfer.underline=false\n\ttheme.arithmetic.foreground=blue\n\ttheme.arithmetic.background=transparent\n\ttheme.arithmetic.weight=50\n\ttheme.arithmetic.italic=false\n\ttheme.arithmetic.underline=false\n\ttheme.logic.foreground=blue\n\ttheme.logic.background=transparent\n\ttheme.logic.weight=50\n\ttheme.logic.italic=false\n\ttheme.logic.underline=false\n\ttheme.shift.foreground=blue\n\ttheme.shift.background=transparent\n\ttheme.shift.weight=50\n\ttheme.shift.italic=false\n\ttheme.shift.underline=false\n\ttheme.system.foreground=blue\n\ttheme.system.background=transparent\n\ttheme.system.weight=75\n\ttheme.system.italic=false\n\ttheme.system.underline=false\n  \n2010-04-01\n----------\n\n* Made the copy operation of QHexView widgets do an ascii rendering of what the\n  user has selected, this is infinitely more useful.\n  \n* Re-added the jump/call target symbol display in the disassembly view. This\n  was accidentally chopped when I added syntax highlighting.\n\t\n2010-03-31\n----------\n\n* Code cleanup\n\n* Fixed potential memory corruption in symbol management code (could not\n  demonstrate it, but technically it was possible).\n  \n* Added some options to the DumpState plugin\n\n* The DumpState plugin now uses the current data view tab as the basis for\n  its \"data\" portion of the output\n  \n* Got rid of the insanity of having \"ctrl+c\" mean \"check version\". :-P\n\n* The BreakpointManager is no longer a modal dialog.\n\n* Improved const correctness of some things\n\n* Fixed corner case where the UI wouldn't update immediately\n\n2010-02-26\n----------\n\n* Added support for highlighting of flow control commands\n\n* Next version will allow \"schemes\" in the same sense that ollydbg does\n  you will be able to edit the configuration file to adjust the colors to your\n  liking.\n\n2010-02-25\n----------\n\n* Added support for comments for bookmarks\n\n* Fixed a bug where the UI didn't update immediately after closing the config\n  dialog\n  \n* syntax highlighting in the CPU view!\n\n2010-01-15\n----------\n\n* Added \"Add Bookmark\" to CPU view context menu.\n\n2009-12-28\n----------\n\n* Too many small changes to list here :-P\n\n* Increased minimum Qt version from 4.2 to 4.5. Now that 4.5 is widely deployed\n  I think this is a reasonable requirement.\n\n2009-10-19\n----------\n\n* Fixed builds on some systems.\n\n* Made it so you can load plugins in any order and they should work just fine.\n\n* Disabled graphing capabilities for this release. Unfortunately, graphviz\n  has made a habit of breaking source compatibility in there C API which means\n  that the build will break on some systems. I may need to add some sort of\n  configure script in order to make this work correctly on all supported systems\n  :-(.\n\n2009-10-17\n----------\n\n* Fixed a crash if edb was set to use a terminal for I/O, but the program\n  field was empty.\n  \n* Many small optimizations.\n\n* A little bit of reorganization in the source tree.\n\n* More steps towards good thread support.\n\n* More functional in Win32 builds (still not good enough yet, but getting \n  closer)\n  \n* Heap Graphs! Sometimes they take a really long time to render, but they work\n  and can show relationships between nodes!\n\n2009-09-10\n----------\n\n* A few portability tweaks, working on creating a proper visual studio project\n  file eventually.\n  \n* QHexView and QDisassemblyView now format the address based on the size of\n  address_t instead of the native pointer size of the machine. This will allow\n  the possibility of future builds being able to do remote debugging and/or\n  debugging of 32-bit apps on a 64-bit platform.\n\n2009-08-17\n----------\n\n* Fixed a crashable dead reference usage in Analyzer/FunctionFinder plugins.\n\n* Improved the way that stop codes are handled internally, should make for\n  cleaner code.\n  \n* Some of the bigger operator new usages have exception guards. They shouldn't\n  be needed in 99% of cases, but it's better to not crash :-P.\n\n2009-08-11\n----------\n\n* Lots of minor code improvements.\n\n* Fixed conditional Breakpoints.\n\n* Fixed HW Breakpoints (I think).\n\n2009-07-16\n----------\n\n* Improved the way plugin options pages are shown.\n\n2009-07-13\n----------\n\n* Instruction<> objects are now \"copyable\", this is a somewhat expensive\n  operation, but is the first step towards making edisassm support being an\n  assembler as well (since it will return an Instruction object).\n\n2009-07-11\n----------\n\n* Made DebugEvent object a bit smarter as far as the info they carry with them.\n  This should simplify things a bit.\n  \n* Now passing DebugEvent by reference to handlers. I couldn't before because\n  the events were coming from the \"Event Thread\" but now that that is phased out\n  it is more efficient to pass them this way.\n\n* Changed the binary info plugins to be based on looking at a region, not a file\n  this is more flexible as it will allow it to analyze data which is only seen\n  at runtime.\n\n2009-07-09\n----------\n\n* Seems that older versions of gcc have slightly different behavior with \n  regard to exported embedded classes. Minor update\n\n2009-07-08\n----------\n\n* Heap analyzer now uses a linear search for the heap structures. This seem to \n  work nicely for both x86-64 and x86 arches.\n  \n2009-07-03\n----------\n\n* Added code to the heap analyzer to have it work with newer versions of glibc.\n  I should probably have some sort of search method instead of fixed offsets,\n  or better yet, do something reliable :-P.\n\n* Provided a means for plugins to add tabs to the options dialog. The\n  CheckVersion and Analyzer plugins now use this feature.\n  \n* The analyzer now has the option of not using \"fuzzy\" logic to find functions.\n  Without fuzzy logic, it is *much* faster and the results are very high\n  quality (since it only searches for functions reachable from known code). But \n  will find much less. The default is to use fuzzy logic.\n\n2009-07-01\n----------\n\n* Analyzer is *much* faster than it was, and more accurate in finding functions.\n\n2009-06-30\n----------\n\n* More work done to the core to help add thread support (not quite there yet).\n\n* Working on cleaning up the conditional BP stuff, making it more robust.\n\n* I believe that I have fixed the restart occasionally failing issue. Turns out\n  that you should do a waitpid() after a detach to avoid getting events from the\n  previously debugged process.\n\n2009-06-20\n----------\n\n* Enabled UTF-16 support in base string searching routines. For now, it only\n  will find strings which use the basic ASCII character set. Eventually I'll \n  find a good technique for finding non-english language strings as well.\n  \n* I Finally figured out how to safely catch SIGCHLD when using Qt4. This has\n  enabled me to implement a version of waitpid which has a timeout! I am hoping\n  that this proves to be nice and stable to I can finally phase out the\n  \"Event Thread.\" Which is necessary since ptrace really doesn't play nicely\n  when different threads are used.\n\n2009-05-29\n----------\n\n* Once again revised the plugin API. Now that the win32 build produces an\n  edb.lib file, the original style is more appropriate. So once again, plugins\n  can directly access the exported API. However, only the classes and functions\n  which are part of the stable API will be exported since edb is now compiled \n  with -fvisibility=hidden.\n  \n* Cleaned up a lot of code now that the plugin system is simpler.\n\n* Internal management of breakpoints is now simpler. Now I use shared pointers\n  to BP objects which use RAII techniques. This has made the code which manages\n  breakpoints MUCH cleaner :).\n\n* Fixed a crash when removing breakpoints via the breakpoint manager plugin.\n\n2009-05-27\n----------\n\n* Fixed the current line being outside of the disassembly view in certain\n  circumstances.\n\n2009-05-26\n----------\n\n* Added display of symbols in the code view.\n\n* Added the basis for future colorization in the disassembly.\n\n* Improved the way uppercase disassembly is handled. Most visibly, hex strings\n  are displayed like \"0xDEADBEEF\" instead of \"0XDEADBEEF\" making this much more\n  readable in uppercase mode.\n\n2009-05-15\n----------\n\n* Fixed crash during initial config if it couldn't find the DebuggerCore plugin.\n\n2009-04-14\n----------\n\n* Added the undocumented SAL opcode to edisassm.\n\n2009-03-30\n----------\n\n* Fixed a bug in edisassm's disassembly of operands of type Ob and Ow.\n\n2009-02-10\n----------\n\n* Moved the session handler code to be a plugin now. This will allow more\n  creative session implementations. For example, the session files could\n  be actually in a sqlite3 database, or even a mysql database for collaborative\n  commenting. It should be much more flexible.\n\n2009-02-04\n----------\n\n* Fixed a bug in the memory region modification code. It would ask if you wanted\n  to remove the execute permissions of the last executable region any time\n  there was only one left with execute permissions. This was the case even if \n  the region you wanted to modify wasn't executable to begin with.\n  \n* Started using boost::bind a lot more to make the code much more concise. Doing\n  this will allow me to make a lot of the \"search memory\" code be run by a \n  std::for_each calling a function object. The nice thing about this is that\n  it will nicely match the way that Qt's concurrent model. Making for a smooth\n  transition.\n\n2009-01-23\n----------\n\n* I've decided to start using boost (particularly smart pointers) wherever \n  appropriate. It will help make the code less likely to have bugs. Once Qt 4.5\n  is out for long enough, I'll likely switch over to them their smart pointers\n  since there is no point in having multiple library dependencies. But I feel \n  that boost is such a robust library, it would be silly not to take advantage \n  of it.\n\n2009-01-22\n----------\n\n* Implemented the \"Find ASCII string in stack\" feature. Works like a charm. \n  To be clear, it is searching for pointers to matching strings on the stack,\n  no strings in the stack itself. I *think* this is what people would want.\n  Also, it only cares if the the search string is the beginning of the string\n  on the stack (so if you look for \"/bin/\" it'll find \"/bin/ls\"). This is\n  because there could be any amount of data (or characters) after the string\n  on the stack.\n\n* Added the ability for plugins to add items to the various context menus. This\n  should allow much more useful plugins in the future. Starting with the \n  recently requested \"Find ASCII string in stack\" feature.\n\n2009-01-08\n----------\n\n* Reorganized much of the DebuggerCore code into separate platform specific\n  files to make things much easier to maintain.\n\n2008-12-28\n----------\n\n* Imported some code provided by Phillip Mayhew which is the beginning of a \n  OSX port. He provided almost all of the functionality necessary to get the\n  DebuggerCore plugin to be functional. Now I'll just have to start testing\n  on a Mac soon.\n\n2008-12-11\n----------\n\n* Fixed defunct process issue on kill/restart (missing waitpid)\n\n* simplified a lot of code involving starting and stopping things. I used to\n  delete/create objects each time. But simply stopping/starting them is \n  sufficient and means that I can do less NULL checks. \n  \n* Simplified the event loop.\n\n* Replaced all dynamic_cast's with qobject_cast's which don't require rtti.\n\n2008-12-10\n----------\n\n* New plugin system is complete and things are working normally again. A few \n  internal functions take more parameters but it decouples those parts from the\n  rest of the system.\n  \n* Windows port is now able to attach and (usually) step.\n\n* Improved portability of error handing system.\n\n2008-12-08\n----------\n\n* Started to make some large changes to how plugins interact with the core\n  application. Not all platforms I'd like to target support having a plugin\n  import symbols from the application that is loading it\n  (*cough* windows *cough*). So now there is a \"PluginAPI\" structure which is\n  passed to every plugin upon init which it will make a copy of (the interface\n  code does this for you and makes it accessible through an m_API variable).\n  \n  This new system allows me to have much more strict control over what a plugin\n  is allowed to do within edb which is nice, but it also will require I have a \n  \"Core Library\" that all plugins and edb will have to link to in order for \n  them to share classes which unfortunately means a little bit of binary code \n  duplication. Oh well.\n\n2008-12-07\n----------\n\n* Added a messagebox warning when the arch edb was built for doesn't match the \n  target process's arch.\n\n2008-12-06\n----------\n\n* More changes to support Win32/Win64\n\n* Fixed a crash when no analyzer plugin is available.\n\n* Started framework for supporting UTF16 strings in analysis. Currently it's a \n  lot of boxes and such, but I beleive it is working generally OK.\n\n2008-12-05\n----------\n\n* Made some minor changes to the edisassm.pro file\n\n* Reworked some function definitions to work around a visual studio bug.\n\n* edisassm *finally* builds with visual studio 2008! Time to start porting edb \n  to windows :-)\n\n2008-11-14\n----------\n\n* Improved the ebuild on 64-bit platforms.\n\n* Fixed search and replace error with default plugin path, it should work \n  correctly now.\n\n* Minor improvements to the html documentation.\n\n2008-10-20\n----------\n\n* Right clicking in the register view will no longer show \"Follow In ___\" \n  options for things such as segments, eflags and FPU values. these do not\n  have meaningful values as addresses.\n\n2008-10-14\n----------\n\n* Fixed a bug where some old stub code from before the 64-bit port was breaking\n  any instructions which use the FS or GS segments :(.\n  \n* Made the find ASCII string routines more intelligent about what they consider \n  to be an \"ASCII\" character. The output is a lot more comparable to the unix\n  strings command.\n\n2008-10-08\n----------\n\n* Switched from edb::v1::log to qDebug. The nice thing about this is that it \n  functions very much the same as my old logging. But also supports stream\n  oriented logging. Finally, it is \"hookable\" so that a widget could be used to\n  show the logging in a widget if we want.\n  \n* Made several string displays a bit more Unicode friendly. This most visibly\n  results in \"high\" ASCII characters no longer appearing as junk.\n\n2008-10-06\n----------\n\n* Started prepping the code for internationalization, this will be an ongoing \n  process. Once the process is started and I have at least one non-english\n  translation, then it will be helpful if people report un-translated strings.\n  But we aren't quite ready for that yet ;).\n  \n* Fixed a 64-bit compatibility bug in the breakpoint plugin.\n\n* Sped up heap analyzer a lot by disabling updates during population.\n\n2008-10-01\n----------\n\n* Fixed a bug introduced in last version where several entries for 0x00000000 \n  were be entered in the function finder plugin. This was actually a bug in\n  the analysis engine where I failed to notice the side effects of reading a \n  map using the [] syntax.\n  \n* Made it so the symbol viewer plugin will by default open up symbols for code\n  in the disassembly and data in the data views when double clicked.\n  \n* Vastly improved the analyzer's handling of symbol information in its function\n  search algorithm.\n\n2008-09-29\n----------\n\n* Added context menu to Symbol viewer's list so that you can select where to \n  view the symbol in.\n  \n* Added a plugin management window. Currently, it just lets you see what's been\n  loaded. But in the future, I will try to make it so you can disable/enable\n  different plugins.\n\n2008-08-29\n----------\n\n* Attempt #2 at making the /lib/ vs. /lib64/ automatic for 64-bit platforms. I \n  think the new solution should work.\n\n2008-08-25\n----------\n\n* Added the ability for edb to get the base of the GS and FS segments. This \n  allows the instruction analyzer to correctly display the values of certain \n  expressions. This also makes segments valid in expressions, they will resolve\n  to the base of the segment. Though CS/DS/ES/SS will always resolve to 0.\n  One nice trick is that you can break on each system call by putting a \n  breakpoint on [gs+0x10] (though 0x10 may vary from system to system).\n\n2008-08-16\n----------\n\n* Finished making the Heap Analyzer plugin work on x86-64.\n\n2008-08-12\n----------\n\n* Sped up analysis by avoiding redundant function analysis. It still isn't \n  blazing fast, but is significantly better.\n  \n* Fixed a few previously missed 64-bit portability issues. \n  (toULong -> toULongLong). They were minor, but all of this type should be\n  resolved.\n  \n* Added a symbol viewer plugin. Double click to see a symbol's value in the\n  the current data view. Eventually, I'll add a context menu to make it\n  so you can view it in the code view too depending on the type.\n\n2008-08-11\n----------\n\n* Continued to make improvements to analyzer. It is more accurate, but also\n  slower at the moment. I will look into good ways to speed it up.\n\n2008-08-10\n----------\n\n* Fixed some compilation issues on x86-64. Thanks to Stephan Hegel for working\n  with me to make sure that x86-64 users have a functioning edb.\n  \n* Reworked analysis to have a higher initial favoritism towards findings\n  functions by recursively tracing known functions \n  (symbols/main/entry point, etc). This will make the analysis more accurate\n  though it does have the side effect of making \"percentage complete\" at lot\n  less meaningful since while it will always stop, the number of iterations\n  during analysis is indefinite.\n\n2008-08-09\n----------\n\n* Seems that <QtGlobal> needed to be included in QDisassemblyView.cpp for x86-64\n  targets. Simple fix, but it broke compilation for some platforms so I'm going\n  to make a release for it.\n\n2008-08-08\n----------\n\n* Ouch, another bug fix. At least this time it was a failed assert. Basically,\n  during my last fix, I forgot that reads can and will fail if done while the \n  debugee is running. I have added code to special case this and handle it more\n  correctly. (Which is of course how it used to act in the first place).\n\n2008-08-04\n----------\n\n* made plugins.pri smarter with library location. For 64-bit builds it will\n  default to $prefix/lib64/edb/\n\n2008-07-29\n----------\n\n* Since the config file was partially broken, I am taking this opportunity to \n  finish reworking the naming convention for settings. Some settings will\n  unfortunately be lost. But odds are they were being dropped anyway :-/.\n\n* WOW, I just noticed that for a long time (2-3 versions) options were not being\n  actually saved. Fixed.\n\n* Seems that my QDisassemblyView optimization revealed an off by one error in \n  the DebuggerCore which unfortunately was also crashable :(. But I believe \n  that the logic is correct now. I've added a few more asserts to help avoid \n  this type of bug in the future.\n\n2008-07-25\n----------\n\n* Made analysis slightly faster by factoring out some no longer needed code.\n\n* Simplified some code in the QDisassembler widget. Instead of passing an \n  instruction, its buffer and its size, you can now just pass the instruction\n  since it has references to the buffer and its size anyway.\n\n* Made the analyzer aware of using zeros as padding between functions. This will\n  make the display more correct if displaying analyzed code.\n\n2008-07-15\n----------\n\n* Added \"Follow Immediate in Dump\" and \"Follow Immediate in Stack\" CPU context \n  menus. They act similarly to the generic \"Follow\" CPU context menu.\n  \n* Improved analysis speed.\n\n* Improved analysis quality, a few more types of common optimizations are \n  detected.\n\n2008-07-13\n----------\n\n* Added a \"Follow\" item to the CPU context menu. Basically, if you right click\n  on either a JMP or CALL which has an operand which can be evaluated, then \n  there will be a \"Follow\" menu item that will scroll the CPU view to that \n  location.\n\n2008-07-12\n----------\n\n* Removed some code which was implemented to work around Qt 4.0.x bugs since\n  4.2 is now a base requirement.\n\n* Added some atomic-ness for pointer manipulations.\n\n* Renamed some settings in configuration file to make them more consistent with \n  new convention.\n  \n* Fixed a integer underflow crash involving trying to select an address beyond \n  the end of a region. Which was causing a negative size to be passed to the\n  \"edb::v1::getInstructionBytes\" function. Q_ASSERTS were added to catch this\n  in the future if a similar bug is present elsewhere.\n  \n* Fixed a minor bug where tooltips would show data outside of the current \n  region if there is an adjacent region sometimes.\n  \n* Now attaching to a new process or opening a new program to debug will \n  invalidate any analysis that has been done. Eventually, the analysis will be\n  stored in session files so that it can be reused. But not yet ;).\n\n2008-07-05\n----------\n\n* more minor improvements to the analysis engine.\n\n* Fixed a corner case in the disassembler where it would misformat things like\n  \"and eax, 0xffff\" as \"and eax, -1\" due to a mis-optimization.\n\n2008-07-03\n----------\n\n* Improved the analysis engine to be slightly more accurate.\n\n* Added graphical indication of function bounds based on analysis results.\n\n* You can now scroll the QHexView widgets by individual bytes by pressing up\n  or down while holding the control key.\n\n2008-07-01\n----------\n\n* Centralized analysis engine and provided it with a plugin. The FunctionFinder\n  plugin is now just an interface towards it. Ctrl+A will analyze the current \n  region (though nothing is done with the results yet). I am hoping to have \n  function framing and scrolling by instructions.\n\n* Added a \"set EIP to selected instruction\" to CPU context menu.\n\n* Improved hueristic for analyzer. It will now more accurately identify certain\n  types of functions.\n\n2008-06-18\n----------\n\n* Fixed a bug in the hardware breakpoint manager plugin which didn't allow\n  disabling of the last breakpoint.\n\n* Extended the maximum size that OpcodeSearcher will consider from 4 bytes to \n  8 bytes, which yields some more options.\n\n* Finished changing OpcodeSearcher plugin to use edisassm, it should be a lot \n  more robust now. Forutnately, edisassm is pretty fast, so the performance \n  impact isn't too bad.\n  \n* Most dialogs use Qt 4.2.x's QDialogButtonBox's now which should give a better\n  look on non-KDE platforms.\n\n2008-06-12\n----------\n\n* Fixed a bug in DebuggerCore involving hardware debug registers in 64-bit mode.\n  this fix allows hardware breakpoints to work in 64-bit builds.\n  \n* Changed OpcodeSearcher plugin to use edisassm when searching instead of hard\n  coded values. This allows the code to be more easily ported to new archs such\n  as x86-64.\n\n2008-06-06\n----------\n\n* Fixed minor bug with selections in QHexWidgets when selecting outside of the\n  viewable range. There was an underflow, which was cast to an unsigned type\n  causing some upward selections to select from start to the end of the range.\n  \n* More improvements in 64-bit support. The ArchProcessor for x86-64 is now\n  aware of the amd64 C calling convention and will now properly predict function\n  arguments for when symbols are available.\n\n2008-06-01\n----------\n\n* Hardware breakpoints are much more complete, supporting Write, Read/Write, \n  and Execute types of 1, 2, and 4 bytes sizes.\n  \n2008-05-31\n----------\n\n* edisassm 1.5.2 released, mostely making the code more standards compliant to\n  ensure that the code will compile on newer versions of g++.\n  tested with 4.2.3 on Ubuntu.\n  \n2008-05-28\n----------\n\n* edisassm 1.5.1 released with some minor bug fixes\n\n* Corrected some bugs in edb under x86-64 involving the analysis engine.\n\n2008-05-28\n----------\n\n* edisassm 1.5.0 released with EMT64 support! A lot of time was put into \n  verifying the instruction tables to ensure that disassembly would be accurate.\n  \n* A couple of minor bug fixes were done in edb.\n\n* Added patches to clean up build on ubuntu systems.\n\n2008-05-18\n----------\n\n* Added LOTs of SSE4 ops to edissasm, updated a bunch of the tables.\n\n2008-05-07\n----------\n\n* edisassm now can handle RIP relative addressing mode. I also fixed some decode\n  ordering issues that were introduced when 64-bit mode was being added. The \n  only piece left is the tweaking of the instruction tables to match what was \n  added/removed/changed for 64-bit mode!\n\n2008-05-06\n----------\n\n* edisassm now can disassemble 64-bit code partially correct. It does not yet\n  support RIP relative modes and does not take into account changes in the \n  opcode map (new and removed opcodes). Soon edb will have full 64-bit support!\n\n2008-04-30\n----------\n\n* Made a large effort to port edisassm to 64-bit :) The most visible change\n  is that is makes much larger use of templates. Instruction and Operand now \n  take a template param (32 and 64 are valid). which can be used like this:\n  Instruction<32> inst(buf, size); or you can use edb::Instruction which will be\n  be typedefed to the appropriate type based on your build environment. Because\n  of the massive ammount of templating needed to implement this, it is possible\n  that older compilers will have trouble with it. I will test which compilers\n  are expected to work.\n\n2008-04-11\n----------\n\n* Renamed REG_NONE to REG_NULL to avoid a conflict with windows headers.\n\n* Got edisassm compile on win32 for the first time :)\n\n2008-03-24\n----------\n\n* Improved some of the function finder code, I am planning on moving this to a\n  more central analysis system.\n\n2008-03-15\n----------\n\n* Fixed some incorrect bit setting in HW breakpoint code.\n\n2008-03-14\n----------\n\n* Improved the HW breakpoint code. It will now show the enabled state based on\n  what the application is actually in. So if you do something like reset the\n  application, then the HW breakpoints will show as disabled (because they are).\n  \n* Some general code optimizations.\n\n2008-02-29\n----------\n\n* First code for hardware breakpoints is in, edb can now set a hardware bp\n  and resume from it, next is setting the proper type of bp (read/write/execute)\n  as needed and also making the dialog show correctly even when application\n  has been terminated or restarted.\n\n2008-02-27\n----------\n\n* Simplified some signal code in QHexView and Bookmarks plugin.\n\n* Started some very preliminary work on the hardware breakpoint plugin. So far\n  I have the GUI planned out for it. It will likely require that the plugin \n  hook the debug event system in order to enable resuming after hitting the BP.\n  This is ok though since there is an infrastructure in place for that :).\n\n2008-02-25\n----------\n\n* Improved handling of breakpoints which aren't caused by int3 bytes placed by\n  edb. for example: \"int 3\" (which encodes as 0xcd 0x03) is now handeled more\n  correctly.\n  \n* Preliminary code for hardware breakpoints is in place, the DebuggerCore is now\n  able to get/set the debug registers on intel. The only real hurdle left is\n  continuing after it is hit. This will need a similar system to software \n  breakpoints.\n\n2008-02-15\n----------\n\n* Made some changes to help with portability.\n\n* Made edisassm use std::ifstream instead of mmap.\n\n2008-02-12\n----------\n\n* Simplified the expression code a bit by factoring down common code a bit. This\n  results in a slightly larger binary, but smaller source (due to small function\n  inlining). I think this is fine since the code is more managable.\n  \n* Fixed expressions handling of the XOR operator \"^\". It was not properly \n  implemented.\n\n* Moved the known function table to a plugin. It isn't super efficient quite yet\n  but works well.\n\n2008-02-10\n----------\n\n* Made the columns in the disassembly view movable when mouse is 2 or less \n  pixels away from from the line, not just exact match. This should make it an\n  easier target.\n\n2008-02-08\n----------\n\n* Made DebuggerCore::readPages account for breakpoints in its results.\n\n* Fixed a bug where reads/writes could return success when they couldn't read\n  this resulted. Fortunately this really didn't effect the result of any \n  operations.\n\n2008-02-06\n----------\n\n* applied patch from elitak@gmail.com to plugins.pri to help avoid build errors\n  on certain configuration.\n\n2008-01-28\n----------\n\n* updates Qt dependancy to be for version 4.2 or greater. There are a few \n  features of Qt that I have held off from using or have worked around in the \n  past. The next version (0.9.0) will no longer compile on versions lower than\n  4.2\n\n2008-01-24\n----------\n\n* Fixed more bugs in edisassm, it was some SSE opcodes where Intel docs claimed\n  both operands have be Mod/RM, in which case I have no idea what the proper\n  thing to do is. So, it is now in sync with what sandpile.org says, which \n  matches other disassemblers output. I have also added a regression test for\n  this.\n  \n* You can now see symbols in the disassembler view if you move the left most \n  line right. By default it will look as usual. But in a very similar way to \n  ollydbg, you can now see known symbols next to addresses.\n  \n* Improved function finder plugin. It will now give \"bonus points\" to functions\n  which have known symbols.\n \n\n2008-01-19\n----------\n\n* Fixed a harmless crash when edb failed to load the debugger core plugin. This\n  was introduced in the last release :(.\n\n2008-01-17\n----------\n\n* For builds on Qt >= 4.3, you can now give a tab a label but right clicking\n  on it.\n\n* Made the QHexView and QDisassembly widgets use the system palette colors.\n  This will make it so edb will match the prefered color scheme of the user.\n\n2008-01-16\n----------\n\n* Fixed a potential crash on shutdown in the cleanup code\n\n* Fixed a silly crash where if you ran the function finder with no selected \n  region (or if you are not attached to a program) it would crash.\n\n2008-01-15\n----------\n\n* Fixed a bug in ModRM/SIB decoding where in some cases the index and base were\n  inversed. This only really showed up in the less used redundant encodings, so\n  it didn't show up until I started my regression tests.\n\n2008-01-14\n----------\n\n* Fixed a bug in edisassm where it would think it didn't have enough space in\n  the instruction buffer when prefixes are used.\n\n2008-01-13\n----------\n\n* Added a graphical indicator of the direction for relative jumps.\n\n2008-01-12\n----------\n\n* Improved load time.\n\n* Fixed some very minor bugs in the disassembler.\n\n* made disassembler differentiate between the different versions of ins/outs.\n\n2008-01-10\n----------\n\n* Fixed a bug in edisassm where 32-bit signed offsets which have the 16-bit \n  set were being printed as 16-bit sign extended values.\n  \n* Added some regression tests to edisassm. Unfortunately nasm and edisassm \n  disagree on some syntax points and likes to re-order expressions sometimes, \n  so I'll have to come up with some normalization strategy before it can be\n  fully automated. But it's a start :).\n\n\n2008-01-03\n----------\n\n* Fixed a bug where if you used the fill feature ontop of a breakpoint it\n  would not properly clear the breakpoint first.\n\n2007-12-12\n----------\n\n* Moved the ELFxxBinaryInfo classes to plugins. This is more modular and makes\n  it far simpler to add new BinaryFile handlers in the future.\n\n2007-12-10\n----------\n\n* Added command line running of a program. You may write things like this:\n  $ ./edb --run /bin/ls /etc /bin\n  and it will start edb attached to a new instance of /bin/ls with the correct\n  arguments passed.\n\n2007-12-06\n----------\n\n* Fixed a display bug (Bug #37) where it was possible to make the data tabs show data to\n  a region which does not exist after detaching (showing all 0xff's).\n\n2007-12-03\n----------\n\n* Changed some code to convert numbers to toULongLong instead of toUInt to \n  ensure that when 64-bit is supported, addresses will be interpreted correctly.\n\n2007-11-31\n----------\n\n* Ported the dump state plugin to be able to compile correctly on x86-64.\n\n2007-11-29\n----------\n\n* Added code to load/save session files (which are currently mostely empty)\n  This will read the file header, check it for the session signature, md5 the\n  file in the sessiona and compare that to the md5 of the currently debugged\n  application. This way, it should never load a session file for the wrong\n  application. Next, I'll be adding useful data to the session files, for\n  starters I plan on having sessions remember breakpoints and bookmarks.\n\n2007-11-28\n----------\n\n* EDBTypes.h is now Types.h this will include the OSTypes.h and ArchTypes.h\n  files, this makes adding new arch and os combinations much easier.\n\n* Made various input dialogs accept 64-bit values when building on an x86-64 \n  platform.\n\n* Made many changes to help in portability to other platforms. edb will likely \n  be ready for x86-64 within a version or two. The big stumbling block left is\n  edisassm support for proper disassembly.\n\n2007-11-27\n----------\n\n* Now that I discovered that Qt has a qmake variable (undocumented) which \n  represents the arch it is being compiled on. I have started work on dividing\n  the code which is arch specific into special arch dirs, one for each build \n  target (i386 is only which compiles, but it's a start). This should really\n  help with porting to new targets.\n  \n* Started very beginning work towards a session file concept. I have mostely\n  fleshed out what I want the file to look like.\n\n2007-11-24\n----------\n\n* EDBTypes.h will now define some macros based on the arch it beleives it is \n  being built on such as EDB_X86_64 or EDB_X86. Also, it will define EDB_FMT_PTR\n  which is a format specifier suitable for printing an edb::address_t type.\n  \n* DebuggerCore now compiles on x86-64, however there is still much work left to\n  be done. I need to add x86-64 support the the disassembler, and to a few other\n  arch sensitive areas.\n\n2007-11-20\n----------\n\n* Added preliminary code for \"--run\" option which will allow the user\n  to execute a program and attach to it from the command line, for example:\n  $ ./edb --run /bin/ls /etc\n  which would run /bin/ls with \"/etc\" as it's argument and attach to it.\n  This code is not functional yet.\n\n* Added new findPluginByName to plugin API. This should allow some basic\n  for of dependancies to plugins. This should not be used until plugins are\n  fully loaded because there is no gaurantee as to the order of loading yet.\n  So, as a good rule of thumb, don't use it in the plugin constructor.\n  Hopefully, this will lead to more code reuse and maintainability.\n\n2007-11-15\n----------\n\n* Added identification of jump sources to instruction analysis. Now whenever \n  stopped on an instruction, it will attempt to find out if a nearby relative\n  jump has a target equaling the the instruction you are stopped on.\n\n2007-11-14\n----------\n\n* Setup new bugzilla for edb at: http://bugs.codef00.com/\n\n* Implemented locked stack feature. It will stay locked at the position of the\n  stack pointer (unless the stack pointer jumps to a whole other memory region) \n  when enabled.\n\n2007-11-08\n----------\n\n* Added preliminary support for resizing the columns in the disassembly view.\n\n2007-11-07\n----------\n\n* Fixed a bug in the disassembler where it would ignore the displacement of\n  an opcode encoded in a particular way.\n\n\n2007-11-06\n----------\n\n* Added option for CheckVersion plugin to automatically check for newest version\n  on startup. It will not report anything if you are running an up to date \n  version of edb. This feature is enabled by default. You can disable this \n  feature by unchecking the menu item for it, found at: \n  \"Plugins\" -> \"CheckVersion\" -> \"Check On Start\". When enabled, the plugin \n  will perform a single HTTP get request to retrieve the latest available \n  version number each time edb is started.\n\n2007-10-23\n----------\n\n* Worked on developing function and code analysis. I now have developed an \n  algorithm which can do reasonable accurate degree which bytes are actually\n  code bytes. Basically the concept is first to enumerate potential functions\n  by disassembling at each possible address in a region. For each call I see I \n  add it to a list and increase its reference count. Then for each function with\n  2 or more references, I do further analysis. While reviewing these functions \n  with 2 or more references, I follow the code looking for the function end. If\n  I see any calls to functions with a single reference, then they get a bonus \n  reference and are re-added onto the list of calls to analyze. For now, the \n  primary goal is to figure out the actual code bytes and bounds of the \n  functions. Next I will try to identify the conditional logic in the functions.\n  \n* Fixed duplicate error reporting on some invalid expressions.\n\n2007-10-20\n----------\n\n* Added a heuristic for locating the heap start when using a newer ld. It isn't\n  100% reliable, but seems to work \"ok\", I am hoping to solidify more checks \n  in the future to make it more reliable.\n\n2007-10-11\n----------\n\n* Made some changes to the plugin API in order to help move towards \n  a stable 1.0 API.\n\n2007-10-09\n----------\n\n* General code cleanups and optimizations\n\n* Added support for arguments with spaces in them. Arguments with spaces are \n  specified with quotes, and if you need to have a quote character in the \n  argument then you can escape it with \\.\n\n2007-09-17\n----------\n\n* Added shortcuts to bookmarks (Ctrl + N will trigger the first 10 bookmarks).\n\n2007-09-14\n----------\n\n* Fixed a bug where I accidentally was copying from a QByteArray directly \n  memcpy. It worked because the data array was the first class variable, but\n  was not correct in principle.\n\n2007-09-10\n----------\n\n* Corrected a minor bug where the GUI didn't update correctly when using the\n  stack widgets push/pop menu items.\n\n* Made Debugger::log a variadic function, this allows for passing formatted \n  output directly without a temp, allowing for cleaner code.\n\n2007-09-08\n----------\n\n* Focused on optimising the code in certain locations.\n\n* FunctionFinder now uses the new readPages interface.\n  This costs more memory, but seems to be more than twice as fast :).\n\n2007-09-05\n----------\n\n* BinaryStringSearch and ReferenceSearch now use the new readPages interface.\n  This costs more memory, but seems to be more than twice as fast :).\n\n* Added a readPages routine to the DebuggerCoreInterface, since reading large \n  blocks of data can be done more efficiently that individual bytes.\n\n2007-08-28\n----------\n\n* Fixed a bug where edb would hang if the TTY console specified in the options\n  does not exist. It defaults to \"/usr/bin/xterm\". Thanks Dmitry Bulashev for\n  reporting!\n\n2007-08-27\n----------\n\n* Corrected a minor bug where the core plugin would report success when trying\n  to read when not attached.\n\n* Bookmarks plugin can now take expressions.\n\n2007-08-26\n----------\n\n* Added cool \"data dump\" plugin as per 0xf001s request :). Just hit ctrl+D and \n  it'll shoot out a dump similar to GDB to stdout.\n\n* Added the ability to skip in-accessible regions (permissions currently \"---\")\n  to both the reference search and the binary string plugins. Some applications\n  such as wine like to create dummy regions like this. It should make the \n  searching a little more bareable.\n\n2007-08-20\n----------\n\n* \"Filling\" instructions, as in functions which either have no real effect, \n  and/or are usually used to fill the space between functions are now displayed\n  in grey. This makes seeing where function boundaries are easier.\n\n2007-08-20\n----------\n\n* Added pointer detection to heap analysis.\n\n2007-08-18\n----------\n\n* Tables with numeric content columns are now sorted numerically.\n\n* I am working on stabalizing the programming API, BaseTypes:: and Debugger:: \n  namespaces will be merged and renamed to edb::. The contents of Debugger:: \n  will be located in in edb::v1:: to indicate version 1 of the plugin API. This\n  way plugins will have a nice clean way of knowing which version of the API\n  they are using. Functions in edb::v1:: will never be removed, after 1.0 is\n  released.\n  \n* Corrected a bug where step over didn't work if you were on a breakpoint.\n\n2007-08-16\n----------\n\n* Corrected copy and past bug in FunctionFinder plugin menu item name.\n\n2007-08-15\n----------\n\n* updated some of the documentation.\n\n2007-08-14\n----------\n\n* Added a \"bookmarks\" plugin, which allows you to put code addresses of your\n  choice into a list, which you can later jump to. This plugin also serves\n  as an example of how to add dock widgets to the main gui in a safe manor.\n\n* Fixed a subtle crash caused by debugging an app, opening a plugin dialog, then\n  detaching, and eventually debugging a new process (which not closing the\n  dialog.\n  \n* Added a new \"function finder\" plugin. Suprisingly accurate. It includes a\n  \"reference count\" column which is how many potential calls to this function\n  the plugin saw. The higher the number, the greater the confidence that it is\n  really a function entry point.\n\n* Speed increases.\n\n2007-08-13\n----------\n\n* Changed some of the global objects from pointers to references, this will\n  reduce the need for null checks in many situations as well as simplify code.\n  \n* added wait for console process to die before closing for a better cleanup.\n\n2007-08-10\n----------\n\n* Fixed accidentaly reference of breakpoint data after it was free when using\n  one time breakpoints. Dangling pointers are no bueno!\n\n2007-08-09\n----------\n\n* Removed references to Qt 4.3 features from UI files.\n\n2007-08-08\n----------\n\n* Fixed a crashable bug introduced in last version, this was related to clearing\n  the process state variable. Now that the state has virtual functions, it is\n  no longer correct to use memset.\n\n* Added search filter to the opcode search plugin so you can find the region you\n  want to search more easily.\n\n* Added search filter to the strings plugin so you can find the region you\n  want to search more easily.\n\n* Made the MemoryRegions object also a QAbstraceItemModel, suitable for a \n  QTableView. This should make it simpler/cleaner to display a table of\n  available regions (there were already 3 copies of the code to fill the table\n  in edb which will now no longer be needed, in addition to making the filtering\n  code MUCH simpler since Qt can do it for us.\n\n2007-08-06\n----------\n\n* Improved the build system a little for plugins. They now all share common \n  portions.\n\n* Added ascii string display in heap viewer plugin. Now if, the heap block \n  contains an ascii string, it'll be displayed in the data column. I plan to\n  add more types of known \"data\" to this column over time.\n\n* Added a filter to the environment viewer plugin so you can quickly find the\n  variable you are looking for.\n\n2007-08-02\n----------\n\n* Conditional MOVs are now part of the instruction analysis, it will display \n  whether or not the MOV will be performed based on the current flags.\n\n* I am making the config file entries use a more organized naming convention in\n  the past they were very ad-hoc, but now i am going with namespaces. For \n  example: debugger.terminal.enabled=true. For now this will only apply to new\n  settings so no one loses settings, but the old names will eventually be phased\n  out in 0.9.0 which is when I will start to stabilize the varying APIs in edb.\n\n* The view options for the stack and data views (word width/row width/which \n  columns to display) are now stored in the config file and restored on reload. \n  Data view is stored as well but is based on the options dialog because saving \n  the options set in the context menu makes no sense (many tabs, which to use).\n\n2007-08-01\n----------\n\n* Added different binary fill options to the CPU context menu. Good for REMing\n  out individual ops quickly.\n\n* Command window program is now configurable in the debugging options dialog.\n  You can enable/disable it, and you can use the terminal program of your \n  choice. The default is /usr/bin/xterm, as this should be fairly ubiquitous.\n  \"konsole --nomenubar --notabbar\" works well for us KDE users out there as \n  well. The only real rule is that whitespace is assumed to be an argument \n  separator and bad things may happen if you try to be clever and use a program\n  name or argument with a space in it. I was able to get launching konsole to \n  simply lock up edb (no idea why) simply by using it from a path with a space\n  in it.\n\n2007-07-31\n----------\n\n* Experimental code for opening an I/O window for command line apps is almost\n  done. It actually works well, just need it to be more tunable. This is a\n  big feature as it will allow more complete debugging of applications with a \n  CLI.\n\n2007-07-30\n----------\n\n* Made the 3 byte UD opcode not decode as \"invalid\" but as \"ud\", since this op\n  isn't really invalid, just is hardwired to generate an exception.\n\n* FPU registers are now highlighted on changes.\n\n* Made changes towards abstracting State such that it can be an opaque type.\n\n* Renamed types.h to EDBTypes.h to avoid conflict with system types.h. Sorry\n  if this makes people change code, but API isn't stable yet ;).\n\n* Moved *nix specific headers to ROOT/include/os/unix from src, since plugins \n  may and likely need to see those types, now the include dir is all that is \n  NEEDED to have a plugin development setup.\n\n* Changed getValueFromUser to get a reg_t value, this should be more \n  portable. (Thanks Thomas Faber!)\n  \n* Improved DebuggerCore's reading/writing routines to be more portable and\n  more flexible with regards to endian size and word size. \n  (Thanks Thomas Faber!)\n  \n* Thomas Faber's changes make edb a few steps closer to compiling and \n  functioning correctly in an x86-64 setup.\n\n\n2007-07-26\n----------\n\n* Implemented PID enumeration on FreeBSD. Still a lot to go for things to \n  compile and work...\n\n* Made edb_make_symbolmap work if you have md5 instead of md5sum in your system.\n\n* Added breakpoint management to CPU view context menu.\n\n2007-07-25\n----------\n\n* Fixed error in which a shallow copy of a transient variable was being used\n  which is bad because the data could be trashed.\n\n2007-07-21\n----------\n\n* You can now see the FPU registers, they are currently read only, but it \n  appears to work correctly.\n\n2007-07-19\n----------\n\n* Fixed a silly bug introduced recently where registers aren't properly \n  un-highlighted when no longer attached.\n  \n* Internally layed some ground work for reading FPU register support.\n\n* Fixed a bug in the debugging core plugin which could cause a caller of a \n  read or write to think it succeeded when it didn't. It was very unlikely to\n  get triggered and even so would likely have little to no side effects.\n\n2007-07-17\n----------\n\n* Made it so when you try to modify bytes which overlap a breakpoint, \n  you are given the option to continue (which removes the breakpoints), or \n  abort the modification.\n  \n* Finally made the breakpoint dialog show the breakpoint type.\n\n* Introduced initial code for supporting more than one binary type. It still \n  only accepts ELF32, but the framework is in place.\n  \n* Fixed a bug where misaligned jumps were fooling the disassembly view widget\n  this was pretty bad since a lot of the point of active debugging versus static\n  analysis is to avoid getting fooled by tricks like this!\n\n2007-07-16\n----------\n\n* Fixed a bug where certain strings may not be reported corrected \n  (some characters chopped out).\n\n* Fixed bug where offsets of 16-bit relative jumps were not being truncated like\n  the CPU actually does. In the real thing, the target address has the upper \n  16-bits cleared. Not very useful in 32-bit code, but important to be correct.\n\n* Fixed bug in new register reading code.\n\n* Removed segfault due to settings invalid segments from TODO list, this is a \n  kernel bug and entirely out of edb's control.\n\n2007-07-13\n----------\n\n* Numerous improvements to the disassembler, I believe it is fairly complete\n  the only thing that's missing that I'm aware of is enforcement of certain \n  rules (like mod/rm that must only be mem, and which ops certain prefixes are\n  valid for).\n\n2007-07-12\n----------\n\n* Worked around a bug where Qt would deliver events to disabled actions if the\n  shortcut key-combination is pressed. For now I have a check in each action\n  where it simply returns if that action is not enabled. The Qt people seem\n  to be aware of the issue, hopefully it'll be addressed in a future version\n  of Qt.\n\n* Fixed ability to debug a process which receives unknown stop signals. Now it \n  will simply break if you were trying to step. It is still annoying since \n  frequent signals will make you have to step twice all the time, but at least\n  it is now possible.\n\n* Fixed long standing (apparently no one noticed) bug where if you detached\n  from a process while a breakpoint was set, the process had a chance of \n  crashing.\n\n* Made operand analysis smarter, it now knows about different expression types\n  (byte ptr, word ptr, dword ptr).\n  \n* Identified a few bugs I would like ironed out before next release.\n\n* Many minor improvements in the disassembly output. It is difficult to decide\n  when to use hex and when to use decimal, but I think I have something\n  reasonable.\n  \n* Good speedup in instruction analysis.\n\n2007-07-11\n----------\n\n* Finally compiled edb with edisassm ! This disassembly engine is faster and\n  more robust than the previous one because I am more easily able to add\n  specific features that edb can use into it. Unfortunately, this does mean\n  that AT&T syntax is temporarily disabled.\n  \n* Fixed a major crashable bug in QDisassemblyView widget, it was very subtle.\n\n2007-07-06\n----------\n\n* Finished environment viewer plugin\n\n* edisassm is almost complete and ready for integration\n\n* Condition flags can now be seen in the register view as a sub item to eflags\n\n* Split out the i386 stuff away from the GUI yet more, almost at a good point\n  of portability.\n  \n* More robust error checking\n\n* A few minor UI updates.\n\n\n2007-05-31\n----------\n\n* Multibyte invalid ops are now displayed properly.\n\n2007-05-23\n----------\n\n* Very preliminary TTY support.\n\n2007-05-20\n----------\n\n* Fixed a bug in getBinaryStringFromUser where it was setting the value \n  before the maximum allowed length. This made it so values were truncated \n  incorrectly.\n  \n* Added Edit bytes to the QDisassembly viewer!\n\n* Fixed DebuggerCore incorrectly reporting success on reads/writes of where\n  no bytes are read.\n\n2007-05-16\n----------\n\n* Added UID to attach dialog.\n\n* Added ability to filter out entries that don't match your UID in the attach\n  dialog.\n\n2007-05-15\n----------\n\n* Added \"Goto ESP/EBP\" to stack context menu.\n\n* Fixed crashable bug in QDisassembly view, involving libdisasm, libdisasm will\n  do a double free if \"x86_oplist_free\" is called on invalid opcodes, this is\n  now avoided.\n  \n* You can now always disassemble code nearing the edge of a region.\n\n2007-04-30\n----------\n\n* Isolated how recent files are managed away from primary GUI code.\n\n* Made register view and disassembly view fonts configurable from options \n  dialog.\n  \n* Made data view's font default to what is set in the options.\n\n* Font changes in the options now show immediately after accepting (clicking ok)\n  the options dialog.\n\n2007-04-27\n----------\n\n* Break point manger now takes an expression for it's address\n\n* General code cleanups\n\n* Added stack analysis, will now show returns and ascii strings in stack viewer!\n\n2007-04-24\n----------\n\n* Made minimum length for ascii string detection tunable in options.\n\n* Improved the String Searcher plugin to reuse code in the Debugger API instead\n  of using its own.\n\n2007-04-23\n----------\n\n* Began work on a new \"Open Files\" plugin, it can currently list open files\n  and will eventually be able to show socket/pipe information as well.\n\n* Fixed minor display bug in tooltips for long instructions\n\n* Improved the internal disassembly API to make it more adaptable to other \n  disassembly libraries\n\n2007-04-19\n----------\n\n* Vastley improved the speed of the Heap Analyzer's result view (order of \n  minutes to seconds)\n\n2007-04-15\n----------\n* Added heuristic for resolving \"main\" symbol byte on bytecode matching\n  if the symbol is not provided in the symbol map. This feature is currently\n  very likely glibc specific.\n  \n* Added some more steps towards 64-bit build support.\n\n2007-04-13\n----------\n\n* Added more constancy to context menus (operations you can do in the dump \n  view, you can also do in the stack view most of the time now.\n\n2007-04-11\n----------\n\n* Registers are now highlighted in red if they have changed.\n\n2007-04-08\n----------\n\n* Fixed a crashable bug BinaryString search plugin if an empty string was \n  supplied.\n\n2007-04-07\n----------\n\n* CheckVersion plugin will now respect the HTTP_PROXY environment variable.\n\n2007-04-06\n----------\n\n* corrected minor bug in edb_make_symbolmap.sh which preventing it from running\n  on certain distributions which actually have /bin/sh act like the original sh\n  not bash :)\n\n* Added basic conditional breakpoints. The can be set in the breakpoint \n  manager plugin and are based on the expressions that were recently added.\n  At the moment, the expressions are tested for validity at the moment of \n  the breakpoint, eventually this will be checked when you enter it.\n\n2007-04-02\n----------\n\n* Added expression support to \"Goto Address\" in both the CPU and data views.\n  Please see the README for more detailed information on this.\n \n2007-03-29\n----------\n\n* Added MD5 code, which will notify the user of outdated symbol files.\n  \n* Added code to remove duplicates from the instruction analysis list.\n\n2007-03-28\n----------\n\n* Renamed make_symbolmap.sh to edb_make_symbolmap.sh to make it more \n  distribution friendly.\n\n* edb_make_symbolmap.sh now puts errors to stderr, not stdout, so you don't get\n  false symbol files if you process a whole dir at a time.\n\n2007-03-24\n----------\n\n* Shellcode address used to change region permissions is now chosen dynamically.\n\n2007-03-20\n----------\n\n* Added preliminary framework for resolving parameters to standard library \n  functions.\n  \n* Added ability to show/hide the toolbar.\n\n2007-03-15\n----------\n\n* Added ability to specify compile time some default directory strings, \n  makes package management easier.\n\n* Added preliminary method for code to find a plugin based on the plugins name\n  this will allow code to be written which depends on functionality exported\n  by plugins, which could be cool.\n\n* Added some basic measures to help prevent duplicate plugin loading caused\n  by symlink trickery\n  \n* edb will now look in the current working directory as well as the path \n  specified in the options for plugins\n\n2007-03-14\n----------\n\n* Added getting of working directory and arguments from attached processes\n  this makes restarting work much better (which is now enabled).\n\n2007-03-12\n----------\n\n* Internally, a lot of i386 specific code was moved to a new class \n  \"i386ArchProcessor\", which will eventually be a plugin (one for each arch).\n  It is still a work in progress, but is a start.\n\n* Removed quit role property from exit menu as this prevented \n  compiles on Qt < 4.2.0\n\n2007-03-03\n----------\n\n* started work on restart code, seems to work ok\n\n2007-02-26\n----------\n\n* Added ability to change the working directory opened applications run in. \n\n2007-02-23\n----------\n\n* Improved about dialog box :-P\n\n2007-02-15\n----------\n\n* Added ability to dump the contents of a data view tab to a file.\n\n2007-01-17\n----------\n\n* Added recent file list to File menu.\n\n2007-01-16\n----------\n\n* Cleared internal state tracking on detach, nothing major.\n\n2006-12-23\n----------\n\n* Added new stylized register view window, still working out the programmers API\n  for it, but at least it looks nice :)\n\n2006-12-22\n----------\n\n* Making slightly less assumptions about the architecture being 32-bit.\n\n2006-12-18\n----------\n\n* Added a search filter to the attach and memory region dialogs.\n\n* Fixed compilation issue with gcc 3.x series compilers.\n\n2006-12-16\n----------\n\n* Added a tooltip to the disassembly view when there are too many instruction\n  bytes to display which shows all bytes in the instruction.\n\n* Added display of ASCII strings next to registers if analysis decides that \n  what the register points to is an ASCII string.\n\n* Added push/pop operations to the stack context menu.\n\n2006-12-13\n----------\n\n* Added preliminary PLT support to make_symbolmap.sh, this will allow edb \n  to properly display library calls, eventually, this will lead to a database\n  of known functions with parameters so the analyzer can display the parameters\n  correctly.\n\n2006-12-12\n----------\n\n* Finally added the ability to edit the bytes in the data and stack dump \n  widgets! Simply right click and choose \"Edit Bytes\" and modify away :).\n  If the new string of bytes is smaller, the debugger will zero fill the\n  difference, in the future this will be tunable.\n\n2006-12-08\n----------\n\n* Improved efficiency and clarity of rendering code for some custom widgets.\n\n2006-12-06\n----------\n\n* Started working on some html based help files in doc directory, don't\n  expect anything useful in there quite yet, but it'll get there.\n\n* Isolated libdisasm calls to a single part of the code, this allowed \n  consolidation of common functions as well as creating a central point to \n  replace the code as I feel that libdisasm will likely be dropped in a later \n  version.\n\n* Added more information in the instruction information panel.\n\n* Made DebuggerCore plugin readBytes fill the trailing end of the buffer with \n  0xff if it could not read as many bytes as requested, this is to give more\n  predictable results if only a partial read is possible.\n\n2006-12-01\n----------\n\n* Reduced redundant drawing in QDisassembly widget, which should make things\n  slightly faster due to less redraw.\n\n2006-11-30\n----------\n\n* Added some more sanity checks to the internal reads and writes in the \n  debugger core plugin, this should prevent reporting incorrect data if a \n  add breakpoint failed to read/write correctly.\n\n* Made step over, also step over REP prefixed ops.\n\n* Fixed bug in indirect call/jmp analysis which resulted in the target symbol\n  not being resolved even though it was in the symbol map.\n\n* Made it so the expression evaluator shows a ? instead of junk when it can't \n  read from the effective address.\n\n2006-11-29\n----------\n\n* Corrected bug in libdisasm which caused the instruction  8e e8 to disassemble \n  incorrectly as \"mov ds, ax\" instead of the correct \"mov gs, ax\".\n\n2006-11-28\n----------\n\n* Added ability to choose both how many bytes per \"word\" in the displays\n  and how many \"words\" per row via the context menu, this setting is not\n  remembered yet, but that will follow shortly.\n\n* Fixed very annoying bug where it was possible to make the QHexView widget\n  not correctly highlight things if the origin was not aligned to the word \n  width * row width.\n\n* Added ability for QHexView widget to display 64-bit formatted hex, once\n  a bug related to selection of misaligned text is resolved this will be \n  enabled.\n\n2006-11-27\n----------\n\n* Added getBinaryStringFromUser to debugger API.\n\n* Added filename to title bar when opening an application.\n\n* Removed updating of all views when selecting a memory region to view,\n  now it only updates the data view tab.\n  \n* Fixed green arrow showing outside of viewable area sometimes.\n\n2006-11-25\n----------\n\n* Changed string searcher to allow newlines in a string.\n\n* Corrected DebuggerCore's behavior when writing less than 4 bytes from the \n  edge of a memory region, previously the result was undefined, now it acts\n  as expected.\n\n2006-11-22\n----------\n\n* Added double click to follow in dump to StringSearcher plugin\n\n* Fixed rare double-free crash found by valgrind.\n\n* Fixed occasional crash due to lack of copy constructor in a class.\n\n* Now the open dialog will start in the directory which you last opened a file \n  from, this should make reloading the same file you previously ran quicker.\n\n* Added a function to Debugger namespace which make it easier to properly \n  compare version numbers numerically.\n\n* Added a plugin \"CheckVersion\" which will read the file \n  http://www.codef00.com/projects/debugger-latest and determine if a new version\n  has been released.\n\n2006-11-21\n----------\n\n* Added another opcode class \"[esp + 8]->eip\" in OpcodeSearcher and improved \n  efficiency of search by reducing memory compares.\n  \n* Added ability to double click results in OpcodeSearcher and it will jump\n  the disassembly view to the found address.\n\n2006-11-20\n----------\n\n* Improved instruction analysis, now it will attempt to give symbol relative\n  information on many control flow ops such as calls/returns/jumps, more of \n  this to come.\n\n2006-11-17\n----------\n\n* Changed name of utility functions ByteShiftArray::rol() and \n  ByteShiftArray::ror() to ByteShiftArray::shl and \n  ByteShiftArray::shr to reflect what they actually do\n  \n* Updated the makesymbolmap.sh script based on patch from pancake, SymbolManager\n  has been updated to use the slightly different format.\n  \n* Reduced scrolling in disassembly view by only scrolling when new instruction\n  isn't in visible range.\n  \n* Added arrow icon next to current instruction.\n\n* Changed resultant binary from \"debugger\" to \"edb\" to reflect actual project \n  name.\n  \n* Added some basic documentation on how to write plugins, though the example \n  plugins are still the best way to learn.\n  \n* Added jump to address and jump to EIP to disassembly view context menu.\n\n* Main window will now remember it size and restore it next time edb is run.\n\n2006-11-16\n----------\n\n* Minor code cleanups.\n\n* Slight change to DebuggerCoreInterface to have waits specify a timeout, \n  it is not required that the class actually do anything with the timeout, \n  but the groundwork is being set.\n  \n* Hopefully have a good solution for terminating the event server thread\n\n* Removed parts of libdisasm which aren't needed for libdisasm.a to build\n  this cuts the download size by 75%!\n\n2006-11-13\n----------\n\n* Removed parts of libdisasm from source tree that aren't related to the build\n  which cut the tarball down to a quarter of the size :)\n  \n* Working on cleaning up internal breakpoint management, current implementation\n  works most of the time, but there are a few corner cases where it isn't \n  perfect. I plan to rework this so that the logic is more clear.\n\n2006-11-12\n----------\n\n* Added upper limit of one second to how long debugger will wait for the event \n  thread to terminate. Eventually I will fix the fact that it doesn't always \n  terminate, but for now this seems to work OK.\n  \n2006-11-10\n----------\n\n* Fixed QTableWidgets not being populated correctly with Qt 4.2.x and up, it \n  seems that you must disable sorting before inserting to guarantee correct\n  behavior.\n\n2006-11-10\n----------\n\n* Fixed a bug related to adjacent breakpoints which were not placed by the \n  debugger (already in the code).\n\n2006-11-09\n----------\n\n* Initial Release\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 3.77734375,
          "content": "cmake_minimum_required (VERSION 3.15)\nproject (edb LANGUAGES CXX VERSION 1.5.0)\n\nenable_testing()\n\nif(NOT EXISTS \"${PROJECT_SOURCE_DIR}/src/qhexview/.git\" OR NOT EXISTS \"${PROJECT_SOURCE_DIR}/lib/gdtoa-desktop/.git\")\n\tmessage(SEND_ERROR \"The git submodules are not available. Please run:\\ngit submodule update --init --recursive\")\nendif()\n\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${PROJECT_SOURCE_DIR}/cmake/Modules/\")\n\ninclude(\"GNUInstallDirs\")\ninclude(\"CheckIncludeFileCXX\")\ninclude(\"DetectCompiler\")\ninclude(\"DetectOS\")\ninclude(\"DetectArchitecture\")\ninclude(\"EnableSanitizers\")\ninclude(\"EnableSTLDebug\")\ninclude(\"ProjectDefaults\")\ninclude(\"AddWarnings\")\ninclude(\"DetectGitBranch\")\n\nif(TARGET_COMPILER_GCC AND ${CMAKE_CXX_COMPILER_VERSION} VERSION_LESS 7.0)\n\tmessage(FATAL_ERROR \"Your g++ version is too old. At least 7.0 is required.\")\nendif()\n\ngit_get_branch(GIT_BRANCH)\n\nconfigure_file(include/version.h.in include/version.h)\ninclude_directories(\"${PROJECT_BINARY_DIR}/include\")\n\nfind_package(Capstone REQUIRED)\ninclude_directories(${CAPSTONE_INCLUDE_DIRS})\nlink_directories(${CAPSTONE_LIBRARY_DIRS})\n\nif (UNIX)\n\tfind_package(PkgConfig REQUIRED)\n\tpkg_check_modules(GRAPHVIZ libgvc>=2.38.0)\n\tif(GRAPHVIZ_FOUND)\n\t\tadd_definitions(-DENABLE_GRAPH)\n\tendif()\nendif()\n\nmessage(STATUS \"Checking for module 'double-conversion'\")\n# Using check_include_file_cxx instead of find_package etc. to support various versions of double-conversion. Some versions don't have CMake modules, some have a bit incompatible ones...\ncheck_include_file_cxx(\"double-conversion/double-conversion.h\" HAVE_DOUBLE_CONVERSION)\nif(NOT HAVE_DOUBLE_CONVERSION)\n   UNSET(HAVE_DOUBLE_CONVERSION CACHE)\n   message(WARNING \"libdouble-conversion header wasn't found. 32- and 64-bit floating-point values will be shown with max_digits10 digits of precision instead of shortest representation.\")\nelse()\n   find_library(DOUBLE_CONVERSION_LIBRARIES double-conversion)\n   if(NOT DOUBLE_CONVERSION_LIBRARIES)\n\t   message(WARNING \"libdouble-conversion library wasn't found. 32- and 64-bit floating-point values will be shown with max_digits10 digits of precision instead of shortest representation.\")\n   else()\n       add_definitions(\"-DHAVE_DOUBLE_CONVERSION\")\n   endif()\nendif()\n\nfind_package(Qt5Core)\n\ninclude_directories(\"include\")\n\nif(TARGET_PLATFORM_LINUX)\n\tinclude_directories(\"include/os/unix\")\n\tinclude_directories(\"include/os/unix/linux\")\nelseif(TARGET_PLATFORM_FREEBSD)\n\tinclude_directories(\"include/os/unix\")\nelseif(TARGET_PLATFORM_WINDOWS)\n\tinclude_directories(\"include/os/win32\")\nendif()\n\nif(TARGET_ARCH_X86 OR TARGET_ARCH_ARM32)\n\tadd_definitions(-DEDB_IS_32_BIT=true -DEDB_IS_64_BIT=false)\nelseif(TARGET_ARCH_X64 OR TARGET_ARCH_ARM64)\n\tadd_definitions(-DEDB_IS_32_BIT=false -DEDB_IS_64_BIT=true)\nelse()\n\tmessage(SEND_ERROR \"Unexpected bitness: \\\"sizeof(void*)=${CMAKE_SIZEOF_VOID_P}.\\\"\")\nendif()\n\nif(TARGET_ARCH_X86)\n\tadd_definitions(-DEDB_X86)\n\tinclude_directories(\"include/arch/x86-generic\")\nelseif(TARGET_ARCH_X64)\n\tadd_definitions(-DEDB_X86_64)\n\tinclude_directories(\"include/arch/x86-generic\")\nelseif(TARGET_ARCH_ARM32)\n\tadd_definitions(-DEDB_ARM32)\n\tinclude_directories(\"include/arch/arm-generic\")\nelseif(TARGET_ARCH_ARM64)\n\tadd_definitions(-DEDB_ARM64)\n\tinclude_directories(\"include/arch/arm-generic\")\nendif()\n\nif(UNIX)\n\tif(TARGET_ARCH_FAMILY_X86)\n\t\tpkg_check_modules(GDTOA gdtoa-desktop)\n\t\tif(NOT GDTOA_FOUND)\n\t\t\tmessage(STATUS \"gdtoa-desktop package wasn't found. Using built in version.\")\n\t\tendif()\n\tendif()\nendif()\n\nadd_subdirectory(src)\nadd_subdirectory(plugins)\nadd_subdirectory(lib)\n\ninstall (FILES ${CMAKE_SOURCE_DIR}/edb.1 DESTINATION ${CMAKE_INSTALL_MANDIR}/man1)\ninstall (FILES ${CMAKE_SOURCE_DIR}/edb.desktop DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/applications/)\ninstall (FILES ${CMAKE_SOURCE_DIR}/src/res/images/edb.png DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/pixmaps/)\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 17.66796875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.6357421875,
          "content": "[![Gitter](https://badges.gitter.im/eteran/edb-debugger.svg)](https://gitter.im/eteran/edb-debugger?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n[![Build Status](https://github.com/eteran/edb-debugger/actions/workflows/build.yaml/badge.svg?branch=master)](https://github.com/eteran/edb-debugger/actions/workflows/build.yaml)\n[![Build status](https://ci.appveyor.com/api/projects/status/91jfbbyg075wk96q?svg=true)](https://ci.appveyor.com/project/eteran/edb-debugger)\n[![License](https://img.shields.io/badge/license-GPL2-blue.svg)](https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html)\n[![Paypal](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=evan%2eteran%40gmail%2ecom&lc=US&item_name=edb%2ddebugger&currency_code=USD&bn=PP%2dDonationsBF%3a68747470733a2f2f696d672e736869656c64732e696f2f62616467652f446f6e6174652d50617950616c2d677265656e2e737667%3aNonHosted)\n\n\nedb is a cross platform AArch32/x86/x86-64 debugger. It was inspired by [Ollydbg](http://www.ollydbg.de/ \"Ollydbg\"),\nbut aims to function on AArch32, x86, and x86-64 as well as multiple OS's. Linux is the\nonly officially supported platform at the moment, but FreeBSD, OpenBSD, OSX and\nWindows ports are underway with varying degrees of functionality.\n\n![Screenshot](https://raw.githubusercontent.com/wiki/eteran/edb-debugger/img/edb_interface-2019.png)\n\nedb is available under the GPL 2 license, see the COPYING for details.\n\n**NOTE**: version 1.5.0 is the last version to support linux kernels older than 3.0. New development will target 3.0 and newer, and will be 2.0.0 when released.\n\n**NOTE**: This README now only covers the most essential documentation, for more\ncomplete documentation see the [wiki](https://github.com/eteran/edb-debugger/wiki)\n\n\nCloning\n-------\n\nWhen cloning the repo, please use git's `--recursive` flag to ensure that the\nsub-modules will be properly cloned and updated to the correct versions.\nHere is an example:\n\n`git clone --recursive https://github.com/eteran/edb-debugger.git`\n\nCompiling\n---------\n\nCompiling edb is generally quite simple. The latest release of edb currently\ndepends on the following packages:\n\nDependency                                  | Version Required\n------------------------------------------- | ----------------\nGCC/Clang                                   | Supporting C++17\n[Qt](http://www.qt.io/)                     | >= 5.9\n[Capstone](http://www.capstone-engine.org/) | >= 3.0\n[Graphviz](http://www.graphviz.org/)        | >= 2.38.0 (Optional)\n\nMany distributions already have packages that satisfy these. The wiki contains\nexamples for some popular distributions:\n\n* https://github.com/eteran/edb-debugger/wiki/Compiling-(Fedora)\n* https://github.com/eteran/edb-debugger/wiki/Compiling-(Ubuntu)\n* https://github.com/eteran/edb-debugger/wiki/Compiling-(Debian)\n\nOnce you have the necessary dependencies installed, compilation is done with\n`cmake`:\n\n### CMake\n\nIf you plan to just run edb out of the build directory, it's as simple as this:\n\n\t$ mkdir build\n\t$ cd build\n\t$ cmake ..\n\t$ make\n\t$ ./edb\n\nIf you would like to properly install edb on the system for all users, it's\nonly a little different:\n\n\t$ mkdir build\n\t$ cd build\n\t$ cmake -DCMAKE_INSTALL_PREFIX=/usr/local/ ..\n\t$ make\n\t$ make install\n\t$ edb\n\nInstalling\n----------\n\nBasic installation is simple, you may run\n\n\t$ make install\n\nIn which case the plugins will be installed in `/usr/local/lib/edb` and the\nbinaries will be installed in `/usr/local/bin/`.\n\n![Analytics](https://www.google-analytics.com/collect?v=1&tid=UA-2958870-1&ds=web&t=pageview&dl=https%3A%2F%2Fgithub.com%2Feteran%2Fedb-debugger&dh=github.com&dp=%2Feteran%2Fedb-debugger&cid=555)\n"
        },
        {
          "name": "TODO",
          "type": "blob",
          "size": 0.0986328125,
          "content": "This file has been superseded by the issue tracker at: https://github.com/eteran/edb-debugger/issues\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 1.6533203125,
          "content": "version: \"{build}\"\n\nenvironment:\n  CAPSTONE_SDK: C:\\capstone\\sdk\n  matrix:\n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n      CAPSTONE_ARCHIVE: capstone-3.0.5-rc2-win64\n      CMAKE_GENERATOR: Visual Studio 15 2017 Win64\n      QT_BASEDIR: C:\\Qt\\5.9\\msvc2017_64\n\nconfiguration:\n  - Debug\n  - Release\n\ninstall:\n  - ps: new-item -itemtype directory -path C:\\capstone\\sdk | out-null\n  - ps: new-item -itemtype directory -path C:\\capstone\\sdk\\include\\capstone | out-null\n  - ps: new-item -itemtype directory -path C:\\capstone\\sdk\\lib | out-null\n  - ps: \"[Environment]::CurrentDirectory = 'C:\\\\capstone'\"\n  - ps: (new-object net.webclient).DownloadFile(\"https://github.com/aquynh/capstone/releases/download/3.0.5-rc2/${env:CAPSTONE_ARCHIVE}.zip\", 'capstone.zip')\n  - ps: expand-archive C:\\capstone\\capstone.zip -destinationpath C:\\capstone\n  - ps: copy-item C:\\capstone\\${env:CAPSTONE_ARCHIVE}\\include\\*.h C:\\capstone\\sdk\\include\\capstone\n  - ps: copy-item C:\\capstone\\${env:CAPSTONE_ARCHIVE}\\capstone.lib C:\\capstone\\sdk\\lib\\capstone_dll.lib\n  \nbefore_build:\n  - cmd: git submodule update --init\n  - cmd: cd C:\\projects\n  - cmd: md build\n  - cmd: cd build\n  - cmd: cmake -Wno-dev -G \"%CMAKE_GENERATOR%\" -DCMAKE_BUILD_TYPE=%configuration% -DCMAKE_INSTALL_PREFIX=C:\\projects\\install -DCAPSTONE_SDK=\"%CAPSTONE_SDK%\" -DQt5Core_DIR=\"%QT_BASEDIR%\\lib\\cmake\\Qt5Core\" -DQt5_DIR=\"%QT_BASEDIR%\\lib\\cmake\\Qt5\" ..\\edb-debugger\n\nbuild_script:\n  - cmd: msbuild C:\\projects\\build\\edb.sln /t:edb /logger:\"C:\\Program Files\\AppVeyor\\BuildAgent\\Appveyor.MSBuildLogger.dll\"\n  - cmd: msbuild C:\\projects\\build\\edb.sln /t:DebuggerCore /logger:\"C:\\Program Files\\AppVeyor\\BuildAgent\\Appveyor.MSBuildLogger.dll\"\n  \n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "cspell.config.yaml",
          "type": "blob",
          "size": 0.767578125,
          "content": "version: \"0.2\"\nignorePaths: []\ndictionaryDefinitions: []\ndictionaries: []\nwords:\n  - Antialiasing\n  - CLASSINFO\n  - darkprof\n  - debuggee\n  - demangled\n  - DEMANGLING\n  - disassemblers\n  - Doubleword\n  - doublewords\n  - DWORD\n  - DWORDS\n  - ELFCLASS\n  - ELFDATA\n  - ELFOSABI\n  - eteran\n  - Fabien\n  - hexview\n  - Kabatsayev\n  - konsole\n  - Mercês\n  - METATYPE\n  - Midlight\n  - Mohd\n  - nasm\n  - Nicoleau\n  - nofork\n  - Noto\n  - Olly\n  - Ollydbg\n  - Opfer\n  - Pixmap\n  - Polyline\n  - qcommonstyle\n  - qgetenv\n  - qlonglong\n  - qobject\n  - qreal\n  - qsnprintf\n  - Quadword\n  - quadwords\n  - qulonglong\n  - QWORD\n  - QWORDS\n  - Ruslan\n  - Scrollbars\n  - Shahril\n  - Sorokin\n  - stepover\n  - tbyte\n  - Teran\n  - TSTP\n  - xmmword\n  - yasm\n  - ymmword\n  - zmmword\nignoreWords: []\nimport: []\n"
        },
        {
          "name": "edb.1",
          "type": "blob",
          "size": 1.80859375,
          "content": ".\\\"Text automatically generated by txt2man\n.TH EDB 1 \"December 2011\" \"\" \"\"\n.SH NAME\n\\fBedb \\fP- graphical debugger and disassembler for executables\n.SH SYNOPSIS\n.nf\n.fam C\n \\fBedb\\fP [OPTION]\\.\\.\\. [\\fITARGET\\fP]\n.fam T\n.fi\n.fam T\n.fi\n.SH DESCRIPTION\n\\fBedb\\fP (Evan's Debugger) is a modular and modern disassembler and debugger for\nbinary ELF files based on ptrace API and the capstone disassembly library.\n.TP\n.B\n\\fB--help\\fP\nShow usage and exit.\n.TP\n.B\n\\fB--symbols\\fP <file>\ngenerate symbols map for file <file>\n.TP\n.B\n\\fB--attach\\fP <pid>\nattach the process of PID <pid> to debugger\n.TP\n.B\n\\fB--run\\fP <program> [args\\.\\.\\.]\nopen <program> in debugger with optional [args\\.\\.\\.]\n.TP\n.B\n\\fB--version\\fP\nshow version string and exit.\n.TP\n.B\n\\fB--dump-version\\fP\nshow version and exit.\n.SH EXAMPLE\n\\fBedb\\fP \\fB--symbols\\fP /lib/libc.so.6 > libc.so.6.map\n.PP\n.nf\n.fam C\n     Will generate symbols for libc and save it in a text file. It's useful if you store this map files in the symbols directory configured in edb's preferences.\n\n.fam T\n.fi\nfor i in $(ls /lib); do \\fBedb\\fP \\fB--symbols\\fP $i > $(basename $i).map; done\n.PP\n.nf\n.fam C\n      Useful to generate maps for all libs you have in /lib.\n\n.fam T\n.fi\n\\fBedb\\fP \\fB--run\\fP /bin/ls\n.PP\n.nf\n.fam C\n      Will open the ls program binary in debugger.\n\n.fam T\n.fi\n\\fBedb\\fP \\fB--attach\\fP 1720\n.PP\n.nf\n.fam C\n     Attach the process of PID 1720 to debugger.\n.fam T\n.fi\n.SH AUTHOR\nWritten by Evan Teran <evan.teran@gmail.com>\n.SH REPORTING BUGS\nReport any bugs or requests for features via BTS on https://github.com/eteran/edb-debugger/issues\n.SH COPYRIGHT\nCopyright © 2008 CodeF00. Licensed GPLv2: GNU GPL version 2 <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law.\n"
        },
        {
          "name": "edb.appdata.xml",
          "type": "blob",
          "size": 1.6103515625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- Copyright 2024 Evan Teran <evan.teran@gmail.com> -->\n<component type=\"desktop\">\n    <id>io.github.eteran.edb-debugger</id>\n    <metadata_license>CC0-1.0</metadata_license>\n    <project_license>GPL-2.0</project_license>\n    <name>edb</name>\n    <summary>Reverse engineer's debugger</summary>\n<!--\n    <developer id=\"io.github.eteran\">\n   \t <name>edb-debugger</name>\n    </developer>\n-->\n    <developer_name>edb-debugger</developer_name>\n    <description>\n\t\t<p>edb is a cross platform x86/x86-64 debugger. It was inspired by OllyDbg, \n\t\t   but aims to function on x86 and x86-64 as well as multiple OS's.\n\t\t</p>\n\t\t<p>Linux is the only officially supported platform at the moment, but FreeBSD, \n                   OpenBSD, OSX and Windows ports are underway with varying degrees of functionality.\n \t\t</p>\n    </description>\n    <screenshots>\n        <screenshot type=\"default\" width=\"1121\" height=\"839\">\n\t\t<image>http://codef00.com/img/debugger.png</image>\n\t\t<caption>Main Window, with disassembly, data, stack and registers</caption>\n\t</screenshot>\n    </screenshots>\n    <update_contact>evan.teran_at_gmail.com</update_contact>\n    <url type=\"homepage\">https://github.com/eteran/edb-debugger</url>\n    <launchable type=\"desktop-id\">edb.desktop</launchable>\n    <provides>\n        <binary>edb</binary>\n    </provides>\n    <content_rating type=\"oars-1.1\">\n        <content_attribute id=\"social-info\">mild</content_attribute>\n    </content_rating>\n    <releases>\n\t<release version=\"1.5.0\" date=\"2024-03-22\"></release>\n        <release version=\"1.4.0\" date=\"2023-06-30\"></release>\n    </releases>\n</component>\n"
        },
        {
          "name": "edb.desktop",
          "type": "blob",
          "size": 0.1904296875,
          "content": "[Desktop Entry]\nName=edb\nGenericName=\"Evan's Debugger\"\nComment=\"edb is a cross platform x86/x86-64 debugger\"\nExec=edb\nIcon=edb\nTerminal=false\nType=Application\nCategories=Development;Qt;Debugger;\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "pkg",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}