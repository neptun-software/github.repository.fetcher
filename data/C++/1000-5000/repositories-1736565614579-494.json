{
  "metadata": {
    "timestamp": 1736565614579,
    "page": 494,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ANYbotics/grid_map",
      "stars": 2716,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3623046875,
          "content": "# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\n# Eclipse\n.cproject\n.project\n.settings\n*.pydevproject\n\n# OS X\n.DS_Store\n\ngrid_map_pcl/data/*\n!grid_map_pcl/data/input_cloud.pcd\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4423828125,
          "content": "Copyright 2019, ANYbotics AG.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in\n   the documentation and/or other materials provided with the\n   distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived\n   from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 37.884765625,
          "content": "# Grid Map\n\n## Overview\n\nThis is a C++ library with [ROS] interface to manage two-dimensional grid maps with multiple data layers. It is designed for mobile robotic mapping to store data such as elevation, variance, color, friction coefficient, foothold quality, surface normal, traversability etc. It is used in the [Robot-Centric Elevation Mapping](https://github.com/anybotics/elevation_mapping) package designed for rough terrain navigation.\n\nFeatures:\n\n* **Multi-layered:** Developed for universal 2.5-dimensional grid mapping with support for any number of layers.\n* **Efficient map re-positioning:** Data storage is implemented as two-dimensional circular buffer. This allows for non-destructive shifting of the map's position (e.g. to follow the robot) without copying data in memory.\n* **Based on Eigen:** Grid map data is stored as [Eigen] data types. Users can apply available Eigen algorithms directly to the map data for versatile and efficient data manipulation.\n* **Convenience functions:** Several helper methods allow for convenient and memory safe cell data access. For example, iterator functions for rectangular, circular, polygonal regions and lines are implemented.\n* **ROS interface:** Grid maps can be directly converted to and from ROS message types such as PointCloud2, OccupancyGrid, GridCells, and our custom GridMap message. Conversion packages provide compatibility with [costmap_2d], [PCL], and [OctoMap] data types.\n  * Note: Currently, PointCloud2 can only be converted one-way; see this [issue](https://github.com/ANYbotics/grid_map/issues/158) for context.\n* **OpenCV interface:** Grid maps can be seamlessly converted from and to [OpenCV] image types to make use of the tools provided by [OpenCV].\n* **Visualizations:** The *grid_map_rviz_plugin* renders grid maps as 3d surface plots (height maps) in [RViz]. Additionally, the *grid_map_visualization* package helps to visualize grid maps as point clouds, occupancy grids, grid cells etc.\n* **Filters:** The *grid_map_filters* provides are range of filters to process grid maps as a sequence of filters. Parsing of mathematical expressions allows to flexibly setup powerful computations such as thresholding, normal vectors, smoothening, variance, inpainting, and matrix kernel convolutions.\n\nThis is research code, expect that it changes often and any fitness for a particular purpose is disclaimed.\n\nThe source code is released under a [BSD 3-Clause license](LICENSE).\n\n**Author: Péter Fankhauser<br />\nAffiliation: [ANYbotics](https://www.anybotics.com/)<br />\nMaintainer: Maximilian Wulf, mwulf@anybotics.com, Magnus Gärtner, mgaertner@anybotics.com<br />**\nWith contributions by: Simone Arreghini, Tanja Baumann, Jeff Delmerico, Remo Diethelm, Perry Franklin, Magnus Gärtner, Ruben Grandia, Edo Jelavic, Dominic Jud, Ralph Kaestner, Philipp Krüsi, Alex Millane, Daniel Stonier, Elena Stumm, Martin Wermelinger, Christos Zalidis\n\nThis projected was initially developed at ETH Zurich (Autonomous Systems Lab & Robotic Systems Lab).\n\n[This work is conducted as part of ANYmal Research, a community to advance legged robotics.](https://www.anymal-research.org/)\n\n![Grid map example in RViz](grid_map_rviz_plugin/doc/grid_map_rviz_plugin_example.png)\n\n## Publications\n\nIf you use this work in an academic context, please cite the following publication:\n\n> P. Fankhauser and M. Hutter,\n> **\"A Universal Grid Map Library: Implementation and Use Case for Rough Terrain Navigation\"**,\n> in Robot Operating System (ROS) – The Complete Reference (Volume 1), A. Koubaa (Ed.), Springer, 2016. ([PDF](http://www.researchgate.net/publication/284415855))\n\n\n    @incollection{Fankhauser2016GridMapLibrary,\n      author = {Fankhauser, P{\\'{e}}ter and Hutter, Marco},\n      booktitle = {Robot Operating System (ROS) – The Complete Reference (Volume 1)},\n      title = {{A Universal Grid Map Library: Implementation and Use Case for Rough Terrain Navigation}},\n      chapter = {5},\n      editor = {Koubaa, Anis},\n      publisher = {Springer},\n      year = {2016},\n      isbn = {978-3-319-26052-5},\n      doi = {10.1007/978-3-319-26054-9{\\_}5},\n      url = {http://www.springer.com/de/book/9783319260525}\n    }\n\n## Branches\n\nThese branches are currently maintained:\n* ROS 1\n  * [master](https://github.com/ANYbotics/grid_map)\n* ROS 2\n  * [humble](https://github.com/ANYbotics/grid_map/tree/humble)\n  * [iron](https://github.com/ANYbotics/grid_map/tree/iron)\n  * [jazzy](https://github.com/ANYbotics/grid_map/tree/jazzy)\n  * [rolling](https://github.com/ANYbotics/grid_map/tree/rolling)\n\nPull requests for ROS 1 should target `master`.\nPull requests for ROS 2 should target `rolling` and will be backported if they do not break ABI.\n\n## Documentation\n\nAn introduction to the grid map library including a tutorial is given in [this book chapter](http://www.researchgate.net/publication/284415855).\n\nThe C++ API is documented here:\n* [grid_map_core](http://docs.ros.org/kinetic/api/grid_map_core/html/index.html)\n* [grid_map_ros](http://docs.ros.org/kinetic/api/grid_map_ros/html/index.html)\n* [grid_map_costmap_2d](http://docs.ros.org/kinetic/api/grid_map_costmap_2d/html/index.html)\n* [grid_map_cv](http://docs.ros.org/kinetic/api/grid_map_cv/html/index.html)\n* [grid_map_filters](http://docs.ros.org/kinetic/api/grid_map_filters/html/index.html)\n* [grid_map_octomap](http://docs.ros.org/kinetic/api/grid_map_octomap/html/index.html)\n* [grid_map_pcl](http://docs.ros.org/kinetic/api/grid_map_pcl/html/index.html)\n\n## Installation\n\n### Installation from Packages\n\nTo install all packages from the grid map library as Debian packages use\n\n    sudo apt-get install ros-$ROS_DISTRO-grid-map\n\n### Building from Source\n\n#### Dependencies\n\nThe *grid_map_core* package depends only on the linear algebra library [Eigen].\n\n    sudo apt-get install libeigen3-dev\n\nThe other packages depend additionally on the [ROS] standard installation (*roscpp*, *tf*, *filters*, *sensor_msgs*, *nav_msgs*, and *cv_bridge*). Other format specific conversion packages (e.g. *grid_map_cv*, *grid_map_pcl* etc.) depend on packages described below in *Packages Overview*.\n\n#### Building\n\nTo build from source, clone the latest version from this repository into your catkin workspace and compile the package using\n\n    cd catkin_ws/src\n    git clone https://github.com/anybotics/grid_map.git\n    cd ../\n    catkin_make\n\nTo maximize performance, make sure to build in *Release* mode. You can specify the build type by setting\n\n    catkin_make -DCMAKE_BUILD_TYPE=Release\n\n\n### Packages Overview\n\nThis repository consists of following packages:\n\n* ***grid_map*** is the meta-package for the grid map library.\n* ***grid_map_core*** implements the algorithms of the grid map library. It provides the `GridMap` class and several helper classes such as the iterators. This package is implemented without [ROS] dependencies.\n* ***grid_map_ros*** is the main package for [ROS] dependent projects using the grid map library. It provides the interfaces to convert grid maps from and to several [ROS] message types.\n* ***grid_map_demos*** contains several nodes for demonstration purposes.\n* ***grid_map_filters*** builds on the [ROS Filters] package to process grid maps as a sequence of filters.\n* ***grid_map_msgs*** holds the [ROS] message and service definitions around the [grid_map_msg/GridMap] message type.\n* ***grid_map_rviz_plugin*** is an [RViz] plugin to visualize grid maps as 3d surface plots (height maps).\n* ***grid_map_sdf*** provides an algorithm to convert an elevation map into a 3D signed distance field.\n* ***grid_map_visualization*** contains a node written to convert GridMap messages to other [ROS] message types for example for  visualization in [RViz].\n\nAdditional conversion packages:\n\n* ***grid_map_costmap_2d*** provides conversions of grid maps from [costmap_2d] map types.\n* ***grid_map_cv*** provides conversions of grid maps from and to [OpenCV] image types.\n* ***grid_map_octomap*** provides conversions of grid maps from OctoMap ([OctoMap]) maps.\n* ***grid_map_pcl*** provides conversions of grid maps from Point Cloud Library ([PCL](http://pointclouds.org/)) polygon meshes and point clouds. For details, see the grid map pcl package [README](grid_map_pcl/README.md).\n\n### Unit Tests\n\nRun the unit tests with\n\n    catkin_make run_tests_grid_map_core run_tests_grid_map_ros\n\nor\n\n    catkin build grid_map --no-deps --verbose --catkin-make-args run_tests\n\nif you are using [catkin tools](http://catkin-tools.readthedocs.org/).\n\n## Usage\n\n### Demonstrations\n\nThe *grid_map_demos* package contains several demonstration nodes. Use this code to verify your installation of the grid map packages and to get you started with your own usage of the library.\n\n* *[simple_demo](grid_map_demos/src/simple_demo_node.cpp)* demonstrates a simple example for using the grid map library. This ROS node creates a grid map, adds data to it, and publishes it. To see the result in RViz, execute the command\n\n        roslaunch grid_map_demos simple_demo.launch\n\n* *[tutorial_demo](grid_map_demos/src/tutorial_demo_node.cpp)* is an extended demonstration of the library's functionalities. Launch the *tutorial_demo* with\n\n        roslaunch grid_map_demos tutorial_demo.launch\n\n* *[iterators_demo](grid_map_demos/src/IteratorsDemo.cpp)* showcases the usage of the grid map iterators. Launch it with\n\n        roslaunch grid_map_demos iterators_demo.launch\n\n* *[image_to_gridmap_demo](grid_map_demos/src/ImageToGridmapDemo.cpp)* demonstrates how to convert data from an [image](grid_map_demos/data/eth_logo.png) to a grid map. Start the demonstration with\n\n        roslaunch grid_map_demos image_to_gridmap_demo.launch\n\n    ![Image to grid map demo result](grid_map_demos/doc/image_to_grid_map_demo_result.png)\n    \n* *[grid_map_to_image_demo](grid_map_demos/src/GridmapToImageDemo.cpp)* demonstrates how to save a grid map layer to an image. Start the demonstration with\n\n        rosrun grid_map_demos grid_map_to_image_demo _grid_map_topic:=/grid_map _file:=/home/$USER/Desktop/grid_map_image.png\n\n* *[opencv_demo](grid_map_demos/src/opencv_demo_node.cpp)* demonstrates map manipulations with help of [OpenCV] functions. Start the demonstration with\n\n        roslaunch grid_map_demos opencv_demo.launch\n\n    ![OpenCV demo result](grid_map_demos/doc/opencv_demo_result.gif)\n\n* *[resolution_change_demo](grid_map_demos/src/resolution_change_demo_node.cpp)* shows how the resolution of a grid map can be changed with help of the [OpenCV] image scaling methods. The see the results, use\n\n        roslaunch grid_map_demos resolution_change_demo.launch\n\n* *[filters_demo](grid_map_demos/src/FiltersDemo.cpp)* uses a chain of [ROS Filters] to process a grid map. Starting from the elevation of a terrain map, the demo uses several filters to show how to compute surface normals, use inpainting to fill holes, smoothen/blur the map, and use math expressions to detect edges, compute roughness and traversability. The filter chain setup is configured in the [`filters_demo_filter_chain.yaml`](grid_map_demos/config/filters_demo_filter_chain.yaml) file. Launch the demo with\n\n        roslaunch grid_map_demos filters_demo.launch\n\n    [![Filters demo results](grid_map_demos/doc/filters_demo_preview.gif)](grid_map_demos/doc/filters_demo.gif)\n\n For more information about grid map filters, see [grid_map_filters](#grid_map_filters).\n\n* *[interpolation_demo](grid_map_demos/src/InterpolationDemo.cpp)* shows the result of different interpolation methods on the resulting surface. The start the demo, use\n\n        roslaunch grid_map_demos interpolation_demo.launch\n\n<img src=\"grid_map_core/doc/interpolationSineWorld.gif\" width=\"256\" height=\"252\">\n<img src=\"grid_map_core/doc/interpolationGaussWorld.gif\" width=\"256\" height=\"252\">\n\nThe user can play with different worlds (surfaces) and different interpolation settings in the [`interpolation_demo.yaml`](grid_map_demos/config/interpolation_demo.yaml) file. The visualization displays the ground truth in green and yellow color. The interpolation result is shown in red and purple colors. Also, the demo computes maximal and average interpolation errors, as well as the average time required for a single interpolation query.\n\nGrid map features four different interpolation methods (in order of increasing accuracy and increasing complexity):\n* **NN** - Nearest Neighbour (fastest, but least accurate).\n* **Linear** - Linear interpolation.\n* **Cubic convolution** - Piecewise cubic interpolation. Implemented using the cubic convolution algorithm.\n* **Cubic** - Cubic interpolation (slowest, but most accurate).\n\nFor more details check the literature listed in  [`CubicInterpolation.hpp`](grid_map_core/include/grid_map_core/CubicInterpolation.hpp) file.\n\n### Conventions & Definitions\n\n[![Grid map layers](grid_map_core/doc/grid_map_layers.png)](grid_map_core/doc/grid_map_layers.pdf)\n\n[![Grid map conventions](grid_map_core/doc/grid_map_conventions.png)](grid_map_core/doc/grid_map_conventions.pdf)\n\n\n### Iterators\n\nThe grid map library contains various iterators for convenience.\n\nGrid map | Submap | Circle | Line | Polygon\n:---: | :---: | :---: | :---: | :---:\n[![Grid map iterator](grid_map_core/doc/iterators/grid_map_iterator_preview.gif)](grid_map_core/doc/iterators/grid_map_iterator.gif) | [![Submap iterator](grid_map_core/doc/iterators/submap_iterator_preview.gif)](grid_map_core/doc/iterators/submap_iterator.gif) | [![Circle iterator](grid_map_core/doc/iterators/circle_iterator_preview.gif)](grid_map_core/doc/iterators/circle_iterator.gif) | [![Line iterator](grid_map_core/doc/iterators/line_iterator_preview.gif)](grid_map_core/doc/iterators/line_iterator.gif) | [![Polygon iterator](grid_map_core/doc/iterators/polygon_iterator_preview.gif)](grid_map_core/doc/iterators/polygon_iterator.gif)\n__Ellipse__ | __Spiral__\n[![Ellipse iterator](grid_map_core/doc/iterators/ellipse_iterator_preview.gif)](grid_map_core/doc/iterators/ellipse_iterator.gif) | [![Spiral iterator](grid_map_core/doc/iterators/spiral_iterator_preview.gif)](grid_map_core/doc/iterators/spiral_iterator.gif)\n\nUsing the iterator in a `for` loop is common. For example, iterate over the entire grid map with the `GridMapIterator` with\n\n    for (grid_map::GridMapIterator iterator(map); !iterator.isPastEnd(); ++iterator) {\n        cout << \"The value at index \" << (*iterator).transpose() << \" is \" << map.at(\"layer\", *iterator) << endl;\n    }\n\nThe other grid map iterators follow the same form. You can find more examples on how to use the different iterators in the *[iterators_demo](grid_map_demos/src/IteratorsDemo.cpp)* node.\n\nNote: For maximum efficiency when using iterators, it is recommended to locally store direct access to the data layers of the grid map with `grid_map::Matrix& data = map[\"layer\"]` outside the `for` loop:\n\n    grid_map::Matrix& data = map[\"layer\"];\n    for (GridMapIterator iterator(map); !iterator.isPastEnd(); ++iterator) {\n        const Index index(*iterator);\n        cout << \"The value at index \" << index.transpose() << \" is \" << data(index(0), index(1)) << endl;\n    }\n\nYou can find a benchmarking of the performance of the iterators in the `iterator_benchmark` node of the `grid_map_demos` package which can be run with\n\n    rosrun grid_map_demos iterator_benchmark\n\nBeware that while iterators are convenient, it is often the cleanest and most efficient to make use of the built-in [Eigen] methods. Here are some examples:\n\n* Setting a constant value to all cells of a layer:\n\n        map[\"layer\"].setConstant(3.0);\n\n* Adding two layers:\n\n        map[\"sum\"] = map[\"layer_1\"] + map[\"layer_2\"];\n\n* Scaling a layer:\n\n        map[\"layer\"] = 2.0 * map[\"layer\"];\n\n* Max. values between two layers:\n\n        map[\"max\"] = map[\"layer_1\"].cwiseMax(map[\"layer_2\"]);\n\n* Compute the root mean squared error:\n\n        map.add(\"error\", (map.get(\"layer_1\") - map.get(\"layer_2\")).cwiseAbs());\n        unsigned int nCells = map.getSize().prod();\n        double rootMeanSquaredError = sqrt((map[\"error\"].array().pow(2).sum()) / nCells);\n\n\n### Changing the Position of the Map\n\nThere are two different methods to change the position of the map:\n* `setPosition(...)`: Changes the position of the map without changing data stored in the map. This changes the corresponce between the data and the map frame.\n* `move(...)`:\n Relocates the region captured by grid map w.r.t. to the static grid map frame. Use this to move the grid map boundaries\n without relocating the grid map data. Takes care of all the data handling, such that the grid map data is stationary in the grid map\n frame.\n  - Data in the overlapping region before and after the position change remains stored.\n  - Data that falls outside the map at its new position is discarded.\n  - Cells that cover previously unknown regions are emptied (set to nan).\n  The data storage is implemented as two-dimensional circular buffer to minimize computational effort.\n \n   **Note**: Due to the circular buffer structure, neighbouring indices might not fall close in the map frame.\n   This assumption only holds for indices obtained by getUnwrappedIndex().\n\n  `setPosition(...)` | `move(...)`\n  :---: | :---:\n  ![Grid map iterator](grid_map_core/doc/setposition_method.gif) | ![Submap iterator](grid_map_core/doc/move_method.gif)|\n\n\n## Packages\n\n### grid_map_rviz_plugin\n\nThis [RViz] plugin visualizes a grid map layer as 3d surface plot (height map). A separate layer can be chosen as layer for the color information.\n\n![Grid map visualization in RViz](grid_map_rviz_plugin/doc/grid_map_rviz_plugin.png)\n\n### grid_map_sdf\n\nThis package provides an efficient algorithm to convert an elevation map into a dense 3D signed distance field. Each point in the 3D grid contains the distance to the closest point in the map together with the gradient.  \n\n![ANYmal SDF demo](grid_map_sdf/doc/anymal_sdf_demo.gif)\n\n### grid_map_visualization\n\nThis node subscribes to a topic of type [grid_map_msgs/GridMap] and publishes messages that can be visualized in [RViz]. The published topics of the visualizer can be fully configure with a YAML parameter file. Any number of visualizations with different parameters can be added. An example is [here](grid_map_demos/config/tutorial_demo.yaml) for the configuration file of the *tutorial_demo*.\n\nPoint cloud | Vectors | Occupancy grid | Grid cells\n--- | --- | --- | ---\n[![Point cloud](grid_map_visualization/doc/point_cloud_preview.jpg)](grid_map_visualization/doc/point_cloud.jpg) | [![Vectors](grid_map_visualization/doc/vectors_preview.jpg)](grid_map_visualization/doc/vectors.jpg) | [![Occupancy grid](grid_map_visualization/doc/occupancy_grid_preview.jpg)](grid_map_visualization/doc/occupancy_grid.jpg) | [![Grid cells](grid_map_visualization/doc/grid_cells_preview.jpg)](grid_map_visualization/doc/grid_cells.jpg)\n\n#### Parameters\n\n* **`grid_map_topic`** (string, default: \"/grid_map\")\n\n    The name of the grid map topic to be visualized. See below for the description of the visualizers.\n\n\n#### Subscribed Topics\n\n* **`/grid_map`** ([grid_map_msgs/GridMap])\n\n    The grid map to visualize.\n\n\n#### Published Topics\n\nThe published topics are configured with the [YAML parameter file](grid_map_demos/config/tutorial_demo.yaml). Possible topics are:\n\n* **`point_cloud`** ([sensor_msgs/PointCloud2])\n\n    Shows the grid map as a point cloud. Select which layer to transform as points with the `layer` parameter.\n\n        name: elevation\n        type: point_cloud\n        params:\n         layer: elevation\n         flat: false # optional\n\n* **`flat_point_cloud`** ([sensor_msgs/PointCloud2])\n\n    Shows the grid map as a \"flat\" point cloud, i.e. with all points at the same height *z*. This is convenient to visualize 2d maps or images (or even video streams) in [RViz] with help of its `Color Transformer`. The parameter `height` determines the desired *z*-position of the flat point cloud.\n\n        name: flat_grid\n        type: flat_point_cloud\n        params:\n         height: 0.0\n\n    Note: In order to omit points in the flat point cloud from empty/invalid cells, specify the layers which should be checked for validity with `setBasicLayers(...)`.\n\n* **`vectors`** ([visualization_msgs/Marker])\n\n    Visualizes vector data of the grid map as visual markers. Specify the layers which hold the *x*-, *y*-, and *z*-components of the vectors with the `layer_prefix` parameter. The parameter `position_layer` defines the layer to be used as start point of the vectors.\n\n        name: surface_normals\n        type: vectors\n        params:\n         layer_prefix: normal_\n         position_layer: elevation\n         scale: 0.06\n         line_width: 0.005\n         color: 15600153 # red\n\n* **`occupancy_grid`** ([nav_msgs/OccupancyGrid])\n\n    Visualizes a layer of the grid map as occupancy grid. Specify the layer to be visualized with the `layer` parameter, and the upper and lower bound with `data_min` and `data_max`.\n\n        name: traversability_grid\n        type: occupancy_grid\n        params:\n         layer: traversability\n         data_min: -0.15\n         data_max: 0.15\n\n* **`grid_cells`** ([nav_msgs/GridCells])\n\n    Visualizes a layer of the grid map as grid cells. Specify the layer to be visualized with the `layer` parameter, and the upper and lower bounds with `lower_threshold` and `upper_threshold`.\n\n        name: elevation_cells\n        type: grid_cells\n        params:\n         layer: elevation\n         lower_threshold: -0.08 # optional, default: -inf\n         upper_threshold: 0.08 # optional, default: inf\n\n* **`region`** ([visualization_msgs/Marker])\n\n    Shows the boundary of the grid map.\n\n        name: map_region\n        type: map_region\n        params:\n         color: 3289650\n         line_width: 0.003\n\n*Note: Color values are in RGB form as concatenated integers (for each channel value 0-255). The values can be generated like [this](http://www.wolframalpha.com/input/?i=BitOr%5BBitShiftLeft%5Br%2C16%5D%2C+BitShiftLeft%5Bg%2C8%5D%2C+b%5D+where+%7Br%3D0%2C+g%3D255%2C+b%3D0%7D) as an example for the color green (red: 0, green: 255, blue: 0).*\n\n### grid_map_filters\n\nThe *grid_map_filters* package containts several filters which can be applied a grid map to perform computations on the data in the layers. The grid map filters are based on [ROS Filters], which means that a chain of filters can be configured as a YAML file. Furthermore, additional filters can be written and made available through the ROS plugin mechanism, such as the [`InpaintFilter`](grid_map_cv/include/grid_map_cv/InpaintFilter.hpp) from the `grid_map_cv` package.\n\nSeveral basic filters are provided in the *grid_map_filters* package:\n\n* **`gridMapFilters/ThresholdFilter`**\n\n    Set values in the output layer to a specified value _if_ the condition_layer is exceeding either the upper or lower threshold (only one threshold at a time).\n\n        name: lower_threshold\n        type: gridMapFilters/ThresholdFilter\n        params:\n          condition_layer: layer_name\n          output_layer: layer_name\n          lower_threshold: 0.0 # alternative: upper_threshold\n          set_to: 0.0 # # Other uses: .nan, .inf\n\n* **`gridMapFilters/MeanInRadiusFilter`**\n\n    Compute for each cell of a layer the mean value inside a radius.\n\n        name: mean_in_radius\n        type: gridMapFilters/MeanInRadiusFilter\n        params:\n          input_layer: input\n          output_layer: output\n          radius: 0.06 # in m.\n* **`gridMapFilters/MedianFillFilter`**\n\n    Compute for each _NaN_ cell of a layer the median (of finites) inside a patch with radius. \n    Optionally, apply median calculations for values that are already finite, the patch radius for these points is given by existing_value_radius. \n    Note that the fill computation is only performed if the fill_mask is valid for that point.  \n\n        name: median\n        type: gridMapFilters/MedianFillFilter\n        params:\n          input_layer: input\n          output_layer: output\n          fill_hole_radius: 0.11 # in m. \n          filter_existing_values: false # Default is false. If enabled it also does a median computation for existing values. \n          existing_value_radius: 0.2 # in m. Note that this option only has an effect if filter_existing_values is set true. \n          fill_mask_layer: fill_mask # A layer that is used to compute which areas to fill. If not present in the input it is automatically computed. \n          debug: false # If enabled, the additional debug_infill_mask_layer is published. \n          debug_infill_mask_layer: infill_mask # Layer used to visualize the intermediate, sparse-outlier removed fill mask. Only published if debug is enabled.\n    \n* **`gridMapFilters/NormalVectorsFilter`**\n\n    Compute the normal vectors of a layer in a map.\n\n        name: surface_normals\n        type: gridMapFilters/NormalVectorsFilter\n        params:\n          input_layer: input\n          output_layers_prefix: normal_vectors_\n          radius: 0.05\n          normal_vector_positive_axis: z\n\n* **`gridMapFilters/NormalColorMapFilter`**\n\n    Compute a new color layer based on normal vectors layers.\n\n        name: surface_normals\n        type: gridMapFilters/NormalColorMapFilter\n        params:\n          input_layers_prefix: normal_vectors_\n          output_layer: normal_color\n\n* **`gridMapFilters/MathExpressionFilter`**\n\n    Parse and evaluate a mathematical matrix expression with layers of a grid map. See [EigenLab] for the documentation of the expressions.\n\n        name: math_expression\n        type: gridMapFilters/MathExpressionFilter\n        params:\n          output_layer: output\n          expression: acos(normal_vectors_z) # Slope.\n          # expression: abs(elevation - elevation_smooth) # Surface roughness.\n          # expression: 0.5 * (1.0 - (slope / 0.6)) + 0.5 * (1.0 - (roughness / 0.1)) # Weighted and normalized sum.\n\n* **`gridMapFilters/SlidingWindowMathExpressionFilter`**\n\n    Parse and evaluate a mathematical matrix expression within a sliding window on a layer of a grid map. See [EigenLab] for the documentation of the expressions.\n\n        name: math_expression\n        type: gridMapFilters/SlidingWindowMathExpressionFilter\n        params:\n          input_layer: input\n          output_layer: output\n          expression: meanOfFinites(input) # Box blur\n          # expression: sqrt(sumOfFinites(square(input - meanOfFinites(input))) ./ numberOfFinites(input)) # Standard deviation\n          # expression: 'sumOfFinites([0,-1,0;-1,5,-1;0,-1,0].*elevation_inpainted)' # Sharpen with kernel matrix\n          compute_empty_cells: true\n          edge_handling: crop # options: inside, crop, empty, mean\n          window_size: 5 # in number of cells (optional, default: 3), make sure to make this compatible with the kernel matrix\n          # window_length: 0.05 # instead of window_size, in m\n\n* **`gridMapFilters/DuplicationFilter`**\n\n    Duplicate a layer of a grid map.\n\n        name: duplicate\n        type: gridMapFilters/DuplicationFilter\n        params:\n          input_layer: input\n          output_layer: output\n\n* **`gridMapFilters/DeletionFilter`**\n\n    Delete layers from a grid map.\n\n        name: delete\n        type: gridMapFilters/DeletionFilter\n        params:\n          layers: [color, score] # List of layers.\n\nAdditionally, the *grid_map_cv* package provides the following filters:\n\n* **`gridMapCv/InpaintFilter`**\n\n    Use OpenCV to inpaint/fill holes in a layer.\n\n        name: inpaint\n        type: gridMapCv/InpaintFilter\n        params:\n          input_layer: input\n          output_layer: output\n          radius: 0.05 # in m\n\n\n## Build Status\n\n### Devel Job Status\n\n| | Kinetic | Melodic | Noetic |\n| --- | --- | --- | --- | \n| grid_map | [![Build Status](http://build.ros.org/buildStatus/icon?job=Kdev__grid_map__ubuntu_xenial_amd64)](http://build.ros.org/job/Kdev__grid_map__ubuntu_xenial_amd64/) | [![Build Status](http://build.ros.org/buildStatus/icon?job=Mdev__grid_map__ubuntu_bionic_amd64)](http://build.ros.org/job/Mdev__grid_map__ubuntu_bionic_amd64/) | [![Build Status](http://build.ros.org/buildStatus/icon?job=Mdev__grid_map__ubuntu_focal_armhf__binary)](http://build.ros.org/job/Mdev__grid_map__ubuntu_focal_armhf__binary/) | \n| doc | [![Build Status](http://build.ros.org/buildStatus/icon?job=Kdoc__grid_map__ubuntu_xenial_amd64)](http://build.ros.org/job/Kdoc__grid_map__ubuntu_xenial_amd64/) | [![Build Status](http://build.ros.org/buildStatus/icon?job=Mdoc__grid_map__ubuntu_bionic_amd64)](http://build.ros.org/job/Mdoc__grid_map__ubuntu_bionic_amd64/) | [![Build Status](http://build.ros.org/buildStatus/icon?job=Mdoc__grid_map__ubuntu_focal_armhf__binary)](http://build.ros.org/job/Mdoc__grid_map__ubuntu_focal_armhf__binary/) |\n\n### Release Job Status\n\n| | Kinetic | Melodic | Noetic | \n| --- | --- | --- | --- |\n| grid_map | [![Build Status](http://build.ros.org/buildStatus/icon?job=Kbin_uX64__grid_map__ubuntu_xenial_amd64__binary)](http://build.ros.org/job/Kbin_uX64__grid_map__ubuntu_xenial_amd64__binary/) |  [![Build Status](http://build.ros.org/buildStatus/icon?job=Mbin_uB64__grid_map__ubuntu_bionic_amd64__binary)](http://build.ros.org/job/Mbin_uB64__grid_map__ubuntu_bionic_amd64__binary/) | [![Build Status](http://build.ros.org/buildStatus/icon?job=Nbin_ufhf_uFhf__grid_map__ubuntu_focal_armhf__binary)](http://build.ros.org/job/Nbin_ufhf_uFhf__grid_map__ubuntu_focal_armhf__binary/) |\n| grid_map_core |  [![Build Status](http://build.ros.org/buildStatus/icon?job=Kbin_uX64__grid_map_core__ubuntu_xenial_amd64__binary)](http://build.ros.org/job/Kbin_uX64__grid_map_core__ubuntu_xenial_amd64__binary/) | [![Build Status](http://build.ros.org/buildStatus/icon?job=Mbin_uB64__grid_map_core__ubuntu_bionic_amd64__binary)](http://build.ros.org/job/Mbin_uB64__grid_map_core__ubuntu_bionic_amd64__binary/) | [![Build Status](http://build.ros.org/buildStatus/icon?job=Nbin_ufhf_uFhf__grid_map_core__ubuntu_focal_armhf__binary)](http://build.ros.org/job/Nbin_ufhf_uFhf__grid_map_core__ubuntu_focal_armhf__binary/) |\n| grid_map_costmap_2d |  [![Build Status](http://build.ros.org/buildStatus/icon?job=Kbin_uX64__grid_map_costmap_2d__ubuntu_xenial_amd64__binary)](http://build.ros.org/job/Kbin_uX64__grid_map_costmap_2d__ubuntu_xenial_amd64__binary/) |  [![Build Status](http://build.ros.org/buildStatus/icon?job=Mbin_uB64__grid_map_costmap_2d__ubuntu_bionic_amd64__binary)](http://build.ros.org/job/Mbin_uB64__grid_map_costmap_2d__ubuntu_bionic_amd64__binary/) | [![Build Status](http://build.ros.org/buildStatus/icon?job=Nbin_ufhf_uFhf__grid_map_costmap_2d__ubuntu_focal_armhf__binary)](http://build.ros.org/job/Nbin_ufhf_uFhf__grid_map_costmap_2d__ubuntu_focal_armhf__binary/) |\n| grid_map_cv |  [![Build Status](http://build.ros.org/buildStatus/icon?job=Kbin_uX64__grid_map_cv__ubuntu_xenial_amd64__binary)](http://build.ros.org/job/Kbin_uX64__grid_map_cv__ubuntu_xenial_amd64__binary/) | [![Build Status](http://build.ros.org/buildStatus/icon?job=Mbin_uB64__grid_map_cv__ubuntu_bionic_amd64__binary)](http://build.ros.org/job/Mbin_uB64__grid_map_cv__ubuntu_bionic_amd64__binary/) | [![Build Status](http://build.ros.org/buildStatus/icon?job=Nbin_ufhf_uFhf__grid_map_cv__ubuntu_focal_armhf__binary)](http://build.ros.org/job/Nbin_ufhf_uFhf__grid_map_cv__ubuntu_focal_armhf__binary/) |\n| grid_map_demos | [![Build Status](http://build.ros.org/buildStatus/icon?job=Kbin_uX64__grid_map_demos__ubuntu_xenial_amd64__binary)](http://build.ros.org/job/Kbin_uX64__grid_map_demos__ubuntu_xenial_amd64__binary/) | [![Build Status](http://build.ros.org/buildStatus/icon?job=Mbin_uB64__grid_map_demos__ubuntu_bionic_amd64__binary)](http://build.ros.org/job/Mbin_uB64__grid_map_demos__ubuntu_bionic_amd64__binary/) | [![Build Status](http://build.ros.org/buildStatus/icon?job=Nbin_ufhf_uFhf__grid_map_demos__ubuntu_focal_armhf__binary)](http://build.ros.org/job/Nbin_ufhf_uFhf__grid_map_demos__ubuntu_focal_armhf__binary/) |\n| grid_map_filters | [![Build Status](http://build.ros.org/buildStatus/icon?job=Kbin_uX64__grid_map_filters__ubuntu_xenial_amd64__binary)](http://build.ros.org/job/Kbin_uX64__grid_map_filters__ubuntu_xenial_amd64__binary/) | [![Build Status](http://build.ros.org/buildStatus/icon?job=Mbin_uB64__grid_map_filters__ubuntu_bionic_amd64__binary)](http://build.ros.org/job/Mbin_uB64__grid_map_filters__ubuntu_bionic_amd64__binary/) | [![Build Status](http://build.ros.org/buildStatus/icon?job=Nbin_ufhf_uFhf__grid_map_filters__ubuntu_focal_armhf__binary)](http://build.ros.org/job/Nbin_ufhf_uFhf__grid_map_filters__ubuntu_focal_armhf__binary/) |\n| grid_map_loader | [![Build Status](http://build.ros.org/buildStatus/icon?job=Kbin_uX64__grid_map_loader__ubuntu_xenial_amd64__binary)](http://build.ros.org/job/Kbin_uX64__grid_map_loader__ubuntu_xenial_amd64__binary/) | [![Build Status](http://build.ros.org/buildStatus/icon?job=Mbin_uB64__grid_map_loader__ubuntu_bionic_amd64__binary)](http://build.ros.org/job/Mbin_uB64__grid_map_loader__ubuntu_bionic_amd64__binary/) | [![Build Status](http://build.ros.org/buildStatus/icon?job=Nbin_ufhf_uFhf__grid_map_loader__ubuntu_focal_armhf__binary)](http://build.ros.org/job/Nbin_ufhf_uFhf__grid_map_loader__ubuntu_focal_armhf__binary/) |\n| grid_map_msgs | [![Build Status](http://build.ros.org/buildStatus/icon?job=Kbin_uX64__grid_map_msgs__ubuntu_xenial_amd64__binary)](http://build.ros.org/job/Kbin_uX64__grid_map_msgs__ubuntu_xenial_amd64__binary/) | [![Build Status](http://build.ros.org/buildStatus/icon?job=Mbin_uB64__grid_map_msgs__ubuntu_bionic_amd64__binary)](http://build.ros.org/job/Mbin_uB64__grid_map_msgs__ubuntu_bionic_amd64__binary/) | [![Build Status](http://build.ros.org/buildStatus/icon?job=Nbin_ufhf_uFhf__grid_map_msgs__ubuntu_focal_armhf__binary)](http://build.ros.org/job/Nbin_ufhf_uFhf__grid_map_msgs__ubuntu_focal_armhf__binary/) |\n| grid_map_octomap | [![Build Status](http://build.ros.org/buildStatus/icon?job=Kbin_uX64__grid_map_octomap__ubuntu_xenial_amd64__binary)](http://build.ros.org/job/Kbin_uX64__grid_map_octomap__ubuntu_xenial_amd64__binary/) | [![Build Status](http://build.ros.org/buildStatus/icon?job=Mbin_uB64__grid_map_octomap__ubuntu_bionic_amd64__binary)](http://build.ros.org/job/Mbin_uB64__grid_map_octomap__ubuntu_bionic_amd64__binary/) | [![Build Status](http://build.ros.org/buildStatus/icon?job=Nbin_ufhf_uFhf__grid_map_octomap__ubuntu_focal_armhf__binary)](http://build.ros.org/job/Nbin_ufhf_uFhf__grid_map_octomap__ubuntu_focal_armhf__binary/) |\n| grid_map_pcl | [![Build Status](http://build.ros.org/buildStatus/icon?job=Kbin_uX64__grid_map_pcl__ubuntu_xenial_amd64__binary)](http://build.ros.org/job/Kbin_uX64__grid_map_pcl__ubuntu_xenial_amd64__binary/) | [![Build Status](http://build.ros.org/buildStatus/icon?job=Mbin_uB64__grid_map_pcl__ubuntu_bionic_amd64__binary)](http://build.ros.org/job/Mbin_uB64__grid_map_pcl__ubuntu_bionic_amd64__binary/) | [![Build Status](http://build.ros.org/buildStatus/icon?job=Nbin_ufhf_uFhf__grid_map_pcl__ubuntu_focal_armhf__binary)](http://build.ros.org/job/Nbin_ufhf_uFhf__grid_map_pcl__ubuntu_focal_armhf__binary/) |\n| grid_map_ros | [![Build Status](http://build.ros.org/buildStatus/icon?job=Kbin_uX64__grid_map_ros__ubuntu_xenial_amd64__binary)](http://build.ros.org/job/Kbin_uX64__grid_map_ros__ubuntu_xenial_amd64__binary/) | [![Build Status](http://build.ros.org/buildStatus/icon?job=Mbin_uB64__grid_map_ros__ubuntu_bionic_amd64__binary)](http://build.ros.org/job/Mbin_uB64__grid_map_ros__ubuntu_bionic_amd64__binary/) | [![Build Status](http://build.ros.org/buildStatus/icon?job=Nbin_ufhf_uFhf__grid_map_ros__ubuntu_focal_armhf__binary)](http://build.ros.org/job/Nbin_ufhf_uFhf__grid_map_ros__ubuntu_focal_armhf__binary/) |\n| grid_map_rviz_plugin | [![Build Status](http://build.ros.org/buildStatus/icon?job=Kbin_uX64__grid_map_rviz_plugin__ubuntu_xenial_amd64__binary)](http://build.ros.org/job/Kbin_uX64__grid_map_rviz_plugin__ubuntu_xenial_amd64__binary/) |  [![Build Status](http://build.ros.org/buildStatus/icon?job=Mbin_uB64__grid_map_rviz_plugin__ubuntu_bionic_amd64__binary)](http://build.ros.org/job/Mbin_uB64__grid_map_rviz_plugin__ubuntu_bionic_amd64__binary/) | [![Build Status](http://build.ros.org/buildStatus/icon?job=Nbin_ufhf_uFhf__grid_map_rviz_plugin__ubuntu_focal_armhf__binary)](http://build.ros.org/job/Nbin_ufhf_uFhf__grid_map_rviz_plugin__ubuntu_focal_armhf__binary/) |\n| grid_map_sdf | [![Build Status](http://build.ros.org/buildStatus/icon?job=Kbin_uX64__grid_map_sdf__ubuntu_xenial_amd64__binary)](http://build.ros.org/job/Kbin_uX64__grid_map_sdf__ubuntu_xenial_amd64__binary/) | [![Build Status](http://build.ros.org/buildStatus/icon?job=Mbin_uB64__grid_map_sdf__ubuntu_bionic_amd64__binary)](http://build.ros.org/job/Mbin_uB64__grid_map_sdf__ubuntu_bionic_amd64__binary/) | [![Build Status](http://build.ros.org/buildStatus/icon?job=Nbin_ufhf_uFhf__grid_map_sdf__ubuntu_focal_armhf__binary)](http://build.ros.org/job/Nbin_ufhf_uFhf__grid_map_sdf__ubuntu_focal_armhf__binary/) |\n| grid_map_visualization | [![Build Status](http://build.ros.org/buildStatus/icon?job=Kbin_uX64__grid_map_visualization__ubuntu_xenial_amd64__binary)](http://build.ros.org/job/Kbin_uX64__grid_map_visualization__ubuntu_xenial_amd64__binary/) | [![Build Status](http://build.ros.org/buildStatus/icon?job=Mbin_uB64__grid_map_visualization__ubuntu_bionic_amd64__binary)](http://build.ros.org/job/Mbin_uB64__grid_map_visualization__ubuntu_bionic_amd64__binary/) | [![Build Status](http://build.ros.org/buildStatus/icon?job=Nbin_ufhf_uFhf__grid_map_visualization__ubuntu_focal_armhf__binary)](http://build.ros.org/job/Nbin_ufhf_uFhf__grid_map_visualization__ubuntu_focal_armhf__binary/) |\n\n\n\n\n## Bugs & Feature Requests\n\nPlease report bugs and request features using the [Issue Tracker](https://github.com/anybotics/grid_map/issues).\n\n[ROS]: http://www.ros.org\n[RViz]: http://wiki.ros.org/rviz\n[Eigen]: http://eigen.tuxfamily.org\n[OpenCV]: http://opencv.org/\n[OctoMap]: https://octomap.github.io/\n[PCL]: http://pointclouds.org/\n[costmap_2d]: http://wiki.ros.org/costmap_2d\n[grid_map_msgs/GridMapInfo]: http://docs.ros.org/api/grid_map_msgs/html/msg/GridMapInfo.html\n[grid_map_msgs/GridMap]: http://docs.ros.org/api/grid_map_msgs/html/msg/GridMap.html\n[grid_map_msgs/GetGridMap]: http://docs.ros.org/api/grid_map_msgs/html/srv/GetGridMap.html\n[sensor_msgs/PointCloud2]: http://docs.ros.org/api/sensor_msgs/html/msg/PointCloud2.html\n[visualization_msgs/Marker]: http://docs.ros.org/api/visualization_msgs/html/msg/Marker.html\n[geometry_msgs/PolygonStamped]: http://docs.ros.org/api/geometry_msgs/html/msg/PolygonStamped.html\n[nav_msgs/OccupancyGrid]: http://docs.ros.org/api/nav_msgs/html/msg/OccupancyGrid.html\n[nav_msgs/GridCells]: http://docs.ros.org/api/nav_msgs/html/msg/GridCells.html\n[ROS Filters]: http://wiki.ros.org/filters\n[EigenLab]: https://github.com/leggedrobotics/EigenLab\n"
        },
        {
          "name": "grid_map",
          "type": "tree",
          "content": null
        },
        {
          "name": "grid_map_core",
          "type": "tree",
          "content": null
        },
        {
          "name": "grid_map_costmap_2d",
          "type": "tree",
          "content": null
        },
        {
          "name": "grid_map_cv",
          "type": "tree",
          "content": null
        },
        {
          "name": "grid_map_demos",
          "type": "tree",
          "content": null
        },
        {
          "name": "grid_map_filters",
          "type": "tree",
          "content": null
        },
        {
          "name": "grid_map_loader",
          "type": "tree",
          "content": null
        },
        {
          "name": "grid_map_msgs",
          "type": "tree",
          "content": null
        },
        {
          "name": "grid_map_octomap",
          "type": "tree",
          "content": null
        },
        {
          "name": "grid_map_pcl",
          "type": "tree",
          "content": null
        },
        {
          "name": "grid_map_ros",
          "type": "tree",
          "content": null
        },
        {
          "name": "grid_map_rviz_plugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "grid_map_sdf",
          "type": "tree",
          "content": null
        },
        {
          "name": "grid_map_visualization",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}