{
  "metadata": {
    "timestamp": 1736565767602,
    "page": 695,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tidalcycles/Tidal",
      "stars": 2309,
      "defaultBranch": "dev",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3310546875,
          "content": "# -*- mode: gitignore; -*-\n\n.cabal-sandbox\ncabal.sandbox.config\ndist\ndist-newstyle\ncabal\n*.o\n*.hi\n*.dyn_hi\n*.dyn_o\n.stack-work\n.DS_Store\n.ghc.environment.*\nout/\n.idea/\n*.lock\n*.iml\n*.swp\n.vscode/\n\n# text editor temp files\n*~\n\\#*\\#\n.\\#*\n\n# Allow flake.lock for reproducible builds\n!flake.lock\n# Ignore nix generated `result` symlink\nresult\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": ".hlint.yaml",
          "type": "blob",
          "size": 3.2119140625,
          "content": "# HLint configuration file\n# https://github.com/ndmitchell/hlint\n##########################\n\n# This file contains a template configuration file, which is typically\n# placed as .hlint.yaml in the root of your project\n\n\n# Warnings currently triggered by your code\n# - ignore: {name: \"Redundant bracket\"}\n# - ignore: {name: \"Move brackets to avoid $\"}\n- ignore: {name: \"Eta reduce\"}\n# - ignore: {name: \"Avoid lambda\"}\n# - ignore: {name: \"Redundant $\"}\n# - ignore: {name: \"Avoid lambda using `infix`\"}\n# - ignore: {name: \"Unused LANGUAGE pragma\"}\n# - ignore: {name: \"Use negate\"}\n# - ignore: {name: \"Fuse foldr/map\"}\n- ignore: {name: \"Use head\"}\n# - ignore: {name: \"Redundant do\"}\n- ignore: {name: \"Parse error\"}\n- ignore: {name: \"Use camelCase\"}\n- ignore: {name: \"Use <$>\"}\n- ignore: {name: \"Use &&\"}\n# - ignore: {name: \"Use list literal pattern\"}\n# - ignore: {name: \"Use list literal\"}\n# - ignore: {name: \"Use concatMap\"}\n# - ignore: {name: \"Use mapMaybe\"}\n# - ignore: {name: \"Use all\"}\n# - ignore: {name: \"Use uncurry\"}\n# - ignore: {name: \"Use any\"}\n# - ignore: {name: \"Use unwords\"}\n# - ignore: {name: \"Reduce duplication\"}\n# - ignore: {name: \"Use infix\"}\n- ignore: {name: \"Evaluate\"}\n# - ignore: {name: \"Use sortOn\"}\n# - ignore: {name: \"Fuse concatMap/map\"}\n# - ignore: {name: \"Functor law\"}\n- ignore: {name: \"Use <$\"}\n# - ignore: {name: \"Use zipWith\"}\n# - ignore: {name: \"Redundant id\"}\n# - ignore: {name: \"Use const\"}\n# - ignore: {name: \"Use map once\"}\n# - ignore: {name: \"Use minimum\"}\n# - ignore: {name: \"Use print\"}\n# - ignore: {name: \"Use newtype instead of data\"}\n# - ignore: {name: \"Use String\"}\n# - ignore: {name: \"Redundant ==\"}\n# - ignore: {name: \"Use LANGUAGE pragmas\"}\n# - ignore: {name: \"Use ||\"}\n# - ignore: {name: \"Use if\"}\n\n\n# Specify additional command line arguments\n#\n# - arguments: [--color, --cpp-simple, -XQuasiQuotes]\n\n\n# Control which extensions/flags/modules/functions can be used\n#\n# - extensions:\n#   - default: false # all extension are banned by default\n#   - name: [PatternGuards, ViewPatterns] # only these listed extensions can be used\n#   - {name: CPP, within: CrossPlatform} # CPP can only be used in a given module\n#\n# - flags:\n#   - {name: -w, within: []} # -w is allowed nowhere\n#\n# - modules:\n#   - {name: [Data.Set, Data.HashSet], as: Set} # if you import Data.Set qualified, it must be as 'Set'\n#   - {name: Control.Arrow, within: []} # Certain modules are banned entirely\n#\n# - functions:\n#   - {name: unsafePerformIO, within: []} # unsafePerformIO can only appear in no modules\n\n\n# Add custom hints for this project\n#\n# Will suggest replacing \"wibbleMany [myvar]\" with \"wibbleOne myvar\"\n# - error: {lhs: \"wibbleMany [x]\", rhs: wibbleOne x}\n\n\n# Turn on hints that are off by default\n#\n# Ban \"module X(module X) where\", to require a real export list\n# - warn: {name: Use explicit module export list}\n#\n# Replace a $ b $ c with a . b $ c\n# - group: {name: dollar, enabled: true}\n#\n# Generalise map to fmap, ++ to <>\n# - group: {name: generalise, enabled: true}\n\n\n# Ignore some builtin hints\n# - ignore: {name: Use let}\n# - ignore: {name: Use const, within: SpecialModule} # Only within certain modules\n\n\n# Define some custom infix operators\n# - fixity: infixr 3 ~^#^~\n\n\n# To generate a suitable file for HLint do:\n# $ hlint --default > .hlint.yaml\n"
        },
        {
          "name": "BootTidal.hs",
          "type": "blob",
          "size": 2.048828125,
          "content": ":set -fno-warn-orphans\n:set -XMultiParamTypeClasses\n:set -XOverloadedStrings\n:set prompt \"\"\n\n-- Import all the boot functions and aliases.\nimport Sound.Tidal.Boot\n\ndefault (Pattern String, Integer, Double)\n\n-- Create a Tidal Stream with the default settings.\n-- Use 'mkTidalWith' to customize these settings.\ntidalInst <- mkTidal\n\n-- This orphan instance makes the boot aliases work!\n-- It has to go after you define 'tidalInst'.\ninstance Tidally where tidal = tidalInst\n\n-- You can add your own aliases in this file. Here are some examples:\n-- :{\n-- let xfade i = transition tidal True (Sound.Tidal.Transition.xfadeIn 4) i\n--     xfadeIn i t = transition tidal True (Sound.Tidal.Transition.xfadeIn t) i\n--     histpan i t = transition tidal True (Sound.Tidal.Transition.histpan t) i\n--     wait i t = transition tidal True (Sound.Tidal.Transition.wait t) i\n--     waitT i f t = transition tidal True (Sound.Tidal.Transition.waitT f t) i\n--     jump i = transition tidal True (Sound.Tidal.Transition.jump) i\n--     jumpIn i t = transition tidal True (Sound.Tidal.Transition.jumpIn t) i\n--     jumpIn' i t = transition tidal True (Sound.Tidal.Transition.jumpIn' t) i\n--     jumpMod i t = transition tidal True (Sound.Tidal.Transition.jumpMod t) i\n--     jumpMod' i t p = transition tidal True (Sound.Tidal.Transition.jumpMod' t p) i\n--     mortal i lifespan release = transition tidal True (Sound.Tidal.Transition.mortal lifespan release) i\n--     interpolate i = transition tidal True (Sound.Tidal.Transition.interpolate) i\n--     interpolateIn i t = transition tidal True (Sound.Tidal.Transition.interpolateIn t) i\n--     clutch i = transition tidal True (Sound.Tidal.Transition.clutch) i\n--     clutchIn i t = transition tidal True (Sound.Tidal.Transition.clutchIn t) i\n--     anticipate i = transition tidal True (Sound.Tidal.Transition.anticipate) i\n--     anticipateIn i t = transition tidal True (Sound.Tidal.Transition.anticipateIn t) i\n--     forId i t = transition tidal False (Sound.Tidal.Transition.mortalOverlay t) i\n-- :}\n\n:set -fwarn-orphans\n:set prompt \"tidal> \"\n:set prompt-cont \"\"\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 26.9453125,
          "content": "# TidalCycles log of changes\n\n## 1.9.5 - Sashiko\n\n## What's Changed\n* avoid loading stream module in other modules, so hint wont crash by @polymorphicengine in https://github.com/tidalcycles/Tidal/pull/1019\n* change streamGetnow to factor in the processAhead and also destroy the sessionstate by @polymorphicengine in https://github.com/tidalcycles/Tidal/pull/1025\n* fix minor7sharp9 chord (the 9th wasn't sharp) by @cleary in https://github.com/tidalcycles/Tidal/pull/1036\n* add metatune param, now against 1.9-dev by @ahihi in https://github.com/tidalcycles/Tidal/pull/1046\n* Build fixes for Tidal 1.9 by @mindofmatthew in https://github.com/tidalcycles/Tidal/pull/1052\n* Update link 1.9 dev by @yaxu in https://github.com/tidalcycles/Tidal/pull/1058\n* More build fixes by @mindofmatthew in https://github.com/tidalcycles/Tidal/pull/1062\n* Consolidate site docs into source docs, and some docs editing by @trespaul in https://github.com/tidalcycles/Tidal/pull/1070\n* Fix negative numbers not working for boolean euclids  by @geikha in https://github.com/tidalcycles/Tidal/pull/1063\n\n## New Contributors\n* @ahihi made their first contribution in https://github.com/tidalcycles/Tidal/pull/1046\n* @trespaul made their first contribution in https://github.com/tidalcycles/Tidal/pull/1070\n* @geikha made their first contribution in https://github.com/tidalcycles/Tidal/pull/1063\n\n**Full Changelog**: https://github.com/tidalcycles/Tidal/compare/v1.9.4...v1.9.5\n\n## 1.9.4 - Stitch\n\n### What's Changed\n* fix #986 by @jwaldmann in https://github.com/tidalcycles/Tidal/pull/987\n* fix #988 by @jwaldmann in https://github.com/tidalcycles/Tidal/pull/989\n* Tidal listener update and rework by @polymorphicengine in https://github.com/tidalcycles/Tidal/pull/996\n* ci: update GitHub actions by @SpencerIsGiddy in https://github.com/tidalcycles/Tidal/pull/994\n* Fix markup errors in and add to Sound.Tidal.UI documentation. by @patrickt in https://github.com/tidalcycles/Tidal/pull/992\n* reset and restart by @yaxu in https://github.com/tidalcycles/Tidal/pull/997\n* Add extractN and extend getN by @thgrund in https://github.com/tidalcycles/Tidal/pull/999\n\n### New Contributors\n* @SpencerIsGiddy made their first contribution in https://github.com/tidalcycles/Tidal/pull/994\n* @patrickt made their first contribution in https://github.com/tidalcycles/Tidal/pull/992\n\n**Full Changelog**: https://github.com/tidalcycles/Tidal/compare/v1.9.3...v1.9.4\n\n## 1.9.3 - Kolam\n\n### What's Changed\n* fix for squeezejoin  by @yaxu in https://github.com/tidalcycles/Tidal/pull/950\n* tidal.el fix silencer by @zzkt in https://github.com/tidalcycles/Tidal/pull/955\n* add accelerate to nobus and fix typo for begin by @yaxu in https://github.com/tidalcycles/Tidal/pull/956\n* Fix warnings by @Zalastax in https://github.com/tidalcycles/Tidal/pull/962\n* Add a Nix Flake for building and developing Tidal by @mitchmindtree in https://github.com/tidalcycles/Tidal/pull/963\n* Make distrib only take structure from the euclid by @yaxu in https://github.com/tidalcycles/Tidal/pull/961\n* Fix build by @yaxu in https://github.com/tidalcycles/Tidal/pull/965\n* Fix resetCycles skipping and lateness by @Zalastax in https://github.com/tidalcycles/Tidal/pull/966\n* Add setCycle by @Zalastax in https://github.com/tidalcycles/Tidal/pull/969\n* CHANGELOG gardening by @mindofmatthew in https://github.com/tidalcycles/Tidal/pull/971\n* Comments for some state functions by @JeffreyBenjaminBrown in https://github.com/tidalcycles/Tidal/pull/973\n* Comments on time, and haddock fixes by @JeffreyBenjaminBrown in https://github.com/tidalcycles/Tidal/pull/974\n* Fix warning about type constraint by @mindofmatthew in https://github.com/tidalcycles/Tidal/pull/977\n* Fix squeeze join by @yaxu in https://github.com/tidalcycles/Tidal/pull/975\n* `trigger` and friends without pattern IDs by @mindofmatthew in https://github.com/tidalcycles/Tidal/pull/970\n* Rename ghost'' to ghostWith by @Zalastax in https://github.com/tidalcycles/Tidal/pull/967\n* Added minor major seventh chord by @jqueraltmo in https://github.com/tidalcycles/Tidal/pull/978\n* support for hosc-0.20 by @yaxu in https://github.com/tidalcycles/Tidal/pull/981\n\n### New Contributors\n* @mitchmindtree made their first contribution in https://github.com/tidalcycles/Tidal/pull/963\n* @jqueraltmo made their first contribution in https://github.com/tidalcycles/Tidal/pull/978\n\n**Full Changelog**: https://github.com/tidalcycles/Tidal/compare/v1.9.2...v1.9.3\n\n## 1.9.2 - Siteswap c\nSame with 1.9.1, but now with new tidal-link version 1.0.1\n\n## 1.9.1 - Siteswap b\nA quick release to set specific tidal-link version 1.0 in tidal.cabal. Stack\nseems to want this.\n\n## 1.9.0 - Siteswap\n\n### What's Changed\n\n#### General enhancements\n* Rename linux binary name by @ndr-brt in https://github.com/tidalcycles/Tidal/pull/911\n* Fix echo by @ndr-brt in https://github.com/tidalcycles/Tidal/pull/910\n* If first argument of euclid is negative, apply euclidInv by @polymorphicengine in https://github.com/tidalcycles/Tidal/pull/916\n* Add squeeze operators (`||+`, `*||`, etc) by @yaxu in https://github.com/tidalcycles/Tidal/pull/919\n* Make chunk reverse direction with negative number by @ndr-brt in https://github.com/tidalcycles/Tidal/pull/918\n* overhaul of the chord parser by @polymorphicengine in https://github.com/tidalcycles/Tidal/pull/931\n\n#### New ableton link support\n* Use ableton link for scheduling by @Zalastax in https://github.com/tidalcycles/Tidal/pull/898\n* tidal-link: add link source files to extra-source-files, fixes #924 by @yaxu in https://github.com/tidalcycles/Tidal/pull/925\n* Use target latency in all send modes by @Zalastax in https://github.com/tidalcycles/Tidal/pull/927\n* Rename cCyclesPerBeat -> cBeatsPerCycle by @Zalastax in https://github.com/tidalcycles/Tidal/pull/939\n\n#### Emacs plugin updates\n* formatting fixes in tidal.el by @zzkt in https://github.com/tidalcycles/Tidal/pull/932\n* a window-excursion for tidal.el by @zzkt in https://github.com/tidalcycles/Tidal/pull/933\n* autoloads for tidal.el by @zzkt in https://github.com/tidalcycles/Tidal/pull/934\n* avoid race in loading bootscript during restart by @zzkt in https://github.com/tidalcycles/Tidal/pull/937\n\n#### Tidal-parse (estuary) updates\n* Various updates to tidal-parse by @dktr0 in https://github.com/tidalcycles/Tidal/pull/913 and  https://github.com/tidalcycles/Tidal/pull/941\n\n#### Maintenance\n* Increase upper bounds of text dependency by @yaxu in https://github.com/tidalcycles/Tidal/pull/948\n* Use system-cxx-std-lib by @Zalastax in https://github.com/tidalcycles/Tidal/pull/944\n* Use c++ extra library for MacOS by @giuseppelillo in https://github.com/tidalcycles/Tidal/pull/946\n\n### New Contributors\n* @Zalastax made their first contribution in https://github.com/tidalcycles/Tidal/pull/898\n* @zzkt made their first contribution in https://github.com/tidalcycles/Tidal/pull/932\n* @giuseppelillo made their first contribution in https://github.com/tidalcycles/Tidal/pull/946\n\n**Full Changelog**: https://github.com/tidalcycles/Tidal/compare/v1.8.0...v1.9.0\n\n## 1.8.1 - Sanquhar b\n* Removed executable from tidal.cabal file (while latest ghc on windows fails to build it)\n\n## 1.8.0 - Sanquhar\n* move tidal-listener code by @polymorphicengine in #885\n* Fix a typo incurred (I assume) by a filename change. by @JeffreyBenjaminBrown in #886\n* Hide contexts from Events per default by @polymorphicengine in #887\n* Allow sending/receiving of broadcasted OSC control messages by @yaxu in #894\n* tidal-listener: Add minimal install notes by @gamar3is in #895\n* Add rolled function with variants by @thgrund in #820\n* Valuable instance for Note by @yaxu in #899\n* Add parsers for ints and floats that don't consume trailing whitespace by @polymorphicengine in #900\n* Introduce echo and echoWith, deprecate stut and stutWith by @ndr-brt in #904\n* tidal-listener: Optional WITH_GHC environment variable by @mindofmatthew in #903\n\nCommit list: https://github.com/tidalcycles/Tidal/compare/1.7.10...v1.8.0\n\n## 1.7.10 - Tama b\n* Derive RealFrac for Note by @ndr-brt in https://github.com/tidalcycles/Tidal/pull/876\n* Add timescale and timewin control params by @yaxu in https://github.com/tidalcycles/Tidal/pull/878\n* deriving typeclass memberships for ID by @polymorphicengine in https://github.com/tidalcycles/Tidal/pull/879\n* Adds the jumpMod' transition by @th-four in https://github.com/tidalcycles/Tidal/pull/881\n* Import safe-tidal-cli ghci simulator as tidal binary by @yaxu in https://github.com/tidalcycles/Tidal/pull/880\n* Tweaks to tidal binary, and add to linux workflow by @yaxu in https://github.com/tidalcycles/Tidal/pull/882\n* add tidal ghci replacement to macos and windows workflows by @yaxu in https://github.com/tidalcycles/Tidal/pull/883\n\n## 1.7.9 - Tama\n\n### What's Changed\n* Show lists of values by @polymorphicengine in https://github.com/tidalcycles/Tidal/pull/838\n* Port listener wiki content as README by @ndr-brt in https://github.com/tidalcycles/Tidal/pull/851\n* Chords - consistent naming cont'd by @cleary in https://github.com/tidalcycles/Tidal/pull/840\n* Formalise pattern IDs by @mindofmatthew in https://github.com/tidalcycles/Tidal/pull/807\n* Switch to non-blocking pMap updates for transitions by @bgold-cosmos in https://github.com/tidalcycles/Tidal/pull/858\n* Add listener build workflows by @ndr-brt in https://github.com/tidalcycles/Tidal/pull/852\n* Fix tidal-listener install process by @ndr-brt in https://github.com/tidalcycles/Tidal/pull/861\n* Fix mod by @bgold-cosmos in https://github.com/tidalcycles/Tidal/pull/860\n* Fix stack ci using last lts resolver by @ndr-brt in https://github.com/tidalcycles/Tidal/pull/862\n* Make Pattern instance Monoid by @fbous in https://github.com/tidalcycles/Tidal/pull/865\n* Added OSC playback control for silencing individual patterns by @njanssen in https://github.com/tidalcycles/Tidal/pull/863\n* Use better show instances for notes & rationals by @mindofmatthew in https://github.com/tidalcycles/Tidal/pull/857\n* tidal-listener: Separate build from release by @ndr-brt in https://github.com/tidalcycles/Tidal/pull/866\n* Exponential double by @ndr-brt in https://github.com/tidalcycles/Tidal/pull/871\n* Comments by @JeffreyBenjaminBrown in https://github.com/tidalcycles/Tidal/pull/877\n* Fix for classic dirt support by @yaxu https://github.com/tidalcycles/Tidal/commit/15b5b8b91af08ebad39efe2a7e0712b21f606ca4\n* New alias `number` for `n` by @yaxu https://github.com/tidalcycles/Tidal/commit/ac0be63d686ab37f7b2dcd440d4bd8f3898453e8\n* Allow \"0..8\" to be parsed as a range of doubles in mininotation by @yaxu https://github.com/tidalcycles/Tidal/commit/55f8ad9b0091b43fdd364eced25bc9c655d157cc\n* Bugfix for `timeLoop` by @yaxu in https://github.com/tidalcycles/Tidal/commit/29f28ed637a7c17ad2b22558d097a694da604e2d\n* Retire pre ghc 8.4 support by @yaxu \n* Pattern first parameter of `wedge` by @yaxu\n* Allow `|**|` et al to work on control patterns by @yaxu in https://github.com/tidalcycles/Tidal/commit/7142775c2039cae4cde9bdd6f68b3e0cbae2de9d\n* Add alias `timecat` for timeCat` by @yaxu in https://github.com/tidalcycles/Tidal/commit/363889bdc963d9357daf1893d18ab9dfc33ca5ac\n\n### New Contributors\n* @fbous made their first contribution in https://github.com/tidalcycles/Tidal/pull/865\n* @njanssen made their first contribution in https://github.com/tidalcycles/Tidal/pull/863\n* @JeffreyBenjaminBrown made their first contribution in https://github.com/tidalcycles/Tidal/pull/877\n\n**Full Changelog**: https://github.com/tidalcycles/Tidal/compare/1.7.8...1.7.9\n\n## 1.7.8 - Ayatakedai\n* Add pattern id to patterns as _id_, and send it with /code/highlights\n\n## 1.7.7 - Caramel wafer\n* Support hosc 0.19 in test suite @yaxu\n\n## 1.7.6 - Tunnocks\n* Fix dot shorthand in int patterns so floating point numbers raise an error @ndr-brt\n* Support factors in ratio shorthand for rational patterns @ndr-brt\n* support hosc 0.19 @yaxu\n\n## 1.7.5 - Dalbeattie\n* Minor change to _splice so that it respects if the speed parameter was already declared @onthepeakofnormal\n* Some tests for chords @cleary\n* Remove direct semigroups dependency @yaxu\n* Derive functor for pattern @yaxu\n* Handle negative ratio shorthands for rationals @ndr_brt\n* drawLine - draw non-events with periods @yaxu\n* Parse chord without root note @yaxu\n* Fix clock sharing between tidal processes @yaxu\n\n## 1.7.4 - Symonds Yat b\n* Fixes for bipolar waveforms (sine2, etc) @mindofmatthew\n* More playback controls for OSC API @mindofmatthew\n* Disable bus variants for MIDI controls @mindofmatthew\n\n## 1.7.3 - Symonds Yat\n* Signed ratio shorthands now supported @ndr_brt\n* OSC API - mute/unmute stream @mindofmatthew\n* improve performance of playFor/seqP @yaxu\n* Expand tests with autodiscovered laws @RSWilli\n* Add `getState` to BootTidal @mindofmatthew\n* add fadeTime / fadeInTime / fadeOutTime params for grain envelopes @yaxu\n* Fix for nrpnn and nrpnv params @yaxu\n* Disable busses for MIDI parameters @mindofmatthew\n   \n## 1.7.2 - IKLECTIK c\n* tidal-parse additions and improved errors, haskellish dependency fix @dktr0\n* spring cleaning and delinting, recreated Time.hs, renamed ControlMap toValueMAp @yaxu\n* start of [major refactoring of chords](https://club.tidalcycles.org/t/rfc-working-on-making-chord-naming-chordlist-more-consistent/2717/56) @cleary\n* fix `.` mininotation operator @zudov\n* stateful event parameters, for counting @yaxu\n* Move some stuff from BootTidal.hs to the tidal library, to reduce dependencies there @yaxu\n\n## 1.7.1 - IKLECTIK b\n* Fix stack build @yaxu\n* Add tidal_status command @yaxu\n* Add cVerbose config setting (default on) @yaxu\n* Fix for emacs plugin @jwaldmann\n* Snowball bugfix @yaxu\n* Migrate to github actions, tested against additional ghc versions @ndr_brt\n* Fix mininotation bug - allow leading/trailing spaces @ndr_brt\n* Make linger work with negative numbers (to linger on end of cycle rather than start) @yaxu\n* Friendlier startup messages @yaxu\n* Compatibility with ghc 9.0.1 @yaxu\n\n## 1.7 - IKLECTIK\n* Added drum aliases from GM2 percussion spec to `drum` function @lvm\n* `getcps` helper function now in BootTidal.hs @yaxu\n* `getnow` helper function back in BootTidal.hs (returns current cycle) @bgold-cosmos\n* Developments towards tidal api, @yaxu et al\n* `coarse` parameter is now floating point @lwlsn\n* `irand` parameter now patternable @ndr-brt\n* `note` now produces its own type to avoid conflicts between parsing note names and duration shorthands  @ndr-brt\n* Numerous tidal-parse improvements and additions @dktr0 et al\n* `grain` function for combining begin and end (in terms of begin and duration) @khoparzi\n* Added missing pB and pR functions @thgrund\n* Emacs plugin bugfixes @jwaldmann\n* `binaryN` parameters now fully patternable @ndr-brt\n* `press` and `pressBy` functions for syncopation @yaxu\n* `bite`'s first parameter is now patternable @ndr-brt\n* Most SuperDirt control/effect parameters can now be modified while a sound is playing, using 'bus' functions. @telefon + @yaxu\n* Sound.Tidal.Params is now generated by a script in bin/generate-params.hs @yaxu\n* `qtrigger` is now an alias for `ctrigger`, which now quantises to the _next_ cycle (via ceiling) @thgund / @yaxu\n* There is now also `ftrigger` and `rtrigger` for floor (previous) and round (nearest) cycle\n* `whenmod`'s first two parameters are now rationals, and patternable. @th-four / @yaxu\n* `brand` and `brandBy` for continuous patterns of boolean values @yaxu\n* Two-way protocol between Tidal and SuperDirt, initially to receive available busses @telefon / @yaxu\n* bipolar waveforms - sine2, square2, tri2, saw2, cosine2 @yaxu\n  \n\n## 1.6.1 - We are not DJs\n* Patternise first parameter of chunk @lwlsn\n* Patternise fit parameter @bgold-cosmos\n* Increase upper bounds of random @yaxu\n* Switch travis to ubuntu bionic @yaxu\n\n## 1.6.0 - Keep live coding live\n* Rollback to previous pattern on parse error @jwaldmann\n* Increased strictness to catch parse errors earlier @jwaldmann @yaxu\n* Support for superdirt 'panic' @yaxu\n* Increase hosc upper bounds to admin 0.18\n* New function 'splat' @yaxu\n* `quantise` now uses round, add qfloor, qceiling variants and qround alis @lwlsn\n* Add ghc 8.8.3 to travis @jwaldmann\n* Switch `substruct` to use binary pattern @yaxu\n\n## 1.5.2 - Rivelin\n* Fix streamAll\n\n## 1.5.1 - Blacka Moor\n* Bugfix splice\n\n## 1.5.0 - Active travel\n* Export drawLineSz @mxmxyz\n* tidal-parse additions (bite, splice, pickF, select, squeeze; fixed slice) @dktr0\n* New, more efficient pseudorandom number generator @dktr0\n* Pattern first someCyclesBy param @bgold-cosmos\n* Refactored, more flexible OSC targetting @yaxu\n* Simplify tidal-boot-script in tidal.el @jamagin\n* Support state substitution in mininotation #530 @yaxu\n* Pattern first parameter of splice #656 @yaxu\n* Pattern first parameter of chew @yaxu\n* add 'x' fraction alias for 1/6 @yaxu\n* add dfb alias for delayfeedback param, dt for delaytime @yaxu\n* add unmuteAll and only to BootTidal.hs @yaxu\n\n## 1.4.9 - Housebound spirit\n* Simplify 'show'ing of patterns @yaxu\n* New `draw` function for drawing a pattern of single characters as a text-based diagram, with friends `drawLine` and `drawLineSz` for drawing multiple cycles @yaxu\n* Fixes and expansions of ratio aliases - s should be a sixteenth @mxmxyz, w is now 1, f is now 0.2\n* Simplify definition of `accumulate` using scanl @benjwadams\n* The first parameter of `someCyclesBy` is now patternable @bgold-cosmos\n\n## 1.4.8 - Limerick\n* Add ratio shorthand to floating point patterns @yaxu\n* Support fractional scales, add Arabic scales @quakehead\n* Additions to tidal-parse including support from overgain, overshape adn rot @dktr0\n* Move prompt-cont setting to end of BootTidal.hs (older versions of Haskell crash out at this point) @ndr-brt\n\n## 1.4.7 - Bleep\n* Fix BootTidal.hs - make loadable in atom @bgold-cosmos\n* More additions to tidal-parse @dktr0\n\n## 1.4.6 - Megatron\n* Experimental ratio shorthand ref #573 @yaxu\n* Store mininotation source location(s) in events ref #245 @yaxu\n* Add more things to tidal-parse @dktr0 @yaxu\n* Separate out haskell parser from tidal-parse into new hackage module called 'haskellish' @dktr0\n* Support patterning polyrhythmic % steps in mininotation @yaxu\n* Fixes to emacs plugin (tidal.el) @xmacex\n* New parameters for freq, overgain, overshape, and missing midi params including the new nrpn ones @yaxu\n\n## 1.4.5 - Porter Brook\n* Mini notation - `@` (and its alias `_`) now accepts rational relative durations. E.g. `a b@0.5 c d` to make `b` have a half step (that would be the same as `a@2 b c@2 c@d`). This can also be patterned `a b@<0.5 2> c d` @yaxu #435\n* Experimental `reset` function - stick in a pattern so it acts as though the cycle number was reset to 0, from the next cycle @yaxu\n* Bugfix for setR in BootTidal.hs @yaxu\n* Mini notation - `!`, `@` and `_` now work properly within `{}` and `<>`, e.g. `<a b ! c!3 d>` will repeat every 7 cycles @yaxu #369 #248\n* Mini notation - `@` and `_` are now aliases for each other, e.g. `a_3` is the same as `a@3` as are `_` and `@` @yaxu #369\n* Frame skipping on clock jumps now configurable @yaxu #567\n* Sync between tidal instances now works straight away, without having to setcps @yaxu #569\n* New `while` function for applying a function selectively according to a binary pattern @yaxu\n* Lowercases aliases `slowappend` and `fastappend` for `slowAppend` and `fastAppend` respectively @yaxu\n* Many tidal-parse updates @dktr0\n\n## 1.4.4 - Chee Dale\n* wrandcat (weighted randcat) @yaxu\n* MIDI Sysex support #558 @yaxu\n* Elements in an Open Sound Control path address can now be patterned #557\n* 'once' now chooses a random cycle to play. To get the old behaviour of playing the first cycle, use 'first' @yaxu #476\n* Make random choices in mini-notation behave independently @yaxu #560\n* Add [a|b|c] syntax to mini notation for randomly choosing between subsequences @yaxu #555\n* Add power pattern operators |**, **| and |**| @yaxu\n\n## 1.4.3 - Stanage Edge\n* Fix for xfade / xfadein transition\n* New function plyWith\n\n## 1.4.2 - Higger Tor\n* Fix for 'nudge'\n\n## 1.4.1 - Carl Wark\n* improvements to handling of cps changes @yaxu #501\n* fix for parameter patterning in 'range' @yaxu #547\n\n## 1.4.0 - Padley Gorge\n* fix representation to handle continuous and analog events properly @yaxu\n\n## 1.3.0 - rolled back to 1.1.2\n\n## 1.2.0 - Hunters Bar\n* Simplify <* and *>, removing any distinction between analogue and digital patterns\n\n## 1.1.2 - Eccy Road\n* Usability fix for `binary` / `binaryN` (use squeezeJoin on input pattern)\n\n## 1.1.1 - Chelsea Park\n* Usability fixes for `binary` / `binaryN` / `ascii` @yaxu\n\n## 1.1.0 - Brincliffe Edge\n* `binary` and `ascii` functions for playing with bit patterns @yaxu\n* support chord inversions in chord parser @bgold-cosmos\n* skip ticks when system clock jumps @yaxu\n* fix crash bugs in mini notation parser and grp @yaxu\n* new stitch function @yaxu\n* |++, ++| and |++| for combining patterns of strings by concatenation @yaxu\n* send best effort of a sound id to dirt / superdirt if sendParts is on, allowing parameter adjustment of previously triggered sound (without chopping) @yaxu\n* qtrigger - quantise trigger to nearest cycle @yaxu\n* add setI, setF et al to BootTidal.hs for setting state variables @yaxu\n* BootTidal.hs now sends d1 .. d12 to orbits 0 .. 11 respectively @yaxu\n* markov chain support with runMarkov and markovPat @bgold-cosmos\n* simplify / fix mask and sew @yaxu\n* Adjust <* and *> (and therefore |+, +| etc) to be closer to <*>, explanation here: https://penelope.hypotheses.org/1722 @yaxu\n* extract minitidal into its own package tidal-parse (using cabal multipackages), renaming to Sound.Tidal.Parse @yaxu @dktr0\n* benchmarking @nini-faroux\n* minitidal refactor, support for parsing more of tidal, tests @dktr0\n\n## 1.0.14 - IICON\n* 'chew' - like bite, but speeds playback rate up and down\n* variable probability for ? in mini notation\n* chooseBy takes modulo of index to avoid out of bounds errors\n* 'rate' control param\n* Fix dependencies for parsec/colour\n\n## 1.0.13 - 🐝⌛️🦋 #2\n* Simplify espgrid support - @yaxu\n\n## 1.0.12 - 🐝⌛️🦋\n* Fix ESPGrid support - @dktr0\n* Add 'snowball' function - @XiNNiW\n\n## 1.0.11 - Cros Bríde\n2019-04-17  Alex McLean  <alex@slab.org>\n* Add `bite` function for slicing patterns (rather than samples)\n* Tweak tidal.el to attempt to infer location of default BootTidal.hs\n* Skip time (forward or backward) if the reference clock jumps suddenly\n* Fix `fit` - @bgold-cosmos\n* Remove 'asap'\n* Add cB for boolean control input\n* `pickF` for choosing between functions with a pattern of integers\n* `select` for choosing between list of patterns with a floating point pattern\n* `squeeze` for choosing between list of patterns with a pattern of integers, where patterns are squeezed into the integer event duration\n* `splice` for choosing between slices of a pattern, where the slices are squeezed into event duration\n* Ord and Eq instances for value type @bgold-cosmos\n* `trigger` - support for resetting envelopes on evaluation\n* Support for rational event values\n* Tweak how `*>` and `<*` deal with analog patterns\n* Caribiner link bridge support\n\n## 1.0.10 - This machine also kills fascists\n* Add exports to Sound.Tidal.Scales for `getScale` and `scaleTable`\n\n## 1.0.9 - This machine kills fascists\n* sec and msec functions for converting from seconds to cycles (for stut etc) @yaxu\n* template haskell upper bounds @yaxu\n* fix for multi-laptop sync/tempo sharing @yaxu\n* fix toScale so it doesn't break on empty lists @bgold-cosmos\n* `deconstruct` function for displaying patterns stepwise @yaxu\n* `djf` control ready for new superdirt dj filter @yaxu\n* `getScale` for handrolling/adding scales to `scale` function\t* Add `djf` control for upcoming superdirt dj filter @yaxu\n\n## 1.0.8 (trying to get back to doing these)\n**See also https://tidalcycles.org/index.php/Changes_in_Tidal_1.0.x for earlier stuff)**\n* Add 'to', 'toArg' and 'from' controls for new superdirt routing experiments - @telephon\n* Fixes for squeezeJoin (nee unwrap') - @bgold-cosmos\n* Simplify `cycleChoose`, it is now properly discrete (one event per cycle) - @yaxu\n* The return of `<>`, `infix alias for overlay` - @yaxu\n* Fix for `wedge` to allow 0 and 1 as first parameter  - @XiNNiW\n* Support for new spectral fx - @madskjeldgaard\n* Fix for _euclidInv - @dktr0\n* `chordList` for listing chords - @XiNNiW\n* new function `soak` - @XiNNiW\n* tempo fixes - @bgold-cosmos\n* miniTidal developments - @dktr0\n* potentially more efficient euclidean patternings - @dktr0\n* unit tests for euclid - @yaxu\n* fix for `sometimesBy` - @yaxu\n\n## 0.9.10 (and earlier missing versions from this log)\n* arpg, a function to arpeggiate\n* within', an alternate within with a different approach to time, following discussion here https://github.com/tidalcycles/Tidal/issues/313\n* sine et al are now generalised so can be used as double or rational patterns\n* New Sound.Tidal.Simple module with a range of simple transformations (faster, slower, higher, lower, mute, etc)\n* slice upgraded to take a pattern of slice indexes\n* espgrid support\n* lindenmayerI\n* sew function, for binary switching between two patterns\n* somecycles alias for someCycles\n* ply function, for repeating each event in a pattern a given number\n  of times within their original timespan\n* patternify juxBy, e, e', einv, efull, eoff\n\n## 0.9.7\n\n### Enhancements\n* The `note` pattern parameter is no longer an alias for `midinote`,\n  but an independent parameter for supercollider to handle (in a manner\n  similar to `up`)\n  \n## 0.9.6\n\n### Enhancements\n* Added `chord` for chord patterns and `scaleP` for scale patterns\n* The `n` pattern parameter is now floating point\n\n## 0.9.5\n\n### Enhancements\n* Added `hurry` which both speeds up the sound and the pattern by the given amount.\n* Added `stripe` which repeats a pattern a given number of times per\n  cycle, with random but contiguous durations.\n* Added continuous function `cosine`\n* Turned more pattern transformation parameters into patterns - spread', striateX, every', inside, outside, swing\n* Added experimental datatype for Xenakis sieves\n* Correctly parse negative rationals\n* Added `breakUp` that finds events that share the same timespan, and spreads them out during that timespan, so for example (breakUp \"[bd,sn]\") gets turned into the \"bd sn\"\n* Added `fill` which 'fills in' gaps in one pattern with events from another. \n\n## 0.9.4\n\n### Fixes\n* Swapped `-` for `..` in ranges as quick fix for issue with parsing negative numbers\n* Removed overloaded list thingie for now, unsure whether it's worth the dependency\n\n## 0.9.3\n\n### Enhancements\n* The sequence parser can now expand ranges, e.g. `\"0-3 4-2\"` is\n  equivalent to `\"[0 1 2 3] [4 3 2]\"`\n* Sequences can now be described using list syntax, for example `sound [\"bd\", \"sn\"]` is equivalent to `sound \"bd sn\"`. They *aren't* lists though, so you can't for example do `sound ([\"bd\", \"sn\"] ++ [\"arpy\", \"cp\"])` -- but can do `sound (append [\"bd\", \"sn\"]  [\"arpy\", \"cp\"])`\n* New function `linger`, e.g. `linger (1/4)` will only play the first quarter of the given pattern, four times to fill the cycle. \n* `discretise` now takes time value as its first parameter, not a pattern of time, which was causing problems and needs some careful thought.\n* a `rel` alias for the `release` parameter, to match the `att` alias for `attack`\n* `_fast` alias for `_density`\n* The start of automatic testing for a holy bug-free future\n\n### Fixes\n* Fixed bug that was causing events to double up or get lost,\n  e.g. where `rev` was combined with certain other functions.\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 2.84765625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion (or lack of), or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* Trolling, insulting/derogatory comments, and personal attacks\n* Public or private harassment, including unwelcome sexual attention or advances\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account or website, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting a member of the project team. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is inspired by the [Contributor Covenant][homepage], version 1.4.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 6.6552734375,
          "content": "The main website is here: http://tidalcycles.org/\n\n# Community\n\nThe below might help, but to find people to ask questions about\ngetting started, visit the \"innards\" category in the tidalclub forum:\n  https://club.tidalcycles.org/c/innards/11\n\nand/or the tidal-innards channel on the TOPLAP slack:\n  http://chat.toplap.org/\n\n# Tidal\n\nTidal is written in the Haskell language, in particular using the ghc\ncompiler/interpreter. Some resources for learning Haskell can be found here: \n  https://tidalcycles.org/index.php/Haskell_resources\n\n# Quick guide to contributing a change to Tidal\n\nThe main repository is maintained on github:\n  https://github.com/tidalcycles/tidal\n\n**At the time of writing, current work should target the 'dev' branch.**\n\nThe SuperDirt repository is here:\n  https://github.com/musikinformatik/SuperDirt\n\nIn both cases development takes place on the main branch. To make a\ncontribution, you could:\n\n* Fork the repository\n* Make and test a change locally\n* Keep your fork up to date with the main branch\n* Make a pull request\n\nOthers may then review and comment on your pull request. Please do say\nwhen you think it's ready to be accepted to make sure it's not being\noverlooked.\n\nIf any of this is unclear, or if you'd like more information about\ndevelopment workflow, you are very welcome to join the\n`#tidal-innards` channel on http://talk.lurk.org/ and ask questions\nthere.\n\n# Recommendations to handle forks and branches\n\nIn your forked repository: before doing anything,\nmake sure that local files are up to date:\n```\ngit checkout main\ngit fetch upstream\ngit pull upstream main\ngit push\n```\n\nFor this to work, you will have had to have some point registered the upstream repository:\n```\ngit remote add upstream git@github.com:tidalcycles/tidal.git\n```\n\nThen to work on something, create a fresh branch:\n```\ngit checkout -b fix-some-issue\n```\nedit files, test, etc. Finally:\n```\ngit commit -a\ngit push --set-upstream origin fix-some-issue\n```\n\n# Testing\n\nUse `cabal test` to run the test suite to look for regressions. Please\nadd tests for any new functionality. You can look for things that need\ntesting like this:\n\n```\ncabal install --only-dependencies\ncabal configure --enable-coverage    # only need to do this the first time\ncabal test --show-details=streaming\nfirefox dist/hpc/prof/html/tests/hpc_index.html\n```\n\nTo run up your changes locally, install Tidal with `cabal install`. To remove them again and revert to the latest release, run `ghc-pkg unregister tidal-1.0.0` being sure to match up the version numbers. (note that ghc packaging is in a state of flux at the moment - this command might not actually work..)\n\n# Making a Release\n\n*Note: This may be incomplete&mdash;before making a release, it's a good idea to reach out to an existing project maintainer to double-check the process.*\n\nFirst, you'll need to figure out the new version number. Tidal follows the [Haskell Package Versioning Policy](https://pvp.haskell.org/)&mdash;basically, for a given version (e.g. `v1.0.0`), only update the last number if you're releasing a minor, non-breaking change (so a bug fix release might be `v1.0.1`). A major release requires editing the first or second numbers (so a major release that substantially adds or changes functionality might be `v1.1.0`, and a release that rearchitects the fundamentals would be `v2.0.0`). Major releases include those that update dependencies to a new major release. It's also a good idea to do a major release for any bugfixes where performers have started using the \"bug\" for aesthetics.\n\n## Get Permission\nFirst, you need to do the following:\n\n* Make sure that you have been given Owner permissions on the tidalcycles GitHub organization or the Tidal repository\n* If you don't have one, [create a user account on Hackage](https://hackage.haskell.org/users/register-request). You'll also need to send an email to the Hackage Trustees mailing list to get upload permissions (the email you receive when you create your account will have details about this process).\n* Make sure that you've been added to the maintainers group for the tidal package on Hackage\n\n## Create a Draft Release in GitHub\n\n* Draft a [new Tidal release](https://github.com/tidalcycles/Tidal/releases)\n* The name of the release will be the human-readable nickname (some traditional form of pattern making or something else that strikes your fancy)\n* For the tag, you can specify the next version in the form `v0.0.0` and GitHub will automatically tag the most recent commit whenever you publish the release\n* The \"Generate Release Notes\" is an easy way to list all the relevant updates and new contributors. Feel free to edit this further as needed\n* **Save this as a draft for now**\n\n## Update the Repository\n\nPush any final changes to the code, updating the following files:\n* **[tidal.cabal](https://github.com/tidalcycles/Tidal/blob/1.10-dev/tidal.cabal)**: Change the version field\n  * **Outdated Dependencies:** Run `cabal update` then `cabal outdated` to determine whether any of Tidal's dependencies are out of date, then update those as well\n* **[CHANGELOG.md](https://github.com/tidalcycles/Tidal/blob/1.10-dev/CHANGELOG.md)**: Add your new version at the top (you can copy the release notes from your draft GitHub release)\n* **[src/Sound/Tidal/Version.hs](https://github.com/tidalcycles/Tidal/blob/1.10-dev/src/Sound/Tidal/Version.hs)**: Update the version string here too. This is the version that's printed to the console when someone starts Tidal.\n* **If any of the other packages (e.g. tidal-link) have changed**: Update the respective **.cabal** files for these packages, and then update dependency information in **tidal.cabal** as needed.\n\n## Test and Package the Repository\n\n* Run `cabal test` to make sure all the tests pass (see above for details).\n* Run `cabal haddock` and watch for errors to test that Cabal can generate the documentation for the package.\n* Run `cabal check` to check for any errors with the package metadata.\n* Run `cabal sdist` to generate an archive for distribution.\n\n## Upload and Test Releases\n\n* [The Hackage upload page](https://hackage.haskell.org/upload) contains instructions and links for uploading a release archive. **Start by uploading a package candidate because a package release can't be changed!**\n* To distribute a package candidate for testing, find the download link for the `.tar.gz` bundle on the Hackage page for the package candidate. This candidate version can be installed with the following command: `cabal v1-install [url]` (note that at this time, [the v1 install command is necessary for installing a library from a URL](https://github.com/haskell/cabal/issues/8335)).\n* Once everyone is happy with the new version, go ahead and upload the archive as a package release and publish the release on GitHub!\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.283203125,
          "content": "              GNU GENERAL PUBLIC LICENSE\n                Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                     Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n              END OF TERMS AND CONDITIONS\n\n     How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.505859375,
          "content": "\nTidal [![Build Status](https://github.com/tidalcycles/Tidal/workflows/ci/badge.svg)](https://github.com/tidalcycles/Tidal/actions)\n=====\n\nLanguage for live coding algorithmic patterns\n\nFor documentation, mailing list and more info see here:  \n  https://tidalcycles.org/\n\nYou can help speed up Tidal development by contributing to the collective fund here:  \n  https://opencollective.com/tidalcycles\n\n(c) Alex McLean and contributors, 2022\n\nDistributed under the terms of the GNU Public license version 3 (or later).\n\n"
        },
        {
          "name": "Setup.hs",
          "type": "blob",
          "size": 0.044921875,
          "content": "import Distribution.Simple\nmain = defaultMain\n"
        },
        {
          "name": "bench",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "cabal.project",
          "type": "blob",
          "size": 0.0498046875,
          "content": "packages: ./ tidal-parse tidal-listener tidal-link\n"
        },
        {
          "name": "example.tidal",
          "type": "blob",
          "size": 0.1240234375,
          "content": "-- This is an example file you can use to quickly test Tidal editor integration.\n\nd1 $ s \"bd sd bd [~ sd] bd sd bd*3 sd\"\n\nhush\n"
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 1.4443359375,
          "content": "{\n  \"nodes\": {\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1730531603,\n        \"narHash\": \"sha256-Dqg6si5CqIzm87sp57j5nTaeBbWhHFaVyG7V6L8k3lY=\",\n        \"owner\": \"nixos\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"7ffd9ae656aec493492b44d0ddfb28e79a1ea25d\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nixos\",\n        \"ref\": \"nixos-unstable\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"nixpkgs\": \"nixpkgs\",\n        \"utils\": \"utils\"\n      }\n    },\n    \"systems\": {\n      \"locked\": {\n        \"lastModified\": 1681028828,\n        \"narHash\": \"sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=\",\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"rev\": \"da67096a3b9bf56a91d16901293e51ba5b49a27e\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"type\": \"github\"\n      }\n    },\n    \"utils\": {\n      \"inputs\": {\n        \"systems\": \"systems\"\n      },\n      \"locked\": {\n        \"lastModified\": 1687709756,\n        \"narHash\": \"sha256-Y5wKlQSkgEK2weWdOu4J3riRd+kV/VCgHsqLNTTWQ/0=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"dbabf0ca0c0c4bce6ea5eaf65af5cb694d2082c7\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"type\": \"github\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 2.349609375,
          "content": "{\n  description = ''\n    A Nix flake for building and developing Tidal.\n\n    Packages are included for:\n    - tidal\n    - tidal-link\n    - tidal-listener\n    - tidal-parse\n\n    A `tidal-ghci` package is also included. This is a small script that starts\n    an instance of `GHCi` with `Tidal` installed and with the `BootTidal.hs`\n    file passed as the `-ghci-script`.\n\n    Packages can be built with `nix build .#tidal` or ran with `nix run\n    .#tidal-ghci`.\n\n    A `devShell` is included that provides `cabal-install`, `stack` and all\n    other build inputs for the tidal packages above included under a temporary\n    shell. This shell can be entered with `nix develop`.\n  '';\n\n  inputs = {\n    utils.url = \"github:numtide/flake-utils\";\n    nixpkgs.url = \"github:nixos/nixpkgs/nixos-unstable\";\n  };\n\n  outputs = inputs: let\n    utils.supportedSystems = [\n      \"aarch64-linux\"\n      \"i686-linux\"\n      \"x86_64-linux\"\n      \"aarch64-darwin\"\n      \"x86_64-darwin\"\n    ];\n    utils.eachSupportedSystem =\n      inputs.utils.lib.eachSystem utils.supportedSystems;\n\n    mkPackages = pkgs: let\n      project = pkgs.haskellPackages.extend (pkgs.haskell.lib.compose.packageSourceOverrides {\n        tidal = ./.;\n        tidal-link = ./tidal-link;\n        tidal-listener = ./tidal-listener;\n        tidal-parse = ./tidal-parse;\n      });\n      tidal-boot = ./BootTidal.hs;\n      tidal-ghc = pkgs.haskellPackages.ghcWithPackages (hpkgs: [project.tidal]);\n    in {\n      tidal = project.tidal;\n      tidal-link = project.tidal-link;\n      tidal-listener = project.tidal-listener;\n      tidal-parse = project.tidal-parse;\n      tidal-ghci = pkgs.writeShellScriptBin \"tidal-ghci\" ''\n        ${tidal-ghc}/bin/ghci -ghci-script ${tidal-boot}\n      '';\n      default = inputs.self.packages.${pkgs.system}.tidal-ghci;\n    };\n\n    mkDevShells = pkgs: tidalpkgs: {\n      tidal = pkgs.mkShell {\n        inputsFrom = pkgs.lib.attrValues tidalpkgs;\n        buildInputs = [\n          pkgs.cabal-install\n          pkgs.stack\n        ];\n      };\n      default = inputs.self.devShells.${pkgs.system}.tidal;\n    };\n\n    mkOutput = system: let\n      pkgs = inputs.nixpkgs.legacyPackages.${system};\n    in {\n      packages = mkPackages pkgs;\n      devShells = mkDevShells pkgs inputs.self.packages.${system};\n      formatter = pkgs.alejandra;\n    };\n\n    systemOutputs = utils.eachSupportedSystem mkOutput;\n  in\n    systemOutputs;\n}\n"
        },
        {
          "name": "main",
          "type": "tree",
          "content": null
        },
        {
          "name": "old",
          "type": "tree",
          "content": null
        },
        {
          "name": "pd",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "stack.yaml",
          "type": "blob",
          "size": 0.142578125,
          "content": "resolver: lts-22.8\n\npackages:\n  - '.'\n  - 'tidal-parse'\n  - 'tidal-listener'\n  - 'tidal-link'\n\nextra-deps:\n  - hosc-0.20\n  - haskellish-0.3.2.2\n\n\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tidal-link",
          "type": "tree",
          "content": null
        },
        {
          "name": "tidal-listener",
          "type": "tree",
          "content": null
        },
        {
          "name": "tidal-parse",
          "type": "tree",
          "content": null
        },
        {
          "name": "tidal.cabal",
          "type": "blob",
          "size": 4.3603515625,
          "content": "cabal-version:       2.0\n\nname:                tidal\nversion:             1.10.0\nsynopsis:            Pattern language for improvised music\ndescription:         Tidal is a domain specific language for live coding patterns.\nhomepage:            http://tidalcycles.org/\nlicense:             GPL-3\nlicense-file:        LICENSE\nauthor:              Alex McLean\nmaintainer:          Alex McLean <alex@slab.org>, Mike Hodnick <mike.hodnick@gmail.com>\nStability:           Experimental\nCopyright:           (c) Alex McLean and other contributors, 2021\ncategory:            Sound\nbuild-type:          Simple\ntested-with:         GHC == 8.6.5, GHC == 8.8.3, GHC == 8.10.1, GHC == 9.0.1, GHC == 9.4.8, GHC == 9.8.2\ndata-files:          BootTidal.hs\n\nExtra-source-files: README.md CHANGELOG.md tidal.el\n\nlibrary\n  ghc-options: -Wall\n  hs-source-dirs:\n                 src\n\n  default-language:    Haskell2010\n\n  autogen-modules:     Paths_tidal\n\n  Exposed-modules:     Sound.Tidal.Bjorklund\n                       Sound.Tidal.Boot\n                       Sound.Tidal.Chords\n                       Sound.Tidal.Control\n                       Sound.Tidal.Context\n                       Sound.Tidal.Core\n                       Sound.Tidal.ID\n                       Sound.Tidal.Params\n                       Sound.Tidal.ParseBP\n                       Sound.Tidal.Pattern\n                       Sound.Tidal.Scales\n                       Sound.Tidal.Safe.Context\n                       Sound.Tidal.Safe.Boot\n                       Sound.Tidal.Show\n                       Sound.Tidal.Simple\n                       Sound.Tidal.Stepwise\n                       Sound.Tidal.Stream\n                       Sound.Tidal.Stream.Config\n                       Sound.Tidal.Stream.Listen\n                       Sound.Tidal.Stream.Main\n                       Sound.Tidal.Stream.Process\n                       Sound.Tidal.Stream.Target\n                       Sound.Tidal.Stream.Types\n                       Sound.Tidal.Stream.UI\n                       Sound.Tidal.Time\n                       Sound.Tidal.Transition\n                       Sound.Tidal.UI\n                       Sound.Tidal.Utils\n                       Sound.Tidal.Version\n                       Paths_tidal\n  Build-depends:\n      base >=4.8 && <5\n    , containers < 0.8\n    , colour < 2.4\n    , hosc >= 0.21 && < 0.22\n    , text < 2.2\n    , parsec >= 3.1.12 && < 3.2\n    , network < 3.3\n    , transformers >= 0.5 && < 0.7\n    , bytestring < 0.13\n    , clock < 0.9\n    , deepseq >= 1.1.0.0\n    , primitive < 0.10\n    , random < 1.3\n    , exceptions < 0.11\n    , mtl >= 2.2\n    , tidal-link == 1.0.4\n\ntest-suite tests\n  type: exitcode-stdio-1.0\n  main-is: Test.hs\n  hs-source-dirs:\n      test\n  ghc-options: -Wall\n  other-modules: Sound.Tidal.ControlTest\n                 Sound.Tidal.CoreTest\n                 Sound.Tidal.ParamsTest\n                 Sound.Tidal.ParseTest\n                 Sound.Tidal.PatternTest\n                 Sound.Tidal.ScalesTest\n                 Sound.Tidal.ChordsTest\n                 Sound.Tidal.StreamTest\n                 Sound.Tidal.UITest\n                 Sound.Tidal.UtilsTest\n                 Sound.Tidal.ExceptionsTest\n                 TestUtils\n  build-depends:\n                base ==4.*\n              , microspec >= 0.2.0.1\n              , hosc >= 0.21 && < 0.22\n              , containers\n              , parsec\n              , tidal\n              , deepseq\n\n  default-language: Haskell2010\n\n-- not useful for automation since it requires running sclang\ntest-suite dontcrash\n  type: exitcode-stdio-1.0\n  main-is: dontcrash.hs\n  hs-source-dirs: test\n  build-depends: base, tidal\n  default-language:    Haskell2010\n\nbenchmark bench-speed\n  type:             exitcode-stdio-1.0\n  main-is:          Main.hs\n  hs-source-dirs:   bench/Speed\n  other-modules: Tidal.PatternB\n                 Tidal.CoreB\n                 Tidal.UIB\n                 Tidal.Inputs\n  build-depends:\n                base == 4.*\n              , criterion >= 1.6.3.0\n              , tidal\n  ghc-options: -Wall\n\n  default-language: Haskell2010\n\nbenchmark bench-memory\n  type:    exitcode-stdio-1.0\n  main-is: Main.hs\n  hs-source-dirs: bench/Memory\n  other-modules: Tidal.UIB\n                 Tidal.Inputs\n  build-depends:\n               base == 4.*\n             , weigh\n             , tidal\n  ghc-options: -Wall\n\n  default-language: Haskell2010\n\nsource-repository head\n  type:     git\n  location: https://github.com/tidalcycles/Tidal\n"
        },
        {
          "name": "tidal.el",
          "type": "blob",
          "size": 14.1533203125,
          "content": ";;; tidal.el --- Interact with TidalCycles for live coding patterns  -*- lexical-binding: t; -*-\n\n;; Copyright (C) 2012  alex@slab.org\n;; Copyright (C) 2006-2008  rohan drape (hsc3.el)\n\n;; Author: alex@slab.org\n;; Homepage: https://github.com/tidalcycles/Tidal\n;; Version: 0.0.1\n;; Keywords: tools\n;; Package-Requires: ((haskell-mode \"16\") (emacs \"25.1\"))\n\n;; This program is free software; you can redistribute it and/or modify\n;; it under the terms of the GNU General Public License as published by\n;; the Free Software Foundation, either version 3 of the License, or\n;; (at your option) any later version.\n\n;; This program is distributed in the hope that it will be useful,\n;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n;; GNU General Public License for more details.\n\n;; You should have received a copy of the GNU General Public License\n;; along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n;;; Commentary:\n\n;; notes from hsc3:\n;; This mode is implemented as a derivation of `haskell' mode,\n;; indentation and font locking is courtesy that mode.  The\n;; inter-process communication is courtesy `comint'.  The symbol at\n;; point acquisition is courtesy `thingatpt'.  The directory search\n;; facilities are courtesy `find-lisp'.\n\n;;; Code:\n\n(require 'scheme)\n(require 'comint)\n(require 'thingatpt)\n(require 'find-lisp)\n(require 'pulse)\n(require 'haskell-mode)\n(require 'subr-x)\n\n(defvar tidal-buffer\n  \"*tidal*\"\n  \"*The name of the tidal process buffer (default=*tidal*).\")\n\n(defvar tidal-interpreter\n  \"ghci\"\n  \"*The haskell interpeter to use (default=ghci).\")\n\n(defvar tidal-interpreter-version\n  (substring (shell-command-to-string (concat tidal-interpreter \" --numeric-version\")) 0 -1)\n  \"*The version of tidal interpreter as a string.\")\n\n(defvar tidal-interpreter-arguments\n  ()\n  \"*Arguments to the haskell interpreter (default=none).\")\n\n(defvar tidal-boot-script-path\n  (let ((filepath\n         (cond\n          ((string-equal system-type \"windows-nt\")\n           '((\"path\" . \"echo off && for /f %a in ('ghc-pkg latest tidal') do (for /f \\\"tokens=2\\\" %i in ('ghc-pkg describe %a ^| findstr data-dir') do (echo %i))\")\n             (\"separator\" . \"\\\\\")))\n          ((or (string-equal system-type \"darwin\") (string-equal system-type \"gnu/linux\"))\n           '((\"path\" . \"echo -n data-dir: && ghc -e 'import Paths_tidal' -e 'getDataDir>>=putStr' 2>/dev/null\")\n             (\"separator\" . \"/\") )))))\n    (concat\n     (string-trim (cadr (split-string\n                         (shell-command-to-string (cdr (assoc \"path\" filepath))) \":\")))\n     (cdr (assoc \"separator\" filepath))\n     \"BootTidal.hs\"))\n  \"*Full path to BootTidal.hs (inferred by introspecting ghc-pkg package db).\")\n\n(defvar tidal-literate-p\n  t\n  \"*Flag to indicate if we are in literate mode (default=t).\")\n\n(defvar tidal-modules nil\n  \"Additional module imports.  See `tidal-run-region'.\")\n\n(make-variable-buffer-local 'tidal-literate-p)\n\n(defun tidal-unlit (s)\n  \"Remove bird literate markup in S.\"\n  (replace-regexp-in-string \"^> \" \"\" s))\n\n(defun tidal-intersperse (e l)\n  \"Insert E between every element of list L.\"\n  (when l\n    (cons e (cons (car l) (tidal-intersperse e (cdr l))))))\n\n;;;###autoload\n(defun tidal-start-haskell ()\n  \"Start haskell.\"\n  (interactive)\n  (save-window-excursion\n    (if (comint-check-proc tidal-buffer)\n        (when (yes-or-no-p\n               \"A tidal process is already running.  Do you want to restart it? \")\n          (tidal-restart-haskell))\n      (apply\n       'make-comint-in-buffer\n       \"tidal\"\n       tidal-buffer\n       tidal-interpreter\n       nil\n       tidal-interpreter-arguments)\n      (tidal-see-output)\n      (tidal-send-string (concat \":script \" tidal-boot-script-path))))\n  (switch-to-buffer-other-window tidal-buffer))\n\n;;;###autoload\n(defalias 'run-tidal #'tidal-start-haskell\n  \"Start tidal in the haskell interpreter.\")\n\n(defun tidal-see-output ()\n  \"Show haskell output.\"\n  (interactive)\n  (when (comint-check-proc tidal-buffer)\n    (delete-other-windows)\n    (with-current-buffer tidal-buffer\n      (let ((window (display-buffer (current-buffer))))\n        (goto-char (point-max))\n        (save-selected-window\n          (set-window-point window (point-max)))))))\n\n(defun tidal-quit-haskell ()\n  \"Quit haskell.\"\n  (interactive)\n  (kill-buffer tidal-buffer)\n  (delete-other-windows))\n\n(defun tidal-restart-haskell ()\n  \"Restart haskell.\"\n  (interactive)\n  (let ((kill-buffer-query-functions nil))\n    (tidal-quit-haskell))\n  (tidal-start-haskell))\n\n(defun tidal-chunk-string (n s)\n  \"Split a string S into chunks of N characters.\"\n  (let* ((l (length s))\n         (m (min l n))\n         (c (substring s 0 m)))\n    (if (<= l n)\n        (list c)\n      (cons c (tidal-chunk-string n (substring s n))))))\n\n(defun tidal-send-string (s)\n  \"Send string S to tidal.\"\n  (if (comint-check-proc tidal-buffer)\n      (let ((cs (tidal-chunk-string 64 (concat s \"\\n\"))))\n        (mapcar (lambda (c) (comint-send-string tidal-buffer c)) cs))\n    (error \"No tidal process running?\")))\n\n(defun tidal-transform-and-store (f s)\n  \"Transform text into compilable form (Using file F and string S).\"\n  (with-temp-file f\n    (mapc (lambda (module)\n            (insert (concat module \"\\n\")))\n          tidal-modules)\n    (insert \"main = do\\n\")\n    (insert (if tidal-literate-p (tidal-unlit s) s))))\n\n\n(defun tidal-get-now ()\n  \"Store the current cycle position in a tidal variable called `now'.\"\n  (interactive)\n  (tidal-send-string \"now' <- getNow\")\n  (tidal-send-string \"let now = nextSam now'\")\n  (tidal-send-string \"let retrig = (now `rotR`)\")\n  (tidal-send-string \"let fadeOut n = spread' (_degradeBy) (retrig $ slow n $ envL)\")\n  (tidal-send-string \"let fadeIn n = spread' (_degradeBy) (retrig $ slow n $ (1-) <$> envL)\"))\n\n(defun tidal-run-line ()\n  \"Send the current line to the interpreter.\"\n  (interactive)\n  ;;(tidal-get-now)\n  (let* ((s (buffer-substring (line-beginning-position)\n                              (line-end-position)))\n         (s* (if tidal-literate-p\n                 (tidal-unlit s)\n               s)))\n    (tidal-send-string s*))\n  (pulse-momentary-highlight-one-line (point))\n  (forward-line))\n\n(defun tidal-eval-multiple-lines ()\n  \"Eval the current region in the interpreter as a single line.\"\n  ;;(tidal-get-now)\n  (mark-paragraph)\n  (let* ((s (buffer-substring-no-properties (region-beginning)\n                                            (region-end)))\n         (s* (if tidal-literate-p\n                 (tidal-unlit s)\n               s)))\n    (tidal-send-string \":{\")\n    (tidal-send-string s*)\n    (tidal-send-string \":}\")\n    (mark-paragraph)\n    (pulse-momentary-highlight-region (mark) (point))))\n\n(defun tidal-run-multiple-lines ()\n  \"Send the current region to the interpreter as a single line.\"\n  (interactive)\n  (if (>= emacs-major-version 25)\n      (save-mark-and-excursion\n        (tidal-eval-multiple-lines))\n    (save-excursion\n      (tidal-eval-multiple-lines))))\n\n(defmacro tidal-create-runner-run (name)\n  \"Macro to generate `d1' style pattern runners with NAME.\"\n  (let ((run-fname (intern (concat \"tidal-run-\"  name))))\n    `(defun ,run-fname ()\n       ,(format \"Send the %s interpreter as a single line.\" name)\n       (interactive)\n       (goto-char 0)\n       (search-forward ,name nil nil 1)\n       (tidal-run-multiple-lines))))\n\n(defmacro tidal-create-runner-stop (name)\n  \"Macro to generate `d1' style pattern runners with NAME.\"\n  (let ((stop-fname (intern (concat \"tidal-stop-\"  name))))\n    `(defun ,stop-fname ()\n       ,(format \"Send %s $ silence as a single line.\" name)\n       (interactive)\n       (tidal-send-string \":{\")\n       (tidal-send-string (concat \" mapM_ ($ silence) [\" ,name \"]\"))\n       (tidal-send-string \":}\"))))\n\n(defun tidal-create-runner (name)\n  \"Generate `d1' style pattern runners with NAME.\nTwo functions will be created, `tidal-run-NAME' and `tidal-stop-NAME'\"\n  (eval `(tidal-create-runner-run ,name))\n  (eval `(tidal-create-runner-stop ,name)))\n\n;; Generate the functions `tidal-run-d1' and `tidal-stop-d1'\n(tidal-create-runner \"d1\")\n\n;; This generates tidal-run-* and tidal-stop-* functions for d1 to d9.\n(mapc #'tidal-create-runner\n      '(\"d1\" \"d2\" \"d3\" \"d4\" \"d5\" \"d6\" \"d7\" \"d8\" \"d9\"))\n\n(defun tidal-run-region ()\n  \"Place the region in a do block and compile.\"\n  (interactive)\n  (tidal-transform-and-store\n   \"/tmp/tidal.hs\"\n   (buffer-substring-no-properties (region-beginning) (region-end)))\n  (tidal-send-string \":load \\\"/tmp/tidal.hs\\\"\")\n  (tidal-send-string \"main\"))\n\n(defun tidal-load-buffer ()\n  \"Load the current buffer.\"\n  (interactive)\n  (save-buffer)\n  (tidal-send-string (format \":load \\\"%s\\\"\" buffer-file-name)))\n\n(defun tidal-run-main ()\n  \"Run current main.\"\n  (interactive)\n  (tidal-send-string \"main\"))\n\n(defun tidal-interrupt-haskell ()\n  \"Interrupt running process.\"\n  (interactive)\n  (if (comint-check-proc tidal-buffer)\n      (with-current-buffer tidal-buffer\n        (interrupt-process (get-buffer-process (current-buffer))))\n    (error \"No tidal process running?\")))\n\n(defvar tidal-mode-map nil\n  \"Tidal keymap.\")\n\n(defun tidal-mode-keybindings (map)\n  \"Haskell Tidal keybindings MAP.\"\n  (define-key map [?\\C-c ?\\C-s] 'tidal-start-haskell)\n  (define-key map [?\\C-c ?\\C-v] 'tidal-see-output)\n  (define-key map [?\\C-c ?\\C-q] 'tidal-quit-haskell)\n  (define-key map [?\\C-c ?\\C-c] 'tidal-run-line)\n  (define-key map [?\\C-c ?\\C-e] 'tidal-run-multiple-lines)\n  (define-key map (kbd \"<C-return>\") 'tidal-run-multiple-lines)\n  (define-key map [?\\C-c ?\\C-r] 'tidal-run-region)\n  (define-key map [?\\C-c ?\\C-l] 'tidal-load-buffer)\n  (define-key map [?\\C-c ?\\C-i] 'tidal-interrupt-haskell)\n  (define-key map [?\\C-c ?\\C-m] 'tidal-run-main)\n  (define-key map [?\\C-c ?\\C-1] 'tidal-run-d1)\n  (define-key map [?\\C-c ?\\C-2] 'tidal-run-d2)\n  (define-key map [?\\C-c ?\\C-3] 'tidal-run-d3)\n  (define-key map [?\\C-c ?\\C-4] 'tidal-run-d4)\n  (define-key map [?\\C-c ?\\C-5] 'tidal-run-d5)\n  (define-key map [?\\C-c ?\\C-6] 'tidal-run-d6)\n  (define-key map [?\\C-c ?\\C-7] 'tidal-run-d7)\n  (define-key map [?\\C-c ?\\C-8] 'tidal-run-d8)\n  (define-key map [?\\C-c ?\\C-9] 'tidal-run-d9)\n  (define-key map [?\\C-v ?\\C-1] 'tidal-stop-d1)\n  (define-key map [?\\C-v ?\\C-2] 'tidal-stop-d2)\n  (define-key map [?\\C-v ?\\C-3] 'tidal-stop-d3)\n  (define-key map [?\\C-v ?\\C-4] 'tidal-stop-d4)\n  (define-key map [?\\C-v ?\\C-5] 'tidal-stop-d5)\n  (define-key map [?\\C-v ?\\C-6] 'tidal-stop-d6)\n  (define-key map [?\\C-v ?\\C-7] 'tidal-stop-d7)\n  (define-key map [?\\C-v ?\\C-8] 'tidal-stop-d8)\n  (define-key map [?\\C-v ?\\C-9] 'tidal-stop-d9))\n\n(defun tidal-turn-on-keybindings ()\n  \"Haskell Tidal keybindings in the local map.\"\n  (local-set-key [?\\C-c ?\\C-s] 'tidal-start-haskell)\n  (local-set-key [?\\C-c ?\\C-v] 'tidal-see-output)\n  (local-set-key [?\\C-c ?\\C-q] 'tidal-quit-haskell)\n  (local-set-key [?\\C-c ?\\C-c] 'tidal-run-line)\n  (local-set-key [?\\C-c ?\\C-e] 'tidal-run-multiple-lines)\n  (local-set-key (kbd \"<C-return>\") 'tidal-run-multiple-lines)\n  (local-set-key [?\\C-c ?\\C-r] 'tidal-run-region)\n  (local-set-key [?\\C-c ?\\C-l] 'tidal-load-buffer)\n  (local-set-key [?\\C-c ?\\C-i] 'tidal-interrupt-haskell)\n  (local-set-key [?\\C-c ?\\C-m] 'tidal-run-main)\n  (local-set-key [?\\C-c ?\\C-1] 'tidal-run-d1)\n  (local-set-key [?\\C-c ?\\C-2] 'tidal-run-d2)\n  (local-set-key [?\\C-c ?\\C-3] 'tidal-run-d3)\n  (local-set-key [?\\C-c ?\\C-4] 'tidal-run-d4)\n  (local-set-key [?\\C-c ?\\C-5] 'tidal-run-d5)\n  (local-set-key [?\\C-c ?\\C-6] 'tidal-run-d6)\n  (local-set-key [?\\C-c ?\\C-7] 'tidal-run-d7)\n  (local-set-key [?\\C-c ?\\C-8] 'tidal-run-d8)\n  (local-set-key [?\\C-c ?\\C-9] 'tidal-run-d9)\n  (local-set-key [?\\C-v ?\\C-1] 'tidal-stop-d1)\n  (local-set-key [?\\C-v ?\\C-2] 'tidal-stop-d2)\n  (local-set-key [?\\C-v ?\\C-3] 'tidal-stop-d3)\n  (local-set-key [?\\C-v ?\\C-4] 'tidal-stop-d4)\n  (local-set-key [?\\C-v ?\\C-5] 'tidal-stop-d5)\n  (local-set-key [?\\C-v ?\\C-6] 'tidal-stop-d6)\n  (local-set-key [?\\C-v ?\\C-7] 'tidal-stop-d7)\n  (local-set-key [?\\C-v ?\\C-8] 'tidal-stop-d8)\n  (local-set-key [?\\C-v ?\\C-9] 'tidal-stop-d9))\n\n(defun tidal-mode-menu (map)\n  \"Haskell Tidal menu MAP.\"\n  (define-key map [menu-bar tidal]\n              (cons \"Haskell-Tidal\" (make-sparse-keymap \"Haskell-Tidal\")))\n  (define-key map [menu-bar tidal help]\n              (cons \"Help\" (make-sparse-keymap \"Help\")))\n  (define-key map [menu-bar tidal expression]\n              (cons \"Expression\" (make-sparse-keymap \"Expression\")))\n  (define-key map [menu-bar tidal expression load-buffer]\n              '(\"Load buffer\" . tidal-load-buffer))\n  (define-key map [menu-bar tidal expression run-main]\n              '(\"Run main\" . tidal-run-main))\n  (define-key map [menu-bar tidal expression run-region]\n              '(\"Run region\" . tidal-run-region))\n  (define-key map [menu-bar tidal expression run-multiple-lines]\n              '(\"Run multiple lines\" . tidal-run-multiple-lines))\n  (define-key map [menu-bar tidal expression run-line]\n              '(\"Run line\" . tidal-run-line))\n  (define-key map [menu-bar tidal haskell]\n              (cons \"Haskell\" (make-sparse-keymap \"Haskell\")))\n  (define-key map [menu-bar tidal haskell quit-haskell]\n              '(\"Quit haskell\" . tidal-quit-haskell))\n  (define-key map [menu-bar tidal haskell see-output]\n              '(\"See output\" . tidal-see-output))\n  (define-key map [menu-bar tidal haskell start-haskell]\n              '(\"Start haskell\" . tidal-start-haskell)))\n\n(unless tidal-mode-map\n  (let ((map (make-sparse-keymap \"Haskell-Tidal\")))\n    (tidal-mode-keybindings map)\n    (tidal-mode-menu map)\n    (setq tidal-mode-map map)))\n\n;;;###autoload\n(define-derived-mode\n  literate-tidal-mode\n  tidal-mode\n  \"Literate Haskell Tidal\"\n  \"Major mode for interacting with an inferior haskell process.\"\n  (set (make-local-variable 'paragraph-start) \"\\f\\\\|[ \\t]*$\")\n  (set (make-local-variable 'paragraph-separate) \"[ \\t\\f]*$\")\n  (setq tidal-literate-p t)\n  (setq haskell-literate 'bird)\n  (turn-on-font-lock))\n\n;;;###autoload\n(add-to-list 'auto-mode-alist '(\"\\\\.ltidal\\\\'\" . literate-tidal-mode))\n\n;;;###autoload\n(define-derived-mode\n  tidal-mode\n  haskell-mode\n  \"Haskell Tidal\"\n  \"Major mode for interacting with an inferior haskell process.\"\n  (set (make-local-variable 'paragraph-start) \"\\f\\\\|[ \\t]*$\")\n  (set (make-local-variable 'paragraph-separate) \"[ \\t\\f]*$\")\n  (setq tidal-literate-p nil)\n  (turn-on-font-lock))\n\n;;;###autoload\n(add-to-list 'auto-mode-alist '(\"\\\\.tidal\\\\'\" . tidal-mode))\n\n(provide 'tidal)\n;;; tidal.el ends here\n"
        },
        {
          "name": "vis",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}