{
  "metadata": {
    "timestamp": 1736565423215,
    "page": 267,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "RobotLocomotion/drake",
      "stars": 3425,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".bazeliskrc",
          "type": "blob",
          "size": 0.4404296875,
          "content": "# When bazelisk in use (as is typical, per Drake install_prereqs), this dotfile\n# specifies which version of Bazel should be used to build and test Drake.\n# Keep the in sync with doc/_pages/from_source.md (only the major.minor part).\nUSE_BAZEL_VERSION=8.0.0\n\n# For some reason the google mirrors are very flaky in Drake CI in EC2, so\n# we'll point to the GitHub mirrors instead.\nBAZELISK_BASE_URL=https://github.com/bazelbuild/bazel/releases/download\n"
        },
        {
          "name": ".bazelproject",
          "type": "blob",
          "size": 0.662109375,
          "content": "# This is the default project view file for CLion. It describes which\n# directories and targets CLion should traverse when ingesting the Bazel build.\n#\n# Developers who only wish to work on a subset of Drake may maintain custom\n# project views locally. The more narrowly scoped the project view, the faster\n# CLion indexing will be. Restricted project views of general interest may also\n# be committed to this directory, with file names of the form foo.bazelproject.\n#\n# Detailed documentation for the file format is available at\n# https://ij.bazel.build/docs/project-views.html\n\ndirectories:\n  .\n  -build\n\ntargets:\n  //...:all\n\nbuild_flags:\n  --experimental_google_legacy_api\n\n"
        },
        {
          "name": ".bazelrc",
          "type": "blob",
          "size": 0.4775390625,
          "content": "# Import default settings (also shared with CMake builds).\nimport %workspace%/tools/bazel.rc\n\n# Import some helper configurations (not shared with CMake builds).\nimport %workspace%/tools/cc_toolchain/bazel.rc\nimport %workspace%/tools/dynamic_analysis/bazel.rc\nimport %workspace%/tools/lint/bazel.rc\n\n# Import environment-specific configuration.\nimport %workspace%/gen/environment.bazelrc\n\n# Try to import user-specific configuration local to workspace.\ntry-import %workspace%/user.bazelrc\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 3.40234375,
          "content": "# -*- yaml -*-\n\n# This file determines clang-format's style settings; for details, refer to\n# http://clang.llvm.org/docs/ClangFormatStyleOptions.html\n\nBasedOnStyle:  Google\n\nLanguage: Cpp\n\n# Force pointers to the type for C++.\nDerivePointerAlignment: false\nPointerAlignment: Left\n\n# Compress functions onto a single line (when they fit) iff they are defined\n# inline (inside a of class) or are empty.\nAllowShortFunctionsOnASingleLine: Inline\n\n# Compress lambdas onto a single line iff they are empty.\nAllowShortLambdasOnASingleLine: Empty\n\n# Specify the #include statement order.  This implements the order mandated by\n# the Google C++ Style Guide: related header, C headers, C++ headers, library\n# headers, and finally the project headers.\n#\n# To obtain updated lists of system headers used in the below expressions, see:\n# http://stackoverflow.com/questions/2027991/list-of-standard-header-files-in-c-and-c/2029106#2029106.\nIncludeCategories:\n  # Spacers used by drake/tools/formatter.py.\n  - Regex:    '^<clang-format-priority-15>$'\n    Priority: 15\n  - Regex:    '^<clang-format-priority-25>$'\n    Priority: 25\n  - Regex:    '^<clang-format-priority-35>$'\n    Priority: 35\n  - Regex:    '^<clang-format-priority-45>$'\n    Priority: 45\n  # C system headers.  The header_dependency_test.py contains a copy of this\n  # list; be sure to update that test anytime this list changes.\n  - Regex:    '^[<\"](aio|arpa/inet|assert|complex|cpio|ctype|curses|dirent|dlfcn|errno|fcntl|fenv|float|fmtmsg|fnmatch|ftw|glob|grp|iconv|inttypes|iso646|langinfo|libgen|limits|locale|math|monetary|mqueue|ndbm|netdb|net/if|netinet/in|netinet/tcp|nl_types|poll|pthread|pwd|regex|sched|search|semaphore|setjmp|signal|spawn|stdalign|stdarg|stdatomic|stdbool|stddef|stdint|stdio|stdlib|stdnoreturn|string|strings|stropts|sys/ipc|syslog|sys/mman|sys/msg|sys/resource|sys/select|sys/sem|sys/shm|sys/socket|sys/stat|sys/statvfs|sys/time|sys/times|sys/types|sys/uio|sys/un|sys/utsname|sys/wait|tar|term|termios|tgmath|threads|time|trace|uchar|ulimit|uncntrl|unistd|utime|utmpx|wchar|wctype|wordexp)\\.h[\">]$'\n    Priority: 20\n  # C++ system headers (as of C++23).  The header_dependency_test.py contains a\n  # copy of this list; be sure to update that test anytime this list changes.\n  - Regex:    '^[<\"](algorithm|any|array|atomic|barrier|bit|bitset|cassert|ccomplex|cctype|cerrno|cfenv|cfloat|charconv|chrono|cinttypes|ciso646|climits|clocale|cmath|codecvt|compare|complex|concepts|condition_variable|coroutine|csetjmp|csignal|cstdalign|cstdarg|cstdbool|cstddef|cstdint|cstdio|cstdlib|cstring|ctgmath|ctime|cuchar|cwchar|cwctype|deque|exception|execution|expected|filesystem|flat_map|flat_set|format|forward_list|fstream|functional|future|generator|initializer_list|iomanip|ios|iosfwd|iostream|istream|iterator|latch|limits|list|locale|map|mdspan|memory|memory_resource|mutex|new|numbers|numeric|optional|ostream|print|queue|random|ranges|ratio|regex|scoped_allocator|semaphore|set|shared_mutex|source_location|span|spanstream|sstream|stack|stacktrace|stdexcept|stdfloat|stop_token|streambuf|string|string_view|strstream|syncstream|system_error|thread|tuple|type_traits|typeindex|typeinfo|unordered_map|unordered_set|utility|valarray|variant|vector|version)[\">]$'\n    Priority: 30\n  # Other libraries' h files (with angles).\n  - Regex:    '^<'\n    Priority: 40\n  # Your project's h files.\n  - Regex:    '^\"drake'\n    Priority: 50\n  # Other libraries' h files (with quotes).\n  - Regex:    '^\"'\n    Priority: 40\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 1.046875,
          "content": "---\n# This file is not used by CI and the checks included are not part of the Drake style guide\nChecks: >\n        clang-analyzer-*,\n        clang-diagnostic-*,\n        cppcoreguidelines-*,\n        google-*,\n        modernize-*,\n        performance-*,\n        readability-*,\n        -cppcoreguidelines-pro-bounds-array-to-pointer-decay,\n        -cppcoreguidelines-pro-bounds-pointer-arithmetic,\n        -cppcoreguidelines-pro-type-static-cast-downcast,\n        -modernize-use-bool-literals,\n        -modernize-use-transparent-functors,\n        -modernize-use-using,\n        -readability-else-after-return,\n        -readability-named-parameter,\n\nCheckOptions:\n  - { key: readability-identifier-naming.ClassCase,           value: CamelCase  }\n  - { key: readability-identifier-naming.NamespaceCase,       value: lower_case }\n  - { key: readability-identifier-naming.PrivateMemberSuffix, value: '_'        }\n  - { key: readability-identifier-naming.StructCase,          value: CamelCase  }\n  - { key: readability-identifier-naming.VariableCase,        value: lower_case }\n...\n"
        },
        {
          "name": ".drake-find_resource-sentinel",
          "type": "blob",
          "size": 0.076171875,
          "content": "This file is used as a sentinel to anchor the implementation of FindResource.\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.4814453125,
          "content": "# This is drake's EditorConfig file. It allows users to have per-project coding\n# styles. For more information, see http://editorconfig.org/\n#\n# top-most EditorConfig file\nroot = true\n\n# Unix-style newlines with a newline ending every file\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_size = 2\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\nmax_line_length = 80\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.{bazel,bzl,py}]\nindent_size = 4\nmax_line_length = 79\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.388671875,
          "content": "# These lines tell reviewable.io how to highlight source code.\nWORKSPACE diff=bazel\n**/*.cps diff=json\n**/site.webmanifest diff=json\n\n# These lines tell git diff viewers to ignore data objects.\n# Wavefront geometry definition\n*.obj -diff\n# VTK polygon data\n*.vtp -diff\n# Scalable vector graphics.\n*.svg -diff\n# Rust crate auto-generated files.\n/tools/workspace/crate_universe/lock/details/** -diff\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.388671875,
          "content": "# Common editor-specific files\n*.idea\n*.autosave\n*.log\n*.bk\n*.tmp\n*~\n.#*\n*.bak\n# - Directories (at top level)\n/xcode/\n/.cproject/\n/.project/\n/.settings/\n/.clwb/\n/.vscode\n/.history\n\n# (Possible) CMake build artifacts\n/build/\n/cmake-build-*/\n\n# Bazel build artifacts\n/bazel-*\n/MODULE.bazel.lock\n\n# Platform artifacts generated by `install_prereqs`\n/gen/\n\n# User-specified configuration\n/user.bazelrc\n"
        },
        {
          "name": "BUILD.bazel",
          "type": "blob",
          "size": 4.763671875,
          "content": "# This file is named BUILD.bazel instead of the more typical BUILD, so that on\n# OSX it won't conflict with a build artifacts directory named \"build\".\n\nload(\"//tools/install:install.bzl\", \"install\", \"install_test\")\nload(\"//tools/lint:lint.bzl\", \"add_lint_tests\")\nload(\"//tools/skylark:drake_py.bzl\", \"drake_py_library\")\n\npackage(\n    default_visibility = [\"//visibility:public\"],\n)\n\nexports_files([\n    \"CPPLINT.cfg\",\n    \".bazelproject\",\n    \".clang-format\",\n    \".drake-find_resource-sentinel\",\n    \"package.xml\",\n])\n\nexports_files(\n    [\n        \"MODULE.bazel\",\n        \"WORKSPACE.bzlmod\",\n    ],\n    visibility = [\"//tools/workspace:__pkg__\"],\n)\n\n# A legacy hack module to disambiguate the 'drake' module when Drake is being\n# used as a non-bzlmod external. We should remove this when we drop support for\n# WORKSPACE (i.e., Bazel >= 9).\ndrake_py_library(\n    name = \"module_py\",\n    srcs = [\"__init__.py\"],\n    visibility = [\"//lcmtypes:__pkg__\"],\n)\n\n# Expose shared library for (a) installed binaries, (b) Drake Python bindings,\n# and (c) downstream C++ libraries which will also provide Python bindings.\nalias(\n    name = \"drake_shared_library\",\n    actual = \"//tools/install/libdrake:drake_shared_library\",\n    visibility = [\"//visibility:public\"],\n)\n\n# A manually-curated collection of most model files in Drake, so that we can\n# easily provide access to them for tools like //tools:model_visualizer.\nfilegroup(\n    name = \"all_models\",\n    data = [\n        \"//bindings/pydrake/multibody:models\",\n        \"//examples/acrobot:models\",\n        \"//examples/hardware_sim:demo_data\",\n        \"//examples/hydroelastic/ball_plate:models\",\n        \"//examples/hydroelastic/python_ball_paddle:models\",\n        \"//examples/hydroelastic/python_nonconvex_mesh:models\",\n        \"//examples/hydroelastic/spatula_slip_control:models\",\n        \"//examples/kuka_iiwa_arm/models\",\n        \"//examples/multibody/cart_pole:models\",\n        \"//examples/multibody/deformable:models\",\n        \"//examples/multibody/four_bar:models\",\n        \"//examples/pendulum:models\",\n        \"//examples/planar_gripper:models\",\n        \"//examples/quadrotor:models\",\n        \"//examples/scene_graph:models\",\n        \"//examples/simple_gripper:models\",\n        \"//multibody/benchmarks/acrobot:models\",\n        \"@drake_models\",\n    ],\n    visibility = [\"//:__subpackages__\"],\n)\n\n# A manually-curated collection of some test model files in Drake, for use by\n# //tools:model_visualizer_private.\nfilegroup(\n    name = \"some_test_models\",\n    testonly = True,\n    data = [\n        # It's okay to add more items to this list, as needed.\n        \"//geometry/render:test_models\",\n        \"//manipulation/util:test_models\",\n        \"//manipulation/util:test_directives\",\n        \"//multibody/parsing:test_models\",\n        \"//geometry:test_obj_files\",\n        \"//geometry:test_stl_files\",\n        \"//geometry:test_vtk_files\",\n        \"//geometry:environment_maps\",\n        \"//geometry/render_gltf_client:merge_resources\",\n        \"//geometry/render_gltf_client:gltf_client_test_models\",\n    ],\n    visibility = [\"//tools:__pkg__\"],\n)\n\n_INSTALL_TEST_COMMANDS = \"install_test_commands\"\n\n# These are the (only) files from our root directory which are installed. Note\n# that even though the \"data_dest\" and \"doc_dest\" seem to be redundant with the\n# default value for those attributes, that is not the case with bzlmod (where\n# the default repository is named \"_main\" not \"drake\").\ninstall(\n    name = \"install_files\",\n    data = [\"package.xml\"],\n    data_dest = \"share/drake\",\n    docs = [\"LICENSE.TXT\"],\n    doc_dest = \"share/doc/drake\",\n    visibility = [\"//visibility:private\"],\n)\n\ninstall(\n    name = \"install\",\n    install_tests_script = _INSTALL_TEST_COMMANDS,\n    deps = [\n        \":install_files\",\n        \"//bindings/pydrake:install\",\n        \"//common:install\",\n        \"//examples:install\",\n        \"//geometry:install\",\n        \"//lcmtypes:install\",\n        \"//multibody/parsing:install\",\n        \"//setup:install\",\n        \"//tools/install/libdrake:install\",\n        \"//tools/workspace:install_external_packages\",\n        \"//tutorials:install\",\n    ],\n)\n\ninstall_test(\n    name = \"install_test\",\n    args = [\"--install_tests_filename=$(location :{})\".format(\n        _INSTALL_TEST_COMMANDS,\n    )],\n    data = [\n        \":install\",\n        _INSTALL_TEST_COMMANDS,\n    ],\n    tags = [\n        # Running acceptance tests under coverage (kcov) probably burns more CI\n        # time and flakiness compared to any upside.\n        \"no_kcov\",\n        # Running acceptance tests under Valgrind tools is extremely slow and\n        # of limited value, so skip them.\n        \"no_valgrind_tools\",\n    ],\n)\n\nadd_lint_tests(\n    bazel_lint_extra_srcs = glob(\n        [\n            \"cmake/external/workspace/**/*.bazel.in\",\n            \"cmake/external/workspace/**/*.bzl\",\n        ],\n        allow_empty = False,\n    ),\n)\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 19.76171875,
          "content": "# -*- mode: cmake -*-\n# vi: set ft=cmake :\n\ncmake_minimum_required(VERSION 3.16)\n\nproject(drake\n  DESCRIPTION \"Model-based design and verification for robotics\"\n  LANGUAGES C CXX\n)\n\n# The primary build system for Drake is Bazel (https://bazel.build/). For CMake,\n# our objective is to accept configuration options using their standard spelling\n# (e.g., `-DCMAKE_BUILD_TYPE=Release`) and install Drake using those settings.\n#\n# We'll do that by converting the settings to generated Bazel inputs:\n# - a generated `MODULE.bazel` that depends on the Drake module and customizes\n#   the toolchain selection.\n# - a `.bazelrc` file that specifies configuration choices.\n# and then running the `@drake//:install` program from that temporary workspace.\n\nlist(INSERT CMAKE_MODULE_PATH 0 \"${PROJECT_SOURCE_DIR}/cmake/modules\")\n\ninclude(CTest)\n\nconfigure_file(CTestCustom.cmake.in CTestCustom.cmake @ONLY)\n\nif(ANDROID OR CYGWIN OR IOS OR NOT UNIX)\n  message(FATAL_ERROR\n    \"Android, Cygwin, iOS, and non-Unix platforms are NOT supported\"\n  )\nendif()\n\nset(BAZELRC_IMPORTS \"tools/bazel.rc\")\nset(UNIX_DISTRIBUTION_ID)\nset(UNIX_DISTRIBUTION_CODENAME)\n\nif(APPLE)\n  if(CMAKE_SYSTEM_VERSION VERSION_LESS 21)\n    message(WARNING\n      \"Darwin ${CMAKE_SYSTEM_VERSION} is NOT supported. Please use \"\n      \"Darwin 21.x (macOS Monterey) or newer.\"\n    )\n  endif()\n\n  list(APPEND BAZELRC_IMPORTS \"tools/macos.bazelrc\")\n\n  execute_process(\n    COMMAND \"/usr/bin/arch\"\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n    OUTPUT_VARIABLE MACOS_ARCH)\n  if(MACOS_ARCH STREQUAL \"\")\n    message(FATAL_ERROR \"Could NOT query macOS arch\")\n  endif()\n  list(APPEND BAZELRC_IMPORTS \"tools/macos-arch-${MACOS_ARCH}.bazelrc\")\nelse()\n  list(APPEND BAZELRC_IMPORTS \"tools/ubuntu.bazelrc\")\n\n  find_program(LSB_RELEASE_EXECUTABLE NAMES lsb_release)\n  mark_as_advanced(LSB_RELEASE_EXECUTABLE)\n  if(NOT LSB_RELEASE_EXECUTABLE)\n    message(WARNING \"Could NOT find the lsb_release executable\")\n  else()\n    execute_process(COMMAND \"${LSB_RELEASE_EXECUTABLE}\" --codename --short\n      RESULT_VARIABLE LSB_RELEASE_CODENAME_SHORT_RESULT_VARIABLE\n      OUTPUT_VARIABLE UNIX_DISTRIBUTION_CODENAME\n      OUTPUT_STRIP_TRAILING_WHITESPACE\n    )\n    if(NOT LSB_RELEASE_CODENAME_SHORT_RESULT_VARIABLE EQUAL 0)\n      message(WARNING \"Could NOT run the lsb_release executable\")\n    else()\n      set(MAYBE_RC \"tools/ubuntu-${UNIX_DISTRIBUTION_CODENAME}.bazelrc\")\n      if(NOT EXISTS \"${PROJECT_SOURCE_DIR}/${MAYBE_RC}\")\n        message(WARNING \"Could NOT find config file ${MAYBE_RC}\")\n      else()\n        list(APPEND BAZELRC_IMPORTS \"${MAYBE_RC}\")\n      endif()\n    endif()\n  endif()\nendif()\n\n# This version number should match bazel_compatibility in MODULE.bazel.\nset(MINIMUM_BAZEL_VERSION 7.4.1)\nfind_package(Bazel ${MINIMUM_BAZEL_VERSION} MODULE)\nif(NOT Bazel_FOUND)\n  set(Bazel_EXECUTABLE \"${PROJECT_SOURCE_DIR}/third_party/com_github_bazelbuild_bazelisk/bazelisk.py\")\n  message(STATUS \"Using Bazelisk as Bazel_EXECUTABLE to fetch Bazel on demand\")\nendif()\n\nget_filename_component(C_COMPILER_REALPATH \"${CMAKE_C_COMPILER}\" REALPATH)\nget_filename_component(C_COMPILER_NAME \"${C_COMPILER_REALPATH}\" NAME)\n\nget_filename_component(CXX_COMPILER_REALPATH \"${CMAKE_CXX_COMPILER}\" REALPATH)\nget_filename_component(CXX_COMPILER_NAME \"${CXX_COMPILER_REALPATH}\" NAME)\n\nif(C_COMPILER_NAME STREQUAL ccache OR CXX_COMPILER_NAME STREQUAL ccache)\n  message(FATAL_ERROR\n    \"Compilation with ccache is NOT supported due to incompatibility with Bazel\"\n  )\nendif()\n\n# Get the full C++ compiler major version for our cmake/bazel.rc.in.\nstring(REGEX MATCH \"^([0-9]+)\"\n  DRAKE_CC_TOOLCHAIN_COMPILER_MAJOR\n  \"${CMAKE_CXX_COMPILER_VERSION}\")\nif(NOT DRAKE_CC_TOOLCHAIN_COMPILER_MAJOR)\n  set(DRAKE_CC_TOOLCHAIN_COMPILER_MAJOR \"0\")\nendif()\n\n# The minimum compiler versions should match those listed in both\n# doc/_pages/from_source.md and tools/workspace/cc/repository.bzl.\nset(MINIMUM_APPLE_CLANG_VERSION 14)\nset(MINIMUM_CLANG_VERSION 15)\nset(MINIMUM_GNU_VERSION 11)\n\nif(CMAKE_C_COMPILER_ID STREQUAL AppleClang)\n  if(CMAKE_C_COMPILER_VERSION VERSION_LESS ${MINIMUM_APPLE_CLANG_VERSION})\n    message(WARNING\n      \"Compilation with clang ${CMAKE_C_COMPILER_VERSION} is NOT supported\"\n    )\n  endif()\nelseif(CMAKE_C_COMPILER_ID STREQUAL Clang)\n  if(CMAKE_C_COMPILER_VERSION VERSION_LESS ${MINIMUM_CLANG_VERSION})\n    message(WARNING\n      \"Compilation with clang ${CMAKE_C_COMPILER_VERSION} is NOT supported\"\n    )\n  endif()\nelseif(CMAKE_C_COMPILER_ID STREQUAL GNU)\n  if(CMAKE_C_COMPILER_VERSION VERSION_LESS ${MINIMUM_GNU_VERSION})\n    message(WARNING\n      \"Compilation with gcc ${CMAKE_C_COMPILER_VERSION} is NOT supported\"\n    )\n  endif()\nelse()\n  message(WARNING\n    \"Compilation with ${CMAKE_C_COMPILER_ID} is NOT supported. Compilation of \"\n    \"project drake_cxx_python may fail.\"\n  )\nendif()\n\nif(CMAKE_CXX_COMPILER_ID STREQUAL AppleClang)\n  if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS ${MINIMUM_APPLE_CLANG_VERSION})\n    message(WARNING\n      \"Compilation with clang++ ${CMAKE_CXX_COMPILER_VERSION} is NOT supported\"\n    )\n  endif()\nelseif(CMAKE_CXX_COMPILER_ID STREQUAL Clang)\n  if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS ${MINIMUM_CLANG_VERSION})\n    message(WARNING\n      \"Compilation with clang++ ${CMAKE_CXX_COMPILER_VERSION} is NOT supported\"\n    )\n  endif()\nelseif(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n  if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS ${MINIMUM_GNU_VERSION})\n    message(WARNING\n      \"Compilation with g++ ${CMAKE_CXX_COMPILER_VERSION} is NOT supported\"\n    )\n  endif()\nelse()\n  message(WARNING\n    \"Compilation with ${CMAKE_CXX_COMPILER_ID} is NOT supported. Compilation \"\n    \"of project drake_cxx_python may fail.\"\n  )\nendif()\n\n# Determine the CMAKE_BUILD_TYPE. We'll store it as BUILD_TYPE_LOWER so that\n# we can treat it as case-insensitive in our string comparisons.\nget_property(IS_MULTI_CONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTI_CONFIG)\n  message(FATAL_ERROR \"Drake does not support multi-config generators\")\nendif()\nset(SUPPORTED_BUILD_TYPES Release RelWithDebInfo Debug MinSizeRel)\nstring(REPLACE \";\" \" \" SUPPORTED_BUILD_TYPES_STRING\n  \"${SUPPORTED_BUILD_TYPES}\"\n)\nset_property(CACHE CMAKE_BUILD_TYPE PROPERTY\n  STRINGS \"${SUPPORTED_BUILD_TYPES}\"\n)\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE Release CACHE STRING\n    \"Choose the type of build, options are: ${SUPPORTED_BUILD_TYPES_STRING}\"\n    FORCE\n  )\nendif()\nstring(TOLOWER \"${CMAKE_BUILD_TYPE}\" BUILD_TYPE_LOWER)\nstring(TOLOWER \"${SUPPORTED_BUILD_TYPES}\" SUPPORTED_BUILD_TYPES_LOWER)\nif(NOT BUILD_TYPE_LOWER IN_LIST SUPPORTED_BUILD_TYPES_LOWER)\n  message(WARNING\n    \"Configuration CMAKE_BUILD_TYPE='${CMAKE_BUILD_TYPE}' is NOT supported. \"\n    \"Defaulting to Release, options are: ${SUPPORTED_BUILD_TYPES_STRING}\"\n  )\n  set(BUILD_TYPE_LOWER release)\n  set(CMAKE_BUILD_TYPE Release CACHE STRING\n    \"Choose the type of build, options are: ${SUPPORTED_BUILD_TYPES_STRING}\"\n    FORCE\n  )\nendif()\n\n# TODO(jwnimmer-tri) We don't currently pass along the user's selected C++\n# standard nor CMAKE_CXX_FLAGS to Bazel, but we should.\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_STANDARD 20)\n\n# The supported Python major/minor versions should match those listed in\n# doc/_pages/from_source.md and setup/python/pyproject.toml.\nif(APPLE)\n  # The macOS python version should match what's listed in both the\n  # tools/workspace/python/repository.bzl and doc/_pages/installation.md.\n  set(SUPPORTED_PYTHON_VERSION 3.12)\nelse()\n  if(UNIX_DISTRIBUTION_CODENAME STREQUAL noble)\n    set(SUPPORTED_PYTHON_VERSION 3.12)\n  else()  # UNIX_DISTRIBUTION_CODENAME := jammy\n    set(SUPPORTED_PYTHON_VERSION 3.10)\n  endif()\nendif()\n\n# Next we'll very carefully choose which Python interpreter to use.\n#\n# - If the user provided the legacy spelling -DPYTHON_EXECUTABLE, shift that\n#   into -DPython_EXECUTABLE instead and continue (with a warning).\n#\n# - If the user provided -DPython_EXECUTABLE, take it at face value (and\n#   therefore error out if they gave us a broken definition).\n#\n# - Otherwise, try to find SUPPORTED_PYTHON_VERSION and use it if found.\n#\n# - Otherwise, try to find any Python 3 interpreter at all.\n#\n# In all cases, we'll warn in case the found Python is not supported.\nif(PYTHON_EXECUTABLE AND NOT Python_EXECUTABLE)\n  set(Python_EXECUTABLE \"${PYTHON_EXECUTABLE}\" CACHE FILEPATH\n    \"Path to the python3 executable\" FORCE\n  )\n  message(WARNING\n    \"To select a Python interpreter, you should define Python_EXECUTABLE \"\n    \"not PYTHON_EXECUTABLE. The uppercase spelling is used for backwards \"\n    \"compatibility only.\")\n  unset(PYTHON_EXECUTABLE CACHE)\nendif()\nif(Python_EXECUTABLE)\n  find_package(Python 3 EXACT MODULE REQUIRED\n    COMPONENTS Development Interpreter\n  )\nelse()\n  find_package(Python ${SUPPORTED_PYTHON_VERSION} EXACT MODULE\n    COMPONENTS Development Interpreter\n  )\n  if(NOT Python_FOUND)\n    find_package(Python 3 EXACT MODULE REQUIRED\n      COMPONENTS Development Interpreter\n    )\n  endif()\nendif()\nif(NOT Python_INTERPRETER_ID STREQUAL Python)\n  message(WARNING\n    \"Python interpreter ${Python_INTERPRETER_ID} is NOT supported. Python \"\n    \"code in project drake_cxx_python may fail at runtime.\"\n  )\nendif()\nset(PYTHON_VERSION_MAJOR_MINOR\n  \"${Python_VERSION_MAJOR}.${Python_VERSION_MINOR}\"\n)\nif(NOT PYTHON_VERSION_MAJOR_MINOR VERSION_EQUAL SUPPORTED_PYTHON_VERSION)\n  message(WARNING\n    \"The found Python version ${PYTHON_VERSION_MAJOR_MINOR} differs from \"\n    \"Drake's preferred version ${SUPPORTED_PYTHON_VERSION} on this platform. \"\n    \"You may experience compatibility problems that are outside the scope of \"\n    \"Drake's continuous integration test suites.\"\n  )\nendif()\n\nset(BAZEL_REPO_ENV)\n\nif(NOT APPLE)\n  string(APPEND BAZEL_REPO_ENV\n    \" --repo_env=CC=${CMAKE_C_COMPILER}\"\n    \" --repo_env=CXX=${CMAKE_CXX_COMPILER}\"\n  )\nendif()\n\nget_filename_component(PROJECT_BINARY_DIR_REALPATH\n  \"${PROJECT_BINARY_DIR}\" REALPATH\n)\nget_filename_component(PROJECT_SOURCE_DIR_REALPATH\n  \"${PROJECT_SOURCE_DIR}\" REALPATH\n)\n\n# Check whether the PROJECT_BINARY_DIR is a subdirectory of the\n# PROJECT_SOURCE_DIR.\nstring(FIND \"${PROJECT_BINARY_DIR_REALPATH}/\" \"${PROJECT_SOURCE_DIR_REALPATH}/\"\n  STRING_FIND_RESULT_VARIABLE\n)\n\nif(STRING_FIND_RESULT_VARIABLE EQUAL 0)\n  # The --output_base cannot be within the WORKSPACE (a subdirectory of\n  # PROJECT_SOURCE_DIR), so fallback to the using the same parent directory\n  # that Bazel uses by default for its --output_base.\n  if(APPLE)\n    set(BAZEL_OUTPUT_BASE \"/var/tmp\")\n  else()\n    set(BAZEL_OUTPUT_BASE \"$ENV{HOME}/.cache/bazel\")\n  endif()\nelse()\n  set(BAZEL_OUTPUT_BASE \"${PROJECT_BINARY_DIR}\")\nendif()\n\n# Compute the MD5 hash of the PROJECT_BINARY_DIR rather than the WORKSPACE\n# (PROJECT_SOURCE_DIR) to avoid colliding with the directory that Bazel uses by\n# default.\nstring(MD5 PROJECT_BINARY_DIR_MD5 \"${PROJECT_BINARY_DIR_REALPATH}\")\nset(BAZEL_OUTPUT_BASE\n  \"${BAZEL_OUTPUT_BASE}/_bazel_$ENV{USER}/${PROJECT_BINARY_DIR_MD5}\"\n)\n\nfunction(generate_external_repository_file OUTPUT)\n  set(out_path\n    ${CMAKE_CURRENT_BINARY_DIR}/external/workspace/${OUTPUT})\n  if(ARGN)\n    file(GENERATE OUTPUT ${out_path}\n      INPUT ${CMAKE_CURRENT_SOURCE_DIR}/cmake/external/workspace/${ARGN})\n  else()\n    file(GENERATE OUTPUT ${out_path} CONTENT \"\")\n  endif()\nendfunction()\n\n# Symlinks the C++ include path for TARGET as workspace/NAME/include, e.g.\n#  workspace/eigen/include -> .../build/install/include/eigen3\nfunction(symlink_external_repository_includes NAME TARGET)\n  get_target_property(include_dir ${TARGET} INTERFACE_INCLUDE_DIRECTORIES)\n  set(workspace ${CMAKE_CURRENT_BINARY_DIR}/external/workspace)\n  file(MAKE_DIRECTORY ${workspace}/${NAME})\n  file(CREATE_LINK ${include_dir} ${workspace}/${NAME}/include SYMBOLIC)\nendfunction()\n\n# Symlinks the C++ libraries for TARGET as workspace/NAME/lib/*, e.g.\n#  workspace/fmt/lib/libfmt.so.6.1.2 -> .../build/install/lib/fmt/libfmt.so.6.1.2\n#  workspace/fmt/lib/libfmt.so.6 -> .../build/install/lib/fmt/libfmt.so.6.1.2\nfunction(symlink_external_repository_libs NAME TARGET)\n  set(workspace \"${CMAKE_CURRENT_BINARY_DIR}/external/workspace\")\n  file(MAKE_DIRECTORY \"${workspace}/${NAME}/lib\")\n  # Link the full library name (i.e., libfmt.so.6.1.2 in the case of shared).\n  get_target_property(location ${TARGET} LOCATION_${CMAKE_BUILD_TYPE})\n  if(NOT location)\n    message(FATAL_ERROR \"Target ${TARGET} has no library in LOCATION_${CMAKE_BUILD_TYPE}\")\n  endif()\n  get_filename_component(basename \"${location}\" NAME)\n  file(CREATE_LINK \"${location}\" \"${workspace}/${NAME}/lib/${basename}\" SYMBOLIC)\n  # Link the SONAME spelling in case of shared libraries.\n  # If the basename does not match this pattern, this part is all a no-op.\n  string(REGEX REPLACE \"(\\\\.so\\\\.[0-9]+)\\\\.[0-9]+\\\\.[0-9]+$\" \"\\\\1\"\n      other_basename \"${basename}\")\n  string(REGEX REPLACE \"(\\\\.[0-9]+)\\\\.[0-9]+\\\\.[0-9]+\\\\.dylib$\" \"\\\\1.dylib\"\n      other_basename \"${other_basename}\")\n  file(CREATE_LINK \"${location}\" \"${workspace}/${NAME}/lib/${other_basename}\" SYMBOLIC)\nendfunction()\n\nmacro(override_repository NAME)\n  set(repo \"${CMAKE_CURRENT_BINARY_DIR}/external/workspace/${NAME}\")\n  string(APPEND BAZEL_REPO_ENV\n      \" --override_repository=drake++drake_dep_repositories+${NAME}=${repo}\")\nendmacro()\n\noption(WITH_USER_EIGEN \"Use user-provided Eigen3\" ON)\n\nif(WITH_USER_EIGEN)\n  find_package(Eigen3 CONFIG REQUIRED)\n\n  symlink_external_repository_includes(eigen Eigen3::Eigen)\n  generate_external_repository_file(eigen/WORKSPACE)\n  generate_external_repository_file(\n    eigen/BUILD.bazel\n    eigen/BUILD.bazel.in)\n\n  override_repository(eigen)\nendif()\n\noption(WITH_USER_FMT \"Use user-provided fmt\" ON)\n\nif(WITH_USER_FMT)\n  find_package(fmt CONFIG REQUIRED)\n\n  symlink_external_repository_includes(fmt fmt::fmt)\n  symlink_external_repository_libs(fmt fmt::fmt)\n  generate_external_repository_file(fmt/WORKSPACE)\n  generate_external_repository_file(\n    fmt/BUILD.bazel\n    fmt/BUILD.bazel.in)\n\n  override_repository(fmt)\nendif()\n\noption(WITH_USER_SPDLOG \"Use user-provided spdlog\" ON)\n\nif(WITH_USER_SPDLOG)\n  if(NOT WITH_USER_FMT)\n    message(FATAL_ERROR\n      \"User-provided spdlog (WITH_USER_SPDLOG) \"\n      \"requires user-provided fmt (WITH_USER_FMT).\")\n  endif()\n\n  find_package(spdlog CONFIG REQUIRED)\n\n  symlink_external_repository_includes(spdlog spdlog::spdlog)\n  symlink_external_repository_libs(spdlog spdlog::spdlog)\n  generate_external_repository_file(spdlog/WORKSPACE)\n  generate_external_repository_file(\n    spdlog/BUILD.bazel\n    spdlog/BUILD.bazel.in)\n\n  override_repository(spdlog)\nendif()\n\nset(BAZEL_CONFIG)\n\noption(WITH_GUROBI \"Build with support for Gurobi\" OFF)\n\nif(WITH_GUROBI)\n  find_package(Gurobi 10.0 EXACT MODULE REQUIRED)\n\n  string(APPEND BAZEL_CONFIG \" --config=gurobi\")\n\n  if(NOT APPLE)\n    get_filename_component(GUROBI_HOME \"${Gurobi_INCLUDE_DIRS}\" DIRECTORY)\n    string(APPEND BAZEL_REPO_ENV \" --repo_env=GUROBI_HOME=${GUROBI_HOME}\")\n  endif()\nendif()\n\noption(WITH_MOSEK \"Build with support for MOSEK\" OFF)\n\nif(WITH_MOSEK)\n  string(APPEND BAZEL_CONFIG \" --config=mosek\")\nendif()\n\noption(WITH_OPENMP \"Build with support for OpenMP\" OFF)\n\nif(WITH_OPENMP)\n  string(APPEND BAZEL_CONFIG \" --config=omp\")\nendif()\n\nset(WITH_ROBOTLOCOMOTION_SNOPT OFF CACHE BOOL\n  \"Build with support for SNOPT using the RobotLocomotion/snopt private GitHub repository\"\n)\n\nset(WITH_SNOPT OFF CACHE BOOL\n  \"Build with support for SNOPT using a SNOPT source archive at SNOPT_PATH\"\n)\n\nif(WITH_ROBOTLOCOMOTION_SNOPT AND WITH_SNOPT)\n  message(FATAL_ERROR\n    \"WITH_ROBOTLOCOMOTION_SNOPT and WITH_SNOPT options are mutually exclusive\"\n  )\nendif()\n\nif(WITH_ROBOTLOCOMOTION_SNOPT OR WITH_SNOPT)\n  enable_language(Fortran)\n\n  if(CMAKE_Fortran_COMPILER_ID STREQUAL GNU)\n    if(CMAKE_Fortran_COMPILER_VERSION VERSION_LESS ${MINIMUM_GNU_VERSION})\n      message(FATAL_ERROR\n        \"Compilation with gfortran ${CMAKE_Fortran_COMPILER_VERSION} is NOT \"\n        \"supported\"\n      )\n    endif()\n  else()\n    message(WARNING\n      \"Compilation with ${CMAKE_Fortran_COMPILER_ID} is NOT supported. \"\n      \"Compilation of project drake_cxx_python may fail.\"\n    )\n  endif()\n\n  string(APPEND BAZEL_CONFIG \" --config=snopt\")\n\n  if(WITH_ROBOTLOCOMOTION_SNOPT)\n    string(APPEND BAZEL_REPO_ENV \" --repo_env=SNOPT_PATH=git\")\n  else()\n    set(SNOPT_PATH SNOPT_PATH-NOTFOUND CACHE FILEPATH\n      \"Path to SNOPT source archive\"\n    )\n    if(NOT EXISTS \"${SNOPT_PATH}\")\n      message(FATAL_ERROR\n        \"SNOPT source archive was NOT found at '${SNOPT_PATH}'\"\n      )\n    endif()\n    mark_as_advanced(SNOPT_PATH)\n    string(APPEND BAZEL_REPO_ENV \" --repo_env=SNOPT_PATH=${SNOPT_PATH}\")\n  endif()\nendif()\n\nif(BUILD_TYPE_LOWER STREQUAL debug)\n  string(APPEND BAZEL_CONFIG \" --config=Debug\")\nelseif(BUILD_TYPE_LOWER STREQUAL minsizerel)\n  string(APPEND BAZEL_CONFIG \" --config=MinSizeRel\")\nelseif(BUILD_TYPE_LOWER STREQUAL release)\n  string(APPEND BAZEL_CONFIG \" --config=Release\")\nelseif(BUILD_TYPE_LOWER STREQUAL relwithdebinfo)\n  string(APPEND BAZEL_CONFIG \" --config=RelWithDebInfo\")\nendif()\n\n# N.B. If you are testing the CMake API and making changes to `installer.py`,\n# you can change this target to something more lightweight, such as\n# `//tools/install/dummy:install`.\nset(BAZEL_INSTALL_TARGET \"@drake//:install\")\n\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${PROJECT_BINARY_DIR}/install\" CACHE STRING\n    \"Install path prefix, prepended onto install directories\" FORCE\n  )\nendif()\n\nset(BAZEL_INSTALL_ARGS \"\\${CMAKE_INSTALL_PREFIX}\")\n\nif(CMAKE_INSTALL_NAME_TOOL)\n  list(INSERT BAZEL_INSTALL_ARGS 0\n    \"--install_name_tool\"\n    \"${CMAKE_INSTALL_NAME_TOOL}\"\n  )\nendif()\n\nif(CMAKE_STRIP)\n  list(INSERT BAZEL_INSTALL_ARGS 0 \"--strip_tool\" \"${CMAKE_STRIP}\")\nendif()\n\n# If CMAKE_BUILD_TYPE is Debug or RelWithDebInfo, do NOT strip symbols during\n# install.\nif(BUILD_TYPE_LOWER MATCHES \"^(debug|relwithdebinfo)$\")\n  # SNOPT has restrictions for redistribution given that we are statically\n  # linking it in.\n  if(WITH_SNOPT OR WITH_ROBOTLOCOMOTION_SNOPT)\n    message(WARNING\n      \"Install configurations Debug and RelWithDebInfo will STILL strip \"\n      \"symbols because support for SNOPT is enabled\"\n    )\n  else()\n    list(INSERT BAZEL_INSTALL_ARGS 0 --no_strip)\n  endif()\nendif()\n\nset(BAZELRC_IMPORT)\nforeach(import IN LISTS BAZELRC_IMPORTS)\n  string(APPEND BAZELRC_IMPORT \"import ${PROJECT_SOURCE_DIR}/${import}\\n\")\nendforeach()\n\n# We need to run Bazel in a dedicated temporary directory. The particular\n# name `drake_build_cwd` isn't important, it just needs to be unique. Note,\n# however, that the macOS wheel builds also need to know this path, so if it\n# ever changes, tools/wheel/macos/build-wheel.sh will also need to be updated.\nconfigure_file(cmake/bazel.rc.in drake_build_cwd/.bazelrc @ONLY)\nconfigure_file(cmake/MODULE.bazel.in drake_build_cwd/MODULE.bazel @ONLY)\nfile(CREATE_LINK \"${PROJECT_SOURCE_DIR}/.bazeliskrc\" drake_build_cwd/.bazeliskrc SYMBOLIC)\n\nfind_package(Git)\n\nset(GIT_DIR \"${PROJECT_SOURCE_DIR}/.git\")\n\nset(GENERATE_DRAKE_VERSION_ARGS)\nif(DEFINED DRAKE_VERSION_OVERRIDE)\n  list(APPEND GENERATE_DRAKE_VERSION_ARGS\n    \"-DDRAKE_VERSION_OVERRIDE=${DRAKE_VERSION_OVERRIDE}\")\nendif()\nif(DEFINED DRAKE_GIT_SHA_OVERRIDE)\n  list(APPEND GENERATE_DRAKE_VERSION_ARGS\n    \"-DDRAKE_GIT_SHA_OVERRIDE=${DRAKE_GIT_SHA_OVERRIDE}\")\nendif()\n\nadd_custom_target(drake_version ALL\n  COMMAND \"${CMAKE_COMMAND}\"\n    ${GENERATE_DRAKE_VERSION_ARGS}\n    \"-DGIT_DIR=${GIT_DIR}\"\n    \"-DGIT_EXECUTABLE=${GIT_EXECUTABLE}\"\n    \"-DINPUT_FILE=${PROJECT_SOURCE_DIR}/tools/install/libdrake/VERSION.TXT.in\"\n    \"-DOUTPUT_FILE=${PROJECT_BINARY_DIR}/VERSION.TXT\"\n    -P \"${PROJECT_SOURCE_DIR}/tools/install/libdrake/generate_version.cmake\"\n)\n\nadd_custom_target(drake_cxx_python ALL\n  COMMAND \"${Bazel_EXECUTABLE}\" build ${BAZEL_INSTALL_TARGET}\n  DEPENDS \"${PROJECT_BINARY_DIR}/VERSION.TXT\"\n  WORKING_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/drake_build_cwd\"\n  USES_TERMINAL\n)\n\ninstall(CODE\n  \"execute_process(\n    COMMAND\n      \\\"${Bazel_EXECUTABLE}\\\" run ${BAZEL_INSTALL_TARGET}\n      -- ${BAZEL_INSTALL_ARGS}\n    WORKING_DIRECTORY \\\"${CMAKE_CURRENT_BINARY_DIR}/drake_build_cwd\\\"\n  )\"\n  ALL_COMPONENTS\n)\n\ninstall(FILES \"${PROJECT_BINARY_DIR}/VERSION.TXT\" DESTINATION share/doc/drake)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.21484375,
          "content": "### Contributing code\n\nIf you have improvements to Drake, send us your pull requests!\n\nPlease see our developer's page for details:\n* `doc/_pages/developers.rst`\n* [online version](https://drake.mit.edu/developers.html)\n"
        },
        {
          "name": "CPPLINT.cfg",
          "type": "blob",
          "size": 1.9716796875,
          "content": "# Copyright 2016 Robot Locomotion Group @ CSAIL. All rights reserved.\n#\n# All components of Drake are licensed under the BSD 3-Clause License.\n# See LICENSE.TXT or https://drake.mit.edu/ for details.\n\n# Stop searching for additional config files.\nset noparent\n\n# Disable a warning about C++ features that were not in the original\n# C++11 specification (and so might not be well-supported).  In the\n# case of Drake, our supported minimum platforms are new enough that\n# this warning is irrelevant.\nfilter=-build/c++11\n\n# Drake uses `#pragma once`, not the `#ifndef FOO_H` guard.\n# https://drake.mit.edu/styleguide/cppguide.html#The__pragma_once_Guard\nfilter=-build/header_guard\nfilter=+build/pragma_once\n\n# Disable cpplint's include order.  We have our own via //tools:drakelint.\nfilter=-build/include_order\n\n# Filters are prefix strings on the name of the error category (i.e., string\n# matches are anchored only at the start of the name, not the end), so we must\n# explicitly opt-in to longer category names that the `-build/include` filter in\n# the next paragraph would otherwise disable.\nfilter=+build/include_what_you_use\n\n# Disable cpplint's check to include the h file atop the cc file (along with\n# some other, even less relevant checks). Given the layout of bazel's runfiles\n# during linting and our include path customizations, cpplint yields false\n# positives because it's unable to discern the root of our include path.\nfilter=-build/include\n\n# We do not care about the whitespace details of a TODO comment.  It is not\n# relevant for easy grepping, and the GSG does not specify any particular\n# whitespace style.  (We *do* care what the \"TODO(username)\" itself looks like\n# because GSG forces a particular style there, but that formatting is covered\n# by the readability/todo rule, which we leave enabled.)\nfilter=-whitespace/todo\n\n# TODO(#1805) Fix this.\nfilter=-legal/copyright\n\n# Ignore code that isn't ours.\nexclude_files=third_party\n\n# It's not worth lint-gardening the documentation.\nexclude_files=doc\n"
        },
        {
          "name": "CTestConfig.cmake",
          "type": "blob",
          "size": 0.287109375,
          "content": "# -*- mode: cmake -*-\n# vi: set ft=cmake :\n\nset(CTEST_PROJECT_NAME drake)\nset(CTEST_NIGHTLY_START_TIME \"00:00:00 EST\")\nset(CTEST_DROP_METHOD https)\nset(CTEST_DROP_SITE drake-cdash.csail.mit.edu)\nset(CTEST_DROP_LOCATION \"/submit.php?project=${CTEST_PROJECT_NAME}\")\nset(CTEST_DROP_SITE_CDASH ON)\n"
        },
        {
          "name": "CTestCustom.cmake.in",
          "type": "blob",
          "size": 1.3330078125,
          "content": "# -*- mode: cmake -*-\n# vi: set ft=cmake :\n\nlist(APPEND CTEST_CUSTOM_COVERAGE_EXCLUDE\n  \".*/test/.*\"\n  \".*/third_party/.*\"\n)\n\nstring(ASCII 27 ESC)\n\n# Note that due to limitations in the CMake language there may only be one\n# element in each list containing mismatched opening square brackets\n# (i.e., [ without matching ]) and that element must be the last element of the\n# list.\n\n# Never ever EVER _**EVER**_ should CTest fail the build of its own accord.\nlist(APPEND CTEST_CUSTOM_ERROR_EXCEPTION\n  \".*\"\n)\n\n# Ignore various Mac CROSSTOOL-related warnings.\nlist(APPEND CTEST_CUSTOM_WARNING_EXCEPTION\n  \"ranlib: file: .* has no symbols\"\n  \"ranlib: warning for library: .* the table of contents is empty \\\\(no object file members in the library define global symbols\\\\)\"\n  \"warning: argument unused during compilation: '-pie' \\\\[-Wunused-command-line-argument\\\\]\"\n  \"warning: '_FORTIFY_SOURCE' macro redefined \\\\[-Wmacro-redefined\\\\]\"\n)\n\n# \"WARNING\" emitted by Bazel may be colored magenta (CSI 35m) and \"warning\"\n# emitted by Clang may be colored magenta (CSI 35m) and bolded (CSI 1m).\nlist(APPEND CTEST_CUSTOM_WARNING_MATCH\n  \": DrakeDeprecationWarning: \"\n  \"^WARNING: \"\n  \": warning: \"\n  \"(^${ESC}\\\\[35mWARNING|: ${ESC}\\\\[0m${ESC}\\\\[0\\;1\\;35mwarning): ${ESC}\\\\[0m\"\n)\n\nset(CTEST_CUSTOM_MAXIMUM_NUMBER_OF_ERRORS 100)\nset(CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS 100)\n"
        },
        {
          "name": "LICENSE.TXT",
          "type": "blob",
          "size": 1.658203125,
          "content": "All components of Drake are licensed under the BSD 3-Clause License\nshown below. Where noted in the source code, some portions may \nbe subject to other permissive, non-viral licenses.\n\nCopyright 2012-2022 Robot Locomotion Group @ CSAIL\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\nRedistributions of source code must retain the above copyright notice,\nthis list of conditions and the following disclaimer.  Redistributions\nin binary form must reproduce the above copyright notice, this list of\nconditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.  Neither the name of\nthe Massachusetts Institute of Technology nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MODULE.bazel",
          "type": "blob",
          "size": 6.2109375,
          "content": "# This file marks a workspace root for the Bazel build system.\n# See `https://bazel.build/`.\n\n# This file lists Drake's external dependencies as known to bzlmod. It is used\n# in concert with WORKSPACE.bzlmod (which has the workspace-style externals).\n\nmodule(\n    name = \"drake\",\n    # This version number should match MINIMUM_BAZEL_VERSION in CMakeLists.txt.\n    bazel_compatibility = [\">=7.4.1\"],\n)\n\n# Add starlark rules.\n\nbazel_dep(name = \"apple_support\", version = \"1.17.1\", repo_name = \"build_bazel_apple_support\")  # noqa\nbazel_dep(name = \"bazel_features\", version = \"1.22.0\")\nbazel_dep(name = \"bazel_skylib\", version = \"1.7.1\")\nbazel_dep(name = \"platforms\", version = \"0.0.10\")\nbazel_dep(name = \"rules_cc\", version = \"0.0.17\")\nbazel_dep(name = \"rules_java\", version = \"8.6.1\")\nbazel_dep(name = \"rules_license\", version = \"1.0.0\")\nbazel_dep(name = \"rules_python\", version = \"0.40.0\")\nbazel_dep(name = \"rules_rust\", version = \"0.56.0\")\nbazel_dep(name = \"rules_shell\", version = \"0.3.0\")\n\n# Customize our toolchains.\n\ncc_configure = use_extension(\n    \"@rules_cc//cc:extensions.bzl\",\n    \"cc_configure_extension\",\n)\nuse_repo(cc_configure, \"local_config_cc\")\n\n# Load dependencies which are \"public\", i.e., made available to downstream\n# projects.\n#\n# Downstream projects may load the same `drake_dep_repositories` module\n# extension shown below and call its `use_repo` with whatever list of\n# repositories they desire to cite from their project. It's safe to call\n# `use_repo` on a subset of this list, or not call it at all downstream.\n# Its only effect on a downstream project is to make the repository name\n# visible to BUILD rules; Drake's own use of the repository is unaffected.\n\ndrake_dep_repositories = use_extension(\n    \"@drake//tools/workspace:default.bzl\",\n    \"drake_dep_repositories\",\n)\nuse_repo(\n    drake_dep_repositories,\n    \"blas\",\n    \"buildifier\",\n    \"drake_models\",\n    \"eigen\",\n    \"fmt\",\n    \"gflags\",\n    \"glib\",\n    \"glx\",\n    \"gtest\",\n    \"gurobi\",\n    \"lapack\",\n    \"lcm\",\n    \"libblas\",\n    \"liblapack\",\n    \"meshcat\",\n    \"mosek\",\n    \"opencl\",\n    \"opengl\",\n    \"pybind11\",\n    \"pycodestyle\",\n    \"python\",\n    \"snopt\",\n    \"spdlog\",\n    \"styleguide\",\n    \"x11\",\n    \"zlib\",\n)\n\n# Load dependencies which are \"private\", i.e., not available for use by\n# downstream projects. These are all \"internal use only\".\n#\n# TODO(jwnimmer-tri) By historical accident, not all of the repository names\n# here end with \"internal\". We should work on improving the consistency, either\n# by switching them to use BCR modules instead (e.g., nasm) or renaming them\n# with any necessary deprecations (e.g., statsjs).\n\ninternal_repositories = use_extension(\n    \"@drake//tools/workspace:default.bzl\",\n    \"internal_repositories\",\n)\nuse_repo(\n    internal_repositories,\n    \"abseil_cpp_internal\",\n    \"bazelisk\",\n    \"ccd_internal\",\n    \"clang_cindex_python3_internal\",\n    \"clarabel_cpp_internal\",\n    \"clp_internal\",\n    \"coinutils_internal\",\n    \"com_jidesoft_jide_oss\",\n    \"common_robotics_utilities_internal\",\n    \"commons_io\",\n    \"conex_internal\",\n    \"csdp_internal\",\n    \"curl_internal\",\n    \"dm_control_internal\",\n    \"doxygen\",\n    \"fcl_internal\",\n    \"gfortran\",\n    \"github3_py_internal\",\n    \"gklib_internal\",\n    \"googlebenchmark\",\n    \"gymnasium_py\",\n    \"gz_math_internal\",\n    \"gz_utils_internal\",\n    \"highway_internal\",\n    \"ipopt_internal\",\n    \"libjpeg_turbo_internal\",\n    \"libpng_internal\",\n    \"libtiff_internal\",\n    \"metis_internal\",\n    \"mpmath_py_internal\",\n    \"msgpack_internal\",\n    \"mujoco_menagerie_internal\",\n    \"mumps_internal\",\n    \"mypy_extensions_internal\",\n    \"mypy_internal\",\n    \"nanoflann_internal\",\n    \"nasm\",\n    \"net_sf_jchart2d\",\n    \"nlohmann_internal\",\n    \"nlopt_internal\",\n    \"onetbb_internal\",\n    \"openusd_internal\",\n    \"org_apache_xmlgraphics_commons\",\n    \"osqp_internal\",\n    \"picosha2_internal\",\n    \"poisson_disk_sampling_internal\",\n    \"qdldl_internal\",\n    \"qhull_internal\",\n    \"ros_xacro_internal\",\n    \"rules_python_drake_constants\",\n    \"scs_internal\",\n    \"sdformat_internal\",\n    \"spgrid_internal\",\n    \"spral_internal\",\n    \"stable_baselines3_internal\",\n    \"statsjs\",\n    \"stduuid_internal\",\n    \"suitesparse_internal\",\n    \"sympy_py_internal\",\n    \"tinygltf_internal\",\n    \"tinyobjloader_internal\",\n    \"tinyxml2_internal\",\n    \"tomli_internal\",\n    \"typing_extensions_internal\",\n    \"uritemplate_py_internal\",\n    \"usockets_internal\",\n    \"uwebsockets_internal\",\n    \"voxelized_geometry_tools_internal\",\n    \"vtk_internal\",\n    \"xmlrunner_py\",\n    \"yaml_cpp_internal\",\n)\n\ninternal_crate_universe_repositories = use_extension(\n    \"//tools/workspace:default.bzl\",\n    \"internal_crate_universe_repositories\",\n)\nuse_repo(\n    internal_crate_universe_repositories,\n    \"crate__amd-0.2.2\",\n    \"crate__autocfg-1.4.0\",\n    \"crate__blas-0.22.0\",\n    \"crate__blas-sys-0.7.1\",\n    \"crate__cfg-if-1.0.0\",\n    \"crate__clarabel-0.9.0\",\n    \"crate__darling-0.14.4\",\n    \"crate__darling_core-0.14.4\",\n    \"crate__darling_macro-0.14.4\",\n    \"crate__derive_builder-0.11.2\",\n    \"crate__derive_builder_core-0.11.2\",\n    \"crate__derive_builder_macro-0.11.2\",\n    \"crate__either-1.13.0\",\n    \"crate__enum_dispatch-0.3.13\",\n    \"crate__equivalent-1.0.1\",\n    \"crate__fnv-1.0.7\",\n    \"crate__hashbrown-0.15.2\",\n    \"crate__ident_case-1.0.1\",\n    \"crate__indexmap-2.7.0\",\n    \"crate__itertools-0.11.0\",\n    \"crate__itoa-1.0.14\",\n    \"crate__lapack-0.19.0\",\n    \"crate__lapack-sys-0.14.0\",\n    \"crate__lazy_static-1.5.0\",\n    \"crate__libc-0.2.169\",\n    \"crate__memchr-2.7.4\",\n    \"crate__num-complex-0.4.6\",\n    \"crate__num-traits-0.2.19\",\n    \"crate__once_cell-1.19.0\",\n    \"crate__paste-1.0.15\",\n    \"crate__proc-macro2-1.0.92\",\n    \"crate__quote-1.0.38\",\n    \"crate__ryu-1.0.18\",\n    \"crate__serde-1.0.217\",\n    \"crate__serde_derive-1.0.217\",\n    \"crate__serde_json-1.0.134\",\n    \"crate__strsim-0.10.0\",\n    \"crate__syn-1.0.109\",\n    \"crate__syn-2.0.94\",\n    \"crate__thiserror-1.0.69\",\n    \"crate__thiserror-impl-1.0.69\",\n    \"crate__unicode-ident-1.0.14\",\n)\n\n# TODO(#20731) More improvements are still needed to our MODULE organization:\n# - Switch public API dependencies (e.g., eigen) to use modules.\n# - Provide better configuration options for choosing dependencies.\n# - Adjust the wheel build to build more dependencies as Bazel modules.\n# - Deprecate non-bzlmod use of Drake downstream.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.138671875,
          "content": "# Drake\n\nModel-Based Design and Verification for Robotics.\n\nPlease see the [Drake Documentation](https://drake.mit.edu) for more\ninformation.\n"
        },
        {
          "name": "WORKSPACE",
          "type": "blob",
          "size": 0.369140625,
          "content": "workspace(name = \"drake\")\n\n# Building Drake directly (i.e., not as a dependency of a larger project)\n# with bzlmod disabled is no longer supported\n#\n# Consuming Drake as a WORKSPACE dependency is still supported:\n# https://github.com/RobotLocomotion/drake-external-examples/tree/main/drake_bazel_external_legacy\n\nfail(\"First-party Drake builds require that bzlmod is enabled.\")\n"
        },
        {
          "name": "WORKSPACE.bzlmod",
          "type": "blob",
          "size": 0.4013671875,
          "content": "# -*- bazel -*-\n#\n# This file is only ever used by drake/tools/clion/bazel_wrapper (for Drake\n# Developers who develop using CLion; see https://drake.mit.edu/clion.html).\n#\n# Do not add any other new dependencies into this file.\n\nworkspace(name = \"drake\")\n\n# Add some special heuristic logic for using CLion with Drake.\nload(\"//tools/clion:repository.bzl\", \"drake_clion_environment\")\n\ndrake_clion_environment()\n"
        },
        {
          "name": "__init__.py",
          "type": "blob",
          "size": 0.7109375,
          "content": "# It's brittle to have both drake-the-workspace and drake-the-lcmtypes-package\n# available on the sys.path at the same time in Bazel.\n#\n# To avoid import errors based on which one came first on the path, in our\n# //lcmtypes:lcmtypes_drake_py rule we depend on this file, and here (in\n# drake-the-workspace's package initialization) we use __path__ editing to\n# fold the two directories into the same package.\n#\n# We need to do it on a best-effort basis, because not all of our py_binary\n# rules use lcmtypes -- sometimes the lcmtypes will be absent from runfiles.\ntry:\n    import drake.lcmtypes\n    __path__.append(list(drake.lcmtypes.__path__)[0] + \"/drake\")\n    from drake.lcmtypes.drake import *\nexcept ImportError:\n    pass\n"
        },
        {
          "name": "bindings",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "geometry",
          "type": "tree",
          "content": null
        },
        {
          "name": "lcm",
          "type": "tree",
          "content": null
        },
        {
          "name": "lcmtypes",
          "type": "tree",
          "content": null
        },
        {
          "name": "manipulation",
          "type": "tree",
          "content": null
        },
        {
          "name": "math",
          "type": "tree",
          "content": null
        },
        {
          "name": "multibody",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.xml",
          "type": "blob",
          "size": 0.3916015625,
          "content": "<?xml version=\"1.0\"?>\n<?xml-model href=\"http://download.ros.org/schema/package_format2.xsd\" schematypens=\"http://www.w3.org/2001/XMLSchema\"?>\n<package format=\"2\">\n  <name>drake</name>\n  <version>0.0.0</version>\n  <description>\n    Model-Based Design and Verification for Robotics.\n  </description>\n  <maintainer email=\"drake-users@mit.edu\">Drake Users</maintainer>\n  <license>BSD</license>\n</package>\n"
        },
        {
          "name": "perception",
          "type": "tree",
          "content": null
        },
        {
          "name": "planning",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup",
          "type": "tree",
          "content": null
        },
        {
          "name": "solvers",
          "type": "tree",
          "content": null
        },
        {
          "name": "systems",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "tutorials",
          "type": "tree",
          "content": null
        },
        {
          "name": "visualization",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}