{
  "metadata": {
    "timestamp": 1736565563753,
    "page": 437,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Tencent/PhoenixGo",
      "stars": 2876,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".bazelrc",
          "type": "blob",
          "size": 0.0693359375,
          "content": "import %workspace%/third_party/tensorflow/.bazelrc\n\nbuild --config=opt\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2021484375,
          "content": "log\nconf\nckpt\nbazel-*\ncompile_commands.json\ntools/actions\nthird_party/bazel\n*.pyc\n.tf_configure.bazelrc\ntools/python_bin_path.sh\n*.pb.h\n*.pb.cc\n*.user\n*.VC.db\n*.VC.VC.opendb\n.vs\nx64\nx86\nRelease\nDebug\n.clang\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.3828125,
          "content": "dist: trusty\nsudo: required\n\nbefore_install:\n    - wget https://github.com/bazelbuild/bazel/releases/download/0.11.1/bazel-0.11.1-installer-linux-x86_64.sh\n    - chmod +x bazel-0.11.1-installer-linux-x86_64.sh\n    - ./bazel-0.11.1-installer-linux-x86_64.sh --user\n    - export PATH=\"$PATH:$HOME/bin\"\n\nscript:\n    - bazel build //mcts:mcts_main\n    - bazel build //dist:dist_zero_model_server\n"
        },
        {
          "name": "BUILD",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "LICENSE.TXT",
          "type": "blob",
          "size": 15.1923828125,
          "content": "Tencent is pleased to support the open source community by making PhoenixGo available.  \r\nCopyright (C) 2018 THL A29 Limited, a Tencent company.  All rights reserved.\r\nIf you have downloaded a copy of the PhoenixGo binary from Tencent, please note that the PhoenixGo binary is licensed under the BSD 3-Clause License.\r\nIf you have downloaded a copy of the PhoenixGo source code from Tencent, please note that PhoenixGo source code is licensed under the BSD 3-Clause License, except for the third-party components listed below which are subject to different license terms.  Your integration of PhoenixGo into your own projects may require compliance with the BSD 3-Clause License, as well as the other licenses applicable to the third-party components included within PhoenixGo.\r\nA copy of the BSD 3-Clause License is included in this file.\r\n\r\nOther dependencies and licenses:\r\n\r\nOpen Source Software Licensed Under the Apache License, Version 2.0: \r\nThe below software in this distribution may have been modified by THL A29 Limited (“Tencent Modifications”). All Tencent Modifications are Copyright (C) 2018 THL A29 Limited.\r\n----------------------------------------------------------------------------------------\r\n1. tensorflow  1.7.0\r\nCopyright 2018 The TensorFlow Authors.  All rights reserved.\r\n\r\n\r\nTerms of the Apache License, Version 2.0:\r\n--------------------------------------------------------------------\r\nApache License\r\n\r\nVersion 2.0, January 2004\r\n\r\nhttp://www.apache.org/licenses/\r\n\r\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\r\n\r\n1. Definitions.\r\n\r\n“License” shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.\r\n\r\n“Licensor” shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.\r\n\r\n“Legal Entity” shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, “control” means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.\r\n\r\n“You” (or “Your”) shall mean an individual or Legal Entity exercising permissions granted by this License.\r\n\r\n“Source” form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.\r\n\r\n“Object” form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.\r\n\r\n“Work” shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).\r\n\r\n“Derivative Works” shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.\r\n\r\n“Contribution” shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, “submitted” means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as “Not a Contribution.”\r\n\r\n“Contributor” shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.\r\n\r\n2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.\r\n\r\n3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.\r\n\r\n4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:\r\n\r\na) \tYou must give any other recipients of the Work or Derivative Works a copy of this License; and\r\n\r\nb) \tYou must cause any modified files to carry prominent notices stating that You changed the files; and\r\n\r\nc) \tYou must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and\r\n\r\nd) \tIf the Work includes a “NOTICE” text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. \r\n\r\nYou may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. \r\n\r\n5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.\r\n\r\n6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.\r\n\r\n7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an “AS IS” BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.\r\n\r\n8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.\r\n9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.\r\n\r\nEND OF TERMS AND CONDITIONS\r\n\r\nAPPENDIX: How to apply the Apache License to your work\r\nTo apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives.\r\n\r\nCopyright [yyyy] [name of copyright owner]\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\nhttp://www.apache.org/licenses/LICENSE-2.0\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\n\r\n\r\nOpen Source Software Licensed Under the Boost Software License, Version 1.0: \r\n----------------------------------------------------------------------------------------\r\n1. boost  v1.66.0\r\n\r\n(i) asio.hpp\r\nCopyright (c) 2003-2017 Christopher M. Kohlhoff (chris at kohlhoff dot com)\r\n\r\n(ii) filesystem.hpp\r\nCopyright Beman Dawes 2010\r\n\r\n\r\nTerms of the Boost Software License, Version 1.0:\r\n---------------------------------------------------\r\nBoost Software License - Version 1.0 - August 17th, 2003\r\n \t\r\nPermission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and accompanying documentation covered by this license (the \"Software\") to use, reproduce, display, distribute, execute, and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the Software is furnished to do so, all subject to the following:\r\n\r\nThe copyright notices in the Software and this entire statement, including the above license grant, this restriction and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all derivative works of the Software, unless such copies or derivative works are solely in the form of machine-executable object code generated by a source language processor.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n\r\n\r\nOpen Source Software Licensed Under the BSD 3-Clause License: \r\nThe below software in this distribution may have been modified by THL A29 Limited (“Tencent Modifications”). All Tencent Modifications are Copyright (C) 2018 THL A29 Limited.\r\n----------------------------------------------------------------------------------------\r\n1. glog  0.3.5\r\nCopyright (c) 2008, Google Inc.\r\nAll rights reserved.\r\n\r\n\r\nTerms of the BSD 3-Clause License:\r\n--------------------------------------------------------------------\r\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\r\n\r\n\tRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\r\n\tRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\r\n\tNeither the name of [copyright holder] nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n"
        },
        {
          "name": "PhoenixGo.sln",
          "type": "blob",
          "size": 1.2412109375,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio 14\nVisualStudioVersion = 14.0.25420.1\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"mcts_main\", \"mcts_main.vcxproj\", \"{ABF9E6C0-D295-4B39-B367-3B67DF2CA3E9}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|x64 = Debug|x64\n\t\tDebug|x86 = Debug|x86\n\t\tRelease|x64 = Release|x64\n\t\tRelease|x86 = Release|x86\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{ABF9E6C0-D295-4B39-B367-3B67DF2CA3E9}.Debug|x64.ActiveCfg = Debug|x64\n\t\t{ABF9E6C0-D295-4B39-B367-3B67DF2CA3E9}.Debug|x64.Build.0 = Debug|x64\n\t\t{ABF9E6C0-D295-4B39-B367-3B67DF2CA3E9}.Debug|x86.ActiveCfg = Debug|Win32\n\t\t{ABF9E6C0-D295-4B39-B367-3B67DF2CA3E9}.Debug|x86.Build.0 = Debug|Win32\n\t\t{ABF9E6C0-D295-4B39-B367-3B67DF2CA3E9}.Release|x64.ActiveCfg = Release|x64\n\t\t{ABF9E6C0-D295-4B39-B367-3B67DF2CA3E9}.Release|x64.Build.0 = Release|x64\n\t\t{ABF9E6C0-D295-4B39-B367-3B67DF2CA3E9}.Release|x86.ActiveCfg = Release|Win32\n\t\t{ABF9E6C0-D295-4B39-B367-3B67DF2CA3E9}.Release|x86.Build.0 = Release|Win32\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.78515625,
          "content": "![PhoenixGo](images/logo.jpg?raw=true)\n\n**PhoenixGo** is a Go AI program which implements the AlphaGo Zero paper\n\"[Mastering the game of Go without human knowledge](https://deepmind.com/documents/119/agz_unformatted_nature.pdf)\".\nIt is also known as \"BensonDarr\" and \"金毛测试\" in [FoxGo](http://weiqi.qq.com/), \n\"cronus\" in [CGOS](http://www.yss-aya.com/cgos/), and the champion of \n[World AI Go Tournament 2018](http://weiqi.qq.com/special/109) held in Fuzhou China.\n\nIf you use PhoenixGo in your project, please consider mentioning in your README.\n\nIf you use PhoenixGo in your research, please consider citing the library as follows:\n\n```\n@misc{PhoenixGo2018,\n  author = {Qinsong Zeng and Jianchang Zhang and Zhanpeng Zeng and Yongsheng Li and Ming Chen and Sifan Liu}\n  title = {PhoenixGo},\n  year = {2018},\n  journal = {GitHub repository},\n  howpublished = {\\url{https://github.com/Tencent/PhoenixGo}}\n}\n```\n\n## Building and Running\n\n### On Linux\n\n#### Requirements\n\n* GCC with C++11 support\n* Bazel (**0.19.2 is known-good**)\n* (Optional) CUDA and cuDNN for GPU support \n* (Optional) TensorRT (for accelerating computation on GPU, 3.0.4 is known-good)\n\nThe following environments have also been tested by independent contributors : \n[here](/docs/tested-versions.md). Other versions may work, but they have not been \ntested (especially for bazel).\n\n#### Download and Install Bazel \n\nBefore starting, you need to download and install bazel,\nsee [here](https://docs.bazel.build/versions/master/install.html).\n\nFor PhoenixGo, bazel (**0.19.2 is known-good**), read \n[Requirements](#requirements) for details\n\nIf you have issues on how to install or start bazel, you may want \nto try this all-in-one command line for easier building instead, see\n[FAQ question](/docs/FAQ.md#b0-it-is-too-hard-to-install-bazel-or-start-bazel)\n\n#### Building PhoenixGo with Bazel\n\nClone the repository and configure the building:\n\n```\n$ git clone https://github.com/Tencent/PhoenixGo.git\n$ cd PhoenixGo\n$ ./configure\n```\n\n`./configure` will start the bazel configure : ask where CUDA \nand TensorRT have been installed, specify them if need.\n\nThen build with bazel:\n\n```\n$ bazel build //mcts:mcts_main\n```\n\nDependices such as Tensorflow will be downloaded automatically. \nThe building process may take a long time.\n\nRecommendation : the bazel building uses a lot of RAM, \nif your building environment is lack of RAM, you may need to restart \nyour computer and exit other running programs to free as much RAM \nas possible.\n\n#### Running PhoenixGo\n\nDownload and extract the trained network:\n\n```\n$ wget https://github.com/Tencent/PhoenixGo/releases/download/trained-network-20b-v1/trained-network-20b-v1.tar.gz\n$ tar xvzf trained-network-20b-v1.tar.gz\n```\n\nThe PhoenixGo engine supports GTP \n[(Go Text Protocol)](https://senseis.xmp.net/?GoTextProtocol),\nwhich means it can be used with a GUI with GTP capability, such as \n[Sabaki](http://sabaki.yichuanshen.de).\nIt can also run on command-line GTP server tools like \n[gtp2ogs](https://github.com/online-go/gtp2ogs).\n\nBut PhoenixGo does not support all GTP commands, see \n[FAQ question](/docs/FAQ.md/#a11-gtp-command-error--invalid-command).\n\nThere are 2 ways to run PhoenixGo engine\n\n##### 1) start.sh : easy use\n\nRun the engine : `scripts/start.sh`\n\n`start.sh` will automatically detect the number of GPUs, run `mcts_main` \nwith proper config file,\nand write log files in directory `log`.\n\nYou could also use a customized config file (.conf) by running \n`scripts/start.sh {config_path}`.\nIf you want to do that, see also [#configure-guide](#configure-guide).\n\n##### 2) mcts_main : fully control\n\nIf you want to fully control all the options of `mcts_main` (such \nas changing log destination, or if start.sh is not compatible for your \nspecific use), you can run directly `bazel-bin/mcts/mcts_main` instead.\n\nFor a typical usage, these command line options should be added:\n- `--gtp` to enable GTP mode\n- `--config_path=replace/with/path/to/your/config/file` to specify the \npath to your config file\n- it is also needed to edit your config file (.conf) and manually add \nthe full path to ckpt, see \n[FAQ question](/docs/FAQ.md/#a5-ckptzerockpt-20b-v1fp32plan-error-no-such-file-or-directory).\nYou can also change options in config file, see \n[#configure-guide](#configure-guide).\n- for other command line options , see also \n[#command-line-options](#command-line-options) \nfor details, or run `./mcts_main --help` . A copy of the `--help` is \nprovided for your convenience [here](/docs/mcts-main-help.md)\n\nFor example:\n\n```\n$ bazel-bin/mcts/mcts_main --gtp --config_path=etc/mcts_1gpu.conf --logtostderr --v=0\n```\n\n#### (Optional) : Distribute mode\n\nPhoenixGo support running with distributed workers, if there are GPUs \non different machine.\n\nBuild the distribute worker:\n\n```\n$ bazel build //dist:dist_zero_model_server\n```\n\nRun `dist_zero_model_server` on distributed worker, **one for each GPU**.\n\n```\n$ CUDA_VISIBLE_DEVICES={gpu} bazel-bin/dist/dist_zero_model_server --server_address=\"0.0.0.0:{port}\" --logtostderr\n```\n\nFill `ip:port` of workers in the config file (`etc/mcts_dist.conf` is an \nexample config for 32 workers), and run the distributed master:\n\n```\n$ scripts/start.sh etc/mcts_dist.conf\n```\n\n### On macOS\n\n**Note: Tensorflow stop providing GPU support on macOS since 1.2.0, so you are only able to run on CPU.**\n\n#### Use Pre-built Binary\n\nDownload and extract \n[CPU-only version (macOS)](https://github.com/Tencent/PhoenixGo/releases/download/mac-x64-cpuonly-v1/PhoenixGo-mac-x64-cpuonly-v1.tgz)\n\nFollow the document included in the archive : using_phoenixgo_on_mac.pdf\n\n#### Building from Source\n\nSame as Linux.\n\n### On Windows\n\nRecommendation: See [FAQ question](/docs/FAQ.md/#a4-syntax-error-windows), \nto avoid syntax errors in config file and command line options on Windows.\n\n#### Use Pre-built Binary\n\n##### GPU version :\n\nThe GPU version is much faster, but works only with compatible nvidia GPU.\nIt supports this environment : \n- CUDA 9.0 only\n- cudnn 7.1.x (x is any number) or lower for CUDA 9.0\n- no AVX, AVX2, AVX512 instructions supported in this release (so it is \ncurrently much slower than the linux version)\n- there is no TensorRT support on Windows\n\nDownload and extract \n[GPU version (Windows)](https://github.com/Tencent/PhoenixGo/releases/download/win-x64-gpu-v1/PhoenixGo-win-x64-gpu-v1.zip)\n\nThen follow the document included in the archive : how to install \nphoenixgo.pdf\n\nnote : to support special features like CUDA 10.0 or AVX512 for example, \nyou can build your own build for windows, see \n[#79](https://github.com/Tencent/PhoenixGo/issues/79)\n\n##### CPU-only version : \n\nIf your GPU is not compatible, or if you don't want to use a GPU, you can download this \n[CPU-only version (Windows)](https://github.com/Tencent/PhoenixGo/releases/download/win-x64-cpuonly-v1/PhoenixGo-win-x64-cpuonly-v1.zip), \n\nFollow the document included in the archive : how to install \nphoenixgo.pdf\n\n## Configure Guide\n\nHere are some important options in the config file:\n\n* `num_eval_threads`: should equal to the number of GPUs\n* `num_search_threads`: should a bit larger than `num_eval_threads * eval_batch_size`\n* `timeout_ms_per_step`: how many time will used for each move\n* `max_simulations_per_step`: how many simulations(also called playouts) will do for each move\n* `gpu_list`: use which GPUs, separated by comma\n* `model_config -> train_dir`: directory where trained network stored\n* `model_config -> checkpoint_path`: use which checkpoint, get from `train_dir/checkpoint` if not set\n* `model_config -> enable_tensorrt`: use TensorRT or not\n* `model_config -> tensorrt_model_path`: use which TensorRT model, if `enable_tensorrt`\n* `max_search_tree_size`: the maximum number of tree nodes, change it depends on memory size\n* `max_children_per_node`: the maximum children of each node, change it depends on memory size\n* `enable_background_search`: pondering in opponent's time\n* `early_stop`: genmove may return before `timeout_ms_per_step`, if the result would not change any more\n* `unstable_overtime`: think `timeout_ms_per_step * time_factor` more if the result still unstable\n* `behind_overtime`: think `timeout_ms_per_step * time_factor` more if winrate less than `act_threshold`\n\nOptions for distribute mode:\n\n* `enable_dist`: enable distribute mode\n* `dist_svr_addrs`: `ip:port` of distributed workers, multiple lines, one `ip:port` in each line\n* `dist_config -> timeout_ms`: RPC timeout\n\nOptions for async distribute mode:\n\n> Async mode is used when there are huge number of distributed workers (more than 200),\n> which need too many eval threads and search threads in sync mode.\n> `etc/mcts_async_dist.conf` is an example config for 256 workers.\n\n* `enable_async`: enable async mode\n* `enable_dist`: enable distribute mode\n* `dist_svr_addrs`: multiple lines, comma sperated lists of `ip:port` for each line\n* `num_eval_threads`: should equal to number of `dist_svr_addrs` lines\n* `eval_task_queue_size`: tunning depend on number of distribute workers\n* `num_search_threads`: tunning depend on number of distribute workers\n\nRead `mcts/mcts_config.proto` for more config options.\n\n## Command Line Options\n\n`mcts_main` accept options from command line:\n\n* `--config_path`: path of config file\n* `--gtp`: run as a GTP engine, if disable, gen next move only\n* `--init_moves`: initial moves on the go board, for example usage, see \n[FAQ question](/docs/FAQ.md/#a8-how-make-phoenixgo-start-at-other-position-at-move-1-and-after)\n* `--gpu_list`: override `gpu_list` in config file\n* `--listen_port`: work with `--gtp`, run gtp engine on port in TCP protocol\n* `--allow_ip`: work with `--listen_port`, list of client ip allowed to connect\n* `--fork_per_request`: work with `--listen_port`, fork for each request or not\n\nGlog options are also supported:\n\n* `--logtostderr`: log message to stderr\n* `--log_dir`: log to files in this directory\n* `--minloglevel`: log level, 0 - INFO, 1 - WARNING, 2 - ERROR\n* `--v`: verbose log, `--v=1` for turning on some debug log, `--v=0` to turning off\n\n`mcts_main --help` for more command line options.\nA copy of the `--help` is provided for your convenience \n[here](/docs/mcts-main-help.md)\n\n## Analysis\n\nFor analysis purpose, an easy way to display the PV (variations for \nmain move path) is `--logtostderr --v=1` which will display the main \nmove path winrate and continuation of moves analyzed, see \n[FAQ question](/docs/FAQ.md/#a2-where-is-the-pv-analysis-) for details\n\nIt is also possible to analyse .sgf files using analysis tools such as :\n- [GoReviewPartner](https://github.com/pnprog/goreviewpartner) : \nan automated tool to analyse and/or review one or many .sgf files \n(saved as .rsgf file). It supports PhoenixGo and other bots. See \n[FAQ question](/docs/FAQ.md/#a25-how-to-analyzereview-one-or-many-sgf-files-with-goreviewpartner) \nfor details\n\n## FAQ\n\nYou will find a lot of useful and important information, also most common \nproblems and errors and how to fix them\n\nPlease take time to read the [FAQ](/docs/FAQ.md)\n"
        },
        {
          "name": "ThirdParty.props",
          "type": "blob",
          "size": 1.724609375,
          "content": "﻿<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <ImportGroup Label=\"PropertySheets\" />\n  <PropertyGroup Label=\"UserMacros\">\n    <tensorflow_SourcePath>C:\\Users\\jchzhang\\tensorflow</tensorflow_SourcePath>\n    <tensorflow_BuildPath>C:\\Users\\jchzhang\\tensorflow\\tensorflow\\contrib\\cmake\\build</tensorflow_BuildPath>\n    <glog_SourcePath>C:\\Users\\jchzhang\\glog-0.3.5</glog_SourcePath>\n    <glog_BuildPath>C:\\Users\\jchzhang\\glog-0.3.5</glog_BuildPath>\n    <gflags_SourcePath>C:\\Users\\jchzhang\\gflags-2.2.1</gflags_SourcePath>\n    <gflags_BuildPath>C:\\Users\\jchzhang\\gflags-2.2.1</gflags_BuildPath>\n    <boost_IncludePath>C:\\Users\\jchzhang\\boost_1_66_0</boost_IncludePath>\n    <boost_LibPath>C:\\Users\\jchzhang\\boost_1_66_0\\stage\\lib</boost_LibPath>\n  </PropertyGroup>\n  <PropertyGroup />\n  <ItemDefinitionGroup />\n  <ItemGroup>\n    <BuildMacro Include=\"tensorflow_SourcePath\">\n      <Value>$(tensorflow_SourcePath)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"tensorflow_BuildPath\">\n      <Value>$(tensorflow_BuildPath)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"glog_SourcePath\">\n      <Value>$(glog_SourcePath)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"glog_BuildPath\">\n      <Value>$(glog_BuildPath)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"gflags_SourcePath\">\n      <Value>$(gflags_SourcePath)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"gflags_BuildPath\">\n      <Value>$(gflags_BuildPath)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"boost_IncludePath\">\n      <Value>$(boost_IncludePath)</Value>\n    </BuildMacro>\n    <BuildMacro Include=\"boost_LibPath\">\n      <Value>$(boost_LibPath)</Value>\n    </BuildMacro>\n  </ItemGroup>\n</Project>"
        },
        {
          "name": "WORKSPACE",
          "type": "blob",
          "size": 1.7236328125,
          "content": "load(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\n\nhttp_archive(\n    name = \"com_github_google_glog\",\n    urls = [\"https://github.com/google/glog/archive/55cc27b6eca3d7906fc1a920ca95df7717deb4e7.tar.gz\"],\n    sha256 = \"4966f4233e4dcac53c7c7dd26054d17c045447e183bf9df7081575d2b888b95b\",\n    strip_prefix = \"glog-55cc27b6eca3d7906fc1a920ca95df7717deb4e7\",\n    patches = [\"//third_party/glog:glog.patch\"],\n)\n\nhttp_archive(\n    name = \"org_tensorflow\",\n    urls = [\"https://github.com/tensorflow/tensorflow/archive/v1.13.1.tar.gz\"],\n    sha256 = \"7cd19978e6bc7edc2c847bce19f95515a742b34ea5e28e4389dade35348f58ed\",\n    strip_prefix = \"tensorflow-1.13.1\",\n    patches = [\"//third_party/tensorflow:tensorflow.patch\"],\n)\n\nhttp_archive(\n    name = \"io_bazel_rules_closure\",\n    sha256 = \"a38539c5b5c358548e75b44141b4ab637bba7c4dc02b46b1f62a96d6433f56ae\",\n    strip_prefix = \"rules_closure-dbb96841cc0a5fb2664c37822803b06dab20c7d1\",\n    urls = [\n        \"https://mirror.bazel.build/github.com/bazelbuild/rules_closure/archive/dbb96841cc0a5fb2664c37822803b06dab20c7d1.tar.gz\",\n        \"https://github.com/bazelbuild/rules_closure/archive/dbb96841cc0a5fb2664c37822803b06dab20c7d1.tar.gz\",  # 2018-04-13\n    ],\n)\n\nload('@org_tensorflow//tensorflow:workspace.bzl', 'tf_workspace')\ntf_workspace(path_prefix = \"\", tf_repo_name = \"org_tensorflow\")\n\nhttp_archive(\n    name = \"com_github_nelhage_rules_boost\",\n    urls = [\"https://github.com/nelhage/rules_boost/archive/6d6fd834281cb8f8e758dd9ad76df86304bf1869.tar.gz\"],\n    sha256 = \"9adb4899e40fc10871bab1ff2e8feee950c194eec9940490f65a2761bbe6941d\",\n    strip_prefix = \"rules_boost-6d6fd834281cb8f8e758dd9ad76df86304bf1869\",\n)\n\nload(\"@com_github_nelhage_rules_boost//:boost/boost.bzl\", \"boost_deps\")\nboost_deps()\n"
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure",
          "type": "blob",
          "size": 0.2783203125,
          "content": "#!/usr/bin/env bash\n\nset -e\nset -o pipefail\n\nif [ -z \"$PYTHON_BIN_PATH\" ]; then\n  PYTHON_BIN_PATH=$(which python || which python3 || true)\nfi\n\n# Set all env variables\nCONFIGURE_DIR=$(dirname \"$0\")\n\"$PYTHON_BIN_PATH\" \"${CONFIGURE_DIR}/configure.py\" \"$@\"\n\necho \"Configuration finished\"\n\n"
        },
        {
          "name": "configure.py",
          "type": "blob",
          "size": 62.4619140625,
          "content": "# Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"configure script to get build parameters from user.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport argparse\nimport errno\nimport os\nimport platform\nimport re\nimport subprocess\nimport sys\n\n# pylint: disable=g-import-not-at-top\ntry:\n  from shutil import which\nexcept ImportError:\n  from distutils.spawn import find_executable as which\n# pylint: enable=g-import-not-at-top\n\n_DEFAULT_CUDA_VERSION = '10.0'\n_DEFAULT_CUDNN_VERSION = '7'\n_DEFAULT_CUDA_COMPUTE_CAPABILITIES = '3.5,7.0'\n_DEFAULT_CUDA_PATH = '/usr/local/cuda'\n_DEFAULT_CUDA_PATH_LINUX = '/opt/cuda'\n_DEFAULT_CUDA_PATH_WIN = ('C:/Program Files/NVIDIA GPU Computing '\n                          'Toolkit/CUDA/v%s' % _DEFAULT_CUDA_VERSION)\n_TF_OPENCL_VERSION = '1.2'\n_DEFAULT_COMPUTECPP_TOOLKIT_PATH = '/usr/local/computecpp'\n_DEFAULT_TRISYCL_INCLUDE_DIR = '/usr/local/triSYCL/include'\n_SUPPORTED_ANDROID_NDK_VERSIONS = [10, 11, 12, 13, 14, 15, 16, 17, 18]\n\n_DEFAULT_PROMPT_ASK_ATTEMPTS = 10\n\n_TF_BAZELRC_FILENAME = '.tf_configure.bazelrc'\n_TF_WORKSPACE_ROOT = ''\n_TF_BAZELRC = ''\n\nNCCL_LIB_PATHS = [\n    'lib64/', 'lib/powerpc64le-linux-gnu/', 'lib/x86_64-linux-gnu/', ''\n]\n\nif platform.machine() == 'ppc64le':\n  _DEFAULT_TENSORRT_PATH_LINUX = '/usr/lib/powerpc64le-linux-gnu/'\nelse:\n  _DEFAULT_TENSORRT_PATH_LINUX = '/usr/lib/%s-linux-gnu' % platform.machine()\n\n\nclass UserInputError(Exception):\n  pass\n\n\ndef is_windows():\n  return platform.system() == 'Windows'\n\n\ndef is_linux():\n  return platform.system() == 'Linux'\n\n\ndef is_macos():\n  return platform.system() == 'Darwin'\n\n\ndef is_ppc64le():\n  return platform.machine() == 'ppc64le'\n\n\ndef is_cygwin():\n  return platform.system().startswith('CYGWIN_NT')\n\n\ndef get_input(question):\n  try:\n    try:\n      answer = raw_input(question)\n    except NameError:\n      answer = input(question)  # pylint: disable=bad-builtin\n  except EOFError:\n    answer = ''\n  return answer\n\n\ndef symlink_force(target, link_name):\n  \"\"\"Force symlink, equivalent of 'ln -sf'.\n\n  Args:\n    target: items to link to.\n    link_name: name of the link.\n  \"\"\"\n  try:\n    os.symlink(target, link_name)\n  except OSError as e:\n    if e.errno == errno.EEXIST:\n      os.remove(link_name)\n      os.symlink(target, link_name)\n    else:\n      raise e\n\n\ndef sed_in_place(filename, old, new):\n  \"\"\"Replace old string with new string in file.\n\n  Args:\n    filename: string for filename.\n    old: string to replace.\n    new: new string to replace to.\n  \"\"\"\n  with open(filename, 'r') as f:\n    filedata = f.read()\n  newdata = filedata.replace(old, new)\n  with open(filename, 'w') as f:\n    f.write(newdata)\n\n\ndef write_to_bazelrc(line):\n  with open(_TF_BAZELRC, 'a') as f:\n    f.write(line + '\\n')\n\n\ndef write_action_env_to_bazelrc(var_name, var):\n  write_to_bazelrc('build --action_env %s=\"%s\"' % (var_name, str(var)))\n\n\ndef run_shell(cmd, allow_non_zero=False):\n  if allow_non_zero:\n    try:\n      output = subprocess.check_output(cmd)\n    except subprocess.CalledProcessError as e:\n      output = e.output\n  else:\n    output = subprocess.check_output(cmd)\n  return output.decode('UTF-8').strip()\n\n\ndef cygpath(path):\n  \"\"\"Convert path from posix to windows.\"\"\"\n  return os.path.abspath(path).replace('\\\\', '/')\n\n\ndef get_python_path(environ_cp, python_bin_path):\n  \"\"\"Get the python site package paths.\"\"\"\n  python_paths = []\n  if environ_cp.get('PYTHONPATH'):\n    python_paths = environ_cp.get('PYTHONPATH').split(':')\n  try:\n    library_paths = run_shell([\n        python_bin_path, '-c',\n        'import site; print(\"\\\\n\".join(site.getsitepackages()))'\n    ]).split('\\n')\n  except subprocess.CalledProcessError:\n    library_paths = [\n        run_shell([\n            python_bin_path, '-c',\n            'from distutils.sysconfig import get_python_lib;'\n            'print(get_python_lib())'\n        ])\n    ]\n\n  all_paths = set(python_paths + library_paths)\n\n  paths = []\n  for path in all_paths:\n    if os.path.isdir(path):\n      paths.append(path)\n  return paths\n\n\ndef get_python_major_version(python_bin_path):\n  \"\"\"Get the python major version.\"\"\"\n  return run_shell([python_bin_path, '-c', 'import sys; print(sys.version[0])'])\n\n\ndef setup_python(environ_cp):\n  \"\"\"Setup python related env variables.\"\"\"\n  # Get PYTHON_BIN_PATH, default is the current running python.\n  default_python_bin_path = sys.executable\n  ask_python_bin_path = ('Please specify the location of python. [Default is '\n                         '%s]: ') % default_python_bin_path\n  while True:\n    python_bin_path = get_from_env_or_user_or_default(\n        environ_cp, 'PYTHON_BIN_PATH', ask_python_bin_path,\n        default_python_bin_path)\n    # Check if the path is valid\n    if os.path.isfile(python_bin_path) and os.access(python_bin_path, os.X_OK):\n      break\n    elif not os.path.exists(python_bin_path):\n      print('Invalid python path: %s cannot be found.' % python_bin_path)\n    else:\n      print('%s is not executable.  Is it the python binary?' % python_bin_path)\n    environ_cp['PYTHON_BIN_PATH'] = ''\n\n  # Convert python path to Windows style before checking lib and version\n  if is_windows() or is_cygwin():\n    python_bin_path = cygpath(python_bin_path)\n\n  # Get PYTHON_LIB_PATH\n  python_lib_path = environ_cp.get('PYTHON_LIB_PATH')\n  if not python_lib_path:\n    python_lib_paths = get_python_path(environ_cp, python_bin_path)\n    if environ_cp.get('USE_DEFAULT_PYTHON_LIB_PATH') == '1':\n      python_lib_path = python_lib_paths[0]\n    else:\n      print('Found possible Python library paths:\\n  %s' %\n            '\\n  '.join(python_lib_paths))\n      default_python_lib_path = python_lib_paths[0]\n      python_lib_path = get_input(\n          'Please input the desired Python library path to use.  '\n          'Default is [%s]\\n' % python_lib_paths[0])\n      if not python_lib_path:\n        python_lib_path = default_python_lib_path\n    environ_cp['PYTHON_LIB_PATH'] = python_lib_path\n\n  _ = get_python_major_version(python_bin_path)\n\n  # Convert python path to Windows style before writing into bazel.rc\n  if is_windows() or is_cygwin():\n    python_lib_path = cygpath(python_lib_path)\n\n  # Set-up env variables used by python_configure.bzl\n  write_action_env_to_bazelrc('PYTHON_BIN_PATH', python_bin_path)\n  write_action_env_to_bazelrc('PYTHON_LIB_PATH', python_lib_path)\n  write_to_bazelrc('build --python_path=\\\"%s\"' % python_bin_path)\n  environ_cp['PYTHON_BIN_PATH'] = python_bin_path\n\n  # If choosen python_lib_path is from a path specified in the PYTHONPATH\n  # variable, need to tell bazel to include PYTHONPATH\n  if environ_cp.get('PYTHONPATH'):\n    python_paths = environ_cp.get('PYTHONPATH').split(':')\n    if python_lib_path in python_paths:\n      write_action_env_to_bazelrc('PYTHONPATH', environ_cp.get('PYTHONPATH'))\n\n  # Write tools/python_bin_path.sh\n  with open(\n      os.path.join(_TF_WORKSPACE_ROOT, 'tools', 'python_bin_path.sh'),\n      'w') as f:\n    f.write('export PYTHON_BIN_PATH=\"%s\"' % python_bin_path)\n\n\ndef reset_tf_configure_bazelrc():\n  \"\"\"Reset file that contains customized config settings.\"\"\"\n  open(_TF_BAZELRC, 'w').close()\n\ndef cleanup_makefile():\n  \"\"\"Delete any leftover BUILD files from the Makefile build.\n\n  These files could interfere with Bazel parsing.\n  \"\"\"\n  makefile_download_dir = os.path.join(_TF_WORKSPACE_ROOT, 'tensorflow',\n                                       'contrib', 'makefile', 'downloads')\n  if os.path.isdir(makefile_download_dir):\n    for root, _, filenames in os.walk(makefile_download_dir):\n      for f in filenames:\n        if f.endswith('BUILD'):\n          os.remove(os.path.join(root, f))\n\n\ndef get_var(environ_cp,\n            var_name,\n            query_item,\n            enabled_by_default,\n            question=None,\n            yes_reply=None,\n            no_reply=None):\n  \"\"\"Get boolean input from user.\n\n  If var_name is not set in env, ask user to enable query_item or not. If the\n  response is empty, use the default.\n\n  Args:\n    environ_cp: copy of the os.environ.\n    var_name: string for name of environment variable, e.g. \"TF_NEED_HDFS\".\n    query_item: string for feature related to the variable, e.g. \"Hadoop File\n      System\".\n    enabled_by_default: boolean for default behavior.\n    question: optional string for how to ask for user input.\n    yes_reply: optional string for reply when feature is enabled.\n    no_reply: optional string for reply when feature is disabled.\n\n  Returns:\n    boolean value of the variable.\n\n  Raises:\n    UserInputError: if an environment variable is set, but it cannot be\n      interpreted as a boolean indicator, assume that the user has made a\n      scripting error, and will continue to provide invalid input.\n      Raise the error to avoid infinitely looping.\n  \"\"\"\n  if not question:\n    question = 'Do you wish to build TensorFlow with %s support?' % query_item\n  if not yes_reply:\n    yes_reply = '%s support will be enabled for TensorFlow.' % query_item\n  if not no_reply:\n    no_reply = 'No %s' % yes_reply\n\n  yes_reply += '\\n'\n  no_reply += '\\n'\n\n  if enabled_by_default:\n    question += ' [Y/n]: '\n  else:\n    question += ' [y/N]: '\n\n  var = environ_cp.get(var_name)\n  if var is not None:\n    var_content = var.strip().lower()\n    true_strings = ('1', 't', 'true', 'y', 'yes')\n    false_strings = ('0', 'f', 'false', 'n', 'no')\n    if var_content in true_strings:\n      var = True\n    elif var_content in false_strings:\n      var = False\n    else:\n      raise UserInputError(\n          'Environment variable %s must be set as a boolean indicator.\\n'\n          'The following are accepted as TRUE : %s.\\n'\n          'The following are accepted as FALSE: %s.\\n'\n          'Current value is %s.' % (var_name, ', '.join(true_strings),\n                                    ', '.join(false_strings), var))\n\n  while var is None:\n    user_input_origin = get_input(question)\n    user_input = user_input_origin.strip().lower()\n    if user_input == 'y':\n      print(yes_reply)\n      var = True\n    elif user_input == 'n':\n      print(no_reply)\n      var = False\n    elif not user_input:\n      if enabled_by_default:\n        print(yes_reply)\n        var = True\n      else:\n        print(no_reply)\n        var = False\n    else:\n      print('Invalid selection: %s' % user_input_origin)\n  return var\n\n\ndef set_build_var(environ_cp,\n                  var_name,\n                  query_item,\n                  option_name,\n                  enabled_by_default,\n                  bazel_config_name=None):\n  \"\"\"Set if query_item will be enabled for the build.\n\n  Ask user if query_item will be enabled. Default is used if no input is given.\n  Set subprocess environment variable and write to .bazelrc if enabled.\n\n  Args:\n    environ_cp: copy of the os.environ.\n    var_name: string for name of environment variable, e.g. \"TF_NEED_HDFS\".\n    query_item: string for feature related to the variable, e.g. \"Hadoop File\n      System\".\n    option_name: string for option to define in .bazelrc.\n    enabled_by_default: boolean for default behavior.\n    bazel_config_name: Name for Bazel --config argument to enable build feature.\n  \"\"\"\n\n  var = str(int(get_var(environ_cp, var_name, query_item, enabled_by_default)))\n  environ_cp[var_name] = var\n  if var == '1':\n    write_to_bazelrc(\n        'build:%s --define %s=true' % (bazel_config_name, option_name))\n    write_to_bazelrc('build --config=%s' % bazel_config_name)\n  elif bazel_config_name is not None:\n    # TODO(mikecase): Migrate all users of configure.py to use --config Bazel\n    # options and not to set build configs through environment variables.\n    write_to_bazelrc(\n        'build:%s --define %s=true' % (bazel_config_name, option_name))\n\n\ndef set_action_env_var(environ_cp,\n                       var_name,\n                       query_item,\n                       enabled_by_default,\n                       question=None,\n                       yes_reply=None,\n                       no_reply=None):\n  \"\"\"Set boolean action_env variable.\n\n  Ask user if query_item will be enabled. Default is used if no input is given.\n  Set environment variable and write to .bazelrc.\n\n  Args:\n    environ_cp: copy of the os.environ.\n    var_name: string for name of environment variable, e.g. \"TF_NEED_HDFS\".\n    query_item: string for feature related to the variable, e.g. \"Hadoop File\n      System\".\n    enabled_by_default: boolean for default behavior.\n    question: optional string for how to ask for user input.\n    yes_reply: optional string for reply when feature is enabled.\n    no_reply: optional string for reply when feature is disabled.\n  \"\"\"\n  var = int(\n      get_var(environ_cp, var_name, query_item, enabled_by_default, question,\n              yes_reply, no_reply))\n\n  write_action_env_to_bazelrc(var_name, var)\n  environ_cp[var_name] = str(var)\n\n\ndef convert_version_to_int(version):\n  \"\"\"Convert a version number to a integer that can be used to compare.\n\n  Version strings of the form X.YZ and X.Y.Z-xxxxx are supported. The\n  'xxxxx' part, for instance 'homebrew' on OS/X, is ignored.\n\n  Args:\n    version: a version to be converted\n\n  Returns:\n    An integer if converted successfully, otherwise return None.\n  \"\"\"\n  version = version.split('-')[0]\n  version_segments = version.split('.')\n  for seg in version_segments:\n    if not seg.isdigit():\n      return None\n\n  version_str = ''.join(['%03d' % int(seg) for seg in version_segments])\n  return int(version_str)\n\n\ndef check_bazel_version(min_version, max_version):\n  \"\"\"Check installed bazel version is between min_version and max_version.\n\n  Args:\n    min_version: string for minimum bazel version.\n    max_version: string for maximum bazel version.\n\n  Returns:\n    The bazel version detected.\n  \"\"\"\n  if which('bazel') is None:\n    print('Cannot find bazel. Please install bazel.')\n    sys.exit(0)\n  curr_version = run_shell(\n      ['bazel', '--batch', '--bazelrc=/dev/null', 'version'])\n\n  for line in curr_version.split('\\n'):\n    if 'Build label: ' in line:\n      curr_version = line.split('Build label: ')[1]\n      break\n\n  min_version_int = convert_version_to_int(min_version)\n  curr_version_int = convert_version_to_int(curr_version)\n  max_version_int = convert_version_to_int(max_version)\n\n  # Check if current bazel version can be detected properly.\n  if not curr_version_int:\n    print('WARNING: current bazel installation is not a release version.')\n    print('Make sure you are running at least bazel %s' % min_version)\n    return curr_version\n\n  print('You have bazel %s installed.' % curr_version)\n\n  if curr_version_int < min_version_int:\n    print('Please upgrade your bazel installation to version %s or higher to '\n          'build TensorFlow!' % min_version)\n    sys.exit(1)\n  if (curr_version_int > max_version_int and\n      'TF_IGNORE_MAX_BAZEL_VERSION' not in os.environ):\n    print('Please downgrade your bazel installation to version %s or lower to '\n          'build TensorFlow!' % max_version)\n    sys.exit(1)\n  return curr_version\n\n\ndef set_cc_opt_flags(environ_cp):\n  \"\"\"Set up architecture-dependent optimization flags.\n\n  Also append CC optimization flags to bazel.rc..\n\n  Args:\n    environ_cp: copy of the os.environ.\n  \"\"\"\n  if is_ppc64le():\n    # gcc on ppc64le does not support -march, use mcpu instead\n    default_cc_opt_flags = '-mcpu=native'\n  elif is_windows():\n    default_cc_opt_flags = '/arch:AVX'\n  else:\n    default_cc_opt_flags = '-march=native -Wno-sign-compare'\n  question = ('Please specify optimization flags to use during compilation when'\n              ' bazel option \"--config=opt\" is specified [Default is %s]: '\n             ) % default_cc_opt_flags\n  cc_opt_flags = get_from_env_or_user_or_default(environ_cp, 'CC_OPT_FLAGS',\n                                                 question, default_cc_opt_flags)\n  for opt in cc_opt_flags.split():\n    write_to_bazelrc('build:opt --copt=%s' % opt)\n  # It should be safe on the same build host.\n  if not is_ppc64le() and not is_windows():\n    write_to_bazelrc('build:opt --host_copt=-march=native')\n  write_to_bazelrc('build:opt --define with_default_optimizations=true')\n\n\ndef set_tf_cuda_clang(environ_cp):\n  \"\"\"set TF_CUDA_CLANG action_env.\n\n  Args:\n    environ_cp: copy of the os.environ.\n  \"\"\"\n  question = 'Do you want to use clang as CUDA compiler?'\n  yes_reply = 'Clang will be used as CUDA compiler.'\n  no_reply = 'nvcc will be used as CUDA compiler.'\n  set_action_env_var(\n      environ_cp,\n      'TF_CUDA_CLANG',\n      None,\n      False,\n      question=question,\n      yes_reply=yes_reply,\n      no_reply=no_reply)\n\n\ndef set_tf_download_clang(environ_cp):\n  \"\"\"Set TF_DOWNLOAD_CLANG action_env.\"\"\"\n  question = 'Do you wish to download a fresh release of clang? (Experimental)'\n  yes_reply = 'Clang will be downloaded and used to compile tensorflow.'\n  no_reply = 'Clang will not be downloaded.'\n  set_action_env_var(\n      environ_cp,\n      'TF_DOWNLOAD_CLANG',\n      None,\n      False,\n      question=question,\n      yes_reply=yes_reply,\n      no_reply=no_reply)\n\n\ndef get_from_env_or_user_or_default(environ_cp, var_name, ask_for_var,\n                                    var_default):\n  \"\"\"Get var_name either from env, or user or default.\n\n  If var_name has been set as environment variable, use the preset value, else\n  ask for user input. If no input is provided, the default is used.\n\n  Args:\n    environ_cp: copy of the os.environ.\n    var_name: string for name of environment variable, e.g. \"TF_NEED_HDFS\".\n    ask_for_var: string for how to ask for user input.\n    var_default: default value string.\n\n  Returns:\n    string value for var_name\n  \"\"\"\n  var = environ_cp.get(var_name)\n  if not var:\n    var = get_input(ask_for_var)\n    print('\\n')\n  if not var:\n    var = var_default\n  return var\n\n\ndef set_clang_cuda_compiler_path(environ_cp):\n  \"\"\"Set CLANG_CUDA_COMPILER_PATH.\"\"\"\n  default_clang_path = which('clang') or ''\n  ask_clang_path = ('Please specify which clang should be used as device and '\n                    'host compiler. [Default is %s]: ') % default_clang_path\n\n  while True:\n    clang_cuda_compiler_path = get_from_env_or_user_or_default(\n        environ_cp, 'CLANG_CUDA_COMPILER_PATH', ask_clang_path,\n        default_clang_path)\n    if os.path.exists(clang_cuda_compiler_path):\n      break\n\n    # Reset and retry\n    print('Invalid clang path: %s cannot be found.' % clang_cuda_compiler_path)\n    environ_cp['CLANG_CUDA_COMPILER_PATH'] = ''\n\n  # Set CLANG_CUDA_COMPILER_PATH\n  environ_cp['CLANG_CUDA_COMPILER_PATH'] = clang_cuda_compiler_path\n  write_action_env_to_bazelrc('CLANG_CUDA_COMPILER_PATH',\n                              clang_cuda_compiler_path)\n\n\ndef prompt_loop_or_load_from_env(environ_cp,\n                                 var_name,\n                                 var_default,\n                                 ask_for_var,\n                                 check_success,\n                                 error_msg,\n                                 suppress_default_error=False,\n                                 n_ask_attempts=_DEFAULT_PROMPT_ASK_ATTEMPTS):\n  \"\"\"Loop over user prompts for an ENV param until receiving a valid response.\n\n  For the env param var_name, read from the environment or verify user input\n  until receiving valid input. When done, set var_name in the environ_cp to its\n  new value.\n\n  Args:\n    environ_cp: (Dict) copy of the os.environ.\n    var_name: (String) string for name of environment variable, e.g. \"TF_MYVAR\".\n    var_default: (String) default value string.\n    ask_for_var: (String) string for how to ask for user input.\n    check_success: (Function) function that takes one argument and returns a\n      boolean. Should return True if the value provided is considered valid. May\n      contain a complex error message if error_msg does not provide enough\n      information. In that case, set suppress_default_error to True.\n    error_msg: (String) String with one and only one '%s'. Formatted with each\n      invalid response upon check_success(input) failure.\n    suppress_default_error: (Bool) Suppress the above error message in favor of\n      one from the check_success function.\n    n_ask_attempts: (Integer) Number of times to query for valid input before\n      raising an error and quitting.\n\n  Returns:\n    [String] The value of var_name after querying for input.\n\n  Raises:\n    UserInputError: if a query has been attempted n_ask_attempts times without\n      success, assume that the user has made a scripting error, and will\n      continue to provide invalid input. Raise the error to avoid infinitely\n      looping.\n  \"\"\"\n  default = environ_cp.get(var_name) or var_default\n  full_query = '%s [Default is %s]: ' % (\n      ask_for_var,\n      default,\n  )\n\n  for _ in range(n_ask_attempts):\n    val = get_from_env_or_user_or_default(environ_cp, var_name, full_query,\n                                          default)\n    if check_success(val):\n      break\n    if not suppress_default_error:\n      print(error_msg % val)\n    environ_cp[var_name] = ''\n  else:\n    raise UserInputError(\n        'Invalid %s setting was provided %d times in a row. '\n        'Assuming to be a scripting mistake.' % (var_name, n_ask_attempts))\n\n  environ_cp[var_name] = val\n  return val\n\n\ndef create_android_ndk_rule(environ_cp):\n  \"\"\"Set ANDROID_NDK_HOME and write Android NDK WORKSPACE rule.\"\"\"\n  if is_windows() or is_cygwin():\n    default_ndk_path = cygpath(\n        '%s/Android/Sdk/ndk-bundle' % environ_cp['APPDATA'])\n  elif is_macos():\n    default_ndk_path = '%s/library/Android/Sdk/ndk-bundle' % environ_cp['HOME']\n  else:\n    default_ndk_path = '%s/Android/Sdk/ndk-bundle' % environ_cp['HOME']\n\n  def valid_ndk_path(path):\n    return (os.path.exists(path) and\n            os.path.exists(os.path.join(path, 'source.properties')))\n\n  android_ndk_home_path = prompt_loop_or_load_from_env(\n      environ_cp,\n      var_name='ANDROID_NDK_HOME',\n      var_default=default_ndk_path,\n      ask_for_var='Please specify the home path of the Android NDK to use.',\n      check_success=valid_ndk_path,\n      error_msg=('The path %s or its child file \"source.properties\" '\n                 'does not exist.'))\n  write_action_env_to_bazelrc('ANDROID_NDK_HOME', android_ndk_home_path)\n  write_action_env_to_bazelrc('ANDROID_NDK_API_LEVEL',\n                              check_ndk_level(android_ndk_home_path))\n\n\ndef create_android_sdk_rule(environ_cp):\n  \"\"\"Set Android variables and write Android SDK WORKSPACE rule.\"\"\"\n  if is_windows() or is_cygwin():\n    default_sdk_path = cygpath('%s/Android/Sdk' % environ_cp['APPDATA'])\n  elif is_macos():\n    default_sdk_path = '%s/library/Android/Sdk' % environ_cp['HOME']\n  else:\n    default_sdk_path = '%s/Android/Sdk' % environ_cp['HOME']\n\n  def valid_sdk_path(path):\n    return (os.path.exists(path) and\n            os.path.exists(os.path.join(path, 'platforms')) and\n            os.path.exists(os.path.join(path, 'build-tools')))\n\n  android_sdk_home_path = prompt_loop_or_load_from_env(\n      environ_cp,\n      var_name='ANDROID_SDK_HOME',\n      var_default=default_sdk_path,\n      ask_for_var='Please specify the home path of the Android SDK to use.',\n      check_success=valid_sdk_path,\n      error_msg=('Either %s does not exist, or it does not contain the '\n                 'subdirectories \"platforms\" and \"build-tools\".'))\n\n  platforms = os.path.join(android_sdk_home_path, 'platforms')\n  api_levels = sorted(os.listdir(platforms))\n  api_levels = [x.replace('android-', '') for x in api_levels]\n\n  def valid_api_level(api_level):\n    return os.path.exists(\n        os.path.join(android_sdk_home_path, 'platforms',\n                     'android-' + api_level))\n\n  android_api_level = prompt_loop_or_load_from_env(\n      environ_cp,\n      var_name='ANDROID_API_LEVEL',\n      var_default=api_levels[-1],\n      ask_for_var=('Please specify the Android SDK API level to use. '\n                   '[Available levels: %s]') % api_levels,\n      check_success=valid_api_level,\n      error_msg='Android-%s is not present in the SDK path.')\n\n  build_tools = os.path.join(android_sdk_home_path, 'build-tools')\n  versions = sorted(os.listdir(build_tools))\n\n  def valid_build_tools(version):\n    return os.path.exists(\n        os.path.join(android_sdk_home_path, 'build-tools', version))\n\n  android_build_tools_version = prompt_loop_or_load_from_env(\n      environ_cp,\n      var_name='ANDROID_BUILD_TOOLS_VERSION',\n      var_default=versions[-1],\n      ask_for_var=('Please specify an Android build tools version to use. '\n                   '[Available versions: %s]') % versions,\n      check_success=valid_build_tools,\n      error_msg=('The selected SDK does not have build-tools version %s '\n                 'available.'))\n\n  write_action_env_to_bazelrc('ANDROID_BUILD_TOOLS_VERSION',\n                              android_build_tools_version)\n  write_action_env_to_bazelrc('ANDROID_SDK_API_LEVEL', android_api_level)\n  write_action_env_to_bazelrc('ANDROID_SDK_HOME', android_sdk_home_path)\n\n\ndef check_ndk_level(android_ndk_home_path):\n  \"\"\"Check the revision number of an Android NDK path.\"\"\"\n  properties_path = '%s/source.properties' % android_ndk_home_path\n  if is_windows() or is_cygwin():\n    properties_path = cygpath(properties_path)\n  with open(properties_path, 'r') as f:\n    filedata = f.read()\n\n  revision = re.search(r'Pkg.Revision = (\\d+)', filedata)\n  if revision:\n    ndk_api_level = revision.group(1)\n  else:\n    raise Exception('Unable to parse NDK revision.')\n  if int(ndk_api_level) not in _SUPPORTED_ANDROID_NDK_VERSIONS:\n    print('WARNING: The API level of the NDK in %s is %s, which is not '\n          'supported by Bazel (officially supported versions: %s). Please use '\n          'another version. Compiling Android targets may result in confusing '\n          'errors.\\n' % (android_ndk_home_path, ndk_api_level,\n                         _SUPPORTED_ANDROID_NDK_VERSIONS))\n  return ndk_api_level\n\n\ndef set_gcc_host_compiler_path(environ_cp):\n  \"\"\"Set GCC_HOST_COMPILER_PATH.\"\"\"\n  default_gcc_host_compiler_path = which('gcc') or ''\n  cuda_bin_symlink = '%s/bin/gcc' % environ_cp.get('CUDA_TOOLKIT_PATH')\n\n  if os.path.islink(cuda_bin_symlink):\n    # os.readlink is only available in linux\n    default_gcc_host_compiler_path = os.path.realpath(cuda_bin_symlink)\n\n  gcc_host_compiler_path = prompt_loop_or_load_from_env(\n      environ_cp,\n      var_name='GCC_HOST_COMPILER_PATH',\n      var_default=default_gcc_host_compiler_path,\n      ask_for_var=\n      'Please specify which gcc should be used by nvcc as the host compiler.',\n      check_success=os.path.exists,\n      error_msg='Invalid gcc path. %s cannot be found.',\n  )\n\n  write_action_env_to_bazelrc('GCC_HOST_COMPILER_PATH', gcc_host_compiler_path)\n\n\ndef reformat_version_sequence(version_str, sequence_count):\n  \"\"\"Reformat the version string to have the given number of sequences.\n\n  For example:\n  Given (7, 2) -> 7.0\n        (7.0.1, 2) -> 7.0\n        (5, 1) -> 5\n        (5.0.3.2, 1) -> 5\n\n  Args:\n      version_str: String, the version string.\n      sequence_count: int, an integer.\n\n  Returns:\n      string, reformatted version string.\n  \"\"\"\n  v = version_str.split('.')\n  if len(v) < sequence_count:\n    v = v + (['0'] * (sequence_count - len(v)))\n\n  return '.'.join(v[:sequence_count])\n\n\ndef set_tf_cuda_version(environ_cp):\n  \"\"\"Set CUDA_TOOLKIT_PATH and TF_CUDA_VERSION.\"\"\"\n  ask_cuda_version = (\n      'Please specify the CUDA SDK version you want to use. '\n      '[Leave empty to default to CUDA %s]: ') % _DEFAULT_CUDA_VERSION\n\n  for _ in range(_DEFAULT_PROMPT_ASK_ATTEMPTS):\n    # Configure the Cuda SDK version to use.\n    tf_cuda_version = get_from_env_or_user_or_default(\n        environ_cp, 'TF_CUDA_VERSION', ask_cuda_version, _DEFAULT_CUDA_VERSION)\n    tf_cuda_version = reformat_version_sequence(str(tf_cuda_version), 2)\n\n    # Find out where the CUDA toolkit is installed\n    default_cuda_path = _DEFAULT_CUDA_PATH\n    if is_windows() or is_cygwin():\n      default_cuda_path = cygpath(\n          environ_cp.get('CUDA_PATH', _DEFAULT_CUDA_PATH_WIN))\n    elif is_linux():\n      # If the default doesn't exist, try an alternative default.\n      if (not os.path.exists(default_cuda_path)\n         ) and os.path.exists(_DEFAULT_CUDA_PATH_LINUX):\n        default_cuda_path = _DEFAULT_CUDA_PATH_LINUX\n    ask_cuda_path = ('Please specify the location where CUDA %s toolkit is'\n                     ' installed. Refer to README.md for more details. '\n                     '[Default is %s]: ') % (tf_cuda_version, default_cuda_path)\n    cuda_toolkit_path = get_from_env_or_user_or_default(\n        environ_cp, 'CUDA_TOOLKIT_PATH', ask_cuda_path, default_cuda_path)\n    if is_windows() or is_cygwin():\n      cuda_toolkit_path = cygpath(cuda_toolkit_path)\n\n    if is_windows():\n      cuda_rt_lib_paths = ['lib/x64/cudart.lib']\n    elif is_linux():\n      cuda_rt_lib_paths = [\n          '%s/libcudart.so.%s' % (x, tf_cuda_version) for x in [\n              'lib64',\n              'lib/powerpc64le-linux-gnu',\n              'lib/x86_64-linux-gnu',\n          ]\n      ]\n    elif is_macos():\n      cuda_rt_lib_paths = ['lib/libcudart.%s.dylib' % tf_cuda_version]\n\n    cuda_toolkit_paths_full = [\n        os.path.join(cuda_toolkit_path, x) for x in cuda_rt_lib_paths\n    ]\n    if any(os.path.exists(x) for x in cuda_toolkit_paths_full):\n      break\n\n    # Reset and retry\n    print('Invalid path to CUDA %s toolkit. %s cannot be found' %\n          (tf_cuda_version, cuda_toolkit_paths_full))\n    environ_cp['TF_CUDA_VERSION'] = ''\n    environ_cp['CUDA_TOOLKIT_PATH'] = ''\n\n  else:\n    raise UserInputError('Invalid TF_CUDA_SETTING setting was provided %d '\n                         'times in a row. Assuming to be a scripting mistake.' %\n                         _DEFAULT_PROMPT_ASK_ATTEMPTS)\n\n  # Set CUDA_TOOLKIT_PATH and TF_CUDA_VERSION\n  environ_cp['CUDA_TOOLKIT_PATH'] = cuda_toolkit_path\n  write_action_env_to_bazelrc('CUDA_TOOLKIT_PATH', cuda_toolkit_path)\n  environ_cp['TF_CUDA_VERSION'] = tf_cuda_version\n  write_action_env_to_bazelrc('TF_CUDA_VERSION', tf_cuda_version)\n\n\ndef set_tf_cudnn_version(environ_cp):\n  \"\"\"Set CUDNN_INSTALL_PATH and TF_CUDNN_VERSION.\"\"\"\n  ask_cudnn_version = (\n      'Please specify the cuDNN version you want to use. '\n      '[Leave empty to default to cuDNN %s]: ') % _DEFAULT_CUDNN_VERSION\n\n  for _ in range(_DEFAULT_PROMPT_ASK_ATTEMPTS):\n    tf_cudnn_version = get_from_env_or_user_or_default(\n        environ_cp, 'TF_CUDNN_VERSION', ask_cudnn_version,\n        _DEFAULT_CUDNN_VERSION)\n    tf_cudnn_version = reformat_version_sequence(str(tf_cudnn_version), 1)\n\n    default_cudnn_path = environ_cp.get('CUDA_TOOLKIT_PATH')\n    ask_cudnn_path = (r'Please specify the location where cuDNN %s library is '\n                      'installed. Refer to README.md for more details. [Default'\n                      ' is %s]: ') % (tf_cudnn_version, default_cudnn_path)\n    cudnn_install_path = get_from_env_or_user_or_default(\n        environ_cp, 'CUDNN_INSTALL_PATH', ask_cudnn_path, default_cudnn_path)\n\n    # Result returned from \"read\" will be used unexpanded. That make \"~\"\n    # unusable. Going through one more level of expansion to handle that.\n    cudnn_install_path = os.path.realpath(\n        os.path.expanduser(cudnn_install_path))\n    if is_windows() or is_cygwin():\n      cudnn_install_path = cygpath(cudnn_install_path)\n\n    if is_windows():\n      cuda_dnn_lib_path = 'lib/x64/cudnn.lib'\n      cuda_dnn_lib_alt_path = 'lib/x64/cudnn.lib'\n    elif is_linux():\n      cuda_dnn_lib_path = 'lib64/libcudnn.so.%s' % tf_cudnn_version\n      cuda_dnn_lib_alt_path = 'libcudnn.so.%s' % tf_cudnn_version\n    elif is_macos():\n      cuda_dnn_lib_path = 'lib/libcudnn.%s.dylib' % tf_cudnn_version\n      cuda_dnn_lib_alt_path = 'libcudnn.%s.dylib' % tf_cudnn_version\n\n    cuda_dnn_lib_path_full = os.path.join(cudnn_install_path, cuda_dnn_lib_path)\n    cuda_dnn_lib_alt_path_full = os.path.join(cudnn_install_path,\n                                              cuda_dnn_lib_alt_path)\n    if os.path.exists(cuda_dnn_lib_path_full) or os.path.exists(\n        cuda_dnn_lib_alt_path_full):\n      break\n\n    # Try another alternative for Linux\n    if is_linux():\n      ldconfig_bin = which('ldconfig') or '/sbin/ldconfig'\n      cudnn_path_from_ldconfig = run_shell([ldconfig_bin, '-p'])\n      cudnn_path_from_ldconfig = re.search('.*libcudnn.so .* => (.*)',\n                                           cudnn_path_from_ldconfig)\n      if cudnn_path_from_ldconfig:\n        cudnn_path_from_ldconfig = cudnn_path_from_ldconfig.group(1)\n        if os.path.exists(\n            '%s.%s' % (cudnn_path_from_ldconfig, tf_cudnn_version)):\n          cudnn_install_path = os.path.dirname(cudnn_path_from_ldconfig)\n          break\n\n    # Reset and Retry\n    print(\n        'Invalid path to cuDNN %s toolkit. None of the following files can be '\n        'found:' % tf_cudnn_version)\n    print(cuda_dnn_lib_path_full)\n    print(cuda_dnn_lib_alt_path_full)\n    if is_linux():\n      print('%s.%s' % (cudnn_path_from_ldconfig, tf_cudnn_version))\n\n    environ_cp['TF_CUDNN_VERSION'] = ''\n  else:\n    raise UserInputError('Invalid TF_CUDNN setting was provided %d '\n                         'times in a row. Assuming to be a scripting mistake.' %\n                         _DEFAULT_PROMPT_ASK_ATTEMPTS)\n\n  # Set CUDNN_INSTALL_PATH and TF_CUDNN_VERSION\n  environ_cp['CUDNN_INSTALL_PATH'] = cudnn_install_path\n  write_action_env_to_bazelrc('CUDNN_INSTALL_PATH', cudnn_install_path)\n  environ_cp['TF_CUDNN_VERSION'] = tf_cudnn_version\n  write_action_env_to_bazelrc('TF_CUDNN_VERSION', tf_cudnn_version)\n\n\ndef is_cuda_compatible(lib, cuda_ver, cudnn_ver):\n  \"\"\"Check compatibility between given library and cudnn/cudart libraries.\"\"\"\n  ldd_bin = which('ldd') or '/usr/bin/ldd'\n  ldd_out = run_shell([ldd_bin, lib], True)\n  ldd_out = ldd_out.split(os.linesep)\n  cudnn_pattern = re.compile('.*libcudnn.so\\\\.?(.*) =>.*$')\n  cuda_pattern = re.compile('.*libcudart.so\\\\.?(.*) =>.*$')\n  cudnn = None\n  cudart = None\n  cudnn_ok = True  # assume no cudnn dependency by default\n  cuda_ok = True  # assume no cuda dependency by default\n  for line in ldd_out:\n    if 'libcudnn.so' in line:\n      cudnn = cudnn_pattern.search(line)\n      cudnn_ok = False\n    elif 'libcudart.so' in line:\n      cudart = cuda_pattern.search(line)\n      cuda_ok = False\n  if cudnn and len(cudnn.group(1)):\n    cudnn = convert_version_to_int(cudnn.group(1))\n  if cudart and len(cudart.group(1)):\n    cudart = convert_version_to_int(cudart.group(1))\n  if cudnn is not None:\n    cudnn_ok = (cudnn == cudnn_ver)\n  if cudart is not None:\n    cuda_ok = (cudart == cuda_ver)\n  return cudnn_ok and cuda_ok\n\n\ndef set_tf_tensorrt_install_path(environ_cp):\n  \"\"\"Set TENSORRT_INSTALL_PATH and TF_TENSORRT_VERSION.\n\n  Adapted from code contributed by Sami Kama (https://github.com/samikama).\n\n  Args:\n    environ_cp: copy of the os.environ.\n\n  Raises:\n    ValueError: if this method was called under non-Linux platform.\n    UserInputError: if user has provided invalid input multiple times.\n  \"\"\"\n  if not is_linux():\n    raise ValueError('Currently TensorRT is only supported on Linux platform.')\n\n  # Ask user whether to add TensorRT support.\n  if str(int(get_var(environ_cp, 'TF_NEED_TENSORRT', 'TensorRT',\n                     False))) != '1':\n    return\n\n  for _ in range(_DEFAULT_PROMPT_ASK_ATTEMPTS):\n    ask_tensorrt_path = (r'Please specify the location where TensorRT is '\n                         'installed. [Default is %s]:') % (\n                             _DEFAULT_TENSORRT_PATH_LINUX)\n    trt_install_path = get_from_env_or_user_or_default(\n        environ_cp, 'TENSORRT_INSTALL_PATH', ask_tensorrt_path,\n        _DEFAULT_TENSORRT_PATH_LINUX)\n\n    # Result returned from \"read\" will be used unexpanded. That make \"~\"\n    # unusable. Going through one more level of expansion to handle that.\n    trt_install_path = os.path.realpath(os.path.expanduser(trt_install_path))\n\n    def find_libs(search_path):\n      \"\"\"Search for libnvinfer.so in \"search_path\".\"\"\"\n      fl = set()\n      if os.path.exists(search_path) and os.path.isdir(search_path):\n        fl.update([\n            os.path.realpath(os.path.join(search_path, x))\n            for x in os.listdir(search_path)\n            if 'libnvinfer.so' in x\n        ])\n      return fl\n\n    possible_files = find_libs(trt_install_path)\n    possible_files.update(find_libs(os.path.join(trt_install_path, 'lib')))\n    possible_files.update(find_libs(os.path.join(trt_install_path, 'lib64')))\n    cuda_ver = convert_version_to_int(environ_cp['TF_CUDA_VERSION'])\n    cudnn_ver = convert_version_to_int(environ_cp['TF_CUDNN_VERSION'])\n    nvinfer_pattern = re.compile('.*libnvinfer.so.?(.*)$')\n    highest_ver = [0, None, None]\n\n    for lib_file in possible_files:\n      if is_cuda_compatible(lib_file, cuda_ver, cudnn_ver):\n        matches = nvinfer_pattern.search(lib_file)\n        if not matches.groups():\n          continue\n        ver_str = matches.group(1)\n        ver = convert_version_to_int(ver_str) if len(ver_str) else 0\n        if ver > highest_ver[0]:\n          highest_ver = [ver, ver_str, lib_file]\n    if highest_ver[1] is not None:\n      trt_install_path = os.path.dirname(highest_ver[2])\n      tf_tensorrt_version = highest_ver[1]\n      break\n\n    # Try another alternative from ldconfig.\n    ldconfig_bin = which('ldconfig') or '/sbin/ldconfig'\n    ldconfig_output = run_shell([ldconfig_bin, '-p'])\n    search_result = re.search('.*libnvinfer.so\\\\.?([0-9.]*).* => (.*)',\n                              ldconfig_output)\n    if search_result:\n      libnvinfer_path_from_ldconfig = search_result.group(2)\n      if os.path.exists(libnvinfer_path_from_ldconfig):\n        if is_cuda_compatible(libnvinfer_path_from_ldconfig, cuda_ver,\n                              cudnn_ver):\n          trt_install_path = os.path.dirname(libnvinfer_path_from_ldconfig)\n          tf_tensorrt_version = search_result.group(1)\n          break\n\n    # Reset and Retry\n    if possible_files:\n      print('TensorRT libraries found in one the following directories',\n            'are not compatible with selected cuda and cudnn installations')\n      print(trt_install_path)\n      print(os.path.join(trt_install_path, 'lib'))\n      print(os.path.join(trt_install_path, 'lib64'))\n      if search_result:\n        print(libnvinfer_path_from_ldconfig)\n    else:\n      print(\n          'Invalid path to TensorRT. None of the following files can be found:')\n      print(trt_install_path)\n      print(os.path.join(trt_install_path, 'lib'))\n      print(os.path.join(trt_install_path, 'lib64'))\n      if search_result:\n        print(libnvinfer_path_from_ldconfig)\n\n  else:\n    raise UserInputError('Invalid TF_TENSORRT setting was provided %d '\n                         'times in a row. Assuming to be a scripting mistake.' %\n                         _DEFAULT_PROMPT_ASK_ATTEMPTS)\n\n  # Set TENSORRT_INSTALL_PATH and TF_TENSORRT_VERSION\n  environ_cp['TENSORRT_INSTALL_PATH'] = trt_install_path\n  write_action_env_to_bazelrc('TENSORRT_INSTALL_PATH', trt_install_path)\n  environ_cp['TF_TENSORRT_VERSION'] = tf_tensorrt_version\n  write_action_env_to_bazelrc('TF_TENSORRT_VERSION', tf_tensorrt_version)\n\n\ndef set_tf_nccl_install_path(environ_cp):\n  \"\"\"Set NCCL_INSTALL_PATH, NCCL_HDR_PATH and TF_NCCL_VERSION.\n\n  Args:\n    environ_cp: copy of the os.environ.\n\n  Raises:\n    ValueError: if this method was called under non-Linux platform.\n    UserInputError: if user has provided invalid input multiple times.\n  \"\"\"\n  if not is_linux():\n    raise ValueError('Currently NCCL is only supported on Linux platforms.')\n\n  ask_nccl_version = (\n      'Please specify the locally installed NCCL version you want to use. '\n      '[Default is to use https://github.com/nvidia/nccl]: ')\n\n  for _ in range(_DEFAULT_PROMPT_ASK_ATTEMPTS):\n    tf_nccl_version = get_from_env_or_user_or_default(\n        environ_cp, 'TF_NCCL_VERSION', ask_nccl_version, '')\n\n    if not tf_nccl_version:\n      break  # No need to get install path, building the open source code.\n\n    tf_nccl_version = reformat_version_sequence(str(tf_nccl_version), 1)\n\n    # Look with ldconfig first if we can find the library in paths\n    # like /usr/lib/x86_64-linux-gnu and the header file in the corresponding\n    # include directory. This is where the NCCL .deb packages install them.\n\n    # First check to see if NCCL is in the ldconfig.\n    # If its found, use that location.\n    if is_linux():\n      ldconfig_bin = which('ldconfig') or '/sbin/ldconfig'\n      nccl2_path_from_ldconfig = run_shell([ldconfig_bin, '-p'])\n      nccl2_path_from_ldconfig = re.search('.*libnccl.so .* => (.*)',\n                                           nccl2_path_from_ldconfig)\n    if nccl2_path_from_ldconfig:\n      nccl2_path_from_ldconfig = nccl2_path_from_ldconfig.group(1)\n      if os.path.exists('%s.%s' % (nccl2_path_from_ldconfig, tf_nccl_version)):\n        nccl_install_path = os.path.dirname(nccl2_path_from_ldconfig)\n        print('NCCL libraries found in ' + nccl2_path_from_ldconfig)\n\n        # Check if this is the main system lib location\n        if re.search('.*linux-gnu', nccl_install_path):\n          trunc_nccl_install_path = '/usr'\n          print('This looks like a system path.')\n        else:\n          trunc_nccl_install_path = nccl_install_path + '/..'\n\n        # Look for header\n        nccl_hdr_path = trunc_nccl_install_path + '/include'\n        print('Assuming NCCL header path is ' + nccl_hdr_path)\n        if os.path.exists(nccl_hdr_path + '/nccl.h'):\n          # Set NCCL_INSTALL_PATH\n          environ_cp['NCCL_INSTALL_PATH'] = nccl_install_path\n          write_action_env_to_bazelrc('NCCL_INSTALL_PATH', nccl_install_path)\n\n          # Set NCCL_HDR_PATH\n          environ_cp['NCCL_HDR_PATH'] = nccl_hdr_path\n          write_action_env_to_bazelrc('NCCL_HDR_PATH', nccl_hdr_path)\n          break\n        else:\n          print(\n              'The header for NCCL2 cannot be found. Please install the libnccl-dev package.'\n          )\n      else:\n        print('NCCL2 is listed by ldconfig but the library is not found. '\n              'Your ldconfig is out of date. Please run sudo ldconfig.')\n    else:\n      # NCCL is not found in ldconfig. Ask the user for the location.\n      default_nccl_path = environ_cp.get('CUDA_TOOLKIT_PATH')\n      ask_nccl_path = (\n          r'Please specify the location where NCCL %s library is '\n          'installed. Refer to README.md for more details. [Default '\n          'is %s]:') % (tf_nccl_version, default_nccl_path)\n      nccl_install_path = get_from_env_or_user_or_default(\n          environ_cp, 'NCCL_INSTALL_PATH', ask_nccl_path, default_nccl_path)\n\n      # Result returned from \"read\" will be used unexpanded. That make \"~\"\n      # unusable. Going through one more level of expansion to handle that.\n      nccl_install_path = os.path.realpath(\n          os.path.expanduser(nccl_install_path))\n      if is_windows() or is_cygwin():\n        nccl_install_path = cygpath(nccl_install_path)\n\n      nccl_lib_path = ''\n      if is_windows():\n        nccl_lib_path = 'lib/x64/nccl.lib'\n      elif is_linux():\n        nccl_lib_filename = 'libnccl.so.%s' % tf_nccl_version\n        nccl_lpath = '%s/lib/%s' % (nccl_install_path, nccl_lib_filename)\n        if not os.path.exists(nccl_lpath):\n          for relative_path in NCCL_LIB_PATHS:\n            path = '%s/%s%s' % (nccl_install_path, relative_path,\n                                nccl_lib_filename)\n            if os.path.exists(path):\n              print('NCCL found at ' + path)\n              nccl_lib_path = path\n              break\n        else:\n          nccl_lib_path = nccl_lpath\n      elif is_macos():\n        nccl_lib_path = 'lib/libnccl.%s.dylib' % tf_nccl_version\n\n      nccl_lib_path = os.path.join(nccl_install_path, nccl_lib_path)\n      nccl_hdr_path = os.path.join(\n          os.path.dirname(nccl_lib_path), '../include/nccl.h')\n      print('Assuming NCCL header path is ' + nccl_hdr_path)\n      if os.path.exists(nccl_lib_path) and os.path.exists(nccl_hdr_path):\n        # Set NCCL_INSTALL_PATH\n        environ_cp['NCCL_INSTALL_PATH'] = os.path.dirname(nccl_lib_path)\n        write_action_env_to_bazelrc('NCCL_INSTALL_PATH',\n                                    os.path.dirname(nccl_lib_path))\n\n        # Set NCCL_HDR_PATH\n        environ_cp['NCCL_HDR_PATH'] = os.path.dirname(nccl_hdr_path)\n        write_action_env_to_bazelrc('NCCL_HDR_PATH',\n                                    os.path.dirname(nccl_hdr_path))\n        break\n\n      # Reset and Retry\n      print(\n          'Invalid path to NCCL %s toolkit, %s or %s not found. Please use the '\n          'O/S agnostic package of NCCL 2' % (tf_nccl_version, nccl_lib_path,\n                                              nccl_hdr_path))\n\n      environ_cp['TF_NCCL_VERSION'] = ''\n  else:\n    raise UserInputError('Invalid TF_NCCL setting was provided %d '\n                         'times in a row. Assuming to be a scripting mistake.' %\n                         _DEFAULT_PROMPT_ASK_ATTEMPTS)\n\n  # Set TF_NCCL_VERSION\n  environ_cp['TF_NCCL_VERSION'] = tf_nccl_version\n  write_action_env_to_bazelrc('TF_NCCL_VERSION', tf_nccl_version)\n\ndef get_native_cuda_compute_capabilities(environ_cp):\n  \"\"\"Get native cuda compute capabilities.\n\n  Args:\n    environ_cp: copy of the os.environ.\n\n  Returns:\n    string of native cuda compute capabilities, separated by comma.\n  \"\"\"\n  device_query_bin = os.path.join(\n      environ_cp.get('CUDA_TOOLKIT_PATH'), 'extras/demo_suite/deviceQuery')\n  if os.path.isfile(device_query_bin) and os.access(device_query_bin, os.X_OK):\n    try:\n      output = run_shell(device_query_bin).split('\\n')\n      pattern = re.compile('[0-9]*\\\\.[0-9]*')\n      output = [pattern.search(x) for x in output if 'Capability' in x]\n      output = ','.join(x.group() for x in output if x is not None)\n    except subprocess.CalledProcessError:\n      output = ''\n  else:\n    output = ''\n  return output\n\n\ndef set_tf_cuda_compute_capabilities(environ_cp):\n  \"\"\"Set TF_CUDA_COMPUTE_CAPABILITIES.\"\"\"\n  while True:\n    native_cuda_compute_capabilities = get_native_cuda_compute_capabilities(\n        environ_cp)\n    if not native_cuda_compute_capabilities:\n      default_cuda_compute_capabilities = _DEFAULT_CUDA_COMPUTE_CAPABILITIES\n    else:\n      default_cuda_compute_capabilities = native_cuda_compute_capabilities\n\n    ask_cuda_compute_capabilities = (\n        'Please specify a list of comma-separated '\n        'Cuda compute capabilities you want to '\n        'build with.\\nYou can find the compute '\n        'capability of your device at: '\n        'https://developer.nvidia.com/cuda-gpus.\\nPlease'\n        ' note that each additional compute '\n        'capability significantly increases your '\n        'build time and binary size. [Default is: %s]: ' %\n        default_cuda_compute_capabilities)\n    tf_cuda_compute_capabilities = get_from_env_or_user_or_default(\n        environ_cp, 'TF_CUDA_COMPUTE_CAPABILITIES',\n        ask_cuda_compute_capabilities, default_cuda_compute_capabilities)\n    # Check whether all capabilities from the input is valid\n    all_valid = True\n    # Remove all whitespace characters before splitting the string\n    # that users may insert by accident, as this will result in error\n    tf_cuda_compute_capabilities = ''.join(tf_cuda_compute_capabilities.split())\n    for compute_capability in tf_cuda_compute_capabilities.split(','):\n      m = re.match('[0-9]+.[0-9]+', compute_capability)\n      if not m:\n        print('Invalid compute capability: ' % compute_capability)\n        all_valid = False\n      else:\n        ver = int(m.group(0).split('.')[0])\n        if ver < 3:\n          print('Only compute capabilities 3.0 or higher are supported.')\n          all_valid = False\n\n    if all_valid:\n      break\n\n    # Reset and Retry\n    environ_cp['TF_CUDA_COMPUTE_CAPABILITIES'] = ''\n\n  # Set TF_CUDA_COMPUTE_CAPABILITIES\n  environ_cp['TF_CUDA_COMPUTE_CAPABILITIES'] = tf_cuda_compute_capabilities\n  write_action_env_to_bazelrc('TF_CUDA_COMPUTE_CAPABILITIES',\n                              tf_cuda_compute_capabilities)\n\n\ndef set_other_cuda_vars(environ_cp):\n  \"\"\"Set other CUDA related variables.\"\"\"\n  # If CUDA is enabled, always use GPU during build and test.\n  if environ_cp.get('TF_CUDA_CLANG') == '1':\n    write_to_bazelrc('build --config=cuda_clang')\n    write_to_bazelrc('test --config=cuda_clang')\n  else:\n    write_to_bazelrc('build --config=cuda')\n    write_to_bazelrc('test --config=cuda')\n\n\ndef set_host_cxx_compiler(environ_cp):\n  \"\"\"Set HOST_CXX_COMPILER.\"\"\"\n  default_cxx_host_compiler = which('g++') or ''\n\n  host_cxx_compiler = prompt_loop_or_load_from_env(\n      environ_cp,\n      var_name='HOST_CXX_COMPILER',\n      var_default=default_cxx_host_compiler,\n      ask_for_var=('Please specify which C++ compiler should be used as the '\n                   'host C++ compiler.'),\n      check_success=os.path.exists,\n      error_msg='Invalid C++ compiler path. %s cannot be found.',\n  )\n\n  write_action_env_to_bazelrc('HOST_CXX_COMPILER', host_cxx_compiler)\n\n\ndef set_host_c_compiler(environ_cp):\n  \"\"\"Set HOST_C_COMPILER.\"\"\"\n  default_c_host_compiler = which('gcc') or ''\n\n  host_c_compiler = prompt_loop_or_load_from_env(\n      environ_cp,\n      var_name='HOST_C_COMPILER',\n      var_default=default_c_host_compiler,\n      ask_for_var=('Please specify which C compiler should be used as the host '\n                   'C compiler.'),\n      check_success=os.path.exists,\n      error_msg='Invalid C compiler path. %s cannot be found.',\n  )\n\n  write_action_env_to_bazelrc('HOST_C_COMPILER', host_c_compiler)\n\n\ndef set_computecpp_toolkit_path(environ_cp):\n  \"\"\"Set COMPUTECPP_TOOLKIT_PATH.\"\"\"\n\n  def toolkit_exists(toolkit_path):\n    \"\"\"Check if a computecpp toolkit path is valid.\"\"\"\n    if is_linux():\n      sycl_rt_lib_path = 'lib/libComputeCpp.so'\n    else:\n      sycl_rt_lib_path = ''\n\n    sycl_rt_lib_path_full = os.path.join(toolkit_path, sycl_rt_lib_path)\n    exists = os.path.exists(sycl_rt_lib_path_full)\n    if not exists:\n      print('Invalid SYCL %s library path. %s cannot be found' %\n            (_TF_OPENCL_VERSION, sycl_rt_lib_path_full))\n    return exists\n\n  computecpp_toolkit_path = prompt_loop_or_load_from_env(\n      environ_cp,\n      var_name='COMPUTECPP_TOOLKIT_PATH',\n      var_default=_DEFAULT_COMPUTECPP_TOOLKIT_PATH,\n      ask_for_var=(\n          'Please specify the location where ComputeCpp for SYCL %s is '\n          'installed.' % _TF_OPENCL_VERSION),\n      check_success=toolkit_exists,\n      error_msg='Invalid SYCL compiler path. %s cannot be found.',\n      suppress_default_error=True)\n\n  write_action_env_to_bazelrc('COMPUTECPP_TOOLKIT_PATH',\n                              computecpp_toolkit_path)\n\n\ndef set_trisycl_include_dir(environ_cp):\n  \"\"\"Set TRISYCL_INCLUDE_DIR.\"\"\"\n\n  ask_trisycl_include_dir = ('Please specify the location of the triSYCL '\n                             'include directory. (Use --config=sycl_trisycl '\n                             'when building with Bazel) '\n                             '[Default is %s]: ') % (\n                                 _DEFAULT_TRISYCL_INCLUDE_DIR)\n\n  while True:\n    trisycl_include_dir = get_from_env_or_user_or_default(\n        environ_cp, 'TRISYCL_INCLUDE_DIR', ask_trisycl_include_dir,\n        _DEFAULT_TRISYCL_INCLUDE_DIR)\n    if os.path.exists(trisycl_include_dir):\n      break\n\n    print('Invalid triSYCL include directory, %s cannot be found' %\n          (trisycl_include_dir))\n\n  # Set TRISYCL_INCLUDE_DIR\n  environ_cp['TRISYCL_INCLUDE_DIR'] = trisycl_include_dir\n  write_action_env_to_bazelrc('TRISYCL_INCLUDE_DIR', trisycl_include_dir)\n\n\ndef set_mpi_home(environ_cp):\n  \"\"\"Set MPI_HOME.\"\"\"\n\n  default_mpi_home = which('mpirun') or which('mpiexec') or ''\n  default_mpi_home = os.path.dirname(os.path.dirname(default_mpi_home))\n\n  def valid_mpi_path(mpi_home):\n    exists = (\n        os.path.exists(os.path.join(mpi_home, 'include')) and\n        (os.path.exists(os.path.join(mpi_home, 'lib')) or\n         os.path.exists(os.path.join(mpi_home, 'lib64')) or\n         os.path.exists(os.path.join(mpi_home, 'lib32'))))\n    if not exists:\n      print(\n          'Invalid path to the MPI Toolkit. %s or %s or %s or %s cannot be found'\n          % (os.path.join(mpi_home, 'include'),\n             os.path.exists(os.path.join(mpi_home, 'lib')),\n             os.path.exists(os.path.join(mpi_home, 'lib64')),\n             os.path.exists(os.path.join(mpi_home, 'lib32'))))\n    return exists\n\n  _ = prompt_loop_or_load_from_env(\n      environ_cp,\n      var_name='MPI_HOME',\n      var_default=default_mpi_home,\n      ask_for_var='Please specify the MPI toolkit folder.',\n      check_success=valid_mpi_path,\n      error_msg='',\n      suppress_default_error=True)\n\n\ndef set_other_mpi_vars(environ_cp):\n  \"\"\"Set other MPI related variables.\"\"\"\n  # Link the MPI header files\n  mpi_home = environ_cp.get('MPI_HOME')\n  symlink_force('%s/include/mpi.h' % mpi_home, 'third_party/mpi/mpi.h')\n\n  # Determine if we use OpenMPI or MVAPICH, these require different header files\n  # to be included here to make bazel dependency checker happy\n  if os.path.exists(os.path.join(mpi_home, 'include/mpi_portable_platform.h')):\n    symlink_force(\n        os.path.join(mpi_home, 'include/mpi_portable_platform.h'),\n        'third_party/mpi/mpi_portable_platform.h')\n    # TODO(gunan): avoid editing files in configure\n    sed_in_place('third_party/mpi/mpi.bzl', 'MPI_LIB_IS_OPENMPI=False',\n                 'MPI_LIB_IS_OPENMPI=True')\n  else:\n    # MVAPICH / MPICH\n    symlink_force(\n        os.path.join(mpi_home, 'include/mpio.h'), 'third_party/mpi/mpio.h')\n    symlink_force(\n        os.path.join(mpi_home, 'include/mpicxx.h'), 'third_party/mpi/mpicxx.h')\n    # TODO(gunan): avoid editing files in configure\n    sed_in_place('third_party/mpi/mpi.bzl', 'MPI_LIB_IS_OPENMPI=True',\n                 'MPI_LIB_IS_OPENMPI=False')\n\n  if os.path.exists(os.path.join(mpi_home, 'lib/libmpi.so')):\n    symlink_force(\n        os.path.join(mpi_home, 'lib/libmpi.so'), 'third_party/mpi/libmpi.so')\n  elif os.path.exists(os.path.join(mpi_home, 'lib64/libmpi.so')):\n    symlink_force(\n        os.path.join(mpi_home, 'lib64/libmpi.so'), 'third_party/mpi/libmpi.so')\n  elif os.path.exists(os.path.join(mpi_home, 'lib32/libmpi.so')):\n    symlink_force(\n        os.path.join(mpi_home, 'lib32/libmpi.so'), 'third_party/mpi/libmpi.so')\n\n  else:\n    raise ValueError(\n        'Cannot find the MPI library file in %s/lib or %s/lib64 or %s/lib32' %\n        mpi_home, mpi_home, mpi_home)\n\n\ndef set_system_libs_flag(environ_cp):\n  syslibs = environ_cp.get('TF_SYSTEM_LIBS', '')\n  if syslibs:\n    if ',' in syslibs:\n      syslibs = ','.join(sorted(syslibs.split(',')))\n    else:\n      syslibs = ','.join(sorted(syslibs.split()))\n    write_action_env_to_bazelrc('TF_SYSTEM_LIBS', syslibs)\n\n  if 'PREFIX' in environ_cp:\n    write_to_bazelrc('build --define=PREFIX=%s' % environ_cp['PREFIX'])\n  if 'LIBDIR' in environ_cp:\n    write_to_bazelrc('build --define=LIBDIR=%s' % environ_cp['LIBDIR'])\n  if 'INCLUDEDIR' in environ_cp:\n    write_to_bazelrc('build --define=INCLUDEDIR=%s' % environ_cp['INCLUDEDIR'])\n\n\ndef set_windows_build_flags(environ_cp):\n  \"\"\"Set Windows specific build options.\"\"\"\n  # The non-monolithic build is not supported yet\n  write_to_bazelrc('build --config monolithic')\n  # Suppress warning messages\n  write_to_bazelrc('build --copt=-w --host_copt=-w')\n  # Output more verbose information when something goes wrong\n  write_to_bazelrc('build --verbose_failures')\n  # The host and target platforms are the same in Windows build. So we don't\n  # have to distinct them. This avoids building the same targets twice.\n  write_to_bazelrc('build --distinct_host_configuration=false')\n  # Enable short object file path to avoid long path issue on Windows.\n  # TODO(pcloudy): Remove this flag when upgrading Bazel to 0.16.0\n  # Short object file path will be enabled by default.\n  write_to_bazelrc('build --experimental_shortened_obj_file_path=true')\n\n  if get_var(\n      environ_cp, 'TF_OVERRIDE_EIGEN_STRONG_INLINE', 'Eigen strong inline',\n      True, ('Would you like to override eigen strong inline for some C++ '\n             'compilation to reduce the compilation time?'),\n      'Eigen strong inline overridden.', 'Not overriding eigen strong inline, '\n      'some compilations could take more than 20 mins.'):\n    # Due to a known MSVC compiler issue\n    # https://github.com/tensorflow/tensorflow/issues/10521\n    # Overriding eigen strong inline speeds up the compiling of\n    # conv_grad_ops_3d.cc and conv_ops_3d.cc by 20 minutes,\n    # but this also hurts the performance. Let users decide what they want.\n    write_to_bazelrc('build --define=override_eigen_strong_inline=true')\n\n\ndef config_info_line(name, help_text):\n  \"\"\"Helper function to print formatted help text for Bazel config options.\"\"\"\n  print('\\t--config=%-12s\\t# %s' % (name, help_text))\n\n\ndef main():\n  global _TF_WORKSPACE_ROOT\n  global _TF_BAZELRC\n\n  parser = argparse.ArgumentParser()\n  parser.add_argument(\n      '--workspace',\n      type=str,\n      default=os.path.abspath(os.path.dirname(__file__)),\n      help='The absolute path to your active Bazel workspace.')\n  args = parser.parse_args()\n\n  _TF_WORKSPACE_ROOT = args.workspace\n  _TF_BAZELRC = os.path.join(_TF_WORKSPACE_ROOT, _TF_BAZELRC_FILENAME)\n\n  # Make a copy of os.environ to be clear when functions and getting and setting\n  # environment variables.\n  environ_cp = dict(os.environ)\n\n  check_bazel_version('0.19.0', '0.21.0')\n\n  reset_tf_configure_bazelrc()\n\n  cleanup_makefile()\n  setup_python(environ_cp)\n\n  if is_windows():\n    environ_cp['TF_NEED_OPENCL_SYCL'] = '0'\n    environ_cp['TF_NEED_COMPUTECPP'] = '0'\n    environ_cp['TF_NEED_OPENCL'] = '0'\n    environ_cp['TF_CUDA_CLANG'] = '0'\n    environ_cp['TF_NEED_TENSORRT'] = '0'\n    # TODO(ibiryukov): Investigate using clang as a cpu or cuda compiler on\n    # Windows.\n    environ_cp['TF_DOWNLOAD_CLANG'] = '0'\n    environ_cp['TF_NEED_MPI'] = '0'\n    environ_cp['TF_SET_ANDROID_WORKSPACE'] = '0'\n\n  if is_macos():\n    environ_cp['TF_NEED_TENSORRT'] = '0'\n\n  # The numpy package on ppc64le uses OpenBLAS which has multi-threading\n  # issues that lead to incorrect answers.  Set OMP_NUM_THREADS=1 at\n  # runtime to allow the Tensorflow testcases which compare numpy\n  # results to Tensorflow results to succeed.\n  if is_ppc64le():\n    write_action_env_to_bazelrc('OMP_NUM_THREADS', 1)\n\n  xla_enabled_by_default = is_linux()\n  set_build_var(environ_cp, 'TF_ENABLE_XLA', 'XLA JIT', 'with_xla_support',\n                xla_enabled_by_default, 'xla')\n\n  set_action_env_var(environ_cp, 'TF_NEED_OPENCL_SYCL', 'OpenCL SYCL', False)\n  if environ_cp.get('TF_NEED_OPENCL_SYCL') == '1':\n    set_host_cxx_compiler(environ_cp)\n    set_host_c_compiler(environ_cp)\n    set_action_env_var(environ_cp, 'TF_NEED_COMPUTECPP', 'ComputeCPP', True)\n    if environ_cp.get('TF_NEED_COMPUTECPP') == '1':\n      set_computecpp_toolkit_path(environ_cp)\n    else:\n      set_trisycl_include_dir(environ_cp)\n\n  set_action_env_var(environ_cp, 'TF_NEED_ROCM', 'ROCm', False)\n  if (environ_cp.get('TF_NEED_ROCM') == '1' and\n      'LD_LIBRARY_PATH' in environ_cp and\n      environ_cp.get('LD_LIBRARY_PATH') != '1'):\n    write_action_env_to_bazelrc('LD_LIBRARY_PATH',\n                                environ_cp.get('LD_LIBRARY_PATH'))\n\n  set_action_env_var(environ_cp, 'TF_NEED_CUDA', 'CUDA', False)\n  if (environ_cp.get('TF_NEED_CUDA') == '1' and\n      'TF_CUDA_CONFIG_REPO' not in environ_cp):\n    set_tf_cuda_version(environ_cp)\n    set_tf_cudnn_version(environ_cp)\n    if is_linux():\n      set_tf_tensorrt_install_path(environ_cp)\n      set_tf_nccl_install_path(environ_cp)\n\n    set_tf_cuda_compute_capabilities(environ_cp)\n    if 'LD_LIBRARY_PATH' in environ_cp and environ_cp.get(\n        'LD_LIBRARY_PATH') != '1':\n      write_action_env_to_bazelrc('LD_LIBRARY_PATH',\n                                  environ_cp.get('LD_LIBRARY_PATH'))\n\n    set_tf_cuda_clang(environ_cp)\n    if environ_cp.get('TF_CUDA_CLANG') == '1':\n      # Ask whether we should download the clang toolchain.\n      set_tf_download_clang(environ_cp)\n      if environ_cp.get('TF_DOWNLOAD_CLANG') != '1':\n        # Set up which clang we should use as the cuda / host compiler.\n        set_clang_cuda_compiler_path(environ_cp)\n      else:\n        # Use downloaded LLD for linking.\n        write_to_bazelrc('build:cuda_clang --config=download_clang_use_lld')\n        write_to_bazelrc('test:cuda_clang --config=download_clang_use_lld')\n    else:\n      # Set up which gcc nvcc should use as the host compiler\n      # No need to set this on Windows\n      if not is_windows():\n        set_gcc_host_compiler_path(environ_cp)\n    set_other_cuda_vars(environ_cp)\n  else:\n    # CUDA not required. Ask whether we should download the clang toolchain and\n    # use it for the CPU build.\n    set_tf_download_clang(environ_cp)\n    if environ_cp.get('TF_DOWNLOAD_CLANG') == '1':\n      write_to_bazelrc('build --config=download_clang')\n      write_to_bazelrc('test --config=download_clang')\n\n  # SYCL / ROCm / CUDA are mutually exclusive.\n  # At most 1 GPU platform can be configured.\n  gpu_platform_count = 0\n  if environ_cp.get('TF_NEED_OPENCL_SYCL') == '1':\n    gpu_platform_count += 1\n  if environ_cp.get('TF_NEED_ROCM') == '1':\n    gpu_platform_count += 1\n  if environ_cp.get('TF_NEED_CUDA') == '1':\n    gpu_platform_count += 1\n  if gpu_platform_count >= 2:\n    raise UserInputError('SYCL / CUDA / ROCm are mututally exclusive. '\n                         'At most 1 GPU platform can be configured.')\n\n  set_build_var(environ_cp, 'TF_NEED_MPI', 'MPI', 'with_mpi_support', False)\n  if environ_cp.get('TF_NEED_MPI') == '1':\n    set_mpi_home(environ_cp)\n    set_other_mpi_vars(environ_cp)\n\n  set_cc_opt_flags(environ_cp)\n  set_system_libs_flag(environ_cp)\n  if is_windows():\n    set_windows_build_flags(environ_cp)\n\n  # Add a config option to build TensorFlow 2.0 API.\n  write_to_bazelrc('build:v2 --define=tf_api_version=2')\n\n  if get_var(environ_cp, 'TF_SET_ANDROID_WORKSPACE', 'android workspace', False,\n             ('Would you like to interactively configure ./WORKSPACE for '\n              'Android builds?'), 'Searching for NDK and SDK installations.',\n             'Not configuring the WORKSPACE for Android builds.'):\n    create_android_ndk_rule(environ_cp)\n    create_android_sdk_rule(environ_cp)\n\n  print('Preconfigured Bazel build configs. You can use any of the below by '\n        'adding \"--config=<>\" to your build command. See .bazelrc for more '\n        'details.')\n  config_info_line('mkl', 'Build with MKL support.')\n  config_info_line('monolithic', 'Config for mostly static monolithic build.')\n  config_info_line('gdr', 'Build with GDR support.')\n  config_info_line('verbs', 'Build with libverbs support.')\n  config_info_line('ngraph', 'Build with Intel nGraph support.')\n  config_info_line('dynamic_kernels',\n                   '(Experimental) Build kernels into separate shared objects.')\n\n  print('Preconfigured Bazel build configs to DISABLE default on features:')\n  config_info_line('noaws', 'Disable AWS S3 filesystem support.')\n  config_info_line('nogcp', 'Disable GCP support.')\n  config_info_line('nohdfs', 'Disable HDFS support.')\n  config_info_line('noignite', 'Disable Apacha Ignite support.')\n  config_info_line('nokafka', 'Disable Apache Kafka support.')\n  config_info_line('nonccl', 'Disable NVIDIA NCCL support.')\n\n\nif __name__ == '__main__':\n  main()\n"
        },
        {
          "name": "dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "mcts",
          "type": "tree",
          "content": null
        },
        {
          "name": "mcts_main.filters",
          "type": "blob",
          "size": 6.21875,
          "content": "﻿<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <ItemGroup>\n    <Filter Include=\"Source Files\">\n      <UniqueIdentifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>\n      <Extensions>cpp;c;cc;cxx;def;odl;idl;hpj;bat;asm;asmx</Extensions>\n    </Filter>\n    <Filter Include=\"Header Files\">\n      <UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>\n      <Extensions>h;hh;hpp;hxx;hm;inl;inc;xsd</Extensions>\n    </Filter>\n    <Filter Include=\"Resource Files\">\n      <UniqueIdentifier>{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}</UniqueIdentifier>\n      <Extensions>rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav</Extensions>\n    </Filter>\n  </ItemGroup>\n  <ItemGroup>\n    <ClCompile Include=\"model\\checkpoint_utils.cc\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"model\\trt_zero_model.cc\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"model\\zero_model.cc\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"mcts\\byo_yomi_timer.cc\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"mcts\\mcts_config.cc\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"mcts\\mcts_debugger.cc\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"mcts\\mcts_engine.cc\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"mcts\\mcts_main.cc\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"mcts\\mcts_monitor.cc\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"dist\\async_dist_zero_model_client.cc\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"dist\\dist_zero_model_client.cc\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"dist\\leaky_bucket.cc\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"common\\go_comm.cc\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"common\\go_state.cc\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"common\\str_utils.cc\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"common\\thread_conductor.cc\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"common\\timer.cc\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"common\\wait_group.cc\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"model\\checkpoint_state.pb.cc\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"model\\model_config.pb.cc\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"mcts\\mcts_config.pb.cc\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"dist\\dist_zero_model.grpc.pb.cc\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"dist\\dist_zero_model.pb.cc\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n    <ClCompile Include=\"dist\\dist_config.pb.cc\">\n      <Filter>Source Files</Filter>\n    </ClCompile>\n  </ItemGroup>\n  <ItemGroup>\n    <ClInclude Include=\"model\\checkpoint_utils.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"model\\trt_zero_model.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"model\\zero_model.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"model\\zero_model_base.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"mcts\\byo_yomi_timer.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"mcts\\mcts_config.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"mcts\\mcts_debugger.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"mcts\\mcts_engine.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"mcts\\mcts_monitor.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"dist\\async_dist_zero_model_client.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"dist\\async_rpc_queue.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"dist\\dist_zero_model_client.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"dist\\leaky_bucket.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"common\\errordef.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"common\\go_comm.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"common\\go_state.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"common\\str_utils.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"common\\task_queue.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"common\\thread_conductor.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"common\\timer.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"common\\wait_group.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"model\\checkpoint_state.pb.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"model\\model_config.pb.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"mcts\\mcts_config.pb.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"dist\\dist_zero_model.pb.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"dist\\dist_zero_model.grpc.pb.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n    <ClInclude Include=\"dist\\dist_config.pb.h\">\n      <Filter>Header Files</Filter>\n    </ClInclude>\n  </ItemGroup>\n  <ItemGroup>\n    <CustomBuild Include=\"model\\checkpoint_state.proto\" />\n    <CustomBuild Include=\"model\\model_config.proto\" />\n    <CustomBuild Include=\"dist\\dist_config.proto\" />\n    <CustomBuild Include=\"dist\\dist_zero_model.proto\" />\n    <CustomBuild Include=\"mcts\\mcts_config.proto\" />\n  </ItemGroup>\n</Project>"
        },
        {
          "name": "mcts_main.vcxproj",
          "type": "blob",
          "size": 23.517578125,
          "content": "﻿<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project DefaultTargets=\"Build\" ToolsVersion=\"14.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <ItemGroup Label=\"ProjectConfigurations\">\n    <ProjectConfiguration Include=\"Debug|Win32\">\n      <Configuration>Debug</Configuration>\n      <Platform>Win32</Platform>\n    </ProjectConfiguration>\n    <ProjectConfiguration Include=\"Release|Win32\">\n      <Configuration>Release</Configuration>\n      <Platform>Win32</Platform>\n    </ProjectConfiguration>\n    <ProjectConfiguration Include=\"Debug|x64\">\n      <Configuration>Debug</Configuration>\n      <Platform>x64</Platform>\n    </ProjectConfiguration>\n    <ProjectConfiguration Include=\"Release|x64\">\n      <Configuration>Release</Configuration>\n      <Platform>x64</Platform>\n    </ProjectConfiguration>\n  </ItemGroup>\n  <PropertyGroup Label=\"Globals\">\n    <ProjectGuid>{ABF9E6C0-D295-4B39-B367-3B67DF2CA3E9}</ProjectGuid>\n    <Keyword>Win32Proj</Keyword>\n    <ProjectName>mcts_main</ProjectName>\n  </PropertyGroup>\n  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\">\n    <ConfigurationType>Application</ConfigurationType>\n    <UseDebugLibraries>true</UseDebugLibraries>\n    <PlatformToolset>v140</PlatformToolset>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" Label=\"Configuration\">\n    <ConfigurationType>Application</ConfigurationType>\n    <UseDebugLibraries>false</UseDebugLibraries>\n    <PlatformToolset>v140</PlatformToolset>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\" Label=\"Configuration\">\n    <ConfigurationType>Application</ConfigurationType>\n    <UseDebugLibraries>true</UseDebugLibraries>\n    <PlatformToolset>v140</PlatformToolset>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\" Label=\"Configuration\">\n    <ConfigurationType>Application</ConfigurationType>\n    <UseDebugLibraries>false</UseDebugLibraries>\n    <PlatformToolset>v140</PlatformToolset>\n  </PropertyGroup>\n  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n  <ImportGroup Label=\"ExtensionSettings\">\n  </ImportGroup>\n  <ImportGroup Label=\"Shared\">\n  </ImportGroup>\n  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n    <Import Project=\"ThirdParty.props\" />\n  </ImportGroup>\n  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n    <Import Project=\"ThirdParty.props\" />\n  </ImportGroup>\n  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n    <Import Project=\"ThirdParty.props\" />\n  </ImportGroup>\n  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n    <Import Project=\"ThirdParty.props\" />\n  </ImportGroup>\n  <PropertyGroup Label=\"UserMacros\" />\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n    <LinkIncremental>\n    </LinkIncremental>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n    <LinkIncremental>\n    </LinkIncremental>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n    <Linkages-gflags>static</Linkages-gflags>\n    <Linkages-glog>static</Linkages-glog>\n    <LinkIncremental>\n    </LinkIncremental>\n  </PropertyGroup>\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n    <LinkIncremental>\n    </LinkIncremental>\n  </PropertyGroup>\n  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n    <ClCompile>\n      <PreprocessorDefinitions>_WIN32_WINNT=0x600;NOMINMAX;COMPILER_MSVC;GFLAGS_DLL_DECLARE_FLAG=;GFLAGS_DLL_DEFINE_FLAG=;GLOG_NO_ABBREVIATED_SEVERITIES;GOOGLE_GLOG_DLL_DECL=;GFLAGS_IS_A_DLL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n      <RuntimeLibrary>MultiThreadedDebugDLL</RuntimeLibrary>\n      <WarningLevel>Level3</WarningLevel>\n      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>\n      <Optimization>Disabled</Optimization>\n      <AdditionalIncludeDirectories>$(ProjectDir);$(tensorflow_SourcePath);$(tensorflow_BuildPath);$(tensorflow_BuildPath)\\nsync\\install\\include;$(tensorflow_BuildPath)\\external\\eigen_archive;$(tensorflow_SourcePath)\\third_party\\eigen3;$(tensorflow_BuildPath)\\protobuf\\src\\protobuf\\src;$(tensorflow_BuildPath)\\grpc\\src\\grpc\\include;$(glog_BuildPath);$(glog_SourcePath)\\src;$(gflags_BuildPath)\\include;$(boost_IncludePath);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n    </ClCompile>\n    <Link>\n      <TargetMachine>MachineX86</TargetMachine>\n      <GenerateDebugInformation>true</GenerateDebugInformation>\n      <SubSystem>Console</SubSystem>\n      <AdditionalLibraryDirectories>$(CUDA_PATH);$(tensorflow_BuildPath);$(glog_BuildPath)\\$(Configuration);$(gflags_BuildPath)\\lib\\$(Configuration);$(boost_LibPath);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>\n      <AdditionalDependencies>png\\install\\lib\\libpng12_static.lib;sqlite\\install\\lib\\sqlite.lib;zlib\\install\\lib\\zlibstatic.lib;gif\\install\\lib\\giflib.lib;jpeg\\install\\lib\\libjpeg.lib;lmdb\\install\\lib\\lmdb.lib;farmhash\\install\\lib\\farmhash.lib;fft2d\\\\src\\lib\\fft2d.lib;highwayhash\\install\\lib\\highwayhash.lib;nsync\\install\\lib\\nsync.lib;jsoncpp\\src\\jsoncpp\\src\\lib_json\\$(Configuration)\\jsoncpp.lib;re2\\src\\re2\\$(Configuration)\\re2.lib;protobuf\\src\\protobuf\\$(Configuration)\\libprotobuf.lib;grpc\\src\\grpc\\$(Configuration)\\gpr.lib;grpc\\src\\grpc\\$(Configuration)\\grpc_unsecure.lib;grpc\\src\\grpc\\$(Configuration)\\grpc++_unsecure.lib;snappy\\src\\snappy\\$(Configuration)\\snappy.lib;tf_cc_while_loop.dir\\$(Configuration)\\tf_cc_while_loop.lib;tf_stream_executor.dir\\$(Configuration)\\tf_stream_executor.lib;$(Configuration)\\tf_protos_cc.lib;$(Configuration)\\tf_core_gpu_kernels.lib;glog.lib;gflags_static.lib;lib\\$(Platform)\\cudart_static.lib;lib\\$(Platform)\\cuda.lib;lib\\$(Platform)\\cublas.lib;lib\\$(Platform)\\cublas_device.lib;lib\\$(Platform)\\cufft.lib;lib\\$(Platform)\\curand.lib;extras\\CUPTI\\lib$(Platform)\\cupti.lib;lib\\$(Platform)\\cusolver.lib;lib\\$(Platform)\\cudnn.lib;%(AdditionalDependencies)</AdditionalDependencies>\n      <AdditionalOptions>/WHOLEARCHIVE:tf_core_lib.dir\\$(Configuration)\\tf_core_lib.lib\n/WHOLEARCHIVE:tf_core_cpu.dir\\$(Configuration)\\tf_core_cpu.lib\n/WHOLEARCHIVE:tf_core_framework.dir\\$(Configuration)\\tf_core_framework.lib\n/WHOLEARCHIVE:tf_core_kernels.dir\\$(Configuration)\\tf_core_kernels.lib\n/WHOLEARCHIVE:tf_cc_framework.dir\\$(Configuration)\\tf_cc_framework.lib\n/WHOLEARCHIVE:tf_cc.dir\\$(Configuration)\\tf_cc_ops.lib \n/WHOLEARCHIVE:tf_core_direct_session.dir\\$(Configuration)\\tf_core_direct_session.lib \n/WHOLEARCHIVE:tf_core_ops.dir\\$(Configuration)\\tf_core_ops.lib   \n/WHOLEARCHIVE:tf_stream_executor.dir\\$(Configuration)\\tf_stream_executor.lib\n/WHOLEARCHIVE:tf_cc.dir\\$(Configuration)\\tf_cc.lib \n/WHOLEARCHIVE:tf_cc_ops.dir\\$(Configuration)\\tf_cc_ops.lib %(AdditionalOptions)</AdditionalOptions>\n    </Link>\n  </ItemDefinitionGroup>\n  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n    <ClCompile>\n      <PreprocessorDefinitions>_WIN32_WINNT=0x600;NOMINMAX;COMPILER_MSVC;GFLAGS_DLL_DECLARE_FLAG=;GFLAGS_DLL_DEFINE_FLAG=;GLOG_NO_ABBREVIATED_SEVERITIES;GOOGLE_GLOG_DLL_DECL=;GFLAGS_IS_A_DLL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>\n      <WarningLevel>Level3</WarningLevel>\n      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>\n      <AdditionalIncludeDirectories>$(ProjectDir);$(tensorflow_SourcePath);$(tensorflow_BuildPath);$(tensorflow_BuildPath)\\nsync\\install\\include;$(tensorflow_BuildPath)\\external\\eigen_archive;$(tensorflow_SourcePath)\\third_party\\eigen3;$(tensorflow_BuildPath)\\protobuf\\src\\protobuf\\src;$(tensorflow_BuildPath)\\grpc\\src\\grpc\\include;$(glog_BuildPath);$(glog_SourcePath)\\src;$(gflags_BuildPath)\\include;$(boost_IncludePath);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n    </ClCompile>\n    <Link>\n      <TargetMachine>MachineX86</TargetMachine>\n      <GenerateDebugInformation>true</GenerateDebugInformation>\n      <SubSystem>Console</SubSystem>\n      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n      <OptimizeReferences>true</OptimizeReferences>\n      <AdditionalLibraryDirectories>$(CUDA_PATH);$(tensorflow_BuildPath);$(glog_BuildPath)\\$(Configuration);$(gflags_BuildPath)\\lib\\$(Configuration);$(boost_LibPath);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>\n      <AdditionalDependencies>png\\install\\lib\\libpng12_static.lib;sqlite\\install\\lib\\sqlite.lib;zlib\\install\\lib\\zlibstatic.lib;gif\\install\\lib\\giflib.lib;jpeg\\install\\lib\\libjpeg.lib;lmdb\\install\\lib\\lmdb.lib;farmhash\\install\\lib\\farmhash.lib;fft2d\\\\src\\lib\\fft2d.lib;highwayhash\\install\\lib\\highwayhash.lib;nsync\\install\\lib\\nsync.lib;jsoncpp\\src\\jsoncpp\\src\\lib_json\\$(Configuration)\\jsoncpp.lib;re2\\src\\re2\\$(Configuration)\\re2.lib;protobuf\\src\\protobuf\\$(Configuration)\\libprotobuf.lib;grpc\\src\\grpc\\$(Configuration)\\gpr.lib;grpc\\src\\grpc\\$(Configuration)\\grpc_unsecure.lib;grpc\\src\\grpc\\$(Configuration)\\grpc++_unsecure.lib;snappy\\src\\snappy\\$(Configuration)\\snappy.lib;tf_cc_while_loop.dir\\$(Configuration)\\tf_cc_while_loop.lib;tf_stream_executor.dir\\$(Configuration)\\tf_stream_executor.lib;$(Configuration)\\tf_protos_cc.lib;$(Configuration)\\tf_core_gpu_kernels.lib;glog.lib;gflags_static.lib;lib\\$(Platform)\\cudart_static.lib;lib\\$(Platform)\\cuda.lib;lib\\$(Platform)\\cublas.lib;lib\\$(Platform)\\cublas_device.lib;lib\\$(Platform)\\cufft.lib;lib\\$(Platform)\\curand.lib;extras\\CUPTI\\lib$(Platform)\\cupti.lib;lib\\$(Platform)\\cusolver.lib;lib\\$(Platform)\\cudnn.lib;%(AdditionalDependencies)</AdditionalDependencies>\n      <AdditionalOptions>/WHOLEARCHIVE:tf_core_lib.dir\\$(Configuration)\\tf_core_lib.lib\n/WHOLEARCHIVE:tf_core_cpu.dir\\$(Configuration)\\tf_core_cpu.lib\n/WHOLEARCHIVE:tf_core_framework.dir\\$(Configuration)\\tf_core_framework.lib\n/WHOLEARCHIVE:tf_core_kernels.dir\\$(Configuration)\\tf_core_kernels.lib\n/WHOLEARCHIVE:tf_cc_framework.dir\\$(Configuration)\\tf_cc_framework.lib\n/WHOLEARCHIVE:tf_cc.dir\\$(Configuration)\\tf_cc_ops.lib \n/WHOLEARCHIVE:tf_core_direct_session.dir\\$(Configuration)\\tf_core_direct_session.lib \n/WHOLEARCHIVE:tf_core_ops.dir\\$(Configuration)\\tf_core_ops.lib   \n/WHOLEARCHIVE:tf_stream_executor.dir\\$(Configuration)\\tf_stream_executor.lib\n/WHOLEARCHIVE:tf_cc.dir\\$(Configuration)\\tf_cc.lib \n/WHOLEARCHIVE:tf_cc_ops.dir\\$(Configuration)\\tf_cc_ops.lib %(AdditionalOptions)</AdditionalOptions>\n    </Link>\n  </ItemDefinitionGroup>\n  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n    <ClCompile>\n      <PreprocessorDefinitions>_WIN32_WINNT=0x600;NOMINMAX;COMPILER_MSVC;GFLAGS_DLL_DECLARE_FLAG=;GFLAGS_DLL_DEFINE_FLAG=;GLOG_NO_ABBREVIATED_SEVERITIES;GOOGLE_GLOG_DLL_DECL=;GFLAGS_IS_A_DLL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n      <DisableLanguageExtensions>false</DisableLanguageExtensions>\n      <AdditionalIncludeDirectories>$(ProjectDir);$(tensorflow_SourcePath);$(tensorflow_BuildPath);$(tensorflow_BuildPath)\\nsync\\install\\include;$(tensorflow_BuildPath)\\external\\eigen_archive;$(tensorflow_SourcePath)\\third_party\\eigen3;$(tensorflow_BuildPath)\\protobuf\\src\\protobuf\\src;$(tensorflow_BuildPath)\\grpc\\src\\grpc\\include;$(glog_BuildPath);$(glog_SourcePath)\\src;$(gflags_BuildPath)\\include;$(boost_IncludePath);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n    </ClCompile>\n    <Link />\n    <Link>\n      <AdditionalDependencies>png\\install\\lib\\libpng12_static.lib;sqlite\\install\\lib\\sqlite.lib;zlib\\install\\lib\\zlibstatic.lib;gif\\install\\lib\\giflib.lib;jpeg\\install\\lib\\libjpeg.lib;lmdb\\install\\lib\\lmdb.lib;farmhash\\install\\lib\\farmhash.lib;fft2d\\\\src\\lib\\fft2d.lib;highwayhash\\install\\lib\\highwayhash.lib;nsync\\install\\lib\\nsync.lib;jsoncpp\\src\\jsoncpp\\src\\lib_json\\$(Configuration)\\jsoncpp.lib;re2\\src\\re2\\$(Configuration)\\re2.lib;protobuf\\src\\protobuf\\$(Configuration)\\libprotobuf.lib;grpc\\src\\grpc\\$(Configuration)\\gpr.lib;grpc\\src\\grpc\\$(Configuration)\\grpc_unsecure.lib;grpc\\src\\grpc\\$(Configuration)\\grpc++_unsecure.lib;snappy\\src\\snappy\\$(Configuration)\\snappy.lib;tf_cc_while_loop.dir\\$(Configuration)\\tf_cc_while_loop.lib;tf_stream_executor.dir\\$(Configuration)\\tf_stream_executor.lib;$(Configuration)\\tf_protos_cc.lib;$(Configuration)\\tf_core_gpu_kernels.lib;glog.lib;gflags_static.lib;lib\\$(Platform)\\cudart_static.lib;lib\\$(Platform)\\cuda.lib;lib\\$(Platform)\\cublas.lib;lib\\$(Platform)\\cublas_device.lib;lib\\$(Platform)\\cufft.lib;lib\\$(Platform)\\curand.lib;extras\\CUPTI\\lib$(Platform)\\cupti.lib;lib\\$(Platform)\\cusolver.lib;lib\\$(Platform)\\cudnn.lib;%(AdditionalDependencies)</AdditionalDependencies>\n      <AdditionalLibraryDirectories>$(CUDA_PATH);$(tensorflow_BuildPath);$(glog_BuildPath)\\$(Configuration);$(gflags_BuildPath)\\lib\\$(Configuration);$(boost_LibPath);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>\n      <AdditionalOptions>/WHOLEARCHIVE:tf_core_lib.dir\\$(Configuration)\\tf_core_lib.lib\n/WHOLEARCHIVE:tf_core_cpu.dir\\$(Configuration)\\tf_core_cpu.lib\n/WHOLEARCHIVE:tf_core_framework.dir\\$(Configuration)\\tf_core_framework.lib\n/WHOLEARCHIVE:tf_core_kernels.dir\\$(Configuration)\\tf_core_kernels.lib\n/WHOLEARCHIVE:tf_cc_framework.dir\\$(Configuration)\\tf_cc_framework.lib\n/WHOLEARCHIVE:tf_cc.dir\\$(Configuration)\\tf_cc_ops.lib \n/WHOLEARCHIVE:tf_core_direct_session.dir\\$(Configuration)\\tf_core_direct_session.lib \n/WHOLEARCHIVE:tf_core_ops.dir\\$(Configuration)\\tf_core_ops.lib   \n/WHOLEARCHIVE:tf_stream_executor.dir\\$(Configuration)\\tf_stream_executor.lib\n/WHOLEARCHIVE:tf_cc.dir\\$(Configuration)\\tf_cc.lib \n/WHOLEARCHIVE:tf_cc_ops.dir\\$(Configuration)\\tf_cc_ops.lib %(AdditionalOptions)</AdditionalOptions>\n    </Link>\n    <CustomBuildStep>\n      <Command>\n      </Command>\n    </CustomBuildStep>\n    <CustomBuildStep>\n      <Outputs>%(Outputs)</Outputs>\n    </CustomBuildStep>\n  </ItemDefinitionGroup>\n  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n    <ClCompile>\n      <AdditionalIncludeDirectories>$(ProjectDir);$(tensorflow_SourcePath);$(tensorflow_BuildPath);$(tensorflow_BuildPath)\\nsync\\install\\include;$(tensorflow_BuildPath)\\external\\eigen_archive;$(tensorflow_SourcePath)\\third_party\\eigen3;$(tensorflow_BuildPath)\\protobuf\\src\\protobuf\\src;$(tensorflow_BuildPath)\\grpc\\src\\grpc\\include;$(glog_BuildPath);$(glog_SourcePath)\\src;$(gflags_BuildPath)\\include;$(boost_IncludePath);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n      <PreprocessorDefinitions>_WIN32_WINNT=0x600;NOMINMAX;COMPILER_MSVC;GFLAGS_DLL_DECLARE_FLAG=;GFLAGS_DLL_DEFINE_FLAG=;GLOG_NO_ABBREVIATED_SEVERITIES;GOOGLE_GLOG_DLL_DECL=;GFLAGS_IS_A_DLL=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n    </ClCompile>\n    <Link>\n      <AdditionalLibraryDirectories>$(CUDA_PATH);$(tensorflow_BuildPath);$(glog_BuildPath)\\$(Configuration);$(gflags_BuildPath)\\lib\\$(Configuration);$(boost_LibPath);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>\n      <AdditionalDependencies>png\\install\\lib\\libpng12_static.lib;sqlite\\install\\lib\\sqlite.lib;zlib\\install\\lib\\zlibstatic.lib;gif\\install\\lib\\giflib.lib;jpeg\\install\\lib\\libjpeg.lib;lmdb\\install\\lib\\lmdb.lib;farmhash\\install\\lib\\farmhash.lib;fft2d\\\\src\\lib\\fft2d.lib;highwayhash\\install\\lib\\highwayhash.lib;nsync\\install\\lib\\nsync.lib;jsoncpp\\src\\jsoncpp\\src\\lib_json\\$(Configuration)\\jsoncpp.lib;re2\\src\\re2\\$(Configuration)\\re2.lib;protobuf\\src\\protobuf\\$(Configuration)\\libprotobuf.lib;grpc\\src\\grpc\\$(Configuration)\\gpr.lib;grpc\\src\\grpc\\$(Configuration)\\grpc_unsecure.lib;grpc\\src\\grpc\\$(Configuration)\\grpc++_unsecure.lib;snappy\\src\\snappy\\$(Configuration)\\snappy.lib;tf_cc_while_loop.dir\\$(Configuration)\\tf_cc_while_loop.lib;tf_stream_executor.dir\\$(Configuration)\\tf_stream_executor.lib;$(Configuration)\\tf_protos_cc.lib;$(Configuration)\\tf_core_gpu_kernels.lib;glog.lib;gflags_static.lib;lib\\$(Platform)\\cudart_static.lib;lib\\$(Platform)\\cuda.lib;lib\\$(Platform)\\cublas.lib;lib\\$(Platform)\\cublas_device.lib;lib\\$(Platform)\\cufft.lib;lib\\$(Platform)\\curand.lib;extras\\CUPTI\\lib$(Platform)\\cupti.lib;lib\\$(Platform)\\cusolver.lib;lib\\$(Platform)\\cudnn.lib;%(AdditionalDependencies)</AdditionalDependencies>\n      <AdditionalOptions>/WHOLEARCHIVE:tf_core_lib.dir\\$(Configuration)\\tf_core_lib.lib\n/WHOLEARCHIVE:tf_core_cpu.dir\\$(Configuration)\\tf_core_cpu.lib\n/WHOLEARCHIVE:tf_core_framework.dir\\$(Configuration)\\tf_core_framework.lib\n/WHOLEARCHIVE:tf_core_kernels.dir\\$(Configuration)\\tf_core_kernels.lib\n/WHOLEARCHIVE:tf_cc_framework.dir\\$(Configuration)\\tf_cc_framework.lib\n/WHOLEARCHIVE:tf_cc.dir\\$(Configuration)\\tf_cc_ops.lib \n/WHOLEARCHIVE:tf_core_direct_session.dir\\$(Configuration)\\tf_core_direct_session.lib \n/WHOLEARCHIVE:tf_core_ops.dir\\$(Configuration)\\tf_core_ops.lib   \n/WHOLEARCHIVE:tf_stream_executor.dir\\$(Configuration)\\tf_stream_executor.lib\n/WHOLEARCHIVE:tf_cc.dir\\$(Configuration)\\tf_cc.lib \n/WHOLEARCHIVE:tf_cc_ops.dir\\$(Configuration)\\tf_cc_ops.lib %(AdditionalOptions)</AdditionalOptions>\n    </Link>\n  </ItemDefinitionGroup>\n  <ItemGroup>\n    <CustomBuild Include=\"model\\checkpoint_state.proto\">\n      <FileType>Document</FileType>\n      <Command Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">$(Tensorflow_BuildPath)\\protobuf\\src\\protobuf\\Release\\protoc.exe --proto_path=$(ProjectDir) --cpp_out=$(ProjectDir) %(FullPath)</Command>\n      <Message Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">Performing Protoc Build Tools</Message>\n      <Outputs Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">$(ProjectDir)%(Filename).pb.h;$(ProjectDir)%(Filename).pb.cc;%(Outputs)</Outputs>\n      <LinkObjects Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">false</LinkObjects>\n    </CustomBuild>\n    <CustomBuild Include=\"model\\model_config.proto\">\n      <FileType>Document</FileType>\n      <Command Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">$(Tensorflow_BuildPath)\\protobuf\\src\\protobuf\\Release\\protoc.exe --proto_path=$(ProjectDir) --cpp_out=$(ProjectDir) %(FullPath)</Command>\n      <Outputs Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">$(ProjectDir)%(Filename).pb.h;$(ProjectDir)%(Filename).pb.cc;%(Outputs)</Outputs>\n      <Message Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">Performing Protoc Build Tools</Message>\n    </CustomBuild>\n    <CustomBuild Include=\"dist\\dist_config.proto\">\n      <FileType>Document</FileType>\n      <Command Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">$(Tensorflow_BuildPath)\\protobuf\\src\\protobuf\\Release\\protoc.exe --proto_path=$(ProjectDir) --cpp_out=$(ProjectDir) %(FullPath)</Command>\n      <Message Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">Performing Protoc Build Tools</Message>\n      <Outputs Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">$(ProjectDir)%(Filename).pb.h;$(ProjectDir)%(Filename).pb.cc;%(Outputs)</Outputs>\n    </CustomBuild>\n    <CustomBuild Include=\"dist\\dist_zero_model.proto\">\n      <FileType>Document</FileType>\n      <Command Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">$(Tensorflow_BuildPath)\\protobuf\\src\\protobuf\\Release\\protoc.exe --proto_path=$(ProjectDir) --cpp_out=$(ProjectDir) %(FullPath)\n$(Tensorflow_BuildPath)\\protobuf\\src\\protobuf\\Release\\protoc.exe --proto_path=$(ProjectDir) --grpc_out=$(ProjectDir) --plugin=protoc-gen-grpc=$(Tensorflow_BuildPath)\\grpc\\src\\grpc\\Release\\grpc_cpp_plugin.exe %(FullPath)</Command>\n      <Message Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">Performing Protoc Build Tools</Message>\n      <Outputs Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">$(ProjectDir)%(Filename).pb.h;$(ProjectDir)%(Filename).pb.cc;$(ProjectDir)%(Filename).grpc.pb.h;$(ProjectDir)%(Filename).grpc.pb.cc;%(Outputs)</Outputs>\n    </CustomBuild>\n    <CustomBuild Include=\"mcts\\mcts_config.proto\">\n      <FileType>Document</FileType>\n      <Command Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">$(Tensorflow_BuildPath)\\protobuf\\src\\protobuf\\Release\\protoc.exe --proto_path=$(ProjectDir) --cpp_out=$(ProjectDir) %(FullPath)</Command>\n      <Message Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">Performing Protoc Build Tools</Message>\n      <Outputs Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">$(ProjectDir)%(Filename).pb.h;$(ProjectDir)%(Filename).pb.cc;%(Outputs)</Outputs>\n    </CustomBuild>\n  </ItemGroup>\n  <ItemGroup>\n    <ClCompile Include=\"common\\go_comm.cc\" />\n    <ClCompile Include=\"common\\go_state.cc\" />\n    <ClCompile Include=\"common\\str_utils.cc\" />\n    <ClCompile Include=\"common\\thread_conductor.cc\" />\n    <ClCompile Include=\"common\\timer.cc\" />\n    <ClCompile Include=\"common\\wait_group.cc\" />\n    <ClCompile Include=\"dist\\async_dist_zero_model_client.cc\" />\n    <ClCompile Include=\"dist\\dist_config.pb.cc\" />\n    <ClCompile Include=\"dist\\dist_zero_model.grpc.pb.cc\" />\n    <ClCompile Include=\"dist\\dist_zero_model.pb.cc\" />\n    <ClCompile Include=\"dist\\dist_zero_model_client.cc\" />\n    <ClCompile Include=\"dist\\leaky_bucket.cc\" />\n    <ClCompile Include=\"mcts\\byo_yomi_timer.cc\" />\n    <ClCompile Include=\"mcts\\mcts_config.cc\" />\n    <ClCompile Include=\"mcts\\mcts_config.pb.cc\" />\n    <ClCompile Include=\"mcts\\mcts_debugger.cc\" />\n    <ClCompile Include=\"mcts\\mcts_engine.cc\" />\n    <ClCompile Include=\"mcts\\mcts_main.cc\" />\n    <ClCompile Include=\"mcts\\mcts_monitor.cc\" />\n    <ClCompile Include=\"model\\checkpoint_state.pb.cc\" />\n    <ClCompile Include=\"model\\checkpoint_utils.cc\" />\n    <ClCompile Include=\"model\\model_config.pb.cc\" />\n    <ClCompile Include=\"model\\trt_zero_model.cc\" />\n    <ClCompile Include=\"model\\zero_model.cc\" />\n  </ItemGroup>\n  <ItemGroup>\n    <ClInclude Include=\"common\\errordef.h\" />\n    <ClInclude Include=\"common\\go_comm.h\" />\n    <ClInclude Include=\"common\\go_state.h\" />\n    <ClInclude Include=\"common\\str_utils.h\" />\n    <ClInclude Include=\"common\\task_queue.h\" />\n    <ClInclude Include=\"common\\thread_conductor.h\" />\n    <ClInclude Include=\"common\\timer.h\" />\n    <ClInclude Include=\"common\\wait_group.h\" />\n    <ClInclude Include=\"dist\\async_dist_zero_model_client.h\" />\n    <ClInclude Include=\"dist\\async_rpc_queue.h\" />\n    <ClInclude Include=\"dist\\dist_config.pb.h\" />\n    <ClInclude Include=\"dist\\dist_zero_model.grpc.pb.h\" />\n    <ClInclude Include=\"dist\\dist_zero_model.pb.h\" />\n    <ClInclude Include=\"dist\\dist_zero_model_client.h\" />\n    <ClInclude Include=\"dist\\leaky_bucket.h\" />\n    <ClInclude Include=\"mcts\\byo_yomi_timer.h\" />\n    <ClInclude Include=\"mcts\\mcts_config.h\" />\n    <ClInclude Include=\"mcts\\mcts_config.pb.h\" />\n    <ClInclude Include=\"mcts\\mcts_debugger.h\" />\n    <ClInclude Include=\"mcts\\mcts_engine.h\" />\n    <ClInclude Include=\"mcts\\mcts_monitor.h\" />\n    <ClInclude Include=\"model\\checkpoint_state.pb.h\" />\n    <ClInclude Include=\"model\\checkpoint_utils.h\" />\n    <ClInclude Include=\"model\\model_config.pb.h\" />\n    <ClInclude Include=\"model\\trt_zero_model.h\" />\n    <ClInclude Include=\"model\\zero_model.h\" />\n    <ClInclude Include=\"model\\zero_model_base.h\" />\n  </ItemGroup>\n  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n  <ImportGroup Label=\"ExtensionTargets\" />\n</Project>"
        },
        {
          "name": "model",
          "type": "tree",
          "content": null
        },
        {
          "name": "rules.bzl",
          "type": "blob",
          "size": 0.6865234375,
          "content": "load(\"@protobuf_archive//:protobuf.bzl\", protobuf_cc_proto_library=\"cc_proto_library\")\n\n\ndef cc_proto_library(name, srcs=[], deps=[], use_grpc_plugin=False, **kwargs):\n    protobuf_cc_proto_library(\n        name=name,\n        srcs=srcs,\n        deps=deps,\n        use_grpc_plugin=use_grpc_plugin,\n        cc_libs = [\"@protobuf_archive//:protobuf\"],\n        protoc=\"@protobuf_archive//:protoc\",\n        default_runtime=\"@protobuf_archive//:protobuf\",\n        **kwargs\n    )\n\n\ndef tf_cc_binary(name, srcs=[], deps=[], linkopts=[], **kwargs):\n    native.cc_binary(\n        name=name,\n        srcs=srcs + [\"@org_tensorflow//tensorflow:libtensorflow_framework.so\"],\n        deps=deps,\n        **kwargs\n    )\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}