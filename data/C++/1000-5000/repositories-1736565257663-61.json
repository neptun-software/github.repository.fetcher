{
  "metadata": {
    "timestamp": 1736565257663,
    "page": 61,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "urho3d/urho3d",
      "stars": 4577,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 3.7724609375,
          "content": "# Copyright (c) 2008-2023 the Urho3D project\n# License: MIT\n\n---\nLanguage: Cpp\n# BasedOnStyle:  LLVM\nAccessModifierOffset: -4\nAlignAfterOpenBracket: Align\nAlignConsecutiveMacros: false\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlines: Right\nAlignOperands: true\nAlignTrailingComments: true\nAllowAllArgumentsOnNextLine: true\nAllowAllConstructorInitializersOnNextLine: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: Never\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: All\nAllowShortLambdasOnASingleLine: All\nAllowShortIfStatementsOnASingleLine: Never\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: MultiLine\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:\n  AfterCaseLabel: false\n  AfterClass: false\n  AfterControlStatement: false\n  AfterEnum: false\n  AfterFunction: false\n  AfterNamespace: false\n  AfterObjCDeclaration: false\n  AfterStruct: false\n  AfterUnion: false\n  AfterExternBlock: false\n  BeforeCatch: false\n  BeforeElse: false\n  IndentBraces: false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Allman\nBreakBeforeInheritanceComma: false\nBreakInheritanceList: BeforeColon\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: BeforeComma\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit: 120\nCommentPragmas: '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDeriveLineEnding: true\nDerivePointerAlignment: false\nDisableFormat: false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nForEachMacros:\n  - foreach\n  - Q_FOREACH\n  - BOOST_FOREACH\nIncludeBlocks: Preserve\nIncludeCategories:\n  - Regex: '^\"(llvm|llvm-c|clang|clang-c)/'\n    Priority: 2\n    SortPriority: 0\n  - Regex: '^(<|\"(gtest|gmock|isl|json)/)'\n    Priority: 3\n    SortPriority: 0\n  - Regex: '.*'\n    Priority: 1\n    SortPriority: 0\nIncludeIsMainRegex: '(Test)?$'\nIncludeIsMainSourceRegex: ''\nIndentCaseLabels: false\nIndentGotoLabels: true\nIndentPPDirectives: None\nIndentWidth: 4\nIndentWrappedFunctionNames: false\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: true\nMacroBlockBegin: ''\nMacroBlockEnd: ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBinPackProtocolList: Auto\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 19\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 60\nPointerAlignment: Left\nReflowComments: true\nSortIncludes: true\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: false\nSpaceAfterLogicalNot: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCpp11BracedList: false\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: ControlStatements\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceInEmptyBlock: false\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles: false\nSpacesInConditionalStatement: false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nSpaceBeforeSquareBrackets: false\nStandard: Latest\nStatementMacros:\n  - Q_UNUSED\n  - QT_REQUIRE_VERSION\nTabWidth: 4\nUseCRLF: true\nUseTab: Never\n...\n\n# vi: set ts=2 sw=2 expandtab:\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 11.103515625,
          "content": "# Copyright (c) 2008-2023 the Urho3D project\n# License: MIT\n\n---\nChecks: 'clang-diagnostic-*,clang-analyzer-*,*,-android-*,-bugprone-bool-pointer-implicit-conversion,-bugprone-exception-escape,-bugprone-infinite-loop,-bugprone-signed-char-misuse,-cert-dcl50-cpp,-cert-env33-c,-cert-mem57-cpp,-cert-oop57-cpp,-cert-oop58-cpp,-clang-analyzer-*,-clang-diagnostic-*,-cppcoreguidelines-avoid-goto,-cppcoreguidelines-avoid-non-const-global-variables,-cppcoreguidelines-init-variables,-cppcoreguidelines-macro-usage,-cppcoreguidelines-no-malloc,-cppcoreguidelines-owning-memory,-cppcoreguidelines-pro-bounds-array-to-pointer-decay,-cppcoreguidelines-pro-bounds-constant-array-index,-cppcoreguidelines-pro-bounds-pointer-arithmetic,-cppcoreguidelines-pro-type-const-cast,-cppcoreguidelines-pro-type-cstyle-cast,-cppcoreguidelines-pro-type-reinterpret-cast,-cppcoreguidelines-pro-type-union-access,-cppcoreguidelines-pro-type-vararg,-cppcoreguidelines-special-member-functions,-darwin-*,-fuchsia-*,-google-*,-hicpp-avoid-goto,-hicpp-no-assembler,-linuxkernel-*,-llvm-*,-llvmlibc-*,-misc-bool-pointer-implicit-conversion,-misc-definitions-in-headers,-misc-non-private-member-variables-in-classes,-misc-redundant-expression,-misc-static-assert,-misc-unused-alias-decls,-misc-unused-parameters,-misc-unused-using-decls,-modernize-avoid-c-arrays,-modernize-use-default-member-init,-modernize-use-trailing-return-type,-modernize-use-using,-objc-*,-openmp-exception-escape,-portability-restrict-system-includes,-readability-braces-around-statements,-readability-else-after-return,-readability-function-size,-readability-identifier-naming,-readability-implicit-bool-conversion,-readability-isolate-declaration,-readability-magic-numbers,-readability-named-parameter,-readability-qualified-auto,-readability-redundant-access-specifiers,-readability-redundant-member-init,-readability-redundant-preprocessor,-readability-simplify-boolean-expr,-readability-uppercase-literal-suffix,-zircon-*,-bugprone-narrowing-conversions,-cert-con36-c,-cert-con54-cpp,-cert-dcl03-c,-cert-dcl16-c,-cert-dcl37-c,-cert-dcl51-cpp,-cert-dcl54-cpp,-cert-dcl59-cpp,-cert-err09-cpp,-cert-err61-cpp,-cert-fio38-c,-cert-msc30-c,-cert-msc32-c,-cert-oop11-cpp,-cert-oop54-cpp,-cert-pos44-c,-cppcoreguidelines-avoid-c-arrays,-cppcoreguidelines-avoid-magic-numbers,-cppcoreguidelines-c-copy-assignment-signature,-cppcoreguidelines-explicit-virtual-functions,-cppcoreguidelines-non-private-member-variables-in-classes,-fuchsia-header-anon-namespaces,-google-readability-braces-around-statements,-google-readability-function-size,-google-readability-namespace-comments,-hicpp-avoid-c-arrays,-hicpp-braces-around-statements,-hicpp-deprecated-headers,-hicpp-explicit-conversions,-hicpp-function-size,-hicpp-invalid-access-moved,-hicpp-member-init,-hicpp-move-const-arg,-hicpp-named-parameter,-hicpp-new-delete-operators,-hicpp-no-array-decay,-hicpp-no-malloc,-hicpp-noexcept-move,-hicpp-special-member-functions,-hicpp-static-assert,-hicpp-undelegated-constructor,-hicpp-uppercase-literal-suffix,-hicpp-use-auto,-hicpp-use-emplace,-hicpp-use-equals-default,-hicpp-use-equals-delete,-hicpp-use-noexcept,-hicpp-use-nullptr,-hicpp-use-override,-hicpp-vararg,google-default-arguments,google-explicit-constructor,google-runtime-operator'\nWarningsAsErrors: ''\nHeaderFilterRegex: ''\nAnalyzeTemporaryDtors: false\nFormatStyle: none\nCheckOptions:\n  - key: abseil-string-find-startswith.AbseilStringsMatchHeader\n    value: 'absl/strings/match.h'\n  - key: abseil-string-find-startswith.IncludeStyle\n    value: llvm\n  - key: abseil-string-find-startswith.StringLikeClasses\n    value: '::std::basic_string'\n  - key: bugprone-argument-comment.CommentBoolLiterals\n    value: '0'\n  - key: bugprone-argument-comment.CommentCharacterLiterals\n    value: '0'\n  - key: bugprone-argument-comment.CommentFloatLiterals\n    value: '0'\n  - key: bugprone-argument-comment.CommentIntegerLiterals\n    value: '0'\n  - key: bugprone-argument-comment.CommentNullPtrs\n    value: '0'\n  - key: bugprone-argument-comment.CommentStringLiterals\n    value: '0'\n  - key: bugprone-argument-comment.CommentUserDefinedLiterals\n    value: '0'\n  - key: bugprone-argument-comment.IgnoreSingleArgument\n    value: '0'\n  - key: bugprone-argument-comment.StrictMode\n    value: '0'\n  - key: bugprone-assert-side-effect.AssertMacros\n    value: assert\n  - key: bugprone-assert-side-effect.CheckFunctionCalls\n    value: '0'\n  - key: bugprone-dangling-handle.HandleClasses\n    value: 'std::basic_string_view;std::experimental::basic_string_view'\n  - key: bugprone-dynamic-static-initializers.HeaderFileExtensions\n    value: ',h,hh,hpp,hxx'\n  - key: bugprone-misplaced-widening-cast.CheckImplicitCasts\n    value: '0'\n  - key: bugprone-not-null-terminated-result.WantToUseSafeFunctions\n    value: '1'\n  - key: bugprone-sizeof-expression.WarnOnSizeOfCompareToConstant\n    value: '1'\n  - key: bugprone-sizeof-expression.WarnOnSizeOfConstant\n    value: '1'\n  - key: bugprone-sizeof-expression.WarnOnSizeOfIntegerExpression\n    value: '0'\n  - key: bugprone-sizeof-expression.WarnOnSizeOfThis\n    value: '1'\n  - key: bugprone-string-constructor.LargeLengthThreshold\n    value: '8388608'\n  - key: bugprone-string-constructor.WarnOnLargeLength\n    value: '1'\n  - key: bugprone-suspicious-enum-usage.StrictMode\n    value: '0'\n  - key: bugprone-suspicious-missing-comma.MaxConcatenatedTokens\n    value: '5'\n  - key: bugprone-suspicious-missing-comma.RatioThreshold\n    value: '0.200000'\n  - key: bugprone-suspicious-missing-comma.SizeThreshold\n    value: '5'\n  - key: bugprone-suspicious-string-compare.StringCompareLikeFunctions\n    value: ''\n  - key: bugprone-suspicious-string-compare.WarnOnImplicitComparison\n    value: '1'\n  - key: bugprone-suspicious-string-compare.WarnOnLogicalNotComparison\n    value: '0'\n  - key: bugprone-too-small-loop-variable.MagnitudeBitsUpperLimit\n    value: '16'\n  - key: bugprone-unhandled-self-assignment.WarnOnlyIfThisHasSuspiciousField\n    value: '1'\n  - key: bugprone-unused-return-value.CheckedFunctions\n    value: '::std::async;::std::launder;::std::remove;::std::remove_if;::std::unique;::std::unique_ptr::release;::std::basic_string::empty;::std::vector::empty'\n  - key: cert-dcl16-c.NewSuffixes\n    value: 'L;LL;LU;LLU'\n  - key: cert-msc51-cpp.DisallowedSeedTypes\n    value: 'time_t,std::time_t'\n  - key: cert-oop54-cpp.WarnOnlyIfThisHasSuspiciousField\n    value: '0'\n  - key: cppcoreguidelines-explicit-virtual-functions.IgnoreDestructors\n    value: '1'\n  - key: cppcoreguidelines-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic\n    value: '1'\n  - key: cppcoreguidelines-pro-type-member-init.IgnoreArrays\n    value: '0'\n  - key: cppcoreguidelines-pro-type-member-init.UseAssignment\n    value: '0'\n  - key: google-readability-braces-around-statements.ShortStatementLines\n    value: '1'\n  - key: google-readability-function-size.StatementThreshold\n    value: '800'\n  - key: google-readability-namespace-comments.ShortNamespaceLines\n    value: '10'\n  - key: google-readability-namespace-comments.SpacesBeforeComments\n    value: '2'\n  - key: hicpp-multiway-paths-covered.WarnOnMissingElse\n    value: '0'\n  - key: hicpp-signed-bitwise.IgnorePositiveIntegerLiterals\n    value: '0'\n  - key: misc-throw-by-value-catch-by-reference.CheckThrowTemporaries\n    value: '1'\n  - key: modernize-loop-convert.MaxCopySize\n    value: '16'\n  - key: modernize-loop-convert.MinConfidence\n    value: reasonable\n  - key: modernize-loop-convert.NamingStyle\n    value: CamelCase\n  - key: modernize-make-shared.IgnoreMacros\n    value: '1'\n  - key: modernize-make-shared.IncludeStyle\n    value: '0'\n  - key: modernize-make-shared.MakeSmartPtrFunction\n    value: 'std::make_shared'\n  - key: modernize-make-shared.MakeSmartPtrFunctionHeader\n    value: memory\n  - key: modernize-make-unique.IgnoreMacros\n    value: '1'\n  - key: modernize-make-unique.IncludeStyle\n    value: '0'\n  - key: modernize-make-unique.MakeSmartPtrFunction\n    value: 'std::make_unique'\n  - key: modernize-make-unique.MakeSmartPtrFunctionHeader\n    value: memory\n  - key: modernize-pass-by-value.IncludeStyle\n    value: llvm\n  - key: modernize-pass-by-value.ValuesOnly\n    value: '0'\n  - key: modernize-raw-string-literal.ReplaceShorterLiterals\n    value: '0'\n  - key: modernize-replace-auto-ptr.IncludeStyle\n    value: llvm\n  - key: modernize-replace-random-shuffle.IncludeStyle\n    value: llvm\n  - key: modernize-use-auto.MinTypeNameLength\n    value: '5'\n  - key: modernize-use-auto.RemoveStars\n    value: '0'\n  - key: modernize-use-emplace.ContainersWithPushBack\n    value: '::std::vector;::std::list;::std::deque'\n  - key: modernize-use-emplace.SmartPointers\n    value: '::std::shared_ptr;::std::unique_ptr;::std::auto_ptr;::std::weak_ptr'\n  - key: modernize-use-emplace.TupleMakeFunctions\n    value: '::std::make_pair;::std::make_tuple'\n  - key: modernize-use-emplace.TupleTypes\n    value: '::std::pair;::std::tuple'\n  - key: modernize-use-equals-default.IgnoreMacros\n    value: '1'\n  - key: modernize-use-equals-delete.IgnoreMacros\n    value: '1'\n  - key: modernize-use-nodiscard.ReplacementString\n    value: '[[nodiscard]]'\n  - key: modernize-use-noexcept.ReplacementString\n    value: ''\n  - key: modernize-use-noexcept.UseNoexceptFalse\n    value: '1'\n  - key: modernize-use-nullptr.NullMacros\n    value: 'NULL'\n  - key: modernize-use-override.AllowOverrideAndFinal\n    value: '0'\n  - key: modernize-use-override.FinalSpelling\n    value: final\n  - key: modernize-use-override.IgnoreDestructors\n    value: '0'\n  - key: modernize-use-override.OverrideSpelling\n    value: override\n  - key: modernize-use-transparent-functors.SafeMode\n    value: '0'\n  - key: performance-faster-string-find.StringLikeClasses\n    value: 'std::basic_string'\n  - key: performance-for-range-copy.AllowedTypes\n    value: ''\n  - key: performance-for-range-copy.WarnOnAllAutoCopies\n    value: '0'\n  - key: performance-inefficient-string-concatenation.StrictMode\n    value: '0'\n  - key: performance-inefficient-vector-operation.EnableProto\n    value: '0'\n  - key: performance-inefficient-vector-operation.VectorLikeClasses\n    value: '::std::vector'\n  - key: performance-move-const-arg.CheckTriviallyCopyableMove\n    value: '1'\n  - key: performance-move-constructor-init.IncludeStyle\n    value: llvm\n  - key: performance-no-automatic-move.AllowedTypes\n    value: ''\n  - key: performance-type-promotion-in-math-fn.IncludeStyle\n    value: llvm\n  - key: performance-unnecessary-copy-initialization.AllowedTypes\n    value: ''\n  - key: performance-unnecessary-value-param.AllowedTypes\n    value: ''\n  - key: performance-unnecessary-value-param.IncludeStyle\n    value: llvm\n  - key: portability-simd-intrinsics.Std\n    value: ''\n  - key: portability-simd-intrinsics.Suggest\n    value: '0'\n  - key: readability-inconsistent-declaration-parameter-name.IgnoreMacros\n    value: '1'\n  - key: readability-inconsistent-declaration-parameter-name.Strict\n    value: '0'\n  - key: readability-redundant-smartptr-get.IgnoreMacros\n    value: '1'\n  - key: readability-redundant-string-init.StringNames\n    value: '::std::basic_string'\n  - key: readability-simplify-subscript-expr.Types\n    value: '::std::basic_string;::std::basic_string_view;::std::vector;::std::array'\n  - key: readability-static-accessed-through-instance.NameSpecifierNestingThreshold\n    value: '3'\n...\n\n# vi: set ts=2 sw=2 expandtab:\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.556640625,
          "content": "Docs/* linguist-documentation\nSource/ThirdParty/* linguist-vendored\nbin/Data/Fonts/* linguist-vendored\n*.h linguist-language=C++\n\n# Автоматически нормализуем концы строк, если у пользователя не настроен параметр autocrlf\n# https://docs.github.com/en/get-started/getting-started-with-git/configuring-git-to-handle-line-endings\n* text=auto\n\n# Явно указываем файлы, в которых хотим всегда нормализовать концы строк\n*.c text\n*.cpp text\n*.h text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.9541015625,
          "content": "# Output directories\n/bin/*\n!/bin/**/\n!/bin/*.bat\n!/bin/*.sh\n/bin/*.app/\n/bin/*.app.dSYM/\n/bin/jit/\n/bin/Screenshots/\n/bin/tool/\n/include/\n/lib*/\ngenerated/\n/Source/Urho3D/tolua++-prefix/\nbuild/\n/captures/\n.cxx/\n/demo/\n\n# Output files\n/Source/**/*.a\n/Source/ThirdParty/Assimp/revision.h\n/Source/ThirdParty/Assimp/contrib/zlib/zconf.h\n/Source/ThirdParty/Assimp/include/assimp/config.h\n/Source/ThirdParty/LuaJIT/src/host/buildvm\n/Source/ThirdParty/LuaJIT/src/host/buildvm_arch.h\n/Source/ThirdParty/LuaJIT/src/host/minilua\n/Source/Urho3D/Precompiled.cpp\n/Source/Urho3D/Urho3D.h\n/Source/Urho3D/Urho3D.pc\n/Source/Urho3D/Urho3D.pc.msvc\n/Source/Urho3D/Urho3DAll.h\n/Source/Urho3D/librevision.h\n\n# Compiled shaders\n*.vs?\n*.ps?\n\n# Compiled AngelScript\n*.asc\n\n# Compiled Lua script\n*.luc\n\n# Generated documentation\n/Docs/html/\n/Docs/qch/\n\n# Saved sample scenes\n/bin/Data/Scenes/Isometric2D.xml\n/bin/Data/Scenes/Platformer2D.xml\n\n# Eclipse project settings\n/.*project\n/.settings\n\n# KDevelop project settings\n/*.kdev?\n\n# Qt Creator project settings\n/CMakeLists.txt.user\n\n# VSCode project settings\n/.vscode/\n\n# JetBrains IDE project settings\n/.idea/\n/cmake-build-*/\n*.iml\n\n# Code::Blocks project settings\n/*.cbp\n\n# Codelite project settings\n/*.project\n/*.workspace\n\n# Gradle project settings\n.gradle\n\n# Android project settings\n/local.properties\n\n# Visual Studio project settings\n/.vs/\n/CMakeSettings.json\n/out/\n\n# CMake generated build files\nCMakeCache.txt\nCMakeFiles/\nCMakeScripts/\nMakefile\ncmake_install.cmake\ninstall_manifest.txt\nCPackConfig.cmake\nCPackSourceConfig.cmake\nCTestTestfile.cmake\n/Source/**/*.cmake\n!/Source/ThirdParty/SDL/cmake/*.cmake\n!/Source/ThirdParty/SDL/include/*cmake\n!/Source/ThirdParty/Assimp/cmake-modules/*cmake\n/Docs/**/*.cmake\n\n# Precompiled header files\n*.gch/\n*.pch/\n*.pch.*\n\n# Custom rake tasks\n/.rake/\n.rake_t_cache\n\n# Misc.\nconfigure*\n*~\n*.swp\n.DS_Store\n*.log\n*.bak\nThumbs.db\n.directory\n\n# Doxygen mess from absence of 'dot' dependency\nCMakeDoxyFile.in\nCMakeDoxygenDefaults.cmake\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 7.7275390625,
          "content": "# Copyright (c) 2008-2023 the Urho3D project\n# License: MIT\n\n# Set CMake minimum version\ncmake_minimum_required (VERSION 3.15)\n\n# Set project name\nproject (Urho3D)\n\n# Show command line options\nget_cmake_property (CACHE_VARS CACHE_VARIABLES)\nforeach (CACHE_VAR ${CACHE_VARS})\n  get_property(CACHE_VAR_HELPSTRING CACHE ${CACHE_VAR} PROPERTY HELPSTRING)\n  if (CACHE_VAR_HELPSTRING STREQUAL \"No help, variable specified on the command line.\")\n    get_property(CACHE_VAR_TYPE CACHE ${CACHE_VAR} PROPERTY TYPE)\n    if (CACHE_VAR_TYPE STREQUAL \"UNINITIALIZED\")\n      set (CACHE_VAR_TYPE)\n    else ()\n      set (CACHE_VAR_TYPE \":${CACHE_VAR_TYPE}\")\n    endif()\n    set (CMAKE_ARGS \"${CMAKE_ARGS} -D ${CACHE_VAR}${CACHE_VAR_TYPE}=\\\"${${CACHE_VAR}}\\\"\")\n  endif ()\nendforeach ()\nmessage (\"!! CMAKE_ARGS: ${CMAKE_ARGS}\")\n\n# Включаем поддержку папок в IDE\nset_property (GLOBAL PROPERTY USE_FOLDERS ON)\n\n# Set CMake modules search path\nset (CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/Modules)\n\n# Include UrhoCommon.cmake module after setting project name\ninclude (UrhoCommon)\n\n# Setup SDK install destinations\nset (PATH_SUFFIX Urho3D)\nif (WIN32)\n    set (SCRIPT_EXT .bat)\n    if (CMAKE_HOST_WIN32)\n        set (PATH_SUFFIX .)\n        if (URHO3D_64BIT AND CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n            string (REPLACE \" (x86)\" \"\" CMAKE_INSTALL_PREFIX \"${CMAKE_INSTALL_PREFIX}\")\n        endif ()\n    endif ()\nelse ()\n    set (SCRIPT_EXT .sh)\nendif ()\nif (URHO3D_64BIT)\n    # Install to 'lib64' when one of these conditions is true\n    if ((MINGW AND CMAKE_CROSSCOMPILING) OR URHO3D_USE_LIB64_RPM OR (HAS_LIB64 AND NOT URHO3D_USE_LIB_DEB))\n        set (LIB_SUFFIX 64)\n    endif ()\nendif ()\nset (DEST_INCLUDE_DIR include/Urho3D)    # The include directory path contains the 'Urho3D' suffix regardless of PATH_SUFFIX variable\nset (DEST_SHARE_DIR share/${PATH_SUFFIX})\nset (DEST_BUNDLE_DIR ${DEST_SHARE_DIR}/Applications)\n# Note to package maintainer: ${PATH_SUFFIX} for library could be removed if the extra path is not desired, but if so then the RPATH setting in Source's CMakeLists.txt needs to be adjusted accordingly\nset (DEST_LIBRARY_DIR lib${LIB_SUFFIX}/${PATH_SUFFIX})\nset (DEST_PKGCONFIG_DIR lib${LIB_SUFFIX}/pkgconfig)\n# Install application launcher scripts\nfile (GLOB APP_SCRIPTS ${CMAKE_SOURCE_DIR}/bin/*${SCRIPT_EXT})\ninstall (PROGRAMS ${APP_SCRIPTS} DESTINATION ${DEST_RUNTIME_DIR})   # DEST_RUNTIME_DIR variable is set by the set_output_directories() macro call in the UrhoCommon module\n# Install CMake modules and toolchains provided by and for Urho3D\ninstall (DIRECTORY ${CMAKE_SOURCE_DIR}/cmake/ DESTINATION ${DEST_SHARE_DIR}/cmake)    # Note: the trailing slash is significant\n# Install CMake build scripts and rakefile\nfile (GLOB CMAKE_SCRIPTS ${CMAKE_SOURCE_DIR}/script/*${SCRIPT_EXT})\ninstall (PROGRAMS ${CMAKE_SCRIPTS} DESTINATION ${DEST_SHARE_DIR}/scripts)\ninstall (FILES rakefile DESTINATION ${DEST_SHARE_DIR})\n\n# Setup package variables\nset (URHO3D_DESCRIPTION \"Urho3D is a free lightweight, cross-platform 2D and 3D game engine implemented in C++ and released under the MIT license. Greatly inspired by OGRE (http://www.ogre3d.org) and Horde3D (http://www.horde3d.org).\")\nset (CPACK_PACKAGE_DESCRIPTION_SUMMARY ${URHO3D_DESCRIPTION})\nset (URHO3D_URL \"https://github.com/urho3d/Urho3D\")\nset (CPACK_PACKAGE_VENDOR ${URHO3D_URL})\nset (CPACK_PACKAGE_CONTACT ${URHO3D_URL})\nexecute_process (COMMAND ${CMAKE_COMMAND} -P ${CMAKE_SOURCE_DIR}/cmake/Modules/GetUrhoRevision.cmake WORKING_DIRECTORY ${CMAKE_SOURCE_DIR} OUTPUT_VARIABLE URHO3D_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE)\nset (CPACK_PACKAGE_VERSION ${URHO3D_VERSION})\nstring (REGEX MATCH \"([^.]+)\\\\.([^.]+)\\\\.(.+)\" MATCHED ${URHO3D_VERSION})\nif (MATCHED)\n    set (CPACK_PACKAGE_VERSION_MAJOR ${CMAKE_MATCH_1})\n    set (CPACK_PACKAGE_VERSION_MINOR ${CMAKE_MATCH_2})\n    set (CPACK_PACKAGE_VERSION_PATCH ${CMAKE_MATCH_3})\nendif ()\nset (CPACK_RESOURCE_FILE_LICENSE ${CMAKE_SOURCE_DIR}/licenses/urho3d/LICENSE)\nset (CPACK_SYSTEM_NAME ${CMAKE_SYSTEM_NAME})\nset (CPACK_GENERATOR TGZ)\nif (ANDROID)\n    set (CPACK_SYSTEM_NAME Android)\nelseif (IOS)\n    set (CPACK_SYSTEM_NAME iOS)\nelseif (TVOS)\n    set (CPACK_SYSTEM_NAME tvOS)\nelseif (APPLE)\n    set (CPACK_SYSTEM_NAME macOS)\nelseif (WIN32)\n    if (MINGW)\n        set (CPACK_SYSTEM_NAME MinGW)   # MinGW implies Windows platform\n    endif ()\n    if (CMAKE_HOST_WIN32)\n        set (CPACK_GENERATOR ZIP)       # Differentiate artifacts generated from Windows host system\n    endif ()\nelseif (WEB)\n    set (CPACK_SYSTEM_NAME Web)\nelseif (CPACK_SYSTEM_NAME STREQUAL Linux)\n    if (RPI)\n        set (CPACK_SYSTEM_NAME Raspberry-Pi)\n        set (CPACK_DEBIAN_PACKAGE_ARCHITECTURE armhf)\n    elseif (ARM)\n        set (CPACK_SYSTEM_NAME ARM)     # Generic ARM\n        if (URHO3D_64BIT)\n            set (CPACK_DEBIAN_PACKAGE_ARCHITECTURE arm64)\n        else ()\n            set (CPACK_DEBIAN_PACKAGE_ARCHITECTURE armhf)\n        endif ()\n    elseif (NOT URHO3D_64BIT)\n        set (CPACK_DEBIAN_PACKAGE_ARCHITECTURE i386)\n        set (CPACK_RPM_PACKAGE_ARCHITECTURE i686)       # The 'package' target should be built with the help of 'setarch i686' command on a 64-bit host system\n    endif ()\n    # TODO: Temporary disable RPM and DEB package generation for CI as it has run out of disk space for a few of the target platforms.\n    if (NOT DEFINED ENV{CI})\n        if (NOT URHO3D_64BIT OR HAS_LIB64)\n            list (APPEND CPACK_GENERATOR RPM)\n        endif ()\n        if (NOT URHO3D_64BIT OR NOT HAS_LIB64)\n            list (APPEND CPACK_GENERATOR DEB)\n        endif ()\n        if (URHO3D_64BIT)\n            if (URHO3D_USE_LIB64_RPM AND NOT HAS_LIB64)\n                set (CPACK_GENERATOR RPM)\n            elseif (URHO3D_USE_LIB_DEB AND HAS_LIB64)\n                set (CPACK_GENERATOR DEB)\n            endif ()\n        endif ()\n    endif ()\nendif ()\nif (URHO3D_64BIT)\n    set (CPACK_SYSTEM_NAME ${CPACK_SYSTEM_NAME}-64bit)\nendif ()\nset (CPACK_SYSTEM_NAME ${CPACK_SYSTEM_NAME}-${URHO3D_LIB_TYPE})\nif (WIN32 AND NOT URHO3D_OPENGL)\n    if (URHO3D_D3D11)\n        set (CPACK_SYSTEM_NAME ${CPACK_SYSTEM_NAME}-3D11)   # The artifact name has a space constraint on our website when viewed in a mobile browser, 3D11 stands for Direct3D 11\n    else ()\n        set (CPACK_SYSTEM_NAME ${CPACK_SYSTEM_NAME}-3D9)\n    endif ()\nelseif (ANDROID)\n    set (CPACK_SYSTEM_NAME ${CPACK_SYSTEM_NAME}-${ANDROID_ABI})\nelseif (RPI AND RPI_ABI MATCHES ^armeabi-v7a)\n    set (CPACK_SYSTEM_NAME ${CPACK_SYSTEM_NAME}-v7a)\nelseif (ARM_ABI_FLAGS)\n    string (REGEX REPLACE \"^.*mcpu=([^ ]+).*$\" -\\\\1 CPU_NAME \"${ARM_ABI_FLAGS}\")\n    string (REGEX REPLACE .*- - CPU_NAME \"${CPU_NAME}\")\n    string (TOUPPER \"${CPU_NAME}\" CPU_NAME)\n    set (CPACK_SYSTEM_NAME ${CPACK_SYSTEM_NAME}${CPU_NAME})\nendif ()\nif (NOT DEFINED ENV{RELEASE_TAG})\n    set (CPACK_SYSTEM_NAME ${CPACK_SYSTEM_NAME}-snapshot)\nendif ()\ninclude (CPack)\n\n# Setup macOS, iOS, and tvOS bundle variables\nif (URHO3D_MACOSX_BUNDLE OR (APPLE AND ARM))\n    if (NOT MACOSX_BUNDLE_ICON_FILE)\n        set (MACOSX_BUNDLE_ICON_FILE UrhoIcon)\n    endif ()\n    if (NOT MACOSX_BUNDLE_BUNDLE_VERSION)\n        set (MACOSX_BUNDLE_BUNDLE_VERSION ${URHO3D_VERSION})\n    endif ()\n    if (NOT MACOSX_BUNDLE_LONG_VERSION_STRING)\n        set (MACOSX_BUNDLE_LONG_VERSION_STRING ${URHO3D_VERSION})\n    endif ()\n    if (NOT MACOSX_BUNDLE_SHORT_VERSION_STRING)\n        set (MACOSX_BUNDLE_SHORT_VERSION_STRING ${URHO3D_VERSION})\n    endif ()\n    if (NOT MACOSX_BUNDLE_COPYRIGHT)\n        set (MACOSX_BUNDLE_COPYRIGHT \"Copyright (c) 2008-2023 the Urho3D project.\")\n    endif ()\nendif ()\n\n# Setup SDK-like include dir in the build tree for building the Urho3D library\nset (THIRD_PARTY_INCLUDE_DIR ${CMAKE_BINARY_DIR}/${DEST_INCLUDE_DIR}/ThirdParty)\nfile (MAKE_DIRECTORY ${THIRD_PARTY_INCLUDE_DIR})\n\n# Urho3D source\nadd_subdirectory (Source)\n\n# Urho3D documentation\nadd_subdirectory (Docs)\n"
        },
        {
          "name": "Docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.642578125,
          "content": "***Активная работа над движком без сохранения обратной совместимости ведётся в форке [Dviglo](https://github.com/dviglo/dviglo).***\n\n---\n\n***The founder of Urho3D (Lasse Öörni) is currently working on [Turso3D](https://github.com/cadaver/turso3d).***\n\n---\n\n# Urho3D\n\n![](https://raw.githubusercontent.com/urho3d-learn/flappy-urho/main/screen.png)\n\n[![CI/CD](https://github.com/urho3d/Urho3D/workflows/CI/CD/badge.svg)](https://github.com/urho3d/Urho3D/actions?query=workflow%3ACI%2FCD)\n[![Coverity Scan Build Status](https://scan.coverity.com/projects/4954/badge.svg)](https://scan.coverity.com/projects/urho3d-urho3d)\n\n**Urho3D** is a free lightweight, cross-platform 2D and 3D game engine.\n\n## License\n\nLicensed under the MIT license, see [LICENSE](licenses/urho3d/LICENSE) for details.<br>\nLicenses for third-party libraries: [licenses](licenses).<br>\nCredits: [licenses/urho3d/credits.md](licenses/urho3d/credits.md).\n\n## Important Links\n\n* [The last english version (1.9.0)](https://github.com/urho3d/urho3d/releases/tag/1.9.0)\n* [Documentation for 1.9.0 version](https://urho3d-doxygen.github.io/1_9_0_tutors/index.html)\n* [Documentation for latest version](https://urho3d-doxygen.github.io/latest/index.html)\n* [Wiki archive](https://github.com/urho3d-community/wiki-archive/wiki)\n* [Forum 🇬🇧](https://github.com/urho3d-community/discussions/discussions/categories/for-english-speakers)\n* [Old forum archive](https://urho3d-forum-archive.github.io)\n* [Web samples](https://urho3d-web-samples.github.io)\n* [Tools](https://github.com/urho3d-tools)\n\n## Project Authors\n\nThe founder of the project is [Lasse Öörni](https://github.com/cadaver). A huge contribution to the project was also made by\n[Yao Wei Tjong](https://github.com/weitjong), [asterj](https://github.com/aster2013)\nand many other developers, a list of which can be viewed [here](https://github.com/urho3d/Urho3D/graphs/contributors).\n\n---\n\n# Информация для русскоязычной аудитории\n\n**Urho3D** - это легковесный, кроссплатформенный 2D и 3D игровой движок.\n\n## Лицензия\n\nUrho3D распространяется под лицензией MIT.\n\nТексты лицензий:\n* [Проект Urho3D](licenses/urho3d/LICENSE)\n* [Третьесторонние библиотеки](licenses)\n\nПапку [licenses](licenses) удобно распространять вместе с игрой.\n\n## Важные ссылки:\n\n* [Документация, сгенерированная Doxygen](https://urho3d-doxygen.github.io)\n* [Форум 🇷🇺](https://github.com/urho3d-community/discussions/discussions)\n* [Wiki](https://github.com/urho3d-community/wiki/wiki)\n* [Архив англоязычной Wiki](https://github.com/urho3d-community/wiki-archive/wiki)\n* [Обучающие материалы](https://github.com/urho3d-learn)\n* [Инструменты и утилиты](https://github.com/urho3d-tools)\n* [Примеры, скомпилированные для веб](https://urho3d-web-samples.github.io)\n* [Архив старого форума](https://urho3d-forum-archive.github.io)\n\n## Авторы проекта\n\nОснователем проекта является [Lasse Öörni](https://github.com/cadaver). Огромный вклад в развитие проекта также внесли\n[Yao Wei Tjong](https://github.com/weitjong), [asterj](https://github.com/aster2013)\nи многие другие разработчики, список которых можно посмотреть [тут](https://github.com/urho3d/Urho3D/graphs/contributors).\n"
        },
        {
          "name": "Source",
          "type": "tree",
          "content": null
        },
        {
          "name": "SourceAssets",
          "type": "tree",
          "content": null
        },
        {
          "name": "android",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle.kts",
          "type": "blob",
          "size": 3.3994140625,
          "content": "// Copyright (c) 2008-2023 the Urho3D project\n// License: MIT\n\nimport org.gradle.internal.io.NullOutputStream\nimport java.io.ByteArrayOutputStream\n\nbuildscript {\n    extra[\"kotlinVersion\"] = \"1.4.10\"\n    val kotlinVersion: String by extra\n    repositories {\n        google()\n        mavenCentral()\n    }\n    dependencies {\n        classpath(\"com.android.tools.build:gradle:4.2.0+\")\n        classpath(\"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion\")\n    }\n}\n\nplugins {\n    id(\"com.jfrog.bintray\") version \"1.8.5\" apply false\n}\n\nval kotlinVersion: String by ext\n\nallprojects {\n    group = \"io.urho3d\"\n    version = determineVersion()\n    description = \"\"\"\n        Urho3D is a free lightweight, cross-platform 2D and 3D game engine implemented in C++ and\n        released under the MIT license. Greatly inspired by OGRE and Horde3D.\n    \"\"\".trimIndent().replace('\\n', ' ')\n    repositories {\n        google()\n        mavenCentral()\n    }\n    buildscript {\n        ext {\n            set(\"kotlinVersion\", kotlinVersion)\n            set(\"ndkSideBySideVersion\", \"21.3.6528147\")\n            set(\"cmakeVersion\", \"3.17.3+\")\n            set(\"buildStagingDir\", \".cxx\")\n        }\n    }\n}\n\ntasks {\n    wrapper {\n        distributionType = Wrapper.DistributionType.ALL\n    }\n    \"prepareKotlinBuildScriptModel\" {\n        listOf(\"Debug\", \"Release\").forEach {\n            dependsOn(\":android:urho3d-lib:generateJsonModel$it\")\n        }\n    }\n    register<Delete>(\"clean\") {\n        // Clean the build artifacts generated by the Gradle build system only, but keep the buildDir\n        rootProject.buildDir.listFiles { _, name -> name == \"intermediates\" || name == \"kotlin\" }?.let {\n            delete = it.toSet()\n        }\n    }\n    register<Delete>(\"cleanAll\") {\n        dependsOn(\"clean\")\n    }\n    register(\"aarVersion\") {\n        doLast {\n            println(\"AAR version: ${determineVersion()}\")\n        }\n    }\n}\n\n/**\n * Find the most recent tag that is reachable from a commit and use that to set the Gradle's project version.\n *\n * e.g. commit described as \"1.7-664-g34b1\" will be mapped to \"1.8-SNAPSHOT\", (development snapshot for next version)\n *      tag \"1.8\" will be mapped to \"1.8\" as is (point release version), so does tag \"1.8-RC\" (release candidate)\n */\nfun determineVersion(): String {\n    // If it is explicitly specified then use the specified version instead\n    System.getenv(\"GRADLE_PROJECT_VERSION\")?.let { return it }\n    val desc = describeCommit()\n    return Regex(\"^(.+?)-\\\\d\").find(desc)?.destructured?.component1()?.let { \"${bumpSemVer(it, 1)}-SNAPSHOT\" } ?: desc\n}\n\n/**\n * Find the most recent tag that is reachable from a commit.\n */\nfun describeCommit(sha: String? = null) = ByteArrayOutputStream().also {\n    exec {\n        commandLine = listOf(\"git\", \"describe\", \"--tags\", sha ?: \"--dirty\")\n        standardOutput = it\n        errorOutput = NullOutputStream.INSTANCE\n        isIgnoreExitValue = true    // In case no GIT command line tool or not a GIT repository\n    }\n}.toString().trim().let { if (it.isBlank()) \"Unversioned\" else it }\n\n/**\n * Bump the semantic versioning on the specified index, 0 for major version, 1 for minor version, and so on.\n */\nfun bumpSemVer(version: String, index: Int) = version\n    .split('.')\n    .mapIndexed { i: Int, s: String ->\n        when {\n            i < index -> s\n            i == index -> if (s.contains('-')) s else (s.toInt() + 1).toString()\n            else -> \"0\"\n        }\n    }\n    .joinToString(\".\")\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 1.1923828125,
          "content": "# Copyright (c) 2008-2023 the Urho3D project\n# License: MIT\n\n# Project-wide Gradle settings.\n# IDE (e.g. Android Studio) users:\n# Gradle settings configured through the IDE *will override*\n# any settings specified in this file.\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\norg.gradle.jvmargs=-Xmx4G\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true\n# AndroidX package structure to make it clearer which packages are bundled with the\n# Android operating system, and which are packaged with your app's APK\n# https://developer.android.com/topic/libraries/support-library/androidx-rn\nandroid.useAndroidX=true\n# Automatically convert third-party libraries to use AndroidX\nandroid.enableJetifier=true\n# Kotlin code style for this project: \"official\" or \"obsolete\":\nkotlin.code.style=official\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 7.99609375,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/master/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\nAPP_HOME=$( cd \"${APP_HOME:-./}\" && pwd -P ) || exit\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=${0##*/}\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n# Collect all arguments for the java command;\n#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of\n#     shell script including quotes and variable substitutions, so put them in\n#     double quotes to make sure that they get re-expanded; and\n#   * put everything else in single quotes, so that it's not re-expanded.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.6826171875,
          "content": "@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n\n@if \"%DEBUG%\"==\"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif %ERRORLEVEL% equ 0 goto execute\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto execute\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\n\n:end\n@rem End local scope for the variables with windows NT shell\nif %ERRORLEVEL% equ 0 goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nset EXIT_CODE=%ERRORLEVEL%\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\nexit /b %EXIT_CODE%\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "licenses",
          "type": "tree",
          "content": null
        },
        {
          "name": "rakefile",
          "type": "blob",
          "size": 27.9833984375,
          "content": "# Copyright (c) 2008-2023 the Urho3D project\n# License: MIT\n\ntask default: :build\n\ndesc 'Show info for the specified target platform'\ntask :info, [:kind] => [:init] do |_, args|\n  case args[:kind]\n  when 'build_tree'\n    print build_tree\n  when 'install_dir'\n    print install_dir\n  else\n    abort %q{Please specify the type of info requested: 'build_tree', 'install_dir'}\n  end\nend\n\ndesc 'Invoke CMake to configure and generate a build tree'\ntask :cmake => [:init] do\n  if ENV['CI']\n    system 'cmake --version' or abort 'Failed to find CMake'\n    if ENV['USE_CCACHE'] && ENV['GITHUB_EVENT_NAME'] != 'repository_dispatch' && /\\[cache clear\\]/ =~ `git log --format=%B -n1 2>/dev/null`\n      system 'bash', '-c', 'rm -rf ~/.{ccache,gradle}' or abort 'Failed to clear the build cache'\n      puts \"CMake cache has been cleared\"\n    end\n  end\n  next if ENV['PLATFORM'] == 'android' || (Dir.exists?(build_tree) and not ARGV.include?('cmake'))\n  ['CMAKE_INSTALL_PREFIX', 'URHO3D_HOME'].each { |var|\n    if ENV[var] == 'system'\n      ENV.delete(var)\n    elsif !ENV[var]\n      ENV[var] = install_dir if var == 'CMAKE_INSTALL_PREFIX' || Dir.exists?(install_dir)\n    end\n  }\n  script = \"script/cmake_#{ENV['GENERATOR']}#{ENV['OS'] ? '.bat' : '.sh'}\"\n  build_options = /linux|macOS|win/ =~ ENV['PLATFORM'] ? '' : \"-D #{ENV['PLATFORM'].upcase}=1\"\n  File.readlines('script/.build-options').each { |var|\n    var.chomp!\n    build_options = \"#{build_options} -D #{var}=#{ENV[var]}\" if ENV[var]\n  }\n  print %Q{#{script} \"#{build_tree}\" #{build_options}}\n  system %Q{#{script} \"#{build_tree}\" #{build_options}} or abort\nend\n\ndesc 'Clean the build tree'\ntask :clean => [:init] do\n  if ENV['PLATFORM'] == 'android'\n    Rake::Task[:gradle].invoke('clean')\n    next\n  end\n  system build_target('clean') or abort\nend\n\ndesc 'Build the software'\ntask :build, [:target] => [:cmake] do |_, args|\n  system \"ccache -z\" if ENV['USE_CCACHE']\n  if ENV['PLATFORM'] == 'android'\n    system \"echo '!which java';which java\" # Where is Java executable\n    system \"echo '!java -version';java -version\" # Print Java veriosn\n    system \"echo '!env';env\" # Print all environment variables\n    system \"echo '!ls -a $ANDROID_HOME';ls -a $ANDROID_HOME\"\n    system \"echo '!ls -a $ANDROID_HOME/platforms';ls -a $ANDROID_HOME/platforms\"\n    system \"echo '!ls -a $ANDROID_HOME/ndk';ls -a $ANDROID_HOME/ndk\"\n    system \"echo '!ls -a $ANDROID_HOME/build-tools';ls -a $ANDROID_HOME/build-tools\"\n    system \"echo '!ls -a $ANDROID_HOME/cmdline-tools';ls -a $ANDROID_HOME/cmdline-tools\"\n    system \"echo '!ls -a $ANDROID_HOME/cmake';ls -a $ANDROID_HOME/cmake\"\n    #system \"rm -r $ANDROID_HOME/.temp\"\n    #system \"$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager 'build-tools;30.0.2'\"\n    Rake::Task[:gradle].invoke('build -x test')\n    system \"ccache -s\" if ENV['USE_CCACHE']\n    next\n  end\n  filter = ''\n  case ENV['GENERATOR']\n  when 'xcode'\n    concurrent = '' # Assume xcodebuild will do the right things without the '-jobs'\n    filter = '|xcpretty -c && exit ${PIPESTATUS[0]}' if system('xcpretty -v >/dev/null 2>&1') && ENV['USE_XCPRETTY']\n  when 'vs'\n    concurrent = '/maxCpuCount'\n  else\n    concurrent = \"-j #{$max_jobs}\"\n    filter = \"2>#{lint_err_file}\" if ENV['URHO3D_LINT']\n  end\n  system \"#{build_target(args[:target])} -- #{concurrent} #{ENV['BUILD_PARAMS']} #{filter}\" or abort\n  system \"ccache -s\" if ENV['USE_CCACHE']\nend\n\ndesc 'Test the software'\ntask :test => [:init] do\n  if ENV['PLATFORM'] == 'android'\n    Rake::Task[:gradle].invoke('test')\n    next\n  elsif ENV['URHO3D_LINT'] == '1'\n    Rake::Task[:lint].invoke\n    next\n  elsif ENV['URHO3D_STYLE'] == '1'\n    Rake::Task[:style].invoke\n    next\n  end\n  wrapper = ENV['CI'] && ENV['PLATFORM'] == 'linux' ? 'xvfb-run' : ''\n  test = /xcode|vs/ =~ ENV['GENERATOR'] ? 'RUN_TESTS' : 'test'\n  system build_target(test, wrapper) or abort\nend\n\ndesc 'Generate documentation'\ntask :doc => [:init] do\n  if ENV['PLATFORM'] == 'android'\n    Rake::Task[:gradle].invoke('documentationZip')\n    next\n  end\n  system build_target('doc') or abort\nend\n\ndesc 'Install the software'\ntask :install, [:dest_dir] => [:init] do |_, args|\n  if ENV['PLATFORM'] == 'android'\n    Rake::Task[:gradle].invoke('publishToMavenLocal')\n    next\n  end\n  wrapper = args[:dest_dir] && !ENV['OS'] ? \"DESTDIR=#{verify_path(args[:dest_dir], true)}\" : ''\n  system build_target('install', wrapper) or abort\nend\n\ndesc 'Package build artifact'\ntask :package => [:init] do\n  next if ENV['PLATFORM'] == 'android'\n  wrapper = /linux|rpi|arm/ =~ ENV['PLATFORM'] && ENV['URHO3D_64BIT'] == '0' ? 'setarch i686' : ''\n  system build_target('package', wrapper) or abort\nend\n\ndesc 'Publish build artifact'\ntask :publish => [:init] do\n  if ENV['PLATFORM'] == 'android'\n    Rake::Task[:gradle].invoke(\"publish #{/refs\\/tags\\// =~ ENV['GITHUB_REF'] ? 'bintrayUpload' : ''}\")\n    next\n  end\n  Rake::Task[$publish_task.to_sym].invoke if $publish_task\nend\n\ndesc 'Create a new project'\ntask :new, [:name, :parent_dir, :use_copy] => [:init] do |_, args|\n  abort 'The \"new\" task can only be invoked in the Urho3D project root!' unless first_match(/^# (Urho3D)$/, 'README.md')\n  args.with_defaults(:name => 'UrhoApp', :parent_dir => '~/projects', :use_copy => false)\n  name = args[:name]\n  parent_dir = verify_path(args[:parent_dir])\n  dir = \"#{parent_dir}/#{name}\"\n  use_copy = args[:use_copy] || dockerized?\n  abort \"The directory '#{dir}' already exists!\" if Dir.exists?(dir)\n  puts \"Creating a new project in #{dir}...\"\n  func = FileUtils.method(use_copy ? :cp_r : :ln_s)\n  source_tree(name).split(\"\\n\").each do |it|\n    dirname, basename = /\\// =~ it.split(/\\s*<-\\s*/).first ? it.match(/([^\\s<]+)\\/(.+)/).captures : ['.', it]\n    FileUtils.mkdir_p(\"#{dir}/#{dirname}\")\n    if (matched = basename.match(/(?<basename>\\S+)\\s*<-\\s*:(?<symbol>\\S+)/))\n      File.write(\"#{dir}/#{dirname}/#{matched[:basename]}\", method(matched[:symbol].to_sym).call(name))\n    elsif (matched = basename.match(/(?<basename>\\S+)\\s*<-\\s*(?<dirname>\\S+)/))\n      func.call(verify_path(\"#{matched[:dirname]}/#{matched[:basename]}\"), \"#{dir}/#{dirname}\")\n    else\n      func.call(verify_path(it), \"#{dir}/#{dirname}\")\n    end\n  end\n  puts \"Done!\"\nend\n\n\n### Internal tasks ###\n\ntask :check_license do\n  commit = 0\n  # Automatically bump copyright when crossing a new year\n  if /2008-([0-9]{4}) the Urho3D project/.match(File.read('rakefile'))[1].to_i != Time.now.year\n    system %Q{\n      git config user.name #{ENV['PUBLISHER_NAME']} && \\\\\n      git config user.email #{ENV['PUBLISHER_EMAIL']} && \\\\\n      git add #{bump_copyright_year.join ' '} && \\\\\n      git commit -qm 'GH Actions: Bump copyright year to #{Time.now.year}.\\n[cache clear]'\n    } or abort \"Failed to commit copyright year update\"\n    commit = 1\n  end\n  # TODO: Check and merge any new 3rd-party license into 'Source/ThirdParty/LICENSES'\n  system 'echo \"name=commit::#{commit}\" >> $GITHUB_OUTPUT'\nend\n\ntask :ci do\n  ENV['URHO3D_PCH'] = '0' if ENV['PLATFORM'] == 'linux-gcc' # TODO - PCH causes cache miss on initial build for Linux/GCC, why?\n  platform_modifier = /(.+?)-(.+)/.match(ENV['PLATFORM'])\n  if platform_modifier\n    ENV['PLATFORM'] = platform_modifier[1]\n    ENV['MODIFIER'] = platform_modifier[2]\n  end\n  case ENV['HOST']\n  when 'linux'\n    ENV['URHO3D_DEPLOYMENT_TARGET'] = 'generic' if /linux|mingw/ =~ ENV['PLATFORM']\n    if ENV['MODIFIER'] == 'clang'\n      ENV['CC'] = 'clang'\n      ENV['CXX'] = 'clang++'\n    end\n  when 'windows'\n    if ENV['MODIFIER'] == 'gcc'\n      ENV['URHO3D_DEPLOYMENT_TARGET'] = 'generic'\n      ENV['GENERATOR'] = 'mingw'\n    end\n  else\n    # Do nothing\n  end\n  ENV['BUILD_TREE'] = 'build/ci'\n  ENV['CMAKE_BUILD_TYPE'] = ENV['BUILD_TYPE'] == 'dbg' ? 'Debug' : 'Release' if /dbg|rel/ =~ ENV['BUILD_TYPE']\n  case ENV['GRAPHICS_API']\n  when 'DX11'\n    ENV['URHO3D_D3D11'] = '1'\n  when 'DX9'\n    ENV['URHO3D_OPENGL'] = '0' # Need to make this explicit because 'MINGW' default to use OpenGL otherwise\n  when 'OpenGL'\n    ENV['URHO3D_OPENGL'] = '1'\n  else\n    # Do nothing\n  end\n  case ENV['PLATFORM']\n  when 'web'\n    ENV['EMSCRIPTEN_SHARE_DATA'] = '1'\n    $max_jobs = 1 if ENV['BUILD_TYPE'] == 'dbg'\n    $publish_task = 'ci_publish_web'\n  else\n    # Do nothing\n  end\n  ENV['URHO3D_LIB_TYPE'] = ENV['LIB_TYPE'].upcase if /static|shared/ =~ ENV['LIB_TYPE']\n  ENV['URHO3D_TESTING'] = '1' if /linux|macOS|win/ =~ ENV['PLATFORM']\n  ENV['URHO3D_LINT'] = '1' if ENV['MODIFIER'] == 'clang-tidy'\n  ENV['URHO3D_STYLE'] = '1' if ENV['MODIFIER'] == 'clang-format'\n  # Enable all the bells and whistles\n  %w[URHO3D_DATABASE_SQLITE URHO3D_EXTRAS].each { |it| ENV[it] = '1' }\nend\n\ntask :ci_publish_web do\n  require 'json'\n  system 'git clone --depth 1 -q https://github.com/urho3d/urho3d.github.io.git build/urho3d.github.io' or abort 'Failed to clone urho3d/urho3d.github.io'\n  system \"rsync -a --delete --exclude tool --exclude *.pak --exclude index.md ../engine_build/bin/ build/urho3d.github.io/samples\" or abort 'Failed to rsync Web samples'\n  Dir.chdir('build/urho3d.github.io/samples') {\n    next unless system 'git diff --quiet Urho3D.js.data'\n    uuid = `git diff --color=never --word-diff-regex='\\\\w+' --word-diff=porcelain Urho3D.js`.split.grep(/^[+-]\\w+-/).map { |it| it[0] = ''; it }\n    system %Q(ruby -i.bak -pe \"gsub '#{uuid.last}', '#{uuid.first}'\" Urho3D.js) or abort 'Failed to substitute UUID'\n    if system 'git diff --quiet Urho3D.js'\n      File.unlink 'Urho3D.js.bak'\n      Dir['*.js'].each { |file| system %Q(ruby -i -pe \"gsub '#{uuid.last}', '#{uuid.first}'\" #{file}) }\n    else\n      File.rename 'Urho3D.js.bak', 'Urho3D.js'\n    end\n  }\n  web = {'samples' => {}}\n  Dir.chdir('build/urho3d.github.io/samples') { web['samples']['Native'] = Dir['*.html'].sort }\n  web['player'] = web['samples']['Native'].pop # Assume the last sample after sorting is the Urho3DPlayer.html\n  {'AngelScript' => 'Scripts', 'Lua' => 'LuaScripts'}.each { |lang, subdir|\n    Dir.chdir(\"bin/Data/#{subdir}\") {\n      script_samples = Dir['[0-9]*'].sort\n      deleted_samples = [] # Delete samples that do not have their native counterpart\n      script_samples.each { |sample| deleted_samples.push sample unless web['samples']['Native'].include? \"#{sample.split('.').first}.html\" }\n      web['samples'][lang] = (script_samples - deleted_samples).map { |sample| \"#{subdir}/#{sample}\" }\n    }\n  }\n  File.open('build/urho3d.github.io/_data/web.json', 'w') { |file| file.puts web.to_json }\n  system %Q{\n    cd build/urho3d.github.io && \\\\\n    git config user.name #{ENV['PUBLISHER_NAME']} && \\\\\n    git config user.email #{ENV['PUBLISHER_EMAIL']} && \\\\\n    git remote set-url --push origin https://#{ENV['PUBLISHER_TOKEN']}@github.com/urho3d/urho3d.github.io.git && \\\\\n    git add -A . && \\\\\n    ( git commit -qm \"GH Actions: Web samples update at #{Time.now.utc}.\\n\\nCommit: https://github.com/#{ENV['GITHUB_REPOSITORY']}/commit/#{ENV['GITHUB_SHA']}\\n\\nMessage: #{`git log --format=%B -n 1`}\" || true) && \\\\\n    git push -q >/dev/null 2>&1\n  } or abort 'Failed to update Web samples'\nend\n\ntask :gradle, [:task] do |_, args|\n  system \"#{ENV['OS'] ? 'gradlew.bat' : './gradlew'} #{args[:task]} #{ENV['CI'] ? '--console plain' : ''}\" or abort\nend\n\ntask :init do\n  next if $max_jobs\n  Rake::Task[:ci].invoke if ENV['CI']\n  case build_host\n  when /linux/\n    $max_jobs = `grep -c processor /proc/cpuinfo`.chomp unless $max_jobs\n    ENV['GENERATOR'] = 'generic' unless ENV['GENERATOR']\n    unless ENV['PLATFORM']\n      if /x86/ =~ `uname -m`\n        ENV['PLATFORM'] = 'linux'\n      elsif Dir.exists?('/opt/vc')\n        ENV['PLATFORM'] = 'rpi'\n      else\n        ENV['PLATFORM'] = 'arm'\n      end\n    end\n  when /darwin|macOS/\n    $max_jobs = `sysctl -n hw.logicalcpu`.chomp unless $max_jobs\n    ENV['GENERATOR'] = 'xcode' unless ENV['GENERATOR']\n    ENV['PLATFORM'] = 'macOS' unless ENV['PLATFORM']\n  when /win32|mingw|mswin|windows/\n    unless $max_jobs\n      require 'win32ole'\n      WIN32OLE.connect('winmgmts://').ExecQuery(\"select NumberOfLogicalProcessors from Win32_ComputerSystem\").each { |it|\n        $max_jobs = it.NumberOfLogicalProcessors\n      }\n    end\n    ENV['GENERATOR'] = 'vs' unless ENV['GENERATOR']\n    ENV['PLATFORM'] = 'win' unless ENV['PLATFORM']\n  else\n    abort \"Unsupported host system: #{build_host}\"\n  end\n  # The 'ARCH' env-var, when set, has higher precedence than the 'URHO3D_64BIT' env-var\n  ENV['URHO3D_64BIT'] = ENV['ARCH'] == '32' ? '0' : '1' if /32|64/ =~ ENV['ARCH']\nend\n\ntask :lint do\n  lint_err = File.read(lint_err_file)\n  puts lint_err\n  # TODO: Tighten the check by failing the job later\n  # abort 'Failed to pass linter checks' unless lint_err.empty?\n  # puts 'Passed the linter checks'\nend\n\ntask :style do\n  system 'bash', '-c', %q{\n    git diff --name-only HEAD~ -- Source \\\n      |grep -v ThirdParty \\\n      |grep -P '\\.(?:c|cpp|h|hpp)' \\\n      |xargs clang-format -n -Werror 2>&1 \\\n      |tee build/clang-format.out \\\n      && exit ${PIPESTATUS[3]}\n  } or abort 'Failed to pass style checks'\n  puts 'Passed the style checks'\nend\n\ntask :source_checksum do\n  require 'digest'\n  sha256_final = Digest::SHA256.new\n  sha256_iter = Digest::SHA256\n  Dir['Source/**/*.{c,h}*'].each { |it| sha256_final << sha256_iter.file(it).hexdigest }\n  system 'echo \"name=hexdigest::#{sha256_final.hexdigest}\" >> $GITHUB_OUTPUT'\nend\n\ntask :update_dot_files do\n  system 'bash', '-c', %q{\n    perl -ne 'undef $/; print $1 if /(Build Option.*?(?=\\n\\n))/s' Docs/GettingStarted.dox \\\n      |tail -n +3 |cut -d'|' -f2 |tr -d [:blank:] >script/.build-options && \\\n    echo URHO3D_LINT >>script/.build-options && \\\n    cat script/.build-options <(perl -ne 'while (/([A-Z_]+):.+?/g) {print \"$1\\n\"}' .github/workflows/main.yml) \\\n      <(perl -ne 'while (/ENV\\[\\x27(\\w+)\\x27\\]/g) {print \"$1\\n\"}' rakefile) \\\n      <(perl -ne 'while (/System.getenv\\\\(\"(\\w+)\"\\\\)/g) {print \"$1\\n\"}' android/urho3d-lib/build.gradle.kts) \\\n      |sort |uniq |grep -Ev '^(HOME|PATH)$' >script/.env-file\n  } or abort 'Failed to update dot files'\n  if /schedule|workflow_dispatch/ =~ ENV['GITHUB_EVENT_NAME']\n    system %Q{\n      git config user.name #{ENV['PUBLISHER_NAME']} && \\\\\n      git config user.email #{ENV['PUBLISHER_EMAIL']} && \\\\\n      git add script/.build-options script/.env-file && \\\\\n      commit=0 && \\\\\n      if git commit -qm 'GH Actions: Update dot files for DBE.'; then commit=1; fi && \\\\\n      echo \"name=commit::$commit\" >> $GITHUB_OUTPUT\n    } or abort \"Failed to commit dot files update\"\n  end\nend\n\n\n### Internal methods ###\n\ndef build_host\n  ENV['HOST'] || RUBY_PLATFORM\nend\n\ndef build_tree\n  ENV['BUILD_TREE'] || \"build/#{dockerized? ? 'dockerized-' : ''}#{default_path}\"\nend\n\ndef build_config\n  /xcode|vs/ =~ ENV['GENERATOR'] ? \"--config #{ENV.fetch('CONFIG', 'Release')}\" : ''\nend\n\ndef build_target(tgt, wrapper = '')\n  %Q{#{wrapper} cmake --build \"#{build_tree}\" #{build_config} #{tgt ? \"--target #{tgt}\" : ''}}\nend\n\ndef bump_copyright_year(regex = '2008-[0-9]{4} the Urho3D project')\n  begin\n    copyrighted = `git grep -El '#{regex}'`.split\n    copyrighted.each { |filename|\n      replaced_content = File.read(filename).gsub(/#{regex}/, regex.gsub('[0-9]{4}', Time.now.year.to_s))\n      File.open(filename, 'w') { |file| file.puts replaced_content }\n    }\n    return copyrighted\n  rescue\n    abort 'Failed to bump copyright year'\n  end\nend\n\ndef default_path\n  \"#{ENV['PLATFORM'].downcase}\" \\\n  \"#{ENV['CC'] ? \"-#{ENV['CC']}\" : ''}\" \\\n  \"#{ENV['GENERATOR'] && /generic|xcode|vs/ =~ ENV['GENERATOR'] ? '' : \"-#{ENV['GENERATOR']}\"}\"\nend\n\ndef dockerized?\n  File.exists?('/entrypoint.sh')\nend\n\ndef install_dir\n  \"#{Dir.home}/.urho3d/install/#{default_path}\"\nend\n\ndef lint_err_file\n  'build/clang-tidy.out'\nend\n\ndef verify_path(path, auto_create = false)\n  require 'pathname'\n  begin\n    expanded_path = File.expand_path(path)\n    FileUtils.mkdir_p(expanded_path) if (auto_create && !Dir.exists?(expanded_path))\n    Pathname.new(expanded_path).realdirpath.to_s\n  rescue\n    abort \"The specified path '#{path}' is invalid!\"\n  end\nend\n\ndef first_match(regex, from)\n  begin\n    if from.instance_of?(Array)\n      array = from\n    else\n      array = File.exists?(from) ? File.readlines(from) : from.split(\"\\n\")\n    end\n    array.grep(regex).first.match(regex).captures.first\n  rescue\n    nil\n  end\nend\n\ndef source_tree(name)\n  <<-EOF\nbin/CoreData\nbin/Data/Materials/Mushroom.xml\nbin/Data/Models/Mushroom.mdl\nbin/Data/Music/Ninja Gods.ogg\nbin/Data/Textures/Mushroom.dds\nbin/Data/Textures/UrhoIcon.icns\nbin/Data/Textures/UrhoIcon.png\ncmake\ngradle\nscript\napp/src/main/cpp/#{name}.cpp <- :urho_app_cpp\napp/src/main/cpp/#{name}.h <- :urho_app_h\napp/src/main/java/io/urho3d/#{name.downcase}/MainActivity.kt <- :main_activity_kt\n#{Dir.chdir('android/launcher-app') { Dir['src/main/res/{drawable,mipmap}*'].map { |it| \"app/#{it} <- android/launcher-app/src/main/res\" }.join(\"\\n\") }}\napp/src/main/res/values/strings.xml <- :strings_xml\napp/src/main/AndroidManifest.xml <- :android_manifest_xml\napp/build.gradle.kts <- :app_build_gradle_kts\napp/CMakeLists.txt <- :app_cmake_lists_txt\napp/proguard-rules.pro <- android/launcher-app\nbuild.gradle.kts <- :root_build_gradle_kts\nCMakeLists.txt <- :root_cmake_lists_txt\ngradle.properties\ngradlew\ngradlew.bat\nrakefile\nsettings.gradle.kts <- :settings_gradle_kts\n.clang-format\n.clang-tidy\n.gitattributes <- :gitattributes\n.gitignore <- :gitignore\n  EOF\nend\n\ndef settings_gradle_kts(name)\n  <<-EOF\nrootProject.name = \"#{name}\"\ninclude(\":app\")\n  EOF\nend\n\ndef app_build_gradle_kts(name)\n  template = File.readlines('android/launcher-app/build.gradle.kts')\n  sdk_version = first_match(/compileSdkVersion\\((\\d+)\\)/, template)\n  min_sdk_version = first_match(/minSdkVersion\\((\\d+)\\)/, template)\n  aar_version = ENV['CI'] && ENV['PLATFORM'] != 'android' ? 'unknown' : # Skip using gradle all together when on CI, unless for Android build\n                    first_match(/AAR version: (.+)/, `#{ENV['OS'] ? 'gradlew.bat' : './gradlew'} aarVersion 2>#{ENV['OS'] ? 'null' : '/dev/null'}`)\n  type = ENV.fetch('URHO3D_LIB_TYPE', 'STATIC').downcase\n  <<-EOF\nplugins {\n    id(\"com.android.application\")\n    kotlin(\"android\")\n    kotlin(\"android.extensions\")\n}\n\nval kotlinVersion: String by ext\nval ndkSideBySideVersion: String by ext\nval cmakeVersion: String by ext\nval buildStagingDir: String by ext\n\nandroid {\n    ndkVersion = ndkSideBySideVersion\n    compileSdkVersion(#{sdk_version})\n    defaultConfig {\n        minSdkVersion(#{min_sdk_version})\n        targetSdkVersion(#{sdk_version})\n        applicationId = \"io.urho3d.#{name}\"\n        versionCode = 1\n        versionName = \"1.0\"\n        testInstrumentationRunner = \"android.support.test.runner.AndroidJUnitRunner\"\n        externalNativeBuild {\n            cmake {\n                arguments.apply {\n                    System.getenv(\"ANDROID_CCACHE\")?.let { add(\"-D ANDROID_CCACHE=$it\") }\n                    add(\"-D JNI_DIR=${project.file(buildStagingDir)}\")\n                    // Pass along matching env-vars as CMake build options\n                    addAll(project.file(\"../script/.build-options\")\n                        .readLines()\n                        .mapNotNull { variable -> System.getenv(variable)?.let { \"-D $variable=$it\" } }\n                    )\n                }\n            }\n        }\n        splits {\n            abi {\n                isEnable = project.hasProperty(\"ANDROID_ABI\")\n                reset()\n                include(\n                    *(project.findProperty(\"ANDROID_ABI\") as String? ?: \"\")\n                        .split(',')\n                        .toTypedArray()\n                )\n            }\n        }\n    }\n    buildTypes {\n        named(\"release\") {\n            isMinifyEnabled = false\n            proguardFiles(getDefaultProguardFile(\"proguard-android-optimize.txt\"), \"proguard-rules.pro\")\n        }\n    }\n    lintOptions {\n        isAbortOnError = false\n    }\n    externalNativeBuild {\n        cmake {\n            version = cmakeVersion\n            path = project.file(\"../CMakeLists.txt\")\n            setBuildStagingDirectory(buildStagingDir)\n        }\n    }\n    sourceSets {\n        named(\"main\") {\n            assets.srcDir(project.file(\"../bin\"))\n        }\n    }\n}\n\nval urhoReleaseImpl by configurations.creating { isCanBeResolved = true }\nconfigurations.releaseImplementation.get().extendsFrom(urhoReleaseImpl)\n\nval urhoDebugImpl by configurations.creating { isCanBeResolved = true }\nconfigurations.debugImplementation.get().extendsFrom(urhoDebugImpl)\n\ndependencies {\n    urhoReleaseImpl(\"io.urho3d:urho3d-lib-#{type}:#{aar_version}\")\n    urhoDebugImpl(\"io.urho3d:urho3d-lib-#{type}-debug:#{aar_version}\")\n    implementation(fileTree(mapOf(\"dir\" to \"libs\", \"include\" to listOf(\"*.jar\", \"*.aar\"))))\n    implementation(\"org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion\")\n    implementation(\"androidx.core:core-ktx:#{first_match(/\"androidx.core:core-ktx:(.+)\"/, template)}\")\n    implementation(\"androidx.appcompat:appcompat:#{first_match(/\"androidx.appcompat:appcompat:(.+)\"/, template)}\")\n    implementation(\"androidx.constraintlayout:constraintlayout:#{first_match(/\"androidx.constraintlayout:constraintlayout:(.+)\"/, template)}\")\n    testImplementation(\"junit:junit:#{first_match(/\"junit:junit:(.+)\"/, template)}\")\n    androidTestImplementation(\"androidx.test:runner:#{first_match(/\"androidx.test:runner:(.+)\"/, template)}\")\n    androidTestImplementation(\"androidx.test.espresso:espresso-core:#{first_match(/\"androidx.test.espresso:espresso-core:(.+)\"/, template)}\")\n}\n\nafterEvaluate {\n    android.buildTypes.forEach { buildType ->\n        val config = buildType.name.capitalize()\n        val unzipTaskName = \"unzipJni$config\"\n        tasks {\n            \"generateJsonModel$config\" {\n                dependsOn(unzipTaskName)\n            }\n            register<Copy>(unzipTaskName) {\n                val aar = configurations[\"urho${config}Impl\"].resolve().first { it.name.startsWith(\"urho3d-lib\") }\n                from(zipTree(aar))\n                include(\"urho3d/**\")\n                into(android.externalNativeBuild.cmake.buildStagingDirectory)\n            }\n        }\n    }\n}\n\ntasks {\n    register<Delete>(\"cleanAll\") {\n        dependsOn(\"clean\")\n        delete = setOf(android.externalNativeBuild.cmake.buildStagingDirectory)\n    }\n}\n  EOF\nend\n\ndef root_build_gradle_kts(_)\n  template = File.readlines('build.gradle.kts')\n  <<-EOF\nbuildscript {\n    extra[\"kotlinVersion\"] = \"#{first_match(/extra\\[\"kotlinVersion\"\\] = \"(.+)\"/, template)}\"\n    val kotlinVersion: String by extra\n    repositories {\n        google()\n        jcenter()\n    }\n    dependencies {\n        classpath(\"com.android.tools.build:gradle:#{first_match(/\"com.android.tools.build:gradle:(.+)\"/, template)}\")\n        classpath(\"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion\")\n    }\n}\n\nval kotlinVersion: String by ext\n\nallprojects {\n    repositories {\n        google()\n        jcenter()\n        // Remove below two repos if you are only using released AAR from JCenter\n        mavenLocal()\n        if (System.getenv(\"GITHUB_ACTOR\") != null && System.getenv(\"GITHUB_TOKEN\") != null) {\n            maven {\n                name = \"GitHubPackages\"\n                url = uri(\"https://maven.pkg.github.com/urho3d/Urho3D\")\n                credentials {\n                    username = System.getenv(\"GITHUB_ACTOR\")\n                    password = System.getenv(\"GITHUB_TOKEN\")\n                }\n            }\n        }\n    }\n    buildscript {\n        ext {\n            set(\"kotlinVersion\", kotlinVersion)\n            set(\"ndkSideBySideVersion\", \"#{first_match(/set\\(\"ndkSideBySideVersion\", \"(.+)\"\\)/, template)}\")\n            set(\"cmakeVersion\", \"#{first_match(/set\\(\"cmakeVersion\", \"(.+)\"\\)/, template)}\")\n            set(\"buildStagingDir\", \"#{first_match(/set\\(\"buildStagingDir\", \"(.+)\"\\)/, template)}\")\n        }\n    }\n}\n\ntasks {\n    wrapper {\n        distributionType = Wrapper.DistributionType.ALL\n    }\n    \"prepareKotlinBuildScriptModel\" {\n        listOf(\"Debug\", \"Release\").forEach {\n          dependsOn(\":app:unzipJni$it\")\n        }\n    }\n    register<Delete>(\"clean\") {\n        // Clean the build artifacts generated by the Gradle build system only, but keep the buildDir\n        rootProject.buildDir.listFiles { _, name -> name == \"intermediates\" || name == \"kotlin\" }?.let {\n            delete = it.toSet()\n        }\n    }\n    register<Delete>(\"cleanAll\") {\n        dependsOn(\"clean\")\n    }\n}\n  EOF\nend\n\ndef strings_xml(name)\n  <<-EOF\n<resources>\n    <string name=\"app_name\">#{name}</string>\n</resources>\n  EOF\nend\n\ndef android_manifest_xml(name)\n  <<-EOF\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"io.urho3d.#{name.downcase}\">\n\n    <application\n        android:allowBackup=\"true\"\n        android:hardwareAccelerated=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\">\n        <activity\n            android:name=\".MainActivity\"\n            android:configChanges=\"keyboardHidden|orientation|screenSize\"\n            android:screenOrientation=\"landscape\"\n            android:theme=\"@android:style/Theme.NoTitleBar.Fullscreen\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\"/>\n                <category android:name=\"android.intent.category.LAUNCHER\"/>\n            </intent-filter>\n        </activity>\n    </application>\n\n</manifest>\n  EOF\nend\n\ndef main_activity_kt(name)\n  <<-EOF\npackage io.urho3d.#{name.downcase}\n\nimport io.urho3d.UrhoActivity\n\nclass MainActivity : UrhoActivity()\n  EOF\nend\n\ndef app_cmake_lists_txt(name)\n  <<-EOF\nset(TARGET_NAME #{name})\ndefine_source_files(GLOB_CPP_PATTERNS src/main/cpp/*.cpp GLOB_H_PATTERNS src/main/cpp/*.h RECURSE GROUP)\nsetup_main_executable()\nsetup_test()\n  EOF\nend\n\ndef root_cmake_lists_txt(name)\n  <<-EOF\ncmake_minimum_required(VERSION #{first_match(/cmake_minimum_required\\s*\\(VERSION (.+)\\)/, 'CMakeLists.txt')})\nproject(#{name})\n\nset(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/Modules)\ninclude(UrhoCommon)\n\nadd_subdirectory(app)\n  EOF\nend\n\ndef urho_app_h(name)\n  <<-EOF\n#pragma once\n\n#include <Urho3D/Urho3DAll.h>\n\nclass #{name} : public Application\n{\n    URHO3D_OBJECT(#{name}, Application);\n\npublic:\n    explicit #{name}(Context* context);\n    void Start() override;\n\nprivate:\n    SharedPtr<Scene> scene_;\n};\n  EOF\nend\n\ndef urho_app_cpp(name)\n  <<-EOF\n#include \"#{name}.h\"\n\nURHO3D_DEFINE_APPLICATION_MAIN(#{name})\n\n#{name}::#{name}(Context* context) : Application(context) {}\n\nvoid #{name}::Start()\n{\n    auto* cache = GetSubsystem<ResourceCache>();\n    auto* graphics = GetSubsystem<Graphics>();\n    graphics->SetWindowIcon(cache->GetResource<Image>(\"Textures/UrhoIcon.png\"));\n    graphics->SetWindowTitle(\"#{name}\");\n\n    scene_ = new Scene(context_);\n    scene_->CreateComponent<Octree>();\n\n    Node* objectNode = scene_->CreateChild();\n    auto* object = objectNode->CreateComponent<StaticModel>();\n    object->SetModel(cache->GetResource<Model>(\"Models/Mushroom.mdl\"));\n    object->SetMaterial(cache->GetResource<Material>(\"Materials/Mushroom.xml\"));\n\n    auto* sound = scene_->CreateComponent<SoundSource>();\n    sound->SetSoundType(SOUND_MUSIC);\n    auto* music = cache->GetResource<Sound>(\"Music/Ninja Gods.ogg\");\n    music->SetLooped(true);\n    sound->Play(music);\n\n    Node* lightNode = scene_->CreateChild();\n    auto* light = lightNode->CreateComponent<Light>();\n    light->SetLightType(LIGHT_DIRECTIONAL);\n    lightNode->SetDirection(Vector3(0.6f, -1.f, 0.8f));\n\n    Node* cameraNode = scene_->CreateChild();\n    auto* camera = cameraNode->CreateComponent<Camera>();\n    cameraNode->SetPosition(Vector3(0.f, 0.3f, -3.f));\n\n    GetSubsystem<Renderer>()->SetViewport(0, new Viewport(context_, scene_, camera));\n\n    SubscribeToEvent(E_KEYUP, [&](StringHash, VariantMap&) { engine_->Exit(); });\n    SubscribeToEvent(E_UPDATE, [=](StringHash, VariantMap& eventData) {\n        objectNode->Yaw(eventData[Update::P_TIMESTEP].GetFloat());\n    });\n}\n  EOF\nend\n\ndef gitattributes(_)\n  <<-EOF\n*.h linguist-language=C++\n  EOF\nend\n\ndef gitignore(_)\n  <<-EOF\n# Code::Blocks project settings\n/*.cbp\n\n# Codelite project settings\n/*.project\n/*.workspace\n\n# Gradle project settings\n/local.properties\n.gradle/\nbuild/\n.cxx/\n\n# JetBrains IDE project settings\n/.idea/\n/cmake-build-*/\n*.iml\n\n# KDevelop project settings\n/*.kdev?\n\n# Qt Creator project settings\n/CMakeLists.txt.user\n\n# Visual Studio project settings\n/CMakeSettings.json\n/.vs/\n/out/\n\n# Misc.\n*~\n*.swp\n.DS_Store\n*.log\n*.bak\nThumbs.db\n.directory\n  EOF\nend\n\n\n# Load custom rake scripts\nDir['.rake/*.rake'].each { |r| load r }\n\n# vi: set ts=2 sw=2 expandtab:\n"
        },
        {
          "name": "script",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle.kts",
          "type": "blob",
          "size": 0.1162109375,
          "content": "// Copyright (c) 2008-2023 the Urho3D project\n// License: MIT\n\ninclude(\":android:urho3d-lib\", \":android:launcher-app\")\n"
        }
      ]
    }
  ]
}