{
  "metadata": {
    "timestamp": 1736565472603,
    "page": 329,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "HowardHinnant/date",
      "stars": 3199,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.095703125,
          "content": "# Normalize EOL for all files that Git considers text files.\n* text=auto eol=lf\n*zip -text -diff\n\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.994140625,
          "content": "#ignore thumbnails created by windows\nThumbs.db\n#Ignore files build by Visual Studio\n*.obj\n*.exe\n*.pdb\n*.user\n*.aps\n*.pch\n*.vspscc\n*_i.c\n*_p.c\n*.ncb\n*.suo\n*.tlb\n*.tlh\n*.bak\n*.cache\n*.ilk\n*.log\n[Bb]in\n[Dd]ebug*/\n*.lib\n*.sbr\nobj/\n[Rr]elease*/\n_ReSharper*/\n[Tt]est[Rr]esult*\n.idea/\n*.opensdf\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n# User-specific folders\n*.sln.ide/\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbuild/\nbld/\n[Bb]in/\n[Oo]bj/\n# Roslyn cache directories\n*.ide/\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n#NUNIT\n*.VisualState.xml\nTestResult.xml\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n# Chutzpah Test files\n_Chutzpah*\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n# TFS 2012 Local Workspace\n$tf/\n# Guidance Automation Toolkit\n*.gpState\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n# JustCode is a .NET coding addin-in\n.JustCode\n# TeamCity is a build add-in\n_TeamCity*\n# DotCover is a Code Coverage Tool\n*.dotCover\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n# Web workbench (sass)\n.sass-cache/\n# Installshield output folder\n[Ee]xpress/\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n# Click-Once directory\npublish/\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# If using the old MSBuild-Integrated Package Restore, uncomment this:\n#!**/packages/repositories.config\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n# Windows Store app package directory\nAppPackages/\n# Others\nsql/\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\nbower_components/\n# RIA/Silverlight projects\nGenerated_Code/\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n# SQL Server files\n*.mdf\n*.ldf\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n# Microsoft Fakes\nFakesAssemblies/\n*.suo\n*.vcxproj.filters\n*.npp\nCMakeFiles/*\nnbproject/*\n*.cd\n*.cd\na.out\ncmake-build-debug/*\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 3.2685546875,
          "content": "language: cpp\n\nenv:\n  global:\n    - CMAKE_EXTRA_CONF=\"-DCOMPILE_WITH_C_LOCALE=ON\"\n    - CTEST_OUTPUT_ON_FAILURE=1\n\nmatrix:\n  include:\n\n    - name: \"Ubuntu 16.04 LTS (Xenial Xerus) GCC 7\"\n      os: linux\n      dist: xenial\n      addons:\n        apt:\n          sources:\n            - ubuntu-toolchain-r-test\n          packages:\n            - g++-7\n      env:\n        - MATRIX_EVAL=\"CC=gcc-7 && CXX=g++-7\"\n\n    - name: \"Ubuntu 16.04 LTS (Xenial Xerus) GCC 8\"\n      os: linux\n      dist: xenial\n      addons:\n        apt:\n          sources:\n            - ubuntu-toolchain-r-test\n          packages:\n            - g++-8\n      env:\n        - MATRIX_EVAL=\"CC=gcc-8 && CXX=g++-8\"\n\n    - name: \"Ubuntu 16.04 LTS (Xenial Xerus) GCC 9\"\n      os: linux\n      dist: xenial\n      addons:\n        apt:\n          sources:\n            - ubuntu-toolchain-r-test\n          packages:\n            - g++-9\n      env:\n        - MATRIX_EVAL=\"CC=gcc-9 && CXX=g++-9\"\n\n    - name: \"Ubuntu 18.04 LTS (Bionic Beaver) GCC 7\"\n      os: linux\n      dist: bionic\n      addons:\n        apt:\n          sources:\n            - ubuntu-toolchain-r-test\n          packages:\n            - g++-7\n      env:\n        - MATRIX_EVAL=\"CC=gcc-7 && CXX=g++-7\"\n\n    - name: \"Ubuntu 18.04 LTS (Bionic Beaver) GCC 8\"\n      os: linux\n      dist: bionic\n      addons:\n        apt:\n          sources:\n            - ubuntu-toolchain-r-test\n          packages:\n            - g++-8\n      env:\n        - MATRIX_EVAL=\"CC=gcc-8 && CXX=g++-8\"\n\n    - name: \"Ubuntu 18.04 LTS (Bionic Beaver) Clang 6\"\n      os: linux\n      dist: bionic\n      addons:\n        apt:\n          sources:\n            - llvm-toolchain-bionic-6.0\n          packages:\n            - clang-6.0\n      env:\n        - MATRIX_EVAL=\"CC=clang-6.0 && CXX=clang++-6.0\"\n\n    - name: \"Ubuntu 18.04 LTS (Bionic Beaver) Clang 7\"\n      os: linux\n      dist: bionic\n      addons:\n        apt:\n          sources:\n            - llvm-toolchain-bionic-7\n          packages:\n            - clang-7\n      env:\n        - MATRIX_EVAL=\"CC=clang-7 && CXX=clang++-7\"\n\n    - name: \"Ubuntu 18.04 LTS (Bionic Beaver) Clang 8\"\n      os: linux\n      dist: bionic\n      addons:\n        apt:\n          sources:\n            - llvm-toolchain-bionic-8\n          packages:\n            - clang-8\n      env:\n        - MATRIX_EVAL=\"CC=clang-8 && CXX=clang++-8\"\n\n    - &macos\n      name: xcode10\n      os: osx\n      osx_image: xcode10.2\n      env:\n        - CMAKE_EXTRA_CONF=\"\"\n      addons:\n        homebrew:\n          packages:\n            - bash\n            - ninja\n\n    - <<: *macos\n      name: xcode9\n      # xcode 9 only works if we tell it to use c++14 explicitly\n      env:\n        - CMAKE_EXTRA_CONF=\"-DCMAKE_CXX_STANDARD=14\"\n      osx_image: xcode9.4\n\n    - <<: *macos\n      osx_image: xcode11\n      name: xcode11\n\nbefore_install:\n  - eval \"${MATRIX_EVAL}\"\n  - ci/install_cmake.sh 3.15.2\n  - export OPENSSL_ROOT=$(brew --prefix openssl@1.1)\n  - if [ \"$(uname)\" = \"Darwin\" ] ; then export PATH=\"$HOME/cmake/CMake.app/Contents/bin:${PATH}\"; fi\n  - if [ \"$(uname)\" = \"Linux\" ] ; then export PATH=\"$HOME/cmake/bin:${PATH}\"; fi\n\ncache:\n  directories:\n    - $HOME/cmake\n\nscript:\n  - mkdir -p build\n  - cd build\n  - eval cmake -DENABLE_DATE_TESTING=ON -DBUILD_SHARED_LIBS=ON ${CMAKE_EXTRA_CONF} ..\n  - cmake --build . --parallel\n  - cmake --build . --parallel --target testit\n\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 11.34375,
          "content": "#[===================================================================[\n   date library by Howard Hinnant\n\n   CMake projects that wish to use this library should consider\n   something like the following :\n\n     include( FetchContent )\n     FetchContent_Declare( date_src\n       GIT_REPOSITORY https://github.com/HowardHinnant/date.git\n       GIT_TAG        v3.0.1  # adjust tag/branch/commit as needed\n     )\n     FetchContent_MakeAvailable(date_src)\n     ...\n     target_link_libraries (my_target PRIVATE date::date)\n\n#]===================================================================]\n\ncmake_minimum_required( VERSION 3.7 )\n\nproject( date VERSION 3.0.3 )\nset(ABI_VERSION 3) # used as SOVERSION, increment when ABI changes\n\nget_directory_property( has_parent PARENT_DIRECTORY )\n\nif (POLICY CMP0077)\n    # Allow CMake 3.13+ to override options when using FetchContent / add_subdirectory.\n    cmake_policy(SET CMP0077 NEW)\nendif ()\n\n# Override by setting on CMake command line.\nset( CMAKE_CXX_STANDARD 17 CACHE STRING \"The C++ standard whose features are requested.\" )\n\noption( USE_SYSTEM_TZ_DB \"Use the operating system's timezone database\" OFF )\noption( MANUAL_TZ_DB \"User will set TZ DB manually by invoking set_install in their code\" OFF )\noption( USE_TZ_DB_IN_DOT \"Save the timezone database in the current folder\" OFF )\noption( BUILD_SHARED_LIBS  \"Build a shared version of library\" OFF )\noption( ENABLE_DATE_TESTING \"Enable unit tests\" OFF )\noption( DISABLE_STRING_VIEW \"Disable string view\" OFF )\noption( COMPILE_WITH_C_LOCALE \"define ONLY_C_LOCALE=1\" OFF )\noption( BUILD_TZ_LIB \"build/install of TZ library\" OFF )\noption( ENABLE_DATE_INSTALL \"Enable install\" ON )\n\nif( ENABLE_DATE_TESTING AND NOT BUILD_TZ_LIB )\n    message(WARNING \"Testing requested, but BUILD_TZ_LIB not ON - forcing the latter\")\n    set (BUILD_TZ_LIB ON CACHE BOOL \"required for testing\" FORCE)\nendif( )\n\nif( ENABLE_DATE_INSTALL )\n  include( GNUInstallDirs )\nendif( )\n\nfunction( print_option OPT )\n    if ( NOT DEFINED PRINT_OPTION_CURR_${OPT} OR ( NOT PRINT_OPTION_CURR_${OPT} STREQUAL ${OPT} ) )\n        set( PRINT_OPTION_CURR_${OPT} ${${OPT}} CACHE BOOL \"\" )\n        mark_as_advanced(PRINT_OPTION_CURR_${OPT})\n        message( \"# date: ${OPT} ${${OPT}}\" )\n    endif( )\nendfunction( )\n\nprint_option( USE_SYSTEM_TZ_DB )\nprint_option( MANUAL_TZ_DB )\nprint_option( USE_TZ_DB_IN_DOT )\nprint_option( BUILD_SHARED_LIBS  )\nprint_option( ENABLE_DATE_TESTING )\nprint_option( DISABLE_STRING_VIEW )\n\n#[===================================================================[\n   date (header only) library\n#]===================================================================]\nadd_library( date INTERFACE )\nadd_library( date::date ALIAS date )\ntarget_include_directories( date INTERFACE\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}> )\n# adding header sources just helps IDEs\ntarget_sources( date INTERFACE\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/include>$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>/date/date.h\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/include>$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>/date/solar_hijri.h\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/include>$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>/date/islamic.h\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/include>$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>/date/iso_week.h\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/include>$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>/date/julian.h\n)\n\nset(TARGET_HEADERS\n    include/date/date.h\n    include/date/solar_hijri.h\n    include/date/islamic.h\n    include/date/iso_week.h\n    include/date/julian.h\n)\n\nif (CMAKE_VERSION VERSION_GREATER_EQUAL 3.15)\n    # public headers will get installed:\n    set_target_properties( date PROPERTIES PUBLIC_HEADER \"${TARGET_HEADERS}\" )\nendif ()\n\n# These used to be set with generator expressions,\n#\n#   ONLY_C_LOCALE=$<IF:$<BOOL:${COMPILE_WITH_C_LOCALE}>,1,0>\n#\n# which expand in the output target file to, e.g.\n#\n#   ONLY_C_LOCALE=$<IF:$<BOOL:FALSE>,1,0>\n#\n# This string is then (somtimes?) not correctly interpreted.\nif ( COMPILE_WITH_C_LOCALE )\n  # To workaround libstdc++ issue https://github.com/HowardHinnant/date/issues/388\n  target_compile_definitions( date INTERFACE ONLY_C_LOCALE=1 )\nelse()\n  target_compile_definitions( date INTERFACE ONLY_C_LOCALE=0 )\nendif()\nif ( DISABLE_STRING_VIEW )\n  target_compile_definitions( date INTERFACE HAS_STRING_VIEW=0 -DHAS_DEDUCTION_GUIDES=0 )\nelse()\n  target_compile_definitions( date INTERFACE HAS_STRING_VIEW=1 )\nendif()\n\n#[===================================================================[\n   tz (compiled) library\n#]===================================================================]\nif( BUILD_TZ_LIB )\n    add_library( date-tz )\n    target_compile_definitions( date-tz PRIVATE BUILD_TZ_LIB=1 )\n    target_sources( date-tz\n      PUBLIC\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/include>$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>/date/tz.h\n      PRIVATE\n        include/date/tz_private.h\n        src/tz.cpp )\n    if ( IOS )\n      target_sources( date-tz\n        PUBLIC\n          $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/include>$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>/date/ios.h\n        PRIVATE\n          src/ios.mm )\n    endif()\n    add_library( date::date-tz ALIAS date-tz )\n    target_link_libraries( date-tz PUBLIC date )\n    target_include_directories( date-tz PUBLIC\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}> )\n\n    if ( USE_SYSTEM_TZ_DB OR MANUAL_TZ_DB )\n      target_compile_definitions( date-tz PRIVATE AUTO_DOWNLOAD=0 HAS_REMOTE_API=0 )\n    else()\n      target_compile_definitions( date-tz PRIVATE AUTO_DOWNLOAD=1 HAS_REMOTE_API=1 )\n    endif()\n\n    if ( USE_SYSTEM_TZ_DB AND NOT WIN32 AND NOT MANUAL_TZ_DB )\n      target_compile_definitions( date-tz PRIVATE INSTALL=. PUBLIC USE_OS_TZDB=1 )\n    else()\n      target_compile_definitions( date-tz PUBLIC USE_OS_TZDB=0 )\n    endif()\n\n    if ( WIN32 AND BUILD_SHARED_LIBS )\n      target_compile_definitions( date-tz PUBLIC DATE_BUILD_DLL=1 )\n    endif()\n\n    set(TZ_HEADERS include/date/tz.h)\n\n    if( IOS )\n        list(APPEND TZ_HEADERS include/date/ios.h)\n    endif( )\n    set_target_properties( date-tz PROPERTIES\n        POSITION_INDEPENDENT_CODE ON\n        PUBLIC_HEADER \"${TZ_HEADERS}\"\n        VERSION \"${PROJECT_VERSION}\"\n        SOVERSION \"${ABI_VERSION}\" )\n    if( NOT MSVC )\n        find_package( Threads )\n        target_link_libraries( date-tz PUBLIC Threads::Threads )\n    endif( )\n    if( NOT USE_SYSTEM_TZ_DB AND NOT MANUAL_TZ_DB )\n        find_package( CURL REQUIRED )\n        target_include_directories( date-tz SYSTEM PRIVATE ${CURL_INCLUDE_DIRS} )\n        target_link_libraries( date-tz PRIVATE ${CURL_LIBRARIES} )\n    endif( )\nendif( )\n\n#[===================================================================[\n   installation\n#]===================================================================]\nif( ENABLE_DATE_INSTALL )\n  set( version_config \"${CMAKE_CURRENT_BINARY_DIR}/dateConfigVersion.cmake\" )\n\n  include( CMakePackageConfigHelpers )\n  write_basic_package_version_file( \"${version_config}\"\n      VERSION ${PROJECT_VERSION}\n      COMPATIBILITY SameMajorVersion )\n\n  install( TARGETS date\n      EXPORT dateConfig\n      PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/date )\n  export( TARGETS date NAMESPACE date:: FILE dateTargets.cmake )\n  if (CMAKE_VERSION VERSION_LESS 3.15)\n      install(\n          FILES ${TARGET_HEADERS}\n          DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/date )\n  endif ()\n\n  if( BUILD_TZ_LIB )\n      install( TARGETS date-tz\n          EXPORT dateConfig\n          PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/date\n          ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n          LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n          RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} )  # This is for Windows\n      export( TARGETS date-tz NAMESPACE date:: APPEND FILE dateTargets.cmake )\n  endif( )\n\n  if( WIN32 AND NOT CYGWIN)\n      set( CONFIG_LOC CMake )\n  else( )\n      set( CONFIG_LOC \"${CMAKE_INSTALL_LIBDIR}/cmake/date\" )\n  endif( )\n  install( EXPORT dateConfig\n    FILE dateTargets.cmake\n    NAMESPACE date::\n    DESTINATION ${CONFIG_LOC} )\n  install (\n    FILES cmake/dateConfig.cmake \"${version_config}\"\n    DESTINATION ${CONFIG_LOC})\nendif( )\n\n#[===================================================================[\n   testing\n#]===================================================================]\nif( ENABLE_DATE_TESTING )\n    enable_testing( )\n\n    add_custom_target( testit COMMAND ${CMAKE_CTEST_COMMAND} )\n    add_dependencies( testit date-tz )\n\n    function( add_pass_tests TEST_GLOB TEST_PREFIX )\n        file( GLOB_RECURSE FILENAMES ${TEST_GLOB} )\n\n        foreach( TEST_FILE ${FILENAMES} )\n            get_filename_component( TEST_NAME ${TEST_FILE} NAME_WE )\n            get_filename_component( TEST_EXT ${TEST_FILE} EXT )\n            if( NOT ${TEST_EXT} STREQUAL \".fail.cpp\" )\n                set( PREFIX \"${TEST_PREFIX}_pass_${TEST_NAME}\" )\n                set( BIN_NAME ${PREFIX}_bin )\n                set( TST_NAME ${PREFIX}_test )\n                add_executable( ${BIN_NAME} EXCLUDE_FROM_ALL ${TEST_FILE} )\n                add_test( ${TST_NAME} ${BIN_NAME} )\n                target_link_libraries( ${BIN_NAME} date-tz )\n                # HACK: because the test files don't use FQ includes:\n                target_include_directories( ${BIN_NAME} PRIVATE include/date )\n                add_dependencies( testit ${BIN_NAME} )\n            endif( )\n        endforeach( )\n    endfunction( )\n\n    function( add_fail_tests TEST_GLOB TEST_PREFIX )\n        file( GLOB_RECURSE FILENAMES ${TEST_GLOB} )\n\n        foreach( TEST_FILE ${FILENAMES} )\n            get_filename_component( TEST_NAME ${TEST_FILE} NAME_WE )\n            get_filename_component( TEST_EXT ${TEST_FILE} EXT )\n\n            set( TEST_TYPE \"_fail\" )\n\n            set( PREFIX \"${TEST_PREFIX}_fail_${TEST_NAME}\" )\n            set( BIN_NAME ${PREFIX}_bin )\n            set( TST_NAME ${PREFIX}_test )\n\n            set( TEST_BIN_NAME ${CMAKE_BINARY_DIR}/${BIN_NAME} )\n            add_custom_target( ${BIN_NAME}\n                COMMAND\n                    ${PROJECT_SOURCE_DIR}/compile_fail.sh\n                    ${TEST_BIN_NAME}\n                    ${CMAKE_CXX_COMPILER}\n                    -std=c++14\n                    -L${CMAKE_BINARY_DIR}/\n                    -ldate-tz\n                    -I${PROJECT_SOURCE_DIR}/include\n                    -I${PROJECT_SOURCE_DIR}/include/date\n                    -o ${BIN_NAME}\n                    ${TEST_FILE}\n                WORKING_DIRECTORY ${CMAKE_BINARY_DIR}\n                COMMENT ${TST_NAME} )\n            add_test( ${TST_NAME} \"${PROJECT_SOURCE_DIR}/test_fail.sh\" ${CMAKE_BINARY_DIR}/${BIN_NAME} WORKING_DIRECTORY \"${PROJECT_SOURCE_DIR}/\" )\n            #set_tests_properties( ${TST_NAME} PROPERTIES WILL_FAIL TRUE)\n            add_dependencies( testit ${BIN_NAME} )\n        endforeach( )\n    endfunction( )\n\n    file( GLOB children RELATIVE \"${PROJECT_SOURCE_DIR}/test\" \"${PROJECT_SOURCE_DIR}/test/*\" )\n    foreach( child ${children} )\n        if( IS_DIRECTORY \"${PROJECT_SOURCE_DIR}/test/${child}\" )\n            set( CUR_FOLDER \"${PROJECT_SOURCE_DIR}/test/${child}\" )\n            add_pass_tests( \"${CUR_FOLDER}/*.cpp\" ${child} )\n            if( NOT WIN32 )\n                add_fail_tests( \"${CUR_FOLDER}/*.fail.cpp\" ${child} )\n            endif( )\n        endif( )\n    endforeach( )\nendif( )\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.5986328125,
          "content": "The source code in this project is released using the MIT License. There is no\nglobal license for the project because each file is licensed individually with\ndifferent author names and/or dates.\n\nIf you contribute to this project, please add your name to the license of each\nfile you modify.  If you have already contributed to this project and forgot to\nadd your name to the license, please feel free to submit a new P/R to add your\nname to the license in each file you modified.\n\nFor convenience, here is a copy of the MIT license found in each file except\nwithout author names or dates:\n\nThe MIT License (MIT)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.693359375,
          "content": "# Date\n\n[![Build Status](https://travis-ci.org/HowardHinnant/date.svg?branch=master)](https://travis-ci.org/HowardHinnant/date)\n[![Join the chat at https://gitter.im/HowardHinnant/date](https://badges.gitter.im/HowardHinnant/date.svg)](https://gitter.im/HowardHinnant/date?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n---\n\n**[Try it out on wandbox!](https://wandbox.org/permlink/oyXjibyF680HHoyS)**\n\n## Summary\n\nThis is actually several separate C++11/C++14/C++17 libraries:\n\n1. `\"date.h\"` is a header-only library which builds upon `<chrono>`.  It adds some new `duration` types, and new `time_point` types.  It also adds \"field\" types such as `year_month_day` which is a struct `{year, month, day}`.  And it provides convenient means to convert between the \"field\" types and the `time_point` types.\n\n    * Documentation: http://howardhinnant.github.io/date/date.html\n    * Video: https://www.youtube.com/watch?v=tzyGjOm8AKo\n    * Slides: http://schd.ws/hosted_files/cppcon2015/43/hinnant_dates.pdf\n\n1. `\"tz.h\"` / `\"tz.cpp\"`  are a timezone library built on top of the `\"date.h\"` library.  This timezone library is a complete parser of the IANA timezone database.  It provides for an easy way to access all of the data in this database, using the types from `\"date.h\"` and `<chrono>`.  The IANA database also includes data on leap seconds, and this library provides utilities to compute with that information as well.\n\n    * Documentation: http://howardhinnant.github.io/date/tz.html\n    * Video: https://www.youtube.com/watch?v=Vwd3pduVGKY\n    * Slides: http://schd.ws/hosted_files/cppcon2016/0f/Welcome%20To%20The%20Time%20Zone%20-%20Howard%20Hinnant%20-%20CppCon%202016.pdf\n\n1. `\"iso_week.h\"` is a header-only library built on top of the `\"date.h\"` library which implements the ISO week date calendar.\n\n    * Documentation: http://howardhinnant.github.io/date/iso_week.html\n\n1. `\"julian.h\"` is a header-only library built on top of the `\"date.h\"` library which implements a proleptic Julian calendar which is fully interoperable with everything above.\n\n    * Documentation: http://howardhinnant.github.io/date/julian.html\n\n1. `\"islamic.h\"` is a header-only library built on top of the `\"date.h\"` library which implements a proleptic Islamic calendar which is fully interoperable with everything above.\n\n    * Documentation: http://howardhinnant.github.io/date/islamic.html\n\n## Standardization\n\nSlightly modified versions of `\"date.h\"` and `\"tz.h\"` were voted into the C++20 working draft at the Jacksonville FL meeting on 2018-03-17:\n\n* http://howardhinnant.github.io/date/d0355r7.html\n\n## Build & Test\n\nThe recommended way to use any of these libraries besides `\"tz.h\"` is to just include it.  These are header-only libraries (except `\"tz.h\"`).\n\nTo use `\"tz.h\"`, there is a single source file (`src/tz.cpp`) that needs to be compiled. Here are the recommended directions:  https://howardhinnant.github.io/date/tz.html#Installation.\n\nOne can run tests by cd'ing into the `test` subdirectory and running `testit`.  There are known failures on all platforms except for macOS.  And even on macOS if C++11 is used.  If any of these failures present problems for you, there exist workarounds.\n\nAdditionally there is _unsupported_ support for [vcpkg](https://github.com/Microsoft/vcpkg) and [CMake](https://cmake.org/).  I don't personally use or maintain these systems as for me they cause more problems than they solve (for this small project).  If you would like to contribute to these build systems please feel free to file a PR.\n\nYou can download and install Date using the [vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\n\n    git clone https://github.com/Microsoft/vcpkg.git\n    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n    vcpkg install date\n\nThe Date port in vcpkg is updated by Microsoft team members and community contributors. If the version falls behind, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\nYou can optionally build using [CMake](https://cmake.org/). Here is a guide of how to build and test using the CMake Makefile generator.\n\n```bash\nmkdir build\ncd build\ncmake -DENABLE_DATE_TESTING=ON -DBUILD_TZ_LIB=ON ../\ncmake --build . --target testit # Consider '-- -j4' for multithreading\n```\n## Projects using this library\n\n* www.safe.com\n* www.webtoolkit.eu/wt\n* https://github.com/ViewTouch/viewtouch\n* https://routinghub.com\n* https://github.com/valhalla\n* https://github.com/siodb/siodb\n* https://github.com/KomodoPlatform/atomicDEX-Pro\n* https://github.com/Kotlin/kotlinx-datetime\n* https://github.com/royalbee/jewish_date\n* https://github.com/apache/arrow/\n* https://lottopark.com\n\nIf you would like your project (or product) on this list, just let me know.\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "compile_fail.sh",
          "type": "blob",
          "size": 0.349609375,
          "content": "#!/bin/bash\nexport TEST_BIN_NAME=$1\n#echo \"Building ${TEST_BIN_NAME}\"\nshift 1\nexport BUILD_COMMAND=$@\n#echo \"Build command: ${BUILD_COMMAND}\"\neval ${BUILD_COMMAND} >/dev/null 2>/dev/null\n\nif [ $? -eq 0 ]; then\n\techo -ne \"#!/bin/bash\\nexit 1;\" > ${TEST_BIN_NAME}\nelse\n\techo -ne \"#!/bin/bash\\nexit 0;\" > ${TEST_BIN_NAME}\nfi\nchmod u+x ${TEST_BIN_NAME}\nexit 0;\n\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "test_fail.sh",
          "type": "blob",
          "size": 0.0986328125,
          "content": "#!/bin/sh\n\n# show what is to be run\necho $1\n# run the command\neval $1 || exit 1 # if fails, return 1\n"
        }
      ]
    }
  ]
}