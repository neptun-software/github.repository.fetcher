{
  "metadata": {
    "timestamp": 1736565216008,
    "page": 13,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "RikkaApps/Riru",
      "stars": 4919,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0634765625,
          "content": "* text=auto eol=lf\n\n*.bat text eol=crlf\n*.jar binary\n*.aar binary"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.267578125,
          "content": "*.iml\n.gradle\n/local.properties\n.idea\n/.idea/caches/build_file_checksums.ser\n/.idea/libraries\n/.idea/modules.xml\n/.idea/workspace.xml\n.DS_Store\n/build\n/captures\n/out\n.externalNativeBuild\n.cxx\nelf-cleaner.sh\nsettings.gradle\n/template/aar/riru.aar/prefab/modules/riru/include\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.3154296875,
          "content": "# Deprecated\n\nAll Riru users and Riru modules should migrate to Zygisk.\n\n# Riru\n\nRiru only does one thing, inject into zygote in order to allow modules to run their codes in apps or the system server.\n\n> The name, Riru, comes from a character. (https://www.pixiv.net/member_illust.php?mode=medium&illust_id=74128856)\n\n## Requirements\n\nAndroid 6.0+ devices rooted with [Magisk](https://github.com/topjohnwu/Magisk)\n\n## Guide\n\n### Install\n\n* From Magisk Manager\n\n  1. Search \"Riru\" in Magisk Manager\n  2. Install the module named \"Riru\"\n\n  > The Magisk version requirement is enforced by Magisk Manager. You can check [Magisk's module installer script](https://github.com/topjohnwu/Magisk/blob/master/scripts/module_installer.sh).\n\n* Manually\n\n  1. Download the zip from the [GitHub release](https://github.com/RikkaApps/Riru/releases)\n  2. Install in Magisk Manager (Modules - Install from storage - Select downloaded zip)\n\n### Common problems\n\n* Third-party ROMs have incorrect SELinux rule\n\n  <https://github.com/RikkaApps/Riru/wiki/Explanation-about-incorrect-SELinux-rules-from-third-party-ROMs-cause-Riru-not-working>\n\n* Have low quality module that changes `ro.dalvik.vm.native.bridge` installed\n\n  **If you are using other modules that change `ro.dalvik.vm.native.bridge`, Riru will not work.** (Riru will automatically set it back)\n\n  A typical example is, some \"optimize\" modules change this property. Since changing this property is meaningless for \"optimization\", their quality is very questionable. In fact, changing properties for optimization is a joke.\n\n## How Riru works?\n\n* How to inject into the zygote process?\n\n  Before v22.0, we use the method of replacing a system library (libmemtrack) that will be loaded by zygote. However, it seems to cause some weird problems. Maybe because libmemtrack is used by something else.\n\n  Then we found a super easy way, the \"native bridge\" (`ro.dalvik.vm.native.bridge`). The specific \"so\" file will be automatically \"dlopen-ed\" and \"dlclose-ed\" by the system. This way is from [here](https://github.com/canyie/NbInjection).\n\n* How to know if we are in an app process or a system server process?\n\n  Some JNI functions (`com.android.internal.os.Zygote#nativeForkAndSpecialize` & `com.android.internal.os.Zygote#nativeForkSystemServer`) is to fork the app process or the system server process.\n  So we need to replace these functions with ours. This part is simple, hook `jniRegisterNativeMethods` since all Java native methods in `libandroid_runtime.so` is registered through this function.\n  Then we can call the original `jniRegisterNativeMethods` again to replace them.\n  \n## How does Hide works?\n\nFrom v22.0, Riru provides a hidden mechanism (idea from [Haruue Icymoon](https://github.com/haruue)), make the memory of Riru and module to anonymous memory to hide from \"`/proc/maps` string scanning\".\n\n## Build\n\nGradle tasks:\n\n* `:riru:assembleDebug/Release`\n   \n   Generate Magisk module zip to `out`.\n\n* `:riru:pushDebug/Release`\n   \n   Push the zip with adb to `/data/local/tmp`.\n\n* `:riru:flashDebug/Release`\n   \n   Flash the zip with `adb shell su -c magisk --install-module`.\n\n* `:riru:flashAndRebootDebug/Release`\n\n   Flash the zip and reboot the device.\n\n## Module template\n\nhttps://github.com/RikkaApps/Riru-ModuleTemplate\n\n## Module API changes\n\nhttps://github.com/RikkaApps/Riru-ModuleTemplate/blob/master/README.md#api-changes\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 3.5126953125,
          "content": "import org.apache.tools.ant.filters.FixCrLfFilter\nimport org.eclipse.jgit.api.Git\nimport org.eclipse.jgit.internal.storage.file.FileRepository\n\nimport java.util.stream.StreamSupport\n\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath 'org.eclipse.jgit:org.eclipse.jgit:5.10.0.202012080955-r'\n    }\n}\n\nplugins {\n    id 'idea'\n}\n\nidea.module {\n    excludeDirs += file('out')\n    resourceDirs += file('template')\n    excludeDirs += file('template/aar')\n    resourceDirs += file('scripts')\n    resourceDirs += file('docs')\n}\n\next {\n    minSdkVersion = 23\n    targetSdkVersion = 33\n    buildToolsVersion = \"33.0.0\"\n\n    riruApiVersion = 26\n    riruMinApiVersion = 24\n\n    repo = new FileRepository(rootProject.file(\".git\"))\n    gitObjectId = repo.refDatabase.exactRef(\"refs/remotes/origin/master\").objectId\n    gitCommitId = gitObjectId.abbreviate(10).name()\n    gitCommitCount = StreamSupport.stream(new Git(repo).log().add(gitObjectId).call().spliterator(), false).count()\n\n    versionNameMinor = 1\n    versionNamePatch = 7\n\n    outDir = file(\"$rootDir/out\")\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir, outDir\n}\n\ndef aarVersion = \"${riruApiVersion}.0.0\"\ndef aarDir = \"out/aar/dev/rikka/ndk/riru/${aarVersion}\"\n\ntask generateLibraryAar(type: Zip) {\n    copy {\n        from 'riru/src/main/cpp/include_riru/riru.h'\n        into 'template/aar/riru.aar/prefab/modules/riru/include'\n    }\n\n    from 'template/aar/riru.aar'\n    archiveName \"riru-${aarVersion}.aar\"\n    destinationDir file(aarDir)\n}\n\ntask signLibraryAar(type: Exec) {\n    commandLine \"gpg\",\n            \"--armor\",\n            \"--detach-sign\",\n            \"--passphrase=${findProperty(\"signing.password\")}\",\n            \"--batch\",\n            \"--yes\",\n            \"riru-${aarVersion}.aar\"\n    workingDir aarDir\n}\n\ntask generateLibraryPom(type: Copy) {\n    from 'template/aar/riru.pom'\n    into file(aarDir)\n    filter { line -> line.replaceAll('%%%VERSION%%%', \"$aarVersion\") }\n    filter(FixCrLfFilter.class,\n            eol: FixCrLfFilter.CrLf.newInstance(\"lf\"))\n    rename { \"riru-${aarVersion}.pom\" }\n}\n\ntask signLibraryPom(type: Exec) {\n    commandLine \"gpg\",\n            \"--armor\",\n            \"--detach-sign\",\n            \"--passphrase=${findProperty(\"signing.password\")}\",\n            \"--batch\",\n            \"--yes\",\n            \"riru-${aarVersion}.pom\"\n    workingDir aarDir\n}\n\ntask generateLibrarySourceJar(type: Zip) {\n    from 'template/aar/riru-sources.jar'\n    archiveName \"riru-${aarVersion}-sources.jar\"\n    destinationDir file(aarDir)\n}\n\ntask signLibrarySourceJar(type: Exec) {\n    commandLine \"gpg\",\n            \"--armor\",\n            \"--detach-sign\",\n            \"--passphrase=${findProperty(\"signing.password\")}\",\n            \"--batch\",\n            \"--yes\",\n            \"riru-${aarVersion}-sources.jar\"\n    workingDir aarDir\n}\n\ntask generateLibraryJavaDocJar(type: Zip) {\n    from 'template/aar/riru-javadoc.jar'\n    archiveName \"riru-${aarVersion}-javadoc.jar\"\n    destinationDir file(aarDir)\n}\n\ntask signLibraryJavaDocJar(type: Exec) {\n    commandLine \"gpg\",\n            \"--armor\",\n            \"--detach-sign\",\n            \"--passphrase=${findProperty(\"signing.password\")}\",\n            \"--batch\",\n            \"--yes\",\n            \"riru-${aarVersion}-javadoc.jar\"\n    workingDir aarDir\n}\n\ntask generateLibrary(type: GradleBuild) {\n    tasks = [':generateLibraryAar', ':generateLibraryPom', ':generateLibrarySourceJar', ':generateLibraryJavaDocJar',\n             ':signLibraryAar', ':signLibraryPom', ':signLibrarySourceJar', ':signLibraryJavaDocJar']\n}\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.9599609375,
          "content": "# Project-wide Gradle settings.\n# IDE (e.g. Android Studio) users:\n# Gradle settings configured through the IDE *will override*\n# any settings specified in this file.\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\n#org.gradle.jvmargs=-Xmx1536m\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true\n# AndroidX package structure to make it clearer which packages are bundled with the\n# Android operating system, and which are packaged with your app's APK\n# https://developer.android.com/topic/libraries/support-library/androidx-rn\nandroid.useAndroidX=true\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 7.880859375,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/master/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\nAPP_HOME=$( cd \"${APP_HOME:-./}\" && pwd -P ) || exit\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=${0##*/}\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n# Collect all arguments for the java command;\n#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of\n#     shell script including quotes and variable substitutions, so put them in\n#     double quotes to make sure that they get re-expanded; and\n#   * put everything else in single quotes, so that it's not re-expanded.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.611328125,
          "content": "@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n\n@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto execute\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto execute\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "riru",
          "type": "tree",
          "content": null
        },
        {
          "name": "rirud",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.634765625,
          "content": "pluginManagement {\n    repositories {\n        gradlePluginPortal()\n        google()\n        mavenCentral()\n    }\n    plugins {\n        id 'com.android.application' version '7.2.2'\n        id 'com.android.library' version '7.2.2'\n    }\n}\n\ndependencyResolutionManagement {\n    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\n    repositories {\n        google()\n        mavenCentral()\n        maven { url \"https://s01.oss.sonatype.org/content/repositories/releases/\" }\n        mavenLocal()\n    }\n}\n\ninclude ':riru', ':stub', ':rirud'\n\nimport org.apache.tools.ant.DirectoryScanner\n\nDirectoryScanner.removeDefaultExclude('**/.gitattributes')\n"
        },
        {
          "name": "stub",
          "type": "tree",
          "content": null
        },
        {
          "name": "template",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}