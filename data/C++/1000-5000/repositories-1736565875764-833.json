{
  "metadata": {
    "timestamp": 1736565875764,
    "page": 833,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "herumi/xbyak",
      "stars": 2073,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0205078125,
          "content": "/build* # cmake\n*CVS\n"
        },
        {
          "name": "Android.bp",
          "type": "blob",
          "size": 0.166015625,
          "content": "//#################################################\ncc_library_headers {\n    name: \"xbyak_headers\",\n    vendor: true,\n    export_include_dirs: [\n        \"xbyak\"\n    ],\n}\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 1.279296875,
          "content": "cmake_minimum_required(VERSION 3.5)\n\nproject(xbyak LANGUAGES CXX VERSION 7.22)\n\nfile(GLOB headers xbyak/*.h)\n\ninclude(GNUInstallDirs)\nadd_library(${PROJECT_NAME} INTERFACE)\nadd_library(${PROJECT_NAME}::${PROJECT_NAME} ALIAS ${PROJECT_NAME})\n\ntarget_include_directories(\n\t${PROJECT_NAME} INTERFACE\n\t\"$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>\"\n\t\"$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\"\n)\n\ninstall(\n\tTARGETS ${PROJECT_NAME}\n\tEXPORT ${PROJECT_NAME}-targets\n\tINCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}\n)\n\ninclude(CMakePackageConfigHelpers)\nconfigure_package_config_file(\n\tcmake/config.cmake.in\n\t\"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake\"\n\tINSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\n)\nwrite_basic_package_version_file(\n\t\"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake\"\n\tCOMPATIBILITY SameMajorVersion\n)\n\ninstall(\n\tFILES\n\t\t\"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake\"\n\t\t\"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake\"\n\tDESTINATION\n\t\t${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\n)\n\ninstall(\n\tEXPORT ${PROJECT_NAME}-targets\n\tNAMESPACE ${PROJECT_NAME}::\n\tDESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\n)\n\ninstall(\n\tFILES ${headers}\n\tDESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/xbyak\n)\n"
        },
        {
          "name": "COPYRIGHT",
          "type": "blob",
          "size": 1.4658203125,
          "content": "\r\nCopyright (c) 2007 MITSUNARI Shigeo\r\nAll rights reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without\r\nmodification, are permitted provided that the following conditions are met:\r\n\r\nRedistributions of source code must retain the above copyright notice, this\r\nlist of conditions and the following disclaimer.\r\nRedistributions in binary form must reproduce the above copyright notice,\r\nthis list of conditions and the following disclaimer in the documentation\r\nand/or other materials provided with the distribution.\r\nNeither the name of the copyright owner nor the names of its contributors may\r\nbe used to endorse or promote products derived from this software without\r\nspecific prior written permission.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\nARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\nTHE POSSIBILITY OF SUCH DAMAGE.\r\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.30859375,
          "content": "PREFIX?=/usr/local\nINSTALL_DIR=$(PREFIX)/include/xbyak\n\nall:\n\t$(MAKE) -C sample\n\nclean:\n\t$(MAKE) -C sample clean\n\ninstall:\n\tmkdir -p $(INSTALL_DIR)\n\tcp -pR xbyak/*.h $(INSTALL_DIR)\n\nuninstall:\n\trm -i $(INSTALL_DIR)/*.h\n\trmdir $(INSTALL_DIR)\n\nupdate:\n\t$(MAKE) -C gen\n\ntest:\n\t$(MAKE) -C test test\n\n.PHONY: test update\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "gen",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 1.171875,
          "content": "# SPDX-FileCopyrightText: 2021 Andrea Pappacoda\n#\n# SPDX-License-Identifier: BSD-3-Clause\n\nproject(\n\t'xbyak',\n\t'cpp',\n\tversion: '7.22',\n\tlicense: 'BSD-3-Clause',\n\tdefault_options: 'b_ndebug=if-release'\n)\n\ninstall_subdir('xbyak', install_dir: get_option('includedir'))\n\nxbyak_dep = declare_dependency(include_directories: include_directories('.'))\n\nif meson.version().version_compare('>=0.54.0')\n\tmeson.override_dependency(meson.project_name(), xbyak_dep)\nendif\n\nimport('pkgconfig').generate(\n\tname: meson.project_name(),\n\tdescription: 'JIT assembler for x86(IA32), x64(AMD64, x86-64)',\n\tversion: meson.project_version(),\n\turl: 'https://github.com/herumi/xbyak'\n)\n\nif meson.version().version_compare('>=0.50.0')\n\tcmake = import('cmake')\n\n\tcmake.write_basic_package_version_file(\n\t\tname: meson.project_name(),\n\t\tversion: meson.project_version()\n\t)\n\n\tcmake_conf = configuration_data()\n\tcmake_conf.set('TARGET_NAME', meson.project_name() + '::' + meson.project_name())\n\tcmake_conf.set('ABSOLUTE_INCLUDE_DIR', get_option('prefix')/get_option('includedir'))\n\n\tcmake.configure_package_config_file(\n\t\tname: meson.project_name(),\n\t\tinput: 'cmake'/'meson-config.cmake.in',\n\t\tconfiguration: cmake_conf\n\t)\nendif\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 3.068359375,
          "content": "\n# Xbyak 7.22 [![Badge Build]][Build Status]\n\n*A JIT assembler for x86/x64 architectures supporting advanced instruction sets up to AVX10.2*\n\n## Menu\n\n- [Install]\n- [Usage]\n- [Changelog]\n\n## Abstract\n\nXbyak is a C++ header-only library that enables dynamic assembly of x86/x64 instructions using mnemonics.\n\nThe pronunciation of Xbyak is `/kʌɪbjæk/` (kai-byak).\n\nThe name is derived from the Japanese word [開闢](https://translate.google.com/?hl=ja&sl=ja&tl=en&text=%E9%96%8B%E9%97%A2&op=translate) (kaibyaku), which means \"the beginning of the world\" or \"creation\".\n\n## Features\n- Header-only library\n- Intel/MASM-like syntax\n- Full support for AVX-512, APX, and AVX10.2\n\n**Note**:\nUse `and_()`, `or_()`, ... instead of `and()`, `or()`.\nIf you want to use them, then specify `-fno-operator-names` option to gcc/clang.\n\n### Derived Projects\n- [Xbyak_aarch64](https://github.com/fujitsu/xbyak_aarch64/) : for AArch64\n- [Xbyak_riscv](https://github.com/herumi/xbyak_riscv) : for RISC-V\n\n### News\n\n- Support AVX10.2\n- Support xresldtrk/xsusldtrk\n- Support RAO-INT for APX\n- Support AVX10 detection, AESKLE, WIDE_KL, KEYLOCKER, KEYLOCKER_WIDE\n- Support APX except for a few instructions\n- Add amx_fp16/avx_vnni_int8/avx_ne_convert/avx-ifma\n- Add movdiri, movdir64b, clwb, cldemote\n- WAITPKG instructions (tpause, umonitor, umwait) are supported.\n- MmapAllocator supports memfd with user-defined strings. see sample/memfd.cpp\n- Strictly check address offset disp32 in a signed 32-bit integer. e.g., `ptr[(void*)0xffffffff]` causes an error.\n  - Define `XBYAK_OLD_DISP_CHECK` if you need an old check, but the option will be remoevd.\n- Add `jmp(mem, T_FAR)`, `call(mem, T_FAR)` `retf()` for far absolute indirect jump.\n- VNNI instructions such as vpdpbusd supports vex encoding.\n- (Break backward compatibility) `push(byte, imm)` (resp. `push(word, imm)`) forces to cast `imm` to 8(resp. 16) bit.\n- (Windows) `#include <winsock2.h>` has been removed from xbyak.h, so add it explicitly if you need it.\n- Support exception-less mode see. [Exception-less mode](#exception-less-mode)\n- `XBYAK_USE_MMAP_ALLOCATOR` will be defined on Linux/macOS unless `XBYAK_DONT_USE_MMAP_ALLOCATOR` is defined.\n\n### Supported OS\n\n- Windows (Xp, Vista, 7, 10, 11) (32 / 64 bit)\n- Linux (32 / 64 bit)\n- macOS (Intel CPU)\n\n### Supported Compilers\n\nAlmost C++03 or later compilers for x86/x64 such as Visual Studio, g++, clang++, Intel C++ compiler and g++ on mingw/cygwin.\n\n## License\n\n[BSD-3-Clause License](http://opensource.org/licenses/BSD-3-Clause)\n\n## Author\n\n#### 光成滋生 Mitsunari Shigeo\n [GitHub](https://github.com/herumi) | [Website (Japanese)](http://herumi.in.coocan.jp/) | [herumi@nifty.com](mailto:herumi@nifty.com)\n\n## Sponsors welcome\n[GitHub Sponsor](https://github.com/sponsors/herumi)\n\n<!----------------------------------------------------------------------------->\n\n[Badge Build]: https://github.com/herumi/xbyak/actions/workflows/main.yml/badge.svg\n[Build Status]: https://github.com/herumi/xbyak/actions/workflows/main.yml\n\n[License]: COPYRIGHT\n\n[Changelog]: doc/changelog.md\n[Install]: doc/install.md\n[Usage]: doc/usage.md\n\n"
        },
        {
          "name": "readme.txt",
          "type": "blob",
          "size": 32.029296875,
          "content": "\r\n    C++用x86(IA-32), x64(AMD64, x86-64) JITアセンブラ Xbyak 7.22\r\n\r\n-----------------------------------------------------------------------------\r\n◎概要\r\n\r\nこれはx86, x64(AMD64, x86-64)のマシン語命令を生成するC++のクラスライブラリです。\r\nプログラム実行時に動的にアセンブルすることが可能です。\r\n\r\n-----------------------------------------------------------------------------\r\n◎特徴\r\n\r\n・ヘッダファイルオンリー\r\n    xbyak.hをインクルードするだけですぐ利用することができます。\r\n    C++の枠組み内で閉じているため、外部アセンブラは不要です。\r\n    32bit/64bit両対応です。\r\n    対応ニーモニック:特権命令除くx86, MMX/MMX2/SSE/SSE2/SSE3/SSSE3/SSE4/FPU(一部)/AVX/AVX2/FMA/AVX-512/APX/AVX10.2\r\n\r\n・Windows Xp(32bit, 64bit), Windows 7/Linux(32bit, 64bit)/Intel Mac対応\r\n    Windows Xp, Windows 7上ではVC2008, VC2010, VC2012\r\n    Linux (kernel 3.8)上ではgcc 4.7.3, clang 3.3\r\n    Intel Mac\r\n    などで動作確認をしています。\r\n\r\n※ and, orなどの代わりにand_, or_を使用してください。\r\nand, orなどを使いたい場合は-fno-operator-namesをgcc/clangに指定してください。\r\n\r\n-----------------------------------------------------------------------------\r\n◎準備\r\nxbyak.h\r\nxbyak_bin2hex.h\r\nこれらを同一のパスに入れてインクルードパスに追加してください。\r\n\r\nLinuxではmake installで/usr/local/include/xbyakにコピーされます。\r\n-----------------------------------------------------------------------------\r\n◎下位互換性の破れ\r\n* push byte, immまたはpush word, immが下位8bit, 16bitにキャストした値を使うように変更。\r\n* (Windows) `<winsock2.h>`をincludeしなくなったので必要なら明示的にincludeしてください。\r\n* XBYAK_USE_MMAP_ALLOCATORがデフォルトで有効になりました。従来の方式にする場合はXBYAK_DONT_USE_MMAP_ALLOCATORを定義してください。\r\n* Xbyak::Errorの型をenumからclassに変更\r\n** 従来のenumの値をとるにはintにキャストしてください。\r\n* (古い)Reg32eクラスを(新しい)Reg32eとRegExpに分ける。\r\n** (新しい)Reg32eはReg32かReg64\r\n** (新しい)RegExpは'Reg32e + (Reg32e|Xmm|Ymm) * scale + disp'の型\r\n\r\n-----------------------------------------------------------------------------\r\n◎新機能\r\n\r\nAPX/AVX10.2対応\r\n\r\n例外なしモード追加\r\nXBYAK_NO_EXCEPTIONを定義してコンパイルするとgcc/clangで-fno-exceptionsオプションでコンパイルできます。\r\nエラーは例外の代わりに`Xbyak::GetError()`で通達されます。\r\nこの値が0でなければ何か問題が発生しています。\r\nこの値は自動的に変更されないので`Xbyak::ClearError()`でリセットしてください。\r\n`CodeGenerator::reset()`は`ClearError()`を呼びます。\r\n\r\nMmapAllocator追加\r\nこれはUnix系OSでのみの仕様です。XBYAK_USE_MMAP_ALLOCATORを使うと利用できます。\r\nデフォルトのAllocatorはメモリ確保時にposix_memalignを使います。\r\nこの領域に対するmprotectはmap countを減らします。\r\nmap countの最大値は/proc/sys/vm/max_map_countに書かれています。\r\nデフォルトでは3万個ほどのXbyak::CodeGeneratorインスタンスを生成するとエラーになります。\r\ntest/mprotect_test.cppで確認できます。\r\nこれを避けるためにはmmapを使うMmapAllocatorを使ってください。\r\n\r\n\r\nAutoGrowモード追加\r\nこれはメモリ伸長を動的に行うモードです。\r\n今まではXbyak::CodeGenerator()に渡したメモリサイズを超えると例外が発生して\r\nいましたが、このモードでは内部でメモリを再確保して伸長します。\r\nただし、getCode()を呼び出す前にジャンプ命令のアドレス解決をするためにready()\r\n関数を呼ぶ必要があります。\r\n\r\n次のように使います。\r\n\r\n struct Code : Xbyak::CodeGenerator {\r\n   Code()\r\n     : Xbyak::CodeGenerator(<default memory size>, Xbyak::AutoGrow)\r\n   {\r\n      ...\r\n   }\r\n };\r\n Code c;\r\n c.ready(); // この呼び出しを忘れてはいけない\r\n\r\n注意1. ready()を呼んで確定するまではgetCurr()で得たポインタは無効化されている\r\n可能性があります。getSize()でoffsetを保持しておきready()のあとにgetCode()を\r\n呼び出してからgetCode() + offsetで新しいポインタを取得してください。\r\n\r\n注意2. AutoGrowモードでは64bitモードの相対アドレッシング[rip]は非サポートです。\r\n\r\n-----------------------------------------------------------------------------\r\n◎文法\r\n\r\nXbyak::CodeGeneratorクラスを継承し、そのクラスメソッド内でx86, x64アセンブラを\r\n記述します。そのメソッドを呼び出した後、getCode()メソッドを呼び出し、その戻\r\nり値を自分が使いたい関数ポインタに変換して利用します。アセンブルエラーは例外\r\nにより通知されます(cf. main.cpp)。\r\n\r\n・基本的にnasmの命令で括弧をつければよいです。\r\n\r\nmov eax, ebx  --> mov(eax, ebx);\r\ninc ecx           inc(ecx);\r\nret           --> ret();\r\n\r\n・アドレッシング\r\n\r\n(ptr|dword|word|byte) [base + index * (1|2|4|8) + displacement]\r\n                      [rip + 32bit disp] ; x64 only\r\nという形で指定します。サイズを指定する必要がない限りptrを使えばよいです。\r\n\r\nセレクター(セグメントレジスタ)をサポートしました。\r\n(注意)セグメントレジスタはOperandを継承していません。\r\n\r\nmov eax, [fs:eax]  --> putSeg(fs); mov(eax, ptr [eax]);\r\nmov ax, cs         --> mov(ax, cs);\r\n\r\nmov eax, [ebx+ecx] --> mov (eax, ptr[ebx+ecx]);\r\ntest byte [esp], 4 --> test (byte [esp], 4);\r\n\r\n(注意) dword, word, byteはメンバ変数です。従ってたとえばunsigned intの\r\nつもりでdwordをtypedefしないでください。\r\n\r\n・AVX\r\n\r\nFMAについては簡略表記を導入するか検討中です(アイデア募集中)。\r\n\r\nvaddps(xmm1, xmm2, xmm3); // xmm1 <- xmm2 + xmm3\r\nvaddps(xmm2, xmm3, ptr [rax]); // メモリアクセスはptrで\r\n\r\nvfmadd231pd(xmm1, xmm2, xmm3); // xmm1 <- (xmm2 * xmm3) + xmm1\r\n\r\n*注意*\r\nデスティネーションの省略形はサポートされなくなりました。\r\n\r\nvaddps(xmm2, xmm3); // xmm2 <- xmm2 + xmm3\r\n\r\nXBYAK_ENABLE_OMITTED_OPERANDを定義すると使えますが、将来はそれも非サポートになるでしょう。\r\n\r\n・AVX-512\r\n\r\nvaddpd zmm2, zmm5, zmm30                --> vaddpd(zmm2, zmm5, zmm30);\r\nvaddpd xmm30, xmm20, [rax]              --> vaddpd(xmm30, xmm20, ptr [rax]);\r\nvaddps xmm30, xmm20, [rax]              --> vaddps(xmm30, xmm20, ptr [rax]);\r\nvaddpd zmm2{k5}, zmm4, zmm2             --> vaddpd(zmm2 | k5, zmm4, zmm2);\r\nvaddpd zmm2{k5}{z}, zmm4, zmm2          --> vaddpd(zmm2 | k5 | T_z, zmm4, zmm2);\r\nvaddpd zmm2{k5}{z}, zmm4, zmm2,{rd-sae} --> vaddpd(zmm2 | k5 | T_z, zmm4, zmm2 | T_rd_sae);\r\n                                            vaddpd(zmm2 | k5 | T_z | T_rd_sae, zmm4, zmm2); // the position of `|` is arbitrary.\r\nvcmppd k4{k3}, zmm1, zmm2, {sae}, 5     --> vcmppd(k4 | k3, zmm1, zmm2 | T_sae, 5);\r\n\r\nvaddpd xmm1, xmm2, [rax+256]{1to2}      --> vaddpd(xmm1, xmm2, ptr_b [rax+256]);\r\nvaddpd ymm1, ymm2, [rax+256]{1to4}      --> vaddpd(ymm1, ymm2, ptr_b [rax+256]);\r\nvaddpd zmm1, zmm2, [rax+256]{1to8}      --> vaddpd(zmm1, zmm2, ptr_b [rax+256]);\r\nvaddps zmm1, zmm2, [rax+rcx*8+8]{1to16} --> vaddps(zmm1, zmm2, ptr_b [rax+rcx*8+8]);\r\nvmovsd [rax]{k1}, xmm4                  --> vmovsd(ptr [rax] | k1, xmm4);\r\n\r\nvcvtpd2dq xmm16, oword [eax+33]         --> vcvtpd2dq(xmm16, xword [eax+33]); // use xword for m128 instead of oword\r\n                                            vcvtpd2dq(xmm16, ptr [eax+33]); // default xword\r\nvcvtpd2dq xmm21, [eax+32]{1to2}         --> vcvtpd2dq(xmm21, ptr_b [eax+32]);\r\nvcvtpd2dq xmm0, yword [eax+33]          --> vcvtpd2dq(xmm0, yword [eax+33]); // use yword for m256\r\nvcvtpd2dq xmm19, [eax+32]{1to4}         --> vcvtpd2dq(xmm19, yword_b [eax+32]); // use yword_b to broadcast\r\n\r\nvfpclassps k5{k3}, zword [rax+64], 5    --> vfpclassps(k5|k3, zword [rax+64], 5); // specify m512\r\nvfpclasspd k5{k3}, [rax+64]{1to2}, 5    --> vfpclasspd(k5|k3, xword_b [rax+64], 5); // broadcast 64-bit to 128-bit\r\nvfpclassps k5{k3}, [rax+64]{1to4}, 5    --> vfpclassps(k5|k3, xword_b [rax+64], 5); // broadcast 64-bit to 256-bit\r\n\r\nvpdpbusd(xm0, xm1, xm2); // default encoding is EVEX\r\nvpdpbusd(xm0, xm1, xm2, EvexEncoding); // same as the above\r\nvpdpbusd(xm0, xm1, xm2, VexEncoding); // VEX encoding\r\nsetDefaultEncoding(VexEncoding); // default encoding is VEX\r\nvpdpbusd(xm0, xm1, xm2); // VEX encoding\r\n注意\r\n* k1, ..., k7 は新しいopmaskレジスタです。\r\n* z, sae, rn-sae, rd-sae, ru-sae, rz-saeの代わりにT_z, T_sae, T_rn_sae, T_rd_sae, T_ru_sae, T_rz_saeを使ってください。\r\n* `k4 | k3`と`k3 | k4`は意味が異なります。\r\n* {1toX}の代わりにptr_bを使ってください。Xは自動的に決まります。\r\n* 一部の命令はメモリサイズを指定するためにxword/yword/zword(_b)を使ってください。\r\n* setDefaultEncoding()でencoding省略時のEVEX/VEXを設定できます。\r\n\r\n・ラベル\r\n\r\nL(文字列);\r\nで定義します。ジャンプするときはその文字列を指定します。後方参照も可能ですが、\r\n相対アドレスが8ビットに収まらない場合はT_NEARをつけないと実行時に例外が発生\r\nします。\r\nmov(eax, \"L2\");の様にラベルが表すアドレスをmovの即値として使えます。\r\n\r\n・hasUndefinedLabel()を呼び出して真ならジャンプ先が存在しないことを示します。\r\nコードを見直してください。\r\n\r\nL(\"L1\");\r\n    jmp (\"L1\");\r\n\r\n    jmp (\"L2\");\r\n    ...\r\n    少しの命令の場合。\r\n    ...\r\nL(\"L2\");\r\n\r\n    jmp (\"L3\", T_NEAR);\r\n    ...\r\n    沢山の命令がある場合\r\n    ...\r\nL(\"L3\");\r\n\r\n<応用編>\r\n\r\n1. MASMライクな@@, @f, @bをサポート\r\n\r\n  L(\"@@\"); // <A>\r\n  jmp(\"@b\"); // jmp to <A>\r\n  jmp(\"@f\"); // jmp to <B>\r\n  L(\"@@\"); // <B>\r\n  jmp(\"@b\"); // jmp to <B>\r\n  mov(eax, \"@b\");\r\n  jmp(eax); // jmp to <B>\r\n\r\n2. ラベルの局所化\r\n\r\nピリオドで始まるラベルをinLocalLabel(), outLocalLabel()で挟むことで局所化できます。\r\ninLocalLabel(), outLocalLabel()は入れ子にすることができます。\r\n\r\nvoid func1()\r\n{\r\n    inLocalLabel();\r\n   L(\".lp\"); // <A> ; ローカルラベル\r\n    ...\r\n    jmp(\".lp\"); // jmpt to <A>\r\n   L(\"aaa\"); // グローバルラベル\r\n    outLocalLabel();\r\n}\r\n\r\nvoid func2()\r\n{\r\n    inLocalLabel();\r\n    L(\".lp\"); // <B> ; ローカルラベル\r\n    func1();\r\n    jmp(\".lp\"); // jmp to <B>\r\n    outLocalLabel();\r\n}\r\n\r\n上記サンプルではinLocalLabel(), outLocalLabel()が無いと、\r\n\".lp\"ラベルの二重定義エラーになります。\r\n\r\n3. 新しいLabelクラスによるジャンプ命令\r\n\r\nジャンプ先を文字列による指定だけでなくラベルクラスを使えるようになりました。\r\n\r\n      Label label1, label2;\r\n    L(label1);\r\n      ...\r\n      jmp(label1);\r\n      ...\r\n      jmp(label2);\r\n      ...\r\n    L(label2);\r\n\r\n更にラベルの割り当てを行うassignL(dstLabel, srcLabel)という命令も追加されました。\r\n\r\n      Label label2;\r\n    Label label1 = L(); // Label label1; L(label1);と同じ意味\r\n      ...\r\n      jmp(label2);\r\n      ...\r\n      assignL(label2, label1);\r\n\r\n上記jmp命令はlabel1にジャンプします。\r\n\r\n制限\r\n* srcLabelはL()により飛び先が確定していないといけません。\r\n* dstLabelはL()により飛び先が確定していてはいけません。\r\n\r\nラベルは`getAddress()`によりそのアドレスを取得できます。\r\n未定義のときは0が返ります。\r\n```\r\n// not AutoGrow mode\r\nLabel label;\r\nassert(label.getAddress(), 0);\r\nL(label);\r\nassert(label.getAddress(), getCurr());\r\n```\r\n\r\n4. farジャンプ\r\n\r\n`jmp(mem, T_FAR)`, `call(mem, T_FAR)`, `retf()`をサポートします。\r\nサイズを明示するために`ptr`の代わりに`word|dword|qword`を利用してください。\r\n\r\n32bit\r\n```\r\njmp(word[eax], T_FAR);  // jmp m16:16(FF /5)\r\njmp(dword[eax], T_FAR); // jmp m16:32(FF /5)\r\n```\r\n\r\n64bit\r\n```\r\njmp(word[rax], T_FAR);  // jmp m16:16(FF /5)\r\njmp(dword[rax], T_FAR); // jmp m16:32(FF /5)\r\njmp(qword[rax], T_FAR); // jmp m16:64(REX.W FF /5)\r\n```\r\n\r\n・Xbyak::CodeGenerator()コンストラクタインタフェース\r\n\r\n@param maxSize [in] コード生成最大サイズ(デフォルト4096byte)\r\n@param userPtr [in] ユーザ指定メモリ\r\n\r\nCodeGenerator(size_t maxSize = DEFAULT_MAX_CODE_SIZE, void *userPtr = 0);\r\n\r\nデフォルトコードサイズは4096(=DEFAULT_MAX_CODE_SIZE)バイトです。\r\nそれより大きなコードを生成する場合はCodeGenerator()のコンストラクタに指定してください。\r\n\r\nclass Quantize : public Xbyak::CodeGenerator {\r\npublic:\r\n    Quantize()\r\n        : CodeGenerator(8192)\r\n    {\r\n    }\r\n    ...\r\n};\r\n\r\nまたユーザ指定メモリをコード生成最大サイズと共に指定すると、CodeGeneratorは\r\n指定されたメモリ上にバイト列を生成します。\r\n\r\n補助関数として指定されたアドレスの実行属性を変更するCodeArray::protect()と\r\n与えられたポインタからアライメントされたポインタを取得するCodeArray::getAlignedAddress()\r\nも用意しました。詳細はsample/test0.cppのuse memory allocated by userを参考に\r\nしてください。\r\n\r\n/**\r\n    change exec permission of memory\r\n    @param addr [in] buffer address\r\n    @param size [in] buffer size\r\n    @param canExec [in] true(enable to exec), false(disable to exec)\r\n    @return true(success), false(failure)\r\n*/\r\nbool CodeArray::protect(const void *addr, size_t size, bool canExec);\r\n\r\n/**\r\n    get aligned memory pointer\r\n*/\r\nuint8 *CodeArray::getAlignedAddress(uint8 *addr, size_t alignedSize = ALIGN_SIZE);\r\n\r\n・read/execモード\r\nデフォルトのCodeGeneratorはコンストラクト時にJIT用の領域をread/write/execモードに設定して利用します。\r\nコード生成時はread/writeでコード実行時にはread/execにしたい場合、次のようにしてください。\r\n\r\nstruct Code : Xbyak::CodeGenerator {\r\n    Code()\r\n        : Xbyak::CodeGenerator(4096, Xbyak::DontUseProtect) // JIT領域をread/writeのままコード生成\r\n    {\r\n        mov(eax, 123);\r\n        ret();\r\n    }\r\n};\r\n\r\nCode c;\r\nc.setProtectModeRE(); // read/execモードに変更\r\n// JIT領域を実行\r\n\r\nAutoGrowの場合はreadyの代わりにreadyRE()を読んでください。\r\n\r\nstruct Code : Xbyak::CodeGenerator {\r\n    Code()\r\n        : Xbyak::CodeGenerator(4096, Xbyak::AutoGrow) // JIT領域をread/writeのままコード生成\r\n    {\r\n        mov(eax, 123);\r\n        ret();\r\n    }\r\n};\r\n\r\nCode c;\r\nc.readyRE(); // read/exeモードに変更\r\n// JIT領域を実行\r\n\r\nsetProtectModeRW()を呼ぶと領域が元のread/execモードに戻ります。\r\n\r\n\r\nその他詳細は各種サンプルを参照してください。\r\n-----------------------------------------------------------------------------\r\n◎マクロ\r\n\r\n32bit環境上でコンパイルするとXBYAK32が、64bit環境上でコンパイルするとXBYAK64が\r\n定義されます。さらに64bit環境上ではWindows(VC)ならXBYAK64_WIN、cygwin, gcc上では\r\nXBYAK64_GCCが定義されます。\r\n\r\n-----------------------------------------------------------------------------\r\n◎使用例\r\n\r\ntest0.cpp ; 簡単な例(x86, x64)\r\nquantize.cpp ; 割り算のJITアセンブルによる量子化の高速化(x86)\r\ncalc.cpp ; 与えられた多項式をアセンブルして実行(x86, x64)\r\n           boost(http://www.boost.org/)が必要\r\nbf.cpp ; JIT Brainfuck(x86, x64)\r\n\r\n-----------------------------------------------------------------------------\r\n◎ライセンス\r\n\r\n修正された新しいBSDライセンスに従います。\r\nhttp://opensource.org/licenses/BSD-3-Clause\r\n\r\nsample/{echo,hello}.bfは http://www.kmonos.net/alang/etc/brainfuck.php から\r\nいただきました。\r\n\r\n-----------------------------------------------------------------------------\r\n◎履歴\r\n\r\n2024/11/11 ver 7.22 Reg::cvt{128,256,512}(). xed 2024.11.04でテスト\r\n2024/10/31 ver 7.21 SSE命令のXMMレジスタのチェックを厳密化\r\n2024/10/17 ver 7.20.1 AVX10.2 rev 2.0仕様書の変更に追従\r\n2024/10/15 ver 7.20 setDefaultEncoding/setDefaultEncodingAVX10の仕様確定\r\n2024/10/15 ver 7.11 AVX10.2完全サポート\r\n2024/10/13 ver 7.10 AVX10 integer and fp16 vnni, mediaの新命令対応. setDefaultEncodingの拡張.\r\n2024/10/10 ver 7.09.1 vpcompressbとvpcompresswの名前修正\r\n2024/10/08 ver 7.09 AVX10.2のYMMレジスタの埋め込み丸め対応\r\n2024/10/07 ver 7.08 rdfabaseなどサポート\r\n2024/08/29 ver 7.07.1 xchgの仕様をnasm 2.16.03の挙動に合わせる。\r\n2024/06/11 ver 7.07 xresldtrk/xsusldtrkサポート\r\n2024/03/07 ver 7.06 util::Cpuのキャッシュ判定周りがAMD CPU対応\r\n2024/02/11 ver 7.05.1 util::CpuのextractBit()とautoGrowモードでのalign()の修正\r\n2024/01/03 ver 7.05 APX対応RAO-INT\r\n2023/12/28 ver 7.04 2バイトオペコードのrex2対応\r\n2023/12/26 ver 7.03 dfvのデフォルト値を0に設定\r\n2023/12/20 ver 7.02 SHA*のAPX対応\r\n2023/12/19 ver 7.01 AESKLE, WIDE_KL, KEYLOCKER, KEYLOCKER_WIDE対応 APX10/APX判定対応\r\n2023/12/01 ver 7.00 APX対応\r\n2023/08/07 ver 6.73 sha512/sm3/sm4/avx-vnni-int16追加\r\n2023/08/02 ver 6.72 xabort, xbegin, xend追加\r\n2023/07/27 ver 6.71 Allocatorでhuge pageを考慮する。\r\n2023/07/05 ver 6.70 vpclmulqdqのailas追加\r\n2023/06/27 ver 6.69.2 `TypeT operator|`にconstexpr追加(thanks to Wunkolo)\r\n2023/03/23 ver 6.69.1 xsave判定追加(thanks to Wunkolo)\r\n2023/02/20 ver 6.69 util::CpuがAMD対応 UINTR命令対応\r\n2022/12/07 ver 6.68 prefetchit{0,1}サポート\r\n2022/11/30 ver 6.67 CMPccXADDサポート\r\n2022/11/25 ver 6.66 RAO-INTサポート\r\n2022/11/22 ver 6.65 x32動作確認\r\n2022/11/04 ver 6.64 vmov*命令をmaskつきアドレッシング対応修正\r\n2022/10/06 ver 6.63 AVX-IFMA用のvpmadd52{h,l}uq対応\r\n2022/10/05          amx_fp16/avx_vnni_int8/avx_ne_convertt対応とsetDefaultEncoding()追加\r\n2022/09/15 ver 6.62 serialize追加\r\n2022/08/02 ver 6.61.1 noexceptはVisual Studio 2015以降対応\r\n2022/07/29 ver 6.61 movzx eax, ahがエラーになるのを修正\r\n2022/06/16 ver 6.60.2 GFNI, VAES, VPCLMULQDQの判定修正\r\n2022/06/15 ver 6.60.1 Visual Studio /O0でXbyak::util::Cpuがリンクエラーになるのに対応\r\n2022/06/06 ver 6.60 バージョンのつけ方を数値が戻らないように変更\r\n2022/06/01 ver 6.06 Cpu::TypeクラスのリファクタリングとXBYAK_USE_MEMFDが定義されたときのMmapAllocatorの改善\r\n2022/05/20 ver 6.052 Cpu::operator==()を正しく定義\r\n2022/05/13 ver 6.051 XYBAK_NO_EXCEPTIONを定義したときのCpuクラスのコンパイルエラー修正\r\n2022/05/12 ver 6.05 movdiri, movdir64b, clwb, cldemoteを追加\r\n2022/04/05 ver 6.04 tpause, umonitor, umwaitを追加\r\n2022/03/08 ver 6.03 MmapAllocatorがmemfd用のユーザ定義文字列をサポート\r\n2022/01/28 ver 6.02 dispacementの32bit範囲チェックの厳密化\r\n2021/12/14 ver 6.01 T_FAR jump/callとretfをサポート\r\n2021/09/14 ver 6.00 AVX512-FP16を完全サポート\r\n2021/09/09 ver 5.997 vrndscale*を{sae}をサポートするよう修正\r\n2021/09/03 ver 5.996 v{add,sub,mul,div,max,min}{sd,ss}をT_rd_saeなどをサポートするよう修正\r\n2021/08/15 ver 5.995 Linux上でXBYAK_USE_MEMFDが定義されたなら/proc/self/mapsにラベル追加\r\n2021/06/17 ver 5.994 マスクレジスタ用のvcmpXX{ps,pd,ss,sd}のalias追加\r\n2021/06/06 ver 5.993 gather/scatterのレジスタの組み合わせの厳密なチェック\r\n2021/05/09 ver 5.992 endbr32とendbr64のサポート\r\n2020/11/16 ver 5.991 g++-5のC++14でconstexpr機能の抑制\r\n2020/10/19 ver 5.99 VNNI命令サポート(Thanks to akharito)\r\n2020/10/17 ver 5.98 [scale * reg]のサポート\r\n2020/09/08 ver 5.97 uint32などをuint32_tに置換\r\n2020/08/28 ver 5.95 レジスタクラスのコンストラクタがconstexprに対応(C++14以降)\r\n2020/08/04 ver 5.941 `CodeGenerator::reset()`が`ClearError()`を呼ぶように変更\r\n2020/07/28 ver 5.94 #include <winsock2.h>の削除 (only windows)\r\n2020/07/21 ver 5.93 例外なしモード追加\r\n2020/06/30 ver 5.92 Intel AMX命令サポート (Thanks to nshustrov)\r\n2020/06/19 ver 5.913 32ビット環境でXBYAK64を定義したときのmov(r64, imm64)を修正\r\n2020/06/19 ver 5.912 macOSの古いXcodeでもMAP_JITを有効にする(Thanks to rsdubtso)\r\n2020/05/10 ver 5.911 Linux/macOSでXBYAK_USE_MMAP_ALLOCATORがデフォルト有効になる\r\n2020/04/20 ver 5.91 マスクレジスタk0を受け入れる(マスクをしない)\r\n2020/04/09 ver 5.90 kmov{b,w,d,q}がサポートされないレジスタを受けると例外を投げる\r\n2020/02/26 ver 5.891 zm0のtype修正\r\n2020/01/03 ver 5.89 vfpclasspdの処理エラー修正\r\n2019/12/20 ver 5.88 Windowsでのコンパイルエラー修正\r\n2019/12/19 ver 5.87 未定義ラベルへのjmp命令のデフォルト挙動をT_NEARにするsetDefaultJmpNEAR()を追加\r\n2019/12/13 ver 5.86 [変更] -fno-operator-namesが指定されたときは5.84以前の挙動に戻す\r\n2019/12/07 ver 5.85 mmapにMAP_JITフラグを追加(macOS mojave以上)\r\n2019/11/29 ver 5.84 [変更] XBYAK_USE_OP_NAMESが定義されていない限りXBYAK_NO_OP_NAMESが定義されるように変更\r\n2019/10/12 ver 5.83 exit(1)の除去\r\n2019/09/23 ver 5.82 monitorx, mwaitx, clzero対応 (thanks to MagurosanTeam)\r\n2019/09/14 ver 5.81 いくつかの一般命令をサポート\r\n2019/08/01 ver 5.802 AVX512_BF16判定修正 (thanks to vpirogov)\r\n2019/05/27 support vp2intersectd, vp2intersectq (not tested)\r\n2019/05/26 ver 5.80 support vcvtne2ps2bf16, vcvtneps2bf16, vdpbf16ps\r\n2019/04/27 ver 5.79 vcmppd/vcmppsのptr_b対応忘れ(thanks to jkopinsky)\r\n2019/04/15 ver 5.78 Reg::changeBit()のリファクタリング(thanks to MerryMage)\r\n2019/03/06 ver 5.77 LLCキャッシュを共有数CPU数の修整(by densamoilov)\r\n2019/01/17 ver 5.76 Cpu::getNumCores()追加(by shelleygoel)\r\n2018/10/31 ver 5.751 互換性のためにXbyak::CastToの復元\r\n2018/10/29 ver 5.75 LabelManagerのデストラクタでLabelから参照を切り離す\r\n2018/10/21 ver 5.74 RegRip +/intの形をサポート Xbyak::CastToを削除\r\n2018/10/15 util::StackFrameでmovの代わりにpush/popを使う\r\n2018/09/19 ver 5.73 vpslld, vpslldq, vpsllwなどの(reg, mem, imm8)に対するevexエンコーディング修整\r\n2018/09/19 ver 5.72 fix the encoding of vinsertps for disp8N(Thanks to petercaday)\r\n2018/08/27 ver 5.71 新しいlabelインスタンスを返すL()を追加\r\n2018/08/27 ver 5.70 read/exec設定のためのsetProtectMode()とDontUseProtectの追加\r\n2018/08/24 ver 5.68 indexが16以上のVSIBエンコーディングのバグ修正(thanks to petercaday)\r\n2018/08/14 ver 5.67 Addressクラス内のmutableを削除 ; fix setCacheHierarchy for cloud vm\r\n2018/07/26 ver 5.661 mingw64対応\r\n2018/07/24 ver 5.66 protect()のmodeにCodeArray::PROTECT_REを追加\r\n2018/06/26 ver 5.65 fix push(qword [mem])\r\n2018/03/07 ver 5.64 Cpu()の中でzero divisionが出ることがあるのを修正\r\n2018/02/14 ver 5.63 Cpu::setCacheHierarchy()の修正とclang<3.9のためのEvexModifierZero修正(thanks to mgouicem)\r\n2018/02/13 ver 5.62 Cpu::setCacheHierarchy() by mgouicem and rsdubtso\r\n2018/02/07 ver 5.61 vmov*がmem{k}{z}形式対応(忘れてた)\r\n2018/01/24 ver 5.601 xword, ywordなどをXbyak::util名前空間に追加\r\n2018/01/05 ver 5.60 Ice lake系命令対応(319433-030.pdf)\r\n2017/08/22 ver 5.53 mpxエンコーディングバグ修正, bnd()プレフィクス追加\r\n2017/08/18 ver 5.52 align修正(thanks to MerryMage)\r\n2017/08/17 ver 5.51 multi-byte nop追加 align()はそれを使用する(thanks to inolen)\r\n2017/08/08 ver 5.50 mpx追加(thanks to magurosan)\r\n2017/08/08 ver 5.45 sha追加(thanks to magurosan)\r\n2017/08/08 ver 5.44 prefetchw追加(thanks to rsdubtso)\r\n2017/07/12 ver 5.432 PVS-studioの警告を減らす\r\n2017/07/09 ver 5.431 hasRex()修正 (影響なし) (thanks to drillsar)\r\n2017/05/14 ver 5.43 CodeGenerator::resetSize()修正(thanks to gibbed)\r\n2017/05/13 ver 5.42 movs{b,w,d,q}追加\r\n2017/01/26 ver 5.41 prefetcwt1追加とscale == 0対応(thanks to rsdubtso)\r\n2016/12/14 ver 5.40 Labelが示すアドレスを取得するLabel::getAddress()追加\r\n2016/12/07 ver 5.34 disp8N時の負のオフセット処理の修正(thanks to rsdubtso)\r\n2016/12/06 ver 5.33 disp8N時のvpbroadcast{b,w,d,q}, vpinsr{b,w}, vpextr{b,w}のバグ修正\r\n2016/12/01 ver 5.32 clang for Visual Studioサポートのために__xgetbv()を_xgetbv()に変更(thanks to freiro)\r\n2016/11/27 ver 5.31 AVX512_4VNNIをAVX512_4VNNIWに変更\r\n2016/11/27 ver 5.30 AVX512_4VNNI, AVX512_4FMAPS命令の追加(thanks to rsdubtso)\r\n2016/11/26 ver 5.20 AVX512_4VNNIとAVX512_4FMAPSの判定追加(thanks to rsdubtso)\r\n2016/11/20 ver 5.11 何故か消えていたvptest for ymm追加(thanks to gregory38)\r\n2016/11/20 ver 5.10 [rip+&var]の形のアドレッシング追加\r\n2016/09/29 ver 5.03 ERR_INVALID_OPMASK_WITH_MEMORYの判定ミス修正(thanks to PVS-Studio)\r\n2016/08/15 ver 5.02 xbyak_bin2hex.hをincludeしない\r\n2016/08/15 ver 5.011 gcc 5.4のバージョン取得ミスの修正\r\n2016/08/03 ver 5.01 AVXの省略表記非サポート\r\n2016/07/24 ver 5.00 avx-512フルサポート\r\n2016/06/13 avx-512 opmask命令サポート\r\n2016/05/05 ver 4.91 AVX-512命令の検出サポート\r\n2016/03/14 ver 4.901 ready()関数にコメント加筆(thanks to skmp)\r\n2016/02/04 ver 4.90 条件分岐命令にjcc(const void *addr);のタイプを追加\r\n2016/01/30 ver 4.89 vpblendvbがymmレジスタをサポートしていなかった(thanks to John Funnell)\r\n2016/01/24 ver 4.88 lea, cmovの16bitレジスタ対応(thanks to whyisthisfieldhere)\r\n2015/08/16 ver 4.87 セグメントセレクタに対応\r\n2015/08/16 ver 4.86 [rip + label]アドレッシングで即値を使うと壊れる(thanks to whyisthisfieldhere)\r\n2015/08/10 ver 4.85 Address::operator==()が間違っている(thanks to inolen)\r\n2015/07/22 ver 4.84 call()がvariadic template対応\r\n2015/05/24 ver 4.83 mobveサポート(thanks to benvanik)\r\n2015/05/24 ver 4.82 F16Cが使えるかどうかの判定追加\r\n2015/04/25 ver 4.81 setSizeが例外を投げる条件を修正(thanks to whyisthisfieldhere)\r\n2015/04/22 ver 4.80 rip相対でLabelのサポート(thanks to whyisthisfieldhere)\r\n2015/01/28 ver 4.71 adcx, adox, cmpxchg, rdseed, stacのサポート\r\n2014/10/14 ver 4.70 MmapAllocatorのサポート\r\n2014/06/13 ver 4.62 VC2014で警告抑制\r\n2014/05/30 ver 4.61 bt, bts, btr, btcのサポート\r\n2014/05/28 ver 4.60 vcvtph2ps, vcvtps2phのサポート\r\n2014/04/11 ver 4.52 rdrandの判定追加\r\n2014/03/25 ver 4.51 参照されなくなったラベルの状態を削除する\r\n2014/03/16 ver 4.50 新しいラベルクラスのサポート\r\n2014/03/05 ver 4.40 VirtualBox上でBMI/enhanced repのサポート判定を間違うことがあるのを修正\r\n2013/12/03 ver 4.30 Reg::cvt8(), cvt16(), cvt32()のサポート\r\n2013/10/16 ver 4.21 ラベルでstd::stringを受け付ける。\r\n2013/07/30 ver 4.20 [break backward compatibility] 従来のReg32eクラスをアドレッシング用のRegExpとReg32, Reg64を表すReg32eに分離\r\n2013/07/04 ver 4.10 [break backward compatibility] Xbyak::Errorの型をenumからclassに変更\r\n2013/06/21 ver 4.02 LABELの指すアドレスを書き込むputL(LABEL)関数の追加。\r\n2013/06/21 ver 4.01 vpsllw, vpslld, vpsllq, vpsraw, vpsrad, vpsrlw, vpsrld, vpsrlq support (ymm, ymm, xmm)\r\n                    support vpbroadcastb, vpbroadcastw, vpbroadcastd, vpbroadcastq(thanks to Gabest)\r\n2013/05/30 ver 4.00 AVX2, VEX-encoded GPR-instructionをサポート\r\n2013/03/27 ver 3.80 mov(reg, \"label\");をサポート\r\n2013/03/13 ver 3.76 cqo, jcxz, jecxz, jrcxz追加\r\n2013/01/15 ver 3.75 生成されたコードを修正するためにsetSize()を追加\r\n2013/01/12 ver 3.74 CodeGenerator::reset()とAllocator::useProtect()を追加\r\n2013/01/06 ver 3.73 可能ならunordered_mapを使う\r\n2012/12/04 ver 3.72 eaxなどをCodeGeneratorのメンバ変数に戻す. Xbyak::util::eaxはstatic const変数\r\n2012/11/17 ver 3.71 and_(), or_(), xor_(), not_()をXBYAK_NO_OP_NAMESが定義されていないときでも使えるようにした\r\n2012/11/17 CodeGeneratorのeax, ecx, ptrなどのメンバ変数をstaticにし、const参照をXbyak::utilにも定義\r\n2012/11/09 ver 3.70 and()をand_()にするためのマクロXBYAK_NO_OP_NAMESを追加(thanks to Mattias)\r\n2012/11/01 ver 3.62 add fwait/fnwait/finit/fninit\r\n2012/11/01 ver 3.61 add fldcw/fstcw\r\n2012/05/03 ver 3.60 Allocatorクラスのインタフェースを変更\r\n2012/03/23 ver 3.51 userPtrモードがバグったのを修正\r\n2012/03/19 ver 3.50 AutoGrowモードサポート\r\n2011/11/09 ver 3.05 rip相対の64bitサイズ以外の扱いのバグ修正 / movsxdサポート\r\n2011/08/15 ver 3.04 add(dword [ebp-8], 0xda);などにおけるimm8の扱いのバグ修正(thanks to lolcat)\r\n2011/06/16 ver 3.03 Macのgcc上での__GNUC_PREREQがミスってたのを修正(thanks to t_teruya)\r\n2011/04/28 ver 3.02 Macのgcc上ではxgetbvをdisable\r\n2011/03/24 ver 3.01 fix typo of OSXSAVE\r\n2011/03/23 ver 3.00  vcmpeqpsなどを追加\r\n2011/02/16 ver 2.994 beta add vmovq for 32-bit mode(I forgot it)\r\n2011/02/16 ver 2.993 beta remove cvtReg to avoid thread unsafe\r\n2011/02/10 ver 2.992 beta support one argument syntax for fadd like nasm\r\n2011/02/07 ver 2.991 beta fix pextrw reg, xmm, imm(Thanks to Gabest)\r\n2011/02/04 ver 2.99 beta support AVX\r\n2010/12/08 ver 2.31 fix ptr [rip + 32bit offset], support rtdscp\r\n2010/10/19 ver 2.30 support pclmulqdq, aesdec, aesdeclast, aesenc, aesenclast, aesimc, aeskeygenassist\r\n2010/07/07 ver 2.29 fix call(<label>)\r\n2010/06/17 ver 2.28 move some member functions to public\r\n2010/06/01 ver 2.27 support encoding of mov(reg64, imm) like yasm(not nasm)\r\n2010/05/24 ver 2.26 fix sub(rsp, 1000)\r\n2010/04/26 ver 2.25 add jc/jnc(I forgot to implement them...)\r\n2010/04/16 ver 2.24 change the prototype of rewrite() method\r\n2010/04/15 ver 2.23 fix align() and xbyak_util.h for Mac\r\n2010/02/16 ver 2.22 fix inLocalLabel()/outLocalLabel()\r\n2009/12/09 ver 2.21 support cygwin(gcc 4.3.2)\r\n2009/11/28 ver 2.20 FPUの一部命令サポート\r\n2009/06/25 ver 2.11 64bitモードでの mov(qword[rax], imm); 修正(thanks to Martinさん)\r\n2009/03/10 ver 2.10 jmp/call reg64の冗長なREG.W削除\r\n2009/02/24 ver 2.09 movq reg64, mmx/xmm; movq mmx/xmm, reg64追加\r\n2009/02/13 ver 2.08 movd(xmm7, dword[eax])が0x66を落とすバグ修正(thanks to Gabestさん)\r\n2008/12/30 ver 2.07 call()の相対アドレスが8bit以下のときのバグ修正(thanks to katoさん)\r\n2008/09/18 ver 2.06 @@, @f, @bとラベルの局所化機能追加(thanks to nobu-qさん)\r\n2008/09/18 ver 2.05 ptr [rip + 32bit offset]サポート(thanks to 団子厨(Dango-Chu)さん)\r\n2008/06/03 ver 2.04 align()のポカミス修正。mov(ptr[eax],1);などをエラーに\r\n2008/06/02 ver 2.03 ユーザ定義メモリインタフェースサポート\r\n2008/05/26 ver 2.02 protect()(on Linux)で不正な設定になることがあるのを修正(thanks to sinichiro_hさん)\r\n2008/04/30 ver 2.01 cmpxchg16b, cdqe追加\r\n2008/04/29 ver 2.00 x86/x64-64版公開\r\n2008/04/25 ver 1.90 x64版β公開\r\n2008/04/18 ver 1.12 コード整理\r\n2008/04/14 ver 1.11 コード整理\r\n2008/03/12 ver 1.10 bsf/bsr追加(忘れていた)\r\n2008/02/14 ver 1.09 sub eax, 1234が16bitモードで出力されていたのを修正(thanks to Robertさん)\r\n2007/11/05 ver 1.08 lock, xadd, xchg追加\r\n2007/11/02 ver 1.07 SSSE3/SSE4対応(thanks to 団子厨(Dango-Chu)さん)\r\n2007/09/25 ver 1.06 call((int)関数ポインタ); jmp((int)関数ポインタ);のサポート\r\n2007/08/04 ver 1.05 細かい修正\r\n2007/02/04 後方へのジャンプでT_NEARをつけないときに8bit相対アドレスに入らない\r\n           場合に例外が発生しないバグの修正\r\n2007/01/21 [disp]の形のアドレス生成のバグ修正\r\n           mov (eax|ax|al, [disp]); mov([disp], eax|ax|al);の短い表現選択\r\n2007/01/17 webページ作成\r\n2007/01/04 公開開始\r\n\r\n-----------------------------------------------------------------------------\r\n◎著作権者\r\n\r\n光成滋生(MITSUNARI Shigeo, herumi@nifty.com)\r\n"
        },
        {
          "name": "sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "xbyak.sln",
          "type": "blob",
          "size": 5.7490234375,
          "content": "Microsoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio 15\nVisualStudioVersion = 15.0.28010.2016\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bf\", \"sample\\bf.vcxproj\", \"{654BD79B-59D3-4B10-BBAA-158BAB272828}\"\nEndProject\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"calc\", \"sample\\calc.vcxproj\", \"{5FDDFAA6-B947-491D-A17E-BBD863846579}\"\nEndProject\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"quantize\", \"sample\\quantize.vcxproj\", \"{D06753BF-E1F3-4578-9B18-08673327F77C}\"\nEndProject\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"test0\", \"sample\\test0.vcxproj\", \"{1CDE4D2A-BE3A-4B9B-B28F-524A23084A8E}\"\nEndProject\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"toyvm\", \"sample\\toyvm.vcxproj\", \"{2E41C7AF-39FF-454C-B081-37445378DCB3}\"\nEndProject\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"test_util\", \"sample\\test_util.vcxproj\", \"{CFC9B272-FDA1-4C87-B4EF-CDCA9B57F4DD}\"\nEndProject\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"calc2\", \"sample\\calc2.vcxproj\", \"{8EC11C7F-1B5C-4787-8940-B9B3AAF1D204}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Win32 = Debug|Win32\n\t\tDebug|x64 = Debug|x64\n\t\tRelease|Win32 = Release|Win32\n\t\tRelease|x64 = Release|x64\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{654BD79B-59D3-4B10-BBAA-158BAB272828}.Debug|Win32.ActiveCfg = Debug|Win32\n\t\t{654BD79B-59D3-4B10-BBAA-158BAB272828}.Debug|Win32.Build.0 = Debug|Win32\n\t\t{654BD79B-59D3-4B10-BBAA-158BAB272828}.Debug|x64.ActiveCfg = Debug|x64\n\t\t{654BD79B-59D3-4B10-BBAA-158BAB272828}.Debug|x64.Build.0 = Debug|x64\n\t\t{654BD79B-59D3-4B10-BBAA-158BAB272828}.Release|Win32.ActiveCfg = Release|Win32\n\t\t{654BD79B-59D3-4B10-BBAA-158BAB272828}.Release|Win32.Build.0 = Release|Win32\n\t\t{654BD79B-59D3-4B10-BBAA-158BAB272828}.Release|x64.ActiveCfg = Release|x64\n\t\t{654BD79B-59D3-4B10-BBAA-158BAB272828}.Release|x64.Build.0 = Release|x64\n\t\t{5FDDFAA6-B947-491D-A17E-BBD863846579}.Debug|Win32.ActiveCfg = Debug|Win32\n\t\t{5FDDFAA6-B947-491D-A17E-BBD863846579}.Debug|Win32.Build.0 = Debug|Win32\n\t\t{5FDDFAA6-B947-491D-A17E-BBD863846579}.Debug|x64.ActiveCfg = Debug|x64\n\t\t{5FDDFAA6-B947-491D-A17E-BBD863846579}.Debug|x64.Build.0 = Debug|x64\n\t\t{5FDDFAA6-B947-491D-A17E-BBD863846579}.Release|Win32.ActiveCfg = Release|Win32\n\t\t{5FDDFAA6-B947-491D-A17E-BBD863846579}.Release|Win32.Build.0 = Release|Win32\n\t\t{5FDDFAA6-B947-491D-A17E-BBD863846579}.Release|x64.ActiveCfg = Release|x64\n\t\t{5FDDFAA6-B947-491D-A17E-BBD863846579}.Release|x64.Build.0 = Release|x64\n\t\t{D06753BF-E1F3-4578-9B18-08673327F77C}.Debug|Win32.ActiveCfg = Debug|Win32\n\t\t{D06753BF-E1F3-4578-9B18-08673327F77C}.Debug|Win32.Build.0 = Debug|Win32\n\t\t{D06753BF-E1F3-4578-9B18-08673327F77C}.Debug|x64.ActiveCfg = Debug|x64\n\t\t{D06753BF-E1F3-4578-9B18-08673327F77C}.Debug|x64.Build.0 = Debug|x64\n\t\t{D06753BF-E1F3-4578-9B18-08673327F77C}.Release|Win32.ActiveCfg = Release|Win32\n\t\t{D06753BF-E1F3-4578-9B18-08673327F77C}.Release|Win32.Build.0 = Release|Win32\n\t\t{D06753BF-E1F3-4578-9B18-08673327F77C}.Release|x64.ActiveCfg = Release|x64\n\t\t{D06753BF-E1F3-4578-9B18-08673327F77C}.Release|x64.Build.0 = Release|x64\n\t\t{1CDE4D2A-BE3A-4B9B-B28F-524A23084A8E}.Debug|Win32.ActiveCfg = Debug|Win32\n\t\t{1CDE4D2A-BE3A-4B9B-B28F-524A23084A8E}.Debug|Win32.Build.0 = Debug|Win32\n\t\t{1CDE4D2A-BE3A-4B9B-B28F-524A23084A8E}.Debug|x64.ActiveCfg = Debug|x64\n\t\t{1CDE4D2A-BE3A-4B9B-B28F-524A23084A8E}.Debug|x64.Build.0 = Debug|x64\n\t\t{1CDE4D2A-BE3A-4B9B-B28F-524A23084A8E}.Release|Win32.ActiveCfg = Release|Win32\n\t\t{1CDE4D2A-BE3A-4B9B-B28F-524A23084A8E}.Release|Win32.Build.0 = Release|Win32\n\t\t{1CDE4D2A-BE3A-4B9B-B28F-524A23084A8E}.Release|x64.ActiveCfg = Release|x64\n\t\t{1CDE4D2A-BE3A-4B9B-B28F-524A23084A8E}.Release|x64.Build.0 = Release|x64\n\t\t{2E41C7AF-39FF-454C-B081-37445378DCB3}.Debug|Win32.ActiveCfg = Debug|Win32\n\t\t{2E41C7AF-39FF-454C-B081-37445378DCB3}.Debug|Win32.Build.0 = Debug|Win32\n\t\t{2E41C7AF-39FF-454C-B081-37445378DCB3}.Debug|x64.ActiveCfg = Debug|x64\n\t\t{2E41C7AF-39FF-454C-B081-37445378DCB3}.Debug|x64.Build.0 = Debug|x64\n\t\t{2E41C7AF-39FF-454C-B081-37445378DCB3}.Release|Win32.ActiveCfg = Release|Win32\n\t\t{2E41C7AF-39FF-454C-B081-37445378DCB3}.Release|Win32.Build.0 = Release|Win32\n\t\t{2E41C7AF-39FF-454C-B081-37445378DCB3}.Release|x64.ActiveCfg = Release|x64\n\t\t{2E41C7AF-39FF-454C-B081-37445378DCB3}.Release|x64.Build.0 = Release|x64\n\t\t{CFC9B272-FDA1-4C87-B4EF-CDCA9B57F4DD}.Debug|Win32.ActiveCfg = Debug|Win32\n\t\t{CFC9B272-FDA1-4C87-B4EF-CDCA9B57F4DD}.Debug|Win32.Build.0 = Debug|Win32\n\t\t{CFC9B272-FDA1-4C87-B4EF-CDCA9B57F4DD}.Debug|x64.ActiveCfg = Debug|x64\n\t\t{CFC9B272-FDA1-4C87-B4EF-CDCA9B57F4DD}.Debug|x64.Build.0 = Debug|x64\n\t\t{CFC9B272-FDA1-4C87-B4EF-CDCA9B57F4DD}.Release|Win32.ActiveCfg = Release|Win32\n\t\t{CFC9B272-FDA1-4C87-B4EF-CDCA9B57F4DD}.Release|Win32.Build.0 = Release|Win32\n\t\t{CFC9B272-FDA1-4C87-B4EF-CDCA9B57F4DD}.Release|x64.ActiveCfg = Release|x64\n\t\t{CFC9B272-FDA1-4C87-B4EF-CDCA9B57F4DD}.Release|x64.Build.0 = Release|x64\n\t\t{8EC11C7F-1B5C-4787-8940-B9B3AAF1D204}.Debug|Win32.ActiveCfg = Debug|Win32\n\t\t{8EC11C7F-1B5C-4787-8940-B9B3AAF1D204}.Debug|Win32.Build.0 = Debug|Win32\n\t\t{8EC11C7F-1B5C-4787-8940-B9B3AAF1D204}.Debug|x64.ActiveCfg = Debug|x64\n\t\t{8EC11C7F-1B5C-4787-8940-B9B3AAF1D204}.Debug|x64.Build.0 = Debug|x64\n\t\t{8EC11C7F-1B5C-4787-8940-B9B3AAF1D204}.Release|Win32.ActiveCfg = Release|Win32\n\t\t{8EC11C7F-1B5C-4787-8940-B9B3AAF1D204}.Release|Win32.Build.0 = Release|Win32\n\t\t{8EC11C7F-1B5C-4787-8940-B9B3AAF1D204}.Release|x64.ActiveCfg = Release|x64\n\t\t{8EC11C7F-1B5C-4787-8940-B9B3AAF1D204}.Release|x64.Build.0 = Release|x64\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {DAE0012B-DDCC-4614-9110-D52E351B2A80}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "xbyak",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}