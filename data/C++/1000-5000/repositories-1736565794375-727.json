{
  "metadata": {
    "timestamp": 1736565794375,
    "page": 727,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjczMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "kcat/openal-soft",
      "stars": 2263,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 9.2294921875,
          "content": "---\n  Checks: '-*,\n                    bugprone-argument-comment,\n                    bugprone-assert-side-effect,\n                    bugprone-assignment-in-if-condition,\n                    bugprone-bad-signal-to-kill-thread,\n                    bugprone-bool-pointer-implicit-conversion,\n                    bugprone-casting-through-void,\n                    bugprone-chained-comparison,\n                    bugprone-compare-pointer-to-member-virtual-function,\n                    bugprone-copy-constructor-init,\n                    bugprone-crtp-constructor-accessibility,\n                    bugprone-dangling-handle,\n                    bugprone-dynamic-static-initializers,\n                    bugprone-fold-init-type,\n                    bugprone-forward-declaration-namespace,\n                    bugprone-forwarding-reference-overload,\n                    bugprone-implicit-widening-of-multiplication-result,\n                    bugprone-inaccurate-erase,\n                    bugprone-incorrect-*,\n                    bugprone-infinite-loop,\n                    bugprone-integer-division,\n                    bugprone-lambda-function-name,\n                    bugprone-macro-repeated-side-effects,\n                    bugprone-misplaced-*,\n                    bugprone-move-forwarding-reference,\n                    bugprone-multi-level-implicit-pointer-conversion,\n                    bugprone-multiple-*,\n                    bugprone-narrowing-conversions,\n                    bugprone-no-escape,\n                    bugprone-non-zero-enum-to-bool-conversion,\n                    bugprone-not-null-terminated-result,\n                    bugprone-optional-value-conversion,\n                    bugprone-parent-virtual-call,\n                    bugprone-pointer-arithmetic-on-polymorphic-object,\n                    bugprone-posix-return,\n                    bugprone-redundant-branch-condition,\n                    bugprone-reserved-identifier,\n                    bugprone-return-const-ref-from-parameter,\n                    bugprone-shared-ptr-array-mismatch,\n                    bugprone-signal-handler,\n                    bugprone-signed-char-misuse,\n                    bugprone-sizeof-*,\n                    bugprone-spuriously-wake-up-functions,\n                    bugprone-standalone-empty,\n                    bugprone-string-*,\n                    bugprone-stringview-nullptr,\n                    bugprone-suspicious-*,\n                    bugprone-swapped-arguments,\n                    bugprone-terminating-continue,\n                    bugprone-throw-keyword-missing,\n                    bugprone-too-small-loop-variable,\n                    bugprone-undefined-memory-manipulation,\n                    bugprone-undelegated-constructor,\n                    bugprone-unhandled-*,\n                    bugprone-unique-ptr-array-mismatch,\n                    bugprone-unsafe-functions,\n                    bugprone-unused-*,\n                    bugprone-use-after-move,\n                    bugprone-virtual-near-miss,\n                    cert-dcl50-cpp,\n                    cert-dcl58-cpp,\n                    cert-env33-c,\n                    cert-err34-c,\n                    cert-err52-cpp,\n                    cert-err60-cpp,\n                    cert-flp30-c,\n                    cert-mem57-cpp,\n                    clang-analyzer-apiModeling.*,\n                    clang-analyzer-core.*,\n                    clang-analyzer-cplusplus.*,\n                    clang-analyzer-deadcode.DeadStores,\n                    clang-analyzer-fuchsia.HandleChecker,\n                    clang-analyzer-nullability.*,\n                    clang-analyzer-optin.*,\n                    clang-analyzer-osx.*,\n                    clang-analyzer-security.FloatLoopCounter,\n                    clang-analyzer-security.PutenvStackArray,\n                    clang-analyzer-security.SetgidSetuidOrder,\n                    clang-analyzer-security.cert.env.InvalidPtr,\n                    clang-analyzer-security.insecureAPI.SecuritySyntaxChecker,\n                    clang-analyzer-security.insecureAPI.UncheckedReturn,\n                    clang-analyzer-security.insecureAPI.bcmp,\n                    clang-analyzer-security.insecureAPI.bcopy,\n                    clang-analyzer-security.insecureAPI.bzero,\n                    clang-analyzer-security.insecureAPI.decodeValueOfObjCType,\n                    clang-analyzer-security.insecureAPI.getpw,\n                    clang-analyzer-security.insecureAPI.gets,\n                    clang-analyzer-security.insecureAPI.mkstemp,\n                    clang-analyzer-security.insecureAPI.mktemp,\n                    clang-analyzer-security.insecureAPI.rand,\n                    clang-analyzer-security.insecureAPI.strcpy,\n                    clang-analyzer-security.insecureAPI.vfork,\n                    clang-analyzer-unix.*,\n                    clang-analyzer-valist.*,\n                    clang-analyzer-webkit.*,\n                    concurrency-thread-canceltype-asynchronous,\n                    cppcoreguidelines-avoid-capturing-lambda-coroutines,\n                    cppcoreguidelines-avoid-c-arrays,\n                    cppcoreguidelines-avoid-goto,\n                    cppcoreguidelines-avoid-reference-coroutine-parameters,\n                    cppcoreguidelines-c-copy-assignment-signature,\n                    cppcoreguidelines-explicit-virtual-functions,\n                    cppcoreguidelines-interfaces-global-init,\n                    cppcoreguidelines-narrowing-conversions,\n                    cppcoreguidelines-no-malloc,\n                    cppcoreguidelines-no-suspend-with-lock,\n                    cppcoreguidelines-owning-memory,\n                    cppcoreguidelines-prefer-member-initializer,\n                    cppcoreguidelines-pro-bounds-array-to-pointer-decay,\n                    cppcoreguidelines-pro-bounds-pointer-arithmetic,\n                    cppcoreguidelines-pro-type-const-cast,\n                    cppcoreguidelines-pro-type-cstyle-cast,\n                    cppcoreguidelines-pro-type-member-init,\n                    cppcoreguidelines-pro-type-static-cast-downcast,\n                    cppcoreguidelines-pro-type-union-access,\n                    cppcoreguidelines-pro-type-vararg,\n                    cppcoreguidelines-slicing,\n                    cppcoreguidelines-virtual-class-destructor,\n                    google-build-explicit-make-pair,\n                    google-default-arguments,\n                    google-explicit-constructor,\n                    hicpp-exception-baseclass,\n                    misc-confusable-identifiers,\n                    misc-coroutine-hostile-raii,\n                    misc-misleading-*,\n                    misc-non-copyable-objects,\n                    misc-throw-by-value-catch-by-reference,\n                    misc-uniqueptr-reset-release,\n                    modernize-avoid-*,\n                    modernize-concat-nested-namespaces,\n                    modernize-deprecated-*,\n                    modernize-loop-convert,\n                    modernize-macro-to-enum,\n                    modernize-make-*,\n                    modernize-pass-by-value,\n                    modernize-raw-string-literal,\n                    modernize-redundant-void-arg,\n                    modernize-replace-*,\n                    modernize-return-braced-init-list,\n                    modernize-shrink-to-fit,\n                    modernize-unary-static-assert,\n                    modernize-use-auto,\n                    modernize-use-bool-literals,\n                    modernize-use-default-member-init,\n                    modernize-use-emplace,\n                    modernize-use-equals-*,\n                    modernize-use-nodiscard,\n                    modernize-use-noexcept,\n                    modernize-use-nullptr,\n                    modernize-use-override,\n                    modernize-use-transparent-functors,\n                    modernize-use-uncaught-exceptions,\n                    modernize-use-using,\n                    performance-faster-string-find,\n                    performance-for-range-copy,\n                    performance-inefficient-*,\n                    performance-move-constructor-init,\n                    performance-noexcept-destructor,\n                    performance-noexcept-swap,\n                    performance-unnecessary-copy-initialization,\n                    portability-restrict-system-includes,\n                    portability-std-allocator-const,\n                    readability-const-return-type,\n                    readability-container-contains,\n                    readability-container-size-empty,\n                    readability-convert-member-functions-to-static,\n                    readability-delete-null-pointer,\n                    readability-duplicate-include,\n                    readability-else-after-return,\n                    readability-inconsistent-declaration-parameter-name,\n                    readability-make-member-function-const,\n                    readability-misleading-indentation,\n                    readability-misplaced-array-index,\n                    readability-redundant-*,\n                    readability-simplify-subscript-expr,\n                    readability-static-definition-in-anonymous-namespace,\n                    readability-string-compare,\n                    readability-uniqueptr-delete-release,\n                    readability-use-*'\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.087890625,
          "content": "build*/\nwinbuild\nwin64build\n.vs/\n\n## kdevelop\n*.kdev4\n\n## qt-creator\nCMakeLists.txt.user*\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 3.806640625,
          "content": "language: cpp\nmatrix:\n  include:\n    - os: linux\n      dist: xenial\n    - os: linux\n      dist: trusty\n      env:\n        - BUILD_ANDROID=true\n    - os: freebsd\n      compiler: clang\n    - os: osx\n    - os: osx\n      osx_image: xcode11\n      env:\n        - BUILD_IOS=true\nsudo: required\ninstall:\n  - >\n    if [[ \"${TRAVIS_OS_NAME}\" == \"linux\" && -z \"${BUILD_ANDROID}\" ]]; then\n      # Install pulseaudio, portaudio, ALSA, JACK dependencies for\n      # corresponding backends.\n      # Install Qt5 dependency for alsoft-config.\n      sudo apt-get install -qq \\\n        libpulse-dev \\\n        portaudio19-dev \\\n        libasound2-dev \\\n        libjack-dev \\\n        qtbase5-dev \\\n        libdbus-1-dev\n    fi\n  - >\n    if [[ \"${TRAVIS_OS_NAME}\" == \"linux\" && \"${BUILD_ANDROID}\" == \"true\" ]]; then\n      curl -o ~/android-ndk.zip https://dl.google.com/android/repository/android-ndk-r21-linux-x86_64.zip\n      unzip -q ~/android-ndk.zip -d ~ \\\n        'android-ndk-r21/build/cmake/*' \\\n        'android-ndk-r21/build/core/toolchains/arm-linux-androideabi-*/*' \\\n        'android-ndk-r21/platforms/android-16/arch-arm/*' \\\n        'android-ndk-r21/source.properties' \\\n        'android-ndk-r21/sources/android/support/include/*' \\\n        'android-ndk-r21/sources/cxx-stl/llvm-libc++/libs/armeabi-v7a/*' \\\n        'android-ndk-r21/sources/cxx-stl/llvm-libc++/include/*' \\\n        'android-ndk-r21/sysroot/*' \\\n        'android-ndk-r21/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/*' \\\n        'android-ndk-r21/toolchains/llvm/prebuilt/linux-x86_64/*'\n      export OBOE_LOC=~/oboe\n      git clone --depth 1 -b 1.3-stable https://github.com/google/oboe \"$OBOE_LOC\"\n    fi\n  - >\n    if [[ \"${TRAVIS_OS_NAME}\" == \"freebsd\" ]]; then\n      # Install Ninja as it's used downstream.\n      # Install dependencies for all supported backends.\n      # Install Qt5 dependency for alsoft-config.\n      # Install ffmpeg for examples.\n      sudo pkg install -y \\\n        alsa-lib \\\n        ffmpeg \\\n        jackit \\\n        libmysofa \\\n        ninja \\\n        portaudio \\\n        pulseaudio \\\n        qt5-buildtools \\\n        qt5-qmake \\\n        qt5-widgets \\\n        sdl2 \\\n        sndio \\\n        $NULL\n    fi\nscript:\n  - cmake --version\n  - >\n    if [[ \"${TRAVIS_OS_NAME}\" == \"linux\" && -z \"${BUILD_ANDROID}\" ]]; then\n      cmake \\\n        -DALSOFT_REQUIRE_ALSA=ON \\\n        -DALSOFT_REQUIRE_OSS=ON \\\n        -DALSOFT_REQUIRE_PORTAUDIO=ON \\\n        -DALSOFT_REQUIRE_PULSEAUDIO=ON \\\n        -DALSOFT_REQUIRE_JACK=ON \\\n        -DALSOFT_EMBED_HRTF_DATA=YES \\\n        .\n    fi\n  - >\n    if [[ \"${TRAVIS_OS_NAME}\" == \"linux\" && \"${BUILD_ANDROID}\" == \"true\" ]]; then\n      cmake \\\n        -DANDROID_STL=c++_shared \\\n        -DCMAKE_TOOLCHAIN_FILE=~/android-ndk-r21/build/cmake/android.toolchain.cmake \\\n        -DOBOE_SOURCE=\"$OBOE_LOC\" \\\n        -DALSOFT_REQUIRE_OBOE=ON \\\n        -DALSOFT_REQUIRE_OPENSL=ON \\\n        -DALSOFT_EMBED_HRTF_DATA=YES \\\n        .\n    fi\n  - >\n    if [[ \"${TRAVIS_OS_NAME}\" == \"freebsd\" ]]; then\n      cmake -GNinja \\\n        -DALSOFT_REQUIRE_ALSA=ON \\\n        -DALSOFT_REQUIRE_JACK=ON \\\n        -DALSOFT_REQUIRE_OSS=ON \\\n        -DALSOFT_REQUIRE_PORTAUDIO=ON \\\n        -DALSOFT_REQUIRE_PULSEAUDIO=ON \\\n        -DALSOFT_REQUIRE_SDL2=ON \\\n        -DALSOFT_REQUIRE_SNDIO=ON \\\n        -DALSOFT_EMBED_HRTF_DATA=YES \\\n        .\n    fi\n  - >\n    if [[ \"${TRAVIS_OS_NAME}\" == \"osx\" && -z \"${BUILD_IOS}\" ]]; then\n      cmake \\\n        -DALSOFT_REQUIRE_COREAUDIO=ON \\\n        -DALSOFT_EMBED_HRTF_DATA=YES \\\n        .\n    fi\n  - >\n    if [[ \"${TRAVIS_OS_NAME}\" == \"osx\" && \"${BUILD_IOS}\" == \"true\" ]]; then\n      cmake \\\n        -GXcode \\\n        -DCMAKE_SYSTEM_NAME=iOS \\\n        -DALSOFT_OSX_FRAMEWORK=ON \\\n        -DALSOFT_REQUIRE_COREAUDIO=ON \\\n        -DALSOFT_EMBED_HRTF_DATA=YES \\\n        \"-DCMAKE_OSX_ARCHITECTURES=armv7;arm64\" \\\n        .\n    fi\n  - cmake --build . --clean-first\n"
        },
        {
          "name": "BSD-3Clause",
          "type": "blob",
          "size": 1.61328125,
          "content": "Portions of this software are licensed under the BSD 3-Clause license.\n\nCopyright (c) 2015, Archontis Politis\nCopyright (c) 2019, Anis A. Hireche\nCopyright (c) 2019, Christopher Robinson\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of Spherical-Harmonic-Transform nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 68.0263671875,
          "content": "# CMake build file list for OpenAL\n\ncmake_minimum_required(VERSION 3.13)\nenable_testing()\n\nif(APPLE)\n    # The workaround for try_compile failing with code signing\n    # since cmake-3.18.2, not required\n    set(CMAKE_TRY_COMPILE_PLATFORM_VARIABLES\n        ${CMAKE_TRY_COMPILE_PLATFORM_VARIABLES}\n        \"CMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_REQUIRED\"\n        \"CMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_ALLOWED\")\n    set(CMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_REQUIRED NO)\n    set(CMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_ALLOWED NO)\nendif()\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"iOS\")\n    # Fix compile failure with armv7 deployment target >= 11.0, xcode clang\n    # will report:\n    # error: invalid iOS deployment version '--target=armv7-apple-ios13.6',\n    # iOS 10 is the maximum deployment target for 32-bit targets\n    # If CMAKE_OSX_DEPLOYMENT_TARGET is not defined, cmake will choose latest\n    # deployment target\n    if(\"${CMAKE_OSX_ARCHITECTURES}\" MATCHES \".*armv7.*\")\n        if(NOT DEFINED CMAKE_OSX_DEPLOYMENT_TARGET\n            OR NOT CMAKE_OSX_DEPLOYMENT_TARGET VERSION_LESS \"11.0\")\n            message(STATUS \"Forcing iOS deployment target to 10.0 for armv7\")\n            set(CMAKE_OSX_DEPLOYMENT_TARGET \"10.0\" CACHE STRING \"Minimum OS X deployment version\"\n                FORCE)\n        endif()\n    endif()\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"WindowsStore\")\n    set(ALSOFT_UWP TRUE)\nendif()\n\nif(COMMAND CMAKE_POLICY)\n    cmake_policy(SET CMP0003 NEW)\n    cmake_policy(SET CMP0005 NEW)\n    if(POLICY CMP0020)\n        cmake_policy(SET CMP0020 NEW)\n    endif(POLICY CMP0020)\n    if(POLICY CMP0042)\n        cmake_policy(SET CMP0042 NEW)\n    endif(POLICY CMP0042)\n    if(POLICY CMP0054)\n        cmake_policy(SET CMP0054 NEW)\n    endif(POLICY CMP0054)\n    if(POLICY CMP0058)\n        cmake_policy(SET CMP0058 NEW)\n    endif(POLICY CMP0058)\n    if(POLICY CMP0063)\n        cmake_policy(SET CMP0063 NEW)\n    endif(POLICY CMP0063)\n    if(POLICY CMP0075)\n        cmake_policy(SET CMP0075 NEW)\n    endif(POLICY CMP0075)\n    if(POLICY CMP0092)\n        cmake_policy(SET CMP0092 NEW)\n    endif(POLICY CMP0092)\n    if(POLICY CMP0117)\n        cmake_policy(SET CMP0117 NEW)\n    endif(POLICY CMP0117)\nendif(COMMAND CMAKE_POLICY)\n\nproject(OpenAL)\n\nif(NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING\n        \"Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel.\"\n        FORCE)\nendif()\nif(NOT CMAKE_DEBUG_POSTFIX)\n    set(CMAKE_DEBUG_POSTFIX \"\" CACHE STRING\n        \"Library postfix for debug builds. Normally left blank.\"\n        FORCE)\nendif()\n\nset(ALSOFT_STD_VERSION_PROPS\n    # Require C++17.\n    CXX_STANDARD 17\n    CXX_STANDARD_REQUIRED TRUE\n    # Prefer C17, but support earlier when necessary.\n    C_STANDARD 17)\n\nset(CMAKE_MODULE_PATH \"${OpenAL_SOURCE_DIR}/cmake\")\n\ninclude(CheckFunctionExists)\ninclude(CheckLibraryExists)\ninclude(CheckIncludeFile)\ninclude(CheckIncludeFiles)\ninclude(CheckSymbolExists)\ninclude(CheckCCompilerFlag)\ninclude(CheckCXXCompilerFlag)\ninclude(CheckCSourceCompiles)\ninclude(CheckCXXSourceCompiles)\ninclude(CheckStructHasMember)\ninclude(CMakePackageConfigHelpers)\ninclude(GNUInstallDirs)\n\nfind_package(PkgConfig)\nfind_package(SDL3 QUIET)\n\nadd_subdirectory(fmt-11.1.1 EXCLUDE_FROM_ALL)\n\noption(ALSOFT_DLOPEN  \"Check for the dlopen API for loading optional libs\"  ON)\n\noption(ALSOFT_WERROR  \"Treat compile warnings as errors\"      OFF)\n\noption(ALSOFT_UTILS \"Build utility programs\"  ON)\noption(ALSOFT_NO_CONFIG_UTIL \"Disable building the alsoft-config utility\" OFF)\n\noption(ALSOFT_EXAMPLES  \"Build example programs\"  ON)\noption(ALSOFT_TESTS \"Build test programs\"  OFF)\n\noption(ALSOFT_INSTALL \"Install main library\" ON)\noption(ALSOFT_INSTALL_CONFIG \"Install alsoft.conf sample configuration file\" ON)\noption(ALSOFT_INSTALL_HRTF_DATA \"Install HRTF data files\" ON)\noption(ALSOFT_INSTALL_AMBDEC_PRESETS \"Install AmbDec preset files\" ON)\noption(ALSOFT_INSTALL_EXAMPLES \"Install example programs (alplay, alstream, ...)\" ON)\noption(ALSOFT_INSTALL_UTILS \"Install utility programs (openal-info, alsoft-config, ...)\" ON)\noption(ALSOFT_UPDATE_BUILD_VERSION \"Update git build version info\" ON)\n\noption(ALSOFT_EAX \"Enable legacy EAX extensions\" ${WIN32})\n\noption(ALSOFT_SEARCH_INSTALL_DATADIR \"Search the installation data directory\" OFF)\nif(ALSOFT_SEARCH_INSTALL_DATADIR)\n    set(ALSOFT_INSTALL_DATADIR ${CMAKE_INSTALL_FULL_DATADIR})\nendif()\n\nif(DEFINED SHARE_INSTALL_DIR)\n    message(WARNING \"SHARE_INSTALL_DIR is deprecated.  Use the variables provided by the GNUInstallDirs module instead\")\n    set(CMAKE_INSTALL_DATADIR \"${SHARE_INSTALL_DIR}\")\nendif()\n\nif(DEFINED LIB_SUFFIX)\n    message(WARNING \"LIB_SUFFIX is deprecated.  Use the variables provided by the GNUInstallDirs module instead\")\nendif()\nif(DEFINED ALSOFT_CONFIG)\n    message(WARNING \"ALSOFT_CONFIG is deprecated. Use ALSOFT_INSTALL_CONFIG instead\")\nendif()\nif(DEFINED ALSOFT_HRTF_DEFS)\n    message(WARNING \"ALSOFT_HRTF_DEFS is deprecated. Use ALSOFT_INSTALL_HRTF_DATA instead\")\nendif()\nif(DEFINED ALSOFT_AMBDEC_PRESETS)\n    message(WARNING \"ALSOFT_AMBDEC_PRESETS is deprecated. Use ALSOFT_INSTALL_AMBDEC_PRESETS instead\")\nendif()\n\n\nset(CPP_DEFS ) # C pre-processor, not C++\nset(INC_PATHS )\nset(C_FLAGS )\nset(LINKER_FLAGS )\nset(LINKER_FLAGS_DEBUG )\nset(LINKER_FLAGS_RELEASE )\nset(EXTRA_LIBS )\n\nif(WIN32)\n    set(CPP_DEFS ${CPP_DEFS} _WIN32 NOMINMAX)\n    if(MINGW)\n        set(CPP_DEFS ${CPP_DEFS} __USE_MINGW_ANSI_STDIO)\n    endif()\n\n    option(ALSOFT_BUILD_ROUTER  \"Build the router (EXPERIMENTAL; creates OpenAL32.dll and soft_oal.dll)\"  OFF)\n    if(MINGW)\n        option(ALSOFT_BUILD_IMPORT_LIB \"Build an import .lib using dlltool (requires sed)\" ON)\n    endif()\nelseif(APPLE)\n    option(ALSOFT_OSX_FRAMEWORK \"Build as macOS framework\" OFF)\nendif()\n\n\n# QNX's gcc do not uses /usr/include and /usr/lib paths by default\nif(\"${CMAKE_C_PLATFORM_ID}\" STREQUAL \"QNX\")\n    set(INC_PATHS ${INC_PATHS} /usr/include)\n    set(LINKER_FLAGS ${LINKER_FLAGS} -L/usr/lib)\nendif()\n\n# When the library is built for static linking, apps should define\n# AL_LIBTYPE_STATIC when including the AL headers.\nif(NOT LIBTYPE)\n    set(LIBTYPE SHARED)\nendif()\n\nset(LIB_MAJOR_VERSION \"1\")\nset(LIB_MINOR_VERSION \"24\")\nset(LIB_REVISION \"1\")\nset(LIB_VERSION \"${LIB_MAJOR_VERSION}.${LIB_MINOR_VERSION}.${LIB_REVISION}\")\nset(LIB_VERSION_NUM ${LIB_MAJOR_VERSION},${LIB_MINOR_VERSION},${LIB_REVISION},0)\n\nset(EXPORT_DECL \"\")\n\n\n# Some systems erroneously require the __STDC_FORMAT_MACROS macro to be defined\n# to get the fixed-width integer type formatter macros.\ncheck_cxx_source_compiles(\"#include <cinttypes>\n#include <cstdio>\nint main()\n{\n    int64_t i64{};\n    std::printf(\\\"%\\\" PRId64, i64);\n}\"\nHAVE_STDC_FORMAT_MACROS)\nif(NOT HAVE_STDC_FORMAT_MACROS)\n    set(CPP_DEFS ${CPP_DEFS} __STDC_FORMAT_MACROS)\nendif()\n\n# Some systems may need libatomic for atomic functions to work\nset(OLD_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES})\nset(CMAKE_REQUIRED_LIBRARIES ${OLD_REQUIRED_LIBRARIES} atomic)\ncheck_cxx_source_compiles(\"#include <atomic>\nstd::atomic<int> foo{0};\nint main() { return foo.fetch_add(2); }\"\nHAVE_LIBATOMIC)\nif(NOT HAVE_LIBATOMIC)\n    set(CMAKE_REQUIRED_LIBRARIES \"${OLD_REQUIRED_LIBRARIES}\")\nelse()\n    set(EXTRA_LIBS atomic ${EXTRA_LIBS})\nendif()\nunset(OLD_REQUIRED_LIBRARIES)\n\nif(ANDROID)\n    # Include liblog for Android logging\n    check_library_exists(log __android_log_print \"\" HAVE_LIBLOG)\n    if(HAVE_LIBLOG)\n        set(EXTRA_LIBS log ${EXTRA_LIBS})\n        set(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} log)\n    endif()\nendif()\n\nif(MSVC)\n    # NOTE: _DISABLE_CONSTEXPR_MUTEX_CONSTRUCTOR is temporary. When building on\n    # VS 2022 17.10 or newer, but using an older runtime, mutexes can crash\n    # when locked. Ideally the runtime should be updated on the system, but\n    # until the update becomes more widespread, this helps avoid some pain\n    # points.\n    set(CPP_DEFS ${CPP_DEFS} _CRT_SECURE_NO_WARNINGS _DISABLE_CONSTEXPR_MUTEX_CONSTRUCTOR)\n    check_cxx_compiler_flag(/permissive- HAVE_PERMISSIVE_SWITCH)\n    if(HAVE_PERMISSIVE_SWITCH)\n        set(C_FLAGS ${C_FLAGS} $<$<COMPILE_LANGUAGE:CXX>:/permissive->)\n    endif()\n    set(C_FLAGS ${C_FLAGS} /W4 /w14640 /wd4065 /wd4127 /wd4268 /wd4324 /wd5030 /wd5051\n        $<$<COMPILE_LANGUAGE:CXX>:/EHsc> /utf-8)\n\n    if(NOT DXSDK_DIR)\n        string(REGEX REPLACE \"\\\\\\\\\" \"/\" DXSDK_DIR \"$ENV{DXSDK_DIR}\")\n    else()\n        string(REGEX REPLACE \"\\\\\\\\\" \"/\" DXSDK_DIR \"${DXSDK_DIR}\")\n    endif()\n    if(DXSDK_DIR)\n        message(STATUS \"Using DirectX SDK directory: ${DXSDK_DIR}\")\n    endif()\n\n    option(FORCE_STATIC_VCRT \"Force /MT for static VC runtimes\" OFF)\n    if(FORCE_STATIC_VCRT)\n        foreach(flag_var\n                CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE\n                CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO\n                CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE\n                CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)\n            if(${flag_var} MATCHES \"/MD\")\n                string(REGEX REPLACE \"/MD\" \"/MT\" ${flag_var} \"${${flag_var}}\")\n            endif()\n        endforeach(flag_var)\n    endif()\nelse()\n    set(C_FLAGS ${C_FLAGS} -Winline -Wunused -Wall -Wextra -Wshadow -Wconversion -Wcast-align\n        -Wpedantic\n        $<$<COMPILE_LANGUAGE:CXX>:-Wold-style-cast -Wnon-virtual-dtor -Woverloaded-virtual>)\n\n    check_cxx_compiler_flag(-Wno-c++20-attribute-extensions HAVE_WNO_CXX20_ATTR_EXT)\n    if(HAVE_WNO_CXX20_ATTR_EXT)\n        set(C_FLAGS ${C_FLAGS} $<$<COMPILE_LANGUAGE:CXX>:-Wno-c++20-attribute-extensions>)\n    else()\n        check_cxx_compiler_flag(-Wno-c++20-extensions HAVE_WNO_CXX20_EXT)\n        if(HAVE_WNO_CXX20_EXT)\n            set(C_FLAGS ${C_FLAGS} $<$<COMPILE_LANGUAGE:CXX>:-Wno-c++20-extensions>)\n        endif()\n    endif()\n\n    check_cxx_compiler_flag(-Wno-interference-size HAVE_WNO_INTERFERENCE_SIZE)\n    if(HAVE_WNO_INTERFERENCE_SIZE)\n        set(C_FLAGS ${C_FLAGS} $<$<COMPILE_LANGUAGE:CXX>:-Wno-interference-size>)\n    endif()\n\n    if(ALSOFT_WERROR)\n        set(C_FLAGS ${C_FLAGS} -Werror)\n    else()\n        set(C_FLAGS ${C_FLAGS} -Werror=undef)\n    endif()\n\n    # NOTE: This essentially provides the equivalent of the C++26 feature to\n    # initialize all local variables with a non-0 bit pattern. Until C++26 is\n    # adopted, the [[gnu::uninitialized]] attribute will avoid the auto-\n    # initialization where necessary.\n    check_c_compiler_flag(-ftrivial-auto-var-init=pattern HAVE_FTRIVIAL_AUTO_VAR_INIT)\n    if(HAVE_FTRIVIAL_AUTO_VAR_INIT)\n        set(C_FLAGS ${C_FLAGS} -ftrivial-auto-var-init=pattern)\n    endif()\n\n    check_c_compiler_flag(-fno-math-errno HAVE_FNO_MATH_ERRNO)\n    if(HAVE_FNO_MATH_ERRNO)\n        set(C_FLAGS ${C_FLAGS} -fno-math-errno)\n    endif()\n\n    option(ALSOFT_STATIC_LIBGCC \"Force -static-libgcc for static GCC runtimes\" OFF)\n    if(ALSOFT_STATIC_LIBGCC)\n        set(OLD_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES})\n        set(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} -static-libgcc)\n        check_cxx_source_compiles(\"int main() { }\" HAVE_STATIC_LIBGCC_SWITCH)\n        set(CMAKE_REQUIRED_LIBRARIES ${OLD_REQUIRED_LIBRARIES})\n        unset(OLD_REQUIRED_LIBRARIES)\n\n        if(NOT HAVE_STATIC_LIBGCC_SWITCH)\n            message(FATAL_ERROR \"Cannot static link libgcc\")\n        endif()\n        set(LINKER_FLAGS ${LINKER_FLAGS} -static-libgcc)\n    endif()\n\n    option(ALSOFT_STATIC_STDCXX \"Static link libstdc++\" OFF)\n    if(ALSOFT_STATIC_STDCXX)\n        set(OLD_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES})\n        set(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} \"-static-libstdc++\")\n        check_cxx_source_compiles(\"int main() { }\" HAVE_STATIC_LIBSTDCXX_SWITCH)\n        set(CMAKE_REQUIRED_LIBRARIES ${OLD_REQUIRED_LIBRARIES})\n        unset(OLD_REQUIRED_LIBRARIES)\n\n        if(NOT HAVE_STATIC_LIBSTDCXX_SWITCH)\n            message(FATAL_ERROR \"Cannot static link libstdc++\")\n        endif()\n        set(LINKER_FLAGS ${LINKER_FLAGS} \"-static-libstdc++\")\n    endif()\n\n    if(WIN32)\n        option(ALSOFT_STATIC_WINPTHREAD \"Static link libwinpthread\" OFF)\n        if(ALSOFT_STATIC_WINPTHREAD)\n            set(OLD_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES})\n            set(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} \"-Wl,--push-state,-Bstatic,-lstdc++,-lwinpthread,--pop-state\")\n            check_cxx_source_compiles(\"int main() { }\" HAVE_STATIC_LIBWINPTHREAD_SWITCH)\n            set(CMAKE_REQUIRED_LIBRARIES ${OLD_REQUIRED_LIBRARIES})\n            unset(OLD_REQUIRED_LIBRARIES)\n\n            if(NOT HAVE_STATIC_LIBWINPTHREAD_SWITCH)\n                message(FATAL_ERROR \"Cannot static link libwinpthread\")\n            endif()\n            set(LINKER_FLAGS ${LINKER_FLAGS} \"-Wl,--push-state,-Bstatic,-lstdc++,-lwinpthread,--pop-state\")\n        endif()\n    endif()\nendif()\n\n# Set visibility/export options if available\nif(NOT LIBTYPE STREQUAL \"STATIC\")\n    if(WIN32)\n        set(EXPORT_DECL \"__declspec(dllexport)\")\n    else()\n        set(OLD_REQUIRED_FLAGS \"${CMAKE_REQUIRED_FLAGS}\")\n        # Yes GCC, really don't accept visibility modes you don't support\n        set(CMAKE_REQUIRED_FLAGS \"${OLD_REQUIRED_FLAGS} -Wattributes -Werror\")\n\n        check_c_source_compiles(\"int foo() __attribute__((visibility(\\\"protected\\\")));\n                                int main() {return 0;}\" HAVE_GCC_PROTECTED_VISIBILITY)\n        if(HAVE_GCC_PROTECTED_VISIBILITY)\n            set(EXPORT_DECL \"__attribute__((visibility(\\\"protected\\\")))\")\n        else()\n            check_c_source_compiles(\"int foo() __attribute__((visibility(\\\"default\\\")));\n                                    int main() {return 0;}\" HAVE_GCC_DEFAULT_VISIBILITY)\n            if(HAVE_GCC_DEFAULT_VISIBILITY)\n                set(EXPORT_DECL \"__attribute__((visibility(\\\"default\\\")))\")\n            endif()\n        endif()\n        if(HAVE_GCC_PROTECTED_VISIBILITY OR HAVE_GCC_DEFAULT_VISIBILITY)\n            set(CMAKE_C_VISIBILITY_PRESET hidden)\n            set(CMAKE_CXX_VISIBILITY_PRESET hidden)\n        endif()\n\n        set(CMAKE_REQUIRED_FLAGS \"${OLD_REQUIRED_FLAGS}\")\n    endif()\nendif()\n\n\nset(SSE2_SWITCH \"\")\n\nif(NOT MSVC)\n    set(OLD_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS})\n    # Yes GCC, really don't accept command line options you don't support\n    set(CMAKE_REQUIRED_FLAGS \"${OLD_REQUIRED_FLAGS} -Werror\")\n    check_c_compiler_flag(-msse2 HAVE_MSSE2_SWITCH)\n    if(HAVE_MSSE2_SWITCH)\n        set(SSE2_SWITCH \"-msse2\")\n    endif()\n    set(CMAKE_REQUIRED_FLAGS ${OLD_REQUIRED_FLAGS})\n    unset(OLD_REQUIRED_FLAGS)\nendif()\n\ncheck_include_file(xmmintrin.h HAVE_XMMINTRIN_H)\ncheck_include_file(emmintrin.h HAVE_EMMINTRIN_H)\ncheck_include_file(pmmintrin.h HAVE_PMMINTRIN_H)\ncheck_include_file(smmintrin.h HAVE_SMMINTRIN_H)\ncheck_include_file(arm_neon.h HAVE_ARM_NEON_H)\n\nset(HAVE_SSE        0)\nset(HAVE_SSE2       0)\nset(HAVE_SSE3       0)\nset(HAVE_SSE4_1     0)\nset(HAVE_NEON       0)\n\n# Check for SSE support\noption(ALSOFT_CPUEXT_SSE \"Enable SSE support\" ON)\noption(ALSOFT_REQUIRE_SSE \"Require SSE support\" OFF)\nif(ALSOFT_CPUEXT_SSE AND HAVE_XMMINTRIN_H)\n    set(HAVE_SSE 1)\nendif()\nif(ALSOFT_REQUIRE_SSE AND NOT HAVE_SSE)\n    message(FATAL_ERROR \"Failed to enable required SSE CPU extensions\")\nendif()\n\noption(ALSOFT_CPUEXT_SSE2 \"Enable SSE2 support\" ON)\noption(ALSOFT_REQUIRE_SSE2 \"Require SSE2 support\" OFF)\nif(ALSOFT_CPUEXT_SSE2 AND HAVE_SSE AND HAVE_EMMINTRIN_H)\n    set(HAVE_SSE2 1)\nendif()\nif(ALSOFT_REQUIRE_SSE2 AND NOT HAVE_SSE2)\n    message(FATAL_ERROR \"Failed to enable required SSE2 CPU extensions\")\nendif()\n\noption(ALSOFT_CPUEXT_SSE3 \"Enable SSE3 support\" ON)\noption(ALSOFT_REQUIRE_SSE3 \"Require SSE3 support\" OFF)\nif(ALSOFT_CPUEXT_SSE3 AND HAVE_SSE2 AND HAVE_PMMINTRIN_H)\n    set(HAVE_SSE3 1)\nendif()\nif(ALSOFT_REQUIRE_SSE3 AND NOT HAVE_SSE3)\n    message(FATAL_ERROR \"Failed to enable required SSE3 CPU extensions\")\nendif()\n\noption(ALSOFT_CPUEXT_SSE4_1 \"Enable SSE4.1 support\" ON)\noption(ALSOFT_REQUIRE_SSE4_1 \"Require SSE4.1 support\" OFF)\nif(ALSOFT_CPUEXT_SSE4_1 AND HAVE_SSE3 AND HAVE_SMMINTRIN_H)\n    set(HAVE_SSE4_1 1)\nendif()\nif(ALSOFT_REQUIRE_SSE4_1 AND NOT HAVE_SSE4_1)\n    message(FATAL_ERROR \"Failed to enable required SSE4.1 CPU extensions\")\nendif()\n\n# Check for ARM Neon support\noption(ALSOFT_CPUEXT_NEON \"Enable ARM NEON support\" ON)\noption(ALSOFT_REQUIRE_NEON \"Require ARM NEON support\" OFF)\nif(ALSOFT_CPUEXT_NEON AND HAVE_ARM_NEON_H)\n    check_c_source_compiles(\"#include <arm_neon.h>\n        int main()\n        {\n            int32x4_t ret4 = vdupq_n_s32(0);\n            return vgetq_lane_s32(ret4, 0);\n        }\" HAVE_NEON_INTRINSICS)\n    if(HAVE_NEON_INTRINSICS)\n        set(HAVE_NEON 1)\n    endif()\nendif()\nif(ALSOFT_REQUIRE_NEON AND NOT HAVE_NEON)\n    message(FATAL_ERROR \"Failed to enable required ARM NEON CPU extensions\")\nendif()\n\n\nset(ALSOFT_FORCE_ALIGN )\nset(SSE_FLAGS )\nset(FPMATH_SET \"0\")\nif(CMAKE_SIZEOF_VOID_P MATCHES \"4\" AND HAVE_SSE2)\n    option(ALSOFT_ENABLE_SSE2_CODEGEN \"Enable SSE2 code generation instead of x87 for 32-bit targets.\" TRUE)\n    if(ALSOFT_ENABLE_SSE2_CODEGEN)\n        if(MSVC)\n            check_c_compiler_flag(\"/arch:SSE2\" HAVE_ARCH_SSE2)\n            if(HAVE_ARCH_SSE2)\n                set(SSE_FLAGS ${SSE_FLAGS} \"/arch:SSE2\")\n                set(C_FLAGS ${C_FLAGS} ${SSE_FLAGS})\n                set(FPMATH_SET 2)\n            endif()\n        elseif(SSE2_SWITCH)\n            check_c_compiler_flag(\"${SSE2_SWITCH} -mfpmath=sse\" HAVE_MFPMATH_SSE_2)\n            if(HAVE_MFPMATH_SSE_2)\n                set(SSE_FLAGS ${SSE_FLAGS} ${SSE2_SWITCH} -mfpmath=sse)\n                set(C_FLAGS ${C_FLAGS} ${SSE_FLAGS})\n                set(FPMATH_SET 2)\n            endif()\n            # SSE depends on a 16-byte aligned stack, and by default, GCC\n            # assumes the stack is suitably aligned. Older Linux code or other\n            # OSs don't guarantee this on 32-bit, so externally-callable\n            # functions need to ensure an aligned stack.\n            set(EXPORT_DECL \"${EXPORT_DECL}__attribute__((force_align_arg_pointer))\")\n            set(ALSOFT_FORCE_ALIGN \"__attribute__((force_align_arg_pointer))\")\n        endif()\n    endif()\nendif()\n\nif(HAVE_SSE2)\n    set(OLD_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS})\n    foreach(flag_var ${SSE_FLAGS})\n        set(CMAKE_REQUIRED_FLAGS \"${CMAKE_REQUIRED_FLAGS} ${flag_var}\")\n    endforeach()\n\n    check_c_source_compiles(\"#include <emmintrin.h>\n        int main() {_mm_pause(); return 0;}\" HAVE_SSE_INTRINSICS)\n\n    set(CMAKE_REQUIRED_FLAGS ${OLD_REQUIRED_FLAGS})\nendif()\n\n\ncheck_include_file(cpuid.h HAVE_CPUID_H)\ncheck_include_file(intrin.h HAVE_INTRIN_H)\ncheck_include_file(guiddef.h HAVE_GUIDDEF_H)\n\n# Some systems need libm for some math functions to work\nset(MATH_LIB )\ncheck_library_exists(m pow \"\" HAVE_LIBM)\nif(HAVE_LIBM)\n    set(MATH_LIB ${MATH_LIB} m)\n    set(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} m)\nendif()\n\n# Some systems need to link with -lrt for clock_gettime as used by the common\n# eaxmple functions.\nset(RT_LIB )\ncheck_library_exists(rt clock_gettime \"\" HAVE_LIBRT)\nif(HAVE_LIBRT)\n    set(RT_LIB rt)\nendif()\n\n# Check for the dlopen API (for dynamically loading backend libs)\nif(ALSOFT_DLOPEN)\n    check_include_file(dlfcn.h HAVE_DLFCN_H)\n    check_library_exists(dl dlopen \"\" HAVE_LIBDL)\n    if(HAVE_LIBDL)\n        set(EXTRA_LIBS dl ${EXTRA_LIBS})\n        set(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} dl)\n    endif()\nendif()\n\n# Check for a cpuid intrinsic\nif(HAVE_CPUID_H)\n    check_c_source_compiles(\"#include <cpuid.h>\n        int main()\n        {\n            unsigned int eax, ebx, ecx, edx;\n            return __get_cpuid(0, &eax, &ebx, &ecx, &edx);\n        }\" HAVE_GCC_GET_CPUID)\nendif()\nif(HAVE_INTRIN_H)\n    check_c_source_compiles(\"#include <intrin.h>\n        int main()\n        {\n            int regs[4];\n            __cpuid(regs, 0);\n            return regs[0];\n        }\" HAVE_CPUID_INTRINSIC)\nendif()\n\ncheck_symbol_exists(proc_pidpath     libproc.h HAVE_PROC_PIDPATH)\n\nif(NOT WIN32)\n    # We need pthreads outside of Windows, for semaphores. It's also used to\n    # set the priority and name of threads, when possible.\n    check_include_file(pthread.h HAVE_PTHREAD_H)\n    if(NOT HAVE_PTHREAD_H)\n        message(FATAL_ERROR \"PThreads is required for non-Windows builds!\")\n    endif()\n\n    check_c_compiler_flag(-pthread HAVE_PTHREAD)\n    if(HAVE_PTHREAD)\n        set(CMAKE_REQUIRED_FLAGS \"${CMAKE_REQUIRED_FLAGS} -pthread\")\n        set(C_FLAGS ${C_FLAGS} -pthread)\n        set(LINKER_FLAGS ${LINKER_FLAGS} -pthread)\n    endif()\n\n    check_symbol_exists(pthread_setschedparam pthread.h HAVE_PTHREAD_SETSCHEDPARAM)\n\n    # Some systems need pthread_np.h to get pthread_setname_np\n    check_include_files(\"pthread.h;pthread_np.h\" HAVE_PTHREAD_NP_H)\n    if(HAVE_PTHREAD_NP_H)\n        check_symbol_exists(pthread_setname_np \"pthread.h;pthread_np.h\" HAVE_PTHREAD_SETNAME_NP)\n        if(NOT HAVE_PTHREAD_SETNAME_NP)\n            check_symbol_exists(pthread_set_name_np \"pthread.h;pthread_np.h\" HAVE_PTHREAD_SET_NAME_NP)\n        endif()\n    else()\n        check_symbol_exists(pthread_setname_np pthread.h HAVE_PTHREAD_SETNAME_NP)\n        if(NOT HAVE_PTHREAD_SETNAME_NP)\n            check_symbol_exists(pthread_set_name_np pthread.h HAVE_PTHREAD_SET_NAME_NP)\n        endif()\n    endif()\nendif()\n\n\n# Common sources used by both the OpenAL implementation library, the OpenAL\n# router, and certain tools and examples.\nset(COMMON_OBJS\n    common/alassert.cpp\n    common/alassert.h\n    common/albit.h\n    common/alcomplex.cpp\n    common/alcomplex.h\n    common/almalloc.h\n    common/alnumbers.h\n    common/alnumeric.h\n    common/alsem.cpp\n    common/alsem.h\n    common/alspan.h\n    common/alstring.cpp\n    common/alstring.h\n    common/althrd_setname.cpp\n    common/althrd_setname.h\n    common/althreads.h\n    common/altraits.h\n    common/atomic.h\n    common/comptr.h\n    common/dynload.cpp\n    common/dynload.h\n    common/filesystem.cpp\n    common/filesystem.h\n    common/flexarray.h\n    common/intrusive_ptr.h\n    common/opthelpers.h\n    common/pffft.cpp\n    common/pffft.h\n    common/phase_shifter.h\n    common/polyphase_resampler.cpp\n    common/polyphase_resampler.h\n    common/pragmadefs.h\n    common/ringbuffer.cpp\n    common/ringbuffer.h\n    common/strutils.cpp\n    common/strutils.h\n    common/vecmat.h\n    common/vector.h)\n\n# Core library routines\nset(CORE_OBJS\n    core/ambdec.cpp\n    core/ambdec.h\n    core/ambidefs.cpp\n    core/ambidefs.h\n    core/async_event.h\n    core/bformatdec.cpp\n    core/bformatdec.h\n    core/bs2b.cpp\n    core/bs2b.h\n    core/bsinc_defs.h\n    core/bsinc_tables.cpp\n    core/bsinc_tables.h\n    core/bufferline.h\n    core/buffer_storage.cpp\n    core/buffer_storage.h\n    core/context.cpp\n    core/context.h\n    core/converter.cpp\n    core/converter.h\n    core/cpu_caps.cpp\n    core/cpu_caps.h\n    core/cubic_defs.h\n    core/cubic_tables.cpp\n    core/cubic_tables.h\n    core/devformat.cpp\n    core/devformat.h\n    core/device.cpp\n    core/device.h\n    core/effects/base.h\n    core/effectslot.cpp\n    core/effectslot.h\n    core/except.cpp\n    core/except.h\n    core/filters/biquad.h\n    core/filters/biquad.cpp\n    core/filters/nfc.cpp\n    core/filters/nfc.h\n    core/filters/splitter.cpp\n    core/filters/splitter.h\n    core/fmt_traits.h\n    core/fpu_ctrl.cpp\n    core/fpu_ctrl.h\n    core/front_stablizer.h\n    core/helpers.cpp\n    core/helpers.h\n    core/hrtf.cpp\n    core/hrtf.h\n    core/logging.cpp\n    core/logging.h\n    core/mastering.cpp\n    core/mastering.h\n    core/mixer.cpp\n    core/mixer.h\n    core/resampler_limits.h\n    core/storage_formats.cpp\n    core/storage_formats.h\n    core/uhjfilter.cpp\n    core/uhjfilter.h\n    core/uiddefs.cpp\n    core/voice.cpp\n    core/voice.h\n    core/voice_change.h)\n\nset(HAVE_RTKIT 0)\nif(NOT WIN32)\n    option(ALSOFT_RTKIT \"Enable RTKit support\" ON)\n    option(ALSOFT_REQUIRE_RTKIT \"Require RTKit/D-Bus support\" FALSE)\n    if(ALSOFT_RTKIT)\n        find_package(DBus1 QUIET)\n        if(NOT DBus1_FOUND AND PkgConfig_FOUND)\n            pkg_check_modules(DBUS dbus-1)\n        endif()\n        if(DBus1_FOUND OR DBUS_FOUND)\n            set(HAVE_RTKIT 1)\n            set(CORE_OBJS ${CORE_OBJS} core/dbus_wrap.cpp core/dbus_wrap.h\n                core/rtkit.cpp core/rtkit.h)\n            if(NOT DBus1_FOUND)\n                set(INC_PATHS ${INC_PATHS} ${DBUS_INCLUDE_DIRS})\n                set(CPP_DEFS ${CPP_DEFS} ${DBUS_CFLAGS_OTHER})\n                if(NOT HAVE_DLFCN_H)\n                    set(EXTRA_LIBS ${EXTRA_LIBS} ${DBUS_LINK_LIBRARIES})\n                endif()\n            elseif(HAVE_DLFCN_H)\n                set(INC_PATHS ${INC_PATHS} ${DBus1_INCLUDE_DIRS})\n                set(CPP_DEFS ${CPP_DEFS} ${DBus1_DEFINITIONS})\n            else()\n                set(EXTRA_LIBS ${EXTRA_LIBS} ${DBus1_LIBRARIES})\n            endif()\n        else()\n            set(MISSING_VARS \"\")\n            if(NOT DBus1_INCLUDE_DIRS)\n                set(MISSING_VARS \"${MISSING_VARS} DBus1_INCLUDE_DIRS\")\n            endif()\n            if(NOT DBus1_LIBRARIES)\n                set(MISSING_VARS \"${MISSING_VARS} DBus1_LIBRARIES\")\n            endif()\n            message(STATUS \"Could NOT find DBus1 (missing:${MISSING_VARS})\")\n            unset(MISSING_VARS)\n        endif()\n    endif()\nendif()\nif(ALSOFT_REQUIRE_RTKIT AND NOT HAVE_RTKIT)\n    message(FATAL_ERROR \"Failed to enable required RTKit support\")\nendif()\n\n# Default mixers, always available\nset(CORE_OBJS ${CORE_OBJS}\n    core/mixer/defs.h\n    core/mixer/hrtfbase.h\n    core/mixer/hrtfdefs.h\n    core/mixer/mixer_c.cpp)\n\n# AL and related routines\nset(OPENAL_OBJS\n    al/auxeffectslot.cpp\n    al/auxeffectslot.h\n    al/buffer.cpp\n    al/buffer.h\n    al/debug.cpp\n    al/debug.h\n    al/direct_defs.h\n    al/effect.cpp\n    al/effect.h\n    al/effects/autowah.cpp\n    al/effects/chorus.cpp\n    al/effects/compressor.cpp\n    al/effects/convolution.cpp\n    al/effects/dedicated.cpp\n    al/effects/distortion.cpp\n    al/effects/echo.cpp\n    al/effects/effects.cpp\n    al/effects/effects.h\n    al/effects/equalizer.cpp\n    al/effects/fshifter.cpp\n    al/effects/modulator.cpp\n    al/effects/null.cpp\n    al/effects/pshifter.cpp\n    al/effects/reverb.cpp\n    al/effects/vmorpher.cpp\n    al/error.cpp\n    al/event.cpp\n    al/event.h\n    al/extension.cpp\n    al/filter.cpp\n    al/filter.h\n    al/listener.cpp\n    al/listener.h\n    al/source.cpp\n    al/source.h\n    al/state.cpp)\n\n# ALC and related routines\nset(ALC_OBJS\n    alc/alc.cpp\n    alc/alu.cpp\n    alc/alu.h\n    alc/alconfig.cpp\n    alc/alconfig.h\n    alc/context.cpp\n    alc/context.h\n    alc/device.cpp\n    alc/device.h\n    alc/effects/base.h\n    alc/effects/autowah.cpp\n    alc/effects/chorus.cpp\n    alc/effects/compressor.cpp\n    alc/effects/convolution.cpp\n    alc/effects/dedicated.cpp\n    alc/effects/distortion.cpp\n    alc/effects/echo.cpp\n    alc/effects/equalizer.cpp\n    alc/effects/fshifter.cpp\n    alc/effects/modulator.cpp\n    alc/effects/null.cpp\n    alc/effects/pshifter.cpp\n    alc/effects/reverb.cpp\n    alc/effects/vmorpher.cpp\n    alc/events.cpp\n    alc/events.h\n    alc/export_list.h\n    alc/inprogext.h\n    alc/panning.cpp)\n\nif(ALSOFT_EAX)\n    set(OPENAL_OBJS\n        ${OPENAL_OBJS}\n        al/eax/api.cpp\n        al/eax/api.h\n        al/eax/call.cpp\n        al/eax/call.h\n        al/eax/effect.h\n        al/eax/exception.cpp\n        al/eax/exception.h\n        al/eax/fx_slot_index.cpp\n        al/eax/fx_slot_index.h\n        al/eax/fx_slots.cpp\n        al/eax/fx_slots.h\n        al/eax/globals.h\n        al/eax/utils.cpp\n        al/eax/utils.h\n        al/eax/x_ram.h\n    )\nendif()\n\n# Include SIMD mixers\nset(CPU_EXTS \"Default\")\nif(HAVE_SSE)\n    set(CORE_OBJS  ${CORE_OBJS} core/mixer/mixer_sse.cpp)\n    set(CPU_EXTS \"${CPU_EXTS}, SSE\")\nendif()\nif(HAVE_SSE2)\n    set(CORE_OBJS  ${CORE_OBJS} core/mixer/mixer_sse2.cpp)\n    set(CPU_EXTS \"${CPU_EXTS}, SSE2\")\nendif()\nif(HAVE_SSE3)\n    set(CORE_OBJS  ${CORE_OBJS} core/mixer/mixer_sse3.cpp)\n    set(CPU_EXTS \"${CPU_EXTS}, SSE3\")\nendif()\nif(HAVE_SSE4_1)\n    set(CORE_OBJS  ${CORE_OBJS} core/mixer/mixer_sse41.cpp)\n    set(CPU_EXTS \"${CPU_EXTS}, SSE4.1\")\nendif()\nif(HAVE_NEON)\n    set(CORE_OBJS  ${CORE_OBJS} core/mixer/mixer_neon.cpp)\n    set(CPU_EXTS \"${CPU_EXTS}, Neon\")\nendif()\n\n\nset(HAVE_ALSA       0)\nset(HAVE_OSS        0)\nset(HAVE_PIPEWIRE   0)\nset(HAVE_SOLARIS    0)\nset(HAVE_SNDIO      0)\nset(HAVE_DSOUND     0)\nset(HAVE_WASAPI     0)\nset(HAVE_WINMM      0)\nset(HAVE_PORTAUDIO  0)\nset(HAVE_PULSEAUDIO 0)\nset(HAVE_COREAUDIO  0)\nset(HAVE_OPENSL     0)\nset(HAVE_OBOE       0)\nset(HAVE_OTHERIO    0)\nset(HAVE_WAVE       0)\nset(HAVE_SDL2       0)\nset(HAVE_SDL3       0)\n\nif(WIN32 OR HAVE_DLFCN_H)\n    set(IS_LINKED \"\")\n    macro(ADD_BACKEND_LIBS _LIBS)\n    endmacro()\nelse()\n    set(IS_LINKED \" (linked)\")\n    macro(ADD_BACKEND_LIBS _LIBS)\n        set(EXTRA_LIBS ${_LIBS} ${EXTRA_LIBS})\n    endmacro()\nendif()\n\nset(BACKENDS \"\")\nset(ALC_OBJS  ${ALC_OBJS}\n    alc/backends/base.cpp\n    alc/backends/base.h\n    # Default backends, always available\n    alc/backends/loopback.cpp\n    alc/backends/loopback.h\n    alc/backends/null.cpp\n    alc/backends/null.h\n)\n\n# Check PipeWire backend\noption(ALSOFT_BACKEND_PIPEWIRE \"Enable PipeWire backend\" ON)\noption(ALSOFT_REQUIRE_PIPEWIRE \"Require PipeWire backend\" OFF)\nif(ALSOFT_BACKEND_PIPEWIRE AND PkgConfig_FOUND)\n    pkg_check_modules(PIPEWIRE libpipewire-0.3>=0.3.23)\n    if(PIPEWIRE_FOUND)\n        set(HAVE_PIPEWIRE 1)\n        set(BACKENDS  \"${BACKENDS} PipeWire${IS_LINKED},\")\n        set(ALC_OBJS  ${ALC_OBJS} alc/backends/pipewire.cpp alc/backends/pipewire.h)\n        add_backend_libs(${PIPEWIRE_LIBRARIES})\n        set(INC_PATHS ${INC_PATHS} ${PIPEWIRE_INCLUDE_DIRS})\n    endif()\nendif()\nif(ALSOFT_REQUIRE_PIPEWIRE AND NOT HAVE_PIPEWIRE)\n    message(FATAL_ERROR \"Failed to enable required PipeWire backend\")\nendif()\n\n# Check PulseAudio backend\noption(ALSOFT_BACKEND_PULSEAUDIO \"Enable PulseAudio backend\" ON)\noption(ALSOFT_REQUIRE_PULSEAUDIO \"Require PulseAudio backend\" OFF)\nif(ALSOFT_BACKEND_PULSEAUDIO)\n    find_package(PulseAudio)\n    if(PULSEAUDIO_FOUND)\n        set(HAVE_PULSEAUDIO 1)\n        set(BACKENDS  \"${BACKENDS} PulseAudio${IS_LINKED},\")\n        set(ALC_OBJS  ${ALC_OBJS} alc/backends/pulseaudio.cpp alc/backends/pulseaudio.h)\n        add_backend_libs(${PULSEAUDIO_LIBRARY})\n        set(INC_PATHS ${INC_PATHS} ${PULSEAUDIO_INCLUDE_DIR})\n    endif()\nendif()\nif(ALSOFT_REQUIRE_PULSEAUDIO AND NOT HAVE_PULSEAUDIO)\n    message(FATAL_ERROR \"Failed to enable required PulseAudio backend\")\nendif()\n\nif(NOT WIN32)\n    # Check ALSA backend\n    option(ALSOFT_BACKEND_ALSA \"Enable ALSA backend\" ON)\n    option(ALSOFT_REQUIRE_ALSA \"Require ALSA backend\" OFF)\n    if(ALSOFT_BACKEND_ALSA)\n        find_package(ALSA)\n        if(ALSA_FOUND)\n            set(HAVE_ALSA 1)\n            set(BACKENDS  \"${BACKENDS} ALSA${IS_LINKED},\")\n            set(ALC_OBJS  ${ALC_OBJS} alc/backends/alsa.cpp alc/backends/alsa.h)\n            add_backend_libs(${ALSA_LIBRARIES})\n            set(INC_PATHS ${INC_PATHS} ${ALSA_INCLUDE_DIRS})\n        endif()\n    endif()\n\n    # Check OSS backend\n    option(ALSOFT_BACKEND_OSS \"Enable OSS backend\" ON)\n    option(ALSOFT_REQUIRE_OSS \"Require OSS backend\" OFF)\n    if(ALSOFT_BACKEND_OSS)\n        find_package(OSS)\n        if(OSS_FOUND)\n            set(HAVE_OSS 1)\n            set(BACKENDS  \"${BACKENDS} OSS,\")\n            set(ALC_OBJS  ${ALC_OBJS} alc/backends/oss.cpp alc/backends/oss.h)\n            if(OSS_LIBRARIES)\n                set(EXTRA_LIBS ${OSS_LIBRARIES} ${EXTRA_LIBS})\n            endif()\n            set(INC_PATHS ${INC_PATHS} ${OSS_INCLUDE_DIRS})\n        endif()\n    endif()\n\n    # Check Solaris backend\n    option(ALSOFT_BACKEND_SOLARIS \"Enable Solaris backend\" ON)\n    option(ALSOFT_REQUIRE_SOLARIS \"Require Solaris backend\" OFF)\n    if(ALSOFT_BACKEND_SOLARIS)\n        find_package(AudioIO)\n        if(AUDIOIO_FOUND)\n            set(HAVE_SOLARIS 1)\n            set(BACKENDS  \"${BACKENDS} Solaris,\")\n            set(ALC_OBJS  ${ALC_OBJS} alc/backends/solaris.cpp alc/backends/solaris.h)\n            set(INC_PATHS ${INC_PATHS} ${AUDIOIO_INCLUDE_DIRS})\n        endif()\n    endif()\n\n    # Check SndIO backend (disabled by default on non-BSDs)\n    if(BSD)\n        option(ALSOFT_BACKEND_SNDIO \"Enable SndIO backend\" ON)\n    else()\n        option(ALSOFT_BACKEND_SNDIO \"Enable SndIO backend\" OFF)\n    endif()\n    option(ALSOFT_REQUIRE_SNDIO \"Require SndIO backend\" OFF)\n    if(ALSOFT_BACKEND_SNDIO)\n        find_package(SndIO)\n        if(SNDIO_FOUND)\n            set(HAVE_SNDIO 1)\n            set(BACKENDS  \"${BACKENDS} SndIO (linked),\")\n            set(ALC_OBJS  ${ALC_OBJS} alc/backends/sndio.cpp alc/backends/sndio.hpp)\n            set(EXTRA_LIBS ${SNDIO_LIBRARIES} ${EXTRA_LIBS})\n            set(INC_PATHS ${INC_PATHS} ${SNDIO_INCLUDE_DIRS})\n        endif()\n    endif()\nendif()\nif(ALSOFT_REQUIRE_ALSA AND NOT HAVE_ALSA)\n    message(FATAL_ERROR \"Failed to enable required ALSA backend\")\nendif()\nif(ALSOFT_REQUIRE_OSS AND NOT HAVE_OSS)\n    message(FATAL_ERROR \"Failed to enable required OSS backend\")\nendif()\nif(ALSOFT_REQUIRE_SOLARIS AND NOT HAVE_SOLARIS)\n    message(FATAL_ERROR \"Failed to enable required Solaris backend\")\nendif()\nif(ALSOFT_REQUIRE_SNDIO AND NOT HAVE_SNDIO)\n    message(FATAL_ERROR \"Failed to enable required SndIO backend\")\nendif()\n\n# Check Windows-only backends\nif(WIN32)\n    if (NOT ALSOFT_UWP)\n        # Check MMSystem backend\n        option(ALSOFT_BACKEND_WINMM \"Enable Windows Multimedia backend\" ON)\n        option(ALSOFT_REQUIRE_WINMM \"Require Windows Multimedia backend\" OFF)\n        if(ALSOFT_BACKEND_WINMM)\n            set(HAVE_WINMM 1)\n            set(BACKENDS \"${BACKENDS} WinMM,\")\n            set(ALC_OBJS ${ALC_OBJS} alc/backends/winmm.cpp alc/backends/winmm.h)\n            # There doesn't seem to be good way to search for winmm.lib for MSVC.\n            # find_library doesn't find it without being told to look in a specific\n            # place in the WindowsSDK, but it links anyway. If there ends up being\n            # Windows targets without this, another means to detect it is needed.\n            set(EXTRA_LIBS winmm ${EXTRA_LIBS})\n        endif()\n\n        # Check DSound backend\n        option(ALSOFT_BACKEND_DSOUND \"Enable DirectSound backend\" ON)\n        option(ALSOFT_REQUIRE_DSOUND \"Require DirectSound backend\" OFF)\n        if(ALSOFT_BACKEND_DSOUND)\n            check_include_file(dsound.h HAVE_DSOUND_H)\n            if(DXSDK_DIR)\n                find_path(DSOUND_INCLUDE_DIR NAMES \"dsound.h\"\n                    PATHS \"${DXSDK_DIR}\" PATH_SUFFIXES include\n                    DOC \"The DirectSound include directory\")\n            endif()\n            if(HAVE_DSOUND_H OR DSOUND_INCLUDE_DIR)\n                set(HAVE_DSOUND 1)\n                set(BACKENDS \"${BACKENDS} DirectSound,\")\n                set(ALC_OBJS ${ALC_OBJS} alc/backends/dsound.cpp alc/backends/dsound.h)\n\n                if(NOT HAVE_DSOUND_H)\n                    set(INC_PATHS ${INC_PATHS} ${DSOUND_INCLUDE_DIR})\n                endif()\n            endif()\n        endif()\n    endif()\n\n    # Check for WASAPI backend\n    option(ALSOFT_BACKEND_WASAPI \"Enable WASAPI backend\" ON)\n    option(ALSOFT_REQUIRE_WASAPI \"Require WASAPI backend\" OFF)\n    if(ALSOFT_BACKEND_WASAPI)\n        check_include_file(mmdeviceapi.h HAVE_MMDEVICEAPI_H)\n        if(HAVE_MMDEVICEAPI_H)\n            set(HAVE_WASAPI 1)\n            set(BACKENDS  \"${BACKENDS} WASAPI,\")\n            set(ALC_OBJS  ${ALC_OBJS} alc/backends/wasapi.cpp alc/backends/wasapi.h)\n\n            if(NOT ALSOFT_UWP)\n                set(EXTRA_LIBS avrt ${EXTRA_LIBS})\n            endif()\n        endif()\n    endif()\n\n    option(ALSOFT_BACKEND_OTHERIO \"Enable OtherIO backend\" OFF)\n    option(ALSOFT_REQUIRE_OTHERIO \"Require OtherIO backend\" OFF)\n    if(ALSOFT_BACKEND_OTHERIO)\n        set(HAVE_OTHERIO 1)\n        set(BACKENDS  \"${BACKENDS} OtherIO,\")\n        set(ALC_OBJS  ${ALC_OBJS} alc/backends/otherio.cpp alc/backends/otherio.h)\n    endif()\nendif()\nif(ALSOFT_REQUIRE_WINMM AND NOT HAVE_WINMM)\n    message(FATAL_ERROR \"Failed to enable required WinMM backend\")\nendif()\nif(ALSOFT_REQUIRE_DSOUND AND NOT HAVE_DSOUND)\n    message(FATAL_ERROR \"Failed to enable required DSound backend\")\nendif()\nif(ALSOFT_REQUIRE_WASAPI AND NOT HAVE_WASAPI)\n    message(FATAL_ERROR \"Failed to enable required WASAPI backend\")\nendif()\nif(ALSOFT_REQUIRE_OTHERIO AND NOT HAVE_OTHERIO)\n    message(FATAL_ERROR \"Failed to enable required OtherIO backend\")\nendif()\n\n# Check JACK backend\noption(ALSOFT_BACKEND_JACK \"Enable JACK backend\" ON)\noption(ALSOFT_REQUIRE_JACK \"Require JACK backend\" OFF)\nif(ALSOFT_BACKEND_JACK)\n    find_package(JACK)\n    if(JACK_FOUND)\n        set(HAVE_JACK 1)\n        set(BACKENDS  \"${BACKENDS} JACK${IS_LINKED},\")\n        set(ALC_OBJS  ${ALC_OBJS} alc/backends/jack.cpp alc/backends/jack.h)\n        add_backend_libs(${JACK_LIBRARIES})\n        set(INC_PATHS ${INC_PATHS} ${JACK_INCLUDE_DIRS})\n    endif()\nendif()\nif(ALSOFT_REQUIRE_JACK AND NOT HAVE_JACK)\n    message(FATAL_ERROR \"Failed to enable required JACK backend\")\nendif()\n\n# Check CoreAudio backend\noption(ALSOFT_BACKEND_COREAUDIO \"Enable CoreAudio backend\" ON)\noption(ALSOFT_REQUIRE_COREAUDIO \"Require CoreAudio backend\" OFF)\nif(ALSOFT_BACKEND_COREAUDIO)\n    find_library(COREAUDIO_FRAMEWORK NAMES CoreAudio)\n    find_path(AUDIOUNIT_INCLUDE_DIR NAMES AudioUnit/AudioUnit.h)\n    if(COREAUDIO_FRAMEWORK AND AUDIOUNIT_INCLUDE_DIR)\n        set(HAVE_COREAUDIO 1)\n        set(ALC_OBJS  ${ALC_OBJS} alc/backends/coreaudio.cpp alc/backends/coreaudio.h)\n        set(BACKENDS  \"${BACKENDS} CoreAudio,\")\n\n        set(EXTRA_LIBS -Wl,-framework,CoreAudio ${EXTRA_LIBS})\n        if(CMAKE_SYSTEM_NAME MATCHES \"^(iOS|tvOS)$\")\n            find_library(COREFOUNDATION_FRAMEWORK NAMES CoreFoundation)\n            if(COREFOUNDATION_FRAMEWORK)\n                set(EXTRA_LIBS -Wl,-framework,CoreFoundation ${EXTRA_LIBS})\n            endif()\n        else()\n            set(EXTRA_LIBS -Wl,-framework,AudioUnit,-framework,ApplicationServices ${EXTRA_LIBS})\n        endif()\n\n        # Some versions of OSX may need the AudioToolbox framework. Add it if\n        # it's found.\n        find_library(AUDIOTOOLBOX_LIBRARY NAMES AudioToolbox)\n        if(AUDIOTOOLBOX_LIBRARY)\n            set(EXTRA_LIBS -Wl,-framework,AudioToolbox ${EXTRA_LIBS})\n        endif()\n\n        set(INC_PATHS ${INC_PATHS} ${AUDIOUNIT_INCLUDE_DIR})\n    endif()\nendif()\nif(ALSOFT_REQUIRE_COREAUDIO AND NOT HAVE_COREAUDIO)\n    message(FATAL_ERROR \"Failed to enable required CoreAudio backend\")\nendif()\n\n# Check for Oboe (Android) backend\noption(ALSOFT_BACKEND_OBOE \"Enable Oboe backend\" ON)\noption(ALSOFT_REQUIRE_OBOE \"Require Oboe backend\" OFF)\nif(ALSOFT_BACKEND_OBOE)\n    set(OBOE_TARGET )\n    if(ANDROID)\n        set(OBOE_SOURCE \"\" CACHE STRING \"Source directory for Oboe.\")\n        if(OBOE_SOURCE)\n            add_subdirectory(${OBOE_SOURCE} ./oboe EXCLUDE_FROM_ALL)\n            set(OBOE_TARGET oboe)\n        else()\n            find_package(oboe CONFIG)\n            if(NOT TARGET oboe::oboe)\n                find_package(Oboe)\n            endif()\n            if(TARGET oboe::oboe)\n                set(OBOE_TARGET \"oboe::oboe\")\n            endif()\n        endif()\n    endif()\n\n    if(OBOE_TARGET)\n        set(HAVE_OBOE 1)\n        set(ALC_OBJS  ${ALC_OBJS} alc/backends/oboe.cpp alc/backends/oboe.h)\n        set(BACKENDS  \"${BACKENDS} Oboe,\")\n        set(EXTRA_LIBS ${OBOE_TARGET} ${EXTRA_LIBS})\n    endif()\nendif()\nif(ALSOFT_REQUIRE_OBOE AND NOT HAVE_OBOE)\n    message(FATAL_ERROR \"Failed to enable required Oboe backend\")\nendif()\n\n# Check for OpenSL (Android) backend\noption(ALSOFT_BACKEND_OPENSL \"Enable OpenSL backend\" ON)\noption(ALSOFT_REQUIRE_OPENSL \"Require OpenSL backend\" OFF)\nif(ALSOFT_BACKEND_OPENSL)\n    find_package(OpenSL)\n    if(OPENSL_FOUND)\n        set(HAVE_OPENSL 1)\n        set(ALC_OBJS  ${ALC_OBJS} alc/backends/opensl.cpp alc/backends/opensl.h)\n        set(BACKENDS  \"${BACKENDS} OpenSL${IS_LINKED},\")\n        add_backend_libs(${OPENSL_LIBRARIES})\n        set(INC_PATHS ${INC_PATHS} ${OPENSL_INCLUDE_DIRS})\n    endif()\nendif()\nif(ALSOFT_REQUIRE_OPENSL AND NOT HAVE_OPENSL)\n    message(FATAL_ERROR \"Failed to enable required OpenSL backend\")\nendif()\n\n# Check PortAudio backend\noption(ALSOFT_BACKEND_PORTAUDIO \"Enable PortAudio backend\" ON)\noption(ALSOFT_REQUIRE_PORTAUDIO \"Require PortAudio backend\" OFF)\nif(ALSOFT_BACKEND_PORTAUDIO)\n    find_package(PortAudio)\n    if(PORTAUDIO_FOUND)\n        set(HAVE_PORTAUDIO 1)\n        set(BACKENDS  \"${BACKENDS} PortAudio${IS_LINKED},\")\n        set(ALC_OBJS  ${ALC_OBJS} alc/backends/portaudio.cpp alc/backends/portaudio.hpp)\n        add_backend_libs(${PORTAUDIO_LIBRARIES})\n        set(INC_PATHS ${INC_PATHS} ${PORTAUDIO_INCLUDE_DIRS})\n    endif()\nendif()\nif(ALSOFT_REQUIRE_PORTAUDIO AND NOT HAVE_PORTAUDIO)\n    message(FATAL_ERROR \"Failed to enable required PortAudio backend\")\nendif()\n\n# Check for SDL2 or SDL3 backend\n# Off by default, since it adds a runtime dependency. Additionally, both SDL2\n# and SDL3 can't be enabled simultaneously.\noption(ALSOFT_BACKEND_SDL3 \"Enable SDL3 backend\" OFF)\noption(ALSOFT_REQUIRE_SDL3 \"Require SDL3 backend\" OFF)\nif(ALSOFT_BACKEND_SDL3)\n    if(SDL3_FOUND)\n        set(HAVE_SDL3 1)\n        set(ALC_OBJS  ${ALC_OBJS} alc/backends/sdl3.cpp alc/backends/sdl3.h)\n        set(BACKENDS  \"${BACKENDS} SDL3,\")\n        set(EXTRA_LIBS ${EXTRA_LIBS} SDL3::SDL3)\n    else()\n        message(STATUS \"Could NOT find SDL3\")\n    endif()\nendif()\nif(ALSOFT_REQUIRE_SDL3 AND NOT HAVE_SDL3)\n    message(FATAL_ERROR \"Failed to enable required SDL3 backend\")\nendif()\n\noption(ALSOFT_BACKEND_SDL2 \"Enable SDL2 backend\" OFF)\noption(ALSOFT_REQUIRE_SDL2 \"Require SDL2 backend\" OFF)\nif(ALSOFT_BACKEND_SDL2 AND NOT HAVE_SDL3)\n    find_package(SDL2)\n    if(SDL2_FOUND)\n        set(HAVE_SDL2 1)\n        set(ALC_OBJS  ${ALC_OBJS} alc/backends/sdl2.cpp alc/backends/sdl2.h)\n        set(BACKENDS  \"${BACKENDS} SDL2,\")\n        set(EXTRA_LIBS ${EXTRA_LIBS} SDL2::SDL2)\n    else()\n        message(STATUS \"Could NOT find SDL2\")\n    endif()\nendif()\nif(ALSOFT_REQUIRE_SDL2 AND NOT HAVE_SDL2)\n    message(FATAL_ERROR \"Failed to enable required SDL2 backend\")\nendif()\n\n# Optionally enable the Wave Writer backend\noption(ALSOFT_BACKEND_WAVE \"Enable Wave Writer backend\" ON)\nif(ALSOFT_BACKEND_WAVE)\n    set(HAVE_WAVE 1)\n    set(ALC_OBJS  ${ALC_OBJS} alc/backends/wave.cpp alc/backends/wave.h)\n    set(BACKENDS  \"${BACKENDS} WaveFile,\")\nendif()\n\n# This is always available\nset(BACKENDS  \"${BACKENDS} Null\")\n\n\nfind_package(Git)\nif(ALSOFT_UPDATE_BUILD_VERSION AND GIT_FOUND AND EXISTS \"${OpenAL_SOURCE_DIR}/.git\")\n    set(GIT_DIR \"${OpenAL_SOURCE_DIR}/.git\")\n\n    # Check if this is a submodule, if it is then find the .git directory\n    if(NOT IS_DIRECTORY \"${OpenAL_SOURCE_DIR}/.git\")\n        file(READ ${GIT_DIR} submodule)\n        string(REGEX REPLACE \"gitdir: (.*)$\" \"\\\\1\" GIT_DIR_RELATIVE ${submodule})\n        string(STRIP ${GIT_DIR_RELATIVE} GIT_DIR_RELATIVE)\n        get_filename_component(SUBMODULE_DIR ${GIT_DIR} PATH)\n        get_filename_component(GIT_DIR ${SUBMODULE_DIR}/${GIT_DIR_RELATIVE} ABSOLUTE)\n    endif()\n\n    # Get the current working branch and its latest abbreviated commit hash\n    add_custom_command(OUTPUT \"${OpenAL_BINARY_DIR}/version_witness.txt\"\n        BYPRODUCTS \"${OpenAL_BINARY_DIR}/version.h\"\n        COMMAND ${CMAKE_COMMAND} -D GIT_EXECUTABLE=${GIT_EXECUTABLE} -D LIB_VERSION=${LIB_VERSION}\n            -D LIB_VERSION_NUM=${LIB_VERSION_NUM} -D SRC=${OpenAL_SOURCE_DIR}/version.h.in\n            -D DST=${OpenAL_BINARY_DIR}/version.h -P ${OpenAL_SOURCE_DIR}/version.cmake\n        COMMAND ${CMAKE_COMMAND} -E touch \"${OpenAL_BINARY_DIR}/version_witness.txt\"\n        WORKING_DIRECTORY \"${OpenAL_SOURCE_DIR}\"\n        MAIN_DEPENDENCY \"${OpenAL_SOURCE_DIR}/version.h.in\"\n        DEPENDS \"${GIT_DIR}/index\" \"${OpenAL_SOURCE_DIR}/version.cmake\"\n        VERBATIM\n    )\n\n    add_custom_target(alsoft.build_version DEPENDS \"${OpenAL_BINARY_DIR}/version_witness.txt\")\nelse()\n    set(GIT_BRANCH \"UNKNOWN\")\n    set(GIT_COMMIT_HASH \"unknown\")\n    configure_file(\n        \"${OpenAL_SOURCE_DIR}/version.h.in\"\n        \"${OpenAL_BINARY_DIR}/version.h\")\nendif()\n\n\noption(ALSOFT_EMBED_HRTF_DATA \"Embed the HRTF data files (increases library footprint)\" ON)\nif(ALSOFT_EMBED_HRTF_DATA)\n    macro(make_hrtf_header FILENAME VARNAME)\n        set(infile  \"${OpenAL_SOURCE_DIR}/hrtf/${FILENAME}\")\n        set(outfile  \"${OpenAL_BINARY_DIR}/${VARNAME}.txt\")\n\n        add_custom_command(OUTPUT \"${outfile}\"\n            COMMAND ${CMAKE_COMMAND} -D \"INPUT_FILE=${infile}\" -D \"OUTPUT_FILE=${outfile}\"\n                -P \"${CMAKE_MODULE_PATH}/bin2h.script.cmake\"\n            WORKING_DIRECTORY \"${OpenAL_SOURCE_DIR}\"\n            DEPENDS \"${infile}\" \"${CMAKE_MODULE_PATH}/bin2h.script.cmake\"\n            VERBATIM\n        )\n        set(ALC_OBJS  ${ALC_OBJS} \"${outfile}\")\n    endmacro()\n\n    make_hrtf_header(\"Default HRTF.mhr\" \"default_hrtf\")\nendif()\n\n\nif(ALSOFT_UTILS)\n    find_package(MySOFA)\n    if(NOT ALSOFT_NO_CONFIG_UTIL)\n        find_package(Qt5Widgets QUIET)\n        if(NOT Qt5Widgets_FOUND)\n            message(STATUS \"Could NOT find Qt5Widgets\")\n        endif()\n    endif()\nendif()\nif(ALSOFT_UTILS OR ALSOFT_EXAMPLES)\n    find_package(SndFile)\n    if(SDL3_FOUND)\n        find_package(FFmpeg COMPONENTS AVFORMAT AVCODEC AVUTIL SWSCALE SWRESAMPLE)\n    endif()\nendif()\n\nif(NOT WIN32)\n    set(LIBNAME \"openal\")\nelse()\n    set(LIBNAME \"OpenAL32\")\nendif()\n\n# Needed for openal.pc.in\nset(prefix ${CMAKE_INSTALL_PREFIX})\nset(exec_prefix \"\\${prefix}\")\nset(libdir \"${CMAKE_INSTALL_FULL_LIBDIR}\")\nset(bindir \"${CMAKE_INSTALL_FULL_BINDIR}\")\nset(includedir \"${CMAKE_INSTALL_FULL_INCLUDEDIR}\")\nset(PACKAGE_VERSION \"${LIB_VERSION}\")\nset(PKG_CONFIG_CFLAGS )\nset(PKG_CONFIG_PRIVATE_LIBS )\nif(LIBTYPE STREQUAL \"STATIC\")\n    set(PKG_CONFIG_CFLAGS -DAL_LIBTYPE_STATIC)\n    foreach(FLAG  ${LINKER_FLAGS} ${EXTRA_LIBS} ${MATH_LIB})\n        # If this is already a linker flag, or is a full path+file, add it\n        # as-is. If it's an SDL2 or SDL3 target, add the link flag for it.\n        # Otherwise, it's a name intended to be dressed as -lname.\n        if(FLAG MATCHES \"^-.*\" OR EXISTS \"${FLAG}\")\n            set(PKG_CONFIG_PRIVATE_LIBS \"${PKG_CONFIG_PRIVATE_LIBS} ${FLAG}\")\n        elseif(FLAG MATCHES \"^SDL2::SDL2\")\n            set(PKG_CONFIG_PRIVATE_LIBS \"${PKG_CONFIG_PRIVATE_LIBS} -lSDL2\")\n        elseif(FLAG MATCHES \"^SDL3::SDL3\")\n            set(PKG_CONFIG_PRIVATE_LIBS \"${PKG_CONFIG_PRIVATE_LIBS} -lSDL3\")\n        else()\n            set(PKG_CONFIG_PRIVATE_LIBS \"${PKG_CONFIG_PRIVATE_LIBS} -l${FLAG}\")\n        endif()\n    endforeach()\nendif()\n\n# End configuration\nconfigure_file(\n    \"${OpenAL_SOURCE_DIR}/config.h.in\"\n    \"${OpenAL_BINARY_DIR}/config.h\")\nconfigure_file(\n    \"${OpenAL_SOURCE_DIR}/config_backends.h.in\"\n    \"${OpenAL_BINARY_DIR}/config_backends.h\")\nconfigure_file(\n    \"${OpenAL_SOURCE_DIR}/config_simd.h.in\"\n    \"${OpenAL_BINARY_DIR}/config_simd.h\")\nconfigure_file(\n    \"${OpenAL_SOURCE_DIR}/openal.pc.in\"\n    \"${OpenAL_BINARY_DIR}/openal.pc\"\n    @ONLY)\n\n\nadd_library(alsoft.common STATIC EXCLUDE_FROM_ALL ${COMMON_OBJS})\ntarget_include_directories(alsoft.common PRIVATE ${OpenAL_SOURCE_DIR}/include\n    PUBLIC ${OpenAL_BINARY_DIR} ${OpenAL_SOURCE_DIR}/common)\ntarget_compile_definitions(alsoft.common PRIVATE ${CPP_DEFS})\ntarget_compile_options(alsoft.common PRIVATE ${C_FLAGS})\ntarget_link_libraries(alsoft.common PRIVATE alsoft::fmt)\nset_target_properties(alsoft.common PROPERTIES ${ALSOFT_STD_VERSION_PROPS}\n    POSITION_INDEPENDENT_CODE TRUE)\n\n\nunset(HAS_ROUTER)\nset(IMPL_TARGET OpenAL) # Either OpenAL or soft_oal.\n\n\nset(NEED_ANALYZE_SOURCE_FILES \"\")\nforeach(obj ${CORE_OBJS} ${OPENAL_OBJS} ${ALC_OBJS} ${COMMON_OBJS})\n    IF (NOT ${obj} MATCHES \"${CMAKE_BINARY_DIR}/default_hrtf.txt\")\n        list(APPEND NEED_ANALYZE_SOURCE_FILES \"${CMAKE_CURRENT_SOURCE_DIR}/${obj}\")\n    endif()\nendforeach()\nIF (ALSOFT_UTILS)\n    list(APPEND NEED_ANALYZE_SOURCE_FILES \"${CMAKE_SOURCE_DIR}/utils/openal-info.c\")\nendif()\nSET(CLANG_TIDY_EXECUTABLE \"clang-tidy\")\nif(DEFINED ENV{CLANG_TIDY_EXECUTABLE})\n    SET(CLANG_TIDY_EXECUTABLE $ENV{CLANG_TIDY_EXECUTABLE})\nendif()\nadd_custom_target(clang-tidy-check ${CLANG_TIDY_EXECUTABLE} -format-style=file -p ${CMAKE_BINARY_DIR}/compile_commands.json ${NEED_ANALYZE_SOURCE_FILES} DEPENDS ${NEED_ANALYZE_SOURCE_FILES})\n\n# Build main library\nif(LIBTYPE STREQUAL \"STATIC\")\n    add_library(${IMPL_TARGET} STATIC ${COMMON_OBJS} ${OPENAL_OBJS} ${ALC_OBJS} ${CORE_OBJS})\n    target_compile_definitions(${IMPL_TARGET} PUBLIC AL_LIBTYPE_STATIC)\n    target_link_libraries(${IMPL_TARGET} PRIVATE ${LINKER_FLAGS} ${EXTRA_LIBS} ${MATH_LIB}\n        $<BUILD_LOCAL_INTERFACE:alsoft::fmt>)\n\n    if(WIN32)\n        # This option is for static linking OpenAL Soft into another project\n        # that already defines the IDs. It is up to that project to ensure all\n        # required IDs are defined.\n        option(ALSOFT_NO_UID_DEFS \"Do not define GUIDs, IIDs, CLSIDs, or PropertyKeys\" OFF)\n        if(ALSOFT_NO_UID_DEFS)\n            target_compile_definitions(${IMPL_TARGET} PRIVATE AL_NO_UID_DEFS)\n        endif()\n    endif()\nelse()\n    set(RC_CONFIG resources/openal32.rc)\n    if(WIN32 AND ALSOFT_BUILD_ROUTER)\n        add_library(OpenAL SHARED\n            resources/router.rc\n            router/router.cpp\n            router/router.h\n            router/alc.cpp\n            router/al.cpp\n        )\n        target_compile_definitions(OpenAL\n            PRIVATE AL_BUILD_LIBRARY AL_ALEXT_PROTOTYPES \"ALC_API=${EXPORT_DECL}\"\n            \"AL_API=${EXPORT_DECL}\" ${CPP_DEFS})\n        target_compile_options(OpenAL PRIVATE ${C_FLAGS})\n        target_link_libraries(OpenAL PRIVATE alsoft.common ${LINKER_FLAGS} alsoft::fmt)\n        target_include_directories(OpenAL\n          PUBLIC\n            $<BUILD_INTERFACE:${OpenAL_SOURCE_DIR}/include>\n            $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\n          PRIVATE\n            ${OpenAL_SOURCE_DIR}/common\n            ${OpenAL_BINARY_DIR}\n        )\n        set_target_properties(OpenAL PROPERTIES ${ALSOFT_STD_VERSION_PROPS} PREFIX \"\"\n            OUTPUT_NAME ${LIBNAME})\n        if(TARGET alsoft.build_version)\n            add_dependencies(OpenAL alsoft.build_version)\n        endif()\n        set(HAS_ROUTER 1)\n\n        set(LIBNAME \"soft_oal\")\n        set(IMPL_TARGET soft_oal)\n        set(RC_CONFIG resources/soft_oal.rc)\n    endif()\n\n    # !important: for osx framework public header works, the headers must be in\n    # the project\n    set(TARGET_PUBLIC_HEADERS include/AL/al.h include/AL/alc.h include/AL/alext.h include/AL/efx.h\n        include/AL/efx-presets.h)\n\n    add_library(${IMPL_TARGET} SHARED ${OPENAL_OBJS} ${ALC_OBJS} ${CORE_OBJS} ${RC_CONFIG}\n        ${TARGET_PUBLIC_HEADERS})\n    if(WIN32)\n        set_target_properties(${IMPL_TARGET} PROPERTIES PREFIX \"\")\n    endif()\n    target_link_libraries(${IMPL_TARGET} PRIVATE alsoft.common ${LINKER_FLAGS} ${EXTRA_LIBS}\n        ${MATH_LIB} alsoft::fmt)\n\n    if(ALSOFT_UWP)\n        find_package(cppwinrt CONFIG)\n        if (TARGET Microsoft::CppWinRT)\n            target_link_libraries(${IMPL_TARGET} PRIVATE Microsoft::CppWinRT)\n        else()\n            set(ALSOFT_CPPWINRT_VERSION \"2.0.230706.1\" CACHE STRING \"The soft-oal default cppwinrt version\")\n\n            find_program(NUGET_EXE NAMES nuget)\n            if(NOT NUGET_EXE)\n                message(\"NUGET.EXE not found.\")\n                message(FATAL_ERROR \"Please install this executable, and run CMake again.\")\n            endif()\n\n            exec_program(${NUGET_EXE}\n                ARGS install \"Microsoft.Windows.CppWinRT\" -Version ${ALSOFT_CPPWINRT_VERSION} -ExcludeVersion -OutputDirectory \"\\\"${CMAKE_BINARY_DIR}/packages\\\"\")\n\n            set_target_properties(${IMPL_TARGET} PROPERTIES\n                VS_PROJECT_IMPORT ${CMAKE_BINARY_DIR}/packages/Microsoft.Windows.CppWinRT/build/native/Microsoft.Windows.CppWinRT.props\n            )\n            target_link_libraries(${IMPL_TARGET} PRIVATE ${CMAKE_BINARY_DIR}/packages/Microsoft.Windows.CppWinRT/build/native/Microsoft.Windows.CppWinRT.targets)\n        endif()\n    endif()\n\n    if(NOT WIN32 AND NOT APPLE)\n        # FIXME: This doesn't put a dependency on the version script. Changing\n        # the version script will not cause a relink as it should.\n        target_link_options(${IMPL_TARGET} PRIVATE\n            \"-Wl,--version-script=${OpenAL_SOURCE_DIR}/libopenal.version\")\n    endif()\n\n    if(APPLE AND ALSOFT_OSX_FRAMEWORK)\n        # Sets framework name to soft_oal to avoid ambiguity with the system OpenAL.framework\n        set(LIBNAME \"soft_oal\")\n        if(GIT_FOUND)\n            execute_process(COMMAND ${GIT_EXECUTABLE} rev-list --count HEAD\n                TIMEOUT 5\n                OUTPUT_VARIABLE BUNDLE_VERSION\n                OUTPUT_STRIP_TRAILING_WHITESPACE)\n        else()\n            set(BUNDLE_VERSION 1)\n        endif()\n\n        # Build: Fix rpath in iOS shared libraries\n        # If this flag is not set, the final dylib binary ld path will be\n        # /User/xxx/*/soft_oal.framework/soft_oal, which can't be loaded by iOS devices.\n        # See also: https://github.com/libjpeg-turbo/libjpeg-turbo/commit/c80ddef7a4ce21ace9e3ca0fd190d320cc8cdaeb\n        if(NOT CMAKE_SHARED_LIBRARY_RUNTIME_C_FLAG)\n            set(CMAKE_SHARED_LIBRARY_RUNTIME_C_FLAG \"-Wl,-rpath,\")\n        endif()\n\n        set_target_properties(${IMPL_TARGET} PROPERTIES\n            FRAMEWORK TRUE\n            FRAMEWORK_VERSION C\n            MACOSX_FRAMEWORK_NAME \"${IMPL_TARGET}\"\n            MACOSX_FRAMEWORK_IDENTIFIER \"org.openal-soft.openal\"\n            MACOSX_FRAMEWORK_SHORT_VERSION_STRING \"${LIB_VERSION}\"\n            MACOSX_FRAMEWORK_BUNDLE_VERSION \"${BUNDLE_VERSION}\"\n            XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY \"\"\n            XCODE_ATTRIBUTE_CODE_SIGNING_ALLOWED \"NO\"\n            XCODE_ATTRIBUTE_CODE_SIGNING_REQUIRED \"NO\"\n            PUBLIC_HEADER \"${TARGET_PUBLIC_HEADERS}\"\n            MACOSX_RPATH TRUE)\n    endif()\nendif()\n\ntarget_include_directories(${IMPL_TARGET}\n  PUBLIC\n    $<BUILD_INTERFACE:${OpenAL_SOURCE_DIR}/include>\n  INTERFACE\n    $<BUILD_INTERFACE:${OpenAL_SOURCE_DIR}/include/AL>\n    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\n    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/AL>\n  PRIVATE\n    ${INC_PATHS}\n    ${OpenAL_BINARY_DIR}\n    ${OpenAL_SOURCE_DIR}\n    ${OpenAL_SOURCE_DIR}/common\n)\n\nset_target_properties(${IMPL_TARGET} PROPERTIES ${ALSOFT_STD_VERSION_PROPS}\n    OUTPUT_NAME ${LIBNAME}\n    VERSION ${LIB_VERSION}\n    SOVERSION ${LIB_MAJOR_VERSION}\n)\ntarget_compile_definitions(${IMPL_TARGET}\n    PRIVATE AL_BUILD_LIBRARY AL_ALEXT_PROTOTYPES  \"ALC_API=${EXPORT_DECL}\" \"AL_API=${EXPORT_DECL}\"\n    ${CPP_DEFS})\ntarget_compile_options(${IMPL_TARGET} PRIVATE ${C_FLAGS})\n\nif(TARGET alsoft.build_version)\n    add_dependencies(${IMPL_TARGET} alsoft.build_version)\nendif()\n\nif(WIN32 AND MINGW AND ALSOFT_BUILD_IMPORT_LIB AND NOT LIBTYPE STREQUAL \"STATIC\")\n    find_program(SED_EXECUTABLE NAMES sed DOC \"sed executable\")\n    if(NOT SED_EXECUTABLE OR NOT CMAKE_DLLTOOL)\n        message(STATUS \"\")\n        if(NOT SED_EXECUTABLE)\n            message(STATUS \"WARNING: Cannot find sed, disabling .def/.lib generation\")\n        endif()\n        if(NOT CMAKE_DLLTOOL)\n            message(STATUS \"WARNING: Cannot find dlltool, disabling .def/.lib generation\")\n        endif()\n    else()\n        target_link_options(OpenAL PRIVATE \"-Wl,--output-def,${PROJECT_BINARY_DIR}/OpenAL32.def\")\n        add_custom_command(TARGET OpenAL POST_BUILD\n            COMMAND \"${SED_EXECUTABLE}\" -i -e \"s/ @[^ ]*//\" OpenAL32.def\n            COMMAND \"${CMAKE_DLLTOOL}\" -d OpenAL32.def -l OpenAL32.lib -D OpenAL32.dll\n            # Technically OpenAL32.def was created by the build, but cmake\n            # doesn't recognize it due to -Wl,--output-def,OpenAL32.def being\n            # manually specified. But declaring the file here allows it to be\n            # properly cleaned, e.g. during make clean.\n            BYPRODUCTS OpenAL32.def OpenAL32.lib\n            COMMENT \"Stripping ordinals from OpenAL32.def and generating OpenAL32.lib...\"\n            VERBATIM\n        )\n    endif()\nendif()\n\nif(HAS_ROUTER)\n    message(STATUS \"\")\n    message(STATUS \"Building DLL router\")\nendif()\n\nmessage(STATUS \"\")\nmessage(STATUS \"Building OpenAL with support for the following backends:\")\nmessage(STATUS \"   ${BACKENDS}\")\nmessage(STATUS \"\")\nmessage(STATUS \"Building with support for CPU extensions:\")\nmessage(STATUS \"    ${CPU_EXTS}\")\nmessage(STATUS \"\")\nif(FPMATH_SET)\n    message(STATUS \"Building with SSE${FPMATH_SET} codegen\")\n    message(STATUS \"\")\nendif()\nif(ALSOFT_UWP)\n    message(STATUS \"Building with UWP support\")\n    message(STATUS \"\")\nendif()\nif(ALSOFT_EAX)\n    message(STATUS \"Building with legacy EAX extension support\")\n    message(STATUS \"\")\nendif()\n\nif(ALSOFT_EMBED_HRTF_DATA)\n    message(STATUS \"Embedding HRTF datasets\")\n    message(STATUS \"\")\nendif()\n\n# An alias for sub-project builds\nadd_library(OpenAL::OpenAL ALIAS OpenAL)\n\n# Install main library\nif(ALSOFT_INSTALL)\n    configure_package_config_file(OpenALConfig.cmake.in OpenALConfig.cmake\n        INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/OpenAL)\n    install(TARGETS OpenAL EXPORT OpenAL\n        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        FRAMEWORK DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} ${CMAKE_INSTALL_INCLUDEDIR}/AL)\n    export(TARGETS OpenAL\n        NAMESPACE OpenAL::\n        FILE OpenALTargets.cmake)\n    install(EXPORT OpenAL\n        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/OpenAL\n        NAMESPACE OpenAL::\n        FILE OpenALTargets.cmake)\n    install(DIRECTORY include/AL\n        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n    install(FILES \"${OpenAL_BINARY_DIR}/openal.pc\"\n        DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\n    install(FILES \"${OpenAL_BINARY_DIR}/OpenALConfig.cmake\"\n        DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/OpenAL\")\n    if(TARGET soft_oal)\n        install(TARGETS soft_oal\n            RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})\n    endif()\n    message(STATUS \"Installing library and headers\")\nelse()\n    message(STATUS \"NOT installing library and headers\")\nendif()\n\nif(ALSOFT_INSTALL_CONFIG)\n    install(FILES alsoftrc.sample\n        DESTINATION ${CMAKE_INSTALL_DATADIR}/openal)\n    message(STATUS \"Installing sample configuration\")\nendif()\n\nif(ALSOFT_INSTALL_HRTF_DATA)\n    install(DIRECTORY hrtf\n        DESTINATION ${CMAKE_INSTALL_DATADIR}/openal)\n    message(STATUS \"Installing HRTF data files\")\nendif()\n\nif(ALSOFT_INSTALL_AMBDEC_PRESETS)\n    install(DIRECTORY presets\n        DESTINATION ${CMAKE_INSTALL_DATADIR}/openal)\n    message(STATUS \"Installing AmbDec presets\")\nendif()\nmessage(STATUS \"\")\n\nset(UNICODE_FLAG )\nif(MINGW)\n    set(UNICODE_FLAG ${UNICODE_FLAG} -municode)\nendif()\nset(EXTRA_INSTALLS )\nif(ALSOFT_UTILS)\n    add_executable(openal-info utils/openal-info.c)\n    target_include_directories(openal-info PRIVATE ${OpenAL_SOURCE_DIR}/common)\n    target_compile_options(openal-info PRIVATE ${C_FLAGS})\n    target_link_libraries(openal-info PRIVATE ${LINKER_FLAGS} OpenAL ${UNICODE_FLAG})\n    set_target_properties(openal-info PROPERTIES ${ALSOFT_STD_VERSION_PROPS})\n    if(ALSOFT_INSTALL_EXAMPLES)\n        set(EXTRA_INSTALLS ${EXTRA_INSTALLS} openal-info)\n    endif()\n\n    if(SNDFILE_FOUND)\n        add_executable(uhjdecoder utils/uhjdecoder.cpp)\n        target_compile_definitions(uhjdecoder PRIVATE ${CPP_DEFS})\n        target_include_directories(uhjdecoder\n            PRIVATE ${OpenAL_BINARY_DIR} ${OpenAL_SOURCE_DIR}/common)\n        target_compile_options(uhjdecoder PRIVATE ${C_FLAGS})\n        target_link_libraries(uhjdecoder PUBLIC alsoft.common\n            PRIVATE ${LINKER_FLAGS} SndFile::SndFile ${UNICODE_FLAG} alsoft::fmt)\n        set_target_properties(uhjdecoder PROPERTIES ${ALSOFT_STD_VERSION_PROPS})\n\n        add_executable(uhjencoder utils/uhjencoder.cpp)\n        target_compile_definitions(uhjencoder PRIVATE ${CPP_DEFS})\n        target_include_directories(uhjencoder\n            PRIVATE ${OpenAL_BINARY_DIR} ${OpenAL_SOURCE_DIR}/common)\n        target_compile_options(uhjencoder PRIVATE ${C_FLAGS})\n        target_link_libraries(uhjencoder PUBLIC alsoft.common\n            PRIVATE ${LINKER_FLAGS} SndFile::SndFile ${UNICODE_FLAG} alsoft::fmt)\n        set_target_properties(uhjencoder PROPERTIES ${ALSOFT_STD_VERSION_PROPS})\n    endif()\n\n    if(MYSOFA_FOUND)\n        set(SOFA_SUPPORT_SRCS\n            utils/sofa-support.cpp\n            utils/sofa-support.h)\n        add_library(alsoft.sofa-support STATIC EXCLUDE_FROM_ALL ${SOFA_SUPPORT_SRCS})\n        target_compile_definitions(alsoft.sofa-support PRIVATE ${CPP_DEFS})\n        target_include_directories(alsoft.sofa-support PUBLIC ${OpenAL_SOURCE_DIR}/common)\n        target_compile_options(alsoft.sofa-support PRIVATE ${C_FLAGS})\n        target_link_libraries(alsoft.sofa-support PUBLIC alsoft.common MySOFA::MySOFA\n            PRIVATE ${LINKER_FLAGS} alsoft::fmt)\n        set_target_properties(alsoft.sofa-support PROPERTIES ${ALSOFT_STD_VERSION_PROPS})\n\n        set(MAKEMHR_SRCS\n            utils/makemhr/loaddef.cpp\n            utils/makemhr/loaddef.h\n            utils/makemhr/loadsofa.cpp\n            utils/makemhr/loadsofa.h\n            utils/makemhr/makemhr.cpp\n            utils/makemhr/makemhr.h)\n        add_executable(makemhr ${MAKEMHR_SRCS})\n        target_compile_definitions(makemhr PRIVATE ${CPP_DEFS})\n        target_include_directories(makemhr\n            PRIVATE ${OpenAL_BINARY_DIR} ${OpenAL_SOURCE_DIR}/utils)\n        target_compile_options(makemhr PRIVATE ${C_FLAGS})\n        target_link_libraries(makemhr PRIVATE ${LINKER_FLAGS} alsoft.sofa-support ${UNICODE_FLAG}\n            alsoft::fmt)\n        set_target_properties(makemhr PROPERTIES ${ALSOFT_STD_VERSION_PROPS})\n        if(ALSOFT_INSTALL_EXAMPLES)\n            set(EXTRA_INSTALLS ${EXTRA_INSTALLS} makemhr)\n        endif()\n\n        set(SOFAINFO_SRCS  utils/sofa-info.cpp)\n        add_executable(sofa-info ${SOFAINFO_SRCS})\n        target_compile_definitions(sofa-info PRIVATE ${CPP_DEFS})\n        target_include_directories(sofa-info PRIVATE ${OpenAL_SOURCE_DIR}/utils)\n        target_compile_options(sofa-info PRIVATE ${C_FLAGS})\n        target_link_libraries(sofa-info PRIVATE ${LINKER_FLAGS} alsoft.sofa-support\n            ${UNICODE_FLAG} alsoft::fmt)\n        set_target_properties(sofa-info PROPERTIES ${ALSOFT_STD_VERSION_PROPS})\n    endif()\n    message(STATUS \"Building utility programs\")\n\n    if(NOT ALSOFT_NO_CONFIG_UTIL)\n        add_subdirectory(utils/alsoft-config)\n    endif()\n    message(STATUS \"\")\nendif()\n\n\n# Add a static library with common functions used by multiple example targets\nadd_library(alsoft.excommon STATIC EXCLUDE_FROM_ALL\n    examples/common/alhelpers.c\n    examples/common/alhelpers.h)\ntarget_compile_definitions(alsoft.excommon PUBLIC ${CPP_DEFS})\ntarget_include_directories(alsoft.excommon PUBLIC ${OpenAL_BINARY_DIR} ${OpenAL_SOURCE_DIR}/common)\ntarget_compile_options(alsoft.excommon PUBLIC ${C_FLAGS})\ntarget_link_libraries(alsoft.excommon PUBLIC OpenAL PRIVATE ${RT_LIB})\nset_target_properties(alsoft.excommon PROPERTIES ${ALSOFT_STD_VERSION_PROPS})\n\nif(ALSOFT_EXAMPLES)\n    add_executable(altonegen examples/altonegen.c)\n    target_link_libraries(altonegen PRIVATE ${LINKER_FLAGS} ${MATH_LIB} alsoft.excommon\n        ${UNICODE_FLAG})\n    set_target_properties(altonegen PROPERTIES ${ALSOFT_STD_VERSION_PROPS})\n\n    add_executable(alrecord examples/alrecord.c)\n    target_link_libraries(alrecord PRIVATE ${LINKER_FLAGS} alsoft.excommon ${UNICODE_FLAG})\n    set_target_properties(alrecord PROPERTIES ${ALSOFT_STD_VERSION_PROPS})\n\n    add_executable(aldebug examples/aldebug.cpp)\n    target_link_libraries(aldebug PRIVATE ${LINKER_FLAGS} alsoft.excommon ${UNICODE_FLAG}\n        alsoft::fmt)\n    set_target_properties(aldebug PROPERTIES ${ALSOFT_STD_VERSION_PROPS})\n\n    add_executable(allafplay examples/allafplay.cpp)\n    target_link_libraries(allafplay PRIVATE ${LINKER_FLAGS} alsoft.common alsoft.excommon\n        ${UNICODE_FLAG} alsoft::fmt)\n    set_target_properties(allafplay PROPERTIES ${ALSOFT_STD_VERSION_PROPS})\n\n    if(ALSOFT_INSTALL_EXAMPLES)\n        set(EXTRA_INSTALLS ${EXTRA_INSTALLS} altonegen alrecord aldebug allafplay)\n    endif()\n\n    message(STATUS \"Building example programs\")\n\n    if(SNDFILE_FOUND)\n        add_executable(alplay examples/alplay.c)\n        target_link_libraries(alplay PRIVATE ${LINKER_FLAGS} SndFile::SndFile alsoft.excommon\n            ${UNICODE_FLAG})\n        set_target_properties(alplay PROPERTIES ${ALSOFT_STD_VERSION_PROPS})\n\n        add_executable(alstream examples/alstream.c)\n        target_link_libraries(alstream PRIVATE ${LINKER_FLAGS} SndFile::SndFile alsoft.excommon\n            ${UNICODE_FLAG})\n        set_target_properties(alstream PROPERTIES ${ALSOFT_STD_VERSION_PROPS})\n\n        add_executable(alreverb examples/alreverb.c)\n        target_link_libraries(alreverb PRIVATE ${LINKER_FLAGS} SndFile::SndFile alsoft.excommon\n            ${UNICODE_FLAG})\n        set_target_properties(alreverb PROPERTIES ${ALSOFT_STD_VERSION_PROPS})\n\n        add_executable(almultireverb examples/almultireverb.c)\n        target_link_libraries(almultireverb\n            PRIVATE ${LINKER_FLAGS} SndFile::SndFile alsoft.excommon ${MATH_LIB} ${UNICODE_FLAG})\n        set_target_properties(almultireverb PROPERTIES ${ALSOFT_STD_VERSION_PROPS})\n\n        add_executable(allatency examples/allatency.c)\n        target_link_libraries(allatency PRIVATE ${LINKER_FLAGS} SndFile::SndFile alsoft.excommon\n            ${UNICODE_FLAG})\n        set_target_properties(allatency PROPERTIES ${ALSOFT_STD_VERSION_PROPS})\n\n        add_executable(alhrtf examples/alhrtf.c)\n        target_link_libraries(alhrtf\n            PRIVATE ${LINKER_FLAGS} SndFile::SndFile alsoft.excommon ${MATH_LIB} ${UNICODE_FLAG})\n        set_target_properties(alhrtf PROPERTIES ${ALSOFT_STD_VERSION_PROPS})\n\n        add_executable(alstreamcb examples/alstreamcb.cpp)\n        target_link_libraries(alstreamcb PRIVATE ${LINKER_FLAGS} SndFile::SndFile alsoft.excommon\n            ${UNICODE_FLAG} alsoft::fmt)\n        set_target_properties(alstreamcb PROPERTIES ${ALSOFT_STD_VERSION_PROPS})\n\n        add_executable(aldirect examples/aldirect.cpp)\n        target_link_libraries(aldirect PRIVATE ${LINKER_FLAGS} SndFile::SndFile alsoft.excommon\n            ${UNICODE_FLAG} alsoft::fmt)\n        set_target_properties(aldirect PROPERTIES ${ALSOFT_STD_VERSION_PROPS})\n\n        add_executable(alconvolve examples/alconvolve.c)\n        target_link_libraries(alconvolve PRIVATE ${LINKER_FLAGS} alsoft.common SndFile::SndFile\n            alsoft.excommon ${UNICODE_FLAG})\n        set_target_properties(alconvolve PROPERTIES ${ALSOFT_STD_VERSION_PROPS})\n\n        if(ALSOFT_INSTALL_EXAMPLES)\n            set(EXTRA_INSTALLS ${EXTRA_INSTALLS} alplay alstream alreverb almultireverb allatency\n                alhrtf aldirect)\n        endif()\n\n        message(STATUS \"Building SndFile example programs\")\n    endif()\n\n    # Can't safely use SDL3 and SDL2 together\n    if(SDL3_FOUND AND NOT HAVE_SDL2)\n        message(STATUS \"Building SDL3 example programs\")\n\n        add_executable(alloopback examples/alloopback.c)\n        target_link_libraries(alloopback\n            PRIVATE ${LINKER_FLAGS} SDL3::SDL3 alsoft.excommon ${MATH_LIB})\n        set_target_properties(alloopback PROPERTIES ${ALSOFT_STD_VERSION_PROPS})\n\n        if(ALSOFT_INSTALL_EXAMPLES)\n            set(EXTRA_INSTALLS ${EXTRA_INSTALLS} alloopback)\n        endif()\n\n        set(FFVER_OK FALSE)\n        if(FFMPEG_FOUND)\n            set(FFVER_OK TRUE)\n            if(AVFORMAT_VERSION VERSION_LESS \"59.27.100\")\n                message(STATUS \"libavformat is too old! (${AVFORMAT_VERSION}, wanted 59.27.100)\")\n                set(FFVER_OK FALSE)\n            endif()\n            if(AVCODEC_VERSION VERSION_LESS \"59.37.100\")\n                message(STATUS \"libavcodec is too old! (${AVCODEC_VERSION}, wanted 59.37.100)\")\n                set(FFVER_OK FALSE)\n            endif()\n            if(AVUTIL_VERSION VERSION_LESS \"57.28.100\")\n                message(STATUS \"libavutil is too old! (${AVUTIL_VERSION}, wanted 57.28.100)\")\n                set(FFVER_OK FALSE)\n            endif()\n            if(SWSCALE_VERSION VERSION_LESS \"6.7.100\")\n                message(STATUS \"libswscale is too old! (${SWSCALE_VERSION}, wanted 6.7.100)\")\n                set(FFVER_OK FALSE)\n            endif()\n            if(SWRESAMPLE_VERSION VERSION_LESS \"4.7.100\")\n                message(STATUS \"libswresample is too old! (${SWRESAMPLE_VERSION}, wanted 4.7.100)\")\n                set(FFVER_OK FALSE)\n            endif()\n        endif()\n        if(FFVER_OK)\n            add_executable(alffplay examples/alffplay.cpp)\n            target_include_directories(alffplay PRIVATE ${FFMPEG_INCLUDE_DIRS})\n            target_link_libraries(alffplay\n                PRIVATE ${LINKER_FLAGS} SDL3::SDL3 ${FFMPEG_LIBRARIES} alsoft.excommon alsoft::fmt)\n            set_target_properties(alffplay PROPERTIES ${ALSOFT_STD_VERSION_PROPS})\n\n            if(ALSOFT_INSTALL_EXAMPLES)\n                set(EXTRA_INSTALLS ${EXTRA_INSTALLS} alffplay)\n            endif()\n            message(STATUS \"Building SDL3+FFmpeg example programs\")\n        endif()\n    endif()\n    message(STATUS \"\")\nendif()\n\nif(ALSOFT_TESTS)\nadd_subdirectory(tests)\nendif()\n\nif(EXTRA_INSTALLS)\n    install(TARGETS ${EXTRA_INSTALLS}\n        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n        BUNDLE  DESTINATION ${CMAKE_INSTALL_BINDIR}\n        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})\nendif()\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 22.783203125,
          "content": "                  GNU LIBRARY GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1991 Free Software Foundation, Inc.\n 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n[This is the first released version of the library GPL.  It is\n numbered 2 because it goes with version 2 of the ordinary GPL.]\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicenses are intended to guarantee your freedom to share and change\nfree software--to make sure the software is free for all its users.\n\n  This license, the Library General Public License, applies to some\nspecially designated Free Software Foundation software, and to any\nother libraries whose authors decide to use it.  You can use it for\nyour libraries, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if\nyou distribute copies of the library, or if you modify it.\n\n  For example, if you distribute copies of the library, whether gratis\nor for a fee, you must give the recipients all the rights that we gave\nyou.  You must make sure that they, too, receive or can get the source\ncode.  If you link a program with the library, you must provide\ncomplete object files to the recipients so that they can relink them\nwith the library, after making changes to the library and recompiling\nit.  And you must show them these terms so they know their rights.\n\n  Our method of protecting your rights has two steps: (1) copyright\nthe library, and (2) offer you this license which gives you legal\npermission to copy, distribute and/or modify the library.\n\n  Also, for each distributor's protection, we want to make certain\nthat everyone understands that there is no warranty for this free\nlibrary.  If the library is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original\nversion, so that any problems introduced by others will not reflect on\nthe original authors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that companies distributing free\nsoftware will individually obtain patent licenses, thus in effect\ntransforming the program into proprietary software.  To prevent this,\nwe have made it clear that any patent must be licensed for everyone's\nfree use or not licensed at all.\n\n  Most GNU software, including some libraries, is covered by the ordinary\nGNU General Public License, which was designed for utility programs.  This\nlicense, the GNU Library General Public License, applies to certain\ndesignated libraries.  This license is quite different from the ordinary\none; be sure to read it in full, and don't assume that anything in it is\nthe same as in the ordinary license.\n\n  The reason we have a separate public license for some libraries is that\nthey blur the distinction we usually make between modifying or adding to a\nprogram and simply using it.  Linking a program with a library, without\nchanging the library, is in some sense simply using the library, and is\nanalogous to running a utility program or application program.  However, in\na textual and legal sense, the linked executable is a combined work, a\nderivative of the original library, and the ordinary General Public License\ntreats it as such.\n\n  Because of this blurred distinction, using the ordinary General\nPublic License for libraries did not effectively promote software\nsharing, because most developers did not use the libraries.  We\nconcluded that weaker conditions might promote sharing better.\n\n  However, unrestricted linking of non-free programs would deprive the\nusers of those programs of all benefit from the free status of the\nlibraries themselves.  This Library General Public License is intended to\npermit developers of non-free programs to use free libraries, while\npreserving your freedom as a user of such programs to change the free\nlibraries that are incorporated in them.  (We have not seen how to achieve\nthis as regards changes in header files, but we have achieved it as regards\nchanges in the actual functions of the Library.)  The hope is that this\nwill lead to faster development of free libraries.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.  Pay close attention to the difference between a\n\"work based on the library\" and a \"work that uses the library\".  The\nformer contains code derived from the library, while the latter only\nworks together with the library.\n\n  Note that it is possible for a library to be covered by the ordinary\nGeneral Public License rather than by this special one.\n\n                  GNU LIBRARY GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any software library which\ncontains a notice placed by the copyright holder or other authorized\nparty saying it may be distributed under the terms of this Library\nGeneral Public License (also called \"this License\").  Each licensee is\naddressed as \"you\".\n\n  A \"library\" means a collection of software functions and/or data\nprepared so as to be conveniently linked with application programs\n(which use some of those functions and data) to form executables.\n\n  The \"Library\", below, refers to any such software library or work\nwhich has been distributed under these terms.  A \"work based on the\nLibrary\" means either the Library or any derivative work under\ncopyright law: that is to say, a work containing the Library or a\nportion of it, either verbatim or with modifications and/or translated\nstraightforwardly into another language.  (Hereinafter, translation is\nincluded without limitation in the term \"modification\".)\n\n  \"Source code\" for a work means the preferred form of the work for\nmaking modifications to it.  For a library, complete source code means\nall the source code for all modules it contains, plus any associated\ninterface definition files, plus the scripts used to control compilation\nand installation of the library.\n\n  Activities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning a program using the Library is not restricted, and output from\nsuch a program is covered only if its contents constitute a work based\non the Library (independent of the use of the Library in a tool for\nwriting it).  Whether that is true depends on what the Library does\nand what the program that uses the Library does.\n  \n  1. You may copy and distribute verbatim copies of the Library's\ncomplete source code as you receive it, in any medium, provided that\nyou conspicuously and appropriately publish on each copy an\nappropriate copyright notice and disclaimer of warranty; keep intact\nall the notices that refer to this License and to the absence of any\nwarranty; and distribute a copy of this License along with the\nLibrary.\n\n  You may charge a fee for the physical act of transferring a copy,\nand you may at your option offer warranty protection in exchange for a\nfee.\n\n  2. You may modify your copy or copies of the Library or any portion\nof it, thus forming a work based on the Library, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) The modified work must itself be a software library.\n\n    b) You must cause the files modified to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    c) You must cause the whole of the work to be licensed at no\n    charge to all third parties under the terms of this License.\n\n    d) If a facility in the modified Library refers to a function or a\n    table of data to be supplied by an application program that uses\n    the facility, other than as an argument passed when the facility\n    is invoked, then you must make a good faith effort to ensure that,\n    in the event an application does not supply such function or\n    table, the facility still operates, and performs whatever part of\n    its purpose remains meaningful.\n\n    (For example, a function in a library to compute square roots has\n    a purpose that is entirely well-defined independent of the\n    application.  Therefore, Subsection 2d requires that any\n    application-supplied function or table used by this function must\n    be optional: if the application does not supply it, the square\n    root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Library,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Library, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote\nit.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library\nwith the Library (or with a work based on the Library) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may opt to apply the terms of the ordinary GNU General Public\nLicense instead of this License to a given copy of the Library.  To do\nthis, you must alter all the notices that refer to this License, so\nthat they refer to the ordinary GNU General Public License, version 2,\ninstead of to this License.  (If a newer version than version 2 of the\nordinary GNU General Public License has appeared, then you can specify\nthat version instead if you wish.)  Do not make any other change in\nthese notices.\n\n  Once this change is made in a given copy, it is irreversible for\nthat copy, so the ordinary GNU General Public License applies to all\nsubsequent copies and derivative works made from that copy.\n\n  This option is useful when you wish to copy part of the code of\nthe Library into a program that is not a library.\n\n  4. You may copy and distribute the Library (or a portion or\nderivative of it, under Section 2) in object code or executable form\nunder the terms of Sections 1 and 2 above provided that you accompany\nit with the complete corresponding machine-readable source code, which\nmust be distributed under the terms of Sections 1 and 2 above on a\nmedium customarily used for software interchange.\n\n  If distribution of object code is made by offering access to copy\nfrom a designated place, then offering equivalent access to copy the\nsource code from the same place satisfies the requirement to\ndistribute the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  5. A program that contains no derivative of any portion of the\nLibrary, but is designed to work with the Library by being compiled or\nlinked with it, is called a \"work that uses the Library\".  Such a\nwork, in isolation, is not a derivative work of the Library, and\ntherefore falls outside the scope of this License.\n\n  However, linking a \"work that uses the Library\" with the Library\ncreates an executable that is a derivative of the Library (because it\ncontains portions of the Library), rather than a \"work that uses the\nlibrary\".  The executable is therefore covered by this License.\nSection 6 states terms for distribution of such executables.\n\n  When a \"work that uses the Library\" uses material from a header file\nthat is part of the Library, the object code for the work may be a\nderivative work of the Library even though the source code is not.\nWhether this is true is especially significant if the work can be\nlinked without the Library, or if the work is itself a library.  The\nthreshold for this to be true is not precisely defined by law.\n\n  If such an object file uses only numerical parameters, data\nstructure layouts and accessors, and small macros and small inline\nfunctions (ten lines or less in length), then the use of the object\nfile is unrestricted, regardless of whether it is legally a derivative\nwork.  (Executables containing this object code plus portions of the\nLibrary will still fall under Section 6.)\n\n  Otherwise, if the work is a derivative of the Library, you may\ndistribute the object code for the work under the terms of Section 6.\nAny executables containing that work also fall under Section 6,\nwhether or not they are linked directly with the Library itself.\n\n  6. As an exception to the Sections above, you may also compile or\nlink a \"work that uses the Library\" with the Library to produce a\nwork containing portions of the Library, and distribute that work\nunder terms of your choice, provided that the terms permit\nmodification of the work for the customer's own use and reverse\nengineering for debugging such modifications.\n\n  You must give prominent notice with each copy of the work that the\nLibrary is used in it and that the Library and its use are covered by\nthis License.  You must supply a copy of this License.  If the work\nduring execution displays copyright notices, you must include the\ncopyright notice for the Library among them, as well as a reference\ndirecting the user to the copy of this License.  Also, you must do one\nof these things:\n\n    a) Accompany the work with the complete corresponding\n    machine-readable source code for the Library including whatever\n    changes were used in the work (which must be distributed under\n    Sections 1 and 2 above); and, if the work is an executable linked\n    with the Library, with the complete machine-readable \"work that\n    uses the Library\", as object code and/or source code, so that the\n    user can modify the Library and then relink to produce a modified\n    executable containing the modified Library.  (It is understood\n    that the user who changes the contents of definitions files in the\n    Library will not necessarily be able to recompile the application\n    to use the modified definitions.)\n\n    b) Accompany the work with a written offer, valid for at\n    least three years, to give the same user the materials\n    specified in Subsection 6a, above, for a charge no more\n    than the cost of performing this distribution.\n\n    c) If distribution of the work is made by offering access to copy\n    from a designated place, offer equivalent access to copy the above\n    specified materials from the same place.\n\n    d) Verify that the user has already received a copy of these\n    materials or that you have already sent this user a copy.\n\n  For an executable, the required form of the \"work that uses the\nLibrary\" must include any data and utility programs needed for\nreproducing the executable from it.  However, as a special exception,\nthe source code distributed need not include anything that is normally\ndistributed (in either source or binary form) with the major\ncomponents (compiler, kernel, and so on) of the operating system on\nwhich the executable runs, unless that component itself accompanies\nthe executable.\n\n  It may happen that this requirement contradicts the license\nrestrictions of other proprietary libraries that do not normally\naccompany the operating system.  Such a contradiction means you cannot\nuse both them and the Library together in an executable that you\ndistribute.\n\n  7. You may place library facilities that are a work based on the\nLibrary side-by-side in a single library together with other library\nfacilities not covered by this License, and distribute such a combined\nlibrary, provided that the separate distribution of the work based on\nthe Library and of the other library facilities is otherwise\npermitted, and provided that you do these two things:\n\n    a) Accompany the combined library with a copy of the same work\n    based on the Library, uncombined with any other library\n    facilities.  This must be distributed under the terms of the\n    Sections above.\n\n    b) Give prominent notice with the combined library of the fact\n    that part of it is a work based on the Library, and explaining\n    where to find the accompanying uncombined form of the same work.\n\n  8. You may not copy, modify, sublicense, link with, or distribute\nthe Library except as expressly provided under this License.  Any\nattempt otherwise to copy, modify, sublicense, link with, or\ndistribute the Library is void, and will automatically terminate your\nrights under this License.  However, parties who have received copies,\nor rights, from you under this License will not have their licenses\nterminated so long as such parties remain in full compliance.\n\n  9. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Library or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Library (or any work based on the\nLibrary), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Library or works based on it.\n\n  10. Each time you redistribute the Library (or any work based on the\nLibrary), the recipient automatically receives a license from the\noriginal licensor to copy, distribute, link with or modify the Library\nsubject to these terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  11. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Library at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Library by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any\nparticular circumstance, the balance of the section is intended to apply,\nand the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  12. If the distribution and/or use of the Library is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Library under this License may add\nan explicit geographical distribution limitation excluding those countries,\nso that distribution is permitted only in or among countries not thus\nexcluded.  In such case, this License incorporates the limitation as if\nwritten in the body of this License.\n\n  13. The Free Software Foundation may publish revised and/or new\nversions of the Library General Public License from time to time.\nSuch new versions will be similar in spirit to the present version,\nbut may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Library\nspecifies a version number of this License which applies to it and\n\"any later version\", you have the option of following the terms and\nconditions either of that version or of any later version published by\nthe Free Software Foundation.  If the Library does not specify a\nlicense version number, you may choose any version ever published by\nthe Free Software Foundation.\n\n  14. If you wish to incorporate parts of the Library into other free\nprograms whose distribution conditions are incompatible with these,\nwrite to the author to ask for permission.  For software which is\ncopyrighted by the Free Software Foundation, write to the Free\nSoftware Foundation; we sometimes make exceptions for this.  Our\ndecision will be guided by the two goals of preserving the free status\nof all derivatives of our free software and of promoting the sharing\nand reuse of software generally.\n\n                            NO WARRANTY\n\n  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO\nWARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.\nEXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR\nOTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY\nKIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE\nLIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME\nTHE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN\nWRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY\nAND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU\nFOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\nCONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE\nLIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING\nRENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A\nFAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF\nSUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 25.68359375,
          "content": "openal-soft-1.24.1:\n\n    Fixed compilation on PowerPC.\n\n    Fixed compilation on some targets that lack lock-free 64-bit atomics.\n\n    Fixed a crash when parsing certain option values.\n\n    Fixed applying noexcept in the public headers with MSVC.\n\n    Fixed building for UWP with vcpkg.\n\n    Improved compatibility when compiling as C++20 or later.\n\n    Integrated fmtlib for some examples and utilities.\n\nopenal-soft-1.24.0:\n\n    Updated library codebase to C++17.\n\n    Implemented the ALC_SOFT_system_events extension.\n\n    Implemented the AL_EXT_debug extension.\n\n    Implemented the AL_EXT_direct_context extension.\n\n    Implemented speaker configuration and headphones detection on CoreAudio.\n\n    Fixed a potential crash with some extension functions on 32-bit Windows.\n\n    Fixed a crash that can occur when stopping playback with the Oboe backend.\n\n    Fixed calculating the reverb room rolloff.\n\n    Fixed EAX occlusion, obstruction, and exclusion low-pass filter strength.\n\n    Fixed EAX distance factor calculations.\n\n    Fixed querying AL_EFFECTSLOT_EFFECT on auxiliary effect slots.\n\n    Fixed compilation on some macOS systems that lack libdispatch.\n\n    Fixed compilation as a subproject with MinGW.\n\n    Changed the context error state to be thread-local. This is technically out\n    of spec, but necessary to avoid race conditions with multi-threaded use.\n\n    Split the cubic resampler into 4-point spline and gaussian variants. The\n    latter prioritizing the suppression of aliasing distortion and harmonics,\n    the former not reducing high frequencies as much.\n\n    Improved timing precision of starting delayed sources.\n\n    Improved ring modulator quality.\n\n    Improved performance of convolution reverb.\n\n    Improved WASAPI device enumeration performance.\n\n    Added UWP support.\n\n    Added 'noexcept' to functions and function types when compiled as C++. As a\n    C API, OpenAL can't be expected to throw C++ exceptions, nor can it handle\n    them if they leave a callback.\n\n    Added an experimental config option for using WASAPI spatial audio output.\n\n    Added enumeration support to the PortAudio backend.\n\n    Added compatibility options to override the AL_VENDOR, AL_VERSION, and\n    AL_RENDERER strings.\n\n    Added an example to play LAF files.\n\n    Disabled real-time mixing by default for PipeWire playback.\n\n    Disabled the SndIO backend by default on non-BSD targets.\n\nopenal-soft-1.23.1:\n\n    Implemented the AL_SOFT_UHJ_ex extension.\n\n    Implemented the AL_SOFT_buffer_length_query extension.\n\n    Implemented the AL_SOFT_source_start_delay extension.\n\n    Implemented the AL_EXT_STATIC_BUFFER extension.\n\n    Fixed compiling with certain older versions of GCC.\n\n    Fixed compiling as a submodule.\n\n    Fixed compiling with newer versions of Oboe.\n\n    Improved EAX effect version switching.\n\n    Improved the quality of the reverb modulator.\n\n    Improved performance of the cubic resampler.\n\n    Added a compatibility option to restore AL_SOFT_buffer_sub_data. The option\n    disables AL_EXT_SOURCE_RADIUS due to incompatibility.\n\n    Reduced CPU usage when EAX is initialized and FXSlot0 or FXSlot1 are not\n    used.\n\n    Reduced memory usage for ADPCM buffer formats. They're no longer converted\n    to 16-bit samples on load.\n\nopenal-soft-1.23.0:\n\n    Fixed CoreAudio capture support.\n\n    Fixed handling per-version EAX properties.\n\n    Fixed interpolating changes to the Super Stereo width source property.\n\n    Fixed detection of the update and buffer size from PipeWire.\n\n    Fixed resuming playback devices with OpenSL.\n\n    Fixed support for certain OpenAL implementations with the router.\n\n    Improved reverb environment transitions.\n\n    Improved performance of convolution reverb.\n\n    Improved quality and performance of the pitch shifter effect slightly.\n\n    Improved sub-sample precision for resampled sources.\n\n    Improved blending spatialized multi-channel sources that use the source\n    radius property.\n\n    Improved mixing 2D ambisonic sources for higher-order 3D ambisonic mixing.\n\n    Improved quadraphonic and 7.1 surround sound output slightly.\n\n    Added config options for UHJ encoding/decoding quality. Including Super\n    Stereo processing.\n\n    Added a config option for specifying the speaker distance.\n\n    Added a compatibility config option for specifying the NFC distance\n    scaling.\n\n    Added a config option for mixing on PipeWire's non-real-time thread.\n\n    Added support for virtual source nodes with PipeWire capture.\n\n    Added the ability for the WASAPI backend to use different playback rates.\n\n    Added support for SOFA files that define per-response delays in makemhr.\n\n    Changed the default fallback playback sample rate to 48khz. This doesn't\n    affect most backends, which can detect a default rate from the system.\n\n    Changed the default resampler to cubic.\n\n    Changed the default HRTF size from 32 to 64 points.\n\nopenal-soft-1.22.2:\n\n    Fixed PipeWire version check.\n\n    Fixed building with PipeWire versions before 0.3.33.\n\nopenal-soft-1.22.1:\n\n    Fixed CoreAudio capture.\n\n    Fixed air absorption strength.\n\n    Fixed handling 5.1 devices on Windows that use Rear channels instead of\n    Side channels.\n\n    Fixed some compilation issues on MinGW.\n\n    Fixed ALSA not being used on some systems without PipeWire and PulseAudio.\n\n    Fixed OpenSL capturing noise.\n\n    Fixed Oboe capture failing with some buffer sizes.\n\n    Added checks for the runtime PipeWire version. The same or newer version\n    than is used for building will be needed at runtime for the backend to\n    work.\n\n    Separated 3D7.1 into its own speaker configuration.\n\nopenal-soft-1.22.0:\n\n    Implemented the ALC_SOFT_reopen_device extension. This allows for moving\n    devices to different outputs without losing object state.\n\n    Implemented the ALC_SOFT_output_mode extension.\n\n    Implemented the AL_SOFT_callback_buffer extension.\n\n    Implemented the AL_SOFT_UHJ extension. This supports native UHJ buffer\n    formats and Super Stereo processing.\n\n    Implemented the legacy EAX extensions. Enabled by default only on Windows.\n\n    Improved sound positioning stability when a source is near the listener.\n\n    Improved the default 5.1 output decoder.\n\n    Improved the high frequency response for the HRTF second-order ambisonic\n    decoder.\n\n    Improved SoundIO capture behavior.\n\n    Fixed UHJ output on NEON-capable CPUs.\n\n    Fixed redundant effect updates when setting an effect property to the\n    current value.\n\n    Fixed WASAPI capture using really low sample rates, and sources with very\n    high pitch shifts when using a bsinc resampler.\n\n    Added a PipeWire backend.\n\n    Added enumeration for the JACK and CoreAudio backends.\n\n    Added optional support for RTKit to get real-time priority. Only used as a\n    backup when pthread_setschedparam fails.\n\n    Added an option for JACK playback to render directly in the real-time\n    processing callback. For lower playback latency, on by default.\n\n    Added an option for custom JACK devices.\n\n    Added utilities to encode and decode UHJ audio files. Files are decoded to\n    the .amb format, and are encoded from libsndfile-compatible formats.\n\n    Added an in-progress extension to hold sources in a playing state when a\n    device disconnects. Allows devices to be reset or reopened and have sources\n    resume from where they left off.\n\n    Lowered the priority of the JACK backend. To avoid it getting picked when\n    PipeWire is providing JACK compatibility, since the JACK backend is less\n    robust with auto-configuration.\n\nopenal-soft-1.21.1:\n\n    Improved alext.h's detection of standard types.\n\n    Improved slightly the local source position when the listener and source\n    are near each other.\n\n    Improved click/pop prevention for sounds that stop prematurely.\n\n    Fixed compilation for Windows ARM targets with MSVC.\n\n    Fixed ARM NEON detection on Windows.\n\n    Fixed CoreAudio capture when the requested sample rate doesn't match the\n    system configuration.\n\n    Fixed OpenSL capture desyncing from the internal capture buffer.\n\n    Fixed sources missing a batch update when applied after quickly restarting\n    the source.\n\n    Fixed missing source stop events when stopping a paused source.\n\n    Added capture support to the experimental Oboe backend.\n\nopenal-soft-1.21.0:\n\n    Updated library codebase to C++14.\n\n    Implemented the AL_SOFT_effect_target extension.\n\n    Implemented the AL_SOFT_events extension.\n\n    Implemented the ALC_SOFT_loopback_bformat extension.\n\n    Improved memory use for mixing voices.\n\n    Improved detection of NEON capabilities.\n\n    Improved handling of PulseAudio devices that lack manual start control.\n\n    Improved mixing performance with PulseAudio.\n\n    Improved high-frequency scaling quality for the HRTF B-Format decoder.\n\n    Improved makemhr's HRIR delay calculation.\n\n    Improved WASAPI capture of mono formats with multichannel input.\n\n    Reimplemented the modulation stage for reverb.\n\n    Enabled real-time mixing priority by default, for backends that use the\n    setting. It can still be disabled in the config file.\n\n    Enabled dual-band processing for the built-in quad and 7.1 output decoders.\n\n    Fixed a potential crash when deleting an effect slot immediately after the\n    last source using it stops.\n\n    Fixed building with the static runtime on MSVC.\n\n    Fixed using source stereo angles outside of -pi...+pi.\n\n    Fixed the buffer processed event count for sources that start with empty\n    buffers.\n\n    Fixed trying to open an unopenable WASAPI device causing all devices to\n    stop working.\n\n    Fixed stale devices when re-enumerating WASAPI devices.\n\n    Fixed using unicode paths with the log file on Windows.\n\n    Fixed DirectSound capture reporting bad sample counts or erroring when\n    reading samples.\n\n    Added an in-progress extension for a callback-driven buffer type.\n\n    Added an in-progress extension for higher-order B-Format buffers.\n\n    Added an in-progress extension for convolution reverb.\n\n    Added an experimental Oboe backend for Android playback. This requires the\n    Oboe sources at build time, so that it's built as a static library included\n    in libopenal.\n\n    Added an option for auto-connecting JACK ports.\n\n    Added greater-than-stereo support to the SoundIO backend.\n\n    Modified the mixer to be fully asynchronous with the external API, and\n    should now be real-time safe. Although alcRenderSamplesSOFT is not due to\n    locking to check the device handle validity.\n\n    Modified the UHJ encoder to use an all-pass FIR filter that's less harmful\n    to non-filtered signal phase.\n\n    Converted examples from SDL_sound to libsndfile. To avoid issues when\n    combining SDL2 and SDL_sound.\n\n    Worked around a 32-bit GCC/MinGW bug with TLS destructors. See:\n    https://gcc.gnu.org/bugzilla/show_bug.cgi?id=83562\n\n    Reduced the maximum number of source sends from 16 to 6.\n\n    Removed the QSA backend. It's been broken for who knows how long.\n\n    Got rid of the compile-time native-tools targets, using cmake and global\n    initialization instead. This should make cross-compiling less troublesome.\n\nopenal-soft-1.20.1:\n\n    Implemented the AL_SOFT_direct_channels_remix extension. This extends\n    AL_DIRECT_CHANNELS_SOFT to optionally remix input channels that don't have\n    a matching output channel.\n\n    Implemented the AL_SOFT_bformat_ex extension. This extends B-Format buffer\n    support for N3D or SN3D scaling, or ACN channel ordering.\n\n    Fixed a potential voice leak when a source is started and stopped or\n    restarted in quick succession.\n\n    Fixed a potential device reset failure with JACK.\n\n    Improved handling of unsupported channel configurations with WASAPI. Such\n    setups will now try to output at least a stereo mix.\n\n    Improved clarity a bit for the HRTF second-order ambisonic decoder.\n\n    Improved detection of compatible layouts for SOFA files in makemhr and\n    sofa-info.\n\n    Added the ability to resample HRTFs on load. MHR files no longer need to\n    match the device sample rate to be usable.\n\n    Added an option to limit the HRTF's filter length.\n\nopenal-soft-1.20.0:\n\n    Converted the library codebase to C++11. A lot of hacks and custom\n    structures have been replaced with standard or cleaner implementations.\n\n    Partially implemented the Vocal Morpher effect.\n\n    Fixed the bsinc SSE resamplers on non-GCC compilers.\n\n    Fixed OpenSL capture.\n\n    Fixed support for extended capture formats with OpenSL.\n\n    Fixed handling of WASAPI not reporting a default device.\n\n    Fixed performance problems relating to semaphores on macOS.\n\n    Modified the bsinc12 resampler's transition band to better avoid aliasing\n    noise.\n\n    Modified alcResetDeviceSOFT to attempt recovery of disconnected devices.\n\n    Modified the virtual speaker layout for HRTF B-Format decoding.\n\n    Modified the PulseAudio backend to use a custom processing loop.\n\n    Renamed the makehrtf utility to makemhr.\n\n    Improved the efficiency of the bsinc resamplers when up-sampling.\n\n    Improved the quality of the bsinc resamplers slightly.\n\n    Improved the efficiency of the HRTF filters.\n\n    Improved the HRTF B-Format decoder coefficient generation.\n\n    Improved reverb feedback fading to be more consistent with pan fading.\n\n    Improved handling of sources that end prematurely, avoiding loud clicks.\n\n    Improved the performance of some reverb processing loops.\n\n    Added fast_bsinc12 and 24 resamplers that improve efficiency at the cost of\n    some quality. Notably, down-sampling has less smooth pitch ramping.\n\n    Added support for SOFA input files with makemhr.\n\n    Added a build option to use pre-built native tools. For cross-compiling,\n    use with caution and ensure the native tools' binaries are kept up-to-date.\n\n    Added an adjust-latency config option for the PulseAudio backend.\n\n    Added basic support for multi-field HRTFs.\n\n    Added an option for mixing first- or second-order B-Format with HRTF\n    output. This can improve HRTF performance given a number of sources.\n\n    Added an RC file for proper DLL version information.\n\n    Disabled some old KDE workarounds by default. Specifically, PulseAudio\n    streams can now be moved (KDE may try to move them after opening).\n\nopenal-soft-1.19.1:\n\n    Implemented capture support for the SoundIO backend.\n\n    Fixed source buffer queues potentially not playing properly when a queue\n    entry completes.\n\n    Fixed possible unexpected failures when generating auxiliary effect slots.\n\n    Fixed a crash with certain reverb or device settings.\n\n    Fixed OpenSL capture.\n\n    Improved output limiter response, better ensuring the sample amplitude is\n    clamped for output.\n\nopenal-soft-1.19.0:\n\n    Implemented the ALC_SOFT_device_clock extension.\n\n    Implemented the Pitch Shifter, Frequency Shifter, and Autowah effects.\n\n    Fixed compiling on FreeBSD systems that use freebsd-lib 9.1.\n\n    Fixed compiling on NetBSD.\n\n    Fixed the reverb effect's density scale and panning parameters.\n\n    Fixed use of the WASAPI backend with certain games, which caused odd COM\n    initialization errors.\n\n    Increased the number of virtual channels for decoding Ambisonics to HRTF\n    output.\n\n    Changed 32-bit x86 builds to use SSE2 math by default for performance.\n    Build-time options are available to use just SSE1 or x87 instead.\n\n    Replaced the 4-point Sinc resampler with a more efficient cubic resampler.\n\n    Renamed the MMDevAPI backend to WASAPI.\n\n    Added support for 24-bit, dual-ear HRTF data sets. The built-in data set\n    has been updated to 24-bit.\n\n    Added a 24- to 48-point band-limited Sinc resampler.\n\n    Added an SDL2 playback backend. Disabled by default to avoid a dependency\n    on SDL2.\n\n    Improved the performance and quality of the Chorus and Flanger effects.\n\n    Improved the efficiency of the band-limited Sinc resampler.\n\n    Improved the Sinc resampler's transition band to avoid over-attenuating\n    higher frequencies.\n\n    Improved the performance of some filter operations.\n\n    Improved the efficiency of object ID lookups.\n\n    Improved the efficienty of internal voice/source synchronization.\n\n    Improved AL call error logging with contextualized messages.\n\n    Removed the reverb effect's modulation stage. Due to the lack of reference\n    for its intended behavior and strength.\n\nopenal-soft-1.18.2:\n\n    Fixed resetting the FPU rounding mode after certain function calls on\n    Windows.\n\n    Fixed use of SSE intrinsics when building with Clang on Windows.\n\n    Fixed a crash with the JACK backend when using JACK1.\n\n    Fixed use of pthread_setnane_np on NetBSD.\n\n    Fixed building on FreeBSD with an older freebsd-lib.\n\n    OSS now links with libossaudio if found at build time (for NetBSD).\n\nopenal-soft-1.18.1:\n\n    Fixed an issue where resuming a source might not restart playing it.\n\n    Fixed PulseAudio playback when the configured stream length is much less\n    than the requested length.\n\n    Fixed MMDevAPI capture with sample rates not matching the backing device.\n\n    Fixed int32 output for the Wave Writer.\n\n    Fixed enumeration of OSS devices that are missing device files.\n\n    Added correct retrieval of the executable's path on FreeBSD.\n\n    Added a config option to specify the dithering depth.\n\n    Added a 5.1 decoder preset that excludes front-center output.\n\nopenal-soft-1.18.0:\n\n    Implemented the AL_EXT_STEREO_ANGLES and AL_EXT_SOURCE_RADIUS extensions.\n\n    Implemented the AL_SOFT_gain_clamp_ex, AL_SOFT_source_resampler,\n    AL_SOFT_source_spatialize, and ALC_SOFT_output_limiter extensions.\n\n    Implemented 3D processing for some effects. Currently implemented for\n    Reverb, Compressor, Equalizer, and Ring Modulator.\n\n    Implemented 2-channel UHJ output encoding. This needs to be enabled with a\n    config option to be used.\n\n    Implemented dual-band processing for high-quality ambisonic decoding.\n\n    Implemented distance-compensation for surround sound output.\n\n    Implemented near-field emulation and compensation with ambisonic rendering.\n    Currently only applies when using the high-quality ambisonic decoder or\n    ambisonic output, with appropriate config options.\n\n    Implemented an output limiter to reduce the amount of distortion from\n    clipping.\n\n    Implemented dithering for 8-bit and 16-bit output.\n\n    Implemented a config option to select a preferred HRTF.\n\n    Implemented a run-time check for NEON extensions using /proc/cpuinfo.\n\n    Implemented experimental capture support for the OpenSL backend.\n\n    Fixed building on compilers with NEON support but don't default to having\n    NEON enabled.\n\n    Fixed support for JACK on Windows.\n\n    Fixed starting a source while alcSuspendContext is in effect.\n\n    Fixed detection of headsets as headphones, with MMDevAPI.\n\n    Added support for AmbDec config files, for custom ambisonic decoder\n    configurations. Version 3 files only.\n\n    Added backend-specific options to alsoft-config.\n\n    Added first-, second-, and third-order ambisonic output formats. Currently\n    only works with backends that don't rely on channel labels, like JACK,\n    ALSA, and OSS.\n\n    Added a build option to embed the default HRTFs into the lib.\n\n    Added AmbDec presets to enable high-quality ambisonic decoding.\n\n    Added an AmbDec preset for 3D7.1 speaker setups.\n\n    Added documentation regarding Ambisonics, 3D7.1, AmbDec config files, and\n    the provided ambdec presets.\n\n    Added the ability for MMDevAPI to open devices given a Device ID or GUID\n    string.\n\n    Added an option to the example apps to open a specific device.\n\n    Increased the maximum auxiliary send limit to 16 (up from 4). Requires\n    requesting them with the ALC_MAX_AUXILIARY_SENDS context creation\n    attribute.\n\n    Increased the default auxiliary effect slot count to 64 (up from 4).\n\n    Reduced the default period count to 3 (down from 4).\n\n    Slightly improved automatic naming for enumerated HRTFs.\n\n    Improved B-Format decoding with HRTF output.\n\n    Improved internal property handling for better batching behavior.\n\n    Improved performance of certain filter uses.\n\n    Removed support for the AL_SOFT_buffer_samples and AL_SOFT_buffer_sub_data\n    extensions. Due to conflicts with AL_EXT_SOURCE_RADIUS.\n\nopenal-soft-1.17.2:\n\n    Implemented device enumeration for OSSv4.\n\n    Fixed building on OSX.\n\n    Fixed building on non-Windows systems without POSIX-2008.\n\n    Fixed Dedicated Dialog and Dedicated LFE effect output.\n\n    Added a build option to override the share install dir.\n\n    Added a build option to static-link libgcc for MinGW.\n\nopenal-soft-1.17.1:\n\n    Fixed building with JACK and without PulseAudio.\n\n    Fixed building on FreeBSD.\n\n    Fixed the ALSA backend's allow-resampler option.\n\n    Fixed handling of inexact ALSA period counts.\n\n    Altered device naming scheme on Windows backends to better match other\n    drivers.\n\n    Updated the CoreAudio backend to use the AudioComponent API. This clears up\n    deprecation warnings for OSX 10.11, although requires OSX 10.6 or newer.\n\nopenal-soft-1.17.0:\n\n    Implemented a JACK playback backend.\n\n    Implemented the AL_EXT_BFORMAT and AL_EXT_MULAW_BFORMAT extensions.\n\n    Implemented the ALC_SOFT_HRTF extension.\n\n    Implemented C, SSE3, and SSE4.1 based 4- and 8-point Sinc resamplers.\n\n    Implemented a C and SSE based band-limited Sinc resampler. This does 12- to\n    24-point Sinc resampling, and performs anti-aliasing.\n\n    Implemented B-Format output support for the wave file writer. This creates\n    FuMa-style first-order Ambisonics wave files (AMB format).\n\n    Implemented a stereo-mode config option for treating stereo modes as either\n    speakers or headphones.\n\n    Implemented per-device configuration options.\n\n    Fixed handling of PulseAudio and MMDevAPI devices that have identical\n    descriptions.\n\n    Fixed a potential lockup when stopping playback of suspended PulseAudio devices.\n\n    Fixed logging of Unicode characters on Windows.\n\n    Fixed 5.1 surround sound channels. By default it will now use the side\n    channels for the surround output. A configuration using rear channels is\n    still available.\n\n    Fixed the QSA backend potentially altering the capture format.\n\n    Fixed detecting MMDevAPI's default device.\n\n    Fixed returning the default capture device name.\n\n    Fixed mixing property calculations when deferring context updates.\n\n    Altered the behavior of alcSuspendContext and alcProcessContext to better\n    match certain Windows drivers.\n\n    Altered the panning algorithm, utilizing Ambisonics for better side and\n    back positioning cues with surround sound output.\n\n    Improved support for certain older Windows apps.\n\n    Improved the alffplay example to support surround sound streams.\n\n    Improved support for building as a sub-project.\n\n    Added an HRTF playback example.\n\n    Added a tone generator output test.\n\n    Added a toolchain to help with cross-compiling to Android.\n\nopenal-soft-1.16.0:\n\n    Implemented EFX Chorus, Flanger, Distortion, Equalizer, and Compressor\n    effects.\n\n    Implemented high-pass and band-pass EFX filters.\n\n    Implemented the high-pass filter for the EAXReverb effect.\n\n    Implemented SSE2 and SSE4.1 linear resamplers.\n\n    Implemented Neon-enhanced non-HRTF mixers.\n\n    Implemented a QSA backend, for QNX.\n\n    Implemented the ALC_SOFT_pause_device, AL_SOFT_deferred_updates,\n    AL_SOFT_block_alignment, AL_SOFT_MSADPCM, and AL_SOFT_source_length\n    extensions.\n\n    Fixed resetting mmdevapi backend devices.\n\n    Fixed clamping when converting 32-bit float samples to integer.\n\n    Fixed modulation range in the Modulator effect.\n\n    Several fixes for the OpenSL playback backend.\n\n    Fixed device specifier names that have Unicode characters on Windows.\n\n    Added support for filenames and paths with Unicode (UTF-8) characters on\n    Windows.\n\n    Added support for alsoft.conf config files found in XDG Base Directory\n    Specification locations (XDG_CONFIG_DIRS and XDG_CONFIG_HOME, or their\n    defaults) on non-Windows systems.\n\n    Added a GUI configuration utility (requires Qt 4.8).\n\n    Added support for environment variable expansion in config options (not\n    keys or section names).\n\n    Added an example that uses SDL2 and ffmpeg.\n\n    Modified examples to use SDL_sound.\n\n    Modified CMake config option names for better sorting.\n\n    HRTF data sets specified in the hrtf_tables config option may now be\n    relative or absolute filenames.\n\n    Made the default HRTF data set an external file, and added a data set for\n    48khz playback in addition to 44.1khz.\n\n    Added support for C11 atomic methods.\n\n    Improved support for some non-GNU build systems.\n\nopenal-soft-1.15.1:\n\n    Fixed a regression with retrieving the source's AL_GAIN property.\n\nopenal-soft-1.15:\n\n    Fixed device enumeration with the OSS backend.\n\n    Reorganized internal mixing logic, so unneeded steps can potentially be\n    skipped for better performance.\n\n    Removed the lookup table for calculating the mixing pans. The panning is\n    now calculated directly for better precision.\n\n    Improved the panning of stereo source channels when using stereo output.\n\n    Improved source filter quality on send paths.\n\n    Added a config option to allow PulseAudio to move streams between devices.\n\n    The PulseAudio backend will now attempt to spawn a server by default.\n\n    Added a workaround for a DirectSound bug relating to float32 output.\n\n    Added SSE-based mixers, for HRTF and non-HRTF mixing.\n\n    Added support for the new AL_SOFT_source_latency extension.\n\n    Improved ALSA capture by avoiding an extra buffer when using sizes\n    supported by the underlying device.\n\n    Improved the makehrtf utility to support new options and input formats.\n\n    Modified the CFLAGS declared in the pkg-config file so the \"AL/\" portion of\n    the header includes can optionally be omitted.\n\n    Added a couple example code programs to show how to apply reverb, and\n    retrieve latency.\n\n    The configuration sample is now installed into the share/openal/ directory\n    instead of /etc/openal.\n\n    The configuration sample now gets installed by default.\n"
        },
        {
          "name": "LICENSE-pffft",
          "type": "blob",
          "size": 1.6298828125,
          "content": "A modified PFFFT is included, with the following license.\n\nCopyright (c) 2023  Christopher Robinson\n\nCopyright (c) 2013  Julien Pommier ( pommier@modartt.com )\n\nCopyright (c) 2004 the University Corporation for Atmospheric\nResearch (\"UCAR\"). All rights reserved. Developed by NCAR's\nComputational and Information Systems Laboratory, UCAR,\nwww.cisl.ucar.edu.\n\nRedistribution and use of the Software in source and binary forms,\nwith or without modification, is permitted provided that the\nfollowing conditions are met:\n\n- Neither the names of NCAR's Computational and Information Systems\nLaboratory, the University Corporation for Atmospheric Research,\nnor the names of its sponsors or contributors may be used to\nendorse or promote products derived from this Software without\nspecific prior written permission.\n\n- Redistributions of source code must retain the above copyright\nnotices, this list of conditions, and the disclaimer below.\n\n- Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions, and the disclaimer below in the\ndocumentation and/or other materials provided with the\ndistribution.\n\nTHIS SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES OR OTHER LIABILITY, WHETHER IN AN\nACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE\nSOFTWARE.\n"
        },
        {
          "name": "OpenALConfig.cmake.in",
          "type": "blob",
          "size": 0.3828125,
          "content": "cmake_minimum_required(VERSION 3.1...3.18)\n\ninclude(\"${CMAKE_CURRENT_LIST_DIR}/OpenALTargets.cmake\")\n\nset(OPENAL_FOUND ON)\nset(OPENAL_INCLUDE_DIR $<TARGET_PROPERTY:OpenAL::OpenAL,INTERFACE_INCLUDE_DIRECTORIES>)\nset(OPENAL_LIBRARY $<LINK_ONLY:OpenAL::OpenAL>)\nset(OPENAL_DEFINITIONS $<TARGET_PROPERTY:OpenAL::OpenAL,INTERFACE_COMPILE_DEFINITIONS>)\nset(OPENAL_VERSION_STRING @PACKAGE_VERSION@)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.232421875,
          "content": "OpenAL Soft\n===========\n\n`master` branch CI status : [![GitHub Actions Status](https://github.com/kcat/openal-soft/actions/workflows/ci.yml/badge.svg)](https://github.com/kcat/openal-soft/actions) [![Windows Build Status](https://ci.appveyor.com/api/projects/status/github/kcat/openal-soft?branch=master&svg=true)](https://ci.appveyor.com/api/projects/status/github/kcat/openal-soft?branch=master&svg=true)\n\nOpenAL Soft is an LGPL-licensed, cross-platform, software implementation of the OpenAL 3D audio API. It's forked from the open-sourced Windows version available originally from openal.org's SVN repository (now defunct).\nOpenAL provides capabilities for playing audio in a virtual 3D environment. Distance attenuation, doppler shift, and directional sound emitters are among the features handled by the API. More advanced effects, including air absorption, occlusion, and environmental reverb, are available through the EFX extension. It also facilitates streaming audio, multi-channel buffers, and audio capture.\n\nMore information is available on the [official website](http://openal-soft.org/).\n\nSource Install\n-------------\nTo install OpenAL Soft, use your favorite shell to go into the build/\ndirectory, and run:\n\n```bash\ncmake ..\n```\n\nAlternatively, you can use any available CMake front-end, like cmake-gui,\nccmake, or your preferred IDE's CMake project parser.\n\nAssuming configuration went well, you can then build it. The command\n`cmake --build .` will instruct CMake to build the project with the toolchain\nchosen during configuration (often GNU Make or NMake, although others are\npossible).\n\nPlease Note: Double check that the appropriate backends were detected. Often,\ncomplaints of no sound, crashing, and missing devices can be solved by making\nsure the correct backends are being used. CMake's output will identify which\nbackends were enabled.\n\nFor most systems, you will likely want to make sure PipeWire, PulseAudio, and\nALSA were detected (if your target system uses them). For Windows, make sure\nWASAPI was detected.\n\n\nBuilding openal-soft - Using vcpkg\n----------------------------------\n\nYou can download and install openal-soft using the [vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\n\n    git clone https://github.com/Microsoft/vcpkg.git\n    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n    ./vcpkg install openal-soft\n\nThe openal-soft port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\nUtilities\n---------\nThe source package comes with an informational utility, openal-info, and is\nbuilt by default. It prints out information provided by the ALC and AL sub-\nsystems, including discovered devices, version information, and extensions.\n\n\nConfiguration\n-------------\n\nOpenAL Soft can be configured on a per-user and per-system basis. This allows\nusers and sysadmins to control information provided to applications, as well\nas application-agnostic behavior of the library. See alsoftrc.sample for\navailable settings.\n\n\nLanguage Bindings\n-----------------\n\nAs a C API, OpenAL Soft can be used directly by any language that can use\nfunctions with C linkage. For languages that can't directly use C-style\nheaders, bindings may be developed to allow code written in that language to\ncall into the library. Some bindings for some languages are listed here.\n\nC# Bindings:\n* [OpenTK](https://opentk.net/) includes low-level C# bindings for the OpenAL\nAPI, including some extensions. It also includes utility libraries for math and\nlinear algebra, which can be useful for 3D calculations.\n\nJava Bindings:\n* [LWJGL](https://github.com/LWJGL/lwjgl3), the Lightweight Java Game Library,\nincludes Java bindings for the OpenAL API, usable with OpenAL Soft.\n* [JOAL](https://jogamp.org/joal/www/), part of the JogAmp project, includes\nJava bindings for the OpenAL API, usable with OpenAL Soft. It also includes a\nhigher level Sound3D Toolkit API and utility functions to make easier use of\nOpenAL features and capabilities.\n\nKotlin Bindings:\n* [Multiplatform OpenAL](https://git.karmakrafts.dev/kk/multiplatform-openal), developed for the Kleaver project,\nincludes Kotlin/Native bindings for the OpenAL API, based on OpenAL Soft with support\nfor Windows, Linux, macOS, iOS and Android.\n\nPython Bindings:\n* [PyOpenAL](https://pypi.org/project/PyOpenAL/). Also includes methods to play\nwave files and, with PyOgg, also Vorbis, Opus, and FLAC.\n\nFreePascal/Lazarus Bindings:\n* [ALSound](https://github.com/Lulu04/ALSound). Also includes a higher level\nAPI and libsndfile support to simplify loading and playing sounds.\n\nOther bindings for these and other languages also exist. This list will grow as\nmore bindings are found.\n\n\nAcknowledgements\n----------------\n\nSpecial thanks go to:\n\n - Creative Labs for the original source code this is based off of.\n - Christopher Fitzgerald for the current reverb effect implementation, and\nhelping with the low-pass and HRTF filters.\n - Christian Borss for the 3D panning code previous versions used as a base.\n - Ben Davis for the idea behind a previous version of the click-removal code.\n - Richard Furse for helping with my understanding of Ambisonics that is used by\nthe various parts of the library.\n"
        },
        {
          "name": "XCompile-Android.txt",
          "type": "blob",
          "size": 0.6923828125,
          "content": "# Cross-compiling for Android is handled by the NDK's own provided toolchain,\n# which as of this writing, should be in\n# ${ndk_root}/build/cmake/android.toolchain.cmake\n#\n# Certain older NDK versions may also need to explicitly pick the libc++\n# runtime. So for example:\n# cmake .. -DANDROID_STL=c++_shared \\\n#     -DCMAKE_TOOLCHAIN_FILE=${ndk_root}/build/cmake/android.toolchain.cmake\n#\n# Certain NDK versions may also need to use the lld linker to avoid errors\n# about missing liblog.so and libOpenSLES.so. That can be done by:\n# cmake .. -DANDROID_LD=lld \\\n#     -DCMAKE_TOOLCHAIN_FILE=${ndk_root}/build/cmake/android.toolchain.cmake\n#\n\nMESSAGE(FATAL_ERROR \"Use the toolchain provided by the Android NDK\")\n"
        },
        {
          "name": "XCompile.txt",
          "type": "blob",
          "size": 1.48046875,
          "content": "# Cross-compiling requires CMake 2.6 or newer. Example:\n# cmake .. -DCMAKE_TOOLCHAIN_FILE=../XCompile.txt -DHOST=i686-w64-mingw32\n# Where 'i686-w64-mingw32' is the host prefix for your cross-compiler. If you\n# already have a toolchain file setup, you may use that instead of this file.\n\n# the name of the target operating system\nSET(CMAKE_SYSTEM_NAME Windows)\n\n# which compilers to use for C and C++\nSET(CMAKE_C_COMPILER \"${HOST}-gcc\")\nSET(CMAKE_CXX_COMPILER \"${HOST}-g++\")\nSET(CMAKE_RC_COMPILER \"${HOST}-windres\")\n\n# here is the target environment located\nSET(CMAKE_FIND_ROOT_PATH \"/usr/${HOST}\")\n\n# here is where stuff gets installed to\nSET(CMAKE_INSTALL_PREFIX \"${CMAKE_FIND_ROOT_PATH}\" CACHE STRING \"Install path prefix, prepended onto install directories.\" FORCE)\n\n# adjust the default behaviour of the FIND_XXX() commands:\n# search headers and libraries in the target environment, search \n# programs in the host environment\nset(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\nset(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\nset(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\n\n# set env vars so that pkg-config will look in the appropriate directory for\n# .pc files (as there seems to be no way to force using ${HOST}-pkg-config)\nset(ENV{PKG_CONFIG_LIBDIR} \"${CMAKE_INSTALL_PREFIX}/lib/pkgconfig\")\nset(ENV{PKG_CONFIG_PATH} \"\")\n\n# Qt4 tools\nSET(QT_QMAKE_EXECUTABLE ${HOST}-qmake)\nSET(QT_MOC_EXECUTABLE ${HOST}-moc)\nSET(QT_RCC_EXECUTABLE ${HOST}-rcc)\nSET(QT_UIC_EXECUTABLE ${HOST}-uic)\nSET(QT_LRELEASE_EXECUTABLE ${HOST}-lrelease)\n"
        },
        {
          "name": "al",
          "type": "tree",
          "content": null
        },
        {
          "name": "alc",
          "type": "tree",
          "content": null
        },
        {
          "name": "alsoftrc.sample",
          "type": "blob",
          "size": 26.97265625,
          "content": "# OpenAL config file.\n#\n# Option blocks may appear multiple times, and duplicated options will take the\n# last value specified. Environment variables may be specified within option\n# values, and are automatically substituted when the config file is loaded.\n# Environment variable names may only contain alpha-numeric characters (a-z,\n# A-Z, 0-9) and underscores (_), and are prefixed with $. For example,\n# specifying \"$HOME/file.ext\" would typically result in something like\n# \"/home/user/file.ext\". To specify an actual \"$\" character, use \"$$\".\n#\n# Device-specific values may be specified by including the device name in the\n# block name, with \"general\" replaced by the device name. That is, general\n# options for the device \"Name of Device\" would be in the [Name of Device]\n# block, while ALSA options would be in the [alsa/Name of Device] block.\n# Options marked as \"(global)\" are not influenced by the device.\n#\n# The system-wide settings can be put in /etc/xdg/alsoft.conf (as determined by\n# the XDG_CONFIG_DIRS env var list, /etc/xdg being the default if unset) and\n# user-specific override settings in $HOME/.config/alsoft.conf (as determined\n# by the XDG_CONFIG_HOME env var).\n#\n# For Windows, these settings should go into $AppData\\alsoft.ini\n#\n# An additional configuration file (alsoft.ini on Windows, alsoft.conf on other\n# OSs) can be placed alongside the process executable for app-specific config\n# settings.\n#\n# Option and block names are case-senstive. The supplied values are only hints\n# and may not be honored (though generally it'll try to get as close as\n# possible). Note: options that are left unset may default to app- or system-\n# specified values. These are the current available settings:\n\n##\n## General stuff\n##\n[general]\n\n## disable-cpu-exts: (global)\n#  Disables use of specialized methods that use specific CPU intrinsics.\n#  Certain methods may utilize CPU extensions for improved performance, and\n#  this option is useful for preventing some or all of those methods from being\n#  used. The available extensions are: sse, sse2, sse3, sse4.1, and neon.\n#  Specifying 'all' disables use of all such specialized methods.\n#disable-cpu-exts =\n\n## drivers: (global)\n#  Sets the backend driver list order, comma-seperated. Unknown backends and\n#  duplicated names are ignored. Unlisted backends won't be considered for use\n#  unless the list is ended with a comma (e.g. 'oss,' will try OSS first before\n#  other backends, while 'oss' will try OSS only). Backends prepended with -\n#  won't be considered for use (e.g. '-oss,' will try all available backends\n#  except OSS). An empty list means to try all backends.\n#drivers =\n\n## channels:\n#  Sets the default output channel configuration. If left unspecified, one will\n#  try to be detected from the system, with a fallback to stereo. The available\n#  values are: mono, stereo, quad, surround51, surround61, surround71,\n#  surround714, surround3d71, ambi1, ambi2, ambi3. Note that the ambi*\n#  configurations output ambisonic channels of the given order (using ACN\n#  ordering and SN3D normalization by default), which need to be decoded to\n#  play correctly on speakers.\n#channels =\n\n## sample-type:\n#  Sets the default output sample type. Currently, all mixing is done with\n#  32-bit float and converted to the output sample type as needed. Available\n#  values are:\n#  int8    - signed 8-bit int\n#  uint8   - unsigned 8-bit int\n#  int16   - signed 16-bit int\n#  uint16  - unsigned 16-bit int\n#  int32   - signed 32-bit int\n#  uint32  - unsigned 32-bit int\n#  float32 - 32-bit float\n#sample-type = float32\n\n## frequency:\n#  Sets the default output frequency. If left unspecified it will try to detect\n#  a default from the system, otherwise it will fallback to 48000.\n#frequency =\n\n## period_size:\n#  Sets the update period size, in sample frames. This is the number of frames\n#  needed for each mixing update. Acceptable values range between 64 and 8192.\n#  If left unspecified it will default to 1/50th of the frequency (20ms, or 882\n#  for 44100, 960 for 48000, etc).\n#period_size =\n\n## periods:\n#  Sets the number of update periods. Higher values create a larger mix ahead,\n#  which helps protect against skips when the CPU is under load, but increases\n#  the delay between a sound getting mixed and being heard. Acceptable values\n#  range between 2 and 16.\n#periods = 3\n\n## stereo-mode:\n#  Specifies if stereo output is treated as being headphones or speakers. With\n#  headphones, HRTF or crossfeed filters may be used for better audio quality.\n#  Valid settings are auto, speakers, and headphones.\n#stereo-mode = auto\n\n## stereo-encoding:\n#  Specifies the default encoding method for stereo output. Valid values are:\n#  basic - Standard amplitude panning (aka pair-wise, stereo pair, etc) between\n#          -30 and +30 degrees.\n#  uhj - Creates a stereo-compatible two-channel UHJ mix, which encodes some\n#        surround sound information into stereo output that can be decoded with\n#        a surround sound receiver.\n#  hrtf - Uses filters to provide better spatialization of sounds while using\n#         stereo headphones.\n#  If crossfeed filters are used, basic stereo mixing is used.\n#stereo-encoding = basic\n\n## ambi-format:\n#  Specifies the channel order and normalization for the \"ambi*\" set of channel\n#  configurations. Valid settings are: fuma, acn+fuma, ambix (or acn+sn3d), or\n#  acn+n3d\n#ambi-format = ambix\n\n## hrtf:\n#  Deprecated. Consider using stereo-encoding instead. Valid values are auto,\n#  off, and on.\n#hrtf = auto\n\n## hrtf-mode:\n#  Specifies the rendering mode for HRTF processing. Setting the mode to full\n#  (default) applies a unique HRIR filter to each source given its relative\n#  location, providing the clearest directional response at the cost of the\n#  highest CPU usage. Setting the mode to ambi1, ambi2, or ambi3 will instead\n#  mix to a first-, second-, or third-order ambisonic buffer respectively, then\n#  decode that buffer with HRTF filters. Ambi1 has the lowest CPU usage,\n#  replacing the per-source HRIR filter for a simple 4-channel panning mix, but\n#  retains full 3D placement at the cost of a more diffuse response. Ambi2 and\n#  ambi3 increasingly improve the directional clarity, at the cost of more CPU\n#  usage (still less than \"full\", given some number of active sources).\n#hrtf-mode = full\n\n## hrtf-size:\n#  Specifies the impulse response size, in samples, for the HRTF filter. Larger\n#  values increase the filter quality, while smaller values reduce processing\n#  cost. A value of 0 (default) uses the full filter size in the dataset, and\n#  the default dataset has a filter size of 64 samples at 48khz.\n#hrtf-size = 0\n\n## default-hrtf:\n#  Specifies the default HRTF to use. When multiple HRTFs are available, this\n#  determines the preferred one to use if none are specifically requested. Note\n#  that this is the enumerated HRTF name, not necessarily the filename.\n#default-hrtf =\n\n## hrtf-paths:\n#  Specifies a comma-separated list of paths containing HRTF data sets. The\n#  format of the files are described in docs/hrtf.txt. The files within the\n#  directories must have the .mhr file extension to be recognized. By default,\n#  OS-dependent data paths will be used. They will also be used if the list\n#  ends with a comma. On Windows this is:\n#  $AppData\\openal\\hrtf\n#  And on other systems, it's (in order):\n#  $XDG_DATA_HOME/openal/hrtf  (defaults to $HOME/.local/share/openal/hrtf)\n#  $XDG_DATA_DIRS/openal/hrtf  (defaults to /usr/local/share/openal/hrtf and\n#                               /usr/share/openal/hrtf)\n#hrtf-paths =\n\n## cf_level:\n#  Sets the crossfeed level for stereo output. Valid values are:\n#  0 - No crossfeed\n#  1 - Low crossfeed\n#  2 - Middle crossfeed\n#  3 - High crossfeed (virtual speakers are closer to itself)\n#  4 - Low easy crossfeed\n#  5 - Middle easy crossfeed\n#  6 - High easy crossfeed\n#  Users of headphones may want to try various settings. Has no effect on non-\n#  stereo modes.\n#cf_level = 0\n\n## resampler: (global)\n#  Selects the default resampler used when mixing sources. Valid values are:\n#  point - nearest sample, no interpolation\n#  linear - extrapolates samples using a linear slope between samples\n#  spline - extrapolates samples using a Catmull-Rom spline\n#  gaussian - extrapolates samples using a 4-point Gaussian filter\n#  bsinc12 - extrapolates samples using a band-limited Sinc filter (varying\n#            between 12 and 24 points, with anti-aliasing)\n#  fast_bsinc12 - same as bsinc12, except without interpolation between down-\n#                 sampling scales\n#  bsinc24 - extrapolates samples using a band-limited Sinc filter (varying\n#            between 24 and 48 points, with anti-aliasing)\n#  fast_bsinc24 - same as bsinc24, except without interpolation between down-\n#                 sampling scales\n#resampler = gaussian\n\n## rt-prio: (global)\n#  Sets the real-time priority value for the mixing thread. Not all drivers may\n#  use this (eg. PortAudio) as those APIs already control the priority of the\n#  mixing thread. 0 and negative values will disable real-time priority. Note\n#  that this may constitute a security risk since a real-time priority thread\n#  can indefinitely block normal-priority threads if it fails to wait. Disable\n#  this if it turns out to be a problem.\n#rt-prio = 1\n\n## rt-time-limit: (global)\n#  On non-Windows systems, allows reducing the process's RLIMIT_RTTIME resource\n#  as necessary for acquiring real-time priority from RTKit.\n#rt-time-limit = true\n\n## sources:\n#  Sets the maximum number of allocatable sources. Lower values may help for\n#  systems with apps that try to play more sounds than the CPU can handle.\n#sources = 256\n\n## slots:\n#  Sets the maximum number of Auxiliary Effect Slots an app can create. A slot\n#  can use a non-negligible amount of CPU time if an effect is set on it even\n#  if no sources are feeding it, so this may help when apps use more than the\n#  system can handle.\n#slots = 64\n\n## sends:\n#  Limits the number of auxiliary sends allowed per source. Setting this higher\n#  than the default has no effect.\n#sends = 6\n\n## front-stablizer:\n#  Applies filters to \"stablize\" front sound imaging. A psychoacoustic method\n#  is used to generate a front-center channel signal from the front-left and\n#  front-right channels, improving the front response by reducing the combing\n#  artifacts and phase errors. Consequently, it will only work with channel\n#  configurations that include front-left, front-right, and front-center.\n#front-stablizer = false\n\n## output-limiter:\n#  Applies a gain limiter on the final mixed output. This reduces the volume\n#  when the output samples would otherwise clamp, avoiding excessive clipping\n#  noise. On by default for integer sample types, and off by default for\n#  floating-point.\n#output-limiter =\n\n## dither:\n#  Applies dithering on the final mix, enabled by default for 8- and 16-bit\n#  output. This replaces the distortion created by nearest-value quantization\n#  with low-level whitenoise.\n#dither =\n\n## dither-depth:\n#  Quantization bit-depth for dithered output. A value of 0 (or less) will\n#  match the output sample depth. For int32, uint32, and float32 output, 0 will\n#  disable dithering because they're at or beyond the rendered precision. The\n#  maximum dither depth is 24.\n#dither-depth = 0\n\n## volume-adjust:\n#  A global volume adjustment for source output, expressed in decibels. The\n#  value is logarithmic, so +6 will be a scale of (approximately) 2x, +12 will\n#  be a scale of 4x, etc. Similarly, -6 will be x1/2, and -12 is about x1/4. A\n#  value of 0 means no change.\n#volume-adjust = 0\n\n## excludefx: (global)\n#  Sets which effects to exclude, preventing apps from using them. This can\n#  help for apps that try to use effects which are too CPU intensive for the\n#  system to handle. Available effects are: eaxreverb,reverb,autowah,chorus,\n#  compressor,distortion,echo,equalizer,flanger,modulator,dedicated,pshifter,\n#  fshifter,vmorpher.\n#excludefx =\n\n## default-reverb: (global)\n#  A reverb preset that applies by default to all sources on send 0\n#  (applications that set their own slots on send 0 will override this).\n#  Available presets include: None, Generic, PaddedCell, Room, Bathroom,\n#  Livingroom, Stoneroom, Auditorium, ConcertHall, Cave, Arena, Hangar,\n#  CarpetedHallway, Hallway, StoneCorridor, Alley, Forest, City, Mountains,\n#  Quarry, Plain, ParkingLot, SewerPipe, Underwater, Drugged, Dizzy, Psychotic.\n#default-reverb =\n\n## trap-alc-error: (global)\n#  Generates a SIGTRAP signal when an ALC device error is generated, on systems\n#  that support it. This helps when debugging, while trying to find the cause\n#  of a device error. On Windows, a breakpoint exception is generated.\n#trap-alc-error = false\n\n## trap-al-error: (global)\n#  Generates a SIGTRAP signal when an AL context error is generated, on systems\n#  that support it. This helps when debugging, while trying to find the cause\n#  of a context error. On Windows, a breakpoint exception is generated.\n#trap-al-error = false\n\n##\n## Ambisonic decoder stuff\n##\n[decoder]\n\n## hq-mode:\n#  Enables a high-quality ambisonic decoder. This mode is capable of frequency-\n#  dependent processing, creating a better reproduction of 3D sound rendering\n#  over surround sound speakers.\n#hq-mode = true\n\n## distance-comp:\n#  Enables compensation for the speakers' relative distances to the listener.\n#  This applies the necessary delays and attenuation to make the speakers\n#  behave as though they are all equidistant, which is important for proper\n#  playback of 3D sound rendering. Requires the proper distances to be\n#  specified in the decoder configuration file.\n#distance-comp = true\n\n## nfc:\n#  Enables near-field control filters. This simulates and compensates for low-\n#  frequency effects caused by the curvature of nearby sound-waves, which\n#  creates a more realistic perception of sound distance with surround sound\n#  output. Note that the effect may be stronger or weaker than intended if the\n#  application doesn't use or specify an appropriate unit scale, or if\n#  incorrect speaker distances are set. For HRTF output, hrtf-mode must be set\n#  to one of the ambi* values for this to function.\n#nfc = false\n\n## speaker-dist:\n#  Specifies the speaker distance in meters, used by the near-field control\n#  filters with surround sound output. For ambisonic output modes, this value\n#  is the basis for the NFC-HOA Reference Delay parameter (calculated as\n#  delay_seconds = speaker_dist/343.3). This value is not used when a decoder\n#  configuration is set for the output mode (since they specify the per-speaker\n#  distances, overriding this setting), or when the NFC filters are off. Valid\n#  values range from 0.1 to 10.\n#speaker-dist = 1\n\n## quad:\n#  Decoder configuration file for Quadraphonic channel output. See\n#  docs/ambdec.txt for a description of the file format.\n#quad =\n\n## surround51:\n#  Decoder configuration file for 5.1 Surround (Side and Rear) channel output.\n#  See docs/ambdec.txt for a description of the file format.\n#surround51 =\n\n## surround61:\n#  Decoder configuration file for 6.1 Surround channel output. See\n#  docs/ambdec.txt for a description of the file format.\n#surround61 =\n\n## surround71:\n#  Decoder configuration file for 7.1 Surround channel output. See\n#  docs/ambdec.txt for a description of the file format.\n#surround71 =\n\n## surround714:\n#  Decoder configuration file for 7.1.4 Surround channel output. See\n#  docs/ambdec.txt for a description of the file format.\n#surround714 =\n\n## surround3d71:\n#  Decoder configuration file for 3D7.1 Surround channel output. See\n#  docs/ambdec.txt for a description of the file format. See also\n#  docs/3D7.1.txt for information about 3D7.1.\n#surround3d71 =\n\n##\n## UHJ and Super Stereo stuff\n##\n[uhj]\n\n## decode-filter: (global)\n#  Specifies the all-pass filter type for UHJ decoding and Super Stereo\n#  processing. Valid values are:\n#  iir - utilizes dual IIR filters, providing a wide pass-band with low CPU\n#        use, but causes additional phase shifts on the signal.\n#  fir256 - utilizes a 256-point FIR filter, providing more stable results but\n#           exhibiting attenuation in the lower and higher frequency bands.\n#  fir512 - utilizes a 512-point FIR filter, providing a wider pass-band than\n#           fir256, at the cost of more CPU use.\n#decode-filter = iir\n\n## encode-filter: (global)\n#  Specifies the all-pass filter type for UHJ output encoding. Valid values are\n#  the same as for decode-filter.\n#encode-filter = iir\n\n##\n## Reverb effect stuff (includes EAX reverb)\n##\n[reverb]\n\n## boost: (global)\n#  A global amplification for reverb output, expressed in decibels. The value\n#  is logarithmic, so +6 will be a scale of (approximately) 2x, +12 will be a\n#  scale of 4x, etc. Similarly, -6 will be about half, and -12 about 1/4th. A\n#  value of 0 means no change.\n#boost = 0\n\n##\n## PipeWire backend stuff\n##\n[pipewire]\n\n## assume-audio: (global)\n#  Causes the backend to succeed initialization even if PipeWire reports no\n#  audio support. Currently, audio support is detected by the presence of audio\n#  source or sink nodes, although this can cause false negatives in cases where\n#  device availability during library initialization is spotty. Future versions\n#  of PipeWire are expected to have a more robust method to test audio support,\n#  but in the mean time this can be set to true to assume PipeWire has audio\n#  support even when no nodes may be reported at initialization time.\n#assume-audio = false\n\n## rt-mix:\n#  Renders samples directly in the real-time processing callback. This allows\n#  for lower latency and less overall CPU utilization, but can increase the\n#  risk of underruns when increasing the amount of work the mixer needs to do.\n#rt-mix = false\n\n##\n## PulseAudio backend stuff\n##\n[pulse]\n\n## spawn-server: (global)\n#  Attempts to autospawn a PulseAudio server whenever needed (initializing the\n#  backend, enumerating devices, etc). Setting autospawn to false in Pulse's\n#  client.conf will still prevent autospawning even if this is set to true.\n#spawn-server = false\n\n## allow-moves: (global)\n#  Allows PulseAudio to move active streams to different devices. Note that the\n#  device specifier (seen by applications) will not be updated when this\n#  occurs, and neither will the AL device configuration (sample rate, format,\n#  etc).\n#allow-moves = true\n\n## fix-rate:\n#  Specifies whether to match the playback stream's sample rate to the device's\n#  sample rate. Enabling this forces OpenAL Soft to mix sources and effects\n#  directly to the actual output rate, avoiding a second resample pass by the\n#  PulseAudio server.\n#fix-rate = false\n\n## adjust-latency:\n#  Attempts to adjust the overall latency of device playback. Note that this\n#  may have adverse effects on the resulting internal buffer sizes and mixing\n#  updates, leading to performance problems and drop-outs. However, if the\n#  PulseAudio server is creating a lot of latency, enabling this may help make\n#  it more manageable.\n#adjust-latency = false\n\n##\n## ALSA backend stuff\n##\n[alsa]\n\n## device: (global)\n#  Sets the device name for the default playback device.\n#device = default\n\n## device-prefix: (global)\n#  Sets the prefix used by the discovered (non-default) playback devices. This\n#  will be appended with \"CARD=c,DEV=d\", where c is the card id and d is the\n#  device index for the requested device name.\n#device-prefix = plughw:\n\n## device-prefix-*: (global)\n#  Card- and device-specific prefixes may be used to override the device-prefix\n#  option. The option may specify the card id (eg, device-prefix-NVidia), or\n#  the card id and device index (eg, device-prefix-NVidia-0). The card id is\n#  case-sensitive.\n#device-prefix- =\n\n## custom-devices: (global)\n#  Specifies a list of enumerated playback devices and the ALSA devices they\n#  refer to. The list pattern is \"Display Name=ALSA device;...\". The display\n#  names will be returned for device enumeration, and the ALSA device is the\n#  device name to open for each enumerated device.\n#custom-devices =\n\n## capture: (global)\n#  Sets the device name for the default capture device.\n#capture = default\n\n## capture-prefix: (global)\n#  Sets the prefix used by the discovered (non-default) capture devices. This\n#  will be appended with \"CARD=c,DEV=d\", where c is the card id and d is the\n#  device number for the requested device name.\n#capture-prefix = plughw:\n\n## capture-prefix-*: (global)\n#  Card- and device-specific prefixes may be used to override the\n#  capture-prefix option. The option may specify the card id (eg,\n#  capture-prefix-NVidia), or the card id and device index (eg,\n#  capture-prefix-NVidia-0). The card id is case-sensitive.\n#capture-prefix- =\n\n## custom-captures: (global)\n#  Specifies a list of enumerated capture devices and the ALSA devices they\n#  refer to. The list pattern is \"Display Name=ALSA device;...\". The display\n#  names will be returned for device enumeration, and the ALSA device is the\n#  device name to open for each enumerated device.\n#custom-captures =\n\n## mmap:\n#  Sets whether to try using mmap mode (helps reduce latencies and CPU\n#  consumption). If mmap isn't available, it will automatically fall back to\n#  non-mmap mode. True, yes, on, and non-0 values will attempt to use mmap. 0\n#  and anything else will force mmap off.\n#mmap = true\n\n## allow-resampler:\n#  Specifies whether to allow ALSA's built-in resampler. Enabling this will\n#  allow the playback device to be set to a different sample rate than the\n#  actual output, causing ALSA to apply its own resampling pass after OpenAL\n#  Soft resamples and mixes the sources and effects for output.\n#allow-resampler = false\n\n##\n## OSS backend stuff\n##\n[oss]\n\n## device: (global)\n#  Sets the device name for OSS output.\n#device = /dev/dsp\n\n## capture: (global)\n#  Sets the device name for OSS capture.\n#capture = /dev/dsp\n\n##\n## Solaris backend stuff\n##\n[solaris]\n\n## device: (global)\n#  Sets the device name for Solaris output.\n#device = /dev/audio\n\n##\n## QSA backend stuff\n##\n[qsa]\n\n##\n## JACK backend stuff\n##\n[jack]\n\n## spawn-server: (global)\n#  Attempts to autospawn a JACK server when initializing.\n#spawn-server = false\n\n## custom-devices: (global)\n#  Specifies a list of enumerated devices and the ports they connect to. The\n#  list pattern is \"Display Name=ports regex;Display Name=ports regex;...\". The\n#  display names will be returned for device enumeration, and the ports regex\n#  is the regular expression to identify the target ports on the server (as\n#  given by the jack_get_ports function) for each enumerated device.\n#custom-devices =\n\n## rt-mix:\n#  Renders samples directly in the real-time processing callback. This allows\n#  for lower latency and less overall CPU utilization, but can increase the\n#  risk of underruns when increasing the amount of work the mixer needs to do.\n#rt-mix = true\n\n## connect-ports:\n#  Attempts to automatically connect the client ports to physical server ports.\n#  Client ports that fail to connect will leave the remaining channels\n#  unconnected and silent (the device format won't change to accommodate).\n#connect-ports = true\n\n## buffer-size:\n#  Sets the update buffer size, in samples, that the backend will keep buffered\n#  to handle the server's real-time processing requests. This value must be a\n#  power of 2, or else it will be rounded up to the next power of 2. If it is\n#  less than JACK's buffer update size, it will be clamped. This option may\n#  be useful in case the server's update size is too small and doesn't give the\n#  mixer time to keep enough audio available for the processing requests.\n#  Ignored when rt-mix is true.\n#buffer-size = 0\n\n##\n## WASAPI backend stuff\n##\n[wasapi]\n\n## spatial-api:\n#  Specifies whether to use a Spatial Audio stream for playback. This may\n#  provide expanded capabilities for surround sound and with-height speaker\n#  configurations. Very experimental.\n#spatial-api = false\n\n## exclusive-mode:\n#  Enables Exlusive mode for playback devices. This uses the device directly,\n#  allowing lower latencies but prevents the device from being used multiple\n#  times simultaneously. Ignores the periods setting when enabled, as WASAPI\n#  automatically sets a buffer size based on the period size.\n#exclusive-mode = false\n\n## allow-resampler:\n#  Specifies whether to allow an extra resampler pass on the output. Enabling\n#  this will allow the playback device to be set to a different sample rate\n#  than the actual output can accept, causing the backend to apply its own\n#  resampling pass after OpenAL Soft mixes the sources and processes effects\n#  for output.\n#allow-resampler = true\n\n##\n## DirectSound backend stuff\n##\n[dsound]\n\n##\n## Windows Multimedia backend stuff\n##\n[winmm]\n\n##\n## PortAudio backend stuff\n##\n[port]\n\n## device: (global)\n#  Sets the device index for output. Negative values will use the default as\n#  given by PortAudio itself.\n#device = -1\n\n## capture: (global)\n#  Sets the device index for capture. Negative values will use the default as\n#  given by PortAudio itself.\n#capture = -1\n\n##\n## Wave File Writer stuff\n##\n[wave]\n\n## file: (global)\n#  Sets the filename of the wave file to write to. An empty name prevents the\n#  backend from opening, even when explicitly requested.\n#  THIS WILL OVERWRITE EXISTING FILES WITHOUT QUESTION!\n#file =\n\n## bformat: (global)\n#  Creates AMB format files using first-order ambisonics instead of a standard\n#  single- or multi-channel .wav file.\n#bformat = false\n\n##\n## EAX extensions stuff\n##\n[eax]\n\n## enable: (global)\n#  Sets whether to enable EAX extensions or not.\n#enable = true\n\n##\n## Per-game compatibility options (these should only be set in per-game config\n## files, *NOT* system- or user-level!)\n##\n[game_compat]\n\n## default-error: (global)\n#  An error value returned by alGetError when there's no current context. The\n#  default value is AL_INVALID_OPERATION, which lets the caller know the\n#  operation could not be executed. Some applications may erroneously call\n#  alGetError without a current context and expect 0 (AL_NO_ERROR), however\n#  that may cause other applications to think earlier AL calls succeeded when\n#  they actually failed.\n#default-error = 0xA004\n\n## nfc-scale: (global)\n#  A meters-per-unit distance scale applied to NFC filters. If a game doesn't\n#  use real-world meters for in-game units, the filters may create a too-near\n#  or too-distant effect. For instance, if the game uses 1 foot per unit, a\n#  value of 0.3048 will correctly adjust the filters. Or if the game uses 1\n#  kilometer per unit, a value of 1000 will correctly adjust the filters.\n#nfc-scale = 1\n\n## enable-sub-data-ext: (global)\n#  Enables the AL_SOFT_buffer_sub_data extension, disabling the\n#  AL_EXT_SOURCE_RADIUS extension. These extensions are incompatible, so only\n#  one can be available. The latter extension is more commonly used, but this\n#  option can be enabled for older apps that want the former extension.\n#enable-sub-data-ext = false\n\n## reverse-x: (global)\n#  Reverses the local X (left-right) position of 3D sound sources.\n#reverse-x = false\n\n## reverse-y: (global)\n#  Reverses the local Y (up-down) position of 3D sound sources.\n#reverse-y = false\n\n## reverse-z: (global)\n#  Reverses the local Z (front-back) position of 3D sound sources.\n#reverse-z = false\n\n## vendor-override:\n#  Overrides the string returned by alGetString(AL_VENDOR).\n#vendor-override =\n\n## version-override:\n#  Overrides the string returned by alGetString(AL_VERSION).\n#version-override =\n\n## renderer-override:\n#  Overrides the string returned by alGetString(AL_RENDERER).\n#renderer-override =\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.6416015625,
          "content": "version: 1.24.1.{build}\n\nenvironment:\n    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022\n    GEN: \"Visual Studio 17 2022\"\n    matrix:\n      - ARCH: Win32\n        CFG: Release\n      - ARCH: x64\n        CFG: Release\n\nafter_build:\n- 7z a ..\\soft_oal.zip \"%APPVEYOR_BUILD_FOLDER%\\build\\%CFG%\\soft_oal.dll\" \"%APPVEYOR_BUILD_FOLDER%\\README.md\" \"%APPVEYOR_BUILD_FOLDER%\\COPYING\"\n\nartifacts:\n- path: soft_oal.zip\n\nbuild_script:\n    - cd build\n    - cmake -G \"%GEN%\" -A %ARCH% -DALSOFT_BUILD_ROUTER=ON -DALSOFT_REQUIRE_WINMM=ON -DALSOFT_REQUIRE_DSOUND=ON -DALSOFT_REQUIRE_WASAPI=ON -DALSOFT_EMBED_HRTF_DATA=YES ..\n    - cmake --build . --config %CFG% --clean-first\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "config.h.in",
          "type": "blob",
          "size": 1.333984375,
          "content": "/* Define the alignment attribute for externally callable functions. */\n#define FORCE_ALIGN @ALSOFT_FORCE_ALIGN@\n\n/* Define if HRTF data is embedded in the library */\n#cmakedefine ALSOFT_EMBED_HRTF_DATA\n\n/* Define if we have the proc_pidpath function */\n#cmakedefine HAVE_PROC_PIDPATH\n\n/* Define if we have dlfcn.h */\n#cmakedefine HAVE_DLFCN_H\n\n/* Define if we have pthread_np.h */\n#cmakedefine HAVE_PTHREAD_NP_H\n\n/* Define if we have cpuid.h */\n#cmakedefine HAVE_CPUID_H\n\n/* Define if we have intrin.h */\n#cmakedefine HAVE_INTRIN_H\n\n/* Define if we have guiddef.h */\n#cmakedefine HAVE_GUIDDEF_H\n\n/* Define if we have GCC's __get_cpuid() */\n#cmakedefine HAVE_GCC_GET_CPUID\n\n/* Define if we have the __cpuid() intrinsic */\n#cmakedefine HAVE_CPUID_INTRINSIC\n\n/* Define if we have pthread_setschedparam() */\n#cmakedefine HAVE_PTHREAD_SETSCHEDPARAM\n\n/* Define if we have pthread_setname_np() */\n#cmakedefine HAVE_PTHREAD_SETNAME_NP\n\n/* Define if we have pthread_set_name_np() */\n#cmakedefine HAVE_PTHREAD_SET_NAME_NP\n\n/* Define the installation data directory */\n#cmakedefine ALSOFT_INSTALL_DATADIR \"@ALSOFT_INSTALL_DATADIR@\"\n\n/* Define to 1 if we have DBus/RTKit, else 0 */\n#cmakedefine01 HAVE_RTKIT\n\n/* Define to 1 if building for winuwp, else 0 */\n#cmakedefine01 ALSOFT_UWP\n\n/* Define to 1 if building with legacy EAX API support, else 0 */\n#cmakedefine01 ALSOFT_EAX\n"
        },
        {
          "name": "config_backends.h.in",
          "type": "blob",
          "size": 0.5458984375,
          "content": "/* Define to 1 if the given backend is enabled, else 0 */\n\n#cmakedefine01 HAVE_ALSA\n\n#cmakedefine01 HAVE_OSS\n\n#cmakedefine01 HAVE_PIPEWIRE\n\n#cmakedefine01 HAVE_SOLARIS\n\n#cmakedefine01 HAVE_SNDIO\n\n#cmakedefine01 HAVE_WASAPI\n\n#cmakedefine01 HAVE_DSOUND\n\n#cmakedefine01 HAVE_WINMM\n\n#cmakedefine01 HAVE_PORTAUDIO\n\n#cmakedefine01 HAVE_PULSEAUDIO\n\n#cmakedefine01 HAVE_JACK\n\n#cmakedefine01 HAVE_COREAUDIO\n\n#cmakedefine01 HAVE_OPENSL\n\n#cmakedefine01 HAVE_OBOE\n\n#cmakedefine01 HAVE_OTHERIO\n\n#cmakedefine01 HAVE_WAVE\n\n#cmakedefine01 HAVE_SDL3\n\n#cmakedefine01 HAVE_SDL2\n"
        },
        {
          "name": "config_simd.h.in",
          "type": "blob",
          "size": 0.2734375,
          "content": "/* Define to 1 if we have SSE CPU extensions, else 0 */\n#cmakedefine01 HAVE_SSE\n#cmakedefine01 HAVE_SSE2\n#cmakedefine01 HAVE_SSE3\n#cmakedefine01 HAVE_SSE4_1\n\n#cmakedefine01 HAVE_SSE_INTRINSICS\n\n/* Define to 1 if we have ARM Neon CPU extensions, else 0 */\n#cmakedefine01 HAVE_NEON\n"
        },
        {
          "name": "configs",
          "type": "tree",
          "content": null
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "fmt-11.1.1",
          "type": "tree",
          "content": null
        },
        {
          "name": "hrtf",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "libopenal.version",
          "type": "blob",
          "size": 3.412109375,
          "content": "{\nglobal:\nalBuffer3f;\nalBuffer3i;\nalBufferData;\nalBufferf;\nalBufferfv;\nalBufferi;\nalBufferiv;\nalcCaptureCloseDevice;\nalcCaptureOpenDevice;\nalcCaptureSamples;\nalcCaptureStart;\nalcCaptureStop;\nalcCloseDevice;\nalcCreateContext;\nalcDestroyContext;\nalcGetContextsDevice;\nalcGetCurrentContext;\nalcGetEnumValue;\nalcGetError;\nalcGetIntegerv;\nalcGetProcAddress;\nalcGetString;\nalcIsExtensionPresent;\nalcMakeContextCurrent;\nalcOpenDevice;\nalcProcessContext;\nalcSuspendContext;\nalDeleteBuffers;\nalDeleteSources;\nalDisable;\nalDistanceModel;\nalDopplerFactor;\nalEnable;\nalGenBuffers;\nalGenSources;\nalGetBoolean;\nalGetBooleanv;\nalGetBuffer3f;\nalGetBuffer3i;\nalGetBufferf;\nalGetBufferfv;\nalGetBufferi;\nalGetBufferiv;\nalGetDouble;\nalGetDoublev;\nalGetEnumValue;\nalGetError;\nalGetFloat;\nalGetFloatv;\nalGetInteger;\nalGetIntegerv;\nalGetListener3f;\nalGetListener3i;\nalGetListenerf;\nalGetListenerfv;\nalGetListeneri;\nalGetListeneriv;\nalGetProcAddress;\nalGetSource3f;\nalGetSource3i;\nalGetSourcef;\nalGetSourcefv;\nalGetSourcei;\nalGetSourceiv;\nalGetString;\nalIsBuffer;\nalIsEnabled;\nalIsExtensionPresent;\nalIsSource;\nalListener3f;\nalListener3i;\nalListenerf;\nalListenerfv;\nalListeneri;\nalListeneriv;\nalSource3f;\nalSource3i;\nalSourcef;\nalSourcefv;\nalSourcei;\nalSourceiv;\nalSourcePause;\nalSourcePausev;\nalSourcePlay;\nalSourcePlayv;\nalSourceQueueBuffers;\nalSourceRewind;\nalSourceRewindv;\nalSourceStop;\nalSourceStopv;\nalSourceUnqueueBuffers;\nalSpeedOfSound;\n\n# Deprecated in AL 1.1, kept for compatibility.\nalDopplerVelocity;\n\n# EFX, effectively standard at this point.\nalAuxiliaryEffectSlotf;\nalAuxiliaryEffectSlotfv;\nalAuxiliaryEffectSloti;\nalAuxiliaryEffectSlotiv;\nalDeleteAuxiliaryEffectSlots;\nalDeleteEffects;\nalDeleteFilters;\nalEffectf;\nalEffectfv;\nalEffecti;\nalEffectiv;\nalFilterf;\nalFilterfv;\nalFilteri;\nalFilteriv;\nalGenAuxiliaryEffectSlots;\nalGenEffects;\nalGenFilters;\nalGetAuxiliaryEffectSlotf;\nalGetAuxiliaryEffectSlotfv;\nalGetAuxiliaryEffectSloti;\nalGetAuxiliaryEffectSlotiv;\nalGetEffectf;\nalGetEffectfv;\nalGetEffecti;\nalGetEffectiv;\nalGetFilterf;\nalGetFilterfv;\nalGetFilteri;\nalGetFilteriv;\nalIsAuxiliaryEffectSlot;\nalIsEffect;\nalIsFilter;\n\n# Non-standard\nalsoft_get_version;\n\n# These extension functions shouldn't be exported here, but they were exported\n# by mistake in previous releases, so need to stay for compatibility with apps\n# that may have directly linked to them. Remove them if it can be done without\n# breaking anything.\nalAuxiliaryEffectSlotPlaySOFT;\nalAuxiliaryEffectSlotPlayvSOFT;\nalAuxiliaryEffectSlotStopSOFT;\nalAuxiliaryEffectSlotStopvSOFT;\nalBufferCallbackSOFT;\nalBufferSamplesSOFT;\nalBufferStorageSOFT;\nalBufferSubDataSOFT;\nalBufferSubSamplesSOFT;\nalcDevicePauseSOFT;\nalcDeviceResumeSOFT;\nalcGetInteger64vSOFT;\nalcGetStringiSOFT;\nalcGetThreadContext;\nalcIsRenderFormatSupportedSOFT;\nalcLoopbackOpenDeviceSOFT;\nalcRenderSamplesSOFT;\nalcResetDeviceSOFT;\nalcSetThreadContext;\nalDeferUpdatesSOFT;\nalEventCallbackSOFT;\nalEventControlSOFT;\nalFlushMappedBufferSOFT;\nalGetBuffer3PtrSOFT;\nalGetBufferPtrSOFT;\nalGetBufferPtrvSOFT;\nalGetBufferSamplesSOFT;\nalGetInteger64SOFT;\nalGetInteger64vSOFT;\nalGetPointerSOFT;\nalGetPointervSOFT;\nalGetSource3dSOFT;\nalGetSource3i64SOFT;\nalGetSourcedSOFT;\nalGetSourcedvSOFT;\nalGetSourcei64SOFT;\nalGetSourcei64vSOFT;\nalGetStringiSOFT;\nalIsBufferFormatSupportedSOFT;\nalMapBufferSOFT;\nalProcessUpdatesSOFT;\nalSource3dSOFT;\nalSource3i64SOFT;\nalSourcedSOFT;\nalSourcedvSOFT;\nalSourcei64SOFT;\nalSourcei64vSOFT;\nalSourceQueueBufferLayersSOFT;\nalUnmapBufferSOFT;\n\nlocal: *;\n};\n"
        },
        {
          "name": "openal.pc.in",
          "type": "blob",
          "size": 0.349609375,
          "content": "prefix=@prefix@\nexec_prefix=@exec_prefix@\nlibdir=@libdir@\nincludedir=@includedir@\n\nName: OpenAL\nDescription: OpenAL is a cross-platform 3D audio API\nRequires: @PKG_CONFIG_REQUIRES@\nVersion: @PACKAGE_VERSION@\nLibs: -L${libdir} -l@LIBNAME@ @PKG_CONFIG_LIBS@\nLibs.private:@PKG_CONFIG_PRIVATE_LIBS@\nCflags: -I${includedir} -I${includedir}/AL @PKG_CONFIG_CFLAGS@\n"
        },
        {
          "name": "presets",
          "type": "tree",
          "content": null
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "router",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.cmake",
          "type": "blob",
          "size": 0.30859375,
          "content": "EXECUTE_PROCESS(\n    COMMAND ${GIT_EXECUTABLE} rev-parse --abbrev-ref HEAD\n    OUTPUT_VARIABLE GIT_BRANCH\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n)\nEXECUTE_PROCESS(\n    COMMAND ${GIT_EXECUTABLE} log -1 --format=%h\n    OUTPUT_VARIABLE GIT_COMMIT_HASH\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n)\nCONFIGURE_FILE(${SRC} ${DST})\n"
        },
        {
          "name": "version.h.in",
          "type": "blob",
          "size": 0.2880859375,
          "content": "/* Define to the library version */\n#define ALSOFT_VERSION \"${LIB_VERSION}\"\n#define ALSOFT_VERSION_NUM ${LIB_VERSION_NUM}\n\n/* Define the branch being built */\n#define ALSOFT_GIT_BRANCH \"${GIT_BRANCH}\"\n\n/* Define the hash of the head commit */\n#define ALSOFT_GIT_COMMIT_HASH \"${GIT_COMMIT_HASH}\"\n"
        }
      ]
    }
  ]
}