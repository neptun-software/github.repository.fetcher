{
  "metadata": {
    "timestamp": 1736565878048,
    "page": 835,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "axiomatic-systems/Bento4",
      "stars": 2065,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.8427734375,
          "content": "*.pyc\n.DS_Store\nSDK\ncmakebuild\nSource/Python/utils/bin\nBuild/Targets/x86-unknown-linux/Debug\nBuild/Targets/x86-unknown-linux/Release\nBuild/Targets/x86_64-unknown-linux/Debug\nBuild/Targets/x86_64-unknown-linux/Release\nBuild/Targets/x86-microsoft-win32-vs2010/**/Debug\nBuild/Targets/x86-microsoft-win32-vs2010/**/Release\nBuild/Targets/x86-microsoft-win32-vs2010/**/*.suo\nBuild/Targets/x86-microsoft-win32-vs2010/**/*.user\nBuild/Targets/x86-microsoft-win32-vs2010/**/*.sdf\nBuild/Targets/x86-microsoft-win32-vs2012/**/Debug\nBuild/Targets/x86-microsoft-win32-vs2012/**/Release\nBuild/Targets/x86-microsoft-win32-vs2012/**/*.suo\nBuild/Targets/x86-microsoft-win32-vs2012/**/*.user\nBuild/Targets/x86-microsoft-win32-vs2012/**/*.sdf\nBuild/Targets/x86-microsoft-win32-vs2015/**/Debug\nBuild/Targets/x86-microsoft-win32-vs2015/**/Release\nBuild/Targets/x86-microsoft-win32-vs2015/**/*.suo\nBuild/Targets/x86-microsoft-win32-vs2015/**/*.user\nBuild/Targets/x86-microsoft-win32-vs2015/**/*.sdf\nBuild/Targets/x86_64-microsoft-win32-vs2015/**/Debug/\nBuild/Targets/x86_64-microsoft-win32-vs2015/**/Release\nBuild/Targets/x86_64-microsoft-win32-vs2019/**/Debug/\nBuild/Targets/x86_64-microsoft-win32-vs2019/**/Release\nBuild/Targets/universal-apple-macosx/build\nBuild/Targets/universal-apple-macosx/Bento4.xcodeproj/xcuserdata\nBuild/Targets/universal-apple-Build/Targets/arm-android-linux\nBuild/Targets/universal-apple-macosx/cov-int\nBuild/Targets/universal-apple-macosx/Bento4.xcodeproj/xcshareddata\nBuild/Targets/universal-apple-macosx/Bento4.xcodeproj/project.xcworkspace/xcuserdata\n.svn\n.sconsign.dblite\nBento4.xccheckout\nBento4.xcscmblueprint\nBuild/Targets/cmake\ndist\nlib\nshaka-player.uncompiled.js\nthird_party\n.suo\n*.db\n*.user\n.vscode\n*.sdf\n*.opendb\nIDEWorkspaceChecks.plist\n.scannerwork\nTest/Output\n.coverage\ncoverage_html\nTest/Output\nBuild/Targets/x86_64-microsoft-win32-vs2019/.vs\nDocuments/MkDocs/site\n"
        },
        {
          "name": ".lgtm.yml",
          "type": "blob",
          "size": 0.072265625,
          "content": "path_classifiers:\n    docs:\n        - Documents\n\n    test:\n        - Test\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.4189453125,
          "content": "language: cpp\n\nmatrix:\n  include:\n    - os: osx\n      osx_image: xcode9.2  \n      env: \n        - BUILD_DIR=Build/Targets/universal-apple-macosx\n        - BUILD_SCRIPT=\"xcodebuild -target All -configuration Release\"\n\n    - os: linux\n      env:\n        - BUILD_DIR=. \n        - BUILD_SCRIPT=\"mkdir cmakebuild && cd cmakebuild && cmake -DCMAKE_BUILD_TYPE=Release .. && make\"\n\nscript: \n  - cd $BUILD_DIR\n  - eval \"${BUILD_SCRIPT}\"\n\n"
        },
        {
          "name": "Build",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 4.0107421875,
          "content": "# cmake -DCMAKE_BUILD_TYPE=Debug ..\n# cmake -DCMAKE_BUILD_TYPE=Release ..\nif(MSVC)\n  cmake_policy(SET CMP0091 NEW)\n  cmake_minimum_required(VERSION 3.15)\nelse()\n  cmake_minimum_required(VERSION 3.10)\nendif()\n\nfunction(get_bento4_version)\n  file(STRINGS \"Source/C++/Core/Ap4Version.h\" _temp REGEX \"AP4_VERSION_STRING\")\n  string(REGEX MATCH \"\\\"([^\\\"]+)\\\"\" _temp \"${_temp}\")\n  set(BENTO4_VERSION \"${CMAKE_MATCH_1}\" PARENT_SCOPE)\nendfunction()\n\nget_bento4_version()\nset(CMAKE_OSX_ARCHITECTURES \"arm64;x86_64\" CACHE STRING \"\")\nproject(bento4 VERSION \"${BENTO4_VERSION}\")\n\n# Variables\nset(SOURCE_ROOT ${CMAKE_CURRENT_SOURCE_DIR}/Source/C++)\nset(SOURCE_CODECS ${SOURCE_ROOT}/Codecs)\nset(SOURCE_CORE ${SOURCE_ROOT}/Core)\nset(SOURCE_CRYPTO ${SOURCE_ROOT}/Crypto)\nset(SOURCE_METADATA ${SOURCE_ROOT}/MetaData)\nset(SOURCE_SYSTEM ${SOURCE_ROOT}/System)\n\n# Compiler warning and optimization flags\nif(CMAKE_C_COMPILER_ID MATCHES \"GNU\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -Wno-class-memaccess\")\nendif()\n\nif (EMSCRIPTEN)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-warn-absolute-paths\")\nendif()\n\nset(CMAKE_OSX_DEPLOYMENT_TARGET 10.12)\n\nif(MSVC)\n  add_definitions(-D_CRT_SECURE_NO_WARNINGS)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /GF /Gy /GR\")\nendif()\n\n# AP4 Library\nfile(GLOB AP4_SOURCES\n  ${SOURCE_CODECS}/*.cpp\n  ${SOURCE_CORE}/*.cpp\n  ${SOURCE_CRYPTO}/*.cpp\n  ${SOURCE_METADATA}/*.cpp\n  ${SOURCE_SYSTEM}/StdC/*.cpp\n)\n\n# Platform specifics\nif(WIN32)\n  set(AP4_SOURCES ${AP4_SOURCES} ${SOURCE_SYSTEM}/Win32/Ap4Win32Random.cpp)\nelse()\n  set(AP4_SOURCES ${AP4_SOURCES} ${SOURCE_SYSTEM}/Posix/Ap4PosixRandom.cpp)\nendif()\n\n# Includes\nset(AP4_INCLUDE_DIRS\n  $<BUILD_INTERFACE:${SOURCE_CORE}>\n  $<BUILD_INTERFACE:${SOURCE_CODECS}>\n  $<BUILD_INTERFACE:${SOURCE_CRYPTO}>\n  $<BUILD_INTERFACE:${SOURCE_METADATA}>\n)\nfile(GLOB AP4_HEADERS\n  ${SOURCE_CORE}/*.h\n  ${SOURCE_CODECS}/*.h\n  ${SOURCE_CRYPTO}/*.h\n  ${SOURCE_METADATA}/*.h\n)\n\nadd_library(ap4 STATIC ${AP4_SOURCES})\ntarget_include_directories(ap4 PUBLIC\n  ${AP4_INCLUDE_DIRS}\n)\n\n# Use the statically linked C runtime library\nif(MSVC)\n  set_property(TARGET ap4 PROPERTY MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>\")\n  target_compile_definitions(ap4 PRIVATE -D_LIB)\nendif()\n\n# Apps\noption(BUILD_APPS \"Build example applications\" ON)\nif(BUILD_APPS)\nfile(GLOB BENTO4_APPS RELATIVE ${SOURCE_ROOT}/Apps ${SOURCE_ROOT}/Apps/*)\nforeach(app ${BENTO4_APPS})\n  string(TOLOWER ${app} binary_name)\n  list(APPEND BENTO4_APPS_LOWERCASE ${binary_name})\n  add_executable(${binary_name} ${SOURCE_ROOT}/Apps/${app}/${app}.cpp)\n  target_link_libraries(${binary_name} ap4)\n\n  if(MSVC)\n    set_property(TARGET ${binary_name} PROPERTY MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>\")\n    target_compile_definitions(${binary_name} PRIVATE -D_CONSOLE)\n  endif()\nendforeach()\nendif(BUILD_APPS)\n\n# Install\ninclude(GNUInstallDirs)\nset(config_install_dir \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\")\nset(generated_dir \"${CMAKE_CURRENT_BINARY_DIR}/generated\")\nset(version_config \"${generated_dir}/${PROJECT_NAME}ConfigVersion.cmake\")\nset(project_config \"${generated_dir}/${PROJECT_NAME}Config.cmake\")\nset(TARGETS_EXPORT_NAME \"${PROJECT_NAME}Targets\")\nset(namespace \"${PROJECT_NAME}::\")\n\ninclude(CMakePackageConfigHelpers)\nwrite_basic_package_version_file(\n    \"${version_config}\" COMPATIBILITY SameMajorVersion\n)\n\nconfigure_package_config_file(\n    \"Build/cmake/Config.cmake.in\"\n    \"${project_config}\"\n    INSTALL_DESTINATION \"${config_install_dir}\"\n)\n\ninstall(\n    TARGETS ap4 ${BENTO4_APPS_LOWERCASE}\n    EXPORT \"${TARGETS_EXPORT_NAME}\"\n    LIBRARY DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n    ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n    RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\"\n    INCLUDES DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\"\n)\n\ninstall(\n    FILES ${AP4_HEADERS}\n    DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/bento4\"\n)\n\ninstall(\n    FILES \"${project_config}\" \"${version_config}\"\n    DESTINATION \"${config_install_dir}\"\n)\n\ninstall(\n    EXPORT \"${TARGETS_EXPORT_NAME}\"\n    NAMESPACE \"${namespace}\"\n    DESTINATION \"${config_install_dir}\"\n)\n"
        },
        {
          "name": "Documents",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.1572265625,
          "content": "Bento4\n=====\n![CI](https://github.com/axiomatic-systems/Bento4/workflows/CI/badge.svg?branch=master)\n           \nBento4 is a C++ class library and tools designed to read and write ISO-MP4 files.\nThis format is defined in international specifications ISO/IEC 14496-12, 14496-14 and 14496-15.\nThe format is a derivative of the Apple Quicktime file format, so Bento4 can be used to read and write most Quicktime files as well.\n\nVisit [www.bento4.com](http://www.bento4.com) for details\n\nFeatures\n--------\n\nA number of formats and features based on the ISO-MP4 format and related technologies are also supported, including:\n\n * MPEG DASH with fragmented MP4 files, as defined in ISO/IEC 23009-1\n * CMAF (Common Media Application Format) as defined in ISO/IEC 23000-19\n * MPEG Common Encryption (CENC) as specified in ISO/IEC 23001-7\n * PIFF (Protected Interoperable File Format): encrypted, fragmented MP4 format specified by Microsoft and used for encrypted HTTP Smooth Streaming.\n * Reading and writing 3GPP and iTunes-compatible metadata.\n * ISMA Encrytion and Decryption as defined in the ISMA E&A specification\n * OMA 2.0 and 2.1 DCF/PDCF Encryption and Decryption as defined in the OMA specifications.\n * ISO-MP4 files profiled as part of the 3GPP family of standards.\n * The UltraViolet (DECE) CFF (Common File Format).\n * Parsing and multiplexing of H.264 (AVC) video and AAC audio elementary streams\n * Support for multiple DRM systems that are compatible with MP4-formatted content (usually leveraging CENC Common Encryption), such as Marlin, PlayReady and Widevine.\n * Support for a wide range of codecs, including H.264 (AVC), H.265 (HEVC), AAC, AC-3, EC-3 (Dolby Digital Plus), AC-4, Dolby ATMOS, DTS, ALAC, and many more.\n\nDesign\n------\n\nThe SDK is designed to be cross-platform. The code is very portable; it can be compiled with any sufficiently modern C++ compiler. The implementation does not rely on any external library. All the code necessary to compile the SDK and tools is included in the standard distribution. The standard distribution contains makefiles for unix-like operating systems, including Linux and Android, project files for Microsoft Visual Studio, and an XCode project for MacOS X and iOS. There is also support for building the library with the SCons build system.\n\n\nLicense\n-------\n\nThe library is Open Source, with a dual-license model. You can find out more about the license on the About Page.\nThe Developers Page contains specific information on where to obtain the source code and documentation. The Downloads Page contains the links to pre-built SDKs and tools that you can use to get started quickly.\n\nIncluded Applications\n---------------------\n\nThe Bento4 SDK includes several command-line applications/tools that are built using the SDK API. These include:\n\n|app name       | description\n|---------------|------------------\n|mp4info\t    | displays high level info about an MP4 file, including all tracks and codec details                                                              \n|mp4dump\t    | displays the entire atom/box structure of an MP4 file                                                                                           \n|mp4edit\t    | add/insert/remove/replace atom/box items of an MP4 file                                                                                         \n|mp4extract\t    | extracts an atom/box from an MP4 file                                                                                                           \n|mp4encrypt\t    | encrypts an MP4 file (multiple encryption schemes are supported)                                                                                \n|mp4decrypt\t    | decrypts an MP4 file (multiple encryption schemes are supported)                                                                                \n|mp4dcfpackager | encrypts a media file into an OMA DCF file                                                                                                      \n|mp4compact\t    | converts ‘stsz’ tables into ‘stz2′ tables to create more compact MP4 files                                                                      \n|mp4fragment    | creates a fragmented MP4 file from a non-fragmented one or re-fragments an already-fragmented file                                              \n|mp4split\t    | splits a fragmented MP4 file into discrete files                                                                                                \n|mp4tag\t        | show/edit MP4 metadata (iTunes-style and others)                                                                                                \n|mp4mux\t        | multiplexes one or more elementary streams (H264, AAC) into an MP4 file                                                                         \n|mp42aac\t    | extract a raw AAC elementary stream from an MP4 file                                                                                            \n|mp42avc\t    | extract a raw AVC/H.264 elementary stream from an MP4 file                                                                                      \n|mp42hls\t    | converts an MP4 file to an HLS (HTTP Live Streaming) presentation, including the generation of the segments and .m3u8 playlist.\n|mp42ts\t        | converts an MP4 file to an MPEG2-TS file.\n|mp4-dash\t    | creates an MPEG DASH output from one or more MP4 files, including encryption.                                                                   \n|mp4-dash-clone\t| creates a local clone of a remote or local MPEG DASH presentation, optionally encrypting the segments as they are cloned.\n\nBuilding\n--------\n\nThe code can be built either by using the pre-configured IDE project files (Mac OSX, iOS and Windows), or compiled/cross-compiled using the SCons build system or CMake, or compiled using Make.\nTarget platform specific build files and configurations are located under subdirectories Buid/Targets/xxxx where xxxx takes the form ```<architecture>-<vendor>-<os>```. For example, the Linux x86 target specific files are located under ```Build/Targets/x86-unknown-linux```. The XCode project files for Mac OSX are located under ```Build/Targets/universal-apple-macosx```.\n\n### Mac OSX and iOS using XCode\nOpen the XCode project file Build/Targets/universal-apple-macosx/Bento4.xcodeproj and build\n\n### Windows using Visual Studio\nOpen the Visual Studio solution file Build/Targets/x86-microsoft-win32-vs2010/Bento4.sln and build\n\n### On Linux and other platforms, Using CMake\nCMake can generate Makefiles, Xcode project files, or Visual Studios project files.\n\n#### CMake/Make\n\n\tmkdir cmakebuild\n\tcd cmakebuild\n\tcmake -DCMAKE_BUILD_TYPE=Release ..\n\tmake\n\n#### CMake/Xcode\n\n\tmkdir cmakebuild\n\tcd cmakebuild\n\tcmake -G Xcode ..\n    cmake --build . --config Release\n\n#### CMake/Visual Studio\n\tmkdir cmakebuild\n\tcd cmakebuild\n\tcmake -DCMAKE_BUILD_TYPE=Release ..\n    cmake --build . --config Release\n\n#### CMake for Android NDK\n    mkdir cmakebuild\n    cd cmakebuild\n    cmake -DCMAKE_TOOLCHAIN_FILE=$NDK/build/cmake/android.toolchain.cmake -DANDROID_ABI=$ABI -DANDROID_NATIVE_API_LEVEL=$MINSDKVERSION ..\n    make\n\n    See https://developer.android.com/ndk/guides/cmake for details on the choice of ABI and other parameters.\n    \n    Where $NDK is set to the directory path where you have installed the NDK, $ABI is the Android ABI (ex: arm64-v8a) and $MINSDKVERSION is the minimum SDK version (ex: 23)\n\n### On Linux and other platforms, using SCons (deprecated)\nMake sure you the the SCons build tool installed on your host machine (http://www.scons.org).\nTo build the Debug configuration, simply enter the command:\n\n```scons -u```\n\nin a terminal from any directory (either from the top level directory where you downloaded the Bento4 distribution, or from the Build/Targets/xxx subdirectory for your specific target).\n\nTo build the Release configuration, use the command:\n\n```scons -u build_config=Release```\n\nTo cross-compile for a target other than your host architecture, specify target=xxxx as an argument to the scons build command.\n\nExample:\n\n```scons -u build_config=Release target=x86_64-unknown-linux```\n\n### Using Make\nFrom a command shell, go to your build target directory.\n\nFor Debug builds:\n\t```make```\n\nFor Release builds:\n```make AP4_BUILD_CONFIG=Release```\n\n## Installing Bento4 (vcpkg)\n\nAlternatively, you can build and install Bento4 using [vcpkg](https://github.com/Microsoft/vcpkg/) dependency manager:\n\n    git clone https://github.com/Microsoft/vcpkg.git\n    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n    ./vcpkg install bento4\n\nThe Bento4 port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\nRelease Notes\n-------------\n\n### 1.6.0-638\n  * support multi-bitrate audio\n  * new docs using MkDocs\n  * add av1 files and remove deprecated option from vs2019 build\n  * add AV1 support\n  * better handling of USAC signaling\n  * add UTF-8 support on Windows\n  * fix LGTM warnings\n  * account for last sample when at EOS\n  * new inspector API\n  * bug fixes\n\n### 1.6.0-636\nDolby Vision encryption now properly encrypts in a NAL-unit-aware mode\n\n### Previous releases\n(no seaparate notes, please refer to commit logs)\n"
        },
        {
          "name": "SConstruct",
          "type": "blob",
          "size": 0.03125,
          "content": "SConscript('Build/Boot.scons')\r\n"
        },
        {
          "name": "Scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "Source",
          "type": "tree",
          "content": null
        },
        {
          "name": "Test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tasks",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}