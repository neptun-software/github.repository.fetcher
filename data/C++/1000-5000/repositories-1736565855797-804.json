{
  "metadata": {
    "timestamp": 1736565855797,
    "page": 804,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "facebookincubator/FBX2glTF",
      "stars": 2120,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.54296875,
          "content": "---\nAccessModifierOffset: -1\nAlignAfterOpenBracket: AlwaysBreak\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlinesLeft: true\nAlignOperands:   false\nAlignTrailingComments: false\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: Empty\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: true\nBinPackArguments: false\nBinPackParameters: false\nBraceWrapping:\n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   false\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Attach\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: false\nColumnLimit:     100\nCommentPragmas:  '^ IWYU pragma:'\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nDisableFormat:   false\nForEachMacros:   [ FOR_EACH, FOR_EACH_ENUMERATE, FOR_EACH_KV, FOR_EACH_R, FOR_EACH_RANGE, FOR_EACH_RANGE_R, ]\nIncludeCategories:\n  - Regex:           '^<.*\\.h(pp)?>'\n    Priority:        1\n  - Regex:           '^<.*'\n    Priority:        2\n  - Regex:           '.*'\n    Priority:        3\nIndentCaseLabels: true\nIndentWidth:     2\nIndentWrappedFunctionNames: false\nKeepEmptyLinesAtTheStartOfBlocks: false\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: false\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 200\nPointerAlignment: Left\nReflowComments:  true\nSortIncludes:    true\nSpaceAfterCStyleCast: false\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Cpp11\nTabWidth:        8\nUseTab:          Never\n...\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0283203125,
          "content": ".dockerignore\nDockerfile\nsdk\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.43359375,
          "content": "# FBX SDK\n*.a filter=lfs diff=lfs merge=lfs -text\n*.dylib filter=lfs diff=lfs merge=lfs -text\n*.so filter=lfs diff=lfs merge=lfs -text\n*.dll filter=lfs diff=lfs merge=lfs -text\n*.lib filter=lfs diff=lfs merge=lfs -text\n\n# TEST FILES\n*.glb filter=lfs diff=lfs merge=lfs -text\n*.fbx filter=lfs diff=lfs merge=lfs -text\n*.tga filter=lfs diff=lfs merge=lfs -text\n*.png filter=lfs diff=lfs merge=lfs -text\n*.jpg filter=lfs diff=lfs merge=lfs -text\n\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1962890625,
          "content": "npm/fbx2gltf/bin/Darwin/FBX2glTF\nnpm/fbx2gltf/bin/Linux/FBX2glTF\nnpm/fbx2gltf/bin/Windows_NT/FBX2glTF.exe\nnpm/fbx2gltf/node_modules/\nnpm/tests/node_modules/\nnpm/tests/test/*.js\nnpm/tests/test/*.js.map\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 2.2646484375,
          "content": "git:\n  lfs_skip_smudge: true\n\nmatrix:\n  include:\n    - os: linux\n      dist: xenial\n      env: \n        - APP_NAME=\"FBX2glTF-linux-x64\"\n        - CONAN_CONFIG=\"-s compiler.libcxx=libstdc++11\"\n        - FBXSDK_TARBALL=\"https://github.com/zellski/FBXSDK-Linux/archive/2019.2.tar.gz\"\n        - TAR_WILDCARDS=\"--wildcards\"\n    - os: osx\n      osx_image: xcode10.2\n      env:\n        - APP_NAME=\"FBX2glTF-darwin-x64\"\n        - CONAN_CONFIG=\"-s compiler=apple-clang -s compiler.version=10.0 -s compiler.libcxx=libc++\"\n        - FBXSDK_TARBALL=\"https://github.com/zellski/FBXSDK-Darwin/archive/2019.2.tar.gz\"\n        - TAR_WILDCARDS=\"\"\ncompiler: gcc\nlanguage: generic\n\n#disabled for now\n#cache:\n#  directories:\n#  - ${HOME}/.conan\n\naddons:\n  apt:\n    packages: zstd\n  homebrew:\n    packages: zstd\n\ninstall:\n- curl -sL \"${FBXSDK_TARBALL}\" | tar xz --strip-components=1 ${TAR_WILDCARDS} */sdk\n- zstd -d -r --rm sdk\n- git clone --depth 1 git://github.com/astropy/ci-helpers.git\n- source ci-helpers/travis/setup_conda.sh\n- conda config --set always_yes yes\n- conda info -a\n- conda create -n travis_env python=3.7 pip\n- conda activate travis_env\n- pip install conan\n- conan user\n- conan remote add --force bincrafters https://api.bintray.com/conan/bincrafters/public-conan\n\nscript:\n- conan install . -i build -s build_type=Release ${CONAN_CONFIG}\n- conan build . -bf build\n- mv build/FBX2glTF build/${APP_NAME}\n\nnotifications:\n  webhooks:\n    - \"https://code.facebook.com/travis/webhook/\"\ndeploy:\n  provider: releases\n  api_key:\n    secure: V9CTmZKM7yvsT/WCesJ/tLTuapSf0oIp73zyZrwID7zQtXaq1QJSna4tWM2T0qeZIYhniH1/mqEr2jZVW1txmYn9ZxUMH1Nmp9zzOGl/q+JlRrJUi6HRUWWhCMz003L90whngyOcGI+T7rHtcVcby4owVsze15SrQqqV74NXI8DYNIbNgQR1Nwmqsrg0QirFPEBaIKDAiKonnRDWKPy2P8vqnN9fLhj00uHLwuvahlKAnWFEbNnFbiRScKifB+Mlo6Pf6r64iikrxS2jBxAgSsvPLkuemWLmaHTeGbJMM82aqh5vGSvgYcExvZi+0RdXeIcBdv/jaivM/xge4aZ+4P+IJoX32ZNCcYFMsqES+a6TztkywMs2k1r5gV6LrTjeXJsINSW+BDFdmrwmkudETc4gelQgkMmEkdCwFHENtZGl65z8HJDQKcu9F8NQlhNU7Z5rwQNLmYccvktSDhwbFSG5eq2kFFfcbVx3ovvn1voRTNnyhhVD2ZnLepSQInAVkZbaLkE90bQ+t9icf8uDdHDn17zOQaAZuecPlSW1y4XUCJnZCi0JPLhdSmQYiF60LHYI6xDneC8pmIz8kCUbk921zu8bJBy7zKHmfHy2vqNlPKuRULRIs5QzY31jf2PVZHzB5zX3KSqx9Dd+3DtgbLX2HLaZnANbkQc0rr1X2kk=\n  file: build/${APP_NAME}\n  skip_cleanup: true\n  on:\n    repo: facebookincubator/FBX2glTF\n    tags: true\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 7.384765625,
          "content": "cmake_minimum_required(VERSION 3.5)\nproject(FBX2glTF)\n\nset(typical_usage_str\n  \"Example usage:\\n\\\n  > mkdir -p build_debug\\n\\\n  > conan install . -i build_debug -s build_type=Debug -e FBXSDK_SDKS=/home/zell/FBXSDK\\n\\\n  > conan build . -bf build_debug\")\n\nif (\"${CMAKE_CURRENT_SOURCE_DIR}\" STREQUAL \"${CMAKE_BINARY_DIR}\")\n  message(FATAL_ERROR\n    \"Building from within the source tree is not supported! ${typical_usage_str}\")\nendif ()\n\nset(CMAKE_CXX_STANDARD 11)\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}\")\ninclude(ExternalProject)\n\n# FBX\nforeach (FBXSDK_VERSION \"2019.2\")\n  find_package(FBX)\n  if (FBXSDK_FOUND)\n    break()\n  endif()\nendforeach(FBXSDK_VERSION)\nif (NOT FBXSDK_FOUND)\n  message(FATAL_ERROR\n    \"Can't find FBX SDK in either:\\n\"\n    \" - Mac OS X: ${FBXSDK_APPLE_ROOT}\\n\"\n    \" - Windows: ${FBXSDK_WINDOWS_ROOT}\\n\"\n    \" - Linux: ${FBXSDK_LINUX_ROOT}\"\n  )\nendif()\n\nif(NOT EXISTS \"${CMAKE_BINARY_DIR}/conan_paths.cmake\")\n  message(FATAL_ERROR\n    \"The Conan package manager must run ('install') first. ${typical_usage_str}\")\nendif()\ninclude(\"${CMAKE_BINARY_DIR}/conan_paths.cmake\")\n\nset(CMAKE_THREAD_PREFER_PTHREAD TRUE)\nfind_package(Threads REQUIRED)\n\nlist(INSERT CMAKE_MODULE_PATH 0 \"${CMAKE_BINARY_DIR}\")\n\n# stuff we get from Conan\nfind_package(boost_filesystem MODULE REQUIRED)\nfind_package(boost_optional MODULE REQUIRED)\nfind_package(libxml2 MODULE REQUIRED)\nfind_package(zlib MODULE REQUIRED)\nfind_package(fmt MODULE REQUIRED)\n\n# create a compilation database for e.g. clang-tidy\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\n# DRACO\nExternalProject_Add(Draco\n  GIT_REPOSITORY https://github.com/google/draco\n  GIT_TAG 1.3.4\n  PREFIX draco\n  INSTALL_DIR\n  CMAKE_ARGS\n        -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>\n        -DBUILD_FOR_GLTF=1\n)\nset(DRACO_INCLUDE_DIR \"${CMAKE_BINARY_DIR}/draco/include\")\nif (WIN32)\n   set(DRACO_LIB \"${CMAKE_BINARY_DIR}/draco/lib/dracoenc.lib\")\nelse()\n   set(DRACO_LIB \"${CMAKE_BINARY_DIR}/draco/lib/libdracoenc.a\")\nendif()\n\n# MATHFU\nset(mathfu_build_benchmarks OFF CACHE BOOL \"\")\nset(mathfu_build_tests OFF CACHE BOOL \"\")\nExternalProject_Add(MathFu\n  PREFIX mathfu\n  GIT_REPOSITORY https://github.com/google/mathfu\n  GIT_TAG v1.1.0\n  CONFIGURE_COMMAND ${CMAKE_COMMAND} -E echo \"Skipping MathFu configure step.\"\n  BUILD_COMMAND ${CMAKE_COMMAND} -E echo \"Skipping MathFu build step.\"\n  INSTALL_COMMAND ${CMAKE_COMMAND} -E echo \"Skipping MathFu install step.\"\n)\nset(MATHFU_INCLUDE_DIRS\n        \"${CMAKE_BINARY_DIR}/mathfu/src/MathFu/include/\"\n        \"${CMAKE_BINARY_DIR}/mathfu/src/MathFu/dependencies/vectorial/include\")\n\n# OrderedMap\nExternalProject_Add(FiFoMap\n  PREFIX fifo_map\n  GIT_REPOSITORY https://github.com/nlohmann/fifo_map\n  CONFIGURE_COMMAND ${CMAKE_COMMAND} -E echo \"Skipping FiFoMap configure step.\"\n  BUILD_COMMAND ${CMAKE_COMMAND} -E echo \"Skipping FiFoMap build step.\"\n  INSTALL_COMMAND ${CMAKE_COMMAND} -E echo \"Skipping FiFoMap install step.\"\n)\nset(FIFO_MAP_INCLUDE_DIR \"${CMAKE_BINARY_DIR}/fifo_map/src/FiFoMap/src\")\n\n\n# cppcodec\nExternalProject_Add(CPPCodec\n  PREFIX cppcodec\n  GIT_REPOSITORY https://github.com/tplgy/cppcodec\n  CONFIGURE_COMMAND ${CMAKE_COMMAND} -E echo \"Skipping CPPCodec configure step.\"\n  BUILD_COMMAND ${CMAKE_COMMAND} -E echo \"Skipping CPPCodec build step.\"\n  INSTALL_COMMAND ${CMAKE_COMMAND} -E echo \"Skipping CPPCodec install step.\"\n)\nset(CPPCODEC_INCLUDE_DIR \"${CMAKE_BINARY_DIR}/cppcodec/src/CPPCodec\")\n\nif (APPLE)\n    find_library(CF_FRAMEWORK CoreFoundation)\n    message(\"CoreFoundation Framework: ${CF_FRAMEWORK}\")\n    set(FRAMEWORKS ${CF_FRAMEWORK})\nendif()\n\nset(LIB_SOURCE_FILES\n        src/FBX2glTF.h\n        src/fbx/materials/3dsMaxPhysicalMaterial.cpp\n        src/fbx/materials/FbxMaterials.cpp\n        src/fbx/materials/FbxMaterials.hpp\n        src/fbx/materials/RoughnessMetallicMaterials.hpp\n        src/fbx/materials/StingrayPBSMaterial.cpp\n        src/fbx/materials/TraditionalMaterials.cpp\n        src/fbx/materials/TraditionalMaterials.hpp\n        src/fbx/Fbx2Raw.cpp\n        src/fbx/Fbx2Raw.hpp\n        src/fbx/FbxBlendShapesAccess.cpp\n        src/fbx/FbxBlendShapesAccess.hpp\n        src/fbx/FbxLayerElementAccess.hpp\n        src/fbx/FbxSkinningAccess.cpp\n        src/fbx/FbxSkinningAccess.hpp\n        src/gltf/Raw2Gltf.cpp\n        src/gltf/Raw2Gltf.hpp\n        src/gltf/GltfModel.cpp\n        src/gltf/GltfModel.hpp\n        src/gltf/TextureBuilder.cpp\n        src/gltf/TextureBuilder.hpp\n        src/gltf/properties/AccessorData.cpp\n        src/gltf/properties/AccessorData.hpp\n        src/gltf/properties/AnimationData.cpp\n        src/gltf/properties/AnimationData.hpp\n        src/gltf/properties/BufferData.cpp\n        src/gltf/properties/BufferData.hpp\n        src/gltf/properties/BufferViewData.cpp\n        src/gltf/properties/BufferViewData.hpp\n        src/gltf/properties/CameraData.cpp\n        src/gltf/properties/CameraData.hpp\n        src/gltf/properties/ImageData.cpp\n        src/gltf/properties/ImageData.hpp\n        src/gltf/properties/LightData.cpp\n        src/gltf/properties/LightData.hpp\n        src/gltf/properties/MaterialData.cpp\n        src/gltf/properties/MaterialData.hpp\n        src/gltf/properties/MeshData.cpp\n        src/gltf/properties/MeshData.hpp\n        src/gltf/properties/NodeData.cpp\n        src/gltf/properties/NodeData.hpp\n        src/gltf/properties/PrimitiveData.cpp\n        src/gltf/properties/PrimitiveData.hpp\n        src/gltf/properties/SamplerData.hpp\n        src/gltf/properties/SceneData.cpp\n        src/gltf/properties/SceneData.hpp\n        src/gltf/properties/SkinData.cpp\n        src/gltf/properties/SkinData.hpp\n        src/gltf/properties/TextureData.cpp\n        src/gltf/properties/TextureData.hpp\n        src/mathfu.hpp\n        src/raw/RawModel.cpp\n        src/raw/RawModel.hpp\n        src/utils/File_Utils.cpp\n        src/utils/File_Utils.hpp\n        src/utils/Image_Utils.cpp\n        src/utils/Image_Utils.hpp\n        src/utils/String_Utils.hpp\n        third_party/CLI11/CLI11.hpp\n)\n\nadd_library(libFBX2glTF STATIC ${LIB_SOURCE_FILES})\nset_target_properties(libFBX2glTF PROPERTIES OUTPUT_NAME \"FBX2glTF\")\nadd_executable(appFBX2glTF src/FBX2glTF.cpp)\nset_target_properties(appFBX2glTF PROPERTIES OUTPUT_NAME \"FBX2glTF\")\n\nadd_dependencies(libFBX2glTF\n  Draco\n  MathFu\n  FiFoMap\n  CPPCodec\n)\n\nif (NOT MSVC)\n  # Disable annoying & spammy warning from FBX SDK header file\n  target_compile_options(libFBX2glTF PRIVATE\n    \"-Wno-null-dereference\"\n    \"-Wunused\"\n    )\n  target_compile_options(appFBX2glTF PRIVATE\n    \"-Wno-null-dereference\"\n    \"-Wunused\"\n    )\nendif()\n\ntarget_link_libraries(libFBX2glTF\n  ${FRAMEWORKS}\n  boost_filesystem::boost_filesystem\n  boost_optional::boost_optional\n  ${DRACO_LIB}\n  optimized ${FBXSDK_LIBRARY}\n  debug ${FBXSDK_LIBRARY_DEBUG}\n  fmt::fmt\n  libxml2::libxml2\n  zlib::zlib\n  ${CMAKE_DL_LIBS}\n  ${CMAKE_THREAD_LIBS_INIT}\n)\n\nif (APPLE)\n find_package(Iconv MODULE REQUIRED)\n target_link_libraries(libFBX2glTF Iconv)\nelse()\n find_package(libiconv MODULE REQUIRED)\n target_link_libraries(libFBX2glTF libiconv::libiconv)\nendif()\n\ntarget_include_directories(libFBX2glTF PUBLIC\n  ${CMAKE_CURRENT_SOURCE_DIR}/src\n)\n\ntarget_include_directories(libFBX2glTF SYSTEM PUBLIC\n  \"third_party/stb\"\n  \"third_party/json\"\n  ${FBXSDK_INCLUDE_DIR}\n  ${DRACO_INCLUDE_DIR}\n  ${MATHFU_INCLUDE_DIRS}\n  ${FIFO_MAP_INCLUDE_DIR}\n  ${CPPCODEC_INCLUDE_DIR}\n)\n\ntarget_include_directories(appFBX2glTF PUBLIC\n  \"third_party/CLI11\"\n)\ntarget_link_libraries(appFBX2glTF libFBX2glTF)\n\ninstall (TARGETS libFBX2glTF appFBX2glTF\n        RUNTIME DESTINATION bin\n        ARCHIVE DESTINATION lib\n)\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.23828125,
          "content": "# Code of Conduct\n\nFacebook has adopted a Code of Conduct that we expect project participants to adhere to.\nPlease read the [full text](https://code.fb.com/codeofconduct/)\nso that you can understand what actions will and will not be tolerated.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.1708984375,
          "content": "# Contributing to FBX2glTF\nWe want to make contributing to this project as easy and transparent as\npossible.\n\n## Pull Requests\nWe actively welcome your pull requests.\n\n1. Fork the repo and create your branch from `master`.\n2. Ensure your code matches the style of existing source.\n3. In case of behavioural changes, update this documentation.\n4. If you haven't already, complete the Contributor License Agreement (\"CLA\").\n\n## Contributor License Agreement (\"CLA\")\nIn order to accept your pull request, we need you to submit a CLA. You only need\nto do this once to work on any of Facebook's open source projects.\n\nComplete your CLA here: <https://code.facebook.com/cla>\n\n## Issues\nWe use GitHub issues to track public bugs. Please ensure your description is\nclear and has sufficient instructions to be able to reproduce the issue.\n\nFacebook has a [bounty program](https://www.facebook.com/whitehat/) for the safe\ndisclosure of security bugs. In those cases, please go through the process\noutlined on that page and do not file a public issue.\n\n## License\nBy contributing to FBX2glTF, you agree that your contributions will be licensed\nunder the LICENSE file in the root directory of this source tree.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.1591796875,
          "content": "FROM ubuntu:16.04\n\nRUN apt-get update && \\\n    apt-get install -y software-properties-common && \\\n    add-apt-repository ppa:jonathonf/python-3.6 && \\\n    add-apt-repository ppa:git-core/ppa && \\\n    apt-get update && \\\n    apt-get install -y python3.6 curl build-essential cmake libxml2-dev zlib1g-dev git && \\\n    curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && python3 get-pip.py && \\\n    pip install conan && \\\n    conan remote add bincrafters https://api.bintray.com/conan/bincrafters/public-conan\n\n# Install FBX SDK\nRUN mkdir -p /fbx2gltf/sdk/Linux/2019.2 && \\\n    curl -L https://www.autodesk.com/content/dam/autodesk/www/adn/fbx/20192/fbx20192_fbxsdk_linux.tar.gz -o fbx20192_fbxsdk_linux.tar.gz && \\\n    tar -xvf fbx20192_fbxsdk_linux.tar.gz && \\\n    echo \"yes\\nn\" | ./fbx20192_fbxsdk_linux /fbx2gltf/sdk/Linux/2019.2 && \\\n    rm -rf /fbxsdktemp\n\nCOPY . /fbx2gltf\n\nWORKDIR /fbx2gltf\n\n# Build and install\nRUN conan install . -i docker-build -s build_type=Release -s compiler=gcc -s compiler.version=5 -s compiler.libcxx=libstdc++11 && \\\n    conan build -bf docker-build . && \\\n    cp docker-build/FBX2glTF /usr/bin && \\\n    cd / && \\\n    rm -rf /fbx2gltf /root/.conan\n"
        },
        {
          "name": "FindFBX.cmake",
          "type": "blob",
          "size": 3.029296875,
          "content": "# Copyright (c) 2014-present, Facebook, Inc.\n# All rights reserved.\n#\n# Helper function for finding the FBX SDK.\n# Cribbed & tweaked from https://github.com/floooh/fbxc/\n#\n# params: FBXSDK_VERSION\n#         FBXSDK_SDKS\n#\n# sets:   FBXSDK_FOUND\n#         FBXSDK_DIR\n#         FBXSDK_LIBRARY\n#         FBXSDK_LIBRARY_DEBUG\n#         FBXSDK_INCLUDE_DIR\n#\n\n# semi-hack to detect architecture\nif( CMAKE_SIZEOF_VOID_P MATCHES 8 )\n  # void ptr = 8 byte --> x86_64\n  set(ARCH_32 OFF)\nelse()\n  # void ptr != 8 byte --> x86\n  set(ARCH_32 OFF)\nendif()\n\nif (NOT DEFINED FBXSDK_VERSION)\n  set(FBXSDK_VERSION \"2019.2\")\nendif()\n\nset(_fbxsdk_vstudio_version \"vs2017\")\n\nmessage(\"Looking for FBX SDK version: ${FBXSDK_VERSION}\")\n\nif (NOT DEFINED FBXSDK_SDKS)\n   set(FBXSDK_SDKS \"${CMAKE_CURRENT_SOURCE_DIR}/sdk\")\nendif()\n\nget_filename_component(FBXSDK_SDKS_ABS ${FBXSDK_SDKS} ABSOLUTE)\n\nset(FBXSDK_APPLE_ROOT   \"${FBXSDK_SDKS_ABS}/Darwin/${FBXSDK_VERSION}\")\nset(FBXSDK_LINUX_ROOT   \"${FBXSDK_SDKS_ABS}/Linux/${FBXSDK_VERSION}\")\nset(FBXSDK_WINDOWS_ROOT \"${FBXSDK_SDKS_ABS}/Windows/${FBXSDK_VERSION}\")\n\nif (APPLE)\n  set(_fbxsdk_root \"${FBXSDK_APPLE_ROOT}\")\n  set(_fbxsdk_libdir_debug \"lib/clang/debug\")\n  set(_fbxsdk_libdir_release \"lib/clang/release\")\n  set(_fbxsdk_libname_debug \"libfbxsdk.a\")\n  set(_fbxsdk_libname_release \"libfbxsdk.a\")\nelseif (WIN32)\n  set(_fbxsdk_root \"${FBXSDK_WINDOWS_ROOT}\")\n  if (ARCH_32)\n    set(_fbxsdk_libdir_debug \"lib/${_fbxsdk_vstudio_version}/x86/debug\")\n    set(_fbxsdk_libdir_release \"lib/${_fbxsdk_vstudio_version}/x86/release\")\n  else()\n    set(_fbxsdk_libdir_debug \"lib/${_fbxsdk_vstudio_version}/x64/debug\")\n    set(_fbxsdk_libdir_release \"lib/${_fbxsdk_vstudio_version}/x64/release\")\n  endif()\n  set(_fbxsdk_libname_debug \"libfbxsdk-md.lib\")\n  set(_fbxsdk_libname_release \"libfbxsdk-md.lib\")\nelseif (UNIX)\n  set(_fbxsdk_root \"${FBXSDK_LINUX_ROOT}\")\n  if (ARCH_32)\n    set(_fbxsdk_libdir_debug \"lib/gcc/x86/debug\")\n    set(_fbxsdk_libdir_release \"lib/gcc/x86/release\")\n  else()\n    set(_fbxsdk_libdir_debug \"lib/gcc/x64/debug\")\n    set(_fbxsdk_libdir_release \"lib/gcc/x64/release\")\n  endif()\n  set(_fbxsdk_libname_debug \"libfbxsdk.a\")\n  set(_fbxsdk_libname_release \"libfbxsdk.a\")\nelse()\n  message(FATAL_ERROR, \"Unknown platform. Can't find FBX SDK.\")\nendif()\n\n# should point the the FBX SDK installation dir\nset(FBXSDK_ROOT \"${_fbxsdk_root}\")\nmessage(\"FBXSDK_ROOT: ${FBXSDK_ROOT}\")\n\n# find header dir and libs\nfind_path(FBXSDK_INCLUDE_DIR \"fbxsdk.h\"\n  NO_CMAKE_FIND_ROOT_PATH\n  PATHS ${FBXSDK_ROOT}\n  PATH_SUFFIXES \"include\")\nmessage(\"FBXSDK_INCLUDE_DIR: ${FBXSDK_INCLUDE_DIR}\")\n\nfind_library(FBXSDK_LIBRARY ${_fbxsdk_libname_release}\n  NO_CMAKE_FIND_ROOT_PATH\n  PATHS \"${FBXSDK_ROOT}/${_fbxsdk_libdir_release}\")\nmessage(\"FBXSDK_LIBRARY: ${FBXSDK_LIBRARY}\")\n\nfind_library(FBXSDK_LIBRARY_DEBUG ${_fbxsdk_libname_debug}\n  NO_CMAKE_FIND_ROOT_PATH\n  PATHS \"${FBXSDK_ROOT}/${_fbxsdk_libdir_debug}\")\nmessage(\"FBXSDK_LIBRARY_DEBUG: ${FBXSDK_LIBRARY_DEBUG}\")\n\nif (FBXSDK_INCLUDE_DIR AND FBXSDK_LIBRARY AND FBXSDK_LIBRARY_DEBUG)\n  set(FBXSDK_FOUND YES)\nelse()\n  set(FBXSDK_FOUND NO)\nendif()\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4990234375,
          "content": "BSD License\n\nFor FBX2glTF software\n\nCopyright (c) Facebook, Inc. and its affiliates. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n * Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n * Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n * Neither the name Facebook nor the names of its contributors may be used to\n   endorse or promote products derived from this software without specific\n   prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.5419921875,
          "content": "# FBX2glTF\n\n[![License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)\n\nThis is a command line tool for converting 3D model assets on Autodesk's\nvenerable [FBX](https://www.autodesk.com/products/fbx/overview) format to\n[glTF 2.0](https://github.com/KhronosGroup/glTF/tree/master/specification/2.0),\na modern runtime asset delivery format.\n\nPrecompiled binaries releases for Windows, Mac OS X and Linux may be\nfound [here](https://github.com/facebookincubator/FBX2glTF/releases).\n\nBleeding-edge binaries for Windows may be found [here](https://ci.appveyor.com/project/Facebook/fbx2gltf/build/artifacts). Linux and Mac OS X to come; meanwhile, you can [build your own](#building-it-on-your-own).\n\n[![Build Status](https://travis-ci.com/facebookincubator/FBX2glTF.svg?branch=master)](https://travis-ci.com/facebookincubator/FBX2glTF)\n[![Build status](https://ci.appveyor.com/api/projects/status/5mq4vbc44vmyec4w?svg=true)](https://ci.appveyor.com/project/Facebook/fbx2gltf)\n\n## Running\n\nThe tool can be invoked like so:\n\n```\n > FBX2glTF ~/models/butterfly.fbx\n```\n\nOr perhaps, as part of a more complex pipeline:\n\n```\n > FBX2glTF --binary --draco --verbose \\\n          --input ~/models/source/butterfly.fbx \\\n          --output ~/models/target/butterfly.glb\n```\n\nThere are also some friendly & hands-on instructions available [over at Facebook](https://developers.facebook.com/docs/sharing/3d-posts/glb-tutorials/#convert-from-fbx).\n\n### CLI Switches\n\nYou can always run the binary with --help to see what options it takes:\n\n```\nFBX2glTF 0.9.7: Generate a glTF 2.0 representation of an FBX model.\nUsage: FBX2glTF [OPTIONS] [FBX Model]\n\nPositionals:\n  FBX Model FILE              The FBX model to convert.\n\nOptions:\n  -h,--help                   Print this help message and exit\n  -v,--verbose                Include blend shape tangents, if reported present by the FBX SDK.\n  -V,--version\n  -i,--input FILE             The FBX model to convert.\n  -o,--output TEXT            Where to generate the output, without suffix.\n  -e,--embed                  Inline buffers as data:// URIs within generated non-binary glTF.\n  -b,--binary                 Output a single binary format .glb file.\n  --long-indices (never|auto|always)\n                              Whether to use 32-bit indices.\n  --compute-normals (never|broken|missing|always)\n                              When to compute vertex normals from mesh geometry.\n  --anim-framerate (bake24|bake30|bake60)\n                              Select baked animation framerate.\n  --flip-u                    Flip all U texture coordinates.\n  --no-flip-u                 Don't flip U texture coordinates.\n  --flip-v                    Flip all V texture coordinates.\n  --no-flip-v                 Don't flip V texture coordinates.\n  --no-khr-lights-punctual    Don't use KHR_lights_punctual extension to export FBX lights.\n  --user-properties           Transcribe FBX User Properties into glTF node and material 'extras'.\n  --blend-shape-normals       Include blend shape normals, if reported present by the FBX SDK.\n  --blend-shape-tangents      Include blend shape tangents, if reported present by the FBX SDK.\n  -k,--keep-attribute (position|normal|tangent|binormial|color|uv0|uv1|auto) ...\n                              Used repeatedly to build a limiting set of vertex attributes to keep.\n  --fbx-temp-dir DIR          Temporary directory to be used by FBX SDK.\n\n\nMaterials:\n  --pbr-metallic-roughness    Try to glean glTF 2.0 native PBR attributes from the FBX.\n  --khr-materials-unlit       Use KHR_materials_unlit extension to request an unlit shader.\n\n\nDraco:\n  -d,--draco                  Apply Draco mesh compression to geometries.\n  --draco-compression-level INT in [0 - 10]=7\n                              The compression level to tune Draco to.\n  --draco-bits-for-position INT in [1 - 32]=14\n                              How many bits to quantize position to.\n  --draco-bits-for-uv INT in [1 - 32]=10\n                              How many bits to quantize UV coordinates to.\n  --draco-bits-for-normals INT in [1 - 32]=10\n                              How many bits to quantize nornals to.\n  --draco-bits-for-colors INT in [1 - 32]=8\n                              How many bits to quantize colors to.\n  --draco-bits-for-other INT in [1 - 32]=8\n                              How many bits to quantize all other vertex attributes to.\n```\n\nSome of these switches are not obvious:\n\n- `--embed` is the way to get a single distributable file without using the\n  binary format. It encodes the binary buffer(s) as a single base64-encoded\n  `data://` URI. This is a very slow and space-consuming way to accomplish what\n  the binary format was invented to do simply and efficiently, but it can be\n  useful e.g. for loaders that don't understand the .glb format.\n- `--flip-u` and `--flip-v`, when enabled, will apply a `x -> (1.0 - x)`\n  function to all `u` or `v` texture coordinates respectively. The `u` version\n  is perhaps not commonly used, but flipping `v` is **the default behaviour**.\n  Your FBX is likely constructed with the assumption that `(0, 0)` is bottom\n  left, whereas glTF has `(0, 0)` as top left. To produce spec-compliant glTF,\n  we must flip the texcoords. To request unflipped coordinates:\n- `--long-indices` lets you force the use of either 16-bit or 32-bit indices.\n  The default option is auto, which make the choice on a per-mesh-size basis.\n- `--compute-normals` controls when automatic vertex normals should be computed\n  from the mesh. By default, empty normals (which are forbidden by glTF) are\n  replaced. A choice of 'missing' implies 'broken', but additionally creates\n  normals for models that lack them completely.\n- `--no-flip-v` will actively disable v coordinat flipping. This can be useful\n  if your textures are pre-flipped, or if for some other reason you were already\n  in a glTF-centric texture coordinate system.\n- All three material options are, in their own way, works in progress, but the\n  `--pbr-metallic-roughness` switch is at least compliant with the core spec;\n  unlike the others, it does not depend on an unratified extension. That option\n  will be chosen by default if you supply none of the others. Material switches\n  are documented further below.\n- If you supply any `-keep-attribute` option, you enable a mode wherein you must\n  supply it repeatedly to list _all_ the vertex attributes you wish to keep in\n  the conversion process. This is a way to trim the size of the resulting glTF\n  if you know the FBX contains superfluous attributes. The supported arguments\n  are `position`, `normal`, `tangent`, `color`, `uv0`, and `uv1`.\n- When **blend shapes** are present, you may use `--blend-shape-normals` and\n  `--blend-shape-tangents` to include normal and tangent attributes in the glTF\n  morph targets. They are not included by default because they rarely or never\n  seem to be correctly present in the actual FBX source, which means the SDK\n  must be computing them from geometry, unasked? In any case, they are beyond\n  the control of the artist, and can yield strange crinkly behaviour. Since\n  they also take up significant space in the output file, we made them opt-in.\n\n## Building it on your own\n\nWe currently depend on the open source projects\n[Draco](https://github.com/google/draco),\n[MathFu](https://github.com/google/mathfu),\n[Json](https://github.com/nlohmann/json),\n[cppcodec](https://github.com/tplgy/cppcodec),\n[CLI11](https://github.com/CLIUtils/CLI11),\n[stb](https://github.com/nothings/stb),\nand [fmt](https://github.com/fmtlib/fmt);\nall of which are automatically downloaded and/or built.\n\n**At present, only version 2019.2 of the FBX SDK is supported**. The\nbuild system will not successfully locate any other version.\n\n### Linux and MacOS X\n\nYour development environment will need to have:\n\n- build essentials (gcc for Linux, clang for Mac)\n- cmake\n- python 3.\\* and associated pip3/pip command\n- zstd\n\nThen, compilation on Unix machines will look something like:\n\n```\n# Determine SDK location & build settings for Linux vs (Recent) Mac OS X\n> if [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n    export CONAN_CONFIG=\"-s compiler=apple-clang -s compiler.version=10.0 -s compiler.libcxx=libc++\"\n    export FBXSDK_TARBALL=\"https://github.com/zellski/FBXSDK-Darwin/archive/2019.2.tar.gz\"\nelif [[ \"$OSTYPE\" == \"linux\"* ]]; then\n    export CONAN_CONFIG=\"-s compiler.libcxx=libstdc++11\"\n    export FBXSDK_TARBALL=\"https://github.com/zellski/FBXSDK-Linux/archive/2019.2.tar.gz\"\nelse\n    echo \"This snippet only handles Mac OS X and Linux.\"\nfi\n\n# Fetch Project\n> git clone https://github.com/facebookincubator/FBX2glTF.git\n> cd FBX2glTF\n\n# Fetch and unpack FBX SDK\n> curl -sL \"${FBXSDK_TARBALL}\" | tar xz --strip-components=1 --include */sdk/\n# Then decompress the contents\n> zstd -d -r --rm sdk\n\n# Install and configure Conan, if needed\n> pip3 install conan # or sometimes just \"pip\"; you may need to install Python/PIP\n> conan remote add --force bincrafters https://api.bintray.com/conan/bincrafters/public-conan\n\n# Initialize & run build\n> conan install . -i build -s build_type=Release ${CONAN_CONFIG}\n> conan build . -bf build\n```\n\nIf all goes well, you will end up with a statically linked executable in `./build/FBX2glTF`.\n\n### Windows\n\n<TODO> the below is out of date\n\nWindows users may [download](https://cmake.org/download) CMake for Windows,\ninstall it and [run it](https://cmake.org/runningcmake/) on the FBX2glTF\ncheckout (choose a build directory distinct from the source).\n\nAs part of this process, you will be asked to choose which generator\nto use. **At present, only Visual Studio 2017 or 2019 is supported.** Older\nversions of the IDE are unlikely to successfully build the tool.\n\nNote that the `CMAKE_BUILD_TYPE` variable from the Unix Makefile system is\nentirely ignored here; it is when you open the generated solution that\nyou will be choose one of the canonical build types — _Debug_,\n_Release_, _MinSizeRel_, and so on.\n\n## Conversion Process\n\nThe actual translation begins with the FBX SDK parsing the input file, and ends\nwith the generation of the descriptive `JSON` that forms the core of glTF, along\nwith binary buffers that hold geometry and animations (and optionally also\nemedded resources such as textures.)\n\nIn the process, each mesh is ripped apart into a long list of triangles and\ntheir associated vertices, with a material assigned to each one. A similar\nprocess happens in reverse when we construct meshes and materials that conform\nto the expectations of the glTF format.\n\n### Animations\n\nEvery animation in the FBX file becomes an animation in the glTF file. The\nmethod used is one of \"baking\": we step through the interval of time spanned by\nthe animation, keyframe by keyframe, calculate the local transform of each\nnode, and whenever we find any node that's rotated, translated or scaled, we\nrecord that fact in the output.\n\nBeyond skeleton-based animation, _Blend Shapes_ are also supported; they are\nread from the FBX file on a per-mesh basis, and clips can use them by varying\nthe weights associated with each one.\n\nThe baking method has the benefit of being simple and precise. It has the\ndrawback of creating potentially very large files. The more complex the\nanimation rig, the less avoidable this data explosion is.\n\nThere are three future enhancements we hope to see for animations:\n\n- Version 2.0 of glTF brought us support for expressing quadratic animation\n  curves, where previously we had only had linear. Not coincidentally, quadratic\n  splines are one of the key ways animations are expressed inside the FBX. When\n  we find such a curve, it would be more efficient to output it without baking\n  it into a long sequence of linear approximations.\n- We do not yet ever generate\n  [sparse accessors](https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#sparse-accessors),\n  but many animations (especially morph targets) would benefit from this\n  storage optimisation.\n- Perhaps most useful in practice is the idea of compressing animation curves\n  the same way we use Draco to compress meshes (see below). Like geometry,\n  animations are highly redundant — each new value is highly predictable from\n  preceding values. If Draco extends its support for animations (it's on their\n  roadmap), or if someone else develops a glTF extension for animation\n  compression, we will likely add support in this tool.\n\n### Materials\n\nWith glTF 2.0, we leaped headlong into physically-based rendering (PBR), where\nthe canonical way of expressing what a mesh looks like is by describing its\nvisible material in fundamental attributes like \"how rough is this surface\".\n\nBy contrast, FBX's material support remains largely in the older world of\nLambert and Phong, with simpler and more direct illumination and shading\nmodels. These modes are inherently incompatible — for example, textures in the\nold workflow often contain baked lighting of the type that would arise naturally\nin a PBR environment.\n\nSome material settings remain well supported and transfer automatically:\n\n- Emissive constants and textures\n- Occlusion maps\n- Normal maps\n\nThis leaves the other traditional settings, first of Lambert:\n\n- Ambient — this is anathema in the PBR world, where such effects should\n  emerge naturally from the fundamental colour of the material and any ambient\n  lighting present.\n- Diffuse — the material's direction-agnostic, non-specular reflection,\n  and additionally, with Blinn/Phong:\n- Specular — a more polished material's direction-sensitive reflection,\n- Shininess — just how polished the material is; a higher value here yields a\n  more mirror-like surface.\n\n(All these can be either constants or textures.)\n\n#### Exporting as Unlit\n\nIf you have a model was constructed using an unlit workflow, e.g. a photogrammetry\ncapture or a landscape with careful baked-in lighting, you may choose to export\nit using the --khr-materials-common switch. This incurs a dependency on the glTF\nextension 'KHR_materials_unlit; a client that accepts that extension is making\na promise it'll do its best to render pixel values without lighting calculations.\n\n**Note that at the time of writing, this glTF extension is still undergoing the\nratification process**\n\n#### Exporting as Metallic-Roughness PBR\n\nGiven the command line flag --pbr-metallic-roughness, we throw ourselves into\nthe warm embrace of glTF 2.0's PBR preference.\n\nAs mentioned above, there is little consensus in the world on how PBR should be\nrepresented in FBX. At present, we support only one format: Stingray PBS. This\nis a feature that comes bundled with Maya, and any PBR model exported through\nthat route should be digested propertly by FBX2glTF.\n\n(A happy note: Allegorithmic's Substance Painter also exports Stingray PBS,\nwhen hooked up to Maya.)\n\n## Draco Compression\n\nThe tool will optionally apply [Draco](https://github.com/google/draco)\ncompression to the geometric data of each mesh (vertex indices, positions,\nnormals, per-vertex color, and so on). This can be dramatically effective\nin reducing the size of the output file, especially for static models.\n\nEnabling this feature adds an expressed required dependency in the glTF on the\n`KHR_draco_geometry_compression` extension, and can thus only be loaded by a\nviewer that is willing and able to decompress the data.\n\n**Note that at the time of writing, this glTF extension is still undergoing the\nratification process.**\n\n## Future Improvements\n\nThis tool is under continuous development. We do not have a development roadmap\nper se, but some aspirations have been noted above. The canonical list of active\nTODO items can be found\n[on GitHub](https://github.com/facebookincubator/FBX2glTF/labels/enhancement).\n\n## Authors\n\n- Pär Winzell\n- J.M.P. van Waveren\n- Amanda Watson\n\n## License\n\nFBX2glTF is licensed under the [3-clause BSD license](LICENSE).\n"
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 2.798828125,
          "content": "# C/C++ with GCC\n# Build your C/C++ project with GCC using make.\n# Add steps that publish test results, save build artifacts, deploy, and more:\n# https://docs.microsoft.com/azure/devops/pipelines/apps/c-cpp/gcc\n\njobs:\n- job: Linux\n  pool:\n    vmImage: 'Ubuntu 16.04'\n\n  steps:\n  - task: UsePythonVersion@0\n    inputs:\n      versionSpec: '3.6'\n      architecture: 'x64'\n\n  - script: python -m pip install --upgrade pip setuptools wheel\n    displayName: 'Install Python tools'\n\n  - script: |\n      pip install conan\n      conan remote add bincrafters https://api.bintray.com/conan/bincrafters/public-conan\n    displayName: 'Install & configure Conan'\n\n  - script: |\n      conan install . -i build -s build_type=Release -e FBXSDK_SDKS=sdk\n    displayName: 'Resolve binary dependencies and build CMake files.'\n\n  - script: |\n      conan build -bf build .\n      mv build/FBX2glTF build/FBX2glTF-linux-x64\n    displayName: 'Build FBX2glTF'\n\n  - task: PublishBuildArtifacts@1\n    inputs:\n      pathtoPublish: 'build/FBX2glTF-linux-x64'\n      artifactName: 'binaries'\n\n- job: Mac\n  pool:\n    vmImage: 'macOS-10.14'\n\n  steps:\n  - task: UsePythonVersion@0\n    inputs:\n      versionSpec: '3.6'\n      architecture: 'x64'\n\n  - script: python -m pip install --upgrade pip setuptools wheel\n    displayName: 'Install Python tools'\n\n  - script: |\n      pip install conan\n      conan remote add bincrafters https://api.bintray.com/conan/bincrafters/public-conan\n    displayName: 'Install Conan'\n\n  - script: |\n      conan install . -i build -s compiler=apple-clang -s compiler=apple-clang -s compiler.version=10.0 -s compiler.libcxx=libc++ -s build_type=Release -e FBXSDK_SDKS=sdk\n    displayName: 'Resolve binary dependencies and build CMake files.'\n\n  - script: |\n      conan build -bf build .\n      mv build/FBX2glTF build/FBX2glTF-darwin-x64\n    displayName: 'Build FBX2glTF'\n\n  - task: PublishBuildArtifacts@1\n    inputs:\n      pathtoPublish: 'build/FBX2glTF-darwin-x64'\n      artifactName: 'binaries'\n\n- job: Windows\n  pool:\n    vmImage: 'vs2017-win2016'\n\n  steps:\n  - task: UsePythonVersion@0\n    inputs:\n      versionSpec: '3.6'\n      architecture: 'x64'\n\n  - script: python -m pip install --upgrade pip setuptools wheel\n    displayName: 'Install Python tools'\n\n  - script: |\n      pip install conan\n      conan remote add bincrafters https://api.bintray.com/conan/bincrafters/public-conan\n    displayName: 'Install Conan'\n\n  - script: |\n      conan install . -i build -s build_type=Release -e FBXSDK_SDKS=sdk\n    displayName: 'Resolve binary dependencies and build CMake files.'\n\n  - script: |\n      conan build -bf build .\n      move build\\Release\\FBX2glTF.exe build\\Release\\FBX2glTF-windows-x64.exe\n    displayName: 'Build FBX2glTF'\n\n  - task: PublishBuildArtifacts@1\n    inputs:\n      pathtoPublish: 'build/Release/FBX2glTF-windows-x64.exe'\n      artifactName: 'binaries'\n"
        },
        {
          "name": "conanfile.py",
          "type": "blob",
          "size": 0.94921875,
          "content": "# Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved\n#\n\nimport os\n\nfrom conans import ConanFile, CMake\n\n\nclass FBX2glTFConan(ConanFile):\n    settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n    requires = (\n        (\"boost_filesystem/1.69.0@bincrafters/stable\"),\n        (\"libiconv/1.15@bincrafters/stable\"),\n        (\"zlib/1.2.11@conan/stable\"),\n        (\"libxml2/2.9.9@bincrafters/stable\"),\n        (\"fmt/5.3.0@bincrafters/stable\"),\n    )\n    generators = \"cmake_find_package\", \"cmake_paths\"\n\n    def configure(self):\n        if (\n            self.settings.compiler == \"gcc\"\n            and self.settings.compiler.libcxx == \"libstdc++\"\n        ):\n            raise Exception(\n                \"Rerun 'conan install' with argument: '-s compiler.libcxx=libstdc++11'\"\n            )\n\n    def build(self):\n        cmake = CMake(self)\n        cmake.definitions[\"FBXSDK_SDKS\"] = os.getenv(\"FBXSDK_SDKS\", \"sdk\")\n        cmake.configure()\n        cmake.build()\n"
        },
        {
          "name": "docker-compose.yaml",
          "type": "blob",
          "size": 0.0634765625,
          "content": "version: '3.7'\nservices:\n  fbx2gltf:\n    build:\n      context: .\n"
        },
        {
          "name": "npm",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}