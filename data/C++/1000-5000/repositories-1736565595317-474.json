{
  "metadata": {
    "timestamp": 1736565595317,
    "page": 474,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "root-project/root",
      "stars": 2756,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".ci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 3.068359375,
          "content": "# BasedOnStyle:  LLVM\nAccessModifierOffset: -3\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: None\n# This would be nice to have but seems to also (mis)align function parameters\nAlignConsecutiveDeclarations: None\nAlignEscapedNewlines: Left\nAlignOperands:   true\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: Never\nAllowShortCaseLabelsOnASingleLine: true\nAllowShortEnumsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: Inline\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\n# This option is \"deprecated and is retained for backwards compatibility.\"\n# AlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: Yes\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:\n  AfterClass:      false\n  AfterControlStatement: Never\n  AfterEnum:       false\n  AfterFunction:   true\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Custom\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nColumnLimit:     120\nCommentPragmas:  '^ IWYU pragma:'\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 3\nContinuationIndentWidth: 3\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nForEachMacros:   [ foreach, Q_FOREACH, BOOST_FOREACH ]\nIndentCaseLabels: false\nIndentWidth:     3\nIndentWrappedFunctionNames: false\nKeepEmptyLinesAtTheStartOfBlocks: true\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBlockIndentWidth: 3\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakBeforeFirstCallParameter: 19\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 10\nPointerAlignment: Right\nReflowComments: true\nSortIncludes: Never\nSpaceAfterCStyleCast: false\nSpaceBeforeAssignmentOperators: true\n# You want this : enable it if you have https://reviews.llvm.org/D32525\n# SpaceBeforeColon: false\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        c++11\nTabWidth:        3\nUseTab:          Never\n\n# Order alphabetically and by generality the included header files.\nIncludeCategories:\n  - Regex:           '^\"[^/]+\\\"'\n    Priority:        10\n  - Regex:           '^(\"|<)T'\n    Priority:        12\n  - Regex:           '^\"ROOT/'\n    Priority:        15\n  - Regex:           '^\"cling/'\n    Priority:        20\n  - Regex:           '^\"clang/'\n    Priority:        30\n  - Regex:           '^\"llvm/'\n    Priority:        40\n  - Regex:           '^<'\n    Priority:        50\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 0.021484375,
          "content": "WarningsAsErrors: '*'\n"
        },
        {
          "name": ".git-commit-template",
          "type": "blob",
          "size": 0.7939453125,
          "content": "# Commit summary: Written in the present imperative mood.\n# Prefixed by a [scope] tag, not exceeding 50 characters (excl. scope tag).\n#                                                # <- 50 chars is here.\n[scope] Add/fix/improve/... X\n\n# Commit message: Describe the 'why' behind the change. Wrap at 72 characters.\n#                                                                      # <- 72 chars is here.\n\n\n# In case the commit fixes a specific issue, uncomment and add the issue ID:\n# Fixes https://github.com/root-project/root/issues/ISSUE_ID\n\n# Tell git to use this commit template by adding it to the repository configuration:\n#   git config commit.template .git-commit-template\n\n# See https://github.com/root-project/root/blob/master/CONTRIBUTING.md for more\n# information on how to contribute to ROOT.\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.583984375,
          "content": "# Set default behaviour, in case users don't have core.autocrlf set.\n* text=auto\n\n# Declare files that will always have CRLF line endings on checkout.\n*.sln eol=crlf\n*.dsp eol=crlf\n*.dsw eol=crlf\n*.bat eol=crlf\n*.cs  eol=crlf\n*.csproj eol=crlf\n*.vsct  eol=crlf\n*.resx  eol=crlf\n*.vsixmanifest  eol=crlf\ntree/dataframe/test/RCsvDS_test_win.csv  eol=crlf\n\n# Files in the LLVM monorepo are not normalized, avoid whitespace diffs.\ninterpreter/llvm-project/** -text\n\n# Denote all files that are truly binary and should not be modified.\n*.png binary\n*.jpg binary\n*.pdf binary\n*.root binary\n*.fits binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.642578125,
          "content": "# roottest & rootbench are their own repos\nroottest\nrootbench\n\n# MacOS Xcode\nxcuserdata\nproject.xcworkspace\n\n# MacOS metadata\n.DS_Store\n\n# VS Code\n.vs/\n.vscode\n.build\n\n# CLion\n.idea/*\ncmake-build*/\n\n# QtCreator\nCMakeLists.txt.user\n*.autosave\n\n# Eclipse\n.settings/*\n.cproject\n.project\n.externalToolBuilders\n.pydevproject\n\n# Vim\n*.swp\n\n# Other Stuff\ntags\n*.d\n.cache\n.gdb_history\ncompile_commands.json\n\n# Doxygen\ndocumentation/doxygen/*.eps\ndocumentation/doxygen/*.pcm\ndocumentation/doxygen/*.jpg\ndocumentation/doxygen/*.root\ndocumentation/doxygen/*.csv\ndocumentation/doxygen/*.png\ndocumentation/doxygen/*.pdf\ndocumentation/doxygen/*.dot\n\n# Pycache\n__pycache__\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 9.55078125,
          "content": "Abhinav Moudgil <abhinavmoudgil95@gmail.com> <abhinavmoudgil@Abhinavs-MacBook-Pro.local>\nAdrian Bevan <bevan@slac.stanford.edu>\nAdrien Devresse <adevress@cern.ch>\nAlexandra Dobrescu <alexandra-maria.dobrescu@cern.ch> AlexandraDobrescu <alexandra.dobrescu@asaff.ro>\nAlice Alfonsi <alice.alfonsi@cern.ch>\nAnders Eie <strykejernene@gmail.com> Anders E <strykejernene@gmail.com>\nAndreas Weiden <andreas.weiden@cern.ch> <andreas.weiden@gmail.com>\nAndrei Gheata <Andrei.Gheata@cern.ch> agheata <Andrei.Gheata@cern.ch>\nAndrei Gheata <Andrei.Gheata@cern.ch> <andrei.gheata@cern.ch>\nAndres Vargas <vargasa@jlab.org>\nArthur Tsang <arthurltsang@gmail.com>\nAttila Krasznahorkay <Attila.Krasznahorkay@cern.ch> <30694331+krasznaa@users.noreply.github.com>\nAxel Naumann <Axel.Naumann@cern.ch>\nBastian Beischer <bastian.beischer@cern.ch> <beischer@physik.rwth-aachen.de>\nBenjamin Bannier <bbannier@bnl.gov> <bbannier@gmail.com>\nBertrand Bellenot <Bertrand.Bellenot@cern.ch>\nBertrand Bellenot <Bertrand.Bellenot@cern.ch> <bellenot@bbslc6x64-dev.cern.ch>\nBertrand Bellenot <Bertrand.Bellenot@cern.ch> <bellenot@users.noreply.github.com>\nBertrand Bellenot <Bertrand.Bellenot@cern.ch> <bertrand.bellenot@cern.ch>\nBianca Cristina Cristescu <bianca-cristina.cristescu@cern.ch>\nBrian Bockelman <bbockelm@cse.unl.edu> Brian <bbockelm@cse.unl.edu>\nCarsten Burgard <cburgard@cern.ch> carsten.burgard <cburgard@cern.ch>\nCarsten Burgard <cburgard@cern.ch> <carsten.burgard@gmail.com>\nCarsten Burgard <cburgard@cern.ch> Carsten Daniel Burgard <cburgard@cern.ch>\nCarsten Burgard <cburgard@cern.ch> cburgard <carsten.burgard@gmail.com>\nChris Jones <jonesc@hep.phy.cam.ac.uk> cjones051073 <jonesc@hep.phy.cam.ac.uk>\nChristian Gumpert <cgumpert@cern.ch>\nChristopher Burr <christopher.burr@cern.ch> Chris Burr <chrisburr@users.noreply.github.com>\nChristopher D Jones <cdj@fnal.gov> Christopher Jones <chrisdjones15@gmail.com>\nDanilo Piparo <danilo.piparo@cern.ch>\nDanilo Piparo <danilo.piparo@cern.ch> <Danilo.Piparo@cern.ch>\nDanilo Piparo <danilo.piparo@cern.ch> <danilopiparo@danilo-piparos-macbook-pro.local>\nDanilo Piparo <danilo.piparo@cern.ch> <danilopiparo@Danilo-Piparos-MacBook-Pro.local>\nDanilo Piparo <danilo.piparo@cern.ch> <dpiparo@cern.ch>\nDavid Abdurachmanov <David.Abdurachmanov@cern.ch> David Abdurachmanov <david.abdurachmanov@gmail.com>\nDavid Abdurachmanov <David.Abdurachmanov@cern.ch> David Abdurachmanov <davidlt@cern.ch>\nDavid Lange <David.Lange@cern.ch> David <David.Lange@cern.ch>\nDavid Smith <David.Smith@cern.ch> David Smith <david.smith@cern.ch>\nElie Khairallah <eliekhairallah1996@gmail.com> ElieKhairallah <40396721+ElieKhairallah@users.noreply.github.com>\nEnrico Guiraud <enrico.guiraud@cern.ch>\nEnrico Guiraud <enrico.guiraud@cern.ch> blue <blue@lcm.mi.infn.it>\nEnrico Guiraud <enrico.guiraud@cern.ch> bluehood <blue@lcm.mi.infn.it>\nEnrico Guiraud <enrico.guiraud@cern.ch> <bluehood@users.noreply.github.com>\nEnrico Guiraud <enrico.guiraud@cern.ch> <enrico.guiraud@cern.ch>\nEnrico Guiraud <enrico.guiraud@cern.ch> <enrico.guiraud@gmail.com>\nEnrico Guiraud <enrico.guiraud@cern.ch> <nrico.guiraud@gmail.com>\nEnric Tejedor Saavedra <enric.tejedor.saavedra@cern.ch> Enric Tejedor\nEnric Tejedor Saavedra <enric.tejedor.saavedra@cern.ch> etejedor <lenric@gmail.com>\nEnric Tejedor Saavedra <enric.tejedor.saavedra@cern.ch> <etejedor@pcphsft63.cern.ch>\nEvgueni Tcherniaev <evgueni.tcherniaev@cern.ch> etcherniaev <evgueni.tcherniaev@cern.ch>\nFons Rademakers <Fons.Rademakers@cern.ch>\nGerardo Ganis <Gerardo.Ganis@cern.ch> ganis <gerardo.ganis@cern.ch>\nGerardo Ganis <Gerardo.Ganis@cern.ch> Gerardo GANIS <Gerardo.Ganis@cern.ch>\nGerardo Ganis <Gerardo.Ganis@cern.ch> gganis <gerardo.ganis@gmail.com>\nGuilherme Amadio <amadio@cern.ch> <guilherme@amadio.org>\nHenry Fredrick Schreiner <henry.fredrick.schreiner@cern.ch> Henry Schreiner <henryschreineriii@utexas.edu>\nHeshy Roskes <hroskes@jhu.edu> <jroskes1@jhu.edu>\nIvana Hrivnacova <Ivana.Hrivnacova@cern.ch> Ivana Hrivnacova <ihrivnac@mail.cern.ch>\nJohn Harvey <John.Harvey@cern.ch> John Harvey <harveyj1953@gmail.com>\nJohn Harvey <John.Harvey@cern.ch> John Harvey <harvey@jhthunderboltdisplay.dyndns.cern.ch>\nKim Albertsson <ketost@gmail.com>\nKim Albertsson <ketost@gmail.com> Kim Albertsson <ashlaban@users.noreply.github.com>\nLorenzo Moneta <Lorenzo.Moneta@cern.ch>\nLorenzo Moneta <Lorenzo.Moneta@cern.ch> <lorenzo.moneta@cern.ch>\nLorenzo Moneta <Lorenzo.Moneta@cern.ch> <lornezo.moneta@cern.ch>\nLorenzo Moneta <Lorenzo.Moneta@cern.ch> <moneta@imaclm.cern.ch>\nLorenzo Moneta <Lorenzo.Moneta@cern.ch> <moneta@lcgapp07.cern.ch>\nLorenzo Moneta <Lorenzo.Moneta@cern.ch> moneta <moneta@titanx.dyndns.cern.ch>\nLorenzo Moneta <Lorenzo.Moneta@cern.ch> <moneta@olhswep08.cern.ch>\nLorenzo Moneta <Lorenzo.Moneta@cern.ch> <moneta@olhswep13.cern.ch>\nLorenzo Moneta <Lorenzo.Moneta@cern.ch> <moneta@pb-d-128-141-235-197.cern.ch>\nLorenzo Moneta <Lorenzo.Moneta@cern.ch> <moneta@techlab-gpu-nvidiagtx1080-07.cern.ch>\nLorenzo Moneta <Lorenzo.Moneta@cern.ch> <moneta@techlab-gpu-nvidiak20-02.cern.ch>\nLorenzo Moneta <Lorenzo.Moneta@cern.ch> <moneta@tlab-gpu-gtx1080ti-08.cern.ch>\nLorenzo Moneta <Lorenzo.Moneta@cern.ch> <moneta@vinavx0.cern.ch>\nLuca Giommi <luca.giommi@cern.ch> lgiommi <luca.giommi@cern.ch>\nManuel Tobias Schiller <manuel.schiller@nikhef.nl> Manuel Tobias Schiller <mala@hinterbergen.de>\nMartin Ritter <martin.ritter@desy.de> Martin Ritter <martin.ritter@lmu.de>\nMassimo Tumolo <imaxoi@hotmail.it> massimo <imaxoi@hotmail.it>\nMatevz Tadel <matevz.tadel@cern.ch> Matevz Tadel <mtadel@ucsd.edu>\nMattias Ellert <mattias.ellert@physics.uu.se> ellert <mattias.ellert@physics.uu.se>\nMattias Ellert <mattias.ellert@physics.uu.se> <mattias.ellert@fysast.uu.se>\nOksana Shadura <oksana.shadura@cern.ch> oshadura\nOksana Shadura <oksana.shadura@cern.ch> <oshadura@users.noreply.github.com>\nOlivier Couet <Olivier.Couet@cern.ch> <olivier.couet@cern.ch>\nOlivier Couet <Olivier.Couet@cern.ch> <olivier.couet@gmail.com>\nOmar Zapata <Omar.Zapata@cern.ch>\nOmar Zapata <Omar.Zapata@cern.ch> Omar Andres Zapata Mesa <andresete.chaos@gmail.com>\nOmar Zapata <Omar.Zapata@cern.ch> Omar Andres Zapata Mes <andresete.chaos@gmail.com>\nOmar Zapata <Omar.Zapata@cern.ch> Omar  Zapata <andresete.chaos@gmail.com>\nPatrick Bos <egpbos@gmail.com>\nPaul Gessinger <paul.gessinger@cern.ch> Paul Gessinger <hello@paulgessinger.com>\nPaul Seyfert <pseyfert@cern.ch> <paul.seyfert@mib.infn.it>\nPaul Seyfert <pseyfert@cern.ch> <pseyfert@cern.ch>\nPaul Seyfert <pseyfert@cern.ch> <pseyfert.mathphys@gmail.com>\nPaul Seyfert <pseyfert@cern.ch> pseyfert <pseyfert@users.noreply.github.com>\nPere Mato <pere.mato@cern.ch>\nPere Mato Vila <pere.mato@cern.ch> Pere Mato <mato@cern.ch>\nPere Mato Vila <pere.mato@cern.ch> Pere Mato <pere.mato@cern.ch>\nPere Mato Vila <pere.mato@cern.ch> peremato <peremato@users.noreply.github.com>\nPere Mato Vila <pere.mato@cern.ch> Pere Mato <peremato@users.noreply.github.com>\nPere Mato Vila <pere.mato@cern.ch> Pere Mato Vila <mato@cern.ch>\nPere Mato Vila <pere.mato@cern.ch> Pere Mato Vila <mato@lxbuild175.cern.ch>\nPeter Fackeldey <peter.fackeldey@rwth-aachen.de> pfackeldey <peter.fackeldey@rwth-aachen.de>\nPeter Hristov <Peter.Hristov@cern.ch> hristov <Peter.Hristov@cern.ch>\nPeter Speckmayer <peter.speckmayer@gmx.at> pspe <peter.speckmayer@gmx.at>\nPeter van Gemmeren <gemmeren@anl.gov> <gemmeren@atlas1.hep.anl.gov>\nPeter van Gemmeren <gemmeren@anl.gov> <gemmeren@lxplus0002.cern.ch>\nPeter van Gemmeren <gemmeren@anl.gov> <gemmeren@lxplus013.cern.ch>\nPeter van Gemmeren <gemmeren@anl.gov> <gemmeren@lxplus028.cern.ch>\nPeter van Gemmeren <gemmeren@anl.gov> <peter.van.gemmeren@cern.ch>\nPhilippe Canal <pcanal@fnal.gov> <pcanal@users.noreply.github.com>\nPhilippe Canal <pcanal@fnal.gov> Philipe Canal <pcanal@fnal.gov>\nRobert Xiao <brx@cs.cmu.edu> Robert Xiao <nneonneo@gmail.com>\nSandro Wenzel <sandro.wenzel@cern.ch> sawenzel <sandro.wenzel@cern.ch>\nSergey Kononov <S.A.Kononov@inp.nsk.su> Sergey Kononov <skononov@users.noreply.github.com>\nSergey Linev <S.Linev@gsi.de>\nSergey Linev <S.Linev@gsi.de> Sergey Linev <s.linev@gsi.de>\nSimeon Ehrig <simeonehrig@web.de> simeon <simeonehrig@web.de>\nSimon Pfreundschuh <simonpf@chalmers.se> simonpf <simonpf@chalmers.se>\nSimon Pfreundschuh <simonpf@chalmers.se> simonpf <s.pfreundschuh@gmail.com>\nStefan Wunsch <stefan.wunsch@cern.ch> Stefan Wunsch <stefan.wunsch@student.kit.edu>\nStephan Hageboeck <stephan.hageboeck@cern.ch> hageboeck <hageboeck@physik.uni-bonn.de>\nStephan Hageboeck <stephan.hageboeck@cern.ch> <hageboeck@physik.uni-bonn.de>\nThomas James Stevenson <thomas.james.stevenson@cern.ch> tjsteven <t.j.stevenson@qmul.ac.uk>\nTimur Pocheptsov <Timur.Pocheptsov@cern.ch>\nTimur Pocheptsov <Timur.Pocheptsov@cern.ch> Timur Pocheptsov <timur.pocheptsov@cern.ch>\nTimur Pocheptsov <Timur.Pocheptsov@cern.ch> Timur Pocheptsov <timur.pocheptsov@theqtcompany.com>\nVassil Vassilev <vasil.georgiev.vasilev@cern.ch> <v.g.vassilev@gmail.com>\nVassil Vassilev <vasil.georgiev.vasilev@cern.ch> <vvasilev@cern.ch>\nVassil Vassilev <vasil.georgiev.vasilev@cern.ch> <vvassilev@vvBook.local>\nVladimir Ilievski <ilievski.vladimir@live.com> IlievskiV\nVladimir Ilievski <ilievski.vladimir@live.com> Vladimir Ilievski <vladimirilievski@Vladimirs-MacBook-Pro.local>\nWhitney Armstrong <warmstrong@anl.gov> Whitney Armstrong <whit@temple.edu>\nWhitney Armstrong <warmstrong@anl.gov> Whitney Armstrong <whit@whit-armstrong.com>\nWim Lavrijsen <WLavrijsen@lbl.gov> Wim Lavrijsen <wlav@pc3-wlav.lbl.gov>\nWouter Verkerke <verkerke@nikhef.nl>\nXavier Valls Pla <xavier.valls.pla@cern.ch>\nXavier Valls Pla <xavier.valls.pla@cern.ch> Xavier Valls Pla <xaviervallspla@gmail.com>\nXavier Valls Pla <xavier.valls.pla@cern.ch> Xavier Valls <xaviervallspla@gmail.com>\nZhe Zhang <zzxuanyuan@gmail.com> zzxuanyuan <zzxuanyuan@gmail.com>\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.916015625,
          "content": "sudo: false\n\nlanguage: cpp\nos: linux\ncompiler: clang\n\ncache:\n  ccache: true\n\n# Do not build our sync branch.\nbranches:\n  only:\n    - master\n    - Travis*\n\n# Without the top-level env, no job will be allowed to fail.\nenv:\n\nmatrix:\n  # Abort all builds on a single failing matrix entry.\n  fast_finish: true\n\n  include:\n    - env: TOOL=clang-format\n      script: &format_script\n        - |\n          if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]; then\n            export BASE_COMMIT=$(git rev-parse $TRAVIS_BRANCH)\n            .ci/format_script.sh\n          fi\n\n    - env: TOOL=clang-tidy-analyzer\n      before_script: &copy_headers\n        - echo \"Copying and generating header files.\"\n        - echo -en \"travis_fold:start:install.headers\"\n        - .ci/copy_headers.sh\n        - echo -en 'travis_fold:end:install.headers\\\\r'\n\n      script: &tidy_script\n        - |\n          if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]; then\n            .ci/tidy_script.sh\n          fi\n\n    - env: TOOL=clang-tidy-modernize\n      before_script: *copy_headers\n      script: *tidy_script\n\n    - env: TOOL=minuit2-standalone\n      script: cd math/minuit2 && .ci/make_and_test.sh\n\n  allow_failures:\n    # clang-tidy-modernize is still experimental\n    - env: TOOL=clang-tidy-modernize\n    # a lot of code doesn't follow clang-format yet\n    - env: TOOL=clang-format\n\n\n# This will never run since there is not a clang-tidy only TOOL\n#  elif [[ \"$TRAVIS_EVENT_TYPE\" = \"cron\" ]] && [[ $TOOL == 'clang-tidy' ]]; then\n#    # We need to ignore our vendor drops.\n#    FILES_REGEX='^.*root\\/(?!interpreter\\/|core\\/clib)'\n#\n#    echo \"Running clang-tidy-3.9 against branch $TRAVIS_BRANCH.\"\n#    echo \"run-clang-tidy-3.9.py -j4 -clang-tidy-binary $(which clang-tidy-3.9) -checks=-*,clang-analyzer-* $FILES_REGEX\"\n#    run-clang-tidy-3.9.py -j4 -clang-tidy-binary $(which clang-tidy-3.9) -checks=-*,clang-analyzer-* $FILES_REGEX\n#  fi\n  \non_failure: echo \"Showing current directory contents\" && ls -la\n"
        },
        {
          "name": ".typos.toml",
          "type": "blob",
          "size": 0.4296875,
          "content": "[default.extend-identifiers]\nBaBar = \"BaBar\"\nYtoAbsPixel = \"YtoAbsPixel\"\nexportJSONtoString = \"exportJSONtoString\" # Maybe it's worth to rename this function to consistent camelCase\nfChannelObservMap = \"fChannelObservMap\"\nfG2ndDerivative = \"fG2ndDerivative\"\n\n[default.extend-words]\nGaus = \"Gaus\"\nMaline = \"Maline\"\nND = \"ND\"\nNED = \"NED\"\nSEH = \"SEH\"\nSLAC = \"SLAC\"\nStrat = \"Strat\"\nUE = \"UE\"\nba = \"ba\"\ngaus = \"gaus\"\ninout = \"inout\"\nist = \"ist\"\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 33.4140625,
          "content": "# Copyright (C) 1995-2022, Rene Brun and Fons Rademakers.\n# All rights reserved.\n#\n# For the licensing terms see $ROOTSYS/LICENSE.\n# For the list of contributors see $ROOTSYS/README/CREDITS.\n\ncmake_minimum_required(VERSION 3.20 FATAL_ERROR)\n\nif(WIN32)\n  # Set CMP0091 (MSVC runtime library flags are selected by an abstraction) to OLD\n  # to keep the old way of selecting the runtime library with the -MD/-MDd compiler flag\n  cmake_policy(SET CMP0091 OLD)\n  set(CMAKE_SKIP_TEST_ALL_DEPENDENCY TRUE)\nendif()\n\nif(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR AND NOT ALLOW_IN_SOURCE)\n  message(FATAL_ERROR\n    \" ROOT must be built out-of-source.\\n\"\n    \" Please see README/INSTALL for more information.\")\nendif()\n\nset(policy_new CMP0072 CMP0076 CMP0077 CMP0079)\nforeach(policy ${policy_new})\n  if(POLICY ${policy})\n    cmake_policy(SET ${policy} NEW)\n  endif()\nendforeach()\n\nset(policy_old CMP0116 CMP0135 CMP0144)\nforeach(policy ${policy_old})\n  if(POLICY ${policy})\n    cmake_policy(SET ${policy} OLD)\n  endif()\nendforeach()\n\ninclude(cmake/modules/CaptureCommandLine.cmake)\n\nproject(ROOT)\n\n#---Set the locale to default C to prevent issued due to localization of commands---------------\n# This is necessary as we for example call `clang -v` and parse its output. But on a localized\n# program, the output parsing is much more error prone as certrain strings we're looking for\n# could be missing or be in a different order. To prevent those errors, let's just force all\n# output to use the default C locale which is more or less identical on all systems.\nset(ENV{LANG} C)\n\n#---Set paths where to put the libraries, executables and headers------------------------------\nfile(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/lib) # prevent mkdir races\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\n\n# Set permissions for installed folders and subfolders that come from the source tree in case\n# the permissions in the source tree are wrong since the install command will preserve them\nset(DIR_PERMISSIONS DIRECTORY_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)\n\n# Before setting ROOTSYS, make sure that the environment isn't polluted by a different\n# ROOT build. This is significant e,g. for roottest, which will otherwise have libraries\n# of a different ROOT build available / visible / reachable.\nif(NOT $ENV{ROOTSYS} STREQUAL \"\")\n  string(REPLACE \"$ENV{ROOTSYS}/bin\" \"\" ENV_PATH \"$ENV{PATH}\")\n  string(REPLACE \"$ENV{ROOTSYS}/lib\" \"\" ENV_LD_LIBRARY_PATH \"$ENV{LD_LIBRARY_PATH}\")\n  string(REPLACE \"$ENV{ROOTSYS}/lib\" \"\" ENV_PYTHONPATH \"$ENV{PYTHONPATH}\")\n  string(REPLACE \"$ENV{ROOTSYS}\" \"\" ENV_CMAKE_PREFIX_PATH \"$ENV{CMAKE_PREFIX_PATH}\")\n  set(ENV{PATH} \"${ENV_PATH}\")\n  set(ENV{LD_LIBRARY_PATH} \"${ENV_LD_LIBRARY_PATH}\")\n  set(ENV{PYTHONPATH} \"${ENV_PYTHONPATH}\")\n  set(ENV{CMAKE_PREFIX_PATH} \"${ENV_CMAKE_PREFIX_PATH}\")\n  set(ENV{ROOTSYS} ${CMAKE_BINARY_DIR})\nendif()\n\nset(ROOTSYS ${CMAKE_BINARY_DIR})\nset(HEADER_OUTPUT_PATH ${CMAKE_BINARY_DIR}/include)\n\n#---Set the ROOT version--------------------------------------------------------------------\ninclude(cmake/modules/SetROOTVersion.cmake)\n\nmessage(STATUS \"Building ROOT version ${ROOT_FULL_VERSION}\")\n\n#---Where to look first for cmake modules, before ${CMAKE_ROOT}/Modules/ is checked-------------\nset(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)\n\n#---Enable Folders in IDE like Visual Studio----------------------------------------------------\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\n#---Load some basic macros which are needed later for the confiuration and build----------------\ninclude(CheckCompiler)\ninclude(RootBuildOptions)\ninclude(RootMacros)\ninclude(CheckAssembler)\ninclude(CheckIntrinsics)\n\n# relatedrepo_GetClosestMatch(REPO_NAME <repo> ORIGIN_PREFIX <originp> UPSTREAM_PREFIX <upstreamp>\n#                             FETCHURL_VARIABLE <output_url> FETCHREF_VARIABLE <output_ref>)\n# Return the clone URL and head/tag of the closest match for `repo` (e.g. roottest), based on the\n# current head name.\nfunction(relatedrepo_GetClosestMatch)\n  cmake_parse_arguments(_ \"\" \"REPO_NAME;ORIGIN_PREFIX;UPSTREAM_PREFIX;FETCHURL_VARIABLE;FETCHREF_VARIABLE\" \"\" ${ARGN})\n\n  set(${__FETCHURL_VARIABLE} ${__UPSTREAM_PREFIX}/${__REPO_NAME} PARENT_SCOPE)\n\n  if(NOT IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/.git)\n    set(${__FETCHREF_VARIABLE} v${ROOT_MAJOR_VERSION}-${ROOT_MINOR_VERSION}-${ROOT_PATCH_VERSION} PARENT_SCOPE)\n    return()\n  endif()\n\n  execute_process(COMMAND ${GIT_EXECUTABLE} --git-dir=${CMAKE_CURRENT_SOURCE_DIR}/.git\n                  rev-parse --abbrev-ref HEAD\n                  OUTPUT_VARIABLE current_head OUTPUT_STRIP_TRAILING_WHITESPACE)\n  set(${__FETCHREF_VARIABLE} ${current_head} PARENT_SCOPE)\n\n  # `current_head` is a well-known branch, e.g. master, or v6-28-00-patches.  Use the matching branch\n  # upstream as the fork repository may be out-of-sync\n  string(REGEX MATCH \"^(master|latest-stable|v[0-9]+-[0-9]+-[0-9]+(-patches)?)$\" known_head ${current_head})\n  if(NOT \"${known_head}\" STREQUAL \"\")\n    if(\"${current_head}\" STREQUAL \"latest-stable\")\n      # Resolve the 'latest-stable' branch to the latest merged head/tag\n      execute_process(COMMAND ${GIT_EXECUTABLE} --git-dir=${CMAKE_CURRENT_SOURCE_DIR}/.git\n                      for-each-ref --points-at=latest-stable^2 --format=%\\(refname:short\\)\n                      OUTPUT_VARIABLE current_head OUTPUT_STRIP_TRAILING_WHITESPACE)\n      set(${__FETCHREF_VARIABLE} ${current_head} PARENT_SCOPE)\n    endif()\n    return()\n  endif()\n\n  # Otherwise, try to use a branch that matches `current_head` in the fork repository\n  execute_process(COMMAND ${GIT_EXECUTABLE} ls-remote --heads --tags\n                  ${__ORIGIN_PREFIX}/${__REPO_NAME} ${current_head} OUTPUT_VARIABLE matching_refs ERROR_QUIET)\n  if(NOT \"${matching_refs}\" STREQUAL \"\")\n    set(${__FETCHURL_VARIABLE} ${__ORIGIN_PREFIX}/${__REPO_NAME} PARENT_SCOPE)\n    return()\n  endif()\n\n  # Finally, try upstream using the closest head/tag below the parent commit of the current head\n  execute_process(COMMAND ${GIT_EXECUTABLE} --git-dir=${CMAKE_CURRENT_SOURCE_DIR}/.git\n                  describe --all --abbrev=0 HEAD^\n                  OUTPUT_VARIABLE closest_ref ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)\n  string(REGEX REPLACE \"^(heads|tags)/\" \"\" candidate_head \"${closest_ref}\")\n  execute_process(COMMAND ${GIT_EXECUTABLE} ls-remote --heads --tags\n                  ${__UPSTREAM_PREFIX}/${__REPO_NAME} \"${candidate_head}\" OUTPUT_VARIABLE matching_refs)\n  if(NOT \"${matching_refs}\" STREQUAL \"\")\n    set(${__FETCHREF_VARIABLE} ${candidate_head} PARENT_SCOPE)\n    return()\n  endif()\n  set(${__FETCHREF_VARIABLE} \"\" PARENT_SCOPE)\nendfunction()\n\n# relaterepo_Checkout(REPO_NAME <repo> FETCHURL <url> FETCHREF <ref>\n#                     [FORCE] [REPO_DIR_VARIABLE <repo_dir>])\n# Clone/fetch and checkout the specified `ref` from the given repository at `url`.  If a local clone of the\n# repository is found, refuse to update it unless the `FORCE` option is in place.\nfunction(relatedrepo_Checkout)\n  cmake_parse_arguments(_ \"FORCE\" \"REPO_NAME;FETCHURL;FETCHREF;REPO_DIR_VARIABLE\" \"\" ${ARGN})\n\n  # Check whether the repository exists in the source directory or its parent\n  get_filename_component(source_dir ${CMAKE_CURRENT_SOURCE_DIR} REALPATH)\n  if(IS_DIRECTORY ${source_dir}/${__REPO_NAME})\n    set(repo_dir ${source_dir}/${__REPO_NAME})\n  elseif(IS_DIRECTORY ${source_dir}/../${__REPO_NAME})\n    set(repo_dir ${source_dir}/../${__REPO_NAME})\n  endif()\n\n  if(NOT DEFINED repo_dir)\n    message(STATUS \"Cloning ${__REPO_NAME} from '${__FETCHURL}' (${__FETCHREF})\")\n    if(NOT \"${__FETCHREF}\" STREQUAL \"\")\n      string(PREPEND __FETCHREF \"-b\")\n    endif()\n    execute_process(COMMAND ${GIT_EXECUTABLE} clone ${__FETCHREF} ${__FETCHURL}\n                    WORKING_DIRECTORY ${source_dir})\n    set(repo_dir ${source_dir}/${__REPO_NAME})\n  else()\n    message(STATUS \"Found ${__REPO_NAME}: ${repo_dir}\")\n    if(${__FORCE})\n      message(STATUS \"Updating ${__REPO_NAME} from '${__FETCHURL}' (${__FETCHREF})\")\n      execute_process(COMMAND ${GIT_EXECUTABLE} fetch -fu ${__FETCHURL} ${__FETCHREF}:${__FETCHREF}\n                      WORKING_DIRECTORY ${repo_dir})\n      execute_process(COMMAND ${GIT_EXECUTABLE} checkout -f ${__FETCHREF}\n                      WORKING_DIRECTORY ${repo_dir})\n    endif()\n  endif()\n  if(DEFINED __REPO_DIR_VARIABLE)\n    set(${__REPO_DIR_VARIABLE} ${repo_dir} PARENT_SCOPE)\n  endif()\nendfunction()\n\n#---Enable asserts------------------------------------------------------------------------------\nif(asserts)\n  string(REGEX REPLACE \"-[UD]NDEBUG(=.*)?\" \"\" \"CMAKE_CXX_FLAGS_${_BUILD_TYPE_UPPER}\" \"${CMAKE_CXX_FLAGS_${_BUILD_TYPE_UPPER}}\")\n  string(REGEX REPLACE \"-[UD]NDEBUG(=.*)?\" \"\" \"CMAKE_C_FLAGS_${_BUILD_TYPE_UPPER}\" \"${CMAKE_C_FLAGS_${_BUILD_TYPE_UPPER}}\")\nendif()\n\n#---Enable CCache ------------------------------------------------------------------------------\nif(ccache)\n  find_program(CCACHE_COMMAND NAMES ccache ccache-swig)\n  mark_as_advanced(CCACHE_COMMAND ${CCACHE_COMMAND})\n\n  if(EXISTS ${CCACHE_COMMAND})\n    message(STATUS \"Found ccache: ${CCACHE_COMMAND}\")\n    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${CCACHE_COMMAND})\n    execute_process(COMMAND ${CCACHE_COMMAND} \"-V\" OUTPUT_VARIABLE CCACHE_VERSION)\n    string(REGEX REPLACE \"ccache version ([0-9\\\\.]+).*\" \"\\\\1\" CCACHE_VERSION ${CCACHE_VERSION})\n  else()\n    message(STATUS \"Could NOT find ccache\")\n    set(ccache OFF CACHE BOOL \"Use ccache (disabled since ccache was not found)\" FORCE)\n  endif()\nendif()\n\n#---Enable distcc ------------------------------------------------------------------------------\nif(distcc)\n  find_program(DISTCC_COMMAND NAMES distcc)\n  mark_as_advanced(DISTCC_COMMAND ${DISTCC_COMMAND})\n  if(EXISTS ${DISTCC_COMMAND})\n    message(STATUS \"Found distcc: ${DISTCC_COMMAND}\")\n    if (ccache)\n        # If ccache is enabled, use distcc as CCACHE_PREFIX\n        message(STATUS \"Because ccache is enabled, CCACHE_PREFIX is set to ${DISTCC_COMMAND}\")\n        set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE \"CCACHE_PREFIX=${DISTCC_COMMAND} ${CCACHE_COMMAND}\")\n    else()\n        set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${DISTCC_COMMAND})\n    endif()\n    execute_process(COMMAND ${DISTCC_COMMAND} \"--version\" OUTPUT_VARIABLE DISTCC_VERSION)\n    string(REGEX REPLACE \"distcc ([0-9\\\\.]+).*\" \"\\\\1\" DISTCC_VERSION ${DISTCC_VERSION})\n  else()\n    message(STATUS \"Could NOT find distcc\")\n    set(distcc OFF CACHE BOOL \"Use distcc (disabled since distcc was not found)\" FORCE)\n  endif()\nendif()\n\n#---Enable test coverage -----------------------------------------------------------------------\nif(coverage)\n  set(GCC_COVERAGE_COMPILE_FLAGS \"-fprofile-arcs -ftest-coverage\")\n  set(GCC_COVERAGE_LINK_FLAGS    \"-fprofile-arcs\")\n  set(CMAKE_CXX_FLAGS            \"${CMAKE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}\")\n  set(CMAKE_EXE_LINKER_FLAGS     \"${CMAKE_EXE_LINKER_FLAGS} ${GCC_COVERAGE_LINK_FLAGS}\")\n  set(CMAKE_SHARED_LINKER_FLAGS  \"${CMAKE_SHAREDLINKER_FLAGS} ${GCC_COVERAGE_LINK_FLAGS}\")\n  set(CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS \"${CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}\")\nendif()\n\n#--- Enable build timing -----------------------------------------------------------------------\nif (build_timing)\n  # FIXME: This currently will override the use of ccache if -Dbuild_timing=On -Dccache=On is passed.\n  set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE \"${CMAKE_COMMAND} -E time\")\n  set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK \"${CMAKE_COMMAND} -E time\")\n  #set_property(GLOBAL PROPERTY RULE_LAUNCH_CUSTOM \"${CMAKE_COMMAND} -E time\")\nendif()\n\n#--- Set up address sanitizer builds ----------------------------------------------------------\nif(asan)\n  if(NOT CMAKE_COMPILER_IS_GNUCXX AND NOT CMAKE_CXX_COMPILER_ID MATCHES Clang)\n    message(WARNING \"Address sanitizer builds only tested with gcc and Clang\")\n  endif()\n\n  if(NOT MSVC)\n    set(ASAN_EXTRA_LD_PRELOAD \"${CMAKE_BINARY_DIR}/lib/${CMAKE_SHARED_LIBRARY_PREFIX}ROOTSanitizerConfig${CMAKE_SHARED_LIBRARY_SUFFIX}:${ASAN_RUNTIME_LIBRARY}\")\n  endif()\n\n  foreach(item IN LISTS ASAN_EXTRA_CXX_FLAGS)\n    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:${item}>)\n  endforeach()\n  #add_link_options() not available in our CMake version:\n  set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} ${ASAN_EXTRA_SHARED_LINKER_FLAGS}\")\n  set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${ASAN_EXTRA_EXE_LINKER_FLAGS}\")\nendif()\n\n#---Enable CTest package -----------------------------------------------------------------------\n#include(CTest)\nif(testing)\n  enable_testing()\nendif()\n\n#---Here we look for installed software and switch on and of the different build options--------\ninclude(SearchInstalledSoftware)\n\n#---Here we add tcmalloc to the linker flags if needed------------------------------------------\nif (TCMALLOC_FOUND)\n  set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -ltcmalloc -L${TCMALLOC_LIBRARY_PATH}\")\n  set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -ltcmalloc -L${TCMALLOC_LIBRARY_PATH}\")\nendif()\n\n#---Here we add jemalloc to the linker flags if needed------------------------------------------\nif (JEMALLOC_FOUND)\n  set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -ljemalloc -L${JEMALLOC_LIBRARY_PATH}\")\n  set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -ljemalloc -L${JEMALLOC_LIBRARY_PATH}\")\nendif()\n\n#---Populate the configure arguments returned by 'root-config --config'-------------------------\nget_cmake_property(variables CACHE_VARIABLES)\nforeach(var ${variables})\n  if((var MATCHES \"_(LIBRARIES|LIBRARY|INCLUDE|VERSION)\") AND\n     (NOT ${${var}} STREQUAL \"\") AND\n     (NOT ${var} MATCHES \"NOTFOUND\"))\n    if (var MATCHES \"^QT_\")\n      # filter out the very long list of Qt libraries and include dirs\n      if (var MATCHES \"(QT_LIBRARY_DIR|QT_QTCORE_INCLUDE_DIR)\")\n        set(ROOT_CONFIGARGS \"${ROOT_CONFIGARGS}${var}=${${var}} \")\n      endif()\n    else()\n      if ((NOT var MATCHES \"_(DOCS|TESTS|INSTALL)\") AND (NOT var MATCHES \"^_\"))\n        set(ROOT_CONFIGARGS \"${ROOT_CONFIGARGS}${var}=${${var}} \")\n      endif()\n    endif()\n  endif()\nendforeach()\n\n#---Move (copy) directories to binary tree------------------------------------------------------\nset(stamp_file ${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/move_artifacts.stamp)\nadd_custom_command(OUTPUT ${stamp_file}\n                   COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/LICENSE ${CMAKE_BINARY_DIR}/LICENSE\n                   COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_SOURCE_DIR}/README ${CMAKE_BINARY_DIR}/README\n                   COMMAND ${CMAKE_COMMAND} -E touch ${stamp_file}\n                   COMMENT \"Copying directories such as etc, icons, fonts, js, ui5, etc. to build area\")\n\nif(http)\nset(jsroot_files js/*)\nendif()\nif(webgui)\nset(openui5_files ui5/*)\nendif()\n\n#---Copy files to the build area, with dependency---------------------------------\nfile(GLOB_RECURSE artifact_files RELATIVE ${CMAKE_SOURCE_DIR} tutorials/* etc/* test/* icons/* fonts/* macros/* ${jsroot_files} ${openui5_files})\nset(artifact_files_builddir)\nforeach(artifact_file ${artifact_files})\n  # Filter out hsimple.root; someone might have created it in the src dir, and the hsimple.root\n  # target below will interfere.\n  if (NOT (artifact_file STREQUAL \"tutorials/hsimple.root\"))\n    add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/${artifact_file}\n      COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_SOURCE_DIR}/${artifact_file} ${CMAKE_BINARY_DIR}/${artifact_file}\n      COMMENT \"Copying ${CMAKE_SOURCE_DIR}/${artifact_file}\"\n      DEPENDS ${CMAKE_SOURCE_DIR}/${artifact_file})\n    list(APPEND artifact_files_builddir ${CMAKE_BINARY_DIR}/${artifact_file})\n  endif()\nendforeach()\nadd_custom_target(move_artifacts DEPENDS ${stamp_file} ${artifact_files_builddir})\n\nadd_subdirectory (interpreter)\n\n# Update etc/gitinfo.txt for every build.\nadd_custom_target(gitinfotxt\n  ALL\n  COMMAND ${CMAKE_COMMAND} -DSRCDIR=${CMAKE_SOURCE_DIR} -DBINDIR=${CMAKE_BINARY_DIR} -P ${CMAKE_SOURCE_DIR}/cmake/modules/UpdateGitInfo.cmake\n  COMMENT \"Updating etc/gitinfo.txt.\"\n  BYPRODUCTS ${CMAKE_BINARY_DIR}/etc/gitinfo.txt\n)\ninstall(FILES ${CMAKE_BINARY_DIR}/etc/gitinfo.txt DESTINATION ${CMAKE_INSTALL_SYSCONFDIR})\n\n#---Recurse into the given subdirectories.  This does not actually cause another cmake executable\n#  to run. The same process will walk through the project's entire directory structure.\nadd_subdirectory (core)\nadd_subdirectory (math)\nadd_subdirectory (hist)\nadd_subdirectory (tree)\nadd_subdirectory (io)\nadd_subdirectory (net)\nadd_subdirectory (graf2d)\nadd_subdirectory (graf3d)\nadd_subdirectory (gui)\nif(html)\n  add_subdirectory (html)\nendif()\nadd_subdirectory (montecarlo)\nif(geom)\n  add_subdirectory (geom)\nendif()\nif(NOT WIN32)\n  add_subdirectory (rootx)\nendif()\nadd_subdirectory (misc)\nadd_subdirectory (main)\nadd_subdirectory (bindings)\nadd_subdirectory (sql)\nif(proof)\n  add_subdirectory(proof)\nendif()\nif(tmva)\n  add_subdirectory(tmva)\nendif()\nif(roofit)\n  add_subdirectory(roofit)\nendif()\n\nROOT_ADD_TEST_SUBDIRECTORY(test)\nROOT_ADD_TEST_SUBDIRECTORY(tutorials)\n\nget_property(__allHeaders GLOBAL PROPERTY ROOT_HEADER_TARGETS)\nget_property(__allBuiltins GLOBAL PROPERTY ROOT_BUILTIN_TARGETS)\nadd_custom_target(move_headers ALL DEPENDS ${__allHeaders} ${__allBuiltins} gitinfotxt)\n\n#---CXX MODULES-----------------------------------------------------------------------------------\nif(MSVC)\n  set(_os_cat \"type\")\nelse()\n  set(_os_cat \"cat\")\nendif()\nfile(TO_NATIVE_PATH \"${CMAKE_BINARY_DIR}/include/module.modulemap.extra\" _from_native)\nfile(TO_NATIVE_PATH \"${CMAKE_BINARY_DIR}/include/ROOT.modulemap\" _to_native)\n\nadd_custom_target(copymodulemap DEPENDS \"${CMAKE_BINARY_DIR}/include/ROOT.modulemap\")\nadd_custom_command(\n\t\t  OUTPUT \"${CMAKE_BINARY_DIR}/include/ROOT.modulemap\"\n                  DEPENDS cmake/unix/module.modulemap \"${CMAKE_BINARY_DIR}/include/module.modulemap.extra\"\n\t\t  COMMAND ${CMAKE_COMMAND} -E copy \"${CMAKE_SOURCE_DIR}/cmake/unix/module.modulemap\" \"${CMAKE_BINARY_DIR}/include/ROOT.modulemap\"\n                  COMMAND ${_os_cat} \"${_from_native}\" >> \"${_to_native}\"\n)\ninstall(FILES \"${CMAKE_BINARY_DIR}/include/ROOT.modulemap\" DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} COMPONENT headers)\n\nadd_dependencies(move_headers copymodulemap)\n\n# Take all the modulemap contents we collected from the packages and append them to our modulemap.\n# We have to delay this because the ROOT_CXXMODULES_EXTRA_MODULEMAP_CONTENT is filled in the\n# add_subdirectory calls above.\nget_property(__modulemap_extra_content GLOBAL PROPERTY ROOT_CXXMODULES_EXTRA_MODULEMAP_CONTENT)\nstring(REPLACE \";\" \"\" __modulemap_extra_content \"${__modulemap_extra_content}\")\n# Write module.modulemap.extra to a temporary file first, to not touch module.modulemap.extra\n# if it's unchanged.\nfile(WRITE \"${CMAKE_BINARY_DIR}/include/module.modulemap.extra.tmp\" \"${__modulemap_extra_content}\")\nconfigure_file(\"${CMAKE_BINARY_DIR}/include/module.modulemap.extra.tmp\"\n    \"${CMAKE_BINARY_DIR}/include/module.modulemap.extra\"\n    COPYONLY)\n\n# From now on we handled all exposed module and want to make all new modulemaps private to ROOT.\nset(ROOT_CXXMODULES_WRITE_TO_CURRENT_DIR ON)\n\nset (CMAKE_CXX_FLAGS_SEPARATE \"${CMAKE_CXX_FLAGS}\")\n\nstring(REGEX REPLACE \"[ ]-\" \";-\" CMAKE_CXX_FLAGS_SEPARATE \"${CMAKE_CXX_FLAGS_SEPARATE}\")\nif(MSVC)\n  string(REPLACE \"-Zc:__cplusplus\" \"\" CMAKE_CXX_FLAGS_SEPARATE \"${CMAKE_CXX_FLAGS_SEPARATE}\")\n  string(REPLACE \"-nologo\" \"\" CMAKE_CXX_FLAGS_SEPARATE \"${CMAKE_CXX_FLAGS_SEPARATE}\")\n  string(REPLACE \"-EHsc-\" \"\" CMAKE_CXX_FLAGS_SEPARATE \"${CMAKE_CXX_FLAGS_SEPARATE}\")\n  string(REPLACE \"-GR\" \"\" CMAKE_CXX_FLAGS_SEPARATE \"${CMAKE_CXX_FLAGS_SEPARATE}\")\n  string(REPLACE \"-MDd\" \"\" CMAKE_CXX_FLAGS_SEPARATE \"${CMAKE_CXX_FLAGS_SEPARATE}\")\nendif()\n\nif(runtime_cxxmodules)\n  # Dummy target that does nothing, we don't need a PCH for modules.\n  # Onepcm target has all dependencies needed for allDict.cxx.pch, which allow\n  # to test hsimple.C after all C++ modules are updated.\n  add_custom_target(onepcm)\n  foreach(target_dependency ${ROOT_LIBRARY_TARGETS})\n    add_dependencies(onepcm ${target_dependency})\n  endforeach()\n  unset(ROOT_LIBRARY_TARGETS CACHE)\nelse()\n  get_property(incdirs DIRECTORY PROPERTY INCLUDE_DIRECTORIES)\n\n  if(WIN32)\n    list(APPEND incdirs\n      ${CMAKE_SOURCE_DIR}/graf2d/win32gdk/gdk/src\n      ${CMAKE_SOURCE_DIR}/graf2d/win32gdk/gdk/src/gdk\n      ${CMAKE_SOURCE_DIR}/graf2d/win32gdk/gdk/src/glib\n    )\n  endif()\n\n  foreach(d ${incdirs})\n    if(NOT \"${d}\" MATCHES \"AFTER|BEFORE|INTERFACE|PRIVATE|PUBLIC|SYSTEM\")\n      set(__allIncludes ${__allIncludes} -I${d})\n    endif()\n  endforeach()\n\n  get_property(__cling_pch GLOBAL PROPERTY CLINGETCPCH)\n  get_property(__pch_dependencies GLOBAL PROPERTY ROOT_PCH_DEPENDENCIES)\n  get_property(__pch_dictionaries GLOBAL PROPERTY ROOT_PCH_DICTIONARIES)\n\n  add_custom_command(OUTPUT etc/allDict.cxx.pch\n    BYPRODUCTS\n      etc/dictpch/allCppflags.txt\n      etc/dictpch/allHeaders.h\n      etc/dictpch/allLinkDefs.h\n    COMMAND\n      ${Python3_EXECUTABLE} ${CMAKE_SOURCE_DIR}/cmake/unix/makepchinput.py\n      ${CMAKE_SOURCE_DIR} . ${pyroot_legacy} ${__cling_pch}\n    COMMAND\n      ${CMAKE_COMMAND} -E env ROOTIGNOREPREFIX=1 ${Python3_EXECUTABLE}\n      ${CMAKE_SOURCE_DIR}/etc/dictpch/makepch.py etc/allDict.cxx.pch\n      ${__allIncludes} -I${CMAKE_BINARY_DIR}/include -I${CMAKE_SOURCE_DIR}/core\n    DEPENDS\n      rootcling ${__pch_dependencies} ${__pch_dictionaries}\n      ${CMAKE_SOURCE_DIR}/cmake/unix/makepchinput.py\n      ${CMAKE_SOURCE_DIR}/etc/dictpch/makepch.py\n  )\n  add_custom_target(onepcm ALL DEPENDS etc/allDict.cxx.pch)\n  install(FILES ${CMAKE_BINARY_DIR}/etc/allDict.cxx.pch DESTINATION ${CMAKE_INSTALL_SYSCONFDIR})\n  install(DIRECTORY ${CMAKE_BINARY_DIR}/etc/dictpch DESTINATION ${CMAKE_INSTALL_SYSCONFDIR})\nendif()\n\n# FIXME: move installation of PCMS in ROOT_GENERATE_DICTIONARY().\n# We are excluding directories, which are accidentaly copied via unxpected behaviour of install(DIRECTORY ..)\ninstall(\n   DIRECTORY ${CMAKE_BINARY_DIR}/lib/\n   DESTINATION ${CMAKE_INSTALL_LIBDIR}\n   FILES_MATCHING\n   PATTERN \"*.pcm\"\n   PATTERN \"modules.idx\"\n   PATTERN \"JupyROOT\" EXCLUDE\n   PATTERN \"JsMVA\" EXCLUDE\n   PATTERN \"python*\" EXCLUDE\n   PATTERN \"cmake\" EXCLUDE\n   PATTERN \"pkgconfig\" EXCLUDE\n)\n\nif(Vc_INCLUDE_DIR)\n  set(MODULES_ROOT_INCPATH \"ROOT_INCLUDE_PATH=${Vc_INCLUDE_DIR}:${ROOT_INCLUDE_PATH}\")\nendif()\n\n# modules.idx\nif(runtime_cxxmodules)\n  ROOT_GET_LIBRARY_OUTPUT_DIR(library_output_dir)\n  get_property(modules_idx_deps GLOBAL PROPERTY modules_idx_deps_property)\n  if(WIN32)\n    set(modules_idx_cmd COMMAND ${CMAKE_COMMAND} -E env PATH=\"${library_output_dir}\\\\\\;%PATH%\"\n                                ROOTIGNOREPREFIX=1 ROOT_HIST=0 $<TARGET_FILE:root.exe> -l -q -b)\n  else()\n    set(modules_idx_cmd COMMAND ${ld_library_path}=${library_output_dir}:$ENV{${ld_library_path}}\n                                ROOTIGNOREPREFIX=1 ROOT_HIST=0 $<TARGET_FILE:root.exe> -l -q -b)\n  endif()\n  add_custom_command(OUTPUT ${library_output_dir}/modules.idx\n                     COMMAND ${CMAKE_COMMAND} -E remove -f modules.idx modules.timestamp\n                     ${modules_idx_cmd}\n                     WORKING_DIRECTORY ${library_output_dir}\n                     DEPENDS $<TARGET_FILE:root.exe> Cling Hist Tree Gpad Graf HistPainter move_artifacts\n                             ${modules_idx_deps})\n  add_custom_target(modules_idx ALL DEPENDS ${library_output_dir}/modules.idx)\n  add_dependencies(modules_idx ${modules_idx_deps})\n  set_property(TARGET modules_idx PROPERTY modules_idx_file ${library_output_dir}/modules.idx)\n  set_directory_properties(PROPERTIES ADDITIONAL_CLEAN_FILES \"${library_output_dir}/modules.timestamp\")\nendif()\n\n#---hsimple.root---------(use the executable for clearer dependencies and proper return code)---\nadd_custom_target(hsimple ALL DEPENDS tutorials/hsimple.root)\nadd_dependencies(hsimple onepcm)\nif(WIN32)\n  set(hsimple_cmd COMMAND ${CMAKE_COMMAND} -E env PATH=\"${CMAKE_RUNTIME_OUTPUT_DIRECTORY}\\\\\\;%PATH%\"\n                          ROOTIGNOREPREFIX=1 ROOT_HIST=0 $<TARGET_FILE:root.exe> -l -q -b -n -x hsimple.C -e return)\nelse()\n  set(hsimple_cmd COMMAND ${MODULES_ROOT_INCPATH} ${ld_library_path}=${CMAKE_LIBRARY_OUTPUT_DIRECTORY}:$ENV{${ld_library_path}}\n                          ROOTIGNOREPREFIX=1 ROOT_HIST=0 $<TARGET_FILE:root.exe> -l -q -b -n -x hsimple.C -e return)\nendif()\nadd_custom_command(OUTPUT tutorials/hsimple.root\n                   ${hsimple_cmd}\n                   WORKING_DIRECTORY tutorials\n                   DEPENDS $<TARGET_FILE:root.exe> Cling Hist Tree Gpad Graf HistPainter move_artifacts)\ninstall(FILES ${CMAKE_BINARY_DIR}/tutorials/hsimple.root DESTINATION ${CMAKE_INSTALL_TUTDIR} COMPONENT tests)\n\nif(runtime_cxxmodules)\n  add_dependencies(hsimple modules_idx)\nendif()\n\n#---copy special headers required for building on Windows----------------------------------------\nif(WIN32)\n  file(COPY cmake/win/w32pragma.h DESTINATION ${CMAKE_BINARY_DIR}/include/)\n  file(COPY cmake/win/sehmap.h DESTINATION ${CMAKE_BINARY_DIR}/include/)\nendif()\n\n#---version--------------------------------------------------------------------------------------\nif(NOT WIN32)\nadd_custom_target(version COMMAND ${Python3_EXECUTABLE} ${CMAKE_SOURCE_DIR}/cmake/unix/makeversion.py\n                          WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})\nendif()\n\n#---distribution commands------------------------------------------------------------------------\nadd_custom_target(distsrc COMMAND ${CMAKE_SOURCE_DIR}/cmake/unix/makedistsrc.sh \"${ROOT_FULL_VERSION}\" \"${CMAKE_SOURCE_DIR}\")\nadd_custom_target(dist COMMAND cpack --config CPackConfig.cmake)\n\n#---Configure and install various files neded later and for clients -----------------------------\ninclude(RootConfiguration)\n\n#---Installation of project-wise artifacts-------------------------------------------------------\nif(NOT CMAKE_SOURCE_DIR STREQUAL CMAKE_INSTALL_PREFIX)\n  install(FILES LICENSE DESTINATION ${CMAKE_INSTALL_DOCDIR})\n  if(gnuinstall)\n    install(DIRECTORY README/ DESTINATION ${CMAKE_INSTALL_DOCDIR})\n  else()\n    install(DIRECTORY README DESTINATION ${CMAKE_INSTALL_DOCDIR})\n  endif()\n  install(DIRECTORY etc/ DESTINATION ${CMAKE_INSTALL_SYSCONFDIR} USE_SOURCE_PERMISSIONS\n                         ${DIR_PERMISSIONS}\n                         PATTERN \"system.rootrc\" EXCLUDE\n                         PATTERN \"system.rootauthrc\" EXCLUDE\n                         PATTERN \"system.rootdaemonrc\" EXCLUDE\n                         PATTERN \"root.mimes\" EXCLUDE\n                         PATTERN \"*.in\" EXCLUDE)\n  install(DIRECTORY fonts/  DESTINATION ${CMAKE_INSTALL_FONTDIR} ${DIR_PERMISSIONS})\n  install(DIRECTORY icons/  DESTINATION ${CMAKE_INSTALL_ICONDIR} ${DIR_PERMISSIONS})\n  install(DIRECTORY macros/ DESTINATION ${CMAKE_INSTALL_MACRODIR} ${DIR_PERMISSIONS})\n  if(http)\n     install(DIRECTORY js/     DESTINATION ${CMAKE_INSTALL_JSROOTDIR} ${DIR_PERMISSIONS})\n  endif()\n  if(webgui)\n     install(DIRECTORY ui5/    DESTINATION ${CMAKE_INSTALL_OPENUI5DIR} ${DIR_PERMISSIONS})\n  endif()\n  set(MAN_PATT_EXCL)\n  if(NOT fortran OR NOT CMAKE_Fortran_COMPILER)\n    list(APPEND MAN_PATT_EXCL PATTERN h2root.1 EXCLUDE)\n    list(APPEND MAN_PATT_EXCL PATTERN g2root.1 EXCLUDE)\n  endif()\n  install(DIRECTORY man/    DESTINATION ${CMAKE_INSTALL_MANDIR} ${DIR_PERMISSIONS} ${MAN_PATT_EXCL})\n  install(DIRECTORY tutorials/ DESTINATION ${CMAKE_INSTALL_TUTDIR} ${DIR_PERMISSIONS} COMPONENT tests)\n  install(FILES\n    cmake/modules/RootMacros.cmake\n    cmake/modules/RootTestDriver.cmake\n    DESTINATION ${CMAKE_INSTALL_CMAKEDIR})\n  install(FILES\n    \"cmake/modules/FindVdt.cmake\"\n    DESTINATION \"${CMAKE_INSTALL_CMAKEDIR}/modules\")\nendif()\n\n#---Add configuration files for kernel and jupyter----------------------------------------------\n# Make sure the Jupyter ROOT C++ kernel runs with the same Python version as ROOT\nset(root_jupyter_dir notebook)\nset(root_jupyter_config jupyter_notebook_config.py)\nconfigure_file(etc/${root_jupyter_dir}/${root_jupyter_config}.in etc/${root_jupyter_dir}/${root_jupyter_config})\ninstall(FILES ${CMAKE_BINARY_DIR}/etc/${root_jupyter_dir}/${root_jupyter_config} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/${root_jupyter_dir})\n\nset(root_kernel_dir  ${root_jupyter_dir}/kernels/root)\nset(root_kernel_file kernel.json)\nconfigure_file(etc/${root_kernel_dir}/${root_kernel_file}.in etc/${root_kernel_dir}/${root_kernel_file})\ninstall(FILES ${CMAKE_BINARY_DIR}/etc/${root_kernel_dir}/${root_kernel_file} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/${root_kernel_dir})\n\n#---install clad header files-------------------------------------------------------------------\nif(clad)\n   install(DIRECTORY ${CMAKE_BINARY_DIR}/etc/cling/plugins/\n      DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/cling/plugins)\nendif()\n\n#---Set flag for PyROOT tests that are expected to fail\nif(pyroot)\n  set(PYTESTS_WILLFAIL WILLFAIL)\nendif()\n\n#---Configure Testing using CTest----------------------------------------------------------------\nconfigure_file(${CMAKE_SOURCE_DIR}/cmake/modules/CTestCustom.cmake ${CMAKE_BINARY_DIR} COPYONLY)\nif(testing)\n  include(RootCTest)\n  set(upstreamprefix https://github.com/root-project)\n\n  if(roottest)\n    find_package(Git REQUIRED)\n\n    # Check whether the repository exists in the source directory or its parent\n    get_filename_component(source_dir ${CMAKE_CURRENT_SOURCE_DIR} REALPATH)\n    if(IS_DIRECTORY ${source_dir}/roottest/.git)\n      set(repo_dir ${source_dir}/roottest)\n    elseif(IS_DIRECTORY ${source_dir}/../roottest/.git)\n      set(repo_dir ${source_dir}/../roottest)\n    endif()\n    if(DEFINED repo_dir)\n      execute_process(COMMAND ${GIT_EXECUTABLE} --git-dir=${repo_dir}/.git\n                      remote get-url origin OUTPUT_VARIABLE originurl OUTPUT_STRIP_TRAILING_WHITESPACE\n                      RESULT_VARIABLE query_result\n                      ERROR_VARIABLE query_error)\n      if(NOT query_result EQUAL 0)\n        message(STATUS \"Searching for \\\"origin\\\" repo of roottest: ${query_error}\")\n      endif()\n    else()\n       # The fetch URL of the 'origin' remote is used to determine the prefix for other repositories by\n       # removing the `/root(\\.git)?` part.  If `GITHUB_PR_ORIGIN` is defined in the environment, its\n       # value is used instead.\n       if(DEFINED ENV{GITHUB_PR_ORIGIN})\n         set(originurl $ENV{GITHUB_PR_ORIGIN})\n       else()\n         execute_process(COMMAND ${GIT_EXECUTABLE} --git-dir=${CMAKE_CURRENT_SOURCE_DIR}/.git\n                         remote get-url origin OUTPUT_VARIABLE originurl OUTPUT_STRIP_TRAILING_WHITESPACE)\n       endif()\n    endif()\n    string(REGEX REPLACE \"/root(test)?(\\.git)?$\" \"\" originprefix \"${originurl}\")\n    relatedrepo_GetClosestMatch(REPO_NAME roottest\n                                ORIGIN_PREFIX ${originprefix} UPSTREAM_PREFIX ${upstreamprefix}\n                                FETCHURL_VARIABLE roottest_url FETCHREF_VARIABLE roottest_ref)\n    # Use `-Droottest_force_checkout=ON` to force fetch and checkout in an existing repository\n    if(roottest_force_checkout)\n       set(roottest_opts FORCE)\n    endif()\n    relatedrepo_Checkout(REPO_NAME roottest FETCHURL ${roottest_url} FETCHREF \"${roottest_ref}\"\n                         REPO_DIR_VARIABLE roottest_dir ${roottest_opts})\n    if(NOT IS_DIRECTORY ${roottest_dir})\n      message(FATAL_ERROR \"Expected roottest at '${roottest_dir}' (not a directory?)\")\n    endif()\n    file(REMOVE_RECURSE ${CMAKE_CURRENT_BINARY_DIR}/roottest)\n    add_subdirectory(${roottest_dir} roottest)\n  endif()\n\n  if(rootbench)\n    find_package(Git REQUIRED)\n    if(rootbench_force_checkout)\n       set(rootbench_opts FORCE)\n    endif()\n    relatedrepo_Checkout(REPO_NAME rootbench FETCHURL ${upstreamprefix} FETCHREF master\n                         REPO_DIR_VARIABLE rootbench_dir ${rootbench_opts})\n    if(NOT IS_DIRECTORY ${rootbench_dir})\n      message(FATAL_ERROR \"Expected rootbench at '${rootbench_dir}' (not a directory?)\")\n    endif()\n    file(REMOVE_RECURSE ${CMAKE_CURRENT_BINARY_DIR}/rootbench)\n    add_subdirectory(${rootbench_dir} rootbench)\n  endif()\nendif()\n\nif(LLVM_LINKER_IS_MOLD)\n  message(FATAL_ERROR \"The mold linker is not supported by ROOT. Please use a different linker\")\nendif()\n\ncmake_host_system_information(RESULT PROCESSOR QUERY PROCESSOR_DESCRIPTION)\n\nmessage(STATUS \"ROOT Configuration \\n\nSystem:            ${CMAKE_SYSTEM}\nROOT Platform:     ${ROOT_PLATFORM}\nROOT Architecture: ${ROOT_ARCHITECTURE}\nProcessor:         ${PROCESSOR} (${CMAKE_SYSTEM_PROCESSOR})\nBuild type:        ${CMAKE_BUILD_TYPE}\nInstall path:      ${CMAKE_INSTALL_PREFIX}\nCompiler:          ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}\nC++ standard:      ${CMAKE_CXX_STANDARD}\nCompiler flags:\")\nif(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja)\nmessage(STATUS \"\n - C:                         ${CMAKE_C_FLAGS}\n - C (build type specific):\n     Debug:                   ${CMAKE_C_FLAGS_DEBUG}\n     Release:                 ${CMAKE_C_FLAGS_RELEASE}\n     MinSizeRel:              ${CMAKE_C_FLAGS_MINSIZEREL}\n     RelWithDebInfo:          ${CMAKE_C_FLAGS_RELWITHDEBINFO}\n - C++:                       ${CMAKE_CXX_FLAGS}\n - C++ (build type specific):\n     Debug:                   ${CMAKE_CXX_FLAGS_DEBUG}\n     Release:                 ${CMAKE_CXX_FLAGS_RELEASE}\n     MinSizeRel:              ${CMAKE_CXX_FLAGS_MINSIZEREL}\n     RelWithDebInfo:          ${CMAKE_CXX_FLAGS_RELWITHDEBINFO}\")\nelse()\nmessage(STATUS \"\n - C:                         ${CMAKE_C_FLAGS}\n - C (build type specific):   ${CMAKE_C_FLAGS_${_BUILD_TYPE_UPPER}}\n - C++:                       ${CMAKE_CXX_FLAGS}\n - C++ (build type specific): ${CMAKE_CXX_FLAGS_${_BUILD_TYPE_UPPER}}\")\nendif()\nmessage(STATUS \"Linker flags:\n - Executable:     ${CMAKE_EXE_LINKER_FLAGS}\n - Module:         ${CMAKE_MODULE_LINKER_FLAGS}\n - Shared:         ${CMAKE_SHARED_LINKER_FLAGS}\\n\")\n\n\nROOT_SHOW_ENABLED_OPTIONS()\n\n#---Packaging-------------------------------------------------------------------------------------\ninclude(RootCPack)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 7.76953125,
          "content": "# How to Contribute Code to ROOT\n\nThank you for your interest in contributing to ROOT!  We strongly welcome and appreciate such contributions!\nThis short guide tries to make contributing as quick and painless as possible.\n\n> [!NOTE]\n> These guidelines should be applicable to most contributes. At the same time, these are not 'one-size-fits-all' rules,\n> and there might be cases where diverging from these guidelines is warranted. If you are unsure about how to structure\n> your contribution, don't hesitate to reach out! We are always happy to provide help and feedback.\n\n## Your Code Contribution\n\nThe source code for ROOT is kept in [GitHub](https://github.com/root-project/root).\nChanges go through pull requests (\"PRs\").\nThe primary branch for development is `master`.\n\n> [!IMPORTANT]\n> We require PRs to cleanly apply to master without a merge commit, i.e. through \"fast-forward\".\n> Please follow the [coding conventions](https://root.cern.ch/coding-conventions), as this is a simple item for\n> reviewers to otherwise get stuck on.\n> To make your (and our own) life easier, we provide a\n> [`clang-format` configuration file](https://github.com/root-project/root/blob/master/.clang-format).\n\nBy providing code, you agree to transfer your copyright on the code to the \"ROOT project\".\nOf course you will be duly credited: for sizable contributions your name will appear in the\n[CREDITS](https://raw.githubusercontent.com/root-project/root/master/README/CREDITS)\nfile shipped with every binary and source distribution.\nThe copyright transfer helps us with effectively defending the project in case of litigation.\n\n## Your Commit\n\nEach commit is a self-contained, _atomic_ change. This means that:\n1. **Each commit should be able to successfully build ROOT.**\nDoing so makes traveling through the git history, for example during a `git bisect` much easier.\nIdeally, the commit also should not depend on other commits to _run_ ROOT.\n2. **Each commit does not contain more than one independent change.**\nThis allows us to revert changes when needed, without affecting anything else.\n\n> [!TIP]\n> During a code review, it may be useful to make smaller commits to track intermediate changes, and rebase after the PR\n> is approved to ensure the above points are met and to reduce clutter.\n\n### Your Commit Message\n\nThe commit summary (i.e. the first line of the commit message) should be preceded by the a tag indicating the scope of\nROOT that is affected by your commit, in square brackets. Most tags are self-describing (e.g., `[tree]` indicates a\nchange to TTree, `[RF]` indicates a change to RooFit). If you are unsure about which scope tags to use, we are happy to\npoint you in the right direction! See also the [commit log](https://github.com/root-project/root/commits/master/) for\nexamples. The summary itself should not exceed 50 characters (excluding the scope tag), be meaningful (i.e., it\ndescribes the change) and should be written in the\n[present imperative mood](https://git.kernel.org/pub/scm/git/git.git/tree/Documentation/SubmittingPatches?id=HEAD#n239)\n(e.g. `Add this awesome feature` instead of `Adds this awesome feature` or `Added this awesome feature`).\n\nThe commit message that follow the summary can be used to provide more context to the change.\nIt should describe the **why**, rather than the **what** and **how** (we can gather this from the commit summary and the\nchange diff, respectively).\nThe commit message should be wrapped at 72 characters.\n\n> [!TIP]\n> We provide a commit message template to help with following the above guidelines. It can be found in the root of this\n> repository as [`.git-commit-template`](https://github.com/root-project/root/blob/master/.git-commit-template),\n> and can be set to automatically be used for every commit with the following command:\n> ```sh\n> $ git config commit.template .git-commit-template\n> ```\n\n## Your Pull Request\n\n> [!NOTE]\n> For the mechanics on how to create pull requests, please visit\n> [this page](https://root.cern/for_developers/creating_pr).\n\nThe title of your PR follows the same principle as the commit summary. If your PR only involves one commit, you can\nreuse this summary. For non-functional changes (e.g. to the documentation) or changes for which you want to\n**temporarily** prevent Jenkins from being triggered (e.g., for a draft PR), use `[skip-CI]` as the first tag.\nNote that for functional changes this tag needs to be removed and it has to pass the CI before merging to ensure\nthe change does not break anything.\n\nThe PR description describes (and in case of multiple commits, summarizes) the change in more detail.\nAgain, try to describe the **why** (and in this case, to a lesser extent the **what**), rather than the **how**.\n\nIf your PR is related to an open [issue](https://github.com/root-project/root/issues), make sure to link it.\nThis will be done automatically if you add\n[closing keywords](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue)\nto the PR description.\n\nOnce a PR is created, a member of the ROOT team will review it as quickly as possible.  If you are familiar with the\nROOT community, it may be beneficial to add a suggested reviewer to the PR in order to get quicker attention.\nPlease ping people :wave: should you not get timely feedback, for instance with `@root-project/core ping!`\n\n## Tests\n\nAs you contribute code, this code will likely fix an issue or add a feature.\nWhatever it is: this requires you to add a new test, or to extend an existing test. Depending on the size and complexity\nof this test, it exists either in the `test/` subdirectory of each part of ROOT (see for instance\n[`tree/dataframe/test`](https://github.com/root-project/root/tree/master/tree/dataframe/test)), or in\n[roottest](https://github.com/root-project/roottest.git). Tests in `test/` subdirectories are unit tests, mostly based on\n[Google Test](https://github.com/google/googletest) and easily extended. Tests in\n[roottest](https://github.com/root-project/roottest.git) are more involved (e.g., tests requiring custom dictionaries or\ndata files). When you create a branch in the main ROOT repository (i.e., this repository) and add a test to `roottest`,\nmake sure to do this under the same branch name (and open a PR for it). Our CI infrastructure automatically picks up the\nchanges defined in the `roottest` PR based on this branch name, and uses that for testing your PR here.\n\n## Continuous Integration\n\nTo prevent bad surprises and make a better first impression, we\nstrongly encourage new developers to [run the tests](https://root.cern/for_developers/run_the_tests/)\n_before_ submitting a pull request.\n\nROOT has automated CI tests :cop: that are used for pull requests:\n- *Build and test*: a [Jenkins-based CI workflow](https://github.com/phsft-bot/build-configuration/blob/master/README.md)\n    as well as a GitHub Actions CI workflow tests PRs automatically; only a\n    [project member](https://github.com/orgs/root-project/people) is allowed to initiate this build.\n    The results are posted to the pull request.\n    Compared to ROOT's nightly builds, PRs are tested with less tests, on less platforms.\n- *Formatting check*: `clang-format` automatically checks that a PR\n    [follows](https://github.com/root-project/root/blob/master/.clang-format) ROOT's\n    [coding conventions](https://root.cern/contribute/coding_conventions/).\n    If coding violations are found, it provides you with a `patch` output that you likely want to apply to your PR.\n- *Simple Static Analysis*: PRs are analyzed using [`clang-tidy`](https://clang.llvm.org/extra/clang-tidy/).\n\nTypically, PRs must pass all these tests; we will ask you to fix any issues that may arise.\nSome tests are run only outside the PR testing system:\nwe might come back to you with additional reports after your contribution was merged.\n\nThank you for reading this; and even more: thank you :bouquet: for considering to contribute!\n"
        },
        {
          "name": "LGPL2_1.txt",
          "type": "blob",
          "size": 23.875,
          "content": "            GNU LESSER GENERAL PUBLIC LICENSE\n                 Version 2.1, February 1999\n\n Copyright (C) 1991, 1999 Free Software Foundation, Inc.\n     51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts\n as the successor of the GNU Library Public License, version 2, hence\n the version number 2.1.]\n\n                   Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicenses are intended to guarantee your freedom to share and change\nfree software--to make sure the software is free for all its users.\n\n  This license, the Lesser General Public License, applies to some\nspecially designated software packages--typically libraries--of the\nFree Software Foundation and other authors who decide to use it.  You\ncan use it too, but we suggest you first think carefully about whether\nthis license or the ordinary General Public License is the better\nstrategy to use in any particular case, based on the explanations below.\n\n  When we speak of free software, we are referring to freedom of use,\nnot price.  Our General Public Licenses are designed to make sure that\nyou have the freedom to distribute copies of free software (and charge\nfor this service if you wish); that you receive source code or can get\nit if you want it; that you can change the software and use pieces of\nit in new free programs; and that you are informed that you can do\nthese things.\n\n  To protect your rights, we need to make restrictions that forbid\ndistributors to deny you these rights or to ask you to surrender these\nrights.  These restrictions translate to certain responsibilities for\nyou if you distribute copies of the library or if you modify it.\n\n  For example, if you distribute copies of the library, whether gratis\nor for a fee, you must give the recipients all the rights that we gave\nyou.  You must make sure that they, too, receive or can get the source\ncode.  If you link other code with the library, you must provide\ncomplete object files to the recipients, so that they can relink them\nwith the library after making changes to the library and recompiling\nit.  And you must show them these terms so they know their rights.\n\n  We protect your rights with a two-step method: (1) we copyright the\nlibrary, and (2) we offer you this license, which gives you legal\npermission to copy, distribute and/or modify the library.\n\n  To protect each distributor, we want to make it very clear that\nthere is no warranty for the free library.  Also, if the library is\nmodified by someone else and passed on, the recipients should know\nthat what they have is not the original version, so that the original\nauthor's reputation will not be affected by problems that might be\nintroduced by others.\n\f\n  Finally, software patents pose a constant threat to the existence of\nany free program.  We wish to make sure that a company cannot\neffectively restrict the users of a free program by obtaining a\nrestrictive license from a patent holder.  Therefore, we insist that\nany patent license obtained for a version of the library must be\nconsistent with the full freedom of use specified in this license.\n\n  Most GNU software, including some libraries, is covered by the\nordinary GNU General Public License.  This license, the GNU Lesser\nGeneral Public License, applies to certain designated libraries, and\nis quite different from the ordinary General Public License.  We use\nthis license for certain libraries in order to permit linking those\nlibraries into non-free programs.\n\n  When a program is linked with a library, whether statically or using\na shared library, the combination of the two is legally speaking a\ncombined work, a derivative of the original library.  The ordinary\nGeneral Public License therefore permits such linking only if the\nentire combination fits its criteria of freedom.  The Lesser General\nPublic License permits more lax criteria for linking other code with\nthe library.\n\n  We call this license the \"Lesser\" General Public License because it\ndoes Less to protect the user's freedom than the ordinary General\nPublic License.  It also provides other free software developers Less\nof an advantage over competing non-free programs.  These disadvantages\nare the reason we use the ordinary General Public License for many\nlibraries.  However, the Lesser license provides advantages in certain\nspecial circumstances.\n\n  For example, on rare occasions, there may be a special need to\nencourage the widest possible use of a certain library, so that it becomes\na de-facto standard.  To achieve this, non-free programs must be\nallowed to use the library.  A more frequent case is that a free\nlibrary does the same job as widely used non-free libraries.  In this\ncase, there is little to gain by limiting the free library to free\nsoftware only, so we use the Lesser General Public License.\n\n  In other cases, permission to use a particular library in non-free\nprograms enables a greater number of people to use a large body of\nfree software.  For example, permission to use the GNU C Library in\nnon-free programs enables many more people to use the whole GNU\noperating system, as well as its variant, the GNU/Linux operating\nsystem.\n\n  Although the Lesser General Public License is Less protective of the\nusers' freedom, it does ensure that the user of a program that is\nlinked with the Library has the freedom and the wherewithal to run\nthat program using a modified version of the Library.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.  Pay close attention to the difference between a\n\"work based on the library\" and a \"work that uses the library\".  The\nformer contains code derived from the library, whereas the latter must\nbe combined with the library in order to run.\n\f\n            GNU LESSER GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any software library or other\nprogram which contains a notice placed by the copyright holder or\nother authorized party saying it may be distributed under the terms of\nthis Lesser General Public License (also called \"this License\").\nEach licensee is addressed as \"you\".\n\n  A \"library\" means a collection of software functions and/or data\nprepared so as to be conveniently linked with application programs\n(which use some of those functions and data) to form executables.\n\n  The \"Library\", below, refers to any such software library or work\nwhich has been distributed under these terms.  A \"work based on the\nLibrary\" means either the Library or any derivative work under\ncopyright law: that is to say, a work containing the Library or a\nportion of it, either verbatim or with modifications and/or translated\nstraightforwardly into another language.  (Hereinafter, translation is\nincluded without limitation in the term \"modification\".)\n\n  \"Source code\" for a work means the preferred form of the work for\nmaking modifications to it.  For a library, complete source code means\nall the source code for all modules it contains, plus any associated\ninterface definition files, plus the scripts used to control compilation\nand installation of the library.\n\n  Activities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning a program using the Library is not restricted, and output from\nsuch a program is covered only if its contents constitute a work based\non the Library (independent of the use of the Library in a tool for\nwriting it).  Whether that is true depends on what the Library does\nand what the program that uses the Library does.\n  \n  1. You may copy and distribute verbatim copies of the Library's\ncomplete source code as you receive it, in any medium, provided that\nyou conspicuously and appropriately publish on each copy an\nappropriate copyright notice and disclaimer of warranty; keep intact\nall the notices that refer to this License and to the absence of any\nwarranty; and distribute a copy of this License along with the\nLibrary.\n\n  You may charge a fee for the physical act of transferring a copy,\nand you may at your option offer warranty protection in exchange for a\nfee.\n\f\n  2. You may modify your copy or copies of the Library or any portion\nof it, thus forming a work based on the Library, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) The modified work must itself be a software library.\n\n    b) You must cause the files modified to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    c) You must cause the whole of the work to be licensed at no\n    charge to all third parties under the terms of this License.\n\n    d) If a facility in the modified Library refers to a function or a\n    table of data to be supplied by an application program that uses\n    the facility, other than as an argument passed when the facility\n    is invoked, then you must make a good faith effort to ensure that,\n    in the event an application does not supply such function or\n    table, the facility still operates, and performs whatever part of\n    its purpose remains meaningful.\n\n    (For example, a function in a library to compute square roots has\n    a purpose that is entirely well-defined independent of the\n    application.  Therefore, Subsection 2d requires that any\n    application-supplied function or table used by this function must\n    be optional: if the application does not supply it, the square\n    root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Library,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Library, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote\nit.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library\nwith the Library (or with a work based on the Library) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may opt to apply the terms of the ordinary GNU General Public\nLicense instead of this License to a given copy of the Library.  To do\nthis, you must alter all the notices that refer to this License, so\nthat they refer to the ordinary GNU General Public License, version 2,\ninstead of to this License.  (If a newer version than version 2 of the\nordinary GNU General Public License has appeared, then you can specify\nthat version instead if you wish.)  Do not make any other change in\nthese notices.\n\f\n  Once this change is made in a given copy, it is irreversible for\nthat copy, so the ordinary GNU General Public License applies to all\nsubsequent copies and derivative works made from that copy.\n\n  This option is useful when you wish to copy part of the code of\nthe Library into a program that is not a library.\n\n  4. You may copy and distribute the Library (or a portion or\nderivative of it, under Section 2) in object code or executable form\nunder the terms of Sections 1 and 2 above provided that you accompany\nit with the complete corresponding machine-readable source code, which\nmust be distributed under the terms of Sections 1 and 2 above on a\nmedium customarily used for software interchange.\n\n  If distribution of object code is made by offering access to copy\nfrom a designated place, then offering equivalent access to copy the\nsource code from the same place satisfies the requirement to\ndistribute the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  5. A program that contains no derivative of any portion of the\nLibrary, but is designed to work with the Library by being compiled or\nlinked with it, is called a \"work that uses the Library\".  Such a\nwork, in isolation, is not a derivative work of the Library, and\ntherefore falls outside the scope of this License.\n\n  However, linking a \"work that uses the Library\" with the Library\ncreates an executable that is a derivative of the Library (because it\ncontains portions of the Library), rather than a \"work that uses the\nlibrary\".  The executable is therefore covered by this License.\nSection 6 states terms for distribution of such executables.\n\n  When a \"work that uses the Library\" uses material from a header file\nthat is part of the Library, the object code for the work may be a\nderivative work of the Library even though the source code is not.\nWhether this is true is especially significant if the work can be\nlinked without the Library, or if the work is itself a library.  The\nthreshold for this to be true is not precisely defined by law.\n\n  If such an object file uses only numerical parameters, data\nstructure layouts and accessors, and small macros and small inline\nfunctions (ten lines or less in length), then the use of the object\nfile is unrestricted, regardless of whether it is legally a derivative\nwork.  (Executables containing this object code plus portions of the\nLibrary will still fall under Section 6.)\n\n  Otherwise, if the work is a derivative of the Library, you may\ndistribute the object code for the work under the terms of Section 6.\nAny executables containing that work also fall under Section 6,\nwhether or not they are linked directly with the Library itself.\n\f\n  6. As an exception to the Sections above, you may also combine or\nlink a \"work that uses the Library\" with the Library to produce a\nwork containing portions of the Library, and distribute that work\nunder terms of your choice, provided that the terms permit\nmodification of the work for the customer's own use and reverse\nengineering for debugging such modifications.\n\n  You must give prominent notice with each copy of the work that the\nLibrary is used in it and that the Library and its use are covered by\nthis License.  You must supply a copy of this License.  If the work\nduring execution displays copyright notices, you must include the\ncopyright notice for the Library among them, as well as a reference\ndirecting the user to the copy of this License.  Also, you must do one\nof these things:\n\n    a) Accompany the work with the complete corresponding\n    machine-readable source code for the Library including whatever\n    changes were used in the work (which must be distributed under\n    Sections 1 and 2 above); and, if the work is an executable linked\n    with the Library, with the complete machine-readable \"work that\n    uses the Library\", as object code and/or source code, so that the\n    user can modify the Library and then relink to produce a modified\n    executable containing the modified Library.  (It is understood\n    that the user who changes the contents of definitions files in the\n    Library will not necessarily be able to recompile the application\n    to use the modified definitions.)\n\n    b) Use a suitable shared library mechanism for linking with the\n    Library.  A suitable mechanism is one that (1) uses at run time a\n    copy of the library already present on the user's computer system,\n    rather than copying library functions into the executable, and (2)\n    will operate properly with a modified version of the library, if\n    the user installs one, as long as the modified version is\n    interface-compatible with the version that the work was made with.\n\n    c) Accompany the work with a written offer, valid for at\n    least three years, to give the same user the materials\n    specified in Subsection 6a, above, for a charge no more\n    than the cost of performing this distribution.\n\n    d) If distribution of the work is made by offering access to copy\n    from a designated place, offer equivalent access to copy the above\n    specified materials from the same place.\n\n    e) Verify that the user has already received a copy of these\n    materials or that you have already sent this user a copy.\n\n  For an executable, the required form of the \"work that uses the\nLibrary\" must include any data and utility programs needed for\nreproducing the executable from it.  However, as a special exception,\nthe materials to be distributed need not include anything that is\nnormally distributed (in either source or binary form) with the major\ncomponents (compiler, kernel, and so on) of the operating system on\nwhich the executable runs, unless that component itself accompanies\nthe executable.\n\n  It may happen that this requirement contradicts the license\nrestrictions of other proprietary libraries that do not normally\naccompany the operating system.  Such a contradiction means you cannot\nuse both them and the Library together in an executable that you\ndistribute.\n\f\n  7. You may place library facilities that are a work based on the\nLibrary side-by-side in a single library together with other library\nfacilities not covered by this License, and distribute such a combined\nlibrary, provided that the separate distribution of the work based on\nthe Library and of the other library facilities is otherwise\npermitted, and provided that you do these two things:\n\n    a) Accompany the combined library with a copy of the same work\n    based on the Library, uncombined with any other library\n    facilities.  This must be distributed under the terms of the\n    Sections above.\n\n    b) Give prominent notice with the combined library of the fact\n    that part of it is a work based on the Library, and explaining\n    where to find the accompanying uncombined form of the same work.\n\n  8. You may not copy, modify, sublicense, link with, or distribute\nthe Library except as expressly provided under this License.  Any\nattempt otherwise to copy, modify, sublicense, link with, or\ndistribute the Library is void, and will automatically terminate your\nrights under this License.  However, parties who have received copies,\nor rights, from you under this License will not have their licenses\nterminated so long as such parties remain in full compliance.\n\n  9. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Library or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Library (or any work based on the\nLibrary), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Library or works based on it.\n\n  10. Each time you redistribute the Library (or any work based on the\nLibrary), the recipient automatically receives a license from the\noriginal licensor to copy, distribute, link with or modify the Library\nsubject to these terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties with\nthis License.\n\f\n  11. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Library at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Library by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any\nparticular circumstance, the balance of the section is intended to apply,\nand the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  12. If the distribution and/or use of the Library is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Library under this License may add\nan explicit geographical distribution limitation excluding those countries,\nso that distribution is permitted only in or among countries not thus\nexcluded.  In such case, this License incorporates the limitation as if\nwritten in the body of this License.\n\n  13. The Free Software Foundation may publish revised and/or new\nversions of the Lesser General Public License from time to time.\nSuch new versions will be similar in spirit to the present version,\nbut may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Library\nspecifies a version number of this License which applies to it and\n\"any later version\", you have the option of following the terms and\nconditions either of that version or of any later version published by\nthe Free Software Foundation.  If the Library does not specify a\nlicense version number, you may choose any version ever published by\nthe Free Software Foundation.\n\f\n  14. If you wish to incorporate parts of the Library into other free\nprograms whose distribution conditions are incompatible with these,\nwrite to the author to ask for permission.  For software which is\ncopyrighted by the Free Software Foundation, write to the Free\nSoftware Foundation; we sometimes make exceptions for this.  Our\ndecision will be guided by the two goals of preserving the free status\nof all derivatives of our free software and of promoting the sharing\nand reuse of software generally.\n\n                   NO WARRANTY\n\n  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO\nWARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.\nEXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR\nOTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY\nKIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE\nLIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME\nTHE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN\nWRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY\nAND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU\nFOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\nCONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE\nLIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING\nRENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A\nFAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF\nSUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGES.\n\n               END OF TERMS AND CONDITIONS\n\f\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.9658203125,
          "content": "This library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation; either\nversion 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public\nLicense along with this library; if not, write to the Free Software\nFoundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\nSee LGPL2_1.txt next to this file for the text of the LGPL version 2.1.\nFor questions regarding the ROOT license, please contact rootdev@cern.ch.\n\nThe precompiled binary distributions provided as a service to our community \nmay feature packages released with licenses different from LGPL."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.689453125,
          "content": "<img src=\"https://root-forum.cern.ch/uploads/default/original/2X/3/3fb82b650635bc6d61461f3c47f41786afad4548.png\" align=\"right\"  height=\"50\"/>\n\n## About\n\nROOT is a unified software package for the storage, processing, and analysis of \nscientific data: from its acquisition to the final visualization in form of highly \ncustomizable, publication-ready plots. It is reliable, performant and well supported,\neasy to use and obtain, and strives to maximize the quantity and impact of scientific \nresults obtained per unit cost, both of human effort and computing resources.\n\nROOT provides a very efficient storage system for data models, \nthat demonstrated to scale at the Large Hadron Collider experiments: Exabytes \nof scientific data are written in columnar ROOT format.\nROOT comes with histogramming capabilities in an arbitrary number of \ndimensions, curve fitting, statistical modelling, minimization, to allow\nthe easy setup of a data analysis system that can query and process the data\ninteractively or in batch mode, as well as a general parallel processing\nframework, RDataFrame, that can considerably speed up an analysis, taking \nfull advantage of multi-core and distributed systems.\n\nROOT is performance critical software written in C++ and enables rapid prototyping \npowered by a unique C++ compliant interpreter called Cling. \nCling also enables performant C++ type introspection which is a building block of automatic \ninteroperability with Python. Thanks to PyROOT, leveraging the cppyy technology, \nROOT offers efficient, on-demand C++/Python interoperability in a uniform cross-language \nexecution environment.\n\nROOT fully embraces open-source, it's made with passion by its community,\nfor the benefit of its community.\n\n[![License: LGPL v2.1+](https://img.shields.io/badge/License-LGPL%20v2.1+-blue.svg)](https://www.gnu.org/licenses/lgpl.html)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/5060/badge)](https://bestpractices.coreinfrastructure.org/projects/5060)\n\n## Contribution Guidelines\n- [How to contribute](https://github.com/root-project/root/blob/master/CONTRIBUTING.md)\n- [Coding conventions](https://root.cern/coding-conventions)\n- [Meetings](https://root.cern/meetings)\n\n## Cite\nWhen citing ROOT, please use both the reference reported below and the DOI specific to your ROOT version available [on Zenodo](https://zenodo.org/badge/latestdoi/10994345) [![DOI](https://zenodo.org/badge/10994345.svg)](https://zenodo.org/badge/latestdoi/10994345). For example, you can copy-paste and fill in the following citation:\n\n    Rene Brun and Fons Rademakers, ROOT - An Object Oriented Data Analysis Framework,\n    Proceedings AIHENP'96 Workshop, Lausanne, Sep. 1996,\n    Nucl. Inst. & Meth. in Phys. Res. A 389 (1997) 81-86.\n    See also \"ROOT\" [software], Release vX.YY/ZZ, dd/mm/yyyy\n\n## Live Demo for CERN Users\n[![](https://img.shields.io/badge/Launch-SWAN-orange)](http://cern.ch/swanserver/cgi-bin/go?projurl=https://github.com/cernphsft/rootbinder.git)\n\nSee more screenshots on our [gallery](https://root.cern/gallery).\n\n## Installation and Getting Started\nSee https://root.cern/install for installation instructions.\nFor instructions on how to build ROOT from these source files, see https://root.cern/install/build_from_source.\n\nOur [\"Getting started with ROOT\"](https://root.cern/learn) page is then the perfect place to get familiar with ROOT.\n\n## Help and Support\n- [Forum](https://root.cern/forum/)\n- [Issue tracker](https://github.com/root-project/root/issues)\n  * [Previous now read-only Jira issue tracker](https://sft.its.cern.ch/jira/projects/ROOT/issues/ROOT-5820?filter=allopenissues)\n- [Documentation](https://root.cern/guides/reference-guide)\n- [Tutorials](https://root.cern/doc/master/group__Tutorials.html)"
        },
        {
          "name": "README",
          "type": "tree",
          "content": null
        },
        {
          "name": "bindings",
          "type": "tree",
          "content": null
        },
        {
          "name": "builtins",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure",
          "type": "blob",
          "size": 0.17578125,
          "content": "#!/bin/sh\n#\n\necho \"\"\necho \"  ROOT is built with CMake, see https://root.cern/building-root\"\necho \"  Please run\"\necho \"      mkdir obj; cd obj; cmake ..; make -j 4\"\necho \"\"\n\nexit 1\n"
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "documentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "fonts",
          "type": "tree",
          "content": null
        },
        {
          "name": "geom",
          "type": "tree",
          "content": null
        },
        {
          "name": "graf2d",
          "type": "tree",
          "content": null
        },
        {
          "name": "graf3d",
          "type": "tree",
          "content": null
        },
        {
          "name": "gui",
          "type": "tree",
          "content": null
        },
        {
          "name": "hist",
          "type": "tree",
          "content": null
        },
        {
          "name": "html",
          "type": "tree",
          "content": null
        },
        {
          "name": "icons",
          "type": "tree",
          "content": null
        },
        {
          "name": "interpreter",
          "type": "tree",
          "content": null
        },
        {
          "name": "io",
          "type": "tree",
          "content": null
        },
        {
          "name": "js",
          "type": "tree",
          "content": null
        },
        {
          "name": "macros",
          "type": "tree",
          "content": null
        },
        {
          "name": "main",
          "type": "tree",
          "content": null
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "math",
          "type": "tree",
          "content": null
        },
        {
          "name": "misc",
          "type": "tree",
          "content": null
        },
        {
          "name": "montecarlo",
          "type": "tree",
          "content": null
        },
        {
          "name": "net",
          "type": "tree",
          "content": null
        },
        {
          "name": "proof",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.9912109375,
          "content": "# ROOT requirements for third-party Python packages\n\n# PyROOT: Interoperability with numpy arrays\nnumpy\npandas\n\n# TMVA: SOFIE\ndm-sonnet ; python_version < \"3.13\"  # used for GNNs, not available for Python 3.13 yet\ngraph_nets ; python_version < \"3.13\" # not available for Python 3.13 yet\nonnx\n\n# TMVA: PyMVA interfaces\nscikit-learn\ntensorflow<2.16 ; python_version < \"3.12\"\ntorch<2.5 ; python_version < \"3.13\" # no torch version that fullfills version constraint available for Python 3.13\nxgboost\n\n# PyROOT: ROOT.Numba.Declare decorator\nnumba>=0.48 ; python_version < \"3.13\" # no numba available for Python 3.13 yet\ncffi>=1.9.1\n\n# Notebooks: ROOT C++ kernel\nnotebook>=4.4.1\nmetakernel>=0.20.0\n\n# Distributed RDataFrame\npyspark>=2.4 # Spark backend\ndask>=2022.08.1 # Dask backend\ndistributed>=2022.08.1 # Dask backend\n\n# JsMVA: Jupyter notebook magic for TMVA\nipywidgets\n\n# Look for CPU-only versions of PyTorch to avoid pulling CUDA in the CI docker images.\n-f https://download.pytorch.org/whl/cpu/torch_stable.html\n"
        },
        {
          "name": "roofit",
          "type": "tree",
          "content": null
        },
        {
          "name": "rootx",
          "type": "tree",
          "content": null
        },
        {
          "name": "sql",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tmva",
          "type": "tree",
          "content": null
        },
        {
          "name": "tree",
          "type": "tree",
          "content": null
        },
        {
          "name": "tutorials",
          "type": "tree",
          "content": null
        },
        {
          "name": "ui5",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}