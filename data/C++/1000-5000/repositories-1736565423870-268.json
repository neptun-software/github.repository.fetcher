{
  "metadata": {
    "timestamp": 1736565423870,
    "page": 268,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "KDE/heaptrack",
      "stars": 3424,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 1.279296875,
          "content": "---\nBasedOnStyle:  WebKit\nLanguage:        Cpp\nAlignAfterOpenBracket: true\nAlwaysBreakTemplateDeclarations: true\nBreakBeforeBraces: Custom\nBreakConstructorInitializersBeforeComma: true\nBreakBeforeBinaryOperators: NonAssignment\nBraceWrapping:\n    AfterClass: true\n    AfterControlStatement: false\n    AfterEnum: true\n    AfterFunction: true\n    AfterNamespace: false\n    AfterObjCDeclaration: false\n    AfterStruct: true\n    AfterUnion: false\n    BeforeCatch: false\n    BeforeElse: false\n    IndentBraces: false\nColumnLimit: 120\nStandard:        Cpp11\nIndentWidth:     4\nTabWidth:        8\nUseTab:          Never\nPointerAlignment: Left\nSpacesInParentheses: false\nSpacesInAngles:  false\nSpaceInEmptyParentheses: false\nSpacesInCStyleCastParentheses: false\nSpaceAfterControlStatementKeyword: true\nSpaceBeforeAssignmentOperators: true\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nIncludeCategories:\n  - Regex:           '^<boost/'\n    Priority:        1\n  - Regex:           '^<Q'\n    Priority:        2\nAllowShortFunctionsOnASingleLine: None\nForEachMacros:   [ foreach, Q_FOREACH, BOOST_FOREACH, forever, Q_FOREVER, QBENCHMARK, QBENCHMARK_ONCE, TEST_CASE, SECTION ]\nNamespaceIndentation: None\n# Only for newer clang-format versions\n#MacroBlockBegin: BEGINTESTFUNCIMPL\n#MacroBlockEnd: ENDTESTFUNCIMPL\n...\n\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0341796875,
          "content": "build*/\n*.zst\n*.gz\n*.AppImage\n.git\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2802734375,
          "content": "# general\napidocs\n.kdev4\n*~\n*.bak\ndoxygen.log\nbuild\n*.patch\n*.diff\n*.orig\n*.rej\n*.swp\nmassif.out.*\nperf.data\nperf.data.*\ncallgrind.out.*\n.*kate-swp\n\n# IDEs/clangd\n.clangd\n.cache\ncompile_commands.json\n.idea\n\n# from kdiff3\n*.BACKUP.*\n*.BASE.*\n*.LOCAL.*\n*.REMOTE.*\nbuild*/\n*.zst\n*.AppImage\n"
        },
        {
          "name": ".gitlab-ci.yml",
          "type": "blob",
          "size": 0.126953125,
          "content": "include:\n  - project: sysadmin/ci-utilities\n    file:\n      - /gitlab-templates/linux.yml\n      - /gitlab-templates/linux-qt6.yml\n"
        },
        {
          "name": ".kateconfig",
          "type": "blob",
          "size": 0.0595703125,
          "content": "kate: indent-width 4; replace-tabs on; word-wrap-column 120;\n"
        },
        {
          "name": ".kde-ci.yml",
          "type": "blob",
          "size": 0.837890625,
          "content": "# SPDX-FileCopyrightText: None\n# SPDX-License-Identifier: CC0-1.0\n\nDependencies:\n- 'on': ['Linux/Qt5']\n  'require':\n    'frameworks/extra-cmake-modules': '@stable'\n    'frameworks/kcoreaddons': '@stable'\n    'frameworks/ki18n': '@stable'\n    'frameworks/kconfigwidgets': '@stable'\n    'frameworks/kio': '@stable'\n    'frameworks/kiconthemes': '@stable'\n    'frameworks/threadweaver': '@stable'\n    'graphics/kdiagram': '@stable'\n\n- 'on': ['Linux/Qt6']\n  'require':\n    'frameworks/extra-cmake-modules': '@latest-kf6'\n    'frameworks/kcoreaddons': '@latest-kf6'\n    'frameworks/ki18n': '@latest-kf6'\n    'frameworks/kconfigwidgets': '@latest-kf6'\n    'frameworks/kio': '@latest-kf6'\n    'frameworks/kiconthemes': '@latest-kf6'\n    'frameworks/threadweaver': '@latest-kf6'\n    'graphics/kdiagram': '@latest-kf6'\n\nOptions:\n  require-passing-tests-on: ['Linux']\n"
        },
        {
          "name": ".reuse",
          "type": "tree",
          "content": null
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.3583984375,
          "content": "language: cpp\ncompiler: gcc\nos: linux\ndist: xenial\n\nservices:\n  - docker\n\ninstall:\n  - wget -nv -c https://github.com/probonopd/uploadtool/raw/master/upload.sh\n  - chmod a+x upload.sh\n  - sudo mv upload.sh /usr/bin/github-upload\n\nscript:\n  - set -e # Exit immediately if anything fails\n  - ./tools/build_appimage_in_docker.sh\n  - github-upload ./heaptrack-*.AppImage\n"
        },
        {
          "name": "3rdparty",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 5.423828125,
          "content": "if (CMAKE_VERSION VERSION_LESS \"2.8.12\")\n    cmake_minimum_required(VERSION 2.8.9)\n    set(HEAPTRACK_BUILD_GUI OFF)\nelseif (CMAKE_VERSION VERSION_LESS \"3.16.0\")\n    cmake_minimum_required(VERSION 2.8.12)\nelse()\n    cmake_minimum_required(VERSION 3.16.0)\nendif()\n\nproject(heaptrack)\nenable_testing()\n\nif(NOT CMAKE_BUILD_TYPE)\n  message(STATUS \"Setting build type to 'RelWithDebInfo' as none was specified.\")\n  set(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING \"Choose the type of build.\" FORCE)\nendif()\n\nset(HEAPTRACK_VERSION_MAJOR 1)\nset(HEAPTRACK_VERSION_MINOR 5)\nset(HEAPTRACK_VERSION_PATCH 80)\nset(HEAPTRACK_LIB_VERSION 1.5.80)\nset(HEAPTRACK_LIB_SOVERSION 2)\nset(HEAPTRACK_FILE_FORMAT_VERSION 3)\n\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)\n\noption(APPIMAGE_BUILD \"configure build for bundling in an appimage\" OFF)\n\nset(REQUIRED_IN_APPIMAGE \"\")\nif (APPIMAGE_BUILD)\n    set(REQUIRED_IN_APPIMAGE REQUIRED)\nendif()\n\ninclude(FeatureSummary)\nfind_package(Boost 1.60.0 ${REQUIRED_IN_APPIMAGE} COMPONENTS system filesystem iostreams container)\nset_package_properties(Boost PROPERTIES TYPE RECOMMENDED PURPOSE \"Boost container libraries can greatly improve performance (via pmr allocators)\")\nfind_package(Threads REQUIRED)\nfind_package(ZLIB REQUIRED)\n\nif (${Boost_IOSTREAMS_FOUND})\n    find_package(ZSTD ${REQUIRED_IN_APPIMAGE})\n\n    include(CheckCXXSourceCompiles)\n    include(CMakePushCheckState)\n    cmake_push_check_state()\n    set(CMAKE_REQUIRED_INCLUDES ${Boost_INCLUDE_DIRS})\n    set(CMAKE_REQUIRED_LIBRARIES ${Boost_LIBRARIES})\n    check_cxx_source_compiles(\"#include <boost/iostreams/filter/zstd.hpp>\n        int main() { boost::iostreams::zstd_decompressor(); return 0; }\"\n        BOOST_IOSTREAMS_HAS_ZSTD\n    )\n    cmake_pop_check_state()\nendif()\nset_package_properties(ZSTD PROPERTIES TYPE RECOMMENDED PURPOSE \"Zstandard offers better (de)compression performance compared with gzip/zlib, making heaptrack faster and datafiles smaller.\")\n\nif (CMAKE_SYSTEM_NAME STREQUAL \"Linux\" OR CMAKE_SYSTEM_NAME STREQUAL \"FreeBSD\")\n    set(HEAPTRACK_BUILD_TRACK_DEFAULT ON)\n    set(HEAPTRACK_BUILD_INTERPRET_DEFAULT ON)\nelse()\n    set(HEAPTRACK_BUILD_TRACK_DEFAULT OFF)\n    set(HEAPTRACK_BUILD_INTERPRET_DEFAULT OFF)\nendif()\n\noption(\n  HEAPTRACK_BUILD_TRACK\n  \"Disable this option to skip building the tracker part for heaptrack, e.g. to only build the GUI.\"\n  ${HEAPTRACK_BUILD_TRACK_DEFAULT}\n)\n\noption(\n  HEAPTRACK_BUILD_INTERPRET\n  \"Disable this option to skip building the interpret part for heaptrack.\"\n  ${HEAPTRACK_BUILD_INTERPRET_DEFAULT}\n)\n\nif (CMAKE_CROSSCOMPILING)\n    set(HEAPTRACK_BUILD_ANALYZE_DEFAULT OFF)\nelse()\n    set(HEAPTRACK_BUILD_ANALYZE_DEFAULT ON)\nendif()\n\noption(\n  HEAPTRACK_BUILD_PRINT\n  \"Disable this option to skip building heaptrack_print, e.g. when you're cross-compiling.\"\n  ${HEAPTRACK_BUILD_ANALYZE_DEFAULT}\n)\n\noption(\n  HEAPTRACK_BUILD_GUI\n  \"Disable this option to skip building the Qt / KDE Frameworks based GUI for heaptrack.\"\n  ${HEAPTRACK_BUILD_ANALYZE_DEFAULT}\n)\n\noption(\n  HEAPTRACK_USE_QT6\n  \"Use Qt6/KF6 when building the Qt / KDE Frameworks based GUI for heaptrack.\"\n  OFF\n)\nif(HEAPTRACK_USE_QT6)\n    set(QT_VERSION_MAJOR 6)\n    # possibly works with older Qt6, but I didn't test that yet\n    set(QT_MIN_VERSION 6.5.0)\nelse()\n    set(QT_VERSION_MAJOR 5)\n    set(QT_MIN_VERSION 5.10.0)\nendif()\n\noption(\n  HEAPTRACK_USE_LIBUNWIND\n  \"Define preferred unwind functionality - Libunwind as ON and unwind_tables as OFF.\"\n  ON\n)\n\nset(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\n\nif (NOT MSVC)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -Wextra -Wpedantic -Werror=undef -Werror=return-type\")\nendif()\n\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED TRUE)\n\ninclude (CheckCXXSourceCompiles)\n\n# cfree() does not exist in glibc 2.26+.\n# See: https://bugs.kde.org/show_bug.cgi?id=383889\ninclude(CheckSymbolExists)\ncheck_symbol_exists(cfree malloc.h HAVE_CFREE)\ncheck_symbol_exists(valloc stdlib.h HAVE_VALLOC)\n\nset(BIN_INSTALL_DIR \"bin\")\nset(LIB_SUFFIX \"\" CACHE STRING \"Define suffix of directory name (32/64)\")\nset(LIB_INSTALL_DIR \"lib${LIB_SUFFIX}\")\nset(LIBEXEC_INSTALL_DIR \"${LIB_INSTALL_DIR}/heaptrack/libexec\")\n\nfile(RELATIVE_PATH LIBEXEC_REL_PATH\n    \"${CMAKE_INSTALL_PREFIX}/${BIN_INSTALL_DIR}\"\n    \"${CMAKE_INSTALL_PREFIX}/${LIBEXEC_INSTALL_DIR}\")\n\nfile(RELATIVE_PATH LIB_REL_PATH\n    \"${CMAKE_INSTALL_PREFIX}/${BIN_INSTALL_DIR}\"\n    \"${CMAKE_INSTALL_PREFIX}/${LIB_INSTALL_DIR}/heaptrack\")\n\nset(ECM_ENABLE_SANITIZERS \"\" CACHE STRING \"semicolon-separated list of sanitizers to enable for code that is not injected into client applications\")\n\nif (ECM_ENABLE_SANITIZERS)\n    find_package(ECM 1.0.0 NO_MODULE)\n    if (ECM_FOUND)\n        set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${ECM_MODULE_PATH})\n    endif()\nendif()\n\nif (HEAPTRACK_BUILD_TRACK)\n    if (HEAPTRACK_USE_LIBUNWIND)\n        find_package(Libunwind REQUIRED)\n    endif()\n\n    check_cxx_source_compiles(\n        \"#ifdef __linux__\n        #include <stdio_ext.h>\n        #endif\n        #include <fcntl.h>\n        #include <dlfcn.h>\n        #include <link.h>\n        int main() { return 0; }\"\n        HAVE_LINUX_HEADERS)\n\n    if (NOT HAVE_LINUX_HEADERS)\n        message(FATAL_ERROR \"You are missing some Linux/BSD headers required to compile heaptrack.\")\n    endif()\nendif()\n\nadd_subdirectory(3rdparty)\nadd_subdirectory(src)\nadd_subdirectory(tests)\n\n# Let releaseme know about this:\n# SKIP_PO_INSTALL\n# (KF5I18n is optional in src/analyze/CMakeLists.txt...)\n\nfeature_summary(WHAT ALL FATAL_ON_MISSING_REQUIRED_PACKAGES)\n"
        },
        {
          "name": "LICENSES",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.16796875,
          "content": "# heaptrack - a heap memory profiler for Linux\n\n![heaptrack_gui summary page](screenshots/gui_summary.png?raw=true \"heaptrack_gui summary page\")\n\nHeaptrack traces all memory allocations and annotates these events with stack traces.\nDedicated analysis tools then allow you to interpret the heap memory profile to:\n\n- find hotspots that need to be optimized to reduce the **memory footprint** of your application\n- find **memory leaks**, i.e. locations that allocate memory which is never deallocated\n- find **allocation hotspots**, i.e. code locations that trigger a lot of memory allocation calls\n- find **temporary allocations**, which are allocations that are directly followed by their deallocation\n\n## Using heaptrack\n\nThe recommended way is to launch your application and start tracing from the beginning:\n\n    heaptrack <your application and its parameters>\n\n    heaptrack output will be written to \"/tmp/heaptrack.APP.PID.gz\"\n    starting application, this might take some time...\n\n    ...\n\n    heaptrack stats:\n        allocations:            65\n        leaked allocations:     60\n        temporary allocations:  1\n\n    Heaptrack finished! Now run the following to investigate the data:\n\n        heaptrack --analyze \"/tmp/heaptrack.APP.PID.gz\"\n\nAlternatively, you can attach to an already running process:\n\n    heaptrack --pid $(pidof <your application>)\n\n    heaptrack output will be written to \"/tmp/heaptrack.APP.PID.gz\"\n    injecting heaptrack into application via GDB, this might take some time...\n    injection finished\n\n    ...\n\n    Heaptrack finished! Now run the following to investigate the data:\n\n        heaptrack --analyze \"/tmp/heaptrack.APP.PID.gz\"\n\n### Profiling on embedded machines\n\nWhen you are trying to profile a system where you do not have direct access to debug symbols, which is commonly the case\non embedded systems, the above steps won't give you useful data. There, you instead first need to record a raw trace\nfile and then later interpret it on a system where you have access to an SDK or sysroot with the required debug symbols.\n\nRecord a raw trace file on the embedded system:\n\n    heaptrack --raw <your application and its parameters>\n\nThen download the raw trace file to your development machine and interpret the data:\n\n    heaptrack --interpret \"/path/heaptrack.test_c.8911.raw.zst\" --sysroot \"/path/to/sysroot\"\n\nThen, you can analyze it:\n\n    heaptrack --analyze \"/tmp/heaptrack.test_c.8911.zst\"\n\nIf you have other folders outside of the sysroot that contain debug information, you can pass them via `--debug-paths`\nto `heaptrack --interpret`, see also: https://sourceware.org/gdb/current/onlinedocs/gdb.html/Separate-Debug-Files.html\n\nFurthermore, if you have custom code side loaded and want to load the debug information from the respective build\nfolders, use `--extra-paths`, e.g.:\n\n    heaptrack --interpret \"/path/heaptrack.test_c.8911.raw.zst\" --sysroot \"/path/to/sysroot\"\n\n## Building heaptrack\n\nHeaptrack is split into two parts: The data collector, i.e. `heaptrack` itself, and the\nanalyzer GUI called `heaptrack_gui`. The following summarizes the dependencies for these\ntwo parts as they can be build independently. You will find corresponding development\npackages on all major distributions for these dependencies.\n\nOn an embedded device or older Linux distribution, you will only want to build `heaptrack`.\nThe data can then be analyzed on a different machine with a more modern Linux distribution\nthat has access to the required GUI dependencies.\n\nIf you need help with building, deploying or using heaptrack, you can contact KDAB for\ncommercial support: https://www.kdab.com/software-services/workshops/profiling-workshops/\n\n### Shared dependencies\n\nBoth parts require the following tools and libraries:\n\n- cmake 2.8.9 or higher\n- a C\\+\\+11 enabled compiler like g\\+\\+ or clang\\+\\+\n- zlib\n- optionally: zstd for faster (de)compression\n- elfutils\n- libdl\n- pthread\n- libc\n\n### `heaptrack` dependencies\n\nThe heaptrack data collector and the simplistic `heaptrack_print` analyzer depend on the\nfollowing libraries:\n\n- boost 1.41 or higher: iostreams, program_options\n- libunwind\n\nFor runtime-attaching, you will need `gdb` installed.\n\nAt runtime, heaptrack will try to load these optional dependencies to demangle Rust & D symbols:\n- [rustc_demangle](https://github.com/rust-lang/rustc-demangle)\n- [d_demangler](https://github.com/lievenhey/d_demangler)\n\n### `heaptrack_gui` dependencies\n\nThe graphical user interface to interpret and analyze the data collected by heaptrack\ndepends on Qt 5 and some KDE libraries:\n\n- extra-cmake-modules\n- Qt 5.2 or higher: Core, Widgets\n- KDE Frameworks 5: CoreAddons, I18n, ItemModels, ThreadWeaver, ConfigWidgets, KIO, IconThemes\n\nWhen any of these dependencies is missing, `heaptrack_gui` will not be build.\nOptionally, install the following dependencies to get additional features in\nthe GUI:\n\n- KDiagram: KChart (for chart visualizations)\n\n### Compiling\n\nRun the following commands to compile heaptrack. Do pay attention to the output\nof the CMake command, as it will tell you about missing dependencies!\n\n    cd heaptrack # i.e. the source folder\n    mkdir build\n    cd build\n    cmake -DCMAKE_BUILD_TYPE=Release .. # look for messages about missing dependencies!\n    make -j$(nproc)\n\n#### Compile `heaptrack_gui` on macOS using homebrew\n\n`heaptrack_print` and `heaptrack_gui` can be built on platforms other than Linux, using the dependencies mentioned above.\nOn macOS the dependencies can be installed easily using [homebrew](http://brew.sh) and the [KDE homebrew tap](https://github.com/KDE-mac/homebrew-kde).\n\n    brew install qt@5\n\n    # prepare tap\n    brew tap kde-mac/kde https://invent.kde.org/packaging/homebrew-kde.git\n    \"$(brew --repo kde-mac/kde)/tools/do-caveats.sh\"\n    \n    # install dependencies\n    brew install kde-mac/kde/kf5-kcoreaddons kde-mac/kde/kf5-kitemmodels kde-mac/kde/kf5-kconfigwidgets \\\n                 kde-mac/kde/kf5-kio kde-mac/kde/kdiagram \\\n                 extra-cmake-modules ki18n threadweaver \\\n                 boost zstd gettext\n    \n    # run manual steps as printed by brew\n    ln -sfv \"$(brew --prefix)/share/kf5\" \"$HOME/Library/Application Support\"\n    ln -sfv \"$(brew --prefix)/share/knotifications5\" \"$HOME/Library/Application Support\"\n    ln -sfv \"$(brew --prefix)/share/kservices5\" \"$HOME/Library/Application Support\"\n    ln -sfv \"$(brew --prefix)/share/kservicetypes5\" \"$HOME/Library/Application Support\"\n\nTo compile make sure to use Qt from homebrew and to have gettext in the path:\n\n    cd heaptrack # i.e. the source folder\n    mkdir build\n    cd build\n    CMAKE_PREFIX_PATH=/opt/homebrew/opt/qt@5 PATH=$PATH:/opt/homebrew/opt/gettext/bin cmake ..\n    cmake -DCMAKE_BUILD_TYPE=Release .. # look for messages about missing dependencies!\n    make heaptrack_gui heaptrack_print\n\n## Interpreting the heap profile\n\nHeaptrack generates data files that are impossible to analyze for a human. Instead, you need\nto use either `heaptrack_print` or `heaptrack_gui` to interpret the results.\n\n### heaptrack_gui\n\n![heaptrack_gui flamegraph page](screenshots/gui_flamegraph.png?raw=true \"heaptrack_gui flamegraph page\")\n\n![heaptrack_gui allocations chart page](screenshots/gui_allocations_chart.png?raw=true \"heaptrack_gui allocations chart page\")\n\nThe highly recommended way to analyze a heap profile is by using the `heaptrack_gui` tool.\nIt depends on Qt 5 and KF 5 to graphically visualize the recorded data. It features:\n\n- a summary page of the data\n- bottom-up and top-down tree views of the code locations that allocated memory with\n  their aggregated cost and stack traces\n- flame graph visualization\n- graphs of allocation costs over time\n\n### heaptrack_print\n\nThe `heaptrack_print` tool is a command line application with minimal dependencies. It takes\nthe heap profile, analyzes it, and prints the results in ASCII format to the command line.\n\nIn its most simple form, you can use it like this:\n\n    heaptrack_print heaptrack.APP.PID.gz | less\n\nBy default, the report will contain three sections:\n\n    MOST CALLS TO ALLOCATION FUNCTIONS\n    PEAK MEMORY CONSUMERS\n    MOST TEMPORARY ALLOCATIONS\n\nEach section then lists the top ten hotspots, i.e. code locations that triggered e.g.\nthe most memory allocations.\n\nHave a look at `heaptrack_print --help` for changing the output format and other options.\n\nNote that you can use this tool to convert a heaptrack data file to the Massif data format.\nYou can generate a collapsed stack report for consumption by `flamegraph.pl`.\n\n## Comparison to Valgrind's massif\n\nThe idea to build heaptrack was born out of the pain in working with Valgrind's massif.\nValgrind comes with a huge overhead in both memory and time, which sometimes prevent you\nfrom running it on larger real-world applications. Most of what Valgrind does is not\nneeded for a simple heap profiler.\n\n### Advantages of heaptrack over massif\n\n- *speed and memory overhead*\n\n  Multi-threaded applications are not serialized when you trace them with heaptrack and\n  even for single-threaded applications the overhead in both time and memory is significantly\n  lower. Most notably, you only pay a price when you allocate memory -- time-intensive CPU\n  calculations are not slowed down at all, contrary to what happens in Valgrind.\n\n- *more data*\n\n  Valgrind's massif aggregates data before writing the report. This step loses a lot of\n  useful information. Most notably, you are not longer able to find out how often memory\n  was allocated, or where temporary allocations are triggered. Heaptrack does not aggregate the\n  data until you interpret it, which allows for more useful insights into your allocation patterns.\n\n### Advantages of massif over heaptrack\n\n- *ability to profile page allocations as heap*\n\n  This allows you to heap-profile applications that use pool allocators that circumvent\n  malloc & friends. Heaptrack can in principle also profile such applications, but it\n  requires code changes to annotate the memory pool implementation.\n\n- *ability to profile stack allocations*\n\n  This is inherently impossible to implement efficiently in heaptrack as far as I know.\n\n## Heaptrack with Rust\n\nIn general, Heaptrack mostly works with Rust binaries out of the box, as Rust programs include the corresponding debug symbols.\nDemangling is not yet supported, however most symbol names are still decipherable.\n\nThere are also a few other details to keep in mind.\n\n### Enable debug symbols\nIf building in release mode, make sure [debug symbols](https://doc.rust-lang.org/cargo/reference/profiles.html#debug) are enabled.\n\nAdd this to your Cargo.toml:\n```\n[profile.release]\ndebug = true\n```\n⚠️ Note that if your project is part of a Workspace, this must be added to the Workspace Cargo.toml, not to the individual crate.\n\n### Running Heaptrack on a Rust binary\n\nRunning `heaptrack cargo run` will not work as intended, as this will profile Cargo's memory usage, not that of your application.\n\nInstead either:\n1. Compile your binary as normal with `cargo build --release` and run heaptrack on the resulting binary in the `target/release/` directory.\n    * e.g.: `heaptrack ./target/release/my-rust-app`\n2. Install [cargo-heaptrack](https://crates.io/crates/cargo-heaptrack) (unofficial) and run `cargo heaptrack`.\n    * ⚠️ Make sure to run the analysis command as prompted by the command-line output before opening the GUI\n\n### Opening Rust source files via Heaptrack\n\nIn Heaptracks GUI under the Callee/Caller graph, you can double-click a location to open an editor there.\n\nThe file paths are relative, so make sure to open the heaptrack GUI at the root of your project, in order for this to work correctly.\n\n⚠️ If your crate is part of a workspace, you need to open heaptrack at the root of the workspace for the paths to be correct.\n\n## Contributing to heaptrack\n\nAs a FOSS project, we welcome contributions of any form. You can help improve the project by:\n\n- submitting bug reports at https://bugs.kde.org/enter_bug.cgi?product=Heaptrack\n- contributing patches via https://invent.kde.org/sdk/heaptrack\n- translating the GUI with the help of https://l10n.kde.org/\n\nWhen submitting bug reports, you can anonymize your data with the `tools/anonymize` script:\n\n    tools/anonymize heaptrack.APP.PID.gz heaptrack.bug_report_data.gz\n\n## Known bugs and limitations\n\n### Issues with old gold linker\n\nLibunwind may produce bogus backtraces when unwinding from code linked with old versions of the gold linker.\nIn such cases, recording with heaptrack seems to work and produces data files. But parsing these data files\nwith heaptrack_gui will often lead to out-of-memory crashes. Looking at the data with heaptrack_print, one\nwill see garbage backtraces that are completely broken.\n\nIf you encounter such issues, try to relink your application and also libunwind with `ld.bfd` instead of `ld.gold`.\nYou can see if you are affected by running the libunwind unit tests via `make check`. But do note that you\nneed to relink your application too, not only libunwind.\n\n### Executables built with ASAN (Address Sanitizer)\n\nIf you run heaptrack on an application built with ASAN, you'll likely get this fatal error on startup:\n\n    ASan runtime does not come first in initial library list [...]\n\nThe solution is to pass the `--asan` flag to heaptrack.\nNote: this only work for binaries built with `gcc` (i.e. those which link to `libasan.so`).\nBinaries built with `clang`'s ASAN enabled are not supported at the moment.\n\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "format_sources",
          "type": "blob",
          "size": 0.43359375,
          "content": "# clang-format's assume-filename seems to be broken\n# we must not specify the path to $TMPFILE directly, as clang-format would then\n# look in that folder for the config file. Instead, we want it to use the current\n# CWD which can be achieved by piping in the file. But then we need to overwrite\n# the original file again, which can be done with sponge easily\nsrc/*.cpp src/*.h tests/*.h tests/*.cpp : clang-format < $TMPFILE | sponge $TMPFILE\n\n"
        },
        {
          "name": "heaptrack.kdev4",
          "type": "blob",
          "size": 0.048828125,
          "content": "[Project]\nManager=KDevCMakeManager\nName=heaptrack\n"
        },
        {
          "name": "logo.png",
          "type": "blob",
          "size": 3.029296875,
          "content": null
        },
        {
          "name": "po",
          "type": "tree",
          "content": null
        },
        {
          "name": "screenshots",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}