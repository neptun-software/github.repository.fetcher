{
  "metadata": {
    "timestamp": 1736565879222,
    "page": 836,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "kokkos/kokkos",
      "stars": 2064,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".appveyor.yml",
          "type": "blob",
          "size": 0.3486328125,
          "content": "image:\n  - Visual Studio 2019\nclone_folder: c:\\projects\\source\nbuild_script:\n- cmd: >-\n    mkdir build &&\n    cd build &&\n    cmake c:\\projects\\source -DKokkos_ENABLE_IMPL_MDSPAN=OFF -DKokkos_ENABLE_TESTS=ON -DCMAKE_CXX_FLAGS=\"/W0 /EHsc\" -DKokkos_ENABLE_DEPRECATED_CODE_4=ON &&\n    cmake --build . --target install &&\n    ctest -C Debug --output-on-failure\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.1962890625,
          "content": "#Official Tool: clang-format version 16.0.0\nBasedOnStyle: google\nSortIncludes: false\nAlignConsecutiveAssignments: true\nAllowShortCaseLabelsOnASingleLine: true\nAllowShortIfStatementsOnASingleLine: true\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 1.091796875,
          "content": "Checks: >\n  -*,\n  bugprone-*,\n  -bugprone-argument-comment,\n  -bugprone-branch-clone,\n  -bugprone-easily-swappable-parameters,\n  -bugprone-exception-escape,\n  -bugprone-forwarding-reference-overload,\n  -bugprone-inc-dec-in-conditions,\n  -bugprone-integer-division,\n  -bugprone-macro-parentheses,\n  -bugprone-misplaced-widening-cast,\n  -bugprone-multi-level-implicit-pointer-conversion,\n  -bugprone-narrowing-conversions,\n  -bugprone-non-zero-enum-to-bool-conversion,\n  -bugprone-reserved-identifier,\n  -bugprone-return-const-ref-from-parameter,\n  -bugprone-signed-char-misuse,\n  -bugprone-sizeof-expression,\n  -bugprone-suspicious-include,\n  -bugprone-suspicious-memory-comparison,\n  -bugprone-suspicious-string-compare,\n  -bugprone-unchecked-optional-access,\n  -bugprone-unhandled-exception-at-new,\n  -bugprone-unhandled-self-assignment,\n  -bugprone-unused-raii,\n  -bugprone-use-after-move,\n  cppcoreguidelines-pro-type-cstyle-cast,\n  modernize-type-traits,\n  modernize-use-nullptr,\n  modernize-use-using,\n  kokkos-*\n\nFormatStyle: file\nHeaderFilterRegex: '(algorithms|benchmarks|containers|core|example|simd).*\\.hpp'\n"
        },
        {
          "name": ".cmake-format.py",
          "type": "blob",
          "size": 0.9931640625,
          "content": "# -----------------------------\n# Options affecting formatting.\n# -----------------------------\nwith section(\"format\"):\n\n  # How wide to allow formatted cmake files\n  line_width = 120\n\n  # If an argument group contains more than this many sub-groups (parg or kwarg\n  # groups) then force it to a vertical layout.\n  max_subgroups_hwrap = 3\n\n  # If a statement is wrapped to more than one line, than dangle the closing\n  # parenthesis on its own line.\n  dangle_parens = True\n\n  # If the trailing parenthesis must be 'dangled' on its on line, then align it\n  # to this reference: `prefix`: the start of the statement,  `prefix-indent`:\n  # the start of the statement, plus one indentation  level, `child`: align to\n  # the column of the arguments\n  dangle_align = 'prefix'\n\n# ------------------------------------------------\n# Options affecting comment reflow and formatting.\n# ------------------------------------------------\nwith section(\"markup\"):\n  # enable comment markup parsing and reflow\n  enable_markup = False\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.2373046875,
          "content": "# Formatted CMake files with cmake-format\n0247634f35e2f9e6b9dec3c80cae567b15027554\n# Moved to clang-format-16\n60fb9cc94b40e698cbc3278c5538f58dee721276\n# Formatted the entire codebase with ClangFormat 8\n77d8965fa2b123e5172ac5ea361e731f7fc52fc8\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1689453125,
          "content": ".clang* export-ignore\n.cmake* export-ignore\n.git* export-ignore\n.jenkins* export-ignore\n.appveyor.yml export-ignore\nscripts/ export-ignore\nLICENSE_FILE_HEADER export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2744140625,
          "content": "# Standard ignores\n*~\n*.pyc\n\\#*#\n.#*\n.*.swp\n.cproject\n.project\ntesting/\n.settings/\n/.vs\n/out/build\n/CMakeSettings.json\n/out/mytest\nCMakeUserPresets.json\n\n# build directories in source tree\n/build*\n\n# IDE-specific files/folders\n## VSCode\n/.vscode\n## QtCreator\n/CMakeLists.txt.user*\n"
        },
        {
          "name": ".gitlab",
          "type": "tree",
          "content": null
        },
        {
          "name": ".jenkins",
          "type": "blob",
          "size": 30.9306640625,
          "content": "pipeline {\n    agent none\n\n    environment {\n        CCACHE_DIR = '/tmp/ccache'\n        CCACHE_MAXSIZE = '5G'\n        CCACHE_CPP2 = 'true'\n    }\n\n    options {\n        disableConcurrentBuilds(abortPrevious: true)\n        timeout(time: 6, unit: 'HOURS')\n    }\n\n    triggers {\n        issueCommentTrigger('.*test this please.*')\n    }\n\n    stages {\n        stage('Clang-Format') {\n            agent {\n                dockerfile {\n                    filename 'Dockerfile.clang'\n                    dir 'scripts/docker'\n                    label 'nvidia-docker || docker'\n                    args '-v /tmp/ccache.kokkos:/tmp/ccache'\n                }\n            }\n            steps {\n                sh './scripts/docker/check_format_cpp.sh'\n            }\n        }\n        stage('Build-1') {\n            parallel {\n                stage('GCC-8.4.0') {\n                    agent {\n                        dockerfile {\n                            filename 'Dockerfile.gcc'\n                            dir 'scripts/docker'\n                            label 'docker'\n                        }\n                    }\n                    environment {\n                        OMP_NUM_THREADS = 8\n                        OMP_NESTED = 'true'\n                        OMP_MAX_ACTIVE_LEVELS = 3\n                        OMP_PROC_BIND = 'true'\n                    }\n                    steps {\n                        sh '''rm -rf build && mkdir -p build && cd build && \\\n                              cmake \\\n                                -DCMAKE_BUILD_TYPE=Release \\\n                                -DCMAKE_CXX_STANDARD=17 \\\n                                -DCMAKE_CXX_FLAGS=-Werror \\\n                                -DKokkos_ARCH_NATIVE=ON \\\n                                -DKokkos_ENABLE_COMPILER_WARNINGS=ON \\\n                                -DKokkos_ENABLE_DEPRECATED_CODE_4=ON \\\n                                -DKokkos_ENABLE_TESTS=ON \\\n                                -DKokkos_ENABLE_BENCHMARKS=ON \\\n                                -DKokkos_ENABLE_OPENMP=ON \\\n                                -DKokkos_ENABLE_LIBDL=OFF \\\n                                -DKokkos_ENABLE_LIBQUADMATH=ON \\\n                                -DKokkos_ENABLE_SERIAL=ON \\\n                              .. && \\\n                              make -j8 && ctest --no-compress-output -T Test --verbose && gcc -I$PWD/../core/src/ ../core/unit_test/tools/TestCInterface.c'''\n                    }\n                    post {\n                        always {\n                            xunit([CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)])\n                        }\n                    }\n                }\n                stage('HIP-ROCm-5.7-C++20') {\n                    agent {\n                        dockerfile {\n                            filename 'Dockerfile.hipcc'\n                            dir 'scripts/docker'\n                            additionalBuildArgs '--build-arg BASE=rocm/dev-ubuntu-22.04:5.7.1-complete@sha256:fc6abb843a4cb2b3e5d8e9225ed0db1450e063dbcc347f44b43252264134485d'\n                            label 'rocm-docker'\n                            args '-v /tmp/ccache.kokkos:/tmp/ccache --device=/dev/kfd --device=/dev/dri --security-opt seccomp=unconfined --group-add video --env HIP_VISIBLE_DEVICES=$HIP_VISIBLE_DEVICES'\n                        }\n                    }\n                    steps {\n                        sh 'ccache --zero-stats'\n                        sh '''rm -rf build && mkdir -p build && cd build && \\\n                              cmake \\\n                                -DBUILD_SHARED_LIBS=ON \\\n                                -DCMAKE_BUILD_TYPE=RelWithDebInfo \\\n                                -DCMAKE_CXX_COMPILER=hipcc \\\n                                -DCMAKE_CXX_FLAGS=\"-Werror -Wno-unused-command-line-argument\" \\\n                                -DCMAKE_CXX_STANDARD=20 \\\n                                -DKokkos_ARCH_NATIVE=ON \\\n                                -DKokkos_ENABLE_COMPILER_WARNINGS=ON \\\n                                -DKokkos_ENABLE_DEPRECATED_CODE_4=ON \\\n                                -DKokkos_ENABLE_TESTS=ON \\\n                                -DKokkos_ENABLE_BENCHMARKS=ON \\\n                                -DKokkos_ENABLE_HIP=ON \\\n                              .. && \\\n                              make -j8 && ctest --no-compress-output -T Test --verbose'''\n                    }\n                    post {\n                        always {\n                            sh 'ccache --show-stats'\n                            xunit([CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)])\n                        }\n                    }\n                }\n                stage('CUDA-11.0-NVCC-RDC') {\n                    agent {\n                        dockerfile {\n                            filename 'Dockerfile.nvcc'\n                            dir 'scripts/docker'\n                            additionalBuildArgs '--build-arg BASE=nvcr.io/nvidia/cuda:11.0.3-devel-ubuntu20.04@sha256:10ab0f09fcdc796b4a2325ef1bce8f766f4a3500eab5a83780f80475ae26c7a6 --build-arg ADDITIONAL_PACKAGES=\"g++-8 gfortran clang\" --build-arg CMAKE_VERSION=3.17.3'\n                            label 'nvidia-docker && (volta || ampere)'\n                            args '-v /tmp/ccache.kokkos:/tmp/ccache --env NVIDIA_VISIBLE_DEVICES=$NVIDIA_VISIBLE_DEVICES'\n                        }\n                    }\n                    environment {\n                        OMP_NUM_THREADS = 8\n                        // Nested OpenMP does not work for this configuration,\n                        // so disabling it\n                        OMP_MAX_ACTIVE_LEVELS = 1\n                        OMP_PLACES = 'threads'\n                        OMP_PROC_BIND = 'spread'\n                        NVCC_WRAPPER_DEFAULT_COMPILER = 'g++-8'\n                    }\n                    steps {\n                        sh 'ccache --zero-stats'\n                        sh '''rm -rf install && mkdir -p install && \\\n                              rm -rf build && mkdir -p build && cd build && \\\n                              cmake \\\n                                -DCMAKE_BUILD_TYPE=Release \\\n                                -DCMAKE_CXX_COMPILER=g++-8 \\\n                                -DCMAKE_CXX_FLAGS=-Werror \\\n                                -DCMAKE_CXX_STANDARD=17 \\\n                                -DKokkos_ARCH_NATIVE=ON \\\n                                -DKokkos_ENABLE_COMPILER_WARNINGS=ON \\\n                                -DKokkos_ENABLE_OPENMP=OFF \\\n                                -DKokkos_ENABLE_CUDA=ON \\\n                                -DKokkos_ENABLE_CUDA_LAMBDA=OFF \\\n                                -DKokkos_ENABLE_CUDA_UVM=ON \\\n                                -DKokkos_ENABLE_CUDA_RELOCATABLE_DEVICE_CODE=ON \\\n                                -DKokkos_ENABLE_DEPRECATED_CODE_4=ON \\\n                                \\\n                                -DCMAKE_INSTALL_PREFIX=${PWD}/../install \\\n                              .. && \\\n                              make -j8 install && \\\n                              cd .. && \\\n                              rm -rf build-tests && mkdir -p build-tests && cd build-tests && \\\n                              export CMAKE_PREFIX_PATH=${PWD}/../install && \\\n                              cmake \\\n                                -DCMAKE_BUILD_TYPE=Release \\\n                                -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \\\n                                -DCMAKE_CXX_COMPILER=$WORKSPACE/bin/nvcc_wrapper \\\n                                -DCMAKE_CXX_FLAGS=\"-Werror --Werror=all-warnings -Xcudafe --diag_suppress=940\" \\\n                                -DCMAKE_EXE_LINKER_FLAGS=\"-Xnvlink -suppress-stack-size-warning\" \\\n                                -DCMAKE_CXX_STANDARD=17 \\\n                                -DKokkos_INSTALL_TESTING=ON \\\n                              .. && \\\n                              make -j8 && ctest --no-compress-output -T Test --verbose && \\\n                              cd ../example/build_cmake_installed && \\\n                              rm -rf build && mkdir -p build && cd build && \\\n                              cmake \\\n                                -DCMAKE_CXX_COMPILER=g++-8 \\\n                                -DCMAKE_CXX_FLAGS=-Werror \\\n                                -DCMAKE_CXX_STANDARD=17 \\\n                              .. && \\\n                              make -j8 && ctest --verbose && \\\n                              cd ../.. && \\\n                              cmake -B build_cmake_installed_different_compiler/build -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_CXX_FLAGS=-Werror -DCMAKE_CXX_STANDARD=17 build_cmake_installed_different_compiler && \\\n                              cmake --build build_cmake_installed_different_compiler/build --target all && \\\n                              cmake --build build_cmake_installed_different_compiler/build --target test'''\n                    }\n                    post {\n                        always {\n                            sh 'ccache --show-stats'\n                            xunit([CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build-tests/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)])\n                        }\n                    }\n                }\n            }\n        }\n        stage('Build-2') {\n            parallel {\n                stage('OPENACC-NVHPC-CUDA-12.2') {\n                    agent {\n                        dockerfile {\n                            filename 'Dockerfile.nvhpc'\n                            dir 'scripts/docker'\n                            label 'nvidia-docker && volta && large_images'\n                            args '--env NVIDIA_VISIBLE_DEVICES=$NVIDIA_VISIBLE_DEVICES'\n                        }\n                    }\n                    environment {\n                        NVHPC_CUDA_HOME = '/opt/nvidia/hpc_sdk/Linux_x86_64/23.7/cuda/12.2'\n                    }\n                    steps {\n                        sh '''rm -rf build && mkdir -p build && cd build && \\\n                              /opt/cmake/bin/cmake \\\n                                -DCMAKE_CXX_COMPILER=nvc++ \\\n                                -DCMAKE_CXX_STANDARD=17 \\\n                                -DCMAKE_CXX_FLAGS=-Werror \\\n                                -DKokkos_ARCH_NATIVE=ON \\\n                                -DKokkos_ENABLE_COMPILER_WARNINGS=ON \\\n                                -DKokkos_ENABLE_TESTS=ON \\\n                                -DKokkos_ENABLE_OPENACC=ON \\\n                                -DKokkos_ARCH_VOLTA70=ON \\\n                              .. && \\\n                              make -j8 && ctest --no-compress-output -T Test --verbose'''\n                    }\n                    post {\n                        always {\n                            xunit([CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)])\n                        }\n                    }\n\n                }\n                stage('CUDA-12.2-NVHPC-AS-HOST-COMPILER') {\n                    agent {\n                        dockerfile {\n                            filename 'Dockerfile.nvhpc'\n                            dir 'scripts/docker'\n                            label 'nvidia-docker && large_images && volta'\n                            args '-v /tmp/ccache.kokkos:/tmp/ccache --env NVIDIA_VISIBLE_DEVICES=$NVIDIA_VISIBLE_DEVICES'\n                        }\n                    }\n                    environment {\n                        OMP_NUM_THREADS = 8\n                        // Nested OpenMP does not work for this configuration,\n                        // so disabling it\n                        OMP_MAX_ACTIVE_LEVELS = 1\n                        OMP_PLACES = 'threads'\n                        OMP_PROC_BIND = 'spread'\n                        NVHPC_CUDA_HOME = '/opt/nvidia/hpc_sdk/Linux_x86_64/23.7/cuda/12.2'\n                    }\n                    steps {\n                        sh '''rm -rf build && mkdir -p build && cd build && \\\n                              /opt/cmake/bin/cmake \\\n                                -DCMAKE_BUILD_TYPE=RelWithDebInfo \\\n                                -DCMAKE_CXX_COMPILER=nvc++ \\\n                                -DCMAKE_CXX_STANDARD=17 \\\n                                -DCMAKE_CXX_FLAGS=\"-Werror --diag_suppress=implicit_return_from_non_void_function\" \\\n                                -DKokkos_ARCH_NATIVE=ON \\\n                                -DKokkos_ENABLE_COMPILER_WARNINGS=ON \\\n                                -DKokkos_ENABLE_DEPRECATED_CODE_4=OFF \\\n                                -DKokkos_ENABLE_TESTS=ON \\\n                                -DKokkos_ENABLE_CUDA=ON \\\n                                -DKokkos_ENABLE_OPENMP=ON \\\n                              .. && \\\n                              make -j8 && ctest --no-compress-output -T Test --verbose'''\n                    }\n                    post {\n                        always {\n                            xunit([CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)])\n                        }\n                    }\n\n                }\n                stage('SYCL-OneAPI') {\n                    agent {\n                        dockerfile {\n                            filename 'Dockerfile.sycl'\n                            dir 'scripts/docker'\n                            label 'nvidia-docker && ampere'\n                            args '-v /tmp/ccache.kokkos:/tmp/ccache'\n                        }\n                    }\n                    steps {\n                        sh 'ccache --zero-stats'\n                        sh '''rm -rf build && mkdir -p build && cd build && \\\n                              cmake \\\n                                -DCMAKE_BUILD_TYPE=Release \\\n                                -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \\\n                                -DCMAKE_CXX_COMPILER=clang++ \\\n                                -DCMAKE_CXX_FLAGS=\"-fsycl-device-code-split=per_kernel -Wno-deprecated-declarations -Werror -Wno-gnu-zero-variadic-macro-arguments -Wno-unknown-cuda-version -Wno-sycl-target\" \\\n                                -DCMAKE_PREFIX_PATH=\"$ONE_DPL_DIR\" \\\n                                -DKOKKOS_IMPL_SYCL_DEVICE_GLOBAL_SUPPORTED=0 \\\n                                -DKokkos_ARCH_NATIVE=ON \\\n                                -DKokkos_ARCH_AMPERE80=ON \\\n                                -DKokkos_ENABLE_COMPILER_WARNINGS=ON \\\n                                -DKokkos_ENABLE_DEPRECATED_CODE_4=OFF \\\n                                -DKokkos_ENABLE_EXAMPLES=ON \\\n                                -DKokkos_ENABLE_TESTS=ON \\\n                                -DKokkos_ENABLE_BENCHMARKS=ON \\\n                                -DKokkos_ENABLE_SYCL=ON \\\n                                -DKokkos_ENABLE_SYCL_RELOCATABLE_DEVICE_CODE=ON \\\n                                -DKokkos_ENABLE_UNSUPPORTED_ARCHS=ON \\\n                                -DCMAKE_CXX_STANDARD=17 \\\n                              .. && \\\n                              make -j8 && ctest --no-compress-output -T Test --verbose'''\n                    }\n                    post {\n                        always {\n                            sh 'ccache --show-stats'\n                            xunit([CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)])\n                        }\n                    }\n                }\n                stage('HIP-ROCm-5.3') {\n                    agent {\n                        dockerfile {\n                            filename 'Dockerfile.hipcc'\n                            dir 'scripts/docker'\n                            additionalBuildArgs '--build-arg BASE=rocm/dev-ubuntu-20.04:5.3.3-complete@sha256:bac114b9d09e61d88b45fbeb40a15a315c2a78a203223c9b4ed7263b05ff3977'\n                            label 'rocm-docker '\n                            args '-v /tmp/ccache.kokkos:/tmp/ccache --device=/dev/kfd --device=/dev/dri --security-opt seccomp=unconfined --group-add video --env HIP_VISIBLE_DEVICES=$HIP_VISIBLE_DEVICES'\n                        }\n                    }\n                    environment {\n                        OMP_NUM_THREADS = 8\n                        OMP_MAX_ACTIVE_LEVELS = 3\n                        OMP_PLACES = 'threads'\n                        OMP_PROC_BIND = 'spread'\n                    }\n                    steps {\n                        sh 'ccache --zero-stats'\n                        sh 'echo \"/opt/rocm/llvm/lib\" > /etc/ld.so.conf.d/llvm.conf && ldconfig'\n                        sh '''rm -rf build && mkdir -p build && cd build && \\\n                              cmake \\\n                                -DCMAKE_BUILD_TYPE=Debug \\\n                                -DCMAKE_CXX_COMPILER=hipcc \\\n                                -DCMAKE_CXX_FLAGS=\"-Werror -Wno-unused-command-line-argument -DNDEBUG\" \\\n                                -DCMAKE_CXX_STANDARD=17 \\\n                                -DKokkos_ARCH_NATIVE=ON \\\n                                -DKokkos_ENABLE_COMPILER_WARNINGS=ON \\\n                                -DKokkos_ENABLE_DEPRECATED_CODE_4=OFF \\\n                                -DKokkos_ENABLE_TESTS=ON \\\n                                -DKokkos_ENABLE_BENCHMARKS=ON \\\n                                -DKokkos_ENABLE_HIP=ON \\\n                                -DKokkos_ENABLE_OPENMP=ON \\\n                                -DKokkos_ENABLE_IMPL_MDSPAN=OFF \\\n                                -DKokkos_ENABLE_HIP_MULTIPLE_KERNEL_INSTANTIATIONS=ON \\\n                              .. && \\\n                              make -j8 && ctest --no-compress-output -T Test --verbose'''\n                    }\n                    post {\n                        always {\n                            sh 'ccache --show-stats'\n                            xunit([CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)])\n                        }\n                    }\n                }\n                stage('HIP-ROCm-6.0-amdclang') {\n                    agent {\n                        dockerfile {\n                            filename 'Dockerfile.hipcc'\n                            dir 'scripts/docker'\n                            additionalBuildArgs '--build-arg BASE=rocm/dev-ubuntu-22.04:6.0-complete@sha256:29582288ec330d1c915091eb2be7857327fe71a73a174c4173b0bb4794dce7c8'\n                            label 'rocm-docker'\n                            args '-v /tmp/ccache.kokkos:/tmp/ccache --device=/dev/kfd --device=/dev/dri --security-opt seccomp=unconfined --group-add video --env HIP_VISIBLE_DEVICES=$HIP_VISIBLE_DEVICES'\n                        }\n                    }\n                    environment {\n                        // FIXME Test returns a wrong value\n                        GTEST_FILTER = '-hip_hostpinned.view_allocation_large_rank'\n                    }\n                    steps {\n                        sh 'ccache --zero-stats'\n                        sh '''rm -rf build && mkdir -p build && cd build && \\\n                              cmake \\\n                                -DBUILD_SHARED_LIBS=ON \\\n                                -DCMAKE_BUILD_TYPE=RelWithDebInfo \\\n                                -DCMAKE_CXX_COMPILER=/opt/rocm/llvm/bin/amdclang++ \\\n                                -DCMAKE_CXX_CLANG_TIDY=\"/opt/rocm/llvm/bin/clang-tidy;-warnings-as-errors=*\" \\\n                                -DCMAKE_PREFIX_PATH=/opt/rocm/lib \\\n                                -DCMAKE_CXX_FLAGS=\"-Werror -Wno-unused-command-line-argument\" \\\n                                -DKokkos_ARCH_NATIVE=ON \\\n                                -DKokkos_ENABLE_COMPILER_WARNINGS=ON \\\n                                -DKokkos_ENABLE_DEPRECATED_CODE_4=ON \\\n                                -DKokkos_ENABLE_TESTS=ON \\\n                                -DKokkos_ENABLE_BENCHMARKS=ON \\\n                                -DKokkos_ENABLE_HIP=ON \\\n                              .. && \\\n                              make -j8 && ctest --no-compress-output -T Test --verbose'''\n                    }\n                    post {\n                        always {\n                            sh 'ccache --show-stats'\n                            xunit([CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)])\n                        }\n                    }\n                }\n/*\n                stage('OPENMPTARGET-ROCm-5.2') {\n                    agent {\n                        dockerfile {\n                            filename 'Dockerfile.hipcc'\n                            dir 'scripts/docker'\n                            additionalBuildArgs '--build-arg BASE=rocm/dev-ubuntu-20.04:5.2'\n                            label 'rocm-docker && vega && AMD_Radeon_Instinct_MI60'\n                            args '-v /tmp/ccache.kokkos:/tmp/ccache --device=/dev/kfd --device=/dev/dri --security-opt seccomp=unconfined --group-add video --env HIP_VISIBLE_DEVICES=$HIP_VISIBLE_DEVICES'\n                        }\n                    }\n                    environment {\n                        OMP_NUM_THREADS = 8\n                        OMP_MAX_ACTIVE_LEVELS = 3\n                        OMP_PLACES = 'threads'\n                        OMP_PROC_BIND = 'spread'\n                        LC_ALL = 'C'\n                    }\n                    steps {\n                        sh 'ccache --zero-stats'\n                        sh 'echo \"/opt/rocm/llvm/lib\" > /etc/ld.so.conf.d/llvm.conf && ldconfig'\n                        sh '''rm -rf build && \\\n                              cmake \\\n                                -Bbuild \\\n                                -DCMAKE_BUILD_TYPE=Debug \\\n                                -DCMAKE_CXX_COMPILER=amdclang++ \\\n                                -DCMAKE_CXX_STANDARD=17 \\\n                                -DKokkos_ARCH_NATIVE=ON \\\n                                -DKokkos_ENABLE_COMPILER_WARNINGS=ON \\\n                                -DKokkos_ENABLE_DEPRECATED_CODE_4=OFF \\\n                                -DKokkos_ENABLE_TESTS=ON \\\n                                -DKokkos_ENABLE_BENCHMARKS=ON \\\n                                -DKokkos_ENABLE_OPENMPTARGET=ON \\\n                                -DKokkos_ENABLE_OPENMP=ON \\\n                                -DKokkos_ARCH_AMD_GFX906=ON \\\n                              && \\\n                              cmake --build build --parallel ${BUILD_JOBS} && \\\n                              cd build && ctest --no-compress-output -T Test --output-on-failure\n                        '''\n                    }\n                    post {\n                        always {\n                            sh 'ccache --show-stats'\n                        }\n                    }\n                }\n*/\n                stage('OPENMPTARGET-Clang') {\n                    agent {\n                        dockerfile {\n                            filename 'Dockerfile.openmptarget'\n                            dir 'scripts/docker'\n                            label 'nvidia-docker && volta'\n                            args '-v /tmp/ccache.kokkos:/tmp/ccache --env NVIDIA_VISIBLE_DEVICES=$NVIDIA_VISIBLE_DEVICES'\n                        }\n                    }\n                    steps {\n                        sh 'ccache --zero-stats'\n                        sh '''rm -rf build && mkdir -p build && cd build && \\\n                              cmake \\\n                                -DCMAKE_BUILD_TYPE=RelWithDebInfo \\\n                                -DCMAKE_CXX_COMPILER=clang++ \\\n                                -DCMAKE_CXX_FLAGS=\"-Wno-unknown-cuda-version -Werror -Wno-undefined-internal -Wno-pass-failed\" \\\n                                -DKokkos_ARCH_NATIVE=ON \\\n                                -DKokkos_ENABLE_COMPILER_WARNINGS=ON \\\n                                -DKokkos_ENABLE_DEPRECATED_CODE_4=ON \\\n                                -DKokkos_ENABLE_TESTS=ON \\\n                                -DKokkos_ENABLE_BENCHMARKS=ON \\\n                                -DKokkos_ENABLE_TUNING=ON \\\n                                -DKokkos_ENABLE_OPENMPTARGET=ON \\\n                                -DKokkos_ARCH_VOLTA70=ON \\\n                                -DCMAKE_CXX_STANDARD=17 \\\n                              .. && \\\n                              make -j8 && ctest --no-compress-output -T Test --verbose'''\n                    }\n                    post {\n                        always {\n                            sh 'ccache --show-stats'\n                            xunit([CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)])\n                        }\n                    }\n                }\n                stage('CUDA-11.0.3-Clang-Tidy') {\n                    agent {\n                        dockerfile {\n                            filename 'Dockerfile.kokkosllvmproject'\n                            dir 'scripts/docker'\n                            label 'nvidia-docker && volta'\n                            args '-v /tmp/ccache.kokkos:/tmp/ccache --env NVIDIA_VISIBLE_DEVICES=$NVIDIA_VISIBLE_DEVICES'\n                        }\n                    }\n                    steps {\n                        sh 'ccache --zero-stats'\n                        sh '''rm -rf build && mkdir -p build && cd build && \\\n                              cmake \\\n                                -DCMAKE_BUILD_TYPE=Release \\\n                                -DCMAKE_CXX_CLANG_TIDY=\"clang-tidy;-warnings-as-errors=*\" \\\n                                -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \\\n                                -DCMAKE_CXX_COMPILER=clang++ \\\n                                -DCMAKE_CXX_FLAGS=\"-Werror -Wno-unknown-cuda-version\" \\\n                                -DCMAKE_CXX_STANDARD=17 \\\n                                -DKokkos_ARCH_NATIVE=ON \\\n                                -DKokkos_ENABLE_COMPILER_WARNINGS=ON \\\n                                -DKokkos_ENABLE_DEPRECATED_CODE_4=ON \\\n                                -DKokkos_ENABLE_TESTS=ON \\\n                                -DKokkos_ENABLE_BENCHMARKS=ON \\\n                                -DKokkos_ENABLE_CUDA=ON \\\n                                -DKokkos_ENABLE_TUNING=ON \\\n                                -DKokkos_ARCH_VOLTA70=ON \\\n                              .. && \\\n                              make -j8 && ctest --no-compress-output -T Test --verbose'''\n                    }\n                    post {\n                        always {\n                            sh 'ccache --show-stats'\n                            xunit([CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)])\n                        }\n                    }\n                }\n                stage('CUDA-11.6-NVCC-DEBUG') {\n                    agent {\n                        dockerfile {\n                            filename 'Dockerfile.nvcc'\n                            dir 'scripts/docker'\n                            additionalBuildArgs '--build-arg BASE=nvcr.io/nvidia/cuda:11.6.2-devel-ubuntu20.04@sha256:d95d54bc231f8aea7fda79f60da620324584b20ed31a8ebdb0686cffd34dd405'\n                            label 'nvidia-docker && (volta || ampere)'\n                            args '-v /tmp/ccache.kokkos:/tmp/ccache --env NVIDIA_VISIBLE_DEVICES=$NVIDIA_VISIBLE_DEVICES'\n                        }\n                    }\n                    steps {\n                        sh 'ccache --zero-stats'\n                        sh '''rm -rf build && mkdir -p build && cd build && \\\n                              cmake \\\n                                -DBUILD_SHARED_LIBS=ON \\\n                                -DCMAKE_BUILD_TYPE=Debug \\\n                                -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \\\n                                -DCMAKE_CXX_COMPILER=$WORKSPACE/bin/nvcc_wrapper \\\n                                -DCMAKE_CXX_FLAGS=\"-Werror -Werror=all-warnings\" \\\n                                -DCMAKE_CXX_STANDARD=17 \\\n                                -DKokkos_ARCH_NATIVE=ON \\\n                                -DKokkos_ENABLE_COMPILER_WARNINGS=ON \\\n                                -DKokkos_ENABLE_DEBUG=ON \\\n                                -DKokkos_ENABLE_DEBUG_BOUNDS_CHECK=ON \\\n                                -DKokkos_ENABLE_DEPRECATED_CODE_4=OFF \\\n                                -DKokkos_ENABLE_TESTS=ON \\\n                                -DKokkos_ENABLE_BENCHMARKS=ON \\\n                                -DKokkos_ENABLE_CUDA=ON \\\n                                -DKokkos_ENABLE_LIBDL=OFF \\\n                                -DKokkos_ENABLE_OPENMP=ON \\\n                                -DKokkos_ENABLE_IMPL_MDSPAN=OFF \\\n                                -DKokkos_ENABLE_IMPL_CUDA_MALLOC_ASYNC=ON \\\n                              .. && \\\n                              make -j8 && ctest --no-compress-output -T Test --verbose && \\\n                              cd ../example/build_cmake_in_tree && \\\n                              rm -rf build && mkdir -p build && cd build && \\\n                              cmake -DCMAKE_CXX_STANDARD=17 .. && make -j8 && ctest --verbose'''\n                    }\n                    post {\n                        always {\n                            sh 'ccache --show-stats'\n                            xunit([CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)])\n                        }\n                    }\n                }\n                stage('CUDA-11.7-NVCC') {\n                    agent {\n                        dockerfile {\n                            filename 'Dockerfile.nvcc'\n                            dir 'scripts/docker'\n                            additionalBuildArgs '--build-arg BASE=nvcr.io/nvidia/cuda:11.7.1-devel-ubuntu20.04@sha256:fc997521e612899a01dce92820f5f5a201dd943ebfdc3e49ba0706d491a39d2d'\n                            label 'nvidia-docker && volta'\n                            args '-v /tmp/ccache.kokkos:/tmp/ccache --env NVIDIA_VISIBLE_DEVICES=$NVIDIA_VISIBLE_DEVICES'\n                        }\n                    }\n                    steps {\n                        sh 'ccache --zero-stats'\n                        sh '''rm -rf build && mkdir -p build && cd build && \\\n                              ../gnu_generate_makefile.bash \\\n                                --with-options=compiler_warnings \\\n                                --cxxflags=\"-Werror -Werror=all-warnings\" \\\n                                --cxxstandard=c++17 \\\n                                --with-cuda \\\n                                --with-cuda-options=enable_lambda \\\n                                --arch=Volta70 \\\n                              && \\\n                              make test -j8'''\n                    }\n                    post {\n                        always {\n                            sh 'ccache --show-stats'\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n"
        },
        {
          "name": ".jenkins_nightly",
          "type": "blob",
          "size": 8.9189453125,
          "content": "pipeline {\n    agent none\n\n    options {\n        timeout(time: 6, unit: 'HOURS')\n    }\n\n    stages {\n        stage('Build') {\n            parallel {\n                stage('spack-serial') {\n                    agent {\n                        docker {\n                          image 'ubuntu:22.04'\n                          label 'docker'\n                        }\n                    }\n                    steps {\n                        sh '''\n                          DEBIAN_FRONTEND=noninteractive && \\\n                          apt-get update && apt-get upgrade -y && apt-get install -y \\\n                          build-essential \\\n                          wget \\\n                          git \\\n                          bc \\\n                          python3-dev \\\n                          && \\\n                          apt-get clean && rm -rf /var/lib/apt/lists/*\n\n                          rm -rf spack && \\\n                          git clone https://github.com/spack/spack.git && \\\n                          . ./spack/share/spack/setup-env.sh && \\\n                          spack install kokkos@develop+tests && \\\n                          spack load cmake && \\\n                          spack test run kokkos && \\\n                          spack test results -l\n                          '''\n                    }      \n                }   \n                stage('spack-cuda') {\n                    agent {\n                        docker {\n                          image 'nvidia/cuda:12.1.0-devel-ubuntu22.04'\n                          label 'nvidia-docker && ampere'\n                        }\n                    }\n                    steps {\n                        sh '''\n                          DEBIAN_FRONTEND=noninteractive && \\\n                          apt-get update && apt-get upgrade -y && apt-get install -y \\\n                          build-essential \\\n                          wget \\\n                          git \\\n                          bc \\\n                          python3-dev \\\n                          gfortran \\\n                          && \\\n                          apt-get clean && rm -rf /var/lib/apt/lists/*\n\n                          rm -rf spack && \\\n                          git clone https://github.com/spack/spack.git && \\\n                          . ./spack/share/spack/setup-env.sh && \\\n                          spack install kokkos@develop+cuda+wrapper+tests cuda_arch=80 ^cuda@12.1.0 && \\\n                          spack load cmake  && \\\n                          spack load kokkos-nvcc-wrapper && \\\n                          spack load cuda && \\\n                          spack load kokkos && \\\n                          spack test run kokkos && \\\n                          spack test results -l\n                          '''\n                    }      \n                }   \n                stage('GCC-14') {\n                    agent {\n                        docker {\n                            image 'gcc:14.1'\n                            label 'docker'\n                        }\n                    }\n                    steps {\n                        sh '''\n                          wget https://github.com/Kitware/CMake/releases/download/v3.30.0/cmake-3.30.0-linux-x86_64.sh && \\\n                          chmod +x cmake-3.30.0-linux-x86_64.sh && ./cmake-3.30.0-linux-x86_64.sh --skip-license --prefix=/usr\n\n                          rm -rf build && mkdir -p build && cd build && \\\n                          cmake \\\n                            -DCMAKE_BUILD_TYPE=Release \\\n                            -DCMAKE_CXX_STANDARD=26 \\\n                            -DCMAKE_CXX_FLAGS=-Werror \\\n                            -DKokkos_ARCH_NATIVE=ON \\\n                            -DKokkos_ENABLE_COMPILER_WARNINGS=ON \\\n                            -DKokkos_ENABLE_BENCHMARKS=ON \\\n                            -DKokkos_ENABLE_EXAMPLES=ON \\\n                            -DKokkos_ENABLE_TESTS=ON \\\n                            -DKokkos_ENABLE_DEPRECATED_CODE_4=ON \\\n                            -DKokkos_ENABLE_SERIAL=ON \\\n                          .. && \\\n                          make -j8 && ctest --no-compress-output -T Test --verbose\n                          '''\n                    }\n                    post {\n                        always {\n                            xunit([CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)])\n                        }\n                    }\n                }\n                stage('HIP-ROCM-6.3-MI100-RDC') {\n                    agent {\n                        dockerfile {\n                            filename 'Dockerfile.hipcc'\n                            dir 'scripts/docker'\n                            additionalBuildArgs '--build-arg BASE=rocm/dev-ubuntu-24.04:6.3.1-complete'\n                            label 'rocm-docker && AMD_Radeon_Instinct_MI100'\n                            args '-v /tmp/ccache.kokkos:/tmp/ccache --device=/dev/kfd --device=/dev/dri --security-opt seccomp=unconfined --group-add video --env HIP_VISIBLE_DEVICES=$HIP_VISIBLE_DEVICES'\n                        }\n                    }\n                    environment {\n                        // FIXME Test returns a wrong value\n                        GTEST_FILTER = '-hip_hostpinned.view_allocation_large_rank'\n                    }\n                    steps {\n                        sh 'ccache --zero-stats'\n                        sh '''rm -rf build && mkdir -p build && cd build && \\\n                              cmake \\\n                                -DCMAKE_BUILD_TYPE=RelWithDebInfo \\\n                                -DCMAKE_CXX_COMPILER=hipcc \\\n                                -DCMAKE_CXX_FLAGS=\"-Werror -Wno-unused-command-line-argument\" \\\n                                -DKokkos_ENABLE_HIP_RELOCATABLE_DEVICE_CODE=ON \\\n                                -DKokkos_ARCH_NATIVE=ON \\\n                                -DKokkos_ENABLE_COMPILER_WARNINGS=ON \\\n                                -DKokkos_ENABLE_DEPRECATED_CODE_4=ON \\\n                                -DKokkos_ENABLE_TESTS=ON \\\n                                -DKokkos_ENABLE_BENCHMARKS=ON \\\n                                -DKokkos_ENABLE_EXAMPLES=ON \\\n                                -DKokkos_ENABLE_HIP=ON \\\n                              .. && \\\n                              make -j8 && ctest --no-compress-output -T Test --verbose'''\n                    }\n                    post {\n                        always {\n                            sh 'ccache --show-stats'\n                            xunit([CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)])\n                        }\n                    }\n                }\n                stage('HIP-ROCM-6.3-MI210-CXX23') {\n                    agent {\n                        dockerfile {\n                            filename 'Dockerfile.hipcc'\n                            dir 'scripts/docker'\n                            additionalBuildArgs '--build-arg BASE=rocm/dev-ubuntu-24.04:6.3.1-complete --build-arg CMAKE_VERSION=3.31.3'\n                            label 'rocm-docker && AMD_Radeon_Instinct_MI210'\n                            args '-v /tmp/ccache.kokkos:/tmp/ccache --device=/dev/kfd --device=/dev/dri --security-opt seccomp=unconfined --group-add video --env HIP_VISIBLE_DEVICES=$HIP_VISIBLE_DEVICES'\n                        }\n                    }\n                    environment {\n                        // FIXME Test returns a wrong value\n                        GTEST_FILTER = '-hip_hostpinned.view_allocation_large_rank'\n                    }\n                    steps {\n                        sh 'ccache --zero-stats'\n                        sh '''rm -rf build && mkdir -p build && cd build && \\\n                              cmake \\\n                                -DCMAKE_BUILD_TYPE=RelWithDebInfo \\\n                                -DCMAKE_CXX_COMPILER=hipcc \\\n                                -DCMAKE_CXX_FLAGS=\"-Werror -Wno-unused-command-line-argument\" \\\n                                -DCMAKE_CXX_STANDARD=23 \\\n                                -DKokkos_ARCH_NATIVE=ON \\\n                                -DKokkos_ENABLE_COMPILER_WARNINGS=ON \\\n                                -DKokkos_ENABLE_DEPRECATED_CODE_4=ON \\\n                                -DKokkos_ENABLE_TESTS=ON \\\n                                -DKokkos_ENABLE_BENCHMARKS=ON \\\n                                -DKokkos_ENABLE_HIP=ON \\\n                              .. && \\\n                              make -j8 && ctest --no-compress-output -T Test --verbose'''\n                    }\n                    post {\n                        always {\n                            sh 'ccache --show-stats'\n                            xunit([CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)])\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n"
        },
        {
          "name": "BUILD.md",
          "type": "blob",
          "size": 5.537109375,
          "content": "![Kokkos](https://avatars2.githubusercontent.com/u/10199860?s=200&v=4)\n\n# Installing and Using Kokkos\n\n## Kokkos Philosophy\nKokkos provides a modern CMake style build system.\nAs C++ continues to develop for C++20 and beyond, CMake is likely to provide the most robust support\nfor C++.  Applications heavily leveraging Kokkos are strongly encouraged to use a CMake build system.\n\nYou can either use Kokkos as an installed package (encouraged) or use Kokkos in-tree in your project.\nModern CMake is exceedingly simple at a high-level (with the devil in the details).\nOnce Kokkos is installed In your `CMakeLists.txt` simply use:\n````cmake\nfind_package(Kokkos REQUIRED)\n````\nThen for every executable or library in your project:\n````cmake\ntarget_link_libraries(myTarget Kokkos::kokkos)\n````\nThat's it! There is no checking Kokkos preprocessor, compiler, or linker flags.\nKokkos propagates all the necessary flags to your project.\nThis means not only is linking to Kokkos easy, but Kokkos itself can actually configure compiler and linker flags for *your*\nproject.\nWhen configuring your project just set:\n````bash\n> cmake ${srcdir} \\\n  -DKokkos_ROOT=${kokkos_install_prefix} \\\n  -DCMAKE_CXX_COMPILER=${compiler_used_to_build_kokkos}\n````\nNote: You may need the following if your project requires a minimum CMake version older than 3.12:\n````cmake\ncmake_policy(SET CMP0074 NEW)\n````\nIf building in-tree, there is no `find_package`. You can use `add_subdirectory(kokkos)` with the Kokkos source and again just link with `target_link_libraries(Kokkos::kokkos)`.\nThe examples in `examples/cmake_build_installed` and `examples/cmake_build_in_tree` can help get you started.\n\n\n## Configuring CMake\nA very basic installation of Kokkos is done with:\n````bash\n> cmake ${srcdir} \\\n -DCMAKE_CXX_COMPILER=g++ \\\n -DCMAKE_INSTALL_PREFIX=${kokkos_install_folder}\n````\nwhich builds and installed a default Kokkos when you run `make install`.\nThere are numerous device backends, options, and architecture-specific optimizations that can be configured, e.g.\n````bash\n> cmake ${srcdir} \\\n -DCMAKE_CXX_COMPILER=g++ \\\n -DCMAKE_INSTALL_PREFIX=${kokkos_install_folder} \\\n -DKokkos_ENABLE_OPENMP=ON\n````\nwhich activates the OpenMP backend. All of the options controlling device backends, options, architectures, and third-party libraries (TPLs) are given below.\n\nKokkos requires as a minimum C++17, however C++20 and C++23 are supported depending on the compiler.\n\nThe latest minimum compiler versions can be found in `cmake/kokkos_compiler_id.cmake`.\n\n## Known Issues<a name=\"KnownIssues\"></a>\n\n### Cray\n\n* The Cray compiler wrappers do static linking by default. This seems to break the Kokkos build. You will likely need to set the environment variable `CRAYPE_LINK_TYPE=dynamic` in order to link correctly. Kokkos warns during configure if this is missing.\n* The Cray compiler identifies to CMake as Clang, but it sometimes has its own flags that differ from Clang. We try to include all exceptions, but flag errors may occur in which a Clang-specific flag is passed that the Cray compiler does not recognize.\n\n### Fortran\n\n* In a mixed C++/Fortran code, CMake will use the C++ linker by default. If you override this behavior and use Fortran as the link language, the link may break because Kokkos adds linker flags expecting the linker to be C++. Prior to CMake 3.18, Kokkos has no way of detecting in downstream projects that the linker was changed to Fortran.  From CMake 3.18, Kokkos can use generator expressions to avoid adding flags when the linker is not C++. Note: Kokkos will not add any linker flags in this Fortran case. The user will be entirely on their own to add the appropriate linker flags.\n\n## Spack\nAn alternative to manually building with the CMake is to use the Spack package manager.\nMake sure you have downloaded [Spack](https://github.com/spack/spack).\nThe easiest way to configure the Spack environment is:\n````bash\n> source spack/share/spack/setup-env.sh\n````\nwith other scripts available for other shells.\nYou can display information about how to install packages with:\n````bash\n> spack info kokkos\nA basic installation would be done as:\n````bash\n> spack install kokkos\n````\nSpack allows options and and compilers to be tuned in the install command.\n````bash\n> spack install kokkos@3.0 %gcc@7.3.0 +openmp\n````\nThis example illustrates the three most common parameters to Spack:\n* Variants: specified with, e.g. `+openmp`, this activates (or deactivates with, e.g. `~openmp`) certain options.\n* Version:  immediately following `kokkos` the `@version` can specify a particular Kokkos to build\n* Compiler: a default compiler will be chosen if not specified, but an exact compiler version can be given with the `%`option.\n\nFor a complete list of Kokkos options, run:\n````bash\n> spack info kokkos\n````\nMore details can be found in the [Spack README](Spack.md)\n\n#### Spack Development\nSpack currently installs packages to a location determined by a unique hash. This hash name is not really \"human readable\".\nGenerally, Spack usage should never really require you to reference the computer-generated unique install folder.\nIf you must know, you can locate Spack Kokkos installations with:\n````bash\n> spack find -p kokkos ...\n````\nwhere `...` is the unique spec identifying the particular Kokkos configuration and version.\n\nA better way to use Spack for doing Kokkos development is the dev-build feature of Spack.\nFor dev-build details, consult the kokkos-spack repository [README](https://github.com/kokkos/kokkos-spack/blob/master/README.md).\n\n# Kokkos Keyword Listing\n\nPlease refer to our [wiki](https://kokkos.github.io/kokkos-core-wiki/keywords.html#cmake-keywords).\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 198.517578125,
          "content": "# CHANGELOG\n\n## 4.5.01\n\n[Full Changelog](https://github.com/kokkos/kokkos/compare/4.5.00...4.5.01)\n\n### Bug Fixes\n\n* Fix re-builds after cleaning the binary tree when doing `add_subdirectory` on the Kokkos source [\\#7557](https://github.com/kokkos/kokkos/pull/7557)\n* Update mdspan to include fix for submdspan and bracket operator with clang 15&16 [\\#7559](https://github.com/kokkos/kokkos/pull/7559)\n* Fix DynRankView performance regression by re-introducing shortcut operator() impls [\\#7606](https://github.com/kokkos/kokkos/pull/7606)\n* Add missing MI300A (`GFX942_APU`) option to Makefile build-system\n\n## 4.5.00\n\n[Full Changelog](https://github.com/kokkos/kokkos/compare/4.4.01...4.5.00)\n\n### Features\n\n* SYCL backend graduated to production ready\n* Introduce new `SequentialHostInit` view allocation property [\\#7229](https://github.com/kokkos/kokkos/pull/7229) (backported in 4.4.01)\n* Support building with Run-Time Type Information (RTTI) disabled\n* Add new `KOKKOS_RELOCATABLE_FUNCTION` function annotation macro [\\#5993](https://github.com/kokkos/kokkos/pull/5993)\n\n### Backend and Architecture Enhancements\n\n#### CUDA\n\n* Adding occupancy tuning for CUDA architectures [\\#6788](https://github.com/kokkos/kokkos/pull/6788)\n* By default disable `cudaMallocAsync` (i.e., revert the change made in version 4.2) [\\#7353](https://github.com/kokkos/kokkos/pull/7353)\n\n#### HIP\n\n* Add support for AMD Phoenix APUs with Radeon 740M/760M/780M/880M/890M [\\#7162](https://github.com/kokkos/kokkos/pull/7162)\n* Update maximum waves per CU values for consumer card [\\#7347](https://github.com/kokkos/kokkos/pull/7347)\n* Check that Kokkos is running on the architecture it was compiled for [\\#7379](https://github.com/kokkos/kokkos/pull/7379)\n* Add opt-in option to use `hipMallocAsync` instead of `hipMalloc` [\\#7324](https://github.com/kokkos/kokkos/pull/7324)\n* Introduce new architecture option `AMD_GFX942_APU` for MI300A [\\#7462](https://github.com/kokkos/kokkos/pull/7462)\n\n#### SYCL\n\n* Move the `SYCL` backend out of the `Experimental` namespace [\\#7171](https://github.com/kokkos/kokkos/pull/7171)\n* Introduce `KOKKOS_ENABLE_SYCL_RELOCATABLE_DEVICE_CODE` as CMake option [\\#5993](https://github.com/kokkos/kokkos/pull/5993)\n\n#### OpenACC\n\n* Add support for building with the Clacc compiler [\\#7198](https://github.com/kokkos/kokkos/pull/7198)\n* Workaround NVHPC collapse clause bug for `MDRangePolicy` [\\#7425](https://github.com/kokkos/kokkos/pull/7425)\n\n#### HPX\n\n* Implement `Experimental::partition_space` to produce truly independent execution spaces [\\#7287](https://github.com/kokkos/kokkos/pull/7287)\n\n#### Threads\n\n* Fix compilation for `parallel_reduce` `MDRange` with `Dynamic` scheduling [\\#7478](https://github.com/kokkos/kokkos/pull/7478)\n* Fix race conditions on ARM architectures [\\#7498](https://github.com/kokkos/kokkos/pull/7498)\n\n#### OpenMP\n\n* Fix run time behavior when compiling with `-fvisibility-hidden` [\\#7284](https://github.com/kokkos/kokkos/pull/7284) (backported in 4.4.01)\n* Fix linking with Cray Clang compiler [\\#7341](https://github.com/kokkos/kokkos/pull/7341)\n\n#### Serial\n\n* Allow `Kokkos_ENABLE_ATOMICS_BYPASS` to skip mutexes to remediate performance regression in 4.4 [\\#7369](https://github.com/kokkos/kokkos/pull/7369)\n\n### General Enhancements\n\n* Improve `View` initialization/destruction for non-scalar trivial and trivially-destructible types [\\#7219](https://github.com/kokkos/kokkos/pull/7219) [\\#7225](https://github.com/kokkos/kokkos/pull/7225)\n* Add getters for default tile sizes used in `MDRangePolicy` [\\#6839](https://github.com/kokkos/kokkos/pull/6839)\n* Improve performance of `Kokkos::sort` when `std::sort` is used [\\#7264](https://github.com/kokkos/kokkos/pull/7264)\n* Add range-based for loop support for `Array<T, N>` [\\#7293](https://github.com/kokkos/kokkos/pull/7293)\n* Allow functors as reducers for nested team parallel reduce [\\#6921](https://github.com/kokkos/kokkos/pull/6921)\n* Avoid making copies of string rvalue reference arguments to `view_alloc()` [\\#7364](https://github.com/kokkos/kokkos/pull/7364)\n* Add `atomic_{mod,xor,nand,lshift,rshift}` [\\#7458](https://github.com/kokkos/kokkos/pull/7458)\n* Allow using `SequentialHostInit` with `Kokkos::DualView` [\\#7456](https://github.com/kokkos/kokkos/pull/7456)\n* Add `Graph::instantiate()` [\\#7240](https://github.com/kokkos/kokkos/pull/7240)\n* Allow an arbitrary execution space instance to be used in `Kokkos::Graph::submit()` [\\#7249](https://github.com/kokkos/kokkos/pull/7249)\n* Enable compile-time diagnostic of illegal reduction target for graphs [\\#7460](https://github.com/kokkos/kokkos/pull/7460)\n\n### Build System Changes\n\n* Make sure backend-specific options such as `IMPL_CUDA_MALLOC_ASYNC` only show when that backend is actually enabled [\\#7228](https://github.com/kokkos/kokkos/pull/7228)\n* Major refactoring removing `TriBITS` paths [\\#6164](https://github.com/kokkos/kokkos/pull/6164)\n* Add support for SpacemiT K60 (RISC-V) [\\#7160](https://github.com/kokkos/kokkos/pull/7160)\n\n### Deprecations\n\n* Deprecate Tasking interface [\\#7393](https://github.com/kokkos/kokkos/pull/7393)\n* Deprecate `atomic_query_version`, `atomic_assign`, `atomic_compare_exchange_strong`, `atomic_{inc, dec}rement` [\\#7458](https://github.com/kokkos/kokkos/pull/7458)\n* Deprecate `{OpenMP,HPX}::is_asynchronous()` [\\#7322](https://github.com/kokkos/kokkos/pull/7322)\n\n### Bug Fixes\n\n* Fix undefined behavior in `BinSort` when sorting within bins on host [\\#7223](https://github.com/kokkos/kokkos/pull/7223)\n* Using CUDA limits to set extents for blocks, grids [\\#7235](https://github.com/kokkos/kokkos/pull/7235)\n* Fix `deep_copy (serial_exec, dst, src)` with multiple host backends [\\#7245](https://github.com/kokkos/kokkos/pull/7245)\n* Skip `RangePolicy` bounds conversion checks if roundtrip convertibility is not provided [\\#7172](https://github.com/kokkos/kokkos/pull/7172)\n* Allow extracting host and device views from `DualView` with `const` value type [\\#7242](https://github.com/kokkos/kokkos/pull/7242)\n* Fix `TeamPolicy` array reduction for CUDA and HIP [\\#6296](https://github.com/kokkos/kokkos/pull/6296)\n* Fix implicit copy assignment operators in few AVX2 masks being deleted [\\#7296](https://github.com/kokkos/kokkos/pull/7296)\n* Fix configuring without architecture flags for SYCL [\\#7303](https://github.com/kokkos/kokkos/pull/7303)\n* Set an initial value index during join of `MinLoc`, `MaxLoc` or `MinMaxLoc` [\\#7330](https://github.com/kokkos/kokkos/pull/7330)\n* Fix storage lifetime of driver for global launch of graph nodes for CUDA and HIP [\\#7365](https://github.com/kokkos/kokkos/pull/7365)\n* Make `value_type` for `RandomAccessIterator` non-`const` [\\#7485](https://github.com/kokkos/kokkos/pull/7485)\n\n## [4.4.01](https://github.com/kokkos/kokkos/tree/4.4.01)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/4.4.00...4.4.01)\n\n### Features:\n* Introduce new SequentialHostInit view allocation property [\\#7229](https://github.com/kokkos/kokkos/pull/7229)\n\n### Backend and Architecture Enhancements:\n\n#### CUDA:\n* Experimental support for unified memory mode (intended for Grace-Hopper etc.) [\\#6823](https://github.com/kokkos/kokkos/pull/6823)\n\n### Bug Fixes\n* OpenMP: Fix issue related to the visibility of an internal symbol with shared libraries that affected `ScatterView` in particular [\\#7284](https://github.com/kokkos/kokkos/pull/7284)\n* Fix implicit copy assignment operators in few AVX2 masks being deleted [\\#7296](https://github.com/kokkos/kokkos/pull/7296)\n\n## [4.4.00](https://github.com/kokkos/kokkos/tree/4.4.00)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/4.3.01...4.4.00)\n\n### Features:\n* Add `Kokkos::View` conversions from and to [`std::mdspan`](https://en.cppreference.com/w/cpp/container/mdspan) [\\#6830](https://github.com/kokkos/kokkos/pull/6830) [\\#7069](https://github.com/kokkos/kokkos/pull/7069)\n\n### Backend and Architecture Enhancements:\n\n#### CUDA:\n* `nvcc_wrapper`: Adding ability to process `--disable-warnings` flag [\\#6936](https://github.com/kokkos/kokkos/issues/6936)\n* Use recommended/max team size functions in Cuda ParallelFor and Reduce constructors [\\#6891](https://github.com/kokkos/kokkos/issues/6891)\n* Improve compile-times when building with `Kokkos_ENABLE_DEBUG_BOUNDS_CHECK` in Cuda [\\#7013](https://github.com/kokkos/kokkos/pull/7013)\n\n#### HIP:\n* Use HIP builtin atomics [\\#6882](https://github.com/kokkos/kokkos/pull/6882) [\\#7000](https://github.com/kokkos/kokkos/pull/7000)\n* Enable user-specified compiler and linker flags for AMD GPUs [\\#7127](https://github.com/kokkos/kokkos/pull/7127)\n\n#### SYCL:\n* Add support for Graphs [\\#6912](https://github.com/kokkos/kokkos/pull/6912)\n* Fix multi-GPU support [\\#6887](https://github.com/kokkos/kokkos/pull/6887)\n* Improve performance of reduction and scan operations [\\#6562](https://github.com/kokkos/kokkos/pull/6562), [\\#6750](https://github.com/kokkos/kokkos/pull/6750)\n* Fix lock for guarding scratch space in `TeamPolicy` `parallel_reduce` [\\#6988](https://github.com/kokkos/kokkos/pull/6988)\n* Include submission command queue property information into `SYCL::print_configuration()` [\\#7004](https://github.com/kokkos/kokkos/pull/7004)\n\n#### OpenACC:\n* Make `TeamPolicy` `parallel_for` execute on the correct async queue [\\#7012](https://github.com/kokkos/kokkos/pull/7012)\n\n#### OpenMPTarget:\n* Honor user requested loop ordering in `MDRange` policy [\\#6925](https://github.com/kokkos/kokkos/pull/6925)\n* Prevent data races by guarding the scratch space used in `parallel_scan` [\\#6998](https://github.com/kokkos/kokkos/pull/6998)\n\n#### HPX:\n* Workaround issue with template argument deduction to support compilation with NVCC [\\#7015](https://github.com/kokkos/kokkos/pull/7015)\n\n### General Enhancements\n* Improve performance of view copies in host parallel regions [\\#6730](https://github.com/kokkos/kokkos/pull/6730)\n* Harmonize convertibility rules of `Kokkos::RandomAccessIterator` with `View`s [\\#6929](https://github.com/kokkos/kokkos/pull/6929)\n* Add a check precondition non-overlapping ranges for the `adjacent_difference` algorithm in debug mode [\\#6922](https://github.com/kokkos/kokkos/pull/6922)\n* Add deduction guides for `TeamPolicy` [\\#7030](https://github.com/kokkos/kokkos/pull/7030)\n* SIMD: Allow flexible vector width for 32 bit types [\\#6802](https://github.com/kokkos/kokkos/pull/6802)\n* Updates for `Kokkos::Array`: add `kokkos_swap(Array<T, N>)` specialization [\\#6943](https://github.com/kokkos/kokkos/pull/6943), add `Kokkos::to_array` [\\#6375](https://github.com/kokkos/kokkos/pull/6375),  make `Kokkos::Array` equality-comparable [\\#7148](https://github.com/kokkos/kokkos/pull/7148)\n* Structured binding support for `Kokkos::complex` [\\#7040](https://github.com/kokkos/kokkos/pull/7040)\n* Introduce `KOKKOS_DEDUCTION_GUIDE` macro to allow for portable user-defined deduction guides [\\#6954](https://github.com/kokkos/kokkos/pull/6954)\n\n### Build System Changes\n* Do not require OpenMP support for languages other than CXX [\\#6965](https://github.com/kokkos/kokkos/pull/6965)\n* Update Intel GPU architectures in Makefile [\\#6895](https://github.com/kokkos/kokkos/pull/6895)\n* Fix use of OpenMP with Cuda or HIP as compile language [\\#6972](https://github.com/kokkos/kokkos/pull/6972)\n* Define and enforce new minimum compiler versions for C++20 support [\\#7128](https://github.com/kokkos/kokkos/pull/7128), [\\#7123](https://github.com/kokkos/kokkos/pull/7123)\n* Add nvidia Grace CPU architecture: `Kokkos_ARCH_ARMV9_GRACE` [\\#7158](https://github.com/kokkos/kokkos/pull/7158)\n* Fix Makefile.kokkos for Threads [\\#6896](https://github.com/kokkos/kokkos/pull/6896)\n* Remove support for NVHPC as CUDA device compiler [\\#6987](https://github.com/kokkos/kokkos/pull/6987)\n* Fix using CUDAToolkit for CMake 3.28.4 and higher [\\#7062](https://github.com/kokkos/kokkos/pull/7062)\n\n### Incompatibilities (i.e. breaking changes)\n* Drop `Kokkos::Array` special treatment in `View`s [\\#6906](https://github.com/kokkos/kokkos/pull/6906)\n* Drop `Experimental::RawMemoryAllocationFailure` [\\#7145](https://github.com/kokkos/kokkos/pull/7145)\n\n### Deprecations\n* Remove `Experimental::LayoutTiled` class template and deprecate `is_layouttiled` trait [\\#6907](https://github.com/kokkos/kokkos/pull/6907)\n* Deprecate `Kokkos::layout_iterate_type_selector` [\\#7076](https://github.com/kokkos/kokkos/pull/7076)\n* Deprecate specialization of `Kokkos::pair` for a single element [\\#6947](https://github.com/kokkos/kokkos/pull/6947)\n* Deprecate `deep_copy` of `UnorderedMap` of different size [\\#6812](https://github.com/kokkos/kokkos/pull/6812)\n* Deprecate trailing `Proxy` template argument of `Kokkos::Array` [\\#6934](https://github.com/kokkos/kokkos/pull/6934)\n* Deprecate implicit conversions of integers to `ChunkSize` [\\#7151](https://github.com/kokkos/kokkos/pull/7151)\n* Deprecate implicit conversions to execution spaces [\\#7156](https://github.com/kokkos/kokkos/pull/7156)\n\n### Bug Fixes\n* Do not return a copy of the input functor in `Experimental::for_each` [\\#6910](https://github.com/kokkos/kokkos/pull/6910)\n* Fix `realloc` on views of non-default constructible element types [\\#6993](https://github.com/kokkos/kokkos/pull/6993)\n* Fix undefined behavior in `View` initialization or fill with zeros [\\#7014](https://github.com/kokkos/kokkos/pull/7014)\n* Fix `sort_by_key` on host execution spaces when building with NVCC [\\#7059](https://github.com/kokkos/kokkos/pull/7059)\n* Fix using shared libraries and -fvisibility=hidden [\\#7065](https://github.com/kokkos/kokkos/pull/7065)\n* Fix view reference counting when functor copy constructor throws in parallel dispatch [\\#6289](https://github.com/kokkos/kokkos/pull/6289)\n* Fix `initialize(InitializationSetting)` for handling `print_configuration` setting [\\#7098](https://github.com/kokkos/kokkos/pull/7098)\n* Thread safety fixes for the Serial and OpenMP backend [\\#7080](https://github.com/kokkos/kokkos/pull/7080), [\\#6151](https://github.com/kokkos/kokkos/pull/6151)\n\n## [4.3.01](https://github.com/kokkos/kokkos/tree/4.3.01)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/4.3.00...4.3.01)\n\n### Backend and Architecture Enhancements:\n\n#### HIP:\n* MI300 support unified memory [\\#6877](https://github.com/kokkos/kokkos/pull/6877)\n\n### Bug Fixes\n* Serial: Use the provided execution space instance in TeamPolicy [\\#6951](https://github.com/kokkos/kokkos/pull/6951)\n* `nvcc_wrapper`: bring back support for `--fmad` option [\\#6931](https://github.com/kokkos/kokkos/pull/6931)\n* Fix CUDA reduction overflow for `RangePolicy` [\\#6578](https://github.com/kokkos/kokkos/pull/6578)\n\n## [4.3.00](https://github.com/kokkos/kokkos/tree/4.3.00) (2024-03-19)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/4.2.01...4.3.00)\n\n### Features:\n* Add `Experimental::sort_by_key(exec, keys, values)` algorithm [\\#6801](https://github.com/kokkos/kokkos/pull/6801)\n\n### Backend and Architecture Enhancements:\n\n#### CUDA:\n* Experimental multi-GPU support (from the same process) [\\#6782](https://github.com/kokkos/kokkos/pull/6782)\n* Link against CUDA libraries even with KOKKOS_ENABLE_COMPILE_AS_CMAKE_LANGUAGE [\\#6701](https://github.com/kokkos/kokkos/pull/6701)\n* Don't use the compiler launcher script if the CMake compile language is CUDA. [\\#6704](https://github.com/kokkos/kokkos/pull/6704)\n* nvcc(wrapper): adding \"long\" and \"short\" versions for all flags [\\#6615](https://github.com/kokkos/kokkos/pull/6615)\n\n#### HIP:\n * Fix compilation when using amdclang (with ROCm >= 5.7) and RDC [\\#6857](https://github.com/kokkos/kokkos/pull/6857)\n * Use rocthrust for sorting, when available [\\#6793](https://github.com/kokkos/kokkos/pull/6793)\n\n#### SYCL:\n* We only support OneAPI SYCL implementation: add check during initialization\n  * Error out on initialization if the backend is different from `ext_oneapi_*` [\\#6784](https://github.com/kokkos/kokkos/pull/6784)\n  * Filter GPU devices for `ext_onapi_*` GPU devices [\\#6758](https://github.com/kokkos/kokkos/pull/6784)\n* Performance Improvements\n  * Avoid unnecessary zero-memset of the scratch flags in SYCL [\\#6739](https://github.com/kokkos/kokkos/pull/6739)\n  * Use host-pinned memory to copy reduction/scan result [\\#6500](https://github.com/kokkos/kokkos/pull/6500)\n* Address deprecations after oneAPI 2023.2.0 [\\#6577](https://github.com/kokkos/kokkos/pull/6739)\n* Make sure to call find_dependency for oneDPL if necessary [\\#6870](https://github.com/kokkos/kokkos/pull/6870)\n\n#### OpenMPTarget:\n* Use LLVM extensions for dynamic shared memory [\\#6380](https://github.com/kokkos/kokkos/pull/6380)\n* Guard scratch memory usage in ParallelReduce [\\#6585 ](https://github.com/kokkos/kokkos/pull/6585)\n* Update linker flags for Intel GPUs update [\\#6735](https://github.com/kokkos/kokkos/pull/6735)\n* Improve handling of printf on Intel GPUs [\\#6652](https://github.com/kokkos/kokkos/pull/6652)\n\n#### OpenACC:\n* Add atomics support [\\#6446](https://github.com/kokkos/kokkos/pull/6446)\n* Make the OpenACC backend asynchronous [\\#6772](https://github.com/kokkos/kokkos/pull/6772)\n\n#### Threads:\n* Add missing broadcast to TeamThreadRange parallel_scan [\\#6601](https://github.com/kokkos/kokkos/pull/6601)\n\n#### OpenMP:\n* Improve performance of view initializations and filling with zeros [\\#6573](https://github.com/kokkos/kokkos/pull/6573)\n\n### General Enhancements\n\n* Improve performance of random number generation when using a normal distribution on GPUs [\\#6556](https://github.com/kokkos/kokkos/pull/6556)\n* Allocate temporary view with the user-provided execution space instance and do not initialize in `unique` algorithm [\\#6598](https://github.com/kokkos/kokkos/pull/6598)\n* Add deduction guide for `Kokkos::Array` [\\#6373](https://github.com/kokkos/kokkos/pull/6373)\n* Provide new public headers `<Kokkos_Clamp.hpp>` and `<Kokkos_MinMax.hpp>` [\\#6687](https://github.com/kokkos/kokkos/pull/6687)\n* Fix/improvement to `remove_if` parallel algorithm: use the provided execution space instance for temporary allocations and drop unnecessaryinitialization + avoid evaluating twice the predicate during final pass [\\#6747](https://github.com/kokkos/kokkos/pull/6747)\n* Add runtime function to query the number of devices and make device ID consistent with `KOKKOS_VISIBLE_DEVICES` [\\#6713](https://github.com/kokkos/kokkos/pull/6713)\n* simd: support `vector_aligned_tag` [\\#6243](https://github.com/kokkos/kokkos/pull/6243)\n* Avoid unnecessary allocation when default constructing Bitset [\\#6524](https://github.com/kokkos/kokkos/pull/6524)\n* Fix constness for views in std algorithms [\\#6813](https://github.com/kokkos/kokkos/pull/6813)\n* Improve error message on unsafe implicit conversion in MDRangePolicy [\\#6855](https://github.com/kokkos/kokkos/pull/6855)\n* CTAD (deduction guides) for RangePolicy [\\#6850](https://github.com/kokkos/kokkos/pull/6850)\n* CTAD (deduction guides) for MDRangePolicy [\\#5516](https://github.com/kokkos/kokkos/pull/5516)\n\n### Build System Changes\n* Require `Kokkos_ENABLE_ATOMICS_BYPASS` option to bypass atomic operation for Serial backend only builds [\\#6692](https://github.com/kokkos/kokkos/pull/6692)\n* Add support for RISCV and the Milk-V's Pioneer [\\#6773](https://github.com/kokkos/kokkos/pull/6773)\n* Add C++26 standard to CMake setup [\\#6733](https://github.com/kokkos/kokkos/pull/6733)\n* Fix Makefile when using gnu_generate_makefile.sh and make >= 4.3 [\\#6606](https://github.com/kokkos/kokkos/pull/6606)\n* Cuda: Fix configuring with CMake >= 3.28.4 - temporary fallback to internal CudaToolkit.cmake [\\#6898](https://github.com/kokkos/kokkos/pull/6898)\n\n### Incompatibilities (i.e. breaking changes)\n* Remove all `DEPRECATED_CODE_3` option and all code that was guarded by it  [\\#6523](https://github.com/kokkos/kokkos/pull/6523)\n* Drop guards to accommodate external code defining `KOKKOS_ASSERT` [\\#6665](https://github.com/kokkos/kokkos/pull/6665)\n* `Profiling::ProfilingSection(std::string)` constructor marked explicit and nodiscard [\\#6690](https://github.com/kokkos/kokkos/pull/6690)\n* Add bound check preconditions for `RangePolicy` and `MDRangePolicy` [\\#6617](https://github.com/kokkos/kokkos/pull/6617) [\\#6726](https://github.com/kokkos/kokkos/pull/6726)\n* Add checks for unsafe implicit conversions in RangePolicy [\\#6754](https://github.com/kokkos/kokkos/pull/6754)\n* Remove Kokkos::[b]half_t volatile overloads [\\#6579](https://github.com/kokkos/kokkos/pull/6579)\n* Remove KOKKOS_IMPL_DO_NOT_USE_PRINTF [\\#6593](https://github.com/kokkos/kokkos/pull/6593)\n* Check matching static extents in View constructor [\\#5190 ](https://github.com/kokkos/kokkos/pull/5190)\n* Tools(profiling): fix typo Kokkos_Tools_Optim[i]zationGoal [\\#6642](https://github.com/kokkos/kokkos/pull/6642)\n* Remove variadic range policy constructor (disallow passing multiple trailing chunk size arguments) [\\#6845](https://github.com/kokkos/kokkos/pull/6845)\n* Improve message on view out of bounds access and always abort [\\#6861](https://github.com/kokkos/kokkos/pull/6861)\n* Drop `KOKKOS_ENABLE_INTEL_MM_ALLOC` macro [\\#6797](https://github.com/kokkos/kokkos/pull/6797)\n* Remove `Kokkos::Experimental::LogicalMemorySpace` (without going through deprecation) [\\#6557](https://github.com/kokkos/kokkos/pull/6557)\n* Remove `Experimental::HBWSpace` and support for linking against memkind [\\#6791](https://github.com/kokkos/kokkos/pull/6791)\n* Drop librt TPL and associated `KOKKOS_ENABLE_LIBRT` macro [\\#6798](https://github.com/kokkos/kokkos/pull/6798)\n* Drop support for old CPU architectures (`ARCH_BGQ`, `ARCH_POWER7`, `ARCH_WSM` and associated `ARCH_SSE4` macro) [\\#6806](https://github.com/kokkos/kokkos/pull/6806)\n* Drop support for deprecated command-line arguments and environment variables [\\#6744](https://github.com/kokkos/kokkos/pull/6744)\n\n### Deprecations\n* Provide kokkos_swap as part of Core and deprecate Experimental::swap in Algorithms [\\#6697](https://github.com/kokkos/kokkos/pull/6697)\n* Deprecate {Cuda,HIP}::detect_device_count() and Cuda::[detect_]device_arch() [\\#6710](https://github.com/kokkos/kokkos/pull/6710)\n* Deprecate `ExecutionSpace::in_parallel()` [\\#6582](https://github.com/kokkos/kokkos/pull/6582)\n\n### Bug Fixes\n* Fix team-level MDRange reductions: [\\#6511](https://github.com/kokkos/kokkos/pull/6511)\n* Fix CUDA and SYCL small value type (16-bit) team reductions [\\#5334](https://github.com/kokkos/kokkos/pull/5334)\n* Enable `{transform_}exclusive_scan` in place [\\#6667](https://github.com/kokkos/kokkos/pull/6667)\n* `fill_random` overload that do not take an execution space instance argument should fence [\\#6658](https://github.com/kokkos/kokkos/pull/6658)\n* HIP,Cuda,OpenMPTarget: Fixup use provided execution space when copying host inaccessible reduction result [\\#6777](https://github.com/kokkos/kokkos/pull/6777)\n* Fix typo in `cuda_func_set_attribute[s]_wrapper` preventing proper setting of desired occupancy [\\#6786](https://github.com/kokkos/kokkos/pull/6786)\n* Avoid undefined behavior due to conversion between signed and unsigned integers in shift_{right, left}_team_impl [\\#6821](https://github.com/kokkos/kokkos/pull/6821)\n* Fix a bug in Makefile.kokkos when using AMD GPU architectures as `AMD_GFXYYY` [\\#6892](https://github.com/kokkos/kokkos/pull/6892)\n\n## [4.2.01](https://github.com/kokkos/kokkos/tree/4.2.01) (2023-12-07)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/4.2.00...4.2.01)\n\n### Backend and Architecture Enhancements:\n\n#### CUDA:\n- Add warp sync for `parallel_reduce` to avoid race condition [\\#6630](https://github.com/kokkos/kokkos/pull/6630), [\\#6746](https://github.com/kokkos/kokkos/pull/6746)\n\n#### HIP:\n- Fix Graph \"multiple definition of\" linking error (missing `inline` specifier) [\\#6624](https://github.com/kokkos/kokkos/pull/6624)\n- Add support for gfx940 (AMD Instinct MI300 GPU) [\\#6671](https://github.com/kokkos/kokkos/pull/6671)\n\n### Build System\n- CMake: Don't let Kokkos set `CMAKE_CXX_FLAGS` for Trilinos builds [\\#6742](https://github.com/kokkos/kokkos/pull/6742)\n\n### Bug Fixes\n- Remove deprecation warning for `AllocationMechanism` for GCC <11.0 [\\#6653](https://github.com/kokkos/kokkos/pull/6653)\n- Fix bug early tools finalize with non-default host execution instances [\\#6635](https://github.com/kokkos/kokkos/pull/6635)\n- Fix various issues for MSVC CUDA builds [\\#6659](https://github.com/kokkos/kokkos/pull/6659)\n- Fix \"extra `;`\" warning with `-pedantic` flag in `<Kokkos_SIMD_Scalar.hpp>` [\\#6510](https://github.com/kokkos/kokkos/pull/6510)\n\n## [4.2.00](https://github.com/kokkos/kokkos/tree/4.2.00) (2023-11-06)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/4.1.00...4.2.00)\n\n### Features:\n- SIMD: significant improvements to SIMD support and alignment with C++26 SIMD\n  - add `Kokkos::abs` overload for SIMD types [\\#6069](https://github.com/kokkos/kokkos/pull/6069)\n  - add generator constructors [\\#6347](https://github.com/kokkos/kokkos/pull/6347)\n  - convert binary operators to hidden friends [\\#6320](https://github.com/kokkos/kokkos/pull/6320)\n  - add shift operators [\\#6109](https://github.com/kokkos/kokkos/pull/6109)\n  - add `float` support [\\#6177](https://github.com/kokkos/kokkos/pull/6177)\n  - add remaining `gather_from` and `scatter_to` overloads [\\#6220](https://github.com/kokkos/kokkos/pull/6220)\n  - define simd math function overloads in the Kokkos namespace [\\#6465](https://github.com/kokkos/kokkos/pull/6465), [\\#6487](https://github.com/kokkos/kokkos/pull/6487)\n  - `Kokkos_ENABLE_NATIVE=ON` autodetects SIMD types supported [\\#6188](https://github.com/kokkos/kokkos/pull/6188)\n  - fix AVX2 SIMD support for ZEN2 AMD CPU [\\#6238](https://github.com/kokkos/kokkos/pull/6238)\n- `Kokkos::printf` [\\#6083](https://github.com/kokkos/kokkos/pull/6083)\n- `Kokkos::sort`: support custom comparator [\\#6253](https://github.com/kokkos/kokkos/pull/6253)\n- `half_t` and `bhalf_t` numeric traits [\\#5778](https://github.com/kokkos/kokkos/pull/5778)\n- `half_t` and `bhalf_t` mixed comparisons [\\#6407](https://github.com/kokkos/kokkos/pull/6407)\n- `half_t` and `bhalf_t` mathematical functions [\\#6124](https://github.com/kokkos/kokkos/pull/6124)\n- `TeamThreadRange` `parallel_scan` with return value [\\#6090](https://github.com/kokkos/kokkos/pull/6090), [\\#6301](https://github.com/kokkos/kokkos/pull/6301), [\\#6302](https://github.com/kokkos/kokkos/pull/6302), [\\#6303](https://github.com/kokkos/kokkos/pull/6303), [\\#6307](https://github.com/kokkos/kokkos/pull/6307)\n- `ThreadVectorRange` `parallel_scan` with return value [\\#6235](https://github.com/kokkos/kokkos/pull/6235), [\\#6242](https://github.com/kokkos/kokkos/pull/6242), [\\#6308](https://github.com/kokkos/kokkos/pull/6308), [\\#6305](https://github.com/kokkos/kokkos/pull/6305), [\\#6292](https://github.com/kokkos/kokkos/pull/6292)\n- Add team-level std algorithms [\\#6200](https://github.com/kokkos/kokkos/pull/6200), [\\#6205](https://github.com/kokkos/kokkos/pull/6205), [\\#6207](https://github.com/kokkos/kokkos/pull/6207), [\\#6208](https://github.com/kokkos/kokkos/pull/6208), [\\#6209](https://github.com/kokkos/kokkos/pull/6209), [\\#6210](https://github.com/kokkos/kokkos/pull/6210), [\\#6211](https://github.com/kokkos/kokkos/pull/6211), [\\#6212](https://github.com/kokkos/kokkos/pull/6212), [\\#6213](https://github.com/kokkos/kokkos/pull/6213), [\\#6256](https://github.com/kokkos/kokkos/pull/6256), [\\#6258](https://github.com/kokkos/kokkos/pull/6258), [\\#6350](https://github.com/kokkos/kokkos/pull/6350), [\\#6351](https://github.com/kokkos/kokkos/pull/6351)\n- Serial: Allow for distinct execution space instances [\\#6441](https://github.com/kokkos/kokkos/pull/6441)\n\n### Backend and Architecture Enhancements:\n\n#### CUDA:\n- Fixed potential data race in Cuda `parallel_reduce` [\\#6236](https://github.com/kokkos/kokkos/pull/6236)\n- Use `cudaMallocAsync` by default [\\#6402](https://github.com/kokkos/kokkos/pull/6402)\n- Bugfix for using Kokkos from a thread of execution [\\#6299](https://github.com/kokkos/kokkos/pull/6299)\n\n#### HIP:\n- New naming convention for AMD GPU: VEGA906, VEGA908, VEGA90A, NAVI1030 to AMD_GFX906, AMD_GFX908, AMD_GFX90A, AMD_GFX1030 [\\#6266](https://github.com/kokkos/kokkos/pull/6266)\n- Add initial support for gfx942: [\\#6358](https://github.com/kokkos/kokkos/pull/6358)\n- Improve reduction performance [\\#6229](https://github.com/kokkos/kokkos/pull/6229)\n- Deprecate `HIP(hipStream_t,bool)` constructor [\\#6401](https://github.com/kokkos/kokkos/pull/6401)\n- Add support for Graph [\\#6370](https://github.com/kokkos/kokkos/pull/6370)\n- Improve reduction performance when using Teams [\\#6284](https://github.com/kokkos/kokkos/pull/6284)\n- Fix concurrency calculation [\\#6479](https://github.com/kokkos/kokkos/pull/6479)\n- Fix potential data race in HIP `parallel_reduce` [\\#6429](https://github.com/kokkos/kokkos/pull/6429)\n\n#### SYCL:\n- Enforce external `sycl::queues` to be in-order [\\#6246](https://github.com/kokkos/kokkos/pull/6246)\n- Improve reduction performance: [\\#6272](https://github.com/kokkos/kokkos/pull/6272) [\\#6271](https://github.com/kokkos/kokkos/pull/6271) [\\#6270](https://github.com/kokkos/kokkos/pull/6270) [\\#6264](https://github.com/kokkos/kokkos/pull/6264)\n- Allow using the SYCL execution space on AMD GPUs [\\#6321](https://github.com/kokkos/kokkos/pull/6321)\n- Allow sorting via native oneDPL to support Views with stride=1 [\\#6322](https://github.com/kokkos/kokkos/pull/6322)\n- Make in-order queues the default via macro [\\#6189](https://github.com/kokkos/kokkos/pull/6189)\n\n#### OpenACC:\n- Support Clacc compiler [\\#6250](https://github.com/kokkos/kokkos/pull/6250)\n\n### General Enhancements\n- Add missing `is_*_view` traits and `is_*_view_v` helper variable templates for `DynRankView`, `DynamicView`, `OffsetView`, `ScatterView` containers [\\#6195](https://github.com/kokkos/kokkos/pull/6195)\n- Make `nvcc_wrapper` and `compiler_launcher` scripts more portable by switching to a `#!/usr/bin/env` shebang [\\#6357](https://github.com/kokkos/kokkos/pull/6357)\n- Add an improved `Kokkos::malloc` / `Kokkos::free` performance test [\\#6377](https://github.com/kokkos/kokkos/pull/6377)\n- Ensure `Views` with `size==0` can be used with `deep_copy` [\\#6273](https://github.com/kokkos/kokkos/pull/6273)\n- `Kokkos::abort` is moved to header `Kokkos_Abort.hpp` [\\#6445](https://github.com/kokkos/kokkos/pull/6445)\n- `KOKKOS_ASSERT`, `KOKKOS_EXPECTS`, `KOKKOS_ENSURES` are moved to header `Kokkos_Assert.hpp` [\\#6445](https://github.com/kokkos/kokkos/pull/6445)\n- Add a permuted-index mode to the gups benchmark [\\#6378](https://github.com/kokkos/kokkos/pull/6378)\n- Check for overflow during backend initialization [\\#6159](https://github.com/kokkos/kokkos/pull/6159)\n- Make constraints on `Kokkos::sort` more visible [\\#6234](https://github.com/kokkos/kokkos/pull/6234) and cleanup API [\\#6239](https://github.com/kokkos/kokkos/pull/6239)\n- Add converting assignment to `DualView`:  [\\#6474](https://github.com/kokkos/kokkos/pull/6474)\n\n\n### Build System Changes\n\n- Export `Kokkos_CXX_COMPILER_VERSION` [\\#6282](https://github.com/kokkos/kokkos/pull/6282)\n- Disable default oneDPL support in Trilinos [\\#6342](https://github.com/kokkos/kokkos/pull/6342)\n\n### Incompatibilities (i.e. breaking changes)\n - Ensure that `Kokkos::complex` only gets instantiated for cv-unqualified floating-point types  [\\#6251](https://github.com/kokkos/kokkos/pull/6251)\n - Removed (deprecated-3) support for volatile join operators in reductions [\\#6385](https://github.com/kokkos/kokkos/pull/6385)\n - Enforce `ViewCtorArgs` restrictions for `create_mirror_view` [\\#6304](https://github.com/kokkos/kokkos/pull/6304)\n - SIMD types for ARM NEON are not autodetected anymore but need `Kokkos_ARCH_ARM_NEON` or `Kokkos_ARCH_NATIVE=ON` [\\#6394](https://github.com/kokkos/kokkos/pull/6394)\n - Remove `#include <iostream>` from headers where possible [\\#6482](https://github.com/kokkos/kokkos/pull/6482)\n\n### Deprecations\n- Deprecated `Kokkos::vector` [\\#6252](https://github.com/kokkos/kokkos/pull/6252)\n- All host allocation mechanisms except for `STD_MALLOC` have been deprecated [\\#6341](https://github.com/kokkos/kokkos/pull/6341)\n\n### Bug Fixes\n - Missing memory fence in `RandomPool::free_state` functions [\\#6290](https://github.com/kokkos/kokkos/pull/6290)\n - Fix for corner case in `Kokkos::Experimental::is_partitioned` algorithm [\\#6257](https://github.com/kokkos/kokkos/pull/6257)\n - Fix initialization of scratch lock variables in the `Cuda` backend [\\#6433](https://github.com/kokkos/kokkos/pull/6433)\n - Fixes for `Kokkos::Array` [\\#6372](https://github.com/kokkos/kokkos/pull/6372)\n - Fixed symlink configure issue for Windows [\\#6241](https://github.com/kokkos/kokkos/pull/6241)\n - OpenMPTarget init-join fix [\\#6444](https://github.com/kokkos/kokkos/pull/6444)\n - Fix atomic operations bug for Min and Max [\\#6435](https://github.com/kokkos/kokkos/pull/6435)\n - Fix implementation for `cyl_bessel_i0` [\\#6484](https://github.com/kokkos/kokkos/pull/6484)\n - Fix various NVCC warnings in `BinSort`, `Array`, and bit manipulation function templates [\\#6483](https://github.com/kokkos/kokkos/pull/6483)\n\n## [4.1.00](https://github.com/kokkos/kokkos/tree/4.1.00) (2023-06-16)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/4.0.01...4.1.00)\n\n### Features:\n* Add `<Kokkos_BitManipulation.hpp>` header [\\#4577](https://github.com/kokkos/kokkos/pull/4577) [\\#5907](https://github.com/kokkos/kokkos/pull/5907) [\\#5967](https://github.com/kokkos/kokkos/pull/5967) [\\#6101](https://github.com/kokkos/kokkos/pull/6101)\n* Add `UnorderedMapInsertOpTypes` [\\#5877](https://github.com/kokkos/kokkos/pull/5877) and documentation [\\#350](https://github.com/kokkos/kokkos-core-wiki/pull/350)\n* Add multiple reducers support for team-level parallel reduce [\\#5727](https://github.com/kokkos/kokkos/pull/5727)\n\n### Backend and Architecture Enhancements:\n\n#### CUDA:\n\n* Allow NVCC 12 to compile using C++20 flag [\\#5977](https://github.com/kokkos/kokkos/pull/5977)\n* Remove ability to disable CMake option `Kokkos_ENABLE_CUDA_LAMBDA` and unconditionally enable CUDA extended lambda support. [\\#5964](https://github.com/kokkos/kokkos/pull/5964)\n* Drop unnecessary fences around the memory allocation when using `CudaUVMSpace` in views [\\#6008](https://github.com/kokkos/kokkos/pull/6008)\n\n#### HIP:\n* Improve performance for `parallel_reduce`. Use different parameters for `LightWeight` kernels [\\#6029](https://github.com/kokkos/kokkos/pull/6029) and [\\#6160](https://github.com/kokkos/kokkos/pull/6160)\n\n#### SYCL:\n* Only pass one wrapper object in SYCL reductions [\\#6047](https://github.com/kokkos/kokkos/pull/6047)\n* Improve and simplify parallel_scan implementation [\\#6064](https://github.com/kokkos/kokkos/pull/6064)\n* Remove workaround for submit_barrier not being enqueued properly [\\#5504](https://github.com/kokkos/kokkos/pull/5504)\n* Fix guards for using scratch space with SYCL [\\#6003](https://github.com/kokkos/kokkos/pull/6003)\n* Fix compiling SYCL with KOKKOS_IMPL_DO_NOT_USE_PRINTF_USAGE [\\#6219](https://github.com/kokkos/kokkos/pull/6219)\n\n#### OpenMPTarget:\n* Improve hierarchical parallelism for Intel architectures [\\#6043](https://github.com/kokkos/kokkos/pull/6043)\n* Enable Cray compiler for the OpenMPTarget backend. [\\#5889](https://github.com/kokkos/kokkos/pull/5889)\n\n#### HPX:\n* Update HPX backend to use HPX's sender/receiver functionality [\\#5628](https://github.com/kokkos/kokkos/pull/5628)\n* Increase minimum required HPX version to 1.8.0 [\\#6132](https://github.com/kokkos/kokkos/pull/6132)\n* Implement HPX::in_parallel [\\#6143](https://github.com/kokkos/kokkos/pull/6143)\n\n### General Enhancements\n* Export CMake `Kokkos_{CUDA,HIP}_ARCHITECTURES` variables [\\#5919](https://github.com/kokkos/kokkos/pull/5919) [\\#5925](https://github.com/kokkos/kokkos/pull/5925)\n* Add `Kokkos::Profiling::ScopedRegion` [\\#5959](https://github.com/kokkos/kokkos/pull/5959) [\\#5972](https://github.com/kokkos/kokkos/pull/5972)\n* Add support for `View::rank[_dynamic]()`[\\#5870](https://github.com/kokkos/kokkos/pull/5870)\n* Detect incompatible relocatable device code mode to prevent ODR violations [\\#5991](https://github.com/kokkos/kokkos/pull/5991)\n* Add (experimental) support for 32-bit Darwin and PPC [\\#5916](https://github.com/kokkos/kokkos/pull/5916)\n* Add missing half and bhalf specialization of the infinity numeric trait [\\#6055](https://github.com/kokkos/kokkos/pull/6055)\n* Add `is_dual_view` trait and align further with regular view [\\#6120](https://github.com/kokkos/kokkos/pull/6120)\n* Allow templated functors in parallel_for, parallel_reduce and parallel_scan [\\#5976](https://github.com/kokkos/kokkos/pull/5976)\n* Define KOKKOS_COMPILER_INTEL_LLVM and only define at most one KOKKOS_COMPILER* macro [\\#5906](https://github.com/kokkos/kokkos/pull/5906)\n* Allow linking against build tree [\\#6078](https://github.com/kokkos/kokkos/pull/6078)\n* Allow passing a temporary std::vector to partition_space [\\#6167](https://github.com/kokkos/kokkos/pull/6167)\n* `Kokkos` can be used as an external dependency in `Trilinos` [\\#6142](https://github.com/kokkos/kokkos/pull/6142), [\\#6157](https://github.com/kokkos/kokkos/pull/6157) [\\#6163](https://github.com/kokkos/kokkos/pull/6163)\n* Left align demangled stacktrace output [\\#6191](https://github.com/kokkos/kokkos/pull/6191)\n* Improve OpenMP affinity warning to include MPI concerns [\\#6185](https://github.com/kokkos/kokkos/pull/6185)\n\n### Build System Changes\n* Drop `Kokkos_ENABLE_LAUNCH_COMPILER` option which had no effect [\\#6148](https://github.com/kokkos/kokkos/pull/6148)\n* Export variables for relevant Kokkos options with cmake[\\#6142](https://github.com/kokkos/kokkos/pull/6142)\n\n### Incompatibilities (i.e. breaking changes)\n* Desul atomics always enabled [\\#5801](https://github.com/kokkos/kokkos/pull/5801)\n* Drop `KOKKOS_ENABLE_CUDA_ASM*` and `KOKKOS_ENABLE_*_ATOMICS` macros [\\#5940](https://github.com/kokkos/kokkos/pull/5940)\n* Drop `KOKKOS_ENABLE_RFO_PREFETCH` macro [\\#5944](https://github.com/kokkos/kokkos/pull/5944)\n* Deprecate `Kokkos_ENABLE_CUDA_LAMBDA` configuration option and force it to `ON` [\\#5964](https://github.com/kokkos/kokkos/pull/5964)\n* Remove TriBITS Kokkos subpackages [\\#6104](https://github.com/kokkos/kokkos/pull/6104)\n* Cuda: Remove unused attach_texture_object [\\#6129](https://github.com/kokkos/kokkos/pull/6129)\n* Drop Kokkos_ENABLE_PROFILING_LOAD_PRINT configuration option [\\#6150](https://github.com/kokkos/kokkos/pull/6150)\n* Drop pointless Kokkos{Algorithms,Containers}_config.h files [\\#6108](https://github.com/kokkos/kokkos/pull/6108)\n\n### Deprecations\n* Deprecate `BinSort`, `BinOp1D`, and `BinOp3D` default constructors [\\#6131](https://github.com/kokkos/kokkos/pull/6131)\n\n### Bug Fixes\n* Fix `SYCLTeamMember` to take arguments for scratch sizes as `std::size_t` [\\#5981](https://github.com/kokkos/kokkos/pull/5981)\n* Fix Kokkos_SIMD with AVX2 on 64-bit architectures [\\#6075](https://github.com/kokkos/kokkos/pull/6075)\n* Fix an incorrectly returning size for SIMD uint64_t in AVX2 [\\#6004](https://github.com/kokkos/kokkos/pull/6004)\n* Fix missing avx512 header file with gcc versions before 10 [\\#6183](https://github.com/kokkos/kokkos/pull/6183)\n* Fix incorrect results of `parallel_reduce` of types smaller than `int` on CUDA and HIP: [\\#5745](https://github.com/kokkos/kokkos/pull/5745)\n* CMake: update package compatibility mode when building within Trilinos [\\#6012](https://github.com/kokkos/kokkos/pull/6012)\n* Fix warnings generated from internal uses of `ALL_t` rather than `Kokkos::ALL_t` [\\#6028](https://github.com/kokkos/kokkos/pull/6028)\n* Fix bug in `hpcbind` script: check for correct Slurm variable [\\#6116](https://github.com/kokkos/kokkos/pull/6116)\n* KokkosTools: Don't call callbacks before backends are initialized [\\#6114](https://github.com/kokkos/kokkos/pull/6114)\n* Fix global fence in Kokkos::resize(DynRankView) [\\#6184](https://github.com/kokkos/kokkos/pull/6184)\n* Fix `BinSort` support for strided views [\\#6081](https://github.com/kokkos/kokkos/pull/6184)\n* Fix missing `is_*_view` traits in containers [\\#6195](https://github.com/kokkos/kokkos/pull/6195)\n* Fix broken OpenMP target on NVHPC [\\#6171](https://github.com/kokkos/kokkos/pull/6171)\n* Sorting an empty view should exit early and not fail [\\#6130](https://github.com/kokkos/kokkos/pull/6130)\n\n## [4.0.01](https://github.com/kokkos/kokkos/tree/4.0.01) (2023-04-14)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/4.0.00...4.0.01)\n\n### Backend and Architecture Enhancements:\n\n#### CUDA:\n\n- Allow NVCC 12 to compile using C++20 flag [\\#6020](https://github.com/kokkos/kokkos/pull/6020)\n- Add CUDA Ada architecture support [\\#6022](https://github.com/kokkos/kokkos/pull/6022)\n\n#### HIP:\n\n- Add support for AMDGPU target NAVI31 / RX 7900 XT(X): gfx1100 [\\#6021](https://github.com/kokkos/kokkos/pull/6021)\n- HIP: Fix warning from `std::memcpy` [\\#6019](https://github.com/kokkos/kokkos/pull/6019)\n\n#### SYCL:\n- Fix `SYCLTeamMember` to take arguments for scratch sizes as `std::size_t` [\\#5986](https://github.com/kokkos/kokkos/pull/5986)\n\n### General Enhancements\n- Fixup 4.0 change log [\\#6023](https://github.com/kokkos/kokkos/pull/6023)\n\n### Build System Changes\n- Cherry-pick TriBITS update from Trilinos [\\#6037](https://github.com/kokkos/kokkos/pull/6037)\n- CMake: update package compatibility mode when building within Trilinos [\\#6013](https://github.com/kokkos/kokkos/pull/6013)\n\n### Bug Fixes\n- Fix an incorrectly returning size for SIMD uint64_t in AVX2 [\\#6011](https://github.com/kokkos/kokkos/pull/6011)\n- Desul atomics: wrong value for `desul::Impl::numeric_limits_max<uint64_t>` [\\#6018](https://github.com/kokkos/kokkos/pull/6018)\n- Fix warning in some user code when using std::memcpy [\\#6000](https://github.com/kokkos/kokkos/pull/6000)\n- Fix excessive build times using Makefile.kokkos [\\#6068](https://github.com/kokkos/kokkos/pull/6068)\n\n## [4.0.0](https://github.com/kokkos/kokkos/tree/4.0.00) (2023-02-21)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/3.7.01...4.0.00)\n\n### Features:\n- Allow value types without default constructor in `Kokkos::View` with `Kokkos::WithoutInitializing` [\\#5307](https://github.com/kokkos/kokkos/pull/5307)\n- `parallel_scan` with `View` as result type. [\\#5146](https://github.com/kokkos/kokkos/pull/5146)\n- Introduced `SharedSpace`, an alias for a `MemorySpace` that is accessible by every `ExecutionSpace`. The memory is moved and then accessed locally. [\\#5289](https://github.com/kokkos/kokkos/pull/5289)\n- Introduced `SharedHostPinnedSpace`, an alias for a `MemorySpace` that is accessible by every `ExecutionSpace`. The memory is pinned to the host and accessed via zero-copy access. [\\#5405](https://github.com/kokkos/kokkos/pull/5405)\n- Add team- and thread-level `sort`, `sort_by_key` algorithms. [\\#5317](https://github.com/kokkos/kokkos/pull/5317)\n- Groundwork for `MDSpan` integration. [\\#4973](https://github.com/kokkos/kokkos/pull/4973) and [\\#5304](https://github.com/kokkos/kokkos/pull/5304)\n- Introduced MD version of hierarchical parallelism: `TeamThreadMDRange`, `ThreadVectorMDRange` and `TeamVectorMDRange`. [\\#5238](https://github.com/kokkos/kokkos/pull/5238)\n\n### Backend and Architecture Enhancements:\n\n#### CUDA:\n- Allow CUDA PTX forward compatibility [\\#3612](https://github.com/kokkos/kokkos/pull/3612) [\\#5536](https://github.com/kokkos/kokkos/pull/5536) [\\#5527](https://github.com/kokkos/kokkos/pull/5527)\n- Add support for NVIDIA Hopper GPU architecture [\\#5538](https://github.com/kokkos/kokkos/pull/5538)\n- Don't rely on synchronization behavior of default stream in CUDA and HIP [\\#5391](https://github.com/kokkos/kokkos/pull/5391)\n- Improve CUDA cache config settings [\\#5706](https://github.com/kokkos/kokkos/pull/5706)\n\n#### HIP:\n - Move `HIP`, `HIPSpace`, `HIPHostPinnedSpace`, and `HIPManagedSpace` out of the `Experimental` namespace [\\#5383](https://github.com/kokkos/kokkos/pull/5383)\n - Don't rely on synchronization behavior of default stream in CUDA and HIP [\\#5391](https://github.com/kokkos/kokkos/pull/5391)\n - Export AMD architecture flag when using Trilinos [\\#5528](https://github.com/kokkos/kokkos/pull/5528)\n - Fix linking error (see [OLCF issue](https://docs.olcf.ornl.gov/systems/crusher_quick_start_guide.html#olcfdev-1167-kokkos-build-failures-with-prgenv-amd)) when using `amdclang`: [\\#5539](https://github.com/kokkos/kokkos/pull/5539)\n - Remove support for MI25 and added support for Navi 1030 [\\#5522](https://github.com/kokkos/kokkos/pull/5522)\n - Fix race condition when using `HSA_XNACK=1`  [\\#5755](https://github.com/kokkos/kokkos/pull/5755)\n - Add parameter to force using GlobalMemory launch mechanism. This can be used when encountering compiler bugs with ROCm 5.3 and 5.4  [\\#5796](https://github.com/kokkos/kokkos/pull/5796)\n\n#### SYCL:\n- Delegate choice of workgroup size for `parallel_reduce` with `RangePolicy` to the compiler. [\\#5227](https://github.com/kokkos/kokkos/pull/5227)\n- SYCL `RangePolicy`: manually specify workgroup size through chunk size [\\#4875](https://github.com/kokkos/kokkos/pull/4875)\n\n#### OpenMPTarget:\n- Select the right device [\\#5492](https://github.com/kokkos/kokkos/pull/5492)\n\n#### OpenMP:\n - Add `partition_space` [\\#5105](https://github.com/kokkos/kokkos/pull/5105)\n\n### General Enhancements\n- Implement `OffsetView` constructor taking `pair`s and `ViewCtorProp` [\\#5303](https://github.com/kokkos/kokkos/pull/5303)\n- Promote math constants to `Kokkos::numbers` namespace [\\#5434](https://github.com/kokkos/kokkos/pull/5434)\n- Add overloads of `hypot` math function that take 3 arguments [\\#5341](https://github.com/kokkos/kokkos/pull/5341)\n- Add `fma` fused multiply-add math function [\\#5428](https://github.com/kokkos/kokkos/pull/5428)\n- Views using `MemoryTraits::Atomic` don't need `volatile` overloads for the value type anymore. [\\#5455](https://github.com/kokkos/kokkos/pull/5455)\n- Added `is_team_handle` trait [\\#5375](https://github.com/kokkos/kokkos/pull/5375)\n- Refactor desul atomics to support compiling CUDA with NVC++ [\\#5431](https://github.com/kokkos/kokkos/pull/5431) [\\#5497](https://github.com/kokkos/kokkos/pull/5497) [\\#5498](https://github.com/kokkos/kokkos/pull/5498)\n- Support finding `libquadmath` with native compiler support [\\#5286](https://github.com/kokkos/kokkos/pull/5286)\n- Add architecture flags for MSVC [\\#5673](https://github.com/kokkos/kokkos/pull/5673)\n- SIMD backend for ARM NEON [\\#5829](https://github.com/kokkos/kokkos/pull/5829)\n\n### Build System Changes\n- Let CMake determine OpenMP flags. [\\#4105](https://github.com/kokkos/kokkos/pull/4105)\n- Update minimum compiler versions. [\\#5323](https://github.com/kokkos/kokkos/pull/5323)\n- Makefile and CMake support for C++23 [\\#5283](https://github.com/kokkos/kokkos/pull/5283)\n- Do not add `-cuda` to the link line with NVHPC compiler when the CUDA backend is not actually enabled [\\#5485](https://github.com/kokkos/kokkos/pull/5485)\n- Only add `-latomic` in generated GNU makefiles when OpenMPTarget backend is enabled [\\#5501](https://github.com/kokkos/kokkos/pull/5501) [\\#5537](https://github.com/kokkos/kokkos/pull/5537) (3.7 patch release candidate)\n- `Kokkos_ENABLE_CUDA_LAMBDA` now `ON` by default with NVCC [\\#5580](https://github.com/kokkos/kokkos/pull/5580)\n- Fix enabling of relocatable device code when using CUDA as CMake language [\\#5564](https://github.com/kokkos/kokkos/pull/5564)\n- Fix cmake configuration with CUDA 12 [\\#5691](https://github.com/kokkos/kokkos/pull/5691)\n\n### Incompatibilities (i.e. breaking changes)\n- ***Require C++17***  [\\#5277](https://github.com/kokkos/kokkos/pull/5277)\n- Turn setting `Kokkos_CXX_STANDARD` into an error [\\#5293](https://github.com/kokkos/kokkos/pull/5293)\n- Remove all deprecations in Kokkos 3 [\\#5297](https://github.com/kokkos/kokkos/pull/5297)\n- Remove `KOKKOS_COMPILER_CUDA_VERSION` [\\#5430](https://github.com/kokkos/kokkos/pull/5430)\n- Drop `reciprocal_overflow_threshold` numeric trait [\\#5326](https://github.com/kokkos/kokkos/pull/5326)\n- Move `reduction_identity` out of `<Kokkos_NumericTraits.hpp>` into a new `<Kokkos_ReductionIdentity.hpp>` header [\\#5450](https://github.com/kokkos/kokkos/pull/5450)\n- Reduction and scan routines will report an error if the `join()` operator they would use takes `volatile`-qualified parameters [\\#5409](https://github.com/kokkos/kokkos/pull/5409)\n- `ENABLE_CUDA_UVM` is dropped in favor of using `SharedSpace` as `MemorySpace` explicitly [\\#5608](https://github.com/kokkos/kokkos/pull/5608)\n- Remove Kokkos_ENABLE_CUDA_LDG_INTRINSIC option [\\#5623](https://github.com/kokkos/kokkos/pull/5623)\n- Don't rely on synchronization behavior of default stream in CUDA and HIP - this potentially will break unintended implicit synchronization with other libraries such as MPI [\\#5391](https://github.com/kokkos/kokkos/pull/5391)\n- Make ExecutionSpace::concurrency() a non-static member function [\\#5655](https://github.com/kokkos/kokkos/pull/5655) and related PRs\n- Remove code guarded by `KOKKOS_ENABLE_DEPRECATED_CODE_3`\n\n### Deprecations\n- Deprecate `CudaUVMSpace::available()` which always returned `true` [\\#5614](https://github.com/kokkos/kokkos/pull/5614)\n- Deprecate `volatile`-qualified members from `Kokkos::pair` and `Kokkos::complex` [\\#5412](https://github.com/kokkos/kokkos/pull/5412)\n- Deprecate `KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_*` macros [\\#5824](https://github.com/kokkos/kokkos/pull/5824) (oversight in 3.6)\n\n### Bug Fixes\n- Avoid allocating memory for `UniqueToken` [\\#5300](https://github.com/kokkos/kokkos/pull/5300)\n- Fix `pragma ivdep` in `Kokkos_OpenMP_Parallel.hpp` [\\#5356](https://github.com/kokkos/kokkos/pull/5356)\n- Fix configuring with Threads support when rerunning CMake [\\#5486](https://github.com/kokkos/kokkos/pull/5486)\n- Fix View assignment between `LayoutLeft` and `LayoutRight` with static extents [\\#5535](https://github.com/kokkos/kokkos/pull/5535) (3.7 patch release candidate)\n- Add `fence()` calls to sorting routine overloads that don't take an execution space parameter [\\#5389](https://github.com/kokkos/kokkos/pull/5389)\n- `ClockTic` changed to 64 bit to fix overflow on Power [\\#5577](https://github.com/kokkos/kokkos/pull/5577) (incl. in 3.7.01 patch release)\n- Fix incorrect offset in CUDA and HIP `parallel_scan` for < 4 byte types [\\#5555](https://github.com/kokkos/kokkos/pull/5555) (3.7 patch release candidate)\n- Fix incorrect alignment behavior of scratch allocations in some corner cases (e.g. very small allocations) [\\#5687](https://github.com/kokkos/kokkos/pull/5687) (3.7 patch release candidate)\n- Add missing `ReductionIdentity<char>` specialization [\\#5798](https://github.com/kokkos/kokkos/pull/5798)\n- Don't install standard algorithms headers multiple times [\\#5670](https://github.com/kokkos/kokkos/pull/5670)\n- Fix max scratch size calculation for level 0 scratch in CUDA and HIP [\\#5718](https://github.com/kokkos/kokkos/pull/5718)\n\n## [3.7.02](https://github.com/kokkos/kokkos/tree/3.7.02) (2023-05-17)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/3.7.01...3.7.02)\n\n### Backends and Archs Enhancements:\n#### CUDA\n- Add Hopper support and update nvcc_wrapper to work with CUDA-12 [\\#5693](https://github.com/kokkos/kokkos/pull/5693)\n### General Enhancements:\n- sprintf -> snprintf [\\#5787](https://github.com/kokkos/kokkos/pull/5787)\n### Build System:\n- Add error message when not using `hipcc` and when `CMAKE_CXX_STANDARD` is not set [\\#5945](https://github.com/kokkos/kokkos/pull/5945)\n### Bug Fixes:\n- Fix Scratch allocation alignment issues [\\#5692](https://github.com/kokkos/kokkos/pull/5692)\n- Fix Intel Classic Compiler ICE [\\#5710](https://github.com/kokkos/kokkos/pull/5710)\n- Don't install std algorithm headers multiple times [\\#5711](https://github.com/kokkos/kokkos/pull/5711)\n- Fix static init order issue in InitalizationSettings [\\#5721](https://github.com/kokkos/kokkos/pull/5721)\n- Fix src/dst Properties in deep_copy(DynamicView,View) [\\#5732](https://github.com/kokkos/kokkos/pull/5732)\n- Fix build on Fedora Rawhide [\\#5782](https://github.com/kokkos/kokkos/pull/5782)\n- Finalize HIP lock arrays [\\#5694](https://github.com/kokkos/kokkos/pull/5694)\n- Fix CUDA lock arrays for current Desul [\\#5812](https://github.com/kokkos/kokkos/pull/5812)\n- Set the correct device/context in InterOp tests [\\#5701](https://github.com/kokkos/kokkos/pull/5701)\n\n## [3.7.01](https://github.com/kokkos/kokkos/tree/3.7.01) (2022-12-01)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/3.7.00...3.7.01)\n\n### Bug Fixes:\n- Add fences to all sorting routines not taking an execution space instance argument [\\#5547](https://github.com/kokkos/kokkos/pull/5547)\n- Fix repeated `team_reduce` without barrier [\\#5552](https://github.com/kokkos/kokkos/pull/5552)\n- Fix memory spaces in `create_mirror_view` overloads using `view_alloc` [\\#5521](https://github.com/kokkos/kokkos/pull/5521)\n- Allow `as_view_of_rank_n()` to be overloaded for \"special\" scalar types [\\#5553](https://github.com/kokkos/kokkos/pull/5553)\n- Fix warning calling a `__host__` function from a `__host__ __device__` from `View:: as_view_of_rank_n` [\\#5591](https://github.com/kokkos/kokkos/pull/5591)\n- OpenMPTarget: adding implementation to set device id. [\\#5557](https://github.com/kokkos/kokkos/pull/5557)\n- Use `Kokkos::atomic_load` to Correct Race Condition Giving Rise to Seg Faulting Error in OpenMP tests [\\#5559](https://github.com/kokkos/kokkos/pull/5559)\n- cmake: define `KOKKOS_ARCH_A64FX` [\\#5561](https://github.com/kokkos/kokkos/pull/5561)\n- Only link against libatomic in gnu-make OpenMPTarget build [\\#5565](https://github.com/kokkos/kokkos/pull/5565)\n- Fix static extents assignment for LayoutLeft/LayoutRight assignment [\\#5566](https://github.com/kokkos/kokkos/pull/5566)\n- Do not add -cuda to the link line with NVHPC compiler when the CUDA backend is not actually enabled [\\#5569](https://github.com/kokkos/kokkos/pull/5569)\n- Export the flags in `KOKKOS_AMDGPU_OPTIONS` when using Trilinos [\\#5571](https://github.com/kokkos/kokkos/pull/5571)\n- Add support for detecting MPI local rank with MPICH and PMI [\\#5570](https://github.com/kokkos/kokkos/pull/5570) [\\#5582](https://github.com/kokkos/kokkos/pull/5582)\n- Remove listing of undefined TPL dependencies [\\#5573](https://github.com/kokkos/kokkos/pull/5573)\n- ClockTic changed to 64 bit to fix overflow on Power [\\#5592](https://github.com/kokkos/kokkos/pull/5592)\n- Fix incorrect offset in CUDA and HIP parallel scan for < 4 byte types [\\#5607](https://github.com/kokkos/kokkos/pull/5607)\n- Fix initialization of Cuda lock arrays [\\#5622](https://github.com/kokkos/kokkos/pull/5622)\n\n## [3.7.00](https://github.com/kokkos/kokkos/tree/3.7.00) (2022-08-22)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/3.6.01...3.7.00)\n\n### Features:\n- Use non-volatile `join()` member functions and `operator+=` in `parallel_reduce/scan` [\\#4931](https://github.com/kokkos/kokkos/pull/4931) [\\#4954](https://github.com/kokkos/kokkos/pull/4954) [\\#4951](https://github.com/kokkos/kokkos/pull/4951)\n- Add `SIMD` sub package (requires C++17) [\\#5016](https://github.com/kokkos/kokkos/pull/5016)\n- Add `is_finalized()` [\\#5247](https://github.com/kokkos/kokkos/pull/5247)\n- Promote mathematical functions from `namespace Kokkos::Experimental` to `namespace Kokkos` [\\#4791](https://github.com/kokkos/kokkos/pull/4791)\n- Promote `min`, `max`, `clamp`, `minmax` functions from `namespace Kokkos::Experimental` to `namespace Kokkos` [\\#5170](https://github.com/kokkos/kokkos/pull/5170)\n- Add `round`, `logb`, `nextafter`, `copysign`, and `signbit` math functions [\\#4768](https://github.com/kokkos/kokkos/pull/4768)\n- Add `HIPManagedSpace`, similar to `CudaUVMSpace` [\\#5112](https://github.com/kokkos/kokkos/pull/5112)\n- Accept view construction allocation properties in `create_mirror[_view,_view_and_copy]` and `resize/realloc` [\\#5125](https://github.com/kokkos/kokkos/pull/5125) [\\#5095](https://github.com/kokkos/kokkos/pull/5095) [\\#5035](https://github.com/kokkos/kokkos/pull/5035) [\\#4805](https://github.com/kokkos/kokkos/pull/4805) [\\#4844](https://github.com/kokkos/kokkos/pull/4844)\n- Allow `MemorySpace::allocate()` to be called with execution space [\\#4826](https://github.com/kokkos/kokkos/pull/4826)\n- Experimental: Compile time view subscriber [\\#4197](https://github.com/kokkos/kokkos/pull/4197)\n\n### Backends and Archs Enhancements:\n- Add support for Sapphire Rapids Intel architecture [\\#5015](https://github.com/kokkos/kokkos/pull/5015)\n- Add support for ICX, SKL and ICL Intel architectures [\\#5013](https://github.com/kokkos/kokkos/pull/5013) [\\#4929](https://github.com/kokkos/kokkos/pull/4929)\n- Add arch flags for Intel GPU Ponte Vecchio [\\#4932](https://github.com/kokkos/kokkos/pull/4932)\n- SYCL: require GPU if GPU architecture was set at configuration time (i.e. do not allow fallback to CPU device) [\\#5264](https://github.com/kokkos/kokkos/pull/5264) [\\#5222](https://github.com/kokkos/kokkos/pull/5222)\n- SYCL: Add `SYCL::sycl_queue()` for interoperability [\\#5241](https://github.com/kokkos/kokkos/pull/5241)\n- SYCL: Loosen restriction for using built-in `sycl::group_broadcast` [\\#4552](https://github.com/kokkos/kokkos/pull/4552)\n- SYCL: preserve address space [\\#4396](https://github.com/kokkos/kokkos/pull/4396)\n- OpenMPTarget: Adding a workaound for team scan [\\#5219](https://github.com/kokkos/kokkos/pull/5219)\n- OpenMPTarget: Adding logic to skip the kernel launch if `league_size=0` [\\#5067](https://github.com/kokkos/kokkos/pull/5067)\n- OpenMPTarget: Make sure `Kokkos::abort()` causes abnormal program termination when called on the host-side [\\#4808](https://github.com/kokkos/kokkos/pull/4808)\n- HIP: Make HIPHostPinnedSpace coarse-grained [\\#5152](https://github.com/kokkos/kokkos/pull/5152)\n- Refactor OpenMP `parallel_for` implementation to use more native OpenMP constructs [\\#4664](https://github.com/kokkos/kokkos/pull/4664)\n- Add option to optimize for local CPU architecture `Kokkos_ARCH_NATIVE` [\\#4930](https://github.com/kokkos/kokkos/pull/4930)\n\n\n### Implemented enhancements\n- Add command line argument/environment variable to print the configuration [\\#5233](https://github.com/kokkos/kokkos/pull/5233)\n- Improve error message in view memory access violations [\\#4950](https://github.com/kokkos/kokkos/pull/4950)\n- Remove unnecessary fences in View initialization [\\#4823](https://github.com/kokkos/kokkos/pull/4823)\n- Make `View::shmem_size()` device-callable [\\#4936](https://github.com/kokkos/kokkos/pull/4936)\n- Update numerics support for `__float128` [\\#5081](https://github.com/kokkos/kokkos/pull/5081)\n- Add `log10` overload for `Kokkos::complex` [\\#5009](https://github.com/kokkos/kokkos/pull/5009)\n- Add `[[nodiscard]]` to `ScopeGuard` [\\#5224](https://github.com/kokkos/kokkos/pull/5224)\n- Add structured binding support for `Kokkos::Array` [\\#4962](https://github.com/kokkos/kokkos/pull/4962)\n- Enable accessing `Kokkos::Array` elements in constant expressions [\\#4916](https://github.com/kokkos/kokkos/pull/4916)\n- Mark `as_view_of_rank_n` as KOKKOS_FUNCTION [\\#5248](https://github.com/kokkos/kokkos/pull/5248)\n- Cleanup/rework fence overloads [\\#5148](https://github.com/kokkos/kokkos/pull/5148)\n- Assert that `Layout` construction from extents is valid in functions taking integer extents [\\#5209](https://github.com/kokkos/kokkos/pull/5209)\n- Add `fill_random` overload that takes an execution space as first argument [\\#5181](https://github.com/kokkos/kokkos/pull/5181)\n- Avoid some unnecessary fences in `parallel_reduce/scan` [\\#5154](https://github.com/kokkos/kokkos/pull/5154)\n- Include `KOKKOS_ENABLE_LIBDL` in options when printing configuration [\\#5086](https://github.com/kokkos/kokkos/pull/5086)\n- DynRankView: make `layout()` return the same as a corresponding static View [\\#5026](https://github.com/kokkos/kokkos/pull/5026)\n- Use `_mm_malloc` for icpx [\\#5012](https://github.com/kokkos/kokkos/pull/5012)\n- Avoid forcing matching execution spaces in `BinSort` constructor and `sort()` [\\#4919](https://github.com/kokkos/kokkos/pull/4919)\n- Check number of bins in `BinSort` [\\#4890](https://github.com/kokkos/kokkos/pull/4890)\n- Improve performance in parallel STL-like algorithms [\\#4887](https://github.com/kokkos/kokkos/pull/4887) [\\#4886](https://github.com/kokkos/kokkos/pull/4886)\n- Disable `memset` on A64FX and launch `parallel_for` instead (performance) [\\#4884](https://github.com/kokkos/kokkos/pull/4884)\n- Allow non-power-of-two team sizes for team reductions and scans [\\#4809](https://github.com/kokkos/kokkos/pull/4809)\n\n#### Harmonization of Kokkos execution environment initialization:\n- Warn when unable to detect local MPI rank and user explicitly asked for it [\\#5263](https://github.com/kokkos/kokkos/pull/5263)\n- Refactor parsing of command line arguments and environment variables [\\#5221](https://github.com/kokkos/kokkos/pull/5221)\n- Refactor device selection at initialization [\\#5211](https://github.com/kokkos/kokkos/pull/5211)\n- Rename tools settings for consistency [\\#5201](https://github.com/kokkos/kokkos/pull/5201)\n- Print help only once [\\#5128](https://github.com/kokkos/kokkos/pull/5128)\n- Update precedence rule in initialization [\\#5130](https://github.com/kokkos/kokkos/pull/5130)\n- Warn instead of just ignoring user settings when kokkos-tools is disabled [\\#5088](https://github.com/kokkos/kokkos/pull/5088)\n- Drop numa args in threads backend initialization [\\#5127](https://github.com/kokkos/kokkos/pull/5127)\n- Warn users when a flag prefixed with -[-]kokkos is not recognized and do not remove it [\\#5256](https://github.com/kokkos/kokkos/pull/5256)\n- Give back to Core what belongs to Core (aka moving tune_internals option from Tools back to Core) [\\#5202](https://github.com/kokkos/kokkos/pull/5202)\n\n#### Build system updates:\n- `nvcc_wrapper`: filter out -pedantic-errors from nvcc options [\\#5235](https://github.com/kokkos/kokkos/pull/5235)\n- `nvcc_wrapper`: add known nvcc option --source-in-ptx [\\#5052](https://github.com/kokkos/kokkos/pull/5052)\n- Link libdl as interface library [\\#5179](https://github.com/kokkos/kokkos/pull/5179)\n- Only show GPU architectures with enabled corresponding backend [\\#5119](https://github.com/kokkos/kokkos/pull/5119)\n- Enable optional external desul build [\\#5021](https://github.com/kokkos/kokkos/pull/5021) [\\#5132](https://github.com/kokkos/kokkos/pull/5132)\n- Export `Kokkos_CXX_STANDARD` variable with CMake [\\#5068](https://github.com/kokkos/kokkos/pull/5068)\n- Suppress warnings with nvc++ [\\#5031](https://github.com/kokkos/kokkos/pull/5031)\n- Disallow multiple host architectures in CMake [\\#4996](https://github.com/kokkos/kokkos/pull/4996)\n- Do not include compiler warning flags in the compile option of the cmake target [\\#4989](https://github.com/kokkos/kokkos/pull/4989)\n- AOT flags for OpenMPTarget targeting Intel GPUs [\\#4915](https://github.com/kokkos/kokkos/pull/4915)\n- Repurpose `Kokkos_ARCH_INTEL_GEN` for SYCL to mean JIT to be conforming with OMPT [\\#4894](https://github.com/kokkos/kokkos/pull/4894)\n- Replace amdgpu-target with offload-arch [\\#4874](https://github.com/kokkos/kokkos/pull/4874)\n- Do not enable `kokkos_launch_compiler` when `CMAKE_CXX_COMPILER_LAUNCHER` is set [\\#4870](https://github.com/kokkos/kokkos/pull/4870)\n- Move CMake version check up [\\#4797](https://github.com/kokkos/kokkos/pull/4797)\n\n### Incompatibilities:\n- Remove `KOKKOS_THREAD_LOCAL` [\\#5064](https://github.com/kokkos/kokkos/pull/5064)\n- Remove `KOKKOS_ENABLE_POSIX_MEMALIGN` [\\#5011](https://github.com/kokkos/kokkos/pull/5011)\n- Remove unused `KOKKOS_ENABLE_TM` [\\#4995](https://github.com/kokkos/kokkos/pull/4995)\n- Remove unused cmakedefine `KOKKOS_ENABLE_COMPILER_WARNINGS` [\\#4883](https://github.com/kokkos/kokkos/pull/4883)\n- Remove unused `KOKKOS_ENABLE_DUALVIEW_MODIFY_CHECK` [\\#4882](https://github.com/kokkos/kokkos/pull/4882)\n- Drop Instruction Set Architecture (ISA) macros [\\#4981](https://github.com/kokkos/kokkos/pull/4981)\n- Warn in `ScopeGuard` about illegal usage [\\#5250](https://github.com/kokkos/kokkos/pull/5250)\n\n### Deprecations:\n- Guard against non-public header inclusion [\\#5178](https://github.com/kokkos/kokkos/pull/5178)\n- Raise deprecation warnings if non empty WorkTag class is used [\\#5230](https://github.com/kokkos/kokkos/pull/5230)\n- Deprecate `parallel_*` overloads taking the label as trailing argument [\\#5141](https://github.com/kokkos/kokkos/pull/5141)\n- Deprecate nested types in functional [\\#5185](https://github.com/kokkos/kokkos/pull/5185)\n- Deprecate `InitArguments` struct and replace it with `InitializationSettings` [\\#5135](https://github.com/kokkos/kokkos/pull/5135)\n- Deprecate `finalize_all()` [\\#5134](https://github.com/kokkos/kokkos/pull/5134)\n- Deprecate command line arguments (other than `--help`) that are not prefixed with `kokkos-*` [\\#5120](https://github.com/kokkos/kokkos/pull/5120)\n- Deprecate `--[kokkos-]numa` cmdline arg and `KOKKOS_NUMA` env var [\\#5117](https://github.com/kokkos/kokkos/pull/5117)\n- Deprecate `--[kokkos-]threads` command line argument in favor of `--[kokkos-]num-threads` [\\#5111](https://github.com/kokkos/kokkos/pull/5111)\n- Deprecate `Kokkos::is_reducer_type` [\\#4957](https://github.com/kokkos/kokkos/pull/4957)\n- Deprecate `OffsetView` constructors taking `index_list_type` [\\#4810](https://github.com/kokkos/kokkos/pull/4810)\n- Deprecate overloads of `Kokkos::sort` taking a parameter `bool always_use_kokkos_sort` [\\#5382](https://github.com/kokkos/kokkos/issues/5382)\n- Warn about `parallel_reduce` cases that call `join()` with volatile-qualified arguments [\\#5215](https://github.com/kokkos/kokkos/pull/5215)\n\n### Bug Fixes:\n- CUDA Reductions: Fix data races reported by Nvidia `compute-sanitizer` [\\#4855](https://github.com/kokkos/kokkos/pull/4855)\n- Work around Intel compiler bug [\\#5301](https://github.com/kokkos/kokkos/pull/5301)\n- Avoid allocating memory for UniqueToken [\\#5300](https://github.com/kokkos/kokkos/pull/5300)\n- DynamicView: Properly resize mirror instances after construction [\\#5276](https://github.com/kokkos/kokkos/pull/5276)\n- Remove Kokkos::Rank limit of 6 ranks [\\#5271](https://github.com/kokkos/kokkos/pull/5271)\n- Do not forget to set last element to nullptr when removing a flag in `Kokkos::initialize` [\\#5272](https://github.com/kokkos/kokkos/pull/5272)\n- Fix CUDA+MSVC build issue [\\#5261](https://github.com/kokkos/kokkos/pull/5261)\n- Fix `DynamicView::resize_serial` [\\#5220](https://github.com/kokkos/kokkos/pull/5220)\n- Fix cmake default compiler flags for unknown compiler [\\#5217](https://github.com/kokkos/kokkos/pull/5217)\n- Fix `move_backward` [\\#5191](https://github.com/kokkos/kokkos/pull/5191)\n- Fixing issue 5196 - missing symbol with intel compiler [\\#5207](https://github.com/kokkos/kokkos/pull/5207)\n- Preserve `KOKKOS_INVALID_INDEX` in ViewDimension and ArrayLayout construction [\\#5188](https://github.com/kokkos/kokkos/pull/5188)\n- Finalize `deep_copy_space` early avoiding printing to `std::cerr` for Cuda [\\#5151](https://github.com/kokkos/kokkos/pull/5151)\n- Use correct policy in Threads MDRange `parallel_reduce` [\\#5123](https://github.com/kokkos/kokkos/pull/5123)\n- Fix building with NVCC as the CXX compiler while the CUDA backend is not enabled [\\#5115](https://github.com/kokkos/kokkos/pull/5115)\n- OpenMPTarget Index range fix for MDRange. [\\#5089](https://github.com/kokkos/kokkos/pull/5089)\n- Fix bug with CUDA's team reduction for empty ranges [\\#5079](https://github.com/kokkos/kokkos/pull/5079)\n- Fix using `ZeroMemset` for Serial [\\#5077](https://github.com/kokkos/kokkos/pull/5077)\n- Fix `Kokkos::Vector::push_back` for default execution space [\\#5047](https://github.com/kokkos/kokkos/pull/5047)\n- ScatterView: Fix ScatterMin/ScatterMax to use proper atomics [\\#5045](https://github.com/kokkos/kokkos/pull/5045)\n- Fix calling `ZeroMemset` in `deep_copy` [\\#5040](https://github.com/kokkos/kokkos/pull/5040)\n- Make View self-assignment not produce double-free [\\#5024](https://github.com/kokkos/kokkos/pull/5024)\n- Guard against unrecognized pragma with intel compilers [\\#5019](https://github.com/kokkos/kokkos/pull/5019)\n- Fix racing condition in `HIPParallelLaunch` [\\#5008](https://github.com/kokkos/kokkos/pull/5008)\n- KokkosP: Fix `device_id` in profiling [\\#4997](https://github.com/kokkos/kokkos/pull/4997)\n- Fix for `Kokkos::vector::insert` into empty vector with begin and end iterators [\\#4988](https://github.com/kokkos/kokkos/pull/4988)\n- Fix Core header files installation [\\#4984](https://github.com/kokkos/kokkos/pull/4984)\n- Fix bounds errors with `Kokkos::sort` [\\#4980](https://github.com/kokkos/kokkos/pull/4980)\n- Fixup let `RangePolicy::set_chunk_size` return a reference to self [\\#4918](https://github.com/kokkos/kokkos/pull/4918)\n- Fix allocating large Views [\\#4907](https://github.com/kokkos/kokkos/pull/4907)\n- Fix combined reductions with `Kokkos::View` [\\#4896](https://github.com/kokkos/kokkos/pull/4896)\n- Fixed `_CUDA_ARCH__` to `__CUDA_ARCH__` for CUDA LDG [\\#4893](https://github.com/kokkos/kokkos/pull/4893)\n- Fixup `View::access()` truncate parameter pack [\\#4876](https://github.com/kokkos/kokkos/pull/4876)\n- Fix `abort` with HIP backend for ROCm 5.0.2 and beyond [\\#4873](https://github.com/kokkos/kokkos/pull/4873)\n- Fix HIP version when printing the configuration [\\#4872](https://github.com/kokkos/kokkos/pull/4872)\n- Fix scratch lock array when using scratch level 1 [\\#4871](https://github.com/kokkos/kokkos/pull/4871)\n- Fix Makefile.kokkos to work with fujitsu compiler [\\#4867](https://github.com/kokkos/kokkos/pull/4867)\n- cmake: Correct link THREADS link option [\\#4854](https://github.com/kokkos/kokkos/pull/4854)\n- UniqueToken `impl_acquire` function should be device only [\\#4819](https://github.com/kokkos/kokkos/pull/4819)\n- Fix example calls to non existing static `print_configuration` [\\#4806](https://github.com/kokkos/kokkos/pull/4806)\n- Fix requests for large team scratch sizes [\\#4728](https://github.com/kokkos/kokkos/pull/4728)\n\n\n## [3.6.01](https://github.com/kokkos/kokkos/tree/3.6.01) (2022-05-23)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/3.6.00...3.6.01)\n\n### Bug Fixes:\n- Fix Threads: Fix serial resizing scratch space (3.6.01 cherry-pick) [\\#5109](https://github.com/kokkos/kokkos/pull/5109)\n- Fix ScatterMin/ScatterMax to use proper atomics (3.6.01 cherry-pick) [\\#5046](https://github.com/kokkos/kokkos/pull/5046)\n- Fix allocating large Views [\\#4907](https://github.com/kokkos/kokkos/pull/4907)\n- Fix bounds errors with Kokkos::sort [\\#4980](https://github.com/kokkos/kokkos/pull/4980)\n- Fix HIP version when printing the configuration [\\#4872](https://github.com/kokkos/kokkos/pull/4872)\n- Fixed `_CUDA_ARCH__` to `__CUDA_ARCH__` for CUDA LDG [\\#4893](https://github.com/kokkos/kokkos/pull/4893)\n- Fixed an incorrect struct initialization [\\#5028](https://github.com/kokkos/kokkos/pull/5028)\n- Fix racing condition in `HIPParallelLaunch` [\\#5008](https://github.com/kokkos/kokkos/pull/5008)\n- Avoid deprecation warnings with `OpenMPExec::validate_partition` [\\#4982](https://github.com/kokkos/kokkos/pull/4982)\n- Make View self-assignment not produce double-free [\\#5024](https://github.com/kokkos/kokkos/pull/5024)\n\n\n## [3.6.00](https://github.com/kokkos/kokkos/tree/3.6.00) (2022-02-18)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/3.5.00...3.6.00)\n\n### Features:\n- Add C++ standard algorithms [\\#4315](https://github.com/kokkos/kokkos/pull/4315)\n- Implement `fill_random` for `DynRankView` [\\#4763](https://github.com/kokkos/kokkos/pull/4763)\n- Add `bhalf_t` [\\#4543](https://github.com/kokkos/kokkos/pull/4543) [\\#4653](https://github.com/kokkos/kokkos/pull/4653)\n- Add mathematical constants [\\#4519](https://github.com/kokkos/kokkos/pull/4519)\n- Allow `Kokkos::{create_mirror*,resize,realloc}` to be used with `WithoutInitializing` [\\#4486](https://github.com/kokkos/kokkos/pull/4486) [\\#4337](https://github.com/kokkos/kokkos/pull/4337)\n- Implement `KOKKOS_IF_ON_{HOST,DEVICE}` macros [\\#4660](https://github.com/kokkos/kokkos/pull/4660)\n- Allow setting the CMake language for Kokkos [\\#4323](https://github.com/kokkos/kokkos/pull/4323)\n\n#### Perf bug fix\n- Desul: Add ScopeCaller [\\#4690](https://github.com/kokkos/kokkos/pull/4690)\n- Enable Desul atomics by default when using Makefiles [\\#4606](https://github.com/kokkos/kokkos/pull/4606)\n- Unique token improvement [\\#4741](https://github.com/kokkos/kokkos/pull/4741) [\\#4748](https://github.com/kokkos/kokkos/pull/4748)\n\n#### Other improvements:\n- Add math function long double overload on the host side [\\#4712](https://github.com/kokkos/kokkos/pull/4712)\n\n### Deprecations:\n- Array reductions with pointer return types [\\#4756](https://github.com/kokkos/kokkos/pull/4756)\n- Deprecate `partition_master`, `validate_partition` [\\#4737](https://github.com/kokkos/kokkos/pull/4737)\n- Deprecate `Kokkos_ENABLE_PTHREAD` in favor of `Kokkos_ENABLE_THREADS` [\\#4619](https://github.com/kokkos/kokkos/pull/4619) ** pair with use std::threads **\n- Deprecate `log2(unsigned) -> int` (removing in next release) [\\#4595](https://github.com/kokkos/kokkos/pull/4595)\n- Deprecate `Kokkos::Impl::is_view` [\\#4592](https://github.com/kokkos/kokkos/pull/4592)\n- Deprecate `KOKKOS_ACTIVE_EXECUTION_MEMORY_SPACE_*` macros and the `ActiveExecutionMemorySpace` alias [\\#4668](https://github.com/kokkos/kokkos/issues/4668)\n\n### Backends and Archs Enhancements:\n\n#### SYCL:\n- Update required SYCL compiler version [\\#4749](https://github.com/kokkos/kokkos/pull/4749)\n- Cap vector size to kernel maximum for SYCL [\\#4704](https://github.com/kokkos/kokkos/pull/4704)\n- Improve check for compatibility of vector size and subgroup size in SYCL [\\#4579](https://github.com/kokkos/kokkos/pull/4579)\n- Provide `chunk_size` for SYCL [\\#4635](https://github.com/kokkos/kokkos/pull/4635)\n- Use host-pinned memory for SYCL kernel memory [\\#4627](https://github.com/kokkos/kokkos/pull/4627)\n- Use shuffle-based algorithm for scalar reduction [\\#4608](https://github.com/kokkos/kokkos/pull/4608)\n- Implement pool of USM IndirectKernelMemory [\\#4596](https://github.com/kokkos/kokkos/pull/4596)\n- Provide valid default team size for SYCL [\\#4481](https://github.com/kokkos/kokkos/pull/4481)\n\n#### CUDA:\n- Add checks for shmem usage in `parallel_reduce` [\\#4548](https://github.com/kokkos/kokkos/pull/4548)\n\n#### HIP:\n- Add support for fp16 in the HIP backend [\\#4688](https://github.com/kokkos/kokkos/pull/4688)\n- Disable multiple kernel instantiations when using HIP (configure with `-DKokkos_ENABLE_HIP_MULTIPLE_KERNEL_INSTANTIATIONS=ON` to use) [\\#4644](https://github.com/kokkos/kokkos/pull/4644)\n- Fix HIP scratch use per instance [\\#4439](https://github.com/kokkos/kokkos/pull/4439)\n- Change allocation header to 256B alignment for AMD VEGA architecture [\\#4753](https://github.com/kokkos/kokkos/pull/4753)\n- Add generic `KOKKOS_ARCH_VEGA` macro [\\#4782](https://github.com/kokkos/kokkos/pull/4782)\n- Require ROCm 4.5 [\\#4689](https://github.com/kokkos/kokkos/pull/4689)\n\n### HPX:\n- Adapt to HPX 1.7.0 which is now required [\\#4241](https://github.com/kokkos/kokkos/pull/4241)\n\n#### OpenMP:\n- Fix thread deduction for OpenMP for `thread_count==0` [\\#4541](https://github.com/kokkos/kokkos/pull/4541)\n\n#### OpenMPTarget:\n- Update memory space `size_type` to improve performance (`size_t -> unsigned`) [\\#4779](https://github.com/kokkos/kokkos/pull/4779)\n\n#### Other Improvements:\n- Improve NVHPC support [\\#4599](https://github.com/kokkos/kokkos/pull/4599)\n- Add `Kokkos::Experimental::{min,max,minmax,clamp}` [\\#4629](https://github.com/kokkos/kokkos/pull/4629) [\\#4506](https://github.com/kokkos/kokkos/pull/4506)\n- Use device type as template argument in Containers and Algorithms [\\#4724](https://github.com/kokkos/kokkos/pull/4724) [\\#4675](https://github.com/kokkos/kokkos/pull/4675)\n- Implement `Kokkos::sort` with execution space [\\#4490](https://github.com/kokkos/kokkos/pull/4490)\n- `Kokkos::resize` always error out for mismatch in runtime rank [\\#4681](https://github.com/kokkos/kokkos/pull/4681)\n- Print current call stack when calling `Kokkos::abort()` from the host [\\#4672](https://github.com/kokkos/kokkos/pull/4672) [\\#4671](https://github.com/kokkos/kokkos/pull/4671)\n- Detect mismatch of execution spaces in functors [\\#4655](https://github.com/kokkos/kokkos/pull/4655)\n- Improve view label access on host [\\#4647](https://github.com/kokkos/kokkos/pull/4647)\n- Error out for `const` scalar return type in reduction [\\#4645](https://github.com/kokkos/kokkos/pull/4645)\n- Don't allow calling `UnorderdMap::value_at` for a set [\\#4639](https://github.com/kokkos/kokkos/pull/4639)\n- Add `KOKKOS_COMPILER_NVHPC` macro, disable `quiet_NaN` and `signaling_NaN` [\\#4586](https://github.com/kokkos/kokkos/pull/4586)\n- Improve performance of `local_deep_copy` [\\#4511](https://github.com/kokkos/kokkos/pull/4511)\n- Improve performance when sorting integers [\\#4464](https://github.com/kokkos/kokkos/pull/4464)\n- Add missing numeric traits (`denorm_min`, `reciprocal_overflow_threshold`, `{quiet,silent}_NaN}`) and make them work on cv-qualified types [\\#4466](https://github.com/kokkos/kokkos/pull/4466) [\\#4415](https://github.com/kokkos/kokkos/pull/4415) [\\#4473](https://github.com/kokkos/kokkos/pull/4473) [\\#4443](https://github.com/kokkos/kokkos/pull/4443)\n\n### Implemented enhancements BuildSystem\n- Manually compute IntelLLVM compiler version for older CMake versions [\\#4760](https://github.com/kokkos/kokkos/pull/4760)\n- Add Xptxas without = to `nvcc_wrapper` [\\#4646](https://github.com/kokkos/kokkos/pull/4646)\n- Use external GoogleTest optionally [\\#4563](https://github.com/kokkos/kokkos/pull/4563)\n- Silent warnings about multiple optimization flags with `nvcc_wrapper` [\\#4502](https://github.com/kokkos/kokkos/pull/4502)\n- Use the same flags in Makefile.kokkos for POWER7/8/9 as for CMake [\\#4483](https://github.com/kokkos/kokkos/pull/4483)\n- Fix support for A64FX architecture [\\#4745](https://github.com/kokkos/kokkos/pull/4745)\n\n### Incompatibilities:\n- Drop `KOKKOS_ARCH_HIP` macro when using generated GNU makefiles [\\#4786](https://github.com/kokkos/kokkos/pull/4786)\n- Remove gcc-toolchain auto add for clang in Makefile.kokkos [\\#4762](https://github.com/kokkos/kokkos/pull/4762)\n\n### Bug Fixes:\n- Lock constant memory in Cuda/HIP kernel launch with a mutex (thread safety) [\\#4525](https://github.com/kokkos/kokkos/pull/4525)\n- Fix overflow for large requested scratch allocation [\\#4551](https://github.com/kokkos/kokkos/pull/4551)\n- Fix Windows build in mingw [\\#4564](https://github.com/kokkos/kokkos/pull/4564)\n- Fix `kokkos_launch_compiler`: escape `$` character [\\#4769](https://github.com/kokkos/kokkos/pull/4769) [\\#4703](https://github.com/kokkos/kokkos/pull/4703)\n- Fix math functions with NVCC and GCC 5 as host compiler [\\#4733](https://github.com/kokkos/kokkos/pull/4733)\n- Fix shared build with Intel19 [\\#4725](https://github.com/kokkos/kokkos/pull/4725)\n- Do not install empty `desul/src/` directory [\\#4714](https://github.com/kokkos/kokkos/pull/4714)\n- Fix wrong `device_id` computation in `identifier_from_devid` (Profiling Interface) [\\#4694](https://github.com/kokkos/kokkos/pull/4694)\n- Fix a bug in CUDA scratch memory pool (abnormally high memory consumption) [\\#4673](https://github.com/kokkos/kokkos/pull/4673)\n- Remove eval of command args in `hpcbind` [\\#4630](https://github.com/kokkos/kokkos/pull/4630)\n- SYCL fix to run when no GPU is detected [\\#4623](https://github.com/kokkos/kokkos/pull/4623)\n- Fix `layout_strides::span` for rank-0 views [\\#4605](https://github.com/kokkos/kokkos/pull/4605)\n- Fix SYCL atomics for local memory [\\#4585](https://github.com/kokkos/kokkos/pull/4585)\n- Hotfix `mdrange_large_deep_copy` for SYCL [\\#4581](https://github.com/kokkos/kokkos/pull/4581)\n- Fix bug when sorting integer using the HIP backend [\\#4570](https://github.com/kokkos/kokkos/pull/4570)\n- Fix compilation error when using HIP with RDC [\\#4553](https://github.com/kokkos/kokkos/pull/4553)\n- `DynamicView`: Fix deallocation extent [\\#4533](https://github.com/kokkos/kokkos/pull/4533)\n- SYCL fix running parallel_reduce with TeamPolicy for large ranges [\\#4532](https://github.com/kokkos/kokkos/pull/4532)\n- Fix bash syntax error in `nvcc_wrapper` [\\#4524](https://github.com/kokkos/kokkos/pull/4524)\n- OpenMPTarget `team_policy` reduce fixes for `init/join` reductions [\\#4521](https://github.com/kokkos/kokkos/pull/4521)\n- Avoid hangs in the Threads backend [\\#4499](https://github.com/kokkos/kokkos/pull/4499)\n- OpenMPTarget fix reduction bug in `parallel_reduce` for `TeamPolicy` [\\#4491](https://github.com/kokkos/kokkos/pull/4491)\n- HIP fix scratch space per instance [\\#4439](https://github.com/kokkos/kokkos/pull/4439)\n- OpenMPTarget fix team scratch allocation [\\#4431](https://github.com/kokkos/kokkos/pull/4431)\n\n\n## [3.5.00](https://github.com/kokkos/kokkos/tree/3.5.00) (2021-10-19)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/3.4.01...3.5.00)\n\n### Features:\n\n- Add support for quad-precision math functions/traits [\\#4098](https://github.com/kokkos/kokkos/pull/4098)\n- Adding ExecutionSpace partitioning function [\\#4096](https://github.com/kokkos/kokkos/pull/4096)\n- Improve Python Interop Capabilities [\\#4065](https://github.com/kokkos/kokkos/pull/4065)\n- Add half_t Kokkos::rand specialization [\\#3922](https://github.com/kokkos/kokkos/pull/3922)\n- Add math special functions: erf, erfcx, expint1, Bessel functions, Hankel functions [\\#3920](https://github.com/kokkos/kokkos/pull/3920)\n- Add missing common mathematical functions [\\#4043](https://github.com/kokkos/kokkos/pull/4043) [\\#4036](https://github.com/kokkos/kokkos/pull/4036) [\\#4034](https://github.com/kokkos/kokkos/pull/4034)\n- Let the numeric traits be SFINAE-friendly [\\#4038](https://github.com/kokkos/kokkos/pull/4038)\n- Add Desul atomics - enabling memory-order and memory-scope parameters [\\#3247](https://github.com/kokkos/kokkos/pull/3247)\n- Add detection idiom from the C++ standard library extension version 2 [\\#3980](https://github.com/kokkos/kokkos/pull/3980)\n- Fence Profiling Support in all backends [\\#3966](https://github.com/kokkos/kokkos/pull/3966) [\\#4304](https://github.com/kokkos/kokkos/pull/4304) [\\#4258](https://github.com/kokkos/kokkos/pull/4258) [\\#4232](https://github.com/kokkos/kokkos/pull/4232)\n- Significant SYCL enhancements (see below)\n\n### Deprecations:\n\n- Deprecate CUDA_SAFE_CALL and HIP_SAFE_CALL [\\#4249](https://github.com/kokkos/kokkos/pull/4249)\n- Deprecate Kokkos::Impl::Timer (Kokkos::Timer has been available for a long time) [\\#4201](https://github.com/kokkos/kokkos/pull/4201)\n- Deprecate Experimental::MasterLock [\\#4094](https://github.com/kokkos/kokkos/pull/4094)\n- Deprecate Kokkos_TaskPolicy.hpp (headers got reorganized, doesn't remove functionality) [\\#4011](https://github.com/kokkos/kokkos/pull/4011)\n- Deprecate backward compatibility features [\\#3978](https://github.com/kokkos/kokkos/pull/3978)\n- Update and deprecate is_space::host_memory/execution/mirror_space [\\#3973](https://github.com/kokkos/kokkos/pull/3973)\n\n\n### Backends and Archs Enhancements:\n\n- Enabling constbitset constructors in kernels [\\#4296](https://github.com/kokkos/kokkos/pull/4296)\n- Use ZeroMemset in View constructor to improve performance [\\#4226](https://github.com/kokkos/kokkos/pull/4226)\n- Use memset in deep_copy [\\#3944](https://github.com/kokkos/kokkos/pull/3944)\n- Add missing fence() calls in resize(View) that effectively do deep_copy(resized, orig) [\\#4212](https://github.com/kokkos/kokkos/pull/4212)\n- Avoid allocations in resize and realloc [\\#4207](https://github.com/kokkos/kokkos/pull/4207)\n- StaticCsrGraph: use device type instead of execution space to construct views [\\#3991](https://github.com/kokkos/kokkos/pull/3991)\n- Consider std::sort when view is accessible from host [\\#3929](https://github.com/kokkos/kokkos/pull/3929)\n- Fix CPP20 warnings except for volatile [\\#4312](https://github.com/kokkos/kokkos/pull/4312)\n\n#### SYCL:\n- Introduce SYCLHostUSMSpace [\\#4268](https://github.com/kokkos/kokkos/pull/4268)\n- Implement SYCL TeamPolicy for vector_size > 1 [\\#4183](https://github.com/kokkos/kokkos/pull/4183)\n- Enable 64bit ranges for SYCL [\\#4211](https://github.com/kokkos/kokkos/pull/4211)\n- Don't print SYCL device info in execution space intialization [\\#4168](https://github.com/kokkos/kokkos/pull/4168)\n- Improve SYCL MDRangePolicy performance [\\#4161](https://github.com/kokkos/kokkos/pull/4161)\n- Use sub_groups in SYCL parallel_scan [\\#4147](https://github.com/kokkos/kokkos/pull/4147)\n- Implement subgroup reduction for SYCL RangePolicy parallel_reduce [\\#3940](https://github.com/kokkos/kokkos/pull/3940)\n- Use DPC++ broadcast extension in SYCL team_broadcast [\\#4103](https://github.com/kokkos/kokkos/pull/4103)\n- Only fence in SYCL parallel_reduce for non-device-accessible result_ptr [\\#4089](https://github.com/kokkos/kokkos/pull/4089)\n- Improve fencing behavior in SYCL backend [\\#4088](https://github.com/kokkos/kokkos/pull/4088)\n- Fence all registered SYCL queues before deallocating memory [\\#4086](https://github.com/kokkos/kokkos/pull/4086)\n- Implement SYCL::print_configuration [\\#3992](https://github.com/kokkos/kokkos/pull/3992)\n- Reuse scratch memory in parallel_scan and TeamPolicy (decreases memory footprint) [\\#3899](https://github.com/kokkos/kokkos/pull/3899) [\\#3889](https://github.com/kokkos/kokkos/pull/3889)\n\n#### CUDA:\n- Cuda improve heuristic for blocksize [\\#4271](https://github.com/kokkos/kokkos/pull/4271)\n- Don't use [[deprecated]] for nvcc [\\#4229](https://github.com/kokkos/kokkos/pull/4229)\n- Improve error message for NVHPC as host compiler [\\#4227](https://github.com/kokkos/kokkos/pull/4227)\n- Update support for cuda reductions to work with types < 4bytes [\\#4156](https://github.com/kokkos/kokkos/pull/4156)\n- Fix incompatible team size deduction in rare cases parallel_reduce [\\#4142](https://github.com/kokkos/kokkos/pull/4142)\n- Remove UVM usage in DynamicView [\\#4129](https://github.com/kokkos/kokkos/pull/4129)\n- Remove dependency between core and containers [\\#4114](https://github.com/kokkos/kokkos/pull/4114)\n- Adding opt-in CudaMallocSync support when using CUDA version >= 11.2 [\\#4026](https://github.com/kokkos/kokkos/pull/4026) [\\#4233](https://github.com/kokkos/kokkos/pull/4233)\n- Fix a potential race condition in the CUDA backend [\\#3999](https://github.com/kokkos/kokkos/pull/3999)\n\n#### HIP:\n- Implement new blocksize deduction method for HIP Backend [\\#3953](https://github.com/kokkos/kokkos/pull/3953)\n- Add multiple LaunchMechanism [\\#3820](https://github.com/kokkos/kokkos/pull/3820)\n- Make HIP backend thread-safe [\\#4170](https://github.com/kokkos/kokkos/pull/4170)\n\n#### Serial:\n- Refactor Serial backend and fix thread-safety issue [\\#4053](https://github.com/kokkos/kokkos/pull/4053)\n\n#### OpenMPTarget:\n- OpenMPTarget: support array reductions in RangePolicy [\\#4040](https://github.com/kokkos/kokkos/pull/4040)\n- OpenMPTarget: add MDRange parallel_reduce [\\#4032](https://github.com/kokkos/kokkos/pull/4032)\n- OpenMPTarget: Fix bug in for the case of a reducer. [\\#4044](https://github.com/kokkos/kokkos/pull/4044)\n- OpenMPTarget: verify process fix [\\#4041](https://github.com/kokkos/kokkos/pull/4041)\n\n### Implemented enhancements BuildSystem\n\n#### Important BuildSystem Updates:\n- Use hipcc architecture autodetection when Kokkos_ARCH is not set [\\#3941](https://github.com/kokkos/kokkos/pull/3941)\n- Introduce Kokkos_ENABLE_DEPRECATION_WARNINGS and remove deprecated code with Kokkos_ENABLE_DEPRECATED_CODE_3 [\\#4106](https://github.com/kokkos/kokkos/pull/4106) [\\#3855](https://github.com/kokkos/kokkos/pull/3855)\n\n#### Other Improvements:\n- Add allow-unsupported-compiler flag to nvcc-wrapper [\\#4298](https://github.com/kokkos/kokkos/pull/4298)\n- nvcc_wrapper: fix errors in argument handling [\\#3993](https://github.com/kokkos/kokkos/pull/3993)\n- Adds support for -time=<file> and -time <file> in nvcc_wrapper [\\#4015](https://github.com/kokkos/kokkos/pull/4015)\n- nvcc_wrapper: suppress duplicates of GPU architecture and RDC flags [\\#3968](https://github.com/kokkos/kokkos/pull/3968)\n- Fix TMPDIR support in nvcc_wrapper [\\#3792](https://github.com/kokkos/kokkos/pull/3792)\n- NVHPC: update PGI compiler arch flags [\\#4133](https://github.com/kokkos/kokkos/pull/4133)\n- Replace PGI with NVHPC (works for both) [\\#4196](https://github.com/kokkos/kokkos/pull/4196)\n- Make sure that KOKKOS_CXX_HOST_COMPILER_ID is defined [\\#4235](https://github.com/kokkos/kokkos/pull/4235)\n- Add options to Makefile builds for deprecated code and warnings [\\#4215](https://github.com/kokkos/kokkos/pull/4215)\n- Use KOKKOS_CXX_HOST_COMPILER_ID for identifying CPU arch flags [\\#4199](https://github.com/kokkos/kokkos/pull/4199)\n- Added support for Cray Clang to Makefile.kokkos [\\#4176](https://github.com/kokkos/kokkos/pull/4176)\n- Add XLClang as compiler [\\#4120](https://github.com/kokkos/kokkos/pull/4120)\n- Keep quoted compiler flags when passing to Trilinos [\\#3987](https://github.com/kokkos/kokkos/pull/3987)\n- Add support for AMD Zen3 CPU architecture [\\#3972](https://github.com/kokkos/kokkos/pull/3972)\n- Rename IntelClang to IntelLLVM [\\#3945](https://github.com/kokkos/kokkos/pull/3945)\n- Add cppcoreguidelines-pro-type-cstyle-cast to clang-tidy [\\#3522](https://github.com/kokkos/kokkos/pull/3522)\n- Add sve bit size definition for A64FX [\\#3947](https://github.com/kokkos/kokkos/pull/3947) [\\#3946](https://github.com/kokkos/kokkos/pull/3946)\n- Remove KOKKOS_ENABLE_DEBUG_PRINT_KERNEL_NAMES [\\#4150](https://github.com/kokkos/kokkos/pull/4150)\n\n### Other Changes:\n\n#### Tool Enhancements:\n\n- Retrieve original value from a point in a MultidimensionalSparseTuningProblem [\\#3977](https://github.com/kokkos/kokkos/pull/3977)\n- Allow extension of built-in tuners with additional tuning axes [\\#3961](https://github.com/kokkos/kokkos/pull/3961)\n- Added a categorical tuner [\\#3955](https://github.com/kokkos/kokkos/pull/3955)\n\n\n#### Miscellaneous:\n\n- hpcbind: Use double quotes around $@ when invoking user command [\\#4284](https://github.com/kokkos/kokkos/pull/4284)\n- Add file and line to error message [\\#3985](https://github.com/kokkos/kokkos/pull/3985)\n- Fix compiler warnings when compiling with nvc++ [\\#4198](https://github.com/kokkos/kokkos/pull/4198)\n- Add OpenMPTarget CI build on AMD GPUs [\\#4055](https://github.com/kokkos/kokkos/pull/4055)\n- CI: icpx is now part of intel container [\\#4002](https://github.com/kokkos/kokkos/pull/4002)\n\n### Incompatibilities:\n\n- Remove pre CUDA 9 KOKKOS_IMPL_CUDA_* macros [\\#4138](https://github.com/kokkos/kokkos/pull/4138)\n\n### Bug Fixes:\n- UnorderedMap::clear() should zero the size() [\\#4130](https://github.com/kokkos/kokkos/pull/4130)\n- Add memory fence for HostSharedPtr::cleanup() [\\#4144](https://github.com/kokkos/kokkos/pull/4144)\n- SYCL: Fix race conditions in TeamPolicy::parallel_reduce [\\#4418](https://github.com/kokkos/kokkos/pull/4418)\n- Adding missing memory fence to serial exec space fence. [\\#4292](https://github.com/kokkos/kokkos/pull/4292)\n- Fix using external SYCL queues in tests [\\#4291](https://github.com/kokkos/kokkos/pull/4291)\n- Fix digits10 bug [\\#4281](https://github.com/kokkos/kokkos/pull/4281)\n- Fixes constexpr errors with frounding-math on gcc < 10. [\\#4278](https://github.com/kokkos/kokkos/pull/4278)\n- Fix compiler flags for PGI/NVHPC [\\#4264](https://github.com/kokkos/kokkos/pull/4264)\n- Fix Zen2/3 also implying Zen Arch with Makefiles [\\#4260](https://github.com/kokkos/kokkos/pull/4260)\n- Kokkos_Cuda.hpp: Fix shadow warning with cuda/11.0 [\\#4252](https://github.com/kokkos/kokkos/pull/4252)\n- Fix issue w/ static initialization of function attributes [\\#4242](https://github.com/kokkos/kokkos/pull/4242)\n- Disable long double hypot test on Power systems [\\#4221](https://github.com/kokkos/kokkos/pull/4221)\n- Fix false sharing in random pool [\\#4218](https://github.com/kokkos/kokkos/pull/4218)\n- Fix a missing memory_fence for debug shared alloc code [\\#4216](https://github.com/kokkos/kokkos/pull/4216)\n- Fix two xl issues [\\#4179](https://github.com/kokkos/kokkos/pull/4179)\n- Makefile.kokkos: fix (standard_in) 1: syntax error [\\#4173](https://github.com/kokkos/kokkos/pull/4173)\n- Fixes for query_device example [\\#4172](https://github.com/kokkos/kokkos/pull/4172)\n- Fix a bug when using HIP atomic with Kokkos::Complex [\\#4159](https://github.com/kokkos/kokkos/pull/4159)\n- Fix mistaken logic in pthread creation [\\#4157](https://github.com/kokkos/kokkos/pull/4157)\n- Define KOKKOS_ENABLE_AGGRESSIVE_VECTORIZATION when requesting Kokkos_ENABLE_AGGRESSIVE_VECTORIZATION=ON [\\#4107](https://github.com/kokkos/kokkos/pull/4107)\n- Fix compilation with latest MSVC version [\\#4102](https://github.com/kokkos/kokkos/pull/4102)\n- Fix incorrect macro definitions when compiling with Intel compiler on Windows [\\#4087](https://github.com/kokkos/kokkos/pull/4087)\n- Fixup global buffer overflow in hand rolled string manipulation [\\#4070](https://github.com/kokkos/kokkos/pull/4070)\n- Fixup heap buffer overflow in cmd line args parsing unit tests [\\#4069](https://github.com/kokkos/kokkos/pull/4069)\n- Only add quotes in compiler flags for Trilinos if necessary [\\#4067](https://github.com/kokkos/kokkos/pull/4067)\n- Fixed invocation of tools init callbacks [\\#4061](https://github.com/kokkos/kokkos/pull/4061)\n- Work around SYCL JIT compiler issues with static variables [\\#4013](https://github.com/kokkos/kokkos/pull/4013)\n- Fix TestDetectionIdiom.cpp test inclusion for Trilinos/TriBITS [\\#4010](https://github.com/kokkos/kokkos/pull/4010)\n- Fixup allocation headers with OpenMPTarget backend [\\#4003](https://github.com/kokkos/kokkos/pull/4003)\n- Add missing specialization for OMPT to Kokkos Random [\\#3967](https://github.com/kokkos/kokkos/pull/3967)\n- Disable hypot long double test on power arches [\\#3962](https://github.com/kokkos/kokkos/pull/3962)\n- Use different EBO workaround for MSVC (rebased) [\\#3924](https://github.com/kokkos/kokkos/pull/3924)\n- Fix SYCL Kokkos::Profiling::(de)allocateData calls [\\#3928](https://github.com/kokkos/kokkos/pull/3928)\n\n## [3.4.01](https://github.com/kokkos/kokkos/tree/3.4.01) (2021-05-19)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/3.4.00...3.4.01)\n\n**Bug Fixes:**\n- Windows: Remove atomic_compare_exchange_strong overload conflicts with Windows [\\#4024](https://github.com/kokkos/kokkos/pull/4024)\n- OpenMPTarget: Fixup allocation headers with OpenMPTarget backend [\\#4020](https://github.com/kokkos/kokkos/pull/4020)\n- OpenMPTarget: Add missing specailization for OMPT to Kokkos Random [\\#4022](https://github.com/kokkos/kokkos/pull/4022)\n- AMD: Add support for AMD Zen3 CPU architecture [\\#4021](https://github.com/kokkos/kokkos/pull/4021)\n- SYCL: Implement SYCL::print_configuration [\\#4012](https://github.com/kokkos/kokkos/pull/4012)\n- Containers: staticcsrgraph: use device type instead of execution space to construct views [\\#3998](https://github.com/kokkos/kokkos/pull/3998)\n- nvcc_wrapper: fix errors in argument handling, suppress duplicates of GPU architecture and RDC flags [\\#4006](https://github.com/kokkos/kokkos/pull/4006)\n- CI: Add icpx testing to intel container [\\#4004](https://github.com/kokkos/kokkos/pull/4004)\n- CMake/TRIBITS: Keep quoted compiler flags when passing to Trilinos [\\#4007](https://github.com/kokkos/kokkos/pull/4007)\n- CMake: Rename IntelClang to IntelLLVM [\\#3945](https://github.com/kokkos/kokkos/pull/3945)\n\n## [3.4.00](https://github.com/kokkos/kokkos/tree/3.4.00) (2021-04-25)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/3.3.01...3.4.00)\n\n**Highlights:**\n- SYCL Backend Almost Feature Complete\n- OpenMPTarget Backend Almost Feature Complete\n- Performance Improvements for HIP backend\n- Require CMake 3.16 or newer\n- Tool Callback Interface Enhancements\n- cmath wrapper functions available now in Kokkos::Experimental\n\n**Features:**\n- Implement parallel_scan with ThreadVectorRange and Reducer [\\#3861](https://github.com/kokkos/kokkos/pull/3861)\n- Implement SYCL Random [\\#3849](https://github.com/kokkos/kokkos/pull/3849)\n- OpenMPTarget: Adding Implementation for nested reducers [\\#3845](https://github.com/kokkos/kokkos/pull/3845)\n- Implement UniqueToken for SYCL [\\#3833](https://github.com/kokkos/kokkos/pull/3833)\n- OpenMPTarget: UniqueToken::Global implementation [\\#3823](https://github.com/kokkos/kokkos/pull/3823)\n- DualView sync's on ExecutionSpaces [\\#3822](https://github.com/kokkos/kokkos/pull/3822)\n- SYCL outer TeamPolicy parallel_reduce [\\#3818](https://github.com/kokkos/kokkos/pull/3818)\n- SYCL TeamPolicy::team_scan [\\#3815](https://github.com/kokkos/kokkos/pull/3815)\n- SYCL MDRangePolicy parallel_reduce [\\#3801](https://github.com/kokkos/kokkos/pull/3801)\n- Enable use of execution space instances in ScatterView [\\#3786](https://github.com/kokkos/kokkos/pull/3786)\n- SYCL TeamPolicy nested parallel_reduce [\\#3783](https://github.com/kokkos/kokkos/pull/3783)\n- OpenMPTarget: MDRange with TagType for parallel_for [\\#3781](https://github.com/kokkos/kokkos/pull/3781)\n- Adding OpenMPTarget parallel_scan [\\#3655](https://github.com/kokkos/kokkos/pull/3655)\n- SYCL basic TeamPolicy [\\#3654](https://github.com/kokkos/kokkos/pull/3654)\n- OpenMPTarget: scratch memory implementation [\\#3611](https://github.com/kokkos/kokkos/pull/3611)\n\n**Implemented enhancements Backends and Archs:**\n- SYCL choose a specific GPU [\\#3918](https://github.com/kokkos/kokkos/pull/3918)\n- [HIP] Lock access to scratch memory when using Teams [\\#3916](https://github.com/kokkos/kokkos/pull/3916)\n- [HIP] fix multithreaded access to get_next_driver [\\#3908](https://github.com/kokkos/kokkos/pull/3908)\n- Forward declare HIPHostPinnedSpace and SYCLSharedUSMSpace [\\#3902](https://github.com/kokkos/kokkos/pull/3902)\n- Let SYCL USMObjectMem use SharedAllocationRecord [\\#3898](https://github.com/kokkos/kokkos/pull/3898)\n- Implement clock_tic for SYCL [\\#3893](https://github.com/kokkos/kokkos/pull/3893)\n- Don't use a static variable in HIPInternal::scratch_space [\\#3866](https://github.com/kokkos/kokkos/pull/3866)(https://github.com/kokkos/kokkos/pull/3866)\n- Reuse memory for SYCL parallel_reduce [\\#3873](https://github.com/kokkos/kokkos/pull/3873)\n- Update SYCL compiler in CI [\\#3826](https://github.com/kokkos/kokkos/pull/3826)\n- Introduce HostSharedPtr to manage m_space_instance for Cuda/HIP/SYCL [\\#3824](https://github.com/kokkos/kokkos/pull/3824)\n- [HIP] Use shuffle for range reduction [\\#3811](https://github.com/kokkos/kokkos/pull/3811)\n- OpenMPTarget: Changes to the hierarchical parallelism [\\#3808](https://github.com/kokkos/kokkos/pull/3808)\n- Remove ExtendedReferenceWrapper for SYCL parallel_reduce [\\#3802](https://github.com/kokkos/kokkos/pull/3802)\n- Eliminate sycl_indirect_launch [\\#3777](https://github.com/kokkos/kokkos/pull/3777)\n- OpenMPTarget: scratch implementation for parallel_reduce [\\#3776](https://github.com/kokkos/kokkos/pull/3776)\n- Allow initializing SYCL execution space from sycl::queue and SYCL::impl_static_fence [\\#3767](https://github.com/kokkos/kokkos/pull/3767)\n- SYCL TeamPolicy scratch memory alternative [\\#3763](https://github.com/kokkos/kokkos/pull/3763)\n- Alternative implementation for SYCL TeamPolicy [\\#3759](https://github.com/kokkos/kokkos/pull/3759)\n- Unify handling of synchronous errors in SYCL [\\#3754](https://github.com/kokkos/kokkos/pull/3754)\n- core/Cuda: Half_t updates for cgsolve [\\#3746](https://github.com/kokkos/kokkos/pull/3746)\n- Unify HIPParallelLaunch structures [\\#3733](https://github.com/kokkos/kokkos/pull/3733)\n- Improve performance for SYCL parallel_reduce [\\#3732](https://github.com/kokkos/kokkos/pull/3732)\n- Use consistent types in Kokkos_OpenMPTarget_Parallel.hpp [\\#3703](https://github.com/kokkos/kokkos/pull/3703)\n- Implement non-blocking kernel launches for HIP backend [\\#3697](https://github.com/kokkos/kokkos/pull/3697)\n- Change SYCLInternal::m_queue std::unique_ptr -> std::optional [\\#3677](https://github.com/kokkos/kokkos/pull/3677)\n- Use alternative SYCL parallel_reduce implementation [\\#3671](https://github.com/kokkos/kokkos/pull/3671)\n- Use runtime values in KokkosExp_MDRangePolicy.hpp [\\#3626](https://github.com/kokkos/kokkos/pull/3626)\n- Clean up AnalyzePolicy [\\#3564](https://github.com/kokkos/kokkos/pull/3564)\n- Changes for indirect launch of SYCL parallel reduce [\\#3511](https://github.com/kokkos/kokkos/pull/3511)\n\n**Implemented enhancements BuildSystem:**\n- Also require C++14 when building gtest [\\#3912](https://github.com/kokkos/kokkos/pull/3912)\n- Fix compiling SYCL with OpenMP [\\#3874](https://github.com/kokkos/kokkos/pull/3874)\n- Require C++17 for SYCL (at configuration time) [\\#3869](https://github.com/kokkos/kokkos/pull/3869)\n- Add COMPILE_DEFINITIONS argument to kokkos_create_imported_tpl [\\#3862](https://github.com/kokkos/kokkos/pull/3862)\n- Do not pass arch flags to the linker with no rdc [\\#3846](https://github.com/kokkos/kokkos/pull/3846)\n- Try compiling C++14 check with C++14 support and print error message [\\#3843](https://github.com/kokkos/kokkos/pull/3843)\n- Enable HIP with Cray Clang [\\#3842](https://github.com/kokkos/kokkos/pull/3842)\n- Add an option to disable header self containment tests [\\#3834](https://github.com/kokkos/kokkos/pull/3834)\n- CMake check for C++14 [\\#3809](https://github.com/kokkos/kokkos/pull/3809)\n- Prefer -std=* over --std=* [\\#3779](https://github.com/kokkos/kokkos/pull/3779)\n- Kokkos launch compiler updates [\\#3778](https://github.com/kokkos/kokkos/pull/3778)\n- Updated comments and enabled no-op for kokkos_launch_compiler [\\#3774](https://github.com/kokkos/kokkos/pull/3774)\n- Apple's Clang not correctly recognised [\\#3772](https://github.com/kokkos/kokkos/pull/3772)\n- kokkos_launch_compiler + CUDA auto-detect arch [\\#3770](https://github.com/kokkos/kokkos/pull/3770)\n- Add Spack test support for Kokkos [\\#3753](https://github.com/kokkos/kokkos/pull/3753)\n- Split SYCL tests for aot compilation [\\#3741](https://github.com/kokkos/kokkos/pull/3741)\n- Use consistent OpenMP flag for IntelClang [\\#3735](https://github.com/kokkos/kokkos/pull/3735)\n- Add support for -Wno-deprecated-gpu-targets [\\#3722](https://github.com/kokkos/kokkos/pull/3722)\n- Add configuration to target CUDA compute capability 8.6 [\\#3713](https://github.com/kokkos/kokkos/pull/3713)\n- Added VERSION and SOVERSION to KOKKOS_INTERNAL_ADD_LIBRARY [\\#3706](https://github.com/kokkos/kokkos/pull/3706)\n- Add fast-math to known NVCC flags [\\#3699](https://github.com/kokkos/kokkos/pull/3699)\n- Add MI-100 arch string [\\#3698](https://github.com/kokkos/kokkos/pull/3698)\n- Require CMake >=3.16 [\\#3679](https://github.com/kokkos/kokkos/pull/3679)\n- KokkosCI.cmake, KokkosCTest.cmake.in, CTestConfig.cmake.in + CI updates [\\#2844](https://github.com/kokkos/kokkos/pull/2844)\n\n**Implemented enhancements Tools:**\n- Improve readability of the callback invocation in profiling [\\#3860](https://github.com/kokkos/kokkos/pull/3860)\n- V1.1 Tools Interface: incremental, action-based [\\#3812](https://github.com/kokkos/kokkos/pull/3812)\n- Enable launch latency simulations [\\#3721](https://github.com/kokkos/kokkos/pull/3721)\n- Added metadata callback to tools interface [\\#3711](https://github.com/kokkos/kokkos/pull/3711)\n- MDRange Tile Size Tuning [\\#3688](https://github.com/kokkos/kokkos/pull/3688)\n- Added support for command-line args for kokkos-tools [\\#3627](https://github.com/kokkos/kokkos/pull/3627)\n- Query max tile sizes for an MDRangePolicy, and set tile sizes on an existing policy [\\#3481](https://github.com/kokkos/kokkos/pull/3481)\n\n**Implemented enhancements Other:**\n- Try detecting ndevices in get_gpu [\\#3921](https://github.com/kokkos/kokkos/pull/3921)\n- Use strcmp to compare names() [\\#3909](https://github.com/kokkos/kokkos/pull/3909)\n- Add execution space arguments for constructor overloads that might allocate a new underlying View [\\#3904](https://github.com/kokkos/kokkos/pull/3904)\n- Prefix labels in internal use of kokkos_malloc [\\#3891](https://github.com/kokkos/kokkos/pull/3891)\n- Prefix labels for internal uses of SharedAllocationRecord [\\#3890](https://github.com/kokkos/kokkos/pull/3890)\n- Add missing hypot math function [\\#3880](https://github.com/kokkos/kokkos/pull/3880)\n- Unify algorithm unit tests to avoid code duplication [\\#3851](https://github.com/kokkos/kokkos/pull/3851)\n- DualView.template view() better matches for Devices in UVMSpace cases [\\#3857](https://github.com/kokkos/kokkos/pull/3857)\n- More extensive disentangling of Policy Traits [\\#3829](https://github.com/kokkos/kokkos/pull/3829)\n- Replaced nanosleep and sched_yield with STL routines [\\#3825](https://github.com/kokkos/kokkos/pull/3825)\n- Constructing Atomic Subviews [\\#3810](https://github.com/kokkos/kokkos/pull/3810)\n- Metadata Declaration in Core [\\#3729](https://github.com/kokkos/kokkos/pull/3729)\n- Allow using tagged final functor in parallel_reduce [\\#3714](https://github.com/kokkos/kokkos/pull/3714)\n- Major duplicate code removal in SharedAllocationRecord specializations [\\#3658](https://github.com/kokkos/kokkos/pull/3658)\n\n**Fixed bugs:**\n- Provide forward declarations in Kokkos_ViewLayoutTiled.hpp for XL [\\#3911](https://github.com/kokkos/kokkos/pull/3911)\n- Fixup absolute value of floating points in Kokkos complex [\\#3882](https://github.com/kokkos/kokkos/pull/3882)\n- Address intel 17 ICE [\\#3881](https://github.com/kokkos/kokkos/pull/3881)\n- Add missing pow(Kokkos::complex) overloads [\\#3868](https://github.com/kokkos/kokkos/pull/3868)\n- Fix bug {pow, log}(Kokkos::complex) [\\#3866](https://github.com/kokkos/kokkos/pull/3866)(https://github.com/kokkos/kokkos/pull/3866)\n- Cleanup writing to output streams in Cuda [\\#3859](https://github.com/kokkos/kokkos/pull/3859)\n- Fixup cache CUDA fallback execution space instance used by DualView::sync [\\#3856](https://github.com/kokkos/kokkos/pull/3856)\n- Fix cmake warning with pthread [\\#3854](https://github.com/kokkos/kokkos/pull/3854)\n- Fix typo FOUND_CUDA_{DRIVVER -> DRIVER} [\\#3852](https://github.com/kokkos/kokkos/pull/3852)\n- Fix bug in SYCL team_reduce [\\#3848](https://github.com/kokkos/kokkos/pull/3848)\n- Atrocious bug in MDRange tuning [\\#3803](https://github.com/kokkos/kokkos/pull/3803)\n- Fix compiling SYCL with Kokkos_ENABLE_TUNING=ON [\\#3800](https://github.com/kokkos/kokkos/pull/3800)\n- Fixed command line parsing bug [\\#3797](https://github.com/kokkos/kokkos/pull/3797)\n- Workaround race condition in SYCL parallel_reduce [\\#3782](https://github.com/kokkos/kokkos/pull/3782)\n- Fix Atomic{Min,Max} for Kepler30 [\\#3780](https://github.com/kokkos/kokkos/pull/3780)\n- Fix SYCL typo [\\#3755](https://github.com/kokkos/kokkos/pull/3755)\n- Fixed Kokkos_install_additional_files macro [\\#3752](https://github.com/kokkos/kokkos/pull/3752)\n- Fix a typo for Kokkos_ARCH_A64FX [\\#3751](https://github.com/kokkos/kokkos/pull/3751)\n- OpenMPTarget: fixes and workarounds to work with \"Release\" build type [\\#3748](https://github.com/kokkos/kokkos/pull/3748)\n- Fix parsing bug for number of devices command line argument [\\#3724](https://github.com/kokkos/kokkos/pull/3724)\n- Avoid more warnings with clang and C++20 [\\#3719](https://github.com/kokkos/kokkos/pull/3719)\n- Fix gcc-10.1 C++20 warnings [\\#3718](https://github.com/kokkos/kokkos/pull/3718)\n- Fix cuda cache config not being set correct [\\#3712](https://github.com/kokkos/kokkos/pull/3712)\n- Fix dualview deepcopy perftools [\\#3701](https://github.com/kokkos/kokkos/pull/3701)\n- use drand instead of frand in drand [\\#3696](https://github.com/kokkos/kokkos/pull/3696)\n\n**Incompatibilities:**\n- Remove unimplemented member functions of SYCLDevice [\\#3919](https://github.com/kokkos/kokkos/pull/3919)\n- Replace cl::sycl [\\#3896](https://github.com/kokkos/kokkos/pull/3896)\n- Get rid of SYCL workaround in Kokkos_Complex.hpp [\\#3884](https://github.com/kokkos/kokkos/pull/3884)\n- Replace most uses of if_c [\\#3883](https://github.com/kokkos/kokkos/pull/3883)\n- Remove Impl::enable_if_type [\\#3863](https://github.com/kokkos/kokkos/pull/3863)\n- Remove HostBarrier test [\\#3847](https://github.com/kokkos/kokkos/pull/3847)\n- Avoid (void) interface [\\#3836](https://github.com/kokkos/kokkos/pull/3836)\n- Remove VerifyExecutionCanAccessMemorySpace [\\#3813](https://github.com/kokkos/kokkos/pull/3813)\n- Avoid duplicated code in ScratchMemorySpace [\\#3793](https://github.com/kokkos/kokkos/pull/3793)\n- Remove superfluous FunctorFinal specialization [\\#3788](https://github.com/kokkos/kokkos/pull/3788)\n- Rename cl::sycl -> sycl in Kokkos_MathematicalFunctions.hpp [\\#3678](https://github.com/kokkos/kokkos/pull/3678)\n- Remove integer_sequence backward compatibility implementation [\\#3533](https://github.com/kokkos/kokkos/pull/3533)\n\n**Enabled tests:**\n- Fixup re-enable core performance tests [\\#3903](https://github.com/kokkos/kokkos/pull/3903)\n- Enable more SYCL tests [\\#3900](https://github.com/kokkos/kokkos/pull/3900)\n- Restrict MDRange Policy tests for Intel GPUs [\\#3853](https://github.com/kokkos/kokkos/pull/3853)\n- Disable death tests for rawhide [\\#3844](https://github.com/kokkos/kokkos/pull/3844)\n- OpenMPTarget: Block unit tests that do not pass with the nvidia compiler [\\#3839](https://github.com/kokkos/kokkos/pull/3839)\n- Enable Bitset container test for SYCL [\\#3830](https://github.com/kokkos/kokkos/pull/3830)\n- Enable some more SYCL tests [\\#3744](https://github.com/kokkos/kokkos/pull/3744)\n- Enable SYCL atomic tests [\\#3742](https://github.com/kokkos/kokkos/pull/3742)\n- Enable more SYCL perf_tests [\\#3692](https://github.com/kokkos/kokkos/pull/3692)\n- Enable examples for SYCL [\\#3691](https://github.com/kokkos/kokkos/pull/3691)\n\n## [3.3.01](https://github.com/kokkos/kokkos/tree/3.3.01) (2021-01-06)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/3.3.00...3.3.01)\n\n**Bug Fixes:**\n- Fix severe performance bug in DualView which added memcpys for sync and modify [\\#3693](https://github.com/kokkos/kokkos/issues/#3693)\n- Fix performance bug in CUDA backend, where the cuda Cache config was not set correct.\n\n## [3.3.00](https://github.com/kokkos/kokkos/tree/3.3.00) (2020-12-16)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/3.2.01...3.3.00)\n\n**Features:**\n- Require C++14 as minimum C++ standard. C++17 and C++20 are supported too.\n- HIP backend is nearly feature complete. Kokkos Dynamic Task Graphs are missing.\n- Major update for OpenMPTarget: many capabilities now work. For details contact us.\n- Added DPC++/SYCL backend: primary capabilites are working.\n- Added Kokkos Graph API analogous to CUDA Graphs.\n- Added parallel_scan support with TeamThreadRange [\\#3536](https://github.com/kokkos/kokkos/pull/3536)\n- Added Logical Memory Spaces [\\#3546](https://github.com/kokkos/kokkos/pull/3546)\n- Added initial half precision support [\\#3439](https://github.com/kokkos/kokkos/pull/3439)\n- Experimental feature: control cuda occupancy [\\#3379](https://github.com/kokkos/kokkos/pull/3379)\n\n**Implemented enhancements Backends and Archs:**\n- Add a64fx and fujitsu Compiler support [\\#3614](https://github.com/kokkos/kokkos/pull/3614)\n- Adding support for AMD gfx908 archictecture [\\#3375](https://github.com/kokkos/kokkos/pull/3375)\n- SYCL parallel\\_for MDRangePolicy [\\#3583](https://github.com/kokkos/kokkos/pull/3583)\n- SYCL add parallel\\_scan [\\#3577](https://github.com/kokkos/kokkos/pull/3577)\n- SYCL custom reductions [\\#3544](https://github.com/kokkos/kokkos/pull/3544)\n- SYCL Enable container unit tests [\\#3550](https://github.com/kokkos/kokkos/pull/3550)\n- SYCL feature level 5 [\\#3480](https://github.com/kokkos/kokkos/pull/3480)\n- SYCL Feature level 4 (parallel\\_for) [\\#3474](https://github.com/kokkos/kokkos/pull/3474)\n- SYCL feature level 3 [\\#3451](https://github.com/kokkos/kokkos/pull/3451)\n- SYCL feature level 2 [\\#3447](https://github.com/kokkos/kokkos/pull/3447)\n- OpenMPTarget: Hierarchial reduction for + operator on scalars [\\#3504](https://github.com/kokkos/kokkos/pull/3504)\n- OpenMPTarget hierarchical [\\#3411](https://github.com/kokkos/kokkos/pull/3411)\n- HIP Add Impl::atomic\\_[store,load] [\\#3440](https://github.com/kokkos/kokkos/pull/3440)\n- HIP enable global lock arrays [\\#3418](https://github.com/kokkos/kokkos/pull/3418)\n- HIP Implement multiple occupancy paths for various HIP kernel launchers [\\#3366](https://github.com/kokkos/kokkos/pull/3366)\n\n**Implemented enhancements Policies:**\n- MDRangePolicy: Let it be semiregular [\\#3494](https://github.com/kokkos/kokkos/pull/3494)\n- MDRangePolicy: Check narrowing conversion in construction [\\#3527](https://github.com/kokkos/kokkos/pull/3527)\n- MDRangePolicy: CombinedReducers support [\\#3395](https://github.com/kokkos/kokkos/pull/3395)\n- Kokkos Graph: Interface and Default Implementation [\\#3362](https://github.com/kokkos/kokkos/pull/3362)\n- Kokkos Graph: add Cuda Graph implementation [\\#3369](https://github.com/kokkos/kokkos/pull/3369)\n- TeamPolicy: implemented autotuning of team sizes and vector lengths [\\#3206](https://github.com/kokkos/kokkos/pull/3206)\n- RangePolicy: Initialize all data members in default constructor [\\#3509](https://github.com/kokkos/kokkos/pull/3509)\n\n**Implemented enhancements BuildSystem:**\n- Auto-generate core test files for all backends [\\#3488](https://github.com/kokkos/kokkos/pull/3488)\n- Avoid rewriting test files when calling cmake [\\#3548](https://github.com/kokkos/kokkos/pull/3548)\n- RULE\\_LAUNCH\\_COMPILE and RULE\\_LAUNCH\\_LINK system for nvcc\\_wrapper [\\#3136](https://github.com/kokkos/kokkos/pull/3136)\n- Adding -include as a known argument to nvcc\\_wrapper [\\#3434](https://github.com/kokkos/kokkos/pull/3434)\n- Install hpcbind script [\\#3402](https://github.com/kokkos/kokkos/pull/3402)\n- cmake/kokkos\\_tribits.cmake: add parsing for args [\\#3457](https://github.com/kokkos/kokkos/pull/3457)\n\n**Implemented enhancements Tools:**\n- Changed namespacing of Kokkos::Tools::Impl::Impl::tune\\_policy [\\#3455](https://github.com/kokkos/kokkos/pull/3455)\n- Delegate to an impl allocate/deallocate method to allow specifying a SpaceHandle for MemorySpaces [\\#3530](https://github.com/kokkos/kokkos/pull/3530)\n- Use the Kokkos Profiling interface rather than the Impl interface [\\#3518](https://github.com/kokkos/kokkos/pull/3518)\n- Runtime option for tuning [\\#3459](https://github.com/kokkos/kokkos/pull/3459)\n- Dual View Tool Events [\\#3326](https://github.com/kokkos/kokkos/pull/3326)\n\n**Implemented enhancements Other:**\n- Abort on errors instead of just printing [\\#3528](https://github.com/kokkos/kokkos/pull/3528)\n- Enable C++14 macros unconditionally [\\#3449](https://github.com/kokkos/kokkos/pull/3449)\n- Make ViewMapping trivially copyable [\\#3436](https://github.com/kokkos/kokkos/pull/3436)\n- Rename struct ViewMapping to class [\\#3435](https://github.com/kokkos/kokkos/pull/3435)\n- Replace enums in Kokkos\\_ViewMapping.hpp (removes -Wextra) [\\#3422](https://github.com/kokkos/kokkos/pull/3422)\n- Use bool for enums representing bools [\\#3416](https://github.com/kokkos/kokkos/pull/3416)\n- Fence active instead of default execution space instances [\\#3388](https://github.com/kokkos/kokkos/pull/3388)\n- Refactor parallel\\_reduce fence usage [\\#3359](https://github.com/kokkos/kokkos/pull/3359)\n- Moved Space EBO helpers to Kokkos\\_EBO [\\#3357](https://github.com/kokkos/kokkos/pull/3357)\n- Add remove\\_cvref type trait [\\#3340](https://github.com/kokkos/kokkos/pull/3340)\n- Adding identity type traits and update definition of identity\\_t alias [\\#3339](https://github.com/kokkos/kokkos/pull/3339)\n- Add is\\_specialization\\_of type trait [\\#3338](https://github.com/kokkos/kokkos/pull/3338)\n- Make ScratchMemorySpace semi-regular [\\#3309](https://github.com/kokkos/kokkos/pull/3309)\n- Optimize min/max atomics with early exit on no-op case [\\#3265](https://github.com/kokkos/kokkos/pull/3265)\n- Refactor Backend Development [\\#2941](https://github.com/kokkos/kokkos/pull/2941)\n\n**Fixed bugs:**\n- Fixup MDRangePolicy construction from Kokkos arrays [\\#3591](https://github.com/kokkos/kokkos/pull/3591)\n- Add atomic functions for unsigned long long using gcc built-in [\\#3588](https://github.com/kokkos/kokkos/pull/3588)\n- Fixup silent pointless comparison with zero in checked\\_narrow\\_cast (compiler workaround) [\\#3566](https://github.com/kokkos/kokkos/pull/3566)\n- Fixes for ROCm 3.9 [\\#3565](https://github.com/kokkos/kokkos/pull/3565)\n- Fix windows build issues which crept in for the CUDA build [\\#3532](https://github.com/kokkos/kokkos/pull/3532)\n- HIP Fix atomics of large data types and clean up lock arrays [\\#3529](https://github.com/kokkos/kokkos/pull/3529)\n- Pthreads fix exception resulting from 0 grain size [\\#3510](https://github.com/kokkos/kokkos/pull/3510)\n- Fixup do not require atomic operation to be default constructible [\\#3503](https://github.com/kokkos/kokkos/pull/3503)\n- Fix race condition in HIP backend [\\#3467](https://github.com/kokkos/kokkos/pull/3467)\n- Replace KOKKOS\\_DEBUG with KOKKOS\\_ENABLE\\_DEBUG [\\#3458](https://github.com/kokkos/kokkos/pull/3458)\n- Fix multi-stream team scratch space definition for HIP [\\#3398](https://github.com/kokkos/kokkos/pull/3398)\n- HIP fix template deduction [\\#3393](https://github.com/kokkos/kokkos/pull/3393)\n- Fix compiling with HIP and C++17 [\\#3390](https://github.com/kokkos/kokkos/pull/3390)\n- Fix sigFPE in HIP blocksize deduction [\\#3378](https://github.com/kokkos/kokkos/pull/3378)\n- Type alias change: replace CS with CTS to avoid conflicts with NVSHMEM [\\#3348](https://github.com/kokkos/kokkos/pull/3348)\n- Clang compilation of CUDA backend on Windows [\\#3345](https://github.com/kokkos/kokkos/pull/3345)\n- Fix HBW support [\\#3343](https://github.com/kokkos/kokkos/pull/3343)\n- Added missing fences to unique token [\\#3260](https://github.com/kokkos/kokkos/pull/3260)\n\n**Incompatibilities:**\n- Remove unused utilities (forward, move, and expand\\_variadic) from Kokkos::Impl [\\#3535](https://github.com/kokkos/kokkos/pull/3535)\n- Remove unused traits [\\#3534](https://github.com/kokkos/kokkos/pull/3534)\n- HIP: Remove old HCC code [\\#3301](https://github.com/kokkos/kokkos/pull/3301)\n- Prepare for deprecation of ViewAllocateWithoutInitializing [\\#3264](https://github.com/kokkos/kokkos/pull/3264)\n- Remove ROCm backend [\\#3148](https://github.com/kokkos/kokkos/pull/3148)\n\n## [3.2.01](https://github.com/kokkos/kokkos/tree/3.2.01) (2020-11-17)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/3.2.00...3.2.01)\n\n**Fixed bugs:**\n- Disallow KOKKOS_ENABLE_CUDA_RELOCATABLE_DEVICE_CODE in shared library builds [\\#3332](https://github.com/kokkos/kokkos/pull/3332)\n- Do not install libprinter-tool when testing is enabled [\\#3313](https://github.com/kokkos/kokkos/pull/3313)\n- Fix restrict/alignment following refactor [\\#3373](https://github.com/kokkos/kokkos/pull/3373)\n  - Intel fix: workaround compiler issue with using statement [\\#3383](https://github.com/kokkos/kokkos/pull/3383)\n- Fix zero-length reductions [#\\3364](https://github.com/kokkos/kokkos/pull/3364)\n  - Pthread zero-length reduction fix [\\#3452](https://github.com/kokkos/kokkos/pull/3452)\n  - HPX zero-length reduction fix [\\#3470](https://github.com/kokkos/kokkos/pull/3470)\n  - cuda/9.2 zero-length reduction fix [\\#3580](https://github.com/kokkos/kokkos/pull/3580)\n- Fix multi-stream scratch [#\\3269](https://github.com/kokkos/kokkos/pull/3269)\n- Guard KOKKOS_ALL_COMPILE_OPTIONS if Cuda is not enabled [\\#3387](https://github.com/kokkos/kokkos/pull/3387)\n- Do not include link flags for Fortran linkage [\\#3384](https://github.com/kokkos/kokkos/pull/3384)\n- Fix NVIDIA GPU arch macro with autodetection [\\#3473](https://github.com/kokkos/kokkos/pull/3473)\n- Fix libdl/test issues with Trilinos [\\#3543](https://github.com/kokkos/kokkos/pull/3543)\n  - Register Pthread as Tribits option to be enabled with Trilinos [\\#3558](https://github.com/kokkos/kokkos/pull/3558)\n\n**Implemented enhancements:**\n- Separate Cuda timing-based tests into their own executable [\\#3407](https://github.com/kokkos/kokkos/pull/3407)\n\n## [3.2.00](https://github.com/kokkos/kokkos/tree/3.2.00) (2020-08-19)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/3.1.01...3.2.00)\n\n**Implemented enhancements:**\n\n- HIP:Enable stream in HIP [\\#3163](https://github.com/kokkos/kokkos/issues/3163)\n- HIP:Add support for shuffle reduction for the HIP backend [\\#3154](https://github.com/kokkos/kokkos/issues/3154)\n- HIP:Add implementations of missing HIPHostPinnedSpace methods for LAMMPS [\\#3137](https://github.com/kokkos/kokkos/issues/3137)\n- HIP:Require HIP 3.5.0 or higher [\\#3099](https://github.com/kokkos/kokkos/issues/3099)\n- HIP:WorkGraphPolicy for HIP [\\#3096](https://github.com/kokkos/kokkos/issues/3096)\n- OpenMPTarget: Significant update to the new experimental backend.  Requires C++17, works on Intel GPUs, reference counting fixes. [\\#3169](https://github.com/kokkos/kokkos/issues/3169)\n- Windows Cuda support [\\#3018](https://github.com/kokkos/kokkos/issues/3018)\n- Pass `-Wext-lambda-captures-this` to NVCC when support for `__host__ __device__` lambda is enabled from CUDA 11 [\\#3241](https://github.com/kokkos/kokkos/issues/3241)\n- Use explicit staging buffer for constant memory kernel launches and cleanup host/device synchronization [\\#3234](https://github.com/kokkos/kokkos/issues/3234)\n- Various fixup to policies including making TeamPolicy default constructible and making RangePolicy and TeamPolicy assignable: [\\#3202](https://github.com/kokkos/kokkos/issues/3202) , [\\#3203](https://github.com/kokkos/kokkos/issues/3203) , [\\#3196](https://github.com/kokkos/kokkos/issues/3196)\n- Annotations for `DefaultExectutionSpace` and `DefaultHostExectutionSpace` to use in static analysis [\\#3189](https://github.com/kokkos/kokkos/issues/3189)\n- Add documentation on using Spack to install Kokkos and developing packages that depend on Kokkos [\\#3187](https://github.com/kokkos/kokkos/issues/3187)\n- Add OpenMPTarget backend flags for NVC++ compiler [\\#3185](https://github.com/kokkos/kokkos/issues/3185)\n- Move deep\\_copy/create\\_mirror\\_view on Experimental::OffsetView into Kokkos:: namespace [\\#3166](https://github.com/kokkos/kokkos/issues/3166)\n- Allow for larger block size in HIP [\\#3165](https://github.com/kokkos/kokkos/issues/3165)\n- View: Added names of Views to the different View initialize/free kernels [\\#3159](https://github.com/kokkos/kokkos/issues/3159)\n- Cuda: Caching cudaFunctorAttributes and whether L1/Shmem prefer was set [\\#3151](https://github.com/kokkos/kokkos/issues/3151)\n- BuildSystem: Improved performance in default configuration by defaulting to Release build [\\#3131](https://github.com/kokkos/kokkos/issues/3131)\n- Cuda: Update CUDA occupancy calculation [\\#3124](https://github.com/kokkos/kokkos/issues/3124)\n- Vector: Adding data() to Vector [\\#3123](https://github.com/kokkos/kokkos/issues/3123)\n- BuildSystem: Add CUDA Ampere configuration support [\\#3122](https://github.com/kokkos/kokkos/issues/3122)\n- General: Apply [[noreturn]] to Kokkos::abort when applicable [\\#3106](https://github.com/kokkos/kokkos/issues/3106)\n- TeamPolicy: Validate storage level argument passed to TeamPolicy::set\\_scratch\\_size() [\\#3098](https://github.com/kokkos/kokkos/issues/3098)\n- BuildSystem: Make kokkos\\_has\\_string() function in Makefile.kokkos case insensitive [\\#3091](https://github.com/kokkos/kokkos/issues/3091)\n- Modify KOKKOS\\_FUNCTION macro for clang-tidy analysis [\\#3087](https://github.com/kokkos/kokkos/issues/3087)\n- Move allocation profiling to allocate/deallocate calls [\\#3084](https://github.com/kokkos/kokkos/issues/3084)\n- BuildSystem: FATAL\\_ERROR when attempting in-source build [\\#3082](https://github.com/kokkos/kokkos/issues/3082)\n- Change enums in ScatterView to types [\\#3076](https://github.com/kokkos/kokkos/issues/3076)\n- HIP: Changes for new compiler/runtime [\\#3067](https://github.com/kokkos/kokkos/issues/3067)\n- Extract and use get\\_gpu [\\#3061](https://github.com/kokkos/kokkos/issues/3061) , [\\#3048](https://github.com/kokkos/kokkos/issues/3048)\n- Add is\\_allocated to View-like containers [\\#3059](https://github.com/kokkos/kokkos/issues/3059)\n- Combined reducers for scalar references [\\#3052](https://github.com/kokkos/kokkos/issues/3052)\n- Add configurable capacity for UniqueToken [\\#3051](https://github.com/kokkos/kokkos/issues/3051)\n- Add installation testing [\\#3034](https://github.com/kokkos/kokkos/issues/3034)\n- HIP: Add UniqueToken [\\#3020](https://github.com/kokkos/kokkos/issues/3020)\n- Autodetect number of devices [\\#3013](https://github.com/kokkos/kokkos/issues/3013)\n\n\n**Fixed bugs:**\n\n- Check error code from `cudaStreamSynchronize` in CUDA fences [\\#3255](https://github.com/kokkos/kokkos/issues/3255)\n- Fix issue with C++ standard flags when using `nvcc\\_wrapper` with PGI [\\#3254](https://github.com/kokkos/kokkos/issues/3254)\n- Add missing threadfence in lock-based atomics [\\#3208](https://github.com/kokkos/kokkos/issues/3208)\n- Fix dedup of linker flags for shared lib on CMake <=3.12 [\\#3176](https://github.com/kokkos/kokkos/issues/3176)\n- Fix memory leak with CUDA streams [\\#3170](https://github.com/kokkos/kokkos/issues/3170)\n- BuildSystem: Fix OpenMP Target flags for Cray [\\#3161](https://github.com/kokkos/kokkos/issues/3161)\n- ScatterView: fix for OpenmpTarget remove inheritance from reducers [\\#3162](https://github.com/kokkos/kokkos/issues/3162)\n- BuildSystem: Set OpenMP flags according to host compiler [\\#3127](https://github.com/kokkos/kokkos/issues/3127)\n- OpenMP: Fix logic for nested omp in partition\\_master bug [\\#3101](https://github.com/kokkos/kokkos/issues/3101)\n- nvcc\\_wrapper: send --cudart to nvcc instead of host compiler [\\#3092](https://github.com/kokkos/kokkos/issues/3092)\n- BuildSystem: Fixes for Cuda/11 and c++17 [\\#3085](https://github.com/kokkos/kokkos/issues/3085)\n- HIP: Fix print\\_configuration [\\#3080](https://github.com/kokkos/kokkos/issues/3080)\n- Conditionally define get\\_gpu [\\#3072](https://github.com/kokkos/kokkos/issues/3072)\n- Fix bounds for ranges in random number generator [\\#3069](https://github.com/kokkos/kokkos/issues/3069)\n- Fix Cuda minor arch check [\\#3035](https://github.com/kokkos/kokkos/issues/3035)\n- BuildSystem: Add -expt-relaxed-constexpr flag to nvcc\\_wrapper [\\#3021](https://github.com/kokkos/kokkos/issues/3021)\n\n**Incompatibilities:**\n\n- Remove ETI support [\\#3157](https://github.com/kokkos/kokkos/issues/3157)\n- Remove KOKKOS\\_INTERNAL\\_ENABLE\\_NON\\_CUDA\\_BACKEND [\\#3147](https://github.com/kokkos/kokkos/issues/3147)\n- Remove core/unit\\_test/config [\\#3146](https://github.com/kokkos/kokkos/issues/3146)\n- Removed the preprocessor branch for KOKKOS\\_ENABLE\\_PROFILING [\\#3115](https://github.com/kokkos/kokkos/issues/3115)\n- Disable profiling with MSVC [\\#3066](https://github.com/kokkos/kokkos/issues/3066)\n\n**Closed issues:**\n\n- Silent error (Validate storage level arg to set_scratch_size) [\\#3097](https://github.com/kokkos/kokkos/issues/3097)\n- Remove KOKKOS\\_ENABLE\\_PROFILING Option [\\#3095](https://github.com/kokkos/kokkos/issues/3095)\n- Cuda 11 -\\> allow C++17 [\\#3083](https://github.com/kokkos/kokkos/issues/3083)\n- In source build failure not explained [\\#3081](https://github.com/kokkos/kokkos/issues/3081)\n- Allow naming of Views for initialization kernel [\\#3070](https://github.com/kokkos/kokkos/issues/3070)\n- DefaultInit tests failing when using CTest resource allocation feature [\\#3040](https://github.com/kokkos/kokkos/issues/3040)\n- Add installation testing.  [\\#3037](https://github.com/kokkos/kokkos/issues/3037)\n- nvcc\\_wrapper needs to handle `-expt-relaxed-constexpr` flag [\\#3017](https://github.com/kokkos/kokkos/issues/3017)\n- CPU core oversubscription warning on macOS with OpenMP backend [\\#2996](https://github.com/kokkos/kokkos/issues/2996)\n- Default behavior of KOKKOS\\_NUM\\_DEVICES to use all devices available [\\#2975](https://github.com/kokkos/kokkos/issues/2975)\n- Assert blocksize \\> 0 [\\#2974](https://github.com/kokkos/kokkos/issues/2974)\n- Add ability to assign kokkos profile function from executable  [\\#2973](https://github.com/kokkos/kokkos/issues/2973)\n- ScatterView Support for the pre/post increment operator [\\#2967](https://github.com/kokkos/kokkos/issues/2967)\n\n- Compiler issue: Cuda build with clang 10 has errors with the atomic unit tests [\\#3237](https://github.com/kokkos/kokkos/issues/3237)\n- Incompatibility of flags for C++ standard with PGI v20.4 on Power9/NVIDIA V100 system [\\#3252](https://github.com/kokkos/kokkos/issues/3252)\n- Error configuring as subproject [\\#3140](https://github.com/kokkos/kokkos/issues/3140)\n- CMake fails with Nvidia compilers when the GPU architecture option is not supplied (Fix configure with OMPT and Cuda) [\\#3207](https://github.com/kokkos/kokkos/issues/3207)\n- PGI compiler being passed the gcc -fopenmp flag [\\#3125](https://github.com/kokkos/kokkos/issues/3125)\n- Cuda: Memory leak when using CUDA stream [\\#3167](https://github.com/kokkos/kokkos/issues/3167)\n- RangePolicy has an implicitly deleted assignment operator [\\#3192](https://github.com/kokkos/kokkos/issues/3192)\n- MemorySpace::allocate needs to have memory pool counting.  [\\#3064](https://github.com/kokkos/kokkos/issues/3064)\n- Missing write fence for lock based atomics on CUDA [\\#3038](https://github.com/kokkos/kokkos/issues/3038)\n- CUDA compute capability version check problem [\\#3026](https://github.com/kokkos/kokkos/issues/3026)\n- Make DynRankView fencing consistent [\\#3014](https://github.com/kokkos/kokkos/issues/3014)\n- nvcc\\_wrapper cant handle -Xcompiler -o out.o [\\#2993](https://github.com/kokkos/kokkos/issues/2993)\n- Reductions of non-trivial types of size 4 fail in CUDA shfl operations [\\#2990](https://github.com/kokkos/kokkos/issues/2990)\n- complex\\_double misalignment in reduce, clang+CUDA [\\#2989](https://github.com/kokkos/kokkos/issues/2989)\n- Span of degenerated \\(zero-length\\) subviews is not zero in some special cases [\\#2979](https://github.com/kokkos/kokkos/issues/2979)\n- Rank 1 custom layouts dont work as expected. [\\#2840](https://github.com/kokkos/kokkos/issues/2840)\n\n## [3.1.01](https://github.com/kokkos/kokkos/tree/3.1.1) (2020-04-14)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/3.1.00...3.1.1)\n\n**Fixed bugs:**\n\n- Fix complex_double misalignment in reduce, clang+CUDA [\\#2989](https://github.com/kokkos/kokkos/issues/2989)\n- Fix compilation fails when profiling disabled and CUDA enabled [\\#3001](https://github.com/kokkos/kokkos/issues/3001)\n- Fix cuda reduction of non-trivial scalars of size 4 [\\#2990](https://github.com/kokkos/kokkos/issues/2990)\n- Configure and install version file when building in Trilinos [\\#2957](https://github.com/kokkos/kokkos/pull/2957)\n- Fix OpenMPTarget build missing include and namespace [\\#3000](https://github.com/kokkos/kokkos/issues/3000)\n- fix typo in KOKKOS_SET_EXE_PROPERTY() [\\#2959](https://github.com/kokkos/kokkos/issues/2959)\n- Fix non-zero span subviews of zero sized subviews [\\#2979](https://github.com/kokkos/kokkos/issues/2979)\n\n## [3.1.00](https://github.com/kokkos/kokkos/tree/3.1.00) (2020-04-14)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/3.0.00...3.1.00)\n\n**Features:**\n\n- HIP Support for AMD\n- OpenMPTarget Support with clang\n- Windows VS19 (Serial) Support [\\#1533](https://github.com/kokkos/kokkos/issues/1533)\n\n**Implemented enhancements:**\n\n- generate\\_makefile.bash should allow tests to be disabled [\\#2886](https://github.com/kokkos/kokkos/issues/2886)\n- clang/7+cuda/9 build -Werror-unused parameter error in nightly test [\\#2884](https://github.com/kokkos/kokkos/issues/2884)\n- ScatterView memory space is not user settable [\\#2826](https://github.com/kokkos/kokkos/issues/2826)\n- clang/8+cuda/10.0 build error with c++17 [\\#2809](https://github.com/kokkos/kokkos/issues/2809)\n- warnings.... [\\#2805](https://github.com/kokkos/kokkos/issues/2805)\n- Kokkos version in cpp define [\\#2787](https://github.com/kokkos/kokkos/issues/2787)\n- Remove Defunct QThreads Backend [\\#2751](https://github.com/kokkos/kokkos/issues/2751)\n- Improve Kokkos::fence behavior with multiple execution spaces [\\#2659](https://github.com/kokkos/kokkos/issues/2659)\n- polylithic\\(?\\) initialization of Kokkos [\\#2658](https://github.com/kokkos/kokkos/issues/2658)\n- Unnecessary\\(?\\) check for host execution space initialization from Cuda initialization [\\#2652](https://github.com/kokkos/kokkos/issues/2652)\n- Kokkos error reporting failures with CUDA GPUs in exclusive mode [\\#2471](https://github.com/kokkos/kokkos/issues/2471)\n- atomicMax equivalent \\(and other atomics\\) [\\#2401](https://github.com/kokkos/kokkos/issues/2401)\n- Fix alignment for Kokkos::complex [\\#2255](https://github.com/kokkos/kokkos/issues/2255)\n- Warnings with Cuda 10.1 [\\#2206](https://github.com/kokkos/kokkos/issues/2206)\n- dual view with Kokkos::ViewAllocateWithoutInitializing [\\#2188](https://github.com/kokkos/kokkos/issues/2188)\n- Check error code  from cudaOccupancyMaxActiveBlocksPerMultiprocessor [\\#2172](https://github.com/kokkos/kokkos/issues/2172)\n- Add non-member Kokkos::resize/realloc for DualView [\\#2170](https://github.com/kokkos/kokkos/issues/2170)\n- Construct DualView without initialization [\\#2046](https://github.com/kokkos/kokkos/issues/2046)\n- Expose is\\_assignable to determine if one view can be assigned to another [\\#1936](https://github.com/kokkos/kokkos/issues/1936)\n- profiling label [\\#1935](https://github.com/kokkos/kokkos/issues/1935)\n- team\\_broadcast of bool failed on CUDA backend [\\#1908](https://github.com/kokkos/kokkos/issues/1908)\n- View static\\_extent [\\#660](https://github.com/kokkos/kokkos/issues/660)\n- Misleading Kokkos::Cuda::initialize ERROR message when compiled for wrong GPU architecture [\\#1944](https://github.com/kokkos/kokkos/issues/1944)\n- Cryptic Error When Malloc Fails [\\#2164](https://github.com/kokkos/kokkos/issues/2164)\n- Drop support for intermediate standards in CMake [\\#2336](https://github.com/kokkos/kokkos/issues/2336)\n\n**Fixed bugs:**\n\n- DualView sync\\_device with length zero creates cuda errors [\\#2946](https://github.com/kokkos/kokkos/issues/2946)\n- building with nvcc and clang \\(or clang based XL\\) as host compiler: \"Kokkos::atomic\\_fetch\\_min\\(volatile int \\*, int\\)\" has already been defined [\\#2903](https://github.com/kokkos/kokkos/issues/2903)\n- Cuda 9.1,10.1 debug builds failing due to -Werror=unused-parameter [\\#2880](https://github.com/kokkos/kokkos/issues/2880)\n- clang -Werror: Kokkos\\_FixedBufferMemoryPool.hpp:140:28: error: unused parameter 'alloc\\_size' [\\#2869](https://github.com/kokkos/kokkos/issues/2869)\n- intel/16.0.1, intel/17.0.1 nightly build failures with debugging enabled [\\#2867](https://github.com/kokkos/kokkos/issues/2867)\n- intel/16.0.1 debug build errors [\\#2863](https://github.com/kokkos/kokkos/issues/2863)\n- xl/16.1.1 with cpp14, openmp build, nightly test failures [\\#2856](https://github.com/kokkos/kokkos/issues/2856)\n- Intel nightly test failures: team\\_vector [\\#2852](https://github.com/kokkos/kokkos/issues/2852)\n- Kokkos Views with intmax/2\\<N\\<intmax can hang during construction [\\#2850](https://github.com/kokkos/kokkos/issues/2850)\n- workgraph\\_fib test seg-faults with threads backend and hwloc [\\#2797](https://github.com/kokkos/kokkos/issues/2797)\n- cuda.view\\_64bit test hangs on Power8+Kepler37 system - develop and 2.9.00 branches [\\#2771](https://github.com/kokkos/kokkos/issues/2771)\n- device\\_type for Kokkos\\_Random ?  [\\#2693](https://github.com/kokkos/kokkos/issues/2693)\n- \"More than one tag given\" error in Experimental::require\\(\\) [\\#2608](https://github.com/kokkos/kokkos/issues/2608)\n- Segfault on Marvell from our finalization stack [\\#2542](https://github.com/kokkos/kokkos/issues/2542)\n\n## [3.0.00](https://github.com/kokkos/kokkos/tree/3.0.00) (2020-01-27)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/2.9.00...3.0.00)\n\n**Implemented enhancements:**\n\n- BuildSystem: Standalone Modern CMake Support [\\#2104](https://github.com/kokkos/kokkos/issues/2104)\n- StyleFormat: ClangFormat Style [\\#2157](https://github.com/kokkos/kokkos/issues/2157)\n- Documentation: Document build system and CMake philosophy [\\#2263](https://github.com/kokkos/kokkos/issues/2263)\n- BuildSystem: Add Alias with Namespace Kokkos:: to Interal Libraries [\\#2530](https://github.com/kokkos/kokkos/issues/2530)\n- BuildSystem: Universal Kokkos find\\_package [\\#2099](https://github.com/kokkos/kokkos/issues/2099)\n- BuildSystem: Dropping support for Kokkos\\_{DEVICES,OPTIONS,ARCH} in CMake [\\#2329](https://github.com/kokkos/kokkos/issues/2329)\n- BuildSystem: Set Kokkos\\_DEVICES and Kokkos\\_ARCH variables in exported CMake configuration [\\#2193](https://github.com/kokkos/kokkos/issues/2193)\n- BuildSystem: Drop support for CUDA 7 and CUDA 8 [\\#2489](https://github.com/kokkos/kokkos/issues/2489)\n- BuildSystem: Drop CMake option SEPARATE\\_TESTS [\\#2266](https://github.com/kokkos/kokkos/issues/2266)\n- BuildSystem: Support expt-relaxed-constexpr same as expt-extended-lambda [\\#2411](https://github.com/kokkos/kokkos/issues/2411)\n- BuildSystem: Add Xnvlink to command line options allowed in nvcc\\_wrapper [\\#2197](https://github.com/kokkos/kokkos/issues/2197)\n- BuildSystem: Install Kokkos config files and target files to lib/cmake/Kokkos [\\#2162](https://github.com/kokkos/kokkos/issues/2162)\n- BuildSystem: nvcc\\_wrappers and c++ 14 [\\#2035](https://github.com/kokkos/kokkos/issues/2035)\n- BuildSystem: Kokkos version major/version minor \\(Feature request\\) [\\#1930](https://github.com/kokkos/kokkos/issues/1930)\n- BuildSystem: CMake namespaces \\(and other modern cmake cleanup\\) [\\#1924](https://github.com/kokkos/kokkos/issues/1924)\n- BuildSystem: Remove capability to install Kokkos via GNU Makefiles [\\#2332](https://github.com/kokkos/kokkos/issues/2332)\n- Documentation: Remove PDF ProgrammingGuide in Kokkos replace with link [\\#2244](https://github.com/kokkos/kokkos/issues/2244)\n- View: Add Method to Resize View without Initialization [\\#2048](https://github.com/kokkos/kokkos/issues/2048)\n- Vector: implement “insert” method for Kokkos\\_Vector  \\(as a serial function on host\\) [\\#2437](https://github.com/kokkos/kokkos/issues/2437)\n\n**Fixed bugs:**\n\n- ParallelScan: Kokkos::parallel\\scan fix race condition seen in inter-block fence [\\#2681](https://github.com/kokkos/kokkos/issues/2681)\n- OffsetView: Kokkos::OffsetView missing constructor which takes pointer [\\#2247](https://github.com/kokkos/kokkos/issues/2247)\n- OffsetView: Kokkos::OffsetView: allow offset=0 [\\#2246](https://github.com/kokkos/kokkos/issues/2246)\n- DeepCopy: Missing DeepCopy instrumentation in Kokkos [\\#2522](https://github.com/kokkos/kokkos/issues/2522)\n- nvcc\\_wrapper: --host-only fails with multiple -W\\* flags [\\#2484](https://github.com/kokkos/kokkos/issues/2484)\n- nvcc\\_wrapper: taking first -std option is counterintuitive [\\#2553](https://github.com/kokkos/kokkos/issues/2553)\n- Subview: Error taking subviews of views with static_extents of min rank [\\#2448](https://github.com/kokkos/kokkos/issues/2448)\n- TeamPolicy: reducers with valuetypes without += broken on CUDA [\\#2410](https://github.com/kokkos/kokkos/issues/2410)\n- Libs: Fix inconsistency of Kokkos library names in Kokkos and Trilinos [\\#1902](https://github.com/kokkos/kokkos/issues/1902)\n- Complex: operator\\>\\> for complex\\<T\\> uses std::ostream, not std::istream [\\#2313](https://github.com/kokkos/kokkos/issues/2313)\n- Macros: Restrict not honored for non-intel compilers  [\\#1922](https://github.com/kokkos/kokkos/issues/1922)\n\n\n## [2.9.00](https://github.com/kokkos/kokkos/tree/2.9.00) (2019-06-24)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/2.8.00...2.9.00)\n\n**Implemented enhancements:**\n\n- Capability: CUDA Streams [\\#1723](https://github.com/kokkos/kokkos/issues/1723)\n- Capability: CUDA Stream support for parallel\\_reduce [\\#2061](https://github.com/kokkos/kokkos/issues/2061)\n- Capability: Feature Request: TeamVectorRange [\\#713](https://github.com/kokkos/kokkos/issues/713)\n- Capability: Adding HPX backend [\\#2080](https://github.com/kokkos/kokkos/issues/2080)\n- Capability: TaskScheduler to have multiple queues [\\#565](https://github.com/kokkos/kokkos/issues/565)\n- Capability: Support for additional reductions in ScatterView [\\#1674](https://github.com/kokkos/kokkos/issues/1674)\n- Capability: Request: deep\\_copy within parallel regions [\\#689](https://github.com/kokkos/kokkos/issues/689)\n- Capability: Feature Request: `create\\_mirror\\_view\\_without\\_initializing` [\\#1765](https://github.com/kokkos/kokkos/issues/1765)\n- View: Use SFINAE to restrict possible View type conversions [\\#2127](https://github.com/kokkos/kokkos/issues/2127)\n- Deprecation: Deprecate ExecutionSpace::fence\\(\\) as static function and make it non-static [\\#2140](https://github.com/kokkos/kokkos/issues/2140)\n- Deprecation: Deprecate LayoutTileLeft [\\#2122](https://github.com/kokkos/kokkos/issues/2122)\n- Macros: KOKKOS\\_RESTRICT defined for non-Intel compilers [\\#2038](https://github.com/kokkos/kokkos/issues/2038)\n\n**Fixed bugs:**\n\n- Cuda: TeamThreadRange loop count on device is passed by reference to host static constexpr [\\#1733](https://github.com/kokkos/kokkos/issues/1733)\n- Cuda: Build error with relocatable device code with CUDA 10.1 GCC 7.3 [\\#2134](https://github.com/kokkos/kokkos/issues/2134)\n- Cuda: cudaFuncSetCacheConfig is setting CachePreferShared too often [\\#2066](https://github.com/kokkos/kokkos/issues/2066)\n- Cuda: TeamPolicy doesn't throw then created with non-viable vector length and also doesn't backscale to viable one [\\#2020](https://github.com/kokkos/kokkos/issues/2020)\n- Cuda: cudaMemcpy error for large league sizes on V100 [\\#1991](https://github.com/kokkos/kokkos/issues/1991)\n- Cuda: illegal warp sync in parallel\\_reduce by functor on Turing 75 [\\#1958](https://github.com/kokkos/kokkos/issues/1958)\n- TeamThreadRange: Inconsistent results from TeamThreadRange reduction [\\#1905](https://github.com/kokkos/kokkos/issues/1905)\n- Atomics: atomic\\_fetch\\_oper & atomic\\_oper\\_fetch don't build for complex\\<float\\> [\\#1964](https://github.com/kokkos/kokkos/issues/1964)\n- Views: Kokkos randomread Views leak memory [\\#2155](https://github.com/kokkos/kokkos/issues/2155)\n- ScatterView: LayoutLeft overload currently non-functional [\\#2165](https://github.com/kokkos/kokkos/issues/2165)\n- KNL: With intel 17.2.174 illegal instruction in random number test [\\#2078](https://github.com/kokkos/kokkos/issues/2078)\n- Bitset: Enable copy constructor on device [\\#2094](https://github.com/kokkos/kokkos/issues/2094)\n- Examples: do not compile due to template deduction error \\(multi\\_fem\\) [\\#1928](https://github.com/kokkos/kokkos/issues/1928)\n\n## [2.8.00](https://github.com/kokkos/kokkos/tree/2.8.00) (2019-02-05)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/2.7.24...2.8.00)\n\n**Implemented enhancements:**\n\n- Capability, Tests: C++14 support and testing [\\#1914](https://github.com/kokkos/kokkos/issues/1914)\n- Capability: Add environment variables for all command line arguments [\\#1798](https://github.com/kokkos/kokkos/issues/1798)\n- Capability: --kokkos-ndevices not working for Slurm [\\#1920](https://github.com/kokkos/kokkos/issues/1920)\n- View: Undefined behavior when deep copying from and to an empty unmanaged view [\\#1967](https://github.com/kokkos/kokkos/issues/1967)\n- BuildSystem: nvcc\\_wrapper should stop immediately if nvcc is not in PATH [\\#1861](https://github.com/kokkos/kokkos/issues/1861)\n\n**Fixed bugs:**\n\n- Cuda: Fix Volta Issues 1 Non-deterministic behavior on Volta, runs fine on Pascal [\\#1949](https://github.com/kokkos/kokkos/issues/1949)\n- Cuda: Fix Volta Issues 2 CUDA Team Scan gives wrong values on Volta with -G compile flag [\\#1942](https://github.com/kokkos/kokkos/issues/1942)\n- Cuda: illegal warp sync in parallel\\_reduce by functor on Turing 75 [\\#1958](https://github.com/kokkos/kokkos/issues/1958)\n- Threads: Pthreads backend does not handle RangePolicy with offset correctly [\\#1976](https://github.com/kokkos/kokkos/issues/1976)\n- Atomics: atomic\\_fetch\\_oper has no case for Kokkos::complex\\<double\\> or other 16-byte types [\\#1951](https://github.com/kokkos/kokkos/issues/1951)\n- MDRangePolicy: Fix zero-length range [\\#1948](https://github.com/kokkos/kokkos/issues/1948)\n- TeamThreadRange: TeamThreadRange MaxLoc reduce doesnt compile  [\\#1909](https://github.com/kokkos/kokkos/issues/1909)\n\n## [2.7.24](https://github.com/kokkos/kokkos/tree/2.7.24) (2018-11-04)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/2.7.00...2.7.24)\n\n**Implemented enhancements:**\n\n- DualView: Add non-templated functions for sync, need\\_sync, view, modify [\\#1858](https://github.com/kokkos/kokkos/issues/1858)\n- DualView: Avoid needlessly allocates and initializes modify\\_host and modify\\_device flag views [\\#1831](https://github.com/kokkos/kokkos/issues/1831)\n- DualView: Incorrect deduction of \"not device type\" [\\#1659](https://github.com/kokkos/kokkos/issues/1659)\n- BuildSystem: Add KOKKOS\\_ENABLE\\_CXX14 and KOKKOS\\_ENABLE\\_CXX17 [\\#1602](https://github.com/kokkos/kokkos/issues/1602)\n- BuildSystem: Installed kokkos\\_generated\\_settings.cmake contains build directories instead of install directories [\\#1838](https://github.com/kokkos/kokkos/issues/1838)\n- BuildSystem: KOKKOS\\_ARCH: add ticks to printout of improper arch setting [\\#1649](https://github.com/kokkos/kokkos/issues/1649)\n- BuildSystem: Make core/src/Makefile for Cuda use needed nvcc\\_wrapper [\\#1296](https://github.com/kokkos/kokkos/issues/1296)\n- Build: Support PGI as host compiler for NVCC [\\#1828](https://github.com/kokkos/kokkos/issues/1828)\n- Build: Many Warnings Fixed e.g.[\\#1786](https://github.com/kokkos/kokkos/issues/1786)\n- Capability: OffsetView with non-zero begin index [\\#567](https://github.com/kokkos/kokkos/issues/567)\n- Capability: Reductions into device side view [\\#1788](https://github.com/kokkos/kokkos/issues/1788)\n- Capability: Add max\\_size to Kokkos::Array [\\#1760](https://github.com/kokkos/kokkos/issues/1760)\n- Capability: View Assignment: LayoutStride -\\> LayoutLeft and LayoutStride -\\> LayoutRight [\\#1594](https://github.com/kokkos/kokkos/issues/1594)\n- Capability: Atomic function allow implicit conversion of update argument [\\#1571](https://github.com/kokkos/kokkos/issues/1571)\n- Capability: Add team\\_size\\_max with tagged functors [\\#663](https://github.com/kokkos/kokkos/issues/663)\n- Capability: Fix allignment of views from Kokkos\\_ScratchSpace should use different alignment [\\#1700](https://github.com/kokkos/kokkos/issues/1700)\n- Capabilitiy: create\\_mirror\\_view\\_and\\_copy for DynRankView [\\#1651](https://github.com/kokkos/kokkos/issues/1651)\n- Capability: DeepCopy HBWSpace / HostSpace [\\#548](https://github.com/kokkos/kokkos/issues/548)\n- ROCm: support team vector scan  [\\#1645](https://github.com/kokkos/kokkos/issues/1645)\n- ROCm:  Merge from rocm-hackathon2 [\\#1636](https://github.com/kokkos/kokkos/issues/1636)\n- ROCm:  Add ParallelScanWithTotal [\\#1611](https://github.com/kokkos/kokkos/issues/1611)\n- ROCm: Implement MDRange in ROCm [\\#1314](https://github.com/kokkos/kokkos/issues/1314)\n- ROCm: Implement Reducers for Nested Parallelism Levels [\\#963](https://github.com/kokkos/kokkos/issues/963)\n- ROCm: Add asynchronous deep copy [\\#959](https://github.com/kokkos/kokkos/issues/959)\n- Tests: Memory pool test seems to allocate 8GB [\\#1830](https://github.com/kokkos/kokkos/issues/1830)\n- Tests: Add unit\\_test for team\\_broadcast [\\#734](https://github.com/kokkos/kokkos/issues/734)\n\n**Fixed bugs:**\n\n- BuildSystem: Makefile.kokkos gets gcc-toolchain wrong if gcc is cached [\\#1841](https://github.com/kokkos/kokkos/issues/1841)\n- BuildSystem: kokkos\\_generated\\_settings.cmake placement is inconsistent [\\#1771](https://github.com/kokkos/kokkos/issues/1771)\n- BuildSystem: Invalid escape sequence \\. in kokkos\\_functions.cmake [\\#1661](https://github.com/kokkos/kokkos/issues/1661)\n- BuildSystem: Problem in Kokkos generated cmake file [\\#1770](https://github.com/kokkos/kokkos/issues/1770)\n- BuildSystem: invalid file names on windows [\\#1671](https://github.com/kokkos/kokkos/issues/1671)\n- Tests: reducers min/max\\_loc test fails randomly due to multiple min values and thus multiple valid locations [\\#1681](https://github.com/kokkos/kokkos/issues/1681)\n- Tests: cuda.scatterview unit test causes \"Bus error\" when force\\_uvm and enable\\_lambda are enabled [\\#1852](https://github.com/kokkos/kokkos/issues/1852)\n- Tests: cuda.cxx11 unit test fails when force\\_uvm and enable\\_lambda are enabled [\\#1850](https://github.com/kokkos/kokkos/issues/1850)\n- Tests: threads.reduce\\_device\\_view\\_range\\_policy failing with Cuda/8.0.44 and RDC [\\#1836](https://github.com/kokkos/kokkos/issues/1836)\n- Build: compile error when compiling Kokkos with hwloc 2.0.1 \\(on OSX 10.12.6, with g++ 7.2.0\\) [\\#1506](https://github.com/kokkos/kokkos/issues/1506)\n- Build: dual\\_view.view broken with UVM [\\#1834](https://github.com/kokkos/kokkos/issues/1834)\n- Build: White cuda/9.2 + gcc/7.2 warnings triggering errors  [\\#1833](https://github.com/kokkos/kokkos/issues/1833)\n- Build: warning: enum constant in boolean context [\\#1813](https://github.com/kokkos/kokkos/issues/1813)\n- Capability: Fix overly conservative max\\_team\\_size thingy [\\#1808](https://github.com/kokkos/kokkos/issues/1808)\n- DynRankView: Ctors taking ViewAllocateWithoutInitializing broken [\\#1783](https://github.com/kokkos/kokkos/issues/1783)\n- Cuda: Apollo cuda.team\\_broadcast test fail with clang-6.0 [\\#1762](https://github.com/kokkos/kokkos/issues/1762)\n- Cuda: Clang spurious test failure in impl\\_view\\_accessible [\\#1753](https://github.com/kokkos/kokkos/issues/1753)\n- Cuda: Kokkos::complex\\<double\\> atomic deadlocks with Clang 6 Cuda build with -O0 [\\#1752](https://github.com/kokkos/kokkos/issues/1752)\n- Cuda: LayoutStride Test fails for UVM as default memory space [\\#1688](https://github.com/kokkos/kokkos/issues/1688)\n- Cuda: Scan wrong values on Volta [\\#1676](https://github.com/kokkos/kokkos/issues/1676)\n- Cuda: Kokkos::deep\\_copy error with CudaUVM and Kokkos::Serial spaces [\\#1652](https://github.com/kokkos/kokkos/issues/1652)\n- Cuda: cudaErrorInvalidConfiguration with debug build [\\#1647](https://github.com/kokkos/kokkos/issues/1647)\n- Cuda: parallel\\_for with TeamPolicy::team\\_size\\_recommended with launch bounds not working -- reported by Daniel Holladay [\\#1283](https://github.com/kokkos/kokkos/issues/1283)\n- Cuda: Using KOKKOS\\_CLASS\\_LAMBDA in a class with Kokkos::Random\\_XorShift64\\_Pool member data [\\#1696](https://github.com/kokkos/kokkos/issues/1696)\n- Long Build Times on Darwin [\\#1721](https://github.com/kokkos/kokkos/issues/1721)\n- Capability: Typo in Kokkos\\_Sort.hpp - BinOp3D - wrong comparison [\\#1720](https://github.com/kokkos/kokkos/issues/1720)\n- Buffer overflow in SharedAllocationRecord in Kokkos\\_HostSpace.cpp [\\#1673](https://github.com/kokkos/kokkos/issues/1673)\n- Serial unit test failure [\\#1632](https://github.com/kokkos/kokkos/issues/1632)\n\n## [2.7.00](https://github.com/kokkos/kokkos/tree/2.7.00) (2018-05-24)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/2.6.00...2.7.00)\n\n**Part of the Kokkos C++ Performance Portability Programming EcoSystem 2.7**\n\n**Implemented enhancements:**\n\n- Deprecate team\\_size auto adjusting to maximal value possible [\\#1618](https://github.com/kokkos/kokkos/issues/1618)\n- DynamicView - remove restrictions to std::is\\_trivial types and value\\_type is power of two [\\#1586](https://github.com/kokkos/kokkos/issues/1586)\n- Kokkos::StaticCrsGraph does not propagate memory traits \\(e.g., Unmanaged\\) [\\#1581](https://github.com/kokkos/kokkos/issues/1581)\n- Adding ETI for DeepCopy / ViewFill etc. [\\#1578](https://github.com/kokkos/kokkos/issues/1578)\n- Deprecate all the left over KOKKOS\\_HAVE\\_ Macros and Kokkos\\_OldMacros.hpp [\\#1572](https://github.com/kokkos/kokkos/issues/1572)\n- Error if Kokkos\\_ARCH set in CMake [\\#1555](https://github.com/kokkos/kokkos/issues/1555)\n- Deprecate ExecSpace::initialize / ExecSpace::finalize [\\#1532](https://github.com/kokkos/kokkos/issues/1532)\n- New API for TeamPolicy property setting [\\#1531](https://github.com/kokkos/kokkos/issues/1531)\n- clang 6.0 + cuda debug out-of-memory test failure [\\#1521](https://github.com/kokkos/kokkos/issues/1521)\n- Cuda UniqueToken interface not consistent with other backends [\\#1505](https://github.com/kokkos/kokkos/issues/1505)\n- Move Reducers out of Experimental namespace [\\#1494](https://github.com/kokkos/kokkos/issues/1494)\n- Provide scope guard for initialize/finalize [\\#1479](https://github.com/kokkos/kokkos/issues/1479)\n- Check Kokkos::is\\_initialized in SharedAllocationRecord dtor [\\#1465](https://github.com/kokkos/kokkos/issues/1465)\n- Remove static list of allocations [\\#1464](https://github.com/kokkos/kokkos/issues/1464)\n- Makefiles: Support single compile/link line use case [\\#1402](https://github.com/kokkos/kokkos/issues/1402)\n- ThreadVectorRange with a range  [\\#1400](https://github.com/kokkos/kokkos/issues/1400)\n- Exclusive scan + last value API [\\#1358](https://github.com/kokkos/kokkos/issues/1358)\n- Install kokkos\\_generated\\_settings.cmake [\\#1348](https://github.com/kokkos/kokkos/issues/1348)\n- Kokkos arrays \\(not views!\\) don't do bounds checking in debug mode [\\#1342](https://github.com/kokkos/kokkos/issues/1342)\n- Expose round-robin GPU assignment outside of initialize\\(int, char\\*\\*\\) [\\#1318](https://github.com/kokkos/kokkos/issues/1318)\n- DynamicView misses use\\_count and label function [\\#1298](https://github.com/kokkos/kokkos/issues/1298)\n- View constructor should check arguments [\\#1286](https://github.com/kokkos/kokkos/issues/1286)\n- False Positive on Oversubscription Warning [\\#1207](https://github.com/kokkos/kokkos/issues/1207)\n- Allow \\(require\\) execution space for 1st arg of VerifyExecutionCanAccessMemorySpace [\\#1192](https://github.com/kokkos/kokkos/issues/1192)\n- ROCm: Add ROCmHostPinnedSpace [\\#958](https://github.com/kokkos/kokkos/issues/958)\n- power of two functions [\\#656](https://github.com/kokkos/kokkos/issues/656)\n- CUDA 8 has 64bit \\_\\_shfl [\\#361](https://github.com/kokkos/kokkos/issues/361)\n- Add TriBITS/CMake configure information about node types [\\#243](https://github.com/kokkos/kokkos/issues/243)\n\n**Fixed bugs:**\n\n- CUDA atomic\\_fetch\\_sub for doubles is hitting CAS instead of intrinsic [\\#1624](https://github.com/kokkos/kokkos/issues/1624)\n- Bug: use of ballot on Volta [\\#1612](https://github.com/kokkos/kokkos/issues/1612)\n- Kokkos::deep\\_copy memory access failures [\\#1583](https://github.com/kokkos/kokkos/issues/1583)\n- g++ -std option doubly set for cmake project [\\#1548](https://github.com/kokkos/kokkos/issues/1548)\n- ViewFill for 1D Views of larger 32bit entries fails [\\#1541](https://github.com/kokkos/kokkos/issues/1541)\n- CUDA Volta another warpsync bug [\\#1520](https://github.com/kokkos/kokkos/issues/1520)\n- triple\\_nested\\_parallelism fails with KOKKOS\\_DEBUG and CUDA [\\#1513](https://github.com/kokkos/kokkos/issues/1513)\n- Jenkins errors in Kokkos\\_SharedAlloc.cpp with debug build [\\#1511](https://github.com/kokkos/kokkos/issues/1511)\n- Kokkos::Sort out-of-bounds with empty bins [\\#1504](https://github.com/kokkos/kokkos/issues/1504)\n- Get rid of deprecated functions inside Kokkos [\\#1484](https://github.com/kokkos/kokkos/issues/1484)\n- get\\_work\\_partition casts int64\\_t to int, causing a seg fault [\\#1481](https://github.com/kokkos/kokkos/issues/1481)\n- NVCC bug with \\_\\_device\\_\\_ on defaulted function [\\#1470](https://github.com/kokkos/kokkos/issues/1470)\n- CMake example broken with CUDA backend [\\#1468](https://github.com/kokkos/kokkos/issues/1468)\n\n\n## [2.6.00](https://github.com/kokkos/kokkos/tree/2.6.00) (2018-03-07)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/2.5.00...2.6.00)\n\n**Part of the Kokkos C++ Performance Portability Programming EcoSystem 2.6**\n\n**Implemented enhancements:**\n\n- Support NVIDIA Volta microarchitecture [\\#1466](https://github.com/kokkos/kokkos/issues/1466)\n- Kokkos - Define empty functions when profiling disabled [\\#1424](https://github.com/kokkos/kokkos/issues/1424)\n- Don't use \\_\\_constant\\_\\_ cache for lock arrays, enable once per run update instead of once per call [\\#1385](https://github.com/kokkos/kokkos/issues/1385)\n- task dag enhancement. [\\#1354](https://github.com/kokkos/kokkos/issues/1354)\n- Cuda task team collectives and stack size [\\#1353](https://github.com/kokkos/kokkos/issues/1353)\n- Replace View operator acceptance of more than rank integers with 'access' function [\\#1333](https://github.com/kokkos/kokkos/issues/1333)\n- Interoperability: Do not shut down backend execution space runtimes upon calling finalize. [\\#1305](https://github.com/kokkos/kokkos/issues/1305)\n- shmem\\_size for LayoutStride [\\#1291](https://github.com/kokkos/kokkos/issues/1291)\n- Kokkos::resize performs poorly on 1D Views [\\#1270](https://github.com/kokkos/kokkos/issues/1270)\n- stride\\(\\) is inconsistent with dimension\\(\\), extent\\(\\), etc. [\\#1214](https://github.com/kokkos/kokkos/issues/1214)\n- Kokkos::sort defaults to std::sort on host [\\#1208](https://github.com/kokkos/kokkos/issues/1208)\n- DynamicView with host size grow [\\#1206](https://github.com/kokkos/kokkos/issues/1206)\n- Unmanaged View with Anonymous Memory Space [\\#1175](https://github.com/kokkos/kokkos/issues/1175)\n- Sort subset of Kokkos::DynamicView [\\#1160](https://github.com/kokkos/kokkos/issues/1160)\n- MDRange policy doesn't support lambda reductions [\\#1054](https://github.com/kokkos/kokkos/issues/1054)\n- Add ability to set hook on Kokkos::finalize [\\#714](https://github.com/kokkos/kokkos/issues/714)\n- Atomics with Serial Backend - Default should be Disable? [\\#549](https://github.com/kokkos/kokkos/issues/549)\n- KOKKOS\\_ENABLE\\_DEPRECATED\\_CODE [\\#1359](https://github.com/kokkos/kokkos/issues/1359)\n\n**Fixed bugs:**\n\n- cuda\\_internal\\_maximum\\_warp\\_count returns 8, but I believe it should return 16 for P100  [\\#1269](https://github.com/kokkos/kokkos/issues/1269)\n- Cuda: level 1 scratch memory bug \\(reported by Stan Moore\\) [\\#1434](https://github.com/kokkos/kokkos/issues/1434)\n- MDRangePolicy Reduction requires value\\_type typedef in Functor [\\#1379](https://github.com/kokkos/kokkos/issues/1379)\n- Kokkos DeepCopy between empty views fails [\\#1369](https://github.com/kokkos/kokkos/issues/1369)\n- Several issues with new CMake build infrastructure \\(reported by Eric Phipps\\) [\\#1365](https://github.com/kokkos/kokkos/issues/1365)\n- deep\\_copy between rank-1 host/device views of differing layouts without UVM no longer works \\(reported by Eric Phipps\\) [\\#1363](https://github.com/kokkos/kokkos/issues/1363)\n- Profiling can't be disabled in CMake, and a parallel\\_for is missing for tasks \\(reported by Kyungjoo Kim\\) [\\#1349](https://github.com/kokkos/kokkos/issues/1349)\n- get\\_work\\_partition int overflow \\(reported by berryj5\\) [\\#1327](https://github.com/kokkos/kokkos/issues/1327)\n- Kokkos::deep\\_copy must fence even if the two views are the same [\\#1303](https://github.com/kokkos/kokkos/issues/1303)\n- CudaUVMSpace::allocate/deallocate must fence [\\#1302](https://github.com/kokkos/kokkos/issues/1302)\n- ViewResize on CUDA fails in Debug because of too many resources requested [\\#1299](https://github.com/kokkos/kokkos/issues/1299)\n- Cuda 9 and intrepid2 calls from Panzer. [\\#1183](https://github.com/kokkos/kokkos/issues/1183)\n- Slowdown due to tracking\\_enabled\\(\\) in 2.04.00 \\(found by Albany app\\) [\\#1016](https://github.com/kokkos/kokkos/issues/1016)\n- Bounds checking fails with zero-span Views \\(reported by Stan Moore\\) [\\#1411](https://github.com/kokkos/kokkos/issues/1411)\n\n\n## [2.5.00](https://github.com/kokkos/kokkos/tree/2.5.00) (2017-12-15)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/2.04.11...2.5.00)\n\n**Part of the Kokkos C++ Performance Portability Programming EcoSystem 2.5**\n\n**Implemented enhancements:**\n\n- Provide Makefile.kokkos logic for CMake and TriBITS [\\#878](https://github.com/kokkos/kokkos/issues/878)\n- Add Scatter View [\\#825](https://github.com/kokkos/kokkos/issues/825)\n- Drop gcc 4.7 and intel 14 from supported compiler list [\\#603](https://github.com/kokkos/kokkos/issues/603)\n- Enable construction of unmanaged view using common\\_view\\_alloc\\_prop [\\#1170](https://github.com/kokkos/kokkos/issues/1170)\n- Unused Function Warning with XL [\\#1267](https://github.com/kokkos/kokkos/issues/1267)\n- Add memory pool parameter check [\\#1218](https://github.com/kokkos/kokkos/issues/1218)\n- CUDA9: Fix warning for unsupported long double [\\#1189](https://github.com/kokkos/kokkos/issues/1189)\n- CUDA9: fix warning on defaulted function marking [\\#1188](https://github.com/kokkos/kokkos/issues/1188)\n- CUDA9: fix warnings for deprecated warp level functions [\\#1187](https://github.com/kokkos/kokkos/issues/1187)\n- Add CUDA 9.0 nightly testing [\\#1174](https://github.com/kokkos/kokkos/issues/1174)\n- {OMPI,MPICH}\\_CXX hack breaks nvcc\\_wrapper use case [\\#1166](https://github.com/kokkos/kokkos/issues/1166)\n- KOKKOS\\_HAVE\\_CUDA\\_LAMBDA became KOKKOS\\_CUDA\\_USE\\_LAMBDA [\\#1274](https://github.com/kokkos/kokkos/issues/1274)\n\n**Fixed bugs:**\n\n- MinMax Reducer with tagged operator doesn't compile [\\#1251](https://github.com/kokkos/kokkos/issues/1251)\n- Reducers for Tagged operators give wrong answer [\\#1250](https://github.com/kokkos/kokkos/issues/1250)\n- Kokkos not Compatible with Big Endian Machines? [\\#1235](https://github.com/kokkos/kokkos/issues/1235)\n- Parallel Scan hangs forever on BG/Q [\\#1234](https://github.com/kokkos/kokkos/issues/1234)\n- Threads backend doesn't compile with Clang on OS X [\\#1232](https://github.com/kokkos/kokkos/issues/1232)\n- $\\(shell date\\) needs quote [\\#1264](https://github.com/kokkos/kokkos/issues/1264)\n- Unqualified parallel\\_for call conflicts with user-defined parallel\\_for [\\#1219](https://github.com/kokkos/kokkos/issues/1219)\n- KokkosAlgorithms: CMake issue in unit tests [\\#1212](https://github.com/kokkos/kokkos/issues/1212)\n- Intel 18 Error: \"simd pragma has been deprecated\" [\\#1210](https://github.com/kokkos/kokkos/issues/1210)\n- Memory leak in Kokkos::initialize [\\#1194](https://github.com/kokkos/kokkos/issues/1194)\n- CUDA9: compiler error with static assert template arguments [\\#1190](https://github.com/kokkos/kokkos/issues/1190)\n- Kokkos::Serial::is\\_initialized returns always true [\\#1184](https://github.com/kokkos/kokkos/issues/1184)\n- Triple nested parallelism still fails on bowman [\\#1093](https://github.com/kokkos/kokkos/issues/1093)\n- OpenMP openmp.range on Develop Runs Forever on POWER7+ with RHEL7 and GCC4.8.5 [\\#995](https://github.com/kokkos/kokkos/issues/995)\n- Rendezvous performance at global scope [\\#985](https://github.com/kokkos/kokkos/issues/985)\n\n\n## [2.04.11](https://github.com/kokkos/kokkos/tree/2.04.11) (2017-10-28)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/2.04.04...2.04.11)\n\n**Implemented enhancements:**\n\n- Add Subview pattern. [\\#648](https://github.com/kokkos/kokkos/issues/648)\n- Add Kokkos \"global\" is\\_initialized [\\#1060](https://github.com/kokkos/kokkos/issues/1060)\n- Add create\\_mirror\\_view\\_and\\_copy [\\#1161](https://github.com/kokkos/kokkos/issues/1161)\n- Add KokkosConcepts SpaceAccessibility function [\\#1092](https://github.com/kokkos/kokkos/issues/1092)\n- Option to Disable Initialize Warnings [\\#1142](https://github.com/kokkos/kokkos/issues/1142)\n- Mature task-DAG capability [\\#320](https://github.com/kokkos/kokkos/issues/320)\n- Promote Work DAG from experimental [\\#1126](https://github.com/kokkos/kokkos/issues/1126)\n- Implement new WorkGraph push/pop [\\#1108](https://github.com/kokkos/kokkos/issues/1108)\n- Kokkos\\_ENABLE\\_Cuda\\_Lambda should default ON [\\#1101](https://github.com/kokkos/kokkos/issues/1101)\n- Add multidimensional parallel for example and improve unit test [\\#1064](https://github.com/kokkos/kokkos/issues/1064)\n- Fix ROCm:  Performance tests not building [\\#1038](https://github.com/kokkos/kokkos/issues/1038)\n- Make KOKKOS\\_ALIGN\\_SIZE a configure-time option [\\#1004](https://github.com/kokkos/kokkos/issues/1004)\n- Make alignment consistent [\\#809](https://github.com/kokkos/kokkos/issues/809)\n- Improve subview construction on Cuda backend [\\#615](https://github.com/kokkos/kokkos/issues/615)\n\n**Fixed bugs:**\n\n- Kokkos::vector fixes for application [\\#1134](https://github.com/kokkos/kokkos/issues/1134)\n- DynamicView non-power of two value\\_type [\\#1177](https://github.com/kokkos/kokkos/issues/1177)\n- Memory pool bug [\\#1154](https://github.com/kokkos/kokkos/issues/1154)\n- Cuda launch bounds performance regression bug [\\#1140](https://github.com/kokkos/kokkos/issues/1140)\n- Significant performance regression in LAMMPS after updating Kokkos [\\#1139](https://github.com/kokkos/kokkos/issues/1139)\n- CUDA compile error [\\#1128](https://github.com/kokkos/kokkos/issues/1128)\n- MDRangePolicy neg idx test failure in debug mode [\\#1113](https://github.com/kokkos/kokkos/issues/1113)\n- subview construction on Cuda backend [\\#615](https://github.com/kokkos/kokkos/issues/615)\n\n## [2.04.04](https://github.com/kokkos/kokkos/tree/2.04.04) (2017-09-11)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/2.04.00...2.04.04)\n\n**Implemented enhancements:**\n\n- OpenMP partition: set number of threads on nested level [\\#1082](https://github.com/kokkos/kokkos/issues/1082)\n- Add StaticCrsGraph row\\(\\) method [\\#1071](https://github.com/kokkos/kokkos/issues/1071)\n- Enhance Kokkos complex operator overloading [\\#1052](https://github.com/kokkos/kokkos/issues/1052)\n- Tell Trilinos packages about host+device lambda [\\#1019](https://github.com/kokkos/kokkos/issues/1019)\n- Function markup for defaulted class members [\\#952](https://github.com/kokkos/kokkos/issues/952)\n- Add deterministic random number generator [\\#857](https://github.com/kokkos/kokkos/issues/857)\n\n**Fixed bugs:**\n\n- Fix reduction\\_identity\\<T\\>::max for floating point numbers [\\#1048](https://github.com/kokkos/kokkos/issues/1048)\n- Fix MD iteration policy ignores lower bound on GPUs [\\#1041](https://github.com/kokkos/kokkos/issues/1041)\n- (Experimental) HBWSpace  Linking issues in KokkosKernels [\\#1094](https://github.com/kokkos/kokkos/issues/1094)\n- (Experimental) ROCm:  algorithms/unit\\_tests test\\_sort failing with segfault [\\#1070](https://github.com/kokkos/kokkos/issues/1070)\n\n## [2.04.00](https://github.com/kokkos/kokkos/tree/2.04.00) (2017-08-16)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/2.03.13...2.04.00)\n\n**Implemented enhancements:**\n\n- Added ROCm backend to support AMD GPUs\n- Kokkos::complex\\<T\\> behaves slightly differently from std::complex\\<T\\> [\\#1011](https://github.com/kokkos/kokkos/issues/1011)\n- Kokkos::Experimental::Crs constructor arguments were in the wrong order [\\#992](https://github.com/kokkos/kokkos/issues/992)\n- Work graph construction ease-of-use (one lambda for count and fill) [\\#991](https://github.com/kokkos/kokkos/issues/991)\n- when\\_all returns pointer of futures (improved interface) [\\#990](https://github.com/kokkos/kokkos/issues/990)\n- Allow assignment of LayoutLeft to LayoutRight or vice versa for rank-0 Views [\\#594](https://github.com/kokkos/kokkos/issues/594)\n- Changed the meaning of Kokkos\\_ENABLE\\_CXX11\\_DISPATCH\\_LAMBDA [\\#1035](https://github.com/kokkos/kokkos/issues/1035)\n\n**Fixed bugs:**\n\n- memory pool default constructor does not properly set member variables. [\\#1007](https://github.com/kokkos/kokkos/issues/1007)\n\n## [2.03.13](https://github.com/kokkos/kokkos/tree/2.03.13) (2017-07-27)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/2.03.05...2.03.13)\n\n**Implemented enhancements:**\n\n- Disallow enabling both OpenMP and Threads in the same executable [\\#406](https://github.com/kokkos/kokkos/issues/406)\n- Make Kokkos::OpenMP respect OMP environment even if hwloc is available [\\#630](https://github.com/kokkos/kokkos/issues/630)\n- Improve Atomics Performance on KNL/Broadwell where PREFETCHW/RFO is Available [\\#898](https://github.com/kokkos/kokkos/issues/898)\n- Kokkos::resize should test whether dimensions have changed before resizing [\\#904](https://github.com/kokkos/kokkos/issues/904)\n- Develop performance-regression/acceptance tests [\\#737](https://github.com/kokkos/kokkos/issues/737)\n- Make the deep\\_copy Profiling hook a start/end system [\\#890](https://github.com/kokkos/kokkos/issues/890)\n- Add deep\\_copy Profiling hook [\\#843](https://github.com/kokkos/kokkos/issues/843)\n- Append tag name to parallel construct name for Profiling [\\#842](https://github.com/kokkos/kokkos/issues/842)\n- Add view label to `View bounds error` message for CUDA backend [\\#870](https://github.com/kokkos/kokkos/issues/870)\n- Disable printing the loaded profiling library [\\#824](https://github.com/kokkos/kokkos/issues/824)\n- \"Declared but never referenced\" warnings [\\#853](https://github.com/kokkos/kokkos/issues/853)\n- Warnings about lock\\_address\\_cuda\\_space [\\#852](https://github.com/kokkos/kokkos/issues/852)\n- WorkGraph execution policy [\\#771](https://github.com/kokkos/kokkos/issues/771)\n- Simplify makefiles by guarding compilation with appropriate KOKKOS\\_ENABLE\\_\\#\\#\\# macros [\\#716](https://github.com/kokkos/kokkos/issues/716)\n- Cmake build: wrong include install directory [\\#668](https://github.com/kokkos/kokkos/issues/668)\n- Derived View type and allocation [\\#566](https://github.com/kokkos/kokkos/issues/566)\n- Fix Compiler warnings when compiling core unit tests for Cuda [\\#214](https://github.com/kokkos/kokkos/issues/214)\n\n**Fixed bugs:**\n\n- Out-of-bounds read in Kokkos\\_Layout.hpp [\\#975](https://github.com/kokkos/kokkos/issues/975)\n- CudaClang: Fix failing test with Clang 4.0 [\\#941](https://github.com/kokkos/kokkos/issues/941)\n- Respawn when memory pool allocation fails \\(not available memory\\) [\\#940](https://github.com/kokkos/kokkos/issues/940)\n- Memory pool aborts on zero allocation request, returns NULL for \\< minimum [\\#939](https://github.com/kokkos/kokkos/issues/939)\n- Error with TaskScheduler query of underlying memory pool [\\#917](https://github.com/kokkos/kokkos/issues/917)\n- Profiling::\\*Callee static variables declared in header [\\#863](https://github.com/kokkos/kokkos/issues/863)\n- calling \\*Space::name\\(\\) causes compile error [\\#862](https://github.com/kokkos/kokkos/issues/862)\n- bug in Profiling::deallocateData [\\#860](https://github.com/kokkos/kokkos/issues/860)\n- task\\_depend test failing, CUDA 8.0 + Pascal + RDC [\\#829](https://github.com/kokkos/kokkos/issues/829)\n- \\[develop branch\\] Standalone cmake issues [\\#826](https://github.com/kokkos/kokkos/issues/826)\n- Kokkos CUDA failes to compile with OMPI\\_CXX and MPICH\\_CXX wrappers [\\#776](https://github.com/kokkos/kokkos/issues/776)\n- Task Team reduction on Pascal [\\#767](https://github.com/kokkos/kokkos/issues/767)\n- CUDA stack overflow with TaskDAG test [\\#758](https://github.com/kokkos/kokkos/issues/758)\n- TeamVector test on Cuda [\\#670](https://github.com/kokkos/kokkos/issues/670)\n- Clang 4.0 Cuda Build broken again [\\#560](https://github.com/kokkos/kokkos/issues/560)\n\n\n## [2.03.05](https://github.com/kokkos/kokkos/tree/2.03.05) (2017-05-27)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/2.03.00...2.03.05)\n\n**Implemented enhancements:**\n\n- Harmonize Custom Reductions over nesting levels [\\#802](https://github.com/kokkos/kokkos/issues/802)\n- Prevent users directly including KokkosCore\\_config.h [\\#815](https://github.com/kokkos/kokkos/issues/815)\n- DualView aborts on concurrent host/device modify \\(in debug mode\\) [\\#814](https://github.com/kokkos/kokkos/issues/814)\n- Abort when running on a NVIDIA CC5.0 or higher architecture with code compiled for CC \\< 5.0 [\\#813](https://github.com/kokkos/kokkos/issues/813)\n- Add \"name\" function to ExecSpaces [\\#806](https://github.com/kokkos/kokkos/issues/806)\n- Allow null Future in task spawn dependences [\\#795](https://github.com/kokkos/kokkos/issues/795)\n- Add Unit Tests for Kokkos::complex [\\#785](https://github.com/kokkos/kokkos/issues/785)\n- Add pow function for Kokkos::complex [\\#784](https://github.com/kokkos/kokkos/issues/784)\n- Square root of a complex [\\#729](https://github.com/kokkos/kokkos/issues/729)\n- Command line processing of --threads argument prevents users from having any commandline arguments starting with --threads [\\#760](https://github.com/kokkos/kokkos/issues/760)\n- Protected deprecated API with appropriate macro [\\#756](https://github.com/kokkos/kokkos/issues/756)\n- Allow task scheduler memory pool to be used by tasks [\\#747](https://github.com/kokkos/kokkos/issues/747)\n- View bounds checking on host-side performance: constructing a std::string [\\#723](https://github.com/kokkos/kokkos/issues/723)\n- Add check for AppleClang as compiler distinct from check for Clang. [\\#705](https://github.com/kokkos/kokkos/issues/705)\n- Uninclude source files for specific configurations to prevent link warning. [\\#701](https://github.com/kokkos/kokkos/issues/701)\n- Add --small option to snapshot script [\\#697](https://github.com/kokkos/kokkos/issues/697)\n- CMake Standalone Support [\\#674](https://github.com/kokkos/kokkos/issues/674)\n- CMake build unit test and install [\\#808](https://github.com/kokkos/kokkos/issues/808)\n- CMake: Fix having kokkos as a subdirectory in a pure cmake project [\\#629](https://github.com/kokkos/kokkos/issues/629)\n- Tribits macro assumes build directory is in top level source directory [\\#654](https://github.com/kokkos/kokkos/issues/654)\n- Use bin/nvcc\\_wrapper, not config/nvcc\\_wrapper [\\#562](https://github.com/kokkos/kokkos/issues/562)\n- Allow MemoryPool::allocate\\(\\) to be called from multiple threads per warp. [\\#487](https://github.com/kokkos/kokkos/issues/487)\n- Allow MemoryPool::allocate\\\\(\\\\) to be called from multiple threads per warp. [\\#487](https://github.com/kokkos/kokkos/issues/487)\n- Move OpenMP 4.5 OpenMPTarget backend into Develop [\\#456](https://github.com/kokkos/kokkos/issues/456)\n- Testing on ARM testbed [\\#288](https://github.com/kokkos/kokkos/issues/288)\n\n**Fixed bugs:**\n\n- Fix label in OpenMP parallel\\_reduce verify\\_initialized [\\#834](https://github.com/kokkos/kokkos/issues/834)\n- TeamScratch Level 1 on Cuda hangs [\\#820](https://github.com/kokkos/kokkos/issues/820)\n- \\[bug\\] memory pool. [\\#786](https://github.com/kokkos/kokkos/issues/786)\n- Some Reduction Tests fail on Intel 18 with aggressive vectorization on [\\#774](https://github.com/kokkos/kokkos/issues/774)\n- Error copying dynamic view on copy of memory pool [\\#773](https://github.com/kokkos/kokkos/issues/773)\n- CUDA stack overflow with TaskDAG test [\\#758](https://github.com/kokkos/kokkos/issues/758)\n- ThreadVectorRange Customized Reduction Bug [\\#739](https://github.com/kokkos/kokkos/issues/739)\n- set\\_scratch\\_size overflows  [\\#726](https://github.com/kokkos/kokkos/issues/726)\n- Get wrong results for compiler checks in Makefile on OS X. [\\#706](https://github.com/kokkos/kokkos/issues/706)\n- Fix check if multiple host architectures enabled. [\\#702](https://github.com/kokkos/kokkos/issues/702)\n- Threads Backend Does not Pass on Cray Compilers [\\#609](https://github.com/kokkos/kokkos/issues/609)\n- Rare bug in memory pool where allocation can finish on superblock in empty state [\\#452](https://github.com/kokkos/kokkos/issues/452)\n- LDFLAGS in core/unit\\_test/Makefile: potential \"undefined reference\" to pthread lib [\\#148](https://github.com/kokkos/kokkos/issues/148)\n\n## [2.03.00](https://github.com/kokkos/kokkos/tree/2.03.00) (2017-04-25)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/2.02.15...2.03.00)\n\n**Implemented enhancements:**\n\n- UnorderedMap: make it accept Devices or MemorySpaces [\\#711](https://github.com/kokkos/kokkos/issues/711)\n- sort to accept DynamicView and \\[begin,end\\) indices [\\#691](https://github.com/kokkos/kokkos/issues/691)\n- ENABLE Macros should only be used via \\#ifdef or \\#if defined [\\#675](https://github.com/kokkos/kokkos/issues/675)\n- Remove impl/Kokkos\\_Synchronic\\_\\* [\\#666](https://github.com/kokkos/kokkos/issues/666)\n- Turning off IVDEP for Intel 14.  [\\#638](https://github.com/kokkos/kokkos/issues/638)\n- Using an installed Kokkos in a target application using CMake [\\#633](https://github.com/kokkos/kokkos/issues/633)\n- Create Kokkos Bill of Materials [\\#632](https://github.com/kokkos/kokkos/issues/632)\n- MDRangePolicy and tagged evaluators [\\#547](https://github.com/kokkos/kokkos/issues/547)\n- Add PGI support [\\#289](https://github.com/kokkos/kokkos/issues/289)\n\n**Fixed bugs:**\n\n- Output from PerTeam fails [\\#733](https://github.com/kokkos/kokkos/issues/733)\n- Cuda: architecture flag not added to link line [\\#688](https://github.com/kokkos/kokkos/issues/688)\n- Getting large chunks of memory for a thread team in a universal way [\\#664](https://github.com/kokkos/kokkos/issues/664)\n- Kokkos RNG normal\\(\\) function hangs for small seed value [\\#655](https://github.com/kokkos/kokkos/issues/655)\n- Kokkos Tests Errors on Shepard/HSW Builds [\\#644](https://github.com/kokkos/kokkos/issues/644)\n\n## [2.02.15](https://github.com/kokkos/kokkos/tree/2.02.15) (2017-02-10)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/2.02.07...2.02.15)\n\n**Implemented enhancements:**\n\n- Containers: Adding block partitioning to StaticCrsGraph [\\#625](https://github.com/kokkos/kokkos/issues/625)\n- Kokkos Make System can induce Errors on Cray Volta System [\\#610](https://github.com/kokkos/kokkos/issues/610)\n- OpenMP: error out if KOKKOS\\_HAVE\\_OPENMP is defined but not \\_OPENMP [\\#605](https://github.com/kokkos/kokkos/issues/605)\n- CMake: fix standalone build with tests [\\#604](https://github.com/kokkos/kokkos/issues/604)\n- Change README \\(that GitHub shows when opening Kokkos project page\\) to tell users how to submit PRs [\\#597](https://github.com/kokkos/kokkos/issues/597)\n- Add correctness testing for all operators of Atomic View [\\#420](https://github.com/kokkos/kokkos/issues/420)\n- Allow assignment of Views with compatible memory spaces [\\#290](https://github.com/kokkos/kokkos/issues/290)\n- Build only one version of Kokkos library for tests [\\#213](https://github.com/kokkos/kokkos/issues/213)\n- Clean out old KOKKOS\\_HAVE\\_CXX11 macros clauses [\\#156](https://github.com/kokkos/kokkos/issues/156)\n- Harmonize Macro names [\\#150](https://github.com/kokkos/kokkos/issues/150)\n\n**Fixed bugs:**\n\n- Cray and PGI: Kokkos\\_Parallel\\_Reduce [\\#634](https://github.com/kokkos/kokkos/issues/634)\n- Kokkos Make System can induce Errors on Cray Volta System [\\#610](https://github.com/kokkos/kokkos/issues/610)\n- Normal\\(\\) function random number generator doesn't give the expected distribution [\\#592](https://github.com/kokkos/kokkos/issues/592)\n\n## [2.02.07](https://github.com/kokkos/kokkos/tree/2.02.07) (2016-12-16)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/2.02.01...2.02.07)\n\n**Implemented enhancements:**\n\n- Add CMake option to enable Cuda Lambda support [\\#589](https://github.com/kokkos/kokkos/issues/589)\n- Add CMake option to enable Cuda RDC support [\\#588](https://github.com/kokkos/kokkos/issues/588)\n- Add Initial Intel Sky Lake Xeon-HPC Compiler Support to Kokkos Make System [\\#584](https://github.com/kokkos/kokkos/issues/584)\n- Building Tutorial Examples  [\\#582](https://github.com/kokkos/kokkos/issues/582)\n- Internal way for using ThreadVectorRange without TeamHandle  [\\#574](https://github.com/kokkos/kokkos/issues/574)\n- Testing: Add testing for uvm and rdc [\\#571](https://github.com/kokkos/kokkos/issues/571)\n- Profiling: Add Memory Tracing and Region Markers [\\#557](https://github.com/kokkos/kokkos/issues/557)\n- nvcc\\_wrapper not installed with Kokkos built with CUDA through CMake [\\#543](https://github.com/kokkos/kokkos/issues/543)\n- Improve DynRankView debug check [\\#541](https://github.com/kokkos/kokkos/issues/541)\n- Benchmarks: Add Gather benchmark [\\#536](https://github.com/kokkos/kokkos/issues/536)\n- Testing: add spot\\_check option to test\\_all\\_sandia [\\#535](https://github.com/kokkos/kokkos/issues/535)\n- Deprecate Kokkos::Impl::VerifyExecutionCanAccessMemorySpace [\\#527](https://github.com/kokkos/kokkos/issues/527)\n- Add AtomicAdd support for 64bit float for Pascal [\\#522](https://github.com/kokkos/kokkos/issues/522)\n- Add Restrict and Aligned memory trait [\\#517](https://github.com/kokkos/kokkos/issues/517)\n- Kokkos Tests are Not Run using Compiler Optimization [\\#501](https://github.com/kokkos/kokkos/issues/501)\n- Add support for clang 3.7 w/ openmp backend [\\#393](https://github.com/kokkos/kokkos/issues/393)\n- Provide an error throw class [\\#79](https://github.com/kokkos/kokkos/issues/79)\n\n**Fixed bugs:**\n\n- Cuda UVM Allocation test broken with UVM as default space [\\#586](https://github.com/kokkos/kokkos/issues/586)\n- Bug \\(develop branch only\\): multiple tests are now failing when forcing uvm usage. [\\#570](https://github.com/kokkos/kokkos/issues/570)\n- Error in generate\\_makefile.sh for Kokkos when Compiler is Empty String/Fails [\\#568](https://github.com/kokkos/kokkos/issues/568)\n- XL 13.1.4 incorrect C++11 flag [\\#553](https://github.com/kokkos/kokkos/issues/553)\n- Improve DynRankView debug check [\\#541](https://github.com/kokkos/kokkos/issues/541)\n- Installing Library on MAC broken due to cp -u [\\#539](https://github.com/kokkos/kokkos/issues/539)\n- Intel Nightly Testing with Debug enabled fails [\\#534](https://github.com/kokkos/kokkos/issues/534)\n\n## [2.02.01](https://github.com/kokkos/kokkos/tree/2.02.01) (2016-11-01)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/2.02.00...2.02.01)\n\n**Implemented enhancements:**\n\n- Add Changelog generation to our process. [\\#506](https://github.com/kokkos/kokkos/issues/506)\n\n**Fixed bugs:**\n\n- Test scratch\\_request fails in Serial with Debug enabled [\\#520](https://github.com/kokkos/kokkos/issues/520)\n- Bug In BoundsCheck for DynRankView [\\#516](https://github.com/kokkos/kokkos/issues/516)\n\n## [2.02.00](https://github.com/kokkos/kokkos/tree/2.02.00) (2016-10-30)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/2.01.10...2.02.00)\n\n**Implemented enhancements:**\n\n- Add PowerPC assembly for grabbing clock register in memory pool [\\#511](https://github.com/kokkos/kokkos/issues/511)\n- Add GCC 6.x support [\\#508](https://github.com/kokkos/kokkos/issues/508)\n- Test install and build against installed library [\\#498](https://github.com/kokkos/kokkos/issues/498)\n- Makefile.kokkos adds expt-extended-lambda to cuda build with clang [\\#490](https://github.com/kokkos/kokkos/issues/490)\n- Add top-level makefile option to just test kokkos-core unit-test [\\#485](https://github.com/kokkos/kokkos/issues/485)\n- Split and harmonize Object Files of Core UnitTests to increase build parallelism [\\#484](https://github.com/kokkos/kokkos/issues/484)\n- LayoutLeft to LayoutLeft subview for 3D and 4D views [\\#473](https://github.com/kokkos/kokkos/issues/473)\n- Add official Cuda 8.0 support [\\#468](https://github.com/kokkos/kokkos/issues/468)\n- Allow C++1Z Flag for Class Lambda capture [\\#465](https://github.com/kokkos/kokkos/issues/465)\n- Add Clang 4.0+ compilation of Cuda code [\\#455](https://github.com/kokkos/kokkos/issues/455)\n- Possible Issue with Intel 17.0.098 and GCC 6.1.0 in Develop Branch [\\#445](https://github.com/kokkos/kokkos/issues/445)\n- Add name of view to \"View bounds error\" [\\#432](https://github.com/kokkos/kokkos/issues/432)\n- Move Sort Binning Operators into Kokkos namespace [\\#421](https://github.com/kokkos/kokkos/issues/421)\n- TaskPolicy - generate error when attempt to use uninitialized  [\\#396](https://github.com/kokkos/kokkos/issues/396)\n- Import WithoutInitializing and AllowPadding into Kokkos namespace [\\#325](https://github.com/kokkos/kokkos/issues/325)\n- TeamThreadRange requires begin, end to be the same type [\\#305](https://github.com/kokkos/kokkos/issues/305)\n- CudaUVMSpace should track \\# allocations, due to CUDA limit on \\# UVM allocations [\\#300](https://github.com/kokkos/kokkos/issues/300)\n- Remove old View and its infrastructure [\\#259](https://github.com/kokkos/kokkos/issues/259)\n\n**Fixed bugs:**\n\n- Bug in TestCuda\\_Other.cpp: most likely assembly inserted into Device code [\\#515](https://github.com/kokkos/kokkos/issues/515)\n- Cuda Compute Capability check of GPU is outdated [\\#509](https://github.com/kokkos/kokkos/issues/509)\n- multi\\_scratch test with hwloc and pthreads seg-faults.  [\\#504](https://github.com/kokkos/kokkos/issues/504)\n- generate\\_makefile.bash: \"make install\" is broken [\\#503](https://github.com/kokkos/kokkos/issues/503)\n- make clean in Out of Source Build/Tests Does Not Work Correctly [\\#502](https://github.com/kokkos/kokkos/issues/502)\n- Makefiles for test and examples have issues in Cuda when CXX is not explicitly specified [\\#497](https://github.com/kokkos/kokkos/issues/497)\n- Dispatch lambda test directly inside GTEST macro doesn't work with nvcc [\\#491](https://github.com/kokkos/kokkos/issues/491)\n- UnitTests with HWLOC enabled fail if run with mpirun bound to a single core [\\#489](https://github.com/kokkos/kokkos/issues/489)\n- Failing Reducer Test on Mac with Pthreads [\\#479](https://github.com/kokkos/kokkos/issues/479)\n- make test Dumps Error with Clang Not Found [\\#471](https://github.com/kokkos/kokkos/issues/471)\n- OpenMP TeamPolicy member broadcast not using correct volatile shared variable [\\#424](https://github.com/kokkos/kokkos/issues/424)\n- TaskPolicy - generate error when attempt to use uninitialized  [\\#396](https://github.com/kokkos/kokkos/issues/396)\n- New task policy implementation is pulling in old experimental code. [\\#372](https://github.com/kokkos/kokkos/issues/372)\n- MemoryPool unit test hangs on Power8 with GCC 6.1.0 [\\#298](https://github.com/kokkos/kokkos/issues/298)\n\n## [2.01.10](https://github.com/kokkos/kokkos/tree/2.01.10) (2016-09-27)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/2.01.06...2.01.10)\n\n**Implemented enhancements:**\n\n- Enable Profiling by default in Tribits build [\\#438](https://github.com/kokkos/kokkos/issues/438)\n- parallel\\_reduce\\(0\\), parallel\\_scan\\(0\\) unit tests [\\#436](https://github.com/kokkos/kokkos/issues/436)\n- data\\(\\)==NULL after realloc with LayoutStride [\\#351](https://github.com/kokkos/kokkos/issues/351)\n- Fix tutorials to track new Kokkos::View [\\#323](https://github.com/kokkos/kokkos/issues/323)\n- Rename team policy set\\_scratch\\_size. [\\#195](https://github.com/kokkos/kokkos/issues/195)\n\n**Fixed bugs:**\n\n- Possible Issue with Intel 17.0.098 and GCC 6.1.0 in Develop Branch [\\#445](https://github.com/kokkos/kokkos/issues/445)\n- Makefile spits syntax error [\\#435](https://github.com/kokkos/kokkos/issues/435)\n- Kokkos::sort fails for view with all the same values [\\#422](https://github.com/kokkos/kokkos/issues/422)\n- Generic Reducers: can't accept inline constructed reducer [\\#404](https://github.com/kokkos/kokkos/issues/404)\n- data\\\\(\\\\)==NULL after realloc with LayoutStride [\\#351](https://github.com/kokkos/kokkos/issues/351)\n- const subview of const view with compile time dimensions on Cuda backend [\\#310](https://github.com/kokkos/kokkos/issues/310)\n- Kokkos \\(in Trilinos\\) Causes Internal Compiler Error on CUDA 8.0.21-EA on POWER8 [\\#307](https://github.com/kokkos/kokkos/issues/307)\n- Core Oversubscription Detection Broken? [\\#159](https://github.com/kokkos/kokkos/issues/159)\n\n\n## [2.01.06](https://github.com/kokkos/kokkos/tree/2.01.06) (2016-09-02)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/2.01.00...2.01.06)\n\n**Implemented enhancements:**\n\n- Add \"standard\" reducers for lambda-supportable customized reduce [\\#411](https://github.com/kokkos/kokkos/issues/411)\n- TaskPolicy - single thread back-end execution [\\#390](https://github.com/kokkos/kokkos/issues/390)\n- Kokkos master clone tag [\\#387](https://github.com/kokkos/kokkos/issues/387)\n- Query memory requirements from task policy [\\#378](https://github.com/kokkos/kokkos/issues/378)\n- Output order of test\\_atomic.cpp is confusing [\\#373](https://github.com/kokkos/kokkos/issues/373)\n- Missing testing for atomics [\\#341](https://github.com/kokkos/kokkos/issues/341)\n- Feature request for Kokkos to provide Kokkos::atomic\\_fetch\\_max and atomic\\_fetch\\_min [\\#336](https://github.com/kokkos/kokkos/issues/336)\n- TaskPolicy\\<Cuda\\> performance requires teams mapped to warps [\\#218](https://github.com/kokkos/kokkos/issues/218)\n\n**Fixed bugs:**\n\n- Reduce with Teams broken for custom initialize [\\#407](https://github.com/kokkos/kokkos/issues/407)\n- Failing Kokkos build on Debian [\\#402](https://github.com/kokkos/kokkos/issues/402)\n- Failing Tests on NVIDIA Pascal GPUs [\\#398](https://github.com/kokkos/kokkos/issues/398)\n- Algorithms: fill\\_random assumes dimensions fit in unsigned int [\\#389](https://github.com/kokkos/kokkos/issues/389)\n- Kokkos::subview with RandomAccess Memory Trait [\\#385](https://github.com/kokkos/kokkos/issues/385)\n- Build warning \\(signed / unsigned comparison\\) in Cuda implementation [\\#365](https://github.com/kokkos/kokkos/issues/365)\n- wrong results for a parallel\\_reduce with CUDA8 / Maxwell50 [\\#352](https://github.com/kokkos/kokkos/issues/352)\n- Hierarchical parallelism - 3 level unit test [\\#344](https://github.com/kokkos/kokkos/issues/344)\n- Can I allocate a View w/ both WithoutInitializing & AllowPadding? [\\#324](https://github.com/kokkos/kokkos/issues/324)\n- subview View layout determination [\\#309](https://github.com/kokkos/kokkos/issues/309)\n- Unit tests with Cuda - Maxwell [\\#196](https://github.com/kokkos/kokkos/issues/196)\n\n## [2.01.00](https://github.com/kokkos/kokkos/tree/2.01.00) (2016-07-21)\n[Full Changelog](https://github.com/kokkos/kokkos/compare/End_C++98...2.01.00)\n\n**Implemented enhancements:**\n\n- Edit ViewMapping so assigning Views with the same custom layout compiles when const casting [\\#327](https://github.com/kokkos/kokkos/issues/327)\n- DynRankView: Performance improvement for operator\\(\\) [\\#321](https://github.com/kokkos/kokkos/issues/321)\n- Interoperability between static and dynamic rank views [\\#295](https://github.com/kokkos/kokkos/issues/295)\n- subview member function ? [\\#280](https://github.com/kokkos/kokkos/issues/280)\n- Inter-operatibility between View and DynRankView. [\\#245](https://github.com/kokkos/kokkos/issues/245)\n- \\(Trilinos\\) build warning in atomic\\_assign, with Kokkos::complex [\\#177](https://github.com/kokkos/kokkos/issues/177)\n- View\\<\\>::shmem\\_size should runtime check for number of arguments equal to rank [\\#176](https://github.com/kokkos/kokkos/issues/176)\n- Custom reduction join via lambda argument [\\#99](https://github.com/kokkos/kokkos/issues/99)\n- DynRankView with 0 dimensions passed in at construction [\\#293](https://github.com/kokkos/kokkos/issues/293)\n- Inject view\\_alloc and friends into Kokkos namespace [\\#292](https://github.com/kokkos/kokkos/issues/292)\n- Less restrictive TeamPolicy reduction on Cuda [\\#286](https://github.com/kokkos/kokkos/issues/286)\n- deep\\_copy using remap with source execution space [\\#267](https://github.com/kokkos/kokkos/issues/267)\n- Suggestion:  Enable opt-in L1 caching via nvcc-wrapper [\\#261](https://github.com/kokkos/kokkos/issues/261)\n- More flexible create\\_mirror functions [\\#260](https://github.com/kokkos/kokkos/issues/260)\n- Rename View::memory\\_span to View::required\\_allocation\\_size [\\#256](https://github.com/kokkos/kokkos/issues/256)\n- Use of subviews and views with compile-time dimensions [\\#237](https://github.com/kokkos/kokkos/issues/237)\n- Use of subviews and views with compile-time dimensions [\\#237](https://github.com/kokkos/kokkos/issues/237)\n- Kokkos::Timer [\\#234](https://github.com/kokkos/kokkos/issues/234)\n- Fence CudaUVMSpace allocations [\\#230](https://github.com/kokkos/kokkos/issues/230)\n- View::operator\\(\\) accept std::is\\_integral and std::is\\_enum [\\#227](https://github.com/kokkos/kokkos/issues/227)\n- Allocating zero size View [\\#216](https://github.com/kokkos/kokkos/issues/216)\n- Thread scalable memory pool [\\#212](https://github.com/kokkos/kokkos/issues/212)\n- Add a way to disable memory leak output [\\#194](https://github.com/kokkos/kokkos/issues/194)\n- Kokkos exec space init should init Kokkos profiling [\\#192](https://github.com/kokkos/kokkos/issues/192)\n- Runtime rank wrapper for View [\\#189](https://github.com/kokkos/kokkos/issues/189)\n- Profiling Interface [\\#158](https://github.com/kokkos/kokkos/issues/158)\n- Fix View assignment \\(of managed to unmanaged\\) [\\#153](https://github.com/kokkos/kokkos/issues/153)\n- Add unit test for assignment of managed View to unmanaged View [\\#152](https://github.com/kokkos/kokkos/issues/152)\n- Check for oversubscription of threads with MPI in Kokkos::initialize [\\#149](https://github.com/kokkos/kokkos/issues/149)\n- Dynamic resizeable 1dimensional view [\\#143](https://github.com/kokkos/kokkos/issues/143)\n- Develop TaskPolicy for CUDA [\\#142](https://github.com/kokkos/kokkos/issues/142)\n- New View : Test Compilation Downstream [\\#138](https://github.com/kokkos/kokkos/issues/138)\n- New View Implementation [\\#135](https://github.com/kokkos/kokkos/issues/135)\n- Add variant of subview that lets users add traits [\\#134](https://github.com/kokkos/kokkos/issues/134)\n- NVCC-WRAPPER: Add --host-only flag [\\#121](https://github.com/kokkos/kokkos/issues/121)\n- Address gtest issue with TriBITS Kokkos build outside of Trilinos [\\#117](https://github.com/kokkos/kokkos/issues/117)\n- Make tests pass with -expt-extended-lambda on CUDA [\\#108](https://github.com/kokkos/kokkos/issues/108)\n- Dynamic scheduling for parallel\\_for and parallel\\_reduce [\\#106](https://github.com/kokkos/kokkos/issues/106)\n- Runtime or compile time error when reduce functor's join is not properly specified as const member function or with volatile arguments [\\#105](https://github.com/kokkos/kokkos/issues/105)\n- Error out when the number of threads is modified after kokkos is initialized [\\#104](https://github.com/kokkos/kokkos/issues/104)\n- Porting to POWER and remove assumption of X86 default [\\#103](https://github.com/kokkos/kokkos/issues/103)\n- Dynamic scheduling option for RangePolicy [\\#100](https://github.com/kokkos/kokkos/issues/100)\n- SharedMemory Support for Lambdas [\\#81](https://github.com/kokkos/kokkos/issues/81)\n- Recommended TeamSize for Lambdas [\\#80](https://github.com/kokkos/kokkos/issues/80)\n- Add Aggressive Vectorization Compilation mode [\\#72](https://github.com/kokkos/kokkos/issues/72)\n- Dynamic scheduling team execution policy [\\#53](https://github.com/kokkos/kokkos/issues/53)\n- UVM allocations in multi-GPU systems [\\#50](https://github.com/kokkos/kokkos/issues/50)\n- Synchronic in Kokkos::Impl [\\#44](https://github.com/kokkos/kokkos/issues/44)\n- index and dimension types in for loops [\\#28](https://github.com/kokkos/kokkos/issues/28)\n- Subview assign of 1D Strided with stride 1 to LayoutLeft/Right [\\#1](https://github.com/kokkos/kokkos/issues/1)\n\n**Fixed bugs:**\n\n- misspelled variable name in Kokkos\\_Atomic\\_Fetch + missing unit tests [\\#340](https://github.com/kokkos/kokkos/issues/340)\n- seg fault Kokkos::Impl::CudaInternal::print\\_configuration [\\#338](https://github.com/kokkos/kokkos/issues/338)\n- Clang compiler error with named parallel\\_reduce, tags, and TeamPolicy. [\\#335](https://github.com/kokkos/kokkos/issues/335)\n- Shared Memory Allocation Error at parallel\\_reduce [\\#311](https://github.com/kokkos/kokkos/issues/311)\n- DynRankView: Fix resize and realloc [\\#303](https://github.com/kokkos/kokkos/issues/303)\n- Scratch memory and dynamic scheduling [\\#279](https://github.com/kokkos/kokkos/issues/279)\n- MemoryPool infinite loop when out of memory [\\#312](https://github.com/kokkos/kokkos/issues/312)\n- Kokkos DynRankView changes break Sacado and Panzer [\\#299](https://github.com/kokkos/kokkos/issues/299)\n- MemoryPool fails to compile on non-cuda non-x86 [\\#297](https://github.com/kokkos/kokkos/issues/297)\n- Random Number Generator Fix [\\#296](https://github.com/kokkos/kokkos/issues/296)\n- View template parameter ordering Bug [\\#282](https://github.com/kokkos/kokkos/issues/282)\n- Serial task policy broken. [\\#281](https://github.com/kokkos/kokkos/issues/281)\n- deep\\_copy with LayoutStride should not memcpy [\\#262](https://github.com/kokkos/kokkos/issues/262)\n- DualView::need\\_sync should be a const method [\\#248](https://github.com/kokkos/kokkos/issues/248)\n- Arbitrary-sized atomics on GPUs broken; loop forever [\\#238](https://github.com/kokkos/kokkos/issues/238)\n- boolean reduction value\\_type changes answer [\\#225](https://github.com/kokkos/kokkos/issues/225)\n- Custom init\\(\\) function for parallel\\_reduce with array value\\_type [\\#210](https://github.com/kokkos/kokkos/issues/210)\n- unit\\_test Makefile is Broken - Recursively Calls itself until Machine Apocalypse. [\\#202](https://github.com/kokkos/kokkos/issues/202)\n- nvcc\\_wrapper Does Not Support  -Xcompiler \\<compiler option\\> [\\#198](https://github.com/kokkos/kokkos/issues/198)\n- Kokkos exec space init should init Kokkos profiling [\\#192](https://github.com/kokkos/kokkos/issues/192)\n- Kokkos Threads Backend impl\\_shared\\_alloc Broken on Intel 16.1 \\(Shepard Haswell\\) [\\#186](https://github.com/kokkos/kokkos/issues/186)\n- pthread back end hangs if used uninitialized [\\#182](https://github.com/kokkos/kokkos/issues/182)\n- parallel\\_reduce of size 0, not calling init/join [\\#175](https://github.com/kokkos/kokkos/issues/175)\n- Bug in Threads with OpenMP enabled [\\#173](https://github.com/kokkos/kokkos/issues/173)\n- KokkosExp\\_SharedAlloc, m\\_team\\_work\\_index inaccessible [\\#166](https://github.com/kokkos/kokkos/issues/166)\n- 128-bit CAS without Assembly Broken? [\\#161](https://github.com/kokkos/kokkos/issues/161)\n- fatal error: Cuda/Kokkos\\_Cuda\\_abort.hpp: No such file or directory [\\#157](https://github.com/kokkos/kokkos/issues/157)\n- Power8: Fix OpenMP backend [\\#139](https://github.com/kokkos/kokkos/issues/139)\n- Data race in Kokkos OpenMP initialization [\\#131](https://github.com/kokkos/kokkos/issues/131)\n- parallel\\_launch\\_local\\_memory and cuda 7.5 [\\#125](https://github.com/kokkos/kokkos/issues/125)\n- Resize can fail with Cuda due to asynchronous dispatch [\\#119](https://github.com/kokkos/kokkos/issues/119)\n- Qthread taskpolicy initialization bug. [\\#92](https://github.com/kokkos/kokkos/issues/92)\n- Windows: sys/mman.h [\\#89](https://github.com/kokkos/kokkos/issues/89)\n- Windows: atomic\\_fetch\\_sub\\(\\) [\\#88](https://github.com/kokkos/kokkos/issues/88)\n- Windows: snprintf [\\#87](https://github.com/kokkos/kokkos/issues/87)\n- Parallel\\_Reduce with TeamPolicy and league size of 0 returns garbage [\\#85](https://github.com/kokkos/kokkos/issues/85)\n- Throw with Cuda when using \\(2D\\) team\\_policy parallel\\_reduce with less than a warp size [\\#76](https://github.com/kokkos/kokkos/issues/76)\n- Scalar views don't work with Kokkos::Atomic memory trait [\\#69](https://github.com/kokkos/kokkos/issues/69)\n- Reduce the number of threads per team for Cuda [\\#63](https://github.com/kokkos/kokkos/issues/63)\n- Named Kernels fail for reductions with CUDA [\\#60](https://github.com/kokkos/kokkos/issues/60)\n- Kokkos View dimension\\_\\(\\) for long returning unsigned int [\\#20](https://github.com/kokkos/kokkos/issues/20)\n- atomic test hangs with LLVM [\\#6](https://github.com/kokkos/kokkos/issues/6)\n- OpenMP Test should set omp\\_set\\_num\\_threads to 1 [\\#4](https://github.com/kokkos/kokkos/issues/4)\n\n**Closed issues:**\n\n- develop branch broken with CUDA 8 and --expt-extended-lambda  [\\#354](https://github.com/kokkos/kokkos/issues/354)\n- --arch=KNL with Intel 2016 build failure [\\#349](https://github.com/kokkos/kokkos/issues/349)\n- Error building with Cuda when passing -DKOKKOS\\_CUDA\\_USE\\_LAMBDA to generate\\_makefile.bash [\\#343](https://github.com/kokkos/kokkos/issues/343)\n- Can I safely use int indices in a 2-D View with capacity \\> 2B? [\\#318](https://github.com/kokkos/kokkos/issues/318)\n- Kokkos::ViewAllocateWithoutInitializing is not working [\\#317](https://github.com/kokkos/kokkos/issues/317)\n- Intel build on Mac OS X [\\#277](https://github.com/kokkos/kokkos/issues/277)\n- deleted [\\#271](https://github.com/kokkos/kokkos/issues/271)\n- Broken Mira build [\\#268](https://github.com/kokkos/kokkos/issues/268)\n- 32-bit build [\\#246](https://github.com/kokkos/kokkos/issues/246)\n- parallel\\_reduce with RDC crashes linker [\\#232](https://github.com/kokkos/kokkos/issues/232)\n- build of Kokkos\\_Sparse\\_MV\\_impl\\_spmv\\_Serial.cpp.o fails if you use nvcc and have cuda disabled [\\#209](https://github.com/kokkos/kokkos/issues/209)\n- Kokkos Serial execution space is not tested with TeamPolicy. [\\#207](https://github.com/kokkos/kokkos/issues/207)\n- Unit test failure on Hansen  KokkosCore\\_UnitTest\\_Cuda\\_MPI\\_1 [\\#200](https://github.com/kokkos/kokkos/issues/200)\n- nvcc compiler warning: calling a \\_\\_host\\_\\_ function from a \\_\\_host\\_\\_ \\_\\_device\\_\\_ function is not allowed [\\#180](https://github.com/kokkos/kokkos/issues/180)\n- Intel 15 build error with defaulted \"move\" operators [\\#171](https://github.com/kokkos/kokkos/issues/171)\n- missing libkokkos.a during Trilinos 12.4.2 build, yet other libkokkos\\*.a libs are there [\\#165](https://github.com/kokkos/kokkos/issues/165)\n- Tie atomic updates to execution space or even to thread team? \\(speculation\\) [\\#144](https://github.com/kokkos/kokkos/issues/144)\n- New View: Compiletime/size Test [\\#137](https://github.com/kokkos/kokkos/issues/137)\n- New View : Performance Test [\\#136](https://github.com/kokkos/kokkos/issues/136)\n- Signed/unsigned  comparison warning in CUDA parallel [\\#130](https://github.com/kokkos/kokkos/issues/130)\n- Kokkos::complex: Need op\\* w/ std::complex & real [\\#126](https://github.com/kokkos/kokkos/issues/126)\n- Use uintptr\\_t for casting pointers [\\#110](https://github.com/kokkos/kokkos/issues/110)\n- Default thread mapping behavior between P and Q threads. [\\#91](https://github.com/kokkos/kokkos/issues/91)\n- Windows: Atomic\\_Fetch\\_Exchange\\(\\) return type [\\#90](https://github.com/kokkos/kokkos/issues/90)\n- Synchronic unit test is way too long [\\#84](https://github.com/kokkos/kokkos/issues/84)\n- nvcc\\_wrapper -\\> $\\(NVCC\\_WRAPPER\\) [\\#42](https://github.com/kokkos/kokkos/issues/42)\n- Check compiler version and print helpful message [\\#39](https://github.com/kokkos/kokkos/issues/39)\n- Kokkos shared memory on Cuda uses a lot of registers [\\#31](https://github.com/kokkos/kokkos/issues/31)\n- Can not pass unit test `cuda.space` without a GT 720 [\\#25](https://github.com/kokkos/kokkos/issues/25)\n- Makefile.kokkos lacks bounds checking option that CMake has [\\#24](https://github.com/kokkos/kokkos/issues/24)\n- Kokkos can not complete unit tests with CUDA UVM enabled [\\#23](https://github.com/kokkos/kokkos/issues/23)\n- Simplify teams + shared memory histogram example to remove vectorization [\\#21](https://github.com/kokkos/kokkos/issues/21)\n- Kokkos needs to rever to ${PROJECT\\_NAME}\\_ENABLE\\_CXX11 not Trilinos\\_ENABLE\\_CXX11 [\\#17](https://github.com/kokkos/kokkos/issues/17)\n- Kokkos Base Makefile adds AVX to KNC Build [\\#16](https://github.com/kokkos/kokkos/issues/16)\n- MS Visual Studio 2013 Build Errors [\\#9](https://github.com/kokkos/kokkos/issues/9)\n- subview\\(X, ALL\\(\\), j\\) for 2-D LayoutRight View X: should it view a column? [\\#5](https://github.com/kokkos/kokkos/issues/5)\n\n## [End_C++98](https://github.com/kokkos/kokkos/tree/End_C++98) (2015-04-15)\n\n\n\\* *This Change Log was automatically generated by [github_changelog_generator](https://github.com/skywinder/Github-Changelog-Generator)*\n"
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 1.63671875,
          "content": "cff-version: 1.2.0\ntitle: Kokkos\nmessage: >-\n  If you use this software, please cite the overview paper\ntype: software\nauthors:\n  - name: The Kokkos authors\n    website: https://kokkos.org/community/team/\nidentifiers:\n  - type: url\n    website: https://kokkos.org/kokkos-core-wiki/citation.html\nrepository-code: 'https://github.com/kokkos/kokkos'\nurl: 'https://kokkos.org/'\nlicense: Apache-2.0\npreferred-citation:\n  type: article\n  authors:\n  - given-names: Christian R.\n    family-names: Trott\n  - given-names: Damien\n    family-names: Lebrun-Grandié\n  - given-names: Daniel\n    family-names: Arndt\n  - family-names: Ciesko\n    given-names: Jan\n  - given-names: Vinh\n    family-names: Dang\n  - family-names: Ellingwood\n    given-names: Nathan\n  - given-names: Rahulkumar\n    family-names: Gayatri\n  - given-names: Evan\n    family-names: Harvey\n  - given-names: Daisy S.\n    family-names: Hollman\n  - given-names: Dan\n    family-names: Ibanez\n  - given-names: Nevin\n    family-names: Liber\n  - given-names: Jonathan\n    family-names: Madsen\n  - given-names: Jeff\n    family-names: Miles\n  - given-names: David\n    family-names: Poliakoff\n  - given-names: Amy\n    family-names: Powell\n  - given-names: Sivasankaran\n    family-names: Rajamanickam\n  - given-names: Mikael\n    family-names: Simberg\n  - given-names: Dan\n    family-names: Sunderland\n  - given-names: Bruno\n    family-names: Turcksin\n  - given-names: Jeremiah\n    family-names: Wilke\n  doi: 10.1109/TPDS.2021.3097283\n  journal: IEEE Transactions on Parallel and Distributed Systems\n  start: 805\n  end: 817\n  title: \"Kokkos 3: Programming Model Extensions for the Exascale Era\"\n  volume: 33\n  issue: 4\n  year: 2022\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 11.1533203125,
          "content": "cmake_minimum_required(VERSION 3.16 FATAL_ERROR)\n\n# Disable in-source builds to prevent source tree corruption.\nif(\"${CMAKE_SOURCE_DIR}\" STREQUAL \"${CMAKE_BINARY_DIR}\")\n  message(\n    FATAL_ERROR\n      \"FATAL: In-source builds are not allowed. You should create a separate directory for build files and delete CMakeCache.txt.\"\n  )\nendif()\n\n# We want to determine if options are given with the wrong case\n# In order to detect which arguments are given to compare against\n# the list of valid arguments, at the beginning here we need to\n# form a list of all the given variables. If it begins with any\n# case of KoKkOS, we add it to the list.\n\nget_cmake_property(_variableNames VARIABLES)\nset(KOKKOS_GIVEN_VARIABLES)\nforeach(var ${_variableNames})\n  string(TOUPPER ${var} UC_VAR)\n  string(FIND ${UC_VAR} KOKKOS IDX)\n  if(${IDX} EQUAL 0)\n    list(APPEND KOKKOS_GIVEN_VARIABLES ${var})\n  endif()\nendforeach()\n\n# Basic initialization (Used in KOKKOS_SETTINGS)\nset(Kokkos_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})\nset(KOKKOS_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})\nset(KOKKOS_SRC_PATH ${Kokkos_SOURCE_DIR})\nset(KOKKOS_PATH ${Kokkos_SOURCE_DIR})\nset(KOKKOS_TOP_BUILD_DIR ${CMAKE_CURRENT_BINARY_DIR})\n\nset(PACKAGE_NAME Kokkos)\nset(PACKAGE_SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}\")\n\n# Is this build a subdirectory of another project\nget_directory_property(HAS_PARENT PARENT_DIRECTORY)\n\ninclude(${KOKKOS_SRC_PATH}/cmake/kokkos_functions.cmake)\ninclude(${KOKKOS_SRC_PATH}/cmake/kokkos_pick_cxx_std.cmake)\n\nset(KOKKOS_ENABLED_OPTIONS) #exported in config file\nset(KOKKOS_ENABLED_DEVICES) #exported in config file\nset(KOKKOS_ENABLED_TPLS) #exported in config file\nset(KOKKOS_ENABLED_ARCH_LIST) #exported in config file\n\n#These are helper flags used for sanity checks during config\n#Certain features should depend on other features being configured first\nset(KOKKOS_CFG_DAG_NONE On) #sentinel to indicate no dependencies\nset(KOKKOS_CFG_DAG_DEVICES_DONE Off)\nset(KOKKOS_CFG_DAG_OPTIONS_DONE Off)\nset(KOKKOS_CFG_DAG_ARCH_DONE Off)\nset(KOKKOS_CFG_DAG_CXX_STD_DONE Off)\nset(KOKKOS_CFG_DAG_COMPILER_ID_DONE Off)\nfunction(KOKKOS_CFG_DEPENDS SUCCESSOR PRECURSOR)\n  set(PRE_FLAG KOKKOS_CFG_DAG_${PRECURSOR})\n  set(POST_FLAG KOKKOS_CFG_DAG_${SUCCESSOR})\n  if(NOT ${PRE_FLAG})\n    message(\n      FATAL_ERROR \"Bad CMake refactor: feature ${SUCCESSOR} cannot be configured until ${PRECURSOR} is configured\"\n    )\n  endif()\n  global_set(${POST_FLAG} On)\nendfunction()\n\nlist(APPEND CMAKE_MODULE_PATH cmake/Modules)\n\nset(CMAKE_DISABLE_SOURCE_CHANGES ON)\nset(CMAKE_DISABLE_IN_SOURCE_BUILD ON)\n\n# What language are we compiling Kokkos as\n# downstream dependencies need to match this!\nset(KOKKOS_COMPILE_LANGUAGE CXX)\n# use lower case here since we didn't parse options yet\nif(Kokkos_ENABLE_COMPILE_AS_CMAKE_LANGUAGE AND Kokkos_ENABLE_CUDA)\n\n  # Without this as a language for the package we would get a C++ compiler enabled.\n  # but we still need a C++ compiler even if we build all our cpp files as CUDA only\n  # because otherwise the C++ features don't work etc.\n  # This is just the rather odd way CMake does this, since CUDA doesn't imply C++ even\n  # though it is a C++ extension ... (but I guess it didn't use to be back in CUDA 4 or 5\n  # days.\n  set(KOKKOS_INTERNAL_EXTRA_COMPILE_LANGUAGE CXX)\n\n  set(KOKKOS_COMPILE_LANGUAGE CUDA)\nendif()\n# use lower case here since we haven't parsed options yet\nif(Kokkos_ENABLE_COMPILE_AS_CMAKE_LANGUAGE AND Kokkos_ENABLE_HIP)\n\n  # Without this as a language for the package we would get a C++ compiler enabled.\n  # but we still need a C++ compiler even if we build all our cpp files as HIP only\n  # because otherwise the C++ features don't work etc.\n  set(KOKKOS_INTERNAL_EXTRA_COMPILE_LANGUAGE CXX)\n\n  set(KOKKOS_COMPILE_LANGUAGE HIP)\nendif()\n\nif(Spack_WORKAROUND)\n  if(Kokkos_ENABLE_COMPILE_AS_CMAKE_LANGUAGE)\n    message(FATAL_ERROR \"Can't currently use Kokkos_ENABLE_COMPILER_AS_CMAKE_LANGUAGE in a spack installation!\")\n  endif()\n\n  #if we are explicitly using Spack for development,\n  #nuke the Spack compiler\n  set(SPACK_CXX $ENV{SPACK_CXX})\n  if(SPACK_CXX)\n    set(CMAKE_CXX_COMPILER ${SPACK_CXX} CACHE STRING \"the C++ compiler\" FORCE)\n    set(ENV{CXX} ${SPACK_CXX})\n  endif()\nendif()\n# Always call the project command to define Kokkos_ variables\n# and to make sure that C++ is an enabled language\nproject(Kokkos ${KOKKOS_COMPILE_LANGUAGE} ${KOKKOS_INTERNAL_EXTRA_COMPILE_LANGUAGE})\nif(NOT HAS_PARENT)\n  if(NOT CMAKE_BUILD_TYPE)\n    set(DEFAULT_BUILD_TYPE \"RelWithDebInfo\")\n    message(STATUS \"Setting build type to '${DEFAULT_BUILD_TYPE}' as none was specified.\")\n    set(CMAKE_BUILD_TYPE \"${DEFAULT_BUILD_TYPE}\"\n        CACHE STRING \"Choose the type of build, options are: Debug, Release, RelWithDebInfo and MinSizeRel.\" FORCE\n    )\n  endif()\nendif()\n\nif(NOT CMAKE_SIZEOF_VOID_P)\n  string(FIND ${CMAKE_CXX_COMPILER} nvcc_wrapper FIND_IDX)\n  if(NOT FIND_IDX STREQUAL -1)\n    message(\n      FATAL_ERROR\n        \"Kokkos did not configure correctly and failed to validate compiler. The most likely cause is CUDA linkage using nvcc_wrapper. Please ensure your CUDA environment is correctly configured.\"\n    )\n  else()\n    message(\n      FATAL_ERROR\n        \"Kokkos did not configure correctly and failed to validate compiler. The most likely cause is linkage errors during CMake compiler validation. Please consult the CMake error log shown below for the exact error during compiler validation\"\n    )\n  endif()\nelseif(NOT CMAKE_SIZEOF_VOID_P EQUAL 8)\n  if(CMAKE_SIZEOF_VOID_P EQUAL 4)\n    message(WARNING \"32-bit builds are experimental and not officially supported.\")\n    set(KOKKOS_IMPL_32BIT ON)\n  else()\n    message(\n      FATAL_ERROR\n        \"Kokkos assumes a 64-bit build, i.e., 8-byte pointers, but found ${CMAKE_SIZEOF_VOID_P}-byte pointers instead;\"\n    )\n  endif()\nendif()\n\nset(Kokkos_VERSION_MAJOR 4)\nset(Kokkos_VERSION_MINOR 5)\nset(Kokkos_VERSION_PATCH 99)\nset(Kokkos_VERSION \"${Kokkos_VERSION_MAJOR}.${Kokkos_VERSION_MINOR}.${Kokkos_VERSION_PATCH}\")\nmessage(STATUS \"Kokkos version: ${Kokkos_VERSION}\")\nmath(EXPR KOKKOS_VERSION \"${Kokkos_VERSION_MAJOR} * 10000 + ${Kokkos_VERSION_MINOR} * 100 + ${Kokkos_VERSION_PATCH}\")\n# mathematical expressions below are not stricly necessary but they eliminate\n# the rather aggravating leading 0 in the releases patch version number, and,\n# in some way, are a sanity check for our arithmetic\nmath(EXPR KOKKOS_VERSION_MAJOR \"${KOKKOS_VERSION} / 10000\")\nmath(EXPR KOKKOS_VERSION_MINOR \"${KOKKOS_VERSION} / 100 % 100\")\nmath(EXPR KOKKOS_VERSION_PATCH \"${KOKKOS_VERSION} % 100\")\n\n# Load either the real TriBITS or a TriBITS wrapper\n# for certain utility functions that are universal (like GLOBAL_SET)\ninclude(${KOKKOS_SRC_PATH}/cmake/fake_tribits.cmake)\n\nif(Kokkos_ENABLE_CUDA)\n  # If we are building CUDA, we have tricked CMake because we declare a CXX project\n  # If the default C++ standard for a given compiler matches the requested\n  # standard, then CMake just omits the -std flag in later versions of CMake\n  # This breaks CUDA compilation (CUDA compiler can have a different default\n  # -std then the underlying host compiler by itself). Setting this variable\n  # forces CMake to always add the -std flag even if it thinks it doesn't need it\n  global_set(CMAKE_CXX_STANDARD_DEFAULT 98)\nendif()\n\n# These are the variables we will append to as we go\n# I really wish these were regular variables\n# but scoping issues can make it difficult\nglobal_set(KOKKOS_COMPILE_OPTIONS)\nglobal_set(KOKKOS_LINK_OPTIONS)\nglobal_set(KOKKOS_AMDGPU_OPTIONS)\nglobal_set(KOKKOS_CUDA_OPTIONS)\nglobal_set(KOKKOS_CUDAFE_OPTIONS)\nglobal_set(KOKKOS_XCOMPILER_OPTIONS)\n# We need to append text here for making sure TPLs\n# we import are available for an installed Kokkos\nglobal_set(KOKKOS_TPL_EXPORTS)\n# KOKKOS_DEPENDENCE is used by kokkos_launch_compiler\nglobal_set(KOKKOS_COMPILE_DEFINITIONS KOKKOS_DEPENDENCE)\n# MSVC never goes through kokkos_launch_compiler\nif(NOT MSVC)\n  global_append(KOKKOS_LINK_OPTIONS -DKOKKOS_DEPENDENCE)\nendif()\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/cmake/kokkos_configure_trilinos.cmake)\n\nif(Kokkos_ENABLE_TESTS)\n  find_package(GTest QUIET)\nendif()\n\n# Include a set of Kokkos-specific wrapper functions that\n# will either call raw CMake or TriBITS\n# These are functions like KOKKOS_INCLUDE_DIRECTORIES\ninclude(${KOKKOS_SRC_PATH}/cmake/kokkos_tribits.cmake)\n\n# Check the environment and set certain variables\n# to allow platform-specific checks\ninclude(${KOKKOS_SRC_PATH}/cmake/kokkos_check_env.cmake)\n\ninclude(${KOKKOS_SRC_PATH}/cmake/build_env_info.cmake)\ncheck_git_setup()\n\n# The build environment setup goes in the following steps\n# 1) Check all the enable options. This includes checking Kokkos_DEVICES\n# 2) Check the compiler ID (type and version)\n# 3) Check the CXX standard and select important CXX flags\n# 4) Check for any third-party libraries (TPLs) like hwloc\n# 5) Check if optimizing for a particular architecture and add arch-specific flags\nkokkos_setup_build_environment()\n\n# Finish off the build\n# 6) Recurse into subdirectories and configure individual libraries\n# 7) Export and install targets\n\noption(BUILD_SHARED_LIBS \"Build shared libraries\" OFF)\n\nset(KOKKOS_COMPONENT_LIBRARIES kokkoscore kokkoscontainers kokkosalgorithms kokkossimd)\nset_property(GLOBAL PROPERTY KOKKOS_INT_LIBRARIES kokkos ${KOKKOS_COMPONENT_LIBRARIES})\n\nif(HAS_PARENT)\n  set(KOKKOS_HEADER_DIR \"include/kokkos\")\n  set(KOKKOS_IS_SUBDIRECTORY TRUE)\nelse()\n  set(KOKKOS_HEADER_DIR \"${CMAKE_INSTALL_INCLUDEDIR}\")\n  set(KOKKOS_IS_SUBDIRECTORY FALSE)\nendif()\n\n#------------------------------------------------------------------------------\n#\n# A) Forward declare the package so that certain options are also defined for\n# subpackages\n\n#------------------------------------------------------------------------------\n#\n# D) Process the subpackages (subdirectories) for Kokkos\n#\nkokkos_process_subpackages()\n\n#------------------------------------------------------------------------------\n#\n# E) If Kokkos itself is enabled, process the Kokkos package\n#\n\nkokkos_configure_core()\n\nif(NOT Kokkos_INSTALL_TESTING)\n  add_library(kokkos INTERFACE)\n  #Make sure in-tree projects can reference this as Kokkos::\n  #to match the installed target names\n  add_library(Kokkos::kokkos ALIAS kokkos)\n  # all_libs target is required for TriBITS-compliance\n  add_library(Kokkos::all_libs ALIAS kokkos)\n  target_link_libraries(kokkos INTERFACE ${KOKKOS_COMPONENT_LIBRARIES})\n  kokkos_internal_add_library_install(kokkos)\nendif()\ninclude(${KOKKOS_SRC_PATH}/cmake/kokkos_install.cmake)\n\n# nvcc_wrapper is Kokkos' wrapper for NVIDIA's NVCC CUDA compiler.\n# Kokkos needs nvcc_wrapper in order to build.  Other libraries and\n# executables also need nvcc_wrapper.  Thus, we need to install it.\n# If the argument of DESTINATION is a relative path, CMake computes it\n# as relative to ${CMAKE_INSTALL_PATH}.\n# KOKKOS_INSTALL_ADDITIONAL_FILES will install nvcc wrapper and other generated\n# files\nkokkos_install_additional_files()\n\n#  Finally - if we are a subproject - make sure the enabled devices are visible\nif(HAS_PARENT)\n  foreach(DEV Kokkos_ENABLED_DEVICES)\n    #I would much rather not make these cache variables or global properties, but I can't\n    #make any guarantees on whether PARENT_SCOPE is good enough to make\n    #these variables visible where I need them\n    set(Kokkos_ENABLE_${DEV} ON PARENT_SCOPE)\n    set_property(GLOBAL PROPERTY Kokkos_ENABLE_${DEV} ON)\n  endforeach()\nendif()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.7099609375,
          "content": "# Contributing to Kokkos\n\n## Pull Requests\nWe actively welcome pull requests.\n1. Fork the repo and create your branch from `develop`.\n2. If you've added code that should be tested, add tests.\n3. If you've changed APIs, update the documentation.\n4. Ensure the test suite passes.\n\nBefore sending your patch for review, please try to ensure that it is formatted properly. We use clang-format version 16 for this.\n\n## Issues\nWe use GitHub issues to track public bugs. Please ensure your description is clear and has sufficient instructions to be able to reproduce the issue.\n\n## License\nBy contributing to Kokkos, you agree that your contributions will be licensed under the LICENSE file in the root directory of this source tree.\n"
        },
        {
          "name": "Copyright.txt",
          "type": "blob",
          "size": 0.3232421875,
          "content": "************************************************************************\n\n                       Kokkos v. 4.0\n      Copyright (2022) National Technology & Engineering\n              Solutions of Sandia, LLC (NTESS).\n\nUnder the terms of Contract DE-NA0003525 with NTESS,\nthe U.S. Government retains certain rights in this software.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 12.5849609375,
          "content": " ==============================================================================\n Kokkos is under the Apache License v2.0 with LLVM Exceptions:\n ==============================================================================\n\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n    TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n    1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n    2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n    3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n    4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n    5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n    6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n    7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n    8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n    9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n    END OF TERMS AND CONDITIONS Apache 2.0\n\n ---- LLVM Exceptions to the Apache 2.0 License ----\n\n As an exception, if, as a result of your compiling your source code, portions\n of this Software are embedded into an Object form of such source code, you\n may redistribute such embedded portions in such Object form without complying\n with the conditions of Sections 4(a), 4(b) and 4(d) of the License.\n\n In addition, if you combine or link compiled forms of this Software with\n software that is licensed under the GPLv2 (\"Combined Software\") and if a\n court of competent jurisdiction determines that the patent provision (Section\n 3), the indemnity provision (Section 9) or other Section of the License\n conflicts with the conditions of the GPLv2, you may retroactively and\n prospectively choose to deem waived or otherwise exclude such Section(s) of\n the License, but only in their entirety and only with respect to the Combined\n Software.\n\n ==============================================================================\n Software from third parties included in Kokkos:\n ==============================================================================\n\n Kokkos contains third party software which is under different license\n terms. All such code will be identified clearly using at least one of two\n mechanisms:\n 1) It will be in a separate directory tree with its own `LICENSE.txt` or\n    `LICENSE` file at the top containing the specific license and restrictions\n    which apply to that software, or\n 2) It will contain specific license and restriction terms at the top of every\n    file.\n\n\n THIS SOFTWARE IS PROVIDED BY NTESS \"AS IS\" AND ANY\n EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NTESS OR THE\n CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n Questions? Contact: \n   Christian R. Trott (crtrott@sandia.gov) and\n   Damien T. Lebrun-Grandie (lebrungrandt@ornl.gov)\n\n ************************************************************************\n"
        },
        {
          "name": "LICENSE_FILE_HEADER",
          "type": "blob",
          "size": 0.5546875,
          "content": "//@HEADER\n// ************************************************************************\n//\n//                        Kokkos v. 4.0\n//       Copyright (2022) National Technology & Engineering\n//               Solutions of Sandia, LLC (NTESS).\n//\n// Under the terms of Contract DE-NA0003525 with NTESS,\n// the U.S. Government retains certain rights in this software.\n//\n// Part of Kokkos, under the Apache License v2.0 with LLVM Exceptions.\n// See https://kokkos.org/LICENSE for license information.\n// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n//\n//@HEADER\n"
        },
        {
          "name": "Makefile.kokkos",
          "type": "blob",
          "size": 74.720703125,
          "content": "# Default settings common options.\n\nKOKKOS_VERSION_MAJOR = 4\nKOKKOS_VERSION_MINOR = 5\nKOKKOS_VERSION_PATCH = 99\nKOKKOS_VERSION = $(shell echo $(KOKKOS_VERSION_MAJOR)*10000+$(KOKKOS_VERSION_MINOR)*100+$(KOKKOS_VERSION_PATCH) | bc)\n\n# Options: Cuda,HIP,SYCL,OpenMPTarget,OpenMP,Threads,Serial\n#KOKKOS_DEVICES ?= \"OpenMP\"\nKOKKOS_DEVICES ?= \"Threads\"\n# Options:\n# Intel:    KNC,KNL,SNB,HSW,BDW,SKL,SKX,ICL,ICX,SPR\n# NVIDIA:   Kepler,Kepler30,Kepler32,Kepler35,Kepler37,Maxwell,Maxwell50,Maxwell52,Maxwell53,Pascal60,Pascal61,Volta70,Volta72,Turing75,Ampere80,Ampere86,Ada89,Hopper90\n# ARM:      ARMv80,ARMv81,ARMv8-ThunderX,ARMv8-TX2,A64FX,ARMv9-Grace\n# IBM:      Power8,Power9\n# AMD-GPUS: AMD_GFX906,AMD_GFX908,AMD_GFX90A,AMD_GFX940,AMD_GFX942,AMD_GFX942_APU,AMD_GFX1030,AMD_GFX1100,AMD_GFX1103\n# AMD-CPUS: AMDAVX,Zen,Zen2,Zen3,Zen4\n# Intel-GPUs: Intel_Gen,Intel_Gen9,Intel_Gen11,Intel_Gen12LP,Intel_DG1,Intel_XeHP,Intel_PVC\nKOKKOS_ARCH ?= \"\"\n# Options: yes,no\nKOKKOS_DEBUG ?= \"no\"\n# Options: hwloc\nKOKKOS_USE_TPLS ?= \"\"\n# Options: c++17,c++1z,c++20,c++2a,c++23,c++2b\nKOKKOS_CXX_STANDARD ?= \"c++17\"\n# Options: aggressive_vectorization,disable_profiling,enable_large_mem_tests,disable_complex_align,disable_deprecated_code,enable_deprecation_warnings\nKOKKOS_OPTIONS ?= \"\"\nKOKKOS_CMAKE ?= \"no\"\nKOKKOS_TRIBITS ?= \"no\"\nKOKKOS_STANDALONE_CMAKE ?= \"no\"\n\n# Default settings specific options.\n# Options: force_uvm,use_ldg,rdc,enable_lambda,enable_constexpr,enable_malloc_async\nKOKKOS_CUDA_OPTIONS ?= \"\"\n\n# Options: rdc,enable_malloc_async\nKOKKOS_HIP_OPTIONS ?= \"\"\n\n# Default settings specific options.\n# Options: enable_async_dispatch\nKOKKOS_HPX_OPTIONS ?= \"\"\n\n#Options : force_host_as_device\nKOKKOS_OPENACC_OPTIONS ?= \"\"\n\n# Helper functions for conversion to upper case\nuppercase_TABLE:=a,A b,B c,C d,D e,E f,F g,G h,H i,I j,J k,K l,L m,M n,N o,O p,P q,Q r,R s,S t,T u,U v,V w,W x,X y,Y z,Z\nuppercase_internal=$(if $1,$$(subst $(firstword $1),$(call uppercase_internal,$(wordlist 2,$(words $1),$1),$2)),$2)\nuppercase=$(eval uppercase_RESULT:=$(call uppercase_internal,$(uppercase_TABLE),$1))$(uppercase_RESULT)\n# Return a 1 if a string contains a substring and 0 if not\n# Note the search string should be without '\"'\n# Example: $(call kokkos_has_string,\"hwloc,libdl\",hwloc)\n#   Will return a 1\nkokkos_has_string=$(if $(findstring $(call uppercase,$2),$(call uppercase,$1)),1,0)\n# Returns 1 if the path exists, 0 otherwise\n# Example: $(call kokkos_path_exists,/path/to/file)\n#   Will return a 1 if /path/to/file exists\nkokkos_path_exists=$(if $(wildcard $1),1,0)\n\n# Check for general settings\n\nKOKKOS_INTERNAL_ENABLE_DEBUG := $(call kokkos_has_string,$(KOKKOS_DEBUG),yes)\nKOKKOS_INTERNAL_ENABLE_CXX17 := $(call kokkos_has_string,$(KOKKOS_CXX_STANDARD),c++17)\nKOKKOS_INTERNAL_ENABLE_CXX1Z := $(call kokkos_has_string,$(KOKKOS_CXX_STANDARD),c++1z)\nKOKKOS_INTERNAL_ENABLE_CXX20 := $(call kokkos_has_string,$(KOKKOS_CXX_STANDARD),c++20)\nKOKKOS_INTERNAL_ENABLE_CXX2A := $(call kokkos_has_string,$(KOKKOS_CXX_STANDARD),c++2a)\nKOKKOS_INTERNAL_ENABLE_CXX23 := $(call kokkos_has_string,$(KOKKOS_CXX_STANDARD),c++23)\nKOKKOS_INTERNAL_ENABLE_CXX2B := $(call kokkos_has_string,$(KOKKOS_CXX_STANDARD),c++2b)\nKOKKOS_INTERNAL_ENABLE_CXX26 := $(call kokkos_has_string,$(KOKKOS_CXX_STANDARD),c++26)\nKOKKOS_INTERNAL_ENABLE_CXX2C := $(call kokkos_has_string,$(KOKKOS_CXX_STANDARD),c++2c)\n\n# Check for external libraries.\nKOKKOS_INTERNAL_USE_HWLOC := $(call kokkos_has_string,$(KOKKOS_USE_TPLS),hwloc)\n\n# Check for advanced settings.\nKOKKOS_INTERNAL_ENABLE_COMPILER_WARNINGS := $(call kokkos_has_string,$(KOKKOS_OPTIONS),compiler_warnings)\nKOKKOS_INTERNAL_AGGRESSIVE_VECTORIZATION := $(call kokkos_has_string,$(KOKKOS_OPTIONS),aggressive_vectorization)\nKOKKOS_INTERNAL_ENABLE_TUNING := $(call kokkos_has_string,$(KOKKOS_OPTIONS),enable_tuning)\nKOKKOS_INTERNAL_DISABLE_COMPLEX_ALIGN := $(call kokkos_has_string,$(KOKKOS_OPTIONS),disable_complex_align)\nKOKKOS_INTERNAL_DISABLE_DUALVIEW_MODIFY_CHECK := $(call kokkos_has_string,$(KOKKOS_OPTIONS),disable_dualview_modify_check)\nKOKKOS_INTERNAL_ENABLE_LARGE_MEM_TESTS := $(call kokkos_has_string,$(KOKKOS_OPTIONS),enable_large_mem_tests)\n# deprecated\nKOKKOS_INTERNAL_CUDA_USE_LDG := $(call kokkos_has_string,$(KOKKOS_CUDA_OPTIONS),use_ldg)\nKOKKOS_INTERNAL_CUDA_USE_UVM := $(call kokkos_has_string,$(KOKKOS_CUDA_OPTIONS),force_uvm)\nKOKKOS_INTERNAL_CUDA_USE_RELOC := $(call kokkos_has_string,$(KOKKOS_CUDA_OPTIONS),rdc)\nKOKKOS_INTERNAL_CUDA_USE_LAMBDA := $(call kokkos_has_string,$(KOKKOS_CUDA_OPTIONS),enable_lambda)\nKOKKOS_INTERNAL_CUDA_USE_CONSTEXPR := $(call kokkos_has_string,$(KOKKOS_CUDA_OPTIONS),enable_constexpr)\nKOKKOS_INTERNAL_CUDA_ENABLE_MALLOC_ASYNC := $(call kokkos_has_string,$(KOKKOS_CUDA_OPTIONS),enable_malloc_async)\nKOKKOS_INTERNAL_HPX_ENABLE_ASYNC_DISPATCH := $(call kokkos_has_string,$(KOKKOS_HPX_OPTIONS),enable_async_dispatch)\n# deprecated\nKOKKOS_INTERNAL_ENABLE_DESUL_ATOMICS := $(call kokkos_has_string,$(KOKKOS_OPTIONS),enable_desul_atomics)\n# deprecated\nKOKKOS_INTERNAL_DISABLE_DESUL_ATOMICS := $(call kokkos_has_string,$(KOKKOS_OPTIONS),disable_desul_atomics)\nKOKKOS_INTERNAL_DISABLE_BUNDLED_MDSPAN := $(call kokkos_has_string,$(KOKKOS_OPTIONS),impl_disable_bundled_mdspan)\nKOKKOS_INTERNAL_DISABLE_DEPRECATED_CODE := $(call kokkos_has_string,$(KOKKOS_OPTIONS),disable_deprecated_code)\nKOKKOS_INTERNAL_ENABLE_DEPRECATION_WARNINGS := $(call kokkos_has_string,$(KOKKOS_OPTIONS),enable_deprecation_warnings)\n\nKOKKOS_INTERNAL_HIP_USE_RELOC := $(call kokkos_has_string,$(KOKKOS_HIP_OPTIONS),rdc)\nKOKKOS_INTERNAL_HIP_ENABLE_MALLOC_ASYNC := $(call kokkos_has_string,$(KOKKOS_HIP_OPTIONS),enable_malloc_async)\nKOKKOS_INTERNAL_OPENACC_FORCE_HOST_AS_DEVICE := $(call kokkos_has_string,$(KOKKOS_OPENACC_OPTIONS),force_host_as_device)\n\n# Check for Kokkos Host Execution Spaces one of which must be on.\nKOKKOS_INTERNAL_USE_OPENMP := $(call kokkos_has_string,$(subst OpenMPTarget,,$(KOKKOS_DEVICES)),OpenMP)\nKOKKOS_INTERNAL_USE_THREADS := $(call kokkos_has_string,$(KOKKOS_DEVICES),Threads)\nKOKKOS_INTERNAL_USE_HPX := $(call kokkos_has_string,$(KOKKOS_DEVICES),HPX)\nKOKKOS_INTERNAL_USE_SERIAL := $(call kokkos_has_string,$(KOKKOS_DEVICES),Serial)\n\nifeq ($(KOKKOS_INTERNAL_USE_OPENMP), 0)\n  ifeq ($(KOKKOS_INTERNAL_USE_THREADS), 0)\n    ifeq ($(KOKKOS_INTERNAL_USE_HPX), 0)\n      KOKKOS_INTERNAL_USE_SERIAL := 1\n    endif\n  endif\nendif\n\n# Check for other Execution Spaces.\nKOKKOS_INTERNAL_USE_CUDA := $(call kokkos_has_string,$(KOKKOS_DEVICES),Cuda)\nKOKKOS_INTERNAL_USE_HIP := $(call kokkos_has_string,$(KOKKOS_DEVICES),HIP)\nKOKKOS_INTERNAL_USE_SYCL := $(call kokkos_has_string,$(KOKKOS_DEVICES),SYCL)\nKOKKOS_INTERNAL_USE_OPENMPTARGET := $(call kokkos_has_string,$(KOKKOS_DEVICES),OpenMPTarget)\nKOKKOS_INTERNAL_USE_OPENACC := $(call kokkos_has_string,$(KOKKOS_DEVICES),OpenACC)\n\nKOKKOS_DEVICELIST =\nifeq ($(KOKKOS_INTERNAL_USE_SERIAL), 1)\n  KOKKOS_DEVICELIST += Serial\nendif\nifeq ($(KOKKOS_INTERNAL_USE_OPENMP), 1)\n  KOKKOS_DEVICELIST += OpenMP\nendif\nifeq ($(KOKKOS_INTERNAL_USE_THREADS), 1)\n  KOKKOS_DEVICELIST += Threads\nendif\nifeq ($(KOKKOS_INTERNAL_USE_HPX), 1)\n  KOKKOS_DEVICELIST += HPX\nendif\nifeq ($(KOKKOS_INTERNAL_USE_CUDA), 1)\n  KOKKOS_DEVICELIST += Cuda\nendif\nifeq ($(KOKKOS_INTERNAL_USE_HIP), 1)\n  KOKKOS_DEVICELIST += HIP\nendif\nifeq ($(KOKKOS_INTERNAL_USE_SYCL), 1)\n  KOKKOS_DEVICELIST += SYCL\nendif\nifeq ($(KOKKOS_INTERNAL_USE_OPENMPTARGET), 1)\n  KOKKOS_DEVICELIST += OPENMPTARGET\nendif\nifeq ($(KOKKOS_INTERNAL_USE_OPENACC), 1)\n  KOKKOS_DEVICELIST += OpenACC\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_CUDA), 1)\n  KOKKOS_INTERNAL_NVCC_PATH := $(shell which nvcc)\n  ifeq ($(origin CUDA_PATH), undefined)\n    CUDA_PATH = $(KOKKOS_INTERNAL_NVCC_PATH:/bin/nvcc=)\n  endif\n  ifeq ($(CUDA_PATH),)\n    CUDA_PATH = $(KOKKOS_INTERNAL_NVCC_PATH:/bin/nvcc=)\n  endif\n  KOKKOS_INTERNAL_COMPILER_NVCC_VERSION := $(shell nvcc --version 2>&1 | grep release | cut -d' ' -f5 | cut -d',' -f1 | tr -d .)\nendif\n\n# Check OS.\nKOKKOS_OS                      := $(strip $(shell uname -s))\nKOKKOS_INTERNAL_OS_CYGWIN      := $(call kokkos_has_string,$(KOKKOS_OS),CYGWIN)\nKOKKOS_INTERNAL_OS_LINUX       := $(call kokkos_has_string,$(KOKKOS_OS),Linux)\nKOKKOS_INTERNAL_OS_DARWIN      := $(call kokkos_has_string,$(KOKKOS_OS),Darwin)\n\n# Check compiler.\nKOKKOS_CXX_VERSION                   := $(strip $(shell $(CXX) --version       2>&1))\nKOKKOS_INTERNAL_COMPILER_INTEL       := $(call kokkos_has_string,$(KOKKOS_CXX_VERSION),Intel Corporation)\nKOKKOS_INTERNAL_COMPILER_CRAY        := $(strip $(shell $(CXX) -craype-verbose 2>&1 | grep -c \"CC-\"))\nKOKKOS_INTERNAL_COMPILER_NVCC        := $(strip $(shell echo \"$(shell export OMPI_CXX=$(OMPI_CXX); export MPICH_CXX=$(MPICH_CXX); $(CXX) --version 2>&1 | grep -c nvcc)>0\" | bc))\nKOKKOS_INTERNAL_COMPILER_NVHPC       := $(strip $(shell $(CXX) --version 2>&1 | grep -c \"nvc++\"))\nKOKKOS_INTERNAL_COMPILER_CLANG       := $(call kokkos_has_string,$(KOKKOS_CXX_VERSION),clang)\nKOKKOS_INTERNAL_COMPILER_CRAY_CLANG  := $(strip $(shell $(CXX) -craype-verbose 2>&1 | grep -v \"error:\" | grep -c \"clang++\"))\nKOKKOS_INTERNAL_COMPILER_INTEL_CLANG := $(call kokkos_has_string,$(KOKKOS_CXX_VERSION),oneAPI)\nKOKKOS_INTERNAL_COMPILER_APPLE_CLANG := $(call kokkos_has_string,$(KOKKOS_CXX_VERSION),Apple clang)\nKOKKOS_INTERNAL_COMPILER_HCC         := $(call kokkos_has_string,$(KOKKOS_CXX_VERSION),HCC)\nKOKKOS_INTERNAL_COMPILER_GCC         := $(call kokkos_has_string,$(KOKKOS_CXX_VERSION),GCC)\n# TODO fujitsu can emulate gcc or clang. Only clang mode works at the moment.\nKOKKOS_INTERNAL_COMPILER_FUJITSU     := $(call kokkos_has_string,$(KOKKOS_CXX_VERSION),FUJITSU)\n\n# Check Host Compiler if using NVCC through nvcc_wrapper\nifeq ($(KOKKOS_INTERNAL_COMPILER_NVCC), 1)\n  KOKKOS_INTERNAL_COMPILER_NVCC_WRAPPER := $(strip $(shell echo $(CXX) | grep -c nvcc_wrapper))\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_NVCC_WRAPPER), 1)\n\n    KOKKOS_CXX_HOST_VERSION             := $(strip $(shell $(CXX) $(CXXFLAGS) --host-version       2>&1))\n    KOKKOS_INTERNAL_COMPILER_INTEL  := $(call kokkos_has_string,$(KOKKOS_CXX_HOST_VERSION),Intel Corporation)\n    KOKKOS_INTERNAL_COMPILER_CLANG  := $(call kokkos_has_string,$(KOKKOS_CXX_HOST_VERSION),clang)\n  endif\nendif\n\nifeq ($(KOKKOS_INTERNAL_COMPILER_CLANG), 2)\n  KOKKOS_INTERNAL_COMPILER_CLANG = 1\nendif\n\n# Apple Clang passes both clang and apple clang tests, so turn off clang.\nifeq ($(KOKKOS_INTERNAL_COMPILER_APPLE_CLANG), 1)\n  KOKKOS_INTERNAL_COMPILER_CLANG = 0\nendif\n# AMD HCC passes both clang and hcc test so turn off clang\nifeq ($(KOKKOS_INTERNAL_COMPILER_HCC), 1)\n  KOKKOS_INTENAL_COMPILER_CLANG = 0\nendif\n# Fujitsu passes also as clang and gcc respectively\nifeq ($(KOKKOS_INTERNAL_COMPILER_FUJITSU), 1)\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_GCC), 1)\n    # TODO  handle gcc flags and workaround for bug?\n    # fujitsu (gcc mode) is bugged, see https://github.com/kokkos/kokkos/issues/4730\n    $(warning Warning: ${CXX} in Trad Mode '-Nnoclang' (default) is not recommended. Use 'CXX = ${CXX} -Nclang' instead.)\n    # HACK since fujitsu only accepts some gcc flags, disable gcc here?\n    # KOKKOS_INTERNAL_COMPILER_GCC = 0\n  endif\n  # TODO handle clang flags\n  # warnings: works fine as is\n  # openmp: handled\n  #KOKKOS_INTERNAL_COMPILER_CLANG = 0\nendif\n\nifeq ($(KOKKOS_INTERNAL_COMPILER_CLANG), 1)\n  # TODO empty variable if fujitsu (clang mode) passes as clang\n  KOKKOS_INTERNAL_COMPILER_CLANG_VERSION := $(shell $(CXX) --version | grep version | cut -d ' ' -f3 | tr -d '.')\n\n  ifeq ($(KOKKOS_INTERNAL_USE_CUDA), 1)\n    ifeq ($(shell test $(KOKKOS_INTERNAL_COMPILER_CLANG_VERSION) -lt 400; echo $$?),0)\n      $(error Compiling Cuda code directly with Clang requires version 4.0.0 or higher)\n    endif\n\n    KOKKOS_INTERNAL_CUDA_USE_LAMBDA := 1\n  endif\nendif\n\n# Set compiler warnings flags.\nifeq ($(KOKKOS_INTERNAL_ENABLE_COMPILER_WARNINGS), 1)\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_CLANG), 1)\n    KOKKOS_INTERNAL_COMPILER_WARNINGS = -Wall -Wunused-parameter -Wshadow -pedantic -Wsign-compare -Wtype-limits -Wuninitialized\n  else ifeq ($(KOKKOS_INTERNAL_COMPILER_APPLE_CLANG), 1)\n    KOKKOS_INTERNAL_COMPILER_WARNINGS = -Wall -Wunused-parameter -Wshadow -pedantic -Wsign-compare -Wtype-limits -Wuninitialized\n  else ifeq ($(KOKKOS_INTERNAL_COMPILER_CRAY), 1)\n    # TODO check if cray accepts GNU style warnings\n    KOKKOS_INTERNAL_COMPILER_WARNINGS =\n  else\n    #gcc\n    KOKKOS_INTERNAL_COMPILER_WARNINGS = -Wall -Wunused-parameter -Wshadow -pedantic -Wsign-compare -Wtype-limits -Wignored-qualifiers -Wempty-body -Wclobbered -Wuninitialized\n  endif\nelse\n  KOKKOS_INTERNAL_COMPILER_WARNINGS =\nendif\n\n# Set OpenMP flags.\nifeq ($(KOKKOS_INTERNAL_COMPILER_CLANG), 1)\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_CRAY_CLANG), 1)\n    KOKKOS_INTERNAL_OPENMP_FLAG := -fopenmp\n  else ifeq ($(KOKKOS_INTERNAL_COMPILER_FUJITSU), 1)\n    # fujitsu (clang mode) fails with `=libomp`\n    KOKKOS_INTERNAL_OPENMP_FLAG := -fopenmp\n  else\n    KOKKOS_INTERNAL_OPENMP_FLAG := -fopenmp=libomp\n  endif\nelse\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_APPLE_CLANG), 1)\n    KOKKOS_INTERNAL_OPENMP_FLAG := -fopenmp=libomp\n  else ifeq ($(KOKKOS_INTERNAL_COMPILER_CRAY), 1)\n    # OpenMP is turned on by default in Cray compiler environment.\n    KOKKOS_INTERNAL_OPENMP_FLAG :=\n  else ifeq ($(KOKKOS_INTERNAL_COMPILER_INTEL_CLANG), 1)\n    KOKKOS_INTERNAL_OPENMP_FLAG := -fiopenmp\n  else\n    KOKKOS_INTERNAL_OPENMP_FLAG := -fopenmp\n  endif\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_OPENMPTARGET), 1)\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_INTEL_CLANG), 1)\n    KOKKOS_INTERNAL_OPENMPTARGET_FLAG := -fiopenmp -Wno-openmp-mapping\n  else ifeq ($(KOKKOS_INTERNAL_COMPILER_NVHPC), 1)\n    KOKKOS_INTERNAL_OPENMPTARGET_FLAG := -mp=gpu \n  else ifeq ($(KOKKOS_INTERNAL_COMPILER_CLANG), 0)\n    #Assume GCC\n    KOKKOS_INTERNAL_OPENMPTARGET_FLAG := -fopenmp -foffload=nvptx-none\n  endif\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_OPENACC), 1)\n  # Set OpenACC flags.\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_NVHPC), 1)\n    KOKKOS_INTERNAL_OPENACC_FLAG := -acc\n  else ifeq ($(KOKKOS_INTERNAL_COMPILER_CLANG), 1)\n    KOKKOS_INTERNAL_OPENACC_FLAG := -fopenacc -fopenacc-fake-async-wait -fopenacc-implicit-worker=vector -Wno-openacc-and-cxx -Wno-openmp-mapping -Wno-unknown-cuda-version -Wno-pass-failed\n  else\n    $(error Makefile.kokkos: OpenACC is enabled but the compiler must be NVHPC (got version string $(KOKKOS_CXX_VERSION)))\n  endif\nendif\n\n# Set C++ version flags.\nifeq ($(KOKKOS_INTERNAL_COMPILER_CRAY), 1)\n  KOKKOS_INTERNAL_CXX17_FLAG := -hstd=c++17\n  KOKKOS_INTERNAL_CXX1Z_FLAG := -hstd=c++1z\n  KOKKOS_INTERNAL_CXX20_FLAG := -hstd=c++20\n  KOKKOS_INTERNAL_CXX2A_FLAG := -hstd=c++2a\n  KOKKOS_INTERNAL_CXX23_FLAG := -hstd=c++23\n  KOKKOS_INTERNAL_CXX2A_FLAG := -hstd=c++2b\nelse\n  KOKKOS_INTERNAL_CXX17_FLAG := -std=c++17\n  KOKKOS_INTERNAL_CXX1Z_FLAG := -std=c++1z\n  KOKKOS_INTERNAL_CXX20_FLAG := -std=c++20\n  KOKKOS_INTERNAL_CXX2A_FLAG := -std=c++2a\n  KOKKOS_INTERNAL_CXX23_FLAG := -std=c++23\n  KOKKOS_INTERNAL_CXX2B_FLAG := -std=c++2b\nendif\n\n# Check for Kokkos Architecture settings.\n\n# Intel based.\nKOKKOS_INTERNAL_USE_ARCH_KNC := $(call kokkos_has_string,$(KOKKOS_ARCH),KNC)\nKOKKOS_INTERNAL_USE_ARCH_SNB := $(call kokkos_has_string,$(KOKKOS_ARCH),SNB)\nKOKKOS_INTERNAL_USE_ARCH_HSW := $(call kokkos_has_string,$(KOKKOS_ARCH),HSW)\nKOKKOS_INTERNAL_USE_ARCH_BDW := $(call kokkos_has_string,$(KOKKOS_ARCH),BDW)\nKOKKOS_INTERNAL_USE_ARCH_SKL := $(call kokkos_has_string,$(KOKKOS_ARCH),SKL)\nKOKKOS_INTERNAL_USE_ARCH_SKX := $(call kokkos_has_string,$(KOKKOS_ARCH),SKX)\nKOKKOS_INTERNAL_USE_ARCH_KNL := $(call kokkos_has_string,$(KOKKOS_ARCH),KNL)\nKOKKOS_INTERNAL_USE_ARCH_ICL := $(call kokkos_has_string,$(KOKKOS_ARCH),ICL)\nKOKKOS_INTERNAL_USE_ARCH_ICX := $(call kokkos_has_string,$(KOKKOS_ARCH),ICX)\nKOKKOS_INTERNAL_USE_ARCH_SPR := $(call kokkos_has_string,$(KOKKOS_ARCH),SPR)\n\n# Traditionally, we supported, e.g., IntelGen9 instead of Intel_Gen9. The latter\n# matches the CMake option but we also accept the former for backward-compatibility.\nKOKKOS_INTERNAL_USE_ARCH_INTEL_GEN9 := $(call kokkos_has_string,$(KOKKOS_ARCH),IntelGen9)\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_INTEL_GEN9), 0)\n  KOKKOS_INTERNAL_USE_ARCH_INTEL_GEN9 := $(call kokkos_has_string,$(KOKKOS_ARCH),Intel_Gen9)\nendif\nKOKKOS_INTERNAL_USE_ARCH_INTEL_GEN11 := $(call kokkos_has_string,$(KOKKOS_ARCH),IntelGen11)\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_INTEL_GEN11), 0)\n  KOKKOS_INTERNAL_USE_ARCH_INTEL_GEN11 := $(call kokkos_has_string,$(KOKKOS_ARCH),Intel_Gen11)\nendif\nKOKKOS_INTERNAL_USE_ARCH_INTEL_GEN12LP := $(call kokkos_has_string,$(KOKKOS_ARCH),IntelGen12LP)\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_INTEL_GEN12LP), 0)\n  KOKKOS_INTERNAL_USE_ARCH_INTEL_GEN12LP := $(call kokkos_has_string,$(KOKKOS_ARCH),Intel_Gen12LP)\nendif\nKOKKOS_INTERNAL_USE_ARCH_INTEL_GEN := $(call kokkos_has_string,$(KOKKOS_ARCH),IntelGen9)\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_INTEL_GEN9), 0)\n  KOKKOS_INTERNAL_USE_ARCH_INTEL_GEN9 := $(call kokkos_has_string,$(KOKKOS_ARCH),Intel_Gen9)\nendif\nKOKKOS_INTERNAL_USE_ARCH_INTEL_GEN_SET := $(shell expr $(KOKKOS_INTERNAL_USE_ARCH_INTEL_GEN9)  \\\n                                                     + $(KOKKOS_INTERNAL_USE_ARCH_INTEL_GEN11) \\\n                                                     + $(KOKKOS_INTERNAL_USE_ARCH_INTEL_GEN12LP))\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_INTEL_GEN_SET), 0)\n  KOKKOS_INTERNAL_USE_ARCH_INTEL_GEN := $(call kokkos_has_string,$(KOKKOS_ARCH),IntelGen)\n  ifeq ($(KOKKOS_INTERNAL_USE_ARCH_INTEL_GEN), 0)\n    KOKKOS_INTERNAL_USE_ARCH_INTEL_GEN := $(call kokkos_has_string,$(KOKKOS_ARCH),Intel_Gen)\n  endif\nendif\nKOKKOS_INTERNAL_USE_ARCH_INTEL_DG1 := $(call kokkos_has_string,$(KOKKOS_ARCH),IntelDG1)\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_INTEL_DG1), 0)\n  KOKKOS_INTERNAL_USE_ARCH_INTEL_DG1 := $(call kokkos_has_string,$(KOKKOS_ARCH),Intel_DG1)\nendif\nKOKKOS_INTERNAL_USE_ARCH_INTEL_XEHP := $(call kokkos_has_string,$(KOKKOS_ARCH),IntelXeHP)\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_INTEL_XEHP), 0)\n  KOKKOS_INTERNAL_USE_ARCH_INTEL_XEHP := $(call kokkos_has_string,$(KOKKOS_ARCH),Intel_XeHP)\nendif\n# Traditionally the architecture was called PVC instead of Intel_PVC. This\n# version makes us accept IntelPVC and Intel_PVC as well.\nKOKKOS_INTERNAL_USE_ARCH_INTEL_PVC := $(call kokkos_has_string,$(KOKKOS_ARCH),PVC)\n\n# NVIDIA based.\nNVCC_WRAPPER := $(KOKKOS_PATH)/bin/nvcc_wrapper\nKOKKOS_INTERNAL_USE_ARCH_KEPLER30 := $(call kokkos_has_string,$(KOKKOS_ARCH),Kepler30)\nKOKKOS_INTERNAL_USE_ARCH_KEPLER32 := $(call kokkos_has_string,$(KOKKOS_ARCH),Kepler32)\nKOKKOS_INTERNAL_USE_ARCH_KEPLER35 := $(call kokkos_has_string,$(KOKKOS_ARCH),Kepler35)\nKOKKOS_INTERNAL_USE_ARCH_KEPLER37 := $(call kokkos_has_string,$(KOKKOS_ARCH),Kepler37)\nKOKKOS_INTERNAL_USE_ARCH_MAXWELL50 := $(call kokkos_has_string,$(KOKKOS_ARCH),Maxwell50)\nKOKKOS_INTERNAL_USE_ARCH_MAXWELL52 := $(call kokkos_has_string,$(KOKKOS_ARCH),Maxwell52)\nKOKKOS_INTERNAL_USE_ARCH_MAXWELL53 := $(call kokkos_has_string,$(KOKKOS_ARCH),Maxwell53)\nKOKKOS_INTERNAL_USE_ARCH_PASCAL61 := $(call kokkos_has_string,$(KOKKOS_ARCH),Pascal61)\nKOKKOS_INTERNAL_USE_ARCH_PASCAL60 := $(call kokkos_has_string,$(KOKKOS_ARCH),Pascal60)\nKOKKOS_INTERNAL_USE_ARCH_VOLTA70 := $(call kokkos_has_string,$(KOKKOS_ARCH),Volta70)\nKOKKOS_INTERNAL_USE_ARCH_VOLTA72 := $(call kokkos_has_string,$(KOKKOS_ARCH),Volta72)\nKOKKOS_INTERNAL_USE_ARCH_TURING75 := $(call kokkos_has_string,$(KOKKOS_ARCH),Turing75)\nKOKKOS_INTERNAL_USE_ARCH_AMPERE80 := $(call kokkos_has_string,$(KOKKOS_ARCH),Ampere80)\nKOKKOS_INTERNAL_USE_ARCH_AMPERE86 := $(call kokkos_has_string,$(KOKKOS_ARCH),Ampere86)\nKOKKOS_INTERNAL_USE_ARCH_ADA89 := $(call kokkos_has_string,$(KOKKOS_ARCH),Ada89)\nKOKKOS_INTERNAL_USE_ARCH_HOPPER90 := $(call kokkos_has_string,$(KOKKOS_ARCH),Hopper90)\nKOKKOS_INTERNAL_USE_ARCH_NVIDIA := $(shell expr $(KOKKOS_INTERNAL_USE_ARCH_KEPLER30)  \\\n                                              + $(KOKKOS_INTERNAL_USE_ARCH_KEPLER32)  \\\n                                              + $(KOKKOS_INTERNAL_USE_ARCH_KEPLER35)  \\\n                                              + $(KOKKOS_INTERNAL_USE_ARCH_KEPLER37)  \\\n                                              + $(KOKKOS_INTERNAL_USE_ARCH_MAXWELL50) \\\n                                              + $(KOKKOS_INTERNAL_USE_ARCH_MAXWELL52) \\\n                                              + $(KOKKOS_INTERNAL_USE_ARCH_MAXWELL53) \\\n                                              + $(KOKKOS_INTERNAL_USE_ARCH_PASCAL61)  \\\n                                              + $(KOKKOS_INTERNAL_USE_ARCH_PASCAL60)  \\\n                                              + $(KOKKOS_INTERNAL_USE_ARCH_VOLTA70)   \\\n                                              + $(KOKKOS_INTERNAL_USE_ARCH_VOLTA72)   \\\n                                              + $(KOKKOS_INTERNAL_USE_ARCH_TURING75)  \\\n                                              + $(KOKKOS_INTERNAL_USE_ARCH_AMPERE80)  \\\n                                              + $(KOKKOS_INTERNAL_USE_ARCH_AMPERE86)  \\\n                                              + $(KOKKOS_INTERNAL_USE_ARCH_ADA89)     \\\n                                              + $(KOKKOS_INTERNAL_USE_ARCH_HOPPER90))\n\n#SEK: This seems like a bug to me\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_NVIDIA), 0)\n  KOKKOS_INTERNAL_USE_ARCH_MAXWELL50 := $(call kokkos_has_string,$(KOKKOS_ARCH),Maxwell)\n  KOKKOS_INTERNAL_USE_ARCH_KEPLER35 := $(call kokkos_has_string,$(KOKKOS_ARCH),Kepler)\n  KOKKOS_INTERNAL_USE_ARCH_NVIDIA := $(shell expr $(KOKKOS_INTERNAL_USE_ARCH_KEPLER35)  \\\n                                                + $(KOKKOS_INTERNAL_USE_ARCH_MAXWELL50))\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_NVIDIA), 1)\n  KOKKOS_INTERNAL_NVCC_PATH := $(shell which nvcc)\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_CLANG), 1)\n    CUDA_PATH ?= $(KOKKOS_INTERNAL_NVCC_PATH:/bin/nvcc=)\n    ifeq ($(KOKKOS_INTERNAL_USE_OPENMPTARGET), 1)\n      KOKKOS_INTERNAL_OPENMPTARGET_FLAG := $(KOKKOS_INTERNAL_OPENMPTARGET_FLAG) --cuda-path=$(CUDA_PATH)\n    endif\n  endif\nendif\n# ARM based.\nKOKKOS_INTERNAL_USE_ARCH_ARMV80 := $(call kokkos_has_string,$(KOKKOS_ARCH),ARMv80)\nKOKKOS_INTERNAL_USE_ARCH_ARMV81 := $(call kokkos_has_string,$(KOKKOS_ARCH),ARMv81)\nKOKKOS_INTERNAL_USE_ARCH_ARMV8_THUNDERX := $(call kokkos_has_string,$(KOKKOS_ARCH),ARMv8-ThunderX)\nKOKKOS_INTERNAL_USE_ARCH_ARMV8_THUNDERX2 := $(call kokkos_has_string,$(KOKKOS_ARCH),ARMv8-TX2)\nKOKKOS_INTERNAL_USE_ARCH_A64FX := $(call kokkos_has_string,$(KOKKOS_ARCH),A64FX)\nKOKKOS_INTERNAL_USE_ARCH_ARMV9_GRACE := $(call kokkos_has_string,$(KOKKOS_ARCH),ARMv9-Grace)\nKOKKOS_INTERNAL_USE_ARCH_ARM := $(strip $(shell echo $(KOKKOS_INTERNAL_USE_ARCH_ARMV80)+$(KOKKOS_INTERNAL_USE_ARCH_ARMV81)+$(KOKKOS_INTERNAL_USE_ARCH_ARMV8_THUNDERX)+$(KOKKOS_INTERNAL_USE_ARCH_ARMV8_THUNDERX2)+$(KOKKOS_INTERNAL_USE_ARCH_A64FX)+$(KOKKOS_INTERNAL_USE_ARCH_ARMV9_GRACE) | bc))\n\n# IBM based.\nKOKKOS_INTERNAL_USE_ARCH_POWER8 := $(call kokkos_has_string,$(KOKKOS_ARCH),Power8)\nKOKKOS_INTERNAL_USE_ARCH_POWER9 := $(call kokkos_has_string,$(KOKKOS_ARCH),Power9)\nKOKKOS_INTERNAL_USE_ARCH_IBM := $(strip $(shell echo $(KOKKOS_INTERNAL_USE_ARCH_POWER8)+$(KOKKOS_INTERNAL_USE_ARCH_POWER9) | bc))\n\n# AMD based.\nKOKKOS_INTERNAL_USE_ARCH_AMDAVX := $(call kokkos_has_string,$(KOKKOS_ARCH),AMDAVX)\nKOKKOS_INTERNAL_USE_ARCH_ZEN4 := $(call kokkos_has_string,$(KOKKOS_ARCH),Zen4)\nKOKKOS_INTERNAL_USE_ARCH_ZEN3 := $(call kokkos_has_string,$(KOKKOS_ARCH),Zen3)\nKOKKOS_INTERNAL_USE_ARCH_ZEN2 := $(call kokkos_has_string,$(KOKKOS_ARCH),Zen2)\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_ZEN4), 0)\n  ifeq ($(KOKKOS_INTERNAL_USE_ARCH_ZEN3), 0)\n    ifeq ($(KOKKOS_INTERNAL_USE_ARCH_ZEN2), 0)\n      KOKKOS_INTERNAL_USE_ARCH_ZEN := $(call kokkos_has_string,$(KOKKOS_ARCH),Zen)\n    endif\n  endif\nendif\n\nKOKKOS_INTERNAL_USE_ARCH_AMD_GFX906 := $(call kokkos_has_string,$(KOKKOS_ARCH),AMD_GFX906)\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_AMD_GFX906), 0)\n  KOKKOS_INTERNAL_USE_ARCH_AMD_GFX906 := $(call kokkos_has_string,$(KOKKOS_ARCH),VEGA906)\nendif\nKOKKOS_INTERNAL_USE_ARCH_AMD_GFX908 := $(call kokkos_has_string,$(KOKKOS_ARCH),AMD_GFX908)\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_AMD_GFX908), 0)\n  KOKKOS_INTERNAL_USE_ARCH_AMD_GFX908 := $(call kokkos_has_string,$(KOKKOS_ARCH),VEGA908)\nendif\nKOKKOS_INTERNAL_USE_ARCH_AMD_GFX90A := $(call kokkos_has_string,$(KOKKOS_ARCH),AMD_GFX90A)\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_AMD_GFX90A), 0)\n  KOKKOS_INTERNAL_USE_ARCH_AMD_GFX90A := $(call kokkos_has_string,$(KOKKOS_ARCH),VEGA90A)\nendif\nKOKKOS_INTERNAL_USE_ARCH_AMD_GFX940 := $(call kokkos_has_string,$(KOKKOS_ARCH),AMD_GFX940)\nKOKKOS_INTERNAL_USE_ARCH_AMD_GFX942 := $(call kokkos_has_string,$(KOKKOS_ARCH),AMD_GFX942)\nKOKKOS_INTERNAL_USE_ARCH_AMD_GFX942_APU := $(call kokkos_has_string,$(KOKKOS_ARCH),AMD_GFX942_APU)\nKOKKOS_INTERNAL_USE_ARCH_AMD_GFX1030 := $(call kokkos_has_string,$(KOKKOS_ARCH),AMD_GFX1030)\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_AMD_GFX1030), 0)\n  KOKKOS_INTERNAL_USE_ARCH_AMD_GFX1030 := $(call kokkos_has_string,$(KOKKOS_ARCH),NAVI1030)\nendif\nKOKKOS_INTERNAL_USE_ARCH_AMD_GFX1100 := $(call kokkos_has_string,$(KOKKOS_ARCH),AMD_GFX1100)\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_AMD_GFX1100), 0)\n  KOKKOS_INTERNAL_USE_ARCH_AMD_GFX1100 := $(call kokkos_has_string,$(KOKKOS_ARCH),NAVI1100)\nendif\nKOKKOS_INTERNAL_USE_ARCH_AMD_GFX1103 := $(call kokkos_has_string,$(KOKKOS_ARCH),AMD_GFX1103)\nKOKKOS_INTERNAL_USE_ARCH_AMD := $(shell expr $(KOKKOS_INTERNAL_USE_ARCH_AMD_GFX906)  \\\n                                              + $(KOKKOS_INTERNAL_USE_ARCH_AMD_GFX908)  \\\n                                              + $(KOKKOS_INTERNAL_USE_ARCH_AMD_GFX90A)  \\\n                                              + $(KOKKOS_INTERNAL_USE_ARCH_AMD_GFX940)  \\\n                                              + $(KOKKOS_INTERNAL_USE_ARCH_AMD_GFX942) \\\n                                              + $(KOKKOS_INTERNAL_USE_ARCH_AMD_GFX942_APU) \\\n                                              + $(KOKKOS_INTERNAL_USE_ARCH_AMD_GFX1030) \\\n                                              + $(KOKKOS_INTERNAL_USE_ARCH_AMD_GFX1100) \\\n                                              + $(KOKKOS_INTERNAL_USE_ARCH_AMD_GFX1103))\n\n# Any AVX?\nKOKKOS_INTERNAL_USE_ARCH_AVX        := $(shell expr $(KOKKOS_INTERNAL_USE_ARCH_SNB) + $(KOKKOS_INTERNAL_USE_ARCH_AMDAVX))\nKOKKOS_INTERNAL_USE_ARCH_AVX2       := $(shell expr $(KOKKOS_INTERNAL_USE_ARCH_HSW) + $(KOKKOS_INTERNAL_USE_ARCH_BDW) + $(KOKKOS_INTERNAL_USE_ARCH_ZEN) + $(KOKKOS_INTERNAL_USE_ARCH_ZEN2) + $(KOKKOS_INTERNAL_USE_ARCH_ZEN3))\nKOKKOS_INTERNAL_USE_ARCH_AVX512MIC  := $(shell expr $(KOKKOS_INTERNAL_USE_ARCH_KNL))\n\n# Incompatible flags?\nKOKKOS_INTERNAL_USE_ARCH_MULTIHOST := $(strip $(shell echo \"$(KOKKOS_INTERNAL_USE_ARCH_AVX)+$(KOKKOS_INTERNAL_USE_ARCH_AVX2)+$(KOKKOS_INTERNAL_USE_ARCH_AVX512MIC)+$(KOKKOS_INTERNAL_USE_ARCH_SKL)+$(KOKKOS_INTERNAL_USE_ARCH_SKX)+$(KOKKOS_INTERNAL_USE_ARCH_ICL)+$(KOKKOS_INTERNAL_USE_ARCH_ICX)+$(KOKKOS_INTERNAL_USE_ARCH_SPR)+$(KOKKOS_INTERNAL_USE_ARCH_KNC)+$(KOKKOS_INTERNAL_USE_ARCH_IBM)+$(KOKKOS_INTERNAL_USE_ARCH_ARM)>1\") | bc)\nKOKKOS_INTERNAL_USE_ARCH_MULTIGPU := $(strip $(shell echo \"$(KOKKOS_INTERNAL_USE_ARCH_NVIDIA)>1\") | bc)\n\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_MULTIHOST), 1)\n  $(error Defined Multiple Host architectures: KOKKOS_ARCH=$(KOKKOS_ARCH) )\nendif\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_MULTIGPU), 1)\n  $(error Defined Multiple GPU architectures: KOKKOS_ARCH=$(KOKKOS_ARCH) )\nendif\n\n# Generating the list of Flags.\n\nKOKKOS_CPPFLAGS =\nKOKKOS_LIBDIRS =\nifneq ($(KOKKOS_CMAKE), yes)\n  KOKKOS_CPPFLAGS = -I./ -I$(KOKKOS_PATH)/core/src -I$(KOKKOS_PATH)/containers/src -I$(KOKKOS_PATH)/algorithms/src\nendif\nKOKKOS_TPL_INCLUDE_DIRS =\nKOKKOS_TPL_LIBRARY_DIRS =\nKOKKOS_TPL_LIBRARY_NAMES =\n\nifeq ($(KOKKOS_INTERNAL_ENABLE_COMPILER_WARNINGS), 1)\n  KOKKOS_CXXFLAGS += $(KOKKOS_INTERNAL_COMPILER_WARNINGS)\nendif\n\nKOKKOS_LIBS = -ldl\nKOKKOS_TPL_LIBRARY_NAMES += dl\nifneq ($(KOKKOS_CMAKE), yes)\n  KOKKOS_LIBDIRS = -L$(shell pwd)\n  # CXXLDFLAGS is used together with CXXFLAGS in a combined compile/link command\n  KOKKOS_CXXLDFLAGS = -L$(shell pwd)\nendif\nKOKKOS_LINK_FLAGS =\nKOKKOS_SRC =\nKOKKOS_HEADERS =\n\n# Generating the KokkosCore_config.h file.\n\nKOKKOS_INTERNAL_CONFIG_TMP=KokkosCore_config.tmp\nKOKKOS_CONFIG_HEADER=KokkosCore_config.h\n# Functions for generating config header file\nkokkos_append_header = $(shell echo $1 >> $(KOKKOS_INTERNAL_CONFIG_TMP))\n\n# assign hash sign to variable for compat. with make 4.3\nH := \\#\n\n# Do not append first line\ntmp := $(shell echo \"/* ---------------------------------------------\" > KokkosCore_config.tmp)\ntmp := $(call kokkos_append_header,\"Makefile constructed configuration:\")\ntmp := $(call kokkos_append_header,\"----------------------------------------------*/\")\n\ntmp := $(call kokkos_append_header,'$H''if !defined(KOKKOS_MACROS_HPP) || defined(KOKKOS_CORE_CONFIG_H)')\ntmp := $(call kokkos_append_header,'$H''error \"Do not include $(KOKKOS_CONFIG_HEADER) directly; include Kokkos_Macros.hpp instead.\"')\ntmp := $(call kokkos_append_header,'$H''else')\ntmp := $(call kokkos_append_header,'$H''define KOKKOS_CORE_CONFIG_H')\ntmp := $(call kokkos_append_header,'$H''endif')\n\ntmp := $(call kokkos_append_header,\"\")\ntmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_VERSION $(KOKKOS_VERSION)\")\ntmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_VERSION_MAJOR $(KOKKOS_VERSION_MAJOR)\")\ntmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_VERSION_MINOR $(KOKKOS_VERSION_MINOR)\")\ntmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_VERSION_PATCH $(KOKKOS_VERSION_PATCH)\")\ntmp := $(call kokkos_append_header,\"\")\n\ntmp := $(call kokkos_append_header,\"/* Execution Spaces */\")\n\nifeq ($(KOKKOS_INTERNAL_USE_CUDA), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_CUDA\")\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_HIP), 1)\n  tmp := $(call kokkos_append_header,'$H''define KOKKOS_ENABLE_HIP')\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_SYCL), 1)\n  tmp := $(call kokkos_append_header,'$H''define KOKKOS_ENABLE_SYCL')\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_OPENMPTARGET), 1)\n  KOKKOS_LIBS += -latomic\n  tmp := $(call kokkos_append_header,'$H''define KOKKOS_ENABLE_OPENMPTARGET')\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_GCC), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_WORKAROUND_OPENMPTARGET_GCC\")\n  endif\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_OPENACC), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_OPENACC\")\n  ifeq ($(KOKKOS_INTERNAL_OPENACC_FORCE_HOST_AS_DEVICE), 1)\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_OPENACC_FORCE_HOST_AS_DEVICE\")\n  endif\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_OPENMP), 1)\n  tmp := $(call kokkos_append_header,'$H''define KOKKOS_ENABLE_OPENMP')\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_THREADS), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_THREADS\")\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_HPX), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_HPX\")\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_SERIAL), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_SERIAL\")\nendif\n\n#only add the c++ standard flags if this is not CMake\ntmp := $(call kokkos_append_header,\"/* General Settings */\")\nifneq ($(KOKKOS_INTERNAL_DISABLE_DEPRECATED_CODE), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_DEPRECATED_CODE_4\")\nendif\nifeq ($(KOKKOS_INTERNAL_ENABLE_DEPRECATION_WARNINGS), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_DEPRECATION_WARNINGS\")\nendif\nifeq ($(KOKKOS_INTERNAL_ENABLE_CXX17), 1)\nifneq ($(KOKKOS_STANDALONE_CMAKE), yes)\n  KOKKOS_CXXFLAGS += $(KOKKOS_INTERNAL_CXX17_FLAG)\nendif\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_CXX17\")\nendif\nifeq ($(KOKKOS_INTERNAL_ENABLE_CXX1Z), 1)\n  #I cannot make CMake add this in a good way - so add it here\n  KOKKOS_CXXFLAGS += $(KOKKOS_INTERNAL_CXX1Z_FLAG)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_CXX17\")\nendif\nifeq ($(KOKKOS_INTERNAL_ENABLE_CXX20), 1)\n  #I cannot make CMake add this in a good way - so add it here\n  KOKKOS_CXXFLAGS += $(KOKKOS_INTERNAL_CXX20_FLAG)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_CXX20\")\nendif\nifeq ($(KOKKOS_INTERNAL_ENABLE_CXX2A), 1)\n  #I cannot make CMake add this in a good way - so add it here\n  KOKKOS_CXXFLAGS += $(KOKKOS_INTERNAL_CXX2A_FLAG)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_CXX20\")\nendif\nifeq ($(KOKKOS_INTERNAL_ENABLE_CXX23), 1)\n  #I cannot make CMake add this in a good way - so add it here\n  KOKKOS_CXXFLAGS += $(KOKKOS_INTERNAL_CXX23_FLAG)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_CXX23\")\nendif\nifeq ($(KOKKOS_INTERNAL_ENABLE_CXX2B), 1)\n  #I cannot make CMake add this in a good way - so add it here\n  KOKKOS_CXXFLAGS += $(KOKKOS_INTERNAL_CXX2B_FLAG)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_CXX23\")\nendif\nifeq ($(KOKKOS_INTERNAL_ENABLE_CXX26), 1)\n  #I cannot make CMake add this in a good way - so add it here\n  KOKKOS_CXXFLAGS += $(KOKKOS_INTERNAL_CXX26_FLAG)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_CXX26\")\nendif\nifeq ($(KOKKOS_INTERNAL_ENABLE_CXX2C), 1)\n  #I cannot make CMake add this in a good way - so add it here\n  KOKKOS_CXXFLAGS += $(KOKKOS_INTERNAL_CXX2C_FLAG)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_CXX26\")\nendif\n\nifeq ($(KOKKOS_INTERNAL_ENABLE_DEBUG), 1)\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_NVCC), 1)\n    KOKKOS_CXXFLAGS += -lineinfo\n  endif\n\n  KOKKOS_CXXFLAGS += -g\n  KOKKOS_LDFLAGS += -g\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_DEBUG_BOUNDS_CHECK\")\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_DEBUG\")\n  ifeq ($(KOKKOS_INTERNAL_DISABLE_DUALVIEW_MODIFY_CHECK), 0)\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_DEBUG_DUALVIEW_MODIFY_CHECK\")\n  endif\nendif\nifeq ($(KOKKOS_INTERNAL_DISABLE_COMPLEX_ALIGN), 0)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_COMPLEX_ALIGN\")\nendif\n\nifeq ($(KOKKOS_INTERNAL_ENABLE_TUNING), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_TUNING\")\nendif\n\ntmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_LIBDL\")\n\nifeq ($(KOKKOS_INTERNAL_USE_HWLOC), 1)\n  ifneq ($(KOKKOS_CMAKE), yes)\n    ifneq ($(HWLOC_PATH),)\n      KOKKOS_CPPFLAGS += -I$(HWLOC_PATH)/include\n      KOKKOS_LIBDIRS += -L$(HWLOC_PATH)/lib\n      KOKKOS_CXXLDFLAGS += -L$(HWLOC_PATH)/lib\n      KOKKOS_TPL_INCLUDE_DIRS += $(HWLOC_PATH)/include\n      KOKKOS_TPL_LIBRARY_DIRS += $(HWLOC_PATH)/lib\n    endif\n    KOKKOS_LIBS += -lhwloc\n    KOKKOS_TPL_LIBRARY_NAMES += hwloc\n  endif\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_HWLOC\")\nendif\n\nifeq ($(KOKKOS_INTERNAL_ENABLE_LARGE_MEM_TESTS), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_LARGE_MEM_TESTS\")\nendif\n\ntmp := $(call kokkos_append_header,\"/* Optimization Settings */\")\n\nifeq ($(KOKKOS_INTERNAL_AGGRESSIVE_VECTORIZATION), 1)\n  # deprecated\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_OPT_RANGE_AGGRESSIVE_VECTORIZATION\")\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_AGGRESSIVE_VECTORIZATION\")\nendif\n\ntmp := $(call kokkos_append_header,\"/* Cuda Settings */\")\n\nifeq ($(KOKKOS_INTERNAL_USE_CUDA), 1)\n  #deprecated\n  ifeq ($(KOKKOS_INTERNAL_CUDA_USE_LDG), 1)\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_CUDA_LDG_INTRINSIC\")\n  else ifeq ($(KOKKOS_INTERNAL_COMPILER_CLANG), 1)\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_CUDA_LDG_INTRINSIC\")\n  endif\n\n  ifeq ($(KOKKOS_INTERNAL_CUDA_USE_UVM), 1)\n    # deprecated\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_CUDA_UVM\")\n  endif\n\n  ifeq ($(KOKKOS_INTERNAL_CUDA_USE_RELOC), 1)\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_CUDA_RELOCATABLE_DEVICE_CODE\")\n    ifeq ($(KOKKOS_INTERNAL_COMPILER_CLANG), 1)\n      KOKKOS_CXXFLAGS += -fcuda-rdc\n      KOKKOS_LDFLAGS += -fcuda-rdc\n    else\n      KOKKOS_CXXFLAGS += --relocatable-device-code=true\n      KOKKOS_LDFLAGS += --relocatable-device-code=true\n    endif\n  endif\n\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_NVCC), 1)\n    ifeq ($(shell test $(KOKKOS_INTERNAL_COMPILER_NVCC_VERSION) -ge 90; echo $$?),0)\n      # This diagnostic is just plain wrong in CUDA 9\n      # See https://github.com/kokkos/kokkos/issues/1470\n      KOKKOS_CXXFLAGS += -Xcudafe --diag_suppress=esa_on_defaulted_function_ignored\n    endif\n  endif\n\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_NVCC), 1)\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_CUDA_LAMBDA\")\n    KOKKOS_CXXFLAGS += -extended-lambda\n  endif\n\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_CLANG), 1)\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_CUDA_LAMBDA\")\n  endif\n\n  ifeq ($(KOKKOS_INTERNAL_CUDA_USE_CONSTEXPR), 1)\n    ifeq ($(KOKKOS_INTERNAL_COMPILER_NVCC), 1)\n      tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_CUDA_CONSTEXPR\")\n      KOKKOS_CXXFLAGS += -expt-relaxed-constexpr\n    endif\n\n    ifeq ($(KOKKOS_INTERNAL_COMPILER_CLANG), 1)\n      tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_CUDA_CONSTEXPR\")\n    endif\n  endif\n\n  ifeq ($(KOKKOS_INTERNAL_CUDA_ENABLE_MALLOC_ASYNC), 1)\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_IMPL_CUDA_MALLOC_ASYNC\")\n  else\n    tmp := $(call kokkos_append_header,\"/* $H\"\"undef KOKKOS_ENABLE_IMPL_CUDA_MALLOC_ASYNC */\")\n  endif\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_HPX), 1)\n  ifeq ($(KOKKOS_INTERNAL_HPX_ENABLE_ASYNC_DISPATCH), 1)\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_IMPL_HPX_ASYNC_DISPATCH\")\n  endif\nendif\n\n# Add Architecture flags.\n\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_ARMV80), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_ARMV80\")\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_ARM_NEON\")\n\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_CRAY), 1)\n    KOKKOS_CXXFLAGS +=\n    KOKKOS_LDFLAGS +=\n  else\n    KOKKOS_CXXFLAGS += -march=armv8-a\n    KOKKOS_LDFLAGS += -march=armv8-a\n  endif\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_ARMV81), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_ARMV81\")\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_ARM_NEON\")\n\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_CRAY), 1)\n    KOKKOS_CXXFLAGS +=\n    KOKKOS_LDFLAGS +=\n  else\n    KOKKOS_CXXFLAGS += -march=armv8.1-a\n    KOKKOS_LDFLAGS += -march=armv8.1-a\n  endif\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_A64FX), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_A64FX\")\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_ARM_NEON\")\n\n  KOKKOS_CXXFLAGS += -march=armv8.2-a+sve\n  KOKKOS_LDFLAGS += -march=armv8.2-a+sve\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_CLANG), 1)\n    KOKKOS_CXXFLAGS += -msve-vector-bits=512\n    KOKKOS_LDFLAGS += -msve-vector-bits=512\n  endif\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_GCC), 1)\n    KOKKOS_CXXFLAGS += -msve-vector-bits=512\n    KOKKOS_LDFLAGS += -msve-vector-bits=512\n  endif\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_ARMV9_GRACE), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_ARMV9_GRACE\")\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_ARM_NEON\")\n\n  KOKKOS_CXXFLAGS += -mcpu=neoverse-v2  -msve-vector-bits=128\n  KOKKOS_LDFLAGS += -mcpu=neoverse-v2  -msve-vector-bits=128\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_ZEN), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AMD_ZEN\")\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AVX2\")\n\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_INTEL), 1)\n    KOKKOS_CXXFLAGS += -mavx2\n    KOKKOS_LDFLAGS += -mavx2\n  else\n    KOKKOS_CXXFLAGS += -march=znver1 -mtune=znver1\n    KOKKOS_LDFLAGS += -march=znver1 -mtune=znver1\n  endif\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_ZEN2), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AMD_ZEN2\")\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AVX2\")\n\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_INTEL), 1)\n    KOKKOS_CXXFLAGS += -mavx2\n    KOKKOS_LDFLAGS += -mavx2\n  else\n    KOKKOS_CXXFLAGS += -march=znver2 -mtune=znver2\n    KOKKOS_LDFLAGS += -march=znver2 -mtune=znver2\n  endif\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_ZEN3), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AMD_ZEN3\")\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AVX2\")\n\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_INTEL), 1)\n    KOKKOS_CXXFLAGS += -mavx2\n    KOKKOS_LDFLAGS += -mavx2\n  else\n    KOKKOS_CXXFLAGS += -march=znver3 -mtune=znver3\n    KOKKOS_LDFLAGS += -march=znver3 -mtune=znver3\n  endif\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_ZEN4), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AMD_ZEN4\")\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AVX512XEON\")\n\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_INTEL), 1)\n    KOKKOS_CXXFLAGS += -xCORE-AVX512\n    KOKKOS_LDFLAGS += -xCORE-AVX512\n  else\n    KOKKOS_CXXFLAGS += -march=znver4 -mtune=znver4\n    KOKKOS_LDFLAGS += -march=znver4 -mtune=znver4\n  endif\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_ARMV8_THUNDERX), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_ARMV80\")\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_ARMV8_THUNDERX\")\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_ARM_NEON\")\n\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_CRAY), 1)\n    KOKKOS_CXXFLAGS +=\n    KOKKOS_LDFLAGS +=\n  else\n    KOKKOS_CXXFLAGS += -march=armv8-a -mtune=thunderx\n    KOKKOS_LDFLAGS += -march=armv8-a -mtune=thunderx\n  endif\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_ARMV8_THUNDERX2), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_ARMV81\")\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_ARMV8_THUNDERX2\")\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_ARM_NEON\")\n\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_CRAY), 1)\n    KOKKOS_CXXFLAGS +=\n    KOKKOS_LDFLAGS +=\n  else\n    KOKKOS_CXXFLAGS += -mtune=thunderx2t99 -mcpu=thunderx2t99\n    KOKKOS_LDFLAGS += -mtune=thunderx2t99 -mcpu=thunderx2t99\n  endif\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_AVX), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AVX\")\n\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_INTEL), 1)\n    KOKKOS_CXXFLAGS += -mavx\n    KOKKOS_LDFLAGS  += -mavx\n  else ifeq ($(KOKKOS_INTERNAL_COMPILER_CRAY), 1)\n  else\n    # Assume that this is a really a GNU compiler.\n    KOKKOS_CXXFLAGS += -mavx\n    KOKKOS_LDFLAGS  += -mavx\n  endif\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_POWER7), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_POWER7\")\n\n  # Assume that this is a really a GNU compiler.\n  KOKKOS_CXXFLAGS += -mcpu=power7 -mtune=power7\n  KOKKOS_LDFLAGS  += -mcpu=power7 -mtune=power7\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_POWER8), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_POWER8\")\n\n  KOKKOS_CXXFLAGS += -mcpu=power8 -mtune=power8\n  KOKKOS_LDFLAGS  += -mcpu=power8 -mtune=power8\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_POWER9), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_POWER9\")\n\n  KOKKOS_CXXFLAGS += -mcpu=power9 -mtune=power9\n  KOKKOS_LDFLAGS  += -mcpu=power9 -mtune=power9\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_HSW), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AVX2\")\n\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_INTEL), 1)\n    KOKKOS_CXXFLAGS += -xCORE-AVX2\n    KOKKOS_LDFLAGS  += -xCORE-AVX2\n  else ifeq ($(KOKKOS_INTERNAL_COMPILER_CRAY), 1)\n  else\n    # Assume that this is a really a GNU compiler.\n    KOKKOS_CXXFLAGS += -march=core-avx2 -mtune=core-avx2\n    KOKKOS_LDFLAGS  += -march=core-avx2 -mtune=core-avx2\n  endif\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_BDW), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AVX2\")\n\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_INTEL), 1)\n    KOKKOS_CXXFLAGS += -xCORE-AVX2\n    KOKKOS_LDFLAGS  += -xCORE-AVX2\n  else ifeq ($(KOKKOS_INTERNAL_COMPILER_CRAY), 1)\n  else\n    # Assume that this is a really a GNU compiler.\n    KOKKOS_CXXFLAGS += -march=core-avx2 -mtune=core-avx2 -mrtm\n    KOKKOS_LDFLAGS  += -march=core-avx2 -mtune=core-avx2 -mrtm\n  endif\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_AVX512MIC), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AVX512MIC\")\n\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_INTEL), 1)\n    KOKKOS_CXXFLAGS += -xMIC-AVX512\n    KOKKOS_LDFLAGS  += -xMIC-AVX512\n  else ifeq ($(KOKKOS_INTERNAL_COMPILER_CRAY), 1)\n  else\n    # Asssume that this is really a GNU compiler.\n    KOKKOS_CXXFLAGS += -march=knl -mtune=knl\n    KOKKOS_LDFLAGS  += -march=knl -mtune=knl\n  endif\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_SKL), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AVX512XEON\")\n\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_INTEL), 1)\n    KOKKOS_CXXFLAGS += -xSKYLAKE\n    KOKKOS_LDFLAGS  += -xSKYLAKE\n  else ifeq ($(KOKKOS_INTERNAL_COMPILER_CRAY), 1)\n  else\n    # Nothing here yet.\n    KOKKOS_CXXFLAGS += -march=skylake\n    KOKKOS_LDFLAGS  += -march=skylake\n  endif\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_SKX), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AVX512XEON\")\n\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_INTEL), 1)\n    KOKKOS_CXXFLAGS += -xCORE-AVX512\n    KOKKOS_LDFLAGS  += -xCORE-AVX512\n  else ifeq ($(KOKKOS_INTERNAL_COMPILER_CRAY), 1)\n  else\n    # Nothing here yet.\n    KOKKOS_CXXFLAGS += -march=skylake-avx512 -mtune=skylake-avx512\n    KOKKOS_LDFLAGS  += -march=skylake-avx512 -mtune=skylake-avx512\n  endif\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_ICL), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AVX512XEON\")\n  KOKKOS_CXXFLAGS += -march=icelake-client -mtune=icelake-client\n  KOKKOS_LDFLAGS += -march=icelake-client -mtune=icelake-client\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_ICX), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AVX512XEON\")\n  KOKKOS_CXXFLAGS += -march=icelake-server -mtune=icelake-server\n  KOKKOS_LDFLAGS += -march=icelake-server -mtune=icelake-server\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_SPR), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AVX512XEON\")\n  KOKKOS_CXXFLAGS += -march=sapphirerapids -mtune=sapphirerapids\n  KOKKOS_LDFLAGS += -march=sapphirerapids -mtune=sapphirerapids\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_KNC), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_KNC\")\n  KOKKOS_CXXFLAGS += -mmic\n  KOKKOS_LDFLAGS += -mmic\nendif\n\n# Figure out the architecture flag for Cuda.\nifeq ($(KOKKOS_INTERNAL_USE_CUDA), 1)\n   KOKKOS_INTERNAL_USE_CUDA_ARCH=1\nendif\nifeq ($(KOKKOS_INTERNAL_USE_HIP), 1)\n   ifeq ($(KOKKOS_INTERNAL_COMPILER_NVCC), 1)\n     KOKKOS_INTERNAL_USE_CUDA_ARCH=1\n   endif\nendif\nifeq ($(KOKKOS_INTERNAL_USE_CUDA_ARCH), 1)\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_NVCC), 1)\n    KOKKOS_INTERNAL_CUDA_ARCH_FLAG=-arch\n  else ifeq ($(KOKKOS_INTERNAL_COMPILER_CLANG), 1)\n\t\tKOKKOS_INTERNAL_CUDA_ARCH_FLAG=--cuda-gpu-arch\n\t\tKOKKOS_CXXFLAGS += -x cuda\n  else\n    $(error Makefile.kokkos: CUDA is enabled but the compiler is neither NVCC nor Clang (got version string $(KOKKOS_CXX_VERSION)) )\n  endif\n  KOKKOS_INTERNAL_USE_CUDA_ARCH = 1\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_OPENMPTARGET), 1)\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_CRAY_CLANG), 1)\n    KOKKOS_INTERNAL_CUDA_ARCH_FLAG=-fopenmp\n    else ifeq ($(KOKKOS_INTERNAL_COMPILER_CLANG), 1)\n      KOKKOS_INTERNAL_CUDA_ARCH_FLAG=-fopenmp --offload-arch\n  endif\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_OPENACC), 1)\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_CLANG), 1)\n      KOKKOS_INTERNAL_CUDA_ARCH_FLAG=--offload-arch\n  endif\nendif\n\n# Do not add this flag if its the cray compiler or the nvhpc compiler.\nifeq ($(KOKKOS_INTERNAL_COMPILER_CRAY_CLANG), 0)\n  # Lets start with adding architecture defines\n  ifeq ($(KOKKOS_INTERNAL_USE_ARCH_KEPLER30), 1)\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_KEPLER\")\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_KEPLER30\")\n    ifeq ($(KOKKOS_INTERNAL_COMPILER_NVHPC), 0)\n      KOKKOS_INTERNAL_CUDA_ARCH_FLAG := $(KOKKOS_INTERNAL_CUDA_ARCH_FLAG)=sm_30\n    endif\n  endif\n  ifeq ($(KOKKOS_INTERNAL_USE_ARCH_KEPLER32), 1)\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_KEPLER\")\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_KEPLER32\")\n    ifeq ($(KOKKOS_INTERNAL_COMPILER_NVHPC), 0)\n      KOKKOS_INTERNAL_CUDA_ARCH_FLAG := $(KOKKOS_INTERNAL_CUDA_ARCH_FLAG)=sm_32\n    endif\n  endif\n  ifeq ($(KOKKOS_INTERNAL_USE_ARCH_KEPLER35), 1)\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_KEPLER\")\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_KEPLER35\")\n    ifeq ($(KOKKOS_INTERNAL_COMPILER_NVHPC), 0)\n      KOKKOS_INTERNAL_CUDA_ARCH_FLAG := $(KOKKOS_INTERNAL_CUDA_ARCH_FLAG)=sm_35\n    endif\n  endif\n  ifeq ($(KOKKOS_INTERNAL_USE_ARCH_KEPLER37), 1)\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_KEPLER\")\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_KEPLER37\")\n    ifeq ($(KOKKOS_INTERNAL_COMPILER_NVHPC), 0)\n      KOKKOS_INTERNAL_CUDA_ARCH_FLAG := $(KOKKOS_INTERNAL_CUDA_ARCH_FLAG)=sm_37\n    endif\n  endif\n  ifeq ($(KOKKOS_INTERNAL_USE_ARCH_MAXWELL50), 1)\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_MAXWELL\")\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_MAXWELL50\")\n    ifeq ($(KOKKOS_INTERNAL_COMPILER_NVHPC), 0)\n      KOKKOS_INTERNAL_CUDA_ARCH_FLAG := $(KOKKOS_INTERNAL_CUDA_ARCH_FLAG)=sm_50\n    endif\n  endif\n  ifeq ($(KOKKOS_INTERNAL_USE_ARCH_MAXWELL52), 1)\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_MAXWELL\")\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_MAXWELL52\")\n    ifeq ($(KOKKOS_INTERNAL_COMPILER_NVHPC), 0)\n      KOKKOS_INTERNAL_CUDA_ARCH_FLAG := $(KOKKOS_INTERNAL_CUDA_ARCH_FLAG)=sm_52\n    endif\n  endif\n  ifeq ($(KOKKOS_INTERNAL_USE_ARCH_MAXWELL53), 1)\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_MAXWELL\")\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_MAXWELL53\")\n    ifeq ($(KOKKOS_INTERNAL_COMPILER_NVHPC), 0)\n      KOKKOS_INTERNAL_CUDA_ARCH_FLAG := $(KOKKOS_INTERNAL_CUDA_ARCH_FLAG)=sm_53\n    endif\n  endif\n  ifeq ($(KOKKOS_INTERNAL_USE_ARCH_PASCAL60), 1)\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_PASCAL\")\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_PASCAL60\")\n    ifeq ($(KOKKOS_INTERNAL_COMPILER_NVHPC), 0)\n      KOKKOS_INTERNAL_CUDA_ARCH_FLAG := $(KOKKOS_INTERNAL_CUDA_ARCH_FLAG)=sm_60\n    endif\n  endif\n  ifeq ($(KOKKOS_INTERNAL_USE_ARCH_PASCAL61), 1)\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_PASCAL\")\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_PASCAL61\")\n    ifeq ($(KOKKOS_INTERNAL_COMPILER_NVHPC), 0)\n      KOKKOS_INTERNAL_CUDA_ARCH_FLAG := $(KOKKOS_INTERNAL_CUDA_ARCH_FLAG)=sm_61\n    endif\n  endif\n  ifeq ($(KOKKOS_INTERNAL_USE_ARCH_VOLTA70), 1)\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_VOLTA\")\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_VOLTA70\")\n    ifeq ($(KOKKOS_INTERNAL_COMPILER_NVHPC), 0)\n      KOKKOS_INTERNAL_CUDA_ARCH_FLAG := $(KOKKOS_INTERNAL_CUDA_ARCH_FLAG)=sm_70\n    endif\n  endif\n  ifeq ($(KOKKOS_INTERNAL_USE_ARCH_VOLTA72), 1)\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_VOLTA\")\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_VOLTA72\")\n    ifeq ($(KOKKOS_INTERNAL_COMPILER_NVHPC), 0)\n      KOKKOS_INTERNAL_CUDA_ARCH_FLAG := $(KOKKOS_INTERNAL_CUDA_ARCH_FLAG)=sm_72\n    endif\n  endif\n  ifeq ($(KOKKOS_INTERNAL_USE_ARCH_TURING75), 1)\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_TURING75\")\n    ifeq ($(KOKKOS_INTERNAL_COMPILER_NVHPC), 0)\n      KOKKOS_INTERNAL_CUDA_ARCH_FLAG := $(KOKKOS_INTERNAL_CUDA_ARCH_FLAG)=sm_75\n    endif\n  endif\n  ifeq ($(KOKKOS_INTERNAL_USE_ARCH_AMPERE80), 1)\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AMPERE\")\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AMPERE80\")\n    ifeq ($(KOKKOS_INTERNAL_COMPILER_NVHPC), 0)\n      KOKKOS_INTERNAL_CUDA_ARCH_FLAG := $(KOKKOS_INTERNAL_CUDA_ARCH_FLAG)=sm_80\n    endif\n  endif\n  ifeq ($(KOKKOS_INTERNAL_USE_ARCH_AMPERE86), 1)\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AMPERE\")\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AMPERE86\")\n    ifeq ($(KOKKOS_INTERNAL_COMPILER_NVHPC), 0)\n      KOKKOS_INTERNAL_CUDA_ARCH_FLAG := $(KOKKOS_INTERNAL_CUDA_ARCH_FLAG)=sm_86\n    endif\n  endif\n  ifeq ($(KOKKOS_INTERNAL_USE_ARCH_ADA89), 1)\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_ADA89\")\n    ifeq ($(KOKKOS_INTERNAL_COMPILER_NVHPC), 0)\n      KOKKOS_INTERNAL_CUDA_ARCH_FLAG := $(KOKKOS_INTERNAL_CUDA_ARCH_FLAG)=sm_89\n    endif\n  endif\n  ifeq ($(KOKKOS_INTERNAL_USE_ARCH_HOPPER90), 1)\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_HOPPER\")\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_HOPPER90\")\n    ifeq ($(KOKKOS_INTERNAL_COMPILER_NVHPC), 0)\n      KOKKOS_INTERNAL_CUDA_ARCH_FLAG := $(KOKKOS_INTERNAL_CUDA_ARCH_FLAG)=sm_90\n    endif\n  endif\nendif\n\nifneq ($(KOKKOS_INTERNAL_USE_ARCH_NVIDIA), 0)\n  KOKKOS_CXXFLAGS += $(KOKKOS_INTERNAL_CUDA_ARCH_FLAG)\n\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_NVCC), 1)\n    KOKKOS_LDFLAGS += $(KOKKOS_INTERNAL_CUDA_ARCH_FLAG)\n  endif\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_CLANG), 1)\n    ifeq ($(KOKKOS_INTERNAL_USE_OPENMPTARGET), 1)\n      KOKKOS_LDFLAGS += $(KOKKOS_INTERNAL_CUDA_ARCH_FLAG)\n    endif\n    ifeq ($(KOKKOS_INTERNAL_USE_OPENACC), 1)\n      KOKKOS_LDFLAGS += $(KOKKOS_INTERNAL_CUDA_ARCH_FLAG)\n    endif\n  endif\nendif\n\n\n# Figure out the architecture flag for ROCm.\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_AMD_GFX906), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AMD_GFX906\")\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AMD_GPU \\\"gfx906\\\"\")\n  KOKKOS_INTERNAL_AMD_ARCH_FLAG := --offload-arch=gfx906\nendif\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_AMD_GFX908), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AMD_GFX908\")\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AMD_GPU \\\"gfx908\\\"\")\n  KOKKOS_INTERNAL_AMD_ARCH_FLAG := --offload-arch=gfx908\nendif\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_AMD_GFX90A), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AMD_GFX90A\")\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AMD_GPU \\\"gfx90A\\\"\")\n  KOKKOS_INTERNAL_AMD_ARCH_FLAG := --offload-arch=gfx90a\nendif\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_AMD_GFX940), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AMD_GFX940\")\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AMD_GPU \\\"gfx940\\\"\")\n  KOKKOS_INTERNAL_AMD_ARCH_FLAG := --offload-arch=gfx940\nendif\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_AMD_GFX942), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AMD_GFX942\")\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AMD_GPU \\\"gfx942\\\"\")\n  KOKKOS_INTERNAL_AMD_ARCH_FLAG := --offload-arch=gfx942\nendif\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_AMD_GFX942_APU), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AMD_GFX942_APU\")\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AMD_GPU \\\"gfx942\\\"\")\n  KOKKOS_INTERNAL_AMD_ARCH_FLAG := --offload-arch=gfx942\nendif\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_AMD_GFX1030), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AMD_GFX1030\")\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AMD_GPU \\\"gfx1030\\\"\")\n  KOKKOS_INTERNAL_AMD_ARCH_FLAG := --offload-arch=gfx1030\nendif\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_AMD_GFX1100), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AMD_GFX1100\")\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AMD_GPU \\\"gfx1100\\\"\")\n  KOKKOS_INTERNAL_AMD_ARCH_FLAG := --offload-arch=gfx1100\nendif\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_AMD_GFX1103), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AMD_GFX1103\")\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_AMD_GPU \\\"gfx1103\\\"\")\n  KOKKOS_INTERNAL_AMD_ARCH_FLAG := --offload-arch=gfx1103\nendif\n\n\nifeq ($(KOKKOS_INTERNAL_USE_HIP), 1)\n  KOKKOS_SRC += $(wildcard $(KOKKOS_PATH)/core/src/HIP/*.cpp)\n  KOKKOS_SRC += $(KOKKOS_PATH)/tpls/desul/src/Lock_Array_HIP.cpp\n  KOKKOS_HEADERS += $(wildcard $(KOKKOS_PATH)/core/src/HIP/*.hpp)\n\n  KOKKOS_CXXFLAGS+=$(KOKKOS_INTERNAL_AMD_ARCH_FLAG)\n  KOKKOS_LDFLAGS+=$(KOKKOS_INTERNAL_AMD_ARCH_FLAG)\n\n  ifeq ($(KOKKOS_INTERNAL_HIP_USE_RELOC), 1)\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_HIP_RELOCATABLE_DEVICE_CODE\")\n    KOKKOS_CXXFLAGS+=-fgpu-rdc\n    KOKKOS_LDFLAGS+=-fgpu-rdc\n  else\n    KOKKOS_CXXFLAGS+=-fno-gpu-rdc\n    KOKKOS_LDFLAGS+=-fno-gpu-rdc\n  endif\n\n  ifeq ($(KOKKOS_INTERNAL_HIP_ENABLE_MALLOC_ASYNC), 1)\n    tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_IMPL_HIP_MALLOC_ASYNC\")\n  else\n    tmp := $(call kokkos_append_header,\"/* $H\"\"undef KOKKOS_ENABLE_IMPL_HIP_MALLOC_ASYNC */\")\n  endif\nendif\n\nifneq ($(KOKKOS_INTERNAL_USE_ARCH_AMD), 0)\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_CLANG), 1)\n    ifeq ($(KOKKOS_INTERNAL_USE_OPENACC), 1)\n      KOKKOS_CXXFLAGS += $(KOKKOS_INTERNAL_AMD_ARCH_FLAG)\n      KOKKOS_LDFLAGS += $(KOKKOS_INTERNAL_AMD_ARCH_FLAG)\n    endif\n  endif\nendif\n\n# Figure out Intel architecture flags.\nifeq ($(KOKKOS_INTERNAL_USE_SYCL), 1)\n  KOKKOS_INTERNAL_LC_BACKEND := sycl\nendif\nifeq ($(KOKKOS_INTERNAL_USE_OPENMPTARGET), 1)\n  KOKKOS_INTERNAL_LC_BACKEND := openmp\nendif\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_INTEL_GEN), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_INTEL_GPU\")\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_INTEL_GEN\")\n  KOKKOS_INTERNAL_INTEL_ARCH_FLAG := -f${KOKKOS_INTERNAL_LC_BACKEND}-targets=spir64\nendif\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_INTEL_GEN9), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_INTEL_GPU\")\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_INTEL_GEN9\")\n  KOKKOS_INTERNAL_INTEL_ARCH_FLAG := -f${KOKKOS_INTERNAL_LC_BACKEND}-targets=spir64_gen -X${KOKKOS_INTERNAL_LC_BACKEND}-target-backend \"-device gen9\"\nendif\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_INTEL_GEN11), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_INTEL_GPU\")\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_INTEL_GEN11\")\n  KOKKOS_INTERNAL_INTEL_ARCH_FLAG := -f${KOKKOS_INTERNAL_LC_BACKEND}-targets=spir64_gen -X${KOKKOS_INTERNAL_LC_BACKEND}-target-backend \"-device gen11\"\nendif\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_INTEL_GEN12LP), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_INTEL_GPU\")\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_INTEL_GEN12LP\")\n  KOKKOS_INTERNAL_INTEL_ARCH_FLAG := -f${KOKKOS_INTERNAL_LC_BACKEND}-targets=spir64_gen -X${KOKKOS_INTERNAL_LC_BACKEND}-target-backend \"-device gen12lp\"\nendif\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_INTEL_DG1), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_INTEL_GPU\")\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_INTEL_DG1\")\n  KOKKOS_INTERNAL_INTEL_ARCH_FLAG := -f${KOKKOS_INTERNAL_LC_BACKEND}-targets=spir64_gen -X${KOKKOS_INTERNAL_LC_BACKEND}-target-backend \"-device dg1\"\nendif\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_INTEL_XEHP), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_INTEL_GPU\")\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_INTEL_XEHP\")\n  KOKKOS_INTERNAL_INTEL_ARCH_FLAG := -f${KOKKOS_INTERNAL_LC_BACKEND}-targets=spir64_gen -X${KOKKOS_INTERNAL_LC_BACKEND}-target-backend \"-device 12.50.4\"\nendif\nifeq ($(KOKKOS_INTERNAL_USE_ARCH_INTEL_PVC), 1)\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_INTEL_GPU\")\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ARCH_INTEL_PVC\")\n  KOKKOS_INTERNAL_INTEL_ARCH_FLAG := -f${KOKKOS_INTERNAL_LC_BACKEND}-targets=spir64_gen -X${KOKKOS_INTERNAL_LC_BACKEND}-target-backend \"-device 12.60.7\"\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_SYCL), 1)\n  KOKKOS_SRC += $(wildcard $(KOKKOS_PATH)/core/src/SYCL/*.cpp)\n  KOKKOS_HEADERS += $(wildcard $(KOKKOS_PATH)/core/src/SYCL/*.hpp)\n\n  KOKKOS_CXXFLAGS+=-fsycl -fno-sycl-id-queries-fit-in-int -fsycl-unnamed-lambda -fsycl-dead-args-optimization\n  KOKKOS_CXXFLAGS+=$(KOKKOS_INTERNAL_INTEL_ARCH_FLAG)\n  KOKKOS_LDFLAGS+=-fsycl\n  KOKKOS_LDFLAGS+=$(KOKKOS_INTERNAL_INTEL_ARCH_FLAG)\n\n  tmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_SYCL_RELOCATABLE_DEVICE_CODE\")\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_OPENMPTARGET), 1)\n  KOKKOS_CXXFLAGS+=$(KOKKOS_INTERNAL_INTEL_ARCH_FLAG) -D__STRICT_ANSI__\n  KOKKOS_LDFLAGS+=$(KOKKOS_INTERNAL_INTEL_ARCH_FLAG)\nendif\n\nifeq ($(KOKKOS_INTERNAL_DISABLE_DESUL_ATOMICS), 1)\n  $(warning disable_desul_atomics option has been removed. Desul atomics cannot be disabled.)\n  KOKKOS_INTERNAL_DISABLE_DESUL_ATOMICS := 0\nendif\nifeq ($(KOKKOS_INTERNAL_ENABLE_DESUL_ATOMICS), 1)\n  $(warning enable_desul_atomics option has been removed. Desul atomics are always enabled.)\nendif\nKOKKOS_CPPFLAGS+=-I$(KOKKOS_PATH)/tpls/desul/include\n\nifeq ($(KOKKOS_INTERNAL_DISABLE_BUNDLED_MDSPAN), 0)\n  KOKKOS_CPPFLAGS+=-I$(KOKKOS_PATH)/tpls/mdspan/include\nendif\ntmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_IMPL_MDSPAN\")\n\ntmp := $(call kokkos_append_header,\"$H\"\"define KOKKOS_ENABLE_IMPL_REF_COUNT_BRANCH_UNLIKELY\")\n\nKOKKOS_INTERNAL_LS_CONFIG := $(shell ls KokkosCore_config.h 2>&1)\n\nifeq ($(KOKKOS_INTERNAL_LS_CONFIG), KokkosCore_config.h)\n  KOKKOS_INTERNAL_NEW_CONFIG := $(strip $(shell diff KokkosCore_config.h KokkosCore_config.tmp | grep -c define))\nelse\n  KOKKOS_INTERNAL_NEW_CONFIG := 1\nendif\n\nifneq ($(KOKKOS_INTERNAL_NEW_CONFIG), 0)\n  tmp := $(shell cp KokkosCore_config.tmp KokkosCore_config.h)\n\n  # Functions for generating config header file\n  kokkos_start_config_header = $(shell sed 's~@INCLUDE_NEXT_FILE@~~g' $(KOKKOS_PATH)/cmake/KokkosCore_Config_HeaderSet.in > $1)\n  kokkos_update_config_header = $(shell sed 's~@HEADER_GUARD_TAG@~$1~g' $2 > $3)\n  kokkos_append_config_header = $(shell echo $1 >> $2))\n  tmp := $(call kokkos_start_config_header, \"KokkosCore_Config_FwdBackend.tmp\")\n  tmp := $(call kokkos_start_config_header, \"KokkosCore_Config_SetupBackend.tmp\")\n  tmp := $(call kokkos_start_config_header, \"KokkosCore_Config_DeclareBackend.tmp\")\n  tmp := $(call kokkos_start_config_header, \"KokkosCore_Config_PostInclude.tmp\")\n  tmp := $(call kokkos_update_config_header, KOKKOS_FWD_HPP_, \"KokkosCore_Config_FwdBackend.tmp\", \"KokkosCore_Config_FwdBackend.hpp\")\n  tmp := $(call kokkos_update_config_header, KOKKOS_SETUP_HPP_, \"KokkosCore_Config_SetupBackend.tmp\", \"KokkosCore_Config_SetupBackend.hpp\")\n  tmp := $(call kokkos_update_config_header, KOKKOS_DECLARE_HPP_, \"KokkosCore_Config_DeclareBackend.tmp\", \"KokkosCore_Config_DeclareBackend.hpp\")\n  ifeq ($(KOKKOS_INTERNAL_USE_OPENMP), 1)\n    tmp := $(call kokkos_append_config_header,\"$H\"\"include <fwd/Kokkos_Fwd_OPENMP.hpp>\",\"KokkosCore_Config_FwdBackend.hpp\")\n    tmp := $(call kokkos_append_config_header,\"$H\"\"include <decl/Kokkos_Declare_OPENMP.hpp>\",\"KokkosCore_Config_DeclareBackend.hpp\")\n  endif\n  ifeq ($(KOKKOS_INTERNAL_USE_THREADS), 1)\n    tmp := $(call kokkos_append_config_header,\"$H\"\"include <fwd/Kokkos_Fwd_THREADS.hpp>\",\"KokkosCore_Config_FwdBackend.hpp\")\n    tmp := $(call kokkos_append_config_header,\"$H\"\"include <decl/Kokkos_Declare_THREADS.hpp>\",\"KokkosCore_Config_DeclareBackend.hpp\")\n  endif\n  ifeq ($(KOKKOS_INTERNAL_USE_HPX), 1)\n    tmp := $(call kokkos_append_config_header,\"$H\"\"include <fwd/Kokkos_Fwd_HPX.hpp>\",\"KokkosCore_Config_FwdBackend.hpp\")\n    tmp := $(call kokkos_append_config_header,\"$H\"\"include <decl/Kokkos_Declare_HPX.hpp>\",\"KokkosCore_Config_DeclareBackend.hpp\")\n  endif\n  ifeq ($(KOKKOS_INTERNAL_USE_SERIAL), 1)\n    tmp := $(call kokkos_append_config_header,\"$H\"\"include <fwd/Kokkos_Fwd_SERIAL.hpp>\",\"KokkosCore_Config_FwdBackend.hpp\")\n    tmp := $(call kokkos_append_config_header,\"$H\"\"include <decl/Kokkos_Declare_SERIAL.hpp>\",\"KokkosCore_Config_DeclareBackend.hpp\")\n  endif\n  ifeq ($(KOKKOS_INTERNAL_USE_CUDA), 1)\n    tmp := $(call kokkos_append_config_header,\"$H\"\"include <fwd/Kokkos_Fwd_CUDA.hpp>\",\"KokkosCore_Config_FwdBackend.hpp\")\n    tmp := $(call kokkos_append_config_header,\"$H\"\"include <decl/Kokkos_Declare_CUDA.hpp>\",\"KokkosCore_Config_DeclareBackend.hpp\")\n    tmp := $(call kokkos_append_config_header,\"$H\"\"include <setup/Kokkos_Setup_Cuda.hpp>\",\"KokkosCore_Config_SetupBackend.hpp\")\n  endif\n  ifeq ($(KOKKOS_INTERNAL_USE_OPENMPTARGET), 1)\n    tmp := $(call kokkos_append_config_header,\"$H\"\"include <fwd/Kokkos_Fwd_OPENMPTARGET.hpp>\",\"KokkosCore_Config_FwdBackend.hpp\")\n    tmp := $(call kokkos_append_config_header,\"$H\"\"include <decl/Kokkos_Declare_OPENMPTARGET.hpp>\",\"KokkosCore_Config_DeclareBackend.hpp\")\n  endif\n  ifeq ($(KOKKOS_INTERNAL_USE_SYCL), 1)\n    tmp := $(call kokkos_append_config_header,\"$H\"\"include <fwd/Kokkos_Fwd_SYCL.hpp>\",\"KokkosCore_Config_FwdBackend.hpp\")\n    tmp := $(call kokkos_append_config_header,\"$H\"\"include <decl/Kokkos_Declare_SYCL.hpp>\",\"KokkosCore_Config_DeclareBackend.hpp\")\n    tmp := $(call kokkos_append_config_header,\"$H\"\"include <setup/Kokkos_Setup_SYCL.hpp>\",\"KokkosCore_Config_SetupBackend.hpp\")\n  endif\n  ifeq ($(KOKKOS_INTERNAL_USE_HIP), 1)\n    tmp := $(call kokkos_append_config_header,\"$H\"\"include <fwd/Kokkos_Fwd_HIP.hpp>\",\"KokkosCore_Config_FwdBackend.hpp\")\n    tmp := $(call kokkos_append_config_header,\"$H\"\"include <decl/Kokkos_Declare_HIP.hpp>\",\"KokkosCore_Config_DeclareBackend.hpp\")\n    tmp := $(call kokkos_append_config_header,\"$H\"\"include <setup/Kokkos_Setup_HIP.hpp>\",\"KokkosCore_Config_SetupBackend.hpp\")\n  endif\n  ifeq ($(KOKKOS_INTERNAL_USE_OPENACC), 1)\n    tmp := $(call kokkos_append_config_header,\"$H\"\"include <fwd/Kokkos_Fwd_OPENACC.hpp>\",\"KokkosCore_Config_FwdBackend.hpp\")\n    tmp := $(call kokkos_append_config_header,\"$H\"\"include <decl/Kokkos_Declare_OPENACC.hpp>\",\"KokkosCore_Config_DeclareBackend.hpp\")\n  endif\nendif\n\nKOKKOS_HEADERS += $(wildcard $(KOKKOS_PATH)/core/src/*.hpp)\nKOKKOS_HEADERS += $(wildcard $(KOKKOS_PATH)/core/src/View/*.hpp)\nKOKKOS_HEADERS += $(wildcard $(KOKKOS_PATH)/core/src/View/MDSpan/*.hpp)\nKOKKOS_HEADERS += $(wildcard $(KOKKOS_PATH)/core/src/impl/*.hpp)\nKOKKOS_HEADERS += $(wildcard $(KOKKOS_PATH)/containers/src/*.hpp)\nKOKKOS_HEADERS += $(wildcard $(KOKKOS_PATH)/containers/src/impl/*.hpp)\nKOKKOS_HEADERS += $(wildcard $(KOKKOS_PATH)/algorithms/src/*.hpp)\n\nKOKKOS_SRC += $(wildcard $(KOKKOS_PATH)/core/src/impl/*.cpp)\nKOKKOS_SRC += $(wildcard $(KOKKOS_PATH)/containers/src/impl/*.cpp)\n\nifeq ($(KOKKOS_INTERNAL_USE_CUDA), 1)\n  KOKKOS_SRC += $(wildcard $(KOKKOS_PATH)/core/src/Cuda/*.cpp)\n  KOKKOS_SRC += $(KOKKOS_PATH)/tpls/desul/src/Lock_Array_CUDA.cpp\n  KOKKOS_HEADERS += $(wildcard $(KOKKOS_PATH)/core/src/Cuda/*.hpp)\n  ifneq ($(CUDA_PATH),)\n    KOKKOS_CPPLAGS += -I$(CUDA_PATH)/include\n    ifeq ($(call kokkos_path_exists,$(CUDA_PATH)/lib64), 1)\n      KOKKOS_LIBDIRS += -L$(CUDA_PATH)/lib64\n      KOKKOS_CXXLDFLAGS += -L$(CUDA_PATH)/lib64\n      KOKKOS_TPL_LIBRARY_DIRS += $(CUDA_PATH)/lib64\n    else ifeq ($(call kokkos_path_exists,$(CUDA_PATH)/lib), 1)\n      KOKKOS_LIBDIRS += -L$(CUDA_PATH)/lib\n      KOKKOS_CXXLDFLAGS += -L$(CUDA_PATH)/lib\n      KOKKOS_TPL_LIBRARY_DIRS += $(CUDA_PATH)/lib\n    else\n      $(error Can't find CUDA library directory: no lib64 or lib directory in $(CUDA_PATH))\n    endif\n    KOKKOS_TPL_INCLUDE_DIRS += $(CUDA_PATH)/include\n    ifeq ($(KOKKOS_INTERNAL_COMPILER_CLANG), 1)\n      KOKKOS_CXXFLAGS += --cuda-path=$(CUDA_PATH)\n    endif\n  endif\n  KOKKOS_LIBS += -lcudart -lcuda\n  KOKKOS_TPL_LIBRARY_NAMES += cudart cuda\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_OPENMPTARGET), 1)\n  KOKKOS_SRC += $(wildcard $(KOKKOS_PATH)/core/src/OpenMPTarget/*.cpp)\n  KOKKOS_HEADERS += $(wildcard $(KOKKOS_PATH)/core/src/OpenMPTarget/*.hpp)\n  ifeq ($(KOKKOS_INTERNAL_USE_CUDA), 1)\n    KOKKOS_CXXFLAGS += -Xcompiler $(KOKKOS_INTERNAL_OPENMPTARGET_FLAG)\n  else\n    KOKKOS_CXXFLAGS += $(KOKKOS_INTERNAL_OPENMPTARGET_FLAG)\n  endif\n  KOKKOS_LDFLAGS += $(KOKKOS_INTERNAL_OPENMPTARGET_FLAG)\n  KOKKOS_LIBS += $(KOKKOS_INTERNAL_OPENMPTARGET_LIB)\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_OPENACC), 1)\n  KOKKOS_SRC += $(wildcard $(KOKKOS_PATH)/core/src/OpenACC/*.cpp)\n  KOKKOS_HEADERS += $(wildcard $(KOKKOS_PATH)/core/src/OpenACC/*.hpp)\n  KOKKOS_CXXFLAGS += $(KOKKOS_INTERNAL_OPENACC_FLAG)\n  KOKKOS_LDFLAGS += $(KOKKOS_INTERNAL_OPENACC_FLAG)\n  KOKKOS_LIBS += $(KOKKOS_INTERNAL_OPENACC_LIB)\n  ifeq ($(KOKKOS_INTERNAL_USE_ARCH_NVIDIA), 1)\n    ifneq ($(CUDA_PATH),)\n      ifeq ($(call kokkos_path_exists,$(CUDA_PATH)/lib), 1)\n        CUDA_PATH := $(CUDA_PATH:/compilers=/cuda)\n      endif\n    endif\n    ifeq ($(KOKKOS_INTERNAL_COMPILER_CLANG), 1)\n      ifneq ($(CUDA_PATH),)\n        KOKKOS_LDFLAGS += -L$(CUDA_PATH)/lib64\n      endif\n      KOKKOS_LIBS += -lcudart\n    endif\n    ifeq ($(KOKKOS_INTERNAL_COMPILER_NVHPC), 1)\n      KOKKOS_LIBS += -cuda\n    endif\n    ifeq ($(KOKKOS_INTERNAL_OPENACC_FORCE_HOST_AS_DEVICE), 1)\n      $(error If a GPU architecture is specified,  KOKKOS_OPENACC_OPTIONS = force_host_as_device cannot be used. Disable the force_host_as_device option)\n    endif\n  else ifeq ($(KOKKOS_INTERNAL_USE_ARCH_AMD), 1)\n    ifeq ($(KOKKOS_INTERNAL_COMPILER_CLANG), 1)\n      ifneq ($(ROCM_PATH),)\n        KOKKOS_CPPFLAGS += -I$(ROCM_PATH)/include\n        KOKKOS_LDFLAGS += -L$(ROCM_PATH)/lib\n      endif\n      KOKKOS_LIBS += -lamdhip64\n    endif\n    ifeq ($(KOKKOS_INTERNAL_OPENACC_FORCE_HOST_AS_DEVICE), 1)\n      $(error If a GPU architecture is specified,  KOKKOS_OPENACC_OPTIONS = force_host_as_device cannot be used. Disable the force_host_as_device option)\n    endif\n  else ifeq ($(KOKKOS_INTERNAL_OPENACC_FORCE_HOST_AS_DEVICE), 1)\n    # Compile for kernel execution on the host. In that case, \n    # memory is shared between the OpenACC space and the host space.\n    ifeq ($(KOKKOS_INTERNAL_COMPILER_NVHPC), 1)\n      KOKKOS_CXXFLAGS += -acc=multicore\n    endif\n  else\n    # Automatic fallback mode; try to offload any available GPU, and fall back\n    # to the host CPU if no available GPU is found.\n    ifeq ($(KOKKOS_INTERNAL_COMPILER_NVHPC), 1)\n      KOKKOS_CXXFLAGS += -acc=gpu,multicore\n    endif\n  endif\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_OPENMP), 1)\n  KOKKOS_SRC += $(wildcard $(KOKKOS_PATH)/core/src/OpenMP/*.cpp)\n  KOKKOS_HEADERS += $(wildcard $(KOKKOS_PATH)/core/src/OpenMP/*.hpp)\n\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_NVCC), 1)\n    KOKKOS_CXXFLAGS += -Xcompiler $(KOKKOS_INTERNAL_OPENMP_FLAG)\n  else\n    KOKKOS_CXXFLAGS += $(KOKKOS_INTERNAL_OPENMP_FLAG)\n  endif\n\n  KOKKOS_LDFLAGS += $(KOKKOS_INTERNAL_OPENMP_FLAG)\n  KOKKOS_LINK_FLAGS += $(KOKKOS_INTERNAL_OPENMP_FLAG)\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_THREADS), 1)\n  KOKKOS_SRC += $(wildcard $(KOKKOS_PATH)/core/src/Threads/*.cpp)\n  KOKKOS_HEADERS += $(wildcard $(KOKKOS_PATH)/core/src/Threads/*.hpp)\n  KOKKOS_LIBS += -lpthread\n  KOKKOS_TPL_LIBRARY_NAMES += pthread\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_SERIAL), 1)\n  KOKKOS_SRC += $(wildcard $(KOKKOS_PATH)/core/src/Serial/*.cpp)\n  KOKKOS_HEADERS += $(wildcard $(KOKKOS_PATH)/core/src/Serial/*.hpp)\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_HPX), 1)\n  KOKKOS_SRC += $(wildcard $(KOKKOS_PATH)/core/src/HPX/*.cpp)\n  KOKKOS_HEADERS += $(wildcard $(KOKKOS_PATH)/core/src/HPX/*.hpp)\n  ifneq ($(HPX_PATH),)\n    ifeq ($(KOKKOS_INTERNAL_ENABLE_DEBUG), 1)\n      KOKKOS_CXXFLAGS += $(shell PKG_CONFIG_PATH=$(HPX_PATH)/lib64/pkgconfig pkg-config --cflags hpx_application_debug)\n      KOKKOS_CXXLDFLAGS += $(shell PKG_CONFIG_PATH=$(HPX_PATH)/lib64/pkgconfig pkg-config --libs hpx_application_debug)\n      KOKKOS_LIBS += $(shell PKG_CONFIG_PATH=$(HPX_PATH)/lib64/pkgconfig pkg-config --libs hpx_application_debug)\n    else\n      KOKKOS_CXXFLAGS += $(shell PKG_CONFIG_PATH=$(HPX_PATH)/lib64/pkgconfig pkg-config --cflags hpx_application)\n      KOKKOS_CXXLDFLAGS += $(shell PKG_CONFIG_PATH=$(HPX_PATH)/lib64/pkgconfig pkg-config --libs hpx_application)\n      KOKKOS_LIBS += $(shell PKG_CONFIG_PATH=$(HPX_PATH)/lib64/pkgconfig pkg-config --libs hpx_application)\n    endif\n  else\n    ifeq ($(KOKKOS_INTERNAL_ENABLE_DEBUG), 1)\n      KOKKOS_CXXFLAGS += $(shell pkg-config --cflags hpx_application_debug)\n      KOKKOS_CXXLDFLAGS += $(shell pkg-config --libs hpx_application_debug)\n      KOKKOS_LIBS += $(shell pkg-config --libs hpx_application_debug)\n    else\n      KOKKOS_CXXFLAGS += $(shell pkg-config --cflags hpx_application)\n      KOKKOS_CXXLDFLAGS += $(shell pkg-config --libs hpx_application)\n      KOKKOS_LIBS += $(shell pkg-config --libs hpx_application)\n    endif\n  endif\n  KOKKOS_TPL_LIBRARY_NAMES += hpx\nendif\n\n# With Cygwin functions such as fdopen and fileno are not defined\n# when strict ansi is enabled. strict ansi gets enabled with -std=c++14\n# though. So we hard undefine it here. Not sure if that has any bad side effects\n# This is needed for gtest actually, not for Kokkos itself!\nifeq ($(KOKKOS_INTERNAL_OS_CYGWIN), 1)\n  KOKKOS_CXXFLAGS += -U__STRICT_ANSI__\nendif\n\n# Set KokkosExtraLibs and add -lkokkos to link line\nKOKKOS_EXTRA_LIBS := ${KOKKOS_LIBS}\nKOKKOS_LIBS := -lkokkos ${KOKKOS_LIBS}\n\n# Generating the <desul/atomics/Config.hpp> header\nDESUL_INTERNAL_CONFIG_TMP=Desul_Config.tmp\nDESUL_CONFIG_HEADER=desul/atomics/Config.hpp\ndesul_append_header = $(shell echo $1 >> $(DESUL_INTERNAL_CONFIG_TMP))\ntmp := $(call desul_append_header, \"// generated by on-demand build system by crtrott\" > $(DESUL_INTERNAL_CONFIG_TMP))\ntmp := $(call desul_append_header, \"$H\"\"ifndef DESUL_ATOMICS_CONFIG_HPP_\")\ntmp := $(call desul_append_header, \"$H\"\"define DESUL_ATOMICS_CONFIG_HPP_\")\ntmp := $(call desul_append_header, \"\")\nifeq ($(KOKKOS_INTERNAL_USE_CUDA), 1)\n  tmp := $(call desul_append_header,\"$H\"\"define DESUL_ATOMICS_ENABLE_CUDA\")\nelse\n  tmp := $(call desul_append_header,\"/* $H\"\"undef DESUL_ATOMICS_ENABLE_CUDA */\")\nendif\nifeq ($(KOKKOS_INTERNAL_CUDA_USE_RELOC), 1)\n  tmp := $(call desul_append_header,\"$H\"\"define DESUL_ATOMICS_ENABLE_CUDA_SEPARABLE_COMPILATION\")\nelse\n  tmp := $(call desul_append_header,\"/* $H\"\"undef DESUL_ATOMICS_ENABLE_CUDA_SEPARABLE_COMPILATION */\")\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_HIP), 1)\n  tmp := $(call desul_append_header,\"$H\"\"define DESUL_ATOMICS_ENABLE_HIP\")\nelse\n  tmp := $(call desul_append_header,\"/* $H\"\"undef DESUL_ATOMICS_ENABLE_HIP */\")\nendif\nifeq ($(KOKKOS_INTERNAL_HIP_USE_RELOC), 1)\n  tmp := $(call desul_append_header,\"$H\"\"define DESUL_ATOMICS_ENABLE_HIP_SEPARABLE_COMPILATION\")\nelse\n  tmp := $(call desul_append_header,\"/* $H\"\"undef DESUL_ATOMICS_ENABLE_HIP_SEPARABLE_COMPILATION */\")\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_SYCL), 1)\n  tmp := $(call desul_append_header,\"$H\"\"define DESUL_ATOMICS_ENABLE_SYCL\")\nelse\n  tmp := $(call desul_append_header,\"/* $H\"\"undef DESUL_ATOMICS_ENABLE_SYCL */\")\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_OPENMPTARGET), 1)\n  tmp := $(call desul_append_header,\"$H\"\"define DESUL_ATOMICS_ENABLE_OPENMP\")\nelse\n  tmp := $(call desul_append_header,\"/* $H\"\"undef DESUL_ATOMICS_ENABLE_OPENMP */\")\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_OPENACC), 1)\n  ifeq ($(KOKKOS_INTERNAL_COMPILER_NVHPC), 1)\n    tmp := $(call desul_append_header,\"$H\"\"define DESUL_ATOMICS_ENABLE_OPENACC\")\n  else\n    tmp := $(call desul_append_header,\"/* $H\"\"undef DESUL_ATOMICS_ENABLE_OPENACC */\")\n  endif\nelse\n  tmp := $(call desul_append_header,\"/* $H\"\"undef DESUL_ATOMICS_ENABLE_OPENACC */\")\nendif\ntmp := $(call desul_append_header, \"\")\ntmp := $(call desul_append_header, \"$H\"\"endif\")\n\nDESUL_INTERNAL_LS_CONFIG := $(shell ls $(DESUL_CONFIG_HEADER) 2>&1)\n\nifeq ($(DESUL_INTERNAL_LS_CONFIG), $(DESUL_CONFIG_HEADER))\n  DESUL_INTERNAL_NEW_CONFIG := $(strip $(shell diff $(DESUL_CONFIG_HEADER) $(DESUL_INTERNAL_CONFIG_TMP) | grep -c define))\nelse\n  DESUL_INTERNAL_NEW_CONFIG := 1\nendif\n\nifneq ($(DESUL_INTERNAL_NEW_CONFIG), 0)\n  tmp := $(shell mkdir -p desul/atomics)\n  tmp := $(shell cp $(DESUL_INTERNAL_CONFIG_TMP) $(DESUL_CONFIG_HEADER))\nendif\n\n# Setting up dependencies.\n\nKokkosCore_config.h:\n\n$(DESUL_CONFIG_HEADER):\n\nKOKKOS_CPP_DEPENDS := $(DESUL_CONFIG_HEADER) KokkosCore_config.h $(KOKKOS_HEADERS)\n\n# Tasking is deprecated\nifeq ($(KOKKOS_INTERNAL_DISABLE_DEPRECATED_CODE), 1)\n  TMP_KOKKOS_SRC := $(KOKKOS_SRC)\n  KOKKOS_SRC = $(patsubst %Task.cpp,, $(TMP_KOKKOS_SRC))\nendif\n\nKOKKOS_OBJ = $(KOKKOS_SRC:.cpp=.o)\nKOKKOS_OBJ_LINK = $(notdir $(KOKKOS_OBJ))\n\ninclude $(KOKKOS_PATH)/Makefile.targets\n\nkokkos-clean:\n\trm -f $(KOKKOS_OBJ_LINK) $(DESUL_CONFIG_HEADER) $(DESUL_INTERNAL_CONFIG_TMP) KokkosCore_config.h KokkosCore_config.tmp libkokkos.a KokkosCore_Config_SetupBackend.hpp \\\n\tKokkosCore_Config_FwdBackend.hpp KokkosCore_Config_DeclareBackend.hpp KokkosCore_Config_DeclareBackend.tmp \\\n        KokkosCore_Config_FwdBackend.tmp KokkosCore_Config_SetupBackend.tmp\n\nlibkokkos.a: $(KOKKOS_OBJ_LINK) $(KOKKOS_SRC) $(KOKKOS_HEADERS)\n\tar cr libkokkos.a $(KOKKOS_OBJ_LINK)\n\tranlib libkokkos.a\n\nprint-cxx-flags:\n\techo \"$(KOKKOS_CXXFLAGS)\"\n\nKOKKOS_LINK_DEPENDS=libkokkos.a\n\n#we have carefully separated LDFLAGS from LIBS and LIBDIRS\n#we have also separated CPPFLAGS from CXXFLAGS\n#if this is not cmake, for backwards compatibility\n#we just jam everything together into the CXXFLAGS and LDFLAGS\nifneq ($(KOKKOS_CMAKE), yes)\n  KOKKOS_CXXFLAGS += $(KOKKOS_CPPFLAGS)\n  KOKKOS_LDFLAGS += $(KOKKOS_LIBDIRS)\nendif\n"
        },
        {
          "name": "Makefile.targets",
          "type": "blob",
          "size": 10.18359375,
          "content": "Kokkos_UnorderedMap_impl.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/containers/src/impl/Kokkos_UnorderedMap_impl.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/containers/src/impl/Kokkos_UnorderedMap_impl.cpp\nKokkos_Core.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/impl/Kokkos_Core.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/impl/Kokkos_Core.cpp\nKokkos_CPUDiscovery.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/impl/Kokkos_CPUDiscovery.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/impl/Kokkos_CPUDiscovery.cpp\nKokkos_Error.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/impl/Kokkos_Error.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/impl/Kokkos_Error.cpp\nKokkos_Stacktrace.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/impl/Kokkos_Stacktrace.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/impl/Kokkos_Stacktrace.cpp\nKokkos_ExecPolicy.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/impl/Kokkos_ExecPolicy.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/impl/Kokkos_ExecPolicy.cpp\nKokkos_Command_Line_Parsing.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/impl/Kokkos_Command_Line_Parsing.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/impl/Kokkos_Command_Line_Parsing.cpp\nKokkos_HostSpace.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/impl/Kokkos_HostSpace.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/impl/Kokkos_HostSpace.cpp\nKokkos_hwloc.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/impl/Kokkos_hwloc.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/impl/Kokkos_hwloc.cpp\nKokkos_HostThreadTeam.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/impl/Kokkos_HostThreadTeam.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/impl/Kokkos_HostThreadTeam.cpp\nKokkos_HostBarrier.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/impl/Kokkos_HostBarrier.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/impl/Kokkos_HostBarrier.cpp\nKokkos_Profiling.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/impl/Kokkos_Profiling.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/impl/Kokkos_Profiling.cpp\nKokkos_SharedAlloc.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/impl/Kokkos_SharedAlloc.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/impl/Kokkos_SharedAlloc.cpp\nKokkos_MemoryPool.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/impl/Kokkos_MemoryPool.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/impl/Kokkos_MemoryPool.cpp\nKokkos_HostSpace_deepcopy.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/impl/Kokkos_HostSpace_deepcopy.cpp \n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/impl/Kokkos_HostSpace_deepcopy.cpp\nKokkos_NumericTraits.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/impl/Kokkos_NumericTraits.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/impl/Kokkos_NumericTraits.cpp\nKokkos_Abort.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/impl/Kokkos_Abort.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/impl/Kokkos_Abort.cpp\n\nifeq ($(KOKKOS_INTERNAL_USE_SERIAL), 1)\nKokkos_Serial.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/Serial/Kokkos_Serial.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/Serial/Kokkos_Serial.cpp\nifneq ($(KOKKOS_INTERNAL_DISABLE_DEPRECATED_CODE), 1)\nKokkos_Serial_Task.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/Serial/Kokkos_Serial_Task.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/Serial/Kokkos_Serial_Task.cpp\nendif\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_CUDA), 1)\nKokkos_Cuda_Instance.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/Cuda/Kokkos_Cuda_Instance.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/Cuda/Kokkos_Cuda_Instance.cpp\nKokkos_CudaSpace.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/Cuda/Kokkos_CudaSpace.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/Cuda/Kokkos_CudaSpace.cpp\nifneq ($(KOKKOS_INTERNAL_DISABLE_DEPRECATED_CODE), 1)\nKokkos_Cuda_Task.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/Cuda/Kokkos_Cuda_Task.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/Cuda/Kokkos_Cuda_Task.cpp\nendif\nLock_Array_CUDA.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/tpls/desul/src/Lock_Array_CUDA.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/tpls/desul/src/Lock_Array_CUDA.cpp\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_SYCL), 1)\nKokkos_SYCL.o : $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/SYCL/Kokkos_SYCL.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/SYCL/Kokkos_SYCL.cpp\nKokkos_SYCL_Space.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/SYCL/Kokkos_SYCL_Space.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/SYCL/Kokkos_SYCL_Space.cpp\nKokkos_SYCL_Instance.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/SYCL/Kokkos_SYCL_Instance.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/SYCL/Kokkos_SYCL_Instance.cpp\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_HIP), 1)\nKokkos_HIP.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/HIP/Kokkos_HIP.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/HIP/Kokkos_HIP.cpp\nKokkos_HIP_SharedAllocationRecord.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/HIP/Kokkos_HIP_SharedAllocationRecord.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/HIP/Kokkos_HIP_SharedAllocationRecord.cpp\nKokkos_HIP_DeepCopy.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/HIP/Kokkos_HIP_DeepCopy.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/HIP/Kokkos_HIP_DeepCopy.cpp\nKokkos_HIP_Space.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/HIP/Kokkos_HIP_Space.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/HIP/Kokkos_HIP_Space.cpp\nKokkos_HIP_Instance.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/HIP/Kokkos_HIP_Instance.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/HIP/Kokkos_HIP_Instance.cpp\nKokkos_HIP_ZeroMemset.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/HIP/Kokkos_HIP_ZeroMemset.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/HIP/Kokkos_HIP_ZeroMemset.cpp\nLock_Array_HIP.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/tpls/desul/src/Lock_Array_HIP.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/tpls/desul/src/Lock_Array_HIP.cpp\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_THREADS), 1)\nKokkos_Threads_Instance.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/Threads/Kokkos_Threads_Instance.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/Threads/Kokkos_Threads_Instance.cpp\nKokkos_Threads_Spinwait.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/Threads/Kokkos_Threads_Spinwait.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/Threads/Kokkos_Threads_Spinwait.cpp\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_OPENMP), 1)\nKokkos_OpenMP.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/OpenMP/Kokkos_OpenMP.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/OpenMP/Kokkos_OpenMP.cpp\nKokkos_OpenMP_Instance.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/OpenMP/Kokkos_OpenMP_Instance.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/OpenMP/Kokkos_OpenMP_Instance.cpp\nifneq ($(KOKKOS_INTERNAL_DISABLE_DEPRECATED_CODE), 1)\nKokkos_OpenMP_Task.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/OpenMP/Kokkos_OpenMP_Task.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/OpenMP/Kokkos_OpenMP_Task.cpp\nendif\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_HPX), 1)\nKokkos_HPX.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/HPX/Kokkos_HPX.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/HPX/Kokkos_HPX.cpp\nifneq ($(KOKKOS_INTERNAL_DISABLE_DEPRECATED_CODE), 1)\nKokkos_HPX_Task.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/HPX/Kokkos_HPX_Task.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/HPX/Kokkos_HPX_Task.cpp\nendif\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_OPENMPTARGET), 1)\nKokkos_OpenMPTarget_Instance.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Instance.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/OpenMPTarget/Kokkos_OpenMPTarget_Instance.cpp\nKokkos_OpenMPTargetSpace.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/OpenMPTarget/Kokkos_OpenMPTargetSpace.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/OpenMPTarget/Kokkos_OpenMPTargetSpace.cpp\nendif\n\nifeq ($(KOKKOS_INTERNAL_USE_OPENACC), 1)\nKokkos_OpenACC.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/OpenACC/Kokkos_OpenACC.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/OpenACC/Kokkos_OpenACC.cpp\nKokkos_OpenACCSpace.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/OpenACC/Kokkos_OpenACCSpace.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/OpenACC/Kokkos_OpenACCSpace.cpp\nKokkos_OpenACC_Instance.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/OpenACC/Kokkos_OpenACC_Instance.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/OpenACC/Kokkos_OpenACC_Instance.cpp\nKokkos_OpenACC_SharedAllocationRecord.o: $(KOKKOS_CPP_DEPENDS) $(KOKKOS_PATH)/core/src/OpenACC/Kokkos_OpenACC_SharedAllocationRecord.cpp\n\t$(CXX) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(CXXFLAGS) -c $(KOKKOS_PATH)/core/src/OpenACC/Kokkos_OpenACC_SharedAllocationRecord.cpp\nendif\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.900390625,
          "content": "[![Kokkos](https://avatars2.githubusercontent.com/u/10199860?s=200&v=4)](https://kokkos.org)\n\n# Kokkos: Core Libraries\n\nKokkos Core implements a programming model in C++ for writing performance portable\napplications targeting all major HPC platforms. For that purpose it provides\nabstractions for both parallel execution of code and data management.\nKokkos is designed to target complex node architectures with N-level memory\nhierarchies and multiple types of execution resources. It currently can use\nCUDA, HIP, SYCL, HPX, OpenMP and C++ threads as backend programming models with several other\nbackends in development.\n\n**Kokkos Core is part of the [Kokkos C++ Performance Portability Programming Ecosystem](https://kokkos.org/about/abstract/).**\n\nKokkos is a [Linux Foundation](https://linuxfoundation.org) project.\n\n## Learning about Kokkos\n\nTo start learning about Kokkos:\n\n- [Kokkos Lectures](https://kokkos.org/kokkos-core-wiki/videolectures.html): they contain a mix of lecture videos and hands-on exercises covering all the important capabilities.\n\n- [Programming guide](https://kokkos.org/kokkos-core-wiki/programmingguide.html): contains in \"narrative\" form a technical description of the programming model, machine model, and the main building blocks like the Views and parallel dispatch.\n\n- [API reference](https://kokkos.org/kokkos-core-wiki/): organized by category, i.e., [core](https://kokkos.org/kokkos-core-wiki/API/core-index.html), [algorithms](https://kokkos.org/kokkos-core-wiki/API/algorithms-index.html) and [containers](https://kokkos.org/kokkos-core-wiki/API/containers-index.html) or, if you prefer, in [alphabetical order](https://kokkos.org/kokkos-core-wiki/API/alphabetical.html).\n\n- [Use cases and Examples](https://kokkos.org/kokkos-core-wiki/usecases.html): a serie of examples ranging from how to use Kokkos with MPI to Fortran interoperability.\n\n## Obtaining Kokkos\n\nThe latest release of Kokkos can be obtained from the [GitHub releases page](https://github.com/kokkos/kokkos/releases/latest).\n\nThe current release is [4.5.01](https://github.com/kokkos/kokkos/releases/tag/4.5.01).\n\n```bash\ncurl -OJ -L https://github.com/kokkos/kokkos/releases/download/4.5.01/kokkos-4.5.01.tar.gz\n# Or with wget\nwget https://github.com/kokkos/kokkos/releases/download/4.5.01/kokkos-4.5.01.tar.gz\n```\n\nTo clone the latest development version of Kokkos from GitHub:\n\n```bash\ngit clone -b develop  https://github.com/kokkos/kokkos.git\n```\n\n### Building Kokkos\n\nTo build Kokkos, you will need to have a C++ compiler that supports C++17 or later.\nAll requirements including minimum and primary tested compiler versions can be found [here](https://kokkos.org/kokkos-core-wiki/requirements.html).\n\nBuilding and installation instructions are described [here](https://kokkos.org/kokkos-core-wiki/building.html).\n\nYou can also install Kokkos using [Spack](https://spack.io/): `spack install kokkos`. [Available configuration options](https://packages.spack.io/package.html?name=kokkos) can be displayed using `spack info kokkos`.\n\n## For the complete documentation: [kokkos.org/kokkos-core-wiki/](https://kokkos.org/kokkos-core-wiki/)\n\n## Support\n\nFor questions find us on Slack: https://kokkosteam.slack.com or open a GitHub issue.\n\nFor non-public questions send an email to: *crtrott(at)sandia.gov*\n\n## Contributing\n\nPlease see [this page](https://kokkos.org/kokkos-core-wiki/contributing.html) for details on how to contribute.\n\n## Citing Kokkos\n\nPlease see the [following page](https://kokkos.org/kokkos-core-wiki/citation.html).\n\n## License\n\n[![License](https://img.shields.io/badge/License-Apache--2.0_WITH_LLVM--exception-blue)](https://spdx.org/licenses/LLVM-exception.html)\n\nUnder the terms of Contract DE-NA0003525 with NTESS,\nthe U.S. Government retains certain rights in this software.\n\nThe full license statement used in all headers is available [here](https://kokkos.org/kokkos-core-wiki/license.html) or\n[here](https://github.com/kokkos/kokkos/blob/develop/LICENSE).\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.5615234375,
          "content": "# Reporting Security Issues\n\nTo report a security issue, please email\n[lebrungrandt@ornl.gov](mailto:lebrungrandt@ornl.gov)\nand [crtrott@sandia.gov](mailto:crtrott@sandia.gov)\nwith a description of the issue, the steps you took to create the issue,\naffected versions, and, if known, mitigations for the issue.\n\nOur vulnerability management team will respond within 5 working days of your\nemail. If the issue is confirmed as a vulnerability, we will open a\nSecurity Advisory and acknowledge your contributions as part of it. This project\nfollows a 90 day disclosure timeline.\n"
        },
        {
          "name": "Spack.md",
          "type": "blob",
          "size": 12.5244140625,
          "content": "![Kokkos](https://avatars2.githubusercontent.com/u/10199860?s=200&v=4)\n\n# Kokkos Spack\n\nThis gives instructions for using Spack to install Kokkos and developing packages that depend on Kokkos.\n\n## Getting Started\n\nMake sure you have downloaded [Spack](https://github.com/spack/spack).\nThe easiest way to configure the Spack environment is:\n````bash\n> source spack/share/spack/setup-env.sh\n````\nwith other scripts available for other shells.\nYou can display information about how to install packages with:\n````bash\n> spack info kokkos\n````\nThis will print all the information about how to install Kokkos with Spack.\nFor detailed instructions on how to use Spack, see the [User Manual](https://spack.readthedocs.io).\n\n## Setting Up Spack: Avoiding the Package Cascade\nBy default, Spack doesn't 'see' anything on your system - including things like CMake and CUDA.\nThis can be limited by adding a `packages.yaml` to your `$HOME/.spack` folder that includes CMake (and CUDA, if applicable).  For example, your `packages.yaml` file could be:\n````yaml\npackages:\n  cuda:\n    buildable: false\n    externals:\n    - prefix: /opt/local/ppc64le-pwr8-nvidia/cuda/10.1.243\n      spec: cuda@10.1.243\n    - modules:\n      - cuda/10.1.243\n      spec: cuda@10.1.243\n  cmake:\n    buildable: false\n    externals:\n    - prefix: /opt/local/ppc64le/cmake/3.16.8\n      spec: cmake@3.16.8\n    - modules:\n      - cmake/3.16.8\n      spec: cmake@3.16.8\n````\nThe `modules` entry is only necessary on systems that require loading Modules (i.e. most DOE systems).\nThe `buildable` flag is useful to make sure Spack crashes if there is a path error,\nrather than having a type-o and Spack rebuilding everything because `cmake` isn't found.\nYou can verify your environment is set up correctly by running `spack graph` or `spack spec`.\nFor example:\n````bash\n> spack graph kokkos +cuda\no  kokkos\n|\\\no |  cuda\n /\no  cmake\n````\nWithout the existing CUDA and CMake being identified in `packages.yaml`, a (subset!) of the output would be:\n````bash\no  kokkos\n|\\\n| o  cmake\n| |\\\n| | | |\\\n| | | | | |\\\n| | | | | | | |\\\n| | | | | | | | | |\\\n| | | | | | | o | | |  libarchive\n| | | | | | | |\\ \\ \\ \\\n| | | | | | | | | |\\ \\ \\ \\\n| | | | | | | | | | | | |_|/\n| | | | | | | | | | | |/| |\n| | | | | | | | | | | | | o  curl\n| | |_|_|_|_|_|_|_|_|_|_|/|\n| |/| | | |_|_|_|_|_|_|_|/\n| | | | |/| | | | | | | |\n| | | | o | | | | | | | |  openssl\n| |/| | | | | | | | | | |\n| | | | | | | | | | o | |  libxml2\n| | |_|_|_|_|_|_|_|/| | |\n| | | | | | | | | | |\\ \\ \\\n| o | | | | | | | | | | | |  zlib\n|  / / / / / / / / / / / /\n| o | | | | | | | | | | |  xz\n|  / / / / / / / / / / /\n| o | | | | | | | | | |  rhash\n|  / / / / / / / / / /\n| | | | o | | | | | |  nettle\n| | | | |\\ \\ \\ \\ \\ \\ \\\n| | | o | | | | | | | |  libuv\n| | | | o | | | | | | |  autoconf\n| | |_|/| | | | | | | |\n| | | | |/ / / / / / /\n| o | | | | | | | | |  perl\n| o | | | | | | | | |  gdbm\n| o | | | | | | | | |  readline\n````\n\n## Configuring Kokkos as a Project Dependency\nSay you have a project \"SuperScience\" which needs to use Kokkos.\nIn your `package.py` file, you would generally include something like:\n````python\nclass SuperScience(CMakePackage):\n  ...\n  depends_on(\"kokkos\")\n````\nOften projects want to tweak behavior when using certain features, e.g.\n````python\n  depends_on(\"kokkos+cuda\", when=\"+cuda\")\n````\nif your project needs CUDA-specific logic to configure and build.\nThis illustrates the general principle in Spack of \"flowing-up\".\nA user requests a feature in the final app:\n````bash\n> spack install superscience+cuda\n````\nThis flows upstream to the Kokkos dependency, causing the `kokkos+cuda` variant to build.\nThe downstream app (SuperScience) tells the upstream app (Kokkos) how to build.\n\nBecause Kokkos is a performance portability library, it somewhat inverts this principle.\nKokkos \"flows-down\", telling your application how best to configure for performance.\nRather than a downstream app (SuperScience) telling the upstream (Kokkos) what variants to build,\na pre-built Kokkos should be telling the downstream app SuperScience what variants to use.\nKokkos works best when there is an \"expert\" configuration installed on your system.\nYour build should simply request `-DKokkos_ROOT=<BEST_KOKKOS_FOR_MY_SYSTEM>` and configure appropriately based on the Kokkos it finds.\n\nKokkos has many, many build variants.\nWhere possible, projects should only depend on a general Kokkos, not specific variants.\nWe recommend instead adding for each system you build on a Kokkos configuration to your `packages.yaml` file (usually found in `~/.spack` for specific users).\nFor a Xeon + Volta system, this could look like:\n````yaml\n kokkos:\n  variants: +cuda +openmp +cuda_lambda +wrapper ^cuda@10.1 cuda_arch=70\n  compiler: [gcc@7.2.0]\n````\nwhich gives the \"best\" Kokkos configuration as CUDA+OpenMP optimized for a Volta 70 architecture using CUDA 10.1.\nIt also enables support for CUDA Lambdas.\nThe `+wrapper` option tells Kokkos to build with the special `nvcc_wrapper` (more below).\nNote here that we use the built-in `cuda_arch` variant of Spack to specify the archicture.\nFor a Haswell system, we use\n````yaml\n kokkos:\n  variants: +openmp std=14 target=haswell\n  compiler: [intel@18]\n````\nwhich uses the built-in microarchitecture variants of Spack.\nConsult the Spack documentation for more details of Spack microarchitectures\nand CUDA architectures.\nSpack does not currently provide an AMD GPU microarchitecture option.\nIf building for HIP or an AMD GPU, Kokkos provides an `amd_gpu_arch` similar to `cuda_arch`.\n````yaml\n kokkos:\n  variants: +hip amd_gpu_arch=vega900\n````\n\nWithout an optimal default in your `packages.yaml` file, it is highly likely that the default Kokkos configuration you get will not be what you want.\nFor example, CUDA is not enabled by default (there is no easy logic to conditionally activate this for CUDA-enabled systems).\nIf you don't specify a CUDA build variant in a `packages.yaml` and you build your Kokkos-dependent project:\n````bash\n> spack install superscience\n````\nyou may end up just getting the default Kokkos (i.e. Serial).\nBefore running `spack install <package>` we recommend running `spack spec <package>` to confirm your dependency tree is correct.\nFor example, with Kokkos Kernels:\n````bash\nkokkos-kernels@3.0%gcc@8.3.0~blas build_type=RelWithDebInfo ~cblas~complex_double~complex_float~cublas~cuda cuda_arch=none ~cusparse~diy+double execspace_cuda=auto execspace_openmp=auto execspace_serial=auto execspace_threads=auto ~float~lapack~lapacke+layoutleft~layoutright memspace_cudaspace=auto memspace_cudauvmspace=auto +memspace_hostspace~mkl+offset_int+offset_size_t~openmp+ordinal_int~ordinal_int64_t~serial~superlu arch=linux-rhel7-skylake_avx512\n    ^cmake@3.16.2%gcc@8.3.0~doc+ncurses+openssl+ownlibs~qt arch=linux-rhel7-skylake_avx512\n        ^kokkos@3.0%gcc@8.3.0~aggressive_vectorization~amdavx~armv80~armv81~armv8_thunderx~armv8_tx2~bdw~bgq build_type=RelWithDebInfo ~carrizo~compiler_warnings+cuda cuda_arch=none +cuda_lambda~cuda_ldg_intrinsic~cuda_relocatable_device_code~cuda_uvm~debug~debug_bounds_check~debug_dualview_modify_check~deprecated_code~diy~epyc~examples~explicit_instantiation~fiji~gfx901~hpx~hpx_async_dispatch~hsw~hwloc~kaveri~kepler30~kepler32~kepler35~kepler37~knc~knl~maxwell50~maxwell52~maxwell53~memkind~numactl+openmp~pascal60~pascal61~power7~power8~power9+profiling~profiling_load_print~pthread~qthread~rocm~ryzen~serial~skx~snb std=14 ~tests~turing75~vega+volta70~volta72+wrapper~wsm arch=linux-rhel7-skylake_avx512\n                ^cuda@10.1%gcc@8.3.0 arch=linux-rhel7-skylake_avx512\n                        ^kokkos-nvcc-wrapper@old%gcc@8.3.0 build_type=RelWithDebInfo +mpi arch=linux-rhel7-skylake_avx512\n                                    ^openmpi@4.0.2%gcc@8.3.0~cuda+cxx_exceptions fabrics=none ~java~legacylaunchers~memchecker patches=073477a76bba780c67c36e959cd3ee6910743e2735c7e76850ffba6791d498e4 ~pmi schedulers=none ~sqlite3~thread_multiple+vt arch=linux-rhel7-skylake_avx512\n````\nThe output can be very verbose, but we can verify the expected `kokkos`:\n````bash\nkokkos@3.0%gcc@8.3.0~aggressive_vectorization~amdavx~armv80~armv81~armv8_thunderx~armv8_tx2~bdw~bgq build_type=RelWithDebInfo ~carrizo~compiler_warnings+cuda cuda_arch=none +cuda_lambda~cuda_ldg_intrinsic~cuda_relocatable_device_code~cuda_uvm~debug~debug_bounds_check~debug_dualview_modify_check~deprecated_code~diy~epyc~examples~explicit_instantiation~fiji~gfx901~hpx~hpx_async_dispatch~hsw~hwloc~kaveri~kepler30~kepler32~kepler35~kepler37~knc~knl~maxwell50~maxwell52~maxwell53~memkind~numactl+openmp~pascal60~pascal61~power7~power8~power9+profiling~profiling_load_print~pthread~qthread~rocm~ryzen~serial~skx~snb std=11 ~tests~turing75~vega+volta70~volta72+wrapper~wsm arch=linux-rhel7-skylake_avx512\n````\nWe see that we do have `+volta70` and `+wrapper`, e.g.\n\n### Spack Environments\nThe encouraged way to use Spack is with Spack environments ([more details here](https://spack-tutorial.readthedocs.io/en/latest/tutorial_environments.html#dealing-with-many-specs-at-once)).\nRather than installing packages one-at-a-time, you add packages to an environment.\nAfter adding all packages, you concretize and install them all.\nUsing environments, one can explicitly add a desired Kokkos for the environment, e.g.\n````bash\n> spack add kokkos +cuda +cuda_lambda +volta70\n> spack add my_project +my_variant\n> ...\n> spack install\n````\nAll packages within the environment will build against the CUDA-enabled Kokkos,\neven if they only request a default Kokkos.\n\n## NVCC Wrapper\nKokkos is a C++ project, but often builds for the CUDA backend.\nThis is particularly problematic with CMake. At this point, `nvcc` does not accept all the flags that normally get passed to a C++ compiler.\nKokkos provides `nvcc_wrapper` that identifies correctly as a C++ compiler to CMake and accepts C++ flags, but uses `nvcc` as the underlying compiler.\n`nvcc` itself also uses an underlying host compiler, e.g. GCC.\n\nIn Spack, the underlying host compiler is specified as below, e.g.:\n````bash\n> spack install package %gcc@8.0.0\n````\nThis is still valid for Kokkos. To use the special wrapper for CUDA builds, request a desired compiler and simply add the `+wrapper` variant.\n````bash\n> spack install kokkos +cuda +wrapper %gcc@7.2.0\n````\nDownstream projects depending on Kokkos need to override their compiler.\nKokkos provides the compiler in a `kokkos_cxx` variable,\nwhich points to either `nvcc_wrapper` when needed or the regular compiler otherwise.\nSpack projects already do this to use MPI compiler wrappers.\n````python\ndef cmake_args(self):\n  options = []\n  ...\n  options.append(\"-DCMAKE_CXX_COMPILER=%s\" % self.spec[\"kokkos\"].kokkos_cxx)\n  ...\n  return options\n````\nNote: `nvcc_wrapper` works with the MPI compiler wrappers.\nIf building your project with MPI, do NOT set your compiler to `nvcc_wrapper`.\nInstead set your compiler to `mpicxx` and `nvcc_wrapper` will be used under the hood.\n````python\ndef cmake_args(self):\n  options = []\n  ...\n  options.append(\"-DCMAKE_CXX_COMPILER=%s\" % self.spec[\"mpi\"].mpicxx)\n  ...\n  return options\n````\nTo accomplish this, `nvcc_wrapper` must depend on MPI (even though it uses no MPI).\nThis has the unfortunate consequence that Kokkos CUDA projects not using MPI will implicitly depend on MPI anyway.\nThis behavior is necessary for now, but will hopefully be removed later.\nWhen using environments, if MPI is not needed, you can remove the MPI dependency with:\n````bash\n> spack add kokkos-nvcc-wrapper ~mpi\n````\n\n## Developing With Spack\n\nSpack has historically been much more suited to *deployment* of mature packages than active testing or developing.\nHowever, recent features have improved support for development.\nFuture releases are likely to make this even easier and incorporate Git integration.\nThe most common commands will do a full build and install of the packages.\nIf doing development, you may wish to merely set up a build environment.\nThis allows you to modify the source and re-build.\nIn this case, you can stop after configuring.\nSuppose you have Kokkos checkout in the folder `kokkos-src`:\n````bash\n> spack dev-build -d kokkos-src -u cmake kokkos@develop +wrapper +openmp\n````\nThis sets up a development environment for you in `kokkos-src` which you can use (Bash example shown):\nNote: Always specify `develop` as the version when doing `dev-build`, except in rare cases.\nYou are usually developing a feature branch that will merge into `develop`,\nhence you are making a new `develop` branch.\n\n````bash\n> cd kokko-src\n> source spack-build-env.txt\n> cd spack-build\n> make\n````\nBefore sourcing the Spack development environment, you may wish to save your current environment:\n````bash\n> declare -px > myenv.sh\n````\nWhen done with Spack, you can then restore your original environment:\n````bash\n> source myenv.sh\n````\n"
        },
        {
          "name": "algorithms",
          "type": "tree",
          "content": null
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "containers",
          "type": "tree",
          "content": null
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "generate_makefile.bash",
          "type": "blob",
          "size": 18.7314453125,
          "content": "#!/bin/bash\n\nupdate_kokkos_devices() {\n   SEARCH_TEXT=\"*$1*\"\n   if [[ $KOKKOS_DEVICES == $SEARCH_TEXT ]]; then\n      echo kokkos devices already includes $SEARCH_TEXT\n   else\n      if [ \"$KOKKOS_DEVICES\" = \"\" ]; then\n         KOKKOS_DEVICES=\"$1\"\n         echo reseting kokkos devices to $KOKKOS_DEVICES\n      else\n         KOKKOS_DEVICES=\"${KOKKOS_DEVICES},$1\"\n         echo appending to kokkos devices $KOKKOS_DEVICES\n      fi\n   fi\n}\n\nget_kokkos_device_list() {\n  KOKKOS_DEVICE_CMD=\n  PARSE_DEVICES_LST=$(echo $KOKKOS_DEVICES | tr \",\" \"\\n\")\n  PARSE_DEVICES_LST=$(echo $PARSE_DEVICES_LST | tr \"_\" \"\\n\")\n  for DEVICE_ in $PARSE_DEVICES_LST\n  do\n     UC_DEVICE=$(echo $DEVICE_ | tr \"[:lower:]\" \"[:upper:]\")\n     if [ \"${UC_DEVICE}\" == \"CUDA\" ]; then\n       WITH_CUDA_BACKEND=ON\n     fi\n     if [ \"${UC_DEVICE}\" == \"HIP\" ]; then\n       WITH_HIP_BACKEND=ON\n     fi\n     if [ \"${UC_DEVICE}\" == \"OPENMPTARGET\" ]; then\n       WITH_OMPT_BACKEND=ON\n     fi\n     KOKKOS_DEVICE_CMD=\"-DKokkos_ENABLE_${UC_DEVICE}=ON ${KOKKOS_DEVICE_CMD}\"\n  done\n  if [ \"${WITH_CUDA_BACKEND}\" == \"ON\" ] && [ \"${WITH_HIP_BACKEND}\" == \"ON\" ]; then\n     echo \"Invalid configuration - Cuda and Hip cannot be simultaneously enabled\"\n     exit\n  fi\n  if [ \"${WITH_CUDA_BACKEND}\" == \"ON\" ] && [ \"${WITH_OMPT_BACKEND}\" == \"ON\" ]; then\n     echo \"Invalid configuration - Cuda and OpenMPTarget cannot be simultaneously enabled\"\n     exit\n  fi\n  if [ \"${WITH_OMPT_BACKEND}\" == \"ON\" ] && [ \"${WITH_HIP_BACKEND}\" == \"ON\" ]; then\n     echo \"Invalid configuration - OpenMPTarget and Hip cannot be simultaneously enabled\"\n     exit\n  fi\n}\n\nget_kokkos_arch_list() {\n  KOKKOS_ARCH_CMD=\n  PARSE_ARCH_LST=$(echo $KOKKOS_ARCH | tr \",\" \"\\n\")\n  for ARCH_ in $PARSE_ARCH_LST\n  do\n     UC_ARCH=$(echo $ARCH_ | tr \"[:lower:]\" \"[:upper:]\")\n     KOKKOS_ARCH_CMD=\"-DKokkos_ARCH_${UC_ARCH}=ON ${KOKKOS_ARCH_CMD}\"\n  done\n}\n\nget_kokkos_cuda_option_list() {\n  echo parsing KOKKOS_CUDA_OPTIONS=$KOKKOS_CUDA_OPTIONS\n  KOKKOS_CUDA_OPTION_CMD=\n  PARSE_CUDA_LST=$(echo $KOKKOS_CUDA_OPTIONS | tr \",\" \"\\n\")\n  for CUDA_ in $PARSE_CUDA_LST\n  do\n     CUDA_OPT_NAME=\n     if [ \"${CUDA_}\" == \"enable_lambda\" ]; then\n        CUDA_OPT_NAME=CUDA_LAMBDA\n     elif  [ \"${CUDA_}\" == \"rdc\" ]; then\n        CUDA_OPT_NAME=CUDA_RELOCATABLE_DEVICE_CODE\n     elif  [ \"${CUDA_}\" == \"force_uvm\" ]; then\n        CUDA_OPT_NAME=CUDA_UVM\n     else\n        echo \"${CUDA_} is not a valid cuda options...\"\n     fi\n     if [ \"${CUDA_OPT_NAME}\" != \"\" ]; then\n        KOKKOS_CUDA_OPTION_CMD=\"-DKokkos_ENABLE_${CUDA_OPT_NAME}=ON ${KOKKOS_CUDA_OPTION_CMD}\"\n     fi\n  done\n}\n\nget_kokkos_hip_option_list() {\n  echo parsing KOKKOS_HIP_OPTIONS=$KOKKOS_HIP_OPTIONS\n  KOKKOS_HIP_OPTION_CMD=\n  PARSE_HIP_LST=$(echo $KOKKOS_HIP_OPTIONS | tr \",\" \"\\n\")\n  for HIP_ in $PARSE_HIP_LST\n  do\n     HIP_OPT_NAME=\n     if  [ \"${HIP_}\" == \"rdc\" ]; then\n        HIP_OPT_NAME=HIP_RELOCATABLE_DEVICE_CODE\n     else\n        echo \"${HIP_} is not a valid hip option...\"\n     fi\n     if [ \"${HIP_OPT_NAME}\" != \"\" ]; then\n        KOKKOS_HIP_OPTION_CMD=\"-DKokkos_ENABLE_${HIP_OPT_NAME}=ON ${KOKKOS_HIP_OPTION_CMD}\"\n     fi\n  done\n}\n\nget_kokkos_ompt_option_list() {\n  echo parsing KOKKOS_OMPT_OPTIONS=$KOKKOS_OMPT_OPTIONS\n  KOKKOS_OMPT_OPTION_CMD=\n  PARSE_OMPT_LST=$(echo $KOKKOS_OMPT_OPTIONS | tr \",\" \"\\n\")\n# Stub for eventual OpenMPTarget options\n#  for OMPT_ in $PARSE_OMPT_LST\n#  do\n#     OMPT_OPT_NAME=\n#     if  [ \"${OMPT_}\" == \"?\" ]; then\n#        OMPT_OPT_NAME=OMPT_?\n#     else\n#        echo \"${OMPT_} is not a valid openmptarget option...\"\n#     fi\n#     if [ \"${OMPT_OPT_NAME}\" != \"\" ]; then\n#        KOKKOS_OMPT_OPTION_CMD=\"-DKokkos_ENABLE_${OMPT_OPT_NAME}=ON ${KOKKOS_OMPT_OPTION_CMD}\"\n#     fi\n#  done\n}\n\nget_kokkos_option_list() {\n  echo parsing KOKKOS_OPTIONS=$KOKKOS_OPTIONS\n  KOKKOS_OPTION_CMD=\n  PARSE_OPTIONS_LST=$(echo $KOKKOS_OPTIONS | tr \",\" \"\\n\")\n  for OPT_ in $PARSE_OPTIONS_LST\n  do\n     UC_OPT_=$(echo $OPT_ | tr \"[:lower:]\" \"[:upper:]\")\n     if [[ \"$UC_OPT_\" == *DISABLE* ]]; then\n        FLIP_OPT_=${UC_OPT_/DISABLE/ENABLE}\n        KOKKOS_OPTION_CMD=\"-DKokkos_${FLIP_OPT_}=OFF ${KOKKOS_OPTION_CMD}\"\n     elif [[ \"$UC_OPT_\" == *ENABLE* ]]; then\n        KOKKOS_OPTION_CMD=\"-DKokkos_${UC_OPT_}=ON ${KOKKOS_OPTION_CMD}\"\n     else\n        KOKKOS_OPTION_CMD=\"-DKokkos_ENABLE_${UC_OPT_}=ON ${KOKKOS_OPTION_CMD}\"\n     fi\n  done\n}\n\ndisplay_help_text() {\n\n      echo \"Kokkos configure options:\"\n      echo \"\"\n      echo \"--kokkos-path=/Path/To/Kokkos:        Path to the Kokkos root directory.\"\n      echo \"--prefix=/Install/Path:               Path to install the Kokkos library.\"\n      echo \"\"\n      echo \"--with-cuda[=/Path/To/Cuda]:          Enable Cuda and set path to Cuda Toolkit.\"\n      echo \"--with-hip[=/Path/To/Hip]:            Enable Hip and set path to ROCM Toolkit.\"\n      echo \"--with-openmptarget:                  Enable OpenMPTarget backend.\"\n      echo \"--with-sycl:                          Enable Sycl backend.\"\n      echo \"--with-openmp:                        Enable OpenMP backend.\"\n      echo \"--with-threads:                       Enable Threads backend.\"\n      echo \"--with-serial:                        Enable Serial backend.\"\n      echo \"--with-devices:                       Explicitly add a set of backends.\"\n      echo \"\"\n      echo \"--arch=[OPT]:  Set target architectures. Options are:\"\n      echo \"               [AMD: CPU]\"\n      echo \"                 AMDAVX          = AMD CPU\"\n      echo \"                 ZEN             = AMD Zen-Core CPU\"\n      echo \"                 ZEN2            = AMD Zen2-Core CPU\"\n      echo \"                 ZEN3            = AMD Zen3-Core CPU\"\n      echo \"                 ZEN4            = AMD Zen4-Core CPU\"\n      echo \"               [AMD: GPU]\"\n      echo \"                 AMD_GFX906      = AMD GPU MI50/MI60 GFX906\"\n      echo \"                 AMD_GFX908      = AMD GPU MI100 GFX908\"\n      echo \"                 AMD_GFX90A      = AMD GPU MI200 GFX90A\"\n      echo \"                 AMD_GFX940      = AMD GPU MI300 GFX940\"\n      echo \"                 AMD_GFX942      = AMD GPU MI300 GFX942\"\n      echo \"                 AMD_GFX1030     = AMD GPU V620/W6800 GFX1030\"\n      echo \"                 AMD_GFX1100     = AMD GPU RX 7900 XT(X) GFX1100\"\n      echo \"                 AMD_GFX1103     = AMD APU Radeon 740M/760M/780M/880M/890M GFX1103\"\n      echo \"               [ARM]\"\n      echo \"                 ARMV80          = ARMv8.0 Compatible CPU\"\n      echo \"                 ARMV81          = ARMv8.1 Compatible CPU\"\n      echo \"                 ARMV8_THUNDERX  = ARMv8 Cavium ThunderX CPU\"\n      echo \"                 ARMV8_THUNDERX2 = ARMv8 Cavium ThunderX2 CPU\"\n      echo \"               [IBM]\"\n      echo \"                 Power8          = IBM POWER8 CPUs\"\n      echo \"                 Power9          = IBM POWER9 CPUs\"\n      echo \"               [Intel]\"\n      echo \"                 SNB             = Intel Sandy/Ivy Bridge CPUs\"\n      echo \"                 HSW             = Intel Haswell CPUs\"\n      echo \"                 BDW             = Intel Broadwell Xeon E-class CPUs\"\n      echo \"                 SKX             = Intel Sky Lake Xeon E-class HPC CPUs (AVX512)\"\n      echo \"                 ICX             = Intel Ice Lake CPUs (AVX512)\"\n      echo \"               [Intel Xeon Phi]\"\n      echo \"                 KNC             = Intel Knights Corner Xeon Phi\"\n      echo \"                 KNL             = Intel Knights Landing Xeon Phi\"\n      echo \"               [Intel: GPU]\"\n      echo \"                 INTEL_GEN       = SPIR64-based devices, e.g. Intel GPUs, using JIT\"\n      echo \"                 INTEL_DG1       = Intel Iris XeMAX GPU\"\n      echo \"                 INTEL_GEN9      = Intel GPU Gen9\"\n      echo \"                 INTEL_GEN11     = Intel GPU Gen11\"\n      echo \"                 INTEL_GEN12LP   = Intel GPU Gen12LP\"\n      echo \"                 INTEL_XEHP      = Intel GPU Xe-HP\"\n      echo \"                 INTEL_PVC       = Intel GPU Ponte Vecchio\"\n      echo \"               [NVIDIA]\"\n      echo \"                 Kepler30        = NVIDIA Kepler generation CC 3.0\"\n      echo \"                 Kepler32        = NVIDIA Kepler generation CC 3.2\"\n      echo \"                 Kepler35        = NVIDIA Kepler generation CC 3.5\"\n      echo \"                 Kepler37        = NVIDIA Kepler generation CC 3.7\"\n      echo \"                 Maxwell50       = NVIDIA Maxwell generation CC 5.0\"\n      echo \"                 Maxwell52       = NVIDIA Maxwell generation CC 5.2\"\n      echo \"                 Maxwell53       = NVIDIA Maxwell generation CC 5.3\"\n      echo \"                 Pascal60        = NVIDIA Pascal generation CC 6.0\"\n      echo \"                 Pascal61        = NVIDIA Pascal generation CC 6.1\"\n      echo \"                 Volta70         = NVIDIA Volta generation CC 7.0\"\n      echo \"                 Volta72         = NVIDIA Volta generation CC 7.2\"\n      echo \"                 Ampere80        = NVIDIA Ampere generation CC 8.0\"\n      echo \"                 Ampere86        = NVIDIA Ampere generation CC 8.6\"\n      echo \"\"\n      echo \"--compiler=/Path/To/Compiler  Set the compiler.\"\n      echo \"--debug,-dbg:                 Enable Debugging.\"\n      echo \"--boundscheck:                Enable Kokkos_ENABLE_DEBUG_BOUNDS_CHECK to check View accesses within bounds.\"\n      echo \"--disable-tests               Disable compilation of unit tests (enabled by default)\"\n      echo \"--deprecated-code             Enable deprecated code (disabled by default)\"\n      echo \"--deprecated-code-warnings    Enable deprecated code warnings (disabled by default)\"\n      echo \"--cxxflags=[FLAGS]            Overwrite CXXFLAGS for library build and test\"\n      echo \"                                build.  This will still set certain required\"\n      echo \"                                flags via KOKKOS_CXXFLAGS (such as -fopenmp,\"\n      echo \"                                -std=c++17, etc.).\"\n      echo \"--cxxstandard=[FLAGS]         Set CMAKE_CXX_STANDARD for library build and test\"\n      echo \"                                17 (default), 1z, 20, 2a, 23, 2b\"\n      echo \"--ldflags=[FLAGS]             Overwrite LDFLAGS for library build and test\"\n      echo \"                                build. This will still set certain required\"\n      echo \"                                flags via KOKKOS_LDFLAGS (such as -fopenmp,\"\n      echo \"                                -lpthread, etc.).\"\n      echo \"--with-gtest=/Path/To/Gtest:  Set path to gtest.  (Used in unit and performance\"\n      echo \"                                tests.)\"\n      echo \"--with-hwloc=/Path/To/Hwloc:  Set path to hwloc library.\"\n      echo \"--with-options=[OPT]:         Additional options to Kokkos:\"\n      echo \"                                compiler_warnings\"\n      echo \"                                aggressive_vectorization = add ivdep on loops\"\n      echo \"                                disable_profiling = do not compile with profiling hooks\"\n      echo \"                                \"\n      echo \"--with-cuda-options=[OPT]:    Additional options to CUDA:\"\n      echo \"                                force_uvm, use_ldg, enable_lambda, rdc\"\n      echo \"--with-hip-options=[OPT]:     Additional options to HIP:\"\n      echo \"                                rdc\"\n      echo \"--with-hpx-options=[OPT]:     Additional options to HPX:\"\n      echo \"                                enable_async_dispatch\"\n      echo \"--gcc-toolchain=/Path/To/GccRoot:  Set the gcc toolchain to use with clang (e.g. /usr)\" \n      echo \"--cmake-flags=[CMAKE Command options]:  Set cmake options not handled by script\"\n      echo \"--make-j=[NUM]:               DEPRECATED: call make with appropriate\"\n      echo \"                                -j flag\"\n\n}\n\nKOKKOS_DO_TESTS=ON\nKOKKOS_DO_EXAMPLES=OFF\n\n# For tracking if Cuda and Hip devices are enabled simultaneously\nWITH_CUDA_BACKEND=OFF\nWITH_HIP_BACKEND=OFF\nWITH_OMPT_BACKEND=OFF\n\nKOKKOS_DEPRECATED_CODE=OFF\nKOKKOS_DEPRECATED_CODE_WARNINGS=OFF\n\nwhile [[ $# > 0 ]]\ndo\n  key=\"$1\"\n\n  case $key in\n    --kokkos-path*)\n      KOKKOS_PATH=\"${key#*=}\"\n      ;;\n    --hpx-path*)\n      HPX_PATH=\"${key#*=}\"\n      ;;\n    --prefix*)\n      PREFIX=\"${key#*=}\"\n      ;;\n    --with-cuda)\n      update_kokkos_devices Cuda\n      CUDA_PATH_NVCC=$(command -v nvcc)\n      CUDA_PATH=${CUDA_PATH_NVCC%/bin/nvcc}\n      ;;\n    # Catch this before '--with-cuda*'\n    --with-cuda-options*)\n      KOKKOS_CUDA_OPTIONS=\"${key#*=}\"\n      ;;\n    --with-cuda*)\n      update_kokkos_devices Cuda\n      CUDA_PATH=\"${key#*=}\"\n      ;;\n    --with-hip)\n      update_kokkos_devices Hip\n      HIP_PATH_HIPCC=$(command -v hipcc)\n      HIP_PATH=${HIP_PATH_HIPCC%/bin/hipcc}\n      ;;\n    # Catch this before '--with-hip*'\n    --with-hip-options*)\n      KOKKOS_HIP_OPTIONS=\"${key#*=}\"\n      ;;\n    --with-hip*)\n      update_kokkos_devices Hip\n      HIP_PATH=\"${key#*=}\"\n      ;;\n    --with-openmptarget)\n      update_kokkos_devices OpenMPTarget\n      ;;\n    --with-openmptarget-options*)\n      KOKKOS_OMPT_OPTIONS=\"${key#*=}\"\n      ;;\n    --with-openmp)\n      update_kokkos_devices OpenMP\n      ;;\n    --with-sycl)\n      update_kokkos_devices Sycl\n      ;;\n    --with-threads)\n      update_kokkos_devices Threads\n      ;;\n    --with-pthread)\n      update_kokkos_devices Pthread\n      echo \"warning: The --with-pthread option is deprecated. Use --with-threads instead!\"\n      ;;\n    --with-serial)\n      update_kokkos_devices Serial\n      ;;\n    --with-hpx-options*)\n      KOKKOS_HPX_OPT=\"${key#*=}\"\n      ;;\n    --with-hpx*)\n      update_kokkos_devices HPX\n      if [ -z \"$HPX_PATH\" ]; then\n        HPX_PATH=\"${key#*=}\"\n      fi\n      ;;\n    --with-devices*)\n      DEVICES=\"${key#*=}\"\n      PARSE_DEVICES=$(echo $DEVICES | tr \",\" \"\\n\")\n      for DEVICE_ in $PARSE_DEVICES\n      do\n         update_kokkos_devices $DEVICE_\n      done\n      ;;\n    --with-gtest*)\n      GTEST_PATH=\"${key#*=}\"\n      ;;\n    --with-hwloc*)\n      KOKKOS_HWLOC=ON\n      HWLOC_PATH=\"${key#*=}\"\n      ;;\n    --arch*)\n      KOKKOS_ARCH=\"${key#*=}\"\n      ;;\n    --cxxflags*)\n      KOKKOS_CXXFLAGS=\"${key#*=}\"\n      KOKKOS_CXXFLAGS=${KOKKOS_CXXFLAGS//,/ }\n      ;;\n    --cxxstandard*)\n      KOKKOS_CXX_STANDARD=\"${key#*=}\"\n      ;;\n    --ldflags*)\n      KOKKOS_LDFLAGS=\"${key#*=}\"\n      ;;\n    --debug|-dbg)\n      KOKKOS_DEBUG=ON\n      ;;\n    --boundscheck)\n      KOKKOS_BOUNDS_CHECK=ON\n      ;;\n    --cmake-flags*)\n      PASSTHRU_CMAKE_FLAGS=\"${key#*=}\"\n      ;;\n    --make-j*)\n      echo \"Warning: ${key} is deprecated\"\n      echo \"Call make with appropriate -j flag\"\n      ;;\n    --disable-tests)\n      KOKKOS_DO_TESTS=OFF\n      ;;\n    --deprecated-code)\n      KOKKOS_DEPRECATED_CODE=ON\n      ;;\n    --deprecated-code-warnings)\n      KOKKOS_DEPRECATED_CODE_WARNINGS=ON\n      ;;\n    --no-examples)\n      KOKKOS_DO_EXAMPLES=OFF\n      ;;\n    --enable-examples)\n      KOKKOS_DO_EXAMPLES=ON\n      ;;\n    --compiler*)\n      COMPILER=\"${key#*=}\"\n      CNUM=$(command -v ${COMPILER} 2>&1 >/dev/null | grep -c \"no ${COMPILER}\")\n      if [ ${CNUM} -gt 0 ]; then\n        echo \"Invalid compiler by --compiler command: '${COMPILER}'\"\n        exit\n      fi\n      if [[ ! -n  ${COMPILER} ]]; then\n        echo \"Empty compiler specified by --compiler command.\"\n        exit\n      fi\n      CNUM=$(command -v ${COMPILER} | grep -c ${COMPILER})\n      if [ ${CNUM} -eq 0 ]; then\n        echo \"Invalid compiler by --compiler command: '${COMPILER}'\"\n        exit\n      fi\n      # ... valid compiler, ensure absolute path set\n      WCOMPATH=$(command -v $COMPILER)\n      COMPDIR=$(dirname $WCOMPATH)\n      COMPNAME=$(basename $WCOMPATH)\n      COMPILER=${COMPDIR}/${COMPNAME}\n      ;;\n    --with-options*)\n      KOKKOS_OPTIONS=\"${key#*=}\"\n      ;;\n    --gcc-toolchain*)\n      KOKKOS_GCC_TOOLCHAIN=\"${key#*=}\"\n      ;;\n    --help)\n      display_help_text\n      exit 0\n      ;;\n    *)\n      echo \"warning: ignoring unknown option $key\"\n      ;;\n  esac\n\n  shift\ndone\n\nif [ \"$COMPILER\" == \"\" ]; then\n    COMPILER_CMD=\nelse\n    COMPILER_CMD=-DCMAKE_CXX_COMPILER=$COMPILER\nfi\n\nif [ \"$KOKKOS_DEBUG\" == \"ON\" ]; then\n    KOKKOS_DEBUG_CMD=\"-DCMAKE_BUILD_TYPE=DEBUG -DKokkos_ENABLE_DEBUG=ON\"\nelse\n    KOKKOS_DEBUG_CMD=-DCMAKE_BUILD_TYPE=RELEASE\nfi\n\nif [ \"$KOKKOS_BOUNDS_CHECK\" == \"ON\" ]; then\n    KOKKOS_BC_CMD=-DKokkos_ENABLE_DEBUG_BOUNDS_CHECK=ON\nfi\n\nif [ \"$KOKKOS_HWLOC\" == \"ON\" ]; then\n    KOKKOS_HWLOC_CMD=-DKokkos_ENABLE_HWLOC=ON\n    if [ \"$HWLOC_PATH\" != \"\" ]; then\n      KOKKOS_HWLOC_PATH_CMD=-DHWLOC_ROOT=$HWLOC_PATH\n    fi\nelse\n    KOKKOS_HWLOC_CMD=\nfi\n\nif [ ! -e ${KOKKOS_PATH}/CMakeLists.txt ]; then\n   if [ \"${KOKKOS_PATH}\" == \"\" ]; then\n      CM_SCRIPT=$0\n      KOKKOS_PATH=`dirname $CM_SCRIPT`\n      if [ ! -e ${KOKKOS_PATH}/CMakeLists.txt ]; then\n         echo \"${KOKKOS_PATH} repository appears to not be complete.  please verify and try again\"\n         exit 0\n      fi\n   else\n      echo \"KOKKOS_PATH does not appear to be set properly. please specify in location of CMakeLists.txt\"\n      display_help_text\n      exit 0\n   fi\nfi\n\nget_kokkos_device_list\nget_kokkos_option_list\nget_kokkos_arch_list\nget_kokkos_cuda_option_list\nget_kokkos_hip_option_list\nget_kokkos_ompt_option_list\n\n## if HPX is enabled, we need to enforce cxx standard = 14\nif [[ ${KOKKOS_DEVICE_CMD} == *Kokkos_ENABLE_HPX* ]]; then\n   if [ \"${KOKKOS_CXX_STANDARD}\" == \"\" ] || [ ${#KOKKOS_CXX_STANDARD} -lt 14 ]; then\n      echo CXX Standard must be 14 or higher for HPX to work.\n      KOKKOS_CXX_STANDARD=14\n   fi\nfi\n\nif [ \"$KOKKOS_CXX_STANDARD\" == \"\" ]; then\n    STANDARD_CMD=\nelse\n    STANDARD_CMD=-DCMAKE_CXX_STANDARD=${KOKKOS_CXX_STANDARD}\nfi\n\nif [[ ${COMPILER} == *clang* ]]; then\n   gcc_path=$(which g++ | awk --field-separator='/bin/g++' '{printf $1}' )\n   KOKKOS_CXXFLAGS=\"${KOKKOS_CXXFLAGS} --gcc-toolchain=${gcc_path}\"\n\n   if [ ! \"${CUDA_PATH}\" == \"\" ]; then\n      KOKKOS_CXXFLAGS=\"${KOKKOS_CXXFLAGS} --cuda-path=${CUDA_PATH}\"\n   fi\nfi\n\necho cmake $COMPILER_CMD  -DCMAKE_CXX_FLAGS=\"${KOKKOS_CXXFLAGS}\" -DCMAKE_EXE_LINKER_FLAGS=\"${KOKKOS_LDFLAGS}\" -DCMAKE_INSTALL_PREFIX=${PREFIX} ${KOKKOS_DEVICE_CMD} ${KOKKOS_ARCH_CMD} -DKokkos_ENABLE_TESTS=${KOKKOS_DO_TESTS} -DKokkos_ENABLE_EXAMPLES=${KOKKOS_DO_EXAMPLES} ${KOKKOS_OPTION_CMD} ${KOKKOS_CUDA_OPTION_CMD} ${KOKKOS_HIP_OPTION_CMD} -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_CXX_EXTENSIONS=OFF ${STANDARD_CMD} ${KOKKOS_DEBUG_CMD} ${KOKKOS_BC_CMD} ${KOKKOS_HWLOC_CMD} ${KOKKOS_HWLOC_PATH_CMD} -DKokkos_ENABLE_DEPRECATION_WARNINGS=${KOKKOS_DEPRECATED_CODE_WARNINGS} -DKokkos_ENABLE_DEPRECATED_CODE_4=${KOKKOS_DEPRECATED_CODE} ${KOKKOS_PATH}\ncmake $COMPILER_CMD  -DCMAKE_CXX_FLAGS=\"${KOKKOS_CXXFLAGS//\\\"}\" -DCMAKE_EXE_LINKER_FLAGS=\"${KOKKOS_LDFLAGS//\\\"}\" -DCMAKE_INSTALL_PREFIX=${PREFIX} ${KOKKOS_DEVICE_CMD} ${KOKKOS_ARCH_CMD} -DKokkos_ENABLE_TESTS=${KOKKOS_DO_TESTS} -DKokkos_ENABLE_EXAMPLES=${KOKKOS_DO_EXAMPLES} ${KOKKOS_OPTION_CMD} ${KOKKOS_CUDA_OPTION_CMD} ${KOKKOS_HIP_OPTION_CMD} -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_CXX_EXTENSIONS=OFF ${STANDARD_CMD} ${KOKKOS_DEBUG_CMD} ${KOKKOS_BC_CMD} ${KOKKOS_HWLOC_CMD} ${KOKKOS_HWLOC_PATH_CMD} ${PASSTHRU_CMAKE_FLAGS} -DKokkos_ENABLE_DEPRECATION_WARNINGS=${KOKKOS_DEPRECATED_CODE_WARNINGS} -DKokkos_ENABLE_DEPRECATED_CODE_4=${KOKKOS_DEPRECATED_CODE} ${KOKKOS_PATH}\n"
        },
        {
          "name": "gnu_generate_makefile.bash",
          "type": "blob",
          "size": 17.0107421875,
          "content": "#!/bin/bash\n\nKOKKOS_DEVICES=\"\"\n\nwhile [[ $# > 0 ]]\ndo\n  key=\"$1\"\n\n  case $key in\n    --kokkos-path*)\n      KOKKOS_PATH=\"${key#*=}\"\n      ;;\n    --hpx-path*)\n      HPX_PATH=\"${key#*=}\"\n      ;;\n    --prefix*)\n      PREFIX=\"${key#*=}\"\n      ;;\n    --with-cuda)\n      KOKKOS_DEVICES=\"${KOKKOS_DEVICES},Cuda\"\n      CUDA_PATH_NVCC=$(command -v nvcc)\n      CUDA_PATH=${CUDA_PATH_NVCC%/bin/nvcc}\n      ;;\n    # Catch this before '--with-cuda*'\n    --with-cuda-options*)\n      KOKKOS_CUDA_OPT=\"${key#*=}\"\n      ;;\n    --with-cuda*)\n      KOKKOS_DEVICES=\"${KOKKOS_DEVICES},Cuda\"\n      CUDA_PATH=\"${key#*=}\"\n      ;;\n    --with-hip)\n      KOKKOS_DEVICES=\"${KOKKOS_DEVICES},Hip\"\n      HIP_PATH_HIPCC=$(command -v hipcc)\n      HIP_PATH=${HIP_PATH_HIPCC%/bin/hipcc}\n      ;;\n    # Catch this before '--with-hip*'\n    --with-hip-options*)\n      KOKKOS_HIP_OPT=\"${key#*=}\"\n      ;;\n    --with-hip*)\n      KOKKOS_DEVICES=\"${KOKKOS_DEVICES},Hip\"\n      HIP_PATH=\"${key#*=}\"\n      ;;\n    --with-openmp)\n      KOKKOS_DEVICES=\"${KOKKOS_DEVICES},OpenMP\"\n      ;;\n    --with-pthread)\n      KOKKOS_DEVICES=\"${KOKKOS_DEVICES},Pthread\"\n      echo \"warning: The --with-pthread option is deprecated. Use --with-threads instead!\"\n      ;;\n    --with-threads)\n      KOKKOS_DEVICES=\"${KOKKOS_DEVICES},Threads\"\n      ;;\n    --with-serial)\n      KOKKOS_DEVICES=\"${KOKKOS_DEVICES},Serial\"\n      ;;\n    --with-hpx-options*)\n      KOKKOS_HPX_OPT=\"${key#*=}\"\n      ;;\n    --with-hpx*)\n      KOKKOS_DEVICES=\"${KOKKOS_DEVICES},HPX\"\n      if [ -z \"$HPX_PATH\" ]; then\n        HPX_PATH=\"${key#*=}\"\n      fi\n      ;;\n    --with-devices*)\n      DEVICES=\"${key#*=}\"\n      KOKKOS_DEVICES=\"${KOKKOS_DEVICES},${DEVICES}\"\n      ;;\n    --with-gtest*)\n      GTEST_PATH=\"${key#*=}\"\n      ;;\n    --with-hwloc*)\n      HWLOC_PATH=\"${key#*=}\"\n      ;;\n    --arch*)\n      KOKKOS_ARCH=\"${key#*=}\"\n      ;;\n    --cxxflags*)\n      CXXFLAGS=\"${key#*=}\"\n      ;;\n    --cxxstandard*)\n      KOKKOS_CXX_STANDARD=\"${key#*=}\"\n      ;;\n    --ldflags*)\n      LDFLAGS=\"${key#*=}\"\n      ;;\n    --debug|-dbg)\n      KOKKOS_DEBUG=yes\n      ;;\n    --make-j*)\n      echo \"Warning: ${key} is deprecated\"\n      echo \"Call make with appropriate -j flag\"\n      ;;\n    --compiler*)\n      COMPILER=\"${key#*=}\"\n      CNUM=$(command -v ${COMPILER} 2>&1 >/dev/null | grep -c \"no ${COMPILER}\")\n      if [ ${CNUM} -gt 0 ]; then\n        echo \"Invalid compiler by --compiler command: '${COMPILER}'\"\n        exit\n      fi\n      if [[ ! -n  ${COMPILER} ]]; then\n        echo \"Empty compiler specified by --compiler command.\"\n        exit\n      fi\n      CNUM=$(command -v ${COMPILER} | grep -c ${COMPILER})\n      if [ ${CNUM} -eq 0 ]; then\n        echo \"Invalid compiler by --compiler command: '${COMPILER}'\"\n        exit\n      fi\n      # ... valid compiler, ensure absolute path set \n      WCOMPATH=$(command -v $COMPILER)\n      COMPDIR=$(dirname $WCOMPATH)\n      COMPNAME=$(basename $WCOMPATH)\n      COMPILER=${COMPDIR}/${COMPNAME}\n      ;;\n    --with-options*)\n      KOKKOS_OPT=\"${key#*=}\"\n      ;;\n    --gcc-toolchain*)\n      KOKKOS_GCC_TOOLCHAIN=\"${key#*=}\"\n      ;;\n    --help)\n      echo \"Kokkos configure options:\"\n      echo \"\"\n      echo \"--kokkos-path=/Path/To/Kokkos:        Path to the Kokkos root directory.\"\n      echo \"--prefix=/Install/Path:               Path to install the Kokkos library.\"\n      echo \"\"\n      echo \"--with-cuda[=/Path/To/Cuda]:          Enable Cuda and set path to Cuda Toolkit.\"\n      echo \"--with-openmp:                        Enable OpenMP backend.\"\n      echo \"--with-threads:                       Enable Threads backend.\"\n      echo \"--with-serial:                        Enable Serial backend.\"\n      echo \"--with-devices:                       Explicitly add a set of backends.\"\n      echo \"\"\n      echo \"--arch=[OPT]:  Set target architectures. Options are:\"\n      echo \"               [AMD]\"\n      echo \"                 AMDAVX          = AMD CPU\"\n      echo \"                 ZEN             = AMD Zen-Core CPU\"\n      echo \"                 ZEN2            = AMD Zen2-Core CPU\"\n      echo \"                 ZEN3            = AMD Zen3-Core CPU\"\n      echo \"                 ZEN4            = AMD Zen4-Core CPU\"\n      echo \"               [ARM]\"\n      echo \"                 ARMv80          = ARMv8.0 Compatible CPU\"\n      echo \"                 ARMv81          = ARMv8.1 Compatible CPU\"\n      echo \"                 ARMv8-ThunderX  = ARMv8 Cavium ThunderX CPU\"\n      echo \"                 ARMv8-TX2       = ARMv8 Cavium ThunderX2 CPU\"\n      echo \"               [IBM]\"\n      echo \"                 Power8          = IBM POWER8 CPUs\"\n      echo \"                 Power9          = IBM POWER9 CPUs\"\n      echo \"               [Intel]\"\n      echo \"                 SNB             = Intel Sandy/Ivy Bridge CPUs\"\n      echo \"                 HSW             = Intel Haswell CPUs\"\n      echo \"                 BDW             = Intel Broadwell Xeon E-class CPUs\"\n      echo \"                 SKX             = Intel Sky Lake Xeon E-class HPC CPUs (AVX512)\"\n      echo \"                 ICX             = Intel Ice Lake CPUs (AVX512)\"\n      echo \"               [Intel Xeon Phi]\"\n      echo \"                 KNC             = Intel Knights Corner Xeon Phi\"\n      echo \"                 KNL             = Intel Knights Landing Xeon Phi\"\n      echo \"               [Intel: GPU]\"\n      echo \"                 INTEL_GEN       = SPIR64-based devices, e.g. Intel GPUs, using JIT\"\n      echo \"                 INTEL_DG1       = Intel Iris XeMAX GPU\"\n      echo \"                 INTEL_GEN9      = Intel GPU Gen9\"\n      echo \"                 INTEL_GEN11     = Intel GPU Gen11\"\n      echo \"                 INTEL_GEN12LP   = Intel GPU Gen12LP\"\n      echo \"                 INTEL_XEHP      = Intel GPU Xe-HP\"\n      echo \"                 INTEL_PVC       = Intel GPU Ponte Vecchio\"\n      echo \"               [NVIDIA]\"\n      echo \"                 Kepler30        = NVIDIA Kepler generation CC 3.0\"\n      echo \"                 Kepler32        = NVIDIA Kepler generation CC 3.2\"\n      echo \"                 Kepler35        = NVIDIA Kepler generation CC 3.5\"\n      echo \"                 Kepler37        = NVIDIA Kepler generation CC 3.7\"\n      echo \"                 Maxwell50       = NVIDIA Maxwell generation CC 5.0\"\n      echo \"                 Maxwell52       = NVIDIA Maxwell generation CC 5.2\"\n      echo \"                 Maxwell53       = NVIDIA Maxwell generation CC 5.3\"\n      echo \"                 Pascal60        = NVIDIA Pascal generation CC 6.0\"\n      echo \"                 Pascal61        = NVIDIA Pascal generation CC 6.1\"\n      echo \"                 Volta70         = NVIDIA Volta generation CC 7.0\"\n      echo \"                 Volta72         = NVIDIA Volta generation CC 7.2\"\n      echo \"\"\n      echo \"--compiler=/Path/To/Compiler  Set the compiler.\"\n      echo \"--debug,-dbg:                 Enable Debugging.\"\n      echo \"--cxxflags=[FLAGS]            Overwrite CXXFLAGS for library build and test\"\n      echo \"                                build.  This will still set certain required\"\n      echo \"                                flags via KOKKOS_CXXFLAGS (such as -fopenmp,\"\n      echo \"                                -std=c++17, etc.).\"\n      echo \"--cxxstandard=[FLAGS]         Overwrite KOKKOS_CXX_STANDARD for library build and test\"\n      echo \"                                c++17 (default), c++1z, c++20, c++2a, c++23, c++2b\"\n      echo \"--ldflags=[FLAGS]             Overwrite LDFLAGS for library build and test\"\n      echo \"                                build. This will still set certain required\"\n      echo \"                                flags via KOKKOS_LDFLAGS (such as -fopenmp,\"\n      echo \"                                -lpthread, etc.).\"\n      echo \"--with-gtest=/Path/To/Gtest:  Set path to gtest.  (Used in unit and performance\"\n      echo \"                                tests.)\"\n      echo \"--with-hwloc=/Path/To/Hwloc:  Set path to hwloc library.\"\n      echo \"--with-options=[OPT]:         Additional options to Kokkos:\"\n      echo \"                                compiler_warnings\"\n      echo \"                                aggressive_vectorization = add ivdep on loops\"\n      echo \"                                disable_profiling = do not compile with profiling hooks\"\n      echo \"                                \"\n      echo \"--with-cuda-options=[OPT]:    Additional options to CUDA:\"\n      echo \"                                force_uvm, use_ldg, enable_lambda, rdc, enable_constexpr\"\n      echo \"--with-hpx-options=[OPT]:     Additional options to HPX:\"\n      echo \"                                enable_async_dispatch\"\n      echo \"--gcc-toolchain=/Path/To/GccRoot:  Set the gcc toolchain to use with clang (e.g. /usr)\" \n      echo \"--make-j=[NUM]:               DEPRECATED: call make with appropriate\"\n      echo \"                                -j flag\"\n      exit 0\n      ;;\n    *)\n      echo \"warning: ignoring unknown option $key\"\n      ;;\n  esac\n\n  shift\ndone\n\n# Remove leading ',' from KOKKOS_DEVICES.\nKOKKOS_DEVICES=$(echo $KOKKOS_DEVICES | sed 's/^,//')\n\n# If KOKKOS_PATH undefined, assume parent dir of this script is the KOKKOS_PATH.\nif [ -z \"$KOKKOS_PATH\" ]; then\n  KOKKOS_PATH=$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\nelse\n  # Ensure KOKKOS_PATH is abs path\n  KOKKOS_PATH=$( cd $KOKKOS_PATH && pwd )\nfi\n\nif [ \"${KOKKOS_PATH}\"  = \"${PWD}\" ] || [ \"${KOKKOS_PATH}\"  = \"${PWD}/\" ]; then\n  echo \"Running generate_makefile.bash in the Kokkos root directory is not allowed\"\n  exit\nfi\n\nKOKKOS_SRC_PATH=${KOKKOS_PATH}\n\nKOKKOS_SETTINGS=\"KOKKOS_SRC_PATH=${KOKKOS_SRC_PATH}\"\n\n# The double [[  ]] in the elif branch is not a typo\nif [ ${#COMPILER} -gt 0 ]; then\n  KOKKOS_SETTINGS=\"${KOKKOS_SETTINGS} CXX=${COMPILER}\"\nelif\n   [ ${#COMPILER} -eq 0 ] && [[ ${KOKKOS_DEVICES} =~ .*Cuda.* ]]; then\n  COMPILER=\"${KOKKOS_PATH}/bin/nvcc_wrapper\"\n  KOKKOS_SETTINGS=\"${KOKKOS_SETTINGS} CXX=${COMPILER}\"   \nelif\n   [ ${#COMPILER} -eq 0 ] && [[ ${KOKKOS_DEVICES} =~ .*Hip.* ]]; then\n  COMPILER=hipcc\n  KOKKOS_SETTINGS=\"${KOKKOS_SETTINGS} CXX=${COMPILER}\"\nfi\n\nif [ ${#KOKKOS_DEVICES} -gt 0 ]; then\n  KOKKOS_SETTINGS=\"${KOKKOS_SETTINGS} KOKKOS_DEVICES=${KOKKOS_DEVICES}\"\nfi\n\nif [ ${#KOKKOS_ARCH} -gt 0 ]; then\n  KOKKOS_SETTINGS=\"${KOKKOS_SETTINGS} KOKKOS_ARCH=${KOKKOS_ARCH}\"\nfi\n\nif [ ${#KOKKOS_DEBUG} -gt 0 ]; then\n  KOKKOS_SETTINGS=\"${KOKKOS_SETTINGS} KOKKOS_DEBUG=${KOKKOS_DEBUG}\"\nfi\n\nif [ ${#CUDA_PATH} -gt 0 ]; then\n  KOKKOS_SETTINGS=\"${KOKKOS_SETTINGS} CUDA_PATH=${CUDA_PATH}\"\nfi\n\nif [ ${#HIP_PATH} -gt 0 ]; then\n  KOKKOS_SETTINGS=\"${KOKKOS_SETTINGS} HIP_PATH=${HIP_PATH}\"\nfi\n\nif [ ${#CXXFLAGS} -gt 0 ]; then\n  KOKKOS_SETTINGS=\"${KOKKOS_SETTINGS} CXXFLAGS=\\\"${CXXFLAGS}\\\"\"\nfi\n\nif [ ${#KOKKOS_CXX_STANDARD} -gt 0 ]; then\n  KOKKOS_SETTINGS=\"${KOKKOS_SETTINGS} KOKKOS_CXX_STANDARD=\\\"${KOKKOS_CXX_STANDARD}\\\"\"\nfi\n\nif [ ${#LDFLAGS} -gt 0 ]; then\n  KOKKOS_SETTINGS=\"${KOKKOS_SETTINGS} LDFLAGS=\\\"${LDFLAGS}\\\"\"\nfi\n\nif [ ${#GTEST_PATH} -gt 0 ]; then\n  KOKKOS_SETTINGS=\"${KOKKOS_SETTINGS} GTEST_PATH=${GTEST_PATH}\"\nelse\n  GTEST_PATH=${KOKKOS_PATH}/tpls/gtest\n  KOKKOS_SETTINGS=\"${KOKKOS_SETTINGS} GTEST_PATH=${GTEST_PATH}\"\nfi\n\nif [ ${#HWLOC_PATH} -gt 0 ]; then\n  KOKKOS_SETTINGS=\"${KOKKOS_SETTINGS} HWLOC_PATH=${HWLOC_PATH}\"\n  KOKKOS_USE_TPLS=\"${KOKKOS_USE_TPLS},hwloc\"\nfi\n\nif [ ${#KOKKOS_USE_TPLS} -gt 0 ]; then\n  KOKKOS_SETTINGS=\"${KOKKOS_SETTINGS} KOKKOS_USE_TPLS=${KOKKOS_USE_TPLS}\"\nfi\n\nif [ ${#HPX_PATH} -gt 0 ]; then\n    KOKKOS_SETTINGS=\"${KOKKOS_SETTINGS} HPX_PATH=${HPX_PATH}\"\nfi\n\nif [ ${#KOKKOS_OPT} -gt 0 ]; then\n  KOKKOS_SETTINGS=\"${KOKKOS_SETTINGS} KOKKOS_OPTIONS=${KOKKOS_OPT}\"\nfi\n\nif [ ${#KOKKOS_CUDA_OPT} -gt 0 ]; then\n  KOKKOS_SETTINGS=\"${KOKKOS_SETTINGS} KOKKOS_CUDA_OPTIONS=${KOKKOS_CUDA_OPT}\"\nfi\n\nif [ ${#KOKKOS_HPX_OPT} -gt 0 ]; then\n    KOKKOS_SETTINGS=\"${KOKKOS_SETTINGS} KOKKOS_HPX_OPTIONS=${KOKKOS_HPX_OPT}\"\nfi\n\nif [ ${#KOKKOS_GCC_TOOLCHAIN} -gt 0 ]; then\n  KOKKOS_SETTINGS=\"${KOKKOS_SETTINGS} KOKKOS_INTERNAL_GCC_TOOLCHAIN=${KOKKOS_GCC_TOOLCHAIN}\"\nfi\n\nKOKKOS_SETTINGS_NO_KOKKOS_PATH=\"${KOKKOS_SETTINGS}\"\n\n\ngen_makefile=Makefile.kokkos\nmkdir -p core\nmkdir -p core/unit_test\nmkdir -p core/perf_test\nmkdir -p containers\nmkdir -p containers/unit_tests\nmkdir -p containers/performance_tests\nmkdir -p algorithms\nmkdir -p algorithms/unit_tests\nmkdir -p algorithms/performance_tests\n\nKOKKOS_SETTINGS=\"${KOKKOS_SETTINGS_NO_KOKKOS_PATH} KOKKOS_PATH=${KOKKOS_PATH}\"\n\n# Generate subdirectory makefiles.\necho \"KOKKOS_SETTINGS=${KOKKOS_SETTINGS}\" > core/unit_test/Makefile\necho \"\" >> core/unit_test/Makefile\necho \"all:\" >> core/unit_test/Makefile\necho -e \"\\t\\$(MAKE) -f ${KOKKOS_PATH}/core/unit_test/Makefile ${KOKKOS_SETTINGS}\" >> core/unit_test/Makefile\necho \"\" >> core/unit_test/Makefile\necho \"test: all\" >> core/unit_test/Makefile\necho -e \"\\t\\$(MAKE) -f ${KOKKOS_PATH}/core/unit_test/Makefile ${KOKKOS_SETTINGS} test\" >> core/unit_test/Makefile\necho \"\" >> core/unit_test/Makefile\necho \"clean:\" >> core/unit_test/Makefile\necho -e \"\\t\\$(MAKE) -f ${KOKKOS_PATH}/core/unit_test/Makefile ${KOKKOS_SETTINGS} clean\" >> core/unit_test/Makefile\n\necho \"KOKKOS_SETTINGS=${KOKKOS_SETTINGS}\" > core/perf_test/Makefile\necho \"\" >> core/perf_test/Makefile\necho \"all:\" >> core/perf_test/Makefile\necho -e \"\\t\\$(MAKE) -f ${KOKKOS_PATH}/core/perf_test/Makefile ${KOKKOS_SETTINGS}\" >> core/perf_test/Makefile\necho \"\" >> core/perf_test/Makefile\necho \"test: all\" >> core/perf_test/Makefile\necho -e \"\\t\\$(MAKE) -f ${KOKKOS_PATH}/core/perf_test/Makefile ${KOKKOS_SETTINGS} test\" >> core/perf_test/Makefile\necho \"\" >> core/perf_test/Makefile\necho \"clean:\" >> core/perf_test/Makefile\necho -e \"\\t\\$(MAKE) -f ${KOKKOS_PATH}/core/perf_test/Makefile ${KOKKOS_SETTINGS} clean\" >> core/perf_test/Makefile\n\necho \"KOKKOS_SETTINGS=${KOKKOS_SETTINGS}\" > containers/unit_tests/Makefile\necho \"\" >> containers/unit_tests/Makefile\necho \"all:\" >> containers/unit_tests/Makefile\necho -e \"\\t\\$(MAKE) -f ${KOKKOS_PATH}/containers/unit_tests/Makefile ${KOKKOS_SETTINGS}\" >> containers/unit_tests/Makefile\necho \"\" >> containers/unit_tests/Makefile\necho \"test: all\" >> containers/unit_tests/Makefile\necho -e \"\\t\\$(MAKE) -f ${KOKKOS_PATH}/containers/unit_tests/Makefile ${KOKKOS_SETTINGS} test\" >> containers/unit_tests/Makefile\necho \"\" >> containers/unit_tests/Makefile\necho \"clean:\" >> containers/unit_tests/Makefile\necho -e \"\\t\\$(MAKE) -f ${KOKKOS_PATH}/containers/unit_tests/Makefile ${KOKKOS_SETTINGS} clean\" >> containers/unit_tests/Makefile\n\necho \"KOKKOS_SETTINGS=${KOKKOS_SETTINGS}\" > containers/performance_tests/Makefile\necho \"\" >> containers/performance_tests/Makefile\necho \"all:\" >> containers/performance_tests/Makefile\necho -e \"\\t\\$(MAKE) -f ${KOKKOS_PATH}/containers/performance_tests/Makefile ${KOKKOS_SETTINGS}\" >> containers/performance_tests/Makefile\necho \"\" >> containers/performance_tests/Makefile\necho \"test: all\" >> containers/performance_tests/Makefile\necho -e \"\\t\\$(MAKE) -f ${KOKKOS_PATH}/containers/performance_tests/Makefile ${KOKKOS_SETTINGS} test\" >> containers/performance_tests/Makefile\necho \"\" >> containers/performance_tests/Makefile\necho \"clean:\" >> containers/performance_tests/Makefile\necho -e \"\\t\\$(MAKE) -f ${KOKKOS_PATH}/containers/performance_tests/Makefile ${KOKKOS_SETTINGS} clean\" >> containers/performance_tests/Makefile\n\necho \"KOKKOS_SETTINGS=${KOKKOS_SETTINGS}\" > algorithms/unit_tests/Makefile\necho \"\" >> algorithms/unit_tests/Makefile\necho \"all:\" >> algorithms/unit_tests/Makefile\necho -e \"\\t\\$(MAKE) -f ${KOKKOS_PATH}/algorithms/unit_tests/Makefile ${KOKKOS_SETTINGS}\" >> algorithms/unit_tests/Makefile\necho \"\" >> algorithms/unit_tests/Makefile\necho \"test: all\" >> algorithms/unit_tests/Makefile\necho -e \"\\t\\$(MAKE) -f ${KOKKOS_PATH}/algorithms/unit_tests/Makefile ${KOKKOS_SETTINGS} test\" >> algorithms/unit_tests/Makefile\necho \"\" >> algorithms/unit_tests/Makefile\necho \"clean:\" >> algorithms/unit_tests/Makefile\necho -e \"\\t\\$(MAKE) -f ${KOKKOS_PATH}/algorithms/unit_tests/Makefile ${KOKKOS_SETTINGS} clean\" >> algorithms/unit_tests/Makefile\n\n# Generate top level directory makefile.\necho \"Generating Makefiles with options \" ${KOKKOS_SETTINGS}\necho \"KOKKOS_SETTINGS=${KOKKOS_SETTINGS}\" > Makefile\necho \"\" >> Makefile\necho \"build-test:\" >> Makefile\necho -e \"\\t\\$(MAKE) -C core/unit_test\" >> Makefile\necho -e \"\\t\\$(MAKE) -C core/perf_test\" >> Makefile\necho -e \"\\t\\$(MAKE) -C containers/unit_tests\" >> Makefile\necho -e \"\\t\\$(MAKE) -C containers/performance_tests\" >> Makefile\necho -e \"\\t\\$(MAKE) -C algorithms/unit_tests\" >> Makefile\necho \"\" >> Makefile\necho \"test: build-test\" >> Makefile\necho -e \"\\t\\$(MAKE) -C core/unit_test test\" >> Makefile\necho -e \"\\t\\$(MAKE) -C core/perf_test test\" >> Makefile\necho -e \"\\t\\$(MAKE) -C containers/unit_tests test\" >> Makefile\necho -e \"\\t\\$(MAKE) -C containers/performance_tests test\" >> Makefile\necho -e \"\\t\\$(MAKE) -C algorithms/unit_tests test\" >> Makefile\necho \"\" >> Makefile\necho \"unit-tests-only:\" >> Makefile\necho -e \"\\t\\$(MAKE) -C core/unit_test test\" >> Makefile\necho -e \"\\t\\$(MAKE) -C containers/unit_tests test\" >> Makefile\necho -e \"\\t\\$(MAKE) -C algorithms/unit_tests test\" >> Makefile\necho \"\" >> Makefile\n\necho \"clean:\" >> Makefile\necho -e \"\\t\\$(MAKE) -C core/unit_test clean\" >> Makefile\necho -e \"\\t\\$(MAKE) -C core/perf_test clean\" >> Makefile\necho -e \"\\t\\$(MAKE) -C containers/unit_tests clean\" >> Makefile\necho -e \"\\t\\$(MAKE) -C containers/performance_tests clean\" >> Makefile\necho -e \"\\t\\$(MAKE) -C algorithms/unit_tests clean\" >> Makefile\n\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "simd",
          "type": "tree",
          "content": null
        },
        {
          "name": "tpls",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}