{
  "metadata": {
    "timestamp": 1736565853157,
    "page": 800,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "wdas/brdf",
      "stars": 2131,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1767578125,
          "content": "/Linux-*\n*.o\nmoc_*\n*.dll\n*.exe\n*.filters\n*.ipch\n*.opensdf\n*.pdb\n*.sdf\n*.sln\n*.suo\n*.user\n*.vcxproj\nsrc/brdf/release\nsrc/brdf/debug\n/Makefile.main.pro\n/src/**/Makefile\n/.qmake.stash\n"
        },
        {
          "name": ".release",
          "type": "blob",
          "size": 0.009765625,
          "content": "bin\nshare\n"
        },
        {
          "name": ".workonrc.products",
          "type": "blob",
          "size": 0.0048828125,
          "content": "brdf\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 2.5947265625,
          "content": "BRDF Explorer\nCopyright Disney Enterprises, Inc. All rights reserved.\n\nThis license governs use of the accompanying software. If you use the software, you\naccept this license. If you do not accept the license, do not use the software.\n\n1. Definitions\nThe terms \"reproduce,\" \"reproduction,\" \"derivative works,\" and \"distribution\" have\nthe same meaning here as under U.S. copyright law. A \"contribution\" is the original\nsoftware, or any additions or changes to the software. A \"contributor\" is any person\nthat distributes its contribution under this license. \"Licensed patents\" are a\ncontributor's patent claims that read directly on its contribution.\n\n2. Grant of Rights\n(A) Copyright Grant- Subject to the terms of this license, including the license\nconditions and limitations in section 3, each contributor grants you a non-exclusive,\nworldwide, royalty-free copyright license to reproduce its contribution, prepare\nderivative works of its contribution, and distribute its contribution or any derivative\nworks that you create.\n(B) Patent Grant- Subject to the terms of this license, including the license\nconditions and limitations in section 3, each contributor grants you a non-exclusive,\nworldwide, royalty-free license under its licensed patents to make, have made,\nuse, sell, offer for sale, import, and/or otherwise dispose of its contribution in the\nsoftware or derivative works of the contribution in the software.\n\n3. Conditions and Limitations\n(A) No Trademark License- This license does not grant you rights to use any\ncontributors' name, logo, or trademarks.\n(B) If you bring a patent claim against any contributor over patents that you claim\nare infringed by the software, your patent license from such contributor to the\nsoftware ends automatically.\n(C) If you distribute any portion of the software, you must retain all copyright,\npatent, trademark, and attribution notices that are present in the software.\n(D) If you distribute any portion of the software in source code form, you may do\nso only under this license by including a complete copy of this license with your\ndistribution. If you distribute any portion of the software in compiled or object code\nform, you may only do so under a license that complies with this license.\n(E) The software is licensed \"as-is.\" You bear the risk of using it. The contributors\ngive no express warranties, guarantees or conditions. You may have additional\nconsumer rights under your local laws which this license cannot change.\nTo the extent permitted under your local laws, the contributors exclude the\nimplied warranties of merchantability, fitness for a particular purpose and non-\ninfringement.\n"
        },
        {
          "name": "LICENSE-BINARY",
          "type": "blob",
          "size": 0.439453125,
          "content": "BRDF Explorer\nCopyright Disney Enterprises, Inc. All rights reserved.\n\nSee LICENSE for the specific application components license.\nSource code is available at http://disneyanimation.com/\nhttp://www.disneyanimation.com/technology/brdf.html\n\nDeveloped with Nokia Qt4.  Qt4 libraries are unmodified and\ndynamically linked LGPL versions. Binaries and source are available at\nhttp://qt.nokia.com/products.\n\nWindows binary is cross compiled using ming32.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.6650390625,
          "content": "MYOS = $(shell uname -s)\nMYREL = $(shell uname -r | cut -f1 -d-)\nMYARCH = $(shell uname -p)\n\nprefix ?= $(CURDIR)/$(MYOS)-$(MYREL)-$(MYARCH)\n\nifdef DESTDIR\n    export INSTALL_ROOT := $(DESTDIR)\nendif\n\nexport QMAKEFEATURES := $(PWD)/features\nPROJECT_FILE = main.pro\nREAL_MAKEFILE = Makefile.$(PROJECT_FILE)\n\n\nifeq ($(MYOS), Darwin)\nQMAKE = qmake -spec macx-g++\nelse\nQMAKE = qmake\nendif\n\ndefault: $(REAL_MAKEFILE)\n\t$(MAKE) -f $(REAL_MAKEFILE) all\n\n\ninstall: $(REAL_MAKEFILE)\n\t$(MAKE) -f $(REAL_MAKEFILE) install\n\n%: $(REAL_MAKEFILE)\n\t$(MAKE) -f $(REAL_MAKEFILE) $@\n\n\n$(REAL_MAKEFILE): $(PROJECT_FILE)\n\t$(QMAKE) prefix=$(prefix) -o $(REAL_MAKEFILE) $(PROJECT_FILE)\n\n$(PROJECT_FILE): ;\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 6.0576171875,
          "content": "The Disney BRDF Explorer is an application that allows the development and analysis\nof bidirectional reflectance distribution functions (BRDFs). It can load and plot \nanalytic BRDF functions (coded as snippets of OpenGL GLSL programs), measured\nmaterial data from the MERL database, and anisotropic measured material data from\nMIT CSAIL.\n\nMost of the application should be (hopefully) self explanatory, so the goal here is to\ndocument the less obvious bits of usage, as well as providing some useful info.\n\nWHICH BRDF(S) YOU'RE SEEING\n------------------------------------\nIn the BRDF Parameters window, each BRDF has a colored background. The plotted values\n(for the 3D, polar, and cartesian plots) are drawn in the corresponding colors.\n\nIn the Image Slice, Lit Object, and Lit Sphere windows, you're seeing the first\n(topmost in the parameters window) enabled BRDF.\n\n\nNAVIGATING POLAR/CARTESIAN PLOTS\n------------------------------------\nUse the left mouse button to pan around in the plot. Right dragging will zoom in/out\naround the centered location. Double-clicking anywhere resets the view to the default\nzoom and location. For cartesian plots, Control+left drag stretches ONLY the x-axis,\nwhile Control+right drag stretches only the y-axis.\n\n\nNAVIGATING 3D PLOTS\n------------------------------------\nLeft-drag spins around the origin (there's no current way to change this). Right drag\nzooms in and out. Double clicking resets to the default view.\n\n\nPARAMETER SLIDERS\n------------------------------------\nParameters sliders (a slider plus a text entry box) are all over the application. To\nreset one to its default value, Control+Click in the text box.\n\n\nSOLOING BRDFS\n------------------------------------\nPressing the \"solo\" (circle) button for a given BRDF makes ONLY that BRDF visible,\nhiding all the others. The \"Solo this BRDF's color channels\" button also hides all\nthe other channels, but shows a separate plot for the red, green, and blue channels\n(in their respective colors). Click the solo button again to exit solo mode.\n\n\nLIT SPHERE VIEW\n------------------------------------\nYou can drag the left mouse button on the surface of the sphere to change the\nincident angle. If \"Double Theta\" is enabled, the specular highlight will track\nthe position of the mouse.\n\n\nLIT OBJECT VIEW\n------------------------------------\nThe lit object view allows an arbitrary object to be viewed under with a directional\nlight from the incident direction (in \"No IBL\" mode) or under illumination from an\narbitrary environment map. Left dragging rotates the object; right dragging zooms\nthe object; Control+left dragging rotates the environment probe.\n\nThe combo box lets you choose \"No IBL\", \"IBL: No IS\" (quasirandom sampling from\nthe environment map with no importance sampling) and \"IBL: IBL IS\" (importance\nsampling from the IBL). Multiple importance sampling is planned but not implemented.\nThe \"Keep Sampling\" mode, when enabled, progressively refines the image until\n4096 samples have been applied.\n\nThe buttons allow changing out the object (any OBJ should work) and the environment\nprobe (which must be in ptex format).\n\n\nALBEDO VIEW\n------------------------------------\nAlbedo computation by brute force sampling proved too expensive to do interactively,\nso the application can use several different sampling strategies to compute the albedo.\nUse the combo box on the right to choose between these sampling strategies. The\nResample x10 button adds more samples to that view of the graph.\n\n\nIMAGE SLICE VIEW\n------------------------------------\nAn \"image slice\" is an alternative way of looking at BRDF data that we have found\nhelpful at Disney. Along the x-axis, the half angle is varied from zero to 90\ndegrees; along the y-axis, the difference angle is varied from 0 to 90 degrees.\n\n\nBRDF FILES\n------------------------------------\n.brdf files consist of a set of parameters and a BRDF function written in GLSL.\nAt runtime, the application creates UI elements for each parameter, and creates\nshaders for different views that incorporate the GLSL function.\n\nThe BRDF function looks like this (this example is for a lambertian BRDF):\n\n::begin shader\nvec3 BRDF( vec3 L, vec3 V, vec3 N, vec3 X, vec3 Y )\n{\n    return vec3(reflectance / 3.14159265);\n}\n::end shader\n\nAnything valid in GLSL can go between \"::begin shader\" and \"::end shader\" as\nlong as it's valid GLSL.\n\nThe application allows float, color, and boolean parameters. The float parameters\nhave the form\nfloat [name] [min val] [max val] [default val]\nfor example:\nfloat reflectance 0.0 1.0 1.0\n\nBoolean parameters have the form\nbool [name] [default], where default is 0 or 1 (keywords such as true and\nfalse aren't recognized)\nfor example:\nbool hasDiffuse 0\n\nColor parameters have the form\ncolor [name] [defaultR] [defaultG] [defaultB], where defaultR/G/B are in [0..1]\nfor example:\ncolor diffuseColor 0.5 0.1 1.0\n\nParameters are passed into the resulting GLSL shaders as uniforms of the same\nname (so parameter names must be valid GLSL variable names, although the\napplication doesn't enforce this). Float parameters come in as uniform floats,\ncolor parameters as vec3s, and boolean parameters as bools. The application\ndeclares them when constructing shaders, so your GLSL BRDF functions can \nrefer to them knowing that they'll exist and have the proper values at runtime.\n\n\nLIGHT PROBE ATTRIBUTION\n------------------------------------\nHDR Light Probe Images Copyright 1998 courtesy of Paul Debevec,\nwww.debevec.org, used with permission.\n\nPlease see:\nPaul Debevec.  Rendering Synthetic Objects Into Real Scenes: Bridging Traditional and \nImage-Based Graphics With Global Illumination and High Dynamic Range Photography.  \nProceedings of SIGGRAPH 98, Computer Graphics Proceedings, Annual Conference Series, \nJuly 1998, pp. 189-198.\n\n\nWHERE TO GET MEASURED BRDF DATA\n------------------------------------\nMERL data can be requested here:\nhttp://www.merl.com/brdf/\n\nMIT CSAIL data is here:\nhttp://people.csail.mit.edu/addy/research/brdf/\n\n\nBUILD INSTRUCTIONs\n------------------\n\nTo install brdf run:\n\n    make install [prefix=<some-directory>]\n\nIf you do not specify \"prefix=...\" then brdf will be installed into the current directory.\n"
        },
        {
          "name": "README-DISNEY",
          "type": "blob",
          "size": 0.2021484375,
          "content": "To produce a Disney-friendly, attach-able product:\n\tqmake\n\tmake install\n\nNOTE: if building against the system, use 'qmake-qt4' instead of just 'qmake',\n      or else you might end up using the qt3.3 qmake.\n\n"
        },
        {
          "name": "README-WIN32",
          "type": "blob",
          "size": 0.533203125,
          "content": "How to compile BRDF Explorer for Windows\r\n========================================\r\n\r\nThe following external dependencies are required (versions are ones that I used, other might also work):\r\n\t- Qt 4.8.1\r\n\t- GLEW 1.9.0\r\n\t- ZLib 1.2.5\r\n\t- GLUT 3.7\r\n\r\nMake sure that qmake is in your PATH. Also put GLEW, ZLib and GLUT include and library directories somewhere VC can find them.\r\n\r\nOpen Visual Studio 2010 command prompt and navigate to brdf project root directory.\r\nRun \"qmake -r -tp vc prefix=foo\", this will generate the vcxproj and sln files.\r\n"
        },
        {
          "name": "brdf.spec.in",
          "type": "blob",
          "size": 0.9521484375,
          "content": "# RPMs can be built using 'git make-rpm'\nName:           brdf\nVersion:        __VERSION__\nRelease:        __RELEASE__%{?dist}\nSummary:        BRDF Explorer\n\nGroup:          Applications/Multimedia\nLicense:        Disney\nURL:            http://gitweb/projects/%{name}\nSource0:        http://gitweb/projects/%{name}-%{version}.tar.gz\n\nBuildRequires:  gcc\nBuildRequires:  gcc-c++\nBuildRequires:  glew\nBuildRequires:  glew-devel\nBuildRequires:  qt\nBuildRequires:  qt-devel\nBuildRequires:  pkgconfig-disney\n\nRequires:       glew\nRequires:       qt\n\nprefix:         %{_prefix}\nBuildRoot:      %{_topdir}/BUILDROOT/%{name}-%{version}\n\n%description\nThe BRDF Explorer is the best way to quickly get a feel for\nhow shader controls work and quickly dial in material settings\n\n%prep\n%setup -q\n\n%build\n\n%install\nqmake-qt4 prefix=%{_prefix}\nmake INSTALL_ROOT=%{buildroot} install\n\n%clean\nrm -rf %{buildroot}\n\n%post\n\n%postun\n\n%files\n%defattr(-,root,root,-)\n%{_bindir}/brdf\n%{_datadir}/brdf\n"
        },
        {
          "name": "config.pri",
          "type": "blob",
          "size": 0.234375,
          "content": "# PATH_TO_ZLIB_SOURCE\nZLIB_INCLUDE_DIR = \n\n# PATH TO zlibwapi.lib (zlib 1.2.11 version)\nZLIB_LIB         = \n\n# PATH TO zlibwapi.dll (zlib 1.2.11 version)\nZLIB_DLL         = \n\nQMAKE_MAC_SDK = macosx10.9\nQMAKE_MACOSX_DEPLOYMENT_TARGET = 10.9\n"
        },
        {
          "name": "main.pro",
          "type": "blob",
          "size": 0.076171875,
          "content": "include(config.pri)\n\nTEMPLATE = subdirs\nCONFIG += ordered\nSUBDIRS += src/brdf\n"
        },
        {
          "name": "make_win32_dist.sh",
          "type": "blob",
          "size": 0.455078125,
          "content": "\nVERSION=1.0.0\n\nmake clean\nqmake-qt4 -spec linux-mingw32-custom\nmake -j 8\n\nDIR=brdf-$VERSION-win32\nrm -rf $DIR\nmkdir $DIR\npushd $DIR\ncp -a ../src/{data,probes,images,brdfs,shaderTemplates} ./\ncp /jobs2/soft/users/aselle/windows-build/QtSDK/Desktop/Qt/4.6.4/bin/{QtGui4.dll,QtCore4.dll,QtOpenGL4.dll,libgcc_s_dw2-1.dll,mingwm10.dll} ./\ncp ../src/brdf/release/brdf.exe ./\ncp ../{LICENSE,LICENSE-BINARY,README} ./\npopd\nzip -r brdf-$VERSION-win32.zip brdf-$VERSION-win32"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}