{
  "metadata": {
    "timestamp": 1736565675970,
    "page": 577,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "qt/qtbase",
      "stars": 2546,
      "defaultBranch": "dev",
      "files": [
        {
          "name": ".cmake.conf",
          "type": "blob",
          "size": 3.0634765625,
          "content": "# set (git) module specific defines, but only if we are actually qtbase\n# do _not_ set them as the global toplevel configuration\n# we check for QT_REPO_MODULE_VERSION before defining it below; that will\n# ensure that when this file is included the second time in a toplevel buld\n# (directly by qtbase) we actually add the extra definitions\nif (NOT DEFINED QT_SUPERBUILD OR DEFINED QT_REPO_MODULE_VERSION)\n    set(QT_EXTRA_INTERNAL_TARGET_DEFINES \"QT_LEAN_HEADERS=1\")\nendif()\n\nset(QT_REPO_MODULE_VERSION \"6.10.0\")\nset(QT_REPO_MODULE_PRERELEASE_VERSION_SEGMENT \"alpha1\")\n\nset(QT_COPYRIGHT \"Copyright (C) The Qt Company Ltd. and other contributors.\")\n\n# Minimum requirement for building Qt\nset(QT_SUPPORTED_MIN_CMAKE_VERSION_FOR_BUILDING_QT_SHARED \"3.22\")\nset(QT_SUPPORTED_MIN_CMAKE_VERSION_FOR_BUILDING_QT_STATIC \"3.22\")\nset(QT_SUPPORTED_MIN_CMAKE_VERSION_FOR_BUILDING_QT_APPLE \"3.22\")\n\n# Minimum requirement for consuming Qt in a user project.\n# This might be different in the future, e.g. be lower than the requirement for\n# building Qt.\nset(QT_SUPPORTED_MIN_CMAKE_VERSION_FOR_USING_QT_SHARED \"3.22\")\nset(QT_SUPPORTED_MIN_CMAKE_VERSION_FOR_USING_QT_STATIC \"3.22\")\nset(QT_SUPPORTED_MIN_CMAKE_VERSION_FOR_USING_QT_APPLE \"3.22\")\n\n# Policy settings for commands defined by qtbase.\n# These will also be injected into the top level policy scope of each Qt\n# repo when building Qt so that repos have the same policy settings as\n# qtbase by default. They can be overridden by individual Qt repos\n# in their own .cmake.conf files if needed.\n# This affects both internal and public api commands, because the policies are\n# written into the generated QtFooConfig.cmake.in files.\n#\n# NOTE: Some of these values are also hard-coded in\n#       QtBuildInternalsConfig.cmake at the top of the file\n#       because that file is used in-place by a superbuild, so there is no\n#       opportunity for substituting the values from here. Keep both locations\n#       in sync.\n#       TODO: Figure out how to handle the platform values there\n#       given we now set them conditionally\nset(QT_MIN_NEW_POLICY_CMAKE_VERSION_QT_SHARED \"3.16\")\nset(QT_MIN_NEW_POLICY_CMAKE_VERSION_QT_STATIC \"3.16\")\nset(QT_MIN_NEW_POLICY_CMAKE_VERSION_QT_APPLE \"3.16\")\n\nset(QT_MAX_NEW_POLICY_CMAKE_VERSION_QT_SHARED \"3.21\")\nset(QT_MAX_NEW_POLICY_CMAKE_VERSION_QT_STATIC \"3.21\")\nset(QT_MAX_NEW_POLICY_CMAKE_VERSION_QT_APPLE \"3.21\")\n\n# Apple version constraints. Used when building Qt and documentation\nset(QT_SUPPORTED_MIN_MACOS_SDK_VERSION \"14\")\nset(QT_SUPPORTED_MAX_MACOS_SDK_VERSION \"15\")\nset(QT_SUPPORTED_MIN_MACOS_XCODE_VERSION \"15\")\nset(QT_SUPPORTED_MIN_MACOS_VERSION \"12\")\nset(QT_SUPPORTED_MAX_MACOS_VERSION_TESTED \"15\")\n\nset(QT_SUPPORTED_MIN_IOS_SDK_VERSION \"17\")\nset(QT_SUPPORTED_MAX_IOS_SDK_VERSION \"18\")\nset(QT_SUPPORTED_MIN_IOS_XCODE_VERSION \"15\")\nset(QT_SUPPORTED_MIN_IOS_VERSION \"16\")\nset(QT_SUPPORTED_MAX_IOS_VERSION_TESTED \"18\")\n\nset(QT_SUPPORTED_MIN_VISIONOS_SDK_VERSION \"1\")\nset(QT_SUPPORTED_MAX_VISIONOS_SDK_VERSION \"2\")\nset(QT_SUPPORTED_MIN_VISIONOS_XCODE_VERSION \"15\")\nset(QT_SUPPORTED_MIN_VISIONOS_VERSION \"1\")\nset(QT_SUPPORTED_MAX_VISIONOS_VERSION_TESTED \"2\")\n\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2216796875,
          "content": ".tag                    export-subst\n.gitignore              export-ignore\n.gitattributes          export-ignore\n.commit-template        export-ignore\n*.bat                   text eol=crlf\n*.bat.in                text eol=crlf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 7.71875,
          "content": "# This file is used to ignore files which are generated in the Qt build system\n# ----------------------------------------------------------------------------\n\n# Specific files/paths\n\n# qmake/configure stuff\n/.qmake.cache\n/.qmake.stash\n/config.tests/*/*/*\n!/config.tests/*/*/*[.]*\n/config.tests/.qmake.cache\n/config.tests/.qmake.stash\n/config.tests/arch/arch\n/config.tests/conftest-out\n/config.tests/conftest.cpp\n/config.opt\n/config.status*\n/config.summary\n/config.log\n/config.cache\n/mkspecs/modules/qt_*.pri\n/mkspecs/modules-inst/\n/mkspecs/qconfig.pri\n/mkspecs/qdevice.pri\n/mkspecs/qmodule.pri\n/src/corelib/global/qconfig.cpp\n/src/corelib/global/qconfig.h\n/src/corelib/global/qconfig_p.h\n/src/gui/vulkan/qvulkanfunctions.h\n/src/gui/vulkan/qvulkanfunctions_p.cpp\n/src/gui/vulkan/qvulkanfunctions_p.h\n/bin/qt.conf\n/bin/qmake\n/bin/qvkgen\n/qmake/qmake\nqt*-config.h\nqt*-config_p.h\nqt*-config.pri\n*.pyc\n.mypy_cache\n__pycache__\n\n/include/\n\n/lib/*\n!/lib/README\n/plugins/\n\n/qml/\n\n/doc/*.qch\n/doc/activeqt\n/doc/qdoc\n/doc/qmake\n/doc/qt*/*\n\n# FIXME: Ignore these again?\n# /examples/*/*/*\n# !/examples/*/*/*[.]*\n# !/examples/*/*/README\n# !/examples/*/doc/*\n# !/examples/*/doc/*/*\n\n/translations/*.qm\n/translations/*_en.ts\n/translations/*_untranslated.ts\n\n# This includes binaries from other modules because of non-prefix builds.\n/bin/assistant\n/bin/designer\n/bin/dumpcpp\n/bin/dumpdoc\n/bin/idc\n/bin/kmap2qmap\n/bin/lconvert\n/bin/linguist\n/bin/lrelease\n/bin/lupdate\n/bin/moc\n/bin/patternist\n/bin/phonon\n/bin/pixeltool\n/bin/qcollectiongenerator\n/bin/qdbus\n/bin/qdbuscpp2xml\n/bin/qdbusviewer\n/bin/qdbusxml2cpp\n/bin/qdoc\n/bin/qev\n/bin/qfloat16-tables\n/bin/qglinfo\n/bin/qgltf\n/bin/qhelpconverter\n/libexec/qhelpgenerator\n/bin/qlalr\n/bin/qml\n/bin/qmleasing\n/bin/qmlimportscanner\n/bin/qmljs\n/bin/qmllint\n/bin/qmlmin\n/bin/qmlplugindump\n/bin/qmlprofiler\n/bin/qmlscene\n/bin/qmltestrunner\n/bin/qtattributionsscanner\n/bin/qtdiag\n/bin/qtpaths\n/bin/qtplugininfo\n/bin/rcc\n/bin/servicefw\n/bin/sfwlisten\n/bin/uic\n/bin/xmlpatterns\n/bin/xmlpatternsvalidator\n\n# Unit tests libs/plugins/data\n/tests/auto/cmake/build/\n/tests/auto/corelib/mimetypes/qmimedatabase/qmimedatabase-cache/mime/\n/tests/auto/corelib/mimetypes/qmimedatabase/qmimedatabase-xml/mime/\n/tests/auto/corelib/plugin/qlibrary/libmylib.so2\n/tests/auto/corelib/plugin/qlibrary/mylib.dl2\n/tests/auto/qlibrary/libmylib.so*\n/tests/auto/qmake/testdata/quotedfilenames/test.cpp\n/tests/auto/qprocess/fileWriterProcess.txt\n\n# Unit tests executables (other than those named tst_*)\n/tests/auto/corelib/global/qlogging/app/app\n/tests/auto/corelib/io/qlockfile/qlockfiletesthelper/qlockfile_test_helper\n/tests/auto/corelib/io/qprocess-noapplication/qprocess-noapplication\n/tests/auto/corelib/io/qprocess/testForwarding/testForwarding\n/tests/auto/corelib/io/qprocess/testProcessHang/testProcessHang\n/tests/auto/corelib/io/qresourceengine/qresourceengine\n/tests/auto/corelib/kernel/qsharedmemory/helperbinary\n/tests/auto/corelib/kernel/qsystemsemaphore/helperbinary\n/tests/auto/corelib/plugin/quuid/testProcessUniqueness/testProcessUniqueness\n/tests/auto/corelib/thread/qthreadstorage/crashOnExit\n/tests/auto/corelib/thread/qthreadstorage/crashonexit/crashonexit\n/tests/auto/corelib/tools/qcommandlineparser/testhelper/qcommandlineparser_test_helper\n/tests/auto/dbus/qdbusabstractadaptor/qmyserver/qmyserver\n/tests/auto/dbus/qdbusabstractinterface/qpinger/qpinger\n/tests/auto/dbus/qdbusinterface/qmyserver/qmyserver\n/tests/auto/gui/kernel/qfileopenevent/qfileopeneventexternal/qfileopeneventexternal\n/tests/auto/gui/kernel/qguivariant/no_application/no_application\n/tests/auto/network/socket/qlocalsocket/socketprocess/socketprocess\n/tests/auto/other/qobjectrace/qobjectrace\n/tests/auto/other/qprocess_and_guieventloop/write-read-write/write-read-write\n/tests/auto/testlib/selftests/assert/assert\n/tests/auto/testlib/selftests/badxml/badxml\n/tests/auto/testlib/selftests/benchlibcallgrind/benchlibcallgrind\n/tests/auto/testlib/selftests/benchlibcounting/benchlibcounting\n/tests/auto/testlib/selftests/benchlibeventcounter/benchlibeventcounter\n/tests/auto/testlib/selftests/benchliboptions/benchliboptions\n/tests/auto/testlib/selftests/benchlibtickcounter/benchlibtickcounter\n/tests/auto/testlib/selftests/benchlibwalltime/benchlibwalltime\n/tests/auto/testlib/selftests/blacklisted/blacklisted\n/tests/auto/testlib/selftests/cmptest/cmptest\n/tests/auto/testlib/selftests/commandlinedata/commandlinedata\n/tests/auto/testlib/selftests/counting/counting\n/tests/auto/testlib/selftests/crashes/crashes\n/tests/auto/testlib/selftests/datatable/datatable\n/tests/auto/testlib/selftests/datetime/datetime\n/tests/auto/testlib/selftests/differentexec/differentexec\n/tests/auto/testlib/selftests/exceptionthrow/exceptionthrow\n/tests/auto/testlib/selftests/expectfail/expectfail\n/tests/auto/testlib/selftests/failcleanup/failcleanup\n/tests/auto/testlib/selftests/failinit/failinit\n/tests/auto/testlib/selftests/failinitdata/failinitdata\n/tests/auto/testlib/selftests/fetchbogus/fetchbogus\n/tests/auto/testlib/selftests/findtestdata/findtestdata\n/tests/auto/testlib/selftests/float/float\n/tests/auto/testlib/selftests/globaldata/globaldata\n/tests/auto/testlib/selftests/longstring/longstring\n/tests/auto/testlib/selftests/maxwarnings/maxwarnings\n/tests/auto/testlib/selftests/multiexec/multiexec\n/tests/auto/testlib/selftests/printdatatags/printdatatags\n/tests/auto/testlib/selftests/printdatatagswithglobaltags/printdatatagswithglobaltags\n/tests/auto/testlib/selftests/qexecstringlist/qexecstringlist\n/tests/auto/testlib/selftests/silent/silent\n/tests/auto/testlib/selftests/singleskip/singleskip\n/tests/auto/testlib/selftests/skip/skip\n/tests/auto/testlib/selftests/skipcleanup/skipcleanup\n/tests/auto/testlib/selftests/skipglobal/skipglobal\n/tests/auto/testlib/selftests/skipinit/skipinit\n/tests/auto/testlib/selftests/skipinitdata/skipinitdata\n/tests/auto/testlib/selftests/sleep/sleep\n/tests/auto/testlib/selftests/strcmp/strcmp\n/tests/auto/testlib/selftests/subtest/subtest\n/tests/auto/testlib/selftests/verbose1/verbose1\n/tests/auto/testlib/selftests/verbose2/verbose2\n/tests/auto/testlib/selftests/verifyexceptionthrown/verifyexceptionthrown\n/tests/auto/testlib/selftests/waitwithoutgui/waitwithoutgui\n/tests/auto/testlib/selftests/warnings/warnings\n/tests/auto/testlib/selftests/junit/junit\n/tests/auto/widgets/kernel/qapplication/modal/modal\n\nQObject.log\ntst_*\n!tst_*.*\ntst_*.log\ntst_*.debug\ntst_*~\n\n# Generic directories\n.metadata/\n.pc/\ndebug/\nrelease/\ntmp/\ntmp-debug/\ntmp-debug-shared/\ntmp-release/\ntmp-release-shared/\nqtc-qmldump/\nqtc-qmldbg/\n*.app/\n*.d/\n\n# Generic files\n.#*\n._*\n.com.apple.timemachine.supported\n.DS_Store\ncallgrind.out.*\ncore\nMakefile*\n!/qmake/Makefile.win32*\n!/qmake/Makefile.unix\npcviewer.cfg\ntags\n*~\n*.a\n*.la\n*.core\n*.dll\n*.exe\n*.dylib\n*.gcov\n*.gcda\n*.gcno\n*.lib\n!Info.plist.lib\n*.o\n*.obj\n*.orig\n*.swp\n*.rej\n*.so\n*.so.*\n*.pbxuser\n*.mode1\n*.mode1v3\n*_resource.rc\n*.*#\n*.debug\n.cache\n\n# xemacs temporary files\n*.flc\n\n# Vim temporary files\n.*.swp\n\n# Visual Studio generated files\n*.ib_pdb_index\n*.idb\n*.ilk\n*.pdb\n*.sln\n*.suo\n*.ncb\n*.vcxproj\n*.vcxproj.filters\n*.vcxproj.user\n*.exe.embed.manifest\n*.exe_manifest.rc\n*.exe_manifest.res\n\n# Visual Studio Code generated files\n.vscode\n\n# CLion generated files\n.idea\n\n# Qt Creator generated files\n*.pro.user*\n*.qmlproject.user*\nCMakeLists.txt.user*\n\n# INTEGRITY generated files\n*.ael\n*.dla\n*.dnm\n*.dep\n*.map\n\n# Precompiled headers\n*.gch\n*.pchi\n*.pchi.cpp\n*_pch.obj\n*_pch.pch\n\n# Qt-specific files\ncodeattributions.qdoc\nmoc_*.cpp\nqrc_*.cpp\nui_*.h\n*.moc\n*.prl\n*.rcc\n\n# Generated by qt_module.prf\n*.version\n*.version.in\n\n# Generated by qtPrepareTool()\nwrapper.sh\nwrapper.bat\n*_wrapper.sh\n*_wrapper.bat\n\n# Generated by dbusxml2cpp\n*_interface.*\n*_adaptor.*\n\n# Generated by qt.prf\n*_plugin_import.cpp\n\n# cmake related artifacts\n/build*\nCMakeFiles\nCTestTestfile.cmake\ncmake_install.cmake\n*_autogen\ntst_*.xml\nCMakeUserPresets.json\n/.vs/\n/out/\n"
        },
        {
          "name": ".tag",
          "type": "blob",
          "size": 0.01171875,
          "content": "$Format:%H$\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 1.0849609375,
          "content": "# Copyright (C) 2022 The Qt Company Ltd.\n# SPDX-License-Identifier: BSD-3-Clause\n\n# Need an explicit call at the top level. This is the absolute minimum version\n# needed to configure the project with any combination of enabled features.\n# The call to qt_build_repo_begin() will upgrade policies further.\n#\n# The absolute minimum version for building Qt is 3.16 because for metatype.json generation, we\n# depend on being able to find the location of json files created by AUTOMOC/moc.\ncmake_minimum_required(VERSION 3.16)\n\n# Get the repo version and CMake policy details\ninclude(.cmake.conf)\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/cmake/QtBaseHelpers.cmake)\n\nqt_internal_check_if_path_has_symlinks(\"${CMAKE_BINARY_DIR}\")\n\n# This needs to be called before the first project() call.\nqt_internal_qtbase_run_autodetect()\n\n# This call will load any provided cmake toolchain file.\nproject(QtBase\n    VERSION \"${QT_REPO_MODULE_VERSION}\"\n    DESCRIPTION \"Qt Base Libraries\"\n    HOMEPAGE_URL \"https://qt.io/\"\n    LANGUAGES CXX C ASM\n)\n\nset(QT_BUILD_EXTRA_IDE_FILE_PATTERNS bin/* libexec/*)\n\nqt_internal_qtbase_build_repo()\n"
        },
        {
          "name": "LICENSES",
          "type": "tree",
          "content": null
        },
        {
          "name": "REUSE.toml",
          "type": "blob",
          "size": 3.7734375,
          "content": "version = 1\n\n[[annotations]]\npath = [\"tests/auto/opengl/CMakeLists.txt\",\n        \"tests/benchmarks/widgets/graphicsview/functional/CMakeLists.txt\"]\nprecedence = \"closest\"\nSPDX-FileCopyrightText = \"Copyright (C) 20242 The Qt Company Ltd.\"\nSPDX-License-Identifier = \"BSD-3-Clause\"\n\n[[annotations]]\npath = [\"**tools/**\", \"util/**\", \"doc/global/template/scripts/extras.js\",\n        \"doc/global/template/scripts/main.js\"]\nprecedence = \"closest\"\nSPDX-FileCopyrightText = \"Copyright (C) 2024 The Qt Company Ltd.\"\nSPDX-License-Identifier = \"LicenseRef-Qt-Commercial OR GPL-3.0-only WITH Qt-GPL-exception-1.0\"\n\n[[annotations]]\npath = [\"tests/**\"]\nprecedence = \"closest\"\nSPDX-FileCopyrightText = \"Copyright (C) 2024 The Qt Company Ltd.\"\nSPDX-License-Identifier = \"LicenseRef-Qt-Commercial OR GPL-3.0-only\"\n\n[[annotations]]\npath = [\"bin/*\", \"coin/**\",\"libexec/*\",\"**_clang-format\", \"**.cmake\", \"**.conf\", \"**.cmake.in\",\n        \"**.prf\", \"libexec/qt-internal-configure-*\", \"config.tests/.qmake.conf\",\n        \"**.pro\", \"**.pri\", \"**.yaml\", \"cmake/**.in\", \"cmake/ios/LaunchScreen.storyboard\",\n        \"cmake/**md\", \"**.yml\", \"**.dynlist\", \"cmake/**.plist\",\n        \"src/corelib/global/qconfig.cpp.in\", \"src/corelib/Qt6CoreConfigureFileTemplate.in\",\n        \"**.cfg\"]\nprecedence = \"closest\"\ncomment = \"build system\"\nSPDX-FileCopyrightText = \"Copyright (C) 2024 The Qt Company Ltd.\"\nSPDX-License-Identifier = \"BSD-3-Clause\"\n\n[[annotations]]\npath = [\"**PrivacyInfo.xcprivacy\"]\nprecedence = \"closest\"\nSPDX-FileCopyrightText = \"Copyright (C) 2024 The Qt Company Ltd.\"\nSPDX-License-Identifier = \"CC0-1.0\"\n\n[[annotations]]\npath = [\".tag\", \"**/.gitattributes\", \"**.gitignore\"]\nprecedence = \"closest\"\nSPDX-FileCopyrightText = \"Copyright (C) 2024 The Qt Company Ltd.\"\nSPDX-License-Identifier = \"BSD-3-Clause\"\n\n[[annotations]]\npath = [\"**/snippets/**\", \"**/doc/**/images/**\", \"examples/**\"]\ncomment = \"this must be after the build system table because example and snippets take precedence over build system\"\nprecedence = \"closest\"\nSPDX-FileCopyrightText = \"Copyright (C) 2024 The Qt Company Ltd.\"\nSPDX-License-Identifier = \"LicenseRef-Qt-Commercial OR BSD-3-Clause\"\n\n[[annotations]]\npath = [\"**/README*\", \"src/plugins/**/README*\", \"examples/**/README*\", \"tests/**/README*\",\n        \"src/widgets/doc/snippets/common-table-model/README\", \"cmake/README.md\",\n        \"lib/README\", \"coin/instructions/README.md\", \"src/3rdparty/README\",\n        \"**.qdocconf\", \"**.qdocinc\", \"config_help.txt\",\n        \"doc/global/template/style/*\"]\ncomment = \"documentation\"\nprecedence = \"closest\"\nSPDX-FileCopyrightText = \"Copyright (C) 2024 The Qt Company Ltd.\"\nSPDX-License-Identifier = \"LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only\"\n\n[[annotations]]\npath = [\"src/assets/icons/**.png\", \"src/assets/icons/**.svg\", \"src/android/**.xml\",\n        \"src/gui/**.xml\",\n        \"src/assets/icons/index.theme\", \"src/gui/rhi/test.hlsl\",\n        \"src/corelib/doc/include/QtCoreDoc\",\n        \"src/gui/doc/includes/QtGuiDoc\",\n        \"src/opengl/doc/QtOpenGLDoc\"]\nprecedence = \"closest\"\nSPDX-FileCopyrightText = \"Copyright (C) 2024 The Qt Company Ltd.\"\nSPDX-License-Identifier = \"LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only\"\n\n[[annotations]]\npath = [\"**/qt_attribution.json\"]\nprecedence = \"override\"\nSPDX-FileCopyrightText = \"Copyright (C) 2024 The Qt Company Ltd.\"\nSPDX-License-Identifier = \"LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only\"\n\n[[annotations]]\npath = [\"**.toml\", \"licenseRule.json\"]\nprecedence = \"override\"\nSPDX-FileCopyrightText = \"Copyright (C) 2024 The Qt Company Ltd.\"\nSPDX-License-Identifier = \"LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only\"\n\n[[annotations]]\npath = [\"**LICENSE*\", \"cmake/3rdparty/**/COPYING-CMAKE-SCRIPTS\"]\nprecedence = \"override\"\ncomment = \"License file.\"\nSPDX-FileCopyrightText = \"None\"\nSPDX-License-Identifier = \"CC0-1.0\"\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "coin",
          "type": "tree",
          "content": null
        },
        {
          "name": "config.tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "config_help.txt",
          "type": "blob",
          "size": 18.3369140625,
          "content": "Usage:  configure [options] [-- cmake-options]\n\nThis is a convenience script for configuring Qt with CMake.\nOptions after the double dash are directly passed to CMake.\nYou can pass CMake variables as configure arguments:\n    configure VAR=value\nwhich is equivalent to\n    configure -- -DVAR=value\n\nTop-level installation directories:\n  -prefix <dir> ...... The deployment directory, as seen on the target device.\n                       [/usr/local/Qt-$QT_VERSION; qtbase build directory if\n                       -developer-build]\n  -no-prefix ......... The deployment directory is set to the qtbase build\n                       directory. Can be used instead of -developer-build\n                       to not have to install, as well as avoid\n                       -developer-build's default of -warnings-are-errors.\n  -extprefix <dir> ... The installation directory, as seen on the host machine.\n                       [SYSROOT/PREFIX]\n\nFine tuning of installation directory layout. Note that all directories\nexcept -sysconfdir should be located under -prefix:\n\n  -bindir <dir> ......... Executables [PREFIX/bin]\n  -headerdir <dir> ...... Header files [PREFIX/include]\n  -libdir <dir> ......... Libraries [PREFIX/lib]\n  -archdatadir <dir> .... Arch-dependent data [PREFIX]\n  -plugindir <dir> ...... Plugins [ARCHDATADIR/plugins]\n  -libexecdir <dir> ..... Helper programs [ARCHDATADIR/bin on Windows,\n                          ARCHDATADIR/libexec otherwise]\n  -qmldir <dir> ......... QML imports [ARCHDATADIR/qml]\n  -sbomdir <dir> .......  Software Bill of Materials (SBOM)\n                          installation directory [ARCHDATADIR/sbom]\n  -datadir <dir> ........ Arch-independent data [PREFIX]\n  -docdir <dir> ......... Documentation [DATADIR/doc]\n  -translationdir <dir> . Translations [DATADIR/translations]\n  -sysconfdir <dir> ..... Settings used by Qt programs [PREFIX/etc/xdg]\n  -examplesdir <dir> .... Examples [PREFIX/examples]\n  -testsdir <dir> ....... Tests [PREFIX/tests]\n  -hostdatadir <dir> .... Data used by qmake [PREFIX]\n\nConventions for the remaining options: When an option's description is\nfollowed by a list of values in brackets, the interpretation is as follows:\n'yes' represents the bare option; all other values are possible prefixes to\nthe option, e.g., -no-gui. Alternatively, the value can be assigned, e.g.,\n--gui=yes. Values are listed in the order they are tried if not specified;\n'auto' is a shorthand for 'yes/no'. Solitary 'yes' and 'no' represent binary\noptions without auto-detection.\n\nConfigure meta:\n\n  -help, -h ............ Display this help screen\n  -redo ................ Re-configure with previously used options. In addition,\n                         redo removes CMakeCache.txt file and CMakeFiles/ directory\n                         and recreates them from scratch.\n                         Additional options may be passed, but will not be\n                         saved for later use by -redo.\n\n  -feature-<feature> ... Enable <feature>\n  -no-feature-<feature>  Disable <feature> [none]\n  -list-features ....... List available features. Note that some features\n                         have dedicated command line options as well.\n\nBuild options:\n\n  -cmake-generator <name> ... Explicitly specify the build system generator for\n                         CMake instead of auto-detecting one.\n  -cmake-use-default-generator ... Turn off auto-detection of the CMake build\n                         system generator.\n  -cmake-file-api ...... Let CMake store build metadata for loading the build\n                         into an IDE. [no; yes if -developer-build]\n  -no-guess-compiler ... Do not guess the compiler from the target mkspec.\n  -release ............. Build Qt with optimizations and without debug\n                         symbols [yes]\n                         Note that -developer-build implies -debug unless\n                         -release is also explicitly specified\n  -debug ............... Build Qt without optimizations and with debug symbols\n                         [no]\n  -debug-and-release ... Build two versions of Qt in one build tree [no]\n  -optimize-debug ...... Enable debug-friendly optimizations in debug builds\n                         [auto] (Not supported with MSVC or Clang toolchains)\n  -optimize-size ....... Optimize release builds for size instead of speed [no]\n  -force-debug-info .... Create symbol files for release builds [no]\n  -separate-debug-info . Split off debug information to separate files [no]\n  -gdb-index ........... Index the debug info to speed up GDB\n                         [no; auto if -developer-build with debug info]\n  -gc-binaries ......... Place each function or data item into its own section\n                         and enable linker garbage collection of unused\n                         sections. [auto for static builds, otherwise no]\n  -force-asserts ....... Enable Q_ASSERT even in release builds [no]\n  -developer-build ..... Compile and link Qt for developing Qt itself\n                         (exports for auto-tests, extra checks, implies\n                         -no-prefix, etc.) [no]\n\n  -shared .............. Build shared Qt libraries [yes] (no for UIKit)\n  -static .............. Build static Qt libraries [no] (yes for UIKit)\n  -framework ........... Build Qt framework bundles [yes] (Apple only)\n\n  -platform <target> ... Select mkspec for the qmake companion files\n  -device <name> ....... Select devices/mkspec for the qmake companion files\n  -device-option <key=value> ... Add option for the device mkspec\n\n  -appstore-compliant .. Disable code that is not allowed in platform app stores.\n                         This is on by default for platforms which require distribution\n                         through an app store by default, in particular Android,\n                         iOS, tvOS, and watchOS. [auto]\n\n  -sbom ................ Enable generation of Software Bill of Materials (SBOM)\n                         documents in SPDX tag:value format\n                         [yes; no for developer builds]\n  -sbom-json ........... Enable SBOM generation in SPDX JSON format [auto]\n                         (if Python dependencies are available)\n  -sbom-json-required .. Fails the build if the Python dependencies for JSON\n                         generation are not found [no]\n  -sbom-verify ......... Verify generated SBOM files [auto] (if Python\n                         dependencies are available)\n  -sbom-verify-required  Fails the build if the Python dependencies for SBOM\n                         verification are not found [no]\n\n\n  -qt-host-path <path> . Specify path to a Qt host build for cross-compiling.\n  -qtnamespace <name> .. Wrap all Qt library code in 'namespace <name> {...}'.\n  -qtinlinenamespace ... Make -qtnamespace an inline namespace\n  -qtlibinfix <infix> .. Rename all libQt6*.so to libQt6*<infix>.so.\n\n  -coverage <tool> ..... Instrument with the code coverage tool.\n  -gcov ................ Instrument with the GCov code coverage tool [no]\n\n  -trace [backend] ..... Enable instrumentation with tracepoints.\n                         Currently supported backends are 'etw' (Windows),\n                         'lttng' (Linux), 'ctf' (Common Trace Format, cross-platform)\n                         or 'yes' for auto-detection. [no]\n\n  -sanitize {address|thread|memory|fuzzer-no-link|undefined}\n                         Instrument with the specified compiler sanitizer.\n                         Note that some sanitizers cannot be combined;\n                         for example, -sanitize address cannot be combined with\n                         -sanitize thread.\n\n  -mips_dsp/-mips_dspr2  Use MIPS DSP/rev2 instructions [auto]\n\n  -qreal <type> ........ typedef qreal to the specified type. [double]\n                         Note: this affects binary compatibility.\n\n  -R <string> .......... Add an explicit runtime library path to the Qt\n                         libraries. Supports paths relative to LIBDIR.\n  -rpath ............... Link Qt libraries and executables using the library\n                         install path as a runtime library path. Similar to\n                         -R LIBDIR. On Apple platforms, disabling this implies\n                         using absolute install names (based in LIBDIR) for\n                         dynamic libraries and frameworks. [auto]\n\n  -reduce-exports ...... Reduce amount of exported symbols [auto]\n  -reduce-relocations .. Reduce amount of relocations [auto] (Unix only)\n\n  -plugin-manifests .... Embed manifests into plugins [no] (Windows only)\n  -static-runtime ...... With -static, use static runtime [no] (Windows only)\n\n  -pch ................. Use precompiled headers [auto]\n  -ltcg ................ Use Link Time Code Generation [no]\n  -intelcet ............ Use Intel Control-flow Enforcement Technology [auto]\n  -glibc-fortify-source  Use Glibc function fortification [auto]\n  -trivial-auto-var-init-pattern\n                         Use -ftrivial-auto-var-init=pattern [auto]\n  -stack-protector ..... Use -fstack-protector-strong [auto]\n  -stack-clash-protection\n                         Use -fstack-clash-protection [auto]\n  -libstdcpp-assertions  Use libstdc++ assertions [auto]\n  -libcpp-hardening .... Use libc++ hardening [auto]\n  -relro-now-linker .... Use -z relro -z now when linking [auto]\n  -linker [bfd,gold,lld,mold]\n                         Force use of the GNU ld, GNU gold, LLVM/LLD or mold\n                         linker instead of default one (GCC and clang only)\n  -ccache .............. Use the ccache compiler cache [no] (Unix only)\n  -unity-build ......... Enable Unity (Jumbo) build\n  -unity-build-batch-size <int>\n                         Maximum number of source files used by the unity build\n                         to create unity source files [32]\n\n  -warnings-are-errors . Treat warnings as errors [no; yes if -developer-build]\n\n  -disable-deprecated-up-to <version>\n                         Set the QT_DISABLE_DEPRECATED_UP_TO value to <version>.\n                         QT_DISABLE_DEPRECATED_UP_TO is used to remove\n                         deprecated methods from both API and ABI.\n                         <version> is a hex value, for example 0x060500 can be\n                         used to remove all code deprecated in Qt 6.5.0 or\n                         earlier releases.\n                         By default <version> is set to 0x040000 and 0x050000 on\n                         Windows, and non-Windows respectively.\n\nBuild environment:\n\n  -pkg-config .......... Use pkg-config [auto] (Unix only)\n\n  -vcpkg ............... Use vcpkg [no]\n\n  -D <string> .......... Pass additional preprocessor define\n  -I <string> .......... Pass additional include path\n  -L <string> .......... Pass additional library path\n  -F <string> .......... Pass additional framework path (Apple only)\n\n  -sdk <sdk> ........... Build Qt using Apple provided SDK <sdk>. The argument\n                         should be one of the available SDKs as listed by\n                         'xcodebuild -showsdks'.\n\n  -android-sdk path .... Set Android SDK root path [$ANDROID_SDK_ROOT]\n  -android-ndk path .... Set Android NDK root path [$ANDROID_NDK_ROOT]\n  -android-ndk-platform  Set Android platform\n  -android-abis .......  Only one ABI can be specified, default is: armeabi-v7a\n  -android-javac-target  Set the javac build target version [8]\n  -android-javac-source  Set the javac build source version [8]\n  -android-style-assets  Automatically extract style assets from the device at\n                         run time. This option makes the Android style behave\n                         correctly, but also makes the Android platform plugin\n                         incompatible with the LGPL2.1. [yes]\n\nComponent selection:\n\n  -submodules <repo>[,<repo>] ... Build the listed repositories and those they\n                         depend on rather than all checked-out repositories.\n                         The list should be separated with commas, e.g.\n                         -submodules qtsvg,qtnetworkauth\n                         [default is to build all checked out repositories]\n  -skip <repo>[,<repo>]  Exclude one or more entire repositories from the\n                         build. The list should be separated with commas.\n                         e.g. -skip qtimageformats,qtsvg\n  -skip-tests <repo>[,<repo>] ... Skip building tests for one or more\n                         repositories. The list should be separated with commas.\n                         e.g. -skip-tests qtimageformats,qtsvg\n  -skip-examples <repo>[,<repo>] ... Skip building examples for one or more\n                         repositories. The list should be separated with commas.\n                         e.g. -skip-examples qtimageformats,qtsvg\n  -init-submodules ..... When configure is called from the qt git super module,\n                         it will automatically clone and initialize the\n                         repositories specified by the -submodules option. When\n                         no -submodules are specified, and no existing\n                         submodules are cloned, a default set of submodules\n                         will be initialized. To adjust other aspects of the\n                         cloning process, check the init-repository --help\n                         output for additional options that can be passed\n                         to configure.\n  -make <part> ......... Add <part> to the list of parts to be built.\n                         Specifying this option clears the default list first.\n                         (allowed values: libs, tools, examples, tests,\n                         benchmarks, manual-tests, minimal-static-tests)\n                         [default: libs and examples, also tools if not\n                         cross-building, also tests if -developer-build]\n  -nomake <part> ....... Exclude <part> from the list of parts to be built.\n  -install-examples-sources Installs examples source code into the Qt prefix\n                         Only possible when -make examples is also passed\n                         [no]\n  -gui ................. Build the Qt GUI module and dependencies [yes]\n  -widgets ............. Build the Qt Widgets module and dependencies [yes]\n  -no-dbus ............. Do not build the Qt D-Bus module\n                         [default on Android and Windows]\n  -dbus-linked ......... Build Qt D-Bus and link to libdbus-1 [auto]\n  -dbus-runtime ........ Build Qt D-Bus and dynamically load libdbus-1 [no]\n  -accessibility ....... Enable accessibility support [yes]\n                         Note: Disabling accessibility is not recommended.\n\nQt comes with bundled copies of some 3rd party libraries. These are used\nby default if auto-detection of the respective system library fails.\n\n  -force-bundled-libs .. Only use bundled 3rd party libraries [no]\n  -force-system-libs ... Do not use bundled 3rd party libraries [no]\n\nCore options:\n\n  -doubleconversion .... Select used double conversion library [system/qt/no]\n                         No implies use of sscanf_l and snprintf_l (imprecise).\n  -glib ................ Enable Glib support [no; auto on Unix]\n  -inotify ............. Enable inotify support\n  -icu ................. Enable ICU support [auto]\n  -pcre ................ Select used libpcre2 [system/qt/no]\n  -zlib ................ Select used zlib [system/qt]\n\n  Logging backends:\n    -journald .......... Enable journald support [no] (Unix only)\n    -syslog ............ Enable syslog support [no] (Unix only)\n    -slog2 ............. Enable slog2 support [auto] (QNX only)\n\nNetwork options:\n\n  -ssl ................. Enable either SSL support method [auto]\n  -no-openssl .......... Do not use OpenSSL [default on Apple]\n  -openssl-linked ...... Use OpenSSL and link to libssl [no]\n  -openssl-runtime ..... Use OpenSSL and dynamically load libssl [auto]\n  -schannel ............ Use Secure Channel [auto] (Windows only)\n  -securetransport ..... Use SecureTransport [auto] (Apple only)\n\n  -sctp ................ Enable SCTP support [no]\n\n  -libproxy ............ Enable use of libproxy [no]\n  -system-proxies ...... Use system network proxies by default [yes]\n\nGui, printing, widget options:\n\n  -cups ................ Enable CUPS support [auto] (Unix only)\n\n  -emojisegmenter ...... Enable complex emoji sequences [yes]\n  -fontconfig .......... Enable Fontconfig support [auto] (Unix only)\n  -freetype ............ Select used FreeType [system/qt/no]\n  -harfbuzz ............ Select used HarfBuzz-NG [system/qt/no]\n                         (Not auto-detected on Apple and Windows)\n\n  -gtk ................. Enable GTK platform theme support [auto]\n\n  -no-opengl ........... Disable OpenGL support\n  -opengl <api> ........ Enable OpenGL support. Supported APIs:\n                         es2, desktop (default on Unix),\n                         dynamic (Windows only, default on Windows)\n  -opengles3 ........... Enable OpenGL ES 3.x support instead of ES 2.x [auto]\n  -egl ................. Enable EGL support [auto]\n\n  -qpa <qpa1>[;<qpa2>] . Select supported QPA backend(s) (e.g., xcb, cocoa,\n                         windows). A list separated by semi-colons.\n  -default-qpa <name> .. Select the default QPA backend (e.g., xcb, cocoa,\n                         windows).\n  -xcb-xlib............. Enable Xcb-Xlib support [auto]\n\n  Platform backends:\n    -direct2d .......... Enable Direct2D support [auto] (Windows only)\n    -directfb .......... Enable DirectFB support [no] (Unix only)\n    -eglfs ............. Enable EGLFS support [auto; no on Android and Windows]\n    -gbm ............... Enable backends for GBM [auto] (Linux only)\n    -kms ............... Enable backends for KMS [auto] (Linux only)\n    -linuxfb ........... Enable Linux Framebuffer support [auto] (Linux only)\n    -xcb ............... Enable X11 support [auto] (Linux only)\n\n  Input backends:\n    -libudev............ Enable udev support [auto]\n    -evdev ............. Enable evdev support [auto]\n    -libinput .......... Enable libinput support [auto]\n    -mtdev ............. Enable mtdev support [auto]\n    -tslib ............. Enable tslib support [auto]\n    -bundled-xcb-xinput  Use bundled XInput2 support [auto]\n    -xkbcommon ......... Enable key mapping support [auto]\n\n  Image formats:\n    -gif ............... Enable reading support for GIF [auto]\n    -ico ............... Enable support for ICO [yes]\n    -libpng ............ Select used libpng [system/qt/no]\n    -libjpeg ........... Select used libjpeg [system/qt/no]\n\nDatabase options:\n\n  -sql-<driver> ........ Enable SQL <driver> plugin. Supported drivers:\n                         db2 ibase mysql oci odbc psql sqlite mimer\n                         [all auto]\n  -sqlite .............. Select used sqlite [system/qt]\n"
        },
        {
          "name": "configure",
          "type": "blob",
          "size": 4.572265625,
          "content": "#!/bin/sh\n# Copyright (C) 2016 The Qt Company Ltd.\n# Copyright (C) 2016 Intel Corporation.\n# SPDX-License-Identifier: BSD-3-Clause\n\n#-------------------------------------------------------------------------------\n# script initialization\n#-------------------------------------------------------------------------------\n\n# the directory of this script is the \"source tree\"\nrelpath=`dirname \"$0\"`\nrelpath=`(cd \"$relpath\"; pwd)`\n# the current directory is the \"build tree\" or \"object tree\"\noutpath=`pwd`\noutpathPrefix=$outpath\n\n# do this early so we don't store it in config.status\nCFG_TOPLEVEL=\n\nSAVED_IFS=$IFS\nIFS='\n'\n\ncheckTopLevelBuild()\n{\n    relpathMangled=$relpath\n    if [ x\"$1\" = x\"-top-level\" ]; then\n        CFG_TOPLEVEL=yes\n        relpathMangled=`dirname \"$relpath\"`\n        outpathPrefix=\"$outpathPrefix/..\"\n    else\n        if [ -f ../.qmake.super ]; then\n            echo >&2 \"ERROR: You cannot configure qtbase separately within a top-level build.\"\n            exit 1\n        fi\n    fi\n}\n\nOPT_CMDLINE=  # expanded version for the script\ndetermineOptFilePath()\n{\n> \"${outpathPrefix}/config.redo.in\"\nset -f  # suppress globbing in for loop\nfor i in \"$@\"; do\n    if [ x\"$i\" = x\"-top-level\" ]; then\n        continue\n    fi\n    case $i in\n        -redo|--redo)\n            optfile=${outpathPrefix}/config.opt\n            if ! test -f \"$optfile\"; then\n                echo >&2 \"No config.opt present - cannot redo configuration.\"\n                exit 1\n            fi\n            ;;\n        *)\n            # If redo-ing, write the rest of parameters into the config.redo.in file\n            echo \\\"$i\\\" >> \"${outpathPrefix}/config.redo.in\"\n            ;;\n    esac\ndone\n}\n\n#-------------------------------------------------------------------------------\n# initialize variables\n#-------------------------------------------------------------------------------\n\nOPT_HELP=\n\n#-------------------------------------------------------------------------------\n# parse command line arguments\n#-------------------------------------------------------------------------------\nparseCommandline()\n{\n# parse the arguments, setting things to \"yes\" or \"no\"\nwhile [ \"$#\" -gt 0 ]; do\n    CURRENT_OPT=\"$1\"\n    case \"$1\" in\n    #Autoconf style options\n    --*)\n        VAR=`echo $1 | sed 's,^--\\(.*\\),\\1,'`\n        VAL=yes\n        ;;\n    #General options, including Qt style yes options\n    -*)\n        VAR=`echo $1 | sed 's,^-\\(.*\\),\\1,'`\n        VAL=\"yes\"\n        ;;\n    # most options don't need processing in the configure script, skip them. qmake will do the real validation\n    *)\n        shift\n        continue\n        ;;\n    esac\n\n    shift\n\n    case \"$VAR\" in\n    h|help)\n        if [ \"$VAL\" = \"yes\" ]; then\n            OPT_HELP=\"$VAL\"\n        fi\n        ;;\n    *)\n        ;;\n    esac\ndone\n}\n\n#-------------------------------------------------------------------------------\n# help - interactive parts of the script _after_ this section please\n#-------------------------------------------------------------------------------\nhandleHelp()\n{\nif [ \"$OPT_HELP\" = \"yes\" ]; then\n    cat $relpath/config_help.txt\n    if [ -n \"$CFG_TOPLEVEL\" ]; then\n        IFS='\n'\n        for i in $relpathMangled/qt*/config_help.txt; do\n            if [ x\"$i\" != x\"$relpath/config_help.txt\" ]; then\n                echo\n                cat \"$i\"\n            fi\n        done\n    fi\n    exit 0\nfi\n}\n\ncheckTopLevelBuild \"$@\"\nparseCommandline \"$@\"\nhandleHelp\ndetermineOptFilePath \"$@\"\n\noptfilepath=${outpathPrefix}/config.opt\nopttmpfilepath=${outpathPrefix}/config.opt.in\n\nredofilepath=${outpathPrefix}/config.redo.last\nredotmpfilepath=${outpathPrefix}/config.redo.in\n\nfresh_requested_arg=\nif [ -z \"$optfile\" ]; then   # only write optfile if not currently redoing\n    > \"$opttmpfilepath\"\n    > \"$redotmpfilepath\"\n\n    for arg in \"$@\"; do echo \\\"$arg\\\" >> \"$opttmpfilepath\"; done\n\n    cmake -DIN_FILE=\"${opttmpfilepath}\" -DOUT_FILE=\"${optfilepath}\" -DIGNORE_ARGS=-top-level -P \"${relpath}/cmake/QtWriteArgsFile.cmake\"\nelse\n    # Rewriting config.opt into config.opt.in anyway. Allows for direct manipulation of config.opt\n    > \"$opttmpfilepath\"\n    for arg in `cat $optfile`; do echo \\\"$arg\\\" >> \"$opttmpfilepath\"; done\n\n    cmake -DIN_FILE=\"${opttmpfilepath}\" -DREDO_FILE=\"${redotmpfilepath}\" -DOUT_FILE=\"${redofilepath}\" -DIGNORE_ARGS=-top-level -P \"${relpath}/cmake/QtWriteArgsFile.cmake\"\n    optfilepath=${redofilepath}\n    fresh_requested_arg=-DFRESH_REQUESTED=TRUE\nfi\n\ntop_level_arg=\nif [ -n \"$CFG_TOPLEVEL\" ]; then\n    top_level_arg=-DTOP_LEVEL=TRUE\n    cd ..\nfi\n\nexec cmake \"-DOPTFILE=${optfilepath}\" ${top_level_arg} ${fresh_requested_arg} -P \"${relpath}/cmake/QtProcessConfigureArgs.cmake\"\n\nIFS=$SAVED_IFS\n"
        },
        {
          "name": "configure.bat",
          "type": "blob",
          "size": 3.2734375,
          "content": ":: Copyright (C) 2016 The Qt Company Ltd.\n:: Copyright (C) 2016 Intel Corporation.\n:: SPDX-License-Identifier: BSD-3-Clause\n\n@echo off\nsetlocal ENABLEDELAYEDEXPANSION ENABLEEXTENSIONS\nset ARGS=%*\nset QTSRC=%~dp0\nset QTSRC=%QTSRC:~0,-1%\nset QTDIR=%CD%\n\nrem Parse command line\n\nset TOPLEVEL=false\nset TOPQTSRC=%QTSRC%\nset TOPQTDIR=%QTDIR%\nif /i not \"%~1\" == \"-top-level\" goto notoplevel\nset ARGS=%ARGS:~10%\nset TOPLEVEL=true\nfor %%P in (\"%TOPQTSRC%\") do set TOPQTSRC=%%~dpP\nset TOPQTSRC=%TOPQTSRC:~0,-1%\nfor %%P in (\"%QTDIR%\") do set TOPQTDIR=%%~dpP\nset TOPQTDIR=%TOPQTDIR:~0,-1%\ngoto wastoplevel\n:notoplevel\nif not exist ..\\.qmake.super goto wastoplevel\necho ERROR: You cannot configure qtbase separately within a top-level build. >&2\nexit /b 1\n:wastoplevel\n\ncall :doargs %ARGS%\nif errorlevel 1 exit /b\ngoto doneargs\n\n:doargs\n    if \"%~1\" == \"\" exit /b\n\n    if \"%~1\" == \"/?\" goto help\n    if \"%~1\" == \"-?\" goto help\n    if /i \"%~1\" == \"/h\" goto help\n    if /i \"%~1\" == \"-h\" goto help\n    if /i \"%~1\" == \"/help\" goto help\n    if /i \"%~1\" == \"-help\" goto help\n    if /i \"%~1\" == \"--help\" goto help\n\n    if /i \"%~1\" == \"-redo\" goto redo\n    if /i \"%~1\" == \"--redo\" goto redo\n\n:nextarg\n    shift\n    goto doargs\n\n:help\n    type %QTSRC%\\config_help.txt\n    if %TOPLEVEL% == false exit /b 1\n    for /d %%p in (\"%TOPQTSRC%\"\\qt*) do (\n        if not \"%%p\" == \"%QTSRC%\" (\n            if exist \"%%p\\config_help.txt\" (\n                echo.\n                type \"%%p\\config_help.txt\"\n            )\n        )\n    )\n    exit /b 1\n\n:redo\n    if not exist \"%TOPQTDIR%\\config.opt\" goto redoerr\n    echo %ARGS% > %TOPQTDIR%\\config.redo.in\n    set redoing=\"\"\n    goto nextarg\n:redoerr\n    echo No config.opt present - cannot redo configuration. >&2\n    exit /b 1\n\n:doneargs\n\ncd \"%TOPQTDIR%\"\n\nrem Write config.opt if we're not currently -redo'ing\nset OPT_FILE_PATH=%TOPQTDIR%\\config.opt\nset OPT_TMP_FILE_PATH=%TOPQTDIR%\\config.opt.in\nset REDO_FILE_PATH=%TOPQTDIR%\\config.redo.last\nset REDO_TMP_FILE_PATH=%TOPQTDIR%\\config.redo.in\nset FRESH_REQUESTED_ARG=\nif not defined redoing (\n    rem \"The '.' in 'echo.%*' ensures we don't print \"echo is off\" when no arguments are passed\"\n    rem \"https://devblogs.microsoft.com/oldnewthing/20170802-00/?p=96735\"\n    rem \"The space before the '>' makes sure that when we have a digit at the end of the args, we\"\n    rem \"don't accidentally concatenate it with the '>' resulting in '0>' or '2>' which redirects\"\n    rem \"into the file from a stream different than stdout, leading to broken or empty content.\"\n    echo.%* >\"%OPT_TMP_FILE_PATH%\"\n\n    cmake -DIN_FILE=\"%OPT_TMP_FILE_PATH%\" -DOUT_FILE=\"%OPT_FILE_PATH%\" -DIGNORE_ARGS=-top-level -P \"%QTSRC%\\cmake\\QtWriteArgsFile.cmake\"\n) else (\n    echo. 2> \"%OPT_TMP_FILE_PATH%\"\n    for /F \"usebackq tokens=*\" %%A in (\"%OPT_FILE_PATH%\") do echo \"%%A\" >> \"%OPT_TMP_FILE_PATH%\"\n\n    cmake -DIN_FILE=\"%OPT_TMP_FILE_PATH%\" -DREDO_FILE=\"%REDO_TMP_FILE_PATH%\" -DOUT_FILE=\"%REDO_FILE_PATH%\" -DIGNORE_ARGS=\"-top-level;-redo;--redo\" -P \"%QTSRC%\\cmake\\QtWriteArgsFile.cmake\"\n\n    set OPT_FILE_PATH=%REDO_FILE_PATH%\n    set FRESH_REQUESTED_ARG=-DFRESH_REQUESTED=TRUE\n)\n\nrem Launch CMake-based configure\nset TOP_LEVEL_ARG=\nif %TOPLEVEL% == true set TOP_LEVEL_ARG=-DTOP_LEVEL=TRUE\ncmake -DOPTFILE=\"%OPT_FILE_PATH%\" %TOP_LEVEL_ARG% %FRESH_REQUESTED_ARG% -P \"%QTSRC%\\cmake\\QtProcessConfigureArgs.cmake\"\n"
        },
        {
          "name": "configure.cmake",
          "type": "blob",
          "size": 48.56640625,
          "content": "# Copyright (C) 2022 The Qt Company Ltd.\n# SPDX-License-Identifier: BSD-3-Clause\n\n#### Inputs\n\n\n\n#### Libraries\n\nqt_find_package(WrapSystemZLIB 1.0.8 PROVIDED_TARGETS WrapSystemZLIB::WrapSystemZLIB MODULE_NAME global QMAKE_LIB zlib)\n# Work around global target promotion failure when WrapZLIB is used on APPLE platforms.\n# What ends up happening is that the ZLIB::ZLIB target is not promoted to global by qt_find_package,\n# then qt_find_package(WrapSystemPNG) tries to find its dependency ZLIB::ZLIB, sees it's not global\n# and tries to promote it to global, but fails because the directory scope of the PNG package is\n# different (src/gui) from where ZLIB was originally found (qtbase root).\n# To avoid that, just manually promote the target to global here.\nif(TARGET ZLIB::ZLIB)\n    set_property(TARGET ZLIB::ZLIB PROPERTY IMPORTED_GLOBAL TRUE)\nendif()\n\n# Look for Threads in the same scope as OpenSSL package, because OpenSSL sometimes depends on\n# Threads (for static OpenSSL builds) and we want to promote the target to global in the same\n# directory scope.\nqt_find_package(Threads PROVIDED_TARGETS Threads::Threads)\nqt_find_package(WrapOpenSSLHeaders PROVIDED_TARGETS WrapOpenSSLHeaders::WrapOpenSSLHeaders MODULE_NAME core)\n# openssl_headers\n# OPENSSL_VERSION_MAJOR is not defined for OpenSSL 1.1.1\nqt_config_compile_test(opensslv11_headers\n    LABEL \"opensslv11_headers\"\n    LIBRARIES\n        WrapOpenSSLHeaders::WrapOpenSSLHeaders\n    CODE\n\"#include <openssl/ssl.h>\n#include <openssl/opensslv.h>\n#if !defined(OPENSSL_VERSION_NUMBER) || defined(OPENSSL_VERSION_MAJOR) || OPENSSL_VERSION_NUMBER-0 < 0x10101000L\n#  error OpenSSL >= 1.1.1 is required\n#endif\n#if !defined(OPENSSL_NO_EC) && !defined(SSL_CTRL_SET_CURVES)\n#  error OpenSSL was reported as >= 1.1.1 but is missing required features, possibly it is libressl which is unsupported\n#endif\n\nint main(void)\n{\n    /* BEGIN TEST: */\n    /* END TEST: */\n    return 0;\n}\n\")\n\nqt_find_package(WrapOpenSSL PROVIDED_TARGETS WrapOpenSSL::WrapOpenSSL MODULE_NAME core QMAKE_LIB openssl)\n# openssl\n# OPENSSL_VERSION_MAJOR is not defined for OpenSSL 1.1.1\nqt_config_compile_test(opensslv11\n    LABEL \"opensslv11\"\n    LIBRARIES\n        WrapOpenSSL::WrapOpenSSL\n    CODE\n\"#include <openssl/ssl.h>\n#include <openssl/opensslv.h>\n#if !defined(OPENSSL_VERSION_NUMBER) || defined(OPENSSL_VERSION_MAJOR) || OPENSSL_VERSION_NUMBER-0 < 0x10101000L\n#  error OpenSSL >= 1.1.1 is required\n#endif\n#if !defined(OPENSSL_NO_EC) && !defined(SSL_CTRL_SET_CURVES)\n#  error OpenSSL was reported as >= 1.1.1 but is missing required features, possibly it is libressl which is unsupported\n#endif\n\nint main(void)\n{\n    /* BEGIN TEST: */\nSSL_free(SSL_new(0));\n    /* END TEST: */\n    return 0;\n}\n\")\n\n# opensslv30\n# openssl_headers\nqt_config_compile_test(opensslv30_headers\n    LABEL \"opensslv30_headers\"\n    LIBRARIES\n        WrapOpenSSLHeaders::WrapOpenSSLHeaders\n    CODE\n\"#include <openssl/ssl.h>\n#include <openssl/opensslv.h>\n#if !OPENSSL_VERSION_PREREQ(3,0)\n#  error OpenSSL >= 3.0 is required\n#endif\n\nint main(void)\n{\n    /* BEGIN TEST: */\n    /* END TEST: */\n    return 0;\n}\n\")\nqt_config_compile_test(opensslv30\n    LABEL \"opensslv30\"\n    LIBRARIES\n        WrapOpenSSL::WrapOpenSSL\n    CODE\n\"#include <openssl/ssl.h>\n#include <openssl/opensslv.h>\n#if !OPENSSL_VERSION_PREREQ(3,0)\n#  error OpenSSL >= 3.0 is required\n#endif\n\nint main(void)\n{\n    /* BEGIN TEST: */\nSSL_free(SSL_new(0));\n    /* END TEST: */\n    return 0;\n}\n\")\n\nqt_find_package(WrapZSTD 1.3\n    PROVIDED_TARGETS\n        WrapZSTD::WrapZSTD\n        zstd::libzstd\n        zstd::libzstd_static\n        zstd::libzstd_shared\n    MODULE_NAME global\n    QMAKE_LIB zstd\n)\nqt_find_package(WrapDBus1 1.2 PROVIDED_TARGETS dbus-1 MODULE_NAME global QMAKE_LIB dbus)\nqt_find_package(Libudev PROVIDED_TARGETS PkgConfig::Libudev MODULE_NAME global QMAKE_LIB libudev)\nqt_find_package(LTTngUST PROVIDED_TARGETS LTTng::UST MODULE_NAME core QMAKE_LIB lttng-ust)\nqt_add_qmake_lib_dependency(lttng-ust libdl)\n\n\n#### Early-evaluated, Linker-related Tests and Features\n\nqt_internal_check_if_linker_is_available(use_bfd_linker\n    LABEL \"bfd linker\"\n    FLAG \"-fuse-ld=bfd\"\n    )\n\nqt_internal_check_if_linker_is_available(use_gold_linker\n    LABEL \"gold linker\"\n    FLAG \"-fuse-ld=gold\"\n    )\n\nqt_internal_check_if_linker_is_available(use_lld_linker\n    LABEL \"lld linker\"\n    FLAG \"-fuse-ld=lld\"\n    )\n\n# We set an invalid flag as a default flag so the compile test fails\n# in case if no mold is found in PATH.\nset(__qt_internal_mold_linker_flags \"-Wl,-invalid-flag\")\nif(NOT QT_CONFIGURE_RUNNING)\n    qt_internal_get_mold_linker_flags(__qt_internal_mold_linker_flags)\nendif()\nqt_internal_check_if_linker_is_available(use_mold_linker\n    LABEL \"mold linker\"\n    FLAG \"${__qt_internal_mold_linker_flags}\"\n    )\nunset(__qt_internal_mold_linker_flags)\n\nqt_feature(\"use_bfd_linker\"\n    PRIVATE\n    LABEL \"bfd\"\n    AUTODETECT false\n    CONDITION NOT MSVC AND NOT INTEGRITY AND NOT WASM AND TEST_use_bfd_linker\n    ENABLE INPUT_linker STREQUAL 'bfd'\n    DISABLE INPUT_linker STREQUAL 'gold' OR INPUT_linker STREQUAL 'lld'\n            OR INPUT_linker STREQUAL 'mold'\n)\nqt_feature_config(\"use_bfd_linker\" QMAKE_PRIVATE_CONFIG)\n\nqt_feature(\"use_gold_linker_alias\"\n    AUTODETECT false\n    CONDITION NOT WIN32 AND NOT INTEGRITY AND NOT WASM AND TEST_use_gold_linker\n)\nqt_feature(\"use_gold_linker\"\n    PRIVATE\n    LABEL \"gold\"\n    AUTODETECT false\n    CONDITION NOT WIN32 AND NOT INTEGRITY AND NOT WASM AND NOT rtems AND TEST_use_gold_linker\n    ENABLE INPUT_linker STREQUAL 'gold' OR QT_FEATURE_use_gold_linker_alias\n    DISABLE INPUT_linker STREQUAL 'bfd' OR INPUT_linker STREQUAL 'lld'\n            OR INPUT_linker STREQUAL 'mold'\n)\nqt_feature_config(\"use_gold_linker\" QMAKE_PRIVATE_CONFIG)\n\nqt_feature(\"use_lld_linker\"\n    PRIVATE\n    LABEL \"lld\"\n    AUTODETECT false\n    CONDITION NOT MSVC AND NOT INTEGRITY AND NOT WASM AND TEST_use_lld_linker\n    ENABLE INPUT_linker STREQUAL 'lld'\n    DISABLE INPUT_linker STREQUAL 'bfd' OR INPUT_linker STREQUAL 'gold'\n            OR INPUT_linker STREQUAL 'mold'\n)\nqt_feature_config(\"use_lld_linker\" QMAKE_PRIVATE_CONFIG)\n\nqt_feature(\"use_mold_linker\"\n    PRIVATE\n    LABEL \"mold\"\n    AUTODETECT FALSE\n    CONDITION NOT WIN32 AND NOT INTEGRITY AND NOT WASM AND TEST_use_mold_linker\n    ENABLE INPUT_linker STREQUAL 'mold'\n    DISABLE INPUT_linker STREQUAL 'bfd' OR INPUT_linker STREQUAL 'gold'\n            OR INPUT_linker STREQUAL 'lld'\n)\nqt_feature_config(\"use_mold_linker\" QMAKE_PRIVATE_CONFIG)\n\nif(NOT QT_CONFIGURE_RUNNING)\n    qt_evaluate_feature(use_bfd_linker)\n    qt_evaluate_feature(use_gold_linker_alias)\n    qt_evaluate_feature(use_gold_linker)\n    qt_evaluate_feature(use_lld_linker)\n    qt_evaluate_feature(use_mold_linker)\n\n    qt_run_linker_version_script_support()\nendif()\n\nqt_feature(\"version_tagging\"\n    PUBLIC\n    AUTODETECT TRUE\n    CONDITION TEST_ld_version_script OR APPLE OR WIN32\n)\nqt_feature_definition(\"version_tagging\" \"QT_NO_VERSION_TAGGING\" NEGATE)\n\n#### Tests\n\n# machineTuple\nqt_config_compile_test_machine_tuple(\"machine tuple\")\n\n# glibc\nqt_config_compile_test(glibc\n    LABEL \"Using Glibc\"\n    CODE\n\"#include <features.h>\n#ifndef __GLIBC__\n#error\n#endif\nint main() {}\"\n)\n\n# glibc 2.34, for _FORTIFY_SOURCE == 3\nqt_config_compile_test(glibc_234\n    LABEL \"Using Glibc >= 2.34\"\n    CODE\n\"#include <features.h>\n#if !defined(__GLIBC__) || !__GLIBC_PREREQ(2, 34)\n#error\n#endif\nint main() {}\"\n)\n\n# cxx20\nqt_config_compile_test(cxx20\n    LABEL \"C++20 support\"\n    CODE\n\"#if __cplusplus > 201703L\n// Compiler claims to support C++20, trust it\n#else\n#  error __cplusplus must be > 201703L (the value for C++17)\n#endif\n\nint main(void)\n{\n    /* BEGIN TEST: */\n    /* END TEST: */\n    return 0;\n}\n\"\n    CXX_STANDARD 20\n)\n\nqt_config_compile_test(cxx2b\n    LABEL \"C++2b support\"\n    CODE\n\"#if __cplusplus > 202002L\n// Compiler claims to support C++2B, trust it\n#else\n#  error __cplusplus must be > 202002L (the value for C++20)\n#endif\n\nint main(void)\n{\n    /* BEGIN TEST: */\n    /* END TEST: */\n    return 0;\n}\n\"\n    CXX_STANDARD 23\n)\n\n# precompile_header\nqt_config_compile_test(precompile_header\n    LABEL \"precompiled header support\"\n    PROJECT_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/config.tests/precompile_header\"\n)\n\nqt_config_compiler_supports_flag_test(optimize_debug\n    LABEL \"-Og support\"\n    FLAG \"-Og\"\n)\n\nqt_config_compile_test(no_direct_extern_access\n    LABEL \"-mno-direct-extern-access / -fno-direct-access-external-data support\"\n    PROJECT_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/config.tests/no_direct_extern_access\"\n)\n\nqt_config_linker_supports_flag_test(enable_new_dtags\n    LABEL \"new dtags support\"\n    FLAG \"--enable-new-dtags\"\n)\n\nqt_config_linker_supports_flag_test(gdb_index\n    LABEL \"gdb index support\"\n    FLAG \"--gdb-index\"\n)\n\n# reduce_relocations\nqt_config_compile_test(reduce_relocations\n    LABEL \"-Bsymbolic-functions support\"\n    CODE\n\"#if !(defined(__i386) || defined(__i386__) || defined(__x86_64) || defined(__x86_64__) || defined(__amd64)) || defined(__sun)\n#  error Symbolic function binding on this architecture may be broken, disabling it (see QTBUG-36129).\n#endif\n\nint main(void)\n{\n    /* BEGIN TEST: */\n    /* END TEST: */\n    return 0;\n}\n\"# FIXME: qmake: ['TEMPLATE = lib', 'CONFIG += dll bsymbolic_functions', 'isEmpty(QMAKE_LFLAGS_BSYMBOLIC_FUNC): error(\"Nope\")']\n)\n\nif(MSVC OR APPLE)\n    # These platforms / toolchains support separate debug information. Skip the compile test.\n    set(TEST_separate_debug_info ON CACHE INTERNAL \"separate debug information support\")\nelse()\n    qt_config_compile_test(\"separate_debug_info\"\n                       LABEL \"separate debug information support\"\n                       PROJECT_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/config.tests/separate_debug_info\"\n    )\nendif()\n\n# signaling_nan\nqt_config_compile_test(signaling_nan\n    LABEL \"Signaling NaN for doubles\"\n    CODE\n\"#if defined(__ghs)  && (__GHS_VERSION_NUMBER <= 202014)\n#  error Signal NaNs are not supported by GHS compiler, but has_signaling_NaN returns TRUE. Will be fixed in future compiler releases.\n#endif\n\n#include <limits>\n\nint main(void)\n{\n    /* BEGIN TEST: */\nusing B = std::numeric_limits<double>;\nstatic_assert(B::has_signaling_NaN, \\\"System lacks signaling NaN\\\");\n    /* END TEST: */\n    return 0;\n}\n\")\n\n# basic x86 intrinsics support\nqt_config_compile_test(x86intrin\n    LABEL \"Basic x86 intrinsics\"\n    PROJECT_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/config.tests/x86intrin\"\n)\n\n# x86: avx512vbmi2\nqt_config_compile_test_x86simd(avx512vbmi2 \"AVX512VBMI2\")\n\n# x86: vaes\nqt_config_compile_test_x86simd(vaes \"VAES\")\n\n# arm: crypto\nqt_config_compile_test_armintrin(crypto \"CRYPTO\")\n\n# arm: sve\nqt_config_compile_test_armintrin(sve \"SVE\")\n\n# loongarch: lsx\nqt_config_compile_test_loongarchsimd(lsx \"LSX\")\n\n# loongarch: lasx\nqt_config_compile_test_loongarchsimd(lasx \"LASX\")\n\n# localtime_r\nqt_config_compile_test(localtime_r\n    LABEL \"localtime_r()\"\n    CODE\n\"#include <time.h>\n\nint main(void)\n{\n    /* BEGIN TEST: */\n(void) localtime_r(nullptr, nullptr);\n    /* END TEST: */\n    return 0;\n}\n\")\n\n# localtime_s\nqt_config_compile_test(localtime_s\n    LABEL \"localtime_s()\"\n    CODE\n\"#include <time.h>\n\nint main(void)\n{\n    /* BEGIN TEST: */\n(void) localtime_s(nullptr, nullptr);\n    /* END TEST: */\n    return 0;\n}\n\")\n\n# posix_fallocate\nqt_config_compile_test(posix_fallocate\n    LABEL \"POSIX fallocate()\"\n    CODE\n\"#include <fcntl.h>\n#include <unistd.h>\n\nint main(void)\n{\n    /* BEGIN TEST: */\n(void) posix_fallocate(0, 0, 0);\n    /* END TEST: */\n    return 0;\n}\n\")\n\n# stack_protector\nif(NOT WASM AND NOT VXWORKS)\n    # emcc doesn't support this, but the detection accidentally succeeds\n    # https://github.com/emscripten-core/emscripten/issues/17030\n\n    # VXWORKS: We currently don't know the correct linker options. This is\n    # tracked at QTBUG-123715\n    qt_config_compiler_supports_flag_test(stack_protector\n        LABEL \"stack protection\"\n        FLAG \"-fstack-protector-strong\"\n    )\nendif()\n\n# stack_clash_protection\nif(NOT CLANG) # https://gitlab.kitware.com/cmake/cmake/-/issues/21998\n    qt_config_compiler_supports_flag_test(stack_clash_protection\n        LABEL \"-fstack-clash-protection support\"\n        FLAG \"-fstack-clash-protection\"\n    )\nendif()\n\n# trivial_auto_var_init_pattern\nif(NOT GCC OR CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL \"14.2.0\")\n    # Causes broken codegen on GCC https://gcc.gnu.org/bugzilla/show_bug.cgi?id=115527\n    qt_config_compiler_supports_flag_test(trivial_auto_var_init_pattern\n        LABEL \"-ftrivial-auto-var-init=pattern support\"\n        FLAG \"-ftrivial-auto-var-init=pattern\"\n    )\nendif()\n\n# intelcet\nif(MSVC)\n    qt_config_linker_supports_flag_test(intelcet\n        LABEL \"Support for Intel Control-flow Enforcement Technology (CET)\"\n        FLAG \"-CETCOMPAT\"\n    )\nelse()\n    qt_config_compile_test(intelcet\n        LABEL \"Support for Intel Control-flow Enforcement Technology (CET)\"\n        COMPILE_OPTIONS -fcf-protection=full\n        CODE\n\"int main(void)\n{\n    /* BEGIN TEST: */\n#if !defined(__CET__)\n#  error Intel CET not available\n#endif\n    /* END TEST: */\n    return 0;\n}\n\"\n    )\nendif()\n\n# -z relro -z now\nif(NOT WIN32)\n    qt_config_linker_supports_flag_test(relro_now_linker\n        LABEL \"Support for -z relro and -z now\"\n        FLAG \"-z,relro,-z,now\"\n    )\nendif()\n\n# Is libc++ the default Standard Library?\nqt_config_compile_test(using_stdlib_libcpp\n    LABEL \"Compiler defaults to libc++\"\n    CODE\n\"\n#include <ciso646>\n\nint main(void)\n{\n/* BEGIN TEST: */\n#ifndef _LIBCPP_VERSION\n#   error\n#endif\n/* END TEST: */\n}\n\"\n)\n\n\n#### Features\n\n# This belongs into gui, but the license check needs it here already.\nqt_feature(\"android-style-assets\" PRIVATE\n    LABEL \"Android Style Assets\"\n    CONDITION ANDROID\n)\nqt_feature(\"shared\" PUBLIC\n    LABEL \"Building shared libraries\"\n    CONDITION BUILD_SHARED_LIBS\n)\nqt_feature_definition(\"shared\" \"QT_STATIC\" NEGATE PREREQUISITE \"!defined(QT_SHARED) && !defined(QT_STATIC)\")\nqt_feature_config(\"shared\" QMAKE_PUBLIC_QT_CONFIG)\nqt_feature_config(\"shared\" QMAKE_PUBLIC_CONFIG)\nqt_feature(\"static\" PUBLIC\n    CONDITION NOT QT_FEATURE_shared\n)\nqt_feature_config(\"static\" QMAKE_PUBLIC_QT_CONFIG)\nqt_feature_config(\"static\" QMAKE_PUBLIC_CONFIG)\nqt_feature(\"cross_compile\" PUBLIC\n    LABEL \"Cross compiling\"\n    CONDITION CMAKE_CROSSCOMPILING\n)\nqt_feature_config(\"cross_compile\" QMAKE_PUBLIC_CONFIG)\nqt_feature_config(\"cross_compile\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"gc_binaries\" PRIVATE\n    CONDITION NOT QT_FEATURE_shared\n)\nqt_feature(\"optimize_debug\"\n    LABEL \"Optimize debug build\"\n    AUTODETECT NOT QT_FEATURE_developer_build\n    CONDITION NOT MSVC AND NOT CLANG AND ( QT_FEATURE_debug OR QT_FEATURE_debug_and_release ) AND TEST_optimize_debug\n)\nqt_feature_config(\"optimize_debug\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"optimize_size\"\n    LABEL \"Optimize release build for size\"\n    AUTODETECT OFF\n    CONDITION NOT QT_FEATURE_debug OR QT_FEATURE_debug_and_release\n)\nqt_feature_config(\"optimize_size\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"optimize_full\"\n    LABEL \"Fully optimize release builds (-O3)\"\n    AUTODETECT OFF\n)\nqt_feature_config(\"optimize_full\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"msvc_obj_debug_info\"\n    LABEL \"Embed debug info in object files (MSVC)\"\n    ENABLE QT_USE_CCACHE\n    AUTODETECT OFF\n    EMIT_IF MSVC\n)\nqt_feature_config(\"msvc_obj_debug_info\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"pkg-config\" PUBLIC\n    LABEL \"Using pkg-config\"\n    AUTODETECT NOT APPLE AND NOT WIN32 AND NOT ANDROID\n    CONDITION PKG_CONFIG_FOUND\n)\nqt_feature_config(\"pkg-config\" QMAKE_PUBLIC_QT_CONFIG\n    NEGATE)\nqt_feature(\"developer-build\" PRIVATE\n    LABEL \"Developer build\"\n    AUTODETECT OFF\n)\nqt_feature(\"no-prefix\"\n    LABEL \"No prefix build\"\n    AUTODETECT NOT QT_WILL_INSTALL\n    CONDITION NOT QT_WILL_INSTALL\n)\nqt_feature(\"private_tests\" PRIVATE\n    LABEL \"Developer build: private_tests\"\n    CONDITION QT_FEATURE_developer_build\n)\nqt_feature(\"doc_snippets\" PRIVATE\n    LABEL \"Developer build: doc_snippets\"\n    AUTODETECT QT_FEATURE_developer_build\n    CONDITION QT_FEATURE_shared\n)\nqt_feature_definition(\"developer-build\" \"QT_BUILD_INTERNAL\")\nqt_feature_config(\"developer-build\" QMAKE_PUBLIC_QT_CONFIG\n    NAME \"private_tests\"\n)\nqt_feature(\"debug\" PRIVATE\n    LABEL \"Build for debugging\"\n    AUTODETECT ON\n    CONDITION CMAKE_BUILD_TYPE STREQUAL Debug OR Debug IN_LIST CMAKE_CONFIGURATION_TYPES\n)\nqt_feature(\"debug_and_release\" PUBLIC\n    LABEL \"Compile libs in debug and release mode\"\n    AUTODETECT 1\n    CONDITION QT_GENERATOR_IS_MULTI_CONFIG\n)\nqt_feature_config(\"debug_and_release\" QMAKE_PUBLIC_QT_CONFIG)\nqt_feature(\"force_debug_info\"\n    LABEL \"Add debug info in release mode\"\n    AUTODETECT CMAKE_BUILD_TYPE STREQUAL RelWithDebInfo OR RelWithDebInfo IN_LIST CMAKE_CONFIGURATION_TYPES\n)\nqt_feature_config(\"force_debug_info\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"separate_debug_info\" PUBLIC\n    LABEL \"Split off debug information\"\n    AUTODETECT OFF\n    CONDITION ( QT_FEATURE_shared ) AND ( QT_FEATURE_debug OR QT_FEATURE_debug_and_release OR QT_FEATURE_force_debug_info ) AND TEST_separate_debug_info\n)\nqt_feature_config(\"separate_debug_info\" QMAKE_PUBLIC_QT_CONFIG)\nqt_feature(\"appstore-compliant\" PUBLIC\n    LABEL \"App store compliance\"\n    PURPOSE \"Disables code that is not allowed in platform app stores\"\n    AUTODETECT UIKIT OR ANDROID\n)\nif(APPLE)\n    qt_feature_definition(\"appstore-compliant\" \"QT_APPLE_NO_PRIVATE_APIS\")\nendif()\nqt_feature(\"simulator_and_device\" PUBLIC\n    LABEL \"Build for both simulator and device\"\n    CONDITION IOS AND NOT QT_APPLE_SDK\n)\nqt_feature_config(\"simulator_and_device\" QMAKE_PUBLIC_QT_CONFIG)\nqt_feature(\"rpath\" PUBLIC\n    LABEL \"Build with RPATH\"\n    AUTODETECT 1\n    CONDITION BUILD_SHARED_LIBS AND UNIX AND NOT WIN32 AND NOT ANDROID\n)\nqt_feature_config(\"rpath\" QMAKE_PUBLIC_QT_CONFIG)\nqt_feature(\"elf_private_full_version\" PRIVATE\n    LABEL \"Use Qt's full version number in ELF version symbols\"\n    AUTODETECT OFF\n    CONDITION BUILD_SHARED_LIBS AND UNIX AND NOT APPLE\n)\nqt_feature_config(\"elf_private_full_version\" QMAKE_PRIVATE_QT_CONFIG)\nqt_feature(\"force_asserts\" PUBLIC\n    LABEL \"Force assertions\"\n    AUTODETECT OFF\n)\n\nqt_feature(\"exceptions\"\n    LABEL \"Enable exceptions\"\n    AUTODETECT OFF\n)\n\nqt_feature(\"framework\" PUBLIC\n    LABEL \"Build Apple Frameworks\"\n    AUTODETECT ON\n    # If changing this, please align with logic in\n    # qt_internal_setup_cmake_config_postfix.\n    CONDITION APPLE\n)\nqt_feature_definition(\"framework\" \"QT_MAC_FRAMEWORK_BUILD\")\nqt_feature_config(\"framework\" QMAKE_PUBLIC_QT_CONFIG\n    NAME \"qt_framework\"\n)\nqt_feature_config(\"framework\" QMAKE_PUBLIC_CONFIG\n    NAME \"qt_framework\"\n)\nqt_feature(\"largefile\"\n    LABEL \"Large file support\"\n    CONDITION NOT ANDROID AND NOT INTEGRITY AND NOT rtems\n)\nqt_feature_definition(\"largefile\" \"QT_LARGEFILE_SUPPORT\" VALUE \"64\")\nqt_feature_config(\"largefile\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"sanitize_address\"\n    LABEL \"Addresses\"\n    AUTODETECT OFF\n)\nqt_feature_config(\"sanitize_address\" QMAKE_PUBLIC_CONFIG)\nqt_feature(\"sanitize_thread\"\n    LABEL \"Threads\"\n    AUTODETECT OFF\n)\nqt_feature_config(\"sanitize_thread\" QMAKE_PUBLIC_CONFIG)\nqt_feature(\"sanitize_memory\"\n    LABEL \"Memory\"\n    AUTODETECT OFF\n)\nqt_feature_config(\"sanitize_memory\" QMAKE_PUBLIC_CONFIG)\nqt_feature(\"sanitize_fuzzer_no_link\"\n    LABEL \"Fuzzer (instrumentation only)\"\n    PURPOSE \"Adds instrumentation for fuzzing to the binaries but links to the usual main function instead of a fuzzer's.\"\n    AUTODETECT OFF\n)\nqt_feature_config(\"sanitize_fuzzer_no_link\" QMAKE_PUBLIC_CONFIG)\nqt_feature(\"sanitize_undefined\"\n    LABEL \"Undefined\"\n    AUTODETECT OFF\n)\nqt_feature_config(\"sanitize_undefined\" QMAKE_PUBLIC_CONFIG)\nqt_feature(\"sanitizer\"\n    LABEL \"Sanitizers\"\n    CONDITION QT_FEATURE_sanitize_address OR QT_FEATURE_sanitize_thread OR QT_FEATURE_sanitize_memory OR QT_FEATURE_sanitize_fuzzer_no_link OR QT_FEATURE_sanitize_undefined\n)\nqt_feature_config(\"sanitizer\" QMAKE_PUBLIC_CONFIG)\nqt_feature(\"plugin-manifests\"\n    LABEL \"Embed manifests in plugins\"\n    AUTODETECT OFF\n    EMIT_IF WIN32\n)\nqt_feature_config(\"plugin-manifests\" QMAKE_PUBLIC_CONFIG\n    NEGATE\n    NAME \"no_plugin_manifest\"\n)\nqt_feature(\"c++20\" PUBLIC\n    LABEL \"C++20\"\n    AUTODETECT OFF\n    CONDITION TEST_cxx20 AND NOT VXWORKS\n)\nqt_feature_config(\"c++20\" QMAKE_PUBLIC_QT_CONFIG)\nqt_feature(\"c++2a\" PUBLIC\n    LABEL \"C++20\"\n    CONDITION QT_FEATURE_cxx20\n)\nqt_feature_config(\"c++2a\" QMAKE_PUBLIC_QT_CONFIG)\nqt_feature(\"c++2b\" PUBLIC\n    LABEL \"C++2b\"\n    AUTODETECT OFF\n    CONDITION QT_FEATURE_cxx20 AND (CMAKE_VERSION VERSION_GREATER_EQUAL \"3.20\") AND TEST_cxx2b\n)\nqt_feature_config(\"c++2b\" QMAKE_PUBLIC_QT_CONFIG)\nqt_feature(\"precompile_header\"\n    LABEL \"Using precompiled headers\"\n    CONDITION BUILD_WITH_PCH AND TEST_precompile_header\n    AUTODETECT NOT WASM\n)\nqt_feature_config(\"precompile_header\" QMAKE_PRIVATE_CONFIG)\nset(__qt_ltcg_detected FALSE)\nif(CMAKE_INTERPROCEDURAL_OPTIMIZATION)\n    set(__qt_ltcg_detected TRUE)\nelse()\n    foreach(config ${CMAKE_BUILD_TYPE} ${CMAKE_CONFIGURATION_TYPES})\n        string(TOUPPER \"${config}\" __qt_uc_config)\n        if(CMAKE_INTERPROCEDURAL_OPTIMIZATION_${__qt_uc_config})\n            set(__qt_ltcg_detected TRUE)\n            break()\n        endif()\n    endforeach()\n    unset(__qt_uc_config)\nendif()\nqt_feature(\"ltcg\"\n    LABEL \"Using Link Time Optimization (LTCG)\"\n    AUTODETECT ON\n    CONDITION __qt_ltcg_detected\n)\nqt_feature_config(\"ltcg\" QMAKE_PRIVATE_CONFIG)\n\nif(NOT QT_CONFIGURE_RUNNING)\n    # This feature is used early in QtCompilerOptimization.cmake.\n    qt_evaluate_feature(ltcg)\nendif()\n\nqt_feature(\"enable_new_dtags\"\n    LABEL \"Using new DTAGS\"\n    CONDITION LINUX AND TEST_enable_new_dtags\n)\nqt_feature_config(\"enable_new_dtags\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"enable_gdb_index\"\n    LABEL \"Generating GDB index\"\n    AUTODETECT QT_FEATURE_developer_build\n    CONDITION GCC AND NOT CLANG AND ( QT_FEATURE_debug OR QT_FEATURE_force_debug_info OR QT_FEATURE_debug_and_release ) AND TEST_gdb_index\n)\nqt_feature_config(\"enable_gdb_index\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"reduce_exports\" PRIVATE\n    LABEL \"Reduce amount of exported symbols\"\n    CONDITION NOT MSVC\n)\nqt_feature_definition(\"reduce_exports\" \"QT_VISIBILITY_AVAILABLE\")\nqt_feature_config(\"reduce_exports\" QMAKE_PUBLIC_QT_CONFIG)\nqt_feature(\"no_direct_extern_access\" PRIVATE\n    LABEL \"Use protected visibility and -mno-direct-extern-access\"\n    CONDITION NOT WIN32 AND TEST_no_direct_extern_access\n    AUTODETECT OFF\n)\nqt_feature_definition(\"no_direct_extern_access\" \"QT_USE_PROTECTED_VISIBILITY\")\nqt_feature_config(\"no_direct_extern_access\" QMAKE_PUBLIC_QT_CONFIG)\nqt_feature(\"reduce_relocations\" PUBLIC\n    LABEL \"Reduce amount of relocations\"\n    CONDITION NOT WIN32 AND TEST_reduce_relocations\n)\nqt_feature_definition(\"reduce_relocations\" \"QT_REDUCE_RELOCATIONS\")\nqt_feature_config(\"reduce_relocations\" QMAKE_PUBLIC_QT_CONFIG)\nqt_feature(\"signaling_nan\" PUBLIC\n    LABEL \"Signaling NaN\"\n    CONDITION TEST_signaling_nan\n)\nqt_feature(\"x86intrin\" PRIVATE\n    LABEL \"Basic\"\n    CONDITION (((TEST_architecture_arch STREQUAL i386) OR (TEST_architecture_arch STREQUAL x86_64))\n        AND (QT_FORCE_FEATURE_x86intrin OR TEST_x86intrin))\n    AUTODETECT NOT WASM\n)\nqt_feature(\"sse2\" PRIVATE\n    CONDITION QT_FEATURE_x86intrin\n)\nqt_feature_definition(\"sse2\" \"QT_COMPILER_SUPPORTS_SSE2\" VALUE \"1\")\nqt_feature_config(\"sse2\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"sse3\" PRIVATE\n    CONDITION QT_FEATURE_x86intrin\n)\nqt_feature_definition(\"sse3\" \"QT_COMPILER_SUPPORTS_SSE3\" VALUE \"1\")\nqt_feature_config(\"sse3\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"ssse3\" PRIVATE\n    CONDITION QT_FEATURE_x86intrin\n)\nqt_feature_definition(\"ssse3\" \"QT_COMPILER_SUPPORTS_SSSE3\" VALUE \"1\")\nqt_feature_config(\"ssse3\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"sse4_1\" PRIVATE\n    CONDITION QT_FEATURE_x86intrin\n)\nqt_feature_definition(\"sse4_1\" \"QT_COMPILER_SUPPORTS_SSE4_1\" VALUE \"1\")\nqt_feature_config(\"sse4_1\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"sse4_2\" PRIVATE\n    CONDITION QT_FEATURE_x86intrin\n)\nqt_feature_definition(\"sse4_2\" \"QT_COMPILER_SUPPORTS_SSE4_2\" VALUE \"1\")\nqt_feature_config(\"sse4_2\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"avx\" PRIVATE\n    CONDITION QT_FEATURE_x86intrin\n)\nqt_feature_definition(\"avx\" \"QT_COMPILER_SUPPORTS_AVX\" VALUE \"1\")\nqt_feature_config(\"avx\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"f16c\" PRIVATE\n    CONDITION QT_FEATURE_x86intrin\n)\nqt_feature_definition(\"f16c\" \"QT_COMPILER_SUPPORTS_F16C\" VALUE \"1\")\nqt_feature_config(\"f16c\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"avx2\" PRIVATE\n    CONDITION QT_FEATURE_x86intrin\n)\nqt_feature_definition(\"avx2\" \"QT_COMPILER_SUPPORTS_AVX2\" VALUE \"1\")\nqt_feature_config(\"avx2\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"avx512f\" PRIVATE\n    CONDITION QT_FEATURE_x86intrin\n)\nqt_feature_definition(\"avx512f\" \"QT_COMPILER_SUPPORTS_AVX512F\" VALUE \"1\")\nqt_feature_config(\"avx512f\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"avx512er\" PRIVATE\n    CONDITION QT_FEATURE_x86intrin\n)\nqt_feature_definition(\"avx512er\" \"QT_COMPILER_SUPPORTS_AVX512ER\" VALUE \"1\")\nqt_feature_config(\"avx512er\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"avx512cd\" PRIVATE\n    CONDITION QT_FEATURE_x86intrin\n)\nqt_feature_definition(\"avx512cd\" \"QT_COMPILER_SUPPORTS_AVX512CD\" VALUE \"1\")\nqt_feature_config(\"avx512cd\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"avx512pf\" PRIVATE\n    CONDITION QT_FEATURE_x86intrin\n)\nqt_feature_definition(\"avx512pf\" \"QT_COMPILER_SUPPORTS_AVX512PF\" VALUE \"1\")\nqt_feature_config(\"avx512pf\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"avx512dq\" PRIVATE\n    CONDITION QT_FEATURE_x86intrin\n)\nqt_feature_definition(\"avx512dq\" \"QT_COMPILER_SUPPORTS_AVX512DQ\" VALUE \"1\")\nqt_feature_config(\"avx512dq\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"avx512bw\" PRIVATE\n    CONDITION QT_FEATURE_x86intrin\n)\nqt_feature_definition(\"avx512bw\" \"QT_COMPILER_SUPPORTS_AVX512BW\" VALUE \"1\")\nqt_feature_config(\"avx512bw\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"avx512vl\" PRIVATE\n    CONDITION QT_FEATURE_x86intrin\n)\nqt_feature_definition(\"avx512vl\" \"QT_COMPILER_SUPPORTS_AVX512VL\" VALUE \"1\")\nqt_feature_config(\"avx512vl\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"avx512ifma\" PRIVATE\n    CONDITION QT_FEATURE_x86intrin\n)\nqt_feature_definition(\"avx512ifma\" \"QT_COMPILER_SUPPORTS_AVX512IFMA\" VALUE \"1\")\nqt_feature_config(\"avx512ifma\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"avx512vbmi\" PRIVATE\n    CONDITION QT_FEATURE_x86intrin\n)\nqt_feature_definition(\"avx512vbmi\" \"QT_COMPILER_SUPPORTS_AVX512VBMI\" VALUE \"1\")\nqt_feature_config(\"avx512vbmi\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"avx512vbmi2\" PRIVATE\n    LABEL \"AVX512VBMI2\"\n    CONDITION QT_FEATURE_x86intrin AND TEST_subarch_avx512vbmi2\n)\nqt_feature_definition(\"avx512vbmi2\" \"QT_COMPILER_SUPPORTS_AVX512VBMI2\" VALUE \"1\")\nqt_feature_config(\"avx512vbmi2\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"aesni\" PRIVATE\n    CONDITION QT_FEATURE_x86intrin\n)\nqt_feature_definition(\"aesni\" \"QT_COMPILER_SUPPORTS_AES\" VALUE \"1\")\nqt_feature_config(\"aesni\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"vaes\" PRIVATE\n    LABEL \"VAES\"\n    CONDITION QT_FEATURE_x86intrin AND TEST_subarch_vaes\n)\nqt_feature_definition(\"vaes\" \"QT_COMPILER_SUPPORTS_VAES\" VALUE \"1\")\nqt_feature_config(\"vaes\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"rdrnd\" PRIVATE\n    CONDITION QT_FEATURE_x86intrin\n)\nqt_feature_definition(\"rdrnd\" \"QT_COMPILER_SUPPORTS_RDRND\" VALUE \"1\")\nqt_feature_config(\"rdrnd\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"rdseed\" PRIVATE\n    CONDITION QT_FEATURE_x86intrin\n)\nqt_feature_definition(\"rdseed\" \"QT_COMPILER_SUPPORTS_RDSEED\" VALUE \"1\")\nqt_feature_config(\"rdseed\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"shani\" PRIVATE\n    CONDITION QT_FEATURE_x86intrin\n)\nqt_feature_definition(\"shani\" \"QT_COMPILER_SUPPORTS_SHA\" VALUE \"1\")\nqt_feature_config(\"shani\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"lsx\" PRIVATE\n    LABEL \"LSX\"\n    CONDITION ( TEST_architecture_arch STREQUAL loongarch64 ) AND TEST_subarch_lsx\n)\nqt_feature_definition(\"lsx\" \"QT_COMPILER_SUPPORTS_LSX\" VALUE \"1\")\nqt_feature_config(\"lsx\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"lasx\" PRIVATE\n    LABEL \"LASX\"\n    CONDITION ( TEST_architecture_arch STREQUAL loongarch64 ) AND TEST_subarch_lasx\n)\nqt_feature_definition(\"lasx\" \"QT_COMPILER_SUPPORTS_LASX\" VALUE \"1\")\nqt_feature_config(\"lasx\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"mips_dsp\" PRIVATE\n    LABEL \"DSP\"\n    CONDITION ( TEST_architecture_arch STREQUAL mips ) AND TEST_arch_${TEST_architecture_arch}_subarch_dsp\n)\nqt_feature_definition(\"mips_dsp\" \"QT_COMPILER_SUPPORTS_MIPS_DSP\" VALUE \"1\")\nqt_feature_config(\"mips_dsp\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"mips_dspr2\" PRIVATE\n    LABEL \"DSPr2\"\n    CONDITION ( TEST_architecture_arch STREQUAL mips ) AND TEST_arch_${TEST_architecture_arch}_subarch_dspr2\n)\nqt_feature_definition(\"mips_dspr2\" \"QT_COMPILER_SUPPORTS_MIPS_DSPR2\" VALUE \"1\")\nqt_feature_config(\"mips_dspr2\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"neon\" PRIVATE\n    LABEL \"NEON\"\n    CONDITION ( ( ( TEST_architecture_arch STREQUAL arm ) OR\n        ( TEST_architecture_arch STREQUAL arm64 ) ) AND\n        TEST_arch_${TEST_architecture_arch}_subarch_neon ) OR QT_FORCE_FEATURE_neon\n)\nqt_feature_definition(\"neon\" \"QT_COMPILER_SUPPORTS_NEON\" VALUE \"1\")\nqt_feature_config(\"neon\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"arm_crc32\" PRIVATE\n    LABEL \"CRC32\"\n    CONDITION ( ( TEST_architecture_arch STREQUAL arm ) OR ( TEST_architecture_arch STREQUAL arm64 ) ) AND TEST_arch_${TEST_architecture_arch}_subarch_crc32\n)\nqt_feature_definition(\"arm_crc32\" \"QT_COMPILER_SUPPORTS_CRC32\" VALUE \"1\")\nqt_feature_config(\"arm_crc32\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"arm_crypto\" PRIVATE\n    LABEL \"AES\"\n    CONDITION ( ( TEST_architecture_arch STREQUAL arm ) OR ( TEST_architecture_arch STREQUAL arm64 ) ) AND ( TEST_arch_${TEST_architecture_arch}_subarch_crypto OR TEST_subarch_crypto )\n)\nqt_feature_definition(\"arm_crypto\" \"QT_COMPILER_SUPPORTS_CRYPTO\" VALUE \"1\")\nqt_feature_definition(\"arm_crypto\" \"QT_COMPILER_SUPPORTS_AES\" VALUE \"1\")\nqt_feature_config(\"arm_crypto\" QMAKE_PRIVATE_CONFIG)\n\nqt_feature(\"arm_sve\" PRIVATE\n    LABEL \"SVE\"\n    CONDITION ( TEST_architecture_arch STREQUAL arm64 ) AND ( TEST_arch_${TEST_architecture_arch}_subarch_sve OR TEST_subarch_sve )\n)\nqt_feature_definition(\"arm_sve\" \"QT_COMPILER_SUPPORTS_SVE\" VALUE \"1\")\nqt_feature_config(\"arm_sve\" QMAKE_PRIVATE_CONFIG)\n\nqt_feature(\"wasm-simd128\" PUBLIC\n    LABEL \"WebAssembly SIMD128\"\n    PURPOSE \"Enables WebAssembly SIMD\"\n    AUTODETECT OFF\n)\nqt_feature_definition(\"wasm-simd128\" \"QT_COMPILER_SUPPORTS_WASM_SIMD128\" VALUE \"1\")\nqt_feature_config(\"wasm-simd128\" QMAKE_PRIVATE_CONFIG)\n\nqt_feature(\"wasm-exceptions\" PUBLIC\n    LABEL \"WebAssembly Exceptions\"\n    PURPOSE \"Enables WebAssembly Exceptions\"\n    AUTODETECT OFF\n)\nqt_feature_definition(\"wasm-exceptions\" \"QT_WASM_EXCEPTIONS\" VALUE \"1\")\nqt_feature_config(\"wasm-exceptions\" QMAKE_PRIVATE_CONFIG)\n\nqt_feature(\"wasm-jspi\" PUBLIC\n    LABEL \"WebAssembly JSPI\"\n    PURPOSE \"Enables WebAssembly JavaScript Promise Integration (JSPI)\"\n    AUTODETECT OFF\n)\nqt_feature_definition(\"wasm-jspi\" \"QT_WASM_JSPI\" VALUE \"1\")\nqt_feature_config(\"wasm-jspi\" QMAKE_PRIVATE_CONFIG)\n\nqt_feature(\"localtime_r\" PRIVATE\n    LABEL \"localtime_r()\"\n    CONDITION TEST_localtime_r\n)\nqt_feature(\"localtime_s\" PRIVATE\n    LABEL \"localtime_s()\"\n    CONDITION TEST_localtime_s\n)\nqt_feature(\"posix_fallocate\" PRIVATE\n    LABEL \"POSIX fallocate()\"\n    CONDITION TEST_posix_fallocate\n)\nqt_feature(\"force-system-libs\" PRIVATE\n    LABEL \"Force the usage of system libraries\"\n    AUTODETECT OFF\n)\nqt_feature(\"force-bundled-libs\" PRIVATE\n    LABEL \"Force the usage of bundled libraries\"\n    AUTODETECT OFF\n)\nqt_feature(\"system-zlib\" PRIVATE SYSTEM_LIBRARY\n    LABEL \"Using system zlib\"\n    CONDITION WrapSystemZLIB_FOUND\n)\nqt_feature(\"zstd\" PUBLIC\n    LABEL \"Zstandard support\"\n    CONDITION WrapZSTD_FOUND\n)\nqt_feature(\"stdlib-libcpp\" PRIVATE\n    LABEL \"Using stdlib=libc++\"\n    AUTODETECT OFF\n    CONDITION MINGW OR (LINUX AND NOT ANDROID)\n)\n# Check whether CMake was built with zstd support.\n# See https://gitlab.kitware.com/cmake/cmake/-/issues/21552\nif(NOT DEFINED CACHE{QT_CMAKE_ZSTD_SUPPORT})\n    set(QT_CMAKE_ZSTD_SUPPORT FALSE CACHE INTERNAL \"\")\n    if(CMAKE_VERSION VERSION_GREATER_EQUAL \"3.18\")\n        execute_process(COMMAND \"${CMAKE_COMMAND}\"\n            -P \"${CMAKE_CURRENT_SOURCE_DIR}/config.tests/cmake_zstd/check_zstd.cmake\"\n            WORKING_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/config.tests\"\n            OUTPUT_QUIET ERROR_QUIET\n            RESULT_VARIABLE qt_check_zstd_exit_code)\n        if(qt_check_zstd_exit_code EQUAL 0)\n            set(QT_CMAKE_ZSTD_SUPPORT TRUE CACHE INTERNAL \"\")\n        endif()\n        unset(qt_check_zstd_exit_code)\n    endif()\nendif()\nqt_feature(\"thread\" PUBLIC\n    SECTION \"Kernel\"\n    LABEL \"Thread support\"\n    PURPOSE \"Provides QThread and related classes.\"\n    AUTODETECT NOT WASM\n)\nqt_feature(\"future\" PUBLIC\n    SECTION \"Kernel\"\n    LABEL \"QFuture\"\n    PURPOSE \"Provides QFuture and related classes.\"\n    CONDITION QT_FEATURE_thread\n)\nqt_feature(\"concurrent\" PUBLIC\n    SECTION \"Kernel\"\n    LABEL \"Qt Concurrent\"\n    PURPOSE \"Provides a high-level multi-threading API.\"\n    CONDITION QT_FEATURE_future\n)\nqt_feature_definition(\"concurrent\" \"QT_NO_CONCURRENT\" NEGATE VALUE \"1\")\nqt_feature(\"dbus\" PUBLIC PRIVATE\n    LABEL \"Qt D-Bus\"\n    AUTODETECT NOT UIKIT AND NOT ANDROID AND NOT VXWORKS\n    CONDITION QT_FEATURE_thread AND NOT WASM\n)\nqt_feature_definition(\"dbus\" \"QT_NO_DBUS\" NEGATE VALUE \"1\")\nqt_feature(\"dbus-linked\" PRIVATE\n    LABEL \"Qt D-Bus directly linked to libdbus\"\n    CONDITION QT_FEATURE_dbus AND DBus1_FOUND\n    ENABLE INPUT_dbus STREQUAL 'linked'\n    DISABLE INPUT_dbus STREQUAL 'runtime'\n)\nqt_feature(\"qreal\"\n    LABEL \"Type for qreal\"\n    CONDITION DEFINED QT_COORD_TYPE AND NOT QT_COORD_TYPE STREQUAL \"double\"\n)\nqt_feature_definition(\"qreal\" \"QT_COORD_TYPE\" VALUE \"${QT_COORD_TYPE}\")\nqt_feature_definition(\"qreal\" \"QT_COORD_TYPE_STRING\" VALUE \"\\\"${QT_COORD_TYPE}\\\"\")\nif(QT_COORD_TYPE STREQUAL \"double\")\n    qt_feature_definition(\"qreal\" \"QT_COORD_TYPE_IS_DOUBLE\" VALUE \"1\")\nelseif(QT_COORD_TYPE STREQUAL \"float\")\n    qt_feature_definition(\"qreal\" \"QT_COORD_TYPE_IS_FLOAT\" VALUE \"1\")\nendif()\nqt_feature(\"gui\" PRIVATE\n    LABEL \"Qt Gui\"\n)\nqt_feature_config(\"gui\" QMAKE_PUBLIC_QT_CONFIG\n    NEGATE)\nqt_feature(\"network\" PRIVATE\n    LABEL \"Qt Network\"\n    SECTION \"Module\"\n    PURPOSE \"Provides the Qt Network module.\"\n)\nqt_feature(\"printsupport\" PRIVATE\n    LABEL \"Qt PrintSupport\"\n    CONDITION QT_FEATURE_widgets\n    SECTION \"Module\"\n    PURPOSE \"Provides the Qt PrintSupport module.\"\n)\nqt_feature(\"sql\" PRIVATE\n    LABEL \"Qt Sql\"\n    SECTION \"Module\"\n    PURPOSE \"Provides the Sql module.\"\n)\nqt_feature(\"testlib\" PRIVATE\n    LABEL \"Qt Testlib\"\n    SECTION \"Module\"\n    PURPOSE \"Provides the Qt Testlib module.\"\n)\nqt_feature(\"widgets\" PRIVATE\n    LABEL \"Qt Widgets\"\n    AUTODETECT NOT TVOS AND NOT WATCHOS\n    CONDITION QT_FEATURE_gui\n)\nqt_feature_definition(\"widgets\" \"QT_NO_WIDGETS\" NEGATE)\nqt_feature_config(\"widgets\" QMAKE_PUBLIC_QT_CONFIG\n    NEGATE)\nqt_feature(\"xml\" PRIVATE\n    LABEL \"Qt Xml\"\n    SECTION \"Module\"\n    PURPOSE \"Provides the Qt Xml module.\"\n)\nqt_feature(\"libudev\" PRIVATE\n    LABEL \"udev\"\n    CONDITION Libudev_FOUND AND NOT INTEGRITY\n)\nqt_feature(\"openssl\" PRIVATE\n    LABEL \"OpenSSL\"\n    CONDITION QT_FEATURE_openssl_runtime OR QT_FEATURE_openssl_linked\n    ENABLE false\n)\nqt_feature_definition(\"openssl\" \"QT_NO_OPENSSL\" NEGATE)\nqt_feature_config(\"openssl\" QMAKE_PUBLIC_QT_CONFIG)\nqt_feature(\"openssl-runtime\"\n    AUTODETECT NOT WASM\n    CONDITION TEST_opensslv11_headers OR TEST_opensslv30_headers\n    ENABLE INPUT_openssl STREQUAL 'yes' OR INPUT_openssl STREQUAL 'runtime'\n    DISABLE INPUT_openssl STREQUAL 'no' OR INPUT_openssl STREQUAL 'linked' OR INPUT_ssl STREQUAL 'no'\n)\nqt_feature(\"openssl-linked\" PUBLIC\n    LABEL \"  Qt directly linked to OpenSSL\"\n    AUTODETECT OFF\n    CONDITION TEST_opensslv11 OR TEST_opensslv30\n    ENABLE INPUT_openssl STREQUAL 'linked'\n)\nqt_feature_definition(\"openssl-linked\" \"QT_LINKED_OPENSSL\")\nqt_feature(\"opensslv11\" PUBLIC\n    LABEL \"OpenSSL 1.1\"\n    CONDITION TEST_opensslv11 OR TEST_opensslv11_headers\n    DISABLE INPUT_openssl STREQUAL 'no' OR INPUT_ssl STREQUAL 'no'\n)\nqt_feature(\"opensslv30\" PUBLIC\n    LABEL \"OpenSSL 3.0\"\n    CONDITION TEST_opensslv30 OR TEST_opensslv30_headers\n    DISABLE INPUT_openssl STREQUAL 'no' OR INPUT_ssl STREQUAL 'no'\n)\nqt_feature(\"ccache\"\n    LABEL \"Using ccache\"\n    AUTODETECT 1\n    CONDITION QT_USE_CCACHE\n)\nqt_feature_config(\"ccache\" QMAKE_PRIVATE_CONFIG)\nqt_feature(\"static_runtime\"\n    LABEL \"Statically link the C/C++ runtime library\"\n    AUTODETECT OFF\n    CONDITION NOT QT_FEATURE_shared\n    EMIT_IF WIN32\n)\nqt_feature_config(\"static_runtime\" QMAKE_PUBLIC_CONFIG)\nqt_feature_config(\"static_runtime\" QMAKE_PUBLIC_QT_CONFIG)\nqt_feature(\"dlopen\" PRIVATE\n    LABEL \"dlopen()\"\n    CONDITION UNIX AND NOT INTEGRITY\n)\nqt_feature(\"relocatable\" PRIVATE\n    LABEL \"Relocatable\"\n    PURPOSE \"Enable the Qt installation to be relocated.\"\n    AUTODETECT QT_FEATURE_shared\n    CONDITION QT_FEATURE_dlopen OR WIN32 OR NOT QT_FEATURE_shared\n)\n# hardening features\nqt_feature(\"intelcet\" PRIVATE\n    LABEL \"Using Intel Control-flow Enforcement Technology (CET)\"\n    AUTODETECT ON\n    CONDITION TEST_intelcet\n)\nqt_feature_config(\"intelcet\" QMAKE_PUBLIC_CONFIG)\nqt_feature(\"glibc_fortify_source\" PRIVATE\n    LABEL \"Using Glibc function fortification\"\n    AUTODETECT ON\n    CONDITION TEST_glibc\n)\nqt_feature_config(\"glibc_fortify_source\" QMAKE_PUBLIC_CONFIG)\nqt_feature(\"trivial_auto_var_init_pattern\" PRIVATE\n    LABEL \"Using -ftrivial-auto-var-init=pattern\"\n    AUTODETECT ON\n    CONDITION TEST_trivial_auto_var_init_pattern\n)\nqt_feature_config(\"trivial_auto_var_init_pattern\" QMAKE_PUBLIC_CONFIG)\nqt_feature(\"stack_protector\" PRIVATE\n    LABEL \"Using -fstack-protector-strong\"\n    AUTODETECT ON\n    CONDITION TEST_stack_protector\n)\nqt_feature_config(\"stack_protector\" QMAKE_PUBLIC_CONFIG)\nqt_feature(\"stack_clash_protection\" PRIVATE\n    LABEL \"Using -fstack-clash-protection\"\n    AUTODETECT ON\n    CONDITION TEST_stack_clash_protection\n)\nqt_feature_config(\"stack_clash_protection\" QMAKE_PUBLIC_CONFIG)\nqt_feature(\"libstdcpp_assertions\" PRIVATE\n    LABEL \"Using libstdc++ assertions\"\n    AUTODETECT ON\n    CONDITION (GCC OR (CLANG AND NOT MSVC AND NOT QT_FEATURE_stdlib_libcpp AND NOT TEST_using_stdlib_libcpp))\n)\nqt_feature_config(\"libstdcpp_assertions\" QMAKE_PUBLIC_CONFIG)\nqt_feature(\"libcpp_hardening\" PRIVATE\n    LABEL \"Using libc++ hardening\"\n    AUTODETECT ON\n    CONDITION (QT_FEATURE_stdlib_libcpp OR TEST_using_stdlib_libcpp)\n)\nqt_feature_config(\"libcpp_hardening\" QMAKE_PUBLIC_CONFIG)\nqt_feature(\"relro_now_linker\" PRIVATE\n    LABEL \"Using -z relro -z now when linking\"\n    AUTODETECT ON\n    CONDITION TEST_relro_now_linker\n)\nqt_feature_config(\"relro_now_linker\" QMAKE_PUBLIC_CONFIG)\n\n\nif(\"${INPUT_coverage}\" STREQUAL \"gcov\")\n    qt_config_compile_test(gcov\n        LABEL \"gcov compiler flags\"\n        COMPILE_OPTIONS \"--coverage\"\n        CODE\n    \"int main(void)\n    {\n        /* BEGIN TEST: */\n        /* END TEST: */\n        return 0;\n    }\n    \")\nendif()\n\nqt_feature(\"coverage-gcov\"\n    LABEL \"Gcov\"\n    ENABLE INPUT_coverage STREQUAL \"gcov\"\n    CONDITION TEST_gcov AND\n        ( QT_FEATURE_debug OR QT_FEATURE_debug_and_release )\n)\n\nqt_feature(\"coverage\"\n    LABEL \"Coverage\"\n    CONDITION QT_FEATURE_coverage_gcov\n)\n\nqt_configure_add_summary_build_type_and_config()\nqt_configure_add_summary_section(NAME \"Build options\")\nqt_configure_add_summary_build_mode(Mode)\nqt_configure_add_summary_entry(\n    ARGS \"optimize_debug\"\n    CONDITION NOT MSVC AND NOT CLANG AND ( QT_FEATURE_debug OR QT_FEATURE_debug_and_release )\n)\nqt_configure_add_summary_entry(\n    ARGS \"optimize_size\"\n    CONDITION NOT QT_FEATURE_debug OR QT_FEATURE_debug_and_release\n)\nqt_configure_add_summary_entry(\n    ARGS \"optimize_full\"\n)\nqt_configure_add_summary_entry(ARGS \"shared\")\nqt_configure_add_summary_entry(\n    ARGS \"ccache\"\n    CONDITION UNIX\n)\nqt_configure_add_summary_entry(\n    TYPE \"message\" ARGS \"Unity Build\" MESSAGE \"yes\" CONDITION QT_UNITY_BUILD\n)\nqt_configure_add_summary_entry(\n    TYPE \"message\" ARGS \"Unity Build\" MESSAGE \"no\" CONDITION NOT QT_UNITY_BUILD\n)\nqt_configure_add_summary_entry(\n    TYPE \"message\"\n    ARGS \"Unity Build Batch Size\"\n    MESSAGE \"${QT_UNITY_BUILD_BATCH_SIZE}\"\n    CONDITION QT_UNITY_BUILD\n)\nqt_configure_add_summary_entry(\n    TYPE \"firstAvailableFeature\"\n    ARGS \"use_bfd_linker use_gold_linker use_lld_linker use_mold_linker\"\n    MESSAGE \"Linker\"\n    CONDITION QT_FEATURE_use_bfd_linker OR QT_FEATURE_use_gold_linker OR QT_FEATURE_use_lld_linker\n              OR QT_FEATURE_use_mold_linker\n)\nqt_configure_add_summary_entry(\n    ARGS \"enable_new_dtags\"\n    CONDITION LINUX\n)\nqt_configure_add_summary_entry(\n    ARGS \"enable_gdb_index\"\n    CONDITION GCC AND NOT CLANG AND ( QT_FEATURE_debug OR QT_FEATURE_force_debug_info OR QT_FEATURE_debug_and_release )\n)\nqt_configure_add_summary_entry(ARGS \"relocatable\")\nqt_configure_add_summary_entry(ARGS \"precompile_header\")\nqt_configure_add_summary_entry(ARGS \"ltcg\")\nqt_configure_add_summary_entry(ARGS \"intelcet\")\nqt_configure_add_summary_entry(ARGS \"glibc_fortify_source\")\nqt_configure_add_summary_entry(ARGS \"trivial_auto_var_init_pattern\")\nqt_configure_add_summary_entry(ARGS \"stack_protector\")\nqt_configure_add_summary_entry(ARGS \"stack_clash_protection\")\nqt_configure_add_summary_entry(ARGS \"libstdcpp_assertions\")\nqt_configure_add_summary_entry(ARGS \"libcpp_hardening\")\nqt_configure_add_summary_entry(ARGS \"relro_now_linker\")\nqt_configure_add_summary_entry(\n    ARGS \"wasm-simd128\"\n    CONDITION ( TEST_architecture_arch STREQUAL wasm )\n)\nqt_configure_add_summary_entry(\n    ARGS \"wasm-exceptions\"\n    CONDITION ( TEST_architecture_arch STREQUAL wasm )\n)\nqt_configure_add_summary_entry(\n    ARGS \"wasm-jspi\"\n    CONDITION ( TEST_architecture_arch STREQUAL wasm )\n)\nqt_configure_add_summary_section(NAME \"Target compiler supports\")\nqt_configure_add_summary_entry(\n    TYPE \"featureList\"\n    ARGS \"x86intrin vaes avx512vbmi2\"\n    MESSAGE \"x86 Intrinsics\"\n    CONDITION ( ( TEST_architecture_arch STREQUAL i386 ) OR ( TEST_architecture_arch STREQUAL x86_64 ) )\n)\nqt_configure_add_summary_entry(\n    TYPE \"featureList\"\n    ARGS \"neon arm_crc32 arm_crypto arm_sve\"\n    MESSAGE \"ARM Extensions\"\n    CONDITION ( TEST_architecture_arch STREQUAL arm ) OR ( TEST_architecture_arch STREQUAL arm64 )\n)\nqt_configure_add_summary_entry(\n    TYPE \"featureList\"\n    ARGS \"lsx lasx\"\n    MESSAGE \"LOONGARCH Extensions\"\n    CONDITION ( TEST_architecture_arch STREQUAL loongarch64 )\n)\nqt_configure_add_summary_entry(\n    ARGS \"mips_dsp\"\n    CONDITION ( TEST_architecture_arch STREQUAL mips )\n)\nqt_configure_add_summary_entry(\n    ARGS \"mips_dspr2\"\n    CONDITION ( TEST_architecture_arch STREQUAL mips )\n)\nqt_configure_end_summary_section() # end of \"Target compiler supports\" section\nqt_configure_add_summary_section(NAME \"Sanitizers\")\nqt_configure_add_summary_entry(ARGS \"sanitize_address\")\nqt_configure_add_summary_entry(ARGS \"sanitize_thread\")\nqt_configure_add_summary_entry(ARGS \"sanitize_memory\")\nqt_configure_add_summary_entry(ARGS \"sanitize_fuzzer_no_link\")\nqt_configure_add_summary_entry(ARGS \"sanitize_undefined\")\nqt_configure_end_summary_section() # end of \"Sanitizers\" section\nqt_configure_add_summary_build_parts(\"Build parts\")\nif(QT_INSTALL_EXAMPLES_SOURCES)\n    set(_examples_sources_entry_message \"yes\")\nelse()\n    set(_examples_sources_entry_message \"no\")\nendif()\nqt_configure_add_summary_entry(ARGS \"Install examples sources\" TYPE \"message\"\n    MESSAGE \"${_examples_sources_entry_message}\")\nqt_configure_add_summary_entry(\n    ARGS \"appstore-compliant\"\n    CONDITION APPLE OR ANDROID OR WIN32\n)\nqt_configure_end_summary_section() # end of \"Build options\" section\nqt_configure_add_summary_section(NAME \"Qt modules and options\")\nqt_configure_add_summary_entry(ARGS \"concurrent\")\nqt_configure_add_summary_entry(ARGS \"dbus\")\nqt_configure_add_summary_entry(ARGS \"dbus-linked\")\nqt_configure_add_summary_entry(ARGS \"gui\")\nqt_configure_add_summary_entry(ARGS \"network\")\nqt_configure_add_summary_entry(ARGS \"printsupport\")\nqt_configure_add_summary_entry(ARGS \"sql\")\nqt_configure_add_summary_entry(ARGS \"testlib\")\nqt_configure_add_summary_entry(ARGS \"widgets\")\nqt_configure_add_summary_entry(ARGS \"xml\")\nqt_configure_end_summary_section() # end of \"Qt modules and options\" section\nqt_configure_add_summary_section(NAME \"Support enabled for\")\nqt_configure_add_summary_entry(ARGS \"pkg-config\")\n\nif(QT_USE_VCPKG AND (DEFINED ENV{VCPKG_ROOT} OR VCPKG_TARGET_TRIPLET))\n    set(_vcpkg_entry_message \"yes\")\nelse()\n    set(_vcpkg_entry_message \"no\")\nendif()\nqt_configure_add_summary_entry(ARGS \"Using vcpkg\" TYPE \"message\" MESSAGE \"${_vcpkg_entry_message}\")\n\nqt_configure_add_summary_entry(ARGS \"libudev\")\nqt_configure_add_summary_entry(ARGS \"openssl\")\nqt_configure_add_summary_entry(ARGS \"openssl-linked\")\nqt_configure_add_summary_entry(ARGS \"opensslv11\")\nqt_configure_add_summary_entry(ARGS \"opensslv30\")\nqt_configure_add_summary_entry(ARGS \"system-zlib\")\nqt_configure_add_summary_entry(ARGS \"zstd\")\nqt_configure_add_summary_entry(ARGS \"thread\")\nqt_configure_end_summary_section() # end of \"Support enabled for\" section\nqt_configure_add_report_entry(\n    TYPE NOTE\n    MESSAGE \"Using static linking will disable the use of dynamically loaded plugins. Make sure to import all needed static plugins, or compile needed modules into the library.\"\n    CONDITION NOT QT_FEATURE_shared\n)\nqt_configure_add_report_entry(\n    TYPE WARNING\n    MESSAGE \"-debug-and-release is only supported on Darwin and Windows platforms.  Qt can be built in release mode with separate debug information, so -debug-and-release is no longer necessary.\"\n    CONDITION INPUT_debug_and_release STREQUAL 'yes' AND NOT APPLE AND NOT WIN32\n)\nqt_configure_add_report_entry(\n    TYPE ERROR\n    MESSAGE \"Static builds don't support RPATH\"\n    CONDITION ( QT_FEATURE_rpath OR QT_EXTRA_RPATHS ) AND NOT QT_FEATURE_shared\n)\nqt_configure_add_report_entry(\n    TYPE ERROR\n    MESSAGE \"Command line option -sanitize fuzzer-no-link is only supported with clang compilers.\"\n    CONDITION QT_FEATURE_sanitize_fuzzer_no_link AND NOT CLANG\n)\nif (TEST_architecture_arch STREQUAL x86_64 OR TEST_architecture_arch STREQUAL i386)\n    if ((TEST_architecture_arch STREQUAL i386) OR QNX OR WASM)\n        # Warn only\n        qt_configure_add_report_entry(\n            TYPE WARNING\n            CONDITION (NOT QT_FEATURE_x86intrin)\n            MESSAGE [=[\nAll x86 intrinsics and SIMD support were disabled. If this was in error, check\nthe result of the build in config.tests/x86intrin and report at https://bugreports.qt.io.\n]=]\n        )\n    elseif (MSVC AND CLANG)\n        # Warn only\n        qt_configure_add_report_entry(\n            TYPE WARNING\n            CONDITION (NOT QT_FEATURE_x86intrin)\n            MESSAGE [=[\nx86 intrinsics support is disabled for clang-cl build. This might be necessary due to\nhttps://github.com/llvm/llvm-project/issues/53520\n]=]\n        )\n    else()\n        string(CONCAT error_message\n            \"x86 intrinsics support missing. Check your compiler settings.\\n\"\n            \"If this is an error, report at https://bugreports.qt.io with your compiler ID and \"\n            \"version, and this output:\\n\"\n            \"\\n\"\n            \"${TEST_x86intrin_OUTPUT}\"\n        )\n        qt_configure_add_report_entry(\n            TYPE ERROR\n            CONDITION (NOT QT_FEATURE_x86intrin)\n            MESSAGE \"${error_message}\"\n        )\n    endif()\nendif()\nqt_configure_add_report_entry(\n    TYPE ERROR\n    MESSAGE \"Setting a library infix is not supported for framework builds.\"\n    CONDITION QT_FEATURE_framework AND DEFINED QT_LIBINFIX\n)\nqt_configure_add_report_entry(\n    TYPE NOTE\n    MESSAGE \"WASM Thread support enabled.\"\n    CONDITION QT_FEATURE_thread AND WASM\n)\nqt_configure_add_report_entry(\n    TYPE ERROR\n    MESSAGE \"You should use the recommended Emscripten version ${QT_EMCC_RECOMMENDED_VERSION} with this Qt. You have ${EMCC_VERSION}.\"\n    CONDITION WASM AND ${EMCC_VERSION} VERSION_LESS ${QT_EMCC_RECOMMENDED_VERSION}\n)\nqt_configure_add_report_entry(\n    TYPE WARNING\n    MESSAGE \"Using Emscripten version ${EMCC_VERSION} with this Qt\n    may have issues. The recommended version is ${QT_EMCC_RECOMMENDED_VERSION}.\"\n    CONDITION WASM AND ${EMCC_VERSION} VERSION_GREATER ${QT_EMCC_RECOMMENDED_VERSION}\n)\nqt_configure_add_report_entry(\n    TYPE WARNING\n    MESSAGE \"Some tests might fail to build when targeting WASM without -feature-thread.\"\n    CONDITION WASM AND QT_BUILD_TESTS AND NOT QT_FEATURE_thread\n)\nqt_configure_add_report_entry(\n    TYPE ERROR\n    MESSAGE \"Building Qt with C++20 is not supported with MSVC 2019.\"\n    CONDITION QT_FEATURE_cxx20 AND MSVC AND MSVC_VERSION LESS \"1930\"\n)\nqt_configure_add_report_entry(\n    TYPE ERROR\n    MESSAGE \"You cannot force both system and bundled libraries.\"\n    CONDITION QT_FEATURE_force_bundled_libs AND QT_FEATURE_force_system_libs\n)\nif(WASM)\n    qt_extra_definition(\"QT_EMCC_VERSION\" \"\\\"${EMCC_VERSION}\\\"\" PUBLIC)\nendif()\nqt_extra_definition(\"QT_VERSION_STR\" \"\\\"${PROJECT_VERSION}\\\"\" PUBLIC)\nqt_extra_definition(\"QT_VERSION_MAJOR\" ${PROJECT_VERSION_MAJOR} PUBLIC)\nqt_extra_definition(\"QT_VERSION_MINOR\" ${PROJECT_VERSION_MINOR} PUBLIC)\nqt_extra_definition(\"QT_VERSION_PATCH\" ${PROJECT_VERSION_PATCH} PUBLIC)\n\nqt_extra_definition(\"QT_COPYRIGHT\" \\\"${QT_COPYRIGHT}\\\" PUBLIC)\n\nqt_configure_add_report_entry(\n    TYPE WARNING\n    MESSAGE \"QT_ALLOW_SYMLINK_IN_PATHS is enabled. This is not recommended, and it may lead to unexpected issues.\nE.g., When building QtWebEngine, enabling this option may result in build issues in certain platforms.\nSee https://bugreports.qt.io/browse/QTBUG-59769.\"\n    CONDITION QT_ALLOW_SYMLINK_IN_PATHS\n)\n\n# QtGuiTest interface\nqt_feature_definition(\"test_gui\" \"QT_GUI_TEST\" VALUE \"1\")\nqt_feature(\"test_gui\" PUBLIC\n    LABEL \"Build QtGuiTest namespace\"\n)\n"
        },
        {
          "name": "dependencies.yaml",
          "type": "blob",
          "size": 0.0166015625,
          "content": "dependencies: {}\n"
        },
        {
          "name": "dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "libexec",
          "type": "tree",
          "content": null
        },
        {
          "name": "licenseRule.json",
          "type": "blob",
          "size": 10.408203125,
          "content": "[\n    {\n        \"comment\" : [\"file_pattern_ending: strings matched against the end of a file name.\",\n                     \"location keys: regular expression matched against the beginning of\",\n                     \"the file path (relative to the git submodule root).\",\n                     \"spdx: list of SPDX-License-Expression's allowed in the matching files.\",\n                     \"-------------------------------------------------------\",\n                     \"Files with the following endings are Build System licensed,\",\n                     \"unless they are examples\",\n                     \"Files with other endings can also be build system files\"\n                     ],\n        \"file_pattern_ending\" : [\"CMakeLists.txt\", \".cmake\", \".pro\", \".pri\", \".prf\",\n                     \"configure\", \"configure.bat\", \"cmake.in\", \"plist.in\", \"CMakeLists.txt.in\"],\n        \"location\" : {\n            \"\" : {\n                \"comment\" : \"Default\",\n                \"file type\" : \"build system\",\n                \"spdx\"      : [\"BSD-3-Clause\"]\n            },\n            \"(.*)(examples/|snippets/)\" : {\n                \"comment\" : \"Example takes precedence\",\n                \"file type\" : \"examples and snippets\",\n                \"spdx\" : [\"LicenseRef-Qt-Commercial OR BSD-3-Clause\"]\n            },\n            \"cmake/QtPublicGitHelpers.cmake\" : {\n                \"comment\" : \"MIT licensed copied parts\",\n                \"file type\" : \"build system\",\n                \"spdx\" : [\"BSD-3-Clause AND MIT\"]\n            },\n            \"cmake/QtPublicSbomGenerationHelpers.cmake\" : {\n                \"comment\" : \"MIT licensed copied parts\",\n                \"file type\" : \"build system\",\n                \"spdx\" : [\"MIT AND BSD-3-Clause\"]\n            },\n            \"cmake/QtPublicSbomOpsHelpers.cmake\" : {\n                \"comment\" : \"MIT licensed copied parts\",\n                \"file type\" : \"build system\",\n                \"spdx\" : [\"MIT AND BSD-3-Clause\"]\n            },\n            \"tests/auto/cmake/test_plugin_shared_static_flavor\\\\.cmake\" : {\n                \"comment\" : \"Exception. This is a test file.\",\n                \"file type\" : \"test\",\n                \"spdx\"      : [\"LicenseRef-Qt-Commercial OR GPL-3.0-only\"]\n            }\n        }\n    },\n    {\n        \"comments\" : [\"Files with the following endings are Tool licensed,\",\n                      \"unless they are examples.\",\n                      \"Files with other endings can also be tool files.\"],\n        \"file_pattern_ending\" : [\".sh\", \".py\", \".pl\", \".bat\", \".ps1\"],\n        \"location\" :{\n            \"\" : {\n                \"comment\" : \"Default\",\n                \"file type\" : \"tools and utils\",\n                \"spdx\"      : [\"LicenseRef-Qt-Commercial OR GPL-3.0-only WITH Qt-GPL-exception-1.0\"]\n            },\n            \"(.*)(examples/|snippets/)\" : {\n                \"comment\" : \"Example takes precedence\",\n                \"file type\" : \"examples and snippets\",\n                \"spdx\" : [\"LicenseRef-Qt-Commercial OR BSD-3-Clause\"]\n            },\n            \"tests/auto/tools/uic/baseline/config\\\\.ui\\\\.py\" : {\n                \"comment\" : \"This is a test file\",\n                \"file type\" : \"test\",\n                \"spdx\" : [\"LicenseRef-Qt-Commercial OR GPL-3.0-only\"]\n            }\n        }\n    },\n    {\n        \"comment\" : \"Files with the following endings are Documentation licensed.\",\n        \"file_pattern_ending\" : [\".qdoc\", \".qdocinc\" , \".qdocconf\", \".txt\", \"README\", \"qt_attribution.json\"],\n        \"location\" :{\n            \"\" : {\n                \"comment\" : \"\",\n                \"file type\" : \"documentation\",\n                \"spdx\"      : [\"LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only\"]\n            },\n            \"tests/auto/corelib/mimetypes/qmimedatabase/test\\\\.txt\" : {\n                \"comment\" : \"Exception. This is a test file\",\n                \"file type\" : \"test\",\n                \"spdx\" : [\"LicenseRef-Qt-Commercial OR GPL-3.0-only\"]\n            }\n        }\n    },\n    {\n        \"comment\" : [\"All other files\",\n                     \"The licensing is defined only by the file location in the Qt module repository.\",\n                     \"NO <file_pattern_ending> key for this case!\",\n                     \"This needs to be the last entry of the file.\"],\n        \"location\" : {\n            \"\" : {\n                \"comment\" : \"Default\",\n                \"file type\" : \"module and plugin\",\n                \"spdx\"      : [\"LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only\"]\n            },\n            \"src/\" : {\n                \"comment\" : \"Default\",\n                \"file type\" : \"module and plugin\",\n                \"spdx\"      : [\"LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only\"]\n            },\n            \"plugins/\" : {\n                \"comment\" : \"Default\",\n                \"file type\" : \"module and plugin\",\n                \"spdx\"      : [\"LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only\"]\n            },\n            \"src/plugins/platforms/wasm/\" : {\n                \"comment\" : \"Exception for wasm\",\n                \"file type\" : \"module and plugin\",\n                \"spdx\" : [\"LicenseRef-Qt-Commercial OR GPL-3.0-only\"]\n            },\n            \"src/dbus/dbus_minimal_p\\\\.h\" : {\n                \"comment\" : \"Exception\",\n                \"file type\" : \"module and plugin\",\n                \"spdx\" : [\"AFL-2.1 OR GPL-2.0-or-later\"]\n            },\n            \"src/entrypoint/qtentrypoint_win\\\\.cpp\" : {\n                \"comment\" : \"Exception: https://doc.qt.io/qt-6/qtentrypoint.html\",\n                \"file type\" : \"module and plugin\",\n                \"spdx\" : [\"LicenseRef-Qt-Commercial OR BSD-3-Clause\"]\n            },\n            \"src/android/java/src/org/qtproject/qt/android/bindings/\" : {\n                \"comment\" : \"Exception: compiled alongside with user code\",\n                \"file type\" : \"module and plugin\",\n                \"spdx\"      : [\"LicenseRef-Qt-Commercial OR BSD-3-Clause\"]\n            },\n            \"src/corelib/(time|text)/q.*_data_p\\\\.h\" : {\n                \"comment\" : \"generated from Unicode CLDR data\",\n                \"file type\" : \"module and plugin\",\n                \"spdx\"      : [\"Unicode-3.0\"]\n            },\n            \"src/corelib/text/qunicodetables.*\" : {\n                \"comment\" : \"Contains data extracted from UCD, under Unicode-3.0\",\n                \"file type\" : \"module and plugin\",\n                \"spdx\"      : [\"Unicode-3.0\"]\n            },\n            \"src/tools/\" : {\n                \"comment\" : \"Default\",\n                \"file type\" : \"tools and utils\",\n                \"spdx\" : [\"LicenseRef-Qt-Commercial OR GPL-3.0-only WITH Qt-GPL-exception-1.0\"]\n            },\n            \"tests/\" : {\n                \"comment\" : \"Default\",\n                \"file type\" : \"test\",\n                \"spdx\" : [\"LicenseRef-Qt-Commercial OR GPL-3.0-only\"]\n            },\n            \"cmake/qbatchedtestrunner\\\\.in\\\\.cpp\" : {\n                \"comment\" : \"Compiled into internal tests if QT_BUILD_TESTS_BATCHED is enabled.\",\n                \"file type\" : \"test\",\n                \"spdx\" : [\"LicenseRef-Qt-Commercial OR GPL-3.0-only\"]\n            },\n            \"tests/auto/testlib/selftests/catch_p_p\\\\.h\" : {\n                \"comment\" : \"Exception\",\n                \"file type\" : \"test\",\n                \"spdx\" : [\"BSL-1.0\"]\n            },\n            \"(.*)(examples/|snippets/)\" : {\n                \"comment\" : \"Default\",\n                \"file type\" : \"examples and snippets\",\n                \"spdx\" : [\"LicenseRef-Qt-Commercial OR BSD-3-Clause\"]\n            },\n            \"config\\\\.tests/\" : {\n                \"comment\" : \"Default\",\n                \"file type\" : \"build system\",\n                \"spdx\" : [\"BSD-3-Clause\"]\n            },\n            \"config\\\\.tests/no_direct_extern_access/\" : {\n                \"comment\" : \"Exception\",\n                \"file type\" : \"build system\",\n                \"spdx\" : [\"MIT\"]\n            },\n            \"src/corelib/Qt6CoreResourceInit\\\\.in\\\\.cpp\" : {\n                \"comment\" : \"Helper file statically compiled into user executables\",\n                \"file type\" : \"module and plugin\",\n                \"spdx\" : [\"LicenseRef-Qt-Commercial OR BSD-3-Clause\"]\n            },\n            \"qmake/\" : {\n                \"comment\" : \"Default\",\n                \"file type\" : \"tools and utils\",\n                \"spdx\" : [\"LicenseRef-Qt-Commercial OR GPL-3.0-only WITH Qt-GPL-exception-1.0\"]\n            },\n            \"util/\" : {\n                \"comment\" : \"Default\",\n                \"file type\" : \"util\",\n                \"spdx\" : [\"LicenseRef-Qt-Commercial OR GPL-3.0-only WITH Qt-GPL-exception-1.0\"]\n            },\n            \"util/locale_database/testlocales/localemodel.cpp\" : {\n                \"comment\" : \"Exception: this contains CLDR-generated code\",\n                \"file type\" : \"util\",\n                \"spdx\" : [\"Unicode-3.0\"]\n            },\n            \"util/wasm/batchedtestrunner/\" : {\n                \"comment\" : \"Exception: this is a helper tool\",\n                \"file type\" : \"util\",\n                \"spdx\" : [\"LicenseRef-Qt-Commercial OR GPL-3.0-only WITH Qt-GPL-exception-1.0\"]\n            },\n            \"util/x86simdgen/header\" : {\n                \"comment\" : \"Exception for file generation\",\n                \"file type\" : \"util\",\n                \"spdx\"      : [\"LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only\"]\n            },\n            \"util/glgen/qopenglextensions\\\\.(h|cpp)\\\\.header\" : {\n                \"comment\" : \"Exception, for file generation\",\n                \"file type\" : \"util\",\n                \"spdx\"      : [\"LicenseRef-Qt-Commercial OR BSD-3-Clause\"]\n            },\n            \"src/gui/painting/qimagescale.cpp\" : {\n                \"comment\" : \"Info from qt_attribution.json\",\n                \"file type\" : \"module and plugin\",\n                \"spdx\" : [\"BSD-2-Clause AND Imlib2\"]\n            },\n            \"src/gui/painting/qgrayraster.c\" : {\n                \"comment\" : \"Info from qt_attribution.json\",\n                \"file type\" : \"module and plugin\",\n                \"spdx\" : [\"FTL OR GPL-2.0-only\"]\n            },\n            \"src/corelib/kernel/qeventdispatcher_cf_p.h\" : {\n                \"comment\" : \"Info from qt_attribution.json\",\n                \"file type\" : \"module and plugin\",\n                \"spdx\" : [\"BSD-3-Clause\"]\n            },\n            \"src/plugins/platforms/cocoa/qcocoa(application|eventdispatcher|introspection|systemtrayicon.mm)\" : {\n                \"comment\" : \"Info from qt_attribution.json\",\n                \"file type\" : \"module and plugin\",\n                \"spdx\" : [\"BSD-3-Clause\"]\n            }\n        }\n    }\n]\n"
        },
        {
          "name": "mkspecs",
          "type": "tree",
          "content": null
        },
        {
          "name": "qmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "qt_cmdline.cmake",
          "type": "blob",
          "size": 8.9775390625,
          "content": "# Copyright (C) 2022 The Qt Company Ltd.\n# SPDX-License-Identifier: BSD-3-Clause\n\nqt_commandline_subconfig(src/corelib)\nqt_commandline_subconfig(src/network)\nqt_commandline_subconfig(src/gui)\nqt_commandline_subconfig(src/sql)\nqt_commandline_subconfig(src/xml)\nqt_commandline_subconfig(src/widgets)\nqt_commandline_subconfig(src/printsupport)\nqt_commandline_subconfig(src/plugins/sqldrivers)\nqt_commandline_subconfig(src/testlib)\nqt_commandline_subconfig(src/tools)\nqt_commandline_option(prefix TYPE string)\nqt_commandline_option(extprefix TYPE string)\nqt_commandline_option(archdatadir TYPE string)\nqt_commandline_option(bindir TYPE string)\nqt_commandline_option(datadir TYPE string)\nqt_commandline_option(docdir TYPE string)\nqt_commandline_option(examplesdir TYPE string)\nqt_commandline_option(headerdir TYPE string)\nqt_commandline_option(hostdatadir TYPE string)\nqt_commandline_option(libdir TYPE string)\nqt_commandline_option(libexecdir TYPE string)\nqt_commandline_option(plugindir TYPE string)\nqt_commandline_option(qmldir TYPE string)\nqt_commandline_option(settingsdir TYPE string NAME sysconfdir)\nqt_commandline_option(sysconfdir TYPE string)\nqt_commandline_option(testsdir TYPE string)\nqt_commandline_option(translationdir TYPE string)\nqt_commandline_option(android-arch TYPE string)\nqt_commandline_option(android-abis TYPE string)\nqt_commandline_option(android-ndk TYPE string)\nqt_commandline_option(android-ndk-platform TYPE string)\nqt_commandline_option(android-sdk TYPE string)\nqt_commandline_option(android-javac-target TYPE string)\nqt_commandline_option(android-javac-source TYPE string)\nqt_commandline_option(android-style-assets TYPE boolean)\nqt_commandline_option(appstore-compliant TYPE boolean)\nqt_commandline_option(avx TYPE boolean)\nqt_commandline_option(avx2 TYPE boolean)\nqt_commandline_option(avx512 TYPE boolean NAME avx512f)\nqt_commandline_option(c++std TYPE cxxstd)\nqt_commandline_option(unity-build TYPE boolean NAME unity_build)\nqt_commandline_option(unity-build-batch-size TYPE string NAME unity_build_batch_size)\nqt_commandline_option(ccache TYPE boolean NAME ccache)\nqt_commandline_option(vcpkg TYPE boolean)\nqt_commandline_option(commercial TYPE void)\nqt_commandline_option(confirm-license TYPE void)\nqt_commandline_option(dbus TYPE optionalString VALUES no yes linked runtime)\nqt_commandline_option(dbus-linked TYPE void NAME dbus VALUE linked)\nqt_commandline_option(dbus-runtime TYPE void NAME dbus VALUE runtime)\nqt_commandline_option(debug TYPE void)\nqt_commandline_option(debug-and-release TYPE boolean NAME debug_and_release)\nqt_commandline_option(device TYPE string)\nqt_commandline_option(device-option TYPE addString)\nqt_commandline_option(f16c TYPE boolean)\nqt_commandline_option(force-asserts TYPE boolean NAME force_asserts)\nqt_commandline_option(force-debug-info TYPE boolean NAME force_debug_info)\nqt_commandline_option(force-pkg-config TYPE void NAME pkg-config)\nqt_commandline_option(force-bundled-libs TYPE boolean)\nqt_commandline_option(force-system-libs TYPE boolean)\nqt_commandline_option(framework TYPE boolean)\nqt_commandline_option(gc-binaries TYPE boolean NAME gc_binaries)\nqt_commandline_option(gdb-index TYPE boolean NAME enable_gdb_index)\nqt_commandline_option(gcov TYPE boolean)\nqt_commandline_option(gnumake TYPE boolean NAME GNUmake)\nqt_commandline_option(gui TYPE boolean)\nqt_commandline_option(incredibuild-xge TYPE boolean NAME incredibuild_xge)\nqt_commandline_option(libudev TYPE boolean)\nqt_commandline_option(openssl TYPE optionalString VALUES no yes linked runtime)\nqt_commandline_option(openssl-linked TYPE void NAME openssl VALUE linked)\nqt_commandline_option(openssl-runtime TYPE void NAME openssl VALUE runtime)\nqt_commandline_option(linker TYPE optionalString VALUES bfd gold lld mold)\nqt_commandline_option(ltcg TYPE boolean)\nqt_commandline_option(intelcet TYPE boolean)\nqt_commandline_option(glibc-fortify-source TYPE boolean NAME glibc_fortify_source)\nqt_commandline_option(trivial-auto-var-init-pattern TYPE boolean NAME trivial_auto_var_init_pattern)\nqt_commandline_option(stack-protector TYPE boolean NAME stack_protector)\nqt_commandline_option(stack-clash-protection TYPE boolean NAME stack_clash_protection)\nqt_commandline_option(libstdcpp-assertions TYPE boolean NAME libstdcpp_assertions)\nqt_commandline_option(libcpp-hardening TYPE boolean NAME libcpp_hardening)\nqt_commandline_option(relro-now-linker TYPE boolean NAME relro_now_linker)\nqt_commandline_option(make TYPE addString VALUES examples libs tests tools\n                      benchmarks manual-tests minimal-static-tests)\nqt_commandline_option(install-examples-sources TYPE boolean)\nqt_commandline_option(mips_dsp TYPE boolean)\nqt_commandline_option(mips_dspr2 TYPE boolean)\nqt_commandline_option(nomake TYPE addString VALUES examples tests tools benchmarks\n                      manual-tests minimal-static-tests)\nqt_commandline_option(opensource TYPE void NAME commercial VALUE no)\nqt_commandline_option(optimize-debug TYPE boolean NAME optimize_debug)\nqt_commandline_option(optimize-size TYPE boolean NAME optimize_size)\nqt_commandline_option(optimized-qmake TYPE boolean NAME release_tools)\nqt_commandline_option(optimized-tools TYPE boolean NAME release_tools)\nqt_commandline_option(pch TYPE boolean NAME precompile_header)\nqt_commandline_option(pkg-config TYPE boolean)\nqt_commandline_option(platform TYPE string)\nqt_commandline_option(plugin-manifests TYPE boolean)\nqt_commandline_option(profile TYPE boolean)\nqt_commandline_option(qreal TYPE string)\nqt_commandline_option(qtinlinenamespace TYPE boolean)\nqt_commandline_option(qtlibinfix TYPE string NAME qt_libinfix)\nqt_commandline_option(qtnamespace TYPE string NAME qt_namespace)\nqt_commandline_option(reduce-exports TYPE boolean NAME reduce_exports)\nqt_commandline_option(reduce-relocations TYPE boolean NAME reduce_relocations)\nqt_commandline_option(release TYPE enum NAME debug MAPPING yes no no yes)\nqt_commandline_option(rpath TYPE boolean)\nqt_commandline_option(sanitize TYPE sanitize)\nqt_commandline_option(sdk TYPE string)\nqt_commandline_option(separate-debug-info TYPE boolean NAME separate_debug_info)\nqt_commandline_option(shared TYPE boolean)\nqt_commandline_option(silent TYPE void)\nqt_commandline_option(qdbus TYPE boolean NAME dbus)\nqt_commandline_option(sse2 TYPE boolean)\nqt_commandline_option(sse3 TYPE boolean)\nqt_commandline_option(sse4.1 TYPE boolean NAME sse4_1)\nqt_commandline_option(sse4.2 TYPE boolean NAME sse4_2)\nqt_commandline_option(ssse3 TYPE boolean)\nqt_commandline_option(static TYPE enum NAME shared MAPPING yes no no yes)\nqt_commandline_option(static-runtime TYPE boolean NAME static_runtime)\nqt_commandline_option(strip TYPE boolean)\nqt_commandline_option(sysroot TYPE string)\nqt_commandline_option(use-gold-linker TYPE boolean NAME use_gold_linker_alias)\nqt_commandline_option(warnings-are-errors TYPE boolean NAME warnings_are_errors)\nqt_commandline_option(Werror TYPE boolean NAME warnings_are_errors)\nqt_commandline_option(widgets TYPE boolean)\nqt_commandline_option(xplatform TYPE string)\nqt_commandline_option(zlib CONTROLS_FEATURE TYPE enum NAME system-zlib MAPPING system yes qt no)\nqt_commandline_option(zstd TYPE boolean)\nqt_commandline_option(coverage TYPE optionalString VALUES gcov)\nqt_commandline_option(ffmpeg-dir TYPE string)\nqt_commandline_option(ffmpeg-deploy TYPE boolean)\nqt_commandline_prefix(D defines)\nqt_commandline_prefix(F fpaths)\nqt_commandline_prefix(I includes)\nqt_commandline_prefix(L lpaths)\nqt_commandline_prefix(R rpaths)\n\nfunction(qt_commandline_cxxstd arg val nextok)\n    if(\"${val}\" STREQUAL \"\")\n        qtConfGetNextCommandlineArg(val)\n    endif()\n    if(\"${val}\" STREQUAL \"\" OR val MATCHES \"^-.*\")\n        qtConfAddError(\"Missing argument to command line parameter '${arg}'.\")\n        return()\n    endif()\n    if(val MATCHES \"(c\\\\+\\\\+)?(17|1z)\")\n        qtConfCommandlineDisableFeature(c++20)\n        qtConfCommandlineDisableFeature(c++2b)\n    elseif(val MATCHES \"(c\\\\+\\\\+)?(20|2a)\")\n        qtConfCommandlineEnableFeature(c++20)\n        qtConfCommandlineDisableFeature(c++2b)\n    elseif(val MATCHES \"(c\\\\+\\\\+)?(2b)\")\n        qtConfCommandlineEnableFeature(c++20)\n        qtConfCommandlineEnableFeature(c++2b)\n    else()\n        qtConfAddError(\"Invalid argument '${val}' to command line parameter '${arg}'\")\n    endif()\nendfunction()\n\nfunction(qt_commandline_sanitize arg val nextok)\n    if(\"${val}\" STREQUAL \"\")\n        qtConfGetNextCommandlineArg(val)\n    endif()\n    if(\"${val}\" STREQUAL \"\" OR val MATCHES \"^-.*\")\n        qtConfAddError(\"Missing argument to command line parameter '${arg}'.\")\n        return()\n    endif()\n    if(val STREQUAL \"address\")\n        qtConfCommandlineEnableFeature(sanitize_address)\n    elseif(val STREQUAL \"thread\")\n        qtConfCommandlineEnableFeature(sanitize_thread)\n    elseif(val STREQUAL \"memory\")\n        qtConfCommandlineEnableFeature(sanitize_memory)\n    elseif(val STREQUAL \"fuzzer-no-link\")\n        qtConfCommandlineEnableFeature(sanitize_fuzzer_no_link)\n    elseif(val STREQUAL \"undefined\")\n        qtConfCommandlineEnableFeature(sanitize_undefined)\n    else()\n        qtConfAddError(\"Invalid argument '${val}' to command line parameter '${arg}'\")\n    endif()\nendfunction()\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}