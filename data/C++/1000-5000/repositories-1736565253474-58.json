{
  "metadata": {
    "timestamp": 1736565253474,
    "page": 58,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lief-project/LIEF",
      "stars": 4585,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0986328125,
          "content": "build/\n*.so\n*.whl\nlief.egg-info/\ndist/\napi/rust/cargo/target/*\napi/rust/examples/target/*\nCargo.lock\n"
        },
        {
          "name": ".gitlab-ci.yml",
          "type": "blob",
          "size": 0.0654296875,
          "content": "include:\n  - project: 'LIEF/ci'\n    ref: main\n    file: 'main.yml'\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.0576171875,
          "content": "Authors:\n\n  Romain Thomas <me@romainthomas.fr> - Quarkslab\n"
        },
        {
          "name": "Acknowledgements",
          "type": "blob",
          "size": 0.6962890625,
          "content": "Acknowledgements\n----------------\n\nLIEF makes use of the following open source projects:\n\n - mbedTLS - https://tls.mbed.org/\n - pybind11 - https://github.com/pybind/pybind11\n - json - https://nlohmann.github.io/json/\n - rang - https://agauniyal.github.io/rang/\n - easyloggingpp - https://github.com/muflihun/easyloggingpp\n - Catch - https://github.com/philsquared/Catch\n - yamlcpp - https://github.com/jbeder/yaml-cpp\n - filesystem - https://github.com/wjakob/filesystem\n - utf8-cpp - https://sourceforge.net/projects/utfcpp/\n - llvm - http://llvm.org/ - For the formats enums and structures\n - virtualbox - https://www.virtualbox.org/ - For the PE 'LoadConfiguration' structures\n\nThe logo is designed by Freepik\n"
        },
        {
          "name": "CHANGELOG",
          "type": "blob",
          "size": 0.0498046875,
          "content": "Changelog\n=========\n\nsee doc/sphinx/changelog.rst\n\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 17.1748046875,
          "content": "cmake_minimum_required(VERSION 3.24)\nproject(LIEF LANGUAGES C CXX)\n\nenable_language(C)\nenable_language(CXX)\n\n# Avoid warning about DOWNLOAD_EXTRACT_TIMESTAMP in CMake 3.24:\nif(CMAKE_VERSION VERSION_GREATER_EQUAL \"3.24.0\")\n  cmake_policy(SET CMP0135 NEW)\nendif()\n\n# Enable https://cmake.org/cmake/help/latest/prop_tgt/MSVC_RUNTIME_LIBRARY.html\ncmake_policy(SET CMP0091 NEW)\n\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\n# Modules\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/\")\n\ninclude(CheckCXXCompilerFlag)\ninclude(CheckCCompilerFlag)\ninclude(ExternalProject)\ninclude(CMakePackageConfigHelpers)\n\nfind_package(Git)\nif (DEFINED ENV{LIEF_VERSION_ENV})\n  string(REGEX MATCHALL \"([0-9]+)\" VERSION_STRING \"$ENV{LIEF_VERSION_ENV}\")\n  if (NOT VERSION_STRING)\n    message(FATAL_ERROR \"Invalid version\")\n  endif()\n  list(GET VERSION_STRING 0 LIEF_VERSION_MAJOR)\n  list(GET VERSION_STRING 1 LIEF_VERSION_MINOR)\n  list(GET VERSION_STRING 2 LIEF_VERSION_PATCH)\nelseif(EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/.git\"\n       AND IS_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/.git\" AND Git_FOUND)\n  include(LIEFGit)\nelse()\n  set(LIEF_VERSION_MAJOR \"0\")\n  set(LIEF_VERSION_MINOR \"17\")\n  set(LIEF_VERSION_PATCH \"0\")\nendif()\n\nif (DEFINED ENV{LIEF_COMMIT})\n  set(LIEF_COMMIT_HASH \"$ENV{LIEF_COMMIT}\")\nendif()\n\nif (DEFINED ENV{LIEF_BRANCH})\n  set(LIEF_GIT_BRANCH \"$ENV{LIEF_BRANCH}\")\nendif()\n\n# LIEF Project\n# ============\nproject(LIEF VERSION\n        ${LIEF_VERSION_MAJOR}.${LIEF_VERSION_MINOR}.${LIEF_VERSION_PATCH})\nmessage(STATUS \"${PROJECT_NAME} ${PROJECT_VERSION}\")\n\n# LIEF options\n# =============\ninclude(LIEFOptions)\n\n# Compiler detection (C++14, C++17, ...)\ninclude(LIEFCompilerDetection)\n\n# CCACHE\n# ======\nmessage(STATUS \"Caching: ${LIEF_USE_CCACHE}\")\nif(LIEF_USE_CCACHE)\n  find_program(CCACHE_FOUND ccache)\n  if(CCACHE_FOUND)\n    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)\n    set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)\n    message(STATUS \"Found ccache: ${CCACHE_FOUND}\")\n  else()\n    find_program(SCCACHE_FOUND sccache)\n    if(SCCACHE_FOUND)\n      set(CMAKE_C_COMPILER_LAUNCHER ${SCCACHE_FOUND})\n      set(CMAKE_CXX_COMPILER_LAUNCHER ${SCCACHE_FOUND})\n      message(STATUS \"Found sccache: ${SCCACHE_FOUND}\")\n    else()\n      set(LIEF_USE_CCACHE OFF)\n      message(WARNING \"Can't find cache solution\")\n    endif()\n  endif()\nendif()\n\n# Dependencies\n# ============\nset(THIRD_PARTY_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/third-party/\")\ninclude(LIEFDependencies)\n\n# iOS specific config\n# ===================\nif(CMAKE_SYSTEM_NAME STREQUAL \"iOS\")\n  set(CMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_REQUIRED NO)\n  set(CMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_ALLOWED NO)\n  set(CMAKE_XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY \"\")\nendif()\n\nmessage(STATUS \"CMAKE_CXX_FLAGS_RELEASE:           ${CMAKE_CXX_FLAGS_RELEASE}\")\nmessage(STATUS \"CMAKE_CXX_FLAGS_RELWITHDEBINFO:    ${CMAKE_CXX_FLAGS_RELWITHDEBINFO}\")\nmessage(STATUS \"CMAKE_CXX_FLAGS_DEBUG:             ${CMAKE_CXX_FLAGS_DEBUG}\")\nmessage(STATUS \"CMAKE_CXX_FLAGS:                   ${CMAKE_CXX_FLAGS}\")\nmessage(STATUS \"CMAKE_CXX_LINK_EXECUTABLE:         ${CMAKE_CXX_LINK_EXECUTABLE}\")\nmessage(STATUS \"CMAKE_CXX_LINK_FLAGS:              ${CMAKE_CXX_LINK_FLAGS}\")\nmessage(STATUS \"CMAKE_EXE_LINKER_FLAGS:            ${CMAKE_EXE_LINKER_FLAGS}\")\nmessage(STATUS \"CMAKE_EXE_LINKER_FLAGS_RELEASE:    ${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nmessage(STATUS \"CMAKE_SHARED_LINKER_FLAGS:         ${CMAKE_SHARED_LINKER_FLAGS}\")\nmessage(STATUS \"CMAKE_SHARED_LINKER_FLAGS_RELEASE: ${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nmessage(STATUS \"CMAKE_CXX_LINK_LIBRARY_FILE_FLAG:  ${CMAKE_CXX_LINK_LIBRARY_FILE_FLAG}\")\nmessage(STATUS \"CMAKE_LINK_LIBRARY_FILE_FLAG:      ${CMAKE_LINK_LIBRARY_FILE_FLAG}\")\nmessage(STATUS \"CMAKE_LINK_INTERFACE_LIBRARIES:    ${CMAKE_LINK_INTERFACE_LIBRARIES}\")\nmessage(STATUS \"CMAKE_CXX_IMPLICIT_LINK_LIBRARIES: ${CMAKE_CXX_IMPLICIT_LINK_LIBRARIES}\")\nmessage(STATUS \"CMAKE_SYSTEM_PROCESSOR:            ${CMAKE_SYSTEM_PROCESSOR}\")\nmessage(STATUS \"CMAKE_MSVC_RUNTIME_LIBRARY:        ${CMAKE_MSVC_RUNTIME_LIBRARY}\")\n\nif(LIEF_INSTALL)\n  if(UNIX)\n    include(GNUInstallDirs)\n    set(CMAKE_INSTALL_LIBDIR \"lib\")\n  else()\n    set(CMAKE_INSTALL_LIBDIR      \"lib\")\n    set(CMAKE_INSTALL_DATADIR     \"share\")\n    set(CMAKE_INSTALL_INCLUDEDIR  \"include\")\n    set(CMAKE_INSTALL_BINDIR      \"bin\")\n    set(CMAKE_INSTALL_DATAROOTDIR \"share\")\n    message(STATUS \"Setting installation destination to: ${CMAKE_INSTALL_PREFIX}\")\n  endif()\nendif()\n\n# LIEF Source definition\n# ======================\nadd_library(LIB_LIEF src/Object.cpp)\nadd_subdirectory(src)\n\nif(NOT LIEF_PY_LIEF_EXT)\n  add_library(LIEF::LIEF ALIAS LIB_LIEF)\nendif()\n\nif(NOT LIEF_OPT_MBEDTLS_EXTERNAL)\n  set_source_files_properties(${mbedtls_src_files} PROPERTIES GENERATED TRUE)\n  target_sources(LIB_LIEF PRIVATE ${mbedtls_src_files})\n  target_compile_definitions(LIB_LIEF PRIVATE -DMBEDTLS_NO_PLATFORM_ENTROPY)\n\n  target_include_directories(LIB_LIEF SYSTEM PRIVATE\n                             ${MBEDTLS_INCLUDE_DIRS}\n                            \"${MBEDTLS_SOURCE_DIR}/library\"\n  )\n\n  add_dependencies(LIB_LIEF lief_mbed_tls)\nelse()\n  find_package(MbedTLS REQUIRED)\n  target_link_libraries(LIB_LIEF PRIVATE\n                        MbedTLS::mbedcrypto MbedTLS::mbedx509)\nendif()\n\ntarget_compile_definitions(LIB_LIEF PRIVATE\n  -DMBEDTLS_CONFIG_FILE=\"${CMAKE_CURRENT_SOURCE_DIR}/config/mbedtls/config.h\"\n)\n\nif(WIN32 AND BUILD_SHARED_LIBS)\n  target_link_libraries(LIB_LIEF PRIVATE ws2_32)\nendif()\n\nif(MSVC)\n  add_compile_options(/bigobj)\nendif()\n\nif(CMAKE_BUILD_TYPE MATCHES Debug AND UNIX)\n  target_compile_options(LIB_LIEF PRIVATE -g -O0)\nendif()\n\nif(BUILD_SHARED_LIBS OR LIEF_FORCE_API_EXPORTS)\n  target_compile_definitions(LIB_LIEF PRIVATE -DLIEF_EXPORTS)\nelse()\n  target_compile_definitions(LIB_LIEF PRIVATE -DLIEF_STATIC)\nendif()\n\n\nif(LIEF_ENABLE_JSON)\n  # Make nlohmann/json is only using C++11 API.\n  # Especially, MSVC[14.37.32822] is buggy with (no)rtti & std::any\n  # Ref:\n  # - https://github.com/nlohmann/json/issues/3900\n  # - https://github.com/microsoft/STL/issues/4349#issuecomment-1920093172\n  target_compile_definitions(LIB_LIEF PRIVATE JSON_HAS_CPP_11)\nendif()\n\n# Logging Configuration\n# =====================\ntarget_compile_definitions(LIB_LIEF PRIVATE SPDLOG_DISABLE_DEFAULT_LOGGER\n                                            SPDLOG_NO_EXCEPTIONS\n                                            SPDLOG_FUNCTION=)\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"iOS\")\n  target_compile_definitions(LIB_LIEF PRIVATE SPDLOG_NO_THREAD_ID)\nendif()\n\n# LIEF includes\n# =============\nconfigure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/include/LIEF/version.h.in\"\n               \"${CMAKE_CURRENT_BINARY_DIR}/include/LIEF/version.h\")\n\nconfigure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/include/LIEF/config.h.in\"\n               \"${CMAKE_CURRENT_BINARY_DIR}/include/LIEF/config.h\" @ONLY)\n\nset(LIEF_PUBLIC_INCLUDE_DIR\n    ${CMAKE_CURRENT_SOURCE_DIR}/include/\n    ${CMAKE_CURRENT_SOURCE_DIR}/api/c/include/\n    ${CMAKE_CURRENT_BINARY_DIR}/include/)\n\nset(LIEF_PRIVATE_INCLUDE_DIR\n    ${LIEF_PUBLIC_INCLUDE_DIR}\n    ${CMAKE_CURRENT_SOURCE_DIR}/src\n    ${CMAKE_CURRENT_BINARY_DIR})\n\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/LIEF.pc.in\n               ${CMAKE_CURRENT_BINARY_DIR}/LIEF.pc @ONLY)\n\ntarget_include_directories(LIB_LIEF\n  PUBLIC  \"$<BUILD_INTERFACE:${LIEF_PUBLIC_INCLUDE_DIR}>\"\n  PRIVATE \"${LIEF_PRIVATE_INCLUDE_DIR}\")\n\nif(LIEF_ENABLE_JSON)\n  if(LIEF_OPT_NLOHMANN_JSON_EXTERNAL)\n    find_package(nlohmann_json REQUIRED)\n    target_link_libraries(LIB_LIEF PRIVATE nlohmann_json::nlohmann_json)\n  else()\n    add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/internal/nlohmann/json.hpp\n      COMMAND\n        ${CMAKE_COMMAND} -E make_directory ${CMAKE_CURRENT_BINARY_DIR}/internal/nlohmann\n      COMMAND\n        ${CMAKE_COMMAND} -E copy_directory ${LIBJSON_SOURCE_DIR}/\n                                           ${CMAKE_CURRENT_BINARY_DIR}/internal/nlohmann/\n      DEPENDS lief_libjson)\n\n    target_sources(LIB_LIEF PRIVATE\n                   ${CMAKE_CURRENT_BINARY_DIR}/internal/nlohmann/json.hpp)\n\n    target_include_directories(LIB_LIEF PRIVATE\n                               ${CMAKE_CURRENT_BINARY_DIR}/)\n  endif()\n  target_compile_definitions(LIB_LIEF PRIVATE JSON_NOEXCEPTION)\nendif()\n\nif(LIEF_FROZEN_ENABLED)\n  if(LIEF_OPT_FROZEN_EXTERNAL)\n    find_package(frozen REQUIRED)\n    target_link_libraries(LIB_LIEF PRIVATE frozen::frozen)\n  else()\n    add_dependencies(LIB_LIEF lief_frozen)\n    target_include_directories(LIB_LIEF\n      PRIVATE \"${FROZEN_INCLUDE_DIR}\")\n  endif()\nendif()\n\n\n# =======================================\n# Expected\n# =======================================\nif(LIEF_EXTERNAL_EXPECTED)\n  message(STATUS \"Using external Expected version\")\n  find_package(tl-expected REQUIRED)\n  target_link_libraries(LIB_LIEF PUBLIC tl::expected)\nelse()\n  add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/include/LIEF/third-party/internal/expected.hpp\n    COMMAND\n      ${CMAKE_COMMAND} -E make_directory ${CMAKE_CURRENT_BINARY_DIR}/include/LIEF/third-party/internal/\n    COMMAND\n      ${CMAKE_COMMAND} -E copy_directory ${EXPECTED_SRC_DIR}/include/tl/\n      ${CMAKE_CURRENT_BINARY_DIR}/include/LIEF/third-party/internal/\n    DEPENDS lief_expected)\n\n  target_sources(LIB_LIEF PRIVATE\n    ${CMAKE_CURRENT_BINARY_DIR}/include/LIEF/third-party/internal/expected.hpp)\nendif()\n\n\n# =======================================\n# utfcpp\n# =======================================\n\nif(LIEF_OPT_UTFCPP_EXTERNAL)\n  find_package(utf8cpp REQUIRED)\n  target_link_libraries(LIB_LIEF PRIVATE utf8cpp::utf8cpp)\nelse()\n  add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/internal/utfcpp/utf8.h\n    COMMAND\n      ${CMAKE_COMMAND} -E make_directory ${CMAKE_CURRENT_BINARY_DIR}/internal/\n    COMMAND\n      ${CMAKE_COMMAND} -E copy_directory ${UTFCPP_INCLUDE_DIR}/\n      ${CMAKE_CURRENT_BINARY_DIR}/internal/utfcpp\n    DEPENDS lief_utfcpp)\n\n  target_sources(LIB_LIEF PRIVATE\n    ${CMAKE_CURRENT_BINARY_DIR}/internal/utfcpp/utf8.h)\nendif()\n\n# =======================================\n# tcb/span\n# =======================================\nif(LIEF_EXTERNAL_SPAN)\n  message(STATUS \"Using external tcb/span version\")\n  if(LIEF_EXTERNAL_SPAN_DIR)\n    message(STATUS \"External span include dir: ${LIEF_EXTERNAL_SPAN_DIR}\")\n    target_include_directories(LIB_LIEF SYSTEM PUBLIC\n                               \"$<BUILD_INTERFACE:${LIEF_EXTERNAL_SPAN_DIR}>\")\n  endif()\nelse()\n  add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/include/LIEF/third-party/internal/span.hpp\n    COMMAND\n      ${CMAKE_COMMAND} -E make_directory ${CMAKE_CURRENT_BINARY_DIR}/include/LIEF/third-party/internal/\n    COMMAND\n      ${CMAKE_COMMAND} -E copy_directory ${TCB_SPAN_SRC_DIR}/\n      ${CMAKE_CURRENT_BINARY_DIR}/include/LIEF/third-party/internal/\n    DEPENDS lief_span)\n\n  target_sources(LIB_LIEF PRIVATE\n    ${CMAKE_CURRENT_BINARY_DIR}/include/LIEF/third-party/internal/span.hpp)\nendif()\n\ntarget_link_libraries(LIB_LIEF PRIVATE lief_spdlog)\n\nif(ANDROID AND LIEF_LOGGING)\n  target_link_libraries(LIB_LIEF PUBLIC log)\nendif()\n\n# Flags definition\n# ----------------\nset_target_properties(LIB_LIEF\n  PROPERTIES POSITION_INDEPENDENT_CODE ON\n             CXX_STANDARD              17\n             CXX_STANDARD_REQUIRED     ON\n             VISIBILITY_INLINES_HIDDEN ON\n             CXX_VISIBILITY_PRESET     hidden\n             C_VISIBILITY_PRESET       hidden)\n\nif(UNIX AND NOT APPLE)\n  set_property(TARGET LIB_LIEF APPEND\n               PROPERTY LINK_FLAGS \"-Wl,--gc-sections -Wl,--exclude-libs,ALL\")\nendif()\n\ntarget_compile_definitions(LIB_LIEF PUBLIC -D_GLIBCXX_USE_CXX11_ABI=1)\n\n# LIEF Sanitizer options\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nset(SANITIZER_FLAGS -fno-omit-frame-pointer -g -O1)\nif(LIEF_ASAN)\n  message(STATUS \"Address sanitizer enabled\")\n  list(APPEND SANITIZER_FLAGS -fsanitize=address)\n\n  set_property(TARGET LIB_LIEF\n               APPEND PROPERTY LINK_FLAGS -fsanitize=address)\n  target_link_libraries(LIB_LIEF INTERFACE asan)\nendif()\n\nif(LIEF_LSAN)\n  message(STATUS \"Leak sanitizer enabled\")\n  list(APPEND SANITIZER_FLAGS -fsanitize=leak)\n\n  set_property(TARGET LIB_LIEF\n               APPEND PROPERTY LINK_FLAGS -fsanitize=leak)\n\n  target_link_libraries(LIB_LIEF INTERFACE lsan)\nendif()\n\nif(LIEF_TSAN)\n  message(STATUS \"Thread sanitizer enabled\")\n  list(APPEND SANITIZER_FLAGS -fsanitize=thread)\n\n  set_property(TARGET LIB_LIEF\n               APPEND PROPERTY LINK_FLAGS -fsanitize=thread)\n\n  target_link_libraries(LIB_LIEF INTERFACE tsan)\nendif()\n\nif(LIEF_USAN)\n  message(STATUS \"Undefined sanitizer enabled\")\n  list(APPEND SANITIZER_FLAGS -fsanitize=undefined,null,alignment)\n\n  set_property(TARGET LIB_LIEF\n               APPEND PROPERTY LINK_FLAGS -fsanitize=undefined,null,alignment)\n  target_link_options(LIB_LIEF PUBLIC -fsanitize=undefined,null,alignment)\n\n  target_link_libraries(LIB_LIEF PUBLIC ubsan -fsanitize=undefined,null,alignment)\nendif()\n\nset(LIEF_SANITIZER OFF)\nif(LIEF_ASAN OR LIEF_LSAN OR LIEF_TSAN OR LIEF_USAN)\n  set(LIEF_SANITIZER ON)\nendif()\n\nif(LIEF_SANITIZER)\n  message(\"LIEF Sanitizer enabled: ${SANITIZER_FLAGS}\")\n  target_compile_options(LIB_LIEF PUBLIC ${SANITIZER_FLAGS})\n  add_subdirectory(tests/sanitizer)\nendif()\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# Fuzzing options\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nif(LIEF_FUZZING)\n  set(FUZZING_FLAGS -fno-omit-frame-pointer -g -O2 -fsanitize=address,fuzzer-no-link)\n  set(FUZZING_LINKER_FLAGS -fsanitize=address,fuzzer-no-link)\n  set_property(TARGET LIB_LIEF\n               APPEND PROPERTY LINK_FLAGS ${FUZZING_LINKER_FLAGS})\n\n  target_compile_options(LIB_LIEF PRIVATE ${FUZZING_FLAGS})\n  target_link_libraries(LIB_LIEF PUBLIC asan pthread)\n  add_subdirectory(fuzzing)\nendif()\n\ninclude(LIEFCompilerFlags)\n\nif(LIEF_PROFILING)\n  add_subdirectory(profiling)\nendif()\n\nset_target_properties(LIB_LIEF PROPERTIES\n                      OUTPUT_NAME LIEF\n                      EXPORT_NAME LIEF\n                      CLEAN_DIRECT_OUTPUT 1)\n\n\n# Set a default build type if none was specified\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  message(STATUS \"Setting build type to 'Release' as none was specified.\")\n  set(CMAKE_BUILD_TYPE\n      Release\n      CACHE STRING \"Choose the type of build.\" FORCE)\n  # Set the possible values of build type for cmake-gui\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS \"Debug\" \"Release\"\n                                                       \"MinSizeRel\" \"RelWithDebInfo\")\nendif()\n\nmessage(STATUS \"Configuration Types: ${CMAKE_CONFIGURATION_TYPES}\")\nmessage(STATUS \"Build Types:         ${CMAKE_BUILD_TYPE}\")\n\nif(APPLE)\n  set_target_properties(LIB_LIEF PROPERTIES MACOSX_RPATH ON)\nendif()\n\nadd_subdirectory(api)\n\nif(LIEF_EXAMPLES)\n  add_subdirectory(examples)\nendif()\n\nif(LIEF_TESTS)\n  enable_testing()\n  add_subdirectory(tests)\nendif()\n\nif(LIEF_DOC)\n  add_subdirectory(doc)\nendif()\n\n\n# Post-build operations\n# ======================\nif(BUILD_SHARED_LIBS AND CMAKE_BUILD_TYPE MATCHES \"Release\")\n  if(UNIX AND NOT APPLE)\n      add_custom_command(\n        TARGET LIB_LIEF\n        COMMENT \"Strip LIEF shared library\"\n        POST_BUILD\n        COMMAND ${CMAKE_STRIP} --strip-all $<TARGET_FILE:LIB_LIEF>\n      )\n  endif()\n\n  if(APPLE)\n    add_custom_command(\n      TARGET LIB_LIEF\n      COMMENT \"Strip LIEF shared library\"\n      POST_BUILD\n      COMMAND ${CMAKE_STRIP} -x -S $<TARGET_FILE:LIB_LIEF>\n    )\n  endif()\nendif()\n\n# Generate install target and package\n# =======================================\nif(LIEF_INSTALL)\n\n  # Find Package Config\n  # ======================\n  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/LIEFConfig.cmake.in\n                 ${CMAKE_CURRENT_BINARY_DIR}/LIEFConfig.cmake @ONLY)\n\n  write_basic_package_version_file(\n    ${CMAKE_CURRENT_BINARY_DIR}/LIEFConfigVersion.cmake\n    VERSION ${PROJECT_VERSION}\n    COMPATIBILITY AnyNewerVersion)\n\n  # Install Prefix\n  # ======================\n  if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT AND UNIX)\n    if(UNIX AND NOT APPLE)\n      set(CMAKE_INSTALL_PREFIX\n          \"/usr\"\n          CACHE PATH \"Install path prefix prepended on to install directories.\"\n                FORCE)\n    elseif(APPLE)\n      set(CMAKE_INSTALL_PREFIX\n          \"/usr/local\"\n          CACHE PATH \"\" FORCE)\n    endif()\n  endif()\n\n  install(\n    TARGETS LIB_LIEF lief_spdlog\n    EXPORT LIEFExport\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    RUNTIME DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries\n    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n\n  install(\n    DIRECTORY ${LIEF_PUBLIC_INCLUDE_DIR}\n    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n    COMPONENT headers\n    FILES_MATCHING\n    REGEX \"(.*).(hpp|h|def|inc)$\")\n\n  install(\n    FILES ${CMAKE_CURRENT_BINARY_DIR}/LIEFConfig.cmake\n          ${CMAKE_CURRENT_BINARY_DIR}/LIEFConfigVersion.cmake\n    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/LIEF\n    COMPONENT config)\n\n  install(\n    FILES       ${CMAKE_CURRENT_BINARY_DIR}/LIEF.pc\n    DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig\n    COMPONENT   libraries)\n\n  if(BUILD_SHARED_LIBS)\n    set(lib_type shared)\n  else()\n    set(lib_type static)\n  endif()\n\n  install(\n    EXPORT LIEFExport\n    NAMESPACE LIEF::\n    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/LIEF\n    FILE LIEFExport-${lib_type}.cmake\n    COMPONENT config)\n\n  export(\n    EXPORT LIEFExport\n    NAMESPACE LIEF::\n    FILE LIEFExport-${lib_type}.cmake)\n\n  add_subdirectory(package)\nendif()\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.1142578125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2017 - 2025 R. Thomas\n   Copyright 2017 - 2025 Quarkslab\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.8076171875,
          "content": "<p align=\"center\" >\n<img width=\"90%\" src=\"https://github.com/lief-project/LIEF/blob/main/.github/images/architecture.png\"/><br />\n</p>\n\n<p align=\"center\">\n  <a href=\"https://discord.gg/jGQtyAYChJ\">\n    <img src=\"https://img.shields.io/discord/1117013848914931762\">\n  </a>\n  &nbsp;\n  <a href=\"https://github.com/lief-project/LIEF/actions/workflows/linux-x86-64.yml\">\n    <img alt=\"Linux x86-64 CI status\" src=\"https://img.shields.io/github/actions/workflow/status/lief-project/LIEF/linux-x86-64.yml?branch=main&label=Linux%20x86-64&logo=github\">\n  </a>\n  &nbsp;\n  <a href=\"https://github.com/lief-project/LIEF/actions/workflows/linux-aarch64.yml\">\n    <img alt=\"Linux AArch64 CI status\" src=\"https://img.shields.io/github/actions/workflow/status/lief-project/LIEF/linux-aarch64.yml?branch=main&label=Linux%20AArch64&logo=github\">\n  </a>\n  &nbsp;\n  <a href=\"https://github.com/lief-project/LIEF/actions/workflows/android.yml\">\n    <img alt=\"Android CI status\" src=\"https://img.shields.io/github/actions/workflow/status/lief-project/LIEF/android.yml?branch=main&label=Android&logo=github\">\n  </a>\n  &nbsp;\n  <a href=\"https://github.com/lief-project/LIEF/actions/workflows/osx.yml\">\n    <img alt=\"macOS CI status\" src=\"https://img.shields.io/github/actions/workflow/status/lief-project/LIEF/osx.yml?branch=main&label=macOS&logo=github\">\n  </a>\n  &nbsp;\n  <a href=\"https://github.com/lief-project/LIEF/actions/workflows/ios.yml\">\n    <img alt=\"iOS CI status\" src=\"https://img.shields.io/github/actions/workflow/status/lief-project/LIEF/ios.yml?branch=main&label=iOS&logo=github\">\n  </a>\n  &nbsp;\n  <a href=\"https://github.com/lief-project/LIEF/actions/workflows/windows-all.yml\">\n    <img alt=\"Windows CI status\" src=\"https://img.shields.io/github/actions/workflow/status/lief-project/LIEF/windows-all.yml?branch=main&label=Windows&logo=github\">\n  </a>\n  &nbsp;\n  <a href=\"https://github.com/lief-project/LIEF/releases\">\n    <img src=\"https://img.shields.io/github/v/release/lief-project/LIEF?style=flat-square\">\n  </a>\n  &nbsp;\n  <a href=\"https://twitter.com/LIEF_project\">\n   <img alt=\"Twitter Follow\" src=\"https://img.shields.io/twitter/follow/lief_project\">\n  </a>\n  &nbsp;\n  <a href=\"https://gurubase.io/g/lief\">\n    <img src=\"https://img.shields.io/badge/Gurubase-Ask%20LIEF%20Guru-006BFF\">\n  </a>\n</p>\n\n<br />\n<p align=\"center\">\n  <a href=\"https://lief.re/blog/\"><b>Blog</b></a> •\n  <a href=\"https://lief.re/doc/latest/index.html\"><b>Documentation</b></a> •\n  <a href=\"#user-content-about-1\"><b>About</b></a>\n</p>\n<br />\n\n# About\n\nThe purpose of this project is to provide a cross-platform library to parse,\nmodify and abstract ELF, PE and MachO formats.\n\n**Main features**:\n\n  * **Parsing**: LIEF can parse ELF, PE, MachO, OAT, DEX, VDEX, ART and provides an user-friendly API to access to internals.\n  * **Modify**: LIEF can use to modify some parts of these formats (adding a section, changing a symbol's name, ...)\n  * **Abstract**: Three formats have common features like sections, symbols, entry point... LIEF factors them.\n  * **API**: LIEF can be used in C++, Python, Rust and C\n\n**Extended features**:\n\n  * [**DWARF/PDB** Support](https://lief.re/doc/latest/extended/debug_info/index.html)\n  * [**Objective-C** Metadata](https://lief.re/doc/latest/extended/objc/index.html)\n  * [**Dyld Shared Cache**](https://lief.re/doc/latest/extended/dsc/index.html) with support for extracting Dylib\n  * [**Disassembler**](https://lief.re/doc/latest/extended/disassembler/index.html): AArch64, x86/x86-64, ARM, RISC-V, Mips, PowerPC, eBPF\n  * [**Assembler**](https://lief.re/doc/latest/extended/assembler/index.html): AArch64, x86/x86-64\n\n\n# Content\n\n- [About](#about)\n- [Download / Install](#downloads--install)\n- [Getting started](#getting-started)\n- [Documentation](#documentation)\n  - [Rust](https://lief.re/doc/stable/rust/lief/)\n  - [Sphinx](https://lief.re/doc/latest/index.html)\n  - [Doxygen](https://lief.re/doc/latest/doxygen/index.html)\n  - Tutorials:\n    - [Parse and manipulate formats](https://lief.re/doc/latest/tutorials/01_play_with_formats.html)\n    - [Create a PE from scratch](https://lief.re/doc/latest/tutorials/02_pe_from_scratch.html)\n    - [Play with ELF symbols](https://lief.re/doc/latest/tutorials/03_elf_change_symbols.html)\n    - [ELF Hooking](https://lief.re/doc/latest/tutorials/04_elf_hooking.html)\n    - [Infecting the plt/got](https://lief.re/doc/latest/tutorials/05_elf_infect_plt_got.html)\n    - [PE Hooking](https://lief.re/doc/latest/tutorials/06_pe_hooking.html)\n    - [PE Resources](https://lief.re/doc/latest/tutorials/07_pe_resource.html)\n    - [Transforming an ELF executable into a library](https://lief.re/doc/latest/tutorials/08_elf_bin2lib.html)\n    - [How to use frida on a non-rooted device](https://lief.re/doc/latest/tutorials/09_frida_lief.html)\n    - [Android formats](https://lief.re/doc/latest/tutorials/10_android_formats.html)\n    - [Mach-O modification](https://lief.re/doc/latest/tutorials/11_macho_modification.html)\n    - [ELF Coredump](https://lief.re/doc/latest/tutorials/12_elf_coredump.html)\n    - [PE Authenticode](https://lief.re/doc/latest/tutorials/13_pe_authenticode.html)\n- [Contact](#contact)\n- [About](#about)\n  - [Authors](#authors)\n  - [License](#license)\n  - [Bibtex](#bibtex)\n\n## Downloads / Install\n\n## C++\n\n```cmake\nfind_package(LIEF REQUIRED)\ntarget_link_libraries(my-project LIEF::LIEF)\n```\n\n## Rust\n\n```toml\n[package]\nname    = \"my-awesome-project\"\nversion = \"0.0.1\"\nedition = \"2021\"\n\n[dependencies]\nlief = \"0.16.2\"\n```\n\n## Python\n\nTo install the latest **version** (release):\n\n```console\npip install lief\n```\n\nTo install nightly build:\n\n```console\npip install [--user] --force-reinstall --index-url https://lief.s3-website.fr-par.scw.cloud/latest lief==0.17.0.dev0\n```\n\n### Packages\n\n- LIEF Extended: https://extended.lief.re (GitHub OAuth)\n- **Nightly**:\n  * SDK: https://lief.s3-website.fr-par.scw.cloud/latest/sdk\n  * Python Wheels: https://lief.s3-website.fr-par.scw.cloud/latest/lief\n- **v0.16.2**: https://github.com/lief-project/LIEF/releases/tag/0.16.2\n\nHere are guides to install or integrate LIEF:\n\n  * [Python](https://lief.re/doc/latest/installation.html#python)\n  * [Visual Studio](https://lief.re/doc/latest/installation.html#visual-studio-integration)\n  * [XCode](https://lief.re/doc/latest/installation.html#xcode-integration)\n  * [CMake](https://lief.re/doc/latest/installation.html#cmake-integration)\n\n## Getting started\n\n### Python\n\n```python\nimport lief\n\n# ELF\nbinary = lief.parse(\"/usr/bin/ls\")\nfor section in binary.sections:\n    print(section.name, section.virtual_address)\n\n# PE\nbinary = lief.parse(\"C:\\\\Windows\\\\explorer.exe\")\n\nif rheader := pe.rich_header:\n    print(rheader.key)\n\n# Mach-O\nbinary = lief.parse(\"/usr/bin/ls\")\nfor fixup in binary.dyld_chained_fixups:\n    print(fixup)\n```\n\n### Rust\n\n```rust\nuse lief::Binary;\nuse lief::pe::debug::Entries::CodeViewPDB;\n\nif let Some(Binary::PE(pe)) = Binary::parse(path.as_str()) {\n    for entry in pe.debug() {\n        if let CodeViewPDB(pdb_view) = entry {\n            println!(\"{}\", pdb_view.filename());\n        }\n    }\n}\n```\n\n### C++\n\n```cpp\n#include <LIEF/LIEF.hpp>\n\nint main(int argc, char** argv) {\n  // ELF\n  if (std::unique_ptr<const LIEF::ELF::Binary> elf = LIEF::ELF::Parser::parse(\"/bin/ls\")) {\n    for (const LIEF::ELF::Section& section : elf->sections()) {\n      std::cout << section->name() << ' ' << section->virtual_address() << '\\n';\n    }\n  }\n\n  // PE\n  if (std::unique_ptr<const LIEF::PE::Binary> pe = LIEF::PE::Parser::parse(\"C:\\\\Windows\\\\explorer.exe\")) {\n    if (const LIEF::PE::RichHeader* rheader : pe->rich_header()) {\n      std::cout << rheader->key() << '\\n';\n    }\n  }\n\n  // Mach-O\n  if (std::unique_ptr<LIEF::MachO::FatBinary> macho = LIEF::MachO::Parser::parse(\"/bin/ls\")) {\n    for (const LIEF::MachO::DyldChainedFixups& fixup : macho->dyld_chained_fixups()) {\n      std::cout << fixup << '\\n';\n    }\n  }\n\n  return 0;\n}\n\n```\n\n### C (Limited API)\n\n```cpp\n#include <LIEF/LIEF.h>\n\nint main(int argc, char** argv) {\n  Elf_Binary_t* elf = elf_parse(\"/usr/bin/ls\");\n\n  Elf_Section_t** sections = elf->sections;\n\n  for (size_t i = 0; sections[i] != NULL; ++i) {\n    printf(\"%s\\n\", sections[i]->name);\n  }\n\n  elf_binary_destroy(elf);\n  return 0;\n}\n```\n\n## Documentation\n\n* [Main documentation](https://lief.re/doc/latest/index.html)\n* [Doxygen](https://lief.re/doc/latest/doxygen/index.html)\n* [Rust](https://lief.re/doc/stable/rust/lief/)\n\n## Contact\n\n* **Mail**: contact at lief re\n* **Discord**: [LIEF](https://discord.gg/7hRFGWYedu)\n\n## About\n\n### Authors\n\nRomain Thomas ([@rh0main](https://www.romainthomas.fr/)) - Formerly at [Quarkslab](https://www.quarkslab.com)\n\n### License\n\nLIEF is provided under the [Apache 2.0 license](https://github.com/lief-project/LIEF/blob/0.16.1/LICENSE).\n\n### Bibtex\n\n```bibtex\n@MISC {LIEF,\n  author       = \"Romain Thomas\",\n  title        = \"LIEF - Library to Instrument Executable Formats\",\n  howpublished = \"https://lief.quarkslab.com/\",\n  month        = \"apr\",\n  year         = \"2017\"\n}\n```\n\n\n"
        },
        {
          "name": "api",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuzzing",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "package",
          "type": "tree",
          "content": null
        },
        {
          "name": "profiling",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "third-party",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}