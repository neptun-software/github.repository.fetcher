{
  "metadata": {
    "timestamp": 1736565923785,
    "page": 894,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "prabhuomkar/pytorch-cpp",
      "stars": 1985,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.1435546875,
          "content": "/data\n/build\n/images\n/LICENSE\n/AUTHORS\n/notebooks\n/README.md\n/docker-compose.yml\n/Dockerfile\n/.github\n/.gitignore\n/.dockerignore\n/.travis.yml\n/.git"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0673828125,
          "content": "# Force bash scripts to always use LF line endings.\n*.sh text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.6552734375,
          "content": "# Prerequisites\n*.d\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n*.smod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\n# PyTorch\nlibtorch/\n\n# Datasets\ndata/\n\n# Tools\ntools/\n\n# Model files\ntutorials/**/*.pt\n\n# CMake\nCMakeLists.txt.user\nCMakeCache.txt\nCMakeFiles\nCMakeScripts\nTesting\nMakefile\ncmake_install.cmake\ninstall_manifest.txt\ncompile_commands.json\nCTestTestfile.cmake\n_deps\nbuild/\ncmake-build-*/\n\n# Other\n.DS_Store\n.idea/\n.clangd/\n\n# Notebooks\n.ipynb_checkpoints\n\n# extern\nextern/*\n!extern/CMakeLists.txt\n.vscode/"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.228515625,
          "content": "# Names should be added to this file like so:\n# Name or Organization <email address>\n\n# Initial version authors:\nOmkar Prabhu <prabhuomkar@pm.me>\nMarkus Fleischhacker <markus.fleischhacker28@gmail.com>\n\n# Partial list of contributors:"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 4.4599609375,
          "content": "cmake_minimum_required(VERSION 3.19 FATAL_ERROR)\n\nproject(pytorch-cpp VERSION 1.0.0 LANGUAGES CXX)\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\n\noption(DOWNLOAD_DATASETS \"Automatically download required datasets at build-time.\" ON)\noption(CREATE_SCRIPTMODULES \"Automatically create all required scriptmodule files at build-time (requires python3).\" OFF)\n\nset(PYTORCH_VERSION \"2.3.0\")\nset(PYTORCH_MIN_VERSION \"1.12.0\")\n\nfind_package(Torch QUIET PATHS \"${CMAKE_SOURCE_DIR}/libtorch\")\n\nif((NOT Torch_FOUND) OR ((\"${Torch_VERSION}\" VERSION_LESS \"${PYTORCH_MIN_VERSION}\") OR\n                         (\"${Torch_VERSION}\" VERSION_GREATER \"${PYTORCH_VERSION}\")))\n    unset(Torch_FOUND)\n    message(STATUS \"Could not find compatible Torch version (>= ${PYTORCH_MIN_VERSION}, <= ${PYTORCH_VERSION})\")\n    include(fetch_libtorch)\nendif()\n\nmessage(STATUS \"Torch version ${Torch_VERSION}\")\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${TORCH_CXX_FLAGS}\")\n\nif(${CMAKE_SYSTEM_NAME} STREQUAL \"Linux\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pthread\")\nendif()\n\nif(CREATE_SCRIPTMODULES)\n    find_package(Python3 COMPONENTS Interpreter REQUIRED)\nendif()\n\nset(EXECUTABLE_NAME pytorch-cpp)\n\nadd_executable(${EXECUTABLE_NAME})\n\ntarget_sources(${EXECUTABLE_NAME} PRIVATE main.cpp)\n\nset_target_properties(${EXECUTABLE_NAME} PROPERTIES\n  CXX_STANDARD 17\n  CXX_STANDARD_REQUIRED YES\n)\n\ntarget_link_libraries(${EXECUTABLE_NAME} ${TORCH_LIBRARIES})\n\n# External dependencies\nadd_subdirectory(\"extern\")\n\n# Utils\nadd_subdirectory(\"utils/image_io\")\n\n# Dataset fetching\nif(DOWNLOAD_DATASETS)\n    set(DATA_DIR ${CMAKE_CURRENT_SOURCE_DIR}/data CACHE PATH \"Dataset download directory\")\n    file(MAKE_DIRECTORY ${DATA_DIR})\n\n    add_custom_target(mnist COMMAND ${CMAKE_COMMAND}\n        -D DATA_DIR=${DATA_DIR}\n        -P ${CMAKE_CURRENT_SOURCE_DIR}/cmake/fetch_mnist.cmake)\n    add_custom_target(cifar10 COMMAND ${CMAKE_COMMAND}\n        -D DATA_DIR=${DATA_DIR}\n        -P ${CMAKE_CURRENT_SOURCE_DIR}/cmake/fetch_cifar10.cmake)\n    add_custom_target(penntreebank COMMAND ${CMAKE_COMMAND}\n        -D DATA_DIR=${DATA_DIR}\n        -P ${CMAKE_CURRENT_SOURCE_DIR}/cmake/fetch_penntreebank.cmake)\n    add_custom_target(neural_style_transfer_images COMMAND ${CMAKE_COMMAND}\n        -D DATA_DIR=${DATA_DIR}\n        -P ${CMAKE_CURRENT_SOURCE_DIR}/cmake/fetch_neural_style_transfer_images.cmake)\n    add_custom_target(flickr8k COMMAND ${CMAKE_COMMAND}\n        -D DATA_DIR=${DATA_DIR}\n        -P ${CMAKE_CURRENT_SOURCE_DIR}/cmake/fetch_flickr8k.cmake)\n    add_custom_target(imagenette COMMAND ${CMAKE_COMMAND}\n        -D DATA_DIR=${DATA_DIR}\n        -P ${CMAKE_CURRENT_SOURCE_DIR}/cmake/fetch_imagenette.cmake)\nendif()\n\n# Add tutorial sub-projects:\n\n# Basics\nadd_subdirectory(\"tutorials/basics/feedforward_neural_network\")\nadd_subdirectory(\"tutorials/basics/linear_regression\")\nadd_subdirectory(\"tutorials/basics/logistic_regression\")\nadd_subdirectory(\"tutorials/basics/pytorch_basics\")\n\nadd_custom_target(basics)\nadd_dependencies(basics\n    feedforward-neural-network\n    linear-regression\n    logistic-regression\n    pytorch-basics)\n\n# Intermediate\nadd_subdirectory(\"tutorials/intermediate/convolutional_neural_network\")\nadd_subdirectory(\"tutorials/intermediate/deep_residual_network\")\nadd_subdirectory(\"tutorials/intermediate/recurrent_neural_network\")\nadd_subdirectory(\"tutorials/intermediate/bidirectional_recurrent_neural_network\")\nadd_subdirectory(\"tutorials/intermediate/language_model\")\n\nadd_custom_target(intermediate)\nadd_dependencies(intermediate\n    convolutional-neural-network\n    deep-residual-network\n    recurrent-neural-network\n    bidirectional-recurrent-neural-network\n    language-model)\n\n# Advanced\nadd_subdirectory(\"tutorials/advanced/generative_adversarial_network\")\nadd_subdirectory(\"tutorials/advanced/variational_autoencoder\")\nadd_subdirectory(\"tutorials/advanced/neural_style_transfer\")\nadd_subdirectory(\"tutorials/advanced/image_captioning\")\n\nadd_custom_target(advanced)\nadd_dependencies(advanced\n    generative-adversarial-network\n    variational-autoencoder\n    neural-style-transfer\n    image-captioning)\n\n# Popular\nadd_subdirectory(\"tutorials/popular/blitz/tensors\")\nadd_subdirectory(\"tutorials/popular/blitz/autograd\")\nadd_subdirectory(\"tutorials/popular/blitz/neural_networks\")\nadd_subdirectory(\"tutorials/popular/blitz/training_a_classifier\")\n\nadd_custom_target(popular)\nadd_dependencies(popular\n    tensors\n    autograd\n    neural-networks\n    training-a-classifier)\n\nif(MSVC)\n    include(copy_torch_dlls)\n    copy_torch_dlls(${EXECUTABLE_NAME})\nendif()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.1650390625,
          "content": "# Contributing Guide\n\nThank you for your interest in contributing to PyTorch C++ Tutorials! Before you begin writing code, it is important that you share your intention to contribute with the team, based on the type of contribution:\n\n1. You want to propose a new feature and implement it.\n    Post about your intended feature in an issue, and we shall discuss the design and implementation. Once we agree that the plan looks good, go ahead and implement it.\n2. You want to implement a feature or bug-fix for an outstanding issue.\n    Search for your issue in the PyTorch issue list.\n    Pick an issue and comment that you'd like to work on the feature or bug-fix.\n    If you need more context on a particular issue, please ask and we shall provide.\n\nOnce you implement and test your feature or bug-fix, please submit a Pull Request to https://github.com/prabhuomkar/pytorch-cpp.\n\n## Developing PyTorch C++ Tutorials\n\nTo develop PyTorch C++ Tutorials on your machine, here are some tips:\n1. Install latest CMake from [here](https://cmake.org/)\n2. Clone the repository\n```\ngit clone https://github.com/prabhuomkar/pytorch-cpp\ncd pytorch-cpp\n```\n3. Follow the instructions given [here](https://github.com/prabhuomkar/pytorch-cpp#generate-build-system).\n\n## Codebase Structure\n\n- [docker](docker/) - Docker entrypoint and other docker related scripts\n- [extern](extern/) - External third-party C++ libraries\n- [notebooks](notebooks/) - Interactive tutorials are inside this directory\n- [tutorials](tutorials/) - All set of tutorials are here\n- [utils](utils/) - Utility functions live here\n\n## CI Failure Tips\n\nOnce you submit a PR or push a new commit to a branch that is in an active PR, Travis CI jobs will be run automatically. Some of these may fail and you will need to find out why, by looking at the logs.\n\nSome failures might be related to specific hardware or environment configurations. In this case, if the job is run by TravisCI, make sure you check logs and see the line of failure/error to identify the cause.\n\n## Discussion\n\nIf you want to discuss something more in detail, contact: \n- Omkar Prabhu - [prabhuomkar](https://github.com/prabhuomkar)\n- Markus Fleischhacker - [mfl28](https://github.com/mfl28)"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.953125,
          "content": "# Based on and inspired by Dockerfiles and resources at:\n#   https://github.com/pytorch/pytorch/blob/master/Dockerfile\n#   https://github.com/anibali/docker-pytorch\n#   https://jtreminio.com/blog/running-docker-containers-as-current-host-user/\n\nARG BASE_IMAGE=ubuntu:18.04\nARG PYTHON_VERSION=3.8\n\nFROM ${BASE_IMAGE} AS dev-base\n# Install basic packages.\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n    build-essential \\\n    curl \\\n    git \\\n    ca-certificates && \\\n    apt-get autoremove -y && \\\n    rm -rf /var/lib/apt/lists/*\nENV PATH /opt/conda/bin:$PATH\n\nFROM dev-base AS conda\n# Install conda.\nARG PYTHON_VERSION\nENV CONDA_AUTO_UPDATE_CONDA=false\nRUN curl --silent --show-error --location --output ~/miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh  && \\\n    chmod +x ~/miniconda.sh && \\\n    ~/miniconda.sh -b -p /opt/conda && \\\n    rm ~/miniconda.sh && \\\n    conda install -y python=${PYTHON_VERSION} && \\\n    conda clean -ya\n\nFROM conda AS conda-installs\n# Install pytorch for CPU and torchvision.\nARG PYTORCH_VERSION=2.3.0\nARG TORCHVISION_VERSION=0.18.0\nENV NO_CUDA=1\nRUN conda install pytorch==${PYTORCH_VERSION} torchvision==${TORCHVISION_VERSION} cpuonly -y -c pytorch && conda clean -ya\n\nFROM conda AS build\n# Build tutorials.\nARG PYTHON_VERSION\nARG GROUP_ID=1000\nARG USER_ID=1000\nENV PYTHON_VERSION=${PYTHON_VERSION}\nWORKDIR /pytorch-cpp\nRUN pip install --upgrade --no-cache-dir cmake && \\\n    groupadd --gid ${GROUP_ID} pytorch && \\\n    useradd --uid ${USER_ID} --gid pytorch  --create-home --no-log-init --shell /bin/bash pytorch && \\\n    chown --changes --silent --no-dereference --recursive ${USER_ID}:${GROUP_ID} /home/pytorch\nUSER pytorch\nENV HOME=/home/pytorch\nCOPY --from=conda-installs /opt/conda /opt/conda\nCOPY --chown=pytorch:pytorch ./docker/docker-entrypoint.sh /\nRUN chmod +x /docker-entrypoint.sh\nENTRYPOINT [ \"/docker-entrypoint.sh\" ]\n\nLABEL maintainer=\"prabhuomkar@pm.me,markus.fleischhacker28@gmail.com\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0947265625,
          "content": "MIT License\n\nCopyright (c) 2020-present, pytorch-cpp Authors\nCopyright (c) 2019-2020 Omkar Prabhu\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.345703125,
          "content": "<h1 align=\"center\">\n    <img src=\"images/pytorch_cpp.jpg\" width=\"50%\">\n</h1>\n<p align=\"center\">\n    C++ Implementation of PyTorch Tutorials for Everyone\n    <br />\n<img src=\"https://img.shields.io/github/license/prabhuomkar/pytorch-cpp\">\n<img src=\"https://img.shields.io/badge/libtorch-2.3.0-ee4c2c\">\n<img src=\"https://img.shields.io/badge/cmake-3.19-064f8d\">\n</p>\n\n\n| OS (Compiler)\\\\LibTorch |                                                  2.3.0                                                |\n| :--------------------- | :--------------------------------------------------------------------------------------------------- |\n|    macOS (clang 11, 12, 13)    | [![Status](https://github.com/prabhuomkar/pytorch-cpp/actions/workflows/build_macos.yml/badge.svg?branch=master)](https://github.com/prabhuomkar/pytorch-cpp/actions?query=workflow%3Aci-build-macos) |\n|      Linux (gcc 9, 10, 11)      | [![Status](https://github.com/prabhuomkar/pytorch-cpp/actions/workflows/build_ubuntu.yml/badge.svg?branch=master)](https://github.com/prabhuomkar/pytorch-cpp/actions?query=workflow%3Aci-build-ubuntu) |\n|    Windows (msvc 2019, 2022)  | [![Status](https://github.com/prabhuomkar/pytorch-cpp/actions/workflows/build_windows.yml/badge.svg?branch=master)](https://github.com/prabhuomkar/pytorch-cpp/actions?query=workflow%3Aci-build-windows) |\n\n## Table of Contents\n\nThis repository provides tutorial code in C++ for deep learning researchers to learn PyTorch _(i.e. Section 1 to 3)_  \n**Python Tutorial**: [https://github.com/yunjey/pytorch-tutorial](https://github.com/yunjey/pytorch-tutorial)\n\n### 1. Basics\n* [PyTorch Basics](tutorials/basics/pytorch_basics/main.cpp)\n* [Linear Regression](tutorials/basics/linear_regression/main.cpp)\n* [Logistic Regression](tutorials/basics/logistic_regression/main.cpp)\n* [Feedforward Neural Network](tutorials/basics/feedforward_neural_network/src/main.cpp)\n\n### 2. Intermediate\n* [Convolutional Neural Network](tutorials/intermediate/convolutional_neural_network/src/main.cpp)\n* [Deep Residual Network](tutorials/intermediate/deep_residual_network/src/main.cpp)\n* [Recurrent Neural Network](tutorials/intermediate/recurrent_neural_network/src/main.cpp)\n* [Bidirectional Recurrent Neural Network](tutorials/intermediate/bidirectional_recurrent_neural_network/src/main.cpp)\n* [Language Model (RNN-LM)](tutorials/intermediate/language_model/src/main.cpp)\n\n### 3. Advanced\n* [Generative Adversarial Networks](tutorials/advanced/generative_adversarial_network/main.cpp)\n* [Variational Auto-Encoder](tutorials/advanced/variational_autoencoder/src/main.cpp)\n* [Neural Style Transfer](tutorials/advanced/neural_style_transfer/src/main.cpp)\n* [Image Captioning (CNN-AttentionRNN)](tutorials/advanced/image_captioning/src/main.cpp)\n\n### 4. Interactive Tutorials\n* [Tensor Slicing](notebooks/tensor_slicing.ipynb)\n\n### 5. Other Popular Tutorials\n* [Deep Learning with PyTorch: A 60 Minute Blitz](tutorials/popular/blitz)\n\n# Getting Started\n\n## Requirements\n\n1. [C++-17](http://www.cplusplus.com/doc/tutorial/introduction/) compatible compiler\n2. [CMake](https://cmake.org/download/) (minimum version 3.19)\n3. [LibTorch version >= 1.12.0 and <= 2.3.0](https://pytorch.org/cppdocs/installing.html)\n4. [Conda](https://docs.conda.io/projects/conda/en/latest/user-guide/install/download.html)\n\n\n## For Interactive Tutorials\n\n**Note**: Interactive Tutorials are currently running on **LibTorch Nightly Version**.  \nSo there are some tutorials which can break when working with _nightly version_.\n\n```bash\nconda create --name pytorch-cpp\nconda activate pytorch-cpp\nconda install xeus-cling notebook -c conda-forge\n```\n## Clone, build and run tutorials\n### In Google Colab\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/prabhuomkar/pytorch-cpp/blob/master/notebooks/pytorch_cpp_colab_notebook.ipynb)\n\n### On Local Machine\n\n```bash\ngit clone https://github.com/prabhuomkar/pytorch-cpp.git\ncd pytorch-cpp\n```\n\n#### Generate build system\n\n```bash\ncmake -B build #<options>\n```\n> **_Note for Windows users:_**<br> \n> Libtorch only supports 64bit Windows and an x64 generator needs to be specified. For Visual Studio this can be done by appending `-A x64` to the above command.\n\nSome useful options:\n\n| Option       | Default           | Description  |\n| :------------- |:------------|-----:|\n| `-D CUDA_V=(11.8\\|12.1\\|none)`     | `none` | Download LibTorch for a CUDA version (`none` = download CPU version). |\n| `-D LIBTORCH_DOWNLOAD_BUILD_TYPE=(Release\\|Debug)` | `Release` | Determines which libtorch build type version to download (only relevant on **Windows**).|\n| `-D DOWNLOAD_DATASETS=(OFF\\|ON)`     | `ON`      |   Download required datasets during build (only if they do not already exist in `pytorch-cpp/data`). |\n|`-D CREATE_SCRIPTMODULES=(OFF\\|ON)` | `OFF` | Create all required scriptmodule files for prelearned models / weights during build. Requires installed  python3 with  pytorch and torchvision. |\n| `-D CMAKE_PREFIX_PATH=path/to/libtorch/share/cmake/Torch` |   `<empty>`    |    Skip the downloading of LibTorch and use your own local version (see [Requirements](#requirements)) instead. |\n| `-D CMAKE_BUILD_TYPE=(Release\\|Debug\\|...)` | `<empty>` | Determines the CMake build-type for single-configuration generators (see [CMake docs](https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html)).|\n\n<details>\n<summary><b>Example Linux</b></summary>\n\n##### Aim\n* Use existing Python, PyTorch (see [Requirements](#requirements)) and torchvision installation.\n* Download all datasets and create all necessary scriptmodule files.\n\n##### Command\n```bash\ncmake -B build \\\n-D CMAKE_BUILD_TYPE=Release \\\n-D CMAKE_PREFIX_PATH=/path/to/libtorch/share/cmake/Torch \\\n-D CREATE_SCRIPTMODULES=ON \n```\n</details>\n\n<details>\n<summary><b>Example Windows</b></summary>\n\n##### Aim\n* Automatically download LibTorch for CUDA 11.8 (Release version) and all necessary datasets.\n* Do not create scriptmodule files.\n\n##### Command\n```bash\ncmake -B build \\\n-A x64 \\\n-D CUDA_V=11.8\n```\n</details>\n\n#### Build\n>**_Note for Windows (Visual Studio) users:_** <br>\n>The CMake script downloads the *Release* version of LibTorch, so `--config Release` has to be appended to the build command.\n\n**How dataset download and scriptmodule creation work:**\n* If `DOWNLOAD_DATASETS` is `ON`, the datasets required by the tutorials you choose to build will be downloaded to `pytorch-cpp/data` (if they do not already exist there).\n* If `CREATE_SCRIPTMODULES` is `ON`, the scriptmodule files for the prelearned models / weights required by the tutorials you choose to build will be created in the `model` folder of the respective tutorial's source folder (if they do not already exist).\n#### All tutorials\nTo build all tutorials use\n```bash\ncmake --build build\n```\n\n#### All tutorials in a category\nYou can choose to only build tutorials in one of the categories `basics`, `intermediate`, `advanced` or `popular`. For example, if you are only interested in the `basics` tutorials:\n```bash\ncmake --build build --target basics\n# In general: cmake --build build --target {category}\n```\n\n#### Single tutorial\nYou can also choose to only build a single tutorial. For example to build the language model tutorial only: \n```bash\ncmake --build build --target language-model\n# In general: cmake --build build --target {tutorial-name}\n```\n>**_Note_**:  \n> The target argument is the tutorial's foldername with all underscores replaced by hyphens.\n\n>**_Tip for users of CMake version >= 3.15_**:  \n> You can specify several targets separated by spaces, for example:  \n> ```bash \n> cmake --build build --target language-model image-captioning\n> ```\n\n#### Run Tutorials\n1. (**IMPORTANT!**) First change into the tutorial's directory within `build/tutorials`. For example, assuming you are in the `pytorch-cpp` directory and want to change to the pytorch basics tutorial folder:\n     ```bash\n     cd build/tutorials/basics/pytorch_basics\n     # In general: cd build/tutorials/{basics|intermediate|advanced|popular/blitz}/{tutorial_name}\n     ```\n2. Run the executable. Note that the executable's name is the tutorial's foldername with all underscores replaced with hyphens (e.g. for tutorial folder: `pytorch_basics` -> executable name: `pytorch-basics` (or `pytorch-basics.exe` on Windows)). For example, to run the pytorch basics tutorial:<br><br>\n     **Linux/Mac**\n     ```bash\n     ./pytorch-basics\n     # In general: ./{tutorial-name}\n     ```\n     **Windows**\n     ```powershell\n     .\\pytorch-basics.exe\n     # In general: .\\{tutorial-name}.exe\n     ```\n\n### Using Docker\n\nFind the latest and previous version images on [Docker Hub](https://hub.docker.com/repository/docker/prabhuomkar/pytorch-cpp).\n\nYou can build and run the tutorials (on CPU) in a Docker container using the provided `Dockerfile` and `docker-compose.yml` files:  \n1. From the root directory of the cloned repo build the image:\n    ```bash\n    docker-compose build --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g)\n    ```\n    > **_Note_**:  \n    > When you run the Docker container, the host repo directory is mounted as a volume in the Docker container in order to cache build and downloaded dependency files so that it is not necessary to rebuild or redownload everything when a container is restarted. In order to have correct file permissions it is necessary to provide your user and group ids as build arguments when building the image on Linux.\n2. Now start the container and build the tutorials using:\n    ```bash\n    docker-compose run --rm pytorch-cpp\n    ```\n    This fetches all necessary dependencies and builds all tutorials.\n    After the build is done, by default the container starts `bash` in interactive mode in the `build/tutorials` folder.  \n    As with the local build, you can choose to only build tutorials of a category (`basics`, `intermediate`, `advanced`, `popular`):\n    ```bash\n    docker-compose run --rm pytorch-cpp {category}\n    ```\n    In this case the container is started in the chosen category's base build directory.  \n    Alternatively, you can also directly run a tutorial by instead invoking the run command with a tutorial name as additional argument, for example:\n    ```bash\n    docker-compose run --rm pytorch-cpp pytorch-basics\n    # In general: docker-compose run --rm pytorch-cpp {tutorial-name} \n    ```\n    This will - if necessary - build the pytorch-basics tutorial and then start the executable in a container.\n\n## License\nThis repository is licensed under MIT as given in [LICENSE](LICENSE).\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.1396484375,
          "content": "version: \"3\"\n\nservices:\n  pytorch-cpp:\n    build: .\n    volumes:\n      - .:/pytorch-cpp\n    image: pytorch-cpp\n    container_name: pytorch-cpp\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "extern",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.cpp",
          "type": "blob",
          "size": 0.2001953125,
          "content": "// Copyright 2020-present pytorch-cpp Authors\n#include <torch/torch.h>\n#include <iostream>\n\nint main() {\n    std::cout << \"Welcome to PyTorch Tutorial in C++ for Deep Learning Researchers\" << std::endl;\n}\n"
        },
        {
          "name": "notebooks",
          "type": "tree",
          "content": null
        },
        {
          "name": "tutorials",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}