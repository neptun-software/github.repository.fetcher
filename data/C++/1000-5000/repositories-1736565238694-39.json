{
  "metadata": {
    "timestamp": 1736565238694,
    "page": 39,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "XRPLF/rippled",
      "stars": 4703,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.6328125,
          "content": "---\nLanguage:        Cpp\nAccessModifierOffset: -4\nAlignAfterOpenBracket: AlwaysBreak\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlinesLeft: true\nAlignOperands: false\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: false\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterReturnType: All\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: true\nBinPackArguments: false\nBinPackParameters: false\nBraceWrapping:\n  AfterClass:      true\n  AfterControlStatement: true\n  AfterEnum:       false\n  AfterFunction:   true\n  AfterNamespace:  false\n  AfterObjCDeclaration: true\n  AfterStruct:     true\n  AfterUnion:      true\n  BeforeCatch:     true\n  BeforeElse:      true\n  IndentBraces:    false\nBreakBeforeBinaryOperators: false\nBreakBeforeBraces: Custom\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: true\nColumnLimit:     80\nCommentPragmas:  '^ IWYU pragma:'\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nForEachMacros:   [ Q_FOREACH,  BOOST_FOREACH ]\nIncludeCategories:\n  - Regex:           '^<(test)/'\n    Priority:        0\n  - Regex:           '^<(xrpld)/'\n    Priority:        1\n  - Regex:           '^<(xrpl)/'\n    Priority:        2\n  - Regex:           '^<(boost)/'\n    Priority:        3\n  - Regex:           '.*'\n    Priority:        4\nIncludeIsMainRegex: '$'\nIndentCaseLabels: true\nIndentFunctionDeclarationAfterType: false\nIndentRequiresClause: true\nIndentWidth:     4\nIndentWrappedFunctionNames: false\nKeepEmptyLinesAtTheStartOfBlocks: false\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: false\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 200\nPointerAlignment: Left\nReflowComments:  true\nRequiresClausePosition: OwnLine\nSortIncludes:    true\nSpaceAfterCStyleCast: false\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 2\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Cpp11\nTabWidth:        8\nUseTab:          Never\n"
        },
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.5849609375,
          "content": "codecov:\n  require_ci_to_pass: true\n\ncomment:\n  behavior: default\n  layout: reach,diff,flags,tree,reach\n  show_carryforward_flags: false\n\ncoverage:\n  range: \"60..80\"\n  precision: 1\n  round: nearest\n  status:\n    project:\n      default:\n        target: 60%\n        threshold: 2%\n    patch:\n      default:\n        target: auto\n        threshold: 2%\n    changes: false\n\ngithub_checks:\n  annotations: true\n\nparsers:\n  cobertura:\n    partials_as_hits: true\n    handle_missing_conditions : true\n\nslack_app: false\n\nignore:\n  - \"src/test/\"\n  - \"include/xrpl/beast/test/\"\n  - \"include/xrpl/beast/unit_test/\"\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.52734375,
          "content": "# This feature requires Git >= 2.24\n# To use it by default in git blame:\n# git config blame.ignoreRevsFile .git-blame-ignore-revs\n50760c693510894ca368e90369b0cc2dabfd07f3\ne2384885f5f630c8f0ffe4bf21a169b433a16858\n241b9ddde9e11beb7480600fd5ed90e1ef109b21\n760f16f56835663d9286bd29294d074de26a7ba6\n0eebe6a5f4246fced516d52b83ec4e7f47373edd\n2189cc950c0cebb89e4e2fa3b2d8817205bf7cef\nb9d007813378ad0ff45660dc07285b823c7e9855\nfe9a5365b8a52d4acc42eb27369247e6f238a4f9\n9a93577314e6a8d4b4a8368cc9d2b15a5d8303e8\n552377c76f55b403a1c876df873a23d780fcc81c\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2783203125,
          "content": "# Set default behaviour, in case users don't have core.autocrlf set.\n#* text=auto\n\n# These annoying files\nrippled.1 binary\nLICENSE binary\n\n# Visual Studio\n*.sln       text eol=crlf\n*.vcproj    text eol=crlf\n*.vcxproj   text eol=crlf\n*.props     text eol=crlf\n*.filters   text eol=crlf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.5341796875,
          "content": "# .gitignore\n\nbin/boostbook_catalog.xml\nbin/config.log\nbin/project-cache.jam\n\n# Ignore vim swap files.\n*.swp\n\n# Ignore SCons support files.\n.sconsign.dblite\n\n# Ignore python compiled files.\n*.pyc\n\n# Ignore Macintosh Desktop Services Store files.\n.DS_Store\n\n# Ignore backup/temps\n*~\n\n# Ignore object files.\n*.o\n.nih_c\ntags\nTAGS\nGTAGS\nGRTAGS\nGPATH\nbin/rippled\nDebug/*.*\nRelease/*.*\n\n# Ignore coverage files.\n*.gcno\n*.gcda\n*.gcov\n\n# Levelization checking\nBuilds/levelization/results/rawincludes.txt\nBuilds/levelization/results/paths.txt\nBuilds/levelization/results/includes/\nBuilds/levelization/results/includedby/\n\n# Ignore tmp directory.\ntmp\n\n# Ignore database directory.\ndb/\ndb/*.db\ndb/*.db-*\n\n# Ignore debug logs\ndebug_log.txt\n\n# Ignore customized configs\nrippled.cfg\nvalidators.txt\n\n# Doxygen generated documentation output\nHtmlDocumentation\ndocs/html_doc\n\n# Xcode user-specific project settings\n# Xcode\n.DS_Store\n/build/\n*.pbxuser\n!default.pbxuser\n*.mode1v3\n!default.mode1v3\n*.mode2v3\n!default.mode2v3\n*.perspectivev3\n!default.perspectivev3\nxcuserdata\nprofile\n*.moved-aside\nDerivedData\n.idea/\n*.hmap\n\n# Intel Parallel Studio 2013 XE\nMy Amplifier XE Results - RippleD\n\n# Compiler intermediate output\n/out.txt\n\n# Build Log\nrippled-build.log\n\n# Profiling data\ngmon.out\n\nBuilds/VisualStudio2015/*.db\nBuilds/VisualStudio2015/*.user\nBuilds/VisualStudio2015/*.opendb\nBuilds/VisualStudio2015/*.sdf\n\n# MSVC\n*.pdb\n.vs/\nCMakeSettings.json\ncompile_commands.json\n.clangd\npackages\npkg_out\npkg\nCMakeUserPresets.json\nbld.rippled/\n.vscode\n\n# Suggested in-tree build directory\n/.build/\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.1337890625,
          "content": "# .pre-commit-config.yaml\nrepos:\n- repo: https://github.com/pre-commit/mirrors-clang-format\n  rev: v18.1.3\n  hooks:\n  - id: clang-format\n"
        },
        {
          "name": "API-CHANGELOG.md",
          "type": "blob",
          "size": 17.24609375,
          "content": "# API Changelog\n\nThis changelog is intended to list all updates to the [public API methods](https://xrpl.org/public-api-methods.html).\n\nFor info about how [API versioning](https://xrpl.org/request-formatting.html#api-versioning) works, including examples, please view the [XLS-22d spec](https://github.com/XRPLF/XRPL-Standards/discussions/54). For details about the implementation of API versioning, view the [implementation PR](https://github.com/XRPLF/rippled/pull/3155). API versioning ensures existing integrations and users continue to receive existing behavior, while those that request a higher API version will experience new behavior.\n\nThe API version controls the API behavior you see. This includes what properties you see in responses, what parameters you're permitted to send in requests, and so on. You specify the API version in each of your requests. When a breaking change is introduced to the `rippled` API, a new version is released. To avoid breaking your code, you should set (or increase) your version when you're ready to upgrade.\n\nFor a log of breaking changes, see the **API Version [number]** headings. In general, breaking changes are associated with a particular API Version number. For non-breaking changes, scroll to the **XRP Ledger version [x.y.z]** headings. Non-breaking changes are associated with a particular XRP Ledger (`rippled`) release.\n\n## API Version 2\n\nAPI version 2 is available in `rippled` version 2.0.0 and later. To use this API, clients specify `\"api_version\" : 2` in each request.\n\n#### Removed methods\n\nIn API version 2, the following deprecated methods are no longer available: (https://github.com/XRPLF/rippled/pull/4759)\n\n- `tx_history` - Instead, use other methods such as `account_tx` or `ledger` with the `transactions` field set to `true`.\n- `ledger_header` - Instead, use the `ledger` method.\n\n#### Modifications to JSON transaction element in V2\n\nIn API version 2, JSON elements for transaction output have been changed and made consistent for all methods which output transactions. (https://github.com/XRPLF/rippled/pull/4775)\nThis helps to unify the JSON serialization format of transactions. (https://github.com/XRPLF/clio/issues/722, https://github.com/XRPLF/rippled/issues/4727)\n\n- JSON transaction element is named `tx_json`\n- Binary transaction element is named `tx_blob`\n- JSON transaction metadata element is named `meta`\n- Binary transaction metadata element is named `meta_blob`\n\nAdditionally, these elements are now consistently available next to `tx_json` (i.e. sibling elements), where possible:\n\n- `hash` - Transaction ID. This data was stored inside transaction output in API version 1, but in API version 2 is a sibling element.\n- `ledger_index` - Ledger index (only set on validated ledgers)\n- `ledger_hash` - Ledger hash (only set on closed or validated ledgers)\n- `close_time_iso` - Ledger close time expressed in ISO 8601 time format (only set on validated ledgers)\n- `validated` - Bool element set to `true` if the transaction is in a validated ledger, otherwise `false`\n\nThis change affects the following methods:\n\n- `tx` - Transaction data moved into element `tx_json` (was inline inside `result`) or, if binary output was requested, moved from `tx` to `tx_blob`. Renamed binary transaction metadata element (if it was requested) from `meta` to `meta_blob`. Changed location of `hash` and added new elements\n- `account_tx` - Renamed transaction element from `tx` to `tx_json`. Renamed binary transaction metadata element (if it was requested) from `meta` to `meta_blob`. Changed location of `hash` and added new elements\n- `transaction_entry` - Renamed transaction metadata element from `metadata` to `meta`. Changed location of `hash` and added new elements\n- `subscribe` - Renamed transaction element from `transaction` to `tx_json`. Changed location of `hash` and added new elements\n- `sign`, `sign_for`, `submit` and `submit_multisigned` - Changed location of `hash` element.\n\n#### Modification to `Payment` transaction JSON schema\n\nWhen reading Payments, the `Amount` field should generally **not** be used. Instead, use [delivered_amount](https://xrpl.org/partial-payments.html#the-delivered_amount-field) to see the amount that the Payment delivered. To clarify its meaning, the `Amount` field is being renamed to `DeliverMax`. (https://github.com/XRPLF/rippled/pull/4733)\n\n- In `Payment` transaction type, JSON RPC field `Amount` is renamed to `DeliverMax`. To enable smooth client transition, `Amount` is still handled, as described below: (https://github.com/XRPLF/rippled/pull/4733)\n  - On JSON RPC input (e.g. `submit_multisigned` etc. methods), `Amount` is recognized as an alias to `DeliverMax` for both API version 1 and version 2 clients.\n  - On JSON RPC input, submitting both `Amount` and `DeliverMax` fields is allowed _only_ if they are identical; otherwise such input is rejected with `rpcINVALID_PARAMS` error.\n  - On JSON RPC output (e.g. `subscribe`, `account_tx` etc. methods), `DeliverMax` is present in both API version 1 and version 2.\n  - On JSON RPC output, `Amount` is only present in API version 1 and _not_ in version 2.\n\n#### Modifications to account_info response\n\n- `signer_lists` is returned in the root of the response. (In API version 1, it was nested under `account_data`.) (https://github.com/XRPLF/rippled/pull/3770)\n- When using an invalid `signer_lists` value, the API now returns an \"invalidParams\" error. (https://github.com/XRPLF/rippled/pull/4585)\n  - (`signer_lists` must be a boolean. In API version 1, strings were accepted and may return a normal response - i.e. as if `signer_lists` were `true`.)\n\n#### Modifications to [account_tx](https://xrpl.org/account_tx.html#account_tx) response\n\n- Using `ledger_index_min`, `ledger_index_max`, and `ledger_index` returns `invalidParams` because if you use `ledger_index_min` or `ledger_index_max`, then it does not make sense to also specify `ledger_index`. In API version 1, no error was returned. (https://github.com/XRPLF/rippled/pull/4571)\n  - The same applies for `ledger_index_min`, `ledger_index_max`, and `ledger_hash`. (https://github.com/XRPLF/rippled/issues/4545#issuecomment-1565065579)\n- Using a `ledger_index_min` or `ledger_index_max` beyond the range of ledgers that the server has:\n  - returns `lgrIdxMalformed` in API version 2. Previously, in API version 1, no error was returned. (https://github.com/XRPLF/rippled/issues/4288)\n- Attempting to use a non-boolean value (such as a string) for the `binary` or `forward` parameters returns `invalidParams` (`rpcINVALID_PARAMS`). Previously, in API version 1, no error was returned. (https://github.com/XRPLF/rippled/pull/4620)\n\n#### Modifications to [noripple_check](https://xrpl.org/noripple_check.html#noripple_check) response\n\n- Attempting to use a non-boolean value (such as a string) for the `transactions` parameter returns `invalidParams` (`rpcINVALID_PARAMS`). Previously, in API version 1, no error was returned. (https://github.com/XRPLF/rippled/pull/4620)\n\n## API Version 1\n\nThis version is supported by all `rippled` versions. For WebSocket and HTTP JSON-RPC requests, it is currently the default API version used when no `api_version` is specified.\n\nThe [commandline](https://xrpl.org/docs/references/http-websocket-apis/api-conventions/request-formatting/#commandline-format) always uses the latest API version. The command line is intended for ad-hoc usage by humans, not programs or automated scripts. The command line is not meant for use in production code.\n\n### Inconsistency: server_info - network_id\n\nThe `network_id` field was added in the `server_info` response in version 1.5.0 (2019), but it is not returned in [reporting mode](https://xrpl.org/rippled-server-modes.html#reporting-mode). However, use of reporting mode is now discouraged, in favor of using [Clio](https://github.com/XRPLF/clio) instead.\n\n## XRP Ledger server version 2.4.0\n\n### Addition in 2.4\n\n- `ledger_entry`: `state` is added an alias for `ripple_state`.\n\n## XRP Ledger server version 2.3.0\n\n### Breaking change in 2.3\n\n- `book_changes`: If the requested ledger version is not available on this node, a `ledgerNotFound` error is returned and the node does not attempt to acquire the ledger from the p2p network (as with other non-admin RPCs).\n\nAdmins can still attempt to retrieve old ledgers with the `ledger_request` RPC.\n\n### Addition in 2.3\n\n- `book_changes`: Returns a `validated` field in its response, which was missing in prior versions.\n\nThe following additions are non-breaking (because they are purely additive).\n\n- `server_definitions`: A new RPC that generates a `definitions.json`-like output that can be used in XRPL libraries.\n- In `Payment` transactions, `DeliverMax` has been added. This is a replacement for the `Amount` field, which should not be used. Typically, the `delivered_amount` (in transaction metadata) should be used. To ease the transition, `DeliverMax` is present regardless of API version, since adding a field is non-breaking.\n- API version 2 has been moved from beta to supported, meaning that it is generally available (regardless of the `beta_rpc_api` setting).\n\n## XRP Ledger server version 2.2.0\n\nThe following is a non-breaking addition to the API.\n\n- The `feature` method now has a non-admin mode for users. (It was previously only available to admin connections.) The method returns an updated list of amendments, including their names and other information. ([#4781](https://github.com/XRPLF/rippled/pull/4781))\n\n## XRP Ledger server version 1.12.0\n\n[Version 1.12.0](https://github.com/XRPLF/rippled/releases/tag/1.12.0) was released on Sep 6, 2023. The following additions are non-breaking (because they are purely additive).\n\n- `server_info`: Added `ports`, an array which advertises the RPC and WebSocket ports. This information is also included in the `/crawl` endpoint (which calls `server_info` internally). `grpc` and `peer` ports are also included. (https://github.com/XRPLF/rippled/pull/4427)\n  - `ports` contains objects, each containing a `port` for the listening port (a number string), and a `protocol` array listing the supported protocols on that port.\n  - This allows crawlers to build a more detailed topology without needing to port-scan nodes.\n  - (For peers and other non-admin clients, the info about admin ports is excluded.)\n- Clawback: The following additions are gated by the Clawback amendment (`featureClawback`). (https://github.com/XRPLF/rippled/pull/4553)\n  - Adds an [AccountRoot flag](https://xrpl.org/accountroot.html#accountroot-flags) called `lsfAllowTrustLineClawback` (https://github.com/XRPLF/rippled/pull/4617)\n    - Adds the corresponding `asfAllowTrustLineClawback` [AccountSet Flag](https://xrpl.org/accountset.html#accountset-flags) as well.\n    - Clawback is disabled by default, so if an issuer desires the ability to claw back funds, they must use an `AccountSet` transaction to set the AllowTrustLineClawback flag. They must do this before creating any trust lines, offers, escrows, payment channels, or checks.\n  - Adds the [Clawback transaction type](https://github.com/XRPLF/XRPL-Standards/blob/master/XLS-39d-clawback/README.md#331-clawback-transaction), containing these fields:\n    - `Account`: The issuer of the asset being clawed back. Must also be the sender of the transaction.\n    - `Amount`: The amount being clawed back, with the `Amount.issuer` being the token holder's address.\n- Adds [AMM](https://github.com/XRPLF/XRPL-Standards/discussions/78) ([#4294](https://github.com/XRPLF/rippled/pull/4294), [#4626](https://github.com/XRPLF/rippled/pull/4626)) feature:\n  - Adds `amm_info` API to retrieve AMM information for a given tokens pair.\n  - Adds `AMMCreate` transaction type to create `AMM` instance.\n  - Adds `AMMDeposit` transaction type to deposit funds into `AMM` instance.\n  - Adds `AMMWithdraw` transaction type to withdraw funds from `AMM` instance.\n  - Adds `AMMVote` transaction type to vote for the trading fee of `AMM` instance.\n  - Adds `AMMBid` transaction type to bid for the Auction Slot of `AMM` instance.\n  - Adds `AMMDelete` transaction type to delete `AMM` instance.\n  - Adds `sfAMMID` to `AccountRoot` to indicate that the account is `AMM`'s account. `AMMID` is used to fetch `ltAMM`.\n  - Adds `lsfAMMNode` `TrustLine` flag to indicate that one side of the `TrustLine` is `AMM` account.\n  - Adds `tfLPToken`, `tfSingleAsset`, `tfTwoAsset`, `tfOneAssetLPToken`, `tfLimitLPToken`, `tfTwoAssetIfEmpty`,\n    `tfWithdrawAll`, `tfOneAssetWithdrawAll` which allow a trader to specify different fields combination\n    for `AMMDeposit` and `AMMWithdraw` transactions.\n  - Adds new transaction result codes:\n    - tecUNFUNDED_AMM: insufficient balance to fund AMM. The account does not have funds for liquidity provision.\n    - tecAMM_BALANCE: AMM has invalid balance. Calculated balances greater than the current pool balances.\n    - tecAMM_FAILED: AMM transaction failed. Fails due to a processing failure.\n    - tecAMM_INVALID_TOKENS: AMM invalid LP tokens. Invalid input values, format, or calculated values.\n    - tecAMM_EMPTY: AMM is in empty state. Transaction requires AMM in non-empty state (LP tokens > 0).\n    - tecAMM_NOT_EMPTY: AMM is not in empty state. Transaction requires AMM in empty state (LP tokens == 0).\n    - tecAMM_ACCOUNT: AMM account. Clawback of AMM account.\n    - tecINCOMPLETE: Some work was completed, but more submissions required to finish. AMMDelete partially deletes the trustlines.\n\n## XRP Ledger server version 1.11.0\n\n[Version 1.11.0](https://github.com/XRPLF/rippled/releases/tag/1.11.0) was released on Jun 20, 2023.\n\n### Breaking changes in 1.11\n\n- Added the ability to mark amendments as obsolete. For the `feature` admin API, there is a new possible value for the `vetoed` field. (https://github.com/XRPLF/rippled/pull/4291)\n  - The value of `vetoed` can now be `true`, `false`, or `\"Obsolete\"`.\n- Removed the acceptance of seeds or public keys in place of account addresses. (https://github.com/XRPLF/rippled/pull/4404)\n  - This simplifies the API and encourages better security practices (i.e. seeds should never be sent over the network).\n- For the `ledger_data` method, when all entries are filtered out, the `state` field of the response is now an empty list (in other words, an empty array, `[]`). (Previously, it would return `null`.) While this is technically a breaking change, the new behavior is consistent with the documentation, so this is considered only a bug fix. (https://github.com/XRPLF/rippled/pull/4398)\n- If and when the `fixNFTokenRemint` amendment activates, there will be a new AccountRoot field, `FirstNFTSequence`. This field is set to the current account sequence when the account issues their first NFT. If an account has not issued any NFTs, then the field is not set. ([#4406](https://github.com/XRPLF/rippled/pull/4406))\n  - There is a new account deletion restriction: an account can only be deleted if `FirstNFTSequence` + `MintedNFTokens` + `256` is less than the current ledger sequence.\n  - This is potentially a breaking change if clients have logic for determining whether an account can be deleted.\n- NetworkID\n  - For sidechains and networks with a network ID greater than 1024, there is a new [transaction common field](https://xrpl.org/transaction-common-fields.html), `NetworkID`. (https://github.com/XRPLF/rippled/pull/4370)\n    - This field helps to prevent replay attacks and is now required for chains whose network ID is 1025 or higher.\n    - The field must be omitted for Mainnet, so there is no change for Mainnet users.\n  - There are three new local error codes:\n    - `telNETWORK_ID_MAKES_TX_NON_CANONICAL`: a `NetworkID` is present but the chain's network ID is less than 1025. Remove the field from the transaction, and try again.\n    - `telREQUIRES_NETWORK_ID`: a `NetworkID` is required, but is not present. Add the field to the transaction, and try again.\n    - `telWRONG_NETWORK`: a `NetworkID` is specified, but it is for a different network. Submit the transaction to a different server which is connected to the correct network.\n\n### Additions and bug fixes in 1.11\n\n- Added `nftoken_id`, `nftoken_ids` and `offer_id` meta fields into NFT `tx` and `account_tx` responses. (https://github.com/XRPLF/rippled/pull/4447)\n- Added an `account_flags` object to the `account_info` method response. (https://github.com/XRPLF/rippled/pull/4459)\n- Added `NFTokenPages` to the `account_objects` RPC. (https://github.com/XRPLF/rippled/pull/4352)\n- Fixed: `marker` returned from the `account_lines` command would not work on subsequent commands. (https://github.com/XRPLF/rippled/pull/4361)\n\n## XRP Ledger server version 1.10.0\n\n[Version 1.10.0](https://github.com/XRPLF/rippled/releases/tag/1.10.0)\nwas released on Mar 14, 2023.\n\n### Breaking changes in 1.10\n\n- If the `XRPFees` feature is enabled, the `fee_ref` field will be\n  removed from the [ledger subscription stream](https://xrpl.org/subscribe.html#ledger-stream), because it will no longer\n  have any meaning.\n\n# Unit tests for API changes\n\nThe following information is useful to developers contributing to this project:\n\nThe purpose of unit tests is to catch bugs and prevent regressions. In general, it often makes sense to create a test function when there is a breaking change to the API. For APIs that have changed in a new API version, the tests should be modified so that both the prior version and the new version are properly tested.\n\nTo take one example: for `account_info` version 1, WebSocket and JSON-RPC behavior should be tested. The latest API version, i.e. API version 2, should be tested over WebSocket, JSON-RPC, and command line.\n"
        },
        {
          "name": "BUILD.md",
          "type": "blob",
          "size": 16.796875,
          "content": "| :warning: **WARNING** :warning:\n|---|\n| These instructions assume you have a C++ development environment ready with Git, Python, Conan, CMake, and a C++ compiler. For help setting one up on Linux, macOS, or Windows, [see this guide](./docs/build/environment.md). |\n\n> These instructions also assume a basic familiarity with Conan and CMake.\n> If you are unfamiliar with Conan,\n> you can read our [crash course](./docs/build/conan.md)\n> or the official [Getting Started][3] walkthrough.\n\n## Branches\n\nFor a stable release, choose the `master` branch or one of the [tagged\nreleases](https://github.com/ripple/rippled/releases).\n\n```\ngit checkout master\n```\n\nFor the latest release candidate, choose the `release` branch.\n\n```\ngit checkout release\n```\n\nFor the latest set of untested features, or to contribute, choose the `develop`\nbranch.\n\n```\ngit checkout develop\n```\n\n## Minimum Requirements\n\nSee [System Requirements](https://xrpl.org/system-requirements.html).\n\nBuilding rippled generally requires git, Python, Conan, CMake, and a C++ compiler. Some guidance on setting up such a [C++ development environment can be found here](./docs/build/environment.md).\n\n- [Python 3.7](https://www.python.org/downloads/)\n- [Conan 1.60](https://conan.io/downloads.html)[^1]\n- [CMake 3.16](https://cmake.org/download/)\n\n[^1]: It is possible to build with Conan 2.x,\nbut the instructions are significantly different,\nwhich is why we are not recommending it yet.\nNotably, the `conan profile update` command is removed in 2.x.\nProfiles must be edited by hand.\n\n`rippled` is written in the C++20 dialect and includes the `<concepts>` header.\nThe [minimum compiler versions][2] required are:\n\n| Compiler    | Version |\n|-------------|---------|\n| GCC         | 11      |\n| Clang       | 13      |\n| Apple Clang | 13.1.6  |\n| MSVC        | 19.23   |\n\n### Linux\n\nThe Ubuntu operating system has received the highest level of\nquality assurance, testing, and support.\n\nHere are [sample instructions for setting up a C++ development environment on Linux](./docs/build/environment.md#linux).\n\n### Mac\n\nMany rippled engineers use macOS for development.\n\nHere are [sample instructions for setting up a C++ development environment on macOS](./docs/build/environment.md#macos).\n\n### Windows\n\nWindows is not recommended for production use at this time.\n\n- Additionally, 32-bit Windows development is not supported.\n\n[Boost]: https://www.boost.org/\n\n## Steps\n\n### Set Up Conan\n\nAfter you have a [C++ development environment](./docs/build/environment.md) ready with Git, Python, Conan, CMake, and a C++ compiler, you may need to set up your Conan profile.\n\nThese instructions assume a basic familiarity with Conan and CMake.\n\nIf you are unfamiliar with Conan, then please read [this crash course](./docs/build/conan.md) or the official [Getting Started][3] walkthrough.\n\nYou'll need at least one Conan profile:\n\n   ```\n   conan profile new default --detect\n   ```\n\nUpdate the compiler settings:\n\n   ```\n   conan profile update settings.compiler.cppstd=20 default\n   ```\n\nConfigure Conan (1.x only) to use recipe revisions:\n\n   ```\n   conan config set general.revisions_enabled=1\n   ```\n\n**Linux** developers will commonly have a default Conan [profile][] that compiles\nwith GCC and links with libstdc++.\nIf you are linking with libstdc++ (see profile setting `compiler.libcxx`),\nthen you will need to choose the `libstdc++11` ABI:\n\n   ```\n   conan profile update settings.compiler.libcxx=libstdc++11 default\n   ```\n\n\nEnsure inter-operability between `boost::string_view` and `std::string_view` types:\n\n```\nconan profile update 'conf.tools.build:cxxflags+=[\"-DBOOST_BEAST_USE_STD_STRING_VIEW\"]' default\nconan profile update 'env.CXXFLAGS=\"-DBOOST_BEAST_USE_STD_STRING_VIEW\"' default\n```\n\nIf you have other flags in the `conf.tools.build` or `env.CXXFLAGS` sections, make sure to retain the existing flags and append the new ones. You can check them with:\n```\nconan profile show default\n```\n\n\n**Windows** developers may need to use the x64 native build tools.\nAn easy way to do that is to run the shortcut \"x64 Native Tools Command\nPrompt\" for the version of Visual Studio that you have installed.\n\n   Windows developers must also build `rippled` and its dependencies for the x64\n   architecture:\n\n   ```\n   conan profile update settings.arch=x86_64 default\n   ```\n\n### Multiple compilers\n\nWhen `/usr/bin/g++` exists on a platform, it is the default cpp compiler. This\ndefault works for some users.\n\nHowever, if this compiler cannot build rippled or its dependencies, then you can\ninstall another compiler and set Conan and CMake to use it.\nUpdate the `conf.tools.build:compiler_executables` setting in order to set the correct variables (`CMAKE_<LANG>_COMPILER`) in the\ngenerated CMake toolchain file.\nFor example, on Ubuntu 20, you may have gcc at `/usr/bin/gcc` and g++ at `/usr/bin/g++`; if that is the case, you can select those compilers with:\n```\nconan profile update 'conf.tools.build:compiler_executables={\"c\": \"/usr/bin/gcc\", \"cpp\": \"/usr/bin/g++\"}' default\n```\n\nReplace `/usr/bin/gcc` and `/usr/bin/g++` with paths to the desired compilers.\n\nIt should choose the compiler for dependencies as well,\nbut not all of them have a Conan recipe that respects this setting (yet).\nFor the rest, you can set these environment variables.\nReplace `<path>` with paths to the desired compilers:\n\n- `conan profile update env.CC=<path> default`\n- `conan profile update env.CXX=<path> default`\n\nExport our [Conan recipe for Snappy](./external/snappy).\nIt does not explicitly link the C++ standard library,\nwhich allows you to statically link it with GCC, if you want.\n\n   ```\n   # Conan 1.x\n   conan export external/snappy snappy/1.1.10@\n   # Conan 2.x\n   conan export --version 1.1.10 external/snappy\n   ```\n\nExport our [Conan recipe for RocksDB](./external/rocksdb).\nIt does not override paths to dependencies when building with Visual Studio.\n\n   ```\n   # Conan 1.x\n   conan export external/rocksdb rocksdb/6.29.5@\n   # Conan 2.x\n   conan export --version 6.29.5 external/rocksdb\n   ```\n\nExport our [Conan recipe for SOCI](./external/soci).\nIt patches their CMake to correctly import its dependencies.\n\n   ```\n   # Conan 1.x\n   conan export external/soci soci/4.0.3@\n   # Conan 2.x\n   conan export --version 4.0.3 external/soci\n   ```\n\nExport our [Conan recipe for NuDB](./external/nudb).\nIt fixes some source files to add missing `#include`s.\n\n\n   ```\n   # Conan 1.x\n   conan export external/nudb nudb/2.0.8@\n   # Conan 2.x\n   conan export --version 2.0.8 external/nudb\n   ```\n\n### Build and Test\n\n1. Create a build directory and move into it.\n\n   ```\n   mkdir .build\n   cd .build\n   ```\n\n   You can use any directory name. Conan treats your working directory as an\n   install folder and generates files with implementation details.\n   You don't need to worry about these files, but make sure to change\n   your working directory to your build directory before calling Conan.\n\n   **Note:** You can specify a directory for the installation files by adding\n   the `install-folder` or `-if` option to every `conan install` command\n   in the next step.\n\n2. Generate CMake files for every configuration you want to build. \n\n    ```\n    conan install .. --output-folder . --build missing --settings build_type=Release\n    conan install .. --output-folder . --build missing --settings build_type=Debug\n    ```\n\n    For a single-configuration generator, e.g. `Unix Makefiles` or `Ninja`,\n    you only need to run this command once.\n    For a multi-configuration generator, e.g. `Visual Studio`, you may want to\n    run it more than once.\n\n    Each of these commands should also have a different `build_type` setting.\n    A second command with the same `build_type` setting will overwrite the files\n    generated by the first. You can pass the build type on the command line with\n    `--settings build_type=$BUILD_TYPE` or in the profile itself,\n    under the section `[settings]` with the key `build_type`.\n\n    If you are using a Microsoft Visual C++ compiler,\n    then you will need to ensure consistency between the `build_type` setting\n    and the `compiler.runtime` setting.\n\n    When `build_type` is `Release`, `compiler.runtime` should be `MT`.\n\n    When `build_type` is `Debug`, `compiler.runtime` should be `MTd`.\n\n    ```\n    conan install .. --output-folder . --build missing --settings build_type=Release --settings compiler.runtime=MT\n    conan install .. --output-folder . --build missing --settings build_type=Debug --settings compiler.runtime=MTd\n    ```\n\n3. Configure CMake and pass the toolchain file generated by Conan, located at\n   `$OUTPUT_FOLDER/build/generators/conan_toolchain.cmake`.\n\n    Single-config generators:\n\n    ```\n    cmake -DCMAKE_TOOLCHAIN_FILE:FILEPATH=build/generators/conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release -Dxrpld=ON -Dtests=ON ..\n    ```\n\n    Pass the CMake variable [`CMAKE_BUILD_TYPE`][build_type]\n    and make sure it matches the `build_type` setting you chose in the previous\n    step.\n\n    Multi-config generators:\n\n    ```\n    cmake -DCMAKE_TOOLCHAIN_FILE:FILEPATH=build/generators/conan_toolchain.cmake -Dxrpld=ON -Dtests=ON  ..\n    ```\n\n    **Note:** You can pass build options for `rippled` in this step.\n\n4. Build `rippled`.\n\n   For a single-configuration generator, it will build whatever configuration\n   you passed for `CMAKE_BUILD_TYPE`. For a multi-configuration generator,\n   you must pass the option `--config` to select the build configuration. \n\n   Single-config generators:\n\n   ```\n   cmake --build .\n   ```\n\n   Multi-config generators:\n\n   ```\n   cmake --build . --config Release\n   cmake --build . --config Debug\n   ```\n\n5. Test rippled.\n\n   Single-config generators:\n\n   ```\n   ./rippled --unittest\n   ```\n\n   Multi-config generators:\n\n   ```\n   ./Release/rippled --unittest\n   ./Debug/rippled --unittest\n   ```\n\n   The location of `rippled` in your build directory depends on your CMake\n   generator. Pass `--help` to see the rest of the command line options.\n\n\n## Coverage report\n\nThe coverage report is intended for developers using compilers GCC\nor Clang (including Apple Clang). It is generated by the build target `coverage`,\nwhich is only enabled when the `coverage` option is set, e.g. with\n`--options coverage=True` in `conan` or `-Dcoverage=ON` variable in `cmake`\n\nPrerequisites for the coverage report:\n\n- [gcovr tool][gcovr] (can be installed e.g. with [pip][python-pip])\n- `gcov` for GCC (installed with the compiler by default) or\n- `llvm-cov` for Clang (installed with the compiler by default)\n- `Debug` build type\n\nA coverage report is created when the following steps are completed, in order:\n\n1. `rippled` binary built with instrumentation data, enabled by the `coverage`\n   option mentioned above\n2. completed run of unit tests, which populates coverage capture data\n3. completed run of the `gcovr` tool (which internally invokes either `gcov` or `llvm-cov`)\n   to assemble both instrumentation data and the coverage capture data into a coverage report\n\nThe above steps are automated into a single target `coverage`. The instrumented\n`rippled` binary can also be used for regular development or testing work, at\nthe cost of extra disk space utilization and a small performance hit\n(to store coverage capture). In case of a spurious failure of unit tests, it is\npossible to re-run the `coverage` target without rebuilding the `rippled` binary\n(since it is simply a dependency of the coverage report target). It is also possible\nto select only specific tests for the purpose of the coverage report, by setting\nthe `coverage_test` variable in `cmake`\n\nThe default coverage report format is `html-details`, but the user\ncan override it to any of the formats listed in `Builds/CMake/CodeCoverage.cmake`\nby setting the `coverage_format` variable in `cmake`. It is also possible\nto generate more than one format at a time by setting the `coverage_extra_args`\nvariable in `cmake`. The specific command line used to run the `gcovr` tool will be\ndisplayed if the `CODE_COVERAGE_VERBOSE` variable is set.\n\nBy default, the code coverage tool runs parallel unit tests with `--unittest-jobs`\n set to the number of available CPU cores. This may cause spurious test\nerrors on Apple. Developers can override the number of unit test jobs with\nthe `coverage_test_parallelism` variable in `cmake`.\n\nExample use with some cmake variables set:\n\n```\ncd .build\nconan install .. --output-folder . --build missing --settings build_type=Debug\ncmake -DCMAKE_BUILD_TYPE=Debug -Dcoverage=ON -Dxrpld=ON -Dtests=ON -Dcoverage_test_parallelism=2 -Dcoverage_format=html-details -Dcoverage_extra_args=\"--json coverage.json\" -DCMAKE_TOOLCHAIN_FILE:FILEPATH=build/generators/conan_toolchain.cmake ..\ncmake --build . --target coverage\n```\n\nAfter the `coverage` target is completed, the generated coverage report will be\nstored inside the build directory, as either of:\n\n- file named `coverage.`_extension_ , with a suitable extension for the report format, or\n- directory named `coverage`, with the `index.html` and other files inside, for the `html-details` or `html-nested` report formats.\n\n\n## Options\n\n| Option | Default Value | Description |\n| --- | ---| ---|\n| `assert` | OFF | Enable assertions.\n| `coverage` | OFF | Prepare the coverage report. |\n| `san` | N/A | Enable a sanitizer with Clang. Choices are `thread` and `address`. |\n| `tests` | OFF | Build tests. |\n| `unity` | ON | Configure a unity build. |\n| `xrpld` | OFF | Build the xrpld (`rippled`) application, and not just the libxrpl library. |\n\n[Unity builds][5] may be faster for the first build\n(at the cost of much more memory) since they concatenate sources into fewer\ntranslation units. Non-unity builds may be faster for incremental builds,\nand can be helpful for detecting `#include` omissions.\n\n\n## Troubleshooting\n\n\n### Conan\n\nAfter any updates or changes to dependencies, you may need to do the following:\n\n1. Remove your build directory.\n2. Remove the Conan cache:\n   ```\n   rm -rf ~/.conan/data\n   ```\n4. Re-run [conan install](#build-and-test).\n\n\n### no std::result_of\n\nIf your compiler version is recent enough to have removed `std::result_of` as\npart of C++20, e.g. Apple Clang 15.0, then you might need to add a preprocessor\ndefinition to your build.\n\n```\nconan profile update 'options.boost:extra_b2_flags=\"define=BOOST_ASIO_HAS_STD_INVOKE_RESULT\"' default\nconan profile update 'env.CFLAGS=\"-DBOOST_ASIO_HAS_STD_INVOKE_RESULT\"' default\nconan profile update 'env.CXXFLAGS=\"-DBOOST_ASIO_HAS_STD_INVOKE_RESULT\"' default\nconan profile update 'conf.tools.build:cflags+=[\"-DBOOST_ASIO_HAS_STD_INVOKE_RESULT\"]' default\nconan profile update 'conf.tools.build:cxxflags+=[\"-DBOOST_ASIO_HAS_STD_INVOKE_RESULT\"]' default\n```\n\n\n### call to 'async_teardown' is ambiguous\n\nIf you are compiling with an early version of Clang 16, then you might hit\na [regression][6] when compiling C++20 that manifests as an [error in a Boost\nheader][7]. You can workaround it by adding this preprocessor definition:\n\n```\nconan profile update 'env.CXXFLAGS=\"-DBOOST_ASIO_DISABLE_CONCEPTS\"' default\nconan profile update 'conf.tools.build:cxxflags+=[\"-DBOOST_ASIO_DISABLE_CONCEPTS\"]' default\n```\n\n\n### recompile with -fPIC\n\nIf you get a linker error suggesting that you recompile Boost with\nposition-independent code, such as:\n\n```\n/usr/bin/ld.gold: error: /home/username/.conan/data/boost/1.77.0/_/_/package/.../lib/libboost_container.a(alloc_lib.o):\n  requires unsupported dynamic reloc 11; recompile with -fPIC\n```\n\nConan most likely downloaded a bad binary distribution of the dependency.\nThis seems to be a [bug][1] in Conan just for Boost 1.77.0 compiled with GCC\nfor Linux. The solution is to build the dependency locally by passing\n`--build boost` when calling `conan install`.\n\n```\nconan install --build boost ...\n```\n\n\n## Add a Dependency\n\nIf you want to experiment with a new package, follow these steps:\n\n1. Search for the package on [Conan Center](https://conan.io/center/).\n2. Modify [`conanfile.py`](./conanfile.py):\n    - Add a version of the package to the `requires` property.\n    - Change any default options for the package by adding them to the\n    `default_options` property (with syntax `'$package:$option': $value`).\n3. Modify [`CMakeLists.txt`](./CMakeLists.txt):\n    - Add a call to `find_package($package REQUIRED)`.\n    - Link a library from the package to the target `ripple_libs`\n    (search for the existing call to `target_link_libraries(ripple_libs INTERFACE ...)`).\n4. Start coding! Don't forget to include whatever headers you need from the package.\n\n\n[1]: https://github.com/conan-io/conan-center-index/issues/13168\n[2]: https://en.cppreference.com/w/cpp/compiler_support/20\n[3]: https://docs.conan.io/en/latest/getting_started.html\n[5]: https://en.wikipedia.org/wiki/Unity_build\n[6]: https://github.com/boostorg/beast/issues/2648\n[7]: https://github.com/boostorg/beast/issues/2661\n[gcovr]: https://gcovr.com/en/stable/getting-started.html\n[python-pip]: https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments/\n[build_type]: https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html\n[profile]: https://docs.conan.io/en/latest/reference/profiles.html\n"
        },
        {
          "name": "Builds",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 3.48828125,
          "content": "cmake_minimum_required(VERSION 3.16)\n\nif(POLICY CMP0074)\n  cmake_policy(SET CMP0074 NEW)\nendif()\nif(POLICY CMP0077)\n  cmake_policy(SET CMP0077 NEW)\nendif()\n\n# Fix \"unrecognized escape\" issues when passing CMAKE_MODULE_PATH on Windows.\nfile(TO_CMAKE_PATH \"${CMAKE_MODULE_PATH}\" CMAKE_MODULE_PATH)\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\n\nproject(xrpl)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\n# make GIT_COMMIT_HASH define available to all sources\nfind_package(Git)\nif(Git_FOUND)\n    execute_process(COMMAND ${GIT_EXECUTABLE} --git-dir=${CMAKE_CURRENT_SOURCE_DIR}/.git describe --always --abbrev=40\n        OUTPUT_STRIP_TRAILING_WHITESPACE OUTPUT_VARIABLE gch)\n    if(gch)\n        set(GIT_COMMIT_HASH \"${gch}\")\n        message(STATUS gch: ${GIT_COMMIT_HASH})\n        add_definitions(-DGIT_COMMIT_HASH=\"${GIT_COMMIT_HASH}\")\n    endif()\nendif() #git\n\nif(thread_safety_analysis)\n  add_compile_options(-Wthread-safety -D_LIBCPP_ENABLE_THREAD_SAFETY_ANNOTATIONS -DRIPPLE_ENABLE_THREAD_SAFETY_ANNOTATIONS)\n  add_compile_options(\"-stdlib=libc++\")\n  add_link_options(\"-stdlib=libc++\")\nendif()\n\ninclude (CheckCXXCompilerFlag)\ninclude (FetchContent)\ninclude (ExternalProject)\ninclude (CMakeFuncs) # must come *after* ExternalProject b/c it overrides one function in EP\nif (target)\n  message (FATAL_ERROR \"The target option has been removed - use native cmake options to control build\")\nendif ()\n\ninclude(RippledSanity)\ninclude(RippledVersion)\ninclude(RippledSettings)\n# this check has to remain in the top-level cmake\n# because of the early return statement\nif (packages_only)\n  if (NOT TARGET rpm)\n    message (FATAL_ERROR \"packages_only requested, but targets were not created - is docker installed?\")\n  endif()\n  return ()\nendif ()\ninclude(RippledCompiler)\ninclude(RippledInterface)\n\noption(only_docs \"Include only the docs target?\" FALSE)\ninclude(RippledDocs)\nif(only_docs)\n  return()\nendif()\n\n###\n\ninclude(deps/Boost)\nfind_package(OpenSSL 1.1.1 REQUIRED)\nset_target_properties(OpenSSL::SSL PROPERTIES\n  INTERFACE_COMPILE_DEFINITIONS OPENSSL_NO_SSL2\n)\nset(SECP256K1_INSTALL TRUE)\nadd_subdirectory(external/secp256k1)\nadd_library(secp256k1::secp256k1 ALIAS secp256k1)\nadd_subdirectory(external/ed25519-donna)\nadd_subdirectory(external/antithesis-sdk)\nfind_package(gRPC REQUIRED)\nfind_package(lz4 REQUIRED)\n# Target names with :: are not allowed in a generator expression.\n# We need to pull the include directories and imported location properties\n# from separate targets.\nfind_package(LibArchive REQUIRED)\nfind_package(SOCI REQUIRED)\nfind_package(SQLite3 REQUIRED)\n\noption(rocksdb \"Enable RocksDB\" ON)\nif(rocksdb)\n  find_package(RocksDB REQUIRED)\n  set_target_properties(RocksDB::rocksdb PROPERTIES\n    INTERFACE_COMPILE_DEFINITIONS RIPPLE_ROCKSDB_AVAILABLE=1\n  )\n  target_link_libraries(ripple_libs INTERFACE RocksDB::rocksdb)\nendif()\n\nfind_package(nudb REQUIRED)\nfind_package(date REQUIRED)\nfind_package(xxHash REQUIRED)\n\ntarget_link_libraries(ripple_libs INTERFACE\n  ed25519::ed25519\n  lz4::lz4\n  OpenSSL::Crypto\n  OpenSSL::SSL\n  secp256k1::secp256k1\n  soci::soci\n  SQLite::SQLite3\n)\n\n# Work around changes to Conan recipe for now.\nif(TARGET nudb::core)\n  set(nudb nudb::core)\nelseif(TARGET NuDB::nudb)\n  set(nudb NuDB::nudb)\nelse()\n  message(FATAL_ERROR \"unknown nudb target\")\nendif()\ntarget_link_libraries(ripple_libs INTERFACE ${nudb})\n\nif(coverage)\n  include(RippledCov)\nendif()\n\nset(PROJECT_EXPORT_SET RippleExports)\ninclude(RippledCore)\ninclude(RippledInstall)\ninclude(RippledValidatorKeys)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 22.3974609375,
          "content": "The XRP Ledger has many and diverse stakeholders, and everyone deserves\na chance to contribute meaningful changes to the code that runs the\nXRPL.\n\n# Contributing\n\nWe assume you are familiar with the general practice of [making\ncontributions on GitHub][1]. This file includes only special\ninstructions specific to this project.\n\n\n## Before you start\n\nIn general, contributions should be developed in your personal\n[fork](https://github.com/XRPLF/rippled/fork).\n\nThe following branches exist in the main project repository:\n\n- `develop`: The latest set of unreleased features, and the most common\n    starting point for contributions.\n- `release`: The latest beta release or release candidate.\n- `master`: The latest stable release.\n- `gh-pages`: The documentation for this project, built by Doxygen.\n\nThe tip of each branch must be signed. In order for GitHub to sign a\nsquashed commit that it builds from your pull request, GitHub must know\nyour verifying key. Please set up [signature verification][signing].\n\n[rippled]: https://github.com/XRPLF/rippled\n[signing]:\n    https://docs.github.com/en/authentication/managing-commit-signature-verification/about-commit-signature-verification\n\n\n## Major contributions\n\nIf your contribution is a major feature or breaking change, then you\nmust first write an XRP Ledger Standard (XLS) describing it. Go to\n[XRPL-Standards](https://github.com/XRPLF/XRPL-Standards/discussions),\nchoose the next available standard number, and open a discussion with an\nappropriate title to propose your draft standard.\n\nWhen you submit a pull request, please link the corresponding XLS in the\ndescription. An XLS still in draft status is considered a\nwork-in-progress and open for discussion. Please allow time for\nquestions, suggestions, and changes to the XLS draft. It is the\nresponsibility of the XLS author to update the draft to match the final\nimplementation when its corresponding pull request is merged, unless the\nauthor delegates that responsibility to others.\n\n\n## Before making a pull request\n\nChanges that alter transaction processing must be guarded by an\n[Amendment](https://xrpl.org/amendments.html).\nAll other changes that maintain the existing behavior do not need an\nAmendment.\n\nEnsure that your code compiles according to the build instructions in\n[`BUILD.md`](./BUILD.md).\nIf you create new source files, they must go under `src/ripple`.\nYou will need to add them to one of the\n[source lists](./Builds/CMake/RippledCore.cmake) in CMake.\n\nPlease write tests for your code.\nIf you create new test source files, they must go under `src/test`.\nYou will need to add them to one of the\n[source lists](./Builds/CMake/RippledCore.cmake) in CMake.\nIf your test can be run offline, in under 60 seconds, then it can be an\nautomatic test run by `rippled --unittest`.\nOtherwise, it must be a manual test.\n\nThe source must be formatted according to the style guide below.\n\nHeader includes must be [levelized](./Builds/levelization).\n\nChanges should be usually squashed down into a single commit.\nSome larger or more complicated change sets make more sense,\nand are easier to review if organized into multiple logical commits.\nEither way, all commits should fit the following criteria:\n* Changes should be presented in a single commit or a logical\n  sequence of commits.\n  Specifically, chronological commits that simply\n  reflect the history of how the author implemented\n  the change, \"warts and all\", are not useful to\n  reviewers.\n* Every commit should have a [good message](#good-commit-messages).\n  to explain a specific aspects of the change.\n* Every commit should be signed.\n* Every commit should be well-formed (builds successfully,\n  unit tests passing), as this helps to resolve merge\n  conflicts, and makes it easier to use `git bisect`\n  to find bugs.\n\n### Good commit messages\n\nRefer to\n[\"How to Write a Git Commit Message\"](https://cbea.ms/git-commit/)\nfor general rules on writing a good commit message.\n\nIn addition to those guidelines, please add one of the following\nprefixes to the subject line if appropriate.\n* `fix:` - The primary purpose is to fix an existing bug.\n* `perf:` - The primary purpose is performance improvements.\n* `refactor:` - The changes refactor code without affecting\n  functionality.\n* `test:` - The changes _only_ affect unit tests.\n* `docs:` - The changes _only_ affect documentation. This can\n  include code comments in addition to `.md` files like this one.\n* `build:` - The changes _only_ affect the build process,\n  including CMake and/or Conan settings.\n* `chore:` - Other tasks that don't affect the binary, but don't fit\n  any of the other cases. e.g. formatting, git settings, updating\n  Github Actions jobs.\n\nWhenever possible, when updating commits after the PR is open, please\nadd the PR number to the end of the subject line. e.g. `test: Add\nunit tests for Feature X (#1234)`.\n\n## Pull requests\n\nIn general, pull requests use `develop` as the base branch.\n(Hotfixes are an exception.)\n\nIf your changes are not quite ready, but you want to make it easily available\nfor preliminary examination or review, you can create a \"Draft\" pull request.\nWhile a pull request is marked as a \"Draft\", you can rebase or reorganize the\ncommits in the pull request as desired.\n\nGithub pull requests are created as \"Ready\" by default, or you can mark\na \"Draft\" pull request as \"Ready\".\nOnce a pull request is marked as \"Ready\",\nany changes must be added as new commits. Do not\nforce-push to a branch in a pull request under review.\n(This includes rebasing your branch onto the updated base branch.\nUse a merge operation, instead or hit the \"Update branch\" button\nat the bottom of the Github PR page.)\nThis preserves the ability for reviewers to filter changes since their last\nreview.\n\nA pull request must obtain **approvals from at least two reviewers**\nbefore it can be considered for merge by a Maintainer.\nMaintainers retain discretion to require more approvals if they feel the\ncredibility of the existing approvals is insufficient.\n\nPull requests must be merged by [squash-and-merge][2]\nto preserve a linear history for the `develop` branch.\n\n### When and how to merge pull requests\n\n#### \"Passed\"\n\nA pull request should only have the \"Passed\" label added when it\nmeets a few criteria:\n\n1. It must have two approving reviews [as described\n   above](#pull-requests). (Exception: PRs that are deemed \"trivial\"\n   only need one approval.)\n2. All CI checks must be complete and passed. (One-off failures may\n   be acceptable if they are related to a known issue.)\n3. The PR must have a [good commit message](#good-commit-messages).\n   * If the PR started with a good commit message, and it doesn't\n     need to be updated, the author can indicate that in a comment.\n   * Any contributor, preferably the author, can leave a comment\n     suggesting a commit message.\n   * If the author squashes and rebases the code in preparation for\n     merge, they should also ensure the commit message(s) are updated\n     as well.\n4. The PR branch must be up to date with the base branch (usually\n   `develop`). This is usually accomplised by merging the base branch\n   into the feature branch, but if the other criteria are met, the\n   changes can be squashed and rebased on top of the base branch.\n5. Finally, and most importantly, the author of the PR must\n   positively indicate that the PR is ready to merge. That can be\n   accomplished by adding the \"Passed\" label if their role allows,\n   or by leaving a comment to the effect that the PR is ready to\n   merge.\n\nOnce the \"Passed\" label is added, a maintainer may merge the PR at\nany time, so don't use it lightly.\n\n#### Instructions for maintainers\n\nThe maintainer should double-check that the PR has met all the\nnecessary criteria, and can request additional information from the\nowner, or additional reviews, and can always feel free to remove the\n\"Passed\" label if appropriate. The maintainer has final say on\nwhether a PR gets merged, and are encouraged to communicate and\nissues or concerns to other maintainers.\n\n##### Most pull requests: \"Squash and merge\"\n\nMost pull requests don't need special handling, and can simply be\nmerged using the \"Squash and merge\" button on the Github UI. Update\nthe suggested commit message if necessary.\n\n##### Slightly more complicated pull requests\n\nSome pull requests need to be pushed to `develop` as more than one\ncommit. There are multiple ways to accomplish this. If the author\ndescribes a process, and it is reasonable, follow it. Otherwise, do\na fast forward only merge (`--ff-only`) on the command line and push.\n\nEither way, check that:\n* The commits are based on the current tip of `develop`.\n* The commits are clean: No merge commits (except when reverse\n  merging), no \"[FOLD]\" or \"fixup!\" messages.\n* All commits are signed. If the commits are not signed by the author, use\n  `git commit --amend -S` to sign them yourself.\n* At least one (but preferably all) of the commits has the PR number\n  in the commit message.\n\n**Never use the \"Create a merge commit\" or \"Rebase and merge\"\n functions!**\n\n##### Releases, release candidates, and betas\n\nAll releases, including release candidates and betas, are handled\ndifferently from typical PRs. Most importantly, never use\nthe Github UI to merge a release.\n\n1. There are two possible conditions that the `develop` branch will\n   be in when preparing a release.\n   1. Ready or almost ready to go: There may be one or two PRs that\n      need to be merged, but otherwise, the only change needed is to\n      update the version number in `BuildInfo.cpp`. In this case,\n      merge those PRs as appropriate, updating the second one, and\n      waiting for CI to finish in between. Then update\n      `BuildInfo.cpp`.\n   2. Several pending PRs: In this case, do not use the Github UI,\n      because the delays waiting for CI in between each merge will be\n      unnecessarily onerous. Instead, create a working branch (e.g.\n      `develop-next`) based off of `develop`. Squash the changes\n      from each PR onto the branch, one commit each (unless\n      more are needed), being sure to sign each commit and update\n      the commit message to include the PR number. You may be able\n      to use a fast-forward merge for the first PR. The workflow may\n      look something like:\n```\ngit fetch upstream\ngit checkout upstream/develop\ngit checkout -b develop-next\n# Use -S on the ff-only merge if prbranch1 isn't signed.\n# Or do another branch first.\ngit merge --ff-only user1/prbranch1\ngit merge --squash user2/prbranch2\ngit commit -S\ngit merge --squash user3/prbranch3\ngit commit -S\n[...]\ngit push --set-upstream origin develop-next\n</pre>\n```\n2. Create the Pull Request with `release` as the base branch. If any\n   of the included PRs are still open,\n   [use closing keywords](https://docs.github.com/articles/closing-issues-using-keywords)\n   in the description to ensure they are closed when the code is\n   released. e.g. \"Closes #1234\"\n3. Instead of the default template, reuse and update the message from\n   the previous release. Include the following verbiage somewhere in\n   the description:\n```\nThe base branch is release. All releases (including betas) go in\nrelease. This PR will be merged with --ff-only (not squashed or\nrebased, and not using the GitHub UI) to both release and develop.\n```\n4. Sign-offs for the three platforms usually occur offline, but at\n   least one approval will be needed on the PR.\n5. Once everything is ready to go, open a terminal, and do the\n   fast-forward merges manually. Do not push any branches until you\n   verify that all of them update correctly.\n```\ngit fetch upstream\ngit checkout -b upstream--develop -t upstream/develop || git checkout upstream--develop\ngit reset --hard upstream/develop\n# develop-next must be signed already!\ngit merge --ff-only origin/develop-next\ngit checkout -b upstream--release -t upstream/release || git checkout upstream--release\ngit reset --hard upstream/release\ngit merge --ff-only origin/develop-next\n# Only do these 3 steps if pushing a release. No betas or RCs\ngit checkout -b upstream--master -t upstream/master || git checkout upstream--master\ngit reset --hard upstream/master\ngit merge --ff-only origin/develop-next\n# Check that all of the branches are updated\ngit log -1 --oneline\n# The output should look like:\n# 02ec8b7962 (HEAD -> upstream--master, origin/develop-next, upstream--release, upstream--develop, develop-next) Set version to 2.2.0-rc1\n# Note that all of the upstream--develop/release/master are on this commit.\n# (Master will be missing for betas, etc.)\n# Just to be safe, do a dry run first:\ngit push --dry-run upstream-push HEAD:develop\ngit push --dry-run upstream-push HEAD:release\n# git push --dry-run upstream-push HEAD:master\n# Now push\ngit push upstream-push HEAD:develop\ngit push upstream-push HEAD:release\n# git push upstream-push HEAD:master\n# Don't forget to tag the release, too.\ngit tag <version number>\ngit push upstream-push <version number>\n```\n6. Finally\n[create a new release on Github](https://github.com/XRPLF/rippled/releases).\n\n\n# Style guide\n\nThis is a non-exhaustive list of recommended style guidelines. These are\nnot always strictly enforced and serve as a way to keep the codebase\ncoherent rather than a set of _thou shalt not_ commandments.\n\n\n## Formatting\n\nAll code must conform to `clang-format` version 10,\naccording to the settings in [`.clang-format`](./.clang-format),\nunless the result would be unreasonably difficult to read or maintain.\nTo demarcate lines that should be left as-is, surround them with comments like\nthis:\n\n```\n// clang-format off\n...\n// clang-format on\n```\n\nYou can format individual files in place by running `clang-format -i <file>...`\nfrom any directory within this project.\n\nThere is a Continuous Integration job that runs clang-format on pull requests. If the code doesn't comply, a patch file that corrects auto-fixable formatting issues is generated.\n\nTo download the patch file:\n\n1. Next to `clang-format / check (pull_request) Failing after #s` -> click **Details** to open the details page.\n2. Left menu -> click **Summary**\n3. Scroll down to near the bottom-right under `Artifacts` -> click **clang-format.patch**\n4. Download the zip file and extract it to your local git repository. Run `git apply [patch-file-name]`.\n5. Commit and push.\n\nYou can install a pre-commit hook to automatically run `clang-format` before every commit:\n```\npip3 install pre-commit\npre-commit install\n```\n\n## Contracts and instrumentation\n\nWe are using [Antithesis](https://antithesis.com/) for continuous fuzzing,\nand keep a copy of [Antithesis C++ SDK](https://github.com/antithesishq/antithesis-sdk-cpp/)\nin `external/antithesis-sdk`. One of the aims of fuzzing is to identify bugs\nby finding external conditions which cause contracts violations inside `rippled`.\nThe contracts are expressed as `XRPL_ASSERT` or `UNREACHABLE` (defined in\n`include/xrpl/beast/utility/instrumentation.h`), which are effectively (outside\nof Antithesis) wrappers for `assert(...)` with added name. The purpose of name\nis to provide contracts with stable identity which does not rely on line numbers.\n\nWhen `rippled` is built with the Antithesis instrumentation enabled\n(using `voidstar` CMake option) and ran on the Antithesis platform, the\ncontracts become\n[test properties](https://antithesis.com/docs/using_antithesis/properties.html);\notherwise they are just like a regular `assert`.\nTo learn more about Antithesis, see\n[How Antithesis Works](https://antithesis.com/docs/introduction/how_antithesis_works.html)\nand [C++ SDK](https://antithesis.com/docs/using_antithesis/sdk/cpp/overview.html#)\n\nWe continue to use the old style `assert` or `assert(false)` in certain\nlocations, where the reporting of contract violations on the Antithesis\nplatform is either not possible or not useful.\n\nFor this reason:\n* The locations where `assert` or `assert(false)` contracts should continue to be used:\n  * `constexpr` functions\n  * unit tests i.e. files under `src/test`\n  * unit tests-related modules (files under `beast/test` and `beast/unit_test`)\n* Outside of the listed locations, do not use `assert`; use `XRPL_ASSERT` instead,\n  giving it unique name, with the short description of the contract.\n* Outside of the listed locations, do not use `assert(false)`; use\n  `UNREACHABLE` instead, giving it unique name, with the description of the\n  condition being violated\n* The contract name should start with a full name (including scope) of the\n  function, optionally a named lambda, followed by a colon ` : ` and a brief\n  (typically at most five words) description. `UNREACHABLE` contracts\n  can use slightly longer descriptions. If there are multiple overloads of the\n  function, use common sense to balance both brevity and unambiguity of the\n  function name. NOTE: the purpose of name is to provide stable means of\n  unique identification of every contract; for this reason try to avoid elements\n  which can change in some obvious refactors or when reinforcing the condition.\n* Contract description typically (except for `UNREACHABLE`) should describe the\n  _expected_ condition, as in \"I assert that _expected_ is true\".\n* Contract description for `UNREACHABLE` should describe the _unexpected_\n  situation which caused the line to have been reached.\n* Example good name for an\n  `UNREACHABLE` macro `\"Json::operator==(Value, Value) : invalid type\"`; example\n  good name for an `XRPL_ASSERT` macro `\"Json::Value::asCString : valid type\"`.\n* Example **bad** name\n  `\"RFC1751::insert(char* s, int x, int start, int length) : length is greater than or equal zero\"`\n  (missing namespace, unnecessary full function signature, description too verbose).\n  Good name: `\"ripple::RFC1751::insert : minimum length\"`.\n* In **few** well-justified cases a non-standard name can be used, in which case a\n  comment should be placed to explain the rationale (example in `contract.cpp`)\n* Do **not** rename a contract without a good reason (e.g. the name no longer\n  reflects the location or the condition being checked)\n* Do not use `std::unreachable`\n* Do not put contracts where they can be violated by an external condition\n  (e.g. timing, data payload before mandatory validation etc.) as this creates\n  bogus bug reports (and causes crashes of Debug builds)\n\n## Unit Tests\nTo execute all unit tests:\n\n```rippled --unittest --unittest-jobs=<number of cores>```\n\n(Note: Using multiple cores on a Mac M1 can cause spurious test failures. The \ncause is still under investigation. If you observe this problem, try specifying fewer jobs.)\n\nTo run a specific set of test suites:\n\n```\nrippled --unittest TestSuiteName\n```\nNote: In this example, all tests with prefix `TestSuiteName` will be run, so if\n`TestSuiteName1` and `TestSuiteName2` both exist, then both tests will run. \nAlternatively, if the unit test name finds an exact match, it will stop \ndoing partial matches, i.e. if a unit test with a title of `TestSuiteName` \nexists, then no other unit test will be executed, apart from `TestSuiteName`.\n\n## Avoid\n\n1. Proliferation of nearly identical code.\n2. Proliferation of new files and classes.\n3. Complex inheritance and complex OOP patterns.\n4. Unmanaged memory allocation and raw pointers.\n5. Macros and non-trivial templates (unless they add significant value).\n6. Lambda patterns (unless these add significant value).\n7. CPU or architecture-specific code unless there is a good reason to\n   include it, and where it is used, guard it with macros and provide\n   explanatory comments.\n8. Importing new libraries unless there is a very good reason to do so.\n\n\n## Seek to\n\n9. Extend functionality of existing code rather than creating new code.\n10. Prefer readability over terseness where important logic is\n    concerned.\n11. Inline functions that are not used or are not likely to be used\n    elsewhere in the codebase.\n12. Use clear and self-explanatory names for functions, variables,\n    structs and classes.\n13. Use TitleCase for classes, structs and filenames, camelCase for\n    function and variable names, lower case for namespaces and folders.\n14. Provide as many comments as you feel that a competent programmer\n    would need to understand what your code does.\n\n\n# Maintainers\n\nMaintainers are ecosystem participants with elevated access to the repository.\nThey are able to push new code, make decisions on when a release should be\nmade, etc.\n\n\n## Adding and removing\n\nNew maintainers can be proposed by two existing maintainers, subject to a vote\nby a quorum of the existing maintainers.\nA minimum of 50% support and a 50% participation is required.\nIn the event of a tie vote, the addition of the new maintainer will be\nrejected.\n\nExisting maintainers can resign, or be subject to a vote for removal at the\nbehest of two existing maintainers.\nA minimum of 60% agreement and 50% participation are required.\nThe XRP Ledger Foundation will have the ability, for cause, to remove an\nexisting maintainer without a vote.\n\n\n## Current Maintainers\n\nMaintainers are users with admin access to the repo. Maintainers do not typically approve or deny pull requests.\n\n* [intelliot](https://github.com/intelliot) (Ripple)\n* [JoelKatz](https://github.com/JoelKatz) (Ripple)\n* [nixer89](https://github.com/nixer89) (XRP Ledger Foundation)\n* [Silkjaer](https://github.com/Silkjaer) (XRP Ledger Foundation)\n* [WietseWind](https://github.com/WietseWind) (XRPL Labs + XRP Ledger Foundation)\n\n## Current Code Reviewers\n\nCode Reviewers are developers who have the ability to review and approve source code changes.\n\n* [HowardHinnant](https://github.com/HowardHinnant) (Ripple)\n* [scottschurr](https://github.com/scottschurr) (Ripple)\n* [seelabs](https://github.com/seelabs) (Ripple)\n* [Ed Hennis](https://github.com/ximinez) (Ripple)\n* [mvadari](https://github.com/mvadari) (Ripple)\n* [thejohnfreeman](https://github.com/thejohnfreeman) (Ripple)\n* [Bronek](https://github.com/Bronek) (Ripple)\n* [manojsdoshi](https://github.com/manojsdoshi) (Ripple)\n* [godexsoft](https://github.com/godexsoft) (Ripple)\n* [mDuo13](https://github.com/mDuo13) (Ripple)\n* [ckniffen](https://github.com/ckniffen) (Ripple)\n* [arihantkothari](https://github.com/arihantkothari) (Ripple)\n* [pwang200](https://github.com/pwang200) (Ripple)\n* [sophiax851](https://github.com/sophiax851) (Ripple)\n* [shawnxie999](https://github.com/shawnxie999) (Ripple)\n* [gregtatcam](https://github.com/gregtatcam) (Ripple)\n* [mtrippled](https://github.com/mtrippled) (Ripple)\n* [ckeshava](https://github.com/ckeshava) (Ripple)\n* [nbougalis](https://github.com/nbougalis) None\n* [RichardAH](https://github.com/RichardAH) (XRPL Labs + XRP Ledger Foundation)\n* [dangell7](https://github.com/dangell7) (XRPL Labs)\n\n\n[1]: https://docs.github.com/en/get-started/quickstart/contributing-to-projects\n[2]: https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/about-pull-request-merges#squash-and-merge-your-commits\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 0.880859375,
          "content": "ISC License \n\nCopyright (c) 2011, Arthur Britto, David Schwartz, Jed McCaleb, Vinnie Falco, Bob Way, Eric Lombrozo, Nikolaos D. Bougalis, Howard Hinnant.\nCopyright (c) 2012-2020, the XRP Ledger developers.\n\nPermission to use, copy, modify, and distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.181640625,
          "content": "# The XRP Ledger\n\nThe [XRP Ledger](https://xrpl.org/) is a decentralized cryptographic ledger powered by a network of peer-to-peer nodes. The XRP Ledger uses a novel Byzantine Fault Tolerant consensus algorithm to settle and record transactions in a secure distributed database without a central operator.\n\n## XRP\n[XRP](https://xrpl.org/xrp.html) is a public, counterparty-free asset native to the XRP Ledger, and is designed to bridge the many different currencies in use worldwide. XRP is traded on the open-market and is available for anyone to access. The XRP Ledger was created in 2012 with a finite supply of 100 billion units of XRP.\n\n## rippled\nThe server software that powers the XRP Ledger is called `rippled` and is available in this repository under the permissive [ISC open-source license](LICENSE.md). The `rippled` server software is written primarily in C++ and runs on a variety of platforms. The `rippled` server software can run in several modes depending on its [configuration](https://xrpl.org/rippled-server-modes.html).\n\nIf you are interested in running an **API Server** (including a **Full History Server**), take a look at [Clio](https://github.com/XRPLF/clio). (rippled Reporting Mode has been replaced by Clio.)\n\n### Build from Source\n\n* [Read the build instructions in `BUILD.md`](BUILD.md)\n* If you encounter any issues, please [open an issue](https://github.com/XRPLF/rippled/issues)\n\n## Key Features of the XRP Ledger\n\n- **[Censorship-Resistant Transaction Processing][]:** No single party decides which transactions succeed or fail, and no one can \"roll back\" a transaction after it completes. As long as those who choose to participate in the network keep it healthy, they can settle transactions in seconds.\n- **[Fast, Efficient Consensus Algorithm][]:** The XRP Ledger's consensus algorithm settles transactions in 4 to 5 seconds, processing at a throughput of up to 1500 transactions per second. These properties put XRP at least an order of magnitude ahead of other top digital assets.\n- **[Finite XRP Supply][]:** When the XRP Ledger began, 100 billion XRP were created, and no more XRP will ever be created. The available supply of XRP decreases slowly over time as small amounts are destroyed to pay transaction costs.\n- **[Responsible Software Governance][]:** A team of full-time, world-class developers at Ripple maintain and continually improve the XRP Ledger's underlying software with contributions from the open-source community. Ripple acts as a steward for the technology and an advocate for its interests, and builds constructive relationships with governments and financial institutions worldwide.\n- **[Secure, Adaptable Cryptography][]:** The XRP Ledger relies on industry standard digital signature systems like ECDSA (the same scheme used by Bitcoin) but also supports modern, efficient algorithms like Ed25519. The extensible nature of the XRP Ledger's software makes it possible to add and disable algorithms as the state of the art in cryptography advances.\n- **[Modern Features for Smart Contracts][]:** Features like Escrow, Checks, and Payment Channels support cutting-edge financial applications including the [Interledger Protocol](https://interledger.org/). This toolbox of advanced features comes with safety features like a process for amending the network and separate checks against invariant constraints.\n- **[On-Ledger Decentralized Exchange][]:** In addition to all the features that make XRP useful on its own, the XRP Ledger also has a fully-functional accounting system for tracking and trading obligations denominated in any way users want, and an exchange built into the protocol. The XRP Ledger can settle long, cross-currency payment paths and exchanges of multiple currencies in atomic transactions, bridging gaps of trust with XRP.\n\n[Censorship-Resistant Transaction Processing]: https://xrpl.org/xrp-ledger-overview.html#censorship-resistant-transaction-processing\n[Fast, Efficient Consensus Algorithm]: https://xrpl.org/xrp-ledger-overview.html#fast-efficient-consensus-algorithm\n[Finite XRP Supply]: https://xrpl.org/xrp-ledger-overview.html#finite-xrp-supply\n[Responsible Software Governance]: https://xrpl.org/xrp-ledger-overview.html#responsible-software-governance\n[Secure, Adaptable Cryptography]: https://xrpl.org/xrp-ledger-overview.html#secure-adaptable-cryptography\n[Modern Features for Smart Contracts]: https://xrpl.org/xrp-ledger-overview.html#modern-features-for-smart-contracts\n[On-Ledger Decentralized Exchange]: https://xrpl.org/xrp-ledger-overview.html#on-ledger-decentralized-exchange\n\n\n## Source Code\n\nHere are some good places to start learning the source code:\n\n- Read the markdown files in the source tree: `src/ripple/**/*.md`.\n- Read [the levelization document](./Builds/levelization) to get an idea of the internal dependency graph.\n- In the big picture, the `main` function constructs an `ApplicationImp` object, which implements the `Application` virtual interface. Almost every component in the application takes an `Application&` parameter in its constructor, typically named `app` and stored as a member variable `app_`. This allows most components to depend on any other component.\n\n### Repository Contents\n\n| Folder     | Contents                                         |\n|:-----------|:-------------------------------------------------|\n| `./bin`    | Scripts and data files for Ripple integrators.   |\n| `./Builds` | Platform-specific guides for building `rippled`. |\n| `./docs`   | Source documentation files and doxygen config.   |\n| `./cfg`    | Example configuration files.                     |\n| `./src`    | Source code.                                     |\n\nSome of the directories under `src` are external repositories included using\ngit-subtree. See those directories' README files for more details.\n\n\n## Additional Documentation\n\n* [XRP Ledger Dev Portal](https://xrpl.org/)\n* [Setup and Installation](https://xrpl.org/install-rippled.html)\n* [Source Documentation (Doxygen)](https://xrplf.github.io/rippled/)\n\n## See Also\n\n* [Clio API Server for the XRP Ledger](https://github.com/XRPLF/clio)\n* [Mailing List for Release Announcements](https://groups.google.com/g/ripple-server)\n* [Learn more about the XRP Ledger (YouTube)](https://www.youtube.com/playlist?list=PLJQ55Tj1hIVZtJ_JdTvSum2qMTsedWkNi)\n"
        },
        {
          "name": "RELEASENOTES.md",
          "type": "blob",
          "size": 289.2607421875,
          "content": "# Release Notes\n\n![XRP](docs/images/xrp-text-mark-black-small@2x.png)\n\nThis document contains the release notes for `rippled`, the reference server implementation of the XRP Ledger protocol. To learn more about how to build, run or update a `rippled` server, visit https://xrpl.org/install-rippled.html\n\nHave new ideas? Need help with setting up your node? [Please open an issue here](https://github.com/xrplf/rippled/issues/new/choose).\n\n# Version 2.3.0\n\nVersion 2.3.0 of `rippled`, the reference server implementation of the XRP Ledger protocol, is now available. This release includes 8 new amendments, including Multi-Purpose Tokens, Credentials, Clawback support for AMMs, and the ability to make offers as part of minting NFTs. Additionally, this release includes important fixes for stability, so server operators are encouraged to upgrade as soon as possible.\n\n\n## Action Required\n\nIf you run an XRP Ledger server, upgrade to version 2.3.0 as soon as possible to ensure service continuity.\n\nAdditionally, new amendments are now open for voting according to the XRP Ledger's [amendment process](https://xrpl.org/amendments.html), which enables protocol changes following two weeks of >80% support from trusted validators. The exact time that protocol changes take effect depends on the voting decisions of the decentralized network.\n\n## Full Changelog\n\n### Amendments\n\nThe following amendments are open for voting with this release:\n\n- **XLS-70 Credentials** - Users can issue Credentials on the ledger and use Credentials to pre-approve incoming payments when using Deposit Authorization instead of individually approving payers. ([#5103](https://github.com/XRPLF/rippled/pull/5103))\n    - related fix: #5189 (https://github.com/XRPLF/rippled/pull/5189)\n- **XLS-33 Multi-Purpose Tokens** - A new type of fungible token optimized for institutional DeFi including stablecoins. ([#5143](https://github.com/XRPLF/rippled/pull/5143))\n- **XLS-37 AMM Clawback** - Allows clawback-enabled tokens to be used in AMMs, with appropriate guardrails. ([#5142](https://github.com/XRPLF/rippled/pull/5142))\n- **XLS-52 NFTokenMintOffer** - Allows creating an NFT sell offer as part of minting a new NFT. ([#4845](https://github.com/XRPLF/rippled/pull/4845))\n- **fixAMMv1_2** - Fixes two bugs in Automated Market Maker (AMM) transaction processing. ([#5176](https://github.com/XRPLF/rippled/pull/5176))\n- **fixNFTokenPageLinks** - Fixes a bug that can cause NFT directories to have missing links, and introduces a transaction to repair corrupted ledger state. ([#4945](https://github.com/XRPLF/rippled/pull/4945))\n- **fixEnforceNFTokenTrustline** - Fixes two bugs in the interaction between NFT offers and trust lines. ([#4946](https://github.com/XRPLF/rippled/pull/4946))\n- **fixInnerObjTemplate2** - Standardizes the way inner objects are enforced across all transaction and ledger data. ([#5047](https://github.com/XRPLF/rippled/pull/5047))\n\nThe following amendment is partially implemented but not open for voting:\n\n- **InvariantsV1_1** - Adds new invariants to ensure transactions process as intended, starting with an invariant to ensure that ledger entries owned by an account are deleted when the account is deleted. ([#4663](https://github.com/XRPLF/rippled/pull/4663))\n\n### New Features\n\n- Allow configuration of SQLite database page size. ([#5135](https://github.com/XRPLF/rippled/pull/5135), [#5140](https://github.com/XRPLF/rippled/pull/5140))\n- In the `libxrpl` C++ library, provide a list of known amendments. ([#5026](https://github.com/XRPLF/rippled/pull/5026)) \n\n### Deprecations\n\n- History Shards are removed. ([#5066](https://github.com/XRPLF/rippled/pull/5066))\n- Reporting mode is removed. ([#5092](https://github.com/XRPLF/rippled/pull/5092))\n\nFor users wanting to store more ledger history, it is recommended to run a Clio server instead.\n\n### Bug fixes\n\n- Fix a crash in debug builds when amm_info request contains an invalid AMM account ID. ([#5188](https://github.com/XRPLF/rippled/pull/5188))\n- Fix a crash caused by a race condition in peer-to-peer code. ([#5071](https://github.com/XRPLF/rippled/pull/5071))\n- Fix a crash in certain situations\n- Fix several bugs in the book_changes API method. ([#5096](https://github.com/XRPLF/rippled/pull/5096))\n- Fix bug triggered by providing an invalid marker to the account_nfts API method. ([#5045](https://github.com/XRPLF/rippled/pull/5045))\n- Accept lower-case hexadecimal in compact transaction identifier (CTID) parameters in API methods. ([#5049](https://github.com/XRPLF/rippled/pull/5049))\n- Disallow filtering by types that an account can't own in the account_objects API method. ([#5056](https://github.com/XRPLF/rippled/pull/5056))\n- Fix error code returned by the feature API method when providing an invalid parameter. ([#5063](https://github.com/XRPLF/rippled/pull/5063))\n- (API v3) Fix error code returned by amm_info when providing invalid parameters. ([#4924](https://github.com/XRPLF/rippled/pull/4924))\n\n### Other Improvements\n\n- Adds a new default hub, hubs.xrpkuwait.com, to the config file and bootstrapping code. ([#5169](https://github.com/XRPLF/rippled/pull/5169))\n- Improve error message when commandline interface fails with `rpcInternal` because there was no response from the server. ([#4959](https://github.com/XRPLF/rippled/pull/4959))\n- Add tools for debugging specific transactions via replay. ([#5027](https://github.com/XRPLF/rippled/pull/5027), [#5087](https://github.com/XRPLF/rippled/pull/5087))\n- Major reorganization of source code files. ([#4997](https://github.com/XRPLF/rippled/pull/4997))\n- Add new unit tests. ([#4886](https://github.com/XRPLF/rippled/pull/4886))\n- Various improvements to build tools and contributor documentation. ([#5001](https://github.com/XRPLF/rippled/pull/5001), [#5028](https://github.com/XRPLF/rippled/pull/5028), [#5052](https://github.com/XRPLF/rippled/pull/5052), [#5091](https://github.com/XRPLF/rippled/pull/5091), [#5084](https://github.com/XRPLF/rippled/pull/5084), [#5120](https://github.com/XRPLF/rippled/pull/5120), [#5010](https://github.com/XRPLF/rippled/pull/5010). [#5055](https://github.com/XRPLF/rippled/pull/5055), [#5067](https://github.com/XRPLF/rippled/pull/5067), [#5061](https://github.com/XRPLF/rippled/pull/5061), [#5072](https://github.com/XRPLF/rippled/pull/5072), [#5044](https://github.com/XRPLF/rippled/pull/5044) )\n- Various code cleanup and refactoring. ([#4509](https://github.com/XRPLF/rippled/pull/4509), [#4521](https://github.com/XRPLF/rippled/pull/4521), [#4856](https://github.com/XRPLF/rippled/pull/4856), [#5190](https://github.com/XRPLF/rippled/pull/5190), [#5081](https://github.com/XRPLF/rippled/pull/5081), [#5053](https://github.com/XRPLF/rippled/pull/5053), [#5058](https://github.com/XRPLF/rippled/pull/5058), [#5122](https://github.com/XRPLF/rippled/pull/5122), [#5059](https://github.com/XRPLF/rippled/pull/5059), [#5041](https://github.com/XRPLF/rippled/pull/5041))\n\n\nBug Bounties and Responsible Disclosures:\n\nWe welcome reviews of the `rippled` code and urge researchers to responsibly disclose any issues they may find.\n\nTo report a bug, please send a detailed report to: <bugs@xrpl.org>\n\n\n# Version 2.2.3\n\nVersion 2.2.3 of `rippled`, the reference server implementation of the XRP Ledger protocol, is now available. This release fixes a problem that can cause full-history servers to run out of space in their SQLite databases, depending on configuration. There are no new amendments in this release.\n\n[Sign Up for Future Release Announcements](https://groups.google.com/g/ripple-server)\n\n<!-- BREAK -->\n\n## Background\n\nThe `rippled` server uses a SQLite database for tracking transactions, in addition to the main data store (usually NuDB) for ledger data. In servers keeping a large amount of history, this database can run out of space based on the configured number and size of database pages, even if the machine has disk space available. Based on the size of full history on Mainnet, servers with the default SQLite page size of 4096 may now run out of space if they store full history. In this case, your server may shut down with an error such as the following:\n\n```text\nFree SQLite space for transaction db is less than 512MB. To fix this, rippled\n  must be executed with the vacuum <sqlitetmpdir> parameter before restarting.\n  Note that this activity can take multiple days, depending on database size.\n```\n\nThe exact timing of when a server runs out of space can vary based on a few factors. Server operators who encountered a similar problem in 2018 and followed steps to [increase the SQLite transaction database page size issue](../../../docs/infrastructure/troubleshooting/fix-sqlite-tx-db-page-size-issue) may not encounter this problem at all. The `--vacuum` commandline option to `rippled` from that time may work to free up space in the database, but requires extended downtime.\n\nVersion 2.2.3 of `rippled` reconfigures the maximum number of SQLite pages so that the issue does not occur.\n\nClio servers providing full history are not affected by this issue.\n\n\n## Action Required\n\nIf you run an [XRP Ledger full history server](https://xrpl.org/docs/infrastructure/configuration/data-retention/configure-full-history), upgrading to version 2.2.3 may prevent the server from crashing when `transaction.db` exceeds approximately 8.7 terabytes.\n\nAdditionally, five amendments introduced in version 2.2.0 are open for voting according to the XRP Ledger's [amendment process](https://xrpl.org/amendments.html), which enables protocol changes following two weeks of >80% support from trusted validators. If you operate an XRP Ledger server older than version 2.2.0, upgrade by Sep 23, 2024 to ensure service continuity. The exact time that protocol changes take effect depends on the voting decisions of the decentralized network.\n\n## Changelog\n\n### Bug Fixes\n\n- Update SQLite3 max_page_count to match current defaults ([#5114](https://github.com/XRPLF/rippled/pull/5114))\n\n### GitHub\n\nThe public source code repository for `rippled` is hosted on GitHub at <https://github.com/XRPLF/rippled>.\n\nWe welcome all contributions and invite everyone to join the community of XRP Ledger developers to help build the Internet of Value.\n\n\n## Credits\n\nThe following people contributed directly to this release:\n\nJ. Scott Branson <the@rabbitkick.club>\n\n\nBug Bounties and Responsible Disclosures:\n\nWe welcome reviews of the `rippled` code and urge researchers to responsibly disclose any issues they may find.\n\nTo report a bug, please send a detailed report to: <bugs@xrpl.org>\n\n\n# Version 2.2.2\n\nVersion 2.2.2 of `rippled`, the reference server implementation of the XRP Ledger protocol, is now available. This release fixes an ongoing issue with Mainnet where validators can stall during consensus processing due to lock contention, preventing ledgers from being validated for up to two minutes. There are no new amendments in this release.\n\n[Sign Up for Future Release Announcements](https://groups.google.com/g/ripple-server)\n\n<!-- BREAK -->\n\n## Action Required\n\nIf you run an XRP Ledger validator, upgrade to version 2.2.2 as soon as possible to ensure stable and uninterrupted network behavior.\n\nAdditionally, five amendments introduced in version 2.2.0 are open for voting according to the XRP Ledger's [amendment process](https://xrpl.org/amendments.html), which enables protocol changes following two weeks of >80% support from trusted validators. If you operate an XRP Ledger server older than version 2.2.0, upgrade by September 17, 2024 to ensure service continuity. The exact time that protocol changes take effect depends on the voting decisions of the decentralized network. Version 2.2.2 is recommended because of known bugs affecting stability of versions 2.2.0 and 2.2.1.\n\nIf you operate a Clio server, Clio needs to be updated to 2.1.2 before updating to rippled 2.2.0. Clio will be blocked if it is not updated.\n\n## Changelog\n\n### Amendments and New Features\n\n- None\n\n### Bug Fixes and Performance Improvements\n\n- Allow only 1 job queue slot for acquiring inbound ledger [#5115](https://github.com/XRPLF/rippled/pull/5115) ([7741483](https://github.com/XRPLF/rippled/commit/774148389467781aca7c01bac90af2fba870570c))\n\n- Allow only 1 job queue slot for each validation ledger check [#5115](https://github.com/XRPLF/rippled/pull/5115) ([fbbea9e](https://github.com/XRPLF/rippled/commit/fbbea9e6e25795a8a6bd1bf64b780771933a9579))\n\n### Other improvements\n\n -  Track latencies of certain code blocks, and log if they take too long [#5115](https://github.com/XRPLF/rippled/pull/5115) ([00ed7c9](https://github.com/XRPLF/rippled/commit/00ed7c942436f02644a13169002b5123f4e2a116))\n\n### Docs and Build System\n\n- None\n\n### GitHub\n\nThe public source code repository for `rippled` is hosted on GitHub at <https://github.com/XRPLF/rippled>.\n\nWe welcome all contributions and invite everyone to join the community of XRP Ledger developers to help build the Internet of Value.\n\n\n## Credits\n\nThe following people contributed directly to this release:\n\nMark Travis <mtrippled@users.noreply.github.com>\nValentin Balaschenko <13349202+vlntb@users.noreply.github.com>\n\nBug Bounties and Responsible Disclosures:\n\nWe welcome reviews of the `rippled` code and urge researchers to responsibly disclose any issues they may find.\n\nTo report a bug, please send a detailed report to: <bugs@xrpl.org>\n\n# Version 2.2.1\n\nVersion 2.2.1 of `rippled`, the reference server implementation of the XRP Ledger protocol, is now available. This release fixes a critical bug introduced in 2.2.0 handling some types of RPC requests.\n\n[Sign Up for Future Release Announcements](https://groups.google.com/g/ripple-server)\n\n<!-- BREAK -->\n\n## Action Required\n\nIf you run an XRP Ledger validator, upgrade to version 2.2.1 as soon as possible to ensure stable and uninterrupted network behavior.\n\nAdditionally, five amendments introduced in version 2.2.0 are open for voting according to the XRP Ledger's [amendment process](https://xrpl.org/amendments.html), which enables protocol changes following two weeks of >80% support from trusted validators. If you operate an XRP Ledger server older than version 2.2.0, upgrade by August 14, 2024 to ensure service continuity. The exact time that protocol changes take effect depends on the voting decisions of the decentralized network. Version 2.2.1 is recommended because of known bugs affecting stability of versions 2.2.0.\n\nIf you operate a Clio server, Clio needs to be updated to 2.2.2 before updating to rippled 2.2.1. Clio will be blocked if it is not updated.\n\n## Changelog\n\n### Amendments and New Features\n\n- None\n\n### Bug Fixes and Performance Improvements\n\n- Improve error handling in some RPC commands. [#5078](https://github.com/XRPLF/rippled/pull/5078)\n\n- Use error codes throughout fast Base58 implementation. [#5078](https://github.com/XRPLF/rippled/pull/5078)\n\n### Docs and Build System\n\n- None\n\n### GitHub\n\nThe public source code repository for `rippled` is hosted on GitHub at <https://github.com/XRPLF/rippled>.\n\nWe welcome all contributions and invite everyone to join the community of XRP Ledger developers to help build the Internet of Value.\n\n\n## Credits\n\nThe following people contributed directly to this release:\n\nJohn Freeman <jfreeman08@gmail.com>\nMayukha Vadari <mvadari@gmail.com>\n\nBug Bounties and Responsible Disclosures:\n\nWe welcome reviews of the `rippled` code and urge researchers to responsibly disclose any issues they may find.\n\nTo report a bug, please send a detailed report to: <bugs@xrpl.org>\n\n\n# Version 2.2.0\n\nVersion 2.2.0 of `rippled`, the reference server implementation of the XRP Ledger protocol, is now available. This release adds performance optimizations, several bug fixes, and introduces the `featurePriceOracle`, `fixEmptyDID`, `fixXChainRewardRounding`, `fixPreviousTxnID`, and `fixAMMv1_1` amendments.\n\n[Sign Up for Future Release Announcements](https://groups.google.com/g/ripple-server)\n\n<!-- BREAK -->\n\n## Action Required\n\nFive new amendments are now open for voting according to the XRP Ledger's [amendment process](https://xrpl.org/amendments.html), which enables protocol changes following two weeks of >80% support from trusted validators.\n\nIf you operate an XRP Ledger server, upgrade to version 2.2.0 by June 17, 2024 to ensure service continuity. The exact time that protocol changes take effect depends on the voting decisions of the decentralized network.\n\nIf you operate a Clio server, Clio needs to be updated to 2.1.2 before updating to rippled 2.2.0. Clio will be blocked if it is not updated.\n\n## Changelog\n\n### Amendments and New Features\n(These are changes which may impact or be useful to end users. For example, you may be able to update your code/workflow to take advantage of these changes.)\n\n- **featurePriceOracle** amendment: Implements a price oracle as defined in the [XLS-47](https://github.com/XRPLF/XRPL-Standards/blob/master/XLS-47d-PriceOracles/README.md) spec. A Price Oracle is used to bring real-world data, such as market prices, onto the blockchain, enabling dApps to access and utilize information that resides outside the blockchain. [#4789](https://github.com/XRPLF/rippled/pull/4789) \n\n- **fixEmptyDID** amendment: Modifies the behavior of the DID amendment: adds an additional check to ensure that DIDs are non-empty when created, and returns a `tecEMPTY_DID` error if the DID would be empty. [#4950](https://github.com/XRPLF/rippled/pull/4950)\n\n- **fixXChainRewardRounding** amendment: Modifies the behavior of the XChainBridge amendment: fixes rounding so reward shares are always rounded down, even when the `fixUniversalNumber` amendment is active. [#4933](https://github.com/XRPLF/rippled/pull/4933)\n\n- **fixPreviousTxnID** amendment: Adds `PreviousTxnID` and `PreviousTxnLgrSequence` as fields to all ledger entries that did not already have them included (`DirectoryNode`, `Amendments`, `FeeSettings`, `NegativeUNL`, and `AMM`). Existing ledger entries will gain the fields whenever transactions modify those entries. [#4751](https://github.com/XRPLF/rippled/pull/4751). \n\n- **fixAMMv1_1** amendment: Fixes AMM offer rounding and low quality order book offers from blocking the AMM. [#4983](https://github.com/XRPLF/rippled/pull/4983)\n\n- Add a non-admin version of `feature` API method. [#4781](https://github.com/XRPLF/rippled/pull/4781)\n\n### Bug Fixes and Performance Improvements\n(These are behind-the-scenes improvements, such as internal changes to the code, which are not expected to impact end users.)\n\n- Optimize the base58 encoder and decoder. The algorithm is now about 10 times faster for encoding and 15 times faster for decoding. [#4327](https://github.com/XRPLF/rippled/pull/4327)\n\n- Optimize the `account_tx` SQL query. [#4955](https://github.com/XRPLF/rippled/pull/4955)\n\n- Don't reach consensus as quickly if no other proposals are seen. [#4763](https://github.com/XRPLF/rippled/pull/4763)\n\n- Fix a potential deadlock in the database module. [#4989](https://github.com/XRPLF/rippled/pull/4989)\n\n- Enforce no duplicate slots from incoming connections. [#4944](https://github.com/XRPLF/rippled/pull/4944)\n\n- Fix an order book update variable swap. [#4890](https://github.com/XRPLF/rippled/pull/4890)\n\n### Docs and Build System\n\n- Add unit test to raise the test coverage of the AMM. [#4971](https://github.com/XRPLF/rippled/pull/4971)\n\n- Improve test coverage reporting. [#4977](https://github.com/XRPLF/rippled/pull/4977)\n\n### GitHub\n\nThe public source code repository for `rippled` is hosted on GitHub at <https://github.com/XRPLF/rippled>.\n\nWe welcome all contributions and invite everyone to join the community of XRP Ledger developers to help build the Internet of Value.\n\n\n## Credits\n\nThe following people contributed directly to this release:\n\nAlex Kremer <akremer@ripple.com>\nAlloy Networks <45832257+alloynetworks@users.noreply.github.com>\nBronek Kozicki <brok@incorrekt.com>\nChenna Keshava <ckeshavabs@gmail.com>\nDenis Angell <dangell@transia.co>\nEd Hennis <ed@ripple.com>\nGregory Tsipenyuk <gtsipenyuk@ripple.com>\nHoward Hinnant <howard.hinnant@gmail.com>\nJohn Freeman <jfreeman08@gmail.com>\nMark Travis <mtrippled@users.noreply.github.com>\nMayukha Vadari <mvadari@gmail.com>\nMichael Legleux <mlegleux@ripple.com>\nNik Bougalis <nikb@bougalis.net>\nOlek <115580134+oleks-rip@users.noreply.github.com>\nScott Determan <scott.determan@yahoo.com>\nSnoppy <michaleli@foxmail.com>\n\nBug Bounties and Responsible Disclosures:\n\nWe welcome reviews of the `rippled` code and urge researchers to responsibly disclose any issues they may find.\n\nTo report a bug, please send a detailed report to: <bugs@xrpl.org>\n\n\n## Version 2.1.1\n\nThe `rippled` 2.1.1 release fixes a critical bug in the integration of AMMs with the payment engine.\n\n[Sign Up for Future Release Announcements](https://groups.google.com/g/ripple-server)\n\n<!-- BREAK -->\n\n\n## Action Required\n\nOne new amendment is now open for voting according to the XRP Ledger's [amendment process](https://xrpl.org/amendments.html), which enables protocol changes following two weeks of >80% support from trusted validators.\n\nIf you operate an XRP Ledger server, upgrade to version 2.1.1 by April 8, 2024 to ensure service continuity. The exact time that protocol changes take effect depends on the voting decisions of the decentralized network.\n\n## Changelog\n\n### Amendments\n\n- **fixAMMOverflowOffer**: Fix improper handling of large synthetic AMM offers in the payment engine. Due to the importance of this fix, the default vote in the source code has been set to YES. For information on how to configure your validator's amendment voting, see [Configure Amendment Voting](https://xrpl.org/docs/infrastructure/configuration/configure-amendment-voting).\n\n# Introducing XRP Ledger version 2.1.0\n\nVersion 2.1.0 of `rippled`, the reference server implementation of the XRP Ledger protocol, is now available. This release adds a bug fix, build improvements, and introduces the `fixNFTokenReserve` and `fixInnerObjTemplate` amendments.\n\n[Sign Up for Future Release Announcements](https://groups.google.com/g/ripple-server)\n\n<!-- BREAK -->\n\n\n## Action Required\n\nTwo new amendments are now open for voting according to the XRP Ledger's [amendment process](https://xrpl.org/amendments.html), which enables protocol changes following two weeks of >80% support from trusted validators.\n\nIf you operate an XRP Ledger server, upgrade to version 2.1.0 by March 5, 2024 to ensure service continuity. The exact time that protocol changes take effect depends on the voting decisions of the decentralized network.\n\n## Changelog\n\n### Amendments\n(These are changes which may impact or be useful to end users. For example, you may be able to update your code/workflow to take advantage of these changes.)\n\n- **fixNFTokenReserve**: Adds a check to the `NFTokenAcceptOffer` transactor to see if the `OwnerCount` changed. If it did, it checks that the reserve requirement is met. [#4767](https://github.com/XRPLF/rippled/pull/4767)\n\n- **fixInnerObjTemplate**: Adds an `STObject` constructor overload that includes an additional boolean argument to set the inner object template; currently, the inner object template isn't set upon object creation. In some circumstances, this causes a `tefEXCEPTION` error when trying to access the AMM `sfTradingFee` and `sfDiscountedFee` fields in the inner objects of `sfVoteEntry` and `sfAuctionSlot`. [#4906](https://github.com/XRPLF/rippled/pull/4906)\n\n\n### Bug Fixes and Performance Improvements\n(These are behind-the-scenes improvements, such as internal changes to the code, which are not expected to impact end users.)\n\n- Fixed a bug that prevented the gRPC port info from being specified in the `rippled` config file. [#4728](https://github.com/XRPLF/rippled/pull/4728)\n\n\n### Docs and Build System\n\n- Added unit tests to check that payees and payers aren't the same account. [#4860](https://github.com/XRPLF/rippled/pull/4860)\n\n- Removed a workaround that bypassed Windows CI unit test failures. [#4871](https://github.com/XRPLF/rippled/pull/4871)\n\n- Updated library names to be platform-agnostic in Conan recipes. [#4831](https://github.com/XRPLF/rippled/pull/4831)\n\n- Added headers required in the Conan package to build xbridge witness servers. [#4885](https://github.com/XRPLF/rippled/pull/4885)\n\n- Improved object lifetime management when creating a temporary `Rules` object, fixing a crash in Windows unit tests. [#4917](https://github.com/XRPLF/rippled/pull/4917)\n\n### GitHub\n\nThe public source code repository for `rippled` is hosted on GitHub at <https://github.com/XRPLF/rippled>.\n\nWe welcome all contributions and invite everyone to join the community of XRP Ledger developers to help build the Internet of Value.\n\n\n## Credits\n\nThe following people contributed directly to this release:\n\n- Bronek Kozicki <brok@incorrekt.com>\n- CJ Cobb <cj@axelar.network>\n- Chenna Keshava B S <21219765+ckeshava@users.noreply.github.com>\n- Ed Hennis <ed@ripple.com>\n- Elliot Lee <github.public@intelliot.com>\n- Gregory Tsipenyuk <gregtatcam@users.noreply.github.com>\n- John Freeman <jfreeman08@gmail.com>\n- Michael Legleux <legleux@users.noreply.github.com>\n- Ryan Molley\n- Shawn Xie <35279399+shawnxie999@users.noreply.github.com>\n\n\nBug Bounties and Responsible Disclosures:\n\nWe welcome reviews of the `rippled` code and urge researchers to responsibly disclose any issues they may find.\n\nTo report a bug, please send a detailed report to: <bugs@xrpl.org>\n\n# Introducing XRP Ledger version 2.0.1\n\nVersion 2.0.1 of `rippled`, the reference server implementation of the XRP Ledger protocol, is now available. This release includes minor fixes, unit test improvements, and doc updates.\n\n[Sign Up for Future Release Announcements](https://groups.google.com/g/ripple-server)\n\n<!-- BREAK -->\n\n\n## Action Required\n\nIf you operate an XRP Ledger server, upgrade to version 2.0.1 to take advantage of the changes included in this update. Nodes on version 1.12 should upgrade as soon as possible.\n\n\n## Changelog\n\n\n### Changes\n(These are changes which may impact or be useful to end users. For example, you may be able to update your code/workflow to take advantage of these changes.)\n\n- Updated the `send_queue_limit` to 500 in the default `rippled` config to handle increased transaction loads. [#4867](https://github.com/XRPLF/rippled/pull/4867)\n\n\n### Bug Fixes and Performance Improvements\n(These are behind-the-scenes improvements, such as internal changes to the code, which are not expected to impact end users.)\n\n- Fixed an assertion that occurred when `rippled` was under heavy websocket client load. [#4848](https://github.com/XRPLF/rippled/pull/4848)\n\n- Improved lifetime management of serialized type ledger entries to improve memory usage. [#4822](https://github.com/XRPLF/rippled/pull/4822)\n\n- Fixed a clang warning about deprecated sprintf usage. [#4747](https://github.com/XRPLF/rippled/pull/4747)\n\n\n### Docs and Build System\n\n- Added `DeliverMax` to more JSONRPC tests. [#4826](https://github.com/XRPLF/rippled/pull/4826)\n\n- Updated the pull request template to include a `Type of Change` checkbox and additional contextual questions. [#4875](https://github.com/XRPLF/rippled/pull/4875)\n\n- Updated help messages for unit tests pattern matching. [#4846](https://github.com/XRPLF/rippled/pull/4846)\n\n- Improved the time it take to generate coverage reports. [#4849](https://github.com/XRPLF/rippled/pull/4849)\n\n- Fixed broken links in the Conan build docs. [#4699](https://github.com/XRPLF/rippled/pull/4699)\n\n- Spurious codecov uploads are now retried if there's an error uploading them the first time. [#4896](https://github.com/XRPLF/rippled/pull/4896)\n\n\n### GitHub\n\nThe public source code repository for `rippled` is hosted on GitHub at <https://github.com/XRPLF/rippled>.\n\nWe welcome all contributions and invite everyone to join the community of XRP Ledger developers to help build the Internet of Value.\n\n\n## Credits\n\nThe following people contributed directly to this release:\n\n- Bronek Kozicki <brok@incorrekt.com>\n- Chenna Keshava B S <21219765+ckeshava@users.noreply.github.com>\n- Ed Hennis <ed@ripple.com>\n- Elliot Lee <github.public@intelliot.com>\n- Lathan Britz <jucallme@gmail.com>\n- Mark Travis <mtrippled@users.noreply.github.com>\n- nixer89 <pbnixer@gmail.com>\n\nBug Bounties and Responsible Disclosures:\n\nWe welcome reviews of the `rippled` code and urge researchers to responsibly disclose any issues they may find.\n\nTo report a bug, please send a detailed report to: <bugs@xrpl.org>\n\n# Introducing XRP Ledger version 2.0.0\n\nVersion 2.0.0 of `rippled`, the reference server implementation of the XRP Ledger protocol, is now available. This release adds new features and bug fixes, and introduces these amendments:\n\n- `DID`\n- `XChainBridge`\n- `fixDisallowIncomingV1`\n- `fixFillOrKill`\n\n[Sign Up for Future Release Announcements](https://groups.google.com/g/ripple-server)\n\n<!-- BREAK -->\n\n\n## Action Required\n\nFour new amendments are now open for voting according to the XRP Ledger's [amendment process](https://xrpl.org/amendments.html), which enables protocol changes following two weeks of >80% support from trusted validators.\n\nIf you operate an XRP Ledger server, upgrade to version 2.0.0 by January 22, 2024 to ensure service continuity. The exact time that protocol changes take effect depends on the voting decisions of the decentralized network.\n\n\n## Changelog\n\n\n### Amendments, New Features, and Changes\n(These are changes which may impact or be useful to end users. For example, you may be able to update your code/workflow to take advantage of these changes.)\n\n- **XChainBridge**: Introduces cross-chain bridges, enabling interoperability between the XRP Ledger and sidechains. [#4292](https://github.com/XRPLF/rippled/pull/4292)\n\n- **DID**: Introduces decentralized identifiers. [#4636](https://github.com/XRPLF/rippled/pull/4636)\n\n- **fixDisallowIncomingV1**: Fixes an issue that occurs when users try to authorize a trustline while the `lsfDisallowIncomingTrustline` flag is enabled on their account. [#4721](https://github.com/XRPLF/rippled/pull/4721)\n\n- **fixFillOrKill**: Fixes an issue introduced in the `flowCross` amendment. The `tfFillOrKill` and `tfSell` flags are now properly handled to allow offers to cross in certain scenarios. [#4694](https://github.com/XRPLF/rippled/pull/4694)\n\n- **API v2 released with these changes:**\n\n  - Accepts currency codes in ASCII, using the full alphabet. [#4566](https://github.com/XRPLF/rippled/pull/4566)\n  - Added test to verify the `check` field is a string. [#4630](https://github.com/XRPLF/rippled/pull/4630)\n  - Added errors for malformed `account_tx` and `noripple_check` fields. [#4620](https://github.com/XRPLF/rippled/pull/4620)\n  - Added errors for malformed `gateway_balances` and `channel_authorize` requests. [#4618](https://github.com/XRPLF/rippled/pull/4618)\n  - Added a `DeliverMax` alias to `Amount` and removed `Amount`. [#4733](https://github.com/XRPLF/rippled/pull/4733)\n  - Removed `tx_history` and `ledger_header` methods. Also updated `RPC::Handler` to allow for version-specific methods. [#4759](https://github.com/XRPLF/rippled/pull/4759)\n  - Standardized the JSON serialization format of transactions. [#4727](https://github.com/XRPLF/rippled/issues/4727)\n  - Bumped API support to v2, but kept the command-line interface for `rippled` and unit tests at v1. [#4803](https://github.com/XRPLF/rippled/pull/4803)\n  - Standardized `ledger_index` to return as a number. [#4820](https://github.com/XRPLF/rippled/pull/4820)\n\n- Added a `server_definitions` command that returns an SDK-compatible `definitions.json` file, generated from the `rippled` instance currently running. [#4703](https://github.com/XRPLF/rippled/pull/4703)\n\n- Improved unit test command line input and run times. [#4634](https://github.com/XRPLF/rippled/pull/4634)\n\n- Added the link compression setting to the the `rippled-example.cfg` file. [#4753](https://github.com/XRPLF/rippled/pull/4753)\n\n- Changed the reserved hook error code name from `tecHOOK_ERROR` to `tecHOOK_REJECTED`. [#4559](https://github.com/XRPLF/rippled/pull/4559)\n\n\n### Bug Fixes and Performance Improvements\n(These are behind-the-scenes improvements, such as internal changes to the code, which are not expected to impact end users.)\n\n- Simplified `TxFormats` common fields logic. [#4637](https://github.com/XRPLF/rippled/pull/4637)\n\n- Improved transaction throughput by asynchronously writing batches to *NuDB*. [#4503](https://github.com/XRPLF/rippled/pull/4503)\n\n- Removed 2 unused functions. [#4708](https://github.com/XRPLF/rippled/pull/4708)\n\n- Removed an unused variable that caused clang 14 build errors. [#4672](https://github.com/XRPLF/rippled/pull/4672)\n\n- Fixed comment about return value of `LedgerHistory::fixIndex`. [#4574](https://github.com/XRPLF/rippled/pull/4574)\n\n- Updated `secp256k1` to 0.3.2. [#4653](https://github.com/XRPLF/rippled/pull/4653)\n\n- Removed built-in SNTP clock issues. [#4628](https://github.com/XRPLF/rippled/pull/4628)\n\n- Fixed amendment flapping. This issue usually occurred when an amendment was on the verge of gaining majority, but a validator not in favor of the amendment went offline. [#4410](https://github.com/XRPLF/rippled/pull/4410)\n\n- Fixed asan stack-use-after-scope issue. [#4676](https://github.com/XRPLF/rippled/pull/4676)\n\n- Transactions and pseudo-transactions share the same `commonFields` again. [#4715](https://github.com/XRPLF/rippled/pull/4715)\n\n- Reduced boilerplate in `applySteps.cpp`. When a new transactor is added, only one function needs to be modified now. [#4710](https://github.com/XRPLF/rippled/pull/4710)\n\n- Removed an incorrect assert. [#4743](https://github.com/XRPLF/rippled/pull/4743)\n\n- Replaced some asserts in `PeerFinder::Logic` with `LogicError` to better indicate the nature of server crashes. [#4562](https://github.com/XRPLF/rippled/pull/4562)\n\n- Fixed an issue with enabling new amendments on a network with an ID greater than 1024. [#4737](https://github.com/XRPLF/rippled/pull/4737)\n\n\n### Docs and Build System\n\n- Updated `rippled-example.cfg` docs to clarify usage of *ssl_cert* vs *ssl_chain*. [#4667](https://github.com/XRPLF/rippled/pull/4667)\n\n- Updated `BUILD.md`:\n    - Made the `environment.md` link easier to find. Also made it easier to find platform-specific info. [#4507](https://github.com/XRPLF/rippled/pull/4507)\n    - Fixed typo. [#4718](https://github.com/XRPLF/rippled/pull/4718)\n    - Updated the minimum compiler requirements. [#4700](https://github.com/XRPLF/rippled/pull/4700)\n    - Added note about enabling `XRPFees`. [#4741](https://github.com/XRPLF/rippled/pull/4741)\n\n- Updated `API-CHANGELOG.md`:\n    - Explained API v2 is releasing with `rippled` 2.0.0. [#4633](https://github.com/XRPLF/rippled/pull/4633)\n    - Clarified the location of the `signer_lists` field in the `account_info` response for API v2. [#4724](https://github.com/XRPLF/rippled/pull/4724)\n    - Added documentation for the new `DeliverMax` field. [#4784](https://github.com/XRPLF/rippled/pull/4784)\n    - Removed references to API v2 being \"in progress\" and \"in beta\". [#4828](https://github.com/XRPLF/rippled/pull/4828)\n    - Clarified that all breaking API changes will now occur in API v3 or later. [#4773](https://github.com/XRPLF/rippled/pull/4773)\n\n- Fixed a mistake in the overlay README. [#4635](https://github.com/XRPLF/rippled/pull/4635)\n\n- Fixed an early return from `RippledRelease.cmake` that prevented targets from being created during packaging. [#4707](https://github.com/XRPLF/rippled/pull/4707)\n\n- Fixed a build error with Intel Macs. [#4632](https://github.com/XRPLF/rippled/pull/4632)\n\n- Added `.build` to `.gitignore`. [#4722](https://github.com/XRPLF/rippled/pull/4722)\n\n- Fixed a `uint is not universally defined` Windows build error. [#4731](https://github.com/XRPLF/rippled/pull/4731)\n\n- Reenabled Windows CI build with Artifactory support. [#4596](https://github.com/XRPLF/rippled/pull/4596)\n\n- Fixed output of remote step in Nix workflow. [#4746](https://github.com/XRPLF/rippled/pull/4746)\n\n- Fixed a broken link in `conan.md`. [#4740](https://github.com/XRPLF/rippled/pull/4740)\n\n- Added a `python` call to fix the `pip` upgrade command in Windows CI. [#4768](https://github.com/XRPLF/rippled/pull/4768)\n\n- Added an API Impact section to `pull_request_template.md`. [#4757](https://github.com/XRPLF/rippled/pull/4757)\n\n- Set permissions for the Doxygen workflow. [#4756](https://github.com/XRPLF/rippled/pull/4756)\n\n- Switched to Unity builds to speed up Windows CI. [#4780](https://github.com/XRPLF/rippled/pull/4780)\n\n- Clarified what makes consensus healthy in `FeeEscalation.md`. [#4729](https://github.com/XRPLF/rippled/pull/4729)\n\n- Removed a dependency on the <ranges> header for unit tests. [#4788](https://github.com/XRPLF/rippled/pull/4788)\n\n- Fixed a clang `unused-but-set-variable` warning. [#4677](https://github.com/XRPLF/rippled/pull/4677)\n\n- Removed an unused Dockerfile. [#4791](https://github.com/XRPLF/rippled/pull/4791)\n\n- Fixed unit tests to work with API v2. [#4785](https://github.com/XRPLF/rippled/pull/4785)\n\n- Added support for the mold linker on Linux. [#4807](https://github.com/XRPLF/rippled/pull/4807)\n\n- Updated Linux distribtuions `rippled` smoke tests run on. [#4813](https://github.com/XRPLF/rippled/pull/4813)\n\n- Added codename `bookworm` to the distribution matrix during Artifactory uploads, enabling Debian 12 clients to install `rippled` packages. [#4836](https://github.com/XRPLF/rippled/pull/4836)\n\n- Added a workaround for compilation errors with GCC 13 and other compilers relying on libstdc++ version 13. [#4817](https://github.com/XRPLF/rippled/pull/4817)\n\n- Fixed a minor typo in the code comments of `AMMCreate.h`. [4821](https://github.com/XRPLF/rippled/pull/4821)\n\n\n### GitHub\n\nThe public source code repository for `rippled` is hosted on GitHub at <https://github.com/XRPLF/rippled>.\n\nWe welcome all contributions and invite everyone to join the community of XRP Ledger developers to help build the Internet of Value.\n\n\n## Credits\n\nThe following people contributed directly to this release:\n\n- Bronek Kozicki <brok@incorrekt.com>\n- Chenna Keshava B S <21219765+ckeshava@users.noreply.github.com>\n- Denis Angell <dangell@transia.co>\n- Ed Hennis <ed@ripple.com>\n- Elliot Lee <github.public@intelliot.com>\n- Florent <36513774+florent-uzio@users.noreply.github.com>\n- ForwardSlashBack <142098649+ForwardSlashBack@users.noreply.github.com>\n- Gregory Tsipenyuk <gregtatcam@users.noreply.github.com>\n- Howard Hinnant <howard.hinnant@gmail.com>\n- Hussein Badakhchani <husseinb01@gmail.com>\n- Jackson Mills <aim4math@gmail.com>\n- John Freeman <jfreeman08@gmail.com>\n- Manoj Doshi <mdoshi@ripple.com>\n- Mark Pevec <mark.pevec@gmail.com>\n- Mark Travis <mtrippled@users.noreply.github.com>\n- Mayukha Vadari <mvadari@gmail.com>\n- Michael Legleux <legleux@users.noreply.github.com>\n- Nik Bougalis <nikb@bougalis.net>\n- Peter Chen <34582813+PeterChen13579@users.noreply.github.com>\n- Rome Reginelli <rome@ripple.com>\n- Scott Determan <scott.determan@yahoo.com>\n- Scott Schurr <scott@ripple.com>\n- Sophia Xie <106177003+sophiax851@users.noreply.github.com>\n- Stefan van Kessel <van_kessel@freenet.de>\n- pwang200 <354723+pwang200@users.noreply.github.com>\n- shichengsg002 <147461171+shichengsg002@users.noreply.github.com>\n- sokkaofthewatertribe <140777955+sokkaofthewatertribe@users.noreply.github.com>\n\nBug Bounties and Responsible Disclosures:\n\nWe welcome reviews of the rippled code and urge researchers to responsibly disclose any issues they may find.\n\nTo report a bug, please send a detailed report to: <bugs@xrpl.org>\n\n\n# Introducing XRP Ledger version 1.12.0\n\nVersion 1.12.0 of `rippled`, the reference server implementation of the XRP Ledger protocol, is now available. This release adds new features and bug fixes, and introduces these amendments:\n\n- `AMM`\n- `Clawback`\n- `fixReducedOffersV1`\n\n[Sign Up for Future Release Announcements](https://groups.google.com/g/ripple-server)\n\n<!-- BREAK -->\n\n## Action Required\n\nThree new amendments are now open for voting according to the XRP Ledger's [amendment process](https://xrpl.org/amendments.html), which enables protocol changes following two weeks of >80% support from trusted validators.\n\nIf you operate an XRP Ledger server, upgrade to version 1.12.0 by September 20, 2023 to ensure service continuity. The exact time that protocol changes take effect depends on the voting decisions of the decentralized network.\n\n\n## Install / Upgrade\n\nOn supported platforms, see the [instructions on installing or updating `rippled`](https://xrpl.org/install-rippled.html).\n\nThe XRPL Foundation publishes portable binaries, which are drop-in replacements for the `rippled` daemon. [See information and downloads for the portable binaries](https://github.com/XRPLF/rippled-portable-builds#portable-builds-of-the-rippled-server). This will work on most distributions, including Ubuntu 16.04, 18.04, 20.04, and 22.04; CentOS; and others. Please test and open issues on GitHub if there are problems.\n\n\n## Changelog\n\n### Amendments, New Features, and Changes\n(These are changes which may impact or be useful to end users. For example, you may be able to update your code/workflow to take advantage of these changes.)\n\n- **`AMM`**: Introduces an automated market maker (AMM) protocol to the XRP Ledger's decentralized exchange, enabling you to trade assets without a counterparty. For more information about AMMs, see: [Automated Market Maker](https://opensource.ripple.com/docs/xls-30d-amm/amm-uc/). [#4294](https://github.com/XRPLF/rippled/pull/4294)\n\n- **`Clawback`**: Adds a setting, *Allow Clawback*, which lets an issuer recover, or _claw back_, tokens that they previously issued. Issuers cannot enable this setting if they have issued tokens already. For additional documentation on this feature, see: [#4553](https://github.com/XRPLF/rippled/pull/4553).\n\n- **`fixReducedOffersV1`**: Reduces the occurrence of order books that are blocked by reduced offers. [#4512](https://github.com/XRPLF/rippled/pull/4512)\n\n- Added WebSocket and RPC port info to `server_info` responses. [#4427](https://github.com/XRPLF/rippled/pull/4427)\n\n- Removed the deprecated `accepted`, `seqNum`, `hash`, and `totalCoins` fields from the `ledger` method. [#4244](https://github.com/XRPLF/rippled/pull/4244)\n\n\n### Bug Fixes and Performance Improvements\n(These are behind-the-scenes improvements, such as internal changes to the code, which are not expected to impact end users.)\n\n- Added a pre-commit hook that runs the clang-format linter locally before committing changes. To install this feature, see: [CONTRIBUTING](https://github.com/XRPLF/xrpl-dev-portal/blob/master/CONTRIBUTING.md). [#4599](https://github.com/XRPLF/rippled/pull/4599)\n\n- In order to make it more straightforward to catch and handle overflows: changed the output type of the `mulDiv()` function from `std::pair<bool, uint64_t>` to `std::optional`. [#4243](https://github.com/XRPLF/rippled/pull/4243)\n\n- Updated `Handler::Condition` enum values to make the code less brittle. [#4239](https://github.com/XRPLF/rippled/pull/4239)\n\n- Renamed `ServerHandlerImp` to `ServerHandler`. [#4516](https://github.com/XRPLF/rippled/pull/4516), [#4592](https://github.com/XRPLF/rippled/pull/4592)\n\n- Replaced hand-rolled code with `std::from_chars` for better maintainability. [#4473](https://github.com/XRPLF/rippled/pull/4473)\n\n- Removed an unused `TypedField` move constructor. [#4567](https://github.com/XRPLF/rippled/pull/4567)\n\n\n### Docs and Build System\n\n- Updated checkout versions to resolve warnings during GitHub jobs. [#4598](https://github.com/XRPLF/rippled/pull/4598)\n\n- Fixed an issue with the Debian package build. [#4591](https://github.com/XRPLF/rippled/pull/4591)\n\n- Updated build instructions with additional steps to take after updating dependencies. [#4623](https://github.com/XRPLF/rippled/pull/4623)\n\n- Updated contributing doc to clarify that beta releases should also be pushed to the `release` branch. [#4589](https://github.com/XRPLF/rippled/pull/4589)\n\n- Enabled the `BETA_RPC_API` flag in the default unit tests config, making the API v2 (beta) available to unit tests. [#4573](https://github.com/XRPLF/rippled/pull/4573)\n\n- Conan dependency management.\n  - Fixed package definitions for Conan. [#4485](https://github.com/XRPLF/rippled/pull/4485)\n  - Updated build dependencies to the most recent versions in Conan Center. [#4595](https://github.com/XRPLF/rippled/pull/4595)\n  - Updated Conan recipe for NuDB. [#4615](https://github.com/XRPLF/rippled/pull/4615)\n\n- Added binary hardening and linker flags to enhance security during the build process. [#4603](https://github.com/XRPLF/rippled/pull/4603)\n\n- Added an Artifactory to the `nix` workflow to improve build times. [#4556](https://github.com/XRPLF/rippled/pull/4556)\n\n- Added quality-of-life improvements to workflows, using new [concurrency control](https://docs.github.com/en/actions/using-jobs/using-concurrency) features. [#4597](https://github.com/XRPLF/rippled/pull/4597)\n\n\n[Full Commit Log](https://github.com/XRPLF/rippled/compare/1.11.0...1.12.0)\n\n\n### GitHub\n\nThe public source code repository for `rippled` is hosted on GitHub at <https://github.com/XRPLF/rippled>.\n\nWe welcome all contributions and invite everyone to join the community of XRP Ledger developers to help build the Internet of Value.\n\n\n## Credits\n\nThe following people contributed directly to this release:\n\n- Alphonse N. Mousse <39067955+a-noni-mousse@users.noreply.github.com>\n- Arihant Kothari <arihantkothari17@gmail.com>\n- Chenna Keshava B S <21219765+ckeshava@users.noreply.github.com>\n- Denis Angell <dangell@transia.co>\n- Ed Hennis <ed@ripple.com>\n- Elliot Lee <github.public@intelliot.com>\n- Gregory Tsipenyuk <gregtatcam@users.noreply.github.com>\n- Howard Hinnant <howard.hinnant@gmail.com>\n- Ikko Eltociear Ashimine <eltociear@gmail.com>\n- John Freeman <jfreeman08@gmail.com>\n- Manoj Doshi <mdoshi@ripple.com>\n- Mark Travis <mtravis@ripple.com>\n- Mayukha Vadari <mvadari@gmail.com>\n- Michael Legleux <legleux@users.noreply.github.com>\n- Peter Chen <34582813+PeterChen13579@users.noreply.github.com>\n- RichardAH <richard.holland@starstone.co.nz>\n- Rome Reginelli <rome@ripple.com>\n- Scott Schurr <scott@ripple.com>\n- Shawn Xie <35279399+shawnxie999@users.noreply.github.com>\n- drlongle <drlongle@gmail.com>\n\nBug Bounties and Responsible Disclosures:\n\nWe welcome reviews of the rippled code and urge researchers to responsibly disclose any issues they may find.\n\nTo report a bug, please send a detailed report to: <bugs@xrpl.org>\n\n\n# Introducing XRP Ledger version 1.11.0\n\nVersion 1.11.0 of `rippled`, the reference server implementation of the XRP Ledger protocol, is now available.\n\nThis release reduces memory usage, introduces the `fixNFTokenRemint` amendment, and adds new features and bug fixes. For example, the new NetworkID field in transactions helps to prevent replay attacks with side-chains.\n\n[Sign Up for Future Release Announcements](https://groups.google.com/g/ripple-server)\n\n<!-- BREAK -->\n\n## Action Required\n\nThe `fixNFTokenRemint` amendment is now open for voting according to the XRP Ledger's [amendment process](https://xrpl.org/amendments.html), which enables protocol changes following two weeks of >80% support from trusted validators.\n\nIf you operate an XRP Ledger server, upgrade to version 1.11.0 by July 5 to ensure service continuity. The exact time that protocol changes take effect depends on the voting decisions of the decentralized network.\n\n\n## Install / Upgrade\n\nOn supported platforms, see the [instructions on installing or updating `rippled`](https://xrpl.org/install-rippled.html).\n\n\n## What's Changed\n\n### New Features and Improvements\n\n* Allow port numbers be be specified using a either a colon or a space by @RichardAH in https://github.com/XRPLF/rippled/pull/4328\n* Eliminate memory allocation from critical path: by @nbougalis in https://github.com/XRPLF/rippled/pull/4353\n* Make it easy for projects to depend on libxrpl by @thejohnfreeman in https://github.com/XRPLF/rippled/pull/4449\n* Add the ability to mark amendments as obsolete by @ximinez in https://github.com/XRPLF/rippled/pull/4291\n* Always create the FeeSettings object in genesis ledger by @ximinez in https://github.com/XRPLF/rippled/pull/4319\n* Log exception messages in several locations by @drlongle in https://github.com/XRPLF/rippled/pull/4400\n* Parse flags in account_info method by @drlongle in https://github.com/XRPLF/rippled/pull/4459\n* Add NFTokenPages to account_objects RPC by @RichardAH in https://github.com/XRPLF/rippled/pull/4352\n* add jss fields used by clio `nft_info` by @ledhed2222 in https://github.com/XRPLF/rippled/pull/4320\n* Introduce a slab-based memory allocator and optimize SHAMapItem by @nbougalis in https://github.com/XRPLF/rippled/pull/4218\n* Add NetworkID field to transactions to help prevent replay attacks on and from side-chains by @RichardAH in https://github.com/XRPLF/rippled/pull/4370\n* If present, set quorum based on command line. by @mtrippled in https://github.com/XRPLF/rippled/pull/4489\n* API does not accept seed or public key for account by @drlongle in https://github.com/XRPLF/rippled/pull/4404\n* Add `nftoken_id`, `nftoken_ids` and `offer_id` meta fields into NFT `Tx` responses by @shawnxie999 in https://github.com/XRPLF/rippled/pull/4447\n\n### Bug Fixes\n\n* fix(gateway_balances): handle overflow exception by @RichardAH in https://github.com/XRPLF/rippled/pull/4355\n* fix(ValidatorSite): handle rare null pointer dereference in timeout by @ximinez in https://github.com/XRPLF/rippled/pull/4420\n* RPC commands understand markers derived from all ledger object types by @ximinez in https://github.com/XRPLF/rippled/pull/4361\n* `fixNFTokenRemint`: prevent NFT re-mint: by @shawnxie999 in https://github.com/XRPLF/rippled/pull/4406\n* Fix a case where ripple::Expected returned a json array, not a value by @scottschurr in https://github.com/XRPLF/rippled/pull/4401\n* fix: Ledger data returns an empty list (instead of null) when all entries are filtered out by @drlongle in https://github.com/XRPLF/rippled/pull/4398\n* Fix unit test ripple.app.LedgerData by @drlongle in https://github.com/XRPLF/rippled/pull/4484\n* Fix the fix for std::result_of by @thejohnfreeman in https://github.com/XRPLF/rippled/pull/4496\n* Fix errors for Clang 16 by @thejohnfreeman in https://github.com/XRPLF/rippled/pull/4501\n* Ensure that switchover vars are initialized before use: by @seelabs in https://github.com/XRPLF/rippled/pull/4527\n* Move faulty assert by @ximinez in https://github.com/XRPLF/rippled/pull/4533\n* Fix unaligned load and stores: (#4528) by @seelabs in https://github.com/XRPLF/rippled/pull/4531\n* fix node size estimation by @dangell7 in https://github.com/XRPLF/rippled/pull/4536\n* fix: remove redundant moves by @ckeshava in https://github.com/XRPLF/rippled/pull/4565\n\n### Code Cleanup and Testing\n\n* Replace compare() with the three-way comparison operator in base_uint, Issue and Book by @drlongle in https://github.com/XRPLF/rippled/pull/4411\n* Rectify the import paths of boost::function_output_iterator by @ckeshava in https://github.com/XRPLF/rippled/pull/4293\n* Expand Linux test matrix by @thejohnfreeman in https://github.com/XRPLF/rippled/pull/4454\n* Add patched recipe for SOCI by @thejohnfreeman in https://github.com/XRPLF/rippled/pull/4510\n* Switch to self-hosted runners for macOS by @thejohnfreeman in https://github.com/XRPLF/rippled/pull/4511\n* [TRIVIAL] Add missing includes by @seelabs in https://github.com/XRPLF/rippled/pull/4555\n\n### Docs\n\n* Refactor build instructions by @thejohnfreeman in https://github.com/XRPLF/rippled/pull/4381\n* Add install instructions for package managers by @thejohnfreeman in https://github.com/XRPLF/rippled/pull/4472\n* Fix typo by @solmsted in https://github.com/XRPLF/rippled/pull/4508\n* Update environment.md by @sappenin in https://github.com/XRPLF/rippled/pull/4498\n* Update BUILD.md by @oeggert in https://github.com/XRPLF/rippled/pull/4514\n* Trivial: add comments for NFToken-related invariants by @scottschurr in https://github.com/XRPLF/rippled/pull/4558\n\n## New Contributors\n* @drlongle made their first contribution in https://github.com/XRPLF/rippled/pull/4411\n* @ckeshava made their first contribution in https://github.com/XRPLF/rippled/pull/4293\n* @solmsted made their first contribution in https://github.com/XRPLF/rippled/pull/4508\n* @sappenin made their first contribution in https://github.com/XRPLF/rippled/pull/4498\n* @oeggert made their first contribution in https://github.com/XRPLF/rippled/pull/4514\n\n**Full Changelog**: https://github.com/XRPLF/rippled/compare/1.10.1...1.11.0\n\n\n### GitHub\n\nThe public source code repository for `rippled` is hosted on GitHub at <https://github.com/XRPLF/rippled>.\n\nWe welcome all contributions and invite everyone to join the community of XRP Ledger developers to help build the Internet of Value.\n\n### Credits\n\nThe following people contributed directly to this release:\n- Alloy Networks <45832257+alloynetworks@users.noreply.github.com>\n- Brandon Wilson <brandon@coil.com>\n- Chenna Keshava B S <21219765+ckeshava@users.noreply.github.com>\n- David Fuelling <sappenin@gmail.com>\n- Denis Angell <dangell@transia.co>\n- Ed Hennis <ed@ripple.com>\n- Elliot Lee <github.public@intelliot.com>\n- John Freeman <jfreeman08@gmail.com>\n- Mark Travis <mtrippled@users.noreply.github.com>\n- Nik Bougalis <nikb@bougalis.net>\n- RichardAH <richard.holland@starstone.co.nz>\n- Scott Determan <scott.determan@yahoo.com>\n- Scott Schurr <scott@ripple.com>\n- Shawn Xie <35279399+shawnxie999@users.noreply.github.com>\n- drlongle <drlongle@gmail.com>\n- ledhed2222 <ledhed2222@users.noreply.github.com>\n- oeggert <117319296+oeggert@users.noreply.github.com>\n- solmsted <steven.olm@gmail.com>\n\n\nBug Bounties and Responsible Disclosures:\nWe welcome reviews of the rippled code and urge researchers to\nresponsibly disclose any issues they may find.\n\nTo report a bug, please send a detailed report to:\n\n    bugs@xrpl.org\n\n\n# Introducing XRP Ledger version 1.10.1\n\nVersion 1.10.1 of `rippled`, the reference server implementation of the XRP Ledger protocol, is now available. This release restores packages for Ubuntu 18.04.\n\nCompared to version 1.10.0, the only C++ code change fixes an edge case in Reporting Mode.\n\nIf you are already running version 1.10.0, then upgrading to version 1.10.1 is generally not required.\n\n[Sign Up for Future Release Announcements](https://groups.google.com/g/ripple-server)\n\n<!-- BREAK -->\n\n## Install / Upgrade\n\nOn supported platforms, see the [instructions on installing or updating `rippled`](https://xrpl.org/install-rippled.html).\n\n## Changelog\n\n- [`da18c86cbf`](https://github.com/ripple/rippled/commit/da18c86cbfea1d8fe6940035f9103e15890d47ce) Build packages with Ubuntu 18.04\n- [`f7b3ddd87b`](https://github.com/ripple/rippled/commit/f7b3ddd87b8ef093a06ab1420bea57ed1e77643a) Reporting Mode: Do not attempt to acquire missing data from peer network (#4458)\n\n### GitHub\n\nThe public source code repository for `rippled` is hosted on GitHub at <https://github.com/XRPLF/rippled>.\n\nWe welcome all contributions and invite everyone to join the community of XRP Ledger developers to help build the Internet of Value.\n\n### Credits\n\nThe following people contributed directly to this release:\n\n- John Freeman <jfreeman08@gmail.com>\n- Mark Travis <mtrippled@users.noreply.github.com>\n- Michael Legleux <mlegleux@ripple.com>\n\nBug Bounties and Responsible Disclosures:\nWe welcome reviews of the rippled code and urge researchers to\nresponsibly disclose any issues they may find.\n\nTo report a bug, please send a detailed report to:\n\n    bugs@xrpl.org\n\n\n# Introducing XRP Ledger version 1.10.0\n\nVersion 1.10.0 of `rippled`, the reference server implementation of the XRP Ledger protocol, is now available. This release introduces six new amendments, detailed below, and cleans up code to improve performance.\n\n[Sign Up for Future Release Announcements](https://groups.google.com/g/ripple-server)\n\n<!-- BREAK -->\n\n## Action Required\n\nSix new amendments are now open for voting according to the XRP Ledger's [amendment process](https://xrpl.org/amendments.html), which enables protocol changes following two weeks of >80% support from trusted validators.\n\nIf you operate an XRP Ledger server, upgrade to version 1.10.0 by March 21 to ensure service continuity. The exact time that protocol changes take effect depends on the voting decisions of the decentralized network.\n\n\n## Install / Upgrade\n\nOn supported platforms, see the [instructions on installing or updating `rippled`](https://xrpl.org/install-rippled.html).\n\n\n## New Amendments\n\n- **`featureImmediateOfferKilled`**: Changes the response code of an `OfferCreate` transaction with the `tfImmediateOrCancel` flag to return `tecKILLED` when no funds are moved. The previous return code of `tecSUCCESS` was unintuitive. [#4157](https://github.com/XRPLF/rippled/pull/4157)\n\n- **`featureDisallowIncoming`**: Enables an account to block incoming checks, payment channels, NFToken offers, and trust lines. [#4336](https://github.com/XRPLF/rippled/pull/4336)\n\n- **`featureXRPFees`**: Simplifies transaction cost calculations to use XRP directly, rather than calculating indirectly in \"fee units\" and translating the results to XRP. Updates all instances of \"fee units\" in the protocol and ledger data to be drops of XRP instead. [#4247](https://github.com/XRPLF/rippled/pull/4247) \n\n- **`fixUniversalNumber`**: Simplifies and unifies the code for decimal floating point math. In some cases, this provides slightly better accuracy than the previous code, resulting in calculations whose least significant digits are different than when calculated with the previous code. The different results may cause other edge case differences where precise calculations are used, such as ranking of offers or processing of payments that use several different paths. [#4192](https://github.com/XRPLF/rippled/pull/4192)\n\n- **`fixNonFungibleTokensV1_2`**: This amendment is a combination of NFToken fixes. [#4417](https://github.com/XRPLF/rippled/pull/4417)\n  - Fixes unburnable NFTokens when it has over 500 offers. [#4346](https://github.com/XRPLF/rippled/pull/4346)\n  - Fixes 3 NFToken offer acceptance issues. [#4380](https://github.com/XRPLF/rippled/pull/4380)\n  - Prevents brokered sales of NFTokens to owners. [#4403](https://github.com/XRPLF/rippled/pull/4403)\n  - Only allows the destination to settle NFToken offers through brokerage. [#4399](https://github.com/XRPLF/rippled/pull/4399)\n\n- **`fixTrustLinesToSelf`**: Trust lines must be between two different accounts, but two exceptions exist because of a bug that briefly existed. This amendment removes those trust lines. [69bb2be](https://github.com/XRPLF/rippled/pull/4270/commits/69bb2be446e3cc24c694c0835b48bd2ecd3d119e)\n\n\n## Changelog\n\n\n### New Features and Improvements\n\n- **Improve Handshake in the peer protocol**: Switched to using a cryptographically secure PRNG for the Instance Cookie. `rippled` now uses hex encoding for the `Closed-Ledger` and `Previous-Ledger` fields in the Handshake. Also added `--newnodeid` and `--nodeid` command line options. [5a15229](https://github.com/XRPLF/rippled/pull/4270/commits/5a15229eeb13b69c8adf1f653b88a8f8b9480546)\n\n- **RPC tooBusy response now has 503 HTTP status code**: Added ripplerpc 3.0, enabling RPC tooBusy responses to return relevant HTTP status codes. This is a non-breaking change that only applies to JSON-RPC when you include `\"ripplerpc\": \"3.0\"` in the request. [#4143](https://github.com/XRPLF/rippled/pull/4143)\n\n- **Use the Conan package manager**: Added a `conanfile.py` and Conan recipe for Snappy. Removed the RocksDB recipe from the repo; you can now get it from Conan Center. [#4367](https://github.com/XRPLF/rippled/pull/4367), [c2b03fe](https://github.com/XRPLF/rippled/commit/c2b03fecca19a304b37467b01fa78593d3dce3fb)\n\n- **Update Build Instructions**: Updated the build instructions to build with the Conan package manager and restructured info for easier comprehension. [#4376](https://github.com/XRPLF/rippled/pull/4376), [#4383](https://github.com/XRPLF/rippled/pull/4383)\n\n- **Revise CONTRIBUTING**: Updated code contribution guidelines. `rippled` is an open source project and contributions are very welcome. [#4382](https://github.com/XRPLF/rippled/pull/4382)\n\n- **Update documented pathfinding configuration defaults**: `417cfc2` changed the default Path Finding configuration values, but missed updating the values documented in rippled-example.cfg. Updated those defaults and added recommended values for nodes that want to support advanced pathfinding. [#4409](https://github.com/XRPLF/rippled/pull/4409)\n\n- **Remove gRPC code previously used for the Xpring SDK**: Removed gRPC code used for the Xpring SDK. The gRPC API is also enabled locally by default in `rippled-example.cfg`. This API is used for [Reporting Mode](https://xrpl.org/build-run-rippled-in-reporting-mode.html) and [Clio](https://github.com/XRPLF/clio). [28f4cc7](https://github.com/XRPLF/rippled/pull/4321/commits/28f4cc7817c2e477f0d7e9ade8f07a45ff2b81f1)\n\n- **Switch from C++17 to C++20**: Updated `rippled` to use C++20. [92d35e5](https://github.com/XRPLF/rippled/pull/4270/commits/92d35e54c7de6bbe44ff6c7c52cc0765b3f78258)\n\n- **Support for Boost 1.80.0:**: [04ef885](https://github.com/XRPLF/rippled/pull/4321/commits/04ef8851081f6ee9176783ad3725960b8a931ebb)\n\n- **Reduce default reserves to 10/2**: Updated the hard-coded default reserves to match the current settings on Mainnet. [#4329](https://github.com/XRPLF/rippled/pull/4329)\n\n- **Improve self-signed certificate generation**: Improved speed and security of TLS certificate generation on fresh startup. [0ecfc7c](https://github.com/XRPLF/rippled/pull/4270/commits/0ecfc7cb1a958b731e5f184876ea89ae2d4214ee)\n\n\n### Bug Fixes\n\n- **Update command-line usage help message**: Added `manifest` and `validator_info` to the `rippled` CLI usage statement. [b88ed5a](https://github.com/XRPLF/rippled/pull/4270/commits/b88ed5a8ec2a0735031ca23dc6569d54787dc2f2)\n\n- **Work around gdb bug by changing a template parameter**: Added a workaround for a bug in gdb, where unsigned template parameters caused issues with RTTI. [#4332](https://github.com/XRPLF/rippled/pull/4332)\n\n- **Fix clang 15 warnings**: [#4325](https://github.com/XRPLF/rippled/pull/4325)\n\n- **Catch transaction deserialization error in doLedgerGrpc**: Fixed an issue in the gRPC API, so `Clio` can extract ledger headers and state objects from specific transactions that can't be deserialized by `rippled` code. [#4323](https://github.com/XRPLF/rippled/pull/4323)\n\n- **Update dependency: gRPC**: New Conan recipes broke the old version of gRPC, so the dependency was updated. [#4407](https://github.com/XRPLF/rippled/pull/4407)\n\n- **Fix Doxygen workflow**: Added options to build documentation that don't depend on the library dependencies of `rippled`. [#4372](https://github.com/XRPLF/rippled/pull/4372)\n\n- **Don't try to read SLE with key 0 from the ledger**: Fixed the `preclaim` function to check for 0 in `NFTokenSellOffer` and `NFTokenBuyOffer` before calling `Ledger::read`. This issue only affected debug builds. [#4351](https://github.com/XRPLF/rippled/pull/4351)\n\n- **Update broken link to hosted Doxygen content**: [5e1cb09](https://github.com/XRPLF/rippled/pull/4270/commits/5e1cb09b8892e650f6c34a66521b6b1673bd6b65)\n\n\n### Code Cleanup\n\n- **Prevent unnecessary `shared_ptr` copies by accepting a value in `SHAMapInnerNode::setChild`**: [#4266](https://github.com/XRPLF/rippled/pull/4266)\n\n- **Release TaggedCache object memory outside the lock**: [3726f8b](https://github.com/XRPLF/rippled/pull/4321/commits/3726f8bf31b3eab8bab39dce139656fd705ae9a0)\n\n- **Rename SHAMapStoreImp::stopping() to healthWait()**: [7e9e910](https://github.com/XRPLF/rippled/pull/4321/commits/7e9e9104eabbf0391a0837de5630af17a788e233)\n\n- **Improve wrapper around OpenSSL RAND**: [7b3507b](https://github.com/XRPLF/rippled/pull/4270/commits/7b3507bb873495a974db33c57a888221ddabcacc)\n\n- **Improve AccountID string conversion caching**: Improved memory cache usage. [e2eed96](https://github.com/XRPLF/rippled/pull/4270/commits/e2eed966b0ecb6445027e6a023b48d702c5f4832)\n\n- **Build the command map at compile time**: [9aaa0df](https://github.com/XRPLF/rippled/pull/4270/commits/9aaa0dff5fd422e5f6880df8e20a1fd5ad3b4424)\n\n- **Avoid unnecessary copying and dynamic memory allocations**: [d318ab6](https://github.com/XRPLF/rippled/pull/4270/commits/d318ab612adc86f1fd8527a50af232f377ca89ef)\n\n- **Use constexpr to check memo validity**: [e67f905](https://github.com/XRPLF/rippled/pull/4270/commits/e67f90588a9050162881389d7e7d1d0fb31066b0)\n\n- **Remove charUnHex**: [83ac141](https://github.com/XRPLF/rippled/pull/4270/commits/83ac141f656b1a95b5661853951ebd95b3ffba99)\n\n- **Remove deprecated AccountTxOld.cpp**: [ce64f7a](https://github.com/XRPLF/rippled/pull/4270/commits/ce64f7a90f99c6b5e68d3c3d913443023de061a6)\n\n- **Remove const_cast usage**: [23ce431](https://github.com/XRPLF/rippled/pull/4321/commits/23ce4318768b718c82e01004d23f1abc9a9549ff)\n\n- **Remove inaccessible code paths and outdated data format wchar_t**: [95fabd5](https://github.com/XRPLF/rippled/pull/4321/commits/95fabd5762a4917753c06268192e4d4e4baef8e4)\n\n- **Improve move semantics in Expected**: [#4326](https://github.com/XRPLF/rippled/pull/4326)\n\n\n### GitHub\n\nThe public source code repository for `rippled` is hosted on GitHub at <https://github.com/XRPLF/rippled>.\n\nWe welcome all contributions and invite everyone to join the community of XRP Ledger developers to help build the Internet of Value.\n\n### Credits\n\nThe following people contributed directly to this release:\n\n- Alexander Kremer <akremer@ripple.com>\n- Alloy Networks <45832257+alloynetworks@users.noreply.github.com>\n- CJ Cobb <46455409+cjcobb23@users.noreply.github.com>\n- Chenna Keshava B S <ckbs.keshava56@gmail.com>\n- Crypto Brad Garlinghouse <cryptobradgarlinghouse@protonmail.com>\n- Denis Angell <dangell@transia.co>\n- Ed Hennis <ed@ripple.com>\n- Elliot Lee <github.public@intelliot.com>\n- Gregory Popovitch <greg7mdp@gmail.com>\n- Howard Hinnant <howard.hinnant@gmail.com>\n- J. Scott Branson <18340247+crypticrabbit@users.noreply.github.com>\n- John Freeman <jfreeman08@gmail.com>\n- ledhed2222 <ledhed2222@users.noreply.github.com>\n- Levin Winter <33220502+levinwinter@users.noreply.github.com>\n- manojsdoshi <mdoshi@ripple.com>\n- Nik Bougalis <nikb@bougalis.net>\n- RichardAH <richard.holland@starstone.co.nz>\n- Scott Determan <scott.determan@yahoo.com>\n- Scott Schurr <scott@ripple.com>\n- Shawn Xie <35279399+shawnxie999@users.noreply.github.com>\n\nSecurity Bug Bounty Acknowledgements:\n- Aaron Hook\n- Levin Winter\n\nBug Bounties and Responsible Disclosures:\nWe welcome reviews of the rippled code and urge researchers to\nresponsibly disclose any issues they may find.\n\nTo report a bug, please send a detailed report to:\n\n    bugs@xrpl.org\n\n\n# Introducing XRP Ledger version 1.9.4\n\nVersion 1.9.4 of `rippled`, the reference implementation of the XRP Ledger protocol is now available. This release introduces an amendment that removes the ability for an NFT issuer to indicate that trust lines should be automatically created for royalty payments from secondary sales of NFTs, in response to a bug report that indicated how this functionality could be abused to mount a denial of service attack against the issuer.\n\n## Action Required\n\nThis release introduces a new amendment to the XRP Ledger protocol, **`fixRemoveNFTokenAutoTrustLine`** to mitigate a potential denial-of-service attack against NFT issuers that minted NFTs and allowed secondary trading of those NFTs to create trust lines for any asset.\n\nThis amendment is open for voting according to the XRP Ledger's [amendment process](https://xrpl.org/amendments.html), which enables protocol changes following two weeks of >80% support from trusted validators.\n\nIf you operate an XRP Ledger server, then you should upgrade to version 1.9.4 within two weeks, to ensure service continuity. The exact time that protocol changes take effect depends on the voting decisions of the decentralized network.\n\nFor more information about NFTs on the XRP Ledger, see [NFT Conceptual Overview](https://xrpl.org/nft-conceptual-overview.html).\n\n\n## Install / Upgrade\n\nOn supported platforms, see the [instructions on installing or updating `rippled`](https://xrpl.org/install-rippled.html).\n\n## Changelog\n\n## Contributions\n\nThe primary change in this release is the following bug fix:\n\n- **Introduce fixRemoveNFTokenAutoTrustLine amendment**: Introduces the `fixRemoveNFTokenAutoTrustLine` amendment, which disables the `tfTrustLine` flag, which a malicious attacker could exploit to mount denial-of-service attacks against NFT issuers that specified the flag on their NFTs. ([#4301](https://github.com/XRPLF/rippled/4301))\n\n\n### GitHub\n\nThe public source code repository for `rippled` is hosted on GitHub at <https://github.com/XRPLF/rippled>.\n\nWe welcome all contributions and invite everyone to join the community of XRP Ledger developers and help us build the Internet of Value.\n\n### Credits\n\nThe following people contributed directly to this release:\n\n- Scott Schurr <scott@ripple.com>\n- Howard Hinnant <howard@ripple.com>\n- Scott Determan <scott.determan@yahoo.com>\n- Ikko Ashimine <eltociear@gmail.com>\n\n\n# Introducing XRP Ledger version 1.9.3\n\nVersion 1.9.3 of `rippled`, the reference server implementation of the XRP Ledger protocol is now available. This release corrects minor technical flaws with the code that loads configured amendment votes after a startup and the copy constructor of `PublicKey`.\n\n## Install / Upgrade\n\nOn supported platforms, see the [instructions on installing or updating `rippled`](https://xrpl.org/install-rippled.html).\n\n## Changelog\n\n## Contributions\n\nThis release contains the following bug fixes:\n\n- **Change by-value to by-reference to persist vote**: A minor technical flaw, caused by use of a copy instead of a reference, resulted in operator-configured \"yes\" votes to not be properly loaded after a restart. ([#4256](https://github.com/XRPLF/rippled/pull/4256))\n- **Properly handle self-assignment of PublicKey**: The `PublicKey` copy assignment operator mishandled the case where a `PublicKey` would be assigned to itself, and could result in undefined behavior. \n\n### GitHub\n\nThe public source code repository for `rippled` is hosted on GitHub at <https://github.com/XRPLF/rippled>.\n\nWe welcome contributions, big and small, and invite everyone to join the community of XRP Ledger developers and help us build the Internet of Value.\n\n### Credits\n\nThe following people contributed directly to this release:\n\n- Howard Hinnant <howard@ripple.com>\n- Crypto Brad Garlinghouse <cryptobradgarlinghouse@protonmail.com>\n- Wo Jake <87929946+wojake@users.noreply.github.com>\n\n\n# Introducing XRP Ledger version 1.9.2\n\nVersion 1.9.2 of `rippled`, the reference server implementation of the XRP Ledger protocol, is now available. This release includes several fixes and improvements, including a second new fix amendment to correct a bug in Non-Fungible Tokens (NFTs) code, a new API method for order book changes, less noisy logging, and other small fixes.\n\n<!-- BREAK -->\n\n\n## Action Required\n\nThis release introduces a two new amendments to the XRP Ledger protocol. The first, **fixNFTokenNegOffer**, fixes a bug in code associated with the **NonFungibleTokensV1** amendment, originally introduced in [version 1.9.0](https://xrpl.org/blog/2022/rippled-1.9.0.html). The second, **NonFungibleTokensV1_1**, is a \"roll-up\" amendment that enables the **NonFungibleTokensV1** feature plus the two fix amendments associated with it, **fixNFTokenDirV1** and **fixNFTokenNegOffer**.\n\nIf you want to enable NFT code on the XRP Ledger Mainnet, you can vote in favor of only the **NonFungibleTokensV1_1** amendment to support enabling the feature and fixes together, without risk that the unfixed NFT code may become enabled first.\n\nThese amendments are now open for voting according to the XRP Ledger's [amendment process](https://xrpl.org/amendments.html), which enables protocol changes following two weeks of >80% support from trusted validators.\n\nIf you operate an XRP Ledger server, then you should upgrade to version 1.9.2 within two weeks, to ensure service continuity. The exact time that protocol changes take effect depends on the voting decisions of the decentralized network.\n\nFor more information about NFTs on the XRP Ledger, see [NFT Conceptual Overview](https://xrpl.org/nft-conceptual-overview.html).\n\n## Install / Upgrade\n\nOn supported platforms, see the [instructions on installing or updating `rippled`](https://xrpl.org/install-rippled.html).\n\n## Changelog\n\nThis release contains the following features and improvements.\n\n- **Introduce fixNFTokenNegOffer amendment.** This amendment fixes a bug in the Non-Fungible Tokens (NFTs) functionality provided by the NonFungibleTokensV1 amendment (not currently enabled on Mainnet). The bug allowed users to place offers to buy tokens for negative amounts of money when using Brokered Mode. Anyone who accepted such an offer would transfer the token _and_ pay money. This amendment explicitly disallows offers to buy or sell NFTs for negative amounts of money, and returns an appropriate error code. This also corrects the error code returned when placing offers to buy or sell NFTs for negative amounts in Direct Mode. ([8266d9d](https://github.com/XRPLF/rippled/commit/8266d9d598d19f05e1155956b30ca443c27e119e))\n- **Introduce `NonFungibleTokensV1_1` amendment.** This amendment encompasses three NFT-related amendments: the original NonFungibleTokensV1 amendment (from version 1.9.0), the fixNFTokenDirV1 amendment (from version 1.9.1), and the new fixNFTokenNegOffer amendment from this release. This amendment contains no changes other than enabling those three amendments together; this allows validators to vote in favor of _only_ enabling the feature and fixes at the same time. ([59326bb](https://github.com/XRPLF/rippled/commit/59326bbbc552287e44b3a0d7b8afbb1ddddb3e3b))\n- **Handle invalid port numbers.** If the user specifies a URL with an invalid port number, the server would silently attempt to use port 0 instead. Now it raises an error instead. This affects admin API methods and config file parameters for downloading history shards and specifying validator list sites. ([#4213](https://github.com/XRPLF/rippled/pull/4213))\n- **Reduce log noisiness.** Decreased the severity of benign log messages in several places: \"addPathsForType\" messages during regular operation, expected errors during unit tests, and missing optional documentation components when compiling from source. ([#4178](https://github.com/XRPLF/rippled/pull/4178), [#4166](https://github.com/XRPLF/rippled/pull/4166), [#4180](https://github.com/XRPLF/rippled/pull/4180))\n- **Fix race condition in history shard implementation and support clang's ThreadSafetyAnalysis tool.**  Added build settings so that developers can use this feature of the clang compiler to analyze the code for correctness, and fix an error found by this tool, which was the source of rare crashes in unit tests. ([#4188](https://github.com/XRPLF/rippled/pull/4188))\n- **Prevent crash when rotating a database with missing data.** When rotating databases, a missing entry could cause the server to crash. While there should never be a missing database entry, this change keeps the server running by aborting database rotation. ([#4182](https://github.com/XRPLF/rippled/pull/4182))\n- **Fix bitwise comparison in OfferCreate.** Fixed an expression that incorrectly used a bitwise comparison for two boolean values rather than a true boolean comparison. The outcome of the two comparisons is equivalent, so this is not a transaction processing change, but the bitwise comparison relied on compilers to implicitly fix the expression. ([#4183](https://github.com/XRPLF/rippled/pull/4183))\n- **Disable cluster timer when not in a cluster.** Disabled a timer that was unused on servers not running in clustered mode. The functionality of clustered servers is unchanged. ([#4173](https://github.com/XRPLF/rippled/pull/4173))\n- **Limit how often to process peer discovery messages.** In the peer-to-peer network, servers periodically share IP addresses of their peers with each other to facilitate peer discovery. It is not necessary to process these types of messages too often; previously, the code tracked whether it needed to process new messages of this type but always processed them anyway. With this change, the server no longer processes peer discovery messages if it has done so recently. ([#4202](https://github.com/XRPLF/rippled/pull/4202))\n- **Improve STVector256 deserialization.** Optimized the processing of this data type in protocol messages. This data type is used in several types of ledger entry that are important for bookkeeping, including directory pages that track other ledger types, amendments tracking, and the ledger hashes history. ([#4204](https://github.com/XRPLF/rippled/pull/4204))\n- **Fix and refactor spinlock code.** The spinlock code, which protects the `SHAMapInnerNode` child lists, had a mistake that allowed the same child to be repeatedly locked under some circumstances. Fixed this bug and improved the spinlock code to make it easier to use correctly and easier to verify that the code works correctly. ([#4201](https://github.com/XRPLF/rippled/pull/4201))\n- **Improve comments and contributor documentation.** Various minor documentation changes including some to reflect the fact that the source code repository is now owned by the XRP Ledger Foundation. ([#4214](https://github.com/XRPLF/rippled/pull/4214), [#4179](https://github.com/XRPLF/rippled/pull/4179), [#4222](https://github.com/XRPLF/rippled/pull/4222))\n- **Introduces a new API book_changes to provide information in a format that is useful for building charts that highlight DEX activity at a per-ledger level.**  ([#4212](https://github.com/XRPLF/rippled/pull/4212))\n\n## Contributions\n\n### GitHub\n\nThe public source code repository for `rippled` is hosted on GitHub at <https://github.com/XRPLF/rippled>.\n\nWe welcome contributions, big and small, and invite everyone to join the community of XRP Ledger developers and help us build the Internet of Value.\n\n### Credits\n\nThe following people contributed directly to this release:\n\n- Chenna Keshava B S <ckbs.keshava56@gmail.com>\n- Ed Hennis <ed@ripple.com>\n- Ikko Ashimine <eltociear@gmail.com>\n- Nik Bougalis <nikb@bougalis.net>\n- Richard Holland <richard.holland@starstone.co.nz>\n- Scott Schurr <scott@ripple.com>\n- Scott Determan <scott.determan@yahoo.com>\n\nFor a real-time view of all lifetime contributors, including links to the commits made by each, please visit the \"Contributors\" section of the GitHub repository: <https://github.com/XRPLF/rippled/graphs/contributors>.\n\n# Introducing XRP Ledger version 1.9.1\n\nVersion 1.9.1 of `rippled`, the reference server implementation of the XRP Ledger protocol, is now available. This release includes several important fixes, including a fix for a syncing issue from 1.9.0, a new fix amendment to correct a bug in the new Non-Fungible Tokens (NFTs) code, and a new amendment to allow multi-signing by up to 32 signers.\n\n<!-- BREAK -->\n\n\n## Action Required\n\nThis release introduces two new amendments to the XRP Ledger protocol. These amendments are now open for voting according to the XRP Ledger's [amendment process](https://xrpl.org/amendments.html), which enables protocol changes following two weeks of >80% support from trusted validators.\n\nIf you operate an XRP Ledger server, then you should upgrade to version 1.9.1 within two weeks, to ensure service continuity. The exact time that protocol changes take effect depends on the voting decisions of the decentralized network.\n\nThe **fixNFTokenDirV1** amendment fixes a bug in code associated with the **NonFungibleTokensV1** amendment, so the fixNFTokenDirV1 amendment should be enabled first. All validator operators are encouraged to [configure amendment voting](https://xrpl.org/configure-amendment-voting.html) to oppose the NonFungibleTokensV1 amendment until _after_ the fixNFTokenDirV1 amendment has become enabled. For more information about NFTs on the XRP Ledger, see [NFT Conceptual Overview](https://xrpl.org/nft-conceptual-overview.html).\n\nThe **ExpandedSignerList** amendment extends the ledger's built-in multi-signing functionality so that each list can contain up to 32 entries instead of the current limit of 8. Additionally, this amendment allows each signer to have an arbitrary 256-bit data field associated with it. This data can be used to identify the signer or provide other metadata that is useful for organizations, smart contracts, or other purposes.\n\n## Install / Upgrade\n\nOn supported platforms, see the [instructions on installing or updating `rippled`](https://xrpl.org/install-rippled.html).\n\n## Changelog\n\nThis release contains the following features and improvements.\n\n## New Features and Amendments\n\n- **Introduce fixNFTokenDirV1 Amendment** - This amendment fixes an off-by-one error that occurred in some corner cases when determining which `NFTokenPage` an `NFToken` object belongs on. It also adjusts the constraints of `NFTokenPage` invariant checks, so that certain error cases fail with a suitable error code such as `tecNO_SUITABLE_TOKEN_PAGE` instead of failing with a `tecINVARIANT_FAILED` error code. ([#4155](https://github.com/ripple/rippled/pull/4155))\n\n- **Introduce ExpandedSignerList Amendment** - This amendment expands the maximum signer list size to 32 entries and allows each signer to have an optional 256-bit `WalletLocator` field containing arbitrary data. ([#4097](https://github.com/ripple/rippled/pull/4097))\n\n- **Pause online deletion rather than canceling it if the server fails health check** - The server stops performing online deletion of old ledger history if the server fails its internal health check during this time. Online deletion can now resume after the server recovers, rather than having to start over. ([#4139](https://github.com/ripple/rippled/pull/4139))\n\n\n## Bug Fixes and Performance Improvements\n\n- **Fix performance issues introduced in 1.9.0** - Readjusts some parameters of the ledger acquisition engine to revert some changes introduced in 1.9.0 that had adverse effects on some systems, including causing some systems to fail to sync to the network. ([#4152](https://github.com/ripple/rippled/pull/4152))\n\n- **Improve Memory Efficiency of Path Finding** - Finding paths for cross-currency payments is a resource-intensive operation. While that remains true, this fix improves memory usage of pathfinding by discarding trust line results that cannot be used before those results are fully loaded or cached. ([#4111](https://github.com/ripple/rippled/pull/4111))\n\n- **Fix incorrect CMake behavior on Windows when platform is unspecified or x64** - Fixes handling of platform selection when using the cmake-gui tool to build on Windows. The generator expects `Win64` but the GUI only provides `x64` as an option, which raises an error. This fix only raises an error if the platform is `Win32` instead, allowing the generation of solution files to succeed. ([#4150](https://github.com/ripple/rippled/pull/4150))\n\n- **Fix test failures with newer MSVC compilers on Windows** - Fixes some cases where the API handler code used string pointer comparisons, which may not work correctly with some versions of the MSVC compiler. ([#4149](https://github.com/ripple/rippled/pull/4149))\n\n- **Update minimum Boost version to 1.71.0** - This release is compatible with Boost library versions 1.71.0 through 1.77.0. The build configuration and documentation have been updated to reflect this. ([#4134](https://github.com/ripple/rippled/pull/4134))\n\n- **Fix unit test failures for DatabaseDownloader** - Increases a timeout in the `DatabaseDownloader` code and adjusts unit tests so that the code does not return spurious failures, and more data is logged if it does fail. ([#4021](https://github.com/ripple/rippled/pull/4021))\n\n- **Refactor relational database interface** - Improves code comments, naming, and organization of the module that interfaces with relational databases (such as the SQLite database used for tracking transaction history). ([#3965](https://github.com/ripple/rippled/pull/3965))\n\n\n## Contributions\n\n### GitHub\n\nThe public source code repository for `rippled` is hosted on GitHub at <https://github.com/ripple/rippled>.\n\nWe welcome contributions, big and small, and invite everyone to join the community of XRP Ledger developers and help us build the Internet of Value.\n\n\n### Credits\n\nThe following people contributed directly to this release:\n\n- Devon White <dwhite@ripple.com>\n- Ed Hennis <ed@ripple.com>\n- Gregory Popovitch <greg7mdp@gmail.com>\n- Mark Travis <mtravis@ripple.com>\n- Manoj Doshi <mdoshi@ripple.com>\n- Nik Bougalis <nikb@bougalis.net>\n- Richard Holland <richard.holland@starstone.co.nz>\n- Scott Schurr <scott@ripple.com>\n\nFor a real-time view of all lifetime contributors, including links to the commits made by each, please visit the \"Contributors\" section of the GitHub repository: <https://github.com/ripple/rippled/graphs/contributors>.\n\nWe welcome external contributions and are excited to see the broader XRP Ledger community continue to grow and thrive.\n\n\n# Change log\n\n- API version 2 will now return `signer_lists` in the root of the `account_info` response, no longer nested under `account_data`.\n\n# Releases\n\n## Version 1.9.0\nThis is the 1.9.0 release of `rippled`, the reference implementation of the XRP Ledger protocol. This release brings several features and improvements.\n\n### New and Improved Features\n- **Introduce NFT support (XLS020):** This release introduces support for non-fungible tokens, currently available to the developer community for broader review and testing.  Developers can create applications that allow users to mint, transfer, and ultimately burn (if desired) NFTs on the XRP Ledger. You can try out the new NFT transactions using the [nft-devnet](https://xrpl.org/xrp-testnet-faucet.html). Note that some fields and error codes from earlier releases of the supporting code have been refactored for this release, shown in the Code Refactoring section, below. [70779f](https://github.com/ripple/rippled/commit/70779f6850b5f33cdbb9cf4129bc1c259af0013e)\n\n- **Simplify the Job Queue:** This is a refactor aimed at cleaning up and simplifying the existing job queue. Currently, all jobs are canceled at the same time and in the same way, so this commit removes the unnecessary per-job cancellation token. [#3656](https://github.com/ripple/rippled/pull/3656)\n\n- **Optimize trust line caching:** The existing trust line caching code was suboptimal in that it stored redundant information, pinned SLEs into memory, and required multiple memory allocations per cached object. This commit eliminates redundant data, reduces the size of cached objects and unpinning SLEs from memory, and uses value types to avoid the need for `std::shared_ptr`. As a result of these changes, the effective size of a cached object includes the overhead of the memory allocator, and the `std::shared_ptr` should be reduced by at least 64 bytes. This is significant, as there can easily be tens of millions of these objects. [4d5459](https://github.com/ripple/rippled/commit/4d5459d041da8f5a349c5f458d664e5865e1f1b5)\n\n- **Incremental improvements to pathfinding memory usage:** This commit aborts background pathfinding when closed or disconnected, exits the pathfinding job thread if there are no requests left, does not create the path find a job if there are no requests, and refactors to remove the circular dependency between InfoSub and PathRequest. [#4111](https://github.com/ripple/rippled/pull/4111)\n\n- **Improve deterministic transaction sorting in TxQ:** This commit ensures that transactions with the same fee level are sorted by TxID XORed with the parent ledger hash, the TxQ is re-sorted after every ledger, and attempts to future-proof the TxQ tie-breaking test. [#4077](https://github.com/ripple/rippled/pull/4077)\n\n- **Improve stop signaling for Application:** [34ca45](https://github.com/ripple/rippled/commit/34ca45713244d0defc39549dd43821784b2a5c1d)\n\n- **Eliminate SHAMapInnerNode lock contention:** The `SHAMapInnerNode` class had a global mutex to protect the array of node children. Profiling suggested that around 4% of all attempts to lock the global would block. This commit removes that global mutex, and replaces it with a new per-node 16-way spinlock (implemented so as not to affect the size of an inner node object), effectively eliminating the lock contention. [1b9387](https://github.com/ripple/rippled/commit/1b9387eddc1f52165d3243d2ace9be0c62495eea)\n\n- **Improve ledger-fetching logic:** When fetching ledgers, the existing code would isolate the peer that sent the most useful responses, and issue follow-up queries only to that peer. This commit increases the query aggressiveness, and changes the mechanism used to select which peers to issue follow-up queries to so as to more evenly spread the load among those peers that provided useful responses. [48803a](https://github.com/ripple/rippled/commit/48803a48afc3bede55d71618c2ee38fd9dbfd3b0)\n\n- **Simplify and improve order book tracking:** The order book tracking code would use `std::shared_ptr` to track the lifetime of objects. This commit changes the logic to eliminate the overhead of `std::shared_ptr` by using value types, resulting in significant memory savings. [b9903b](https://github.com/ripple/rippled/commit/b9903bbcc483a384decf8d2665f559d123baaba2)\n\n- **Negative cache support for node store:** This commit allows the cache to service requests for nodes that were previously looked up but not found, reducing the need to perform I/O in several common scenarios. [3eb8aa](https://github.com/ripple/rippled/commit/3eb8aa8b80bd818f04c99cee2cfc243192709667)\n\n- **Improve asynchronous database handlers:** This commit optimizes the way asynchronous node store operations are processed, both by reducing the number of times locks are held and by minimizing the number of memory allocations and data copying. [6faaa9](https://github.com/ripple/rippled/commit/6faaa91850d6b2eb9fbf16c1256bf7ef11ac4646)\n\n- **Cleanup AcceptedLedger and AcceptedLedgerTx:** This commit modernizes the `AcceptedLedger` and `AcceptedLedgerTx` classes, reduces their memory footprint, and reduces unnecessary dynamic memory allocations. [8f5868](https://github.com/ripple/rippled/commit/8f586870917818133924bf2e11acab5321c2b588)\n\n### Code Refactoring\n\nThis release includes name changes in the NFToken API for SFields, RPC return labels, and error codes for clarity and consistency. To refactor your code, migrate the names of these items to the new names as listed below.\n \n#### `SField` name changes:\n* `TokenTaxon -> NFTokenTaxon`\n* `MintedTokens -> MintedNFTokens`\n* `BurnedTokens -> BurnedNFTokens`\n* `TokenID -> NFTokenID`\n* `TokenOffers -> NFTokenOffers`\n* `BrokerFee -> NFTokenBrokerFee`\n* `Minter -> NFTokenMinter`\n* `NonFungibleToken -> NFToken`\n* `NonFungibleTokens -> NFTokens`\n* `BuyOffer -> NFTokenBuyOffer`\n* `SellOffer -> NFTokenSellOffer`\n* `OfferNode -> NFTokenOfferNode`\n \n#### RPC return labels\n* `tokenid -> nft_id`\n* `index -> nft_offer_index`\n \n#### Error codes\n* `temBAD_TRANSFER_FEE -> temBAD_NFTOKEN_TRANSFER_FEE`\n* `tefTOKEN_IS_NOT_TRANSFERABLE -> tefNFTOKEN_IS_NOT_TRANSFERABLE`\n* `tecNO_SUITABLE_PAGE -> tecNO_SUITABLE_NFTOKEN_PAGE`\n* `tecBUY_SELL_MISMATCH -> tecNFTOKEN_BUY_SELL_MISMATCH`\n* `tecOFFER_TYPE_MISMATCH -> tecNFTOKEN_OFFER_TYPE_MISMATCH`\n* `tecCANT_ACCEPT_OWN_OFFER -> tecCANT_ACCEPT_OWN_NFTOKEN_OFFER`\n\n\n### Bug Fixes\n- **Fix deletion of orphan node store directories:** Orphaned node store directories should only be deleted if the proper node store directories are confirmed to exist. [06e87e](https://github.com/ripple/rippled/commit/06e87e0f6add5b880d647e14ab3d950decfcf416)\n\n## Version 1.8.5\nThis is the 1.8.5 release of `rippled`, the reference implementation of the XRP Ledger protocol. This release includes fixes and updates for stability and security, and improvements to build scripts. There are no user-facing API or protocol changes in this release.\n\n### Bug Fixes\n\nThis release contains the following bug fixes and under-the-hood improvements:\n\n- **Correct TaggedPointer move constructor:** Fixes a bug in unused code for the TaggedPointer class. The old code would fail if a caller explicitly tried to remove a child that is not actually part of the node. (227a12d)\n\n- **Ensure protocol buffer prerequisites are present:** The build scripts and packages now properly handle Protobuf packages and various packages. Prior to this change, building on Ubuntu 21.10 Impish Indri would fail unless the `libprotoc-dev` package was installed. (e06465f)\n\n- **Improve handling of endpoints during peer discovery.** This hardens and improves handling of incoming messages on the peer protocol. (289bc0a)\n\n- **Run tests on updated linux distros:** Test builds now run on Rocky Linux 8, Fedora 34 and 35, Ubuntu 18, 20, and 22, and Debian 9, 10, and 11. (a9ee802)\n\n- **Avoid dereferencing empty optional in ReportingETL:** Fixes a bug in Reporting Mode that could dereference an empty optional value when throwing an error. (cdc215d)\n\n- **Correctly add GIT_COMMIT_HASH into version string:** When building the server from a non-tagged release, the build files now add the commit ID in a way that follows the semantic-versioning standard, and correctly handle the case where the commit hash ID cannot be retrieved. (d23d37f)\n\n- **Update RocksDB to version 6.27.3:** Updates the version of RocksDB included in the server from 6.7.3 (which was released on 2020-03-18) to 6.27.3 (released 2021-12-10).\n\n\n\n## Version 1.8.4\nThis is the 1.8.4 release of `rippled`, the reference implementation of the XRP Ledger protocol.\n\nThis release corrects a technical flaw introduced with 1.8.3 that may result in failures if the newly-introduced 'fast loading' is enabled. The release also adjusts default parameters used to configure the pathfinding engine to reduce resource usage.\n\n### Bug Fixes\n- **Adjust mutex scope in `walkMapParallel`**: This commit corrects a technical flaw introduced with commit [7c12f0135897361398917ad2c8cda888249d42ae] that would result in undefined behavior if the server operator configured their server to use the 'fast loading' mechanism introduced with 1.8.3.\n\n- **Adjust pathfinding configuration defaults**: This commit adjusts the default configuration of the pathfinding engine, to account for the size of the XRP Ledger mainnet. Unless explicitly overriden, the changes mean that pathfinding operations will return fewer, shallower paths than previous releases.\n\n\n## Version 1.8.3\nThis is the 1.8.3 release of `rippled`, the reference implementation of the XRP Ledger protocol.\n\nThis release implements changes that improve the syncing performance of peers on the network, adds countermeasures to several routines involving LZ4 to defend against CVE-2021-3520, corrects a minor technical flaw that would result in the server not using a cache for nodestore operations, and adjusts tunable values to optimize disk I/O.\n\n### Summary of Issues\nRecently, servers in the XRP Ledger network have been taking an increasingly long time to sync back to the network after restartiningg. This is one of several releases which will be made to improve on this issue. \n\n\n### Bug Fixes\n\n- **Parallel ledger loader & I/O performance improvements**: This commit makes several changes that, together, should decrease the time needed for a server to sync to the network. To make full use of this change, `rippled` needs to be using storage with high IOPS and operators need to explicitly enable this behavior by adding the following to their config file, under the `[node_db]` stanza:\n\n    [node_db]\n    ...\n    fast_load=1\n\nNote that when 'fast loading' is enabled the server will not open RPC and WebSocket interfaces until after the initial load is completed. Because of this, it may appear unresponsive or down.\n\n- **Detect CVE-2021-3520 when decompressing using LZ4**: This commit adds code to detect LZ4 payloads that may result in out-of-bounds memory accesses.\n\n- **Provide sensible default values for nodestore cache:**: The nodestore includes a built-in cache to reduce the disk I/O load but, by default, this cache was not initialized unless it was explicitly configured by the server operator. This commit introduces sensible defaults based on the server's configured node size. \n\n- **Adjust the number of concurrent ledger data jobs**: Processing a large amount of data at once can effectively bottleneck a server's I/O subsystem. This commits helps optimize I/O performance by controlling how many jobs can concurrently process ledger data.\n\n- **Two small SHAMapSync improvements**: This commit makes minor changes to optimize the way memory is used and control the amount of background I/O performed when attempting to fetch missing `SHAMap` nodes.\n\n## Version 1.8.2\nRipple has released version 1.8.2 of rippled, the reference server implementation of the XRP Ledger protocol.  This release addresses the full transaction queues and elevated transaction fees issue observed on the XRP ledger, and also provides some optimizations and small fixes to improve the server's performance overall.\n\n### Summary of Issues\nRecently, servers in the XRP Ledger network have had full transaction queues and transactions paying low fees have mostly not been able to be confirmed through the queue. After investigation, it was discovered that a large influx of transactions to the network caused it to raise the transaction costs to be proposed in the next ledger block, and defer transactions paying lower costs to later ledgers. The first part worked as designed, but deferred transactions were not being confirmed as the ledger had capacity to process them.\n\nThe root cause was that there were very many low-cost transactions that different servers in the network received in a different order due to incidental differences in timing or network topology, which caused validators to propose different sets of low-cost transactions from the queue. Since none of these transactions had support from a majority of validators, they were removed from the proposed transaction set. Normally, any transactions removed from a proposed transaction set are supposed to be retried in the next ledger, but servers attempted to put these deferred transactions into their transaction queues first, which had filled up. As a result, the deferred transactions were discarded, and the network was only able to confirm transactions that paid high costs.\n\n### Bug Fixes\n\n- **Address elevated transaction fees**: This change addresses the full queue problems in two ways. First, it puts deferred transactions directly into the open ledger, rather than transaction queue. This reverts a subset of the changes from [ximinez@62127d7](https://github.com/ximinez/rippled/commit/62127d725d801641bfaa61dee7d88c95e48820c5). A transaction that is in the open ledger but doesn't get validated should stay in the open ledger so that it can be proposed again right away. Second, it changes the order in which transactions are pulled from the transaction queue to increase the overlap in servers' initial transaction consensus proposals. Like the old rules, transactions paying higher fee levels are selected first. Unlike the old rules, transactions paying the same fee level are ordered by transaction ID / hash ascending. (Previously, transactions paying the same fee level were unsorted, resulting in each server having a different order.)\n\n- **Add ignore_default option to account_lines API**: This flag, if present, suppresses the output of incoming trust lines in the default state. This is primarily motivated by observing that users often have many unwanted incoming trust lines in a default state, which are not useful in the vast majority of cases. Being able to suppress those when doing `account_lines` saves bandwidth and resources. ([#3980](https://github.com/ripple/rippled/pull/3980))\n\n- **Make I/O and prefetch worker threads configurable**: This commit adds the ability to specify **io_workers** and **prefetch_workers** in the config file which can be used to specify the number of threads for processing raw inbound and outbound IO and configure the number of threads for performing node store prefetching. ([#3994](https://github.com/ripple/rippled/pull/3994))\n\n- **Enforce account RPC limits by objects traversed**: This changes the way the account_objects API method counts and limits the number of objects it returns. Instead of limiting results by the number of objects found, it counts by the number of objects traversed. Additionally, the default and maximum limits for non-admin connections have been decreased. This reduces the amount of work that one API call can do so that public API servers can share load more effectively. ([#4032](https://github.com/ripple/rippled/pull/4032))\n\n- **Fix a crash on shutdown**: The NuDB backend class could throw an error in its destructor, resulting in a crash while the server was shutting down gracefully. This crash was harmless but resulted in false alarms and noise when tracking down other possible crashes. ([#4017](https://github.com/ripple/rippled/pull/4017))\n\n- **Improve reporting of job queue in admin server_info**: The server_info command, when run with admin permissions, provides information about jobs in the server's job queue. This commit provides more descriptive names and more granular categories for many jobs that were previously all identified as \"clientCommand\". ([#4031](https://github.com/ripple/rippled/pull/4031))\n\n- **Improve full & compressed inner node deserialization**: Remove a redundant copy operation from low-level SHAMap deserialization. ([#4004](https://github.com/ripple/rippled/pull/4004))\n\n- **Reporting mode: only forward to P2P nodes that are synced**: Previously, reporting mode servers forwarded to any of their configured P2P nodes at random. This commit improves the selection so that it only chooses from P2P nodes that are fully synced with the network. ([#4028](https://github.com/ripple/rippled/pull/4028))\n\n- **Improve handling of HTTP X-Forwarded-For and Forwarded headers**: Fixes the way the server handles IPv6 addresses in these HTTP headers. ([#4009](https://github.com/ripple/rippled/pull/4009), [#4030](https://github.com/ripple/rippled/pull/4030))\n\n- **Other minor improvements to logging and Reporting Mode.**\n\n\n## Version 1.8.0\nRipple has released version 1.8.0 of rippled, the reference server implementation of the XRP Ledger protocol. This release brings several features and improvements.\n\n### New and Improved Features\n\n- **Improve History Sharding**: Shards of ledger history are now assembled in a deterministic way so that any server can make a binary-identical shard for a given range of ledgers. This makes it possible to retrieve a shard from multiple sources in parallel, then verify its integrity by comparing checksums with peers' checksums for the same shard. Additionally, there's a new admin RPC command to import ledger history from the shard store, and the crawl_shards command has been expanded with more info. ([#2688](https://github.com/ripple/rippled/issues/2688), [#3726](https://github.com/ripple/rippled/pull/3726), [#3875](https://github.com/ripple/rippled/pull/3875))\n- **New CheckCashMakesTrustLine Amendment**: If enabled, this amendment will change the CheckCash transaction type so that cashing a check for an issued token automatically creates a trust line to hold the token, similar to how purchasing a token in the decentralized exchange creates a trust line to hold the token. This change provides a way for issuers to send tokens to a user before that user has set up a trust line, but without forcing anyone to hold tokens they don't want. ([#3823](https://github.com/ripple/rippled/pull/3823))\n- **Automatically determine the node size**: The server now selects an appropriate `[node_size]` configuration value by default if it is not explicitly specified. This parameter tunes various settings to the specs of the hardware that the server is running on, especially the amount of RAM and the number of CPU threads available in the system. Previously the server always chose the smallest value by default.\n- **Improve transaction relaying logic**: Previously, the server relayed every transaction to all its peers (except the one that it received the transaction from). To reduce redundant messages, the server now relays transactions to a subset of peers using a randomized algorithm. Peers can determine whether there are transactions they have not seen and can request them from a peer that has them. It is expected that this feature will further reduce the bandwidth needed to operate a server.\n- **Improve the Byzantine validator detector**: This expands the detection capabilities of the Byzantine validation detector. Previously, the server only monitored validators on its own UNL. Now, the server monitors for Byzantine behavior in all validations it sees.\n- **Experimental tx stream with history for sidechains**: Adds an experimental subscription stream for sidechain federators to track messages on the main chain in canonical order. This stream is expected to change or be replaced in future versions as work on sidechains matures.\n- **Support Debian 11 Bullseye**: This is the first release that is compatible with Debian Linux version 11.x, \"Bullseye.\" The .deb packages now use absolute paths only, for compatibility with Bullseye's stricter package requirements. ([#3909](https://github.com/ripple/rippled/pull/3909))\n- **Improve Cache Performance**: The server uses a new storage structure for several in-memory caches for greatly improved overall performance. The process of purging old data from these caches, called \"sweeping\", was time-consuming and blocked other important activities necessary for maintaining ledger state and participating in consensus. The new structure divides the caches into smaller partitions that can be swept in parallel.\n- **Amendment default votes:** Introduces variable default votes per amendment. Previously the server always voted \"yes\" on any new amendment unless an admin explicitly configured a voting preference for that amendment. Now the server's default vote can be \"yes\" or \"no\" in the source code. This should allow a safer, more gradual roll-out of new amendments, as new releases can be configured to understand a new amendment but not vote for it by default. ([#3877](https://github.com/ripple/rippled/pull/3877))\n- **More fields in the `validations` stream:** The `validations` subscription stream in the API now reports additional fields that were added to validation messages by the HardenedValidations amendment. These fields make it easier to detect misconfigurations such as multiple servers sharing a validation key pair. ([#3865](https://github.com/ripple/rippled/pull/3865))\n- **Reporting mode supports `validations` and `manifests` streams:** In the API it is now possible to connect to these streams when connected to a servers running in reporting. Previously, attempting to subscribe to these streams on a reporting server failed with the error `reportingUnsupported`. ([#3905](https://github.com/ripple/rippled/pull/3905))\n\n### Bug Fixes\n\n- **Clarify the safety of NetClock::time_point arithmetic**: * NetClock::rep is uint32_t and can be error-prone when   used with subtraction. * Fixes [#3656](https://github.com/ripple/rippled/pull/3656)\n- **Fix out-of-bounds reserve, and some minor optimizations**\n- **Fix nested locks in ValidatorSite**\n- **Fix clang warnings about copies vs references**\n- **Fix reporting mode build issue**\n- **Fix potential deadlock in Validator sites**\n- **Use libsecp256k1 instead of OpenSSL for key derivation**: The deterministic key derivation code was still using calls to OpenSSL. This replaces the OpenSSL-based routines with new libsecp256k1-based implementations\n- **Improve NodeStore to ShardStore imports**: This runs the import process in a background thread while preventing online_delete from removing ledgers pending import\n- **Simplify SHAMapItem construction**: The existing class offered several constructors which were mostly unnecessary. This eliminates all existing constructors and introduces a single new one, taking a `Slice`. The internal buffer is switched from `std::vector` to `Buffer` to save a minimum of 8 bytes (plus the buffer slack that is inherent in `std::vector`) per SHAMapItem instance.\n- **Redesign stoppable objects**: Stoppable is no longer an abstract base class, but a pattern, modeled after the well-understood `std::thread`. The immediate benefits are less code, less synchronization, less runtime work, and (subjectively) more readable code. The end goal is to adhere to RAII in our object design, and this is one necessary step on that path.\n\n## Version 1.7.3\n\nThis is the 1.7.3 release of `rippled`, the reference implementation of the XRP Ledger protocol. This release addresses an OOB memory read identified by Guido Vranken, as well as an unrelated issue identified by the Ripple C++ team that could result in incorrect use of SLEs. Additionally, this version also introduces the `NegativeUNL` amendment, which corresponds to the feature which was introduced with the 1.6.0 release.\n\n## Action Required\n\nIf you operate an XRP Ledger server, then you should upgrade to version 1.7.3 at your earliest convenience to mitigate the issues addressed in this hotfix. If a sufficient majority of servers on the network upgrade, the `NegativeUNL` amendment may gain a majority, at which point a two week activation countdown will begin. If the `NegativeUNL` amendment activates, servers running versions of `rippled` prior to 1.7.3 will become [amendment blocked](https://xrpl.org/amendments.html#amendment-blocked).\n\n### Bug Fixes\n\n- **Improve SLE usage in check cashing**: Fixes a situation which could result in the incorrect use of SLEs.\n- **Address OOB in base58 decoder**: Corrects a technical flaw that could allow an out-of-bounds memory read in the Base58 decoder.\n- **Add `NegativeUNL` as a supported amendment**: Introduces an amendment for the Negative UNL feature introduced in `rippled` 1.6.0.\n\n## Version 1.7.2\n\nThis the 1.7.2 release of rippled, the reference server implementation of the XRP Ledger protocol. This release protects against the security issue [CVE-2021-3499](https://www.openssl.org/news/secadv/20210325.txt) affecting OpenSSL, adds an amendment to fix an issue with small offers not being properly removed from order books in some cases, and includes various other minor fixes.\nVersion 1.7.2 supersedes version 1.7.1 and adds fixes for more issues that were discovered during the release cycle.\n\n## Action Required\n\nThis release introduces a new amendment to the XRP Ledger protocol: `fixRmSmallIncreasedQOffers`. This amendments is now open for voting according to the XRP Ledger's amendment process, which enables protocol changes following two weeks of >80% support from trusted validators.\nIf you operate an XRP Ledger server, then you should upgrade to version 1.7.2 within two weeks, to ensure service continuity. The exact time that protocol changes take effect depends on the voting decisions of the decentralized network.\nIf you operate an XRP Ledger validator, please learn more about this amendment so you can make informed decisions about how your validator votes. If you take no action, your validator begins voting in favor of any new amendments as soon as it has been upgraded. \n\n### Bug Fixes\n\n- **fixRmSmallIncreasedQOffers Amendment:** This amendment fixes an issue where certain small offers can be left at the tip of an order book without being consumed or removed when appropriate and causes some payments and Offers to fail when they should have succeeded [(#3827)](https://github.com/ripple/rippled/pull/3827).\n- **Adjust OpenSSL defaults and mitigate CVE-2021-3499:** Prior to this fix, servers compiled against a vulnerable version of OpenSSL could have a crash triggered by a malicious network connection. This fix disables renegotiation support in OpenSSL so that the rippled server is not vulnerable to this bug regardless of the OpenSSL version used to compile the server. This also removes support for deprecated TLS versions 1.0 and 1.1 and ciphers that are not part of TLS 1.2 [(#79e69da)](https://github.com/ripple/rippled/pull/3843/commits/79e69da3647019840dca49622621c3d88bc3883f).\n- **Support HTTP health check in reporting mode:** Enables the Health Check special method when running the server in the new Reporting Mode introduced in 1.7.0 [(9c8cadd)](https://github.com/ripple/rippled/pull/3843/commits/9c8caddc5a197bdd642556f8beb14f06d53cdfd3).\n- **Maintain compatibility for forwarded RPC responses:** Fixes a case in API responses from servers in Reporting Mode, where requests that were forwarded to a P2P-mode server would have the result field nested inside another result field [(8579eb0)](https://github.com/ripple/rippled/pull/3843/commits/8579eb0c191005022dcb20641444ab471e277f67).\n- **Add load_factor in reporting mode:** Adds a load_factor value to the server info method response when running the server in Reporting Mode so that the response is compatible with the format returned by servers in P2P mode (the default) [(430802c)](https://github.com/ripple/rippled/pull/3843/commits/430802c1cf6d4179f2249a30bfab9eff8e1fa748).\n- **Properly encode metadata from tx RPC command:** Fixes a problem where transaction metadata in the tx API method response would be in JSON format even when binary was requested [(7311629)](https://github.com/ripple/rippled/pull/3843/commits/73116297aa94c4acbfc74c2593d1aa2323b4cc52).\n- **Updates to Windows builds:** When building on Windows, use vcpkg 2021 by default and add compatibility with MSVC 2019 [(36fe196)](https://github.com/ripple/rippled/pull/3843/commits/36fe1966c3cd37f668693b5d9910fab59c3f8b1f), [(30fd458)](https://github.com/ripple/rippled/pull/3843/commits/30fd45890b1d3d5f372a2091d1397b1e8e29d2ca).\n\n## Version 1.7.0 \n\nRipple has released version 1.7.0 of `rippled`, the reference server implementation of the XRP Ledger protocol. \nThis release [significantly improves memory usage](https://blog.ripplex.io/how-ripples-c-team-cut-rippleds-memory-footprint-down-to-size/), introduces a protocol amendment to allow out-of-order transaction execution with Tickets, and brings several other features and improvements. \n\n## Upgrading (SPECIAL ACTION REQUIRED)\nIf you use the precompiled binaries of rippled that Ripple publishes for supported platforms, please note that Ripple has renewed the GPG key used to sign these packages. \nIf you are upgrading from a previous install, you must download and trust the renewed key. Automatic upgrades will not work until you have re-trusted the key.\n### Red Hat Enterprise Linux / CentOS\n\nPerform a [manual upgrade](https://xrpl.org/update-rippled-manually-on-centos-rhel.html). When prompted, confirm that the key's fingerprint matches the following example, then press `y` to accept the updated key:\n\n```\n$ sudo yum install rippled\nLoaded plugins: fastestmirror\nLoading mirror speeds from cached hostfile\n* base: mirror.web-ster.com\n* epel: mirrors.syringanetworks.net\n* extras: ftp.osuosl.org\n* updates: mirrors.vcea.wsu.edu\nripple-nightly/signature                                                                                                                                                                                                                                 |  650 B  00:00:00    \nRetrieving key from https://repos.ripple.com/repos/rippled-rpm/nightly/repodata/repomd.xml.key\nImporting GPG key 0xCCAFD9A2:\nUserid     : \"TechOps Team at Ripple <techops+rippled@ripple.com>\"\nFingerprint: c001 0ec2 05b3 5a33 10dc 90de 395f 97ff ccaf d9a2\nFrom       : https://repos.ripple.com/repos/rippled-rpm/nightly/repodata/repomd.xml.key\nIs this ok [y/N]: y\n```\n\n### Ubuntu / Debian\n\nDownload and trust the updated public key, then perform a [manual upgrade](https://xrpl.org/update-rippled-manually-on-ubuntu.html) as follows:\n\n```\nwget -q -O - \"https://repos.ripple.com/repos/api/gpg/key/public\" | \\\n    sudo apt-key add -\nsudo apt -y update\nsudo apt -y install rippled\n```\n\n### New and Improved Features\n\n- **Rework deferred node logic and async fetch behavior:** This change significantly improves ledger sync and fetch times while reducing memory consumption.  (https://blog.ripplex.io/how-ripples-c-team-cut-rippleds-memory-footprint-down-to-size/)\n- **New Ticket feature:** Tickets are a mechanism to prepare and send certain transactions outside of the normal sequence order. This version reworks and completes the implementation for Tickets after more than 6 years of development. This feature is now open for voting as the newly-introduced `TicketBatch` amendment, which replaces the previously-proposed `Tickets` amendment. The specification for this change can be found at: [xrp-community/standards-drafts#16](https://github.com/xrp-community/standards-drafts/issues/16)\n- **Add Reporting Mode:** The server can be compiled to operate in a new mode that serves API requests for validated ledger data without connecting directly to the peer-to-peer network. (The server needs a gRPC connection to another server that is on the peer-to-peer network.) Reporting Mode servers can share access to ledger data via Apache Cassandra and PostgreSQL to more efficiently serve API requests while peer-to-peer servers specialize in broadcasting and processing transactions.\n- **Optimize relaying of validation and proposal messages:** Servers typically receive multiple copies of any given message from directly connected peers; in particular, consensus proposal and validation messages are often relayed with extremely high redundancy. For servers with several peers, this can cause redundant work. This commit introduces experimental code that attempts to optimize the relaying of proposals and validations by allowing servers to instruct their peers to \"squelch\" delivery of selected proposals and validations. This change is considered experimental at this time and is disabled by default because the functioning of the consensus network depends on messages propagating with high reliability through the constantly-changing peer-to-peer network. Server operators who wish to test the optimized code can enable it in their server config file.\n- **Report server domain to other servers:** Server operators now have the option to configure a domain name to be associated with their servers. The value is communicated to other servers and is also reported via the `server_info` API. The value is meant for third-party applications and tools to group servers together. For example, a tool that visualizes the network's topology can show how many servers are operated by different stakeholders. An operator can claim any domain, so tools should use the [xrp-ledger.toml file](https://xrpl.org/xrp-ledger-toml.html) to confirm that the domain also claims ownership of the servers.\n- **Improve handling of peers that aren't synced:** When evaluating the fitness and usefulness of an outbound peer, the code would incorrectly calculate the amount of time that the peer spent in a non-useful state. This release fixes the calculation and makes the timeout values configurable by server operators. Two new options are introduced in the 'overlay' stanza of the config file. \n- **Persist API-configured voting settings:** Previously, the amendments that a server would vote in support of or against could be configured both via the configuration file and via the [\"feature\" API method](https://xrpl.org/feature.html). Changes made in the configuration file were only loaded at server startup; changes made via the command line take effect immediately but were not persisted across restarts. Starting with this release, changes made via the API are saved to the wallet.db database file so that they persist even if the server is restarted.\nAmendment voting in the config file is deprecated. The first time the server starts with v1.7.0 or higher, it reads any amendment voting settings in the config file and saves the settings to the database; on later restarts the server prints a warning message and ignores the [amendments] and [veto_amendments] stanzas of the config file.\nGoing forward, use the [feature method](https://xrpl.org/feature.html) to view and configure amendment votes. If you want to use the config file to configure amendment votes, add a line to the [rpc_startup] stanza such as the following:\n[rpc_startup]\n{ \"command\": \"feature\", \"feature\": \"FlowSortStrands\", \"vetoed\": true }\n- **Support UNLs with future effective dates:** Updates the format for the recommended validator list file format, allowing publishers to pre-publish the next recommended UNL while the current one is still valid. The server is still backwards compatible with the previous format, but the new format removes some uncertainty during the transition from one list to the next. Also, starting with this release, the server locks down and reports an error if it has no valid validator list. You can clear the error by loading a validator list from a file or by configuring a different UNL and restarting; the error also goes away on its own if the server is able to obtain a trusted validator list from the network (for example, after an network outage resolves itself).\n- **Improve manifest relaying:** Servers now propagate change messages for validators' ephemeral public keys (\"manifests\") on a best-effort basis, to make manifests more available throughout the peer-to-peer network. Previously, the server would only relay manifests from validators it trusts locally, which made it difficult to detect and track validators that are not broadly trusted.\n- **Implement ledger forward replay feature:** The server can now sync up to the network by \"playing forward\" transactions from a previously saved ledger until it catches up to the network. Compared with the default behavior of fetching the latest state and working backwards, forward replay can save time and bandwidth by reconstructing previous ledgers' state data rather than downloading the pre-calculated results from the network. As an added bonus, forward replay confirms that the rest of the network followed the same transaction processing rules as the local server when processing the intervening ledgers. This feature is considered experimental this time and can be enabled with an option in the config file.\n- **Make the transaction job queue limit adjustable:** The server uses a job queue to manage tasks, with limits on how many jobs of a particular type can be queued. The previously hard-coded limit associated with transactions is now configurable. Server operators can increase the number of transactions their server is able to queue, which may be useful if your server has a large memory capacity or you expect an influx of transactions. (https://github.com/ripple/rippled/issues/3556)\n- **Add public_key to the Validator List method response:** The [Validator List method](https://xrpl.org/validator-list.html) can be used to request a recommended validator list from a rippled instance. The response now includes the public key of the requested list. (https://github.com/ripple/rippled/issues/3392)\n- **Server operators can now configure maximum inbound and outbound peers separately:** The new `peers_in_max` and `peers_out_max` config options allow server operators to independently control the maximum number of inbound and outbound peers the server allows. [70c4ecc]\n- **Improvements to shard downloading:** Previously the download_shard command could only load shards over HTTPS. Compressed shards can now also be downloaded over plain HTTP. The server fully checks the data for integrity and consistency, so the encryption is not strictly necessary. When initiating multiple shard downloads, the server now returns an error if there is not enough space to store all the shards currently being downloaded.\n- **The manifest command is now public:** The manifest API method returns public information about a given validator. The required permissions have been changed so it is now part of the public API.\n\n### Bug Fixes\n\n- **Implement sticky DNS resolution for validator list retrieval:** When attempting to load a validator list from a configured site, attempt to reuse the last IP that was successfully used if that IP is still present in the DNS response. (https://github.com/ripple/rippled/issues/3494).\n- **Improve handling of RPC ledger_index argument:** You can now provide the `ledger_index` as a numeric string. This allows you to copy and use the numeric string `ledger_index` value returned by certain RPC commands. Previously you could only send native JSON numbers or shortcut strings such as \"validated\" in the `ledger_index` field. (https://github.com/ripple/rippled/issues/3533)\n- **Fix improper promotion of bool on return**  [6968da1]\n- **Fix ledger sequence on copynode** [ef53197] \n-  **Fix parsing of node public keys in `manifest` CLI:** The previous code attempts to validate the provided node public key using a function that assumes that the encoded public key is for an account. This causes the parsing to fail. This commit fixes #3317 (https://github.com/ripple/rippled/issues/3317) by letting the caller specify the type of the public key being checked.\n- **Fix idle peer timer:** Fixes a bug where a function to remove idle peers was called every second instead of every 4 seconds. #3754 (https://github.com/ripple/rippled/issues/3754)\n- **Add database counters:** Fix bug where DatabaseRotateImp::getBackend and ::sync utilized the writable backend without a lock. ::getBackend was replaced with ::getCounters.\n- **Improve online_delete configuration and DB tuning** [6e9051e]\n- **Improve handling of burst writes in NuDB database** ( https://github.com/ripple/rippled/pull/3662 )\n- **Fix excessive logging after disabling history shards.** Previously if you configured the server with a shard store, then disabled it, the server output excessive warning messages about the shard limit being exceeded.\n- **Fixed some issues with negotiating link compression.** ( https://github.com/ripple/rippled/pull/3705 )\n- **Fixed a potential thread deadlock with history sharding.** ( https://github.com/ripple/rippled/pull/3683 )\n- **Various fixes to typos and comments, refactoring, and build system improvements**\n\n## Version 1.6.0\n\nThis release introduces several new features including changes to the XRP Ledger's consensus mechanism to make it even more robust in \nadverse conditions, as well as numerous bug fixes and optimizations.\n\n### New and Improved Features\n\n- Initial implementation of Negative UNL functionality: This change can improve the liveness of the network during periods of network instability, by allowing servers to track which validators are temporarily offline and to adjust quorum calculations to match. This change requires an amendment, but the amendment is not in the **1.6.0** release. Ripple expects to run extensive public testing for Negative UNL functionality on the Devnet in the coming weeks. If public testing satisfies all requirements across security, reliability, stability, and performance, then the amendment could be included in a version 2.0 release. [[#3380](https://github.com/ripple/rippled/pull/3380)]\n- Validation Hardening: This change allows servers to detect accidental misconfiguration of validators, as well as potentially Byzantine behavior by malicious validators. Servers can now log a message to notify operators if they detect a single validator issuing validations for multiple, incompatible ledger versions, or validations from multiple servers sharing a key. As part of this update, validators report the version of `rippled` they are using, as well as the hash of the last ledger they consider to be fully validated, in validation messages. [[#3291](https://github.com/ripple/rippled/pull/3291)] ![Amendment: Required](https://img.shields.io/badge/Amendment-Required-red)\n- Software Upgrade Monitoring & Notification: After the `HardenedValidations` amendment is enabled and the validators begin reporting the versions of `rippled` they are running, a server can check how many of the validators on its UNL run a newer version of the software than itself. If more than 60% of a server's validators are running a newer version, the server writes a message to notify the operator to consider upgrading their software. [[#3447](https://github.com/ripple/rippled/pull/3447)]\n- Link Compression: Beginning with **1.6.0**, server operators can enable support for compressing peer-to-peer messages. This can save bandwidth at a cost of higher CPU usage. This support is disabled by default and should prove useful for servers with a large number of peers. [[#3287](https://github.com/ripple/rippled/pull/3287)]\n- Unconditionalize Amendments that were enabled in 2017: This change removes legacy code which the network has not used since 2017. This change limits the ability to [replay](https://github.com/xrp-community/standards-drafts/issues/14) ledgers that rely on the pre-2017 behavior. [[#3292](https://github.com/ripple/rippled/pull/3292)]\n- New Health Check Method: Perform a simple HTTP request to get a summary of the health of the server: Healthy, Warning, or Critical. [[#3365](https://github.com/ripple/rippled/pull/3365)]\n- Start work on API version 2. Version 2 of the API will be part of a future release. The first breaking change will be to consolidate several closely related error messages that can occur when the server is not synced into a single \"notSynced\" error message. [[#3269](https://github.com/ripple/rippled/pull/3269)]\n- Improved shard concurrency: Improvements to the shard engine have helped reduce the lock scope on all public functions, increasing the concurrency of the code. [[#3251](https://github.com/ripple/rippled/pull/3251)]\n- Default Port: In the config file, the `[ips_fixed]` and `[ips]` stanzas now use the [IANA-assigned port](https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml?search=2459) for the XRP Ledger protocol (2459) when no port is specified. The `connect` API method also uses the same port by default. [[#2861](https://github.com/ripple/rippled/pull/2861)].\n- Improve proposal and validation relaying. The peer-to-peer protocol always relays trusted proposals and validations (as part of the [consensus process](https://xrpl.org/consensus.html)), but only relays _untrusted_ proposals and validations in certain circumstances. This update adds configuration options so server operators can fine-tune how their server handles untrusted proposals and validations, and changes the default behavior to prioritize untrusted validations higher than untrusted proposals.  [[#3391](https://github.com/ripple/rippled/pull/3391)]\n- Various Build and CI Improvements including updates to RocksDB 6.7.3 [[#3356](https://github.com/ripple/rippled/pull/3356)], NuDB 2.0.3 [[#3437](https://github.com/ripple/rippled/pull/3437)], adjusting CMake settings so that rippled can be built as a submodule [[#3449](https://github.com/ripple/rippled/pull/3449)], and adding Travis CI settings for Ubuntu Bionic Beaver [[#3319](https://github.com/ripple/rippled/pull/3319)].\n- Better documentation in the config file for online deletion and database tuning. [[#3429](https://github.com/ripple/rippled/pull/3429)]\n\n\n### Bug Fixes\n\n- Fix the 14 day timer to enable amendment to start at the correct quorum size [[#3396](https://github.com/ripple/rippled/pull/3396)]\n- Improve online delete backend lock which addresses a possibility in the online delete process where one or more backend shared pointer references may become invalid during rotation. [[#3342](https://github.com/ripple/rippled/pull/3342)]\n- Address an issue that can occur during the loading of validator tokens, where a deliberately malformed token could cause the server to crash during startup. [[#3326](https://github.com/ripple/rippled/pull/3326)]\n- Add delivered amount to GetAccountTransactionHistory. The delivered_amount field was not being populated when calling GetAccountTransactionHistory. In contrast, the delivered_amount field was being populated when calling GetTransaction. This change populates delivered_amount in the response to GetAccountTransactionHistory, and adds a unit test to make sure the results delivered by GetTransaction and GetAccountTransactionHistory match each other. [[#3370](https://github.com/ripple/rippled/pull/3370)]\n- Fix build issues for GCC 10 [[#3393](https://github.com/ripple/rippled/pull/3393)]\n- Fix historical ledger acquisition - this fixes an issue where historical ledgers were acquired only since the last online deletion interval instead of the configured value to allow deletion.[[#3369](https://github.com/ripple/rippled/pull/3369)]\n- Fix build issue with Docker [#3416](https://github.com/ripple/rippled/pull/3416)]\n- Add Shard family. The App Family utilizes a single shared Tree Node and Full Below cache for all history shards. This can create a problem when acquiring a shard that shares an account state node that was recently cached from another shard operation. The new Shard Family class solves this issue by managing separate Tree Node and Full Below caches for each shard. [#3448](https://github.com/ripple/rippled/pull/3448)]\n- Amendment table clean up which fixes a calculation issue with majority. [#3428](https://github.com/ripple/rippled/pull/3428)]\n- Add the `ledger_cleaner` command to rippled command line help [[#3305](https://github.com/ripple/rippled/pull/3305)]\n- Various typo and comments fixes.\n\n\n## Version 1.5.0\n\nThe `rippled` 1.5.0 release introduces several improvements and new features, including support for gRPC API, API versioning, UNL propagation via the peer network, new RPC methods `validator_info` and `manifest`, augmented `submit` method, improved `tx` method response, improved command line parsing, improved handshake protocol, improved package building and various other minor bug fixes and improvements.\n\nThis release also introduces two new amendments: `fixQualityUpperBound` and `RequireFullyCanonicalSig`.\n\nSeveral improvements to the sharding system are currently being evaluated for inclusion into the upcoming 1.6 release of `rippled`. These changes are incompatible with shards generated by previous versions of the code. \nAdditionally, an issue with the existing sharding engine can result in a server running versions 1.4 or 1.5 of the software to experience a deadlock and automatically restart when running with the sharding feature enabled. \nAt this time, the developers recommend running with sharding disabled, pending the improvements scheduled to be introduced with 1.6. For more information on how to disable sharding, please visit https://xrpl.org/configure-history-sharding.html\n\n \n**New and Updated Features**\n- The `RequireFullyCanonicalSig` amendment which changes the signature requirements for the XRP Ledger protocol so that non-fully-canonical signatures are no longer valid. This protects against transaction malleability on all transactions, instead of just transactions with the tfFullyCanonicalSig flag enabled. Without this amendment, a transaction is malleable if it uses a secp256k1 signature and does not have tfFullyCanonicalSig enabled. Most signing utilities enable tfFullyCanonicalSig by default, but there are exceptions. With this amendment, no single-signed transactions are malleable. (Multi-signed transactions may still be malleable if signers provide more signatures than are necessary.) All transactions must use the fully canonical form of the signature, regardless of the tfFullyCanonicalSig flag. Signing utilities that do not create fully canonical signatures are not supported. All of Ripple's signing utilities have been providing fully-canonical signatures exclusively since at least 2014. For more information. [`ec137044a`](https://github.com/ripple/rippled/commit/ec137044a014530263cd3309d81643a5a3c1fdab)\n- Native [gRPC API](https://grpc.io/) support. Currently, this API provides a subset of the full `rippled` [API](https://xrpl.org/rippled-api.html). You can enable the gRPC API on your server with a new configuration stanza. [`7d867b806`](https://github.com/ripple/rippled/commit/7d867b806d70fc41fb45e3e61b719397033b272c)\n- API Versioning which allows for future breaking change of RPC methods to co-exist with existing versions. [`2aa11fa41`](https://github.com/ripple/rippled/commit/2aa11fa41d4a7849ae6a5d7a11df6f367191e3ef)\n- Nodes now receive and broadcast UNLs over the peer network under various conditions. [`2c71802e3`](https://github.com/ripple/rippled/commit/2c71802e389a59118024ea0152123144c084b31c)\n- Augmented `submit` method to include additional details on the status of the command. [`79e9085dd`](https://github.com/ripple/rippled/commit/79e9085dd1eb72864afe841225b78ec96e72b5ca)\n- Improved `tx` method response with additional details on ledgers searched. [`47501b7f9`](https://github.com/ripple/rippled/commit/47501b7f99d4103d9ad405e399169fc251161548)\n- New `validator_info` method which returns information pertaining to the current validator's keys, manifest sequence, and domain. [`3578acaf0`](https://github.com/ripple/rippled/commit/3578acaf0b5f2d27ddc33f5b4cc81d21be1903ae)\n- New `manifest` method which looks up manifest information for the specified key (either master or ephemeral). [`3578acaf0`](https://github.com/ripple/rippled/commit/3578acaf0b5f2d27ddc33f5b4cc81d21be1903ae)\n- Introduce handshake protocol for compression negotiation (compression is not implemented at this point) and other minor improvements. [`f6916bfd4`](https://github.com/ripple/rippled/commit/f6916bfd429ce654e017ae9686cb023d9e05408b)\n- Remove various old conditionals introduced by amendments. [`(51ed7db00`](https://github.com/ripple/rippled/commit/51ed7db0027ba822739bd9de6f2613f97c1b227b), [`6e4945c56)`](https://github.com/ripple/rippled/commit/6e4945c56b1a1c063b32921d7750607587ec3063)\n- Add `getRippledInfo` info gathering script to `rippled` Linux packages. [`acf4b7889`](https://github.com/ripple/rippled/commit/acf4b78892074303cb1fa22b778da5e7e7eddeda)\n\n**Bug Fixes and Improvements**\n- The `fixQualityUpperBound` amendment which fixes a bug in unused code for estimating the ratio of input to output of individual steps in cross-currency payments. [`9d3626fec`](https://github.com/ripple/rippled/commit/9d3626fec5b610100f401dc0d25b9ec8e4a9a362)\n- `tx` method now properly fetches all historical tx if they are incorporated into a validated ledger under rules that applied at the time. [`11cf27e00`](https://github.com/ripple/rippled/commit/11cf27e00698dbfc099b23463927d1dac829ed19)\n- Fix to how `fail_hard` flag is handled with the `submit` method - transactions that are submitted with the `fail_hard` flag that result in any TER code besides tesSUCCESS is neither queued nor held. [`cd9732b47`](https://github.com/ripple/rippled/commit/cd9732b47a9d4e95bcb74e048d2c76fa118b80fb)\n- Remove unused `Beast` code. [`172ead822`](https://github.com/ripple/rippled/commit/172ead822159a3c1f9b73217da4316df48851ab6)\n- Lag ratchet code fix to use proper ephemeral public keys instead of the long-term master public keys.[`6529d3e6f`](https://github.com/ripple/rippled/commit/6529d3e6f7333fc5226e5aa9ae65f834cb93dfe5)\n\n\n## Version 1.4.0\n\nThe `rippled` 1.4.0 release introduces several improvements and new features, including support for deleting accounts, improved peer slot management, improved CI integration and package building and support for [C++17](https://en.wikipedia.org/wiki/C%2B%2B17) and [Boost 1.71](https://www.boost.org/users/history/version_1_71_0.html). Finally, this release removes the code for the `SHAMapV2` amendment which failed to gain majority support and has been obsoleted by other improvements.\n \n**New and Updated Features**\n- The `DeletableAccounts` amendment which, if enabled, will make it possible for users to delete unused or unneeded accounts, recovering the account's reserve.\n- Support for improved management of peer slots and the ability to add and removed reserved connections without requiring a restart of the server.\n- Tracking and reporting of cumulative and instantaneous peer bandwidth usage. \n- Preliminary support for post-processing historical shards after downloading to index their contents.\n- Reporting the master public key alongside the ephemeral public key in the `validation` stream [subscriptions](https://xrpl.org/subscribe.html).\n- Reporting consensus phase changes in the `server` stream [subscription](https://xrpl.org/subscribe.html).\n\n**Bug Fixes**\n- The `fixPayChanRecipientOwnerDir` amendment which corrects a minor technical flaw that would cause a payment channel to not appear in the recipient's owner directory, which made it unnecessarily difficult for users to enumerate all their payment channels.\n- The `fixCheckThreading` amendment which corrects a minor technical flaw that caused checks to not be properly threaded against the account of the check's recipient.\n- Respect the `ssl_verify` configuration option in the `SSLHTTPDownloader` and `HTTPClient` classes.\n- Properly update the `server_state` when a server detects a disagreement between itself and the network.\n- Allow Ed25519 keys to be used with the `channel_authorize` command.\n\n## Version 1.3.1\n\nThe `rippled` 1.3.1 release improves the built-in deadlock detection code, improves logging during process startup, changes the package build pipeline and improves the build documentation.\n\n**New and Updated Features**\n\nThis release has no new features.\n\n**Bug Fixes**\n- Add a LogicError when a deadlock is detected (355a7b04)\n- Improve logging during process startup (7c24f7b1)\n\n## Version 1.3.0\nThe `rippled` 1.3.0 release introduces several new features and overall improvements to the codebase, including the `fixMasterKeyAsRegularKey` amendment, code to adjust the timing of the consensus process and support for decentralized validator domain verification. The release also includes miscellaneous improvements including in the transaction censorship detection code, transaction validation code, manifest parsing code, configuration file parsing code, log file rotation code, and in the build, continuous integration, testing and package building pipelines.\n\n**New and Updated Features**\n- The `fixMasterKeyAsRegularKey` amendment which, if enabled, will correct a technical flaw that allowed setting an account's regular key to the account's master key.\n- Code that allows validators to adjust the timing of the consensus process in near-real-time to account for connection delays.\n- Support for decentralized validator domain verification by adding support for a \"domain\" field in manifests.\n\n**Bug Fixes**\n- Improve ledger trie ancestry tracking to reduce unnecessary error messages.\n- More efficient detection of dry paths in the payment engine. Although not a transaction-breaking change, this should reduce spurious error messages in the log files.\n\n## Version 1.2.4\n\nThe `rippled` 1.2.4 release improves the way that shard crawl requests are routed and the robustness of configured validator list retrieval by imposing a 20 second timeout.\n\n**New and Updated Features**\n\nThis release has no new features.\n\n**Bug Fixes**\n\n- Use public keys when routing shard crawl requests\n- Enforce a 20s timeout when making validator list requests (RIPD-1737)\n\n## Version 1.2.3\n\nThe `rippled` 1.2.3 release corrects a technical flaw which in some circumstances can cause a null pointer dereference that can crash the server.\n\n**New and Updated Features**\n\nThis release has no new features.\n\n**Bug Fixes**\n\n- Fix a technical flaw which in some circumstances can cause a null pointer dereference that can crash the server.\n\n## Version 1.2.2\n\nThe `rippled` 1.2.2 release corrects a technical flaw in the fee escalation\nengine which could cause some fee metrics to be calculated incorrectly. In some\ncircumstances this can potentially cause the server to crash.\n\n**New and Updated Features**\n\nThis release has no new features.\n\n**Bug Fixes**\n\n- Fix a technical flaw in the fee escalation engine which could cause some fee metrics to be calculated incorrectly (4c06b3f86)\n\n## Version 1.2.1\n\nThe `rippled` 1.2.1 release introduces several fixes including a change in the\ninformation reported via the enhanced crawl functionality introduced in the\n1.2.0 release, a fix for a potential race condition when processing a status\nchange message for a peer, and for a technical flaw that could cause a server\nto not properly detect that it had lost all its peers.\n\nThe release also adds the `delivered_amount` field to more responses to simplify\nthe handling of payment or check cashing transactions.\n\n**New and Updated Features**\n\nThis release has no new features.\n\n**Bug Fixes**\n\n- Fix a race condition during `TMStatusChange` handling (c8249981)\n- Properly transition state to disconnected (9d027394)\n- Display validator status only in response to admin requests (2d6a518a)\n- Add the `delivered_amount` to more RPC commands (f2756914)\n\n\n## Version 1.2.0\n\nThe `rippled` 1.2.0 release introduces the MultisignReserve Amendment, which\nreduces the reserve requirement associated with signer lists. This release also\nincludes incremental improvements to the code that handles offers. Furthermore,\n`rippled` now also has the ability to automatically detect transaction\ncensorship attempts and issue warnings of increasing severity for transactions\nthat should have been included in a closed ledger after several rounds of\nconsensus.\n\n**New and Updated Features**\n\n- Reduce the account reserve for a Multisign SignerList (6572fc8)\n- Improve transaction error condition handling (4104778)\n- Allow servers to automatically detect transaction censorship attempts (945493d)\n- Load validator list from file (c1a0244)\n- Add RPC command shard crawl (17e0d09)\n- Add RPC Call unit tests (eeb9d92)\n- Grow the open ledger expected transactions quickly (7295cf9)\n- Avoid dispatching multiple fetch pack threads (4dcb3c9)\n- Remove unused function in AutoSocket.h (8dd8433)\n- Update TxQ developer docs (e14f913)\n- Add user defined literals for megabytes and kilobytes (cd1c5a3)\n- Make the FeeEscalation Amendment permanent (58f786c)\n- Remove undocumented experimental options from RPC sign (a96cb8f)\n- Improve RPC error message for fee command (af1697c)\n- Improve ledger_entry command’s inconsistent behavior (63e167b) \n\n**Bug Fixes**\n\n- Accept redirects from validator list sites (7fe1d4b)\n- Implement missing string conversions for JSON (c0e9418) \n- Eliminate potential undefined behavior (c71eb45)\n- Add safe_cast to sure no overflow in casts between enums and integral types (a7e4541)\n\n## Version 1.1.2\n\nThe `rippled` 1.1.2 release introduces a fix for an issue that could have\nprevented cluster peers from successfully bypassing connection limits when\nconnecting to other servers on the same cluster. Additionally, it improves\nlogic used to determine what the preferred ledger is during suboptimal\nnetwork conditions.\n\n**New and Updated Features**\n\nThis release has no new features.\n\n**Bug Fixes**\n\n- Properly bypass connection limits for cluster peers (#2795, #2796)\n- Improve preferred ledger calculation (#2784)\n\n## Version 1.1.1\n\nThe `rippled` 1.1.1 release adds support for redirections when retrieving\nvalidator lists and changes the way that validators with an expired list\nbehave. Additionally, informational commands return more useful information\nto allow server operators to determine the state of their server\n\n**New and Updated Features**\n\n- Enhance status reporting when using the `server_info` and `validators` commands (#2734)\n- Accept redirects from validator list sites: (#2715)\n\n**Bug Fixes**\n\n- Properly handle expired validator lists when validating (#2734)\n\n\n\n## Version 1.1.0\n\nThe `rippled` 1.1.0 release release includes the `DepositPreAuth` amendment, which combined with the previously released `DepositAuth` amendment, allows users to pre-authorize incoming transactions to accounts, by whitelisting sender addresses. The 1.1.0 release also includes incremental improvements to several previously released features (`fix1515` amendment), deprecates support for the `sign` and `sign_for` commands from the rippled API and improves invariant checking for enhanced security.\n\nRipple recommends that all server operators upgrade to XRP Ledger version 1.1.0 by Thursday, 2018-09-27, to ensure service continuity.\n\n**New and Updated Features**\n\n- Add `DepositPreAuth` ledger type and transaction (#2513)  \n- Increase fault tolerance and raise validation quorum to 80%, which fixes issue 2604 (#2613)\n- Support ipv6 for peer and RPC comms (#2321)\n- Refactor ledger replay logic (#2477)\n- Improve Invariant Checking (#2532)\n- Expand SQLite potential storage capacity (#2650)\n- Replace UptimeTimer with UptimeClock (#2532)\n- Don’t read Amount field if it is not present (#2566)\n- Remove Transactor:: mFeeDue member variable (#2586)\n- Remove conditional check for using Boost.Process (#2586)\n- Improve charge handling in NoRippleCheckLimits test (#2629)\n- Migrate more code into the chrono type system (#2629)\n- Supply ConsensusTimer with milliseconds for finer precision (#2629)\n- Refactor / modernize Cmake (#2629)\n- Add delimiter when appending to cmake_cxx_flags (#2650)\n- Remove using namespace declarations at namespace scope in headers (#2650)\n\n**Bug Fixes**\n\n- Deprecate the ‘sign’ and ‘sign_for’ APIs (#2657)\n- Use liquidity from strands that consume too many offers, which will be enabled on fix1515 Amendment (#2546)\n- Fix a corner case when decoding base64 (#2605)\n- Trim space in Endpoint::from_string (#2593)\n- Correctly suppress sent messages (#2564)\n- Detect when a unit test child process crashes (#2415)\n- Handle WebSocket construction exceptions (#2629)\n- Improve JSON exception handling (#2605)\n- Add missing virtual destructors (#2532)\n\n\n## Version 1.0.0.\n\nThe `rippled` 1.0.0 release includes incremental improvements to several previously released features.\n\n**New and Updated Features**\n\n- The **history sharding** functionality has been improved. Instances can now use the shard store to satisfy ledger requests.\n- Change permessage-deflate and compress defaults (RIPD-506)\n- Update validations on UNL change (RIPD-1566)\n\n**Bug Fixes**\n\n- Add `check`, `escrow`, and `pay_chan` to `ledger_entry` (RIPD-1600)\n- Clarify Escrow semantics (RIPD-1571)\n\n\n## Version 0.90.1\n\nThe `rippled` 0.90.1 release includes fixes for issues reported by external security researchers. These issues, when exploited, could cause a rippled instance to restart or, in some circumstances, stop executing. While these issues can result in a denial of service attack, none affect the integrity of the XRP Ledger and no user funds, including XRP, are at risk.\n\n**New and Updated Features**\n\nThis release has no new features.\n\n**Bug Fixes**\n\n- Address issues identified by external review:\n    - Verify serialized public keys more strictly before using them\n      (RIPD-1617, RIPD-1619, RIPD-1621)\n    - Eliminate a potential out-of-bounds memory access in the base58\n      encoding/decoding logic (RIPD-1618)\n    - Avoid invoking undefined behavior in memcpy (RIPD-1616)\n    - Limit STVar recursion during deserialization (RIPD-1603)\n- Use lock when creating a peer shard rangeset\n\n\n## Version 0.90.0\n\nThe `rippled` 0.90.0 release introduces several features and enhancements that improve the reliability, scalability and security of the XRP Ledger.\n\nHighlights of this release include:\n\n- The `DepositAuth` amendment, which lets an account strictly reject any incoming money from transactions sent by other accounts.\n- The `Checks` amendment, which allows users to create deferred payments that can be cancelled or cashed by their intended recipients.\n- **History Sharding**, which allows `rippled` servers to distribute historical ledger data if they agree to dedicate storage for segments of ledger history.\n- New **Preferred Ledger by Branch** semantics which improve the logic that allow a server to decide which ledger it should base future ledgers on when there are multiple candidates.\n\n**New and Updated Features**\n\n- Add support for Deposit Authorization account root flag ([#2239](https://github.com/ripple/rippled/issues/2239))\n- Implement history shards ([#2258](https://github.com/ripple/rippled/issues/2258))\n- Preferred ledger by branch ([#2300](https://github.com/ripple/rippled/issues/2300))\n- Redesign Consensus Simulation Framework ([#2209](https://github.com/ripple/rippled/issues/2209))\n- Tune for higher transaction processing ([#2294](https://github.com/ripple/rippled/issues/2294))\n- Optimize queries for `account_tx` to work around SQLite query planner ([#2312](https://github.com/ripple/rippled/issues/2312))\n- Allow `Journal` to be copied/moved ([#2292](https://github.com/ripple/rippled/issues/2292))\n- Cleanly report invalid `[server]` settings ([#2305](https://github.com/ripple/rippled/issues/2305))\n- Improve log scrubbing ([#2358](https://github.com/ripple/rippled/issues/2358))\n- Update `rippled-example.cfg` ([#2307](https://github.com/ripple/rippled/issues/2307))\n- Force json commands to be objects ([#2319](https://github.com/ripple/rippled/issues/2319))\n- Fix cmake clang build for sanitizers ([#2325](https://github.com/ripple/rippled/issues/2325))\n- Allow `account_objects` RPC to filter by “check” ([#2356](https://github.com/ripple/rippled/issues/2356))\n- Limit nesting of json commands ([#2326](https://github.com/ripple/rippled/issues/2326))\n- Unit test that `sign_for` returns a correct hash ([#2333](https://github.com/ripple/rippled/issues/2333))\n- Update Visual Studio build instructions ([#2355](https://github.com/ripple/rippled/issues/2355))\n- Force boost static linking for MacOS builds ([#2334](https://github.com/ripple/rippled/issues/2334))\n- Update MacOS build instructions ([#2342](https://github.com/ripple/rippled/issues/2342))\n- Add dev docs generation to Jenkins ([#2343](https://github.com/ripple/rippled/issues/2343))\n- Poll if process is still alive in Test.py ([#2290](https://github.com/ripple/rippled/issues/2290))\n- Remove unused `beast::currentTimeMillis()` ([#2345](https://github.com/ripple/rippled/issues/2345))\n\n\n**Bug Fixes**\n- Improve error message on mistyped command ([#2283](https://github.com/ripple/rippled/issues/2283))\n- Add missing includes ([#2368](https://github.com/ripple/rippled/issues/2368))\n- Link boost statically only when requested ([#2291](https://github.com/ripple/rippled/issues/2291))\n- Unit test logging fixes ([#2293](https://github.com/ripple/rippled/issues/2293))\n- Fix Jenkins pipeline for branches ([#2289](https://github.com/ripple/rippled/issues/2289))\n- Avoid AppVeyor stack overflow ([#2344](https://github.com/ripple/rippled/issues/2344))\n- Reduce noise in log ([#2352](https://github.com/ripple/rippled/issues/2352))\n\n\n## Version 0.81.0\n\nThe `rippled` 0.81.0 release introduces changes that improve the scalability of the XRP Ledger and transitions the recommended validator configuration to a new hosted site, as described in Ripple's [Decentralization Strategy Update](https://ripple.com/dev-blog/decentralization-strategy-update/) post.\n\n**New and Updated Features**\n\n- New hosted validator configuration.\n\n\n**Bug Fixes**\n\n- Optimize queries for account_tx to work around SQLite query planner ([#2312](https://github.com/ripple/rippled/issues/2312))\n\n\n## Version 0.80.2\n\nThe `rippled` 0.80.2 release introduces changes that improve the scalability of the XRP Ledger.\n\n**New and Updated Features**\n\nThis release has no new features.\n\n**Bug Fixes**\n\n- Do not dispatch a transaction received from a peer for processing if it has already been dispatched within the past ten seconds.\n- Increase the number of transaction handlers that can be in flight in the job queue and decrease the relative cost for peers to share transaction and ledger data.\n- Make better use of resources by adjusting the number of threads we initialize, by reverting commit [#68b8ffd](https://github.com/ripple/rippled/commit/68b8ffdb638d07937f841f7217edeb25efdb3b5d).\n\n## Version 0.80.1\n\nThe `rippled` 0.80.1 release provides several enhancements in support of published validator lists and corrects several bugs.\n\n**New and Updated Features**\n\n- Allow including validator manifests in published list ([#2278](https://github.com/ripple/rippled/issues/2278))\n- Add validator list RPC commands ([#2242](https://github.com/ripple/rippled/issues/2242))\n- Support [SNI](https://en.wikipedia.org/wiki/Server_Name_Indication) when querying published list sites and use Windows system root certificates ([#2275](https://github.com/ripple/rippled/issues/2275))\n- Grow TxQ expected size quickly, shrink slowly ([#2235](https://github.com/ripple/rippled/issues/2235))\n\n**Bug Fixes**\n\n- Make consensus quorum unreachable if validator list expires ([#2240](https://github.com/ripple/rippled/issues/2240))\n- Properly use ledger hash to break ties when determing working ledger for consensus ([#2257](https://github.com/ripple/rippled/issues/2257))\n- Explictly use std::deque for missing node handler in SHAMap code ([#2252](https://github.com/ripple/rippled/issues/2252))\n- Verify validator token manifest matches private key ([#2268](https://github.com/ripple/rippled/issues/2268))\n\n\n## Version 0.80.0\n\nThe `rippled` 0.80.0 release introduces several enhancements that improve the reliability, scalability and security of the XRP Ledger.\n\nHighlights of this release include:\n\n- The `SortedDirectories` amendment, which allows the entries stored within a page to be sorted, and corrects a technical flaw that could, in some edge cases, prevent an empty intermediate page from being deleted.\n- Changes to the UNL and quorum rules\n  + Use a fixed size UNL if the total listed validators are below threshold\n  + Ensure a quorum of 0 cannot be configured\n  + Set a quorum to provide Byzantine fault tolerance until a threshold of total validators is exceeded, at which time the quorum is 80%\n\n**New and Updated Features**\n\n- Improve directory insertion and deletion ([#2165](https://github.com/ripple/rippled/issues/2165))\n- Move consensus thread safety logic from the generic implementation in Consensus into the RCL adapted version RCLConsensus ([#2106](https://github.com/ripple/rippled/issues/2106))\n- Refactor Validations class into a generic version that can be adapted ([#2084](https://github.com/ripple/rippled/issues/2084))\n- Make minimum quorum Byzantine fault tolerant ([#2093](https://github.com/ripple/rippled/issues/2093))\n- Make amendment blocked state thread-safe and simplify a constructor ([#2207](https://github.com/ripple/rippled/issues/2207))\n- Use ledger hash to break ties ([#2169](https://github.com/ripple/rippled/issues/2169))\n- Refactor RangeSet ([#2113](https://github.com/ripple/rippled/issues/2113))\n\n**Bug Fixes**\n\n- Fix an issue where `setAmendmentBlocked` is only called when processing the `EnableAmendment` transaction for the amendment ([#2137](https://github.com/ripple/rippled/issues/2137))\n- Track escrow in recipient's owner directory ([#2212](https://github.com/ripple/rippled/issues/2212))\n\n## Version 0.70.2\n\nThe `rippled` 0.70.2 release corrects an emergent behavior which causes large numbers of transactions to get\nstuck in different nodes' open ledgers without being passed on to validators, resulting in a spike in the open\nledger fee on those nodes.\n\n**New and Updated Features**\n\nThis release has no new features.\n\n**Bug Fixes**\n\n- Recent fee rises and TxQ issues ([#2215](https://github.com/ripple/rippled/issues/2215))\n\n\n## Version 0.70.1\n\nThe `rippled` 0.70.1 release corrects a technical flaw in the newly refactored consensus code that could cause a node to get stuck in consensus due to stale votes from a\npeer, and allows compiling `rippled` under the 1.1.x releases of OpenSSL.\n\n**New and Updated Features**\n\nThis release has no new features.\n\n**Bug Fixes**\n\n- Allow compiling against OpenSSL 1.1.0 ([#2151](https://github.com/ripple/rippled/pull/2151))\n- Log invariant check messages at \"fatal\" level ([2154](https://github.com/ripple/rippled/pull/2154))\n- Fix the consensus code to update all disputed transactions after a node changes a position ([2156](https://github.com/ripple/rippled/pull/2156))\n\n\n## Version 0.70.0\n\nThe `rippled` 0.70.0 release introduces several enhancements that improve the reliability, scalability and security of the network.\n\nHighlights of this release include:\n\n- The `FlowCross` amendment, which streamlines offer crossing and autobrigding logic by leveraging the new “Flow” payment engine.\n- The `EnforceInvariants` amendment, which can safeguard the integrity of the XRP Ledger by introducing code that executes after every transaction and ensures that the execution did not violate key protocol rules.\n- `fix1373`, which addresses an issue that would cause payments with certain path specifications to not be properly parsed.\n\n**New and Updated Features**\n\n- Implement and test invariant checks for transactions (#2054)\n- TxQ: Functionality to dump all queued transactions (#2020)\n- Consensus refactor for simulation/cleanup (#2040)\n- Payment flow code should support offer crossing (#1884)\n- make `Config` init extensible via lambda (#1993)\n- Improve Consensus Documentation (#2064)\n- Refactor Dependencies & Unit Test Consensus (#1941)\n- `feature` RPC test (#1988)\n- Add unit Tests for handlers/TxHistory.cpp (#2062)\n- Add unit tests for handlers/AccountCurrenciesHandler.cpp (#2085)\n- Add unit test for handlers/Peers.cpp (#2060)\n- Improve logging for Transaction affects no accounts warning (#2043)\n- Increase logging in PeerImpl fail (#2043)\n- Allow filtering of ledger objects by type in RPC (#2066)\n\n**Bug Fixes**\n\n- Fix displayed warning when generating brain wallets (#2121)\n- Cmake build does not append '+DEBUG' to the version info for non-unity builds\n- Crossing tiny offers can misbehave on RCL\n- `asfRequireAuth` flag not always obeyed (#2092)\n- Strand creating is incorrectly accepting invalid paths\n- JobQueue occasionally crashes on shutdown (#2025)\n- Improve pseudo-transaction handling (#2104)\n\n## Version 0.60.3\n\nThe `rippled` 0.60.3 release helps to increase the stability of the network under heavy load.\n\n**New and Updated Features**\n\nThis release has no new features.\n\n**Bug Fixes**\n\nServer overlay improvements ([#2110](https://github.com/ripple/rippled/pull/2011))\n\n## Version 0.60.2\n\nThe `rippled` 0.60.2 release further strengthens handling of cases associated with a previously patched exploit, in which NoRipple flags were being bypassed by using offers.\n\n**New and Updated Features**\n\nThis release has no new features.\n\n**Bug Fixes**\n\nPrevent the ability to bypass the `NoRipple` flag using offers ([#7cd4d78](https://github.com/ripple/rippled/commit/4ff40d4954dfaa237c8b708c2126cb39566776da))\n\n## Version 0.60.1\n\nThe `rippled` 0.60.1 release corrects a technical flaw that resulted from using 32-bit space identifiers instead of the protocol-defined 16-bit values for Escrow and Payment Channel ledger entries. rippled version 0.60.1 also fixes a problem where the WebSocket timeout timer would not be cancelled when certain errors occurred during subscription streams. Ripple requires upgrading to rippled version 0.60.1 immediately.\n\n**New and Updated Feature**\n\nThis release has no new features.\n\n**Bug Fixes**\n\nCorrect calculation of Escrow and Payment Channel indices.\nFix WebSocket timeout timer issues.\n\n## Version 0.60.0\n\nThe `rippled` 0.60.0 release introduces several enhancements that improve the reliability and scalability of the Ripple Consensus Ledger (RCL), including features that add ledger interoperability by improving Interledger Protocol compatibility. Ripple recommends that all server operators upgrade to version 0.60.0 by Thursday, 2017-03-30, for service continuity.\n\nHighlights of this release include:\n\n- `Escrow` (previously called `SusPay`) which permits users to cryptographically escrow XRP on RCL with an expiration date, and optionally a hashlock crypto-condition. Ripple expects Escrow to be enabled via an Amendment named [`Escrow`](https://ripple.com/build/amendments/#escrow) on Thursday, 2017-03-30. See below for details.\n- Dynamic UNL Lite, which allows `rippled` to automatically adjust which validators it trusts based on recommended lists from trusted publishers.\n\n**New and Updated Features**\n\n- Add `Escrow` support (#2039)\n- Dynamize trusted validator list and quorum (#1842)\n- Simplify fee handling during transaction submission (#1992)\n- Publish server stream when fee changes (#2016)\n- Replace manifest with validator token (#1975)\n- Add validator key revocations (#2019)\n- Add `SecretKey` comparison operator (#2004)\n- Reduce `LEDGER_MIN_CONSENSUS` (#2013)\n- Update libsecp256k1 and Beast B30 (#1983)\n- Make `Config` extensible via lambda (#1993)\n- WebSocket permessage-deflate integration (#1995)\n- Do not close socket on a foreign thread (#2014)\n- Update build scripts to support latest boost and ubuntu distros (#1997)\n- Handle protoc targets in scons ninja build (#2022)\n- Specify syntax version for ripple.proto file (#2007)\n- Eliminate protocol header dependency (#1962)\n- Use gnu gold or clang lld linkers if available (#2031)\n- Add tests for `lookupLedger` (#1989)\n- Add unit test for `get_counts` RPC method (#2011)\n- Add test for `transaction_entry` request (#2017)\n- Unit tests of RPC \"sign\" (#2010)\n- Add failure only unit test reporter (#2018)\n\n**Bug Fixes**\n\n- Enforce rippling constraints during payments (#2049)\n- Fix limiting step re-execute bug (#1936)\n- Make \"wss\" work the same as \"wss2\" (#2033)\n- Config test uses unique directories for each test (#1984)\n- Check for malformed public key on payment channel (#2027)\n- Send a websocket ping before timing out in server (#2035)\n\n\n## Version 0.50.3\n\nThe `rippled` 0.50.3 release corrects a reported exploit that would allow a combination of trust lines and order books in a payment path to bypass the blocking effect of the [`NoRipple`](https://ripple.com/build/understanding-the-noripple-flag/) flag. Ripple recommends that all server operators immediately upgrade to version 0.50.3.\n\n**New and Updated Features**\n\nThis release has no new features.\n\n**Bug Fixes**\n\nCorrect a reported exploit that would allow a combination of trust lines and order books in a payment path to bypass the blocking effect of the “NoRipple” flag.\n\n\n## Version 0.50.2\n\nThe `rippled` 0.50.2 release adjusts the default TLS cipher list and corrects a flaw that would not allow an SSL handshake to properly complete if the port was configured using the `wss` keyword. Ripple recommends upgrading to 0.50.2 only if server operators are running rippled servers that accept client connections over TLS.\n\n**New and Updated Features**\n\nThis release has no new features.\n\n**Bug Fixes**\n\nAdjust the default cipher list and correct a flaw that would not allow an SSL handshake to properly complete if the port was configured using the `wss` keyword (#1985)\n\n\n## Version 0.50.0\n\nThe `rippled` 0.50.0 release includes TickSize, which allows gateways to set a \"tick size\" for assets they issue to help promote faster price discovery and deeper liquidity, as well as reduce transaction spam and ledger churn on RCL. Ripple expects TickSize to be enabled via an Amendment called TickSize on Tuesday, 2017-02-21.\n\nYou can [update to the new version](https://ripple.com/build/rippled-setup/#updating-rippled) on Red Hat Enterprise Linux 7 or CentOS 7 using yum. For other platforms, please [compile the new version from source](https://wiki.ripple.com/Rippled_build_instructions).\n\n**New and Updated Features**\n\n**Tick Size**\n\nCurrently, offers on RCL can differ by as little as one part in a quadrillion. This means that there is essentially no value to placing an offer early, as an offer placed later at a microscopically better price gets priority over it. The [TickSize](https://ripple.com/build/amendments/#ticksize) Amendment solves this problem by introducing a minimum tick size that a price must move for an offer to be considered to be at a better price. The tick size is controlled by the issuers of the assets involved.\n\nThis change lets issuers quantize the exchange rates of offers to use a specified number of significant digits. Gateways must enable a TickSize on their account for this feature to benefit them. A single AccountSet transaction may set a `TickSize` parameter. Legal values are 0 and 3-15 inclusive. Zero removes the setting. 3-15 allow that many decimal digits of precision in the pricing of offers for assets issued by this account. It will still be possible to place an offer to buy or sell any amount of an asset and the offer will still keep that amount as exactly as it does now. If an offer involves two assets that each have a tick size, the smaller number of significant figures (larger ticks) controls.\n\nFor asset pairs with XRP, the tick size imposed, if any, is the tick size of the issuer of the non-XRP asset. For asset pairs without XRP, the tick size imposed, if any, is the smaller of the two issuer's configured tick sizes.\n\nThe tick size is imposed by rounding the offer quality down to the nearest tick and recomputing the non-critical side of the offer. For a buy, the amount offered is rounded down. For a sell, the amount charged is rounded up.\n\nThe primary expected benefit of the TickSize amendment is the reduction of bots fighting over the tip of the order book, which means:\n- Quicker price discovery as outpricing someone by a microscopic amount is made impossible (currently bots can spend hours outbidding each other with no significant price movement)\n- A reduction in offer creation and cancellation spam\n- Traders can't outbid by a microscopic amount\n- More offers left on the books as priority\n\nWe also expect larger tick sizes to benefit market makers in the following ways:\n- They increase the delta between the fair market value and the trade price, ultimately reducing spreads\n- They prevent market makers from consuming each other's offers due to slight changes in perceived fair market value, which promotes liquidity\n- They promote faster price discovery by reducing the back and forths required to move the price by traders who don't want to move the price more than they need to\n- They reduce transaction spam by reducing fighting over the tip of the order book and reducing the need to change offers due to slight price changes\n- They reduce ledger churn and metadata sizes by reducing the number of indexes each order book must have\n- They allow the order book as presented to traders to better reflect the actual book since these presentations are inevitably aggregated into ticks\n\n**Hardened TLS configuration**\n\nThis release updates the default TLS configuration for rippled. The new release supports only 2048-bit DH parameters and defines a new default set of modern ciphers to use, removing support for ciphers and hash functions that are no longer considered secure.\n\nServer administrators who wish to have different settings can configure custom global and per-port cipher suites in the configuration file using the `ssl_ciphers` directive.\n\n**0.50.0 Change Log**\n\nRemove websocketpp support (#1910)\n\nIncrease OpenSSL requirements & harden default TLS cipher suites (#1913)\n\nMove test support sources out of ripple directory (#1916)\n\nEnhance ledger header RPC commands (#1918)\n\nAdd support for tick sizes (#1922)\n\nPort discrepancy-test.coffee to c++ (#1930)\n\nRemove redundant call to `clearNeedNetworkLedger` (#1931)\n\nPort freeze-test.coffee to C++ unit test. (#1934)\n\nFix CMake docs target to work if `BOOST_ROOT` is not set (#1937)\n\nImprove setup for account_tx paging test (#1942)\n\nEliminate npm tests (#1943)\n\nPort uniport js test to cpp (#1944)\n\nEnable amendments in genesis ledger (#1944)\n\nTrim ledger data in Discrepancy_test (#1948)\n\nAdd `current_ledger` field to `fee` result (#1949)\n\nCleanup unit test support code (#1953)\n\nAdd ledger save / load tests (#1955)\n\nRemove unused websocket files (#1957)\n\nUpdate RPC handler role/usage (#1966)\n\n**Bug Fixes**\n\nValidator's manifest not forwarded beyond directly connected peers (#1919)\n\n**Upcoming Features**\n\nWe expect the previously announced Suspended Payments feature, which introduces new transaction types to the Ripple protocol that will permit users to cryptographically escrow XRP on RCL, to be enabled via the [SusPay](https://ripple.com/build/amendments/#suspay) Amendment on Tuesday, 2017-02-21.\n\nAlso, we expect support for crypto-conditions, which are signature-like structures that can be used with suspended payments to support ILP integration, to be included in the next rippled release scheduled for March.\n\nLastly, we do not have an update on the previously announced changes to the hash tree structure that rippled uses to represent a ledger, called [SHAMapV2](https://ripple.com/build/amendments/#shamapv2). At the time of activation, this amendment will require brief scheduled allowable unavailability while the changes to the hash tree structure are computed by the network. We will keep the community updated as we progress towards this date (TBA).\n\n\n## Version 0.40.1\n\nThe `rippled` 0.40.1 release  increases SQLite database limits in all rippled servers. Ripple recommends upgrading to 0.40.1 only if server operators are running rippled servers with full-history of the ledger. There are no new or updated features in the 0.40.1 release.\n\nYou can update to the new version on Red Hat Enterprise Linux 7 or CentOS 7 using yum. For other platforms, please compile the new version from source.\n\n**New and Updated Features**\n\nThis release has no new features.\n\n**Bug Fixes**\n\nIncrease SQLite database limits to prevent full-history servers from crashing when restarting. (#1961)\n\n## Version 0.40.0\n\nThe `rippled` 0.40.0 release includes Suspended Payments, a new transaction type on the Ripple network that functions similar to an escrow service, which permits users cryptographically escrow XRP on RCL with an expiration date. Ripple expects Suspended Payments to be enabled via an Amendment named [SusPay](https://ripple.com/build/amendments/#suspay) on Tuesday, 2017-01-17.\n\nYou can update to the new version on Red Hat Enterprise Linux 7 or CentOS 7 using yum. For other platforms, please compile the new version from source.\n\n**New and Updated Features**\n\nPreviously, Ripple announced the introduction of Payment Channels during the release of rippled version 0.33.0, which permit scalable, off-ledger checkpoints of high volume, low value payments flowing in a single direction. This was the first step in a multi-phase effort to make RCL more scalable and to support Interledger Protocol (ILP). Ripple expects Payment Channels to be enabled via an Amendment called [PayChan](https://ripple.com/build/amendments/#paychan) on a future date to be determined.\n\nIn the second phase towards making RCL more scalable and compatible with ILP, Ripple is introducing Suspended Payments, a new transaction type on the Ripple network that functions similar to an escrow service, which permits users to cryptographically escrow XRP on RCL with an expiration date. Ripple expects Suspended Payments to be enabled via an Amendment named [SusPay](https://ripple.com/build/amendments/#suspay) on Tuesday, 2017-01-17.\n\nA Suspended Payment can be created, which deducts the funds from the sending account. It can then be either fulfilled or canceled. It can only be fulfilled if the fulfillment transaction makes it into a ledger with a CloseTime lower than the expiry date of the transaction. It can be canceled with a transaction that makes it into a ledger with a CloseTime greater than the expiry date of the transaction.\n\nIn the third phase towards making RCL more scalable and compatible with ILP, Ripple plans to introduce additional library support for crypto-conditions, which are distributable event descriptions written in a standard format that describe how to recognize a fulfillment message without saying exactly what the fulfillment is. Fulfillments are cryptographically verifiable messages that prove an event occurred. If you transmit a fulfillment, then everyone who has the condition can agree that the condition has been met. Fulfillment requires the submission of a signature that matches the condition (message hash and public key). This format supports multiple algorithms, including different hash functions and cryptographic signing schemes. Crypto-conditions can be nested in multiple levels, with each level possibly having multiple signatures.\n\nLastly, we do not have an update on the previously announced changes to the hash tree structure that rippled uses to represent a ledger, called [SHAMapV2](https://ripple.com/build/amendments/#shamapv2). This will require brief scheduled allowable downtime while the changes to the hash tree structure are propagated by the network. We will keep the community updated as we progress towards this date (TBA).\n\nConsensus refactor (#1874)\n\nBug Fixes\n\nCorrect an issue in payment flow code that did not remove an unfunded offer (#1860)\n\nSign validator manifests with both ephemeral and master keys (#1865)\n\nCorrectly parse multi-buffer JSON messages (#1862)\n\n\n## Version 0.33.0\n\nThe `rippled` 0.33.0 release includes an improved version of the payment code, which we expect to be activated via Amendment on Wednesday, 2016-10-20 with the name [Flow](https://ripple.com/build/amendments/#flow). We are also introducing XRP Payment Channels, a new structure in the ledger designed to support [Interledger Protocol](https://interledger.org/) trust lines as balances get substantial, which we expect to be activated via Amendment on a future date (TBA) with the name [PayChan](https://ripple.com/build/amendments/#paychan). Lastly, we will be introducing changes to the hash tree structure that rippled uses to represent a ledger, which we expect to be available via Amendment on a future date (TBA) with the name [SHAMapV2](https://ripple.com/build/amendments/#shamapv2).\n\nYou can [update to the new version](https://ripple.com/build/rippled-setup/#updating-rippled) on Red Hat Enterprise Linux 7 or CentOS 7 using yum. For other platforms, please [compile the new version from source](https://wiki.ripple.com/Rippled_build_instructions).\n\n** New and Updated Features **\n\nA fixed version of the new payment processing engine, which we initially announced on Friday, 2016-07-29, is expected to be available via Amendment on Wednesday, 2016-10-20 with the name [Flow](https://ripple.com/build/amendments/#flow). The new payments code adds no new features, but improves efficiency and robustness in payment handling.\n\nThe Flow code may occasionally produce slightly different results than the old payment processing engine due to the effects of floating point rounding.\n\nWe will be introducing changes to the hash tree structure that rippled uses to represent a ledger, which we expect to be activated via Amendment on a future date (TBA) with the name [SHAMapV2](https://ripple.com/build/amendments/#shamapv2). The new structure is more compact and efficient than the previous version. This affects how ledger hashes are calculated, but has no other user-facing consequences. The activation of the SHAMapV2 amendment will require brief scheduled allowable downtime, while the changes to the hash tree structure are propagated by the network. We will keep the community updated as we progress towards this date (TBA).\n\nIn an effort to make RCL more scalable and to support Interledger Protocol (ILP) trust lines as balances get more substantial, we’re introducing XRP Payment Channels, a new structure in the ledger, which we expect to be available via Amendment on a future date (TBA) with the name [PayChan](https://ripple.com/build/amendments/#paychan).\n\nXRP Payment Channels permit scalable, intermittent, off-ledger settlement of ILP trust lines for high volume payments flowing in a single direction. For bidirectional channels, an XRP Payment Channel can be used in each direction. The recipient can claim any unpaid balance at any time. The owner can top off the channel as needed. The owner must wait out a delay to close the channel to give the recipient a chance to supply any claims. The total amount paid increases monotonically as newer claims are issued.\n\nThe initial concept behind payment channels was discussed as early as 2011 and the first implementation was done by Mike Hearn in bitcoinj. Recent work being done by Lightning Network has showcased examples of the many use cases for payment channels. The introduction of XRP Payment Channels allows for a more efficient integration between RCL and ILP to further support enterprise use cases for high volume payments.\n\nAdded `getInfoRippled.sh` support script to gather health check for rippled servers [RIPD-1284]\n\nThe `account_info` command can now return information about queued transactions - [RIPD-1205]\n\nAutomatically-provided sequence numbers now consider the transaction queue - [RIPD-1206]\n\nThe `server_info` and `server_state` commands now include the queue-related escalated fee factor in the load_factor field of the response - [RIPD-1207]\n\nA transaction with a high transaction cost can now cause transactions from the same sender queued in front of it to get into the open ledger if the transaction costs are high enough on average across all such transactions. - [RIPD-1246]\n\nReorganization: Move `LoadFeeTrack` to app/tx and clean up functions - [RIPD-956]\n\nReorganization: unit test source files -  [RIPD-1132]\n\nReorganization: NuDB stand-alone repository - [RIPD-1163]\n\nReorganization: Add `BEAST_EXPECT` to Beast - [RIPD-1243]\n\nReorganization: Beast 64-bit CMake/Bjam target on Windows - [RIPD-1262]\n\n** Bug Fixes **\n\n`PaymentSandbox::balanceHook` can return the wrong issuer, which could cause the transfer fee to be incorrectly by-passed in rare circumstances. [RIPD-1274, #1827]\n\nPrevent concurrent write operations in websockets [#1806]\n\nAdd HTTP status page for new websocket implementation [#1855]\n\n\n## Version 0.32.1\n\nThe `rippled` 0.32.1 release includes an improved version of the payment code, which we expect to be available via Amendment on Wednesday, 2016-08-24 with the name FlowV2, and a completely new implementation of the WebSocket protocol for serving clients.\n\nYou can [update to the new version](https://ripple.com/build/rippled-setup/#updating-rippled) on Red Hat Enterprise Linux 7 or CentOS 7 using yum. For other platforms, please [compile the new version from source](https://wiki.ripple.com/Rippled_build_instructions).\n\n**New and Updated Features**\n\nAn improved version of the payment processing engine, which we expect to be available via Amendment on Wednesday, 2016-08-24 with the name “FlowV2”. The new payments code adds no new features, but improves efficiency and robustness in payment handling.\n\nThe FlowV2 code may occasionally produce slightly different results than the old payment processing engine due to the effects of floating point rounding. Once FlowV2 is enabled on the network then old servers without the FlowV2 amendment will lose sync more frequently because of these differences.\n\n**Beast WebSocket**\n\nA completely new implementation of the WebSocket protocol for serving clients is available as a configurable option for `rippled` administrators. To enable this new implementation, change the “protocol” field in `rippled.cfg` from “ws” to “ws2” (or from “wss” to “wss2” for Secure WebSockets), as illustrated in this example:\n\n    [port_ws_public]\n    port = 5006\n    ip = 0.0.0.0\n    protocol = wss2\n\nThe new implementation paves the way for increased reliability and future performance when submitting commands over WebSocket. The behavior and syntax of commands should be identical to the previous implementation. Please report any issues to support@ripple.com. A future version of rippled will remove the old WebSocket implementation, and use only the new one.\n\n**Bug fixes**\n\nFix a non-exploitable, intermittent crash in some client pathfinding requests (RIPD-1219)\n\nFix a non-exploitable crash caused by a race condition in the HTTP server. (RIPD-1251)\n\nFix bug that could cause a previously fee queued transaction to not be relayed after being in the open ledger for an extended time without being included in a validated ledger. Fix bug that would allow an account to have more than the allowed limit of transactions in the fee queue. Fix bug that could crash debug builds in rare cases when replacing a dropped transaction. (RIPD-1200)\n\nRemove incompatible OS X switches in Test.py (RIPD-1250)\n\nAutofilling a transaction fee (sign / submit) with the experimental `x-queue-okay` parameter will use the user’s maximum fee if the open ledger fee is higher, improving queue position, and giving the tx more chance to succeed. (RIPD-1194)\n\n\n\n## Version 0.32.0\n\nThe `rippled` 0.32.0 release improves transaction queue which now supports batching and can hold up to 10 transactions per account, allowing users to queue multiple transactions for processing when the network load is high. Additionally, the `server_info` and `server_state` commands now include information on transaction cost multipliers and the fee command is available to unprivileged users. We advise rippled operators to upgrade immediately.\n\nYou can update to the new version on Red Hat Enterprise Linux 7 or CentOS 7 using yum. For other platforms, please compile the new version from source.\n\n**New and Updated Features**\n\n- Allow multiple transactions per account in transaction queue (RIPD-1048). This also introduces a new transaction engine code, `telCAN_NOT_QUEUE`.\n- Charge pathfinding consumers per source currency (RIPD-1019): The IP address used to perform pathfinding operations is now charged an additional resource increment for each source currency in the path set.\n- New implementation of payment processing engine. This implementation is not yet enabled by default.\n- Include amendments in validations subscription\n- Add C++17 compatibility\n- New WebSocket server implementation with Beast.WebSocket library. The new library offers a stable, high-performance websocket server implementation. To take advantage of this implementation, change websocket protocol under rippled.cfg from wss and ws to wss2 and ws2 under `[port_wss_admin]` and `[port_ws_public]` stanzas:\n```\n     [port_wss_admin]\n     port = 51237\n     ip = 127.0.0.1\n     admin = 127.0.0.1\n     protocol = wss2\n\n     [port_ws_public]\n     port = 51233\n     ip = 0.0.0.0\n     protocol = wss2, ws2\n```\n- The fee command is now public (RIPD-1113)\n- The fee command checks open ledger rules (RIPD-1183)\n- Log when number of available file descriptors is insufficient (RIPD-1125)\n- Publish all validation fields for signature verification\n- Get quorum and trusted master validator keys from validators.txt\n- Standalone mode uses temp DB files by default (RIPD-1129): If a [database_path] is configured, it will always be used, and tables will be upgraded on startup.\n- Include config manifest in server_info admin response (RIPD-1172)\n\n**Bug fixes**\n\n- Fix history acquire check (RIPD-1112)\n- Correctly handle connections that fail security checks (RIPD-1114)\n- Fix secured Websocket closing\n- Reject invalid MessageKey in SetAccount handler (RIPD-308, RIPD-990)\n- Fix advisory delete effect on history acquisition (RIPD-1112)\n- Improve websocket send performance (RIPD-1158)\n- Fix XRP bridge payment bug (RIPD-1141)\n- Improve error reporting for wallet_propose command. Also include a warning if the key used may be an insecure, low-entropy key. (RIPD-1110)\n\n**Deprecated features**\n\n- Remove obsolete sendGetPeers support (RIPD-164)\n- Remove obsolete internal command (RIPD-888)\n\n\n\n\n## Version 0.31.2\n\nThe `rippled` 0.31.2 release corrects issues with the fee escalation algorithm. We advise `rippled` operators to upgrade immediately.\n\nYou can [update to the new version](https://ripple.com/build/rippled-setup/#updating-rippled) on Red Hat Enterprise Linux 7 or CentOS 7 using yum. For other platforms, please [compile the new version from source](https://wiki.ripple.com/Rippled_build_instructions).\n\n**New and Updated Features**\n\nThis release has no new features.\n\n**Bug Fixes**\n\n- A defect in the fee escalation algorithm that caused network fees to escalate more rapidly than intended has been corrected. (RIPD-1177)\n- The minimum local fee advertised by validators will no longer be adjusted upwards.\n\n\n\n## Version 0.31.1\n\nThe `rippled` 0.31.1 release contains one important bug fix. We advise `rippled` operators to upgrade immediately.\n\nYou can [update to the new version](https://ripple.com/build/rippled-setup/#updating-rippled) on Red Hat Enterprise Linux 7 or CentOS 7 using yum. For other platforms, please [compile the new version from source](https://wiki.ripple.com/Rippled_build_instructions).\n\n**New and Updated Features**\n\nThis release has no new features.\n\n**Bug Fixes**\n\n`rippled` 0.31.1 contains the following fix:\n\n- Correctly handle ledger validations with no `LedgerSequence` field. Previous versions of `rippled` incorrectly assumed that the optional validation field would always be included. Current versions of the software always include the field, and gracefully handle its absence.\n\n\n\n## Version 0.31.0\n\n`rippled` 0.31.0 has been released.\n\nYou can [update to the new version](https://ripple.com/build/rippled-setup/#updating-rippled) on Red Hat Enterprise Linux 7 or CentOS 7 using yum.\n\nFor other platforms, please [compile the new version from source](https://wiki.ripple.com/Rippled_build_instructions). Use the `git log` command to confirm you have the correct source tree. The first log entry should be the change setting the version:\n\n\n     commit a5d58566386fd86ae4c816c82085fe242b255d2c\n     Author: Nik Bougalis <nikb@bougalis.net>\n     Date:   Sun Apr 17 18:02:02 2016 -0700\n\n         Set version to 0.31.0\n\n\n**Warnings**\n\nPlease expect a one-time delay when starting 0.31.0 while certain database indices are being built or rebuilt. The delay can be up to five minutes, during which CPU will spike and the server will appear unresponsive (no response to RPC, etc.).\n\nAdditionally, `rippled` 0.31.0 now checks at start-up time that it has sufficient open file descriptors available, and shuts down with an error message if it does not. Previous versions of `rippled` could run out of file descriptors unexpectedly during operation. If you get a file-descriptor error message, increase the number of file descriptors available to `rippled` (for example, editing `/etc/security/limits.conf`) and restart.\n\n**New and Updated Features**\n\n`rippled` 0.31.0 has the following new or updated features:\n\n- (New) [**Amendments**](https://ripple.com/build/amendments/) - A consensus-based system for introducing changes to transaction processing.\n- (New) [**Multi-Signing**](https://ripple.com/build/transactions/#multi-signing) - (To be enabled as an amendment) Allow transactions to be authorized by a list of signatures. (RIPD-182)\n- (New) **Transaction queue and FeeEscalation** - (To be enabled as an amendment) Include or defer transactions based on the [transaction cost](https://ripple.com/build/transaction-cost/) offered, for better behavior in DDoS conditions. (RIPD-598)\n- (Updated) Validations subscription stream now includes `ledger_index` field. (DEC-564)\n- (Updated) You can request SignerList information in the `account_info` command (RIPD-1061)\n\n**Closed Issues**\n\n`rippled` 0.31.0 has the following fixes and improvements:\n\n- Improve held transaction submission\n- Update SQLite from 3.8.11.1 to 3.11.0\n- Allow random seed with specified wallet_propose key_type (RIPD-1030)\n- Limit pathfinding source currency limits (RIPD-1062)\n- Speed up out of order transaction processing (RIPD-239)\n- Pathfinding optimizations\n- Streamlined UNL/validator list: The new code removes the ability to specify domain names in the [validators] configuration block, and no longer supports the [validators_site] option.\n- Add websocket client\n- Add description of rpcSENDMAX_MALFORMED error\n- Convert PathRequest to use std::chrono (RIPD-1069)\n- Improve compile-time OpenSSL version check\n- Clear old Validations during online delete (RIPD-870)\n- Return correct error code during unfunded offer cross (RIPD-1082)\n- Report delivered_amount for legacy account_tx queries.\n- Improve error message when signing fails (RIPD-1066)\n- Fix websocket deadlock\n\n\n\n\n## Version 0.30.1\n\nrippled 0.30.1 has been released. The commit can be found on GitHub at: <https://github.com/ripple/rippled/tree/0.30.1>\n\nPrior to building, please confirm you have the correct source tree with the **git log** command. The first log entry should be the change setting the version:\n\n     commit c717006c44126aa0edb3a36ca29ee30e7a72c1d3\n     Author: Nik Bougalis <nikb@bougalis.net>\n     Date:   Wed Feb 3 14:49:07 2016 -0800\n\n       Set version to 0.30.1\n\nThis release incorporates a number of important features, bugfixes and functional improvements. Please refer to the [Git commit history](https://github.com/ripple/rippled/commits/0.30.1) for more detailed information.\n\n**Release Overview**\n\nThe rippled team is proud to release rippled version 0.30.1. This version contains a several minor new features as well as significant improvements to the consensus algorithm that make it work faster and with more consistency. In the time we have been testing the new release on our validators, these changes have led to increased agreement and shorter close times between ledger versions, for approximately 40% more ledgers validated per day.\n\n**New Features**\n\n-   Secure gateway: configured IPs can forward identifying user data in HTTP headers, including user name and origin IP. If the user name exists, then resource limits are lifted for that session. See rippled-example.cfg for more information.\n-   Allow fractional fee multipliers (RIPD-626)\n-   Add “expiration” to account\\_offers (RIPD-1049)\n-   Add “owner\\_funds” to “transactions” array in RPC ledger (RIPD-1050)\n-   Add \"tx\" option to \"ledger\" command line\n-   Add server uptime in server\\_info\n-   Allow multiple incoming connections from the same IP\n-   Report connection uptime in peer command (RIPD-927)\n-   Permit pathfinding to be disabled by setting \\[path\\_search\\_max\\] to 0 in rippled.cfg file (RIPD-271)\n-   Add subscription to peer status changes (RIPD-579)\n\n**Improvements**\n\n-   Improvements to ledger\\_request response\n-   Improvements to validations proposal relaying (RIPD-1057)\n-   Improvements to consensus algorithm\n-   Ledger close time optimizations (RIPD-998, RIPD-791)\n-   Delete unfunded offers in predictable order\n\n**Development-Related Updates**\n\n-   Require boost 1.57\n-   Implement new coroutines (RIPD-1043)\n-   Force STAccount interface to 160-bit size (RIPD-994)\n-   Improve compile-time OpenSSL version check\n\n**Bug Fixes**\n\n-   Fix handling of secp256r1 signatures (RIPD-1040)\n-   Fix websocket messages dispatching\n-   Fix pathfinding early response (RIPD-1064)\n-   Handle account\\_objects empty response (RIPD-958)\n-   Fix delivered\\_amount reporting for minor ledgers (RIPD-1051)\n-   Fix setting admin privileges on websocket\n-   Fix race conditions in account\\_tx command (RIPD-1035)\n-   Fix to enforce no-ripple constraints\n\n**Assistance**\n\nFor assistance, please contact **integration@ripple.com**\n\n**More information**\n\nFor more information or assistance, the following resources will be of use:\n\n-   [Ripple Developer Forums](https://ripple.com/forum/viewforum.php?f=2)\n-   [IRC](https://webchat.freenode.net/?channels=#ripple)\n\n\n\n\n-----------------------------------------------------------\n\n## Version 0.30.0\n\nrippled 0.30.0 has been released. The commit can be found on GitHub at: <https://github.com/ripple/rippled/tree/0.30.0>\n\nPrior to building, please confirm you have the correct source tree with the **git log** command. The first log entry should be the change setting the version:\n\n     commit a8859b495b552fe1eb140771f0f2cb32d11d2ac2\n     Author: Vinnie Falco <vinnie.falco@gmail.com>\n     Date:   Wed Oct 21 18:26:02 2015 -0700\n\n        Set version to 0.30.0\n\nThis release incorporates a number of important features, bugfixes and functional improvements. Please refer to the [Git commit history](https://github.com/ripple/rippled/commits/0.30.0) for more detailed information.\n\n**Release Overview**\n\nAs part of Ripple Labs’ ongoing commitment toward protocol security, the rippled team would like to release rippled 0.30.0.\n\n**Toolchain support**\n\nThe minimum supported version of GCC used to compile rippled is v4.8. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Ubuntu_versions_older_than_13.10_:_Install_gcc_4.8) if you have not upgraded already.\n\nWhile it may be possible to compile rippled on (virtual) machines with 4GB of RAM, we recommend compiling on (virtual) machines with 8GB of RAM or more. If your build machine has more than one CPU (**`grep '^processor' /proc/cpuinfo | wc -l`**), you can use them to assist in the build process by compiling with the command **`scons -j[number of CPUs - 1]`**.\n\n**New Features**\n\n-   Honor markers in ledger\\_data requests ([RIPD-1010](https://ripplelabs.atlassian.net/browse/RIPD-1010)).\n-   New Amendment - **TrustSetAuth** (Not currently enabled) Create zero balance trust lines with auth flag ([RIPD-1003](https://ripplelabs.atlassian.net/browse/RIPD-1003)): this allows a TrustSet transaction to create a trust line if the only thing being changed is setting the tfSetfAuth flag.\n-   Randomize the initial transaction execution order for closed ledgers based on the hash of the consensus set ([RIPD-961](https://ripplelabs.atlassian.net/browse/RIPD-961)). **Activates on October 27, 2015 at 11:00 AM PCT**.\n-   Differentiate path\\_find response ([RIPD-1013](https://ripplelabs.atlassian.net/browse/RIPD-1013)).\n-   Convert all of an asset ([RIPD-655](https://ripplelabs.atlassian.net/browse/RIPD-655)).\n\n**Improvements**\n\n-   SHAMap improvements.\n-   Upgrade SQLite from 3.8.8.2 to 3.8.11.1.\n-   Limit the number of offers that can be consumed during crossing ([RIPD-1026](https://ripplelabs.atlassian.net/browse/RIPD-1026)).\n-   Remove unfunded offers on tecOVERSIZE ([RIPD-1026](https://ripplelabs.atlassian.net/browse/RIPD-1026)).\n-   Improve transport security ([RIPD-1029](https://ripplelabs.atlassian.net/browse/RIPD-1029)): to take full advantage of the improved transport security, servers with a single, static public IP address should add it to their configuration file, as follows:\n\n     [overlay]\n     public_ip=<ip_address>\n\n**Development-Related Updates**\n\n-   Transitional support for gcc 5.2: to enable support define the environmental variable `RIPPLED_OLD_GCC_ABI`=1\n-   Transitional support for C++ 14: to enable support define the environment variable `RIPPLED_USE_CPP_14`=1\n-   Visual Studio 2015 support\n-   Updates to integration tests\n-   Add uptime to crawl data ([RIPD-997](https://ripplelabs.atlassian.net/browse/RIPD-997))\n\n**Assistance**\n\nFor assistance, please contact **integration@ripple.com**\n\n**More information**\n\nFor more information or assistance, the following resources will be of use:\n\n-   [Ripple Developer Forums](https://ripple.com/forum/viewforum.php?f=2)\n-   [IRC](https://webchat.freenode.net/?channels=#ripple)\n\n\n\n\n-----------------------------------------------------------\n\n## Version 0.29.0\n\nrippled 0.29.0 has been released. The commit can be found on GitHub at: <https://github.com/ripple/rippled/commits/0.29.0>\n\nPrior to building, please confirm you have the correct source tree with the **git log** command. The first log entry should be the change setting the version:\n\n     commit 5964710f736e258c7892e8b848c48952a4c7856c\n     Author: Nik Bougalis <nikb@bougalis.net>\n     Date:   Tue Aug 4 13:22:45 2015 -0700\n\n        Set version to 0.29.0\n\nThis release incorporates a number of important features, bugfixes and functional improvements. Please refer to the [Git commit history](https://github.com/ripple/rippled/commits/0.29.0) for more detailed information.\n\n**Release Overview**\n\nAs part of Ripple Labs’ ongoing commitment toward protocol security, the rippled team would like to announce rippled release 0.29.0.\n\n**Toolchain support**\n\nThe minimum supported version of GCC used to compile rippled is v4.8. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Ubuntu_versions_older_than_13.10_:_Install_gcc_4.8) if you have not upgraded already.\n\nWhile it may be possible to compile rippled on (virtual) machines with 4GB of RAM, we recommend compiling on (virtual) machines with 8GB of RAM or more. If your build machine has more than one CPU (**\\`grep '^processor' /proc/cpuinfo | wc -l\\`**), you can use them to assist in the build process by compiling with the command **scons -j\\[number of CPUs - 1\\]**.\n\n**New Features**\n\n-   Subscription stream for validations ([RIPD-504](https://ripplelabs.atlassian.net/browse/RIPD-504))\n\n**Deprecated features**\n\n-   Disable Websocket ping timer\n\n**Bug Fixes**\n\n-   Fix off-by one bug that overstates the account reserve during OfferCreate transaction. **Activates August 17, 2015**.\n-   Fix funded offer removal during Payment transaction ([RIPD-113](https://ripplelabs.atlassian.net/browse/RIPD-113)). **Activates August 17, 2015**.\n-   Fix display discrepancy in fee.\n\n**Improvements**\n\n-   Add “quality” field to account\\_offers API response: quality is defined as the exchange rate, the ratio taker\\_pays divided by taker\\_gets.\n-   Add [full\\_reply](https://ripple.com/build/rippled-apis/#path-find-create) field to path\\_find API response: full\\_reply is defined as true/false value depending on the completed depth of pathfinding search ([RIPD-894](https://ripplelabs.atlassian.net/browse/RIPD-894)).\n-   Add [DeliverMin](https://ripple.com/build/transactions/#payment) transaction field ([RIPD-930](https://ripplelabs.atlassian.net/browse/RIPD-930)). **Activates August 17, 2015**.\n\n**Development-Related Updates**\n\n-   Add uptime to crawl data ([RIPD-997](https://ripplelabs.atlassian.net/browse/RIPD-997)).\n-   Add IOUAmount and XRPAmount: these numeric types replace the monolithic functionality found in STAmount ([RIPD-976](https://ripplelabs.atlassian.net/browse/RIPD-976)).\n-   Log metadata differences on built ledger mismatch.\n-   Add enableTesting flag to applyTransactions.\n\n**Assistance**\n\nFor assistance, please contact **integration@ripple.com**\n\n**More information**\n\nFor more information or assistance, the following resources will be of use:\n\n-   [Ripple Developer Forums](https://ripple.com/forum/viewforum.php?f=2)\n-   [IRC](https://webchat.freenode.net/?channels=#ripple)\n\n\n\n\n-----------------------------------------------------------\n\n## Version 0.28.2\n\nrippled 0.28.2 has been released. The commit can be found on GitHub at: <https://github.com/ripple/rippled/commits/release>\n\nPrior to building, please confirm you have the correct source tree with the **git log** command. The first log entry should be the change setting the version:\n\n     commit 6374aad9bc94595e051a04e23580617bc1aaf300\n     Author: Vinnie Falco <vinnie.falco@gmail.com>\n     Date:   Tue Jul 7 09:21:44 2015 -0700\n\n        Set version to 0.28.2\n\nThis release incorporates a number of important features, bugfixes and functional improvements. Please refer to the [Git commit history](https://github.com/ripple/rippled/commits/release) for more detailed information.\n\n**Release Overview**\n\nAs part of Ripple Labs’ ongoing commitment toward protocol security, the rippled team would like to announce rippled release 0.28.2. **This release is necessary for compatibility with OpenSSL v.1.0.1n and later.**\n\n**Toolchain support**\n\nThe minimum supported version of GCC used to compile rippled is v4.8. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Ubuntu_versions_older_than_13.10_:_Install_gcc_4.8) if you have not upgraded already.\n\nWhile it may be possible to compile rippled on (virtual) machines with 4GB of RAM, we recommend compiling on (virtual) machines with 8GB of RAM or more. If your build machine has more than one CPU (**\\`grep '^processor' /proc/cpuinfo | wc -l\\`**), you can use them to assist in the build process by compiling with the command **scons -j\\[number of CPUs - 1\\]**.\n\nThe minimum supported version of Boost is v1.57.0. You **must** upgrade to this release or later to successfully compile this release of rippled. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Install_Boost) if you have not upgraded already.\n\n**rippled.cfg Updates**\n\nFor \\[ips\\] stanza, a port must be specified for each listed IP address with the space between IP address and port, ex.: `r.ripple.com` `51235` ([RIPD-893](https://ripplelabs.atlassian.net/browse/RIPD-893))\n\n**New Features**\n\n-   New API: [gateway\\_balances](https://ripple.com/build/rippled-apis/#gateway-balances) to get a gateway's hot wallet balances and total obligations.\n\n**Deprecated features**\n\n-   Removed temp\\_db ([RIPD-887](https://ripplelabs.atlassian.net/browse/RIPD-887))\n\n**Improvements**\n\n-   Improve peer send queue management\n-   Support larger EDH keys\n-   More robust call to get the valid ledger index\n-   Performance improvements to transactions application to open ledger\n\n**Development-Related Updates**\n\n-   New Env transaction testing framework for unit testing\n-   Fix MSVC link\n-   C++ 14 readiness\n\n**Assistance**\n\nFor assistance, please contact **integration@ripple.com**\n\n**More information**\n\nFor more information or assistance, the following resources will be of use:\n\n-   [Ripple Developer Forums](https://ripple.com/forum/viewforum.php?f=2)\n-   [IRC](https://webchat.freenode.net/?channels=#ripple)\n\n\n\n\n-----------------------------------------------------------\n\n## Version 0.28.1\n\nrippled 0.28.1 has been released. The commit can be found on GitHub at: <https://github.com/ripple/rippled/tree/0.28.1>\n\nPrior to building, please confirm you have the correct source tree with the **git log** command. The first log entry should be the change setting the version:\n\n     commit 399c43cae6e90a428e9ce6a988123972b0f03c99\n     Author: Miguel Portilla <miguelportilla@pobros.com>\n     Date:   Wed May 20 13:30:54 2015 -0400\n\n        Set version to 0.28.1\n\nThis release incorporates a number of important features, bugfixes and functional improvements. Please refer to the [Git commit history](https://github.com/ripple/rippled/commits/0.28.1) for more detailed information.\n\n**Toolchain support**\n\nThe minimum supported version of GCC used to compile rippled is v4.8. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Ubuntu_versions_older_than_13.10_:_Install_gcc_4.8) if you have not upgraded already.\n\nWhile it may be possible to compile rippled on (virtual) machines with 4GB of RAM, we recommend compiling on (virtual) machines with 8GB of RAM or more. If your build machine has more than one CPU (**\\`grep '^processor' /proc/cpuinfo | wc -l\\`**), you can use them to assist in the build process by compiling with the command **scons -j\\[number of CPUs - 1\\]**.\n\nThe minimum supported version of Boost is v1.57.0. You **must** upgrade to this release or later to successfully compile this release of rippled. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Install_Boost) if you have not upgraded already.\n\n**New Features**\n\n-   Filtering for Account Objects ([RIPD-868](https://ripplelabs.atlassian.net/browse/RIPD-868)).\n-   Track rippled server peers latency ([RIPD-879](https://ripplelabs.atlassian.net/browse/RIPD-879)).\n\n**Bug fixes**\n\n-   Expedite zero flow handling for offers\n-   Fix offer crossing when funds are the limiting factor\n\n**Deprecated features**\n\n-   Wallet\\_accounts and generator maps ([RIPD-804](https://ripplelabs.atlassian.net/browse/RIPD-804))\n\n**Improvements**\n\n-   Control ledger query depth based on peers latency\n-   Improvements to ledger history fetches\n-   Improve RPC ledger synchronization requirements ([RIPD-27](https://ripplelabs.atlassian.net/browse/RIPD-27), [RIPD-840](https://ripplelabs.atlassian.net/browse/RIPD-840))\n-   Eliminate need for ledger in delivered\\_amount calculation ([RIPD-860](https://ripplelabs.atlassian.net/browse/RIPD-860))\n-   Improvements to JSON parsing\n\n**Development-Related Updates**\n\n-   Add historical ledger fetches per minute to get\\_counts\n-   Compute validated ledger age from signing time\n-   Remove unused database table ([RIPD-755](https://ripplelabs.atlassian.net/browse/RIPD-755))\n\n**Assistance**\n\nFor assistance, please contact **integration@ripple.com**\n\n**More information**\n\nFor more information or assistance, the following resources will be of use:\n\n-   [Ripple Developer Forums](https://ripple.com/forum/viewforum.php?f=2)\n-   [IRC](https://webchat.freenode.net/?channels=#ripple)\n\n\n\n\n-----------------------------------------------------------\n\n## Version 0.28.0\n\nrippled 0.28.0 has been released. The commit can be found on GitHub at: <https://github.com/ripple/rippled/tree/0.28.0>\n\nPrior to building, please confirm you have the correct source tree with the **git log** command. The first log entry should be the change setting the version:\n\n     commit 7efd0ab0d6ef017331a0e214a3053893c88f38a9\n     Author: Vinnie Falco <vinnie.falco@gmail.com>\n     Date:   Fri Apr 24 18:57:36 2015 -0700\n\n        Set version to 0.28.0\n\nThis release incorporates a number of important features, bugfixes and functional improvements. Please refer to the [Git commit history](https://github.com/ripple/rippled/commits/0.28.0) for more detailed information.\n\n**Release Overview**\n\nAs part of Ripple Labs’ ongoing commitment toward improving the protocol, the rippled team is excited to announce **autobridging** — a feature that allows XRP to serve as a bridge currency. Autobridging enhances utility and has the potential to expose more of the network to liquidity and improve prices. For more information please refer to the [autobridging blog post](https://ripple.com/uncategorized/introducing-offer-autobridging/).\n\n**Toolchain support**\n\nThe minimum supported version of GCC used to compile rippled is v4.8. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Ubuntu_versions_older_than_13.10_:_Install_gcc_4.8) if you have not upgraded already.\n\nWhile it may be possible to compile rippled on (virtual) machines with 4GB of RAM, we recommend compiling on (virtual) machines with 8GB of RAM or more. If your build machine has more than one CPU (**\\`grep '^processor' /proc/cpuinfo | wc -l\\`**), you can use them to assist in the build process by compiling with the command **scons -j\\[number of CPUs - 1\\]**.\n\nThe minimum supported version of Boost is v1.57.0. You **must** upgrade to this release or later to successfully compile this release of rippled. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Install_Boost) if you have not upgraded already.\n\n**Important rippled.cfg update**\n\nWith rippled version 0.28, the rippled.cfg file must be changed according to these instructions:\n\n-   Change any entries that say\n\n`admin` `=` `allow` to `admin` `=` <IP address>\n\n-   For most installations, 127.0.0.1 will preserve current behavior. 0.0.0.0 may be specified to indicate \"any IP\" but cannot be combined with other IP addresses. Use of 0.0.0.0 may introduce severe security risks and is not recommended. See docs/rippled-example.cfg for more information.\n\n**More Strict Requirements on MemoType**\n\nThe requirements on the contents of the MemoType field, if present, are more strict than the previous version. Transactions that can successfully be submitted to 0.27.4 and earlier may fail in 0.28.0. For details, please refer to [updated memo documentation](https://ripple.com/build/transactions/#memos) for details. Partners should check their implementation to make sure that their MemoType follows the new rules.\n\n**New Features**\n\n-   Autobridging implementation ([RIPD-423](https://ripplelabs.atlassian.net/browse/RIPD-423)). **This feature will be turned on May 12, 2015**.\n-   Combine history\\_ledger\\_index and online\\_delete settings in rippled.cfg ([RIPD-774](https://ripplelabs.atlassian.net/browse/RIPD-774)).\n-   Claim a fee when a required destination tag is not specified ([RIPD-574](https://ripplelabs.atlassian.net/browse/RIPD-574)).\n-   Require the master key when disabling the use of the master key or when enabling 'no freeze' ([RIPD-666](https://ripplelabs.atlassian.net/browse/RIPD-666)).\n-   Change the port setting admin to accept allowable admin IP addresses ([RIPD-820](https://ripplelabs.atlassian.net/browse/RIPD-820)):\n    -   rpc\\_admin\\_allow has been removed.\n    -   Comma-separated list of IP addresses that are allowed administrative privileges (subject to username & password authentication if configured).\n    -   127.0.0.1 is no longer a default admin IP.\n    -   0.0.0.0 may be specified to indicate \"any IP\" but cannot be combined with other MIP addresses. Use of 0.0.0.0 may introduce severe security risks and is not recommended.\n-   Enable Amendments from config file or static data ([RIPD-746](https://ripplelabs.atlassian.net/browse/RIPD-746)).\n\n**Bug fixes**\n\n-   Fix payment engine handling of offer ⇔ account ⇔ offer cases ([RIPD-639](https://ripplelabs.atlassian.net/browse/RIPD-639)). **This fix will take effect on May 12, 2015**.\n-   Fix specified destination issuer in pathfinding ([RIPD-812](https://ripplelabs.atlassian.net/browse/RIPD-812)).\n-   Only report delivered\\_amount for executed payments ([RIPD-827](https://ripplelabs.atlassian.net/browse/RIPD-827)).\n-   Return a validated ledger if there is one ([RIPD-814](https://ripplelabs.atlassian.net/browse/RIPD-814)).\n-   Refund owner's ticket reserve when a ticket is canceled ([RIPD-855](https://ripplelabs.atlassian.net/browse/RIPD-855)).\n-   Return descriptive error from account\\_currencies RPC ([RIPD-806](https://ripplelabs.atlassian.net/browse/RIPD-806)).\n-   Fix transaction enumeration in account\\_tx API ([RIPD-734](https://ripplelabs.atlassian.net/browse/RIPD-734)).\n-   Fix inconsistent ledger\\_current return ([RIPD-669](https://ripplelabs.atlassian.net/browse/RIPD-669)).\n-   Fix flags --rpc\\_ip and --rpc\\_port ([RIPD-679](https://ripplelabs.atlassian.net/browse/RIPD-679)).\n-   Skip inefficient SQL query ([RIPD-870](https://ripplelabs.atlassian.net/browse/RIPD-870))\n\n**Deprecated features**\n\n-   Remove support for deprecated PreviousTxnID field ([RIPD-710](https://ripplelabs.atlassian.net/browse/RIPD-710)). **This will take effect on May 12, 2015**.\n-   Eliminate temREDUNDANT\\_SEND\\_MAX ([RIPD-690](https://ripplelabs.atlassian.net/browse/RIPD-690)).\n-   Remove WalletAdd ([RIPD-725](https://ripplelabs.atlassian.net/browse/RIPD-725)).\n-   Remove SMS support.\n\n**Improvements**\n\n-   Improvements to peer communications.\n-   Reduce master lock for client requests.\n-   Update SQLite to 3.8.8.2.\n-   Require Boost 1.57.\n-   Improvements to Universal Port ([RIPD-687](https://ripplelabs.atlassian.net/browse/RIPD-687)).\n-   Constrain valid inputs for memo fields ([RIPD-712](https://ripplelabs.atlassian.net/browse/RIPD-712)).\n-   Binary option for ledger command ([RIPD-692](https://ripplelabs.atlassian.net/browse/RIPD-692)).\n-   Optimize transaction checks ([RIPD-751](https://ripplelabs.atlassian.net/browse/RIPD-751)).\n\n**Development-Related Updates**\n\n-   Add RPC metrics ([RIPD-705](https://ripplelabs.atlassian.net/browse/RIPD-705)).\n-   Track and report peer load.\n-   Builds/Test.py will build and test by one or more scons targets.\n-   Support a --noserver command line option in tests:\n-   Run npm/integration tests without launching rippled, using a running instance of rippled (possibly in a debugger) instead.\n-   Works for npm test and mocha.\n-   Display human readable SSL error codes.\n-   Better transaction analysis ([RIPD-755](https://ripplelabs.atlassian.net/browse/RIPD-755)).\n\n**Assistance**\n\nFor assistance, please contact **integration@ripple.com**\n\n**More information**\n\nFor more information or assistance, the following resources will be of use:\n\n-   [Ripple Developer Forums](https://ripple.com/forum/viewforum.php?f=2)\n-   [IRC](https://webchat.freenode.net/?channels=#ripple)\n\n\n\n\n-----------------------------------------------------------\n\n## Version 0.27.4\n\nrippled 0.27.4 has been released. The commit can be found on GitHub at: <https://github.com/ripple/rippled/tree/0.27.4>\n\nPrior to building, please confirm you have the correct source tree with the **git log** command. The first log entry should be the change setting the version:\n\n     commit 92812fe7239ffa3ba91649b2ece1e892b866ec2a\n     Author: Nik Bougalis <nikb@bougalis.net>\n     Date:   Wed Mar 11 11:26:44 2015 -0700\n\n        Set version to 0.27.4\n\nThis release includes one new feature. Please refer to the [Git commit history](https://github.com/ripple/rippled/commits/0.27.4) for more detailed information.\n\n**Toolchain support**\n\nThe minimum supported version of GCC used to compile rippled is v4.8. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Ubuntu_versions_older_than_13.10_:_Install_gcc_4.8) if you have not upgraded already.\n\nWhile it may be possible to compile rippled on (virtual) machines with 4GB of RAM, we recommend compiling on (virtual) machines with 8GB of RAM or more. If your build machine has more than one CPU (**\\`grep '^processor' /proc/cpuinfo | wc -l\\`**), you can use them to assist in the build process by compiling with the command **scons -j\\[number of CPUs - 1\\]**.\n\nThe minimum supported version of Boost is v1.57.0. You **must** upgrade to this release or later to successfully compile this release of rippled. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Install_Boost) if you have not upgraded already.\n\n**Bug Fixes**\n\n-   Limit passes in the payment engine\n\n**Assistance**\n\nFor assistance, please contact **integration@ripple.com**\n\n**More information**\n\nFor more information or assistance, the following resources will be of use:\n\n-   [Ripple Developer Forums](https://ripple.com/forum/viewforum.php?f=2)\n-   [IRC](https://webchat.freenode.net/?channels=#ripple)\n\n\n\n\n-----------------------------------------------------------\n\n## Version 0.27.3-sp2\n\nrippled 0.27.3-sp2 has been released. The commit can be found on GitHub at: <https://github.com/ripple/rippled/tree/0.27.3-sp2>\n\nPrior to building, please confirm you have the correct source tree with the **git log** command. The first log entry should be the change setting the version:\n\n     commit f999839e599e131ed624330ad0ce85bb995f02d3\n     Author: Nik Bougalis <nikb@bougalis.net>\n     Date:   Thu Mar 12 13:37:47 2015 -0700\n\n        Set version to 0.27.3-sp2\n\nThis release includes one new feature. Please refer to the [Git commit history](https://github.com/ripple/rippled/commits/0.27.3-sp2) for more detailed information.\n\n**Toolchain support**\n\nThe minimum supported version of GCC used to compile rippled is v4.8. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Ubuntu_versions_older_than_13.10_:_Install_gcc_4.8) if you have not upgraded already.\n\nWhile it may be possible to compile rippled on (virtual) machines with 4GB of RAM, we recommend compiling on (virtual) machines with 8GB of RAM or more. If your build machine has more than one CPU (**\\`grep '^processor' /proc/cpuinfo | wc -l\\`**), you can use them to assist in the build process by compiling with the command **scons -j\\[number of CPUs - 1\\]**.\n\nThe minimum supported version of Boost is v1.57.0. You **must** upgrade to this release or later to successfully compile this release of rippled. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Install_Boost) if you have not upgraded already.\n\n**New Features**\n\n-   Add noripple\\_check RPC command: this command tells gateways what they need to do to set \"Default Ripple\" account flag and fix any trust lines created before the flag was set.\n\n**Assistance**\n\nFor assistance, please contact **integration@ripple.com**\n\n**More information**\n\nFor more information or assistance, the following resources will be of use:\n\n-   [Ripple Developer Forums](https://ripple.com/forum/viewforum.php?f=2)\n-   [IRC](https://webchat.freenode.net/?channels=#ripple)\n\n\n\n\n-----------------------------------------------------------\n\n## Version 0.27.3-sp1\n\nrippled 0.27.3-sp1 has been released. The commit can be found on GitHub at: <https://github.com/ripple/rippled/tree/0.27.3-sp1>\n\nPrior to building, please confirm you have the correct source tree with the **git log** command. The first log entry should be the change setting the version:\n\n     commit 232693419a2c9a8276a0fae991f688f6f01a3add\n     Author: Nik Bougalis <nikb@bougalis.net>\n     Date:   Wed Mar 11 10:26:39 2015 -0700\n\n       Set version to 0.27.3-sp1\n\nThis release includes one new feature. Please refer to the [Git commit history](https://github.com/ripple/rippled/commits/0.27.3-sp1) for more detailed information.\n\n**Toolchain support**\n\nThe minimum supported version of GCC used to compile rippled is v4.8. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Ubuntu_versions_older_than_13.10_:_Install_gcc_4.8) if you have not upgraded already.\n\nWhile it may be possible to compile rippled on (virtual) machines with 4GB of RAM, we recommend compiling on (virtual) machines with 8GB of RAM or more. If your build machine has more than one CPU (**\\`grep '^processor' /proc/cpuinfo | wc -l\\`**), you can use them to assist in the build process by compiling with the command **scons -j\\[number of CPUs - 1\\]**.\n\nThe minimum supported version of Boost is v1.57.0. You **must** upgrade to this release or later to successfully compile this release of rippled. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Install_Boost) if you have not upgraded already.\n\n**New Features**\n\n-   Add \"Default Ripple\" account flag\n\n**Assistance**\n\nFor assistance, please contact **integration@ripple.com**\n\n**More information**\n\nFor more information or assistance, the following resources will be of use:\n\n-   [Ripple Developer Forums](https://ripple.com/forum/viewforum.php?f=2)\n-   [IRC](https://webchat.freenode.net/?channels=#ripple)\n\n\n-----------------------------------------------------------\n\n## Version 0.27.3\n\nrippled 0.27.3 has been released. The commit can be found on GitHub at: <https://github.com/ripple/rippled/tree/0.27.3>\n\nPrior to building, please confirm you have the correct source tree with the **git log** command. The first log entry should be the change setting the version:\n\n     commit 70c2854f7c8a28801a7ebc81dd62bf0d068188f0\n     Author: Nik Bougalis <nikb@bougalis.net>\n     Date:   Tue Mar 10 14:06:33 2015 -0700\n\n        Set version to 0.27.3\n\nThis release includes one new feature. Please refer to the [Git commit history](https://github.com/ripple/rippled/commits/0.27.3) for more detailed information.\n\n**Toolchain support**\n\nThe minimum supported version of GCC used to compile rippled is v4.8. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Ubuntu_versions_older_than_13.10_:_Install_gcc_4.8) if you have not upgraded already.\n\nWhile it may be possible to compile rippled on (virtual) machines with 4GB of RAM, we recommend compiling on (virtual) machines with 8GB of RAM or more. If your build machine has more than one CPU (**\\`grep '^processor' /proc/cpuinfo | wc -l\\`**), you can use them to assist in the build process by compiling with the command **scons -j\\[number of CPUs - 1\\]**.\n\nThe minimum supported version of Boost is v1.57.0. You **must** upgrade to this release or later to successfully compile this release of rippled. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Install_Boost) if you have not upgraded already.\n\n**New Features**\n\n-   Add \"Default Ripple\" account flag\n\n**Assistance**\n\nFor assistance, please contact **integration@ripple.com**\n\n**More information**\n\nFor more information or assistance, the following resources will be of use:\n\n-   [Ripple Developer Forums](https://ripple.com/forum/viewforum.php?f=2)\n-   [IRC](https://webchat.freenode.net/?channels=#ripple)\n\n\n-----------------------------------------------------------\n\n## Version 0.27.2\n\nrippled 0.27.2 has been released. The commit can be found on GitHub at: <https://github.com/ripple/rippled/tree/0.27.2>\n\nPrior to building, please confirm you have the correct source tree with the **git log** command. The first log entry should be the change setting the version:\n\n     commit 9cc8eec773e8afc9c12a6aab4982deda80495cf1\n     Author: Nik Bougalis <nikb@bougalis.net>\n     Date:   Sun Mar 1 14:56:44 2015 -0800\n\n       Set version to 0.27.2\n\nThis release incorporates a number of important bugfixes and functional improvements. Please refer to the [Git commit history](https://github.com/ripple/rippled/commits/0.27.2) for more detailed information.\n\n**Toolchain support**\n\nThe minimum supported version of GCC used to compile rippled is v4.8. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Ubuntu_versions_older_than_13.10_:_Install_gcc_4.8) if you have not upgraded already.\n\nWhile it may be possible to compile rippled on (virtual) machines with 4GB of RAM, we recommend compiling on (virtual) machines with 8GB of RAM or more. If your build machine has more than one CPU (**\\`grep '^processor' /proc/cpuinfo | wc -l\\`**), you can use them to assist in the build process by compiling with the command **scons -j\\[number of CPUs - 1\\]**.\n\nThe minimum supported version of Boost is v1.57.0. You **must** upgrade to this release or later to successfully compile this release of rippled. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Install_Boost) if you have not upgraded already.\n\n**New Features**\n\n-   NuDB backend option: high performance key/value database optimized for rippled (set “type=nudb” in .cfg).\n    -   Either import RockdDB to NuDB using import tool, or\n    -   Start fresh with NuDB but delete SQLite databases if rippled ran previously with RocksDB:\n\n     rm [database_path]/transaction.* [database_path]/ledger.*\n\n**Bug Fixes**\n\n-   Fix offer quality bug\n\n**Deprecated**\n\n-   HyperLevelDB, LevelDB, and SQLlite backend options. Use RocksDB for spinning drives and NuDB for SSDs backend options.\n\n**Assistance**\n\nFor assistance, please contact **integration@ripple.com**\n\n**More information**\n\nFor more information or assistance, the following resources will be of use:\n\n-   [Ripple Developer Forums](https://ripple.com/forum/viewforum.php?f=2)\n-   [IRC](https://webchat.freenode.net/?channels=#ripple)\n\n\n-----------------------------------------------------------\n\n## Version 0.27.1\n\nrippled 0.27.1 has been released. The commit can be found on GitHub at: <https://github.com/ripple/rippled/tree/0.27.1>\n\nPrior to building, please confirm you have the correct source tree with the **git log** command. The first log entry should be the change setting the version:\n\n     commit 95973ba3e8b0bd28eeaa034da8b806faaf498d8a\n     Author: Vinnie Falco <vinnie.falco@gmail.com>\n     Date:   Tue Feb 24 13:31:13 2015 -0800\n\n       Set version to 0.27.1\n\nThis release incorporates a number of important bugfixes and functional improvements. Please refer to the [Git commit history](https://github.com/ripple/rippled/commits/0.27.1) for more detailed information.\n\n**Toolchain support**\n\nThe minimum supported version of GCC used to compile rippled is v4.8. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Ubuntu_versions_older_than_13.10_:_Install_gcc_4.8) if you have not upgraded already.\n\nWhile it may be possible to compile rippled on (virtual) machines with 4GB of RAM, we recommend compiling on (virtual) machines with 8GB of RAM or more. If your build machine has more than one CPU (**\\`grep '^processor' /proc/cpuinfo | wc -l\\`**), you can use them to assist in the build process by compiling with the command **scons -j\\[number of CPUs - 1\\]**.\n\nThe minimum supported version of Boost is v1.57.0. You **must** upgrade to this release or later to successfully compile this release of rippled. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Install_Boost) if you have not upgraded already.\n\n**New Features**\n\n-   RocksDB to NuDB import tool ([RIPD-781](https://ripplelabs.atlassian.net/browse/RIPD-781), [RIPD-785](https://ripplelabs.atlassian.net/browse/RIPD-785)): custom tool specifically designed for very fast import of RocksDB nodestore databases into NuDB\n\n**Bug Fixes**\n\n-   Fix streambuf bug\n\n**Improvements**\n\n-   Update RocksDB backend settings\n-   NuDB improvements:\n    -   Limit size of mempool ([RIPD-787](https://ripplelabs.atlassian.net/browse/RIPD-787))\n    -   Performance improvements ([RIPD-793](https://ripplelabs.atlassian.net/browse/RIPD-793), [RIPD-796](https://ripplelabs.atlassian.net/browse/RIPD-796)): changes in Nudb to improve speed, reduce database size, and enhance correctness. The most significant change is to store hashes rather than entire keys in the key file. The output of the hash function is reduced to 48 bits, and stored directly in buckets.\n\n**Experimental**\n\n-   Add /crawl cgi request feature to peer protocol ([RIPD-729](https://ripplelabs.atlassian.net/browse/RIPD-729)): adds support for a cgi /crawl request, issued over HTTPS to the configured peer protocol port. The response to the request is a JSON object containing the node public key, type, and IP address of each directly connected neighbor. The IP address is suppressed unless the neighbor has requested its address to be revealed by adding \"Crawl: public\" to its HTTP headers. This field is currently set by the peer\\_private option in the rippled.cfg file.\n\n**Assistance**\n\nFor assistance, please contact **integration@ripple.com**\n\n**More information**\n\nFor more information or assistance, the following resources will be of use:\n\n-   [Ripple Developer Forums](https://ripple.com/forum/viewforum.php?f=2)\n-   [IRC](https://webchat.freenode.net/?channels=#ripple)\n\n\n-----------------------------------------------------------\n\n## Version 0.27.0\n\nrippled 0.27.0 has been released. The commit can be found on GitHub at: <https://github.com/ripple/rippled/tree/0.27.0>\n\nPrior to building, please confirm you have the correct source tree with the **git log** command. The first log entry should be the change setting the version:\n\n     commit c6c8e5d70c6fbde02cd946135a061aa77744396f\n     Author: Vinnie Falco <vinnie.falco@gmail.com>\n     Date:   Mon Jan 26 10:56:11 2015 -0800\n\n         Set version to 0.27.0\n\nThis release incorporates a number of important bugfixes and functional improvements. Please refer to the [Git commit history](https://github.com/ripple/rippled/commits/0.27.0) for more detailed information.\n\n**Release Overview**\n\nThe rippled team is proud to release rippled 0.27.0. This new version includes many exciting features that will appeal to our users. The team continues to work on stability, scalability, and performance.\n\nThe first feature is Online Delete. This feature allows rippled to maintain it’s database of previous ledgers within a fixed amount of disk space. It does this while allowing rippled to stay online and maintain an administrator specify minimum number of ledgers. This means administrators with limited disk space will no longer need to manage disk space by periodically manually removing the database. Also, with the previously existing backend databases performance would gradually degrade as the database grew in size. In particular, rippled would perform poorly whenever the backend database performed ever growing compaction operations. By limiting rippled to less history, compaction is less resource intensive and systems with less disk performance can now run rippled.\n\nAdditionally, we are very excited to include Universal Port. This feature allows rippled's listening port to handshake in multiple protocols. For example, a single listening port can be configured to receive incoming peer connections, incoming RPC commands over HTTP, and incoming RPC commands over HTTPS at the same time. Or, a single port can receive both Websockets and Secure Websockets clients at the same.\n\nFinally, a new, experimental backend database, NuDB, has been added. This database was developed by Ripple Labs to take advantage of rippled’s specific data usage profile and performs much better than previous databases. Significantly, this database does not degrade in performance as the database grows. Very excitingly, this database works on OS X and Windows. This allows rippled to use these platforms for the first time.\n\n**Toolchain support**\n\nThe minimum supported version of GCC used to compile rippled is v4.8. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Ubuntu_versions_older_than_13.10_:_Install_gcc_4.8) if you have not upgraded already.\n\nWhile it may be possible to compile rippled on (virtual) machines with 4GB of RAM, we recommend compiling on (virtual) machines with 8GB of RAM or more. If your build machine has more than one CPU (**\\`grep '^processor' /proc/cpuinfo | wc -l\\`**), you can use them to assist in the build process by compiling with the command **scons -j\\[number of CPUs - 1\\]**.\n\nThe minimum supported version of Boost is v1.57.0. You **must** upgrade to this release or later to successfully compile this release of rippled. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Install_Boost) if you have not upgraded already.\n\n**Important rippled.cfg Update**\n\n**The format of the configuration file has changed. If upgrading from a previous version of rippled, please see the migration instructions below.**\n\n**New Features**\n\n-   SHAMapStore Online Delete ([RIPD-415](https://ripplelabs.atlassian.net/browse/RIPD-415)): Makes rippled configurable to support deletion of all data in its key-value store (nodestore) and ledger and transaction SQLite databases based on validated ledger sequence numbers. See doc/rippled-example.cfg for configuration setup.\n-   [Universal Port](https://forum.ripple.com/viewtopic.php?f=2&t=8313&p=57969). See necessary config changes below.\n-   Config \"ledger\\_history\\_index\" option ([RIPD-559](https://ripplelabs.atlassian.net/browse/RIPD-559))\n\n**Bug Fixes**\n\n-   Fix pathfinding with multiple issuers for one currency ([RIPD-618](https://ripplelabs.atlassian.net/browse/RIPD-618))\n-   Fix account\\_lines, account\\_offers and book\\_offers result ([RIPD-682](https://ripplelabs.atlassian.net/browse/RIPD-682))\n-   Fix pathfinding bugs ([RIPD-735](https://ripplelabs.atlassian.net/browse/RIPD-735))\n-   Fix RPC subscribe with multiple books ([RIPD-77](https://ripplelabs.atlassian.net/browse/RIPD-77))\n-   Fix account\\_tx API\n\n**Improvements**\n\n-   Improve the human-readable description of the tesSUCCESS code\n-   Add 'delivered\\_amount' to Transaction JSON ([RIPD-643](https://ripplelabs.atlassian.net/browse/RIPD-643)): The synthetic field 'delivered\\_amount' can be used to determine the exact amount delivered by a Payment without having to check the DeliveredAmount field, if present, or the Amount field otherwise.\n\n**Development-Related Updates**\n\n-   HTTP Handshaking for Peers on Universal Port ([RIPD-446](https://ripplelabs.atlassian.net/browse/RIPD-446))\n-   Use asio signal handling in Application ([RIPD-140](https://ripplelabs.atlassian.net/browse/RIPD-140))\n-   Build dependency on Boost 1.57.0\n-   Support a \"no\\_server\" flag in test config\n-   API for improved Unit Testing ([RIPD-432](https://ripplelabs.atlassian.net/browse/RIPD-432))\n-   Option to specify rippled path on command line (--rippled=\\<absolute or relative path\\>)\n\n**Experimental**\n\n-   NuDB backend option: high performance key/value database optimized for rippled (set “type=nudb” in .cfg)\n\n**Migration Instructions**\n\nWith rippled version 0.27.0, the rippled.cfg file must be changed according to these instructions:\n\n-   Add new stanza - `[server]`. This section will contain a list of port names and key/value pairs. A port name must start with a letter and contain only letters and numbers. The name is not case-sensitive. For each name in this list, rippled will look for a configuration file section with the same name and use it to create a listening port. To simplify migration, you can use port names from your previous version of rippled.cfg (see Section 1. Server for detailed explanation in doc/rippled-example.cfg). For example:\n\n         [server]\n         rpc_port\n         peer_port\n         websocket_port\n         ssl_key = <set value to your current [rpc_ssl_key] or [websocket_ssl_key] setting>\n         ssl_cert = <set value to your current [rpc_ssl_cert] or [websocket_ssl_cert] setting>\n         ssl_chain = <set value to your current [rpc_ssl_chain] or [websocket_ssl_chain] setting>\n\n-   For each port name in `[server]` stanza, add separate stanzas. For example:\n\n         [rpc_port]\n         port = <set value to your current [rpc_port] setting, usually 5005>\n         ip = <set value to your current [rpc_ip] setting, usually 127.0.0.1>\n         admin = allow\n         protocol = https\n\n         [peer_port]\n         port = <set value to your current [peer_port], usually 51235>\n         ip = <set value to your current [peer_ip], usually 0.0.0.0>\n         protocol = peer\n\n         [websocket_port]\n         port = <your current [websocket_port], usually 6006>\n         ip = <your current [websocket_ip], usually 127.0.0.1>\n         admin = allow\n         protocol = wss\n\n-   Remove current `[rpc_port],` `[rpc_ip],` `[rpc_allow_remote],` `[rpc_ssl_key],` `[rpc_ssl_cert],` `and` `[rpc_ssl_chain],` `[peer_port],` `[peer_ip],` `[websocket_port],` `[websocket_ip]` settings from rippled.cfg\n\n-   If you allow untrusted websocket connections to your rippled, add `[websocket_public_port]` stanza under `[server]` section and replace websocket public settings with `[websocket_public_port]` section:\n\n         [websocket_public_port]\n         port = <your current [websocket_public_port], usually 5005>\n         ip = <your current [websocket_public_ip], usually 127.0.0.1>\n         protocol = ws ← make sure this is ws, not wss`\n\n-   Remove `[websocket_public_port],` `[websocket_public_ip],` `[websocket_ssl_key],` `[websocket_ssl_cert],` `[websocket_ssl_chain]` settings from rippled.cfg\n-   Disable `[ssl_verify]` section by setting it to 0\n-   Migrate the remaining configurations without changes. To enable online delete feature, check Section 6. Database in doc/rippled-example.cfg\n\n**Integration Notes**\n\nWith this release, integrators should deprecate the \"DeliveredAmount\" field in favor of \"delivered\\_amount.\"\n\n**For Transactions That Occurred Before January 20, 2014:**\n\n-   If amount actually delivered is different than the transactions “Amount” field\n    -   \"delivered\\_amount\" will show as unavailable indicating a developer should use caution when processing this payment.\n    -   Example: A partial payment transaction (tfPartialPayment).\n-   Otherwise\n    -   \"delivered\\_amount\" will show the correct destination balance change.\n\n**For Transactions That Occur After January 20, 2014:**\n\n-   If amount actually delivered is different than the transactions “Amount” field\n    -   A \"delivered\\_amount\" field will determine the destination amount change\n    -   Example: A partial payment transaction (tfPartialPayment).\n-   Otherwise\n    -   \"delivered\\_amount\" will show the correct destination balance change.\n\n**Assistance**\n\nFor assistance, please contact **integration@ripple.com**\n\n**More information**\n\nFor more information or assistance, the following resources will be of use:\n\n-   [Ripple Developer Forums](https://ripple.com/forum/viewforum.php?f=2)\n-   [IRC](https://webchat.freenode.net/?channels=#ripple)\n\n\n-----------------------------------------------------------\n\n## Version 0.26.4\n\nrippled 0.26.4 has been released. The repository tag is *0.26.4* and can be found on GitHub at: <https://github.com/ripple/rippled/commits/0.26.4>\n\nPrior to building, please confirm you have the correct source tree with the **git log** command. The first log entry should be the change setting the version:\n\n     commit 05a04aa80192452475888479c84ff4b9b54e6ae7\n     Author: Vinnie Falco <vinnie.falco@gmail.com>\n     Date:   Mon Nov 3 16:53:37 2014 -0800\n\n         Set version to 0.26.4\n\nThis release incorporates a number of important bugfixes and functional improvements. Please refer to the [Git commit history](https://github.com/ripple/rippled/commits/0.26.4) for more detailed information.\n\n**Toolchain support**\n\nThe minimum supported version of GCC used to compile rippled is v4.8. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Ubuntu_versions_older_than_13.10_:_Install_gcc_4.8) if you have not upgraded already.\n\nWhile it may be possible to compile rippled on (virtual) machines with 4GB of RAM, we recommend compiling on (virtual) machines with 8GB of RAM or more. If your build machine has more than one CPU (**\\`grep '^processor' /proc/cpuinfo | wc -l\\`**), you can use them to assist in the build process by compiling with the command **scons -j\\[number of CPUs - 1\\]**.\n\nThe minimum supported version of Boost is v1.55.0. You **must** upgrade to this release or later to successfully compile this release of rippled. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Install_Boost) if you have not upgraded already.\n\n**Important JSON-RPC Update**\n\nWith rippled version 0.26.4, the [rippled.cfg](https://github.com/ripple/rippled/blob/0.26.4/doc/rippled-example.cfg) file must set the ssl\\_verify property to 0. Without this update, JSON-RPC API calls may not work.\n\n**New Features**\n\n-   Rocksdb v. 3.5.1\n-   SQLite v. 3.8.7\n-   Disable SSLv3\n-   Add counters to track ledger read and write activities\n-   Use trusted validators median fee when determining transaction fee\n-   Add --quorum argument for server start ([RIPD-563](https://ripplelabs.atlassian.net/browse/RIPD-563))\n-   Add account\\_offers paging ([RIPD-344](https://ripplelabs.atlassian.net/browse/RIPD-344))\n-   Add account\\_lines paging ([RIPD-343](https://ripplelabs.atlassian.net/browse/RIPD-343))\n-   Ability to configure network fee in rippled.cfg file ([RIPD-564](https://ripplelabs.atlassian.net/browse/RIPD-564))\n\n**Bug Fixes**\n\n-   Fix OS X version parsing/error related to OS X 10.10 update\n-   Fix incorrect address in connectivity check report\n-   Fix page sizes for ledger\\_data ([RIPD-249](https://ripplelabs.atlassian.net/browse/RIPD-249))\n-   Make log partitions case-insensitive in rippled.cfg\n\n**Improvements**\n\n-   Performance\n    -   Ledger performance improvements for storage and traversal ([RIPD-434](https://ripplelabs.atlassian.net/browse/RIPD-434))\n    -   Improve client performance for JSON responses ([RIPD-439](https://ripplelabs.atlassian.net/browse/RIPD-439))\n-   Other\n    -   Remove PROXY handshake feature\n    -   Change to rippled.cfg to support sections containing both key/value pairs and a list of values\n    -   Return descriptive error message for memo validation ([RIPD-591](https://ripplelabs.atlassian.net/browse/RIPD-591))\n    -   Changes to enforce JSON-RPC 2.0 error format\n    -   Optimize account\\_lines and account\\_offers ([RIPD-587](https://ripplelabs.atlassian.net/browse/RIPD-587))\n    -   Improve fee setting logic ([RIPD-614](https://ripplelabs.atlassian.net/browse/RIPD-614))\n    -   Improve transaction security\n    -   Config improvements\n    -   Improve path filtering ([RIPD-561](https://ripplelabs.atlassian.net/browse/RIPD-561))\n    -   Logging to distinguish Byzantine failure from tx bug ([RIPD-523](https://ripplelabs.atlassian.net/browse/RIPD-523))\n\n**Experimental**\n\n-   Add \"deferred\" flag to transaction relay message (required for future code that will relay deferred transactions)\n-   Refactor STParsedJSON to parse an object or array (required for multisign implementation) ([RIPD-480](https://ripplelabs.atlassian.net/browse/RIPD-480))\n\n**Development-Related Updates**\n\n-   Changes to DatabaseReader to read ledger numbers from database\n-   Improvements to SConstruct\n\n**More information**\n\nFor more information or assistance, the following resources will be of use:\n\n-   [Ripple Developer Forums](https://ripple.com/forum/viewforum.php?f=2)\n-   [IRC](https://webchat.freenode.net/?channels=#ripple)\n\n\n-----------------------------------------------------------\n\n## Version 0.26.3-sp1\n\nrippled 0.26.3-sp1 has been released. The repository tag is *0.26.3-sp1* and can be found on GitHub at: <https://github.com/ripple/rippled/tree/0.26.3-sp1>\n\nPrior to building, please confirm you have the correct source tree with the **git log** command. The first log entry should be the change setting the version:\n\n     commit 2ad6f0a65e248b4f614d38d199a9d5d02f5aaed8\n     Author: Vinnie Falco <vinnie.falco@gmail.com>\n     Date:   Fri Sep 12 15:22:54 2014 -0700\n\n         Set version to 0.26.3-sp1\n\nThis release incorporates a number of important bugfixes and functional improvements. Please refer to the [Git commit history](https://github.com/ripple/rippled/commits/0.26.3-sp1) for more detailed information.\n\n**Toolchain support**\n\nThe minimum supported version of GCC used to compile rippled is v4.8. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Ubuntu_versions_older_than_13.10_:_Install_gcc_4.8) if you have not upgraded already.\n\nWhile it may be possible to compile rippled on (virtual) machines with 4GB of RAM, we recommend compiling on (virtual) machines with 8GB of RAM or more. If your build machine has more than one CPU (**\\`grep '^processor' /proc/cpuinfo | wc -l\\`**), you can use them to assist in the build process by compiling with the command **scons -j\\[number of CPUs - 1\\]**.\n\nThe minimum supported version of Boost is v1.55.0. You **must** upgrade to this release or later to successfully compile this release of rippled. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Install_Boost) if you have not upgraded already.\n\n**New Features**\n\n-   New command to display HTTP/S-RPC sessions metrics ([RIPD-533](https://ripplelabs.atlassian.net/browse/RIPD-533))\n\n**Bug Fixes**\n\n-   Improved handling of HTTP/S-RPC sessions ([RIPD-489](https://ripplelabs.atlassian.net/browse/RIPD-489))\n-   Fix unit tests for Windows.\n-   Fix integer overflows in JSON parser.\n\n**Improvements**\n\n-   Improve processing of trust lines during pathfinding.\n\n**Experimental Features**\n\n-   Added a command line utility called LedgerTool for retrieving and processing ledger blocks from the Ripple network.\n\n**Development-Related Updates**\n\n-   HTTP message and parser improvements.\n    -   Streambuf wrapper supports rvalue move.\n    -   Message class holds a complete HTTP message.\n    -   Body class holds the HTTP content body.\n    -   Headers class holds RFC-compliant HTTP headers.\n    -   Basic\\_parser provides class interface to joyent's http-parser.\n    -   Parser class parses into a message object.\n    -   Remove unused http get client free function.\n    -   Unit test for parsing malformed messages.\n-   Add enable\\_if\\_lvalue.\n-   Updates to includes and scons.\n-   Additional ledger.history.mismatch insight statistic.\n-   Convert rvalue to an lvalue. ([RIPD-494](https://ripplelabs.atlassian.net/browse/RIPD-494))\n-   Enable heap profiling with jemalloc.\n-   Add aged containers to Validators module. ([RIPD-349](https://ripplelabs.atlassian.net/browse/RIPD-349))\n-   Account for high-ASCII characters. ([RIPD-464](https://ripplelabs.atlassian.net/browse/RIPD-464))\n\n**More information**\n\nFor more information or assistance, the following resources will be of use:\n\n-   [Ripple Developer Forums](https://ripple.com/forum/viewforum.php?f=2)\n-   [IRC](https://webchat.freenode.net/?channels=#ripple)\n\n\n-----------------------------------------------------------\n\n## Version 0.26.2\n\nrippled 0.26.2 has been released. The repository tag is *0.26.2* and can be found on GitHub at: <https://github.com/ripple/rippled/tree/0.26.2>\n\nPrior to building, please confirm you have the correct source tree with the **git log** command. The first log entry should be the change setting the version:\n\n     commit b9454e0f0ca8dbc23844a0520d49394e10d445b1\n     Author: Vinnie Falco <vinnie.falco@gmail.com>\n     Date:   Mon Aug 11 15:25:44 2014 -0400\n\n        Set version to 0.26.2\n\nThis release incorporates a small number of important bugfixes. Please refer to the [Git commit history](https://github.com/ripple/rippled/commits/0.26.2) for more detailed information.\n\n**Toolchain support**\n\nThe minimum supported version of GCC used to compile rippled is v4.8. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Ubuntu_versions_older_than_13.10_:_Install_gcc_4.8) if you have not upgraded already.\n\nWhile it may be possible to compile rippled on (virtual) machines with 4GB of RAM, we recommend compiling on (virtual) machines with 8GB of RAM or more. If your build machine has more than one CPU (**\\`grep '^processor' /proc/cpuinfo | wc -l\\`**), you can use them to assist in the build process by compiling with the command **scons -j\\[number of CPUs - 1\\]**.\n\nThe minimum supported version of Boost is v1.55.0. You **must** upgrade to this release or later to successfully compile this release of rippled. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Install_Boost) if you have not upgraded already.\n\n**New Features**\n\n-   Freeze enforcement: activates on September 15, 2014 ([RIPD-399](https://ripplelabs.atlassian.net/browse/RIPD-399))\n-   Add pubkey\\_node and hostid to server stream messages ([RIPD-407](https://ripplelabs.atlassian.net/browse/RIPD-407))\n\n**Bug Fixes**\n\n-   Fix intermittent exception when closing HTTPS connections ([RIPD-475](https://ripplelabs.atlassian.net/browse/RIPD-475))\n-   Correct Pathfinder::getPaths out to handle order books ([RIPD-427](https://ripplelabs.atlassian.net/browse/RIPD-427))\n-   Detect inconsistency in PeerFinder self-connects ([RIPD-411](https://ripplelabs.atlassian.net/browse/RIPD-411))\n\n**Experimental Features**\n\n-   Add owner\\_funds to client subscription data ([RIPD-377](https://ripplelabs.atlassian.net/browse/RIPD-377))\n\nThe offer funding status feature is “experimental” in this version. Developers are able to see the field, but it is subject to change in future releases.\n\n**More information**\n\nFor more information or assistance, the following resources will be of use:\n\n-   [Ripple Developer Forums](https://ripple.com/forum/viewforum.php?f=2)\n-   [IRC](https://webchat.freenode.net/?channels=#ripple)\n\n\n-----------------------------------------------------------\n\n## Version 0.26.1\n\nrippled v0.26.1 has been released. The repository tag is **0.26.1** and can be found on GitHub at: <https://github.com/ripple/rippled/tree/0.26.1>\n\nPrior to building, please confirm you have the correct source tree with the **git log** command. The first log entry should be the change setting the version:\n\n     commit 9a0e806f78300374e20070e2573755fbafdbfd03\n     Author: Vinnie Falco <vinnie.falco@gmail.com>\n     Date:   Mon Jul 28 11:27:31 2014 -0700\n\n         Set version to 0.26.1\n\nThis release incorporates a small number of important bugfixes. Please refer to the [Git commit history](https://github.com/ripple/rippled/commits/0.26.1) for more detailed information.\n\n**Toolchain support**\n\nThe minimum supported version of GCC used to compile rippled is v4.8. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Ubuntu_versions_older_than_13.10_:_Install_gcc_4.8) if you have not upgraded already.\n\nWhile it may be possible to compile rippled on (virtual) machines with 4GB of RAM, we recommend compiling on (virtual) machines with 8GB of RAM or more. If your build machine has more than one CPU (**\\`grep '^processor' /proc/cpuinfo | wc -l\\`**), you can use them to assist in the build process by compiling with the command **scons -j\\[number of CPUs - 1\\]**.\n\nThe minimum supported version of Boost is v1.55.0. You **must** upgrade to this release or later to successfully compile this release of rippled. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Install_Boost) if you have not upgraded already.\n\n**Bug Fixes**\n\n-   Enabled asynchronous handling of HTTP-RPC interactions. This fixes client handlers using RPC that periodically return blank responses to requests. ([RIPD-390](https://ripplelabs.atlassian.net/browse/RIPD-390))\n-   Fixed auth handling during OfferCreate. This fixes a regression of [RIPD-256](https://ripplelabs.atlassian.net/browse/RIPD-256). ([RIPD-414](https://ripplelabs.atlassian.net/browse/RIPD-414))\n\n**More information**\n\nFor more information or assistance, the following resources will be of use:\n\n-   [Ripple Developer Forums](https://ripple.com/forum/viewforum.php?f=2)\n-   [IRC](https://webchat.freenode.net/?channels=#ripple)\n\n\n-----------------------------------------------------------\n\n## Version 0.26.0\n\nrippled v0.26.0 has been released. The repository tag is **0.26.0** and can be found on GitHub at: <https://github.com/ripple/rippled/tree/0.26.0>\n\nPrior to building, please confirm you have the correct source tree with the **git log** command. The first log entry should be the change setting the version:\n\n     commit 9fa5e3987260e39dba322f218d39ac228a5b361b\n     Author: Vinnie Falco <vinnie.falco@gmail.com>\n     Date:   Tue Jul 22 09:59:45 2014 -0700\n\n         Set version to 0.26.0\n\nThis release incorporates a significant number of improvements and important bugfixes. Please refer to the [Git commit history](https://github.com/ripple/rippled/commits/develop) for more detailed information.\n\n**Toolchain support**\n\nThe minimum supported version of GCC used to compile rippled is v4.8. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Ubuntu_versions_older_than_13.10_:_Install_gcc_4.8) if you have not upgraded already.\n\nWhile it may be possible to compile rippled on (virtual) machines with 4GB of RAM, we recommend compiling on (virtual) machines with 8GB of RAM or more. If your build machine has more than one CPU (**\\`grep '^processor' /proc/cpuinfo | wc -l\\`**), you can use them to assist in the build process by compiling with the command **scons -j\\[number of CPUs - 1\\]**.\n\nThe minimum supported version of Boost is v1.55.0. You **must** upgrade to this release or later to successfully compile this release of rippled. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Install_Boost) if you have not upgraded already.\n\n**Improvements**\n\n-   Updated integration tests.\n-   Updated tests for account freeze functionality.\n-   Implement setting the no-freeze flag on Ripple accounts ([RIPD-394](https://ripplelabs.atlassian.net/browse/RIPD-394)).\n-   Improve transaction fee and execution logic ([RIPD-323](https://ripplelabs.atlassian.net/browse/RIPD-323)).\n-   Implemented finding of 'sabfd' paths ([RIPD-335](https://ripplelabs.atlassian.net/browse/RIPD-335)).\n-   Imposed a local limit on paths lengths ([RIPD-350](https://ripplelabs.atlassian.net/browse/RIPD-350)).\n-   Documented [ledger entries](https://github.com/ripple/rippled/blob/develop/src/ripple/module/app/ledger/README.md) ([RIPD-361](https://ripplelabs.atlassian.net/browse/RIPD-361)).\n-   Documented [SHAMap](https://github.com/ripple/rippled/blob/develop/src/ripple/module/app/shamap/README.md).\n\n**Bug Fixes**\n\n-   Fixed the limit parameter on book\\_offers ([RIPD-295](https://ripplelabs.atlassian.net/browse/RIPD-295)).\n-   Removed SHAMapNodeID from SHAMapTreeNode to fix \"right data, wrong ID\" bug in the tree node cache ([RIPD-347](https://ripplelabs.atlassian.net/browse/RIPD-347)).\n-   Eliminated spurious SHAMap::getFetchPack failure ([RIPD-379](https://ripplelabs.atlassian.net/browse/RIPD-379)).\n-   Disabled SSLv2.\n-   Implemented rate-limiting of SSL client renegotiation to mitigate [SCIR DoS vulnerability](https://www.thc.org/thc-ssl-dos/) ([RIPD-360](https://ripplelabs.atlassian.net/browse/RIPD-360)).\n-   Display unprintable or malformatted currency codes as hex digits.\n-   Fix static initializers in RippleSSLContext ([RIPD-375](https://ripplelabs.atlassian.net/browse/RIPD-375)).\n\n**More information**\n\nFor more information or assistance, the following resources will be of use:\n\n-   [Ripple Developer Forums](https://ripple.com/forum/viewforum.php?f=2)\n-   [IRC](https://webchat.freenode.net/?channels=#ripple)\n\n\n-----------------------------------------------------------\n\n## Version 0.25.2\n\nrippled v0.25.2 has been released. The repository tag is **0.25.2** and can be found on GitHub at: <https://github.com/ripple/rippled/tree/0.25.2>\n\nPrior to building, please confirm you have the correct source tree with the **git log** command. The first log entry should be the change setting the version:\n\n     commit ddf68d464d74e1c76a0cfd100a08bc8e65b91fec\n     Author: Mark Travis <mtravis@ripple.com>\n     Date:   Mon Jul 7 11:46:15 2014 -0700\n\n         Set version to 0.25.2\n\nThis release incorporates significant improvements which may not warrant separate entries but are incorporated into the feature changes as summary lines. Please refer to the [Git commit history](https://github.com/ripple/rippled/commits/develop) for more information.\n\n**Toolchain support**\n\nThe minimum supported version of GCC used to compile rippled is v4.8. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Ubuntu_versions_older_than_13.10_:_Install_gcc_4.8) if you have not upgraded already.\n\nWhile it may be possible to compile rippled on (virtual) machines with 4GB of RAM, we recommend build machines with 8GB of RAM.\n\nThe minimum supported version of Boost is v1.55. You **must** upgrade to this release or later to successfully compile this release. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Install_Boost) if you have not upgraded already.\n\n**Improvements**\n\n-   CPU utilization for certain operations has been optimized.\n-   Improve serialization of public ledger blocks.\n-   rippled now takes much less time to compile.\n-   Additional pathfinding heuristic: increases liquidity in some cases.\n\n**Bug Fixes**\n\n-   Unprintable currency codes will be printed as hex digits.\n-   Transactions with unreasonably long path lengths are rejected. The maximum is now eight (8) hops.\n\n\n-----------------------------------------------------------\n\n## Version 0.25.1\n\n`rippled` v0.25.1 has been released. The repository tag is `0.25.1` and can be found on GitHub at: https://github.com/ripple/rippled/tree/0.25.1\n\nPrior to building, please confirm you have the correct source tree with the `git log` command. The first log entry should be the change setting the version:\n\n     commit b677cacb8ce0d4ef21f8c60112af1db51dce5bb4\n     Author: Vinnie Falco <vinnie.falco@gmail.com>\n     Date:   Thu May 15 08:27:20 2014 -0700\n\n         Set version to 0.25.1\n\nThis release incorporates significant improvements which may not warrant separate entries but are incorporated into the feature changes as summary lines.  Please refer to the [Git commit history](https://github.com/ripple/rippled/commits/develop) for more information.\n\n**Toolchain support**\n\nThe minimum supported version of GCC used to compile rippled is v4.8.  Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Ubuntu_versions_older_than_13.10_:_Install_gcc_4.8) if you have not upgraded already.\n\nA minimum of 4GB of RAM are required to successfully compile this release.\n\nThe minimum supported version of Boost is v1.55.  You **must** upgrade to this release or later to successfully compile this release.  Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Install_Boost) if you have not upgraded already.\n\n**Major Features**\n\n* Option to compress the NodeStore db. More speed, less space. See [`rippled-example.cfg`](https://github.com/ripple/rippled/blob/0.25.1/doc/rippled-example.cfg#L691)\n\n**Improvements**\n\n* Remove redundant checkAccept call\n* Added I/O latency to output of ''server_info''.\n* Better performance handling of Fetch Packs.\n* Improved handling of modified ledger nodes.\n* Improved performance of JSON document generator.\n* Made strConcat operate in O(n) time for greater efficiency.\n* Added some new configuration options to doc/rippled-example.cfg\n\n**Bug Fixes**\n\n* Fixed a bug in Unicode parsing of transactions.\n* Fix a blocker with tfRequireAuth\n* Merkle tree nodes that are retrieved as a result of client requests are cached locally.\n* Use the last ledger node closed for finding old paths through the network.\n* Reduced number of asynchronous fetches.\n\n\n-----------------------------------------------------------\n\n## Version 0.25.0\n\nrippled version 0.25.0 has been released. The repository tag is **0.25.0** and can be found on GitHub at: <https://github.com/ripple/rippled/tree/0.25.0>\n\nPrior to building, please confirm you have the correct source tree with the **git log** command. The first log entry should be the change setting the version:\n\n     commit 29d1d5f06261a93c5e94b4011c7675ff42443b7f\n     Author: Vinnie Falco <vinnie.falco@gmail.com>\n     Date:   Wed May 14 09:01:44 2014 -0700\n\n         Set version to 0.25.0\n\nThis release incorporates significant improvements which may not warrant separate entries but are incorporated into the feature changes as summary lines. Please refer to the [Git commit history](https://github.com/ripple/rippled/commits/develop) for more information.\n\n**Toolchain support**\n\nThe minimum supported version of GCC used to compile rippled is v4.8. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Ubuntu_versions_older_than_13.10_:_Install_gcc_4.8) if you have not upgraded already.\n\nA minimum of 4GB of RAM are required to successfully compile this release.\n\nThe minimum supported version of Boost is v1.55. You **must** upgrade to this release or later to successfully compile this release. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Install_Boost) if you have not upgraded already.\n\n**Major Features**\n\n-   Option to compress the NodeStore db. More speed, less space. See [`rippled-example.cfg`](https://github.com/ripple/rippled/blob/0.25.0/doc/rippled-example.cfg#L691)\n\n**Improvements**\n\n-   Remove redundant checkAccept call\n-   Added I/O latency to output of *server\\_info*.\n-   Better performance handling of Fetch Packs.\n-   Improved handling of modified ledger nodes.\n-   Improved performance of JSON document generator.\n-   Made strConcat operate in O(n) time for greater efficiency.\n\n**Bug Fixes**\n\n-   Fix a blocker with tfRequireAuth\n-   Merkle tree nodes that are retrieved as a result of client requests are cached locally.\n-   Use the last ledger node closed for finding old paths through the network.\n-   Reduced number of asynchronous fetches.\n\n\n-----------------------------------------------------------\n\n## Version 0.24.0\n\nrippled version 0.24.0 has been released. The repository tag is **0.24.0** and can be found on GitHub at: <https://github.com/ripple/rippled/tree/0.24.0>\n\nPrior to building, please confirm you have the correct source tree with the **git log** command. The first log entry should be the change setting the version:\n\n     commit 3eb1c7bd6f93e5d874192197f76571184338f702\n     Author: Vinnie Falco <vinnie.falco@gmail.com>\n     Date:   Mon May 5 10:20:46 2014 -0700\n\n         Set version to 0.24.0\n\nThis release incorporates significant improvements which may not warrant separate entries but are incorporated into the feature changes as summary lines. Please refer to the [Git commit history](https://github.com/ripple/rippled/commits/develop) for more information.\n\n**Toolchain support**\n\nThe minimum supported version of GCC used to compile rippled is v4.8. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Ubuntu_versions_older_than_13.10_:_Install_gcc_4.8) if you have not upgraded already.\n\nA minimum of 4GB of RAM are required to successfully compile this release.\n\nThe minimum supported version of Boost is v1.55. You **must** upgrade to this release or later to successfully compile this release. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Install_Boost) if you have not upgraded already.\n\n**Improvements**\n\n-   Implemented logic for ledger processes and features.\n-   Use \"high threads\" for background RocksDB database writes.\n-   Separately track locally-issued transactions to ensure they always appear in the open ledger.\n\n**Bug Fixes**\n\n-   Fix AccountSet for canonical transactions.\n-   The RPC [sign](https://ripple.com/build/rippled-apis/#sign) command will now sign with either an account's master or regular secret key.\n-   Fixed out-of-order network initialization.\n-   Improved efficiency of pathfinding for transactions.\n-   Reworked timing of ledger validation and related operations to fix race condition against the network.\n-   Build process enforces minimum versions of OpenSSL and BOOST for operation.\n\n\n-----------------------------------------------------------\n\n## Version 0.23.0\n\nrippled version 0.23.0 has been released. The repository tag is **0.23.0** and can be found on GitHub at: <https://github.com/ripple/rippled/tree/0.23.0>\n\nPrior to building, please confirm you have the correct source tree with the **git log** command. The first log entry should be the change setting the version:\n\n     commit 29a4f61551236f70865d46d6653da2e62de1c701\n     Author: Vinnie Falco <vinnie.falco@gmail.com>\n     Date:   Fri Mar 14 13:01:23 2014 -0700\n\n         Set version to 0.23.0\n\nThis release incorporates significant improvements which may not warrant separate entries but are incorporated into the feature changes as summary lines. Please refer to the [Git commit history](https://github.com/ripple/rippled/commits/develop) for more information.\n\n**Toolchain support**\n\nThe minimum supported version of GCC used to compile rippled is v4.8. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Ubuntu_versions_older_than_13.10_:_Install_gcc_4.8) if you have not upgraded already.\n\nA minimum of 4GB of RAM are required to successfully compile this release.\n\nThe minimum supported version of Boost is v1.55. You **must** upgrade to this release or later to successfully compile this release. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Install_Boost) if you have not upgraded already.\n\n**Improvements**\n\n-   Allow the word 'none' in the *.cfg* file to disable storing historical ledgers.\n-   Clarify the initialization of hash prefixes used in the *RadMap*.\n-   Better validation of RPC-JSON from all sources\n-   Reduce spurious log output from Peers\n-   Eliminated some I/O for certain operations in the *RadMap*.\n-   Client requests for full state trees now require administrative privileges.\n-   Added \"MemoData\" field for transaction memos.\n-   Prevent the node cache from overflowing needlessly in certain cases\n-   Add \"ledger\\_data\" command for retrieving entire ledgers in chunks.\n-   Reduce the quantity of forwarded transactions and proposals in some cases\n-   Improved diagnostics when errors occur loading SSL certificates\n\n**Bug Fixes**\n\n-   Fix rare crash when a race condition involving disconnecting sockets occurs\n-   Fix a corner case with hex conversion of strings with odd character lengths\n-   Fix an exception in a corner case when erroneous transactions were being logged\n-   Fix the treatment of expired offers when cleaning up offers\n-   Prevent a needless transactor from being created if the tx ID is not valid\n-   Fix the peer action transition from \"syncing\" to \"full\"\n-   Fix error reporting for unknown inner JSON fields\n-   Fix source file path displayed when an assertion failure is reported\n-   Fix typos in transaction engine error code identifiers\n\n\n-----------------------------------------------------------\n\n## Version 0.22.0\n\nrippled version 0.22.0 has been released. This release is currently the tip of the **develop/** branch and can be found on GitHub at: <https://github.com/ripple/rippled/tree/develop> The tag is **0.22.0** and can be found on GitHub at: <https://github.com/ripple/rippled/tree/0.22.0>\n\n**This is a critical release affecting transaction processing. All partners should update immediately.**\n\nPrior to building, please confirm you have the correct source tree with the **git log** command. The first log entry should be the change setting the version:\n\nThis release incorporates significant improvements which may not warrant separate entries but are incorporated into the feature changes as summary lines. Please refer to the [Git commit history](https://github.com/ripple/rippled/commits/develop) for more information.\n\n**Toolchain support**\n\nThe minimum supported version of GCC used to compile rippled is v4.8. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Ubuntu_versions_older_than_13.10_:_Install_gcc_4.8) if you have not upgraded already.\n\nA minimum of 4GB of RAM are required to successfully compile this release.\n\nThe minimum supported version of libBOOST is v1.55. You **must** upgrade to this release or later to successfully compile this release. Please follow [these instructions](https://wiki.ripple.com/Ubuntu_build_instructions#Install_Boost) if you have not upgraded already.\n\n**Key release features**\n\n- **PeerFinder**\n\n    -   Actively guides network topology.\n    -   Scrubs listening advertisements based on connectivity checks.\n    -   Redirection for new nodes when existing nodes are full.\n\n- **Memos**\n\n    -   Transactions can optionally include a short text message, which optionally can be encrypted.\n\n- **Database**\n\n    -   Improved management of I/O resources.\n    -   Better performance accessing historical data.\n\n- **PathFinding**\n\n    -   More efficient search algorithm when computing paths\n\n**Major Partner Issues Fixed**\n\n- **Transactions**\n\n    -   Malleability: Ability to ensure that signatures are fully canonical.\n\n- **PathFinding**\n\n    -   Less time needed to get the first path result!\n\n- **Database**\n\n    -   Eliminated \"meltdowns\" caused when fetching historical ledger data.\n\n**Significant Changes**\n\n-   Cleaned up logic which controls when ledgers are fetched and under what conditions.\n-   Cleaned up file path calculation for database files.\n-   Changed dispatcher for WebSocket requests.\n-   Cleaned up multithreading mechanisms.\n-   Fixed custom currency code parsing.\n-   Optimized transaction node lookup circumstances in the node store.\n\n\n-----------------------------------------------------------\n\n## Version 0.21.0\n\nrippled version 0.21.0 has been released. This release is currently the tip of the **develop/** branch and can be found on GitHub at [1](https://github.com/ripple/rippled/tree/develop). The tag is **0.21.0-rc2** and can be found on GitHub at [2](https://github.com/ripple/rippled/tree/0.21.0-rc2).\n\n**This is a critical release. All partners should update immediately.**\n\nPrior to building, please confirm you have the correct source tree with the **git log** command. The first log entry should be the change setting the version:\n\n    commit f295bb20a16d1d2999f606c1297c8930d8e33c40\n    Author: JoelKatz <DavidJoelSchwartz@GMail.com>\n    Date:   Fri Jan 24 11:17:16 2014 -0800\n\n        Set version to 0.21.0.rc2\n\n**Major Partner Issues Fixed**\n\n-   Order book issues\n    -   Ensure all crossing offers are taken\n    -   Ensure order book is not left crossed\n-   Added **DeliveredAmount** field to transaction metadata\n    -   Reports amount delivered in partial payments\n\n**Toolchain support**\n\nAs with the previous release, the minimum supported version of GCC used to compile rippled is v4.8.\n\n**Significant Changes**\n\n-   Pairwise no-ripple\n    -   Permits trust lines to be protected from rippling\n    -   Operates on protected pairs\n-   Performance improvements\n    -   Improve I/O latency\n    -   Improve fetching ledgers\n    -   Improve pathfinding\n-   Features for robust transaction submission\n    -   LastLedgerSeq for transaction expiration\n    -   AccountTxnID for transaction chaining\n-   Fix some cases where an invalid transaction would stay in limbo\n-   Code cleanups\n-   Better reporting of invalid parameters\n\n**Release Candidates**\n\nRC1 fixed performance problems with order book retrieval.\n\nRC2 fixed a bug that caused crashes in order processing and a bug in parsing order book requests.\n\n**Notice**\n\nIf you are upgrading from version 0.12 or earlier of rippled, these next sections apply to you because the format of the *rippled.cfg* file changed around that time. If you have upgraded since that time and you have applied the configuration file fixes, you can safely ignore them.\n\n**Validators**\n\nRipple Labs is now running five validators. You can use this template for your *validators.txt* file (or place this in your config file):\n\n     [validators]\n     n9KPnVLn7ewVzHvn218DcEYsnWLzKerTDwhpofhk4Ym1RUq4TeGw    RIP1\n     n9LFzWuhKNvXStHAuemfRKFVECLApowncMAM5chSCL9R5ECHGN4V    RIP2\n     n94rSdgTyBNGvYg8pZXGuNt59Y5bGAZGxbxyvjDaqD9ceRAgD85P    RIP3\n     n9LeQeDcLDMZKjx1TZtrXoLBLo5q1bR1sUQrWG7tEADFU6R27UBp    RIP4\n     n9KF6RpvktjNs2MDBkmxpJbup4BKrKeMKDXPhaXkq7cKTwLmWkFr    RIP5\n\nYou should also raise your quorum to at least three by putting the following in your *rippled.cfg* file:\n\n     [validation_quorum]\n     3\n\nIf you are a validator, you should set your quorum to at least four.\n\n**IPs**\n\nA list of Ripple Labs server IP addresses can be found by resolving **r.ripple.com**. You can also add this to your *rippled.cfg* file to ensure you always have several peer connections to Ripple Labs servers:\n\n     [ips]\n     184.73.226.101 51235\n     23.23.201.55   51235\n     54.200.43.173  51235\n     184.73.57.84   51235\n     54.234.249.55  51235\n     54.200.86.110  51235\n\n**RocksDB back end**\n\nRocksDB is based on LevelDB with improvements from Facebook and the community. Preliminary tests show that it stalls less often than HyperLevelDB for our use cases.\n\nIf you are switching over from an existing back end, you have two options. You can remove your old database and let rippled recreate it as it re-syncs, or you can import your old database into the new one.\n\nTo remove your old database, make sure the server is shut down (\\`rippled stop\\`). Remove the *db/ledger.db* and *db/transaction.db* files. Remove all the files in your back end store directory (*db/hashnode* by default). Then change your configuration file to use the RocksDB back end and restart.\n\nTo import your old database, start by shutting the server down. Then modify the configuration file by renaming your *\\[node\\_db\\]* stanza to *\\[import\\_db\\]*. Create a new *\\[node\\_db\\]* stanza and specify a RocksDB back end with a different directory. Start the server with the command **rippled --import**. When the import finishes gracefully stop the server (\\`rippled stop\\`). Please wait for rippled to stop on its own because it can take several minutes for it to shut down after an import. Remove the old database, put the new database into place, remove the *\\[import\\_db\\]* section, change the *\\[node\\_db\\]* section to refer to the final location, and restart the server.\n\nThe recommended RocksDB configuration is:\n\n     [node_db]\n     type=RocksDB\n     path=db/hashnode\n     open_files=1200\n     filter_bits=12\n     cache_mb=128\n     file_size_mb=8\n     file_size_mult=2\n\n**Configuring your Node DB**\n\nYou need to configure the [NodeBackEnd](https://wiki.ripple.com/NodeBackEnd) that you want the server to use. See above for an example RocksDB configuration.\n\n-   **Note**: HyperLevelDB and RocksDB are not available on Windows platform.\n\n\n-----------------------------------------------------------\n\n## Version 0.20.1\n\nrippled version 0.20.1 has been released. This release is currently the tip of the [develop](https://github.com/ripple/rippled/tree/develop) branch and the tag is [0.20.1](https://github.com/ripple/rippled/tree/0.20.1).\n\n**This is a critical release. All partners should update immediately.**\n\nPrior to building, please confirm you have the correct source tree with the **git log** command. The first log entry should be the change setting the version:\n\n    commit 95a573b755219d7e1e078d53b8e11a8f0d7cade1\n    Author: Vinnie Falco <vinnie.falco@gmail.com>\n    Date:   Wed Jan 8 17:08:27 2014 -0800\n\n       Set version to 0.20.1\n\n**Major Partner Issues Fixed**\n\n-   rippled will crash randomly.\n    -   Entries in the three parts of the order book are missing or do not match. In such a case, rippled will crash.\n-   Server loses sync randomly.\n    -   This is due to rippled restarting after it crashes. That the server restarted is not obvious and appears to be something else.\n-   Server goes 'offline' randomly.\n    -   This is due to rippled restarting after it crashes. That the server restarted is not obvious and appears to be something else.\n-   **complete\\_ledgers** part of **server\\_info** output says \"None\".\n    -   This is due to rippled restarting and reconstructing the ledger after it crashes.\n    -   If the node back end is corrupted or has been moved without being renamed in rippled.cfg, this can cause rippled to crash and restart.\n\n**Toolchain support**\n\nStarting with this release, the minimum supported version of GCC used to compile rippled is v4.8.\n\n**Significant Changes**\n\n-   Don't log StatsD messages to the console by default.\n-   Fixed missing jtACCEPT job limit.\n-   Removed dead code to clean up the codebase.\n-   Reset liquidity before retrying rippleCalc.\n-   Made improvements becuase items in SHAMaps are immutable.\n-   Multiple pathfinding bugfixes:\n    -   Make each path request track whether it needs updating.\n    -   Improve new request handling, reverse order for processing requests.\n    -   Break to handle new requests immediately.\n    -   Make mPathFindThread an integer rather than a bool. Allow two threads.\n    -   Suspend processing requests if server is backed up.\n    -   Multiple performance improvements and enhancements.\n    -   Fixed locking.\n-   Refactored codebase to make it C++11 compliant.\n-   Multiple fixes to ledger acquisition, cleanup, and logging.\n-   Made multiple improvements to WebSockets server.\n-   Added Debian-style initscript (doc/rippled.init).\n-   Updated default config file (doc/rippled-example.cfg) to reflect best practices.\n-   Made changes to SHAMapTreeNode and visitLeavesInternal to conserve memory.\n-   Implemented new fee schedule:\n    -   Transaction fee: 10 drops\n    -   Base reserve: 20 XRP\n    -   Incremental reserve: 5 XRP\n-   Fixed bug \\#211 (getTxsAccountB in NetworkOPs).\n-   Fixed a store/fetch race condition in ther node back end.\n-   Fixed multiple comparison operations.\n-   Removed Sophia and Lightning databases.\n\n**Notice**\n\nIf you are upgrading from version 0.12 or earlier of rippled, these next sections apply to you because the format of the *rippled.cfg* file changed around that time. If you have upgraded since that time and you have applied the configuration file fixes, you can safely ignore them.\n\n**Validators**\n\nRipple Labs is now running five validators. You can use this template for your *validators.txt* file (or place this in your config file):\n\n    [validators]\n    n9KPnVLn7ewVzHvn218DcEYsnWLzKerTDwhpofhk4Ym1RUq4TeGw    RIP1\n    n9LFzWuhKNvXStHAuemfRKFVECLApowncMAM5chSCL9R5ECHGN4V    RIP2\n    n94rSdgTyBNGvYg8pZXGuNt59Y5bGAZGxbxyvjDaqD9ceRAgD85P    RIP3\n    n9LeQeDcLDMZKjx1TZtrXoLBLo5q1bR1sUQrWG7tEADFU6R27UBp    RIP4\n    n9KF6RpvktjNs2MDBkmxpJbup4BKrKeMKDXPhaXkq7cKTwLmWkFr    RIP5\n\nYou should also raise your quorum to at least three by putting the following in your *rippled.cfg* file:\n\n    [validation_quorum]\n    3\n\nIf you are a validator, you should set your quorum to at least four.\n\n**IPs**\n\nA list of Ripple Labs server IP addresses can be found by resolving **r.ripple.com**. You can also add this to your *rippled.cfg* file to ensure you always have several peer connections to Ripple Labs servers:\n\n    [ips]\n    54.225.112.220 51235\n    54.225.123.13  51235\n    54.227.239.106 51235\n    107.21.251.218 51235\n    184.73.226.101 51235\n    23.23.201.55   51235\n\n**New RocksDB back end**\n\nRocksDB is based on LevelDB with improvements from Facebook and the community. Preliminary tests show that it stalls less often than HyperLevelDB for our use cases.\n\nIf you are switching over from an existing back end, you have two options. You can remove your old database and let rippled recreate it as it re-syncs, or you can import your old database into the new one.\n\nTo remove your old database, make sure the server is shut down (`rippled stop`). Remove the *db/ledger.db* and *db/transaction.db* files. Remove all the files in your back end store directory (*db/hashnode* by default). Then change your configuration file to use the RocksDB back end and restart.\n\nTo import your old database, start by shutting the server down. Then modify the configuration file by renaming your *\\[node\\_db\\]* stanza to *\\[import\\_db\\]*. Create a new *\\[node\\_db\\]* stanza and specify a RocksDB back end with a different directory. Start the server with the command **rippled --import**. When the import finishes gracefully stop the server (`rippled stop`). Please wait for rippled to stop on its own because it can take several minutes for it to shut down after an import. Remove the old database, put the new database into place, remove the *\\[import\\_db\\]* section, change the *\\[node\\_db\\]* section to refer to the final location, and restart the server.\n\nThe recommended RocksDB configuration is:\n\n    [node_db]\n    type=RocksDB\n    path=db/hashnode\n    open_files=1200\n    filter_bits=12\n    cache_mb=256\n    file_size_mb=8\n    file_size_mult=2\n\n**Configuring your Node DB**\n\nYou need to configure the [NodeBackEnd](https://wiki.ripple.com/NodeBackEnd) that you want the server to use. See above for an example RocksDB configuration.\n\n-   **Note**: HyperLevelDB and RocksDB are not available on Windows platform.\n\n\n-----------------------------------------------------------\n\n## Version 0.19\n\nrippled version 0.19 has now been released. This release is currently the tip of the [release](https://github.com/ripple/rippled/tree/release) branch and the tag is [0.19.0](https://github.com/ripple/rippled/tree/0.19.0).\n\nPrior to building, please confirm you have the correct source tree with the `git log` command. The first log entry should be the change setting the version:\n\n    commit 26783607157a8b96e6e754f71565f4eb0134efc1\n    Author: Vinnie Falco <vinnie.falco@gmail.com>\n    Date:   Fri Nov 22 23:36:50 2013 -0800\n\n        Set version to 0.19.0\n\n**Significant Changes**\n\n-   Bugfixes and improvements in path finding, path filtering, and payment execution.\n-   Updates to HyperLevelDB and LevelDB node storage back ends.\n-   Addition of RocksDB node storage back end.\n-   New resource manager for tracking server load.\n-   Fixes for a few bugs that can crashes or inability to serve client requests.\n\n**Validators**\n\nRipple Labs is now running five validators. You can use this template for your `validators.txt` file (or place this in your config file):\n\n    [validators]\n    n9KPnVLn7ewVzHvn218DcEYsnWLzKerTDwhpofhk4Ym1RUq4TeGw    RIP1\n    n9LFzWuhKNvXStHAuemfRKFVECLApowncMAM5chSCL9R5ECHGN4V    RIP2\n    n94rSdgTyBNGvYg8pZXGuNt59Y5bGAZGxbxyvjDaqD9ceRAgD85P    RIP3\n    n9LeQeDcLDMZKjx1TZtrXoLBLo5q1bR1sUQrWG7tEADFU6R27UBp    RIP4\n    n9KF6RpvktjNs2MDBkmxpJbup4BKrKeMKDXPhaXkq7cKTwLmWkFr    RIP5\n\nYou should also raise your quorum to at least three by putting the following in your `rippled.cfg` file:\n\n    [validation_quorum]\n    3\n\nIf you are a validator, you should set your quorum to at least four.\n\n**IPs**\n\nA list of Ripple Labs server IP addresses can be found by resolving `r.ripple.com`. You can also add this to your `rippled.cfg` file to ensure you always have several peer connections to Ripple Labs servers:\n\n    [ips]\n    54.225.112.220 51235\n    54.225.123.13  51235\n    54.227.239.106 51235\n    107.21.251.218 51235\n    184.73.226.101 51235\n    23.23.201.55   51235\n\n**New RocksDB back end**\n\nRocksDB is based on LevelDB with improvements from Facebook and the community. Preliminary tests show that it stall less often than HyperLevelDB.\n\nIf you are switching over from an existing back end, you have two choices. You can remove your old database or you can import it.\n\nTo remove your old database, make sure the server is shutdown. Remove the `db/ledger.db` and `db/transaction.db` files. Remove all the files in your back end store directory, `db/hashnode` by default. Then you can change your configuration file to use the RocksDB back end and restart.\n\nTo import your old database, start by shutting the server down. Then modify the configuration file by renaming your `[node_db]` portion to `[import_db]`. Create a new `[node_db]` section specify a RocksDB back end and a different directory. Start the server with `rippled --import`. When the import finishes, stop the server (it can take several minutes to shut down after an import), remove the old database, put the new database into place, remove the `[import_db]` section, change the `[node_db]` section to refer to the final location, and restart the server.\n\nThe recommended RocksDB configuration is:\n\n    [node_db]\n    type=RocksDB\n    path=db/hashnode\n    open_files=1200\n    filter_bits=12\n    cache_mb=256\n    file_size_mb=8\n    file_size_mult=2\n\n**Configuring your Node DB**\n\nYou need to configure the [NodeBackEnd](https://wiki.ripple.com/NodeBackEnd) that you want the server to use. See above for an example RocksDB configuration.\n\n-   **Note:** HyperLevelDB and RocksDB are not available on Windows platform.\n\n\n-----------------------------------------------------------\n\n## Version 0.16\n\nrippled version 0.16 has now been released. This release is currently the tip of the [master](https://github.com/ripple/rippled/tree/master) branch and the tag is [v0.16.0](https://github.com/ripple/rippled/tree/v0.16.0).\n\nPrior to building, please confirm you have the correct source tree with the `git log` command. The first log entry should be the change setting the version:\n\n    commit 15ef43505473225af21bb7b575fb0b628d5e7f73\n    Author: vinniefalco\n    Date:   Wed Oct 2 2013\n\n       Set version to 0.16.0\n\n**Significant Changes**\n\n-   Improved peer discovery\n-   Improved pathfinding\n-   Ledger speed improvements\n-   Reduced memory consumption\n-   Improved server stability\n-   rippled no longer throws and exception on exiting\n-   Better error reporting\n-   Ripple-lib tests have been ported to use the Mocha testing framework\n\n**Validators**\n\nRipple Labs is now running five validators. You can use this template for your `validators.txt` file:\n\n    [validators]\n    n9KPnVLn7ewVzHvn218DcEYsnWLzKerTDwhpofhk4Ym1RUq4TeGw    RIP1\n    n9LFzWuhKNvXStHAuemfRKFVECLApowncMAM5chSCL9R5ECHGN4V    RIP2\n    n94rSdgTyBNGvYg8pZXGuNt59Y5bGAZGxbxyvjDaqD9ceRAgD85P    RIP3\n    n9LeQeDcLDMZKjx1TZtrXoLBLo5q1bR1sUQrWG7tEADFU6R27UBp    RIP4\n    n9KF6RpvktjNs2MDBkmxpJbup4BKrKeMKDXPhaXkq7cKTwLmWkFr    RIP5\n\nYou should also raise your quorum to at least three by putting the following in your `rippled.cfg` file:\n\n    [validation_quorum]\n    3\n\nIf you are a validator, you should set your quorum to at least four.\n\n**IPs**\n\nA list of Ripple Labs server IP addresses can be found by resolving `r.ripple.com`. You can also add this to your `rippled.cfg` file to ensure you always have several peer connections to Ripple Labs servers:\n\n    [ips]\n    54.225.112.220 51235\n    54.225.123.13  51235\n    54.227.239.106 51235\n    107.21.251.218 51235\n    184.73.226.101 51235\n    23.23.201.55   51235\n\n**Node DB**\n\nYou need to configure the [NodeBackEnd](https://wiki.ripple.com/NodeBackEnd) that you want the server to use. In most cases, that will mean adding this to your configuration file:\n\n    [node_db]\n    type=HyperLevelDB\n    path=db/hashnode\n\n-   NOTE HyperLevelDB is not available on Windows platforms.\n\n**Release Candidates**\n\n**Issues**\n\nNone known\n\n\n-----------------------------------------------------------\n\n## Version 0.14\n\nrippled version 0.14 has now been released. This release is currently the tip of the [master](https://github.com/ripple/rippled/tree/master) branch and the tag is [v0.12.0](https://github.com/ripple/rippled/tree/v0.14.0).\n\nPrior to building, please confirm you have the correct source tree with the `git log` command. The first log entry should be the change setting the version:\n\n    commit b6d11c08d0245ee9bafbb97143f5d685dd2979fc\n    Author: vinniefalco\n    Date:   Wed Oct 2 2013\n\n       Set version to 0.14.0\n\n**Significant Changes**\n\n-   Improved peer discovery\n-   Improved pathfinding\n-   Ledger speed improvements\n-   Reduced memory consumption\n-   Improved server stability\n-   rippled no longer throws and exception on exiting\n-   Better error reporting\n-   Ripple-lib tests have been ported to use the Mocha testing framework\n\n**Validators**\n\nRipple Labs is now running five validators. You can use this template for your `validators.txt` file:\n\n    [validators]\n    n9KPnVLn7ewVzHvn218DcEYsnWLzKerTDwhpofhk4Ym1RUq4TeGw    RIP1\n    n9LFzWuhKNvXStHAuemfRKFVECLApowncMAM5chSCL9R5ECHGN4V    RIP2\n    n94rSdgTyBNGvYg8pZXGuNt59Y5bGAZGxbxyvjDaqD9ceRAgD85P    RIP3\n    n9LeQeDcLDMZKjx1TZtrXoLBLo5q1bR1sUQrWG7tEADFU6R27UBp    RIP4\n    n9KF6RpvktjNs2MDBkmxpJbup4BKrKeMKDXPhaXkq7cKTwLmWkFr    RIP5\n\nYou should also raise your quorum to at least three by putting the following in your `rippled.cfg` file:\n\n    [validation_quorum]\n    3\n\nIf you are a validator, you should set your quorum to at least four.\n\n**IPs**\n\nA list of Ripple Labs server IP addresses can be found by resolving `r.ripple.com`. You can also add this to your `rippled.cfg` file to ensure you always have several peer connections to Ripple Labs servers:\n\n    [ips]\n    54.225.112.220 51235\n    54.225.123.13  51235\n    54.227.239.106 51235\n    107.21.251.218 51235\n    184.73.226.101 51235\n    23.23.201.55   51235\n\n**Node DB**\n\nYou need to configure the [NodeBackEnd](https://wiki.ripple.com/NodeBackEnd) that you want the server to use. In most cases, that will mean adding this to your configuration file:\n\n    [node_db]\n    type=HyperLevelDB\n    path=db/hashnode\n\n-   NOTE HyperLevelDB is not available on Windows platforms.\n\n**Release Candidates**\n\n**Issues**\n\nNone known\n\n\n-----------------------------------------------------------\n\n## Version 0.12\n\nrippled version 0.12 has now been released. This release is currently the tip of the [master branch](https://github.com/ripple/rippled/tree/master) and can be found on GitHub. The tag is [v0.12.0](https://github.com/ripple/rippled/tree/v0.12.0).\n\nPrior to building, please confirm you have the correct source tree with the `git log` command. The first log entry should be the change setting the version:\n\n    commit d0a9da6f16f4083993e4b6c5728777ffebf80f3a\n    Author: JoelKatz <DavidJoelSchwartz@GMail.com>\n    Date:   Mon Aug 26 12:08:05 2013 -0700\n\n        Set version to v0.12.0\n\n**Major Partner Issues Fixed**\n\n-   Server Showing \"Offline\"\n\nThis issue was caused by LevelDB periodically compacting its internal data structure. While compacting, rippled's processing would stall causing the node to lose sync with the rest of the network. This issue was solved by switching from LevelDB to HyperLevelDB. rippled operators will need to change their ripple.cfg file. See below for configuration details.\n\n-   Premature Validation of Transactions\n\nOn rare occasions, a transaction would show as locally validated before the full network consensus was confirmed. This issue was resolved by changing the way transactions are saved.\n\n-   Missing Ledgers\n\nOccasionally, some rippled servers would fail to fetch all ledgers. This left gaps in the local history and caused some API calls to report incomplete results. The ledger fetch code was rewritten to both prevent this and to repair any existing gaps.\n\n**Significant Changes**\n\n-   The way transactions are saved has been changed. This fixes a number of ways transactions can incorrectly be reported as fully-validated.\n-   `doTransactionEntry` now works against open ledgers.\n-   `doLedgerEntry` now supports a binary option.\n-   A bug in `getBookPage` that caused it to skip offers is fixed.\n-   `getNodeFat` now returns deeper chains, reducing ledger acquire latency.\n-   Catching up if the (published ledger stream falls behind the network) is now more aggressive.\n-   I/O stalls are drastically reduced by using the HyperLevelDB node back end.\n-   Persistent ledger gaps should no longer occur.\n-   Clusters now exchange load information.\n\n**Validators**\n\nRipple Labs is now running five validators. You can use this template for your `validators.txt` file:\n\n<strike>\n\n    [validators]\n    n9KPnVLn7ewVzHvn218DcEYsnWLzKerTDwhpofhk4Ym1RUq4TeGw    RIP1\n    n9LFzWuhKNvXStHAuemfRKFVECLApowncMAM5chSCL9R5ECHGN4V    RIP2\n    n94rSdgTyBNGvYg8pZXGuNt59Y5bGAZGxbxyvjDaqD9ceRAgD85P    RIP3\n    n9LeQeDcLDMZKjx1TZtrXoLBLo5q1bR1sUQrWG7tEADFU6R27UBp    RIP4\n    n9KF6RpvktjNs2MDBkmxpJbup4BKrKeMKDXPhaXkq7cKTwLmWkFr    RIP5\n\n</strike>\n\n**Update April 2014** - Due to a vulnerability in OpenSSL the validator keys above have been cycled out, the five validators by RippleLabs use the following keys now:\n\n    [validators]\n    n949f75evCHwgyP4fPVgaHqNHxUVN15PsJEZ3B3HnXPcPjcZAoy7     RL1\n    n9MD5h24qrQqiyBC8aeqqCWvpiBiYQ3jxSr91uiDvmrkyHRdYLUj     RL2\n    n9L81uNCaPgtUJfaHh89gmdvXKAmSt5Gdsw2g1iPWaPkAHW5Nm4C     RL3\n    n9KiYM9CgngLvtRCQHZwgC2gjpdaZcCcbt3VboxiNFcKuwFVujzS     RL4\n    n9LdgEtkmGB9E2h3K4Vp7iGUaKuq23Zr32ehxiU8FWY7xoxbWTSA     RL5\n\nYou should also raise your quorum to at least three by putting the following in your `rippled.cfg` file:\n\n    [validation_quorum]\n    3\n\nIf you are a validator, you should set your quorum to at least four.\n\n**IPs**\n\nA list of Ripple Labs server IP addresses can be found by resolving `r.ripple.com`. You can also add this to your `rippled.cfg` file to ensure you always have several peer connections to Ripple Labs servers:\n\n    [ips]\n    54.225.112.220 51235\n    54.225.123.13  51235\n    54.227.239.106 51235\n    107.21.251.218 51235\n    184.73.226.101 51235\n    23.23.201.55   51235\n\n**Node DB**\n\nYou need to configure the [NodeBackEnd](https://wiki.ripple.com/NodeBackEnd) that you want the server to use. In most cases, that will mean adding this to your configuration file:\n\n    [node_db]\n    type=HyperLevelDB\n    path=db/hashnode\n\n-   NOTE HyperLevelDB is not available on Windows platforms.\n\n**Release Candidates**\n\nRC1 was the first release candidate.\n\nRC2 fixed a bug that could cause ledger acquires to stall.\n\nRC3 fixed compilation under OSX.\n\nRC4 includes performance improvements in countAccountTx and numerous small fixes to ledger acquisition.\n\nRC5 changed the peer low water mark from 4 to 10 to acquire more server connections.\n\nRC6 fixed some possible load issues with the network state timer and cluster reporting timers.\n\n**Issues**\n\nFetching of historical ledgers is slower in this build than in previous builds. This is being investigated.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 9.98046875,
          "content": "### Operating an XRP Ledger server securely\n\nFor more details on operating an XRP Ledger server securely, please visit https://xrpl.org/manage-the-rippled-server.html.\n\n\n# Security Policy\n\n## Supported Versions\n\nSoftware constantly evolves. In order to focus resources, we only generally only accept vulnerability reports that affect recent and current versions of the software. We always accept reports for issues present in the **master**, **release** or **develop** branches, and with proposed, [open pull requests](https://github.com/ripple/rippled/pulls).\n\n## Identifying and Reporting Vulnerabilities\n\nWe take security seriously and we do our best to ensure that all our releases are bug free. But we aren't perfect and sometimes things will slip through.\n\n### Responsible Investigation\n\nWe urge you to examine our code carefully and responsibly, and to disclose any issues that you identify in a responsible fashion.\n\nResponsible investigation includes, but isn't limited to, the following:\n\n- Not performing tests on the main network. If testing is necessary, use the [Testnet or Devnet](https://xrpl.org/xrp-testnet-faucet.html).\n- Not targeting physical security measures, or attempting to use social engineering, spam, distributed denial of service (DDOS) attacks, etc.\n- Investigating bugs in a way that makes a reasonable, good faith effort not to be disruptive or harmful to the XRP Ledger and the broader ecosystem.\n\n### Responsible Disclosure\n\nIf you discover a vulnerability or potential threat, or if you _think_\nyou have, please reach out by dropping an email using the contact\ninformation below.\n\nYour report should include the following:\n\n- Your contact information (typically, an email address);\n- The description of the vulnerability;\n- The attack scenario (if any);\n- The steps to reproduce the vulnerability;\n- Any other relevant details or artifacts, including code, scripts or patches.\n\nIn your email, please describe the issue or potential threat. If possible, include a \"repro\" (code that can reproduce the issue) or describe the best way to reproduce and replicate the issue. Please make your report as detailed and comprehensive as possible.\n\nFor more information on responsible disclosure, please read this [Wikipedia article](https://en.wikipedia.org/wiki/Responsible_disclosure).\n\n## Report Handling Process\n\nPlease report the bug directly to us and limit further disclosure. If you want to prove that you knew the bug as of a given time, consider using a cryptographic precommitment: hash the content of your report and publish the hash on a medium of your choice (e.g. on Twitter or as a memo in a transaction) as \"proof\" that you had written the text at a given point in time.\n\nOnce we receive a report, we:\n\n1. Assign two people to independently evaluate the report;\n2. Consider their recommendations;\n3. If action is necessary, formulate a plan to address the issue;\n4. Communicate privately with the reporter to explain our plan.\n5. Prepare, test and release a version which fixes the issue; and\n6. Announce the vulnerability publicly.\n\nWe will triage and respond to your disclosure within 24 hours. Beyond that, we will work to analyze the issue in more detail, formulate, develop and test a fix.\n\nWhile we commit to responding with 24 hours of your initial report with our triage assessment, we cannot guarantee a response time for the remaining steps. We will communicate with you throughout this process, letting you know where we are and keeping you updated on the timeframe.\n\n## Bug Bounty Program\n\n[Ripple](https://ripple.com) is generously sponsoring a bug bounty program for vulnerabilities in [`rippled`](https://github.com/XRPLF/rippled) (and other related projects, like [`xrpl.js`](https://github.com/XRPLF/xrpl.js), [`xrpl-py`](https://github.com/XRPLF/xrpl-py), [`xrpl4j`](https://github.com/XRPLF/xrpl4j)).\n\nThis program allows us to recognize and reward individuals or groups that identify and report bugs. In summary, in order to qualify for a bounty, the bug must be:\n\n1. **In scope**. Only bugs in software under the scope of the program qualify. Currently, that means `rippled`, `xrpl.js`, `xrpl-py`, `xrpl4j`.\n2. **Relevant**. A security issue, posing a danger to user funds, privacy, or the operation of the XRP Ledger.\n3. **Original and previously unknown**. Bugs that are already known and discussed in public do not qualify. Previously reported bugs, even if publicly unknown, are not eligible.\n4. **Specific**. We welcome general security advice or recommendations, but we cannot pay bounties for that.\n5. **Fixable**. There has to be something we can do to permanently fix the problem. Note that bugs in other people’s software may still qualify in some cases. For example, if you find a bug in a library that we use which can compromise the security of software that is in scope and we can get it fixed, you may qualify for a bounty.\n6. **Unused**. If you use the exploit to attack the XRP Ledger, you do not qualify for a bounty. If you report a vulnerability used in an ongoing or past attack and there is specific, concrete evidence that suggests you are the attacker we reserve the right not to pay a bounty.\n\nThe amount paid varies dramatically. Vulnerabilities that are harmless on their own, but could form part of a critical exploit will usually receive a bounty. Full-blown exploits can receive much higher bounties. Please don’t hold back partial vulnerabilities while trying to construct a full-blown exploit. We will pay a bounty to anyone who reports a complete chain of vulnerabilities even if they have reported each component of the exploit separately and those vulnerabilities have been fixed in the meantime. However, to qualify for a the full bounty, you must to have been the first to report each of the partial exploits.\n\n### Contacting Us\n\nTo report a qualifying bug, please send a detailed report to:\n\n|Email Address|bugs@ripple.com                                      |\n|:-----------:|:----------------------------------------------------|\n|Short Key ID | `0xC57929BE`                                        |\n|Long Key ID  | `0xCD49A0AFC57929BE`                                |\n|Fingerprint  | `24E6 3B02 37E0 FA9C 5E96 8974 CD49 A0AF C579 29BE` |\n\nThe full PGP key for this address, which is also available on several key servers (e.g. on [keys.gnupg.net](https://keys.gnupg.net)), is: \n```\n-----BEGIN PGP PUBLIC KEY BLOCK-----\nmQINBFUwGHYBEAC0wpGpBPkd8W1UdQjg9+cEFzeIEJRaoZoeuJD8mofwI5Ejnjdt\nkCpUYEDal0ygkKobu8SzOoATcDl18iCrScX39VpTm96vISFZMhmOryYCIp4QLJNN\n4HKc2ZdBj6W4igNi6vj5Qo6JMyGpLY2mz4CZskbt0TNuUxWrGood+UrCzpY8x7/N\na93fcvNw+prgCr0rCH3hAPmAFfsOBbtGzNnmq7xf3jg5r4Z4sDiNIF1X1y53DAfV\nrWDx49IKsuCEJfPMp1MnBSvDvLaQ2hKXs+cOpx1BCZgHn3skouEUxxgqbtTzBLt1\nxXpmuijsaltWngPnGO7mOAzbpZSdBm82/Emrk9bPMuD0QaLQjWr7HkTSUs6ZsKt4\n7CLPdWqxyY/QVw9UaxeHEtWGQGMIQGgVJGh1fjtUr5O1sC9z9jXcQ0HuIHnRCTls\nGP7hklJmfH5V4SyAJQ06/hLuEhUJ7dn+BlqCsT0tLmYTgZYNzNcLHcqBFMEZHvHw\n9GENMx/tDXgajKql4bJnzuTK0iGU/YepanANLd1JHECJ4jzTtmKOus9SOGlB2/l1\n0t0ADDYAS3eqOdOcUvo9ElSLCI5vSVHhShSte/n2FMWU+kMUboTUisEG8CgQnrng\ng2CvvQvqDkeOtZeqMcC7HdiZS0q3LJUWtwA/ViwxrVlBDCxiTUXCotyBWwARAQAB\ntDBSaXBwbGUgTGFicyBCdWcgQm91bnR5IFByb2dyYW0gPGJ1Z3NAcmlwcGxlLmNv\nbT6JAjcEEwEKACEFAlUwGHYCGwMFCwkIBwMFFQoJCAsFFgIDAQACHgECF4AACgkQ\nzUmgr8V5Kb6R0g//SwY/mVJY59k87iL26/KayauSoOcz7xjcST26l4ZHVVX85gOY\nHYZl8k0+m8X3zxeYm9a3QAoAml8sfoaFRFQP8ynnefRrLUPaZ2MjbJ0SACMwZNef\nT6o7Mi8LBAaiNZdYVyIfX1oM6YXtqYkuJdav6ZCyvVYqc9OvMJPY2ZzJYuI/ZtvQ\n/lTndxCeg9ALNX/iezOLGdfMpf4HuIFVwcPPlwGi+HDlB9/bggDEHC8z434SXVFc\naQatXAPcDkjMUweU7y0CZtYEj00HITd4pSX6MqGiHrxlDZTqinCOPs1Ieqp7qufs\nMzlM6irLGucxj1+wa16ieyYvEtGaPIsksUKkywx0O7cf8N2qKg+eIkUk6O0Uc6eO\nCszizmiXIXy4O6OiLlVHGKkXHMSW9Nwe9GE95O8G9WR8OZCEuDv+mHPAutO+IjdP\nPDAAUvy+3XnkceO+HGWRpVvJZfFP2YH4A33InFL5yqlJmSoR/yVingGLxk55bZDM\n+HYGR3VeMb8Xj1rf/02qERsZyccMCFdAvKDbTwmvglyHdVLu5sPmktxbBYiemfyJ\nqxMxmYXCc9S0hWrWZW7edktBa9NpE58z1mx+hRIrDNbS2sDHrib9PULYCySyVYcF\nP+PWEe1CAS5jqkR2ker5td2/pHNnJIycynBEs7l6zbc9fu+nktFJz0q2B+GJAhwE\nEAEKAAYFAlUwGaQACgkQ+tiY1qQ2QkjMFw//f2hNY3BPNe+1qbhzumMDCnbTnGif\nkLuAGl9OKt81VHG1f6RnaGiLpR696+6Ja45KzH15cQ5JJl5Bgs1YkR/noTGX8IAD\nc70eNwiFu8JXTaaeeJrsmFkF9Tueufb364risYkvPP8tNUD3InBFEZT3WN7JKwix\ncoD4/BwekUwOZVDd/uCFEyhlhZsROxdKNisNo3VtAq2s+3tIBAmTrriFUl0K+ZC5\nzgavcpnPN57zMtW9aK+VO3wXqAKYLYmtgxkVzSLUZt2M7JuwOaAdyuYWAneKZPCu\n1AXkmyo+d84sd5mZaKOr5xArAFiNMWPUcZL4rkS1Fq4dKtGAqzzR7a7hWtA5o27T\n6vynuxZ1n0PPh0er2O/zF4znIjm5RhTlfjp/VmhZdQfpulFEQ/dMxxGkQ9z5IYbX\nmTlSDbCSb+FMsanRBJ7Drp5EmBIudVGY6SHI5Re1RQiEh7GoDfUMUwZO+TVDII5R\nRa7WyuimYleJgDo/+7HyfuIyGDaUCVj6pwVtYtYIdOI3tTw1R1Mr0V8yaNVnJghL\nCHcEJQL+YHSmiMM3ySil3O6tm1By6lFz8bVe/rgG/5uklQrnjMR37jYboi1orCC4\nyeIoQeV0ItlxeTyBwYIV/o1DBNxDevTZvJabC93WiGLw2XFjpZ0q/9+zI2rJUZJh\nqxmKP+D4e27lCI65Ag0EVTAYdgEQAMvttYNqeRNBRpSX8fk45WVIV8Fb21fWdwk6\n2SkZnJURbiC0LxQnOi7wrtii7DeFZtwM2kFHihS1VHekBnIKKZQSgGoKuFAQMGyu\na426H4ZsSmA9Ufd7kRbvdtEcp7/RTAanhrSL4lkBhaKJrXlxBJ27o3nd7/rh7r3a\nOszbPY6DJ5bWClX3KooPTDl/RF2lHn+fweFk58UvuunHIyo4BWJUdilSXIjLun+P\nQaik4ZAsZVwNhdNz05d+vtai4AwbYoO7adboMLRkYaXSQwGytkm+fM6r7OpXHYuS\ncR4zB/OK5hxCVEpWfiwN71N2NMvnEMaWd/9uhqxJzyvYgkVUXV9274TUe16pzXnW\nZLfmitjwc91e7mJBBfKNenDdhaLEIlDRwKTLj7k58f9srpMnyZFacntu5pUMNblB\ncjXwWxz5ZaQikLnKYhIvrIEwtWPyjqOzNXNvYfZamve/LJ8HmWGCKao3QHoAIDvB\n9XBxrDyTJDpxbog6Qu4SY8AdgVlan6c/PsLDc7EUegeYiNTzsOK+eq3G5/E92eIu\nTsUXlciypFcRm1q8vLRr+HYYe2mJDo4GetB1zLkAFBcYJm/x9iJQbu0hn5NxJvZO\nR0Y5nOJQdyi+muJzKYwhkuzaOlswzqVXkq/7+QCjg7QsycdcwDjiQh3OrsgXHrwl\nM7gyafL9ABEBAAGJAh8EGAEKAAkFAlUwGHYCGwwACgkQzUmgr8V5Kb50BxAAhj9T\nTwmNrgRldTHszj+Qc+v8RWqV6j+R+zc0cn5XlUa6XFaXI1OFFg71H4dhCPEiYeN0\nIrnocyMNvCol+eKIlPKbPTmoixjQ4udPTR1DC1Bx1MyW5FqOrsgBl5t0e1VwEViM\nNspSStxu5Hsr6oWz2GD48lXZWJOgoL1RLs+uxjcyjySD/em2fOKASwchYmI+ezRv\nplfhAFIMKTSCN2pgVTEOaaz13M0U+MoprThqF1LWzkGkkC7n/1V1f5tn83BWiagG\n2N2Q4tHLfyouzMUKnX28kQ9sXfxwmYb2sA9FNIgxy+TdKU2ofLxivoWT8zS189z/\nYj9fErmiMjns2FzEDX+bipAw55X4D/RsaFgC+2x2PDbxeQh6JalRA2Wjq32Ouubx\nu+I4QhEDJIcVwt9x6LPDuos1F+M5QW0AiUhKrZJ17UrxOtaquh/nPUL9T3l2qPUn\n1ChrZEEEhHO6vA8+jn0+cV9n5xEz30Str9iHnDQ5QyR5LyV4UBPgTdWyQzNVKA69\nKsSr9lbHEtQFRzGuBKwt6UlSFv9vPWWJkJit5XDKAlcKuGXj0J8OlltToocGElkF\n+gEBZfoOWi/IBjRLrFW2cT3p36DTR5O1Ud/1DLnWRqgWNBLrbs2/KMKE6EnHttyD\n7Tz8SQkuxltX/yBXMV3Ddy0t6nWV2SZEfuxJAQI=\n=spg4\n-----END PGP PUBLIC KEY BLOCK-----\n```\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "cfg",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "conanfile.py",
          "type": "blob",
          "size": 5.4140625,
          "content": "from conan import ConanFile\nfrom conan.tools.cmake import CMake, CMakeToolchain, cmake_layout\nimport re\n\nclass Xrpl(ConanFile):\n    name = 'xrpl'\n\n    license = 'ISC'\n    author = 'John Freeman <jfreeman@ripple.com>'\n    url = 'https://github.com/xrplf/rippled'\n    description = 'The XRP Ledger'\n    settings = 'os', 'compiler', 'build_type', 'arch'\n    options = {\n        'assertions': [True, False],\n        'coverage': [True, False],\n        'fPIC': [True, False],\n        'jemalloc': [True, False],\n        'rocksdb': [True, False],\n        'shared': [True, False],\n        'static': [True, False],\n        'tests': [True, False],\n        'unity': [True, False],\n        'xrpld': [True, False],\n    }\n\n    requires = [\n        'date/3.0.1',\n        'grpc/1.50.1',\n        'libarchive/3.6.2',\n        'nudb/2.0.8',\n        'openssl/1.1.1u',\n        'soci/4.0.3',\n        'xxhash/0.8.2',\n        'zlib/1.2.13',\n    ]\n\n    tool_requires = [\n        'protobuf/3.21.9',\n    ]\n\n    default_options = {\n        'assertions': False,\n        'coverage': False,\n        'fPIC': True,\n        'jemalloc': False,\n        'rocksdb': True,\n        'shared': False,\n        'static': True,\n        'tests': False,\n        'unity': False,\n        'xrpld': False,\n\n        'date/*:header_only': True,\n        'grpc/*:shared': False,\n        'grpc/*:secure': True,\n        'libarchive/*:shared': False,\n        'libarchive/*:with_acl': False,\n        'libarchive/*:with_bzip2': False,\n        'libarchive/*:with_cng': False,\n        'libarchive/*:with_expat': False,\n        'libarchive/*:with_iconv': False,\n        'libarchive/*:with_libxml2': False,\n        'libarchive/*:with_lz4': True,\n        'libarchive/*:with_lzma': False,\n        'libarchive/*:with_lzo': False,\n        'libarchive/*:with_nettle': False,\n        'libarchive/*:with_openssl': False,\n        'libarchive/*:with_pcreposix': False,\n        'libarchive/*:with_xattr': False,\n        'libarchive/*:with_zlib': False,\n        'lz4/*:shared': False,\n        'openssl/*:shared': False,\n        'protobuf/*:shared': False,\n        'protobuf/*:with_zlib': True,\n        'rocksdb/*:enable_sse': False,\n        'rocksdb/*:lite': False,\n        'rocksdb/*:shared': False,\n        'rocksdb/*:use_rtti': True,\n        'rocksdb/*:with_jemalloc': False,\n        'rocksdb/*:with_lz4': True,\n        'rocksdb/*:with_snappy': True,\n        'snappy/*:shared': False,\n        'soci/*:shared': False,\n        'soci/*:with_sqlite3': True,\n        'soci/*:with_boost': True,\n        'xxhash/*:shared': False,\n    }\n\n    def set_version(self):\n        path = f'{self.recipe_folder}/src/libxrpl/protocol/BuildInfo.cpp'\n        regex = r'versionString\\s?=\\s?\\\"(.*)\\\"'\n        with open(path, 'r') as file:\n            matches = (re.search(regex, line) for line in file)\n            match = next(m for m in matches if m)\n            self.version = match.group(1)\n\n    def configure(self):\n        if self.settings.compiler == 'apple-clang':\n            self.options['boost'].visibility = 'global'\n\n    def requirements(self):\n        self.requires('boost/1.82.0', force=True)\n        self.requires('lz4/1.9.3', force=True)\n        self.requires('protobuf/3.21.9', force=True)\n        self.requires('sqlite3/3.42.0', force=True)\n        if self.options.jemalloc:\n            self.requires('jemalloc/5.3.0')\n        if self.options.rocksdb:\n            self.requires('rocksdb/6.29.5')\n\n    exports_sources = (\n        'CMakeLists.txt',\n        'bin/getRippledInfo',\n        'cfg/*',\n        'cmake/*',\n        'external/*',\n        'include/*',\n        'src/*',\n    )\n\n    def layout(self):\n        cmake_layout(self)\n        # Fix this setting to follow the default introduced in Conan 1.48\n        # to align with our build instructions.\n        self.folders.generators = 'build/generators'\n\n    generators = 'CMakeDeps'\n    def generate(self):\n        tc = CMakeToolchain(self)\n        tc.variables['tests'] = self.options.tests\n        tc.variables['assert'] = self.options.assertions\n        tc.variables['coverage'] = self.options.coverage\n        tc.variables['jemalloc'] = self.options.jemalloc\n        tc.variables['rocksdb'] = self.options.rocksdb\n        tc.variables['BUILD_SHARED_LIBS'] = self.options.shared\n        tc.variables['static'] = self.options.static\n        tc.variables['unity'] = self.options.unity\n        tc.variables['xrpld'] = self.options.xrpld\n        tc.generate()\n\n    def build(self):\n        cmake = CMake(self)\n        cmake.verbose = True\n        cmake.configure()\n        cmake.build()\n\n    def package(self):\n        cmake = CMake(self)\n        cmake.verbose = True\n        cmake.install()\n\n    def package_info(self):\n        libxrpl = self.cpp_info.components['libxrpl']\n        libxrpl.libs = [\n            'xrpl',\n            'xrpl.libpb',\n            'ed25519',\n            'secp256k1',\n        ]\n        # TODO: Fix the protobufs to include each other relative to\n        # `include/`, not `include/ripple/proto/`.\n        libxrpl.includedirs = ['include', 'include/ripple/proto']\n        libxrpl.requires = [\n            'boost::boost',\n            'date::date',\n            'grpc::grpc++',\n            'libarchive::libarchive',\n            'lz4::lz4',\n            'nudb::nudb',\n            'openssl::crypto',\n            'protobuf::libprotobuf',\n            'soci::soci',\n            'sqlite3::sqlite',\n            'xxhash::xxhash',\n            'zlib::zlib',\n        ]\n        if self.options.rocksdb:\n            libxrpl.requires.append('rocksdb::librocksdb')\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "external",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}