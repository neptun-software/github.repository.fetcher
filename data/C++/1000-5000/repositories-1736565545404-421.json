{
  "metadata": {
    "timestamp": 1736565545404,
    "page": 421,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gflags/gflags",
      "stars": 2913,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1103515625,
          "content": "# treat all files in this repository as text files\n# and normalize them to LF line endings when committed\n* text\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3974609375,
          "content": "/xcode/\n/build/\n/builds/\n/build-*/\n/_build/\n.DS_Store\nCMakeCache.txt\nDartConfiguration.tcl\nMakefile\nCMakeFiles/\n/Testing/\n/include/gflags/config.h\n/include/gflags/gflags_completions.h\n/include/gflags/gflags_declare.h\n/include/gflags/gflags.h\n/lib/\n/test/gflags_unittest_main.cc\n/test/gflags_unittest-main.cc\n/packages/\nCMakeLists.txt.user\n/bazel-bin\n/bazel-genfiles\n/bazel-gflags\n/bazel-out\n/bazel-testlogs\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.3994140625,
          "content": "# Ubuntu 14.04 Trusty support, to get newer cmake and compilers.\nsudo: required\ndist: trusty\n\nlanguage: cpp\n\nos:\n  - linux\n  - osx\n\ncompiler:\n  - clang\n  - gcc\n\nenv:\n  - CONFIG=Release\n  - CONFIG=Debug\n\nscript:\n  - mkdir out && cd out && cmake -D CMAKE_BUILD_TYPE=$CONFIG -D GFLAGS_BUILD_SHARED_LIBS=ON -D GFLAGS_BUILD_STATIC_LIBS=ON -D GFLAGS_BUILD_TESTING=ON .. && cmake --build . --config $CONFIG && ctest\n"
        },
        {
          "name": "AUTHORS.txt",
          "type": "blob",
          "size": 0.03125,
          "content": "google-gflags@googlegroups.com\n\n"
        },
        {
          "name": "BUILD",
          "type": "blob",
          "size": 0.6142578125,
          "content": "# Bazel (http://bazel.io/) BUILD file for gflags.\n#\n# See INSTALL.md for instructions for adding gflags to a Bazel workspace.\n\nlicenses([\"notice\"])\n\nexports_files([\n    \"src/gflags_completions.sh\",\n    \"COPYING.txt\",\n])\n\nconfig_setting(\n    name = \"x64_windows\",\n    values = {\"cpu\": \"x64_windows\"},\n)\n\nconfig_setting(\n    name = \"android\",\n    values = {\"crosstool_top\": \"//external:android/crosstool\"},\n)\n\nload(\":bazel/gflags.bzl\", \"gflags_library\", \"gflags_sources\")\n\n(hdrs, srcs) = gflags_sources(namespace=[\"google\", \"gflags\"])\ngflags_library(hdrs=hdrs, srcs=srcs, threads=0)\ngflags_library(hdrs=hdrs, srcs=srcs, threads=1)\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 29.4482421875,
          "content": "## CMake configuration file of gflags project\n##\n## This CMakeLists.txt defines some gflags specific configuration variables\n## using the \"gflags_define\" utility macro. The default values of these variables\n## can be overridden either on the CMake command-line using the -D option of\n## the cmake command or in a super-project which includes the gflags source\n## tree by setting the GFLAGS_<varname> CMake variables before adding the\n## gflags source directory via CMake's \"add_subdirectory\" command. Only when\n## the non-cached variable GFLAGS_IS_SUBPROJECT has a value equivalent to FALSE,\n## these configuration variables are added to the CMake cache so they can be\n## edited in the CMake GUI. By default, GFLAGS_IS_SUBPROJECT is set to TRUE when\n## the CMAKE_SOURCE_DIR is not identical to the directory of this CMakeLists.txt\n## file, i.e., the top-level directory of the gflags project source tree.\n##\n## When this project is a subproject (GFLAGS_IS_SUBPROJECT is TRUE), the default\n## settings are such that only the static single-threaded library is built without\n## installation of the gflags files. The \"gflags::gflags\" target is in this case an ALIAS\n## library target for the \"gflags_nothreads_static\" library target. Targets which\n## depend on the gflags library should link to the \"gflags::gflags\" library target.\n##\n## Example CMakeLists.txt of user project which requires separate gflags installation:\n##   cmake_minimum_required(VERSION 2.8.12 FATAL_ERROR)\n##\n##   project(Foo)\n##\n##   find_package(gflags REQUIRED)\n##\n##   add_executable(foo src/foo.cc)\n##   target_link_libraries(foo gflags::gflags)\n##\n## Example CMakeLists.txt of user project which requires separate single-threaded static gflags installation:\n##   cmake_minimum_required(VERSION 2.8.12 FATAL_ERROR)\n##\n##   project(Foo)\n##\n##   find_package(gflags COMPONENTS nothreads_static)\n##\n##   add_executable(foo src/foo.cc)\n##   target_link_libraries(foo gflags::gflags)\n##\n## Example CMakeLists.txt of super-project which contains gflags source tree:\n##   cmake_minimum_required(VERSION 2.8.12 FATAL_ERROR)\n##\n##   project(Foo)\n##\n##   add_subdirectory(gflags)\n##\n##   add_executable(foo src/foo.cc)\n##   target_link_libraries(foo gflags::gflags)\n##\n## Variables to configure the source files:\n## - GFLAGS_IS_A_DLL\n## - GFLAGS_NAMESPACE\n## - GFLAGS_ATTRIBUTE_UNUSED\n## - GFLAGS_INTTYPES_FORMAT\n##\n## Variables to configure the build:\n## - GFLAGS_SOVERSION\n## - GFLAGS_BUILD_SHARED_LIBS\n## - GFLAGS_BUILD_STATIC_LIBS\n## - GFLAGS_BUILD_gflags_LIB\n## - GFLAGS_BUILD_gflags_nothreads_LIB\n## - GFLAGS_BUILD_TESTING\n## - GFLAGS_BUILD_PACKAGING\n##\n## Variables to configure the installation:\n## - GFLAGS_INCLUDE_DIR\n## - GFLAGS_LIBRARY_INSTALL_DIR or LIB_INSTALL_DIR or LIB_SUFFIX\n## - GFLAGS_INSTALL_HEADERS\n## - GFLAGS_INSTALL_SHARED_LIBS\n## - GFLAGS_INSTALL_STATIC_LIBS\n\ncmake_minimum_required (VERSION 3.0.2 FATAL_ERROR)\n\nif (POLICY CMP0042)\n  cmake_policy (SET CMP0042 NEW)\nendif ()\n\nif (POLICY CMP0048)\n  cmake_policy (SET CMP0048 NEW)\nendif ()\n\nif (POLICY CMP0063)\n  cmake_policy (SET CMP0063 NEW)\nendif ()\n\n# ----------------------------------------------------------------------------\n# includes\ninclude (\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/utils.cmake\")\n\n# ----------------------------------------------------------------------------\n# package information\nset (PACKAGE_NAME        \"gflags\")\nset (PACKAGE_VERSION     \"2.2.2\")\nset (PACKAGE_STRING      \"${PACKAGE_NAME} ${PACKAGE_VERSION}\")\nset (PACKAGE_TARNAME     \"${PACKAGE_NAME}-${PACKAGE_VERSION}\")\nset (PACKAGE_BUGREPORT   \"https://github.com/gflags/gflags/issues\")\nset (PACKAGE_DESCRIPTION \"A commandline flags library that allows for distributed flags.\")\nset (PACKAGE_URL         \"http://gflags.github.io/gflags\")\n\nproject (${PACKAGE_NAME} VERSION ${PACKAGE_VERSION} LANGUAGES CXX)\nif (CMAKE_VERSION VERSION_LESS 3.4)\n  # C language still needed because the following required CMake modules\n  # (or their dependencies, respectively) are not correctly handling\n  # the case where only CXX is enabled\n  # - CheckTypeSize.cmake (fixed in CMake 3.1, cf. https://cmake.org/Bug/view.php?id=14056)\n  # - FindThreads.cmake   (fixed in CMake 3.4, cf. https://cmake.org/Bug/view.php?id=14905)\n  enable_language (C)\nendif ()\n\nversion_numbers (\n  ${PACKAGE_VERSION}\n    PACKAGE_VERSION_MAJOR\n    PACKAGE_VERSION_MINOR\n    PACKAGE_VERSION_PATCH\n)\n\n# shared library ABI version number, can be overridden by package maintainers\n# using -DGFLAGS_SOVERSION=XXX on the command-line\nif (GFLAGS_SOVERSION)\n  set (PACKAGE_SOVERSION \"${GFLAGS_SOVERSION}\")\nelse ()\n  # TODO: Change default SOVERSION back to PACKAGE_VERSION_MAJOR with the\n  #       next increase of major version number (i.e., 3.0.0 -> SOVERSION 3)\n  #       The <major>.<minor> SOVERSION should be used for the 2.x releases\n  #       versions only which temporarily broke the API by changing the default\n  #       namespace from \"google\" to \"gflags\".\n  set (PACKAGE_SOVERSION \"${PACKAGE_VERSION_MAJOR}.${PACKAGE_VERSION_MINOR}\")\nendif ()\n\n# when gflags is included as subproject (e.g., as Git submodule/subtree) in the source\n# tree of a project that uses it, no variables should be added to the CMake cache;\n# users may set the non-cached variable GFLAGS_IS_SUBPROJECT before add_subdirectory(gflags)\nif (NOT DEFINED GFLAGS_IS_SUBPROJECT)\n  if (\"^${CMAKE_SOURCE_DIR}$\" STREQUAL \"^${PROJECT_SOURCE_DIR}$\")\n    set (GFLAGS_IS_SUBPROJECT FALSE)\n  else ()\n    set (GFLAGS_IS_SUBPROJECT TRUE)\n  endif ()\nendif ()\n\n# prefix for package variables in CMake configuration file\nstring (TOUPPER \"${PACKAGE_NAME}\" PACKAGE_PREFIX)\n\n# convert file path on Windows with back slashes to path with forward slashes\n# otherwise this causes an issue with the cmake_install.cmake script\nfile (TO_CMAKE_PATH \"${CMAKE_INSTALL_PREFIX}\" CMAKE_INSTALL_PREFIX)\n\n# ----------------------------------------------------------------------------\n# options\n\n# maintain binary backwards compatibility with gflags library version <= 2.0,\n# but at the same time enable the use of the preferred new \"gflags\" namespace\ngflags_define (STRING NAMESPACE \"Name(s) of library namespace (separate multiple options by semicolon)\" \"google;${PACKAGE_NAME}\" \"${PACKAGE_NAME}\")\ngflags_property (NAMESPACE ADVANCED TRUE)\nset (GFLAGS_NAMESPACE_SECONDARY \"${NAMESPACE}\")\nlist (REMOVE_DUPLICATES GFLAGS_NAMESPACE_SECONDARY)\nif (NOT GFLAGS_NAMESPACE_SECONDARY)\n  message (FATAL_ERROR \"GFLAGS_NAMESPACE must be set to one (or more) valid C++ namespace identifier(s separated by semicolon \\\";\\\").\")\nendif ()\nforeach (ns IN LISTS GFLAGS_NAMESPACE_SECONDARY)\n  if (NOT ns MATCHES \"^[a-zA-Z][a-zA-Z0-9_]*$\")\n    message (FATAL_ERROR \"GFLAGS_NAMESPACE contains invalid namespace identifier: ${ns}\")\n  endif ()\nendforeach ()\nlist (GET       GFLAGS_NAMESPACE_SECONDARY 0 GFLAGS_NAMESPACE)\nlist (REMOVE_AT GFLAGS_NAMESPACE_SECONDARY 0)\n\n# cached build options when gflags is not a subproject, otherwise non-cached CMake variables\n# usage: gflags_define(BOOL <name> <doc> <default> [<subproject default>])\ngflags_define (BOOL BUILD_SHARED_LIBS          \"Request build of shared libraries.\"                                       OFF OFF)\ngflags_define (BOOL BUILD_STATIC_LIBS          \"Request build of static libraries (default if BUILD_SHARED_LIBS is OFF).\" OFF ON)\ngflags_define (BOOL BUILD_gflags_LIB           \"Request build of the multi-threaded gflags library.\"                      ON  OFF)\ngflags_define (BOOL BUILD_gflags_nothreads_LIB \"Request build of the single-threaded gflags library.\"                     ON  ON)\ngflags_define (BOOL BUILD_PACKAGING            \"Enable build of distribution packages using CPack.\"                       OFF OFF)\ngflags_define (BOOL BUILD_TESTING              \"Enable build of the unit tests and their execution using CTest.\"          OFF OFF)\ngflags_define (BOOL INSTALL_HEADERS            \"Request installation of headers and other development files.\"             ON  OFF)\ngflags_define (BOOL INSTALL_SHARED_LIBS        \"Request installation of shared libraries.\"                                ON  ON)\ngflags_define (BOOL INSTALL_STATIC_LIBS        \"Request installation of static libraries.\"                                ON  OFF)\ngflags_define (BOOL REGISTER_BUILD_DIR         \"Request entry of build directory in CMake's package registry.\"            OFF OFF)\ngflags_define (BOOL REGISTER_INSTALL_PREFIX    \"Request entry of installed package in CMake's package registry.\"          ON  OFF)\ngflags_define (BOOL EXPORT_NAMESPACE_SET       \"Request export namespace targets set.\"                                    ON  ON)\ngflags_define (BOOL EXPORT_NONAMESPACE_SET     \"Request export nonamespace targets set.\"                                  ON  OFF)\n\ngflags_property (BUILD_STATIC_LIBS   ADVANCED TRUE)\ngflags_property (INSTALL_HEADERS     ADVANCED TRUE)\ngflags_property (INSTALL_SHARED_LIBS ADVANCED TRUE)\ngflags_property (INSTALL_STATIC_LIBS ADVANCED TRUE)\n\nif (NOT GFLAGS_IS_SUBPROJECT)\n  foreach (varname IN ITEMS CMAKE_INSTALL_PREFIX)\n    gflags_property (${varname} ADVANCED FALSE)\n  endforeach ()\n  foreach (varname IN ITEMS CMAKE_CONFIGURATION_TYPES CMAKE_OSX_ARCHITECTURES CMAKE_OSX_DEPLOYMENT_TARGET CMAKE_OSX_SYSROOT)\n    gflags_property (${varname} ADVANCED TRUE)\n  endforeach ()\n  if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CXX_FLAGS)\n    gflags_set (CMAKE_BUILD_TYPE Release)\n  endif ()\n  if (CMAKE_CONFIGURATION_TYPES)\n    gflags_property (CMAKE_BUILD_TYPE STRINGS \"${CMAKE_CONFIGURATION_TYPES}\")\n  endif ()\nendif () # NOT GFLAGS_IS_SUBPROJECT\n\nif (NOT BUILD_SHARED_LIBS AND NOT BUILD_STATIC_LIBS)\n  set (BUILD_STATIC_LIBS ON)\nendif ()\nif (NOT BUILD_gflags_LIB AND NOT BUILD_gflags_nothreads_LIB)\n  message (FATAL_ERROR \"At least one of [GFLAGS_]BUILD_gflags_LIB and [GFLAGS_]BUILD_gflags_nothreads_LIB must be ON.\")\nendif ()\n\ngflags_define (STRING INCLUDE_DIR \"Name of include directory of installed header files relative to CMAKE_INSTALL_PREFIX/include/\" \"${PACKAGE_NAME}\")\ngflags_property (INCLUDE_DIR ADVANCED TRUE)\nfile (TO_CMAKE_PATH \"${INCLUDE_DIR}\" INCLUDE_DIR)\nif (IS_ABSOLUTE INCLUDE_DIR)\n  message (FATAL_ERROR \"[GFLAGS_]INCLUDE_DIR must be a path relative to CMAKE_INSTALL_PREFIX/include/\")\nendif ()\nif (INCLUDE_DIR MATCHES \"^\\\\.\\\\.[/\\\\]\")\n  message (FATAL_ERROR \"[GFLAGS_]INCLUDE_DIR must not start with parent directory reference (../)\")\nendif ()\nset (GFLAGS_INCLUDE_DIR \"${INCLUDE_DIR}\")\n\n# ----------------------------------------------------------------------------\n# system checks\ninclude (CheckTypeSize)\ninclude (CheckIncludeFileCXX)\ninclude (CheckCXXSymbolExists)\n\nif (WIN32 AND NOT CYGWIN)\n  set (OS_WINDOWS 1)\nelse ()\n  set (OS_WINDOWS 0)\nendif ()\n\nif (MSVC)\n  set (HAVE_SYS_TYPES_H 1)\n  set (HAVE_STDDEF_H    1) # used by CheckTypeSize module\n  set (HAVE_UNISTD_H    0)\n  set (HAVE_SYS_STAT_H  1)\n  set (HAVE_SHLWAPI_H   1)\n  if (MSVC_VERSION VERSION_LESS 1600)\n    check_include_file_cxx (\"stdint.h\" HAVE_STDINT_H)\n    bool_to_int (HAVE_STDINT_H)  # used in #if directive\n  else ()\n    set (HAVE_STDINT_H 1)\n  endif ()\n  if (MSVC_VERSION VERSION_LESS 1800)\n    check_include_file_cxx (\"inttypes.h\" HAVE_INTTYPES_H)\n    bool_to_int (HAVE_INTTYPES_H)  # used in #if directive\n  else ()\n    set (HAVE_INTTYPES_H 1)\n  endif ()\nelse ()\n  foreach (fname IN ITEMS unistd stdint inttypes sys/types sys/stat fnmatch)\n    string (TOUPPER \"${fname}\" FNAME)\n    string (REPLACE \"/\" \"_\" FNAME \"${FNAME}\")\n    if (NOT HAVE_${FNAME}_H)\n      check_include_file_cxx (\"${fname}.h\" HAVE_${FNAME}_H)\n    endif ()\n  endforeach ()\n  if (NOT HAVE_FNMATCH_H AND OS_WINDOWS)\n    check_include_file_cxx (\"shlwapi.h\" HAVE_SHLWAPI_H)\n  endif ()\n  # the following are used in #if directives not #ifdef\n  bool_to_int (HAVE_STDINT_H)\n  bool_to_int (HAVE_SYS_TYPES_H)\n  bool_to_int (HAVE_INTTYPES_H)\nendif ()\n\ngflags_define (STRING INTTYPES_FORMAT \"Format of integer types: \\\"C99\\\" (uint32_t), \\\"BSD\\\" (u_int32_t), \\\"VC7\\\" (__int32)\" \"\")\ngflags_property (INTTYPES_FORMAT STRINGS \"C99;BSD;VC7\")\ngflags_property (INTTYPES_FORMAT ADVANCED TRUE)\nif (NOT INTTYPES_FORMAT)\n  set (TYPES uint32_t u_int32_t)\n  if (MSVC)\n    list (INSERT TYPES 0 __int32)\n  endif ()\n  foreach (type IN LISTS TYPES)\n    check_type_size (${type} ${type} LANGUAGE CXX)\n    if (HAVE_${type})\n      break ()\n    endif ()\n  endforeach ()\n  if (HAVE_uint32_t)\n    gflags_set (INTTYPES_FORMAT C99)\n  elseif (HAVE_u_int32_t)\n    gflags_set (INTTYPES_FORMAT BSD)\n  elseif (HAVE___int32)\n    gflags_set (INTTYPES_FORMAT VC7)\n  else ()\n    gflags_property (INTTYPES_FORMAT ADVANCED FALSE)\n    message (FATAL_ERROR \"Do not know how to define a 32-bit integer quantity on your system!\"\n                         \" Neither uint32_t, u_int32_t, nor __int32 seem to be available.\"\n                         \" Set [GFLAGS_]INTTYPES_FORMAT to either C99, BSD, or VC7 and try again.\")\n  endif ()\nendif ()\n# use of special characters in strings to circumvent bug #0008226\nif (\"^${INTTYPES_FORMAT}$\" STREQUAL \"^WIN$\")\n  gflags_set (INTTYPES_FORMAT VC7)\nendif ()\nif (NOT INTTYPES_FORMAT MATCHES \"^(C99|BSD|VC7)$\")\n  message (FATAL_ERROR \"Invalid value for [GFLAGS_]INTTYPES_FORMAT! Choose one of \\\"C99\\\", \\\"BSD\\\", or \\\"VC7\\\"\")\nendif ()\nset (GFLAGS_INTTYPES_FORMAT \"${INTTYPES_FORMAT}\")\nset (GFLAGS_INTTYPES_FORMAT_C99 0)\nset (GFLAGS_INTTYPES_FORMAT_BSD 0)\nset (GFLAGS_INTTYPES_FORMAT_VC7 0)\nset (\"GFLAGS_INTTYPES_FORMAT_${INTTYPES_FORMAT}\" 1)\n\nif (MSVC)\n  set (HAVE_strtoll 0)\n  set (HAVE_strtoq  0)\nelse ()\n  check_cxx_symbol_exists (strtoll stdlib.h HAVE_STRTOLL)\n  if (NOT HAVE_STRTOLL)\n    check_cxx_symbol_exists (strtoq stdlib.h HAVE_STRTOQ)\n  endif ()\nendif ()\n\nif (BUILD_gflags_LIB)\n  set (CMAKE_THREAD_PREFER_PTHREAD TRUE)\n  find_package (Threads)\n  if (Threads_FOUND AND CMAKE_USE_PTHREADS_INIT)\n    set (HAVE_PTHREAD 1)\n    check_type_size (pthread_rwlock_t RWLOCK LANGUAGE CXX)\n  else ()\n    set (HAVE_PTHREAD 0)\n  endif ()\n  if (UNIX AND NOT HAVE_PTHREAD)\n    if (CMAKE_HAVE_PTHREAD_H)\n      set (what \"library\")\n    else ()\n      set (what \".h file\")\n    endif ()\n    message (FATAL_ERROR \"Could not find pthread${what}. Check the log file\"\n                         \"\\n\\t${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeError.log\"\n                         \"\\nor disable the build of the multi-threaded gflags library (BUILD_gflags_LIB=OFF).\")\n  endif ()\nelse ()\n  set (HAVE_PTHREAD 0)\nendif ()\n\n# ----------------------------------------------------------------------------\n# source files - excluding root subdirectory and/or .in suffix\nset (PUBLIC_HDRS\n  \"gflags.h\"\n  \"gflags_declare.h\"\n  \"gflags_completions.h\"\n)\n\nif (GFLAGS_NAMESPACE_SECONDARY)\n  set (INCLUDE_GFLAGS_NS_H \"// Import gflags library symbols into alternative/deprecated namespace(s)\")\n  foreach (ns IN LISTS GFLAGS_NAMESPACE_SECONDARY)\n    string (TOUPPER \"${ns}\" NS)\n    set (gflags_ns_h \"${PROJECT_BINARY_DIR}/include/${GFLAGS_INCLUDE_DIR}/gflags_${ns}.h\")\n    configure_file (\"${PROJECT_SOURCE_DIR}/src/gflags_ns.h.in\" \"${gflags_ns_h}\" @ONLY)\n    list (APPEND PUBLIC_HDRS \"${gflags_ns_h}\")\n    set (INCLUDE_GFLAGS_NS_H \"${INCLUDE_GFLAGS_NS_H}\\n#include \\\"gflags_${ns}.h\\\"\")\n  endforeach ()\nelse ()\n  set (INCLUDE_GFLAGS_NS_H)\nendif ()\n\nset (PRIVATE_HDRS\n  \"defines.h\"\n  \"config.h\"\n  \"util.h\"\n  \"mutex.h\"\n)\n\nset (GFLAGS_SRCS\n  \"gflags.cc\"\n  \"gflags_reporting.cc\"\n  \"gflags_completions.cc\"\n)\n\nif (OS_WINDOWS)\n  list (APPEND PRIVATE_HDRS \"windows_port.h\")\n  list (APPEND GFLAGS_SRCS  \"windows_port.cc\")\nendif ()\n\n# ----------------------------------------------------------------------------\n# configure source files\nif (NOT DEFINED GFLAGS_ATTRIBUTE_UNUSED)\n  if (CMAKE_COMPILER_IS_GNUCXX)\n    set (GFLAGS_ATTRIBUTE_UNUSED \"__attribute((unused))\")\n  else ()\n    set (GFLAGS_ATTRIBUTE_UNUSED)\n  endif ()\nendif ()\n\n# whenever we build a shared library (DLL on Windows), configure the public\n# headers of the API for use of this shared library rather than the optionally\n# also build statically linked library; users can override GFLAGS_DLL_DECL\n# in particular, this done by setting the INTERFACE_COMPILE_DEFINITIONS of\n# static libraries to include an empty definition for GFLAGS_DLL_DECL\nif (NOT DEFINED GFLAGS_IS_A_DLL)\n  if (BUILD_SHARED_LIBS)\n    set (GFLAGS_IS_A_DLL 1)\n  else ()\n    set (GFLAGS_IS_A_DLL 0)\n  endif ()\nendif ()\n\nconfigure_headers (PUBLIC_HDRS  ${PUBLIC_HDRS})\nconfigure_sources (PRIVATE_HDRS ${PRIVATE_HDRS})\nconfigure_sources (GFLAGS_SRCS  ${GFLAGS_SRCS})\n\n# ----------------------------------------------------------------------------\n# output directories\nif (NOT GFLAGS_IS_SUBPROJECT)\n  set (CMAKE_RUNTIME_OUTPUT_DIRECTORY \"bin\")\n  set (CMAKE_LIBRARY_OUTPUT_DIRECTORY \"lib\")\n  set (CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"lib\")\nendif ()\n# Set postfixes for generated libraries based on buildtype.\nset(CMAKE_RELEASE_POSTFIX \"\")\nset(CMAKE_DEBUG_POSTFIX \"_debug\")\n\n# ----------------------------------------------------------------------------\n# installation directories\nif (OS_WINDOWS AND NOT MINGW)\n  set (RUNTIME_INSTALL_DIR \"bin\")\n  set (LIBRARY_INSTALL_DIR \"lib\")\n  set (INCLUDE_INSTALL_DIR \"include\")\n  set (CONFIG_INSTALL_DIR  \"lib/cmake/${PACKAGE_NAME}\")\n  set (PKGCONFIG_INSTALL_DIR)\nelse ()\n  set (RUNTIME_INSTALL_DIR bin)\n  # The LIB_INSTALL_DIR and LIB_SUFFIX variables are used by the Fedora\n  # package maintainers. Also package maintainers of other distribution\n  # packages need to be able to specify the name of the library directory.\n  if (NOT GFLAGS_LIBRARY_INSTALL_DIR AND LIB_INSTALL_DIR)\n    set (GFLAGS_LIBRARY_INSTALL_DIR \"${LIB_INSTALL_DIR}\")\n  endif ()\n  gflags_define (PATH LIBRARY_INSTALL_DIR \"Directory of installed libraries, e.g., \\\"lib64\\\"\" \"lib${LIB_SUFFIX}\")\n  gflags_property (LIBRARY_INSTALL_DIR ADVANCED TRUE)\n  set (INCLUDE_INSTALL_DIR include)\n  set (CONFIG_INSTALL_DIR  ${LIBRARY_INSTALL_DIR}/cmake/${PACKAGE_NAME})\n  set (PKGCONFIG_INSTALL_DIR ${LIBRARY_INSTALL_DIR}/pkgconfig)\nendif ()\n\n# ----------------------------------------------------------------------------\n# add library targets\nset (TARGETS)\n# static vs. shared\nforeach (TYPE IN ITEMS STATIC SHARED)\n  if (BUILD_${TYPE}_LIBS)\n    string (TOLOWER \"${TYPE}\" type)\n    # whether or not targets are a DLL\n    if (OS_WINDOWS AND \"^${TYPE}$\" STREQUAL \"^SHARED$\")\n      set (GFLAGS_IS_A_DLL 1)\n    else ()\n      set (GFLAGS_IS_A_DLL 0)\n    endif ()\n    # filename suffix for static libraries on Windows for MSVC toolchain only\n    if (OS_WINDOWS AND NOT MINGW AND \"^${TYPE}$\" STREQUAL \"^STATIC$\")\n      set (type_suffix \"_${type}\")\n    else ()\n      set (type_suffix \"\")\n    endif ()\n    # multi-threaded vs. single-threaded\n    foreach (opts IN ITEMS \"\" _nothreads)\n      if (BUILD_gflags${opts}_LIB)\n        set (target_name \"gflags${opts}_${type}\")\n        add_library (${target_name} ${TYPE} ${GFLAGS_SRCS} ${PRIVATE_HDRS} ${PUBLIC_HDRS})\n        set_target_properties (${target_name} PROPERTIES\n          OUTPUT_NAME \"gflags${opts}${type_suffix}\"\n          VERSION     \"${PACKAGE_VERSION}\"\n          SOVERSION   \"${PACKAGE_SOVERSION}\"\n        )\n        set (include_dirs \"$<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/include>\")\n        if (INSTALL_HEADERS)\n          list (APPEND include_dirs \"$<INSTALL_INTERFACE:${INCLUDE_INSTALL_DIR}>\")\n        endif ()\n        target_include_directories (${target_name}\n          PUBLIC  \"${include_dirs}\"\n          PRIVATE \"${PROJECT_SOURCE_DIR}/src;${PROJECT_BINARY_DIR}/include/${GFLAGS_INCLUDE_DIR}\"\n        )\n        target_compile_definitions (${target_name} PUBLIC GFLAGS_IS_A_DLL=${GFLAGS_IS_A_DLL})\n        if (opts MATCHES \"nothreads\")\n          target_compile_definitions (${target_name} PRIVATE NO_THREADS)\n        elseif (CMAKE_USE_PTHREADS_INIT)\n          target_link_libraries (${target_name} ${CMAKE_THREAD_LIBS_INIT})\n        endif ()\n        if (HAVE_SHLWAPI_H)\n          target_link_libraries (${target_name} shlwapi.lib)\n        endif ()\n        list (APPEND TARGETS ${target_name})\n        # add convenience make target for build of both shared and static libraries\n        if (NOT GFLAGS_IS_SUBPROJECT)\n          if (NOT TARGET gflags${opts})\n            add_custom_target (gflags${opts})\n          endif ()\n          add_dependencies (gflags${opts} ${target_name})\n        endif ()\n      endif ()\n    endforeach ()\n  endif ()\nendforeach ()\n\n# add ALIAS target for use in super-project, prefer static over shared, single-threaded over multi-threaded\nif (GFLAGS_IS_SUBPROJECT)\n  foreach (type IN ITEMS static shared)\n    foreach (opts IN ITEMS \"_nothreads\" \"\")\n      if (TARGET gflags${opts}_${type})\n        # Define \"gflags\" alias for super-projects treating targets of this library as part of their own project\n        # (also for backwards compatibility with gflags 2.2.1 which only defined this alias)\n        add_library (gflags ALIAS gflags${opts}_${type})\n        # Define \"gflags::gflags\" alias for projects that support both find_package(gflags) and add_subdirectory(gflags)\n        add_library (gflags::gflags ALIAS gflags${opts}_${type})\n        break ()\n      endif ()\n    endforeach ()\n    if (TARGET gflags::gflags)\n       break ()\n    endif ()\n  endforeach ()\nendif ()\n\n# ----------------------------------------------------------------------------\n# installation rules\nset (EXPORT_NAME ${PACKAGE_NAME}-targets)\nfile (RELATIVE_PATH INSTALL_PREFIX_REL2CONFIG_DIR \"${CMAKE_INSTALL_PREFIX}/${CONFIG_INSTALL_DIR}\" \"${CMAKE_INSTALL_PREFIX}\")\nconfigure_file (cmake/config.cmake.in  \"${PROJECT_BINARY_DIR}/${PACKAGE_NAME}-config-install.cmake\" @ONLY)\nconfigure_file (cmake/version.cmake.in \"${PROJECT_BINARY_DIR}/${PACKAGE_NAME}-config-version.cmake\" @ONLY)\n\nif (BUILD_SHARED_LIBS AND INSTALL_SHARED_LIBS)\n  foreach (opts IN ITEMS \"\" _nothreads)\n    if (BUILD_gflags${opts}_LIB)\n      install (TARGETS gflags${opts}_shared\n               EXPORT ${EXPORT_NAME}\n               RUNTIME DESTINATION ${RUNTIME_INSTALL_DIR}\n               LIBRARY DESTINATION ${LIBRARY_INSTALL_DIR}\n               ARCHIVE DESTINATION ${LIBRARY_INSTALL_DIR}\n      )\n    endif ()\n  endforeach ()\nendif ()\nif (BUILD_STATIC_LIBS AND INSTALL_STATIC_LIBS)\n  foreach (opts IN ITEMS \"\" _nothreads)\n    if (BUILD_gflags${opts}_LIB)\n      install (TARGETS gflags${opts}_static\n               EXPORT ${EXPORT_NAME}\n               RUNTIME DESTINATION ${RUNTIME_INSTALL_DIR}\n               LIBRARY DESTINATION ${LIBRARY_INSTALL_DIR}\n               ARCHIVE DESTINATION ${LIBRARY_INSTALL_DIR}\n      )\n    endif ()\n  endforeach ()\nendif ()\n\nif (INSTALL_HEADERS)\n  install (FILES ${PUBLIC_HDRS} DESTINATION ${INCLUDE_INSTALL_DIR}/${GFLAGS_INCLUDE_DIR})\n  install (\n    FILES \"${PROJECT_BINARY_DIR}/${PACKAGE_NAME}-config-install.cmake\"\n    RENAME ${PACKAGE_NAME}-config.cmake\n    DESTINATION ${CONFIG_INSTALL_DIR}\n  )\n  install (\n    FILES \"${PROJECT_BINARY_DIR}/${PACKAGE_NAME}-config-version.cmake\"\n    DESTINATION ${CONFIG_INSTALL_DIR}\n  )\n  if (EXPORT_NAMESPACE_SET)\n    install (\n      EXPORT ${EXPORT_NAME}\n      NAMESPACE ${PACKAGE_NAME}::\n      DESTINATION ${CONFIG_INSTALL_DIR}\n    )\n  endif ()\n  if (EXPORT_NONAMESPACE_SET)\n    install (\n      EXPORT ${EXPORT_NAME}\n      FILE ${PACKAGE_NAME}-nonamespace-targets.cmake\n      DESTINATION ${CONFIG_INSTALL_DIR}\n    )\n  endif ()\n  if (UNIX)\n    install (PROGRAMS src/gflags_completions.sh DESTINATION ${RUNTIME_INSTALL_DIR})\n  endif ()\n  if (PKGCONFIG_INSTALL_DIR)\n    configure_file (\"cmake/package.pc.in\" \"${PROJECT_BINARY_DIR}/${PACKAGE_NAME}.pc\" @ONLY)\n    install (FILES \"${PROJECT_BINARY_DIR}/${PACKAGE_NAME}.pc\" DESTINATION \"${PKGCONFIG_INSTALL_DIR}\")\n  endif ()\nendif ()\n\n# ----------------------------------------------------------------------------\n# support direct use of build tree\nset (INSTALL_PREFIX_REL2CONFIG_DIR .)\nif (EXPORT_NAMESPACE_SET)\n  export (\n    TARGETS ${TARGETS}\n    NAMESPACE ${PACKAGE_NAME}::\n    FILE \"${PROJECT_BINARY_DIR}/${EXPORT_NAME}.cmake\"\n  )\nendif ()\nif (EXPORT_NONAMESPACE_SET)\n  export (\n    TARGETS ${TARGETS}\n    FILE \"${PROJECT_BINARY_DIR}/${PACKAGE_NAME}-nonamespace-targets.cmake\"\n  )\nendif ()\nif (REGISTER_BUILD_DIR)\n  export (PACKAGE ${PACKAGE_NAME})\nendif ()\nif (REGISTER_INSTALL_PREFIX)\n  register_gflags_package(${CONFIG_INSTALL_DIR})\nendif ()\nconfigure_file (cmake/config.cmake.in \"${PROJECT_BINARY_DIR}/${PACKAGE_NAME}-config.cmake\" @ONLY)\n\n# ----------------------------------------------------------------------------\n# testing - MUST follow the generation of the build tree config file\nif (BUILD_TESTING)\n  include (CTest)\n  add_subdirectory (test)\nendif ()\n\n# ----------------------------------------------------------------------------\n# packaging\nif (BUILD_PACKAGING)\n\n  if (NOT BUILD_SHARED_LIBS AND NOT INSTALL_HEADERS)\n    message (WARNING \"Package will contain static libraries without headers!\"\n                     \"\\nRecommended options for generation of runtime package:\"\n                     \"\\n  BUILD_SHARED_LIBS=ON\"\n                     \"\\n  BUILD_STATIC_LIBS=OFF\"\n                     \"\\n  INSTALL_HEADERS=OFF\"\n                     \"\\n  INSTALL_SHARED_LIBS=ON\"\n                     \"\\nRecommended options for generation of development package:\"\n                     \"\\n  BUILD_SHARED_LIBS=ON\"\n                     \"\\n  BUILD_STATIC_LIBS=ON\"\n                     \"\\n  INSTALL_HEADERS=ON\"\n                     \"\\n  INSTALL_SHARED_LIBS=ON\"\n                     \"\\n  INSTALL_STATIC_LIBS=ON\"\n    )\n  endif ()\n\n  # default package generators\n  if (APPLE)\n    set (PACKAGE_GENERATOR        \"PackageMaker\")\n    set (PACKAGE_SOURCE_GENERATOR \"TGZ;ZIP\")\n  elseif (UNIX)\n    set (PACKAGE_GENERATOR        \"DEB;RPM\")\n    set (PACKAGE_SOURCE_GENERATOR \"TGZ;ZIP\")\n  else ()\n    set (PACKAGE_GENERATOR        \"ZIP\")\n    set (PACKAGE_SOURCE_GENERATOR \"ZIP\")\n  endif ()\n\n  # used package generators\n  set (CPACK_GENERATOR        \"${PACKAGE_GENERATOR}\"        CACHE STRING \"List of binary package generators (CPack).\")\n  set (CPACK_SOURCE_GENERATOR \"${PACKAGE_SOURCE_GENERATOR}\" CACHE STRING \"List of source package generators (CPack).\")\n  mark_as_advanced (CPACK_GENERATOR CPACK_SOURCE_GENERATOR)\n\n  # some package generators (e.g., PackageMaker) do not allow .md extension\n  configure_file (\"${CMAKE_CURRENT_LIST_DIR}/README.md\" \"${CMAKE_CURRENT_BINARY_DIR}/README.txt\" COPYONLY)\n\n  # common package information\n  set (CPACK_PACKAGE_VENDOR              \"Andreas Schuh\")\n  set (CPACK_PACKAGE_CONTACT             \"google-gflags@googlegroups.com\")\n  set (CPACK_PACKAGE_NAME                \"${PACKAGE_NAME}\")\n  set (CPACK_PACKAGE_VERSION             \"${PACKAGE_VERSION}\")\n  set (CPACK_PACKAGE_VERSION_MAJOR       \"${PACKAGE_VERSION_MAJOR}\")\n  set (CPACK_PACKAGE_VERSION_MINOR       \"${PACKAGE_VERSION_MINOR}\")\n  set (CPACK_PACKAGE_VERSION_PATCH       \"${PACKAGE_VERSION_PATCH}\")\n  set (CPACK_PACKAGE_DESCRIPTION_SUMMARY \"${PACKAGE_DESCRIPTION}\")\n  set (CPACK_RESOURCE_FILE_WELCOME       \"${CMAKE_CURRENT_BINARY_DIR}/README.txt\")\n  set (CPACK_RESOURCE_FILE_LICENSE       \"${CMAKE_CURRENT_LIST_DIR}/COPYING.txt\")\n  set (CPACK_PACKAGE_DESCRIPTION_FILE    \"${CMAKE_CURRENT_BINARY_DIR}/README.txt\")\n  set (CPACK_INSTALL_PREFIX              \"${CMAKE_INSTALL_PREFIX}\")\n  set (CPACK_OUTPUT_FILE_PREFIX          packages)\n  set (CPACK_PACKAGE_RELOCATABLE         TRUE)\n  set (CPACK_MONOLITHIC_INSTALL          TRUE)\n\n  # RPM package information -- used in cmake/package.cmake.in also for DEB\n  set (CPACK_RPM_PACKAGE_GROUP   \"Development/Libraries\")\n  set (CPACK_RPM_PACKAGE_LICENSE \"BSD\")\n  set (CPACK_RPM_PACKAGE_URL     \"${PACKAGE_URL}\")\n  set (CPACK_RPM_CHANGELOG_FILE  \"${CMAKE_CURRENT_LIST_DIR}/ChangeLog.txt\")\n\n  if (INSTALL_HEADERS)\n    set (CPACK_RESOURCE_FILE_README \"${CMAKE_CURRENT_LIST_DIR}/doc/index.html\")\n  else ()\n    set (CPACK_RESOURCE_FILE_README \"${CMAKE_CURRENT_LIST_DIR}/cmake/README_runtime.txt\")\n  endif ()\n\n  # system/architecture\n  if (WINDOWS)\n    if (CMAKE_CL_64)\n      set (CPACK_SYSTEM_NAME \"win64\")\n    else ()\n      set (CPACK_SYSTEM_NAME \"win32\")\n    endif ()\n    set (CPACK_PACKAGE_ARCHITECTURE)\n  elseif (APPLE)\n    set (CPACK_PACKAGE_ARCHITECTURE darwin)\n  else ()\n    string (TOLOWER \"${CMAKE_SYSTEM_NAME}\" CPACK_SYSTEM_NAME)\n    if (CMAKE_CXX_FLAGS MATCHES \"-m32\")\n      set (CPACK_PACKAGE_ARCHITECTURE i386)\n    else ()\n      execute_process (\n        COMMAND         dpkg --print-architecture\n        RESULT_VARIABLE RV\n        OUTPUT_VARIABLE CPACK_PACKAGE_ARCHITECTURE\n      )\n      if (RV EQUAL 0)\n\t      string (STRIP \"${CPACK_PACKAGE_ARCHITECTURE}\" CPACK_PACKAGE_ARCHITECTURE)\n      else ()\n        execute_process (COMMAND uname -m OUTPUT_VARIABLE CPACK_PACKAGE_ARCHITECTURE)\n        if (CPACK_PACKAGE_ARCHITECTURE MATCHES \"x86_64\")\n\t        set (CPACK_PACKAGE_ARCHITECTURE amd64)\n        else ()\n          set (CPACK_PACKAGE_ARCHITECTURE i386)\n        endif ()\n      endif ()\n    endif ()\n  endif ()\n\n  # source package settings\n  set (CPACK_SOURCE_TOPLEVEL_TAG      \"source\")\n  set (CPACK_SOURCE_PACKAGE_FILE_NAME \"${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}\")\n  set (CPACK_SOURCE_IGNORE_FILES      \"/\\\\\\\\.git/;\\\\\\\\.swp$;\\\\\\\\.#;/#;\\\\\\\\.*~;cscope\\\\\\\\.*;/[Bb]uild[.+-_a-zA-Z0-9]*/\")\n\n  # default binary package settings\n  set (CPACK_INCLUDE_TOPLEVEL_DIRECTORY TRUE)\n  set (CPACK_PACKAGE_FILE_NAME          \"${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CPACK_SYSTEM_NAME}\")\n  if (CPACK_PACKAGE_ARCHITECTURE)\n    set (CPACK_PACKAGE_FILE_NAME \"${CPACK_PACKAGE_FILE_NAME}-${CPACK_PACKAGE_ARCHITECTURE}\")\n  endif ()\n\n  # generator specific configuration file\n  #\n  # allow package maintainers to use their own configuration file\n  # $ cmake -DCPACK_PROJECT_CONFIG_FILE:FILE=/path/to/package/config\n  if (NOT CPACK_PROJECT_CONFIG_FILE)\n    configure_file (\n      \"${CMAKE_CURRENT_LIST_DIR}/cmake/package.cmake.in\"\n      \"${PROJECT_BINARY_DIR}/${PACKAGE_NAME}-package.cmake\" @ONLY\n    )\n    set (CPACK_PROJECT_CONFIG_FILE \"${PROJECT_BINARY_DIR}/${PACKAGE_NAME}-package.cmake\")\n  endif ()\n\n  include (CPack)\n\nendif () # BUILD_PACKAGING\n\nif (NOT GFLAGS_IS_SUBPROJECT AND NOT TARGET uninstall)\n  configure_file (\n    \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake\" @ONLY\n  )\n  add_custom_target(uninstall COMMAND ${CMAKE_COMMAND} -P \"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake\")\nendif ()\n"
        },
        {
          "name": "COPYING.txt",
          "type": "blob",
          "size": 1.4443359375,
          "content": "Copyright (c) 2006, Google Inc.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n    * Neither the name of Google Inc. nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "ChangeLog.txt",
          "type": "blob",
          "size": 12.74609375,
          "content": "* Sun Nov 11 2018 - Andreas Schuh <andreas.schuh.84@gmail.com>\n\n- gflags: version 2.2.2\nFixed 267: Support build with GCC option \"-fvisibility=hidden\".\nFixed 262: Declare FLAGS_no##name variables as static to avoid \"previous extern\" warning.\nFixed 261: Declare FlagRegisterer c’tor explicit template instanations as extern in header\nFixed 257: Build with _UNICODE support on Windows.\nFixed 233/234/235: Move CMake defines that are unused by Bazel to separate header; makes config.h private again\nFixed 228: Build with recent MinGW versions that define setenv.\nFixed 226: Remove obsolete and unused CleanFileName code\nMerged 266: Various PVS Studio and GCC warnings.\nMerged 258: Fix build with some Clang variants that define \"restrict\" macro.\nMerged 252: Update documentation on how to use Bazel.\nMerged 249: Use \"_debug\" postfix for debug libraries. \nMerged 247: CMake \"project\" VERSION; no enable_testing(); \"gflags::\" import target prefix.\nMerged 246: Add Bazel-on-Windows support.\nMerged 239: Use GFLAGS_NAMESPACE instead of \"gflags\" in test executable.\nMerged 237: Removed unused functions; fixes compilation with -Werror compiler option.\nMerged 232: Fix typo in Bazel's BUILD definition\nMerged 230: Remove using ::fLS::clstring.\nMerged 221: Add convenience 'uninstall' target\n\n* Tue Jul 11 2017 - Andreas Schuh <andreas.schuh.84@gmail.com>\n\n- gflags: version 2.2.1\n- Link to online documentation in README\n- Merged 194: Include utils by file instead of CMAKE_MODULE_PATH search\n- Merged 195: Remove unused program_name variable\n- Merged 196: Enable language C for older CMake versions when needed\n- Merged 202: Changed include directory in bazel build\n- Merged 207: Mark single argument constructors in mutex.h as explicit\n- Merged 209: Use inttypes.h on VC++ 2013 and later\n- Merged 212: Fix statically linked gflags library with MSVC\n- Merged 213: Modify installation paths on Windows for vcpkg\n- Merged 215: Fix static initialization order fiasco caused by global registry lock\n- Merged 216: Fix use of ARGC in CMake macros\n- Merged 222: Static code analyzer error regarding strncmp with empty kRootDir\n- Merged 224: Check HAVE_STDINT_H or HAVE_INTTYPES_H for older MSVC versions\n\n* Fri Nov 25 2016 - Andreas Schuh <andreas.schuh.84@gmail.com>\n\n- gflags: version 2.2.0\n- Merged 178: Implicitly convert dashes in option names to underscores\n- Merged 159: CI builds and automatic tests with Travis CI and AppVeyor\n- Merged 158: Use enum for flag value types\n- Merged 126: File name postfix for static libraries on Windows\n- Closed issue 120: Configure and install gflags.pc file for pkg-config users\n- Fixed issue 127: snprintf already defined when building with MSVC 2015\n- Fixed issue 51/138: Memory leaks reported by valgrind\n- Fixed issue 173: Validate flags only once\n- Fixed issue 168: Unsigned and signed comparison in gflags_reporting.cc\n- Fixed issues 176/153: Add -lpthread link argument to Bazel build, refactor BUILD rules\n- Fixed issue 89: Add GFLAGS_IS_A_DLL to imported CMake target INTERFACE_COMPILE_DEFINITIONS\n- Fixed issue 104: Set INTERFACE_INCLUDE_DIRECTORIES of exported CMake targets\n- Fixed issue 174: Missing gflags-targets.cmake file after installation\n- Fixed issue 186: Error linking to gflags IMPLIB with MSVC using CMake\n- Closed issue 106: Add example project to test use of gflags library\n\n* Tue Mar 24 2014 - Andreas Schuh <andreas.schuh.84@gmail.com>\n\n- gflags: version 2.1.2\n- Moved project to GitHub\n- Added GFLAGS_NAMESPACE definition to gflags_declare.h\n- Fixed issue 94: Keep \"google\" as primary namespace and import symbols into \"gflags\" namespace\n- Fixed issue 96: Fix binary ABI compatibility with gflags 2.0 using \"google\" as primary namespace\n- Fixed issue 97/101: Removed (patched) CMake modules and enabled C language instead\n- Fixed issue 103: Set CMake policy CMP0042 to silence warning regarding MACOS_RPATH setting\n\n* Sun Mar 20 2014 - Andreas Schuh <google-gflags@googlegroups.com>\n\n- gflags: version 2.1.1\n- Fixed issue 77: GFLAGS_IS_A_DLL expands to empty string in gflags_declare.h\n- Fixed issue 79: GFLAGS_NAMESPACE not expanded to actual namespace in gflags_declare.h\n- Fixed issue 80: Allow include path to differ from GFLAGS_NAMESPACE\n\n* Thu Mar 20 2014 - Andreas Schuh <google-gflags@googlegroups.com>\n\n- gflags: version 2.1.0\n- Build system configuration using CMake instead of autotools\n- CPack packaging support for Debian/Ubuntu, Red Hat, and Mac OS X\n- Fixed issue 54: Fix \"invalid suffix on literal\" (C++11)\n- Fixed issue 57: Use _strdup instead of strdup on Windows\n- Fixed issue 62: Change all preprocessor include guards to start with GFLAGS_\n- Fixed issue 64: Add DEFINE_validator macro\n- Fixed issue 73: Warnings in Visual Studio 2010 and unable to compile unit test\n\n* Wed Jan 25 2012 - Google Inc. <google-gflags@googlegroups.com>\n\n- gflags: version 2.0\n- Changed the 'official' gflags email in setup.py/etc\n- Renamed google-gflags.sln to gflags.sln\n- Changed copyright text to reflect Google's relinquished ownership\n\n* Tue Dec 20 2011 - Google Inc. <opensource@google.com>\n\n- google-gflags: version 1.7\n- Add CommandLineFlagInfo::flag_ptr pointing to current storage (musji)\n- PORTING: flush after writing to stderr, needed on cygwin\n- PORTING: Clean up the GFLAGS_DLL_DECL stuff better\n- Fix a bug in StringPrintf() that affected large strings (csilvers)\n- Die at configure-time when g++ isn't installed\n\n* Fri Jul 29 2011 - Google Inc. <opensource@google.com>\n\n- google-gflags: version 1.6\n- BUGFIX: Fix a bug where we were leaving out a required $(top_srcdir)\n- Fix definition of clstring (jyrki)\n- Split up flag declares into its own file (jyrki)\n- Add --version support (csilvers)\n- Update the README for gflags with static libs\n- Update acx_pthread.m4 for nostdlib\n- Change ReparseCommandLineFlags to return void (csilvers)\n- Some doc typofixes and example augmentation (various)\n\n* Mon Jan 24 2011 - Google Inc. <opensource@google.com>\n\n- google-gflags: version 1.5\n- Better reporting of current vs default value (handler)\n- Add API for cleaning up of memory at program-exit (jmarantz)\n- Fix macros to work inside namespaces (csilvers)\n- Use our own string typedef in case string is redefined (csilvers)\n- Updated to autoconf 2.65\n\n* Wed Oct 13 2010 - Google Inc. <opensource@google.com>\n\n- google-gflags: version 1.4\n- Add a check to prevent passing 0 to DEFINE_string (jorg)\n- Reduce compile (.o) size (jyrki)\n- Some small changes to quiet debug compiles (alexk)\n- PORTING: better support static linking on windows (csilvers)\n- DOCUMENTATION: change default values, use validators, etc.\n- Update the NEWS file to be non-empty\n- Add pkg-config (.pc) files for libgflags and libgflags_nothreads\n\n* Mon Jan  4 2010 - Google Inc. <opensource@google.com>\n\n- google-gflags: version 1.3\n- PORTABILITY: can now build and run tests under MSVC (csilvers)\n- Remove the python gflags code, which is now its own package (tansell)\n- Clarify that \"last flag wins\" in the docs (csilvers)\n- Comment danger of using GetAllFlags in validators (wojtekm)\n- PORTABILITY: Some fixes necessary for c++0x (mboerger)\n- Makefile fix: $(srcdir) -> $(top_srcdir) in one place (csilvres)\n- INSTALL: autotools to autoconf v2.64 + automake v1.11 (csilvers)\n\n* Thu Sep 10 2009 - Google Inc. <opensource@google.com>\n\n- google-gflags: version 1.2\n- PORTABILITY: can now build and run tests under mingw (csilvers)\n- Using a string arg for a bool flag is a compile-time error (rbayardo)\n- Add --helpxml to gflags.py (salcianu)\n- Protect against a hypothetical global d'tor mutex problem (csilvers)\n- BUGFIX: can now define a flag after 'using namespace google' (hamaji)\n\n* Tue Apr 14 2009 - Google Inc. <opensource@google.com>\n\n- google-gflags: version 1.1\n- Add both foo and nofoo for boolean flags, with --undefok (andychu)\n- Better document how validators work (wojtekm)\n- Improve binary-detection for bash-completion (mtamsky)\n- Python: Add a concept of \"key flags\", used with --help (salcianu)\n- Python: Robustify flag_values (salcianu)\n- Python: Add a new DEFINE_bool alias (keir, andrewliu)\n- Python: Do module introspection based on module name (dsturtevant)\n- Fix autoconf a bit better, especially on windows and solaris (ajenjo)\n- BUG FIX: gflags_nothreads was linking against the wrong lib (ajenjo)\n- BUG FIX: threads-detection failed on FreeBSD; replace it (ajenjo)\n- PORTABILITY: Quiet an internal compiler error with SUSE 10 (csilvers)\n- PORTABILITY: Update deb.sh for more recently debuilds (csilvers)\n- PORTABILITY: #include more headers to satisfy new gcc's (csilvers)\n- INSTALL: Updated to autoconf 2.61 and libtool 1.5.26 (csilvers)\n\n* Fri Oct  3 2008 - Google Inc. <opensource@google.com>\n\n- google-gflags: version 1.0\n- Add a missing newline to an error string (bcmills)\n- (otherwise exactly the same as gflags 1.0rc2)\n\n* Thu Sep 18 2008 - Google Inc. <opensource@google.com>\n\n- google-gflags: version 1.0rc2\n- Report current flag values in --helpxml (hdn)\n- Fix compilation troubles with gcc 4.3.3 (simonb)\n- BUG FIX: I was missing a std:: in DECLARE_string (csilvers)\n- BUG FIX: Clarify in docs how to specify --bool flags (csilvers)\n- BUG FIX: Fix --helpshort for source files not in a subdir (csilvers)\n- BUG FIX: Fix python unittest for 64-bit builds (bcmills)\n\n* Tue Aug 19 2008 - Google Inc. <opensource@google.com>\n\n- google-gflags: version 1.0rc1\n- Move #include files from google/ to gflags/ (csilvers)\n- Small optimizations to reduce binary (library) size (jyrki)\n- BUGFIX: forgot a std:: in one of the .h files (csilvers)\n- Speed up locking by making sure calls are inlined (ajenjo)\n- 64-BIT COMPATIBILITY: Use %PRId64 instead of %lld (csilvers)\n- PORTABILITY: fix Makefile to work with Cygwin (ajenjo)\n- PORTABILITY: fix code to compile under Visual Studio (ajenjo)\n- PORTABILITY: fix code to compile under Solaris 10 with CC (csilvers)\n\n* Mon Jul 21 2008 - Google Inc. <opensource@google.com>\n\n- google-gflags: version 0.9\n- Add the ability to validate a command-line flag (csilvers)\n- Add completion support for commandline flags in bash (daven)\n- Add -W compile flags to Makefile, when using gcc (csilvers)\n- Allow helpstring to be NULL (cristianoc)\n- Improved documentation of classes in the .cc file (csilvers)\n- Fix python bug with AppendFlagValues + shortnames (jjtswan)\n- Use bool instead of int for boolean flags in gflags.py (bcmills)\n- Simplify the way we declare flags, now more foolproof (csilvers)\n- Better error messages when bool flags collide (colohan)\n- Only evaluate DEFINE_foo macro args once (csilvers)\n\n* Wed Mar 26 2008 - Google Inc. <opensource@google.com>\n\n- google-gflags: version 0.8\n- Export DescribeOneFlag() in the API\n- Add support for automatic line wrapping at 80 cols for gflags.py\n- Bugfix: do not treat an isolated \"-\" the same as an isolated \"--\"\n- Update rpm spec to point to Google Code rather than sourceforge (!)\n- Improve documentation (including documenting thread-safety)\n- Improve #include hygiene\n- Improve testing\n\n* Thu Oct 18 2007 - Google Inc. <opensource@google.com>\n\n- google-gflags: version 0.7\n- Deal even more correctly with libpthread not linked in (csilvers)\n- Add STRIP_LOG, an improved DO_NOT_SHOW_COMMANDLINE_HELP (sioffe)\n- Be more accurate printing default flag values in --help (dsturtevant)\n- Reduce .o file size a bit by using shorter namespace names (jeff)\n- Use relative install path, so 'setup.py --home' works (csilvers)\n- Notice when a boolean flag has a non-boolean default (bnmouli)\n- Broaden --helpshort to match foo-main.cc and foo_main.cc (hendrie)\n- Fix \"no modules match\" message for --helpshort, etc (hendrie)\n\n* Wed Aug 15 2007 - Google Inc. <opensource@google.com>\n\n- google-gflags: version 0.6\n- Deal correctly with case that libpthread is not linked in (csilvers)\n- Update Makefile/tests so we pass \"make distcheck\" (csilvers)\n- Document and test that last assignment to a flag wins (wan)\n\n* Tue Jun 12 2007 - Google Inc. <opensource@google.com>\n\n- google-gflags: version 0.5\n- Include all m4 macros in the distribution (csilvers)\n- Python: Fix broken data_files field in setup.py (sidlon)\n- Python: better string serializing and unparsing (abo, csimmons)\n- Fix checks for NaN and inf to work with Mac OS X (csilvers)\n\n* Thu Apr 19 2007 - Google Inc. <opensource@google.com>\n\n- google-gflags: version 0.4\n- Remove is_default from GetCommandLineFlagInfo (csilvers)\n- Portability fixes: includes, strtoll, gcc4.3 errors (csilvers)\n- A few doc typo cleanups (csilvers)\n\n* Wed Mar 28 2007 - Google Inc. <opensource@google.com>\n\n- google-gflags: version 0.3\n- python portability fix: use popen instead of subprocess (csilvers)\n- Add is_default to CommandLineFlagInfo (pchien)\n- Make docs a bit prettier (csilvers)\n- Actually include the python files in the distribution! :-/ (csilvers)\n\n* Mon Jan 22 2007 - Google Inc. <opensource@google.com>\n\n- google-gflags: version 0.2\n- added support for python commandlineflags, as well as c++\n- gflags2man, a script to turn flags into a man page (dchristian)\n\n* Wed Dec 13 2006 - Google Inc. <opensource@google.com>\n\n- google-gflags: version 0.1\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 4.5087890625,
          "content": "# Installing a binary distribution package\n\nNo official binary distribution packages are provided by the gflags developers.\nThere may, however, be binary packages available for your operating system.\nPlease consult also the package repositories of your Linux distribution.\n\nOn Debian/Ubuntu Linux, gflags can be installed using the following command:\n\n    sudo apt-get install libgflags-dev\n\nOn macOS, [Homebrew](https://brew.sh/) includes a formula for gflags:\n\n    brew install gflags\n\n\n# Compiling the source code with Bazel\n\nTo use gflags in a [Bazel](http://bazel.io) project, map it in as an external\ndependency by editing your WORKSPACE file:\n\n    git_repository(\n        name = \"com_github_gflags_gflags\",\n        commit = \"<INSERT COMMIT SHA HERE>\",\n        remote = \"https://github.com/gflags/gflags.git\",\n    )\n\nYou can then add `@com_github_gflags_gflags//:gflags` to the `deps` section of a\n`cc_binary` or `cc_library` rule, and `#include <gflags/gflags.h>` to include it\nin your source code.\n\n\n# Compiling the source code with vcpkg\n\nYou can download and install gflags using the [vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\n\n    git clone https://github.com/Microsoft/vcpkg.git\n    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n    vcpkg install gflags\n\nThe gflags port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\n\n# Compiling the source code with CMake\n\nThe build system of gflags is since version 2.1 based on [CMake](http://cmake.org).\nThe common steps to build, test, and install software are therefore:\n\n1. Extract source files.\n2. Create build directory and change to it.\n3. Run CMake to configure the build tree.\n4. Build the software using selected build tool.\n5. Test the built software.\n6. Install the built files.\n\nOn Unix-like systems with GNU Make as build tool, these build steps can be\nsummarized by the following sequence of commands executed in a shell,\nwhere ```$package``` and ```$version``` are shell variables which represent\nthe name of this package and the obtained version of the software.\n\n    $ tar xzf gflags-$version-source.tar.gz\n    $ cd gflags-$version\n    $ mkdir build && cd build\n    $ ccmake ..\n    \n      - Press 'c' to configure the build system and 'e' to ignore warnings.\n      - Set CMAKE_INSTALL_PREFIX and other CMake variables and options.\n      - Continue pressing 'c' until the option 'g' is available.\n      - Then press 'g' to generate the configuration files for GNU Make.\n    \n    $ make\n    $ make test    (optional)\n    $ make install (optional)\n\nIn the following, only gflags-specific CMake settings available to\nconfigure the build and installation are documented. Note that most of these\nvariables are for advanced users and binary package maintainers only.\nThey usually do not have to be modified.\n\n\nCMake Option                | Description\n--------------------------- | -------------------------------------------------------\nCMAKE_INSTALL_PREFIX        | Installation directory, e.g., \"/usr/local\" on Unix and \"C:\\Program Files\\gflags\" on Windows.\nBUILD_SHARED_LIBS           | Request build of dynamic link libraries.\nBUILD_STATIC_LIBS           | Request build of static link libraries. Implied if BUILD_SHARED_LIBS is OFF.\nBUILD_PACKAGING             | Enable binary package generation using CPack.\nBUILD_TESTING               | Build tests for execution by CTest.\nBUILD_NC_TESTS              | Request inclusion of negative compilation tests (requires Python).\nBUILD_CONFIG_TESTS          | Request inclusion of package configuration tests (requires Python).\nBUILD_gflags_LIBS           | Request build of multi-threaded gflags libraries (if threading library found).\nBUILD_gflags_nothreads_LIBS | Request build of single-threaded gflags libraries.\nGFLAGS_NAMESPACE            | Name of the C++ namespace to be used by the gflags library. Note that the public source header files are installed in a subdirectory named after this namespace. To maintain backwards compatibility with the Google Commandline Flags, set this variable to \"google\". The default is \"gflags\".\nGFLAGS_INTTYPES_FORMAT      | String identifying format of built-in integer types.\nGFLAGS_INCLUDE_DIR          | Name of headers installation directory relative to CMAKE_INSTALL_PREFIX.\nLIBRARY_INSTALL_DIR         | Name of library installation directory relative to CMAKE_INSTALL_PREFIX.\nINSTALL_HEADERS             | Request installation of public header files.\n"
        },
        {
          "name": "MODULE.bazel",
          "type": "blob",
          "size": 0.05859375,
          "content": "module(\n    name = \"gflags\",\n    compatibility_level = 1,\n)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.341796875,
          "content": "[![Build Status](https://travis-ci.org/gflags/gflags.svg?branch=master)](https://travis-ci.org/gflags/gflags)\n[![Build status](https://ci.appveyor.com/api/projects/status/4ctod566ysraus74/branch/master?svg=true)](https://ci.appveyor.com/project/schuhschuh/gflags/branch/master)\n\nThe documentation of the gflags library is available online at https://gflags.github.io/gflags/.\n\n\n11 November 2018\n----------------\n\nI've just released gflags 2.2.2.\n\nThis maintenance release improves life of Bazel users (no more \"config.h\" leaking into global include paths),\nfixes build with recent MinGW versions, and silences a number of static code analyzer and compiler warnings.\nThe build targets exported by the CMake configuration of this library are now also prefixed by the package\nname \"gflags::\" following a more recent (unwritten) CMake convention. The unprefixed target names are still\nsupported to avoid that dependent projects have to be modified due to this change in imported target names.\n\nPlease report any further issues with this release using the GitHub issue tracker.\n\n\n11 July 2017\n------------\n\nI've just released gflags 2.2.1.\n\nThis maintenance release primarily fixes build issues on Windows and\nfalse alarms reported by static code analyzers.\n\nPlease report any further issues with this release using the GitHub issue tracker.\n\n\n25 November 2016\n----------------\n\nI've finally released gflags 2.2.0.\n\nThis release adds support for use of the gflags library as external dependency\nnot only in projects using CMake, but also [Bazel](https://bazel.build/),\nor [pkg-config](https://www.freedesktop.org/wiki/Software/pkg-config/).\nOne new minor feature is added in this release: when a command flag argument\ncontains dashes, these are implicitly converted to underscores.\nThis is to allow those used to separate words of the flag name by dashes\nto do so, while the flag variable names are required to use underscores.\n\nMemory leaks reported by valgrind should be resolved by this release.\nThis release fixes build errors with MS Visual Studio 2015.\n\nPlease report any further issues with this release using the GitHub issue tracker.\n\n\n24 March 2015\n-------------\n\nI've just released gflags 2.1.2.\n\nThis release completes the namespace change fixes. In particular,\nit restores binary ABI compatibility with release version 2.0.\nThe deprecated \"google\" namespace is by default still kept as\nprimary namespace while symbols are imported into the new \"gflags\" namespace.\nThis can be overridden using the CMake variable GFLAGS_NAMESPACE.\n\nOther fixes of the build configuration are related to the (patched)\nCMake modules FindThreads.cmake and CheckTypeSize.cmake. These have\nbeen removed and instead the C language is enabled again even though\ngflags is written in C++ only.\n\nThis release also marks the complete move of the gflags project\nfrom Google Code to GitHub. Email addresses of original issue\nreporters got lost in the process. Given the age of most issue reports,\nthis should be negligible.\n\nPlease report any further issues using the GitHub issue tracker.\n\n\n30 March 2014\n-------------\n\nI've just released gflags 2.1.1.\n\nThis release fixes a few bugs in the configuration of gflags\\_declare.h\nand adds a separate GFLAGS\\_INCLUDE\\_DIR CMake variable to the build configuration.\nSetting GFLAGS\\_NAMESPACE to \"google\" no longer changes also the include\npath of the public header files. This allows the use of the library with\nother Google projects such as glog which still use the deprecated \"google\"\nnamespace for the gflags library, but include it as \"gflags/gflags.h\".\n\n20 March 2014\n-------------\n\nI've just released gflags 2.1.\n\nThe major changes are the use of CMake for the build configuration instead\nof the autotools and packaging support through CPack. The default namespace\nof all C++ symbols is now \"gflags\" instead of \"google\". This can be\nconfigured via the GFLAGS\\_NAMESPACE variable.\n\nThis release compiles with all major compilers without warnings and passed\nthe unit tests on  Ubuntu 12.04, Windows 7 (Visual Studio 2008 and 2010,\nCygwin, MinGW), and Mac OS X (Xcode 5.1).\n\nThe SVN repository on Google Code is now frozen and replaced by a Git\nrepository such that it can be used as Git submodule by projects. The main\nhosting of this project remains at Google Code. Thanks to the distributed\ncharacter of Git, I can push (and pull) changes from both GitHub and Google Code\nin order to keep the two public repositories in sync.\nWhen fixing an issue for a pull request through either of these hosting\nplatforms, please reference the issue number as\n[described here](https://code.google.com/p/support/wiki/IssueTracker#Integration_with_version_control).\nFor the further development, I am following the\n[Git branching model](http://nvie.com/posts/a-successful-git-branching-model/)\nwith feature branch names prefixed by \"feature/\" and bugfix branch names\nprefixed by \"bugfix/\", respectively.\n\nBinary and source [packages](https://github.com/schuhschuh/gflags/releases) are available on GitHub.\n\n\n14 January 2014\n---------------\n\nThe migration of the build system to CMake is almost complete.\nWhat remains to be done is rewriting the tests in Python such they can be\nexecuted on non-Unix platforms and splitting them up into separate CTest tests.\nThough merging these changes into the master branch yet remains to be done,\nit is recommended to already start using the\n[cmake-migration](https://github.com/schuhschuh/gflags/tree/cmake-migration) branch.\n\n\n20 April 2013\n-------------\n\nMore than a year has past since I (Andreas) took over the maintenance for\n`gflags`. Only few minor changes have been made since then, much to my regret.\nTo get more involved and stimulate participation in the further\ndevelopment of the library, I moved the project source code today to\n[GitHub](https://github.com/schuhschuh/gflags).\nI believe that the strengths of [Git](http://git-scm.com/) will allow for better community collaboration\nas well as ease the integration of changes made by others. I encourage everyone\nwho would like to contribute to send me pull requests.\nGit's lightweight feature branches will also provide the right tool for more\nradical changes which should only be merged back into the master branch\nafter these are complete and implement the desired behavior.\n\nThe SVN repository remains accessible at Google Code and I will keep the\nmaster branch of the Git repository hosted at GitHub and the trunk of the\nSubversion repository synchronized. Initially, I was going to simply switch the\nGoogle Code project to Git, but in this case the SVN repository would be\nfrozen and force everyone who would like the latest development changes to\nuse Git as well. Therefore I decided to host the public Git repository at GitHub\ninstead.\n\nPlease continue to report any issues with gflags on Google Code. The GitHub project will\nonly be used to host the Git repository.\n\nOne major change of the project structure I have in mind for the next weeks\nis the migration from autotools to [CMake](http://www.cmake.org/).\nCheck out the (unstable!)\n[cmake-migration](https://github.com/schuhschuh/gflags/tree/cmake-migration)\nbranch on GitHub for details.\n\n\n25 January 2012\n---------------\n\nI've just released gflags 2.0.\n\nThe `google-gflags` project has been renamed to `gflags`.  I\n(csilvers) am stepping down as maintainer, to be replaced by Andreas\nSchuh.  Welcome to the team, Andreas!  I've seen the energy you have\naround gflags and the ideas you have for the project going forward,\nand look forward to having you on the team.\n\nI bumped the major version number up to 2 to reflect the new community\nownership of the project.  All the [changes](ChangeLog.txt)\nare related to the renaming.  There are no functional changes from\ngflags 1.7.  In particular, I've kept the code in the namespace\n`google`, though in a future version it should be renamed to `gflags`.\nI've also kept the `/usr/local/include/google/` subdirectory as\nsynonym of `/usr/local/include/gflags/`, though the former name has\nbeen obsolete for some time now.\n\n\n18 January 2011\n---------------\n\nThe `google-gflags` Google Code page has been renamed to\n`gflags`, in preparation for the project being renamed to\n`gflags`.  In the coming weeks, I'll be stepping down as\nmaintainer for the gflags project, and as part of that Google is\nrelinquishing ownership of the project; it will now be entirely\ncommunity run.  The name change reflects that shift.\n\n\n20 December 2011\n----------------\n\nI've just released gflags 1.7.  This is a minor release; the major\nchange is that `CommandLineFlagInfo` now exports the address in memory\nwhere the flag is located.  There has also been a bugfix involving\nvery long --help strings, and some other minor [changes](ChangeLog.txt).\n\n29 July 2011\n------------\n\nI've just released gflags 1.6.  The major new feature in this release\nis support for setting version info, so that --version does something\nuseful.\n\nOne minor change has required bumping the library number:\n`ReparseCommandlineFlags` now returns `void` instead of `int` (the int\nreturn value was always meaningless).  Though I doubt anyone ever used\nthis (meaningless) return value, technically it's a change to the ABI\nthat requires a version bump.  A bit sad.\n\nThere's also a procedural change with this release: I've changed the\ninternal tools used to integrate Google-supplied patches for gflags\ninto the opensource release.  These new tools should result in more\nfrequent updates with better change descriptions.  They will also\nresult in future `ChangeLog` entries being much more verbose (for better\nor for worse).\n\nSee the [ChangeLog](ChangeLog.txt) for a full list of changes for this release.\n\n24 January 2011\n---------------\n\nI've just released gflags 1.5.  This release has only minor changes\nfrom 1.4, including some slightly better reporting in --help, and\nan new memory-cleanup function that can help when running gflags-using\nlibraries under valgrind.  The major change is to fix up the macros\n(`DEFINE_bool` and the like) to work more reliably inside namespaces.\n\nIf you have not had a problem with these macros, and don't need any of\nthe other changes described, there is no need to upgrade.  See the\n[ChangeLog](ChangeLog.txt) for a full list of changes for this release.\n\n11 October 2010\n---------------\n\nI've just released gflags 1.4.  This release has only minor changes\nfrom 1.3, including some documentation tweaks and some work to make\nthe library smaller.  If 1.3 is working well for you, there's no\nparticular reason to upgrade.\n\n4 January 2010\n--------------\n\nI've just released gflags 1.3.  gflags now compiles under MSVC, and\nall tests pass.  I **really** never thought non-unix-y Windows folks\nwould want gflags, but at least some of them do.\n\nThe major news, though, is that I've separated out the python package\ninto its own library, [python-gflags](http://code.google.com/p/python-gflags).\nIf you're interested in the Python version of gflags, that's the place to\nget it now.\n\n10 September 2009\n-----------------\n\nI've just released gflags 1.2.  The major change from gflags 1.1 is it\nnow compiles under MinGW (as well as cygwin), and all tests pass.  I\nnever thought Windows folks would want unix-style command-line flags,\nsince they're so different from the Windows style, but I guess I was\nwrong!\n\nThe other changes are minor, such as support for --htmlxml in the\npython version of gflags.\n\n15 April 2009\n-------------\n\nI've just released gflags 1.1.  It has only minor changes fdrom gflags\n1.0 (see the [ChangeLog](ChangeLog.txt) for details).\nThe major change is that I moved to a new system for creating .deb and .rpm files.\nThis allows me to create x86\\_64 deb and rpm files.\n\nIn the process of moving to this new system, I noticed an\ninconsistency: the tar.gz and .rpm files created libraries named\nlibgflags.so, but the deb file created libgoogle-gflags.so.  I have\nfixed the deb file to create libraries like the others.  I'm no expert\nin debian packaging, but I believe this has caused the package name to\nchange as well.  Please let me know (at\n[[mailto:google-gflags@googlegroups.com](mailto:google-gflags@googlegroups.com)\ngoogle-gflags@googlegroups.com]) if this causes problems for you --\nespecially if you know of a fix!  I would be happy to change the deb\npackages to add symlinks from the old library name to the new\n(libgoogle-gflags.so -> libgflags.so), but that is beyond my knowledge\nof how to make .debs.\n\nIf you've tried to install a .rpm or .deb and it doesn't work for you,\nlet me know.  I'm excited to finally have 64-bit package files, but\nthere may still be some wrinkles in the new system to iron out.\n\n1 October 2008\n--------------\n\ngflags 1.0rc2 was out for a few weeks without any issues, so gflags\n1.0 is now released.  This is much like gflags 0.9.  The major change\nis that the .h files have been moved from `/usr/include/google` to\n`/usr/include/gflags`.  While I have backwards-compatibility\nforwarding headeds in place, please rewrite existing code to say\n```\n   #include <gflags/gflags.h>\n```\ninstead of\n```\n   #include <google/gflags.h>\n```\n\nI've kept the default namespace to google.  You can still change with\nwith the appropriate flag to the configure script (`./configure\n--help` to see the flags).  If you have feedback as to whether the\ndefault namespace should change to gflags, which would be a\nnon-backwards-compatible change, send mail to\n`google-gflags@googlegroups.com`!\n\nVersion 1.0 also has some neat new features, like support for bash\ncommandline-completion of help flags.  See the [ChangeLog](ChangeLog.txt)\nfor more details.\n\nIf I don't hear any bad news for a few weeks, I'll release 1.0-final.\n"
        },
        {
          "name": "WORKSPACE",
          "type": "blob",
          "size": 0.2490234375,
          "content": "# Copyright 2006 Google Inc.  All Rights Reserved.\n# Use of this source code is governed by a BSD-style\n# license that can be found in the COPYING.txt file.\n\n# Bazel (http://bazel.io/) WORKSPACE file for gflags.\nworkspace(name=\"com_github_gflags_gflags\")\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 1.4130859375,
          "content": "# Configuration for continuous integration service at appveyor.com\n\nversion: '{build}'\n\nos: Visual Studio 2015\n\nenvironment:\n  matrix:\n  - Toolset: v140\n  - Toolset: v120\n  - Toolset: v110\n  - Toolset: v100\n  - Toolset: v90\n\nplatform:\n  - Win32\n  - x64\n\nconfiguration:\n  - Release\n\nmatrix:\n  exclude:\n    - Toolset: v90\n      platform: x64\n    - Toolset: v100\n      platform: x64\n\nbuild:\n  verbosity: minimal\n\nbefore_build:\n- ps: |\n    Write-Output \"Configuration: $env:CONFIGURATION\"\n    Write-Output \"Platform: $env:PLATFORM\"\n    $generator = switch ($env:TOOLSET)\n    {\n        \"v140\" {\"Visual Studio 14 2015\"}\n        \"v120\" {\"Visual Studio 12 2013\"}\n        \"v110\" {\"Visual Studio 11 2012\"}\n        \"v100\" {\"Visual Studio 10 2010\"}\n        \"v90\" {\"Visual Studio 9 2008\"}\n    }\n    if ($env:PLATFORM -eq \"x64\")\n    {\n        $generator = \"$generator Win64\"\n    }\n\nbuild_script:\n- ps: |\n    md _build -Force | Out-Null\n    cd _build\n\n    & cmake -G \"$generator\" -D CMAKE_CONFIGURATION_TYPES=\"Debug;Release\" -D GFLAGS_BUILD_TESTING=ON -D GFLAGS_BUILD_SHARED_LIBS=ON -D GFLAGS_BUILD_STATIC_LIBS=ON ..\n    if ($LastExitCode -ne 0) {\n        throw \"Exec: $ErrorMessage\"\n    }\n    & cmake --build . --config $env:CONFIGURATION\n    if ($LastExitCode -ne 0) {\n        throw \"Exec: $ErrorMessage\"\n    }\n\ntest_script:\n- ps: |\n    & ctest -C $env:CONFIGURATION --output-on-failure\n    if ($LastExitCode -ne 0) {\n        throw \"Exec: $ErrorMessage\"\n    }\n"
        },
        {
          "name": "bazel",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}