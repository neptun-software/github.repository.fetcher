{
  "metadata": {
    "timestamp": 1736565484684,
    "page": 344,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "paceholder/nodeeditor",
      "stars": 3138,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.9345703125,
          "content": "---\nLanguage:        Cpp\nAccessModifierOffset: -4\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlines: DontAlign\nAlignOperands:   true\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: Inline\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: true\nBinPackArguments: false\nBinPackParameters: false\nBraceWrapping:\n  AfterClass:      true\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   true\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     true\n  AfterUnion:      false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\n  SplitEmptyFunction: false\n  SplitEmptyRecord: false\n  SplitEmptyNamespace: false\nBreakBeforeBinaryOperators: All\nBreakBeforeBraces: Custom\nBreakBeforeInheritanceComma: true\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: BeforeComma\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit:    100\nCommentPragmas:  '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nForEachMacros:\n  - forever # avoids { wrapped to next line\n  - foreach\n  - Q_FOREACH\n  - BOOST_FOREACH\nIncludeCategories:\n  - Regex:           '^<Q.*'\n    Priority:        200\nIncludeIsMainRegex: '(Test)?$'\nIndentCaseLabels: false\nIndentWidth:     4\nIndentWrappedFunctionNames: false\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: false\n# Do not add QT_BEGIN_NAMESPACE/QT_END_NAMESPACE as this will indent lines in between.\nMacroBlockBegin: \"\"\nMacroBlockEnd:   \"\"\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBlockIndentWidth: 4\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakAssignment: 150\nPenaltyBreakBeforeFirstCallParameter: 300\nPenaltyBreakComment: 500\nPenaltyBreakFirstLessLess: 400\nPenaltyBreakString: 600\nPenaltyExcessCharacter: 50\nPenaltyReturnTypeOnItsOwnLine: 300\nPointerAlignment: Right\nReflowComments:  false\nSortIncludes:    true\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: true\nSpaceAfterTemplateKeyword: false\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  false\nSpacesInContainerLiterals: false\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Cpp11\nTabWidth:        4\nUseTab:          Never\n"
        },
        {
          "name": ".codeclimate.yml",
          "type": "blob",
          "size": 0.0732421875,
          "content": "engines:\n  fixme:\n    enabled: true\nratings:\n  paths: []\nexclude_paths: []\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.048828125,
          "content": "*.pyc\nCMakeLists.txt.user\n\nbuild*/\n.vscode/\n\ntags\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.5126953125,
          "content": "# .readthedocs.yml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n    builder: html\n    configuration: docs/conf.py\n\n\n# Optionally set the version of Python and requirements required to build your docs\npython:\n    version: 3.7\n    install:\n        - requirements: docs/requirements.txt\n\n# Optionally build your docs in additional formats such as PDF\n#formats:\n    #- pdf\n\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.7744140625,
          "content": "language: cpp\n\nmatrix:\n  include:\n    - os: osx\n      osx_image: xcode11.3\n      compiler: clang\n      env: Qt5_DIR=/usr/local/opt/qt5/lib/cmake/Qt5\n\n    - os: linux\n      dist: xenial\n      sudo: false\n      compiler: clang\n      env: CXX=clang++-7 CC=clang-7 QT=512\n      addons:\n        apt:\n          sources:\n            - llvm-toolchain-xenial-7\n          packages:\n            - clang-7\n\n    - os: linux\n      dist: xenial\n      sudo: false\n      compiler: gcc\n      env:\n        - CXX=g++-7 CC=gcc-7 QT=512\n        - CXXFLAGS=\"-fsanitize=address -fno-omit-frame-pointer\"\n        - LDFLAGS=-fsanitize=address\n           # Too many false positive leaks:\n        - ASAN_OPTIONS=detect_leaks=0\n      addons:\n        apt:\n          sources:\n            - ubuntu-toolchain-r-test\n          packages:\n            - g++-7\n\ngit:\n  depth: 10\n\nbefore_install:\n   - if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then brew update    ; fi\n   - if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then brew install qt; fi\n   - if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then sudo apt-get update -qq ; fi\n   - if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then sudo apt-get install build-essential libgl1-mesa-dev ; fi\n   - if [[ \"$QT\" == \"512\" ]]; then sudo add-apt-repository ppa:beineri/opt-qt-5.12.1-xenial -y; fi\n   - if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then sudo apt-get update -qq; fi\n   - if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then sudo apt-get -yqq install qt${QT}base; source /opt/qt${QT}/bin/qt${QT}-env.sh; fi\n\nscript:\n  - mkdir build\n  - cd build\n  - cmake -DCMAKE_VERBOSE_MAKEFILE=$VERBOSE_BUILD .. && make -j\n  - if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then xvfb-run --server-args=\"-screen 0 1024x768x24\" ctest --output-on-failure; fi\n  - if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then ctest --output-on-failure; fi\n\nnotifications:\n  email: false\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 8.0234375,
          "content": "cmake_minimum_required(VERSION 3.8)\n\ncmake_policy(SET CMP0072 NEW) # new in 3.11. The NEW behavior for this policy is to set OpenGL_GL_PREFERENCE to GLVND.\ncmake_policy(SET CMP0068 NEW) # new in 3.9. The NEW behavior of this policy is to ignore the RPATH settings for install_name on macOS.\n\n\nproject(QtNodesLibrary CXX)\n\nset(CMAKE_MODULE_PATH \"${PROJECT_SOURCE_DIR}/cmake\" ${CMAKE_MODULE_PATH})\n\nset(CMAKE_DISABLE_IN_SOURCE_BUILD ON)\nset(CMAKE_DISABLE_SOURCE_CHANGES  ON)\nset(OpenGL_GL_PREFERENCE LEGACY)\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\nget_directory_property(_has_parent PARENT_DIRECTORY)\nif(_has_parent)\n  set(is_root_project OFF)\nelse()\n  set(is_root_project ON)\nendif()\n\nset(QT_NODES_DEVELOPER_DEFAULTS \"${is_root_project}\" CACHE BOOL \"Turns on default settings for development of QtNodes\")\n\noption(BUILD_TESTING \"Build tests\" \"${QT_NODES_DEVELOPER_DEFAULTS}\")\noption(BUILD_EXAMPLES \"Build Examples\" \"${QT_NODES_DEVELOPER_DEFAULTS}\")\noption(BUILD_DOCS \"Build Documentation\" \"${QT_NODES_DEVELOPER_DEFAULTS}\")\noption(BUILD_SHARED_LIBS \"Build as shared library\" ON)\noption(BUILD_DEBUG_POSTFIX_D \"Append d suffix to debug libraries\" OFF)\noption(QT_NODES_FORCE_TEST_COLOR \"Force colorized unit test output\" OFF)\noption(USE_QT6 \"Build with Qt6 (Enabled by default)\" ON)\n\nenable_testing()\n\nif(QT_NODES_DEVELOPER_DEFAULTS)\n  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${PROJECT_BINARY_DIR}/bin\")\n  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${PROJECT_BINARY_DIR}/lib\")\n  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${PROJECT_BINARY_DIR}/lib\")\nendif()\n\nif(BUILD_DEBUG_POSTFIX_D)\n  set(CMAKE_DEBUG_POSTFIX \"d\")\n  set(CMAKE_RELEASE_POSTFIX \"\")\n  set(CMAKE_RELWITHDEBINFO_POSTFIX \"rd\")\n  set(CMAKE_MINSIZEREL_POSTFIX \"s\")\nendif()\n\nadd_subdirectory(external)\n\nif(USE_QT6)\n  find_package(QT NAMES Qt6 REQUIRED COMPONENTS Widgets)\nelse()\n  find_package(QT NAMES Qt5 REQUIRED COMPONENTS Widgets)\nendif()\n\nfind_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Core Widgets Gui OpenGL)\nmessage(STATUS \"QT_VERSION: ${QT_VERSION}, QT_DIR: ${QT_DIR}\")\n\nif (${QT_VERSION} VERSION_LESS 5.11.0)\n  message(FATAL_ERROR \"Requires qt version >= 5.11.0, Your current version is ${QT_VERSION}\")\nendif()\n\nif (${QT_VERSION_MAJOR} EQUAL 6)\n  qt_add_resources(RESOURCES ./resources/resources.qrc)\nelse()\n  qt5_add_resources(RESOURCES ./resources/resources.qrc)\nendif()\n\n# Unfortunately, as we have a split include/src, AUTOMOC doesn't work.\n# We'll have to manually specify some files\nset(CMAKE_AUTOMOC ON)\n\nset(CPP_SOURCE_FILES\n  src/AbstractGraphModel.cpp\n  src/AbstractNodeGeometry.cpp\n  src/BasicGraphicsScene.cpp\n  src/ConnectionGraphicsObject.cpp\n  src/ConnectionState.cpp\n  src/ConnectionStyle.cpp\n  src/DataFlowGraphModel.cpp\n  src/DataFlowGraphicsScene.cpp\n  src/DefaultConnectionPainter.cpp\n  src/DefaultHorizontalNodeGeometry.cpp\n  src/DefaultNodePainter.cpp\n  src/DefaultVerticalNodeGeometry.cpp\n  src/Definitions.cpp\n  src/GraphicsView.cpp\n  src/GraphicsViewStyle.cpp\n  src/NodeConnectionInteraction.cpp\n  src/NodeDelegateModel.cpp\n  src/NodeDelegateModelRegistry.cpp\n  src/NodeGraphicsObject.cpp\n  src/NodeState.cpp\n  src/NodeStyle.cpp\n  src/StyleCollection.cpp\n  src/UndoCommands.cpp\n  src/locateNode.cpp\n)\n\nset(HPP_HEADER_FILES\n  include/QtNodes/internal/AbstractConnectionPainter.hpp\n  include/QtNodes/internal/AbstractGraphModel.hpp\n  include/QtNodes/internal/AbstractNodeGeometry.hpp\n  include/QtNodes/internal/AbstractNodePainter.hpp\n  include/QtNodes/internal/BasicGraphicsScene.hpp\n  include/QtNodes/internal/Compiler.hpp\n  include/QtNodes/internal/ConnectionGraphicsObject.hpp\n  include/QtNodes/internal/ConnectionIdHash.hpp\n  include/QtNodes/internal/ConnectionIdUtils.hpp\n  include/QtNodes/internal/ConnectionState.hpp\n  include/QtNodes/internal/ConnectionStyle.hpp\n  include/QtNodes/internal/DataFlowGraphicsScene.hpp\n  include/QtNodes/internal/DataFlowGraphModel.hpp\n  include/QtNodes/internal/Definitions.hpp\n  include/QtNodes/internal/Export.hpp\n  include/QtNodes/internal/GraphicsView.hpp\n  include/QtNodes/internal/GraphicsViewStyle.hpp\n  include/QtNodes/internal/locateNode.hpp\n  include/QtNodes/internal/NodeData.hpp\n  include/QtNodes/internal/NodeDelegateModel.hpp\n  include/QtNodes/internal/NodeDelegateModelRegistry.hpp\n  include/QtNodes/internal/NodeGraphicsObject.hpp\n  include/QtNodes/internal/NodeState.hpp\n  include/QtNodes/internal/NodeStyle.hpp\n  include/QtNodes/internal/OperatingSystem.hpp\n  include/QtNodes/internal/QStringStdHash.hpp\n  include/QtNodes/internal/QUuidStdHash.hpp\n  include/QtNodes/internal/Serializable.hpp\n  include/QtNodes/internal/Style.hpp\n  include/QtNodes/internal/StyleCollection.hpp\n  include/QtNodes/internal/DefaultConnectionPainter.hpp\n  include/QtNodes/internal/DefaultHorizontalNodeGeometry.hpp\n  include/QtNodes/internal/DefaultNodePainter.hpp\n  include/QtNodes/internal/DefaultVerticalNodeGeometry.hpp\n  include/QtNodes/internal/NodeConnectionInteraction.hpp\n  include/QtNodes/internal/UndoCommands.hpp\n)\n\n# If we want to give the option to build a static library,\n# set BUILD_SHARED_LIBS option to OFF\nadd_library(QtNodes\n  ${CPP_SOURCE_FILES}\n  ${HPP_HEADER_FILES}\n  ${RESOURCES}\n)\n\nadd_library(QtNodes::QtNodes ALIAS QtNodes)\n\n\ntarget_include_directories(QtNodes\n  PUBLIC\n    $<INSTALL_INTERFACE:include>\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n  PRIVATE\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/QtNodes/internal>\n)\n\ntarget_link_libraries(QtNodes\n  PUBLIC\n    Qt${QT_VERSION_MAJOR}::Core\n    Qt${QT_VERSION_MAJOR}::Widgets\n    Qt${QT_VERSION_MAJOR}::Gui\n    Qt${QT_VERSION_MAJOR}::OpenGL\n)\n\ntarget_compile_definitions(QtNodes\n  PUBLIC\n    $<IF:$<BOOL:${BUILD_SHARED_LIBS}>, NODE_EDITOR_SHARED, NODE_EDITOR_STATIC>\n  PRIVATE\n    NODE_EDITOR_EXPORTS\n    #NODE_DEBUG_DRAWING\n    QT_NO_KEYWORDS\n)\n\n\ntarget_compile_options(QtNodes\n  PRIVATE\n    $<$<CXX_COMPILER_ID:MSVC>:/W4 /wd4127 /EHsc /utf-8>\n    $<$<CXX_COMPILER_ID:GNU>:-Wall -Wextra>\n    $<$<CXX_COMPILER_ID:AppleClang>:-Wall -Wextra -Werror>\n)\nif(NOT \"${CMAKE_CXX_SIMULATE_ID}\" STREQUAL \"MSVC\")\n  # Clang-Cl on MSVC identifies as \"Clang\" but behaves more like MSVC:\n  target_compile_options(QtNodes\n    PRIVATE\n      $<$<CXX_COMPILER_ID:Clang>:-Wall -Wextra>\n  )\nendif()\n\nif(QT_NODES_DEVELOPER_DEFAULTS)\n  target_compile_features(QtNodes PUBLIC cxx_std_14)\n  set_target_properties(QtNodes PROPERTIES CXX_EXTENSIONS OFF)\nendif()\n\n\nset_target_properties(QtNodes\n  PROPERTIES\n    ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib\n    LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib\n    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin\n)\n\n######\n# Moc\n##\n\nfile(GLOB_RECURSE HEADERS_TO_MOC include/QtNodes/internal/*.hpp)\n\nif (${QT_VERSION_MAJOR} EQUAL 6)\n  qt_wrap_cpp(nodes_moc\n      ${HEADERS_TO_MOC}\n      TARGET QtNodes\n    OPTIONS --no-notes # Don't display a note for the headers which don't produce a moc_*.cpp\n  )\nelse()\n  qt5_wrap_cpp(nodes_moc\n  ${HEADERS_TO_MOC}\n  TARGET QtNodes\n  OPTIONS --no-notes # Don't display a note for the headers which don't produce a moc_*.cpp\n  )\nendif()\n\ntarget_sources(QtNodes PRIVATE ${nodes_moc})\n\n###########\n# Examples\n##\n\nif(BUILD_EXAMPLES)\n  add_subdirectory(examples)\nendif()\n\nif(BUILD_DOCS)\n  add_subdirectory(docs)\nendif()\n\n##################\n# Automated Tests\n##\n\nif(BUILD_TESTING)\n  #add_subdirectory(test)\nendif()\n\n###############\n# Installation\n##\n\ninclude(GNUInstallDirs)\n\nset(INSTALL_CONFIGDIR ${CMAKE_INSTALL_LIBDIR}/cmake/QtNodes)\n\ninstall(TARGETS QtNodes\n  EXPORT QtNodesTargets\n  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n)\n\ninstall(DIRECTORY include/\n        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n\ninstall(EXPORT QtNodesTargets\n  FILE QtNodesTargets.cmake\n  NAMESPACE QtNodes::\n  DESTINATION ${INSTALL_CONFIGDIR}\n)\n\ninclude(CMakePackageConfigHelpers)\n\nconfigure_package_config_file(${CMAKE_CURRENT_LIST_DIR}/cmake/QtNodesConfig.cmake.in\n  ${CMAKE_CURRENT_BINARY_DIR}/QtNodesConfig.cmake\n  INSTALL_DESTINATION ${INSTALL_CONFIGDIR}\n)\n\ninstall(FILES\n  ${CMAKE_CURRENT_BINARY_DIR}/QtNodesConfig.cmake\n  DESTINATION ${INSTALL_CONFIGDIR}\n)\n"
        },
        {
          "name": "LICENSE.rst",
          "type": "blob",
          "size": 1.5078125,
          "content": "BSD-3-Clause license\n====================\n\nCopyright (c) 2022, Dmitry Pinaev\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation\n    and/or other materials provided with the distribution.\n  * Neither the name of copyright holder, nor the names of its contributors may\n    be used to endorse or promote products derived from this software without\n    specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS\nOF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN\nIF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 7.0478515625,
          "content": "QtNodes\n#######\n\nhttps://github.com/paceholder/nodeeditor/actions/workflows/cmake_build.yml/badge.svg\n\nIntroduction\n============\n\n**QtNodes** is conceived as a general-purpose Qt-based library aimed at\ndeveloping Node Editors for various applications. The library could be used for\nsimple graph visualization and editing or extended further for using the\n`Dataflow paradigm <https://en.wikipedia.org/wiki/Dataflow_programming>`_ .\n\nThe library is written using the Model-View approach. The whole graph structure\nis defined by a class derived from ``AbstractGraphModel``.  It is possible to\ncreate or add Nodes and Connections. The underlying data structures could be of\nany arbitrary type or representation.\n\nAn instance of ``AbstractGraphModel`` could or could not be attached to\nspecialized ``QGraphicsScene`` and ``QGraphicsView`` objects. I.e. the so-called\n\"headless\" `modus operandi` is possible.\n\nDocumentation\n=============\n\n`Read the Docs for QtNodes <https://qtnodes.readthedocs.io/>`_\n\nWarning\n  Many classes were changed in the version ``3.0``. If you had a large project\n  based on ``2.x.x``, make sure you read the documentation first and see the\n  examples before checking out the new code.\n\nBranches\n--------\n\nThere are branchses ``v2`` and ``v3`` for versions ``2.x.x`` and ``3.x``\nrespectively. The branch ``master`` contains the latest dev state.\n\n\n.. contents:: Navigation\n    :depth: 2\n\n\nData Flow Paradigm\n==================\n\nThe extended model class ``DataFlowGraphModel`` allows to register \"processing\nalgorithms\" represented by nodes and is equipped with a set of Qt's signals and\nslots for propagating the data though the nodes.\n\nThe node's algorithm is triggered upon arriving of any new input data. The\ncomputed result is propagated to the output connections. Each new connection\nfetches available data and propagates is further. Each change in the source node\nis immediately propagated through all the connections updating the whole graph.\n\n\nSupported Environments\n======================\n\nPlatforms\n---------\n\n* Linux (x64, gcc, Qt 5.15.2) |ImageLink|\n* OSX (Apple Clang, Qt 5.15.2) |ImageLink|\n* Windows (MSVC, Qt 5.15.2) |ImageLink|\n* Windows (MSVC, Qt 6.3.0) |ImageLink|\n\n.. |ImageLink| image:: https://github.com/paceholder/nodeeditor/actions/workflows/cmake_build.yml/badge.svg\n   :target: https://github.com/paceholder/nodeeditor/actions/workflows/cmake_build.yml\n\n\nDependencies\n------------\n\n* Qt >5.15\n* CMake 3.8\n* Catch2\n\n\nCurrent State (v3)\n==================\n\n* Model-based graph\n* Headless mode\n  You can create, populate, modify the derivative of ``AbstractGraphModel``\n  without adding it to the actual Flow Scene.  The library is now designed to be\n  general-purpose graph visualization and modification tool, without\n  specialization on only data propagation.\n* Automatic data propagation built on top of the graph-model code\n  The library could be used for both pure graph visualization purposes and for\n  originally implemented data propagation.\n* Dynamic ports\n* Datatype-aware connections\n* Embedded Qt widgets\n* One-output to many-input connections\n* JSON-based interface styles\n* Saving scenes to JSON files\n* Custom Node Geometry\n* Vertical and Horizontal graph layouts\n* Undo/Redo, Duplication (CTRL+D)\n\n\nBuilding\n========\n\nSet this option to false if you want to build with Qt5 version instead of Qt6:\n\n::\n\n   USE_QT6\n\n   mkdir build && cd build && cmake .. -DUSE_QT6=on\n   or\n   mkdir build && cd build && cmake .. -DUSE_QT6=off\n\nFor building a static lib use:\n\n::\n\n    cmake .. -BUILD_SHARED_LIBS=off\n\nLinux\n-----\n\n::\n\n  git clone git@github.com:paceholder/nodeeditor.git\n  cd nodeeditor\n  mkdir build\n  cd build\n  cmake ..\n  make -j && make install\n\n\nQt Creator\n----------\n\n1. Open `CMakeLists.txt` as project.\n2. If you don't have the `Catch2` library installed, go to `Build Settings`, disable the checkbox `BUILD_TESTING`.\n3. `Build -> Run CMake`\n4. `Build -> Build All`\n5. Click the button `Run`\n\n\nWith Cmake using `vcpkg`\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n1. Install `vcpkg`\n2. Add the following flag in configuration step of `CMake`\n\n::\n\n   -DCMAKE_TOOLCHAIN_FILE=<vcpkg_dir>/scripts/buildsystems/scripts/buildsystems/vcpkg.cmake\n\n\nHelp Needed\n===========\n\n#. Python wrappring using PySide.\n#. QML frontend.\n#. Wirting a ClangFormat config.\n\nAny suggestions are welcome!\n\n\nContribution\n============\n\n#. Be polite, respectful and collaborative.\n#. For submitting a bug:\n\n   #. Describe your environment (Qt version, compiler, OS etc)\n   #. Describe steps to reproduce the issue\n\n#. For submitting a pull request:\n\n   #. Create a proposal task first. We can come up with a better design together.\n   #. Create a pull-request. If applicable, create a simple example for your\n      problem, describe the changes in details, provide use cases.\n\n#. For submitting a development request:\n\n   #. Describe your issue in details\n   #. Provide some use cases.\n\n#. I maintain this probject in my free time, when I am not busy with my work or\n   my family. **If I do not react or do not answer for too long, please ping\n   me**.\n\n\nCiting\n======\n\n::\n\n    Dmitry Pinaev et al, Qt Nodes, (2022), GitHub repository, https://github.com/paceholder/nodeeditor\n\nBibTeX::\n\n    @misc{Pinaev2022,\n      author = {Dmitry Pinaev et al},\n      title = {QtNodes. Node Editor},\n      year = {2017},\n      publisher = {GitHub},\n      journal = {GitHub repository},\n      howpublished = {\\url{https://github.com/paceholder/nodeeditor}},\n      commit = {877ddb8c447a7a061a5022e9956a3194132e3dd9}\n    }\n\nSupport\n=======\n\nIf you like the project you could donate me on PayPal |ImagePaypal|_\n\n.. |ImagePaypal| image:: https://img.shields.io/badge/Donate-PayPal-green.svg\n.. _ImagePaypal: https://www.paypal.com/paypalme/DmitryPinaev\n\n\nIf you send more than $100, I'll forward $100 to some fund supporting sick\nchildren and report to you back.\n\n\nThanks\n======\n\nThe version 3 was released with a generous help of\n`Davide Faconti <https://github.com/facontidavide>`_\n\n\nShowcase\n========\n\nYoutube videos\n--------------\n\n.. image:: https://img.youtube.com/vi/pxMXjSvlOFw/0.jpg\n   :target: https://www.youtube.com/watch?v=pxMXjSvlOFw\n\n|\n\n.. image:: https://img.youtube.com/vi/i_pB-Y0hCYQ/0.jpg\n   :target: https://www.youtube.com/watch?v=i_pB-Y0hCYQ\n\nCANdevStudio\n------------\n\n`CANdevStudio <https://github.com/GENIVI/CANdevStudio>`_ is a cost-effective,\ncross-platform replacement for CAN simulation software. CANdevStudio enables to\nsimulate CAN signals such as ignition status, doors status or reverse gear by\nevery automotive developer. Thanks to modularity it is easy to implement new,\ncustom features.\n\n\n.. image:: docs/_static/showcase_CANdevStudio.png\n\n\nChigraph\n--------\n\n`Chigraph <https://github.com/chigraph/chigraph>`_ is a visual programming\nlanguage for beginners that is unique in that it is an intuitive flow graph:\n\n.. image:: docs/_static/chigraph.png\n\n\nIt features easy bindings to C/C++, package management, and a cool interface.\n\n\nSpkgen particle editor\n----------------------\n\n`Spkgen <https://github.com/fredakilla/spkgen>`_ is an editor for the SPARK\nparticles engine that uses a node-based interface to create particles effects for\ngames\n\n.. image:: docs/_static/spkgen.png\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "external",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}