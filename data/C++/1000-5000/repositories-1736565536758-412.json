{
  "metadata": {
    "timestamp": 1736565536758,
    "page": 412,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mmp/pbrt-v4",
      "stars": 2957,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.064453125,
          "content": "*~\n.#*\n#*#\nsrc/build\n.DS_Store\n.ipynb_checkpoints/\nbuild/\n.cache/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 1.2529296875,
          "content": "[submodule \"src/ext/zlib\"]\n\tpath = src/ext/zlib\n\turl = https://github.com/mitsuba-renderer/zlib.git\n[submodule \"src/ext/ptex\"]\n\tpath = src/ext/ptex\n\turl = https://github.com/wdas/ptex.git\n[submodule \"src/ext/double-conversion\"]\n\tpath = src/ext/double-conversion\n\turl = https://github.com/mmp/double-conversion.git\n[submodule \"src/ext/stb\"]\n\tpath = src/ext/stb\n\turl = https://github.com/nothings/stb.git\n[submodule \"src/ext/openexr\"]\n\tpath = src/ext/openexr\n\turl = https://github.com/mmp/openexr.git\n\tbranch = zlibstatic-export-workaround\n[submodule \"src/ext/filesystem\"]\n\tpath = src/ext/filesystem\n\turl = https://github.com/wjakob/filesystem.git\n[submodule \"src/ext/openvdb\"]\n\tpath = src/ext/openvdb\n\turl = https://github.com/AcademySoftwareFoundation/openvdb.git\n\tbranch = feature/nanovdb\n[submodule \"src/ext/libdeflate\"]\n\tpath = src/ext/libdeflate\n\turl = https://github.com/mmp/libdeflate.git\n[submodule \"src/ext/lodepng\"]\n\tpath = src/ext/lodepng\n\turl = https://github.com/lvandeve/lodepng.git\n[submodule \"src/ext/utf8proc\"]\n\tpath = src/ext/utf8proc\n\turl = https://github.com/JuliaStrings/utf8proc.git\n[submodule \"src/ext/qoi\"]\n\tpath = src/ext/qoi\n\turl = https://github.com/phoboslab/qoi.git\n[submodule \"src/ext/glfw\"]\n\tpath = src/ext/glfw\n\turl = https://github.com/glfw/glfw.git\n\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 37.2080078125,
          "content": "# pbrt-v4 top-level CMakeLists.txt\n\ncmake_minimum_required (VERSION 3.12)\n\nproject (PBRT-V4 LANGUAGES CXX C)\n\nset (CMAKE_CXX_STANDARD 17)\nset (CMAKE_CXX_STANDARD_REQUIRED ON)\n\nif (NOT DEFINED PBRT_SOURCE_CODE)\n  set (PBRT_SOURCE_CODE ${CMAKE_SOURCE_DIR})\nendif ()\n\n# For sanitizers\nlist (INSERT CMAKE_MODULE_PATH 0 \"${PBRT_SOURCE_CODE}/cmake\")\n\n# Configuration options\n\noption (PBRT_FLOAT_AS_DOUBLE \"Use 64-bit floats\" OFF)\noption (PBRT_BUILD_NATIVE_EXECUTABLE \"Build executable optimized for CPU architecture of system pbrt was built on\" ON)\noption (PBRT_DBG_LOGGING \"Enable (very verbose!) debug logging\" OFF)\noption (PBRT_NVTX \"Insert NVTX annotations for NVIDIA Profiling and Debugging Tools\" OFF)\noption (PBRT_NVML \"Use NVML for GPU performance measurement\" OFF)\noption (PBRT_USE_PREGENERATED_RGB_TO_SPECTRUM_TABLES \"Use pregenerated rgbspectrum_*.cpp files rather than running rgb2spec_opt to generate them at build time\" OFF)\nset (PBRT_OPTIX7_PATH $ENV{PBRT_OPTIX7_PATH} CACHE PATH \"Path to OptiX 7 SDK\")\nset (PBRT_GPU_SHADER_MODEL \"\" CACHE STRING \"\")\n\n\n\nif (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  message (STATUS \"Setting build type to 'Release' as none was specified.\")\n  set (CMAKE_BUILD_TYPE Release CACHE STRING \"Choose the type of build.\" FORCE)\n  set_property (CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS \"Debug\" \"Release\"\n    \"MinSizeRel\" \"RelWithDebInfo\")\nendif ()\n\nfunction (CHECK_EXT NAME DIR HASH)\n  if (NOT IS_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/src/ext/${DIR}\")\n    message (FATAL_ERROR \"The ${NAME} submodule directory is missing! \"\n      \"Either that submodule was recently added to pbrt or you did not clone the project with --recursive. \"\n      \"In order to update the submodules, run:\\n\"\n      \"  \\\"git submodule update --init --recursive\\\"\")\n  endif ()\n\n  find_package(Git)\n  if (GIT_FOUND)\n    execute_process (\n      COMMAND ${GIT_EXECUTABLE} rev-parse HEAD\n      WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/src/ext/${DIR}\"\n      RESULT_VARIABLE \"git_return\"\n      ERROR_QUIET\n      OUTPUT_STRIP_TRAILING_WHITESPACE\n      OUTPUT_VARIABLE \"git_hash\")\n    if (NOT ${git_hash} MATCHES \"^${HASH}\")\n      message (FATAL_ERROR \"The ${CMAKE_CURRENT_SOURCE_DIR}/src/ext/${DIR} \"\n        \"submodule isn't up to date (${git_hash} vs ${HASH}). Please run:\\n\"\n        \"  \\\"git submodule update --recursive\\\"\")\n    else ()\n      message (STATUS \"${NAME} at commit: ${git_hash}\")\n    endif()\n  else (GIT_FOUND)\n    message (STATUS \"git not found: unable to verify revisions in submodules\")\n  endif (GIT_FOUND)\nendfunction ()\n\ncheck_ext (\"OpenEXR\" \"openexr/OpenEXR\" ca757f97033ae7cfcc6130f23c0e9ee86b108b07)\ncheck_ext (\"OpenVDB\" \"openvdb/nanovdb\" 414bed84c2fc22e188eac7b611aa85c7edd7a5a9)\ncheck_ext (\"Ptex\" \"ptex/src\" 054047d02b9e06e690420b407114d2872435b953)\ncheck_ext (\"double-conversion\" \"double-conversion/cmake\" cc1f75a114aca8d2af69f73a5a959aecbab0e87a)\ncheck_ext (\"filesystem\" \"filesystem/filesystem\" c5f9de30142453eb3c6fe991e82dfc2583373116)\ncheck_ext (\"glfw\" \"glfw/docs\" 7b6aead9fb88b3623e3b3725ebb42670cbe4c579)\ncheck_ext (\"libdeflate\" \"libdeflate/common\" 1fd0bea6ca2073c68493632dafc4b1ddda1bcbc3)\ncheck_ext (\"lodepng\" \"lodepng/examples\" 8c6a9e30576f07bf470ad6f09458a2dcd7a6a84a)\ncheck_ext (\"qoi\" \"qoi\" 028c75fd26e5e0758c7c711216c00404994c1ad3)\ncheck_ext (\"stb\" \"stb/tools\" af1a5bc352164740c1cc1354942b1c6b72eacb8a)\ncheck_ext (\"utf8proc\" \"utf8proc/bench\" 2484e2ed5e1d9c19edcccf392a7d9920ad90dfaf)\ncheck_ext (\"zlib\" \"zlib/doc\" 54d591eabf9fe0e84c725638f8d5d8d202a093fa)\nadd_compile_definitions (\"$<$<CONFIG:DEBUG>:PBRT_DEBUG_BUILD>\")\n\nenable_testing ()\n\nfind_package (Sanitizers)\nfind_package (Threads)\n\nfind_package(OpenGL REQUIRED)\n\nset_property (GLOBAL PROPERTY USE_FOLDERS ON)\n\nif (MSVC)\n  list (APPEND PBRT_DEFINITIONS \"PBRT_IS_MSVC\" \"_CRT_SECURE_NO_WARNINGS\")\n  list (APPEND PBRT_DEFINITIONS \"PBRT_IS_MSVC\" \"_ENABLE_EXTENDED_ALIGNED_STORAGE\")\nendif ()\n\nif (PBRT_FLOAT_AS_DOUBLE)\n  list (APPEND PBRT_DEFINITIONS \"PBRT_FLOAT_AS_DOUBLE\")\nendif ()\nif (PBRT_DBG_LOGGING)\n  list (APPEND PBRT_DEFINITIONS \"PBRT_DBG_LOGGING\")\nendif ()\n\n#######################################\n## ext\n\nset (BUILD_SHARED_LIBS OFF)\n\nadd_subdirectory (${CMAKE_CURRENT_SOURCE_DIR}/src/ext)\n\n########################################\n# os/compiler-specific stuff\n\nif (CMAKE_SYSTEM_NAME STREQUAL Windows)\n  list (APPEND PBRT_DEFINITIONS \"PBRT_IS_WINDOWS\" \"NOMINMAX\")\nelseif (CMAKE_SYSTEM_NAME STREQUAL Darwin)\n  list (APPEND PBRT_DEFINITIONS \"PBRT_IS_OSX\")\nelseif (CMAKE_SYSTEM_NAME STREQUAL Linux)\n  list (APPEND PBRT_DEFINITIONS \"PBRT_IS_LINUX\")\n  # -rdynamic so we can get backtrace symbols...\n  # --no-as-needed so libprofiler sticks around\n  string (APPEND CMAKE_EXE_LINKER_FLAGS \" -rdynamic -Wl,--no-as-needed\")\nelse ()\n  message (SEND_ERROR \"Unknown system name: \" + CMAKE_SYSTEM_NAME)\nendif()\nif (CMAKE_SYSTEM_NAME STREQUAL Darwin)\n  add_definitions(-Wno-deprecated-declarations) # silent deprecated 'snprintf' message under MacOS arm64\nendif()\n# libgoogle-perftools-dev\nfind_library (PROFILE_LIB profiler)\nif (NOT PROFILE_LIB)\n  message (STATUS \"Unable to find -lprofiler\")\nelse ()\n  message (STATUS \"Found -lprofiler: ${PROFILE_LIB}\")\nendif ()\n\nif (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" AND CMAKE_CXX_COMPILER_VERSION GREATER_EQUAL 14)\n  message (STATUS \"Disabling -ffp-contract (thanks, clang 14!)\")\n  list (APPEND PBRT_CXX_FLAGS \"-ffp-contract=off\")\nendif ()\n\nadd_library (pbrt_warnings INTERFACE)\ntarget_compile_options (\n    pbrt_warnings\n    INTERFACE\n        \"$<$<CXX_COMPILER_ID:MSVC>:$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-Xcompiler >/wd4244>\" # int -> float conversion\n        \"$<$<CXX_COMPILER_ID:MSVC>:$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-Xcompiler >/wd4267>\" # size_t -> int conversion\n        \"$<$<CXX_COMPILER_ID:MSVC>:$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-Xcompiler >/wd4305>\" # double constant assigned to float\n        \"$<$<CXX_COMPILER_ID:MSVC>:$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-Xcompiler >/wd4552>\" # result of expression not used\n        \"$<$<CXX_COMPILER_ID:MSVC>:$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-Xcompiler >/wd4838>\" # double -> int conversion\n        \"$<$<CXX_COMPILER_ID:MSVC>:$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-Xcompiler >/wd4843>\" # double -> float conversion\n        \"$<$<CXX_COMPILER_ID:MSVC>:$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-Xcompiler >/wd26451>\" # arithmetic on 4-byte value, then cast to 8-byte\n        \"$<$<CXX_COMPILER_ID:MSVC>:$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-Xcompiler >/wd26495>\" # uninitialized member variable\n        \"$<$<CXX_COMPILER_ID:MSVC>:$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-Xcompiler >/wd4334>\" # 32 to 64 bit displacement\n        \"$<$<CXX_COMPILER_ID:MSVC>:$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-Xcompiler >/wd4146>\" # NanoVDB: unary minus operator applied to unsigned type, result still unsigned\n)\n\nadd_library (pbrt_opt INTERFACE)\n\n#########################################\n## CUDA / OptiX\n\nadd_library (cuda_build_configuration INTERFACE)\n\ninclude (CheckLanguage)\n\ncheck_language(CUDA)\n\nif (CMAKE_CUDA_COMPILER)\n  if (CUDA_VERSION_MAJOR LESS 11)\n    message (WARNING \"pbrt-v4 requires CUDA version 11.0 or later but version ${CUDA_VERSION_MAJOR}.${CUDA_VERSION_MINOR}\\\nwas found. GPU support is therefore disabled. If you have multiple versions\\\nof CUDA installed, please update your PATH.\")\n  else ()\n    find_package (CUDA REQUIRED)\n\n    # This seems to be necessary starting with 3.17.1, but gives an error\n    # about 17 being an unsupported version earlier...\n    if (${CMAKE_VERSION} VERSION_GREATER_EQUAL \"3.17.0\")\n        set (CMAKE_CUDA_STANDARD 17)\n    endif ()\n\n    # https://github.com/VIAME/VIAME/blob/aa6c5f56a898b08e4da102c400b453e23952199c/CMakeLists.txt#L291\n    if (NOT CUDA_VERSION_PATCH)\n      if (CUDA_NVCC_EXECUTABLE AND\n          CUDA_NVCC_EXECUTABLE STREQUAL CMAKE_CUDA_COMPILER AND\n          CMAKE_CUDA_COMPILER_VERSION MATCHES [=[([0-9]+)\\.([0-9]+)\\.([0-9]+)]=])\n        set (CUDA_VERSION_PATCH \"${CMAKE_MATCH_3}\")\n      elseif (CUDA_NVCC_EXECUTABLE)\n        execute_process (COMMAND ${CUDA_NVCC_EXECUTABLE} \"--version\" OUTPUT_VARIABLE NOUT)\n        if (NOUT MATCHES [=[ V([0-9]+)\\.([0-9]+)\\.([0-9]+)]=])\n          set (CUDA_VERSION_PATCH \"${CMAKE_MATCH_3}\")\n        endif ()\n      endif ()\n    endif ()\n\n    message (STATUS \"Found CUDA: ${CUDA_VERSION_MAJOR}.${CUDA_VERSION_MINOR}.${CUDA_VERSION_PATCH}\")\n    if (CUDA_VERSION_MAJOR EQUAL 11 AND CUDA_VERSION_MINOR EQUAL 3 AND CUDA_VERSION_PATCH LESS 109)\n      message (SEND_ERROR \"Unfortunately, pbrt-v4 triggers an internal compiler error in CUDA 11.3.0. Please either use CUDA 11.0-11.2 or 11.3.1 or later.\")\n    endif ()\n\n    if (\"${PBRT_OPTIX7_PATH}\" STREQUAL \"\")\n        message (WARNING \"Found CUDA but PBRT_OPTIX7_PATH is not set. Disabling GPU compilation.\")\n    else ()\n        enable_language (CUDA)\n        list (APPEND PBRT_DEFINITIONS \"PBRT_BUILD_GPU_RENDERER\")\n        if (PBRT_NVTX)\n            list (APPEND PBRT_DEFINITIONS \"NVTX\")\n        endif ()\n        if (PBRT_NVML)\n            list (APPEND PBRT_DEFINITIONS \"PBRT_USE_NVML\")\n        endif ()\n        set (PBRT_CUDA_ENABLED ON)\n\n        # FIXME\n        include_directories (${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES})  # for regular c++ compiles\n\n        # http://www.ssl.berkeley.edu/~jimm/grizzly_docs/SSL/opt/intel/cc/9.0/lib/locale/en_US/mcpcom.msg\n        target_compile_options (\n            pbrt_warnings\n            INTERFACE\n                #\"$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-Xptxas --warn-on-double-precision-use>\"\n                \"$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-Xcudafe --diag_suppress=partial_override>\"\n                \"$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-Xcudafe --diag_suppress=virtual_function_decl_hidden>\"\n                \"$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-Xcudafe --diag_suppress=integer_sign_change>\"\n                \"$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-Xcudafe --diag_suppress=declared_but_not_referenced>\"\n                # WAR invalid warnings about this with \"if constexpr\"\n                \"$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-Xcudafe --diag_suppress=implicit_return_from_non_void_function>\"\n        )\n\n        # Willie hears yeh..\n        string (APPEND CMAKE_CUDA_FLAGS \" -Xnvlink -suppress-stack-size-warning\")\n\n        target_compile_options (\n            cuda_build_configuration\n            INTERFACE\n                \"$<$<COMPILE_LANGUAGE:CUDA>:--std=c++17;--use_fast_math;--expt-relaxed-constexpr;--extended-lambda;--forward-unknown-to-host-compiler>\"\n                # The \"$<NOT:$<BOOL:$<TARGET_PROPERTY:CUDA_PTX_COMPILATION>>>\" part is to not add debugging symbols when generating PTX files for OptiX; see https://github.com/mmp/pbrt-v4/issues/69#issuecomment-715499748.\n                \"$<$<COMPILE_LANGUAGE:CUDA>:$<IF:$<AND:$<CONFIG:Debug>,$<NOT:$<BOOL:$<TARGET_PROPERTY:CUDA_PTX_COMPILATION>>>>,-G;-g,-lineinfo;-maxrregcount;128>>\"\n        )\n\n        if (PBRT_GPU_SHADER_MODEL STREQUAL \"\")\n            # https://wagonhelm.github.io/articles/2018-03/detecting-cuda-capability-with-cmake\n            # Get CUDA compute capability\n            set (CHECK_CUDA_OUTPUT_EXE ${CMAKE_BINARY_DIR}/checkcuda)\n            if (MSVC)\n                execute_process (COMMAND ${CMAKE_CUDA_COMPILER} -lcuda ${PBRT_SOURCE_CODE}/cmake/checkcuda.cu -ccbin ${CMAKE_CXX_COMPILER} -o ${CHECK_CUDA_OUTPUT_EXE}\n                                 RESULT_VARIABLE BUILD_CHECK_CUDA_RETURN_CODE)\n            else  ()\n                execute_process (COMMAND ${CMAKE_CUDA_COMPILER} -lcuda ${PBRT_SOURCE_CODE}/cmake/checkcuda.cu -o ${CHECK_CUDA_OUTPUT_EXE}\n                                 RESULT_VARIABLE BUILD_CHECK_CUDA_RETURN_CODE)\n            endif ()\n\n            if (NOT ${BUILD_CHECK_CUDA_RETURN_CODE} EQUAL 0)\n                message (SEND_ERROR \"Was unable to build checkcuda, consider manually setting PBRT_GPU_SHADER_MODEL\")\n            endif ()\n\n            execute_process (COMMAND ${CHECK_CUDA_OUTPUT_EXE}\n                             RESULT_VARIABLE CUDA_RETURN_CODE\n                             OUTPUT_VARIABLE CHECK_CUDA_OUTPUT)\n\n            if (NOT ${CUDA_RETURN_CODE} EQUAL 0)\n                message (SEND_ERROR ${CHECK_CUDA_OUTPUT})\n              else ()\n                set(ARCH \"${CHECK_CUDA_OUTPUT}\")\n                message (STATUS \"Detected CUDA Architecture: ${ARCH}\")\n                string (APPEND CMAKE_CUDA_FLAGS \" --gpu-architecture=${ARCH}\")\n            endif ()\n        else ()\n            set(ARCH \"${PBRT_GPU_SHADER_MODEL}\")\n            message (STATUS \"Specified CUDA Architecture: ${ARCH}\")\n            string (APPEND CMAKE_CUDA_FLAGS \" --gpu-architecture=${ARCH}\")\n        endif ()\n\n        set (PBRT_CUDA_LIB cuda)\n        # optix\n        # FIXME\n        include_directories (${PBRT_OPTIX7_PATH}/include)\n\n        # find CUDA's bin2c executable\n        get_filename_component (cuda_compiler_bin \"${CMAKE_CUDA_COMPILER}\" DIRECTORY)\n        find_program (BIN2C\n                      NAMES bin2c\n                      PATHS ${cuda_compiler_bin}\n                      DOC \"Path to the CUDA SDK bin2c executable.\"\n                      NO_DEFAULT_PATH)\n        if (NOT BIN2C)\n            message (FATAL_ERROR\n                     \"bin2c not found:\\n\"\n                     \"  CMAKE_CUDA_COMPILER='${CMAKE_CUDA_COMPILER}'\\n\"\n                     \"  cuda_compiler_bin='${cuda_compiler_bin}'\\n\"\n            )\n        endif ()\n\n        # this macro defines cmake rules that execute the following four steps:\n        # 1) compile the given cuda file ${cuda_file} to an intermediary PTX file\n        # 2) use the 'bin2c' tool (that comes with CUDA) to\n        #    create a second intermediary (.c-)file which defines a const string variable\n        #    (named '${c_var_name}') whose (constant) value is the PTX output\n        #    from the previous step.\n        # 3) compile the given .c file to an intermediary object file (why thus has\n        #    that PTX string 'embedded' as a global constant.\n        # 4) assign the name of the intermediary .o file to the cmake variable\n        #    'output_var', which can then be added to cmake targets.\n        macro (cuda_compile_and_embed output_var cuda_file lib_name)\n          add_library (\"${lib_name}\" OBJECT \"${cuda_file}\")\n          set_property (TARGET \"${lib_name}\" PROPERTY CUDA_PTX_COMPILATION ON)\n\n          # disable \"extern declaration... is treated as a static definition\" warning\n          if (CUDA_VERSION_MAJOR EQUAL 11 AND CUDA_VERSION_MINOR LESS 2)\n              target_compile_options (\"${lib_name}\" PRIVATE\n                                      -Xcudafe=--display_error_number -Xcudafe=--diag_suppress=3089)\n          else ()\n              target_compile_options (\"${lib_name}\" PRIVATE\n                                      -Xcudafe=--display_error_number -Xcudafe=--diag_suppress=20044)\n          endif ()\n\n          # CUDA integration in Visual Studio seems broken as even if \"Use\n          # Host Preprocessor Definitions\" is checked, the host preprocessor\n          # definitions are still not used when compiling device code.\n          # To work around that, define the macros using --define-macro to\n          # avoid CMake identifying those as macros and using the proper (but\n          # broken) way of specifying them.\n          if (${CMAKE_GENERATOR} MATCHES \"^Visual Studio\")\n            # As PBRT_DEBUG_BUILD is specified globally as a definition, we need to\n            # manually add it due to the bug mentioned earlier and due to it\n            # not being found in PBRT_DEFINITIONS.\n            if (CMAKE_BUILD_TYPE MATCHES Debug)\n                set (cuda_definitions \"--define-macro=PBRT_DEBUG_BUILD\")\n            endif ()\n            foreach (arg ${PBRT_DEFINITIONS})\n              list (APPEND cuda_definitions \"--define-macro=${arg}\")\n            endforeach ()\n            target_compile_options (\"${lib_name}\" PRIVATE ${cuda_definitions})\n          else ()\n            target_compile_definitions (\"${lib_name}\" PRIVATE ${PBRT_DEFINITIONS})\n          endif ()\n          target_include_directories (\"${lib_name}\" PRIVATE src ${CMAKE_BINARY_DIR})\n          target_include_directories (\"${lib_name}\" SYSTEM PRIVATE ${NANOVDB_INCLUDE})\n          target_link_libraries (\"${lib_name}\" PRIVATE cuda_build_configuration pbrt_opt pbrt_warnings)\n          add_dependencies (\"${lib_name}\" pbrt_soa_generated)\n          set (c_var_name ${output_var})\n          set (embedded_file ${cuda_file}.ptx_embedded.c)\n          add_custom_command (\n            OUTPUT \"${embedded_file}\"\n            COMMAND ${CMAKE_COMMAND}\n              \"-DBIN_TO_C_COMMAND=${BIN2C}\"\n              \"-DOBJECTS=$<TARGET_OBJECTS:${lib_name}>\"\n              \"-DVAR_NAME=${c_var_name}\"\n              \"-DOUTPUT=${embedded_file}\"\n              -P ${CMAKE_CURRENT_SOURCE_DIR}/cmake/bin2c_wrapper.cmake\n            VERBATIM\n            DEPENDS \"${lib_name}\" $<TARGET_OBJECTS:${lib_name}>\n            COMMENT \"Embedding PTX generated from ${cuda_file}\"\n          )\n          set (${output_var} ${embedded_file})\n        endmacro ()\n    endif ()\n  endif()\nelse ()\n    message (STATUS \"CUDA not found\")\nendif ()\n\n###########################################################################\n# Annoying compiler-specific details\n\ninclude (CheckCXXCompilerFlag)\n\ncheck_cxx_compiler_flag (\"-march=native\" COMPILER_SUPPORTS_MARCH_NATIVE)\nif (COMPILER_SUPPORTS_MARCH_NATIVE AND PBRT_BUILD_NATIVE_EXECUTABLE)\n    target_compile_options (pbrt_opt INTERFACE\n          \"$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-Xcompiler >-march=native\")\nendif ()\n\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"Intel\")\n  list (APPEND PBRT_CXX_FLAGS \"-std=c++17\")\n\n  find_program (XIAR xiar)\n  if (XIAR)\n    set (CMAKE_AR \"${XIAR}\")\n  endif (XIAR)\n  mark_as_advanced (XIAR)\n\n  find_program(XILD xild)\n  if (XILD)\n    set (CMAKE_LINKER \"${XILD}\")\n  endif (XILD)\n  mark_as_advanced (XILD)\n\n  # ICC will default to -fp-model fast=1, which performs value-unsafe optimizations which will\n  # cause pbrt_test to fail. For safety, -fp-model precise is explicitly set here by default.\n  set (FP_MODEL \"precise\" CACHE STRING \"The floating point model to compile with.\")\n  set_property (CACHE FP_MODEL PROPERTY STRINGS \"precise\" \"fast=1\" \"fast=2\")\n\n  list (APPEND PBRT_CXX_FLAGS \"-fp-model\" \"${FP_MODEL}\")\nendif ()\n\nif (MSVC AND MSVC_VERSION LESS 1920)\n  message (SEND_ERROR \"pbrt-v4 currently requires MSVC 2019 to build on Windows. PRs that get MSVC 2017 working as well would be welcomed. :-)\")\nendif ()\n\n###########################################################################\n# Check for various C++ features and set preprocessor variables or\n# define workarounds.\n\ninclude (CheckCXXSourceCompiles)\n\ncheck_cxx_source_compiles (\"\n#include <fcntl.h>\n#include <sys/mman.h>\n#include <sys/stat.h>\n#include <sys/types.h>\nint main() {\n   int fd = open(\\\"foo\\\", O_RDONLY);\n   struct stat s;\n   fstat(fd, &s);\n   size_t len = s.st_size;\n   void *ptr = mmap(0, len, PROT_READ, MAP_FILE | MAP_SHARED, fd, 0);\n   munmap(ptr, len);   \n}\n\" HAVE_MMAP)\n\nif (HAVE_MMAP)\n  list (APPEND PBRT_DEFINITIONS \"PBRT_HAVE_MMAP\")\nENDIF ()\n\ninclude (CheckIncludeFiles)\n\ncheck_cxx_source_compiles (\"\n#include <intrin.h>\nint main() {\n    unsigned long lz = 0, v = 1234;\n    if (_BitScanReverse(&lz, v)) return lz;\n    return 0;\n} \" HAS_INTRIN_H)\n\nif (HAS_INTRIN_H)\n  list (APPEND PBRT_DEFINITIONS \"PBRT_HAS_INTRIN_H\")\nendif ()\n\n########################################\n# noinline\n\ncheck_cxx_source_compiles (\n\"__declspec(noinline) void foo() { }\nint main() { }\"\nHAVE_DECLSPEC_NOINLINE)\n\ncheck_cxx_source_compiles (\n\"__attribute__((noinline)) void foo() { }\nint main() { }\"\nHAVE_ATTRIBUTE_NOINLINE)\n\nif (HAVE_ATTRIBUTE_NOINLINE)\n  list (APPEND PBRT_DEFINITIONS \"PBRT_NOINLINE=__attribute__((noinline))\")\nelseif (HAVE_DECLSPEC_NOINLINE)\n  list (APPEND PBRT_DEFINITIONS \"PBRT_NOINLINE=__declspec(noinline)\")\nelse ()\n  list (APPEND PBRT_DEFINITIONS \"PBRT_NOINLINE\")\nendif ()\n\n########################################\n# restrict\n\ncheck_cxx_source_compiles (\n\"int * __restrict__ ptr;\nint main() { }\"\nHAVE_PRE_POST_BAR_RESTRICT)\n\ncheck_cxx_source_compiles (\n\"int * __restrict ptr;\nint main() { }\"\nHAVE_PRE_BAR_RESTRICT)\n\nif (HAVE_PRE_POST_BAR_RESTRICT)\n  list (APPEND PBRT_DEFINITIONS \"PBRT_RESTRICT=__restrict__\")\nelseif (HAVE_PRE_BAR_RESTRICT)\n  list (APPEND PBRT_DEFINITIONS \"PBRT_RESTRICT=__restrict\")\nelse ()\n  list (APPEND PBRT_DEFINITIONS \"PBRT_RESTRICT\")\nendif ()\n\n########################################\n# Aligned memory allocation\n\ncheck_cxx_source_compiles ( \"\n#include <malloc.h>\nint main() { void * ptr = _aligned_malloc(1024, 32); }\n\" HAVE__ALIGNED_MALLOC )\n\ncheck_cxx_source_compiles ( \"\n#include <stdlib.h>\nint main() {\n  void *ptr;\n  posix_memalign(&ptr, 32, 1024);\n} \" HAVE_POSIX_MEMALIGN )\n\nif (HAVE__ALIGNED_MALLOC)\n  list (APPEND PBRT_DEFINITIONS \"PBRT_HAVE__ALIGNED_MALLOC\")\nelseif (HAVE_POSIX_MEMALIGN)\n  list (APPEND PBRT_DEFINITIONS \"PBRT_HAVE_POSIX_MEMALIGN\")\nelse ()\n  message (SEND_ERROR \"Unable to find a way to allocate aligned memory\")\nendif ()\n\n########################################\n# are long and int64_t the same\n\ncheck_cxx_source_compiles (\"\n#include <cstdint>\n#include <type_traits>\nstatic_assert(!std::is_same<long, int64_t>::value && !std::is_same<long long, int64_t>::value);\nint main() { }\n\" INT64_IS_OWN_TYPE)\n\nif (INT64_IS_OWN_TYPE)\n  list (APPEND PBRT_DEFINITIONS \"PBRT_INT64_IS_OWN_TYPE\")\nendif ()\n\nif (PBRT_NVTX)\n  add_definitions (-D NVTX)\nendif()\n\n###########################################################################\n# On to pbrt...\n\nset (PBRT_SOURCE\n  src/pbrt/bsdf.cpp\n  src/pbrt/bssrdf.cpp\n  src/pbrt/bxdfs.cpp\n  src/pbrt/cameras.cpp\n  src/pbrt/film.cpp\n  src/pbrt/filters.cpp\n  src/pbrt/interaction.cpp\n  src/pbrt/lights.cpp\n  src/pbrt/lightsamplers.cpp\n  src/pbrt/materials.cpp\n  src/pbrt/media.cpp\n  src/pbrt/options.cpp\n  src/pbrt/paramdict.cpp\n  src/pbrt/parser.cpp\n  src/pbrt/pbrt.cpp\n  src/pbrt/ray.cpp\n  src/pbrt/samplers.cpp\n  src/pbrt/scene.cpp\n  src/pbrt/shapes.cpp\n  src/pbrt/textures.cpp\n\n  src/pbrt/cmd/pspec_gpu.cpp\n  )\n  \nif (MSVC)\n    set (PBRT_SOURCE ${PBRT_SOURCE} src/pbrt/visualstudio.natvis)\nendif ()\n\nset (PBRT_SOURCE_HEADERS\n  src/pbrt/bsdf.h\n  src/pbrt/bssrdf.h\n  src/pbrt/bxdfs.h\n  src/pbrt/cameras.h\n  src/pbrt/film.h\n  src/pbrt/filters.h\n  src/pbrt/interaction.h\n  src/pbrt/lightsamplers.h\n  src/pbrt/lights.h\n  src/pbrt/materials.h\n  src/pbrt/media.h\n  src/pbrt/options.h\n  src/pbrt/paramdict.h\n  src/pbrt/parser.h\n  src/pbrt/pbrt.h\n  src/pbrt/pbrt.soa\n  src/pbrt/ray.h\n  src/pbrt/samplers.h\n  src/pbrt/scene.h\n  src/pbrt/shapes.h\n  src/pbrt/textures.h\n  )  \n\nSET (PBRT_CPU_SOURCE\n  src/pbrt/cpu/aggregates.cpp\n  src/pbrt/cpu/integrators.cpp\n  src/pbrt/cpu/primitive.cpp\n  src/pbrt/cpu/render.cpp\n)\n\nSET (PBRT_CPU_SOURCE_HEADERS\n  src/pbrt/cpu/aggregates.h\n  src/pbrt/cpu/integrators.h\n  src/pbrt/cpu/primitive.h\n  src/pbrt/cpu/render.h\n)\n\nSET (PBRT_WAVEFRONT_SOURCE\n  src/pbrt/wavefront/aggregate.cpp\n  src/pbrt/wavefront/camera.cpp\n  src/pbrt/wavefront/film.cpp\n  src/pbrt/wavefront/integrator.cpp\n  src/pbrt/wavefront/media.cpp\n  src/pbrt/wavefront/samples.cpp\n  src/pbrt/wavefront/surfscatter.cpp\n  src/pbrt/wavefront/subsurface.cpp\n  src/pbrt/wavefront/wavefront.cpp\n)\n\nSET (PBRT_WAVEFRONT_SOURCE_HEADERS\n  src/pbrt/wavefront/aggregate.h\n  src/pbrt/wavefront/integrator.h\n  src/pbrt/wavefront/intersect.h\n  src/pbrt/wavefront/wavefront.h\n  src/pbrt/wavefront/workitems.h\n  src/pbrt/wavefront/workitems.soa\n  src/pbrt/wavefront/workqueue.h\n)\n\nSET (PBRT_UTIL_SOURCE\n  src/pbrt/util/args.cpp\n  src/pbrt/util/bluenoise.cpp\n  src/pbrt/util/buffercache.cpp\n  src/pbrt/util/check.cpp\n  src/pbrt/util/color.cpp\n  src/pbrt/util/colorspace.cpp\n  src/pbrt/util/display.cpp\n  src/pbrt/util/error.cpp\n  src/pbrt/util/file.cpp\n  src/pbrt/util/float.cpp\n  src/pbrt/util/gui.cpp\n  src/pbrt/util/image.cpp\n  src/pbrt/util/log.cpp\n  src/pbrt/util/loopsubdiv.cpp\n  src/pbrt/util/lowdiscrepancy.cpp\n  src/pbrt/util/math.cpp\n  src/pbrt/util/memory.cpp\n  src/pbrt/util/mesh.cpp\n  src/pbrt/util/mipmap.cpp\n  src/pbrt/util/noise.cpp\n  src/pbrt/util/parallel.cpp\n  src/pbrt/util/pmj02tables.cpp\n  src/pbrt/util/primes.cpp\n  src/pbrt/util/print.cpp\n  src/pbrt/util/progressreporter.cpp\n  src/pbrt/util/pstd.cpp\n  src/pbrt/util/rng.cpp\n  src/pbrt/util/sampling.cpp\n  src/pbrt/util/scattering.cpp\n  src/pbrt/util/sobolmatrices.cpp\n  src/pbrt/util/spectrum.cpp\n  src/pbrt/util/stats.cpp\n  src/pbrt/util/stbimage.cpp\n  src/pbrt/util/string.cpp\n  src/pbrt/util/transform.cpp\n  src/pbrt/util/vecmath.cpp\n)\n\nSET (PBRT_UTIL_SOURCE_HEADERS\n  src/pbrt/util/args.h\n  src/pbrt/util/bluenoise.h\n  src/pbrt/util/buffercache.h\n  src/pbrt/util/check.h\n  src/pbrt/util/color.h\n  src/pbrt/util/colorspace.h\n  src/pbrt/util/containers.h\n  src/pbrt/util/display.h\n  src/pbrt/util/error.h\n  src/pbrt/util/file.h\n  src/pbrt/util/float.h\n  src/pbrt/util/gui.h\n  src/pbrt/util/hash.h\n  src/pbrt/util/image.h\n  src/pbrt/util/log.h\n  src/pbrt/util/loopsubdiv.h\n  src/pbrt/util/lowdiscrepancy.h\n  src/pbrt/util/math.h\n  src/pbrt/util/memory.h\n  src/pbrt/util/mesh.h\n  src/pbrt/util/mipmap.h\n  src/pbrt/util/noise.h\n  src/pbrt/util/parallel.h\n  src/pbrt/util/pmj02tables.h\n  src/pbrt/util/primes.h\n  src/pbrt/util/print.h\n  src/pbrt/util/progressreporter.h\n  src/pbrt/util/pstd.h\n  src/pbrt/util/rng.h\n  src/pbrt/util/sampling.h\n  src/pbrt/util/scattering.h\n  src/pbrt/util/soa.h\n  src/pbrt/util/sobolmatrices.h\n  src/pbrt/util/spectrum.h\n  src/pbrt/util/splines.h\n  src/pbrt/util/stats.h\n  src/pbrt/util/string.h\n  src/pbrt/util/taggedptr.h\n  src/pbrt/util/transform.h\n  src/pbrt/util/vecmath.h\n  )\n\nif (PBRT_CUDA_ENABLED)\n  set (PBRT_GPU_SOURCE\n    src/pbrt/gpu/optix/aggregate.cpp\n    src/pbrt/gpu/optix/denoiser.cpp\n    src/pbrt/gpu/memory.cpp\n    src/pbrt/gpu/util.cpp\n  )\n  set (PBRT_GPU_SOURCE_HEADERS\n    src/pbrt/gpu/optix/aggregate.h\n    src/pbrt/gpu/cudagl.h\n    src/pbrt/gpu/optix/denoiser.h\n    src/pbrt/gpu/memory.h\n    src/pbrt/gpu/optix/optix.h\n    src/pbrt/gpu/util.h\n  )\n\n  set_source_files_properties (\n   src/pbrt/bsdf.cpp\n   src/pbrt/bssrdf.cpp\n   src/pbrt/bxdfs.cpp\n   src/pbrt/cameras.cpp\n   src/pbrt/film.cpp\n   src/pbrt/filters.cpp\n#   src/pbrt/genscene.cpp\n   src/pbrt/interaction.cpp\n   src/pbrt/lights.cpp\n   src/pbrt/lightsamplers.cpp\n   src/pbrt/materials.cpp\n#   src/pbrt/media.cpp\n   src/pbrt/options.cpp\n#   src/pbrt/paramdict.cpp\n#   src/pbrt/parser.cpp\n   src/pbrt/pbrt.cpp\n   src/pbrt/samplers.cpp\n   src/pbrt/shapes.cpp\n   src/pbrt/textures.cpp\n\n   src/pbrt/util/bluenoise.cpp\n   src/pbrt/util/check.cpp\n   src/pbrt/util/color.cpp\n   src/pbrt/util/colorspace.cpp\n   src/pbrt/util/error.cpp\n#   src/pbrt/util/file.cpp\n#   src/pbrt/util/float.cpp\n#   src/pbrt/util/image.cpp\n   src/pbrt/util/log.cpp\n#   src/pbrt/util/loopsubdiv.cpp\n   src/pbrt/util/lowdiscrepancy.cpp\n   src/pbrt/util/math.cpp\n#   src/pbrt/util/memory.cpp\n   src/pbrt/util/mesh.cpp\n#   src/pbrt/util/mipmap.cpp\n   src/pbrt/util/noise.cpp\n#   src/pbrt/util/parallel.cpp\n   src/pbrt/util/pmj02tables.cpp\n   src/pbrt/util/primes.cpp\n#   src/pbrt/util/print.cpp\n#   src/pbrt/util/progressreporter.cpp\n   src/pbrt/util/pstd.cpp\n   src/pbrt/util/rng.cpp\n   src/pbrt/util/sampling.cpp\n   src/pbrt/util/scattering.cpp\n   src/pbrt/util/sobolmatrices.cpp\n   src/pbrt/util/spectrum.cpp\n   src/pbrt/util/stats.cpp\n#   src/pbrt/util/stbimage.cpp\n#   src/pbrt/util/string.cpp\n   src/pbrt/util/transform.cpp\n   src/pbrt/util/vecmath.cpp\n\n    ${PBRT_WAVEFRONT_SOURCE}\n    ${PBRT_GPU_SOURCE}\n\n    src/pbrt/cmd/pspec_gpu.cpp\n\n    PROPERTIES LANGUAGE CUDA\n  )\n\n  cuda_compile_and_embed (PBRT_EMBEDDED_PTX src/pbrt/gpu/optix/optix.cu optix.cu)\nendif ()\n\nsource_group (\"Source Files\" FILES ${PBRT_SOURCE})\nsource_group (\"Header Files\" FILES ${PBRT_SOURCE_HEADERS})\nsource_group (\"Source Files/cpu\" FILES ${PBRT_CPU_SOURCE})\nsource_group (\"Header Files/cpu\" FILES ${PBRT_CPU_SOURCE_HEADERS})\nsource_group (\"Source Files/util\" FILES ${PBRT_UTIL_SOURCE})\nsource_group (\"Header Files/util\" FILES ${PBRT_UTIL_SOURCE_HEADERS})\nsource_group (\"Source Files/wavefront\" FILES ${PBRT_WAVEFRONT_SOURCE})\nsource_group (\"Header Files/wavefront\" FILES ${PBRT_WAVEFRONT_SOURCE_HEADERS})\nif (PBRT_CUDA_ENABLED)\n  source_group (\"Source Files/gpu\" FILES ${PBRT_GPU_SOURCE})\n  source_group (\"Header Files/gpu\" FILES ${PBRT_GPU_SOURCE_HEADERS})\nendif ()\n\n###########################################################################\n# pbrt libraries and executables\n\nlist (APPEND PBRT_DEFINITIONS \"PTEX_STATIC\")\n\n######################\n# soac\n\nadd_executable (soac src/pbrt/cmd/soac.cpp)\nadd_executable (pbrt::soac ALIAS soac)\n\ntarget_compile_definitions (soac PRIVATE ${PBRT_DEFINITIONS})\ntarget_compile_options (soac PUBLIC ${PBRT_CXX_FLAGS})\ntarget_link_libraries (soac PRIVATE pbrt_warnings pbrt_opt)\n\nset_target_properties (soac PROPERTIES OUTPUT_NAME soac)\n\nadd_custom_command (OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/pbrt_soa.h\n    COMMAND soac ${PBRT_SOURCE_CODE}/src/pbrt/pbrt.soa > ${CMAKE_CURRENT_BINARY_DIR}/pbrt_soa.h\n    DEPENDS soac ${PBRT_SOURCE_CODE}/src/pbrt/pbrt.soa)\nset (PBRT_SOA_GENERATED ${CMAKE_CURRENT_BINARY_DIR}/pbrt_soa.h)\n\nadd_custom_command (OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/wavefront_workitems_soa.h\n    COMMAND soac ${PBRT_SOURCE_CODE}/src/pbrt/wavefront/workitems.soa > ${CMAKE_CURRENT_BINARY_DIR}/wavefront_workitems_soa.h\n    DEPENDS soac ${PBRT_SOURCE_CODE}/src/pbrt/wavefront/workitems.soa)\nset (PBRT_SOA_GENERATED ${PBRT_SOA_GENERATED} ${CMAKE_CURRENT_BINARY_DIR}/wavefront_workitems_soa.h)\n\nadd_custom_target (pbrt_soa_generated DEPENDS ${PBRT_SOA_GENERATED})\n\nset_property (TARGET soac PROPERTY FOLDER \"cmd\")\n\n######################\n# pbrt_lib\n\nadd_library (pbrt_lib STATIC\n  ${CMAKE_CURRENT_BINARY_DIR}/rgbspectrum_srgb.cpp\n  ${CMAKE_CURRENT_BINARY_DIR}/rgbspectrum_dci_p3.cpp\n  ${CMAKE_CURRENT_BINARY_DIR}/rgbspectrum_rec2020.cpp\n  ${CMAKE_CURRENT_BINARY_DIR}/rgbspectrum_aces.cpp\n  ${PBRT_SOA_GENERATED}\n  ${PBRT_SOURCE}\n  ${PBRT_SOURCE_HEADERS}\n  ${PBRT_CPU_SOURCE}\n  ${PBRT_CPU_SOURCE_HEADERS}\n  ${PBRT_UTIL_SOURCE}\n  ${PBRT_UTIL_SOURCE_HEADERS}\n  ${PBRT_WAVEFRONT_SOURCE}\n  ${PBRT_WAVEFRONT_SOURCE_HEADERS}\n  ${PBRT_GPU_SOURCE}\n  ${PBRT_GPU_SOURCE_HEADERS}\n\n  src/ext/gtest/gtest-all.cc\n  src/ext/lodepng/lodepng.cpp\n  src/ext/rply/rply.cpp\n  )\nadd_library (pbrt::pbrt_lib ALIAS pbrt_lib)\n\nadd_dependencies (pbrt_lib pbrt_soa_generated)\n\ntarget_compile_definitions (pbrt_lib PRIVATE ${PBRT_DEFINITIONS})\n\n# Attempt to work-around Windows/CUDA build issues.\n# As per https://stackoverflow.com/a/51566919, this works around a cmake\n# bug that leads to undefined symbols...\nset_property(TARGET pbrt_lib PROPERTY CUDA_RESOLVE_DEVICE_SYMBOLS ON)\n\ntarget_include_directories (pbrt_lib PUBLIC\n  src\n  src/ext\n  ${STB_INCLUDE}\n  ${QOI_INCLUDE}\n  ${OPENEXR_INCLUDE}\n  ${ZLIB_INCLUDE_DIRS}\n  ${LIBDEFLATE_INCLUDE_DIRS}\n  ${FILESYSTEM_INCLUDE}\n  ${PTEX_INCLUDE}\n  ${DOUBLE_CONVERSION_INCLUDE}\n  ${NANOVDB_INCLUDE}\n  ${CMAKE_CURRENT_BINARY_DIR}\n  ${GLFW_INCLUDE}\n  ${GLAD_INCLUDE}\n)\n\nif (PBRT_CUDA_ENABLED AND PBRT_OPTIX7_PATH)\n    target_include_directories (pbrt_lib SYSTEM PUBLIC ${PBRT_OPTIX7_PATH}/include)\nendif ()\n\ntarget_compile_options (pbrt_lib PUBLIC ${PBRT_CXX_FLAGS})\n\ntarget_link_libraries (pbrt_lib PRIVATE pbrt_warnings pbrt_opt $<$<BOOL:PBRT_CUDA_ENABLED>:cuda_build_configuration>)\n\nadd_sanitizers (pbrt_lib)\n\nif (WIN32)\n  # Avoid a name clash when building on Visual Studio\n  set_target_properties (pbrt_lib PROPERTIES OUTPUT_NAME libpbrt)\nendif()\n\nset (ALL_PBRT_LIBS\n  pbrt_lib\n  ${CMAKE_THREAD_LIBS_INIT}\n  ${OPENEXR_LIBS}\n  Ptex_static\n  ${ZLIB_LIBRARIES}\n  ${LIBDEFLATE_LIBRARIES}\n  double-conversion\n  ${PBRT_CUDA_LIB}\n  utf8proc\n  glfw\n  glad\n  OpenGL::GL)\n\nif (PBRT_CUDA_ENABLED)\n  set_property (TARGET pbrt_lib PROPERTY CUDA_SEPARABLE_COMPILATION ON)\n  add_library (pbrt_embedded_ptx_lib STATIC\n      ${PBRT_EMBEDDED_PTX}\n      )\n  add_dependencies (pbrt_embedded_ptx_lib pbrt_soa_generated)\n  list (APPEND ALL_PBRT_LIBS pbrt_embedded_ptx_lib)\n  if (PBRT_NVML)\n    list (APPEND ALL_PBRT_LIBS \"nvidia-ml\")\n  endif ()\nendif ()\n\nif (WIN32)\n  list (APPEND ALL_PBRT_LIBS \"dbghelp\" \"wsock32\" \"ws2_32\")\nendif ()\n\nif (PROFILE_LIB)\n  list (APPEND ALL_PBRT_LIBS \"${PROFILE_LIB}\")\nendif ()\n\n######################\n## rgb2spec_opt\n\nadd_executable (rgb2spec_opt src/pbrt/cmd/rgb2spec_opt.cpp)\nadd_executable (pbrt::rgb2spec_opt ALIAS rgb2spec_opt)\n\ntarget_compile_definitions (rgb2spec_opt PRIVATE ${PBRT_DEFINITIONS})\ntarget_compile_options (rgb2spec_opt PUBLIC ${PBRT_CXX_FLAGS})\ntarget_link_libraries (rgb2spec_opt PRIVATE ${CMAKE_THREAD_LIBS_INIT} pbrt_opt pbrt_warnings)\n\nif (NOT PBRT_USE_PREGENERATED_RGB_TO_SPECTRUM_TABLES)\n  add_custom_command (OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/rgbspectrum_aces.cpp\n      COMMAND rgb2spec_opt 64 ${CMAKE_CURRENT_BINARY_DIR}/rgbspectrum_aces.cpp ACES2065_1 \n      DEPENDS rgb2spec_opt)\n\n  add_custom_command (OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/rgbspectrum_dci_p3.cpp\n      COMMAND rgb2spec_opt 64 ${CMAKE_CURRENT_BINARY_DIR}/rgbspectrum_dci_p3.cpp DCI_P3\n      DEPENDS rgb2spec_opt)\n\n  add_custom_command (OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/rgbspectrum_rec2020.cpp\n      COMMAND rgb2spec_opt 64 ${CMAKE_CURRENT_BINARY_DIR}/rgbspectrum_rec2020.cpp REC2020\n      DEPENDS rgb2spec_opt)\n\n  add_custom_command (OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/rgbspectrum_srgb.cpp\n      COMMAND rgb2spec_opt 64 ${CMAKE_CURRENT_BINARY_DIR}/rgbspectrum_srgb.cpp sRGB\n      DEPENDS rgb2spec_opt)\nendif ()\n\nset_property (TARGET rgb2spec_opt PROPERTY FOLDER \"cmd\")\n\n######################\n# Main renderer\n\nadd_executable (pbrt_exe src/pbrt/cmd/pbrt.cpp)\nadd_executable (pbrt::pbrt_exe ALIAS pbrt_exe)\n\ntarget_compile_definitions (pbrt_exe PRIVATE ${PBRT_DEFINITIONS})\ntarget_compile_options (pbrt_exe PRIVATE ${PBRT_CXX_FLAGS})\ntarget_include_directories (pbrt_exe PRIVATE src src/ext)\ntarget_link_libraries (pbrt_exe PRIVATE ${ALL_PBRT_LIBS} pbrt_opt pbrt_warnings)\n\nset_target_properties (pbrt_exe PROPERTIES OUTPUT_NAME pbrt)\n\nadd_sanitizers (pbrt_exe)\n\nset_property (TARGET pbrt_exe PROPERTY FOLDER \"cmd\")\n\n######################\n# imgtool\n\nadd_executable (imgtool src/pbrt/cmd/imgtool.cpp)\nadd_executable (pbrt::imgtool ALIAS imgtool)\n\nadd_library (sky_lib STATIC src/ext/skymodel/ArHosekSkyModel.c)\nset_property (TARGET sky_lib PROPERTY FOLDER \"ext\")\n\ntarget_compile_definitions (imgtool PRIVATE ${PBRT_DEFINITIONS})\ntarget_compile_options (imgtool PRIVATE ${PBRT_CXX_FLAGS})\ntarget_include_directories (imgtool PRIVATE src src/ext ${FLIP_INCLUDE})\ntarget_link_libraries (imgtool PRIVATE ${ALL_PBRT_LIBS} pbrt_opt pbrt_warnings sky_lib flip_lib)\n\nadd_sanitizers (imgtool)\n\nset_property (TARGET imgtool PROPERTY FOLDER \"cmd\")\n\n######################\n# pspec\n\nadd_executable (pspec src/pbrt/cmd/pspec.cpp)\nadd_executable (pbrt::pspec ALIAS pspec)\n\ntarget_compile_definitions (pspec PRIVATE ${PBRT_DEFINITIONS})\ntarget_compile_options (pspec PRIVATE ${PBRT_CXX_FLAGS})\ntarget_include_directories (pspec PRIVATE src src/ext)\ntarget_link_libraries (pspec PRIVATE ${ALL_PBRT_LIBS} pbrt_warnings)\n\nadd_sanitizers (pspec)\n\nset_property (TARGET pspec PROPERTY FOLDER \"cmd\")\n\n######################\n# plytool\n\nadd_executable (plytool src/pbrt/cmd/plytool.cpp)\nadd_executable (pbrt::plytool ALIAS plytool)\n\ntarget_compile_definitions (plytool PRIVATE ${PBRT_DEFINITIONS})\ntarget_compile_options (plytool PUBLIC ${PBRT_CXX_FLAGS})\ntarget_include_directories (plytool PUBLIC src src/ext)\ntarget_link_libraries (plytool PRIVATE ${ALL_PBRT_LIBS} pbrt_warnings pbrt_opt)\n\nset_target_properties (plytool PROPERTIES OUTPUT_NAME plytool)\n\nadd_sanitizers (plytool)\n\nset_property (TARGET plytool PROPERTY FOLDER \"cmd\")\n\n######################\n# nanovdb2pbrt\n\nadd_executable (nanovdb2pbrt src/pbrt/cmd/nanovdb2pbrt.cpp)\nadd_executable (pbrt::nanovdb2pbrt ALIAS nanovdb2pbrt)\n\ntarget_compile_definitions (nanovdb2pbrt PRIVATE ${PBRT_DEFINITIONS})\ntarget_compile_options (nanovdb2pbrt PUBLIC ${PBRT_CXX_FLAGS})\ntarget_include_directories (nanovdb2pbrt PUBLIC src src/ext)\ntarget_link_libraries (nanovdb2pbrt PRIVATE ${ALL_PBRT_LIBS} pbrt_warnings pbrt_opt)\n\nset_target_properties (nanovdb2pbrt PROPERTIES OUTPUT_NAME nanovdb2pbrt)\n\nadd_sanitizers (nanovdb2pbrt)\n\nset_property (TARGET nanovdb2pbrt PROPERTY FOLDER \"cmd\")\n\n######################\n# cyhair2pbrt\n\nadd_executable (cyhair2pbrt src/pbrt/cmd/cyhair2pbrt.cpp)\n\ntarget_compile_definitions (cyhair2pbrt PRIVATE ${PBRT_DEFINITIONS})\ntarget_compile_options (cyhair2pbrt PRIVATE ${PBRT_CXX_FLAGS})\ntarget_link_libraries (cyhair2pbrt PRIVATE pbrt_opt pbrt_warnings)\n\nadd_sanitizers (cyhair2pbrt)\n\nset_property (TARGET cyhair2pbrt PROPERTY FOLDER \"cmd\")\n\n##################\n# Unit tests\n\nset (PBRT_TEST_SOURCE\n  src/pbrt/bsdfs_test.cpp\n  src/pbrt/filters_test.cpp\n  src/pbrt/lights_test.cpp\n  src/pbrt/lightsamplers_test.cpp\n  src/pbrt/media_test.cpp\n  src/pbrt/parser_test.cpp\n  src/pbrt/samplers_test.cpp\n  src/pbrt/shapes_test.cpp\n\n  src/pbrt/cpu/integrators_test.cpp\n\n  src/pbrt/util/args_test.cpp\n  src/pbrt/util/buffercache_test.cpp\n  src/pbrt/util/color_test.cpp\n  src/pbrt/util/containers_test.cpp\n  src/pbrt/util/file_test.cpp\n  src/pbrt/util/float_test.cpp\n  src/pbrt/util/hash_test.cpp\n  src/pbrt/util/image_test.cpp\n  src/pbrt/util/math_test.cpp\n  src/pbrt/util/parallel_test.cpp\n  src/pbrt/util/print_test.cpp\n  src/pbrt/util/pstd_test.cpp\n  src/pbrt/util/rng_test.cpp\n  src/pbrt/util/sampling_test.cpp\n  src/pbrt/util/spectrum_test.cpp\n  src/pbrt/util/splines_test.cpp\n  src/pbrt/util/string_test.cpp\n  src/pbrt/util/taggedptr_test.cpp\n  src/pbrt/util/transform_test.cpp\n  src/pbrt/util/vecmath_test.cpp\n  )\n\nadd_executable (pbrt_test src/pbrt/cmd/pbrt_test.cpp ${PBRT_TEST_SOURCE})\n\ntarget_link_libraries (pbrt_test PRIVATE ${ALL_PBRT_LIBS} pbrt_opt pbrt_warnings)\ntarget_compile_definitions (pbrt_test PRIVATE ${PBRT_DEFINITIONS})\ntarget_include_directories (pbrt_test PRIVATE src src/ext ${DOUBLE_CONVERSION_INCLUDE})\ntarget_compile_options(pbrt_test PUBLIC ${PBRT_CXX_FLAGS})\n\nadd_sanitizers (pbrt_test)\n\nadd_test (pbrt_unit_test pbrt_test)\n\nset_property (TARGET pbrt_test PROPERTY FOLDER \"cmd\")\n\n###############################\n# Installation\n\ninstall (TARGETS\n  pbrt_exe\n  imgtool\n  pspec\n  plytool\n  cyhair2pbrt\n  DESTINATION\n  bin\n  )\n\ninstall (TARGETS\n  pbrt_lib\n  DESTINATION\n  lib\n  )\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.4150390625,
          "content": "pbrt, Version 4 (Early Release)\n===============================\n\n[<img src=\"https://github.com/mmp/pbrt-v4/workflows/cpu-linux-build-and-test/badge.svg\">](https://github.com/mmp/pbrt-v4/actions?query=workflow%3Acpu-linux-build-and-test)\n[<img src=\"https://github.com/mmp/pbrt-v4/workflows/cpu-macos-build-and-test/badge.svg\">](https://github.com/mmp/pbrt-v4/actions?query=workflow%3Acpu-macos-build-and-test)\n[<img src=\"https://github.com/mmp/pbrt-v4/workflows/cpu-windows-build-and-test/badge.svg\">](https://github.com/mmp/pbrt-v4/actions?query=workflow%3Acpu-windows-build-and-test)\n[<img src=\"https://github.com/mmp/pbrt-v4/workflows/gpu-build-only/badge.svg\">](https://github.com/mmp/pbrt-v4/actions?query=workflow%3Agpu-build-only)\n\n![Transparent Machines frame, via @beeple](images/teaser-transparent-machines.png)\n\nThis is an early release of pbrt-v4, the rendering system that will be\ndescribed in the forthcoming fourth edition of *Physically Based Rendering:\nFrom Theory to Implementation*.  (The printed book will be available in\nmid-February 2023; a few chapters will be made available in late Fall of\n2022; and the full contents of the book will be freely available six months\nafter the book's release, like the [third edition](https://pbr-book.org) is\nalready.)\n\nWe are making this code available for hardy adventurers; it's not yet\nextensively documented, but if you are familiar with previous versions of\npbrt, you should be able to make your way around it.  Our hope is that the\nsystem will be useful to some people in its current form and that any bugs\nin the current implementation might be found now, allowing us to correct\nthem before the book is final.\n\nResources\n---------\n\n* A number of scenes for pbrt-v4 are [available in a git repository](https://github.com/mmp/pbrt-v4-scenes).\n* The [pbrt-v4 User's Guide](https://pbrt.org/users-guide-v4.html).\n* Documentation on the [pbrt-v4 Scene Description Format](https://pbrt.org/fileformat-v4.html).\n\nFeatures\n--------\n\npbrt-v4 represents a substantial update to the previous version of pbrt-v3.\nMajor changes include:\n\n* Spectral rendering\n  * Rendering computations are always performed using\n    point-sampled spectra; the use of RGB color is limited to the scene\n    description (e.g., image texture maps), and final image output.\n* Modernized volumetric scattering\n  * An all-new `VolPathIntegrator` based on the null-scattering path\n    integral formulation of [Miller et\n    al. 2019](https://cs.dartmouth.edu/~wjarosz/publications/miller19null.html)\n    has been added.\n  * Tighter majorants are used for null-scattering with the `GridDensityMedium`\n    via a separate low-resolution grid of majorants.\n  * Both emissive volumes and volumes with RGB-valued absorption and scattering coefficients are now supported.\n* Support for rendering on GPUs is available on systems that have CUDA and OptiX.\n  * The GPU path provides all of the functionality of the CPU-based\n    `VolPathIntegrator`, including volumetric scattering, subsurface\n    scattering, all of pbrt's cameras, samplers, shapes, lights, materials\n    and BxDFs, etc.\n  * Performance is substantially faster than rendering on the CPU.\n* New BxDFs and Materials\n  * The provided BxDFs and Materials have been redesigned to be more\n    closely tied to physical scattering processes, along the lines of\n    Mitsuba's materials. (Among other things, the kitchen-sink UberMaterial\n    is now gone.)\n  * Measured BRDFs are now represented using [Dupuy and Jakob's\n    approach](https://rgl.epfl.ch/publications/Dupuy2018Adaptive).\n  * Scattering from layered materials is accurately simulated using Monte\n    Carlo random walks (after [Guo et al. 2018](https://shuangz.com/projects/layered-sa18/).)\n* A variety of light sampling improvements have been implemented.\n  * \"Many-light\" sampling is available via light BVHs ([Conty and Kulla 2018](http://aconty.com/pdf/many-lights-hpg2018.pdf)).\n  * Solid angle sampling is used for triangle\n    ([Arvo1995](https://dl.acm.org/doi/10.1145/218380.218500)) and\n    quadrilateral ([Ureña et al. 2013](https://www.arnoldrenderer.com/research/egsr2013_spherical_rectangle.pdf))\n    light sources.\n  * A single ray is now traced for both indirect lighting and BSDF-sampled direct-lighting.\n  * Warp product sampling is used for approximate cosine-weighted solid angle\n    sampling ([Hart et al. 2019](https://onlinelibrary.wiley.com/doi/abs/10.1111/cgf.14060)).\n  * An implementation of Bitterli et al's environment light [portal sampling](https://benedikt-bitterli.me/pmems.html)\n    technique is included.\n* Rendering can now be performed in absolute physical units with modelling of real cameras as per [Langlands & Fascione 2020](https://github.com/wetadigital/physlight).\n* And also...\n  * Various improvements have been made to the `Sampler` classes, including\n    better randomization and a new sampler that implements [Ahmed and Wonka's blue noise Sobol' sampler](http://abdallagafar.com/publications/zsampler/).\n  * A new `GBufferFilm` that provides position, normal, albedo, etc., at\n    each pixel is now available. (This is particularly useful for denoising and ML training.)\n  * Path regularization (optionally).\n  * A bilinear patch primitive has been added ([Reshetov 2019](https://link.springer.com/chapter/10.1007/978-1-4842-4427-2_8)).\n  * Various improvements to ray--shape intersection precision.\n  * Most of the low-level sampling code has been factored out into\n    stand-alone functions for easier reuse.  Also, functions that invert\n    many sampling techniques are provided.\n  * Unit test coverage has been substantially increased.\n\nWe have also made a refactoring pass throughout the entire system, cleaning\nup various APIs and data types to improve both readability and usability.\n\nFinally, pbrt-v4 can work together with the\n[tev](https://github.com/Tom94/tev) image viewer to display the image as\nit's being rendered.  As of recent versions, *tev* can display images\nprovided to it via a network socket; by default, it listens to port 14158,\nthough this can be changed via its ``--hostname`` command-line option.  If\nyou have an instance of *tev* running, you can run pbrt like:\n```bash\n$ pbrt --display-server localhost:14158 scene.pbrt\n```\nIn that case, the image will be progressively displayed as it renders.\n\nBuilding the code\n-----------------\n\nAs before, pbrt uses git submodules for a number of third-party libraries\nthat it depends on.  Therefore, be sure to use the `--recursive` flag when\ncloning the repository:\n```bash\n$ git clone --recursive https://github.com/mmp/pbrt-v4.git\n```\n\nIf you accidentally clone pbrt without using ``--recursive`` (or to update\nthe pbrt source tree after a new submodule has been added, run the\nfollowing command to also fetch the dependencies:\n```bash\n$ git submodule update --init --recursive\n```\n\npbrt uses [cmake](http://www.cmake.org/) for its build system.  Note that a\nrelease build is the default; provide `-DCMAKE_BUILD_TYPE=Debug` to cmake\nfor a debug build.\n\npbrt should build on any system that has C++ compiler with support for\nC++17; we have verified that it builds on Ubuntu 20.04, MacOS 10.14, and\nWindows 10.  We welcome PRs that fix any issues that prevent it from\nbuilding on other systems.\n\nBug Reports and PRs\n-------------------\n\nPlease use the [pbrt-v4 github issue\ntracker](https://github.com/mmp/pbrt-v4/issues) to report bugs in pbrt-v4.\n(We have pre-populated it with a number of issues corresponding to known\nbugs in the initial release.)\n\nWe are always happy to receive pull requests that fix bugs, including bugs\nyou find yourself or fixes for open issues in the issue tracker.  We are\nalso happy to hear suggestions about improvements to the implementations of\nthe various algorithms we have implemented.\n\nNote, however, that in the interests of finishing the book in a finite\namount of time, the functionality of pbrt-v4 is basically fixed at this\npoint.  We therefore will not be accepting PRs that make major changes to the\nsystem's operation or structure (but feel free to keep them in your own\nforks!).  Also, don't bother sending PRs for anything marked \"TODO\" or\n\"FIXME\" in the source code; we'll take care of those as we finish polishing\nthings up.\n\nUpdating pbrt-v3 scenes\n-----------------------\n\nThere are a variety of changes to the input file format and, as noted\nabove, the new format is not yet documented.  However, pbrt-v4 partially\nmakes up for that by providing an automatic upgrade mechanism:\n```bash\n$ pbrt --upgrade old.pbrt > new.pbrt\n```\n\nMost scene files can be automatically updated. In some cases manual\nintervention is required; an error message will be printed in this case.\n\nThe environment map parameterization has also changed (from equi-rect to an\nequi-area mapping); you can upgrade environment maps using\n```bash\n$ imgtool makeequiarea old.exr --outfile new.exr\n```\n\nConverting scenes to pbrt's file format\n---------------------------------------\n\nThe best option for importing scenes to pbrt is to use\n[assimp](https://www.assimp.org/), which as of January 21, 2021 includes\nsupport for exporting to pbrt-v4's file format:\n```bash\n$ assimp export scene.fbx scene.pbrt\n```\n\nWhile the converter tries to convert materials to pbrt's material model,\nsome manual tweaking may be necessary after export.  Furthermore, area\nlight sources are not always successfully detected; manual intervention may\nbe required for them as well.  Use of pbrt's built-in support for\nconverting meshes to use the binary PLY format is also recommended after\nconversion. (`pbrt --toply scene.pbrt > newscene.pbrt`).\n\nUsing pbrt on the GPU\n---------------------\n\nTo run on the GPU, pbrt requires:\n\n* C++17 support on the GPU, including kernel launch with C++ lambdas.\n* Unified memory so that the CPU can allocate and initialize data\n  structures for code that runs on the GPU.\n* An API for ray-object intersections on the GPU.\n\nThese requirements are effectively what makes it possible to bring pbrt to\nthe GPU with limited changes to the core system.  As a practical matter,\nthese capabilities are only available via CUDA and OptiX on NVIDIA GPUs\ntoday, though we'd be happy to see pbrt running on any other GPUs that\nprovide those capabilities.\n\npbrt's GPU path currently requires CUDA 11.0 or later and OptiX 7.1 or\nlater.  Both Linux and Windows are supported.\n\nThe build scripts automatically attempt to find a CUDA compiler, looking in\nthe usual places; the cmake output will indicate whether it was successful.\nIt is necessary to manually set the cmake `PBRT_OPTIX7_PATH` configuration\noption to point at an OptiX installation.  By default, the GPU shader model\nthat pbrt targets is set automatically based on the GPU in the system.\nAlternatively, the `PBRT_GPU_SHADER_MODEL` option can be set manually\n(e.g., `-DPBRT_GPU_SHADER_MODEL=sm_80`).\n\nEven when compiled with GPU support, pbrt uses the CPU by default unless\nthe `--gpu` command-line option is given.  Note that when rendering with\nthe GPU, the `--spp` command-line flag can be helpful to easily crank up\nthe number of samples per pixel. Also, it's extra fun to use *tev* to watch\nrendering progress.\n\nThe imgtool program that is built as part of pbrt provides support for the\nOptiX denoiser in the GPU build.  The denoiser is capable of operating on\nRGB-only images, but gives better results with \"deep\" images that include\nauxiliary channels like albedo and normal.  Setting the scene's \"Film\" type\nto be \"gbuffer\" when rendering and using EXR for the image format causes\npbrt to generate such a \"deep\" image.  In either case, using the denoiser\nis straightforward:\n```bash\n$ imgtool denoise-optix noisy.exr --outfile denoised.exr\n```\n"
        },
        {
          "name": "THIRD_PARTY.md",
          "type": "blob",
          "size": 1.0673828125,
          "content": "\npbrt-v4 makes use of the following third-party libraries and data. Thanks\nto all of the developers who have made these available!\n\n* [double-conversion](https://github.com/google/double-conversion)\n* [filesystem](https://github.com/wjakob/filesystem)\n* [googletest](https://github.com/google/googletest)\n* [lodepng](https://lodev.org/lodepng/)\n* [OpenEXR](http:://www.openexr.com)\n* [Ptex](http://ptex.us/)\n* [rply](http://w3.impa.br/~diego/software/rply/)\n* [skymodel](https://cgg.mff.cuni.cz/projects/SkylightModelling/)\n* [stb](https://github.com/nothings/stb)\n* [tinyobjloader](https://github.com/tinyobjloader/tinyobjloader)\n* [zlib](https://zlib.net/)\n\nThanks also to Anders Langlands, who provided the Sensor implementation\nused in the film model and Syoyo Fujita for the cyhair converter.\n\npbrt-v4 also includes spectral data from the following sources:\n\n* Glass refractive index tables from https://refractiveindex.info, public\n  domain CC0.\n* Camera sensor measurement data from https://github.com/ampas/rawtoaces,\n  Copyright © 2017 Academy of Motion Picture Arts and Sciences.\n\n\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}