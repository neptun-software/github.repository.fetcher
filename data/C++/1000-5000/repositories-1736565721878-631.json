{
  "metadata": {
    "timestamp": 1736565721878,
    "page": 631,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "RenderKit/embree",
      "stars": 2424,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.0966796875,
          "content": "root = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2509765625,
          "content": "* text=auto\n\n*.txt       text\n*.ivl       text\n*.ispc      text\n*.cpp       text\n*.h         text\n*.cc        text\n*.cxx       text\n*.c         text\n*.jpg       binary\n*.png       binary\n*.pdf       binary\n*.rc\t    text working-tree-encoding=UTF-8 eol=CRLF\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1162109375,
          "content": "*.user\nWin32\nx64\n*.suo\n*.ncb\n.*sw?\n.DS_Store\nkernels/config.h\nkernels/hash.h\ninclude/embree4/rtcore_config.h\nbuild\nout\n"
        },
        {
          "name": ".gitlab-ci.yml",
          "type": "blob",
          "size": 1.6845703125,
          "content": "## Copyright 2009-2021 Intel Corporation\n## SPDX-License-Identifier: Apache-2.0\n\nvariables:\n  COMMON: \"platform:x64 compiler:dpcpp ispc:ispc1.16.1 isa:SSE2 tasking:TBB2019.9\"\n  # Retry mechanism knobs in case of sporadic errors\n  GET_SOURCES_ATTEMPTS: 10\n  ARTIFACT_DOWNLOAD_ATTEMPTS: 10\n  EXECUTOR_JOB_SECTION_ATTEMPTS: 3\n\n\n####################################################################\n# Stages\n####################################################################\n\nstages:\n  - benchmark\n\n\n####################################################################\n# Preliminary benchmark setup\n####################################################################\n\n.benchmark:\n  stage:  benchmark\n  tags:\n    - vis-perf-x8280-1\n  script:\n    - \"scripts/test.py configure platform:x64 build:Release compiler:GCC ispc:ispc1.17.0 isas:AVX512 tasking:TBB2021.2.0 intensity:0 EMBREE_USE_GOOGLE_BENCHMARK:ON EMBREE_GOOGLE_BENCHMARK_DIR:/NAS/packages/apps/google-benchmark/vis-perf-x8280-1/lib64/cmake/benchmark\"\n    - \"scripts/test.py build\"\n    - \"scripts/test.py test\"\n    - \"scripts/test.py run-benchmark.sh\"\n  needs: []\n\nbenchmark_nightly:\n  extends: .benchmark\n  only:   [web, schedules]\n\nbenchmark_manual:\n  extends: .benchmark\n  except:   [schedules]\n  when: manual\n\n.benchmark_gpu:\n  stage:  benchmark\n  image: $DOCKER_REGISTRY/embree/ubuntu:20.04\n  tags:   [docker-gpu, dg2, perf]\n  before_script:\n    - git config --global --add safe.directory $CI_PROJECT_DIR\n  script:\n    - \"scripts/run-benchmark-gpu.sh\"\n    - \"scripts/record-benchmark-gpu.sh\"\n  needs: []\n\nbenchmark_gpu_nightly:\n  extends: .benchmark_gpu\n  only:   [schedules]\n\nbenchmark_gpu_manual:\n  extends: .benchmark_gpu\n  except:   [schedules]\n  when: manual\n\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 47.21484375,
          "content": "Version History\n---------------\n\n### Embree 4.3.3\n-   Added RTCError RTC_ERROR_LEVEL_ZERO_RAYTRACING_SUPPORT_MISSING which can indicate a GPU driver that is too old or not installed properly.\n-   Added the API function rtcGetDeviceLastErrorMessage to query additional information about the last RTCError returned by rtcGetDeviceError. This can be used in case device creation failed and a rtcErrorFunction could not be set up for this purpose.\n-   Added the API function rtcGetErrorString which returns a string representation of a given RTCError error code. This is purely meant for convenient error information reporting on the user application side.\n-   Performance improvements on GPU for the one level instancing case (RTC_MAX_INSTANCE_LEVEL_COUNT 1).\n-   Reduced the number of unneccessary GPU-CPU USM back-migrations which can increase build performance for scene with many instances on GPU.\n-   Started adding public CI tests for streamlining integration of external pull requests.\n-   Work-around for problem with unsigned Windows binaries.\n\n### Embree 4.3.2\n-   Embree now uses level zero raytracing extension to build BVH which enables forward-compatibility. On Linux, the package intel-level-zero-gpu-raytracing has to be installed in addition to the other packages listed here [https://dgpu-docs.intel.com/](https://dgpu-docs.intel.com/).\n-   MacOS universal binary compilation now works.\n-   Some bugfixes for AVX512 on MacOS x86 machines.\n-   Known issue: It is recommended to run Embree on Intel® Data Center GPU Max Series (e.g. Intel® Data Center GPU Max 1550) with the following environment settings: NEOReadDebugKeys=1 UseKmdMigration=0\n-   Known issue: ISPC version of tutorials will not successfully build with MacOS universal binary compilation.\n\n### Embree 4.3.1\n-   Add missing EMBREE_GEOMETRY types to embree-config.cmake\n-   User defined thread count now takes precedence for internal task scheduler\n-   Fixed static linking issue with ze_wrapper library\n-   Better error reporting for SYCL platform and driver problems in embree_info and tutorial apps.\n-   Patch to glfw source is not applied by default anymore.\n-   Known issue: Running Embree on Intel® Data Center GPU Max Series with 2 tiles (e.g. Intel® Data Center GPU Max 1550) requires setting the environment variable ZE_FLAT_DEVICE_HIERARCHY=COMPOSITE.\n-   Known issue: Embree build using Apple Clang 15 and ARM support (via the SEE2NEON library) may cause \"EXEC_BAD_INSTRUCTION\" runtime exceptions. Please use Apple Clang <= 14 on macOS.\n\n### Embree 4.3.0\n-   Added instance array primitive for reducing memony requirements in scenes\n    with large amounts of similar instances.\n-   Properly checks driver if L0 RTAS extension can get loaded.\n-   Added varying version of rtcGetGeometryTransform for ISPC.\n-   Fixed signature of RTCMemoryMonitorFunction for ISPC.\n-   Add support for ARM64 Windows platform in CMake.\n\n### Embree 4.2.0\n-   SYCL version of Embree with GPU support is no longer in beta phase.\n-   Improved BVH build performance on many core machines for applications that oversubscribe threads.\n-   Added rtcGetGeometryTransformFromScene API function that can get used inside SYCL kernels.\n-   No longer linking to ze_loader in SYCL mode to avoid Intel(R) oneAPI Level Zero dependency\n    for CPU rendering.\n-   Releasing test package to test Embree.\n\n### Embree 4.1.0\n-   Added support for Intel® Data Center GPU Max Series.\n-   Added ARM64 Linux support.\n-   Added EMBREE_BACKFACE_CULLING_SPHERES cmake option. The new cmake option defaults to OFF.\n\n### Embree 4.0.1\n-   Improved performance for Tiger Lake, Comet Lake, Cannon Lake, Kaby Lake,\n    and Skylake client CPUs by using 256 bit SIMD instructions by default.\n-   Fixed broken motion blur of RTC_GEOMETRY_TYPE_ROUND_LINEAR_CURVE geometry type.\n-   Fixed bvh build retry issue for TBB 2020.3\n-   Added support for Intel® Data Center GPU Flex Series\n-   Fixed issue on systems without a SYCL platform.\n\n### Embree 4.0.0\n-   This Embree release adds support for Intel® Arc™ GPUs through SYCL.\n-   The SYCL support of Embree is in beta phase. Current functionality, quality,\n    and GPU performance may not reflect that of the final product. Please read the\n    documentation section \"Embree SYCL Known Issues\" for known limitations.\n-   Embree CPU support in this release as at Gold level, incorporating the same quality\n    and performance as previous releases.\n-   A small number of API changes were required to get optimal experience and\n    performance on the CPU and GPU. See documentation section \"Upgrading from Embree 3 to\n    Embree 4\" for details.\n-   rtcIntersect and rtcOccluded function arguments changed slightly.\n-   RTCIntersectContext is renamed to RTCRayQuery context and most members moved to\n    new RTCIntersectArguments and RTCOccludedArguments structures.\n-   rtcFilterIntersection and rtcFilterOcclusion API calls got replaced by\n    rtcInvokeIntersectFilterFromGeometry and rtcInvokeOccludedFilterFromGeometry API calls.\n-   rtcSetGeometryEnableFilterFunctionFromArguments enables argument filter functions for some geometry.\n-   RTC_RAY_QUERY_FLAG_INVOKE_ARGUMENT_FILTER ray query flag enables argument filter functions for each geometry.\n-   User geometry callbacks have to return if a valid hit was found.\n-   Ray masking is enabled by default now as required by most users.\n-   The default ray mask for geometries got changed from 0xFFFFFFFF to 0x1.\n-   Removed ray stream API as rarely used with minimal performance benefits over packet tracing.\n-   Introduced rtcForwardIntersect/rtcForwardOccluded API calls to trace tail recursive rays from user geometry callback.\n-   The rtcGetGeometryUserDataFromScene API call got added to be used in SYCL code.\n-   Added support for user geometry callback function pointer passed through ray query context\n-   Feature flags enable reducing code complexity for optimal performance on the GPU.\n-   Fixed compilation issues for ARM AArch64 processor under Linux.\n-   Setting default frequency level to SIMD256 for ARM on all platforms.\n    This allows using double pumped NEON execution by enabling EMBREE_ISA_NEON2X in cmake under Linux.\n-   Fixed missing end caps of motion blurred line segments.\n-   EMBREE_ISPC_SUPPORT is turned OFF by default.\n-   Embree drops support of the deprecated Intel(R) Compiler. It is replaced by\n    the Intel(R) oneAPI DPC++/C++ Compiler on Windows and Linux and the\n    Intel(R) C++ Classic Compiler on MacOS (latest tested versions is 2023.0.0).\n\n### Embree 3.13.5\n-   Fixed bug in bounding flat Catmull Rom curves of subdivision level 4.\n-   Improved self intersection avoidance for\n    RTC_GEOMETRY_TYPE_DISC_POINT geometry type. Intersections are\n    skipped if the ray origin lies inside the sphere defined by the\n    point primitive. Self intersection avoidance can get disabled at compile time\n    using the EMBREE_DISC_POINT_SELF_INTERSECTION_AVOIDANCE cmake option.\n-   Fixed spatial splitting for non-planar quads.\n\n### Embree 3.13.4\n-   Using 8-wide BVH and double pumped NEON instructions on Apple M1 gives 8% performance boost.\n-   Fixed binning related crash in SAH BVH builder.\n-   Added EMBREE_TBB_COMPONENT cmake option to define the component/library name of Intel® TBB (default: tbb).\n-   Embree supports now Intel® oneAPI DPC++/C++ Compiler 2022.0.0\n\n### Embree 3.13.3\n-   Invalid multi segment motion blurred normal oriented curves are properly excluded from BVH build.\n-   Fixing issue with normal oriented curve construction when center curve curvature is very large.\n    Due to this change normal oriented curve shape changes slightly.\n-   Fixed crash caused by disabling a geometry and then detaching it from the scene.\n-   Bugfix in emulated ray packet intersection when EMBREE_RAY_PACKETS is turned off.\n-   Bugfix for linear quaternion interpolation fallback.\n-   Fixed issues with spaces in path to Embree build folder.\n-   Some fixes to compile Embree in SSE mode using WebAssembly.\n-   Bugfix for occlusion rays with grids and ray packets.\n-   We do no longer provide installers for Windows and macOS, please use the ZIP files instead.\n-   Upgrading to Intel® ISPC 1.17.0 for release build.\n-   Upgrading to Intel® oneTBB 2021.5.0 for release build.\n\n### Embree 3.13.2\n-   Avoiding spatial split positions that are slightly out of geometry bounds.\n-   Introduced rtcGetGeometryThreadSafe function, which is a thread safe version of rtcGetGeometry.\n-   Using more accurate rcp implementation.\n-   Bugfix to rare corner case of high quality BVH builder.\n\n### Embree 3.13.1\n-   Added support for Intel® ISPC ARM target.\n-   Releases upgrade to Intel® TBB 2021.3.0 and Intel® ISPC 1.16.1\n\n### Embree 3.13.0\n-   Added support for Apple M1 CPUs.\n-   RTC_SUBDIVISION_MODE_NO_BOUNDARY now works properly for non-manifold edges.\n-   CMake target 'uninstall' is not defined if it already exists.\n-   Embree no longer reads the .embree3 config files, thus all configuration has\n    to get passed through the config string to rtcNewDevice.\n-   Releases upgrade to Intel® TBB 2021.2.0 and Intel® ISPC 1.15.0\n-   Intel® TBB dll is automatically copied into build folder after build on windows.\n\n### Embree 3.12.2\n-   Fixed wrong uv and Ng for grid intersector in robust mode for AVX.\n-   Removed optimizations for Knights Landing.\n-   Upgrading release builds to use Intel® oneTBB 2021.1.1\n\n### Embree 3.12.1\n\n-   Changed default frequency level to SIMD128 for Skylake, Cannon Lake, Comet Lake and Tiger Lake CPUs.\n    This change typically improves performance for renderers that just use SSE by maintaining higher\n    CPU frequencies. In case your renderer is AVX optimized you can get higher ray tracing performance\n    by configuring the frequency level to simd256 through passing frequency_level=simd256 to rtcNewDevice.\n\n### Embree 3.12.0\n\n-   Added linear cone curve geometry support. In this mode a real geometric surface for curves\n    with linear basis is rendered using capped cones.  They are discontinuous at edge boundaries.\n-   Enabled fast two level builder for instances when low quality build is requested.\n-   Bugfix for BVH build when geometries got disabled.\n-   Added EMBREE_BACKFACE_CULLING_CURVES cmake option.  This allows for a cheaper round\n    linear curve intersection when correct internal tracking and back hits are not required.\n    The new cmake option defaults to OFF.\n-   User geometries with invalid bounds with lower>upper in some dimension will be ignored.\n-   Increased robustness for grid interpolation code and fixed returned out of range u/v\n    coordinates for grid primitive.\n-   Fixed handling of motion blur time range for sphere, discs, and oriented disc geometries.\n-   Fixed missing model data in releases.\n-   Ensure compatibility to newer versions of Intel® oneTBB.\n-   Motion blur BVH nodes no longer store NaN values.\n\n### Embree 3.11.0\n\n-   Round linear curves now automatically check for the existence of left and right\n    connected segments if the flags buffer is empty.  Left segments exist if the\n    segment(id-1) + 1 == segment(id) and similarly for right segments.\n-   Implemented the min-width feature for curves and points, which allows to increase the\n    radius in a distance dependent way, such that the curve or points thickness is n pixels wide.\n-   Round linear curves are closed now also at their start.\n-   Embree no longer supports Visual Studio 2013 starting with this release.\n-   Bugfix in subdivision tessellation level assignment for non-quad base primitives\n-   Small meshes are directly added to top level build phase of two-level builder to reduce memory consumption.\n-   Enabled fast two level builder for user geometries when low quality build is requested.\n\n### Embree 3.10.0\n\n-   Added EMBREE_COMPACT_POLYS CMake option which enables double indexed triangle and quad\n    leaves to reduce memory consumption in compact mode by an additional 40% at about\n    15% performance impact. This new mode is disabled by default.\n-   Compile fix for Intel® oneTBB 2021.1-beta05\n-   Releases upgrade to Intel® TBB 2020.2\n-   Compile fix for Intel® ISPC v1.13.0\n-   Adding RPATH to libembree.so in releases\n-   Increased required CMake version to 3.1.0\n-   Made instID member for array of pointers ray stream layout optional again.\n\n### Embree 3.9.0\n\n-   Added round linear curve geometry support. In this mode a real geometric surface for curves\n    with linear basis is rendered using capped cones with spherical filling between\n    the curve segments.\n-   Added rtcGetSceneDevice API function, that returns the device a scene got created in.\n-   Improved performance of round curve rendering by up to 1.8x.\n-   Bugfix to sphere intersection filter invocation for back hit.\n-   Fixed wrong assertion that triggered for invalid curves which anyway get filtered out.\n-   RelWithDebInfo mode no longer enables assertions.\n-   Fixed an issue in FindTBB.cmake that caused compile error with Debug build under Linux.\n-   Embree releases no longer provide RPMs for Linux. Please use the RPMs coming with the package\n    manager of your Linux distribution.\n\n### Embree 3.8.0\n\n-   Added collision detection support for user geometries (see rtcCollide API function)\n-   Passing geomID to user geometry callbacks.\n-   Bugfix in AVX512VL codepath for rtcIntersect1\n-   For sphere geometries the intersection filter gets now invoked for\n    front and back hit.\n-   Fixed some bugs for quaternion motion blur.\n-   RTCRayQueryContext always non-const in Embree API\n-   Made RTCHit aligned to 16 bytes in Embree API\n\n### New Features in Embree 3.7.0\n-   Added quaternion motion blur for correct interpolation of rotational transformations.\n-   Fixed wrong bounding calculations when a motion blurred instance did\n    instantiate a motion blurred scene.\n-   In robust mode the depth test consistently uses tnear <= t <= tfar now in order\n    to robustly continue traversal at a previous hit point\n    in a way that guarantees reaching all hits, even hits at the same place.\n-   Fixed depth test in robust mode to be precise at tnear and tfar.\n-   Added next_hit tutorial to demonstrate robustly collecting all hits\n    along a ray using multiple ray queries.\n-   Implemented robust mode for curves. This has a small performance impact but\n    fixes bounding problems with flat curves.\n-   Improved quality of motion blur BVH by using linear bounds during binning.\n-   Implemented issue with motion blur builder where number of time segments\n    for SAH heuristic were counted wrong due to some numerical issues.\n-   Fixed an accuracy issue with rendering very short fat curves.\n-   rtcCommitScene can now get called during rendering from multiple threads\n    to lazily build geometry. When Intel® TBB is used this causes a much lower overhead\n    than using rtcJoinCommitScene.\n-   Geometries can now get attached to multiple scenes at the same time, which\n    simplifies mapping general scene graphs to API.\n-   Updated to Intel® TBB 2019.9 for release builds.\n-   Fixed a bug in the BVH builder for Grid geometries.\n-   Added macOS Catalina support to Embree releases.\n\n### New Features in Embree 3.6.1\n-   Restored binary compatibility between Embree 3.6 and 3.5 when single-level instancing is used.\n-   Fixed bug in subgrid intersector\n-   Removed point query alignment in Intel® ISPC header\n\n### New Features in Embree 3.6\n-   Added Catmull-Rom curve types.\n-   Added support for multi-level instancing.\n-   Added support for point queries.\n-   Fixed a bug preventing normal oriented curves being used unless timesteps were\n    specified.\n-   Fixed bug in external BVH builder when configured for dynamic build.\n-   Added support for new config flag \"user_threads=N\" to device initialization\n    which sets the number of threads used by Intel® TBB but created by the user.\n-   Fixed automatic vertex buffer padding when using rtcSetNewGeometry API function.\n\n### New Features in Embree 3.5.2\n-   Added EMBREE_API_NAMESPACE cmake option that allows to put all Embree API functions\n    inside a user defined namespace.\n-   Added EMBREE_LIBRARY_NAME cmake option that allows to rename the Embree library.\n-   When Embree is compiled as static library, EMBREE_STATIC_LIB has no longer to get\n    defined before including the Embree API headers.\n-   Added CPU frequency_level device configuration to allow an application to specify the\n    frequency level it wants to run on. This forces Embree to not use optimizations that\n    may reduce the CPU frequency below that level. By default Embree is configured to the\n    the AVX-heavy frequency level, thus if the application uses solely non-AVX code, configuring\n    the Embree device with \"frequency_level=simd128\" may give better performance.\n-   Fixed a bug in the spatial split builder which caused it to fail\n    for scenes with more than 2^24 geometries.\n\n### New Features in Embree 3.5.1\n-   Fixed ray/sphere intersector to work also for non-normalized rays.\n-   Fixed self intersection avoidance for ray oriented discs when\n    non-normalized rays were used.\n-   Increased maximal face valence for subdiv patch to 64 and reduced stack size\n    requirement for subdiv patch evaluation.\n\n### New Features in Embree 3.5.0\n-   Changed normal oriented curve definition to fix waving artefacts.\n-   Fixed bounding issue for normal oriented motion blurred curves.\n-   Fixed performance issue with motion blurred point geometry.\n-   Fixed generation of documentation with new pandoc versions.\n\n### New Features in Embree 3.4.0\n-   Added point primitives (spheres, ray-oriented discs, normal-oriented discs).\n-   Fixed crash triggered by scenes with only invalid primitives.\n-   Improved robustness of quad/grid-based intersectors.\n-   Upgraded to Intel® TBB 2019.2 for release builds.\n\n### New Features in Embree 3.3.0\n-   Added support for motion blur time range per geometry. This way geometries\n    can appear and disappear during the camera shutter and time steps do not have\n    to start and end at camera shutter interval boundaries.\n-   Fixed crash with pathtracer when using --triangle-sphere command line.\n-   Fixed crash with pathtracer when using --shader ao command line.\n-   Fixed tutorials showing a black window on macOS 10.14 until moved.\n\n### New Features in Embree 3.2.4\n-   Fixed compile issues with ICC 2019.\n-   Released ZIP files for Windows are now provided in a\n    version linked against Visual Studio 2013 and Visual Studio 2015.\n\n### New Features in Embree 3.2.3\n-   Fixed crash when using curves with RTC_SCENE_FLAG_DYNAMIC\n    combined with RTC_BUILD_QUALITY_MEDIUM.\n\n### New Features in Embree 3.2.2\n-   Fixed intersection distance for unnormalized rays with line segments.\n-   Removed libmmd.dll dependency in release builds for Windows.\n-   Fixed detection of AppleClang compiler under MacOSX.\n\n### New Features in Embree 3.2.1\n-   Bugfix in flat mode for hermite curves.\n-   Added EMBREE_CURVE_SELF_INTERSECTION_AVOIDANCE_FACTOR cmake option to\n    control self intersection avoidance for flat curves.\n-   Performance fix when instantiating motion blurred scenes. The application\n    should best use two (or more) time steps for an instance that instantiates\n    a motion blurred scene.\n-   Fixed AVX512 compile issue with GCC 6.1.1.\n-   Fixed performance issue with rtcGetGeometryUserData when used\n    during rendering.\n-   Bugfix in length of derivatives for grid geometry.\n-   Added BVH8 support for motion blurred curves and lines. For some workloads\n    this increases performance by up to 7%.\n-   Fixed rtcGetGeometryTransform to return the local to world transform.\n-   Fixed bug in multi segment motion blur that caused missing of perfectly\n    axis aligned geometry.\n-   Reduced memory consumption of small scenes by 4x.\n-   Reduced temporal storage of grid builder.\n\n### New Features in Embree 3.2.0\n-   Improved watertightness of robust mode.\n-   Line segments, and other curves are now all contained in a single\n    BVH which improves performance when these are both used in a scene.\n-   Performance improvement of up to 20% for line segments.\n-   Bugfix to Embree2 to Embree3 conversion script.\n-   Added support for Hermite curve basis.\n-   Semantics of normal buffer for normal oriented curves has\n    changed to simplify usage. Please see documentation for details.\n-   Using GLFW and imgui in tutorials.\n-   Fixed floating point exception in static variable initialization.\n-   Fixed invalid memory access in rtcGetGeometryTransform for non-motion\n    blur instances.\n-   Improved self intersection avoidance for flat curves. Transparency rays\n    with tnear set to previous hit distance do not need curve radius\n    based self intersection avoidance as same hit is calculated again. For this\n    reason self intersection avoidance is now only applied to ray origin.\n\n### New Features in Embree 3.1.0\n-   Added new normal-oriented curve primitive for ray tracing of grass-like\n    structures.\n-   Added new grid primitive for ray tracing tessellated and displaced surfaces\n    in very memory efficient manner.\n-   Fixed bug of ribbon curve intersector when derivative was zero.\n-   Installing all static libraries when EMBREE_STATIC_LIB is enabled.\n-   Added API functions to access topology of subdivision mesh.\n-   Reduced memory consumption of instances.\n-   Improved performance of instances by 8%.\n-   Reduced memory consumption of curves by up to 2x.\n-   Up to 5% higher performance on AVX-512 architectures.\n-   Added native support for multiple curve basis functions. Internal\n    basis conversions are no longer performed, which saves additional\n    memory when multiple bases are used.\n-   Fixed issue with non thread safe local static variable initialization\n    in VS2013.\n-   Bugfix in rtcSetNewGeometry. Vertex buffers did not get properly\n    overallocated.\n-   Replaced ImageMagick with OpenImageIO in the tutorials.\n\n### New Features in Embree 3.0.0\n-   Switched to a new version of the API which provides improved\n    flexibility but is not backward compatible. Please see \"Upgrading\n    from Embree 2 to Embree 3\" section of the documentation for upgrade\n    instructions. In particular, we provide a Python script that performs\n    most of the transition work.\n-   User geometries inside an instanced scene and a top-level scene no\n    longer need to handle the instID field of the ray differently. They\n    both just need to copy the context.instID into the ray.instID field.\n-   Support for context filter functions that can be assigned to a ray\n    query.\n-   User geometries can now invoke filter functions using the\n    rtcFilterIntersection and rtcFilterOcclusion calls.\n-   Higher flexibility through specifying build quality per scene and\n    geometry.\n-   Geometry normal uses commonly used right-hand rule from now on.\n-   Added self-intersection avoidance to ribbon curves and lines.\n    Applications do not have to implement self-intersection workarounds\n    for these primitive types anymore.\n-   Added support for 4 billion primitives in a single scene.\n-   Removed the RTC_MAX_USER_VERTEX_BUFFERS and RTC_MAX_INDEX_BUFFERS\n    limitations.\n-   Reduced memory consumption by 192 bytes per instance.\n-   Fixed some performance issues on AVX-512 architectures.\n-   Individual Contributor License Agreement (ICLA) and Corporate\n    Contributor License Agreement (CCLA) no longer required to\n    contribute to the project.\n\n### New Features in Embree 2.17.5\n-   Improved watertightness of robust mode.\n-   Fixed floating point exception in static variable initialization.\n-   Fixed AVX512 compile issue with GCC 6.1.1.\n\n### New Features in Embree 2.17.4\n-   Fixed AVX512 compile issue with GCC 7.\n-   Fixed issue with not thread safe local static variable\n    initialization in VS2013.\n-   Fixed bug in the 4 and 8-wide packet intersection of instances with\n    multi-segment motion blur on AVX-512 architectures.\n-   Fixed bug in rtcOccluded4/8/16 when only AVX-512 ISA was enabled.\n\n### New Features in Embree 2.17.3\n-   Fixed GCC compile warning in debug mode.\n-   Fixed bug of ribbon curve intersector when derivative was zero.\n-   Installing all static libraries when EMBREE_STATIC_LIB is enabled.\n\n### New Features in Embree 2.17.2\n-   Made BVH build of curve geometry deterministic.\n\n### New Features in Embree 2.17.1\n-   Improved performance of occlusion ray packets by up to 50%.\n-   Fixed detection of Clang for CMake 3 under MacOSX\n-   Fixed AVX code compilation issue with GCC 7 compiler caused by\n    explicit use of vzeroupper intrinsics.\n-   Fixed an issue where Clang address sanitizer reported an error in\n    the internal tasking system.\n-   Added fix to compile on 32 bit Linux distribution.\n-   Fixed some wrong relative include paths in Embree.\n-   Improved performance of robust single ray mode by 5%.\n-   Added EMBREE_INSTALL_DEPENDENCIES option (default OFF) to enable\n    installing of Embree dependencies.\n-   Fixed performance regression for occlusion ray streams.\n-   Reduced temporary memory requirements of BVH builder for curves and\n    line segments.\n-   Fixed performance regression for user geometries and packet ray tracing.\n-   Fixed bug where wrong closest hit was reported for very curvy hair segment.\n\n### New Features in Embree 2.17.0\n-   Improved packet ray tracing performance for coherent rays by 10-60%\n    (requires RTC_INTERSECT_COHERENT flag).\n-   Improved ray tracing performance for incoherent rays on\n    AVX-512 architectures by 5%.\n-   Improved ray tracing performance for streams of incoherent rays\n    by 5-15%.\n-   Fixed tbb_debug.lib linking error under Windows.\n-   Fast coherent ray stream and packet code paths now also work in robust mode.\n-   Using less aggressive prefetching for large BVH nodes which\n    results in 1-2% higher ray tracing performance.\n-   Precompiled binaries have stack-protector enabled, except for\n    traversal kernels. BVH builders can be slightly slower due to this\n    change. If you want stack-protectors disabled please turn off\n    EMBREE_STACK_PROTECTOR in cmake and build the binaries yourself.\n-   When enabling ISAs individually, the 8-wide BVH was previously only\n    available when the AVX ISA was also selected. This issue is now\n    fixed, and one can enable only AVX2 and still get best\n    performance by using an 8-wide BVH.\n-   Fixed rtcOccluded1 and rtcOccluded1Ex API functions which were\n    broken in Intel® ISPC.\n-   Providing MSI installer for Windows.\n\n### New Features in Embree 2.16.5\n-   Bugfix in the robust triangle intersector that rarely caused NaNs.\n-   Fixed bug in hybrid traversal kernel when BVH leaf was entered with no\n    active rays. This rarely caused crashes when used with instancing.\n-   Fixed bug introduced in Embree 2.16.2 which caused instancing not to\n    work properly when a smaller than the native SIMD width was\n    used in ray packet mode.\n-   Fixed bug in the curve geometry intersector that caused rendering\n    artefacts for Bézier curves with p0=p1 and/or p2=p3.\n-   Fixed bug in the curve geometry intersector that caused hit results\n    with NaNs to be reported.\n-   Fixed masking bug that caused rare cracks in curve geometry.\n-   Enabled support for SSE2 in precompiled binaries again.\n\n### New Features in Embree 2.16.4\n-   Bugfix in the ribbon intersector for hair primitives. Non-normalized\n    rays caused wrong intersection distance to be reported.\n\n### New Features in Embree 2.16.3\n-   Increased accuracy for handling subdivision surfaces. This fixes\n    cracks when using displacement mapping but reduces performance\n    at irregular vertices.\n-   Fixed a bug where subdivision geometry was not properly updated\n    when modifying only the tessellation rate and vertex array.\n\n### New Features in Embree 2.16.2\n-   Fixed bug that caused NULL ray query context in intersection\n    filter when instancing was used.\n-   Fixed an issue where uv's where outside the triangle (or quad) for\n    very small triangles (or quads). In robust mode we improved the uv\n    calculation to avoid that issue, in fast mode we accept that\n    inconsistency for better performance.\n-   Changed UV encoding for non-quad subdivision patches to\n    allow a subpatch UV range of `[-0.5,1.5[`. Using this new encoding\n    one can use finite differences to calculate derivatives if required.\n    Please adjust your code in case you rely on the old encoding.\n\n### New Features in Embree 2.16.1\n-   Workaround for compile issues with Visual Studio 2017\n-   Fixed bug in subdiv code for static scenes when using tessellation\n    levels larger than 50.\n-   Fixed low performance when adding many geometries to a scene.\n-   Fixed high memory consumption issue when using instances in\n    dynamic scene (by disabling two level builder for user geometries\n    and instances).\n\n### New Features in Embree 2.16.0\n-   Improved multi-segment motion blur support for scenes with\n    different number of time steps per mesh.\n-   New top level BVH builder that improves build times and BVH quality\n    of two-level BVHs.\n-   Added support to enable only a single ISA. Previously code was\n    always compiled for SSE2.\n-   Improved single ray tracing performance for incoherent rays on\n    AVX-512 architectures by 5-10%.\n-   Improved packet/hybrid ray tracing performance for incoherent rays\n    on AVX-512 architectures by 10-30%.\n-   Improved stream ray tracing performance for coherent rays in\n    structure-of-pointers layout by 40-70%.\n-   BVH builder for compact scenes of triangles and quads needs\n    essentially no temporary memory anymore. This doubles the\n    maximal scene size that can be rendered in compact mode.\n-   Triangles no longer store the geometry normal in fast/default mode\n    which reduces memory consumption by up to 20%.\n-   Compact mode uses BVH4 now consistently which reduces memory\n    consumption by up to 10%.\n-   Reduced memory consumption for small scenes (of 10k-100k primitives)\n    and dynamic scenes.\n-   Improved performance of user geometries and instances through BVH8\n    support.\n-   The API supports now specifying the geometry ID of a geometry at\n    construction time. This way matching the geometry ID used by\n    Embree and the application is simplified.\n-   Fixed a bug that would have caused a failure of the BVH builder\n    for dynamic scenes when run on a machine with more then 1000 threads.\n-   Fixed a bug that could have been triggered when reaching the maximal\n    number of mappings under Linux (`vm.max_map_count`). This could have\n    happened when creating a large number of small static scenes.\n-   Added huge page support for Windows and MacOSX (experimental).\n-   Added support for Visual Studio 2017.\n-   Removed support for Visual Studio 2012.\n-   Precompiled binaries now require a CPU supporting at least the\n    SSE4.2 ISA.\n-   We no longer provide precompiled binaries for 32-bit on Windows.\n-   Under Windows one now has to use the platform toolset option in\n    CMake to switch to Clang or the Intel® Compiler.\n-   Fixed a bug for subdivision meshes when using the incoherent scene\n    flag.\n-   Fixed a bug in the line geometry intersection, that caused reporting\n    an invalid line segment intersection with primID -1.\n-   Buffer stride for vertex buffers of different time steps of triangle\n    and quad meshes have to be identical now.\n-   Fixed a bug in the curve geometry intersection code when passed a\n    perfect cylinder.\n\n### New Features in Embree 2.15.0\n\n-   Added `rtcCommitJoin` mode that allows thread to join a build\n    operation. When using the internal tasking system this allows\n    Embree to solely use the threads that called `rtcCommitJoin` to\n    build the scene, while previously also normal worker threads\n    participated in the build. You should no longer use `rtcCommit`\n    to join a build.\n-   Added `rtcDeviceSetErrorFunction2` API call, which sets an error\n    callback function which additionally gets passed a user provided\n    pointer (`rtcDeviceSetErrorFunction` is now deprecated).\n-   Added `rtcDeviceSetMemoryMonitorFunction2` API call, which sets a\n    memory monitor callback function which additionally get passed a\n    user provided pointer. (`rtcDeviceSetMemoryMonitorFunction` is now\n    deprecated).\n-   Build performance for hair geometry improved by up to 2×.\n-   Standard BVH build performance increased by 5%.\n-   Added API extension to use internal Morton-code based builder, the\n    standard binned-SAH builder, and the spatial split-based SAH builder.\n-   Added support for BSpline hair and curves. Embree uses\n    either the Bézier or BSpline basis internally, and converts other\n    curves, which requires more memory during rendering. For reduced\n    memory consumption set the `EMBREE_NATIVE_SPLINE_BASIS` to the basis\n    your application uses (which is set to `BEZIER` by default).\n-   Setting the number of threads through `tbb::taskscheduler_init`\n    object on the application side is now working properly.\n-   Windows and Linux releases are build using AVX-512 support.\n-   Implemented hybrid traversal for hair and line segments for\n    improved ray packet performance.\n-   AVX-512 code compiles with Clang 4.0.0\n-   Fixed crash when ray packets were disabled in CMake.\n\n### New Features in Embree 2.14.0\n\n-   Added `ignore_config_files` option to init flags that allows the\n    application to ignore Embree configuration files.\n-   Face-varying interpolation is now supported for subdivision surfaces.\n-   Up to 16 user vertex buffers are supported for vertex\n    attribute interpolation.\n-   Deprecated `rtcSetBoundaryMode` function, please use the new\n    `rtcSetSubdivisionMode` function.\n-   Added `RTC_SUBDIV_PIN_BOUNDARY` mode for handling boundaries of\n    subdivision meshes.\n-   Added `RTC_SUBDIV_PIN_ALL` mode to enforce linear interpolation\n    for subdivision meshes.\n-   Optimized object generation performance for dynamic scenes.\n-   Reduced memory consumption when using lots of small dynamic objects.\n-   Fixed bug for subdivision surfaces using low tessellation rates.\n-   Hair geometry now uses a new ribbon intersector that intersects with\n    ray-facing quads. The new intersector also returns the v-coordinate\n    of the hair intersection, and fixes artefacts at junction points\n    between segments, at the cost of a small performance hit.\n-   Added `rtcSetBuffer2` function, that additionally gets the number of\n    elements of a buffer. In dynamic scenes, this function allows to\n    quickly change buffer sizes, making it possible to change the number\n    of primitives of a mesh or the number of crease features for\n    subdivision surfaces.\n-   Added simple 'viewer_anim' tutorial for rendering key\n    frame animations and 'buildbench' for measuring BVH (re-)build\n    performance for static and dynamic scenes.\n-   Added more AVX-512 optimizations for future architectures.\n\n### New Features in Embree 2.13.0\n\n-   Improved performance for compact (but not robust) scenes.\n-   Added robust mode for motion blurred triangles and quads.\n-   Added fast dynamic mode for user geometries.\n-   Up to 20% faster BVH build performance on the second generation\n    Intel® Xeon Phi™ processor codenamed Knights Landing.\n-   Improved quality of the spatial split builder.\n-   Improved performance for coherent streams of ray packets (SOA\n    layout), e.g. for fast primary visibility.\n-   Various bug fixes in tessellation cache, quad-based spatial\n    split builder, etc.\n\n### New Features in Embree 2.12.0\n\n-   Added support for multi-segment motion blur for all primitive types.\n-   API support for stream of pointers to single rays (`rtcIntersect1Mp`\n    and `rtcOccluded1Mp`)\n-   Improved BVH refitting performance for dynamic scenes.\n-   Improved high-quality mode for quads (added spatial split builder\n    for quads)\n-   Faster dynamic scenes for triangle and quad-based meshes on AVX2\n    enabled machines.\n-   Performance and correctness bugfix in optimization for streams of\n    coherent (single) rays.\n-   Fixed large memory consumption (issue introduced in Embree v2.11.0).\n    If you use Embree v2.11.0 please upgrade to Embree v2.12.0.\n-   Reduced memory consumption for dynamic scenes containing small\n    meshes.\n-   Added support to start and affinitize Intel® TBB worker threads by passing\n    \"`start_threads=1,set_affinity=1`\" to `rtcNewDevice`. These settings\n    are recommended on systems with a high thread count.\n-   `rtcInterpolate2` can now be called within a displacement shader.\n-   Added initial support for Microsoft's Parallel Pattern Library (PPL)\n    as tasking system alternative (for optimal performance Intel® TBB is\n    highly recommended).\n-   Updated to Intel® TBB 2017 which is released under the Apache v2.0 license.\n-   Dropped support for Visual Studio 2012 Win32 compiler. Visual Studio\n    2012 x64 is still supported.\n\n### New Features in Embree 2.11.0\n\n-   Improved performance for streams of coherent (single) rays flagged\n    with `RTC_INTERSECT_COHERENT`. For such coherent ray streams, e.g.\n    primary rays, the performance typically improves by 1.3-2×.\n-   New spatial split BVH builder for triangles, which is 2-6× faster\n    than the previous version and more memory conservative.\n-   Improved performance and scalability of all standard BVH builders on\n    systems with large core counts.\n-   Fixed `rtcGetBounds` for motion blur scenes.\n-   Thread affinity is now on by default when running on the latest\n    Intel® Xeon Phi™ processor.\n-   Added AVX-512 support for future Intel® Xeon processors.\n\n### New Features in Embree 2.10.0\n\n-   Added a new curve geometry which renders the sweep surface of a\n    circle along a Bézier curve.\n-   Intersection filters can update the `tfar` ray distance.\n-   Geometry types can get disabled at compile time.\n-   Modified and extended the ray stream API.\n-   Added new callback mechanism for the ray stream API.\n-   Improved ray stream performance (up to 5-10%).\n-   Up to 20% faster morton builder on machines with large core counts.\n-   Lots of optimizations for the second generation Intel® Xeon Phi™\n    processor codenamed Knights Landing.\n-   Added experimental support for compressed BVH nodes (reduces node\n    size to 56-62% of uncompressed size). Compression introduces a\n    typical performance overhead of ~10%.\n-   Bugfix in backface culling mode. We do now properly cull the\n    backfaces and not the frontfaces.\n-   Feature freeze for the first generation Intel® Xeon Phi™ coprocessor\n    codenamed Knights Corner. We will still maintain and add bug fixes\n    to Embree v2.9.0, but Embree 2.10 and future versions will no longer\n    support it.\n\n### New Features in Embree 2.9.0\n\n-   Improved shadow ray performance (10-100% depending on the scene).\n-   Added initial support for ray streams (10-30% higher performance\n    depending on ray coherence in the stream).\n-   Added support to calculate second order derivatives using the\n    `rtcInterpolate2` function.\n-   Changed the parametrization for triangular subdivision faces to\n    the same scheme used for pentagons.\n-   Added support to query the Embree configuration using the\n    `rtcDeviceGetParameter` function.\n\n### New Features in Embree 2.8.1\n\n-   Added support for setting per geometry tessellation rate (supported\n    for subdivision and Bézier geometries).\n-   Added support for motion blurred instances.\n\n### New Features in Embree 2.8.0\n\n-   Added support for line segment geometry.\n-   Added support for quad geometry (replaces triangle-pairs feature).\n-   Added support for linear motion blur of user geometries.\n-   Improved performance through AVX-512 optimizations.\n-   Improved performance of lazy scene build (when using Intel® TBB 4.4 update\n    2).\n-   Improved performance through huge page support under linux.\n\n### New Features in Embree 2.7.1\n\n-   Internal tasking system supports cancellation of build operations.\n-   Intel® ISPC mode for robust and compact scenes got significantly faster\n    (implemented hybrid traversal for bvh4.triangle4v and\n    bvh4.triangle4i).\n-   Hair rendering got faster as we fixed some issues with the SAH\n    heuristic cost factors.\n-   BVH8 got slight faster for single ray traversal (improved sorting\n    when hitting more than 4 boxes).\n-   BVH build performance got up to 30% faster on CPUs with high core\n    counts (improved parallel partition code).\n-   High quality build mode again working properly (spatial splits had\n    been deactivated in v2.7.0 due to some bug).\n-   Support for merging two adjacent triangles sharing a common edge\n    into a triangle-pair primitive (can reduce memory consumption and\n    BVH build times by up to 50% for mostly quad-based input meshes).\n-   Internal cleanups (reduced number of traversal kernels by more\n    templating).\n-   Reduced stack size requirements of BVH builders.\n-   Fixed crash for dynamic scenes, triggered by deleting all\n    geometries from the scene.\n\n### New Features in Embree 2.7.0\n\n-   Added device concept to Embree to allow different components of an\n    application to use Embree without interfering with each other.\n-   Fixed memory leak in twolevel builder used for dynamic scenes.\n-   Fixed bug in tessellation cache that caused crashes for subdivision\n    surfaces.\n-   Fixed bug in internal task scheduler that caused deadlocks when\n    using `rtcCommitThread`.\n-   Improved hit-distance accuracy for thin triangles in robust mode.\n-   Added support to disable ray packet support in cmake.\n\n### New Features in Embree 2.6.2\n\n-   Fixed bug triggered by instantiating motion blur geometry.\n-   Fixed bug in hit UV coordinates of static subdivision geometries.\n-   Performance improvements when only changing tessellation levels for\n    subdivision geometry per frame.\n-   Added ray packet intersectors for subdivision geometry, resulting in\n    improved performance for coherent rays.\n-   Reduced virtual address space usage for static geometries.\n-   Fixed some AVX2 code paths when compiling with GCC or Clang.\n-   Bugfix for subdiv patches with non-matching winding order.\n-   Bugfix in ISA detection of AVX-512.\n\n### New Features in Embree 2.6.1\n\n-   Major performance improvements for ray tracing subdivision surfaces,\n    e.g. up to 2× faster for scenes where only the tessellation levels\n    are changing per frame, and up to 3× faster for scenes with lots of\n    crease features\n-   Initial support for architectures supporting the new 16-wide AVX-512\n    ISA\n-   Implemented intersection filter callback support for subdivision\n    surfaces\n-   Added `RTC_IGNORE_INVALID_RAYS` CMake option which makes the ray\n    intersectors more robust against full tree traversal caused by\n    invalid ray inputs (e.g. INF, NaN, etc)\n\n### New Features in Embree 2.6.0\n\n-   Added `rtcInterpolate` function to interpolate per vertex\n    attributes\n-   Added `rtcSetBoundaryMode` function that can be used to select the\n    boundary handling for subdivision surfaces\n-   Fixed a traversal bug that caused rays with very small ray\n    direction components to miss geometry\n-   Performance improvements for the robust traversal mode\n-   Fixed deadlock when calling `rtcCommit` from multiple\n    threads on same scene\n\n### New Features in Embree 2.5.1\n\n-   On dual socket workstations, the initial BVH build performance\n    almost doubled through a better memory allocation scheme\n-   Reduced memory usage for subdivision surface objects with crease\n    features\n-   `rtcCommit` performance is robust against unset \"flush to zero\" and\n    \"denormals are zero\" flags. However, enabling these flags in your\n    application is still recommended\n-   Reduced memory usage for subdivision surfaces with borders and\n    infinitely sharp creases\n-   Lots of internal cleanups and bug fixes for both Intel® Xeon® and\n    Intel® Xeon Phi™\n\n### New Features in Embree 2.5.0\n\n-   Improved hierarchy build performance on both Intel Xeon and Intel\n    Xeon Phi\n-   Vastly improved tessellation cache for ray tracing subdivision\n    surfaces\n-   Added `rtcGetUserData` API call to query per geometry user pointer\n    set through `rtcSetUserData`\n-   Added support for memory monitor callback functions to track and\n    limit memory consumption\n-   Added support for progress monitor callback functions to track build\n    progress and cancel long build operations\n-   BVH builders can be used to build user defined hierarchies inside\n    the application (see tutorial [BVH Builder])\n-   Switched to Intel® TBB as default tasking system on Xeon to get even faster\n    hierarchy build times and better integration for applications that\n    also use Intel® TBB\n-   `rtcCommit` can get called from multiple Intel® TBB threads to join the\n    hierarchy build operations\n\n### New Features in Embree 2.4\n\n-   Support for Catmull Clark subdivision surfaces (triangle/quad base\n    primitives)\n-   Support for vector displacements on Catmull Clark subdivision\n    surfaces\n-   Various bug fixes (e.g. 4-byte alignment of vertex buffers works)\n\n### New Features in Embree 2.3.3\n\n-   BVH builders more robustly handle invalid input data (Intel Xeon\n    processor family)\n-   Motion blur support for hair geometry (Xeon)\n-   Improved motion blur performance for triangle geometry (Xeon)\n-   Improved robust ray tracing mode (Xeon)\n-   Added `rtcCommitThread` API call for easier integration into\n    existing tasking systems (Xeon and Intel Xeon Phi coprocessor)\n-   Added support for recording and replaying all\n    `rtcIntersect`/`rtcOccluded` calls (Xeon and Xeon Phi)\n\n### New Features in Embree 2.3.2\n\n-   Improved mixed AABB/OBB-BVH for hair geometry (Xeon Phi)\n-   Reduced amount of pre-allocated memory for BVH builders (Xeon Phi)\n-   New 64-bit Morton code-based BVH builder (Xeon Phi)\n-   (Enhanced) Morton code-based BVH builders use now tree rotations to\n    improve BVH quality (Xeon Phi)\n-   Bug fixes (Xeon and Xeon Phi)\n\n### New Features in Embree 2.3.1\n\n-   High quality BVH mode improves spatial splits which result in up to\n    30% performance improvement for some scenes (Xeon)\n-   Compile time enabled intersection filter functions do not reduce\n    performance if no intersection filter is used in the scene (Xeon and\n    Xeon Phi)\n-   Improved ray tracing performance for hair geometry by \\>20% on Xeon\n    Phi. BVH for hair geometry requires 20% less memory\n-   BVH8 for AVX/AVX2 targets improves performance for single ray\n    tracing on Haswell by up to 12% and by up to 5% for hybrid (Xeon)\n-   Memory conservative BVH for Xeon Phi now uses BVH node quantization\n    to lower memory footprint (requires half the memory footprint of the\n    default BVH)\n\n### New Features in Embree 2.3\n\n-   Support for ray tracing hair geometry (Xeon and Xeon Phi)\n-   Catching errors through error callback function\n-   Faster hybrid traversal (Xeon and Xeon Phi)\n-   New memory conservative BVH for Xeon Phi\n-   Faster Morton code-based builder on Xeon\n-   Faster binned-SAH builder on Xeon Phi\n-   Lots of code cleanups/simplifications/improvements (Xeon and Xeon\n    Phi)\n\n### New Features in Embree 2.2\n\n-   Support for motion blur on Xeon Phi\n-   Support for intersection filter callback functions\n-   Support for buffer sharing with the application\n-   Lots of AVX2 optimizations, e.g. \\~20% faster 8-wide hybrid\n    traversal\n-   Experimental support for 8-wide (AVX/AVX2) and 16-wide BVHs (Xeon\n    Phi)\n\n### New Features in Embree 2.1\n\n-   New future proof API with a strong focus on supporting dynamic\n    scenes\n-   Lots of optimizations for 8-wide AVX2 (Haswell architecture)\n-   Automatic runtime code selection for SSE, AVX, and AVX2\n-   Support for user-defined geometry\n-   New and improved BVH builders:\n    -   Fast adaptive Morton code-based builder (without SAH-based\n        top-level rebuild)\n    -   Both the SAH and Morton code-based builders got faster (Xeon\n        Phi)\n    -   New variant of the SAH-based builder using triangle pre-splits\n        (Xeon Phi)\n\n### New Features in Embree 2.0\n\n-   Support for the Intel® Xeon Phi™ coprocessor platform\n-   Support for high-performance \"packet\" kernels on SSE, AVX, and Xeon\n    Phi\n-   Integration with the Intel® Implicit SPMD Program Compiler (Intel® ISPC)\n-   Instantiation and fast BVH reconstruction\n-   Example photo-realistic rendering engine for both C++ and Intel® ISPC\n\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 24.326171875,
          "content": "## Copyright 2009-2021 Intel Corporation\n## SPDX-License-Identifier: Apache-2.0\n\nCMAKE_MINIMUM_REQUIRED(VERSION 3.5)\n\nSET(EMBREE_VERSION_MAJOR 4)\nSET(EMBREE_VERSION_MINOR 3)\nSET(EMBREE_VERSION_PATCH 3)\nSET(EMBREE_VERSION_NOTE \"\")\n\nSET(EMBREE_VERSION ${EMBREE_VERSION_MAJOR}.${EMBREE_VERSION_MINOR}.${EMBREE_VERSION_PATCH})\nMATH(EXPR EMBREE_VERSION_NUMBER \"10000*${EMBREE_VERSION_MAJOR} + 100*${EMBREE_VERSION_MINOR} + ${EMBREE_VERSION_PATCH}\")\nSET(CPACK_RPM_PACKAGE_RELEASE 1)\n\nPROJECT(embree${EMBREE_VERSION_MAJOR})\nSET(EMBREE_PROJECT_COMPILATION ON)\n\ninclude(CMakeDependentOption)\n\n# We use our own strip tool on macOS to sign during install. This is required as CMake modifies RPATH of the binary during install.\nIF (APPLE AND EMBREE_SIGN_FILE)\n  SET(EMBREE_STRIP ${CMAKE_STRIP})\n  SET(CMAKE_STRIP \"${PROJECT_BINARY_DIR}/post_install_target.sh\")\n  CONFIGURE_FILE(scripts/post_install_target.sh.in \"${PROJECT_BINARY_DIR}/post_install_target.sh\" @ONLY)\nENDIF()\n\nMACRO (SIGN_TARGET target)\n  IF (EMBREE_SIGN_FILE)\n    IF (WIN32)\n      # on Windows we sign and do not strip as debug symbols not included in binary\n      ADD_CUSTOM_COMMAND(TARGET ${target} POST_BUILD\n        COMMAND ${EMBREE_SIGN_FILE} $<TARGET_FILE:${target}>)\n    ELSEIF (APPLE)\n      # on MacOSX we strip and sign here for testing purposes but also during install, as CMake modifies binary during install\n      ADD_CUSTOM_COMMAND(TARGET ${target} POST_BUILD\n        COMMAND ${EMBREE_STRIP} -x $<TARGET_FILE:${target}>\n        COMMAND ${EMBREE_SIGN_FILE} -o runtime -e \"${CMAKE_SOURCE_DIR}/common/cmake/embree.entitlements\" $<TARGET_FILE:${target}>)\n    ELSE()\n      # on Linux signing of binaries is not supported and stripping is done during install\n    ENDIF()\n  ENDIF()\nENDMACRO()\n\n# find git version\nIF(EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/.git\")\n  FIND_PACKAGE(Git)\n  IF(GIT_FOUND)\n    EXECUTE_PROCESS(\n      COMMAND ${GIT_EXECUTABLE} rev-parse HEAD\n      WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}\"\n      OUTPUT_VARIABLE \"EMBREE_HASH\"\n      ERROR_QUIET\n      OUTPUT_STRIP_TRAILING_WHITESPACE)\n  ELSE()\n    SET(EMBREE_HASH 0)\n  ENDIF()\nENDIF()\n\nIF(COMMAND cmake_policy)\n  if (POLICY CMP0003)\n    cmake_policy(SET CMP0003 NEW)\n  endif()\n  if (POLICY CMP0042)\n    cmake_policy(SET CMP0042 NEW)\n  endif()\n  if(POLICY CMP0072)\n    cmake_policy(SET CMP0072 NEW)\n  endif()\n  if(POLICY CMP0022)\n    cmake_policy(SET CMP0022 NEW)\n  endif()\n  if(POLICY CMP0074)\n    cmake_policy(SET CMP0074 NEW)\n  endif()\n  if(POLICY CMP0135)\n    cmake_policy(SET CMP0135 NEW)\n  endif()\n  if(POLICY CMP0057)\n    cmake_policy(SET CMP0057 NEW)\n  endif()\nENDIF()\n\nMARK_AS_ADVANCED(CMAKE_BACKWARDS_COMPATIBILITY)\nMARK_AS_ADVANCED(EXECUTABLE_OUTPUT_PATH)\nMARK_AS_ADVANCED(LIBRARY_OUTPUT_PATH)\n\nMARK_AS_ADVANCED(CMAKE_OSX_ARCHITECTURES)\nMARK_AS_ADVANCED(CMAKE_OSX_DEPLOYMENT_TARGET)\nMARK_AS_ADVANCED(CMAKE_OSX_SYSROOT)\nMARK_AS_ADVANCED(CLEAR CMAKE_CXX_COMPILER)\n\nSET(CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/common/cmake\" ${CMAKE_MODULE_PATH})\n\nINCLUDE(test)\n\nset(BUILD_DOC OFF CACHE INTERNAL \"build documentation (internal only)\")\nIF (BUILD_DOC)\n  ADD_SUBDIRECTORY(doc)\nENDIF()\n\nOPTION(EMBREE_TUTORIALS    \"Enable to build Embree tutorials\" ON)\n\n##############################################################\n# Embree configuration\n##############################################################\n\nGET_PROPERTY(SHARED_LIBS_SUPPORTED GLOBAL PROPERTY TARGET_SUPPORTS_SHARED_LIBS)\nIF(SHARED_LIBS_SUPPORTED)\n  OPTION(EMBREE_STATIC_LIB \"Build Embree as a static library.\")\n  MARK_AS_ADVANCED(CLEAR EMBREE_STATIC_LIB)\nELSE()\n  SET(EMBREE_STATIC_LIB ON CACHE BOOL \"Build Embree as a static library.\" FORCE)\n  MARK_AS_ADVANCED(EMBREE_STATIC_LIB)\nENDIF()\nIF (EMBREE_STATIC_LIB)\n  SET(EMBREE_LIB_TYPE STATIC)\n  ADD_DEFINITIONS(-DEMBREE_STATIC_LIB)\nELSE()\n  SET(EMBREE_LIB_TYPE SHARED)\nENDIF()\n\nOPTION(EMBREE_ISPC_SUPPORT \"Build Embree with support for ISPC applications.\" OFF)\nIF (EMSCRIPTEN)\n  SET(EMBREE_ISPC_SUPPORT OFF CACHE BOOL \"Build Embree with support for ISPC applications.\" FORCE)\nENDIF()\n\nSET(EMBREE_API_NAMESPACE \"\" CACHE STRING \"C++ namespace to put API symbols into.\")\nSET(EMBREE_LIBRARY_NAME  \"embree${EMBREE_VERSION_MAJOR}\" CACHE STRING \"Name of the embree library file (default is embree${EMBREE_VERSION_MAJOR})\")\n\nIF (EMBREE_API_NAMESPACE AND EMBREE_ISPC_SUPPORT)\n   MESSAGE(FATAL_ERROR \"You cannot enable ISPC when EMBREE_API_NAMESPACE is used.\")\nENDIF()\n\n##############################################################################\n# Configurations (add configurations also to common/cmake/embree-config.cmake)\n\nOPTION(EMBREE_ZIP_MODE \"Create Embree ZIP package\" ON)\nMARK_AS_ADVANCED(EMBREE_ZIP_MODE)\n\nOPTION(EMBREE_INSTALL_DEPENDENCIES \"Install Embree dependencies in binary packages and install\" OFF)\nMARK_AS_ADVANCED(EMBREE_INSTALL_DEPENDENCIES)\n\nOPTION(EMBREE_STAT_COUNTERS \"Enables statistic counters.\")\nOPTION(EMBREE_STACK_PROTECTOR \"When enabled Embree compiles with stack protection against return address overrides.\" OFF)\n\nIF (NOT APPLE)\n  OPTION(EMBREE_SYCL_SUPPORT \"Enables SYCL GPU support.\" OFF)\nENDIF()\nCMAKE_DEPENDENT_OPTION(EMBREE_SYCL_LARGEGRF \"Enables SYCL large GRF support.\" OFF \"EMBREE_SYCL_SUPPORT\" OFF)\nCMAKE_DEPENDENT_OPTION(EMBREE_SYCL_DBG \"Enables DPC++ debug info.\" OFF \"EMBREE_SYCL_SUPPORT\" OFF)\nCMAKE_DEPENDENT_OPTION(EMBREE_SYCL_GEOMETRY_CALLBACK  \"Enabled geometry callbacks which are disabled by default for SYCL.\" OFF  \"EMBREE_SYCL_SUPPORT\" OFF)\n\nMARK_AS_ADVANCED(EMBREE_SYCL_LARGEGRF)\nMARK_AS_ADVANCED(EMBREE_SYCL_DBG)\nMARK_AS_ADVANCED(EMBREE_SYCL_GEOMETRY_CALLBACK)\n\nIF (EMBREE_SYCL_GEOMETRY_CALLBACK)\n  message(WARNING \"Enabling EMBREE_SYCL_GEOMETRY_CALLBACK is experimental and may result in poor performance.\")\nENDIF()\n\nIF (EMBREE_SYCL_SUPPORT)\n  ADD_DEFINITIONS(\"-DEMBREE_SYCL_SUPPORT\")  # FIXME: only use define from rtcore_config.h\nENDIF()\n\nCMAKE_DEPENDENT_OPTION(EMBREE_SYCL_RT_SIMULATION \"Using hardware simulation\" OFF \"EMBREE_SYCL_SUPPORT\" OFF)\nMARK_AS_ADVANCED(EMBREE_SYCL_RT_SIMULATION)\nIF (EMBREE_SYCL_RT_SIMULATION AND NOT EMBREE_SYCL_RT_VALIDATION_API AND EMBREE_SYCL_IMPLICIT_DISPATCH_GLOBALS)\n  MESSAGE(FATAL_ERROR \"Using EMBREE_SYCL_RT_SIMULATION requires EMBREE_SYCL_RT_VALIDATION_API=ON and EMBREE_SYCL_IMPLICIT_DISPATCH_GLOBALS=OFF\")\nENDIF()\nIF (EMBREE_SYCL_RT_SIMULATION)\n  ADD_DEFINITIONS(\"-DEMBREE_SYCL_RT_SIMULATION\")\nENDIF()\n\nCMAKE_DEPENDENT_OPTION(EMBREE_SYCL_RT_VALIDATION_API \"Use rt_validation API instead of IGC provided rt_production API\" OFF \"EMBREE_SYCL_SUPPORT\" OFF)\nIF (EMBREE_SYCL_RT_VALIDATION_API)\n  ADD_DEFINITIONS(\"-DEMBREE_SYCL_RT_VALIDATION_API\")\nENDIF()\n\nCMAKE_DEPENDENT_OPTION(EMBREE_SYCL_IMPLICIT_DISPATCH_GLOBALS \"Using L0 allocated Dispatch Globals\" ON \"EMBREE_SYCL_RT_VALIDATION_API\" OFF)\nIF (EMBREE_SYCL_RT_VALIDATION_API AND NOT EMBREE_SYCL_IMPLICIT_DISPATCH_GLOBALS)\n  ADD_DEFINITIONS(\"-DEMBREE_SYCL_ALLOC_DISPATCH_GLOBALS\")\nENDIF()\n\nMARK_AS_ADVANCED(EMBREE_SYCL_RT_VALIDATION_API)\nMARK_AS_ADVANCED(EMBREE_SYCL_IMPLICIT_DISPATCH_GLOBALS)\n\nIF (EMBREE_SYCL_SUPPORT)\n  SET(EMBREE_SYCL_AOT_DEVICES \"none\" CACHE STRING \"SYCL devices to use for AOT compilation\")\n  SET_PROPERTY(CACHE EMBREE_SYCL_AOT_DEVICES PROPERTY STRINGS none dg2 pvc XE_HPG_CORE XE_HPC_CORE)\n  \n  SET(EMBREE_SYCL_AOT_DEVICE_REVISION 0)\n  IF (EMBREE_SYCL_AOT_DEVICES STREQUAL \"dg2\")\n    SET(EMBREE_SYCL_AOT_DEVICE_REVISION 4)  # FIXME: bug workaround should get removed\n  ENDIF()\nENDIF()\n\nCMAKE_DEPENDENT_OPTION(EMBREE_SYCL_L0_RTAS_BUILDER \"Enable Level Zero RTAS builder\" ON \"EMBREE_SYCL_SUPPORT\" OFF)\nIF (EMBREE_SYCL_L0_RTAS_BUILDER)\n  ADD_DEFINITIONS(\"-DEMBREE_SYCL_L0_RTAS_BUILDER\")\nENDIF()\n\nOPTION(EMBREE_RAY_MASK \"Enables ray mask support.\" ON)\nOPTION(EMBREE_BACKFACE_CULLING \"Enables backface culling.\")\nOPTION(EMBREE_BACKFACE_CULLING_CURVES \"Enables backface culling for curve primitives.\" OFF)\nOPTION(EMBREE_BACKFACE_CULLING_SPHERES \"Enables backface culling for sphere primitives.\" OFF)\n\nOPTION(EMBREE_FILTER_FUNCTION \"Enables filter functions.\" ON)\nOPTION(EMBREE_IGNORE_INVALID_RAYS \"Ignores invalid rays.\" OFF) # FIXME: enable by default?\nOPTION(EMBREE_COMPACT_POLYS \"Enables double indexed poly layout.\" OFF)\nOPTION(EMBREE_GEOMETRY_TRIANGLE \"Enables support for triangle geometries.\" ON)\nOPTION(EMBREE_GEOMETRY_QUAD \"Enables support for quad geometries.\" ON)\nOPTION(EMBREE_GEOMETRY_CURVE \"Enables support for curve geometries.\" ON)\nOPTION(EMBREE_GEOMETRY_SUBDIVISION \"Enables support for subdiv geometries.\" ON)\nOPTION(EMBREE_GEOMETRY_USER \"Enables support for user geometries.\" ON)\nOPTION(EMBREE_GEOMETRY_INSTANCE \"Enables support for instances.\" ON)\nOPTION(EMBREE_GEOMETRY_INSTANCE_ARRAY \"Enables support for instance arrays.\" ON)\nSET(EMBREE_MAX_INSTANCE_LEVEL_COUNT 1 CACHE STRING \"Maximum number of instance levels.\")\n\nIF (NOT EMBREE_GEOMETRY_INSTANCE AND NOT EMBREE_GEOMETRY_INSTANCE_ARRAY AND NOT EMBREE_MAX_INSTANCE_LEVEL_COUNT EQUAL 1)\n  message(FATAL_ERROR \"EMBREE_MAX_INSTANCE_LEVEL_COUNT must be 1 when EMBREE_GEOMETRY_INSTANCE and EMBREE_GEOMETRY_INSTANCE_ARRAY are disabled\")\nENDIF()\n\nOPTION(EMBREE_GEOMETRY_GRID \"Enables support for grid geometries.\" ON)\nOPTION(EMBREE_GEOMETRY_POINT \"Enables support for point geometries.\" ON)\n\nOPTION(EMBREE_RAY_PACKETS \"Enabled support for ray packets.\" ON)\n\n\nSET(EMBREE_CURVE_SELF_INTERSECTION_AVOIDANCE_FACTOR 2.0 CACHE STRING \"Self intersection avoidance factor for flat curves. Specify floating point value in range 0 to inf.\")\nOPTION(EMBREE_DISC_POINT_SELF_INTERSECTION_AVOIDANCE \"Enables self intersection avoidance for ray oriented discs.\" ON)\nOPTION(EMBREE_MIN_WIDTH \"Enables min-width feature to enlarge curve and point thickness to pixel width.\" OFF)\n\n##############################################################\n# Platform detection and defaults\n##############################################################\n\n# detect ARM compilation\nIF (APPLE AND CMAKE_SYSTEM_NAME STREQUAL \"Darwin\" AND (CMAKE_SYSTEM_PROCESSOR STREQUAL \"arm64\" AND CMAKE_OSX_ARCHITECTURES STREQUAL \"\") OR (\"arm64\" IN_LIST CMAKE_OSX_ARCHITECTURES))\n  MESSAGE(STATUS \"Building for Apple silicon\")\n  SET(EMBREE_ARM ON)\nELSEIF(CMAKE_SYSTEM_PROCESSOR STREQUAL \"aarch64\" OR CMAKE_SYSTEM_PROCESSOR STREQUAL \"ARM64\")\n  MESSAGE(STATUS \"Building for AArch64\")\n  SET(EMBREE_ARM ON)\nENDIF()\n\nSET(EMBREE_TASKING_SYSTEM \"TBB\" CACHE STRING \"Selects tasking system\")\nSET(EMBREE_TBB_COMPONENT \"tbb\" CACHE STRING \"The TBB component/library name.\")\n\nIF (WIN32)\n  SET_PROPERTY(CACHE EMBREE_TASKING_SYSTEM PROPERTY STRINGS TBB INTERNAL PPL)\nELSE()\n  SET_PROPERTY(CACHE EMBREE_TASKING_SYSTEM PROPERTY STRINGS TBB INTERNAL)\nENDIF()\n\nIF (EMBREE_TASKING_SYSTEM STREQUAL \"TBB\")\n  SET(TASKING_TBB      ON )\n  SET(TASKING_INTERNAL OFF)\n  SET(TASKING_PPL      OFF )\n  ADD_DEFINITIONS(-DTASKING_TBB)\n  LIST(APPEND ISPC_DEFINITIONS -DTASKING_TBB)\nELSEIF (EMBREE_TASKING_SYSTEM STREQUAL \"PPL\")\n  SET(TASKING_PPL      ON )\n  SET(TASKING_TBB      OFF )\n  SET(TASKING_INTERNAL OFF)\n  ADD_DEFINITIONS(-DTASKING_PPL)\n  LIST(APPEND ISPC_DEFINITIONS -DTASKING_PPL)\nELSE()\n  SET(TASKING_INTERNAL ON )\n  SET(TASKING_TBB      OFF)\n  SET(TASKING_PPL      OFF )\n  ADD_DEFINITIONS(-DTASKING_INTERNAL)\n  LIST(APPEND ISPC_DEFINITIONS -DTASKING_INTERNAL)\nENDIF()\n\n##############################################################\n# Compiler\n##############################################################\n# TODO: fixme, define relwithassert also for icc, msvc, ... or remove when debug build with dpcpp is useable\nIF(EMBREE_SYCL_SUPPORT)\n  SET(CONFIGURATION_TYPES \"Debug;Release;RelWithDebInfo;RelWithAssert\")\nELSE()\nSET(CONFIGURATION_TYPES \"Debug;Release;RelWithDebInfo\")\nENDIF()\n\n# Validate build type\nIF (CMAKE_BUILD_TYPE)\n  string(FIND \"${CONFIGURATION_TYPES}\" \"${CMAKE_BUILD_TYPE}\" MATCHED_CONFIG)\n  IF (${MATCHED_CONFIG} EQUAL -1)\n    message(FATAL_ERROR \"CMAKE_BUILD_TYPE (${CMAKE_BUILD_TYPE}) allows only the following values: ${CONFIGURATION_TYPES}\")\n  ENDIF()\nENDIF()\n\nmessage(DEBUG \"CMAKE_GENERATOR_TOOLSET: ${CMAKE_GENERATOR_TOOLSET}\")\nmessage(DEBUG \"CMAKE_CXX_COMPILER_ID: ${CMAKE_CXX_COMPILER_ID}\")\nmessage(DEBUG \"CMAKE_CXX_COMPILER: ${CMAKE_CXX_COMPILER}\")\n\ninclude(CheckCXXCompilerFlag)\ncheck_cxx_compiler_flag(-fsycl COMPILER_HAS_SYCL_SUPPORT)\n\nIF (WIN32)\n  IF (NOT DEFAULT_CMAKE_CONFIGURATION_TYPES_SET)\n    SET(CMAKE_CONFIGURATION_TYPES \"${CONFIGURATION_TYPES}\" CACHE STRING \"List of generated configurations.\" FORCE)\n    SET(DEFAULT_CMAKE_CONFIGURATION_TYPES_SET ON CACHE INTERNAL \"Default CMake configuration types set.\")\n  ENDIF()\n  SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)\n\n  IF ((${CMAKE_CXX_COMPILER_ID} MATCHES \"IntelLLVM\") OR\n      (${CMAKE_CXX_COMPILER_ID} MATCHES \"Clang\" AND COMPILER_HAS_SYCL_SUPPORT))\n    MESSAGE(\"-- DPCPP compiler detected\")\n    INCLUDE(dpcpp)\n  ELSEIF(${CMAKE_GENERATOR_TOOLSET} MATCHES \"^LLVM\")\n    set(EMBREE_SYCL_SUPPORT OFF)\n    MESSAGE(\"-- CLANG compiler detected\")\n    INCLUDE(clang)\n  ELSEIF(${CMAKE_GENERATOR_TOOLSET} MATCHES \"^Intel\")\n    set(EMBREE_SYCL_SUPPORT OFF)\n    MESSAGE(\"-- Intel compiler detected\")\n    INCLUDE (intel)\n  ELSEIF(${CMAKE_CXX_COMPILER_FRONTEND_VARIANT} MATCHES \"GNU\")\n    set(EMBREE_SYCL_SUPPORT OFF)\n    MESSAGE(\"-- GNU-like compiler detected\")\n    INCLUDE(gnu)\n  ELSE()\n    set(EMBREE_SYCL_SUPPORT OFF)\n    IF (EMBREE_ISA_AVX512)\n      MESSAGE(FATAL_ERROR \"Microsoft Visual C++ Compiler does not support AVX512. Please use Intel Compiler or Clang.\")\n    ENDIF()\n    MESSAGE(\"-- MSVC detected\")\n    INCLUDE (msvc)\n  ENDIF()\n\nELSE (WIN32)\n  IF(CMAKE_CXX_COMPILER_WRAPPER STREQUAL \"CrayPrgEnv\")\n    INCLUDE (crayprgenv)\n  ELSE()\n    GET_FILENAME_COMPONENT(CXX_COMPILER_NAME ${CMAKE_CXX_COMPILER} NAME)\n    \n    STRING(TOLOWER \"${CMAKE_CXX_COMPILER_ID}\" _LOWER_CXX_COMPILER_ID)\n    STRING(REPLACE \"appleclang\" \"clang\" _LOWER_CXX_COMPILER_ID ${_LOWER_CXX_COMPILER_ID})\n    STRING(REPLACE \"intelllvm\" \"dpcpp\" _LOWER_CXX_COMPILER_ID ${_LOWER_CXX_COMPILER_ID})\n    IF(${_LOWER_CXX_COMPILER_ID} MATCHES \"clang\" AND ${CXX_COMPILER_NAME} MATCHES \"icpx\")\n      STRING(REPLACE \"clang\" \"dpcpp\" _LOWER_CXX_COMPILER_ID ${_LOWER_CXX_COMPILER_ID})\n    ENDIF()\n    IF(${_LOWER_CXX_COMPILER_ID} MATCHES \"clang\" AND ${CXX_COMPILER_NAME} MATCHES \"dpcpp\")\n      STRING(REPLACE \"clang\" \"dpcpp\" _LOWER_CXX_COMPILER_ID ${_LOWER_CXX_COMPILER_ID})\n    ENDIF()\n    IF (EMBREE_SYCL_SUPPORT)\n      SET(_LOWER_CXX_COMPILER_ID \"dpcpp\")\n    ENDIF()\n    STRING(TOUPPER \"${_LOWER_CXX_COMPILER_ID}\" _UPPER_CXX_COMPILER_ID)\n    MESSAGE(\"-- ${_UPPER_CXX_COMPILER_ID} detected\")\n    INCLUDE(${_LOWER_CXX_COMPILER_ID} OPTIONAL RESULT_VARIABLE COMPILER_FOUND)\n    IF (NOT COMPILER_FOUND)\n      MESSAGE(FATAL_ERROR \"Unsupported compiler: \" ${CMAKE_CXX_COMPILER_ID})\n    ENDIF ()\n  ENDIF ()\n\n  IF(NOT CMAKE_BUILD_TYPE)\n    SET(CMAKE_BUILD_TYPE \"Release\" CACHE STRING \"Specifies the build type.\" FORCE)\n    SET_PROPERTY(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS ${CONFIGURATION_TYPES})\n  ENDIF(NOT CMAKE_BUILD_TYPE)\n\n  OPTION(CMAKE_VERBOSE_MAKEFILE \"Enables verbose mode.\")\n  MARK_AS_ADVANCED(CLEAR CMAKE_VERBOSE_MAKEFILE)\n\nENDIF (WIN32)\n\n##############################################################\n# ISA configuration\n##############################################################\n\n# just for compatibility with old naming\nIF(DEFINED EMBREE_ISA_AVX512SKX)\n  UNSET(EMBREE_ISA_AVX512 CACHE)\n  SET(EMBREE_ISA_AVX512 ${EMBREE_ISA_AVX512SKX} CACHE BOOL \"\")\nENDIF()\n\nIF (CMAKE_CXX_COMPILER_WRAPPER STREQUAL \"CrayPrgEnv\")\n  SET(EMBREE_MAX_ISA \"DEFAULT\" CACHE STRING \"Selects highest ISA to support.\")\nELSEIF (EMSCRIPTEN)\n  SET(EMBREE_MAX_ISA \"SSE2\" CACHE STRING \"Selects highest ISA to support.\")\nELSE()\n  SET(EMBREE_MAX_ISA \"NONE\" CACHE STRING \"Selects highest ISA to support.\")\nENDIF()\n\nIF (EMBREE_ARM)\n  SET_PROPERTY(CACHE EMBREE_MAX_ISA PROPERTY STRINGS NONE NEON NEON2X)\nELSE()  \n  SET_PROPERTY(CACHE EMBREE_MAX_ISA PROPERTY STRINGS NONE SSE2 SSE4.2 AVX AVX2 AVX512 DEFAULT)\nENDIF()\n\nIF (EMBREE_MAX_ISA STREQUAL \"NONE\")\n  \n  IF (EMBREE_ARM)\n    IF (APPLE)\n      OPTION(EMBREE_ISA_NEON   \"Enables NEON ISA.\" OFF)\n      OPTION(EMBREE_ISA_NEON2X \"Enables NEON ISA double pumped.\" ON)\n    ELSE()\n      OPTION(EMBREE_ISA_NEON   \"Enables NEON ISA.\" ON)\n      OPTION(EMBREE_ISA_NEON2X \"Enables NEON ISA double pumped.\" OFF)\n    ENDIF()\n  ELSE()\n    TRY_COMPILE(COMPILER_SUPPORTS_AVX    \"${CMAKE_BINARY_DIR}\" \"${PROJECT_SOURCE_DIR}/common/cmake/check_isa.cpp\" COMPILE_DEFINITIONS ${FLAGS_AVX})\n    TRY_COMPILE(COMPILER_SUPPORTS_AVX2   \"${CMAKE_BINARY_DIR}\" \"${PROJECT_SOURCE_DIR}/common/cmake/check_isa.cpp\" COMPILE_DEFINITIONS ${FLAGS_AVX2})\n    TRY_COMPILE(COMPILER_SUPPORTS_AVX512 \"${CMAKE_BINARY_DIR}\" \"${PROJECT_SOURCE_DIR}/common/cmake/check_isa.cpp\" COMPILE_DEFINITIONS ${FLAGS_AVX512})\n  \n    OPTION(EMBREE_ISA_SSE2 \"Enables SSE2 ISA.\" ON)\n    OPTION(EMBREE_ISA_SSE42 \"Enables SSE4.2 ISA.\" ON)\n    OPTION(EMBREE_ISA_AVX \"Enables AVX ISA.\" ${COMPILER_SUPPORTS_AVX})\n    OPTION(EMBREE_ISA_AVX2 \"Enables AVX2 ISA.\" ${COMPILER_SUPPORTS_AVX2})\n    IF (WIN32 OR APPLE)\n      OPTION(EMBREE_ISA_AVX512 \"Enables AVX512 ISA.\" OFF)\n    ELSE()\n      OPTION(EMBREE_ISA_AVX512 \"Enables AVX512 ISA.\" ${COMPILER_SUPPORTS_AVX512})\n    ENDIF()\n    # Don't use OPTION, but still set them to OFF, so that embree-config.cmake is consisten with its definitions\n    SET(EMBREE_ISA_NEON   OFF)\n    SET(EMBREE_ISA_NEON2X OFF)\n  ENDIF()\n\nELSEIF (EMBREE_MAX_ISA STREQUAL \"DEFAULT\")\n  UNSET(EMBREE_ISA_NEON CACHE)\n  UNSET(EMBREE_ISA_NEON2X CACHE)\n  UNSET(EMBREE_ISA_SSE2 CACHE)\n  UNSET(EMBREE_ISA_SSE42 CACHE)\n  UNSET(EMBREE_ISA_AVX CACHE)\n  UNSET(EMBREE_ISA_AVX2 CACHE)\n  UNSET(EMBREE_ISA_AVX512 CACHE)\n  SET(EMBREE_ISA_NEON OFF)\n  SET(EMBREE_ISA_NEON2X OFF)\n  SET(EMBREE_ISA_SSE2 OFF)\n  SET(EMBREE_ISA_SSE42 OFF)\n  SET(EMBREE_ISA_AVX OFF)\n  SET(EMBREE_ISA_AVX2 OFF)\n  SET(EMBREE_ISA_AVX512 OFF)\n  MESSAGE(STATUS \"Detecting default ISA...\")\n  INCLUDE(check_isa_default)\n  CHECK_ISA_DEFAULT(EMBREE_ISA_DEFAULT)\n  MESSAGE(STATUS \"Detected default ISA: ${EMBREE_ISA_DEFAULT}\")\n  SET(EMBREE_ISA_${EMBREE_ISA_DEFAULT} ON)\n\nELSE()\n  UNSET(EMBREE_ISA_NEON CACHE)\n  UNSET(EMBREE_ISA_NEON2X CACHE)\n  UNSET(EMBREE_ISA_SSE2 CACHE)\n  UNSET(EMBREE_ISA_SSE42 CACHE)\n  UNSET(EMBREE_ISA_AVX CACHE)\n  UNSET(EMBREE_ISA_AVX2 CACHE)\n  UNSET(EMBREE_ISA_AVX512 CACHE)\n \n  IF(EMBREE_MAX_ISA STREQUAL \"NEON\")\n    SET(ISA  1)\n  ELSEIF(EMBREE_MAX_ISA STREQUAL \"NEON2X\")\n    SET(ISA  2)\n  ELSEIF(EMBREE_MAX_ISA STREQUAL \"SSE2\")\n    SET(ISA  1)\n  ELSEIF(EMBREE_MAX_ISA STREQUAL \"SSE4.2\")\n    SET(ISA  2)\n  ELSEIF(EMBREE_MAX_ISA STREQUAL \"AVX\")\n    SET(ISA  3)\n  ELSEIF(EMBREE_MAX_ISA STREQUAL \"AVX2\")\n    SET(ISA  4)\n  ELSEIF(EMBREE_MAX_ISA STREQUAL \"AVX512\")\n    SET(ISA 5)\n  ELSEIF(EMBREE_MAX_ISA STREQUAL \"AVX512SKX\")  # just for compatibility\n    SET(ISA 5)\n  ELSE()\n    MESSAGE(FATAL_ERROR \"Unsupported ISA specified: \" ${EMBREE_MAX_ISA})\n  ENDIF()\n\n  SET(EMBREE_ISA_NEON OFF)\n  SET(EMBREE_ISA_NEON2X OFF)\n  SET(EMBREE_ISA_SSE2 OFF)\n  SET(EMBREE_ISA_SSE42 OFF)\n  SET(EMBREE_ISA_AVX OFF)\n  SET(EMBREE_ISA_AVX2 OFF)\n  SET(EMBREE_ISA_AVX512 OFF)\n\n  IF (EMBREE_ARM)\n    IF (ISA GREATER 0)\n      SET(EMBREE_ISA_NEON ON)\n    ENDIF ()\n    IF (ISA GREATER 1)\n      SET(EMBREE_ISA_NEON2X ON)\n    ENDIF ()\n  ELSE()\n    IF (ISA GREATER 0)\n      SET(EMBREE_ISA_SSE2  ON)\n    ENDIF ()\n    IF (ISA GREATER 1)\n      SET(EMBREE_ISA_SSE42  ON)\n    ENDIF ()\n    IF (ISA GREATER 2)\n      SET(EMBREE_ISA_AVX  ON)\n    ENDIF ()\n    IF (ISA GREATER 3)\n      SET(EMBREE_ISA_AVX2  ON)\n    ENDIF ()\n    IF (ISA GREATER 4)\n      SET(EMBREE_ISA_AVX512  ON)\n    ENDIF ()\n  ENDIF()\nENDIF()\n\nIF(CMAKE_CXX_COMPILER_WRAPPER STREQUAL \"CrayPrgEnv\")\n  SET(EMBREE_ISA_SSE42 OFF)\nENDIF()\n\nIF (APPLE AND EMBREE_STATIC_LIB)\n\n  # count number of set ISAs\n  SET(NUMISA 0)\n  IF (EMBREE_ISA_NEON)\n    MATH(EXPR NUMISA \"${NUMISA}+1\")\n  ENDIF()\n  IF (EMBREE_ISA_NEON2X)\n    MATH(EXPR NUMISA \"${NUMISA}+1\")\n  ENDIF()\n  IF (EMBREE_ISA_SSE2)\n    MATH(EXPR NUMISA \"${NUMISA}+1\")\n  ENDIF()\n  IF (EMBREE_ISA_SSE42)\n    MATH(EXPR NUMISA \"${NUMISA}+1\")\n  ENDIF()\n  IF (EMBREE_ISA_AVX)\n    MATH(EXPR NUMISA \"${NUMISA}+1\")\n  ENDIF()\n  IF (EMBREE_ISA_AVX2)\n    MATH(EXPR NUMISA \"${NUMISA}+1\")\n  ENDIF()\n  IF (EMBREE_ISA_AVX512)\n    MATH(EXPR NUMISA \"${NUMISA}+1\")\n  ENDIF()\n\n  IF (NUMISA GREATER 1)\n    IF (${CMAKE_CXX_COMPILER_ID} MATCHES \"Clang\")\n      IF (${CMAKE_CXX_COMPILER_VERSION} VERSION_GREATER \"9.0.0\" OR ${CMAKE_CXX_COMPILER_VERSION} VERSION_EQUAL \"9.0.0\")\n        MESSAGE(FATAL_ERROR \"Using Embree as static library is not supported with AppleClang >= 9.0 when multiple ISAs are selected. Please either build a shared library or enable only one ISA.\")\n      ENDIF()\n    ENDIF()\n  ENDIF()\nENDIF()\n\n##############################################################\n# ISA configuration continued\n##############################################################\n\nSET(SSE2 0)\nSET(SSE42 1)\nSET(AVX 2)\nSET(AVX2 3)\nSET(AVX512 4)\n\nUNSET(FLAGS_LOWEST)\nSET(ISA_LOWEST -1)\nSET(ISA_LOWEST_AVX 2)\n\nIF (EMBREE_ARM)\n  IF (EMBREE_ISA_NEON2X)\n    LIST(APPEND ISPC_TARGETS \"neon-i32x8\")\n  ELSEIF (EMBREE_ISA_NEON)\n    LIST(APPEND ISPC_TARGETS \"neon-i32x4\")\n  ENDIF()\nENDIF()\n\nIF (EMBREE_ISA_NEON)\n  SET(EMBREE_ISA_SSE2 ON)\nENDIF()\n\nIF (EMBREE_ISA_NEON2X)\n  SET(EMBREE_ISA_SSE2 OFF)\n  SET(EMBREE_ISA_SSE42 OFF)\n  SET(EMBREE_ISA_AVX OFF)\n  SET(EMBREE_ISA_AVX2 ON)\nENDIF()\n\nIF (EMBREE_ISA_SSE2)\n  ADD_DEFINITIONS(-DEMBREE_TARGET_SSE2)\n  IF (NOT EMBREE_ARM)\n    LIST(APPEND ISPC_TARGETS \"sse2\")\n  ENDIF()\n  IF(NOT FLAGS_LOWEST)\n    SET(ISA_LOWEST ${SSE2})\n    SET(FLAGS_LOWEST ${FLAGS_SSE2})\n  ENDIF()\nENDIF()\n\nIF (EMBREE_ISA_SSE42)\n  ADD_DEFINITIONS(-DEMBREE_TARGET_SSE42)\n  IF (NOT EMBREE_ARM)\n    LIST(APPEND ISPC_TARGETS \"sse4\")\n  ENDIF()\n  IF(NOT FLAGS_LOWEST)\n    SET(ISA_LOWEST ${SSE42})\n    SET(FLAGS_LOWEST ${FLAGS_SSE42})\n  ENDIF()\nENDIF ()\n\nIF (EMBREE_ISA_AVX)\n  ADD_DEFINITIONS(-DEMBREE_TARGET_AVX)\n  IF (NOT EMBREE_ARM)\n    LIST(APPEND ISPC_TARGETS \"avx\")\n  ENDIF()\n  IF(NOT FLAGS_LOWEST)\n    SET(ISA_LOWEST ${AVX})\n    SET(ISA_LOWEST_AVX ${AVX})\n    SET(FLAGS_LOWEST ${FLAGS_AVX})\n  ENDIF()\nENDIF ()\n\nIF (EMBREE_ISA_AVX2)\n  ADD_DEFINITIONS(-DEMBREE_TARGET_AVX2)\n  IF (NOT EMBREE_ARM)\n    LIST(APPEND ISPC_TARGETS \"avx2\")\n  ENDIF()\n  IF(NOT FLAGS_LOWEST)\n    SET(ISA_LOWEST ${AVX2})\n    SET(ISA_LOWEST_AVX ${AVX2})\n    SET(FLAGS_LOWEST ${FLAGS_AVX2})\n  ENDIF()\nENDIF ()\n\nIF (EMBREE_ISA_AVX512)\n  ADD_DEFINITIONS(-DEMBREE_TARGET_AVX512)\n  IF (NOT EMBREE_ARM)\n    LIST(APPEND ISPC_TARGETS \"avx512skx-i32x16\")\n  ENDIF()\n  IF(NOT FLAGS_LOWEST)\n    SET(ISA_LOWEST ${AVX512})\n    SET(ISA_LOWEST_AVX ${AVX512})\n    SET(FLAGS_LOWEST ${FLAGS_AVX512})\n  ENDIF()\nENDIF ()\n\nIF (ISA_LOWEST EQUAL -1)\n  MESSAGE(FATAL_ERROR \"You have to enable at least one ISA!\")\nENDIF()\n\nINCLUDE (ispc)\n\n##############################################################\n# Create Binary Packages (uses above config options)\n##############################################################\ninclude(package)\n\n##############################################################\n# Create Config files\n##############################################################\n\nCONFIGURE_FILE(\n  \"${PROJECT_SOURCE_DIR}/kernels/config.h.in\"\n  \"${PROJECT_SOURCE_DIR}/kernels/config.h\"\n  )\n\nINCLUDE_DIRECTORIES(${PROJECT_BINARY_DIR})\n\nCONFIGURE_FILE(\n  \"${PROJECT_SOURCE_DIR}/kernels/rtcore_config.h.in\"\n  \"${PROJECT_SOURCE_DIR}/include/embree4/rtcore_config.h\"\n)\n\nCONFIGURE_FILE(\n  \"${PROJECT_SOURCE_DIR}/kernels/hash.h.in\"\n  \"${PROJECT_SOURCE_DIR}/kernels/hash.h\"\n)\nCONFIGURE_FILE(\n  \"${PROJECT_SOURCE_DIR}/kernels/export.linux.map.in\"\n  \"${PROJECT_SOURCE_DIR}/kernels/export.linux.map\"\n)\nCONFIGURE_FILE(\n  \"${PROJECT_SOURCE_DIR}/kernels/export.macosx.map.in\"\n  \"${PROJECT_SOURCE_DIR}/kernels/export.macosx.map\"\n)\n\n\n##############################################################\n# Output paths\n##############################################################\nSET(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}\")\nSET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}\")\nSET(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}\")\n\n##############################################################\n# Directories to compile\n##############################################################\n\nADD_SUBDIRECTORY(common)\nADD_SUBDIRECTORY(kernels)\nADD_SUBDIRECTORY(tests)\n\nIF (EMBREE_TUTORIALS)\n  ADD_SUBDIRECTORY(tutorials)\nENDIF()\n\n##############################################################\n# Uninstall\n##############################################################\n\nIF (NOT TARGET uninstall)\n  configure_file(\n      \"${CMAKE_CURRENT_SOURCE_DIR}/common/cmake/uninstall.cmake.in\"\n      \"${CMAKE_CURRENT_BINARY_DIR}/uninstall.cmake\"\n      IMMEDIATE @ONLY)\n\n  add_custom_target(uninstall\n      COMMAND ${CMAKE_COMMAND} -P \"${CMAKE_CURRENT_BINARY_DIR}/uninstall.cmake\")\n\n  SET_PROPERTY(TARGET uninstall PROPERTY FOLDER CMakePredefinedTargets)\nENDIF()\n\n##############################################################\n# Has to be last\n##############################################################\n\nINCLUDE(CPack)\n"
        },
        {
          "name": "CMakePresets.json",
          "type": "blob",
          "size": 2.7890625,
          "content": "{\n  \"version\": 4,\n  \"cmakeMinimumRequired\": {\n    \"major\": 3,\n    \"minor\": 11,\n    \"patch\": 0\n  },\n  \"include\": [\n    \"scripts/cmake-presets/os.json\", \n    \"scripts/cmake-presets/package.json\",\n    \"scripts/cmake-presets/compiler.json\",\n    \"scripts/cmake-presets/tbb.json\",\n    \"scripts/cmake-presets/continuous.json\",\n    \"scripts/cmake-presets/nightly.json\",\n    \"scripts/cmake-presets/release.json\",\n    \"scripts/cmake-presets/integrate.json\",\n    \"scripts/cmake-presets/performance.json\",\n    \"scripts/cmake-presets/public.json\"\n  ],\n  \"configurePresets\": [\n\n    {\n      \"name\": \"package-linux-icx-ispc1_19_0-tbb2021_9_0-perf\",\n      \"inherits\": [\"package-linux\", \"env\", \"icx\", \"ispc1_19_0\", \"tbb2021_9_0\"],\n      \"binaryDir\": \"${sourceDir}/build\",\n      \"cacheVariables\": {\n        \"CMAKE_BUILD_TYPE\": \"Release\",\n        \"EMBREE_MAX_ISA\": \"AVX512\",\n        \"EMBREE_USE_GOOGLE_BENCHMARK\": \"ON\",\n        \"EMBREE_BUILD_GOOGLE_BENCHMARK_FROM_SOURCE\": \"ON\"\n      }\n    },\n\n\n\n    {\n      \"name\": \"package-linux-icx-sycl-ispc1_19_0-tbb2021_9_0-perf\",\n      \"inherits\": [\"package-linux\", \"env\", \"icx\", \"ispc1_19_0\", \"tbb2021_9_0\"],\n      \"binaryDir\": \"${sourceDir}/build\",\n      \"cacheVariables\": {\n        \"CMAKE_BUILD_TYPE\": \"Release\",\n        \"EMBREE_SYCL_SUPPORT\": \"ON\",\n        \"EMBREE_SYCL_L0_RTAS_BUILDER\" : \"OFF\",\n        \"EMBREE_SYCL_AOT_DEVICES\": \"none\",\n        \"EMBREE_MAX_ISA\": \"AVX512\",\n        \"EMBREE_USE_GOOGLE_BENCHMARK\": \"ON\",\n        \"EMBREE_BUILD_GOOGLE_BENCHMARK_FROM_SOURCE\": \"ON\"\n      }\n    },\n\n\n\n \n\n\n\n\n    {\n      \"name\": \"package-windows-v141-ispc1_19_0-tbb2021_9_0\",\n      \"inherits\": [\"package-windows\", \"env\", \"v141\", \"ispc1_19_0\", \"tbb2021_9_0\"],\n      \"binaryDir\": \"${sourceDir}/build\",\n      \"cacheVariables\": {\n        \"CMAKE_BUILD_TYPE\": \"Release\",\n        \"EMBREE_MAX_ISA\": \"SSE2\"\n      }\n    },\n\n    {\n      \"name\": \"package-windows-v140-ispc1_19_0-tbb2021_9_0\",\n      \"inherits\": [\"package-windows\", \"env\", \"v140\", \"ispc1_19_0\", \"tbb2021_9_0\"],\n      \"binaryDir\": \"${sourceDir}/build\",\n      \"cacheVariables\": {\n        \"CMAKE_BUILD_TYPE\": \"Release\",\n        \"EMBREE_MAX_ISA\": \"SSE2\"\n      }\n    },\n    \n\n    {\n      \"name\": \"package-windows-icx-sycl-ispc1_19_0-tbb2021_9_0\",\n      \"inherits\": [\"package-windows\", \"env\", \"icx-windows\", \"ispc1_19_0\", \"tbb2021_9_0\"],\n      \"binaryDir\": \"${sourceDir}/build\",\n      \"cacheVariables\": {\n        \"CMAKE_BUILD_TYPE\": \"Release\",\n        \"EMBREE_SYCL_SUPPORT\": \"ON\",\n        \"EMBREE_SYCL_L0_RTAS_BUILDER\" : \"OFF\",\n        \"EMBREE_SYCL_AOT_DEVICES\": \"none\",\n        \"EMBREE_MAX_ISA\": \"AVX512\"\n      }\n    },\n\n\n\n    {\n      \"name\": \"linux-coverity\",\n      \"inherits\": [\"package-linux\", \"env\", \"gcc\", \"tasking_internal\"],\n      \"binaryDir\": \"${sourceDir}/build\",\n      \"cacheVariables\": {\n        \"CMAKE_BUILD_TYPE\": \"Release\",\n        \"EMBREE_MAX_ISA\": \"SSE2\"\n      }\n    }\n  ]\n}\n"
        },
        {
          "name": "CTestConfig.cmake",
          "type": "blob",
          "size": 0.173828125,
          "content": "## Copyright 2009-2021 Intel Corporation\n## SPDX-License-Identifier: Apache-2.0\n\nset(CTEST_PROJECT_NAME \"Embree\")\nset(TEST_MODELS_HASH 05b5a61035485d3090868f9abf5cc057d1e31101)\n\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 341.73828125,
          "content": "% Embree: High Performance Ray Tracing Kernels 4.3.3\n% Intel Corporation\n\nIntel® Embree Overview\n======================\n\nIntel® Embree is a high-performance ray tracing library developed at\nIntel, which is released as open source under the [Apache 2.0\nlicense](http://www.apache.org/licenses/LICENSE-2.0). Intel® Embree\nsupports x86 CPUs under Linux, macOS, and Windows; ARM CPUs on Linux\nand macOS; as well as Intel® GPUs under Linux and Windows.\n\nIntel® Embree targets graphics application developers to improve the\nperformance of photo-realistic rendering applications. Embree is\noptimized towards production rendering, by putting focus on incoherent\nray performance, high quality acceleration structure construction, a\nrich feature set, accurate primitive intersection, and low memory\nconsumption.\n\nEmbree's feature set includes various primitive types such as\ntriangles (as well quad and grids for lower memory consumption);\nCatmull-Clark subdivision surfaces; various types of curve primitives,\nsuch as flat curves (for distant views), round curves (for closeup\nviews), and normal oriented curves, all supported with different basis\nfunctions (linear, Bézier, B-spline, Hermite, and Catmull Rom);\npoint-like primitives, such as ray oriented discs, normal oriented\ndiscs, and spheres; user defined geometries with a procedural\nintersection function; multi-level instancing; filter callbacks\ninvoked for any hit encountered; motion blur including multi-segment\nmotion blur, deformation blur, and quaternion motion blur; and ray\nmasking.\n\nIntel® Embree contains ray tracing kernels optimized for the latest\nx86 processors with support for SSE, AVX, AVX2, and AVX-512\ninstructions, and uses runtime code selection to choose between these\nkernels. Intel® Embree contains algorithms optimized for incoherent\nworkloads (e.g.  Monte Carlo ray tracing algorithms) and coherent\nworkloads (e.g. primary visibility and hard shadow rays) as well as\nsupports for dynamic scenes by implementing high-performance two-level\nspatial index structure construction algorithms.\n\nIntel® Embree supports applications written with the Intel® Implicit\nSPMD Program Compiler (Intel® ISPC, <https://ispc.github.io/>) by\nproviding an ISPC interface to the core ray tracing\nalgorithms. This makes it possible to write a renderer that\nautomatically vectorizes and leverages SSE, AVX, AVX2, and AVX-512\ninstructions.\n\nIntel® Embree supports Intel GPUs through the\n[SYCL](https://www.khronos.org/sycl/) open standard programming\nlanguage. SYCL allows to write C++ code that can be run on various\ndevices, such as CPUs and GPUs. Using Intel® Embree application\ndevelopers can write a single source renderer that executes\nefficiently on CPUs and GPUs. Maintaining just one code base\nthis way can significantly improve productivity and eliminate\ninconsistencies between a CPU and GPU version of the renderer. Embree\nsupports GPUs based on the Xe HPG and Xe HPC microarchitecture,\nwhich support hardware accelerated ray tracing do deliver excellent\nlevels of ray tracing performance.\n\nSupported Platforms\n-------------------\n\nEmbree supports Windows (32-bit and 64-bit), Linux (64-bit), and macOS\n(64-bit). Under Windows, Linux and macOS x86 based CPUs are supported,\nwhile ARM CPUs are currently only supported under Linux and macOS (e.g. \nApple M1). ARM support for Windows experimental.\n\nEmbree supports Intel GPUs based on the Xe HPG microarchitecture\n(Intel® Arc™ GPU) under Linux and Windows and Xe HPC microarchitecture\n(Intel® Data Center GPU Flex Series and Intel® Data Center GPU Max\nSeries) under Linux.\n\nThe code compiles with the Intel® Compiler, Intel® oneAPI DPC++\nCompiler, GCC, Clang, and the Microsoft Compiler. To use Embree on the\nGPU the Intel® oneAPI DPC++ Compiler must be used. Please see section\n[Compiling Embree] for details on tested compiler versions.\n\nEmbree requires at least an x86 CPU with support for\nSSE2 or an Apple M1 CPU.\n\nEmbree Support and Contact\n--------------------------\n\nIf you encounter bugs please report them via [Embree's GitHub Issue\nTracker](https://github.com/embree/embree/issues).\n\nFor questions and feature requests please write us at\n<embree_support@intel.com>.\n\nTo receive notifications of updates and new features of Embree please\nsubscribe to the [Embree mailing\nlist](https://groups.google.com/d/forum/embree/).\n\nInstallation of Embree\n======================\n\n\nWindows Installation\n--------------------\n\nA pre-built version of Embree for Windows is provided as a ZIP archive\n[embree-4.3.3.x64.windows.zip](https://github.com/embree/embree/releases/download/v4.3.3/embree-4.3.3.x64.windows.zip). After\nunpacking this ZIP file, you should set the path to the `lib` folder\nmanually to your `PATH` environment variable for applications to find\nEmbree.\n\n\nLinux Installation\n------------------\n\nA pre-built version of Embree for Linux is provided as a `tar.gz` archive:\n[embree-4.3.3.x86_64.linux.tar.gz](https://github.com/embree/embree/releases/download/v4.3.3/embree-4.3.3.x86_64.linux.tar.gz). Unpack\nthis file using `tar` and source the provided `embree-vars.sh` (if you\nare using the bash shell) or `embree-vars.csh` (if you are using the C\nshell) to set up the environment properly:\n\n    tar xzf embree-4.3.3.x86_64.linux.tar.gz\n    source embree-4.3.3.x86_64.linux/embree-vars.sh\n\nWe recommend adding a relative `RPATH` to your application that points\nto the location where Embree (and TBB) can be found, e.g. `$ORIGIN/../lib`.\n\n\nmacOS Installation\n------------------\n\nThe macOS version of Embree is also delivered as a ZIP file:\n[embree-4.3.3.x86_64.macosx.zip](https://github.com/embree/embree/releases/download/v4.3.3/embree-4.3.3.x86_64.macosx.zip). Unpack\nthis file using `tar` and source the provided `embree-vars.sh` (if you\nare using the bash shell) or `embree-vars.csh` (if you are using the C\nshell) to set up the environment properly:\n\n    unzip embree-4.3.3.x64.macosx.zip    source embree-4.3.3.x64.macosx/embree-vars.sh\n\nIf you want to ship Embree with your application, please use the Embree\nlibrary of the provided ZIP file. The library name of that Embree\nlibrary is of the form `@rpath/libembree.4.dylib`\n(and similar also for the included TBB library). This ensures that you\ncan add a relative `RPATH` to your application that points to the location\nwhere Embree (and TBB) can be found, e.g. `@loader_path/../lib`.\n\n\nBuilding Embree Applications\n----------------------------\n\nThe most convenient way to build an Embree application is through\nCMake. Just let CMake find your unpacked Embree package using the\n`FIND_PACKAGE` function inside your `CMakeLists.txt` file:\n\n     FIND_PACKAGE(embree 4 REQUIRED)\n\nFor CMake to properly find Embree you need to set the `embree_DIR` variable to\nthe folder containing the `embree_config.cmake` file. You might also have to\nset the `TBB_DIR` variable to the path containing `TBB-config.cmake` of a local\nTBB install, in case you do not have TBB installed globally on your system,\ne.g:\n\n    cmake -D embree_DIR=path_to_embree_package/lib/cmake/embree-4.3.3/ \\\n          -D TBB_DIR=path_to_tbb_package/lib/cmake/tbb/ \\\n          ..\n\nThe `FIND_PACKAGE` function will create an `embree` target that\nyou can add to your target link libraries:\n\n    TARGET_LINK_LIBRARIES(application embree)\n\nFor a full example on how to build an Embree application please have a\nlook at the `minimal` tutorial provided in the `src` folder of the\nEmbree package and also the contained `README.txt` file.\n\n\nBuilding Embree SYCL Applications\n----------------------------------\n\nBuilding Embree SYCL applications is also best done using\nCMake. Please first get some compatible SYCL compiler and setup the\nenvironment as decribed in sections [Linux SYCL Compilation] and\n[Windows SYCL Compilation].\n\nAlso perform the setup steps from the previous [Building Embree\nApplications] section.\n\nPlease also have a look at the [Minimal] tutorial that is provided\nwith the Embree release, for an example how to build a simple SYCL\napplication using CMake and Embree.\n\nTo properly compile your SYCL application you have to add additional\nSYCL compile flags for each C++ file that contains SYCL device side\ncode or kernels as described next.\n\n\n### JIT Compilation\n\nWe recommend using just in time compilation (JIT compilation) together\nwith [SYCL JIT caching] to compile Embree SYCL applications. For JIT\ncompilation add these options to the compilation phase of all C++\nfiles that contain SYCL code:\n\n    -fsycl -Xclang -fsycl-allow-func-ptr -fsycl-targets=spir64\n\nThese options enable SYCL two phase compilation (`-fsycl` option),\nenable function pointer support (`-Xclang -fsycl-allow-func-ptr`\noption), and just in time (JIT) compilation only\n(`-fsycl-targets=spir64` option).\n\nThe following link options have to get added to the linking stage of\nyour application when using just in time compilation:\n\n    -fsycl -fsycl-targets=spir64\n\nFor a full example on how to build an Embree SYCL application please\nhave a look at the SYCL version of the `minimal` tutorial provided in\nthe `src` folder of the Embree package and also the contained\n`README.txt` file.\n\nPlease have a look at the [Compiling Embree] section on how to create\nan Embree package from sources if required.\n\n\n### AOT Compilation\n\nAhead of time compilation (AOT compilation) allows to speed up first\napplication start up time as device binaries are precompiled. We do\nnot recommend using AOT compilation as it does not allow the usage of\nspecialization constants to reduce code complexity.\n\nFor ahead of time compilation add these compile options to the\ncompilation phase of all C++ files that contain SYCL code:\n\n    -fsycl -Xclang -fsycl-allow-func-ptr -fsycl-targets=spir64_gen\n\nThese options enable SYCL two phase compilation (`-fsycl` option),\nenable function pointer support (`-Xclang -fsycl-allow-func-ptr`\noption), and ahead of time (AOT) compilation\n(`-fsycl-targets=spir64_gen` option).\n\nThe following link options have to get added to the linking stage of\nyour application when compiling ahead of time for Xe HPG devices:\n\n    -fsycl -fsycl-targets=spir64_gen\n    -Xsycl-target-backend=spir64_gen \"-device XE_HPG_CORE\"\n\nThis in particular configures the devices for AOT compilation to\n`XE_HPG_CORE`.\n\nTo get a list of all device supported by AOT compilation look at the\nhelp of the device option in ocloc tool:\n\n    ocloc compile --help\n\n\nBuilding Embree Tests\n---------------------\n\nEmbree is released with a bundle of tests in an optional testing package.\nTo run these tests extract the testing package in the same folder as your embree installation.\ne.g.:\n    \n    tar -xzf embree-4.3.3-testing.zip -C /path/to/installed/embree\n\nThe tests are extracted into a new folder inside you embree installation and can be run with:\n\n    cd /path/to/installed/embree/testing\n    cmake -B build\n    cmake --build build target=tests\n\n\nCompiling Embree\n================\n\nWe recommend using the prebuild Embree packages from\n[https://github.com/embree/embree/releases](https://github.com/embree/embree/releases). If\nyou need to compile Embree yourself you need to use CMake as described\nin the following.\n\nDo not enable fast-math optimizations in your compiler as this mode is\nnot supported by Embree.\n\nLinux and macOS\n---------------\n\nTo compile Embree you need a modern C++ compiler that supports\nC++11. Embree is tested with the following compilers:\n\nLinux\n\n  - Intel® oneAPI DPC++/C++ Compiler 2024.0.2\n  - oneAPI DPC++/C++ Compiler 2023-10-26\n  - Clang 5.0.0\n  - Clang 4.0.0\n  - GCC 10.0.1 (Fedora 32) AVX512 support\n  - GCC  8.3.1 (Fedora 29) AVX512 support\n  - Intel® Implicit SPMD Program Compiler 1.22.0\n\nmacOS x86_64\n\n  - Apple Clang 15\n\nmacOS Arm64\n\n  - Apple Clang 14\n\nEmbree supports using the Intel® Threading Building Blocks (TBB) as the\ntasking system. For performance and flexibility reasons we recommend\nusing Embree with the Intel® Threading Building Blocks (TBB) and best\nalso use TBB inside your application. Optionally you can disable TBB\nin Embree through the `EMBREE_TASKING_SYSTEM` CMake variable.\n\nEmbree supports the Intel® Implicit SPMD Program Compiler (Intel® ISPC), which allows\nstraightforward parallelization of an entire renderer. If you\nwant to use Intel® ISPC then you can enable `EMBREE_ISPC_SUPPORT` in\nCMake. Download and install the Intel® ISPC binaries from\n[ispc.github.io](https://ispc.github.io/downloads.html). After\ninstallation, put the path to `ispc` permanently into your `PATH` environment\nvariable or you set the `EMBREE_ISPC_EXECUTABLE` variable to point at the ISPC\nexecutable during CMake configuration.\n\nYou additionally have to install CMake 3.1.0 or higher and the developer\nversion of [GLFW](https://www.glfw.org/) version 3.\n\nUnder macOS, all these dependencies can be installed\nusing [MacPorts](http://www.macports.org/):\n\n    sudo port install cmake tbb glfw-devel\n\nDepending on your Linux distribution you can install these dependencies\nusing `yum` or `apt-get`.  Some of these packages might already be\ninstalled or might have slightly different names.\n\nType the following to install the dependencies using `yum`:\n\n    sudo yum install cmake\n    sudo yum install tbb-devel\n    sudo yum install glfw-devel\n\nType the following to install the dependencies using `apt-get`:\n\n    sudo apt-get install cmake-curses-gui\n    sudo apt-get install libtbb-dev\n    sudo apt-get install libglfw3-dev\n\nFinally, you can compile Embree using CMake. Create a build directory\ninside the Embree root directory and execute `ccmake ..` inside this\nbuild directory.\n\n    mkdir build\n    cd build\n    ccmake ..\n\nPer default, CMake will use the compilers specified with the `CC` and\n`CXX` environment variables. Should you want to use a different\ncompiler, run `cmake` first and set the `CMAKE_CXX_COMPILER` and\n`CMAKE_C_COMPILER` variables to the desired compiler. For example, to\nuse the Clang compiler instead of the default GCC on most Linux machines\n(`g++` and `gcc`), execute\n\n    cmake -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang ..\n\nRunning `ccmake` will open a dialog where you can perform various\nconfigurations as described below in [CMake Configuration]. After having\nconfigured Embree, press `c` (for configure) and `g` (for generate) to\ngenerate a Makefile and leave the configuration. The code can be\ncompiled by executing make.\n\n    make -j 8\n\nThe executables will be generated inside the build folder. We recommend\ninstalling the Embree library and header files on your\nsystem. Therefore set the `CMAKE_INSTALL_PREFIX` to `/usr` in cmake\nand type:\n\n    sudo make install\n\nIf you keep the default `CMAKE_INSTALL_PREFIX` of `/usr/local` then\nyou have to make sure the path `/usr/local/lib` is in your\n`LD_LIBRARY_PATH`.\n\nYou can also uninstall Embree again by executing:\n\n    sudo make uninstall\n\nYou can also create an Embree package using the following command:\n\n    make package\n\nPlease see the [Building Embree Applications] section on how to build\nyour application with such an Embree package.\n\nLinux SYCL Compilation\n-----------------------\n\nThere are two options to compile Embree with SYCL support:\nThe open source [\"oneAPI DPC++ Compiler\"](https://github.com/intel/llvm/) or\nthe [\"Intel(R) oneAPI DPC++/C++ Compiler\"](https://www.intel.com/content/www/us/en/developer/articles/tool/oneapi-standalone-components.html#dpcpp-cpp).\nOther SYCL compilers are not supported.\n\nThe \"oneAPI DPC++ Compiler\" is more up-to-date than the \"Intel(R) oneAPI\nDPC++/C++ Compiler\" but less stable. The current tested version of the \"oneAPI\nDPC++ compiler is\n\n  - [oneAPI DPC++ Compiler 2023-10-26](https://github.com/intel/llvm/releases/tag/nightly-2023-10-26)\n  \nThe compiler can be downloaded and simply extracted. The oneAPI DPC++ compiler\ncan be set up executing the following commands in a Linux (bash) shell:\n\n    export SYCL_BUNDLE_ROOT=path_to_dpcpp_compiler\n    export PATH=$SYCL_BUNDLE_ROOT/bin:$PATH\n    export CPATH=$SYCL_BUNDLE_ROOT/include:$CPATH\n    export LIBRARY_PATH=$SYCL_BUNDLE_ROOT/lib:$LIBRARY_PATH\n    export LD_LIBRARY_PATH=$SYCL_BUNDLE_ROOT/lib:$LD_LIBRARY_PATH\n    export LD_LIBRARY_PATH=$SYCL_BUNDLE_ROOT/linux/lib/x64:$LD_LIBRARY_PATH\n\nwhere the `path_to_dpcpp_compiler` should point to the unpacked oneAPI DPC++\ncompiler. This will put `clang++` and `clang` from the oneAPI DPC++ Compiler\ninto your path.\n\nPlease also install all Linux packages described in the previous\nsection.\n\nNow, you can configure Embree using CMake by executing the following command\nin the Embree root directory:\n\n    cmake -B build \\\n          -DCMAKE_CXX_COMPILER=clang++ \\\n          -DCMAKE_C_COMPILER=clang \\\n          -DEMBREE_SYCL_SUPPORT=ON\n\nThis will create a directory `build` to use as the CMake build directory,\nconfigure the usage of the oneAPI DPC++ Compiler, and turn on SYCL support\nthrough `EMBREE_SYCL_SUPPORT=ON`.\n\nAlternatively, you can download and run the installer of the\n\n - [Intel(R) oneAPI DPC++/C++ Compiler](https://www.intel.com/content/www/us/en/developer/articles/tool/oneapi-standalone-components.html#dpcpp-cpp).\n\nAfter installation, you can set up the compiler by sourcing the\n`vars.sh` script in the `env` directory of the compiler install directory, for example,\n\n    source /opt/intel/oneAPI/compiler/latest/env/vars.sh\n\nThis script will put the `icpx` and `icx` compiler executables from the\nIntel(R) oneAPI DPC++/C++ Compiler in your path.\n\nNow, you can configure Embree using CMake by executing the following command\nin the Embree root directory:\n\n    cmake -B build \\\n          -DCMAKE_CXX_COMPILER=icpx \\\n          -DCMAKE_C_COMPILER=icx \\\n          -DEMBREE_SYCL_SUPPORT=ON\n\nMore information about setting up the Intel(R) oneAPI DPC++/C++ compiler can be\nfound in the [Development Reference Guide](https://www.intel.com/content/www/us/en/develop/documentation/oneapi-dpcpp-cpp-compiler-dev-guide-and-reference/top/compiler-setup.html). Please note, that the Intel(R) oneAPI DPC++/C++ compiler\nrequires [at least CMake version 3.20.5 on Linux](https://www.intel.com/content/www/us/en/develop/documentation/oneapi-dpcpp-cpp-compiler-dev-guide-and-reference/top/compiler-setup/use-the-command-line/use-cmake-with-the-compiler.html).\n\nIndependent of the DPC++ compiler choice, you can now build Embree using\n\n    cmake --build build -j 8\n\nThe executables will be generated inside the build folder. The\nexecutable names of the SYCL versions of the tutorials end with\n`_sycl`.\n\n\n### Linux Graphics Driver Installation\n\nTo run the SYCL code you need to install the latest GPGPU drivers for\nyour Intel Xe HPG/HPC GPUs from here\n[https://dgpu-docs.intel.com/](https://dgpu-docs.intel.com/). Follow\nthe driver installation instructions for your graphics card and\noperating system.\n\nAfter installing the drivers you have to install an additional package\nmanually using\n\n    sudo apt install intel-level-zero-gpu-raytracing\n\n\nWindows\n-------\n\nEmbree is tested using the following compilers under Windows:\n\n  - Intel® oneAPI DPC++/C++ Compiler 2024.0.2\n  - oneAPI DPC++/C++ Compiler 2023-10-26\n  - Visual Studio 2022\n  - Visual Studio 2019\n  - Visual Studio 2017\n  - Intel® Implicit SPMD Program Compiler 1.22.0\n\nTo compile Embree for AVX-512 you have to use the Intel® Compiler.\n\nEmbree supports using the Intel® Threading Building Blocks (TBB) as the\ntasking system. For performance and flexibility reasons we recommend\nusing use Embree with the Intel® Threading Building Blocks (TBB) and best\nalso use TBB inside your application. Optionally you can disable TBB\nin Embree through the `EMBREE_TASKING_SYSTEM` CMake variable.\n\nEmbree will either find the Intel® Threading Building Blocks (TBB)\ninstallation that comes with the Intel® Compiler, or you can install the\nbinary distribution of TBB directly from\n[https://github.com/oneapi-src/oneTBB/releases](https://github.com/oneapi-src/oneTBB/releases)\ninto a folder named `tbb` into your Embree root directory. You also have\nto make sure that the libraries `tbb.dll` and `tbb_malloc.dll` can be\nfound when executing your Embree applications, e.g. by putting the path\nto these libraries into your `PATH` environment variable.\n\nEmbree supports the Intel® Implicit SPMD Program Compiler (Intel® ISPC), which\nallows straightforward parallelization of an entire renderer. When installing\nIntel® ISPC, make sure to download an Intel® ISPC version from\n[ispc.github.io](https://ispc.github.io/downloads.html) that is compatible with\nyour Visual Studio version. After installation, put the path to `ispc.exe`\npermanently into your `PATH` environment variable or you need to correctly set\nthe `EMBREE_ISPC_EXECUTABLE` variable during CMake configuration to point to\nthe ISPC executable. If you want to use Intel® ISPC, you have to enable\n`EMBREE_ISPC_SUPPORT` in CMake.\n\nYou additionally have to install [CMake](http://www.cmake.org/download/)\n(version 3.1 or higher). Note that you need a native Windows CMake\ninstallation because CMake under Cygwin cannot generate solution files\nfor Visual Studio.\n\n### Using the IDE\n\nRun `cmake-gui`, browse to the Embree sources, set the build directory\nand click Configure. Now you can select the Generator, e.g. \"Visual\nStudio 12 2013\" for a 32-bit build or \"Visual Studio 12 2013 Win64\"\nfor a 64-bit build.\n\nTo use a different compiler than the Microsoft Visual C++ compiler, you\nadditionally need to specify the proper compiler toolset through the\noption \"Optional toolset to use (-T parameter)\". E.g. to use Clang for\ncompilation set the toolset to \"LLVM_v142\".\n\nDo not change the toolset manually in a solution file (neither through\nthe project properties dialog nor through the \"Use Intel Compiler\"\nproject context menu), because then some compiler-specific command line\noptions cannot be set by CMake.\n\nMost configuration parameters described in the [CMake Configuration]\ncan be set under Windows as well. Finally, click \"Generate\" to create\nthe Visual Studio solution files. \n\nThe following CMake options are only available under Windows:\n\n+ `CMAKE_CONFIGURATION_TYPE`:  List of generated\n  configurations. The default value is Debug;Release;RelWithDebInfo.\n\n+  `USE_STATIC_RUNTIME`: Use the static version of the C/C++ runtime\n  library. This option is turned OFF by default.\n\nUse the generated Visual Studio solution file `embree4.sln` to compile\nthe project.\n\nWe recommend enabling syntax highlighting for the `.ispc` source and\n`.isph` header files. To do so open Visual Studio, go to Tools ⇒\nOptions ⇒ Text Editor ⇒ File Extension and add the `isph` and `ispc`\nextensions for the \"Microsoft Visual C++\" editor.\n\n### Using the Command Line\n\nEmbree can also be configured and built without the IDE using the Visual\nStudio command prompt:\n\n    cd path\\to\\embree\n    mkdir build\n    cd build\n    cmake -G \"Visual Studio 16 2019\" ..\n    cmake --build . --config Release\n\nYou can also build only some projects with the `--target` switch.\nAdditional parameters after \"`--`\" will be passed to `msbuild`. For\nexample, to build the Embree library in parallel use\n\n    cmake --build . --config Release --target embree -- /m\n\n### Building Embree - Using vcpkg\n\nYou can download and install Embree using the [vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\n\n    git clone https://github.com/Microsoft/vcpkg.git\n    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n    ./vcpkg install embree3\n\nThe Embree port in vcpkg is kept up to date by Microsoft team members\nand community contributors. If the version is out of date, please\n[create an issue or pull request](https://github.com/Microsoft/vcpkg)\non the vcpkg repository.\n\n\nWindows SYCL Compilation\n-------------------------\n\nThere are two options to compile Embree with SYCL support:\nThe open source [\"oneAPI DPC++ Compiler\"](https://github.com/intel/llvm/) or\nthe [\"Intel(R) oneAPI DPC++/C++ Compiler\"](https://www.intel.com/content/www/us/en/developer/articles/tool/oneapi-standalone-components.html#dpcpp-cpp).\nOther SYCL compilers are not supported. You will also need an installed version\nof Visual Studio that supports the C++17 standard, e.g. Visual Studio 2019.\n\nThe \"oneAPI DPC++ Compiler\" is more up-to-date than the \"Intel(R) oneAPI\nDPC++/C++ Compiler\" but less stable. The current tested version of the oneAPI\nDPC++ compiler is\n\n  - [oneAPI DPC++ Compiler 2023-10-26](https://github.com/intel/llvm/releases/tag/nightly-2023-10-26)\n\nDownload and unpack the archive and open the \"x64 Native Tools Command Prompt\"\nof Visual Studio and execute the following lines to properly configure the\nenvironment to use the oneAPI DPC++ compiler:\n\n    set \"DPCPP_DIR=path_to_dpcpp_compiler\"\n    set \"PATH=%DPCPP_DIR%\\bin;%PATH%\"\n    set \"PATH=%DPCPP_DIR%\\lib;%PATH%\"\n    set \"CPATH=%DPCPP_DIR%\\include;%CPATH%\"\n    set \"INCLUDE=%DPCPP_DIR%\\include;%INCLUDE%\"\n    set \"LIB=%DPCPP_DIR%\\lib;%LIB%\"\n\nThe `path_to_dpcpp_compiler` should point to the unpacked oneAPI DPC++\ncompiler.\n\nNow, you can configure Embree using CMake by executing the following command\nin the Embree root directory:\n\n    cmake -B build\n          -G Ninja\n          -D CMAKE_BUILD_TYPE=Release\n          -D CMAKE_CXX_COMPILER=clang++\n          -D CMAKE_C_COMPILER=clang\n          -D EMBREE_SYCL_SUPPORT=ON\n          -D TBB_ROOT=path_to_tbb\\lib\\cmake\\tbb\n\nThis will create a directory `build` to use as the CMake build directory, and\nconfigure a release build that uses `clang++` and `clang` from the oneAPI DPC++\ncompiler.\n\nThe [Ninja](https://ninja-build.org/) generator is currently the easiest way to\nuse the oneAPI DPC++ compiler.\n\nWe also enable SYCL support in Embree using the `EMBREE_SYCL_SUPPORT` CMake\noption.\n\nAlternatively, you can download and run the installer of the\n\n - [Intel(R) oneAPI DPC++/C++ Compiler](https://www.intel.com/content/www/us/en/developer/articles/tool/oneapi-standalone-components.html#dpcpp-cpp).\n\nAfter installation, you can either open a regular `Command Prompt` and execute\nthe `vars.bat` script in the `env` directory of the compiler install directory,\nfor example\n\n    C:\\Program Files (x86)\\Intel\\oneAPI\\compiler\\latest\\env\\vars.bat\n\nor simply open the installed \"Intel oneAPI command prompt for Intel 64 for Visual Studio\".\n\nBoth ways will put the `icx` compiler executable from the\nIntel(R) oneAPI DPC++/C++ compiler in your path.\n\nNow, you can configure Embree using CMake by executing the following command\nin the Embree root directory:\n\n    cmake -B build\n          -G Ninja\n          -D CMAKE_BUILD_TYPE=Release\n          -D CMAKE_CXX_COMPILER=icx\n          -D CMAKE_C_COMPILER=icx\n          -D EMBREE_SYCL_SUPPORT=ON\n          -D TBB_ROOT=path_to_tbb\\lib\\cmake\\tbb\n\nMore information about setting up the Intel(R) oneAPI DPC++/C++ compiler can be\nfound in the [Development Reference Guide](https://www.intel.com/content/www/us/en/develop/documentation/oneapi-dpcpp-cpp-compiler-dev-guide-and-reference/top/compiler-setup.html). Please note, that the Intel(R) oneAPI DPC++/C++ compiler\nrequires [at least CMake version 3.23 on Windows](https://www.intel.com/content/www/us/en/develop/documentation/oneapi-dpcpp-cpp-compiler-dev-guide-and-reference/top/compiler-setup/use-the-command-line/use-cmake-with-the-compiler.html).\n\nIndependent of the DPC++ compiler choice, you can now build Embree using\n\n    cmake --build build\n\nIf you have problems with Ninja re-running CMake in an infinite loop,\nthen first remove the \"Re-run CMake if any of its inputs changed.\"\nsection from the `build.ninja` file and run the above command again.\n\nYou can also create an Embree package using the following command:\n\n    cmake --build build --target package\n\nPlease see the [Building Embree SYCL Applications] section on how to build\nyour application with such an Embree package.\n\n\n### Windows Graphics Driver Installation\n\nIn order to run the SYCL tutorials on HPG hardware, you first need to\ninstall the graphics drivers for your graphics card from\n[https://www.intel.com](https://www.intel.com). Please make sure to\nhave installed version 31.0.101.4644 or newer.\n\n\nCMake Configuration\n-------------------\n\nThe default CMake configuration in the configuration dialog should be\nappropriate for most usages. The following list describes all\nparameters that can be configured in CMake:\n\n+ `CMAKE_BUILD_TYPE`: Can be used to switch between Debug mode\n  (Debug), Release mode (Release) (default), and Release mode with\n  enabled assertions and debug symbols (RelWithDebInfo).\n\n+ `EMBREE_STACK_PROTECTOR`: Enables protection of return address\n  from buffer overwrites. This option is OFF by default.\n\n+ `EMBREE_ISPC_SUPPORT`: Enables Intel® ISPC support of Embree. This option\n  is OFF by default.\n\n+ `EMBREE_SYCL_SUPPORT`: Enables GPU support using SYCL. When this\n  option is enabled you have to use some DPC++ compiler. Please see\n  the sections [Linux SYCL Compilation] and [Windows SYCL Compilation]\n  on supported DPC++ compilers. This option is OFF by default.\n\n+ `EMBREE_SYCL_AOT_DEVICES`: Selects a list of GPU devices for\n  ahead-of-time (AOT) compilation of device code. Possible values are\n  either, \"none\" which enables only just in time (JIT) compilation, or\n  a list of the Embree-supported Xe GPUs for AOT compilation:\n\n  * XE_HPG_CORE : Xe HPG devices\n  * XE_HPC_CORE : Xe HPC devices\n\n  One can also specify multiple devices separated by comma to\n  compile ahead of time for multiple devices,\n  e.g. \"XE_HPG_CORE,XE_HP_CORE\". When enabling AOT compilation for one\n  or multiple devices, JIT compilation will always additionally be\n  enabled in case the code is executed on a device no code is\n  precompiled for.\n\n  Execute \"ocloc compile --help\" for more details of possible devices\n  to pass. Embree is only supported on Xe HPG/HPC and newer devices.\n\n  Per default, this option is set to \"none\" to enable JIT\n  compilation. We recommend using JIT compilation as this enables the\n  use of specialization constants to reduce code complexity.\n\n+ `EMBREE_STATIC_LIB`: Builds Embree as a static library (OFF by\n  default). Further multiple static libraries are generated for the\n  different ISAs selected (e.g. `embree4.a`, `embree4_sse42.a`,\n  `embree4_avx.a`, `embree4_avx2.a`, `embree4_avx512.a`). You have\n  to link these libraries in exactly this order of increasing ISA.\n\n+ `EMBREE_API_NAMESPACE`: Specifies a namespace name to put all Embree\n  API symbols inside. By default, no namespace is used and plain C symbols\n  are exported.\n\n+ `EMBREE_LIBRARY_NAME`: Specifies the name of the Embree library file\n  created. By default, the name embree4 is used.\n\n+ `EMBREE_IGNORE_CMAKE_CXX_FLAGS`: When enabled, Embree ignores\n  default CMAKE_CXX_FLAGS. This option is turned ON by default.\n\n+ `EMBREE_TUTORIALS`: Enables build of Embree tutorials (default ON).\n\n+ `EMBREE_BACKFACE_CULLING`: Enables backface culling, i.e. only\n  surfaces facing a ray can be hit. This option is turned OFF by\n  default.\n\n+ `EMBREE_BACKFACE_CULLING_CURVES`: Enables backface culling for curves,\n  i.e. only surfaces facing a ray can be hit. This option is turned OFF\n  by default.\n\n+ `EMBREE_BACKFACE_CULLING_SPHERES`: Enables backface culling for spheres,\n  i.e. only surfaces facing a ray can be hit. This option is turned OFF\n  by default.\n\n+ `EMBREE_COMPACT_POLYS`: Enables compact tris/quads, i.e. only\n  geomIDs and primIDs are stored inside the leaf nodes.  \n\n+ `EMBREE_FILTER_FUNCTION`: Enables the intersection filter function\n  feature (ON by default).\n\n+ `EMBREE_RAY_MASK`: Enables the ray masking feature (OFF by default).\n\n+ `EMBREE_RAY_PACKETS`: Enables ray packet traversal kernels. This\n  feature is turned ON by default. When turned on packet traversal is\n  used internally and packets passed to rtcIntersect4/8/16 are kept\n  intact in callbacks (when the ISA of appropriate width is enabled).\n\n+ `EMBREE_IGNORE_INVALID_RAYS`: Makes code robust against the risk of\n  full-tree traversals caused by invalid rays (e.g. rays containing\n  INF/NaN as origins). This option is turned OFF by default.\n\n+ `EMBREE_TASKING_SYSTEM`: Chooses between Intel® Threading TBB\n  Building Blocks (TBB), Parallel Patterns Library (PPL) (Windows\n  only), or an internal tasking system (INTERNAL). By default, TBB is\n  used.\n\n+ `EMBREE_TBB_ROOT`: If Intel® Threading Building Blocks (TBB)\n  is used as a tasking system, search the library in this directory\n  tree.\n\n+ `EMBREE_TBB_COMPONENT`: The component/library name of Intel® Threading \n  Building Blocks (TBB). Embree searches for this library name (default: tbb)\n  when TBB is used as the tasking system.\n\n+ `EMBREE_TBB_POSTFIX`: If Intel® Threading Building Blocks (TBB)\n  is used as a tasking system, link to tbb<EMBREE_TBB_POSTFIX>.(so,dll,lib).\n  Defaults to the empty string.\n\n+ `EMBREE_TBB_DEBUG_ROOT`: If Intel® Threading Building Blocks (TBB)\n  is used as a tasking system, search the library in this directory\n  tree in Debug mode. Defaults to `EMBREE_TBB_ROOT`.\n\n+ `EMBREE_TBB_DEBUG_POSTFIX`: If Intel® Threading Building Blocks (TBB)\n  is used as a tasking system, link to tbb<EMBREE_TBB_DEBUG_POSTFIX>.(so,dll,lib)\n  in Debug mode. Defaults to \"_debug\".\n\n+ `EMBREE_MAX_ISA`: Select highest supported ISA (SSE2, SSE4.2, AVX,\n  AVX2, AVX512, or NONE). When set to NONE the\n  EMBREE_ISA_* variables can be used to enable ISAs individually. By\n  default, the option is set to AVX2.\n\n+ `EMBREE_ISA_SSE2`: Enables SSE2 when EMBREE_MAX_ISA is set to\n  NONE. By default, this option is turned OFF.\n\n+ `EMBREE_ISA_SSE42`: Enables SSE4.2 when EMBREE_MAX_ISA is set to\n  NONE. By default, this option is turned OFF.\n\n+ `EMBREE_ISA_AVX`: Enables AVX when EMBREE_MAX_ISA is set to NONE. By\n  default, this option is turned OFF.\n\n+ `EMBREE_ISA_AVX2`: Enables AVX2 when EMBREE_MAX_ISA is set to\n  NONE. By default, this option is turned OFF.\n\n+ `EMBREE_ISA_AVX512`: Enables AVX-512 for Skylake when\n  EMBREE_MAX_ISA is set to NONE. By default, this option is turned OFF.\n\n+ `EMBREE_GEOMETRY_TRIANGLE`: Enables support for triangle geometries\n  (ON by default).\n\n+ `EMBREE_GEOMETRY_QUAD`: Enables support for quad geometries (ON by\n  default).\n\n+ `EMBREE_GEOMETRY_CURVE`: Enables support for curve geometries (ON by\n  default).\n\n+ `EMBREE_GEOMETRY_SUBDIVISION`: Enables support for subdivision\n  geometries (ON by default).\n\n+ `EMBREE_GEOMETRY_INSTANCE`: Enables support for instances (ON by\n  default).\n\n+ `EMBREE_GEOMETRY_INSTANCE_ARRAY`: Enables support for instance arrays (ON by\n  default).\n\n+ `EMBREE_GEOMETRY_USER`: Enables support for user-defined geometries\n  (ON by default).\n\n+ `EMBREE_GEOMETRY_POINT`: Enables support for point geometries\n  (ON by default).\n\n+ `EMBREE_CURVE_SELF_INTERSECTION_AVOIDANCE_FACTOR`: Specifies a\n  factor that controls the self-intersection avoidance feature for flat\n  curves. Flat curve intersections which are closer than\n  curve_radius*`EMBREE_CURVE_SELF_INTERSECTION_AVOIDANCE_FACTOR` to\n  the ray origin are ignored. A value of 0.0f disables self-intersection\n  avoidance while 2.0f is the default value.\n\n+ `EMBREE_DISC_POINT_SELF_INTERSECTION_AVOIDANCE`: Enables self-intersection\n  avoidance for RTC_GEOMETRY_TYPE_DISC_POINT geometry type (ON by default).\n  When enabled intersections are skipped if the ray origin lies inside the\n  sphere defined by the point primitive.\n\n+ `EMBREE_MIN_WIDTH`: Enabled the min-width feature, which allows\n  increasing the radius of curves and points to match some amount of\n  pixels. See [rtcSetGeometryMaxRadiusScale] for more details.\n\n+ `EMBREE_MAX_INSTANCE_LEVEL_COUNT`: Specifies the maximum number of nested\n  instance levels. Should be greater than 0; the default value is 1.\n  Instances nested any deeper than this value will silently disappear in\n  release mode, and cause assertions in debug mode.\n\n\n\n\nEmbree API\n==========\n\nThe Embree API is a low-level C99 ray tracing API which can be used to\nbuild spatial index structures for 3D scenes and perform ray queries of\ndifferent types.\n\nThe API can get used on the CPU using standard C, C++, and ISPC code\nand Intel GPUs by using SYCL code.\n\nThe Intel® Implicit SPMD Program Compiler (Intel® ISPC) version of the\nAPI, is almost identical to the standard C99 version, but contains\nadditional functions that operate on ray packets with a size of the\nnative SIMD width used by Intel® ISPC.\n\nThe SYCL version of the API is also mostly identical to the C99 version\nof the API, with some exceptions listed in section [Embree SYCL API].\n\nFor simplicity this document refers to the C99 version of the API\nfunctions. For changes when upgrading from the Embree 3 to the current\nEmbree 4 API see Section [Upgrading from Embree 3 to Embree 4].\n\nAll API calls carry the prefix `rtc` (or `RTC` for types) which stands\nfor **r**ay **t**racing **c**ore. The API supports scenes consisting of\ndifferent geometry types such as triangle meshes, quad meshes (triangle\npairs), grid meshes, flat curves, round curves, oriented curves,\nsubdivision meshes, instances, and user-defined geometries. See Section\n[Scene Object](#scene-object) for more information.\n\nFinding the closest hit of a ray segment with the scene\n(`rtcIntersect`-type functions), and determining whether any hit\nbetween a ray segment and the scene exists (`rtcOccluded`-type\nfunctions) are both supported. The API supports queries for single rays\nand ray packets. See Section [Ray Queries](#ray-queries) for more\ninformation.\n\nThe API is designed in an object-oriented manner, e.g. it contains\ndevice objects (`RTCDevice` type), scene objects (`RTCScene` type),\ngeometry objects (`RTCGeometry` type), buffer objects (`RTCBuffer`\ntype), and BVH objects (`RTCBVH` type). All objects are reference\ncounted, and handles can be released by calling the appropriate release\nfunction (e.g. `rtcReleaseDevice`) or retained by incrementing the\nreference count (e.g. `rtcRetainDevice`). In general, API calls that\naccess the same object are not thread-safe, unless specified otherwise.\nHowever, attaching geometries to the same scene and performing ray\nqueries in a scene is thread-safe.\n\nDevice Object\n-------------\n\nEmbree supports a device concept, which allows different components of\nthe application to use the Embree API without interfering with each\nother. An application typically first creates a device using the\n[rtcNewDevice] function (or [rtcNewSYCLDevice] when using SYCL for\nthe GPU). This device can then be used to construct further objects,\nsuch as scenes and geometries. Before the application exits, it should\nrelease all devices by invoking [rtcReleaseDevice]. An application\ntypically creates only a single device. If required differently, it\nshould only use a small number of devices at any given time.\n\nEach user thread has its own error flag per device. If an error occurs\nwhen invoking an API function, this flag is set to an error code (if it\nisn't already set by a previous error). See Section\n[rtcGetDeviceError] for information on how to read the error code and\nSection [rtcSetDeviceErrorFunction] on how to register a callback\nthat is invoked for each error encountered. It is recommended to always\nset a error callback function, to detect all errors.\n\nScene Object\n------------\n\nA scene is a container for a set of geometries, and contains a spatial\nacceleration structure which can be used to perform different types of\nray queries.\n\nA scene is created using the `rtcNewScene` function call, and released\nusing the `rtcReleaseScene` function call. To populate a scene with\ngeometries use the `rtcAttachGeometry` call, and to detach them use the\n`rtcDetachGeometry` call. Once all scene geometries are attached, an\n`rtcCommitScene` call (or `rtcJoinCommitScene` call) will finish the\nscene description and trigger building of internal data structures.\nAfter the scene got committed, it is safe to perform ray queries (see\nSection [Ray Queries](#ray-queries)) or to query the scene bounding box\n(see [rtcGetSceneBounds] and [rtcGetSceneLinearBounds]).\n\nIf scene geometries get modified or attached or detached, the\n`rtcCommitScene` call must be invoked before performing any further ray\nqueries for the scene; otherwise the effect of the ray query is\nundefined. The modification of a geometry, committing the scene, and\ntracing of rays must always happen sequentially, and never at the same\ntime. Any API call that sets a property of the scene or geometries\ncontained in the scene count as scene modification, e.g. including\nsetting of intersection filter functions.\n\nScene flags can be used to configure a scene to use less memory\n(`RTC_SCENE_FLAG_COMPACT`), use more robust traversal algorithms\n(`RTC_SCENE_FLAG_ROBUST`), and to optimize for dynamic content. See\nSection [rtcSetSceneFlags] for more details.\n\nA build quality can be specified for a scene to balance between\nacceleration structure build performance and ray query performance. See\nSection [rtcSetSceneBuildQuality] for more details on build quality.\n\nGeometry Object\n---------------\n\nA new geometry is created using the `rtcNewGeometry` function.\nDepending on the geometry type, different buffers must be bound (e.g.\nusing `rtcSetSharedGeometryBuffer`) to set up the geometry data. In\nmost cases, binding of a vertex and index buffer is required. The\nnumber of primitives and vertices of that geometry is typically\ninferred from the size of these bound buffers.\n\nChanges to the geometry always must be committed using the\n`rtcCommitGeometry` call before using the geometry. After committing, a\ngeometry is not included in any scene. A geometry can be added to a\nscene by using the `rtcAttachGeometry` function (to automatically\nassign a geometry ID) or using the `rtcAttachGeometryById` function (to\nspecify the geometry ID manually). A geometry can get attached to\nmultiple scenes.\n\nAll geometry types support multi-segment motion blur with an arbitrary\nnumber of equidistant time steps (in the range of 2 to 129) inside a\nuser specified time range. Each geometry can have a different number of\ntime steps and a different time range. The motion blur geometry is\ndefined by linearly interpolating the geometries of neighboring time\nsteps. To construct a motion blur geometry, first the number of time\nsteps of the geometry must be specified using the\n`rtcSetGeometryTimeStepCount` function, and then a vertex buffer for\neach time step must be bound, e.g. using the\n`rtcSetSharedGeometryBuffer` function. Optionally, a time range\ndefining the start (and end time) of the first (and last) time step can\nbe set using the `rtcSetGeometryTimeRange` function. This feature will\nalso allow geometries to appear and disappear during the camera shutter\ntime if the time range is a sub range of [0,1].\n\nRay Queries\n-----------\n\nThe API supports finding the closest hit of a ray segment with the\nscene (`rtcIntersect`-type functions), and determining whether any hit\nbetween a ray segment and the scene exists (`rtcOccluded`-type\nfunctions).\n\nSupported are single ray queries (`rtcIntersect1` and `rtcOccluded1`)\nas well as ray packet queries for ray packets of size 4\n(`rtcIntersect4` and `rtcOccluded4`), ray packets of size 8\n(`rtcIntersect8` and `rtcOccluded8`), and ray packets of size 16\n(`rtcIntersect16` and `rtcOccluded16`).\n\nSee Sections [rtcIntersect1] and [rtcOccluded1] for a detailed\ndescription of how to set up and trace a ray.\n\nSee tutorial [Triangle Geometry] for a complete example of how to\ntrace single rays and ray packets.\n\nPoint Queries\n-------------\n\nThe API supports traversal of the BVH using a point query object that\nspecifies a location and a query radius. For all primitives\nintersecting the according domain, a user defined callback function is\ncalled which allows queries such as finding the closest point on the\nsurface geometries of the scene (see Tutorial [Closest Point]) or\nnearest neighbour queries (see Tutorial [Voronoi]).\n\nSee Section [rtcPointQuery] for a detailed description of how to set\nup point queries.\n\nCollision Detection\n-------------------\n\nThe Embree API also supports collision detection queries between two\nscenes consisting only of user geometries. Embree only performs\nbroadphase collision detection, the narrow phase detection can be\nperformed through a callback function.\n\nSee Section [rtcCollide] for a detailed description of how to set up\ncollision detection.\n\nSeen tutorial [Collision Detection](#collision-detection) for a\ncomplete example of collision detection being used on a simple cloth\nsolver.\n\nFilter Functions\n----------------\n\nThe API supports filter functions that are invoked for each\nintersection found during the `rtcIntersect`-type or `rtcOccluded`-type\ncalls.\n\nThe filter functions can be set per-geometry using the\n`rtcSetGeometryIntersectFilterFunction` and\n`rtcSetGeometryOccludedFilterFunction` calls. The former ones are\ncalled geometry intersection filter functions, the latter ones geometry\nocclusion filter functions. These filter functions are designed to be\nused to ignore intersections outside of a user-defined silhouette of a\nprimitive, e.g. to model tree leaves using transparency textures.\n\nThe filter function can also get passed as arguments directly to the\ntraversal functions, see section [rtcInitIntersectArguments] and\n[rtcInitOccludedArguments] for more details. These argument filter\nfunctions are designed to change the semantics of the ray query,\ne.g. to accumulate opacity for transparent shadows, count the number of\nsurfaces along a ray, collect all hits along a ray, etc. The argument\nfilter function must be enabled to be used for a scene using the\n`RTC_SCENE_FLAG_FILTER_FUNCTION_IN_ARGUMENTS` scene flag. The callback\nis only invoked for geometries that enable the callback using the\n`rtcSetGeometryEnableFilterFunctionFromArguments` call, or enabled for\nall geometries when the `RTC_RAY_QUERY_FLAG_INVOKE_ARGUMENT_FILTER` ray\nquery flag is set.\n\nBVH Build API\n-------------\n\nThe internal algorithms to build a BVH are exposed through the `RTCBVH`\nobject and `rtcBuildBVH` call. This call makes it possible to build a\nBVH in a user-specified format over user-specified primitives. See the\ndocumentation of the `rtcBuildBVH` call for more details.\n\nEmbree SYCL API\n===============\n\nEmbree supports ray tracing on Intel GPUs by using the SYCL programming\nlanguage. SYCL is a Khronos standardized C++ based language for single\nsource heterogenous programming for acceleration offload, see the [SYCL\nwebpage](https://www.khronos.org/sycl/) for details.\n\nThe Embree SYCL API is designed for photorealistic rendering use cases,\nwhere scene setup is performed on the host, and rendering on the\ndevice. The Embree SYCL API is very similar to the standard Embree C99\nAPI, and supports most of its features, such as all triangle-type\ngeometries, all curve types and basis functions, point geometry types,\nuser geometries, filter callbacks, multi-level instancing, and motion\nblur.\n\nTo enable SYCL support you have to include the `sycl.hpp` file before\nthe Embree API headers:\n\n    #include <sycl/sycl.hpp>\n    #include <embree4/rtcore.h>\n\nNext you need to initializes an Embree SYCL device using the\n`rtcNewSYCLDevice` API function by providing a SYCL context.\n\nEmbree provides the `rtcIsSYCLDeviceSupported` API function to check if\nsome SYCL device is supported by Embree. You can also use the\n`rtcSYCLDeviceSelector` to conveniently select the first SYCL device\nthat is supported by Embree, e.g.:\n\n    sycl::device device(rtcSYCLDeviceSelector);\n    sycl::queue queue(device, exception_handler);\n    sycl::context context(device);\n    RTCDevice device = rtcNewSYCLDevice(context,\"\");\n\nScenes created with an Embree SYCL device can only get used to trace\nrays using SYCL on the GPU, it is not possible to trace rays on the CPU\nwith such a device. To render on the CPU and GPU in parallel, the user\nhas to create a second Embree device and create a second scene to be\nused on the CPU.\n\nFiles containing SYCL code, have to get compiled with the Intel® oneAPI\nDPC++ compiler. Please see section [Linux SYCL Compilation] and\n[Windows SYCL Compilation] for supported compilers. The DPC++\ncompiler performs a two-phase compilation, where host code is compiled\nin a first phase, and device code compiled in a second compilation\nphase.\n\nStandard Embree API functions for scene construction can get used on\nthe host but not the device. Data buffers that are shared with Embree\n(e.g. for vertex of index buffers) have to get allocated as SYCL\nunified shared memory (USM memory), using the `sycl::malloc` or\n`sycl::aligned_alloc` calls with `sycl::usm::alloc::shared` property,\nor the sycl::aligned\\_alloc\\_shared call, e.g:\n\n    void* ptr = sycl::aligned_alloc(16, bytes, queue, sycl::usm::alloc::shared);\n\nThese shared allocations have to be valid during rendering, as Embree\nmay access contained data when tracing rays. Embree does not support\ndevice-only memory allocations, as the BVH builder implemented on the\nCPU relies on reading the data buffers.\n\nDevice side rendering can get invoked by submitting a SYCL\n`parallel_for` to the SYCL queue:\n\n    const sycl::specialization_id<RTCFeatureFlags> feature_mask;\n\n    RTCFeatureFlags required_features = RTC_FEATURE_FLAG_TRIANGLE;\n\n    queue.submit([=](sycl::handler& cgh)\n    {\n      cgh.set_specialization_constant<feature_mask>(required_features);\n      \n      cgh.parallel_for(sycl::range<1>(1),[=](sycl::id<1> item, sycl::kernel_handler kh)\n      {\n        RTCIntersectArguments args;\n        rtcInitIntersectArguments(&args);\n\n        const RTCFeatureFlags features = kh.get_specialization_constant<feature_mask>();\n        args.feature_mask = features;\n\n        struct RTCRayHit rayhit;\n        rayhit.ray.org_x = ox;\n        rayhit.ray.org_y = oy;\n        rayhit.ray.org_z = oz;\n        rayhit.ray.dir_x = dx;\n        rayhit.ray.dir_y = dy;\n        rayhit.ray.dir_z = dz;\n        rayhit.ray.tnear = 0;\n        rayhit.ray.tfar = std::numeric_limits<float>::infinity();\n        rayhit.ray.mask = -1;\n        rayhit.ray.flags = 0;\n        rayhit.hit.geomID = RTC_INVALID_GEOMETRY_ID;\n        rayhit.hit.instID[0] = RTC_INVALID_GEOMETRY_ID;\n\n        rtcIntersect1(scene, &rayhit, &args);\n\n        result->geomID = rayhit.hit.geomID;\n        result->primID = rayhit.hit.primID;\n        result->tfar = rayhit.ray.tfar;\n      });\n    });\n    queue.wait_and_throw();\n\nThis example passes a feature mask using a specialization contant to\nthe `rtcIntersect1` function, which is recommended for GPU rendering.\nFor best performance, this feature mask should get used to enable only\nfeatures required by the application to render the scene, e.g. just\ntriangles in this example.\n\nInside the SYCL `parallel_for` loop you can use rendering related\nfunctions, such as the `rtcIntersect1` and `rtcOccluded1` functions to\ntrace rays, `rtcForwardIntersect1/Ex` and `rtcForwardOccluded1/Ex` to\ncontinue object traversal from inside a user geometry callback, and\n`rtcGetGeometryUserDataFromScene` to get the user data pointer of some\ngeometry.\n\nHave a look at the [Minimal] tutorial for a minimal SYCL example.\n\nSYCL JIT caching\n----------------\n\nCompile times for just in time compilation (JIT compilation) can be\nlarge. To resolve this issue we recommend enabling persistent JIT\ncompilation caching inside your application, by setting the\n`SYCL_CACHE_PERSISTENT` environment variable to `1`, and the\n`SYCL_CACHE_DIR` environment variable to some proper directory where\nthe JIT cache should get stored. These environment variables have to\nget set before the SYCL device is created, e.g:\n\n    setenv(\"SYCL_CACHE_PERSISTENT\",\"1\",1);\n    setenv(\"SYCL_CACHE_DIR\",\"cache_dir\",1);\n\n    sycl::device device(rtcSYCLDeviceSelector);\n    ...\n\nSYCL Memory Pooling\n-------------------\n\nMemory Pooling is a mechanism where small USM memory allocations are\npacked into larger allocation blocks. This mode is required when your\napplication performs many small USM allocations, as otherwise only a\nsmall fraction of GPU memory is usable and data transfer performance\nwill be low.\n\nMemory pooling is supported for USM allocations that are read-only by\nthe device. The following example allocated device read-only memory\nwith memory pooling support:\n\n    sycl::aligned_alloc_shared(align, bytes, queue,\n      sycl::ext::oneapi::property::usm::device_read_only());\n\nEmbree SYCL Limitations\n-----------------------\n\nEmbree only supports Xe HPC and HPG GPUs as SYCL devices, thus in\nparticular the CPU and other GPUs cannot get used as a SYCL device. To\nrender on the CPU just use the standard C99 API without relying on\nSYCL.\n\nThe SYCL language spec puts some restrictions to device functions, such\nas disallowing: global variable access, malloc, invokation of virtual\nfunctions, function pointers, runtime type information, exceptions,\nrecursion, etc. See Section\n`5.4. Language Restrictions for device functions` of the [SYCL\nspecification](https://www.khronos.org/registry/SYCL/specs/sycl-2020/html/sycl-2020.html#sec:language.restrictions.kernels)\nfor more details.\n\nUsing Intel's oneAPI DPC++ compiler invoking an indirectly called\nfunction is allowed, but we do not recommend this for performance\nreasons.\n\nSome features are not supported by the Embree SYCL API thus cannot get\nused on the GPU:\n\n-   The packet tracing functions `rtcIntersect4/8/16` and\n    `rtcOccluded4/8/16` are not supported in SYCL device side code.\n    Using these functions makes no sense for SYCL, as the programming\n    model is implicitely executed in SIMT mode on the GPU anyway.\n\n-   Filter and user geometry callbacks stored inside the geometry\n    objects are not supported on SYCL. Please use the alternative\n    approach of passing the function pointer through the\n    `RTCIntersectArguments` (or `RTCOccludedArguments`) structures to\n    the tracing function, which enables inlining on the GPU.\n\n-   The `rtcInterpolate` function cannot get used on the the device.\n    For most primitive types the vertex data interpolation is anyway a\n    trivial operation, and an API call just introduces overheads. On\n    the CPU that overhead is acceptable, but on the GPU it is not. The\n    `rtcInterpolate` function does not know the geometry type it is\n    interpolating over, thus its implementation on the GPU would\n    contain a large switch statement for all potential geometry types.\n\n-   Tracing rays using `rtcIntersect1` and `rtcOccluded1` functions\n    from user geometry callbacks is not supported in SYCL. Please use\n    the tail recursive `rtcForwardIntersect1` and `rtcForwardOccluded1`\n    calls instead.\n\n-   Subdivision surfaces are not supported for Embree SYCL devices.\n\n-   Collision detection (`rtcCollide` API call) is not supported in\n    SYCL device side code.\n\n-   Point queries (`rtcPointQuery` API call) are not supported in SYCL\n    device side code.\n\nEmbree SYCL Known Issues\n------------------------\n\n-   The SYCL support of Embree is in beta phase. Current functionality,\n    quality, and GPU performance may not reflect that of the final\n    product.\n\n-   Compilation with build configuration \"debug\" is currently not\n    working on Windows.\n\nUpgrading from Embree 3 to Embree 4\n===================================\n\nThis section summarizes API changes between Embree 3 and Embree4. Most\nof these changes are motivated by GPU performance and having a\nconsistent API that works properly for the CPU and GPU.\n\n-   The API include folder got renamed from embree3 to embree4, to be\n    able to install Embree 3 and Embree 4 side by side, without having\n    conflicts in API folder.\n\n-   The `RTCIntersectContext` is renamed to `RTCRayQueryContext` and\n    the `RTCIntersectContextFlags` got renamed to `RTCRayQueryFlags`.\n\n-   There are some changes to the `rtcIntersect` and `rtcOccluded`\n    functions. Most members of the old intersect context have been\n    moved to some optional `RTCIntersectArguments` (and\n    `RTCOccludedArguments`) structures, which also contains a pointer\n    to the new ray query context. The argument structs fulfill the task\n    of providing additional advanced arguments to the traversal\n    functions. The ray query context can get used to pass additional\n    data to callbacks, and to maintain an instID stack in case\n    instancing is done manually inside user geometry callbacks. The\n    arguments struct is not available inside callbacks. This change was\n    in particular necessary for SYCL to allow inlining of function\n    pointers provided to the traversal functions, and to reduce the\n    amount of state passed to callbacks, which both improves GPU\n    performance. Most applications can just drop passing the ray query\n    context to port to Embree 4.\n\n-   The `rtcFilterIntersection` and `rtcFilterOcclusion` API calls that\n    invoke both, the geometry and argument version of the filter\n    callback, from a user geometry callback are no longer supported.\n    Instead applications should use the\n    `rtcInvokeIntersectFilterFromGeometry` and\n    `rtcInvokeOccludedFilterFromGeometry` API calls that invoke just\n    the geometry version of the filter function, and invoke the\n    argument filter function manually if required.\n\n-   The filter function passed as arguments to `rtcIntersect` and\n    `rtcOccluded` functions is only invoked for some geometry if\n    enabled through `rtcSetGeometryEnableFilterFunctionFromArguments`\n    for that geometry. Alternatively, argument filter functions can get\n    enabled for all geometries using the\n    `RTC_RAY_QUERY_FLAG_INVOKE_ARGUMENT_FILTER` ray query flag.\n\n-   User geometry callbacks get a valid vector as input to identify\n    valid and invalid rays. In Embree 3 the user geometry callback just\n    had to update the ray hit members when an intersection was found\n    and perform no operation otherwise. In Embree 4 the callback\n    additionally has to return valid=-1 when a hit was found, and\n    valid=0 when no hit was found. This allows Embree to properly pass\n    the new hit distance to the ray tracing hardware only in the case a\n    hit was found.\n\n-   Further ray masking is enabled by default now as required by most\n    applications and the default ray mask for geometries got changed\n    from 0xFFFFFFFF to 0x1.\n\n-   The stream tracing functions `rtcIntersect1M`, `rtcIntersect1Mp`,\n    `rtcIntersectNM`, `rtcIntersectNp`, `rtcOccluded1M`,\n    `rtcOccluded1Mp`, `rtcOccludedNM`, and `rtcOccludedNp` got removed\n    as they were rarely used and did not provide relevant performance\n    benefits. As alternative the application can just iterate over\n    `rtcIntersect1` and potentially `rtcIntersect4/8/16` to get similar\n    performance.\n\nTo use Embree through SYCL on the CPU and GPU additional changes are\nrequired:\n\n-   Embree 3 allows to use `rtcIntersect` recursively from a user\n    geometry or intersection filter callback to continue a ray inside\n    an instantiated object. In Embree 4 using `rtcIntersect`\n    recursively is disallowed on the GPU but still supported on the\n    CPU. To properly continue a ray inside an instantiated object use\n    the new `rtcForwardIntersect1` and `rtcForwardOccluded1` functions.\n\n-   The geometry object of Embree 4 is a host side only object, thus\n    accessing it during rendering from the GPU is not allowed. Thus all\n    API functions that take an RTCGeometry object as argument cannot\n    get used during rendering. Thus in particular the\n    `rtcGetGeometryUserData(RTCGeometry)` call cannot get used, but\n    there is an alternative function\n    `rtcGetGeometryUserDataFromScene(RTCScene scene,uint geomID)` that\n    should get used instead.\n\n-   The user geometry callback and filter callback functions should get\n    passed through the intersection and occlusion argument structures\n    to the `rtcIntersect1` and `rtcOccluded1` functions directly to\n    allow inlining. The experimental geometry version of the callbacks\n    is disabled in SYCL and should not get used.\n\n-   The feature flags should get used in SYCL to minimal GPU code for\n    optimal performance.\n\n-   The `rtcInterpolate` function cannot get used on the device, and\n    vertex data interpolation should get implemented by the\n    application.\n\n-   Indirectly called functions must be declared with\n    `RTC_SYCL_INDIRECTLY_CALLABLE` when used as filter or user geometry\n    callbacks.\n\n```{=tex}\n\n```\nEmbree API Reference\n====================\n\nrtcNewDevice\n------------\n\n#### NAME\n\n    rtcNewDevice - creates a new device\n\n#### SYNOPSIS\n\n    #include <embree4/rtcore.h>\n\n    RTCDevice rtcNewDevice(const char* config);\n\n#### DESCRIPTION\n\nThis function creates a new device to be used for CPU ray tracing and\nreturns a handle to this device. The device object is reference counted\nwith an initial reference count of 1. The handle can be released using\nthe `rtcReleaseDevice` API call.\n\nThe device object acts as a class factory for all other object types.\nAll objects created from the device (like scenes, geometries, etc.)\nhold a reference to the device, thus the device will not be destroyed\nunless these objects are destroyed first.\n\nObjects are only compatible if they belong to the same device, e.g it\nis not allowed to create a geometry in one device and attach it to a\nscene created with a different device.\n\nA configuration string (`config` argument) can be passed to the device\nconstruction. This configuration string can be `NULL` to use the\ndefault configuration.\n\nThe following configuration is supported:\n\n-   `threads=[int]`: Specifies a number of build threads to use. A\n    value of 0 enables all detected hardware threads. By default all\n    hardware threads are used.\n\n-   `user_threads=[int]`: Sets the number of user threads that can be\n    used to join and participate in a scene commit using\n    `rtcJoinCommitScene`. The tasking system will only use\n    threads-user\\_threads many worker threads, thus if the app wants to\n    solely use its threads to commit scenes, just set threads equal to\n    user\\_threads. This option only has effect with the Intel(R)\n    Threading Building Blocks (TBB) tasking system.\n\n-   `set_affinity=[0/1]`: When enabled, build threads are affinitized\n    to hardware threads. This option is disabled by default on standard\n    CPUs, and enabled by default on Xeon Phi Processors.\n\n-   `start_threads=[0/1]`: When enabled, the build threads are started\n    upfront. This can be useful for benchmarking to exclude thread\n    creation time. This option is disabled by default.\n\n-   `isa=[sse2,sse4.2,avx,avx2,avx512]`: Use specified ISA. By default\n    the ISA is selected automatically.\n\n-   `max_isa=[sse2,sse4.2,avx,avx2,avx512]`: Configures the automated\n    ISA selection to use maximally the specified ISA.\n\n-   `hugepages=[0/1]`: Enables or disables usage of huge pages. Under\n    Linux huge pages are used by default but under Windows and macOS\n    they are disabled by default.\n\n-   `enable_selockmemoryprivilege=[0/1]`: When set to 1, this enables\n    the `SeLockMemoryPrivilege` privilege with is required to use huge\n    pages on Windows. This option has an effect only under Windows and\n    is ignored on other platforms. See Section [Huge Page Support]\n    for more details.\n\n-   `verbose=[0,1,2,3]`: Sets the verbosity of the output. When set to\n    0, no output is printed by Embree, when set to a higher level more\n    output is printed. By default Embree does not print anything on the\n    console.\n\n-   `frequency_level=[simd128,simd256,simd512]`: Specifies the\n    frequency level the application want to run on, which can be\n    either:\n\n    a)  simd128 to run at highest frequency\n    b)  simd256 to run at AVX2-heavy frequency level\n    c)  simd512 to run at heavy AVX512 frequency level. When some\n        frequency level is specified, Embree will avoid doing\n        optimizations that may reduce the frequency level below the\n        level specified. E.g. if your app does not use AVX instructions\n        setting \"frequency\\_level=simd128\" will cause some CPUs to run\n        at highest frequency, which may result in higher application\n        performance if you do much shading. If you application heavily\n        uses AVX code, you should best set the frequency level to\n        simd256. Per default Embree tries to avoid reducing the\n        frequency of the CPU by setting the simd256 level only when the\n        CPU has no significant down clocking.\n\nDifferent configuration options should be separated by commas, e.g.:\n\n    rtcNewDevice(\"threads=1,isa=avx\");\n\n#### EXIT STATUS\n\nOn success returns a handle of the created device. On failure returns\n`NULL` as device and sets a per-thread error code that can be queried\nusing `rtcGetDeviceError(NULL)`.\n\n#### SEE ALSO\n\n[rtcRetainDevice], [rtcReleaseDevice], [rtcNewSYCLDevice]\n\n```{=tex}\n\n```\nrtcNewSYCLDevice\n----------------\n\n#### NAME {#name}\n\n    rtcNewSYCLDevice - creates a new device to be used with SYCL\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    RTCDevice rtcNewSYCLDevice(sycl::context context, const char* config);\n\n#### DESCRIPTION {#description}\n\nThis function creates a new device to be used with SYCL for GPU\nrendering and returns a handle to this device. The device object is\nreference counted with an initial reference count of 1. The handle can\nget released using the `rtcReleaseDevice` API call.\n\nThe passed SYCL context (`context` argument) is used to allocate GPU\ndata, thus only devices contained inside this context can be used for\nrendering. By default the GPU data is allocated on the first GPU device\nof the context, but this behavior can get changed with the\n[rtcSetDeviceSYCLDevice] function.\n\nThe device object acts as a class factory for all other object types.\nAll objects created from the device (like scenes, geometries, etc.)\nhold a reference to the device, thus the device will not be destroyed\nunless these objects are destroyed first.\n\nObjects are only compatible if they belong to the same device, e.g it\nis not allowed to create a geometry in one device and attach it to a\nscene created with a different device.\n\nFor an overview of configurations that can get passed (`config`\nargument) please see the [rtcNewDevice] function description.\n\n#### EXIT STATUS {#exit-status}\n\nOn success returns a handle of the created device. On failure returns\n`NULL` as device and sets a per-thread error code that can be queried\nusing `rtcGetDeviceError(NULL)`.\n\n#### SEE ALSO {#see-also}\n\n[rtcRetainDevice], [rtcReleaseDevice], [rtcNewDevice]\n\n```{=tex}\n\n```\nrtcIsSYCLDeviceSupported\n------------------------\n\n#### NAME {#name}\n\n    rtcIsSYCLDeviceSupported - checks if some SYCL device is supported by Embree\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    bool rtcIsSYCLDeviceSupported(const sycl::device sycl_device);\n\n#### DESCRIPTION {#description}\n\nThis function can be used to check if some SYCL device (`sycl_device`\nargument) is supported by Embree.\n\n#### EXIT STATUS {#exit-status}\n\nThe function returns true if the SYCL device is supported by Embree and\nfalse otherwise. On failure an error code is set that can get queried\nusing `rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcSYCLDeviceSelector]\n\n```{=tex}\n\n```\nrtcSYCLDeviceSelector\n---------------------\n\n#### NAME {#name}\n\n    rtcSYCLDeviceSelector - SYCL device selector function to select\n      devices supported by Embree\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    int rtcSYCLDeviceSelector(const sycl::device sycl_device);\n\n#### DESCRIPTION {#description}\n\nThis function checks if the passed SYCL device (`sycl_device`\narguments) is supported by Embree or not. This function can be used\ndirectly to select some supported SYCL device by using it as SYCL\ndevice selector function. For instance, the following code sequence\nselects an Embree supported SYCL device and creates an Embree device\nfrom it:\n\n    sycl::device sycl_device(rtcSYCLDeviceSelector);\n    sycl::queue sycl_queue(sycl_device);\n    sycl::context(sycl_device);\n    RTCDevice device = rtcNewSYCLDevice(sycl_context,nullptr);\n\n#### EXIT STATUS {#exit-status}\n\nThe function returns -1 if the SYCL device is supported by Embree and 1\notherwise. On failure an error code is set that can get queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcIsSYCLDeviceSupported]\n\n```{=tex}\n\n```\nrtcSetDeviceSYCLDevice\n----------------------\n\n#### NAME {#name}\n\n    rtcSetDeviceSYCLDevice - sets the SYCL device to be used for memory allocations\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcSetDeviceSYCLDevice(RTCDevice device, const sycl::device sycl_device);\n\n#### DESCRIPTION {#description}\n\nThis function sets the SYCL device (`sycl_device` argument) to be used\nto allocate GPU memory when using the specified Embree device (`device`\nargument). This SYCL device must be one of the SYCL devices contained\ninside the SYCL context used to create the Embree device.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can get queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcNewSYCLDevice]\n\n```{=tex}\n\n```\nrtcRetainDevice\n---------------\n\n#### NAME {#name}\n\n    rtcRetainDevice - increments the device reference count\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcRetainDevice(RTCDevice device);\n\n#### DESCRIPTION {#description}\n\nDevice objects are reference counted. The `rtcRetainDevice` function\nincrements the reference count of the passed device object (`device`\nargument). This function together with `rtcReleaseDevice` allows to use\nthe internal reference counting in a C++ wrapper class to manage the\nownership of the object.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcNewDevice], [rtcReleaseDevice]\n\n```{=tex}\n\n```\nrtcReleaseDevice\n----------------\n\n#### NAME {#name}\n\n    rtcReleaseDevice - decrements the device reference count\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcReleaseDevice(RTCDevice device);\n\n#### DESCRIPTION {#description}\n\nDevice objects are reference counted. The `rtcReleaseDevice` function\ndecrements the reference count of the passed device object (`device`\nargument). When the reference count falls to 0, the device gets\ndestroyed.\n\nAll objects created from the device (like scenes, geometries, etc.)\nhold a reference to the device, thus the device will not get destroyed\nunless these objects are destroyed first.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcNewDevice], [rtcRetainDevice]\n\n```{=tex}\n\n```\nrtcGetDeviceProperty\n--------------------\n\n#### NAME {#name}\n\n    rtcGetDeviceProperty - queries properties of the device\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    ssize_t rtcGetDeviceProperty(\n      RTCDevice device,\n      enum RTCDeviceProperty prop\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcGetDeviceProperty` function can be used to query properties\n(`prop` argument) of a device object (`device` argument). The returned\nproperty is an integer of type `ssize_t`.\n\nPossible properties to query are:\n\n-   `RTC_DEVICE_PROPERTY_VERSION`: Queries the combined version number\n    (MAJOR.MINOR.PATCH) with two decimal digits per component. E.g. for\n    Embree 2.8.3 the integer 208003 is returned.\n\n-   `RTC_DEVICE_PROPERTY_VERSION_MAJOR`: Queries the major version\n    number of Embree.\n\n-   `RTC_DEVICE_PROPERTY_VERSION_MINOR`: Queries the minor version\n    number of Embree.\n\n-   `RTC_DEVICE_PROPERTY_VERSION_PATCH`: Queries the patch version\n    number of Embree.\n\n-   `RTC_DEVICE_PROPERTY_NATIVE_RAY4_SUPPORTED`: Queries whether the\n    `rtcIntersect4` and `rtcOccluded4` functions preserve packet size\n    and ray order when invoking callback functions. This is only the\n    case if Embree is compiled with `EMBREE_RAY_PACKETS` and `SSE2` (or\n    `SSE4.2`) enabled, and if the machine it is running on supports\n    `SSE2` (or `SSE4.2`).\n\n-   `RTC_DEVICE_PROPERTY_NATIVE_RAY8_SUPPORTED`: Queries whether the\n    `rtcIntersect8` and `rtcOccluded8` functions preserve packet size\n    and ray order when invoking callback functions. This is only the\n    case if Embree is compiled with `EMBREE_RAY_PACKETS` and `AVX` (or\n    `AVX2`) enabled, and if the machine it is running on supports `AVX`\n    (or `AVX2`).\n\n-   `RTC_DEVICE_PROPERTY_NATIVE_RAY16_SUPPORTED`: Queries whether the\n    `rtcIntersect16` and `rtcOccluded16` functions preserve packet size\n    and ray order when invoking callback functions. This is only the\n    case if Embree is compiled with `EMBREE_RAY_PACKETS` and `AVX512`\n    enabled, and if the machine it is running on supports `AVX512`.\n\n-   `RTC_DEVICE_PROPERTY_RAY_MASK_SUPPORTED`: Queries whether ray masks\n    are supported. This is only the case if Embree is compiled with\n    `EMBREE_RAY_MASK` enabled.\n\n-   `RTC_DEVICE_PROPERTY_BACKFACE_CULLING_ENABLED`: Queries whether\n    back face culling is enabled. This is only the case if Embree is\n    compiled with `EMBREE_BACKFACE_CULLING` enabled.\n\n-   `RTC_DEVICE_PROPERTY_BACKFACE_CULLING_CURVES_ENABLED`: Queries\n    whether back face culling for curves is enabled. This is only the\n    case if Embree is compiled with `EMBREE_BACKFACE_CULLING_CURVES`\n    enabled.\n\n-   `RTC_DEVICE_PROPERTY_BACKFACE_CULLING_SPHERES_ENABLED`: Queries\n    whether back face culling for spheres is enabled. This is only the\n    case if Embree is compiled with `EMBREE_BACKFACE_CULLING_SPHERES`\n    enabled.\n\n-   `RTC_DEVICE_PROPERTY_COMPACT_POLYS_ENABLED`: Queries whether\n    compact polys is enabled. This is only the case if Embree is\n    compiled with `EMBREE_COMPACT_POLYS` enabled.\n\n-   `RTC_DEVICE_PROPERTY_FILTER_FUNCTION_SUPPORTED`: Queries whether\n    filter functions are supported, which is the case if Embree is\n    compiled with `EMBREE_FILTER_FUNCTION` enabled.\n\n-   `RTC_DEVICE_PROPERTY_IGNORE_INVALID_RAYS_ENABLED`: Queries whether\n    invalid rays are ignored, which is the case if Embree is compiled\n    with `EMBREE_IGNORE_INVALID_RAYS` enabled.\n\n-   `RTC_DEVICE_PROPERTY_TRIANGLE_GEOMETRY_SUPPORTED`: Queries whether\n    triangles are supported, which is the case if Embree is compiled\n    with `EMBREE_GEOMETRY_TRIANGLE` enabled.\n\n-   `RTC_DEVICE_PROPERTY_QUAD_GEOMETRY_SUPPORTED`: Queries whether\n    quads are supported, which is the case if Embree is compiled with\n    `EMBREE_GEOMETRY_QUAD` enabled.\n\n-   `RTC_DEVICE_PROPERTY_SUBDIVISION_GEOMETRY_SUPPORTED`: Queries\n    whether subdivision meshes are supported, which is the case if\n    Embree is compiled with `EMBREE_GEOMETRY_SUBDIVISION` enabled.\n\n-   `RTC_DEVICE_PROPERTY_CURVE_GEOMETRY_SUPPORTED`: Queries whether\n    curves are supported, which is the case if Embree is compiled with\n    `EMBREE_GEOMETRY_CURVE` enabled.\n\n-   `RTC_DEVICE_PROPERTY_POINT_GEOMETRY_SUPPORTED`: Queries whether\n    points are supported, which is the case if Embree is compiled with\n    `EMBREE_GEOMETRY_POINT` enabled.\n\n-   `RTC_DEVICE_PROPERTY_USER_GEOMETRY_SUPPORTED`: Queries whether user\n    geometries are supported, which is the case if Embree is compiled\n    with `EMBREE_GEOMETRY_USER` enabled.\n\n-   `RTC_DEVICE_PROPERTY_TASKING_SYSTEM`: Queries the tasking system\n    Embree is compiled with. Possible return values are:\n\n    0.  internal tasking system\n    1.  Intel Threading Building Blocks (TBB)\n    2.  Parallel Patterns Library (PPL)\n\n-   `RTC_DEVICE_PROPERTY_JOIN_COMMIT_SUPPORTED`: Queries whether\n    `rtcJoinCommitScene` is supported. This is not the case when Embree\n    is compiled with PPL or older versions of TBB.\n\n-   `RTC_DEVICE_PROPERTY_PARALLEL_COMMIT_SUPPORTED`: Queries whether\n    `rtcCommitScene` can get invoked from multiple TBB worker threads\n    concurrently. This feature is only supported starting with TBB 2019\n    Update 9.\n\n#### EXIT STATUS {#exit-status}\n\nOn success returns the value of the queried property. For properties\nreturning a boolean value, the return value 0 denotes `false` and 1\ndenotes `true`.\n\nOn failure zero is returned and an error code is set that can be\nqueried using `rtcGetDeviceError`.\n\n```{=tex}\n\n```\nrtcGetDeviceError\n-----------------\n\n#### NAME {#name}\n\n    rtcGetDeviceError - returns the error code of the device\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    RTCError rtcGetDeviceError(RTCDevice device);\n\n#### DESCRIPTION {#description}\n\nEach thread has its own error code per device. If an error occurs when\ncalling an API function, this error code is set to the occurred error\nif it stores no previous error. The `rtcGetDeviceError` function reads\nand returns the currently stored error and clears the error code. This\nassures that the returned error code is always the first error occurred\nsince the last invocation of `rtcGetDeviceError`.\n\nPossible error codes returned by `rtcGetDeviceError` are:\n\n-   `RTC_ERROR_NONE`: No error occurred.\n\n-   `RTC_ERROR_UNKNOWN`: An unknown error has occurred.\n\n-   `RTC_ERROR_INVALID_ARGUMENT`: An invalid argument was specified.\n\n-   `RTC_ERROR_INVALID_OPERATION`: The operation is not allowed for the\n    specified object.\n\n-   `RTC_ERROR_OUT_OF_MEMORY`: There is not enough memory left to\n    complete the operation.\n\n-   `RTC_ERROR_UNSUPPORTED_CPU`: The CPU is not supported as it does\n    not support the lowest ISA Embree is compiled for.\n\n-   `RTC_ERROR_CANCELLED`: The operation got canceled by a memory\n    monitor callback or progress monitor callback function.\n\n-   `RTC_ERROR_LEVEL_ZERO_RAYTRACING_SUPPORT_MISSING`: This error can\n    occur when creating an Embree device with SYCL support using\n    `rtcNewSYCLDevice` fails. This error probably means that the GPU\n    driver is to old or not installed properly. Install a new GPU\n    driver and on Linux make sure that the package\n    `intel-level-zero-gpu-raytracing` is installed. For general driver\n    installation information for Linux refer to\n    <https://dgpu-docs.intel.com>.\n\nWhen the device construction fails, `rtcNewDevice` returns `NULL` as\ndevice. To detect the error code of a such a failed device\nconstruction, pass `NULL` as device to the `rtcGetDeviceError`\nfunction. For all other invocations of `rtcGetDeviceError`, a proper\ndevice pointer must be specified.\n\nThe API function `rtcGetDeviceLastErrorMessage` can be used to get more\ndetails about the last `RTCError` a `RTCDevice` encountered.\n\nFor convenient reporting of a `RTCError`, the API function\n`rtcGetErrorString` can be used, which returns a string representation\nof a given `RTCError`.\n\n#### EXIT STATUS {#exit-status}\n\nReturns the error code for the device.\n\n#### SEE ALSO {#see-also}\n\n[rtcSetDeviceErrorFunction], [rtcGetDeviceLastErrorMessage],\n[rtcGetErrorString]\n\n```{=tex}\n\n```\nrtcGetDeviceLastErrorMessage\n----------------------------\n\n#### NAME {#name}\n\n    rtcGetDeviceLastErrorMessage - returns a message corresponding\n      to the last error code\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    const char* rtcGetDeviceLastErrorMessage(RTCDevice device);\n\n#### DESCRIPTION {#description}\n\nThis function can be used to get a message corresponding to the last\nerror code (returned by `rtcGetDeviceError`) which often provides\ndetails about the error that happened. The message is the same as the\nmessage that will written to console when verbosity is \\> 0 or which is\npassed as the `str` argument of the `RTCErrorFunction` (see\n[rtcSetDeviceErrorFunction]). However, when device construction fails\nthis is the only way to get additional information about the error. In\nthis case, `rtcNewDevice` returns `NULL` as device. To query the error\nmessage for such a failed device construction, pass `NULL` as device to\nthe `rtcGetDeviceLastErrorMessage` function. For all other invocations\nof `rtcGetDeviceLastErrorMessage`, a proper device pointer must be\nspecified.\n\n#### EXIT STATUS {#exit-status}\n\nReturns a message corresponding to the last error code.\n\n#### SEE ALSO {#see-also}\n\n[rtcGetDeviceError], [rtcSetDeviceErrorFunction]\n\n```{=tex}\n\n```\nrtcGetErrorString\n-----------------\n\n#### NAME {#name}\n\n    rtcGetErrorString - returns a string representation\n      of a given RTCError\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    const char* rtcGetErrorString(RTCError code);\n\n#### DESCRIPTION {#description}\n\nReturns a string representation for a `RTCError` error code. For\nexample, for the `RTCError` RTC\\_ERROR\\_UNKNOWN this function will\nreturn the string \"Unknown Error\". This is purely a convenience\nfunction for printing error information on the user side.\n\nThe returned strings should not be used for comparing different\n`RTCError` error codes or make other decisions based on the type of\nerror that occurred. For such things only the `RTCError` enum values\nshould be used.\n\n#### EXIT STATUS {#exit-status}\n\nReturns a string representation of a given `RTCError` error code.\n\n#### SEE ALSO {#see-also}\n\n[rtcGetDeviceError]\n\n```{=tex}\n\n```\nrtcSetDeviceErrorFunction\n-------------------------\n\n#### NAME {#name}\n\n    rtcSetDeviceErrorFunction - sets an error callback function for the device\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    typedef void (*RTCErrorFunction)(\n      void* userPtr,\n      RTCError code,\n      const char* str\n    );\n\n    void rtcSetDeviceErrorFunction(\n      RTCDevice device,\n      RTCErrorFunction error,\n      void* userPtr\n    );\n\n#### DESCRIPTION {#description}\n\nUsing the `rtcSetDeviceErrorFunction` call, it is possible to set a\ncallback function (`error` argument) with payload (`userPtr` argument),\nwhich is called whenever an error occurs for the specified device\n(`device` argument).\n\nOnly a single callback function can be registered per device, and\nfurther invocations overwrite the previously set callback function.\nPassing `NULL` as function pointer disables the registered callback\nfunction.\n\nWhen the registered callback function is invoked, it gets passed the\nuser-defined payload (`userPtr` argument as specified at registration\ntime), the error code (`code` argument) of the occurred error, as well\nas a string (`str` argument) that further describes the error.\n\nThe error code is also set if an error callback function is registered.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcGetDeviceError]\n\n```{=tex}\n\n```\nrtcSetDeviceMemoryMonitorFunction\n---------------------------------\n\n#### NAME {#name}\n\n    rtcSetDeviceMemoryMonitorFunction - registers a callback function\n      to track memory consumption\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    typedef bool (*RTCMemoryMonitorFunction)(\n      void* userPtr,\n      ssize_t bytes,\n      bool post\n    );\n\n    void rtcSetDeviceMemoryMonitorFunction(\n      RTCDevice device,\n      RTCMemoryMonitorFunction memoryMonitor,\n      void* userPtr\n    );\n\n#### DESCRIPTION {#description}\n\nUsing the `rtcSetDeviceMemoryMonitorFunction` call, it is possible to\nregister a callback function (`memoryMonitor` argument) with payload\n(`userPtr` argument) for a device (`device` argument), which is called\nwhenever internal memory is allocated or deallocated by objects of that\ndevice. Using this memory monitor callback mechanism, the application\ncan track the memory consumption of an Embree device, and optionally\nterminate API calls that consume too much memory.\n\nOnly a single callback function can be registered per device, and\nfurther invocations overwrite the previously set callback function.\nPassing `NULL` as function pointer disables the registered callback\nfunction.\n\nOnce registered, the Embree device will invoke the memory monitor\ncallback function before or after it allocates or frees important\nmemory blocks. The callback function gets passed the payload as\nspecified at registration time (`userPtr` argument), the number of\nbytes allocated or deallocated (`bytes` argument), and whether the\ncallback is invoked after the allocation or deallocation took place\n(`post` argument). The callback function might get called from multiple\nthreads concurrently.\n\nThe application can track the current memory usage of the Embree device\nby atomically accumulating the `bytes` input parameter provided to the\ncallback function. This parameter will be \\>0 for allocations and \\<0\nfor deallocations.\n\nEmbree will continue its operation normally when returning `true` from\nthe callback function. If `false` is returned, Embree will cancel the\ncurrent operation with the `RTC_ERROR_OUT_OF_MEMORY` error code.\nIssuing multiple cancel requests from different threads is allowed.\nCanceling will only happen when the callback was called for allocations\n(bytes \\> 0), otherwise the cancel request will be ignored.\n\nIf a callback to cancel was invoked before the allocation happens\n(`post == false`), then the `bytes` parameter should not be\naccumulated, as the allocation will never happen. If the callback to\ncancel was invoked after the allocation happened (`post == true`), then\nthe `bytes` parameter should be accumulated, as the allocation properly\nhappened and a deallocation will later free that data block.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcNewDevice]\n\n```{=tex}\n\n```\nrtcNewScene\n-----------\n\n#### NAME {#name}\n\n    rtcNewScene - creates a new scene\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    RTCScene rtcNewScene(RTCDevice device);\n\n#### DESCRIPTION {#description}\n\nThis function creates a new scene bound to the specified device\n(`device` argument), and returns a handle to this scene. The scene\nobject is reference counted with an initial reference count of 1. The\nscene handle can be released using the `rtcReleaseScene` API call.\n\n#### EXIT STATUS {#exit-status}\n\nOn success a scene handle is returned. On failure `NULL` is returned\nand an error code is set that can be queried using `rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcRetainScene], [rtcReleaseScene]\n\n```{=tex}\n\n```\nrtcGetSceneDevice\n-----------------\n\n#### NAME {#name}\n\n    rtcGetSceneDevice - returns the device the scene got created in\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    RTCDevice rtcGetSceneDevice(RTCScene scene);\n\n#### DESCRIPTION {#description}\n\nThis function returns the device object the scene got created in. The\nreturned handle own one additional reference to the device object, thus\nyou should need to call `rtcReleaseDevice` when the returned handle is\nno longer required.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcReleaseDevice]\n\n```{=tex}\n\n```\nrtcRetainScene\n--------------\n\n#### NAME {#name}\n\n    rtcRetainScene - increments the scene reference count\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcRetainScene(RTCScene scene);\n\n#### DESCRIPTION {#description}\n\nScene objects are reference counted. The `rtcRetainScene` function\nincrements the reference count of the passed scene object (`scene`\nargument). This function together with `rtcReleaseScene` allows to use\nthe internal reference counting in a C++ wrapper class to handle the\nownership of the object.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcNewScene], [rtcReleaseScene]\n\n```{=tex}\n\n```\nrtcReleaseScene\n---------------\n\n#### NAME {#name}\n\n    rtcReleaseScene - decrements the scene reference count\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcReleaseScene(RTCScene scene);\n\n#### DESCRIPTION {#description}\n\nScene objects are reference counted. The `rtcReleaseScene` function\ndecrements the reference count of the passed scene object (`scene`\nargument). When the reference count falls to 0, the scene gets\ndestroyed.\n\nThe scene holds a reference to all attached geometries, thus if the\nscene gets destroyed, all geometries get detached and their reference\ncount decremented.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcNewScene], [rtcRetainScene]\n\n```{=tex}\n\n```\nrtcAttachGeometry\n-----------------\n\n#### NAME {#name}\n\n    rtcAttachGeometry - attaches a geometry to the scene\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    unsigned int rtcAttachGeometry(\n      RTCScene scene,\n      RTCGeometry geometry\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcAttachGeometry` function attaches a geometry (`geometry`\nargument) to a scene (`scene` argument) and assigns a geometry ID to\nthat geometry. All geometries attached to a scene are defined to be\nincluded inside the scene. A geometry can get attached to multiple\nscenes. The geometry ID is unique for the scene, and is used to\nidentify the geometry when hit by a ray during ray queries.\n\nThis function is thread-safe, thus multiple threads can attach\ngeometries to a scene in parallel.\n\nThe geometry IDs are assigned sequentially, starting from 0, as long as\nno geometry got detached. If geometries got detached, the\nimplementation will reuse IDs in an implementation dependent way.\nConsequently sequential assignment is no longer guaranteed, but a\ncompact range of IDs.\n\nThese rules allow the application to manage a dynamic array to\nefficiently map from geometry IDs to its own geometry representation.\nAlternatively, the application can also use per-geometry user data to\nmap to its geometry representation. See `rtcSetGeometryUserData` and\n`rtcGetGeometryUserData` for more information.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcSetGeometryUserData], [rtcGetGeometryUserData]\n\n```{=tex}\n\n```\nrtcAttachGeometryByID\n---------------------\n\n#### NAME {#name}\n\n    rtcAttachGeometryByID - attaches a geometry to the scene\n      using a specified geometry ID\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcAttachGeometryByID(\n      RTCScene scene,\n      RTCGeometry geometry,\n      unsigned int geomID\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcAttachGeometryByID` function attaches a geometry (`geometry`\nargument) to a scene (`scene` argument) and assigns a user provided\ngeometry ID (`geomID` argument) to that geometry. All geometries\nattached to a scene are defined to be included inside the scene. A\ngeometry can get attached to multiple scenes. The passed user-defined\ngeometry ID is used to identify the geometry when hit by a ray during\nray queries. Using this function, it is possible to share the same IDs\nto refer to geometries inside the application and Embree.\n\nThis function is thread-safe, thus multiple threads can attach\ngeometries to a scene in parallel.\n\nThe user-provided geometry ID must be unused in the scene, otherwise\nthe creation of the geometry will fail. Further, the user-provided\ngeometry IDs should be compact, as Embree internally creates a vector\nwhich size is equal to the largest geometry ID used. Creating very\nlarge geometry IDs for small scenes would thus cause a memory\nconsumption and performance overhead.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcAttachGeometry]\n\n```{=tex}\n\n```\nrtcDetachGeometry\n-----------------\n\n#### NAME {#name}\n\n    rtcDetachGeometry - detaches a geometry from the scene\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcDetachGeometry(RTCScene scene, unsigned int geomID);\n\n#### DESCRIPTION {#description}\n\nThis function detaches a geometry identified by its geometry ID\n(`geomID` argument) from a scene (`scene` argument). When detached, the\ngeometry is no longer contained in the scene.\n\nThis function is thread-safe, thus multiple threads can detach\ngeometries from a scene at the same time.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcAttachGeometry], [rtcAttachGeometryByID]\n\n```{=tex}\n\n```\nrtcGetGeometry\n--------------\n\n#### NAME {#name}\n\n    rtcGetGeometry - returns the geometry bound to\n      the specified geometry ID\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    RTCGeometry rtcGetGeometry(RTCScene scene, unsigned int geomID);\n\n#### DESCRIPTION {#description}\n\nThe `rtcGetGeometry` function returns the geometry that is bound to the\nspecified geometry ID (`geomID` argument) for the specified scene\n(`scene` argument). This function just looks up the handle and does\n*not* increment the reference count. If you want to get ownership of\nthe handle, you need to additionally call `rtcRetainGeometry`.\n\nThis function is not thread safe and thus can be used during rendering.\nHowever, it is generally recommended to store the geometry handle\ninside the application's geometry representation and look up the\ngeometry handle from that representation directly.\n\nIf you need a thread safe version of this function please use\n[rtcGetGeometryThreadSafe].\n\n#### EXIT STATUS {#exit-status}\n\nOn failure `NULL` is returned and an error code is set that can be\nqueried using `rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcAttachGeometry], [rtcAttachGeometryByID],\n[rtcGetGeometryThreadSafe]\n\n```{=tex}\n\n```\nrtcGetGeometryThreadSafe\n------------------------\n\n#### NAME {#name}\n\n    rtcGetGeometryThreadSafe - returns the geometry bound to\n      the specified geometry ID\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    RTCGeometry rtcGetGeometryThreadSafe(RTCScene scene, unsigned int geomID);\n\n#### DESCRIPTION {#description}\n\nThe `rtcGetGeometryThreadSafe` function returns the geometry that is\nbound to the specified geometry ID (`geomID` argument) for the\nspecified scene (`scene` argument). This function just looks up the\nhandle and does *not* increment the reference count. If you want to get\nownership of the handle, you need to additionally call\n`rtcRetainGeometry`.\n\nThis function is thread safe and should NOT get used during rendering.\nIf you need a fast non-thread safe version during rendering please use\nthe [rtcGetGeometry] function.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure `NULL` is returned and an error code is set that can be\nqueried using `rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcAttachGeometry], [rtcAttachGeometryByID], [rtcGetGeometry]\n\n```{=tex}\n\n```\nrtcCommitScene\n--------------\n\n#### NAME {#name}\n\n    rtcCommitScene - commits scene changes\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcCommitScene(RTCScene scene);\n\n#### DESCRIPTION {#description}\n\nThe `rtcCommitScene` function commits all changes for the specified\nscene (`scene` argument). This internally triggers building of a\nspatial acceleration structure for the scene using all available worker\nthreads. Ray queries can be performed only after committing all scene\nchanges.\n\nIf the application uses TBB 2019 Update 9 or later for parallelization\nof rendering, lazy scene construction during rendering is supported by\n`rtcCommitScene`. Therefore `rtcCommitScene` can get called from\nmultiple TBB worker threads concurrently for the same scene. The\n`rtcCommitScene` function will then internally isolate the scene\nconstruction using a tbb::isolated\\_task\\_group. The alternative\napproach of using `rtcJoinCommitScene` which uses an tbb:task\\_arena\ninternally, is not recommended due to it's high runtime overhead.\n\nIf scene geometries get modified or attached or detached, the\n`rtcCommitScene` call must be invoked before performing any further ray\nqueries for the scene; otherwise the effect of the ray query is\nundefined. The modification of a geometry, committing the scene, and\ntracing of rays must always happen sequentially, and never at the same\ntime. Any API call that sets a property of the scene or geometries\ncontained in the scene count as scene modification, e.g. including\nsetting of intersection filter functions.\n\nThe kind of acceleration structure built can be influenced using scene\nflags (see `rtcSetSceneFlags`), and the quality can be specified using\nthe `rtcSetSceneBuildQuality` function.\n\nEmbree silently ignores primitives during spatial acceleration\nstructure construction that would cause numerical issues,\ne.g. primitives containing NaNs, INFs, or values greater than 1.844E18f\n(as no reasonable calculations can be performed with such values\nwithout causing overflows).\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcJoinCommitScene]\n\n```{=tex}\n\n```\nrtcJoinCommitScene\n------------------\n\n#### NAME {#name}\n\n    rtcJoinCommitScene - commits the scene from multiple threads\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcJoinCommitScene(RTCScene scene);\n\n#### DESCRIPTION {#description}\n\nThe `rtcJoinCommitScene` function commits all changes for the specified\nscene (`scene` argument). The scene commit internally triggers building\nof a spatial acceleration structure for the scene. Ray queries can be\nperformed after scene changes got properly committed.\n\nThe `rtcJoinCommitScene` function can get called from multiple user\nthreads which will all cooperate in the build operation. All threads\ncalling into this function will return from `rtcJoinCommitScene` after\nthe scene commit is finished. All threads must consistently call\n`rtcJoinCommitScene` and not `rtcCommitScene`.\n\nIn contrast to the `rtcCommitScene` function, the `rtcJoinCommitScene`\nfunction can be called from multiple user threads, while the\n`rtcCommitScene` can only get called from multiple TBB worker threads\nwhen used concurrently. For optimal performance we strongly recommend\nusing TBB inside the application together with the `rtcCommitScene`\nfunction and to avoid using the `rtcJoinCommitScene` function.\n\nThe `rtcJoinCommitScene` feature allows a flexible way to lazily create\nhierarchies during rendering. A thread reaching a not-yet-constructed\nsub-scene of a two-level scene can generate the sub-scene geometry and\ncall `rtcJoinCommitScene` on that just generated scene. During\nconstruction, further threads reaching the not-yet-built scene can join\nthe build operation by also invoking `rtcJoinCommitScene`. A thread\nthat calls `rtcJoinCommitScene` after the build finishes will directly\nreturn from the `rtcJoinCommitScene` call.\n\nMultiple scene commit operations on different scenes can be running at\nthe same time, hence it is possible to commit many small scenes in\nparallel, distributing the commits to many threads.\n\nWhen using Embree with the Intel® Threading Building Blocks (which is\nthe default), threads that call `rtcJoinCommitScene` will join the\nbuild operation, but other TBB worker threads might also participate in\nthe build. To avoid thread oversubscription, we recommend using TBB\nalso inside the application. Further, the join mode only works properly\nstarting with TBB v4.4 Update 1. For earlier TBB versions, threads that\ncall `rtcJoinCommitScene` to join a running build will just trigger the\nbuild and wait for the build to finish. Further, old TBB versions with\n`TBB_INTERFACE_VERSION_MAJOR < 8` do not support `rtcJoinCommitScene`,\nand invoking this function will result in an error.\n\nWhen using Embree with the internal tasking system, only threads that\ncall `rtcJoinCommitScene` will perform the build operation, and no\nadditional worker threads will be scheduled.\n\nWhen using Embree with the Parallel Patterns Library (PPL),\n`rtcJoinCommitScene` is not supported and calling that function will\nresult in an error.\n\nTo detect whether `rtcJoinCommitScene` is supported, use the\n`rtcGetDeviceProperty` function.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcCommitScene], [rtcGetDeviceProperty]\n\n```{=tex}\n\n```\nrtcSetSceneProgressMonitorFunction\n----------------------------------\n\n#### NAME {#name}\n\n    rtcSetSceneProgressMonitorFunction - registers a callback\n      to track build progress\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    typedef bool (*RTCProgressMonitorFunction)(\n      void* ptr,\n      double n\n    );\n\n    void rtcSetSceneProgressMonitorFunction(\n      RTCScene scene,\n      RTCProgressMonitorFunction progress,\n      void* userPtr\n    );\n\n#### DESCRIPTION {#description}\n\nEmbree supports a progress monitor callback mechanism that can be used\nto report progress of hierarchy build operations and to cancel build\noperations.\n\nThe `rtcSetSceneProgressMonitorFunction` registers a progress monitor\ncallback function (`progress` argument) with payload (`userPtr`\nargument) for the specified scene (`scene` argument).\n\nOnly a single callback function can be registered per scene, and\nfurther invocations overwrite the previously set callback function.\nPassing `NULL` as function pointer disables the registered callback\nfunction.\n\nOnce registered, Embree will invoke the callback function multiple\ntimes during hierarchy build operations of the scene, by passing the\npayload as set at registration time (`userPtr` argument), and a double\nin the range $[0, 1]$ which estimates the progress of the operation\n(`n` argument). The callback function might be called from multiple\nthreads concurrently.\n\nWhen returning `true` from the callback function, Embree will continue\nthe build operation normally. When returning `false`, Embree will\ncancel the build operation with the `RTC_ERROR_CANCELLED` error code.\nIssuing multiple cancel requests for the same build operation is\nallowed.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcNewScene]\n\n```{=tex}\n\n```\nrtcSetSceneBuildQuality\n-----------------------\n\n#### NAME {#name}\n\n    rtcSetSceneBuildQuality - sets the build quality for\n      the scene\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcSetSceneBuildQuality(\n      RTCScene scene,\n      enum RTCBuildQuality quality\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcSetSceneBuildQuality` function sets the build quality\n(`quality` argument) for the specified scene (`scene` argument).\nPossible values for the build quality are:\n\n-   `RTC_BUILD_QUALITY_LOW`: Create lower quality data structures,\n    e.g. for dynamic scenes. A two-level spatial index structure is\n    built when enabling this mode, which supports fast partial scene\n    updates, and allows for setting a per-geometry build quality\n    through the `rtcSetGeometryBuildQuality` function.\n\n-   `RTC_BUILD_QUALITY_MEDIUM`: Default build quality for most usages.\n    Gives a good compromise between build and render performance.\n\n-   `RTC_BUILD_QUALITY_HIGH`: Create higher quality data structures for\n    final-frame rendering. For certain geometry types this enables a\n    spatial split BVH. When high quality mode is enabled, filter\n    callbacks may be invoked multiple times for the same geometry.\n\nSelecting a higher build quality results in better rendering\nperformance but slower scene commit times. The default build quality\nfor a scene is `RTC_BUILD_QUALITY_MEDIUM`.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcSetGeometryBuildQuality]\n\n```{=tex}\n\n```\nrtcSetSceneFlags\n----------------\n\n#### NAME {#name}\n\n    rtcSetSceneFlags - sets the flags for the scene\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    enum RTCSceneFlags\n    {\n      RTC_SCENE_FLAG_NONE                    = 0,\n      RTC_SCENE_FLAG_DYNAMIC                 = (1 << 0),\n      RTC_SCENE_FLAG_COMPACT                 = (1 << 1),\n      RTC_SCENE_FLAG_ROBUST                  = (1 << 2),\n      RTC_SCENE_FLAG_FILTER_FUNCTION_IN_ARGUMENTS = (1 << 3)\n    };\n\n    void rtcSetSceneFlags(RTCScene scene, enum RTCSceneFlags flags);\n\n#### DESCRIPTION {#description}\n\nThe `rtcSetSceneFlags` function sets the scene flags (`flags` argument)\nfor the specified scene (`scene` argument). Possible scene flags are:\n\n-   `RTC_SCENE_FLAG_NONE`: No flags set.\n\n-   `RTC_SCENE_FLAG_DYNAMIC`: Provides better build performance for\n    dynamic scenes (but also higher memory consumption).\n\n-   `RTC_SCENE_FLAG_COMPACT`: Uses compact acceleration structures and\n    avoids algorithms that consume much memory.\n\n-   `RTC_SCENE_FLAG_ROBUST`: Uses acceleration structures that allow\n    for robust traversal, and avoids optimizations that reduce\n    arithmetic accuracy. This mode is typically used for avoiding\n    artifacts caused by rays shooting through edges of neighboring\n    primitives.\n\n-   `RTC_SCENE_FLAG_FILTER_FUNCTION_IN_ARGUMENTS`: Enables scene\n    support for filter functions passed as argument to the traversal\n    functions. See Section [rtcInitIntersectArguments] and\n    [rtcInitOccludedArguments] for more details.\n\nMultiple flags can be enabled using an `or` operation,\ne.g. `RTC_SCENE_FLAG_COMPACT | RTC_SCENE_FLAG_ROBUST`.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcGetSceneFlags]\n\n```{=tex}\n\n```\nrtcGetSceneFlags\n----------------\n\n#### NAME {#name}\n\n    rtcGetSceneFlags - returns the flags of the scene\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    enum RTCSceneFlags rtcGetSceneFlags(RTCScene scene);\n\n#### DESCRIPTION {#description}\n\nQueries the flags of a scene. This function can be useful when setting\nindividual flags, e.g. to just set the robust mode without changing\nother flags the following way:\n\n    RTCSceneFlags flags = rtcGetSceneFlags(scene);\n    rtcSetSceneFlags(scene, RTC_SCENE_FLAG_ROBUST | flags);\n\n#### EXIT STATUS {#exit-status}\n\nOn failure `RTC_SCENE_FLAG_NONE` is returned and an error code is set\nthat can be queried using `rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcSetSceneFlags]\n\n```{=tex}\n\n```\nrtcGetSceneBounds\n-----------------\n\n#### NAME {#name}\n\n    rtcGetSceneBounds - returns the axis-aligned bounding box of the scene\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    struct RTCORE_ALIGN(16) RTCBounds\n    {\n      float lower_x, lower_y, lower_z, align0;\n      float upper_x, upper_y, upper_z, align1;\n    };\n\n    void rtcGetSceneBounds(\n      RTCScene scene,\n      struct RTCBounds* bounds_o\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcGetSceneBounds` function queries the axis-aligned bounding box\nof the specified scene (`scene` argument) and stores that bounding box\nto the provided destination pointer (`bounds_o` argument). The stored\nbounding box consists of lower and upper bounds for the x, y, and z\ndimensions as specified by the `RTCBounds` structure.\n\nThe provided destination pointer must be aligned to 16 bytes. The\nfunction may be invoked only after committing the scene; otherwise the\nresult is undefined.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcGetSceneLinearBounds], [rtcCommitScene], [rtcJoinCommitScene]\n\n```{=tex}\n\n```\nrtcGetSceneLinearBounds\n-----------------------\n\n#### NAME {#name}\n\n    rtcGetSceneLinearBounds - returns the linear bounds of the scene\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    struct RTCORE_ALIGN(16) RTCLinearBounds\n    {\n      RTCBounds bounds0;\n      RTCBounds bounds1;\n    };\n\n    void rtcGetSceneLinearBounds(\n      RTCScene scene,\n      struct RTCLinearBounds* bounds_o\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcGetSceneLinearBounds` function queries the linear bounds of the\nspecified scene (`scene` argument) and stores them to the provided\ndestination pointer (`bounds_o` argument). The stored linear bounds\nconsist of bounding boxes for time 0 (`bounds0` member) and time 1\n(`bounds1` member) as specified by the `RTCLinearBounds` structure.\nLinearly interpolating these bounds to a specific time `t` yields\nbounds for the geometry at that time.\n\nThe provided destination pointer must be aligned to 16 bytes. The\nfunction may be called only after committing the scene, otherwise the\nresult is undefined.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcGetSceneBounds], [rtcCommitScene], [rtcJoinCommitScene]\n\n```{=tex}\n\n```\nrtcNewGeometry\n--------------\n\n#### NAME {#name}\n\n    rtcNewGeometry - creates a new geometry object\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    enum RTCGeometryType\n    {\n     RTC_GEOMETRY_TYPE_TRIANGLE,\n     RTC_GEOMETRY_TYPE_QUAD,\n     RTC_GEOMETRY_TYPE_SUBDIVISION,\n     RTC_GEOMETRY_TYPE_FLAT_LINEAR_CURVE,\n     RTC_GEOMETRY_TYPE_FLAT_BEZIER_CURVE,\n     RTC_GEOMETRY_TYPE_FLAT_BSPLINE_CURVE,\n     RTC_GEOMETRY_TYPE_FLAT_HERMITE_CURVE,\n     RTC_GEOMETRY_TYPE_FLAT_CATMULL_ROM_CURVE,\n     RTC_GEOMETRY_TYPE_NORMAL_ORIENTED_BEZIER_CURVE,\n     RTC_GEOMETRY_TYPE_NORMAL_ORIENTED_BSPLINE_CURVE,\n     RTC_GEOMETRY_TYPE_NORMAL_ORIENTED_HERMITE_CURVE,\n     RTC_GEOMETRY_TYPE_NORMAL_ORIENTED_CATMULL_ROM_CURVE,\n     RTC_GEOMETRY_TYPE_CONE_LINEAR_CURVE,\n     RTC_GEOMETRY_TYPE_ROUND_LINEAR_CURVE,\n     RTC_GEOMETRY_TYPE_ROUND_BEZIER_CURVE,\n     RTC_GEOMETRY_TYPE_ROUND_BSPLINE_CURVE,\n     RTC_GEOMETRY_TYPE_ROUND_HERMITE_CURVE,\n     RTC_GEOMETRY_TYPE_ROUND_CATMULL_ROM_CURVE,\n     RTC_GEOMETRY_TYPE_GRID,\n     RTC_GEOMETRY_TYPE_SPHERE_POINT,\n     RTC_GEOMETRY_TYPE_DISC_POINT,\n     RTC_GEOMETRY_TYPE_ORIENTED_DISC_POINT,\n     RTC_GEOMETRY_TYPE_USER,\n     RTC_GEOMETRY_TYPE_INSTANCE,\n     RTC_GEOMETRY_TYPE_INSTANCE_ARRAY,\n    };\n\n    RTCGeometry rtcNewGeometry(\n      RTCDevice device,\n      enum RTCGeometryType type\n    );\n\n#### DESCRIPTION {#description}\n\nGeometries are objects that represent an array of primitives of the\nsame type. The `rtcNewGeometry` function creates a new geometry of\nspecified type (`type` argument) bound to the specified device\n(`device` argument) and returns a handle to this geometry. The geometry\nobject is reference counted with an initial reference count of 1. The\ngeometry handle can be released using the `rtcReleaseGeometry` API\ncall.\n\nSupported geometry types are triangle meshes\n(`RTC_GEOMETRY_TYPE_TRIANGLE` type), quad meshes (triangle pairs)\n(`RTC_GEOMETRY_TYPE_QUAD` type), Catmull-Clark subdivision surfaces\n(`RTC_GEOMETRY_TYPE_SUBDIVISION` type), curve geometries with different\nbases (`RTC_GEOMETRY_TYPE_FLAT_LINEAR_CURVE`,\n`RTC_GEOMETRY_TYPE_FLAT_BEZIER_CURVE`,\\\n`RTC_GEOMETRY_TYPE_FLAT_BSPLINE_CURVE`,\n`RTC_GEOMETRY_TYPE_FLAT_HERMITE_CURVE`,\\\n`RTC_GEOMETRY_TYPE_FLAT_CATMULL_ROM_CURVE`,\n`RTC_GEOMETRY_TYPE_NORMAL_ORIENTED_BEZIER_CURVE`,\n`RTC_GEOMETRY_TYPE_NORMAL_ORIENTED_BSPLINE_CURVE`,\n`RTC_GEOMETRY_TYPE_NORMAL_ORIENTED_HERMITE_CURVE`,\n`RTC_GEOMETRY_TYPE_NORMAL_ORIENTED_CATMULL_ROM_CURVE`,\n`RTC_GEOMETRY_TYPE_CONE_LINEAR_CURVE`,\n`RTC_GEOMETRY_TYPE_ROUND_LINEAR_CURVE`,\n`RTC_GEOMETRY_TYPE_ROUND_BEZIER_CURVE`,\n`RTC_GEOMETRY_TYPE_ROUND_BSPLINE_CURVE`,\n`RTC_GEOMETRY_TYPE_ROUND_HERMITE_CURVE`,\n`RTC_GEOMETRY_TYPE_ROUND_CATMULL_ROM_CURVE` types) grid meshes\n(`RTC_GEOMETRY_TYPE_GRID`), point geometries\n(`RTC_GEOMETRY_TYPE_SPHERE_POINT`, `RTC_GEOMETRY_TYPE_DISC_POINT`,\n`RTC_TYPE_ORIENTED_DISC_POINT`), user-defined geometries\n(`RTC_GEOMETRY_TYPE_USER`), instances (`RTC_GEOMETRY_TYPE_INSTANCE`),\nand instance arrays (`RTC_GEOMETRY_TYPE_INSTANCE_ARRAY`).\n\nThe types `RTC_GEOMETRY_TYPE_ROUND_BEZIER_CURVE`,\n`RTC_GEOMETRY_TYPE_ROUND_BSPLINE_CURVE`, and\n`RTC_GEOMETRY_TYPE_ROUND_CATMULL_ROM_CURVE` will treat the curve as a\nsweep surface of a varying-radius circle swept tangentially along the\ncurve. The types `RTC_GEOMETRY_TYPE_FLAT_BEZIER_CURVE`,\n`RTC_GEOMETRY_TYPE_FLAT_BSPLINE_CURVE`, and\n`RTC_GEOMETRY_TYPE_FLAT_CATMULL_ROM_CURVE` use ray-facing ribbons as a\nfaster-to-intersect approximation.\n\nAfter construction, geometries are enabled by default and not attached\nto any scene. Geometries can be disabled (`rtcDisableGeometry` call),\nand enabled again (`rtcEnableGeometry` call). A geometry can be\nattached to multiple scenes using the `rtcAttachGeometry` call (or\n`rtcAttachGeometryByID` call), and detached using the\n`rtcDetachGeometry` call. During attachment, a geometry ID is assigned\nto the geometry (or assigned by the user when using the\n`rtcAttachGeometryByID` call), which uniquely identifies the geometry\ninside that scene. This identifier is returned when primitives of the\ngeometry are hit in later ray queries for the scene.\n\nGeometries can also be modified, including their vertex and index\nbuffers. After modifying a buffer, `rtcUpdateGeometryBuffer` must be\ncalled to notify that the buffer got modified.\n\nThe application can use the `rtcSetGeometryUserData` function to set a\nuser data pointer to its own geometry representation, and later read\nout this pointer using the `rtcGetGeometryUserData` function.\n\nAfter setting up the geometry or modifying it, `rtcCommitGeometry` must\nbe called to finish the geometry setup. After committing the geometry,\nvertex data interpolation can be performed using the `rtcInterpolate`\nand `rtcInterpolateN` functions.\n\nA build quality can be specified for a geometry using the\n`rtcSetGeometryBuildQuality` function, to balance between acceleration\nstructure build performance and ray query performance. The build\nquality per geometry will be used if a two-level acceleration structure\nis built internally, which is the case if the `RTC_BUILD_QUALITY_LOW`\nis set as the scene build quality. See Section\n[rtcSetSceneBuildQuality] for more details.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure `NULL` is returned and an error code is set that can be\nqueried using `rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcEnableGeometry], [rtcDisableGeometry], [rtcAttachGeometry],\n[rtcAttachGeometryByID], [rtcUpdateGeometryBuffer],\n[rtcSetGeometryUserData], [rtcGetGeometryUserData],\n[rtcCommitGeometry], [rtcInterpolate], [rtcInterpolateN],\n[rtcSetGeometryBuildQuality], [rtcSetSceneBuildQuality],\n[RTC\\_GEOMETRY\\_TYPE\\_TRIANGLE], [RTC\\_GEOMETRY\\_TYPE\\_QUAD],\n[RTC\\_GEOMETRY\\_TYPE\\_SUBDIVISION], [RTC\\_GEOMETRY\\_TYPE\\_CURVE],\n[RTC\\_GEOMETRY\\_TYPE\\_GRID], [RTC\\_GEOMETRY\\_TYPE\\_POINT],\n[RTC\\_GEOMETRY\\_TYPE\\_USER], [RTC\\_GEOMETRY\\_TYPE\\_INSTANCE],\n[RTC\\_GEOMETRY\\_TYPE\\_INSTANCE\\_ARRAY]\n\n```{=tex}\n\n```\nRTC\\_GEOMETRY\\_TYPE\\_TRIANGLE\n-----------------------------\n\n#### NAME {#name}\n\n    RTC_GEOMETRY_TYPE_TRIANGLE - triangle geometry type\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    RTCGeometry geometry =\n      rtcNewGeometry(device, RTC_GEOMETRY_TYPE_TRIANGLE);\n\n#### DESCRIPTION {#description}\n\nTriangle meshes are created by passing `RTC_GEOMETRY_TYPE_TRIANGLE` to\nthe `rtcNewGeometry` function call. The triangle indices can be\nspecified by setting an index buffer (`RTC_BUFFER_TYPE_INDEX` type) and\nthe triangle vertices by setting a vertex buffer\n(`RTC_BUFFER_TYPE_VERTEX` type). See `rtcSetGeometryBuffer` and\n`rtcSetSharedGeometryBuffer` for more details on how to set buffers.\nThe index buffer must contain an array of three 32-bit indices per\ntriangle (`RTC_FORMAT_UINT3` format) and the number of primitives is\ninferred from the size of that buffer. The vertex buffer must contain\nan array of single precision `x`, `y`, `z` floating point coordinates\n(`RTC_FORMAT_FLOAT3` format), and the number of vertices are inferred\nfrom the size of that buffer. The vertex buffer can be at most 16 GB\nlarge.\n\nThe parametrization of a triangle uses the first vertex `p0` as base\npoint, the vector `p1 - p0` as u-direction and the vector `p2 - p0` as\nv-direction. Thus vertex attributes `t0,t1,t2` can be linearly\ninterpolated over the triangle the following way:\n\n    t_uv = (1-u-v)*t0 + u*t1 + v*t2\n         = t0 + u*(t1-t0) + v*(t2-t0)\n\nA triangle whose vertices are laid out counter-clockwise has its\ngeometry normal pointing upwards outside the front face, like\nillustrated in the following picture:\n\n![][imgTriangleUV]\n\nFor multi-segment motion blur, the number of time steps must be first\nspecified using the `rtcSetGeometryTimeStepCount` call. Then a vertex\nbuffer for each time step can be set using different buffer slots, and\nall these buffers have to have the same stride and size.\n\nAlso see tutorial [Triangle Geometry] for an example of how to create\ntriangle meshes.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure `NULL` is returned and an error code is set that be get\nqueried using `rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcNewGeometry]\n\n```{=tex}\n\n```\nRTC\\_GEOMETRY\\_TYPE\\_QUAD\n-------------------------\n\n#### NAME {#name}\n\n    RTC_GEOMETRY_TYPE_QUAD - quad geometry type\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    RTCGeometry geometry =\n      rtcNewGeometry(device, RTC_GEOMETRY_TYPE_QUAD);\n\n#### DESCRIPTION {#description}\n\nQuad meshes are created by passing `RTC_GEOMETRY_TYPE_QUAD` to the\n`rtcNewGeometry` function call. The quad indices can be specified by\nsetting an index buffer (`RTC_BUFFER_TYPE_INDEX` type) and the quad\nvertices by setting a vertex buffer (`RTC_BUFFER_TYPE_VERTEX` type).\nSee `rtcSetGeometryBuffer` and `rtcSetSharedGeometryBuffer` for more\ndetails on how to set buffers. The index buffer contains an array of\nfour 32-bit indices per quad (`RTC_FORMAT_UINT4` format), and the\nnumber of primitives is inferred from the size of that buffer. The\nvertex buffer contains an array of single precision `x`, `y`, `z`\nfloating point coordinates (`RTC_FORMAT_FLOAT3` format), and the number\nof vertices is inferred from the size of that buffer. The vertex buffer\ncan be at most 16 GB large.\n\nA quad is internally handled as a pair of two triangles `v0,v1,v3` and\n`v2,v3,v1`, with the `u'`/`v'` coordinates of the second triangle\ncorrected by `u = 1-u'` and `v = 1-v'` to produce a quad\nparametrization where `u` and `v` are in the range 0 to 1. Thus the\nparametrization of a quad uses the first vertex `p0` as base point, and\nthe vector `p1 - p0` as `u`-direction, and `p3 - p0` as v-direction.\nThus vertex attributes `t0,t1,t2,t3` can be bilinearly interpolated\nover the quadrilateral the following way:\n\n    t_uv = (1-v)((1-u)*t0 + u*t1) + v*((1-u)*t3 + u*t2)\n\nMixed triangle/quad meshes are supported by encoding a triangle as a\nquad, which can be achieved by replicating the last triangle vertex\n(`v0,v1,v2` -\\> `v0,v1,v2,v2`). This way the second triangle is a line\n(which can never get hit), and the parametrization of the first\ntriangle is compatible with the standard triangle parametrization.\n\nA quad whose vertices are laid out counter-clockwise has its geometry\nnormal pointing upwards outside the front face, like illustrated in the\nfollowing picture.\n\n![][imgQuadUV]\n\nFor multi-segment motion blur, the number of time steps must be first\nspecified using the `rtcSetGeometryTimeStepCount` call. Then a vertex\nbuffer for each time step can be set using different buffer slots, and\nall these buffers must have the same stride and size.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure `NULL` is returned and an error code is set that can be\nqueried using `rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcNewGeometry]\n\n```{=tex}\n\n```\nRTC\\_GEOMETRY\\_TYPE\\_GRID\n-------------------------\n\n#### NAME {#name}\n\n    RTC_GEOMETRY_TYPE_GRID - grid geometry type\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    RTCGeometry geometry =\n      rtcNewGeometry(device, RTC_GEOMETRY_TYPE_GRID);\n\n#### DESCRIPTION {#description}\n\nGrid meshes are created by passing `RTC_GEOMETRY_TYPE_GRID` to the\n`rtcNewGeometry` function call, and contain an array of grid\nprimitives. This array of grids can be specified by setting up a grid\nbuffer (with `RTC_BUFFER_TYPE_GRID` type and `RTC_FORMAT_GRID` format)\nand the grid mesh vertices by setting a vertex buffer\n(`RTC_BUFFER_TYPE_VERTEX` type). See `rtcSetGeometryBuffer` and\n`rtcSetSharedGeometryBuffer` for more details on how to set buffers.\nThe number of grid primitives in the grid mesh is inferred from the\nsize of the grid buffer.\n\nThe vertex buffer contains an array of single precision `x`, `y`, `z`\nfloating point coordinates (`RTC_FORMAT_FLOAT3` format), and the number\nof vertices is inferred from the size of that buffer.\n\nEach grid in the grid buffer is of the type `RTCGrid`:\n\n    struct RTCGrid\n    {\n      unsigned int startVertexID;\n      unsigned int stride;\n      unsigned short width,height; \n    };\n\nThe `RTCGrid` structure describes a 2D grid of vertices (with respect\nto the vertex buffer of the grid mesh). The `width` and `height`\nmembers specify the number of vertices in u and v direction,\ne.g. setting both `width` and `height` to 3 sets up a 3×3 vertex grid.\nThe maximum allowed `width` and `height` is 32767. The `startVertexID`\nspecifies the ID of the top-left vertex in the vertex grid, while the\n`stride` parameter specifies a stride (in number of vertices) used to\nstep to the next row.\n\nA vertex grid of dimensions `width` and `height` is treated as a\n`(width-1)` x `(height-1)` grid of `quads` (triangle-pairs), with the\nsame shared edge handling as for regular quad meshes. However, the\n`u`/`v` coordinates have the uniform range `[0..1]` for an entire\nvertex grid. The `u` direction follows the `width` of the grid while\nthe `v` direction the `height`.\n\nFor multi-segment motion blur, the number of time steps must be first\nspecified using the `rtcSetGeometryTimeStepCount` call. Then a vertex\nbuffer for each time step can be set using different buffer slots, and\nall these buffers must have the same stride and size.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure `NULL` is returned and an error code is set that can be\nqueried using `rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcNewGeometry]\n\n```{=tex}\n\n```\nRTC\\_GEOMETRY\\_TYPE\\_SUBDIVISION\n--------------------------------\n\n#### NAME {#name}\n\n    RTC_GEOMETRY_TYPE_SUBDIVISION - subdivision geometry type\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    RTCGeometry geometry =\n      rtcNewGeometry(device, RTC_GEOMETRY_TYPE_SUBDIVISION);\n\n#### DESCRIPTION {#description}\n\nCatmull-Clark subdivision meshes are supported, including support for\nedge creases, vertex creases, holes, non-manifold geometry, and\nface-varying interpolation. The number of vertices per face can be in\nthe range of 3 to 15 vertices (triangles, quadrilateral, pentagons,\netc).\n\nSubdivision meshes are created by passing\n`RTC_GEOMETRY_TYPE_SUBDIVISION` to the `rtcNewGeometry` function.\nVarious buffers need to be set by the application to set up the\nsubdivision mesh. See `rtcSetGeometryBuffer` and\n`rtcSetSharedGeometryBuffer` for more details on how to set buffers.\nThe face buffer (`RTC_BUFFER_TYPE_FACE` type and `RTC_FORMAT_UINT`\nformat) contains the number of edges/indices of each face (3 to 15),\nand the number of faces is inferred from the size of this buffer. The\nindex buffer (`RTC_BUFFER_TYPE_INDEX` type) contains multiple (3 to 15)\n32-bit vertex indices (`RTC_FORMAT_UINT` format) for each face, and the\nnumber of edges is inferred from the size of this buffer. The vertex\nbuffer (`RTC_BUFFER_TYPE_VERTEX` type) stores an array of single\nprecision `x`, `y`, `z` floating point coordinates (`RTC_FORMAT_FLOAT3`\nformat), and the number of vertices is inferred from the size of this\nbuffer.\n\nOptionally, the application may set additional index buffers using\ndifferent buffer slots if multiple topologies are required for\nface-varying interpolation. The standard vertex buffers\n(`RTC_BUFFER_TYPE_VERTEX`) are always bound to the geometry topology\n(topology 0) thus use `RTC_BUFFER_TYPE_INDEX` with buffer slot 0. User\nvertex data interpolation may use different topologies as described\nlater.\n\nOptionally, the application can set up the hole buffer\n(`RTC_BUFFER_TYPE_HOLE`) which contains an array of 32-bit indices\n(`RTC_FORMAT_UINT` format) of faces that should be considered\nnon-existing in all topologies. The number of holes is inferred from\nthe size of this buffer.\n\nOptionally, the application can fill the level buffer\n(`RTC_BUFFER_TYPE_LEVEL`) with a tessellation rate for each of the\nedges of each face. This buffer must have the same size as the index\nbuffer. The tessellation level is a positive floating point value\n(`RTC_FORMAT_FLOAT` format) that specifies how many quads along the\nedge should be generated during tessellation. If no level buffer is\nspecified, a level of 1 is used. The maximally supported edge level is\n4096, and larger levels are clamped to that value. Note that edges may\nbe shared between (typically 2) faces. To guarantee a watertight\ntessellation, the level of these shared edges should be identical. A\nuniform tessellation rate for an entire subdivision mesh can be set by\nusing the `rtcSetGeometryTessellationRate` function. The existence of a\nlevel buffer has precedence over the uniform tessellation rate.\n\nOptionally, the application can fill the sparse edge crease buffers to\nmake edges appear sharper. The edge crease index buffer\n(`RTC_BUFFER_TYPE_EDGE_CREASE_INDEX`) contains an array of pairs of\n32-bit vertex indices (`RTC_FORMAT_UINT2` format) that specify\nunoriented edges in the geometry topology. The edge crease weight\nbuffer (`RTC_BUFFER_TYPE_EDGE_CREASE_WEIGHT`) stores for each of these\ncrease edges a positive floating point weight (`RTC_FORMAT_FLOAT`\nformat). The number of edge creases is inferred from the size of these\nbuffers, which has to be identical. The larger a weight, the sharper\nthe edge. Specifying a weight of infinity is supported and marks an\nedge as infinitely sharp. Storing an edge multiple times with the same\ncrease weight is allowed, but has lower performance. Storing an edge\nmultiple times with different crease weights results in undefined\nbehavior. For a stored edge (i,j), the reverse direction edges (j,i) do\nnot have to be stored, as both are considered the same unoriented edge.\nEdge crease features are shared between all topologies.\n\nOptionally, the application can fill the sparse vertex crease buffers\nto make vertices appear sharper. The vertex crease index buffer\n(`RTC_BUFFER_TYPE_VERTEX_CREASE_INDEX`), contains an array of 32-bit\nvertex indices (`RTC_FORMAT_UINT` format) to specify a set of vertices\nfrom the geometry topology. The vertex crease weight buffer\n(`RTC_BUFFER_TYPE_VERTEX_CREASE_WEIGHT`) specifies for each of these\nvertices a positive floating point weight (`RTC_FORMAT_FLOAT` format).\nThe number of vertex creases is inferred from the size of these\nbuffers, and has to be identical. The larger a weight, the sharper the\nvertex. Specifying a weight of infinity is supported and makes the\nvertex infinitely sharp. Storing a vertex multiple times with the same\ncrease weight is allowed, but has lower performance. Storing a vertex\nmultiple times with different crease weights results in undefined\nbehavior. Vertex crease features are shared between all topologies.\n\nSubdivision modes can be used to force linear interpolation for parts\nof the subdivision mesh; see `rtcSetGeometrySubdivisionMode` for more\ndetails.\n\nFor multi-segment motion blur, the number of time steps must be first\nspecified using the `rtcSetGeometryTimeStepCount` call. Then a vertex\nbuffer for each time step can be set using different buffer slots, and\nall these buffers have to have the same stride and size.\n\nAlso see tutorial [Subdivision Geometry] for an example of how to\ncreate subdivision surfaces.\n\n#### Parametrization\n\nThe parametrization for subdivision faces is different for\nquadrilaterals and non-quadrilateral faces.\n\nThe parametrization of a quadrilateral face uses the first vertex `p0`\nas base point, and the vector `p1 - p0` as u-direction and `p3 - p0` as\nv-direction.\n\nThe parametrization for all other face types (with number of vertices\nnot equal 4), have a special parametrization where the subpatch ID `n`\n(of the `n`-th quadrilateral that would be obtained by a single\nsubdivision step) and the local hit location inside this quadrilateral\nare encoded in the UV coordinates. The following code extracts the\nsub-patch ID `i` and local UVs of this subpatch:\n\n    unsigned int l = floorf(0.5f*U);\n    unsigned int h = floorf(0.5f*V);\n    unsigned int i = 4*h+l;\n    float u = 2.0f*fracf(0.5f*U)-0.5f;\n    float v = 2.0f*fracf(0.5f*V)-0.5f;\n\nThis encoding allows local subpatch UVs to be in the range `[-0.5,1.5[`\nthus negative subpatch UVs can be passed to `rtcInterpolate` to sample\nsubpatches slightly out of bounds. This can be useful to calculate\nderivatives using finite differences if required. The encoding further\nhas the property that one can just move the value `u` (or `v`) on a\nsubpatch by adding `du` (or `dv`) to the special UV encoding as long as\nit does not fall out of the `[-0.5,1.5[` range.\n\nTo smoothly interpolate vertex attributes over the subdivision surface\nwe recommend using the `rtcInterpolate` function, which will apply the\nstandard subdivision rules for interpolation and automatically takes\ncare of the special UV encoding for non-quadrilaterals.\n\n#### Face-Varying Data\n\nFace-varying interpolation is supported through multiple topologies per\nsubdivision mesh and binding such topologies to vertex attribute\nbuffers to interpolate. This way, texture coordinates may use a\ndifferent topology with additional boundaries to construct separate UV\nregions inside one subdivision mesh.\n\nEach such topology `i` has a separate index buffer (specified using\n`RTC_BUFFER_TYPE_INDEX` with buffer slot `i`) and separate subdivision\nmode that can be set using `rtcSetGeometrySubdivisionMode`. A vertex\nattribute buffer `RTC_BUFFER_TYPE_VERTEX_ATTRIBUTE` bound to a buffer\nslot `j` can be assigned to use a topology for interpolation using the\n`rtcSetGeometryVertexAttributeTopology` call.\n\nThe face buffer (`RTC_BUFFER_TYPE_FACE` type) is shared between all\ntopologies, which means that the `n`-th primitive always has the same\nnumber of vertices (e.g. being a triangle or a quad) for each topology.\nHowever, the indices of the topologies themselves may be different.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure `NULL` is returned and an error code is set that can be\nqueried using `rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcNewGeometry]\n\n```{=tex}\n\n```\nRTC\\_GEOMETRY\\_TYPE\\_CURVE\n--------------------------\n\n#### NAME {#name}\n\n    RTC_GEOMETRY_TYPE_FLAT_LINEAR_CURVE -\n      flat curve geometry with linear basis\n\n    RTC_GEOMETRY_TYPE_FLAT_BEZIER_CURVE -\n      flat curve geometry with cubic Bézier basis\n\n    RTC_GEOMETRY_TYPE_FLAT_BSPLINE_CURVE - \n      flat curve geometry with cubic B-spline basis\n\n    RTC_GEOMETRY_TYPE_FLAT_HERMITE_CURVE - \n      flat curve geometry with cubic Hermite basis\n\n    RTC_GEOMETRY_TYPE_FLAT_CATMULL_ROM_CURVE - \n      flat curve geometry with Catmull-Rom basis\n\n    RTC_GEOMETRY_TYPE_NORMAL_ORIENTED_BEZIER_CURVE -\n      flat normal oriented curve geometry with cubic Bézier basis\n\n    RTC_GEOMETRY_TYPE_NORMAL_ORIENTED_BSPLINE_CURVE - \n      flat normal oriented curve geometry with cubic B-spline basis\n\n    RTC_GEOMETRY_TYPE_NORMAL_ORIENTED_HERMITE_CURVE - \n      flat normal oriented curve geometry with cubic Hermite basis\n\n    RTC_GEOMETRY_TYPE_NORMAL_ORIENTED_CATMULL_ROM_CURVE - \n      flat normal oriented curve geometry with Catmull-Rom basis\n\n    RTC_GEOMETRY_TYPE_CONE_LINEAR_CURVE -\n      capped cone curve geometry with linear basis - discontinuous at edge boundaries\n\n    RTC_GEOMETRY_TYPE_ROUND_LINEAR_CURVE -\n      capped cone curve geometry with linear basis and spherical ending\n\n    RTC_GEOMETRY_TYPE_ROUND_BEZIER_CURVE -\n      swept surface curve geometry with cubic Bézier basis\n\n    RTC_GEOMETRY_TYPE_ROUND_BSPLINE_CURVE -\n      swept surface curve geometry with cubic B-spline basis\n\n    RTC_GEOMETRY_TYPE_ROUND_HERMITE_CURVE -\n      swept surface curve geometry with cubic Hermite basis\n\n    RTC_GEOMETRY_TYPE_ROUND_CATMULL_ROM_CURVE -\n      swept surface curve geometry with Catmull-Rom basis\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    rtcNewGeometry(device, RTC_GEOMETRY_TYPE_FLAT_LINEAR_CURVE);\n    rtcNewGeometry(device, RTC_GEOMETRY_TYPE_FLAT_BEZIER_CURVE);\n    rtcNewGeometry(device, RTC_GEOMETRY_TYPE_FLAT_BSPLINE_CURVE);\n    rtcNewGeometry(device, RTC_GEOMETRY_TYPE_FLAT_HERMITE_CURVE);\n    rtcNewGeometry(device, RTC_GEOMETRY_TYPE_FLAT_CATMULL_ROM_CURVE);\n    rtcNewGeometry(device, RTC_GEOMETRY_TYPE_NORMAL_ORIENTED_BEZIER_CURVE);\n    rtcNewGeometry(device, RTC_GEOMETRY_TYPE_NORMAL_ORIENTED_BSPLINE_CURVE);\n    rtcNewGeometry(device, RTC_GEOMETRY_TYPE_NORMAL_ORIENTED_HERMITE_CURVE);\n    rtcNewGeometry(device, RTC_GEOMETRY_TYPE_NORMAL_ORIENTED_CATMULL_ROM_CURVE);\n    rtcNewGeometry(device, RTC_GEOMETRY_TYPE_CONE_LINEAR_CURVE);\n    rtcNewGeometry(device, RTC_GEOMETRY_TYPE_ROUND_LINEAR_CURVE);\n    rtcNewGeometry(device, RTC_GEOMETRY_TYPE_ROUND_BEZIER_CURVE);\n    rtcNewGeometry(device, RTC_GEOMETRY_TYPE_ROUND_BSPLINE_CURVE);\n    rtcNewGeometry(device, RTC_GEOMETRY_TYPE_ROUND_HERMITE_CURVE);\n    rtcNewGeometry(device, RTC_GEOMETRY_TYPE_ROUND_CATMULL_ROM_CURVE);\n\n#### DESCRIPTION {#description}\n\nCurves with per vertex radii are supported with linear, cubic Bézier,\ncubic B-spline, and cubic Hermite bases. Such curve geometries are\ncreated by passing `RTC_GEOMETRY_TYPE_FLAT_LINEAR_CURVE`,\n`RTC_GEOMETRY_TYPE_FLAT_BEZIER_CURVE`,\n`RTC_GEOMETRY_TYPE_FLAT_BSPLINE_CURVE`,\n`RTC_GEOMETRY_TYPE_FLAT_HERMITE_CURVE`,\n`RTC_GEOMETRY_TYPE_FLAT_CATMULL_ROM_CURVE`,\n`RTC_GEOMETRY_TYPE_NORMAL_ORIENTED_FLAT_BEZIER_CURVE`,\n`RTC_GEOMETRY_TYPE_NORMAL_ORIENTED_FLAT_BSPLINE_CURVE`,\n`RTC_GEOMETRY_TYPE_NORMAL_ORIENTED_FLAT_HERMITE_CURVE`,\n`RTC_GEOMETRY_TYPE_NORMAL_ORIENTED_FLAT_CATMULL_ROM_CURVE`,\n`RTC_GEOMETRY_TYPE_CONE_LINEAR_CURVE`,\n`RTC_GEOMETRY_TYPE_ROUND_LINEAR_CURVE`,\n`RTC_GEOMETRY_TYPE_ROUND_BEZIER_CURVE`,\n`RTC_GEOMETRY_TYPE_ROUND_BSPLINE_CURVE`,\n`RTC_GEOMETRY_TYPE_ROUND_HERMITE_CURVE`, or\n`RTC_GEOMETRY_TYPE_ROUND_CATMULL_ROM_CURVE` to the `rtcNewGeometry`\nfunction. The curve indices can be specified through an index buffer\n(`RTC_BUFFER_TYPE_INDEX`) and the curve vertices through a vertex\nbuffer (`RTC_BUFFER_TYPE_VERTEX`). For the Hermite basis a tangent\nbuffer (`RTC_BUFFER_TYPE_TANGENT`), normal oriented curves a normal\nbuffer (`RTC_BUFFER_TYPE_NORMAL`), and for normal oriented Hermite\ncurves a normal derivative buffer (`RTC_BUFFER_TYPE_NORMAL_DERIVATIVE`)\nhas to get specified additionally. See `rtcSetGeometryBuffer` and\n`rtcSetSharedGeometryBuffer` for more details on how to set buffers.\n\nThe index buffer contains an array of 32-bit indices (`RTC_FORMAT_UINT`\nformat), each pointing to the first control vertex in the vertex\nbuffer, but also to the first tangent in the tangent buffer, and first\nnormal in the normal buffer if these buffers are present.\n\nThe vertex buffer stores each control vertex in the form of a single\nprecision position and radius stored in (`x`, `y`, `z`, `r`) order in\nmemory (`RTC_FORMAT_FLOAT4` format). The number of vertices is inferred\nfrom the size of this buffer. The radii may be smaller than zero but\nthe interpolated radii should always be greater or equal to zero.\nSimilarly, the tangent buffer stores the derivative of each control\nvertex (`x`, `y`, `z`, `r` order and `RTC_FORMAT_FLOAT4` format) and\nthe normal buffer stores a single precision normal per control vertex\n(`x`, `y`, `z` order and `RTC_FORMAT_FLOAT3` format).\n\n##### Linear Basis\n\nFor the linear basis the indices point to the first of 2 consecutive\ncontrol points in the vertex buffer. The first control point is the\nstart and the second control point the end of the line segment. When\nconstructing hair strands in this basis, the end-point can be shared\nwith the start of the next line segment.\n\nFor the linear basis the user optionally can provide a flags buffer of\ntype `RTC_BUFFER_TYPE_FLAGS` which contains bytes that encode if the\nleft neighbor segment (`RTC_CURVE_FLAG_NEIGHBOR_LEFT` flag) and/or\nright neighbor segment (`RTC_CURVE_FLAG_NEIGHBOR_RIGHT` flags) exist\n(see [RTCCurveFlags]). If this buffer is not set, than the left/right\nneighbor bits are automatically calculated base on the index buffer\n(left segment exists if segment(id-1)+1 == segment(id) and right\nsegment exists if segment(id+1)-1 == segment(id)).\n\nA left neighbor segment is assumed to end at the start vertex of the\ncurrent segment, and to start at the previous vertex in the vertex\nbuffer. Similarly, the right neighbor segment is assumed to start at\nthe end vertex of the current segment, and to end at the next vertex in\nthe vertex buffer.\n\nOnly when the left and right bits are properly specified the current\nsegment can properly attach to the left and/or right neighbor,\notherwise the touching area may not get rendered properly.\n\n##### Bézier Basis\n\nFor the cubic Bézier basis the indices point to the first of 4\nconsecutive control points in the vertex buffer. These control points\nuse the cubic Bézier basis, where the first control point represents\nthe start point of the curve, and the 4th control point the end point\nof the curve. The Bézier basis is interpolating, thus the curve does go\nexactly through the first and fourth control vertex.\n\n##### B-spline Basis\n\nFor the cubic B-spline basis the indices point to the first of 4\nconsecutive control points in the vertex buffer. These control points\nmake up a cardinal cubic B-spline (implicit equidistant knot vector).\nThis basis is not interpolating, thus the curve does in general not go\nthrough any of the control points directly. A big advantage of this\nbasis is that 3 control points can be shared for two continuous\nneighboring curve segments, e.g. the curves (p0,p1,p2,p3) and\n(p1,p2,p3,p4) are C1 continuous. This feature makes this basis a good\nchoice to construct continuous multi-segment curves, as memory\nconsumption can be kept minimal.\n\n##### Hermite Basis\n\nFor the cubic Hermite basis the indices point to the first of 2\nconsecutive points in the vertex buffer, and the first of 2 consecutive\ntangents in the tangent buffer. These two points and two tangents make\nup a cubic Hermite curve. This basis is interpolating, thus does\nexactly go through the first and second control point, and the first\norder derivative at the begin and end matches exactly the value\nspecified in the tangent buffer. When connecting two segments\ncontinuously, the end point and tangent of the previous segment can be\nshared. Different versions of Catmull-Rom splines can be easily\nconstructed using the Hermite basis, by calculating a proper tangent\nbuffer from the control points.\n\n##### Catmull-Rom Basis\n\nFor the Catmull-Rom basis the indices point to the first of 4\nconsecutive control points in the vertex buffer. This basis goes\nthrough p1 and p2, with tangents (p2-p0)/2 and (p3-p1)/2.\n\n##### Flat Curves\n\nThe `RTC_GEOMETRY_TYPE_FLAT_*` flat mode is a fast mode designed to\nrender distant hair. In this mode the curve is rendered as a connected\nsequence of ray facing quads. Individual quads are considered to have\nsubpixel size, and zooming onto the curve might show geometric\nartifacts. The number of quads to subdivide into can be specified\nthrough the `rtcSetGeometryTessellationRate` function. By default the\ntessellation rate is 4.\n\n##### Normal Oriented Curves\n\nThe `RTC_GEOMETRY_TYPE_NORMAL_ORIENTED_*` mode is a mode designed to\nrender blades of grass. In this mode a vertex spline has to get\nspecified as for the previous modes, but additionally a normal spline\nis required. If the Hermite basis is used, the `RTC_BUFFER_TYPE_NORMAL`\nand `RTC_BUFFER_TYPE_NORMAL_DERIVATIVE` buffers have both to be set.\n\nThe curve is rendered as a flat band whose center approximately follows\nthe provided vertex spline, whose half width approximately follows the\nprovided radius spline, and whose normal orientation approximately\nfollows the provided normal spline.\n\nTo intersect the normal oriented curve, we perform a newton-raphson\nstyle intersection of a ray with a tensor product surface of a linear\nbasis (perpendicular to the curve) and cubic Bézier basis (along the\ncurve). We use a guide curve and its derivatives to construct the\ncontrol points of that surface. The guide curve is defined by a sweep\nsurface defined by sweeping a line centered at the vertex spline\nlocation along the curve. At each parameter value the half width of the\nline matches the radius spline, and the direction matches the cross\nproduct of the normal from the normal spline and tangent of the vertex\nspline. Note that this construction does not work when the provided\nnormals are parallel to the curve direction. For this reason the\nprovided normals should best be kept as perpendicular to the curve\ndirection as possible. We further assume second order derivatives of\nthe center curve to be zero for this construction, as otherwise very\nlarge curvatures occurring in corner cases, can thicken the constructed\ncurve significantly.\n\n##### Round Curves\n\nIn the `RTC_GEOMETRY_TYPE_ROUND_*` round mode, a real geometric surface\nis rendered for the curve, which is more expensive but allows closeup\nviews.\n\nFor the linear basis the round mode renders a cone that tangentially\ntouches a start-sphere and end-sphere. The start sphere is rendered\nwhen no previous segments is indicated by the neighbor bits. The end\nsphere is always rendered but parts that lie inside the next segment\nare clipped away (if that next segment exists). This way a curve is\nclosed on both ends and the interior will render properly as long as\nonly neighboring segments penetrate into a segment. For this to work\nproperly it is important that the flags buffer is properly populated\nwith neighbor information.\n\nFor the cubic polynomial bases, the round mode renders a sweep surface\nby sweeping a varying radius circle tangential along the curve. As a\nlimitation, the radius of the curve has to be smaller than the\ncurvature radius of the curve at each location on the curve.\n\nThe intersection with the curve segment stores the parametric hit\nlocation along the curve segment as u-coordinate (range 0 to +1).\n\nFor flat curves, the v-coordinate is set to the normalized distance in\nthe range -1 to +1. For normal oriented curves the v-coordinate is in\nthe range 0 to 1. For the linear basis and in round mode the\nv-coordinate is set to zero.\n\nIn flat mode, the geometry normal `Ng` is set to the tangent of the\ncurve at the hit location. In round mode and for normal oriented\ncurves, the geometry normal `Ng` is set to the non-normalized geometric\nnormal of the surface.\n\nFor multi-segment motion blur, the number of time steps must be first\nspecified using the `rtcSetGeometryTimeStepCount` call. Then a vertex\nbuffer for each time step can be set using different buffer slots, and\nall these buffers must have the same stride and size. For the Hermite\nbasis also a tangent buffer has to be set for each time step and for\nnormal oriented curves a normal buffer has to get specified for each\ntime step.\n\nAlso see tutorials [Hair] and [Curves] for examples of how to\ncreate and use curve geometries.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure `NULL` is returned and an error code is set that can be\nqueried using `rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcNewGeometry], [RTCCurveFlags]\n\n```{=tex}\n\n```\nRTC\\_GEOMETRY\\_TYPE\\_POINT\n--------------------------\n\n#### NAME {#name}\n\n    RTC_GEOMETRY_TYPE_SPHERE_POINT -\n      point geometry spheres\n\n    RTC_GEOMETRY_TYPE_DISC_POINT -\n      point geometry with ray-oriented discs\n\n    RTC_GEOMETRY_TYPE_ORIENTED_DISC_POINT -\n      point geometry with normal-oriented discs\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    rtcNewGeometry(device, RTC_GEOMETRY_TYPE_SPHERE_POINT);\n    rtcNewGeometry(device, RTC_GEOMETRY_TYPE_DISC_POINT);\n    rtcNewGeometry(device, RTC_GEOMETRY_TYPE_ORIENTED_DISC_POINT);\n\n#### DESCRIPTION {#description}\n\nPoints with per vertex radii are supported with sphere, ray-oriented\ndiscs, and normal-oriented discs geometric representations. Such point\ngeometries are created by passing `RTC_GEOMETRY_TYPE_SPHERE_POINT`,\n`RTC_GEOMETRY_TYPE_DISC_POINT`, or\n`RTC_GEOMETRY_TYPE_ORIENTED_DISC_POINT` to the `rtcNewGeometry`\nfunction. The point vertices can be specified t through a vertex buffer\n(`RTC_BUFFER_TYPE_VERTEX`). For the normal oriented discs a normal\nbuffer (`RTC_BUFFER_TYPE_NORMAL`) has to get specified additionally.\nSee `rtcSetGeometryBuffer` and `rtcSetSharedGeometryBuffer` for more\ndetails on how to set buffers.\n\nThe vertex buffer stores each control vertex in the form of a single\nprecision position and radius stored in (`x`, `y`, `z`, `r`) order in\nmemory (`RTC_FORMAT_FLOAT4` format). The number of vertices is inferred\nfrom the size of this buffer. Similarly, the normal buffer stores a\nsingle precision normal per control vertex (`x`, `y`, `z` order and\n`RTC_FORMAT_FLOAT3` format).\n\nIn the `RTC_GEOMETRY_TYPE_SPHERE_POINT` mode, a real geometric surface\nis rendered for the curve, which is more expensive but allows closeup\nviews.\n\nThe `RTC_GEOMETRY_TYPE_DISC_POINT` flat mode is a fast mode designed to\nrender distant points. In this mode the point is rendered as a ray\nfacing disc.\n\nThe `RTC_GEOMETRY_TYPE_ORIENTED_DISC_POINT` mode is a mode designed as\na midpoint geometrically between ray facing discs and spheres. In this\nmode the point is rendered as a normal oriented disc.\n\nFor all point types, only the hit distance and geometry normal is\nreturned as hit information, u and v are set to zero.\n\nFor multi-segment motion blur, the number of time steps must be first\nspecified using the `rtcSetGeometryTimeStepCount` call. Then a vertex\nbuffer for each time step can be set using different buffer slots, and\nall these buffers must have the same stride and size.\n\nAlso see tutorial [Points] for an example of how to create and use\npoint geometries.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure `NULL` is returned and an error code is set that can be\nqueried using `rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcNewGeometry]\n\n```{=tex}\n\n```\nRTC\\_GEOMETRY\\_TYPE\\_USER\n-------------------------\n\n#### NAME {#name}\n\n    RTC_GEOMETRY_TYPE_USER - user geometry type\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    RTCGeometry geometry =\n      rtcNewGeometry(device, RTC_GEOMETRY_TYPE_USER);\n\n#### DESCRIPTION {#description}\n\nUser-defined geometries contain a number of user-defined primitives,\njust like triangle meshes contain multiple triangles. The shape of the\nuser-defined primitives is specified through registered callback\nfunctions, which enable extending Embree with arbitrary types of\nprimitives.\n\nUser-defined geometries are created by passing `RTC_GEOMETRY_TYPE_USER`\nto the `rtcNewGeometry` function call. One has to set the number of\nprimitives (see `rtcSetGeometryUserPrimitiveCount`), a user data\npointer (see `rtcSetGeometryUserData`), a bounding function closure\n(see `rtcSetGeometryBoundsFunction`), as well as user-defined intersect\n(see `rtcSetGeometryIntersectFunction`) and occluded (see\n`rtcSetGeometryOccludedFunction`) callback functions. The bounding\nfunction is used to query the bounds of all time steps of a user\nprimitive, while the intersect and occluded callback functions are\ncalled to intersect the primitive with a ray. The user data pointer is\npassed to each callback invocation and can be used to point to the\napplication's representation of the user geometry.\n\nThe creation of a user geometry typically looks the following:\n\n    RTCGeometry geometry = rtcNewGeometry(device, RTC_GEOMETRY_TYPE_USER);\n    rtcSetGeometryUserPrimitiveCount(geometry, numPrimitives);\n    rtcSetGeometryUserData(geometry, userGeometryRepresentation);\n    rtcSetGeometryBoundsFunction(geometry, boundsFunction);\n    rtcSetGeometryIntersectFunction(geometry, intersectFunction);\n    rtcSetGeometryOccludedFunction(geometry, occludedFunction);\n\nPlease have a look at the `rtcSetGeometryBoundsFunction`,\n`rtcSetGeometryIntersectFunction`, and `rtcSetGeometryOccludedFunction`\nfunctions on the implementation of the callback functions.\n\nPrimitives of a user geometry are ignored during rendering when their\nbounds are empty, thus bounds have lower\\>upper in at least one\ndimension.\n\nSee tutorial [User Geometry] for an example of how to use the\nuser-defined geometries.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure `NULL` is returned and an error code is set that can be\nqueried using `rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcNewGeometry], [rtcSetGeometryUserPrimitiveCount],\n[rtcSetGeometryUserData], [rtcSetGeometryBoundsFunction],\n[rtcSetGeometryIntersectFunction], [rtcSetGeometryOccludedFunction]\n\n```{=tex}\n\n```\nRTC\\_GEOMETRY\\_TYPE\\_INSTANCE\n-----------------------------\n\n#### NAME {#name}\n\n    RTC_GEOMETRY_TYPE_INSTANCE - instance geometry type\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    RTCGeometry geometry =\n       rtcNewGeometry(device, RTC_GEOMETRY_TYPE_INSTANCE);\n\n#### DESCRIPTION {#description}\n\nEmbree supports instancing of scenes using affine transformations (3×3\nmatrix plus translation). As the instanced scene is stored only a\nsingle time, even if instanced to multiple locations, this feature can\nbe used to create very complex scenes with small memory footprint.\n\nEmbree supports both single-level instancing and multi-level\ninstancing. The maximum instance nesting depth is\n`RTC_MAX_INSTANCE_LEVEL_COUNT`; it can be configured at compile-time\nusing the constant `EMBREE_MAX_INSTANCE_LEVEL_COUNT`. Users should\nadapt this constant to their needs: instances nested any deeper are\nsilently ignored in release mode, and cause assertions in debug mode.\n\nInstances are created by passing `RTC_GEOMETRY_TYPE_INSTANCE` to the\n`rtcNewGeometry` function call. The instanced scene can be set using\nthe `rtcSetGeometryInstancedScene` call, and the affine transformation\ncan be set using the `rtcSetGeometryTransform` function.\n\nPlease note that `rtcCommitScene` on the instanced scene should be\ncalled first, followed by `rtcCommitGeometry` on the instance, followed\nby `rtcCommitScene` for the top-level scene containing the instance.\n\nIf a ray hits the instance, the `geomID` and `primID` members of the\nhit are set to the geometry ID and primitive ID of the hit primitive in\nthe instanced scene, and the `instID` member of the hit is set to the\ngeometry ID of the instance in the top-level scene.\n\nThe instancing scheme can also be implemented using user geometries. To\nachieve this, the user geometry code should set the `instID` member of\nthe ray query context to the geometry ID of the instance, then trace\nthe transformed ray, and finally set the `instID` field of the ray\nquery context again to -1. The `instID` field is copied automatically\nby each primitive intersector into the `instID` field of the hit\nstructure when the primitive is hit. See the [User Geometry] tutorial\nfor an example.\n\nFor multi-segment motion blur, the number of time steps must be first\nspecified using the `rtcSetGeometryTimeStepCount` function. Then a\ntransformation for each time step can be specified using the\n`rtcSetGeometryTransform` function.\n\nSee tutorials [Instanced Geometry] and [Multi Level Instancing] for\nexamples of how to use instances.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure `NULL` is returned and an error code is set that can be\nqueried using `rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcNewGeometry], [rtcSetGeometryInstancedScene],\n[rtcSetGeometryTransform]\n\n```{=tex}\n\n```\nRTC\\_GEOMETRY\\_TYPE\\_INSTANCE\\_ARRAY\n------------------------------------\n\n#### NAME {#name}\n\n    RTC_GEOMETRY_TYPE_INSTANCE_ARRAY - instance array geometry type\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    RTCGeometry geometry =\n       rtcNewGeometry(device, RTC_GEOMETRY_TYPE_INSTANCE_ARRAY);\n\n#### DESCRIPTION {#description}\n\nEmbree supports instance arrays, which is a more memory efficient way\nto represent large amounts of instances of the same or a small set of\n(sub)scenes. The main difference to regular Embree instances is that\nEmbree instance arrays have a buffer of transformations (either affine\ntransformations or quaternion decompositions\n[RTCQuaternionDecomposition]) that can be allocated by Embree or a\nshared buffer, similar to vertex buffers for triangle meshes.\nOptionally, instead of instancing only one scene, an instance array can\ninstance multiple scenes by passing an array of scenes and a\ncorresponding index buffer that specifies which instance of the\ninstance array instances which of the scenes in the scenes array.\n\nInstance arrays are created by passing\n`RTC_GEOMETRY_TYPE_INSTANCE_ARRAY` to the `rtcNewGeometry` function\ncall. The instanced scene can be either be set using the\n`rtcSetGeometryInstancedScene` call, or if multiple scenes should be\ninstanced by passing an array of scenes using\n`rtcSetGeometryInstancedScenes`. The latter also requires to specify an\nindex buffer using `rtcSetNewGeometryBuffer` or\n`rtcSetSharedGeometryBuffer` with `RTC_BUFFER_TYPE_INDEX` as the buffer\ntype.\n\nBecause the transformation information can become large for a large\namount of instances, the instance array allows to share the\ntransformation buffer between the user application and Embree. It can\nbe either stored in a buffer created by Embree with\n`rtcSetNewGeometryBuffer` or an already existing buffer can be shared\nusing `rtcSetSharedGeometryBuffer`. In either case, the buffer type has\nto be `RTC_BUFFER_TYPE_TRANSFORM` and the allowed formats are\n`RTC_FORMAT_FLOAT4X4_COLUMN_MAJOR`, `RTC_FORMAT_FLOAT3X4_COLUMN_MAJOR`,\n`RTC_FORMAT_FLOAT3X4_ROW_MAJOR`, and\n`RTC_FORMAT_QUATERNION_DECOMPOSITION`. Embree will not modify the data\nin the transformation buffer.\n\nEmbree instance arrays support both single-level instancing and\nmulti-level instancing. The maximum instance nesting depth is\n`RTC_MAX_INSTANCE_LEVEL_COUNT`; it can be configured at compile-time\nusing the constant `EMBREE_MAX_INSTANCE_LEVEL_COUNT`. Users should\nadapt this constant to their needs: instances nested any deeper are\nsilently ignored in release mode, and cause assertions in debug mode.\n\nPlease note that `rtcCommitScene` on the instanced scene(s) should be\ncalled first, followed by `rtcCommitGeometry` on the instance array,\nfollowed by `rtcCommitScene` for the top-level scene containing the\ninstance array.\n\nIf a ray hits the instance, the `geomID` and `primID` members of the\nhit are set to the geometry ID and primitive ID of the hit primitive in\nthe instanced scene. The `instID` member of the hit is set to the\ngeometry ID of the instance array in the top-level scene and the\n`instPrimID` member is set to the index of the hit instance of the\ninstance array.\n\nFor multi-segment motion blur, the number of time steps must be first\nspecified using the `rtcSetGeometryTimeStepCount` function. Then a\ntransformation for each time step can be specified using the\n`rtcSetNewGeometryBuffer` or `rtcSetSharedGeometryBuffer` function and\npassing the time step as the `slot` parameter of these calls.\n\nSee the [Instance Array Geometry] tutorial for an example of how to\nuse instance arrays.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure `NULL` is returned and an error code is set that can be\nqueried using `rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcNewGeometry], [rtcSetGeometryInstancedScene],\n[rtcSetGeometryInstancedScenes], [rtcSetNewGeometryBuffer],\n[rtcSetSharedGeometryBuffer], [rtcGetGeometryTransformEx]\n\n```{=tex}\n\n```\nRTCCurveFlags\n-------------\n\n#### NAME {#name}\n\n    RTCCurveFlags - per segment flags for curve geometry\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    enum RTCCurveFlags\n    {\n      RTC_CURVE_FLAG_NEIGHBOR_LEFT  = (1 << 0), \n      RTC_CURVE_FLAG_NEIGHBOR_RIGHT = (1 << 1) \n    };\n\n#### DESCRIPTION {#description}\n\nThe RTCCurveFlags type is used for linear curves to determine if the\nleft and/or right neighbor segment exist. Therefore one attaches a\nbuffer of type RTC\\_BUFFER\\_TYPE\\_FLAGS to the curve geometry which\nstores an individual byte per curve segment.\n\nIf the RTC\\_CURVE\\_FLAG\\_NEIGHBOR\\_LEFT flag in that byte is enabled\nfor a curve segment, then the left segment exists (which starts one\nvertex before the start vertex of the current curve) and the current\nsegment is rendered to properly attach to that segment.\n\nIf the RTC\\_CURVE\\_FLAG\\_NEIGHBOR\\_RIGHT flag in that byte is enabled\nfor a curve segment, then the right segment exists (which ends one\nvertex after the end vertex of the current curve) and the current\nsegment is rendered to properly attach to that segment.\n\nWhen not properly specifying left and right flags for linear curves,\nthe rendering at the ending of these curves may not look correct, in\nparticular when round linear curves are viewed from the inside.\n\n#### EXIT STATUS {#exit-status}\n\n#### SEE ALSO {#see-also}\n\n[RTC\\_GEOMETRY\\_TYPE\\_CURVE]\n\n```{=tex}\n\n```\nrtcRetainGeometry\n-----------------\n\n#### NAME {#name}\n\n    rtcRetainGeometry - increments the geometry reference count\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcRetainGeometry(RTCGeometry geometry);\n\n#### DESCRIPTION {#description}\n\nGeometry objects are reference counted. The `rtcRetainGeometry`\nfunction increments the reference count of the passed geometry object\n(`geometry` argument). This function together with `rtcReleaseGeometry`\nallows to use the internal reference counting in a C++ wrapper class to\nhandle the ownership of the object.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcNewGeometry], [rtcReleaseGeometry]\n\n```{=tex}\n\n```\nrtcReleaseGeometry\n------------------\n\n#### NAME {#name}\n\n    rtcReleaseGeometry - decrements the geometry reference count\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcReleaseGeometry(RTCGeometry geometry);\n\n#### DESCRIPTION {#description}\n\nGeometry objects are reference counted. The `rtcReleaseGeometry`\nfunction decrements the reference count of the passed geometry object\n(`geometry` argument). When the reference count falls to 0, the\ngeometry gets destroyed.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcNewGeometry], [rtcRetainGeometry]\n\n```{=tex}\n\n```\nrtcCommitGeometry\n-----------------\n\n#### NAME {#name}\n\n    rtcCommitGeometry - commits geometry changes\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcCommitGeometry(RTCGeometry geometry);\n\n#### DESCRIPTION {#description}\n\nThe `rtcCommitGeometry` function is used to commit all geometry changes\nperformed to a geometry (`geometry` parameter). After a geometry gets\nmodified, this function must be called to properly update the internal\nstate of the geometry to perform interpolations using `rtcInterpolate`\nor to commit a scene containing the geometry using `rtcCommitScene`.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcInterpolate], [rtcCommitScene]\n\n```{=tex}\n\n```\nrtcEnableGeometry\n-----------------\n\n#### NAME {#name}\n\n    rtcEnableGeometry - enables the geometry\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcEnableGeometry(RTCGeometry geometry);\n\n#### DESCRIPTION {#description}\n\nThe `rtcEnableGeometry` function enables the specified geometry\n(`geometry` argument). Only enabled geometries are rendered. Each\ngeometry is enabled by default at construction time.\n\nAfter enabling a geometry, the scene containing that geometry must be\ncommitted using `rtcCommitScene` for the change to have effect.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcNewGeometry], [rtcDisableGeometry], [rtcCommitScene]\n\n```{=tex}\n\n```\nrtcDisableGeometry\n------------------\n\n#### NAME {#name}\n\n    rtcDisableGeometry - disables the geometry\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcDisableGeometry(RTCGeometry geometry);\n\n#### DESCRIPTION {#description}\n\nThe `rtcDisableGeometry` function disables the specified geometry\n(`geometry` argument). A disabled geometry is not rendered. Each\ngeometry is enabled by default at construction time.\n\nAfter disabling a geometry, the scene containing that geometry must be\ncommitted using `rtcCommitScene` for the change to have effect.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcNewGeometry], [rtcEnableGeometry], [rtcCommitScene]\n\n```{=tex}\n\n```\nrtcSetGeometryTimeStepCount\n---------------------------\n\n#### NAME {#name}\n\n    rtcSetGeometryTimeStepCount - sets the number of time steps of the\n      geometry\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcSetGeometryTimeStepCount(\n      RTCGeometry geometry,\n      unsigned int timeStepCount\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcSetGeometryTimeStepCount` function sets the number of time\nsteps for multi-segment motion blur (`timeStepCount` parameter) of the\nspecified geometry (`geometry` parameter).\n\nFor triangle meshes (`RTC_GEOMETRY_TYPE_TRIANGLE`), quad meshes\n(`RTC_GEOMETRY_TYPE_QUAD`), curves (`RTC_GEOMETRY_TYPE_CURVE`), points\n(`RTC_GEOMETRY_TYPE_POINT`), and subdivision geometries\n(`RTC_GEOMETRY_TYPE_SUBDIVISION`), the number of time steps directly\ncorresponds to the number of vertex buffer slots available\n(`RTC_BUFFER_TYPE_VERTEX` buffer type). For these geometries, one\nvertex buffer per time step must be specified when creating\nmulti-segment motion blur geometries.\n\nFor instance geometries (`RTC_GEOMETRY_TYPE_INSTANCE`), a\ntransformation must be specified for each time step (see\n`rtcSetGeometryTransform`).\n\nFor user geometries, the registered bounding callback function must\nprovide a bounding box per primitive and time step, and the\nintersection and occlusion callback functions should properly intersect\nthe motion-blurred geometry at the ray time.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcNewGeometry], [rtcSetGeometryTimeRange]\n\n```{=tex}\n\n```\nrtcSetGeometryTimeRange\n-----------------------\n\n#### NAME {#name}\n\n    rtcSetGeometryTimeRange - sets the time range for a motion blur geometry\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcSetGeometryTimeRange(\n      RTCGeometry geometry,\n      float startTime,\n      float endTime\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcSetGeometryTimeRange` function sets a time range which defines\nthe start (and end time) of the first (and last) time step of a motion\nblur geometry. The time range is defined relative to the camera shutter\ninterval [0,1] but it can be arbitrary. Thus the startTime can be\nsmaller, equal, or larger 0, indicating a geometry whose animation\ndefinition start before, at, or after the camera shutter opens. Similar\nthe endTime can be smaller, equal, or larger than 1, indicating a\ngeometry whose animation definition ends after, at, or before the\ncamera shutter closes. The startTime has to be smaller or equal to the\nendTime.\n\nThe default time range when this function is not called is the entire\ncamera shutter [0,1]. For best performance at most one time segment\nof the piece wise linear definition of the motion should fall outside\nthe shutter window to the left and to the right. Thus do not set the\nstartTime or endTime too far outside the [0,1] interval for best\nperformance.\n\nThis time range feature will also allow geometries to appear and\ndisappear during the camera shutter time if the specified time range is\na sub range of [0,1].\n\nPlease also have a look at the `rtcSetGeometryTimeStepCount` function\nto see how to define the time steps for the specified time range.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcSetGeometryTimeStepCount]\n\n```{=tex}\n\n```\nrtcSetGeometryVertexAttributeCount\n----------------------------------\n\n#### NAME {#name}\n\n    rtcSetGeometryVertexAttributeCount - sets the number of vertex\n      attributes of the geometry\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcSetGeometryVertexAttributeCount(\n      RTCGeometry geometry,\n      unsigned int vertexAttributeCount\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcSetGeometryVertexAttributeCount` function sets the number of\nslots (`vertexAttributeCount` parameter) for vertex attribute buffers\n(`RTC_BUFFER_TYPE_VERTEX_ATTRIBUTE`) that can be used for the specified\ngeometry (`geometry` parameter).\n\nThis function is supported only for triangle meshes\n(`RTC_GEOMETRY_TYPE_TRIANGLE`), quad meshes (`RTC_GEOMETRY_TYPE_QUAD`),\ncurves (`RTC_GEOMETRY_TYPE_CURVE`), points (`RTC_GEOMETRY_TYPE_POINT`),\nand subdivision geometries (`RTC_GEOMETRY_TYPE_SUBDIVISION`).\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcNewGeometry], [RTCBufferType]\n\n```{=tex}\n\n```\nrtcSetGeometryMask\n------------------\n\n#### NAME {#name}\n\n    rtcSetGeometryMask - sets the geometry mask\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcSetGeometryMask(\n      RTCGeometry geometry,\n      unsigned int mask\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcSetGeometryMask` function sets a 32-bit geometry mask (`mask`\nargument) for the specified geometry (`geometry` argument).\n\nThis geometry mask is used together with the ray mask stored inside the\n`mask` field of the ray. The primitives of the geometry are hit by the\nray only if the bitwise `and` operation of the geometry mask with the\nray mask is not 0. This feature can be used to disable selected\ngeometries for specifically tagged rays, e.g. to disable shadow casting\nfor certain geometries.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[RTCRay], [rtcGetDeviceProperty]\n\n```{=tex}\n\n```\nrtcSetGeometryBuildQuality\n--------------------------\n\n#### NAME {#name}\n\n    rtcSetGeometryBuildQuality - sets the build quality for the geometry\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcSetGeometryBuildQuality(\n      RTCGeometry geometry,\n      enum RTCBuildQuality quality\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcSetGeometryBuildQuality` function sets the build quality\n(`quality` argument) for the specified geometry (`geometry` argument).\nThe per-geometry build quality is only a hint and may be ignored.\nEmbree currently uses the per-geometry build quality when the scene\nbuild quality is set to `RTC_BUILD_QUALITY_LOW`. In this mode a\ntwo-level acceleration structure is build, and geometries build a\nseparate acceleration structure using the geometry build quality. The\nper-geometry build quality can be one of:\n\n-   `RTC_BUILD_QUALITY_LOW`: Creates lower quality data structures,\n    e.g. for dynamic scenes.\n\n-   `RTC_BUILD_QUALITY_MEDIUM`: Default build quality for most usages.\n    Gives a good compromise between build and render performance.\n\n-   `RTC_BUILD_QUALITY_HIGH`: Creates higher quality data structures\n    for final-frame rendering. Enables a spatial split builder for\n    certain primitive types.\n\n-   `RTC_BUILD_QUALITY_REFIT`: Uses a BVH refitting approach when\n    changing only the vertex buffer.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcSetSceneBuildQuality]\n\n```{=tex}\n\n```\nrtcSetGeometryMaxRadiusScale\n----------------------------\n\n#### NAME {#name}\n\n    rtcSetGeometryMaxRadiusScale - assigns a maximal curve radius scale factor for min-width feature\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcSetGeometryMaxRadiusScale(RTCGeometry geometry, float maxRadiusScale);\n\n#### DESCRIPTION {#description}\n\nThe `rtcSetMaxGeometryScale` function specifies a maximal scaling\nfactor for curve radii used by the min-width feature.\n\nThe min-width feature can increase the radius of curves and points, in\norder to reduce aliasing and improve render times. The feature is\ndisabled by default and has to get enabled using the EMBREE\\_MIN\\_WIDTH\ncmake option.\n\nTo use the feature, one has to specify a maximal curve radius scaling\nfactor using the [rtcSetGeometryMaxRadiusScale] function. This factor\nshould be a small number (e.g. 4) as the constructed BVH bounds get\nincreased in order to bound the curve in the worst case of maximal\nradii.\n\nOne also has to set the minWidthDistanceFactor in the\nRTCRayQueryContext when tracing a ray. This factor controls the target\nradius size of a curve or point at some distance away of the ray\norigin.\n\nFor each control point p with radius r of a curve or point primitive,\nthe primitive intersectors first calculate a target radius r' as:\n\n    r' = length(p-ray_org) * minWidthDistanceFactor\n\nTypically the minWidthDistanceFactor is set by the application such\nthat the target radius projects to the width of half a pixel (thus\nprimitive diameter is pixel sized).\n\nThe target radius r' is then clamped against the minimal bound r and\nmaximal bound maxRadiusScale\\*r to obtain the final radius r'':\n\n    r'' = max(r, min(r', maxRadiusScale*r))\n\nThus curves or points close to the camera are rendered with a normal\nradii r, and curves or points far from the camera are not enlarged too\nmuch, as this would be very expensive to render.\n\nWhen `rtcSetGeometryMaxRadiusScale` function is not invoked for a curve\nor point geometry (or if the maximal scaling factor is set to 1.0),\nthen the curve or point geometry renders normally, with radii not\nmodified by the min-width feature.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcInitRayQueryContext]\n\n```{=tex}\n\n```\nrtcSetGeometryBuffer\n--------------------\n\n#### NAME {#name}\n\n    rtcSetGeometryBuffer - assigns a view of a buffer to the geometry\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcSetGeometryBuffer(\n      RTCGeometry geometry,\n      enum RTCBufferType type,\n      unsigned int slot,\n      enum RTCFormat format,\n      RTCBuffer buffer,\n      size_t byteOffset,\n      size_t byteStride,\n      size_t itemCount\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcSetGeometryBuffer` function binds a view of a buffer object\n(`buffer` argument) to a geometry buffer type and slot (`type` and\n`slot` argument) of the specified geometry (`geometry` argument).\n\nOne can specify the start of the first buffer element in bytes\n(`byteOffset` argument), the byte stride between individual buffer\nelements (`byteStride` argument), the format of the buffer elements\n(`format` argument), and the number of elements to bind (`itemCount`).\n\nThe start address (`byteOffset` argument) and stride (`byteStride`\nargument) must be both aligned to 4 bytes, otherwise the\n`rtcSetGeometryBuffer` function will fail.\n\nAfter successful completion of this function, the geometry will hold a\nreference to the buffer object.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcSetSharedGeometryBuffer], [rtcSetNewGeometryBuffer]\n\n```{=tex}\n\n```\nrtcSetSharedGeometryBuffer\n--------------------------\n\n#### NAME {#name}\n\n    rtcSetSharedGeometryBuffer - assigns a view of a shared data buffer\n      to a geometry\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcSetSharedGeometryBuffer(\n      RTCGeometry geometry,\n      enum RTCBufferType type,\n      unsigned int slot,\n      enum RTCFormat format,\n      const void* ptr,\n      size_t byteOffset,\n      size_t byteStride,\n      size_t itemCount\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcSetSharedGeometryBuffer` function binds a view of a shared\nuser-managed data buffer (`ptr` argument) to a geometry buffer type and\nslot (`type` and `slot` argument) of the specified geometry (`geometry`\nargument).\n\nOne can specify the start of the first buffer element in bytes\n(`byteOffset` argument), the byte stride between individual buffer\nelements (`byteStride` argument), the format of the buffer elements\n(`format` argument), and the number of elements to bind (`itemCount`).\n\nThe start address (`byteOffset` argument) and stride (`byteStride`\nargument) must be both aligned to 4 bytes; otherwise the\n`rtcSetSharedGeometryBuffer` function will fail.\n\nWhen the buffer will be used as a vertex buffer\n(`RTC_BUFFER_TYPE_VERTEX` and `RTC_BUFFER_TYPE_VERTEX_ATTRIBUTE`), the\nlast buffer element must be readable using 16-byte SSE load\ninstructions, thus padding the last element is required for certain\nlayouts. E.g. a standard `float3` vertex buffer layout should add\nstorage for at least one more float to the end of the buffer.\n\nThe buffer data must remain valid for as long as the buffer may be\nused, and the user is responsible for freeing the buffer data when no\nlonger required.\n\nSharing buffers can significantly reduce the memory required by the\napplication, thus we recommend using this feature. When enabling the\n`RTC_SCENE_FLAG_COMPACT` scene flag, the spatial index structures index\ninto the vertex buffer, resulting in even higher memory savings.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcSetGeometryBuffer], [rtcSetNewGeometryBuffer]\n\n```{=tex}\n\n```\nrtcSetNewGeometryBuffer\n-----------------------\n\n#### NAME {#name}\n\n    rtcSetNewGeometryBuffer - creates and assigns a new data buffer to\n      the geometry\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void* rtcSetNewGeometryBuffer(\n      RTCGeometry geometry,\n      enum RTCBufferType type,\n      unsigned int slot,\n      enum RTCFormat format,\n      size_t byteStride,\n      size_t itemCount\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcSetNewGeometryBuffer` function creates a new data buffer of\nspecified format (`format` argument), byte stride (`byteStride`\nargument), and number of items (`itemCount` argument), and assigns it\nto a geometry buffer slot (`type` and `slot` argument) of the specified\ngeometry (`geometry` argument). The buffer data is managed internally\nand automatically freed when the geometry is destroyed.\n\nThe byte stride (`byteStride` argument) must be aligned to 4 bytes;\notherwise the `rtcSetNewGeometryBuffer` function will fail.\n\nThe allocated buffer will be automatically over-allocated slightly when\nused as a vertex buffer, where a requirement is that each buffer\nelement should be readable using 16-byte SSE load instructions.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcSetGeometryBuffer], [rtcSetSharedGeometryBuffer]\n\n```{=tex}\n\n```\nRTCFormat\n---------\n\n#### NAME {#name}\n\n    RTCFormat - specifies format of data in buffers\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore_ray.h>\n\n    enum RTCFormat\n    {\n      RTC_FORMAT_UINT,\n      RTC_FORMAT_UINT2,\n      RTC_FORMAT_UINT3,\n      RTC_FORMAT_UINT4,\n\n      RTC_FORMAT_FLOAT,\n      RTC_FORMAT_FLOAT2,\n      RTC_FORMAT_FLOAT3,\n      RTC_FORMAT_FLOAT4,\n      RTC_FORMAT_FLOAT5,\n      RTC_FORMAT_FLOAT6,\n      RTC_FORMAT_FLOAT7,\n      RTC_FORMAT_FLOAT8,\n      RTC_FORMAT_FLOAT9,\n      RTC_FORMAT_FLOAT10,\n      RTC_FORMAT_FLOAT11,\n      RTC_FORMAT_FLOAT12,\n      RTC_FORMAT_FLOAT13,\n      RTC_FORMAT_FLOAT14,\n      RTC_FORMAT_FLOAT15,\n      RTC_FORMAT_FLOAT16,\n\n      RTC_FORMAT_FLOAT3X4_ROW_MAJOR,\n      RTC_FORMAT_FLOAT4X4_ROW_MAJOR,\n\n      RTC_FORMAT_FLOAT3X4_COLUMN_MAJOR,\n      RTC_FORMAT_FLOAT4X4_COLUMN_MAJOR,\n\n      RTC_FORMAT_GRID,\n\n      RTC_FORMAT_QUATERNION_DECOMPOSITION\n    };\n\n#### DESCRIPTION {#description}\n\nThe `RTFormat` structure defines the data format stored in data buffers\nprovided to Embree using the [rtcSetGeometryBuffer],\n[rtcSetSharedGeometryBuffer], and [rtcSetNewGeometryBuffer] API\ncalls.\n\nThe `RTC_FORMAT_UINT/2/3/4` format are used to specify that data\nbuffers store unsigned integers, or unsigned integer vectors of size\n2,3 or 4. This format has typically to get used when specifying index\nbuffers, e.g. `RTC_FORMAT_UINT3` for triangle meshes.\n\nThe `RTC_FORMAT_FLOAT/2/3/4...` format are used to specify that data\nbuffers store single precision floating point values, or vectors there\nof (size 2,3,4, etc.). This format is typcally used to specify to\nformat of vertex buffers, e.g. the `RTC_FORMAT_FLOAT3` type for vertex\nbuffers of triangle meshes.\n\nThe `RTC_FORMAT_FLOAT3X4_ROW_MAJOR` and\n`RTC_FORMAT_FLOAT3X4_COLUMN_MAJOR` formats, specify a 3x4 floating\npoint matrix layed out either row major or column major. The\n`RTC_FORMAT_FLOAT4X4_ROW_MAJOR` and `RTC_FORMAT_FLOAT4X4_COLUMN_MAJOR`\nformats, specify a 4x4 floating point matrix layed out either row major\nor column major. The `RTC_FORMAT_QUATERNION_DECOMPOSITION` format\nspecifies a structure that represents a quaternion decomposition (see\n[RTCQuaternionDecomposition]) of an affine transformation. These\nformats are used in the [rtcSetGeometryTransform] function or in\ngeometry buffers with type `RTC_BUFFER_TYPE_TRANSFORM` in order to set\na transformation matrix for instance and instance array geometries.\n\nThe `RTC_FORMAT_GRID` is a special data format used to specify grid\nprimitives of layout RTCGrid when creating grid geometries (see\n[RTC\\_GEOMETRY\\_TYPE\\_GRID]).\n\n#### EXIT STATUS {#exit-status}\n\n#### SEE ALSO {#see-also}\n\n[rtcSetGeometryBuffer], [rtcSetSharedGeometryBuffer],\n[rtcSetNewGeometryBuffer], [rtcSetGeometryTransform]\n[RTCQuaternionDecomposition]\n\n```{=tex}\n\n```\nRTCBufferType\n-------------\n\n#### NAME {#name}\n\n    RTCFormat - specifies format of data in buffers\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore_ray.h>\n\n    enum RTCBufferType\n    {\n      RTC_BUFFER_TYPE_INDEX            = 0,\n      RTC_BUFFER_TYPE_VERTEX           = 1,\n      RTC_BUFFER_TYPE_VERTEX_ATTRIBUTE = 2,\n      RTC_BUFFER_TYPE_NORMAL           = 3,\n      RTC_BUFFER_TYPE_TANGENT          = 4,\n      RTC_BUFFER_TYPE_NORMAL_DERIVATIVE = 5,\n\n      RTC_BUFFER_TYPE_GRID                 = 8,\n\n      RTC_BUFFER_TYPE_FACE                 = 16,\n      RTC_BUFFER_TYPE_LEVEL                = 17,\n      RTC_BUFFER_TYPE_EDGE_CREASE_INDEX    = 18,\n      RTC_BUFFER_TYPE_EDGE_CREASE_WEIGHT   = 19,\n      RTC_BUFFER_TYPE_VERTEX_CREASE_INDEX  = 20,\n      RTC_BUFFER_TYPE_VERTEX_CREASE_WEIGHT = 21,\n      RTC_BUFFER_TYPE_HOLE                 = 22,\n      \n      RTC_BUFFER_TYPE_TRANSFORM            = 23,\n\n      RTC_BUFFER_TYPE_FLAGS = 32\n    };\n\n#### DESCRIPTION {#description}\n\nThe `RTBufferType` structure defines slots to assign data buffers to\nusing the [rtcSetGeometryBuffer], [rtcSetSharedGeometryBuffer], and\n[rtcSetNewGeometryBuffer] API calls.\n\nFor most geometry types the `RTC_BUFFER_TYPE_INDEX` slot is used to\nassign an index buffer, while the `RTC_BUFFER_TYPE_VERTEX` is used to\nassign the corresponding vertex buffer.\n\nThe `RTC_BUFFER_TYPE_VERTEX_ATTRIBUTE` slot can get used to assign\narbitrary additional vertex data which can get interpolated using the\n[rtcInterpolate] API call.\n\nThe `RTC_BUFFER_TYPE_NORMAL`, `RTC_BUFFER_TYPE_TANGENT`, and\n`RTC_BUFFER_TYPE_NORMAL_DERIVATIVE` are special buffers required to\nassign per vertex normals, tangents, and normal derivatives for some\ncurve types.\n\nThe `RTC_BUFFER_TYPE_GRID` buffer is used to assign the grid primitive\nbuffer for grid geometries (see [RTC\\_GEOMETRY\\_TYPE\\_GRID]).\n\nThe `RTC_BUFFER_TYPE_FACE`, `RTC_BUFFER_TYPE_LEVEL`,\n`RTC_BUFFER_TYPE_EDGE_CREASE_INDEX`,\n`RTC_BUFFER_TYPE_EDGE_CREASE_WEIGHT`,\n`RTC_BUFFER_TYPE_VERTEX_CREASE_INDEX`,\n`RTC_BUFFER_TYPE_VERTEX_CREASE_WEIGHT`, and `RTC_BUFFER_TYPE_HOLE` are\nspecial buffers required to create subdivision meshes (see\n[RTC\\_GEOMETRY\\_TYPE\\_SUBDIVISION]).\n\nThe `RTC_BUFFER_TYPE_TRANSFORM` buffer is used to provide instance\ntransformation information for instance array geometries (see\n[RTC\\_GEOMETRY\\_TYPE\\_INSTANCE\\_ARRAY]).\n\nThe `RTC_BUFFER_TYPE_FLAGS` can get used to add additional flag per\nprimitive of a geometry, and is currently only used for linear curves.\n\n#### EXIT STATUS {#exit-status}\n\n#### SEE ALSO {#see-also}\n\n[rtcSetGeometryBuffer], [rtcSetSharedGeometryBuffer],\n[rtcSetNewGeometryBuffer]\n\n```{=tex}\n\n```\nrtcGetGeometryBufferData\n------------------------\n\n#### NAME {#name}\n\n    rtcGetGeometryBufferData - gets pointer to\n      the first buffer view element\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void* rtcGetGeometryBufferData(\n      RTCGeometry geometry,\n      enum RTCBufferType type,\n      unsigned int slot\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcGetGeometryBufferData` function returns a pointer to the first\nelement of the buffer view attached to the specified buffer type and\nslot (`type` and `slot` argument) of the geometry (`geometry`\nargument).\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcSetGeometryBuffer], [rtcSetSharedGeometryBuffer],\n[rtcSetNewGeometryBuffer]\n\n```{=tex}\n\n```\nrtcUpdateGeometryBuffer\n-----------------------\n\n#### NAME {#name}\n\n    rtcUpdateGeometryBuffer - marks a buffer view bound to the geometry\n      as modified\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcUpdateGeometryBuffer(\n      RTCGeometry geometry,\n      enum RTCBufferType type,\n      unsigned int slot\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcUpdateGeometryBuffer` function marks the buffer view bound to\nthe specified buffer type and slot (`type` and `slot` argument) of a\ngeometry (`geometry` argument) as modified.\n\nIf a data buffer is changed by the application, the\n`rtcUpdateGeometryBuffer` call must be invoked for that buffer. Each\nbuffer view assigned to a buffer slot is initially marked as modified,\nthus this function needs to be called only when doing buffer\nmodifications after the first `rtcCommitScene`.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcNewGeometry], [rtcCommitScene]\n\n```{=tex}\n\n```\nrtcSetGeometryIntersectFilterFunction\n-------------------------------------\n\n#### NAME {#name}\n\n    rtcSetGeometryIntersectFilterFunction - sets the intersection filter\n      for the geometry\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    struct RTCFilterFunctionNArguments\n    {\n      int* valid;\n      void* geometryUserPtr;\n      const struct RTCRayQueryContext* context;\n      struct RTCRayN* ray;\n      struct RTCHitN* hit;\n      unsigned int N;\n    };\n\n    typedef void (*RTCFilterFunctionN)(\n      const struct RTCFilterFunctionNArguments* args\n    );\n\n    void rtcSetGeometryIntersectFilterFunction(\n      RTCGeometry geometry,\n      RTCFilterFunctionN filter\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcSetGeometryIntersectFilterFunction` function registers an\nintersection filter callback function (`filter` argument) for the\nspecified geometry (`geometry` argument).\n\nOnly a single callback function can be registered per geometry, and\nfurther invocations overwrite the previously set callback function.\nPassing `NULL` as function pointer disables the registered callback\nfunction.\n\nThe registered intersection filter function is invoked for every hit\nencountered during the `rtcIntersect`-type ray queries and can accept\nor reject that hit. The feature can be used to define a silhouette for\na primitive and reject hits that are outside the silhouette. E.g. a\ntree leaf could be modeled with an alpha texture that decides whether\nhit points lie inside or outside the leaf.\n\nIf the `RTC_BUILD_QUALITY_HIGH` mode is set, the filter functions may\nbe called multiple times for the same primitive hit. Further, rays\nhitting exactly the edge might also report two hits for the same\nsurface. For certain use cases, the application may have to work around\nthis limitation by collecting already reported hits (`geomID`/`primID`\npairs) and ignoring duplicates.\n\nThe filter function callback of type `RTCFilterFunctionN` gets passed a\nnumber of arguments through the `RTCFilterFunctionNArguments`\nstructure. The `valid` parameter of that structure points to an integer\nvalid mask (0 means invalid and -1 means valid). The `geometryUserPtr`\nmember is a user pointer optionally set per geometry through the\n`rtcSetGeometryUserData` function. The `context` member points to the\nray query context passed to the ray query function. The `ray` parameter\npoints to `N` rays in SOA layout. The `hit` parameter points to `N`\nhits in SOA layout to test. The `N` parameter is the number of rays and\nhits in `ray` and `hit`. The hit distance is provided as the `tfar`\nvalue of the ray. If the hit geometry is instanced, the `instID` member\nof the ray is valid, and the ray and the potential hit are in object\nspace.\n\nThe filter callback function has the task to check for each valid ray\nwhether it wants to accept or reject the corresponding hit. To reject a\nhit, the filter callback function just has to write `0` to the integer\nvalid mask of the corresponding ray. To accept the hit, it just has to\nleave the valid mask set to `-1`. When accepting a hit, the filter\nfunction is further allowed to change the hit and decrease the `tfar`\nvalue of the ray but it should not modify other ray data nor any\ninactive components of the ray or hit.\n\nWhen performing ray queries using `rtcIntersect1`, it is guaranteed\nthat the packet size is 1 when the callback is invoked. When performing\nray queries using the `rtcIntersect4/8/16` functions, it is not\ngenerally guaranteed that the ray packet size (and order of rays inside\nthe packet) passed to the callback matches the initial ray packet.\nHowever, under some circumstances these properties are guaranteed, and\nwhether this is the case can be queried using `rtcGetDeviceProperty`.\n\nFor many usage scenarios, repacking and re-ordering of rays does not\ncause difficulties in implementing the callback function. However,\nalgorithms that need to extend the ray with additional data must use\nthe `rayID` component of the ray to identify the original ray to access\nthe per-ray data.\n\nThe implementation of the filter function can choose to implement a\nsingle code path that uses the ray access helper functions `RTCRay_XXX`\nand hit access helper functions `RTCHit_XXX` to access ray and hit\ndata. Alternatively the code can branch to optimized implementations\nfor specific sizes of `N` and cast the `ray` and `hit` inputs to the\nproper packet types.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcSetGeometryOccludedFilterFunction]\n\n```{=tex}\n\n```\nrtcSetGeometryOccludedFilterFunction\n------------------------------------\n\n#### NAME {#name}\n\n    rtcSetGeometryOccludedFilterFunction - sets the occlusion filter\n      for the geometry\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcSetGeometryOccludedFilterFunction(\n      RTCGeometry geometry,\n      RTCFilterFunctionN filter\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcSetGeometryOccludedFilterFunction` function registers an\nocclusion filter callback function (`filter` argument) for the\nspecified geometry (`geometry` argument).\n\nOnly a single callback function can be registered per geometry, and\nfurther invocations overwrite the previously set callback function.\nPassing `NULL` as function pointer disables the registered callback\nfunction.\n\nThe registered occlusion filter function is invoked for every hit\nencountered during the `rtcOccluded`-type ray queries and can accept or\nreject that hit. The feature can be used to define a silhouette for a\nprimitive and reject hits that are outside the silhouette. E.g. a tree\nleaf could be modeled with an alpha texture that decides whether hit\npoints lie inside or outside the leaf.\n\nPlease see the description of the\n`rtcSetGeometryIntersectFilterFunction` for a description of the filter\ncallback function.\n\nThe `rtcOccluded`-type functions terminate traversal when a hit got\ncommitted. As filter functions can only set the `tfar` distance of the\nray for a committed hit, the occlusion filter cannot influence the\n`tfar` value of subsequent traversal, as that directly ends. For that\nreason `rtcOccluded` and occlusion filters cannot get used to gather\nthe next n-hits, and `rtcIntersect` and intersection filters should get\nused instead.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcSetGeometryIntersectFilterFunction]\n\n```{=tex}\n\n```\nrtcSetGeometryEnableFilterFunctionFromArguments\n-----------------------------------------------\n\n#### NAME {#name}\n\n    rtcSetGeometryEnableFilterFunctionFromArguments - enables\n      argument filter functions for the geometry\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcSetGeometryEnableFilterFunctionFromArguments(\n       RTCGeometry geometry, bool enable);\n\n#### DESCRIPTION {#description}\n\nThis function enables invokation the filter function passed through\n`RTCIntersectArguments` or `RTCOccludedArguments` to the intersect and\noccluded queries. If enable is true the argument filter function\ninvokation is enabled for the geometry or disabled otherwise. By\ndefault the invokation of the argument filter function is disabled for\nsome geometry.\n\nThe argument filter function invokation can also get enforced for each\ngeometry by using the `RTC_RAY_QUERY_FLAG_INVOKE_ARGUMENT_FILTER` ray\nquery flag that can get passed to `rtcIntersect` and `rtcOccluded`\nfunctions. See Section [rtcInitIntersectArguments] and\n[rtcInitOccludedArguments] for more details.\n\nIn order to use the argument filter function for some scene, that\nfeature additionally has to get enabled using the\n`RTC_SCENE_FLAG_FILTER_FUNCTION_IN_ARGUMENTS` scene flag. See Section\n[rtcSetSceneFlags] for more details.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can get queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcInitIntersectArguments], [rtcInitOccludedArguments],\n[rtcSetSceneFlags]\n\n```{=tex}\n\n```\nrtcInvokeIntersectFilterFromGeometry\n------------------------------------\n\n#### NAME {#name}\n\n    rtcInvokeIntersectFilterFromGeometry - invokes the\n      intersection filter function from the geometry\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcInvokeIntersectFilterFromGeometry(\n      const struct RTCIntersectFunctionNArguments* args,\n      const struct RTCFilterFunctionNArguments* filterArgs\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcInvokeIntersectFilterFromGeometry` function can be called\ninside an `RTCIntersectFunctionN` user geometry callback function to\ninvoke the intersection filter registered to the geometry. For this an\n`RTCFilterFunctionNArguments` structure must be created (see\n`rtcSetGeometryIntersectFilterFunction`) which basically consists of a\nvalid mask, a hit packet to filter, the corresponding ray packet, and\nthe packet size. After the invocation of\n`rtcInvokeIntersectFilterFromGeometry`, only rays that are still valid\n(valid mask set to -1) should update a hit.\n\n#### EXIT STATUS {#exit-status}\n\nFor performance reasons this function does not do any error checks,\nthus will not set any error flags on failure.\n\n#### SEE ALSO {#see-also}\n\n[rtcInvokeOccludedFilterFromGeometry],\n[rtcSetGeometryIntersectFunction]\n\n```{=tex}\n\n```\nrtcInvokeOccludedFilterFromGeometry\n-----------------------------------\n\n#### NAME {#name}\n\n    rtcInvokeOccludedFilterFromGeometry - invokes the occlusion\n      filter function from the geometry\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcInvokeOccludedFilterFromGeometry(\n      const struct RTCOccludedFunctionNArguments* args,\n      const struct RTCFilterFunctionNArguments* filterArgs\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcInvokeOccludedFilterFromGeometry` function can be called inside\nan `RTCOccludedFunctionN` user geometry callback function to invoke the\nocclusion filter registered to the geometry. For this an\n`RTCFilterFunctionNArguments` structure must be created (see\n`rtcSetGeometryIntersectFilterFunction`) which basically consists of a\nvalid mask, a hit packet to filter, the corresponding ray packet, and\nthe packet size. After the invocation of\n`rtcInvokeOccludedFilterFromGeometry` only rays that are still valid\n(valid mask set to -1) should signal an occlusion.\n\n#### EXIT STATUS {#exit-status}\n\nFor performance reasons this function does not do any error checks,\nthus will not set any error flags on failure.\n\n#### SEE ALSO {#see-also}\n\n[rtcInvokeIntersectFilterFromGeometry],\n[rtcSetGeometryOccludedFunction]\n\n```{=tex}\n\n```\nrtcSetGeometryUserData\n----------------------\n\n#### NAME {#name}\n\n    rtcSetGeometryUserData - sets the user-defined data pointer of the\n      geometry\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcSetGeometryUserData(RTCGeometry geometry, void* userPtr);\n\n#### DESCRIPTION {#description}\n\nThe `rtcSetGeometryUserData` function sets the user-defined data\npointer (`userPtr` argument) for a geometry (`geometry` argument). This\nuser data pointer is intended to be pointing to the application's\nrepresentation of the geometry, and is passed to various callback\nfunctions. The application can use this pointer inside the callback\nfunctions to access its geometry representation.\n\nThe `rtcGetGeometryUserData` function can be used to query an already\nset user data pointer of a geometry.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcGetGeometryUserData]\n\n```{=tex}\n\n```\nrtcGetGeometryUserData\n----------------------\n\n#### NAME {#name}\n\n    rtcGetGeometryUserData - returns the user data pointer\n      of the geometry\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void* rtcGetGeometryUserData(RTCGeometry geometry);\n\n#### DESCRIPTION {#description}\n\nThe `rtcGetGeometryUserData` function queries the user data pointer\npreviously set with `rtcSetGeometryUserData`. When\n`rtcSetGeometryUserData` was not called yet, `NULL` is returned.\n\nThis function is supposed to be used during rendering, but only\nsupported on the CPU and not inside SYCL kernels on the GPU. Inside a\nSYCL kernel the `rtcGetGeometryUserDataFromScene` function has to get\nused.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcSetGeometryUserData], [rtcGetGeometryUserDataFromScene]\n\n```{=tex}\n\n```\nrtcGetGeometryUserDataFromScene\n-------------------------------\n\n#### NAME {#name}\n\n    rtcGetGeometryUserDataFromScene - returns the user data pointer\n      of the geometry through the scene object\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void* rtcGetGeometryUserDataFromScene(RTCScene scene, unsigned int geomID);\n\n#### DESCRIPTION {#description}\n\nThe `rtcGetGeometryUserDataFromScene` function queries the user data\npointer previously set with `rtcSetGeometryUserData` from the geometry\nwith index `geomID` from the specified scene `scene`. When\n`rtcSetGeometryUserData` was not called yet, `NULL` is returned.\n\nIn contrast to the `rtcGetGeometryUserData` function, the\n`rtcGetGeometryUserDataFromScene` function an get used during rendering\ninside a SYCL kernel.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcSetGeometryUserData], [rtcGetGeometryUserData]\n\n```{=tex}\n\n```\nrtcSetGeometryUserPrimitiveCount\n--------------------------------\n\n#### NAME {#name}\n\n    rtcSetGeometryUserPrimitiveCount - sets the number of primitives\n      of a user-defined geometry\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcSetGeometryUserPrimitiveCount(\n      RTCGeometry geometry,\n      unsigned int userPrimitiveCount\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcSetGeometryUserPrimitiveCount` function sets the number of\nuser-defined primitives (`userPrimitiveCount` parameter) of the\nspecified user-defined geometry (`geometry` parameter).\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[RTC\\_GEOMETRY\\_TYPE\\_USER]\n\n```{=tex}\n\n```\nrtcSetGeometryBoundsFunction\n----------------------------\n\n#### NAME {#name}\n\n    rtcSetGeometryBoundsFunction - sets a callback to query the\n      bounding box of user-defined primitives\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    struct RTCBoundsFunctionArguments\n    {\n      void* geometryUserPtr;\n      unsigned int primID;\n      unsigned int timeStep;\n      struct RTCBounds* bounds_o;\n    };\n\n    typedef void (*RTCBoundsFunction)(\n      const struct RTCBoundsFunctionArguments* args\n    );\n\n    void rtcSetGeometryBoundsFunction(\n      RTCGeometry geometry,\n      RTCBoundsFunction bounds,\n      void* userPtr\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcSetGeometryBoundsFunction` function registers a bounding box\ncallback function (`bounds` argument) with payload (`userPtr` argument)\nfor the specified user geometry (`geometry` argument).\n\nOnly a single callback function can be registered per geometry, and\nfurther invocations overwrite the previously set callback function.\nPassing `NULL` as function pointer disables the registered callback\nfunction.\n\nIn SYCL mode the BVH construction is done on the host and the passed\nfunction pointer must be a host-side function pointer.\n\nThe registered bounding box callback function is invoked to calculate\naxis-aligned bounding boxes of the primitives of the user-defined\ngeometry during spatial acceleration structure construction. The\nbounding box callback of `RTCBoundsFunction` type is invoked with a\npointer to a structure of type `RTCBoundsFunctionArguments` which\ncontains various arguments, such as: the user data of the geometry\n(`geometryUserPtr` member), the ID of the primitive to calculate the\nbounds for (`primID` member), the time step at which to calculate the\nbounds (`timeStep` member), and a memory location to write the\ncalculated bound to (`bounds_o` member).\n\nIn a typical usage scenario one would store a pointer to the internal\nrepresentation of the user geometry object using\n`rtcSetGeometryUserData`. The callback function can then read that\npointer from the `geometryUserPtr` field and calculate the proper\nbounding box for the requested primitive and time, and store that\nbounding box to the destination structure (`bounds_o` member).\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[RTC\\_GEOMETRY\\_TYPE\\_USER]\n\n```{=tex}\n\n```\nrtcSetGeometryIntersectFunction\n-------------------------------\n\n#### NAME {#name}\n\n    rtcSetGeometryIntersectFunction - sets the callback function to\n      intersect a user geometry\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    struct RTCIntersectFunctionNArguments\n    {\n      int* valid;\n      void* geometryUserPtr;\n      unsigned int primID;\n      struct RTCRayQueryContext* context;\n      struct RTCRayHitN* rayhit;\n      unsigned int N;\n      unsigned int geomID;\n    };\n\n    typedef void (*RTCIntersectFunctionN)(\n      const struct RTCIntersectFunctionNArguments* args\n    );\n\n    void rtcSetGeometryIntersectFunction(\n      RTCGeometry geometry,\n      RTCIntersectFunctionN intersect\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcSetGeometryIntersectFunction` function registers a\nray/primitive intersection callback function (`intersect` argument) for\nthe specified user geometry (`geometry` argument).\n\nOnly a single callback function can be registered per geometry and\nfurther invocations overwrite the previously set callback function.\nPassing `NULL` as function pointer disables the registered callback\nfunction.\n\nThe registered callback function is invoked by `rtcIntersect`-type ray\nqueries to calculate the intersection of a ray packet of variable size\nwith one user-defined primitive. The callback function of type\n`RTCIntersectFunctionN` gets passed a number of arguments through the\n`RTCIntersectFunctionNArguments` structure. The value `N` specifies the\nray packet size, `valid` points to an array of integers that specify\nwhether the corresponding ray is valid (-1) or invalid (0), the\n`geometryUserPtr` member points to the geometry user data previously\nset through `rtcSetGeometryUserData`, the `context` member points to\nthe ray query context passed to the ray query, the `rayhit` member\npoints to a ray and hit packet of variable size `N`, and the `geomID`\nand `primID` member identifies the geometry ID and primitive ID of the\nprimitive to intersect.\n\nThe `ray` component of the `rayhit` structure contains valid data, in\nparticular the `tfar` value is the current closest hit distance found.\nAll data inside the `hit` component of the `rayhit` structure are\nundefined and should not be read by the function.\n\nThe task of the callback function is to intersect each active ray from\nthe ray packet with the specified user primitive. If the user-defined\nprimitive is missed by a ray of the ray packet, the function should\nreturn without modifying the ray or hit. If an intersection of the\nuser-defined primitive with the ray was found in the valid range (from\n`tnear` to `tfar`), it should update the hit distance of the ray\n(`tfar` member) and the hit (`u`, `v`, `Ng`, `instID`, `geomID`,\n`primID` members). In particular, the currently intersected instance is\nstored in the `instID` field of the ray query context, which must be\ndeep copied into the `instID` member of the hit.\n\nAs a primitive might have multiple intersections with a ray, the\nintersection filter function needs to be invoked by the user geometry\nintersection callback for each encountered intersection, if filtering\nof intersections is desired. This can be achieved through the\n`rtcInvokeIntersectFilterFromGeometry` call.\n\nWithin the user geometry intersect function, it is safe to trace new\nrays and create new scenes and geometries.\n\nWhen performing ray queries using `rtcIntersect1`, it is guaranteed\nthat the packet size is 1 when the callback is invoked. When performing\nray queries using the `rtcIntersect4/8/16` functions, it is not\ngenerally guaranteed that the ray packet size (and order of rays inside\nthe packet) passed to the callback matches the initial ray packet.\nHowever, under some circumstances these properties are guaranteed, and\nwhether this is the case can be queried using `rtcGetDeviceProperty`.\n\nFor many usage scenarios, repacking and re-ordering of rays does not\ncause difficulties in implementing the callback function. However,\nalgorithms that need to extend the ray with additional data must use\nthe `rayID` component of the ray to identify the original ray to access\nthe per-ray data.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcSetGeometryOccludedFunction], [rtcSetGeometryUserData],\n[rtcInvokeIntersectFilterFromGeometry]\n\n```{=tex}\n\n```\nrtcSetGeometryOccludedFunction\n------------------------------\n\n#### NAME {#name}\n\n    rtcSetGeometryOccludedFunction - sets the callback function to\n      test a user geometry for occlusion\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    struct RTCOccludedFunctionNArguments\n    {\n      int* valid;\n      void* geometryUserPtr;\n      unsigned int primID;\n      struct RTCRayQueryContext* context;\n      struct RTCRayN* ray;\n      unsigned int N;\n      unsigned int geomID;\n    };\n\n    typedef void (*RTCOccludedFunctionN)(\n      const struct RTCOccludedFunctionNArguments* args\n    );\n\n    void rtcSetGeometryOccludedFunction(\n      RTCGeometry geometry,\n      RTCOccludedFunctionN filter\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcSetGeometryOccludedFunction` function registers a ray/primitive\nocclusion callback function (`filter` argument) for the specified user\ngeometry (`geometry` argument).\n\nOnly a single callback function can be registered per geometry, and\nfurther invocations overwrite the previously set callback function.\nPassing `NULL` as function pointer disables the registered callback\nfunction.\n\nThe registered callback function is invoked by `rtcOccluded`-type ray\nqueries to test whether the rays of a packet of variable size are\noccluded by a user-defined primitive. The callback function of type\n`RTCOccludedFunctionN` gets passed a number of arguments through the\n`RTCOccludedFunctionNArguments` structure. The value `N` specifies the\nray packet size, `valid` points to an array of integers which specify\nwhether the corresponding ray is valid (-1) or invalid (0), the\n`geometryUserPtr` member points to the geometry user data previously\nset through `rtcSetGeometryUserData`, the `context` member points to\nthe ray query context passed to the ray query, the `ray` member points\nto a ray packet of variable size `N`, and the `geomID` and `primID`\nmember identifies the geometry ID and primitive ID of the primitive to\nintersect.\n\nThe task of the callback function is to intersect each active ray from\nthe ray packet with the specified user primitive. If the user-defined\nprimitive is missed by a ray of the ray packet, the function should\nreturn without modifying the ray. If an intersection of the\nuser-defined primitive with the ray was found in the valid range (from\n`tnear` to `tfar`), it should set the `tfar` member of the ray to\n`-inf`.\n\nAs a primitive might have multiple intersections with a ray, the\nocclusion filter function needs to be invoked by the user geometry\nocclusion callback for each encountered intersection, if filtering of\nintersections is desired. This can be achieved through the\n`rtcInvokeOccludedFilterFromGeometry` call.\n\nWithin the user geometry occlusion function, it is safe to trace new\nrays and create new scenes and geometries.\n\nWhen performing ray queries using `rtcOccluded1`, it is guaranteed that\nthe packet size is 1 when the callback is invoked. When performing ray\nqueries using the `rtcOccluded4/8/16` functions, it is not generally\nguaranteed that the ray packet size (and order of rays inside the\npacket) passed to the callback matches the initial ray packet. However,\nunder some circumstances these properties are guaranteed, and whether\nthis is the case can be queried using `rtcGetDeviceProperty`.\n\nFor many usage scenarios, repacking and re-ordering of rays does not\ncause difficulties in implementing the callback function. However,\nalgorithms that need to extend the ray with additional data must use\nthe `rayID` component of the ray to identify the original ray to access\nthe per-ray data.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcSetGeometryIntersectFunction], [rtcSetGeometryUserData],\n[rtcInvokeOccludedFilterFromGeometry]\n\n```{=tex}\n\n```\nrtcSetGeometryPointQueryFunction\n--------------------------------\n\n#### NAME {#name}\n\n    rtcSetGeometryPointQueryFunction - sets the point query callback function\n      for a geometry\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    struct RTCPointQueryFunctionArguments\n    {\n      // the (world space) query object that was passed as an argument of rtcPointQuery.\n      struct RTCPointQuery* query;\n\n      // used for user input/output data. Will not be read or modified internally.\n      void* userPtr;\n\n      // primitive and geometry ID of primitive\n      unsigned int  primID;        \n      unsigned int  geomID;    \n\n      // the context with transformation and instance ID stack\n      struct RTCPointQueryContext* context;\n\n      // scaling factor indicating whether the current instance transformation\n      // is a similarity transformation.\n      float similarityScale;\n    };\n\n    typedef bool (*RTCPointQueryFunction)(\n      struct RTCPointQueryFunctionArguments* args\n    );\n\n    void rtcSetGeometryPointQueryFunction(\n      RTCGeometry geometry,\n      RTCPointQueryFunction queryFunc\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcSetGeometryPointQueryFunction` function registers a point query\ncallback function (`queryFunc` argument) for the specified geometry\n(`geometry` argument).\n\nOnly a single callback function can be registered per geometry and\nfurther invocations overwrite the previously set callback function.\nPassing `NULL` as function pointer disables the registered callback\nfunction.\n\nThe registered callback function is invoked by [rtcPointQuery] for\nevery primitive of the geometry that intersects the corresponding point\nquery domain. The callback function of type `RTCPointQueryFunction`\ngets passed a number of arguments through the\n`RTCPointQueryFunctionArguments` structure. The `query` object is the\noriginal point query object passed into [rtcPointQuery], `usrPtr` is\nan arbitrary pointer to pass input into and store results of the\ncallback function. The `primID`, `geomID` and `context` (see\n[rtcInitPointQueryContext] for details) can be used to identify the\ngeometry data of the primitive.\n\nA `RTCPointQueryFunction` can also be passed directly as an argument to\n[rtcPointQuery]. In this case the callback is invoked for all\nprimitives in the scene that intersect the query domain. If a callback\nfunction is passed as an argument to [rtcPointQuery] and (a\npotentially different) callback function is set for a geometry with\n[rtcSetGeometryPointQueryFunction] both callback functions are\ninvoked and the callback function passed to [rtcPointQuery] will be\ncalled before the geometry specific callback function.\n\nIf instancing is used, the parameter `simliarityScale` indicates\nwhether the current instance transform (top element of the stack in\n`context`) is a similarity transformation or not. Similarity\ntransformations are composed of translation, rotation and uniform\nscaling and if a matrix M defines a similarity transformation, there is\na scaling factor D such that for all x,y: dist(Mx, My) = D \\* dist(x,\ny). In this case the parameter `scalingFactor` is this scaling factor D\nand otherwise it is 0. A valid similarity scale (`similarityScale` \\>\n0) allows to compute distance information in instance space and scale\nthe distances into world space (for example, to update the query\nradius, see below) by dividing the instance space distance with the\nsimilarity scale. If the current instance transform is not a similarity\ntransform (`similarityScale` is 0), the distance computation has to be\nperformed in world space to ensure correctness. In this case the\ninstance to world transformations given with the `context` should be\nused to transform the primitive data into world space. Otherwise, the\nquery location can be transformed into instance space which can be more\nefficient. If there is no instance transform, the similarity scale is\n1.\n\nThe callback function will potentially be called for primitives outside\nthe query domain for two reasons: First, the callback is invoked for\nall primitives inside a BVH leaf node since no geometry data of\nprimitives is determined internally and therefore individual primitives\nare not culled (only their (aggregated) bounding boxes). Second, in\ncase non similarity transformations are used, the resulting ellipsoidal\nquery domain (in instance space) is approximated by its axis aligned\nbounding box internally and therefore inner nodes that do not intersect\nthe original domain might intersect the approximative bounding box\nwhich results in unnecessary callbacks. In any case, the callbacks are\nconservative, i.e. if a primitive is inside the query domain a callback\nwill be invoked but the reverse is not necessarily true.\n\nFor efficiency, the radius of the `query` object can be decreased (in\nworld space) inside the callback function to improve culling of\ngeometry during BVH traversal. If the query radius was updated, the\ncallback function should return `true` to issue an update of internal\ntraversal information. Increasing the radius or modifying the time or\nposition of the query results in undefined behaviour.\n\nWithin the callback function, it is safe to call [rtcPointQuery]\nagain, for example when implementing instancing manually. In this case\nthe instance transformation should be pushed onto the stack in\n`context`. Embree will internally compute the point query information\nin instance space using the top element of the stack in `context` when\n[rtcPointQuery] is called.\n\nFor a reference implementation of a closest point traversal of triangle\nmeshes using instancing and user defined instancing see the tutorial\n[ClosestPoint].\n\n#### SEE ALSO {#see-also}\n\n[rtcPointQuery], [rtcInitPointQueryContext]\n\n```{=tex}\n\n```\nrtcGetSYCLDeviceFunctionPointer\n-------------------------------\n\n#### NAME {#name}\n\n    rtcGetSYCLDeviceFunctionPointer - obtains a device side\n      function pointer for some SYCL function\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    template<auto F>\n    inline decltype(F) rtcGetSYCLDeviceFunctionPointer(sycl::queue& queue);\n\n#### DESCRIPTION {#description}\n\nThis function returns a device side function pointer for some function\nF. This function F must be defined using the\n`RTC_SYCL_INDIRECTLY_CALLABLE` attribute, e.g.:\n\n    RTC_SYCL_INDIRECTLY_CALLABLE void filter(\n      const RTCFilterFunctionNArguments* args) { ... }\n\n    RTCFilterFunctionN fptr = rtcGetSYCLDeviceFunctionPointer<filter>(queue);\n\nSuch a device side function pointers of some filter callbacks can get\nassigned to a geometry using the\n`rtcSetGeometryIntersectFilterFunction` and\n`rtcSetGeometryOccludedFilterFunction` API functions.\n\nFurther, device side function pointers for user geometry callbacks can\nbe assigned to geometries using the `rtcSetGeometryIntersectFunction`\nand `rtcSetGeometryOccludedFunction` API calls.\n\nThese geometry versions of the callback functions are disabled in SYCL\nby default, and we recommend not using them for performance reasons.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcSetGeometryIntersectFunction],\n[rtcSetGeometryOccludedFunction],\n[rtcSetGeometryIntersectFilterFunction],\n[rtcSetGeometryOccludedFilterFunction]\n\n```{=tex}\n\n```\nrtcSetGeometryInstancedScene\n----------------------------\n\n#### NAME {#name}\n\n    rtcSetGeometryInstancedScene - sets the instanced scene of\n      an instance geometry\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcSetGeometryInstancedScene(\n      RTCGeometry geometry,\n      RTCScene scene\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcSetGeometryInstancedScene` function sets the instanced scene\n(`scene` argument) of the specified instance geometry (`geometry`\nargument).\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[RTC\\_GEOMETRY\\_TYPE\\_INSTANCE], [rtcSetGeometryTransform]\n\n```{=tex}\n\n```\nrtcSetGeometryInstancedScenes\n-----------------------------\n\n#### NAME {#name}\n\n    rtcSetGeometryInstancedScenes - sets an array of scenes that can be\n    instanced by an instance array geometry\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcSetGeometryInstancedScenes(\n      RTCGeometry geometry,\n      RTCScene* scene,\n      size_t numScenes\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcSetGeometryInstancedScenes` function sets an array of type\n`RTCScene` with `numScenes` elements that the specified instance\ngeometry (`geometry` argument) can instance. This call also requires\nsetting an index buffer using either `rtcSetSharedGeometryBuffer` or\n`rtcSetNewGeometryBuffer` (similar to index buffers for triangle\nmeshes), that specifies which instance of the instance array instances\nwhich scene in the scene array. If only one scene should be instanced\nthe call `rtcSetGeometryInstancedScene` should be preferred.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[RTC\\_GEOMETRY\\_TYPE\\_INSTANCE\\_ARRAY], [rtcSetNewGeometryBuffer],\n[rtcSetSharedGeometryBuffer], [rtcSetGeometryInstancedScene]\n\n```{=tex}\n\n```\nrtcSetGeometryTransform\n-----------------------\n\n#### NAME {#name}\n\n    rtcSetGeometryTransform - sets the transformation for a particular\n      time step of an instance geometry\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcSetGeometryTransform(\n      RTCGeometry geometry,\n      unsigned int timeStep,\n      enum RTCFormat format,\n      const float* xfm\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcSetGeometryTransform` function sets the local-to-world affine\ntransformation (`xfm` parameter) of an instance geometry (`geometry`\nparameter) for a particular time step (`timeStep` parameter). The\ntransformation is specified as a 3×4 matrix (3×3 linear transformation\nplus translation), for which the following formats (`format` parameter)\nare supported:\n\n-   `RTC_FORMAT_FLOAT3X4_ROW_MAJOR`: The 3×4 float matrix is laid out\n    in row-major form.\n\n-   `RTC_FORMAT_FLOAT3X4_COLUMN_MAJOR`: The 3×4 float matrix is laid\n    out in column-major form.\n\n-   `RTC_FORMAT_FLOAT4X4_COLUMN_MAJOR`: The 3×4 float matrix is laid\n    out in column-major form as a 4×4 homogeneous matrix with the last\n    row being equal to (0, 0, 0, 1).\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[RTC\\_GEOMETRY\\_TYPE\\_INSTANCE]\n\n```{=tex}\n\n```\nrtcSetGeometryTransformQuaternion\n---------------------------------\n\n#### NAME {#name}\n\n    rtcSetGeometryTransformQuaternion - sets the transformation for a particular\n      time step of an instance geometry as a decomposition of the\n      transformation matrix using quaternions to represent the rotation.\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcSetGeometryTransformQuaternion(\n      RTCGeometry geometry,\n      unsigned int timeStep,\n      const struct RTCQuaternionDecomposition* qd\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcSetGeometryTransformQuaternion` function sets the\nlocal-to-world affine transformation (`qd` parameter) of an instance\ngeometry (`geometry` parameter) for a particular time step (`timeStep`\nparameter). The transformation is specified as a\n[RTCQuaternionDecomposition], which is a decomposition of an affine\ntransformation that represents the rotational component of an affine\ntransformation as a quaternion. This allows interpolating rotational\ntransformations exactly using spherical linear interpolation (such as a\nturning wheel).\n\nFor more information about the decomposition see\n[RTCQuaternionDecomposition]. The quaternion given in the\n`RTCQuaternionDecomposition` struct will be normalized internally.\n\nFor correct results, the transformation matrices for all time steps\nmust be set either using `rtcSetGeometryTransform` or\n`rtcSetGeometryTransformQuaternion`. Mixing both representations is not\nallowed. Spherical linear interpolation will be used, iff the\ntransformation matizes are set with\n`rtcSetGeometryTransformQuaternion`.\n\nFor an example of this feature see the tutorial [Quaternion Motion\nBlur].\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcInitQuaternionDecomposition], [rtcSetGeometryTransform]\n\n```{=tex}\n\n```\nrtcGetGeometryTransform\n-----------------------\n\n#### NAME {#name}\n\n    rtcGetGeometryTransform - returns the interpolated instance\n      transformation for the specified time\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcGetGeometryTransform(\n      RTCGeometry geometry,\n      float time,\n      enum RTCFormat format,\n      void* xfm\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcGetGeometryTransform` function returns the interpolated local\nto world transformation (`xfm` parameter) of an instance geometry\n(`geometry` parameter) for a particular time (`time` parameter in range\n$[0,1]$) in the specified format (`format` parameter).\n\nPossible formats for the returned matrix are:\n\n-   `RTC_FORMAT_FLOAT3X4_ROW_MAJOR`: The 3×4 float matrix is laid out\n    in row-major form.\n\n-   `RTC_FORMAT_FLOAT3X4_COLUMN_MAJOR`: The 3×4 float matrix is laid\n    out in column-major form.\n\n-   `RTC_FORMAT_FLOAT4X4_COLUMN_MAJOR`: The 3×4 float matrix is laid\n    out in column-major form as a 4×4 homogeneous matrix with last row\n    equal to (0, 0, 0, 1).\n\nThis function is supposed to be used during rendering, but only\nsupported on the CPU and not inside SYCL kernels on the GPU. Inside a\nSYCL kernel the `rtcGetGeometryTransformFromScene` function has to get\nused.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[RTC\\_GEOMETRY\\_TYPE\\_INSTANCE], [rtcSetGeometryTransform],\n[rtcGetGeometryTransformFromScene]\n\n```{=tex}\n\n```\nrtcGetGeometryTransformEx\n-------------------------\n\n#### NAME {#name}\n\n    rtcGetGeometryTransformEx - returns the interpolated instance\n    transformation for an instance of an instance array geometry for the\n    specified time.\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcGetGeometryTransformEx(\n      RTCGeometry geometry,\n      unsigned int instPrimID,\n      float time,\n      enum RTCFormat format,\n      void* xfm\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcGetGeometryTransformEx` function returns the interpolated local\nto world transformation (`xfm` parameter) of the `instPrimID`-th\ninstance of an instance array geometry (`geometry` parameter) for a\nparticular time (`time` parameter in range $[0,1]$) in the specified\nformat (`format` parameter). The function can also be used when\n`geometry` refers to a regular instance, but then the `instPrimID` has\nto be $0$.\n\nPossible formats for the returned matrix are:\n\n-   `RTC_FORMAT_FLOAT3X4_ROW_MAJOR`: The 3×4 float matrix is laid out\n    in row-major form.\n\n-   `RTC_FORMAT_FLOAT3X4_COLUMN_MAJOR`: The 3×4 float matrix is laid\n    out in column-major form.\n\n-   `RTC_FORMAT_FLOAT4X4_COLUMN_MAJOR`: The 3×4 float matrix is laid\n    out in column-major form as a 4×4 homogeneous matrix with last row\n    equal to (0, 0, 0, 1).\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[RTC\\_GEOMETRY\\_TYPE\\_INSTANCE\\_ARRAY]\n\n```{=tex}\n\n```\nrtcGetGeometryTransformFromScene\n--------------------------------\n\n#### NAME {#name}\n\n    rtcGetGeometryTransformFromScene - returns the interpolated instance\n      transformation for the specified time\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcGetGeometryTransformFromScene(\n      RTCScene scene,\n      unsigned int geomID,\n      float time,\n      enum RTCFormat format,\n      void* xfm\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcGetGeometryTransformFromScene` function returns the\ninterpolated local to world transformation (`xfm` output parameter) of\nan instance geometry specified by its geometry ID (`geomID` parameter)\nof a scene (`scene` parameter) for a particular time (`time` parameter\nin range $[0,1]$) in the specified format (`format` parameter).\n\nPossible formats for the returned matrix are:\n\n-   `RTC_FORMAT_FLOAT3X4_ROW_MAJOR`: The 3×4 float matrix is laid out\n    in row-major form.\n\n-   `RTC_FORMAT_FLOAT3X4_COLUMN_MAJOR`: The 3×4 float matrix is laid\n    out in column-major form.\n\n-   `RTC_FORMAT_FLOAT4X4_COLUMN_MAJOR`: The 3×4 float matrix is laid\n    out in column-major form as a 4×4 homogeneous matrix with last row\n    equal to (0, 0, 0, 1).\n\nIn contrast to the `rtcGetGeometryTransform` function, the\n`rtcGetGeometryTransformFromScene` function can get used during\nrendering inside a SYCL kernel.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[RTC\\_GEOMETRY\\_TYPE\\_INSTANCE], [rtcSetGeometryTransform],\n[rtcGetGeometryTransform]\n\n```{=tex}\n\n```\nrtcSetGeometryTessellationRate\n------------------------------\n\n#### NAME {#name}\n\n    rtcSetGeometryTessellationRate - sets the tessellation rate of the\n      geometry\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcSetGeometryTessellationRate(\n      RTCGeometry geometry,\n      float tessellationRate\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcSetGeometryTessellationRate` function sets the tessellation\nrate (`tessellationRate` argument) for the specified geometry\n(`geometry` argument). The tessellation rate can only be set for flat\ncurves and subdivision geometries. For curves, the tessellation rate\nspecifies the number of ray-facing quads per curve segment. For\nsubdivision surfaces, the tessellation rate specifies the number of\nquads along each edge.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[RTC\\_GEOMETRY\\_TYPE\\_CURVE], [RTC\\_GEOMETRY\\_TYPE\\_SUBDIVISION]\n\n```{=tex}\n\n```\nrtcSetGeometryTopologyCount\n---------------------------\n\n#### NAME {#name}\n\n    rtcSetGeometryTopologyCount - sets the number of topologies of\n      a subdivision geometry\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcSetGeometryTopologyCount(\n      RTCGeometry geometry,\n      unsigned int topologyCount\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcSetGeometryTopologyCount` function sets the number of\ntopologies (`topologyCount` parameter) for the specified subdivision\ngeometry (`geometry` parameter). The number of topologies of a\nsubdivision geometry must be greater or equal to 1.\n\nTo use multiple topologies, first the number of topologies must be\nspecified, then the individual topologies can be configured using\n`rtcSetGeometrySubdivisionMode` and by setting an index buffer\n(`RTC_BUFFER_TYPE_INDEX`) using the topology ID as the buffer slot.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[RTC\\_GEOMETRY\\_TYPE\\_SUBDIVISION], [rtcSetGeometrySubdivisionMode]\n\n```{=tex}\n\n```\nrtcSetGeometrySubdivisionMode\n-----------------------------\n\n#### NAME {#name}\n\n    rtcSetGeometrySubdivisionMode - sets the subdivision mode\n      of a subdivision geometry\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcSetGeometrySubdivisionMode(\n      RTCGeometry geometry,\n      unsigned int topologyID,\n      enum RTCSubdivisionMode mode\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcSetGeometrySubdivisionMode` function sets the subdivision mode\n(`mode` parameter) for the topology (`topologyID` parameter) of the\nspecified subdivision geometry (`geometry` parameter).\n\nThe subdivision modes can be used to force linear interpolation for\ncertain parts of the subdivision mesh:\n\n-   `RTC_SUBDIVISION_MODE_NO_BOUNDARY`: Boundary patches are ignored.\n    This way each rendered patch has a full set of control vertices.\n\n-   `RTC_SUBDIVISION_MODE_SMOOTH_BOUNDARY`: The sequence of boundary\n    control points are used to generate a smooth B-spline boundary\n    curve (default mode).\n\n-   `RTC_SUBDIVISION_MODE_PIN_CORNERS`: Corner vertices are pinned to\n    their location during subdivision.\n\n-   `RTC_SUBDIVISION_MODE_PIN_BOUNDARY`: All vertices at the border are\n    pinned to their location during subdivision. This way the boundary\n    is interpolated linearly. This mode is typically used for texturing\n    to also map texels at the border of the texture to the mesh.\n\n-   `RTC_SUBDIVISION_MODE_PIN_ALL`: All vertices at the border are\n    pinned to their location during subdivision. This way all patches\n    are linearly interpolated.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[RTC\\_GEOMETRY\\_TYPE\\_SUBDIVISION]\n\n```{=tex}\n\n```\nrtcSetGeometryVertexAttributeTopology\n-------------------------------------\n\n#### NAME {#name}\n\n    rtcSetGeometryVertexAttributeTopology - binds a vertex\n      attribute to a topology of the geometry\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcSetGeometryVertexAttributeTopology(\n      RTCGeometry geometry,\n      unsigned int vertexAttributeID,\n      unsigned int topologyID\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcSetGeometryVertexAttributeTopology` function binds a vertex\nattribute buffer slot (`vertexAttributeID` argument) to a topology\n(`topologyID` argument) for the specified subdivision geometry\n(`geometry` argument). Standard vertex buffers are always bound to the\ndefault topology (topology 0) and cannot be bound differently. A vertex\nattribute buffer always uses the topology it is bound to when used in\nthe `rtcInterpolate` and `rtcInterpolateN` calls.\n\nA topology with ID `i` consists of a subdivision mode set through\n`rtcSetGeometrySubdivisionMode` and the index buffer bound to the index\nbuffer slot `i`. This index buffer can assign indices for each face of\nthe subdivision geometry that are different to the indices of the\ndefault topology. These new indices can for example be used to\nintroduce additional borders into the subdivision mesh to map multiple\ntextures onto one subdivision geometry.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcSetGeometrySubdivisionMode], [rtcInterpolate],\n[rtcInterpolateN]\n\n```{=tex}\n\n```\nrtcSetGeometryDisplacementFunction\n----------------------------------\n\n#### NAME {#name}\n\n    rtcSetGeometryDisplacementFunction - sets the displacement function\n      for a subdivision geometry\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    struct RTCDisplacementFunctionNArguments\n    {\n      void* geometryUserPtr;\n      RTCGeometry geometry;\n      unsigned int primID;\n      unsigned int timeStep;\n      const float* u;\n      const float* v;\n      const float* Ng_x;\n      const float* Ng_y;\n      const float* Ng_z;\n      float* P_x;\n      float* P_y;\n      float* P_z;\n      unsigned int N;\n    };\n\n    typedef void (*RTCDisplacementFunctionN)(\n       const struct RTCDisplacementFunctionNArguments* args\n    );\n\n    void rtcSetGeometryDisplacementFunction(\n      RTCGeometry geometry,\n      RTCDisplacementFunctionN displacement\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcSetGeometryDisplacementFunction` function registers a\ndisplacement callback function (`displacement` argument) for the\nspecified subdivision geometry (`geometry` argument).\n\nOnly a single callback function can be registered per geometry, and\nfurther invocations overwrite the previously set callback function.\nPassing `NULL` as function pointer disables the registered callback\nfunction.\n\nThe registered displacement callback function is invoked to displace\npoints on the subdivision geometry during spatial acceleration\nstructure construction, during the `rtcCommitScene` call.\n\nThe callback function of type `RTCDisplacementFunctionN` is invoked\nwith a number of arguments stored inside the\n`RTCDisplacementFunctionNArguments` structure. The provided user data\npointer of the geometry (`geometryUserPtr` member) can be used to point\nto the application's representation of the subdivision mesh. A number\n`N` of points to displace are specified in a structure of array layout.\nFor each point to displace, the local patch UV coordinates (`u` and `v`\narrays), the normalized geometry normal (`Ng_x`, `Ng_y`, and `Ng_z`\narrays), and the position (`P_x`, `P_y`, and `P_z` arrays) are\nprovided. The task of the displacement function is to use this\ninformation and change the position data.\n\nThe geometry handle (`geometry` member) and primitive ID (`primID`\nmember) of the patch to displace are additionally provided as well as\nthe time step `timeStep`, which can be important if the displacement is\ntime-dependent and motion blur is used.\n\nAll passed arrays must be aligned to 64 bytes and properly padded to\nmake wide vector processing inside the displacement function easily\npossible.\n\nAlso see tutorial [Displacement Geometry] for an example of how to\nuse the displacement mapping functions.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[RTC\\_GEOMETRY\\_TYPE\\_SUBDIVISION]\n\n```{=tex}\n\n```\nrtcGetGeometryFirstHalfEdge\n---------------------------\n\n#### NAME {#name}\n\n    rtcGetGeometryFirstHalfEdge - returns the first half edge of a face\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    unsigned int rtcGetGeometryFirstHalfEdge(\n      RTCGeometry geometry,\n      unsigned int faceID\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcGetGeometryFirstHalfEdge` function returns the ID of the first\nhalf edge belonging to the specified face (`faceID` argument). For\ninstance in the following example the first half edge of face `f1` is\n`e4`.\n\n![][imgHalfEdges]\n\nThis function can only be used for subdivision geometries. As all\ntopologies of a subdivision geometry share the same face buffer the\nfunction does not depend on the topology ID.\n\nHere f0 to f7 are 8 quadrilateral faces with 4 vertices each. The edges\ne0 to e23 of these faces are shown with their orientation. For each\nface the ID of the edges corresponds to the slots the face occupies in\nthe index array of the geometry. E.g. as the indices of face f1 start\nat location 4 of the index array, the first edge is edge e4, the next\nedge e5, etc.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcGetGeometryFirstHalfEdge], [rtcGetGeometryFace],\n[rtcGetGeometryOppositeHalfEdge], [rtcGetGeometryNextHalfEdge],\n[rtcGetGeometryPreviousHalfEdge]\n\n```{=tex}\n\n```\nrtcGetGeometryFace\n------------------\n\n#### NAME {#name}\n\n    rtcGetGeometryFace - returns the face of some half edge\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    unsigned int rtcGetGeometryFace(\n      RTCGeometry geometry,\n      unsigned int edgeID\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcGetGeometryFace` function returns the ID of the face the\nspecified half edge (`edgeID` argument) belongs to. For instance in the\nfollowing example the face `f1` is returned for edges `e4`, `e5`, `e6`,\nand `e7`.\n\n![][imgHalfEdges]\n\nThis function can only be used for subdivision geometries. As all\ntopologies of a subdivision geometry share the same face buffer the\nfunction does not depend on the topology ID.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcGetGeometryFirstHalfEdge], [rtcGetGeometryFace],\n[rtcGetGeometryOppositeHalfEdge], [rtcGetGeometryNextHalfEdge],\n[rtcGetGeometryPreviousHalfEdge]\n\n```{=tex}\n\n```\nrtcGetGeometryNextHalfEdge\n--------------------------\n\n#### NAME {#name}\n\n    rtcGetGeometryNextHalfEdge - returns the next half edge\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    unsigned int rtcGetGeometryNextHalfEdge(\n      RTCGeometry geometry,\n      unsigned int edgeID\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcGetGeometryNextHalfEdge` function returns the ID of the next\nhalf edge of the specified half edge (`edgeID` argument). For instance\nin the following example the next half edge of `e10` is `e11`.\n\n![][imgHalfEdges]\n\nThis function can only be used for subdivision geometries. As all\ntopologies of a subdivision geometry share the same face buffer the\nfunction does not depend on the topology ID.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcGetGeometryFirstHalfEdge], [rtcGetGeometryFace],\n[rtcGetGeometryOppositeHalfEdge], [rtcGetGeometryNextHalfEdge],\n[rtcGetGeometryPreviousHalfEdge]\n\n```{=tex}\n\n```\nrtcGetGeometryPreviousHalfEdge\n------------------------------\n\n#### NAME {#name}\n\n    rtcGetGeometryPreviousHalfEdge - returns the previous half edge\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    unsigned int rtcGetGeometryPreviousHalfEdge(\n      RTCGeometry geometry,\n      unsigned int edgeID\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcGetGeometryPreviousHalfEdge` function returns the ID of the\nprevious half edge of the specified half edge (`edgeID` argument). For\ninstance in the following example the previous half edge of `e6` is\n`e5`.\n\n![][imgHalfEdges]\n\nThis function can only be used for subdivision geometries. As all\ntopologies of a subdivision geometry share the same face buffer the\nfunction does not depend on the topology ID.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcGetGeometryFirstHalfEdge], [rtcGetGeometryFace],\n[rtcGetGeometryOppositeHalfEdge], [rtcGetGeometryNextHalfEdge],\n[rtcGetGeometryPreviousHalfEdge]\n\n```{=tex}\n\n```\nrtcGetGeometryOppositeHalfEdge\n------------------------------\n\n#### NAME {#name}\n\n    rtcGetGeometryOppositeHalfEdge - returns the opposite half edge\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    unsigned int rtcGetGeometryOppositeHalfEdge(\n      RTCGeometry geometry,\n      unsigned int topologyID,\n      unsigned int edgeID\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcGetGeometryOppositeHalfEdge` function returns the ID of the\nopposite half edge of the specified half edge (`edgeID` argument) in\nthe specified topology (`topologyID` argument). For instance in the\nfollowing example the opposite half edge of `e6` is `e16`.\n\n![][imgHalfEdges]\n\nAn opposite half edge does not exist if the specified half edge has\neither no neighboring face, or more than 2 neighboring faces. In these\ncases the function just returns the same edge `edgeID` again.\n\nThis function can only be used for subdivision geometries. The function\ndepends on the topology as the topologies of a subdivision geometry\nhave different index buffers assigned.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcGetGeometryFirstHalfEdge], [rtcGetGeometryFace],\n[rtcGetGeometryOppositeHalfEdge], [rtcGetGeometryNextHalfEdge],\n[rtcGetGeometryPreviousHalfEdge]\n\n```{=tex}\n\n```\nrtcInterpolate\n--------------\n\n#### NAME {#name}\n\n    rtcInterpolate - interpolates vertex attributes\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    struct RTCInterpolateArguments\n    {\n      RTCGeometry geometry;\n      unsigned int primID;\n      float u;\n      float v;\n      enum RTCBufferType bufferType;\n      unsigned int bufferSlot;\n      float* P;\n      float* dPdu;\n      float* dPdv;\n      float* ddPdudu;\n      float* ddPdvdv;\n      float* ddPdudv;\n      unsigned int valueCount;\n    };\n\n    void rtcInterpolate(\n      const struct RTCInterpolateArguments* args\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcInterpolate` function smoothly interpolates per-vertex data\nover the geometry. This interpolation is supported for triangle meshes,\nquad meshes, curve geometries, and subdivision geometries. Apart from\ninterpolating the vertex attribute itself, it is also possible to get\nthe first and second order derivatives of that value. This\ninterpolation ignores displacements of subdivision surfaces and always\ninterpolates the underlying base surface.\n\nThe `rtcInterpolate` call gets passed a number of arguments inside a\nstructure of type `RTCInterpolateArguments`. For some geometry\n(`geometry` parameter) this function smoothly interpolates the\nper-vertex data stored inside the specified geometry buffer\n(`bufferType` and `bufferSlot` parameters) to the u/v location (`u` and\n`v` parameters) of the primitive (`primID` parameter). The number of\nfloating point values to interpolate and store to the destination\narrays can be specified using the `valueCount` parameter. As\ninterpolation buffer, one can specify vertex buffers\n(`RTC_BUFFER_TYPE_VERTEX`) and vertex attribute buffers\n(`RTC_BUFFER_TYPE_VERTEX_ATTRIBUTE`) as well.\n\nThe `rtcInterpolate` call stores `valueCount` number of interpolated\nfloating point values to the memory location pointed to by `P`. One can\navoid storing the interpolated value by setting `P` to `NULL`.\n\nThe first order derivative of the interpolation by u and v are stored\nat the `dPdu` and `dPdv` memory locations. One can avoid storing first\norder derivatives by setting both `dPdu` and `dPdv` to `NULL`.\n\nThe second order derivatives are stored at the `ddPdudu`, `ddPdvdv`,\nand `ddPdudv` memory locations. One can avoid storing second order\nderivatives by setting these three pointers to `NULL`.\n\nTo use `rtcInterpolate` for a geometry, all changes to that geometry\nmust be properly committed using `rtcCommitGeometry`.\n\nAll input buffers and output arrays must be padded to 16 bytes, as the\nimplementation uses 16-byte SSE instructions to read and write into\nthese buffers.\n\nSee tutorial [Interpolation] for an example of using the\n`rtcInterpolate` function.\n\n#### EXIT STATUS {#exit-status}\n\nFor performance reasons this function does not do any error checks,\nthus will not set any error flags on failure.\n\n#### SEE ALSO {#see-also}\n\n[rtcInterpolateN]\n\n```{=tex}\n\n```\nrtcInterpolateN\n---------------\n\n#### NAME {#name}\n\n    rtcInterpolateN - performs N interpolations of vertex attribute data\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    struct RTCInterpolateNArguments\n    {\n      RTCGeometry geometry;\n      const void* valid;\n      const unsigned int* primIDs;\n      const float* u;\n      const float* v;\n      unsigned int N;\n      enum RTCBufferType bufferType;\n      unsigned int bufferSlot;\n      float* P;\n      float* dPdu;\n      float* dPdv;\n      float* ddPdudu;\n      float* ddPdvdv;\n      float* ddPdudv;\n      unsigned int valueCount;\n    };\n\n    void rtcInterpolateN(\n      const struct RTCInterpolateNArguments* args\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcInterpolateN` is similar to `rtcInterpolate`, but performs `N`\nmany interpolations at once. It additionally gets an array of u/v\ncoordinates and a valid mask (`valid` parameter) that specifies which\nof these coordinates are valid. The valid mask points to `N` integers,\nand a value of -1 denotes valid and 0 invalid. If the valid pointer is\n`NULL` all elements are considers valid. The destination arrays are\nfilled in structure of array (SOA) layout. The value `N` must be\ndivisible by 4.\n\nTo use `rtcInterpolateN` for a geometry, all changes to that geometry\nmust be properly committed using `rtcCommitGeometry`.\n\n#### EXIT STATUS {#exit-status}\n\nFor performance reasons this function does not do any error checks,\nthus will not set any error flags on failure.\n\n#### SEE ALSO {#see-also}\n\n[rtcInterpolate]\n\n```{=tex}\n\n```\nrtcNewBuffer\n------------\n\n#### NAME {#name}\n\n    rtcNewBuffer - creates a new data buffer\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    RTCBuffer rtcNewBuffer(\n      RTCDevice device,\n      size_t byteSize\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcNewBuffer` function creates a new data buffer object of\nspecified size in bytes (`byteSize` argument) that is bound to the\nspecified device (`device` argument). The buffer object is reference\ncounted with an initial reference count of 1. The returned buffer\nobject can be released using the `rtcReleaseBuffer` API call. The\nspecified number of bytes are allocated at buffer construction time and\ndeallocated when the buffer is destroyed.\n\nWhen the buffer will be used as a vertex buffer\n(`RTC_BUFFER_TYPE_VERTEX` and `RTC_BUFFER_TYPE_VERTEX_ATTRIBUTE`), the\nlast buffer element must be readable using 16-byte SSE load\ninstructions, thus padding the last element is required for certain\nlayouts. E.g. a standard `float3` vertex buffer layout should add\nstorage for at least one more float to the end of the buffer.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure `NULL` is returned and an error code is set that can be\nqueried using `rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcRetainBuffer], [rtcReleaseBuffer]\n\n```{=tex}\n\n```\nrtcNewSharedBuffer\n------------------\n\n#### NAME {#name}\n\n    rtcNewSharedBuffer - creates a new shared data buffer\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    RTCBuffer rtcNewSharedBuffer(\n      RTCDevice device,\n      void* ptr,\n      size_t byteSize\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcNewSharedBuffer` function creates a new shared data buffer\nobject bound to the specified device (`device` argument). The buffer\nobject is reference counted with an initial reference count of 1. The\nbuffer can be released using the `rtcReleaseBuffer` function.\n\nAt construction time, the pointer to the user-managed buffer data\n(`ptr` argument) including its size in bytes (`byteSize` argument) is\nprovided to create the buffer. At buffer construction time no buffer\ndata is allocated, but the buffer data provided by the application is\nused. The buffer data must remain valid for as long as the buffer may\nbe used, and the user is responsible to free the buffer data when no\nlonger required.\n\nWhen the buffer will be used as a vertex buffer\n(`RTC_BUFFER_TYPE_VERTEX` and `RTC_BUFFER_TYPE_VERTEX_ATTRIBUTE`), the\nlast buffer element must be readable using 16-byte SSE load\ninstructions, thus padding the last element is required for certain\nlayouts. E.g. a standard `float3` vertex buffer layout should add\nstorage for at least one more float to the end of the buffer.\n\nThe data pointer (`ptr` argument) must be aligned to 4 bytes; otherwise\nthe `rtcNewSharedBuffer` function will fail.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure `NULL` is returned and an error code is set that can be\nqueried using `rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcRetainBuffer], [rtcReleaseBuffer]\n\n```{=tex}\n\n```\nrtcRetainBuffer\n---------------\n\n#### NAME {#name}\n\n    rtcRetainBuffer - increments the buffer reference count\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcRetainBuffer(RTCBuffer buffer);\n\n#### DESCRIPTION {#description}\n\nBuffer objects are reference counted. The `rtcRetainBuffer` function\nincrements the reference count of the passed buffer object (`buffer`\nargument). This function together with `rtcReleaseBuffer` allows to use\nthe internal reference counting in a C++ wrapper class to handle the\nownership of the object.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcNewBuffer], [rtcReleaseBuffer]\n\n```{=tex}\n\n```\nrtcReleaseBuffer\n----------------\n\n#### NAME {#name}\n\n    rtcReleaseBuffer - decrements the buffer reference count\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcReleaseBuffer(RTCBuffer buffer);\n\n#### DESCRIPTION {#description}\n\nBuffer objects are reference counted. The `rtcReleaseBuffer` function\ndecrements the reference count of the passed buffer object (`buffer`\nargument). When the reference count falls to 0, the buffer gets\ndestroyed.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcNewBuffer], [rtcRetainBuffer]\n\n```{=tex}\n\n```\nrtcGetBufferData\n----------------\n\n#### NAME {#name}\n\n    rtcGetBufferData - gets a pointer to the buffer data\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void* rtcGetBufferData(RTCBuffer buffer);\n\n#### DESCRIPTION {#description}\n\nThe `rtcGetBufferData` function returns a pointer to the buffer data of\nthe specified buffer object (`buffer` argument).\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcNewBuffer]\n\n```{=tex}\n\n```\nRTCRay\n------\n\n#### NAME {#name}\n\n    RTCRay - single ray structure\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore_ray.h>\n\n    struct RTC_ALIGN(16) RTCRay\n    {\n      float org_x;        // x coordinate of ray origin\n      float org_y;        // y coordinate of ray origin\n      float org_z;        // z coordinate of ray origin\n      float tnear;        // start of ray segment\n\n      float dir_x;        // x coordinate of ray direction\n      float dir_y;        // y coordinate of ray direction\n      float dir_z;        // z coordinate of ray direction\n      float time;         // time of this ray for motion blur\n\n      float tfar;         // end of ray segment (set to hit distance)\n      unsigned int mask;  // ray mask\n      unsigned int id;    // ray ID\n      unsigned int flags; // ray flags\n    };\n\n#### DESCRIPTION {#description}\n\nThe `RTCRay` structure defines the ray layout for a single ray. The ray\ncontains the origin (`org_x`, `org_y`, `org_z` members), direction\nvector (`dir_x`, `dir_y`, `dir_z` members), and ray segment (`tnear`\nand `tfar` members). The ray direction does not have to be normalized,\nand only the parameter range specified by the `tnear`/`tfar` interval\nis considered valid.\n\nThe ray segment must be in the range $[0, \\infty]$, thus ranges that\nstart behind the ray origin are not allowed, but ranges can reach to\ninfinity.\n\nThe ray further contains a motion blur time in the range $[0, 1]$\n(`time` member), a ray mask (`mask` member), a ray ID (`id` member),\nand ray flags (`flags` member). The ray mask can be used to mask out\nsome geometries for some rays (see `rtcSetGeometryMask` for more\ndetails). The ray ID can be used to identify a ray inside a callback\nfunction, even if the order of rays inside a ray packet has changed.\n\nThe `embree4/rtcore_ray.h` header additionally defines the same ray\nstructure in structure of array (SOA) layout for API functions\naccepting ray packets of size 4 (`RTCRay4` type), size 8 (`RTCRay8`\ntype), and size 16 (`RTCRay16` type). The header additionally defines\nan `RTCRayNt` template for ray packets of an arbitrary compile-time\nsize.\n\n#### EXIT STATUS {#exit-status}\n\n#### SEE ALSO {#see-also}\n\n[RTCHit]\n\n```{=tex}\n\n```\nRTCHit\n------\n\n#### NAME {#name}\n\n    RTCHit - single hit structure\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    struct RTCHit\n    {\n      float Ng_x;                                        // x coordinate of geometry normal\n      float Ng_y;                                        // y coordinate of geometry normal\n      float Ng_z;                                        // z coordinate of geometry normal\n\n      float u;                                           // barycentric u coordinate of hit\n      float v;                                           // barycentric v coordinate of hit\n\n      unsigned int primID;                               // geometry ID\n      unsigned int geomID;                               // primitive ID\n      unsigned int instID[RTC_MAX_INSTANCE_LEVEL_COUNT]; // instance ID\n    };\n\n#### DESCRIPTION {#description}\n\nThe `RTCHit` type defines the type of a ray/primitive intersection\nresult. The hit contains the unnormalized geometric normal in object\nspace at the hit location (`Ng_x`, `Ng_y`, `Ng_z` members), the\nbarycentric u/v coordinates of the hit (`u` and `v` members), as well\nas the primitive ID (`primID` member), geometry ID (`geomID` member),\nand instance ID stack (`instID` member) of the hit. The parametric\nintersection distance is not stored inside the hit, but stored inside\nthe `tfar` member of the ray.\n\nThe `embree4/rtcore_ray.h` header additionally defines the same hit\nstructure in structure of array (SOA) layout for hit packets of size 4\n(`RTCHit4` type), size 8 (`RTCHit8` type), and size 16 (`RTCHit16`\ntype). The header additionally defines an `RTCHitNt` template for hit\npackets of an arbitrary compile-time size.\n\n#### EXIT STATUS {#exit-status}\n\n#### SEE ALSO {#see-also}\n\n[RTCRay], [Multi-Level Instancing]\n\n```{=tex}\n\n```\nRTCRayHit\n---------\n\n#### NAME {#name}\n\n    RTCRayHit - combined single ray/hit structure\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore_ray.h>\n\n    struct RTCORE_ALIGN(16) RTCRayHit\n    {\n      struct RTCRay ray;\n      struct RTCHit hit;\n    };\n\n#### DESCRIPTION {#description}\n\nThe `RTCRayHit` structure is used as input for the `rtcIntersect`-type\nfunctions and stores the ray to intersect and some hit fields that hold\nthe intersection result afterwards.\n\nThe `embree4/rtcore_ray.h` header additionally defines the same ray/hit\nstructure in structure of array (SOA) layout for API functions\naccepting ray packets of size 4 (`RTCRayHit4` type), size 8\n(`RTCRayHit8` type), and size 16 (`RTCRayHit16` type). The header\nadditionally defines an `RTCRayHitNt` template to generate ray/hit\npackets of an arbitrary compile-time size.\n\n#### EXIT STATUS {#exit-status}\n\n#### SEE ALSO {#see-also}\n\n[RTCRay], [RTCHit]\n\n```{=tex}\n\n```\nRTCRayN\n-------\n\n#### NAME {#name}\n\n    RTCRayN - ray packet of runtime size\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore_ray.h>\n\n    struct RTCRayN;\n\n    float& RTCRayN_org_x(RTCRayN* ray, unsigned int N, unsigned int i);\n    float& RTCRayN_org_y(RTCRayN* ray, unsigned int N, unsigned int i);\n    float& RTCRayN_org_z(RTCRayN* ray, unsigned int N, unsigned int i);\n    float& RTCRayN_tnear(RTCRayN* ray, unsigned int N, unsigned int i);\n\n    float& RTCRayN_dir_x(RTCRayN* ray, unsigned int N, unsigned int i);\n    float& RTCRayN_dir_y(RTCRayN* ray, unsigned int N, unsigned int i);\n    float& RTCRayN_dir_z(RTCRayN* ray, unsigned int N, unsigned int i);\n    float& RTCRayN_time (RTCRayN* ray, unsigned int N, unsigned int i);\n\n    float&        RTCRayN_tfar (RTCRayN* ray, unsigned int N, unsigned int i);\n    unsigned int& RTCRayN_mask (RTCRayN* ray, unsigned int N, unsigned int i);\n    unsigned int& RTCRayN_id   (RTCRayN* ray, unsigned int N, unsigned int i);\n    unsigned int& RTCRayN_flags(RTCRayN* ray, unsigned int N, unsigned int i);\n\n#### DESCRIPTION {#description}\n\nWhen the ray packet size is not known at compile time (e.g. when Embree\nreturns a ray packet in the `RTCFilterFuncN` callback function), Embree\nuses the `RTCRayN` type for ray packets. These ray packets can only\nhave sizes of 1, 4, 8, or 16. No other packet size will be used.\n\nYou can either implement different special code paths for each of these\npossible packet sizes and cast the ray to the appropriate ray packet\ntype, or implement one general code path that uses the `RTCRayN_XXX`\nhelper functions to access the ray packet components.\n\nThese helper functions get a pointer to the ray packet (`ray`\nargument), the packet size (`N` argument), and returns a reference to a\ncomponent (e.g. x-component of origin) of the the i-th ray of the\npacket (`i` argument).\n\n#### EXIT STATUS {#exit-status}\n\n#### SEE ALSO {#see-also}\n\n[RTCHitN]\n\n```{=tex}\n\n```\nRTCHitN\n-------\n\n#### NAME {#name}\n\n    RTCHitN - hit packet of runtime size\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    struct HitN;\n\n    float& RTCHitN_Ng_x(RTCHitN* hit, unsigned int N, unsigned int i);\n    float& RTCHitN_Ng_y(RTCHitN* hit, unsigned int N, unsigned int i);\n    float& RTCHitN_Ng_z(RTCHitN* hit, unsigned int N, unsigned int i);\n\n    float& RTCHitN_u(RTCHitN* hit, unsigned int N, unsigned int i);\n    float& RTCHitN_v(RTCHitN* hit, unsigned int N, unsigned int i);\n\n    unsigned& RTCHitN_primID(RTCHitN* hit, unsigned int N, unsigned int i);\n    unsigned& RTCHitN_geomID(RTCHitN* hit, unsigned int N, unsigned int i);\n    unsigned& RTCHitN_instID(RTCHitN* hit, unsigned int N, unsigned int i, unsigned int level);\n\n#### DESCRIPTION {#description}\n\nWhen the hit packet size is not known at compile time (e.g. when Embree\nreturns a hit packet in the `RTCFilterFuncN` callback function), Embree\nuses the `RTCHitN` type for hit packets. These hit packets can only\nhave sizes of 1, 4, 8, or 16. No other packet size will be used.\n\nYou can either implement different special code paths for each of these\npossible packet sizes and cast the hit to the appropriate hit packet\ntype, or implement one general code path that uses the `RTCHitN_XXX`\nhelper functions to access hit packet components.\n\nThese helper functions get a pointer to the hit packet (`hit`\nargument), the packet size (`N` argument), and returns a reference to a\ncomponent (e.g. x component of `Ng`) of the the i-th hit of the packet\n(`i` argument).\n\n#### EXIT STATUS {#exit-status}\n\n#### SEE ALSO {#see-also}\n\n[RTCRayN]\n\n```{=tex}\n\n```\nRTCRayHitN\n----------\n\n#### NAME {#name}\n\n    RTCRayHitN - combined ray/hit packet of runtime size\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore_ray.h>\n\n    struct RTCRayHitN;\n\n    struct RTCRayN* RTCRayHitN_RayN(struct RTCRayHitN* rayhit, unsigned int N);\n    struct RTCHitN* RTCRayHitN_HitN(struct RTCRayHitN* rayhit, unsigned int N);\n\n#### DESCRIPTION {#description}\n\nWhen the packet size of a ray/hit structure is not known at compile\ntime (e.g. when Embree returns a ray/hit packet in the\n`RTCIntersectFunctionN` callback function), Embree uses the\n`RTCRayHitN` type for ray packets. These ray/hit packets can only have\nsizes of 1, 4, 8, or 16. No other packet size will be used.\n\nYou can either implement different special code paths for each of these\npossible packet sizes and cast the ray/hit to the appropriate ray/hit\npacket type, or extract the `RTCRayN` and `RTCHitN` components using\nthe `rtcGetRayN` and `rtcGetHitN` helper functions and use the\n`RTCRayN_XXX` and `RTCHitN_XXX` functions to access the ray and hit\nparts of the structure.\n\n#### EXIT STATUS {#exit-status}\n\n#### SEE ALSO {#see-also}\n\n[RTCHitN]\n\n```{=tex}\n\n```\nRTCFeatureFlags\n---------------\n\n#### NAME {#name}\n\n    RTCFeatureFlags - specifies features to enable\n      for ray queries\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore_ray.h>\n\n    enum RTCFeatureFlags\n    {\n      RTC_FEATURE_FLAG_NONE = 0,\n      \n      RTC_FEATURE_FLAG_MOTION_BLUR = 1 << 0,\n\n      RTC_FEATURE_FLAG_TRIANGLE = 1 << 1,\n      RTC_FEATURE_FLAG_QUAD = 1 << 2,\n      RTC_FEATURE_FLAG_GRID = 1 << 3,\n      RTC_FEATURE_FLAG_SUBDIVISION = 1 << 4,\n      RTC_FEATURE_FLAG_POINT = ... ,\n      RTC_FEATURE_FLAG_CURVES = ... ,\n     \n      RTC_FEATURE_FLAG_CONE_LINEAR_CURVE = 1 << 5,\n      RTC_FEATURE_FLAG_ROUND_LINEAR_CURVE  = 1 << 6,\n      RTC_FEATURE_FLAG_FLAT_LINEAR_CURVE = 1 << 7,\n\n      RTC_FEATURE_FLAG_ROUND_BEZIER_CURVE = 1 << 8,\n      RTC_FEATURE_FLAG_FLAT_BEZIER_CURVE = 1 << 9,\n      RTC_FEATURE_FLAG_NORMAL_ORIENTED_BEZIER_CURVE = 1 << 10,\n\n      RTC_FEATURE_FLAG_ROUND_BSPLINE_CURVE = 1 << 11,\n      RTC_FEATURE_FLAG_FLAT_BSPLINE_CURVE = 1 << 12,\n      RTC_FEATURE_FLAG_NORMAL_ORIENTED_BSPLINE_CURVE = 1 << 13,\n\n      RTC_FEATURE_FLAG_ROUND_HERMITE_CURVE = 1 << 14,\n      RTC_FEATURE_FLAG_FLAT_HERMITE_CURVE = 1 << 15,\n      RTC_FEATURE_FLAG_NORMAL_ORIENTED_HERMITE_CURVE = 1 << 16,\n\n      RTC_FEATURE_FLAG_ROUND_CATMULL_ROM_CURVE = 1 << 17,\n      RTC_FEATURE_FLAG_FLAT_CATMULL_ROM_CURVE = 1 << 18,\n      RTC_FEATURE_FLAG_NORMAL_ORIENTED_CATMULL_ROM_CURVE = 1 << 19,\n\n      RTC_FEATURE_FLAG_SPHERE_POINT = 1 << 20,\n      RTC_FEATURE_FLAG_DISC_POINT = 1 << 21,\n      RTC_FEATURE_FLAG_ORIENTED_DISC_POINT = 1 << 22,\n\n      RTC_FEATURE_FLAG_ROUND_CURVES = ... ,\n      RTC_FEATURE_FLAG_FLAT_CURVES = ... ,\n      RTC_FEATURE_FLAG_NORMAL_ORIENTED_CURVES = ... ,\n      \n      RTC_FEATURE_FLAG_LINEAR_CURVES = ... ,\n      RTC_FEATURE_FLAG_BEZIER_CURVES = ... ,\n      RTC_FEATURE_FLAG_BSPLINE_CURVES = ... ,\n      RTC_FEATURE_FLAG_HERMITE_CURVES = ... ,\n      \n      RTC_FEATURE_FLAG_INSTANCE = 1 << 23,\n\n      RTC_FEATURE_FLAG_FILTER_FUNCTION_IN_ARGUMENTS = 1 << 24,\n      RTC_FEATURE_FLAG_FILTER_FUNCTION_IN_GEOMETRY = 1 << 25,\n      RTC_FEATURE_FLAG_FILTER_FUNCTION = ... ,\n\n      RTC_FEATURE_FLAG_USER_GEOMETRY_CALLBACK_IN_ARGUMENTS = 1 << 26,\n      RTC_FEATURE_FLAG_USER_GEOMETRY_CALLBACK_IN_GEOMETRY = 1 << 27,\n      RTC_FEATURE_FLAG_USER_GEOMETRY = ... ,\n\n      RTC_FEATURE_FLAG_32_BIT_RAY_MASK = 1 << 28,\n\n      RTC_FEATURE_FLAG_ALL = 0xffffffff\n    };\n\n#### DESCRIPTION {#description}\n\nThe `RTCFeatureFlags` enum specify a bit mask to enable specific ray\ntracing features for ray query operations. The feature flags are passed\nto the `rtcIntersect1/4/8/16` and `rtcOccluded1/4/8/16` functions\nthrough the `RTCIntersectArguments` and `RTCOccludedArguments`\nstructures. Only a ray tracing feature whose bit is enabled in the\nfeature mask can get used. If a feature bit is not set, the behaviour\nis undefined, thus the feature may work or not. To enable multiple\nfeatures the respective features have to get combined using a bitwise\n`OR` operation.\n\nThe purpose of feature flags is to reduce code size on the GPU by\nenabling just the features required to render the scene. On the CPU\nthere is no need to use feature flags, and the default of all features\nenabled (`RTC_FEATURE_FLAG_ALL`) can just be kept.\n\nThe following features can get enabled using feature flags:\n\n-   RTC\\_FEATURE\\_FLAG\\_MOTION\\_BLUR: Enables motion blur for all\n    geometry types.\n\n-   RTC\\_FEATURE\\_FLAG\\_TRIANGLE: Enables triangle geometries\n    (RTC\\_GEOMETRY\\_TYPE\\_TRIANGLE).\n\n-   RTC\\_FEATURE\\_FLAG\\_QUAD: Enables quad geometries\n    (RTC\\_GEOMETRY\\_TYPE\\_QUAD).\n\n-   RTC\\_FEATURE\\_FLAG\\_GRID: Enables grid geometries\n    (RTC\\_GEOMETRY\\_TYPE\\_GRID).\n\n-   RTC\\_FEATURE\\_FLAG\\_SUBDIVISION: Enables subdivision geometries\n    (RTC\\_GEOMETRY\\_TYPE\\_SUBDIVISION).\n\n-   RTC\\_FEATURE\\_FLAG\\_POINT: Enables all point geometry types\n    (RTC\\_GEOMETRY\\_TYPE\\_XXX\\_POINT)\n\n-   RTC\\_FEATURE\\_FLAG\\_CURVES: Enables all curve geometry types\n    (RTC\\_GEOMETRY\\_TYPE\\_XXX\\_YYY\\_CURVE)\n\n-   RTC\\_FEATURE\\_FLAG\\_ROUND\\_CURVES: Enables all round curves\n    (RTC\\_GEOMETRY\\_TYPE\\_ROUND\\_XXX\\_CURVE).\n\n-   RTC\\_FEATURE\\_FLAG\\_FLAT\\_CURVES: Enables all flat curves\n    (RTC\\_GEOMETRY\\_TYPE\\_FLAT\\_XXX\\_CURVE).\n\n-   RTC\\_FEATURE\\_FLAG\\_NORMAL\\_ORIENTED\\_CURVES: Enables all normal\n    oriented curves\n    (RTC\\_GEOMETRY\\_TYPE\\_NORMAL\\_ORIENTED\\_XXX\\_CURVE).\n\n-   RTC\\_FEATURE\\_FLAG\\_LINEAR\\_CURVES: Enables all linear curves\n    (RTC\\_GEOMETRY\\_TYPE\\_XXX\\_LINEAR\\_CURVE).\n\n-   RTC\\_FEATURE\\_FLAG\\_BEZIER\\_CURVES: Enables all Bézier curves\n    (RTC\\_GEOMETRY\\_TYPE\\_XXX\\_BEZIER\\_CURVE).\n\n-   RTC\\_FEATURE\\_FLAG\\_BSPLINE\\_CURVES: Enables all B-spline curves\n    (RTC\\_GEOMETRY\\_TYPE\\_XXX\\_BSPLINE\\_CURVE).\n\n-   RTC\\_FEATURE\\_FLAG\\_HERMITE\\_CURVES: Enables all Hermite curves\n    (RTC\\_GEOMETRY\\_TYPE\\_XXX\\_HERMITE\\_CURVE).\n\n-   RTC\\_FEATURE\\_FLAG\\_CONE\\_LINEAR\\_CURVE: Enables cone geometry type\n    (RTC\\_GEOMETRY\\_TYPE\\_CONE\\_LINEAR\\_CURVE).\n\n-   RTC\\_FEATURE\\_FLAG\\_ROUND\\_LINEAR\\_CURVE: Enables round linear\n    curves (RTC\\_GEOMETRY\\_TYPE\\_ROUND\\_LINEAR\\_CURVE).\n\n-   RTC\\_FEATURE\\_FLAG\\_FLAT\\_LINEAR\\_CURVE: Enables flat linear curves\n    (RTC\\_GEOMETRY\\_TYPE\\_FLAT\\_LINEAR\\_CURVE).\n\n-   RTC\\_FEATURE\\_FLAG\\_ROUND\\_BEZIER\\_CURVE: Enables round Bézier\n    curves (RTC\\_GEOMETRY\\_TYPE\\_ROUND\\_BEZIER\\_CURVE).\n\n-   RTC\\_FEATURE\\_FLAG\\_FLAT\\_BEZIER\\_CURVE: Enables flat Bézier curves\n    (RTC\\_GEOMETRY\\_TYPE\\_FLAT\\_BEZIER\\_CURVE).\n\n-   RTC\\_FEATURE\\_FLAG\\_NORMAL\\_ORIENTED\\_BEZIER\\_CURVE: Enables normal\n    oriented Bézier curves\n    (RTC\\_GEOMETRY\\_TYPE\\_NORMAL\\_ORIENTED\\_BEZIER\\_CURVE).\n\n-   RTC\\_FEATURE\\_FLAG\\_ROUND\\_BSPLINE\\_CURVE: Enables round B-spline\n    curves (RTC\\_GEOMETRY\\_TYPE\\_ROUND\\_BSPLINE\\_CURVE).\n\n-   RTC\\_FEATURE\\_FLAG\\_FLAT\\_BSPLINE\\_CURVE: Enables flat B-spline\n    curves (RTC\\_GEOMETRY\\_TYPE\\_FLAT\\_BSPLINE\\_CURVE).\n\n-   RTC\\_FEATURE\\_FLAG\\_NORMAL\\_ORIENTED\\_BSPLINE\\_CURVE: Enables\n    normal oriented B-spline curves\n    (RTC\\_GEOMETRY\\_TYPE\\_NORMAL\\_ORIENTED\\_BSPLINE\\_CURVE).\n\n-   RTC\\_FEATURE\\_FLAG\\_ROUND\\_HERMITE\\_CURVE: Enables round Hermite\n    curves (RTC\\_GEOMETRY\\_TYPE\\_ROUND\\_HERMITE\\_CURVE).\n\n-   RTC\\_FEATURE\\_FLAG\\_FLAT\\_HERMITE\\_CURVE: Enables flat Hermite\n    curves (RTC\\_GEOMETRY\\_TYPE\\_FLAT\\_HERMITE\\_CURVE).\n\n-   RTC\\_FEATURE\\_FLAG\\_NORMAL\\_ORIENTED\\_HERMITE\\_CURVE: Enables\n    normal oriented Hermite curves\n    (RTC\\_GEOMETRY\\_TYPE\\_NORMAL\\_ORIENTED\\_HERMITE\\_CURVE).\n\n-   RTC\\_FEATURE\\_FLAG\\_ROUND\\_CATMULL\\_ROM\\_CURVE: Enables round\n    Catmull Rom curves\n    (RTC\\_GEOMETRY\\_TYPE\\_ROUND\\_CATMULL\\_ROM\\_CURVE).\n\n-   RTC\\_FEATURE\\_FLAG\\_FLAT\\_CATMULL\\_ROM\\_CURVE: Enables flat Catmull\n    Rom curves (RTC\\_GEOMETRY\\_TYPE\\_FLAT\\_CATMULL\\_ROM\\_CURVE).\n\n-   RTC\\_FEATURE\\_FLAG\\_NORMAL\\_ORIENTED\\_CATMULL\\_ROM\\_CURVE: Enables\n    normal oriented Catmull Rom curves\n    (RTC\\_GEOMETRY\\_TYPE\\_NORMAL\\_ORIENTED\\_CATMULL\\_ROM\\_CURVE).\n\n-   RTC\\_FEATURE\\_FLAG\\_SPHERE\\_POINT: Enables sphere geometry type\n    (RTC\\_GEOMETRY\\_TYPE\\_SPHERE\\_POINT).\n\n-   RTC\\_FEATURE\\_FLAG\\_DISC\\_POINT: Enables disc geometry type\n    (RTC\\_GEOMETRY\\_TYPE\\_DISC\\_POINT).\n\n-   RTC\\_FEATURE\\_FLAG\\_ORIENTED\\_DISC\\_POINT: Enables oriented disc\n    geometry types (RTC\\_GEOMETRY\\_TYPE\\_ORIENTED\\_DISC\\_POINT).\n\n-   RTC\\_FEATURE\\_FLAG\\_INSTANCE: Enables instance geometries\n    (RTC\\_GEOMETRY\\_TYPE\\_INSTANCE).\n\n-   RTC\\_FEATURE\\_FLAG\\_FILTER\\_FUNCTION\\_IN\\_ARGUMENTS: Enables filter\n    functions passed through intersect arguments.\n\n-   RTC\\_FEATURE\\_FLAG\\_FILTER\\_FUNCTION\\_IN\\_GEOMETRY: Enable filter\n    functions passed through geometry.\n\n-   RTC\\_FEATURE\\_FLAG\\_FILTER\\_FUNCTION: Enables filter functions\n    (argument and geometry version).\n\n-   RTC\\_FEATURE\\_FLAG\\_USER\\_GEOMETRY\\_CALLBACK\\_IN\\_ARGUMENTS:\n    Enables RTC\\_GEOMETRY\\_TYPE\\_USER with function pointer passed\n    through intersect arguments.\n\n-   RTC\\_FEATURE\\_FLAG\\_USER\\_GEOMETRY\\_CALLBACK\\_IN\\_GEOMETRY: Enables\n    RTC\\_GEOMETRY\\_TYPE\\_USER with function pointer passed through\n    geometry object.\n\n-   RTC\\_FEATURE\\_FLAG\\_USER\\_GEOMETRY: Enables\n    RTC\\_GEOMETRY\\_TYPE\\_USER geometries (both argument and geometry\n    callback versions).\n\n-   RTC\\_FEATURE\\_FLAG\\_32\\_BIT\\_RAY\\_MASK: Enables full 32 bit ray\n    masks. If not used, only the lower 7 bits in the ray mask are\n    handled correctly.\n\n-   RTC\\_FEATURE\\_FLAG\\_ALL: Enables all features (default).\n\n#### EXIT STATUS {#exit-status}\n\n#### SEE ALSO {#see-also}\n\n[rtcIntersect1], [rtcIntersect4/8/16], [rtcOccluded1],\n[rtcOccluded4/8/16],\n\n```{=tex}\n\n```\nrtcInitIntersectArguments\n-------------------------\n\n#### NAME {#name}\n\n    rtcInitIntersectArguments - initializes the intersect arguments struct\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    enum RTCRayQueryFlags\n    {\n      RTC_RAY_QUERY_FLAG_NONE,\n      RTC_RAY_QUERY_FLAG_INCOHERENT,\n      RTC_RAY_QUERY_FLAG_COHERENT,\n      RTC_RAY_QUERY_FLAG_INVOKE_ARGUMENT_FILTER\n    };\n\n    struct RTCIntersectArguments\n    {\n      enum RTCRayQueryFlags flags;\n      enum RTCFeatureFlags feature_mask;\n      struct RTCRayQueryContext* context;\n      RTCFilterFunctionN filter;\n      RTCIntersectFunctionN intersect;\n    #if RTC_MIN_WIDTH\n      float minWidthDistanceFactor;\n    #endif\n    };\n\n    void rtcInitIntersectArguments(\n      struct RTCIntersectArguments* args\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcInitIntersectArguments` function initializes the optional\nargument struct that can get passed to the `rtcIntersect1/4/8/16`\nfunctions to default values. The arguments struct needs to get used for\nmore advanced Embree features as described here.\n\nThe `flags` member can get used to enable special traversal mode. Using\nthe `RTC_RAY_QUERY_FLAG_INCOHERENT` flag uses an optimized traversal\nalgorithm for incoherent rays (default), while\n`RTC_RAY_QUERY_FLAG_COHERENT` uses an optimized traversal algorithm for\ncoherent rays (e.g. primary camera rays).\n\nThe `feature_mask` member should get used in SYCL to just enable ray\ntracing features required to render a given scene. Please see section\n[RTCFeatureFlags] for a more detailed description.\n\nThe `context` member can get used to pass an optional intersection\ncontext. It is guaranteed that the pointer to the context passed to a\nray query is directly passed to all callback functions. This way it is\npossible to attach arbitrary data to the end of the context, such as a\nper-ray payload. Please note that the ray pointer is not guaranteed to\nbe passed to the callback functions, thus reading additional data from\nthe ray pointer passed to callbacks is not possible. See section\n[rtcInitRayQueryContext] for more details.\n\nThe `filter` member specifies a filter function to invoke for each\nencountered hit. The support for the argument filter function must be\nenabled for a scene by using the\n`RTC_SCENE_FLAG_FILTER_FUNCTION_IN_ARGUMENTS` scene flag. In case of\ninstancing this feature has to get enabled also for each instantiated\nscene.\n\nThe argument filter function is invoked for each geometry for which it\ngot explicitely enabled using the\n`rtcSetGeometryEnableFilterFunctionFromArguments` function. The\ninvokation of the argument filter function can also get enfored for\neach geometry using the `RTC_RAY_QUERY_FLAG_INVOKE_ARGUMENT_FILTER` ray\nquery flag. This argument filter function is invoked as a second filter\nstage after the per-geometry filter function is invoked. Only rays that\npassed the first filter stage are valid in this second filter stage.\nHaving such a per ray-query filter function can be useful to implement\nmodifications of the behavior of the query, such as collecting all hits\nor accumulating transparencies.\n\nThe `intersect` member specifies the user geometry callback to get\ninvoked for each user geometry encountered during traversal. The user\ngeometry callback specified this way has preference over the one\nspecified inside the geometry.\n\nThe `minWidthDistanceFactor` value controls the target size of the\ncurve radii when the min-width feature is enabled. Please see the\n[rtcSetGeometryMaxRadiusScale] function for more details on the\nmin-width feature.\n\n#### EXIT STATUS {#exit-status}\n\nNo error code is set by this function.\n\n#### SEE ALSO {#see-also}\n\n[rtcIntersect1], [rtcIntersect4/8/16], [RTCFeatureFlags],\n[rtcInitRayQueryContext], [RTC\\_GEOMETRY\\_TYPE\\_USER],\n[rtcSetGeometryMaxRadiusScale]\n\n```{=tex}\n\n```\nrtcInitOccludedArguments\n------------------------\n\n#### NAME {#name}\n\n    rtcInitOccludedArguments - initializes the occluded arguments struct\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    enum RTCRayQueryFlags\n    {\n      RTC_RAY_QUERY_FLAG_NONE,\n      RTC_RAY_QUERY_FLAG_INCOHERENT,\n      RTC_RAY_QUERY_FLAG_COHERENT,\n      RTC_RAY_QUERY_FLAG_INVOKE_ARGUMENT_FILTER\n    };\n\n    struct RTCOccludedArguments\n    {\n      enum RTCRayQueryFlags flags;\n      enum RTCFeatureFlags feature_mask;\n      struct RTCRayQueryContext* context;\n      RTCFilterFunctionN filter;\n      RTCOccludedFunctionN intersect;\n    #if RTC_MIN_WIDTH\n      float minWidthDistanceFactor;\n    #endif\n    };\n\n    void rtcInitOccludedArguments(\n      struct RTCOccludedArguments* args\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcInitOccludedArguments` function initializes the optional\nargument struct that can get passed to the `rtcOccluded1/4/8/16`\nfunctions to default values. The arguments struct needs to get used for\nmore advanced Embree features as described here.\n\nThe `flags` member can get used to enable special traversal mode. Using\nthe `RTC_RAY_QUERY_FLAG_INCOHERENT` flag uses an optimized traversal\nalgorithm for incoherent rays (default), while\n`RTC_RAY_QUERY_FLAG_COHERENT` uses an optimized traversal algorithm for\ncoherent rays (e.g. primary camera rays).\n\nThe `feature_mask` member should get used in SYCL to just enable ray\ntracing features required to render a given scene. Please see section\n[RTCFeatureFlags] for a more detailed description.\n\nThe `context` member can get used to pass an optional intersection\ncontext. It is guaranteed that the pointer to the context passed to a\nray query is directly passed to all callback functions. This way it is\npossible to attach arbitrary data to the end of the context, such as a\nper-ray payload. Please note that the ray pointer is not guaranteed to\nbe passed to the callback functions, thus reading additional data from\nthe ray pointer passed to callbacks is not possible. See section\n[rtcInitRayQueryContext] for more details.\n\nThe `filter` member specifies a filter function to invoked for each\nencountered hit. The support for the argument filter function must be\nenabled for a scene by using the\n`RTC_SCENE_FLAG_FILTER_FUNCTION_IN_ARGUMENTS` scene flag. In case of\ninstancing this feature has to get enabled also for each instantiated\nscene.\n\nThe argument filter function is invoked for each geometry for which it\ngot explicitely enabled using the\n`rtcSetGeometryEnableFilterFunctionFromArguments` function. The\ninvokation of the argument filter function can also get enfored for\neach geometry using the `RTC_RAY_QUERY_FLAG_INVOKE_ARGUMENT_FILTER` ray\nquery flag. This argument filter function is invoked as a second filter\nstage after the per-geometry filter function is invoked. Only rays that\npassed the first filter stage are valid in this second filter stage.\nHaving such a per ray-query filter function can be useful to implement\nmodifications of the behavior of the query, such as collecting all hits\nor accumulating transparencies.\n\nThe `intersect` member specifies the user geometry callback to get\ninvoked for each user geometry encountered during traversal. The user\ngeometry callback specified this way has preference over the one\nspecified inside the geometry.\n\nThe `minWidthDistanceFactor` value controls the target size of the\ncurve radii when the min-width feature is enabled. Please see the\n[rtcSetGeometryMaxRadiusScale] function for more details on the\nmin-width feature.\n\n#### EXIT STATUS {#exit-status}\n\nNo error code is set by this function.\n\n#### SEE ALSO {#see-also}\n\n[rtcOccluded1], [rtcOccluded4/8/16], [RTCFeatureFlags],\n[rtcInitRayQueryContext], [RTC\\_GEOMETRY\\_TYPE\\_USER],\n[rtcSetGeometryMaxRadiusScale]\n\n```{=tex}\n\n```\nrtcInitRayQueryContext\n----------------------\n\n#### NAME {#name}\n\n    rtcInitRayQueryContext - initializes the ray query context\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    struct RTCRayQueryContext\n    {\n      #if RTC_MAX_INSTANCE_LEVEL_COUNT > 1\n        unsigned int instStackSize;\n      #endif\n      \n      unsigned int instID[RTC_MAX_INSTANCE_LEVEL_COUNT];\n    };\n\n    void rtcInitRayQueryContext(\n      struct RTCRayQueryContext* context\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcInitRayQueryContext` function initializes the intersection\ncontext to default values and should be called to initialize every ray\nquery context.\n\nIt is guaranteed that the pointer to the ray query context\n(`RTCRayQueryContext` type) is passed to the registered callback\nfunctions. This way it is possible to attach arbitrary data to the end\nof the ray query context, such as a per-ray payload.\n\nInside the user geometry callback the ray query context can get used to\naccess the `instID` stack to know which instance the user geometry\nobject resides.\n\nIf not ray query context is specified when tracing a ray, a default\ncontext is used.\n\n#### EXIT STATUS {#exit-status}\n\nNo error code is set by this function.\n\n#### SEE ALSO {#see-also}\n\n[rtcIntersect1], [rtcIntersect4/8/16], [rtcOccluded1],\n[rtcOccluded4/8/16]\n\n```{=tex}\n\n```\nrtcIntersect1\n-------------\n\n#### NAME {#name}\n\n    rtcIntersect1 - finds the closest hit for a single ray\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcIntersect1(\n      RTCScene scene,\n      struct RTCRayHit* rayhit\n      struct RTCIntersectArguments* args = NULL\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcIntersect1` function finds the closest hit of a single ray\n(`rayhit` argument) with the scene (`scene` argument). The provided\nray/hit structure contains the ray to intersect and some hit output\nfields that are filled when a hit is found. The passed optional\narguments struct (`args` argument) can get used for advanced use cases,\nsee section [rtcInitIntersectArguments] for more details.\n\nTo trace a ray, the user has to initialize the ray origin (`org` ray\nmember), ray direction (`dir` ray member), ray segment (`tnear`, `tfar`\nray members), ray mask (`mask` ray member), and set the ray flags to\n`0` (`flags` ray member). The ray time (`time` ray member) must be\ninitialized to a value in the range \\$[0, 1]. The ray segment has to\nbe in the range $[0, \\infty]$, thus ranges that start behind the ray\norigin are not valid, but ranges can reach to infinity. See Section\n[RTCRay] for the ray layout description.\n\nThe geometry ID (`geomID` hit member) of the hit data must be\ninitialized to `RTC_INVALID_GEOMETRY_ID` (-1).\n\nWhen no intersection is found, the ray/hit data is not updated. When an\nintersection is found, the hit distance is written into the `tfar`\nmember of the ray and all hit data is set, such as unnormalized\ngeometry normal in object space (`Ng` hit member), local hit\ncoordinates (`u`, `v` hit member), instance ID stack (`instID` hit\nmember), geometry ID (`geomID` hit member), and primitive ID (`primID`\nhit member). See Section [RTCHit] for the hit layout description.\n\nIf the instance ID stack has a prefix of values not equal to\n`RTC_INVALID_GEOMETRY_ID`, the instance ID on each level corresponds to\nthe geometry ID of the hit instance of the higher-level scene, the\ngeometry ID corresponds to the hit geometry inside the hit instanced\nscene, and the primitive ID corresponds to the n-th primitive of that\ngeometry.\n\nIf level 0 of the instance ID stack is equal to\n`RTC_INVALID_GEOMETRY_ID`, the geometry ID corresponds to the hit\ngeometry inside the top-level scene, and the primitive ID corresponds\nto the n-th primitive of that geometry.\n\nThe implementation makes no guarantees that primitives whose hit\ndistance is exactly at (or very close to) `tnear` or `tfar` are hit or\nmissed. If you want to exclude intersections at `tnear` just pass a\nslightly enlarged `tnear`, and if you want to include intersections at\n`tfar` pass a slightly enlarged `tfar`.\n\nThe ray pointer passed to callback functions is not guaranteed to be\nidentical to the original ray provided. To extend the ray with\nadditional data to be accessed in callback functions, use the ray query\ncontext. See section [rtcInitRayQueryContext] for more details.\n\nThe ray/hit structure must be aligned to 16 bytes.\n\n#### EXIT STATUS {#exit-status}\n\nFor performance reasons this function does not do any error checks,\nthus will not set any error flags on failure.\n\n#### SEE ALSO {#see-also}\n\n[rtcOccluded1], [rtcIntersect4/8/16], [RTCRayHit],\n[rtcInitIntersectArguments]\n\n```{=tex}\n\n```\nrtcOccluded1\n------------\n\n#### NAME {#name}\n\n    rtcOccluded1 - finds any hit for a single ray\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcOccluded1(\n      RTCScene scene,\n      struct RTCRay* ray,\n      struct RTCOccludedArguments* args = NULL\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcOccluded1` function checks for a single ray (`ray` argument)\nwhether there is any hit with the scene (`scene` argument). The passed\noptional arguments struct (`args` argument) can get used for advanced\nuse cases, see section [rtcInitOccludedArguments] for more details.\n\nTo trace a ray, the user must initialize the ray origin (`org` ray\nmember), ray direction (`dir` ray member), ray segment (`tnear`, `tfar`\nray members), ray mask (`mask` ray member), and must set the ray flags\nto `0` (`flags` ray member). The ray time (`time` ray member) must be\ninitialized to a value in the range $[0, 1]$. The ray segment must be\nin the range $[0, \\infty]$, thus ranges that start behind the ray\norigin are not valid, but ranges can reach to infinity. See Section\n[RTCRay] for the ray layout description.\n\nWhen no intersection is found, the ray data is not updated. In case a\nhit was found, the `tfar` component of the ray is set to `-inf`.\n\nThe implementation makes no guarantees that primitives whose hit\ndistance is exactly at (or very close to) `tnear` or `tfar` are hit or\nmissed. If you want to exclude intersections at `tnear` just pass a\nslightly enlarged `tnear`, and if you want to include intersections at\n`tfar` pass a slightly enlarged `tfar`.\n\nThe ray pointer passed to callback functions is not guaranteed to be\nidentical to the original ray provided. To extend the ray with\nadditional data to be accessed in callback functions, use the ray query\ncontext. See section [rtcInitRayQueryContext] for more details.\n\nThe ray must be aligned to 16 bytes.\n\n#### EXIT STATUS {#exit-status}\n\nFor performance reasons this function does not do any error checks,\nthus will not set any error flags on failure.\n\n#### SEE ALSO {#see-also}\n\n[rtcIntersect1], [rtcOccluded4/8/16], [RTCRay],\n[rtcInitOccludedArguments]\n\n```{=tex}\n\n```\nrtcIntersect4/8/16\n------------------\n\n#### NAME {#name}\n\n    rtcIntersect4/8/16 - finds the closest hits for a ray packet\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcIntersect4(\n      const int* valid,\n      RTCScene scene,\n      struct RTCRayHit4* rayhit,\n      struct RTCIntersectArguments* args = NULL\n    );\n\n    void rtcIntersect8(\n      const int* valid,\n      RTCScene scene,\n      struct RTCRayHit8* rayhit,\n      struct RTCIntersectArguments* args = NULL\n    );\n\n    void rtcIntersect16(\n      const int* valid,\n      RTCScene scene,\n      struct RTCRayHit16* rayhit,\n      struct RTCIntersectArguments* args = NULL\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcIntersect4/8/16` functions finds the closest hits for a ray\npacket of size 4, 8, or 16 (`rayhit` argument) with the scene (`scene`\nargument). The ray/hit input contains a ray packet and hit packet. The\npassed optional arguments struct (`args` argument) are used to pass\nadditional arguments for advanced features. See Section\n[rtcIntersect1] for more details and a description of how to set up\nand trace rays.\n\nA ray valid mask must be provided (`valid` argument) which stores one\n32-bit integer (`-1` means valid and `0` invalid) per ray in the\npacket. Only active rays are processed, and hit data of inactive rays\nis not changed.\n\nThe ray pointer passed to callback functions is not guaranteed to be\nidentical to the original ray provided. To extend the ray with\nadditional data to be accessed in callback functions, use the ray query\ncontext. See section [rtcInitRayQueryContext] for more details.\n\nFor `rtcIntersect4` the ray packet must be aligned to 16 bytes, for\n`rtcIntersect8` the alignment must be 32 bytes, and for\n`rtcIntersect16` the alignment must be 64 bytes.\n\nThe `rtcIntersect4`, `rtcIntersect8` and `rtcIntersect16` functions may\nchange the ray packet size and ray order when calling back into filter\nfunctions or user geometry callbacks. Under some conditions the\napplication can assume packets to stay intakt, which can determined by\nquerying the `RTC_DEVICE_PROPERTY_NATIVE_RAY4_SUPPORTED`,\n`RTC_DEVICE_PROPERTY_NATIVE_RAY8_SUPPORTED`,\n`RTC_DEVICE_PROPERTY_NATIVE_RAY16_SUPPORTED` properties through the\n`rtcGetDeviceProperty` function. See [rtcGetDeviceProperty] for more\ninformation.\n\n#### EXIT STATUS {#exit-status}\n\nFor performance reasons this function does not do any error checks,\nthus will not set any error flags on failure.\n\n#### SEE ALSO {#see-also}\n\n[rtcIntersect1], [rtcOccluded4/8/16], [rtcInitIntersectArguments]\n\n```{=tex}\n\n```\nrtcOccluded4/8/16\n-----------------\n\n#### NAME {#name}\n\n    rtcOccluded4/8/16 - finds any hits for a ray packet\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcOccluded4(\n      const int* valid,\n      RTCScene scene,\n      struct RTCRay4* ray,\n      struct RTCOccludedArguments* args = NULL\n    );\n\n    void rtcOccluded8(\n      const int* valid,\n      RTCScene scene,\n      struct RTCRay8* ray,\n      struct RTCOccludedArguments* args = NULL\n    );\n\n    void rtcOccluded16(\n      const int* valid,\n      RTCScene scene,\n      struct RTCRay16* ray,\n      struct RTCOccludedArguments* args = NULL\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcOccluded4/8/16` functions checks for each active ray of the ray\npacket of size 4, 8, or 16 (`ray` argument) whether there is any hit\nwith the scene (`scene` argument). The passed optional arguments struct\n(`args` argument) can get used for advanced use cases, see section\n[rtcInitOccludedArguments] for more details. See Section\n[rtcOccluded1] for more details and a description of how to set up\nand trace occlusion rays.\n\nA ray valid mask must be provided (`valid` argument) which stores one\n32-bit integer (`-1` means valid and `0` invalid) per ray in the\npacket. Only active rays are processed, and hit data of inactive rays\nis not changed.\n\nThe ray pointer passed to callback functions is not guaranteed to be\nidentical to the original ray provided. To extend the ray with\nadditional data to be accessed in callback functions, use the ray query\ncontext. See section [rtcInitRayQueryContext] for more details.\n\nFor `rtcOccluded4` the ray packet must be aligned to 16 bytes, for\n`rtcOccluded8` the alignment must be 32 bytes, and for `rtcOccluded16`\nthe alignment must be 64 bytes.\n\nThe `rtcOccluded4`, `rtcOccluded8` and `rtcOccluded16` functions may\nchange the ray packet size and ray order when calling back into\nintersect filter functions or user geometry callbacks. Under some\nconditions the application can assume packets to stay intakt, which can\ndetermined by querying the `RTC_DEVICE_PROPERTY_NATIVE_RAY4_SUPPORTED`,\n`RTC_DEVICE_PROPERTY_NATIVE_RAY8_SUPPORTED`,\n`RTC_DEVICE_PROPERTY_NATIVE_RAY16_SUPPORTED` properties through the\n`rtcGetDeviceProperty` function. See [rtcGetDeviceProperty] for more\ninformation.\n\n#### EXIT STATUS {#exit-status}\n\nFor performance reasons this function does not do any error checks,\nthus will not set any error flags on failure.\n\n#### SEE ALSO {#see-also}\n\n[rtcOccluded1], [rtcIntersect4/8/16], [rtcInitOccludedArguments]\n\n```{=tex}\n\n```\nrtcForwardIntersect1\n--------------------\n\n#### NAME {#name}\n\n    rtcForwardIntersect1/Ex - forwards a single ray to new scene\n      from user geometry callback\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcForwardIntersect1(\n      const struct RTCIntersectFunctionNArguments* args,\n      RTCScene scene,\n      struct RTCRay* ray,\n      unsigned int instID\n    );\n\n    void rtcForwardIntersect1Ex(\n      const struct RTCIntersectFunctionNArguments* args,\n      RTCScene scene,\n      struct RTCRay* ray,\n      unsigned int instID,\n      unsigned int instPrimID,\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcForwardIntersect1` and `rtcForwardIntersect1Ex` functions\nforward the traversal of a transformed ray (`ray` argument) into a\nscene (`scene` argument) from a user geometry callback. The function\ncan only get invoked from a user geometry callback for a ray traversal\ninitiated with the `rtcIntersect1` function. The callback arguments\nstructure of the callback invokation has to get passed to the ray\nforwarding (`args` argument). The user geometry callback should\ninstantly terminate after invoking the `rtcForwardIntersect1/Ex`\nfunction.\n\nOnly the ray origin and ray direction members of the ray argument are\nused for forwarding, all additional ray properties are inherited from\nthe initial ray traversal invokation of `rtcIntersect1`.\n\nThe implementation of the `rtcForwardIntersect1` function recursively\ncontinues the ray traversal into the specified scene and pushes the\nprovided instance ID (`instID` argument) to the instance ID stack. Hit\ninformation is updated into the ray hit structure passed to the\noriginal `rtcIntersect1` invokation.\n\nThis function can get used to implement user defined instancing using\nuser geometries, e.g. by transforming the ray in a special way, and/or\nselecting between different scenes to instantiate.\n\nFor user defined instance arrays, the `rtcForwardIntersect1Ex` variant\nhas an additional `instPrimID` argument which is pushed to the instance\nprimitive ID stack. Instance primitive IDs identify which instance of\nan instance array was hit.\n\nWhen using Embree on the CPU it is possible to recursively invoke\n`rtcIntersect1` directly from a user geometry callback. However, when\nSYCL is used, recursively tracing rays is not directly supported, and\nthe `rtcForwardIntersect1/Ex` functions must be used.\n\nThe ray structure must be aligned to 16 bytes.\n\n#### EXIT STATUS {#exit-status}\n\nFor performance reasons this function does not do any error checks,\nthus will not set any error flags on failure.\n\n#### SEE ALSO {#see-also}\n\n[rtcIntersect1], [RTCRay]\n\n```{=tex}\n\n```\nrtcForwardOccluded1\n-------------------\n\n#### NAME {#name}\n\n    rtcForwardOccluded1/Ex - forwards a single ray to new scene\n      from user geometry callback\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcForwardOccluded1(\n      const struct RTCOccludedFunctionNArguments* args,\n      RTCScene scene,\n      struct RTCRay* ray,\n      unsigned int instID\n    );\n\n    void rtcForwardOccluded1(\n      const struct RTCOccludedFunctionNArguments* args,\n      RTCScene scene,\n      struct RTCRay* ray,\n      unsigned int instID,\n      unsigned int instPrimID\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcForwardOccluded1` and `rtcForwardOccluded1Ex` functions forward\nthe traversal of a transformed ray (`ray` argument) into a scene\n(`scene` argument) from a user geometry callback. The function can only\nget invoked from a user geometry callback for a ray traversal initiated\nwith the `rtcOccluded1` function. The callback arguments structure of\nthe callback invokation has to get passed to the ray forwarding (`args`\nargument). The user geometry callback should instantly terminate after\ninvoking the `rtcForwardOccluded1/Ex` function.\n\nOnly the ray origin and ray direction members of the ray argument are\nused for forwarding, all additional ray properties are inherited from\nthe initial ray traversal invokation of `rtcOccluded1`.\n\nThe implementation of the `rtcForwardOccluded1` function recursively\ncontinues the ray traversal into the specified scene and pushes the\nprovided instance ID (`instID` argument) to the instance ID stack. Hit\ninformation is updated into the ray structure passed to the original\n`rtcOccluded1` invokation.\n\nThis function can get used to implement user defined instancing using\nuser geometries, e.g. by transforming the ray in a special way, and/or\nselecting between different scenes to instantiate.\n\nFor user defined instance arrays, the `rtcForwardIntersect1Ex` variant\nhas an additional `instPrimID` argument which is pushed to the instance\nprimitive ID stack. Instance primitive IDs identify which instance of\nan instance array was hit.\n\nWhen using Embree on the CPU it is possible to recursively invoke\n`rtcOccluded1` directly from a user geometry callback. However, when\nSYCL is used, recursively tracing rays is not directly supported, and\nthe `rtcForwardOccluded1/Ex` function must be used.\n\nThe ray structure must be aligned to 16 bytes.\n\n#### EXIT STATUS {#exit-status}\n\nFor performance reasons this function does not do any error checks,\nthus will not set any error flags on failure.\n\n#### SEE ALSO {#see-also}\n\n[rtcOccluded1], [RTCRay]\n\n```{=tex}\n\n```\nrtcForwardIntersect4/8/16\n-------------------------\n\n#### NAME {#name}\n\n    rtcForwardIntersect4/8/16/Ex - forwards a ray packet to new scene\n      from user geometry callback\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcForwardIntersect4(\n      void int* valid,\n      const struct RTCIntersectFunctionNArguments* args,\n      RTCScene scene,\n      struct RTCRay4* ray,\n      unsigned int instID\n    );\n\n    void rtcForwardIntersect8(\n      void int* valid,\n      const struct RTCIntersectFunctionNArguments* args,\n      RTCScene scene,\n      struct RTCRay8* ray,\n      unsigned int instID\n    );\n\n    void rtcForwardIntersect16(\n      void int* valid,\n      const struct RTCIntersectFunctionNArguments* args,\n      RTCScene scene,\n      struct RTCRay16* ray,\n      unsigned int instID,\n      unsigned int instPrimID\n    );\n\n    void rtcForwardIntersect4Ex(\n      void int* valid,\n      const struct RTCIntersectFunctionNArguments* args,\n      RTCScene scene,\n      struct RTCRay4* ray,\n      unsigned int instID,\n      unsigned int instPrimID\n    );\n\n    void rtcForwardIntersect8Ex(\n      void int* valid,\n      const struct RTCIntersectFunctionNArguments* args,\n      RTCScene scene,\n      struct RTCRay8* ray,\n      unsigned int instID,\n      unsigned int instPrimID\n    );\n\n    void rtcForwardIntersect16Ex(\n      void int* valid,\n      const struct RTCIntersectFunctionNArguments* args,\n      RTCScene scene,\n      struct RTCRay16* ray,\n      unsigned int instID,\n      unsigned int instPrimID\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcForwardIntersect4/8/16` and `rtcForwardIntersect4/8/16Ex`\nfunctions forward the traversal of a transformed ray packet (`ray`\nargument) into a scene (`scene` argument) from a user geometry\ncallback. The function can only get invoked from a user geometry\ncallback for a ray traversal initiated with the `rtcIntersect4/8/16`\nfunction. The callback arguments structure of the callback invokation\nhas to get passed to the ray forwarding (`args` argument). The user\ngeometry callback should instantly terminate after invoking the\n`rtcForwardIntersect4/8/16/Ex` function.\n\nOnly the ray origin and ray direction members of the ray argument are\nused for forwarding, all additional ray properties are inherited from\nthe initial ray traversal invokation of `rtcIntersect4/8/16`.\n\nThe implementation of the `rtcForwardIntersect4/8/16` function\nrecursively continues the ray traversal into the specified scene and\npushes the provided instance ID (`instID` argument) to the instance ID\nstack. Hit information is updated into the ray hit structure passed to\nthe original `rtcIntersect4/8/16` invokation.\n\nThis function can get used to implement user defined instancing using\nuser geometries, e.g. by transforming the ray in a special way, and/or\nselecting between different scenes to instantiate.\n\nFor user defined instance arrays, the `rtcForwardIntersect4/8/16Ex`\nvariant has an additional `instPrimID` argument which is pushed to the\ninstance primitive ID stack. Instance primitive IDs identify which\ninstance of an instance array was hit.\n\nWhen using Embree on the CPU it is possible to recursively invoke\n`rtcIntersect4/8/16` directly from a user geometry callback. However,\nwhen SYCL is used, recursively tracing rays is not directly supported,\nand the `rtcForwardIntersect4/8/16` function must be used.\n\nFor `rtcForwardIntersect4` the ray packet must be aligned to 16 bytes,\nfor `rtcForwardIntersect8` the alignment must be 32 bytes, and for\n`rtcForwardIntersect16` the alignment must be 64 bytes.\n\n#### EXIT STATUS {#exit-status}\n\nFor performance reasons this function does not do any error checks,\nthus will not set any error flags on failure.\n\n#### SEE ALSO {#see-also}\n\n[rtcIntersect4/8/16]\n\n```{=tex}\n\n```\nrtcForwardOccluded4/8/16\n------------------------\n\n#### NAME {#name}\n\n    rtcForwardOccluded4/8/16/Ex - forwards a ray packet to new scene\n      from user geometry callback\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcForwardOccluded4(\n      void int* valid,\n      const struct RTCOccludedFunctionNArguments* args,\n      RTCScene scene,\n      struct RTCRay4* ray,\n      unsigned int instID\n    );\n\n    void rtcForwardOccluded8(\n      void int* valid,\n      const struct RTCOccludedFunctionNArguments* args,\n      RTCScene scene,\n      struct RTCRay8* ray,\n      unsigned int instID\n    );\n\n    void rtcForwardOccluded16(\n      void int* valid,\n      const struct RTCOccludedFunctionNArguments* args,\n      RTCScene scene,\n      struct RTCRay16* ray,\n      unsigned int instID\n    );\n\n    void rtcForwardOccluded4Ex(\n      void int* valid,\n      const struct RTCOccludedFunctionNArguments* args,\n      RTCScene scene,\n      struct RTCRay4* ray,\n      unsigned int instID,\n      unsigned int instPrimID\n    );\n\n    void rtcForwardOccluded8Ex(\n      void int* valid,\n      const struct RTCOccludedFunctionNArguments* args,\n      RTCScene scene,\n      struct RTCRay8* ray,\n      unsigned int instID,\n      unsigned int instPrimID\n    );\n\n    void rtcForwardOccluded16Ex(\n      void int* valid,\n      const struct RTCOccludedFunctionNArguments* args,\n      RTCScene scene,\n      struct RTCRay16* ray,\n      unsigned int instID,\n      unsigned int instPrimID\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcForwardOccluded4/8/16` and `rtcForwardOccluded4/8/16Ex`\nfunctions forward the traversal of a transformed ray packet (`ray`\nargument) into a scene (`scene` argument) from a user geometry\ncallback. The function can only get invoked from a user geometry\ncallback for a ray traversal initiated with the `rtcOccluded4/8/16`\nfunction. The callback arguments structure of the callback invokation\nhas to get passed to the ray forwarding (`args` argument). The user\ngeometry callback should instantly terminate after invoking the\n`rtcForwardOccluded4/8/16/Ex` function.\n\nOnly the ray origin and ray direction members of the ray argument are\nused for forwarding, all additional ray properties are inherited from\nthe initial ray traversal invokation of `rtcOccluded4/8/16`.\n\nThe implementation of the `rtcForwardOccluded4/8/16` function\nrecursively continues the ray traversal into the specified scene and\npushes the provided instance ID (`instID` argument) to the instance ID\nstack. Hit information is updated into the ray structure passed to the\noriginal `rtcOccluded4/8/16` invokation.\n\nThis function can get used to implement user defined instancing using\nuser geometries, e.g. by transforming the ray in a special way, and/or\nselecting between different scenes to instantiate.\n\nFor user defined instance arrays, the `rtcForwardIntersect4/8/16Ex`\nvariant has an additional `instPrimID` argument which is pushed to the\ninstance primitive ID stack. Instance primitive IDs identify which\ninstance of an instance array was hit.\n\nWhen using Embree on the CPU it is possible to recursively invoke\n`rtcOccluded4/8/16` directly from a user geometry callback. However,\nwhen SYCL is used, recursively tracing rays is not directly supported,\nand the `rtcForwardOccluded4/8/16` function must be used.\n\nFor `rtcForwardOccluded4` the ray packet must be aligned to 16 bytes,\nfor `rtcForwardOccluded8` the alignment must be 32 bytes, and for\n`rtcForwardOccluded16` the alignment must be 64 bytes.\n\n#### EXIT STATUS {#exit-status}\n\nFor performance reasons this function does not do any error checks,\nthus will not set any error flags on failure.\n\n#### SEE ALSO {#see-also}\n\n[rtcOccluded4/8/16]\n\n```{=tex}\n\n```\nrtcInitPointQueryContext\n------------------------\n\n#### NAME {#name}\n\n    rtcInitPointQueryContext - initializes the context information (e.g.\n      stack of (multilevel-)instance transformations) for point queries\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    struct RTC_ALIGN(16) RTCPointQueryContext\n    {\n      // accumulated 4x4 column major matrices from world to instance space.\n      float world2inst[RTC_MAX_INSTANCE_LEVEL_COUNT][16];\n      \n      // accumulated 4x4 column major matrices from instance to world space.\n      float inst2world[RTC_MAX_INSTANCE_LEVEL_COUNT][16];\n\n      // instance ids.\n      unsigned int instID[RTC_MAX_INSTANCE_LEVEL_COUNT];\n      \n      // number of instances currently on the stack.\n      unsigned int instStackSize;\n    };\n\n    void rtcInitPointQueryContext(\n      struct RTCPointQueryContext* context\n    );\n\n#### DESCRIPTION {#description}\n\nA stack (`RTCPointQueryContext` type) which stores the IDs and instance\ntransformations during a BVH traversal for a point query. The\ntransformations are assumed to be affine transformations (3×3 matrix\nplus translation) and therefore the last column is ignored (see\n[RTC\\_GEOMETRY\\_TYPE\\_INSTANCE] for details).\n\nThe `rtcInitPointContext` function initializes the context to default\nvalues and should be called for initialization.\n\nThe context will be passed as an argument to the point query callback\nfunction (see [rtcSetGeometryPointQueryFunction]) and should be used\nto pass instance information down the instancing chain for user defined\ninstancing (see tutorial [ClosestPoint] for a reference\nimplementation of point queries with user defined instancing).\n\nThe context is an necessary argument to [rtcPointQuery] and Embree\ninternally uses the topmost instance transformation of the stack to\ntransform the point query into instance space.\n\n#### EXIT STATUS {#exit-status}\n\nNo error code is set by this function.\n\n#### SEE ALSO {#see-also}\n\n[rtcPointQuery], [rtcSetGeometryPointQueryFunction]\n\n```{=tex}\n\n```\nrtcPointQuery\n-------------\n\n#### NAME {#name}\n\n    rtcPointQuery - traverses the BVH with a point query object\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    struct RTC_ALIGN(16) RTCPointQuery\n    {\n      // location of the query\n      float x;\n      float y;\n      float z;\n\n      // radius and time of the query\n      float radius;\n      float time;\n    };\n\n    void rtcPointQuery(\n      RTCScene scene,\n      struct RTCPointQuery* query,\n      struct RTCPointQueryContext* context,\n      struct RTCPointQueryFunction* queryFunc,\n      void* userPtr\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcPointQuery` function traverses the BVH using a `RTCPointQuery`\nobject (`query` argument) and calls a user defined callback function\n(e.g `queryFunc` argument) for each primitive of the scene (`scene`\nargument) that intersects the query domain.\n\nThe user has to initialize the query location (`x`, `y` and `z` member)\nand query radius in the range $[0, \\infty]$. If the scene contains\nmotion blur geometries, also the query time (`time` member) must be\ninitialized to a value in the range $[0, 1]$.\n\nFurther, a `RTCPointQueryContext` (`context` argument) must be created\nand initialized. It contains ID and transformation information of the\ninstancing hierarchy if (multilevel-)instancing is used. See\n[rtcInitPointQueryContext] for further information.\n\nFor every primitive that intersects the query domain, the callback\nfunction (`queryFunc` argument) is called, in which distance\ncomputations to the primitive can be implemented. The user will be\nprovided with the primID and geomID of the according primitive,\nhowever, the geometry information (e.g. triangle index and vertex data)\nhas to be determined manually. The `userPtr` argument can be used to\ninput geometry data of the scene or output results of the point query\n(e.g. closest point currently found on surface geometry (see tutorial\n[ClosestPoint])).\n\nThe parameter `queryFunc` is optional and can be NULL, in which case\nthe callback function is not invoked. However, a callback function can\nstill get attached to a specific `RTCGeometry` object using\n[rtcSetGeometryPointQueryFunction]. If a callback function is\nattached to a geometry and (a potentially different) callback function\nis passed as an argument to `rtcPointQuery`, both functions are called\nfor the primitives of the according geometries.\n\nThe query radius can be decreased inside the callback function, which\nallows to efficiently cull parts of the scene during BVH traversal.\nIncreasing the query radius and modifying time or location of the query\nwill result in undefined behaviour.\n\nThe callback function will be called for all primitives in a leaf node\nof the BVH even if the primitive is outside the query domain, since\nEmbree does not gather geometry information of primitives internally.\n\nPoint queries can be used with (multilevel)-instancing. However, care\nhas to be taken when the instance transformation contains anisotropic\nscaling or sheering. In these cases distance computations have to be\nperformed in world space to ensure correctness and the ellipsoidal\nquery domain (in instance space) will be approximated with its axis\naligned bounding box internally. Therefore, the callback function might\nbe invoked even for primitives in inner BVH nodes that do not intersect\nthe query domain. See [rtcSetGeometryPointQueryFunction] for details.\n\nThe point query structure must be aligned to 16 bytes.\n\n#### SUPPORTED PRIMITIVES\n\nCurrently, all primitive types are supported by the point query API\nexcept of points (see [RTC\\_GEOMETRY\\_TYPE\\_POINT]), curves (see\n[RTC\\_GEOMETRY\\_TYPE\\_CURVE]) and sudivision surfaces (see\n[RTC\\_GEOMETRY\\_SUBDIVISION]).\n\n#### EXIT STATUS {#exit-status}\n\nFor performance reasons this function does not do any error checks,\nthus will not set any error flags on failure.\n\n#### SEE ALSO {#see-also}\n\n[rtcSetGeometryPointQueryFunction], [rtcInitPointQueryContext]\n\n```{=tex}\n\n```\nrtcCollide\n----------\n\n#### NAME {#name}\n\n    rtcCollide - intersects one BVH with another\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    struct RTCCollision {\n      unsigned int geomID0, primID0;\n      unsigned int geomID1, primID1;\n    };\n\n    typedef void (*RTCCollideFunc) (\n      void* userPtr,\n      RTCCollision* collisions,\n      size_t num_collisions);\n\n    void rtcCollide (\n        RTCScene hscene0, \n        RTCScene hscene1, \n        RTCCollideFunc callback, \n        void* userPtr\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcCollide` function intersects the BVH of `hscene0` with the BVH\nof scene `hscene1` and calls a user defined callback function (e.g\n`callback` argument) for each pair of intersecting primitives between\nthe two scenes. A user defined data pointer (`userPtr` argument) can\nalso be passed in.\n\nFor every pair of primitives that may intersect each other, the\ncallback function (`callback` argument) is called. The user will be\nprovided with the primID's and geomID's of multiple potentially\nintersecting primitive pairs. Currently, only scene entirely composed\nof user geometries are supported, thus the user is expected to\nimplement a primitive/primitive intersection to filter out false\npositives in the callback function. The `userPtr` argument can be used\nto input geometry data of the scene or output results of the\nintersection query.\n\n#### SUPPORTED PRIMITIVES {#supported-primitives}\n\nCurrently, the only supported type is the user geometry type (see\n[RTC\\_GEOMETRY\\_TYPE\\_USER]).\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n```{=tex}\n\n```\nrtcNewBVH\n---------\n\n#### NAME {#name}\n\n    rtcNewBVH - creates a new BVH object\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    RTCBVH rtcNewBVH(RTCDevice device);\n\n#### DESCRIPTION {#description}\n\nThis function creates a new BVH object and returns a handle to this\nBVH. The BVH object is reference counted with an initial reference\ncount of 1. The handle can be released using the `rtcReleaseBVH` API\ncall.\n\nThe BVH object can be used to build a BVH in a user-specified format\nover user-specified primitives. See the documentation of the\n`rtcBuildBVH` call for more details.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcRetainBVH], [rtcReleaseBVH], [rtcBuildBVH]\n\n```{=tex}\n\n```\nrtcRetainBVH\n------------\n\n#### NAME {#name}\n\n    rtcRetainBVH - increments the BVH reference count\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcRetainBVH(RTCBVH bvh);\n\n#### DESCRIPTION {#description}\n\nBVH objects are reference counted. The `rtcRetainBVH` function\nincrements the reference count of the passed BVH object (`bvh`\nargument). This function together with `rtcReleaseBVH` allows to use\nthe internal reference counting in a C++ wrapper class to handle the\nownership of the object.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcNewBVH], [rtcReleaseBVH]\n\n```{=tex}\n\n```\nrtcReleaseBVH\n-------------\n\n#### NAME {#name}\n\n    rtcReleaseBVH - decrements the BVH reference count\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    void rtcReleaseBVH(RTCBVH bvh);\n\n#### DESCRIPTION {#description}\n\nBVH objects are reference counted. The `rtcReleaseBVH` function\ndecrements the reference count of the passed BVH object (`bvh`\nargument). When the reference count falls to 0, the BVH gets destroyed.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcNewBVH], [rtcRetainBVH]\n\n```{=tex}\n\n```\nrtcBuildBVH\n-----------\n\n#### NAME {#name}\n\n    rtcBuildBVH - builds a BVH\n\n#### SYNOPSIS {#synopsis}\n\n    #include <embree4/rtcore.h>\n\n    struct RTC_ALIGN(32) RTCBuildPrimitive\n    {\n      float lower_x, lower_y, lower_z; \n      unsigned int geomID;\n      float upper_x, upper_y, upper_z;\n      unsigned int primID;\n    };\n\n    typedef void* (*RTCCreateNodeFunction) (\n      RTCThreadLocalAllocator allocator,\n      unsigned int childCount,\n      void* userPtr\n    );\n\n    typedef void (*RTCSetNodeChildrenFunction) (\n      void* nodePtr,\n      void** children,\n      unsigned int childCount,\n      void* userPtr\n    );\n\n    typedef void (*RTCSetNodeBoundsFunction) (\n      void* nodePtr,\n      const struct RTCBounds** bounds,\n      unsigned int childCount,\n      void* userPtr\n    );\n\n    typedef void* (*RTCCreateLeafFunction) (\n      RTCThreadLocalAllocator allocator,\n      const struct RTCBuildPrimitive* primitives,\n      size_t primitiveCount,\n      void* userPtr\n    );\n\n    typedef void (*RTCSplitPrimitiveFunction) (\n      const struct RTCBuildPrimitive* primitive,\n      unsigned int dimension,\n      float position,\n      struct RTCBounds* leftBounds,\n      struct RTCBounds* rightBounds,\n      void* userPtr\n    );\n\n    typedef bool (*RTCProgressMonitorFunction)(\n      void* userPtr, double n\n    );\n\n    enum RTCBuildFlags\n    {\n      RTC_BUILD_FLAG_NONE,\n      RTC_BUILD_FLAG_DYNAMIC\n    };\n\n    struct RTCBuildArguments\n    {\n      size_t byteSize;\n\n      enum RTCBuildQuality buildQuality;\n      enum RTCBuildFlags buildFlags;\n      unsigned int maxBranchingFactor;\n      unsigned int maxDepth;\n      unsigned int sahBlockSize;\n      unsigned int minLeafSize;\n      unsigned int maxLeafSize;\n      float traversalCost;\n      float intersectionCost;\n\n      RTCBVH bvh;\n      struct RTCBuildPrimitive* primitives;\n      size_t primitiveCount;\n      size_t primitiveArrayCapacity;\n      \n      RTCCreateNodeFunction createNode;\n      RTCSetNodeChildrenFunction setNodeChildren;\n      RTCSetNodeBoundsFunction setNodeBounds;\n      RTCCreateLeafFunction createLeaf;\n      RTCSplitPrimitiveFunction splitPrimitive;\n      RTCProgressMonitorFunction buildProgress;\n      void* userPtr;\n    };\n\n    struct RTCBuildArguments rtcDefaultBuildArguments();\n\n    void* rtcBuildBVH(\n      const struct RTCBuildArguments* args\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcBuildBVH` function can be used to build a BVH in a user-defined\nformat over arbitrary primitives. All arguments to the function are\nprovided through the `RTCBuildArguments` structure. The first member of\nthat structure must be set to the size of the structure in bytes\n(`bytesSize` member) which allows future extensions of the structure.\nIt is recommended to initialize the build arguments structure using the\n`rtcDefaultBuildArguments` function.\n\nThe `rtcBuildBVH` function gets passed the BVH to build (`bvh` member),\nthe array of primitives (`primitives` member), the capacity of that\narray (`primitiveArrayCapacity` member), the number of primitives\nstored inside the array (`primitiveCount` member), callback function\npointers, and a user-defined pointer (`userPtr` member) that is passed\nto all callback functions when invoked. The `primitives` array can be\nfreed by the application after the BVH is built. All callback functions\nare typically called from multiple threads, thus their implementation\nmust be thread-safe.\n\nFour callback functions must be registered, which are invoked during\nbuild to create BVH nodes (`createNode` member), to set the pointers to\nall children (`setNodeChildren` member), to set the bounding boxes of\nall children (`setNodeBounds` member), and to create a leaf node\n(`createLeaf` member).\n\nThe function pointer to the primitive split function (`splitPrimitive`\nmember) may be `NULL`, however, then no spatial splitting in high\nquality mode is possible. The function pointer used to report the build\nprogress (`buildProgress` member) is optional and may also be `NULL`.\n\nFurther, some build settings are passed to configure the BVH build.\nUsing the build quality settings (`buildQuality` member), one can\nselect between a faster, low quality build which is good for dynamic\nscenes, and a standard quality build for static scenes. One can also\nspecify the desired maximum branching factor of the BVH\n(`maxBranchingFactor` member), the maximum depth the BVH should have\n(`maxDepth` member), the block size for the SAH heuristic\n(`sahBlockSize` member), the minimum and maximum leaf size\n(`minLeafSize` and `maxLeafSize` member), and the estimated costs of\none traversal step and one primitive intersection (`traversalCost` and\n`intersectionCost` members). When enabling the `RTC_BUILD_FLAG_DYNAMIC`\nbuild flags (`buildFlags` member), re-build performance for dynamic\nscenes is improved at the cost of higher memory requirements.\n\nTo spatially split primitives in high quality mode, the builder needs\nextra space at the end of the build primitive array to store split\nprimitives. The total capacity of the build primitive array is passed\nusing the `primitiveArrayCapacity` member, and should be about twice\nthe number of primitives when using spatial splits.\n\nThe `RTCCreateNodeFunc` and `RTCCreateLeafFunc` callbacks are passed a\nthread local allocator object that should be used for fast allocation\nof nodes using the `rtcThreadLocalAlloc` function. We strongly\nrecommend using this allocation mechanism, as alternative approaches\nlike standard `malloc` can be over 10× slower. The allocator object\npassed to the create callbacks may be used only inside the current\nthread. Memory allocated using `rtcThreadLocalAlloc` is automatically\nfreed when the `RTCBVH` object is deleted. If you use your own memory\nallocation scheme you have to free the memory yourself when the\n`RTCBVH` object is no longer used.\n\nThe `RTCCreateNodeFunc` callback additionally gets the number of\nchildren for this node in the range from 2 to `maxBranchingFactor`\n(`childCount` argument).\n\nThe `RTCSetNodeChildFunc` callback function gets a pointer to the node\nas input (`nodePtr` argument), an array of pointers to the children\n(`childPtrs` argument), and the size of this array (`childCount`\nargument).\n\nThe `RTCSetNodeBoundsFunc` callback function gets a pointer to the node\nas input (`nodePtr` argument), an array of pointers to the bounding\nboxes of the children (`bounds` argument), and the size of this array\n(`childCount` argument).\n\nThe `RTCCreateLeafFunc` callback additionally gets an array of\nprimitives as input (`primitives` argument), and the size of this array\n(`primitiveCount` argument). The callback should read the `geomID` and\n`primID` members from the passed primitives to construct the leaf.\n\nThe `RTCSplitPrimitiveFunc` callback is invoked in high quality mode to\nsplit a primitive (`primitive` argument) at the specified position\n(`position` argument) and dimension (`dimension` argument). The\ncallback should return bounds of the clipped left and right parts of\nthe primitive (`leftBounds` and `rightBounds` arguments).\n\nThe `RTCProgressMonitorFunction` callback function is called with the\nestimated completion rate `n` in the range $[0,1]$. Returning `true`\nfrom the callback lets the build continue; returning `false` cancels\nthe build.\n\n#### EXIT STATUS {#exit-status}\n\nOn failure an error code is set that can be queried using\n`rtcGetDeviceError`.\n\n#### SEE ALSO {#see-also}\n\n[rtcNewBVH]\n\n```{=tex}\n\n```\nRTCQuaternionDecomposition\n--------------------------\n\n#### NAME {#name}\n\n    RTCQuaternionDecomposition - structure that represents a quaternion\n      decomposition of an affine transformation\n\n#### SYNOPSIS {#synopsis}\n\n    struct RTCQuaternionDecomposition\n    {\n      float scale_x, scale_y, scale_z;\n      float skew_xy, skew_xz, skew_yz;\n      float shift_x, shift_y, shift_z;\n      float quaternion_r, quaternion_i, quaternion_j, quaternion_k;\n      float translation_x, translation_y, translation_z;\n    };\n\n#### DESCRIPTION {#description}\n\nThe struct `RTCQuaternionDecomposition` represents an affine\ntransformation decomposed into three parts. An upper triangular\nscaling/skew/shift matrix\n\n$$\nS = \\left( \\begin{array}{cccc}\nscale_x & skew_{xy} & skew_{xz} & shift_x \\ \n0 & scale_y & skew_{yz} & shift_y \\ \n0 & 0 & scale_z & shift_z \\ \n0 & 0 & 0 & 1 \\ \n\\end{array} \\right),\n$$\n\na translation matrix\n\n$$\nT = \\left( \\begin{array}{cccc}\n1 & 0 & 0 & translation_x \\ \n0 & 1 & 0 & translation_y \\ \n0 & 0 & 1 & translation_z \\ \n0 & 0 & 0 & 1 \\ \n\\end{array} \\right),\n$$\n\nand a rotation matrix $R$, represented as a quaternion\n\n$quaternion_r + quaternion_i  \\mathbf{i} + quaternion_j  \\mathbf{i} + quaternion_k  \\mathbf{k}$\n\nwhere $\\mathbf{i}$, $\\mathbf{j}$ $\\mathbf{k}$ are the imaginary\nquaternion units. The passed quaternion will be normalized internally.\n\nThe affine transformation matrix corresponding to a\n`RTCQuaternionDecomposition` is $TRS$ and a point\n$p = (p_x, p_y, p_z, 1)^T$ will be transformed as\n$$p' = T  R  S  p.$$\n\nThe functions `rtcInitQuaternionDecomposition`,\n`rtcQuaternionDecompositionSetQuaternion`,\n`rtcQuaternionDecompositionSetScale`,\n`rtcQuaternionDecompositionSetSkew`,\n`rtcQuaternionDecompositionSetShift`, and\n`rtcQuaternionDecompositionSetTranslation` allow to set the fields of\nthe structure more conveniently.\n\n#### EXIT STATUS {#exit-status}\n\nNo error code is set by this function.\n\n#### SEE ALSO {#see-also}\n\n[rtcSetGeometryTransformQuaternion],\n[rtcInitQuaternionDecomposition]\n\n```{=tex}\n\n```\nrtcInitQuaternionDecomposition\n------------------------------\n\n#### NAME {#name}\n\n    rtcInitQuaternionDecomposition - initializes quaternion decomposition\n\n#### SYNOPSIS {#synopsis}\n\n    void rtcInitQuaternionDecomposition(\n      struct RTCQuaternionDecomposition* qd\n    );\n\n#### DESCRIPTION {#description}\n\nThe `rtcInitQuaternionDecomposition` function initializes a\n`RTCQuaternionDecomposition` structure to represent an identity\ntransformation.\n\n#### EXIT STATUS {#exit-status}\n\nNo error code is set by this function.\n\n#### SEE ALSO {#see-also}\n\n[rtcSetGeometryTransformQuaternion], [RTCQuaternionDecomposition]\n\n```{=tex}\n\n```\nCPU Performance Recommendations\n===============================\n\nMXCSR control and status register\n---------------------------------\n\nIt is strongly recommended to have the `Flush to Zero` and\n`Denormals are Zero` mode of the MXCSR control and status register\nenabled for each thread before calling the `rtcIntersect`-type and\n`rtcOccluded`-type functions. Otherwise, under some circumstances\nspecial handling of denormalized floating point numbers can\nsignificantly reduce application and Embree performance. When using\nEmbree together with the Intel® Threading Building Blocks, it is\nsufficient to execute the following code at the beginning of the\napplication main thread (before the creation of the\n`tbb::task_scheduler_init` object):\n\n    #include <xmmintrin.h>\n    #include <pmmintrin.h>\n    ...\n    _MM_SET_FLUSH_ZERO_MODE(_MM_FLUSH_ZERO_ON);\n    _MM_SET_DENORMALS_ZERO_MODE(_MM_DENORMALS_ZERO_ON);\n\nIf using a different tasking system, make sure each rendering thread\nhas the proper mode set.\n\nThread Creation and Affinity Settings\n-------------------------------------\n\nTasking systems like TBB create worker threads on demand, which will\nadd a runtime overhead for the very first `rtcCommitScene` call. In\ncase you want to benchmark the scene build time, you should start the\nthreads at application startup. You can let Embree start TBB threads by\npassing `start_threads=1` to the `cfg` parameter of `rtcNewDevice`.\n\nOn machines with a high thread count (e.g. dual-socket Xeon or Xeon Phi\nmachines), affinitizing TBB worker threads increases build and\nrendering performance. You can let Embree affinitize TBB worker threads\nby passing `set_affinity=1` to the `cfg` parameter of `rtcNewDevice`.\nBy default, threads are not affinitized by Embree with the exception of\nXeon Phi Processors where they are affinitized by default.\n\nAll Embree tutorials automatically start and affinitize TBB worker\nthreads by passing `start_threads=1,set_affinity=1` to `rtcNewDevice`.\n\nFast Coherent Rays\n------------------\n\nFor getting the highest performance for highly coherent rays, e.g.\nprimary or hard shadow rays, it is recommended to use packets with\nsetting the `RTC_RAY_QUERY_FLAG_COHERENT` flag in the\n`RTCIntersectArguments` struct passed to the\n`rtcIntersect`/`rtcOccluded` calls. The rays inside each packet should\nbe grouped as coherent as possible.\n\nHuge Page Support\n-----------------\n\nIt is recommended to use huge pages under Linux to increase rendering\nperformance. Embree supports 2MB huge pages under Windows, Linux, and\nmacOS. Under Linux huge page support is enabled by default, and under\nWindows and macOS disabled by default. Huge page support can be enabled\nin Embree by passing `hugepages=1` to `rtcNewDevice` or disabled by\npassing `hugepages=0` to `rtcNewDevice`.\n\nWe recommend using 2MB huge pages with Embree under Linux as this\nimproves ray tracing performance by about 5-10%. Under Windows using\nhuge pages requires the application to run in elevated mode which is a\nsecurity issue, thus likely not an option for most use cases. Under\nmacOS huge pages are rarely available as memory tends to get quickly\nfragmented, thus we do not recommend using huge pages on macOS.\n\n### Huge Pages under Linux\n\nLinux supports transparent huge pages and explicit huge pages. To\nenable transparent huge page support under Linux, execute the following\nas root:\n\n    echo always > /sys/kernel/mm/transparent_hugepage/enabled\n\nWhen transparent huge pages are enabled, the kernel tries to merge 4KB\npages to 2MB pages when possible as a background job. Many Linux\ndistributions have transparent huge pages enabled by default. See the\nfollowing webpage for more information on [transparent huge pages under\nLinux](https://www.kernel.org/doc/Documentation/vm/transhuge.txt). In\nthis mode each application, including your rendering application based\non Embree, will automatically tend to use huge pages.\n\nUsing transparent huge pages, the transitioning from 4KB to 2MB pages\nmight take some time. For that reason Embree also supports allocating\n2MB pages directly when a huge page pool is configured. Such a pool can\nbe configured by writing some number of huge pages to allocate to\n`/proc/sys/vm/nr_overcommit_hugepages` as root user. E.g. to configure\n2GB of address space for huge page allocation, execute the following as\nroot:\n\n    echo 1000 > /proc/sys/vm/nr_overcommit_hugepages\n\nSee the following webpage for more information on [huge pages under\nLinux](https://www.kernel.org/doc/Documentation/vm/hugetlbpage.txt).\n\n### Huge Pages under Windows\n\nTo use huge pages under Windows, the current user must have the \"Lock\npages in memory\" (SeLockMemoryPrivilege) assigned. This can be\nconfigured through the \"Local Security Policy\" application, by adding a\nuser to \"Local Policies\" -\\> \"User Rights Assignment\" -\\> \"Lock pages\nin memory\". You have to log out and in again for this change to take\neffect.\n\nFurther, your application must be executed as an elevated process (\"Run\nas administrator\") and the \"SeLockMemoryPrivilege\" must be explicitly\nenabled by your application. Example code on how to enable this\nprivilege can be found in the \"common/sys/alloc.cpp\" file of Embree.\nAlternatively, Embree will try to enable this privilege when passing\n`enable_selockmemoryprivilege=1` to `rtcNewDevice`. Further, huge pages\nshould be enabled in Embree by passing `hugepages=1` to `rtcNewDevice`.\n\nWhen the system has been running for a while, physical memory gets\nfragmented, which can slow down the allocation of huge pages\nsignificantly under Windows.\n\n### Huge Pages under macOS\n\nTo use huge pages under macOS you have to pass `hugepages=1` to\n`rtcNewDevice` to enable that feature in Embree.\n\nWhen the system has been running for a while, physical memory gets\nquickly fragmented, and causes huge page allocations to fail. For this\nreason, huge pages are not very useful under macOS in practice.\n\nAvoid store-to-load forwarding issues with single rays\n------------------------------------------------------\n\nWe recommend to use a single SSE store to set up the `org` and `tnear`\ncomponents, and a single SSE store to set up the `dir` and `time`\ncomponents of a single ray (`RTCRay` type). Storing these values using\nscalar stores causes a store-to-load forwarding penalty because Embree\nis reading these components using SSE loads later on.\n\n```{=tex}\n\n```\nGPU Performance Recommendations\n===============================\n\nLow Code Complexity\n-------------------\n\nAs a general rule try to keep code complexity low, to avoid spill code\ngeneration. To achieve this we recommend splitting your renderer into\nseparate kernels instead of using a single Uber kernel invokation.\n\nCode can further get reduced by using SYCL specialization constants to\njust enable rendering features required to render a given scene.\n\nFeature Flags\n-------------\n\nUse SYCL specialization constants and the feature flags (see section\n[RTCFeatureFlags]) of the `rtcIntersect1` and `rtcOccluded1` calls to\nJIT compile minimal code. The passed feature flags should just contain\nfeatures required to render the current scene. If JIT compile times are\nan issue, reduce the number of feature masks used and use JIT caching\n(see section [SYCL JIT caching](#sycl-jit-caching)).\n\nInline Indirect Calls\n---------------------\n\nAttaching user geometry and intersection filter callbacks to the\ngeometries of the scene is not supported in SYCL for performance\nreasons.\n\nInstead directly pass the user geometry and intersection filter\ncallback functions through the `RTCIntersectArguments` (and\n`RTCOccludedArguments`) struct to `rtcIntersect1` (and `rtcOccluded1`)\nAPI functions as in the following example:\n\n    RTC_SYCL_INDIRECTLY_CALLABLE void intersectionFilter(\n      const RTCFilterFunctionNArguments* args\n    ) { ... }\n\n    RTCIntersectArguments args;\n    rtcInitIntersectArguments(&args);\n    args.filter = intersectionFilter;\n\n    rtcIntersect1(scene,&ray,&args);\n\nIf the callback function is directly passed that way, the SYCL compiler\ncan inline the indirect call, which gives a huge performance benefit.\nDo *not* read a function pointer form some memory location and pass it\nto `rtcIntersect1` (and `rtcOccluded1`) as this will also prevent\ninlining.\n\n7 Bit Ray Mask\n--------------\n\nUse just the lower 7 bits of the ray and geometry mask if possible,\neven though Embree supports 32 bit ray masks for geometry masking. On\nthe CPU using any of the 32 bits yields the same performance, but the\nray tracing hardware only supports an 8 bit mask, thus Embree has to\nemulate 32 bit masking if used. For that reason the lower 7 mask bits\nare hardware accelerated and fast, while the mask bits 7-31 require\nsome software intervention and using them reduces performance. To turn\non 32 bit ray masks use the RTC\\_FEATURE\\_FLAG\\_32\\_BIT\\_RAY\\_MASK (see\nsection [RTCFeatureFlags]).\n\nLimit Motion Blur Motions\n-------------------------\n\nThe motion blur implementation on SYCL has some limitations regarding\nsupported motion. Primitive motion should be maximally as large as a\nsmall multiple of the primitive size, otherwise performance can degrade\na lot. If detailed geometry moves fast, best put the geometry into an\ninstance, and apply motion blur to the instance itself, which\nefficiently allows larger motions. As a fallback, problematic scenes\ncan always still get rendered robustly on the CPU.\n\nGeneric Pointers\n----------------\n\nEmbree uses standard C++ pointers in its implementation. SYCL might not\nbe able to detect the memory space these pointers refer to and has to\ntreat them as generic pointers which are not performing optimal. The\nDPC++ compiler has advanced optimizations to infer the proper address\nspace to avoid usage of generic pointers.\n\nHowever, if you still encounter the following warning during ahead of\ntime compilation of SYCL kernels, then loads from generic pointer are\npresent:\n\n    warning: Adding XX occurrences of additional control flow due to presence\n             of generic address space operations in function YYY.\n\nTo work around this issue we recommend:\n\n-   Do not use local memory inside kernels that trace rays. In this\n    case the DPC++ compiler knows that no local memory pointer can\n    exist and will optimize generic loads. As this is typically the\n    case for renderers, generic pointer will typically not cause\n    issues.\n\n-   Indirectly callable functions may still cause problems, even if\n    your kernel does not use local memory. Thus best use SYCL pointers\n    like sycl::global\\_ptr`<T>`{=html} and\n    sycl::private\\_ptr`<T>`{=html} in indirectly callable functions to\n    avoid generic address space usage.\n\n-   You can also enforce usage of global pointers using the following\n    DPC++ compile flags:\n    `-cl-intel-force-global-mem-allocation   -cl-intel-no-local-to-generic`.\n\nEmbree Tutorials\n================\n\nEmbree comes with a set of tutorials aimed at helping users understand\nhow Embree can be used and extended. There is a very basic minimal\nthat can be compiled as both C and C++, which should get new users started quickly. \nAll other tutorials exist in an Intel® ISPC and C++ version to demonstrate \nthe two versions of the API. Look for files\nnamed `tutorialname_device.ispc` for the Intel® ISPC implementation of the\ntutorial, and files named `tutorialname_device.cpp` for the single ray C++\nversion of the tutorial. To start the C++ version use the `tutorialname`\nexecutables, to start the Intel® ISPC version use the `tutorialname_ispc`\nexecutables. All tutorials can print available command line options\nusing the `--help` command line parameter.\n\nFor all tutorials except minimal, you can select an initial camera using \nthe `--vp` (camera position), `--vi` (camera look-at point), `--vu` \n(camera up vector), and `--fov` (vertical field of view) command line \nparameters:\n\n    ./triangle_geometry --vp 10 10 10 --vi 0 0 0\n\nYou can select the initial window size using the `--size` command line\nparameter, or start the tutorials in full screen using the `--fullscreen`\nparameter:\n\n    ./triangle_geometry --size 1024 1024\n    ./triangle_geometry --fullscreen\n\nThe initialization string for the Embree device (`rtcNewDevice` call)\ncan be passed to the ray tracing core through the `--rtcore` command\nline parameter, e.g.:\n\n    ./triangle_geometry --rtcore verbose=2,threads=1\n\nThe navigation in the interactive display mode follows the camera orbit\nmodel, where the camera revolves around the current center of interest.\nWith the left mouse button you can rotate around the center of interest\n(the point initially set with `--vi`). Holding Control pressed while\nclicking the left mouse button rotates the camera around its location.\nYou can also use the arrow keys for navigation.\n\nYou can use the following keys:\n\nF1\n:   Default shading\n\nF2\n:   Gray EyeLight shading\n\nF3\n:   Traces occlusion rays only.\n\nF4\n:   UV Coordinate visualization\n\nF5\n:   Geometry normal visualization\n\nF6\n:   Geometry ID visualization\n\nF7\n:   Geometry ID and Primitive ID visualization\n\nF8\n:   Simple shading with 16 rays per pixel for benchmarking.\n\nF9\n:   Switches to render cost visualization. Pressing again reduces\n    brightness.\n\nF10\n:   Switches to render cost visualization. Pressing again increases\n    brightness.\n\nf\n:   Enters or leaves full screen mode.\n\nc\n:   Prints camera parameters.\n\nESC\n:   Exits the tutorial.\n\nq\n:   Exits the tutorial.\n\nMinimal\n-------\n\nThis tutorial is designed to get new users started with Embree.\nIt can be compiled as both C and C++. It demonstrates how to initialize\na device and scene, and how to intersect rays with the scene.\nThere is no image output to keep the tutorial as simple as possible.\n\n[Source Code](https://github.com/embree/embree/blob/master/tutorials/minimal/minimal.cpp)\n\nTriangle Geometry\n-----------------\n\n[![][imgTriangleGeometry]](https://github.com/embree/embree/blob/master/tutorials/triangle_geometry/triangle_geometry_device.cpp)\n\nThis tutorial demonstrates the creation of a static cube and ground\nplane using triangle meshes. It also demonstrates the use of the\n`rtcIntersect1` and `rtcOccluded1` functions to render primary visibility\nand hard shadows. The cube sides are colored based on the ID of the hit\nprimitive.\n\n[Source Code](https://github.com/embree/embree/blob/master/tutorials/triangle_geometry/triangle_geometry_device.cpp)\n\nDynamic Scene\n-------------\n\n[![][imgDynamicScene]](https://github.com/embree/embree/blob/master/tutorials/dynamic_scene/dynamic_scene_device.cpp)\n\nThis tutorial demonstrates the creation of a dynamic scene, consisting\nof several deforming spheres. Half of the spheres use the\n`RTC_BUILD_QUALITY_REFIT` geometry build quality, which allows Embree\nto use a refitting strategy for these spheres, the other half uses the\n`RTC_BUILD_QUALITY_LOW` geometry build quality, causing a high\nperformance rebuild of their spatial data structure each frame. The\nspheres are colored based on the ID of the hit sphere geometry.\n\n[Source Code](https://github.com/embree/embree/blob/master/tutorials/dynamic_scene/dynamic_scene_device.cpp)\n\nMulti Scene Geometry\n-------------\n\n[![][imgDynamicScene]](https://github.com/embree/embree/blob/master/tutorials/multiscene_geometry/multiscene_geometry_device.cpp)\n\nThis tutorial demonstrates the creation of multiple scenes sharing the\nsame geometry objects.  Here, three scenes are built.  One with all\nthe dynamic spheres of the Dynamic Scene test and two others each with\nhalf.  The ground plane is shared by all three scenes.  The space bar\nis used to cycle the scene chosen for rendering.\n\n[Source Code](https://github.com/embree/embree/blob/master/tutorials/multiscene_geometry/multiscene_geometry_device.cpp)\n\nUser Geometry\n-------------\n\n[![][imgUserGeometry]](https://github.com/embree/embree/blob/master/tutorials/user_geometry/user_geometry_device.cpp)\n\nThis tutorial shows the use of user-defined geometry, to re-implement\ninstancing, and to add analytic spheres. A two-level scene is created,\nwith a triangle mesh as ground plane, and several user geometries that\ninstance other scenes with a small number of spheres of different kinds.\nThe spheres are colored using the instance ID and geometry ID of the hit\nsphere, to demonstrate how the same geometry instanced in different\nways can be distinguished.\n\n[Source Code](https://github.com/embree/embree/blob/master/tutorials/user_geometry/user_geometry_device.cpp)\n\nViewer\n------\n\n[![][imgViewer]](https://github.com/embree/embree/blob/master/tutorials/viewer/viewer_device.cpp)\n\nThis tutorial demonstrates a simple OBJ viewer that traces primary\nvisibility rays only. A scene consisting of multiple meshes is created,\neach mesh sharing the index and vertex buffer with the application.\nIt also demonstrates how to support additional per-vertex data, such as\nshading normals.\n\nYou need to specify an OBJ file at the command line for this tutorial to\nwork:\n\n    ./viewer -i model.obj\n\n[Source Code](https://github.com/embree/embree/blob/master/tutorials/viewer/viewer_device.cpp)\n\nIntersection Filter\n-------------------\n\n[![][imgIntersectionFilter]](https://github.com/embree/embree/blob/master/tutorials/intersection_filter/intersection_filter_device.cpp)\n\nThis tutorial demonstrates the use of filter callback functions to\nefficiently implement transparent objects. The filter function used for\nprimary rays lets the ray pass through the geometry if it is entirely\ntransparent. Otherwise, the shading loop handles the transparency\nproperly, by potentially shooting secondary rays. The filter function\nused for shadow rays accumulates the transparency of all surfaces along\nthe ray, and terminates traversal if an opaque occluder is hit.\n\n[Source Code](https://github.com/embree/embree/blob/master/tutorials/intersection_filter/intersection_filter_device.cpp)\n\nInstanced Geometry\n------------------\n\n[![][imgInstancedGeometry]](https://github.com/embree/embree/blob/master/tutorials/instanced_geometry/instanced_geometry_device.cpp)\n\nThis tutorial demonstrates the in-build instancing feature of Embree, by\ninstancing a number of other scenes built from triangulated spheres. The\nspheres are again colored using the instance ID and geometry ID of the\nhit sphere, to demonstrate how the same geometry instanced in different\nways can be distinguished.\n\n[Source Code](https://github.com/embree/embree/blob/master/tutorials/instanced_geometry/instanced_geometry_device.cpp)\n\nInstance Array Geometry\n----------------------\n\n[![][imgForest]](https://github.com/embree/embree/blob/master/tutorials/forest/forest_device.cpp)\n\nThis tutorial demonstrates the usage of instance arrays in Embree. Instance arrays\nare large collections of similar objects. Examples are sand dunes that consist\nof millions of instances of a few grain models or, like here, a forest consisting of\nmany instances of a few tree models.\n\nIn this application can switch between representing the scene with regular\ninstances or (one!) instance array. It also prints several stats, that\ndemonstrate the memory savings and faster BVH build times when using instance\narrays for such scenes. Instance arrays come with a small overhead on CPU and\nshould be preferred if memory consumption is more important than raytracing\nperformance.\n\n[Source Code](https://github.com/embree/embree/blob/master/tutorials/forest/forest_device.cpp)\n\nMulti Level Instancing\n----------------------\n\n[![][imgMultiLevelInstancing]](https://github.com/embree/embree/blob/master/tutorials/multi_instanced_geometry/multi_instanced_geometry_device.cpp)\n\nThis tutorial demonstrates multi-level instancing, i.e., nesting instances\ninto instances. To enable the tutorial, set the compile-time variable\n`EMBREE_MAX_INSTANCE_LEVEL_COUNT` to a value other than the default 1.\nThis variable is available in the code as `RTC_MAX_INSTANCE_LEVEL_COUNT`.\n\nThe renderer uses a basic path tracing approach, and the\nimage will progressively refine over time.\nThere are two levels of instances in this scene: multiple instances of\nthe same tree nest instances of a twig.\nIntersections on up to `RTC_MAX_INSTANCE_LEVEL_COUNT` nested levels of\ninstances work out of the box. Users may obtain the *instance ID stack* for\na given hitpoint from the `instID` member.\nDuring shading, the instance ID stack is used to accumulate\nnormal transformation matrices for each hit. The tutorial visualizes\ntransformed normals as colors.\n\n[Source Code](https://github.com/embree/embree/blob/master/tutorials/multi_instanced_geometry/multi_instanced_geometry_device.cpp)\n\nPath Tracer\n-----------\n\n[![][imgPathtracer]](https://github.com/embree/embree/blob/master/tutorials/pathtracer/pathtracer_device.cpp)\n\nThis tutorial is a simple path tracer, based on the viewer tutorial.\n\nYou need to specify an OBJ file and light source at the command line for\nthis tutorial to work:\n\n    ./pathtracer -i model.obj --ambientlight 1 1 1\n\nAs example models we provide the \"Austrian Imperial Crown\" model by\n[Martin Lubich](http://www.loramel.net) and the \"Asian Dragon\" model from the\n[Stanford 3D Scanning Repository](http://graphics.stanford.edu/data/3Dscanrep/).\n\n[crown.zip](https://github.com/embree/models/releases/download/release/crown.zip)\n\n[asian_dragon.zip](https://github.com/embree/models/releases/download/release/asian_dragon.zip)\n\nTo render these models execute the following:\n\n    ./pathtracer -c crown/crown.ecs\n    ./pathtracer -c asian_dragon/asian_dragon.ecs\n\n[Source Code](https://github.com/embree/embree/blob/master/tutorials/pathtracer/pathtracer_device.cpp)\n\nHair\n----\n\n[![][imgHairGeometry]](https://github.com/embree/embree/blob/master/tutorials/hair_geometry/hair_geometry_device.cpp)\n\nThis tutorial demonstrates the use of the hair geometry to render a\nhairball.\n\n[Source Code](https://github.com/embree/embree/blob/master/tutorials/hair_geometry/hair_geometry_device.cpp)\n\nCurve Geometry\n--------------\n\n[![][imgCurveGeometry]](https://github.com/embree/embree/blob/master/tutorials/curve_geometry/curve_geometry_device.cpp)\n\nThis tutorial demonstrates the use of the Linear Basis, B-Spline, and Catmull-Rom curve geometries.\n\n[Source Code](https://github.com/embree/embree/blob/master/tutorials/curve_geometry/curve_geometry_device.cpp)\n\nSubdivision Geometry\n--------------------\n\n[![][imgSubdivisionGeometry]](https://github.com/embree/embree/blob/master/tutorials/subdivision_geometry/subdivision_geometry_device.cpp)\n\nThis tutorial demonstrates the use of Catmull-Clark subdivision\nsurfaces.\n\n[Source Code](https://github.com/embree/embree/blob/master/tutorials/subdivision_geometry/subdivision_geometry_device.cpp)\n\nDisplacement Geometry\n---------------------\n\n[![][imgDisplacementGeometry]](https://github.com/embree/embree/blob/master/tutorials/displacement_geometry/displacement_geometry_device.cpp)\n\nThis tutorial demonstrates the use of Catmull-Clark subdivision\nsurfaces with procedural displacement mapping using a constant edge\ntessellation level.\n\n[Source Code](https://github.com/embree/embree/blob/master/tutorials/displacement_geometry/displacement_geometry_device.cpp)\n\nGrid Geometry\n---------------------\n\n[![][imgGridGeometry]](https://github.com/embree/embree/tree/master/tutorials/grid_geometry)\n\nThis tutorial demonstrates the use of the memory efficient grid\nprimitive to handle highly tessellated and displaced geometry.\n\n[Source Code](https://github.com/embree/embree/tree/master/tutorials/grid_geometry)\n\nPoint Geometry\n---------------------\n\n[![][imgPointGeometry]](https://github.com/embree/embree/blob/master/tutorials/point_geometry/point_geometry_device.cpp)\n\nThis tutorial demonstrates the use of the three representations\nof point geometry.\n\n[Source Code](https://github.com/embree/embree/blob/master/tutorials/point_geometry/point_geometry_device.cpp)\n\nMotion Blur Geometry\n--------------------\n\n[![][imgMotionBlurGeometry]](https://github.com/embree/embree/blob/master/tutorials/motion_blur_geometry/motion_blur_geometry_device.cpp)\n\nThis tutorial demonstrates rendering of motion blur using the\nmulti-segment motion blur feature. Shown is motion blur of a triangle mesh,\nquad mesh, subdivision surface, line segments, hair geometry, Bézier\ncurves, instantiated triangle mesh where the instance moves,\ninstantiated quad mesh where the instance and the quads move, and user\ngeometry.\n\nThe number of time steps used can be configured using the `--time-steps\n<int>` and `--time-steps2 <int>` command line parameters, and the\ngeometry can be rendered at a specific time using the the `--time\n<float>` command line parameter.\n\n[Source Code](https://github.com/embree/embree/blob/master/tutorials/motion_blur_geometry/motion_blur_geometry_device.cpp)\n\nQuaternion Motion Blur\n----------------------\n\n[![][imgQuaternionMotionBlur]](https://github.com/embree/embree/blob/master/tutorials/quaternion_motion_blur/quaternion_motion_blur_device.cpp)\n\nThis tutorial demonstrates rendering of motion blur using quaternion\ninterpolation. Shown is motion blur using spherical linear interpolation of\nthe rotational component of the instance transformation on the left and\nsimple linear interpolation of the instance transformation on the right. The\nnumber of time steps can be modified as well.\n\n[Source Code](https://github.com/embree/embree/blob/master/tutorials/quaternion_motion_blur/quaternion_motion_blur_device.cpp)\n\nInterpolation\n-------------\n\n[![][imgInterpolation]](https://github.com/embree/embree/blob/master/tutorials/interpolation/interpolation_device.cpp)\n\nThis tutorial demonstrates interpolation of user-defined per-vertex data.\n\n[Source Code](https://github.com/embree/embree/blob/master/tutorials/interpolation/interpolation_device.cpp)\n\nClosest Point\n----------------------\n\n[![][imgClosestPoint]](https://github.com/embree/embree/blob/master/tutorials/closest_point/closest_point_device.cpp)\n\nThis tutorial demonstrates a use-case of the point query API. The scene\nconsists of a simple collection of objects that are instanced and for several\npoint in the scene (red points) the closest point on the surfaces of the\nscene are computed (white points). The closest point functionality is\nimplemented for Embree internal and for user-defined instancing. The tutorial\nalso illustrates how to handle instance transformations that are not\nsimilarity transforms.\n\n[Source Code](https://github.com/embree/embree/blob/master/tutorials/closest_point/closest_point_device.cpp)\n\nVoronoi\n----------------------\n\n[![][imgVoronoi]](https://github.com/embree/embree/blob/master/tutorials/voronoi/voronoi_device.cpp)\n\nThis tutorial demonstrates how to implement nearest neighbour lookups using\nthe point query API. Several colored points are located on a plane and the\ncorresponding voroni regions are illustrated.\n\n[Source Code](https://github.com/embree/embree/blob/master/tutorials/voronoi/voronoi_device.cpp)\n\nCollision Detection\n----------------------\n\n[![][imgCollision]](https://github.com/embree/embree/blob/master/tutorials/collide/collide_device.cpp)\n\nThis tutorial demonstrates how to implement collision detection using\nthe collide API. A simple cloth solver is setup to collide with a sphere.\n\nThe cloth can be reset with the `space` bar.  The sim stepped once with `n` \nand continuous simulation started and paused with `p`.\n\n[Source Code](https://github.com/embree/embree/blob/master/tutorials/collide/collide_device.cpp)\n\nBVH Builder\n-----------\n\nThis tutorial demonstrates how to use the templated hierarchy builders\nof Embree to build a bounding volume hierarchy with a user-defined\nmemory layout using a high-quality SAH builder using spatial splits, a\nstandard SAH builder, and a very fast Morton builder.\n\n[Source Code](https://github.com/embree/embree/blob/master/tutorials/bvh_builder/bvh_builder_device.cpp)\n\nBVH Access\n-----------\n\nThis tutorial demonstrates how to access the internal triangle\nacceleration structure build by Embree. Please be aware that the\ninternal Embree data structures might change between Embree updates.\n\n[Source Code](https://github.com/embree/embree/blob/master/tutorials/bvh_access/bvh_access.cpp)\n\nFind Embree\n-----------\n\nThis tutorial demonstrates how to use the `FIND_PACKAGE` CMake feature\nto use an installed Embree. Under Linux and macOS the tutorial finds\nthe Embree installation automatically, under Windows the `embree_DIR`\nCMake variable must be set to the following folder of the Embree\ninstallation: `C:\\Program Files\\Intel\\Embree3`.\n\n[Source Code](https://github.com/embree/embree/blob/master/tutorials/find_embree/CMakeLists.txt)\n\nNext Hit\n-----------\n\nThis tutorial demonstrates how to robustly enumerate all hits along\nthe ray using multiple ray queries and an intersection filter\nfunction. To improve performance, the tutorial also supports\ncollecting the next N hits in a single ray query.\n\n[Source Code](https://github.com/embree/embree/blob/master/tutorials/next_hit/next_hit_device.cpp)\n\n\n\n[Embree API]: #embree-api\n[Embree Tutorials]: #embree-tutorials\n[Ray Layout]: #ray-layout\n[Extending the Ray Structure]: #extending-the-ray-structure\n[Embree Example Renderer]: https://embree.github.io/renderer.html\n[Triangle Geometry]: #triangle-geometry\n[Stream Viewer]: #stream-viewer\n[User Geometry]: #user-geometry\n[Instanced Geometry]: #instanced-geometry\n[Instance Array Geometry]: #instance-array-geometry\n[Multi Level Instancing]: #multi-level-instancing\n[Intersection Filter]: #intersection-filter\n[Hair]: #hair\n[Curves]: #bézier-curves\n[Subdivision Geometry]: #subdivision-geometry\n[Displacement Geometry]: #displacement-geometry\n[Quaternion Motion Blur]: #quaternion-motion-blur\n[BVH Builder]: #bvh-builder\n[Interpolation]: #interpolation\n[Closest Point]: #closest-point\n[Voronoi]: #voronoi\n[imgHalfEdges]: https://embree.github.io/images/half_edges.png\n[imgTriangleUV]: https://embree.github.io/images/triangle_uv.png\n[imgQuadUV]: https://embree.github.io/images/quad_uv.png\n[imgTriangleGeometry]: https://embree.github.io/images/triangle_geometry.jpg\n[imgDynamicScene]: https://embree.github.io/images/dynamic_scene.jpg\n[imgUserGeometry]: https://embree.github.io/images/user_geometry.jpg\n[imgViewer]: https://embree.github.io/images/viewer.jpg\n[imgInstancedGeometry]: https://embree.github.io/images/instanced_geometry.jpg\n[imgForest]: https://embree.github.io/images/forest.jpg\n[imgMultiLevelInstancing]: https://embree.github.io/images/multi_level_instancing.jpg\n[imgIntersectionFilter]: https://embree.github.io/images/intersection_filter.jpg\n[imgPathtracer]: https://embree.github.io/images/pathtracer.jpg\n[imgHairGeometry]: https://embree.github.io/images/hair_geometry.jpg\n[imgCurveGeometry]: https://embree.github.io/images/curve_geometry.jpg\n[imgSubdivisionGeometry]: https://embree.github.io/images/subdivision_geometry.jpg\n[imgDisplacementGeometry]: https://embree.github.io/images/displacement_geometry.jpg\n[imgGridGeometry]: https://embree.github.io/images/grid_geometry.jpg\n[imgPointGeometry]: https://embree.github.io/images/point_geometry.jpg\n[imgMotionBlurGeometry]: https://embree.github.io/images/motion_blur_geometry.jpg\n[imgQuaternionMotionBlur]: https://embree.github.io/images/quaternion_motion_blur.jpg\n[imgInterpolation]: https://embree.github.io/images/interpolation.jpg\n[imgClosestPoint]: https://embree.github.io/images/closest_point.jpg\n[imgVoronoi]: https://embree.github.io/images/voronoi.jpg\n[imgCollision]: https://embree.github.io/images/collide.jpg\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.5078125,
          "content": "Security Policy\n===============\n\nIntel is committed to rapidly addressing security vulnerabilities\naffecting our customers and providing clear guidance on the solution,\nimpact, severity and mitigation.\n\nReporting a Vulnerability\n-------------------------\n\nPlease [report any security vulnerabilities][guidelines] in this project\nutilizing the [guidelines here][guidelines].\n\n[guidelines]: https://www.intel.com/content/www/us/en/security-center/vulnerability-handling-guidelines.html \"Vulnerability Handling Guidelines\"\n"
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "kernels",
          "type": "tree",
          "content": null
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "readme.pdf",
          "type": "blob",
          "size": 2706.099609375,
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0166015625,
          "content": "numpy\nsympy\nmath\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "third-party-programs-DPCPP.txt",
          "type": "blob",
          "size": 5.865234375,
          "content": "\nThe oneAPI DPC++ Compiler can be found here:\n\n  https://github.com/intel/llvm\n\nIt uses various components with following licenses:\n\n  https://github.com/intel/llvm/blob/master/flang/LICENSE.TXT\n  https://github.com/intel/llvm/blob/master/compiler-rt/LICENSE.TXT\n  https://github.com/intel/llvm/blob/master/mlir/LICENSE.TXT\n  https://github.com/intel/llvm/blob/master/libclc/LICENSE.TXT\n  https://github.com/intel/llvm/blob/master/libcxxabi/LICENSE.TXT\n  https://github.com/intel/llvm/blob/master/lld/LICENSE.TXT\n  https://github.com/intel/llvm/blob/master/cross-project-tests/debuginfo-tests/dexter/LICENSE.txt\n  https://github.com/intel/llvm/blob/master/libc/LICENSE.TXT\n  https://github.com/intel/llvm/blob/master/clang-tools-extra/LICENSE.TXT\n  https://github.com/intel/llvm/blob/master/clang-tools-extra/clang-tidy/cert/LICENSE.TXT\n  https://github.com/intel/llvm/blob/master/clang-tools-extra/clang-tidy/hicpp/LICENSE.TXT\n  https://github.com/intel/llvm/blob/master/lldb/LICENSE.TXT\n  https://github.com/intel/llvm/blob/master/lldb/third_party/Python/module/ptyprocess-0.6.0/LICENSE\n  https://github.com/intel/llvm/blob/master/lldb/third_party/Python/module/six/LICENSE\n  https://github.com/intel/llvm/blob/master/lldb/third_party/Python/module/pexpect-4.6/LICENSE\n  https://github.com/intel/llvm/blob/master/polly/LICENSE.TXT\n  https://github.com/intel/llvm/blob/master/polly/lib/External/isl/LICENSE\n  https://github.com/intel/llvm/blob/master/polly/lib/External/isl/imath/LICENSE\n  https://github.com/intel/llvm/blob/master/polly/tools/GPURuntime/LICENSE.TXT\n  https://github.com/intel/llvm/blob/master/sycl/LICENSE.TXT\n  https://github.com/intel/llvm/blob/master/llvm-spirv/LICENSE.TXT\n  https://github.com/intel/llvm/blob/master/bolt/LICENSE.TXT\n  https://github.com/intel/llvm/blob/master/pstl/LICENSE.TXT\n  https://github.com/intel/llvm/blob/master/clang/LICENSE.TXT\n  https://github.com/intel/llvm/blob/master/llvm/utils/lit/LICENSE.TXT\n  https://github.com/intel/llvm/blob/master/llvm/utils/unittest/googletest/LICENSE.TXT\n  https://github.com/intel/llvm/blob/master/llvm/utils/unittest/googlemock/LICENSE.txt\n  https://github.com/intel/llvm/blob/master/llvm/LICENSE.TXT\n  https://github.com/intel/llvm/blob/master/llvm/include/llvm/Support/LICENSE.TXT\n  https://github.com/intel/llvm/blob/master/llvm/lib/Support/BLAKE3/LICENSE\n  https://github.com/intel/llvm/blob/master/llvm/test/YAMLParser/LICENSE.txt\n  https://github.com/intel/llvm/blob/master/libunwind/LICENSE.TXT\n  https://github.com/intel/llvm/blob/master/openmp/LICENSE.TXT\n  https://github.com/intel/llvm/blob/master/openmp/runtime/src/thirdparty/ittnotify/LICENSE.txt\n  https://github.com/intel/llvm/blob/master/third-party/benchmark/LICENSE\n  https://github.com/intel/llvm/blob/master/libcxx/LICENSE.TXT\n\nThe following people and companies contributed to the LLVM project:\n\n  https://github.com/intel/llvm/blob/master/compiler-rt/CREDITS.TXT\n  https://github.com/intel/llvm/blob/master/libclc/CREDITS.TXT\n  https://github.com/intel/llvm/blob/master/libcxxabi/CREDITS.TXT\n  https://github.com/intel/llvm/blob/master/polly/CREDITS.txt\n  https://github.com/intel/llvm/blob/master/pstl/CREDITS.txt\n  https://github.com/intel/llvm/blob/master/llvm/CREDITS.TXT\n  https://github.com/intel/llvm/blob/master/openmp/CREDITS.txt\n  https://github.com/intel/llvm/blob/master/libcxx/CREDITS.TXT\n\n==============================================================================\nSoftware from third parties included in the LLVM Project:\n==============================================================================\nThe LLVM Project contains third party software which is under different license\nterms. All such code will be identified clearly using at least one of two\nmechanisms:\n1) It will be in a separate directory tree with its own `LICENSE.txt` or\n   `LICENSE` file at the top containing the specific license and restrictions\n   which apply to that software, or\n2) It will contain specific license and restriction terms at the top of every\n   file.\n\n==============================================================================\nLegacy LLVM License (https://llvm.org/docs/DeveloperPolicy.html#legacy):\n==============================================================================\nUniversity of Illinois/NCSA\nOpen Source License\n\nCopyright (c) 2003-2020 University of Illinois at Urbana-Champaign.\nAll rights reserved.\n\nDeveloped by:\n\n    LLVM Team\n\n    University of Illinois at Urbana-Champaign\n\n    http://llvm.org\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal with\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\n    * Redistributions of source code must retain the above copyright notice,\n      this list of conditions and the following disclaimers.\n\n    * Redistributions in binary form must reproduce the above copyright notice,\n      this list of conditions and the following disclaimers in the\n      documentation and/or other materials provided with the distribution.\n\n    * Neither the names of the LLVM Team, University of Illinois at\n      Urbana-Champaign, nor the names of its contributors may be used to\n      endorse or promote products derived from this Software without specific\n      prior written permission.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nCONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE\nSOFTWARE.\n"
        },
        {
          "name": "third-party-programs-OIDN.txt",
          "type": "blob",
          "size": 18.5791015625,
          "content": "Intel(R) Open Image Denoise Third Party Programs File\n\nThis file contains the list of third party software (\"third party programs\")\ncontained in the Intel software and their required notices and/or license\nterms. This third party software, even if included with the distribution of the\nIntel software, may be governed by separate license terms, including without\nlimitation, third party license terms, other Intel software license terms, and\nopen source software license terms. These separate license terms govern your use\nof the third party programs as set forth in the \"third-party-programs.txt\" or\nother similarly named text file.\n \nThird party programs and their corresponding required notices and/or license\nterms are listed below.\n\n--------------------------------------------------------------------------------\n\n1.  Intel(R) oneAPI Deep Neural Network Library (oneDNN)\n    Copyright 2016-2021 Intel Corporation\n\n    Intel(R) oneAPI Threading Building Blocks (oneTBB)\n    Copyright 2005-2021 Intel Corporation\n\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n--------------------------------------------------------------------------------\n\n2.  PyTorch\n\n    From PyTorch:\n\n    Copyright (c) 2016-     Facebook, Inc            (Adam Paszke)\n    Copyright (c) 2014-     Facebook, Inc            (Soumith Chintala)\n    Copyright (c) 2011-2014 Idiap Research Institute (Ronan Collobert)\n    Copyright (c) 2012-2014 Deepmind Technologies    (Koray Kavukcuoglu)\n    Copyright (c) 2011-2012 NEC Laboratories America (Koray Kavukcuoglu)\n    Copyright (c) 2011-2013 NYU                      (Clement Farabet)\n    Copyright (c) 2006-2010 NEC Laboratories America (Ronan Collobert, Leon Bottou, Iain Melvin, Jason Weston)\n    Copyright (c) 2006      Idiap Research Institute (Samy Bengio)\n    Copyright (c) 2001-2004 Idiap Research Institute (Ronan Collobert, Samy Bengio, Johnny Mariethoz)\n\n    From Caffe2:\n\n    Copyright (c) 2016-present, Facebook Inc. All rights reserved.\n\n    All contributions by Facebook:\n    Copyright (c) 2016 Facebook Inc.\n    \n    All contributions by Google:\n    Copyright (c) 2015 Google Inc.\n    All rights reserved.\n    \n    All contributions by Yangqing Jia:\n    Copyright (c) 2015 Yangqing Jia\n    All rights reserved.\n    \n    All contributions from Caffe:\n    Copyright(c) 2013, 2014, 2015, the respective contributors\n    All rights reserved.\n    \n    All other contributions:\n    Copyright(c) 2015, 2016 the respective contributors\n    All rights reserved.\n    \n    Caffe2 uses a copyright model similar to Caffe: each contributor holds\n    copyright over their contributions to Caffe2. The project versioning records\n    all such contribution and copyright details. If a contributor wants to further\n    mark their specific copyright on a particular contribution, they should\n    indicate their copyright solely in the commit message of the change when it is\n    committed.\n\n    All rights reserved.\n\nThe 3-Clause BSD License (customized)\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n\n3. Neither the names of Facebook, Deepmind Technologies, NYU, NEC Laboratories America\n   and IDIAP Research Institute nor the names of its contributors may be\n   used to endorse or promote products derived from this software without\n   specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n\n--------------------------------------------------------------------------------\n\n3.  pytorch-msssim\n    Copyright (c) 2019 Vainn\n   \nMIT License\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n--------------------------------------------------------------------------------\n\n4.  Catch2\n    Copyright (c) 2021 Two Blue Cubes Ltd. All rights reserved.\n\nBoost Software License - Version 1.0 - August 17th, 2003\n\nPermission is hereby granted, free of charge, to any person or organization\nobtaining a copy of the software and accompanying documentation covered by\nthis license (the \"Software\") to use, reproduce, display, distribute,\nexecute, and transmit the Software, and to prepare derivative works of the\nSoftware, and to permit third-parties to whom the Software is furnished to\ndo so, all subject to the following:\n\nThe copyright notices in the Software and this entire statement, including\nthe above license grant, this restriction and the following disclaimer,\nmust be included in all copies of the Software, in whole or in part, and\nall derivative works of the Software, unless such copies or derivative\nworks are solely in the form of machine-executable object code generated by\na source language processor.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\nSHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\nFOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n\n--------------------------------------------------------------------------------\n\nThe following third party programs have their own third party programs. These\nadditional third party program files are as follows:\n\n1.  Intel(R) oneAPI Deep Neural Network Library (oneDNN)\n      ./third-party-programs-oneDNN.txt\n\n2.  Intel(R) oneAPI Threading Building Blocks (oneTBB)\n      ./third-party-programs-oneTBB.txt\n\n--------------------------------------------------------------------------------\n\nOther names and brands may be claimed as the property of others."
        },
        {
          "name": "third-party-programs-TBB.txt",
          "type": "blob",
          "size": 45.8779296875,
          "content": "oneAPI Threading Building Blocks (oneTBB) Third Party Programs File\n\nThis file contains the list of third party software (\"third party programs\")\ncontained in the Intel software and their required notices and/or license terms.\nThis third party software, even if included with the distribution of the Intel\nsoftware, may be governed by separate license terms, including without limitation,\nthird party license terms, other Intel software license terms, and open source\nsoftware license terms. These separate license terms govern your use of the third\nparty programs as set forth in the \"third-party-programs.txt\" or other similarlynamed text file.\n\nThe third party programs and their corresponding required notices and/or license\nterms are listed below.\n_______________________________________________________________________________________________________\n\n1.  Intel(R) Instrumentation and Tracing Technology (ITT)\n    Copyright (c) 2019 Intel Corporation. All rights reserved.\n\n    Redistribution and use in source and binary forms, with or without modification, \n    are permitted provided that the following conditions are met:\n\n    1. Redistributions of source code must retain the above copyright\n       notice, this list of conditions and the following disclaimer.\n    2. Redistributions in binary form must reproduce the above copyright\n       notice, this list of conditions and the following disclaimer in the\n       documentation and/or other materials provided with the distribution.\n    3. Neither the name of the copyright holder nor the names of its contributors may be\n       used to endorse or promote products derived from this software\n       without specific prior written permission.\n    \n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n    ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n    OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n    HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n    OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n_______________________________________________________________________________________________________\n\n2.  ActiveState Thread pool with same API as (multi)  processing.Pool (Python recipe):\n    Copyright (c) 2008,2016 david decotigny (this file)\n    Copyright (c) 2006-2008, R Oudkerk (multiprocessing.Pool)\n\n    Portable Hardware Locality (hwloc) \n    Copyright (c) 2004-2006 The Trustees of Indiana University and Indiana University Research and Technology Corporation.  All rights reserved.\n    Copyright (c) 2004-2005 The University of Tennessee and The University of Tennessee Research Foundation.  All rights reserved.\n    Copyright (c) 2004-2005 High Performance Computing Center Stuttgart, University of Stuttgart.  All rights reserved.\n    Copyright (c) 2004-2005 The Regents of the University of California. All rights reserved.\n    Copyright (c) 2009      CNRS\n    Copyright (c) 2009-2016 Inria.  All rights reserved.\n    Copyright (c) 2009-2015 Université Bordeaux\n    Copyright (c) 2009-2015 Cisco Systems, Inc.  All rights reserved.\n    Copyright (c) 2009-2012 Oracle and/or its affiliates.  All rights reserved.\n    Copyright (c) 2010      IBM\n    Copyright (c) 2010      Jirka Hladky\n    Copyright (c) 2012      Aleksej Saushev, The NetBSD Foundation\n    Copyright (c) 2012      Blue Brain Project, EPFL. All rights reserved.\n    Copyright (c) 2013-2014 University of Wisconsin-La Crosse. All rights reserved.\n    Copyright (c) 2015      Research Organization for Information Science and Technology (RIST). All rights reserved.\n    Copyright (c) 2015-2016 Intel, Inc.  All rights reserved.\n\n    BSD 3-clause \"New\" or \"Revised\" License\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n    1. Redistributions of source code must retain the above copyright\n       notice, this list of conditions and the following disclaimer.\n    2. Redistributions in binary form must reproduce the above copyright\n       notice, this list of conditions and the following disclaimer in the\n       documentation and/or other materials provided with the distribution.\n    3. Neither the name of author nor the names of any contributors may be\n       used to endorse or promote products derived from this software\n       without specific prior written permission.\n\n    THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS \"AS IS\" AND\n    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n    ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\n    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n    OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n    HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n    OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n_______________________________________________________________________________________________________\n\n3.  gperftools: Copyright (c) 2011, Google Inc.\n\n    Tachyon: Copyright (c) 1994-2008 John E. Stone. All rights reserved.\n\n    BSD 3-Clause \"New\" or \"Revised\" License\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions are\n    met:\n\n        * Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n        * Redistributions in binary form must reproduce the above\n    copyright notice, this list of conditions and the following disclaimer\n    in the documentation and/or other materials provided with the\n    distribution.\n        * Neither the name of Google Inc. nor the names of its\n    contributors may be used to endorse or promote products derived from\n    this software without specific prior written permission.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n    \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n    A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n    OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n_______________________________________________________________________________________________________\n\n4.  Mateusz Kwiatkowski Workaround for bug 62258 in libstdc++\n\n    GPL 3.0 with GCC Runtime Library Exception 3.1\n\n\tGNU GENERAL PUBLIC LICENSE\n\n\tVersion 3, 29 June 2007\n\n\tCopyright (c) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n\n\tEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\n\n\tPreamble\n\tThe GNU General Public License is a free, copyleft license for software and other kinds of works.\n\n\tThe licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too.\n\n\tWhen we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.\n\n\tTo protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others.\n\n\tFor example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.\n\n\tDevelopers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it.\n\n\tFor the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions.\n\n\tSome devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users.\n\n\tFinally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free.\n\n\tThe precise terms and conditions for copying, distribution and modification follow.\n\n\tTERMS AND CONDITIONS\n\t0. Definitions.\n\t\"This License\" refers to version 3 of the GNU General Public License.\n\n\t\"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.\n\n\t\"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations.\n\n\tTo \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work.\n\n\tA \"covered work\" means either the unmodified Program or a work based on the Program.\n\n\tTo \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.\n\n\tTo \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.\n\n\tAn interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.\n\n\t1. Source Code.\n\tThe \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work.\n\n\tA \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.\n\n\tThe \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.\n\n\tThe \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.\n\n\tThe Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.\n\n\tThe Corresponding Source for a work in source code form is that same work.\n\n\t2. Basic Permissions.\n\tAll rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.\n\n\tYou may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.\n\n\tConveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.\n\n\t3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\tNo covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.\n\n\tWhen you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.\n\n\t4. Conveying Verbatim Copies.\n\tYou may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.\n\n\tYou may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.\n\n\t5. Conveying Modified Source Versions.\n\tYou may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:\n\n\ta) The work must carry prominent notices stating that you modified it, and giving a relevant date.\n\tb) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\".\n\tc) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it.\n\td) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so.\n\tA compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.\n\n\t6. Conveying Non-Source Forms.\n\tYou may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:\n\n\ta) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange.\n\tb) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge.\n\tc) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b.\n\td) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements.\n\te) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d.\n\tA separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.\n\n\tA \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.\n\n\t\"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.\n\n\tIf you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).\n\n\tThe requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.\n\n\tCorresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.\n\n\t7. Additional Terms.\n\t\"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.\n\n\tWhen you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.\n\n\tNotwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:\n\n\ta) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or\n\tb) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or\n\tc) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or\n\td) Limiting the use for publicity purposes of names of licensors or authors of the material; or\n\te) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or\n\tf) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors.\n\tAll other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.\n\n\tIf you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.\n\n\tAdditional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.\n\n\t8. Termination.\n\tYou may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).\n\n\tHowever, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.\n\n\tMoreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.\n\n\tTermination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.\n\n\t9. Acceptance Not Required for Having Copies.\n\tYou are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.\n\n\t10. Automatic Licensing of Downstream Recipients.\n\tEach time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License.\n\n\tAn \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.\n\n\tYou may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.\n\n\t11. Patents.\n\tA \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\".\n\n\tA contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.\n\n\tEach contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.\n\n\tIn the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.\n\n\tIf you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.\n\n\tIf, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.\n\n\tA patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.\n\n\tNothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.\n\n\t12. No Surrender of Others' Freedom.\n\tIf conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.\n\n\t13. Use with the GNU Affero General Public License.\n\tNotwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.\n\n\t14. Revised Versions of this License.\n\tThe Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\n\n\tEach version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation.\n\n\tIf the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.\n\n\tLater license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.\n\n\t15. Disclaimer of Warranty.\n\tTHERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n\t16. Limitation of Liability.\n\tIN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\n\t17. Interpretation of Sections 15 and 16.\n\tIf the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.\n\n\tEND OF TERMS AND CONDITIONS\n\n\tHow to Apply These Terms to Your New Programs\n\tIf you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.\n\n\tTo do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.\n\n\t\t<one line to give the program's name and a brief idea of what it does.>\n\t\tCopyright (C) <year>  <name of author>\n\n\t\tThis program is free software: you can redistribute it and/or modify\n\t\tit under the terms of the GNU General Public License as published by\n\t\tthe Free Software Foundation, either version 3 of the License, or\n\t\t(at your option) any later version.\n\n\t\tThis program is distributed in the hope that it will be useful,\n\t\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\t\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\t\tGNU General Public License for more details.\n\n\t\tYou should have received a copy of the GNU General Public License\n\t\talong with this program.  If not, see <https://www.gnu.org/licenses/>.\n\tAlso add information on how to contact you by electronic and paper mail.\n\n\tIf the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode:\n\n\t\t<program>  Copyright (C) <year>  <name of author>\n\t\tThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n\t\tThis is free software, and you are welcome to redistribute it\n\t\tunder certain conditions; type `show c' for details.\n\tThe hypothetical commands `show w' and `show c' should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\".\n\n\tYou should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see <https://www.gnu.org/licenses/>.\n\n\tThe GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read <https://www.gnu.org/licenses/why-not-lgpl.html>.\n\n\n\tGCC RUNTIME LIBRARY EXCEPTION\n\n\tVersion 3.1, 31 March 2009\n\n\tCopyright (c) 2009 Free Software Foundation, Inc. <https://fsf.org/>\n\n\tEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\n\n\tThis GCC Runtime Library Exception (\"Exception\") is an additional permission under section 7 of the GNU General Public License, version 3 (\"GPLv3\"). It applies to a given file (the \"Runtime Library\") that bears a notice placed by the copyright holder of the file stating that the file is governed by GPLv3 along with this Exception.\n\n\tWhen you use GCC to compile a program, GCC may combine portions of certain GCC header files and runtime libraries with the compiled program. The purpose of this Exception is to allow compilation of non-GPL (including proprietary) programs to use, in this way, the header files and runtime libraries covered by this Exception.\n\n\t0. Definitions.\n\tA file is an \"Independent Module\" if it either requires the Runtime Library for execution after a Compilation Process, or makes use of an interface provided by the Runtime Library, but is not otherwise based on the Runtime Library.\n\n\t\"GCC\" means a version of the GNU Compiler Collection, with or without modifications, governed by version 3 (or a specified later version) of the GNU General Public License (GPL) with the option of using any subsequent versions published by the FSF.\n\n\t\"GPL-compatible Software\" is software whose conditions of propagation, modification and use would permit combination with GCC in accord with the license of GCC.\n\n\t\"Target Code\" refers to output from any compiler for a real or virtual target processor architecture, in executable form or suitable for input to an assembler, loader, linker and/or execution phase. Notwithstanding that, Target Code does not include data in any format that is used as a compiler intermediate representation, or used for producing a compiler intermediate representation.\n\n\tThe \"Compilation Process\" transforms code entirely represented in non-intermediate languages designed for human-written code, and/or in Java Virtual Machine byte code, into Target Code. Thus, for example, use of source code generators and preprocessors need not be considered part of the Compilation Process, since the Compilation Process can be understood as starting with the output of the generators or preprocessors.\n\n\tA Compilation Process is \"Eligible\" if it is done using GCC, alone or with other GPL-compatible software, or if it is done without using any work based on GCC. For example, using non-GPL-compatible Software to optimize any GCC intermediate representations would not qualify as an Eligible Compilation Process.\n\n\t1. Grant of Additional Permission.\n\tYou have permission to propagate a work of Target Code formed by combining the Runtime Library with Independent Modules, even if such propagation would otherwise violate the terms of GPLv3, provided that all Target Code was generated by Eligible Compilation Processes. You may then convey such a combination under terms of your choice, consistent with the licensing of the Independent Modules.\n\n\t2. No Weakening of GCC Copyleft.\n\tThe availability of this Exception does not imply any general presumption that third-party software is unaffected by the copyleft requirements of the license of GCC.\n\n_______________________________________________________________________________________________________\n\n5.  Doctest\n\n    Copyright (c) 2016-2019 Viktor Kirilov\n\n    The MIT License (MIT)\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n_______________________________________________________________________________________________________\n\n*Other names and brands may be claimed as the property of others.\n"
        },
        {
          "name": "third-party-programs-oneAPI-DPCPP.txt",
          "type": "blob",
          "size": 69.0078125,
          "content": "Intel(R) 2023.0 oneAPI DPC++/C++/Fortran Compiler Third Party Programs File\n\nThis file is the \"third-party-programs.txt\" file specified in the associated Intel end user license agreement for the Intel software you are licensing. \n\nThird party programs and their corresponding required notices and/or license terms are listed below.\n\n-----------------------------------------------------------------\n\n1. Khronos Group - OpenCL header\n   Copyright (c) 2008-2020 The Khronos Group Inc.\n\n   Khronos OpenCL ICD Loader\n   Copyright (c) 2020 The Khronos Group Inc.\n\n   Threading Building Blocks\n   Copyright 2020 Intel Corporation\n\n   Mentor Graphics Algorithmic C Types\n   Copyright 2008-2016, Mentor Graphics Corporation\n\nApache License\nVersion 2.0, January 2004\n\nhttp://www.apache.org/licenses/\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n\"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.\n\n\"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.\n\n\"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License.\n\n\"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.\n\n\"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.\n\n\"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).\n\n\"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.\n\n\"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\"\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:\n\nYou must give any other recipients of the Work or Derivative Works a copy of this License; and\n\nYou must cause any modified files to carry prominent notices stating that You changed the files; and\n\nYou must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and\n\nIf the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.\nYou may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.\n5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\n-----------------------------------------------------------------\n2. Khronos Group - SPIRV-LLVM-Translator\n\n==============================================================================\nLLVM Release License\n==============================================================================\nUniversity of Illinois/NCSA\nOpen Source License\n \nCopyright (c) 2003-2014 University of Illinois at Urbana-Champaign.\nAll rights reserved.\n \nDeveloped by:\n \n    LLVM Team\n \n    University of Illinois at Urbana-Champaign\n \n    http://llvm.org\n \nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal with\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n \n    * Redistributions of source code must retain the above copyright notice,\n      this list of conditions and the following disclaimers.\n \n    * Redistributions in binary form must reproduce the above copyright notice,\n      this list of conditions and the following disclaimers in the\n      documentation and/or other materials provided with the distribution.\n \n    * Neither the names of the LLVM Team, University of Illinois at\n      Urbana-Champaign, nor the names of its contributors may be used to\n      endorse or promote products derived from this Software without specific\n      prior written permission.\n \nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nCONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE\nSOFTWARE.\n \n==============================================================================\nCopyrights and Licenses for Third Party Software Distributed with LLVM:\n==============================================================================\nThe LLVM software contains code written by third parties.  Such software will\nhave its own individual LICENSE.TXT file in the directory in which it appears.\nThis file will describe the copyrights, license, and restrictions which apply\nto that code.\n \nThe disclaimer of warranty in the University of Illinois Open Source License\napplies to all code in the LLVM Distribution, and nothing in any of the\nother licenses gives permission to use the names of the LLVM Team or the\nUniversity of Illinois to endorse or promote products derived from this\nSoftware.\n \nThe following pieces of software have additional or alternate copyrights,\nlicenses, and/or restrictions:\n \nProgram             Directory\n-------             ---------\nAutoconf            llvm/autoconf\n                    llvm/projects/ModuleMaker/autoconf\nGoogle Test         llvm/utils/unittest/googletest\nOpenBSD regex       llvm/lib/Support/{reg*, COPYRIGHT.regex}\npyyaml tests        llvm/test/YAMLParser/{*.data, LICENSE.TXT}\nARM contributions   llvm/lib/Target/ARM/LICENSE.TXT\nmd5 contributions   llvm/lib/Support/MD5.cpp llvm/include/llvm/Support/MD5.h\n\n-----------------------------------------------------------------\n\n3. llvm-project llvm-project\n\n==============================================================================\nThe LLVM Project is under the Apache License v2.0 with LLVM Exceptions:\n==============================================================================\n\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n    TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n    1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n    2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n    3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n    4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n    5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n    6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n    7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n    8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n    9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n    END OF TERMS AND CONDITIONS\n\n    APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n    Copyright [yyyy] [name of copyright owner]\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n\n---- LLVM Exceptions to the Apache 2.0 License ----\n\nAs an exception, if, as a result of your compiling your source code, portions\nof this Software are embedded into an Object form of such source code, you\nmay redistribute such embedded portions in such Object form without complying\nwith the conditions of Sections 4(a), 4(b) and 4(d) of the License.\n\nIn addition, if you combine or link compiled forms of this Software with\nsoftware that is licensed under the GPLv2 (\"Combined Software\") and if a\ncourt of competent jurisdiction determines that the patent provision (Section\n3), the indemnity provision (Section 9) or other Section of the License\nconflicts with the conditions of the GPLv2, you may retroactively and\nprospectively choose to deem waived or otherwise exclude such Section(s) of\nthe License, but only in their entirety and only with respect to the Combined\nSoftware.\n\n==============================================================================\nSoftware from third parties included in the LLVM Project:\n==============================================================================\nThe LLVM Project contains third party software which is under different license\nterms. All such code will be identified clearly using at least one of two\nmechanisms:\n1) It will be in a separate directory tree with its own `LICENSE.txt` or\n   `LICENSE` file at the top containing the specific license and restrictions\n   which apply to that software, or\n2) It will contain specific license and restriction terms at the top of every\n   file.\n\n==============================================================================\nLegacy LLVM License (https://llvm.org/docs/DeveloperPolicy.html#legacy):\n==============================================================================\nUniversity of Illinois/NCSA\nOpen Source License\n\nCopyright (c) 2003-2019 University of Illinois at Urbana-Champaign.\nAll rights reserved.\n\nDeveloped by:\n\n    LLVM Team\n\n    University of Illinois at Urbana-Champaign\n\n    http://llvm.org\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal with\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\n    * Redistributions of source code must retain the above copyright notice,\n      this list of conditions and the following disclaimers.\n\n    * Redistributions in binary form must reproduce the above copyright notice,\n      this list of conditions and the following disclaimers in the\n      documentation and/or other materials provided with the distribution.\n\n    * Neither the names of the LLVM Team, University of Illinois at\n      Urbana-Champaign, nor the names of its contributors may be used to\n      endorse or promote products derived from this Software without specific\n      prior written permission.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nCONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE\nSOFTWARE.\n\n-----------------------------------------------------------------\n\n4. fpp - Fortran PreProcessor\n   Copyright (C) 2002-2020 Intel Corporation. All rights reserved.\n\nPortions Copyright (C) 1995 by Sun Microsystems, Inc.\nAll rights reserved.\n\nDeveloped at SunSoft, a Sun Microsystems, Inc. business.\nPermission to use, copy, modify, and distribute this\nsoftware is freely granted, provided that this notice\nis preserved.\n\n-----------------------------------------------------------------\n\n5. Intel compute-runtime\n   Copyright 2019 Intel Corporation.\n\t\n   Intel vc-intrinsics\n   Copyright 2021 Intel Corporation.\n\n   libffi\n   Copyright (c) 1996-2021  Anthony Green, Red Hat, Inc and others.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy \nof this software and associated documentation files (the \"Software\"), to deal \nin the Software without restriction, including without limitation the rights to \nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of \nthe Software, and to permit persons to whom the Software is furnished to do so, \nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all \ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, \nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN \nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n-----------------------------------------------------------------\n\n6. protobuf\n   Copyright 2008 Google Inc.  All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n    * Neither the name of Google Inc. nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nCode generated by the Protocol Buffer compiler is owned by the owner\nof the input file used when generating it.  This code is not\nstandalone and requires a support library to be linked with it.  This\nsupport library is itself covered by the above license.\n-----------------------------------------------------------------\n\n7. MP11\n   Copyright 2021 Intel Corporation.\n\nPermission is hereby granted, free of charge, to any person or organization\nobtaining a copy of the software and accompanying documentation covered by\nthis license (the \"Software\") to use, reproduce, display, distribute,\nexecute, and transmit the Software, and to prepare derivative works of the\nSoftware, and to permit third-parties to whom the Software is furnished to\ndo so, all subject to the following:\n\nThe copyright notices in the Software and this entire statement, including\nthe above license grant, this restriction and the following disclaimer,\nmust be included in all copies of the Software, in whole or in part, and\nall derivative works of the Software, unless such copies or derivative\nworks are solely in the form of machine-executable object code generated by\na source language processor.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\nSHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\nFOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n-----------------------------------------------------------------\n\n8. Unicode Data Files\nUNICODE, INC. LICENSE AGREEMENT - DATA FILES AND SOFTWARE\n\nSee Terms of Use <https://www.unicode.org/copyright.html>\nfor definitions of Unicode Inc.s Data Files and Software.\n\nNOTICE TO USER: Carefully read the following legal agreement.\nBY DOWNLOADING, INSTALLING, COPYING OR OTHERWISE USING UNICODE INC.'S\nDATA FILES (\"DATA FILES\"), AND/OR SOFTWARE (\"SOFTWARE\"),\nYOU UNEQUIVOCALLY ACCEPT, AND AGREE TO BE BOUND BY, ALL OF THE\nTERMS AND CONDITIONS OF THIS AGREEMENT.\nIF YOU DO NOT AGREE, DO NOT DOWNLOAD, INSTALL, COPY, DISTRIBUTE OR USE\nTHE DATA FILES OR SOFTWARE.\n\nCOPYRIGHT AND PERMISSION NOTICE\n\nCopyright © 1991-2022 Unicode, Inc. All rights reserved.\nDistributed under the Terms of Use in https://www.unicode.org/copyright.html.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of the Unicode data files and any associated documentation\n(the \"Data Files\") or Unicode software and any associated documentation\n(the \"Software\") to deal in the Data Files or Software\nwithout restriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, and/or sell copies of\nthe Data Files or Software, and to permit persons to whom the Data Files\nor Software are furnished to do so, provided that either\n(a) this copyright and permission notice appear with all copies\nof the Data Files or Software, or\n(b) this copyright and permission notice appear in associated\nDocumentation.\n\nTHE DATA FILES AND SOFTWARE ARE PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\nWARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT OF THIRD PARTY RIGHTS.\nIN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS\nNOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL\nDAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,\nDATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\nTORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THE DATA FILES OR SOFTWARE.\n\nExcept as contained in this notice, the name of a copyright holder\nshall not be used in advertising or otherwise to promote the sale,\nuse or other dealings in these Data Files or Software without prior\nwritten authorization of the copyright holder.\n\n-----------------------------------------------------------------\nThe following third party programs have their own third party program files. \nThese additional third party program files can be found as follows:\n1. Threading Building Blocks: \n<install_dir>/tbb/licensing/third-party-programs.txt\n\n-----------------------------------------------------------------\n\nIntel(R) 2021.8 C/C++/Fortran Compiler Classic Third Party Programs File\n\nThis file is the \"third-party-programs.txt\" file specified in the associated Intel end user license agreement for the Intel software you are licensing. \n\nThird party programs and their corresponding required notices and/or license terms are listed below.\n\n-----------------------------------------------------------------\n\n1. libdwarf\nCopyright 2020 Intel Corporatio\n\nLIBDWARF Copyright To enable use of the DWARF2 libdwarf interface, the following copyright and notice must be included in this document. Note this notice is for libdwarf only. All other source and documentation are copyright by Intel Corp. LIBDWARF permission notice: Copyright (c) 1994 Silicon Graphics, Inc. Permission to use, copy, modify, distribute, and sell this software and its documentation for any purpose is hereby granted without fee, provided that (i) the above copyright notice and this permission notice appear in all copies of the software and related documentation, and (ii) the name \"Silicon Graphics\" or any other trademark of Silicon Graphics, Inc. may not be used in any advertising or publicity relating to the software without the specific, prior written permission of Silicon Graphics, Inc. THE SOFTWARE IS PROVIDED \"AS-IS\" AND WITHOUT WARRANTY OF ANY KIND, EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL SILICON GRAPHICS, INC. BE LIABLE FOR ANY SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n-----------------------------------------------------------------\n\n\n2. Alladin Enterprises MD5 \n   Copyright (C) 1999, 2000, 2002 Aladdin Enterprises.\n\nAll rights reserved. This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software. Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions: 1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required. 2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software. 3. This notice may not be removed or altered from any source distribution. L. Peter Deutsch ghost@aladdin.com\n\n-----------------------------------------------------------------\n\n3. ATL Server Library and Tools\n\nMicrosoft Limited Permissive License (Ms-LPL)\nPublished: October 18, 2005\nThis license governs use of the accompanying software. If you use the software, you accept this license. If you do not accept the license, do not use the software.\n1.\tDefinitions\n        o The terms \"reproduce,\" \"reproduction\" and \"distribution\" have the same meaning here as under U.S. copyright law.\n        o \"You\" means the licensee of the software.\n        o \"Licensed patents\" means any Microsoft patent claims which read directly on the software as distributed by Microsoft under this license.\n\n2.\tGrant of Rights \n        a. Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, Microsoft grants you a non-exclusive, worldwide, royalty-free copyright license to reproduce the software, prepare derivative works of the software and distribute the software or any derivative works that you create.\n        b. Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, Microsoft grants you a non-exclusive, worldwide, royalty-free patent license under licensed patents to make, have made, use, practice, sell, and offer for sale, and/or otherwise dispose of the software or derivative works of the software.\n\n3.      Conditions and Limitations\n        . No Trademark License- This license does not grant you any rights to use Microsoft's name, logo, or trademarks.\n        a. If you begin patent litigation against Microsoft over patents that you think may apply to the software (including a cross-claim or counterclaim in a lawsuit), your license to the software ends automatically.\n        b. If you distribute copies of the software or derivative works, you must retain all copyright, patent, trademark, and attribution notices that are present in the software.\n        c. If you distribute the software or derivative works in source code form you may do so only under this license (i.e., you must include a complete copy of this license with your distribution), and if you distribute the software or derivative works in compiled or object code form you may only do so under a license that complies with this license.\n        d. The software is licensed \"as-is.\" You bear the risk of using it. Microsoft gives no express warranties, guarantees or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent permitted under your local laws, Microsoft excludes the implied warranties of merchantability, fitness for a particular purpose and non-infringement.\n        e. Platform Limitation- The licenses granted in sections 2(A) & 2(B) extend only to the software or derivative works that you create that run on a Microsoft Windows operating system product.\n\n-----------------------------------------------------------------\n\n5. llvm-project llvm-project\n   Copyright 2020 Intel Corporation\n\n   Intel Open Source Compiler Header Files \n   Copyright 2020 Intel Corporation\n\nApache License\nVersion 2.0, January 2004\nhttp://www.apache.org/licenses/\n \nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n \n    1. Definitions.\n               \"License\" shall mean the terms and conditions for use, reproduction and distribution as defined by Sections 1 through 9 of this document.\n               \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii)   beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License.\n               \"Source\" form shall mean the preferred form for making modifications including but not limited to software source code, documentation source, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems,and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\"\n               \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.\n \n2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of,publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.\n \n3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.\n \n    4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:\n      (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and\n      (b) You must cause any modified files to carry prominent notices stating that You changed the files; and\n      (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain\n            to any part of the Derivative Works; and\n      (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those    \n            notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if\n            provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes\n            only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional\n            attribution notices cannot be construed as modifying the License.\n \nYou may add Your own copyright statement to Your modifications and may provide additional or different license terms and condition for use, reproduction, or distribution of Your modifications, or for any such Derivative        Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.\n \n5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.\n \n    6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the\n       origin of the Work and reproducing the content of the NOTICE file.\n \n7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.\n \n    8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in    \n      writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility\n     of such damages.\n \n    9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations    \n      and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to\n      indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.\n \n    END OF TERMS AND CONDITIONS\n     APPENDIX: How to apply the Apache License to your work.\n       To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!)  The text should be\n      enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n \n    Copyright [yyyy] [name of copyright owner]\n \n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n \n       http://www.apache.org/licenses/LICENSE-2.0\n \n    Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and limitations under the License.\n \n--- LLVM Exceptions to the Apache 2.0 License ----\n \nAs an exception, if, as a result of your compiling your source code, portions of this Software are embedded into an Object form of such source code, you may redistribute such embedded portions in such Object form without complying with the conditions of Sections 4(a), 4(b) and 4(d) of the License.\n \nIn addition, if you combine or link compiled forms of this Software with software that is licensed under the GPLv2 (\"Combined Software\") and if a court of competent jurisdiction determines that the patent provision (Section\n3), the indemnity provision (Section 9) or other Section of the License conflicts with the conditions of the GPLv2, you may retroactively and prospectively choose to deem waived or otherwise exclude such Section(s) of the License, but only in their entirety and only with respect to the Combined Software.\n\n-----------------------------------------------------------------\n\n6. Intel® Threading Building Blocks (Intel® TBB)\n   Copyright Intel Corporation\n\n\n\nApache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n-----------------------------------------------------------------\n\n7. Visual Studio Autogenerated Code\n   Copyright Microsoft Corporation\n\nTerms for Microsoft Distributable Code provided as part of Microsofts Visual Studio Enterprise and Professional software.\n\n1.\tLicense. This software package from Intel (the Software Package) contains code from Microsoft (the Distributable Code).  You are provided a non-transferable, non-exclusive, non-sublicensable, limited right and license only to use the Distributable Code as part of this Software Package.  You are not allowed to copy, modify, remove the Distributable Code from the Software Package or redistribute the Distributable Code.\n2.\tRestrictions. The Distributable Code is licensed, not sold. You are only provided the above rights to use the Distributable Code.  Intel and Microsoft reserve all other rights. Unless applicable law gives you more rights, you may use the Distributable Code only as expressly permitted in these terms. In using the Distributable Code, you must comply with any technical limitations in the Distributable Code that only allow you to use it in certain ways. You may not:\n\twork around any technical limitations in the Distributable Code; \n\treverse engineer, decompile or disassemble the software, or otherwise attempt to derive the source code for the Distributable Code, except and to the extent required by third party licensing terms governing use of certain open source components that may be included in the Distributable Code; \n\tremove, minimize, block or modify any notices of Intel, Microsoft or its suppliers in the Distributable Code; \n\tuse the Distributable Code in any way that is against the law; or\n\tshare, publish, rent or lease the software, or provide the Distributable Code as a stand-alone offering for others to use. \n3.\tNO WARRANTY.  THE  DISTRIBUTABLE CODE IS PROVIDED AS IS WITHOUT ANY EXPRESS OR IMPLIED WARRANTY OF ANY KIND INCLUDING WARRANTIES OF MERCHANTABILITY, NONINFRINGEMENT, OR FITNESS FOR A PARTICULAR PURPOSE.  \n4.\tLIMITATION ON AND EXCLUSION OF DAMAGES. YOU CAN RECOVER FROM INTEL, MICROSOFT OR THEIR SUPPLIERS ONLY DIRECT DAMAGES UP TO $5.00. YOU CANNOT RECOVER ANY OTHER DAMAGES, INCLUDING CONSEQUENTIAL, LOST PROFITS, SPECIAL, INDIRECT OR INCIDENTAL DAMAGES. \nThis limitation applies to (a) anything related to the Distributable Code; and (b) claims for breach of contract, breach of warranty, guarantee or condition, strict liability, negligence, or other tort to the extent permitted by applicable law.  It also applies even if Intel or Microsoft knew or should have known about the possibility of the damages. The above limitation or exclusion may not apply to you because your state or country may not allow the exclusion or limitation of incidental, consequential or other damages. \n5.\tExport Restrictions. You must comply with all domestic and international export laws and regulations that apply to the software, which include restrictions on destinations, end users, and end use. For further information on export restrictions, visit www.microsoft.com/exporting.\n\n-----------------------------------------------------------------\n\n8. fpp - Fortran PreProcessor\n   Copyright (C) 2002-2018 Intel Corporation. All rights reserved.\n\nPortions Copyright (C) 1995 by Sun Microsystems, Inc.\nAll rights reserved.\n\nDeveloped at SunSoft, a Sun Microsystems, Inc. business.\nPermission to use, copy, modify, and distribute this\nsoftware is freely granted, provided that this notice\nis preserved.\n\n-----------------------------------------------------------------\n9. Intel Decimal Floating-Point Math Library\nCopyright (c) 2018, Intel Corp.\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, \nare permitted provided that the following conditions are met:\n\n   * Redistributions of source code must retain the above copyright notice, this\n     list of conditions and the following disclaimer.\n   * Redistributions in binary form must reproduce the above copyright notice, \n     his list of conditions and the following disclaimer in the documentation \n     and/or other materials provided with the distribution.\n   * Neither the name of Intel Corporation nor the names of its contributors \n     may be used to endorse or promote products derived from this software \n     without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND \nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. \nIN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, \nINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, \nBUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, \nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF \nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE \nOR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF \nADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n-----------------------------------------------------------------\nThe following third party programs have their own third party program files. These additional third party program files are as follows:\n\n   Third-party-program.txt file for Intel(R) TBB is located here:\n      <install_dir>/tbb/licensing/third-party-programs.txt\n\n-------------------------------------------------------------\nOther names and brands may be claimed as the property of others.\n\n\n"
        },
        {
          "name": "third-party-programs.txt",
          "type": "blob",
          "size": 108.658203125,
          "content": "Intel(R) Embree Third Party Programs File\n\nThis file contains the list of third party software (third party\nprograms) contained in the Intel software and their required notices\nand/or license terms. This third party software, even if included with\nthe distribution of the Intel software, may be governed by separate\nlicense terms, including without limitation, third party license\nterms, other Intel software license terms, and open source software\nlicense terms. These separate license terms govern your use of the\nthird party programs as set forth in the third-party-programs.txt or\nother similarly-named text file.\n\nThird party programs and their corresponding required notices and/or\nlicense terms are listed below.\n\n\n1. Apache License 2.0\n-------------------------------------------------------------\n\n1.1. Intel(R) oneAPI Threading Building Blocks (TBB)\n     https://github.com/oneapi-src/oneTBB\n     Copyright Intel\n\n1.2. Intel(R) Open Image Denoise (OIDN)\n     https://github.com/OpenImageDenoise/oidn\n     Copyright Intel\n\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n\n2. Apache License 2.0 with LLVM Exceptions\n-------------------------------------------------------------\n\n2.1. oneAPI DPC++ Compiler\n     https://github.com/intel/llvm/\n   \n\n                                Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n    TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n    1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n    2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n    3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n    4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n    5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n    6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n    7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n    8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n    9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n    END OF TERMS AND CONDITIONS\n\n    APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n    Copyright [yyyy] [name of copyright owner]\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n\n---- LLVM Exceptions to the Apache 2.0 License ----\n\nAs an exception, if, as a result of your compiling your source code, portions\nof this Software are embedded into an Object form of such source code, you\nmay redistribute such embedded portions in such Object form without complying\nwith the conditions of Sections 4(a), 4(b) and 4(d) of the License.\n\nIn addition, if you combine or link compiled forms of this Software with\nsoftware that is licensed under the GPLv2 (\"Combined Software\") and if a\ncourt of competent jurisdiction determines that the patent provision (Section\n3), the indemnity provision (Section 9) or other Section of the License\nconflicts with the conditions of the GPLv2, you may retroactively and\nprospectively choose to deem waived or otherwise exclude such Section(s) of\nthe License, but only in their entirety and only with respect to the Combined\nSoftware.\n\n\n3. Pixar Modified Apache License 2.0\n-------------------------------------------------------------\n\n3.1 OpenSubdiv\n    https://github.com/PixarAnimationStudios/OpenSubdiv\n    Copyright 2013 Pixar\n    All rights reserved.\n\n    This product includes software developed at:\n      Pixar (http://www.pixar.com/).\n      Dreamworks Animation (http://www.dreamworksanimation.com/)\n      Autodesk, Inc. (http://www.autodesk.com/).\n      Google, Inc. (http://www.google.com/).\n      DigitalFish (http://digitalfish.com/).\n\n\n\n    This product includes software developed at:\n      Pixar (http://www.pixar.com/).\n\n\n                  Modified Apache 2.0 License\n\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor\n      and its affiliates, except as required to comply with Section 4(c) of\n      the License and to reproduce the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n\n4. zLib License\n-------------------------------------------------------------\n\n4.1. GLFW\n     https://github.com/glfw/glfw\n     Copyright (c) 2002-2006 Marcus Geelnard\n     Copyright (c) 2006-2019 Camilla Loewy\n\nThis software is provided 'as-is', without any express or implied\nwarranty. In no event will the authors be held liable for any damages\narising from the use of this software.\n\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n\nThe origin of this software must not be misrepresented; you must not\nclaim that you wrote the original software. If you use this software\nin a product, an acknowledgment in the product documentation would be\nappreciated but is not required.\n\nAltered source versions must be plainly marked as such, and must not\nbe misrepresented as being the original software.\n\nThis notice may not be removed or altered from any source\ndistribution.\n\nYou can find this license in the file LICENSE.md of the GLFW source\ntree and in the comment header of each source file.\n\n\n5. MIT License\n-------------------------------------------------------------\n\n5.1. Gruenschloss Halton\n     https://gruenschloss.org/halton/halton.zip\n     Copyright (c) 2012 Leonhard Gruenschloss (leonhard@gruenschloss.org)\n\n5.2. ImGui\n     https://github.com/ocornut/imgui\n     Copyright (c) 2014-2020 Omar Cornut\n\n5.3. PCG Random Number Generation, C++ Edition\n     https://github.com/imneme/pcg-cpp\n     Copyright (c) 2014-2017 Melissa O'Neill and PCG Project contributors\n\n5.4. SSE2NEON\n     https://github.com/DLTcollab/sse2neon\n\n5.5. stb single-file libraries for C/C++\n     https://github.com/nothings/stb\n     Copyright (c) 2017 Sean Barrett\n\n5.6. A GPU Optimizer for Blue-Noise Screen-Space Sampler\n     https://github.com/unity-grenoble/sampling_bluenoise_sig21\n     Copyright (c) 2020 Sylvain Durand\n   \n   \nThe MIT License (MIT)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n6. BSD 3-clause License\n-------------------------------------------------------------\n\n6.1. OpenEXR\n     https://github.com/AcademySoftwareFoundation/openexr\n\nCopyright (c) Contributors to the OpenEXR Project. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n\n    Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in\n    the documentation and/or other materials provided with the\n    distribution.\n\n    Neither the name of the copyright holder nor the names of its\n    contributors may be used to endorse or promote products derived\n    from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n7. BSD 3-clause License + Dependencies\n-------------------------------------------------------------\n\n7.1. TinyEXR\n     https://github.com/syoyo/tinyexr\n\nCopyright (c) 2014 - 2021, Syoyo Fujita and many contributors.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n      \n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n      \n    * Neither the name of the Syoyo Fujita nor the\n      names of its contributors may be used to endorse or promote products\n      derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nTinyEXR contains some OpenEXR code, which is licensed under:\n\n///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\n// Digital Ltd. LLC\n//\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n// *       Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// *       Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// *       Neither the name of Industrial Light & Magic nor the names of\n// its contributors may be used to endorse or promote products derived\n// from this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n///////////////////////////////////////////////////////////////////////////\n\n\n8. Customized BSD 3-clause License\n-------------------------------------------------------------\n\n8.1. Syrah\n     https://github.com/boulos/syrah\n     Copyright (c) 2009, Stanford University, and authors listed below.\n     All rights reserved.\n\nOriginal authors:\n  Solomon Boulos\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\nRedistributions of source code must retain the above copyright notice,\nthis list of conditions and the following disclaimer.\n\nRedistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n\nNeither the name of Stanford University nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n9. Boost Software License - Version 1.0\n-------------------------------------------------------------\n\n9.1. Catch2\n     https://github.com/catchorg/Catch2\n\nBoost Software License - Version 1.0 - August 17th, 2003\n\nPermission is hereby granted, free of charge, to any person or organization\nobtaining a copy of the software and accompanying documentation covered by\nthis license (the \"Software\") to use, reproduce, display, distribute,\nexecute, and transmit the Software, and to prepare derivative works of the\nSoftware, and to permit third-parties to whom the Software is furnished to\ndo so, all subject to the following:\n\nThe copyright notices in the Software and this entire statement, including\nthe above license grant, this restriction and the following disclaimer,\nmust be included in all copies of the Software, in whole or in part, and\nall derivative works of the Software, unless such copies or derivative\nworks are solely in the form of machine-executable object code generated by\na source language processor.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\nSHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\nFOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n\n\n10. Visual C++ Redistributables for Visual Studio\n-------------------------------------------------------------\n\n1.\tLicense. This software package from Intel (the “Software Package”) contains code from Microsoft (the “Distributable Code”).  You are provided a non-transferable, non-exclusive, non-sublicensable, limited right and license only to use and redistribute the Distributable Code as part of this Software Package.  You are not allowed to copy, modify, remove the Distributable Code from the Software Package or redistribute the Distributable Code on a stand-alone basis.\n2.\tRestrictions. The Distributable Code is licensed, not sold. You are only provided the above rights to use the Distributable Code.  Intel and Microsoft reserve all other rights. Unless applicable law gives you more rights, you may use the Distributable Code only as expressly permitted in these terms. In using the Distributable Code, you must comply with any technical limitations in the Distributable Code that only allow you to use it in certain ways. You may not:\n•\twork around any technical limitations in the Distributable Code; \n•\treverse engineer, decompile or disassemble the software, or otherwise attempt to derive the source code for the Distributable Code, except and to the extent required by third party licensing terms governing use of certain open source components that may be included in the Distributable Code; \n•\tremove, minimize, block or modify any notices of Intel, Microsoft or its suppliers in the Distributable Code; \n•\tuse the Distributable Code in any way that is against the law; or\n•\tshare, publish, rent or lease the software, or provide the Distributable Code as a stand-alone offering for others to use. \n3.\tNO WARRANTY.  THE  DISTRIBUTABLE CODE IS PROVIDED “AS IS” WITHOUT ANY EXPRESS OR IMPLIED WARRANTY OF ANY KIND INCLUDING WARRANTIES OF MERCHANTABILITY, NONINFRINGEMENT, OR FITNESS FOR A PARTICULAR PURPOSE.  \n4.\tLIMITATION ON AND EXCLUSION OF DAMAGES. YOU CAN RECOVER FROM INTEL, MICROSOFT OR THEIR SUPPLIERS ONLY DIRECT DAMAGES UP TO $5.00. YOU CANNOT RECOVER ANY OTHER DAMAGES, INCLUDING CONSEQUENTIAL, LOST PROFITS, SPECIAL, INDIRECT OR INCIDENTAL DAMAGES. \nThis limitation applies to (a) anything related to the Distributable Code; and (b) claims for breach of contract, breach of warranty, guarantee or condition, strict liability, negligence, or other tort to the extent permitted by applicable law.  It also applies even if Intel or Microsoft knew or should have known about the possibility of the damages. The above limitation or exclusion may not apply to you because your state or country may not allow the exclusion or limitation of incidental, consequential or other damages. \n5.\tExport Restrictions. You must comply with all domestic and international export laws and regulations that apply to the software, which include restrictions on destinations, end users, and end use. For further information on export restrictions, visit www.microsoft.com/exporting.\n\n\n11. Pixar Modified Apache 2.0\n-------------------------------------------------------------\n\n11.1 Universal Scene Description\n    https://github.com/PixarAnimationStudios/USD\n    Copyright 2016 Pixar\n    All rights reserved.\n\nModified Apache 2.0 License\n\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor\n      and its affiliates, except as required to comply with Section 4(c) of\n      the License and to reproduce the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n============================================================\nRapidJSON\n============================================================\n\nTencent is pleased to support the open source community by making RapidJSON available. \n \nCopyright (C) 2015 THL A29 Limited, a Tencent company, and Milo Yip.  All rights reserved.\n\nIf you have downloaded a copy of the RapidJSON binary from Tencent, please note that the RapidJSON binary is licensed under the MIT License.\nIf you have downloaded a copy of the RapidJSON source code from Tencent, please note that RapidJSON source code is licensed under the MIT License, except for the third-party components listed below which are subject to different license terms.  Your integration of RapidJSON into your own projects may require compliance with the MIT License, as well as the other licenses applicable to the third-party components included within RapidJSON. To avoid the problematic JSON license in your own projects, it's sufficient to exclude the bin/jsonchecker/ directory, as it's the only code under the JSON license.\nA copy of the MIT License is included in this file.\n\nOther dependencies and licenses:\n\nOpen Source Software Licensed Under the BSD License:\n--------------------------------------------------------------------\n\nThe msinttypes r29 \nCopyright (c) 2006-2013 Alexander Chemeris \nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. \n* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n* Neither the name of  copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nOpen Source Software Licensed Under the JSON License:\n--------------------------------------------------------------------\n\njson.org \nCopyright (c) 2002 JSON.org\nAll Rights Reserved.\n\nJSON_checker\nCopyright (c) 2002 JSON.org\nAll Rights Reserved.\n\n\t\nTerms of the JSON License:\n---------------------------------------------------\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nThe Software shall be used for Good, not Evil.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nTerms of the MIT License:\n--------------------------------------------------------------------\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n============================================================\npygilstate_check\n============================================================\n\nThe MIT License (MIT)\n\nCopyright (c) 2014, Pankaj Pandey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n============================================================\ndouble-conversion\n============================================================\n\nCopyright 2006-2011, the V8 project authors. All rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above\n      copyright notice, this list of conditions and the following\n      disclaimer in the documentation and/or other materials provided\n      with the distribution.\n    * Neither the name of Google Inc. nor the names of its\n      contributors may be used to endorse or promote products derived\n      from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n============================================================\nOpenEXR/IlmBase/Half\n============================================================\n\n///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\n// Digital Ltd. LLC\n// \n// All rights reserved.\n// \n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n// *       Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// *       Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// *       Neither the name of Industrial Light & Magic nor the names of\n// its contributors may be used to endorse or promote products derived\n// from this software without specific prior written permission. \n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n///////////////////////////////////////////////////////////////////////////\n\n============================================================\nApple Technical Q&A QA1361 - Detecting the Debugger\nhttps://developer.apple.com/library/content/qa/qa1361/_index.html\n============================================================\n\nSample code project: Detecting the Debugger\nVersion: 1.0\n\nAbstract: Shows how to determine if code is being run under the debugger.\n\nIMPORTANT:  This Apple software is supplied to you by Apple\nInc. (\"Apple\") in consideration of your agreement to the following\nterms, and your use, installation, modification or redistribution of\nthis Apple software constitutes acceptance of these terms.  If you do\nnot agree with these terms, please do not use, install, modify or\nredistribute this Apple software.\n\nIn consideration of your agreement to abide by the following terms, and\nsubject to these terms, Apple grants you a personal, non-exclusive\nlicense, under Apple's copyrights in this original Apple software (the\n\"Apple Software\"), to use, reproduce, modify and redistribute the Apple\nSoftware, with or without modifications, in source and/or binary forms;\nprovided that if you redistribute the Apple Software in its entirety and\nwithout modifications, you must retain this notice and the following\ntext and disclaimers in all such redistributions of the Apple Software.\nNeither the name, trademarks, service marks or logos of Apple Inc. may\nbe used to endorse or promote products derived from the Apple Software\nwithout specific prior written permission from Apple.  Except as\nexpressly stated in this notice, no other rights or licenses, express or\nimplied, are granted by Apple herein, including but not limited to any\npatent rights that may be infringed by your derivative works or by other\nworks in which the Apple Software may be incorporated.\n \nThe Apple Software is provided by Apple on an \"AS IS\" basis.  APPLE\nMAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\nTHE IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY AND FITNESS\nFOR A PARTICULAR PURPOSE, REGARDING THE APPLE SOFTWARE OR ITS USE AND\nOPERATION ALONE OR IN COMBINATION WITH YOUR PRODUCTS.\n \nIN NO EVENT SHALL APPLE BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL\nOR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) ARISING IN ANY WAY OUT OF THE USE, REPRODUCTION,\nMODIFICATION AND/OR DISTRIBUTION OF THE APPLE SOFTWARE, HOWEVER CAUSED\nAND WHETHER UNDER THEORY OF CONTRACT, TORT (INCLUDING NEGLIGENCE),\nSTRICT LIABILITY OR OTHERWISE, EVEN IF APPLE HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n\n============================================================\nLZ4\n============================================================\n\nLZ4 - Fast LZ compression algorithm\nCopyright (C) 2011-present, Yann Collet.\n\nBSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nYou can contact the author at :\n - LZ4 homepage : http://www.lz4.org\n - LZ4 source repository : https://github.com/lz4/lz4\n\n============================================================\nstb\n============================================================\n\nstb_image - v2.19 - public domain image loader - http://nothings.org/stb\n                                  no warranty implied; use at your own risk\n\nstb_image_resize - v0.95 - public domain image resizing\n   by Jorge L Rodriguez (@VinoBS) - 2014\n      http://github.com/nothings/stb\n\nstb_image_write - v1.09 - public domain - http://nothings.org/stb/stb_image_write.h\n   writes out PNG/BMP/TGA/JPEG/HDR images to C stdio - Sean Barrett 2010-2015\n                                        no warranty implied; use at your own risk\n\nALTERNATIVE B - Public Domain (www.unlicense.org)                               \nThis is free and unencumbered software released into the public domain.         \nAnyone is free to copy, modify, publish, use, compile, sell, or distribute this \nsoftware, either in source code form or as a compiled binary, for any purpose,  \ncommercial or non-commercial, and by any means.                                 \nIn jurisdictions that recognize copyright laws, the author or authors of this   \nsoftware dedicate any and all copyright interest in the software to the public  \ndomain. We make this dedication for the benefit of the public at large and to   \nthe detriment of our heirs and successors. We intend this dedication to be an   \novert act of relinquishment in perpetuity of all present and future rights to   \nthis software under copyright law.                                              \nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR          \nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,        \nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE         \nAUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN          \nACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION    \nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                 \n\n============================================================\npugixml\n============================================================\n\nMIT License\n\nCopyright (c) 2006-2019 Arseny Kapoulkine\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n============================================================\nVulkan C++ examples and demos (dome light texture filtering)\n============================================================\n\nThe MIT License (MIT)\n\nCopyright (c) 2016 Sascha Willems\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n============================================================\npbrt (Hammersley Low-Discrepancy Sampling Sequence)\n============================================================\n\nCopyright (c) 1998-2015, Matt Pharr, Greg Humphreys, and Wenzel Jakob.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n============================================================\nDraco\n============================================================\nUSD bundles Draco, which is available under the Apache 2.0 license. For details,\nsee https://github.com/google/draco/blob/master/README.md.\n\n\n============================================================\nRoboto Fonts\n============================================================\nUSD bundles Roboto fonts, which is available under the Apache 2.0 license. \nFor details, see https://fonts.google.com/specimen/Roboto#license\n\n\n============================================================\nRoboto Mono Fonts\n============================================================\nUSD bundles Roboto Mono fonts, which is available under the Apache 2.0 license. \nFor details, see https://fonts.google.com/specimen/Roboto+Mono#license\n\n\n============================================================\nVulkan Memory Allocator\n============================================================\nCopyright (c) 2017-2020 Advanced Micro Devices, Inc. All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n\n============================================================\nSpirv Reflect\n============================================================\nCopyright 2017-2018 Google Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n============================================================\nkhrplatform.h\n============================================================\nCopyright (c) 2008-2018 The Khronos Group Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and/or associated documentation files (the\n\"Materials\"), to deal in the Materials without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Materials, and to\npermit persons to whom the Materials are furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Materials.\n\nTHE MATERIALS ARE PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nMATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.\n\n\n============================================================\nsurfgrad-bump-standalone-demo\n============================================================\nMIT License\n\nCopyright (c) 2020 mmikk\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n================================================================\nTessil robin-map\n================================================================\nMIT License\n\nCopyright (c) 2017 Thibaut Goetghebuer-Planchon <tessil@gmx.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n11. Intel End User License Agreement for Developer Tools (Version October 2021)\n-------------------------------------------------------------------------------\n\n11.1 Intel(R) oneAPI DPC++/C++ Compiler\n\n\nIntel End User License Agreement for Developer Tools (Version October 2021)\n\n \n\nIMPORTANT NOTICE - PLEASE READ AND AGREE BEFORE DOWNLOADING, INSTALLING, COPYING OR USING\n\nThis Agreement is between you, or the company or other legal entity that you represent and warrant you have the legal authority to bind, (each, \"You\" or \"Your\") and Intel Corporation and its subsidiaries (collectively, \"Intel\") regarding Your use of the Materials. By downloading, installing, copying or using the Materials, You agree to be bound by the terms of this Agreement. If You do not agree to the terms of this Agreement, or do not have legal authority or required age to agree to them, do not download, install, copy or use the Materials.\n\n \n\nLICENSE DEFINITIONS.\n\n \n\nA.    \"Cloud Provider\" means a third party service provider offering a cloud-based platform, infrastructure, application or storage services, such as Microsoft Azure or Amazon Web Services, which You may only utilize to host the Materials subject to the restrictions set forth in Section 2.3 B.\n\n \n\nB.    \"Derivative Work\" means a derivative work, as defined in 17 U.S.C. § 101, of the Source Code.\n\n \n\nC.    \"Executable Code\" means computer programming code in binary form suitable for machine execution by a processor without the intervening steps of interpretation or compilation.\n\n \n\nD.    \"Materials\" mean the software, documentation, the software product serial number, and other collateral, including any updates, made available to You by Intel under this Agreement. Materials include Redistributables, Executable Code, Source Code, Sample Source Code, and Pre-Release Materials, but do not include Third Party Software.\n\n \n\nE.    \"Pre-Release Materials\" mean the Materials, or portions of the Materials, that are identified (in the product release notes, on Intel's download website for the Materials or elsewhere) or labeled as pre-release, prototype, alpha or beta code and, as such, are deemed to be pre-release code (i) which may not be fully functional or tested and may contain bugs or errors; (ii) which Intel may substantially modify in its development of a production version; or (iii) for which Intel makes no assurances that it will ever develop or make a production version generally available. Pre-Release Materials are subject to the terms of Section 3.2.\n\n \n\nF.    \"Reciprocal Open Source Software\" means any software that is subject to a license which requires that (i) it must be distributed in source code form; (ii) it must be licensed under the same open source license terms; and (iii) its derivative works must be licensed under the same open source license terms. Examples of this type of license are the GNU General Public License or the Mozilla Public License.\n\n \n\nG.    \"Redistributables\" mean the files (if any) listed in the \"redist.txt,\" \"redist-rt.txt\" or similarlynamed text files that may be included in the Materials. Redistributables include Sample Source Code.\n\n \n\nH.    \"Sample Source Code\" means those portions of the Materials that are Source Code and are identified as sample code. Sample Source Code may not have been tested or validated by Intel and is provided purely as a programming example.\n\n \n\nI.      \"Source Code\" means the software portion of the Materials provided in human readable format.\n\n \n\nJ.     \"Third Party Software\" mean the files (if any) listed in the \"third-party-software.txt\" or other similarly-named text file that may be included in the Materials for the applicable software.\nThird Party Software is subject to the terms of Section 2.2.\n\n \n\nK.    \"Your Product\" means one or more applications, products or projects developed by or for You using the Materials.\n\n \n\n2.     LICENSE GRANTS.\n\n \n\n2.1      License to the Materials. Subject to the terms and conditions of this Agreement, Intel grants You a non-exclusive, worldwide, non-assignable, non-sublicensable, limited right and license under its copyrights, to:\n\n \n\nA.    reproduce internally a reasonable number of copies of the Materials for Your personal or business use;\n\n \n\nB.    use the Materials solely for Your personal or business use to develop Your Product, in accordance with the documentation included as part of the Materials;\n\n \n\nC.    modify or create Derivative Works only of the Redistributables, or any portions, that are provided to You in Source Code;\n\n \n\nD.    distribute (directly and through Your distributors, resellers, and other channel partners, if applicable), the Redistributables, including any modifications to or Derivative Works of the Redistributables or any portions made pursuant to Section 2.1.C subject to the following conditions:\n\n \n\n(1)   Any distribution of the Redistributables must only be as part of Your Product which must add significant primary functionality different than that of the Redistributables themselves;\n\n \n\n(2)   You must only distribute the Redistributables originally provided to You by Intel only in Executable Code subject to a license agreement that prohibits reverse engineering, decompiling or disassembling the Redistributables;\n\n \n\n(3)   This distribution right includes a limited right to sublicense only the Intel copyrights in the Redistributables and only to the extent necessary to perform, display, and distribute the Redistributables (including Your modifications and Derivative Works of the Redistributables provided in Source Code) solely as incorporated in Your Product; and\n\n \n\n(4)   You: (i) will be solely responsible to Your customers for any update, support obligation or other obligation or liability which may arise from the distribution of Your Product, (ii) will not make any statement that Your Product is \"certified\" or that its performance is guaranteed by Intel or its suppliers, (iii) will not use Intel's or its suppliers' names or trademarks to market Your Product, (iv) will comply with any additional restrictions which are included in the text files with the Redistributables and in Section 3 below, (v) will indemnify, hold harmless, and defend Intel and its suppliers from and against any claims or lawsuits, costs, damages, and expenses, including attorney's fees, that arise or result from (a) Your modifications or Derivative Works of the Materials or (b) Your distribution of Your Product.\n\n \n\n2.2      Third Party Software. Third Party Software, even if included with the distribution of the Materials, may be governed by separate license terms, including without limitation, third party license terms, open source software notices and terms, and/or other Intel software license terms. These separate license terms solely govern Your use of the Third Party Software.\n\n \n\n2.3      Third Party Use.\n\nA.    If You are an entity, Your contractors may use the Materials under the license specified in Section 2, provided: (i) their use of the Materials is solely on behalf of and in support of Your business, (ii) they agree to the terms and conditions of this Agreement, and (iii) You are solely responsible for their use, misuse or disclosure of the Materials.\n\n \n\nB.    You may utilize a Cloud Provider to host the Materials for You, provided: (i) the Cloud Provider may only host the Materials for Your exclusive use and may not use the Materials for any other purpose whatsoever, including the restriction set forth in Section 3.1(xi); (ii) the Cloud Provider's use of the Materials must be solely on behalf of and in support of Your Product, and (iii) You will indemnify, hold harmless, and defend Intel and its suppliers from and against any claims or lawsuits, costs, damages, and expenses, including attorney's fees, that arise or result from Your Cloud Provider's use, misuse or disclosure of the Materials.\n\n \n\n3.     LICENSE CONDITIONS.\n\n \n\n3.1      Restrictions. Except as expressly provided in this Agreement, You may NOT: (i) use, reproduce, disclose, distribute, or publicly display the Materials; (ii) share, publish, rent or lease the Materials to any third party; (iii) assign this Agreement or transfer the Materials; (iv) modify, adapt, or translate the Materials in whole or in part; (v) reverse engineer, decompile, or disassemble the Materials, or otherwise attempt to derive the source code for the software; (vi) work around any technical limitations in the Materials; (vii) distribute, sublicense or transfer any Source Code, modifications or Derivative Works of any Source Code to any third party; (viii) remove, minimize, block or modify any notices of Intel or its suppliers in the Materials; (ix) include the Redistributables in malicious, deceptive, or unlawful programs or products or use the Materials in any way that is against the law; (x) modify, create a Derivative Work, link, or distribute the Materials so that any part of it becomes Reciprocal Open Source Software; (xi) use the Materials directly or indirectly for SaaS services or service bureau purposes (i.e., a service that allows use of or access to the Materials by a third party as part of that service, such as the salesforce.com service business model).\n\n \n\n3.2      Pre-Release Materials. If You receive Pre-Release Materials, You may reproduce a reasonable number of copies and use the Pre-Release Materials for evaluation and testing purposes only. You may not (i) modify or incorporate the Pre-Release Materials into Your Product; (ii) continue to use the Pre-Release Materials once a commercial version is released; or (iii) disclose to any third party any benchmarks, performance results, or other information relating to the Pre-Release Materials. Intel may waive these restrictions in writing at its sole discretion; however, if You decide to use the Pre-Release Materials in Your Product (even with Intel's waiver), You acknowledge and agree that You are fully responsible for any and all issues that result from such use.\n\n \n\n3.3      Safety-Critical, and Life-Saving Applications; Indemnity. The Materials may provide information relevant to safety-critical applications (\"Safety-Critical Applications\") to allow compliance with functional safety standards or requirements. You acknowledge and agree that safety is Your responsibility. To the extent You use the Materials to create, or as part of, products used in Safety-Critical Applications, it is Your responsibility to design, manage, and ensure that there are system-level safeguards to anticipate, monitor, and control system failures, and You agree that You are solely responsible for all applicable regulatory standards and safety-related requirements concerning Your use of the Materials in Safety Critical Applications.\n\n \n\nShould You use the Materials for Safety-Critical Applications or in any type of a system or application in which the failure of the Materials could create a situation where personal injury or death may occur (e.g., medical systems, life-sustaining or life-saving systems) (\"Life-Saving Applications\"), You agree to indemnify, defend, and hold Intel and its representatives harmless against any claims or lawsuits, costs, damages, and expenses, including reasonable attorney fees, arising in any way out of Your use of the Materials in Safety-Critical Applications or Life-Saving Applications and claims of product liability, personal injury or death associated with those applications; even if such claims allege that Intel was negligent or strictly liable regarding the design or manufacture of the Materials or its failure to warn regarding the Materials.\n\n \n\n3.4      Media Format Codecs and Digital Rights Management. You acknowledge and agree that Your use of the Materials or distribution of the Redistributables with Your Product as permitted by this Agreement may require You to procure license(s) from third parties that may hold intellectual property rights applicable to any media decoding, encoding or transcoding technology (e.g., the use of an audio or video codec) and/or digital rights management capabilities of the Materials, if any. Should any such additional licenses be required, You are solely responsible for obtaining any such licenses and agree to obtain any such licenses at Your own expense.\n\n \n\n4.     DATA COLLECTION AND PRIVACY.\n\n \n\n4.1      Data Collection. The Materials may generate and collect anonymous data and/or provisioning data about the Materials and/or the development environment and transmit the data to Intel as a one-time event during installation. Optional data may also be collected by the Materials, however, You will be provided notice of the request to collect optional data and no optional data will be collected without Your consent. All data collection by Intel is performed pursuant to relevant privacy laws, including notice and consent requirements.\n\n \n\n4.2      Intel's Privacy Notice. Intel is committed to respecting Your privacy. To learn more about Intel's privacy practices, please visit http://www.intel.com/privacy.\n\n \n\n5.     OWNERSHIP. Title to the Materials and all copies remain with Intel or its suppliers. The Materials are protected by intellectual property rights, including without limitation, United States copyright laws and international treaty provisions. You will not remove any copyright or other proprietary notices from the Materials. Except as expressly provided herein, no license or right is granted to You directly or by implication, inducement, estoppel or otherwise; specifically, Intel does not grant any express or implied right to You under Intel patents, copyrights, trademarks, or trade secrets.\n\n \n\n6.     NO WARRANTY AND NO SUPPORT.\n\n \n\n6.1      No Warranty. Disclaimer. Intel disclaims all warranties of any kind and the terms and remedies provided in this Agreement are instead of any other warranty or condition, express, implied or statutory, including those regarding merchantability, fitness for any particular purpose, non-infringement or any warranty arising out of any course of dealing, usage of trade, proposal, specification or sample. Intel does not assume (and does not authorize any person to assume on its behalf) any liability.\n\n \n\n6.2      No Support; Priority Support. Intel may make changes to the Materials, or to items referenced therein, at any time without notice, but is not obligated to support, update or provide training for the Materials under the terms of this Agreement. Intel offers free community and paid priority support options. More information on these support options can be found at:\n\nhttps://software.intel.com/content/www/us/en/develop/support/priority-support.html.\n\n \n\n7.     LIMITATION OF LIABILITY.\n\n \n\n7.1      Intel will not be liable for any of the following losses or damages (whether such losses or damages were foreseen, foreseeable, known or otherwise): (i) loss of revenue; (ii) loss of actual or anticipated profits; (iii) loss of the use of money; (iv) loss of anticipated savings; (v) loss of business; (vi) loss of opportunity; (vii) loss of goodwill; (viii) loss of use of the Materials; (ix) loss of reputation; (x) loss of, damage to, or corruption of data; or (xi) any indirect, incidental, special or consequential loss of damage however caused (including loss or damage of the type specified in this Section 7).\n\n \n\n7.2      Intel's total cumulative liability to You, including for direct damages for claims relating to this Agreement, and whether for breach of contract, negligence, or for any other reason, will not exceed $100.\n\n \n\n7.3      You acknowledge that the limitations of liability provided in this Section 7 are an essential part of this Agreement. You agree that the limitations of liability provided in this Agreement with respect to Intel will be conveyed to and made binding upon any customer of Yours that acquires the Redistributables.\n\n \n\n8.     USER SUBMISSIONS. Should you provide Intel with comments, modifications, corrections, enhancements or other input (\"Feedback\") related to the Materials, Intel will be free to use, disclose, reproduce, license or otherwise distribute or exploit the Feedback in its sole discretion without any obligations or restrictions of any kind, including without limitation, intellectual property rights or licensing obligations. If You wish to provide Intel with information that You intend to be treated as confidential information, Intel requires that such confidential information be provided pursuant to a non-disclosure agreement (\"NDA\"); please contact Your Intel representative to ensure the proper NDA is in place.\n\n \n\n9.     NON-DISCLOSURE. Information provided by Intel to You may include information marked as confidential. You must treat such information as confidential under the terms of the applicable NDA between Intel and You. If You have not entered into an NDA with Intel, You must not disclose, distribute or make use of any information marked as confidential, except as expressly authorized in writing by Intel. Intel retains all rights in and to its confidential information specifications, designs, engineering details, discoveries, inventions, patents, copyrights, trademarks, trade secrets, and other proprietary rights relating to the Materials. Any breach by You of the confidentiality obligations provided for in this Section 9 will cause irreparable injury to Intel for which money damages may be inadequate to compensate Intel for losses arising from such a breach. Intel may obtain equitable relief, including injunctive relief, if You breach or threaten to breach Your confidentiality obligations.\n\n \n\n10.  TERM AND TERMINATION. This Agreement becomes effective on the date You accept this Agreement and will continue until terminated as provided for in this Agreement. The term for any Pre-Release Materials terminates upon release of a commercial version. This Agreement will terminate if You are in breach of any of its terms and conditions. Upon termination, You will promptly destroy the Materials and all copies. In the event of termination of this Agreement, Your license to any Redistributables distributed by You in accordance with the terms and conditions of this Agreement, prior to the effective date of such termination, will survive any such termination of this Agreement. Sections 1, 2.1.D(4)(v), 2.2, 2.3.A(iii), 2.3.B(iii), 3.3, 5, 6, 7, 8, 9, 10 (with respect to these survival provisions in the last sentence), and 12 will survive expiration or termination of this Agreement.\n\n \n\n11.  U.S. GOVERNMENT RESTRICTED RIGHTS. The technical data and computer software covered by this license is a \"Commercial Item,\" as such term is defined by the FAR 2.101 (48 C.F.R. 2.101) and is \"commercial computer software\" and \"commercial computer software documentation\" as specified under FAR 12.212 (48 C.F.R. 12.212) or DFARS 227.7202 (48 C.F.R. 227.7202), as applicable. This commercial computer software and related documentation is provided to end users for use by and on behalf of the U.S. Government with only those rights as are granted to all other end users pursuant to the terms and conditions of this Agreement.\n\n \n\n12.  GENERAL PROVISIONS.\n\n \n\n12.1    ENTIRE AGREEMENT. This Agreement contains the complete and exclusive agreement and understanding between the parties concerning the subject matter of this Agreement, and supersedes all prior and contemporaneous proposals, agreements, understanding, negotiations, representations, warranties, conditions, and communications, oral or written, between the parties relating to the same subject matter. Each party acknowledges and agrees that in entering into this Agreement it has not relied on, and will not be entitled to rely on, any oral or written representations, warranties, conditions, understanding, or communications between the parties that are not expressly set forth in this Agreement. The express provisions of this Agreement control over any course of performance, course of dealing, or usage of the trade inconsistent with any of the provisions of this Agreement. The provisions of this Agreement will prevail notwithstanding any different, conflicting, or additional provisions that may appear on any purchase order, acknowledgement, invoice, or other writing issued by either party in connection with this Agreement. No modification or amendment to this Agreement will be effective unless in writing and signed by authorized representatives of each party, and must specifically identify this Agreement by its title and version (e.g., \"Intel End User License Agreement for Developer Tools (Version October 2021)\"); except that Intel may make changes to this Agreement as it distributes new versions of the Materials. When changes are made, Intel will make a new version of the Agreement available on its website. If You received a copy of this Agreement translated into another language, the English language version of this Agreement will prevail in the event of any conflict between versions.\n\n \n\n12.2    EXPORT. You acknowledge that the Materials and all related technical information are subject to export controls and you agree to comply with all laws and regulations of the United States and other applicable governments governing export, re-export, import, transfer, distribution, and use of the Materials. In particular, but without limitation, the Materials may not be exported or re-exported (i) into any U.S. embargoed countries or (ii) to any person or entity listed on a denial order published by the U.S. government or any other applicable governments. By using the Materials, You represent and warrant that You are not located in any such country or on any such list. You also agree that You will not use the Materials for, or sell or transfer them to a third party who is known or suspected to be involved in, any purposes prohibited by the U.S. government or other applicable governments, including, without limitation, the development, design, manufacture, or production of nuclear, missile, chemical or biological weapons.\n\n \n\n12.3    GOVERNING LAW, JURISDICTION, AND VENUE. All disputes arising out of or related to this Agreement, whether based on contract, tort, or any other legal or equitable theory, will in all respects be governed by, and construed and interpreted under, the laws of the United States of America and the State of Delaware, without reference to conflict of laws principles. The parties agree that the United Nations Convention on Contracts for the International Sale of Goods (1980) is specifically excluded from and will not apply to this Agreement. All disputes arising out of or related to this Agreement, whether based on contract, tort, or any other legal or equitable theory, will be subject to the exclusive jurisdiction of the courts of the State of Delaware or of the Federal courts sitting in that State. Each party submits to the personal jurisdiction of those courts and waives all objections to that jurisdiction and venue for those disputes.\n\n \n\n12.4    SEVERABILITY. The parties intend that if a court holds that any provision or part of this Agreement is invalid or unenforceable under applicable law, the court will modify the provision to the minimum extent necessary to make it valid and enforceable, or if it cannot be made valid and enforceable, the parties intend that the court will sever and delete the provision or part from this Agreement. Any change to or deletion of a provision or part of this Agreement under this Section will not affect the validity or enforceability of the remainder of this Agreement, which will continue in full force and effect.\n\n \n\n12. Additional Third Party Program Files\n-------------------------------------------------------------\n\nThe following third party programs have their own third party program\nfiles. These additional third party program files are as follows:\n\n12.1. Intel(R) oneAPI Threading Building Blocks (TBB)\n      third-party-programs-TBB.txt\n      \n12.2. Intel(R) Open Image Denoise (OIDN)\n      third-party-programs-OIDN.txt file.\n\n12.3. oneAPI DPC++ Compiler\n      third-party-programs-DPCPP.txt file.\n\n12.4. Intel(R) oneAPI DPC++/C++ Compiler\n      third-party-programs-oneAPI-DPCPP.txt file.\n\n"
        },
        {
          "name": "tutorials",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}