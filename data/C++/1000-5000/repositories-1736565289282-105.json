{
  "metadata": {
    "timestamp": 1736565289282,
    "page": 105,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjExMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "JakubVojvoda/design-patterns-cpp",
      "stars": 4262,
      "defaultBranch": "master",
      "files": [
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 0.8642578125,
          "content": "cmake_minimum_required(VERSION 3.5)\n\nproject(CppDesignPatterns)\n\nset(PATTERNS\n    abstract-factory\n    adapter\n    bridge\n    builder\n    chain-of-responsibility\n    command\n    composite\n    decorator\n    facade\n    factory-method\n    flyweight\n    interpreter\n    iterator\n    mediator\n    memento\n    observer\n    prototype\n    proxy\n    singleton\n    state\n    strategy\n    template-method\n    visitor\n)\n\nforeach(_dir IN ITEMS ${PATTERNS})\n    file(GLOB _files \"${_dir}/*.cpp\")\n    message(STATUS \"Pattern `${_dir}':\")\n\n    foreach(_file IN ITEMS ${_files})\n\n        get_filename_component(_file_name\n                                ${_file} NAME\n        )\n\n        set(_project_name \"${_file_name}\")\n        message(STATUS \"  ${_dir}/${_file_name} is going to be built\")\n        \n        add_executable(${_project_name} \"${_dir}/${_file_name}\")\n    endforeach()\n    \nendforeach()\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0478515625,
          "content": "The MIT License\n\nCopyright (c) 2016 Jakub Vojvoda\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.5205078125,
          "content": "## C++ Design Patterns\n\nSoftware design patterns are general reusable solutions to problems which occur\nover and over again in object-oriented design enviroment. It is not a finished \ndesign that can be transformed into source code directly, but it is template how\nto solve the problem. We can classify them by purpose into creational (abstract \nthe instantiation process), structure (how classes and objects are composed to form \nlarger structures) and behavioral patterns (the assignment of responsibilities between \nobjects).  \n\n#### Creational Patterns \n- [Abstract Factory], families of product objects\n- [Builder], how a composite object gets created\n- [Factory Method], subclass of object that is instantiated\n- [Prototype], class of object that is instantiated\n- [Singleton], the sole instance of a class \n#### Structural Patterns\n- [Adapter], interface to an object\n- [Bridge], implementation of an object \n- [Composite], structure and composition of an object\n- [Decorator], responsibilities of an object without subclassing\n- [Façade], interface to a subsystem\n- [Flyweight], storage costs of objects\n- [Proxy], how an object is accessed (its location)\n#### Behavioral Patterns\n- [Chain of Responsibility], object that can fulfill a request\n- [Command], when and how a request is fulfilled\n- [Interpreter], grammar and interpretation of a language\n- [Iterator], how an aggregate's elements are accessed\n- [Mediator], how and which objects interact with each other\n- [Memento], what private information is stored outside an object, and when \n- [Observer], how the dependent objects stay up to date\n- [State], states of an object\n- [Strategy], an algorithm\n- [Template Method], steps of an algorithm\n- [Visitor], operations that can be applied to objects without changing their classes\n\n### Other Languages\nIn my repository you can find implementation of desgin patterns also in languages as \n\n* [Design Patterns in C++]\n* [Design Patterns in Java]\n* [Design Patterns in Python]\n\n### References\nDesign patterns in this repository are based on\n\n* [Design Patterns by The \"Gang of Four\"]\n* [Head First: Design Patterns]\n* [Wikipedia]\n\n[Design Patterns in C++]: https://github.com/JakubVojvoda/design-patterns-cpp\n[Design Patterns in Java]: https://github.com/JakubVojvoda/design-patterns-java\n[Design Patterns in Python]: https://github.com/JakubVojvoda/design-patterns-python\n\n[Design Patterns by The \"Gang of Four\"]: https://en.wikipedia.org/wiki/Design_Patterns\n[Head First: Design Patterns]: http://www.headfirstlabs.com/books/hfdp/ \n[Wikipedia]: https://en.wikipedia.org/wiki/Software_design_pattern\n\n[Abstract Factory]: https://github.com/JakubVojvoda/design-patterns-cpp/tree/master/abstract-factory\n[Builder]: https://github.com/JakubVojvoda/design-patterns-cpp/tree/master/builder\n[Factory Method]: https://github.com/JakubVojvoda/design-patterns-cpp/tree/master/factory-method\n[Prototype]: https://github.com/JakubVojvoda/design-patterns-cpp/tree/master/prototype\n[Singleton]: https://github.com/JakubVojvoda/design-patterns-cpp/tree/master/singleton\n[Adapter]: https://github.com/JakubVojvoda/design-patterns-cpp/tree/master/adapter\n[Bridge]: https://github.com/JakubVojvoda/design-patterns-cpp/tree/master/bridge \n[Composite]: https://github.com/JakubVojvoda/design-patterns-cpp/tree/master/composite\n[Decorator]: https://github.com/JakubVojvoda/design-patterns-cpp/tree/master/decorator\n[Façade]: https://github.com/JakubVojvoda/design-patterns-cpp/tree/master/facade\n[Flyweight]: https://github.com/JakubVojvoda/design-patterns-cpp/tree/master/flyweight\n[Proxy]: https://github.com/JakubVojvoda/design-patterns-cpp/tree/master/proxy\n[Chain of Responsibility]: https://github.com/JakubVojvoda/design-patterns-cpp/tree/master/chain-of-responsibility\n[Command]: https://github.com/JakubVojvoda/design-patterns-cpp/tree/master/command\n[Interpreter]: https://github.com/JakubVojvoda/design-patterns-cpp/tree/master/interpreter\n[Iterator]: https://github.com/JakubVojvoda/design-patterns-cpp/tree/master/iterator\n[Mediator]: https://github.com/JakubVojvoda/design-patterns-cpp/tree/master/mediator\n[Memento]: https://github.com/JakubVojvoda/design-patterns-cpp/tree/master/memento\n[Observer]: https://github.com/JakubVojvoda/design-patterns-cpp/tree/master/observer\n[State]: https://github.com/JakubVojvoda/design-patterns-cpp/tree/master/state\n[Strategy]: https://github.com/JakubVojvoda/design-patterns-cpp/tree/master/strategy\n[Template Method]: https://github.com/JakubVojvoda/design-patterns-cpp/tree/master/template-method\n[Visitor]: https://github.com/JakubVojvoda/design-patterns-cpp/tree/master/visitor\n"
        },
        {
          "name": "abstract-factory",
          "type": "tree",
          "content": null
        },
        {
          "name": "adapter",
          "type": "tree",
          "content": null
        },
        {
          "name": "bridge",
          "type": "tree",
          "content": null
        },
        {
          "name": "builder",
          "type": "tree",
          "content": null
        },
        {
          "name": "chain-of-responsibility",
          "type": "tree",
          "content": null
        },
        {
          "name": "command",
          "type": "tree",
          "content": null
        },
        {
          "name": "composite",
          "type": "tree",
          "content": null
        },
        {
          "name": "decorator",
          "type": "tree",
          "content": null
        },
        {
          "name": "facade",
          "type": "tree",
          "content": null
        },
        {
          "name": "factory-method",
          "type": "tree",
          "content": null
        },
        {
          "name": "flyweight",
          "type": "tree",
          "content": null
        },
        {
          "name": "interpreter",
          "type": "tree",
          "content": null
        },
        {
          "name": "iterator",
          "type": "tree",
          "content": null
        },
        {
          "name": "mediator",
          "type": "tree",
          "content": null
        },
        {
          "name": "memento",
          "type": "tree",
          "content": null
        },
        {
          "name": "observer",
          "type": "tree",
          "content": null
        },
        {
          "name": "prototype",
          "type": "tree",
          "content": null
        },
        {
          "name": "proxy",
          "type": "tree",
          "content": null
        },
        {
          "name": "singleton",
          "type": "tree",
          "content": null
        },
        {
          "name": "state",
          "type": "tree",
          "content": null
        },
        {
          "name": "strategy",
          "type": "tree",
          "content": null
        },
        {
          "name": "template-method",
          "type": "tree",
          "content": null
        },
        {
          "name": "visitor",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}