{
  "metadata": {
    "timestamp": 1736565290994,
    "page": 107,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjExMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/orbit",
      "stars": 4252,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".allstar",
          "type": "tree",
          "content": null
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.1435546875,
          "content": "---\nLanguage:        Cpp\nBasedOnStyle:  Google\nDerivePointerAlignment: false\nColumnLimit: 100\n---\nLanguage:        Proto\nBasedOnStyle:  Google\n...\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 2.712890625,
          "content": "# Copyright (c) 2020 The Orbit Authors. All rights reserved.\n# Use of this source code is governed by a BSD-style license that can be\n# found in the LICENSE file.\n---\nChecks: >\n  -*,\n  abseil-*,\n  bugprone-*,\n  cert-*,\n  -cert-err58-cpp,\n  -cert-dcl16-c\n  cppcoreguidelines-*,\n  -cppcoreguidelines-special-member-functions,\n  -cppcoreguidelines-avoid-magic-numbers,\n  -cppcoreguidelines-pro-type-vararg,\n  -cppcoreguidelines-non-private-member-variables-in-classes,\n  -cppcoreguidelines-pro-bounds-pointer-arithmetic,\n  -cppcoreguidelines-avoid-non-const-global-variables,\n  -cppcoreguidelines-owning-memory,\n  misc-*,\n  -misc-non-private-member-variables-in-classes,\n  -misc-use-anonymous-namespace,\n  google-*,\n  -google-default-arguments,\n  -google-runtime-references,\n  modernize-*,\n  -modernize-deprecated-headers,\n  -modernize-use-noexcept,\n  -modernize-use-trailing-return-type,\n  performance-*,\n  -performance-noexcept-move-constructor,\n  readability-*,\n  -readability-identifier-length,\n  -readability-function-cognitive-complexity,\n  -readability-magic-numbers,\n  -readability-non-const-parameter,\n  -readability-uppercase-literal-suffix,\n\n\nHeaderFilterRegex: ''\nAnalyzeTemporaryDtors: false\nCheckOptions:\n  - key:             google-readability-namespace-comments.SpacesBeforeComments\n    value:           '2'\n  - key:             readability-identifier-naming.ClassCase\n    value:           'CamelCase'\n  - key:             readability-identifier-naming.ConstexprVariableCase\n    value:           'CamelCase'\n  - key:             readability-identifier-naming.ConstexprVariablePrefix\n    value:           'k'\n  - key:             readability-identifier-naming.StaticConstantCase\n    value:           'CamelCase'\n  - key:             readability-identifier-naming.StaticConstantPrefix\n    value:           'k'\n  - key:             readability-identifier-naming.EnumCase\n    value:           'CamelCase'\n  - key:             readability-identifier-naming.EnumConstantCase\n    value:           'CamelCase'\n  - key:             readability-identifier-naming.EnumConstantPrefix\n    value:           'k'\n# Let's enable this once we got rid of the snake_case data functions.\n#  - key:             readability-identifier-naming.FunctionCase\n#    value:           'CamelCase'\n  - key:             readability-identifier-naming.LocalVariableCase\n    value:           'lower_case'\n  - key:             readability-identifier-naming.ParameterCase\n    value:           'lower_case'\n  - key:             readability-identifier-naming.StructCase\n    value:           'CamelCase'\n  - key:             readability-braces-around-statements.ShortStatementLines\n    value:           '1'\n  - key:             cppcoreguidelines-avoid-do-while.IgnoreMacros\n    value:           'true'\n...\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.443359375,
          "content": "# This list contains commits for git blame to ignore\n# These are usually commits with bulk changes like\n# clang-format.\n\n7e1ae51539672920f3cb2441bce184658dae4e1e  # Initial clang-format\ncea9ffd533106b59e79cc9a2e80c595691b24576  # Bulk clang-format after ColumnLimit change\n748d5b126b19690a5d20d8e1aff375e4d4e35564  # Bulk clang-format after ColumnLimit change\n7a5bc789f9d3555a06a765a1f8bb2ed2938b1506  # Bulk clang-format after switch to clang-format-14\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.01171875,
          "content": "*.opr -text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.203125,
          "content": "build*/\n/.idea/\n/cmake-build*/\ncompile_commands.json\n/.vscode/\n/conan.log\n\n# Ignore generated and compiled Python code\n*_pb2.py\n*.egg-info\n__pycache__\n*.pyc\n\n# clangd\n.clangd/\n/.cache/\n\n# Visual Studio\n/.vs/\n"
        },
        {
          "name": "CMakeGraphVizOptions.cmake",
          "type": "blob",
          "size": 1.11328125,
          "content": "# Copyright (c) 2020 The Orbit Authors. All rights reserved.\n# Use of this source code is governed by a BSD-style license that can be\n# found in the LICENSE file.\n\n# Clean up stuff in OrbitQt\nset (IGNORE_OTHER_EXE \"OrbitTest.*;.*Fuzzer;.*Tests;\")\nset (IGNORE_CONAN_LIB \"CONAN_LIB::.*;\")\nset (IGNORE_GTEST \"GTest;::gtest;\")\nset (IGNORE_QT \"Qt5::;\")\nset (IGNORE_WEBUI \"WebUI;QWebChannelExtractor;\")\nset (IGNORE_INNER_LLVM \"::llvm_headers;::llvm_binary_format;::llvm_support;::llvm_demangle;::llvm_bit_reader;::llvm_bitstream_reader;::llvm_core;::llvm_remarks;::llvm_mc;::llvm_debuginfo_codeview;::llvm_debuginfo_msf;::llvm_mc_parser;::llvm_textapi;::llvm_debuginfo_dwarf;::llvm_debuginfo_pdb;\")\n\n# Additional cleanup for OrbitService\nset (IGNORE_CLIENT_GGP \"OrbitClientGgp;OrbitCaptureGgpService;OrbitTriggerCaptureVulkanLayer;OrbitCaptureGgpClient\")\n\nstring(CONCAT GRAPHVIZ_IGNORE_TARGETS \n    \"${IGNORE_OTHER_EXE}\"\n    \"${IGNORE_CONAN_LIB}\"\n    \"${IGNORE_GTEST}\"\n    \"${IGNORE_QT}\"\n    \"${IGNORE_WEBUI}\"\n    \"${IGNORE_INNER_LLVM}\"\n    \"${IGNORE_CLIENT_GGP}\")\n\nset(GRAPHVIZ_GENERATE_PER_TARGET FALSE)\nset(GRAPHVIZ_GENERATE_DEPENDERS FALSE)\n\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 11.21875,
          "content": "# Copyright (c) 2020 The Orbit Authors. All rights reserved.\n# Use of this source code is governed by a BSD-style license that can be\n# found in the LICENSE file.\n\ncmake_minimum_required(VERSION 3.15)\n\nproject(Orbit C CXX ASM)\n\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})\n\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY})\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY})\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY})\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY})\n\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_LIBRARY_OUTPUT_DIRECTORY})\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO ${CMAKE_LIBRARY_OUTPUT_DIRECTORY})\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL ${CMAKE_LIBRARY_OUTPUT_DIRECTORY})\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${CMAKE_LIBRARY_OUTPUT_DIRECTORY})\n\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n  add_compile_options(-Werror=all\n                      -Werror=abstract-final-class\n                      -Werror=float-conversion\n                      -Werror=format=2\n                      -Werror=ignored-attributes\n                      -Werror=implicit-fallthrough\n                      -Werror=inconsistent-missing-override\n                      -Werror=old-style-cast\n                      -Werror=unused-parameter\n                      -Werror=unused-variable\n                      -Werror=writable-strings\n                      -Werror=sign-compare\n                      -Werror=thread-safety)\n\n  if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 8)\n    add_compile_options(-Werror=defaulted-function-deleted\n                        # Required by Google-internal builds\n                        -Werror=ctad-maybe-unsupported)\n  endif()\n\nelseif (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n  add_compile_options(-Werror=all\n                      # gcc does not behave consistently here; what is fine with gcc9 fails with gcc10\n                      # and vice versa, see https://github.com/google/orbit/issues/1624 for details.\n                      -Wno-stringop-truncation\n                      -Werror=float-conversion\n                      -Werror=format=2\n                      -Werror=ignored-attributes\n                      -Werror=old-style-cast\n                      -Werror=unused-parameter\n                      -Werror=unused-variable\n                      -Werror=sign-compare\n                      # These seem to be buggy in GCC 11 and 12:\n                      -Wno-maybe-uninitialized\n                      -Wno-uninitialized\n                      -Wno-stringop-overflow)\nendif()\n\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\noption(WITH_GUI \"Setting this option will enable the Qt-based UI client.\" ON)\n\nif(NOT WIN32)\n  option(WITH_VULKAN \"Setting this option will enable Vulkan\" ON)\n\n  if(WITH_VULKAN)\n    add_definitions(-DVULKAN_ENABLED)\n  endif()\nendif()\n\n# This is only for designated initializers\nif(WIN32)\n  set(CMAKE_CXX_STANDARD 20 CACHE STRING \"C++ Standard\" FORCE)\nelse()\n  set(CMAKE_CXX_STANDARD 17)\nendif()\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_BINARY_DIR}\" \"${CMAKE_SOURCE_DIR}/cmake\")\n\nif (NOT WIN32)\n  # Make all executables position independent on Linux\n\n  # Note that we need to have both. If we omit \"-pie\"\n  # option executables are built as ET_EXEC, if we\n  # omit set(CMAKE_POSITION_INDEPENDENT_CODE ON)\n  # Ninja configuration stops working because for\n  # some reason in config stage it compile code for tests\n  # without -fPIC but tries to link them with -pie\n\n  string(APPEND CMAKE_EXE_LINKER_FLAGS \" -pie\")\n  set(CMAKE_POSITION_INDEPENDENT_CODE ON)\nendif()\n\n\nfind_package(Threads REQUIRED)\nfind_package(xxHash REQUIRED)\nfind_package(concurrentqueue REQUIRED)\nfind_package(gte REQUIRED)\nfind_package(libprotobuf-mutator REQUIRED)\nfind_package(LZMA REQUIRED)\nfind_package(absl REQUIRED)\nfind_package(LLVM REQUIRED)\nfind_package(gRPC REQUIRED)\nfind_package(capstone REQUIRED)\nfind_package(protobuf REQUIRED)\nfind_package(outcome REQUIRED)\nfind_package(ZLIB REQUIRED)\n\nif(WITH_GUI)\n  find_package(OpenGL REQUIRED)\n  find_package(\n    Qt5 CONFIG REQUIRED\n    COMPONENTS Core\n               Network\n               Test\n               Widgets)\n  find_package(Libssh2 REQUIRED)\nendif()\n\nfind_package(Filesystem REQUIRED)\n\nif(WIN32)\n  find_package(DiaSdk REQUIRED)\n  find_package(krabsetw REQUIRED)\n  find_package(PresentMon REQUIRED)\nelse()\n  find_package(libbase REQUIRED)\n  find_package(liblog REQUIRED)\n  find_package(libprocinfo REQUIRED)\n  if(WITH_VULKAN)\n    find_package(volk REQUIRED)\n    find_package(VulkanHeaders REQUIRED)\n    find_package(vulkan-validationlayers REQUIRED)\n  endif()\nendif()\n\ninclude(\"cmake/protobuf.cmake\")\ninclude(\"cmake/grpc_helper.cmake\")\ninclude(\"cmake/fuzzing.cmake\")\ninclude(\"cmake/tests.cmake\")\ninclude(\"cmake/iwyu.cmake\")\nenable_testing()\n\n# Set preprocessor defines These are only necessary for windows, but we will\n# define them on all platforms, to keep the builds similar as possible.\nadd_definitions(-DNOMINMAX)\nadd_definitions(-DUNICODE -D_UNICODE)\n\nif (MSVC)\n  # Build with Multiple Processes.\n  add_compile_options(\"/MP\")\n  # Set source and execution character sets to UTF-8.\n  add_compile_options(\"/utf-8\")\n  # Set warning level for external includes.\n  string(APPEND CMAKE_CXX_FLAGS \" /experimental:external /external:anglebrackets /external:W0\")\n  string(APPEND CMAKE_C_FLAGS \" /experimental:external /external:anglebrackets /external:W0\")\n  # Treat all compiler warnings as errors.\n  add_compile_options(\"/WX\")\nendif()\n\nif(WIN32)\n  add_definitions(-DWIN32)\n  add_subdirectory(src/WindowsCaptureService)\n  add_subdirectory(src/WindowsProcessLauncherService)\n  add_subdirectory(src/WindowsProcessService)\n  add_subdirectory(src/WindowsTracing)\n  add_subdirectory(src/WindowsUtils)\n  add_subdirectory(third_party/minhook)\nelse()\n  add_subdirectory(src/LinuxCaptureService)\n  add_subdirectory(src/FakeClient)\n  add_subdirectory(src/LinuxTracing)\n  add_subdirectory(src/LinuxTracingIntegrationTests)\n  add_subdirectory(src/MemoryTracing)\n  add_subdirectory(src/OrbitClientGgp)\n  add_subdirectory(src/OrbitCaptureGgpClient)\n  add_subdirectory(src/OrbitCaptureGgpService)\n  add_subdirectory(src/ProcessService)\n  add_subdirectory(src/TracepointService)\n  add_subdirectory(src/UserSpaceInstrumentation)\n  add_subdirectory(third_party/libunwindstack)\n  if(WITH_VULKAN)\n    add_subdirectory(src/OrbitTriggerCaptureVulkanLayer)\n    add_subdirectory(src/OrbitVulkanLayer)\n    add_subdirectory(src/VulkanTutorial)\n  endif()\nendif()\n\nadd_subdirectory(src/Api)\nadd_subdirectory(src/ApiInterface)\nadd_subdirectory(src/ApiLoader)\nadd_subdirectory(src/ApiUtils)\nadd_subdirectory(src/CaptureClient)\nadd_subdirectory(src/CaptureEventProducer)\nadd_subdirectory(src/CaptureFile)\nadd_subdirectory(src/CaptureServiceBase)\nadd_subdirectory(src/ClientData)\nadd_subdirectory(src/ClientFlags)\nadd_subdirectory(src/ClientModel)\nadd_subdirectory(src/ClientProtos)\nadd_subdirectory(src/ClientServices)\nadd_subdirectory(src/Containers)\nadd_subdirectory(src/CrashService)\nadd_subdirectory(src/DisplayFormats)\nadd_subdirectory(src/FakeProducerSideService)\nadd_subdirectory(src/FuzzingUtils)\nadd_subdirectory(src/GrpcProtos)\nadd_subdirectory(src/Introspection)\nadd_subdirectory(src/ModuleUtils)\nadd_subdirectory(src/ObjectUtils)\nadd_subdirectory(src/OrbitAccessibility)\nadd_subdirectory(src/OrbitBase)\nadd_subdirectory(src/OrbitPaths)\nadd_subdirectory(src/OrbitTest)\nadd_subdirectory(src/OrbitVersion)\nadd_subdirectory(src/PresetFile)\nadd_subdirectory(src/ProducerEventProcessor)\nadd_subdirectory(src/ProducerSideChannel)\nadd_subdirectory(src/ProducerSideService)\nadd_subdirectory(src/Service)\nadd_subdirectory(src/StringManager)\nadd_subdirectory(src/SymbolProvider)\nadd_subdirectory(src/Symbols)\nadd_subdirectory(src/Statistics)\nadd_subdirectory(src/Test)\nadd_subdirectory(src/TestUtils)\n\nif(WITH_GUI)\n  add_subdirectory(src/CaptureFileInfo)\n  add_subdirectory(src/ClientSymbols)\n  add_subdirectory(src/CodeReport)\n  add_subdirectory(src/CodeViewer)\n  add_subdirectory(src/CodeViewerDemo)\n  add_subdirectory(src/ConfigWidgets)\n  add_subdirectory(src/CommandLineUtils)\n  add_subdirectory(src/DataViews)\n  add_subdirectory(src/Http)\n  add_subdirectory(src/Mizar)\n  add_subdirectory(src/MizarBase)\n  add_subdirectory(src/MizarData)\n  add_subdirectory(src/MizarModels)\n  add_subdirectory(src/MizarWidgets)\n  add_subdirectory(src/MizarStatistics)\n  add_subdirectory(src/Orbit)\n  add_subdirectory(src/OrbitGl)\n  add_subdirectory(src/OrbitSsh)\n  add_subdirectory(src/OrbitSshQt)\n  add_subdirectory(src/OrbitQt)\n  add_subdirectory(src/QtTestUtils)\n  add_subdirectory(src/QtUtils)\n  add_subdirectory(src/RemoteSymbolProvider)\n  add_subdirectory(src/SessionSetup)\n  add_subdirectory(src/SourcePathsMapping)\n  add_subdirectory(src/SourcePathsMappingDialogDemo)\n  add_subdirectory(src/SourcePathsMappingUI)\n  add_subdirectory(src/SshQtTestUtils)\n  add_subdirectory(src/Style)\n  add_subdirectory(src/SyntaxHighlighter)\n  add_subdirectory(src/UtilWidgets)\nendif()\n\nif(WIN32)\n  # Startup Project\n  set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT\n                                                              \"Orbit\")\nendif()\n\n# Collecting third-party licenses\nfile(COPY third_party/concurrentqueue/LICENSE.md DESTINATION ${CMAKE_BINARY_DIR}/licenses/concurrentqueue/)\nfile(COPY third_party/xxHash-r42/LICENSE DESTINATION ${CMAKE_BINARY_DIR}/licenses/xxhash/)\nfile(COPY third_party/gte/LICENSE_1_0.txt DESTINATION ${CMAKE_BINARY_DIR}/licenses/gte/)\nfile(COPY third_party/Qt/LICENSE.LGPLv3 DESTINATION ${CMAKE_BINARY_DIR}/licenses/Qt/)\nfile(COPY third_party/Outcome/LICENCE DESTINATION ${CMAKE_BINARY_DIR}/licenses/Outcome/licenses/)\nfile(COPY third_party/capstone/LICENSE.TXT DESTINATION ${CMAKE_BINARY_DIR}/licenses/capstone/licenses/)\nfile(COPY third_party/LLVM/LICENSE.TXT DESTINATION ${CMAKE_BINARY_DIR}/licenses/LLVM/licenses/)\nfile(COPY third_party/lzma_sdk/LICENSE DESTINATION ${CMAKE_BINARY_DIR}/licenses/lzma_sdk/licenses/)\nfile(COPY third_party/conan/LICENSE.md DESTINATION ${CMAKE_BINARY_DIR}/licenses/conan/licenses/)\nfile(COPY third_party/vulkan/LICENSE.txt DESTINATION ${CMAKE_BINARY_DIR}/licenses/vulkan/licenses/)\nfile(COPY third_party/krabsetw/LICENSE DESTINATION ${CMAKE_BINARY_DIR}/licenses/krabsetw/)\nfile(COPY \"third_party/DIA SDK/LICENSE\" DESTINATION \"${CMAKE_BINARY_DIR}/licenses/DIA SDK/\")\nfile(COPY third_party/cppwin32/LICENSE DESTINATION ${CMAKE_BINARY_DIR}/licenses/cppwin32/)\nfile(COPY third_party/cppwin32/cppwin32/winmd/LICENSE DESTINATION ${CMAKE_BINARY_DIR}/licenses/winmd/)\nfile(COPY third_party/minhook/LICENSE.txt DESTINATION ${CMAKE_BINARY_DIR}/licenses/minhook/)\nfile(COPY third_party/PresentMon/LICENSE.txt DESTINATION ${CMAKE_BINARY_DIR}/licenses/PresentMon/)\n\n\n# Generating license NOTICE files\ninclude(\"cmake/collect_licenses.cmake\")\nGenerateThirdPartyLicenseFile(\"${CMAKE_BINARY_DIR}/NOTICE\" \"${CMAKE_BINARY_DIR}/licenses/\")\n"
        },
        {
          "name": "CODEOWNERS",
          "type": "blob",
          "size": 0.306640625,
          "content": "# Copyright (c) 2022 The Orbit Authors. All rights reserved.\n# Use of this source code is governed by a BSD-style license that can be\n# found in the LICENSE file.\n\n# Following \"security hardening for github actions\", only Orbit core team\n# members can make changes to the actions.\n/.github/workflows/ @google/orbit"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 4.423828125,
          "content": "# Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of\nexperience, education, socio-economic status, nationality, personal appearance,\nrace, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n*   Using welcoming and inclusive language\n*   Being respectful of differing viewpoints and experiences\n*   Gracefully accepting constructive criticism\n*   Focusing on what is best for the community\n*   Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n*   The use of sexualized language or imagery and unwelcome sexual attention or\n    advances\n*   Trolling, insulting/derogatory comments, and personal or political attacks\n*   Public or private harassment\n*   Publishing others' private information, such as a physical or electronic\n    address, without explicit permission\n*   Other conduct which could reasonably be considered inappropriate in a\n    professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, or to ban temporarily or permanently any\ncontributor for other behaviors that they deem inappropriate, threatening,\noffensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\nThis Code of Conduct also applies outside the project spaces when the Project\nSteward has a reasonable belief that an individual's behavior may have a\nnegative impact on the project or its community.\n\n## Conflict Resolution\n\nWe do not believe that all conflict is bad; healthy debate and disagreement\noften yield positive results. However, it is never okay to be disrespectful or\nto engage in behavior that violates the project’s code of conduct.\n\nIf you see someone violating the code of conduct, you are encouraged to address\nthe behavior directly with those involved. Many issues can be resolved quickly\nand easily, and this gives people more control over the outcome of their\ndispute. If you are unable to resolve the matter for any reason, or if the\nbehavior is threatening or harassing, report it. We are dedicated to providing\nan environment where participants feel welcome and safe.\n\nReports should be directed to Pierric Gimmig (pierric.gimmig@gmail.com) or\nRonald Wotzlaw (wotzlaw@google.com), the Project Stewards for ORBIT. It is the\nProject Steward’s duty to receive and address reported violations of the\ncode of conduct. They will then work with a committee consisting of\nrepresentatives from the Open Source Programs Office and the Google Open Source\nStrategy team. If for any reason you are uncomfortable reaching out to the\nProject Steward, please email opensource@google.com.\n\nWe will investigate every complaint, but you may not receive a direct response.\nWe will use our discretion in determining when and how to follow up on reported\nincidents, which may range from not taking action to permanent expulsion from\nthe project and project-sponsored spaces. We will notify the accused of the\nreport and provide them an opportunity to discuss it before any action is taken.\nThe identity of the reporter will be omitted from the details of the report\nsupplied to the accused. In potentially harmful situations, such as ongoing\nharassment or threats to anyone's safety, we may take action without notice.\n\n## Attribution\n\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.4,\navailable at\nhttps://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.8271484375,
          "content": "# How to Contribute\n\nWe'd love to accept your patches and contributions to this project. There are\njust a few small guidelines you need to follow.\n\n## Contributor License Agreement\n\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution;\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to <https://cla.developers.google.com/> to see\nyour current agreements on file or to sign a new one.\n\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\n\n## Code reviews\n\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\n[GitHub Help](https://help.github.com/articles/about-pull-requests/) for more\ninformation on using pull requests.\n\n## Community Guidelines\n\nThis project follows [Google's Open Source Community\nGuidelines](https://opensource.google/conduct/).\n\n## Pull Request Guidelines\n\nWe have the following guidelines for pull requests:\n\n* Each pull request must contain exactly **one** commit (excluding fixup commits) and must be submitted using **squash merges**.\n* Each pull request (and per above each commit) must **logically make a single change**. Note that the boundary of this is fuzzy and it’s up to authors to decide whether they combine multiple commits into a single commit for review. Reviewers should point out obvious violations (such as, medium to large scale renaming as part of a functionality change), but smaller violations should be allowed (such as, renaming a function as part of a functionality change).\n* Every pull request (and per above every commit) must include a *what* and a *why* in the change description. The “why” can be a link to a bug/issue (in which case the bug should contain enough context).\n\n## Commit message Guidelines\n\nCommit messages must follow the following rules:\n\n### Commit header (subject line)\n* One line, 72 characters max, but aim for 50\n* Capitalized (starts with a capital letter)\n* Doesn’t end with a period\n* Imperative style (“Fix bug” rather than “Fixed bug” or “Fixes bug”)\n\n### Commit body\n* Separated from subject line by blank line\n* Wrapped to 72 characters\n* Explain *what* and *why* rather than *how*\n* Add a Test: stanza describing how the change was tested. Examples may be `Test: run OrbitBaseUnitTests` or `Test: start orbit, capture, save, restart orbit, load capture, see that it did not crash`.\n* If possible add a `Bug:` stanza at the end of the commit message to link to existing bugs/issues. Make sure to include http:// - it helps tools recognize the link and let git log reader open it without copy and pasting it first. Example: `Bug: http://b/42`\n\n\n\n"
        },
        {
          "name": "DEVELOPMENT.md",
          "type": "blob",
          "size": 19.4091796875,
          "content": "# Getting started with development\n\nOrbit consists of two parts - the frontend and the collector, also called the service.\nThe collector is responsible for instrumenting the target process and recording\nprofiling events which are then streamed to the frontend, also called the UI.\n\nThe communication between frontend and collector is handled by a [gRPC](https://grpc.io/)\nconnection. gRPC uses HTTP 2.0 as its base communication layer. When talking to a Stadia\ninstance we wrap that once more into an SSH tunnel.\n\n## Platforms\n\nThe frontend is supported on Windows 10 and Linux. The collector currently\nonly works on Linux.\n\nPrevious versions of Orbit supported profiling on Windows, but due to the\npriority shift towards Stadia this support is currently in a non-working state.\nThere are plans to bring it back, but at this point we can't commit to any time\nschedule.\n\nIf you want to try profiling on Windows, we recommend you to download the older 1.0.2\nrelease from GitHub's [releases page](https://github.com/google/orbit/releases).\n\n## Compilers\n\nTo build Orbit you need a compiler capable of C++17. The following ones should be fine.\n\n- GCC 9 and above on Linux\n- Clang 7 and above on Linux\n- MSVC 2019 and above on Windows (MSVC 2017 is no longer supported by some dependencies)\n\n## Dependencies\n\nAll our third-party libraries and dependencies are managed by conan.\n\n### Qt on Linux\n\nThere are some exceptions. On Linux, we rely by default on the distribution's Qt5\nand Mesa installation. This can be changed by modifying the conan package options\n`system_qt` and `system_mesa`, but we recommend to go with the distribution provided\nQt package. You will need at least version 5.12.4 of Qt. The point release is important\nbecause it resolves a [known issue](https://bugreports.qt.io/browse/QTBUG-69683). Note,\nthat Ubuntu 18.04 LTS comes with Qt 5.9 which is NOT sufficient. Ubuntu 20.04 LTS is\nfine though.\n\nIn case you still want to have Qt provided by conan, the simplest way to do that will be\nto change the default values of these two options.\nCheck out `conanfile.py`. There is a python dictionary called `default_options`\ndefined in the python class `OrbitConan`.\n\n### Qt on Windows\n\nOn Windows you have the choice to either let Conan compile Qt from source or use\none of the prebuilt distributions from [The Qt Company](https://qt.io/). (Note that\nas of writing this, you need to register to download the distribution packages.)\n\nWe recommend to use a prebuilt distribution since compiling from source can take\nseveral hours.\n\nIf you decide to compile from source, you don't have to prepare anything.\nYou can skip over the next paragraph and go to \"Building Orbit\".\n\nIf you decide to use a prebuilt Qt distribution, please download and install it\nyourself. Keep in mind the prebuilt has to match your Visual Studio version and\narchitecture. You also have to install the QtWebEngine component which is usually\nnot selected by default in the installer.\n\nAs of writing this the minimum supported Qt version is 5.12.4 but this might change.\nWe recommend the version which we also compile from source. It can be found by checking\n`conanfile.py`. Search for `self.requires(\"qt/`. The version can be found after that string.\n\nAs a next step you have to tell the Orbit build system where Qt is installed by\nsetting an environment variable `Qt5_DIR`. It has to point to the directory\ncontaining the CMake config file `Qt5Config.cmake`. For Qt 5.15.0 installed to\nthe default location the path is `C:\\Qt\\5.15.0\\msvc2019_64\\lib\\cmake\\Qt5`;\n\nYou don't have to set that variable globally. It's fine to set it in a local\nPowerShell when starting the bootstrapping script:\n\n```powershell\n$Env:Qt5_DIR=\"C:\\Qt\\5.15.0\\msvc2019_64\\lib\\cmake\\Qt5\"\n.\\bootstrap-orbit.ps1\n```\n\nThe value of `Qt5_DIR` is persisted in the default conan profiles. You can\ncall `conan profile show default_relwithdebinfo` (after running bootstrap)\nto see the value of `Qt5_DIR`.\n\nIf you have pre-existing `default_*`-profiles and want to switch to prebuilt\nQt distributions you have to either delete these profiles - the build script\nwill regenerate them - or you can manually edit them.\n\nA default profile with Qt compiled from source is pretty much empty:\n\n```\n# default_relwithdebinfo\n\ninclude(msvc2019_relwithdebinfo)\n\n[settings]\n[options]\n[build_requires]\n[env]\n\n```\n\nA default profile prepared for a prebuilt Qt package has two extra lines:\n\n```\n# default_relwithdebinfo\n\ninclude(msvc2019_relwithdebinfo)\n\n[settings]\n[options]\nOrbitProfiler:system_qt=True\n[build_requires]\n[env]\nOrbitProfiler:Qt5_DIR=\"C:\\Qt\\5.15.0\\msvc2019_64\\lib\\cmake\\Qt5\"\n\n```\n\nYou can find all the conan profiles in `%USERPROFILE%\\.conan\\profiles`.\n\n## Building Orbit\n\nOrbit relies on `conan` as its package manager. Conan is written in Python3,\nso make sure you have either Conan installed or at least have Python3 installed.\n\nThe `bootstrap-orbit.{sh,ps1}` will try to install `conan` via `pip3` if not\ninstalled and reachable via `PATH`. Afterwards it calls `build.{sh,ps1}` which\nwill compile Orbit for you.\n\nOn Linux, `python3` should be preinstalled anyway, but you might need to install\npip (package name: `python3-pip`).\n\nOn Windows, one option to install Python is via the Visual Studio Installer.\nAlternatively you can download prebuilts from [python.org](https://www.python.org/)\n(In both cases verify that `pip3.exe` is in the path, otherwise the bootstrap\nscript will not be able to install conan for you.)\n\n## Running Orbit\n\nLike mentioned before, the collector currently only works for Linux. So the following\nonly applies there:\n\n1. Start Orbit via \n```bash\n./build_default_relwithdebinfo/bin/Orbit\n```\n2. Start OrbitService by clicking the button `Start OrbitService`. To obtain scheduling\n   information, the collector needs to run as root, hence this will prompt you for a\n\t password (via [pkexec](https://linux.die.net/man/1/pkexec)). Alternatively, you can \n\t start OrbitService yourself:\n\n```bash\nsudo ./build_default_relwithdebinfo/bin/OrbitService # Start the collector\n```\n\nThe frontend currently has no graphical user interface to connect to a generic\nremote instance. Only Stadia is supported as a special case. \n\nIf you needed remote profiling support you could tunnel the mentioned TCP port through\na SSH connection to an arbitrary Linux server. There are plans on adding generic\nSSH tunneling support but we can't promise any timeframe for that.\n\n## Consistent code styling\n\nWe use `clang-format` to achieve a consistent code styling across\nthe whole code base. You need at least version 7.0.0 of `clang-format`.\n\nPlease ensure that you applied `clang-format` to all your\nfiles in your pull request. Otherwise a presubmit check will fail\nand unfortunately only Googlers have access to the detailed log.\n\nOn Windows, we recommend getting `clang-format` directly from the\nLLVM.org website. They offer binary packages of `clang`, where\n`clang-format` is part of.\n\nVisual Studio 2017+ ships `clang-format` as part of the IDE though.\n(https://devblogs.microsoft.com/cppblog/clangformat-support-in-visual-studio-2017-15-7-preview-1/)\n\nOn most Linux distributions, there is a dedicated package called `clang-format`.\n\nMost modern IDEs provide `clang-format` integration via either an extension\nor directly.\n\nA `.clang-format` file which defines our specific code style lives in the\ntop level directory of the repository. The style is identical to the Google\nstyle. \n\n## Code Style\n\nAs mentioned above we use `clang-format` to enforce certain aspects of code\nstyle. The Google C++ style guide we are following in that can be found\n[here](https://google.github.io/styleguide/cppguide.html). It includes brief\ndiscussions or rationales for all the style decisions.\n\nBeyond what it is in the style guide we agreed to a few more additional rules\nspecific to the Orbit project:\n\n### [[nodiscard]]\nWe use `[[nodiscard]]` for (almost) all new class methods and free functions\nthat return a value. If you encouter a use case where it makes no sense or\nhurts readability feel free to skip it though.\n\nWe do not touch existing code merely to add `[[nodiscard]]` though.\n\n### Error handling\nFor error handling we use `ErrorMessageOr<T>` from \n[Result.h](https://github.com/google/orbit/blob/main/src/OrbitBase/include/OrbitBase/Result.h).\nThis class serves the same purpose as `absl::StatusOr<T>`. We thought about\nswitching to absl but currently the advantage does not seem large enough to\nwarrant the effort. So for now we stick with `ErrorMessageOr<T>`. \n\nIn cases where no error message needs to be returned it is perfectly fine to\nuse `std::optional`.\n\n### Exceptions\nCurrently our code is compiled with exceptions but we strive towards a world\nwith no exceptions. Particularly we don't use methods from std that throw\nexceptions but prefer the variants returning error codes (e.g. in \n`std::filesystem`).\n\n### Namespaces\nWe place all code belonging to a module named `ModuleName` or `OrbitModuleName`\ninside the top-level namespace `orbit_module_name`. All namespaces start with\nthe `orbit_` prefix. We do not use nested namespaces.\n\nExclusively for code that needs to be in a `.h` file public to a module (i.e.,\nin the `include` directory) even if that code shouldn't be used by other\nmodules, we use the top-level namespace `orbit_module_name_internal` instead.\nThis is *not* nested inside `orbit_module_name`.\n\n### File system structure\nEach module gets its own subdirectory under `src/`. The subdirectory's name\nshould be spelled in camel case, i.e. `src/ModuleName`. All public header\nfiles go into a separate include subdirectory `include/ModuleName`, i.e.\nthe full path looks like `src/ModuleName/include/ModuleName/PublicHeader.h`.\n\nNote that the module's name appears twice in this path.\nThey will be included relative to the `include/` subdirectory, i.e.\n`#include \"ModuleName/PublicHeader.h\"`.\n\nCPP files and private header files go directly into the module's subdirectory,\ni.e. `src/ModuleName/MyClass.cpp`.\n\n### Tests\nUnit test files go into the root directory of the module. They should be named after\nthe component they are testing - followed by the suffix `Test`,\ni.e. `src/ModuleName/MyClassTest.cpp`.\n\n### Fuzzers\nSimilar to unit tests, fuzzers are also named after the component they are fuzzing\nwith the suffix `Fuzzer`, i.e. `src/ModuleName/MyClassFuzzer.cpp`.\n\n### Platform-specific code\nWe try to keep platform-specific code out of header files and maintain a\nplatform-agnostic header for inclusion. The platform-specific implementations\ngo into separate files, suffixed by the platform name, i.e. `MyClassWindows.cpp`\nor `MyClassLinux.cpp`.\n\nIt's not always possible to keep the header entirely platform-agnostic. If some\ndistinctions need to be made, you can use preprocessor macros, e.g.:\n\n```\n#ifdef _WIN32\n#include <winsock2.h>\n#else\n#include <sys/socket.h>\n#endif\n```\n\n## FAQ\n\n### What's the difference between `bootstrap-orbit.{sh,ps1}` and `build.{sh,ps1}`?\n\n`bootstrap-orbit.{sh,ps1}` performs all the tasks which have to be done once per developer machine.\nThis includes:\n\n- Installing system dependencies\n- Installing the correct version of conan if necessary.\n- Installing the conan configuration (which changes rarely).\n\nAfterwards `bootstrap-orbit.{sh,ps1}` calls `build.{sh,ps1}`.\n\n`build.{sh,ps1}` on the other hand performs all the tasks which have to be done\nonce per build configuration. It creates a build directory, named after the\ngiven conan profile, installs the conan-managed dependencies into this build folder,\ncalls `cmake` for build configuration and starts the build.\n\nWhenever the dependencies change you have to call `build.{sh,ps1}` again.\nA dependency change might be introduced by a pull from upstream or by a switch\nto a different branch.\n\nIt might occur to you that even though you called `build.{sh,ps1}` your build still\nfails with a weird error message. Most of the time this is due to outdated but cached\ninformation managed by CMake. The simplest way to resolve that problem is to make\na clean build by deleting the build directory and calling `build.{sh,ps1}`.\n\n`build.{sh,ps1}` can initialize as many build configurations as you like from the\nsame invocation. Just pass conan profile names as command line arguments. Example for Linux:\n\n```bash\n./build.sh clang7_debug gcc9_release clang9_relwithdebinfo ggp_release\n# is equivalent to\n./build.sh clang7_debug\n./build.sh gcc9_release\n./build.sh clang9_relwithdebinfo\n./build.sh ggp_release\n```\n\n### Calling `build.{sh,ps1}` after every one-line-change takes forever! What should I do?\n\n`build.{sh,ps1}` is not meant for incremental builds. It should be called only once to initialize\na build directory. (Check out the previous section for more information on what `build.{sh,ps1}`\ndoes.)\n\nFor incremental builds, switch to the build directory and ask cmake to run the build:\n\n```bash\ncd <build_folder>/\ncmake --build . # On Linux\ncmake --build . --config {Release,RelWithDebInfo,Debug} # On Windows\n```\n\nAlternatively, you can also just call `make` on Linux. Check out the next section on how to\nenable building with `ninja`.\n\n### How do I enable `ninja` for my build?\n\n> **Note:** Linux only for now! On Windows you have to use MSBuild.\n\nIf you want to use `ninja`, you cannot rely on the `build.sh` script, which automatically\ninitializes your build with `make` and that cannot be changed easily later on.\nSo create a build directory from scratch, install the conan-managed dependencies\nand invoke `cmake` manually. Here is how it works:\n\nLet's assume you want to build Orbit in debug mode with `clang-9`:\n\n```bash\nmkdir build_clang9_debug # Create a build directory; should not exist before.\ncd build_clang9_debug/\nconan install -pr clang9_debug ../ # Install conan-managed dependencies\ncp ../third_party/toolchains/toolchain-linux-clang9-debug.cmake toolchain.cmake # Copy the cmake toolchain file, which matches the conan profile.\ncmake -DCMAKE_TOOLCHAIN_FILE=toolchain.cmake -G Ninja ../\nninja\n```\n\n> ### Note:\n>\n> Please be aware that it is your responsibility to ensure that the conan profile is compatible\n> with the toolchain parameters cmake uses. In this example clang9 in debug mode is used in both cases.\n\n#### Another example without toolchain files:\n\nYou can also manually pass the toolchain options to cmake via the command line:\n\n```bash\nmkdir build_clang9_debug # Create a build directory; should not exist before.\ncd build_clang9_debug/\nconan install -pr clang9_debug ../ # Install conan-managed dependencies\ncmake -DCMAKE_CXX_COMPILER=clang++-9 -DCMAKE_C_COMPILER=clang-9 -DCMAKE_BUILD_TYPE=Debug -G Ninja ../\nninja\n```\n\n### How do I integrate with CLion?\n\nIn CLion, the IDE itself manages your build configurations, which is incompatible with our `build.{sh,ps1}`\nscript. That means, you have to manually install conan dependencies into CLion's build directories\nand you have to manually verify that the directory's build configuration matches the used conan profile\nin terms of compiler, standard library, build type, target platform, etc.\n\n```bash\ncd build_directory_created_by_clion/\nconan install -pr matching_conan_profile ..\n```\n\nAfter that, you can trigger a rerun of `cmake` from CLion and it will now be able to pick up all the missing\ndependencies.\n\nThis process can be automated by the [CLion Conan Extension](https://plugins.jetbrains.com/plugin/11956-conan).\n\nAfter installing the extension, it will take care of installing conan dependencies into your\nCLion build directories, whenever necessary. The only task left to you is to create a mapping\nbetween CLion build configurations and conan profiles. Check out\n[this blog post](https://blog.jetbrains.com/clion/2019/05/getting-started-with-the-conan-clion-plugin)\non how to do it.\n\nAdd `-DCMAKE_CXX_FLAGS=-fsized-deallocation` to Settings -> Build, Execution, Deployment -> CMake -> CMake options.\nThis flag is needed because Orbit's codebase makes use of C++14's [sized-deallocation feature](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3536.html)\nwhich is not enabled by default on the clang compiler.\n\n### How do I integrate conan with Visual Studio?\n\nVisual Studio has this concept of having multiple build configurations in the same build directory.\nThis concept is not very wide-spread on buildsystems coming from the Unix world. Both CMake and\nConan have support for it, but some of our dependencies currently do not support it.\n\nThat means, **currently you can't have debug and release builds in the same build folder!**\nPlease ensure that Visual Studio is set to the build configuration which matches your build-\nfolder's conan profile. Non-matching build configurations will result in a lot of linker errors.\n\nThere is a [Conan Extension for Visual Studio](https://marketplace.visualstudio.com/items?itemName=conan-io.conan-vs-extension),\nwhich is currently under development, but should be able to help you, when you develop on\nVisual Studio.\n\n### How do I integrate with Visual Studio Code?\n\nVisual Studio Code uses configuration files to specify tasks that can be executed. These files are provided in the `contrib/.vscode` folder. To enable building from Visual Studio Code, simply copy the whole folder into the root directory with the name `.vscode`:\n\n```bash\ncp -r contrib/vscode .vscode\n```\n\n### The build worked fine, but when I try to call cmake manually I get `cmake not found!`\n\nConan installs cmake as a build dependency automatically, but won't make it available in the PATH.\n\nIf you want to use conan's cmake installation, you can use the `virtualenv` generator to create\na virtual environment which has `cmake` in its PATH:\n\n```bash\ncd my_build_folder/\nconan install -pr my_conan_profile -g virtualenv ../\nsource ./activate.sh # On Linux (bash) or on Windows in git-bash\n.\\activate.bat # On Windows in cmd\n.\\activate.ps1 # On Windows in powershell\ncmake ... # CMake from conan is now available\n```\n\nThere is also a `deactivate.{sh,bat,ps1}` which make your shell leave the virtual environment.\n\n### `ERROR: .../orbitprofiler/conanfile.py: 'options.ggp' doesn't exist` ?!?\n\nThis message or a similar one indicates that your build profiles are\noutdated and need to be updated. You can either just call the bootstrap\nscript again or you can manually update your conan config:\n\n```bash\nconan config install third_party/conan/configs/[windows,linux]\n```\n\n### How can I use separate debugging symbols for Linux binaries?\n\nOrbit supports loading symbols from your workstation. Simply add directories that contain debugging symbols to the `SymbolPaths.txt` file. This file can be found at\n\n- Windows: `C:\\Users\\<user>\\AppData\\Roaming\\OrbitProfiler\\config\\SymbolPaths.txt`\n- Linux: `~/orbitprofiler/config/SymbolPaths.txt`\n\nThe symbols file must named in one of three ways. The same fname as the binary (`game.elf`), the same name plus the `.debug` extension (`game.elf.debug`) or the same name but the `.debug` extension instead of the original one (`game.debug`). To make sure the binary and symbols file have been produced in the same build, Orbit checks that they have a matching build id.\n\n## Cross-Compiling for GGP\n\nCross compilation is supported on Windows and Linux host systems.\n\n_Note:_ Cross compiling the UI is not supported.\n\n_Note:_ Since the GGP SDK is not publicly available, this only works inside\nof Google, at least for now.\n\nCall the script `bootstrap-orbit-ggp.{sh,ps1}` which creates a package out of the GGP\nSDK (you do not need to have the SDK installed for this to work, but you will need it\nfor deployment), and compiles Orbit against the toolchain from the GGP SDK package.\n\nFinally, `build_ggp_release/package/bin/OrbitService` can be copied over\nto the instance:\n\n```bash\nggp ssh put build_ggp_release/package/bin/OrbitService /mnt/developer/\n```\n\nbefore the service can be started with:\n\n```bash\nggp ssh shell\n> sudo /mnt/developer/OrbitService\n```\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.291015625,
          "content": "Copyright (c) 2020 The Orbit Authors. All rights reserved.\n\nBSD 2-Clause License\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.6650390625,
          "content": "# ORBIT\n![builds and tests](https://github.com/google/orbit/actions/workflows/build-and-test.yml/badge.svg?branch=main)\n![Debian package](https://github.com/google/orbit/actions/workflows/release.yml/badge.svg?branch=main)\n[![OpenSSF Scorecard](https://api.securityscorecards.dev/projects/github.com/google/orbit/badge)](https://api.securityscorecards.dev/projects/github.com/google/orbit)\n\n<img alt=\"ORBIT Logo\" src=\"contrib/logos/orbit_logo_simple.png\" align=\"right\" width=\"520\" >\n\n**This project is not maintained by Google engineers anymore at this point.**\n\nOrbit, the **O**pen **R**untime **B**inary **I**nstrumentation **T**ool is a\nstandalone **native** application profiler for Windows and Linux. It supports\nnative applications written in languages such as C, C++, Rust, or Go. Its main\npurpose is to help developers identify the performance bottlenecks of a complex\napplication. Orbit can be also used to visualize the execution flow of such\napplications.\n\nThe key differentiator with many existing tools is that no alteration to the\ntarget process is necessary. Orbit does not require you to change a single line\nof code. It doesn't require you to recompile or even relaunch the application\nyou want to profile. Everything is done seamlessly, right when you need it. It\nrequires zero integration time and zero iteration time.\n\nOrbit combines sampling and dynamic instrumentation to optimize the profiling\nworkflow. Sampling can quickly identify interesting functions to instrument.\nDynamic instrumentation results in exact function entry and exit information\nwhich is presented in the form of per-thread hierarchical call graphs.\nManual instrumentation markers can be added to the source code and further\nallows for value-tracking. Scheduling events are also shown to visualize when a\nthread was running and on what core. Furthermore, Orbit visualizes thread\ndependencies, showing which thread got blocked or unblocked by which other\nthread. For AMD GPUs, the submission, scheduling and hardware execution timings\nof a job is visualized. Additional GPU data, such as Vulkan debug markers can be\nretrieved using Orbit's Vulkan layer. Memory consumption and page-fault\ninformation is visualized as well.\n\nAn introduction to Orbit's key features can be found in the following YouTube\nvideo:\n[![Orbit Presentation][orbit_youtube_presentation]](https://www.youtube.com/watch?v=8V-EPBPGZPs)\n\n## Features\n\n- Dynamic Instrumentation (no code change required)\n- Callstack Sampling\n- Wine/Proton Mixed-Callstack Profiling\n- Thread Scheduling and Dependency Tracing\n- Memory Tracing\n- GPU Driver Tracepoints (AMD only)\n- Vulkan Debug Label and Command Buffer Tracing (AMD only)\n- Manual Instrumentation\n- Source Code and Disassembly View\n- Remote Profiling\n- Debug Symbol Parsing (ELF, DWARF, PE and PDB)\n- Full Serialization of Captured Data\n\n### Note\n\nOrbit's focus has shifted to the Linux version. Windows local profiling is\ncurrently only supported partially and major features, such as dynamic\ninstrumentation, are not yet implemented. It is possible however to profile\nLinux executables from a Windows UI instance. For Windows local profiling,\nyou can still use the released\n[binaries](https://github.com/google/orbit/releases), but please note that\nthey are deprecated and mostly undocumented.\n\n## Build\n\nPlease have a look at the first three sections of our\n[development documentation](DEVELOPMENT.md). It describes how to build Orbit and\nwhich compilers, platforms, and tools are supported and needed.\n\n## Workflow\n\n> **Note** An extensive documentation of the usage of Orbit can be found in our\n> [usage documentation](documentation/DOCUMENTATION.md).\n\nThe following describes the basic workflow of Orbit:\n1. Select a process in the list of currently running processes in the connection\n   setup dialog, and click **Start Session**.\n2. The list of loaded modules will appear at the top of the **Symbols** tab.\n3. Orbit tries to automatically retrieve debug information of the modules.\n   See [here](documentation/DOCUMENTATION.md#load-symbols) on how to load\n   symbols for modules Orbit failed to load. For successfully loaded module\n   symbols, the **Functions** tab will get populated.\n4. Select functions you wish to dynamically instrument in the **Functions** tab\n   by <kbd>Right-Click</kbd> and choosing **Hook**.\n5. Start profiling by pressing <kbd>F5</kbd>. To stop profiling, press\n   <kbd>F5</kbd> again. You can either zoom time using <kbd>W</kbd> and\n   <kbd>S</kbd> or <kbd>Ctrl</kbd> + the scroll wheel. You can also\n   <kbd>Ctrl</kbd>+<kbd>Right-Click</kbd> and drag to zoom to a specific time\n   range. To scale the UI, press <kbd>Ctrl</kbd> + <kbd>+</kbd>/<kbd>-</kbd>.\n   Press <kbd>SPACE</kbd> to see the last 2 seconds of capture.\n6. You can select sections of the per-thread sampling event track to get a\n   sampling report of your selection.\n\n## Presets\n\nOnce you have loaded the debug information for your modules and have chosen\nfunctions of interest to dynamically instrument, you can save your profiling\npreset so that you won't have to do this manually again. To save a preset, go to\n**File** > **Save Preset**\n\n### Feedback\n\nQuestions and comments are more than welcome: please open an\n[issue](https://github.com/google/orbit/issues/new).\n\n## About\n\nOrbit was created by [Pierric Gimmig](https://www.linkedin.com/in/pgimmig/). It was \nfurther developed and maintained by a team of engineers at Google. As of now, the \nproject is however not being maintained by Google engineers anymore. \n\nThe following people worked on Orbit: \n* [@akopich](https://github.com/akopich)\n* [@antonrohr](https://github.com/antonrohr)\n* [@beckerhe](https://github.com/beckerhe)\n* [@danielfenner](https://github.com/danielfenner)\n* [@dimitry-](https://github.com/dimitry-)\n* [@dpallotti](https://github.com/dpallotti)\n* [@florian-kuebler](https://github.com/florian-kuebler)\n* [@karupayun](https://github.com/karupayun)\n* [@pierricgimmig](https://github.com/pierricgimmig)\n* [@reichlfl](https://github.com/reichlfl)\n* [@ronaldfw](https://github.com/ronaldfw)\n* [@vickyliu-go4it](https://github.com/vickyliu-go4it)\n* [@vwbaker](https://github.com/vwbaker)\n\n## License\n\n[License (BSD 2-clause)](./LICENSE)\n\n<a href=\"http://opensource.org/licenses/BSD-2-Clause\" target=\"_blank\">\n<img style=\"float: right\" src=\"http://opensource.org/trademarks/opensource/OSI-Approved-License-100x137.png\" alt=\"OSI Approved License\">\n</a>\n\n```text\nCopyright (c) 2020 The Orbit Authors. All rights reserved.\n\nBSD 2-Clause License\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n\n\n[orbit_youtube_presentation]: contrib/logos/orbit_presentation_youtube.png\n"
        },
        {
          "name": "bootstrap-orbit.ps1",
          "type": "blob",
          "size": 2.4462890625,
          "content": "# Copyright (c) 2020 The Orbit Authors. All rights reserved.\n# Use of this source code is governed by a BSD-style license that can be\n# found in the LICENSE file.\n\n$conan_version_required = \"1.58.0\"\n\nfunction Check-Conan-Version-Sufficient {\n  $version = [System.Version]$args[0]\n  $required = [System.Version]$args[1]\n  return $version -ge $required\n}\n\nfunction conan {\n  & py -3 -m conans.conan $args\n}\nfunction pip3 {\n  & py -3 -m pip $args\n}\n\nconan --version >null 2>&1\n\nif ($LastExitCode -ne 0) {\n  Write-Host \"Conan not found. Trying to install it via python-pip...\"\n\t\n\t\n  pip3 --version >null 2>&1\n\n  if ($LastExitCode -ne 0) {\n    Write-Error -ErrorAction Stop @\"\nIt seems you don't have Python3 (or PIP) installed (py -3 -m pip --version fails).\nPlease install Python and make it available in the path.\n\"@\n  }\n\n  pip3 install --upgrade --user conan==$conan_version_required\n  if ($LastExitCode -ne 0) {\n    Throw \"Error while installing conan via PIP.\"\n  }\n} else {\n  Write-Host \"Conan found. Checking version...\"\n\n  $conan_version = (conan --version).split(\" \")[2]\n\n  if (!(Check-Conan-Version-Sufficient $conan_version $conan_version_required)) {\n    Write-Host \"Your conan version $conan_version is too old. Let's try to update it.\"\n    pip3 install --upgrade conan==$conan_version_required\n    if ($LastExitCode -ne 0) {\n      Throw \"Error while upgrading conan via PIP. Probably you have conan installed differently.\" + \n            \" Please manually update conan to a at least version $conan_version_required\"\n    }\n\n    Write-Host \"Successfully updated conan!\"\n  } else {\n    Write-Host \"Found conan version $conan_version. That fulfills the requirements!\"\n  }\n}\n\n# Install conan config\n#\n# We always pass the `-recreate-default-profiles` option here which removes all the previously automatically\n# created default profiles. This avoids problems with stale default profiles which can occur when the OS has been\n# updated and the previous default compiler is not available anymore.\n#\n# All changes made by the user to these profiles will be lost which is not ideal, but when calling bootstrap\n# we expect the user wants a clean and working build no matter what. There is no need to make changes to the\n# default profiles unless you try something out of the order and probably know what you are doing.\n& \"$PSScriptRoot\\third_party\\conan\\configs\\install.ps1\" -recreate_default_profiles\n\n# Start build\nif ($args) {\n  & \"$PSScriptRoot\\build.ps1\" $args\n} else {\n  & \"$PSScriptRoot\\build.ps1\"\n}\n"
        },
        {
          "name": "bootstrap-orbit.sh",
          "type": "blob",
          "size": 5.6767578125,
          "content": "#!/bin/bash\n#\n# Copyright (c) 2020 The Orbit Authors. All rights reserved.\n# Use of this source code is governed by a BSD-style license that can be\n# found in the LICENSE file.\n\nCONAN_VERSION_REQUIRED=\"1.60.0\"\n\nDIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" >/dev/null 2>&1 && pwd )\"\n\nOPTIONS=$(getopt -o \"\" -l \"force-public-remotes,assume-linux,assume-windows,ignore-system-requirements,dont-compile\" -- \"$@\")\neval set -- \"$OPTIONS\"\n\nCONFIG_INSTALL_OPTIONS=\"\"\nIGNORE_SYS_REQUIREMENTS=\"\"\nDONT_COMPILE=\"\"\n\nwhile true; do\n  case \"$1\" in\n    --force-public-remotes|--assume-linux|--assume-windows)\n      CONFIG_INSTALL_OPTIONS=\"${CONFIG_INSTALL_OPTIONS} $1\"; shift;;\n    --ignore-system-requirements) IGNORE_SYS_REQUIREMENTS=\"yes\"; shift;;\n    --dont-compile) DONT_COMPILE=\"yes\"; shift;;\n    --) shift; break;;\n  esac\ndone\n\nreadonly REQUIRED_PACKAGES=( build-essential libglu1-mesa-dev mesa-common-dev \\\n                             libxmu-dev libxi-dev libopengl-dev qtbase5-dev \\\n                             libxxf86vm-dev python3-pip libboost-dev )\n\nfunction add_ubuntu_universe_repo {\n  sudo add-apt-repository universe\n  if [ $? -ne 0 ]; then\n    sudo apt-get install -y software-properties-common\n    sudo add-apt-repository universe\n  fi\n}\n\nfunction install_required_packages {\n  sudo apt-get update || exit $?\n  sudo apt-get install -y ${REQUIRED_PACKAGES[@]} || exit $?\n}\n\n\nif [[ $IGNORE_SYS_REQUIREMENTS != \"yes\" ]]; then\n  if which dpkg-query >/dev/null 2>&1; then\n    readonly installed=\"$(dpkg-query --show -f'${Package}\\n')\"\n    PACKAGES_MISSING=\"no\"\n    for package in ${REQUIRED_PACKAGES[@]}; do\n      if ! egrep \"^${package}$\" <<<\"$installed\" > /dev/null; then\n        PACKAGES_MISSING=\"yes\"\n        break\n      fi\n    done\n\n    if [[ $PACKAGES_MISSING == \"yes\" ]]; then\n      echo \"Installing required system dependencies...\"\n\n      # That only works on Ubuntu!\n      if [[ \"$(lsb_release -si)\" == \"Ubuntu\" ]]; then\n        add_ubuntu_universe_repo\n      fi\n\n      install_required_packages\n    fi\n  else\n    cat <<EOF\nWe detected you're not on a debian-based system. Orbit requires some system\npackages to be installed. Please make sure that you have those installed.\nHere are Debian package names: ${REQUIRED_PACKAGES[@]}.\n\nOn other Linux distributions the package names might be similar but not exactly\nthe same!\nEOF\n  fi # which dpkg-query\nfi # IGNORE_SYS_REQ\n\nfunction check_conan_version_sufficient() {\n  local VERSION=$1\n  local REQUIRED=$2\n\n  local VERSION_MAJOR=\"$(echo \"$VERSION\" | cut -d'.' -f1)\"\n  local REQUIRED_MAJOR=\"$(echo \"$REQUIRED\" | cut -d'.' -f1)\"\n  if [ \"$REQUIRED_MAJOR\" -gt \"$VERSION_MAJOR\" ]; then\n    return 1\n  fi\n  if [ \"$REQUIRED_MAJOR\" -lt \"$VERSION_MAJOR\" ]; then\n    return 0\n  fi\n\n  local VERSION_MINOR=\"$(echo \"$VERSION\" | cut -d'.' -f2)\"\n  local REQUIRED_MINOR=\"$(echo \"$REQUIRED\" | cut -d'.' -f2)\"\n  if [ \"$REQUIRED_MINOR\" -gt \"$VERSION_MINOR\" ]; then\n    return 1\n  fi\n  if [ \"$REQUIRED_MINOR\" -lt \"$VERSION_MINOR\" ]; then\n    return 0\n  fi\n\n  local VERSION_PATCH=\"$(echo \"$VERSION\" | cut -d'.' -f3)\"\n  local REQUIRED_PATCH=\"$(echo \"$REQUIRED\" | cut -d'.' -f3)\"\n  if [ \"$REQUIRED_PATCH\" -gt \"$VERSION_PATCH\" ]; then\n    return 1\n  fi\n  return 0\n}\n\necho \"Checking if conan is available...\"\nreadonly CONAN=\"python3 -m conans.conan\"\nreadonly PIP=\"python3 -m pip\"\n$CONAN --version >/dev/null\nif [ $? -ne 0 ]; then\n  echo \"Couldn't find conan. Trying to install via pip...\"\n  $PIP install --user conan==\"$CONAN_VERSION_REQUIRED\" || exit $?\nelse\n  echo \"Found conan. Checking version...\"\n  CONAN_VERSION=\"$($CONAN --version | cut -d' ' -f3)\"\n  \n  if ! check_conan_version_sufficient \"$CONAN_VERSION\" \"$CONAN_VERSION_REQUIRED\"; then\n    echo \"Your conan version $CONAN_VERSION is too old. I will try to update...\"\n    $PIP install --upgrade --user conan==\"$CONAN_VERSION_REQUIRED\"\n    if [ $? -ne 0 ]; then\n      echo \"The upgrade of your conan installation failed. Probably because conan was not installed by this script.\"\n      echo \"Please manually update conan to at least version $CONAN_VERSION_REQUIRED.\"\n      exit 2\n    fi\n    echo \"Conan updated finished.\"\n  else\n    echo \"Conan's version $CONAN_VERSION fulfills the requirements. Continuing...\"\n  fi\nfi\n\n# We always pass the `--recreate-default-profiles` option here which removes all the previously automatically\n# created default profiles. This avoids problems with stale default profiles which can occur when the OS has been\n# updated and the previous default compiler is not available anymore.\n#\n# All changes made by the user to these profiles will be lost which is not ideal, but when calling bootstrap\n# we expect the user wants a clean and working build no matter what. There is no need to make changes to the\n# default profiles unless you try something out of the order and probably know what you are doing.\necho \"Installing conan configuration (profiles, settings, etc.)...\"\n$DIR/third_party/conan/configs/install.sh --recreate-default-profiles $CONFIG_INSTALL_OPTIONS || exit $?\n\nif [[ $DONT_COMPILE != \"yes\" ]]; then\n  if [ -n \"$1\" ] ; then\n    exec $DIR/build.sh \"$@\"\n  else\n    exec $DIR/build.sh\n  fi\nfi\n\nPRE_COMMIT_HOOK_FILE=.git/hooks/pre-commit\n\nfunction install_clang_format_pre_commit_hook {\n  if [ ! -f $PRE_COMMIT_HOOK_FILE ] ; then\n    touch $PRE_COMMIT_HOOK_FILE\n    chmod +x $PRE_COMMIT_HOOK_FILE\n  fi\n  echo \"source \\\"contrib/hooks/clang-format-pre-commit.sh\\\"\" >> $PRE_COMMIT_HOOK_FILE\n}\n\nif [ -d .git ] ; then\n  if [ ! -f $PRE_COMMIT_HOOK_FILE ] || ! grep -q \"contrib/hooks/clang-format-pre-commit.sh\" .git/hooks/pre-commit ; then\n    while true; do\n      read -p \"Do you want to install the clang-format pre-commit hook [y/n]? `echo $'\\n> '`\" yn\n      case $yn in\n        [Yy]* ) install_clang_format_pre_commit_hook; break;;\n        [Nn]* ) break;;\n      esac\n    done\n  fi\nfi\n"
        },
        {
          "name": "build.ps1",
          "type": "blob",
          "size": 3.4853515625,
          "content": "function conan {\n  & py -3 -m conans.conan $args\n}\n\nfunction conan_profile_exists($profile) {\n  conan profile show $profile >null 2>&1\n  return ($LastExitCode -eq 0)\n}\n\nfunction conan_create_profile($profile) {\n  if (! (conan profile show default)) {\n    if (! (conan profile new --detect default)) {\n      exit $?\n    }\n  }\n\n  $compiler = conan profile show default | Select-String -Pattern \"compiler=\" | ForEach-Object { ([string] $_).split(\"=\")[1] }\n  $compiler_version = conan profile show default | Select-String -Pattern \"compiler.version=\" | ForEach-Object { ([string] $_).split(\"=\")[1] }\n\n  if ($compiler -ne \"Visual Studio\") {\n    Throw \"It seems conan couldn't detect your Visual Studio installation. Do you have Visual Studio installed? At least Visual Studio 2019 is required!\"\n  }\n\n  if ([int]$compiler_version -ne 16 -and [int]$compiler_version -ne 17) {\n    Throw \"Your version of Visual Studio is not supported. We currently only support VS2019 and VS2022.\"\n  }\n\n  $compiler_version = if ($compiler_version -eq 16) { \"msvc2019\" } else { \"msvc2022\" }\n\n  $conan_dir = if ($env:CONAN_USER_HOME) { $Env:CONAN_USER_HOME } else { $Env:USERPROFILE }\n  $conan_dir += \"\\.conan\"\n\n  $build_type = $profile -replace \"default_\"\n  $profile_path = \"$conan_dir\\profiles\\$profile\"\n\n  if (!$Env:Qt5_DIR) {\n    Write-Host \"\"\n    Write-Host \"Qt5_DIR environment variable not set - Please provide path to Qt distribution`r`n\"\n    Write-Host \"=============================================================================`r`n\"\n    Write-Host \"Orbit depends on the Qt framework which has to be installed separately either using the official installer,`r`n\"\n    Write-Host \"compiled manually from source or installed using a third party installer like aqtinstall.`r`n\"\n    Write-Host \"Check out DEVELOPMENT.md for more details on how to use an official Qt distribution.`r`n\"\n    Write-Host \"Press Ctrl+C to stop here and install Qt first. Make sure the Qt5_DIR environment variable is pointing to your`r`n\"\n    Write-Host \"Qt installation. Then call this script again.`r`n\"\n    Exit 1\n  }\n\n  \"include(${compiler_version}_${build_type})`r`n\" | Set-Content -Path $profile_path\n  \"[settings]`r`n[options]\" | Add-Content -Path $profile_path\n\n  if ($Env:Qt5_DIR) {\n    Write-Host \"Found Qt5_DIR environment variable. Using system provided Qt distribution from $Env:Qt5_DIR.\"\n    \"`r`n[env]`r`nOrbitProfiler:Qt5_DIR=`\"$Env:Qt5_DIR`\"\" | Add-Content -Path $profile_path\n  }\n}\n\n# That's the profile that is used for tools that run on the build machine (Nasm, CMake, Ninja, etc.)\n$build_profile = \"default_release\"\nif (-not (conan_profile_exists $build_profile)) {\n  Write-Host \"Creating conan profile $build_profile\"\n  conan_create_profile $build_profile\n}\n\n\n$profiles = if ($args.Count) { $args } else { @(\"default_release\") }\n\nforeach ($profile in $profiles) {\n\n  if ($profile.StartsWith(\"default_\") -and (-not (conan_profile_exists $profile))) {    \n    Write-Host \"Creating conan profile $profile\"\n    conan_create_profile $profile\n  }\n \n  Write-Host \"Building Orbit in build_$profile/ with conan profile $profile\"\n\n  conan install -if build_$profile\\ --build outdated \"-pr:b\" $build_profile \"-pr:h\" $profile -u \"$PSScriptRoot\"\n\n  if ($LastExitCode -ne 0) {\n    Throw \"Error while running conan install.\"\n  }\n  \n  conan build -bf \"build_$profile/\" $PSScriptRoot\n  if ($LastExitCode -ne 0) {\n    Throw \"Error while running conan build.\"\n  }\n\n  if ($profile.StartsWith(\"default_\")) {\n    Write-Host \"The build finished successfully. Start Orbit with .\\build_$profile\\bin\\Orbit!\"\n  }\n}\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 2.5234375,
          "content": "#!/bin/bash\n# Copyright (c) 2020 The Orbit Authors. All rights reserved.\n# Use of this source code is governed by a BSD-style license that can be\n# found in the LICENSE file.\n\nset -euo pipefail\n\n# We call conan by going through python3 to avoid any PATH problems.\n# Sometimes tools installed by PIP are not automatically in the PATH.\nif [[ $(uname -s) == \"Linux\" ]]; then\n  CONAN=\"python3 -m conans.conan\"\nelse\n  CONAN=\"py -3 -m conans.conan\"\nfi\n\nreadonly CONAN\n\ndefault_profiles=( default_release )\n\nif [ \"$#\" -eq 0 ]; then\n  profiles=( \"${default_profiles[@]}\" )\nelse\n  profiles=()\n  for profile in \"$@\"; do profiles+=( \"$profile\" ); done\nfi\n\nreadonly DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" >/dev/null 2>&1 && pwd )\"\n\nfunction create_conan_profile {\n  local readonly profile=\"$1\"\n  if ! $CONAN profile show default >/dev/null 2>&1; then\n    $CONAN profile new --detect default >/dev/null || exit $?\n  fi\n\n  local readonly compiler=\"$($CONAN profile show default | grep compiler= | cut -d= -f2 | sed -e 's/Visual Studio/msvc/')\"\n  local compiler_version=\"$($CONAN profile show default | grep compiler.version= | cut -d= -f2)\"\n  if [[ $compiler == \"msvc\" ]]; then\n    compiler_version=\"$(echo $compiler_version | sed -e 's/^16$/2019/' | sed -e 's/^17$/2022/')\"\n  fi\n  local readonly compiler_version\n  local readonly conan_dir=${CONAN_USER_HOME:-~}/.conan\n  local readonly build_type=\"${profile#default_}\"\n  local readonly profile_path=\"$conan_dir/profiles/$profile\"\n\n  echo -e \"include(${compiler}${compiler_version}_${build_type})\\n\" > $profile_path\n  echo -e \"[settings]\\n[options]\" >> $profile_path\n  echo -e \"[build_requires]\\n[env]\" >> $profile_path\n\n  if [[ -v CC ]]; then\n    echo \"CC=$CC\" >> $profile_path\n  fi\n\n  if [[ -v CXX ]]; then\n    echo \"CXX=$CXX\" >> $profile_path\n  fi\n}\n\nfunction conan_profile_exists {\n  $CONAN profile show $1 >/dev/null 2>&1\n  return $?\n}\n\n# That's the profile that is used for tools that run on the build machine (Nasm, CMake, Ninja, etc.)\nreadonly build_profile=\"default_release\"\nconan_profile_exists \"${build_profile}\" || create_conan_profile \"${build_profile}\"\n\nfor profile in ${profiles[@]}; do\n  if [[ $profile == default_* ]]; then\n    conan_profile_exists \"$profile\" || create_conan_profile \"$profile\"\n  fi\n\n  $CONAN install -pr:b \"${build_profile}\" -pr:h $profile -if build_$profile/ \\\n         --build outdated --update \"$DIR\" || exit $?\n  $CONAN build -bf build_$profile/ \"$DIR\" || exit $?\n\n  if [[ $profile == default_* ]]; then\n    echo \"The build finished successfully. Start Orbit with ./build_$profile/bin/Orbit!\"\n  fi\ndone"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "conanfile.py",
          "type": "blob",
          "size": 6.1142578125,
          "content": "# coding=utf-8\n\n\"\"\"\nCopyright (c) 2020 The Orbit Authors. All rights reserved.\nUse of this source code is governed by a BSD-style license that can be\nfound in the LICENSE file.\n\"\"\"\n\nfrom conans import ConanFile, CMake, tools\nfrom conans.errors import ConanInvalidConfiguration\nimport os\nimport shutil\nfrom io import StringIO\nimport csv\n\n\nclass OrbitConan(ConanFile):\n    name = \"OrbitProfiler\"\n    license = \"BSD-2-Clause\"\n    url = \"https://github.com/pierricgimmig/orbitprofiler.git\"\n    description = \"C/C++ Performance Profiler\"\n    settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n    generators = [\"CMakeDeps\"]\n    options = {\"with_gui\": [True, False],\n               \"fPIC\": [True, False],\n               \"run_tests\": [True, False],\n               \"build_target\": \"ANY\",\n               \"with_system_deps\": [True, False]}\n    default_options = {\"with_gui\": True,\n                       \"fPIC\": True,\n                       \"run_tests\": True,\n                       \"build_target\": None,\n                       \"with_system_deps\": False}\n    exports_sources = \"CMakeLists.txt\", \"Orbit*\", \"bin/*\", \"cmake/*\", \"third_party/*\", \"LICENSE\"\n\n    def _version(self):\n        if not self.version:\n            buf = StringIO()\n            self.run(\"git describe --always --dirty  --match 1.*\", output=buf)\n            self.version = buf.getvalue().strip()\n            if self.version[0] == 'v':\n                self.version = self.version[1:]\n\n        return self.version\n\n    def config_options(self):\n        if self.settings.os == \"Windows\":\n            del self.options.fPIC\n\n    def build_requirements(self):\n        if self.options.with_system_deps: return\n        self.build_requires('grpc/1.48.0')\n        self.build_requires('protobuf/3.21.4')\n        self.build_requires('gtest/1.11.0', force_host_context=True)\n\n    def requirements(self):\n        if self.options.with_system_deps: return\n\n        self.requires(\"abseil/20220623.0\")\n        self.requires(\"capstone/4.0.2\")\n        self.requires(\"grpc/1.48.0\")\n        self.requires(\"outcome/2.2.3\")\n        self.requires(\"llvm-core/13.0.0\")\n        if self.settings.os != \"Windows\":\n            self.requires(\"volk/1.3.224.1\")\n            self.requires(\"vulkan-headers/1.3.224.1\")\n            self.requires(\"vulkan-validationlayers/1.3.224.1\")\n        self.requires(\"zlib/1.2.12\", override=True)\n        self.requires(\"openssl/1.1.1s\", override=True)\n\n        if self.options.with_gui:\n            self.requires(\"libssh2/1.10.0\")\n\n\n    def configure(self):\n        if self.settings.os != \"Windows\" and not self.options.fPIC:\n            raise ConanInvalidConfiguration(\n                \"We only support compiling with fPIC enabled!\")\n\n        if self.options.with_gui and self.settings.arch == \"x86\":\n            raise ConanInvalidConfiguration(\n                \"We don't actively support building the UI for 32bit platforms. Please remove this check in conanfile.py if you still want to do so!\")\n\n        self.options[\"gtest\"].no_main = True\n\n        if self.settings.os != \"Windows\":\n            self.options[\"vulkan-validationlayers\"].with_wsi_xcb = False\n            self.options[\"vulkan-validationlayers\"].with_wsi_xlib = False\n            self.options[\"vulkan-validationlayers\"].with_wsi_wayland = False\n\n\n    def build(self):\n        cmake = CMake(self)\n        cmake.definitions[\"WITH_GUI\"] = \"ON\" if self.options.with_gui else \"OFF\"\n        cmake.configure()\n        cmake.build(target=str(self.options.build_target) if self.options.build_target else None)\n        if self.options.run_tests and not tools.cross_building(self.settings, skip_x64_x86=True) and self.settings.get_safe(\"os.platform\") != \"GGP\":\n            cmake.test(output_on_failure=True)\n\n    def imports(self):\n        excludes = [\n                \"*qt*\",\n                \"*licensewizard*\",\n                \"*checklicenses*\",\n                \"*.py\",\n                \"*.pyc\",\n                \"*.cc\",\n                \"*.yml\",\n                \"*.vanilla\",\n                \"*.h\",\n                \"*.pl\",\n                \"*license_template.txt\",\n                \"*.patch\",\n                \"*.QT-LICENSE-AGREEMENT\",\n                \"*.ini\",\n                \"*.js\",\n                \"*license-checker*\",\n                \"*.html\",\n                \"*.json\",\n                \"*README.md\"\n        ]\n        self.copy(\"LICENSE*\", dst=\"licenses\", folder=True, ignore_case=True, excludes=excludes)\n        self.copy(\"LICENCE*\", dst=\"licenses\", folder=True, ignore_case=True, excludes=excludes)\n\n\n    def package(self):\n        self.copy(\"*\", src=\"bin/autopresets\", dst=\"bin/autopresets\", symlinks=True)\n        self.copy(\"*.pdb\", src=\"bin/\", dst=\"bin\")\n        self.copy(\"Orbit\", src=\"bin/\", dst=\"bin\")\n        self.copy(\"Orbit.exe\", src=\"bin/\", dst=\"bin\")\n        self.copy(\"Orbit.debug\", src=\"bin/\", dst=\"bin\")\n        self.copy(\"OrbitService\", src=\"bin/\", dst=\"bin\")\n        self.copy(\"OrbitService.exe\", src=\"bin/\", dst=\"bin\")\n        self.copy(\"OrbitService.debug\", src=\"bin/\", dst=\"bin\")\n        self.copy(\"OrbitClientGgp\", src=\"bin/\", dst=\"bin\")\n        self.copy(\"OrbitClientGgp.exe\", src=\"bin/\", dst=\"bin\")\n        self.copy(\"OrbitClientGgp.debug\", src=\"bin/\", dst=\"bin\")\n        self.copy(\"NOTICE\")\n        self.copy(\"LICENSE\")\n        self.copy(\"liborbit.so\", src=\"lib/\", dst=\"lib\")\n        self.copy(\"liborbituserspaceinstrumentation.so\", src=\"lib/\", dst=\"lib\")\n        self.copy(\"libOrbitVulkanLayer.so\", src=\"lib/\", dst=\"lib\")\n        self.copy(\"VkLayer_Orbit_implicit.json\", src=\"lib/\", dst=\"lib\")\n        self.copy(\"LinuxTracingIntegrationTests\", src=\"bin/\", dst=\"bin\")\n        self.copy(\"LinuxTracingIntegrationTests.debug\", src=\"bin/\", dst=\"bin\")\n        self.copy(\"OrbitServiceIntegrationTests\", src=\"bin/\", dst=\"bin\")\n        self.copy(\"OrbitServiceIntegrationTests.debug\", src=\"bin/\", dst=\"bin\")\n        self.copy(\"libIntegrationTestPuppetSharedObject.so\", src=\"lib/\", dst=\"lib\")\n        self.copy(\"libIntegrationTestPuppetSharedObject.so.debug\", src=\"lib/\", dst=\"lib\")\n        self.copy(\"OrbitFakeClient\", src=\"bin/\", dst=\"bin\")\n        self.copy(\"OrbitFakeClient.debug\", src=\"bin/\", dst=\"bin\")\n        self.copy(\"msdia140.dll\", src=\"bin/\", dst=\"bin\")\n\n\n    def deploy(self):\n        self.copy(\"*\", src=\"bin\", dst=\"bin\")\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "debian",
          "type": "tree",
          "content": null
        },
        {
          "name": "documentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "icons",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}