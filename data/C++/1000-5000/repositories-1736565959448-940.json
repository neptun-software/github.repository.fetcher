{
  "metadata": {
    "timestamp": 1736565959448,
    "page": 940,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "atcoder/ac-library",
      "stars": 1927,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.2431640625,
          "content": "BasedOnStyle: 'Chromium'\nIndentWidth: 4\nAccessModifierOffset: -2\n\n# for competitive programing\nAllowShortFunctionsOnASingleLine: All\nAllowShortIfStatementsOnASingleLine: true\nAllowShortLoopsOnASingleLine: true\nAlwaysBreakTemplateDeclarations: false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.05859375,
          "content": "build\n\n*.html\n!tools/*.html\ntools/ac-library.zip\n__pycache__"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.2255859375,
          "content": "[submodule \"test/unittest/googletest\"]\n\tpath = test/unittest/googletest\n\turl = https://github.com/google/googletest\n[submodule \"test/benchmark/benchmark\"]\n\tpath = test/benchmark/benchmark\n\turl = https://github.com/google/benchmark\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 6.400390625,
          "content": "CC0 1.0 Universal\n\nStatement of Purpose\n\nThe laws of most jurisdictions throughout the world automatically confer\nexclusive Copyright and Related Rights (defined below) upon the creator and\nsubsequent owner(s) (each and all, an \"owner\") of an original work of\nauthorship and/or a database (each, a \"Work\").\n\nCertain owners wish to permanently relinquish those rights to a Work for the\npurpose of contributing to a commons of creative, cultural and scientific\nworks (\"Commons\") that the public can reliably and without fear of later\nclaims of infringement build upon, modify, incorporate in other works, reuse\nand redistribute as freely as possible in any form whatsoever and for any\npurposes, including without limitation commercial purposes. These owners may\ncontribute to the Commons to promote the ideal of a free culture and the\nfurther production of creative, cultural and scientific works, or to gain\nreputation or greater distribution for their Work in part through the use and\nefforts of others.\n\nFor these and/or other purposes and motivations, and without any expectation\nof additional consideration or compensation, the person associating CC0 with a\nWork (the \"Affirmer\"), to the extent that he or she is an owner of Copyright\nand Related Rights in the Work, voluntarily elects to apply CC0 to the Work\nand publicly distribute the Work under its terms, with knowledge of his or her\nCopyright and Related Rights in the Work and the meaning and intended legal\neffect of CC0 on those rights.\n\n1. Copyright and Related Rights. A Work made available under CC0 may be\nprotected by copyright and related or neighboring rights (\"Copyright and\nRelated Rights\"). Copyright and Related Rights include, but are not limited\nto, the following:\n\n  i. the right to reproduce, adapt, distribute, perform, display, communicate,\n  and translate a Work;\n\n  ii. moral rights retained by the original author(s) and/or performer(s);\n\n  iii. publicity and privacy rights pertaining to a person's image or likeness\n  depicted in a Work;\n\n  iv. rights protecting against unfair competition in regards to a Work,\n  subject to the limitations in paragraph 4(a), below;\n\n  v. rights protecting the extraction, dissemination, use and reuse of data in\n  a Work;\n\n  vi. database rights (such as those arising under Directive 96/9/EC of the\n  European Parliament and of the Council of 11 March 1996 on the legal\n  protection of databases, and under any national implementation thereof,\n  including any amended or successor version of such directive); and\n\n  vii. other similar, equivalent or corresponding rights throughout the world\n  based on applicable law or treaty, and any national implementations thereof.\n\n2. Waiver. To the greatest extent permitted by, but not in contravention of,\napplicable law, Affirmer hereby overtly, fully, permanently, irrevocably and\nunconditionally waives, abandons, and surrenders all of Affirmer's Copyright\nand Related Rights and associated claims and causes of action, whether now\nknown or unknown (including existing as well as future claims and causes of\naction), in the Work (i) in all territories worldwide, (ii) for the maximum\nduration provided by applicable law or treaty (including future time\nextensions), (iii) in any current or future medium and for any number of\ncopies, and (iv) for any purpose whatsoever, including without limitation\ncommercial, advertising or promotional purposes (the \"Waiver\"). Affirmer makes\nthe Waiver for the benefit of each member of the public at large and to the\ndetriment of Affirmer's heirs and successors, fully intending that such Waiver\nshall not be subject to revocation, rescission, cancellation, termination, or\nany other legal or equitable action to disrupt the quiet enjoyment of the Work\nby the public as contemplated by Affirmer's express Statement of Purpose.\n\n3. Public License Fallback. Should any part of the Waiver for any reason be\njudged legally invalid or ineffective under applicable law, then the Waiver\nshall be preserved to the maximum extent permitted taking into account\nAffirmer's express Statement of Purpose. In addition, to the extent the Waiver\nis so judged Affirmer hereby grants to each affected person a royalty-free,\nnon transferable, non sublicensable, non exclusive, irrevocable and\nunconditional license to exercise Affirmer's Copyright and Related Rights in\nthe Work (i) in all territories worldwide, (ii) for the maximum duration\nprovided by applicable law or treaty (including future time extensions), (iii)\nin any current or future medium and for any number of copies, and (iv) for any\npurpose whatsoever, including without limitation commercial, advertising or\npromotional purposes (the \"License\"). The License shall be deemed effective as\nof the date CC0 was applied by Affirmer to the Work. Should any part of the\nLicense for any reason be judged legally invalid or ineffective under\napplicable law, such partial invalidity or ineffectiveness shall not\ninvalidate the remainder of the License, and in such case Affirmer hereby\naffirms that he or she will not (i) exercise any of his or her remaining\nCopyright and Related Rights in the Work or (ii) assert any associated claims\nand causes of action with respect to the Work, in either case contrary to\nAffirmer's express Statement of Purpose.\n\n4. Limitations and Disclaimers.\n\n  a. No trademark or patent rights held by Affirmer are waived, abandoned,\n  surrendered, licensed or otherwise affected by this document.\n\n  b. Affirmer offers the Work as-is and makes no representations or warranties\n  of any kind concerning the Work, express, implied, statutory or otherwise,\n  including without limitation warranties of title, merchantability, fitness\n  for a particular purpose, non infringement, or the absence of latent or\n  other defects, accuracy, or the present or absence of errors, whether or not\n  discoverable, all to the greatest extent permissible under applicable law.\n\n  c. Affirmer disclaims responsibility for clearing rights of other persons\n  that may apply to the Work or any use thereof, including without limitation\n  any person's Copyright and Related Rights in the Work. Further, Affirmer\n  disclaims responsibility for obtaining any necessary consents, permissions\n  or other rights required for any use of the Work.\n\n  d. Affirmer understands and acknowledges that Creative Commons is not a\n  party to this document and has no duty or obligation with respect to this\n  CC0 or use of the Work.\n\nFor more information, please see\n<http://creativecommons.org/publicdomain/zero/1.0/>"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.541015625,
          "content": "# AC(AtCoder) Library\n\nAC Library is the official library of [AtCoder](https://atcoder.jp/home). This repository manages the contents of AC Library.\n\nYou may refer to the following links for more details:\n\n- [The Announcement on AtCoder](https://atcoder.jp/posts/518)\n- [The Announcement on Codeforces](https://codeforces.com/blog/entry/82400)\n- [Practice Contest](https://atcoder.jp/contests/practice2)\n- [AC Library Document(en)](https://atcoder.github.io/ac-library/production/document_en/)\n- [AC Library Document(ja)](https://atcoder.github.io/ac-library/production/document_ja/)\n\nThe documents of master branch are as follows:\n\n- [AC Library Document(en, master)](https://atcoder.github.io/ac-library/master/document_en/)\n- [AC Library Document(ja, master)](https://atcoder.github.io/ac-library/master/document_ja/)\n\n## Policy\n\nOur goal of this project is to achieve that\n\n- Enable **every AtCoder users** to use this library with **minimum efforts of studying about PC**\n- Maximize convenience for **the usage in competitive programming**. We completely ignore other usages.\n- No bugs. This is a fantasy, but we pursue this.\n\nBy this policy, we ignore some manners of C++ intentionally. For example,\n\n- we don't use `size_t`, but use `int`.\n- Segtree handles function pointers, not functional objects.\n- and so on...\n\n## Direction of this project\n\nWe haven't decided whether we should increase this library's contents or not because there are pros and cons.\nIf you are interested in this topic, please join the discussion in [The Announcement on Codeforces](https://codeforces.com/blog/entry/82400).\n\nFor now, we are not planning to add new features, and we use this repository only for\n\n- collecting issues\n- recording the changelogs\n- versioning our releases\n\n## Contributing\n\nWe accept issues/PRs **only from AtCoder users**.\n\nWe would appreciate it if you would report our mistakes like a typo, or, more importantly, bugs!\n\nAs mentioned above, we haven't decided which way to go. Therefore we are not accepting feature requests for now, and issues will be closed.\n\n## Releases\n\nYou can view the newest version of AC Library in [The Announcement on AtCoder](https://atcoder.jp/posts/518) page.\n\nYou can also see all versions in [The Release](https://github.com/atcoder/ac-library/releases) page.\n\n## License\n\nThis library is released under the [CC0](https://creativecommons.org/publicdomain/zero/1.0/legalcode), except for the third-party libraries that are located under `/document_(en|ja)/lib` directory. Please refer [/document_en/lib/LICENSE.md](./document_en/lib/LICENSE.md) for details.\n"
        },
        {
          "name": "atcoder",
          "type": "tree",
          "content": null
        },
        {
          "name": "document_en",
          "type": "tree",
          "content": null
        },
        {
          "name": "document_ja",
          "type": "tree",
          "content": null
        },
        {
          "name": "expander.py",
          "type": "blob",
          "size": 3.556640625,
          "content": "#!/usr/bin/env python3\n\nimport re\nimport sys\nimport argparse\nfrom logging import Logger, basicConfig, getLogger\nfrom os import getenv, environ, pathsep\nfrom pathlib import Path\nfrom typing import List, Set, Optional\n\n\nlogger = getLogger(__name__)  # type: Logger\n\n\nclass Expander:\n    atcoder_include = re.compile(\n        r'#include\\s*[\"<](atcoder/[a-z_]*(|.hpp))[\">]\\s*')\n\n    include_guard = re.compile(r'#.*ATCODER_[A-Z_]*_HPP')\n\n    def is_ignored_line(self, line) -> bool:\n        if self.include_guard.match(line):\n            return True\n        if line.strip() == \"#pragma once\":\n            return True\n        if line.strip().startswith('//'):\n            return True\n        return False\n\n    def __init__(self, lib_paths: List[Path]):\n        self.lib_paths = lib_paths\n\n    included = set()  # type: Set[Path]\n\n    def find_acl(self, acl_name: str) -> Path:\n        for lib_path in self.lib_paths:\n            path = lib_path / acl_name\n            if path.exists():\n                return path\n        logger.error('cannot find: {}'.format(acl_name))\n        raise FileNotFoundError()\n\n    def expand_acl(self, acl_file_path: Path) -> List[str]:\n        if acl_file_path in self.included:\n            logger.info('already included: {}'.format(acl_file_path.name))\n            return []\n        self.included.add(acl_file_path)\n        logger.info('include: {}'.format(acl_file_path.name))\n\n        acl_source = open(str(acl_file_path)).read()\n\n        result = []  # type: List[str]\n        for line in acl_source.splitlines():\n            if self.is_ignored_line(line):\n                continue\n\n            m = self.atcoder_include.match(line)\n            if m:\n                name = m.group(1)\n                result.extend(self.expand_acl(self.find_acl(name)))\n                continue\n\n            result.append(line)\n        return result\n\n    def expand(self, source: str, origname) -> str:\n        self.included = set()\n        result = []  # type: List[str]\n        linenum = 0\n        for line in source.splitlines():\n            linenum += 1\n            m = self.atcoder_include.match(line)\n            if m:\n                acl_path = self.find_acl(m.group(1))\n                result.extend(self.expand_acl(acl_path))\n                if origname:\n                    result.append('#line ' + str(linenum + 1) + ' \"' + origname + '\"')\n                continue\n\n            result.append(line)\n        return '\\n'.join(result)\n\n\nif __name__ == \"__main__\":\n    basicConfig(\n        format=\"%(asctime)s [%(levelname)s] %(message)s\",\n        datefmt=\"%H:%M:%S\",\n        level=getenv('LOG_LEVEL', 'INFO'),\n    )\n    parser = argparse.ArgumentParser(description='Expander')\n    parser.add_argument('source', help='Source File')\n    parser.add_argument('-c', '--console',\n                        action='store_true', help='Print to Console')\n    parser.add_argument('--lib', help='Path to Atcoder Library')\n    parser.add_argument('--origname', help='report line numbers from the original ' +\n                                           'source file in GCC/Clang error messages')\n    opts = parser.parse_args()\n\n    lib_paths = []\n    if opts.lib:\n        lib_paths.append(Path(opts.lib))\n    if 'CPLUS_INCLUDE_PATH' in environ:\n        lib_paths.extend(\n            map(Path, filter(None, environ['CPLUS_INCLUDE_PATH'].split(pathsep))))\n    lib_paths.append(Path.cwd())\n    expander = Expander(lib_paths)\n    source = open(opts.source).read()\n    output = expander.expand(source, opts.origname)\n\n    if opts.console:\n        print(output)\n    else:\n        with open('combined.cpp', 'w') as f:\n            f.write(output)\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}