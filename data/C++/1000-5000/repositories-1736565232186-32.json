{
  "metadata": {
    "timestamp": 1736565232186,
    "page": 32,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "patriciogonzalezvivo/glslViewer",
      "stars": 4773,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.18359375,
          "content": "root = true\n\n[*]\nindent_style = space\nindent_size = 4\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.md]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.611328125,
          "content": "\n.DS_Store\n*.o\n\nglslViewer\nx32/*\nx64/*\n\ndebian/glslviewer\ndebian/debhelper-build-stamp\ndebian/files\ndebian/glslviewer.debhelper.log\ndebian/glslviewer.substvars\n\n.vscode/browse.db*\n.vs/glslViewer/v16/.suo\n.vs/glslViewer/v16\n\n*.vcxproj\n*.filters\n*.user\n*.sln\n.vs/glslViewer/v15/.suo\n.vs/glslViewer/v15/Browse.VC.db\n.vs/glslViewer/v15/Solution.VC.db\n.vs/glslViewer/v15/Solution.VC.db-shm\n.vs/glslViewer/v15/Solution.VC.db-wal\n.vs/ProjectSettings.json\n.vs/slnx.sqlite\n.vs/VSWorkspaceState.json\npremake5.exe\n\nbuild/\nbuild_wasm/\n\n.vscode/*.log\n\nCMakeFiles\ncmake_install.cmake\nCMakeCache.txt\nCMakeFiles\n\n\nDebug/\nRelease/\n__pycache__\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.4365234375,
          "content": "[submodule \"deps/vera\"]\n\tpath = deps/vera\n\turl = https://github.com/patriciogonzalezvivo/vera.git\n\t# url = git@github.com:patriciogonzalezvivo/vera.git\n[submodule \"deps/pybind11\"]\n\tpath = deps/pybind11\n\turl = https://github.com/pybind/pybind11.git\n\t# url = git@github.com:pybind/pybind11.git\n[submodule \"deps/lygia\"]\n\tpath = deps/lygia\n\turl = https://github.com/patriciogonzalezvivo/lygia.git\n\t#url = git@github.com:patriciogonzalezvivo/lygia.git\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.62109375,
          "content": "language: cpp\ncompiler: clang\nbranches:\n    only:\n        - main\ngit:\n    depth: 1\n\nmatrix:\n    include:\n        -   os: linux\n            dist: bionic\n            sudo: required\n            name: \"Linux Bionic\"\n            addons:\n                apt:\n                    packages:\n                        - xorg-dev \n                        - libglu1-mesa-dev\n                        - libavcodec-dev \n                        - libavfilter-dev  \n                        - libavdevice-dev \n                        - libavformat-dev \n                        - libavutil-dev \n                        - libswscale-dev \n                        - libv4l-dev \n                        - libjpeg-dev \n                        - libpng-dev \n                        - libtiff-dev\n\n        # -   os: osx\n        #     name: \"MacOS 10.8\"\n        #     env:\n        #         - MACOSX_DEPLOYMENT_TARGET=10.8\n\n# install:\n# - if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then brew update; fi\n# - if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then brew install ffmpeg; fi\n\nscript:\n  - mkdir build\n  - cd build\n  - cmake .. \n  - cmake --build .\n\n# branches:\n#   except:\n#     - \"/^debian\\\\/\\\\d/\"\n# \ndeploy:\n  - provider: launchpad\n    slug: ~patriciogv/glslviewer/+git/glslviewer\n    oauth_token:\n      secure: \"OW7GPoeGl8ZPX1ZSXixMgAAhvz2dI3Uif9NnIE7m1A3GMa8ctJKfAULtvjOM/iONYxOZvZeJLmPHYMCY/7L8OdvEJKP4+Dk0qJ/mIfCEKnulTzzjEKvEfos7/0Hjym5D0wVrNZEyiY8rUCm7MDmULHO7BYeBqrJLFJhlr5PZYyY=\"\n    oauth_token_secret:\n      secure: \"A8ZuwfRxu+KsEnU7cMOR2J2DIlQVZO4cPdhXehEZzMXQ/e3/hDkIqw/LicGeR+rIwkG+xgeW1CKdUmXBsptmWhnh8pmSV6xFUXJAFGgaXe7I4WILncHk9AngK7hLRKJjBSjZSkJGGXlTrz7b0esNn9Gyh+QiqZ/CQUhErRwTKNA=\""
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 11.9384765625,
          "content": "cmake_minimum_required(VERSION 3.2)\n\nset(VERSION_MAJOR 3)\nset(VERSION_MINOR 3)\nset(VERSION_PATCH 0)\nset(VERSION \"${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}\")\n\nproject(glslViewer \n        VERSION ${VERSION}\n        LANGUAGES C CXX )\n\nset(CMAKE_CXX_STANDARD 14)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\n# The compiled vera \nadd_subdirectory(deps)\n\nif(MSVC)\n    add_definitions( -DPLATFORM_WINDOWS )\nendif()\n\nif (NO_X11 OR FORCE_GBM)\n    add_compile_options(-std=c++14 -DGLM_FORCE_CXX14 -fpermissive -Wno-psabi -lpthread)\nendif()\n\nset(CORE_HEADERS\n    \"${PROJECT_SOURCE_DIR}/src/core/sandbox.h\"\n    \"${PROJECT_SOURCE_DIR}/src/core/sceneRender.h\"\n    \"${PROJECT_SOURCE_DIR}/src/core/uniforms.h\"\n    \"${PROJECT_SOURCE_DIR}/src/core/tools/command.h\"\n    \"${PROJECT_SOURCE_DIR}/src/core/tools/console.h\"\n    \"${PROJECT_SOURCE_DIR}/src/core/tools/files.h\"\n    \"${PROJECT_SOURCE_DIR}/src/core/tools/job.h\"\n    \"${PROJECT_SOURCE_DIR}/src/core/tools/lockFreeQueue.h\"\n    \"${PROJECT_SOURCE_DIR}/src/core/tools/record.h\"\n    \"${PROJECT_SOURCE_DIR}/src/core/tools/text.h\"\n    \"${PROJECT_SOURCE_DIR}/src/core/tools/tracker.h\"\n)\n\nset(CORE_SOURCES \n    \"${PROJECT_SOURCE_DIR}/src/core/sandbox.cpp\"\n    \"${PROJECT_SOURCE_DIR}/src/core/sceneRender.cpp\"\n    \"${PROJECT_SOURCE_DIR}/src/core/uniforms.cpp\"\n    \"${PROJECT_SOURCE_DIR}/src/core/tools/console.cpp\"\n    \"${PROJECT_SOURCE_DIR}/src/core/tools/record.cpp\"\n    \"${PROJECT_SOURCE_DIR}/src/core/tools/text.cpp\"\n    \"${PROJECT_SOURCE_DIR}/src/core/tools/tracker.cpp\"\n)\n\nadd_executable(glslViewer \n    \"${PROJECT_SOURCE_DIR}/src/main.cpp\"\n    ${CORE_SOURCES}\n)\n\n\ninclude_directories(deps/liblo)\ntarget_include_directories(glslViewer PRIVATE deps)\ntarget_link_libraries(glslViewer PRIVATE vera)\n# target_compile_definitions(vera PUBLIC SUPPORT_PLY_BINARY)\ntarget_compile_definitions(glslViewer PRIVATE DEBUG)\ntarget_compile_definitions(glslViewer PRIVATE GLSLVIEWER_VERSION_MAJOR=${VERSION_MAJOR})\ntarget_compile_definitions(glslViewer PRIVATE GLSLVIEWER_VERSION_MINOR=${VERSION_MINOR})\ntarget_compile_definitions(glslViewer PRIVATE GLSLVIEWER_VERSION_PATCH=${VERSION_PATCH})\n\nif (EMSCRIPTEN)    \n    \n    set(LFLAGS \"${LFLAGS} -s USE_GLFW=3\")\n    # set(LFLAGS \"${LFLAGS} -s FULL_ES2=1\")\n    # set(LFLAGS \"${LFLAGS} -s FULL_ES3=1\")\n    # set(LFLAGS \"${LFLAGS} -s MIN_WEBGL_VERSION=2\")\n    set(LFLAGS \"${LFLAGS} -s MAX_WEBGL_VERSION=2\")\n    # set(LFLAGS \"${LFLAGS} -s WEBGL2_BACKWARDS_COMPATIBILITY_EMULATION=1\")\n\n    set(LFLAGS \"${LFLAGS} -s EXPORTED_FUNCTIONS='[ \\\"_command\\\", \\\"_setFrag\\\", \\\"_setVert\\\", \\\"_getFrag\\\", \\\"_getVert\\\", \\\"_main\\\" ]' \")\n    set(LFLAGS \"${LFLAGS} -s EXPORTED_RUNTIME_METHODS='[\\\"ccall\\\",\\\"cwrap\\\"]' \")\n\n    set(LFLAGS \"${LFLAGS} -s ALLOW_MEMORY_GROWTH=1\")\n    set(LFLAGS \"${LFLAGS} -s NO_DYNAMIC_EXECUTION=1\")\n    # set(LFLAGS \"${LFLAGS} -s NO_DISABLE_EXCEPTION_CATCHING\")\n\n    # Copy the default index.html \n    file(COPY   assets/index.html DESTINATION ${CMAKE_CURRENT_BINARY_DIR} )\n\n    # Add examples folder to the .data file system \n    file(COPY   examples DESTINATION ${CMAKE_CURRENT_BINARY_DIR} )\n    set(LFLAGS \"${LFLAGS} --preload-file examples\")\n\n    set_target_properties(glslViewer PROPERTIES LINK_FLAGS \"${LFLAGS}\")\n    target_link_libraries(glslViewer PRIVATE glfw webxr)\n    \nelse()\n    find_package(Curses)\n    if (CURSES_FOUND)\n        target_compile_definitions(glslViewer PUBLIC SUPPORT_NCURSES)\n        include_directories(${CURSES_INCLUDE_DIR})\n        target_link_libraries(glslViewer PRIVATE ${CURSES_LIBRARY})\n    endif()\n\n    target_compile_definitions(glslViewer PUBLIC \n        SUPPORT_MULTITHREAD_RECORDING \n        SUPPORT_OSC\n    )\n\n    include(GNUInstallDirs)\n    include(InstallRequiredSystemLibraries)\n    set(CPACK_PACKAGE_NAME \"glslViewer\")\n    set(CPACK_PACKAGE_CONTACT \"Patricio Gonzalez Vivo <patriciogonzalezvivo@gmail.com>\")\n    set(CPACK_PACKAGE_VENDOR http://patriciogonzalezvivo.com)\n    set(CPACK_PACKAGE_HOMEPAGE_URL https://github.com/patriciogonzalezvivo/glslViewer)\n    set(CPACK_PACKAGE_VERSION_MAJOR \"${VERSION_MAJOR}\")\n    set(CPACK_PACKAGE_VERSION_MINOR \"${VERSION_MINOR}\")\n    set(CPACK_PACKAGE_VERSION_PATCH \"${VERSION_PATCH}\")\n    set(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"GlslViewer is a flexible console-base OpenGL Sandbox to display 2D/3D GLSL shaders.\")\n    set(CPACK_PACKAGE_DESCRIPTION_FILE \"${PROJECT_SOURCE_DIR}/DESCRIPTION\")\n    set(CPACK_RESOURCE_FILE_LICENSE \"${PROJECT_SOURCE_DIR}/LICENSE\")\n    set(CPACK_RESOURCE_FILE_README \"${PROJECT_SOURCE_DIR}/README.md\")\n    set(CPACK_PACKAGE_ICON \"${PROJECT_SOURCE_DIR}/assets/glslViewer.png\")\n\n    # resolve architecture. The reason i \"change\" i686 to i386 is that debian packages\n    # require i386 so this is for the future\n    if(\"${CMAKE_SYSTEM_PROCESSOR}\" STREQUAL \"i686\")\n        set(SYSTEM_ARCH \"i386\")\n    else()\n        set(SYSTEM_ARCH ${CMAKE_SYSTEM_PROCESSOR})\n    endif()\n\n    # set a default system name - use CMake setting (Linux|Windows|...)\n    set(SYSTEM_NAME ${CMAKE_SYSTEM_NAME})\n\n    # for msvc the SYSTEM_NAME is set win32/64 instead of \"Windows\"\n    if(MSVC)\n        if(CMAKE_CL_64)\n            set(SYSTEM_NAME \"win64\")\n        else()\n            set(SYSTEM_NAME \"win32\")\n        endif()\n    endif()\n    set(CPACK_PACKAGE_FILE_NAME \"${CMAKE_PROJECT_NAME}-${VERSION}-${SYSTEM_NAME}-${SYSTEM_ARCH}\")\n\n    if (MSVC)\n\t    target_link_libraries(glslViewer PRIVATE \n            lo_static \n            Ws2_32.lib \n            Iphlpapi.lib\n        )\n\n        install(TARGETS glslViewer)\n        set(CPACK_GENERATOR \"ZIP\")\n\n    else()\n        target_link_libraries(glslViewer PRIVATE pthread dl lo_static)\n        install(TARGETS glslViewer DESTINATION ${CMAKE_INSTALL_BINDIR})\n        \n        if (NOT APPLE)\n            target_link_libraries(glslViewer PRIVATE atomic)\n\n            # Install glslViewer Icon\n            install(FILES \"${PROJECT_SOURCE_DIR}/assets/glslViewer.png\" DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/pixmaps)\n            install(FILES \"${PROJECT_SOURCE_DIR}/assets/glslViewer.desktop\" DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/applications)\n            \n            # Install supported MIME file types by GlslViewer\n            install(FILES \"${PROJECT_SOURCE_DIR}/assets/glslViewer-types.xml\" DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/mime/packages)\n            find_program(XDG-MIME_EXECUTABLE xdg-mime)\n            install(CODE \"execute_process(COMMAND ${XDG-MIME_EXECUTABLE} install --novendor ${CMAKE_INSTALL_FULL_DATAROOTDIR}/mime/packages/glslViewer-types.xml)\")\n            install(CODE \"execute_process(COMMAND ${XDG-MIME_EXECUTABLE} default ${CMAKE_INSTALL_FULL_DATAROOTDIR}/applications/glslViewer.desktop model/lst)\")\n            install(CODE \"execute_process(COMMAND ${XDG-MIME_EXECUTABLE} default ${CMAKE_INSTALL_FULL_DATAROOTDIR}/applications/glslViewer.desktop model/ply)\")\n            install(CODE \"execute_process(COMMAND ${XDG-MIME_EXECUTABLE} default ${CMAKE_INSTALL_FULL_DATAROOTDIR}/applications/glslViewer.desktop model/obj)\")\n            install(CODE \"execute_process(COMMAND ${XDG-MIME_EXECUTABLE} default ${CMAKE_INSTALL_FULL_DATAROOTDIR}/applications/glslViewer.desktop model/gltf-binary)\")\n            install(CODE \"execute_process(COMMAND ${XDG-MIME_EXECUTABLE} default ${CMAKE_INSTALL_FULL_DATAROOTDIR}/applications/glslViewer.desktop model/gltf+json)\")\n            find_program(UPDATE_MIME_DATABASE update-mime-database)\n            install(CODE \"execute_process(COMMAND ${UPDATE_MIME_DATABASE} ${CMAKE_INSTALL_FULL_DATAROOTDIR}/mime )\")\n            find_program(UPDATE_DESKTOP_DATABASE update-desktop-database)\n            install(CODE \"execute_process(COMMAND ${UPDATE_DESKTOP_DATABASE} ${CMAKE_INSTALL_FULL_DATAROOTDIR}/applications)\")\n            \n            # Add a thumbnailer for 3D Models\n            install(FILES \"${PROJECT_SOURCE_DIR}/assets/glslViewer.thumbnailer\" DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/thumbnailers)\n            install(FILES \"${PROJECT_SOURCE_DIR}/assets/glslThumbnailer.sh\"\n                    PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE\n                    DESTINATION ${CMAKE_INSTALL_BINDIR}\n                    RENAME \"glslThumbnailer\")\n\n            # Add ScreenSaver script\n            install(FILES \"${PROJECT_SOURCE_DIR}/assets/glslScreenSaver.py\"\n                    PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE\n                    DESTINATION ${CMAKE_INSTALL_BINDIR}\n                    RENAME \"glslScreenSaver\")\n            install(FILES \"${PROJECT_SOURCE_DIR}/assets/glslScreenSaver.frag\" DESTINATION \"${CMAKE_INSTALL_DATAROOTDIR}/glslViewer\")\n            install(FILES \"${PROJECT_SOURCE_DIR}/assets/glslScreenSaver.yaml\" DESTINATION \"${CMAKE_INSTALL_DATAROOTDIR}/glslViewer\")\n\n            find_program(XDG-DESKTOP-MENU_EXECUTABLE xdg-desktop-menu)\n            execute_process(COMMAND ${XDG-DESKTOP-MENU_EXECUTABLE} install --novendor ${CMAKE_INSTALL_FULL_DATAROOTDIR}/applications/glslViewer.desktop)\n\n            # set(CPACK_GENERATOR \"DEB\")\n            set(DEBSRC_BUILD_DEPENDS debhelper git cmake xorg-dev libgbm-dev libglu1-mesa-dev libavcodec-dev libavfilter-dev  libavdevice-dev libavformat-dev libavutil-dev libswscale-dev libv4l-dev libjpeg-dev libpng-dev libtiff-dev)\n            set(DEBSRC_PACKAGE_DEPENDS ffmpeg libavcodec-extra libavfilter-extra xorg-x11-server-Xvfb )\n\n            set(CPACK_DEBIAN_PACKAGE_SHLIBDEPS ON)\n\n            set(CPACK_DEBIAN_PACKAGE_DEPENDS)\n            foreach(DEP ${DEBSRC_PACKAGE_DEPENDS})\n            set(CPACK_DEBIAN_PACKAGE_DEPEND \"${CPACK_DEBIAN_PACKAGE_DEPENDS}, ${DEP}\")\n            endforeach(DEP ${DEBSRC_PACKAGE_DEPENDS})  \n\n            set(CPACK_DEBIAN_BUILD_DEPENDS)\n            foreach(DEP ${DEBSRC_BUILD_DEPENDS})\n            set(CPACK_DEBIAN_BUILD_DEPENDS \"${CPACK_DEBIAN_BUILD_DEPENDS}, ${DEP}\")\n            endforeach(DEP ${DEBSRC_BUILD_DEPENDS})\n\n            # find out and set DEB_ARCHITECTURE\n            execute_process(\n                COMMAND dpkg --print-architecture\n                OUTPUT_VARIABLE DEB_ARCHITECTURE\n                OUTPUT_STRIP_TRAILING_WHITESPACE            \n            )\n            message(STATUS \"package_details.cmake: your architecture is ${DEB_ARCHITECTURE}\")\n\n            set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE ${DEB_ARCHITECTURE})\n            set(CPACK_DEBIAN_PACKAGE_SECTION graphics)\n            set(CPACK_DEBIAN_PACKAGE_PRIORITY extra )\n            set(CPACK_DEBIAN_PACKAGE_MAINTAINER \"Patricio Gonzalez Vivo <patriciogonzalezvivo@gmail.com>\")\n            set(CPACK_DEBIAN_DISTRIBUTION_NAME ubuntu )\n            set(CPACK_DEBIAN_DISTRIBUTION_RELEASES bionic focal ) \n            set(CPACK_DEBIAN_CHANGELOG \"  * Latest development version.\")\n            # set(CPACK_DEBIAN_RESOURCE_FILE_CHANGELOG ${PROJECT_SOURCE_DIR}/changelog)\n            # set(CPACK_DEBIAN_UPDATE_CHANGELOG ON)\n            set(CPACK_PACKAGE_FILE_NAME \"${CMAKE_PROJECT_NAME}-${VERSION}-${DEB_ARCHITECTURE}\")\n        endif()\n        \n    endif()\n\n    include(CPack)\n\nendif()\n\nif (PYTHON_BINDINGS)\n    find_package(Python3 3.10 REQUIRED COMPONENTS Interpreter Development)\n\n    # pybind11\n    set(DEPS_FOLDER \"${PROJECT_SOURCE_DIR}/deps\")\n    add_subdirectory(\"${DEPS_FOLDER}/pybind11\")\n    include_directories(${pybind11_INCLUDE_DIRS})\n\n    set(PYBIND_INCLUDES\n        \"${PROJECT_SOURCE_DIR}/src/python/engine.h\"\n        \"${PROJECT_SOURCE_DIR}/src/python/engine.cpp\"\n        \"${PROJECT_SOURCE_DIR}/src/python/headless.h\"\n        \"${PROJECT_SOURCE_DIR}/src/python/headless.cpp\"\n        \"${PROJECT_SOURCE_DIR}/src/python/bindings.cpp\"\n        ${CORE_SOURCES}\n        ${CORE_HEADERS}\n    )\n\n    pybind11_add_module(PyGlslViewer ${PYBIND_INCLUDES})\n    target_compile_definitions(PyGlslViewer PUBLIC PYTHON_RENDER)\n    target_compile_definitions(PyGlslViewer PRIVATE GLSLVIEWER_VERSION_MAJOR=${VERSION_MAJOR})\n    target_compile_definitions(PyGlslViewer PRIVATE GLSLVIEWER_VERSION_MINOR=${VERSION_MINOR})\n    target_compile_definitions(PyGlslViewer PRIVATE GLSLVIEWER_VERSION_PATCH=${VERSION_PATCH})\n    target_include_directories(PyGlslViewer PUBLIC ${DEPS_FOLDER})\n    target_link_libraries(PyGlslViewer PRIVATE vera pybind11::module)\n\nendif()"
        },
        {
          "name": "DESCRIPTION",
          "type": "blob",
          "size": 1.396484375,
          "content": "GlslViewer is a flexible console-base OpenGL Sandbox to display 2D/3D GLSL shaders that support to:\n\n    * fragment and vertex shaders on GLSL from versions 100 to 430 (depending on your OS driver)\n    * resolve #include dependencies\n    * adding/deleting #define keys through console IN commands and OSC\n    * automatically generated set of defines based on the platform, buffer, render pass, geometry attributes and materials properties.\n    * passing custom uniforms (float, int, vec2, vec3 and vec4) through console IN or OSC\n    * Different kinds of Textures (png, bmp, jpg, tga, hdr, gif, mp4, mov, rtc, rtsp, local camera devices and audio textures)\n    * import of Cubemaps and spherical harmonics (png, jpg, tga, hdr)\n    * import LST, PLY, OBJ or GLTF files (and their dependencies)\n    * default vert/frag shaders for 2D shader and 3D material shaders with PBR lighting model\n    * hot reload of files on changes\n    * One default light and one default camera\n    * Interactive commands thought POSIX console IN/OUT or OSC\n    * different debug modes (histogram, textures, buffers, bounding box, etc)\n    * shadow maps\n    * headless rendering\n    * fullscreen and screensaver mode\n    * HoloPlay rendering on LookingGlass Display\n    * image export\n    * PNG sequence export\n    * WASM compilation using emscripten\n    \nJoing #GlslViewer channel on https://shader.zone/ to learn how to use it, share work and get help."
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4931640625,
          "content": "Copyright (c) 2025, Patricio Gonzalez Vivo\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of the copyright holder nor the\n      names of its contributors may be used to endorse or promote products\n      derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.4208984375,
          "content": "default:\n\t@mkdir build\n\t@cd build && cmake .. && make\n\t@@cd ..\n\nnox11:\n\t@mkdir build_nox11\n\t@cd build_nox11 && cmake -DNO_X11 .. && make\n\t@cd ..\n\nwasm:\n\t@mkdir build_wasm\n\t@cd build_wasm && cmake .. -DCMAKE_TOOLCHAIN_FILE=$EMSDK/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake && make \n\t@cd ..\n\nclean:\n\t@rm -rf build*\n\ninstall:\n\t@cd build && make install\n\t@cd ..\n\ninstall_nox11:\n\t@cd build_nox11 && make install\n\t@cd .."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.923828125,
          "content": "![](.github/images/logo.png)\n\n# glslViewer [![](https://img.shields.io/static/v1?label=Sponsor&message=%E2%9D%A4&logo=GitHub&color=%23fe8e86)](https://github.com/sponsors/patriciogonzalezvivo) [![Donate](https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=4BQMKQJDQ9XH6)\n\n![](.github/images/02.gif)\n\nGlslViewer is a flexible console-base OpenGL Sandbox to display 2D/3D GLSL shaders without the need of an UI. You can definitely make your own UI or wrapper using the Python Module (include) or any other tool that communicates back/forth with glslViewer through the standard POSIX console In/Out or OSC.\n\nJoing [#GlslViewer channel on shader.zone discord](https://shader.zone/) to learn how to use it, share work and get help.\n\n![](.github/images/03.gif)\n\nGlslViewer gives support to:\n\n* fragment and vertex shaders on GLSL \n* resolve #include dependencies\n* adding/deleting #define keys through console IN commands and OSC\n* automatically generated set of defines based on the platform, buffer, render pass, geometry attributes and materials properties.\n* passing custom uniforms (float, int, vec2, vec3 and vec4) through console IN or OSC\n* Different kinds of Textures (png, bmp, jpg, tga, hdr, gif, mp4, mov, rtc, rtsp, local camera devices and audio textures)\n* import of Cubemaps and spherical harmonics (png, jpg, tga, hdr)\n* import LST, PLY, OBJ or GLTF files (and their dependencies)\n* default vert/frag shaders for 2D shader and 3D material shaders with PBR lighting model\n* hot reload of files on changes\n* One default light and one default camera\n* Interactive commands thought POSIX console IN/OUT or OSC\n* different debug modes (histogram, textures, buffers, bounding box, etc)\n* shadow maps\n* headless rendering\n* fullscreen and screensaver mode\n* HoloPlay rendering on LookingGlass Display\n* image export\n* PNG sequence export\n* WASM crosscompiling\n\n![](.github/images/06.gif)\n\n![](.github/images/09.gif)\n\n## Wiki themes\n\n* [Installing](https://github.com/patriciogonzalezvivo/glslViewer/wiki/Installing)\n    * [Compile on Linux](https://github.com/patriciogonzalezvivo/glslViewer/wiki/Compile-on-linux)\n    * [Compile on MacOS](https://github.com/patriciogonzalezvivo/glslViewer/wiki/Compile-on-MacOS)\n    * [Compile on Windows](https://github.com/patriciogonzalezvivo/glslViewer/wiki/Compile-on-Windows)\n    * [Compile as WebAssembly](https://github.com/patriciogonzalezvivo/glslViewer/wiki/Compile-as-Emscripten-WebAssembly)\n\n* [Using GlslViewer](https://github.com/patriciogonzalezvivo/glslViewer/wiki/Using-GlslViewer)\n    * [Loading a single Fragment shader](https://github.com/patriciogonzalezvivo/glslViewer/wiki/Using-GlslViewer#1-loading-a-single-fragment-shader)\n    * [Loading geometry and a vertex shader](https://github.com/patriciogonzalezvivo/glslViewer/wiki/Using-GlslViewer#2-loading-geometry-and-a-vertex-shader)\n    * [Load a model and edit the default PBR shader](https://github.com/patriciogonzalezvivo/glslViewer/wiki/Using-GlslViewer#21-load-a-model-and-edit-the-default-pbr-shader)\n    * [Loading Textures](https://github.com/patriciogonzalezvivo/glslViewer/wiki/Using-GlslViewer#3-loading-textures)\n    * [Audio and video Textures](https://github.com/patriciogonzalezvivo/glslViewer/wiki/Audio-and-Video-Textures)\n    * [Other arguments](https://github.com/patriciogonzalezvivo/glslViewer/wiki/Using-GlslViewer#4-other-arguments)\n    * [Console IN commands](https://github.com/patriciogonzalezvivo/glslViewer/wiki/Interacting-with-GlslViewer)\n\n* Convention: \n    * [Defines](https://github.com/patriciogonzalezvivo/glslViewer/wiki/GlslViewer-DEFINES)\n         * [Platform](https://github.com/patriciogonzalezvivo/glslViewer/wiki/GlslViewer-DEFINES#platform-defines)\n         * [Buffers & Render Passes](https://github.com/patriciogonzalezvivo/glslViewer/wiki/GlslViewer-DEFINES#buffers-and-render-passes)\n         * [Geometry Attributes](https://github.com/patriciogonzalezvivo/glslViewer/wiki/GlslViewer-DEFINES#geometry-defines)\n         * [Materials](https://github.com/patriciogonzalezvivo/glslViewer/wiki/GlslViewer-DEFINES#material-defines)\n    * [Uniforms](https://github.com/patriciogonzalezvivo/glslViewer/wiki/GlslViewer-UNIFORMS)\n\n\n## Author\n\n[Patricio Gonzalez Vivo](https://twitter.com/patriciogv): [github](https://github.com/patriciogonzalezvivo) | [twitter](https://twitter.com/patriciogv) | [instagram](https://www.instagram.com/patriciogonzalezvivo/) | [website](http://patricio.io)\n\n\n## Acknowledgements\n\nThanks to:\n\n* [Mihai Sebea](https://twitter.com/mihai_sebea) and [Bertrand Carré](https://twitter.com/bertrandcarre) for making the Windows compile happen\n\n* [Karim Naaki](http://karim.naaji.fr/) lot of concept and code was inspired by this two projects: [fragTool](https://github.com/karimnaaji/fragtool) and [hdreffects](https://github.com/karimnaaji/hdreffects)\n\n* [Doug Moen](https://github.com/doug-moen) he help to add the compatibility to ShaderToy shaders and some RayMarching features were added for his integration with his project: [curv](https://github.com/doug-moen/curv).\n\n* [Wray](https://twitter.com/wraybowling) implement the OSC listener feature, opening GlslViewer to an entire new ways of communicating and interacting with other apps, devices and ecosystems.\n\n* [Yvan Sraka](https://github.com/yvan-sraka) for putting the code in shape and setting it up for TravisCI.\n\n* [Andsz](http://andsz.de/) for Spherical Harmonics code from [Spherical Harmonics Playground](https://github.com/ands/spherical_harmonics_playground/)\n\n* [Syoyo Fujita](syoyo.wordpress.com) for the work on [tinyobjloader v1.0.x](https://github.com/syoyo/tinyobjloader)\n\n* [Morgan McGuire](https://casual-effects.com)'s for the OBJ models on [Computer Graphics Archive](https://casual-effects.com/data)\n\n* [Philip Rideout](http://prideout.net/) and [Romain Guy](http://www.curious-creature.com/) general generosity to share their code and experience\n\n* [Sergei B](https://github.com/bespsm) for adding support for Audio textures\n\n\n"
        },
        {
          "name": "__init__.py",
          "type": "blob",
          "size": 1.1640625,
          "content": "\"\"\"\nA Blender addon to integrate GlslViewer as a CustomRenderEngine\n\"\"\"\n\nbl_info = {\n    \"name\" : \"glslViewer\",\n    \"author\" : \"Patricio Gonzalez Vivo\",\n    \"description\" : \"A Blender addon to integrate GlslViewer as a CustomRenderEngine\",\n    \"blender\" : (2, 80, 0),\n    \"version\" : (3, 2, 2),\n    \"location\" : \"\",\n    \"warning\" : \"\",\n    \"category\" : \"Generic\"\n}\n\nimport importlib\nfrom .scripts import developer_utility\nimportlib.reload(developer_utility)\nmodules = developer_utility.setup_addon_modules(\n    __path__, __name__, \"bpy\" in locals()\n)\n\nfrom .scripts.gv_render_engine import register_render_engine, unregister_render_engine\nfrom .scripts.gv_operators import register_operators, unregister_operators\nfrom .scripts.gv_render_ui import register_render_ui, unregister_render_ui\nfrom .scripts.gv_properties import register_properties, unregister_properties\n\ndef register():\n    # register_addon_preferences()\n    register_render_engine()\n    register_operators()\n    register_render_ui()\n    register_properties()\n\ndef unregister():\n    unregister_render_ui()\n    unregister_operators()\n    unregister_render_engine()\n    unregister_properties()\n    # unregister_addon_preferences()"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "changelog",
          "type": "blob",
          "size": 2.0673828125,
          "content": "glslviewer (2.0.0) focal; urgency=medium\n\n  * Major rearch. Splitting framework into ADA library. Which internally compiles GLFW and other GL dependencies\n  * Change to use CMake for consistency across platforms\n  * Cross compilation to WASM using emscripten\n  * Binnary PLYs, OSC, Audio Textures and Video are now optative features\n  * Using Liblo for OSC to have 6 digits precision after the floating point \n\n -- Patricio Gonzalez Vivo <patriciogonzalezvivo@gmail.com>  Wed, 13 Oct 2021 05:41:37 -0400\n\nglslviewer (1.7.0) focal; urgency=medium\n\n  * Adding support for Video and Audio textures\n  * Adding support for Looking Glass Portrait displays\n  * Dropping support for Python wrapper, glslLoad and glslScreenSaver\n\n -- Patricio Gonzalez Vivo <patriciogonzalezvivo@gmail.com>  Sat, 22 May 2021 11:13:21 -0700\n\nglslviewer (1.6.8) focal; urgency=medium\n\n  * Adding GlslScreenSaver as part of the bin package\n  * trying out travis CI deployment\n\n -- Patricio Gonzalez Vivo <patriciogonzalezvivo@gmail.com>  Sun, 19 Jul 2020 11:13:21 -0700\n\nglslviewer (1.6.7) focal; urgency=medium\n\n  * Sixth attempt to make a .deb on my PPA\n\n -- Patricio Gonzalez Vivo <patriciogonzalezvivo@gmail.com>  Thu, 16 Jul 2020 21:16:09 -0700\n\nglslviewer (1.6.6) focal; urgency=medium\n\n  * Fifth attempt to make a .deb on my PPA\n\n -- Patricio Gonzalez Vivo <patriciogonzalezvivo@gmail.com>  Thu, 16 Jul 2020 20:52:49 -0700\n\nglslviewer (1.6.5) focal; urgency=medium\n\n  * Fourth attempt to make a .deb on my PPA\n\n -- Patricio Gonzalez Vivo <patriciogonzalezvivo@gmail.com>  Thu, 16 Jul 2020 20:25:33 -0700\n\nglslviewer (1.6.4) focal; urgency=medium\n\n  *  Third attempt to make a .deb on my ppa\n\n -- Patricio Gonzalez Vivo <patriciogonzalezvivo@gmail.com>  Thu, 16 Jul 2020 16:34:02 -0700\n\nglslviewer (1.6.3) focal; urgency=medium\n\n  * Second attempt to make a .deb package for my ppa\n\n -- Patricio Gonzalez Vivo <patriciogonzalezvivo@gmail.com>  Thu, 16 Jul 2020 08:43:45 -0700\n\nglslviewer (1.6.2) focal; urgency=medium\n\n  * First official package\n\n -- Patricio Gonzalez Vivo <patriciogonzalezvivo@gmail.com>  Wed, 15 Jul 2020 15:06:00 -0800\n"
        },
        {
          "name": "deps",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}