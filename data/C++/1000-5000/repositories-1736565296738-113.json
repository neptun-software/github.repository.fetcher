{
  "metadata": {
    "timestamp": 1736565296738,
    "page": 113,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "luau-lang/luau",
      "stars": 4180,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.8076171875,
          "content": "BasedOnStyle: LLVM\n\nAccessModifierOffset: -4\nAllowShortBlocksOnASingleLine: Never\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: Empty\nAllowShortLambdasOnASingleLine: Empty\nAllowShortIfStatementsOnASingleLine: Never\nAllowShortLoopsOnASingleLine: false\nBreakBeforeBraces: Allman\nBreakConstructorInitializers: BeforeComma\nBreakInheritanceList: BeforeComma\nColumnLimit: 150\nIndentCaseLabels: false\nSortIncludes: false\nIndentWidth: 4\nTabWidth: 4\nObjCBlockIndentWidth: 4\nUseTab: Never\nPointerAlignment: Left\nSpaceAfterTemplateKeyword: false\nAlignEscapedNewlines: DontAlign\nAlwaysBreakTemplateDeclarations: Yes\nMaxEmptyLinesToKeep: 10\nAllowAllParametersOfDeclarationOnNextLine: false\nAlignAfterOpenBracket: BlockIndent\nBinPackArguments: false\nBinPackParameters: false\nPenaltyReturnTypeOnItsOwnLine: 10000\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.205078125,
          "content": "/build/\n/build[.-]*/\n/out\n/cmake/\n/cmake[.-]*/\n/coverage/\n/.vs/\n/.vscode/\n/fuzz/luau.pb.*\n/crash-*\n/default.prof*\n/fuzz-*\n/luau\n/luau-tests\n/luau-analyze\n/luau-bytecode\n/luau-compile\n__pycache__\n.cache\n.clangd\n"
        },
        {
          "name": "Analysis",
          "type": "tree",
          "content": null
        },
        {
          "name": "Ast",
          "type": "tree",
          "content": null
        },
        {
          "name": "CLI",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 12.4365234375,
          "content": "# This file is part of the Luau programming language and is licensed under MIT License; see LICENSE.txt for details\nif(EXT_PLATFORM_STRING)\n    include(EXTLuau.cmake)\n    return()\nendif()\n\ncmake_minimum_required(VERSION 3.0)\n\noption(LUAU_BUILD_CLI \"Build CLI\" ON)\noption(LUAU_BUILD_TESTS \"Build tests\" ON)\noption(LUAU_BUILD_WEB \"Build Web module\" OFF)\noption(LUAU_WERROR \"Warnings as errors\" OFF)\noption(LUAU_STATIC_CRT \"Link with the static CRT (/MT)\" OFF)\noption(LUAU_EXTERN_C \"Use extern C for all APIs\" OFF)\n\ncmake_policy(SET CMP0054 NEW)\ncmake_policy(SET CMP0091 NEW)\n\nif(LUAU_STATIC_CRT)\n    cmake_minimum_required(VERSION 3.15)\n    set(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>\")\nendif()\n\nproject(Luau LANGUAGES CXX C)\nadd_library(Luau.Common INTERFACE)\nadd_library(Luau.CLI.lib STATIC)\nadd_library(Luau.Ast STATIC)\nadd_library(Luau.Compiler STATIC)\nadd_library(Luau.Config STATIC)\nadd_library(Luau.Analysis STATIC)\nadd_library(Luau.EqSat STATIC)\nadd_library(Luau.CodeGen STATIC)\nadd_library(Luau.VM STATIC)\nadd_library(isocline STATIC)\n\nif(LUAU_BUILD_CLI)\n    add_executable(Luau.Repl.CLI)\n    add_executable(Luau.Analyze.CLI)\n    add_executable(Luau.Ast.CLI)\n    add_executable(Luau.Reduce.CLI)\n    add_executable(Luau.Compile.CLI)\n    add_executable(Luau.Bytecode.CLI)\n\n    # This also adds target `name` on Linux/macOS and `name.exe` on Windows\n    set_target_properties(Luau.Repl.CLI PROPERTIES OUTPUT_NAME luau)\n    set_target_properties(Luau.Analyze.CLI PROPERTIES OUTPUT_NAME luau-analyze)\n    set_target_properties(Luau.Ast.CLI PROPERTIES OUTPUT_NAME luau-ast)\n    set_target_properties(Luau.Reduce.CLI PROPERTIES OUTPUT_NAME luau-reduce)\n    set_target_properties(Luau.Compile.CLI PROPERTIES OUTPUT_NAME luau-compile)\n    set_target_properties(Luau.Bytecode.CLI PROPERTIES OUTPUT_NAME luau-bytecode)\nendif()\n\nif(LUAU_BUILD_TESTS)\n    add_executable(Luau.UnitTest)\n    add_executable(Luau.Conformance)\n    add_executable(Luau.CLI.Test)\nendif()\n\nif(LUAU_BUILD_WEB)\n    add_executable(Luau.Web)\nendif()\n\n# Proxy target to make it possible to depend on private VM headers\nadd_library(Luau.VM.Internals INTERFACE)\n\ninclude(Sources.cmake)\n\ntarget_include_directories(Luau.Common INTERFACE Common/include)\n\ntarget_compile_features(Luau.CLI.lib PUBLIC cxx_std_17)\ntarget_include_directories(Luau.CLI.lib PUBLIC CLI/include)\ntarget_link_libraries(Luau.CLI.lib PRIVATE Luau.Common Luau.Config)\n\ntarget_compile_features(Luau.Ast PUBLIC cxx_std_17)\ntarget_include_directories(Luau.Ast PUBLIC Ast/include)\ntarget_link_libraries(Luau.Ast PUBLIC Luau.Common)\n\ntarget_compile_features(Luau.Compiler PUBLIC cxx_std_17)\ntarget_include_directories(Luau.Compiler PUBLIC Compiler/include)\ntarget_link_libraries(Luau.Compiler PUBLIC Luau.Ast)\n\ntarget_compile_features(Luau.Config PUBLIC cxx_std_17)\ntarget_include_directories(Luau.Config PUBLIC Config/include)\ntarget_link_libraries(Luau.Config PUBLIC Luau.Ast)\n\ntarget_compile_features(Luau.Analysis PUBLIC cxx_std_17)\ntarget_include_directories(Luau.Analysis PUBLIC Analysis/include)\ntarget_link_libraries(Luau.Analysis PUBLIC Luau.Ast Luau.EqSat Luau.Config)\ntarget_link_libraries(Luau.Analysis PRIVATE Luau.Compiler Luau.VM)\n\ntarget_compile_features(Luau.EqSat PUBLIC cxx_std_17)\ntarget_include_directories(Luau.EqSat PUBLIC EqSat/include)\ntarget_link_libraries(Luau.EqSat PUBLIC Luau.Common)\n\ntarget_compile_features(Luau.CodeGen PRIVATE cxx_std_17)\ntarget_include_directories(Luau.CodeGen PUBLIC CodeGen/include)\ntarget_link_libraries(Luau.CodeGen PRIVATE Luau.VM Luau.VM.Internals) # Code generation needs VM internals\ntarget_link_libraries(Luau.CodeGen PUBLIC Luau.Common)\n\ntarget_compile_features(Luau.VM PRIVATE cxx_std_11)\ntarget_include_directories(Luau.VM PUBLIC VM/include)\ntarget_link_libraries(Luau.VM PUBLIC Luau.Common)\n\ntarget_include_directories(isocline PUBLIC extern/isocline/include)\n\ntarget_include_directories(Luau.VM.Internals INTERFACE VM/src)\n\nset(LUAU_OPTIONS)\n\nif(MSVC)\n    list(APPEND LUAU_OPTIONS /D_CRT_SECURE_NO_WARNINGS) # We need to use the portable CRT functions.\n    list(APPEND LUAU_OPTIONS \"/we4018\") # Signed/unsigned mismatch\n    list(APPEND LUAU_OPTIONS \"/we4388\") # Also signed/unsigned mismatch\nelse()\n    list(APPEND LUAU_OPTIONS -Wall) # All warnings\n    list(APPEND LUAU_OPTIONS -Wimplicit-fallthrough)\n    list(APPEND LUAU_OPTIONS -Wsign-compare) # This looks to be included in -Wall for GCC but not clang\nendif()\n\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\")\n    list(APPEND LUAU_OPTIONS /MP) # Distribute single project compilation across multiple cores\nendif()\n\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n    # Some gcc versions treat var in `if (type var = val)` as unused\n    # Some gcc versions treat variables used in constexpr if blocks as unused\n    list(APPEND LUAU_OPTIONS -Wno-unused)\n    # some gcc versions warn maybe uninitialized on optional<string> members on structs\n    list(APPEND LUAU_OPTIONS -Wno-maybe-uninitialized)\nendif()\n\n# Enabled in CI; we should be warning free on our main compiler versions but don't guarantee being warning free everywhere\nif(LUAU_WERROR)\n    if(MSVC)\n        list(APPEND LUAU_OPTIONS /WX) # Warnings are errors\n    else()\n        list(APPEND LUAU_OPTIONS -Werror) # Warnings are errors\n    endif()\nendif()\n\nif(LUAU_BUILD_WEB)\n    # add -fexceptions for emscripten to allow exceptions to be caught in C++\n    list(APPEND LUAU_OPTIONS -fexceptions)\nendif()\n\nset(ISOCLINE_OPTIONS)\n\nif (NOT CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\")\n    list(APPEND ISOCLINE_OPTIONS -Wno-unused-function)\nendif()\n\ntarget_compile_options(Luau.Ast PRIVATE ${LUAU_OPTIONS})\ntarget_compile_options(Luau.Analysis PRIVATE ${LUAU_OPTIONS})\ntarget_compile_options(Luau.EqSat PRIVATE ${LUAU_OPTIONS})\ntarget_compile_options(Luau.CLI.lib PRIVATE ${LUAU_OPTIONS})\ntarget_compile_options(Luau.CodeGen PRIVATE ${LUAU_OPTIONS})\ntarget_compile_options(Luau.VM PRIVATE ${LUAU_OPTIONS})\ntarget_compile_options(isocline PRIVATE ${LUAU_OPTIONS} ${ISOCLINE_OPTIONS})\n\nif(LUAU_EXTERN_C)\n    # enable extern \"C\" for VM (lua.h, lualib.h) and Compiler (luacode.h) to make Luau friendlier to use from non-C++ languages\n    # note that we enable LUA_USE_LONGJMP=1 as well; otherwise functions like luaL_error will throw C++ exceptions, which can't be done from extern \"C\" functions\n    target_compile_definitions(Luau.VM PUBLIC LUA_USE_LONGJMP=1)\n    target_compile_definitions(Luau.VM PUBLIC LUA_API=extern\\\"C\\\")\n    target_compile_definitions(Luau.Compiler PUBLIC LUACODE_API=extern\\\"C\\\")\n    target_compile_definitions(Luau.CodeGen PUBLIC LUACODEGEN_API=extern\\\"C\\\")\nendif()\n\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\" AND MSVC_VERSION GREATER_EQUAL 1924)\n    # disable partial redundancy elimination which regresses interpreter codegen substantially in VS2022:\n    # https://developercommunity.visualstudio.com/t/performance-regression-on-a-complex-interpreter-lo/1631863\n    set_source_files_properties(VM/src/lvmexecute.cpp PROPERTIES COMPILE_FLAGS /d2ssa-pre-)\nendif()\n\nif (NOT MSVC)\n    # disable support for math_errno which allows compilers to lower sqrt() into a single CPU instruction\n    target_compile_options(Luau.VM PRIVATE -fno-math-errno)\nendif()\n\nif(MSVC AND LUAU_BUILD_CLI)\n    # the default stack size that MSVC linker uses is 1 MB; we need more stack space in Debug because stack frames are larger\n    set_target_properties(Luau.Analyze.CLI PROPERTIES LINK_FLAGS_DEBUG /STACK:2097152)\n    set_target_properties(Luau.Repl.CLI PROPERTIES LINK_FLAGS_DEBUG /STACK:2097152)\nendif()\n\n# embed .natvis inside the library debug information\nif(MSVC)\n    target_link_options(Luau.Ast INTERFACE /NATVIS:${CMAKE_CURRENT_SOURCE_DIR}/tools/natvis/Ast.natvis)\n    target_link_options(Luau.Analysis INTERFACE /NATVIS:${CMAKE_CURRENT_SOURCE_DIR}/tools/natvis/Analysis.natvis)\n    target_link_options(Luau.CodeGen INTERFACE /NATVIS:${CMAKE_CURRENT_SOURCE_DIR}/tools/natvis/CodeGen.natvis)\n    target_link_options(Luau.VM INTERFACE /NATVIS:${CMAKE_CURRENT_SOURCE_DIR}/tools/natvis/VM.natvis)\nendif()\n\n# make .natvis visible inside the solution\nif(MSVC_IDE)\n    target_sources(Luau.Ast PRIVATE tools/natvis/Ast.natvis)\n    target_sources(Luau.Analysis PRIVATE tools/natvis/Analysis.natvis)\n    target_sources(Luau.CodeGen PRIVATE tools/natvis/CodeGen.natvis)\n    target_sources(Luau.VM PRIVATE tools/natvis/VM.natvis)\nendif()\n\n# On Windows and Android threads are provided, on Linux/Mac/iOS we use pthreads\nadd_library(osthreads INTERFACE)\nif(CMAKE_SYSTEM_NAME MATCHES \"Linux|Darwin|iOS\")\n    target_link_libraries(osthreads INTERFACE \"-lpthread\")\nendif ()\n\nif(LUAU_BUILD_CLI)\n    target_compile_options(Luau.Repl.CLI PRIVATE ${LUAU_OPTIONS})\n    target_compile_options(Luau.Reduce.CLI PRIVATE ${LUAU_OPTIONS})\n    target_compile_options(Luau.Analyze.CLI PRIVATE ${LUAU_OPTIONS})\n    target_compile_options(Luau.Ast.CLI PRIVATE ${LUAU_OPTIONS})\n    target_compile_options(Luau.Compile.CLI PRIVATE ${LUAU_OPTIONS})\n    target_compile_options(Luau.Bytecode.CLI PRIVATE ${LUAU_OPTIONS})\n\n    target_include_directories(Luau.Repl.CLI PRIVATE extern extern/isocline/include)\n\n    target_link_libraries(Luau.Repl.CLI PRIVATE Luau.Compiler Luau.Config Luau.CodeGen Luau.VM Luau.CLI.lib isocline)\n\n    target_link_libraries(Luau.Repl.CLI PRIVATE osthreads)\n    target_link_libraries(Luau.Analyze.CLI PRIVATE osthreads)\n\n    target_link_libraries(Luau.Analyze.CLI PRIVATE Luau.Analysis Luau.CLI.lib)\n\n    target_link_libraries(Luau.Ast.CLI PRIVATE Luau.Ast Luau.Analysis Luau.CLI.lib)\n\n    target_compile_features(Luau.Reduce.CLI PRIVATE cxx_std_17)\n    target_include_directories(Luau.Reduce.CLI PUBLIC Reduce/include)\n    target_link_libraries(Luau.Reduce.CLI PRIVATE Luau.Common Luau.Ast Luau.Analysis Luau.CLI.lib)\n\n    target_link_libraries(Luau.Compile.CLI PRIVATE Luau.Compiler Luau.VM Luau.CodeGen Luau.CLI.lib)\n\n    target_link_libraries(Luau.Bytecode.CLI PRIVATE Luau.Compiler Luau.VM Luau.CodeGen Luau.CLI.lib)\nendif()\n\nif(LUAU_BUILD_TESTS)\n    target_compile_options(Luau.UnitTest PRIVATE ${LUAU_OPTIONS})\n    target_compile_definitions(Luau.UnitTest PRIVATE DOCTEST_CONFIG_DOUBLE_STRINGIFY)\n    target_include_directories(Luau.UnitTest PRIVATE extern)\n    target_link_libraries(Luau.UnitTest PRIVATE Luau.Analysis Luau.Compiler Luau.CodeGen)\n\n    target_compile_options(Luau.Conformance PRIVATE ${LUAU_OPTIONS})\n    target_compile_definitions(Luau.Conformance PRIVATE DOCTEST_CONFIG_DOUBLE_STRINGIFY)\n    target_include_directories(Luau.Conformance PRIVATE extern)\n    target_link_libraries(Luau.Conformance PRIVATE Luau.Analysis Luau.Compiler Luau.CodeGen Luau.VM)\n    if(CMAKE_SYSTEM_NAME MATCHES \"Android|iOS\")\n        set(LUAU_CONFORMANCE_SOURCE_DIR \"Client/Luau/tests/conformance\")\n    else ()\n        file(REAL_PATH \"tests/conformance\" LUAU_CONFORMANCE_SOURCE_DIR)\n    endif ()\n    target_compile_definitions(Luau.Conformance PRIVATE LUAU_CONFORMANCE_SOURCE_DIR=\"${LUAU_CONFORMANCE_SOURCE_DIR}\")\n\n    target_compile_options(Luau.CLI.Test PRIVATE ${LUAU_OPTIONS})\n    target_include_directories(Luau.CLI.Test PRIVATE extern CLI)\n    target_link_libraries(Luau.CLI.Test PRIVATE Luau.Compiler Luau.Config Luau.CodeGen Luau.VM Luau.CLI.lib isocline)\n    target_link_libraries(Luau.CLI.Test PRIVATE osthreads)\n\nendif()\n\nif(LUAU_BUILD_WEB)\n    target_compile_options(Luau.Web PRIVATE ${LUAU_OPTIONS})\n    target_link_libraries(Luau.Web PRIVATE Luau.Compiler Luau.VM)\n\n    # declare exported functions to emscripten\n    target_link_options(Luau.Web PRIVATE -sEXPORTED_FUNCTIONS=['_executeScript'] -sEXPORTED_RUNTIME_METHODS=['ccall','cwrap'])\n\n    # add -fexceptions for emscripten to allow exceptions to be caught in C++\n    target_link_options(Luau.Web PRIVATE -fexceptions)\n\n    # the output is a single .js file with an embedded wasm blob\n    target_link_options(Luau.Web PRIVATE -sSINGLE_FILE=1)\nendif()\n\nadd_subdirectory(fuzz)\n\n# validate dependencies for internal libraries\nforeach(LIB Luau.Ast Luau.Compiler Luau.Config Luau.Analysis Luau.EqSat Luau.CodeGen Luau.VM)\n    if(TARGET ${LIB})\n        get_target_property(DEPENDS ${LIB} LINK_LIBRARIES)\n        if(LIB MATCHES \"CodeGen|VM\" AND DEPENDS MATCHES \"Ast|Analysis|Config|Compiler\")\n            message(FATAL_ERROR ${LIB} \" is a runtime component but it depends on one of the offline components\")\n        endif()\n        if(LIB MATCHES \"Ast|EqSat|Compiler\" AND DEPENDS MATCHES \"CodeGen|VM\")\n            message(FATAL_ERROR ${LIB} \" is an offline component but it depends on one of the runtime components\")\n        endif()\n        if(LIB MATCHES \"Ast|Compiler\" AND DEPENDS MATCHES \"Analysis|Config\")\n            message(FATAL_ERROR ${LIB} \" is a compiler component but it depends on one of the analysis components\")\n        endif()\n    endif()\nendforeach()\n"
        },
        {
          "name": "CMakePresets.json",
          "type": "blob",
          "size": 1.357421875,
          "content": "{\n    \"version\": 6,\n    \"configurePresets\": [\n        {\n            \"name\": \"fuzz\",\n            \"displayName\": \"Fuzz\",\n            \"description\": \"Configures required fuzzer settings.\",\n            \"binaryDir\": \"build\",\n            \"condition\": {\n                \"type\": \"anyOf\",\n                \"conditions\": [\n                    {\n                        \"type\": \"equals\",\n                        \"lhs\": \"${hostSystemName}\",\n                        \"rhs\": \"Darwin\"\n                    },\n                    {\n                        \"type\": \"equals\",\n                        \"lhs\": \"${hostSystemName}\",\n                        \"rhs\": \"Linux\"\n                    }\n                ]\n            },\n            \"cacheVariables\": {\n                \"CMAKE_OSX_ARCHITECTURES\": \"x86_64\",\n                \"CMAKE_BUILD_TYPE\": \"Release\",\n                \"CMAKE_CXX_STANDARD\": \"17\",\n                \"CMAKE_CXX_EXTENSIONS\": false\n            },\n            \"warnings\": {\n                \"dev\": false\n            }\n        }\n    ],\n    \"buildPresets\": [\n        {\n            \"name\": \"fuzz-proto\",\n            \"displayName\": \"Protobuf Fuzzer\",\n            \"description\": \"Builds the protobuf-based fuzzer and transpiler tools.\",\n            \"configurePreset\": \"fuzz\",\n            \"targets\": [\n                \"Luau.Fuzz.Proto\",\n                \"Luau.Fuzz.ProtoTest\"\n            ]\n        }\n    ]\n}\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.1318359375,
          "content": "Thanks for deciding to contribute to Luau! These guidelines will try to help make the process painless and efficient.\n\n## Questions\n\nIf you have a question regarding the language usage/implementation, please [use GitHub discussions](https://github.com/luau-lang/luau/discussions).\nSome questions just need answers, but it's nice to keep them for future reference in case other people want to know the same thing.\nSome questions help improve the language, implementation or documentation by inspiring future changes.\n\n## Documentation\n\nA [separate site repository](https://github.com/luau-lang/site) hosts the language documentation, which is accessible on https://luau.org.\nChanges to this documentation that improve clarity, fix grammatical issues, explain aspects that haven't been explained before and the like are warmly welcomed.\n\nPlease feel free to [create a pull request](https://help.github.com/articles/about-pull-requests/) to improve our documentation. Note that at this point the documentation is English-only.\n\n## Bugs\n\nIf the language implementation doesn't compile on your system, compiles with warnings, doesn't seem to run correctly for your code or if anything else is amiss, please [open a GitHub issue](https://github.com/luau-lang/luau/issues/new).\nIt helps if you note the Git revision issue happens in, the version of your compiler for compilation issues, and a reproduction case for runtime bugs.\n\nOf course, feel free to [create a pull request](https://help.github.com/articles/about-pull-requests/) to fix the bug yourself.\n\n## Features\n\nIf you're thinking of adding a new feature to the language, library, analysis tools, etc., please *don't* start by submitting a pull request.\nLuau team has internal priorities and a roadmap that may or may not align with specific features, so before starting to work on a feature please submit an issue describing the missing feature that you'd like to add.\n\nFor features that result in observable change of language syntax or semantics, you'd need to [create an RFC](https://github.com/luau-lang/rfcs/blob/master/README.md) to make sure that the feature is needed and well designed.\n\nFinally, please note that Luau tries to carry a minimal feature set. All features must be evaluated not just for the benefits that they provide, but also for the downsides/costs in terms of language simplicity, maintainability, cross-feature interaction etc.\nAs such, feature requests may not be accepted even if a comprehensive RFC is written - don't expect Luau to gain a feature just because another programming language has it.\n\n## Code style\n\nContributions to this project are expected to follow the existing code style.\n`.clang-format` file mostly defines syntactic styling rules (you can run `make format` to format the code accordingly).\n\nAs for naming conventions, most Luau components use `lowerCamelCase` for variables and functions, `UpperCamelCase` for types and enums, `kCamelCase` for global constants and `SCARY_CASE` for macros.\n\nWithin the VM component, the code style is different - we expect `lua_` or `luaX_` prefix for functions that are public or used across different VM files, camel case isn't used and macros are often using lowercase.\n\n## Testing\n\nAll pull requests will run through a continuous integration pipeline using GitHub Actions that will run the built-in unit tests and integration tests on Windows, macOS and Linux.\nYou can run the tests yourself using `make test` or using `cmake` to build `Luau.UnitTest` and `Luau.Conformance` and run them.\n\nWhen making code changes please try to make sure they are covered by an existing test or add a new test accordingly.\n\n## Performance\n\nOne of the central feature of Luau is performance; our runtime in particular is heavily optimized for high performance and low memory consumption, and code is generally carefully tuned to result in close to optimal assembly for x64 and AArch64 architectures. The analysis code is not optimized to the same level of detail, but performance is still very important to make sure that we can support interactive IDE features.\n\nAs such, it's important to make sure that the changes, including bug fixes, improve or at least do not regress performance. For VM this can be validated by running `bench.py` script from `bench` folder on two binaries built in Release mode, before and after the changes, although note that our benchmark coverage is not complete and in some cases additional performance testing will be necessary to determine if the change can be merged.\n\n## Feature flags\n\nFor large bug fixes or features that apply to the Luau components and not just the CLI tools, we may ask that you introduce a feature flag to gate your changes. The feature flags use `LUAU_FASTFLAG` macro family defined in `Luau/Common.h` and allow us to ensure that the change can be safely shipped, enabled, and rolled back on the Roblox platform when the change makes it into our production codebase. The tests run the code with flags in their default state and enabled state as well to ensure correctness.\n\n## Licensing\n\nBy contributing changes to this repository, you license your contribution under the MIT License, and you agree that you have the right to license your contribution under those terms.\n"
        },
        {
          "name": "CodeGen",
          "type": "tree",
          "content": null
        },
        {
          "name": "Common",
          "type": "tree",
          "content": null
        },
        {
          "name": "Compiler",
          "type": "tree",
          "content": null
        },
        {
          "name": "Config",
          "type": "tree",
          "content": null
        },
        {
          "name": "EqSat",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.09765625,
          "content": "MIT License\n\nCopyright (c) 2019-2024 Roblox Corporation\nCopyright (c) 1994–2019 Lua.org, PUC-Rio.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 11.8876953125,
          "content": "# This file is part of the Luau programming language and is licensed under MIT License; see LICENSE.txt for details\n.SUFFIXES:\nMAKEFLAGS+=-r -j8\nCOMMA=,\n\nCMAKE_PATH=cmake\n\nconfig=debug\nprotobuf=system\n\nBUILD=build/$(config)\n\nAST_SOURCES=$(wildcard Ast/src/*.cpp)\nAST_OBJECTS=$(AST_SOURCES:%=$(BUILD)/%.o)\nAST_TARGET=$(BUILD)/libluauast.a\n\nCOMPILER_SOURCES=$(wildcard Compiler/src/*.cpp)\nCOMPILER_OBJECTS=$(COMPILER_SOURCES:%=$(BUILD)/%.o)\nCOMPILER_TARGET=$(BUILD)/libluaucompiler.a\n\nCONFIG_SOURCES=$(wildcard Config/src/*.cpp)\nCONFIG_OBJECTS=$(CONFIG_SOURCES:%=$(BUILD)/%.o)\nCONFIG_TARGET=$(BUILD)/libluauconfig.a\n\nANALYSIS_SOURCES=$(wildcard Analysis/src/*.cpp)\nANALYSIS_OBJECTS=$(ANALYSIS_SOURCES:%=$(BUILD)/%.o)\nANALYSIS_TARGET=$(BUILD)/libluauanalysis.a\n\nEQSAT_SOURCES=$(wildcard EqSat/src/*.cpp)\nEQSAT_OBJECTS=$(EQSAT_SOURCES:%=$(BUILD)/%.o)\nEQSAT_TARGET=$(BUILD)/libluaueqsat.a\n\nCODEGEN_SOURCES=$(wildcard CodeGen/src/*.cpp)\nCODEGEN_OBJECTS=$(CODEGEN_SOURCES:%=$(BUILD)/%.o)\nCODEGEN_TARGET=$(BUILD)/libluaucodegen.a\n\nVM_SOURCES=$(wildcard VM/src/*.cpp)\nVM_OBJECTS=$(VM_SOURCES:%=$(BUILD)/%.o)\nVM_TARGET=$(BUILD)/libluauvm.a\n\nISOCLINE_SOURCES=extern/isocline/src/isocline.c\nISOCLINE_OBJECTS=$(ISOCLINE_SOURCES:%=$(BUILD)/%.o)\nISOCLINE_TARGET=$(BUILD)/libisocline.a\n\nTESTS_SOURCES=$(wildcard tests/*.cpp) CLI/src/FileUtils.cpp CLI/src/Flags.cpp CLI/src/Profiler.cpp CLI/src/Coverage.cpp CLI/src/Repl.cpp CLI/src/Require.cpp\nTESTS_OBJECTS=$(TESTS_SOURCES:%=$(BUILD)/%.o)\nTESTS_TARGET=$(BUILD)/luau-tests\n\nREPL_CLI_SOURCES=CLI/src/FileUtils.cpp CLI/src/Flags.cpp CLI/src/Profiler.cpp CLI/src/Coverage.cpp CLI/src/Repl.cpp CLI/src/ReplEntry.cpp CLI/src/Require.cpp\nREPL_CLI_OBJECTS=$(REPL_CLI_SOURCES:%=$(BUILD)/%.o)\nREPL_CLI_TARGET=$(BUILD)/luau\n\nANALYZE_CLI_SOURCES=CLI/src/FileUtils.cpp CLI/src/Flags.cpp CLI/src/Require.cpp CLI/src/Analyze.cpp\nANALYZE_CLI_OBJECTS=$(ANALYZE_CLI_SOURCES:%=$(BUILD)/%.o)\nANALYZE_CLI_TARGET=$(BUILD)/luau-analyze\n\nCOMPILE_CLI_SOURCES=CLI/src/FileUtils.cpp CLI/src/Flags.cpp CLI/src/Compile.cpp\nCOMPILE_CLI_OBJECTS=$(COMPILE_CLI_SOURCES:%=$(BUILD)/%.o)\nCOMPILE_CLI_TARGET=$(BUILD)/luau-compile\n\nBYTECODE_CLI_SOURCES=CLI/src/FileUtils.cpp CLI/src/Flags.cpp CLI/src/Bytecode.cpp\nBYTECODE_CLI_OBJECTS=$(BYTECODE_CLI_SOURCES:%=$(BUILD)/%.o)\nBYTECODE_CLI_TARGET=$(BUILD)/luau-bytecode\n\nFUZZ_SOURCES=$(wildcard fuzz/*.cpp) fuzz/luau.pb.cpp\nFUZZ_OBJECTS=$(FUZZ_SOURCES:%=$(BUILD)/%.o)\n\nTESTS_ARGS=\nifneq ($(flags),)\n\tTESTS_ARGS+=--fflags=$(flags)\nendif\nifneq ($(opt),)\n\tTESTS_ARGS+=-O$(opt)\nendif\n\nOBJECTS=$(AST_OBJECTS) $(COMPILER_OBJECTS) $(CONFIG_OBJECTS) $(ANALYSIS_OBJECTS) $(EQSAT_OBJECTS) $(CODEGEN_OBJECTS) $(VM_OBJECTS) $(ISOCLINE_OBJECTS) $(TESTS_OBJECTS) $(REPL_CLI_OBJECTS) $(ANALYZE_CLI_OBJECTS) $(COMPILE_CLI_OBJECTS) $(BYTECODE_CLI_OBJECTS) $(FUZZ_OBJECTS)\nEXECUTABLE_ALIASES = luau luau-analyze luau-compile luau-bytecode luau-tests\n\n# common flags\nCXXFLAGS=-g -Wall\nLDFLAGS=\n\n# some gcc versions treat var in `if (type var = val)` as unused\n# some gcc versions treat variables used in constexpr if blocks as unused\n# some gcc versions warn maybe uninitalized on optional<std::string> members on structs\nifeq ($(findstring g++,$(shell $(CXX) --version)),g++)\n\tCXXFLAGS+=-Wno-unused\n\tCXXFLAGS+=-Wno-maybe-uninitialized\nendif\n\n# enabled in CI; we should be warning free on our main compiler versions but don't guarantee being warning free everywhere\nifneq ($(werror),)\n\tCXXFLAGS+=-Werror\nendif\n\n# configuration-specific flags\nifeq ($(config),release)\n\tCXXFLAGS+=-O2 -DNDEBUG -fno-math-errno\nendif\n\nifeq ($(config),coverage)\n\tCXXFLAGS+=-fprofile-instr-generate -fcoverage-mapping\n\tLDFLAGS+=-fprofile-instr-generate\nendif\n\nifeq ($(config),sanitize)\n\tCXXFLAGS+=-fsanitize=address -O1\n\tLDFLAGS+=-fsanitize=address\nendif\n\nifeq ($(config),analyze)\n\tCXXFLAGS+=--analyze\nendif\n\nifeq ($(config),fuzz)\n\tCXXFLAGS+=-fsanitize=address,fuzzer -Ibuild/libprotobuf-mutator -O2\n\tLDFLAGS+=-fsanitize=address,fuzzer\n\tLPROTOBUF=-lprotobuf\n\tDPROTOBUF=-D CMAKE_BUILD_TYPE=Release -D LIB_PROTO_MUTATOR_TESTING=OFF\n\tEPROTOC=protoc\nendif\n\nifeq ($(config),profile)\n\tCXXFLAGS+=-O2 -DNDEBUG -fno-math-errno -gdwarf-4 -DCALLGRIND=1\nendif\n\nifeq ($(protobuf),download)\n\tCXXFLAGS+=-Ibuild/libprotobuf-mutator/external.protobuf/include\n\tLPROTOBUF=build/libprotobuf-mutator/external.protobuf/lib/libprotobuf.a\n\tDPROTOBUF+=-D LIB_PROTO_MUTATOR_DOWNLOAD_PROTOBUF=ON\n\tEPROTOC=../build/libprotobuf-mutator/external.protobuf/bin/protoc\nendif\n\nifneq ($(native),)\n\tTESTS_ARGS+=--codegen\nendif\n\nifneq ($(nativelj),)\n\tCXXFLAGS+=-DLUA_USE_LONGJMP=1\n\tTESTS_ARGS+=--codegen\nendif\n\n# target-specific flags\n$(AST_OBJECTS): CXXFLAGS+=-std=c++17 -ICommon/include -IAst/include\n$(COMPILER_OBJECTS): CXXFLAGS+=-std=c++17 -ICompiler/include -ICommon/include -IAst/include\n$(CONFIG_OBJECTS): CXXFLAGS+=-std=c++17 -IConfig/include -ICommon/include -IAst/include\n$(ANALYSIS_OBJECTS): CXXFLAGS+=-std=c++17 -ICommon/include -IAst/include -IAnalysis/include -IEqSat/include -IConfig/include -ICompiler/include -IVM/include\n$(EQSAT_OBJECTS): CXXFLAGS+=-std=c++17 -ICommon/include -IEqSat/include\n$(CODEGEN_OBJECTS): CXXFLAGS+=-std=c++17 -ICommon/include -ICodeGen/include -IVM/include -IVM/src # Code generation needs VM internals\n$(VM_OBJECTS): CXXFLAGS+=-std=c++11 -ICommon/include -IVM/include\n$(ISOCLINE_OBJECTS): CXXFLAGS+=-Wno-unused-function -Iextern/isocline/include\n$(TESTS_OBJECTS): CXXFLAGS+=-std=c++17 -ICommon/include -IAst/include -ICompiler/include -IConfig/include -IAnalysis/include -IEqSat/include -ICodeGen/include -IVM/include -ICLI/include -Iextern -DDOCTEST_CONFIG_DOUBLE_STRINGIFY\n$(REPL_CLI_OBJECTS): CXXFLAGS+=-std=c++17 -ICommon/include -IAst/include -ICompiler/include -IVM/include -ICodeGen/include -Iextern -Iextern/isocline/include -ICLI/include\n$(ANALYZE_CLI_OBJECTS): CXXFLAGS+=-std=c++17 -ICommon/include -IAst/include -IAnalysis/include -IEqSat/include -IConfig/include -Iextern -ICLI/include\n$(COMPILE_CLI_OBJECTS): CXXFLAGS+=-std=c++17 -ICommon/include -IAst/include -ICompiler/include -IVM/include -ICodeGen/include -ICLI/include\n$(BYTECODE_CLI_OBJECTS): CXXFLAGS+=-std=c++17 -ICommon/include -IAst/include -ICompiler/include -IVM/include -ICodeGen/include -ICLI/include\n$(FUZZ_OBJECTS): CXXFLAGS+=-std=c++17 -ICommon/include -IAst/include -ICompiler/include -IAnalysis/include -IEqSat/include -IVM/include -ICodeGen/include -IConfig/include\n\n$(TESTS_TARGET): LDFLAGS+=-lpthread\n$(REPL_CLI_TARGET): LDFLAGS+=-lpthread\n$(ANALYZE_CLI_TARGET): LDFLAGS+=-lpthread\nfuzz-proto fuzz-prototest: LDFLAGS+=build/libprotobuf-mutator/src/libfuzzer/libprotobuf-mutator-libfuzzer.a build/libprotobuf-mutator/src/libprotobuf-mutator.a $(LPROTOBUF)\n\n# pseudo targets\n.PHONY: all test clean coverage format luau-size aliases\n\nall: $(REPL_CLI_TARGET) $(ANALYZE_CLI_TARGET) $(TESTS_TARGET) aliases\n\naliases: $(EXECUTABLE_ALIASES)\n\ntest: $(TESTS_TARGET)\n\t$(TESTS_TARGET) $(TESTS_ARGS)\n\nconformance: $(TESTS_TARGET)\n\t$(TESTS_TARGET) $(TESTS_ARGS) -ts=Conformance\n\nclean:\n\trm -rf $(BUILD)\n\trm -rf $(EXECUTABLE_ALIASES)\n\ncoverage: $(TESTS_TARGET) $(COMPILE_CLI_TARGET)\n\t$(TESTS_TARGET)\n\tmv default.profraw tests.profraw\n\t$(TESTS_TARGET) --fflags=true\n\tmv default.profraw tests-flags.profraw\n\t$(TESTS_TARGET) --fflags=true,DebugLuauDeferredConstraintResolution=true\n\tmv default.profraw tests-dcr.profraw\n\t$(TESTS_TARGET) -ts=Conformance --codegen\n\tmv default.profraw codegen.profraw\n\t$(TESTS_TARGET) -ts=Conformance --codegen --fflags=true\n\tmv default.profraw codegen-flags.profraw\n\t$(COMPILE_CLI_TARGET) --codegennull --target=a64 tests/conformance\n\tmv default.profraw codegen-a64.profraw\n\t$(COMPILE_CLI_TARGET) --codegennull --target=x64 tests/conformance\n\tmv default.profraw codegen-x64.profraw\n\tllvm-profdata merge *.profraw -o default.profdata\n\trm *.profraw\n\tllvm-cov show -format=html -show-instantiations=false -show-line-counts=true -show-region-summary=false -ignore-filename-regex=\\(tests\\|extern\\|CLI\\)/.* -output-dir=coverage --instr-profile default.profdata -object build/coverage/luau-tests -object build/coverage/luau-compile\n\tllvm-cov report -ignore-filename-regex=\\(tests\\|extern\\|CLI\\)/.* -show-region-summary=false --instr-profile default.profdata -object build/coverage/luau-tests -object build/coverage/luau-compile\n\tllvm-cov export -ignore-filename-regex=\\(tests\\|extern\\|CLI\\)/.* -format lcov --instr-profile default.profdata -object build/coverage/luau-tests -object build/coverage/luau-compile >coverage.info\n\nformat:\n\tgit ls-files '*.h' '*.cpp' | xargs clang-format-11 -i\n\nluau-size: luau\n\tnm --print-size --demangle luau | grep ' t void luau_execute<false>' | awk -F ' ' '{sum += strtonum(\"0x\" $$2)} END {print sum \" interpreter\" }'\n\tnm --print-size --demangle luau | grep ' t luauF_' | awk -F ' ' '{sum += strtonum(\"0x\" $$2)} END {print sum \" builtins\" }'\n\ncheck-source:\n\tgit ls-files '*.h' '*.cpp' | xargs -I+ sh -c 'grep -L LICENSE +'\n\tgit ls-files '*.h' ':!:extern' | xargs -I+ sh -c 'grep -L \"#pragma once\" +'\n\n# executable target aliases\nluau: $(REPL_CLI_TARGET)\n\tln -fs $^ $@\n\nluau-analyze: $(ANALYZE_CLI_TARGET)\n\tln -fs $^ $@\n\nluau-compile: $(COMPILE_CLI_TARGET)\n\tln -fs $^ $@\n\nluau-bytecode: $(BYTECODE_CLI_TARGET)\n\tln -fs $^ $@\n\nluau-tests: $(TESTS_TARGET)\n\tln -fs $^ $@\n\n# executable targets\n$(TESTS_TARGET): $(TESTS_OBJECTS) $(ANALYSIS_TARGET) $(EQSAT_TARGET) $(COMPILER_TARGET) $(CONFIG_TARGET) $(AST_TARGET) $(CODEGEN_TARGET) $(VM_TARGET) $(ISOCLINE_TARGET)\n$(REPL_CLI_TARGET): $(REPL_CLI_OBJECTS) $(COMPILER_TARGET) $(CONFIG_TARGET) $(AST_TARGET) $(CODEGEN_TARGET) $(VM_TARGET) $(ISOCLINE_TARGET)\n$(ANALYZE_CLI_TARGET): $(ANALYZE_CLI_OBJECTS) $(ANALYSIS_TARGET) $(EQSAT_TARGET) $(AST_TARGET) $(CONFIG_TARGET) $(COMPILER_TARGET) $(VM_TARGET)\n$(COMPILE_CLI_TARGET): $(COMPILE_CLI_OBJECTS) $(COMPILER_TARGET) $(AST_TARGET) $(CODEGEN_TARGET) $(VM_TARGET)\n$(BYTECODE_CLI_TARGET): $(BYTECODE_CLI_OBJECTS) $(COMPILER_TARGET) $(AST_TARGET) $(CODEGEN_TARGET) $(VM_TARGET)\n\n$(TESTS_TARGET) $(REPL_CLI_TARGET) $(ANALYZE_CLI_TARGET) $(COMPILE_CLI_TARGET) $(BYTECODE_CLI_TARGET):\n\t$(CXX) $^ $(LDFLAGS) -o $@\n\n# executable targets for fuzzing\nfuzz-%: $(BUILD)/fuzz/%.cpp.o $(ANALYSIS_TARGET) $(EQSAT_TARGET) $(COMPILER_TARGET) $(AST_TARGET) $(CONFIG_TARGET) $(CODEGEN_TARGET) $(VM_TARGET)\n\t$(CXX) $^ $(LDFLAGS) -o $@\n\nfuzz-proto: $(BUILD)/fuzz/proto.cpp.o $(BUILD)/fuzz/protoprint.cpp.o $(BUILD)/fuzz/luau.pb.cpp.o $(ANALYSIS_TARGET) $(EQSAT_TARGET) $(COMPILER_TARGET) $(AST_TARGET) $(CONFIG_TARGET) $(VM_TARGET) | build/libprotobuf-mutator\nfuzz-prototest: $(BUILD)/fuzz/prototest.cpp.o $(BUILD)/fuzz/protoprint.cpp.o $(BUILD)/fuzz/luau.pb.cpp.o $(ANALYSIS_TARGET) $(EQSAT_TARGET) $(COMPILER_TARGET) $(AST_TARGET) $(CONFIG_TARGET) $(VM_TARGET) | build/libprotobuf-mutator\n\n# static library targets\n$(AST_TARGET): $(AST_OBJECTS)\n$(COMPILER_TARGET): $(COMPILER_OBJECTS)\n$(CONFIG_TARGET): $(CONFIG_OBJECTS)\n$(ANALYSIS_TARGET): $(ANALYSIS_OBJECTS)\n$(EQSAT_TARGET): $(EQSAT_OBJECTS)\n$(CODEGEN_TARGET): $(CODEGEN_OBJECTS)\n$(VM_TARGET): $(VM_OBJECTS)\n$(ISOCLINE_TARGET): $(ISOCLINE_OBJECTS)\n\n$(AST_TARGET) $(COMPILER_TARGET) $(CONFIG_TARGET) $(ANALYSIS_TARGET) $(EQSAT_TARGET) $(CODEGEN_TARGET) $(VM_TARGET) $(ISOCLINE_TARGET):\n\tar rcs $@ $^\n\n# object file targets\n$(BUILD)/%.cpp.o: %.cpp\n\t@mkdir -p $(dir $@)\n\t$(CXX) $< $(CXXFLAGS) -c -MMD -MP -o $@\n\n$(BUILD)/%.c.o: %.c\n\t@mkdir -p $(dir $@)\n\t$(CXX) -x c $< $(CXXFLAGS) -c -MMD -MP -o $@\n\n# protobuf fuzzer setup\nfuzz/luau.pb.cpp: fuzz/luau.proto build/libprotobuf-mutator\n\tcd fuzz && $(EPROTOC) luau.proto --cpp_out=.\n\tmv fuzz/luau.pb.cc fuzz/luau.pb.cpp\n\n$(BUILD)/fuzz/proto.cpp.o: fuzz/luau.pb.cpp\n$(BUILD)/fuzz/protoprint.cpp.o: fuzz/luau.pb.cpp\n$(BUILD)/fuzz/prototest.cpp.o: fuzz/luau.pb.cpp\n\nbuild/libprotobuf-mutator:\n\tgit clone https://github.com/google/libprotobuf-mutator build/libprotobuf-mutator\n\tgit -C build/libprotobuf-mutator checkout 212a7be1eb08e7f9c79732d2aab9b2097085d936\n\t$(CMAKE_PATH) -DCMAKE_CXX_COMPILER=$(CMAKE_CXX) -DCMAKE_C_COMPILER=$(CMAKE_CC) -DCMAKE_CXX_COMPILER_LAUNCHER=$(CMAKE_PROXY) -S build/libprotobuf-mutator -B build/libprotobuf-mutator $(DPROTOBUF)\n\t$(MAKE) -C build/libprotobuf-mutator\n\n# picks up include dependencies for all object files\n-include $(OBJECTS:.o=.d)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.0048828125,
          "content": "Luau ![CI](https://github.com/luau-lang/luau/actions/workflows/build.yml/badge.svg) [![codecov](https://codecov.io/gh/luau-lang/luau/branch/master/graph/badge.svg)](https://codecov.io/gh/luau-lang/luau)\n====\n\nLuau (lowercase u, /ˈlu.aʊ/) is a fast, small, safe, gradually typed embeddable scripting language derived from [Lua](https://lua.org).\n\nIt is designed to be backwards compatible with Lua 5.1, as well as incorporating [some features](https://luau.org/compatibility) from future Lua releases, but also expands the feature set (most notably with type annotations). Luau is largely implemented from scratch, with the language runtime being a very heavily modified version of Lua 5.1 runtime, with completely rewritten interpreter and other [performance innovations](https://luau.org/performance). The runtime mostly preserves Lua 5.1 API, so existing bindings should be more or less compatible with a few caveats.\n\nLuau is used by Roblox game developers to write game code, as well as by Roblox engineers to implement large parts of the user-facing application code as well as portions of the editor (Roblox Studio) as plugins. Roblox chose to open-source Luau to foster collaboration within the Roblox community as well as to allow other companies and communities to benefit from the ongoing language and runtime innovation. As a consequence, Luau is now also used by games like Alan Wake 2 and Warframe.\n\nThis repository hosts source code for the language implementation and associated tooling. Documentation for the language is available at https://luau.org/ and accepts contributions via [site repository](https://github.com/luau-lang/site); the language is evolved through RFCs that are located in [rfcs repository](https://github.com/luau-lang/rfcs).\n\n# Usage\n\nLuau is an embeddable language, but it also comes with two command-line tools by default, `luau` and `luau-analyze`.\n\n`luau` is a command-line REPL and can also run input files. Note that REPL runs in a sandboxed environment and as such doesn't have access to the underlying file system except for ability to `require` modules.\n\n`luau-analyze` is a command-line type checker and linter; given a set of input files, it produces errors/warnings according to the file configuration, which can be customized by using `--!` comments in the files or [`.luaurc`](https://rfcs.luau.org/config-luaurc) files. For details please refer to [type checking]( https://luau.org/typecheck) and [linting](https://luau.org/lint) documentation.\n\n# Installation\n\nYou can install and run Luau by downloading the compiled binaries from [a recent release](https://github.com/luau-lang/luau/releases); note that `luau` and `luau-analyze` binaries from the archives will need to be added to PATH or copied to a directory like `/usr/local/bin` on Linux/macOS.\n\nAlternatively, you can use one of the packaged distributions (note that these are not maintained by Luau development team):\n\n- macOS: [Install Homebrew](https://docs.brew.sh/Installation) and run `brew install luau`\n- Arch Linux: From the AUR (Arch Linux User Repository), install one of these packages via a AUR helper or manually (by cloning their repo and using ``makepkg``): [luau](https://aur.archlinux.org/packages/luau) (manual build), [luau-git](https://aur.archlinux.org/packages/luau-git) (manual build by cloning this repo), or [luau-bin](https://aur.archlinux.org/packages/luau-bin) (pre-built binaries from releases)\n- Alpine Linux: [Enable community repositories](https://wiki.alpinelinux.org/w/index.php?title=Enable_Community_Repository) and run `apk add luau`\n- Gentoo Linux: Luau is [officially packaged by Gentoo](https://packages.gentoo.org/packages/dev-lang/luau) and can be installed using `emerge dev-lang/luau`. You may have to unmask the package first before installing it (which can be done by including the `--autounmask=y` option in the `emerge` command).\n\nAfter installing, you will want to validate the installation was successful by running the test case [here](https://luau.org/getting-started).\n\n## Building\n\nOn all platforms, you can use CMake to run the following commands to build Luau binaries from source:\n\n```sh\nmkdir cmake && cd cmake\ncmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo\ncmake --build . --target Luau.Repl.CLI --config RelWithDebInfo\ncmake --build . --target Luau.Analyze.CLI --config RelWithDebInfo\n```\n\nAlternatively, on Linux/macOS you can use `make`:\n\n```sh\nmake config=release luau luau-analyze\n```\n\nTo integrate Luau into your CMake application projects as a library, at the minimum you'll need to depend on `Luau.Compiler` and `Luau.VM` projects. From there you need to create a new Luau state (using Lua 5.x API such as `lua_newstate`), compile source to bytecode and load it into the VM like this:\n\n```cpp\n// needs lua.h and luacode.h\nsize_t bytecodeSize = 0;\nchar* bytecode = luau_compile(source, strlen(source), NULL, &bytecodeSize);\nint result = luau_load(L, chunkname, bytecode, bytecodeSize, 0);\nfree(bytecode);\n\nif (result == 0)\n    return 1; /* return chunk main function */\n```\n\nFor more details about the use of host API you currently need to consult [Lua 5.x API](https://www.lua.org/manual/5.1/manual.html#3). Luau closely tracks that API but has a few deviations, such as the need to compile source separately (which is important to be able to deploy VM without a compiler), or lack of `__gc` support (use `lua_newuserdatadtor` instead).\n\nTo gain advantage of many performance improvements it's highly recommended to use `safeenv` feature, which sandboxes individual scripts' global tables from each other as well as protects builtin libraries from monkey-patching. For this to work you need to call `luaL_sandbox` for the global state and `luaL_sandboxthread` for each new script's execution thread.\n\n# Testing\n\nLuau has an internal test suite; in CMake builds it is split into two targets, `Luau.UnitTest` (for bytecode compiler and type checker/linter tests) and `Luau.Conformance` (for VM tests). The unit tests are written in C++, whereas the conformance tests are largely written in Luau (see `tests/conformance`).\n\nMakefile builds combine both into a single target and can be ran via `make test`.\n\n# Dependencies\n\nLuau uses C++ as its implementation language. The runtime requires C++11, whereas the compiler and analysis components require C++17. It should build without issues using Microsoft Visual Studio 2017 or later, or gcc-7 or clang-7 or later.\n\nOther than the STL/CRT, Luau library components don't have external dependencies. The test suite depends on [doctest](https://github.com/onqtam/doctest) testing framework, and the REPL command-line depends on [isocline](https://github.com/daanx/isocline).\n\n# License\n\nLuau implementation is distributed under the terms of [MIT License](https://github.com/luau-lang/luau/blob/master/LICENSE.txt). It is based on Lua 5.x implementation that is MIT licensed as well.\n\nWhen Luau is integrated into external projects, we ask to honor the license agreement and include Luau attribution into the user-facing product documentation. The attribution using [Luau logo](https://github.com/luau-lang/site/blob/master/logo.svg) is also encouraged.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.001953125,
          "content": "# Security Guarantees\n\nLuau provides a safe sandbox that scripts can not escape from, short of vulnerabilities in custom C functions exposed by the host. This includes the virtual machine, builtin libraries and native code generation facilities.\n\nAny source code can not result in memory safety errors or crashes during its compilation or execution. Violations of memory safety are considered vulnerabilities.\n\nNote that Luau does not provide termination guarantees - some code may exhaust CPU or RAM resources on the system during compilation or execution.\n\nThe runtime expects valid bytecode as an input. Feeding bytecode that was not produced by Luau compiler into the VM is not supported and\ndoesn't come with any security guarantees; make sure to sign and/or encrypt the bytecode when it crosses a network or file system boundary to avoid tampering.\n\n# Reporting a Vulnerability\n\nYou can report security bugs via [Hackerone](https://hackerone.com/roblox). Please refer to the linked page for rules of the bounty program.\n"
        },
        {
          "name": "Sources.cmake",
          "type": "blob",
          "size": 17.6962890625,
          "content": "# Luau.Common Sources\n# Note: Until 3.19, INTERFACE targets couldn't have SOURCES property set\nif(NOT ${CMAKE_VERSION} VERSION_LESS \"3.19\")\n    target_sources(Luau.Common PRIVATE\n        Common/include/Luau/Common.h\n        Common/include/Luau/Bytecode.h\n        Common/include/Luau/BytecodeUtils.h\n        Common/include/Luau/DenseHash.h\n        Common/include/Luau/ExperimentalFlags.h\n        Common/include/Luau/Variant.h\n        Common/include/Luau/VecDeque.h\n    )\nendif()\n\n# Luau.Ast Sources\ntarget_sources(Luau.Ast PRIVATE\n    Ast/include/Luau/Allocator.h\n    Ast/include/Luau/Ast.h\n    Ast/include/Luau/Confusables.h\n    Ast/include/Luau/Lexer.h\n    Ast/include/Luau/Location.h\n    Ast/include/Luau/ParseOptions.h\n    Ast/include/Luau/Parser.h\n    Ast/include/Luau/ParseResult.h\n    Ast/include/Luau/StringUtils.h\n    Ast/include/Luau/TimeTrace.h\n\n    Ast/src/Allocator.cpp\n    Ast/src/Ast.cpp\n    Ast/src/Confusables.cpp\n    Ast/src/Lexer.cpp\n    Ast/src/Location.cpp\n    Ast/src/Parser.cpp\n    Ast/src/StringUtils.cpp\n    Ast/src/TimeTrace.cpp\n)\n\n# Luau.Compiler Sources\ntarget_sources(Luau.Compiler PRIVATE\n    Compiler/include/Luau/BytecodeBuilder.h\n    Compiler/include/Luau/Compiler.h\n    Compiler/include/luacode.h\n\n    Compiler/src/BytecodeBuilder.cpp\n    Compiler/src/Compiler.cpp\n    Compiler/src/Builtins.cpp\n    Compiler/src/BuiltinFolding.cpp\n    Compiler/src/ConstantFolding.cpp\n    Compiler/src/CostModel.cpp\n    Compiler/src/TableShape.cpp\n    Compiler/src/Types.cpp\n    Compiler/src/ValueTracking.cpp\n    Compiler/src/lcode.cpp\n    Compiler/src/Builtins.h\n    Compiler/src/BuiltinFolding.h\n    Compiler/src/ConstantFolding.h\n    Compiler/src/CostModel.h\n    Compiler/src/TableShape.h\n    Compiler/src/Types.h\n    Compiler/src/ValueTracking.h\n)\n\n# Luau.Config Sources\ntarget_sources(Luau.Config PRIVATE\n    Config/include/Luau/Config.h\n    Config/include/Luau/LinterConfig.h\n\n    Config/src/Config.cpp\n    Config/src/LinterConfig.cpp\n)\n\n# Luau.CodeGen Sources\ntarget_sources(Luau.CodeGen PRIVATE\n    CodeGen/include/Luau/AddressA64.h\n    CodeGen/include/Luau/AssemblyBuilderA64.h\n    CodeGen/include/Luau/AssemblyBuilderX64.h\n    CodeGen/include/Luau/CodeAllocator.h\n    CodeGen/include/Luau/CodeBlockUnwind.h\n    CodeGen/include/Luau/CodeGen.h\n    CodeGen/include/Luau/CodeGenCommon.h\n    CodeGen/include/Luau/ConditionA64.h\n    CodeGen/include/Luau/ConditionX64.h\n    CodeGen/include/Luau/IrAnalysis.h\n    CodeGen/include/Luau/IrBuilder.h\n    CodeGen/include/Luau/IrCallWrapperX64.h\n    CodeGen/include/Luau/IrDump.h\n    CodeGen/include/Luau/IrData.h\n    CodeGen/include/Luau/IrRegAllocX64.h\n    CodeGen/include/Luau/IrUtils.h\n    CodeGen/include/Luau/IrVisitUseDef.h\n    CodeGen/include/Luau/Label.h\n    CodeGen/include/Luau/NativeProtoExecData.h\n    CodeGen/include/Luau/OperandX64.h\n    CodeGen/include/Luau/OptimizeConstProp.h\n    CodeGen/include/Luau/OptimizeDeadStore.h\n    CodeGen/include/Luau/OptimizeFinalX64.h\n    CodeGen/include/Luau/RegisterA64.h\n    CodeGen/include/Luau/RegisterX64.h\n    CodeGen/include/Luau/SharedCodeAllocator.h\n    CodeGen/include/Luau/UnwindBuilder.h\n    CodeGen/include/Luau/UnwindBuilderDwarf2.h\n    CodeGen/include/Luau/UnwindBuilderWin.h\n    CodeGen/include/Luau/BytecodeAnalysis.h\n    CodeGen/include/Luau/BytecodeSummary.h\n    CodeGen/include/luacodegen.h\n\n    CodeGen/src/AssemblyBuilderA64.cpp\n    CodeGen/src/AssemblyBuilderX64.cpp\n    CodeGen/src/CodeAllocator.cpp\n    CodeGen/src/CodeBlockUnwind.cpp\n    CodeGen/src/CodeGen.cpp\n    CodeGen/src/CodeGenAssembly.cpp\n    CodeGen/src/CodeGenContext.cpp\n    CodeGen/src/CodeGenUtils.cpp\n    CodeGen/src/CodeGenA64.cpp\n    CodeGen/src/CodeGenX64.cpp\n    CodeGen/src/EmitBuiltinsX64.cpp\n    CodeGen/src/EmitCommonX64.cpp\n    CodeGen/src/EmitInstructionX64.cpp\n    CodeGen/src/IrAnalysis.cpp\n    CodeGen/src/IrBuilder.cpp\n    CodeGen/src/IrCallWrapperX64.cpp\n    CodeGen/src/IrDump.cpp\n    CodeGen/src/IrLoweringA64.cpp\n    CodeGen/src/IrLoweringX64.cpp\n    CodeGen/src/IrRegAllocA64.cpp\n    CodeGen/src/IrRegAllocX64.cpp\n    CodeGen/src/IrTranslateBuiltins.cpp\n    CodeGen/src/IrTranslation.cpp\n    CodeGen/src/IrUtils.cpp\n    CodeGen/src/IrValueLocationTracking.cpp\n    CodeGen/src/lcodegen.cpp\n    CodeGen/src/NativeProtoExecData.cpp\n    CodeGen/src/NativeState.cpp\n    CodeGen/src/OptimizeConstProp.cpp\n    CodeGen/src/OptimizeDeadStore.cpp\n    CodeGen/src/OptimizeFinalX64.cpp\n    CodeGen/src/UnwindBuilderDwarf2.cpp\n    CodeGen/src/UnwindBuilderWin.cpp\n    CodeGen/src/BytecodeAnalysis.cpp\n    CodeGen/src/BytecodeSummary.cpp\n    CodeGen/src/SharedCodeAllocator.cpp\n\n    CodeGen/src/BitUtils.h\n    CodeGen/src/ByteUtils.h\n    CodeGen/src/CodeGenContext.h\n    CodeGen/src/CodeGenLower.h\n    CodeGen/src/CodeGenUtils.h\n    CodeGen/src/CodeGenA64.h\n    CodeGen/src/CodeGenX64.h\n    CodeGen/src/EmitBuiltinsX64.h\n    CodeGen/src/EmitCommon.h\n    CodeGen/src/EmitCommonA64.h\n    CodeGen/src/EmitCommonX64.h\n    CodeGen/src/EmitInstructionX64.h\n    CodeGen/src/IrLoweringA64.h\n    CodeGen/src/IrLoweringX64.h\n    CodeGen/src/IrRegAllocA64.h\n    CodeGen/src/IrTranslateBuiltins.h\n    CodeGen/src/IrTranslation.h\n    CodeGen/src/IrValueLocationTracking.h\n    CodeGen/src/NativeState.h\n)\n\n# Luau.Analysis Sources\ntarget_sources(Luau.Analysis PRIVATE\n    Analysis/include/Luau/Anyification.h\n    Analysis/include/Luau/AnyTypeSummary.h\n    Analysis/include/Luau/ApplyTypeFunction.h\n    Analysis/include/Luau/AstJsonEncoder.h\n    Analysis/include/Luau/AstQuery.h\n    Analysis/include/Luau/Autocomplete.h\n    Analysis/include/Luau/AutocompleteTypes.h\n    Analysis/include/Luau/BuiltinDefinitions.h\n    Analysis/include/Luau/Cancellation.h\n    Analysis/include/Luau/Clone.h\n    Analysis/include/Luau/Constraint.h\n    Analysis/include/Luau/ConstraintGenerator.h\n    Analysis/include/Luau/ConstraintSolver.h\n    Analysis/include/Luau/ControlFlow.h\n    Analysis/include/Luau/DataFlowGraph.h\n    Analysis/include/Luau/DcrLogger.h\n    Analysis/include/Luau/Def.h\n    Analysis/include/Luau/Differ.h\n    Analysis/include/Luau/Documentation.h\n    Analysis/include/Luau/Error.h\n    Analysis/include/Luau/EqSatSimplification.h\n    Analysis/include/Luau/FileResolver.h\n    Analysis/include/Luau/FragmentAutocomplete.h\n    Analysis/include/Luau/Frontend.h\n    Analysis/include/Luau/Generalization.h\n    Analysis/include/Luau/GlobalTypes.h\n    Analysis/include/Luau/InsertionOrderedMap.h\n    Analysis/include/Luau/Instantiation.h\n    Analysis/include/Luau/Instantiation2.h\n    Analysis/include/Luau/IostreamHelpers.h\n    Analysis/include/Luau/JsonEmitter.h\n    Analysis/include/Luau/Linter.h\n    Analysis/include/Luau/LValue.h\n    Analysis/include/Luau/Metamethods.h\n    Analysis/include/Luau/Module.h\n    Analysis/include/Luau/ModuleResolver.h\n    Analysis/include/Luau/NonStrictTypeChecker.h\n    Analysis/include/Luau/Normalize.h\n    Analysis/include/Luau/OverloadResolution.h\n    Analysis/include/Luau/Predicate.h\n    Analysis/include/Luau/Quantify.h\n    Analysis/include/Luau/RecursionCounter.h\n    Analysis/include/Luau/Refinement.h\n    Analysis/include/Luau/RequireTracer.h\n    Analysis/include/Luau/Scope.h\n    Analysis/include/Luau/Set.h\n    Analysis/include/Luau/Simplify.h\n    Analysis/include/Luau/Substitution.h\n    Analysis/include/Luau/Subtyping.h\n    Analysis/include/Luau/Symbol.h\n    Analysis/include/Luau/TableLiteralInference.h\n    Analysis/include/Luau/ToDot.h\n    Analysis/include/Luau/TopoSortStatements.h\n    Analysis/include/Luau/ToString.h\n    Analysis/include/Luau/Transpiler.h\n    Analysis/include/Luau/TxnLog.h\n    Analysis/include/Luau/Type.h\n    Analysis/include/Luau/TypeArena.h\n    Analysis/include/Luau/TypeAttach.h\n    Analysis/include/Luau/TypeChecker2.h\n    Analysis/include/Luau/TypeCheckLimits.h\n    Analysis/include/Luau/TypedAllocator.h\n    Analysis/include/Luau/TypeFunction.h\n    Analysis/include/Luau/TypeFunctionReductionGuesser.h\n    Analysis/include/Luau/TypeFunctionRuntime.h\n    Analysis/include/Luau/TypeFunctionRuntimeBuilder.h\n    Analysis/include/Luau/TypeFwd.h\n    Analysis/include/Luau/TypeInfer.h\n    Analysis/include/Luau/TypeOrPack.h\n    Analysis/include/Luau/TypePack.h\n    Analysis/include/Luau/TypePairHash.h\n    Analysis/include/Luau/TypePath.h\n    Analysis/include/Luau/TypeUtils.h\n    Analysis/include/Luau/Unifiable.h\n    Analysis/include/Luau/Unifier.h\n    Analysis/include/Luau/Unifier2.h\n    Analysis/include/Luau/UnifierSharedState.h\n    Analysis/include/Luau/VisitType.h\n\n    Analysis/src/Anyification.cpp\n    Analysis/src/AnyTypeSummary.cpp\n    Analysis/src/ApplyTypeFunction.cpp\n    Analysis/src/AstJsonEncoder.cpp\n    Analysis/src/AstQuery.cpp\n    Analysis/src/Autocomplete.cpp\n    Analysis/src/AutocompleteCore.cpp\n    Analysis/src/BuiltinDefinitions.cpp\n    Analysis/src/Clone.cpp\n    Analysis/src/Constraint.cpp\n    Analysis/src/ConstraintGenerator.cpp\n    Analysis/src/ConstraintSolver.cpp\n    Analysis/src/DataFlowGraph.cpp\n    Analysis/src/DcrLogger.cpp\n    Analysis/src/Def.cpp\n    Analysis/src/Differ.cpp\n    Analysis/src/EmbeddedBuiltinDefinitions.cpp\n    Analysis/src/Error.cpp\n    Analysis/src/EqSatSimplification.cpp\n    Analysis/src/FragmentAutocomplete.cpp\n    Analysis/src/Frontend.cpp\n    Analysis/src/Generalization.cpp\n    Analysis/src/GlobalTypes.cpp\n    Analysis/src/Instantiation.cpp\n    Analysis/src/Instantiation2.cpp\n    Analysis/src/IostreamHelpers.cpp\n    Analysis/src/JsonEmitter.cpp\n    Analysis/src/Linter.cpp\n    Analysis/src/LValue.cpp\n    Analysis/src/Module.cpp\n    Analysis/src/NonStrictTypeChecker.cpp\n    Analysis/src/Normalize.cpp\n    Analysis/src/OverloadResolution.cpp\n    Analysis/src/Quantify.cpp\n    Analysis/src/Refinement.cpp\n    Analysis/src/RequireTracer.cpp\n    Analysis/src/Scope.cpp\n    Analysis/src/Simplify.cpp\n    Analysis/src/Substitution.cpp\n    Analysis/src/Subtyping.cpp\n    Analysis/src/Symbol.cpp\n    Analysis/src/TableLiteralInference.cpp\n    Analysis/src/ToDot.cpp\n    Analysis/src/TopoSortStatements.cpp\n    Analysis/src/ToString.cpp\n    Analysis/src/Transpiler.cpp\n    Analysis/src/TxnLog.cpp\n    Analysis/src/Type.cpp\n    Analysis/src/TypeArena.cpp\n    Analysis/src/TypeAttach.cpp\n    Analysis/src/TypeChecker2.cpp\n    Analysis/src/TypedAllocator.cpp\n    Analysis/src/TypeFunction.cpp\n    Analysis/src/TypeFunctionReductionGuesser.cpp\n    Analysis/src/TypeFunctionRuntime.cpp\n    Analysis/src/TypeFunctionRuntimeBuilder.cpp\n    Analysis/src/TypeInfer.cpp\n    Analysis/src/TypeOrPack.cpp\n    Analysis/src/TypePack.cpp\n    Analysis/src/TypePath.cpp\n    Analysis/src/TypeUtils.cpp\n    Analysis/src/Unifiable.cpp\n    Analysis/src/Unifier.cpp\n    Analysis/src/Unifier2.cpp\n)\n\n# Luau.EqSat Sources\ntarget_sources(Luau.EqSat PRIVATE\n    EqSat/include/Luau/EGraph.h\n    EqSat/include/Luau/Id.h\n    EqSat/include/Luau/Language.h\n    EqSat/include/Luau/LanguageHash.h\n    EqSat/include/Luau/Slice.h\n    EqSat/include/Luau/UnionFind.h\n\n    EqSat/src/Id.cpp\n    EqSat/src/UnionFind.cpp\n)\n\n# Luau.VM Sources\ntarget_sources(Luau.VM PRIVATE\n    VM/include/lua.h\n    VM/include/luaconf.h\n    VM/include/lualib.h\n\n    VM/src/lapi.cpp\n    VM/src/laux.cpp\n    VM/src/lbaselib.cpp\n    VM/src/lbitlib.cpp\n    VM/src/lbuffer.cpp\n    VM/src/lbuflib.cpp\n    VM/src/lbuiltins.cpp\n    VM/src/lcorolib.cpp\n    VM/src/ldblib.cpp\n    VM/src/ldebug.cpp\n    VM/src/ldo.cpp\n    VM/src/lfunc.cpp\n    VM/src/lgc.cpp\n    VM/src/lgcdebug.cpp\n    VM/src/linit.cpp\n    VM/src/lmathlib.cpp\n    VM/src/lmem.cpp\n    VM/src/lnumprint.cpp\n    VM/src/lobject.cpp\n    VM/src/loslib.cpp\n    VM/src/lperf.cpp\n    VM/src/lstate.cpp\n    VM/src/lstring.cpp\n    VM/src/lstrlib.cpp\n    VM/src/ltable.cpp\n    VM/src/ltablib.cpp\n    VM/src/ltm.cpp\n    VM/src/ludata.cpp\n    VM/src/lutf8lib.cpp\n    VM/src/lveclib.cpp\n    VM/src/lvmexecute.cpp\n    VM/src/lvmload.cpp\n    VM/src/lvmutils.cpp\n\n    VM/src/lapi.h\n    VM/src/lbuffer.h\n    VM/src/lbuiltins.h\n    VM/src/lbytecode.h\n    VM/src/lcommon.h\n    VM/src/ldebug.h\n    VM/src/ldo.h\n    VM/src/lfunc.h\n    VM/src/lgc.h\n    VM/src/lmem.h\n    VM/src/lnumutils.h\n    VM/src/lobject.h\n    VM/src/lstate.h\n    VM/src/lstring.h\n    VM/src/ltable.h\n    VM/src/ltm.h\n    VM/src/ludata.h\n    VM/src/lvm.h\n)\n\ntarget_sources(isocline PRIVATE\n    extern/isocline/include/isocline.h\n    extern/isocline/src/isocline.c\n)\n\n# Common sources shared between all CLI apps\ntarget_sources(Luau.CLI.lib PRIVATE\n    CLI/include/Luau/FileUtils.h\n    CLI/include/Luau/Flags.h\n    CLI/include/Luau/Require.h\n\n    CLI/src/FileUtils.cpp\n    CLI/src/Flags.cpp\n    CLI/src/Require.cpp\n)\n\nif(TARGET Luau.Repl.CLI)\n    # Luau.Repl.CLI Sources\n    target_sources(Luau.Repl.CLI PRIVATE\n        CLI/include/Luau/Coverage.h\n        CLI/include/Luau/Profiler.h\n\n        CLI/src/Coverage.cpp\n        CLI/src/Profiler.cpp\n        CLI/src/Repl.cpp\n        CLI/src/ReplEntry.cpp\n    )\nendif()\n\nif(TARGET Luau.Analyze.CLI)\n    # Luau.Analyze.CLI Sources\n    target_sources(Luau.Analyze.CLI PRIVATE\n        CLI/src/Analyze.cpp\n    )\nendif()\n\nif(TARGET Luau.Ast.CLI)\n    # Luau.Ast.CLI Sources\n    target_sources(Luau.Ast.CLI PRIVATE\n        CLI/src/Ast.cpp\n    )\nendif()\n\nif(TARGET Luau.UnitTest)\n    # Luau.UnitTest Sources\n    target_sources(Luau.UnitTest PRIVATE\n        tests/AnyTypeSummary.test.cpp\n        tests/AssemblyBuilderA64.test.cpp\n        tests/AssemblyBuilderX64.test.cpp\n        tests/AstJsonEncoder.test.cpp\n        tests/AstQuery.test.cpp\n        tests/AstQueryDsl.cpp\n        tests/AstQueryDsl.h\n        tests/AstVisitor.test.cpp\n        tests/Autocomplete.test.cpp\n        tests/BuiltinDefinitions.test.cpp\n        tests/ClassFixture.cpp\n        tests/ClassFixture.h\n        tests/CodeAllocator.test.cpp\n        tests/Compiler.test.cpp\n        tests/Config.test.cpp\n        tests/ConstraintGeneratorFixture.cpp\n        tests/ConstraintGeneratorFixture.h\n        tests/ConstraintSolver.test.cpp\n        tests/CostModel.test.cpp\n        tests/DataFlowGraph.test.cpp\n        tests/DenseHash.test.cpp\n        tests/DiffAsserts.cpp\n        tests/DiffAsserts.h\n        tests/Differ.test.cpp\n        tests/EqSat.language.test.cpp\n        tests/EqSat.propositional.test.cpp\n        tests/EqSat.slice.test.cpp\n        tests/EqSatSimplification.test.cpp\n        tests/Error.test.cpp\n        tests/Fixture.cpp\n        tests/Fixture.h\n\ttests/FragmentAutocomplete.test.cpp\n        tests/Frontend.test.cpp\n        tests/Generalization.test.cpp\n        tests/InsertionOrderedMap.test.cpp\n        tests/Instantiation2.test.cpp\n        tests/IostreamOptional.h\n        tests/IrBuilder.test.cpp\n        tests/IrCallWrapperX64.test.cpp\n        tests/IrRegAllocX64.test.cpp\n        tests/JsonEmitter.test.cpp\n        tests/Lexer.test.cpp\n        tests/Linter.test.cpp\n        tests/LValue.test.cpp\n        tests/Module.test.cpp\n        tests/NonstrictMode.test.cpp\n        tests/NonStrictTypeChecker.test.cpp\n        tests/Normalize.test.cpp\n        tests/NotNull.test.cpp\n        tests/Parser.test.cpp\n        tests/RegisterCallbacks.cpp\n        tests/RegisterCallbacks.h\n        tests/RequireTracer.test.cpp\n        tests/RuntimeLimits.test.cpp\n        tests/ScopedFlags.h\n        tests/Simplify.test.cpp\n        tests/Set.test.cpp\n        tests/StringUtils.test.cpp\n        tests/Subtyping.test.cpp\n        tests/Symbol.test.cpp\n        tests/ToDot.test.cpp\n        tests/TopoSort.test.cpp\n        tests/ToString.test.cpp\n        tests/Transpiler.test.cpp\n        tests/TxnLog.test.cpp\n        tests/TypeFunction.test.cpp\n        tests/TypeFunction.user.test.cpp\n        tests/TypeInfer.aliases.test.cpp\n        tests/TypeInfer.annotations.test.cpp\n        tests/TypeInfer.anyerror.test.cpp\n        tests/TypeInfer.builtins.test.cpp\n        tests/TypeInfer.cfa.test.cpp\n        tests/TypeInfer.classes.test.cpp\n        tests/TypeInfer.definitions.test.cpp\n        tests/TypeInfer.functions.test.cpp\n        tests/TypeInfer.generics.test.cpp\n        tests/TypeInfer.intersectionTypes.test.cpp\n        tests/TypeInfer.loops.test.cpp\n        tests/TypeInfer.modules.test.cpp\n        tests/TypeInfer.negations.test.cpp\n        tests/TypeInfer.oop.test.cpp\n        tests/TypeInfer.operators.test.cpp\n        tests/TypeInfer.primitives.test.cpp\n        tests/TypeInfer.provisional.test.cpp\n        tests/TypeInfer.refinements.test.cpp\n        tests/TypeInfer.singletons.test.cpp\n        tests/TypeInfer.tables.test.cpp\n        tests/TypeInfer.test.cpp\n        tests/TypeInfer.tryUnify.test.cpp\n        tests/TypeInfer.typePacks.test.cpp\n        tests/TypeInfer.typestates.test.cpp\n        tests/TypeInfer.unionTypes.test.cpp\n        tests/TypeInfer.unknownnever.test.cpp\n        tests/TypePack.test.cpp\n        tests/TypePath.test.cpp\n        tests/TypeVar.test.cpp\n        tests/Unifier2.test.cpp\n        tests/Variant.test.cpp\n        tests/VecDeque.test.cpp\n        tests/VisitType.test.cpp\n        tests/main.cpp)\nendif()\n\nif(TARGET Luau.Conformance)\n    # Luau.Conformance Sources\n    target_sources(Luau.Conformance PRIVATE\n        tests/RegisterCallbacks.h\n        tests/RegisterCallbacks.cpp\n        tests/ConformanceIrHooks.h\n        tests/Conformance.test.cpp\n        tests/IrLowering.test.cpp\n        tests/SharedCodeAllocator.test.cpp\n        tests/main.cpp)\nendif()\n\nif(TARGET Luau.CLI.Test)\n    # Luau.CLI.Test Sources\n    target_sources(Luau.CLI.Test PRIVATE\n        CLI/include/Luau/Coverage.h\n        CLI/include/Luau/Profiler.h\n\n        CLI/src/Coverage.cpp\n        CLI/src/Profiler.cpp\n        CLI/src/Repl.cpp\n\n        tests/RegisterCallbacks.h\n        tests/RegisterCallbacks.cpp\n        tests/Repl.test.cpp\n        tests/RequireByString.test.cpp\n        tests/main.cpp)\nendif()\n\nif(TARGET Luau.Web)\n    # Luau.Web Sources\n    target_sources(Luau.Web PRIVATE\n        CLI/src/Web.cpp)\nendif()\n\nif(TARGET Luau.Reduce.CLI)\n    # Luau.Reduce.CLI Sources\n    target_sources(Luau.Reduce.CLI PRIVATE\n        CLI/src/Reduce.cpp\n    )\nendif()\n\nif(TARGET Luau.Compile.CLI)\n    # Luau.Compile.CLI Sources\n    target_sources(Luau.Compile.CLI PRIVATE\n        CLI/src/Compile.cpp)\nendif()\n\nif(TARGET Luau.Bytecode.CLI)\n    # Luau.Bytecode.CLI Sources\n    target_sources(Luau.Bytecode.CLI PRIVATE\n        CLI/src/Bytecode.cpp)\nendif()\n"
        },
        {
          "name": "VM",
          "type": "tree",
          "content": null
        },
        {
          "name": "bench",
          "type": "tree",
          "content": null
        },
        {
          "name": "extern",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "lua_LICENSE.txt",
          "type": "blob",
          "size": 1.04296875,
          "content": "Copyright © 1994–2019 Lua.org, PUC-Rio.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE. \n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}