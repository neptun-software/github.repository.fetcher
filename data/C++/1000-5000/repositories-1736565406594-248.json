{
  "metadata": {
    "timestamp": 1736565406594,
    "page": 248,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "shader-slang/slang",
      "stars": 3471,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.8046875,
          "content": "BasedOnStyle: LLVM\n\n# Whitespace\nMaxEmptyLinesToKeep: 2\nIndentWidth: 4\nColumnLimit: 100\n\n# Preprocessor\nAlignEscapedNewlines: Left\nIncludeBlocks: Regroup\n\n# Functions\nAllowAllArgumentsOnNextLine: false\nBinPackArguments: false\nBinPackParameters: false\nAllowAllParametersOfDeclarationOnNextLine: false\nPenaltyReturnTypeOnItsOwnLine: 9999999\nPenaltyBreakBeforeFirstCallParameter: 6\nAllowShortFunctionsOnASingleLine: Inline\n\n# Brackets and braces\nAlignAfterOpenBracket: AlwaysBreak\nBreakBeforeBraces: Allman\n\n# Pointers\nPointerAlignment: Left\n\n# Classes\nPackConstructorInitializers: NextLineOnly\nBreakConstructorInitializers: BeforeComma\nAccessModifierOffset: -4\n\n# Switch statements\nIndentCaseBlocks: true\n\n# Templates\nSpaceAfterTemplateKeyword: false\nAlwaysBreakTemplateDeclarations: true\n\n# Misc\nSortUsingDeclarations: false\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.9609375,
          "content": "# This file sets up basic text editor behavior\n# using EditorConfig: http://EditorConfig.org.\n#\n# Some editors will import and use the settings from\n# this file automatically, while others need a plugin.\n\n# Editors are supposed to search upwards from a source\n# file to find configuration settings until they see\n# a \"root\" file. This file should be a root:\n#\nroot = true\n\n# Shared configuration for all C/C++ and Slang code\n#\n[*.{c,cpp,h,slang}]\n\n# Use UTF-8 encoding\n#\ncharset = utf-8\n\n# Indent using 4 spaces.\n#\nindent_style = space\nindent_size = 4\n\n# Insert a newline at the end of the file\n# if one is missing (this used to be officially\n# required by C, but it is also just a tidyness thing)\n#\ninsert_final_newline = true\n\n# Removing end of line whitespace is somewhat desirable, but \n# seems to add unwanted noise to PRs. This is especially when different\n# contributors source editors may or may not honor this setting. \n# So disable for now.\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.15625,
          "content": "# indicate generated files so they don't appear in GitHub diffs\n*.slang.cpp linguist-generated\n\n# Set the line endings to LF for shell scripts\n*.sh text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.6650390625,
          "content": "*.exe\n*.pdb\n.vs\n.vscode\n*.VC.opendb\n*.VC.db\n*.vcxproj.user\n*.sdf\n*.ilk\n*.obj\n*.slang-module\n*.zip\n*.ini\n*.DS_store\n.gdb_history\n.vimspector\n.vimspector.json\ncompile_commands.json\n\nbin/\nintermediate/\nbuild.*/\nbuild/\nMakefile\n\n# Files generated by test runner.\n#\n# Note: in some cases a `.expected` file needs to be checked in, but\n# trying to exhaustively enumerate those cases is hard with the\n# way the tests are currently sorted.\n\n*.actual\n*.expected\n*.expected.png\n*.actual.png\n*.actual.txt\n*.slang-repro\n\ntests/**/*.exp\ntests/**/*.lib\ntests/**/*.dll\ntests/**/*.cpp\ntests/**/*.slang-lib\ntests/**/*.slang-module\n\n# Files automatically written and saved by a gfx test\n\ntools/gfx-unit-test/test-tmp-*\n\n# Files generated by other shader compilers\n\n*.spv\n\n# Intermediate source files generated during build process\n/source/slang/slang-generated-*.h\n/source/slang/slang-lookup-*.cpp\n/source/slang/*.meta.slang.h\nprelude/*.h.cpp\n/source/slang/cpp.hint\n/source/slang/slang-value-generated.h\n/source/slang/slang-value-generated-macro.h\n/source/slang/slang-ref-object-generated.h\n/source/slang/slang-ref-object-generated-macro.h\n/source/slang/slang-ast-generated.h\n/source/slang/slang-ast-generated-macro.h\n/docs/_site\n/docs/Gemfile.lock\n/docs/Gemfile\n/docs/stdlib-reference\n/source/slang/slang-core-module-generated.h\n\n/examples/heterogeneous-hello-world/shader.cpp\n/multiple-definitions.hlsl\n/external/slang-llvm/\n/external/slang-glslang/\n\nbuild/**/*.tlog\nbuild/**/*.lastbuildstate\nbuild/**/*.recipe\nbuild/**/*.log\n*.dll\n*.dxil\n/tests/serialization/*.map\n\n.cache\nvkd3d-proton.cache\nvkd3d-proton.cache.write\n*_d3d11.log\n*_dxgi.log\n\n# Vim temporary files\n*~\n.*.swp\n.*.swo\n/generators\n/tests/library/linked.spirv\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 1.396484375,
          "content": "[submodule \"external/glslang\"]\n\tpath = external/glslang\n\turl = https://github.com/KhronosGroup/glslang\n[submodule \"external/tinyobjloader\"]\n\tpath = external/tinyobjloader\n\turl = https://github.com/syoyo/tinyobjloader\n[submodule \"external/glm\"]\n\tpath = external/glm\n\turl = https://github.com/g-truc/glm.git\n[submodule \"external/imgui\"]\n\tpath = external/imgui\n\turl = https://github.com/ocornut/imgui.git\n[submodule \"external/slang-binaries\"]\n\tpath = external/slang-binaries\n\turl = https://github.com/shader-slang/slang-binaries\n[submodule \"external/spirv-tools\"]\n\tpath = external/spirv-tools\n\turl = https://github.com/KhronosGroup/SPIRV-Tools.git\n[submodule \"external/spirv-headers\"]\n\tpath = external/spirv-headers\n\turl = https://github.com/KhronosGroup/SPIRV-Headers.git\n[submodule \"external/miniz\"]\n\tpath = external/miniz\n\turl = https://github.com/richgel999/miniz\n  ignore = untracked\n[submodule \"external/lz4\"]\n\tpath = external/lz4\n\turl = https://github.com/lz4/lz4\n[submodule \"external/unordered_dense\"]\n\tpath = external/unordered_dense\n\turl = https://github.com/martinus/unordered_dense.git\n[submodule \"external/vulkan-headers\"]\n\tpath = external/vulkan\n\turl = https://github.com/KhronosGroup/Vulkan-Headers\n[submodule \"external/metal-cpp\"]\n\tpath = external/metal-cpp\n\turl = https://github.com/bkaradzic/metal-cpp\n[submodule \"external/slang-rhi\"]\n\tpath = external/slang-rhi\n\turl = https://github.com/shader-slang/slang-rhi.git\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 0.08203125,
          "content": "Theresa Foley <tfoley@nvidia.com>\nTheresa Foley <tfoleyNV@users.noreply.github.com>\n"
        },
        {
          "name": ".reuse",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 10.7314453125,
          "content": "cmake_minimum_required(VERSION 3.22)\n\n# Our module dir, include that now so that we can get the version automatically\n# from git describe\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR}/cmake\")\ninclude(GitVersion)\nget_git_version(\n    SLANG_VERSION_NUMERIC\n    SLANG_VERSION_FULL\n    \"${CMAKE_CURRENT_LIST_DIR}\"\n)\n\n#\n# Our project\n#\nproject(slang VERSION \"${SLANG_VERSION_NUMERIC}\" LANGUAGES)\nset(PROJECT_VERSION \"${SLANG_VERSION_FULL}\")\n\n#\n# Global CMake options\n#\nif(${CMAKE_VERSION} VERSION_GREATER_EQUAL \"3.24\")\n    cmake_policy(SET CMP0135 OLD)\nendif()\ncmake_policy(SET CMP0077 NEW)\nset(CMAKE_POLICY_DEFAULT_CMP0077 NEW)\nif(${CMAKE_VERSION} VERSION_GREATER_EQUAL \"3.25\")\n    cmake_policy(SET CMP0141 NEW)\nendif()\ncmake_policy(SET CMP0091 NEW)\n\n# Don't use absolute paths to the build tree in RPATH, this makes the build\n# tree relocatable\nset(CMAKE_BUILD_RPATH_USE_ORIGIN TRUE)\n\n# Enable placing targets into a hierarchy for IDE generators\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\n#\n# CMake-supplied modules and our utils\n#\nenable_language(C CXX)\n\ninclude(FindPackageHandleStandardArgs)\ninclude(CMakeDependentOption)\ninclude(GNUInstallDirs)\n\ninclude(CCacheDebugInfoWorkaround)\ninclude(CompilerFlags)\ninclude(Glob)\ninclude(LLVM)\ninclude(SlangTarget)\ninclude(AutoOption)\ninclude(GitHubRelease)\ninclude(FetchedSharedLibrary)\n\n#\n# Options\n#\n\nauto_option(\n    SLANG_ENABLE_CUDA\n    CUDAToolkit\n    \"Enable CUDA tests using CUDA found in CUDA_PATH\"\n)\nauto_option(\n    SLANG_ENABLE_OPTIX\n    OptiX\n    \"Enable OptiX build/tests, requires SLANG_ENABLE_CUDA\"\n)\nauto_option(\n    SLANG_ENABLE_NVAPI\n    NVAPI\n    \"Enable NVAPI usage (Only available for builds targeting Windows)\"\n)\nif(CMAKE_SYSTEM_NAME MATCHES \"Linux\")\n    auto_option(\n        SLANG_ENABLE_XLIB\n        X11\n        \"Build gfx and platform with Xlib to support windowed apps on Linux\"\n    )\nelse()\n    set(SLANG_ENABLE_XLIB OFF)\nendif()\nauto_option(\n    SLANG_ENABLE_AFTERMATH\n    Aftermath\n    \"Enable Aftermath in GFX, and add aftermath crash example to project\"\n)\nadvanced_option(\n    SLANG_ENABLE_DX_ON_VK\n    \"Use dxvk and vkd3d-proton for DirectX support\"\n    OFF\n)\nadvanced_option(SLANG_ENABLE_SLANG_RHI \"Use slang-rhi as dependency\" ON)\n\noption(\n    SLANG_EMBED_CORE_MODULE_SOURCE\n    \"Embed core module source in the binary\"\n    ON\n)\noption(\n    SLANG_EMBED_CORE_MODULE\n    \"Build slang with an embedded version of the core module\"\n    ON\n)\n\noption(SLANG_ENABLE_DXIL \"Enable generating DXIL with DXC\" ON)\n\noption(SLANG_ENABLE_FULL_IR_VALIDATION \"Enable full IR validation (SLOW!)\")\noption(SLANG_ENABLE_IR_BREAK_ALLOC, \"Enable _debugUID on IR allocation\")\noption(SLANG_ENABLE_ASAN \"Enable ASAN (address sanitizer)\")\n\noption(SLANG_ENABLE_PREBUILT_BINARIES \"Enable using prebuilt binaries\" ON)\noption(SLANG_ENABLE_GFX \"Enable gfx targets\" ON)\noption(SLANG_ENABLE_SLANGD \"Enable language server target\" ON)\noption(SLANG_ENABLE_SLANGC \"Enable standalone compiler target\" ON)\noption(SLANG_ENABLE_SLANGRT \"Enable runtime target\" ON)\noption(\n    SLANG_ENABLE_SLANG_GLSLANG\n    \"Enable glslang dependency and slang-glslang wrapper target\"\n    ON\n)\noption(\n    SLANG_ENABLE_TESTS\n    \"Enable test targets, some tests may require SLANG_ENABLE_GFX, SLANG_ENABLE_SLANGD or SLANG_ENABLE_SLANGRT\"\n    ON\n)\noption(\n    SLANG_ENABLE_EXAMPLES\n    \"Enable example targets, requires SLANG_ENABLE_GFX\"\n    ON\n)\noption(SLANG_ENABLE_REPLAYER \"Enable slang-replay tool\" ON)\n\noption(\n    SLANG_GITHUB_TOKEN\n    \"Use a given token value for accessing Github REST API\"\n    \"\"\n)\n\nadvanced_option(SLANG_USE_SYSTEM_MINIZ \"Build using system Miniz library\" OFF)\nadvanced_option(SLANG_USE_SYSTEM_LZ4 \"Build using system LZ4 library\" OFF)\nadvanced_option(\n    SLANG_USE_SYSTEM_VULKAN_HEADERS\n    \"Build using system Vulkan headers\"\n    OFF\n)\nadvanced_option(\n    SLANG_USE_SYSTEM_SPIRV_HEADERS\n    \"Build using system SPIR-V headers\"\n    OFF\n)\nadvanced_option(\n    SLANG_USE_SYSTEM_UNORDERED_DENSE\n    \"Build using system unordered dense\"\n    OFF\n)\n\noption(\n    SLANG_SPIRV_HEADERS_INCLUDE_DIR\n    \"Provide a specific path for the SPIR-V headers and grammar files\"\n)\nmark_as_advanced(SLANG_SPIRV_HEADERS_INCLUDE_DIR)\n\nif(${SLANG_USE_SYSTEM_LZ4})\n    add_compile_definitions(SLANG_USE_SYSTEM_LZ4_HEADER)\nendif()\n\nif(${SLANG_USE_SYSTEM_SPIRV_HEADERS})\n    add_compile_definitions(SLANG_USE_SYSTEM_SPIRV_HEADER)\nendif()\n\nif(${SLANG_USE_SYSTEM_UNORDERED_DENSE})\n    add_compile_definitions(SLANG_USE_SYSTEM_UNORDERED_DENSE_HEADER)\nendif()\n\nenum_option(\n    SLANG_LIB_TYPE\n    # Default\n    SHARED\n    \"How to build the slang lib:\"\n    # Options\n    SHARED\n    \"Build slang as a shared library (default)\"\n    STATIC\n    \"Build slang as a static library\"\n)\n\noption(\n    SLANG_ENABLE_RELEASE_DEBUG_INFO\n    \"Generate debug info for Release builds\"\n    ON\n)\n\noption(\n    SLANG_ENABLE_SPLIT_DEBUG_INFO\n    \"Generate split debug info for debug builds\"\n    ON\n)\n\nset(SLANG_GENERATORS_PATH\n    \"\"\n    CACHE PATH\n    \"An optional path to the outputs of the all-generators target compiled for the build platform, used when cross-compiling\"\n)\n\nenum_option(\n    SLANG_SLANG_LLVM_FLAVOR\n    # Default\n    FETCH_BINARY_IF_POSSIBLE\n    \"How to get or build slang-llvm:\"\n    # Options\n    FETCH_BINARY\n    \"Use a binary distribution of the slang-llvm library instead of building or using LLVM\"\n    FETCH_BINARY_IF_POSSIBLE\n    \"Like FETCH_BINARY, except falls back to DISABLE if a prebuilt slang-llvm can't be downloaded\"\n    USE_SYSTEM_LLVM\n    \"Build slang-llvm using system-provided LLVM and Clang binaries\"\n    DISABLE\n    \"Do not build llvm or fetch slang-llvm\"\n)\n\nif(SLANG_SLANG_LLVM_FLAVOR MATCHES FETCH_BINARY)\n    # If the user didn't specify a URL, find the best one now\n    if(NOT SLANG_SLANG_LLVM_BINARY_URL)\n        get_best_slang_binary_release_url(\"${SLANG_GITHUB_TOKEN}\" url)\n        if(NOT DEFINED url)\n            if(SLANG_SLANG_LLVM_FLAVOR STREQUAL FETCH_BINARY_IF_POSSIBLE)\n                message(\n                    WARNING\n                    \"Unable to find a prebuilt binary for slang-llvm, Slang will be built without LLVM support. Please consider setting SLANG_SLANG_LLVM_BINARY_URL manually\"\n                )\n            else()\n                message(\n                    FATAL_ERROR\n                    \"Unable to find binary release for slang-llvm, please set a different SLANG_SLANG_LLVM_FLAVOR or set SLANG_SLANG_LLVM_BINARY_URL manually\"\n                )\n            endif()\n        endif()\n    endif()\n    set(SLANG_SLANG_LLVM_BINARY_URL\n        ${url}\n        CACHE STRING\n        \"URL specifying the location of the slang-llvm prebuilt library\"\n    )\nendif()\n\nset(webgpu_dawn_release_tag \"webgpu_dawn-0\")\nif(\n    CMAKE_SYSTEM_NAME MATCHES \"Windows\"\n    AND CMAKE_SYSTEM_PROCESSOR MATCHES \"x86_64|amd64|AMD64\"\n)\n    set(SLANG_WEBGPU_DAWN_BINARY_URL\n        \"https://github.com/shader-slang/dawn/releases/download/${webgpu_dawn_release_tag}/webgpu_dawn-windows-x64.zip\"\n    )\nendif()\n\nset(slang_tint_release_tag \"slang-tint-0\")\nif(\n    CMAKE_SYSTEM_NAME MATCHES \"Windows\"\n    AND CMAKE_SYSTEM_PROCESSOR MATCHES \"x86_64|amd64|AMD64\"\n)\n    set(SLANG_SLANG_TINT_BINARY_URL\n        \"https://github.com/shader-slang/dawn/releases/download/${slang_tint_release_tag}/slang-tint-windows-x64.zip\"\n    )\nendif()\n\n#\n# Option validation\n#\n\nif(NOT SLANG_EMBED_CORE_MODULE AND NOT SLANG_EMBED_CORE_MODULE_SOURCE)\n    message(\n        SEND_ERROR\n        \"One of SLANG_EMBED_CORE_MODULE and SLANG_EMBED_CORE_MODULE_SOURCE must be enabled\"\n    )\nendif()\n\nif(SLANG_ENABLE_OPTIX AND NOT SLANG_ENABLE_CUDA)\n    message(\n        SEND_ERROR\n        \"SLANG_ENABLE_OPTIX is not supported without SLANG_ENABLE_CUDA\"\n    )\nendif()\n\nif(SLANG_ENABLE_NVAPI AND NOT CMAKE_SYSTEM_NAME MATCHES \"Windows\")\n    message(SEND_ERROR \"SLANG_ENABLE_NVAPI is only supported on Windows\")\nendif()\n\nif(SLANG_ENABLE_TESTS AND NOT SLANG_ENABLE_GFX)\n    message(SEND_ERROR \"SLANG_ENABLE_TESTS requires SLANG_ENABLE_GFX\")\nendif()\n\n#\n# Dependencies, most of these are however handled inside the \"auto_option\"\n# calls above\n#\n\nfind_package(Threads REQUIRED)\n\nif(${SLANG_USE_SYSTEM_UNORDERED_DENSE})\n    find_package(unordered_dense CONFIG QUIET)\nendif()\n\nadd_subdirectory(external)\n\n# webgpu_dawn is only available as a fetched shared library, since Dawn's nested source\n# trees are too large and onerous for us to depend on.\nif(SLANG_WEBGPU_DAWN_BINARY_URL)\n    copy_fetched_shared_library(\"webgpu_dawn\" \"${SLANG_WEBGPU_DAWN_BINARY_URL}\")\nendif()\n\n# slang-tint is only available as a fetched shared library, since it's hosted in the Dawn\n# repository, and Dawn's nested source trees are too large and onerous for us to depend\n# on.\nif(SLANG_SLANG_TINT_BINARY_URL)\n    copy_fetched_shared_library(\"slang-tint\" \"${SLANG_SLANG_TINT_BINARY_URL}\")\nendif()\n\nfetch_or_build_slang_llvm()\n\n#\n# Our targets\n#\n\nadd_subdirectory(source/core)\nadd_subdirectory(source/slang-rt)\nadd_subdirectory(source/compiler-core)\nadd_subdirectory(source/slang-wasm)\nadd_subdirectory(source/slang-glslang)\nadd_subdirectory(tools)\nadd_subdirectory(prelude)\nadd_subdirectory(source/slang-core-module)\nadd_subdirectory(source/slang)\nadd_subdirectory(source/slangc)\nadd_subdirectory(examples)\n\n#\n# Packaging\n#\nset(CPACK_ARCHIVE_COMPONENT_INSTALL ON)\nset(CPACK_COMPONENTS_ALL_IN_ONE_PACKAGE ON)\nset(CPACK_STRIP_FILES FALSE)\ninstall(\n    FILES \"${slang_SOURCE_DIR}/README.md\" \"${slang_SOURCE_DIR}/LICENSE\"\n    DESTINATION .\n    COMPONENT metadata\n    EXCLUDE_FROM_ALL\n)\ninstall(\n    DIRECTORY \"${slang_SOURCE_DIR}/docs/\"\n    DESTINATION share/doc/slang\n    PATTERN \".*\" EXCLUDE\n)\ninstall(\n    DIRECTORY \"${slang_SOURCE_DIR}/include\"\n    DESTINATION .\n    PATTERN \".*\" EXCLUDE\n)\n\ninclude(CPack)\n\n# Write basic package config version file using standard CMakePackageConfigHelpers utility\ninclude(CMakePackageConfigHelpers)\nwrite_basic_package_version_file(\n    \"${PROJECT_NAME}ConfigVersion.cmake\"\n    VERSION ${PROJECT_VERSION}\n    COMPATIBILITY SameMajorVersion\n)\n\n# Write SlangConfig.cmake which should allow find_pacakage(SLANG) to work correctly\n# SlangConfig.cmake will define slang::slang target that can be linked with using\n# target_link_libraries. It will also define SLANG_EXECUTABLE export variable that\n# should point to slangc if SLANG_ENABLE_SLANGC is ON.\nconfigure_package_config_file(\n    \"${PROJECT_SOURCE_DIR}/cmake/SlangConfig.cmake.in\"\n    \"${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake\"\n    INSTALL_DESTINATION cmake\n)\n\n# Conditionally handle the case for Emscripten where slang does not create\n# linkable targets. In this case do not export the targets. Otherwise, just\n# export the slang targets. \nif(NOT CMAKE_SYSTEM_NAME STREQUAL \"Emscripten\")\n    install(\n        EXPORT SlangTargets\n        FILE ${PROJECT_NAME}Targets.cmake\n        NAMESPACE ${PROJECT_NAME}::\n        DESTINATION cmake\n    )\nendif()\n\ninstall(\n    FILES\n        \"${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake\"\n        \"${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\"\n    DESTINATION cmake\n)\n"
        },
        {
          "name": "CMakePresets.json",
          "type": "blob",
          "size": 6.521484375,
          "content": "{\n  \"version\": 6,\n  \"cmakeMinimumRequired\": {\n    \"major\": 3,\n    \"minor\": 25,\n    \"patch\": 0\n  },\n  \"configurePresets\": [\n    {\n      \"name\": \"default\",\n      \"description\": \"Default build using Ninja Multi-Config generator\",\n      \"generator\": \"Ninja Multi-Config\",\n      \"binaryDir\": \"${sourceDir}/build\",\n      \"cacheVariables\": {\n        \"CMAKE_MSVC_RUNTIME_LIBRARY\": \"MultiThreaded$<$<CONFIG:Debug>:Debug>\"\n      }\n    },\n    {\n      \"name\": \"emscripten\",\n      \"description\": \"Emscripten-based Wasm build\",\n      \"generator\": \"Ninja Multi-Config\",\n      \"binaryDir\": \"${sourceDir}/build.em\",\n      \"cacheVariables\": {\n        \"SLANG_SLANG_LLVM_FLAVOR\": \"DISABLE\",\n        \"SLANG_ENABLE_SPLIT_DEBUG_INFO\": \"OFF\",\n        \"CMAKE_C_FLAGS_INIT\": \"-fwasm-exceptions -Os\",\n        \"CMAKE_CXX_FLAGS_INIT\": \"-fwasm-exceptions -Os\",\n        \"CMAKE_EXE_LINKER_FLAGS\": \"-sASSERTIONS -sALLOW_MEMORY_GROWTH -fwasm-exceptions --export=__cpp_exception\"\n      }\n    },\n    {\n      \"name\": \"msvc-base\",\n      \"hidden\": true,\n      \"inherits\": \"default\",\n      \"description\": \"Options specific for MSVC\",\n      \"cacheVariables\": {\n        \"CMAKE_C_FLAGS_INIT\": \"-D_ITERATOR_DEBUG_LEVEL=0 /MP\",\n        \"CMAKE_CXX_FLAGS_INIT\": \"-D_ITERATOR_DEBUG_LEVEL=0 /MP\"\n      }\n    },\n    {\n      \"name\": \"vs2019\",\n      \"inherits\": \"msvc-base\",\n      \"description\": \"Visual Studio 2019 project\",\n      \"generator\": \"Visual Studio 16 2019\"\n    },\n    {\n      \"name\": \"vs2022\",\n      \"inherits\": \"msvc-base\",\n      \"description\": \"Visual Studio 2022 project\",\n      \"generator\": \"Visual Studio 17 2022\"\n    },\n    {\n      \"name\": \"vs2022-dev\",\n      \"inherits\": \"msvc-base\",\n      \"description\": \"Visual Studio 2022 project with debug assisting features\",\n      \"generator\": \"Visual Studio 17 2022\",\n      \"cacheVariables\": {\n        \"SLANG_ENABLE_IR_BREAK_ALLOC\": \"TRUE\"\n      }\n    },\n    {\n      \"name\": \"slang-llvm\",\n      \"inherits\": \"default\",\n      \"description\": \"Build slang-llvm from the system LLVM\",\n      \"cacheVariables\": {\n        \"SLANG_SLANG_LLVM_FLAVOR\": \"USE_SYSTEM_LLVM\"\n      }\n    },\n    {\n      \"name\": \"generators\",\n      \"inherits\": \"default\",\n      \"description\": \"Build the compile time generators used in building Slang\",\n      \"cacheVariables\": {\n        \"SLANG_SLANG_LLVM_FLAVOR\": \"DISABLE\",\n        \"SLANG_ENABLE_SLANG_RHI\": false\n      }\n    }\n  ],\n  \"buildPresets\": [\n    {\n      \"name\": \"debug\",\n      \"configurePreset\": \"default\",\n      \"configuration\": \"Debug\"\n    },\n    {\n      \"name\": \"release\",\n      \"configurePreset\": \"default\",\n      \"configuration\": \"Release\"\n    },\n    {\n      \"name\": \"releaseWithDebugInfo\",\n      \"configurePreset\": \"default\",\n      \"configuration\": \"RelWithDebInfo\"\n    },\n    {\n      \"name\": \"emscripten\",\n      \"configurePreset\": \"emscripten\",\n      \"configuration\": \"Release\",\n      \"targets\": [\"slang-wasm\"]\n    },\n    {\n      \"name\": \"generators\",\n      \"inherits\": \"release\",\n      \"configurePreset\": \"generators\",\n      \"targets\": [\"all-generators\"]\n    },\n    {\n      \"name\": \"slang-llvm\",\n      \"inherits\": \"release\",\n      \"configurePreset\": \"slang-llvm\",\n      \"targets\": [\"slang-llvm\"]\n    }\n  ],\n  \"packagePresets\": [\n    {\n      \"name\": \"base\",\n      \"hidden\": true,\n      \"configurePreset\": \"default\",\n      \"generators\": [\"ZIP\"],\n      \"variables\": {\n        \"CPACK_PACKAGE_FILE_NAME\": \"slang\",\n        \"CPACK_COMPONENTS_ALL\": \"Unspecified;metadata;slang-llvm\"\n      }\n    },\n    {\n      \"name\": \"base-debug-info\",\n      \"inherits\": \"base\",\n      \"variables\": {\n        \"CPACK_PACKAGE_FILE_NAME\": \"slang-debug-info\",\n        \"CPACK_COMPONENTS_ALL\": \"debug-info\"\n      }\n    },\n    {\n      \"name\": \"release\",\n      \"inherits\": \"base\",\n      \"configurations\": [\"Release\"],\n      \"packageDirectory\": \"dist-release\"\n    },\n    {\n      \"name\": \"releaseWithDebugInfo\",\n      \"inherits\": \"base\",\n      \"configurations\": [\"RelWithDebInfo\"],\n      \"packageDirectory\": \"dist-releaseWithDebugInfo\"\n    },\n    {\n      \"name\": \"debug\",\n      \"inherits\": \"base\",\n      \"configurations\": [\"Debug\"],\n      \"packageDirectory\": \"dist-debug\"\n    },\n    {\n      \"name\": \"release-debug-info\",\n      \"inherits\": \"base-debug-info\",\n      \"configurations\": [\"Release\"],\n      \"packageDirectory\": \"dist-release-debug-info\"\n    },\n    {\n      \"name\": \"releaseWithDebugInfo-debug-info\",\n      \"inherits\": \"base-debug-info\",\n      \"configurations\": [\"RelWithDebInfo\"],\n      \"packageDirectory\": \"dist-releaseWithDebugInfo-debug-info\"\n    },\n    {\n      \"name\": \"debug-debug-info\",\n      \"inherits\": \"base-debug-info\",\n      \"configurations\": [\"Debug\"],\n      \"packageDirectory\": \"dist-debug-debug-info\"\n    },\n    {\n      \"name\": \"generators\",\n      \"inherits\": \"release\",\n      \"configurePreset\": \"generators\",\n      \"variables\": {\n        \"CPACK_PACKAGE_FILE_NAME\": \"slang-generators\",\n        \"CPACK_COMPONENTS_ALL\": \"generators\"\n      }\n    },\n    {\n      \"name\": \"slang-llvm\",\n      \"inherits\": \"release\",\n      \"configurePreset\": \"slang-llvm\",\n      \"variables\": {\n        \"CPACK_PACKAGE_FILE_NAME\": \"slang-llvm\",\n        \"CPACK_COMPONENTS_ALL\": \"slang-llvm\"\n      }\n    }\n  ],\n  \"workflowPresets\": [\n    {\n      \"name\": \"debug\",\n      \"steps\": [\n        {\n          \"type\": \"configure\",\n          \"name\": \"default\"\n        },\n        {\n          \"type\": \"build\",\n          \"name\": \"debug\"\n        },\n        {\n          \"type\": \"package\",\n          \"name\": \"debug\"\n        }\n      ]\n    },\n    {\n      \"name\": \"release\",\n      \"steps\": [\n        {\n          \"type\": \"configure\",\n          \"name\": \"default\"\n        },\n        {\n          \"type\": \"build\",\n          \"name\": \"release\"\n        },\n        {\n          \"type\": \"package\",\n          \"name\": \"release\"\n        }\n      ]\n    },\n    {\n      \"name\": \"releaseWithDebugInfo\",\n      \"steps\": [\n        {\n          \"type\": \"configure\",\n          \"name\": \"default\"\n        },\n        {\n          \"type\": \"build\",\n          \"name\": \"releaseWithDebugInfo\"\n        },\n        {\n          \"type\": \"package\",\n          \"name\": \"releaseWithDebugInfo\"\n        }\n      ]\n    },\n    {\n      \"name\": \"generators\",\n      \"steps\": [\n        {\n          \"type\": \"configure\",\n          \"name\": \"generators\"\n        },\n        {\n          \"type\": \"build\",\n          \"name\": \"generators\"\n        },\n        {\n          \"type\": \"package\",\n          \"name\": \"generators\"\n        }\n      ]\n    },\n    {\n      \"name\": \"slang-llvm\",\n      \"steps\": [\n        {\n          \"type\": \"configure\",\n          \"name\": \"slang-llvm\"\n        },\n        {\n          \"type\": \"build\",\n          \"name\": \"slang-llvm\"\n        },\n        {\n          \"type\": \"package\",\n          \"name\": \"slang-llvm\"\n        }\n      ]\n    }\n  ]\n}\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.326171875,
          "content": "A reminder that this issue tracker is managed by the Khronos Group. Interactions here should follow the Khronos Code of Conduct ([https://www.khronos.org/developers/code-of-conduct](https://www.khronos.org/developers/code-of-conduct)), which prohibits aggressive or derogatory language. Please keep the discussion friendly and civil.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 16.498046875,
          "content": "# Shader-Slang Open Source Project\n\n## Contribution Guide\n\nThank you for considering contributing to the Shader-Slang project! We welcome your help to improve and enhance our project. Please take a moment to read through this guide to understand how you can contribute.\n\nThis document is designed to guide you in contributing to the project. It is intended to be easy to follow without sending readers to other pages and links. You can simply copy and paste the command lines described in this document.\n\n* Contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant the rights to use your contribution.\n* When you submit a pull request, a CLA bot will determine whether you need to sign a CLA. Simply follow the instructions provided.\n* Please read and follow the contributor [Code of Conduct](CODE_OF_CONDUCT.md).\n* Bug reports and feature requests should be submitted via the GitHub issue tracker.\n* Changes should ideally come in as small pull requests on top of master, coming from your own personal fork of the project.\n* Large features that will involve multiple contributors or a long development time should be discussed in issues and broken down into smaller pieces that can be implemented and checked in stages.\n\n## Table of Contents\n1. [Contribution Process](#contribution-process)\n   - [Forking the Repository](#forking-the-repository)\n   - [Cloning Your Fork](#cloning-your-fork)\n   - [Creating a Branch](#creating-a-branch)\n   - [Build Slang from Source](#build-slang-from-source)\n   - [Making Changes](#making-changes)\n   - [Testing](#testing)\n   - [Commit to the Branch](#commit-to-the-branch)\n   - [Push to Forked Repository](#push-to-forked-repository)\n2. [Pull Request](#pull-request)\n   - [Addressing Code Reviews](#addressing-code-reviews)\n   - [Labeling Breaking Changes](#labeling-breaking-changes)\n   - [Source Code Formatting](#source-code-formatting)\n   - [Document Changes](#document-changes)\n3. [Code Style](#code-style)\n4. [Issue Tracking](#issue-tracking)\n5. [Communication](#communication)\n6. [License](#license)\n\n## Contribution Process\n\n### Forking the Repository\nNavigate to the [Shader-Slang repository](https://github.com/shader-slang/slang).\nClick on the \"Fork\" button in the top right corner to create a copy of the repository in your GitHub account.\nThis document will assume that the name of your forked repository is \"slang\".\nMake sure your \"Actions\" are enabled. Visit your forked repository, click on the \"Actions\" tab, and enable the actions.\n\n### Cloning Your Fork\n1. Clone your fork locally, replacing \"USER-NAME\" in the command below with your actual username.\n   ```\n   $ git clone --recursive --tags https://github.com/USER-NAME/slang.git\n   $ cd slang\n   ```\n\n2. Fetch tags by adding the original repository as an upstream.\n   It is important to have tags in your forked repository because our workflow/action uses the information for the build process. But the tags are not fetched by default when you fork a repository in GitHub. You need to add the original repository as an upstream and fetch tags manually.\n   ```\n   $ git remote add upstream https://github.com/shader-slang/slang.git\n   $ git fetch --tags upstream\n   ```\n\n   You can check whether the tags are fetched properly with the following command.\n   ```\n   $ git tag -l\n   ```\n\n3. Push tags to your forked repository.\n   The tags are fetched to your local machine but haven't been pushed to the forked repository yet. You need to push tags to your forked repository with the following command.\n   ```\n   $ git push --tags origin\n   ```\n\n### Creating a Branch\nCreate a new branch for your contribution:\n```\n$ git checkout -b feature/your-feature-name\n```\n\n### Build Slang from Source\nPlease follow the instructions on how to [Build Slang from Source](docs/building.md).\n\nFor a quick reference, follow the instructions below.\n\n#### Windows\nDownload and install CMake from [CMake.org/download](https://cmake.org/download).\n\nRun CMake with the following command to generate a Visual Studio 2022 Solution:\n```\nC:\\git\\slang> cmake.exe --preset vs2022 # For Visual Studio 2022\nC:\\git\\slang> cmake.exe --preset vs2019 # For Visual Studio 2019\n```\n\nOpen `build/slang.sln` with Visual Studio IDE and build it for \"x64\".\n\nOr you can build with the following command:\n```\nC:\\git\\slang> cmake.exe --build --preset release\n```\n\n#### Linux\nInstall CMake and Ninja.\n```\n$ sudo apt-get install cmake ninja-build\n```\n> Warning: Currently the required CMake version is 3.25 or above.\n\nRun CMake with the following command to generate Makefile:\n```\n$ cmake --preset default\n```\n\nBuild with the following command:\n```\n$ cmake --build --preset release\n```\n\n#### MacOS\nInstall Xcode from the App Store.\n\nInstall CMake and Ninja; we recommend using [Homebrew](https://brew.sh/) for installing them.\n```\n$ brew install ninja\n$ brew install cmake\n```\n\nRun CMake with the following command to generate Makefile:\n```\n$ cmake --preset default\n```\n\nBuild with the following command:\n```\n$ cmake --build --preset release\n```\n\n#### Building with a Local Build of slang-llvm\n`slang-llvm` is required to run `slang-test` properly.\nFollow the instructions below if you wish to build `slang-llvm` locally.\n```\n$ external/build-llvm.sh --source-dir build/slang-llvm_src --install-prefix build/slang-llvm_install\n```\n\nYou need to use the following command to regenerate the Makefile:\n```\n$ cmake --preset default --fresh -DSLANG_SLANG_LLVM_FLAVOR=USE_SYSTEM_LLVM -DLLVM_DIR=build/slang-llvm_install/lib/cmake/llvm -DClang_DIR=build/slang-llvm_install/lib/cmake/clang\n```\n\nBuild with the following command:\n```\n$ cmake --build --preset release\n```\n\n#### GitHub REST API Limit\nWhen you execute `cmake --preset`, CMake uses the GitHub REST API, and there is a daily/hourly API limit for each IP address. If you are using an IP address shared by many people, you may hit this limit occasionally. Refer to [Rate limits for the REST API](https://docs.github.com/en/rest/using-the-rest-api/rate-limits-for-the-rest-api) for more information.\n\nWhen this happens, you will see a warning message from CMake as follows:\n```\nCMake Warning at cmake/GitHubRelease.cmake:53 (message):\n  If API rate limit is exceeded, Github allows a higher limit when you use\n  token.  Try a cmake option -DSLANG_GITHUB_TOKEN=your_token_here\nCall Stack (most recent call first):\n  cmake/GitHubRelease.cmake:114 (check_release_and_get_latest)\n  CMakeLists.txt:141 (get_best_slang_binary_release_url)\n```\n\nThe limit is higher when you use your personal account with a \"Passkey\".\n\nTo generate a \"Passkey\" on GitHub:\n 1. Go to GitHub \"Settings\" for your account.\n 2. Go to \"Password and Authentication\".\n 3. Click \"Add a passkey\" button.\n 4. GitHub will generate a \"Passkey\".\n\nUse the generated \"Passkey\" with a cmake option \"-DSLANG_GITHUB_TOKEN=your-pass-key-here\".\n\n### Making Changes\nMake your changes and ensure to follow our [Design Decisions](docs/design/README.md).\n\n### Testing\nTest your changes thoroughly to ensure they do not introduce new issues. This is done by building and running `slang-test` from the repository root directory. For more details about `slang-test`, please refer to the [Documentation on testing](tools/slang-test/README.md).\n\n> Note: `slang-test` is meant to be launched from the root of the repository. It uses a hard-coded directory name \"tests/\" that is expected to exist in the current working directory.\n\n> Note: One of the options for `slang-test.exe` is `-api`, and it takes an additional keyword to specify which API to test. When the option is `-api all-cpu`, as an example, it means it tests all APIs except CPU. The minus sign (-) after `all` means \"exclude,\" and you can \"include\" with a plus sign (+) like `-api gl+dx11`.\n\nIf you are familiar with Workflows/Actions in GitHub, you can check [Our Workflows](.github/workflows). The \"Test Slang\" section in [ci.yml](.github/workflows/ci.yml) is where `slang-test` runs.\n\nFor a quick reference, follow the instructions below.\n\n#### Windows\n1. Download and install VulkanSDK from the [LunarG SDK page](https://www.lunarg.com/vulkan-sdk).\n2. Set an environment variable to enable SPIR-V validation in the Slang compiler:\n   ```\n   C:\\git\\slang> set SLANG_RUN_SPIRV_VALIDATION=1\n   ```\n3. Run `slang-test` with multiple threads. This may take 10 minutes or less depending on the performance of your computer.\n   ```\n   C:\\git\\slang> build\\Release\\bin\\slang-test.exe -use-test-server -server-count 8\n   ```\n   > Note: If you increase `-server-count` to more than 16, you may find some of the tests randomly fail. This is a known issue on the graphics driver side.\n4. Check whether the tests finished as expected.\n\n#### Linux\n1. Install VulkanSDK by following the [Instructions from LunarG](https://vulkan.lunarg.com/doc/view/latest/linux/getting_started_ubuntu.html).\n   ```\n   $ sudo apt update\n   $ sudo apt install vulkan-sdk\n   ```\n2. Run `slang-test` with multiple threads. This may take 10 minutes or less depending on the performance of your computer.\n   ```\n   $ ./build/Release/bin/slang-test -use-test-server -server-count 8\n   ```\n3. Check whether the tests finished as expected.\n\n### Commit to the Branch\nCommit your changes to the branch with a descriptive commit message:\n```\n$ git commit\n```\n\nIt is important to have a descriptive commit message. Unlike comments inside the source code, the commit messages don't spoil over time because they are tied to specific changes and can be reviewed by many people many years later.\n\nHere is a good example of a commit message:\n\n> Add user authentication feature\n> \n> Fixes #1234\n> \n> This commit introduces a new user authentication feature. It includes changes to the login page, user database, and session management to provide secure user authentication.\n\n### Push to Forked Repository\nPush your branch to your forked repository with the following command:\n```\n$ git push origin feature/your-feature-name\n```\n\nAfter the changes are pushed to your forked repository, the change needs to be merged to the final destination `shader-slang/slang`.\nIn order to proceed, you will need to create a \"Pull Request,\" or \"PR\" for short.\n\nWhen you push to your forked repository, `git-push` usually prints a URL that allows you to create a PR.\n\nIf you missed a chance to use the URL, you can still create a PR from the GitHub webpage.\nGo to your forked repository and change the branch name to the one you used for `git-push`.\nIt will show a message like \"This branch is 1 commit ahead of `shader-slang/slang:master`.\"\nYou can create a PR by clicking on the message.\n\n## Pull Request\nOnce a PR is created against `shader-slang/slang:master`, the PR will be merged when the following conditions are met:\n1. The PR is reviewed and got approval.\n1. All of the workflows pass.\n\nWhen the conditions above are all met, you will have a chance to rewrite the commit message. Since the Slang repo uses the \"squash\" strategy for merging, multiple commits in your PR will become one commit. By default, GitHub will concatenate all of the commit messages sequentially, but often it is not readable. Please rewrite the final commit message in a way that people can easily understand what the purpose of the commit is.\n\nThere are two cases where the workflow may fail for reasons that are not directly related to the change:\n1. \"Breaking change\" labeling is missing.\n1. Source code \"Format\" needs to be changed.\n\n### Addressing Code Reviews\nAfter your pull request is created, you will receive code reviews from the community within 24 hours.\n\nThe PR requires approval from people who have permissions. They will review the changes before approving the pull. During this step, you will get feedback from other people, and they may request you to make some changes.\n\nFollow-up changes that address review comments should be pushed to your pull request branch as additional commits. Any additional commits made to the same branch in your forked repository will show up on the PR as incremental changes.\n\nWhen your branch is out of sync with top-of-tree, submit a merge commit to keep them in sync. Do not rebase and force push after the PR is created to keep the change history during the review process.\n\nUse these commands to sync your branch:\n```\n$ git fetch upstream master\n$ git merge upstream/master # resolve any conflicts here\n$ git submodule update --recursive\n```\n\nThe Slang repository uses the squash strategy for merging pull requests, which means all your commits will be squashed into one commit by GitHub upon merge.\n\n### Labeling Breaking Changes\nAll pull requests must be labeled as either `pr: non-breaking` or `pr: breaking change` before it can be merged to the main branch. If you are already a committer, you are expected to label your PR when you create it. If you are not yet a committer, a reviewer will do this for you.\n\nA PR is considered to introduce a breaking change if an existing application that uses Slang may no longer compile or behave the same way with the change. Typical examples of breaking changes include:\n\n- Changes to `slang.h` that modify the Slang API in a way that breaks binary compatibility.\n- Changes to the language syntax or semantics that may cause existing Slang code to not compile or produce different run-time results. For example, changing the overload resolution rules.\n- Removing or renaming an existing intrinsic from the core module.\n\n### Source Code Formatting\nWhen the PR contains source code changes, one of the workflows will check the formatting of the code.\n\nCode formatting can be automatically fixed on your branch by commenting `/format`; a bot will proceed to open a PR targeting *your* branch. You can merge the generated PR into your branch, and the problem will be resolved.\n\n### Document Changes\nWhen the PR contains document changes for the [Slang User's Guide](https://shader-slang.com/slang/user-guide/), you need to update the table of contents by running a PowerShell script as follows:\n```\n# Open PowerShell on Windows\ncd docs\n.\\build_toc.ps1\n\n# Add to git commit\ngit add gfx-user-guide/toc.html\ngit add user-guide/toc.html\n```\n\nSimilar to the `/format` bot-command described in the previous section, you can also use `/regenerate-toc` instead.\n\nWhen the PR is limited to document changes, the build workflows may not start properly. This is because the building process is unnecessary when the PR is limited to document changes. This may lead to a case where some of the required build workflows are stuck waiting to start. When this happens, the committers will manually merge the PR as a workaround, and it will not give you a chance to rewrite the commit message.\n\n## Code Style\nFollow our [Coding Conventions](docs/design/coding-conventions.md) to maintain consistency throughout the project.\n\nHere are a few highlights:\n1. Indent by four spaces. Don't use tabs except in files that require them (e.g., Makefiles).\n1. Don't use the STL containers, iostreams, or the built-in C++ RTTI system.\n1. Don't use the C++ variants of C headers (e.g., use `<stdio.h>` instead of `<cstdio>`).\n1. Don't use exceptions for non-fatal errors (and even then support a build flag to opt out of exceptions).\n1. Types should use UpperCamelCase, values should use lowerCamelCase, and macros should use `SCREAMING_SNAKE_CASE` with a prefix `SLANG_`.\n1. Global variables should have a `g` prefix, non-const static class members can have an `s` prefix, constant data (in the sense of static const) should have a `k` prefix, and an `m_` prefix on member variables and a `_` prefix on member functions are allowed.\n1. Prefixes based on types (e.g., `p` for pointers) should never be used.\n1. In function parameter lists, an `in`, `out`, or `io` prefix can be added to a parameter name to indicate whether a pointer/reference/buffer is intended to be used for input, output, or both input and output.\n1. Trailing commas should always be used for array initializer lists.\n1. Try to write comments that explain the \"why\" of your code more than the \"what.\"\n\n## Issue Tracking\nWe track all our work with GitHub issues. Check the [Issues](https://github.com/shader-slang/slang/issues) for open issues. If you find a bug or want to suggest an enhancement, please open a new issue.\n\nIf you're new to the project or looking for a good starting point, consider exploring issues labeled as [Good first bug](https://github.com/shader-slang/slang/issues?q=is%3Aissue+is%3Aopen+label%3AGoodFirstBug). These are beginner-friendly bugs that provide a great entry point for new contributors.\n\n## Communication\nJoin our [Discussions](https://github.com/shader-slang/slang/discussions).\n\n## License\nBy contributing to Shader-Slang, you agree that your contributions will be licensed under the MIT License. The full text of the License can be found in the [LICENSE](LICENSE) file in the root of the repository.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.455078125,
          "content": "SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\nLLVM Exceptions to the Apache 2.0 License\n\nAs an exception, if, as a result of your compiling your source code, portions\nof this Software are embedded into an Object form of such source code, you\nmay redistribute such embedded portions in such Object form without complying\nwith the conditions of Sections 4(a), 4(b) and 4(d) of the License.\n\nIn addition, if you combine or link compiled forms of this Software with\nsoftware that is licensed under the GPLv2 (\"Combined Software\") and if a\ncourt of competent jurisdiction determines that the patent provision (Section\n3), the indemnity provision (Section 9) or other Section of the License\nconflicts with the conditions of the GPLv2, you may retroactively and\nprospectively choose to deem waived or otherwise exclude such Section(s) of\nthe License, but only in their entirety and only with respect to the Combined\nSoftware.\n"
        },
        {
          "name": "LICENSES",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.330078125,
          "content": "Slang\n=====\n![CI Status](https://github.com/shader-slang/slang/actions/workflows/ci.yml/badge.svg?branch=master)\n![CTS Status](https://github.com/shader-slang/slang/actions/workflows/vk-gl-cts-nightly.yml/badge.svg)\n\nSlang is a shading language that makes it easier to build and maintain large shader codebases in a modular and extensible fashion, while also maintaining the highest possible performance on modern GPUs and graphics APIs.\nSlang is based on years of collaboration between researchers at NVIDIA, Carnegie Mellon University, Stanford, MIT, UCSD and the University of Washington.\n\n\nWhy Slang?\n---------------\n\nThe Slang shading language is designed to enable real-time graphics developers to work with large-scale, high-performance shader code.\n\n### Write Shaders Once, Run Anywhere\n\nThe Slang compiler can generate code for a wide variety of targets: D3D12, Vulkan, Metal, D3D11, OpenGL, CUDA, and even generate code to run on a CPU. For textual targets, such as Metal Shading Language (MSL) and CUDA, Slang produces readable code that preserves original identifier names, as well as the type and call structure, making it easier to debug.\n\n### Access the Latest GPU Features\n\nSlang code is highly portable, but can still leverage unique platform capabilities, including the latest features in Direct3D and Vulkan. For example, developers can make full use of [pointers](https://shader-slang.com/slang/user-guide/convenience-features.html#pointers-limited) when generating SPIR-V.\nSlang's [capability system](https://shader-slang.com/slang/user-guide/capabilities.html) helps applications manage feature set differences across target platforms by ensuring code only uses available features during the type-checking step, before generating final code. Additionally, Slang provides [flexible interop](https://shader-slang.com/slang/user-guide/a1-04-interop.html) features to enable directly embedding target code or SPIR-V into generated shaders.\n\n### Leverage Neural Graphics with Automatic Differentiation\n\nSlang can [automatically generate both forward and backward derivative propagation code](https://shader-slang.com/slang/user-guide/autodiff.html) for complex functions that involve arbitrary control flow and dynamic dispatch. This allows existing rendering codebases to easily become differentiable, or for Slang to serve as the kernel language in a PyTorch-driven machine learning framework via [`slangtorch`](https://shader-slang.com/slang/user-guide/a1-02-slangpy.html).\n\n### Scalable Software Development with Modules\n\nSlang provides a [module system](https://shader-slang.com/slang/user-guide/modules.html) that enables logical organization of code for separate compilation. Slang modules can be independently compiled offline to a custom IR (with optional obfuscation) and then linked at runtime to generate code in formats such as DXIL or SPIR-V.\n\n### Code Specialization that Works with Modules\n\nSlang supports [generics and interfaces](https://shader-slang.com/slang/user-guide/interfaces-generics.html) (a.k.a. type traits/protocols), allowing for clear expression of shader specialization without the need for preprocessor techniques or string-pasting. Unlike C++ templates, Slang's generics are pre-checked and don't produce cascading error messages that are difficult to diagnose. The same generic shader can be specialized for a variety of different types to produce specialized code ahead of time, or on the fly, entirely under application control.\n\n### Easy On-ramp for HLSL and GLSL Codebases\n\nSlang's syntax is similar to HLSL, and most existing HLSL code can be compiled with the Slang compiler out-of-the-box, or with just minor modifications. This allows existing shader codebases to immediately benefit from Slang without requiring a complete rewrite or port.\n\nSlang provides a compatibility module that enables the use of most GLSL intrinsic functions and GLSL's parameter binding syntax.\n\n### Comprehensive Tooling Support\n\nSlang comes with full support of IntelliSense editing features in Visual Studio Code and Visual Studio through the Language Server Protocol.\nFull debugging capabilities are also available through RenderDoc and SPIR-V based tools.\n\nGetting Started\n---------------\n\nThe fastest way to get started using Slang in your own development is to use a pre-built binary package, available through GitHub [releases](https://github.com/shader-slang/slang/releases).\nSlang binaries are also included in the [Vulkan SDK](https://vulkan.lunarg.com/sdk/home) since version 1.3.296.0.\n\nThere are packages built for x86_64 and aarch64 Windows, Linux and macOS.\nEach binary release includes the command-line `slangc` compiler, a shared library for the compiler, and the `slang.h` header.\n\nSee the user-guide for info on using the `slangc` command-line tool: [Slang Command Line Usage](\nhttps://shader-slang.com/slang/user-guide/compiling.html#command-line-compilation-with-slangc).\n\nIf you want to try out the Slang language without installing anything, a fast and simple way is to use the [Slang Playground](https://shader-slang.com/slang-playground). The playground allows you to compile Slang code to a variety of targets, and even run some simple shaders directly within the browser. The playground loads Slang compiler to your browser and runs all compilation locally. No data will be sent to any servers.\n\nIf you would like to build Slang from source, please consult the [build instructions](docs/building.md).\n\nDocumentation\n-------------\n\nThe Slang project provides a variety of different [documentation](docs/), but most users would be well served starting with the [User's Guide](https://shader-slang.github.io/slang/user-guide/).\n\nFor developers writing Slang code, the [Slang Core Module Reference](https://shader-slang.com/stdlib-reference/) provides detailed documentation on Slang's built-in types and functions.\n\nWe also provide a few [examples](examples/) of how to integrate Slang into a rendering application.\n\nThese examples use a graphics layer that we include with Slang called \"GFX\" which is an abstraction library of various graphics APIs (D3D11, D2D12, OpenGL, Vulkan, CUDA, and the CPU) to support cross-platform applications using GPU graphics and compute capabilities. \nIf you'd like to learn more about GFX, see the [GFX User Guide](https://shader-slang.com/slang/gfx-user-guide/index.html).\n\nAdditionally, we recommend checking out [Vulkan Mini Examples](https://github.com/nvpro-samples/vk_mini_samples/) for more examples of using Slang's language features available on Vulkan, such as pointers and the ray tracing intrinsics.\n\nContributing\n------------\n\nIf you'd like to contribute to the project, we are excited to have your input.\nThe following guidelines should be observed by contributors:\n\n* Please follow the contributor [Code of Conduct](CODE_OF_CONDUCT.md).\n* Bugs reports and feature requests should go through the GitHub issue tracker\n* Changes should ideally come in as small pull requests on top of `master`, coming from your own personal fork of the project\n* Large features that will involve multiple contributors or a long development time should be discussed in issues, and broken down into smaller pieces that can be implemented and checked in in stages\n\n[Contribution guide](CONTRIBUTING.md) describes the workflow for contributors at more detail.\n\nLimitations and Support\n-----------------------\n\n### Platform support\n\nThe Slang compiler and libraries can be built on the following platforms:\n\n|  Windows  |   Linux   |   MacOS   |  WebAssembly |\n|:---------:|:---------:|:---------:|:------------:|\n| supported | supported | supported | experimental |\n\nBoth `x86_64` and `aarch64` architectures are supported on Windows, Linux and MacOS platforms.\n\n### Target support\n\nSlang can compile shader code to the following targets:\n\n|    Target   |                                         Status                                        |                          Output Formats                          |\n|:-----------:|:-------------------------------------------------------------------------------------:|:----------------------------------------------------------------:|\n| Direct3D 11 |    [supported](https://shader-slang.com/slang/user-guide/targets.html#direct3d-11)    |                               HLSL                               |\n| Direct3D 12 |    [supported](https://shader-slang.com/slang/user-guide/targets.html#direct3d-12)    |                               HLSL                               |\n|    Vulkan   |       [supported](https://shader-slang.com/slang/user-guide/targets.html#vulkan)      |                            SPIRV, GLSL                           |\n|    Metal    |     [experimental*](https://shader-slang.com/slang/user-guide/targets.html#metal)     |                      Metal Shading Language                      |\n|    WebGPU   |                                     experimental**                                    |                               WGSL                               |\n|     CUDA    |   [supported](https://shader-slang.com/slang/user-guide/targets.html#cuda-and-optix)  |                        C++ (compute only)                        |\n|    Optix    | [experimental](https://shader-slang.com/slang/user-guide/targets.html#cuda-and-optix) |                             C++ (WIP)                            |\n|     CPU     |   [experimental](https://shader-slang.com/slang/user-guide/targets.html#cpu-compute)  | C++ (kernel), C++ (host), standalone executable, dynamic library |\n\n> *Slang currently supports generating vertex, fragment, compute, task and mesh\n> shaders for Metal.\n\n> **WGSL support is still work in-progress.\n\nFor greater detail, see the [Supported Compilation\nTargets](https://shader-slang.com/slang/user-guide/targets.html) section of the\n[User Guide](https://shader-slang.github.io/slang/user-guide/)\n\nThe Slang project has been used for production applications and large shader\ncodebases, but it is still under active development. Support is currently\nfocused on the platforms (Windows, Linux) and target APIs (Direct3D 12, Vulkan)\nwhere Slang is used most heavily. Users who are looking for support on other\nplatforms or APIs should coordinate with the development team via the issue\ntracker to make sure that their use cases can be supported.\n\nLicense\n-------\n\nThe Slang code itself is under the Apache 2.0 with LLVM Exception license (see [LICENSE](LICENSE)).\n\nBuilds of the core Slang tools depend on the following projects, either automatically or optionally, which may have their own licenses:\n\n* [`glslang`](https://github.com/KhronosGroup/glslang) (BSD)\n* [`lz4`](https://github.com/lz4/lz4) (BSD)\n* [`miniz`](https://github.com/richgel999/miniz) (MIT)\n* [`spirv-headers`](https://github.com/KhronosGroup/SPIRV-Headers) (Modified MIT)\n* [`spirv-tools`](https://github.com/KhronosGroup/SPIRV-Tools) (Apache 2.0)\n* [`ankerl::unordered_dense::{map, set}`](https://github.com/martinus/unordered_dense) (MIT)\n\nSlang releases may include [LLVM](https://github.com/llvm/llvm-project) under the license:\n\n* [`llvm`](https://llvm.org/docs/DeveloperPolicy.html#new-llvm-project-license-framework) (Apache 2.0 License with LLVM exceptions)\n\nSome of the tests and example programs that build with Slang use the following projects, which may have their own licenses:\n\n* [`glm`](https://github.com/g-truc/glm) (MIT)\n* `stb_image` and `stb_image_write` from the [`stb`](https://github.com/nothings/stb) collection of single-file libraries (Public Domain)\n* [`tinyobjloader`](https://github.com/tinyobjloader/tinyobjloader) (MIT)\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "external",
          "type": "tree",
          "content": null
        },
        {
          "name": "extras",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "prelude",
          "type": "tree",
          "content": null
        },
        {
          "name": "slang-tag-version.h.in",
          "type": "blob",
          "size": 0.0478515625,
          "content": "#define SLANG_TAG_VERSION \"@SLANG_VERSION_FULL@\"\n"
        },
        {
          "name": "source",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}