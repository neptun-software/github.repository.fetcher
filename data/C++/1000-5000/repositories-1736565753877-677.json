{
  "metadata": {
    "timestamp": 1736565753877,
    "page": 677,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "fnc12/sqlite_orm",
      "stars": 2343,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 3.5673828125,
          "content": "---\nLanguage:        Cpp\nAccessModifierOffset: -2\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlines: Right\nAlignOperands:   true\nAlignTrailingComments: false\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortLambdasOnASingleLine: Empty\nAllowAllArgumentsOnNextLine: false\nAllowAllConstructorInitializersOnNextLine: false\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: Empty\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: Yes\nBinPackArguments: false\nBinPackParameters: false\nBraceWrapping:   \n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   false\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  AfterExternBlock: false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Attach\nBreakBeforeInheritanceComma: false\nBreakInheritanceList: BeforeColon\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: AfterColon\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit:     120\nCommentPragmas:  '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: false\nForEachMacros:   \n  - foreach\n  - Q_FOREACH\n  - BOOST_FOREACH\nIncludeBlocks:   Preserve\nIncludeCategories: \n  - Regex:           '^\"(llvm|llvm-c|clang|clang-c)/'\n    Priority:        2\n  - Regex:           '^(<|\"(gtest|gmock|isl|json)/)'\n    Priority:        3\n  - Regex:           '.*'\n    Priority:        1\nIncludeIsMainRegex: '(Test)?$'\nIndentCaseLabels: true\nIndentPPDirectives: None\nIndentWidth:     4\nIndentWrappedFunctionNames: false\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: true\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: All\nObjCBinPackProtocolList: Auto\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 19\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 60\nPointerAlignment: Left\nReflowComments:  false\nSortIncludes:    false\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: false\nSpaceAfterTemplateKeyword: false\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCpp11BracedList: false\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: Never\nSpaceBeforeRangeBasedForLoopColon: false\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 2\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Cpp11\nAttributeMacros: [SQLITE_ORM_CPP_LIKELY, SQLITE_ORM_CPP_UNLIKELY]\nStatementMacros: \n  - __pragma\n  - _Pragma\n  - Q_UNUSED\n  - QT_REQUIRE_VERSION\nTabWidth:        4\nUseTab:          Never\n...\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0869140625,
          "content": ".DS_store\nexamples/simple_neural_network.cpp\n\ncmake-build-debug/\n\n.idea/\n\n/compile\nbuild\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 3.9248046875,
          "content": "# Defaults\nos: linux\ndist: focal\n\nmatrix:\n  include:\n    - name: \"[C++14] GCC-9\"\n      addons:\n        apt:\n          sources:\n            - ubuntu-toolchain-r-test\n          packages:\n            - g++-9\n            - ninja-build\n      env:\n        - CC: gcc-9\n        - CXX: g++-9\n\n    - name: \"[C++14] GCC-7\"\n      addons:\n        apt:\n          sources:\n            - ubuntu-toolchain-r-test\n          packages:\n            - g++-7\n            - ninja-build\n      env:\n        - CC: gcc-7\n        - CXX: g++-7\n\n    - name: \"[C++14] LLVM/Clang (Travis default)\"\n      language: cpp\n      compiler: clang\n      addons:\n        apt:\n          packages:\n            - ninja-build\n      env:\n        - SQLITE_ORM_OMITS_CODECVT: ON\n\n    - name: \"[C++14] AppleClang-10.0.1\"\n      os: osx\n      osx_image: xcode10.2\n      language: cpp\n      env:\n        - SQLITE_ORM_OMITS_CODECVT: ON\n      addons:\n        homebrew:\n          packages:\n            - ninja\n          update: true\n\n    - name: \"[C++14] LLVM/Clang (latest)\"\n      os: osx\n      osx_image: xcode10.2\n      addons:\n        homebrew:\n          packages:\n            - llvm\n            - ninja\n          update: true\n      env:\n        - CPPFLAGS: \"-I/usr/local/opt/llvm/include\"\n        - LDFLAGS: \"-L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib\"\n        - CPATH: /usr/local/opt/llvm/include\n        - LIBRARY_PATH: /usr/local/opt/llvm/lib\n        - LD_LIBRARY_PATH: /usr/local/opt/llvm/lib\n        - CC: /usr/local/opt/llvm/bin/clang\n        - CXX: /usr/local/opt/llvm/bin/clang++\n        - SQLITE_ORM_OMITS_CODECVT: ON\n\n    - name: \"[C++14] GCC-6\"\n      os: osx\n      osx_image: xcode10.2\n      addons:\n        homebrew:\n          packages:\n            - gcc@6\n            - ninja\n          update: true\n      env:\n        - CC: gcc-6\n        - CXX: g++-6\n\n    - name: \"[C++17] GCC-9\"\n      addons:\n        apt:\n          sources:\n            - ubuntu-toolchain-r-test\n          packages:\n            - g++-9\n            - ninja-build\n      env:\n        - CC: gcc-9\n        - CXX: g++-9\n        - SQLITE_ORM_CXX_STANDARD: \"-DSQLITE_ORM_ENABLE_CXX_17=ON\"\n\n    - name: \"[C++17] GCC-7\"\n      addons:\n        apt:\n          sources:\n            - ubuntu-toolchain-r-test\n          packages:\n            - g++-7\n            - ninja-build\n      env:\n        - CC: gcc-7\n        - CXX: g++-7\n        - SQLITE_ORM_CXX_STANDARD: \"-DSQLITE_ORM_ENABLE_CXX_17=ON\"\n\n    - name: \"[C++17] AppleClang-10.0.1\"\n      os: osx\n      osx_image: xcode10.2\n      language: cpp\n      env:\n        - SQLITE_ORM_OMITS_CODECVT: ON\n        - SQLITE_ORM_CXX_STANDARD: \"-DSQLITE_ORM_ENABLE_CXX_17=ON\"\n      addons:\n        homebrew:\n          packages:\n            - ninja\n          update: true\n\n    - name: \"[C++17] LLVM/Clang (latest)\"\n      os: osx\n      osx_image: xcode10.2\n      addons:\n        homebrew:\n          packages:\n            - llvm\n            - ninja\n          update: true\n      env:\n        - CPPFLAGS: \"-I/usr/local/opt/llvm/include\"\n        - LDFLAGS: \"-L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib\"\n        - CPATH: /usr/local/opt/llvm/include\n        - LIBRARY_PATH: /usr/local/opt/llvm/lib\n        - LD_LIBRARY_PATH: /usr/local/opt/llvm/lib\n        - CC: /usr/local/opt/llvm/bin/clang\n        - CXX: /usr/local/opt/llvm/bin/clang++\n        - SQLITE_ORM_OMITS_CODECVT: ON\n        - SQLITE_ORM_CXX_STANDARD: \"-DSQLITE_ORM_ENABLE_CXX_17=ON\"\n\nbefore_install:\n  - if [[ ${TRAVIS_OS_NAME} == \"osx\" ]]; then export PATH=\"/usr/local/opt/coreutils/libexec/gnubin:$PATH\"; fi\n\n# scripts to run before build\nbefore_script:\n  - if [[ \"$CXX\" == *\"clang\"* ]]; then clang --version ; fi\n  - cd ${TRAVIS_BUILD_DIR}\n  - mkdir compile && cd compile\n  - cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug ${SQLITE_ORM_CXX_STANDARD} -DSQLITE_ORM_OMITS_CODECVT=\"${SQLITE_ORM_OMITS_CODECVT:OFF}\" ..\n\n# build examples, and run tests (ie make & make test)\nscript:\n  - cmake --build . --config Debug -- -k 10\n  - ctest --verbose --output-on-failure -C Debug -j $(nproc)"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 3.048828125,
          "content": "# note: the minimum required version needs to go hand in hand with appveyor builds,\n# which is CMake 3.16 for the Visual Studio 2017 build worker image\ncmake_minimum_required (VERSION 3.16)\n\n# PACKAGE_VERSION is used by cpack scripts currently\n# Both sqlite_orm_VERSION and PACKAGE_VERSION should be the same for now\n\nset(sqlite_orm_VERSION \"1.8.0\")\nset(PACKAGE_VERSION ${sqlite_orm_VERSION})\n\nproject(\"sqlite_orm\" VERSION ${PACKAGE_VERSION})\n\n# Handling C++ standard version to use\noption(SQLITE_ORM_ENABLE_CXX_20 \"Enable C++ 20\" OFF)\noption(SQLITE_ORM_ENABLE_CXX_17 \"Enable C++ 17\" OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nif(SQLITE_ORM_ENABLE_CXX_20)\n    set(CMAKE_CXX_STANDARD 20)\n    message(STATUS \"SQLITE_ORM: Build with C++20 features\")\nelseif(SQLITE_ORM_ENABLE_CXX_17)\n    set(CMAKE_CXX_STANDARD 17)\n    message(STATUS \"SQLITE_ORM: Build with C++17 features\")\nelse()\n    # fallback to C++14 if there is no special instruction\n    set(CMAKE_CXX_STANDARD 14)\n    message(STATUS \"SQLITE_ORM: Build with C++14 features\")\nendif()\nset(CMAKE_CXX_EXTENSIONS OFF)\n\n\nset(CMAKE_VERBOSE_MAKEFILE ON)\n\nmessage(STATUS \"Configuring ${PROJECT_NAME} ${sqlite_orm_VERSION}\")\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR}/cmake\")\n\ninclude(CTest)\n\n### Dependencies\nadd_subdirectory(dependencies)\n\n### Main Build Targets\nset(SqliteOrm_INCLUDE \"${CMAKE_CURRENT_SOURCE_DIR}/include\")\nadd_library(sqlite_orm INTERFACE)\nadd_library(sqlite_orm::sqlite_orm ALIAS sqlite_orm)\n\nfind_package(SQLite3 REQUIRED)\ntarget_link_libraries(sqlite_orm INTERFACE SQLite::SQLite3)\n\ntarget_sources(sqlite_orm INTERFACE $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include/sqlite_orm/sqlite_orm.h>)\n\ntarget_include_directories(sqlite_orm INTERFACE $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>)\n\ninclude(ucm)\n\nif (MSVC)\n    string(REGEX REPLACE \"/RTC(su|[1su])\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")    \n    string(REGEX REPLACE \"/RTC(su|[1su])\" \"\" CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG}\")    \n    string(REGEX REPLACE \"/RTC(su|[1su])\" \"\" CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE}\")    \n    add_compile_options(/EHsc)\n    if (MSVC_VERSION GREATER_EQUAL 1914)\n        add_compile_options(/Zc:__cplusplus)\n    endif()\n    if (MSVC_VERSION GREATER_EQUAL 1910)\n        # VC 2017 issues a deprecation warning for `strncpy`\n        add_compile_definitions(_CRT_SECURE_NO_WARNINGS)\n    endif()\n    add_compile_options(/MP) # multi-processor compilation\n    if (CMAKE_CXX_STANDARD GREATER 14)\n        add_compile_definitions(_SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING)\n    endif()\n\n    if (\"${CMAKE_GENERATOR}\" MATCHES \"(Win64|x64)\")\n        message(STATUS \"Add /bigobj flag to compiler\")\n        add_compile_options(/bigobj)\n    endif()\nendif()\n\nucm_print_flags()\nmessage(STATUS \"CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}\")\n\n# Tests\nif(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME AND BUILD_TESTING)\n    add_subdirectory(tests)\nendif()\n\noption(BUILD_EXAMPLES \"Build code examples\" OFF)\nif(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME AND BUILD_EXAMPLES)\n    add_subdirectory(examples)\nendif()\n\n### Packaging\nadd_subdirectory(packaging)\n"
        },
        {
          "name": "COMM-LICENSE",
          "type": "blob",
          "size": 1.0498046875,
          "content": "Copyright (c) 2012-2023 Eugene Zakharov and others\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.3427734375,
          "content": "# How to Contribute #\n\nThank you for your interest in contributing to the sqlite_orm project!\n\n## GitHub pull requests ##\n\nThis is the preferred method of submitting changes.  When you submit a pull request through github,\nit activates the continuous integration (CI) build systems at Appveyor and Travis to build your changes\non a variety of Linux, Windows and MacOS configurations and run all the test suites.  Follow these requirements \nfor a successful pull request:\n\n 1. All significant changes require a [github issue](https://github.com/fnc12/sqlite_orm/issues).  Trivial changes such as fixing a typo or a compiler warning do not.\n\n 1. The pull request title must begin with the github issue identifier if it has an associated issue, for example:\n\n        #9999 : an example pull request title\n        \n 1. Commit messages must be understandable in future by different developers and must be written in english language only:\n     \nInstructions:\n\n 1. Create a fork in your GitHub account of http://github.com/fnc12/sqlite_orm\n 1. Clone the fork to your development system.\n 1. Create a branch for your changes (best practice is following git flow pattern with issue number as branch name, e.g. feature/9999-some-feature or bugfix/9999-some-bug).\n 1. Modify the source to include the improvement/bugfix, and:\n\n    * Remember to provide *tests* for all submitted changes!\n    * Use test-driven development (TDD): add a test that will isolate the bug *before* applying the change that fixes it.\n    * Verify that you follow current code style on sqlite_orm.\n    * [*optional*] Verify that your change works on other platforms by adding a GitHub service hook to [Travis CI](http://docs.travis-ci.com/user/getting-started/#Step-one%3A-Sign-in) and [AppVeyor](http://www.appveyor.com/docs).  You can use this technique to run the sqlite_orm CI jobs in your account to check your changes before they are made public.  Every GitHub pull request into sqlite_orm will run the full CI build and test suite on your changes.\n\n 1. Commit and push changes to your branch (please use issue name and description as commit title, e.g. \"make it perfect. (fixes #9999)\").\n 1. Use GitHub to create a pull request going from your branch to sqlite_orm:dev.  Ensure that the github issue number is at the beginning of the title of your pull request.\n 1. Wait for other contributors or committers to review your new addition, and for a CI build to complete.\n 1. Wait for a owner or collaborators to commit your patch.\n\n## If you want to build the project locally ##\n\nSee our detailed instructions on the [CMake README](https://github.com/fnc12/sqlite_orm#usage).\n\n## If you want to review open issues... ##\n\n 1. Review the [GitHub Pull Request Backlog](https://github.com/fnc12/sqlite_orm/pulls).  Code reviews are opened to all.\n\n## If you discovered a defect... ##\n\n 1. Check to see if the issue is already in the [github issues](https://github.com/fnc12/sqlite_orm/issues).\n 1. If not please create an issue describing the change you're proposing in the github issues page.\n 1. Contribute your code changes using the GitHub pull request method:\n\n## GitHub recipes for Pull Requests ##\n\nSometimes commmitters may ask you to take actions in your pull requests.  Here are some recipes that will help you accomplish those requests.  These examples assume you are working on github issue 9999.  You should also be familiar with the [upstream](https://help.github.com/articles/syncing-a-fork/) repository concept.\n\n### Squash your changes ###\n\nIf you have commits with adding code which is removed in a different commit within the same PR then please squash all commits to remove unnecessary add commits.\n\n1. Use the command ``git log`` to identify how many commits you made since you began.\n2. Use the command ``git rebase -i HEAD~N`` where N is the number of commits.\n3. Leave \"pull\" in the first line.\n4. Change all other lines from \"pull\" to \"fixup\".\n5. All your changes are now in a single commit.\n\nIf you already have a pull request outstanding, you will need to do a \"force push\" to overwrite it since you changed your commit history:\n\n    git push -u origin feature/9999-make-perfect --force\n\nA more detailed walkthrough of a squash can be found at [Git Ready](http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html).\n\n### Rebase your pull request ###\n\nIf your pull request has a conflict with dev, it needs to be rebased:\n\n    git checkout feature/9999-make-perfect\n    git rebase upstream dev\n      (resolve any conflicts, make sure it builds)\n    git push -u origin feature/9999-make-perfect --force\n\n### Fix a bad merge ###\n\nIf your pull request contains commits that are not yours, then you should use the following technique to fix the bad merge in your branch:\n\n    git checkout dev\n    git pull upstream dev\n    git checkout -b feature/9999-make-perfect-take-2\n    git cherry-pick ...\n        (pick only your commits from your original pull request in ascending chronological order)\n    squash your changes to a single commit if there is more than one (see above)\n    git push -u origin feature/9999-make-perfect-take-2:feature/9999-make-perfect\n\nThis procedure will apply only your commits in order to the current dev, then you will squash them to a single commit, and then you force push your local feature/9999-make-perfect-take-2 into remote feature/9999-make-perfect which represents your pull request, replacing all the commits with the new one.\n\n \n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 33.7138671875,
          "content": "                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published\n    by the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n<https://www.gnu.org/licenses/>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 35.080078125,
          "content": "<p align=\"center\">\n  <img src=\"https://github.com/fnc12/sqlite_orm/blob/master/logo.png\" alt=\"Sublime's custom image\" width=\"557\"/>\n</p>\n\n[![C++](https://img.shields.io/badge/c++-%2300599C.svg?style=for-the-badge&logo=c%2B%2B&logoColor=white)](https://en.cppreference.com/w/)\n[![SQLite](https://img.shields.io/badge/sqlite-%2307405e.svg?style=for-the-badge&logo=sqlite&logoColor=white)](https://www.sqlite.org/index.html)\n[![](https://dcbadge.limes.pink/api/server/https://discord.gg/kBM4cPZx6a)](https://discord.gg/https://discord.gg/kBM4cPZx6a)\n[![GitHub Actions](https://img.shields.io/badge/githubactions-%232671E5.svg?style=for-the-badge&logo=githubactions&logoColor=white)](https://github.com/fnc12/sqlite_orm/actions)\n[![CMake](https://img.shields.io/badge/CMake-%23008FBA.svg?style=for-the-badge&logo=cmake&logoColor=white)](https://github.com/fnc12/sqlite_orm/blob/dev/CMakeLists.txt)\n[![Stack Overflow](https://img.shields.io/badge/-Stackoverflow-FE7A16?style=for-the-badge&logo=stack-overflow&logoColor=white)](https://stackoverflow.com/search?q=sqlite_orm)\n[![PayPal](https://img.shields.io/badge/PayPal-00457C?style=for-the-badge&logo=paypal&logoColor=white)](https://paypal.me/fnc12)\n[![Twitter](https://img.shields.io/badge/sqlite_orm-%231DA1F2.svg?style=for-the-badge&logo=Twitter&logoColor=white)](https://twitter.com/sqlite_orm)\n[![Patreon](https://img.shields.io/badge/Patreon-F96854?style=for-the-badge&logo=patreon&logoColor=white)](https://patreon.com/fnc12)\n\n# SQLite ORM\nSQLite ORM light header only library for modern C++. Please read the license precisely. The project has AGPL license for open source project and MIT license after purchasing it for 50$ (using [PayPal](https://paypal.me/fnc12) or any different way (contact using email fnc12@me.com)).\n\n# Status\n| Branch | Travis | Appveyor |\n| :----- | :----- | :------- |\n| [`master`](https://github.com/fnc12/sqlite_orm/tree/master) | [![Build Status](https://travis-ci.org/fnc12/sqlite_orm.svg?branch=master)](https://travis-ci.org/fnc12/sqlite_orm) | [![Build status](https://ci.appveyor.com/api/projects/status/github/fnc12/sqlite_orm?branch=master&svg=true)](https://ci.appveyor.com/project/fnc12/sqlite-orm/history) | | | [![Website](https://img.shields.io/badge/official-website-brightgreen.svg)](https://github.com/fnc12/sqlite_orm/) |\n| [`dev`](https://github.com/fnc12/sqlite_orm/tree/dev) | [![Build Status](https://travis-ci.org/fnc12/sqlite_orm.svg?branch=dev)](https://travis-ci.org/fnc12/sqlite_orm) | [![Build status](https://ci.appveyor.com/api/projects/status/github/fnc12/sqlite_orm?branch=dev&svg=true)](https://ci.appveyor.com/project/fnc12/sqlite-orm/history) | | | [![Website](https://img.shields.io/badge/official-website-brightgreen.svg)](https://github.com/fnc12/sqlite_orm/tree/dev) |\n\n# Advantages\n\n* **No raw string queries**\n* **Intuitive syntax**\n* **Comfortable interface - one code line per single query**\n* **Built with modern C++14/C++17/C++20 features (no macros and external scripts)**\n* **CRUD support**\n* **Pure select query support**\n* **Prepared statements support**\n* **UNION, EXCEPT and INTERSECT support**\n* **STL compatible**\n* **Custom types binding support**\n* **BLOB support** - maps to `std::vector<char>` or one can bind your custom type\n* **FOREIGN KEY support**\n* **Composite key support**\n* **JOIN support**\n* **Transactions support**\n* **Migrations functionality**\n* **Powerful conditions**\n* **ORDER BY and LIMIT, OFFSET support**\n* **GROUP BY / DISTINCT support**\n* **INDEX support**\n* **Follows single responsibility principle** - no need write code inside your data model classes\n* **Easy integration** - single header only lib.\n* **The only dependency** - libsqlite3\n* **C++ standard code style**\n* **In memory database support** - provide `:memory:` or empty filename\n* **COLLATE support**\n* **Limits setting/getting support**\n* **User defined functions support**\n\n`sqlite_orm` library allows to create easy data model mappings to your database schema. It is built to manage (CRUD) objects with a primary key and without it. It also allows you to specify table names and column names explicitly no matter how your classes actually named. Take a look at example:\n\n```c++\n\nstruct User{\n    int id;\n    std::string firstName;\n    std::string lastName;\n    int birthDate;\n    std::unique_ptr<std::string> imageUrl;\n    int typeId;\n};\n\nstruct UserType {\n    int id;\n    std::string name;\n};\n\n```\n\nSo we have database with predefined schema like \n\n`CREATE TABLE users (id integer primary key autoincrement, first_name text not null, last_name text not null, birth_date integer not null, image_url text, type_id integer not null)`\n\n`CREATE TABLE user_types (id integer primary key autoincrement, name text not null DEFAULT 'name_placeholder')`\n\nNow we tell `sqlite_orm` library about our schema and provide database filename. We create `storage` service object that has CRUD interface. Also we create every table and every column. All code is intuitive and minimalistic.\n\n```c++\n\nusing namespace sqlite_orm;\nauto storage = make_storage(\"db.sqlite\",\n                            make_table(\"users\",\n                                       make_column(\"id\", &User::id, primary_key().autoincrement()),\n                                       make_column(\"first_name\", &User::firstName),\n                                       make_column(\"last_name\", &User::lastName),\n                                       make_column(\"birth_date\", &User::birthDate),\n                                       make_column(\"image_url\", &User::imageUrl),\n                                       make_column(\"type_id\", &User::typeId)),\n                            make_table(\"user_types\",\n                                       make_column(\"id\", &UserType::id, primary_key().autoincrement()),\n                                       make_column(\"name\", &UserType::name, default_value(\"name_placeholder\"))));\n```\n\nToo easy isn't it? You do not have to specify mapped type explicitly - it is deduced from your member pointers you pass during making a column (for example: `&User::id`). To create a column you have to pass two arguments at least: its name in the table and your mapped class member pointer. You can also add extra arguments to tell your storage about column's constraints like `primary_key`, `autoincrement`, `default_value`, `unique` or `generated_always_as` (order isn't important; `not_null`/`null` are deduced from type automatically but can be added manually if you wish with `null()` and `not_null()`).\n\nMore details about making storage can be found in [tutorial](https://github.com/fnc12/sqlite_orm/wiki/Making-a-storage).\n\nIf your datamodel classes have private or protected members to map to sqlite then you can make a storage with setter and getter functions. More info in the [example](https://github.com/fnc12/sqlite_orm/blob/master/examples/private_class_members.cpp).\n\n# CRUD\n\nLet's create and insert new `User` into our database. First we need to create a `User` object with any id and call `insert` function. It will return id of just created user or throw exception if something goes wrong.\n\n```c++\nUser user{-1, \"Jonh\", \"Doe\", 664416000, std::make_unique<std::string>(\"url_to_heaven\"), 3 };\n    \nauto insertedId = storage.insert(user);\ncout << \"insertedId = \" << insertedId << endl;      //  insertedId = 8\nuser.id = insertedId;\n\nUser secondUser{-1, \"Alice\", \"Inwonder\", 831168000, {} , 2};\ninsertedId = storage.insert(secondUser);\nsecondUser.id = insertedId;\n\n```\n\nNote: if we need to insert a new user with specified id call `storage.replace(user);` instead of `insert`.\n\nNext let's get our user by id.\n\n```c++\ntry{\n    auto user = storage.get<User>(insertedId);\n    cout << \"user = \" << user.firstName << \" \" << user.lastName << endl;\n}catch(std::system_error e) {\n    cout << e.what() << endl;\n}catch(...){\n    cout << \"unknown exeption\" << endl;\n}\n```\n\nProbably you may not like throwing exceptions. Me too. Exception `std::system_error` is thrown because return type in `get` function is not nullable. You can use alternative version `get_pointer` which returns `std::unique_ptr` and doesn't throw `not_found_exception` if nothing found - just returns `nullptr`.\n\n```c++\nif(auto user = storage.get_pointer<User>(insertedId)){\n    cout << \"user = \" << user->firstName << \" \" << user->lastName << endl;\n}else{\n    cout << \"no user with id \" << insertedId << endl;\n}\n```\n\n`std::unique_ptr` is used as optional in `sqlite_orm`. Of course there is class optional in C++14 located at `std::experimental::optional`. But we don't want to use it until it is `experimental`.\n\nWe can also update our user. It updates row by id provided in `user` object and sets all other non `primary_key` fields to values stored in the passed `user` object. So you can just assign members to `user` object you want and call `update`\n\n```c++\nuser.firstName = \"Nicholas\";\nuser.imageUrl = \"https://cdn1.iconfinder.com/data/icons/man-icon-set/100/man_icon-21-512.png\"\nstorage.update(user);\n```\n\nAlso there is a non-CRUD update version `update_all`:\n\n```c++\nstorage.update_all(set(c(&User::lastName) = \"Hardey\",\n                       c(&User::typeId) = 2),\n                   where(c(&User::firstName) == \"Tom\"));\n```\n\nAnd delete. To delete you have to pass id only, not whole object. Also we need to explicitly tell which class of object we want to delete. Function name is `remove` not `delete` cause `delete` is a reserved word in C++.\n\n```c++\nstorage.remove<User>(insertedId)\n```\n\nAlso we can extract all objects into `std::vector`.\n\n```c++\nauto allUsers = storage.get_all<User>();\ncout << \"allUsers (\" << allUsers.size() << \"):\" << endl;\nfor(auto &user : allUsers) {\n    cout << storage.dump(user) << endl; //  dump returns std::string with json-like style object info. For example: { id : '1', first_name : 'Jonh', last_name : 'Doe', birth_date : '664416000', image_url : 'https://cdn1.iconfinder.com/data/icons/man-icon-set/100/man_icon-21-512.png', type_id : '3' }\n}\n```\n\nAnd one can specify return container type explicitly: let's get all users in `std::list`, not `std::vector`:\n\n```c++\nauto allUsersList = storage.get_all<User, std::list<User>>();\n```\n\nContainer must be STL compatible (must have `push_back(T&&)` function in this case).\n\n`get_all` can be too heavy for memory so you can iterate row by row (i.e. object by object):\n\n```c++\nfor(auto &user : storage.iterate<User>()) {\n    cout << storage.dump(user) << endl;\n}\n```\n\n`iterate` member function returns adapter object that has `begin` and `end` member functions returning iterators that fetch object on dereference operator call.\n\nCRUD functions `get`, `get_pointer`, `remove`, `update` (not `insert`) work only if your type has a primary key column. If you try to `get` an object that is mapped to your storage but has no primary key column a `std::system_error` will be thrown cause `sqlite_orm` cannot detect an id. If you want to know how to perform a storage without primary key take a look at `date_time.cpp` example in `examples` folder.\n\n# Prepared statements\n\nPrepared statements are strongly typed.\n\n```c++\n//  SELECT doctor_id\n//  FROM visits\n//  WHERE LENGTH(patient_name) > 8\nauto selectStatement = storage.prepare(select(&Visit::doctor_id, where(length(&Visit::patient_name) > 8)));\ncout << \"selectStatement = \" << selectStatement.sql() << endl;  //  prints \"SELECT doctor_id FROM ...\"\nauto rows = storage.execute(selectStatement); //  rows is std::vector<decltype(Visit::doctor_id)>\n\n//  SELECT doctor_id\n//  FROM visits\n//  WHERE LENGTH(patient_name) > 11\nget<0>(selectStatement) = 11;\nauto rows2 = storage.execute(selectStatement);\n```\n`get<N>(statement)` function call allows you to access fields to bind them to your statement.\n\n# Aggregate Functions\n\n```c++\n//  SELECT AVG(id) FROM users\nauto averageId = storage.avg(&User::id);    \ncout << \"averageId = \" << averageId << endl;        //  averageId = 4.5\n    \n//  SELECT AVG(birth_date) FROM users\nauto averageBirthDate = storage.avg(&User::birthDate);  \ncout << \"averageBirthDate = \" << averageBirthDate << endl;      //  averageBirthDate = 6.64416e+08\n  \n//  SELECT COUNT(*) FROM users\nauto usersCount = storage.count<User>();    \ncout << \"users count = \" << usersCount << endl;     //  users count = 8\n\n//  SELECT COUNT(id) FROM users\nauto countId = storage.count(&User::id);    \ncout << \"countId = \" << countId << endl;        //  countId = 8\n\n//  SELECT COUNT(image_url) FROM users\nauto countImageUrl = storage.count(&User::imageUrl);   \ncout << \"countImageUrl = \" << countImageUrl << endl;      //  countImageUrl = 5\n\n//  SELECT GROUP_CONCAT(id) FROM users\nauto concatedUserId = storage.group_concat(&User::id);      \ncout << \"concatedUserId = \" << concatedUserId << endl;      //  concatedUserId = 1,2,3,4,5,6,7,8\n\n//  SELECT GROUP_CONCAT(id, \"---\") FROM users\nauto concatedUserIdWithDashes = storage.group_concat(&User::id, \"---\");     \ncout << \"concatedUserIdWithDashes = \" << concatedUserIdWithDashes << endl;      //  concatedUserIdWithDashes = 1---2---3---4---5---6---7---8\n\n//  SELECT MAX(id) FROM users\nif(auto maxId = storage.max(&User::id)){    \n    cout << \"maxId = \" << *maxId <<endl;    //  maxId = 12  (maxId is std::unique_ptr<int>)\n}else{\n    cout << \"maxId is null\" << endl;\n}\n    \n//  SELECT MAX(first_name) FROM users\nif(auto maxFirstName = storage.max(&User::firstName)){ \n    cout << \"maxFirstName = \" << *maxFirstName << endl; //  maxFirstName = Jonh (maxFirstName is std::unique_ptr<std::string>)\n}else{\n    cout << \"maxFirstName is null\" << endl;\n}\n\n//  SELECT MIN(id) FROM users\nif(auto minId = storage.min(&User::id)){    \n    cout << \"minId = \" << *minId << endl;   //  minId = 1 (minId is std::unique_ptr<int>)\n}else{\n    cout << \"minId is null\" << endl;\n}\n\n//  SELECT MIN(last_name) FROM users\nif(auto minLastName = storage.min(&User::lastName)){\n    cout << \"minLastName = \" << *minLastName << endl;   //  minLastName = Doe\n}else{\n    cout << \"minLastName is null\" << endl;\n}\n\n//  SELECT SUM(id) FROM users\nif(auto sumId = storage.sum(&User::id)){    //  sumId is std::unique_ptr<int>\n    cout << \"sumId = \" << *sumId << endl;\n}else{\n    cout << \"sumId is null\" << endl;\n}\n\n//  SELECT TOTAL(id) FROM users\nauto totalId = storage.total(&User::id);\ncout << \"totalId = \" << totalId << endl;    //  totalId is double (always)\n```\n\n# Where conditions\n\nYou also can select objects with custom where conditions with `=`, `!=`, `>`, `>=`, `<`, `<=`, `IN`, `BETWEEN` and `LIKE`.\n\nFor example: let's select users with id lesser than 10:\n\n```c++\n//  SELECT * FROM users WHERE id < 10\nauto idLesserThan10 = storage.get_all<User>(where(c(&User::id) < 10));\ncout << \"idLesserThan10 count = \" << idLesserThan10.size() << endl;\nfor(auto &user : idLesserThan10) {\n    cout << storage.dump(user) << endl;\n}\n```\n\nOr select all users who's first name is not equal \"John\":\n\n```c++\n//  SELECT * FROM users WHERE first_name != 'John'\nauto notJohn = storage.get_all<User>(where(c(&User::firstName) != \"John\"));\ncout << \"notJohn count = \" << notJohn.size() << endl;\nfor(auto &user : notJohn) {\n    cout << storage.dump(user) << endl;\n}\n```\n\nBy the way one can implement not equal in a different way using C++ negation operator:\n\n```c++\nauto notJohn2 = storage.get_all<User>(where(not (c(&User::firstName) == \"John\")));\n```\n\nYou can use `!` and `not` in this case cause they are equal. Also you can chain several conditions with `and` and `or` operators. Let's try to get users with query with conditions like `where id >= 5 and id <= 7 and not id = 6`:\n\n```c++\nauto id5and7 = storage.get_all<User>(where(c(&User::id) <= 7 and c(&User::id) >= 5 and not (c(&User::id) == 6)));\ncout << \"id5and7 count = \" << id5and7.size() << endl;\nfor(auto &user : id5and7) {\n    cout << storage.dump(user) << endl;\n}\n```\n\nOr let's just export two users with id 10 or id 16 (of course if these users exist):\n\n```c++\nauto id10or16 = storage.get_all<User>(where(c(&User::id) == 10 or c(&User::id) == 16));\ncout << \"id10or16 count = \" << id10or16.size() << endl;\nfor(auto &user : id10or16) {\n    cout << storage.dump(user) << endl;\n}\n```\n\nIn fact you can chain together any number of different conditions with any operator from `and`, `or` and `not`. All conditions are templated so there is no runtime overhead. And this makes `sqlite_orm` the most powerful **sqlite** C++ ORM library!\n\nMoreover you can use parentheses to set the priority of query conditions:\n\n```c++\nauto cuteConditions = storage.get_all<User>(where((c(&User::firstName) == \"John\" or c(&User::firstName) == \"Alex\") and c(&User::id) == 4));  //  where (first_name = 'John' or first_name = 'Alex') and id = 4\ncout << \"cuteConditions count = \" << cuteConditions.size() << endl; //  cuteConditions count = 1\ncuteConditions = storage.get_all<User>(where(c(&User::firstName) == \"John\" or (c(&User::firstName) == \"Alex\" and c(&User::id) == 4)));   //  where first_name = 'John' or (first_name = 'Alex' and id = 4)\ncout << \"cuteConditions count = \" << cuteConditions.size() << endl; //  cuteConditions count = 2\n```\n\nAlso we can implement `get` by id with `get_all` and `where` like this:\n\n```c++\n//  SELECT * FROM users WHERE ( 2 = id )\nauto idEquals2 = storage.get_all<User>(where(2 == c(&User::id)));\ncout << \"idEquals2 count = \" << idEquals2.size() << endl;\nif(idEquals2.size()){\n    cout << storage.dump(idEquals2.front()) << endl;\n}else{\n    cout << \"user with id 2 doesn't exist\" << endl;\n}\n```\n\nLets try the `IN` operator:\n\n```c++\n//  SELECT * FROM users WHERE id IN (2, 4, 6, 8, 10)\nauto evenLesserTen10 = storage.get_all<User>(where(in(&User::id, {2, 4, 6, 8, 10})));\ncout << \"evenLesserTen10 count = \" << evenLesserTen10.size() << endl;\nfor(auto &user : evenLesserTen10) {\n    cout << storage.dump(user) << endl;\n}\n\n//  SELECT * FROM users WHERE last_name IN (\"Doe\", \"White\")\nauto doesAndWhites = storage.get_all<User>(where(in(&User::lastName, {\"Doe\", \"White\"})));\ncout << \"doesAndWhites count = \" << doesAndWhites.size() << endl;\nfor(auto &user : doesAndWhites) {\n    cout << storage.dump(user) << endl;\n}\n```\n\nAnd `BETWEEN`:\n\n```c++\n//  SELECT * FROM users WHERE id BETWEEN 66 AND 68\nauto betweenId = storage.get_all<User>(where(between(&User::id, 66, 68)));\ncout << \"betweenId = \" << betweenId.size() << endl;\nfor(auto &user : betweenId) {\n    cout << storage.dump(user) << endl;\n}\n```\n\nAnd even `LIKE`:\n\n```c++\n//  SELECT * FROM users WHERE last_name LIKE 'D%'\nauto whereNameLike = storage.get_all<User>(where(like(&User::lastName, \"D%\")));\ncout << \"whereNameLike = \" << whereNameLike.size() << endl;\nfor(auto &user : whereNameLike) {\n    cout << storage.dump(user) << endl;\n}\n```\n\nLooks like magic but it works very simple. Cute function `c` (column) takes a class member pointer and returns a special expression middle object that can be used with operators overloaded in `::sqlite_orm` namespace. Operator overloads act just like functions\n\n* is_equal\n* is_not_equal\n* greater_than\n* greater_or_equal\n* lesser_than\n* lesser_or_equal\n* is_null\n* is_not_null\n\nthat simulate binary comparison operator so they take 2 arguments: left hand side and right hand side. Arguments may be either member pointer of mapped class or any other expression (core/aggregate function, literal or subexpression). Binary comparison functions map arguments to text to be passed to sqlite engine to process query. Member pointers are being mapped to column names and literals/variables/constants to '?' and then are bound automatically. Next `where` function places brackets around condition and adds \"WHERE\" keyword before condition text. Next resulted string appends to a query string and is being processed further.\n\nIf you omit `where` function in `get_all` it will return all objects from a table:\n\n```c++\nauto allUsers = storage.get_all<User>();\n```\n\nAlso you can use `remove_all` function to perform `DELETE FROM ... WHERE` query with the same type of conditions.\n\n```c++\nstorage.remove_all<User>(where(c(&User::id) < 100));\n```\n\n# Raw select\n\nIf you need to extract only a single column (`SELECT %column_name% FROM %table_name% WHERE %conditions%`) you can use a non-CRUD `select` function:\n\n```c++\n\n//  SELECT id FROM users\nauto allIds = storage.select(&User::id);    \ncout << \"allIds count = \" << allIds.size() << endl; //  allIds is std::vector<int>\nfor(auto &id : allIds) {\n    cout << id << \" \";\n}\ncout << endl;\n\n//  SELECT id FROM users WHERE last_name = 'Doe'\nauto doeIds = storage.select(&User::id, where(c(&User::lastName) == \"Doe\"));\ncout << \"doeIds count = \" << doeIds.size() << endl; //  doeIds is std::vector<int>\nfor(auto &doeId : doeIds) {\n    cout << doeId << \" \";\n}\ncout << endl;\n\n//  SELECT last_name FROM users WHERE id < 300\nauto allLastNames = storage.select(&User::lastName, where(c(&User::id) < 300));    \ncout << \"allLastNames count = \" << allLastNames.size() << endl; //  allLastNames is std::vector<std::string>\nfor(auto &lastName : allLastNames) {\n    cout << lastName << \" \";\n}\ncout << endl;\n\n//  SELECT id FROM users WHERE image_url IS NULL\nauto idsWithoutUrls = storage.select(&User::id, where(is_null(&User::imageUrl)));\nfor(auto id : idsWithoutUrls) {\n    cout << \"id without image url \" << id << endl;\n}\n\n//  SELECT id FROM users WHERE image_url IS NOT NULL\nauto idsWithUrl = storage.select(&User::id, where(is_not_null(&User::imageUrl)));\nfor(auto id : idsWithUrl) {\n    cout << \"id with image url \" << id << endl;\n}\nauto idsWithUrl2 = storage.select(&User::id, where(not is_null(&User::imageUrl)));\nassert(std::equal(idsWithUrl2.begin(),\n                  idsWithUrl2.end(),\n                  idsWithUrl.begin()));\n```\n\nAlso you're able to select several column in a vector of tuples. Example:\n\n```c++\n//  `SELECT first_name, last_name FROM users WHERE id > 250 ORDER BY id`\nauto partialSelect = storage.select(columns(&User::firstName, &User::lastName),\n                                    where(c(&User::id) > 250),\n                                    order_by(&User::id));\ncout << \"partialSelect count = \" << partialSelect.size() << endl;\nfor(auto &t : partialSelect) {\n    auto &firstName = std::get<0>(t);\n    auto &lastName = std::get<1>(t);\n    cout << firstName << \" \" << lastName << endl;\n}\n```\n\n# ORDER BY support\n\nORDER BY query option can be applied to `get_all` and `select` functions just like `where` but with `order_by` function. It can be mixed with WHERE in a single query. Examples:\n\n```c++\n//  `SELECT * FROM users ORDER BY id`\nauto orderedUsers = storage.get_all<User>(order_by(&User::id));\ncout << \"orderedUsers count = \" << orderedUsers.size() << endl;\nfor(auto &user : orderedUsers) {\n    cout << storage.dump(user) << endl;\n}\n\n//  `SELECT * FROM users WHERE id < 250 ORDER BY first_name`\nauto orderedUsers2 = storage.get_all<User>(where(c(&User::id) < 250), order_by(&User::firstName));\ncout << \"orderedUsers2 count = \" << orderedUsers2.size() << endl;\nfor(auto &user : orderedUsers2) {\n    cout << storage.dump(user) << endl;\n}\n\n//  `SELECT * FROM users WHERE id > 100 ORDER BY first_name ASC`\nauto orderedUsers3 = storage.get_all<User>(where(c(&User::id) > 100), order_by(&User::firstName).asc());\ncout << \"orderedUsers3 count = \" << orderedUsers3.size() << endl;\nfor(auto &user : orderedUsers3) {\n    cout << storage.dump(user) << endl;\n}\n\n//  `SELECT * FROM users ORDER BY id DESC`\nauto orderedUsers4 = storage.get_all<User>(order_by(&User::id).desc());\ncout << \"orderedUsers4 count = \" << orderedUsers4.size() << endl;\nfor(auto &user : orderedUsers4) {\n    cout << storage.dump(user) << endl;\n}\n\n//  `SELECT first_name FROM users ORDER BY ID DESC`\nauto orderedFirstNames = storage.select(&User::firstName, order_by(&User::id).desc());\ncout << \"orderedFirstNames count = \" << orderedFirstNames.size() << endl;\nfor(auto &firstName : orderedFirstNames) {\n    cout << \"firstName = \" << firstName << endl;\n}\n```\n\n# LIMIT and OFFSET\n\nThere are three available versions of `LIMIT`/`OFFSET` options:\n\n- LIMIT %limit%\n- LIMIT %limit% OFFSET %offset%\n- LIMIT %offset%, %limit%\n\nAll these versions available with the same interface:\n\n```c++\n//  `SELECT * FROM users WHERE id > 250 ORDER BY id LIMIT 5`\nauto limited5 = storage.get_all<User>(where(c(&User::id) > 250),\n                                      order_by(&User::id),\n                                      limit(5));\ncout << \"limited5 count = \" << limited5.size() << endl;\nfor(auto &user : limited5) {\n    cout << storage.dump(user) << endl;\n}\n\n//  `SELECT * FROM users WHERE id > 250 ORDER BY id LIMIT 5, 10`\nauto limited5comma10 = storage.get_all<User>(where(c(&User::id) > 250),\n                                             order_by(&User::id),\n                                             limit(5, 10));\ncout << \"limited5comma10 count = \" << limited5comma10.size() << endl;\nfor(auto &user : limited5comma10) {\n    cout << storage.dump(user) << endl;\n}\n\n//  `SELECT * FROM users WHERE id > 250 ORDER BY id LIMIT 5 OFFSET 10`\nauto limit5offset10 = storage.get_all<User>(where(c(&User::id) > 250),\n                                            order_by(&User::id),\n                                            limit(5, offset(10)));\ncout << \"limit5offset10 count = \" << limit5offset10.size() << endl;\nfor(auto &user : limit5offset10) {\n    cout << storage.dump(user) << endl;\n}\n```\n\nPlease beware that queries `LIMIT 5, 10` and `LIMIT 5 OFFSET 10` mean different. `LIMIT 5, 10` means `LIMIT 10 OFFSET 5`.\n\n# JOIN support\n\nYou can perform simple `JOIN`, `CROSS JOIN`, `INNER JOIN`, `LEFT JOIN` or `LEFT OUTER JOIN` in your query. Instead of joined table specify mapped type. Example for doctors and visits:\n\n```c++\n//  SELECT a.doctor_id, a.doctor_name,\n//      c.patient_name, c.vdate\n//  FROM doctors a\n//  LEFT JOIN visits c\n//  ON a.doctor_id=c.doctor_id;\nauto rows = storage2.select(columns(&Doctor::id, &Doctor::name, &Visit::patientName, &Visit::vdate),\n                            left_join<Visit>(on(c(&Doctor::id) == &Visit::doctorId)));  //  one `c` call is enough cause operator overloads are templated\nfor(auto &row : rows) {\n    cout << std::get<0>(row) << '\\t' << std::get<1>(row) << '\\t' << std::get<2>(row) << '\\t' << std::get<3>(row) << endl;\n}\ncout << endl;\n```\n\nSimple `JOIN`:\n\n```c++\n//  SELECT a.doctor_id,a.doctor_name,\n//      c.patient_name,c.vdate\n//  FROM doctors a\n//  JOIN visits c\n//  ON a.doctor_id=c.doctor_id;\nrows = storage2.select(columns(&Doctor::id, &Doctor::name, &Visit::patientName, &Visit::vdate),\n                       join<Visit>(on(c(&Doctor::id) == &Visit::doctorId)));\nfor(auto &row : rows) {\n    cout << std::get<0>(row) << '\\t' << std::get<1>(row) << '\\t' << std::get<2>(row) << '\\t' << std::get<3>(row) << endl;\n}\ncout << endl;\n```\n\nTwo `INNER JOIN`s in one query:\n\n```c++\n//  SELECT\n//      trackid,\n//      tracks.name AS Track,\n//      albums.title AS Album,\n//      artists.name AS Artist\n//  FROM\n//      tracks\n//  INNER JOIN albums ON albums.albumid = tracks.albumid\n//  INNER JOIN artists ON artists.artistid = albums.artistid;\nauto innerJoinRows2 = storage.select(columns(&Track::trackId, &Track::name, &Album::title, &Artist::name),\n                                     inner_join<Album>(on(c(&Album::albumId) == &Track::albumId)),\n                                     inner_join<Artist>(on(c(&Artist::artistId) == &Album::artistId)));\n//  innerJoinRows2 is std::vector<std::tuple<decltype(Track::trackId), decltype(Track::name), decltype(Album::title), decltype(Artist::name)>>\n```\n\nMore join examples can be found in [examples folder](https://github.com/fnc12/sqlite_orm/blob/master/examples/left_and_inner_join.cpp).\n\n# Migrations functionality\n\nThere are no explicit `up` and `down` functions that are used to be used in migrations. Instead `sqlite_orm` offers `sync_schema` function that takes responsibility of comparing actual db file schema with one you specified in `make_storage` call and if something is not equal it alters or drops/creates schema.\n\n```c++\nstorage.sync_schema();\n//  or\nstorage.sync_schema(true);\n```\n\nPlease beware that `sync_schema` doesn't guarantee that data will be saved. It *tries* to save it only. Below you can see rules list that `sync_schema` follows during call:\n* if there are excess tables exist in db they are ignored (not dropped)\n* every table from storage is compared with it's db analog and \n    * if table doesn't exist it is created\n    * if table exists its colums are being compared with table_info from db and\n        * if there are columns in db that do not exist in storage (excess) table will be dropped and recreated if `preserve` is `false`, and table will be copied into temporary table without excess columns, source table will be dropped, copied table will be renamed to source table (sqlite remove column technique) if `preserve` is `true`. `preserve` is the first argument in `sync_schema` function. It's default value is `false`. Beware that setting it to `true` may take time for copying table rows.\n        * if there are columns in storage that do not exist in db they will be added using 'ALTER TABLE ... ADD COLUMN ...' command and table data will not be dropped but if any of added columns is null but has not default value table will be dropped and recreated\n        * if there is any column existing in both db and storage but differs by any of properties (type, pk, notnull) table will be dropped and recreated (dflt_value isn't checked cause there can be ambiguity in default values, please beware).\n\nThe best practice is to call this function right after storage creation.\n\n# Transactions\n\nThere are three ways to begin and commit/rollback transactions:\n* explicitly call `begin_transaction();`, `rollback();` or `commit();` functions\n* use `transaction` function which begins transaction implicitly and takes a lambda argument which returns true for commit and false for rollback. All storage calls performed in lambda can be commited or rollbacked by returning `true` or `false`.\n* use `transaction_guard` function which returns a guard object which works just like `lock_guard` for `std::mutex`.\n\nExample for explicit call:\n\n```c++\nauto secondUser = storage.get<User>(2);\n\nstorage.begin_transaction();\nsecondUser.typeId = 3;\nstorage.update(secondUser);\nstorage.rollback(); //  or storage.commit();\n\nsecondUser = storage.get<decltype(secondUser)>(secondUser.id);\nassert(secondUser.typeId != 3);\n```\n\nExample for implicit call:\n\n```c++\nstorage.transaction([&] () mutable {    //  mutable keyword allows make non-const function calls\n    auto secondUser = storage.get<User>(2);\n    secondUser.typeId = 1;\n    storage.update(secondUser);\n    auto gottaRollback = bool(rand() % 2);\n    if(gottaRollback){  //  dummy condition for test\n        return false;   //  exits lambda and calls ROLLBACK\n    }\n    return true;        //  exits lambda and calls COMMIT\n});\n```\n\nThe second way guarantees that `commit` or `rollback` will be called. You can use either way.\n\nTransactions are useful with `changes` sqlite function that returns number of rows modified.\n\n```c++\nstorage.transaction([&] () mutable {\n    storage.remove_all<User>(where(c(&User::id) < 100));\n    auto usersRemoved = storage.changes();\n    cout << \"usersRemoved = \" << usersRemoved << endl;\n    return true;\n});\n```\n\nIt will print a number of deleted users (rows). But if you call `changes` without a transaction and your database is located in file not in RAM the result will be 0 always cause `sqlite_orm` opens and closes connection every time you call a function without a transaction.\n\nAlso a `transaction` function returns `true` if transaction is commited and `false` if it is rollbacked. It can be useful if your next actions depend on transaction result:\n\n```c++\nauto commited = storage.transaction([&] () mutable {    \n    auto secondUser = storage.get<User>(2);\n    secondUser.typeId = 1;\n    storage.update(secondUser);\n    auto gottaRollback = bool(rand() % 2);\n    if(gottaRollback){  //  dummy condition for test\n        return false;   //  exits lambda and calls ROLLBACK\n    }\n    return true;        //  exits lambda and calls COMMIT\n});\nif(commited){\n    cout << \"Commited successfully, go on.\" << endl;\n}else{\n    cerr << \"Commit failed, process an error\" << endl;\n}\n```\n\nExample for `transaction_guard` function:\n\n```c++\ntry{\n  auto guard = storage.transaction_guard(); //  calls BEGIN TRANSACTION and returns guard object\n  user.name = \"Paul\";\n  auto notExisting = storage.get<User>(-1); //  exception is thrown here, guard calls ROLLBACK in its destructor\n  guard.commit();\n}catch(...){\n  cerr << \"exception\" << endl;\n}\n```\n\n# In memory database\n\nTo manage in memory database just provide `:memory:` or `\"\"` instead as filename to `make_storage`.\n\n# Comparison with other C++ libs\n\n|   |sqlite_orm|[SQLiteCpp](https://github.com/SRombauts/SQLiteCpp)|[hiberlite](https://github.com/paulftw/hiberlite)|[ODB](https://www.codesynthesis.com/products/odb/)|\n|---|:---:|:---:|:---:|:---:|\n|Schema sync|yes|no|yes|no|\n|Single responsibility principle|yes|yes|no|no|\n|STL compatible|yes|no|no|no|\n|No raw string queries|yes|no|yes|yes|\n|Transactions|yes|yes|no|yes|\n|Custom types binding|yes|no|yes|yes|\n|Doesn't use macros and/or external codegen scripts|yes|yes|no|no|\n|Aggregate functions|yes|yes|no|yes|\n|Prepared statements|yes|yes|no|no|\n\n# Notes\n\nTo work well your data model class must be default constructable and must not have const fields mapped to database cause they are assigned during queries. Otherwise code won't compile on line with member assignment operator.\n\nFor more details please check the project [wiki](https://github.com/fnc12/sqlite_orm/wiki).\n\n# Installation\n\n**Note**: Installation is not necessary if you plan to use the fetchContent method, see below in Usage.\n\nUse a popular package manager like [vcpkg](https://github.com/Microsoft/vcpkg) and just install it with the `vcpkg install sqlite-orm` command.\n\nOr you build it from source:\n\n```bash\ngit clone https://github.com/fnc12/sqlite_orm.git sqlite_orm\ncd sqlite_orm\ncmake -B build\ncmake --build build --target install\n```\nYou might need admin rights for the last command.\n\n# Usage\n\n## CMake\n\nIf you use cmake, there are two supported ways how to use it with cmake (if another works as well or should be supported, open an issue). \n\nEither way you choose, the include path as well as the dependency sqlite3 will be set automatically on your target. So usage is straight forward, but you need to have installed sqlite3 on your system (see Requirements below)\n\n## Find Package\n\nIf you have installed the lib system wide and it's in your PATH, you can use find_package to include it in cmake. It will make a target `sqlite_orm::sqlite_orm` available which you can link against. Have a look at examples/find_package for a full example.\n\n```cmake\nfind_package(SqliteOrm REQUIRED)\n\ntarget_link_libraries(main PRIVATE sqlite_orm::sqlite_orm)\n```\n\n## Fetch Content (Recommended)\n\nAlternatively, cmake can download the project directly from github during configure stage and therefore you don't need to install the lib before.\nAgaint a target `sqlite_orm::sqlite_orm` will be available which you can link against. Have a look at examples/fetch_content for a full example.\n\n## No CMake\n\nIf you want to use the lib directly with Make or something else, just set the inlcude path correctly (should be correct on Linux already), so `sqlite_orm/sqlite_orm.h` is found. As this is a header only lib, there is nothing more you have to do.\n\n# Requirements\n\n* C++14 compatible compiler (not C++11 cause of templated lambdas in the lib).\n* Sqlite3 installed on your system and in the path, so cmake can find it (or linked to you project if you don't use cmake)\n\n# Video from conference\n\n[![Video from conference](https://img.youtube.com/vi/ngsilquWgpo/0.jpg)](https://www.youtube.com/watch?v=ngsilquWgpo)\n\n# SqliteMan\n\nIn case you need a native SQLite client for macOS or Windows 10 you can use SqliteMan https://sqliteman.dev. It is not a commercial. It is a free native client being developed by the maintainer of this repo.\n"
        },
        {
          "name": "TODO.md",
          "type": "blob",
          "size": 1.6728515625,
          "content": "# To do list\r\n\r\n`sqlite_orm` is a wonderful library but there are still features that are not implemented. Here you can find a list of them:\r\n\r\n* `FOREIGN KEY` - sync_schema fk comparison and ability of two tables to have fk to each other (`PRAGMA foreign_key_list(%table_name%);` may be useful)\r\n* rest of core functions(https://sqlite.org/lang_corefunc.html)\r\n* `ATTACH`\r\n* blob incremental I/O https://sqlite.org/c3ref/blob_open.html\r\n* CREATE VIEW and other view operations https://sqlite.org/lang_createview.html\r\n* query static check for correct order (e.g. `GROUP BY` after `WHERE`)\r\n* `WINDOW`\r\n* `SAVEPOINT` https://www.sqlite.org/lang_savepoint.html\r\n* add `static_assert` in crud `get*` functions in case user passes `where_t` instead of id to make compilation error more clear (example https://github.com/fnc12/sqlite_orm/issues/485)\r\n* named constraints: constraint can have name `CREATE TABLE heroes(id INTEGER CONSTRAINT pk PRIMARY KEY)`\r\n* `FILTER` clause https://sqlite.org/lang_aggfunc.html#aggfilter\r\n* scalar math functions https://sqlite.org/lang_mathfunc.html\r\n* improve DROP COLUMN in `sync_schema` https://sqlite.org/lang_altertable.html#altertabdropcol\r\n* `UPDATE FROM` support https://sqlite.org/lang_update.html#upfrom\r\n* `iif()` function https://sqlite.org/lang_corefunc.html#iif\r\n* add strong typed collate syntax (more info [here](https://github.com/fnc12/sqlite_orm/issues/767#issuecomment-887689672))\r\n* strict tables https://sqlite.org/stricttables.html\r\n* static assert when UPDATE is called with no PKs\r\n* `json_each` and `json_tree` functions for JSON1 extension\r\n* update hook\r\n* `RAISE`\r\n\r\nPlease feel free to add any feature that isn't listed here and not implemented yet.\r\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.0263671875,
          "content": "theme: jekyll-theme-minimal"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 5.806640625,
          "content": "# build format\nversion: \"{build}\"\n\nskip_branch_with_pr: true\nskip_commits:\n  files:\n  - .git*\n  - .travis.yml\n  - _config.yml\n  - LICENSE\n  - '*.md'\n  - '*.png'\n  - '*.sh'\n\n# configurations to add to build matrix\nconfiguration:\n  #- Debug\n  - Release\n\nenvironment:\n  appveyor_yml_disable_ps_linux: true\n  matrix:\n    - job_name: clang, C++14\n      appveyor_build_worker_image: Ubuntu\n      CC: clang\n      CXX: clang++\n      SQLITE_ORM_CXX_STANDARD: \"-DSQLITE_ORM_ENABLE_CXX_14=ON\"\n      cmake_build_parallel: --parallel\n\n    - job_name: gcc, C++14\n      appveyor_build_worker_image: Ubuntu\n      CC: gcc\n      CXX: g++\n      SQLITE_ORM_CXX_STANDARD: \"-DSQLITE_ORM_ENABLE_CXX_14=ON\"\n      # gcc was stuck with a parallel build\n      cmake_build_parallel: \"\"\n\n    # Representative for C++14\n    - job_name: Visual Studio 2017, x64, C++14\n      appveyor_build_worker_image: Visual Studio 2017\n      platform: x64\n      SQLITE_ORM_CXX_STANDARD: \"\"\n\n    - job_name: clang, C++17\n      appveyor_build_worker_image: Ubuntu\n      CC: clang\n      CXX: clang++\n      SQLITE_ORM_CXX_STANDARD: \"-DSQLITE_ORM_ENABLE_CXX_17=ON\"\n      # clang was stuck with a parallel build\n      cmake_build_parallel: \"\"\n\n    - job_name: gcc, C++17\n      appveyor_build_worker_image: Ubuntu\n      CC: gcc\n      CXX: g++\n      SQLITE_ORM_CXX_STANDARD: \"-DSQLITE_ORM_ENABLE_CXX_17=ON\"\n      cmake_build_parallel: \"\"\n\n    - job_name: clang, C++20 (with examples)\n      appveyor_build_worker_image: Ubuntu\n      CC: clang\n      CXX: clang++\n      SQLITE_ORM_CXX_STANDARD: \"-DSQLITE_ORM_ENABLE_CXX_20=ON\"\n      # clang was stuck with a parallel build of examples\n      cmake_build_parallel: \"\"\n      cmake_build_examples: \"-DBUILD_EXAMPLES=ON\"\n\n    - job_name: gcc, C++20\n      appveyor_build_worker_image: Ubuntu\n      CC: gcc\n      CXX: g++\n      SQLITE_ORM_CXX_STANDARD: \"-DSQLITE_ORM_ENABLE_CXX_20=ON\"\n      cmake_build_parallel: \"\"\n\n    - job_name: Visual Studio 2022, x64, C++17\n      appveyor_build_worker_image: Visual Studio 2022\n      platform: x64\n      SQLITE_ORM_CXX_STANDARD: \"-DSQLITE_ORM_ENABLE_CXX_17=ON\"\n\n    - job_name: Visual Studio 2022, x64, C++20\n      appveyor_build_worker_image: Visual Studio 2022\n      platform: x64\n      SQLITE_ORM_CXX_STANDARD: \"-DSQLITE_ORM_ENABLE_CXX_20=ON\"\n\n    - job_name: Visual Studio 2022, x86, C++20\n      appveyor_build_worker_image: Visual Studio 2022\n      platform: x86\n      SQLITE_ORM_CXX_STANDARD: \"-DSQLITE_ORM_ENABLE_CXX_20=ON\"\n\nmatrix:\n  fast_finish: true\n\nfor:\n-\n  # Windows\n  matrix:\n    only:\n      - appveyor_build_worker_image: Visual Studio 2017\n      - appveyor_build_worker_image: Visual Studio 2022\n  init:\n    - |-\n      echo %appveyor_build_worker_image% - %platform% - %configuration%\n      cmake --version\n      if \"%platform%\"==\"x64\" (set architecture=-A x64)\n      if \"%platform%\"==\"x86\" (set architecture=-A Win32)\n      if \"%appveyor_build_worker_image%\"==\"Visual Studio 2022\" (set generator=\"Visual Studio 17 2022\" %architecture%)\n      if \"%appveyor_build_worker_image%\"==\"Visual Studio 2017\" (set generator=\"Visual Studio 15 2017\" %architecture%)\n  install:\n    - |-\n      cd C:\\Tools\\vcpkg\n      git fetch --tags && git checkout 2024.06.15\n      cd %APPVEYOR_BUILD_FOLDER%\n      C:\\Tools\\vcpkg\\bootstrap-vcpkg.bat -disableMetrics\n      C:\\Tools\\vcpkg\\vcpkg integrate install\n      set VCPKG_DEFAULT_TRIPLET=%platform%-windows\n      vcpkg install sqlite3[core,dbstat,math,json1,fts5,soundex]\n      rem The Visual Studio 2017 build worker image comes with CMake 3.16 only, and sqlite_orm will build the Catch2 dependency from source\n      if not \"%appveyor_build_worker_image%\"==\"Visual Studio 2017\" (vcpkg install catch2)\n  before_build:\n    - |-\n      mkdir compile\n      cd compile\n      cmake %SQLITE_ORM_CXX_STANDARD% -G %generator% -DCMAKE_TOOLCHAIN_FILE=C:/Tools/vcpkg/scripts/buildsystems/vcpkg.cmake ..\n  # build examples, and run tests (ie make & make test)\n  build_script:\n    - |-\n      cmake --build . --config %configuration% -- /m\n      ctest --verbose --output-on-failure --build-config %configuration%\n\n-\n  # Linux\n  matrix:\n    only:\n      - appveyor_build_worker_image: Ubuntu\n  init:\n    - |-\n      echo $appveyor_build_worker_image\n      $CXX --version\n      cmake --version\n  # using custom vcpkg triplets for building and linking dynamic dependent libraries\n  install:\n    - |-\n      pushd $HOME/vcpkg\n      git fetch --tags && git checkout 2024.06.15\n      popd\n      $HOME/vcpkg/bootstrap-vcpkg.sh -disableMetrics\n      $HOME/vcpkg/vcpkg integrate install --overlay-triplets=vcpkg/triplets\n      vcpkg install sqlite3[core,dbstat,math,json1,fts5,soundex] catch2 --overlay-triplets=vcpkg/triplets\n  before_build:\n    - |-\n      mkdir compile\n      cd compile\n      cmake $SQLITE_ORM_CXX_STANDARD $cmake_build_examples --toolchain $HOME/vcpkg/scripts/buildsystems/vcpkg.cmake ..\n  # build examples, and run tests (ie make & make test)\n  build_script:\n    - |-\n      cmake --build . $cmake_build_parallel\n      ctest --verbose --output-on-failure\n-\n  # macOS\n  matrix:\n    only:\n      - appveyor_build_worker_image: macOS\n  init:\n    - |-\n      echo $appveyor_build_worker_image\n      $CXX --version\n      cmake --version\n  # using custom vcpkg triplets for building and linking dynamic dependent libraries\n  install:\n    - |-\n      git clone --depth 1 --branch 2024.06.15 https://github.com/microsoft/vcpkg.git $HOME/vcpkg\n      $HOME/vcpkg/bootstrap-vcpkg.sh -disableMetrics\n      $HOME/vcpkg/vcpkg integrate install --overlay-triplets=vcpkg/triplets\n      vcpkg install sqlite3[core,dbstat,math,json1,fts5,soundex] catch2 --overlay-triplets=vcpkg/triplets\n  before_build:\n    - |-\n      mkdir compile\n      cd compile\n      cmake $SQLITE_ORM_CXX_STANDARD --toolchain $HOME/vcpkg/scripts/buildsystems/vcpkg.cmake ..\n  # build examples, and run tests (ie make & make test)\n  build_script:\n    - |-\n      cmake --build . --parallel\n      ctest --verbose --output-on-failure\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "dependencies",
          "type": "tree",
          "content": null
        },
        {
          "name": "dev",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo.png",
          "type": "blob",
          "size": 137.9091796875,
          "content": null
        },
        {
          "name": "not_single_header_include",
          "type": "tree",
          "content": null
        },
        {
          "name": "packaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "vcpkg",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}