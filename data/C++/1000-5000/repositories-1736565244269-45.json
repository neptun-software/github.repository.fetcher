{
  "metadata": {
    "timestamp": 1736565244269,
    "page": 45,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sz3/libcimbar",
      "stars": 4653,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.162109375,
          "content": "CMakeFiles/\nTesting/\nbuild/\ndist/\nweb/cimbar_js.js\nweb/cimbar_js.wasm\nCMakeCache.txt\nCMakeLists.txt.*\nCTestTestfile.cmake\nMakefile\ncallgrind.out*\ncmake_install.cmake\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.111328125,
          "content": "[submodule \"samples\"]\n\tpath = samples\n\turl = https://github.com/sz3/cimbar-samples\n\tbranch = v0.5\n\tignore = dirty\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 2.4462890625,
          "content": "cmake_minimum_required(VERSION 3.10)\n\nproject ( libcimbar )\nenable_testing()\n\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n\tset(CMAKE_INSTALL_PREFIX \"${libcimbar_SOURCE_DIR}/dist\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(CMAKE_CXX_STANDARD 17)\nadd_definitions(\"-DLIBCIMBAR_PROJECT_ROOT=\\\"${libcimbar_SOURCE_DIR}\\\"\")\n\nif(\"${CMAKE_BUILD_TYPE}\" STREQUAL \"\")\n\tset(CMAKE_BUILD_TYPE \"RelWithDebInfo\")\n\tset(CMAKE_C_FLAGS \"${CFLAGS} -Wall -std=c99 -Os -fPIC\")\n\tset(CMAKE_CXX_FLAGS_RELWITHDEBINFO \"-Wall -Wextra -g -O2 -fPIC\")\nendif()\n\nif(DEFINED USE_WASM)  # wasm build needs OPENCV_DIR defined\n\tset(DISABLE_TESTS true)\n\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DGF256_TARGET_MOBILE\")\n\tset(CMAKE_CXX_FLAGS_RELWITHDEBINFO \"-Os\")\n\n\tfile( GLOB OPENCV_LIBS \"${OPENCV_DIR}/opencv-build-wasm/build_wasm/lib/*.a\" )\n\tfile( GLOB opencv_include_modules \"${OPENCV_DIR}/modules/*/include\" )\n\tinclude_directories(\n\t\t${OPENCV_DIR}/include/\n\t\t${OPENCV_DIR}/opencv-build-wasm/build_wasm/\n\t\t${opencv_include_modules}\n\t)\nelse()  # if not wasm, go find opencv. 3 or 4 should both work\n\tfind_package(OpenCV REQUIRED)\n\tinclude_directories(${OpenCV_INCLUDE_DIRS})\nendif()\n\nif(DEFINED BUILD_PORTABLE_LINUX)\n\tfind_package(PkgConfig REQUIRED)\n\tpkg_check_modules(OPENCV4 REQUIRED opencv4)\n\tlink_directories(${OPENCV4_STATIC_LIBRARY_DIRS})\n\n\t# statically link c++/gcc (not libc!!)\n\tset(CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -static-libstdc++ -static-libgcc\")\nendif()\n\nif(NOT DEFINED OPENCV_LIBS)\n\tset(OPENCV_LIBS \"opencv_calib3d\" \"opencv_imgcodecs\" \"opencv_imgproc\" \"opencv_photo\" \"opencv_core\" ${OPENCV4_STATIC_LIBRARIES})\nendif()\n\nif(NOT DEFINED CPPFILESYSTEM)\n\tset(CPPFILESYSTEM \"stdc++fs\")\nendif()\n\nset (PROJECTS\n\tsrc/lib/bit_file\n\tsrc/lib/chromatic_adaptation\n\tsrc/lib/cimb_translator\n\tsrc/lib/cimbar_js\n\tsrc/lib/compression\n\tsrc/lib/encoder\n\tsrc/lib/fountain\n\tsrc/lib/gui\n\tsrc/lib/image_hash\n\tsrc/lib/serialize\n\tsrc/lib/util\n\n\tsrc/third_party_lib/base91\n\tsrc/third_party_lib/cxxopts\n\tsrc/third_party_lib/intx\n\tsrc/third_party_lib/libcorrect\n\tsrc/third_party_lib/libpopcnt\n\tsrc/third_party_lib/wirehair\n\tsrc/third_party_lib/zstd\n)\n\nif(NOT DEFINED USE_WASM)\nset(PROJECTS\n\t${PROJECTS}\n\tsrc/lib/extractor\n\n\tsrc/exe/cimbar\n\tsrc/exe/cimbar_extract\n\tsrc/exe/cimbar_recv\n\tsrc/exe/cimbar_send\n\tsrc/exe/build_image_assets\n)\nendif()\n\ninclude_directories(\n\t${libcimbar_SOURCE_DIR}/src/lib\n\t${libcimbar_SOURCE_DIR}/src/third_party_lib\n)\n\nforeach(proj ${PROJECTS})\n\tadd_subdirectory(${proj} build/${proj})\nendforeach()\n\n\n"
        },
        {
          "name": "DETAILS.md",
          "type": "blob",
          "size": 7.8994140625,
          "content": "### [LIBCIMBAR](https://github.com/sz3/libcimbar)\n### DETAILS | [PERFORMANCE](PERFORMANCE.md) | [TODO](TODO.md)\n\n## The premise\n\nCimbar is a grid of colored tiles. Conceptually, it is built on the idea of `image hashing`:\n\n![example image hash](https://github.com/sz3/cimbar-samples/blob/v0.5/docs/imagehash.png)\n\nThe image hash cimbar uses is a simple threshold -- a 1 if the pixel is set, and a 0 if not. The 8x8 grid is encoded as a 64-bit number, left to right, top to bottom. There are many cleverer image hashing algorithms -- this threshold-based approach is perhaps the simplest. But simplicity is a virtue!\n\nThe image hash we choose helps us define our symbols. Each symbol needs an image hash [clearly distinct]((https://en.wikipedia.org/wiki/Hamming_distance)) from all other symbols -- and we need 2^`num_bits` symbols, where `num_bits` is the number of bits we wish to encode per symbol. Here is a set of 16 symbols, and the 4-bit strings they encode:\n\n![4 bit cimbar tiles](https://github.com/sz3/cimbar-samples/blob/v0.5/docs/tile-bits.png)\n\nThis is the set cimbar uses. Each symbol is around 20 bits (by imagehash hamming distance) from all other symbols, and importantly, this relationship tends to hold (though not perfectly) even when symbols are blurry or otherwise corrupted.\n\nThat these symbols are distinguishable through the lens of the image hash is perhaps the single most vital aspect of cimbar. When we decode, we will check a tile against the lot. If we find an unambiguously best symbol -- we also will have found the unambiguously best bits.\n\n## Implementation: Encoder\n\nIn pseudocode, cimbar encoding looks something like this:\n```\nfor bits in error_correction(file):\n    for x, y in next_position():\n        img.paste(cimbar_tile(bits), x, y)\n```\n\nThe encoder iterates over the input data, assigning symbols (and perhaps colors) according to the bits it reads.\n\n![4 bit cimbar encoding](https://github.com/sz3/cimbar-samples/blob/v0.5/docs/encoding.png)\n\nThe above is a 4x4(x4) cimbar grid -- encoding 64 bits of data. A real cimbar image looks like this:\n\n![an example cimbar code](https://github.com/sz3/cimbar-samples/blob/v0.5/6bit/4color_ecc30_fountain_0.png)\n\n... and contains 12400 tiles for data. For 6-bit cimbar (4 symbol bits, 2 color bits), this means 9300 bytes per image.\n\n### Error Correction\n\nWe may have 9300 bytes per image, but we cannot use all of those bytes for our data payload. The decoder will do a good job matching tiles to its dictionary of symbols, but it will not be perfect. We will need error correction.\n\nAs a reminder:\n```\nfor bits in error_correction(file):\n    for x, y in next_position():\n        img.paste(cimbar_tile(bits), x, y)\n```\n\nThe `error_correction` in question will:\n* read `155-ecc` bytes\n* add `ecc` bytes of error correction\n* use the `155` byte chunk (data + ecc_bytes) as the next set of inputs, to be torn apart and encoded 6-bits at a time\n\nAs an example, for `ecc=30`, we will have 30 bytes of error correction data for every 125 bytes of real data.\n\n### Interleaving\n\nError correction is applied on adjacent bytes -- but errors on an image tend to cluster around adjacent cells. For example, imagine a pen, or a finger, obstructing part of the code.\n\nBecause of this characteristic, it's useful to interleave ECC chunks across the image. The implementation cimbar uses is to skip over N cells.\n\n[sorry, a helpful graphic will be added later]\n\n### Fountain encoding:\n\nWhat if our source file is larger than 7500 bytes? (9300 * `ecc=30`/155)\n\nWhat if our source file is much smaller, and we'd like to make sure it can be decoded, even in the face of large errors?\n\nThe solution cimbar implements is to use [fountain codes](https://en.wikipedia.org/wiki/Fountain_code).\n\nFountain (wirehair) codes:\n\n* introduce a small amount of overhead for bookkeeping purposes (in 6 bit cimbar, it is 6 bytes per 744 of real data)\n* allow the decoder to reconstruct a file over multiple fountain frames\n* *regardless of what order* the multiple fountain frames are received\n* even if frames are missing, as long as N+1 frames are received (where N is `file_size`/`bytes_per_frame`)\n\nThese properties may appear to be magical as you consider them more, and they do come with a few tradeoffs:\n\n1. the fountain decoder defines how large a file can be\n\t* in cimbar's case, capped at 33.55MB\n2. wirehair requires the file contents to be stored in RAM\n\t* this relates to the size limit!\n\nThe size constraint is less of an obstacle than it may seem -- the fountain codes are essentially being used as a wire format, and the encoder and decoder could agree on a scheme to split up, and then reassemble, larger files. Cimbar does not (yet?) implement this, however!\n\n## Implementation: Decoder\n\nThe decoder is, unsurprisingly, the inverse of the encoder in most respects. However, its job is more difficult. The decoder must:\n\n* locate the cimbar code inside a candidate image\n\n* extract the cimbar code, taking care when doing its 2D image transform to get the image \"close enough\" for a decode to run\n\n* deal with misshapen, blurry, or simply unreadable symbols, while successfully decoding as much as it can.\n\n### Scan and extract\n\nThe scan and extract are functionally similar to how QR codes work -- so I'm going to gloss over the details a bit. In summary:\n\n* There are three square patterns at the corners of the image, and the scanner must find these. It then triangulates a range in which to run a secondary scan for the bottom-right corner.\n\n* Once all 4 corners are located, the extract is done with a perspective transform.\n\n![after extract](https://github.com/sz3/cimbar-samples/blob/v0.5/6bit/4_30_f0_627_extract.jpg)\n\n### Symbol decodes: an overview\n\nThe decoder loop must actively work to minimize errors when decoding. In pseudocode, it might look something like this:\n```\nfor i, bits, distance, drift in next_decode():\n    results[deinterleave(i)] = bits\n    position_tracker.update(i, drift, distance)\n\ndecoded_data = error_correct(results)\n```\n\n* `i`: the cell position\n* `bits`: the decoded bits for this decode\n* `distance`: the distance, or confidence, from the image hash when it selected a suitable symbol. Lower is better.\n* `drift`: an (x,y) offset that tracks local distortion for this decode. It is capped at 7px in all directions.\n* `deinterleave(i)` will return the \"real\" bit index of the bits, based on our interleave scheme -- the reverse of the encoder.\n* `position_tracker.update()` here informs `next_decode()` which cells it should prioritize next. Imagine a priority_queue based on `distance`.\n* `error_correct(results)` will reassemble the file, if error correction succeeds.\n\nThe reason for complexity is multi-fold:\n* we have to reverse the interleave, to reassemble the file contents in the right order\n* we *decode* the cells out of order, using the image hash's `distance` metric as a (inverted) *confidence* metric. To minimize errors, we want to decode cells we are more confident about before cells we are less confident about.\n* the distance/confidence is used in combination with `drift` -- an (x,y) offset -- that tracks the local distortion for upcoming decodes. When we have higher confidence in a cell, its drift is preferred.\n\n### Reasons for errors\n\nThere are a number of small problems that can conspire to create large problems when decoding a cimbar image.\n\n* some tiles might be blurry\n* some tiles might be too dark\n* the image might be misaligned\n* the image might suffer from lens distortion\n* the image might be too small, meaning the tiles have lost too much definition (see: blurry)\n\nNotably, these problems can also be *localized* in an image, meaning that while the right half might be easy enough to decode, the left half becomes a disaster of misalignments and bad-guesses leading to worse misalignments and worse guesses. Interleaving and error correction can solve some of these problems, but at a certain point it becomes too much to deal with -- short of increasing the ECC level or input image resolution.\n\n### Example decode\n\n[to be continued...]\n\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 16.3349609375,
          "content": "Mozilla Public License Version 2.0\n==================================\n\n1. Definitions\n--------------\n\n1.1. \"Contributor\"\n    means each individual or legal entity that creates, contributes to\n    the creation of, or owns Covered Software.\n\n1.2. \"Contributor Version\"\n    means the combination of the Contributions of others (if any) used\n    by a Contributor and that particular Contributor's Contribution.\n\n1.3. \"Contribution\"\n    means Covered Software of a particular Contributor.\n\n1.4. \"Covered Software\"\n    means Source Code Form to which the initial Contributor has attached\n    the notice in Exhibit A, the Executable Form of such Source Code\n    Form, and Modifications of such Source Code Form, in each case\n    including portions thereof.\n\n1.5. \"Incompatible With Secondary Licenses\"\n    means\n\n    (a) that the initial Contributor has attached the notice described\n        in Exhibit B to the Covered Software; or\n\n    (b) that the Covered Software was made available under the terms of\n        version 1.1 or earlier of the License, but not also under the\n        terms of a Secondary License.\n\n1.6. \"Executable Form\"\n    means any form of the work other than Source Code Form.\n\n1.7. \"Larger Work\"\n    means a work that combines Covered Software with other material, in \n    a separate file or files, that is not Covered Software.\n\n1.8. \"License\"\n    means this document.\n\n1.9. \"Licensable\"\n    means having the right to grant, to the maximum extent possible,\n    whether at the time of the initial grant or subsequently, any and\n    all of the rights conveyed by this License.\n\n1.10. \"Modifications\"\n    means any of the following:\n\n    (a) any file in Source Code Form that results from an addition to,\n        deletion from, or modification of the contents of Covered\n        Software; or\n\n    (b) any new file in Source Code Form that contains any Covered\n        Software.\n\n1.11. \"Patent Claims\" of a Contributor\n    means any patent claim(s), including without limitation, method,\n    process, and apparatus claims, in any patent Licensable by such\n    Contributor that would be infringed, but for the grant of the\n    License, by the making, using, selling, offering for sale, having\n    made, import, or transfer of either its Contributions or its\n    Contributor Version.\n\n1.12. \"Secondary License\"\n    means either the GNU General Public License, Version 2.0, the GNU\n    Lesser General Public License, Version 2.1, the GNU Affero General\n    Public License, Version 3.0, or any later versions of those\n    licenses.\n\n1.13. \"Source Code Form\"\n    means the form of the work preferred for making modifications.\n\n1.14. \"You\" (or \"Your\")\n    means an individual or a legal entity exercising rights under this\n    License. For legal entities, \"You\" includes any entity that\n    controls, is controlled by, or is under common control with You. For\n    purposes of this definition, \"control\" means (a) the power, direct\n    or indirect, to cause the direction or management of such entity,\n    whether by contract or otherwise, or (b) ownership of more than\n    fifty percent (50%) of the outstanding shares or beneficial\n    ownership of such entity.\n\n2. License Grants and Conditions\n--------------------------------\n\n2.1. Grants\n\nEach Contributor hereby grants You a world-wide, royalty-free,\nnon-exclusive license:\n\n(a) under intellectual property rights (other than patent or trademark)\n    Licensable by such Contributor to use, reproduce, make available,\n    modify, display, perform, distribute, and otherwise exploit its\n    Contributions, either on an unmodified basis, with Modifications, or\n    as part of a Larger Work; and\n\n(b) under Patent Claims of such Contributor to make, use, sell, offer\n    for sale, have made, import, and otherwise transfer either its\n    Contributions or its Contributor Version.\n\n2.2. Effective Date\n\nThe licenses granted in Section 2.1 with respect to any Contribution\nbecome effective for each Contribution on the date the Contributor first\ndistributes such Contribution.\n\n2.3. Limitations on Grant Scope\n\nThe licenses granted in this Section 2 are the only rights granted under\nthis License. No additional rights or licenses will be implied from the\ndistribution or licensing of Covered Software under this License.\nNotwithstanding Section 2.1(b) above, no patent license is granted by a\nContributor:\n\n(a) for any code that a Contributor has removed from Covered Software;\n    or\n\n(b) for infringements caused by: (i) Your and any other third party's\n    modifications of Covered Software, or (ii) the combination of its\n    Contributions with other software (except as part of its Contributor\n    Version); or\n\n(c) under Patent Claims infringed by Covered Software in the absence of\n    its Contributions.\n\nThis License does not grant any rights in the trademarks, service marks,\nor logos of any Contributor (except as may be necessary to comply with\nthe notice requirements in Section 3.4).\n\n2.4. Subsequent Licenses\n\nNo Contributor makes additional grants as a result of Your choice to\ndistribute the Covered Software under a subsequent version of this\nLicense (see Section 10.2) or under the terms of a Secondary License (if\npermitted under the terms of Section 3.3).\n\n2.5. Representation\n\nEach Contributor represents that the Contributor believes its\nContributions are its original creation(s) or it has sufficient rights\nto grant the rights to its Contributions conveyed by this License.\n\n2.6. Fair Use\n\nThis License is not intended to limit any rights You have under\napplicable copyright doctrines of fair use, fair dealing, or other\nequivalents.\n\n2.7. Conditions\n\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted\nin Section 2.1.\n\n3. Responsibilities\n-------------------\n\n3.1. Distribution of Source Form\n\nAll distribution of Covered Software in Source Code Form, including any\nModifications that You create or to which You contribute, must be under\nthe terms of this License. You must inform recipients that the Source\nCode Form of the Covered Software is governed by the terms of this\nLicense, and how they can obtain a copy of this License. You may not\nattempt to alter or restrict the recipients' rights in the Source Code\nForm.\n\n3.2. Distribution of Executable Form\n\nIf You distribute Covered Software in Executable Form then:\n\n(a) such Covered Software must also be made available in Source Code\n    Form, as described in Section 3.1, and You must inform recipients of\n    the Executable Form how they can obtain a copy of such Source Code\n    Form by reasonable means in a timely manner, at a charge no more\n    than the cost of distribution to the recipient; and\n\n(b) You may distribute such Executable Form under the terms of this\n    License, or sublicense it under different terms, provided that the\n    license for the Executable Form does not attempt to limit or alter\n    the recipients' rights in the Source Code Form under this License.\n\n3.3. Distribution of a Larger Work\n\nYou may create and distribute a Larger Work under terms of Your choice,\nprovided that You also comply with the requirements of this License for\nthe Covered Software. If the Larger Work is a combination of Covered\nSoftware with a work governed by one or more Secondary Licenses, and the\nCovered Software is not Incompatible With Secondary Licenses, this\nLicense permits You to additionally distribute such Covered Software\nunder the terms of such Secondary License(s), so that the recipient of\nthe Larger Work may, at their option, further distribute the Covered\nSoftware under the terms of either this License or such Secondary\nLicense(s).\n\n3.4. Notices\n\nYou may not remove or alter the substance of any license notices\n(including copyright notices, patent notices, disclaimers of warranty,\nor limitations of liability) contained within the Source Code Form of\nthe Covered Software, except that You may alter any license notices to\nthe extent required to remedy known factual inaccuracies.\n\n3.5. Application of Additional Terms\n\nYou may choose to offer, and to charge a fee for, warranty, support,\nindemnity or liability obligations to one or more recipients of Covered\nSoftware. However, You may do so only on Your own behalf, and not on\nbehalf of any Contributor. You must make it absolutely clear that any\nsuch warranty, support, indemnity, or liability obligation is offered by\nYou alone, and You hereby agree to indemnify every Contributor for any\nliability incurred by such Contributor as a result of warranty, support,\nindemnity or liability terms You offer. You may include additional\ndisclaimers of warranty and limitations of liability specific to any\njurisdiction.\n\n4. Inability to Comply Due to Statute or Regulation\n---------------------------------------------------\n\nIf it is impossible for You to comply with any of the terms of this\nLicense with respect to some or all of the Covered Software due to\nstatute, judicial order, or regulation then You must: (a) comply with\nthe terms of this License to the maximum extent possible; and (b)\ndescribe the limitations and the code they affect. Such description must\nbe placed in a text file included with all distributions of the Covered\nSoftware under this License. Except to the extent prohibited by statute\nor regulation, such description must be sufficiently detailed for a\nrecipient of ordinary skill to be able to understand it.\n\n5. Termination\n--------------\n\n5.1. The rights granted under this License will terminate automatically\nif You fail to comply with any of its terms. However, if You become\ncompliant, then the rights granted under this License from a particular\nContributor are reinstated (a) provisionally, unless and until such\nContributor explicitly and finally terminates Your grants, and (b) on an\nongoing basis, if such Contributor fails to notify You of the\nnon-compliance by some reasonable means prior to 60 days after You have\ncome back into compliance. Moreover, Your grants from a particular\nContributor are reinstated on an ongoing basis if such Contributor\nnotifies You of the non-compliance by some reasonable means, this is the\nfirst time You have received notice of non-compliance with this License\nfrom such Contributor, and You become compliant prior to 30 days after\nYour receipt of the notice.\n\n5.2. If You initiate litigation against any entity by asserting a patent\ninfringement claim (excluding declaratory judgment actions,\ncounter-claims, and cross-claims) alleging that a Contributor Version\ndirectly or indirectly infringes any patent, then the rights granted to\nYou by any and all Contributors for the Covered Software under Section\n2.1 of this License shall terminate.\n\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all\nend user license agreements (excluding distributors and resellers) which\nhave been validly granted by You or Your distributors under this License\nprior to termination shall survive termination.\n\n************************************************************************\n*                                                                      *\n*  6. Disclaimer of Warranty                                           *\n*  -------------------------                                           *\n*                                                                      *\n*  Covered Software is provided under this License on an \"as is\"       *\n*  basis, without warranty of any kind, either expressed, implied, or  *\n*  statutory, including, without limitation, warranties that the       *\n*  Covered Software is free of defects, merchantable, fit for a        *\n*  particular purpose or non-infringing. The entire risk as to the     *\n*  quality and performance of the Covered Software is with You.        *\n*  Should any Covered Software prove defective in any respect, You     *\n*  (not any Contributor) assume the cost of any necessary servicing,   *\n*  repair, or correction. This disclaimer of warranty constitutes an   *\n*  essential part of this License. No use of any Covered Software is   *\n*  authorized under this License except under this disclaimer.         *\n*                                                                      *\n************************************************************************\n\n************************************************************************\n*                                                                      *\n*  7. Limitation of Liability                                          *\n*  --------------------------                                          *\n*                                                                      *\n*  Under no circumstances and under no legal theory, whether tort      *\n*  (including negligence), contract, or otherwise, shall any           *\n*  Contributor, or anyone who distributes Covered Software as          *\n*  permitted above, be liable to You for any direct, indirect,         *\n*  special, incidental, or consequential damages of any character      *\n*  including, without limitation, damages for lost profits, loss of    *\n*  goodwill, work stoppage, computer failure or malfunction, or any    *\n*  and all other commercial damages or losses, even if such party      *\n*  shall have been informed of the possibility of such damages. This   *\n*  limitation of liability shall not apply to liability for death or   *\n*  personal injury resulting from such party's negligence to the       *\n*  extent applicable law prohibits such limitation. Some               *\n*  jurisdictions do not allow the exclusion or limitation of           *\n*  incidental or consequential damages, so this exclusion and          *\n*  limitation may not apply to You.                                    *\n*                                                                      *\n************************************************************************\n\n8. Litigation\n-------------\n\nAny litigation relating to this License may be brought only in the\ncourts of a jurisdiction where the defendant maintains its principal\nplace of business and such litigation shall be governed by laws of that\njurisdiction, without reference to its conflict-of-law provisions.\nNothing in this Section shall prevent a party's ability to bring\ncross-claims or counter-claims.\n\n9. Miscellaneous\n----------------\n\nThis License represents the complete agreement concerning the subject\nmatter hereof. If any provision of this License is held to be\nunenforceable, such provision shall be reformed only to the extent\nnecessary to make it enforceable. Any law or regulation which provides\nthat the language of a contract shall be construed against the drafter\nshall not be used to construe this License against a Contributor.\n\n10. Versions of the License\n---------------------------\n\n10.1. New Versions\n\nMozilla Foundation is the license steward. Except as provided in Section\n10.3, no one other than the license steward has the right to modify or\npublish new versions of this License. Each version will be given a\ndistinguishing version number.\n\n10.2. Effect of New Versions\n\nYou may distribute the Covered Software under the terms of the version\nof the License under which You originally received the Covered Software,\nor under the terms of any subsequent version published by the license\nsteward.\n\n10.3. Modified Versions\n\nIf you create software not governed by this License, and you want to\ncreate a new license for such software, you may create and use a\nmodified version of this License if you rename the license and remove\nany references to the name of the license steward (except to note that\nsuch modified license differs from this License).\n\n10.4. Distributing Source Code Form that is Incompatible With Secondary\nLicenses\n\nIf You choose to distribute Source Code Form that is Incompatible With\nSecondary Licenses under the terms of this version of the License, the\nnotice described in Exhibit B of this License must be attached.\n\nExhibit A - Source Code Form License Notice\n-------------------------------------------\n\n  This Source Code Form is subject to the terms of the Mozilla Public\n  License, v. 2.0. If a copy of the MPL was not distributed with this\n  file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular\nfile, then You may include the notice in a location (such as a LICENSE\nfile in a relevant directory) where a recipient would be likely to look\nfor such a notice.\n\nYou may add additional accurate notices of copyright ownership.\n\nExhibit B - \"Incompatible With Secondary Licenses\" Notice\n---------------------------------------------------------\n\n  This Source Code Form is \"Incompatible With Secondary Licenses\", as\n  defined by the Mozilla Public License, v. 2.0.\n\n"
        },
        {
          "name": "PERFORMANCE.md",
          "type": "blob",
          "size": 3.791015625,
          "content": "### [LIBCIMBAR](https://github.com/sz3/libcimbar)\n### [DETAILS](DETAILS.md) | PERFORMANCE | [TODO](TODO.md)\n\n## Numbers of note\n\n* The barcode is `1024x1024` pixels. The individual tiles are `8x8` in a `9x9` grid (there is an empty row/column of spacing on either side)\n* **7500** bytes per cimbar image, after error correction\n\t* There are 16 possible symbols per tile, encoding 4 bits\n\t* There are 4 or 8 possible colors, encoding an additional 2-3 bits per tile.\n\t* These 6 bits per tile work out to a maximum of 9300 bytes per barcode, though in practice this number is reduced by error correction.\n\t* The default ecc setting is 30/155, which is how we go from 9300 -> 7500 bytes of real data for a 4-color cimbar image.\n\t\t* Reed Solomon is not perfect for this use case -- specifically, it corrects byte errors, and cimbar errors tend to involve 1-3 bits at a time. However, since Reed Solomon implementations are ubiquitous, it is currently in use.\n\n## Current sustained benchmark\n\n* `mode B` (8x8 4-color) cimbar with ecc=30/155:\n\t* 4,689,084 bytes (after compression) in 44s -> 852 kilobits/s (~106 KB/s)\n\t* mode B was introduced in 0.6.0, and should work in a wide variety of scenarios\n\n* *legacy* `mode 4C` (8x8 4-color) cimbar with ecc=30/155:\n\t* 4,717,525 bytes (after compression) in 45s -> 838 kilobits/s (~104 KB/s)\n\t* the original configuration. Mostly replaced by mode B.\n\n* *deprecated* `mode 8C` (8x8 8-color) cimbar with ecc=30/155:\n\t* 4,717,525 bytes in 40s -> 943 kilobits/s (~118 KB/s)\n\t* removed in 0.6.0. 8-color has always been inconsistent, and needs future research\n\n* *beta* `mode S` (5x5 4-color) cimbar with ecc=40/216 (note: not finalized, and requires a special build)\n\t* safely >1 Mbit/s\n\t* format still a WIP. To be continued...\n\n* details:\n\t* cimbar has built-in compression using zstd. What's being measured here is bits over the wire, e.g. data after compression is applied.\n\t* these numbers are using https://github.com/sz3/cfc, running with 4 CPU threads on a venerable Qualcomm Snapdragon 625\n\t\t* more modern cell CPUs run the decoder more quickly, but it turns out that this does not benefit performance much: the camera is usually the bottleneck.\n\t* the sender is the cimbar.org wasm implementation. An equivalent command line is `./cimbar_send /path/to/file`\n\t\t* cimbar.org uses the `shakycam` option to allow the receiver to detect/discard \"in between\" frames as part of the scan step. This allows it to spend more processing time decoding real data.\n\t* burst rate can be higher (or lower)\n\t\t* to this end, lower ecc settings *can* provide better burst rates. I've aimed for a balance of performance and reliability.\n\t* cimbar `mode B` is preferred, and should be the most reliable.\n\t* The older `mode 4C` *may* give more consistent transfer speeds in certain scenarios, but is mostly included for backwards-compatibility reasons.\n\n* other notes:\n\t* having better lighting in the frame often leads to better results -- this is why cimbar.org has a (mostly) white background. cfc uses android's auto-exposure, auto-focus, etc (it's a demo app). Good ambient light -- or a white background -- can lead to more consitent quality frame capture.\n\t\t* screen brightness on the sender is good, but ambient light is better.\n\t* because of the lighting/exposure question, landscape *may* be better than portrait.\n\t* the cimbar frame should take up as much of the display as possible (trust the guide brackets)\n\t\t* the format is designed to decode at resolutions as low as 700x700, but performance may suffer.\n\t* similarly, it's best to keep the camera angle straight-on -- instead of at an angle -- to decode the whole image successfully. Decodes should still happen at higher angles, but the \"smaller\" part of the image may have more errors than the ECC can deal with.\n\t* other things to be wary of:\n\t\t* glare from light sources.\n\t\t* shaky hands.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.72265625,
          "content": "### [INTRODUCTION](https://github.com/sz3/cimbar) | [ABOUT](https://github.com/sz3/cimbar/blob/master/ABOUT.md) | [CFC](https://github.com/sz3/cfc) | LIBCIMBAR\n### [DETAILS](DETAILS.md) | [PERFORMANCE](PERFORMANCE.md) | [TODO](TODO.md)\n\n## libcimbar: Color Icon Matrix Barcodes\n\nBehold: an experimental barcode format for air-gapped data transfer.\n\nIt can sustain speeds of 850 kilobits/s (~106 KB/s) using just a computer monitor and a smartphone camera!\n\n<p align=\"center\">\n<img src=\"https://github.com/sz3/cimbar-samples/blob/v0.6/b/4cecc30f.png\" width=\"70%\" title=\"A non-animated mode-B cimbar code\" >\n</p>\n\n## Explain?\n\nThe encoder outputs an animated barcode to a computer or smartphone screen:\n* Encoder web app: https://cimbar.org\n\nWhile the decoder is a cell phone app that uses the phone camera to read the animated barcode:\n* Decoder android app: https://github.com/sz3/cfc\n\nNo internet/bluetooth/NFC/etc is used. All data is transmitted through the camera lens. You can try it out yourself, or take my word that it works. :)\n\n## How does it work?\n\n`cimbar` is a high-density 2D barcode format. Data is stored in a grid of colored tiles -- bits are encoded based on which tile is chosen, and which color is chosen to draw the tile. Reed Solomon error correction is applied on the data, to account for the lossy nature of the video -> digital decoding. Sub-1% error rates are expected, and corrected.\n\n`libcimbar`, this optimized implementation, includes a simple protocol for file encoding built on fountain codes (`wirehair`) and zstd compression. Files of up to 33MB (after compression!) are encoded in a series of cimbar codes, which can be output as images or a live video feed. Once enough distinct image frames have been decoded successfully, the file will be reconstructed and decompressed successfully. This is true even if the images are received out of order, or if some have been corrupted or are missing.\n\n## Platforms\n\nThe code is written in C++, and developed/tested on amd64+linux, arm64+android (decoder only), and emscripten+WASM (encoder only). It probably works, or can be made to work, on other platforms.\n\nCrucially, because the encoder compiles to asmjs and wasm, it can run on anything with a modern web browser. For offline use, you can either install cimbar.org as a progressive web app, or [download the latest release](https://github.com/sz3/libcimbar/releases/latest) of `cimbar_js.html`, save it locally, and open it in your web browser.\n\n## Library dependencies\n\n[OpenCV](https://opencv.org/) and [GLFW](https://github.com/glfw/glfw) (+ OpenGL ES headers) must be installed before building. All other dependencies are included in the source tree.\n\n* opencv - https://opencv.org/ (`libopencv-dev`)\n* GLFW - https://github.com/glfw/glfw (`libglfw3-dev`)\n* GLES3/gl3.h - `libgles2-mesa-dev`\n* base - https://github.com/r-lyeh-archived/base\n* catch2 - https://github.com/catchorg/Catch2\n* concurrentqueue - https://github.com/cameron314/concurrentqueue\n* cxxopts - https://github.com/jarro2783/cxxopts (used for command line tools)\n* fmt - https://github.com/fmtlib/fmt\n* intx - https://github.com/chfast/intx\n* libcorrect - https://github.com/quiet/libcorrect\n* libpopcnt - https://github.com/kimwalisch/libpopcnt\n* PicoSHA2 - https://github.com/okdshin/PicoSHA2 (used for testing)\n* stb_image - https://github.com/nothings/stb (for loading embedded pngs)\n* wirehair - https://github.com/catid/wirehair\n* zstd - https://github.com/facebook/zstd\n\n## Build\n\n1. install opencv and GLFW. On ubuntu/debian, this looks like:\n```\nsudo apt install libopencv-dev libglfw3-dev libgles2-mesa-dev\n```\n\n2. run the cmake + make incantation\n```\ncmake .\nmake -j7\nmake install\n```\n\nBy default, libcimbar will try to install build products under `./dist/bin/`.\n\nTo build cimbar.js (what cimbar.org uses), see [WASM](WASM.md).\n\n## Usage\n\nEncode:\n* large input files may fill up your disk with pngs!\n\n```\n./cimbar --encode -i inputfile.txt -o outputprefix\n```\n\nDecode (extracts file into output directory):\n```\n./cimbar outputprefix*.png -o /tmp\n```\n\nDecode a series of encoded images from stdin:\n```\necho outputprefix*.png | ./cimbar -o /tmp\n```\n\nEncode and animate to window:\n```\n./cimbar_send inputfile.pdf\n```\n\nYou can also encode a file using [cimbar.org](https://cimbar.org), or the latest [release](https://github.com/sz3/libcimbar/releases/latest).\n\n## Performance numbers\n\n[PERFORMANCE](PERFORMANCE.md)\n\n## Implementation details\n\n[DETAILS](DETAILS.md)\n\n## Room for improvement/next steps\n\n[TODO](TODO.md)\n\n## Inspiration\n\n* https://github.com/JohannesBuchner/imagehash/\n* https://github.com/divan/txqr\n* https://en.wikipedia.org/wiki/High_Capacity_Color_Barcode\n\n## Would you like to know more?\n\n### [INTRODUCTION](https://github.com/sz3/cimbar) | [ABOUT](https://github.com/sz3/cimbar/blob/master/ABOUT.md)\n"
        },
        {
          "name": "README.zh-cn.md",
          "type": "blob",
          "size": 4.33203125,
          "content": "### [简介](https://github.com/sz3/cimbar) | [关于](https://github.com/sz3/cimbar/blob/master/ABOUT.md) | [CFC](https://github.com/sz3/cfc) | LIBCIMBAR\n### [详细内容](DETAILS.md) | [演示](PERFORMANCE.md) | [下一步](TODO.md)\n\n## libcimbar: 彩色图形矩阵条形码\n\n一种用于小型数据传输的实验性条形码。\n\n解码速度在 850Kbit/s 左右（约106 KB/s），只需一个电脑显示器和手机摄像头！\n\n<p align=\"center\">\n<img src=\"https://github.com/sz3/cimbar-samples/blob/v0.6/b/4cecc30f.png\" width=\"70%\" title=\"A non-animated mode-B cimbar code\" >\n</p>\n\n## 为什么？\n\n编码器可以将条形码输出到计算机或手机屏幕：\n* 网页端：https://cimbar.org\n\n也可以是一个使用手机摄像头读取条形码的手机APP：\n* 安卓APP：https://github.com/sz3/cfc\n\nAPP并未使用互联网/蓝牙/NFC等，所有数据都是通过摄像头传输的。\n\n## 原理\n\n`cimbar`是一种高密度的二维条形码格式。数据存储在彩色图块网格中——根据选择哪个图块和选择哪种颜色来绘制图块，对信息进行编码。对数据应用Reed-Solomon纠错，预计错误率在1%左右。\n\n`libcimbar`，这是个优化版本，包括一个基于喷泉代码（`wirehair`）和zstd压缩的简单文件编码协议。最高33MB（压缩后）的文件以一系列 `cimbar` 代码编码，输出为图像或视频等。一旦成功解码了足够多帧，该文件将被重建和解压缩。即使图像接收出错，或者有些图像已损坏或丢失，也不会有太大问题。\n\n## 平台\n\n该代码是用C++编写的，并在 amd64+linux、arm64+android（仅限解码器）和 emscripten+WASM（仅限编码器）上开发/测试。在其他平台上应该也可以工作。\n\n至关重要的是，由于编码器编译为 asmjs 和 wasm ，它可以在任何具有现代网络浏览器的设备上运行。对于离线使用，您可以将 `cimbar.org` 安装为渐进式web应用程序，或[下载最新版本](https://github.com/sz3/libcimbar/releases/latest)。至于 `cimbar_js.html` ，将其保存在本地，然后在浏览器中打开。\n\n## 依赖库\n\n[OpenCV](https://opencv.org/) 和 [GLFW](https://github.com/glfw/glfw) (+ OpenGL ES headers) 必须在构建前安装，所有其他依赖项都包含在源代码树中。\n\n* opencv - https://opencv.org/ (`libopencv-dev`)\n* GLFW - https://github.com/glfw/glfw (`libglfw3-dev`)\n* GLES3/gl3.h - `libgles2-mesa-dev`\n* base - https://github.com/r-lyeh-archived/base\n* catch2 - https://github.com/catchorg/Catch2\n* concurrentqueue - https://github.com/cameron314/concurrentqueue\n* cxxopts - https://github.com/jarro2783/cxxopts （用于命令行工具）\n* fmt - https://github.com/fmtlib/fmt\n* intx - https://github.com/chfast/intx\n* libcorrect - https://github.com/quiet/libcorrect\n* libpopcnt - https://github.com/kimwalisch/libpopcnt\n* PicoSHA2 - https://github.com/okdshin/PicoSHA2 （用于测试）\n* stb_image - https://github.com/nothings/stb （用于加载嵌入图像）\n* wirehair - https://github.com/catid/wirehair\n* zstd - https://github.com/facebook/zstd\n\n## 构建\n\n1. 在 Ubuntu/Debian 上安装 opencv 和 GLFW 。如下：\n```\nsudo apt install libopencv-dev libglfw3-dev libgles2-mesa-dev\n```\n\n2. 运行 cmake + make\n```\ncmake .\nmake -j7\nmake install\n```\n\n默认情况下，`libcimbar` 将尝试在 `./dist/bin/` 下安装构建产品。\n\n要构建 `cimbar.js`（供`cimbar.org`使用)，请参阅 [WASM](WASM.md)。\n\n## 使用\n\n编码：\n* 输入文件太大可能导致硬盘中生成过多图片！\n\n```\n./cimbar --encode -i inputfile.txt -o outputprefix\n```\n\n解码（释放文件到输出目录）：\n```\n./cimbar outputprefix*.png -o /tmp\n```\n\n从`stdin`解码一系列编码图像：\n```\necho outputprefix*.png | ./cimbar -o /tmp\n```\n\n对窗口进行编码并设置动画：\n```\n./cimbar_send inputfile.pdf\n```\n\n您还可以使用 [cimbar.org](https://cimbar.org) 对文件进行编码，或最新的 [release](https://github.com/sz3/libcimbar/releases/latest).\n\n## 演示\n\n[PERFORMANCE](PERFORMANCE.md)\n\n## 详细信息\n\n[DETAILS](DETAILS.md)\n\n## 下一步\n\n[TODO](TODO.md)\n\n## 灵感来源\n\n* https://github.com/JohannesBuchner/imagehash/\n* https://github.com/divan/txqr\n* https://en.wikipedia.org/wiki/High_Capacity_Color_Barcode\n\n## 想了解更多？\n\n### [cimbar](https://github.com/sz3/cimbar) | [关于](https://github.com/sz3/cimbar/blob/master/ABOUT.md)\n"
        },
        {
          "name": "TODO.md",
          "type": "blob",
          "size": 4.0654296875,
          "content": "### [LIBCIMBAR](https://github.com/sz3/libcimbar)\n### [DETAILS](DETAILS.md) | [PERFORMANCE](PERFORMANCE.md) | TODO\n\n## Room for improvement/next steps\n\nlibcimbar is fairly optimized, to achieve the *proof* part of proof-of-concept. Specifically, it felt unreasonable to claim that it could be used to transfer MBs of data over a camera lens (on a non-geologic time scale) without seeing performance numbers to back that up.\n\nPerformance optimizations aside, there are a number of paths that might be interesting to pursue. Some I may take a look at, but most I will leave to any enterprising developer who wants to take up the cause:\n\n* proper metadata/header information?\n\t* would be nice to be able to determine ecc/#colors/#symbols from the cimbar image itself?\n\t* The bottom right corner is the obvious place to reclaim space to make this possible.\n\t* this is complicated by potential aspect ratio changes for future cimbar modes.\n* multi-frame decoding?\n\t* when decoding a static cimbar image, it would be useful to be able to use prior (unsuccessful) decode attempts to inform a future decode, and -- hopefully -- increase the probability of success. Currently, all frames are decoded independently.\n\t\t* there is already a granular confidence metric that could be reused -- the `distance` that's tracked when decoding symbol tiles...\n* optimal symbol set?\n\t* the 16-symbol (4 bit) set is hand-drawn. I stared with ~40 or so hand-drawn symbols, and used the 16 that performed best with each other.\n\t* there is surely a more optimal set -- a more rigorous approach should yield lower error rates!\n\t* but, more importantly, it may be possible to go up to 32 symbols, and encode 5 symbol bits per tile?\n* optimal symbol size?\n\t* the symbols that make up each cell on the cimbar grid are 8x8 (in a 9x9 grid). this is because imagehash was on 8x8 tiles!\n\t* smaller sizes might also work? I've been looking into 5x5 (in a 6x6 grid) as a starting point. It seems promising.\n\t* the limiting factor is the hamming distance between each image hash \"bucket\", and the 9Xth percentile decoding errors.\n* optimal color set?\n\t* the 4-color (2 bit) pallettes seem reasonable. 8-color, perhaps less so?\n\t* this may be a limitation of the algorithm/approach, however. Notably, since each symbol is drawn with one pallette color, all colors need sufficient contrast against the backdrop (#000 or #FFF, depending). This constrains the color space somewhat, and less distinct colors == more errors.\n\t* in addition to contrast, there is interplay between the overall brightness of the image and the exposure time needed for high framerate capture. More clean frames == more troughput.\n\t* the camera framerate in the CFC app is limited by auto-exposure and auto-focus behavior. A newer/better decoder app might be helpful.\n* optimal grid size?\n\t* 1024x1024 is a remnant of the early prototyping process. There is nothing inherently special about it (except that it fits on a 1920x1080 screen, which seems good)\n\t\t* the tile grid itself is 1008x1008 (1008 == 9x112 -- there are 112 tile rows and columns)\n\t* a smaller grid *could* be more resilient to errors, at the expense of data capacity.\n* optimal grid shape?\n\t* it's a square because QR codes are square. That's it. Should it be?\n\t* I'm strongly considering 4:3 for the next revision.\n* more efficient ECC?\n\t* QC-LDPC?\n\t* Reed Solomon operates on bytes. Most decode errors tend to average out at 1-3 bits. (In the pathological case, a single read error will span two bytes.) It's not a total disaster -- it still works. \n\t* I expect that state of the art ECC will allow 6-15% better throughput.\n\t\t* it's a wide range due to various unknowns (unknowns to me, anyway)\n* proper GPU support (OpenCV + openCL) on android?\n\t* It *might* be useful. [CFC]((https://github.com/sz3/cfc) is the current test bed for this.\n* wasm decoder?\n\t* android is going to kick CFC out of the store! (testing requirement)\n\t\t* so it might be time to write this...\n\t* probably needs to use Web Workers\n\t* in-browser GPGPU support would be interesting (but I'm not counting on it)\n* ???\n\t* still reading? Of course there's more! There's always more!\n\n\n"
        },
        {
          "name": "WASM.md",
          "type": "blob",
          "size": 1.2138671875,
          "content": "## Demo encoder\n\n[cimbar.org](https://cimbar.org)\n\n## Releases\n\nwasm and asm.js releases are available [here](https://github.com/sz3/libcimbar/releases/latest). The wasm build is what cimbar.org uses. [cimbar_js.html](https://github.com/sz3/libcimbar/releases/latest/cimbar_js.html) can be downloaded and opened/run in a local web browser -- no install required.\n\n## Build\n\nTo build, use the `package-wasm.sh` script in a docker container:\n\n```\ndocker run --mount type=bind,source=\"$(pwd)\",target=\"/usr/src/app\" -it emscripten/emsdk:3.1.39\n```\nThen, inside the container:\n```\nbash /usr/src/app/package-wasm.sh\n```\n\n## Alternative build for the adventurous\n\nAlternatively, if you have a local emscripten setup, you can try to run the package-wasm.sh commands piecemeal:\n\nTo build opencv.js:\n```\ncd /path/to/opencv\nmkdir opencv-build-wasm\ncd opencv-build-wasm\npython3 ../platforms/js/build_js.py build_wasm --build_wasm --emscripten_dir=/path/to/emscripten\n```\n\nWith opencv.js built:\n```\nmkdir build-wasm\ncd build-wasm\nsource /path/to/emscripten/emsdk/emsdk_env.sh\nemcmake cmake .. -DUSE_WASM=1 -DOPENCV_DIR=/path/to/opencv\nmake -j5 install\n```\n\n(do `-DUSE_WASM=2` to use asm.js instead of wasm)\n\n## What about a WASM cimbar decoder?\n\nSome day!\n"
        },
        {
          "name": "bitmap",
          "type": "tree",
          "content": null
        },
        {
          "name": "package-cimbar-html.py",
          "type": "blob",
          "size": 0.779296875,
          "content": "\ndef get_path(name):\n    fns = {\n        'index': 'web/index.html',\n        'cimbar_js': 'web/cimbar_js.js',\n        'main_js': 'web/main.js',\n        'output': 'web/cimbar_js.html',\n    }\n    return fns[name]\n\n\ndef read_file(name):\n    with open(get_path(name), 'rt') as f:\n        return f.read()\n\n\ndef read_script(name):\n    script = read_file(name)\n    return '<script type=\"text/javascript\">\\n' + script + '\\n'\n\n\ndef main():\n    contents = read_file('index')\n    main_js = read_script('main_js')\n    cimbar_js = read_script('cimbar_js')\n\n    contents = contents.replace('<script src=\"main.js\">', main_js)\n    contents = contents.replace('<script src=\"cimbar_js.js\">', cimbar_js)\n\n    with open(get_path('output'), 'wt') as f:\n        f.write(contents)\n\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "package-portable-linux.sh",
          "type": "blob",
          "size": 0.96484375,
          "content": "#!/bin/bash\n## targeting old glibc\n# docker run --mount type=bind,source=\"$(pwd)\",target=\"/usr/src/app\" -it ubuntu:16.04\n\nSCRIPT_DIR=$(dirname \"${BASH_SOURCE[0]}\")\ncd $SCRIPT_DIR\n\n# https://gist.github.com/jlblancoc/99521194aba975286c80f93e47966dc5\napt update\napt install -y software-properties-common\nadd-apt-repository -y ppa:ubuntu-toolchain-r/test\n\napt update\napt install -y pkgconf g++-7 python-pip\napt install -y libgles2-mesa-dev libglfw3-dev\n\n# cmake (via pip)\npython -m pip install cmake==3.21.4\n\n# use gcc7\nupdate-alternatives --install /usr/bin/cc cc /usr/bin/gcc-7 100\nupdate-alternatives --install /usr/bin/c++ c++ /usr/bin/g++-7 100\n\ncd opencv4/\nmkdir build-portable/ && cd build-portable/\n/usr/local/bin/cmake .. -DCMAKE_BUILD_TYPE=RELEASE -DBUILD_SHARED_LIBS=OFF -DOPENCV_GENERATE_PKGCONFIG=YES -DOPENCV_FORCE_3RDPARTY_BUILD=YES\nmake -j5 install\n\ncd $SCRIPT_DIR\nmkdir build-portable/ && cd build-portable/\n/usr/local/bin/cmake .. -DBUILD_PORTABLE_LINUX=1\nmake -j5 install\n"
        },
        {
          "name": "package-wasm.sh",
          "type": "blob",
          "size": 0.7744140625,
          "content": "#!/bin/bash\n#docker run --mount type=bind,source=\"$(pwd)\",target=\"/usr/src/app\" -it emscripten/emsdk:3.1.69 bash\n\ncd /usr/src/app\n\napt update\napt install python3 -y\n\ncd opencv4/\nmkdir opencv-build-wasm\ncd opencv-build-wasm\npython3 ../platforms/js/build_js.py build_wasm --build_wasm --emscripten_dir=/emsdk/upstream/emscripten\n\ncd /usr/src/app\nmkdir build-wasm\ncd build-wasm\nemcmake cmake .. -DUSE_WASM=1 -DOPENCV_DIR=/usr/src/app/opencv4\nmake -j5 install\n(cd ../web/ && tar -czvf cimbar.wasm.tar.gz cimbar_js.js cimbar_js.wasm index.html main.js)\n\ncd /usr/src/app\nmkdir build-asmjs\ncd build-asmjs\nemcmake cmake .. -DUSE_WASM=2 -DOPENCV_DIR=/usr/src/app/opencv4\nmake -j5 install\n(cd ../web/ && zip cimbar.asmjs.zip cimbar_js.js index.html main.js)\n\n(cd ../ && python3 package-cimbar-html.py)\n\n"
        },
        {
          "name": "samples",
          "type": "commit",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "web",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}