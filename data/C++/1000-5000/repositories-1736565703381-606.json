{
  "metadata": {
    "timestamp": 1736565703381,
    "page": 606,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "WayfireWM/wayfire",
      "stars": 2477,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1865234375,
          "content": "root = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\ncharset = utf-8\nindent_style = space\nindent_size = 4\n\n[*.{build,xml,yaml}]\nindent_size = 2\n\n[metadata/**.xml]\nindent_style = tab\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.9638671875,
          "content": "\n# Created by https://www.toptal.com/developers/gitignore/api/c++,meson,ninja,linux\n# Edit at https://www.toptal.com/developers/gitignore?templates=c++,meson,ninja,linux\n\n### C++ ###\n# Prerequisites\n*.d\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n*.smod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\n### Linux ###\n*~\n\n# temporary files which can be created if a process still has a handle open of a deleted file\n.fuse_hidden*\n\n# KDE directory preferences\n.directory\n\n# Linux trash folder which might appear on any partition or disk\n.Trash-*\n\n# .nfs files are created when an open file is removed but is still being accessed\n.nfs*\n\n### Meson ###\n# subproject directories\n/subprojects/*\n!/subprojects/*.wrap\n\n### Ninja ###\n.ninja_deps\n.ninja_log\n\nbuild/**\n\n# End of https://www.toptal.com/developers/gitignore/api/c++,meson,ninja,linux"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.443359375,
          "content": "[submodule \"subprojects/wf-config\"]\n\tpath = subprojects/wf-config\n\turl = https://github.com/WayfireWM/wf-config\n[submodule \"subprojects/wlroots\"]\n\tpath = subprojects/wlroots\n\turl = https://gitlab.freedesktop.org/wlroots/wlroots.git\n[submodule \"subprojects/wf-utils\"]\n\tpath = subprojects/wf-utils\n\turl = https://github.com/WayfireWM/wf-utils.git\n[submodule \"subprojects/wf-touch\"]\n\tpath = subprojects/wf-touch\n\turl = https://github.com/WayfireWM/wf-touch\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.0283203125,
          "content": "# Contributing\n\n## Documentation\n\nUpdating the documentation is one of the easiest way to contribute to the project.\nThe [wiki](https://github.com/WayfireWM/wayfire/wiki) is the primary location for documentation and is editable by everyone.\nFeel free to do minor changes or additions (for example, adding a missing option or adding a tip) without consulting anyone.\nMake contact with the maintainer(s) of the repository if you want to make big changes.\n\n## Issues\n\nOpening quality issues is another good way to contribute. See the issue templates for information about what a good issue would look like.\n\n## Pull requests\n\nPull requests are welcome, be it a bug fix or a new feature. A lot of ideas are already on the GitHub issue tracker:\n\n- The label [good first issue](https://github.com/WayfireWM/wayfire/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22)\n  indicates items which everyone with basic programming knowledge in C++ should be able to implement.\n- The label [easy](https://github.com/WayfireWM/wayfire/issues?q=is%3Aopen+is%3Aissue+label%3Aeasy)\n  indicates items which do not require deep knowledge about the codebase, and whose solution is relatively simple.\n- The label [help wanted](https://github.com/WayfireWM/wayfire/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22)\n  indicates items which require more hardware or knowledge than we have available, so external contributions are needed.\n- The label `low priority` indicates that something is unlikely to be implemented by @ammen99 anytime soon, but a PR would still be reviewed and merged.\n- The label `external-plugin` indicates that the feature can be implemented in a plugin which will not be included in the main repository.\n\nSome of the issues have milestones.\nThese are used to check which features are planned by @ammen99 for the given release.\nHowever, milestones are not firmly set, PRs by anyone for any issue can be merged at any time.\n\nIf you want to work on a feature or a bug fix which does not have an open issue, it would be best to open a new one or at least contact the maintainer(s) to make sure your changes will be accepted. The base repository is meant only for common functionality like Autostart, Expo, Vswitch, Scale or plugins which demonstrate particular core features like Cube, Fisheye, Extra-gestures, etc.\n\nIn any case, feel free to ask questions if you do not understand a part of the code, or if you are unsure how a particular feature should be implemented.\n\n### Code Formatting\n\nPlease use [`uncrustify`](https://github.com/uncrustify/uncrustify) (version `>=0.71`) to automatically format the code before committing:\n\n```sh\n$ git ls-files | grep \"hpp$\\|cpp$\" | xargs uncrustify -c uncrustify.ini --no-backup\n```\n\nYou can setup a [githook](https://git-scm.com/docs/githooks) to run this automatically before committing.\n\n## Contacting the maintainer(s)\n\nThe primary communication channels are Matrix (#wayfire:matrix.org) and IRC (#wayfire at Libera.chat).\nThe two channels are bridged together.\nUse GitHub to ask questions only if you are unable to access IRC and Matrix.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0556640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2018 Iliya Bozhinov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.7626953125,
          "content": "# [Wayfire]\n\n[Wayfire]: https://wayfire.org\n\n![Version](https://img.shields.io/github/v/release/WayfireWM/wayfire)\n[![Matrix: #wayfire:matrix.org](https://img.shields.io/badge/matrix-%23wayfire%3Amatrix.org-blue)](https://matrix.to/#/#wayfire:matrix.org)\n[![IRC: #wayfire on Libera.chat](https://img.shields.io/badge/IRC-%23wayfire%20at%20libera.chat-green)](https://web.libera.chat/#wayfire)\n[![Discord](https://img.shields.io/discord/1144831589877043220?label=Discord)](https://discord.gg/5SWAxmBCUH)\n[![CI](https://github.com/WayfireWM/wayfire/workflows/CI/badge.svg)](https://github.com/WayfireWM/wayfire/actions)\n[![Packaging status](https://repology.org/badge/tiny-repos/wayfire.svg)](https://repology.org/project/wayfire/versions)\n[![License](https://img.shields.io/github/license/WayfireWM/wayfire)](LICENSE)\n\n###### [Get started] | [Manual] | [Configuration]\n\n[Get started]: https://github.com/WayfireWM/wayfire/wiki/Tutorial\n[Manual]: https://github.com/WayfireWM/wayfire/wiki/General\n[Configuration]: https://github.com/WayfireWM/wayfire/wiki/Configuration\n\nWayfire is a 3D [Wayland] compositor, inspired by [Compiz] and based on [wlroots].\n\nIt aims to create a customizable, extendable and lightweight environment without sacrificing its appearance.\n\n[![Wayfire demos](https://img.youtube.com/vi_webp/2PtNzxDsxYM/maxresdefault.webp)](https://youtube.com/playlist?list=PLb7YRKEhWEBUIoT-a29UoJW9mhfzjpNle \"YouTube – Wayfire demos\")\n[![YouTube Play Button](https://www.iconfinder.com/icons/317714/download/png/16)](https://youtube.com/playlist?list=PLb7YRKEhWEBUIoT-a29UoJW9mhfzjpNle) · [Wayfire demos](https://youtube.com/playlist?list=PLb7YRKEhWEBUIoT-a29UoJW9mhfzjpNle)\n\n[Wayland]: https://wayland.freedesktop.org\n[wlroots]: https://github.com/swaywm/wlroots\n[Compiz]: https://launchpad.net/compiz\n\n## Dependencies\n\n### Wayfire Dependencies\n\nThese are the dependencies needed for building Wayfire.\n\n- [Cairo](https://cairographics.org)\n- [Pango](https://pango.gnome.org/) and PangoCairo\n- [FreeType](https://freetype.org)\n- [GLM](https://glm.g-truc.net)\n- [libdrm](https://dri.freedesktop.org/wiki/DRM/)\n- [libevdev](https://freedesktop.org/wiki/Software/libevdev/)\n- [libGL](https://mesa3d.org)\n- [libinput](https://freedesktop.org/wiki/Software/libinput/)\n- [libjpeg](https://libjpeg-turbo.org)\n- [libpng](http://libpng.org/pub/png/libpng.html)\n- [libxkbcommon](https://xkbcommon.org)\n- [libxml2](http://xmlsoft.org/)\n- [Pixman](https://pixman.org)\n- [pkg-config](https://freedesktop.org/wiki/Software/pkg-config/)\n- [Wayland](https://wayland.freedesktop.org)\n- [wayland-protocols](https://gitlab.freedesktop.org/wayland/wayland-protocols)\n- [wf-config](https://github.com/WayfireWM/wf-config)\n- [wlroots](https://github.com/swaywm/wlroots)\n\n### wlroots Dependencies\n\nThese are the dependencies needed for building wlroots, and should be installed before building it.\nThey are relevant for cases when the system doesn't have a version of wlroots installed.\n\n#### DRM Backend (required)\n\n- [libdisplay-info-dev](https://gitlab.freedesktop.org/emersion/libdisplay-info)\n- [hwdata-dev](https://github.com/vcrhonek/hwdata)\n\n#### GLES2 renderer (required)\n- [libglvnd](https://gitlab.freedesktop.org/glvnd/libglvnd)\n- [mesa](https://gitlab.freedesktop.org/mesa/mesa) (with libEGL and gbm support)\n\n#### Libinput Backend (required)\n- [libinput](https://gitlab.freedesktop.org/libinput/libinput)\n\n#### Session Provider (required)\n\n- libudev (via [systemd](https://systemd.io/) **or** other providers)\n- [seatd](https://git.sr.ht/~kennylevinsen/seatd)\n\n#### XWayland Support (optional)\n\n- [xcb](https://xcb.freedesktop.org/)\n- [xcb-composite](https://xorg.freedesktop.org/wiki/)\n- [xcb-render](https://xorg.freedesktop.org/wiki/)\n- [xcb-xfixes](https://xorg.freedesktop.org/wiki/)\n\n#### X11 Backend (optional)\n\n- [xcb](https://xcb.freedesktop.org/)\n- [x11-xcb](https://xcb.freedesktop.org/)\n- [xcb-xinput](https://xorg.freedesktop.org/wiki/)\n- [xcb-xfixes](https://xorg.freedesktop.org/wiki/)\n\n## Installation\n\nThe easiest way to install Wayfire, wf-shell and WCM to get a functional desktop is to use the [install scripts](https://github.com/WayfireWM/wf-install).\n\nAlternatively, you can build from source:\n\n``` sh\nmeson build\nninja -C build\nsudo ninja -C build install\n```\n\n**Note**: `wf-config` and `wlroots` can be built as submodules, by specifying\n`-Duse_system_wfconfig=disabled` and `-Duse_system_wlroots=disabled` options to `meson`.\nThis is the default if they are not present on your system.\n\nInstalling [wf-shell](https://github.com/WayfireWM/wf-shell) is recommended for a complete experience.\n\n###### Arch Linux\n\n[wayfire](https://aur.archlinux.org/packages/wayfire/) and [wayfire-git] are available in the [AUR].\n\n``` sh\nyay -S wayfire\n```\n\n[AUR]: https://aur.archlinux.org\n[wayfire-git]: https://aur.archlinux.org/packages/wayfire-git/\n\n###### Exherbo\n\n``` sh\ncave resolve -x wayfire\n```\n\n###### Fedora\n\n``` sh\ndnf install wayfire\n```\n\n###### FreeBSD\nInstall the latest release and recommended addons with\n``` sh\npkg install wayfire wayfire-plugins-extra wf-shell wcm\n```\n\n###### Gentoo\nInstall the latest release with\n```sh\nemerge --ask --verbose wayfire\n```\nand to use the live version\n```sh\nemerge --ask --verbose \"=gui-wm/wayfire-9999\"\n```\n\n###### NixOS\n\nEnable Wayfire in your NixOS configuration:\n```nix\nprograms.wayfire = {\n  enable = true;\n  plugins = with pkgs.wayfirePlugins; [\n    wcm\n    wf-shell\n    wayfire-plugins-extra\n  ];\n};\n```\n\n###### Ubuntu\n\n```\napt install wayfire\n```\n\n###### Void\n\n``` sh\nxbps-install -S wayfire\n```\n\n## Configuration\n\nCopy [`wayfire.ini`] to `~/.config/wayfire.ini`.\nBefore running Wayfire, you may want to change the command to start a terminal.\nSee the [Configuration] document for information on the options.\n\n[`wayfire.ini`]: wayfire.ini\n\n## Running\n\nRun [`wayfire`][Manual] from a TTY, or via a Wayland-compatible login manager.\n"
        },
        {
          "name": "config.h.in",
          "type": "blob",
          "size": 0.3720703125,
          "content": "#ifndef CONFIG_H\n#define CONFIG_H\n\n#define INSTALL_PREFIX \"@INSTALL_PREFIX@\"\n#define PLUGIN_PATH \"@PLUGIN_PATH@\"\n#define PLUGIN_XML_DIR \"@PLUGIN_XML_DIR@\"\n#define SYSCONFDIR \"@SYSCONFDIR@\"\n#define WF_DEFAULT_CONFIG_BACKEND \"@DEFAULT_CONFIG_BACKEND@\"\n#mesondefine BUILD_WITH_IMAGEIO\n#mesondefine USE_GLES32\n#mesondefine WF_HAS_XWAYLAND\n\n\n#endif /* end of include guard: CONFIG_H */\n"
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 7.7353515625,
          "content": "project(\n\t'wayfire',\n\t'c',\n\t'cpp',\n\tversion: '0.10.0',\n\tlicense: 'MIT',\n\tmeson_version: '>=0.63.0',\n\tdefault_options: [\n\t\t'cpp_std=c++17',\n\t\t'c_std=c11',\n\t\t'warning_level=2',\n\t\t'werror=false',\n\t],\n)\n\nversion = '\"@0@\"'.format(meson.project_version())\nadd_project_arguments('-DWAYFIRE_VERSION=@0@'.format(version), language: 'cpp')\n\nwayfire_api_inc  = include_directories('src/api')\n\nwayland_server = dependency('wayland-server')\nwayland_client = dependency('wayland-client')\nwayland_cursor = dependency('wayland-cursor')\nwayland_protos = dependency('wayland-protocols', version: '>=1.12')\ncairo          = dependency('cairo')\npango          = dependency('pango')\npangocairo     = dependency('pangocairo')\ndrm            = dependency('libdrm')\negl            = dependency('egl')\nglesv2         = dependency('glesv2')\nglm            = dependency('glm', required: false)\nlibinput       = dependency('libinput', version: '>=1.7.0')\npixman         = dependency('pixman-1')\nxkbcommon      = dependency('xkbcommon')\nlibdl          = meson.get_compiler('cpp').find_library('dl')\njson           = dependency('nlohmann_json', version: '>= 3.11.2')\n\n# We're not to use system wlroots: So we'll use the subproject\nif get_option('use_system_wlroots').disabled()\n\tuse_system_wlroots = false\n\twlroots = subproject('wlroots', default_options : ['examples=false']).get_variable('wlroots')\n\nelif get_option('use_system_wlroots').enabled()\n\tuse_system_wlroots = true\n\twlroots = dependency('wlroots-0.18', version: ['>=0.18.0', '<0.19.0'], required: true)\n\nelif get_option('use_system_wlroots').auto()\n\tmessage( 'SEARCHING FOR WLROOTS' )\n\twlroots = dependency('wlroots-0.18', version: ['>=0.18.0', '<0.19.0'], required: false)\n\tuse_system_wlroots = true\n\tif not wlroots.found()\n\t\tuse_system_wlroots = false\n\t\twlroots = subproject('wlroots', default_options : ['examples=false']).get_variable('wlroots')\n\tendif\nendif\n\nwlroots_features = {\n  'xwayland': false,\n  'drm_backend': false,\n  'gles2_renderer': false,\n  'libinput_backend': false,\n  'session': false,\n  'x11_backend': false,\n}\n\nforeach name, _ : wlroots_features\n  var_name = 'have_' + name.underscorify()\n  wlroots_features += { name: wlroots.get_variable(pkgconfig: var_name, internal: var_name) == 'true' }\nendforeach\n\nrequired_wlroots_features= [\n  'drm_backend',\n  'gles2_renderer',\n  'session',\n  'libinput_backend',\n]\nmissing_wlroots_features = []\n\n# Required features based on currently exposed public api\nforeach required_feature : required_wlroots_features\n  if not wlroots_features[required_feature]\n    missing_wlroots_features += required_feature\n  endif\nendforeach\n\nif missing_wlroots_features.length() > 0\n  error('wlroots is missing the following required features: @0@'.format(' '.join(missing_wlroots_features)))\nendif\n\n# We're not to use system wlroots: So we'll use the subproject\nif get_option('use_system_wfconfig').disabled()\n\tuse_system_wfconfig = false\n\twfconfig = subproject('wf-config').get_variable('wfconfig')\n\nelif get_option('use_system_wfconfig').enabled()\n\tuse_system_wfconfig = true\n\twfconfig = dependency('wf-config', version: ['>=0.10.0', '<0.11.0'], required: true)\n\nelif get_option('use_system_wfconfig').auto()\n\twfconfig = dependency('wf-config', version: ['>=0.10.0', '<0.11.0'], required: false)\n\tuse_system_wfconfig = true\n\tif not wfconfig.found()\n\t\tuse_system_wfconfig = false\n\t\twfconfig = subproject('wf-config').get_variable('wfconfig')\n\tendif\nendif\n\nif not glm.found() and not meson.get_compiler('cpp').check_header('glm/glm.hpp')\n  error('GLM not found, and directly using the header \\'glm/glm.hpp\\' is not possible.')\nendif\n\nbacktrace = meson.get_compiler('cpp').find_library('execinfo', required: false)\n\nwfutils = subproject('wf-utils').get_variable('wfutils')\nwftouch = subproject('wf-touch').get_variable('wftouch')\n\nneeds_libinotify = ['freebsd', 'dragonfly'].contains(host_machine.system())\nlibinotify       = dependency('libinotify', required: needs_libinotify)\n\njpeg = dependency('libjpeg', required: false)\npng  = dependency('libpng',  required: false)\n\n# backtrace() is in a separate library on FreeBSD and Linux with musl\nbacktrace = meson.get_compiler('cpp').find_library('execinfo', required: false)\n\nconf_data = configuration_data()\n\nconf_data.set('INSTALL_PREFIX', get_option('prefix'))\nconf_data.set('PLUGIN_PATH', join_paths(get_option('prefix'), get_option('libdir'), 'wayfire'))\nmetadata_dir_suffix = 'share/wayfire/metadata'\nconf_data.set('PLUGIN_XML_DIR', join_paths(get_option('prefix'), metadata_dir_suffix))\nsysconfdir = join_paths(get_option('prefix'), get_option('sysconfdir'))\nconf_data.set('SYSCONFDIR', sysconfdir)\npkgdatadir = join_paths(get_option('prefix'), 'share', 'wayfire', 'protocols')\n\nif get_option('default_config_backend') == 'default'\n  conf_data.set('DEFAULT_CONFIG_BACKEND', join_paths(conf_data.get('PLUGIN_PATH'), 'libdefault-config-backend.so'))\nelse\n  conf_data.set('DEFAULT_CONFIG_BACKEND', get_option('default_config_backend'))\nendif\n\ncpp = meson.get_compiler('cpp')\n\n# needed to dlopen() plugins\n# -E is for RTTI/dynamic_cast across plugins\nadd_project_link_arguments(['-rdynamic', '-Wl,-E'], language: 'cpp')\n\nproject_args = ['-DWLR_USE_UNSTABLE']\n# Needed for dlclose to actually free plugin memory on gcc+glibc\nif cpp.has_argument('-fno-gnu-unique')\n  project_args += '-fno-gnu-unique'\nendif\nadd_project_arguments(project_args, language: ['cpp', 'c'])\n\n# Needed on some older compilers\nif cpp.has_link_argument('-lc++fs')\n  add_project_link_arguments(['-lc++fs'], language: 'cpp')\nelif cpp.has_link_argument('-lc++experimental')\n  add_project_link_arguments(['-lc++experimental'], language: 'cpp')\nelif cpp.has_link_argument('-lstdc++fs')\n  add_project_link_arguments(['-lstdc++fs'], language: 'cpp')\nendif\n\nif get_option('enable_gles32')\n  cpp.check_header('GLES3/gl32.h', dependencies: glesv2, required: true)\n  conf_data.set('USE_GLES32', true)\nelse\n  conf_data.set('USE_GLES32', false)\nendif\n\nif png.found() and jpeg.found()\n  conf_data.set('BUILD_WITH_IMAGEIO', true)\nelse\n  conf_data.set('BUILD_WITH_IMAGEIO', false)\nendif\n\nwayfire_conf_inc = include_directories(['.'])\n\nadd_project_arguments(['-Wno-unused-parameter'], language: 'cpp')\n\nif get_option('xwayland').enabled() and not wlroots_features['xwayland']\n  error('Cannot enable Xwayland in wayfire: wlroots has been built without Xwayland support')\nendif\n\nif get_option('xwayland').enabled() or (get_option('xwayland').auto() and wlroots_features['xwayland'])\n  xcb = dependency('xcb')\n  conf_data.set('WF_HAS_XWAYLAND', 1)\nelse\n  xcb = declare_dependency() # dummy dep\n  conf_data.set('WF_HAS_XWAYLAND', 0)\nendif\n\nif get_option('print_trace')\n  print_trace = true\nelse\n  print_trace = false\nendif\n\nadd_project_arguments(['-DWF_USE_CONFIG_H'], language: ['cpp', 'c'])\nconfigure_file(input: 'config.h.in',\n               output: 'config.h',\n               install: true,\n               install_dir: join_paths('include', 'wayfire'),\n               configuration: conf_data)\n\nsubdir('proto')\nsubdir('src')\nsubdir('man')\nsubdir('metadata')\nsubdir('plugins')\n\n# Unit tests\ndoctest = dependency('doctest', required: get_option('tests'))\nif doctest.found()\n    subdir('test')\nendif\n\ninstall_data('wayfire.desktop', install_dir :\n    join_paths(get_option('prefix'), 'share/wayland-sessions'))\n\nsummary = [\n\t'',\n\t'----------------',\n\t'wayfire @0@'.format(meson.project_version()),\n\t'',\n    'system wfconfig: @0@'.format(use_system_wfconfig),\n    ' system wlroots: @0@'.format(use_system_wlroots),\n    '       xwayland: @0@'.format(wlroots_features['xwayland']),\n    '    x11-backend: @0@'.format(wlroots_features['x11_backend']),\n    '        imageio: @0@'.format(conf_data.get('BUILD_WITH_IMAGEIO')),\n    '         gles32: @0@'.format(conf_data.get('USE_GLES32')),\n    '    print trace: @0@'.format(print_trace),\n    '     unit tests: @0@'.format(doctest.found()),\n    '----------------',\n    ''\n]\nmessage('\\n'.join(summary))\n"
        },
        {
          "name": "meson_options.txt",
          "type": "blob",
          "size": 0.8798828125,
          "content": "option('enable_gles32', type: 'boolean', value: true, description: 'Enable usage of GLES 3.2')\noption('enable_openmp', type: 'boolean', value: true, description: 'Enable usage of OpenMP')\noption('use_system_wfconfig', type: 'feature', value: 'auto', description: 'Use the system-wide installation of wf-config')\noption('use_system_wlroots', type: 'feature', value: 'auto', description: 'Use the system-wide installation of wlroots')\noption('xwayland', type: 'feature', value: 'auto', description: 'Build with xwayland support. Requires wlroots also built with xwayland support')\noption('default_config_backend', type: 'string', value: 'default', description: 'Default configuration backend to use')\noption('print_trace', type: 'boolean', value: true, description: 'Print stack trace in debug logs (disables coredump)')\noption('tests', type: 'feature', value: 'auto', description: 'Enable unit tests')\n"
        },
        {
          "name": "metadata",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "proto",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "subprojects",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "uncrustify.ini",
          "type": "blob",
          "size": 43.0859375,
          "content": "# Uncrustify_d-0.71.0-21-d4da2b0f\n\n#\n# General options\n#\n\n# The type of line endings.\n#\n# Default: auto\nnewlines                        = auto     # lf/crlf/cr/auto\n\n# The original size of tabs in the input.\n#\n# Default: 8\ninput_tab_size                  = 4        # unsigned number\n\n# The size of tabs in the output (only used if align_with_tabs=true).\n#\n# Default: 8\noutput_tab_size                 = 4        # unsigned number\n\n# The ASCII value of the string escape char, usually 92 (\\) or (Pawn) 94 (^).\n#\n# Default: 92\nstring_escape_char              = 92       # unsigned number\n\n# Alternate string escape char (usually only used for Pawn).\n# Only works right before the quote char.\nstring_escape_char2             = 0        # unsigned number\n\n# Replace tab characters found in string literals with the escape sequence \\t\n# instead.\nstring_replace_tab_chars        = true    # true/false\n\n# Allow interpreting '>=' and '>>=' as part of a template in code like\n# 'void f(list<list<B>>=val);'. If true, 'assert(x<0 && y>=3)' will be broken.\n# Improvements to template detection may make this option obsolete.\ntok_split_gte                   = false    # true/false\n\n# Disable formatting of NL_CONT ('\\\\n') ended lines (e.g. multiline macros)\ndisable_processing_nl_cont      = false    # true/false\n\n# Specify the marker used in comments to disable processing of part of the\n# file.\n# The comment should be used alone in one line.\n#\n# Default:  *INDENT-OFF*\ndisable_processing_cmt          = \" *INDENT-OFF*\"      # string\n\n# Specify the marker used in comments to (re)enable processing in a file.\n# The comment should be used alone in one line.\n#\n# Default:  *INDENT-ON*\nenable_processing_cmt           = \" *INDENT-ON*\"     # string\n\n# Enable parsing of digraphs.\nenable_digraphs                 = false    # true/false\n\n# Add or remove the UTF-8 BOM (recommend 'remove').\nutf8_bom                        = ignore   # ignore/add/remove/force\n\n# If the file contains bytes with values between 128 and 255, but is not\n# UTF-8, then output as UTF-8.\nutf8_byte                       = false    # true/false\n\n# Force the output encoding to UTF-8.\nutf8_force                      = false    # true/false\n\n# Add or remove space between 'do' and '{'.\nsp_do_brace_open                = force   # ignore/add/remove/force\n\n# Add or remove space between '}' and 'while'.\nsp_brace_close_while            = force   # ignore/add/remove/force\n\n# Add or remove space between 'while' and '('.\nsp_while_paren_open             = force   # ignore/add/remove/force\n\n#\n# Spacing options\n#\n\n# Add or remove space around non-assignment symbolic operators ('+', '/', '%',\n# '<<', and so forth).\nsp_arith                        = force   # ignore/add/remove/force\n\n# Add or remove space around assignment operator '=', '+=', etc.\nsp_assign                       = force   # ignore/add/remove/force\n\n# Add or remove space around '=' in C++11 lambda capture specifications.\n#\n# Overrides sp_assign.\nsp_cpp_lambda_assign            = remove   # ignore/add/remove/force\n\n# Add or remove space after the capture specification of a C++11 lambda when\n# an argument list is present, as in '[] <here> (int x){ ... }'.\nsp_cpp_lambda_square_paren      = force   # ignore/add/remove/force\n\n# Add or remove space after the capture specification of a C++11 lambda with\n# no argument list is present, as in '[] <here> { ... }'.\nsp_cpp_lambda_square_brace      = force   # ignore/add/remove/force\n\n# Add or remove space after the argument list of a C++11 lambda, as in\n# '[](int x) <here> { ... }'.\nsp_cpp_lambda_paren_brace       = force   # ignore/add/remove/force\n\n# Add or remove space in 'NS_ENUM ('.\nsp_enum_paren                   = ignore   # ignore/add/remove/force\n\n# Add or remove space around assignment '=' in enum.\nsp_enum_assign                  = add   # ignore/add/remove/force\n\n# Add or remove space around assignment ':' in enum.\nsp_enum_colon                   = force   # ignore/add/remove/force\n\n# Add or remove space around boolean operators '&&' and '||'.\nsp_bool                         = force   # ignore/add/remove/force\n\n# Add or remove space around compare operator '<', '>', '==', etc.\nsp_compare                      = force   # ignore/add/remove/force\n\n# Add or remove space inside '(' and ')'.\nsp_inside_paren                 = remove   # ignore/add/remove/force\n\n# Add or remove space between nested parentheses, i.e. '((' vs. ') )'.\nsp_paren_paren                  = remove   # ignore/add/remove/force\n\n# Add or remove space between back-to-back parentheses, i.e. ')(' vs. ') ('.\nsp_cparen_oparen                = remove   # ignore/add/remove/force\n\n# Add or remove space between ')' and '{'.\nsp_paren_brace                  = add   # ignore/add/remove/force\n\n# Add or remove space between nested braces, i.e. '{{' vs '{ {'.\nsp_brace_brace                  = remove   # ignore/add/remove/force\n\n# Add or remove space before pointer star '*'.\nsp_before_ptr_star              = force   # ignore/add/remove/force\n\n# Add or remove space between pointer stars '*'.\nsp_between_ptr_star             = remove   # ignore/add/remove/force\n\n# Add or remove space after pointer star '*', if followed by a word.\n#\n# Overrides sp_type_func.\nsp_after_ptr_star               = remove   # ignore/add/remove/force\n\n# Add or remove space before pointer star '*' that isn't followed by a\n# variable name. If set to ignore, sp_before_ptr_star is used instead.\nsp_before_unnamed_ptr_star      = remove   # ignore/add/remove/force\n\n# Add or remove space before a pointer star '*', if followed by a function\n# prototype or function definition.\nsp_before_ptr_star_func         = force   # ignore/add/remove/force\n\n# Add or remove space before a reference sign '&'.\nsp_before_byref                 = ignore   # ignore/add/remove/force\n\n# Add or remove space after reference sign '&', if followed by a word.\n#\n# Overrides sp_type_func.\nsp_after_byref                  = force   # ignore/add/remove/force\n\n# Add or remove space before a reference sign '&', if followed by a function\n# prototype or function definition.\nsp_before_byref_func            = remove   # ignore/add/remove/force\n\n# Add or remove space between 'decltype(...)' and word.\nsp_after_decltype               = force   # ignore/add/remove/force\n\n# Add or remove space before '<'.\nsp_before_angle                 = remove   # ignore/add/remove/force\n\n# Add or remove space inside '<' and '>'.\nsp_inside_angle                 = remove   # ignore/add/remove/force\n\n# Add or remove space inside '<>'.\nsp_inside_angle_empty           = remove   # ignore/add/remove/force\n\n# Add or remove space between '>' and ':'.\nsp_angle_colon                  = force   # ignore/add/remove/force\n\n# Add or remove space after '>'.\nsp_after_angle                  = force   # ignore/add/remove/force\n\n# Add or remove space between '>' and '(' as found in 'new List<byte>(foo);'.\nsp_angle_paren                  = remove   # ignore/add/remove/force\n\n# Add or remove space between '>' and '()' as found in 'new List<byte>();'.\nsp_angle_paren_empty            = remove   # ignore/add/remove/force\n\n# Add or remove space between '>' and a word as in 'List<byte> m;' or\n# 'template <typename T> static ...'.\nsp_angle_word                   = force   # ignore/add/remove/force\n\n# Add or remove space between '>' and '>' in '>>' (template stuff).\n#\n# Default: add\nsp_angle_shift                  = remove      # ignore/add/remove/force\n\n# (C++11) Permit removal of the space between '>>' in 'foo<bar<int> >'. Note\n# that sp_angle_shift cannot remove the space without this option.\nsp_permit_cpp11_shift           = true    # true/false\n\n# Add or remove space before '(' of control statements ('if', 'for', 'switch',\n# 'while', etc.).\nsp_before_sparen                = force   # ignore/add/remove/force\n\n# Add or remove space inside '(' and ')' of control statements.\nsp_inside_sparen                = remove   # ignore/add/remove/force\n\n# Add or remove space between ')' and '{' of of control statements.\nsp_sparen_brace                 = force   # ignore/add/remove/force\n\n# Add or remove space before empty statement ';' on 'if', 'for' and 'while'.\nsp_special_semi                 = remove   # ignore/add/remove/force\n\n# Add or remove space before ';' in non-empty 'for' statements.\nsp_before_semi_for              = remove   # ignore/add/remove/force\n\n# Add or remove space before a semicolon of an empty part of a for statement.\nsp_before_semi_for_empty        = remove   # ignore/add/remove/force\n\n# Add or remove space after ';', except when followed by a comment.\n#\n# Default: add\nsp_after_semi                   = remove      # ignore/add/remove/force\n\n# Add or remove space after ';' in non-empty 'for' statements.\n#\n# Default: force\nsp_after_semi_for               = force    # ignore/add/remove/force\n\n# Add or remove space after the final semicolon of an empty part of a for\n# statement, as in 'for ( ; ; <here> )'.\nsp_after_semi_for_empty         = remove   # ignore/add/remove/force\n\n# Add or remove space before '[' (except '[]').\nsp_before_square                = remove   # ignore/add/remove/force\n\n# Add or remove space before '[' for a variable definition.\n#\n# Default: remove\nsp_before_vardef_square         = remove   # ignore/add/remove/force\n\n# Add or remove space before '[]'.\nsp_before_squares               = remove   # ignore/add/remove/force\n\n# Add or remove space before C++17 structured bindings.\nsp_cpp_before_struct_binding    = force   # ignore/add/remove/force\n\n# Add or remove space inside a non-empty '[' and ']'.\nsp_inside_square                = remove   # ignore/add/remove/force\n\n# Add or remove space after ',', i.e. 'a,b' vs. 'a, b'.\nsp_after_comma                  = force   # ignore/add/remove/force\n\n# Add or remove space before the variadic '...' when preceded by a\n# non-punctuator.\nsp_before_ellipsis              = remove   # ignore/add/remove/force\n\n# Add or remove space between a type and '...'.\nsp_type_ellipsis                = remove   # ignore/add/remove/force\n\n# Add or remove space between ')' and '...'.\nsp_paren_ellipsis               = remove   # ignore/add/remove/force\n\n# Add or remove space between ')' and a qualifier such as 'const'.\nsp_paren_qualifier              = force   # ignore/add/remove/force\n\n# Add or remove space between ')' and 'noexcept'.\nsp_paren_noexcept               = force   # ignore/add/remove/force\n\n# Add or remove space after class ':'.\nsp_after_class_colon            = force   # ignore/add/remove/force\n\n# Add or remove space before class ':'.\nsp_before_class_colon           = force   # ignore/add/remove/force\n\n# Add or remove space after class constructor ':'.\nsp_after_constr_colon           = force   # ignore/add/remove/force\n\n# Add or remove space before class constructor ':'.\nsp_before_constr_colon          = force   # ignore/add/remove/force\n\n# Add or remove space between 'operator' and operator sign.\nsp_after_operator               = force   # ignore/add/remove/force\n\n# Add or remove space after C/D cast, i.e. 'cast(int)a' vs. 'cast(int) a' or\n# '(int)a' vs. '(int) a'.\nsp_after_cast                   = remove   # ignore/add/remove/force\n\n# Add or remove spaces inside cast parentheses.\nsp_inside_paren_cast            = remove   # ignore/add/remove/force\n\n# Add or remove space between the type and open parenthesis in a C++ cast,\n# i.e. 'int(exp)' vs. 'int (exp)'.\nsp_cpp_cast_paren               = remove   # ignore/add/remove/force\n\n# Add or remove space between 'sizeof' and '('.\nsp_sizeof_paren                 = remove   # ignore/add/remove/force\n\n# Add or remove space between 'sizeof' and '...'.\nsp_sizeof_ellipsis              = remove   # ignore/add/remove/force\n\n# Add or remove space between 'sizeof...' and '('.\nsp_sizeof_ellipsis_paren        = remove   # ignore/add/remove/force\n\n# Add or remove space between 'decltype' and '('.\nsp_decltype_paren               = remove   # ignore/add/remove/force\n\n# Add or remove space after open brace in an unnamed temporary\n# direct-list-initialization.\nsp_after_type_brace_init_lst_open = remove   # ignore/add/remove/force\n\n# Add or remove space before close brace in an unnamed temporary\n# direct-list-initialization.\nsp_before_type_brace_init_lst_close = remove   # ignore/add/remove/force\n\n# Add or remove space inside '{}'.\nsp_inside_braces_empty          = remove   # ignore/add/remove/force\n\n# Add or remove space around trailing return operator '->'.\nsp_trailing_return              = force   # ignore/add/remove/force\n\n# Add or remove space between type and open brace of an unnamed temporary\n# direct-list-initialization.\nsp_type_brace_init_lst          = remove   # ignore/add/remove/force\n\n# Add or remove space between function name and '(' on function declaration.\nsp_func_proto_paren             = remove   # ignore/add/remove/force\n\n# Add or remove space between function name and '()' on function declaration\n# without parameters.\nsp_func_proto_paren_empty       = remove   # ignore/add/remove/force\n\n# Add or remove space between function name and '(' with a typedef specifier.\nsp_func_type_paren              = remove   # ignore/add/remove/force\n\n# Add or remove space between alias name and '(' of a non-pointer function type typedef.\nsp_func_def_paren               = remove   # ignore/add/remove/force\n\n# Add or remove space between function name and '()' on function definition\n# without parameters.\nsp_func_def_paren_empty         = remove   # ignore/add/remove/force\n\n# Add or remove space inside empty function '()'.\n# Overrides sp_after_angle unless use_sp_after_angle_always is set to true.\nsp_inside_fparens               = remove   # ignore/add/remove/force\n\n# Add or remove space inside function '(' and ')'.\nsp_inside_fparen                = remove   # ignore/add/remove/force\n\n# Add or remove space inside the first parentheses in a function type, as in\n# 'void (*x)(...)'.\nsp_inside_tparen                = remove   # ignore/add/remove/force\n\n# Add or remove space between ']' and '(' when part of a function call.\nsp_square_fparen                = remove   # ignore/add/remove/force\n\n# Add or remove space between ')' and '{' of function.\nsp_fparen_brace                 = force   # ignore/add/remove/force\n\n# Add or remove space between function name and '(' on function calls.\nsp_func_call_paren              = remove   # ignore/add/remove/force\n\n# Add or remove space between a constructor/destructor and the open\n# parenthesis.\nsp_func_class_paren             = remove   # ignore/add/remove/force\n\n# Add or remove space between a constructor without parameters or destructor\n# and '()'.\nsp_func_class_paren_empty       = remove   # ignore/add/remove/force\n\n# Add or remove space between 'return' and '('.\nsp_return_paren                 = force   # ignore/add/remove/force\n\n# Add or remove space between 'return' and '{'.\nsp_return_brace                 = force   # ignore/add/remove/force\n\n# Add or remove space between '__attribute__' and '('.\nsp_attribute_paren              = remove   # ignore/add/remove/force\n\n# Add or remove space between 'defined' and '(' in '#if defined (FOO)'.\nsp_defined_paren                = force   # ignore/add/remove/force\n\n# Add or remove space between 'throw' and '(' in 'throw (something)'.\nsp_throw_paren                  = force   # ignore/add/remove/force\n\n# Add or remove space between 'throw' and anything other than '(' as in\n# '@throw [...];'.\nsp_after_throw                  = force   # ignore/add/remove/force\n\n# Add or remove space between 'catch' and '(' in 'catch (something) { }'.\n# If set to ignore, sp_before_sparen is used.\nsp_catch_paren                  = force   # ignore/add/remove/force\n\n# Add or remove space between a macro function ')' and its definition.\nsp_macro_func                   = add   # ignore/add/remove/force\n\n# Add or remove space between 'else' and '{' if on the same line.\nsp_else_brace                   = force   # ignore/add/remove/force\n\n# Add or remove space between '}' and 'else' if on the same line.\nsp_brace_else                   = force   # ignore/add/remove/force\n\n# Add or remove space between '}' and the name of a typedef on the same line.\nsp_brace_typedef                = force   # ignore/add/remove/force\n\n# Add or remove space before the '{' of a 'catch' statement, if the '{' and\n# 'catch' are on the same line, as in 'catch (decl) <here> {'.\nsp_catch_brace                  = force   # ignore/add/remove/force\n\n# Add or remove space between '}' and 'catch' if on the same line.\nsp_brace_catch                  = force   # ignore/add/remove/force\n\n# Add or remove space between 'try' and '{' if on the same line.\nsp_try_brace                    = force   # ignore/add/remove/force\n\n# Add or remove space between a variable and '{' for C++ uniform\n# initialization.\nsp_word_brace_init_lst          = remove   # ignore/add/remove/force\n\n# Add or remove space before the '::' operator.\nsp_before_dc                    = remove   # ignore/add/remove/force\n\n# Add or remove space after the '::' operator.\nsp_after_dc                     = remove   # ignore/add/remove/force\n\n# Add or remove space before a backslash-newline at the end of a line.\n#\n# Default: add\nsp_before_nl_cont               = add      # ignore/add/remove/force\n\n# Add or remove space around the ':' in 'b ? t : f'.\nsp_cond_colon                   = force   # ignore/add/remove/force\n\n# Add or remove space around the '?' in 'b ? t : f'.\nsp_cond_question                = force   # ignore/add/remove/force\n\n# In the abbreviated ternary form '(a ?: b)', add or remove space between '?'\n# and ':'.\n#\n# Overrides all other sp_cond_* options.\nsp_cond_ternary_short           = remove   # ignore/add/remove/force\n\n# Fix the spacing between 'case' and the label. Only 'ignore' and 'force' make\n# sense here.\nsp_case_label                   = force   # ignore/add/remove/force\n\n# Add or remove space after ':' in a Java/C++11 range-based 'for',\n# as in 'for (Type var : expr)'.\nsp_after_for_colon              = force   # ignore/add/remove/force\n\n# Add or remove space before ':' in a Java/C++11 range-based 'for',\n# as in 'for (Type var : expr)'.\nsp_before_for_colon             = force   # ignore/add/remove/force\n\n# Add or remove space after the opening of a C++ comment,\n# i.e. '// A' vs. '//A'.\nsp_cmt_cpp_start                = force   # ignore/add/remove/force\n\n# Add or remove space between #else or #endif and a trailing comment.\nsp_endif_cmt                    = force   # ignore/add/remove/force\n\n# Add or remove space after 'new', 'delete' and 'delete[]'.\nsp_after_new                    = force   # ignore/add/remove/force\n\n# Add or remove space between 'new' and '(' in 'new()'.\nsp_between_new_paren            = remove   # ignore/add/remove/force\n\n# Add or remove space between ')' and type in 'new(foo) BAR'.\nsp_after_newop_paren            = force   # ignore/add/remove/force\n\n# Add or remove space inside parenthesis of the new operator\n# as in 'new(foo) BAR'.\nsp_inside_newop_paren           = remove   # ignore/add/remove/force\n\n# Add or remove space before a trailing or embedded comment.\nsp_before_tr_emb_cmt            = force   # ignore/add/remove/force\n\n# Number of spaces before a trailing or embedded comment.\nsp_num_before_tr_emb_cmt        = 1        # unsigned number\n\n#\n# Indenting options\n#\n\n# The number of columns to indent per level. Usually 2, 3, 4, or 8.\n#\n# Default: 8\nindent_columns                  = 4        # unsigned number\n\n# The continuation indent. If non-zero, this overrides the indent of '(', '['\n# and '=' continuation indents. Negative values are OK; negative value is\n# absolute and not increased for each '(' or '[' level.\n#\n# For FreeBSD, this is set to 4.\nindent_continue                 = 0        # number\n\n# How to use tabs when indenting code.\n#\n# 0: Spaces only\n# 1: Indent with tabs to brace level, align with spaces (default)\n# 2: Indent and align with tabs, using spaces when not on a tabstop\n#\n# Default: 1\nindent_with_tabs                = 0        # unsigned number\n\n# Whether to indent strings broken by '\\' so that they line up.\nindent_align_string             = true    # true/false\n\n# Whether the 'extern \"C\"' body is indented.\nindent_extern                   = true    # true/false\n\n# Whether the 'class' body is indented.\nindent_class                    = true    # true/false\n\n# Whether to indent the stuff after a leading base class colon.\nindent_class_colon              = false    # true/false\n\n# Whether to indent based on a class colon instead of the stuff after the\n# colon. Requires indent_class_colon=true.\nindent_class_on_colon           = true    # true/false\n\n# Whether to indent the stuff after a leading class initializer colon.\nindent_constr_colon             = false    # true/false\n\n# Virtual indent from the ':' for member initializers.\n#\n# Default: 2\nindent_ctor_init_leading        = 2        # unsigned number\n\n# Whether to indent continued variable declarations instead of aligning.\nindent_var_def_cont             = true    # true/false\n\n# Whether to indent continued function call parameters one indent level,\n# rather than aligning parameters under the open parenthesis.\nindent_func_call_param          = true    # true/false\n\n# Whether to indent continued function definition parameters one indent level,\n# rather than aligning parameters under the open parenthesis.\nindent_func_def_param           = true    # true/false\n\n# Whether to indent continued function call prototype one indent level,\n# rather than aligning parameters under the open parenthesis.\nindent_func_proto_param         = true    # true/false\n\n# Whether to indent continued function call declaration one indent level,\n# rather than aligning parameters under the open parenthesis.\nindent_func_class_param         = true    # true/false\n\n# Whether to indent continued class variable constructors one indent level,\n# rather than aligning parameters under the open parenthesis.\nindent_func_ctor_var_param      = true    # true/false\n\n# Whether to indent continued template parameter list one indent level,\n# rather than aligning parameters under the open parenthesis.\nindent_template_param           = true    # true/false\n\n# Whether lines broken at '.' or '->' should be indented by a single indent.\n# The indent_member option will not be effective if this is set to true.\nindent_member_single            = true    # true/false\n\n# Whether to indent trailing single line ('//') comments relative to the code\n# instead of trying to keep the same absolute column.\nindent_relative_single_line_comments = true    # true/false\n\n# Spaces to indent 'case' from 'switch'. Usually 0 or indent_columns.\nindent_switch_case              = 0        # unsigned number\n\n# Spaces to shift the 'case' line, without affecting any other lines.\n# Usually 0.\nindent_case_shift               = 2        # unsigned number\n\n# How to indent access specifiers that are followed by a\n# colon.\n#\n#  >0: Absolute column where 1 is the leftmost column\n# <=0: Subtract from brace indent\n#\n# Default: 1\nindent_access_spec              = -2        # number\n\n# How to indent a close parenthesis after a newline.\n#\n# 0: Indent to body level (default)\n# 1: Align under the open parenthesis\n# 2: Indent to the brace level\nindent_paren_close              = 2        # unsigned number\n\n# Whether to align continued statements at the '='. If false or if the '=' is\n# followed by a newline, the next line is indent one tab.\n#\n# Default: true\nindent_align_assign             = false     # true/false\n\n# Whether to align continued statements at the '('. If false or the '(' is\n# followed by a newline, the next line indent is one tab.\n#\n# Default: true\nindent_align_paren              = false     # true/false\n\n# How to indent after a brace followed by another token (not a newline).\n# true:  indent all contained lines to match the token\n# false: indent all contained lines to match the brace\n#\n# Default: true\nindent_token_after_brace        = false     # true/false\n\n# Whether to indent the body of a C++11 lambda.\nindent_cpp_lambda_body          = false    # true/false\n#\n#\n# Newline adding and removing options\n#\n\n# Whether to collapse empty blocks between '{' and '}'.\nnl_collapse_empty_body          = true    # true/false\n\n# Don't split one-line braced assignments, as in 'foo_t f = { 1, 2 };'.\nnl_assign_leave_one_liners      = true    # true/false\n\n# Don't split one-line C++11 lambdas, as in '[]() { return 0; }'.\nnl_cpp_lambda_leave_one_liners  = true    # true/false\n\n# Add or remove newlines at the start of the file.\nnl_start_of_file                = remove   # ignore/add/remove/force\n\n# Add or remove newline at the end of the file.\nnl_end_of_file                  = force   # ignore/add/remove/force\n\n# The minimum number of newlines at the end of the file (only used if\n# nl_end_of_file is 'add' or 'force').\nnl_end_of_file_min              = 1        # unsigned number\n\n# Add or remove newline between '=' and '{'.\nnl_assign_brace                 = remove   # ignore/add/remove/force\n\n# Add or remove newline between a function call's ')' and '{', as in\n# 'list_for_each(item, &list) { }'.\nnl_fcall_brace                  = force   # ignore/add/remove/force\n\n# Add or remove newline between 'enum' and '{'.\nnl_enum_brace                   = force   # ignore/add/remove/force\n\n# Add or remove newline between 'enum' and 'class'.\nnl_enum_class                   = remove   # ignore/add/remove/force\n\n# Add or remove newline between 'enum class' and the identifier.\nnl_enum_class_identifier        = remove   # ignore/add/remove/force\n\n# Add or remove newline between 'enum class' type and ':'.\nnl_enum_identifier_colon        = remove   # ignore/add/remove/force\n\n# Add or remove newline between 'struct and '{'.\nnl_struct_brace                 = force   # ignore/add/remove/force\n\n# Add or remove newline between 'union' and '{'.\nnl_union_brace                  = force   # ignore/add/remove/force\n\n# Add or remove newline between 'if' and '{'.\nnl_if_brace                     = force   # ignore/add/remove/force\n\n# Add or remove newline between '}' and 'else'.\nnl_brace_else                   = remove   # ignore/add/remove/force\n\n# Add or remove newline between 'else if' and '{'. If set to ignore,\n# nl_if_brace is used instead.\nnl_elseif_brace                 = force   # ignore/add/remove/force\n\n# Add or remove newline between 'else' and '{'.\nnl_else_brace                   = force   # ignore/add/remove/force\n\n# Add or remove newline between 'else' and 'if'.\nnl_else_if                      = remove   # ignore/add/remove/force\n\n# Add or remove newline before '{' opening brace\nnl_before_opening_brace_func_class_def = force   # ignore/add/remove/force\n\n# Add or remove newline before 'if'/'else if' closing parenthesis.\nnl_before_if_closing_paren      = remove   # ignore/add/remove/force\n\n# Add or remove newline between 'try' and '{'.\nnl_try_brace                    = remove   # ignore/add/remove/force\n\n# Add or remove newline between 'for' and '{'.\nnl_for_brace                    = force   # ignore/add/remove/force\n\n# Add or remove newline before the '{' of a 'catch' statement, as in\n# 'catch (decl) <here> {'.\nnl_catch_brace                  = force   # ignore/add/remove/force\n\n# Add or remove newline between '}' and 'catch'.\nnl_brace_catch                  = remove   # ignore/add/remove/force\n\n# Add or remove newline between '}' and ')' in a function invocation.\nnl_brace_fparen                 = remove   # ignore/add/remove/force\n\n# Add or remove newline between 'while' and '{'.\nnl_while_brace                  = force   # ignore/add/remove/force\n\n# Add or remove newline between two open or close braces. Due to general\n# newline/brace handling, REMOVE may not work.\nnl_brace_brace                  = remove   # ignore/add/remove/force\n\n# Add or remove newline between 'do' and '{'.\nnl_do_brace                     = remove   # ignore/add/remove/force\n\n# Add or remove newline between '}' and 'while' of 'do' statement.\nnl_brace_while                  = remove   # ignore/add/remove/force\n\n# Add or remove newline between 'switch' and '{'.\nnl_switch_brace                 = force   # ignore/add/remove/force\n\n# Force a newline in a define after the macro name for multi-line defines.\nnl_multi_line_define            = true    # true/false\n\n# Whether to add a newline before 'case', and a blank line before a 'case'\n# statement that follows a ';' or '}'.\nnl_before_case                  = true    # true/false\n\n# Whether to add a newline after a 'case' statement.\nnl_after_case                   = true    # true/false\n\n# Add or remove newline between 'namespace' and '{'.\nnl_namespace_brace              = true   # ignore/add/remove/force\n\n# Add or remove newline after 'template<...>' of a template class.\nnl_template_class               = force   # ignore/add/remove/force\n\n# Add or remove newline after 'template<...>' of a template function.\nnl_template_func                = force   # ignore/add/remove/force\n\n# Add or remove newline between 'class' and '{'.\nnl_class_brace                  = force   # ignore/add/remove/force\n\n# Add or remove newline before first element, after comma, and after last\n# element, in 'enum'.\nnl_enum_own_lines               = force   # ignore/add/remove/force\n\n# Add or remove newline between return type and function name in a function\n# definition.\n# might be modified by nl_func_leave_one_liners\nnl_func_type_name               = remove   # ignore/add/remove/force\n\n# Add or remove newline between class specification and '::'\n# in 'void A::f() { }'. Only appears in separate member implementation (does\n# not appear with in-line implementation).\nnl_func_class_scope             = remove   # ignore/add/remove/force\n\n# Add or remove newline between function scope and name, as in\n# 'void A :: <here> f() { }'.\nnl_func_scope_name              = remove   # ignore/add/remove/force\n\n# Add or remove newline between return type and function name in a prototype.\nnl_func_proto_type_name         = remove   # ignore/add/remove/force\n\n# Add or remove newline between a function name and the opening '(' in the\n# declaration.\nnl_func_paren                   = remove   # ignore/add/remove/force\n\n# Add or remove newline between a function name and the opening '(' in the\n# definition.\nnl_func_def_paren               = remove   # ignore/add/remove/force\n\n# Add or remove newline between a function name and the opening '(' in the\n# call.\nnl_func_call_paren              = remove   # ignore/add/remove/force\n\n# Add or remove newline after each ',' in a function declaration.\nnl_func_decl_args               = ignore   # ignore/add/remove/force\n\n# Add or remove newline after each ',' in a function definition.\nnl_func_def_args                = ignore   # ignore/add/remove/force\n\n# Add or remove newline after each ',' in a function call.\nnl_func_call_args               = ignore   # ignore/add/remove/force\n\n# Add or remove newline before the ')' in a function declaration.\nnl_func_decl_end                = remove   # ignore/add/remove/force\n\n# Add or remove newline before the ')' in a function definition.\nnl_func_def_end                 = remove   # ignore/add/remove/force\n\n# Add or remove newline between '()' in a function declaration.\nnl_func_decl_empty              = remove   # ignore/add/remove/force\n\n# Add or remove newline between '()' in a function definition.\nnl_func_def_empty               = remove   # ignore/add/remove/force\n\n# Add or remove newline between '()' in a function call.\nnl_func_call_empty              = remove   # ignore/add/remove/force\n\n# Whether to add a newline before ')' in a function call.\nnl_func_call_end                = remove   # ignore/add/remove/force\n\n# Add or remove newline between function signature and '{'.\nnl_fdef_brace                   = true   # ignore/add/remove/force\n\n# Add or remove newline between C++11 lambda signature and '{'.\nnl_cpp_ldef_brace               = add   # ignore/add/remove/force\n\n# Whether to add a newline after semicolons, except in 'for' statements.\nnl_after_semicolon              = true    # true/false\n\n# Whether to add a newline after '{'. This also adds a newline before the\n# matching '}'.\nnl_after_brace_open             = true    # true/false\n\n# Whether to add a newline between the open brace and a trailing single-line\n# comment. Requires nl_after_brace_open=true.\nnl_after_brace_open_cmt         = true    # true/false\n\n# Whether to add a newline after '}'. Does not apply if followed by a\n# necessary ';'.\nnl_after_brace_close            = true    # true/false\n\n# Whether to add a newline after a virtual brace close,\n# as in 'if (foo) a++; <here> return;'.\nnl_after_vbrace_close           = true    # true/false\n\n# Add or remove newline between the close brace and identifier,\n# as in 'struct { int a; } <here> b;'. Affects enumerations, unions and\n# structures. If set to ignore, uses nl_after_brace_close.\nnl_brace_struct_var             = remove   # ignore/add/remove/force\n\n# Add or remove blank line after 'if' statement. Add/Force work only if the\n# next token is not a closing brace.\nnl_after_if                     = force   # ignore/add/remove/force\n\n# Add or remove blank line after 'for' statement.\nnl_after_for                    = force   # ignore/add/remove/force\n\n# Add or remove blank line after 'while' statement.\nnl_after_while                  = force   # ignore/add/remove/force\n\n# Add or remove blank line after 'switch' statement.\nnl_after_switch                 = force   # ignore/add/remove/force\n\n# Add or remove blank line after 'do/while' statement.\nnl_after_do                     = force   # ignore/add/remove/force\n\n# Whether to put a blank line before 'return' statements, unless after an open\n# brace.\nnl_before_return                = false    # true/false\n\n# Whether to force a newline before '}' of a 'struct'/'union'/'enum'.\n# (Lower priority than eat_blanks_before_close_brace.)\nnl_ds_struct_enum_close_brace   = true    # true/false\n\n\n# Blank line options\n#\n\n# The maximum number of consecutive newlines (3 = 2 blank lines).\nnl_max                          = 0        # unsigned number\n\n# The maximum number of consecutive newlines in a function.\nnl_max_blank_in_func            = 2        # unsigned number\n\n# The number of newlines after '}' of a multi-line function body.\nnl_after_func_body              = 2        # unsigned number\n\n# The number of newlines after '}' of a multi-line function body in a class\n# declaration. Also affects class constructors/destructors.\n#\n# Overrides nl_after_func_body.\nnl_after_func_body_class        = 2        # unsigned number\n\n# The number of newlines after '}' or ';' of a struct/enum/union definition.\nnl_after_struct                 = 2        # unsigned number\n\n# The number of newlines after '}' or ';' of a class definition.\nnl_after_class                  = 2        # unsigned number\n\n# The number of newlines after '}' of a namespace.\nnl_after_namespace              = 2        # unsigned number\n\n# The number of newlines before an access specifier label. This also includes\n# the Qt-specific 'signals:' and 'slots:'. Will not change the newline count\n# if after a brace open.\n#\n# 0: No change (default).\nnl_before_access_spec           = 2        # unsigned number\n\n# The number of newlines after a try-catch-finally block that isn't followed\n# by a brace close.\n#\n# 0: No change (default).\nnl_after_try_catch_finally      = 2        # unsigned number\n\n# Whether to remove blank lines after '{'.\neat_blanks_after_open_brace     = true    # true/false\n\n# Whether to remove blank lines before '}'.\neat_blanks_before_close_brace   = true    # true/false\n\n#\n# Positioning options\n#\n\n# The position of arithmetic operators in wrapped expressions.\npos_arith                       = trail   # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force\n\n# The position of assignment in wrapped expressions. Do not affect '='\n# followed by '{'.\npos_assign                      = trail  # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force\n\n# The position of Boolean operators in wrapped expressions.\npos_bool                        = trail   # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force\n\n# The position of comparison operators in wrapped expressions.\npos_compare                     = trail   # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force\n\n# The position of conditional operators, as in the '?' and ':' of\n# 'expr ? stmt : stmt', in wrapped expressions.\npos_conditional                 = trail  # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force\n\n# The position of the comma in wrapped expressions.\npos_comma                       = trail   # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force\n\n# The position of the comma in enum entries.\npos_enum_comma                  = trail_force   # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force\n\n# The position of the comma in the base class list if there is more than one\n# line. Affects nl_class_init_args.\npos_class_comma                 = trail   # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force\n\n# The position of the comma in the constructor initialization list.\n# Related to nl_constr_colon, nl_constr_init_args and pos_constr_colon.\npos_constr_comma                = trail   # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force\n\n# The position of trailing/leading class colon, between class and base class\n# list. Affects nl_class_colon.\npos_class_colon                 = trail   # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force\n\n# The position of colons between constructor and member initialization.\n# Related to nl_constr_colon, nl_constr_init_args and pos_constr_comma.\npos_constr_colon                = trail   # ignore/break/force/lead/trail/join/lead_break/lead_force/trail_break/trail_force\n\n#\n# Code alignment options (not left column spaces/tabs)\n#\n\n# The span for aligning on '=' in assignments.\n#\n# 0: Don't align (default).\nalign_assign_span               = 1        # unsigned number\nalign_assign_thresh             = -4        # number\n\nalign_enum_equ_span             = 4        # unsigned number\nalign_enum_equ_thresh           = -20        # number\n\nalign_number_right              = true    # true/false\n#\n# Line splitting options\n#\n\n# Try to limit code width to N columns.\ncode_width                      = 110        # unsigned number\n\n# Whether to fully split long 'for' statements at semi-colons.\nls_for_split_full               = true    # true/false\n\n# Whether to fully split long function prototypes/calls at commas.\n# The option ls_code_width has priority over the option ls_func_split_full.\nls_func_split_full              = false    # true/false\n\n# Whether to split lines as close to code_width as possible and ignore some\n# groupings.\n# The option ls_code_width has priority over the option ls_func_split_full.\nls_code_width                   = false    # true/false\n\n#\n# Comment modification options\n#\n\n# Try to wrap comments at N columns.\ncmt_width                       = 110      # unsigned number\n\n# How to reflow comments.\n#\n# 0: No reflowing (apart from the line wrapping due to cmt_width) (default)\n# 1: No touching at all\n# 2: Full reflow\ncmt_reflow_mode                 = 2        # unsigned number\n\n# Whether to convert all tabs to spaces in comments. If false, tabs in\n# comments are left alone, unless used for indenting.\ncmt_convert_tab_to_spaces       = true    # true/false\n\n# Whether to group c-comments that look like they are in a block.\ncmt_c_group                     = true    # true/false\n\n# Whether to put a star on subsequent comment lines.\ncmt_star_cont                   = true    # true/false\n\n# Whether to put an empty '/*' on the first line of the combined c-comment.\ncmt_c_nl_start                  = true    # true/false\n\n# Whether to add a newline before the closing '*/' of the combined c-comment.\ncmt_c_nl_end                    = true    # true/false\n\n# The number of spaces to insert at the start of subsequent comment lines.\ncmt_sp_before_star_cont         = 0        # unsigned number\n\n# The number of spaces to insert after the star on subsequent comment lines.\ncmt_sp_after_star_cont          = 1        # unsigned number\n\n#\n# Code modifying options (non-whitespace)\n#\n\n# Add or remove braces on a single-line 'do' statement.\nmod_full_brace_do               = force   # ignore/add/remove/force\n\n# Add or remove braces on a single-line 'for' statement.\nmod_full_brace_for              = force   # ignore/add/remove/force\n\n# (Pawn) Add or remove braces on a single-line function definition.\nmod_full_brace_function         = force   # ignore/add/remove/force\n\n# Add or remove braces on a single-line 'if' statement. Braces will not be\n# removed if the braced statement contains an 'else'.\nmod_full_brace_if               = force   # ignore/add/remove/force\n\n# Whether to add braces to all blocks of an 'if'/'else if'/'else' chain.\n# If true, mod_full_brace_if_chain will only remove braces from an 'if' that\n# does not have an 'else if' or 'else'.\nmod_full_brace_if_chain_only    = true    # true/false\n\n# Add or remove braces on single-line 'while' statement.\nmod_full_brace_while            = force   # ignore/add/remove/force\n\n# Whether to fully parenthesize Boolean expressions in 'while' and 'if'\n# statement, as in 'if (a && b > c)' => 'if (a && (b > c))'.\nmod_full_paren_if_bool          = true    # true/false\n\n# Whether to remove superfluous semicolons.\nmod_remove_extra_semicolon      = true    # true/false\n\n# If an #ifdef body exceeds the specified number of newlines and doesn't have\n# a comment after the #endif, a comment will be added.\nmod_add_long_ifdef_endif_comment = 0        # unsigned number\n\n# If an #ifdef or #else body exceeds the specified number of newlines and\n# doesn't have a comment after the #else, a comment will be added.\nmod_add_long_ifdef_else_comment = 0        # unsigned number\n\n# Whether to remove a void 'return;' that appears as the last statement in a\n# function.\nmod_remove_empty_return         = false    # true/false\n\n# Add or remove the comma after the last value of an enumeration.\nmod_enum_last_comma             = force   # ignore/add/remove/force\n\n#\n# Preprocessor options\n#\n\n# Add or remove indentation of preprocessor directives inside #if blocks\n# at brace level 0 (file-level).\npp_indent                       = add   # ignore/add/remove/force\npp_indent_count                 = 4\n\n# Whether to indent the code between #if, #else and #endif.\npp_if_indent_code               = false    # true/false\n\n# Use or Do not Use options\n#\n\n# true:  indent_func_call_param will be used (default)\n# false: indent_func_call_param will NOT be used\n#\n# Default: true\nuse_indent_func_call_param      = true     # true/false\n\n# The value of the indentation for a continuation line is calculated\n# differently if the statement is:\n# - a declaration: your case with QString fileName ...\n# - an assignment: your case with pSettings = new QSettings( ...\n#\n# At the second case the indentation value might be used twice:\n# - at the assignment\n# - at the function call (if present)\n#\n# To prevent the double use of the indentation value, use this option with the\n# value 'true'.\n#\n# true:  indent_continue will be used only once\n# false: indent_continue will be used every time (default)\nuse_indent_continue_only_once   = true    # true/false\n\n# The value might be used twice:\n# - at the assignment\n# - at the opening brace\n#\n# To prevent the double use of the indentation value, use this option with the\n# value 'true'.\n#\n# true:  indentation will be used only once\n# false: indentation will be used every time (default)\nindent_cpp_lambda_only_once     = true    # true/false\n\n# Whether sp_after_angle takes precedence over sp_inside_fparen. This was the\n# historic behavior, but is probably not the desired behavior, so this is off\n# by default.\nuse_sp_after_angle_always       = false    # true/false\n"
        },
        {
          "name": "wayfire.desktop",
          "type": "blob",
          "size": 0.107421875,
          "content": "[Desktop Entry]\nName=Wayfire\nExec=wayfire\nTryExec=wayfire\nIcon=\nType=Application\nDesktopNames=Wayfire;wlroots\n"
        },
        {
          "name": "wayfire.ini",
          "type": "blob",
          "size": 9.9140625,
          "content": "# Default config for Wayfire\n#\n# Copy this to ~/.config/wayfire.ini and edit it to your liking.\n#\n# Take the tutorial to get started.\n# https://github.com/WayfireWM/wayfire/wiki/Tutorial\n#\n# Read the Configuration document for a complete reference.\n# https://github.com/WayfireWM/wayfire/wiki/Configuration\n\n# Input configuration ──────────────────────────────────────────────────────────\n\n# Example configuration:\n#\n# [input]\n# xkb_layout = us,fr\n# xkb_variant = dvorak,bepo\n# xkb_options = grp:win_space_toggle\n#\n# See Input options for a complete reference.\n# https://github.com/WayfireWM/wayfire/wiki/Configuration#input\n\n# Output configuration ─────────────────────────────────────────────────────────\n\n# Example configuration:\n#\n# [output:eDP-1]\n# mode = 1920x1080@60000\n# position = 0,0\n# transform = normal\n# scale = 1.000000\n#\n# You can get the names of your outputs with wlr-randr.\n# https://github.com/emersion/wlr-randr\n#\n# See also kanshi for configuring your outputs automatically.\n# https://wayland.emersion.fr/kanshi/\n#\n# See Output options for a complete reference.\n# https://github.com/WayfireWM/wayfire/wiki/Configuration#output\n\n# Core options ─────────────────────────────────────────────────────────────────\n\n[core]\n\n# List of plugins to be enabled.\n# See the Configuration document for a complete list.\nplugins = \\\n  alpha \\\n  animate \\\n  autostart \\\n  command \\\n  cube \\\n  decoration \\\n  expo \\\n  fast-switcher \\\n  fisheye \\\n  foreign-toplevel \\\n  grid \\\n  gtk-shell \\\n  idle \\\n  invert \\\n  move \\\n  oswitch \\\n  place \\\n  resize \\\n  session-lock \\\n  shortcuts-inhibit \\\n  switcher \\\n  vswitch \\\n  wayfire-shell \\\n  window-rules \\\n  wm-actions \\\n  wobbly \\\n  wrot \\\n  zoom\n\n# Note: [blur] is not enabled by default, because it can be resource-intensive.\n# Feel free to add it to the list if you want it.\n# You can find its documentation here:\n# https://github.com/WayfireWM/wayfire/wiki/Configuration#blur\n\n# Close focused window.\nclose_top_view = <super> KEY_Q | <alt> KEY_F4\n\n# Workspaces arranged into a grid: 3 × 3.\nvwidth = 3\nvheight = 3\n\n# Prefer client-side decoration or server-side decoration\npreferred_decoration_mode = client\n\n# Mouse bindings ───────────────────────────────────────────────────────────────\n\n# Drag windows by holding down Super and left mouse button.\n[move]\nactivate = <super> BTN_LEFT\n\n# Resize them with right mouse button + Super.\n[resize]\nactivate = <super> BTN_RIGHT\n\n# Zoom in the desktop by scrolling + Super.\n[zoom]\nmodifier = <super>\n\n# Change opacity by scrolling with Super + Alt.\n[alpha]\nmodifier = <super> <alt>\n\n# Rotate windows with the mouse.\n[wrot]\nactivate = <super> <ctrl> BTN_RIGHT\n\n# Fisheye effect.\n[fisheye]\ntoggle = <super> <ctrl> KEY_F\n\n# Startup commands ─────────────────────────────────────────────────────────────\n\n[autostart]\n#Gtk+3 applications slow startup or .desktop files not opening\n#https://github.com/WayfireWM/wayfire/wiki/Tips-&-Tricks#gtk3-applications-slow-startup-or-desktop-files-not-opening\n0_env = dbus-update-activation-environment --systemd WAYLAND_DISPLAY DISPLAY XAUTHORITY\n\n# Automatically start background and panel.\n# Set to false if you want to override the default clients.\nautostart_wf_shell = true\n\n# Set the wallpaper, start a panel and dock if you want one.\n# https://github.com/WayfireWM/wf-shell\n#\n# These are started by the autostart_wf_shell option above.\n#\n# background = wf-background\n# panel = wf-panel\n#\n# You may also use wf-dock,\n# which is included in wf-shell but is not enabled by default.\n#\n# dock = wf-dock\n\n# Output configuration\n# https://wayland.emersion.fr/kanshi/\noutputs = kanshi\n\n# Notifications\n# https://wayland.emersion.fr/mako/\nnotifications = mako\n\n# Screen color temperature\n# https://sr.ht/~kennylevinsen/wlsunset/\ngamma = wlsunset\n\n# Idle configuration\n# https://github.com/swaywm/swayidle\n# https://github.com/swaywm/swaylock\nidle = swayidle before-sleep swaylock\n\n# XDG desktop portal\n# Needed by some GTK applications\nportal = /usr/libexec/xdg-desktop-portal\n\n# Example configuration:\n#\n# [idle]\n# toggle = <super> KEY_Z\n# screensaver_timeout = 300\n# dpms_timeout = 600\n#\n# Disables the compositor going idle with Super + z.\n# This will lock your screen after 300 seconds of inactivity, then turn off\n# your displays after another 300 seconds.\n\n# Applications ─────────────────────────────────────────────────────────────────\n\n[command]\n\n# Start a terminal\n# https://github.com/alacritty/alacritty\nbinding_terminal = <super> KEY_ENTER\ncommand_terminal = alacritty\n\n# Start your launcher\n# https://hg.sr.ht/~scoopta/wofi\n# Note: Add mode=run or mode=drun to ~/.config/wofi/config.\n# You can also specify the mode with --show option.\nbinding_launcher = <super> <shift> KEY_ENTER\ncommand_launcher = wofi\n\n# Screen locker\n# https://github.com/swaywm/swaylock\nbinding_lock = <super> <shift> KEY_ESC\ncommand_lock = swaylock\n\n# Logout\n# https://github.com/ArtsyMacaw/wlogout\nbinding_logout = <super> KEY_ESC\ncommand_logout = wlogout\n\n# Screenshots\n# https://wayland.emersion.fr/grim/\n# https://wayland.emersion.fr/slurp/\nbinding_screenshot = KEY_PRINT\ncommand_screenshot = grim $(date '+%F_%T').webp\nbinding_screenshot_interactive = <shift> KEY_PRINT\ncommand_screenshot_interactive = slurp | grim -g - $(date '+%F_%T').webp\n\n# Volume controls\n# https://alsa-project.org\nrepeatable_binding_volume_up = KEY_VOLUMEUP\ncommand_volume_up = amixer set Master 5%+\nrepeatable_binding_volume_down = KEY_VOLUMEDOWN\ncommand_volume_down = amixer set Master 5%-\nbinding_mute = KEY_MUTE\ncommand_mute = amixer set Master toggle\n\n# Screen brightness\n# https://haikarainen.github.io/light/\nrepeatable_binding_light_up = KEY_BRIGHTNESSUP\ncommand_light_up = light -A 5\nrepeatable_binding_light_down = KEY_BRIGHTNESSDOWN\ncommand_light_down = light -U 5\n\n# Windows ──────────────────────────────────────────────────────────────────────\n\n# Actions related to window management functionalities.\n#\n# Example configuration:\n#\n# [wm-actions]\n# toggle_fullscreen = <super> KEY_F\n# toggle_always_on_top = <super> KEY_X\n# toggle_sticky = <super> <shift> KEY_X\n\n# Position the windows in certain regions of the output.\n[grid]\n#\n# ⇱ ↑ ⇲   │ 7 8 9\n# ← f →   │ 4 5 6\n# ⇱ ↓ ⇲ d │ 1 2 3 0\n# ‾   ‾\nslot_bl = <super> KEY_KP1\nslot_b = <super> KEY_KP2\nslot_br = <super> KEY_KP3\nslot_l = <super> KEY_LEFT | <super> KEY_KP4\nslot_c = <super> KEY_UP | <super> KEY_KP5\nslot_r = <super> KEY_RIGHT | <super> KEY_KP6\nslot_tl = <super> KEY_KP7\nslot_t = <super> KEY_KP8\nslot_tr = <super> KEY_KP9\n# Restore default.\nrestore = <super> KEY_DOWN | <super> KEY_KP0\n\n# Change active window with an animation.\n[switcher]\nnext_view = <alt> KEY_TAB\nprev_view = <alt> <shift> KEY_TAB\n\n# Simple active window switcher.\n[fast-switcher]\nactivate = <alt> KEY_ESC\n\n# Workspaces ───────────────────────────────────────────────────────────────────\n\n# Switch to workspace.\n[vswitch]\nbinding_left = <ctrl> <super> KEY_LEFT\nbinding_down = <ctrl> <super> KEY_DOWN\nbinding_up = <ctrl> <super> KEY_UP\nbinding_right = <ctrl> <super> KEY_RIGHT\n# Move the focused window with the same key-bindings, but add Shift.\nwith_win_left = <ctrl> <super> <shift> KEY_LEFT\nwith_win_down = <ctrl> <super> <shift> KEY_DOWN\nwith_win_up = <ctrl> <super> <shift> KEY_UP\nwith_win_right = <ctrl> <super> <shift> KEY_RIGHT\n\n# Show the current workspace row as a cube.\n[cube]\nactivate = <ctrl> <alt> BTN_LEFT\n# Switch to the next or previous workspace.\n#rotate_left = <super> <ctrl> KEY_H\n#rotate_right = <super> <ctrl> KEY_L\n\n# Show an overview of all workspaces.\n[expo]\ntoggle = <super> KEY_E\n# Select a workspace.\n# Workspaces are arranged into a grid of 3 × 3.\n# The numbering is left to right, line by line.\n#\n# ⇱ k ⇲\n# h ⏎ l\n# ⇱ j ⇲\n# ‾   ‾\n# See core.vwidth and core.vheight for configuring the grid.\nselect_workspace_1 = KEY_1\nselect_workspace_2 = KEY_2\nselect_workspace_3 = KEY_3\nselect_workspace_4 = KEY_4\nselect_workspace_5 = KEY_5\nselect_workspace_6 = KEY_6\nselect_workspace_7 = KEY_7\nselect_workspace_8 = KEY_8\nselect_workspace_9 = KEY_9\n\n# Outputs ──────────────────────────────────────────────────────────────────────\n\n# Change focused output.\n[oswitch]\n# Switch to the next output.\nnext_output = <super> KEY_O\n# Same with the window.\nnext_output_with_win = <super> <shift> KEY_O\n\n# Invert the colors of the whole output.\n[invert]\ntoggle = <super> KEY_I\n\n# Send toggle menu event.\n[wayfire-shell]\ntoggle_menu = <super>\n\n# Rules ────────────────────────────────────────────────────────────────────────\n\n# Example configuration:\n#\n# [window-rules]\n# maximize_alacritty = on created if app_id is \"Alacritty\" then maximize\n#\n# You can get the properties of your applications with the following command:\n# $ WAYLAND_DEBUG=1 alacritty 2>&1 | kak\n#\n# See Window rules for a complete reference.\n# https://github.com/WayfireWM/wayfire/wiki/Configuration#window-rules\n"
        }
      ]
    }
  ]
}