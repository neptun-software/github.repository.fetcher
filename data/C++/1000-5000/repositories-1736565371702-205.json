{
  "metadata": {
    "timestamp": 1736565371702,
    "page": 205,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "microsoft/SEAL",
      "stars": 3661,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 3.556640625,
          "content": "---\nLanguage:        Cpp\n# BasedOnStyle:  Microsoft\nAccessModifierOffset: -4\nAlignAfterOpenBracket: AlwaysBreak\nAlignConsecutiveMacros: false\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlines: Left\nAlignOperands:   true\nAlignTrailingComments: false\nAllowAllArgumentsOnNextLine: true\nAllowAllConstructorInitializersOnNextLine: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: None\nAllowShortLambdasOnASingleLine: Inline\nAllowShortIfStatementsOnASingleLine: Never\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: Yes\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:\n  AfterCaseLabel:  true\n  AfterClass:      true\n  AfterControlStatement: true\n  AfterEnum:       true\n  AfterFunction:   true\n  AfterNamespace:  true\n  AfterObjCDeclaration: true\n  AfterStruct:     true\n  AfterUnion:      true\n  AfterExternBlock: true\n  BeforeCatch:     true\n  BeforeElse:      true\n  IndentBraces:    false\n  SplitEmptyFunction: false\n  SplitEmptyRecord: false\n  SplitEmptyNamespace: false\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Custom # Allman\nBreakBeforeInheritanceComma: false\nBreakInheritanceList: BeforeColon\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: BeforeColon\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit:     120\nCommentPragmas:  '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: false\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nForEachMacros:\n  - foreach\n  - Q_FOREACH\n  - BOOST_FOREACH\nIncludeBlocks:   Merge\nIncludeCategories:\n  - Regex:           '<.*>'\n    Priority:        1\n  - Regex:           '\"seal/util/.*\"'\n    Priority:        -2\n  - Regex:           '\"seal/.*\"'\n    Priority:        -3\nIncludeIsMainRegex: '(Test)?$'\nIndentCaseLabels: false\nIndentPPDirectives: None\nIndentWidth:     4\nIndentWrappedFunctionNames: false\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: false\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: All\nObjCBinPackProtocolList: Auto\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 19\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 1000\nPointerAlignment: Right\nReflowComments:  true\nSortIncludes:    true\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: false\nSpaceAfterLogicalNot: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCpp11BracedList: false\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: ControlStatements\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Auto\nStatementMacros:\n  - Q_UNUSED\n  - QT_REQUIRE_VERSION\nTabWidth:        4\nUseTab:          Never\n...\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 10.44140625,
          "content": "#######################\n#### SEAL Specific ####\n#######################\n\n# Configuration\n!cmake/*.cmake.in\n!cmake/*.cmake\ncmake/SEALConfig.cmake\ncmake/SEALConfigVersion.cmake\ncmake/SEALTargets.cmake\nnative/src/seal/util/config.h\nnative/src/gsl/\n!dotnet/nuget/*.nuspec.in\ndotnet/nuget/*.nuspec\n!dotnet/src/SEALNet.csproj.in\ndotnet/src/SEALNet.csproj\n!dotnet/tests/SEALNetTest.csproj.in\ndotnet/tests/SEALNetTest.csproj\n!dotnet/examples/SEALNetExamples.csproj.in\ndotnet/examples/SEALNetExamples.csproj\nCMakeSettings.json\n.vscode\n\n# WebAssembly Output\nseal_wasm.js\nseal_wasm.wasm\n\n# Build\nbin/\nlib/\nbuild/\n*.build\nenv\nthirdparty/\n\n########################################################################################\n#### The following are based on templates from https://github.com/github/gitignore. ####\n########################################################################################\n\n*.pc\n.config\n*.args.json\n# You Complete Me\n.ycm_extra_conf.py\n# Vim\n.vimrc\n.lvimrc\n.local_vimrc\n\n#### Archives ####\n# It's better to unpack these files and commit the raw source because\n# git has its own built in compression methods.\n*.7z\n*.jar\n*.rar\n*.zip\n*.gz\n*.gzip\n*.tgz\n*.bzip\n*.bzip2\n*.bz2\n*.xz\n*.lzma\n*.cab\n*.xar\n# Packing-only formats\n*.iso\n*.tar\n# Package management formats\n*.dmg\n*.xpi\n*.gem\n*.egg\n*.deb\n*.rpm\n*.msi\n*.msm\n*.msp\n*.txz\n\n#### Backup ####\n*.bak\n*.gho\n*.ori\n*.orig\n*.tmp\n\n#### Git ####\n*.patch\n*.diff\n\n#### Windows ####\n# Windows thumbnail cache files\nThumbs.db\nThumbs.db:encryptable\nehthumbs.db\nehthumbs_vista.db\n# Dump file\n*.stackdump\n# Folder config file\n[Dd]esktop.ini\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n# Windows Installer files\n*.cab\n*.msi\n*.msix\n*.msm\n*.msp\n# Windows shortcuts\n*.lnk\n\n#### Linux ####\n*~\n# temporary files which can be created if a process still has a handle open of a deleted file\n.fuse_hidden*\n# KDE directory preferences\n.directory\n# Linux trash folder which might appear on any partition or disk\n.Trash-*\n# .nfs files are created when an open file is removed but is still being accessed\n.nfs*\n\n#### macOS ####\n# General\n.DS_Store\n.AppleDouble\n.LSOverride\n# Icon must end with two \\r\nIcon\n# Thumbnails\n._*\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n.com.apple.timemachine.donotpresent\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n#### Autotools ####\n# http://www.gnu.org/software/automake\nMakefile.in\n/ar-lib\n/mdate-sh\n/py-compile\n/test-driver\n/ylwrap\n.deps/\n.dirstamp\n# http://www.gnu.org/software/autoconf\nautom4te.cache\n/autoscan.log\n/autoscan-*.log\n/aclocal.m4\n/compile\n/config.guess\n/config.h.in\n/config.log\n/config.status\n/config.sub\n/configure\n/configure.scan\n/depcomp\n/install-sh\n/missing\n/stamp-h1\n# https://www.gnu.org/software/libtool/\n/ltmain.sh\n# http://www.gnu.org/software/texinfo\n/texinfo.tex\n# http://www.gnu.org/software/m4/\nm4/libtool.m4\nm4/ltoptions.m4\nm4/ltsugar.m4\nm4/ltversion.m4\nm4/lt~obsolete.m4\n# Generated Makefile\n# (meta build system like autotools,\n# can automatically generate from config.status script\n# (which is called by configure script))\nMakefile\n\n#### C/C++ ####\n# Prerequisites\n*.d\n# Compiled Object files\n*.slo\n*.lo\n*.ko\n*.o\n*.obj\n*.elf\n# Linker output\n*.lik\n*.map\n*.exp\n# Precompiled Headers\n*.gch\n*.pch\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n# Compiled Dynamic libraries\n*.so\n*.so.*\n*.dylib\n*.dll\n# Kernel Module Compile Results\n*.mod*\n*.smod\n*.cmd\n.tmp_versions/\nmodules.order\nModule.symvers\nMkfile.old\ndkms.conf\n# Executables\n*.exe\n*.out\n*.app\n*.i*86\n*.x86_64\n*.hex\n# Debug files\n*.dSYM/\n*.su\n*.idb\n*.pdb\n\n#### CMake ####\nCMakeLists.txt.user\nCMakeCache.txt\nCMakeFiles\nCMakeScripts\nTesting\nMakefile\ncmake_install.cmake\ninstall_manifest.txt\ncompile_commands.json\nCTestTestfile.cmake\nCPackConfig.cmake\nCPackSourceConfig.cmake\n\n#### Gradle ####\n.gradle\n**/build/\n!src/**/build/\n# Ignore Gradle GUI config\ngradle-app.setting\n# Avoid ignoring Gradle wrapper jar file (.jar files are usually ignored)\n!gradle-wrapper.jar\n# Cache of project\n.gradletasknamecache\n# # Work around https://youtrack.jetbrains.com/issue/IDEA-116898\n# gradle/wrapper/gradle-wrapper.properties\nandroid/.idea/\n\n#### Visual Studio Code ####\n.vscode/*\n#!.vscode/settings.json\n#!.vscode/tasks.json\n#!.vscode/launch.json\n#!.vscode/extensions.json\n*.code-workspace\n# Local History for Visual Studio Code\n.history/\n\n#### Visual Stduio ####\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore\n\n# User-specific files\n*.rsuser\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Mono auto generated files\nmono_crash.*\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\n[Ww][Ii][Nn]32/\n[Aa][Rr][Mm]/\n[Aa][Rr][Mm]64/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n[Ll]ogs/\n\n# Visual Studio 2015/2017 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# Visual Studio 2017 auto generated files\nGenerated\\ Files/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUnit\n*.VisualState.xml\nTestResult.xml\nnunit-*.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# Benchmark Results\nBenchmarkDotNet.Artifacts/\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n\n# ASP.NET Scaffolding\nScaffoldingReadMe.txt\n\n# StyleCop\nStyleCopReport.xml\n\n# Files built by Visual Studio\n*_i.c\n*_p.c\n*_h.h\n*.ilk\n*.meta\n*.obj\n*.iobj\n*.pch\n*.pdb\n*.ipdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*_wpftmp.csproj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# Visual Studio Trace Files\n*.e2e\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# AxoCover is a Code Coverage Tool\n.axoCover/*\n!.axoCover/settings.json\n\n# Coverlet is a free, cross platform Code Coverage Tool\ncoverage*[.json, .xml, .info]\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# Note: Comment the next line if you want to checkin your web deploy settings,\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# NuGet Symbol Packages\n*.snupkg\n# The packages folder can be ignored because of Package Restore\n**/[Pp]ackages/*\n# except build/, which is used as an MSBuild target.\n!**/[Pp]ackages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/[Pp]ackages/repositories.config\n# NuGet v3's project.json files produces more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n*.appx\n*.appxbundle\n*.appxupload\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!?*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n\n# Including strong name files can present a security risk\n# (https://github.com/github/gitignore/pull/2483#issue-259490424)\n#*.snk\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\nServiceFabricBackup/\n*.rptproj.bak\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n*.rptproj.rsuser\n*- [Bb]ackup.rdl\n*- [Bb]ackup ([0-9]).rdl\n*- [Bb]ackup ([0-9][0-9]).rdl\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# CodeRush personal settings\n.cr/personal\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packages.config\n\n# Tabs Studio\n*.tss\n\n# Telerik's JustMock configuration file\n*.jmconfig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n\n# OpenCover UI analysis results\nOpenCover/\n\n# Azure Stream Analytics local run output\nASALocalRun/\n\n# MSBuild Binary and Structured Log\n*.binlog\n\n# NVidia Nsight GPU debugger configuration file\n*.nvuser\n\n# MFractors (Xamarin productivity tool) working folder\n.mfractor/\n\n# Local History for Visual Studio\n.localhistory/\n\n# BeatPulse healthcheck temp database\nhealthchecksdb\n\n# Backup folder for Package Reference Convert tool in Visual Studio 2017\nMigrationBackup/\n\n# Ionide (cross platform F# VS Code tools) working folder\n.ionide/\n\n# Fody - auto-generated XML schema\nFodyWeavers.xsd\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.34765625,
          "content": "repos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v2.0.0\n    hooks:\n      - id: check-added-large-files\n      - id: trailing-whitespace\n      - id: end-of-file-fixer\n  - repo: local\n    hooks:\n    - id: clang-format\n      name: clang-format\n      entry: clang-format\n      language: system\n      files: \\.(cpp|h)$\n      args: [\"-i\"]\n"
        },
        {
          "name": "CHANGES.md",
          "type": "blob",
          "size": 48.7958984375,
          "content": "# List of Changes\n\n## Version 4.1.2\n\n- Merged [(PR #619)](https://github.com/microsoft/SEAL/pull/619): Removed unqualified calls to `std::move`.\n- Merged [(PR #651)](https://github.com/microsoft/SEAL/pull/651): Fixed filename typos in native examples.\n- Merged [(PR #662)](https://github.com/microsoft/SEAL/pull/662) and [(PR #666)](https://github.com/microsoft/SEAL/pull/666): Fixed broken links in [README.md](README.md).\n- Merged [(PR #669)](https://github.com/microsoft/SEAL/pull/669): Removed extra semicolons that caused compiler warnings.\n\n### Hotfix - 6/13/2024\n\n- Merged [(PR #688)](https://github.com/microsoft/SEAL/pull/688): Fixed incorrect version numbers in [native/tests/CMakeLists.txt](native/tests/CMakeLists.txt).\n\n### Hotfix - 7/10/2024\n\n- Merged [(PR #695)](https://github.com/microsoft/SEAL/pull/695): Fixed incorrect version numbers in [native/examples/CMakeLists.txt](native/examples/CMakeLists.txt)\n\n## Version 4.1.1\n\n### Bug Fixes\n\n- Fixed detection of intrinsics on M1 Macs [(PR #597)](https://github.com/microsoft/SEAL/pull/597).\n- Fixed old dependency version numbers in [README.md](README.md) [(PR #596)](https://github.com/microsoft/SEAL/pull/596).\n- Fixed release date typo in [README.md](README.md).\n\n## Version 4.1.0\n\n### Features\n\n- The BGV scheme now keeps ciphertexts in NTT form. BGV ciphertext multiplication is much faster than version 4.0.0.\n- When a BGV ciphertext saved by previous versions is loaded in the current version, it is automatically converted to NTT form.\n- Increased `SEAL_COEFF_MOD_COUNT_MAX`, the maximum number of primes that define the coefficient modulus, from 64 to 256.\n\n### Other Fixes\n\n- Fixed typos [(PR #590)](https://github.com/microsoft/SEAL/pull/590).\n- Added $schema to cgmanifest.json [(PR #558)](https://github.com/microsoft/SEAL/pull/558).\n- Fixed typos [(PR #512)](https://github.com/microsoft/SEAL/pull/512).\n- Fixed typos [(PR #530)](https://github.com/microsoft/SEAL/pull/530).\n- Fixed typos [(PR #509)](https://github.com/microsoft/SEAL/pull/509).\n- Added missing `const` qualifiers [(PR #556)](https://github.com/microsoft/SEAL/pull/556).\n- Added vcpkg installation instructions [(PR #562)](https://github.com/microsoft/SEAL/pull/562).\n- Fixed an issue in specific environments where allocation fails without throwing `std::bad_alloc`.\n- Fixed comments (C++) and C/.NET wrapper implementation of an exception thrown by `invariant_noise_budget`.\n\n### Major API Changes\n\n- Added new public methods `mod_reduce_xxx(...)` (native) and `ModReduceXxx(...)` (dotnet) to the class `Evaluator`.\n\n## Version 4.0.0\n\n### Features\n\n- Added BGV scheme [(PR 283)](https://github.com/microsoft/SEAL/pull/283). Thanks, [Alibaba Gemini Lab](https://alibaba-gemini-lab.github.io/)!\n- Added a new example \"BGV basics\" to native and dotnet.\n- Loading objects serialized by Microsoft SEAL v3.4+ are supported.\n- Updated versions of dependencies: GoogleTest from 1.10.0 to 1.11.0 and GoogleBenchmark from 1.5.2 to 1.6.0.\n\n### Other Fixes\n\n- Fixed an ambiguous comment [(PR 375)](https://github.com/microsoft/SEAL/pull/375).\n\n### Major API Changes\n\n- Added `seal::scheme_type::bgv`.\n- Added a new public method `parms_id()` (native) to the class `EncryptionParameters`.\n- Added a new public method `Create(...)` (native and dotnet) with three inputs in the class `CoeffModulus`.\n- Added a new public method `correction_factor()` (native) or `CorrectionFactor()` (dotnet) to the class `Ciphertext`.\n- Removed the friendship of the class `EncryptionParameters` to the class `SEALContext`.\n\n### File Changes\n\n- `native/bench/bgv.cpp` is added.\n- Examples are renamed and extended.\n\n## Version 3.7.3\n\n### Features\n\n- All output files including downloaded thirdparty dependencies and Visual Studio project and solution files will be created in the build directory [(PR 427)](https://github.com/microsoft/SEAL/pull/427).\n- Reduced `util::try_minimal_primitive_root` search iterations by half [(PR 430)](https://github.com/microsoft/SEAL/pull/430). Thanks, [zirconium-n](https://github.com/zirconium-n)!\n- Updated .Net SDK version to 6.0.x and supported Visual Studio version to 17 2022.\n- Added `SEAL_AVOID_BRANCHING` option to eleminate branching in critical functions when Microsoft SEAL is built with maliciously inserted compiler flags.\n\n### Bug Fixes\n\n- Removed exceptions in `KeyGenerator::CreateGaloisKeys` when inputs do not include steps so that even when `EncryptionParameterQualifiers::using_batching` is false Galois automorphisms are still available.\n\n### File Changes\n\n- `dotnet/SEALNet.sln` is removed.\n- `dotnet/SEALNet.sln.in` is added.\n\n## Version 3.7.2\n\n### Bug Fixes\n\n- Fixed a bug when Intel HEXL is used [(Issue 411)](https://github.com/microsoft/SEAL/issues/411) [(PR 414)](https://github.com/microsoft/SEAL/pull/414).\n- Fixed an abnormal benchmark case due to AVX512 transitions when Intel HEXL is used [(PR 416)](https://github.com/microsoft/SEAL/pull/416).\n\n## Version 3.7.1\n\n### Bug Fixes\n\n- Fixed compiler and linker errors in downstream projects when Microsoft SEAL is built with `SEAL_BUILD_DEPS=ON` and `SEAL_USE_INTEL_HEXL=ON`.\n- Updated CMake minimum requirement to 3.13.\n\n### File Changes\n\n- `native/src/seal/util/intel_seal_ext.h` is removed.\n- `native/src/seal/util/intel_seal_ext.cpp` is removed.\n\n## Version 3.7.0\n\n### Features\n\n- Improved the performance of `Evaluator::multiply`, `Evaluator::multiply_inplace`, and `Evaluator::square` in the BFV scheme for default parameters with degree `4096` or higher.\n- Improved the performance of decryption [(PR 363)](https://github.com/microsoft/SEAL/pull/363).\n- Updated to HEXL version 1.2.1 [(PR 375)](https://github.com/microsoft/SEAL/pull/375).\n- Added more benchmark cases [(PR 379)](https://github.com/microsoft/SEAL/pull/379).\n\n### Minor API Changes\n\n- `const` methods in `SEALContext` and `SEALContext::ContextData` classes that used to return a pointer or reference now have a preceeding `const` qualifier.\n\n### Bug Fixes\n\n- Fixed failed tests on PowerPC architecture [(Issue 360)](https://github.com/microsoft/SEAL/issues/360).\n\n## Version 3.6.6\n\n### Bug Fixes\n\n- Fixed an error when loading seeded ciphertexts serialized by v3.4.x from v3.5.0+.\n- Fixed failed tests on ARM64 architecture [(Issue 347)](https://github.com/microsoft/SEAL/issues/347).\n\n### Other\n\n- Improved HEXL NTT integration [(PR 349)](https://github.com/microsoft/SEAL/pull/349).\n- Improved CKKS ciphertext multiplication [(PR 346)](https://github.com/microsoft/SEAL/pull/346).\n- Improved CKKS ciphertext square [(PR 353)](https://github.com/microsoft/SEAL/pull/353), except that with GNU G++ compiler and `1024` degree there is a huge penalty in execution time.\nUsers should switch from GNU G++ in this specific parameter setting if CKKS square is used.\n\n## Version 3.6.5\n\n### New Features\n\n- Updated the dependency Intel HEXL to v1.1.0 [(PR 332)](https://github.com/microsoft/SEAL/pull/332).\n- Integrated more optimizations from Intel HEXL to Microsoft SEAL.\n- Intel HEXL now uses Microsoft SEAL's memory pool, so that memory allocation reported by Microsoft SEAL is more accurate.\n\n### Bug Fixes\n\n- Fixed typos in comments [(PR 328)](https://github.com/microsoft/SEAL/pull/328).\n- Fixed a bug in `DWTHandler` [(Issue 330)](https://github.com/microsoft/SEAL/issues/330).\n- Fixed failing tests when `SEAL_USE_ZLIB=OFF` and `SEAL_USE_ZTD=OFF` [(PR 332)](https://github.com/microsoft/SEAL/pull/332).\n- Fixed shared library build when `SEAL_USE_HEXL=ON` [(PR 332)](https://github.com/microsoft/SEAL/pull/332).\n- Added missing `const` qualifiers to several members of `BatchEncoder` and `Evaluator` [(PR 334)](https://github.com/microsoft/SEAL/pull/334).\n\n## Version 3.6.4\n\n### New Features\n\n- Enabled [AddressSanitizer](https://github.com/google/sanitizers/wiki/AddressSanitizer) and [LeakSanitizer](https://github.com/google/sanitizers/wiki/AddressSanitizerLeakSanitizer) when building Microsoft SEAL [tests](native/tests/CMakeLists.txt) in Debug mode on Unix-like systems, based on [(PR 318)](https://github.com/microsoft/SEAL/pull/318).\n\n### Bug Fixes\n\n- Fixed `alloc-dealloc-mismatch` issues resolved by [(PR 318)](https://github.com/microsoft/SEAL/pull/318).\n- Fixed wrong descriptions in [serializable.h](native/src/seal/serializable.h) and [Serializable.cs](dotnet/src/Serializable.cs) reported in [(Issue 316)](https://github.com/microsoft/SEAL/issues/316).\n\n## Version 3.6.3\n\n### New Features\n\n- Added support to build Microsoft SEAL out of the box with [emscripten](https://emscripten.org/) [(PR 306)](https://github.com/microsoft/SEAL/pull/306).\n- Added support to build Microsoft SEAL with [Intel HEXL](https://github.com/intel/hexl) as an optional dependency [(PR 312)](https://github.com/microsoft/SEAL/pull/312).\n\n### Other\n\n- Improved the error message when attempting to configure with `BUILD_SHARED_LIBS=ON` and `SEAL_BUILD_SEAL_C=ON` [(Issue 284)](https://github.com/microsoft/SEAL/issues/284).\n- Added `seal::random_bytes` function in [randomgen.h](native/src/seal/randomgen.h).\n- Removed redundant `is_metadata_valid_for` invocations reported in [(Issue 313)](https://github.com/microsoft/SEAL/issues/313).\n- Minor bug fixes\n\n### File Changes\n\n- [cmake/ExternalIntelHEXL.cmake](cmake/ExternalIntelHEXL.cmake)\n- [native/src/seal/util/intel_seal_ext.h](native/src/seal/util/intel_seal_ext.h)\n\n#### New files\n\n## Version 3.6.2\n\n### Hotfix - 2/18/2021\n\n- Merged pull request [(PR 282)](https://github.com/microsoft/SEAL/pull/282) with typo and minor bug fixes.\n\n### Bug Fixes\n\n- Fixed an issue [(Issue 278)](https://github.com/microsoft/SEAL/issues/278) in finding ZLIB header files when building SEAL with `BUILD_SHARED_LIBS=ON`.\n- Fixed a member variable initialization order bug in [SafeByteBuffer](native/src/seal/util/streambuf.h).\n\n### New Features\n\n- Added benchmarks that depend on Google Benchmark in [native/bench](native/bench).\n\n### Other\n\n- Changed low-level code that reduces the runtime difference among code generated by msvc, gcc, and clang.\n- Using ARM64 intrinsics for better performance [(PR 269)](https://github.com/microsoft/SEAL/pull/269).\n\n## Version 3.6.1\n\n- Fixed a bug reported in [(Issue 248)](https://github.com/microsoft/SEAL/issues/248) and [(Issue 249)](https://github.com/microsoft/SEAL/issues/249): in in-place Zstandard compression the input buffer head location was not correctly updated, resulting in huge memory use.\n\n## Version 3.6.0\n\n### Hotfix - 12/2/2020\n\n- Fixed an issue with CMake system where a shared Zstandard was not correctly handled (it is not supported).\n\n### Hotfix - 11/17/2020\n\n- Fixed an issue with CMake system where `BUILD_SHARED_LIBS=ON` and `SEAL_BUILD_DEPS=ON` resulted in Zstandard header files not being visible to the build [(Issue 242)](https://github.com/microsoft/SEAL/issues/242).\n\n### Hotfix - 11/16/2020\n\n- Fixed issues with CMake system overwriting existing `FETCHCONTENT_BASE_DIR` [(Issue 242)](https://github.com/microsoft/SEAL/issues/242).\n- Corrected mistakes and typos in [README.md](README.md).\n\n### New Features\n\n- Added support for [Zstandard](https://github.com/facebook/zstd) compression as a much more efficient alternative to ZLIB.\nThe performance improvement is around 20&ndash;30x.\n- Added support for iOS in the [NuGet package of Microsoft SEAL](https://www.nuget.org/packages/Microsoft.Research.SEALNet).\n- The build system is unified for all platforms.\nThere is no longer a Visual Studio solution file (`seal.sln`) for Windows.\nThere is a separate solution file for the dotnet library ([dotnet/SEALNet.sln](dotnet/SEALNet.sln)).\n- Added support for Shake256 (FIPS-202) XOF for pseudo-random number generation in addition to the default Blake2xb (faster).\n- Microsoft SEAL 3.6 is backwards compatible with 3.4 and 3.5 when deserializing, but it does not support serializing in the old formats.\n\n### Major API Changes\n\n- All C++ `enum` labels are consistently in lowercase. Most importantly, `scheme_type::BFV` and `scheme_type::CKKS` are changed to `scheme_type::bfv` and `scheme_type::ckks`.\n- Changed `seal::SEAL_BYTE` to `seal::seal_byte`; all uppercase names are used only for preprocessor macros.\n- Removed `BatchEncoder` API for encoding and decoding `Plaintext` objects inplace.\nThis is because a `Plaintext` object with slot-data written into the coefficients is (confusingly) not valid to be used for encryption.\n- Removed `IntegerEncoder` and `BigUInt` classes.\n`IntegerEncoder` results in inefficient homomorphic evaluation and lacks sane correctness properties, so it was basically impossible to use in real applications.\nThe `BigUInt` class was only used by the `IntegerEncoder`.\n- All `Encryptor::encrypt` variants have now two overloads: one that takes a `Ciphertext` out-parameter, and one that returns a `Serializable<Ciphertext>`.\n- Changed the names of the public key generation functions to clearly express that a new key is created each time, e.g., `KeyGenerator::create_public_key`.\n- Removed the `KeyGenerator::relin_keys_local` and `KeyGenerator::galois_keys_local` functions.\nThese were poorly named and have been replaced with overloads of `KeyGenerator::create_relin_keys` and `KeyGenerator::create_galois_keys` that take an out-parameter of type `RelinKeys` or `GaloisKeys`.\n- Renamed `IntArray` to `DynArray` (dynamic array) and removed unnecessary limitations on the object type template parameter.\n- Added public API for modular reduction to the `Modulus` class.\n- Added API for creating `DynArray` and `Plaintext` objects from a `gsl::span<std::uint64_t>` (C++) or `IEnumerable<ulong>` (C#).\n\n### Minor API Changes\n\n- Added `std::hash` implementation for `EncryptionParameters` (in addition to `parms_id_type`) so it is possible to create e.g. `std::unordered_map` of `EncryptionParameters`.\n- Added API to `UniformRandomGeneratorFactory` to find whether the factory uses a default seed and to retrieve that seed.\n- Added const overloads for `DynArray::begin` and `DynArray::end`.\n- Added a `Shake256PRNG` and `Shake256PRNGFactory` classes.\nRenamed `BlakePRNG` class to `Blake2xbPRNG`, and `BlakePRNGFactory` class to `Blake2xbPRNGFactory`.\n- Added a serializable `UniformRandomGeneratorInfo` class that represents the type of an extendable output function and a seed value.\n- Added [native/src/seal/version.h](native/src/seal/version.h) defining a struct `SEALVersion`.\nThis is used internally to route deserialization logic to correct functions depending on loaded `SEALHeader` version.\n\n### New Build Options\n\n- `SEAL_BUILD_DEPS` controls whether dependencies are downloaded and built into Microsoft SEAL or searched from the system.\n- Only a shared library will be built when `BUILD_SHARED_LIBS` is set to `ON`. Previously a static library was always built.\n- Encryption error is sampled from a Centered Binomial Distribution (CBD) by default unless `SEAL_USE_GAUSSIAN_NOISE` is set to `ON`.\nSampling from a CBD is constant-time and faster than sampling from a Gaussian distribution, which is why it is used by many of the NIST PQC finalists.\n- `SEAL_DEFAULT_PRNG` controls which XOF is used for pseudo-random number generation.\nThe available values are `Blake2xb` (default) and `Shake256`.\n\n### Other\n\n- The pkg-config system has been improved.\nAll files related to pkg-config have been moved to [pkgconfig/](pkgconfig/).\nCMake creates now also a pkg-config file `seal_shared.pc` for compiling against a shared Microsoft SEAL if `BUILD_SHARED_LIBS` is set to `ON`.\n- Added `.pre-commit-config.yaml` (check out [pre-commit](https://pre-commit.com) if you are not familiar with this tool).\n- Added `seal::util::DWTHandler` and `seal::util::Arithmetic` class templates that unify the implementation of FFT (used by `CKKSEncoder`) and NTT (used by polynomial arithmetic).\n- The performance of encoding and decoding in CKKS are improved.\n- The performance of randomness generation for ciphertexts and keys (RLWE samples) is improved.\n\n### File Changes\n\n#### Renamed files and directories\n\n- `native/src/seal/intarray.h` to [native/src/seal/dynarray.h](native/src/seal/dynarray.h)\n- `dotnet/src/SEALNet.csproj` to [dotnet/src/SEALNet.csproj.in](dotnet/src/SEALNet.csproj.in)\n- `dotnet/tests/SEALNetTest.csproj` to [dotnet/tests/SEALNetTest.csproj.in](dotnet/tests/SEALNetTest.csproj.in)\n- `dotnet/examples/SEALNetExamples.csproj` to [dotnet/examples/SEALNetExamples.csproj.in](dotnet/examples/SEALNetExamples.csproj.in)\n\n#### New files\n\n- [native/src/seal/util/dwthandler.h](native/src/seal/util/dwthandler.h)\n- [native/src/seal/util/fips202.h](native/src/seal/util/fips202.h)\n- [native/src/seal/util/fips202.c](native/src/seal/util/fips202.c)\n- [native/src/seal/version.h](native/src/seal/version.h)\n- [dotnet/SEALNet.sln](dotnet/SEALNet.sln)\n- [.pre-commit-config.yaml](.pre-commit-config.yaml)\n\n#### Removed files\n\n- `dotnet/src/BigUInt.cs`\n- `dotnet/src/IntegerEncoder.cs`\n- `dotnet/tests/BigUIntTests.cs`\n- `dotnet/tests/IntegerEncoderTests.cs`\n- `native/examples/SEALExamples.vcxproj`\n- `native/examples/SEALExamples.vcxproj.filters`\n- `native/src/CMakeConfig.cmd`\n- `native/src/SEAL_C.vcxproj`\n- `native/src/SEAL_C.vcxproj.filters`\n- `native/src/SEAL.vcxproj`\n- `native/src/SEAL.vcxproj.filters`\n- `native/src/seal/biguint.h`\n- `native/src/seal/biguint.cpp`\n- `native/src/seal/intencoder.h`\n- `native/src/seal/intencoder.cpp`\n- `native/tests/packages.config`\n- `native/tests/SEALTest.vcxproj`\n- `native/tests/SEALTest.vcxproj.filters`\n- `native/tests/seal/biguint.cpp`\n- `native/tests/seal/intencoder.cpp`\n- `thirdparty/`\n- `SEAL.sln`\n\n## Version 3.5.9\n\n### Bug fixes\n\n- Fixed [(Issue 216)](https://github.com/microsoft/SEAL/issues/216).\n- Fixed [(Issue 210)](https://github.com/microsoft/SEAL/issues/210).\n\n## Version 3.5.8\n\n### Other\n\n- The bug fixed in [(PR 209)](https://github.com/microsoft/SEAL/pull/209) also affects Android. Changed version to 3.5.8 where this is fixed.\n\n## Version 3.5.7\n\n### Hotfix - 8/28/2020\n\n- Merged [(PR 209)](https://github.com/microsoft/SEAL/pull/209). Thanks [s0l0ist](https://github.com/s0l0ist)!\n\n### Bug fixes\n\n- Fixed an omission in input validation in decryption: the size of the ciphertext was not checked to be non-zero.\n\n### Other\n\n- In Windows switch to using `RtlGenRandom` if the BCrypt API fails.\n- Improved performance in serialization: data clearing memory pools were always used before, but now are only used for the secret key.\n- Use native APIs for memory clearing, when available, instead of for-loop.\n\n## Version 3.5.6\n\n### Bug fixes\n\n- Fixed a bug where setting a PRNG factory to use a constant seed did not result in deterministic ciphertexts or public keys.\nThe problem was that the specified PRNG factory was not used to sample the uniform part of the RLWE sample(s), but instead a fresh (secure) PRNG was always created and used.\n- Fixed a bug where the `parms_id` of a `Plaintext` was not cleared correctly before resizing in `Decryptor::bfv_decrypt`.\nAs a result, a plaintext in NTT form could not be used as the destination for decrypting a BFV ciphertext.\n\n### Other\n\n- Merged pull request [(Issue 190)](https://github.com/microsoft/SEAL/pull/190) to replace global statics with function-local statics to avoid creating these objects unless they are actually used.\n\n## Version 3.5.5\n\n### Hotfix - 7/6/2020\n\n- Fixed [(Issue 188)](https://github.com/microsoft/SEAL/issues/188).\n\n### New features\n\n- Added a struct `seal::util::MultiplyUIntModOperand` in [native/src/seal/util/uintarithsmallmod.h](native/src/seal/util/uintarithsmallmod.h).\nThis struct handles precomputation data for Barrett style modular multiplication.\n- Added new overloads for modular arithmetic in [native/src/seal/util/uintarithsmallmod.h](native/src/seal/util/uintarithsmallmod.h) where one operand is replaced by a `MultiplyUIntModOperand` instance for improved performance when the same operand is used repeatedly.\n- Changed the name of `seal::util::barrett_reduce_63` to `seal::util::barrett_reduce_64`; the name was misleading and only referred to the size of the modulus.\n- Added `seal::util::StrideIter` in [native/src/seal/util/iterator.h](native/src/seal/util/iterator.h).\n- Added macros `SEAL_ALLOCATE_GET_PTR_ITER` and `SEAL_ALLOCATE_GET_STRIDE_ITER` in [native/src/seal/util/defines.h](native/src/seal/util/defines.h).\n\n### Other\n\n- Significant performance improvements from merging pull request [(PR 185)](https://github.com/microsoft/SEAL/pull/185) and implementing other improvements of the same style (see above).\n- Removed a lot of old and unused code.\n\n## Version 3.5.4\n\n### Bug Fixes\n\n- `std::void_t` was introduced only in C++17; switched to using a custom implementation [(Issue 180)](https://github.com/microsoft/SEAL/issues/180).\n- Fixed two independent bugs in `native/src/CMakeConfig.cmd`: The first prevented SEAL to be built in a directory with spaces in the path due to missing quotation marks. Another issue caused MSVC to fail when building SEAL for multiple architectures.\n- `RNSBase::decompose_array` had incorrect semantics that caused `Evaluator::multiply_plain_normal` and `Evaluator::transform_to_ntt_inplace` (for `Plaintext`) to behave incorrectly for some plaintexts.\n\n### Other\n\n- Added pkg-config support [(PR 181)](https://github.com/microsoft/SEAL/pull/181).\n- `seal::util::PtrIter<T *>` now dereferences correctly to `T &` instead of `T *`.\nThis results in simpler code, where inside `SEAL_ITERATE` lambda functions dereferences of `seal::util::PtrIter<T *>` do not need to be dereferenced a second time, as was particularly common when iterating over `ModulusIter` and `NTTTablesIter` types.\n- `seal::util::IterTuple` now dereferences to an `std::tuple` of dereferences of its component iterators, so it is no longer possible to directly pass a dereferenced `seal::util::IterTuple` to an inner lambda function in nested `SEAL_ITERATE` calls.\nInstead, the outer lambda function parameter should be wrapped inside another call to `seal::util::iter` before passed on to the inner `SEAL_ITERATE` to produce an appropriate `seal::util::IterTuple`.\n\n## Version 3.5.3\n\n### Bug Fixes\n\n- Fixed a bug in `seal::util::IterTuple<...>` where a part of the `value_type` was constructed incorrectly.\n- Fixed a bug in `Evaluator::mod_switch_drop_to_next` that caused non-inplace modulus switching to fail [(Issue 179)](https://github.com/microsoft/SEAL/issues/179). Thanks s0l0ist!\n\n## Version 3.5.2\n\n### Bug Fixes\n\n- Merged pull request [PR 178](https://github.com/microsoft/SEAL/pull/178) to fix a lambda capture issue when building on GCC 7.5.\n- Fixed issue where SEAL.vcxproj could not be compiled with MSBuild outside the solution [(Issue 171)](https://github.com/microsoft/SEAL/issues/171).\n- SEAL 3.5.1 required CMake 3.13 instead of 3.12; this has now been fixed and 3.12 works again [(Issue 167)](https://github.com/microsoft/SEAL/issues/167).\n- Fixed issue in NuSpec file that made local NuGet package generation fail.\n- Fixed issue in NuSpec where XML documentation was not included into the package.\n\n### New Features\n\n- Huge improvements to SEAL iterators, including `seal::util::iter` and `seal::util::reverse_iter` functions that can create any type of iterator from appropriate parameters.\n- Added `seal::util::SeqIter<T>` iterator for iterating a sequence of numbers for convenient iteration indexing.\n- Switched functions in `seal/util/polyarithsmallmod.*` to use iterators; this is to reduce the layers of iteration in higher level code.\n- Added macro `SEAL_ITERATE` that should be used instead of `for_each_n`.\n\n### Other\n\n- Added note in [README.md](README.md) about known performance issues when compiling with GNU G++ compared to Clang++ [(Issue 173)](https://github.com/microsoft/SEAL/issues/173).\n- Merged pull requests that improve the performance of keyswitching [(PR 177)](https://github.com/microsoft/SEAL/pull/177) and rescale [(PR 176)](https://github.com/microsoft/SEAL/pull/176) in CKKS.\n\n## Version 3.5.1\n\nChanged version to 3.5.1. The two hotfixes below are included.\n\n## Version 3.5.0\n\n### Hotfix - 4/30/2020\n\n- Fixed a critical bug [(Issue 166)](https://github.com/microsoft/SEAL/issues/166) in `Evaluator::multiply_plain_inplace`. Thanks s0l0ist!\n\n### Hotfix - 4/29/2020\n\n- Switched to using Microsoft GSL v3.0.1 and fixed minor GSL related issues in `CMakeLists.txt`.\n- Fixed some typos in [README.md](README.md).\n- Fixes bugs in ADO pipelines files.\n\n### New Features\n\n- Microsoft SEAL officially supports Android (Xamarin.Android) on ARM64.\n- Microsoft SEAL is a CMake project (UNIX-like systems only):\n  - There is now a top-level `CMakeLists.txt` that builds all native components.\n  - The following CMake targets are created: `SEAL::seal` (static library), `SEAL::seal_shared` (shared library; optional), `SEAL::sealc` (C export library; optional).\n  - Examples and unit tests are built if enabled through CMake (see [README.md](README.md)).\n  - ZLIB is downloaded and compiled by CMake and automatically included in the library.\n  - Microsoft GSL is downloaded by CMake. Its header files are copied to `native/src/gsl` and installed with Microsoft SEAL.\n  - Google Test is downloaded and compiled by CMake.\n- Improved serialization:\n  - `Serialization::SEALHeader` layout has been changed. SEAL 3.4 objects can still be loaded by SEAL 3.5, and the headers are automatically converted to SEAL 3.5 format.\n  - `Serialization::SEALHeader` captures version number information.\n  - Added examples for serialization.\n  - The seeded versions of `Encryptor`'s symmetric-key encryption and `KeyGenerator`'s `RelinKeys` and `GaloisKeys` generation now output `Serializable` objects. See more details in *API Changes* below.\n\n#### For Library Developers and Contributors\n\nWe have created a set of C++ iterators that easily allows looping over polynomials in a ciphertext, over RNS components in a polynomial, and over coefficients in an RNS component.\nThere are also a few other iterators that can come in handy.\nCurrently `Evaluator` fully utilizes these, and in the future the rest of the library will as well.\nThe iterators are primarily intended to be used with `std::for_each_n` to simplify existing code and help with code correctness.\nPlease see [native/src/seal/util/iterator.h](native/src/seal/util/iterator.h) for guidance on how to use these.\n\nWe have also completely rewritten the RNS tools that were previously in the `util::BaseConverter` class.\nThis functionality is now split between two classes: `util::BaseConverter` whose sole purpose is to perform the `FastBConv` computation of [[BEHZ16]](https://eprint.iacr.org/2016/510) and `util::RNSTool` that handles almost everything else.\nRNS bases are now represented by the new `util::RNSBase` class.\n\n### API Changes\n\nThe following changes are explained in C++ syntax and are introduced to .NET wrappers similarly:\n\n- New generic class `Serializable` wraps `Ciphertext`, `RelinKeys`, and `GaloisKeys` objects to provide a more flexible approach to the functionality provided in release 3.4 by `KeyGenerator::[relin|galois]_keys_save` and `Encryptor::encrypt_[zero_]symmetric_save` functions.\nSpecifically, these functions have been removed and replaced with overloads of `KeyGenerator::[relin|galois]_keys` and `Encryptor::encrypt_[zero_]symmetric` that return `Serializable` objects.\nThe `KeyGenerator::[relin|galois]_keys` methods in release 3.4 are renamed to `KeyGenerator::[relin|galois]_keys_local`.\nThe `Serializable` objects cannot be used directly by the API, and are only intended to be serialized, which activates the compression functionalities introduced earlier in release 3.4.\n- `SmallModulus` class is renamed to `Modulus`, and is relocated to [native/src/seal/modulus.h](native/src/seal/modulus.h).\n- `*coeff_mod_count*` methods are renamed to `*coeff_modulus_size*`, which applies to many classes.\n- `parameter_error_name` and `parameter_error_message` methods are added to `EncryptionParameterQualifiers` and `SEALContext` classes to explain why an `EncryptionParameters` object is invalid.\n- The data members and layout of `Serialization::SEALHeader` have changed.\n\nThe following changes are specific to C++:\n\n- New bounds in [native/src/seal/util/defines.h](native/src/seal/util/defines.h):\n  - `SEAL_POLY_MOD_DEGREE_MAX` is increased to 131072; values bigger than 32768 require the security check to be disabled by passing `sec_level_type::none` to `SEALContext::Create`.\n  - `SEAL_COEFF_MOD_COUNT_MAX` is increased to 64.\n  - `SEAL_MOD_BIT_COUNT_MAX` and `SEAL_MOD_BIT_COUNT_MIN` are added and set to 61 and 2, respectively.\n  - `SEAL_INTERNAL_MOD_BIT_COUNT` is added and set to 61.\n- `EncryptionParameterQualifiers` now has an error code `parameter_error` that interprets the reason why an `EncryptionParameter` object is invalid.\n- `bool parameters_set()` is added to replace the previous `bool parameters_set` member.\n\nThe following changes are specific to .NET:\n\n- Version numbers are retrievable in .NET through `SEALVersion` class.\n\n### Other Changes\n\n- Releases are now listed on [releases page](https://github.com/microsoft/SEAL/releases).\n- The native library can serialize (save and load) objects larger than 4 GB.\nPlease be aware that compressed serialization requires an additional temporary buffer roughly the size of the object to be allocated, and the streambuffer for the output stream may consume some non-trivial amount of memory as well.\nIn the .NET library, objects are limited to 2 GB, and loading an object larger than 2 GB will throw an exception.\n[(Issue 142)](https://github.com/microsoft/SEAL/issues/142)\n- Larger-than-suggested parameters are supported for expert users.\nTo enable that, please adjust `SEAL_POLY_MOD_DEGREE_MAX` and `SEAL_COEFF_MOD_COUNT_MAX` in [native/src/seal/util/defines.h](native/src/seal/util/defines.h).\n([Issue 150](https://github.com/microsoft/SEAL/issues/150),\n[Issue 84](https://github.com/microsoft/SEAL/issues/84))\n- Serialization now clearly indicates an insufficient buffer size error.\n[(Issue 117)](https://github.com/microsoft/SEAL/issues/117)\n- Unsupported compression mode now throws `std::invalid_argument` (native) or `ArgumentException` (.NET).\n- There is now a `.clang-format` for automated formatting of C++ (`.cpp` and `.h`) files.\nExecute `tools/scripts/clang-format-all.sh` for easy formatting (UNIX-like systems only).\nThis is compatible with clang-format-9 and above.\nFormatting for C# is not yet supported.\n[(Issue 93)](https://github.com/microsoft/SEAL/issues/93)\n- The C export library previously in `dotnet/native/` is moved to [native/src/seal/c/](native/src/seal/c/) and renamed to SEAL_C to support building of wrapper libraries in languages like .NET, Java, Python, etc.\n- The .NET wrapper library targets .NET Standard 2.0, but the .NET example and test projects use C# 8.0 and require .NET Core 3.x. Therefore, Visual Studio 2017 is no longer supported for building the .NET example and test projects.\n- Fixed issue when compiling in FreeBSD.\n([PR 113](https://github.com/microsoft/SEAL/pull/113))\n- A [bug](https://eprint.iacr.org/2019/1266) in the [[BEHZ16]](https://eprint.iacr.org/2016/510)-style RNS operations is fixed; proper unit tests are added.\n- Performance of methods in `Evaluator` are in general improved.\n([PR 148](https://github.com/microsoft/SEAL/pull/148))\nThis is compiler-dependent, however, and currently Clang seems to produce the fastest running code for Microsoft SEAL.\n\n### File Changes\n\nRenamed files and directories:\n\n- [dotnet/examples/7_Performance.cs](dotnet/examples/7_Performance.cs) was previously `dotnet/examples/6_Performance.cs`\n- [native/examples/7_performance.cpp](native/examples/7_performance.cpp) was previously `native/examples/6_performance.cpp`\n- [native/src/seal/c/](native/src/seal/c/) was previously `dotnet/native/sealnet`.\n- [native/src/seal/util/ntt.h](native/src/seal/util/ntt.h) was previously `native/src/seal/util/smallntt.h`.\n- [native/src/seal/util/ntt.cpp](native/src/seal/util/ntt.cpp) was previously `native/src/seal/util/smallntt.cpp`.\n- [native/tests/seal/util/ntt.cpp](native/tests/seal/util/ntt.cpp) was previously `native/tests/seal/util/smallntt.cpp`.\n\nNew files:\n\n- [android/](android/)\n- [dotnet/examples/6_Serialization.cs](dotnet/examples/6_Serialization.cs)\n- [dotnet/src/Serializable.cs](dotnet/src/Serializable.cs)\n- [dotnet/src/Version.cs](dotnet/src/Version.cs)\n- [dotnet/tests/SerializationTests.cs](dotnet/tests/SerializationTests.cs)\n- [native/examples/6_serialization.cpp](native/examples/6_serialization.cpp)\n- [native/src/seal/c/version.h](native/src/seal/c/version.h)\n- [native/src/seal/c/version.cpp](native/src/seal/c/version.cpp)\n- [native/src/seal/util/galois.h](native/src/seal/util/galois.h)\n- [native/src/seal/util/galois.cpp](native/src/seal/util/galois.cpp)\n- [native/src/seal/util/hash.cpp](native/src/seal/util/hash.cpp)\n- [native/src/seal/util/iterator.h](native/src/seal/util/iterator.h)\n- [native/src/seal/util/rns.h](native/src/seal/util/rns.h)\n- [native/src/seal/util/rns.cpp](native/src/seal/util/rns.cpp)\n- [native/src/seal/util/streambuf.h](native/src/seal/util/streambuf.h)\n- [native/src/seal/util/streambuf.cpp](native/src/seal/util/streambuf.cpp)\n- [native/src/seal/serializable.h](native/src/seal/serializable.h)\n- [native/tests/seal/util/iterator.cpp](native/tests/seal/util/iterator.cpp)\n- [native/tests/seal/util/galois.cpp](native/tests/seal/util/galois.cpp)\n- [native/tests/seal/util/rns.cpp](native/tests/seal/util/rns.cpp)\n\nRemoved files:\n\n- `dotnet/src/SmallModulus.cs` is merged to [dotnet/src/ModulusTests.cs](dotnet/src/Modulus.cs).\n- `dotnet/tests/SmallModulusTests.cs` is merged to [dotnet/tests/ModulusTests.cs](dotnet/tests/ModulusTests.cs).\n- `native/src/seal/util/baseconverter.h`\n- `native/src/seal/util/baseconverter.cpp`\n- `native/src/seal/smallmodulus.h` is merged to [native/src/seal/modulus.h](native/src/seal/modulus.h).\n- `native/src/seal/smallmodulus.cpp` is merged to [native/src/seal/modulus.cpp](native/src/seal/modulus.cpp).\n- `native/src/seal/c/smallmodulus.h` is merged to [native/src/seal/c/modulus.h](native/src/seal/c/modulus.h).\n- `native/src/seal/c/smallmodulus.cpp` is merged to [native/src/seal/c/modulus.cpp](native/src/seal/c/modulus.cpp).\n- `native/tests/seal/smallmodulus.cpp` is merged to [native/tests/seal/modulus.cpp](native/tests/seal/modulus.cpp).\n- `native/tests/seal/util/baseconverter.cpp`\n\n## Version 3.4.5\n\n- Fixed a concurrency issue in SEALNet: the `unordered_map` storing `SEALContext` pointers was not locked appropriately on construction and destruction of new `SEALContext` objects.\n- Fixed a few typos in examples ([PR 71](https://github.com/microsoft/SEAL/pull/71)).\n- Added include guard to config.h.in.\n\n## Version 3.4.4\n\n- Fixed issues with `SEALNet.targets` file and `SEALNet.nuspec.in`.\n- Updated `README.md` with information about existing multi-platform [NuGet package](https://www.nuget.org/packages/Microsoft.Research.SEALNet).\n\n## Version 3.4.3\n\n- Fixed bug in .NET serialization code where an incorrect number of bytes was written when using ZLIB compression.\n- Fixed an issue with .NET functions `Encryptor.EncryptSymmetric...`, where asymmetric encryption was done instead of symmetric encryption.\n- Prevented `KeyGenerator::galois_keys` and `KeyGenerator::relin_keys` from being called when the encryption parameters do not support keyswitching.\n- Fixed a bug in `Decryptor::invariant_noise_budget` where the computed noise budget was `log(plain_modulus)` bits smaller than it was supposed to be.\n- Removed support for Microsoft GSL `gsl::multi_span`, as it was recently deprecated in GSL.\n\n## Version 3.4.2\n\n- Fixed bug reported in [Issue 66](https://github.com/microsoft/SEAL/issues/66) on GitHub.\n- CMake does version matching now (correctly) only on major and minor version, not patch version, so writing `find_package(SEAL 3.4)` works correctly and selects the newest version `3.4.x` it can find.\n\n## Version 3.4.1\n\nThis patch fixes a few issues with ZLIB support on Windows.\nSpecifically,\n\n- Fixed a mistake in `native/src/CMakeConfig.cmd` where the CMake library search path\nsuffix was incorrect.\n- Switched to using a static version of ZLIB on Windows.\n- Corrected instructions in [README.md](README.md) for enabling ZLIB support on Windows.\n\n## Version 3.4.0\n\n### New Features\n\n- Microsoft SEAL can use [ZLIB](https://github.com/madler/zlib), a data compression library, to automatically compress data that is serialized. This applies to every serializable object in Microsoft SEAL.\nThis feature must be enabled by the user. See more explanation of the compression mechanism in [README.md](README.md#zlib).\nMicrosoft SEAL does not redistribute ZLIB.\n- AES-128 is replaced with the BLAKE2 family of hash functions in the pseudorandom number generator, as BLAKE2 provides better cross-platform support.\nMicrosoft SEAL redistributes the [reference implementation of BLAKE2](https://github.com/BLAKE2/BLAKE2) with light modifications to silence some misleading warnings in Visual Studio.\nThe reference implementation of BLAKE2 is licensed under [CC0 1.0 Universal](https://github.com/BLAKE2/BLAKE2/blob/master/COPYING); see license boilerplates in files [native/src/seal/util/blake*](native/src/seal/util/).\n- The serialization functionality has been completely rewritten to make it more safe and robust.\nEvery serialized Microsoft SEAL object starts with a 16-byte `Serialization::SEALHeader` struct, and then includes the data for the object member variables.\nEvery serializable object can now also be directly serialized into a memory buffer instead of a C++ stream.\nThis improves serialization for .NET and makes it much easier to wrap the serialization functionality in other languages, e.g., Java.\nUnfortunately, old serialized Microsoft SEAL objects are incompatible with the new format.\n- A ciphertext encrypted with a secret key, for example, a keyswitching key, has one component generated by the PRNG.\nBy using a seeded PRNG, this component can be replaced with the random seed used by the PRNG to reduce data size.\nAfter transmitted to another party with Microsoft SEAL, the component can be restored (regenerated) with the same seed.\nThe security of using seeded PRNG is enhanced by switching to BLAKE2 hash function with a 512-bit seed.\n- `Encryptor` now can be constructed with a secret key.\nThis enables symmetric key encryption which has methods that serialize ciphertexts (compressed with a seed) to a C++ stream or a memory buffer.\n- The CMake system has been improved.\nFor example, multiple versions of Microsoft SEAL can now be installed on the same system easily, as the default installation directory and library filename now depend on the version of Microsoft SEAL.\nExamples and unit tests can now be built without installing the library.\n[README.md](README.md) has been updated to reflect these changes.\n- `Encryptor::encrypt` operations in the BFV scheme are modified.\nEach coefficient of a plaintext message is first multiplied with the ciphertext modulus, then divided by the plaintext modulus, and rounded to the nearest integer.\nIn comparison with the previous method, where each coefficient of a plaintext message is multiplied with the flooring of the coefficient modulus divided by the plaintext modulus, the new method reduces the noise introduced in encryption, increases a noise budget of a fresh encryption, slightly slows down encryption, and has no impact on the security at all.\n- Merged [PR 62](https://github.com/microsoft/SEAL/pull/62) that uses a non-adjacent form (NAF) decomposition of random rotations to perform them in a minimal way from power-of-two rotations in both directions.\n- This improves performance of random rotations.\n\n### API Changes\n\n#### C++ Native\n\nIn all classes with `save` and `load` methods:\n\n- Replaced the old `save` with two new methods that saves to either a C++ stream or a memory buffer.\nOptionally, a compression mode can be chosen when saving an object.\n- Replaced the old `load` with two new methods that loads from either a C++ stream or a memory buffer.\n- Added a method `save_size` to get an upper bound on the size of the object as if it was written to an output stream.\nTo save to a buffer, the user must ensure that the buffer has at least size equal to what the `save_size` member function returns.\n- New `save` and `load` methods rely on the `Serialization` class declared in `serialization.h`.\nThis class unifies the serialization functionality for all serializable Microsoft SEAL classes.\n\nIn class `Ciphertext`:\n\n- Added a method `int_array` for read-only access to the underlying `IntArray` object.\n- Removed methods `uint64_count_capacity` and `uint64_count` that can now be accessed in a more descriptive manner through the `int_array` return value.\n\nIn class `CKKSEncoder`: added support for `gsl::span` type of input.\n\nIn class `SEALContext::ContextData`: added method `coeff_mod_plain_modulus` for read-only access to the non-RNS version of `upper_half_increment`.\n\nIn class `EncryptionParameters`: an `EncryptionParameters` object can be constructed without `scheme_type` which by default is set to `scheme_type::none`.\n\nIn class `Encryptor`:\n\n- An `Encryptor` object can now be constructed with a secret key to enable symmetric key encryption.\n- Added methods `encrypt_symmetric` and `encrypt_zero_symmetric` that generate a `Ciphertext` using the secret key.\n- Added methods `encrypt_symmetric_save` and `encrypt_zero_symmetric_save` that directly serialize the resulting `Ciphertext` to a C++ stream or a memory buffer.\nThe resulting `Ciphertext` no long exists after serilization.\nIn these methods, the second polynomial of a ciphertext is generated by the PRNG and is replaced with the random seed used.\n\nIn class `KeyGenerator`:\n\n- Added methods `relin_keys_save` and `galois_keys_save` that generate and directly serialize keys to a C++ stream or a memory buffer.\nThe resulting keys no long exist after serilization.\nIn these methods, half of the polynomials in keys are generated by the PRNG and is replaced with the random seed used.\n- Methods `galois_keys` and `galois_keys_save` throw an exception if `EncryptionParameters` do not support batching in the BFV scheme.\n\nIn class `Plaintext`: added a method `int_array` for read-only access to the underlying `IntArray` object.\n\nIn class `UniformRandomGenerator` and `UniformRandomGeneratorFactory`: redesigned for users to implement their own random number generators more easily.\n\nIn file `valcheck.h`: validity checks are partitioned into finer methods; the `is_valid_for(...)` functions will validate all aspects fo the Microsoft SEAL ojects.\n\nNew classes `BlakePRNG` and `BlakePRNGFactory`: uses Blake2 family of hash functions for PRNG.\n\nNew class `Serialization`:\n\n- Gives a uniform serialization in Microsoft SEAL to save objects to a C++ stream or a memory buffer.\n- Can be configured to use ZLIB compression.\n\nNew files:\n\n- [native/src/seal/util/rlwe.h](native/src/seal/util/rlwe.h)\n- [native/src/seal/util/blake2.h](native/src/seal/util/blake2.h)\n- [native/src/seal/util/blake2-impl.h](native/src/seal/util/blake2-impl.h)\n- [native/src/seal/util/blake2b.c](native/src/seal/util/blake2b.c)\n- [native/src/seal/util/blake2xb.c](native/src/seal/util/blake2xb.c)\n- [native/src/seal/util/croots.cpp](native/src/seal/util/croots.cpp)\n- [native/src/seal/util/croots.h](native/src/seal/util/croots.h)\n- [native/src/seal/util/scalingvariant.cpp](native/src/seal/util/scalingvariant.cpp)\n- [native/src/seal/util/scalingvariant.h](native/src/seal/util/scalingvariant.h)\n- [native/src/seal/util/ztools.cpp](native/src/seal/util/ztools.cpp)\n- [native/src/seal/util/ztools.h](native/src/seal/util/ztools.h)\n- [native/src/seal/serialization.cpp](native/src/seal/serialization.cpp)\n- [native/src/seal/serialization.h](native/src/seal/serialization.h)\n- [native/tests/seal/serialization.cpp](native/tests/seal/serialization.cpp)\n- [dotnet/native/sealnet/serialization_wrapper.cpp](dotnet/native/sealnet/serialization_wrapper.cpp)\n- [dotnet/native/sealnet/serialization_wrapper.h](dotnet/native/sealnet/serialization_wrapper.h)\n\nRemoved files:\n\n- [native/src/seal/util/hash.cpp](native/src/seal/util/hash.cpp)\n\n#### .NET\n\nAPI changes are mostly identical in terms of functionality to those in C++ native, except only the `IsValidFor` variant of the validity check functions is available in .NET, the more granular checks are not exposed.\n\nNew files:\n\n- [dotnet/src/Serialization.cs](dotnet/src/Serialization.cs)\n\n### Minor Bug and Typo Fixes\n\n- Function `encrypt_zero_asymmetric` in [native/src/seal/util/rlwe.h](native/src/seal/util/rlwe.h) handles the condition `is_ntt_form == false` correctly.\n- Invariant noise calculation in BFV is now correct when the plaintext modulus is large and ciphertexts are fresh (reported in [issue 59](https://github.com/microsoft/SEAL/issues/59)).\n- Fixed comments in [native/src/seal/util/smallntt.cpp](native/src/seal/util/smallntt.cpp) as reported in [issue 56](https://github.com/microsoft/SEAL/issues/56).\n- Fixed an error in examples as reported in [issue 61](https://github.com/microsoft/SEAL/issues/61).\n- `GaloisKeys` can no longer be created with encryption parameters that do not support batching.\n- Security issues in deserialization were resolved.\n\n## Version 3.3.2 (patch)\n\n### Minor Bug and Typo Fixes\n\n- Switched to using RNS rounding instead of RNS flooring to fix the CKKS\naccuracy issue reported in [issue 52](https://github.com/microsoft/SEAL/issues/52).\n- Added support for QUIET option in CMake (`find_package(seal QUIET)`).\n- Using `[[nodiscard]]` attribute when compiling as C++17.\n- Fixed a bug in `Evaluator::multiply_many` where the input vector was changed.\n\n## Version 3.3.1 (patch)\n\n### Minor Bug and Typo Fixes\n\n- A bug was fixed that introduced significant extra inaccuracy in CKKS when compiled on Linux, at least with some versions of glibc; Windows and macOS were not affected.\n- A bug was fixed where, on 32-bit platforms, some versions of GCC resolved the util::reverse_bits function to the incorrect overload.\n\n## Version 3.3.0\n\n### New Features\n\nIn this version, we have significantly improved the usability of the CKKS scheme in Microsoft SEAL and many of these improvements apply to the BFV scheme as well.\nHomomorphic operations that are based on key switching, i.e., relinearization and rotation, do not consume any noise budget (BFV) or impact accuracy (CKKS).\nThe implementations of these operations are significantly simplified and unified, and no longer use bit decomposition, so decomposition bit count is gone.\nMoreover, fresh ciphertexts now have lower noise.\nThese changes have an effect on the API and it will be especially worthwhile for users of older versions of the library to study the examples and comments in [native/examples/3_levels.cpp](native/examples/3_levels.cpp) (C++) or [dotnet/examples/3_Levels.cs](dotnet/examples/3_Levels.cs) (C#).\n\nThe setup of `EncryptionParameters` has been made both easier and safer (see [API Changes](#api-changes) below).\n\nThe examples in [native/examples/](native/examples/) and [dotnet/examples/](dotnet/examples/) have been redesigned to better teach the multiple technical concepts required to use Microsoft SEAL correctly and efficiently, and more compactly demonstrate the API.\n\n### API Changes\n\nDeleted header files:\n\n- `native/defaultparameters.h`\n\nNew header files:\n\n- [native/src/seal/kswitchkeys.h](native/src/seal/kswitchkeys.h): new base class for `RelinKeys` and `GaloisKeys`)\n- [native/src/seal/modulus.h](native/src/seal/modulus.h): static helper functions for parameter selection\n- [native/src/seal/valcheck.h](native/src/seal/valcheck.h): object validity check functionality\n- [native/src/seal/util/rlwe.h](native/src/seal/util/rlwe.h)\n\nIn class `SEALContext`:\n\n- Replaced `context_data(parms_id_type)` with `get_context_data(parms_id_type)`.\n- Removed `context_data()`.\n- Added `key_context_data()`, `key_parms_id()`, `first_context_data()`, and `last_context_data()`.\n- Added `using_keyswitching()` that indicates whether key switching is supported in this `SEALContext`.\n- `Create(...)` in C++, and constructor in C#, now accepts an optional security level based on [HomomorphicEncryption.org](https://HomomorphicEncryption.org) security standard, causing it to enforce the specified security level.\nBy default a 128-bit security level is used.\n- Added `prev_context_data()` method to class `ContextData` (doubly linked modulus switching chain).\n- In C# `SEALContext` now has a public constructor.\n\nParameter selection:\n\n- Removed the `DefaultParams` class.\n- Default `coeff_modulus` for the BFV scheme are now accessed through the function `CoeffModulus::BFVDefault(...)`.\nThese moduli are not recommended for the CKKS scheme.\n- Customized `coeff_modulus` for the CKKS scheme can be created using `CoeffModulus::Create(...)` which takes the `poly_modulus_degree` and a vector of bit-lengths of the prime factors as arguments.\nIt samples suitable primes close to 2^bit_length and returns a vector of `SmallModulus` elements.\n- `PlainModulus::Batching(...)` can be used to sample a prime for `plain_modulus` that supports `BatchEncoder` for the BFV scheme.\n\nOther important changes:\n\n- Removed `size_capacity` function and data members from `Ciphertext` class.\n- Moved all validation methods such as `is_valid_for` and `is_metadata_valid_for` to `valcheck.h`.\n- Removed argument `decomposition_bit_count` from methods `relin_keys(...)` and `galois_keys(...)` in class `KeyGenerator`.\n- It is no longer possible to create more than one relinearization key.\nThis is to simplify the API and reduce confusion. We have never seen a real use-case where more relinearization keys would be a good idea.\n- Added methods to generate an encryption of zero to `Encryptor`.\n- Added comparison methods and primality check for `SmallModulus`.\n- Classes `RelinKeys` and `GaloisKeys` are now derived from a common base class `KSwitchKeys`.\n- GoogleTest framework is now included as a Git submodule.\n- Numerous bugs have been fixed, particularly in the .NET wrappers.\n\n## Version 3.2\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 29.361328125,
          "content": "# Copyright (c) Microsoft Corporation. All rights reserved.\n# Licensed under the MIT license.\n\ncmake_minimum_required(VERSION 3.13)\n\n###################################################\n# Project SEAL includes the following components: #\n#   1. SEAL C++ library                           #\n#   2. SEAL C export library                      #\n#   3. SEAL C++ examples                          #\n#   4. SEAL C++ tests                             #\n###################################################\n\n# [option] CMAKE_BUILD_TYPE (default: \"Release\")\n# Build in one of the following modes: Release, Debug, MiniSizeRel, or RelWithDebInfo.\n# Most generators recognize these and can set the compiler flags accordingly. We set\n# the build type here before creating the project to prevent the CMake generator from\n# overriding our default of \"Release\".\nif(NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE \"Release\" CACHE STRING \"Build type\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY\n        STRINGS \"Release\" \"Debug\" \"MinSizeRel\" \"RelWithDebInfo\")\nendif()\nmessage(STATUS \"Build type (CMAKE_BUILD_TYPE): ${CMAKE_BUILD_TYPE}\")\n\nproject(SEAL VERSION 4.1.2 LANGUAGES CXX C)\n\n########################\n# Global configuration #\n########################\n\n# CMake modules\ninclude(CMakeDependentOption)\ninclude(CMakePushCheckState)\ninclude(CheckIncludeFiles)\ninclude(CheckCXXSourceCompiles)\ninclude(CheckCXXSourceRuns)\ninclude(CheckTypeSize)\ninclude(CheckSymbolExists)\n\n# Extra modules\nlist(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/cmake)\ninclude(SEALMacros)\n\n# Always build position-independent-code\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\n\n# Make the install target depend on the all target (required by vcpkg)\nset(CMAKE_SKIP_INSTALL_ALL_DEPENDENCY OFF)\n\n# In Debug mode, define SEAL_DEBUG\nif(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n    set(SEAL_DEBUG ON)\n    # In Debug mode, enable extra compiler flags.\n    include(EnableCXXCompilerFlags)\nelse()\n    set(SEAL_DEBUG OFF)\nendif()\nmessage(STATUS \"Microsoft SEAL debug mode: ${SEAL_DEBUG}\")\n\n# [option] SEAL_USE_CXX17 (default: ON)\n# Use C++17, use C++14 otherwise.\nset(SEAL_USE_CXX17_OPTION_STR \"Use C++17\")\noption(SEAL_USE_CXX17 ${SEAL_USE_CXX17_OPTION_STR} ON)\nmessage(STATUS \"SEAL_USE_CXX17: ${SEAL_USE_CXX17}\")\n\n# Enable features from C++17 if available, disable features if set to OFF.\ninclude(EnableCXX17)\n\n# Enable security-related compile options (MSVC only)\nset(SEAL_SECURE_COMPILE_OPTIONS_OPTIONS_STR \"Enable Control Flow Guard and Spectre mitigations (MSVC only)\")\noption(SEAL_SECURE_COMPILE_OPTIONS ${SEAL_SECURE_COMPILE_OPTIONS_OPTIONS_STR} OFF)\nmark_as_advanced(SEAL_SECURE_COMPILE_OPTIONS)\n\n# Path for output\nif(ANDROID_ABI)\n    # Android compiles several targets at the same time. Need to specify\n    # separate directories for separate ABIs.\n    set(OUTLIB_PATH \"lib/${ANDROID_ABI}\")\nelse()\n    set(OUTLIB_PATH \"lib\")\nendif()\n\n# Required files and directories\ninclude(GNUInstallDirs)\n\n# Runtime path setup\nset(CMAKE_INSTALL_RPATH \"${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}\")\nset(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\n\n# Source Tree\nset(SEAL_INCLUDES_DIR ${CMAKE_CURRENT_LIST_DIR}/native/src)\nset(SEAL_CONFIG_IN_FILENAME ${CMAKE_CURRENT_LIST_DIR}/cmake/SEALConfig.cmake.in)\nset(SEAL_CONFIG_H_IN_FILENAME ${SEAL_INCLUDES_DIR}/seal/util/config.h.in)\n\n# Build tree\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/${OUTLIB_PATH})\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/${OUTLIB_PATH})\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/bin)\nset(SEAL_TARGETS_FILENAME ${CMAKE_CURRENT_BINARY_DIR}/cmake/SEALTargets.cmake)\nset(SEAL_CONFIG_FILENAME ${CMAKE_CURRENT_BINARY_DIR}/cmake/SEALConfig.cmake)\nset(SEAL_CONFIG_VERSION_FILENAME ${CMAKE_CURRENT_BINARY_DIR}/cmake/SEALConfigVersion.cmake)\nset(SEAL_CONFIG_H_FILENAME ${CMAKE_CURRENT_BINARY_DIR}/native/src/seal/util/config.h)\nset(SEAL_THIRDPARTY_DIR ${CMAKE_CURRENT_BINARY_DIR}/thirdparty)\n\n# Install\nset(SEAL_CONFIG_INSTALL_DIR ${CMAKE_INSTALL_LIBDIR}/cmake/SEAL-${SEAL_VERSION_MAJOR}.${SEAL_VERSION_MINOR})\nset(SEAL_INCLUDES_INSTALL_DIR ${CMAKE_INSTALL_INCLUDEDIR}/SEAL-${SEAL_VERSION_MAJOR}.${SEAL_VERSION_MINOR})\n\n# pkg-config\nset(SEAL_PKGCONFIG_IN_DIR ${CMAKE_CURRENT_LIST_DIR}/pkgconfig)\nset(SEAL_PKGCONFIG_IN_FILENAME ${SEAL_PKGCONFIG_IN_DIR}/seal.pc.in)\nset(SEAL_PKGCONFIG_SHARED_IN_FILENAME ${SEAL_PKGCONFIG_IN_DIR}/seal_shared.pc.in)\nset(SEAL_PKGCONFIG_MSGSL_IN_FILENAME ${SEAL_PKGCONFIG_IN_DIR}/seal_msgsl.pc.in)\nset(SEAL_PKGCONFIG_DIR ${CMAKE_CURRENT_BINARY_DIR}/pkgconfig)\nset(SEAL_PKGCONFIG_FILENAME ${SEAL_PKGCONFIG_DIR}/seal.pc)\nset(SEAL_PKGCONFIG_SHARED_FILENAME ${SEAL_PKGCONFIG_DIR}/seal_shared.pc)\nset(SEAL_PKGCONFIG_MSGSL_FILENAME ${SEAL_PKGCONFIG_DIR}/seal_msgsl.pc)\nset(SEAL_PKGCONFIG_INSTALL_DIR ${CMAKE_INSTALL_LIBDIR}/pkgconfig)\n\n# Clean up artifacts from previous versions\ninclude(CleanArtifacts)\n\n#########################\n# External dependencies #\n#########################\n\n# [option] SEAL_BUILD_DEPS (default: ON)\n# Download and build missing dependencies, throw error if disabled.\nset(SEAL_BUILD_DEPS_OPTION_STR \"Automatically download and build unmet dependencies\")\noption(SEAL_BUILD_DEPS ${SEAL_BUILD_DEPS_OPTION_STR} ON)\nmessage(STATUS \"SEAL_BUILD_DEPS: ${SEAL_BUILD_DEPS}\")\n\nif(SEAL_BUILD_DEPS)\n    include(FetchContent)\n    mark_as_advanced(FETCHCONTENT_BASE_DIR)\n    mark_as_advanced(FETCHCONTENT_FULLY_DISCONNECTED)\n    mark_as_advanced(FETCHCONTENT_UPDATES_DISCONNECTED)\n    mark_as_advanced(FETCHCONTENT_QUIET)\nendif()\n\n# [option] SEAL_USE_MSGSL (default: ON)\nset(SEAL_USE_MSGSL_OPTION_STR \"Use Microsoft GSL\")\noption(SEAL_USE_MSGSL ${SEAL_USE_MSGSL_OPTION_STR} ON)\nmessage(STATUS \"SEAL_USE_MSGSL: ${SEAL_USE_MSGSL}\")\n\nif(SEAL_USE_MSGSL)\n    if(SEAL_BUILD_DEPS)\n        message(STATUS \"Microsoft GSL: download ...\")\n        seal_fetch_thirdparty_content(ExternalMSGSL)\n    else()\n        find_package(Microsoft.GSL 4 CONFIG)\n        if(NOT Microsoft.GSL_FOUND)\n            message(FATAL_ERROR \"Microsoft GSL: not found\")\n        else()\n            message(STATUS \"Microsoft GSL: found\")\n        endif()\n    endif()\nendif()\n\n# [option] SEAL_USE_ZLIB (default: ON)\nset(SEAL_USE_ZLIB_OPTION_STR \"Use ZLIB for compressed serialization\")\noption(SEAL_USE_ZLIB ${SEAL_USE_ZLIB_OPTION_STR} ON)\nmessage(STATUS \"SEAL_USE_ZLIB: ${SEAL_USE_ZLIB}\")\n\nif(SEAL_USE_ZLIB)\n    if(SEAL_BUILD_DEPS)\n        message(STATUS \"ZLIB: download ...\")\n        seal_fetch_thirdparty_content(ExternalZLIB)\n        set(zlib \"zlibstatic\")\n    else()\n        find_package(ZLIB 1)\n        if(NOT ZLIB_FOUND)\n            message(FATAL_ERROR \"ZLIB: not found\")\n        else()\n            message(STATUS \"ZLIB: found\")\n        endif()\n        set(zlib \"ZLIB::ZLIB\")\n    endif()\nendif()\n\n# [option] SEAL_USE_ZSTD (default: ON)\nset(SEAL_USE_ZSTD_OPTION_STR \"Use Zstandard for compressed serialization\")\noption(SEAL_USE_ZSTD ${SEAL_USE_ZSTD_OPTION_STR} ON)\nmessage(STATUS \"SEAL_USE_ZSTD: ${SEAL_USE_ZSTD}\")\n\nif(SEAL_USE_ZSTD)\n    if(SEAL_BUILD_DEPS)\n        message(STATUS \"Zstandard: download ...\")\n        seal_fetch_thirdparty_content(ExternalZSTD)\n        set(zstd_static \"libzstd_static\")\n    else()\n        find_package(zstd CONFIG)\n        if(NOT zstd_FOUND)\n            message(FATAL_ERROR \"Zstandard: not found\")\n        else()\n            if(TARGET zstd::libzstd_static)\n                set(zstd_static \"zstd::libzstd_static\")\n            elseif(TARGET libzstd)\n                get_target_property(libzstd_type libzstd TYPE)\n                if(libzstd_type STREQUAL \"STATIC_LIBRARY\")\n                    set(zstd_static \"libzstd\")\n                    message(STATUS \"Zstandard: found\")\n                else()\n                    message(FATAL_ERROR \"Zstandard: must be static\")\n                endif()\n            elseif(TARGET zstd::libzstd_shared)\n                message(FATAL_ERROR \"Zstandard: must be static\")\n            else()\n                message(FATAL_ERROR \"Zstandard: not found\")\n            endif()\n        endif()\n    endif()\nendif()\n\n# [option] SEAL_USE_INTEL_HEXL (default: OFF)\nset(SEAL_USE_INTEL_HEXL_OPTION_STR \"Use Intel HEXL library\")\noption(SEAL_USE_INTEL_HEXL ${SEAL_USE_INTEL_HEXL_OPTION_STR} OFF)\nmessage(STATUS \"SEAL_USE_INTEL_HEXL: ${SEAL_USE_INTEL_HEXL}\")\n\nif(SEAL_USE_INTEL_HEXL)\n    if(SEAL_BUILD_DEPS)\n        message(STATUS \"Intel HEXL: download ...\")\n        seal_fetch_thirdparty_content(ExternalIntelHEXL)\n    else()\n        find_package(HEXL 1.2.4)\n        if (NOT TARGET HEXL::hexl)\n            message(FATAL_ERROR \"Intel HEXL: not found\")\n        endif()\n    endif()\nendif()\n\n####################\n# SEAL C++ library #\n####################\n\n# [option] BUILD_SHARED_LIBS (default: OFF)\n# Build a shared library if set to ON. Build a static library regardlessly.\nset(BUILD_SHARED_LIBS_STR \"Build shared library\")\noption(BUILD_SHARED_LIBS ${BUILD_SHARED_LIBS_STR} OFF)\nmessage(STATUS \"BUILD_SHARED_LIBS: ${BUILD_SHARED_LIBS}\")\nif(WIN32 AND BUILD_SHARED_LIBS)\n    message(FATAL_ERROR \"On Windows only static build is supported; set `BUILD_SHARED_LIBS=OFF`\")\nendif()\n\n# [option] SEAL_THROW_ON_TRANSPARENT_CIPHERTEXT (default: ON)\nset(SEAL_THROW_ON_TRANSPARENT_CIPHERTEXT_STR \"Throw an exception when Evaluator outputs a transparent ciphertext\")\noption(SEAL_THROW_ON_TRANSPARENT_CIPHERTEXT ${SEAL_THROW_ON_TRANSPARENT_CIPHERTEXT_STR} ON)\nmessage(STATUS \"SEAL_THROW_ON_TRANSPARENT_CIPHERTEXT: ${SEAL_THROW_ON_TRANSPARENT_CIPHERTEXT}\")\nmark_as_advanced(FORCE SEAL_THROW_ON_TRANSPARENT_CIPHERTEXT)\n\n# [option] SEAL_USE_GAUSSIAN_NOISE (default: OFF)\n# Use Gaussian distribution for noise sampling if set to ON, use centered binomial otherwise.\nset(SEAL_USE_GAUSSIAN_NOISE_STR \"Use a rounded Gaussian distribution for noise sampling instead of a Centered Binomial Distribution\")\noption(SEAL_USE_GAUSSIAN_NOISE ${SEAL_USE_GAUSSIAN_NOISE_STR} OFF)\nmessage(STATUS \"SEAL_USE_GAUSSIAN_NOISE: ${SEAL_USE_GAUSSIAN_NOISE}\")\nmark_as_advanced(FORCE SEAL_USE_GAUSSIAN_NOISE)\n\n# [option] SEAL_DEFAULT_PRNG (default: Blake2xb)\n# Choose either Blake2xb or Shake256 to be the default PRNG.\nset(SEAL_DEFAULT_PRNG_STR \"Choose the default PRNG\")\nset(SEAL_DEFAULT_PRNG \"Blake2xb\" CACHE STRING ${SEAL_DEFAULT_PRNG_STR} FORCE)\nmessage(STATUS \"SEAL_DEFAULT_PRNG: ${SEAL_DEFAULT_PRNG}\")\nset_property(CACHE SEAL_DEFAULT_PRNG PROPERTY\n    STRINGS \"Blake2xb\" \"Shake256\")\nmark_as_advanced(FORCE SEAL_DEFAULT_PRNG)\n\n# [option] SEAL_AVOID_BRANCHING (default: OFF)\n# Avoid branching in critical conditional move operations if set to ON, use faster method if set to OFF.\nset(SEAL_AVOID_BRANCHING_STR \"Use an always branching-free conditional move\")\noption(SEAL_AVOID_BRANCHING ${SEAL_AVOID_BRANCHING_STR} OFF)\nmessage(STATUS \"SEAL_AVOID_BRANCHING: ${SEAL_AVOID_BRANCHING}\")\nmark_as_advanced(FORCE SEAL_AVOID_BRANCHING)\n\n# [option] SEAL_USE_INTRIN (default: ON)\nset(SEAL_USE_INTRIN_OPTION_STR \"Use intrinsics\")\noption(SEAL_USE_INTRIN ${SEAL_USE_INTRIN_OPTION_STR} ON)\n# Look for header files, use intrinsics if available, set to OFF otherwise.\ninclude(CheckCXXIntrinsicsHeader)\nif(NOT SEAL_INTRIN_HEADER_FOUND)\n    set(SEAL_USE_INTRIN OFF CACHE BOOL ${SEAL_USE_INTRIN_OPTION_STR} FORCE)\nendif()\nmessage(STATUS \"SEAL_USE_INTRIN: ${SEAL_USE_INTRIN}\")\n\n# [option] SEAL_USE_${A_SPECIFIC_INTRIN} (default: ON, advanced)\n# Not available if SEAL_USE_INTRIN is OFF.\n# Use a specific intrinsic if available, set to OFF otherwise.\ninclude(CheckCXXIntrinsicsSpecific)\n\nif(MSVC)\n    set(SEAL_USE__UMUL128_OPTION_STR \"Use _umul128\")\n    cmake_dependent_option(SEAL_USE__UMUL128 ${SEAL_USE__UMUL128_OPTION_STR} ON \"SEAL_USE_INTRIN\" OFF)\n    mark_as_advanced(FORCE SEAL_USE__UMUL128)\n    if(NOT SEAL__UMUL128_FOUND)\n        set(SEAL_USE__UMUL128 OFF CACHE BOOL ${SEAL_USE__UMUL128_OPTION_STR} FORCE)\n    endif()\n\n    set(SEAL_USE__BITSCANREVERSE64_OPTION_STR \"Use _BitScanReverse64\")\n    cmake_dependent_option(SEAL_USE__BITSCANREVERSE64 ${SEAL_USE__BITSCANREVERSE64_OPTION_STR} ON \"SEAL_USE_INTRIN\" OFF)\n    mark_as_advanced(FORCE SEAL_USE__BITSCANREVERSE64)\n    if(NOT SEAL__BITSCANREVERSE64_FOUND)\n        set(SEAL_USE__BITSCANREVERSE64 OFF CACHE BOOL ${SEAL_USE__BITSCANREVERSE64_OPTION_STR} FORCE)\n    endif()\nelse()\n    set(SEAL_USE___INT128_OPTION_STR \"Use __int128\")\n    cmake_dependent_option(SEAL_USE___INT128 ${SEAL_USE___INT128_OPTION_STR} ON \"SEAL_USE_INTRIN\" OFF)\n    mark_as_advanced(FORCE SEAL_USE___INT128)\n    if(NOT SEAL___INT128_FOUND)\n        set(SEAL_USE___INT128 OFF CACHE BOOL ${SEAL_USE___INT128_OPTION_STR} FORCE)\n    endif()\n\n    set(SEAL_USE___BUILTIN_CLZLL_OPTION_STR \"Use __builtin_clzll\")\n    cmake_dependent_option(SEAL_USE___BUILTIN_CLZLL ${SEAL_USE___BUILTIN_CLZLL_OPTION_STR} ON \"SEAL_USE_INTRIN\" OFF)\n    mark_as_advanced(FORCE SEAL_USE___BUILTIN_CLZLL)\n    if(NOT SEAL___BUILTIN_CLZLL_FOUND)\n        set(SEAL_USE___BUILTIN_CLZLL OFF CACHE BOOL ${SEAL_USE___BUILTIN_CLZLL_OPTION_STR} FORCE)\n    endif()\nendif()\n\nset(SEAL_USE__ADDCARRY_U64_OPTION_STR \"Use _addcarry_u64\")\ncmake_dependent_option(SEAL_USE__ADDCARRY_U64 ${SEAL_USE__ADDCARRY_U64_OPTION_STR} ON \"SEAL_USE_INTRIN\" OFF)\nmark_as_advanced(FORCE SEAL_USE__ADDCARRY_U64)\nif(NOT SEAL__ADDCARRY_U64_FOUND)\n    set(SEAL_USE__ADDCARRY_U64 OFF CACHE BOOL ${SEAL_USE__ADDCARRY_U64_OPTION_STR} FORCE)\nendif()\n\nset(SEAL_USE__SUBBORROW_U64_OPTION_STR \"Use _subborrow_u64\")\ncmake_dependent_option(SEAL_USE__SUBBORROW_U64 ${SEAL_USE__SUBBORROW_U64_OPTION_STR} ON \"SEAL_USE_INTRIN\" OFF)\nmark_as_advanced(FORCE SEAL_USE__SUBBORROW_U64)\nif(NOT SEAL__SUBBORROW_U64_FOUND)\n    set(SEAL_USE__SUBBORROW_U64 OFF CACHE BOOL ${SEAL_USE__SUBBORROW_U64_OPTION_STR} FORCE)\nendif()\n\n# [option] SEAL_USE_${A_SPECIFIC_MEMSET_METHOD} (default: ON, advanced)\n# Use a specific memset method if available, set to OFF otherwise.\ninclude(CheckMemset)\n\nset(SEAL_USE_MEMSET_S_OPTION_STR \"Use memset_s\")\noption(SEAL_USE_MEMSET_S ${SEAL_USE_MEMSET_S_OPTION_STR} ON)\nmark_as_advanced(FORCE SEAL_USE_MEMSET_S)\nif(NOT SEAL_MEMSET_S_FOUND)\n    set(SEAL_USE_MEMSET_S OFF CACHE BOOL ${SEAL_USE_MEMSET_S_OPTION_STR} FORCE)\nendif()\nmessage(STATUS \"SEAL_USE_MEMSET_S: ${SEAL_USE_MEMSET_S}\")\n\nset(SEAL_USE_EXPLICIT_BZERO_OPTION_STR \"Use explicit_bzero\")\noption(SEAL_USE_EXPLICIT_BZERO ${SEAL_USE_EXPLICIT_BZERO_OPTION_STR} ON)\nmark_as_advanced(FORCE SEAL_USE_EXPLICIT_BZERO)\nif(NOT SEAL_EXPLICIT_BZERO_FOUND)\n    set(SEAL_USE_EXPLICIT_BZERO OFF CACHE BOOL ${SEAL_USE_EXPLICIT_BZERO_OPTION_STR} FORCE)\nendif()\nmessage(STATUS \"SEAL_USE_EXPLICIT_BZERO: ${SEAL_USE_EXPLICIT_BZERO}\")\n\nset(SEAL_USE_EXPLICIT_MEMSET_OPTION_STR \"Use explicit_memset\")\noption(SEAL_USE_EXPLICIT_MEMSET ${SEAL_USE_EXPLICIT_MEMSET_OPTION_STR} ON)\nmark_as_advanced(FORCE SEAL_USE_EXPLICIT_MEMSET)\nif(NOT SEAL_EXPLICIT_MEMSET_FOUND)\n    set(SEAL_USE_EXPLICIT_MEMSET OFF CACHE BOOL ${SEAL_USE_EXPLICIT_MEMSET_OPTION_STR} FORCE)\nendif()\nmessage(STATUS \"SEAL_USE_EXPLICIT_MEMSET: ${SEAL_USE_EXPLICIT_MEMSET}\")\n\n# [option] SEAL_USE_ALIGNED_ALLOC (default: ON, advanced)\n# Not available if SEAL_USE_CXX17 is OFF or building for Android.\n# Use 64-byte aligned malloc if available, set of OFF otherwise\nif(MSVC)\n    set(SEAL_USE_ALIGNED_ALLOC_OPTION_STR \"Use _aligned_malloc\")\nelse()\n    set(SEAL_USE_ALIGNED_ALLOC_OPTION_STR \"Use ::aligned_alloc\")\nendif()\ncmake_dependent_option(SEAL_USE_ALIGNED_ALLOC ${SEAL_USE_ALIGNED_ALLOC_OPTION_STR} ON \"SEAL_USE_CXX17;NOT ANDROID_ABI\" OFF)\nmark_as_advanced(FORCE SEAL_USE_ALIGNED_ALLOC)\n\n# Add source files to library and header files to install\nset(SEAL_SOURCE_FILES \"\")\nadd_subdirectory(native/src/seal)\n\n# Create the config file\nconfigure_file(${SEAL_CONFIG_H_IN_FILENAME} ${SEAL_CONFIG_H_FILENAME})\ninstall(\n    FILES ${SEAL_CONFIG_H_FILENAME}\n    DESTINATION ${SEAL_INCLUDES_INSTALL_DIR}/seal/util)\n\n# Build only a static library\nif(NOT BUILD_SHARED_LIBS)\n    add_library(seal STATIC ${SEAL_SOURCE_FILES})\n    seal_set_version_filename(seal)\n    seal_set_language(seal)\n    seal_set_include_directories(seal)\n    seal_set_version(seal)\n    seal_link_threads(seal)\n    seal_install_target(seal SEALTargets)\n\n    if(SEAL_USE_MSGSL)\n        if(SEAL_BUILD_DEPS)\n            target_include_directories(seal PUBLIC $<BUILD_INTERFACE:${msgsl_SOURCE_DIR}/include>)\n        else()\n            target_link_libraries(seal PUBLIC Microsoft.GSL::GSL)\n        endif()\n    endif()\n\n    if(SEAL_USE_ZLIB)\n        if(SEAL_BUILD_DEPS)\n            add_dependencies(seal ${zlib})\n            target_include_directories(seal PRIVATE $<BUILD_INTERFACE:${zlib_SOURCE_DIR}>)\n            target_include_directories(seal PRIVATE $<BUILD_INTERFACE:$<TARGET_PROPERTY:${zlib},BINARY_DIR>>)\n            seal_combine_archives(seal ${zlib})\n        else()\n            target_link_libraries(seal PRIVATE ${zlib})\n        endif()\n    endif()\n\n    if(SEAL_USE_ZSTD)\n        if(SEAL_BUILD_DEPS)\n            add_dependencies(seal ${zstd_static})\n            target_include_directories(seal PRIVATE $<BUILD_INTERFACE:${zstd_SOURCE_DIR}/lib>)\n            target_include_directories(seal PRIVATE $<BUILD_INTERFACE:${zstd_SOURCE_DIR}/lib/common>)\n            seal_combine_archives(seal ${zstd_static})\n        else()\n            target_link_libraries(seal PRIVATE ${zstd_static})\n        endif()\n    endif()\n\n    if(SEAL_USE_INTEL_HEXL)\n        if(SEAL_BUILD_DEPS)\n            add_dependencies(seal HEXL::hexl)\n            target_include_directories(seal PRIVATE\n                $<BUILD_INTERFACE:$<TARGET_PROPERTY:HEXL::hexl,INTERFACE_INCLUDE_DIRECTORIES>>)\n            target_compile_options(seal PRIVATE $<TARGET_PROPERTY:HEXL::hexl,INTERFACE_COMPILE_OPTIONS>)\n            get_target_property(HEXL_INTERFACE_LINK_OPTIONS HEXL::hexl INTERFACE_LINK_OPTIONS)\n            if (NOT \"${HEXL_INTERFACE_LINK_OPTIONS}\" STREQUAL \"HEXL_INTERFACE_LINK_OPTIONS-NOTFOUND\")\n                target_link_libraries(seal INTERFACE ${HEXL_INTERFACE_LINK_OPTIONS})\n            endif()\n            seal_combine_archives(seal HEXL::hexl)\n        else()\n            target_link_libraries(seal PUBLIC HEXL::hexl)\n        endif()\n    endif()\n\n    # Set secure compile options if SEAL_SECURE_COMPILE_OPTIONS is ON; only supported on MSVC\n    if(SEAL_SECURE_COMPILE_OPTIONS)\n        seal_set_secure_compile_options(seal PUBLIC)\n    endif()\n\n# Build only a shared library\nelse()\n    add_library(seal_shared SHARED ${SEAL_SOURCE_FILES})\n    seal_set_soversion(seal_shared)\n    set_target_properties(seal_shared PROPERTIES OUTPUT_NAME seal)\n    seal_set_language(seal_shared)\n    seal_set_include_directories(seal_shared)\n    seal_set_version(seal_shared)\n    seal_link_threads(seal_shared)\n    seal_install_target(seal_shared SEALTargets)\n\n    if(SEAL_USE_MSGSL)\n        if(SEAL_BUILD_DEPS)\n            target_include_directories(seal_shared PUBLIC $<BUILD_INTERFACE:${msgsl_SOURCE_DIR}/include>)\n        else()\n            target_link_libraries(seal_shared PUBLIC Microsoft.GSL::GSL)\n        endif()\n    endif()\n\n    if(SEAL_USE_ZLIB)\n        target_link_libraries(seal_shared PRIVATE ${zlib})\n        target_include_directories(seal_shared PRIVATE $<BUILD_INTERFACE:${zlib_SOURCE_DIR}>)\n        target_include_directories(seal_shared PRIVATE $<BUILD_INTERFACE:$<TARGET_PROPERTY:${zlib},BINARY_DIR>>)\n    endif()\n\n    if(SEAL_USE_ZSTD)\n        target_include_directories(seal_shared PRIVATE $<BUILD_INTERFACE:${zstd_SOURCE_DIR}/lib>)\n        target_include_directories(seal_shared PRIVATE $<BUILD_INTERFACE:${zstd_SOURCE_DIR}/lib/common>)\n        target_link_libraries(seal_shared PRIVATE ${zstd_static})\n    endif()\n\n    if(SEAL_USE_INTEL_HEXL)\n        target_link_libraries(seal_shared PRIVATE HEXL::hexl)\n        target_compile_options(seal_shared PRIVATE $<TARGET_PROPERTY:HEXL::hexl,INTERFACE_COMPILE_OPTIONS>)\n        get_target_property(HEXL_INTERFACE_LINK_OPTIONS HEXL::hexl INTERFACE_LINK_OPTIONS)\n        if (NOT \"${HEXL_INTERFACE_LINK_OPTIONS}\" STREQUAL \"HEXL_INTERFACE_LINK_OPTIONS-NOTFOUND\")\n            target_link_libraries(seal_shared INTERFACE ${HEXL_INTERFACE_LINK_OPTIONS})\n        endif()\n\n        # Install shared HEXL library to installation directory\n        install(DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}\n            DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_LIBRARY_PREFIX}\n            FILES_MATCHING PATTERN \"*hexl*\"\n            )\n    endif()\nendif()\n\n# Add standard alias targets for SEAL::seal and SEAL::seal_shared\nif(TARGET seal)\n    add_library(SEAL::seal ALIAS seal)\nendif()\nif(TARGET seal_shared)\n    add_library(SEAL::seal_shared ALIAS seal_shared)\nendif()\n\n#########################\n# SEAL C export library #\n#########################\n\n# [option] SEAL_BUILD_SEAL_C (default: OFF)\nset(SEAL_BUILD_SEAL_C_OPTION_STR \"Build C export library for Microsoft SEAL\")\noption(SEAL_BUILD_SEAL_C ${SEAL_BUILD_SEAL_C_OPTION_STR} OFF)\nmessage(STATUS \"SEAL_BUILD_SEAL_C: ${SEAL_BUILD_SEAL_C}\")\n\nset(SEAL_BUILD_STATIC_SEAL_C_OPTION_STR \"Build static C library for Microsoft SEAL\")\ncmake_dependent_option(SEAL_BUILD_STATIC_SEAL_C ${SEAL_BUILD_STATIC_SEAL_C_OPTION_STR} OFF \"SEAL_BUILD_SEAL_C\" OFF)\nmark_as_advanced(SEAL_BUILD_STATIC_SEAL_C)\n\n# Create SEAL_C library but add no source files yet\nif(SEAL_BUILD_SEAL_C)\n    # Check that size_t is 8 bytes\n    include(CheckTypeSize)\n    check_type_size(\"size_t\" SIZET LANGUAGE C)\n    if(NOT ${SIZET} EQUAL 8)\n        unset(SIZET CACHE)\n        unset(HAVE_SIZET CACHE)\n        message(FATAL_ERROR \"SEAL_C requires 64-bit platform\")\n    endif()\n    unset(SIZET CACHE)\n    unset(HAVE_SIZET CACHE)\n\n    if(BUILD_SHARED_LIBS)\n        message(FATAL_ERROR \"SEAL_C (shared or static) requires a static SEAL; set `BUILD_SHARED_LIBS=OFF` and control \"\n                            \"SEAL_C by setting `SEAL_BUILD_STATIC_SEAL_C` to `OFF` (default) or `ON`\")\n    endif()\n\n    if(NOT SEAL_BUILD_DEPS)\n        message(FATAL_ERROR \"SEAL_C requires `SEAL_BUILD_DEPS=ON`\")\n    endif()\n\n    if(NOT SEAL_BUILD_STATIC_SEAL_C AND SEAL_USE_INTEL_HEXL AND CMAKE_BUILD_TYPE STREQUAL \"Debug\" AND UNIX)\n        message(WARNING \"SEAL_C (shared) cannot find Address Sanitizer (libasan) enabled by Intel HEXL in Debug mode \"\n                        \"on Unix-like systems. SEALNet does not work. Preload libasan for downstream applications.\")\n    endif()\n\n    if(SEAL_BUILD_STATIC_SEAL_C)\n        add_library(sealc STATIC)\n    else()\n        add_library(sealc SHARED)\n    endif()\n\n    # Add source files to library and header files to install\n    add_subdirectory(${SEAL_INCLUDES_DIR}/seal/c)\n    seal_set_version(sealc)\n    if(SEAL_BUILD_STATIC_SEAL_C)\n        seal_set_version_filename(sealc)\n    else()\n        seal_set_soversion(sealc)\n    endif()\n    seal_set_language(sealc)\n    seal_set_include_directories(sealc)\n    if (SEAL_USE_INTEL_HEXL)\n        target_include_directories(sealc PRIVATE $<BUILD_INTERFACE:${hexl_SOURCE_DIR}/hexl/include>)\n    endif()\n\n    target_link_libraries(sealc PUBLIC seal)\n\n    seal_install_target(sealc SEALTargets)\nendif()\n\n# Add standard alias target for SEAL::sealc\nif(TARGET sealc)\n    add_library(SEAL::sealc ALIAS sealc)\nendif()\n\n#################################\n# Installation and CMake config #\n#################################\n\n# Create the CMake config file\ninclude(CMakePackageConfigHelpers)\nconfigure_package_config_file(\n    ${SEAL_CONFIG_IN_FILENAME} ${SEAL_CONFIG_FILENAME}\n    INSTALL_DESTINATION ${SEAL_CONFIG_INSTALL_DIR})\n\n# Install the export\ninstall(\n    EXPORT SEALTargets\n    NAMESPACE SEAL::\n    DESTINATION ${SEAL_CONFIG_INSTALL_DIR})\n\n# Version file; we require exact version match for downstream\nwrite_basic_package_version_file(\n    ${SEAL_CONFIG_VERSION_FILENAME}\n    VERSION ${SEAL_VERSION}\n    COMPATIBILITY SameMinorVersion)\n\n# Install config and module files\ninstall(\n    FILES\n        ${SEAL_CONFIG_FILENAME}\n        ${SEAL_CONFIG_VERSION_FILENAME}\n    DESTINATION ${SEAL_CONFIG_INSTALL_DIR})\n\n# We export SEALTargets from the build tree so it can be used by other projects\n# without requiring an install.\nexport(\n    EXPORT SEALTargets\n    NAMESPACE SEAL::\n    FILE ${SEAL_TARGETS_FILENAME})\n\n# Install header files of dependencies if SEAL_BUILD_DEPS is ON\nif(SEAL_BUILD_DEPS)\n    # MSGSL\n    if(SEAL_USE_MSGSL)\n        install(\n            DIRECTORY ${msgsl_SOURCE_DIR}/include/gsl\n            DESTINATION ${SEAL_INCLUDES_INSTALL_DIR})\n    endif()\nendif()\n\n##############\n# pkg-config #\n##############\n\nif(UNIX OR APPLE)\n    # Set the requirements according to the current configuration if SEAL_BUILD_DEPS=OFF\n    if(NOT SEAL_BUILD_DEPS)\n        if(SEAL_USE_MSGSL)\n            # Extract the include directories from Microsoft.GSL::GSL\n            get_target_property(\n                SEAL_PKGCONFIG_MSGSL_INCLUDE_DIR\n                Microsoft.GSL::GSL\n                INTERFACE_INCLUDE_DIRECTORIES)\n\n            # Create the Microsoft GSL pkg-config file\n            configure_file(${SEAL_PKGCONFIG_MSGSL_IN_FILENAME} ${SEAL_PKGCONFIG_MSGSL_FILENAME} @ONLY)\n\n            set(SEAL_PKGCONFIG_MSGSL_REQUIRES_STRING \"seal_msgsl >= ${Microsoft.GSL_VERSION_MAJOR}\")\n        endif()\n        if(SEAL_USE_ZLIB)\n            set(SEAL_PKGCONFIG_ZLIB_REQUIRES_STRING \"zlib = ${ZLIB_VERSION_STRING}\")\n        endif()\n        if(SEAL_USE_ZSTD)\n            set(SEAL_PKGCONFIG_ZSTD_REQUIRES_STRING \"libzstd >= ${zstd_VERSION_MAJOR}\")\n        endif()\n        if(SEAL_USE_INTEL_HEXL)\n            set(SEAL_PKGCONFIG_INTEL_HEXL_REQUIRES_STRING \"hexl >= ${HEXL_VERSION_MAJOR}\")\n            message(STATUS \"Intel HEXL does not have a pkg-config file\")\n        endif()\n    endif()\n\n    # Create the pkg-config file\n    if(TARGET seal)\n        configure_file(${SEAL_PKGCONFIG_IN_FILENAME} ${SEAL_PKGCONFIG_FILENAME} @ONLY)\n    endif()\n    if(TARGET seal_shared)\n        configure_file(${SEAL_PKGCONFIG_SHARED_IN_FILENAME} ${SEAL_PKGCONFIG_SHARED_FILENAME} @ONLY)\n    endif()\n\n    # Install the pkg-config files\n    if(EXISTS ${SEAL_PKGCONFIG_FILENAME})\n        install(\n            FILES ${SEAL_PKGCONFIG_FILENAME}\n            DESTINATION ${SEAL_PKGCONFIG_INSTALL_DIR})\n    endif()\n    if(EXISTS ${SEAL_PKGCONFIG_SHARED_FILENAME})\n        install(\n            FILES ${SEAL_PKGCONFIG_SHARED_FILENAME}\n            DESTINATION ${SEAL_PKGCONFIG_INSTALL_DIR})\n    endif()\n    if(EXISTS ${SEAL_PKGCONFIG_MSGSL_FILENAME})\n        install(\n            FILES ${SEAL_PKGCONFIG_MSGSL_FILENAME}\n            DESTINATION ${SEAL_PKGCONFIG_INSTALL_DIR})\n    endif()\nendif()\n\n#####################\n# SEAL C++ examples #\n#####################\n\n# [option] SEAL_BUILD_EXAMPLES\nset(SEAL_BUILD_EXAMPLES_OPTION_STR \"Build C++ examples for Microsoft SEAL\")\noption(SEAL_BUILD_EXAMPLES ${SEAL_BUILD_EXAMPLES_OPTION_STR} OFF)\nmessage(STATUS \"SEAL_BUILD_EXAMPLES: ${SEAL_BUILD_EXAMPLES}\")\n\nif(SEAL_BUILD_EXAMPLES)\n    add_subdirectory(native/examples)\nendif()\n\n##################\n# SEAL C++ tests #\n##################\n\n# [option] SEAL_BUILD_TESTS\nset(SEAL_BUILD_TESTS_OPTION_STR \"Build C++ tests for Microsoft SEAL\")\noption(SEAL_BUILD_TESTS ${SEAL_BUILD_TESTS_OPTION_STR} OFF)\nmessage(STATUS \"SEAL_BUILD_TESTS: ${SEAL_BUILD_TESTS}\")\n\nif(SEAL_BUILD_TESTS)\n    add_subdirectory(native/tests)\nendif()\n\n#######################\n# SEAL C++ benchmarks #\n#######################\n\n# [option] SEAL_BUILD_BENCH\nset(SEAL_BUILD_BENCH_OPTION_STR \"Build C++ benchmarks for Microsoft SEAL\")\noption(SEAL_BUILD_BENCH ${SEAL_BUILD_BENCH_OPTION_STR} OFF)\nmessage(STATUS \"SEAL_BUILD_BENCH: ${SEAL_BUILD_BENCH}\")\n\nif(SEAL_BUILD_BENCH)\n    add_subdirectory(native/bench)\nendif()\n\n#######################################\n# Configure SEALNet and NuGet package #\n#######################################\n\n# In Windows we will set the SEAL_C library path according to the CMake generator\nset(SEAL_WINDOWS_SEAL_C_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})\nget_property(SEAL_IS_MULTI_CONFIG_GENERATOR GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(SEAL_IS_MULTI_CONFIG_GENERATOR)\n    # Is this the Visual Studio generator? If so, the output path will contain the configuration.\n    # We shall use CMAKE_BUILD_TYPE here, which by default will be \"Release\". The user has the\n    # option of changing this by explicitly specifying CMAKE_BUILD_TYPE, which multi-config\n    # generators otherwise ignore.\n    set(SEAL_WINDOWS_SEAL_C_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CMAKE_BUILD_TYPE})\nendif()\n\n# Create SEALNet.csproj, SEALNetExamples.csproj, and SEALNetTest.csproj\nconfigure_file(\n    ${CMAKE_CURRENT_LIST_DIR}/dotnet/src/SEALNet.csproj.in\n    ${CMAKE_CURRENT_BINARY_DIR}/dotnet/src/SEALNet.csproj\n    @ONLY)\nconfigure_file(\n    ${CMAKE_CURRENT_LIST_DIR}/dotnet/tests/SEALNetTest.csproj.in\n    ${CMAKE_CURRENT_BINARY_DIR}/dotnet/tests/SEALNetTest.csproj\n    @ONLY)\nconfigure_file(\n    ${CMAKE_CURRENT_LIST_DIR}/dotnet/examples/SEALNetExamples.csproj.in\n    ${CMAKE_CURRENT_BINARY_DIR}/dotnet/examples/SEALNetExamples.csproj\n    @ONLY)\n\n# Create SEALNet.sln for Visual Studio to build all dotnet projects\nconfigure_file(\n    ${CMAKE_CURRENT_LIST_DIR}/dotnet/SEALNet.sln.in\n    ${CMAKE_CURRENT_BINARY_DIR}/dotnet/SEALNet.sln\n    @ONLY)\n\n# Set the sealc dynamic library file names to be included in creating\n# the NuGet package. When building a multi-platform NuGet package, the\n# dynamic library paths need to be specified explicitly in the NuGet\n# command. See dotnet/nuget/SEALNet.nuspec.in.\n\n# Create SEALNet-multi.nuspec for a multi-platform NuGet package\nconfigure_file(\n    ${CMAKE_CURRENT_LIST_DIR}/dotnet/nuget/SEALNet-multi.nuspec.in\n    ${CMAKE_CURRENT_BINARY_DIR}/dotnet/nuget/SEALNet-multi.nuspec\n    @ONLY)\n\nset(NUGET_WINDOWS_SEAL_C_PATH \"\")\nset(NUGET_LINUX_SEAL_C_PATH \"\")\nset(NUGET_MACOS_SEAL_C_PATH \"\")\n\n# Supporting local building of NuGet package\nif(WIN32)\n    set(NUGET_WINDOWS_SEAL_C_PATH ${SEAL_WINDOWS_SEAL_C_DIRECTORY}/sealc.dll)\nelseif(UNIX AND NOT APPLE)\n    set(NUGET_LINUX_SEAL_C_PATH ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/libsealc.so)\nelseif(APPLE)\n    set(NUGET_MACOS_SEAL_C_PATH ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/libsealc.dylib)\nendif()\n\n# Create SEALNet.nuspec for a local NuGet pack from SEALNet.nuspec.in\nconfigure_file(\n    ${CMAKE_CURRENT_LIST_DIR}/dotnet/nuget/SEALNet.nuspec.in\n    ${CMAKE_CURRENT_BINARY_DIR}/dotnet/nuget/SEALNet.nuspec\n    @ONLY)\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.43359375,
          "content": "# Microsoft Open Source Code of Conduct\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\n\nResources:\n\n- [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/)\n- [Microsoft Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/)\n- Contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with questions or concerns\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.6103515625,
          "content": "# Contributing\n\nThis project welcomes contributions and suggestions.\nMost contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution.\nFor details, visit https://cla.opensource.microsoft.com.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/).\nContact [opencode@microsoft.com](mailto:opencode@microsoft.com) for any additional questions or comments.\n\n### Pull Requests\n\nSubmit pull requrests to **branch *contrib***.\nPull requests to any other branch will not be accepted.\n\nWhen you submit a pull request, a CLA bot will automatically determine whether you need to **provide a CLA** and decorate the PR appropriately (e.g., status check, comment).\nSimply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\n### Formatting\n\nMicrosoft SEAL uses a customized `.clang-format` configuration for C++ code styling.\nA script `tools/scripts/clang-format-all.sh` is provided to easily format all C++ sources and headers in the `native` directory.\nTo ensure the code is properly formatted before making a pull request, we highly recommend using [pre-commit](https://pre-commit.com/).\nNote that the repository includes a `.pre-commit-config.yaml` that describes the appropriate formatting checks.\n\nDocumentation are mostly written in GitHub-flavored Markdown.\nA line break is required after each full sentence.\n"
        },
        {
          "name": "ISSUES.md",
          "type": "blob",
          "size": 1.03515625,
          "content": "# Issues\n\n## Technical questions\n\nThe best way to get help with technical questions is on\n[StackOverflow](https://stackoverflow.com/questions/tagged/seal) using the `[seal]`\ntag. To contact the Microsoft SEAL team directly, please email\n[sealcrypto@microsoft.com](mailto:sealcrypto@microsoft.com).\n\n## Bug reports\n\nWe appreciate community efforts to find and fix bugs and issues in Microsoft SEAL.\nIf you believe you have found a bug or want to report some other issue, please\ndo so on [GitHub](https://github.com/Microsoft/SEAL/issues). To help others\ndetermine what the problem may be, we provide a helpful script that collects\nrelevant system information that you can submit with the bug report (see below).\n\n### System information\n\nTo collect system information for an improved bug report, please run\n```\nmake -C tools system_info\n```\nThis will result in a file `system_info.tar.gz` to be generated, which you can\noptionally attach with your bug report.\n\n## Critical security issues\n\nFor reporting critical security issues, see [SECURITY.md](SECURITY.md).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.134765625,
          "content": "    MIT License\n\n    Copyright (c) Microsoft Corporation. All rights reserved.\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 2.6962890625,
          "content": "THIRD-PARTY SOFTWARE NOTICES AND INFORMATION\n\nThis software incorporates components from the projects listed below. The original copyright notices\nand the licenses under which Microsoft received such components are set forth below and are provided for\ninformational purposes only. Microsoft reserves all rights not expressly granted herein, whether by\nimplication, estoppel or otherwise.\n\nThis software includes parts of the BLAKE2 library (https://github.com/BLAKE2/BLAKE2).\nThe BLAKE2 library is licensed under CC0 Universal, version 1.0. You can find a copy of this license at https://creativecommons.org/publicdomain/zero/1.0/legalcode\n\nThis software includes parts of the Kyber library (https://github.com/pq-crystals/kyber).\nThe Kyber library is licensed under CC0 Universal, version 1.0. You can find a copy of this license at https://creativecommons.org/publicdomain/zero/1.0/legalcode\n\nThis software includes parts of the ZSTD library, version 1.4.5 (https://github.com/facebook/zstd):\nZSTD NOTICES AND INFORMATION BEGIN HERE\n===============================================================================\nBSD License\n\nFor Zstandard software\n\nCopyright (c) 2016-present, Facebook, Inc. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n * Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n * Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n * Neither the name Facebook nor the names of its contributors may be used to\n   endorse or promote products derived from this software without specific\n   prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n===============================================================================\nEND OF ZSTD NOTICES AND INFORMATION\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 45.0263671875,
          "content": "# Microsoft SEAL\n\nMicrosoft SEAL is an easy-to-use open-source ([MIT licensed](LICENSE)) homomorphic encryption library developed by the Cryptography and Privacy Research Group at Microsoft.\nMicrosoft SEAL is written in modern standard C++ and is easy to compile and run in many different environments.\nFor more information about the Microsoft SEAL project, see [sealcrypto.org](https://www.microsoft.com/en-us/research/project/microsoft-seal).\n\nThis document pertains to Microsoft SEAL version 4.1.\nUsers of previous versions of the library should look at the [list of changes](CHANGES.md).\n\n## News\n\nThe [BGV scheme](https://eprint.iacr.org/2011/277) is now available in Microsoft SEAL.\nImplementation details are described in [this paper](https://eprint.iacr.org/2020/1481.pdf).\nWe truly appreciate [Alibaba Gemini Lab](https://alibaba-gemini-lab.github.io/) for making massive efforts to develop the BGV scheme and integrate it in Microsoft SEAL. And we would like to thank Privacy Technologies Research, Intel Labs, for continuous testing and reporting issues.\n\nStarting from version 3.7.2, Microsoft SEAL will push new changes to the `main`, `master`, and `contrib` branches without creating a new version.\nWe adopt this approach to merge community contribution and resolve issues in a timely manner.\nThese branches will stay ahead of the latest version branch/tag.\nNew versions will be created when there are important bug fixes or new features.\n\nThe [EVA compiler for CKKS](https://arxiv.org/abs/1912.11951) is available at [GitHub.com/Microsoft/EVA](https://GitHub.com/Microsoft/EVA). See [CKKS Programming with EVA](#ckks-programming-with-eva) below for more information.\n\nThe [SEAL-Embedded for CKKS Encryption](https://tches.iacr.org/index.php/TCHES/article/view/8991) is available at [Github.com/Microsoft/SEAL-Embedded](https://github.com/microsoft/SEAL-Embedded).\n\nThe [APSI library for Asymmetric PSI](https://eprint.iacr.org/2021/1116) is available at [Github.com/Microsoft/APSI](https://github.com/microsoft/APSI).\n\n## Contents\n\n- [Introduction](#introduction)\n  - [Core Concepts](#core-concepts)\n  - [Homomorphic Encryption](#homomorphic-encryption)\n  - [Microsoft SEAL](#microsoft-seal-1)\n- [Getting Started](#getting-started)\n  - [Optional Dependencies](#optional-dependencies)\n    - [Intel HEXL](#intel-hexl)\n    - [Microsoft GSL](#microsoft-gsl)\n    - [ZLIB and Zstandard](#zlib-and-zstandard)\n  - [Installing from NuGet Package](#installing-from-nuget-package-windows-linux-macos-android-ios)\n  - [Installing from vcpkg](#installing-from-vcpkg)\n  - [Examples](#examples)\n  - [CKKS Programming with EVA](#ckks-programming-with-eva)\n- [Building Microsoft SEAL Manually](#building-microsoft-seal-manually)\n  - [Building C++ Components](#building-c-components)\n    - [Requirements](#requirements)\n    - [Building Microsoft SEAL](#building-microsoft-seal)\n    - [Installing Microsoft SEAL](#installing-microsoft-seal)\n    - [Building and Installing on Windows](#building-and-installing-on-windows)\n    - [Building for Android and iOS](#building-for-android-and-ios)\n    - [Building for WebAssembly](#building-for-webassembly)\n    - [Basic CMake Options](#basic-cmake-options)\n    - [Advanced CMake Options](#advanced-cmake-options)\n    - [Linking with Microsoft SEAL through CMake](#linking-with-microsoft-seal-through-cmake)\n    - [Examples, Tests, and Benchmarks](#examples-tests-and-benchmarks)\n  - [Building .NET Components](#building-net-components)\n    - [Windows, Linux, and macOS](#windows-linux-and-macos)\n    - [Android and iOS](#android-and-ios)\n    - [Using Microsoft SEAL for .NET](#using-microsoft-seal-for-net)\n    - [Building Your Own NuGet Package](#building-your-own-nuget-package)\n- [Contributing](#contributing)\n- [Citing Microsoft SEAL](#citing-microsoft-seal)\n- [Acknowledgments](#acknowledgments)\n\n## Introduction\n\n### Core Concepts\n\nMost encryption schemes consist of three functionalities: key generation, encryption, and decryption.\nSymmetric-key encryption schemes use the same secret key for both encryption and decryption; public-key encryption schemes use separately a public key for encryption and a secret key for decryption.\nTherefore, public-key encryption schemes allow anyone who knows the public key to encrypt data, but only those who know the secret key can decrypt and read the data.\nSymmetric-key encryption can be used for efficiently encrypting very large amounts of data, and enables secure outsourced cloud storage.\nPublic-key encryption is a fundamental concept that enables secure online communication today, but is typically much less efficient than symmetric-key encryption.\n\nWhile traditional symmetric- and public-key encryption can be used for secure storage and communication, any outsourced computation will necessarily require such encryption layers to be removed before computation can take place.\nTherefore, cloud services providing outsourced computation capabilities must have access to the secret keys, and implement access policies to prevent unauthorized employees from getting access to these keys.\n\n### Homomorphic Encryption\n\nHomomorphic encryption refers to encryption schemes that allow the cloud to compute directly on the encrypted data, without requiring the data to be decrypted first.\nThe results of such encrypted computations remain encrypted, and can be only decrypted with the secret key (by the data owner).\nMultiple homomorphic encryption schemes with different capabilities and trade-offs have been invented over the past decade; most of these are public-key encryption schemes, although the public-key functionality may not always be needed.\n\nHomomorphic encryption is not a generic technology: only some computations on encrypted data are possible.\nIt also comes with a substantial performance overhead, so computations that are already very costly to perform on unencrypted data are likely to be infeasible on encrypted data.\nMoreover, data encrypted with homomorphic encryption is many times larger than unencrypted data, so it may not make sense to encrypt, e.g., entire large databases, with this technology.\nInstead, meaningful use-cases are in scenarios where strict privacy requirements prohibit unencrypted cloud computation altogether, but the computations themselves are fairly lightweight.\n\nTypically, homomorphic encryption schemes have a single secret key which is held by the data owner.\nFor scenarios where multiple different private data owners wish to engage in collaborative computation, homomorphic encryption is probably not a reasonable solution.\n\nHomomorphic encryption cannot be used to enable data scientists to circumvent GDPR.\nFor example, there is no way for a cloud service to use homomorphic encryption to draw insights from encrypted customer data.\nInstead, results of encrypted computations remain encrypted and can only be decrypted by the owner of the data, e.g., a cloud service customer.\n\nMost homomorphic encryption schemes provide weaker security guarantees than traditional encryption schemes. You need to read [SECURITY.md](SECURITY.md) if you are thinking of building production software using Microsoft SEAL.\n\n### Microsoft SEAL\n\nMicrosoft SEAL is a homomorphic encryption library that allows additions and multiplications to be performed on encrypted integers or real numbers.\nOther operations, such as encrypted comparison, sorting, or regular expressions, are in most cases not feasible to evaluate on encrypted data using this technology.\nTherefore, only specific privacy-critical cloud computation parts of programs should be implemented with Microsoft SEAL.\n\nIt is not always easy or straightforward to translate an unencrypted computation into a computation on encrypted data, for example, it is not possible to branch on encrypted data.\nMicrosoft SEAL itself has a steep learning curve and requires the user to understand many homomorphic encryption specific concepts, even though in the end the API is not too complicated.\nEven if a user is able to program and run a specific computation using Microsoft SEAL, the difference between efficient and inefficient implementations can be several orders of magnitude, and it can be hard for new users to know how to improve the performance of their computation.\n\nMicrosoft SEAL comes with two different homomorphic encryption schemes with very different properties.\nThe BFV and BGV schemes allow modular arithmetic to be performed on encrypted integers.\nThe CKKS scheme allows additions and multiplications on encrypted real or complex numbers, but yields only approximate results.\nIn applications such as summing up encrypted real numbers, evaluating machine learning models on encrypted data, or computing distances of encrypted locations CKKS is going to be by far the best choice.\nFor applications where exact values are necessary, the BFV and BGV schemes are more suitable.\n\n## Getting Started\n\nThere are multiple ways of installing Microsoft SEAL and starting to use it.\nThe easiest way is to use a package manager to download, build, and install the library.\nFor example, [vcpkg](https://github.com/microsoft/vcpkg) works on most platforms and will be up-to-date with the latest release of Microsoft SEAL (C++17 only).\nOn macOS you can also use [Homebrew](https://formulae.brew.sh/formula/seal).\nOn FreeBSD you can use `pkg install seal` to install [security/seal](https://www.freshports.org/security/seal/).\nThe .NET library is available as a multiplatform [NuGet package](https://www.nuget.org/packages/Microsoft.Research.SEALNet).\nFinally, one can build Microsoft SEAL manually with a multiplatform CMake build system; see [Building Microsoft SEAL Manually](#building-microsoft-seal-manually) for details.\n\n### Optional Dependencies\n\nMicrosoft SEAL has no required dependencies, but certain optional features can be enabled when compiling with support for specific third-party libraries.\n\nWhen [building manually](#building-microsoft-seal-manually), one can choose to have the Microsoft SEAL build system download and build the dependencies, or alternatively search the system directories for pre-installed dependencies.\nOn the other extreme, the downloadable [NuGet package](https://www.nuget.org/packages/Microsoft.Research.SEALNet) cannot be configured at all, but it is always possible to [build a custom NuGet package](#building-your-own-nuget-package).\nOther package managers offer varying amounts of opportunities for configuring the dependencies and [other build options](#basic-cmake-options).\n\nThe optional dependencies and their tested versions (other versions may work as well) are as follows:\n\n| Optional dependency                                    | Tested version | Use                                              |\n| ------------------------------------------------------ | -------------- | ------------------------------------------------ |\n| [Intel HEXL](https://github.com/intel/hexl)            | 1.2.5          | Acceleration of low-level kernels                |\n| [Microsoft GSL](https://github.com/microsoft/GSL)      | 4.0.0          | API extensions                                   |\n| [ZLIB](https://github.com/madler/zlib)                 | 1.2.13         | Compressed serialization                         |\n| [Zstandard](https://github.com/facebook/zstd)          | 1.5.2          | Compressed serialization (much faster than ZLIB) |\n| [GoogleTest](https://github.com/google/googletest)     | 1.12.1         | For running tests                                |\n| [GoogleBenchmark](https://github.com/google/benchmark) | 1.7.1          | For running benchmarks                           |\n\n#### Intel HEXL\n\nIntel HEXL is a library providing efficient implementations of cryptographic primitives common in homomorphic encryption. The acceleration is particularly evident on Intel processors with the Intel AVX512-IFMA52 instruction set.\n\n#### Microsoft GSL\n\nMicrosoft GSL (Guidelines Support Library) is a header-only library that implements `gsl::span`: a *view type* that provides safe (bounds-checked) array access to memory.\n\nFor example, if Microsoft GSL is available, Microsoft SEAL can allow `BatchEncoder` and `CKKSEncoder` to encode from and decode to a `gsl::span` instead of `std::vector`, which can in some cases have a significant performance benefit.\n\n#### ZLIB and Zstandard\n\nZLIB and Zstandard are widely used compression libraries. Microsoft SEAL can optionally use these libraries to compress data that is serialized.\n\nOne may ask how compression can help when ciphertext and key data is supposed to be indistinguishable from random.\nIn Microsoft SEAL `Ciphertext` objects consist of a large number of integers modulo specific prime numbers (`coeff_modulus` primes).\nWhen using the CKKS scheme in particular, these prime numbers can be quite small (e.g., 30 bits), but the data is nevertheless serialized as 64-bit integers.\nTherefore, it is not uncommon that almost half of the ciphertext bytes are zeros, and applying a general-purpose compression algorithm is a convenient way of getting rid this wasted space.\nThe BFV scheme benefits typically less from this technique, because the prime numbers used for the `coeff_modulus` encryption parameter tend to be larger, and integers modulo these prime numbers fill more of each 64-bit word.\nCompressed serialization can be applied to any serializable Microsoft SEAL object &ndash; not just to `Ciphertext` and keys .\n\nIf Microsoft SEAL is compiled with ZLIB or Zstandard support, compression will automatically be used for serialization; see `Serialization::compr_mode_default` in [native/src/seal/serialization.h](native/src/seal/serialization.h).\nHowever, it is always possible to explicitly pass `compr_mode_type::none` to serialization methods to disable compression.\nIf both ZLIB and Zstandard support are enabled, Zstandard is used by default due to its much better performance.\n\n**Note:** The compression rate for a `SecretKey` can (in theory at least) reveal information about the key.\nIn most common applications of Microsoft SEAL the size of a `SecretKey` would not be deliberately revealed to untrusted parties.\nIf this is a concern, one can always save the `SecretKey` in an uncompressed form.\n\n<!-- ### Installing with VCPKG (Windows, Unix-like) -->\n<!-- To install Microsoft SEAL with all dependencies enabled, run `./vcpkg install seal` or `./vcpkg install seal:x64-windows-static` on Windows. -->\n<!-- To install Microsoft SEAL with partial dependencies enabled, for example, only `ms-gsl`, run `./vcpkg install seal[core,ms-gsl]` or `./vcpkg install seal[core,ms-gsl]:x64-windows-static` on Windows. -->\n\n<!-- ### Installing with Homebrew (macOS) -->\n\n### Installing from NuGet Package (Windows, Linux, macOS, Android, iOS)\n\nFor .NET developers the easiest way of installing Microsoft SEAL is by using the multiplatform NuGet package available at [NuGet.org](https://www.nuget.org/packages/Microsoft.Research.SEALNet).\nSimply add this package into your .NET project as a dependency and you are ready to go.\n\nTo develop mobile applications using Microsoft SEAL and .NET for Android and iOS, just add this package to your [Xamarin](https://dotnet.microsoft.com/apps/xamarin) project. Unlike the Microsoft SEAL C++ library, the .NET wrapper library works only on 64-bit platforms, so only `arm64-v8a`/`x86_64` Android ABIs and `arm64`/`x86_64` iOS architectures are supported.\n\n### Installing from vcpkg\n\nYou can download and install seal using the [vcpkg](https://github.com/Microsoft/vcpkg) dependency manager.\n\n```shell\ngit clone https://github.com/Microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.sh  # ./bootstrap-vcpkg.bat for Windows\n./vcpkg integrate install\n./vcpkg install seal\n```\n\nThe \"seal\" port in vcpkg is kept up to date by Microsoft team members and community contributors.\nIf the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\n### Examples\n\nUsing Microsoft SEAL will require the user to invest some time in learning fundamental concepts in homomorphic encryption.\nThe code comes with heavily commented examples that are designed to gradually teach such concepts as well as demonstrate a large fraction of the API.\nThe examples are available (and identical) in C++ and C#, and are divided into several source files in `native/examples/` (C++) and `dotnet/examples/` (C#), as follows:\n\n| C++                   | C#                   | Description                                                                  |\n| --------------------- | -------------------- | ---------------------------------------------------------------------------- |\n| `examples.cpp`        | `Examples.cs`        | The example runner application                                               |\n| `1_bfv_basics.cpp`    | `1_BFV_Basics.cs`    | Encrypted modular arithmetic using the BFV scheme                            |\n| `2_encoders.cpp`      | `2_Encoders.cs`      | Encoding more complex data into Microsoft SEAL plaintext objects             |\n| `3_levels.cpp`        | `3_Levels.cs`        | Introduces the concept of levels; prerequisite for using the CKKS scheme     |\n| `4_bgv_basics.cpp`    | `4_BGV_Basics.cs`    | Encrypted modular arithmetic using the BGV scheme                            |\n| `5_ckks_basics.cpp`   | `5_CKKS_Basics.cs`   | Encrypted real number arithmetic using the CKKS scheme                       |\n| `6_rotation.cpp`      | `6_Rotation.cs`      | Performing cyclic rotations on encrypted vectors in the BFV and CKKS schemes |\n| `7_serialization.cpp` | `7_Serialization.cs` | Serializing objects in Microsoft SEAL                                        |\n| `8_performance.cpp`   | `8_Performance.cs`   | Performance tests                                                            |\n\nIt is recommended to read the comments and the code snippets along with command line printout from running an example.\nFor easier navigation, command line printout provides the line number in the associated source file where the associated code snippets start.\nTo build the examples, see [Examples, Tests, and Benchmark](#examples-tests-and-benchmarks) (C++) and [Building .NET Components](#building-net-components) (C#).\n\n**Note:** It is impossible to know how to use Microsoft SEAL correctly without studying examples 1&ndash;6.\nThey are designed to provide the reader with the necessary conceptual background on homomorphic encryption.\nReusing code directly from the examples will not work well, as the examples are often demonstrating individual pieces of functionality, and are not optimized for performance.\nWriting Microsoft SEAL code without studying the examples in depth will inevitably result in code that is vulnerable, malfunctioning, or extremely slow.\n\n### CKKS Programming with EVA\n\nWhen studying the examples above, it will become clear that the CKKS scheme can be unfriendly to beginners.\nEven relatively simple computations can be challenging to get to work due to the limitations of the rescaling operation and the requirement of aligning scales at different levels.\n\nWe have created a new compiler tool called EVA that helps resolve these challenges to a large extent.\nEVA allows programmers to express desired encrypted computations in Python. It optimizes the computations for Microsoft SEAL, selects appropriate encryption parameters, and provides a convenient Python API for encrypting the input, executing the computation, and decrypting the result.\nEVA is available at [GitHub.com/Microsoft/EVA](https://GitHub.com/Microsoft/EVA).\nTry it out, and let us know what you think!\n\n**Note:** EVA only supports the CKKS scheme. There are no immediate plans to support the BFV or BGV scheme.\n\n## Building Microsoft SEAL Manually\n\n### Building C++ Components\n\nOn all platforms Microsoft SEAL is built with CMake.\nWe recommend using out-of-source build although in-source build works.\nBelow we give instructions for how to configure, build, and install Microsoft SEAL either globally (system-wide), or locally (for a single user).\nA global install requires elevated (root or administrator) privileges.\n\n#### Requirements\n\n| System | Toolchain |\n|---|---|\n| Windows | Visual Studio 2022 with C++ CMake Tools for Windows |\n| Linux | Clang++ (>= 5.0) or GNU G++ (>= 6.0), CMake (>= 3.13) |\n| macOS/iOS | Xcode toolchain (>= 9.3), CMake (>= 3.13) |\n| Android | Android Studio |\n| FreeBSD | CMake (>= 3.13) |\n\n**Note:** Microsoft SEAL compiled with Clang++ has much better runtime performance than one compiled with GNU G++.\n\n#### Building Microsoft SEAL\n\nWe assume that Microsoft SEAL has been cloned into a directory called `SEAL` and all commands presented below are assumed to be executed in the directory `SEAL`.\n\nYou can build the Microsoft SEAL library (out-of-source) for your machine by executing the following commands:\n\n```PowerShell\ncmake -S . -B build\ncmake --build build\n```\n\nAfter the build completes, the output binaries can be found in `build/lib/` and `build/bin/` directories.\n\nVarious configuration options can be specified and passed to the CMake build system.\nThese are described below in sections [Basic CMake Options](#basic-cmake-options) and [Advanced CMake Options](#advanced-cmake-options).\n\n#### Installing Microsoft SEAL\n\nIf you have root access to the system you can install Microsoft SEAL globally as follows:\n\n```PowerShell\ncmake -S . -B build\ncmake --build build\nsudo cmake --install build\n```\n\nTo instead install Microsoft SEAL locally, e.g., to `~/mylibs/`, do the following:\n\n```PowerShell\ncmake -S . -B build -DCMAKE_INSTALL_PREFIX=~/mylibs\ncmake --build build\nsudo cmake --install build\n```\n\n#### Building and Installing on Windows\n\nOn Windows the same scripts above work in a developer command prompt for Visual Studio using either the Ninja or \"Visual Studio 17 2022\" generators.\n\nWhen using the Ninja generator, please use the appropriate command prompt depending on the platform you want to build for. If you want to build for x64, please use the **x64 Native Tools Command Prompt for Visual Studio 2022** command prompt to configure and build the library. If you want to build for x86, please use the **x86 Native Tools Command Prompt for Visual Studio 2022** command prompt to configure and build the library. To build using Ninja, type\n\n```PowerShell\ncmake -S . -B build -G Ninja\ncmake --build build\n```\n\nWhen using the \"Visual Studio 17 2022\" generator you can use the **Developer Command Prompt for VS 2022** command prompt to configure and build the library. By default the generated platform will be x64. You can specify the desired platform using the architecture flag `-A <x64|Win32>` and the desired configuration using `--config <Debug|Release>`.\n\n```PowerShell\n# Generate and build for x64 in Release mode\ncmake -S . -B build -G \"Visual Studio 17 2022\" -A x64\ncmake --build build --config Release\n```\n\n```PowerShell\n# Generate and build for x86 in Release mode\ncmake -S . -B build -G \"Visual Studio 17 2022\" -A Win32\ncmake --build build --config Release\n```\n\nInstalling the library in Windows works as well. Instead of using the `sudo` command, however, you need to run `cmake --install build` from a command prompt with Administrator permissions. Files will be installed by default to `C:\\Program Files (x86)\\SEAL\\`.\n\nVisual Studio 2022 provides support for CMake-based projects. You can select the menu option `File / Open / Folder...` and navigate to the folder where the Microsoft SEAL repository is located. After opening the folder, Visual Studio will detect that this is a CMake-based project and will enable the menu command `Project / CMake settings for SEAL`. This will open the CMake settings editor that provides a user interface where you can create different configurations and set different CMake options.\n\nAfter the build completes, the output static library `seal-<version>.lib` can be found in `build\\lib\\` or `build\\lib\\Release\\`.\nWhen linking with applications, using CMake as is explained in [Linking with Microsoft SEAL through CMake](#linking-with-microsoft-seal-through-cmake) is highly recommended.\nAlternatively, you need to add `native\\src\\` (full path) and `build\\native\\src\\` as include directories to locate the Microsoft SEAL header files.\n\n#### Building for Android and iOS\n\nMicrosoft SEAL can be compiled for Android and iOS.\nUnder the [android/](android/) directory of the source tree you will find an [Android Studio](https://developer.android.com/studio) project that you can use to compile the library for Android.\n\nTo build the library for iOS, use the following scripts:\n\n```PowerShell\n# Configure CMake\ncmake -S . -B build -GXcode -DSEAL_BUILD_SEAL_C=ON -DSEAL_BUILD_STATIC_SEAL_C=ON -DCMAKE_SYSTEM_NAME=iOS \"-DCMAKE_OSX_ARCHITECTURES=arm64;x86_64\" -C cmake/memset_s.iOS.cmake\n\n# Build libseal*.a for x86_64\nxcodebuild -project build/SEAL.xcodeproj -sdk iphonesimulator -arch x86_64 -configuration Release clean build\nmkdir -p build/lib/x86_64\ncp build/lib/Release/libseal*.a build/lib/x86_64\n\n# Build libseal*.a for arm64\nxcodebuild -project SEAL.xcodeproj -sdk iphoneos -arch arm64 -configuration Release clean build\nmkdir -p build/lib/arm64\ncp build/lib/Release/libseal*.a build/lib/arm64\n\n# Combine libseal-*.a into libseal.a and libsealc-*.a into libsealc.a\nlipo -create -output build/lib/libseal.a build/lib/x86_64/libseal-*.a arm64/libseal-*.a\nlipo -create -output build/lib/libsealc.a build/lib/x86_64/libsealc-*.a build/lib/arm64/libsealc-*.a\n```\n\nThe native libraries generated through these methods are meant to be called only through the .NET library described in the following sections.\nSpecifically, they do not contain any wrappers that can be used from Java (for Android) or Objective C (for iOS).\n\n#### Building for WebAssembly\n\nMicrosoft SEAL can be compiled for JavaScript and WebAssembly using [emscripten](https://emscripten.org) on Windows, Linux, and macOS.\nBuilding for the Web means SEAL can be run in any client/server environment such as all the major browsers (e.g. Edge, Chrome, Firefox, Safari) and NodeJS.\n\nBuilding for WebAssembly requires the emscripten toolchain to be installed.\nThe easiest way to configure the toolchain is to clone [emsdk](https://github.com/emscripten-core/emsdk) and follow the [instructions](https://emscripten.org/docs/getting_started/downloads.html#installation-instructions-using-the-emsdk-recommended) (with system-specific notes). For examples, on Linux and macOS, inside the `emsdk` repo, run the following:\n\n```PowerShell\n# Install the latest toolchain\n./emsdk install latest\n./emsdk activate latest\n# Source the environment\nsource ./emsdk_env.sh\n```\n**On Windows, better run from a developer command prompt for Visual Studio; and replace `./emsdk` and `source ./emsdk_env.sh` with `emsdk` and `emsdk_env.bat`, respectively.**\nIn other environments, `cmake` must be added to the path, and either \"Ninja\" or \"MinGW Makefiles\" should be specified as generator in the following configuration step.\n`emcmake` does not work with Visual Studio 17 2022 generator.\n\nWithin the same shell, navigate to the root directory of Microsoft SEAL, run the following commands to build for WebAssembly:\n\n```PowerShell\n# Configure CMake. Example flags for a release build\nemcmake cmake -S . -B build \\\n -DBUILD_SHARED_LIBS=OFF \\\n -DCMAKE_BUILD_TYPE=Release \\\n -DCMAKE_CXX_FLAGS_RELEASE=\"-DNDEBUG -flto -O3\" \\\n -DCMAKE_C_FLAGS_RELEASE=\"-DNDEBUG -flto -O3\" \\\n -DSEAL_BUILD_BENCH=OFF \\ # Benchmark can be built for WASM. Change this to ON.\n -DSEAL_BUILD_EXAMPLES=OFF \\\n -DSEAL_BUILD_TESTS=OFF \\\n -DSEAL_USE_CXX17=ON \\\n -DSEAL_USE_INTRIN=ON \\\n -DSEAL_USE_MSGSL=OFF \\\n -DSEAL_USE_ZLIB=ON \\\n -DSEAL_THROW_ON_TRANSPARENT_CIPHERTEXT=ON\n\n# Make the static library (shared libs are not supported with emscripten)\nemmake make -C build -j\n\n# Build the WebAssembly module\nemcc \\\n -Wall \\\n -flto \\\n -O3 \\\n build/lib/libseal-4.1.a \\\n --bind \\\n -o \"build/bin/seal_wasm.js\" \\\n -s WASM=1 \\\n -s ALLOW_MEMORY_GROWTH=1\n```\n\n**Note**: There are many flags to consider when building a WebAssembly module. Please refer to the [settings.js](https://github.com/emscripten-core/emscripten/blob/main/src/settings.js) file for advanced build flags.\n\nBuilding will generate two output files, `seal_wasm.js` and `seal_wasm.wasm`, in the `build/bin/` directory.\nThe file sizes for the artifacts are very small.\nThis is because that the optimization flags perform dead code elimination (DCE) as there are no bindings generated to JavaScript.\nDefining these bindings is **necessary** in order to call into WebAssembly from the JavaScript domain; however, Microsoft SEAL does not include any definitions at this time.\nThe build flag `--bind` expects the bindings to be specified using the [embind](https://emscripten.org/docs/porting/connecting_cpp_and_javascript/embind.html) syntax.\n\n#### Basic CMake Options\n\nThe following options can be used with CMake to configure the build. The default value for each option is denoted with boldface in the **Values** column.\n\n| CMake option           | Values                                                       | Information                                                                                                                                                                                            |\n| ---------------------- | ------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| CMAKE_BUILD_TYPE       | **Release**</br>Debug</br>RelWithDebInfo</br>MinSizeRel</br> | `Debug` and `MinSizeRel` have worse run-time performance. `Debug` inserts additional assertion code. Set to `Release` unless you are developing Microsoft SEAL itself or debugging some complex issue. |\n| SEAL_BUILD_EXAMPLES    | ON / **OFF**                                                 | Build the C++ examples in [native/examples](native/examples).                                                                                                                                          |\n| SEAL_BUILD_TESTS       | ON / **OFF**                                                 | Build the tests to check that Microsoft SEAL works correctly.                                                                                                                                          |\n| SEAL_BUILD_BENCH       | ON / **OFF**                                                 | Build the performance benchmark.                                                                                                                                                                       |\n| SEAL_BUILD_DEPS        | **ON** / OFF                                                 | Set to `ON` to automatically download and build [optional dependencies](#optional-dependencies); otherwise CMake will attempt to locate pre-installed dependencies.                                    |\n| SEAL_USE_INTEL_HEXL    | ON / **OFF**                                                 | Set to `ON` to use Intel HEXL for low-level kernels.                                                                                                                                            |\n| SEAL_USE_MSGSL         | **ON** / OFF                                                 | Build with Microsoft GSL support.                                                                                                                                                                      |\n| SEAL_USE_ZLIB          | **ON** / OFF                                                 | Build with ZLIB support.                                                                                                                                                                               |\n| SEAL_USE_ZSTD          | **ON** / OFF                                                 | Build with Zstandard support.                                                                                                                                                                          |\n| BUILD_SHARED_LIBS      | ON / **OFF**                                                 | Set to `ON` to build a shared library instead of a static library. Not supported in Windows.                                                                                                           |\n| SEAL_BUILD_SEAL_C      | ON / **OFF**                                                 | Build the C wrapper library SEAL_C. This is used by the C# wrapper and most users should have no reason to build it.                                                                                   |\n| SEAL_USE_CXX17         | **ON** / OFF                                                 | Set to `ON` to build Microsoft SEAL as C++17 for a positive performance impact.                                                                                                                        |\n| SEAL_USE_INTRIN        | **ON** / OFF                                                 | Set to `ON` to use compiler intrinsics for improved performance. CMake will automatically detect which intrinsics are available and enable them accordingly.                                           |\n\nAs usual, these options can be passed to CMake with the `-D` flag.\nFor example, one could run\n\n```PowerShell\ncmake -S . -B build -DSEAL_BUILD_EXAMPLES=ON\n```\n\nto configure a release build of a static Microsoft SEAL library and also build the examples.\n\n#### Advanced CMake Options\n\nThe following options can be used with CMake to further configure the build. Most users should have no reason to change these, which is why they are marked as advanced.\n\n| CMake option                         | Values                    | Information                                                                                                                                                                                                                                                                                              |\n| ------------------------------------ | ------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| SEAL_THROW_ON_TRANSPARENT_CIPHERTEXT | **ON** / OFF              | Set to `ON` to throw an exception when Microsoft SEAL produces a ciphertext with no key-dependent component. For example, subtracting a ciphertext from itself, or multiplying a ciphertext with a plaintext zero yield identically zero ciphertexts that should not be considered as valid ciphertexts. |\n| SEAL_BUILD_STATIC_SEAL_C             | ON / **OFF**              | Set to `ON` to build SEAL_C as a static library instead of a shared library.                                                                                                                                                                                                                             |\n| SEAL_DEFAULT_PRNG                    | **Blake2xb**</br>Shake256 | Microsoft SEAL supports both Blake2xb and Shake256 XOFs for generating random bytes. Blake2xb is much faster, but it is not standardized, whereas Shake256 is a FIPS standard.                                                                                                                           |\n| SEAL_USE_GAUSSIAN_NOISE              | ON / **OFF**              | Set to `ON` to use a non-constant time rounded continuous Gaussian for the error distribution; otherwise a centered binomial distribution &ndash; with slightly larger standard deviation &ndash; is used.                                                                                               |\n| SEAL_AVOID_BRANCHING                 | ON / **OFF**              | Set to `ON` to eliminate branching in critical functions when compiler has maliciously inserted flags; otherwise assume `cmov` is used.                                                                                               |\n| SEAL_SECURE_COMPILE_OPTIONS          | ON / **OFF**              | Set to `ON` to compile/link with Control-Flow Guard (`/guard:cf`) and Spectre mitigations (`/Qspectre`). This has an effect only when compiling with MSVC.                                                                                                                                               |\n| SEAL_USE_ALIGNED_ALLOC                    | **ON** / OFF              | Set to `ON` to use 64-byte aligned memory allocations. This can improve performance of AVX512 primitives when Intel HEXL is enabled. This depends on C++17 and is disabled on Android.                                                                                               |\n\n#### Linking with Microsoft SEAL through CMake\n\nIt is very easy to link your own applications and libraries with Microsoft SEAL if you use CMake.\nSimply add the following to your `CMakeLists.txt`:\n\n```PowerShell\nfind_package(SEAL 4.1 REQUIRED)\ntarget_link_libraries(<your target> SEAL::seal)\n```\n\nIf Microsoft SEAL was installed globally, the above `find_package` command will likely find the library automatically.\nTo link with a Microsoft SEAL installed locally, e.g., installed in `~/mylibs` as described above, you may need to tell CMake where to look for Microsoft SEAL when you configure your application by running:\n\n```PowerShell\ncd <directory containing your CMakeLists.txt>\ncmake . -DCMAKE_PREFIX_PATH=~/mylibs\n```\n\nIf Microsoft SEAL was installed using a package manager like vcpkg or Homebrew, please refer to their documentation for how to link with the installed library. For example, vcpkg requires you to specify the vcpkg CMake toolchain file when configuring your project.\n\n#### Examples, Tests, and Benchmarks\n\nWhen building Microsoft SEAL, examples, tests, and benchmarks can be built by setting `SEAL_BUILD_EXAMPLES=ON`, `SEAL_BUILD_TESTS=ON`, and `SEAL_BUILD_BENCH=ON`; see [Basic CMake Options](basic-cmake-options).\nAlternatively, [examples](native/examples/CMakeLists.txt), [tests](native/tests/CMakeLists.txt), and [benchmark](native/bench/CMakeLists.txt) can be built as standalone CMake projects linked with Microsoft SEAL (installed in `~/mylibs`), by following the commands below.\nOmit setting `SEAL_ROOT` if the library is installed globally.\n\n```PowerShell\ncd native/<examples|tests|bench>\ncmake -S . -B build -DSEAL_ROOT=~/mylibs\ncmake --build build\n```\n\nBy default, benchmarks run for a vector of parameters and primitives, which can be overwhelmingly informative.\nTo execute a subset of benchmark cases, see [Google Benchmark README](https://github.com/google/benchmark/blob/master/README.md#running-a-subset-of-benchmarks).\nFor advanced users, the `bm_parms_vec` variable in [native/bench/bench.cpp](native/bench/bench.cpp) can be overwritten with custom parameter sets.\n\n**Note**: The benchmark code is strictly for experimental purposes; it allows insecure parameters that must not be used in real applications.\nDo not follow the benchmarks as examples.\n\n### Building .NET Components\n\nMicrosoft SEAL provides a .NET Standard library that wraps the functionality in Microsoft SEAL for use in .NET development.\nUsing the existing [NuGet package](https://www.nuget.org/packages/Microsoft.Research.SEALNet) is highly recommended, unless development of Microsoft SEAL or building a custom NuGet package is intended.\nPrior to building .NET components, the C wrapper library SEAL_C must be built following [Building C++ Components](#building-c-components).\nThe SEAL_C library is meant to be used only by the .NET library, not by end-users.\n\n**Note**: SEAL_C and the .NET library only support 64-bit platforms.\n\n#### Windows, Linux, and macOS\n\nFor compiling .NET code you will need to install a [.NET SDK (>= 6.0)](https://dotnet.microsoft.com/download).\nBuilding the SEAL_C library with CMake will generate project files for the .NET wrapper library, examples, and unit tests.\nThe SEAL_C library must be discoverable when running a .NET application, e.g., be present in the same directory as your executable, which is taken care of by the .NET examples and tests project files.\nRun the following scripts to build each project:\n\n```PowerShell\ndotnet build build/dotnet/src --configuration <Debug|Release> # Build .NET wrapper library\ndotnet test build/dotnet/tests # Build and run .NET unit tests\ndotnet run -p build/dotnet/examples # Build and run .NET examples\n```\n\nYou can use `--configuration <Debug|Release>` to run `Debug` or `Release` examples and unit tests.\nYou can use `--verbosity detailed` to print the list of unit tests that are being run.\n\nOn Windows, you can also use the Microsoft Visual Studio 2022 solution file, for example, `out/build/x64-Debug/dotnet/SEALNet.sln` to build all three projects.\n\n#### Android and iOS\n\nWhile it is possible to build your own custom NuGet package for Android or iOS (see [Building for Android and iOS](#building-for-android-and-ios) for the native component), this is not easy and is not recommended. Instead, please add a reference to the multiplatform [NuGet package](https://www.nuget.org/packages/Microsoft.Research.SEALNet) to your [Xamarin](https://dotnet.microsoft.com/apps/xamarin) project.\n\n#### Using Microsoft SEAL for .NET\n\nTo use Microsoft SEAL for .NET in your own application you need to:\n\n1. Add a reference in your project to `SEALNet.dll`;\n1. Ensure the native shared library is available for your application when run.\nThe easiest way to ensure this is to copy the native shared library to the same directory where your application's executable is located.\n\n#### Building Your Own NuGet Package\n\nYou can build your own NuGet package for Microsoft SEAL by following the instructions in [NUGET.md](dotnet/nuget/NUGET.md).\n\n## Contributing\n\nFor contributing to Microsoft SEAL, please see [CONTRIBUTING.md](CONTRIBUTING.md).\n\n## Citing Microsoft SEAL\n\nTo cite Microsoft SEAL in academic papers, please use the following BibTeX entries.\n\n### Version 4.1\n\n```tex\n    @misc{sealcrypto,\n        title = {{M}icrosoft {SEAL} (release 4.1)},\n        howpublished = {\\url{https://github.com/Microsoft/SEAL}},\n        month = jan,\n        year = 2023,\n        note = {Microsoft Research, Redmond, WA.},\n        key = {SEAL}\n    }\n```\n\n### Version 4.0\n\n```tex\n    @misc{sealcrypto,\n        title = {{M}icrosoft {SEAL} (release 4.0)},\n        howpublished = {\\url{https://github.com/Microsoft/SEAL}},\n        month = mar,\n        year = 2022,\n        note = {Microsoft Research, Redmond, WA.},\n        key = {SEAL}\n    }\n```\n\n### Version 3.7\n\n```tex\n    @misc{sealcrypto,\n        title = {{M}icrosoft {SEAL} (release 3.7)},\n        howpublished = {\\url{https://github.com/Microsoft/SEAL}},\n        month = sep,\n        year = 2021,\n        note = {Microsoft Research, Redmond, WA.},\n        key = {SEAL}\n    }\n```\n\n### Version 3.6\n\n```tex\n    @misc{sealcrypto,\n        title = {{M}icrosoft {SEAL} (release 3.6)},\n        howpublished = {\\url{https://github.com/Microsoft/SEAL}},\n        month = nov,\n        year = 2020,\n        note = {Microsoft Research, Redmond, WA.},\n        key = {SEAL}\n    }\n```\n\n### Version 3.5\n\n```tex\n    @misc{sealcrypto,\n        title = {{M}icrosoft {SEAL} (release 3.5)},\n        howpublished = {\\url{https://github.com/Microsoft/SEAL}},\n        month = apr,\n        year = 2020,\n        note = {Microsoft Research, Redmond, WA.},\n        key = {SEAL}\n    }\n```\n\n### Version 3.4\n\n```tex\n    @misc{sealcrypto,\n        title = {{M}icrosoft {SEAL} (release 3.4)},\n        howpublished = {\\url{https://github.com/Microsoft/SEAL}},\n        month = oct,\n        year = 2019,\n        note = {Microsoft Research, Redmond, WA.},\n        key = {SEAL}\n    }\n```\n\n### Version 3.3\n\n```tex\n    @misc{sealcrypto,\n        title = {{M}icrosoft {SEAL} (release 3.3)},\n        howpublished = {\\url{https://github.com/Microsoft/SEAL}},\n        month = jun,\n        year = 2019,\n        note = {Microsoft Research, Redmond, WA.},\n        key = {SEAL}\n    }\n```\n\n### Version 3.2\n\n```tex\n    @misc{sealcrypto,\n        title = {{M}icrosoft {SEAL} (release 3.2)},\n        howpublished = {\\url{https://github.com/Microsoft/SEAL}},\n        month = feb,\n        year = 2019,\n        note = {Microsoft Research, Redmond, WA.},\n        key = {SEAL}\n    }\n```\n\n### Version 3.1\n\n```tex\n    @misc{sealcrypto,\n        title = {{M}icrosoft {SEAL} (release 3.1)},\n        howpublished = {\\url{https://github.com/Microsoft/SEAL}},\n        month = dec,\n        year = 2018,\n        note = {Microsoft Research, Redmond, WA.},\n        key = {SEAL}\n    }\n```\n\n### Version 3.0\n\n```tex\n    @misc{sealcrypto,\n        title = {{M}icrosoft {SEAL} (release 3.0)},\n        howpublished = {\\url{http://sealcrypto.org}},\n        month = oct,\n        year = 2018,\n        note = {Microsoft Research, Redmond, WA.},\n        key = {SEAL}\n    }\n```\n\n## Acknowledgments\n\nMany people have contributed substantially to Microsoft SEAL without being represented in the Git history.\nWe wish to express special gratitude to [John Wernsing](https://github.com/wernsingj), [Hao Chen](https://github.com/haochenuw), [Yongsoo Song](https://yongsoosong.github.io), [Olli Saarikivi](https://github.com/olsaarik), [Rachel Player](https://github.com/rachelplayer), [Gizem S. Cetin](https://github.com/gizemscetin), [Peter Rindal](https://github.com/ladnir), [Amir Jalali](https://github.com/amirjalali65), [Kyoohyung Han](https://github.com/KyoohyungHan), [Sadegh Riazi](https://www.sadeghr.com), [Ilia Iliashenko](https://homes.esat.kuleuven.be/~ilia), [Roshan Dathathri](https://roshandathathri.github.io), [Pardis Emami-Naeini](https://homes.cs.washington.edu/~pemamina), [Sangeeta Chowdhary](https://github.com/sangeeta0201), [Deepika Natarajan](https://github.com/dnat112), and [Michael Rosenberg](https://github.com/rozbb).\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 3.4404296875,
          "content": "## Correct Use of Microsoft SEAL\n\nHomomorphic encryption schemes have various and often unexpected security models that may be surprising even to cryptography experts.\nIn particular, decryptions of Microsoft SEAL ciphertexts should be treated as private information only available to the secret key owner, as sharing decryptions of ciphertexts may in some cases lead to leaking the secret key.\nIf it is absolutely necessary to share information about the decryption of a ciphertext, for example when building a protocol of some kind, the number of bits shared should be kept to a minimum, and secret keys should be rotated regularly.\nCommercial applications of Microsoft SEAL should be carefully reviewed by cryptography experts who are familiar with homomorphic encryption security models.\n\n## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/Microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).\n\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets Microsoft's [Microsoft's definition of a security vulnerability](https://docs.microsoft.com/en-us/previous-versions/tn-archive/cc751383(v=technet.10)) of a security vulnerability, please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://msrc.microsoft.com/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the the [Microsoft Security Response Center PGP Key page](https://www.microsoft.com/en-us/msrc/pgp-key-msrc).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://www.microsoft.com/msrc).\n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://microsoft.com/msrc/bounty) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://www.microsoft.com/en-us/msrc/cvd).\n"
        },
        {
          "name": "android",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "dotnet",
          "type": "tree",
          "content": null
        },
        {
          "name": "native",
          "type": "tree",
          "content": null
        },
        {
          "name": "pipelines",
          "type": "tree",
          "content": null
        },
        {
          "name": "pkgconfig",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}