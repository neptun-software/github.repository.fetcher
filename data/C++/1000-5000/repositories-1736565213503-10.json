{
  "metadata": {
    "timestamp": 1736565213503,
    "page": 10,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mmp/pbrt-v3",
      "stars": 4947,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0458984375,
          "content": "*~\nsrc/build\nsrc/bin\nsrc/objs\n.sconsign.dblite\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.3603515625,
          "content": "[submodule \"src/ext/openexr\"]\n\tpath = src/ext/openexr\n\turl = https://github.com/wjakob/openexr\n[submodule \"src/ext/zlib\"]\n\tpath = src/ext/zlib\n\turl = https://github.com/mitsuba-renderer/zlib\n[submodule \"src/ext/glog\"]\n\tpath = src/ext/glog\n\turl = https://github.com/google/glog.git\n[submodule \"src/ext/ptex\"]\n\tpath = src/ext/ptex\n\turl = https://github.com/wdas/ptex.git\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.8076171875,
          "content": "language: cpp\ncompiler: gcc\nsudo: required\ninstall:\n  - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test\n  - sudo apt-get update\n  - sudo apt-get install -yq build-essential gcc-4.8 g++-4.8 make bison flex libpthread-stubs0-dev\n  - sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 40 --slave /usr/bin/g++ g++ /usr/bin/g++-4.8\n  - echo 2 | sudo update-alternatives --config gcc\n  - |\n    CMAKE_URL=\"http://www.cmake.org/files/v3.5/cmake-3.5.2-Linux-x86_64.tar.gz\"\n    mkdir ${TRAVIS_BUILD_DIR}/cmake-local && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C ${TRAVIS_BUILD_DIR}/cmake-local\n    export PATH=${TRAVIS_BUILD_DIR}/cmake-local/bin:${PATH}\nafter_install:\n  - g++ --version\nscript:\n  - cmake -G 'Unix Makefiles'\n  - make -j2\n  - ./pbrt_test\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 15.8974609375,
          "content": "# TODO: many of the best practices described here\n# (https://www.slideshare.net/DanielPfeifer1/cmake-48475415) are violated\n# in this file. Would be nice to address some of these.\n\nCMAKE_MINIMUM_REQUIRED ( VERSION 3.1.0 )\n\n# For sanitizers\nSET (CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/cmake\" ${CMAKE_MODULE_PATH})\n\nPROJECT ( PBRT-V3 )\n\nOPTION(PBRT_FLOAT_AS_DOUBLE \"Use 64-bit floats\" OFF)\n\nIF (PBRT_FLOAT_AS_DOUBLE)\n  ADD_DEFINITIONS ( -D PBRT_FLOAT_AS_DOUBLE )\nENDIF()\n\nOPTION(PBRT_SAMPLED_SPECTRUM \"Use SampledSpectrum rather than RGBSpectrum\" OFF)\n\nIF (PBRT_SAMPLED_SPECTRUM)\n  ADD_DEFINITIONS ( -D PBRT_SAMPLED_SPECTRUM )\nENDIF()\n\nENABLE_TESTING()\n\nif (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  message(STATUS \"Setting build type to 'Release' as none was specified.\")\n  set(CMAKE_BUILD_TYPE Release CACHE STRING \"Choose the type of build.\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS \"Debug\" \"Release\"\n    \"MinSizeRel\" \"RelWithDebInfo\")\nendif()\n\nif(NOT IS_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/src/ext/openexr/OpenEXR\")\n  message(FATAL_ERROR \"The OpenEXR submodule directory is missing! \"\n    \"You probably did not clone the project with --recursive. It is possible to recover \"\n    \"by running \\\"git submodule update --init --recursive\\\"\")\nendif()\n\nif(NOT IS_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/src/ext/glog/cmake\")\n  message(FATAL_ERROR \"The glog submodule directory is missing! \"\n    \"You probably did not clone the project with --recursive, or you first checked out \"\n    \"pbrt before it was added. It is possible to recover by running \"\n    \"\\\"git submodule update --init --recursive\\\"\")\nendif()\n\nif(NOT IS_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/src/ext/ptex/src\")\n  message(FATAL_ERROR \"The ptex submodule directory is missing! \"\n    \"You probably did not clone the project with --recursive, or you first checked out \"\n    \"pbrt before it was added. It is possible to recover by running \"\n    \"\\\"git submodule update --init --recursive\\\"\")\nendif()\n\nif(NOT IS_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/src/ext/zlib/doc\")\n  message(FATAL_ERROR \"The zlib submodule directory is missing! \"\n    \"You probably did not clone the project with --recursive, or you first checked out \"\n    \"pbrt before it was added. It is possible to recover by running \"\n    \"\\\"git submodule update --init --recursive\\\"\")\nendif()\n\nFIND_PACKAGE ( Sanitizers )\nFIND_PACKAGE ( Threads )\n\nIF(CMAKE_BUILD_TYPE MATCHES RELEASE)\n  ADD_DEFINITIONS (-DNDEBUG)\nENDIF()\n\nSET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)\n\n###########################################################################\n# Annoying compiler-specific details\n\nIF(CMAKE_COMPILER_IS_GNUCXX)\n  SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=gnu++11\")\n  SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-conversion-null\")\nELSEIF(CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n  SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")\n  SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-deprecated-register\")\nELSEIF(CMAKE_CXX_COMPILER_ID STREQUAL \"Intel\")\n  SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")\n\n  FIND_PROGRAM(XIAR xiar)\n  IF(XIAR)\n    SET(CMAKE_AR \"${XIAR}\")\n  ENDIF(XIAR)\n  MARK_AS_ADVANCED(XIAR)\n\n  FIND_PROGRAM(XILD xild)\n  IF(XILD)\n    SET(CMAKE_LINKER \"${XILD}\")\n  ENDIF(XILD)\n  MARK_AS_ADVANCED(XILD)\n\n  # ICC will default to -fp-model fast=1, which performs value-unsafe optimizations which will\n  # cause pbrt_test to fail. For safety, -fp-model precise is explicitly set here by default.\n  set(FP_MODEL \"precise\" CACHE STRING \"The floating point model to compile with.\")\n  set_property(CACHE FP_MODEL PROPERTY STRINGS \"precise\" \"fast=1\" \"fast=2\")\n\n  SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fp-model ${FP_MODEL}\")\nENDIF()\n\nIF(MSVC)\n  ADD_DEFINITIONS (/D _CRT_SECURE_NO_WARNINGS)\nENDIF()\n\nINCLUDE (CheckIncludeFiles)\n\nCHECK_INCLUDE_FILES ( alloca.h HAVE_ALLOCA_H )\nIF ( HAVE_ALLOCA_H )\n  ADD_DEFINITIONS ( -D PBRT_HAVE_ALLOCA_H )\nENDIF ()\n\nCHECK_INCLUDE_FILES ( memory.h HAVE_MEMORY_H )\nIF ( HAVE_MEMORY_H )\n  ADD_DEFINITIONS ( -D PBRT_HAVE_MEMORY_H )\nENDIF ()\n\n###########################################################################\n# Check for various C++11 features and set preprocessor variables or\n# define workarounds.\n\nINCLUDE (CheckCXXSourceCompiles)\nINCLUDE (CheckCXXSourceRuns)\n\nCHECK_CXX_SOURCE_COMPILES (\n  \"int main() { float x = 0x1p-32f; }\"\n  HAVE_HEX_FP_CONSTANTS )\nIF ( HAVE_HEX_FP_CONSTANTS )\n  ADD_DEFINITIONS ( -D PBRT_HAVE_HEX_FP_CONSTANTS )\nENDIF ()\n\nCHECK_CXX_SOURCE_COMPILES (\n  \"int main() { int x = 0b101011; }\"\n  HAVE_BINARY_CONSTANTS )\nIF ( HAVE_BINARY_CONSTANTS )\n  ADD_DEFINITIONS ( -D PBRT_HAVE_BINARY_CONSTANTS )\nENDIF ()\n\nCHECK_CXX_SOURCE_COMPILES (\n  \"int main() { constexpr int x = 0; }\"\n  HAVE_CONSTEXPR )\nIF ( HAVE_CONSTEXPR )\n  ADD_DEFINITIONS ( -D PBRT_HAVE_CONSTEXPR )\n  ADD_DEFINITIONS ( -D PBRT_CONSTEXPR=constexpr )\nELSE ()\n  ADD_DEFINITIONS ( -D PBRT_CONSTEXPR=const )\nENDIF ()\n\nCHECK_CXX_SOURCE_COMPILES (\n  \"struct alignas(32) Foo { char x; }; int main() { }\"\n  HAVE_ALIGNAS )\nIF ( HAVE_ALIGNAS )\n  ADD_DEFINITIONS ( -D PBRT_HAVE_ALIGNAS )\nENDIF ()\n\nCHECK_CXX_SOURCE_COMPILES (\n  \"int main() { int x = alignof(double); }\"\n  HAVE_ALIGNOF )\nIF ( HAVE_ALIGNOF )\n  ADD_DEFINITIONS ( -D PBRT_HAVE_ALIGNOF )\nENDIF ()\n\nCHECK_CXX_SOURCE_RUNS ( \"\n#include <signal.h>\n#include <string.h>\n#include <sys/time.h>\nvoid ReportProfileSample(int, siginfo_t *, void *) { }\nint main() {\n    struct sigaction sa;\n    memset(&sa, 0, sizeof(sa));\n    sa.sa_sigaction = ReportProfileSample;\n    sa.sa_flags = SA_RESTART | SA_SIGINFO;\n    sigemptyset(&sa.sa_mask);\n    sigaction(SIGPROF, &sa, NULL);\n    static struct itimerval timer;\n    return setitimer(ITIMER_PROF, &timer, NULL) == 0 ? 0 : 1;\n}\n\" HAVE_ITIMER )\nIF ( HAVE_ITIMER )\n  ADD_DEFINITIONS ( -D PBRT_HAVE_ITIMER )\nENDIF()\n\nCHECK_CXX_SOURCE_COMPILES ( \"\nclass Bar { public: Bar() { x = 0; } float x; };\nstruct Foo { union { int x[10]; Bar b; }; Foo() : b() { } };\nint main() { Foo f; }\n\" HAVE_NONPOD_IN_UNIONS )\nIF ( HAVE_NONPOD_IN_UNIONS )\n  ADD_DEFINITIONS ( -D PBRT_HAVE_NONPOD_IN_UNIONS )\nENDIF ()\n\nCHECK_CXX_SOURCE_COMPILES ( \"\n#include <fcntl.h>\n#include <sys/mman.h>\n#include <sys/stat.h>\n#include <sys/types.h>\nint main() {\n   int fd = open(\\\"foo\\\", O_RDONLY);\n   struct stat s;\n   fstat(fd, &s);\n   size_t len = s.st_size;\n   void *ptr = mmap(0, len, PROT_READ, MAP_FILE | MAP_SHARED, fd, 0);\n   munmap(ptr, len);   \n}\n\" HAVE_MMAP )\nif ( HAVE_MMAP )\n  ADD_DEFINITIONS ( -D PBRT_HAVE_MMAP )\nENDIF ()\n\n########################################\n# noinline\n\nCHECK_CXX_SOURCE_COMPILES (\n\"__declspec(noinline) void foo() { }\nint main() { }\"\nHAVE_DECLSPEC_NOINLINE )\n\nCHECK_CXX_SOURCE_COMPILES (\n\"__attribute__((noinline)) void foo() { }\nint main() { }\"\nHAVE_ATTRIBUTE_NOINLINE )\n\nIF ( HAVE_ATTRIBUTE_NOINLINE )\n  ADD_DEFINITIONS ( -D \"PBRT_NOINLINE=__attribute__\\\\(\\\\(noinline\\\\)\\\\)\" )\nELSEIF ( HAVE_DECLSPEC_NOINLINE )\n  ADD_DEFINITIONS ( -D \"PBRT_NOINLINE=__declspec(noinline)\" )\nELSE ()\n  ADD_DEFINITIONS ( -D PBRT_NOINLINE )\nENDIF ()\n\n########################################\n# Aligned memory allocation\n\nCHECK_CXX_SOURCE_COMPILES ( \"\n#include <malloc.h>\nint main() { void * ptr = _aligned_malloc(1024, 32); }\n\" HAVE__ALIGNED_MALLOC )\n\nCHECK_CXX_SOURCE_COMPILES ( \"\n#include <stdlib.h>\nint main() {\n  void *ptr;\n  posix_memalign(&ptr, 32, 1024);\n} \" HAVE_POSIX_MEMALIGN )\n\nCHECK_CXX_SOURCE_COMPILES ( \"\n#include <malloc.h>\nint main() {\n    void *ptr = memalign(32, 1024);\n} \" HAVE_MEMALIGN )\n\nIF ( HAVE__ALIGNED_MALLOC )\n  ADD_DEFINITIONS ( -D PBRT_HAVE__ALIGNED_MALLOC )\nELSEIF ( HAVE_POSIX_MEMALIGN )\n  ADD_DEFINITIONS ( -D PBRT_HAVE_POSIX_MEMALIGN )\nELSEIF ( HAVE_MEMALIGN )\n  ADD_DEFINITIONS ( -D PBRTHAVE_MEMALIGN )\nELSE ()\n  MESSAGE ( SEND_ERROR \"Unable to find a way to allocate aligned memory\" )\nENDIF ()\n\n########################################\n# thread-local variables\n\nCHECK_CXX_SOURCE_COMPILES ( \"\n#ifdef __CYGWIN__\n// Hack to work around https://gcc.gnu.org/bugzilla/show_bug.cgi?id=64697\n#error \\\"No thread_local on cygwin\\\"\n#endif  // __CYGWIN__\nthread_local int x; int main() { }\n\" HAVE_THREAD_LOCAL )\n\nCHECK_CXX_SOURCE_COMPILES ( \"\n__declspec(thread) int x; int main() { }\n\" HAVE_DECLSPEC_THREAD )\n\nCHECK_CXX_SOURCE_COMPILES ( \"\n__thread int x; int main() { }\n\" HAVE___THREAD )\n\nIF ( HAVE_THREAD_LOCAL )\n  ADD_DEFINITIONS ( -D PBRT_THREAD_LOCAL=thread_local )\nELSEIF ( HAVE___THREAD )\n  ADD_DEFINITIONS ( -D PBRT_THREAD_LOCAL=__thread )\nELSEIF ( HAVE_DECLSPEC_THREAD )\n  ADD_DEFINITIONS ( -D \"PBRT_THREAD_LOCAL=__declspec(thread)\" )\nELSE ()\n  MESSAGE ( SEND_ERROR \"Unable to find a way to declare a thread-local variable\")\nENDIF ()\n\n###########################################################################\n# zlib\n\nFIND_PACKAGE ( ZLIB )\nIF(NOT ZLIB_FOUND)\n  # Build zlib\n  SET(ZLIB_BUILD_STATIC_LIBS ON CACHE BOOL \" \" FORCE)\n  SET(ZLIB_BUILD_SHARED_LIBS OFF CACHE BOOL \" \" FORCE)\n  ADD_SUBDIRECTORY(src/ext/zlib)\n\n  SET(ZLIB_INCLUDE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/src/ext/zlib\")\n  SET(ZLIB_LIBRARY zlibstatic)\n  SET_PROPERTY(TARGET zlibstatic PROPERTY FOLDER \"ext\")\n  INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIR} \"${CMAKE_CURRENT_BINARY_DIR}/src/ext/zlib\")\nENDIF()\nINCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIRS})\n\n###########################################################################\n# OpenEXR\n\nSET(ILMBASE_NAMESPACE_VERSIONING OFF CACHE BOOL \" \" FORCE)\nSET(OPENEXR_NAMESPACE_VERSIONING OFF CACHE BOOL \" \" FORCE)\nSET(OPENEXR_BUILD_SHARED_LIBS    OFF CACHE BOOL \" \" FORCE)\nSET(ILMBASE_BUILD_SHARED_LIBS    OFF CACHE BOOL \" \" FORCE)\n\nADD_SUBDIRECTORY(src/ext/openexr)\n\nSET_PROPERTY(TARGET IexMath eLut toFloat b44ExpLogTable dwaLookups IlmThread Half Iex Imath IlmImf PROPERTY FOLDER \"ext\")\n\nINCLUDE_DIRECTORIES (\n  src/ext/openexr/IlmBase/Imath\n  src/ext/openexr/IlmBase/Half\n  src/ext/openexr/IlmBase/Iex\n  src/ext/openexr/OpenEXR/IlmImf\n  ${CMAKE_BINARY_DIR}/src/ext/openexr/IlmBase/config\n  ${CMAKE_BINARY_DIR}/src/ext/openexr/OpenEXR/config\n)\nIF(WIN32)\n  SET(OPENEXR_LIBS IlmImf Imath Half ${ZLIB_LIBRARY})\nELSE()\n  SET(OPENEXR_LIBS IlmImf Imath Half)\nENDIF()\n\n###########################################################################\n# glog\n\nSET(WITH_GFLAGS OFF CACHE BOOL \"Use gflags\")\nSET(BUILD_SHARED_LIBS OFF CACHE BOOL \" \" FORCE)\nIF(WIN32)\n  ADD_DEFINITIONS( -D GOOGLE_GLOG_DLL_DECL= )\nENDIF()\nADD_SUBDIRECTORY(src/ext/glog)\nSET_PROPERTY(TARGET glog logging_unittest demangle_unittest utilities_unittest stl_logging_unittest PROPERTY FOLDER \"ext\")\nINCLUDE_DIRECTORIES (\n  src/ext/glog/src\n  ${CMAKE_BINARY_DIR}/src/ext/glog\n)\n\n###########################################################################\n# ptex\n\n# work around https://github.com/wdas/ptex/issues/28\nIF ( CMAKE_BUILD_TYPE )\n  STRING ( TOLOWER ${CMAKE_BUILD_TYPE} LOWER_BUILD_TYPE )\n  SET ( ENV{FLAVOR} ${LOWER_BUILD_TYPE} )\nENDIF ()\nSET(PTEX_BUILD_SHARED_LIBS OFF CACHE BOOL \" \" FORCE)\n\nSET(CMAKE_MACOSX_RPATH 1)\nIF ( WIN32 )\n  ADD_DEFINITIONS ( /D PTEX_STATIC)\nENDIF ()\nADD_SUBDIRECTORY(src/ext/ptex)\nSET_PROPERTY(TARGET Ptex_static ptxinfo halftest ftest rtest wtest PROPERTY FOLDER \"ext\")\nINCLUDE_DIRECTORIES ( src/ext/ptex/src/ptex )\n\n###########################################################################\n# On to pbrt...\n\nSET ( PBRT_CORE_SOURCE\n  src/core/api.cpp\n  src/core/bssrdf.cpp\n  src/core/camera.cpp\n  src/core/efloat.cpp\n  src/core/error.cpp\n  src/core/fileutil.cpp\n  src/core/film.cpp\n  src/core/filter.cpp\n  src/core/floatfile.cpp\n  src/core/geometry.cpp\n  src/core/imageio.cpp\n  src/core/integrator.cpp\n  src/core/interaction.cpp\n  src/core/interpolation.cpp\n  src/core/light.cpp\n  src/core/lightdistrib.cpp\n  src/core/lowdiscrepancy.cpp\n  src/core/material.cpp\n  src/core/medium.cpp\n  src/core/memory.cpp\n  src/core/microfacet.cpp\n  src/core/parallel.cpp\n  src/core/paramset.cpp\n  src/core/parser.cpp\n  src/core/primitive.cpp\n  src/core/progressreporter.cpp\n  src/core/quaternion.cpp\n  src/core/reflection.cpp\n  src/core/sampler.cpp\n  src/core/sampling.cpp\n  src/core/scene.cpp\n  src/core/shape.cpp\n  src/core/sobolmatrices.cpp\n  src/core/spectrum.cpp\n  src/core/stats.cpp\n  src/core/texture.cpp\n  src/core/transform.cpp\n  )\n\nSET ( PBRT_CORE_HEADERS\n  src/core/api.h\n  src/core/bssrdf.h\n  src/core/camera.h\n  src/core/efloat.h\n  src/core/error.h\n  src/core/fileutil.h\n  src/core/film.h\n  src/core/filter.h\n  src/core/floatfile.h\n  src/core/geometry.h\n  src/core/imageio.h\n  src/core/integrator.h\n  src/core/interaction.h\n  src/core/interpolation.h\n  src/core/light.h\n  src/core/lowdiscrepancy.h\n  src/core/material.h\n  src/core/medium.h\n  src/core/memory.h\n  src/core/microfacet.h\n  src/core/mipmap.h\n  src/core/parallel.h\n  src/core/paramset.h\n  src/core/parser.h\n  src/core/pbrt.h\n  src/core/primitive.h\n  src/core/progressreporter.h\n  src/core/quaternion.h\n  src/core/reflection.h\n  src/core/rng.h\n  src/core/sampler.h\n  src/core/sampling.h\n  src/core/scene.h\n  src/core/shape.h\n  src/core/sobolmatrices.h\n  src/core/spectrum.h\n  src/core/stats.h\n  src/core/stringprint.h\n  src/core/texture.h\n  src/core/transform.h\n  )\n\nFILE ( GLOB PBRT_SOURCE\n  src/ext/*\n  src/accelerators/*\n  src/cameras/*\n  src/filters/*\n  src/integrators/*\n  src/lights/*\n  src/materials/*\n  src/samplers/*\n  src/shapes/*\n  src/textures/*\n  src/media/*\n  )\n\nINCLUDE_DIRECTORIES ( src )\nINCLUDE_DIRECTORIES ( src/core )\n\n# Visual Studio source folders\nSOURCE_GROUP (core REGULAR_EXPRESSION src/core/.*)\nSOURCE_GROUP (ext REGULAR_EXPRESSION src/ext/.*)\nSOURCE_GROUP (accelerators REGULAR_EXPRESSION src/accelerators/.*)\nSOURCE_GROUP (cameras REGULAR_EXPRESSION src/cameras/.*)\nSOURCE_GROUP (filters REGULAR_EXPRESSION src/filters/.*)\nSOURCE_GROUP (integrators REGULAR_EXPRESSION src/integrators/.*)\nSOURCE_GROUP (lights REGULAR_EXPRESSION src/lights/.*)\nSOURCE_GROUP (materials REGULAR_EXPRESSION src/materials/.*)\nSOURCE_GROUP (samplers REGULAR_EXPRESSION src/samplers/.*)\nSOURCE_GROUP (shapes REGULAR_EXPRESSION src/shapes/.*)\nSOURCE_GROUP (textures REGULAR_EXPRESSION src/textures/.*)\nSOURCE_GROUP (media REGULAR_EXPRESSION src/media/.*)\n\n###########################################################################\n# pbrt libraries and executables\n\nADD_LIBRARY ( pbrt STATIC\n  ${PBRT_YACC_LEX_SOURCE}\n  ${PBRT_CORE_SOURCE}\n  ${PBRT_CORE_HEADERS}\n  ${PBRT_SOURCE}\n  )\nADD_SANITIZERS ( pbrt )\n\n# A non-exhaustive but pretty representative set..\n# Note that we work-around shoddy c++11 support in MSVC2013\n# (constexpr, etc.), so don't test for that stuff here\nSET ( PBRT_CXX11_FEATURES\n  cxx_auto_type\n  cxx_explicit_conversions\n  cxx_lambdas\n  cxx_nullptr\n  cxx_range_for\n  cxx_static_assert\n)\nTARGET_COMPILE_FEATURES ( pbrt PRIVATE ${PBRT_CXX11_FEATURES} )\n\nIF (WIN32)\n  # Avoid a name clash when building on Visual Studio\n  SET_TARGET_PROPERTIES ( pbrt PROPERTIES OUTPUT_NAME libpbrt )\nENDIF()\n\nSET(ALL_PBRT_LIBS\n  pbrt\n  ${CMAKE_THREAD_LIBS_INIT}\n  ${OPENEXR_LIBS}\n  glog\n  Ptex_static\n  ${ZLIB_LIBRARY}\n)\n\n# Main renderer\nADD_EXECUTABLE ( pbrt_exe src/main/pbrt.cpp )\nADD_SANITIZERS ( pbrt_exe )\n\nSET_TARGET_PROPERTIES ( pbrt_exe PROPERTIES OUTPUT_NAME pbrt )\nTARGET_COMPILE_FEATURES ( pbrt_exe PRIVATE ${PBRT_CXX11_FEATURES} )\nTARGET_LINK_LIBRARIES ( pbrt_exe ${ALL_PBRT_LIBS} )\n\n# Tools\nADD_EXECUTABLE ( bsdftest src/tools/bsdftest.cpp )\nADD_SANITIZERS ( bsdftest )\nTARGET_COMPILE_FEATURES ( bsdftest PRIVATE ${PBRT_CXX11_FEATURES} )\nTARGET_LINK_LIBRARIES ( bsdftest ${ALL_PBRT_LIBS} )\n\nADD_EXECUTABLE ( imgtool src/tools/imgtool.cpp )\nADD_SANITIZERS ( imgtool )\nTARGET_COMPILE_FEATURES ( imgtool PRIVATE ${PBRT_CXX11_FEATURES} )\nTARGET_LINK_LIBRARIES ( imgtool ${ALL_PBRT_LIBS} )\n\nADD_EXECUTABLE ( obj2pbrt src/tools/obj2pbrt.cpp )\nTARGET_COMPILE_FEATURES ( obj2pbrt PRIVATE ${PBRT_CXX11_FEATURES} )\nADD_SANITIZERS ( obj2pbrt )\n\nADD_EXECUTABLE ( cyhair2pbrt src/tools/cyhair2pbrt.cpp )\nADD_SANITIZERS ( cyhair2pbrt )\n\n# Unit test\n\nFILE ( GLOB PBRT_TEST_SOURCE\n  src/tests/*.cpp\n  src/tests/gtest/*.cc\n  )\n\nADD_EXECUTABLE ( pbrt_test ${PBRT_TEST_SOURCE} )\nADD_SANITIZERS ( pbrt_test )\nTARGET_COMPILE_FEATURES ( pbrt_test PRIVATE ${PBRT_CXX11_FEATURES} )\nTARGET_LINK_LIBRARIES ( pbrt_test ${ALL_PBRT_LIBS} )\n\nADD_TEST ( pbrt_unit_test pbrt_test )\n\n# Installation\n\nINSTALL ( TARGETS\n  pbrt_exe\n  bsdftest\n  imgtool\n  obj2pbrt\n  cyhair2pbrt\n  DESTINATION\n  bin\n  )\n\nINSTALL ( TARGETS\n  pbrt\n  DESTINATION\n  lib\n  )\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.33203125,
          "content": "FROM ubuntu:18.10\nMAINTAINER Amit Bakshi <ambakshi@gmail.com>\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update -yq && apt-get install -yq \\\n    build-essential \\\n    gcc \\\n    g++ \\\n    cmake \\\n    make \\\n    libpthread-stubs0-dev\nADD . /app\nWORKDIR /app/build\nRUN cmake -G 'Unix Makefiles' ..\nRUN /usr/bin/make -j8\nRUN ./pbrt_test\n\n\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.2919921875,
          "content": "Copyright (c) 1998-2015, Matt Pharr, Greg Humphreys, and Wenzel Jakob.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.9775390625,
          "content": "pbrt, Version 3\n===============\n\n[![Build Status](https://travis-ci.org/mmp/pbrt-v3.svg?branch=master)](https://travis-ci.org/mmp/pbrt-v3)\n[![Build status](https://ci.appveyor.com/api/projects/status/mlm9g91ejxlcn67s/branch/master?svg=true)](https://ci.appveyor.com/project/mmp/pbrt-v3/branch/master)\n\nThis repository holds the source code to the version of pbrt that is\ndescribed in the third edition of *Physically Based Rendering: From\nTheory to Implementation*, by [Matt Pharr](http://pharr.org/matt), [Wenzel\nJakob](http://www.mitsuba-renderer.org/~wenzel/), and Greg Humphreys.  As\nbefore, the code is available under the BSD license.\n\nThe [pbrt website](http://pbrt.org) has general information about both the\n*Physically Based Rendering* book as well as many other resources for pbrt.\nAs of October 2018, the full [text of the book](http://www.pbr-book.org) is\nnow available online, for free.\n\nExample scenes\n--------------\n\nOver 8GB of example scenes are available for download. (Many are new and\nweren't available with previous versions of pbrt.)  See the [pbrt-v3 scenes\npage](http://pbrt.org/scenes-v3.html) on the pbrt website for information\nabout how to download them.\n\nAfter downloading them, see the `README.md.html` file in the scene\ndistribution for more information about the scenes and preview images.\n\nAdditional resources\n--------------------\n\n* There is a [pbrt Google\n  Groups](https://groups.google.com/forum/#!forum/pbrt) mailing list that can\n  be a helpful resource.\n* Please see the [User's Guide](http://pbrt.org/users-guide.html) for more\n  information about how to check out and build the system as well as various\n  additional information about working with pbrt.\n* Should you find a bug in pbrt, please report it in the [bug\n  tracker](https://github.com/mmp/pbrt-v3/issues).\n* Please report any errors you find in the *Physically Based Rendering*\n  book to authors@pbrt.org.\n\nNote: we tend to let bug reports and book errata emails pile up for a few\nmonths for processing them in batches. Don't think we don't appreciate\nthem. :-)\n\nBuilding pbrt\n-------------\n\nTo check out pbrt together with all dependencies, be sure to use the\n`--recursive` flag when cloning the repository, i.e.\n```bash\n$ git clone --recursive https://github.com/mmp/pbrt-v3/\n```\nIf you accidentally already cloned pbrt without this flag (or to update an\npbrt source tree after a new submodule has been added, run the following\ncommand to also fetch the dependencies:\n```bash\n$ git submodule update --init --recursive\n```\n\npbrt uses [cmake](http://www.cmake.org/) for its build system.  On Linux\nand OS X, cmake is available via most package management systems.  To get\ncmake for Windows, or to build it from source, see the [cmake downloads\npage](http://www.cmake.org/download/).  Once you have cmake, the next step\ndepends on your operating system.\n\n### Makefile builds (Linux, other Unixes, and Mac) ###\n\nCreate a new directory for the build, change to that directory, and run\n`cmake [path to pbrt-v3]`. A Makefile will be created in the current\ndirectory.  Next, run `make` to build pbrt, the obj2pbrt and imgtool\nutilities, and an executable that runs pbrt's unit tests.  Depending on the\nnumber of cores in your system, you will probably want to supply make with\nthe `-j` parameter to specify the number of compilation jobs to run in\nparallel (e.g. `make -j8`).\n\nBy default, the makefiles that are created that will compile an optimized\nrelease build of pbrt. These builds give the highest performance when\nrendering, but many runtime checks are disabled in these builds and\noptimized builds are generally difficult to trace in a debugger.\n\nTo build a debug version of pbrt, set the `CMAKE_BUILD_TYPE` flag to\n`Debug` when you run cmake to create build files to make a debug build.  To\ndo so, provide cmake with the argument `-DCMAKE_BUILD_TYPE=Debug` and build\npbrt using the resulting makefiles. (You may want to keep two build\ndirectories, one for release builds and one for debug builds, so that you\ndon't need to switch back and forth.)\n\nDebug versions of the system run much more slowly than release\nbuilds. Therefore, in order to avoid surprisingly slow renders when\ndebugging support isn't desired, debug versions of pbrt print a banner\nmessage indicating that they were built for debugging at startup time.\n\n### Xcode ###\n\nTo make an Xcode project on OS X, run `cmake -G Xcode [path to pbrt-v3]`.\nA `PBRT-V3.xcodeproj` project file that can be opened in Xcode.  Note that\nthe default build settings have an optimization level of \"None\"; you'll\nalmost certainly want to choose \"Faster\" or \"Fastest\".\n\n### MSVC on Windows ###\n\nOn Windows, first point the cmake GUI at the directory with pbrt's source\ncode.  Create a separate directory to hold the result of the build\n(potentially just a directory named \"build\" inside the pbrt-v3 directory)\nand set that for \"Where to build the binaries\" in the GUI.\n\nNext, click \"Configure\".  Note that you will want to choose the \"Win64\"\ngenerator for your MSVC installation unless you have a clear reason to need\na 32-bit build of pbrt.  Once cmake has finished the configuration step,\nclick \"Generate\"; when that's done, there will be a \"PBRT-V3.sln\" file in\nthe build directory you specified. Open that up in MSVC and you're ready to\ngo.\n\n### Build Configurations ###\n\nThere are two configuration settings that must be set when configuring the\nbuild. The first controls whether pbrt uses 32-bit or 64-bit values for\nfloating-point computation, and the second controls whether tristimulus RGB\nvalues or sampled spectral values are used for rendering.  (Both of these\naren't amenable to being chosen at runtime, but must be determined at\ncompile time for efficiency).  The cmake configuration variables\n`PBRT_FLOAT_AS_DOUBLE` and `PBRT_SAMPLED_SPECTRUM` configure them,\nrespectively.\n\nIf you're using a GUI version of cmake, those settings should be available\nin the list of configuration variables; set them as desired before choosing\n'Generate'.\n\nWith command-line cmake, their values can be specified when you cmake via\n`-DPBRT_FLOAT_AS_DOUBLE=1`, for example.\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.9091796875,
          "content": "version: 1.0.{build}\nbranches:\n  only:\n  - master\n  - book\nos: \n  - Visual Studio 2013\n  - Visual Studio 2015\n  - Visual Studio 2017\nconfiguration: Release\nplatform: x64\nclone_folder: c:\\pbrt-v3\n\ninstall:\n  # os detection\n  - ps: if ($env:VS140COMNTOOLS -gt 0) { $env:VS_VER = 14 } else { $env:VS_VER = 12 }\n  - echo %VS_VER%\n  - set PATH=C:\\Program Files (x86)\\MSBuild\\%VS_VER%.0\\Bin;%PATH%\n  - echo %PATH%\n  - git submodule update --init --recursive\nbefore_build:\n  - md c:\\pbrt-v3\\build\n  - cd c:\\pbrt-v3\\build\n  - set WIN32=1\n  - ps: if ($env:VS_VER -eq 14) {cmake -G \"Visual Studio 14 2015 Win64\" ..} else {cmake -G \"Visual Studio 12 2013 Win64\" ..}\nbuild:\n  project: c:\\pbrt-v3\\build\\pbrt-v3.sln\n  parallel: true\n  verbosity: normal\nbuild_script:\n  - msbuild c:\\pbrt-v3\\build\\pbrt-v3.sln /logger:\"C:\\Program Files\\AppVeyor\\BuildAgent\\Appveyor.MSBuildLogger.dll\"\nafter_build:\n  - cd c:\\pbrt-v3\\build\\Release\n  - pbrt_test.exe\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "exporters",
          "type": "tree",
          "content": null
        },
        {
          "name": "scenes",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}