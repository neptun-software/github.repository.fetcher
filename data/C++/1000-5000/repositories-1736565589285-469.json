{
  "metadata": {
    "timestamp": 1736565589285,
    "page": 469,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "randombit/botan",
      "stars": 2772,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 1.521484375,
          "content": "Language: Cpp\nStandard: c++20\n\nBasedOnStyle: Chromium\n\nColumnLimit: 120\nAccessModifierOffset: -3\nIndentWidth: 3\nContinuationIndentWidth: 3\nConstructorInitializerIndentWidth: 6\n\nPointerAlignment: Left\nReferenceAlignment: Left\nQualifierAlignment: Left\n\nIncludeBlocks: Preserve\nIncludeCategories:\n  - Regex:           '^<botan/internal/.*\\.h>'\n    Priority:        3\n    CaseSensitive:   false\n  - Regex:           '^<botan/.*\\.h>'\n    Priority:        2\n    CaseSensitive:   false\n  - Regex:           '^<.*'\n    Priority:        4\n    CaseSensitive:   false\n  - Regex:           '^<.*\\.h>'\n    Priority:        3\n    CaseSensitive:   false\n  - Regex:           '.*'\n    Priority:        1\n    CaseSensitive:   false\n\nAttributeMacros: ['BOTAN_FUNC_ISA',\n                  'BOTAN_FUNC_ISA_INLINE',\n                  'BOTAN_FORCE_INLINE',\n                  'BOTAN_DEPRECATED',\n                  'BOTAN_DEPRECATED_API']\n\nBinPackArguments: false\nBreakStringLiterals: false\nAllowAllArgumentsOnNextLine: true\nAllowAllParametersOfDeclarationOnNextLine: true\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nEmptyLineBeforeAccessModifier: Always\n\nBreakConstructorInitializers: AfterColon\nBreakInheritanceList: AfterComma\nAllowShortBlocksOnASingleLine: Empty\nAllowShortFunctionsOnASingleLine: Inline\nSpaceBeforeParens: Never\nIndentPPDirectives: BeforeHash\nFixNamespaceComments: true\nSeparateDefinitionBlocks: Always\nKeepEmptyLinesAtTheStartOfBlocks: false\nIndentAccessModifiers: true\nReflowComments: false\nRequiresClausePosition: OwnLine\nIndentRequiresClause: true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.9716796875,
          "content": "/Makefile\nbuild.ninja\n.ninja_log\nlibbotan*.so.*\n*.a\n*.so\n*.dylib\n*.exp\n*.lib\n*.pdb\n*.ilk\n*.dll\n*.exe\n*.manifest\nbuild\nbuild_deps\nbuild.log\nbotan\nbotan-test\nbotan-website/\n\ncore.*\nvgcore.*\n\n# Text file backups (e.g. gedit, joe)\n*~\n\\#*\\#\n.\\#*\n\n# Editor configuration files (top level)\n/*.sublime-project\n/*.sublime-workspace\n/.editorconfig\n\n# Archive files\n*.tgz\n*.tar\n\n# Logs\n*.log\n\n# Patch files\n*.patch\n*.diff\n*.orig\n*.rej\n\n# Cache and temporary files\n*.pyc\n.DS_Store\n*.swp\n/*.cache\n\n# ctags/etags files\n/TAGS\n/tags\n\n# Amalgamation code\nbotan_all.h\nbotan_all_internal.h\nbotan_all.cpp\nbotan_all_*.cpp\n\n# Coverage output\ncoverage.info\ncoverage.info.raw\ncoverage/\nlcov-out/\n\n/fuzzer_corpus\n\n# Profiler outputs\ncachegrind.*\ncallgrind.*\n\n# Ignore stuff in the top level dir that shouldn't be checked in\n/*.c\n/*.cpp\n/*.h\n/*.py\n/*.key\n/*.pem\n/*.der\n/*.ber\n/*.gpg\n/*.pub\n/*.crt\n/*.txt\n/*.rst\n\n# Add back files from the toplevel\n!/news.rst\n!/readme.rst\n!/configure.py\n!/license.txt\n\n# cscope\ncscope.out\n"
        },
        {
          "name": "configure.py",
          "type": "blob",
          "size": 144.32421875,
          "content": "#!/usr/bin/env python3\n\n\"\"\"\nConfiguration program for botan\n\n(C) 2009-2020 Jack Lloyd\n(C) 2015,2016,2017 Simon Warta (Kullo GmbH)\n(C) 2019-2022 Ren√© Meusel (neXenio GmbH, Rohde & Schwarz Cybersecurity GmbH)\n\nBotan is released under the Simplified BSD License (see license.txt)\n\nThis script is regularly tested with CPython 3.x, and\noccasionally tested PyPy 4.\n\nOn Jython target detection does not work (use --os and --cpu).\n\"\"\"\n\nimport collections\nimport copy\nimport json\nimport sys\nimport os\nimport os.path\nimport platform\nimport re\nimport shlex\nimport shutil\nimport subprocess\nimport traceback\nimport logging\nimport time\nimport errno\nimport optparse # pylint: disable=deprecated-module\n\n# An error caused by and to be fixed by the user, e.g. invalid command line argument\nclass UserError(Exception):\n    pass\n\n\n# An error caused by bugs in this script or when reading/parsing build data files\n# Those are not expected to be fixed by the user of this script\nclass InternalError(Exception):\n    pass\n\n\ndef flatten(l):\n    return sum(l, [])\n\ndef normalize_source_path(source):\n    \"\"\"\n    cmake and some versions of make need this, and nothing else minds\n    \"\"\"\n    return os.path.normpath(source).replace('\\\\', '/')\n\ndef normalize_source_paths(sources):\n    return [normalize_source_path(p) for p in sources]\n\ndef parse_version_file(version_path):\n    version_file = open(version_path, encoding='utf8')\n    key_and_val = re.compile(r\"([a-z_]+) = ([a-zA-Z0-9:\\-\\']+)\")\n\n    results = {}\n    for line in version_file.readlines():\n        if not line or line[0] == '#':\n            continue\n        match = key_and_val.match(line)\n        if match:\n            key = match.group(1)\n            val = match.group(2)\n\n            if val == 'None':\n                val = None\n            elif val.startswith(\"'\") and val.endswith(\"'\"):\n                val = val[1:len(val)-1]\n            else:\n                val = int(val)\n\n            results[key] = val\n    return results\n\nclass Version:\n    \"\"\"\n    Version information are all static members\n    \"\"\"\n    data = {}\n\n    @staticmethod\n    def get_data():\n        if not Version.data:\n            root_dir = os.path.dirname(os.path.realpath(__file__))\n            Version.data = parse_version_file(os.path.join(root_dir, 'src/build-data/version.txt'))\n\n            suffix = Version.data[\"release_suffix\"]\n            if suffix != \"\":\n                suffix_re = re.compile('-(alpha|beta|rc)[0-9]+')\n\n                if not suffix_re.match(suffix):\n                    raise Exception(\"Unexpected version suffix '%s'\" % (suffix))\n        return Version.data\n\n    @staticmethod\n    def major():\n        return Version.get_data()[\"release_major\"]\n\n    @staticmethod\n    def minor():\n        return Version.get_data()[\"release_minor\"]\n\n    @staticmethod\n    def patch():\n        return Version.get_data()[\"release_patch\"]\n\n    @staticmethod\n    def suffix():\n        return Version.get_data()[\"release_suffix\"]\n\n    @staticmethod\n    def packed():\n         # Used on macOS for dylib versioning\n        return Version.major() * 1000 + Version.minor()\n\n    @staticmethod\n    def so_rev():\n        return Version.get_data()[\"release_so_abi_rev\"]\n\n    @staticmethod\n    def release_type():\n        return Version.get_data()[\"release_type\"]\n\n    @staticmethod\n    def datestamp():\n        return Version.get_data()[\"release_datestamp\"]\n\n    @staticmethod\n    def as_string():\n        return '%d.%d.%d%s' % (Version.major(), Version.minor(), Version.patch(), Version.suffix())\n\n    @staticmethod\n    def vc_rev():\n        # Lazy load to ensure _local_repo_vc_revision() does not run before logger is set up\n        if Version.get_data()[\"release_vc_rev\"] is None:\n            Version.data[\"release_vc_rev\"] = Version._local_repo_vc_revision()\n        return Version.get_data()[\"release_vc_rev\"]\n\n    @staticmethod\n    def _local_repo_vc_revision():\n        vc_command = ['git', 'rev-parse', 'HEAD']\n        cmdname = vc_command[0]\n\n        try:\n            vc = subprocess.Popen(\n                vc_command,\n                stdout=subprocess.PIPE,\n                stderr=subprocess.PIPE,\n                universal_newlines=True)\n            (stdout, stderr) = vc.communicate()\n\n            if vc.returncode != 0:\n                logging.debug('Error getting rev from %s - %d (%s)',\n                              cmdname, vc.returncode, stderr)\n                return 'unknown'\n\n            rev = str(stdout).strip()\n            logging.debug('%s reported revision %s', cmdname, rev)\n\n            return '%s:%s' % (cmdname, rev)\n        except OSError as ex:\n            logging.debug('Error getting rev from %s - %s', cmdname, ex.strerror)\n            return 'unknown'\n\n\n\nclass SourcePaths:\n    \"\"\"\n    A collection of paths defined by the project structure and\n    independent of user configurations.\n    All paths are relative to the base_dir, which may be relative as well (e.g. \".\")\n    \"\"\"\n\n    def __init__(self, base_dir):\n        self.base_dir = base_dir\n        self.doc_dir = os.path.join(self.base_dir, 'doc')\n        self.src_dir = os.path.join(self.base_dir, 'src')\n\n        # dirs in src/\n        self.build_data_dir = os.path.join(self.src_dir, 'build-data')\n        self.configs_dir = os.path.join(self.src_dir, 'configs')\n        self.lib_dir = os.path.join(self.src_dir, 'lib')\n        self.python_dir = os.path.join(self.src_dir, 'python')\n        self.scripts_dir = os.path.join(self.src_dir, 'scripts')\n\n        # subdirs of src/\n        self.test_data_dir = os.path.join(self.src_dir, 'tests/data')\n        self.sphinx_config_dir = os.path.join(self.configs_dir, 'sphinx')\n\n\nclass BuildPaths:\n    \"\"\"\n    Constructor\n    \"\"\"\n    def __init__(self, source_paths, options, modules):\n        self.build_dir = os.path.join(options.with_build_dir, 'build')\n\n        self.libobj_dir = os.path.join(self.build_dir, 'obj', 'lib')\n        self.cliobj_dir = os.path.join(self.build_dir, 'obj', 'cli')\n        self.testobj_dir = os.path.join(self.build_dir, 'obj', 'test')\n\n        self.doc_output_dir = os.path.join(self.build_dir, 'docs')\n        self.handbook_output_dir = os.path.join(self.doc_output_dir, 'handbook')\n        self.doc_output_dir_doxygen = os.path.join(self.doc_output_dir, 'doxygen') if options.with_doxygen else None\n        self.doc_module_info = os.path.join(self.build_dir, 'module_info') if options.with_doxygen else None\n        self.response_file_dir = os.path.join(self.build_dir, 'response_files')\n\n        # We split the header include paths into 'public', 'internal' and 'external'\n        # to allow for better control over what is exposed to each compilation unit.\n        # For instance, the examples should only see the public headers, while the\n        # test suite should see both public and internal headers.\n        self.include_dir = os.path.join(self.build_dir, 'include')\n        self.public_include_basedir = os.path.join(self.include_dir, 'public')\n        self.internal_include_basedir = os.path.join(self.include_dir, 'internal')\n        self.external_include_dir = os.path.join(self.include_dir, 'external')\n        self.public_include_dir = os.path.join(self.public_include_basedir, 'botan')\n        self.internal_include_dir = os.path.join(self.internal_include_basedir, 'botan', 'internal')\n\n        self.internal_headers = sorted(flatten([m.internal_headers() for m in modules]))\n        self.external_headers = sorted(flatten([m.external_headers() for m in modules]))\n\n        # this is overwritten if amalgamation is used\n        self.lib_sources = normalize_source_paths(sorted(flatten([mod.sources() for mod in modules])))\n\n        self.public_headers = sorted(flatten([m.public_headers() for m in modules]))\n\n        def find_sources_in(basedir, srcdir):\n            for (dirpath, _, filenames) in os.walk(os.path.join(basedir, srcdir)):\n                for filename in filenames:\n                    if filename.endswith('.cpp') and not filename.startswith('.'):\n                        yield os.path.join(dirpath, filename)\n\n        def find_headers_in(basedir, srcdir):\n            for (dirpath, _, filenames) in os.walk(os.path.join(basedir, srcdir)):\n                for filename in filenames:\n                    if filename.endswith('.h') and not filename.startswith('.'):\n                        yield os.path.join(dirpath, filename)\n\n        self.cli_sources = normalize_source_paths(find_sources_in(source_paths.src_dir, 'cli'))\n        self.cli_headers = normalize_source_paths(find_headers_in(source_paths.src_dir, 'cli'))\n        self.test_sources = normalize_source_paths(find_sources_in(source_paths.src_dir, 'tests'))\n\n        if 'examples' in options.build_targets:\n            self.example_sources = normalize_source_paths(find_sources_in(source_paths.src_dir, 'examples'))\n            self.example_output_dir = os.path.join(self.build_dir, 'examples')\n            self.example_obj_dir = os.path.join(self.build_dir, 'obj', 'examples')\n        else:\n            self.example_sources = None\n            self.example_output_dir = None\n            self.example_obj_dir = None\n\n        if options.build_fuzzers:\n            self.fuzzer_sources = list(find_sources_in(source_paths.src_dir, 'fuzzer'))\n            self.fuzzer_output_dir = os.path.join(self.build_dir, 'fuzzer')\n            self.fuzzobj_dir = os.path.join(self.build_dir, 'obj', 'fuzzer')\n        else:\n            self.fuzzer_sources = None\n            self.fuzzer_output_dir = None\n            self.fuzzobj_dir = None\n\n    def build_dirs(self):\n        out = [\n            self.libobj_dir,\n            self.cliobj_dir,\n            self.testobj_dir,\n            self.public_include_dir,\n            self.internal_include_dir,\n            self.external_include_dir,\n            self.handbook_output_dir,\n            self.response_file_dir\n        ]\n        if self.doc_output_dir_doxygen:\n            out += [self.doc_output_dir_doxygen, self.doc_module_info]\n        if self.fuzzer_output_dir:\n            out += [self.fuzzobj_dir, self.fuzzer_output_dir]\n        if self.example_output_dir:\n            out += [self.example_obj_dir, self.example_output_dir]\n        return out\n\n    def format_public_include_flags(self, cc):\n        return cc.add_include_dir_option + ' ' + normalize_source_path(self.public_include_basedir)\n\n    def format_internal_include_flags(self, cc):\n        return cc.add_include_dir_option + ' ' + normalize_source_path(self.internal_include_basedir)\n\n    def format_external_include_flags(self, cc, external_includes):\n        dash_isystem = cc.add_system_include_dir_option\n        output = ''\n        if self.external_headers:\n            output += ' ' + dash_isystem + ' ' + normalize_source_path(self.external_include_dir)\n        for external_include in external_includes:\n            output += ' ' + dash_isystem + ' ' + normalize_source_path(external_include)\n        return output\n\n    def src_info(self, typ):\n        if typ == 'lib':\n            return (self.lib_sources, self.libobj_dir)\n        if typ == 'cli':\n            return (self.cli_sources, self.cliobj_dir)\n        if typ == 'test':\n            return (self.test_sources, self.testobj_dir)\n        if typ == 'fuzzer':\n            return (self.fuzzer_sources, self.fuzzobj_dir)\n        if typ == 'examples':\n            return (self.example_sources, self.example_obj_dir)\n        raise InternalError(\"Unknown src info type '%s'\" % (typ))\n\nACCEPTABLE_BUILD_TARGETS = [\"static\", \"shared\", \"cli\", \"tests\", \"bogo_shim\", \"examples\", \"ct_selftest\"]\n\ndef process_command_line(args):\n    \"\"\"\n    Handle command line options\n    Do not use logging in this method as command line options need to be\n    available before logging is setup.\n    \"\"\"\n\n    def define_option_pair(group, verb, nverb, what, default, msg=optparse.SUPPRESS_HELP):\n        dest = '%s_%s' % (verb, what.replace('-', '_'))\n\n        # always show the help for the option that switches away from the default\n        with_help = msg if not default else optparse.SUPPRESS_HELP\n        without_help = msg if default else optparse.SUPPRESS_HELP\n\n        group.add_option('--%s-%s' % (verb, what),\n                         dest=dest,\n                         action='store_true',\n                         default=default,\n                         help=with_help)\n\n        group.add_option('--%s-%s' % (nverb, what),\n                         dest=dest,\n                         action='store_false',\n                         help=without_help)\n\n    def add_with_without_pair(group, what, default, msg=optparse.SUPPRESS_HELP):\n        define_option_pair(group, 'with', 'without', what, default, msg)\n\n    def add_enable_disable_pair(group, what, default, msg=optparse.SUPPRESS_HELP):\n        define_option_pair(group, 'enable', 'disable', what, default, msg)\n\n    parser = optparse.OptionParser(\n        formatter=optparse.IndentedHelpFormatter(max_help_position=50),\n        version=Version.as_string())\n\n    parser.add_option('--verbose', action='store_true', default=False,\n                      help='Show debug messages')\n    parser.add_option('--quiet', action='store_true', default=False,\n                      help='Show only warnings and errors')\n\n    target_group = optparse.OptionGroup(parser, 'Target options')\n\n    target_group.add_option('--cpu', help='set the target CPU architecture')\n\n    target_group.add_option('--os', help='set the target operating system')\n\n    target_group.add_option('--cc', dest='compiler', help='set the desired build compiler')\n\n    target_group.add_option('--cc-min-version', dest='cc_min_version', default=None,\n                            metavar='MAJOR.MINOR',\n                            help='Set the minimal version of the target compiler. ' \\\n                                 'Use --cc-min-version=0.0 to support all compiler versions. ' \\\n                                 'Default is auto detection.')\n\n    target_group.add_option('--cc-bin', dest='compiler_binary', metavar='BINARY',\n                            help='set path to compiler binary')\n\n    target_group.add_option('--cc-abi-flags', metavar='FLAGS', default='',\n                            help='set compiler ABI flags')\n\n    target_group.add_option('--cxxflags', metavar='FLAGS', default=None,\n                            help='override all compiler flags')\n\n    target_group.add_option('--extra-cxxflags', metavar='FLAGS', default=[], action='append',\n                            help='set extra compiler flags')\n\n    target_group.add_option('--lto-cxxflags-to-ldflags', default=False, action='store_true',\n                            help='set all compilation flags also during linking (for LTO)')\n\n    target_group.add_option('--ldflags', metavar='FLAGS',\n                            help='set linker flags', default=None)\n\n    target_group.add_option('--extra-libs', metavar='LIBS',\n                            help='specify extra libraries to link against', default='')\n\n    target_group.add_option('--ar-command', dest='ar_command', metavar='AR', default=None,\n                            help='set path to static archive creator')\n\n    target_group.add_option('--ar-options', dest='ar_options', metavar='AR_OPTIONS', default=None,\n                            help='set options for ar')\n\n    target_group.add_option('--msvc-runtime', metavar='RT', default=None,\n                            help='specify MSVC runtime (MT, MD, MTd, MDd)')\n\n    target_group.add_option('--compiler-cache',\n                            help='specify a compiler cache to use')\n\n    target_group.add_option('--with-endian', metavar='ORDER', default=None,\n                            help='override byte order guess')\n\n    target_group.add_option('--ct-value-barrier-type', metavar='TYPE', default=None,\n                            help=optparse.SUPPRESS_HELP)\n\n    target_group.add_option('--with-os-features', action='append', metavar='FEAT',\n                            help='specify OS features to use')\n    target_group.add_option('--without-os-features', action='append', metavar='FEAT',\n                            help='specify OS features to disable')\n\n    add_with_without_pair(target_group, 'compilation-database', True, 'disable compile_commands.json')\n\n    isa_extensions = [\n        'SSE2', 'SSSE3', 'SSE4.1', 'SSE4.2', 'AVX2', 'BMI2', 'RDRAND', 'RDSEED',\n        'AES-NI', 'SHA-NI',\n        'AltiVec', 'NEON', 'ARMv8 Crypto', 'POWER Crypto']\n\n    for isa_extn_name in isa_extensions:\n        isa_extn = isa_extn_name.lower().replace(' ', '')\n\n        target_group.add_option('--disable-%s' % (isa_extn),\n                                help='disable %s intrinsics' % (isa_extn_name),\n                                action='append_const',\n                                const=isa_extn.replace('-', '').replace('.', '').replace(' ', ''),\n                                dest='disable_intrinsics')\n\n    build_group = optparse.OptionGroup(parser, 'Build options')\n\n    build_group.add_option('--system-cert-bundle', metavar='PATH', default=None,\n                           help='set path to trusted CA bundle')\n\n    add_with_without_pair(build_group, 'debug-info', False, 'include debug symbols')\n\n    add_with_without_pair(build_group, 'sanitizers', False, 'enable ASan/UBSan checks')\n\n    add_enable_disable_pair(build_group, 'asm', True, 'disable inline assembly')\n\n    build_group.add_option('--enable-sanitizers', metavar='SAN', default='',\n                           help='enable specific sanitizers')\n\n    add_with_without_pair(build_group, 'stack-protector', True, 'disable stack smashing protections')\n\n    add_with_without_pair(build_group, 'coverage-info', False, 'add coverage info')\n\n    build_group.add_option('--enable-shared-library', dest='build_shared_lib',\n                           action='store_true', default=None,\n                           help=optparse.SUPPRESS_HELP)\n    build_group.add_option('--disable-shared-library', dest='build_shared_lib',\n                           action='store_false',\n                           help='disable building shared library')\n\n    build_group.add_option('--enable-static-library', dest='build_static_lib',\n                           action='store_true', default=None,\n                           help=optparse.SUPPRESS_HELP)\n    build_group.add_option('--disable-static-library', dest='build_static_lib',\n                           action='store_false',\n                           help='disable building static library')\n\n    build_group.add_option('--optimize-for-size', dest='optimize_for_size',\n                           action='store_true', default=False,\n                           help='optimize for code size')\n\n    build_group.add_option('--no-optimizations', dest='no_optimizations',\n                           action='store_true', default=False,\n                           help='disable all optimizations (for debugging)')\n\n    build_group.add_option('--debug-mode', action='store_true', default=False, dest='debug_mode',\n                           help='enable debug info, disable optimizations')\n\n    build_group.add_option('--amalgamation', dest='amalgamation',\n                           default=False, action='store_true',\n                           help='use amalgamation to build')\n\n    build_group.add_option('--name-amalgamation', metavar='NAME', default='botan_all',\n                           help='specify alternate name for amalgamation files')\n\n    build_group.add_option('--with-build-dir', metavar='DIR', default='',\n                           help='setup the build in DIR')\n\n    build_group.add_option('--with-external-includedir', metavar='DIR', default=[],\n                           help='use DIR for external includes', action='append')\n\n    build_group.add_option('--with-external-libdir', metavar='DIR', default=[],\n                           help='use DIR for external libs', action='append')\n\n    build_group.add_option('--define-build-macro', metavar='DEFINE', default=[],\n                           help='set compile-time pre-processor definition like KEY[=VALUE]', action='append')\n\n    build_group.add_option('--with-sysroot-dir', metavar='DIR', default='',\n                           help='use DIR for system root while cross-compiling')\n\n    link_methods = ['symlink', 'hardlink', 'copy']\n    build_group.add_option('--link-method', default=None, metavar='METHOD',\n                           choices=link_methods,\n                           help='choose how links to include headers are created (%s)' % ', '.join(link_methods))\n\n    build_group.add_option('--with-local-config',\n                           dest='local_config', metavar='FILE',\n                           help='include the contents of FILE into build.h')\n\n    build_group.add_option('--distribution-info', metavar='STRING',\n                           help='distribution specific version',\n                           default='unspecified')\n\n    build_group.add_option('--maintainer-mode', dest='maintainer_mode',\n                           action='store_true', default=False,\n                           help=optparse.SUPPRESS_HELP)\n\n    build_group.add_option('--werror-mode', dest='werror_mode',\n                           action='store_true', default=False,\n                           help=\"Prohibit compiler warnings\")\n\n    build_group.add_option('--no-store-vc-rev', action='store_true', default=False,\n                           help=optparse.SUPPRESS_HELP)\n\n    build_group.add_option('--no-install-python-module', action='store_true', default=False,\n                           help='skip installing Python module')\n\n    build_group.add_option('--with-python-versions', dest='python_version',\n                           metavar='N.M',\n                           default='%d.%d' % (sys.version_info[0], sys.version_info[1]),\n                           help='where to install botan2.py (def %default)')\n\n    build_group.add_option('--disable-cc-tests', dest='enable_cc_tests',\n                           default=True, action='store_false',\n                           help=optparse.SUPPRESS_HELP)\n\n    add_with_without_pair(build_group, 'valgrind', False, 'use valgrind API')\n\n    build_group.add_option('--unsafe-fuzzer-mode', action='store_true', default=False,\n                           help=optparse.SUPPRESS_HELP)\n\n    build_group.add_option('--build-fuzzers', dest='build_fuzzers',\n                           metavar='TYPE', default=None,\n                           help='Build fuzzers (afl, libfuzzer, klee, test)')\n\n    build_group.add_option('--with-fuzzer-lib', metavar='LIB', default=None, dest='fuzzer_lib',\n                           help='additionally link in LIB')\n\n    add_with_without_pair(build_group, 'debug-asserts', default=False)\n\n    build_group.add_option('--unsafe-terminate-on-asserts', action='store_true', default=False,\n                           help=optparse.SUPPRESS_HELP)\n\n    build_group.add_option('--build-targets', default=None, dest=\"build_targets\", action='append',\n                           help=\"build specific targets and tools (%s)\" % ', '.join(ACCEPTABLE_BUILD_TARGETS))\n\n    build_group.add_option('--build-tool', default='make',\n                           help=\"specify the build tool (make, ninja)\")\n\n    add_with_without_pair(build_group, 'pkg-config', default=None)\n    add_with_without_pair(build_group, 'cmake-config', default=True)\n\n    docs_group = optparse.OptionGroup(parser, 'Documentation Options')\n\n    add_with_without_pair(docs_group, 'documentation', True, 'skip building/installing documentation')\n\n    add_with_without_pair(docs_group, 'sphinx', None, 'run Sphinx to generate docs')\n\n    add_with_without_pair(docs_group, 'pdf', False, 'run Sphinx to generate PDF doc')\n\n    add_with_without_pair(docs_group, 'rst2man', None, 'run rst2man to generate man page')\n\n    add_with_without_pair(docs_group, 'doxygen', False, 'run Doxygen')\n\n    mods_group = optparse.OptionGroup(parser, 'Module selection')\n\n    mods_group.add_option('--module-policy', dest='module_policy',\n                          help=\"module policy file (see src/build-data/policy)\",\n                          metavar='POL', default=None)\n\n    mods_group.add_option('--enable-modules', dest='enabled_modules',\n                          metavar='MODS', action='append',\n                          help='enable specific modules')\n    mods_group.add_option('--disable-modules', dest='disabled_modules',\n                          metavar='MODS', action='append',\n                          help='disable specific modules')\n    mods_group.add_option('--no-autoload', action='store_true', default=False,\n                          help=optparse.SUPPRESS_HELP)\n    mods_group.add_option('--minimized-build', action='store_true', dest='no_autoload',\n                          help='minimize build')\n\n    add_enable_disable_pair(mods_group, 'experimental-features', False,\n                            'enable building of experimental features and modules')\n\n    add_enable_disable_pair(mods_group, 'deprecated-features', True,\n                            'disable building of deprecated features and modules')\n\n    # Should be derived from info.txt but this runs too early\n    third_party = ['boost', 'bzip2', 'esdm_rng', 'lzma', 'commoncrypto', 'sqlite3', 'zlib', 'tpm', 'tpm2']\n\n    for mod in third_party:\n        mods_group.add_option('--with-%s' % (mod),\n                              help=('use %s' % (mod)) if mod in third_party else optparse.SUPPRESS_HELP,\n                              action='append_const',\n                              const=mod,\n                              dest='enabled_modules')\n\n        mods_group.add_option('--without-%s' % (mod),\n                              help=optparse.SUPPRESS_HELP,\n                              action='append_const',\n                              const=mod,\n                              dest='disabled_modules')\n\n    install_group = optparse.OptionGroup(parser, 'Installation options')\n\n    install_group.add_option('--program-suffix', metavar='SUFFIX',\n                             help='append string to program names')\n    install_group.add_option('--library-suffix', metavar='SUFFIX', default='',\n                             help='append string to library names')\n\n    install_group.add_option('--prefix', metavar='DIR',\n                             help='set the install prefix')\n    install_group.add_option('--docdir', metavar='DIR',\n                             help='set the doc install dir')\n    install_group.add_option('--bindir', metavar='DIR',\n                             help='set the binary install dir')\n    install_group.add_option('--libdir', metavar='DIR',\n                             help='set the library install dir')\n    install_group.add_option('--mandir', metavar='DIR',\n                             help='set the install dir for man pages')\n    install_group.add_option('--includedir', metavar='DIR',\n                             help='set the include file install dir')\n\n    info_group = optparse.OptionGroup(parser, 'Informational')\n\n    info_group.add_option('--list-modules', dest='list_modules',\n                          action='store_true',\n                          help='list available modules and exit')\n\n    info_group.add_option('--list-os-features', dest='list_os_features',\n                          action='store_true',\n                          help='list available OS features and exit')\n\n    parser.add_option_group(target_group)\n    parser.add_option_group(build_group)\n    parser.add_option_group(docs_group)\n    parser.add_option_group(mods_group)\n    parser.add_option_group(install_group)\n    parser.add_option_group(info_group)\n\n    # These exist only for autoconf compatibility (requested by zw for mtn)\n    compat_with_autoconf_options = [\n        'datadir',\n        'datarootdir',\n        'dvidir',\n        'exec-prefix',\n        'htmldir',\n        'infodir',\n        'libexecdir',\n        'localedir',\n        'localstatedir',\n        'oldincludedir',\n        'pdfdir',\n        'psdir',\n        'sbindir',\n        'sharedstatedir',\n        'sysconfdir'\n        ]\n\n    for opt in compat_with_autoconf_options:\n        parser.add_option('--' + opt, help=optparse.SUPPRESS_HELP)\n\n    (options, args) = parser.parse_args(args)\n\n    if args != []:\n        raise UserError('Unhandled option(s): ' + ' '.join(args))\n\n    if options.with_endian not in [None, 'little', 'big']:\n        raise UserError('Bad value to --with-endian \"%s\"' % (options.with_endian))\n\n    if options.debug_mode:\n        options.no_optimizations = True\n        options.with_debug_info = True\n\n    def parse_multiple_enable(modules):\n        if modules is None:\n            return []\n\n        return sorted({m for m in flatten([s.split(',') for s in modules]) if m != ''})\n\n    options.enabled_modules = parse_multiple_enable(options.enabled_modules)\n    options.disabled_modules = parse_multiple_enable(options.disabled_modules)\n\n    options.with_os_features = parse_multiple_enable(options.with_os_features)\n    options.without_os_features = parse_multiple_enable(options.without_os_features)\n\n    options.disable_intrinsics = parse_multiple_enable(options.disable_intrinsics)\n\n    return options\n\ndef take_options_from_env(options):\n    # Take some values from environment, if not set on command line\n\n    def update_from_env(val, var, name):\n        if val is None:\n            val = os.getenv(var)\n            if val is not None:\n                logging.info('Implicit --%s=%s due to environment variable %s', name, val, var)\n\n        return val\n\n    if os.getenv('CXX') and options.compiler_binary is None and options.compiler is not None:\n        logging.info('CXX environment variable is set which will override compiler path')\n\n    options.ar_command = update_from_env(options.ar_command, 'AR', 'ar-command')\n    options.ar_options = update_from_env(options.ar_options, 'AR_OPTIONS', 'ar-options')\n    options.compiler_binary = update_from_env(options.compiler_binary, 'CXX', 'cc-bin')\n    options.cxxflags = update_from_env(options.cxxflags, 'CXXFLAGS', 'cxxflags')\n    options.ldflags = update_from_env(options.ldflags, 'LDFLAGS', 'ldflags')\n\nclass LexResult:\n    pass\n\n\nclass LexerError(InternalError):\n    def __init__(self, msg, lexfile, line):\n        super().__init__(msg)\n        self.msg = msg\n        self.lexfile = lexfile\n        self.line = line\n\n    def __str__(self):\n        return '%s at %s:%d' % (self.msg, self.lexfile, self.line)\n\ndef parse_lex_dict(as_list, map_name, infofile):\n    if len(as_list) % 3 != 0:\n        raise InternalError(\"Lex dictionary has invalid format (input not divisible by 3): %s\" % as_list)\n\n    result = {}\n    for key, sep, value in [as_list[3*i:3*i+3] for i in range(0, len(as_list)//3)]:\n        if sep != '->':\n            raise InternalError(\"Map %s in %s has invalid format\" % (map_name, infofile))\n        if key in result:\n            raise InternalError(\"Duplicate map entry %s in map %s file %s\" % (key, map_name, infofile))\n        result[key] = value\n    return result\n\ndef lex_me_harder(infofile, allowed_groups, allowed_maps, name_val_pairs):\n    \"\"\"\n    Generic lexer function for info.txt and src/build-data files\n    \"\"\"\n    out = LexResult()\n\n    # Format as a nameable Python variable\n    def py_var(group):\n        return group.replace(':', '_')\n\n    lexer = shlex.shlex(open(infofile, encoding='utf8'), infofile, posix=True)\n    lexer.wordchars += '=:.<>/,-!?+*' # handle various funky chars in info.txt\n\n    groups = allowed_groups + allowed_maps\n    for group in groups:\n        out.__dict__[py_var(group)] = []\n    for (key, val) in name_val_pairs.items():\n        out.__dict__[key] = val\n\n    def lexed_tokens(): # Convert to an iterator\n        while True:\n            token = lexer.get_token()\n            if token != lexer.eof:\n                yield token\n            else:\n                return\n\n    for token in lexed_tokens():\n        match = re.match('<(.*)>', token)\n\n        # Check for a grouping\n        if match is not None:\n            group = match.group(1)\n\n            if group not in groups:\n                raise LexerError('Unknown group \"%s\"' % (group),\n                                 infofile, lexer.lineno)\n\n            end_marker = '</' + group + '>'\n\n            token = lexer.get_token()\n            while token != end_marker:\n                out.__dict__[py_var(group)].append(token)\n                token = lexer.get_token()\n                if token is None:\n                    raise LexerError('Group \"%s\" not terminated' % (group),\n                                     infofile, lexer.lineno)\n\n        elif token in name_val_pairs.keys():\n            if isinstance(out.__dict__[token], list):\n                out.__dict__[token].append(lexer.get_token())\n            else:\n                out.__dict__[token] = lexer.get_token()\n\n        else: # No match -> error\n            raise LexerError('Bad token \"%s\"' % (token), infofile, lexer.lineno)\n\n    for group in allowed_maps:\n        out.__dict__[group] = parse_lex_dict(out.__dict__[group], group, infofile)\n\n    return out\n\nclass InfoObject:\n    def __init__(self, infofile):\n        \"\"\"\n        Constructor sets members `infofile`, `lives_in`, `parent_module` and `basename`\n        \"\"\"\n\n        self.infofile = infofile\n        (dirname, basename) = os.path.split(infofile)\n        self.lives_in = dirname\n        if basename == 'info.txt':\n            (next_dir, self.basename) = os.path.split(dirname)\n            self.parent_module = None\n\n            obj_dir = ''\n            while next_dir != obj_dir:\n                obj_dir = next_dir\n                if os.access(os.path.join(obj_dir, 'info.txt'), os.R_OK):\n                    self.parent_module = os.path.basename(obj_dir)\n                    break\n                (next_dir, _) = os.path.split(obj_dir)\n                if os.path.basename(next_dir) == 'src':\n                    break\n        else:\n            self.basename = basename.replace('.txt', '')\n\n\nclass ModuleInfo(InfoObject):\n    \"\"\"\n    Represents the information about a particular module\n    \"\"\"\n\n    def __init__(self, infofile):\n        super().__init__(infofile)\n        lex = lex_me_harder(\n            infofile,\n            ['header:internal', 'header:public', 'header:external', 'requires',\n             'os_features', 'arch', 'isa', 'cc', 'comment', 'warning'],\n            ['defines', 'libs', 'frameworks', 'module_info'],\n            {\n                'load_on': 'auto',\n                'endian': 'any',\n            })\n\n        def check_header_duplicates(header_list_public, header_list_internal):\n            pub_header = set(header_list_public)\n            int_header = set(header_list_internal)\n            if not pub_header.isdisjoint(int_header):\n                logging.error(\"Module %s has same header in public and internal sections\",\n                              self.infofile)\n\n        check_header_duplicates(lex.header_public, lex.header_internal)\n\n        all_source_files = []\n        all_header_files = []\n\n        for fspath in os.listdir(self.lives_in):\n            if fspath.endswith('.cpp'):\n                all_source_files.append(fspath)\n            elif fspath.endswith('.h'):\n                all_header_files.append(fspath)\n\n        self.source = all_source_files\n\n        # If not entry for the headers, all are assumed internal\n        if lex.header_internal == [] and lex.header_public == []:\n            self.header_public = []\n            self.header_internal = list(all_header_files)\n        else:\n            self.header_public = lex.header_public\n            self.header_internal = lex.header_internal\n        self.header_external = lex.header_external\n\n        def convert_lib_list(libs):\n            out = {}\n            for (os_name, lib_list) in libs.items():\n                out[os_name] = lib_list.split(',')\n            return out\n\n        def combine_lines(c):\n            return ' '.join(c) if c else None\n\n        # Convert remaining lex result to members\n        self.arch = lex.arch\n        self.cc = lex.cc\n        self.comment = combine_lines(lex.comment)\n        self._defines = lex.defines\n        self._validate_defines_content(self._defines)\n        self.frameworks = convert_lib_list(lex.frameworks)\n        self.libs = convert_lib_list(lex.libs)\n        self.load_on = lex.load_on\n        self.isa = lex.isa\n        self.os_features = lex.os_features\n        self.requires = lex.requires\n        self.warning = combine_lines(lex.warning)\n        self.endian = lex.endian\n        self._parse_module_info(lex)\n\n        # Modify members\n        self.source = [normalize_source_path(os.path.join(self.lives_in, s)) for s in self.source]\n        self.header_internal = [os.path.join(self.lives_in, s) for s in self.header_internal]\n        self.header_public = [os.path.join(self.lives_in, s) for s in self.header_public]\n        self.header_external = [os.path.join(self.lives_in, s) for s in self.header_external]\n\n        # Filesystem read access check\n        for src in self.source + self.header_internal + self.header_public + self.header_external:\n            if not os.access(src, os.R_OK):\n                logging.error(\"Missing file %s in %s\", src, infofile)\n\n        # Check for duplicates\n        def intersect_check(type_a, list_a, type_b, list_b):\n            intersection = set.intersection(set(list_a), set(list_b))\n            if intersection:\n                logging.error('Headers %s marked both %s and %s', ' '.join(intersection), type_a, type_b)\n\n        intersect_check('public', self.header_public, 'internal', self.header_internal)\n        intersect_check('public', self.header_public, 'external', self.header_external)\n        intersect_check('external', self.header_external, 'internal', self.header_internal)\n\n        # Check module type constraints\n        source_file_count = len(all_source_files) + len(all_header_files)\n        if self.is_virtual() and source_file_count > 0:\n            logging.error(\"Module '%s' is virtual but contains %d source code files\", self.basename, source_file_count)\n\n    def _parse_module_info(self, lex):\n        info = lex.module_info\n\n        if \"name\" not in info:\n            raise InternalError(\"Module '%s' does not contain a <module_info> section with at least a documentation-friendly 'name' definition\" % self.basename)\n\n        self.name = info[\"name\"]\n        self.brief = info.get(\"brief\") # possibly None\n        self.type = info.get(\"type\") or \"Public\"\n        self.lifecycle = info.get(\"lifecycle\") or \"Stable\"\n\n        if self.type not in [\"Public\", \"Internal\", \"Virtual\"]:\n            raise InternalError(\"Module '%s' has an unknown type: %s\" % (self.basename, self.type))\n        if self.lifecycle not in [\"Stable\", \"Experimental\", \"Deprecated\"]:\n            raise InternalError(\"Module '%s' has an unknown lifecycle status: %s\" % (self.basename, self.lifecycle))\n\n    @staticmethod\n    def _validate_defines_content(defines):\n        for key, value in defines.items():\n            if not re.match('^[0-9A-Za-z_]{3,30}$', key):\n                raise InternalError('Module defines key has invalid format: \"%s\"' % key)\n            if not re.match('^20[0-9]{6}$', value):\n                raise InternalError('Module defines value has invalid format: \"%s\" (should be YYYYMMDD)' % value)\n\n            year = int(value[0:4])\n            month = int(value[4:6])\n            day = int(value[6:])\n\n            if year < 2013 or month == 0 or month > 12 or day == 0 or day > 31:\n                raise InternalError('Module defines value has invalid format: \"%s\" (should be YYYYMMDD)' % value)\n\n    def cross_check(self, arch_info, cc_info, all_os_features, all_isa_extn):\n\n        for feat in set(flatten([o.split(',') for o in self.os_features])):\n            if feat not in all_os_features:\n                logging.error(\"Module %s uses an OS feature (%s) which no OS supports\", self.infofile, feat)\n\n        for supp_cc in self.cc:\n            if supp_cc not in cc_info:\n                if supp_cc.startswith('!') and supp_cc[1:] in cc_info:\n                    continue\n\n                colon_idx = supp_cc.find(':')\n                # a versioned compiler dependency\n                if colon_idx > 0 and supp_cc[0:colon_idx] in cc_info:\n                    pass\n                else:\n                    raise InternalError('Module %s mentions unknown compiler %s' % (self.infofile, supp_cc))\n\n        for supp_arch in self.arch:\n            if supp_arch not in arch_info:\n                raise InternalError('Module %s mentions unknown arch %s' % (self.infofile, supp_arch))\n\n        def known_isa(isa):\n            if isa in all_isa_extn:\n                return True\n\n            compound_isa = isa.split(':')\n            if len(compound_isa) == 2 and compound_isa[0] in arch_info and compound_isa[1] in all_isa_extn:\n                return True\n            return False\n\n        for isa in self.isa:\n            if not known_isa(isa):\n                raise InternalError('Module %s uses unknown ISA extension %s' % (self.infofile, isa))\n\n    def sources(self):\n        return self.source\n\n    def public_headers(self):\n        return self.header_public\n\n    def internal_headers(self):\n        return self.header_internal\n\n    def external_headers(self):\n        return self.header_external\n\n    def isas_needed(self, arch):\n        isas = []\n\n        for isa in self.isa:\n            if isa.find(':') == -1:\n                isas.append(isa)\n            elif isa.startswith(arch + ':'):\n                isas.append(isa[len(arch)+1:])\n\n        return isas\n\n    def defines(self):\n        return [(key + ' ' + value) for key, value in self._defines.items()]\n\n    def compatible_cpu(self, archinfo, options):\n        arch_name = archinfo.basename\n        cpu_name = options.arch\n\n        if self.endian != 'any':\n            if self.endian != options.with_endian:\n                return False\n\n        for isa in self.isa:\n            if isa.find(':') > 0:\n                (arch, isa) = isa.split(':')\n\n                if arch != arch_name:\n                    continue\n\n            if isa in options.disable_intrinsics:\n                return False # explicitly disabled\n\n            if isa not in archinfo.isa_extensions:\n                return False\n\n        if self.arch != []:\n            if arch_name not in self.arch and cpu_name not in self.arch:\n                return False\n\n        return True\n\n    def compatible_os(self, os_data, options):\n        if not self.os_features:\n            return True\n\n        def has_all(needed, provided):\n            for n in needed:\n                if n not in provided:\n                    return False\n            return True\n\n        provided_features = os_data.enabled_features(options)\n\n        for feature_set in self.os_features:\n            if has_all(feature_set.split(','), provided_features):\n                return True\n\n        return False\n\n    def compatible_compiler(self, ccinfo, cc_min_version, arch):\n        # Check if this compiler supports the flags we need\n        def supported_isa_flags(ccinfo, arch):\n            for isa in self.isa:\n                if ccinfo.isa_flags_for(isa, arch) is None:\n                    return False\n            return True\n\n        # Check if module gives explicit compiler dependencies\n        def supported_compiler(ccinfo, cc_min_version):\n            if self.cc == []:\n                # no compiler restriction\n                return True\n\n            if ccinfo.basename in self.cc:\n                # compiler is supported, independent of version\n                return True\n\n            if '!%s' % (ccinfo.basename) in self.cc:\n                # an explicit exclusion of this compiler\n                return False\n\n            # If just exclusions are given, treat as accept if we do not match\n            if all(cc.startswith('!') for cc in self.cc):\n                return True\n\n            # Maybe a versioned compiler dep\n            for cc in self.cc:\n                try:\n                    name, version = cc.split(\":\")\n                    if name == ccinfo.basename:\n                        min_cc_version = [int(v) for v in version.split('.')]\n                        cur_cc_version = [int(v) for v in cc_min_version.split('.')]\n                        # With lists of ints, this does what we want\n                        return cur_cc_version >= min_cc_version\n                except ValueError:\n                    # No version part specified\n                    pass\n\n            return False # compiler not listed\n\n        return supported_isa_flags(ccinfo, arch) and supported_compiler(ccinfo, cc_min_version)\n\n    def dependencies(self, osinfo):\n        # base is an implicit dep for all submodules\n        deps = ['base']\n        if self.parent_module is not None:\n            deps.append(self.parent_module)\n\n        for req in self.requires:\n            if req.find('?') != -1:\n                (cond, dep) = req.split('?')\n                if osinfo is None or cond in osinfo.target_features:\n                    deps.append(dep)\n            else:\n                deps.append(req)\n\n        return deps\n\n    def dependencies_exist(self, modules):\n        \"\"\"\n        Ensure that all dependencies of this module actually exist, warning\n        about any that do not\n        \"\"\"\n\n        def is_dependency_on_virtual(this_module, dependency):\n            if not dependency.is_virtual():\n                return False\n\n            if this_module.parent_module == dependency.basename:\n                return False\n\n            return True\n\n        missing = [s for s in self.dependencies(None) if s not in modules or is_dependency_on_virtual(self, modules[s])]\n\n        for modname in missing:\n            if modname not in modules:\n                logging.error(\"Module '%s', dep of '%s', does not exist\",\n                              missing, self.basename)\n            else:\n                assert modules[modname].is_virtual()\n                logging.error(\"Module '%s' is virtual and cannot be depended on by '%s'\",\n                              modname, self.basename)\n\n    def is_public(self):\n        return self.type == \"Public\"\n\n    def is_internal(self):\n        return self.type == \"Internal\"\n\n    def is_virtual(self):\n        return self.type == \"Virtual\"\n\n    def is_stable(self):\n        return self.lifecycle == \"Stable\"\n\n    def is_experimental(self):\n        return self.lifecycle == \"Experimental\"\n\n    def is_deprecated(self):\n        return self.lifecycle == \"Deprecated\"\n\nclass ModulePolicyInfo(InfoObject):\n    def __init__(self, infofile):\n        super().__init__(infofile)\n        lex = lex_me_harder(\n            infofile,\n            ['required', 'if_available', 'prohibited'],\n            [],\n            {})\n\n        self.if_available = lex.if_available\n        self.required = lex.required\n        self.prohibited = lex.prohibited\n\n    def cross_check(self, modules):\n        def check(tp, lst):\n            for mod in lst:\n                if mod not in modules:\n                    logging.error(\"Module policy %s includes non-existent module %s in <%s>\",\n                                  self.infofile, mod, tp)\n\n        check('required', self.required)\n        check('if_available', self.if_available)\n        check('prohibited', self.prohibited)\n\n\nclass ArchInfo(InfoObject):\n    def __init__(self, infofile):\n        super().__init__(infofile)\n        lex = lex_me_harder(\n            infofile,\n            ['aliases', 'isa_extensions'],\n            [],\n            {\n                'endian': None,\n                'family': None,\n                'wordsize': 32\n            })\n\n        self.aliases = lex.aliases\n        self.endian = lex.endian\n        self.family = lex.family\n        self.isa_extensions = lex.isa_extensions\n        self.wordsize = int(lex.wordsize)\n\n        if self.wordsize not in [32, 64]:\n            logging.error('Unexpected wordsize %d for arch %s', self.wordsize, infofile)\n\n        alphanumeric = re.compile('^[a-z0-9]+$')\n        for isa in self.isa_extensions:\n            if alphanumeric.match(isa) is None:\n                logging.error('Invalid name for ISA extension \"%s\"', isa)\n\n    def supported_isa_extensions(self, cc, options):\n        isas = []\n\n        for isa in self.isa_extensions:\n            if isa not in options.disable_intrinsics:\n                if cc.isa_flags_for(isa, self.basename) is not None:\n                    isas.append(isa)\n\n        return sorted(isas)\n\n\nclass CompilerInfo(InfoObject):\n    def __init__(self, infofile):\n        super().__init__(infofile)\n        lex = lex_me_harder(\n            infofile,\n            [],\n            ['cpu_flags', 'cpu_flags_no_debug', 'so_link_commands', 'binary_link_commands',\n             'mach_abi_linking', 'isa_flags', 'sanitizers', 'lib_flags', 'ct_value_barrier'],\n            {\n                'binary_name': None,\n                'linker_name': None,\n                'macro_name': None,\n                'minimum_supported_version': None,\n                'output_to_object': '-o ',\n                'output_to_exe': '-o ',\n                'add_include_dir_option': '-I',\n                'add_system_include_dir_option': '-I',\n                'add_lib_dir_option': '-L',\n                'add_compile_definition_option': '-D',\n                'add_sysroot_option': '',\n                'add_lib_option': '-l%s',\n                'add_framework_option': '-framework ',\n                'preproc_flags': '-E',\n                'compile_flags': '-c',\n                'debug_info_flags': '-g',\n                'optimization_flags': '',\n                'size_optimization_flags': '',\n                'sanitizer_optimization_flags': '',\n                'coverage_flags': '',\n                'stack_protector_flags': '',\n                'shared_flags': '',\n                'lang_flags': '',\n                'lang_binary_linker_flags': '',\n                'warning_flags': '',\n                'maintainer_warning_flags': '',\n                'visibility_build_flags': '',\n                'visibility_attribute': '',\n                'ar_command': '',\n                'ar_options': '',\n                'ar_output_to': '',\n                'werror_flags': '',\n                'supports_gcc_inline_asm': 'no',\n                'ninja_header_deps_style': '',\n                'header_deps_flag': '',\n                'header_deps_out': '',\n            })\n\n        self.add_framework_option = lex.add_framework_option\n        self.add_include_dir_option = lex.add_include_dir_option\n        self.add_system_include_dir_option = lex.add_system_include_dir_option\n        self.add_lib_dir_option = lex.add_lib_dir_option\n        self.add_lib_option = lex.add_lib_option\n        self.add_compile_definition_option = lex.add_compile_definition_option\n        self.add_sysroot_option = lex.add_sysroot_option\n        self.ar_command = lex.ar_command\n        self.ar_options = lex.ar_options\n        self.ar_output_to = lex.ar_output_to\n        self.binary_link_commands = lex.binary_link_commands\n        self.binary_name = lex.binary_name\n        self.cpu_flags = lex.cpu_flags\n        self.cpu_flags_no_debug = lex.cpu_flags_no_debug\n        self.compile_flags = lex.compile_flags\n        self.coverage_flags = lex.coverage_flags\n        self.debug_info_flags = lex.debug_info_flags\n        self.isa_flags = lex.isa_flags\n        self.lang_flags = lex.lang_flags\n        self.lang_binary_linker_flags = lex.lang_binary_linker_flags\n        self.lib_flags = lex.lib_flags\n        self.linker_name = lex.linker_name\n        self.mach_abi_linking = lex.mach_abi_linking\n        self.macro_name = lex.macro_name\n        self.maintainer_warning_flags = lex.maintainer_warning_flags\n        self.optimization_flags = lex.optimization_flags\n        self.output_to_exe = lex.output_to_exe\n        self.output_to_object = lex.output_to_object\n        self.preproc_flags = lex.preproc_flags\n        self.sanitizers = lex.sanitizers\n        self.sanitizer_types = []\n        self.sanitizer_optimization_flags = lex.sanitizer_optimization_flags\n        self.shared_flags = lex.shared_flags\n        self.size_optimization_flags = lex.size_optimization_flags\n        self.so_link_commands = lex.so_link_commands\n        self.stack_protector_flags = lex.stack_protector_flags\n        self.supports_gcc_inline_asm = lex.supports_gcc_inline_asm == 'yes'\n        self.visibility_attribute = lex.visibility_attribute\n        self.visibility_build_flags = lex.visibility_build_flags\n        self.warning_flags = lex.warning_flags\n        self.werror_flags = lex.werror_flags\n        self.minimum_supported_version = lex.minimum_supported_version\n        self.ninja_header_deps_style = lex.ninja_header_deps_style\n        self.header_deps_flag = lex.header_deps_flag\n        self.header_deps_out = lex.header_deps_out\n        self.ct_value_barrier = lex.ct_value_barrier\n\n    def cross_check(self, os_info, arch_info, all_isas):\n\n        for isa in self.isa_flags:\n            if \":\" in isa:\n                (arch, isa) = isa.split(\":\")\n                if isa not in all_isas:\n                    raise InternalError('Compiler %s has flags for unknown ISA %s' % (self.infofile, isa))\n                if arch not in arch_info:\n                    raise InternalError('Compiler %s has flags for unknown arch/ISA %s:%s' % (self.infofile, arch, isa))\n\n        for os_name in self.binary_link_commands:\n            if os_name in [\"default\", \"default-debug\"]:\n                continue\n            if os_name not in os_info:\n                raise InternalError(\"Compiler %s has binary_link_command for unknown OS %s\" % (self.infofile, os_name))\n\n        for os_name in self.so_link_commands:\n            if os_name in [\"default\", \"default-debug\"]:\n                continue\n            if os_name not in os_info:\n                raise InternalError(\"Compiler %s has so_link_command for unknown OS %s\" % (self.infofile, os_name))\n\n    def isa_flags_for(self, isa, arch):\n        if isa.find(':') > 0:\n            (isa_arch, isa) = isa.split(':')\n            if isa_arch != arch:\n                return ''\n            if isa in self.isa_flags:\n                return self.isa_flags[isa]\n\n        if isa in self.isa_flags:\n            return self.isa_flags[isa]\n        arch_isa = '%s:%s' % (arch, isa)\n        if arch_isa in self.isa_flags:\n            return self.isa_flags[arch_isa]\n\n        return None\n\n    def get_isa_specific_flags(self, isas, arch, options):\n        flags = set()\n\n        def simd32_impl():\n            for simd_isa in ['sse2', 'altivec', 'neon']:\n                if simd_isa in arch.isa_extensions and \\\n                   simd_isa not in options.disable_intrinsics and \\\n                   self.isa_flags_for(simd_isa, arch.basename):\n                    return simd_isa\n            return None\n\n        for isa in isas:\n\n            if isa == 'simd':\n                isa = simd32_impl()\n\n                if isa is None:\n                    continue\n\n            flagset = self.isa_flags_for(isa, arch.basename)\n            if flagset is None:\n                raise UserError('Compiler %s does not support %s' % (self.basename, isa))\n            flags.add(flagset)\n\n        return \" \".join(sorted(flags))\n\n    def gen_lib_flags(self, options, variables):\n        \"\"\"\n        Return any flags specific to building the library\n        (vs the cli or tests)\n        \"\"\"\n\n        def flag_builder():\n            if options.build_shared_lib:\n                yield self.shared_flags\n                yield self.visibility_build_flags\n\n            if 'debug' in self.lib_flags and options.with_debug_info:\n                yield process_template_string(self.lib_flags['debug'], variables, self.infofile)\n\n\n        return ' '.join(list(flag_builder()))\n\n    def gen_visibility_attribute(self, options):\n        if options.build_shared_lib:\n            return self.visibility_attribute\n        return ''\n\n    def ct_value_barrier_type(self, options):\n        if options.ct_value_barrier_type:\n            if options.ct_value_barrier_type == 'asm' and not self.supports_gcc_inline_asm:\n                raise UserError('Invalid setting for --ct-value-barrier-type: the requested compiler does not support GCC inline asm')\n            return options.ct_value_barrier_type\n\n        if 'memory' in self.sanitizer_types:\n            return None\n\n        if self.ct_value_barrier:\n            for pref in [options.arch, 'default']:\n                if pref in self.ct_value_barrier:\n                    x = self.ct_value_barrier[pref]\n                    if x == 'asm' and not options.enable_asm:\n                        return None\n                    if x == 'none':\n                        return None\n                    return x\n\n        return None\n\n    def mach_abi_link_flags(self, options, debug_mode=None):\n\n        \"\"\"\n        Return the machine specific ABI flags\n        \"\"\"\n\n        if debug_mode is None:\n            debug_mode = options.debug_mode\n\n        def mach_abi_groups():\n\n            yield 'all'\n\n            if options.msvc_runtime is None:\n                if debug_mode:\n                    yield 'rt-debug'\n                else:\n                    yield 'rt'\n\n            for all_except in [s for s in self.mach_abi_linking.keys() if s.startswith('all!')]:\n                exceptions = all_except[4:].split(',')\n                if options.os not in exceptions and options.arch not in exceptions:\n                    yield all_except\n\n            yield options.os\n            yield options.arch\n\n        abi_link = set()\n        for what in mach_abi_groups():\n            if what in self.mach_abi_linking:\n                flag = self.mach_abi_linking.get(what)\n                if flag is not None and flag != '' and flag not in abi_link:\n                    abi_link.add(flag)\n\n        if options.msvc_runtime:\n            abi_link.add(\"/\" + options.msvc_runtime)\n\n        if options.with_stack_protector and self.stack_protector_flags != '':\n            abi_link.add(self.stack_protector_flags)\n\n        if options.with_coverage_info:\n            if self.coverage_flags == '':\n                raise UserError('No coverage handling for %s' % (self.basename))\n            abi_link.add(self.coverage_flags)\n\n        if options.with_sanitizers or options.enable_sanitizers != '':\n            if not self.sanitizers:\n                raise UserError('No sanitizer handling for %s' % (self.basename))\n\n            default_san = self.sanitizers['default'].split(',')\n\n            if options.enable_sanitizers:\n                san = options.enable_sanitizers.split(',')\n            else:\n                san = default_san\n\n            for s in san:\n                if s not in self.sanitizers:\n                    raise UserError('No flags defined for sanitizer %s in %s' % (s, self.basename))\n\n                if s == 'default':\n                    abi_link.update([self.sanitizers[x] for x in default_san])\n                else:\n                    abi_link.add(self.sanitizers[s])\n\n            self.sanitizer_types = san\n\n        abi_flags = ' '.join(sorted(abi_link))\n\n        if options.cc_abi_flags != '':\n            abi_flags += ' ' + options.cc_abi_flags\n\n        return abi_flags\n\n    def cc_warning_flags(self, options):\n        def gen_flags():\n            yield self.warning_flags\n            if options.werror_mode or options.maintainer_mode:\n                yield self.werror_flags\n            if options.maintainer_mode:\n                yield self.maintainer_warning_flags\n\n        return (' '.join(gen_flags())).strip()\n\n    def cc_lang_flags(self):\n        return self.lang_flags\n\n    def cc_lang_binary_linker_flags(self):\n        return self.lang_binary_linker_flags\n\n    def ldflags(self, options):\n        if options.ldflags:\n            yield options.ldflags\n\n        if options.lto_cxxflags_to_ldflags:\n            yield from self.cc_compile_flags(options)\n\n    def cc_compile_flags(self, options):\n        sanitizers_enabled = options.with_sanitizers or (len(options.enable_sanitizers) > 0)\n\n        if options.cxxflags:\n            # CXXFLAGS is assumed to be the entire set of desired compilation flags\n            # if not the case the user should have used --extra-cxxflags\n            yield options.cxxflags\n            return\n\n        if options.with_debug_info:\n            yield self.debug_info_flags\n\n        if not options.no_optimizations:\n            if options.optimize_for_size:\n                if self.size_optimization_flags != '':\n                    yield self.size_optimization_flags\n                else:\n                    logging.warning(\"No size optimization flags set for current compiler\")\n                    yield self.optimization_flags\n            elif sanitizers_enabled and self.sanitizer_optimization_flags != '':\n                yield self.sanitizer_optimization_flags\n            else:\n                yield self.optimization_flags\n\n        if options.arch in self.cpu_flags:\n            yield self.cpu_flags[options.arch]\n\n        if options.arch in self.cpu_flags_no_debug:\n            # Only enable these if no debug/sanitizer options enabled\n            if not (options.debug_mode or sanitizers_enabled):\n                yield self.cpu_flags_no_debug[options.arch]\n\n        for flag in options.extra_cxxflags:\n            yield flag\n\n        for definition in options.define_build_macro:\n            yield self.add_compile_definition_option + definition\n\n    @staticmethod\n    def _so_link_search(osname, debug_info):\n        so_link_typ = [osname, 'default']\n        if debug_info:\n            so_link_typ = [l + '-debug' for l in so_link_typ] + so_link_typ\n        return so_link_typ\n\n    def so_link_command_for(self, osname, options):\n        \"\"\"\n        Return the command needed to link a shared object\n        \"\"\"\n\n        for s in self._so_link_search(osname, options.with_debug_info):\n            if s in self.so_link_commands:\n                return self.so_link_commands[s]\n\n        raise InternalError(\n            \"No shared library link command found for target '%s' in compiler settings '%s'\" %\n            (osname, self.infofile))\n\n    def binary_link_command_for(self, osname, options):\n        \"\"\"\n        Return the command needed to link an app/test object\n        \"\"\"\n\n        for s in self._so_link_search(osname, options.with_debug_info):\n            if s in self.binary_link_commands:\n                return self.binary_link_commands[s]\n\n        return '{linker}'\n\nclass OsInfo(InfoObject):\n    def __init__(self, infofile):\n        super().__init__(infofile)\n        lex = lex_me_harder(\n            infofile,\n            ['aliases', 'target_features', 'feature_macros'],\n            [],\n            {\n                'program_suffix': '',\n                'obj_suffix': 'o',\n                'soname_suffix': '',\n                'soname_pattern_patch': '',\n                'soname_pattern_abi': '',\n                'soname_pattern_base': '',\n                'static_suffix': 'a',\n                'ar_command': 'ar',\n                'ar_options': '',\n                'ar_output_to': '',\n                'install_root': '/usr/local',\n                'header_dir': 'include',\n                'bin_dir': 'bin',\n                'lib_dir': 'lib',\n                'doc_dir': 'share/doc',\n                'man_dir': 'share/man',\n                'use_stack_protector': 'true',\n                'cli_exe_name': 'botan',\n                'lib_prefix': 'lib',\n                'library_name': 'botan-{major}{suffix}',\n                'shared_lib_symlinks': 'yes',\n                'default_compiler': 'gcc',\n                'uses_pkg_config': 'yes',\n            })\n\n        if lex.ar_command == 'ar' and lex.ar_options == '':\n            lex.ar_options = 'crs'\n\n        if lex.soname_pattern_base:\n            self.soname_pattern_base = lex.soname_pattern_base\n            if lex.soname_pattern_patch == '' and lex.soname_pattern_abi == '':\n                self.soname_pattern_patch = lex.soname_pattern_base\n                self.soname_pattern_abi = lex.soname_pattern_base\n            elif lex.soname_pattern_patch != '' and lex.soname_pattern_abi != '':\n                self.soname_pattern_patch = lex.soname_pattern_patch\n                self.soname_pattern_abi = lex.soname_pattern_abi\n            else:\n                # base set, only one of patch/abi set\n                raise InternalError(\"Invalid soname_patterns in %s\" % (self.infofile))\n        else:\n            if lex.soname_suffix:\n                self.soname_pattern_base = \"{lib_prefix}{libname}.%s\" % (lex.soname_suffix)\n                self.soname_pattern_abi = self.soname_pattern_base + \".{abi_rev}\"\n                self.soname_pattern_patch = self.soname_pattern_abi + \".{version_minor}.{version_patch}\"\n            else:\n                # Could not calculate soname_pattern_*\n                # This happens for OSs without shared library support (e.g. nacl, mingw, includeos, cygwin)\n                self.soname_pattern_base = None\n                self.soname_pattern_abi = None\n                self.soname_pattern_patch = None\n\n        self._aliases = lex.aliases\n        self.ar_command = lex.ar_command\n        self.ar_options = lex.ar_options\n        self.bin_dir = lex.bin_dir\n        self.cli_exe_name = lex.cli_exe_name\n        self.doc_dir = lex.doc_dir\n        self.header_dir = lex.header_dir\n        self.install_root = lex.install_root\n        self.lib_dir = lex.lib_dir\n        self.lib_prefix = lex.lib_prefix\n        self.library_name = lex.library_name\n        self.man_dir = lex.man_dir\n        self.obj_suffix = lex.obj_suffix\n        self.program_suffix = lex.program_suffix\n        self.static_suffix = lex.static_suffix\n        self.target_features = lex.target_features\n        self.use_stack_protector = lex.use_stack_protector == \"true\"\n        self.shared_lib_uses_symlinks = lex.shared_lib_symlinks == 'yes'\n        self.default_compiler = lex.default_compiler\n        self.uses_pkg_config = lex.uses_pkg_config == 'yes'\n        self.feature_macros = lex.feature_macros\n\n        self._validate_os_features(self.target_features, infofile)\n\n    @staticmethod\n    def _validate_os_features(features, infofile):\n        feature_re = re.compile('^[a-z][a-z0-9_]*[a-z0-9]$')\n        for feature in features:\n            if not feature_re.match(feature):\n                logging.error(\"Invalid OS feature %s in %s\", feature, infofile)\n\n    def matches_name(self, nm):\n        if nm in self._aliases:\n            return True\n\n        for alias in self._aliases:\n            if re.match(alias, nm):\n                return True\n        return False\n\n    def building_shared_supported(self):\n        return self.soname_pattern_base is not None\n\n    def enabled_features(self, options):\n        feats = []\n        for feat in self.target_features:\n            if feat not in options.without_os_features:\n                feats.append(feat)\n        for feat in options.with_os_features:\n            if feat not in self.target_features:\n                feats.append(feat)\n\n        return sorted(feats)\n\n    def macros(self, cc):\n        value = [cc.add_compile_definition_option + define\n                 for define in self.feature_macros]\n\n        return ' '.join(value)\n\ndef fixup_proc_name(proc):\n    proc = proc.lower().replace(' ', '')\n    for junk in ['(tm)', '(r)']:\n        proc = proc.replace(junk, '')\n    return proc\n\ndef canon_processor(archinfo, proc):\n    proc = fixup_proc_name(proc)\n\n    # First, try to search for an exact match\n    for ainfo in archinfo.values():\n        if ainfo.basename == proc or proc in ainfo.aliases:\n            return ainfo.basename\n\n    return None\n\ndef system_cpu_info():\n\n    cpu_info = []\n\n    if platform.machine() != '':\n        cpu_info.append(platform.machine())\n\n    if platform.processor() != '':\n        cpu_info.append(platform.processor())\n\n    if 'uname' in os.__dict__:\n        cpu_info.append(os.uname()[4])\n\n    return cpu_info\n\ndef guess_processor(archinfo):\n    for info_part in system_cpu_info():\n        if info_part:\n            match = canon_processor(archinfo, info_part)\n            if match is not None:\n                logging.debug(\"Matched '%s' to processor '%s'\", info_part, match)\n                return match, info_part\n            else:\n                logging.debug(\"Failed to deduce CPU from '%s'\", info_part)\n\n    raise UserError('Could not determine target CPU; set with --cpu')\n\n\ndef read_textfile(filepath):\n    \"\"\"\n    Read a whole file into memory as a string\n    \"\"\"\n    if filepath is None:\n        return ''\n\n    with open(filepath, encoding='utf8') as f:\n        return ''.join(f.readlines())\n\n\ndef process_template_string(template_text, variables, template_source):\n    \"\"\"\n    Perform template substitution\n\n    The template language supports (un-nested) conditionals.\n    \"\"\"\n    class SimpleTemplate:\n\n        def __init__(self, vals):\n            self.vals = vals\n            self.value_pattern = re.compile(r'%{([a-z][a-z_0-9\\|]+)(?::([^}]+))?}')\n            self.cond_pattern = re.compile('%{(if|unless) ([a-z][a-z_0-9]+)}')\n            self.for_pattern = re.compile('(.*)%{for ([a-z][a-z_0-9]+)}')\n            self.omitlast_pattern = re.compile('(.*)%{omitlast ([^}]*)}(.*)', re.DOTALL)\n            self.join_pattern = re.compile('%{join ([a-z][a-z_0-9]+)}')\n\n        def substitute(self, template):\n            def get_replacement(k):\n                if k not in self.vals:\n                    raise KeyError(k)\n                return str(self.vals.get(k))\n\n            def insert_value(match):\n                k = match.group(1)\n                if k.endswith('|upper'):\n                    k = k.replace('|upper', '')\n                    v = get_replacement(k).upper()\n                elif k.endswith('|concat'):\n                    k = k.replace('|concat', '')\n                    if not match.group(2):\n                        raise InternalError(\"|concat must be of the form '%{val|concat:<some static value>}'\")\n                    v = get_replacement(k)\n                    if v:\n                        v = f\"{v}{match.group(2)}\"\n                else:\n                    v = get_replacement(k)\n\n                return v\n\n            def insert_join(match):\n                var = match.group(1)\n                if var in self.vals:\n                    return ' '.join(self.vals.get(var))\n                raise KeyError(var)\n\n            lines = template.splitlines()\n\n            output = \"\"\n            idx = 0\n\n            while idx < len(lines):\n                cond_match = self.cond_pattern.match(lines[idx])\n                for_match = self.for_pattern.match(lines[idx])\n\n                if cond_match:\n                    cond_type = cond_match.group(1)\n                    cond_var = cond_match.group(2)\n\n                    include_cond = False\n\n                    if cond_type == 'if' and cond_var in self.vals and self.vals.get(cond_var):\n                        include_cond = True\n                    elif cond_type == 'unless' and (cond_var not in self.vals or (not self.vals.get(cond_var))):\n                        include_cond = True\n\n                    idx += 1\n                    while idx < len(lines):\n                        if lines[idx] == '%{endif}':\n                            break\n                        if include_cond:\n                            output += lines[idx] + \"\\n\"\n                        idx += 1\n                elif for_match:\n                    for_prefix = for_match.group(1)\n                    output += for_prefix\n                    for_var = for_match.group(2)\n\n                    if for_var not in self.vals:\n                        raise InternalError(\"Unknown for loop iteration variable '%s'\" % (for_var))\n\n                    var = self.vals[for_var]\n                    if not isinstance(var, list):\n                        raise InternalError(\"For loop iteration variable '%s' is not a list\" % (for_var))\n                    idx += 1\n\n                    for_body = \"\"\n                    while idx < len(lines):\n                        if lines[idx] == '%{endfor}':\n                            break\n                        for_body += lines[idx] + \"\\n\"\n                        idx += 1\n\n                    for i, v in enumerate(var):\n                        if isinstance(v, dict):\n                            for_val = for_body\n                            for ik, iv in v.items():\n                                for_val = for_val.replace('%{' + ik + '}', iv)\n                            output += for_val + \"\\n\"\n                        else:\n                            output += for_body.replace('%{i}', v).replace('%{i|upper}', v.upper())\n\n                        omitlast_match = self.omitlast_pattern.match(output)\n                        if omitlast_match:\n                            output = omitlast_match.group(1)\n                            if i + 1 < len(var):\n                                output += omitlast_match.group(2)\n                            output += omitlast_match.group(3)\n\n                    output += \"\\n\"\n                else:\n                    output += lines[idx] + \"\\n\"\n                idx += 1\n\n            output = self.join_pattern.sub(insert_join, self.value_pattern.sub(insert_value, output))\n\n            # Prevent newlines being added if the template was not a multiline string\n            if len(lines) == 1 and not template.endswith('\\n'):\n                return output.rstrip('\\n')\n\n            return output\n\n    try:\n        return SimpleTemplate(variables).substitute(template_text)\n    except KeyError as ex:\n        logging.error('Unbound var %s in template %s', ex, template_source)\n    except Exception as ex:\n        logging.error('Exception %s during template processing file %s', ex, template_source)\n\ndef process_template(template_file, variables):\n    return process_template_string(read_textfile(template_file), variables, template_file)\n\ndef yield_objectfile_list(sources, obj_dir, obj_suffix, options):\n    obj_suffix = '.' + obj_suffix\n\n    for src in sources:\n        (directory, filename) = os.path.split(os.path.normpath(src))\n        parts_in_src = directory.split('src' + os.sep)\n        parts = []\n\n        if len(parts_in_src) > 1:\n            parts = (parts_in_src[-1].split(os.sep))[1:]\n        elif not options.amalgamation or filename.find(options.name_amalgamation) == -1:\n            raise InternalError(\"Unexpected file '%s/%s'\" % (directory, filename))\n\n        if parts != []:\n            # Handle src/X/X.cpp -> X.o\n            if filename == parts[-1] + '.cpp':\n                name = '_'.join(parts) + '.cpp'\n            else:\n                name = '_'.join(parts) + '_' + filename\n\n            def fixup_obj_name(name):\n                def remove_dups(parts):\n                    last = None\n                    for part in parts:\n                        if last is None or part != last:\n                            last = part\n                            yield part\n\n                return '_'.join(remove_dups(name.split('_')))\n\n            name = fixup_obj_name(name)\n        else:\n            name = filename\n\n        name = name.replace('.cpp', obj_suffix)\n        yield normalize_source_path(os.path.join(obj_dir, name))\n\ndef generate_build_info(build_paths, modules, cc, arch, osinfo, options):\n    # first create a map of src_file->owning module\n\n    module_that_owns = {}\n\n    for mod in modules:\n        for src in mod.sources():\n            module_that_owns[src] = mod\n\n    def _isa_specific_flags(src):\n        if os.path.basename(src) == 'test_simd.cpp':\n            return cc.get_isa_specific_flags(['simd'], arch, options)\n\n        if src in module_that_owns:\n            module = module_that_owns[src]\n            isas = module.isas_needed(arch.basename)\n            if 'simd' in module.dependencies(osinfo):\n                isas.append('simd')\n\n            return cc.get_isa_specific_flags(isas, arch, options)\n\n        return ''\n\n    def _build_info(sources, objects, target_type):\n        output = []\n        for (obj_file, src) in zip(objects, sources):\n            info = {\n                'src': src,\n                'obj': obj_file,\n                'isa_flags': _isa_specific_flags(src)\n                }\n\n            if target_type in ['fuzzer', 'examples']:\n                exe_basename = os.path.basename(obj_file).replace('.' + osinfo.obj_suffix, osinfo.program_suffix)\n                info['exe_basename'] = exe_basename\n\n                if target_type == 'fuzzer':\n                    info['exe'] = os.path.join(build_paths.fuzzer_output_dir, exe_basename)\n                else:\n                    info['exe'] = os.path.join(build_paths.example_output_dir, exe_basename)\n\n            output.append(info)\n\n        return output\n\n    out = {}\n\n    targets = ['lib', 'cli', 'test', 'fuzzer', 'examples']\n\n    out['isa_build_info'] = []\n\n    fuzzer_bin = []\n    example_bin = []\n\n    for t in targets:\n        src_list, src_dir = build_paths.src_info(t)\n\n        src_key = '%s_srcs' % (t)\n        obj_key = '%s_objs' % (t)\n        build_key = '%s_build_info' % (t)\n\n        objects = []\n        build_info = []\n\n        if src_list is not None:\n            src_list.sort()\n            objects = list(yield_objectfile_list(src_list, src_dir, osinfo.obj_suffix, options))\n            build_info = _build_info(src_list, objects, t)\n\n            for b in build_info:\n                if b['isa_flags'] != '':\n                    out['isa_build_info'].append(b)\n\n            if t == 'fuzzer':\n                fuzzer_bin = [b['exe'] for b in build_info]\n            elif t == 'examples':\n                example_bin = [b['exe'] for b in build_info]\n\n        out[src_key] = src_list if src_list else []\n        out[obj_key] = objects\n        out[build_key] = build_info\n\n    out['fuzzer_bin'] = ' '.join(fuzzer_bin)\n    out['example_bin'] = ' '.join(example_bin)\n    out['cli_headers'] = build_paths.cli_headers\n\n    return out\n\ndef create_template_vars(source_paths, build_paths, options, modules, disabled_modules, cc, arch, osinfo):\n    \"\"\"\n    Create the template variables needed to process the makefile, build.h, etc\n    \"\"\"\n\n    def external_link_cmd():\n        return ' '.join([cc.add_lib_dir_option + libdir for libdir in options.with_external_libdir])\n\n    def link_to(module_member_name):\n        \"\"\"\n        Figure out what external libraries/frameworks are needed based on selected modules\n        \"\"\"\n        if module_member_name not in ['libs', 'frameworks']:\n            raise InternalError(\"Invalid argument\")\n\n        libs = set()\n        for module in modules:\n            for (osname, module_link_to) in getattr(module, module_member_name).items():\n                if osname in ['all', osinfo.basename]:\n                    libs |= set(module_link_to)\n                else:\n                    match = re.match('^all!(.*)', osname)\n                    if match is not None:\n                        exceptions = match.group(1).split(',')\n                        if osinfo.basename not in exceptions:\n                            libs |= set(module_link_to)\n\n        return sorted(libs)\n\n    def choose_mp_bits():\n        mp_bits = arch.wordsize # allow command line override?\n        logging.debug('Using MP bits %d', mp_bits)\n        return mp_bits\n\n    def configure_command_line():\n        # Cut absolute path from main executable (e.g. configure.py or python interpreter)\n        # to get the same result when configuring the same thing on different machines\n        main_executable = os.path.basename(sys.argv[0])\n        quoted_args = [arg if ' ' not in arg else '\\'' + arg + '\\'' for arg in sys.argv[1:]]\n        return ' '.join([main_executable] + quoted_args)\n\n    def sysroot_option():\n        if options.with_sysroot_dir == '':\n            return ''\n        if cc.add_sysroot_option == '':\n            logging.error(\"This compiler doesn't support --sysroot option\")\n        return cc.add_sysroot_option + options.with_sysroot_dir\n\n    def ar_command():\n        if options.ar_command:\n            return options.ar_command\n\n        if cc.ar_command:\n            if cc.ar_command == cc.binary_name:\n                return options.compiler_binary or cc.binary_name\n            else:\n                return cc.ar_command\n\n        return osinfo.ar_command\n\n    build_dir = options.with_build_dir or os.path.curdir\n    program_suffix = options.program_suffix or osinfo.program_suffix\n\n    def join_with_build_dir(path):\n        # jom (and mingw32-make) seem to string-compare Makefile targets and\n        # requirements. For them, `./botan.lib` is NOT equal to `botan.lib` or\n        # `C:\\botan\\botan-test.exe` is NOT equal to `C:\\botan/botan-test.exe`\n        #\n        # `normalize_source_path` will \"fix\" the path slashes but remove\n        # a redundant `./` for the \"trivial\" relative path.\n        normalized = normalize_source_path(os.path.join(build_dir, path))\n        if build_dir == '.':\n            normalized = './%s' % normalized\n        return normalized\n\n    def all_targets(options):\n        yield 'libs'\n        if options.with_documentation:\n            yield 'docs'\n        if 'cli' in options.build_targets:\n            yield 'cli'\n        if 'tests' in options.build_targets:\n            yield 'tests'\n        if options.build_fuzzers:\n            yield 'fuzzers'\n        if 'bogo_shim' in options.build_targets:\n            yield 'bogo_shim'\n        if 'examples' in options.build_targets:\n            yield 'examples'\n        if 'ct_selftest' in options.build_targets:\n            yield 'ct_selftest'\n\n    def install_targets(options):\n        yield 'libs'\n        if 'cli' in options.build_targets:\n            yield 'cli'\n        if options.with_documentation:\n            yield 'docs'\n\n    def absolute_install_dir(p):\n        if os.path.isabs(p):\n            return p\n        return os.path.join(options.prefix or osinfo.install_root, p)\n\n    def choose_python_exe():\n        return normalize_source_path(sys.executable)\n\n    def choose_cxx_exe(with_compiler_cache = False):\n        cxx = options.compiler_binary or cc.binary_name\n\n        if options.compiler_cache is None or with_compiler_cache is False:\n            return cxx\n        else:\n            return '%s %s' % (normalize_source_path(options.compiler_cache), cxx)\n\n    def extra_libs(libs, cc):\n        if libs is None:\n            return ''\n\n        return ' '.join([(cc.add_lib_option % lib) for lib in libs.split(',') if lib != ''])\n\n    def test_exe_extra_ldflags():\n        if osinfo.matches_name(\"emscripten\"):\n            return '--preload-file=%s@src/tests/data' % source_paths.test_data_dir\n\n        return ''\n\n    variables = {\n        'version_major':  Version.major(),\n        'version_minor':  Version.minor(),\n        'version_patch':  Version.patch(),\n        'version_suffix': Version.suffix(),\n        'version_vc_rev': 'unknown' if options.no_store_vc_rev else Version.vc_rev(),\n        'abi_rev':        Version.so_rev(),\n\n        'version':        Version.as_string(),\n        'release_type':   Version.release_type(),\n        'version_datestamp': Version.datestamp(),\n\n        'distribution_info': options.distribution_info,\n\n        'macos_so_compat_ver': '%s.%s.0' % (Version.packed(), Version.so_rev()),\n        'macos_so_current_ver': '%s.%s.%s' % (Version.packed(), Version.so_rev(), Version.patch()),\n\n        'all_targets': ' '.join(all_targets(options)),\n        'install_targets': ' '.join(install_targets(options)),\n\n        'public_headers': sorted([os.path.basename(h) for h in build_paths.public_headers]),\n        'internal_headers': sorted([os.path.basename(h) for h in build_paths.internal_headers]),\n        'external_headers':  sorted([os.path.basename(h) for h in build_paths.external_headers]),\n\n        'abs_root_dir': normalize_source_path(os.path.dirname(os.path.realpath(__file__))),\n\n        'base_dir': source_paths.base_dir,\n        'src_dir': source_paths.src_dir,\n        'test_data_dir': source_paths.test_data_dir,\n        'doc_dir': source_paths.doc_dir,\n        'scripts_dir': normalize_source_path(source_paths.scripts_dir),\n        'python_dir': source_paths.python_dir,\n\n        'cli_exe_name': osinfo.cli_exe_name + program_suffix,\n        'cli_exe': join_with_build_dir(osinfo.cli_exe_name + program_suffix),\n        'build_cli_exe': bool('cli' in options.build_targets),\n        'test_exe': join_with_build_dir('botan-test' + program_suffix),\n\n        'lib_prefix': osinfo.lib_prefix,\n        'static_suffix': osinfo.static_suffix,\n        'lib_suffix': options.library_suffix,\n        'libname': osinfo.library_name.format(major=Version.major(),\n                                              minor=Version.minor(),\n                                              suffix=options.library_suffix),\n\n        'command_line': configure_command_line(),\n        'local_config': read_textfile(options.local_config),\n\n        'program_suffix': program_suffix,\n\n        'prefix': options.prefix or osinfo.install_root,\n        'bindir': absolute_install_dir(options.bindir or osinfo.bin_dir),\n        'libdir': absolute_install_dir(options.libdir or osinfo.lib_dir),\n        'mandir': options.mandir or osinfo.man_dir,\n        'includedir': options.includedir or osinfo.header_dir,\n        'docdir': options.docdir or osinfo.doc_dir,\n\n        'with_documentation': options.with_documentation,\n        'with_sphinx': options.with_sphinx,\n        'with_pdf': options.with_pdf,\n        'with_rst2man': options.with_rst2man,\n        'sphinx_config_dir': source_paths.sphinx_config_dir,\n        'with_doxygen': options.with_doxygen,\n        'maintainer_mode': options.maintainer_mode,\n\n        'out_dir': normalize_source_path(build_dir),\n        'build_dir': normalize_source_path(build_paths.build_dir),\n        'module_info_dir': build_paths.doc_module_info,\n\n        'doc_stamp_file': normalize_source_path(os.path.join(build_paths.build_dir, 'doc.stamp')),\n        'makefile_path': os.path.join(build_paths.build_dir, '..', 'Makefile'),\n        'ninja_build_path': os.path.join(build_paths.build_dir, '..', 'build.ninja'),\n\n        'build_static_lib': options.build_static_lib,\n        'build_shared_lib': options.build_shared_lib,\n\n        'build_fuzzers': options.build_fuzzers,\n        'build_examples': 'examples' in options.build_targets,\n\n        'build_coverage' : options.with_coverage_info,\n\n        'symlink_shared_lib': options.build_shared_lib and osinfo.shared_lib_uses_symlinks,\n\n        'libobj_dir': build_paths.libobj_dir,\n        'cliobj_dir': build_paths.cliobj_dir,\n        'testobj_dir': build_paths.testobj_dir,\n        'fuzzobj_dir': build_paths.fuzzobj_dir,\n\n        'fuzzer_output_dir': build_paths.fuzzer_output_dir if build_paths.fuzzer_output_dir else '',\n        'doc_output_dir': build_paths.doc_output_dir,\n        'handbook_output_dir': build_paths.handbook_output_dir,\n        'doc_output_dir_doxygen': build_paths.doc_output_dir_doxygen,\n        'response_file_dir': build_paths.response_file_dir,\n\n        'os': options.os,\n        'arch': options.arch,\n        'compiler': options.compiler,\n        'cpu_family': arch.family,\n        'endian': options.with_endian,\n        'cpu_is_64bit': arch.wordsize == 64,\n\n        'mp_bits': choose_mp_bits(),\n\n        'python_exe': choose_python_exe(),\n        'python_version': options.python_version,\n        'install_python_module': not options.no_install_python_module,\n\n        'cxx': choose_cxx_exe(True),\n        'cxx_abi_flags': cc.mach_abi_link_flags(options),\n        'linker': cc.linker_name or choose_cxx_exe(),\n        'make_supports_phony': osinfo.basename != 'windows',\n\n        'cxx_supports_gcc_inline_asm': cc.supports_gcc_inline_asm and options.enable_asm,\n\n        'cxx_ct_value_barrier_type': cc.ct_value_barrier_type(options),\n\n        'sanitizer_types' : sorted(cc.sanitizer_types),\n\n        'dash_o': cc.output_to_object,\n        'dash_c': cc.compile_flags,\n\n        'cc_lang_flags': cc.cc_lang_flags(),\n        'cc_lang_binary_linker_flags': cc.cc_lang_binary_linker_flags(),\n        'os_feature_macros': osinfo.macros(cc),\n        'cc_sysroot': sysroot_option(),\n        'cc_compile_flags': ' '.join(cc.cc_compile_flags(options)).strip(),\n        'ldflags': ' '.join(cc.ldflags(options)).strip(),\n        'test_exe_extra_ldflags': test_exe_extra_ldflags(),\n        'extra_libs': extra_libs(options.extra_libs, cc),\n        'cc_warning_flags': cc.cc_warning_flags(options),\n        'output_to_exe': cc.output_to_exe,\n        'cc_macro': cc.macro_name,\n        'ninja_header_deps_style': cc.ninja_header_deps_style,\n        'header_deps_flag': cc.header_deps_flag,\n        'header_deps_out': cc.header_deps_out,\n\n        'visibility_attribute': cc.gen_visibility_attribute(options),\n\n        'lib_link_cmd': cc.so_link_command_for(osinfo.basename, options),\n        'exe_link_cmd': cc.binary_link_command_for(osinfo.basename, options),\n        'external_link_cmd': external_link_cmd(),\n\n        'ar_command': ar_command(),\n        'ar_options': options.ar_options or cc.ar_options or osinfo.ar_options,\n        'ar_output_to': cc.ar_output_to,\n\n        'link_to': ' '.join(\n            [(cc.add_lib_option % lib) for lib in link_to('libs')] +\n            [cc.add_framework_option + fw for fw in link_to('frameworks')]\n        ),\n\n        'fuzzer_lib': (cc.add_lib_option % options.fuzzer_lib) if options.fuzzer_lib else '',\n        'libs_used': [lib.replace('.lib', '') for lib in link_to('libs')],\n\n        'public_include_path': build_paths.public_include_dir,\n        'internal_include_path': build_paths.internal_include_dir,\n        'external_include_path': build_paths.external_include_dir,\n\n        'public_include_flags': build_paths.format_public_include_flags(cc),\n        'internal_include_flags': build_paths.format_internal_include_flags(cc),\n        'external_include_flags': build_paths.format_external_include_flags(cc, options.with_external_includedir),\n        'module_defines': sorted(flatten([m.defines() for m in modules])),\n\n        'build_bogo_shim': bool('bogo_shim' in options.build_targets),\n        'bogo_shim_src': os.path.join(source_paths.src_dir, 'bogo_shim', 'bogo_shim.cpp'),\n\n        'build_ct_selftest': bool('ct_selftest' in options.build_targets),\n        'ct_selftest_src': os.path.join(source_paths.src_dir, 'ct_selftest', 'ct_selftest.cpp'),\n\n        'os_features': osinfo.enabled_features(options),\n        'os_name': osinfo.basename,\n        'cpu_features': arch.supported_isa_extensions(cc, options),\n        'system_cert_bundle': options.system_cert_bundle,\n\n        'enable_experimental_features': options.enable_experimental_features,\n        'disable_deprecated_features': not options.enable_deprecated_features,\n\n        'fuzzer_mode': options.unsafe_fuzzer_mode,\n        'building_fuzzers': options.build_fuzzers,\n        'fuzzer_type': options.build_fuzzers.upper() if options.build_fuzzers else '',\n\n        'with_valgrind': options.with_valgrind,\n        'with_debug_asserts': options.with_debug_asserts,\n        'terminate_on_asserts': options.unsafe_terminate_on_asserts,\n        'optimize_for_size': options.optimize_for_size,\n\n        'mod_list': sorted([m.basename for m in modules]),\n        'disabled_mod_list': sorted([m.basename for m in disabled_modules]),\n    }\n\n    variables['installed_include_dir'] = os.path.join(\n        variables['prefix'],\n        variables['includedir'],\n        'botan-%d' % (Version.major()), 'botan')\n\n    if cc.basename == 'msvc' and variables['cxx_abi_flags'] != '':\n        # MSVC linker doesn't support/need the ABI options,\n        # just transfer them over to just the compiler invocations\n        variables['cc_compile_flags'] = '%s %s' % (variables['cxx_abi_flags'], variables['cc_compile_flags'])\n        variables['cxx_abi_flags'] = ''\n\n    variables['lib_flags'] = cc.gen_lib_flags(options, variables)\n\n    if options.with_pkg_config:\n        variables['botan_pkgconfig'] = os.path.join(build_paths.build_dir, 'botan-%d.pc' % (Version.major()))\n    if options.with_cmake_config:\n        variables['botan_cmake_config'] = os.path.join(build_paths.build_dir, 'cmake', 'botan-config.cmake')\n        variables['botan_cmake_version_config'] = os.path.join(build_paths.build_dir, 'cmake', 'botan-config-version.cmake')\n\n    # The name is always set because Windows build needs it\n    variables['static_lib_name'] = '%s%s.%s' % (variables['lib_prefix'], variables['libname'],\n                                                variables['static_suffix'])\n\n    if options.build_shared_lib:\n        if osinfo.soname_pattern_base is not None:\n            variables['soname_base'] = osinfo.soname_pattern_base.format(**variables)\n            variables['shared_lib_name'] = variables['soname_base']\n\n        if osinfo.soname_pattern_abi is not None:\n            variables['soname_abi'] = osinfo.soname_pattern_abi.format(**variables)\n            variables['shared_lib_name'] = variables['soname_abi']\n\n        if osinfo.soname_pattern_patch is not None:\n            variables['soname_patch'] = osinfo.soname_pattern_patch.format(**variables)\n\n        if options.os == 'windows':\n            variables['implib_name'] = variables['static_lib_name']\n\n        variables['lib_link_cmd'] = variables['lib_link_cmd'].format(**variables)\n\n    for var in ['exe_link_cmd']:\n        variables[var] = variables[var].format(**variables)\n\n    lib_targets = []\n    if options.build_static_lib:\n        lib_targets.append('static_lib_name')\n    if options.build_shared_lib:\n        lib_targets.append('shared_lib_name')\n\n    variables['library_targets'] = ' '.join([join_with_build_dir(variables[t]) for t in lib_targets])\n\n    if options.os == 'llvm' or options.compiler == 'msvc':\n        # llvm-link and msvc require just naming the file directly\n        variables['build_dir_link_path'] = ''\n        variables['link_to_botan'] = normalize_source_path(os.path.join(build_dir, variables['static_lib_name']))\n    else:\n        variables['build_dir_link_path'] = '%s%s' % (cc.add_lib_dir_option, build_dir)\n        variables['link_to_botan'] = cc.add_lib_option % variables['libname']\n\n    return variables\n\nclass ModulesChooser:\n    \"\"\"\n    Determine which modules to load based on options, target, etc\n    \"\"\"\n\n    def __init__(self, modules, module_policy, archinfo, osinfo, ccinfo, cc_min_version, options):\n        self._modules = modules\n        self._module_policy = module_policy\n        self._archinfo = archinfo\n        self._osinfo = osinfo\n        self._ccinfo = ccinfo\n        self._cc_min_version = cc_min_version\n        self._options = options\n\n        self._maybe_dep = set()\n        self._to_load = set()\n        # string to set mapping with reasons as key and modules as value\n        self._not_using_because = collections.defaultdict(set)\n\n        ModulesChooser._validate_dependencies_exist(self._modules)\n        ModulesChooser._validate_user_selection(\n            self._modules, self._options.enabled_modules, self._options.disabled_modules)\n\n    def _check_usable(self, module, modname):\n        if not module.compatible_cpu(self._archinfo, self._options):\n            self._not_using_because['incompatible CPU'].add(modname)\n            return False\n        elif not module.compatible_os(self._osinfo, self._options):\n            self._not_using_because['incompatible OS'].add(modname)\n            return False\n        elif not module.compatible_compiler(self._ccinfo, self._cc_min_version, self._archinfo.basename):\n            self._not_using_because['incompatible compiler'].add(modname)\n            return False\n        elif module.is_deprecated() and not self._options.enable_deprecated_features:\n            self._not_using_because['deprecated'].add(modname)\n            return False\n        elif module.is_experimental() and modname not in self._options.enabled_modules and not self._options.enable_experimental_features:\n            self._not_using_because['experimental'].add(modname)\n            return False\n        return True\n\n    @staticmethod\n    def _remove_virtual_modules(all_modules, modnames):\n        return [mod for mod in modnames if not all_modules[mod].is_virtual()]\n\n    @classmethod\n    def _display_module_information_unused(cls, all_modules, skipped_modules):\n        for reason in sorted(skipped_modules.keys()):\n            disabled_mods = cls._remove_virtual_modules(all_modules, sorted(skipped_modules[reason]))\n            if disabled_mods:\n                logging.info('Skipping (%s): %s', reason, ' '.join(disabled_mods))\n\n    @classmethod\n    def _display_module_information_to_load(cls, all_modules, modules_to_load):\n        sorted_modules_to_load = cls._remove_virtual_modules(all_modules, sorted(modules_to_load))\n\n        deprecated = []\n        experimental = []\n        for modname in sorted_modules_to_load:\n            if all_modules[modname].comment:\n                logging.info('%s: %s', modname, all_modules[modname].comment)\n            if all_modules[modname].warning:\n                logging.warning('%s: %s', modname, all_modules[modname].warning)\n            if all_modules[modname].load_on == 'vendor':\n                logging.info('Enabling use of external dependency %s', modname)\n            if all_modules[modname].is_deprecated():\n                deprecated.append(modname)\n            if all_modules[modname].is_experimental():\n                experimental.append(modname)\n\n        if deprecated:\n            logging.warning('These modules are deprecated and will be removed in a future release (consider disabling with --disable-deprecated-features): %s',\n                            ' '.join(deprecated))\n\n        if experimental:\n            logging.warning('These modules are experimental and may change or be removed in a future release: %s',\n                            ' '.join(experimental))\n\n        if sorted_modules_to_load:\n            logging.info('Loading modules: %s', ' '.join(sorted_modules_to_load))\n        else:\n            logging.error('This configuration disables every submodule and is invalid')\n\n    @staticmethod\n    def _validate_state(used_modules, unused_modules):\n        for reason, unused_for_reason in unused_modules.items():\n            intersection = unused_for_reason & used_modules\n            if intersection:\n                raise InternalError(\n                    \"Disabled modules (%s) and modules to load have common elements: %s\"\n                    % (reason, intersection))\n\n    @staticmethod\n    def _validate_dependencies_exist(modules):\n        for module in modules.values():\n            module.dependencies_exist(modules)\n\n    @staticmethod\n    def _validate_user_selection(modules, enabled_modules, disabled_modules):\n        for modname in enabled_modules:\n            if modname not in modules:\n                logging.error(\"Module not found: %s\", modname)\n            if not modules[modname].is_public():\n                logging.error(\"Module '%s' is meant for internal use only\", modname)\n\n        for modname in disabled_modules:\n            if modname not in modules:\n                logging.warning(\"Disabled module not found: %s\", modname)\n\n    def _handle_by_module_policy(self, modname, module, usable):\n        if self._module_policy is not None:\n            if modname in self._module_policy.required:\n                if not usable:\n                    logging.error('Module policy requires module %s not usable on this platform', modname)\n                elif modname in self._options.disabled_modules:\n                    logging.error('Module %s was disabled but is required by policy', modname)\n                elif module.is_virtual():\n                    logging.error(\"Module %s is meant for internal use only\", modname)\n                self._to_load.add(modname)\n                return True\n            elif modname in self._module_policy.if_available:\n                if modname in self._options.disabled_modules:\n                    self._not_using_because['disabled by user'].add(modname)\n                elif module.is_virtual():\n                    logging.error(\"Module %s is meant for internal use only\", modname)\n                elif usable:\n                    logging.debug('Enabling optional module %s', modname)\n                    self._to_load.add(modname)\n                return True\n            elif modname in self._module_policy.prohibited:\n                if modname in self._options.enabled_modules:\n                    logging.error('Module %s was requested but is prohibited by policy', modname)\n                self._not_using_because['prohibited by module policy'].add(modname)\n                return True\n\n        return False\n\n    @staticmethod\n    def resolve_dependencies(available_modules, dependency_table, module, loaded_modules=None):\n        \"\"\"\n        Parameters\n        - available_modules: modules to choose from. Constant.\n        - dependency_table: module to dependencies map. Constant.\n        - module: name of the module to resolve dependencies. Constant.\n        - loaded_modules: modules already loaded. Defensive copy in order to not change value for caller.\n        \"\"\"\n        if loaded_modules is None:\n            loaded_modules = set([])\n        else:\n            loaded_modules = copy.copy(loaded_modules)\n\n        if module not in available_modules:\n            return False, None\n\n        loaded_modules.add(module)\n        for dependency in dependency_table[module]:\n            dependency_choices = set(dependency.split('|'))\n\n            dependency_met = False\n\n            if not set(dependency_choices).isdisjoint(loaded_modules):\n                dependency_met = True\n            else:\n                possible_mods = dependency_choices.intersection(available_modules)\n\n                for mod in possible_mods:\n                    ok, dependency_modules = ModulesChooser.resolve_dependencies(\n                        available_modules, dependency_table, mod, loaded_modules)\n                    if ok:\n                        dependency_met = True\n                        loaded_modules.add(mod)\n                        loaded_modules.update(dependency_modules)\n                        break\n\n            if not dependency_met:\n                return False, None\n\n        return True, loaded_modules\n\n    def _modules_dependency_table(self):\n        out = {}\n        for modname in self._modules:\n            out[modname] = self._modules[modname].dependencies(self._osinfo)\n        return out\n\n    def _resolve_dependencies_for_all_modules(self):\n        available_modules = set(self._to_load) | set(self._maybe_dep)\n        dependency_table = self._modules_dependency_table()\n\n        successfully_loaded = set()\n\n        for modname in self._to_load:\n            # This will try to recursively load all dependencies of modname\n            ok, modules = self.resolve_dependencies(available_modules, dependency_table, modname)\n            if ok:\n                successfully_loaded.add(modname)\n                successfully_loaded.update(modules)\n            else:\n                # Skip this module\n                pass\n\n        self._not_using_because['dependency failure'].update(self._to_load - successfully_loaded)\n        self._to_load = successfully_loaded\n        self._maybe_dep -= successfully_loaded\n\n    def _handle_by_load_on(self, module):\n        modname = module.basename\n        if module.load_on == 'never':\n            self._not_using_because['disabled as buggy'].add(modname)\n        elif module.load_on == 'request':\n            self._not_using_because['by request only'].add(modname)\n        elif module.load_on == 'vendor':\n            self._not_using_because['requires external dependency'].add(modname)\n        elif module.load_on == 'dep':\n            self._maybe_dep.add(modname)\n\n        elif module.load_on == 'always':\n            self._to_load.add(modname)\n\n        elif module.load_on == 'auto':\n            if self._options.no_autoload or self._module_policy is not None:\n                self._maybe_dep.add(modname)\n            else:\n                self._to_load.add(modname)\n        else:\n            logging.error('Unknown load_on %s in %s',\n                          module.load_on, modname)\n\n    def choose(self):\n        for (modname, module) in self._modules.items():\n            usable = self._check_usable(module, modname)\n\n            module_handled = self._handle_by_module_policy(modname, module, usable)\n            if module_handled:\n                continue\n\n            if modname in self._options.disabled_modules:\n                self._not_using_because['disabled by user'].add(modname)\n            elif usable:\n                if modname in self._options.enabled_modules:\n                    self._to_load.add(modname) # trust the user\n                else:\n                    self._handle_by_load_on(module)\n\n        if 'compression' in self._to_load:\n            # Confirm that we have at least one compression library enabled\n            # Otherwise we leave a lot of useless support code compiled in, plus a\n            # make_compressor call that always fails\n            if 'zlib' not in self._to_load and 'bzip2' not in self._to_load and 'lzma' not in self._to_load:\n                self._to_load.remove('compression')\n                self._not_using_because['no enabled compression schemes'].add('compression')\n\n        # The AVX2 implementation of Argon2 fails when compiled by GCC in\n        # amalgamation mode.\n        if 'argon2_avx2' in self._to_load and self._options.amalgamation and self._options.compiler == 'gcc':\n            self._to_load.remove('argon2_avx2')\n            self._not_using_because['disabled due to compiler bug'].add('argon2_avx2')\n\n        self._resolve_dependencies_for_all_modules()\n\n        for not_a_dep in self._maybe_dep:\n            self._not_using_because['not requested'].add(not_a_dep)\n\n        ModulesChooser._validate_state(self._to_load, self._not_using_because)\n        ModulesChooser._display_module_information_unused(self._modules, self._not_using_because)\n        ModulesChooser._display_module_information_to_load(self._modules, self._to_load)\n\n        return self._to_load\n\ndef choose_link_method(options):\n    \"\"\"\n    Choose the link method based on system availability and user request\n    \"\"\"\n\n    req = options.link_method\n\n    def useable_methods():\n\n        # Symbolic link support on Windows was introduced in Windows 6.0 (Vista)\n        # and Python 3.2. Furthermore, the SeCreateSymbolicLinkPrivilege is\n        # required in order to successfully create symlinks. So only try to use\n        # symlinks on Windows if explicitly requested.\n\n        # Hardlinks only work if the source and build dirs are on the same filesystem,\n        # so there we only use it if requested.\n\n        # MinGW declares itself as 'Windows'\n        host_is_windows = python_platform_identifier() in ['windows', 'cygwin']\n\n        if 'symlink' in os.__dict__:\n            if host_is_windows:\n                if req == 'symlink':\n                    yield 'symlink'\n            else:\n                yield 'symlink'\n\n        if 'link' in os.__dict__ and req == 'hardlink':\n            yield 'hardlink'\n\n        yield 'copy'\n\n    for method in useable_methods():\n        if req is None or req == method:\n            logging.info('Using %s to link files into build dir ' \\\n                         '(use --link-method to change)', method)\n            return method\n\n    logging.warning('Could not use link method \"%s\", will copy instead', req)\n    return 'copy'\n\ndef portable_symlink(file_path, target_dir, method):\n    \"\"\"\n    Copy or link the file, depending on what the platform offers\n    \"\"\"\n\n    if not os.access(file_path, os.R_OK):\n        logging.warning('Missing file %s', file_path)\n        return\n\n    if method == 'symlink':\n        rel_file_path = os.path.relpath(file_path, start=target_dir)\n        os.symlink(rel_file_path, os.path.join(target_dir, os.path.basename(file_path)))\n    elif method == 'hardlink':\n        os.link(file_path, os.path.join(target_dir, os.path.basename(file_path)))\n    elif method == 'copy':\n        shutil.copy(file_path, target_dir)\n    else:\n        raise UserError('Unknown link method %s' % (method))\n\n\nclass AmalgamationHelper:\n    # All include types may have trailing comment like e.g. '#include <vector> // IWYU pragma: export'\n    _any_include = re.compile(r'#include <(.*)>')\n    _botan_include = re.compile(r'#include <botan/(.*)>')\n\n    # Only matches at the beginning of the line. By convention, this means that the include\n    # is not wrapped by condition macros\n    _unconditional_any_include = re.compile(r'^#include <(.*)>')\n    # stddef.h is included in ffi.h\n    _unconditional_std_include = re.compile(r'^#include <([^/\\.]+|stddef.h)>')\n\n    @staticmethod\n    def is_any_include(cpp_source_line):\n        match = AmalgamationHelper._any_include.search(cpp_source_line)\n        if match:\n            return match.group(1)\n        else:\n            return None\n\n    @staticmethod\n    def is_botan_include(cpp_source_line):\n        match = AmalgamationHelper._botan_include.search(cpp_source_line)\n        return match.group(1) if match else None\n\n    @staticmethod\n    def is_unconditional_any_include(cpp_source_line):\n        match = AmalgamationHelper._unconditional_any_include.search(cpp_source_line)\n        return match.group(1) if match else None\n\n    @staticmethod\n    def is_unconditional_std_include(cpp_source_line):\n        match = AmalgamationHelper._unconditional_std_include.search(cpp_source_line)\n        return match.group(1) if match else None\n\n    @staticmethod\n    def write_banner(fd):\n        fd.write(\"\"\"/*\n* Botan %s Amalgamation\n* (C) 1999-2023 The Botan Authors\n*\n* Botan is released under the Simplified BSD License (see license.txt)\n*/\n\"\"\" % (Version.as_string()))\n\n\nclass AmalgamationHeader:\n    def __init__(self, input_filepaths):\n\n        self.included_already = set()\n        self.all_std_includes = set()\n\n        self.file_contents = {}\n        for filepath in sorted(input_filepaths):\n            try:\n                contents = AmalgamationGenerator.read_header(filepath)\n                self.file_contents[os.path.basename(filepath)] = contents\n            except IOError as ex:\n                logging.error('Error processing file %s for amalgamation: %s', filepath, ex)\n\n        self.contents = ''\n        for name in sorted(self.file_contents):\n            self.contents += ''.join(list(self.header_contents(name)))\n\n        self.header_includes = ''\n        for std_header in sorted(self.all_std_includes):\n            self.header_includes += '#include <%s>\\n' % (std_header)\n        self.header_includes += '\\n'\n\n    def header_contents(self, name):\n        name = name.replace('internal/', '')\n\n        if name in self.included_already:\n            return\n\n        self.included_already.add(name)\n\n        if name not in self.file_contents:\n            return\n\n        depr_marker = 'BOTAN_DEPRECATED_HEADER(%s)\\n' % (name)\n        if depr_marker in self.file_contents[name]:\n            logging.debug(\"Ignoring deprecated header %s\", name)\n            return\n\n        for line in self.file_contents[name]:\n            header = AmalgamationHelper.is_botan_include(line)\n            if header:\n                for c in self.header_contents(header):\n                    yield c\n            else:\n                std_header = AmalgamationHelper.is_unconditional_std_include(line)\n\n                if std_header:\n                    self.all_std_includes.add(std_header)\n                else:\n                    yield line\n\n    def write_to_file(self, filepath, include_guard):\n        with open(filepath, 'w', encoding='utf8') as f:\n            AmalgamationHelper.write_banner(f)\n            f.write(\"\\n#ifndef %s\\n#define %s\\n\\n\" % (include_guard, include_guard))\n            f.write(self.header_includes)\n            f.write(self.contents)\n            f.write(\"\\n#endif // %s\\n\" % (include_guard))\n\n\nclass AmalgamationGenerator:\n    _header_guard_pattern = re.compile(r'^#define BOTAN_.*_H_\\s*$')\n    _header_endif_pattern = re.compile(r'^#endif.*$')\n\n    @staticmethod\n    def read_header(filepath):\n        with open(filepath, encoding='utf8') as f:\n            raw_content = f.readlines()\n            return AmalgamationGenerator.strip_header_goop(filepath, raw_content)\n\n    @staticmethod\n    def strip_header_goop(header_name, header_lines):\n        lines = copy.copy(header_lines) # defensive copy\n\n        start_header_guard_index = None\n        for index, line in enumerate(lines):\n            if AmalgamationGenerator._header_guard_pattern.match(line):\n                start_header_guard_index = index\n                break\n        if start_header_guard_index is None:\n            raise InternalError(\"No header guard start found in \" + header_name)\n\n        end_header_guard_index = None\n        for index, line in enumerate(lines):\n            if AmalgamationGenerator._header_endif_pattern.match(line):\n                end_header_guard_index = index # override with last found\n        if end_header_guard_index is None:\n            raise InternalError(\"No header guard end found in \" + header_name)\n\n        lines = lines[start_header_guard_index+1 : end_header_guard_index]\n\n        # Strip leading and trailing empty lines\n        while lines[0].strip() == \"\":\n            lines = lines[1:]\n        while lines[-1].strip() == \"\":\n            lines = lines[0:-1]\n\n        return lines\n\n    def __init__(self, prefix, build_paths, modules, options):\n        self._filename_prefix = prefix\n        self._build_paths = build_paths\n        self._modules = modules\n        self._options = options\n\n    def generate(self):\n        pub_header_amalag = AmalgamationHeader(self._build_paths.public_headers)\n        amalgamation_header_fsname = '%s.h' % (self._filename_prefix)\n        logging.info('Writing amalgamation header to %s', amalgamation_header_fsname)\n        pub_header_amalag.write_to_file(amalgamation_header_fsname, \"BOTAN_AMALGAMATION_H_\")\n\n        internal_headers_list = []\n\n        for hdr in self._build_paths.internal_headers:\n            internal_headers_list.append(hdr)\n\n        # file descriptors for all `amalgamation_sources`\n        amalgamation_fsname = '%s.cpp' % (self._filename_prefix)\n        logging.info('Writing amalgamation source to %s', amalgamation_fsname)\n\n        amalgamation_file = open(amalgamation_fsname, 'w', encoding='utf8')\n\n        AmalgamationHelper.write_banner(amalgamation_file)\n        amalgamation_file.write('\\n#include \"%s\"\\n\\n' % (amalgamation_header_fsname))\n\n        internal_headers = AmalgamationHeader(internal_headers_list)\n        amalgamation_file.write(internal_headers.header_includes)\n        amalgamation_file.write(internal_headers.contents)\n\n        unconditional_headers = set([])\n\n        for mod in sorted(self._modules, key=lambda module: module.basename):\n            for src in sorted(mod.source):\n                with open(src, 'r', encoding='utf8') as f:\n                    for line in f:\n                        if AmalgamationHelper.is_botan_include(line):\n                            # Botan headers are inlined in amalgamation headers\n                            continue\n\n                        if AmalgamationHelper.is_any_include(line) in unconditional_headers:\n                            # This include (conditional or unconditional) was unconditionally added before\n                            continue\n\n                        amalgamation_file.write(line)\n                        unconditional_header = AmalgamationHelper.is_unconditional_any_include(line)\n                        if unconditional_header:\n                            unconditional_headers.add(unconditional_header)\n\n        amalgamation_file.close()\n\n        return ([amalgamation_fsname], [amalgamation_header_fsname])\n\n\ndef have_program(program):\n    \"\"\"\n    Test for the existence of a program\n    \"\"\"\n\n    def exe_test(path, program):\n        exe_file = os.path.join(path, program)\n\n        if os.path.exists(exe_file) and os.access(exe_file, os.X_OK):\n            logging.debug('Found program %s in %s', program, path)\n            return True\n        else:\n            return False\n\n    exe_suffixes = ['', '.exe']\n\n    for path in os.environ['PATH'].split(os.pathsep):\n        for suffix in exe_suffixes:\n            if exe_test(path, program + suffix):\n                return True\n\n    logging.debug('Program %s not found', program)\n    return False\n\n\nclass BotanConfigureLogHandler(logging.StreamHandler):\n    def emit(self, record):\n        # Do the default stuff first\n        super().emit(record)\n        # Exit script if and ERROR or worse occurred\n        if record.levelno >= logging.ERROR:\n            sys.exit(1)\n\n\ndef setup_logging(options):\n    if options.verbose:\n        log_level = logging.DEBUG\n    elif options.quiet:\n        log_level = logging.WARNING\n    else:\n        log_level = logging.INFO\n\n    lh = BotanConfigureLogHandler(sys.stdout)\n    lh.setFormatter(logging.Formatter('%(levelname) 7s: %(message)s'))\n    logging.getLogger().addHandler(lh)\n    logging.getLogger().setLevel(log_level)\n\n\ndef load_info_files(search_dir, descr, filename_matcher, class_t):\n    info = {}\n\n    def filename_matches(filename):\n        if isinstance(filename_matcher, str):\n            return filename == filename_matcher\n        else:\n            return filename_matcher.match(filename) is not None\n\n    for (dirpath, _, filenames) in os.walk(search_dir):\n        for filename in filenames:\n            filepath = os.path.join(dirpath, filename)\n            if filename_matches(filename):\n                info_obj = class_t(filepath)\n                info[info_obj.basename] = info_obj\n\n    if info:\n        infotxt_basenames = ' '.join(sorted(info.keys()))\n        logging.debug('Loaded %d %s files: %s', len(info), descr, infotxt_basenames)\n    else:\n        logging.warning('Failed to load any %s files', descr)\n\n    return info\n\n\ndef load_build_data_info_files(source_paths, descr, subdir, class_t):\n    matcher = re.compile(r'[_a-z0-9]+\\.txt$')\n    return load_info_files(os.path.join(source_paths.build_data_dir, subdir), descr, matcher, class_t)\n\n\n# Workaround for Windows systems where antivirus is enabled GH #353\ndef robust_rmtree(path, max_retries=5):\n    for _ in range(max_retries):\n        try:\n            shutil.rmtree(path)\n            return\n        except OSError:\n            time.sleep(0.1)\n\n    # Final attempt, pass any exceptions up to caller.\n    shutil.rmtree(path)\n\n\n# Workaround for Windows systems where antivirus is enabled GH #353\ndef robust_makedirs(directory, max_retries=5):\n    for _ in range(max_retries):\n        try:\n            os.makedirs(directory)\n            return\n        except OSError as ex:\n            if ex.errno == errno.EEXIST:\n                raise\n\n        time.sleep(0.1)\n\n    # Final attempt, pass any exceptions up to caller.\n    os.makedirs(directory)\n\ndef python_platform_identifier():\n    system_from_python = platform.system().lower()\n    if re.match('^cygwin_.*', system_from_python):\n        return 'cygwin'\n    return system_from_python\n\ndef run_compiler(options, ccinfo, default_return, flags=None):\n    if flags is None:\n        flags = []\n\n    cc_bin = options.compiler_binary or ccinfo.binary_name\n\n    cmd = cc_bin.split(' ') + flags\n\n    try:\n        logging.debug(\"Running '%s'\", ' '.join(cmd))\n        stdout, _ = subprocess.Popen(\n            cmd,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            universal_newlines=True).communicate()\n        cc_output = stdout\n    except OSError as ex:\n        logging.warning('Could not execute %s: %s', cmd, ex)\n        return default_return\n\n    return cc_output\n\n# This is for options that have --with-XYZ and --without-XYZ. If user does not\n# set any of those, we choose a default here.\n# Mutates `options`\ndef set_defaults_for_unset_options(options, info_arch, info_cc, info_os):\n    if options.os is None:\n        options.os = python_platform_identifier()\n        logging.info('Guessing target OS is %s (use --os to set)', options.os)\n\n    if options.os not in info_os:\n        def find_canonical_os_name(os_name_variant):\n            for (canonical_os_name, os_info) in info_os.items():\n                if os_info.matches_name(os_name_variant):\n                    return canonical_os_name\n            return os_name_variant # not found\n        options.os = find_canonical_os_name(options.os)\n\n    def deduce_compiler_type_from_cc_bin(cc_bin):\n        if cc_bin.find('clang') != -1 or cc_bin in ['emcc', 'em++']:\n            return 'clang'\n        if cc_bin.find('-g++') != -1 or cc_bin.find('g++') != -1:\n            return 'gcc'\n        return None\n\n    if options.compiler is None and options.compiler_binary is not None:\n        options.compiler = deduce_compiler_type_from_cc_bin(options.compiler_binary)\n\n        if options.compiler is None:\n            logging.error(\"Could not figure out what compiler type '%s' is, use --cc to set\",\n                          options.compiler_binary)\n\n        if options.compiler == 'clang' and run_compiler(options, info_cc['clang'], '?', ['--version']).startswith('Apple clang'):\n            options.compiler = 'xcode'\n\n    if options.compiler is None and options.os in info_os:\n        options.compiler = info_os[options.os].default_compiler\n\n        if not have_program(info_cc[options.compiler].binary_name):\n            logging.error(\"Default compiler is %s but could not find '%s'; use --cc to set\",\n                          options.compiler, info_cc[options.compiler].binary_name)\n\n        logging.info('Guessing to use compiler %s (use --cc or CXX to set)', options.compiler)\n\n    if options.cpu is None:\n        (arch, cpu) = guess_processor(info_arch)\n        options.arch = arch\n        options.cpu = cpu\n        logging.info('Guessing target processor is a %s (use --cpu to set)', options.arch)\n\n    # OpenBSD uses an old binutils that does not support AVX2\n    if options.os == 'openbsd':\n        del info_cc['gcc'].isa_flags['avx2']\n\n    if options.with_documentation is True:\n        if options.with_sphinx is None and have_program('sphinx-build'):\n            logging.info('Found sphinx-build (use --without-sphinx to disable)')\n            options.with_sphinx = True\n        if options.with_rst2man is None and have_program('rst2man'):\n            logging.info('Found rst2man (use --without-rst2man to disable)')\n            options.with_rst2man = True\n\n    if options.with_pkg_config is None and options.os in info_os:\n        options.with_pkg_config = info_os[options.os].uses_pkg_config\n\n    if options.system_cert_bundle is None:\n        default_paths = [\n            '/etc/ssl/certs/ca-certificates.crt', # Ubuntu, Debian, Arch, Gentoo\n            '/etc/pki/tls/certs/ca-bundle.crt', # RHEL\n            '/etc/ssl/ca-bundle.pem', # SuSE\n            '/etc/ssl/cert.pem', # OpenBSD, FreeBSD, Alpine\n            '/etc/certs/ca-certificates.crt', # Solaris\n            '/opt/local/share/curl/curl-ca-bundle.crt', # macOS with macPorts\n        ]\n\n        for path in default_paths:\n            if os.access(path, os.R_OK):\n                logging.info('Using %s as system certificate store', path)\n                options.system_cert_bundle = path\n                break\n    else:\n        if not os.access(options.system_cert_bundle, os.R_OK):\n            logging.warning('System cert bundle \"%s\" not found, ignoring', options.system_cert_bundle)\n            options.system_cert_bundle = None\n\n# Mutates `options`\ndef canonicalize_options(options, info_os, info_arch):\n    # canonical ARCH/CPU\n    options.arch = canon_processor(info_arch, options.cpu)\n    if options.arch is None:\n        raise UserError('Unknown or unidentifiable processor \"%s\"' % (options.cpu))\n\n    if options.cpu != options.arch:\n        logging.info('Canonicalized CPU target %s to %s', options.cpu, options.arch)\n\n    # select and sanity check build targets\n    def canonicalize_build_targets(options):\n        # --build-targets was not provided: build default targets\n        if options.build_targets is None:\n            return [\"cli\", \"tests\"]\n\n        # flatten the list of multiple --build-targets=\"\" and comma separation\n        build_targets = [t.strip().lower() for ts in options.build_targets for t in ts.split(\",\")]\n\n        # validate that all requested build targets are available\n        for build_target in build_targets:\n            if build_target not in ACCEPTABLE_BUILD_TARGETS:\n                raise UserError(\"unknown build target: %s\" % build_target)\n\n        # building the shared lib desired and without contradiction?\n        if options.build_shared_lib is None:\n            options.build_shared_lib = \"shared\" in build_targets\n        elif bool(options.build_shared_lib) != bool(\"shared\" in build_targets):\n            raise UserError(\"inconsistent usage of --enable/disable-shared-library and --build-targets\")\n\n        # building the static lib desired and without contradiction?\n        if options.build_static_lib is None:\n            options.build_static_lib = \"static\" in build_targets\n        elif bool(options.build_static_lib) != bool(\"static\" in build_targets):\n            raise UserError(\"inconsistent usage of --enable/disable-static-library and --build-targets\")\n\n        return build_targets\n\n    options.build_targets = canonicalize_build_targets(options)\n\n    shared_libs_supported = options.os in info_os and info_os[options.os].building_shared_supported()\n\n    if not shared_libs_supported:\n        if options.build_shared_lib is True:\n            logging.warning('Shared libs not supported on %s, disabling shared lib support', options.os)\n            options.build_shared_lib = False\n        elif options.build_shared_lib is None:\n            logging.info('Shared libs not supported on %s, disabling shared lib support', options.os)\n\n    if options.os == 'windows' and options.build_shared_lib is None and options.build_static_lib is None:\n        options.build_shared_lib = True\n\n    if options.with_stack_protector is None:\n        if options.os in info_os:\n            options.with_stack_protector = info_os[options.os].use_stack_protector\n\n    if options.build_shared_lib is None:\n        if options.os == 'windows' and options.build_static_lib:\n            pass\n        else:\n            options.build_shared_lib = shared_libs_supported\n\n    if options.build_static_lib is None:\n        if options.os == 'windows' and options.build_shared_lib:\n            pass\n        else:\n            options.build_static_lib = True\n\n    if options.ldflags is not None:\n        extra_libs = []\n        link_to_lib = re.compile('^-l(.*)')\n        for flag in options.ldflags.split(' '):\n            match = link_to_lib.match(flag)\n            if match:\n                extra_libs.append(match.group(1))\n\n        options.extra_libs += ','.join(extra_libs)\n\n# Checks user options for consistency\n# This method DOES NOT change options on behalf of the user but explains\n# why the given configuration does not work.\ndef validate_options(options, info_os, info_cc, available_module_policies):\n    if options.name_amalgamation != 'botan_all':\n        if options.name_amalgamation == '':\n            raise UserError('Amalgamation basename must be non-empty')\n\n        acceptable_name_re = re.compile('^[a-zA-Z0-9_]+$')\n        if acceptable_name_re.match(options.name_amalgamation) is None:\n            raise UserError(\"Amalgamation basename must match [a-zA-Z0-9_]+\")\n\n    if options.os == \"java\":\n        raise UserError(\"Jython detected: need --os and --cpu to set target\")\n\n    if options.os not in info_os:\n        raise UserError('Unknown OS \"%s\"; available options: %s' % (\n            options.os, ' '.join(sorted(info_os.keys()))))\n\n    if options.compiler not in info_cc:\n        raise UserError('Unknown compiler \"%s\"; available options: %s' % (\n            options.compiler, ' '.join(sorted(info_cc.keys()))))\n\n    if options.cc_min_version is not None and not re.match(r'^[0-9]+\\.[0-9]+$', options.cc_min_version):\n        raise UserError(\"--cc-min-version must have the format MAJOR.MINOR\")\n\n    if options.module_policy and options.module_policy not in available_module_policies:\n        raise UserError(\"Unknown module set %s\" % options.module_policy)\n\n    if options.cpu == 'llvm' or options.os == 'llvm':\n        if options.compiler != 'clang':\n            raise UserError('LLVM target requires using Clang')\n\n        if options.cpu != 'llvm':\n            raise UserError('LLVM target requires CPU target set to LLVM bitcode (llvm)')\n\n        if options.os != 'llvm':\n            raise UserError('Target OS is not an LLVM bitcode target')\n\n    if options.cpu == 'wasm' or options.os == 'emscripten':\n        if options.compiler != 'emcc':\n            raise UserError('Emscripten target requires using emcc')\n\n        if options.cpu != 'wasm':\n            raise UserError('Emscripten target requires CPU target set to LLVM bitcode (wasm)')\n\n        if options.os != 'emscripten':\n            raise UserError('Target OS is not emscripten')\n\n    if options.build_fuzzers is not None:\n        if options.build_fuzzers not in ['libfuzzer', 'afl', 'klee', 'test']:\n            raise UserError('Bad value to --build-fuzzers')\n\n        if options.build_fuzzers == 'klee' and options.os != 'llvm':\n            raise UserError('Building for KLEE requires targeting LLVM')\n\n    if options.build_tool not in ['make', 'ninja']:\n        raise UserError(\"Unknown --build-tool option (possible values: make, ninja)\")\n\n    if options.build_static_lib is False and options.build_shared_lib is False:\n        raise UserError('With both --disable-static-library and --disable-shared-library, nothing to do')\n\n    if options.os == 'windows' and options.build_static_lib is True and options.build_shared_lib is True:\n        raise UserError('On Windows only one of static lib and DLL can be selected')\n\n    if 'examples' in options.build_targets and 'boost' not in options.enabled_modules:\n        raise UserError('Target examples requires --with-boost')\n\n    if options.with_documentation is False:\n        if options.with_doxygen:\n            raise UserError('Using --with-doxygen plus --without-documentation makes no sense')\n        if options.with_sphinx:\n            raise UserError('Using --with-sphinx plus --without-documentation makes no sense')\n        if options.with_pdf:\n            raise UserError('Using --with-pdf plus --without-documentation makes no sense')\n\n    if options.with_pdf and not options.with_sphinx:\n        raise UserError('Option --with-pdf requires --with-sphinx')\n\n    if options.ct_value_barrier_type:\n        if options.ct_value_barrier_type not in ['asm', 'volatile', 'none']:\n            raise UserError('Unknown setting \"%s\" for --ct-value-barrier-type' % (options.ct_value_barrier_type))\n\n    # Warnings\n    if options.os == 'windows' and options.compiler != 'msvc':\n        logging.warning('The windows target is oriented towards MSVC; maybe you want --os=cygwin or --os=mingw')\n\n    if options.msvc_runtime:\n        if options.compiler != 'msvc':\n            raise UserError(\"Makes no sense to specify MSVC runtime for %s\" % (options.compiler))\n\n        if options.msvc_runtime not in ['MT', 'MD', 'MTd', 'MDd']:\n            logging.warning(\"MSVC runtime option '%s' not known\", options.msvc_runtime)\n\n    if 'threads' in options.without_os_features:\n        logging.warning('Disabling thread support will cause data races if threads are used by the application')\n\ndef run_compiler_preproc(options, ccinfo, source_file, default_return, extra_flags=None):\n    if extra_flags is None:\n        extra_flags = []\n\n    cc_output = run_compiler(options, ccinfo, default_return, ccinfo.preproc_flags.split(' ') + extra_flags + [source_file])\n\n    def cleanup_output(output):\n        return ('\\n'.join([l for l in output.splitlines() if l.startswith('#') is False])).strip()\n\n    return cleanup_output(cc_output)\n\ndef calculate_cc_min_version(options, ccinfo, source_paths):\n    version_patterns = {\n        'msvc': r'^ *MSVC ([0-9]{2})([0-9]{2})$',\n        'gcc': r'^ *GCC ([0-9]+) ([0-9]+)$',\n        'clang': r'^ *CLANG ([0-9]+) ([0-9]+)$',\n        'xcode': r'^ *XCODE ([0-9]+) ([0-9]+)$',\n        'xlc': r'^ *XLC ([0-9]+) ([0-9]+)$',\n        'emcc': r'^ *EMCC ([0-9]+) ([0-9]+)$',\n    }\n\n    unknown_pattern = r'UNKNOWN 0 0'\n\n    cxx = ccinfo.basename\n\n    if cxx not in version_patterns:\n        logging.info(\"No compiler version detection available for %s\", cxx)\n        return \"0.0\"\n\n    detect_version_source = os.path.join(source_paths.build_data_dir, \"detect_version.cpp\")\n\n    cc_output = run_compiler_preproc(options, ccinfo, detect_version_source, \"0.0\")\n\n    if re.search(unknown_pattern, cc_output) is not None:\n        logging.warning('Failed to get version for %s from macro check', cxx)\n        return \"0.0\"\n\n    match = re.search(version_patterns[cxx], cc_output, flags=re.MULTILINE)\n    if match is None:\n        logging.warning(\"Tried to get %s version, but output '%s' is unexpected\",\n                        cxx, cc_output)\n        return \"0.0\"\n\n    major_version = int(match.group(1), 0)\n    minor_version = int(match.group(2), 0)\n\n    cc_version = \"%d.%d\" % (major_version, minor_version)\n\n    if cc_version != '0.0':\n        logging.info('Auto-detected compiler version %s %s', cxx, cc_version)\n\n    if ccinfo.minimum_supported_version:\n        # compare as floats\n        min_ver = float(ccinfo.minimum_supported_version)\n        our_ver = float(cc_version)\n\n        if our_ver < min_ver:\n            logging.error(\"This version of Botan requires at least %s %s\",\n                          cxx, ccinfo.minimum_supported_version)\n\n        if cxx == 'clang' and our_ver < 17:\n            logging.warning(\"Botan 3.8 will drop support for this version of Clang (https://github.com/randombit/botan/issues/4529)\")\n\n    return cc_version\n\ndef check_compiler_arch(options, ccinfo, archinfo, source_paths):\n    detect_version_source = os.path.join(source_paths.build_data_dir, 'detect_arch.cpp')\n\n    abi_flags = ccinfo.mach_abi_link_flags(options).split(' ')\n    cc_output = run_compiler_preproc(options, ccinfo, detect_version_source, 'UNKNOWN', abi_flags).lower()\n\n    if cc_output == '':\n        cc_output = run_compiler_preproc(options, ccinfo, detect_version_source, 'UNKNOWN').lower()\n\n    if cc_output == 'unknown':\n        logging.warning('Unable to detect target architecture via compiler macro checks')\n        return None\n\n    if cc_output not in archinfo:\n        # Should not happen\n        logging.warning(\"Error detecting compiler target arch: '%s'\", cc_output)\n        return None\n\n    logging.info('Auto-detected compiler arch %s', cc_output)\n    return cc_output\n\ndef do_io_for_build(cc, arch, osinfo, using_mods, info_modules, build_paths, source_paths, template_vars, options):\n    try:\n        robust_rmtree(build_paths.build_dir)\n    except OSError as ex:\n        if ex.errno != errno.ENOENT:\n            logging.error('Problem while removing build dir: %s', ex)\n\n    for build_dir in build_paths.build_dirs():\n        try:\n            robust_makedirs(build_dir)\n        except OSError as ex:\n            if ex.errno != errno.EEXIST:\n                logging.error('Error while creating \"%s\": %s', build_dir, ex)\n\n    def write_template_with_variables(sink, template, variables, postproc_fn = None):\n        output = process_template(template, variables)\n        if postproc_fn:\n            output = postproc_fn(output)\n\n        with open(sink, 'w', encoding='utf8') as f:\n            f.write(output)\n\n    def write_template(sink, template, postproc_fn = None):\n        write_template_with_variables(sink, template, template_vars, postproc_fn)\n\n    def in_build_dir(p):\n        return os.path.join(build_paths.build_dir, p)\n    def in_build_data(p):\n        return os.path.join(source_paths.build_data_dir, p)\n    def in_build_module_info(p):\n        return os.path.join(build_paths.doc_module_info, p)\n\n    write_template(in_build_dir('build.h'), in_build_data('buildh.in'))\n    write_template(in_build_dir('botan.doxy'), in_build_data('botan.doxy.in'))\n\n    if options.with_cmake_config:\n        robust_makedirs(in_build_dir(\"cmake\"))\n        write_template(in_build_dir('cmake/botan-config.cmake'), in_build_data('botan-config.cmake.in'))\n        write_template(in_build_dir('cmake/botan-config-version.cmake'), in_build_data('botan-config-version.cmake.in'))\n\n    if 'botan_pkgconfig' in template_vars:\n        write_template(template_vars['botan_pkgconfig'], in_build_data('botan.pc.in'))\n\n    link_method = choose_link_method(options)\n\n    def link_headers(headers, visibility, directory):\n        logging.debug('Linking %d %s header files in %s', len(headers), visibility, directory)\n\n        for header_file in headers:\n            try:\n                portable_symlink(header_file, directory, link_method)\n            except OSError as ex:\n                if ex.errno != errno.EEXIST:\n                    raise UserError('Error linking %s into %s: %s' % (header_file, directory, ex)) from ex\n\n    link_headers(build_paths.public_headers, 'public',\n                 build_paths.public_include_dir)\n\n    link_headers(build_paths.internal_headers, 'internal',\n                 build_paths.internal_include_dir)\n\n    link_headers(build_paths.external_headers, 'external',\n                 build_paths.external_include_dir)\n\n    if options.amalgamation:\n        (amalg_cpp_files, amalg_headers) = AmalgamationGenerator(\n            options.name_amalgamation, build_paths, using_mods, options).generate()\n        build_paths.lib_sources = amalg_cpp_files\n        template_vars['generated_files'] = ' '.join(amalg_cpp_files + amalg_headers)\n\n        link_headers(amalg_headers, 'public', build_paths.public_include_dir)\n\n        # Inserting an amalgamation generated using DLL visibility flags into a\n        # binary project will either cause errors (on Windows) or unnecessary overhead.\n        # Provide a hint\n        if options.build_shared_lib:\n            logging.warning('Unless you are building a DLL or .so from the amalgamation, use --disable-shared as well')\n\n    template_vars.update(generate_build_info(build_paths, using_mods, cc, arch, osinfo, options))\n\n    with open(os.path.join(build_paths.build_dir, 'build_config.json'), 'w', encoding='utf8') as f:\n        json.dump(template_vars, f, sort_keys=True, indent=2)\n\n    if options.with_compilation_database:\n        write_template(in_build_dir('compile_commands.json'), in_build_data('compile_commands.json.in'))\n\n    if options.build_tool == 'make':\n        write_template(template_vars['makefile_path'], in_build_data('makefile.in'))\n    elif options.build_tool == 'ninja':\n        def escape_build_lines(contents):\n            ninja_build_line = re.compile('^build (.*): (.*)')\n\n            output = []\n            for line in contents.split('\\n'):\n                match = ninja_build_line.match(line)\n                if match:\n                    escaped1 = match.group(1).replace(':', '$:')\n                    escaped2 = match.group(2).replace(':', '$:')\n                    output.append('build %s: %s' % (escaped1, escaped2))\n                else:\n                    output.append(line)\n\n            return \"\\n\".join(output)\n\n        write_template(template_vars['ninja_build_path'], in_build_data('ninja.in'), escape_build_lines)\n\n    if options.with_doxygen:\n        for module_name, info in info_modules.items():\n            dependencies = [dep for dep in info.requires if not dep.endswith('?dyn_load')]\n            write_template_with_variables(in_build_module_info(module_name + '.dox'), in_build_data('module_info.in'),\n                                          {\n                                              'parent': info.parent_module,\n                                              'identifier': module_name,\n                                              'title': info.name,\n                                              'internal': info.is_internal(),\n                                              'virtual': info.is_virtual(),\n                                              'deprecated': info.is_deprecated(),\n                                              'experimental': info.is_experimental(),\n                                              'brief': info.brief,\n                                              'public_headers': info.header_public,\n                                              'internal_headers': info.header_internal,\n                                              'sources': info.sources(),\n                                              'dependencies': dependencies,\n                                              'os_features': info.os_features,\n                                              'cpu_features': info.isa,\n                                              'arch_requirements': info.arch,\n                                              'compiler_requirements': info.cc\n                                          })\n\n    if options.with_rst2man:\n        rst2man_file = os.path.join(build_paths.build_dir, 'botan.rst')\n        cli_doc = os.path.join(source_paths.doc_dir, 'cli.rst')\n\n        cli_doc_contents = open(cli_doc, encoding='utf8').readlines()\n\n        while cli_doc_contents[0] != \"\\n\":\n            cli_doc_contents.pop(0)\n\n        rst2man_header = \"\"\"\nbotan\n=============================\n\n:Subtitle: Botan command line util\n:Manual section: 1\n\n        \"\"\".strip()\n\n        with open(rst2man_file, 'w', encoding='utf8') as f:\n            f.write(rst2man_header)\n            f.write(\"\\n\")\n            for line in cli_doc_contents:\n                f.write(line)\n\n    date = 'dated %d' % (Version.datestamp()) if Version.datestamp() != 0 else 'undated'\n\n    logging.info('Botan %s (revision %s) (%s %s) build setup is complete',\n                 Version.as_string(),\n                 Version.vc_rev(),\n                 Version.release_type(),\n                 date)\n\n    # Warn about build modes that are not safe for production:\n    if options.unsafe_fuzzer_mode:\n        logging.warning(\"Unsafe fuzzer mode is NOT SAFE FOR PRODUCTION\")\n\n    if options.unsafe_terminate_on_asserts:\n        logging.warning(\"Terminating on assertion failures is NOT SAFE FOR PRODUCTION\")\n\ndef list_os_features(all_os_features, info_os):\n    for feat in all_os_features:\n        os_with_feat = [o for o in info_os.keys() if feat in info_os[o].target_features]\n        os_without_feat = [o for o in info_os.keys() if feat not in info_os[o].target_features]\n\n        if len(os_with_feat) < len(os_without_feat):\n            print(\"%s: %s\" % (feat, ' '.join(sorted(os_with_feat))))\n        else:\n            print(\"%s: %s\" % (feat, '!' + ' !'.join(sorted(os_without_feat))))\n    return 0\n\n\ndef main(argv):\n    \"\"\"\n    Main driver\n    \"\"\"\n\n    options = process_command_line(argv[1:])\n\n    setup_logging(options)\n\n    source_paths = SourcePaths(os.path.dirname(argv[0]))\n\n    info_modules = load_info_files(source_paths.lib_dir, 'Modules', \"info.txt\", ModuleInfo)\n\n    if options.list_modules:\n        public_modules = [name for (name, info) in info_modules.items() if info.is_public()]\n        for mod in sorted(public_modules):\n            print(mod)\n        return 0\n\n    info_arch = load_build_data_info_files(source_paths, 'CPU info', 'arch', ArchInfo)\n    info_os = load_build_data_info_files(source_paths, 'OS info', 'os', OsInfo)\n    info_cc = load_build_data_info_files(source_paths, 'compiler info', 'cc', CompilerInfo)\n    info_module_policies = load_build_data_info_files(source_paths, 'module policy', 'policy', ModulePolicyInfo)\n\n    all_os_features = sorted(set(flatten([o.target_features for o in info_os.values()])))\n    all_defined_isas = set(flatten([a.isa_extensions for a in info_arch.values()]))\n\n    if options.list_os_features:\n        return list_os_features(all_os_features, info_os)\n\n    for mod in info_modules.values():\n        mod.cross_check(info_arch, info_cc, all_os_features, all_defined_isas)\n\n    for cc in info_cc.values():\n        cc.cross_check(info_os, info_arch, all_defined_isas)\n\n    for policy in info_module_policies.values():\n        policy.cross_check(info_modules)\n\n    logging.info('%s invoked with options \"%s\"', argv[0], ' '.join(argv[1:]))\n    logging.info('Configuring to build Botan %s (revision %s)',\n                 Version.as_string(), Version.vc_rev())\n    logging.info('Python version: \"%s\"', sys.version.replace('\\n', ''))\n\n    take_options_from_env(options)\n\n    logging.info('Autodetected platform information: OS=\"%s\" machine=\"%s\" proc=\"%s\"',\n                 platform.system(), platform.machine(), platform.processor())\n\n    cpu_names = sorted(flatten([[ainfo.basename] + ainfo.aliases for ainfo in info_arch.values()]))\n    logging.debug('Known CPU names: %s', ' '.join(cpu_names))\n\n    set_defaults_for_unset_options(options, info_arch, info_cc, info_os)\n    canonicalize_options(options, info_os, info_arch)\n    validate_options(options, info_os, info_cc, info_module_policies)\n\n    cc = info_cc[options.compiler]\n    arch = info_arch[options.arch]\n    osinfo = info_os[options.os]\n    module_policy = info_module_policies[options.module_policy] if options.module_policy else None\n\n    if options.enable_cc_tests:\n        cc_min_version = options.cc_min_version or calculate_cc_min_version(options, cc, source_paths)\n        cc_arch = check_compiler_arch(options, cc, info_arch, source_paths)\n\n        if options.arch != 'generic':\n            if cc_arch is not None and cc_arch != options.arch:\n                logging.error(\"Configured target is %s but compiler probe indicates %s\", options.arch, cc_arch)\n    else:\n        cc_min_version = options.cc_min_version or \"0.0\"\n\n    logging.info('Target is %s:%s-%s-%s',\n                 options.compiler, cc_min_version, options.os, options.arch)\n\n    def choose_endian(arch_info, options):\n        if options.with_endian is not None:\n            return options.with_endian\n\n        if options.cpu.endswith('eb') or options.cpu.endswith('be'):\n            return 'big'\n        if options.cpu.endswith('el') or options.cpu.endswith('le'):\n            return 'little'\n\n        if arch_info.endian:\n            logging.info('Assuming target %s is %s endian', arch_info.basename, arch_info.endian)\n        return arch_info.endian\n\n    options.with_endian = choose_endian(arch, options)\n\n    chooser = ModulesChooser(info_modules, module_policy, arch, osinfo, cc, cc_min_version, options)\n    loaded_module_names = chooser.choose()\n    using_mods = [info_modules[modname] for modname in loaded_module_names]\n    not_using_mods = [modinfo for modname, modinfo in info_modules.items() if modname not in loaded_module_names]\n\n    build_paths = BuildPaths(source_paths, options, using_mods)\n    build_paths.public_headers.append(os.path.join(build_paths.build_dir, 'build.h'))\n\n    template_vars = create_template_vars(source_paths, build_paths, options, using_mods, not_using_mods, cc, arch, osinfo)\n\n    # Now we start writing to disk\n    do_io_for_build(cc, arch, osinfo, using_mods, info_modules, build_paths, source_paths, template_vars, options)\n\n    return 0\n\nif __name__ == '__main__':\n    try:\n        sys.exit(main(argv=sys.argv))\n    except UserError as e:\n        logging.debug(traceback.format_exc())\n        logging.error(e)\n    except Exception as e: # pylint: disable=broad-except\n        # error() will stop script, so wrap all information into one call\n        logging.error(\"\"\"%s\nAn internal error occurred.\n\nDon't panic, this is probably not your fault! Please open an issue\nwith the entire output at https://github.com/randombit/botan\n\nYou'll meet friendly people happy to help!\"\"\", traceback.format_exc())\n\n    sys.exit(0)\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "license.txt",
          "type": "blob",
          "size": 1.2802734375,
          "content": "Copyright (C) 1999-2025 The Botan Authors\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice,\n   this list of conditions, and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions, and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "news.rst",
          "type": "blob",
          "size": 107.625,
          "content": "Release Notes\n========================================\n\nVersion 3.7.0, Not Yet Released\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Notice: Botan 3.8.0 will increase the minimum version of LLVM Clang\n  needed to build the library from Clang 14 to Clang 17. (GH #4528 #4529)\n\n* Add post-quantum scheme Classic McEliece (GH #3883 #4448 #4458)\n\n* In TLS enable the hybrid x25519/ML-KEM-768 post quantum secure key\n  exchange by default for clients and servers. (GH #4305)\n\n* Support for the pre-standard Kyber-r3 key exchange has been removed from TLS\n  (GH #4507 #4403)\n\n* In TLS add support for \"pure\" ML-KEM key exchange, in addition\n  to the existing hybrid ML-KEM + EC suites. (GH #4393)\n\n* Add new EC key constructors (GH #4437)\n\n* Internal EC related cleanups and optimizations (GH #4385 #4432 #4436\n  #4492 #4479 #4510 #4511 #4512 #4517 #4518 #4532 #4533)\n\n* Add new operations to EC_AffinePoint (GH #4433 #4503)\n\n* TPM 2.0 improvements (GH #4429 #4430 #4482)\n\n* Add support for invoking Entropy Source and DRNG Manager (ESDM) RNG (GH #4309)\n\n* Fix some build issues for baremetal environments (GH #4521)\n\n* Fix a bug preventing parsing of OCSP responses containing more than\n  one pinned certificate (GH #4536)\n\n* Expand constant-time testing in CI to cover both GCC and Clang,\n  and multiple optimization levels. (GH #4421)\n\n* Allow configuring at build time how constant-time value barriers\n  are implemented. (GH #4447)\n\n* GCM/GHASH internal cleanups (GH #4469)\n\n* Internal cleanups related to calling ``getauxval`` (GH #4471)\n\n* Add a ``--timer-unit=`` option to ``botan speed`` (GH #4456 #4490)\n\n* Update the Limbo test suite (GH #4406)\n\n* Mark several classes not intended for derivation as ``final`` (GH #4419)\n\n* Add iterator debugging to CI (GH #4413)\n\n* Starting in 3.6.0, ``configure.py`` would pass through any values set as\n  ``CXXFLAGS`` into the link invocation as well. This was done to support\n  LTO style options. However it causes build regressions, especially with MSVC,\n  and so has been reverted. Using the new option ``--lto-cxxflags-to-ldflags``\n  will cause this passthrough behavior to continue. (GH #4196 #4200 #4451 #4452)\n\n* Fix an iterator error in the test suite (GH #4413)\n\n* Fix build issues caused by incompatible changes in Boost 1.87 (GH #4484)\n\n* Fix a build issue when AVX2 support is disabled (GH #4493)\n\n* Fix a build issue when compiling with MSVC on ARM (GH #4483)\n\nVersion 3.6.1, 2024-10-26\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Notice: Botan 3.7.0 will remove support for the currently supported\n  experimental Kyber r3 TLS ciphersuites, leaving only the standardized\n  ML-KEM suites. (GH #4407 #4403)\n\n* Fix a bug in x86 CPUID detection introduced in 3.6.0 which would cause\n  crashes on systems which have BMI1 but not BMI2. (GH #4402 #4401)\n\n* Fix a bug in SLH-DSA signing, which did not default to the FIPS\n  required randomized variant. (GH #4398)\n\n* Modify how elliptic curve blinding is performed, reducing the number\n  of self-additions that may occur during multiplication. (GH #4408)\n\n* In ``speed`` command line utility, also iterate keygen several times.\n  (GH #4381)\n\nVersion 3.6.0, 2024-10-21\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fully integrate and further optimize the new ECC library first introduced in\n  3.5.0. For common curves, operations are 2 to 3 times faster. This also\n  introduces a new API for low level EC operations, such a point multiplication,\n  using ``EC_Scalar`` and ``EC_AffinePoint`` types.\n  (GH   #4042 #4113 #4147 #4190 #4191 #4113 #4143 #4171 #4203 #4205 #4207\n  #4209 #4210 #4211 #4212 #4213 #4215 #4217 #4218 #4221 #4225 #4226 #4235\n  #4237 #4240 #4242 #4256 #4257 #4261 #4264 #4276 #4284 #4300)\n\n* Add support for FIPS 203 ML-KEM, the NIST standardized version of Kyber (GH #3893)\n\n* Add support for FIPS 204 ML-DSA, the NIST standardized version of Dilithium (GH #4270)\n\n* Add support for FIPS 205 SLH-DSA, the NIST standardized version of SPHINCS+ (GH #4291)\n\n* Add support for TPM2 hardware (GH #4337 #4357 #4361)\n\n* Add support for jitterentropy RNG (GH #4325)\n\n* Constant time programming improvements including ``CT::Option``\n  (GH #4175 #4197 #4198 #4204 #4207 #4254 #4260)\n\n* Improve performance of hex (GH #4275) and base64 (GH #4271)\n\n* In ECDSA blind the constant time inversion of the nonce, as an extra precaution\n  against side channel attacks. (GH #4259)\n\n* Add support for AVX2-VAES instructions (GH #4286 #4287)\n\n* Add GFNI-AVX2 acceleration for SM4 (GH #4289)\n\n* Add support for elliptic curve numsp512d1 (GH #4251)\n\n* Apply const-time checking annotations to Dilithium and Kyber (GH #4223),\n  X448/Ed448 (GH #4204), FrodoKEM (GH #4198), LMS (GH #4272)\n\n* Refactor internals of Dilithium and Kyber to share common elements (GH #4024)\n\n* Add a test suite for validating the const-time annotations (GH #4182)\n\n* Internal refactorings of public key encryption to improve memory\n  safety and side channel resistance. (GH #4238 #4239)\n\n* Cache the DER encoding of the OID format of an elliptic curve (GH #4193)\n\n* Correct inconsistencies with use of ``BOTAN_CLEAR_CPUID`` where dependent\n  instruction sets were not always disabled. (GH #4290)\n\n* Deprecate the x25519/Kyber-512-r3 TLS ciphersuite. (GH #4347)\n\n* Add CI nightly test using Intel SDE to test AVX-512 (GH #4296)\n\n* Fix armv7/aarch64 CPU feature detection on FreeBSD (GH #4315)\n\n* Add support for armv7/aarch64/ppc64 CPU feature detection on OpenBSD,\n  using a new API added in OpenBSD 7.6 (GH #4312)\n\n* Fix a bug in the ``speed`` cli utility which caused it to report incorrect\n  values, especially for ciphers/hashes with small input sizes. (GH #4311)\n\n* Fix a bug where CMake and pkg-config files might be installed to the\n  wrong path (GH #4236 #4231)\n\n* Fix certificate validation when the trust root is a self-signed MD2 cert.\n  (GH #4247 #4248)\n\n* Internal \"strong types\" improvments (GH #4170)\n\n* Refactor the ``speed`` cli utility (GH #4364 #4367 #4369)\n\n* Fix a test that was somewhat brittle and would fail if a specific\n  certificate was not in the system trust root store. (GH #4280)\n\n* Update some documentation comments (GH #4185)\n\n* In Argon2, avoid instantiating a thread pool when ``p == 1`` (GH #4195 #4199)\n\n* Disable the thread pool by default on Emscripten target (GH #4195 #4199)\n\n* Add compile time option to disable all use of inline assembly (GH #4273 #4265)\n\nVersion 3.5.0, 2024-07-08\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* CVE-2024-34702: Fix a DoS caused by excessive name constraints. (GH #4186)\n\n* CVE-2024-39312: Fix a name constraint processing error, where if\n  permitted and excluded rules both applied to a certificate, only the\n  permitted rules would be checked.\n\n* Add a new much faster elliptic curve implementation. In this release,\n  this implementation is only used for hash2curve. (GH #3979)\n\n* Add support for LMS hash based signatures (GH #3716 #4059)\n\n* Add support for SSLKEYLOGFILE logging (GH #4043)\n\n* Optimize processing in FFI ``botan_cipher_update`` (GH #3951)\n\n* Add ``Public_Key::raw_public_key_bits`` (GH #3985)\n\n* Optimize XTS mode (GH #4047)\n\n* Optimize name constraint processing (GH #4047)\n\n* Optimize FrodoKEM-AES (GH #4176 #4174 #4173)\n\n* The build system now distinguishes between LLVM Clang and XCode's Clang\n  fork. For the latter, use compiler target \"xcode\". (GH #4010)\n\n* Fix a bug in ``scrypt`` autotune where, if it was called with a\n  nominal maximum memory limit of zero (meant to indicate no limit)\n  would only ever return parameters using 1 MB.\n\n* Constant time programming improvements including ``CT::value_barrier``\n  and ``CT::Choice`` (GH #4154 #4115 #4096 #4108)\n\n* Refactor and optimize AlternativeName. This includes a new API.\n  The old API is retained but deprecated. (GH #4034)\n\n* Kyber internals refactoring (GH #3887)\n\n* Generate Kuznyechik tables at compile time instead of hard coding them.\n  (GH #4017)\n\n* Enable using ``sysctlbyname`` on iOS (GH #4018)\n\n* Previously Curve25519 was used to refer to key exchange over the Montgomery\n  curve modulo 2**255-19. This is now called X25519 in all cases. Typedefs and a\n  deprecated header are retained for compatibility with older versions. (GH\n  #4012)\n\n* Fix several bugs related to encoding and decoding ASN.1 object identifiers\n  when the second arc is larger than 40. (GH #4063 #4023)\n\n* Avoid sending IP addresses in the Server Name Indicator TLS extension, if\n  an IP address is used to initialize the TLS_Server_Info struct. (GH #4059)\n\n* During X.509 certificate verification, first verify the entire sequence\n  of signatures, then do other validation. (GH #4045)\n\n* In DTLS fix a bug affecting retransmission of client hellos. (GH #4037)\n\n* Fix a number of bugs related to name constraint processing. (GH #4074)\n\n* Add support for parsing TNAuthList (secure telephony identity credentials\n  extension) from RFC 8226. (GH #4116)\n\n* Add One-Step KDF from SP 800-56C (GH #4121)\n\n* Fix a bug in RFC 6979 mode ECDSA. This only caused problems when\n  testing with certain curves and does not have any security or interop\n  implications. (GH #4040)\n\n* Previously elliptic curve private keys could be of any size, with the\n  effective key reduced modulo the group order. Now during decoding the\n  private key must be in the specified bound. (GH #4040)\n\n* Elliptic curve groups now verify that the prime and group order are\n  related in the manner expected. (GH #4039 #4041)\n\n* Add a script to run the Limbo X.509 path validation test suite.\n\n* Update the BoGo TLS test suite (GH #4078)\n\n* Deprecate various low level BigInt and elliptic curve interfaces (GH #4038 #4056)\n\n* In 3.3.0, support for application specific curves in EC_Group with\n  parameters larger than 521 bits was deprecated. This release expands\n  that deprecation to further restrict future use of application\n  specific curves (see deprecated.rst for details). Add a new EC_Group\n  constructor which enforces these restrictions. (GH #4038)\n\n* Fix a bug when creating a PKCS10 request or X.509 self signed certificate\n  when SubjectAlternativeName was included in the provided extensions. If\n  this occurred, any other values (eg opts.dns) would be ignored. (GH #4032)\n\n* Various low level multi precision integer refactorings and improvements.\n  (GH #4156 #4149 #4007 #4008 #3989 #3987)\n\n* Increase the maximum supported key length of KMAC to 192 bytes (GH #4109)\n\n* Improve the utilities for checked (overflow safe) addition and multiplication.\n  (GH #3999)\n\n* Optimize parsing of IPv4 dotted quad strings (GH #4058)\n\n* A system for marking modules as deprecated was introduced in 3.4.0, but it did\n  not mark any modules as deprecated. This has now been applied to various\n  modules, which will then be disabled if ``--disable-deprecated-features``\n  option is used at build time. (GH #4050)\n\n* Fix a bug in ``configure.py`` that caused ``--with-stack-protector`` to not\n  work. (GH #3996)\n\n* Upgrade CI to use XCode 15.2 on x86-64 and XCode 15.3 on aarch64. (GH #4005)\n\n* Update most CI builds to run on Ubuntu 24.04 (GH #4098)\n\n* Various ``clang-tidy`` fixes (GH #4070 #4075)\n\n* Fixes for GCC 14 (GH #4046)\n\n* Fix Roughtime to not reference a deprecated Cloudflare server. (GH #4002 #3937)\n\nVersion 3.4.0, 2024-04-08\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add Ed448 signatures and X448 key exchange (GH #3933)\n\n* X.509 certificate verification now can optionally ignore the\n  expiration date of root certificates. (GH #3938)\n\n* Support for \"hybrid\" EC point encoding is now deprecated. (GH #3981)\n\n* Support for creating EC_Group objects with parameters larger than\n  521 bits is now deprecated (GH #3980)\n\n* Add new build options to disable deprecated features, and to enable\n  experimental features. (GH #3910)\n\n* Fix a bug affecting use of SIV and CCM ciphers in the FFI interface.\n  (GH #3971)\n\n* Add new FFI interface ``botan_cipher_requires_entire_message`` (GH #3969)\n\n* Internal refactorings of the mp layer to support a new elliptic\n  curve library. (GH #3973 #3977 #3962 #3957 #3964 #3956 #3961 #3950)\n\n* Use a new method for constant time division in Kyber to avoid a possible\n  side channel where the compiler inserts use of a variable time division.\n  (GH #3959)\n\n* Refactor test RNG usage to improve reproducibility. (GH #3920)\n\n* Add ``std::span`` interfaces to ``BigInt`` (GH #3866)\n\n* Refactorings and improvements to low level load/store utility\n  functions. (GH #3869)\n\n* Fix the amalgamation build on ARM64 (GH #3931)\n\n* Add Mac ARM based CI build (GH #3931)\n\n* Fix a thread serialization bug that caused sporadic test failures.\n  (GH #3922)\n\n* Update GH Actions to v4 (GH #3923)\n\n* Add examples of password based encryption and HTTPS+ASIO client.\n  (GH #3935 #3910)\n\nVersion 3.3.0, 2024-02-20\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* CVE-2024-34703 Fix a potential denial of service caused by accepting\n  arbitrary length primes as potential elliptic curve parameters in\n  ASN.1 encodings. With very large inputs the primality verification\n  can become computationally expensive. Now any prime field larger\n  than 1024 bits is rejected immediately. Reported by Bing Shi. (GH #3913)\n\n* Add FrodoKEM post-quantum KEM (GH #3679 #3807 #3892)\n\n* Add support for Blake2s (GH #3796)\n\n* Add support for RFC 7250 in TLS 1.3 to allow authenticating peers\n  using raw public keys (GH #3771)\n\n* Update the BSI TLS policy to match the latest TR, particularly\n  enabling support for TLS 1.3 (GH #3809)\n\n* Add AsymmetricKey::generate_another() to generate a new key of the\n  same type and parameters as an existing key (GH #3770 #3786)\n\n* Add Private_Key::remaining_operations() that indicates the number of\n  remaining signatures for stateful hash-based signatures (GH #3821)\n\n* Add implementation of EC_PrivateKey::check_key() (GH #3782 #3804)\n\n* Add hardware acceleration for SHA-512 on ARMv8 (GH #3860 #3864)\n\n* X.509 certificates that contain Authority Information Access (AIA)\n  extensions can now be encoded (GH #3784)\n\n* Various functions defined in ``mem_ops.h`` are now deprecated\n  for public use (GH #3759 #3752 #3757)\n\n* The ASIO TLS stream can now be used with C++20 coroutines (GH #3764)\n\n* New public header asio_compat.h to check compatibility of the ASIO\n  TLS stream with the available boost version (1.73.0+) (GH #3765)\n\n* Flatten input buffer sequences in the ASIO TLS stream to avoid\n  creating unnecessarily small TLS records (GH #3839)\n\n* Hard-rename the potentially harmful build configuration flag\n  --terminate-on-asserts to --unsafe-terminate-on-asserts (GH #3755)\n\n* Use modern SQLite3 APIs with integer width annotations from SQLite3 3.37\n  (GH #3788 #3793)\n\n* Generate and install a CMake package config file (botan-config.cmake)\n  (GH #3722 #3827 #3830 #3825)\n\n* Add TLS::Channel::is_handshake_complete() predicate method (GH #3762)\n\n* Add support for setting thread names on Haiku OS and DragonflyBSD\n  (GH #3758 #3785)\n\n* Use /Zc:throwingNew with MSVC (GH #3858)\n\n* Work around a warning in GCC 13 (GH #3852)\n\n* Add a CLI utility for testing RSA side channels using the MARVIN\n  toolkit (GH #3749)\n\n* CLI utility 'tls_http_server' is now based on Boost Beast\n  (GH #3763 #3791)\n\n* CLI utility 'tls_client_hello' can detect and handle TLS 1.3 messages\n  (GH #3820)\n\n* Add a detailed migration guide for users of OpenSSL 1.1 (GH #3815)\n\n* Various updates to the documentation and code examples\n  (GH #3777 #3805 #3802 #3794 #3815 #3823 #3828 #3842 #3841 #3849 #3745)\n\n* Fixes and improvements to the build experience using ``ninja``\n  (GH #3751 #3750 #3769 #3798 #3848)\n\n* Fix handling of cofactors when performing scalar blinding in EC (GH #3803)\n\n* Fix potential timing side channels in Kyber (GH #3846 #3874)\n\n* Fix a potential dangling reference resulting in a crash in the OCB\n  mode of operation (GH #3814)\n\n* Fix validity checks in the construction of the ASIO TLS stream\n  (GH #3766)\n\n* Fix error code handling in ASIO TLS stream (GH #3795 #3801 #3773)\n\n* Fix a TLS 1.3 assertion failure that would trigger if the\n  application callback returned an empty certificate chain. (GH #3754)\n\n* Fix a RFC 7919 conformance bug introduced in 3.2.0, where the TLS\n  server would fail to reject a client hello that advertised (only)\n  FFDHE groups that are not known to us. (GH #3743 #3742 #3729)\n\n* Fix that modifications made in TLS::Callbacks::tls_modify_extensions()\n  for the TLS 1.3 Certificate message were not being applied. (GH #3792)\n\n* Fix string mapping of the PKCS#11 mechanism RSA signing mechanism that\n  use SHA-384 (GH #3868)\n\n* Fix a build issue on NetBSD (GH #3767)\n\n* Fix the configure.py to avoid recursing out of our source tree (GH #3748)\n\n* Fix various clang-tidy warnings (GH #3822)\n\n* Fix CLI tests on windows and enable them in CI (GH #3845)\n\n* Use ``BufferStuffer`` and ``concat`` helpers in public key code\n  (GH #3756 #3753)\n\n* Add a nightly test to ensure hybrid TLS 1.3 PQ/T compatibility with\n  external implementations (GH #3740)\n\n* Internal memory operation helpers are now memory container agnostic\n  using C++20 ranges (GH #3715 #3707)\n\n* Public and internal headers are now clearly separated in the build\n  directory. That restricts the examples build target to public headers.\n  (GH #3880)\n\n* House keeping for better code formatting with clang-format\n  (GH #3862 #3865)\n\n* Build documentation in CI and fail on warnings or errors (GH #3838)\n\n* Work around a GitHub Actions CI issue (actions/runner-images#8659)\n  (GH #3783 #3833 #3888)\n\nVersion 3.2.0, 2023-10-09\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add support for (experimental!) post-quantum secure key exchange\n  in TLS 1.3 (GH #3609 #3732 #3733 #3739)\n\n* Add support for TLS PSK (GH #3618)\n\n* Add a first class interface for XOFs (GH #3671 #3672 #3701)\n\n* Add KMAC from NIST SP 800-185 (GH #3689)\n\n* Add cSHAKE XOF; currently this is not exposed to library users but\n  is only for deriving further cSHAKE derived functions. (GH #3671)\n\n* Add improved APIs for key encapsulation (GH #3611 #3652 #3653)\n\n* As Kyber's 90s mode is not included in the NIST draft specification,\n  and most implementations only support the SHAKE based mechanism,\n  the Kyber 90s mode is now deprecated. (GH #3695)\n\n* Previously ``KyberMode`` enums had elements like ``Kyber512`` to identify the\n  scheme. These have changed to have ``_R3`` suffixes (like ``Kyber512_R3``) to\n  clearly indicate these are not the final version but is instead the version\n  from round3 of the PQC competition. The old names continue on as (deprecated)\n  aliases. (GH #3695)\n\n* Fix bugs in various signature algorithms where if a signature\n  operation was used after the key object had been deleted, a use\n  after free would occur. (GH #3702)\n\n* The types defined in pubkey.h can now be moved (GH #3655)\n\n* Add the Russian block cipher Kuznyechik (GH #3680 #3724)\n\n* The ``TLS::Group_Params`` enum is now a class which emulates the\n  behavior of the enumeration. (GH #3729)\n\n* Implement serialization for the Certificate Authority TLS extension\n  (GH #3687)\n\n* Refactored the internal buffering logic of most hash functions\n  (GH #3705 #3693 #3736)\n\n* Add OS support for naming threads; now Botan thread pool threads\n  are identified by name. (GH #3628 #3738)\n\n* Updated the TLS documentation to reflect TLS 1.3 support and\n  the removal of TLS 1.0 and 1.1. (GH #3708)\n\n* Upon deserialization, the ``EC_Group`` type now tracks the encoding\n  which was used to create it. This is necessary to implement policies\n  which prohibit use of explicit curve encodings (which are in any case\n  deprecated). (GH #3665)\n\n* If compiling against an old glibc which does not support the ``getrandom``\n  call, now the raw syscall is used instead. (GH #3688 #3685)\n\n* On MinGW the global thread pool is disabled by default (GH #3726 #2582)\n\n* Various internal functions now use ``std::span`` instead of raw pointers\n  plus length field. NOTE: any implementations of ``BlockCipher``, ``HashFunction``\n  etc that live outside the library will have to be updated. This is not covered\n  by the SemVer guarantee; see ``doc/sem_ver.rst`` (GH #3684 #3681 #3713 #3714\n  #3698 #3696)\n\n* Add helper for buffer alignment, and adopt it within the hash function\n  implementations. (GH #3693)\n\n* Added support for encoding CRL Distribution Points extension in new\n  certificates (GH #3712)\n\n* Internal refactoring of SHA-3 to support further SHA-3 derived functionality\n  (GH #3673)\n\n* Add support for testing using TLS-Anvil (GH #3651) and fix a few cases\n  where the TLS implementation sent the incorrect alert type in various\n  error cases which were discovered using TLS-Anvil (GH #3676)\n\n* Add initial (currently somewhat experimental) support for using the ninja\n  build system as an alternative to make. (GH #3677)\n\n* Remove an unused variable in BLAKE2b (GH #3624)\n\n* Fix a number of clang-tidy warnings in the headers (GH #3646)\n\n* Add checks for invalid length AD in Argon2 (GH #3626)\n\n* CI now uses Android NDK 26, and earlier NDKs are not supported\n  due to limitations of the C++ library in earlier NDKs (GH #3718)\n\n* Improve support for IBM's XLC compiler (GH #3730)\n\n* Avoid compilation failures when using ``-Werror`` mode with GCC 12\n  due to spurious warnings in that version. (GH #3711 #3709)\n\nVersion 3.1.1, 2023-07-13\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fix two tests which were insufficiently serialized. This would\n  cause sporadic test failures, particularly on machines with\n  many cores. (GH #3625 #3623)\n\nVersion 3.1.0, 2023-07-11\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add SPHINCS+ post quantum hash based signature scheme (GH #3564 #3549)\n\n* Several small TLS compliance fixes, primarily around rejecting\n  invalid behavior from the peer (GH #3520 #3537)\n\n* Adapt TLS 1.3 to use a KEM interface to prepare for PQ key exchange\n  (GH #3608)\n\n* Fix custom key exchange logic integration for TLS 1.2 server (GH #3539)\n\n* Add initial wrappers for using AVX-512, and implement AVX-512 versions\n  of ChaCha and Serpent. (GH #3206 #3536)\n\n* Add support for an environmental variable which can disable CPU extensions\n  (GH #3535)\n\n* Update the BSI policy to match the latest TR (GH #3482)\n\n* Update the BoringSSL test suite shim (GH #3616)\n\n* Add FFI functions relating to Kyber key management (GH #3546)\n\n* The entire codebase has been reformatted using ``clang-format``.\n  (GH #3502 #3558 #3559)\n\n* Fix many warnings generated from ``clang-tidy``.\n\n* ``BigInt::random_integer`` could take a long time if requested to\n  generate a number within a small range between two large integers.\n  (GH #3594)\n\n* Fix bugs related to ``--library-suffix`` option. (GH #3511)\n\n* Improve cli handling of PBKDF configuration (GH #3518)\n\n* Fix the cli to properly update stateful keys (namely XMSS) when using such\n  a key to sign a X.509 certificate (GH #3579)\n\n* Add support for using PSK in the TLS CLI utilities (GH #3552)\n\n* Add an example of hybrid RSA+symmetric encryption (GH #3551)\n\n* In the Python module, the pbkdf function defaulted to 10K iterations.\n  This has been changed to 100K.\n\n* Switch to using coveralls.io for coverage report (GH #3512)\n\n* Add a script to analyze the output of ``botan timing_test``\n\n* Due to problems that arise if the build directory and source\n  directory are on different filesystems, now hardlinks are only\n  used during the build if explicitly requested. (GH #3504)\n\n* The ``ffi.h`` header no longer depends on the ``compiler.h`` header.\n  (GH #3531)\n\n* Avoid using varargs macros for ``BOTAN_UNUSED`` (GH #3530)\n\n* Small base64 encoding optimization (GH #3528)\n\n* If the build system detects that the compiler in use is not supported,\n  it will error immediately rather than allow a failing build. Currently\n  this is only supported for GCC, Clang, and MSVC. (GH #3526)\n\n* The examples are now a first class build target; include\n  ``examples`` in the set provided to ``--build-targets=`` option in\n  order to enable them. (GH #3527)\n\n* Remove the (undocumented, unsupported) support for CMake (GH #3501)\n\nVersion 3.0.0, 2023-04-11\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Botan is now a C++20 codebase; compiler requirements have been\n  increased to GCC 11, Clang 14, or MSVC 2022. (GH #2455 #3086)\n\nBreaking Changes\n----------------------------------------\n\n* Remove many deprecated headers. In particular all algorithm specific\n  headers (such as ``aes.h``) are no longer available; instead objects\n  must be created through the base class ``create`` functions. (GH #2456)\n\n* Removed most functions previously marked as deprecated.\n\n* Remove several deprecated algorithms including CAST-256, MISTY1, Kasumi,\n  DESX, XTEA, PBKDF1, MCEIES, CBC-MAC, Tiger, NEWHOPE, and CECPQ1 (GH #2434 #3094)\n\n* Remove the entropy source which walked ``/proc`` as it is no longer\n  required on modern systems. (GH #2692)\n\n* Remove the entropy source which reads from ``/dev/random`` as it is\n  supplanted by the extant source one which reads from the system RNG.\n  (GH #2636)\n\n* Remove use of ``shared_ptr`` from certificate store API, as since\n  2.4.0 ``X509_Certificate`` is internally a ``shared_ptr``. (GH #2484)\n\n* Several enums including ``DL_Group::Format``, ``EC_Group_Formatting``,\n  ``CRL_Code``, ``ASN1_Tag``, ``Key_Constraints`` and ``Signature_Format`` are\n  now ``enum class``.  The ``ASN1_Tag`` enum has been split into ``ASN1_Type``\n  and ``ASN1_Class``.  (GH #2551 #2552 #3084 #2584 #3225)\n\n* Avoid using or returning raw pointers whenever possible. (GH #2683 #2684\n  #2685 #2687 #2688 #2690 #2691 #2693 #2694 #2695 #2696 #2697 #2700 #2703 #2708\n  #3220)\n\n* Remove support for HP and Pathscale compilers, Google NaCL (GH #2455),\n  and IncludeOS (GH #3406)\n\n* Remove deprecated ``Data_Store`` class (GH #2461)\n\n* Remove deprecated public member variables of ``OID``, ``Attribute``,\n  ``BER_Object``, and ``AlgorithmIdentifier``. (GH #2462)\n\n* \"SHA-160\" and \"SHA1\" are no longer recognized as names for \"SHA-1\"\n  (GH #3186)\n\nTLS Changes\n----------------------------------------\n\n* Added support for TLS v1.3\n\n* Support for TLS 1.0, TLS 1.1, and DTLS 1.0 have been removed (GH #2631)\n\n* Remove several deprecated features in TLS including DSA ciphersuites (GH #2505),\n  anonymous ciphersuites (GH #2497), SHA-1 signatures in TLS 1.2 (GH #2537),\n  SRP ciphersuites (GH #2506), SEED ciphersuites (GH #2509),\n  Camellia CBC ciphersuites (GH #2509), AES-128 OCB ciphersuites (GH #2511),\n  DHE_PSK suites (GH #2512), CECPQ1 ciphersuites (GH #3094)\n\nNew Cryptographic Algorithms\n----------------------------------------\n\n* Add support for Kyber post-quantum KEM (GH #2872 #2500)\n\n* Add support for Dilithium lattice based signatures (GH #2973 #3212)\n\n* Add support for hashing onto an elliptic curve using the SSWU\n  technique of draft-irtf-cfrg-hash-to-curve (GH #2726)\n\n* Add support for keyed BLAKE2b (GH #2524)\n\nNew APIs\n----------------------------------------\n\n* Add new interface ``T::new_object`` which supplants ``T::clone``. The\n  difference is that ``new_object`` returns a ``unique_ptr<T>`` instead of a raw\n  pointer ``T*``. ``T::clone`` is retained but simply releases the result of\n  ``new_object``. (GH #2689 #2704)\n\n* Add an API to ``PasswordHash`` accepting an AD and/or secret key, allowing\n  those facilities to be used without using an algorithm specific API (GH #2707)\n\n* Add new ``X509_DN::DER_encode`` function. (GH #2472)\n\n* New API ``Public_Key::get_int_field`` for getting the integer fields of a public\n  (or private) key by name (GH #3200)\n\n* New ``Cipher_Mode`` APIs ``ideal_granularity`` and ``requires_entire_message``\n  (GH #3172 #3168)\n\n* New ``Private_Key::public_key`` returns a new object containing the public\n  key associated with that private key. (GH #2520)\n\n* ``SymmetricAlgorithm::has_keying_material`` allows checking if a key has\n  already been set on an object (GH #3295)\n\n* Many new functions in the C89 interface; see the API reference for more details.\n\nImplementation Improvements\n----------------------------------------\n\n* Add AVX2 implementation of Argon2 (GH #3205)\n\n* Use smaller tables in the implementations of Camellia, ARIA, SEED, DES,\n  and Whirlpool (GH #2534 #2558)\n\n* Modify DES/3DES to use a new implementation which avoids most\n  cache-based side channels. (GH #2565 #2678)\n\n* Optimizations for SHACAL2, especially improving ARMv8 and POWER (GH #2556 #2557)\n\n* Add a fast path for inversion modulo ``2*o`` with ``o`` odd, and modify RSA\n  key generation so that ``phi(n)`` is always of this form. (GH #2634)\n\n* Use constant-time code instead of table lookups when computing parity bits\n  (GH #2560), choosing ASN.1 string type (GH #2559) and when converting to/from\n  the bcrypt variant of base64 (GH #2561)\n\n* Change how DL exponents are sized; now exponents are slightly larger and\n  are always chosen to be 8-bit aligned. (GH #2545)\n\nOther Improvements\n----------------------------------------\n\n* Changes to ``TLS::Stream`` to make it compatible with generic completion tokens.\n  (GH #2667 #2648)\n\n* When creating an ``EC_Group`` from parameters, cause the OID to be set if it\n  is a known group. (GH #2654 #2649)\n\n* Fix bugs in GMAC and SipHash where they would require a fresh key be\n  provided for each message. (GH #2908)\n\nVersion 2.19.5, 2024-07-08\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* A reminder that Botan2 reaches end of life at the end of 2024\n\n* CVE-2024-34702: Fix a DoS caused by excessive name constraints. (GH #4187)\n\n* CVE-2024-39312: Fix a name constraint processing error, where if\n  permitted and excluded rules both applied to a certificate, only the\n  permitted rules would be checked. (GH #4187)\n\n* Fix a crash in OCB (GH #3812 #3924)\n\n* During certificate verification, first verify the entire chain of\n  certificates, then perform other validation. (GH #4052 #4045)\n\n* Fix a test failure in compression with certain versions of zlib (GH #4135 #3896)\n\n* Fix some iterator debugging errors in TLS CBC decryption. (GH #4125 #4130)\n\n* Avoid a miscompilation in ARIA when using XCode 14 (GH #3465 #3492 #4053)\n\nVersion 2.19.4, 2024-02-20\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* CVE-2024-34703 Fix a potential denial of service caused by accepting\n  arbitrary length primes as potential elliptic curve parameters in\n  ASN.1 encodings. With very large inputs the primality verification\n  can become computationally expensive. Now any prime field larger\n  than 1024 bits is rejected immediately. Reported by Bing Shi. (GH #3914)\n\n* Switch to using a constant time binary algorithm for computing\n  GCD (GH #3912)\n\n* Fix a bug in SHAKE_Cipher which could cause incorrect output\n  if set_key was called multiple times. (GH #3192)\n\n* Fix a bug in RSA-KEM encryption where the shared secret key\n  was incorrectly not padded to exactly the byte length of the\n  modulus. This would cause an incorrect shared key with ~1/256\n  probability. (GH #3380)\n\n* In RSA decryption and signature verification, reject bytestrings\n  which are longer than the public modulus. Previously, otherwise\n  valid signatures/ciphertexts with additional leading zero bytes\n  would also be accepted. (GH #3380)\n\n* Add support for short nonces in XTS (GH #3384 #3336)\n\n* Fix NIST keywrap which was incorrect when wrapping 64-bit keys\n  (GH #3384 #3340)\n\n* Fix nonce handling bug in EAX (GH #3382 #3335)\n\n* Fix a bug in PKCS11 AttributeContainer where adding an attribute\n  that already existed could cause incorrect references to the\n  existing attributes. (GH #3185)\n\n* Apply patches which allow GCC 4.7 to compile Botan 2.x. Previously\n  at least GCC 4.8 had been required. (GH #3273)\n\n* Fix a build time problem affecting VCpkg (GH #3071)\n\n* Fix a build problem affecting Windows ARM with Visual C++ (GH #3871)\n\nVersion 2.19.3, 2022-11-16\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* CVE-2022-43705: A malicious OCSP responder could forge OCSP\n  responses due to a failure to validate that an embedded certificate\n  was issued by the end-entity issuing certificate authority.\n\nVersion 2.19.2, 2022-06-03\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add support for parallel computation in Argon2 (GH #2937 #2926)\n\n* Add SSSE3 implementation of Argon2 (GH #2937 #2927)\n\n* The OpenSSL provider was incompatible with OpenSSL 3.0.\n  It has been removed (GH #2902)\n\n* Avoid using reserve in secure_vector appending, which caused\n  a performance problem (GH #2945 #2920)\n\n* Fix TLS::Text_Policy behavior when X25519 is disabled\n  at build time (GH #2894)\n\n* Fix several warnings from Clang (#2888 #2886)\n\nVersion 2.19.1, 2022-01-21\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fix a compilation problem affecting macOS XCode (GH #2880)\n\n* Fix a build problem preventing amalgamation builds in 2.19.0\n  (GH #2879)\n\nVersion 2.19.0, 2022-01-19\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add a forward error correction code compatible with the\n  zfec library (GH #2868 #2866)\n\n* Improve Emscripten build (GH #2864)\n\n* Always use ``-L`` before build flags (GH #2858 2848)\n\n* Fix compilation issue on earlier macOS versions (GH #2851)\n\n* Add a GCC 4.8 CI target to prevent build regressions (GH #2869)\n\n* Add support for Loongarch64 (GH #2877)\n\n* Check OSXSAVE flag before using AVX2 instructions (GH #2878)\n\nVersion 2.18.2, 2021-10-25\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Avoid using short exponents when encrypting in ElGamal, as some PGP\n  implementations generate keys with parameters that are weak when\n  short exponents are used (GH #2794)\n\n* Fix a low risk OAEP decryption side channel (GH #2797)\n\n* Work around a miscompilation of SHA-3 caused by a bug in Clang 12\n  and XCode 13. (GH #2826)\n\n* Remove support in OpenSSL provider for algorithms which are\n  disabled by default in OpenSSL 3.0 (GH #2823, #2814)\n\n* Add CI based on GitHub actions to replace Travis CI (GH #2632)\n\n* Fix the online OCSP test, as the certificate involved had expired.\n  (GH #2799)\n\n* Fix some test failures induced by the expiration of the trust root\n  \"DST Root CA X3\" (GH #2820)\n\nVersion 2.18.1, 2021-05-09\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fix a build regression in 2.18.0 which caused linker flags which\n  contain ``-l`` within them (such as ``-fuse-linker-plugin``) to\n  be misinterpreted. (GH #2715)\n\n* Fix a bug which caused decoding a certificate which contained\n  more than one name in a single RDN. (GH #2611 #2630 #2724)\n\n* Fix a bug which caused OID lookup failures when run in a locale\n  which uses thousands separators (pt_BR was reported as having\n  this issue). (GH #2732 #2730 #2237)\n\n* DNS names in name constraints were compared with case sensitivity, which\n  could cause valid certificates to be rejected. (GH #2739 #2735)\n\n* X.509 name constraint extensions were rejected if non-critical. RFC 5280\n  requires conforming CAs issue such extensions as critical, but not all\n  certificates are compliant, and all other known implementations do not\n  require this. (GH #2739 #2736)\n\n* X.509 name constraints were incorrectly applied to the certificate which\n  included the constraint. (GH #2739 #2737)\n\nVersion 2.18.0, 2021-04-15\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add support for implementing custom RNG objects through the\n  FFI interface (GH #2627 #2600)\n\n* Improve safegcd bounds, improving runtime performance (GH #2628 #2619)\n\n* Fix a bug introduced in 2.9.0 where BigInt::operator< would return\n  an incorrect result if both operands were negative. (GH #2641 #2638)\n\n* Reject non-TLS messages as quickly as possible without waiting for\n  a full record. (GH #2676)\n\n* Add build support for RISC-V 32\n\n* Fixes for TLS::Stream::async_shutdown (GH #2673)\n\n* Fix a regression introduced in 2.17.0 where LDFLAGS which add an extra\n  library (such as ``-latomic`` needed on SPARC) were not always applied\n  effectively. (GH #2622 #2623 #2625)\n\nVersion 2.17.3, 2020-12-21\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* CVE-2021-24115 Change base64, base58, base32, and hex encoding and\n  decoding operations to run in constant time (GH #2549)\n\n* Fix a build problem on PPC64 building with Clang (GH #2547)\n\n* Fix an install problem introduced in 2.17.2 affecting MSVC 2015\n\n* Fix use of -L flag in linking when configured using ``--with-external-libdir``\n  (GH #2496)\n\n* Fix a build problem on big-endian PowerPC related to VSX instructions\n  in the AES code. (GH #2515)\n\nVersion 2.17.2, 2020-11-13\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fix an build problem on ppc64 introduced with certain recent\n  versions of GCC or binutils where using the DARN instruction\n  requires using an appropriate -mcpu flag to enable the instruction\n  in the assembler. (GH #2481 2463)\n\n* Resolve an issue in the modular square root algorithm where a loop\n  to find a quadratic non-residue could, for a carefully chosen\n  composite modulus, not terminate in a timely manner. (GH #2482 #2476)\n\n* Fix a regression in MinGW builds introduced in 2.17.1\n\nVersion 2.17.1, 2020-11-07\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fix a build problem that could occur if Python was not in the PATH.\n  This was known to occur on some installations of macOS.\n\n* Re-enable support for the x86 CLMUL instruction on Visual C++, which was\n  accidentally disabled starting in 2.12.0. (GH #2460)\n\nVersion 2.17.0, 2020-11-05\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fix a bug in ECDSA which could occur when the group size and hash length\n  differ. In this case, on occasion the generated signature would not be\n  accepted by other ECDSA implementations. This was particularly likely to\n  affect users of 160-bit or 239-bit curves. (GH #2433 #2415)\n\n* Fix a bug in ECDSA verification when the public key was chosen to be\n  a small multiple of the group generator. In that case, verification\n  would fail even if the signature was actually valid. (GH #2425)\n\n* SIV's functionality of supporting multiple associated data inputs has been\n  generalized onto the AEAD_Mode interface. However at the moment SIV is the\n  only AEAD implemented which supports more than one AD. (GH #2440)\n\n* The contents of ASN.1 headers ``asn1_str.h``, ``asn1_time.h``, ``asn1_oid.h``\n  and ``alg_id.h`` have been moved to ``asn1_obj.h``. The header files remain\n  but simply forward the include to ``asn1_obj.h``. These now-empty header files\n  are deprecated, and will be removed in a future major release. (GH #2441)\n\n* The contents of X.509/PKIX headers ``asn1_attribute.h`` ``asn1_alt_name.h``\n  ``name_constraint.h`` ``x509_dn.h`` ``cert_status.h`` and ``key_constraint.h``\n  have been merged into ``pkix_enums.h`` (for enumerations) and ``pkix_types.h``\n  (for all other definitions). The previous header files remain but simply\n  forward the include to the new header containing the definition. These\n  now-empty header files are deprecated, and will be removed in a future major\n  release. (GH #2441)\n\n* A number of other headers including those related to HOTP/TOTP, XMSS,\n  PKCS11, PSK_DB have also been merged. Any now deprecated/empty headers\n  simply include the new header and issue a deprecation warning.\n  (GH #2443 #2446 #2447 2448 #2449)\n\n* Small optimizations in the non-hardware assisted AES key generation\n  code path (GH #2417 #2418)\n\n* Move the GHASH code to a new module in utils, making it possible\n  to build GMAC support without requiring GCM (GH #2416)\n\n* Add more detection logic for AVX-512 features (GH #2430)\n\n* Avoid std::is_pod which is deprecated in C++20 (GH #2429)\n\n* Fix a bug parsing deeply nested cipher names (GH #2426)\n\n* Add support for ``aarch64_be`` target CPU (GH #2422)\n\n* Fix order of linker flags so they are always applied effectively (GH #2420)\n\n* Prevent requesting DER encoding of signatures when the algorithm\n  did not support it (GH #2419)\n\nVersion 2.16.0, 2020-10-06\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Now userspace PRNG objects (such as AutoSeeded_RNG and HMAC_DRBG)\n  use an internal lock, which allows safe concurrent use. This however\n  is purely a precaution in case of accidental sharing of such RNG\n  objects; for performance reasons it is always preferable to use\n  a RNG per thread if a userspace RNG is needed. (GH #2399)\n\n* DL_Group and EC_Group objects now track if they were created from a\n  known trusted group (such as P-256 or an IPsec DH parameter).  If\n  so, then verification tests can be relaxed, as compared to\n  parameters which may have been maliciously constructed in order to\n  pass primality checks. (GH #2409)\n\n* RandomNumberGenerator::add_entropy_T assumed its input was a POD\n  type but did not verify this. (GH #2403)\n\n* Support OCSP responders that live on a non-standard port (GH #2401)\n\n* Add support for Solaris sandbox (GH #2385)\n\n* Support suffixes on release numbers for alpha/beta releases (GH #2404)\n\n* Fix a bug in EAX which allowed requesting a 0 length tag, which had\n  the effect of using a full length tag. Instead omit the length field,\n  or request the full tag length explicitly. (GH #2392 #2390)\n\n* Fix a memory leak in GCM where if passed an unsuitable block cipher\n  (eg not 128 bit) it would throw an exception and leak the cipher\n  object. (GH #2392 #2388)\n\nVersion 2.15.0, 2020-07-07\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fix a bug where the name constraint extension did not constrain the\n  alternative DN field which can be included in a subject alternative name. This\n  would allow a corrupted sub-CA which was otherwise constrained by a name\n  constraint to issue a certificate with a prohibited DN.\n\n* Fix a bug in the TLS server during client authentication where where\n  if a (disabled by default) static RSA ciphersuite was selected, then\n  no certificate request would be sent. This would have an equivalent\n  effect to a client which simply replied with an empty Certificate\n  message. (GH #2367)\n\n* Replace the T-Tables implementation of AES with a 32-bit bitsliced\n  version. As a result AES is now constant time on all processors.\n  (GH #2346 #2348 #2353 #2329 #2355)\n\n* In TLS, enforce that the key usage given in the server certificate\n  allows the operation being performed in the ciphersuite. (GH #2367)\n\n* In X.509 certificates, verify that the algorithm parameters are\n  the expected NULL or empty. (GH #2367)\n\n* Change the HMAC key schedule to attempt to reduce the information\n  leaked from the key schedule with regards to the length of the key,\n  as this is at times (as for example in PBKDF2) sensitive information.\n  (GH #2362)\n\n* Add Processor_RNG which wraps RDRAND or the POWER DARN RNG\n  instructions. The previous RDRAND_RNG interface is deprecated.\n  (GH #2352)\n\n* The documentation claimed that mlocked pages were created with a\n  guard page both before and after. However only a trailing guard page\n  was used. Add a leading guard page. (GH #2334)\n\n* Add support for generating and verifying DER-encoded ECDSA signatures\n  in the C and Python interfaces. (GH #2357 #2356)\n\n* Workaround a bug in GCC's UbSan which triggered on a code sequence\n  in XMSS (GH #2322)\n\n* When building documentation using Sphinx avoid parallel builds with\n  version 3.0 due to a bug in that version (GH #2326 #2324)\n\n* Fix a memory leak in the CommonCrypto block cipher calls (GH #2371)\n\n* Fix a flaky test that would occasionally fail when running the tests\n  with a large number of threads. (GH #2325 #2197)\n\n* Additional algorithms are now deprecated: XTEA, GOST, and Tiger.\n  They will be removed in a future major release.\n\nVersion 2.14.0, 2020-04-06\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add support for using POWER8+ VPSUMD instruction to accelerate GCM\n  (GH #2247)\n\n* Optimize the vector permute AES implementation, especially improving\n  performance on ARMv7, Aarch64, and POWER. (GH #2243)\n\n* Use a new algorithm for modular inversions which is both faster and\n  more resistant to side channel attacks. (GH #2287 #2296 #2301)\n\n* Address an issue in CBC padding which would leak the length of the\n  plaintext which was being padded. Unpadding during decryption was\n  not affected. Thanks to Maximilian Blochberger for reporting this.\n  (GH #2312)\n\n* Optimize NIST prime field reductions, improving ECDSA by 3-9% (GH #2295)\n\n* Increase the size of the ECC blinding mask and scale it based on the\n  size of the group order. (GH #880 #893 #2308)\n\n* Add server side support for the TLS asio wrapper. (GH #2229)\n\n* Add support for using Windows certificate store on MinGW (GH #2280)\n\n* Use the library thread pool instead of a new thread for RSA computations,\n  improving signature performance by up to 20%. (GH #2257)\n\n* Precompute and cache additional fields in ``X509_Certificate`` (GH #2250)\n\n* Add a CLI utility ``cpu_clock`` which estimates the speed of the\n  processor cycle counter. (GH #2251)\n\n* Fix a bug which prevented using DER-encoded ECDSA signatures with a PKCS11\n  key (GH #2293)\n\n* Enable use of raw block ciphers from CommonCrypto (GH #2278)\n\n* Support for splitting up the amalgamation file by ABI extension has\n  been removed. Instead only ``botan_all.cpp`` and ``botan_all.h`` are\n  generated. (GH #2246)\n\n* Improve support for baremetal systems with no underlying OS, with\n  target OS ``none`` (GH #2303 #2304 #2305)\n\n* The build system now avoids using ``-rpath=$ORIGIN`` or (on macOS)\n  install_name which allowed running the tests from the build\n  directory without setting ``LD_LIBRARY_PATH``/``DYLD_LIBRARY_PATH``\n  environment variables. Instead set the dynamic linker variables\n  appropriately, or use ``make check``. (GH #2294 #2302)\n\n* Add new option ``--name-amalgamation`` which allows naming the\n  amalgamation output, instead of the default ``botan_all``. (GH #2246)\n\n* Avoid using symbolic links on Windows (GH #2288 #2286 #2285)\n\n* Fix a bug that prevented compilation of the amalgamation on ARM and\n  POWER processors (GH #2245 #2241)\n\n* Fix some build problems under Intel C++ (GH #2260)\n\n* Remove use of Toolhelp Windows library, which was known to trigger\n  false positives under some antivirus systems. (GH #2261)\n\n* Fix a compilation problem when building on Windows in Unicode mode.\n  Add Unicode build to CI to prevent regressions. (GH #2254 #2256)\n\n* Work around a GCC bug affecting old libc (GH #2235)\n\n* Workaround a bug in macOS 10.15 which caused a test to crash.\n  (GH #2279 #2268)\n\n* Avoid a crash in PKCS8::load_key due to a bug in Clang 8.\n  (GH #2277)\n\nVersion 2.13.0, 2020-01-06\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add Roughtime client (GH #2143 #1842)\n\n* Add support for XMSS X.509 certificates (GH #2172)\n\n* Add support for X.509 CRLs in FFI layer and Python wrapper (GH #2213)\n\n* It is now possible to disable TLS v1.0/v1.1 and DTLS v1.0 at build time.\n  (GH #2188)\n\n* The format of encrypted TLS sessions has changed, which will invalidate all\n  existing session tickets. The new format will make it easier to support ticket\n  key rotation in the future. (GH #2225)\n\n* Improve RSA key generation performance (GH #2148)\n\n* Make gcd computation constant-time (GH #2147)\n\n* Add AVX2 implementation of SHACAL2 (GH #2196)\n\n* Update BSI policy to reflect 2019 update of TR 02102-2 (GH #2195)\n\n* Support more functionality for X.509 in the Python API (GH #2165)\n\n* Add ``generic`` CPU target useful when building for some new or unusual\n  platform.\n\n* Disable MD5 in BSI or NIST modes (GH #2188)\n\n* Disable stack protector on MinGW as it causes crashes with some recent\n  versions. (GH #2187)\n\n* On Windows the DLL is now installed into the binary directory (GH #2233)\n\n* Previously Windows required an explicit ``.lib`` suffix be added when\n  providing an explicit library name, as is used for example for Boost.\n  Now the ``.lib`` suffix is implicit, and should be omitted.\n\n* Remove the 32-bit x86 inline asm for Visual C++ as it seemed to not offer\n  much in the way of improved performance. (GH #2204 #256)\n\n* Resolve all compile time warnings generated by GCC, Clang and MSVC.\n  Modify CI to compile with warnings-as-errors. (GH #2170 #2206 #2211 #2212)\n\n* Fix bugs linking to 3rd party libraries on Windows due to invalid\n  link specifiers. (GH #2210 #2215)\n\n* Add long input and NIST Monte-Carlo hash function tests.\n\n* Fix a bug introduced in 2.12.0 where ``TLS::Channel::is_active`` and\n  ``TLS::Channel::is_closed`` could simultaneously return true.\n  (GH #2174 #2171)\n\n* Use ``std::shared_ptr`` instead of ``boost::shared_ptr`` in some examples.\n  (GH #2155)\n\nVersion 2.12.1, 2019-10-14\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fix a bug that prevented building with nmake (GH #2142 #2141)\n\n* Fix an issue where make install would attempt to build targets which\n  were disabled. (GH #2140)\n\n* If the option ``--without-documentation`` is used, avoid invoking the\n  documentation build script. (GH #2138)\n\n* Fix a bug that prevented compilation on x86-32 using GCC 4.9 (GH #2139)\n\n* Fix a bug in CCM encryption, where it was possible to call ``finish`` without\n  ever setting a nonce (GH #2151 #2150)\n\n* Improve ECIES/DLIES interfaces. If no initialization vector was set, they\n  would typically produce hard to understand exceptions. (GH #2151 #2150)\n\nVersion 2.12.0, 2019-10-07\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Many currently public headers are being deprecated. If any such header is\n  included by an application, a warning is issued at compile time. Headers\n  issuing this warning will be made internal in a future major release.\n  (GH #2061)\n\n* RSA signature performance improvements (GH #2068 #2070)\n\n* Performance improvements for GCM (GH #2024 #2099 #2119), OCB (#2122),\n  XTS (#2123) and ChaCha20Poly1305 (GH #2117), especially for small messages.\n\n* Add support for constant time AES using NEON and AltiVec (GH #2093 #2095 #2100)\n\n* Improve performance of POWER8 AES instructions (GH #2096)\n\n* Add support for the POWER9 hardware random number generator (GH #2026)\n\n* Add support for 64-bit version of RDRAND, doubling performance on x86-64 (GH #934 #2022)\n\n* In DTLS server, support a client crashing and then reconnecting from\n  the same source port, as described in RFC 6347 sec 4.2.8 (GH #2029)\n\n* Optimize DTLS MTU splitting to split precisely to the set MTU (GH #2042)\n\n* Add support for the TLS v1.3 downgrade indicator. (GH #2027)\n\n* Improve the error messages generated when an invalid TLS state transition occurs\n  (GH #2030)\n\n* Fix some edge cases around TLS close_notify support. (GH #2054)\n\n* Modifications to support GOST 34.10-2012 signatures (GH #2055 #2056 #1860 #1897)\n\n* Add some new APIs on ``OID`` objects (GH #2057)\n\n* Properly decode OCSP responses which indicate an error (GH #2110)\n\n* Add a function to remove an X.509 extension from an Extensions object.\n  (GH #2101 #2073 #2065)\n\n* Support Argon2 outputs longer than 64 bytes (GH #2079 #2078)\n\n* Correct a bug in CAST-128 which caused incorrect computation using\n  11, 13, 14, or 15 byte keys. (GH #2081)\n\n* Fix a bug which would cause Streebog to produce incorrect outputs for\n  certain messages (GH #2082 #2083)\n\n* Fix a bug that prevented loading EC points with an affine x or y\n  value of 0. For certain curves such points can exist. (GH #2102)\n\n* Fix a bug which would cause PBKDF2 to go into a very long loop if\n  it was requested to use an iteration count of 0. (GH #2090 #2088)\n\n* The BearSSL provider has been removed (GH #2020)\n\n* Add a new ``entropy`` cli which allows sampling the output of the entropy sources.\n\n* Add new ``base32_enc`` and ``base32_dec`` cli for base32 encoding operations. (GH #2111)\n\n* Support setting TLS policies in CLIs like ``tls_client`` and ``tls_proxy_server`` (GH #2047)\n\n* The tests now run in multithreaded mode by default. Provide option ``--test-threads=1`` to\n  return to previous single-threaded behavior. (GH #2071 #2075)\n\n* Cleanups in TLS record layer (GH #2021)\n\n* Fix typos in some OCSP enums which used \"OSCP\" instead. (GH #2048)\n\n* In the Python module, avoid trying to load DLLs for names that don't match the current\n  platform (GH #2062 #2059)\n\n* In the Python module, also look for ``botan.dll`` so Python wrapper can run on Windows.\n  (GH #2059 #2060)\n\n* Add support for TOTP algorithm to the Python module. (GH #2112)\n\n* Now the minimum Windows target is set to Windows 7 (GH #2036 #2028)\n\n* Add ``BOTAN_FORCE_INLINE`` macro to resolve a performance issue with BLAKE2b on MSVC\n  (GH #2092 #2089)\n\n* Avoid using ``__GNUG__`` in headers that may be consumed by a C compiler (GH #2013)\n\n* Improve the PKCS11 tests (GH #2115)\n\n* Fix a warning from Klocwork (GH #2128 #2129)\n\n* Fix a bug which caused amalgamation builds to fail on iOS (GH #2045)\n\n* Support disabling thread local storage, needed for building on old iOS (GH #2045)\n\n* Add a script to help with building for Android, using Docker (GH #2016 #2033 #513)\n\n* Add Android NDK build to Travis CI (GH #2017)\n\nVersion 2.11.0, 2019-07-01\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add Argon2 PBKDF and password hash (GH #459 #1981 #1987)\n\n* Add Bcrypt-PBKDF (GH #1990)\n\n* Add a libsodium compat layer in sodium.h (GH #1996)\n\n* XMSS now follows RFC 8391 which is incompatible with previous versions, which\n  had followed draft 6. (GH #1858 #2003)\n\n* Add server side support for issuing DTLS HelloVerifyRequest messages\n  (GH #1999)\n\n* Add a shim allowing testing Botan against the BoringSSL test suite,\n  and fix a number of bugs in TLS found using it.\n  (GH #1954 #1955 #1956 #1959 #1966 #1970)\n\n* Add support for the TLS v1.3 supported_versions extension. (GH #1976)\n\n* Add Ed25519ph compatible with RFC 8032 (GH #1699 #2000)\n\n* Add support for OCSP stapling on server side. (GH #1703 #1967)\n\n* Add a ``boost::asio`` TLS stream compatible with ``boost::asio::ssl``.\n  (GH #1839 #1927 #1992)\n\n* Add a certificate store for Linux/Unix systems. (GH #1885 #1936)\n\n* Add a certificate store for Windows systems. (GH #1931)\n\n* Add a generic ``System_Certificate_Store`` which wraps Windows, macOS,\n  and Linux certificate stores. (GH #1893)\n\n* Fix verification rooted in a v1 certificate which previously would fail.\n  (GH #1890)\n\n* Add ability to specify the maximum age of an OCSP response which does not\n  have the nextUpdate field set. (GH #1974 #1995)\n\n* Fix X509_DN::operator< which could erroneously return true in both\n  directions (ie, DN1 < DN2 && DN2 < DN1). This would break STL\n  containers using a DN as the key. (GH #1938)\n\n* It is now possible to create intermediate CA certificates using the\n  command line interface. (GH #1879 #1889)\n\n* Add a new build time option to set where the system stores trusted\n  certificates. (GH #1888)\n\n* New ``trust_roots`` CLI that examines the system certificate store.\n  (GH #1893)\n\n* Fix bugs and add many new features in the Python wrapper.\n  (GH #1899 #1900 #1901 #1902 #1903 #1904 #1906 #1907 #1915)\n\n* Various FFI interfaces which are redundant with other APIs are now\n  deprecated. The deprecation message suggests the alternate API to use.\n  (GH #1915)\n\n* Fix decoding of RSA-OAEP certificates. (GH #1943 #1944)\n\n* Allow setting multiple organization unit fields in a certificate or\n  certificate request. (GH #1939)\n\n* Increase the maximum allowed year in ASN1_Time to 3100. This works\n  around a problem parsing certs in AppVeyor's trust store.\n\n* Add ``--format`` option to ``rng`` CLI command allowing to format\n  as base64, base58 or binary in addition to hex. (GH #1945)\n\n* Remove use of table lookups for IP/FP transforms in DES (GH #1928)\n\n* Improve the tests for SRP6 (GH #1917 #1923)\n\n* Document the build system\n\n* When available use POSIX ``sysconf`` to detect the number of CPUs (GH #1877)\n\n* Add functionality to handle Boost naming conventions on different platforms,\n  especially affecting Windows. Enable Boost in AppVeyor builds. (GH #1964)\n\n* Add alternate implementation of ``getauxval`` for older Android (GH #1962)\n\n* Add ``configure.py`` option allowing to set arbitrary macros during build.\n  (GH #1960)\n\n* Use FreeBSD's ``elf_aux_info`` to detect ARM and POWER CPU features\n  (GH #1895)\n\n* Use FreeBSD's ``PROT_MAX`` to prevent mmap regions from being made executable\n  later. (GH #2001)\n\n* Fix a memory leak in the tests (GH #1886)\n\n* Fix an issue building with the new Boost 1.70 (GH #1881 #1880)\n\n* Fix an issue with UbSan in the tests (GH #1892)\n\n* Remove use of ``-mabi`` flag when building on MIPS64 (GH #1918)\n\n* Make it possible to specify additional libraries in ``LDFLAGS`` (GH #1916)\n\n* Fix some warnings from Clang 8 (GH #1941)\n\n* Fix the makefile .PHONY syntax (GH #1874)\n\n* Fix build issue with SoftHSM 2.5.0 (GH #1986)\n\nVersion 2.10.0, 2019-03-30\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Notice: the developers plan to switch from gzip to xz compression for\n  releases starting in 2.11. If this is a problem please comment at\n  https://github.com/randombit/botan/issues/1872\n\n* Warning: XMSS currently implements draft-06 which is not compatible with the\n  final RFC 8391 specification. A PR is open to fix this, however it will break\n  all current uses of XMSS. If you are currently using XMSS please comment at\n  https://github.com/randombit/botan/pull/1858. Otherwise the PR will be merged\n  and support for draft-06 will be removed starting in 2.11.\n\n* Added a new certificate store implementation that can access the\n  MacOS keychain certificate store. (GH #1830)\n\n* Redesigned ``Memory_Pool`` class, which services allocations out of a\n  set of pages locked into memory (using ``mlock``/``VirtualLock``). It is now\n  faster and with improved exploit mitigations. (GH #1800)\n\n* Add BMI2 implementations of SHA-512 and SHA-3 which improve performance by\n  25-35% on common CPUs. (GH #1815)\n\n* Unroll SHA-3 computation improving performance by 10-12% (GH #1838)\n\n* Add a ``Thread_Pool`` class. It is now possible to run the tests in multiple\n  threads with ``--test-threads=N`` flag to select the number of threads to use.\n  Use ``--test-threads=0`` to run with as many CPU cores as are available on the\n  current system. The default remains single threaded. (GH #1819)\n\n* XMSS signatures now uses a global thread pool instead of spawning new threads\n  for each usage. This improves signature generation performance by between 10%\n  and 60% depending on architecture and core count. (GH #1864)\n\n* Some functions related to encoding and decoding BigInts have been deprecated.\n  (GH #1817)\n\n* Binary encoding and decoding of BigInts has been optimized by performing\n  word-size operations when possible. (GH #1817)\n\n* Rename the exception ``Integrity_Failure`` to ``Invalid_Authentication_Tag`` to make\n  its meaning and usage more clear. The old name remains as a typedef. (GH #1816)\n\n* Support for using Boost ``filesystem`` and MSVC's ``std::filesystem`` have been\n  removed, since already POSIX and Win32 versions had to be maintained for\n  portability. (GH #1814)\n\n* Newly generated McEliece and XMSS keys now default to being encrypted using\n  SIV mode, support for which was added in 2.8.0. Previously GCM was used by\n  default for these algorithms.\n\n* Use ``arc4random`` on Android systems (GH #1851)\n\n* Fix the encoding of PGP-S2K iteration counts (GH #1853 #1854)\n\n* Add a facility for sandboxing the command line util. Currently FreeBSD\n  (Capsicum) and OpenBSD (``pledge``) sandboxes are supported. (GH #1808)\n\n* Use ``if constexpr`` when available.\n\n* Disable building shared libs on iOS as it was broken and it is not clear shared\n  libraries are ever useful on iOS (GH #1865)\n\n* Renamed the ``darwin`` build target to ``macos``. This should not cause any\n  user-visible change. (GH #1866)\n\n* Add support for using ``sccache`` to cache the Windows CI build (GH #1807)\n\n* Add ``--extra-cxxflags`` option which allows adding compilation flags without\n  overriding the default set. (GH #1826)\n\n* Add ``--format=`` option to the ``hash`` cli which allows formatting the output\n  as base64 or base58, default output remains hex.\n\n* Add ``base58_enc`` and ``base58_dec`` cli utils for base58 encoding/decoding.\n  (GH #1848)\n\n* Enable ``getentropy`` by default on macOS (GH #1862)\n\n* Avoid using ``-momit-leaf-frame-pointer`` flags, since ``-fomit-frame-pointer``\n  is already the default with recent versions of GCC.\n\n* Fix XLC sanitizer flags.\n\n* Rename ``Blake2b`` class to ``BLAKE2b`` to match the official name. There is\n  a typedef for compat.\n\n* Fix a bug where loading a raw ``Ed25519_PublicKey`` of incorrect length would\n  lead to a crash. (GH #1850)\n\n* Fix a bug that caused compilation problems using CryptoNG PRNG. (GH #1832)\n\n* Extended SHAKE-128 cipher to support any key between 1 and 160 bytes, instead\n  of only multiples of 8 bytes.\n\n* Minor HMAC optimizations.\n\n* Build fixes for GNU/Hurd.\n\n* Fix a bug that prevented generating or verifying Ed25519 signatures in the CLI\n  (GH #1828 #1829)\n\n* Fix a compilation error when building the amalgamation outside of the original\n  source directory when AVX2 was enabled. (GH #1812)\n\n* Fix a crash when creating the amalgamation if a header file was edited on\n  Windows but then the amalgamation was built on Linux (GH #1763)\n\nVersion 2.9.0, 2019-01-04\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* CVE-2018-20187 Address a side channel during ECC key generation,\n  which used an unblinded Montgomery ladder. As a result, a timing\n  attack can reveal information about the high bits of the secret key.\n\n* Fix bugs in TLS which caused negotiation failures when the client\n  used an unknown signature algorithm or version (GH #1711 #1709 #1708)\n\n* Fix bug affecting GCM, EAX and ChaCha20Poly1305 where if the associated data\n  was set after starting a message, the new AD was not reflected in the produced\n  tag. Now with these modes setting an AD after beginning a message throws an\n  exception.\n\n* Use a smaller sieve which improves performance of prime generation.\n\n* Fixed a bug that caused ChaCha to produce incorrect output after encrypting\n  256 GB. (GH #1728)\n\n* Add NEON and AltiVec implementations of ChaCha (GH #1719 #1728 #1729)\n\n* Optimize AVX2 ChaCha (GH #1730)\n\n* Many more operations in BigInt, ECC and RSA code paths are either fully const time\n  or avoid problematic branches that could potentially be exploited in a side\n  channel attack. (GH #1738 #1750 #1754 #1755 #1757 #1758 #1759 #1762 #1765\n  #1770 #1773 #1774 #1779 #1780 #1794 #1795 #1796 #1797)\n\n* Several optimizations for BigInt and ECC, improving ECDSA performance by as\n  much as 30%. (GH #1734 #1737 #1777 #1750 #1737 #1788)\n\n* Support recovering an ECDSA public key from a message/signature pair (GH #664 #1784)\n\n* Add base58 encoding/decoding functions (GH #1783)\n\n* In the command line interface, add support for reading passphrases from the\n  terminal with echo disabled (GH #1756)\n\n* Add ``CT::Mask`` type to simplify const-time programming (GH #1751)\n\n* Add new configure options ``--disable-bmi2``, ``--disable-rdrand``,\n  and ``--disable-rdseed`` to prevent use of those instruction sets.\n\n* Add ``error_type`` and ``error_code`` functions to Exception type (GH #1744)\n\n* Now on POSIX systems ``posix_memalign`` is used instead of ``mmap`` for\n  allocating the page-locked memory pool. This avoids issues with ``fork``.\n  (GH #602 #1798)\n\n* When available, use RDRAND to generate the additional data in\n  ``Stateful_RNG::randomize_with_ts_input``\n\n* Use vzeroall/vzeroupper intrinsics to avoid AVX2/SSE transition penalties.\n\n* Support for Visual C++ 2013 has been removed (GH #1557 #1697)\n\n* Resolve a memory leak when verifying ECDSA signatures with versions\n  of OpenSSL before 1.1.0 (GH #1698)\n\n* Resolve a memory leak using ECDH via OpenSSL (GH #1767)\n\n* Fix an error in XTS which prohibited encrypting values which were\n  exactly the same length as the underlying block size. Messages of\n  this size are allowed by the standard and other XTS implementations.\n  (GH #1706)\n\n* Resolve a bug in TSS which resulted in it using an incorrect length\n  field in the shares. Now the correct length is encoded, but either\n  correct or buggy lengths are accepted when decoding. (GH #1722)\n\n* Correct a bug when reducing a negative ``BigInt`` modulo a small power of 2.\n  (GH #1755)\n\n* Add CLI utils for threshold secret splitting. (GH #1722)\n\n* Fix a bug introduced in 2.8.0 that caused compilation failure if using\n  a single amalgamation file with AVX2 enabled. (GH #1700)\n\n* Add an explicit OS target for Emscripten and improve support for it.\n  (GH #1702)\n\n* Fix small issues when building for QNX\n\n* Switch the Travis CI build to using Ubuntu 16.04 (GH #1767)\n\n* Add options to ``configure.py`` to disable generation of ``pkg-config``\n  file, and (for systems where ``pkg-config`` support defaults to off,\n  like Windows), to enable generating it. (GH #1268)\n\n* Modify ``configure.py`` to accept empty lists or trailing/extra commas.\n  (GH #1705)\n\nVersion 2.8.0, 2018-10-01\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add support for using Apple CommonCrypto library for hashing (GH #1667),\n  cipher modes (GH #1674) and block ciphers (GH #1673).\n\n* Support for negotiating TLS versions 1.0 and 1.1 is disabled in the default\n  TLS policy. In addition, support for negotiating TLS ciphersuites using CBC or\n  CCM mode is disabled by default. Applications which need to interop with old\n  peers must enable these in their TLS policy object. (GH #1651)\n\n* During primality testing, use a Lucas test in addition to Miller-Rabin. It is\n  possible to construct a composite integer which passes n Miller-Rabin tests\n  with probability (1/4)^n. So for a incautious verifier using a small number\n  of tests (under 16 or so) it is possible if unlikely they would accept such a\n  composite as prime. Adding a Lucas test precludes such an attack. (GH #1636)\n\n* Add XChaCha and XChaCha20Poly1305 (GH #1640)\n\n* Add AVX2 implementations of ChaCha (GH #1662) and Serpent (GH #1660)\n\n* Add a new password hashing interface in pwdhash.h (GH #1670)\n\n* C binding improvements. Added functions to get name and supported\n  keylengths of cipher, hash and MAC objects, support for FE1 format\n  preserving encryption (GH #1625 #1646), functions to load and save\n  RSA keys in PKCS #1 format (GH #1621), HOTP and TOTP algorithms,\n  scrypt, certificate verification (GH #1647), functions to get the\n  output length of public key operations (GH #1642), and functions for\n  loading and serializing X25519 keys (GH #1681)\n\n* Support for building with BOTAN_MP_WORD_BITS set to 8 or 16 has been removed.\n\n* Previously SM2 had two distinct key types, one for signatures and another for\n  encryption. They have now been merged into a single key type since in practice\n  it seems the same key is at times used for both operations. (GH #1637)\n\n* The ``Cipher_Mode`` class now derives from ``SymmetricAlgorithm`` (GH #1639)\n\n* Add support for using the ARMv8 instructions for SM4 encryption (GH #1622)\n\n* The entropy source using ``SecRandomCopyBytes`` has been removed as it was\n  redundant with other entropy sources (GH #1668)\n\n* The Python module has much better error checking and reporting, and offers new\n  functionality such as scrypt, MPI and FPE. (GH #1643 #1646)\n\n* Fixed a bug that caused CCM to fail with an exception when used with L=8\n  (GH #1631 #1632)\n\n* The default bcrypt work factor has been increased from 10 to 12.\n\n* The default algorithm used in passhash9 has changed from SHA-256 to SHA-512,\n  and the default work factor increased from 10 to 15.\n\n* In ECC private keys, include the public key data for compatibility with\n  GnuTLS (GH #1634 #1635)\n\n* Add support for using Linux ``getrandom`` syscall to access the system PRNG.\n  This is disabled by default, use ``--with-os-feature=getrandom`` to enable.\n\n* It is now possible to encrypt private keys using SIV mode.\n\n* The FFI function botan_privkey_load now ignores its rng argument.\n\n* Resolve a problem when building under Visual C++ 15.8 (GH #1624)\n\n* Fix a bug in XSalsa20 (192-bit Salsa nonces) where if set_iv was called twice\n  without calling set_key, the resulting encryption was incorrect. (GH #1640)\n\n* Handle an error seen when verifying invalid ECDSA signatures using LibreSSL\n  on non x86-64 platforms (GH #1627 #1628)\n\n* Fix bugs in PKCS7 and X9.23 CBC padding schemes, which would ignore\n  the first byte in the event the padding took up the entire block. (GH #1690)\n\n* Correct bugs which would cause CFB, OCB, and GCM modes to crash when they\n  were used in an unkeyed state. (GH #1639)\n\n* Optimizations for SM4 and Poly1305\n\n* Avoid a cache side channel in the AES key schedule\n\n* Add ``pk_encrypt`` and ``pk_decrypt`` CLI operations\n\n* Now ``asn1print`` CLI defaults to printing context-specific fields.\n\n* Use codec_base for Base64, which matches how Base32 is implemented (GH #1597)\n\n* The ``cast`` module has been split up into ``cast128`` and ``cast256`` (GH #1685)\n\n* When building under Visual C++ 2013, the user must acknowledge the upcoming\n  removal of support using the configure.py flag ``--ack-vc2013-deprecated``\n  (GH #1557)\n\nVersion 2.7.0, 2018-07-02\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* CVE-2018-12435 Avoid a side channel in ECDSA signature generation (GH #1604)\n\n* Avoid a side channel in RSA key generation due to use of a non-constant time\n  gcd algorithm. (GH #1542 #1556)\n\n* Optimize prime generation, especially improving RSA key generation. (GH #1542)\n\n* Make Karatsuba multiplication, Montgomery field operations, Barrett reduction\n  and Montgomery exponentiation const time (GH #1540 #1606 #1609 #1610)\n\n* Optimizations for elliptic curve operations especially improving reductions\n  and inversions modulo NIST primes (GH #1534 #1538 #1545 #1546 #1547 #1550)\n\n* Add 24 word wide Comba multiplication, improving 3072-bit RSA and DH by ~25%.\n  (GH #1564)\n\n* Unroll Montgomery reduction for specific sizes (GH #1603)\n\n* Improved performance of signature verification in ECGDSA, ECKCDSA,\n  SM2 and GOST by 10-15%.\n\n* XMSS optimizations (GH #1583 #1585)\n\n* Fix an error that meant XMSS would only sign half as many signatures as is\n  allowed (GH #1582)\n\n* Add support for base32 encoding/decoding (GH #1541)\n\n* Add BMI2 optimized version of SHA-256, 40% faster on Skylake (GH #1584)\n\n* Allow the year to be up to 2200 in ASN.1 time objects. Previously this\n  was limited to 2100. (GH #1536)\n\n* Add support for Scrypt password hashing (GH #1570)\n\n* Add support for using Scrypt for private key encryption (GH #1574)\n\n* Optimizations for DES/3DES, approx 50% faster when used in certain modes such\n  as CBC decrypt or CTR.\n\n* XMSS signature verification did not check that the signature was of\n  the expected length which could lead to a crash. (GH #1537)\n\n* The bcrypt variants 2b and 2y are now supported.\n\n* Support for 192-bit Suite B TLS profile is now implemented, as the 128-bit\n  Suite B is since 2015 not allowed anymore.\n\n* Previously botan allowed GCM to be used with an empty nonce, which is not\n  allowed by the specification. Now such nonces are rejected.\n\n* Avoid problems on Windows when compiling in Unicode mode (GH #1615 #1616)\n\n* Previously for ASN.1 encoded signatures (eg ECDSA) Botan would accept any\n  valid BER encoding. Now only the single valid DER encoding is accepted.\n\n* Correct an error that could in rare cases cause an internal error exception\n  when doing computations with the P-224 curve.\n\n* Optimizations to reduce allocations/copies during DER encoding and BER\n  decoding (GH #1571 #1572 #1600)\n\n* Botan generates X.509 subject key IDs by hashing the public key with whatever\n  hash function is being used to sign the certificate. However especially for\n  SHA-512 this caused SKIDs that were far longer than necessary. Now all SKIDs\n  are truncated to 192 bits.\n\n* In the test suite use ``mkstemp`` to create temporary files instead of\n  creating them in the current working directory. (GH #1533 #1530)\n\n* It is now possible to safely override ``CXX`` when invoking make in addition\n  to when ``configure.py`` is run. (GH #1579)\n\n* OIDs for Camellia and SM4 in CBC and GCM mode are now defined, making it\n  possible to use this algorithms for private key encryption.\n\n* Avoid creating symlinks to the shared object on OpenBSD (#1535)\n\n* The ``factor`` command runs much faster on larger inputs now.\n\n* Support for Windows Phone/UWP was deprecated starting in 2.5. This deprecation\n  has been reversed as it seems UWP is still actively used. (GH #1586 #1587)\n\n* Support for Visual C++ 2013 is deprecated, and will be removed in Jan 2019.\n\n* Added support for GCC's --sysroot option to configure.py for cross-compiling.\n\nVersion 2.6.0, 2018-04-10\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* CVE-2018-9860 Fix a bug decrypting TLS CBC ciphertexts which could\n  for a malformed ciphertext cause the decryptor to read and HMAC an\n  additional 64K bytes of data which is not part of the record. This\n  could cause a crash if the read went into unmapped memory. No\n  information leak or out of bounds write occurs.\n\n* Add support for OAEP labels (GH #1508)\n\n* RSA signing is about 15% faster (GH #1523) and RSA verification is\n  about 50% faster.\n\n* Add exponent blinding to RSA (GH #1523)\n\n* Add ``Cipher_Mode::create`` and ``AEAD_Mode::create`` (GH #1527)\n\n* Fix bug in TLS server introduced in 2.5 which caused connection to\n  fail if the client offered any signature algorithm not known to the\n  server (for example RSA/SHA-224).\n\n* Fix a bug in inline asm that would with GCC 7.3 cause incorrect\n  computations and an infinite loop during the tests. (GH #1524 #1529)\n\nVersion 2.5.0, 2018-04-02\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fix error in certificate wildcard matching (CVE-2018-9127), where a\n  wildcard cert for ``b*.example.com`` would be accepted as a match for\n  any host with name ``*b*.example.com`` (GH #1519)\n\n* Add support for RSA-PSS signatures in TLS (GH #1285)\n\n* Ed25519 certificates are now supported (GH #1501)\n\n* Many optimizations in ECC operations. ECDSA signatures are 8-10 times faster.\n  ECDSA verification is about twice as fast. ECDH key agreement is 3-4 times\n  faster. (GH #1457 #1478)\n\n* Implement product scanning Montgomery reduction, which improves Diffie-Hellman\n  and RSA performance by 10 to 20% on most platforms. (GH #1472)\n\n* DSA signing and verification performance has improved by 30-50%.\n\n* Add a new Credentials_Manager callback that specifies which CAs the server\n  has indicated it trusts (GH #1395 fixing #1261)\n\n* Add new TLS::Callbacks methods that allow creating or removing extensions,\n  as well as examining extensions sent by the peer (GH #1394 #1186)\n\n* Add new TLS::Callbacks methods that allow an application to\n  negotiate use of custom elliptic curves. (GH #1448)\n\n* Add ability to create custom elliptic curves (GH #1441 #1444)\n\n* Add support for POWER8 AES instructions (GH #1459 #1393 #1206)\n\n* Fix DSA/ECDSA handling of hashes longer than the group order (GH #1502 #986)\n\n* The default encoding of ECC public keys has changed from compressed\n  to uncompressed point representation. This improves compatibility with\n  some common software packages including Golang's standard library.\n  (GH #1480 #1483)\n\n* It is now possible to create DNs with custom components. (GH #1490 #1492)\n\n* It is now possible to specify the serial number of created certificates,\n  instead of using the default 128-bit random integer. (GH #1489 #1491)\n\n* Change DL_Group and EC_Group to store their data as shared_ptr for\n  fast copying. Also both classes precompute additional useful values\n  (eg for modular reductions). (GH #1435 #1454)\n\n* On Windows platforms RtlGenRandom is now used in preference to CryptoAPI\n  or CryptoNG libraries. (GH #1494)\n\n* Make it possible for PKCS10 requests to include custom extensions. This also\n  makes it possible to use multiple SubjectAlternativeNames of a single type in\n  a request, which was previously not possible. (GH #1429 #1428)\n\n* Add new optimized interface for FE1 format preserving encryption. By caching a\n  number of values computed in the course of the FPE calculation, it provides a\n  6-7x speedup versus the old API. (GH #1469)\n\n* Add DSA and ElGamal keygen functions to FFI (#1426)\n\n* Add ``Pipe::prepend_filter`` to replace deprecated ``Pipe::prepend`` (GH #1402)\n\n* Fix a memory leak in the OpenSSL block cipher integration, introduced in 2.2.0\n\n* Use an improved algorithm for generating safe primes which is several tens of\n  times faster. Also, fix a bug in the prime sieving algorithm which caused\n  standard prime generation (like for RSA keys) to be slower than necessary.\n  (GH #1413 #1411)\n\n* Correct the return value of ``PK_Encryptor::maximum_input_size`` which\n  reported a much too small value (GH #1410)\n\n* Remove use of CPU specific optimization flags, instead the user should set\n  these via CXXFLAGS if desired. (GH #1392)\n\n* Resolve an issue that would cause a crash in the tests if they were run on\n  a machine without SSE2/NEON/VMX instructions. (GH #1495)\n\n* The Python module now tries to load DLLs from a list of names and\n  uses the first one which successfully loads and indicates it\n  supports the desired API level. (GH #1497)\n\n* Various minor optimizations for SHA-3 (GH #1433 #1434)\n\n* The output of ``botan --help`` has been improved (GH #1387)\n\n* Add ``--der-format`` flag to command line utils, making it possible verify\n  DSA/ECDSA signatures generated by OpenSSL command line (GH #1409)\n\n* Add support for ``--library-suffix`` option to ``configure.py`` (GH #1405 #1404)\n\n* Use feature flags to enable/disable system specific code (GH #1378)\n\n* Add ``--msvc-runtime`` option to allow using static runtime (GH #1499 #210)\n\n* Add ``--enable-sanitizers=`` option to allow specifying which sanitizers to\n  enable. The existing ``--with-sanitizers`` option just enables some default\n  set which is known to work with the minimum required compiler versions.\n\n* Use either ``rst2man`` or ``rst2man.py`` for generating man page as\n  distributions differ on where this program is installed (GH #1516)\n\n* The threefish module has been renamed threefish_512 since that is the\n  algorithm it provides. (GH #1477)\n\n* The Perl XS based wrapper has been removed, as it was unmaintained and\n  broken. (GH #1412)\n\n* The sqlite3 encryption patch under ``contrib`` has been removed. It\n  is still maintained by the original author at\n  https://github.com/OlivierJG/botansqlite3\n\n* Support for Windows Phone is deprecated.\n\nVersion 2.4.0, 2018-01-08\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Several build improvements requested by downstream packagers, including the\n  ability to disable building the static library. All makefile constructs that\n  were specific to nmake or GNU make have been eliminated, thus the option\n  ``--makefile-style`` which was previously used to select the makefile type has\n  also been removed. (GH #1230 #1237 #1300 #1318 #1319 #1324 #1325 #1346)\n\n* Support for negotiating the DH group as specified in RFC 7919 is now available\n  in TLS (GH #1263)\n\n* Support for ARIA-GCM ciphersuites are now available in TLS. They are disabled\n  by default. (GH #1284)\n\n* Add support for generating and verifying X.509 objects (certificates, CRLs,\n  etc) using RSA-PSS signatures (GH #1270 and #1368)\n\n* Add support for AES key wrapping with padding, as specified in RFC 5649 and\n  NIST SP 800-38F (GH #1301)\n\n* OCSP requests made during certificate verification had the potential to hang\n  forever. Now the sockets are non-blocking and a timeout is enforced. (GH #1360\n  fixing GH #1326)\n\n* Add ``Public_Key::fingerprint_public`` which allows fingerprinting the public key.\n  The previously available ``Private_Key::fingerprint`` is deprecated, now\n  ``Private_Key::fingerprint_private`` should be used if this is required.\n  (GH #1357)\n\n* ECC certificates generated by Botan used an invalid encoding for the\n  parameters field, which was rejected by some certificate validation libraries\n  notably BouncyCastle. (GH #1367)\n\n* Loading an ECC key which used OID encoding for the domain parameters, then\n  saving it, would result in a key using the explicit parameters encoding.\n  Now the OID encoding is retained. (GH #1365)\n\n* Correct various problems in certificate path validation that arose when\n  multiple paths could be constructed leading to a trusted root but due to\n  other constraints only some of them validated. (GH #1363)\n\n* It is now possible for certificate validation to return warning indicators,\n  such as that the distinguished name is not within allowed limits or that a\n  certificate with a negative serial number was observed. (GH #1363 #1359)\n\n* XMSS signatures now are multi-threaded for improved performance (GH #1267)\n\n* Fix a bug that caused the TLS peer cert list to be empty on a resumed session.\n  (GH #1303 #1342)\n\n* Increase the maximum HMAC key length from 512 bytes to 4096 bytes. This allows\n  using a DH key exchange in TLS with a group greater than 4096 bits. (GH #1316)\n\n* Fix a bug in the TLS server where, on receiving an SSLv3 client hello, it\n  would attempt to negotiate TLS v1.2. Now a protocol_version alert is sent.\n  Found with tlsfuzzer. (GH #1316)\n\n* Fix several bugs related to sending the wrong TLS alert type in various error\n  scenarios, caught with tlsfuzzer.\n\n* Add support for a ``tls_http_server`` command line utility which responds to\n  simple GET requests. This is useful for testing against a browser, or various\n  TLS test tools which expect the underlying protocol to be HTTP. (GH #1315)\n\n* Add an interface for generic PSK data stores, as well as an implementation\n  which encrypts stored values with AES key wrapping. (GH #1302)\n\n* Optimize GCM mode on systems both with and without carryless multiply\n  support. This includes a new base case implementation (still constant time), a\n  new SSSE3 implementation for systems with SSSE3 but not clmul, and better\n  algorithms for systems with clmul and pmull. (GH #1253 #1263)\n\n* Various optimizations for OCB, CFB, CTR, SM3, SM4, GMAC, BLAKE2b, Blowfish,\n  Twofish, CAST-128, and CRC24 (GH #1281)\n\n* Salsa20 now supports the seek operation.\n\n* Add ``EC_Group::known_named_groups`` (GH #1339)\n\n* Symmetric algorithms (block ciphers, stream ciphers, MACs) now verify that a\n  key was set before accepting data. Previously attempting to use an unkeyed\n  object would instead result in either a crash or invalid outputs. (GH #1279)\n\n* The X509 certificate, CRL and PKCS10 types have been heavily refactored\n  internally. Previously all data of these types was serialized to strings, then\n  in the event a more complicated data structure (such as X509_DN) was needed,\n  it would be recreated from the string representation. However the round trip\n  process was not perfect and could cause fields to become lost. This approach\n  is no longer used, fixing several bugs (GH #1010 #1089 #1242 #1252). The\n  internal data is now stored in a ``shared_ptr``, so copying such objects is\n  now very cheap. (GH #884)\n\n* ASN.1 string objects previously held their contents as ISO 8859-1 codepoints.\n  However this led to certificates which contained strings outside of this\n  character set (eg in Cyrillic, Greek, or Chinese) being rejected. Now the\n  strings are always converted to UTF-8, which allows representing any\n  character. In addition, UCS-4 strings are now supported.\n  (GH #1113 #1250 #1287 #1289)\n\n* It is now possible to create an uninitialized X509_Certificate object. Such an\n  object will throw if any attempt to access its members is made. (GH #1335)\n\n* In BER decoder, avoid unbounded stack recursion when parsing nested indefinite\n  length values. Now at most 16 nested indefinite length values are accepted,\n  anything deeper resulting in a decoding error.  (GH #1304 OSS-Fuzz 4353).\n\n* A new ASN.1 printer API allows generating a string representation of arbitrary\n  BER data. This is used in the ``asn1print`` command line utility and may be\n  useful in other applications, for instance for debugging.\n\n* New functions for bit rotations that distinguish rotating by a compile-time\n  constant vs a runtime variable rotation. This allows better optimizations in\n  both cases. Notably performance of CAST-128 and CAST-256 are substantially\n  improved. (GH #1247)\n\n* TLS CBC ciphersuites now are implemented using the standard CBC code, instead\n  of reimplementing CBC inside the TLS stack. This allows for parallel\n  decryption of TLS CBC ciphertexts, and improves performance especially when\n  using AES hardware support. (GH #1269)\n\n* Add callbacks to make it possible for an application using TLS to provide\n  custom implementations of signature schemes, eg when offloading the\n  computations to another device. (GH #1332)\n\n* Use a direct calculation for calendar computations instead of relying on\n  non-portable operating system interfaces. (GH #1336)\n\n* Fix a bug in the amalgamation generation which could cause build failures on\n  some systems including macOS. (GH #1264 #1265)\n\n* A particular code sequence in TLS handshake would always (with an ECC\n  ciphersuite) result in an exception being thrown and then caught.  This has\n  changed so no exception is thrown. (GH #1275)\n\n* The code for byteswapping has been improved for ARMv7 and for Windows x86-64\n  systems using MSVC. (GH #1274)\n\n* The GMAC class no longer derives from GHASH. This should not cause any\n  noticeable change for applications. (GH #1253)\n\n* The base implementation of AES now uses a single 4K table, instead of 4 such\n  tables. This offers a significant improvement against cache-based side\n  channels without hurting performance too much. In addition the table is now\n  guaranteed to be aligned on a cache line, which ensures the additional\n  countermeasure of reading each cache line works as expected. (GH #1255)\n\n* In TLS client resumption, avoid sending a OCSP stapling request. This caused\n  resumption failures with some servers. (GH #1276)\n\n* The overhead of making a call through the FFI layer has been reduced.\n\n* The IDs for SHA-3 PKCSv1.5 signatures added in 2.3.0 were incorrect. They have\n  been changed to use the correct encoding, and a test added to ensure such\n  errors do not recur.\n\n* Counter mode allows setting a configurable width of the counter. Previously it\n  was allowed for a counter of even 8 bits wide, which would mean the keystream\n  would repeat after just 256 blocks. Now it requires the width be at least 32\n  bits. The only way this feature could be used was by manually constructing a\n  ``CTR_BE`` object and setting the second parameter to something in the range\n  of 1 to 3.\n\n* A new mechanism for formatting ASN.1 data is included in ``asn1_print.h``.\n  This is the same functionality used by the command line ``asn1print`` util,\n  now cleaned up and moved to the library.\n\n* Add ``Pipe::append_filter``. This is like the existing (deprecated)\n  ``Pipe::append``, the difference being that ``append_filter`` only\n  allows modification before the first call to ``start_msg``. (GH #1306 #1307)\n\n* The size of ASN1_Tag is increased to 32 bits. This avoids a problem\n  with UbSan (GH #751)\n\n* Fix a bug affecting bzip2 compression. In certain circumstances, compression\n  would fail with ``BZ_SEQUENCE_ERROR`` due to calling bzlib in an way it does\n  not support. (GH #1308 #1309)\n\n* In 2.3.0, final annotations were added to many classes including the TLS\n  policies (like ``Strict_Policy`` and ``BSI_TR_02102_2``). However it is\n  reasonable and useful for an application to derive from one of these policies, so\n  as to create an application specific policy that is based on a library-provided\n  policy, but with a few tweaks. So the final annotations have been removed on\n  these classes. (GH #1292)\n\n* A new option ``--with-pdf`` enables building a PDF copy of the handbook.\n  (GH #1337)\n\n* A new option ``--with-rst2man`` enables building a man page for the\n  command line util using Docutils rst2man. (GH #1349)\n\n* Support for NEON is now enabled under Clang.\n\n* Now the compiler version is detected using the preprocessor, instead of trying\n  to parse the output of the compiler's version string, which was subject to\n  problems with localization. (GH #1358)\n\n* By default the gzip compressor will not include a timestamp in the header.\n  The timestamp can be set by passing it to the ``Gzip_Compression``\n  constructor.\n\n* Resolve a performance regression on Windows involving the system stats\n  entropy source. (GH #1369)\n\n* Add an OID for RIPEMD-160\n\n* Fixes for CMake build (GH #1251)\n\n* Avoid some signed overflow warnings (GH #1220 #1245)\n\n* As upstream support for Native Client has been deprecated by Google, support\n  is now also deprecated in Botan and will be removed in a future release.\n\n* The Perl-XS wrapper has not been maintained in many years. It is now deprecated,\n  and if no attempts are made to revive it, it will be removed in a future release.\n\n* Support for building on IRIX has been removed.\n\nVersion 2.3.0, 2017-10-02\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Address a side channel affecting modular exponentiation. An attacker\n  capable of a local or cross-VM cache analysis attack may be able\n  to recover bits of secret exponents as used in RSA, DH, etc.\n  CVE-2017-14737\n\n* Add the SHACAL2 block cipher, including optimizations using SIMD and SHA-NI\n  instructions. (GH #1151)\n\n* Add the ARIA block cipher (GH #1004 and #1157)\n\n* Add support for the ARMv8 AES instructions (GH #1182 and #1146)\n\n* Add support for the ARMv8 PMULL instruction (GH #1181 and #842)\n\n* On macOS and iOS the ``System_RNG`` class is now implemented using ``arc4random``.\n  Previously the system RNG class was not available on iOS. (GH #1219)\n\n* Optimized the CMAC polynomial doubling operation, and removed a small timing\n  channel due to a conditional operation.\n\n* Added support for the ECDHE_PSK AEAD TLS ciphersuites from\n  draft-ietf-tls-ecdhe-psk-aead-05.\n\n* SM2 encryption and signature schemes were previously hardcoded to use SM3\n  hash, now any hash is allowed. (GH #1188)\n\n* SM2 encryption in 2.2.0 followed an obsolete version of the standard. The\n  format of the ciphertext changed in a more recent revision of the standard,\n  and now uses an ASN.1 encoding. Botan has changed to reflect this format,\n  which is compatible with GmSSL (GH #1218)\n\n* OCB mode now supports 192, 256 and 512 bit block ciphers. (GH #1205)\n\n* XTS mode now supports 256-bit and 512-bit block ciphers.\n\n* Add ids to allow SHA-3 signatures with PKCSv1.5 (GH #1184)\n\n* Add support for ``PSSR_Raw`` signatures which PSS sign an externally derived\n  hash. (GH #1212 #1211)\n\n* GCM now supports truncated tags in the range 96...128 bits. GCM had\n  previously supported 64-bit truncated tags, but these are known to\n  be insecure and are now deprecated. (GH #1210 #1207)\n\n* Add a new TLS policy hook ``allow_client_initiated_renegotiation`` which is the\n  parallel of the existing ``allow_server_initiated_renegotiation``. If set to\n  false, servers will reject attempts by the client to renegotiation the\n  session, instead sending a ``no_renegotiation`` warning alert. Note that the\n  default is ``false``, ie that client renegotiation is now prohibited by default.\n  (GH #872)\n\n* Add HKDF-Expand-Label function which is used in TLS v1.3 and QUIC protocols.\n  (GH #1226)\n\n* Fix decoding of ECC keys that use extensions from RFC 5915 (GH #1208)\n\n* The entropy source that called CryptGenRandom has been removed, and\n  replaced by a version which invokes the system PRNG, which may\n  be CryptGenRandom or some other source. (GH #1180)\n\n* Add support for gathering entropy using the Crypt-NG BCryptGenRandom\n  API. This is necessary to build for Windows Phone/Windows Store. (GH #1180)\n\n* Extend \"Raw\" signature padding (which allows signing a hash computed\n  externally) to optionally take a hash function name. In this case, it will be\n  verified that the input matches the expected hash size.  This also will\n  control the hash algorithm used for RFC 6979 deterministic nonces; previously\n  SHA-512 was always used for RFC 6979 nonces with \"Raw\". (GH #1153)\n\n* The advertised FFI API version has increased. This should have happened\n  already in 2.2 but was neglected. The ``botan_ffi_supports_api`` call will\n  return true for either the current or older versions of the API version since\n  no backwards incompatible changes have occurred.\n\n* Add new C89 API functions ``botan_hex_decode``, ``botan_base64_encode``,\n  ``botan_base64_decode``, ``botan_constant_time_compare``.\n\n* Add new C89 API functions ``botan_privkey_load_dh``, ``botan_pubkey_load_dh``,\n  and ``botan_privkey_create_dh`` (GH #1155)\n\n* Add ``is_passhash9_alg_supported`` (GH #1154)\n\n* The ``power_mod`` function now supports negative bases (GH #1179 #1168)\n\n* Add a new command line utility for examining TLS client hellos.\n\n* Added a new target for LLVM bitcode (GH #1169)\n\n* Improve support for Windows Phone (GH #1180 #796 #794)\n\n* Correct return value of ``botan_pk_op_verify_finish``. In 2.2.0 this function\n  returned -1 on invalid signature, instead of 1 which was used in 2.0, 2.1, and\n  now again in 2.3. (GH #1189 #1187)\n\n* Allow loading unencrypted private keys via FFI API (GH #1197)\n\n* Add new command line options ``--rng-type=drbg`` and ``--drbg-seed`` which\n  allow running commands with a deterministic RNG. (GH #1169)\n\n* Fix a number of warnings seen under Visual C++ (GH #1171 #795)\n\n* Workaround a GCC 7 bug that caused miscompilation of the GOST-34.11 hash\n  function on x86-32. (GH #882 #1148)\n\n* Fix a bug in SIMD_4x32 which affected little-endian PowerPC processors.\n  This would cause test failures for Serpent, among other problems.\n\n* Fix Altivec runtime detection, which was broken starting in Botan 2.1.0\n\n* Optimized the verification of TLS CBC padding bytes. Previously the check\n  examined every byte of the record, even though at most 256 bytes of padding\n  may be appended. (GH #1227)\n\n* Simplified definition of ``Botan::secure_allocator``. In particular, not\n  defining the ``construct`` and ``destroy`` methods avoids a performance problem\n  under MSVC. (GH #1228 and #1229)\n\n* The ``secure_allocator`` class now uses ``calloc`` and ``free`` instead of\n  ``new`` and ``delete``. In addition the actual allocation operation is hidden\n  inside of compiled functions, which significantly reduces code size. (GH #1231)\n\n* The ``secure_scrub_memory`` function now uses ``explicit_bzero`` on OpenBSD.\n\n* Previously ARM feature detection (NEON, AES, ...) relied on getauxval, which\n  is only supported on Linux and Android. Now iOS is supported, by checking the\n  model name/version and matching it against known versions. Unfortunately this\n  is the best available technique on iOS. On Aarch64 systems that are not iOS or\n  Linux/Android, a technique based on trial execution while catching SIGILL is\n  used. (GH #1213)\n\n* The output of ``botan config libs`` was incorrect, it produced ``-lbotan-2.X``\n  where X is the minor version, instead of the actual lib name ``-lbotan-2``.\n\n* Add ``constant_time_compare`` as better named equivalent of ``same_mem``.\n\n* Silence a Clang warning in ``create_private_key`` (GH #1150)\n\n* The fuzzers have been better integrated with the main build. See the\n  handbook for details. (GH #1158)\n\n* The Travis CI and AppVeyor CI builds are now run via a Python script. This\n  makes it easier to replicate the behavior of the CI build locally. Also a\n  number of changes were made to improve the turnaround time of CI builds.\n  (GH #1162 #1199)\n\n* Add support for Win32 filesystem operation, so the tests pass completely\n  on MinGW now (GH #1203)\n\n* Added a script to automate running TLS-Attacker tests.\n\n* The distribution script now creates reproducible outputs, by\n  forcing all modification times, uids, etc to values fixed by the release date.\n  (GH #1217)\n\n* The ``BOTAN_DLL`` macro has been split up into ``BOTAN_PUBLIC_API``,\n  ``BOTAN_UNSTABLE_API`` and ``BOTAN_TEST_API`` which allows\n  indicating in the header the API stability of the export. All three\n  are defined as ``BOTAN_DLL`` so overriding just that macro continues\n  to work as before. (GH #1216)\n\n* Optimize ``bigint_divop`` when a double-word type is available. (GH #494)\n\n* Fix several memory leaks in the tests. Additionally a false positive\n  leak seen under ``valgrind`` in the ``fork`` tests for the RNG was resolved.\n\n* Export ``CurveGFp_Repr`` type (only used internally) to resolve a\n  long standing UBSan warning. (GH #453)\n\n* Now ``-fstack-protector`` and similar flags that affect linking are exported\n  in ``botan config ldflags`` as they already were in the ``pkg-config`` output.\n  (GH #863)\n\n* Remove double underscore in header guards to avoid using names\n  reserved by ISO C++. (GH #512)\n\n* Additions to the SRP documentation (GH #1029)\n\n* The package transform (in ``package.h``) is now deprecated, and will be\n  removed in a future release. (GH #1215)\n\n* Add more tests for the const-time utils (GH #1214)\n\n* Fix a bug in FFI tests that caused the test files not to be found when using\n  ``--data-dir`` option (GH #1149)\n\n* C++ ``final`` annotations have been added to classes which are not\n  intended for derivation. This keyword was already in use but was not\n  applied consistently.\n\n* A typedef ``SecureVector`` has been added for the ``secure_vector`` type.\n  This makes porting code from 1.10 to 2.x API slightly simpler.\n\n* Header files have been cleaned up to remove unnecessary inclusions. In some\n  cases it may be required to include additional botan headers to get all the\n  declarations that were previously visible. For example, ``bigint.h`` no longer\n  includes ``rng.h``, but just forward declares ``RandomNumberGenerator``.\n\n* Improved support for IBM xlc compiler.\n\nVersion 2.2.0, 2017-08-07\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Add the Ed25519 signature scheme (GH #1066)\n\n* The format of x25519 keys, which previously used a non-standard encoding,\n  has changed to match the upcoming IETF specification. (GH #1076)\n\n* Add the SM2 signature scheme (GH #1082)\n\n* Add the SM2 public key encryption scheme (GH #1142)\n\n* Add the SM3 hash function (GH #996)\n\n* Add the Streebog (GOST R 34.11-2012) hash function (GH #1114)\n\n* Add the SM4 block cipher (GH #1080)\n\n* Add the PGP S2K algorithm (GH #1060)\n\n* Add SP 800-56A KDF (GH #1040)\n\n* Add ChaCha_RNG which is a very fast and completely non-standard\n  random bit generator (GH #1137)\n\n* Add support for SHA-1 and SHA-2 instructions added in Intel Goldmont\n  (GH #826)\n\n* Add support for SHA-1 and SHA-2 instructions added in ARMv8 (GH #844)\n\n* Add support for HOTP (RFC 4226) and TOTP (RFC 6238)\n  one-time-password algorithms (GH #1054)\n\n* Fix a bug that caused secure_allocator to not fully zeroize blocks\n  when sizeof(T) was greater than 1.\n\n* Add HashFunction::copy_state which allows efficiently computing the\n  hash of several messages with a common prefix (GH #1056 #1037)\n\n* ECC keys now encode their parameters using an OID instead of a literal\n  encoding of the domain parameters. This will lead to smaller public and\n  private keys in most instances. (GH #1093)\n\n* The OpenSSL backend now supports the 1.1.0 API (GH #1056)\n\n* Add a preliminary provider using BearSSL, currently EC and hashes supported\n  (GH #1094)\n\n* Fix a bug in certificate path length checking that could cause valid\n  chains to be rejected. (GH #1053)\n\n* It is possible for CBC, CFB, and stream ciphers to carry over the\n  nonce from the previous message, which is needed by some applications.\n  This worked in 1.10 but broke in 2.0. (GH #1044 fixing GH #864)\n\n* Avoid recursion in BER_Decoder::get_next_object which could cause\n  stack exhaustion. (GH #989)\n\n* Fix missing flush in DataSink_Stream::end_msg. (GH #972 fixing GH #972)\n\n* Allow to seek in the big endian counter mode of operation (GH #999)\n\n* Support loading ElGamal keys through FFI interface (GH #1008)\n\n* Support Windows sockets in ``http_util`` (allowing OCSP checks on Windows),\n  as well as in the TLS command line utils (GH #1138).\n\n* The ``--destdir`` flag to ``configure.py`` has been removed. Instead use\n  the ``DESTDIR`` environment variable at install time. This change was\n  done to more closely match how autoconf handles this case.\n  (GH #1139 #1111 #997 #996).\n\n* Many changes to configure.py and botan2.py to make them pylint clean\n  (GH #1041 #1002 #984)\n\n* Add command line utils ``hmac`` (GH #1001), ``encryption`` (GH #359),\n  ``hex_enc``, and ``hex_dec``.\n\n* Fix an error in ``sign_cert`` command line util, which ignored the\n  ``--ca-key-pass`` option. (GH #1106)\n\n* The ``speed`` util can now benchmark multiple buffer sizes (GH #1084)\n\n* Fix return value of FFI botan_bcrypt_is_valid (GH #1033)\n\n* Support generating RSA keys using OpenSSL (GH #1035)\n\n* Add new FFI functions botan_hash_block_size (GH #1036),\n  botan_hash_copy_state (GH #1059), botan_scrub_mem\n\n* Add support for RFC 3394 keywrap through FFI (GH #1135)\n\n* Support AES-CBC ciphers via OpenSSL (GH #1022)\n\n* Add function to return certificates included in OCSP response (GH #1123)\n\n* Complete wildcard handling for X.509 certificates (GH #1017)\n\n* Add some missing functions to TLS::Text_Policy (GH #1023)\n\n* It was previously possible to use ``--single-amalgamation-file``\n  without ``--amalgamation``, though it did not do anything useful. Now\n  ``--single-amalgamation-file`` requires ``--amalgamation`` also be set\n  on the command line.\n\nVersion 2.1.0, 2017-04-04\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Fix incorrect truncation in Bcrypt. Passwords in length between 56 and 72\n  characters were truncated at 56 characters. Found and reported by Solar Designer.\n  (CVE-2017-7252) (GH #938)\n\n* Fix a bug in X509 DN string comparisons that could result in out of bound\n  reads. This could result in information leakage, denial of service, or\n  potentially incorrect certificate validation results. Found independently\n  by Cisco Talos team and OSS-Fuzz. (CVE-2017-2801)\n\n* Correct minimum work factor for Bcrypt password hashes. All other\n  implementations require the work factor be at least 4. Previously Botan simply\n  required it be greater than zero. (GH #938)\n\n* Converge on a single side channel silent EC blinded multiply algorithm.\n  Uses Montgomery ladder with order/2 bits scalar blinding and point randomization\n  now by default. (GH #893)\n\n* Add ability to search for certificates using the SHA-256 of the distinguished name.\n  (GH #900)\n\n* Support a 0-length IV in ChaCha stream cipher. Such an IV is treated\n  identically to an 8-byte IV of all zeros.\n\n* Add new interfaces to the C API including multiple precision integers, key\n  validity tests, block ciphers, and extracting algorithm specific key parameters\n  (such as the modulus and public exponent from RSA public keys). GH #899 #944\n  #946 #961 #964\n\n* The PKCS11 module did not require any external dependencies, so it\n  has been enabled by default. The ``--with-pkcs11`` and ``--without-pkcs11``\n  flags to ``configure.py`` have been removed. PKCS11 can still be disabled\n  using ``--disable-modules=pkcs11`` (GH #837)\n\n* Add ``OS::run_cpu_instruction_probe`` for runtime probing of ISA extensions.\n  Supporting this requires system-specific techniques, currently Windows SEH and\n  Unix signal handling are supported.\n\n* Add support for ARM NEON in the SIMD_4x32 type\n\n* Add support for ARM CPU feature detection using getauxval (GH #843)\n\n* Previously Botan forbid any use of times past 2037 to avoid Y2038 issues.\n  Now this restriction is only in place on systems which have a 32-bit\n  ``time_t``. (GH #933 fixing #917)\n\n* Add generic type decoder function to BER decoder (GH #897)\n\n* Fix portability or build problems affecting Sun Studio compiler (GH #846),\n  Solaris, ppc64le, DragonflyBSD (GH #887)\n\n* Add ``--with-external-libdir`` to configure.py (GH #857 fixing #19 #767)\n\n* Add ``OS::get_high_resolution_clock`` which returns the best resolution\n  clock available on the system.\n\n* Change ``OS::get_processor_timestamp`` to return 0 if no hardware\n  cycle counter is available. Previously it silently fell back on some\n  other clock type.\n\n* Report cycles/byte in the output of ``botan speed``.\n\n* Add speed tests for modular exponentiations and ECC scalar multiplies.\n\n* Avoid using IP address for SNI in ``tls_client``. (GH #942)\n\n* Add command line util ``timing_test`` which enables running\n  timing-based side channel analysis of TLS CBC decryption, ECC scalar\n  multiplies, OAEP decoding, and other operations which are prone to\n  providing an oracle via side channel. This replaces the standalone\n  timing test suite added in 1.11.34, which has been removed.\n\n* Various cleanups and refactorings (GH #965)\n\n* Add wrapper of C++14 make_unique (GH #974)\n\n* Fix pkg-config output when --build-dir was used (GH #936)\n\n* Make it possible to disable `-fstack-protector` using a build-time flag.\n  GH #863\n\n* Add tests for TLS DSA ciphersuites, more Noekeon tests, others.\n\n* Avoid a GCC warning that triggered on the public key types (GH #849)\n\n* Fix various warnings flagged by pylint and pyflakes linters in\n  configure.py and botan.py (GH #832 #836 #839 #962 #975)\n\n* Improve support for OpenBSD including using getentropy (GH #954)\n  for PRNG seeding, and arc4random to access system RNG (GH #953)\n\n* Add ability to build through CMake. As of now this is only supported\n  for development rather than production builds. (GH #967)\n\n* Rename python wrapper to botan2.py (GH #847)\n\n* Change name constraint test to use a fixed reference time. Test certs have expired.\n\n* Increase Miller-Rabin iterations for DSA primes to match FIPS 186-4. (GH #881)\n\n* Fix possible ISO 9796-2 padding side channel, and add a missing length check (GH #891)\n\n* In command line utility, prefer the system RNG if it is available.\n\nVersion 2.0.1, 2017-01-09\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Change an unintended behavior of 2.0.0, which named the include\n  directory ``botan-2.0``. Since future release of Botan-2 should be\n  compatible with code written against old versions, there does not\n  seem to be any reason to version the include directory with the\n  minor number. (GH #830 #833)\n\n* Fix a bug which caused an error when building on Cygwin or\n  other platforms where shared libraries are not supported.\n  (GH #821)\n\n* Enable use of readdir on Cygwin, which allows the tests to run (GH #824)\n\n* Switch to readthedocs Sphinx theme by default (GH #822 #823)\n\nVersion 2.0.0, 2017-01-06\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* With this release the project adopts Semantic Versioning (GH #766)\n\n* Fix a longstanding bug in modular exponentiation which caused most\n  exponentiations modulo an even number to have an incorrect result; such moduli\n  occur only rarely in cryptographic contexts. (GH #754)\n\n* Fix a bug in BigInt multiply operation, introduced in 1.11.30, which could\n  cause incorrect results. Found by OSS-Fuzz fuzzing the ressol function, where\n  the bug manifested as an incorrect modular exponentiation. OSS-Fuzz bug #287\n\n* Fix a bug that meant the \"ietf/modp/6144\" and \"ietf/modp/8192\" discrete log\n  groups used an incorrect value for the generator, specifically the value\n  (p-1)/2 was used instead of the correct value of 2.\n\n* The DL_Group enum value X942_DH_PARAMETERS has been renamed\n  ANSI_X9_42_DH_PARAMETERS to avoid a conflict with Windows headers (GH #482)\n\n* Change default PEM header for X942 DH to match OpenSSL. Either version is\n  accepted on reading. (GH #818)\n\n* DL_Group strong generation previously set the generator to 2. However\n  sometimes 2 generates the entire group mod p, rather than the subgroup mod q.\n  This is invalid by X9.42 standard, and exposes incautious applications to\n  small subgroup attacks. Now DL_Group uses the smallest g which is a quadratic\n  residue. (GH #818)\n\n* Add iOS build target instead of piggybacking on OS X configuration. (GH #793)\n\n* Changes all Public_Key derived class ctors to take a std::vector instead of a\n  secure_vector for the DER encoded public key bits. (GH #768)\n\n* Allow use of custom extensions when creating X.509 certificates (GH #744)\n\n* The default TLS policy now requires 2048 or larger DH groups by default.\n\n* Add BSI_TR_02102_2 TLS::Policy subclass representing BSI TR-02102-2 recommendations.\n\n* The default Path_Validation_Restrictions constructor has changed to\n  require at least 110 bit signature strength. This means 1024 bit RSA\n  certificates and also SHA-1 certificates are rejected by default.\n  Both settings were already the default for certificate validation in\n  TLS handshake, but this changes it for applications also.\n\n* Add ISO 9796-2 signature padding schemes DS2 and DS3. These schemes provide\n  message recovery (part or all of the plaintext message can be recovered from\n  the signature alone) and are used by some industry protocols. (GH #759)\n\n* Rewrite all the code that handles parsing CBC padding bytes to run without\n  conditional jumps or loads. (GH #765 #728)\n\n* Fix deref of invalid memory location in TLS client when the server chooses a\n  ciphersuite value larger than the largest TLS ciphersuite ID compiled into the\n  table. This might conceivably cause a crash in rare circumstances, but does\n  not seem to be further exploitable. (GH #758)\n\n* Rename Public_Key::x509_subject_public_key, which does not return a\n  X.509 SubjectPublicKey, to public_key_bits. Add a new non-virtual function\n  Public_Key::subject_public_key which does exactly that. (GH #685 #757)\n\n* Rename Private_Key::pkcs8_private_key, which does not return a\n  PKCS#8 private key, to private_key_bits. Add a new non-virtual function\n  Private_Key::private_key_info which does exactly that. (GH #685 #757)\n\n* The deprecated ECB Cipher_Mode class has been removed (GH #756)\n\n* The class SRP6_Authenticator_File (in srp6_files.h) was meant to parse GnuTLS\n  SRP files. But it was completely untested, and it turns out due to several\n  problems it was completely unable to parse any SRP file correctly. It has\n  been removed, with a future replacement planned that can handle both\n  flat files (in the actual SRP format) or using a SQL database.\n\n* Fix tests errors when write access to /dev/urandom is prohibited (GH #748)\n\n* Add more Diffie-Hellman tests (GH #790), tests for RSA blinding, others.\n\n* Add `tls_ciphers` command which prints the ciphersuites a client\n  hello will contain, depending on the policy specified.\n\n* Prevent TLS from negotiating SHA-2 ciphersuites in TLS v1.0/v1.1. These\n  ciphersuites are technically not defined except for v1.2, so disable\n  them in older protocols. (GH #496)\n\n* Documentation: add project goals (GH #788) and side channel info (GH #787)\n\nOlder Versions\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* The release notes for versions 0.7.0 through 1.11.34 can be found in\n  ``doc/old_news.rst``\n"
        },
        {
          "name": "readme.rst",
          "type": "blob",
          "size": 6.6181640625,
          "content": "Botan: Crypto for Real Systems\n========================================\n\nBotan (Japanese for peony flower) is a cryptography library released under the\npermissive `Simplified BSD <https://botan.randombit.net/license.txt>`_ license.\n\nBotan's `goal <https://botan.randombit.net/handbook/goals.html>`_\nis to be the best option for production cryptography by offering the tools\nnecessary to implement a range of practical systems, such as TLSv1.3, X.509 PKI,\nmodern AEAD ciphers, support for PKCS#11 and TPM hardware, memory-hard password\nhashing, and post quantum cryptography. All of this is covered by an extensive\ntest suite, including an automated system for detecting side channels. The\nmodular build system allows enabling or disabling features in a fine-grained way,\nand amalgamation builds are also supported.\n\nIt comes out of the box with C++, C, and Python APIs, and several other `language\nbindings <https://github.com/randombit/botan/wiki/Language-Bindings>`_ are available.\nThe library is accompanied by a featureful `command line interface\n<https://botan.randombit.net/handbook/cli.html>`_. Consult the `documentation\n<https://botan.randombit.net/handbook>`_ for more information.\n\nDevelopment is coordinated on `GitHub <https://github.com/randombit/botan>`__ and\ncontributions are welcome. If you need help, please open an issue on `GitHub\n<https://github.com/randombit/botan/issues>`__. If you think you have found a\nsecurity issue, see the `security page <https://botan.randombit.net/security.html>`_\nfor contact information.\n\n|ci_status| |nightly_ci_status| |coverage| |ossfuzz| |repo| |ossf| |cii|\n\n.. |ci_status| image:: https://github.com/randombit/botan/actions/workflows/ci.yml/badge.svg?branch=master\n    :target: https://github.com/randombit/botan/actions/workflows/ci.yml\n    :alt: CI status\n\n.. |nightly_ci_status| image:: https://github.com/randombit/botan/actions/workflows/nightly.yml/badge.svg?branch=master\n    :target: https://github.com/randombit/botan/actions/workflows/nightly.yml\n    :alt: nightly CI status\n\n.. |coverage| image:: https://img.shields.io/coverallsCoverage/github/randombit/botan?branch=master\n    :target: https://coveralls.io/github/randombit/botan\n    :alt: Coverage report\n\n.. |ossfuzz| image:: https://oss-fuzz-build-logs.storage.googleapis.com/badges/botan.svg\n    :target: https://oss-fuzz.com/coverage-report/job/libfuzzer_asan_botan/latest\n    :alt: OSS-Fuzz status\n\n.. |repo| image:: https://repology.org/badge/tiny-repos/botan.svg\n    :target: https://repology.org/project/botan/versions\n    :alt: Packaging status\n\n.. |ossf| image:: https://api.securityscorecards.dev/projects/github.com/randombit/botan/badge\n    :target: https://securityscorecards.dev/viewer/?uri=github.com/randombit/botan\n    :alt: OSSF Scorecard\n\n.. |cii| image:: https://bestpractices.coreinfrastructure.org/projects/531/badge\n    :target: https://bestpractices.coreinfrastructure.org/projects/531\n    :alt: CII Best Practices statement\n\nReleases\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAll releases are signed with a `PGP key <https://botan.randombit.net/pgpkey.txt>`_.\nSee the `release notes <https://botan.randombit.net/news.html>`_ for\nwhat's new.\n\nBotan is also available through most `distributions\n<https://github.com/randombit/botan/wiki/Distros>`_ such as Fedora,\nDebian, Arch and Homebrew.\n\nBotan3\n--------\n\nNew minor releases of Botan3 are made quarterly, normally on the first Tuesday of\nFebruary, May, August, and November.\n\nThe latest release from the Botan3 release series is\n`3.6.1 <https://botan.randombit.net/releases/Botan-3.6.1.tar.xz>`_\n`(sig) <https://botan.randombit.net/releases/Botan-3.6.1.tar.xz.asc>`__,\nreleased on 2024-10-26.\n\nBotan2\n--------\n\nBotan2 has, as of 2025-1-1, reached end of life. No further releases are expected.\n\nThe latest release from the Botan2 release series is\n`2.19.5 <https://botan.randombit.net/releases/Botan-2.19.5.tar.xz>`_\n`(sig) <https://botan.randombit.net/releases/Botan-2.19.5.tar.xz.asc>`__,\nreleased on 2024-07-08.\n\nFind Enclosed\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTransport Layer Security (TLS) Protocol\n----------------------------------------\n\n* TLS v1.2/v1.3, and DTLS v1.2\n* Supported extensions include session tickets, SNI, ALPN, OCSP stapling,\n  encrypt-then-mac CBC, and extended master secret.\n* Supports authentication using certificates or preshared keys (PSK)\n* Supports record encryption with modern AEAD modes as well as legacy CBC ciphersuites.\n* TLS 1.3 supports hybrid post-quantum key exchange using ML-KEM or FrodoKEM\n\nPublic Key Infrastructure\n----------------------------------------\n\n* X.509v3 certificates and CRL creation and handling\n* PKIX certificate path validation, including name constraints\n* OCSP request creation and response handling\n* PKCS #10 certificate request generation and processing\n* Access to Windows, macOS and Unix system certificate stores\n* SQL database backed certificate store\n\nPublic Key Cryptography\n----------------------------------------\n\n* RSA signatures and encryption\n* DH, ECDH, X25519 and X448 key agreement\n* Signature schemes ECDSA, DSA, Ed25519, Ed448, ECGDSA, ECKCDSA, SM2, GOST 34.10\n* Post-quantum signature schemes ML-DSA (Dilithium), SLH-DSA (SPHINCS+), HSS/LMS, XMSS\n* Post-quantum key encapsulation schemes ML-KEM (Kyber), FrodoKEM, Classic McEliece\n* ElGamal encryption\n* Padding schemes OAEP, PSS, PKCS #1 v1.5, X9.31\n\nCiphers, hashes, MACs, and checksums\n----------------------------------------\n\n* Authenticated cipher modes EAX, OCB, GCM, SIV, CCM, (X)ChaCha20Poly1305\n* Cipher modes CTR, CBC, XTS, CFB, OFB\n* Block ciphers AES, ARIA, Blowfish, Camellia, CAST-128, DES/3DES, IDEA,\n  SEED, Serpent, SHACAL2, SM4, Threefish-512, Twofish\n* Stream ciphers (X)ChaCha20, (X)Salsa20, RC4\n* Hash functions SHA-1, SHA-2, SHA-3, RIPEMD-160, BLAKE2b/BLAKE2s, Skein-512, SM3, Whirlpool\n* Password hashing schemes Argon2, Scrypt, bcrypt, and PBKDF2\n* Authentication codes HMAC, CMAC, Poly1305, KMAC, SipHash, GMAC\n* Non-cryptographic checksums Adler32, CRC24, CRC32\n\nOther Useful Things\n----------------------------------------\n\n* Full C++ PKCS #11 API wrapper\n* Interfaces for TPM v1.2 and v2.0 device access\n* Simple compression API wrapping zlib, bzip2, and lzma libraries\n* RNG wrappers for system RNG, ESDM and hardware RNGs\n* HMAC_DRBG and entropy collection system for userspace RNGs\n* SRP-6a password authenticated key exchange\n* Key derivation functions including HKDF, KDF2, SP 800-108, SP 800-56A, SP 800-56C\n* HOTP and TOTP algorithms\n* Format preserving encryption scheme FE1\n* Threshold secret sharing\n* Roughtime client\n* Zfec compatible forward error correction encoding\n* Encoding schemes including hex, base32, base64 and base58\n* NIST key wrapping\n* Boost.Asio compatible TLS client stream\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}