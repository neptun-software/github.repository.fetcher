{
  "metadata": {
    "timestamp": 1736565421335,
    "page": 265,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "clab/dynet",
      "stars": 3426,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".appveyor.yml",
          "type": "blob",
          "size": 2.8994140625,
          "content": "os: Visual Studio 2015\n\nplatform: x64\n\nenvironment:\n  global:\n    MSVC_DEFAULT_OPTIONS: ON\n    BOOST_ROOT: C:\\Libraries\\boost_1_67_0\n    BOOST_LIBRARYDIR: C:\\Libraries\\boost_1_67_0\\lib64-msvc-14.0\n    MSVC: 1\n    MINICONDA: \"C:\\\\Miniconda36-x64\"\n    TWINE_USERNAME: danielh\n    TWINE_PASSWORD:\n      secure: cpMn69tLzuhwO7EPhhiVwA==\n  matrix:\n    - PYTHON_VERSION: 3.6\n    - PYTHON_VERSION: 3.7\n    - PYTHON_VERSION: 3.8\n    - PYTHON_VERSION: 3.9\n    - PYTHON_VERSION: 3.10\n\nconfiguration: Release\n\ninit:\n  - cmd: cmake --version\n  - cmd: msbuild /version\n  - \"ECHO %PYTHON_VERSION% %MINICONDA%\"\n\ninstall:\n  - cmd: git submodule update --init --recursive\n  - ps: wget https://github.com/clab/dynet/releases/download/2.1/eigen-b2e267dc99d4.zip -OutFile eigen.zip\n  - cmd: mkdir C:\\projects\\eigen\n  - cmd: 7z x eigen.zip -o\"C:\\projects\\eigen\" -y > nul\n  - set PATH=%MINICONDA%;%MINICONDA%\\Scripts;%PATH%\n  - conda config --set always_yes yes --set changeps1 no\n  - conda update -q conda\n  - conda info -a\n  - conda create -q -n test-env python=%PYTHON_VERSION% cython numpy\n  - activate test-env\n  - ps: if ($env:APPVEYOR_REPO_TAG -eq $True) { (gc setup.py) -replace '. (version=.)0.0.0', \"`${1}$env:APPVEYOR_REPO_TAG_NAME\" | Out-File -encoding 'UTF8' setup.py }\n\nbefore_build:\n  - cmd: md build\n  - cmd: cd build\n  - cmd: cmake -DEIGEN3_INCLUDE_DIR=C:/projects/eigen -G \"Visual Studio 14 2015 Win64\" -DCMAKE_BUILD_TYPE=%configuration% -DENABLE_BOOST=ON -DENABLE_CPP_EXAMPLES=ON -DBOOST_ROOT:PATHNAME=\"%BOOST_ROOT%\" -DBoost_LIBRARY_DIRS:FILEPATH=\"%BOOST_LIBRARYDIR%\" -DBoost_NO_BOOST_CMAKE=TRUE -DBoost_NO_SYSTEM_PATHS=TRUE -DPYTHON=python.exe .. \n  - cmd: set VS90COMNTOOLS=%VS140COMNTOOLS%\n  - cmd: cd ..\n\nbuild:\n  project: build\\dynet.sln\n  verbosity: normal\n\nafter_build:\n  - cmd: cd %APPVEYOR_BUILD_FOLDER%\\build\\python\n  - python ../../setup.py EIGEN3_INCLUDE_DIR=C:/projects/eigen build --build-dir=.. --skip-build bdist_wheel install\n\ntest_script:\n  # Cmake (C++) unit tests\n  - cmd: set PATH=%BOOST_LIBRARYDIR%;%PATH%\n  - cmd: cd %APPVEYOR_BUILD_FOLDER%\\build\n  - cmd: ctest -C %configuration% --output-on-failure --timeout 300\n  # Python unit tests\n  - cmd: cd %APPVEYOR_BUILD_FOLDER%\\build\\python\n  - python -m unittest discover %APPVEYOR_BUILD_FOLDER%\\tests\\python -v\n\ndeploy_script:\n  - cmd: cd %APPVEYOR_BUILD_FOLDER%\n  - python setup.py sdist\n  - echo [distutils]                                  > %USERPROFILE%\\\\.pypirc\n  - echo index-servers =                             >> %USERPROFILE%\\\\.pypirc\n  - echo     pypi                                    >> %USERPROFILE%\\\\.pypirc\n  - echo [pypi]                                      >> %USERPROFILE%\\\\.pypirc\n  - echo username=%PYPI_USERNAME%                    >> %USERPROFILE%\\\\.pypirc\n  - echo password=%PYPI_PASSWORD%                    >> %USERPROFILE%\\\\.pypirc\n  - python -m pip install twine\n  - if \"%APPVEYOR_REPO_TAG%\"==\"true\" ( python -m twine upload --skip-existing dist/* build/python/dist/* )\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5986328125,
          "content": "# cmake stuff\nbuild*/\nTesting/\ndynet/Testing/\ndynet/tests.bin/\nCTestTestfile.cmake\nconfig.h\nMakefile\nCMakeCache.txt\nCMakeFiles\ncmake_install.cmake\npython/dynet.cpp\npython/dist/\npython/dyNET.egg-info/\n\n# binaries\n\n#data\nrnnlm/ptb-mikolov/\n\n# Python temporary files\n*.pyc\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\n# Editor stuff\n*.swp\n\n# Doc stuff\ndoc/doxygen/xml\ndoc/source/tutorials_notebooks\n\n.RData\n.RHistory\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 9.205078125,
          "content": "sudo: required\nservices:\n  - docker\ndist: trusty\nenv:\n  global:\n    - PYTHON=python TWINE_USERNAME=danielh\n    - secure: \"j8Ro21/7h5FKuJHPJRHYfOiZHMoAfD/dfpqXZreGrl79jVSEdPZmmOdvFH++CqrRdttpxOf2Lg5qOfpXfziC5ecJx1USslBSo2qwAG9JwPkwjCK7MhouM64yhVedj9Es/H635aufbyRsDIhKr5poPrrH+UebEq/63QpEdDWIWq8=\"\nbranches:\n  only:\n    - master\n    - /^[0-9.]*$/\nstages:\n  - test\n  - name: test_pip\n    if: repo = clab/dynet AND tag IS present\njobs:\n  include:\n    - os: osx\n      compiler: clang\n      language: cpp\n      env: PYVER=2.7 PYNUM=2 PYTHON_INSTALL=manual\n      if: type = cron OR tag IS present\n    - os: osx\n      compiler: clang\n      language: cpp\n      env: PYVER=2.7 PYNUM=2 PYTHON_INSTALL=pip BUILD_ARCH=x86_64\n      if: type = cron OR tag IS present\n    - os: osx\n      compiler: clang\n      language: cpp\n      env: PYVER=3.5 PYNUM=3 PYTHON_INSTALL=manual\n      if: type = cron OR tag IS present\n    - os: osx\n      compiler: clang\n      language: cpp\n      env: PYVER=3.5 PYNUM=3 PYTHON_INSTALL=pip BUILD_ARCH=x86_64\n      if: type = cron OR tag IS present\n    - os: osx\n      compiler: clang\n      language: cpp\n      env: PYVER=3.6 PYNUM=3 PYTHON_INSTALL=manual\n    - os: osx\n      compiler: clang\n      language: cpp\n      env: PYVER=3.6 PYNUM=3 PYTHON_INSTALL=pip BUILD_ARCH=x86_64\n    - os: osx\n      compiler: clang\n      language: cpp\n      env: PYVER=3.7 PYNUM=3 PYTHON_INSTALL=manual\n    - os: osx\n      compiler: clang\n      language: cpp\n      env: PYVER=3.8 PYNUM=3 PYTHON_INSTALL=manual\n    - os: osx\n      compiler: clang\n      language: cpp\n      env: PYVER=3.9 PYNUM=3 PYTHON_INSTALL=manual\n    - os: osx\n      compiler: clang\n      language: cpp\n      env: PYVER=3.10 PYNUM=3 PYTHON_INSTALL=manual\n    - os: osx\n      compiler: clang\n      language: cpp\n      env: PYVER=3.7 PYNUM=3 PYTHON_INSTALL=pip BUILD_ARCH=x86_64\n    - os: osx\n      compiler: clang\n      language: cpp\n      env: PYVER=3.8 PYNUM=3 PYTHON_INSTALL=pip BUILD_ARCH=x86_64\n    - os: osx\n      compiler: clang\n      language: cpp\n      env: PYVER=3.9 PYNUM=3 PYTHON_INSTALL=pip BUILD_ARCH=x86_64\n    - os: osx\n      compiler: clang\n      language: cpp\n      env: PYVER=3.10 PYNUM=3 PYTHON_INSTALL=pip BUILD_ARCH=x86_64\n    - os: linux\n      compiler: gcc\n      language: cpp\n      env: PYVER=2.7 PYNUM=2 PYTHON_INSTALL=manual\n    - os: linux\n      compiler: gcc\n      language: python\n      python: 2.7\n      env: PYVER=2.7 PYNUM=2 PYTHON_INSTALL=pip BUILD_ARCH=i686\n      if: type = cron OR tag IS present\n    - os: linux\n      compiler: gcc\n      language: python\n      python: 2.7\n      env: PYVER=2.7 PYNUM=2 PYTHON_INSTALL=pip BUILD_ARCH=x86_64\n    - os: linux\n      compiler: gcc\n      language: cpp\n      env: PYVER=3.5 PYNUM=3 PYTHON_INSTALL=manual\n      if: type = cron OR tag IS present\n    - os: linux\n      compiler: gcc\n      language: python\n      python: 3.5\n      env: PYVER=3.5 PYNUM=3 PYTHON_INSTALL=pip BUILD_ARCH=i686\n      if: type = cron OR tag IS present\n    - os: linux\n      compiler: gcc\n      language: python\n      python: 3.5\n      env: PYVER=3.5 PYNUM=3 PYTHON_INSTALL=pip BUILD_ARCH=x86_64\n      if: type = cron OR tag IS present\n    - os: linux\n      compiler: gcc\n      language: cpp\n      env: PYVER=3.6 PYNUM=3 PYTHON_INSTALL=manual\n    - os: linux\n      compiler: gcc\n      language: python\n      python: 3.6\n      env: PYVER=3.6 PYNUM=3 PYTHON_INSTALL=pip BUILD_ARCH=i686\n      if: type = cron OR tag IS present\n    - os: linux\n      compiler: gcc\n      language: python\n      python: 3.6\n      env: PYVER=3.6 PYNUM=3 PYTHON_INSTALL=pip BUILD_ARCH=x86_64\n    - os: linux\n      compiler: gcc\n      language: cpp\n      env: PYVER=3.6 PYNUM=3 PYTHON_INSTALL=manual BACKEND=cuda\n    - os: linux\n      compiler: gcc\n      language: cpp\n      env: PYVER=3.7 PYNUM=3 PYTHON_INSTALL=manual\n    - os: linux\n      compiler: gcc\n      language: cpp\n      env: PYVER=3.8 PYNUM=3 PYTHON_INSTALL=manual\n    - os: linux\n      compiler: gcc\n      language: cpp\n      env: PYVER=3.9 PYNUM=3 PYTHON_INSTALL=manual\n    - os: linux\n      compiler: gcc\n      language: cpp\n      env: PYVER=3.10 PYNUM=3 PYTHON_INSTALL=manual\n    - os: linux\n      dist: xenial\n      compiler: gcc\n      language: python\n      python: 3.7\n      env: PYVER=3.7 PYNUM=3 PYTHON_INSTALL=pip BUILD_ARCH=i686\n      if: type = cron OR tag IS present\n    - os: linux\n      dist: xenial\n      compiler: gcc\n      language: python\n      python: 3.8\n      env: PYVER=3.8 PYNUM=3 PYTHON_INSTALL=pip BUILD_ARCH=i686\n      if: type = cron OR tag IS present\n    - os: linux\n      dist: xenial\n      compiler: gcc\n      language: python\n      python: 3.9\n      env: PYVER=3.9 PYNUM=3 PYTHON_INSTALL=pip BUILD_ARCH=i686\n      if: type = cron OR tag IS present\n    - os: linux\n      dist: xenial\n      compiler: gcc\n      language: python\n      python: 3.10\n      env: PYVER=3.10 PYNUM=3 PYTHON_INSTALL=pip BUILD_ARCH=i686\n      if: type = cron OR tag IS present\n    - os: linux\n      dist: xenial\n      compiler: gcc\n      language: python\n      python: 3.7\n      env: PYVER=3.7 PYNUM=3 PYTHON_INSTALL=pip BUILD_ARCH=x86_64\n    - os: linux\n      dist: xenial\n      compiler: gcc\n      language: python\n      python: 3.8\n      env: PYVER=3.8 PYNUM=3 PYTHON_INSTALL=pip BUILD_ARCH=x86_64\n    - os: linux\n      dist: xenial\n      compiler: gcc\n      language: python\n      python: 3.9\n      env: PYVER=3.9 PYNUM=3 PYTHON_INSTALL=pip BUILD_ARCH=x86_64\n    - os: linux\n      dist: xenial\n      compiler: gcc\n      language: python\n      python: 3.10\n      env: PYVER=3.10 PYNUM=3 PYTHON_INSTALL=pip BUILD_ARCH=x86_64\n    - os: linux\n      compiler: gcc\n      language: cpp\n      env: PYVER=3.7 PYNUM=3 PYTHON_INSTALL=manual BACKEND=cuda\n    - os: linux\n      compiler: gcc\n      language: cpp\n      env: PYVER=3.8 PYNUM=3 PYTHON_INSTALL=manual BACKEND=cuda\n    - os: linux\n      compiler: gcc\n      language: cpp\n      env: PYVER=3.9 PYNUM=3 PYTHON_INSTALL=manual BACKEND=cuda\n    - os: linux\n      compiler: gcc\n      language: cpp\n      env: PYVER=3.10 PYNUM=3 PYTHON_INSTALL=manual BACKEND=cuda\n    - stage: test_pip\n      os: osx\n      env: PYVER=2.7 PYNUM=2\n      before_script: pip install dynet\n      script: python tests/python/test.py\n    - os: osx\n      env: PYVER=3.5 PYNUM=3\n      before_script: pip install dynet\n      script: python tests/python/test.py\n    - os: osx\n      env: PYVER=3.6 PYNUM=3\n      before_script: pip install dynet\n      script: python tests/python/test.py\n    - os: osx\n      env: PYVER=3.7 PYNUM=3\n      before_script: pip install dynet\n      script: python tests/python/test.py\n    - os: osx\n      env: PYVER=3.8 PYNUM=3\n      before_script: pip install dynet\n      script: python tests/python/test.py\n    - os: osx\n      env: PYVER=3.9 PYNUM=3\n      before_script: pip install dynet\n      script: python tests/python/test.py\n    - os: osx\n      env: PYVER=3.10 PYNUM=3\n      before_script: pip install dynet\n      script: python tests/python/test.py\n    - os: linux\n      language: python\n      python: 2.7\n      before_script: pip install dynet\n      script: python tests/python/test.py\n    - os: linux\n      language: python\n      python: 3.5\n      before_script: pip install dynet\n      script: python tests/python/test.py\n    - os: linux\n      language: python\n      python: 3.6\n      before_script: pip install dynet\n      script: python tests/python/test.py\n    - os: linux\n      language: python\n      python: 3.6\n      before_script: .travis/fix_version.sh\n      script: python setup.py sdist\n      if: tag IS present\n    - os: linux\n      dist: xenial\n      language: python\n      python: 3.7\n      before_script: pip install dynet\n      script: python tests/python/test.py\n    - os: linux\n      dist: xenial\n      language: python\n      python: 3.8\n      before_script: pip install dynet\n      script: python tests/python/test.py\n    - os: linux\n      dist: xenial\n      language: python\n      python: 3.9\n      before_script: pip install dynet\n      script: python tests/python/test.py\n    - os: linux\n      dist: xenial\n      language: python\n      python: 3.10\n      before_script: pip install dynet\n      script: python tests/python/test.py\n    - os: linux\n      dist: xenial\n      language: python\n      python: 3.7\n      before_script: .travis/fix_version.sh\n      script: python setup.py sdist\n      if: tag IS present\n    - os: linux\n      dist: xenial\n      language: python\n      python: 3.8\n      before_script: .travis/fix_version.sh\n      script: python setup.py sdist\n      if: tag IS present\n    - os: linux\n      dist: xenial\n      language: python\n      python: 3.9\n      before_script: .travis/fix_version.sh\n      script: python setup.py sdist\n      if: tag IS present\n    - os: linux\n      dist: xenial\n      language: python\n      python: 3.10\n      before_script: .travis/fix_version.sh\n      script: python setup.py sdist\n      if: tag IS present\n\ninstall:\n  - travis_retry .travis/install_dependencies.sh\n  - export EIGEN3_INCLUDE_DIR=/usr/local/include/eigen3\n  - if [ \"$TRAVIS_OS_NAME\" == osx ]; then export PATH=\"$PWD/miniconda/bin:$PATH\"; source activate \"$PYVER\"; fi\n\nbefore_script:\n  - .travis/build_dynet.sh\n\nafter_failure:\n  - cat $TRAVIS_BUILD_DIR/build/CMakeFiles/CMakeError.log\n\nscript:\n  - .travis/test_dynet.sh\n\ndeploy:\n  provider: script\n  skip_cleanup: true\n  script:\n    - .travis/deploy.sh\n  on:\n    repo: clab/dynet\n    tags: true\n    condition: \"$PYTHON_INSTALL = pip\"\n"
        },
        {
          "name": ".travis",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 8.3017578125,
          "content": "project(dynet)\ncmake_minimum_required(VERSION 2.8 FATAL_ERROR)\n\nset(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)\n\n# DYNET uses Eigen which exploits modern CPU architectures. To get the\n# best possible performance, the following are recommended:\n#   1. use very recent versions of gcc or Clang to build\n#   2. use very recent versions of Eigen (ideally the dev version)\n#   3. try compiler options like -march=native or other architecture\n#      flags (the compiler does not always make the best configuration\n#      decisions without help)\n\n# NOTE: This seems to be causing problems with linking before using\n#       make install. It is allegedly preferred, but probably doesn't\n#       suit our model of not installing the library most of the time.\nset(CMAKE_MACOSX_RPATH 0)\n\nfunction(find_mkl)\n  set(MKL_ARCH intel64)\n  find_path(MKL_INCLUDE_DIR mkl.h\n            PATHS ${MKL_ROOT} ${MKL_ROOT}/include)\n  find_library(MKL_CORE_LIB NAMES mkl_intel_lp64 mkl_intel_thread mkl_core\n               PATHS ${MKL_ROOT} ${MKL_ROOT}/lib/${MKL_ARCH}\n                     ${MKL_ROOT}/lib #OSX\n               DOC \"MKL core library path\")\n\n  find_library(MKL_COMPILER_LIB NAMES iomp5 libiomp5md\n               PATHS ${MKL_ROOT} ${MKL_ROOT}/../compiler/lib/${MKL_ARCH}              #Windows\n                     ${MKL_ROOT}/../compilers_and_libraries/linux/lib/${MKL_ARCH}_lin #Linux\n                     ${MKL_ROOT}/../compilers_and_libraries/mac/lib                   #OSX\n               DOC \"MKL compiler lib (for threaded MKL)\")\n\n  if(MKL_INCLUDE_DIR AND MKL_CORE_LIB AND MKL_COMPILER_LIB)\n    get_filename_component(MKL_CORE_LIB_DIR ${MKL_CORE_LIB} DIRECTORY)\n    get_filename_component(MKL_COMPILER_LIB_DIR ${MKL_COMPILER_LIB} DIRECTORY)\n    get_filename_component(MKL_COMPILER_LIB_FILE ${MKL_COMPILER_LIB} NAME)\n    message(STATUS \"Found MKL\\n   * include: ${MKL_INCLUDE_DIR},\\n   * core library dir: ${MKL_CORE_LIB_DIR},\\n   * compiler library: ${MKL_COMPILER_LIB}\")\n\n    set(LIBS ${LIBS} mkl_rt ${MKL_COMPILER_LIB_FILE} PARENT_SCOPE)\n    include_directories(${MKL_INCLUDE_DIR})\n    link_directories(${MKL_CORE_LIB_DIR} ${MKL_COMPILER_LIB_DIR})\n    set(MKL_LINK_DIRS ${MKL_CORE_LIB_DIR} ${MKL_COMPILER_LIB_DIR} PARENT_SCOPE) # Keeping this for python build\n  else()\n    message(FATAL_ERROR \"Failed to find MKL in path: ${MKL_ROOT} (Did you set MKL_ROOT properly?)\")\n  endif()\nendfunction()\n\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE \"Release\")\nendif()\n\n######## Cross-compiler, cross-platform options\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DEIGEN_FAST_MATH\")\nif (MKL OR MKL_ROOT)\n  if (DEFINED ENV{MKL_ROOT} AND NOT DEFINED MKL_ROOT)  # use env variable if not defined\n    set(MKL_ROOT $ENV{MKL_ROOT})\n  endif()\n  find_mkl()  # sets include/lib directories and sets ${LIBS} needed for linking\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DEIGEN_USE_MKL_ALL\")\nendif()\n\n# There are about 30 files compiled for GPU. We merge them into less\n# for faster compilation. Set to 0 to mean no merging, or k to merge into k files. \nif(NOT DEFINED GPU_NUMFILES)\n  if(MSVC)\n    set(GPU_NUMFILES 1)   # MSVC does serial compilation of CUDA, so minimize overhead\n  else()\n    set(GPU_NUMFILES 4)   # Should probably be set to number of jobs in parallel make\n  endif()\nendif()\n\n\n######## Platform-specific options\nif(WIN32)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DNOMINMAX\")   # Disable min/max macros in windef.h\nelseif(APPLE AND (${CMAKE_SYSTEM_PROCESSOR} MATCHES \"arm.*\" OR ${CMAKE_SYSTEM_PROCESSOR} MATCHES \"aarch64.*\"))\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -mcpu=apple-m1\")   # Clang on ARM-based Macs does not support -march=native\nelse()\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -march=native\")\nendif()\n\n######## Compiler-specific options\nif(MSVC)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -W1 /MP\")   # -Wall produces 20k warnings. Enable parallel compilation\nelse()\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fPIC -fno-finite-math-only -Wall -Wno-missing-braces -std=c++11\")\n\n  if (NOT RELEASE_OPT_LEVEL)\n    set(RELEASE_OPT_LEVEL \"fast\")\n  endif()\n  message(\"-- Optimization level: ${RELEASE_OPT_LEVEL}\")\n\n  set(CMAKE_CXX_FLAGS_DEBUG \"-pedantic -O0 -g -fno-omit-frame-pointer\")\n  set(CMAKE_CXX_FLAGS_RELWITHDEBINFO \"-Og -g\")\n  set(CMAKE_CXX_FLAGS_RELEASE \"-funroll-loops -O${RELEASE_OPT_LEVEL} -DNDEBUG\")\nendif()\n\ninclude_directories(${CMAKE_CURRENT_SOURCE_DIR}\n                    ${PROJECT_SOURCE_DIR}/external/easyloggingpp/src)\n\nfunction(find_cudnn)\n  if (DEFINED ENV{CUDNN_ROOT} AND NOT DEFINED CUDNN_ROOT)  # use env variable if not defined\n    set(CUDNN_ROOT $ENV{CUDNN_ROOT})\n  elseif (DEFINED CUDA_TOOLKIT_ROOT_DIR AND NOT DEFINED CUDNN_ROOT)  # use env variable if not defined\n    set(CUDNN_ROOT ${CUDA_TOOLKIT_ROOT_DIR})\n  endif()\n#  set(CUDNN_ROOT /usr/local/cuda CACHE PATH \"CUDNN root path\")\n  find_path(CUDNN_INCLUDE_DIRS cudnn.h\n    HINTS ${CUDNN_ROOT}\n          ${CUDNN_ROOT}/include\n    DOC \"CUDNN include path\")\n  find_library(CUDNN_LIBRARIES NAMES libcudnn.so cudnn.lib\n    PATHS ${CUDNN_ROOT}\n          ${CUDNN_ROOT}/lib\n          ${CUDNN_ROOT}/lib64\n          ${CUDNN_ROOT}/lib/x64\n    DOC \"CUDNN library path\")\n  if(CUDNN_INCLUDE_DIRS AND CUDNN_LIBRARIES)\n    set(CUDNN_FOUND TRUE PARENT_SCOPE)\n    message(STATUS \"Found CUDNN (include: ${CUDNN_INCLUDE_DIRS}, library: ${CUDNN_LIBRARIES})\")\n    mark_as_advanced(CUDNN_INCLUDE_DIRS CUDNN_LIBRARIES)\n  else()\n    MESSAGE(STATUS \"Failed to find CUDNN in path: ${CUDNN_ROOT} (Did you set CUDNN_ROOT properly?)\")\n  endif()\nendfunction()\n\n# look for Boost\nif(ENABLE_BOOST)\n  message(\"-- Enabling Boost\")\n  if(DEFINED ENV{BOOST_ROOT})\n    set(Boost_NO_SYSTEM_PATHS ON)\n    if(DEFINED ${Boost_INCLUDE_DIR})\n      get_filename_component(Boost_INCLUDE_DIR \"${Boost_INCLUDE_DIR}\" REALPATH BASE_DIR \"${CMAKE_BINARY_DIR}\")\n    endif()\n  endif()\n  set(Boost_REALPATH ON)\n  find_package(Boost COMPONENTS program_options regex serialization REQUIRED)\n  message(\"-- Boost dir is \" ${Boost_INCLUDE_DIR})\n  include_directories(${Boost_INCLUDE_DIR})\n  if(MSVC)\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} /LIBPATH:${Boost_LIBRARY_DIRS}\")\n    set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} /LIBPATH:${Boost_LIBRARY_DIRS}\")\n  else()\n    set(LIBS ${LIBS} ${Boost_LIBRARIES})\n  endif()\nendif()\n\nif(BACKEND)\n  message(\"-- BACKEND: ${BACKEND}\")\nelse()\n  message(\"-- BACKEND not specified, defaulting to eigen.\")\n  set(BACKEND \"eigen\")\nendif()\n\nif(BACKEND MATCHES \"^eigen$\")\n  set(WITH_EIGEN_BACKEND 1)\nelseif(BACKEND MATCHES \"^cuda$\")\n  set(WITH_CUDA_BACKEND 1)\nelse()\n  message(SEND_ERROR \"BACKEND must be eigen or cuda\")\nendif()\n\nif (WITH_CUDA_BACKEND)\n  find_package(CUDA REQUIRED)\n  set(CUDA_TOOLKIT_ROOT_DIR ${CUDA_ROOT})\n  include_directories(SYSTEM ${CUDA_INCLUDE_DIRS})\n  #list(APPEND CUDA_LIBRARIES /usr/lib64/libpthread.so)\n  list(APPEND CUDA_LIBRARIES ${CUDA_curand_LIBRARY})\n  MESSAGE(\"CUDA_LIBRARIES: ${CUDA_LIBRARIES}\")\n  list(REMOVE_ITEM CUDA_LIBRARIES -lpthread)\n  set(LIBS ${LIBS} ${CUDA_LIBRARIES})\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DEIGEN_USE_GPU\")\n  find_cudnn()\n  if(CUDNN_FOUND)\n    include_directories(SYSTEM ${CUDNN_INCLUDE_DIRS})\n    list(APPEND CUDA_LIBRARIES ${CUDNN_LIBRARIES})\n    message(\"-- Successfully include CUDNN flags\")\n  else()\n    message(\"-- CUDNN not found, some dependent functionalities will be disabled\")\n  endif()\nendif()\n\n# look for Eigen\nif (DEFINED ENV{EIGEN3_INCLUDE_DIR} AND NOT DEFINED EIGEN3_INCLUDE_DIR) # use env variable if not set\n  set(EIGEN3_INCLUDE_DIR $ENV{EIGEN3_INCLUDE_DIR})\nendif()\nget_filename_component(EIGEN3_INCLUDE_DIR \"${EIGEN3_INCLUDE_DIR}\" REALPATH BASE_DIR \"${CMAKE_BINARY_DIR}\")\nset(EIGEN3_INCLUDE_DIR ${EIGEN3_INCLUDE_DIR} CACHE STRING \"\" FORCE)\nmessage(\"-- Eigen dir is \" ${EIGEN3_INCLUDE_DIR})\nfind_package(Eigen3 REQUIRED)\ninclude_directories(${EIGEN3_INCLUDE_DIR})\n\nFIND_PACKAGE(Threads REQUIRED)\nset(LIBS ${LIBS} ${CMAKE_THREAD_LIBS_INIT})\n\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config.h)\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR})\n\nadd_subdirectory(dynet)\n\nif(ENABLE_CPP_EXAMPLES)\n  add_subdirectory(tutorial)\n  add_subdirectory(examples)\nendif(ENABLE_CPP_EXAMPLES)\n\nif(PYTHON)\n  add_subdirectory(python)\nendif(PYTHON)\n\nif(ENABLE_C)\n  message(\"-- Enabling C\")\n  add_subdirectory(contrib/c)\nendif(ENABLE_C)\n\nif(ENABLE_SWIG)\n  message(\"-- Enabling SWIG\")\n  add_subdirectory(contrib/swig)\nendif(ENABLE_SWIG)\n\nif(ENABLE_BOOST)\n  add_subdirectory(tests)\n  enable_testing()\nendif()\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 11.04296875,
          "content": "Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2015 Chris Dyer\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.10546875,
          "content": "graft python\nglobal-include *.py *.cc *.h *.cu CMakeLists.txt *.cmake\ninclude README.md\ninclude LICENSE.txt\n"
        },
        {
          "name": "MEM.notes",
          "type": "blob",
          "size": 0.4814453125,
          "content": "The code that computes the l2 norm of the gradient is going to need\nscratch space on every device that DYNET is using that has a parameter.\n1) devices should know whether they have parameters/gradients\n\nalignment code is hidden away. it's all hard coded, but it looks like\nIntel at least is getting more foregiving about alingment problems so\nwe might not notice opportunities for speedups if something changes.\nGPU memory is aligned mostly by CUDA\n\nthe MP stuff needs to be tested by Austin.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.3662109375,
          "content": "<div align=\"center\">\n  <img alt=\"DyNet\" src=\"doc/source/images/dynet_logo.png\"><br><br>\n</div>\n\n---\n\n[![Build Status (Travis CI)](https://travis-ci.org/clab/dynet.svg?branch=master)](https://travis-ci.org/clab/dynet)\n[![Build Status (AppVeyor)](https://ci.appveyor.com/api/projects/status/github/clab/dynet?svg=true)](https://ci.appveyor.com/project/danielh/dynet-c3iuq)\n[![Build Status (Docs)](https://readthedocs.org/projects/dynet/badge/?version=latest)](http://dynet.readthedocs.io/en/latest/)\n[![PyPI version](https://badge.fury.io/py/dyNET.svg)](https://badge.fury.io/py/dyNET)\n\nThe Dynamic Neural Network Toolkit\n\n- [General](#general)\n- [Installation](#installation)\n  - [C++](#c-installation)\n  - [Python](#python-installation)\n- [Getting Started](#getting-started)\n- [Citing](#citing)\n- [Releases and Contributing](#releases-and-contributing)\n\n\n## General\n\nDyNet is a neural network library developed by Carnegie Mellon University and many others. It is written in C++ (with bindings in Python) and is designed to be efficient when run on either CPU or GPU, and to work well with networks that have dynamic structures that change for every training instance. For example, these kinds of networks are particularly important in natural language processing tasks, and DyNet has been used to build state-of-the-art systems for [syntactic parsing](https://github.com/clab/lstm-parser), [machine translation](https://github.com/neubig/lamtram), [morphological inflection](https://github.com/mfaruqui/morph-trans), and many other application areas.\n\nRead the [documentation](http://dynet.readthedocs.io/en/latest/) to get started, and feel free to contact the [dynet-users group](https://groups.google.com/forum/#!forum/dynet-users) group with any questions (if you want to receive email make sure to select \"all email\" when you sign up). We greatly appreciate any bug reports and contributions, which can be made by filing an issue or making a pull request through the [github page](http://github.com/clab/dynet).\n\nYou can also read more technical details in our [technical report](https://arxiv.org/abs/1701.03980).\n\n## Getting started\n\nYou can find tutorials about using DyNet [here (C++)](http://dynet.readthedocs.io/en/latest/tutorial.html#c-tutorial) and [here (python)](http://dynet.readthedocs.io/en/latest/tutorial.html#python-tutorial), and [here (EMNLP 2016 tutorial)](https://github.com/clab/dynet_tutorial_examples).\n\nOne aspect that sets DyNet apart from other tookits is the **auto-batching** feature. See the [documentation](http://dynet.readthedocs.io/en/latest/minibatch.html) about batching.\n\nThe `example` folder contains a variety of examples in C++ and python.\n\n\n## Installation\n\nDyNet relies on a number of external programs/libraries including CMake and\nEigen. CMake can be installed from standard repositories.\n\nFor example on **Ubuntu Linux**:\n\n    sudo apt-get install build-essential cmake\n\nOr on **macOS**, first make sure the Apple Command Line Tools are installed, then\nget CMake, and Mercurial with either homebrew or macports:\n\n    xcode-select --install\n    brew install cmake  # Using homebrew.\n    sudo port install cmake # Using macports.\n\nOn **Windows**, see [documentation](http://dynet.readthedocs.io/en/latest/install.html#windows-support).\n\nTo compile DyNet you also need a [specific version of the Eigen\nlibrary](https://github.com/clab/dynet/releases/download/2.1/eigen-b2e267dc99d4.zip). **If you use any of the\nreleased versions, you may get assertion failures or compile errors.**\nYou can get it easily using the following command:\n\n    mkdir eigen\n    cd eigen\n    wget https://github.com/clab/dynet/releases/download/2.1/eigen-b2e267dc99d4.zip\n    unzip eigen-b2e267dc99d4.zip\n\n\n### C++ installation\n\nYou can install dynet for C++ with the following commands\n\n    # Clone the github repository\n    git clone https://github.com/clab/dynet.git\n    cd dynet\n    mkdir build\n    cd build\n    # Run CMake\n    # -DENABLE_BOOST=ON in combination with -DENABLE_CPP_EXAMPLES=ON also\n    # compiles the multiprocessing c++ examples\n    cmake .. -DEIGEN3_INCLUDE_DIR=/path/to/eigen -DENABLE_CPP_EXAMPLES=ON\n    # Compile using 2 processes\n    make -j 2\n    # Test with an example\n    ./examples/xor\n\nFor more details refer to the [documentation](http://dynet.readthedocs.io/en/latest/install.html#building)\n\n### Python installation\n\nYou can install DyNet for python by using the following command\n\n    pip install git+https://github.com/clab/dynet#egg=dynet\n\nFor more details refer to the [documentation](http://dynet.readthedocs.io/en/latest/python.html#installing-dynet-for-python)\n\n## Citing\n\nIf you use DyNet for research, please cite this report as follows:\n\n    @article{dynet,\n      title={DyNet: The Dynamic Neural Network Toolkit},\n      author={Graham Neubig and Chris Dyer and Yoav Goldberg and Austin Matthews and Waleed Ammar and Antonios Anastasopoulos and Miguel Ballesteros and David Chiang and Daniel Clothiaux and Trevor Cohn and Kevin Duh and Manaal Faruqui and Cynthia Gan and Dan Garrette and Yangfeng Ji and Lingpeng Kong and Adhiguna Kuncoro and Gaurav Kumar and Chaitanya Malaviya and Paul Michel and Yusuke Oda and Matthew Richardson and Naomi Saphra and Swabha Swayamdipta and Pengcheng Yin},\n      journal={arXiv preprint arXiv:1701.03980},\n      year={2017}\n    }\n\n\n## Contributing\n\nWe welcome any contribution to DyNet! You can find the contributing guidelines [here](http://dynet.readthedocs.io/en/latest/contributing.html)\n"
        },
        {
          "name": "bench",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "config.h.cmake",
          "type": "blob",
          "size": 0.212890625,
          "content": "#ifndef DYNET_CONFIG_H_\n#define DYNET_CONFIG_H_\n\n#cmakedefine WITH_MINERVA_BACKEND @WITH_MINERVA_BACKEND@\n#cmakedefine WITH_THPP_BACKEND @WITH_THPP_BACKEND@\n#cmakedefine WITH_EIGEN_BACKEND @WITH_EIGEN_BACKEND@\n\n#endif\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "dynet",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.0986328125,
          "content": "[build-system]\nrequires = [\"setuptools\", \"wheel\", \"cython\"]\nbuild-backend = \"setuptools.build_meta\" \n"
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.0390625,
          "content": "[metadata]\ndescription-file = README.md\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 15.8095703125,
          "content": "import distutils.sysconfig\nimport logging as log\nimport platform\nimport zipfile\nimport sys\nfrom distutils.command.build import build as _build\nfrom distutils.command.build_py import build_py as _build_py\nfrom distutils.command.install_data import install_data as _install_data\nfrom distutils.errors import DistutilsSetupError\nfrom distutils.spawn import find_executable\nfrom distutils.sysconfig import get_python_lib\nfrom multiprocessing import cpu_count\nfrom subprocess import Popen\n\nimport os\nimport re\nfrom Cython.Distutils import build_ext as _build_ext\nfrom setuptools import setup\nfrom setuptools.extension import Extension\nfrom shutil import rmtree, copytree, copy\n\n# urlretrieve has a different location in Python 2 and Python 3\nimport urllib\nif hasattr(urllib, \"urlretrieve\"):\n    urlretrieve = urllib.urlretrieve\nelse:\n    import urllib.request\n    urlretrieve = urllib.request.urlretrieve\n\n\ndef run_process(cmds):\n    p = Popen(cmds)\n    p.wait()\n    return p.returncode\n\n\ndef append_cmake_list(l, var):\n    if var:\n        l.extend(var.split(\";\"))\n\n\ndef append_cmake_lib_list(l, var):\n    if var:\n        l.extend(map(strip_lib, var.split(\";\")))\n\n\n# Strip library prefixes and suffixes to prevent linker confusion\ndef strip_lib(filename):\n    filename = re.sub(r\"^(?:lib)?(.*)\\.(?:so|a|dylib)$\", r\"\\1\", filename)\n    filename = re.sub(r\"^(.*)\\.lib$\", r\"\\1\", filename)\n    return filename\n\ndef get_env(build_dir):\n\n  # Get environmental variables first\n  ENV = dict(os.environ)\n\n  # Get values listed in the CMakeCache.txt file (if existant)\n  try:\n      var_regex = r\"^([^:]+):([^=]+)=(.*)$\"\n      cache_path = os.path.join(build_dir, \"CMakeCache.txt\")\n      with open(cache_path, \"r\") as cache_file:\n          for line in cache_file:\n              line = line.strip()\n              m = re.match(var_regex, line)\n              if m:\n                  ENV[m.group(1)] = m.group(3)\n  except:\n      pass\n\n  # Get values passed on the command line\n  i = 0\n  for i, arg in enumerate(sys.argv[1:]):\n      try:\n          key, value = arg.split(\"=\", 1)\n      except ValueError:\n          break\n      ENV[key] = value \n  del sys.argv[1:i+1]\n\n  return ENV\n\nlog.basicConfig(stream=sys.stdout, level=log.INFO)\n\n# Find the current directory\ntry:\n    this_file = __file__\nexcept NameError:\n    this_file = sys.argv[0]\nORIG_DIR = os.getcwd()\nSCRIPT_DIR = os.path.dirname(os.path.abspath(this_file))\nif ORIG_DIR.rstrip('/').endswith('python'):\n    BUILD_DIR = ORIG_DIR.rstrip('/').rstrip('python')\n    PYTHON_DIR = ORIG_DIR\nelse:\n    BUILD_DIR = ORIG_DIR\n    PYTHON_DIR = ORIG_DIR + '/python'\nENV = get_env(BUILD_DIR)\n\n# Find the paths\nBUILT_EXTENSIONS = False\nCMAKE_PATH = ENV.get(\"CMAKE\", find_executable(\"cmake\"))\nMAKE_PATH = ENV.get(\"MAKE\", find_executable(\"make\"))\nMAKE_FLAGS = ENV.get(\"MAKE_FLAGS\", \"-j %d\" % cpu_count()).split()\nCC_PATH = ENV.get(\"CC\", find_executable(\"gcc\"))\nCXX_PATH = ENV.get(\"CXX\", find_executable(\"g++\"))\nINSTALL_PREFIX = os.path.join(get_python_lib(), os.pardir, os.pardir, os.pardir)\nPYTHON = sys.executable\n\n# Try to find Eigen\nEIGEN3_INCLUDE_DIR = ENV.get(\"EIGEN3_INCLUDE_DIR\")  # directory where eigen is saved\n# The cmake directory and Python directory are different in manual install, so\n# will break if relative path is specified. Try moving up if path is specified\n# but not found\nif (EIGEN3_INCLUDE_DIR is not None and\n    not os.path.isdir(EIGEN3_INCLUDE_DIR) and\n    os.path.isdir(os.path.join(os.pardir, EIGEN3_INCLUDE_DIR))):\n    EIGEN3_INCLUDE_DIR = os.path.join(os.pardir, EIGEN3_INCLUDE_DIR)\n\nEIGEN3_DOWNLOAD_URL = ENV.get(\"EIGEN3_DOWNLOAD_URL\", \"https://github.com/clab/dynet/releases/download/2.1/eigen-b2e267dc99d4.zip\") \n    \n# Remove the \"-Wstrict-prototypes\" compiler option, which isn't valid for C++.\ncfg_vars = distutils.sysconfig.get_config_vars()\nCFLAGS = cfg_vars.get(\"CFLAGS\")\nif CFLAGS is not None:\n    cfg_vars[\"CFLAGS\"] = CFLAGS.replace(\"-Wstrict-prototypes\", \"\")\n\n# For Cython extensions\nLIBRARIES = [\"dynet\"]\nLIBRARY_DIRS = [\".\"]\nCOMPILER_ARGS = []\nEXTRA_LINK_ARGS = []\nRUNTIME_LIB_DIRS = []\nINCLUDE_DIRS = []\nDATA_FILES=[]\n\n# Add all environment variables from CMake for Cython extensions\nappend_cmake_lib_list(LIBRARIES, ENV.get(\"CUDA_CUBLAS_FILES\"))\nappend_cmake_list(LIBRARY_DIRS, ENV.get(\"CUDA_CUBLAS_DIRS\"))\nCMAKE_INSTALL_PREFIX = ENV.get(\"CMAKE_INSTALL_PREFIX\", INSTALL_PREFIX)\nLIBS_INSTALL_DIR = CMAKE_INSTALL_PREFIX + \"/lib/\"\nPROJECT_SOURCE_DIR = ENV.get(\"PROJECT_SOURCE_DIR\", SCRIPT_DIR)  # location of the main dynet directory\nPROJECT_BINARY_DIR = ENV.get(\"PROJECT_BINARY_DIR\", BUILD_DIR)  # path where dynet is built\nDYNET_LIB_DIR = PROJECT_BINARY_DIR + \"/dynet/\"\n\nif ENV.get(\"MSVC\") == \"1\":\n    COMPILER_ARGS[:] = [\"-DNOMINMAX\", \"/EHsc\"]\n    DYNET_LIB_DIR += \"/Release/\"\n    # For MSVC, we compile dynet as a static lib, so we need to also link in the\n    # other libraries it depends on:\n    append_cmake_lib_list(LIBRARIES, ENV.get(\"LIBS\"))\n    append_cmake_list(LIBRARY_DIRS, ENV.get(\"MKL_LINK_DIRS\"))  # Add the MKL dirs, if MKL is being used\n    append_cmake_lib_list(LIBRARIES, ENV.get(\"CUDA_RT_FILES\"))\n    append_cmake_list(LIBRARY_DIRS, ENV.get(\"CUDA_RT_DIRS\"))\n    DATA_FILES += [DYNET_LIB_DIR + lib + \".lib\" for lib in LIBRARIES]\nelse:\n    COMPILER_ARGS[:] = [\"-std=c++11\", \"-Wno-unused-function\"]\n    RUNTIME_LIB_DIRS.extend([DYNET_LIB_DIR, LIBS_INSTALL_DIR])\n    # in some OSX systems, the following extra flags are needed:\n    if platform.system() == \"Darwin\":\n        COMPILER_ARGS.extend([\"-stdlib=libc++\", \"-mmacosx-version-min=10.7\"])\n        EXTRA_LINK_ARGS.append(\"-Wl,-rpath,\" + LIBS_INSTALL_DIR)\n        if \"--skip-build\" not in sys.argv:  # Include libdynet.dylib unless doing manual install\n            DATA_FILES += [os.path.join(LIBS_INSTALL_DIR, \"lib%s.dylib\" % lib) for lib in LIBRARIES]\n    else:\n        EXTRA_LINK_ARGS.append(\"-Wl,-rpath=%r\" % LIBS_INSTALL_DIR + \",--no-as-needed\")\n\nLIBRARY_DIRS.insert(0, DYNET_LIB_DIR)\n\nINCLUDE_DIRS[:] = filter(None, [PROJECT_SOURCE_DIR, EIGEN3_INCLUDE_DIR])\n\nTARGET = [Extension(\n    \"_dynet\",  # name of extension\n    [PYTHON_DIR + \"/_dynet.pyx\"],  # filename of our Pyrex/Cython source\n    language=\"c++\",  # this causes Pyrex/Cython to create C++ source\n    include_dirs=INCLUDE_DIRS,\n    libraries=LIBRARIES,\n    library_dirs=LIBRARY_DIRS,\n    extra_link_args=EXTRA_LINK_ARGS,\n    extra_compile_args=COMPILER_ARGS,\n    runtime_library_dirs=RUNTIME_LIB_DIRS,\n)]\n\nclass build(_build):\n    user_options = [\n        (\"build-dir=\", None, \"New or existing DyNet build directory.\"),\n        (\"skip-build\", None, \"Assume DyNet C++ library is already built.\"),\n    ]\n        \n    def __init__(self, *args, **kwargs):\n        self.build_dir = None\n        self.skip_build = False\n        _build.__init__(self, *args, **kwargs)\n\n    def initialize_options(self):\n        py_version = \"%s.%s\" % (sys.version_info[0], sys.version_info[1])\n        unicode_suffix = \"u\" if sys.version_info[0] == 2 and sys.maxunicode > 65536 else \"\"\n        build_name = \"py%s%s-%s\" % (py_version, unicode_suffix, platform.architecture()[0])\n        self.build_dir = os.path.join(SCRIPT_DIR, \"build\", build_name)\n        _build.initialize_options(self)\n\n    def run(self):\n        global BUILD_DIR, BUILT_EXTENSIONS, EIGEN3_INCLUDE_DIR\n        BUILD_DIR = os.path.abspath(self.build_dir)\n        if EIGEN3_INCLUDE_DIR is None:\n            EIGEN3_INCLUDE_DIR = os.path.join(BUILD_DIR, \"eigen\")\n        EIGEN3_INCLUDE_DIR = os.path.abspath(EIGEN3_INCLUDE_DIR)    \n        log.info(\"CMAKE_PATH=%r\" % CMAKE_PATH)\n        log.info(\"MAKE_PATH=%r\" % MAKE_PATH)\n        log.info(\"MAKE_FLAGS=%r\" % \" \".join(MAKE_FLAGS))\n        log.info(\"EIGEN3_INCLUDE_DIR=%r\" % EIGEN3_INCLUDE_DIR)\n        log.info(\"EIGEN3_DOWNLOAD_URL=%r\" % EIGEN3_DOWNLOAD_URL)\n        log.info(\"CC_PATH=%r\" % CC_PATH)\n        log.info(\"CXX_PATH=%r\" % CXX_PATH)\n        log.info(\"SCRIPT_DIR=%r\" % SCRIPT_DIR)\n        log.info(\"BUILD_DIR=%r\" % BUILD_DIR)\n        log.info(\"INSTALL_PREFIX=%r\" % INSTALL_PREFIX)\n        log.info(\"PYTHON=%r\" % PYTHON)\n        if CMAKE_PATH is not None:\n            run_process([CMAKE_PATH, \"--version\"])\n        if CXX_PATH is not None:\n            run_process([CXX_PATH, \"--version\"])\n\n        # This will generally be called by the pip install\n        if not self.skip_build:\n            if CMAKE_PATH is None:\n                raise DistutilsSetupError(\"`cmake` not found, and `CMAKE` is not set.\")\n            if MAKE_PATH is None:\n                raise DistutilsSetupError(\"`make` not found, and `MAKE` is not set.\")\n            if CC_PATH is None:\n                raise DistutilsSetupError(\"`gcc` not found, and `CC` is not set.\")\n            if CXX_PATH is None:\n                raise DistutilsSetupError(\"`g++` not found, and `CXX` is not set.\")\n\n            # Prepare folders\n            if not os.path.isdir(BUILD_DIR):\n                log.info(\"Creating build directory \" + BUILD_DIR)\n                os.makedirs(BUILD_DIR)\n\n            os.chdir(BUILD_DIR)\n            if os.path.isdir(EIGEN3_INCLUDE_DIR):\n                log.info(\"Found eigen in \" + EIGEN3_INCLUDE_DIR)\n            else:\n                try:\n                    # Can use BZ2 or zip, right now using zip\n                    # log.info(\"Fetching Eigen...\")\n                    # urlretrieve(EIGEN3_DOWNLOAD_URL, \"eigen.tar.bz2\")\n                    # log.info(\"Unpacking Eigen...\")\n                    # tfile = tarfile.open(\"eigen.tar.bz2\", 'r')\n                    # tfile.extractall('eigen')\n                    log.info(\"Fetching Eigen...\")\n                    urlretrieve(EIGEN3_DOWNLOAD_URL, \"eigen.zip\")\n                except Exception as e:\n                    raise DistutilsSetupError(\"Could not download Eigen from %r: %s\" % (EIGEN3_DOWNLOAD_URL, e))\n                try:\n                    log.info(\"Unpacking Eigen...\")\n                    os.mkdir(EIGEN3_INCLUDE_DIR)\n                    with zipfile.ZipFile(\"eigen.zip\") as zfile:\n                        zfile.extractall(EIGEN3_INCLUDE_DIR)\n                except Exception as e:\n                    raise DistutilsSetupError(\"Could not extract Eigen to %r: %s\" % (EIGEN3_INCLUDE_DIR, e))\n\n            os.environ[\"CXX\"] = CXX_PATH\n            os.environ[\"CC\"] = CC_PATH\n\n            # Build module\n            cmake_cmd = [\n                CMAKE_PATH,\n                SCRIPT_DIR,\n                \"-DCMAKE_INSTALL_PREFIX=%r\" % INSTALL_PREFIX,\n                \"-DEIGEN3_INCLUDE_DIR=%r\" % EIGEN3_INCLUDE_DIR,\n                \"-DPYTHON=%r\" % PYTHON,\n            ]\n            for env_var in (\"BACKEND\", \"CUDNN_ROOT\", \"CUDA_TOOLKIT_ROOT_DIR\"):\n                value = ENV.get(env_var)\n                if value is not None:\n                    cmake_cmd.append(\"-D\" + env_var + \"=%r\" % value)\n            log.info(\"Configuring...\")\n            if run_process(cmake_cmd) != 0:\n                raise DistutilsSetupError(\" \".join(cmake_cmd))\n\n            make_cmd = [MAKE_PATH] + MAKE_FLAGS\n            log.info(\"Compiling...\")\n            if run_process(make_cmd) != 0:\n                raise DistutilsSetupError(\" \".join(make_cmd))\n\n            make_cmd = [MAKE_PATH, \"install\"]\n            log.info(\"Installing...\")\n            if run_process(make_cmd) != 0:\n                raise DistutilsSetupError(\" \".join(make_cmd))\n\n            if platform.system() == \"Darwin\":  # macOS\n                for filename in DATA_FILES:\n                    new_install_name = \"@loader_path/\" + os.path.basename(filename)\n                    install_name_tool_cmd = [\"install_name_tool\", \"-id\", new_install_name, filename]\n                    log.info(\"fixing install_name for %s to %r\" % (filename, new_install_name))\n                    if run_process(install_name_tool_cmd) != 0:\n                        raise DistutilsSetupError(\" \".join(install_name_tool_cmd))\n\n        # This will generally be called by the manual install\n        elif not os.path.isdir(EIGEN3_INCLUDE_DIR):\n            raise RuntimeError(\"Could not find Eigen in EIGEN3_INCLUDE_DIR={}. If doing manual install, please set the EIGEN3_INCLUDE_DIR variable with the absolute path to Eigen manually. If doing install via pip, please file an issue on github.com/clab/dynet\".format(EIGEN3_INCLUDE_DIR))\n\n        BUILT_EXTENSIONS = True  # because make calls build_ext\n        _build.run(self)\n\n\nclass build_py(_build_py):\n    def run(self):\n        os.chdir(os.path.join(BUILD_DIR, \"python\"))\n        log.info(\"Building Python files...\")\n        _build_py.run(self)\n\n\nclass install_data(_install_data):\n    def run(self):\n        self.data_files = [(p, f) if self.is_wheel(p) else\n                           (get_python_lib(), f) if platform.system() == \"Darwin\" else\n                           (p, []) for p, f in self.data_files]\n        _install_data.run(self)\n\n    def is_wheel(self, path):\n        return os.path.basename(os.path.abspath(os.path.join(self.install_dir, path))) == \"wheel\"\n\n\nclass build_ext(_build_ext):\n    def run(self):\n        if BUILT_EXTENSIONS:\n            INCLUDE_DIRS.append(EIGEN3_INCLUDE_DIR)\n            LIBRARY_DIRS.append(BUILD_DIR + \"/dynet/\")\n        log.info(\"Building Cython extensions...\")\n        log.info(\"INCLUDE_DIRS=%r\" % \" \".join(INCLUDE_DIRS))\n        log.info(\"LIBRARIES=%r\" % \" \".join(LIBRARIES))\n        log.info(\"LIBRARY_DIRS=%r\" % \" \".join(LIBRARY_DIRS))\n        log.info(\"COMPILER_ARGS=%r\" % \" \".join(COMPILER_ARGS))\n        log.info(\"EXTRA_LINK_ARGS=%r\" % \" \".join(EXTRA_LINK_ARGS))\n        log.info(\"RUNTIME_LIB_DIRS=%r\" % \" \".join(RUNTIME_LIB_DIRS))\n        _build_ext.run(self)\n        if os.path.abspath(\".\") != SCRIPT_DIR:\n            log.info(\"Copying built extensions...\")\n            for d in os.listdir(\"build\"):\n                target_dir = os.path.join(SCRIPT_DIR, \"build\", d)\n                rmtree(target_dir, ignore_errors=True)\n                try:\n                    copytree(os.path.join(\"build\", d), target_dir)\n                except OSError as e:\n                    log.info(\"Cannot copy %s %s\" % (os.path.join(\"build\",d), e))\n\n\ntry:\n    with open(os.path.join(SCRIPT_DIR, 'README.md'), encoding='utf-8') as f:\n        long_description = f.read()\nexcept:\n    long_description = \"\"\n\nsetup(\n    name=\"dyNET\",\n    # version=\"0.0.0\",\n    install_requires=[\"cython\", \"numpy\"],\n    description=\"The Dynamic Neural Network Toolkit\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Environment :: Console\",\n        \"Environment :: MacOS X\",\n        \"Environment :: Win32 (MS Windows)\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Science/Research\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: POSIX\",\n        \"Operating System :: POSIX :: Linux\",\n        \"Operating System :: Microsoft\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Programming Language :: C++\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2\",\n        \"Programming Language :: Python :: 2.6\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.2\",\n        \"Programming Language :: Python :: 3.3\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n    ],\n    author=\"Graham Neubig\",\n    author_email=\"dynet-users@googlegroups.com\",\n    url=\"https://github.com/clab/dynet\",\n    download_url=\"https://github.com/clab/dynet/releases\",\n    license=\"Apache 2.0\",\n    cmdclass={\"build\": build, \"build_py\": build_py, \"install_data\": install_data, \"build_ext\": build_ext},\n    ext_modules=TARGET,\n    py_modules=[\"dynet\", \"dynet_viz\", \"dynet_config\"],\n    data_files=[(os.path.join(\"..\", \"..\"), DATA_FILES)],\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "tutorial",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}