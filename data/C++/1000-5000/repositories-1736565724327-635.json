{
  "metadata": {
    "timestamp": 1736565724327,
    "page": 635,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "stevenlovegrove/Pangolin",
      "stars": 2415,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.0390625,
          "content": "DisableFormat: true\nSortIncludes: false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0576171875,
          "content": ".DS_Store\nCMakeLists.txt.user\nbuild*\n_builds\n_logs\n.vscode\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.224609375,
          "content": "[submodule \"scripts/vcpkg\"]\n\tpath = scripts/vcpkg\n\turl = https://github.com/microsoft/vcpkg.git\n[submodule \"components/pango_python/pybind11\"]\n\tpath = components/pango_python/pybind11\n\turl = https://github.com/pybind/pybind11.git\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 5.87890625,
          "content": "cmake_minimum_required(VERSION 3.16)\n\nproject(\"Pangolin\")\nset(PANGOLIN_VERSION_MAJOR 0)\nset(PANGOLIN_VERSION_MINOR 9)\nset(PANGOLIN_VERSION_PATCH 2)\nset(PANGOLIN_VERSION ${PANGOLIN_VERSION_MAJOR}.${PANGOLIN_VERSION_MINOR}.${PANGOLIN_VERSION_PATCH})\n\nif(NOT CMAKE_CXX_STANDARD)\n    set(CMAKE_CXX_STANDARD 17)\n    set(CMAKE_CXX_STANDARD_REQUIRED ON)\nendif()\n\n# Prevent in source builds\nif(EXISTS \"${PROJECT_BINARY_DIR}/CMakeLists.txt\")\n    message(FATAL_ERROR \"Source build detected: please use a subdir. You may remove 'CMakeCache.txt' and 'CMakeFiles'.\")\nendif()\n\n# Make our own cmake imports accessible\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR}/cmake\")\n\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\nSET(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)\n\ninclude(SetPlatformVars)\ninclude(PangolinFactory)\n\noption( BUILD_TOOLS \"Build Tools\" ON )\noption( BUILD_EXAMPLES \"Build Examples\" ON )\noption( BUILD_ASAN \"Enable AddressSanitizer for Debug builds\" OFF )\n\n# Default build type (Override with cmake .. -DCMAKE_BUILD_TYPE=...)\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Release\" CACHE STRING \"Choose the type of build.\" FORCE)\n  message(STATUS \"Setting build type to '${CMAKE_BUILD_TYPE}' as none was specified.\")\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS \"Debug\" \"Release\" \"MinSizeRel\" \"RelWithDebInfo\")\nendif()\n\noption( BUILD_SHARED_LIBS \"Build Shared Library\" ON)\n\nif(_WIN_)\n    option( MSVC_USE_STATIC_CRT  \"Use static C Runtime with MSVC, /MT instead of /MD\" ON)\n\n    # Make sure there are no erroneous C Runtime flags\n    list(APPEND FLAG_VARS\n        CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO\n        CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO\n    )\n    if(MSVC_USE_STATIC_CRT)\n        foreach(FLAG_VAR ${FLAG_VARS})\n            string(REGEX REPLACE \"/MD\" \"/MT\" NEW_FLAGS \"${${FLAG_VAR}}\")\n            set(${FLAG_VAR} \"${NEW_FLAGS}\" CACHE STRING \"\" FORCE)\n        endforeach()\n    else()\n        foreach(FLAG_VAR ${FLAG_VARS})\n            string(REGEX REPLACE \"/MT\" \"/MD\" NEW_FLAGS \"${${FLAG_VAR}}\")\n            set(${FLAG_VAR} \"${NEW_FLAGS}\" CACHE STRING \"\" FORCE)\n        endforeach()\n    endif()\nelseif(_OSX_)\n    set(CMAKE_MACOSX_RPATH ON)\nelseif(EMSCRIPTEN)\n    set(BUILD_SHARED_LIBS OFF)\n    include(EmscriptenUtils)\n    set(CMAKE_EXE_LINKER_FLAGS \"-sASYNCIFY=1 -sDISABLE_EXCEPTION_CATCHING=0 -sGL_ASSERTIONS=1 -sFULL_ES3=1 --bind\")\nendif()\n\n# run with \"ASAN_OPTIONS=fast_unwind_on_malloc=0\" to print stack with more details\nif(BUILD_ASAN)\n    set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} \\\n        -fsanitize=address \\\n        -fsanitize=bool \\\n        -fsanitize=bounds \\\n        -fsanitize=enum \\\n        -fsanitize=float-cast-overflow \\\n        -fsanitize=float-divide-by-zero \\\n        -fsanitize=nonnull-attribute \\\n        -fsanitize=returns-nonnull-attribute \\\n        -fsanitize=signed-integer-overflow \\\n        -fsanitize=undefined \\\n        -fsanitize=vla-bound \\\n        -fno-sanitize=alignment \\\n        -fsanitize=leak \\\n        -fsanitize=object-size \\\n    \")\nendif()\n\n#######################################################\n## Testing setup\n\noption(BUILD_TESTS \"Build Tests\" OFF)\nif(BUILD_TESTS)\n    find_package(Catch2 REQUIRED)\n    include(CTest)\n    include(Catch)\nendif()\n\n#######################################################\n## Add all pangolin components\n\nfile(GLOB components_cmake \"${CMAKE_CURRENT_LIST_DIR}/components/*/CMakeLists.txt\")\nset(component_list \"\")\nforeach(component_cmake ${components_cmake})\n    get_filename_component(component_dir ${component_cmake} DIRECTORY)\n    get_filename_component(component_name ${component_dir} NAME)\n    add_library(${component_name} \"\")\n    list(APPEND component_list ${component_name})\nendforeach()\n\nforeach(component_cmake ${components_cmake})\n    include(${component_cmake})\nendforeach()\n\n#######################################################\n## Build Tree Export\n\n# Export Targets\nexport(TARGETS ${component_list} FILE PangolinTargets.cmake)\nexport(PACKAGE Pangolin)\n\n# Version information\nconfigure_file( ${CMAKE_CURRENT_SOURCE_DIR}/cmake/${PROJECT_NAME}ConfigVersion.cmake.in\n\"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\" @ONLY)\n\n# Build tree config\nconfigure_file( ${CMAKE_CURRENT_SOURCE_DIR}/cmake/${PROJECT_NAME}Config.cmake.in\n${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake @ONLY IMMEDIATE )\n\n\n#######################################################\n## Install headers / targets\n\ninclude(GNUInstallDirs)\n# This relative path allows installed files to be relocatable.\nset( CMAKECONFIG_INSTALL_DIR ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME} )\nfile( RELATIVE_PATH REL_INCLUDE_DIR\n    \"${CMAKE_INSTALL_PREFIX}/${CMAKECONFIG_INSTALL_DIR}\"\n    \"${CMAKE_INSTALL_PREFIX}/include\"\n)\n\ninstall(\n    TARGETS ${component_list}\n    EXPORT ${PROJECT_NAME}Targets\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n)\n\ninstall(\n    FILES \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake\"\n          \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\"\n    DESTINATION ${CMAKECONFIG_INSTALL_DIR}\n)\ninstall(\n    EXPORT ${PROJECT_NAME}Targets DESTINATION ${CMAKECONFIG_INSTALL_DIR}\n)\n\n# uninstall target\nif(NOT TARGET uninstall)\n  configure_file(\n    \"${CMAKE_CURRENT_LIST_DIR}/cmake/cmake_uninstall.cmake.in\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake\"\n    IMMEDIATE @ONLY)\n\n  add_custom_target(uninstall\n    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)\nendif()\n\n\n#######################################################\n## Tools / Examples\n\nset(Pangolin_DIR ${CMAKE_CURRENT_BINARY_DIR})\n\nif(BUILD_EXAMPLES)\n    add_subdirectory(examples)\nendif()\n\nif(BUILD_TOOLS)\n    add_subdirectory(tools)\nendif()\n"
        },
        {
          "name": "LICENCE",
          "type": "blob",
          "size": 1.0771484375,
          "content": "Copyright (c) 2011 Steven Lovegrove and Richard Newcombe\r\n\r\nPermission is hereby granted, free of charge, to any person\r\nobtaining a copy of this software and associated documentation\r\nfiles (the \"Software\"), to deal in the Software without\r\nrestriction, including without limitation the rights to use,\r\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the\r\nSoftware is furnished to do so, subject to the following\r\nconditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\r\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\nOTHER DEALINGS IN THE SOFTWARE.\r\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.5537109375,
          "content": "What is Pangolin\n====================================\n\nPangolin is a set of lightweight and portable utility libraries for prototyping 3D, numeric or video based programs and algorithms. It is used quite widely in the field of Computer Vision as a means to remove platform-specific boilerplate and make it easy to visualize data.\n\nThe general ethos of Pangolin is to minimize boilerplate and maximize portability and flexibility through simple interfaces and factories over things like windowing and video. It also offers a suite of utilities for interactive debugging, such as 3D manipulation, plotters, tweak variables, and a drop-down Quake-like console for python scripting and live tweaking.\n\n\n\n## Main features\n\n* Cross Platform Windowing\n  * Build for **Windows**, **Linux**, **OSX** and the **Web** (with [Emscripten](https://emscripten.org/))\n  * Support different windowing implementations including off-screen buffers\n* Viewport Management and Interaction\n  * Simple and performant viewport management\n  * Intuitive 3D navigation and handlers\n  * Utilities to work with Computer Vision & Robotics camera and coordinate conventions\n* Video Input and Output\n  * Extensive video input/output wrappers for ordinary and machine-vision cameras and media formats\n  * Flexible filter interface for easily post-processing video channels and formats, etc.\n* Tweak Variables\n  * There are 101 widgeting libraries and several 'tweak' var libraries - Pangolin offers another implementation with a few pros and cons\n  * One-line definitions and extensible types\n* Drop-down Console\n  * Extensible for different shells, but currently supports Python live console\n  * Easy access to introspect tweak variables\n\n\n\n## Code ##\n\nFind the latest version on [Github](http://github.com/stevenlovegrove/Pangolin):\n\n```bash\n# Clone Pangolin along with it's submodules\ngit clone --recursive https://github.com/stevenlovegrove/Pangolin.git\n```\n\n\n\n## Dependencies ##\n\n*Pangolin* is split into a few *components* so you can include just what you need. Most dependencies are *optional* so you can pick and mix for your needs. Rather than enforcing a particular package manager, you can use a simple [script](https://github.com/stevenlovegrove/Pangolin/blob/master/scripts/install_prerequisites.sh) to generate a list of (**required**, **recommended** or **all**) packages for installation for that manager (e.g. apt, port, brew, dnf, pacman, vcpkg):\n\n```bash\n# See what package manager and packages are recommended\n./scripts/install_prerequisites.sh --dry-run recommended\n\n# Override the package manager choice and install all packages\n./scripts/install_prerequisites.sh -m brew all\n```\n\nYou'll see the dependencies are generally\n\n* Build system (cmake, **required**)\n* Windowing system (X11, Cocoa, Win, Web, ...)\n* Rendering (OpenGL, GLES)\n* Video and Image loading (DC1394, ffmpeg, jpeg, png, ...)\n* Wrappers / Cross Compilers (Python3, pybind, Emscripten, ...)\n\nPangolin does it's best to build something with what it gets, so dependencies which are not found will be silently ignored. If you need a particular feature, check the output of the `cmake ..` stage and look for the *Found and Enabled* lines.\n\n\n\n## Building ##\n\nPangolin uses the CMake portable pre-build tool. To checkout and build pangolin in the\ndirectory 'build', execute the following at a shell (or the equivalent using a GUI):\n\n```bash\n# Get Pangolin\ncd ~/your_fav_code_directory\ngit clone --recursive https://github.com/stevenlovegrove/Pangolin.git\ncd Pangolin\n\n# Install dependencies (as described above, or your preferred method)\n./scripts/install_prerequisites.sh recommended\n\n# Configure and build\ncmake -B build\ncmake --build build\n\n# with Ninja for faster builds (sudo apt install ninja-build)\ncmake -B build -GNinja\ncmake --build build\n\n# GIVEME THE PYTHON STUFF!!!! (Check the output to verify selected python version)\ncmake --build build -t pypangolin_pip_install\n\n# Run me some tests! (Requires Catch2 which must be manually installed on Ubuntu.)\ncmake -B build -G Ninja -D BUILD_TESTS=ON\ncmake --build build\ncd build\nctest\n```\n\n![Master Build](https://github.com/stevenlovegrove/pangolin/actions/workflows/build.yml/badge.svg?branch=master) p.s. The *master* branch is a development branch. Choose a [stable tag](https://github.com/stevenlovegrove/Pangolin/tags) if you prefer.\n\n\n\n#### On Windows\n\n I'd recommend building natively with the [Build Tools for Visual Studio 2019](https://visualstudio.microsoft.com/downloads/) toolchain (and not mingw or WSL etc which is unsupported). I recommend [gitbash](https://git-scm.com/downloads) for executing the bash snippets on this page and cloning Pangolin. You can work from within their provided console or the fancy new [Windows Terminal](https://devblogs.microsoft.com/commandline/introducing-windows-terminal/) which is a huge improvement to the developer experience on Windows.\n\n#### With Python\n\nYou have to be careful about what python version Pangolin has found and is attempting to link against. It will tell you during the `cmake ..` step and you can change it by explicitly telling it the python executable with `cmake -DPython3_EXECUTABLE=/path/to/python ..`or ``cmake -DPython3_EXECUTABLE=`which python3` `` to use the python accessed through the `python3` alias.\n\nIf python is found, the pypangolin module will be built with the default `all` target. A Python wheel can be built manually using the `pypangolin_wheel` target, and the wheel can be installed / uninstalled with `pypangolin_pip_install` and `pypangolin_pip_uninstall` targets.\n\n**NOTE** The python wheel and install targets are only currently working on MacOS and Linux. On Windows, you're out of luck right now. Help appreciated!\n\n#### On the Web\n\nSee [**Emscripten (Compile for web)**](#emscripten-compile-for-web) below.\n\n\n## Examples\n\nPangolin is mostly documented through it's simple examples which you can find in the [*examples*](https://github.com/stevenlovegrove/Pangolin/tree/master/examples) folder and [*examples/PythonExamples*](https://github.com/stevenlovegrove/Pangolin/tree/master/examples/PythonExamples) for python versions.\n\nBrowse some [**online**](https://stevenlovegrove.github.io/Pangolin/examples) and even run them in your browser, such as [**SimplePlot**](https://stevenlovegrove.github.io/Pangolin/emscripten/examples/SimplePlot), [**SimpleDisplay**](https://stevenlovegrove.github.io/Pangolin/emscripten/examples/SimpleDisplay/) and [**SimpleMultiDisplay**](https://stevenlovegrove.github.io/Pangolin/emscripten/examples/SimpleMultiDisplay/).\n\n## Issues ##\n\nPlease visit [Github Issues](https://github.com/stevenlovegrove/Pangolin/issues) to view and report problems with Pangolin. Issues and pull requests should be raised against the master branch which contains the current development version.\n\nPlease note; most Pangolin dependencies are optional - to disable a dependency which may be causing trouble on your machine, set the BUILD_PANGOLIN_(option) variable to false with a cmake configuration tool (e.g. ccmake or cmake-gui).\n\n#### Common Runtime Problems\n\n<u>Framebuffer with requested attributes not available</u>: You're building against an old or unaccelerated OpenGL version. Either your graphics drivers are not correctly installed or you are on an unusual platform (such as within Docker, in a VM, working over an X forwarding SSH session) which has limited graphics acceleration. For the former case, you need to make sure your system is using appropriate drivers (you can test glxgears / glxinfo on linux for instance). There isn't much you can do about the latter except changing your setup (e.g. finding a VM which can better accelerate your graphics, or perhaps using the [nvidia-docker](https://github.com/NVIDIA/nvidia-docker) wrapper around docker to correctly pass through the graphics driver)\n\n#### Common Python Problems\n\n<u>error: unknown target 'pypangolin_wheels'</u> : cmake didn't find your python. Go back and adjust your cmake variables (such as the tip above) until you see something like \"Selected Python: '/opt/local/bin/python3.9'\" in the output.\n\n<u>ModuleNotFoundError: No module named 'pypangolin'</u>: Did you install the wheel (see the bash comment under build)? Are you running using the same Python as Pangolin found during the `cmake ..` step?\n\n\n\n## Contributions and Continuous Integration ##\n\nFor CI, Pangolin uses [Github Actions](https://github.com/stevenlovegrove/Pangolin/actions) for Windows, MacOS, Linux and Emscripten (Web).\n\nTo contribute to Pangolin, I would appreciate pull requests against the master branch. If you raise an issue, please include your environment (compiler, operating system, etc).\n\n\n\n## Installing Pangolin(vcpkg) ##\n\nYou can download and install pangolin using the [vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\n\n    git clone https://github.com/Microsoft/vcpkg.git\n    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n    ./vcpkg install pangolin\n\nThe pangolin port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\n## Extensibility & Factories\n\nPangolin uses an extensible factory mechanism for modularising video drivers, windowing backends and console interpreters. Concrete instances are instantiated from a particular factory using a URI string which identifies which factory to use and what parameters it should use. As strings, URI's are a useful mechanism for providing and validating configuration from an end user. The URI form is:\n`module_name:[option1=value1,option2=value2,...]//module_resource_to_open`.\n\n#### Video URI's\n\nThe *VideoViewer* tool takes these URI's directly in order to specify what images or video to load and show:\n\n```bash\nVideoViewer test://\nVideoViewer uvc:[size=640x480]///dev/video0\nVideoViewer flip://debayer:[tile=rggb,method=downsample]//file://~/somefile.pango\n```\n\nNotice that for video, some modules support chaining to construct a simple filter graph.\n\n#### Window URI's\n\nWindowing in Pangolin is also backed by a factory. When an application calls CreateWindowAndBind() or similar, the default:// URI is specified. This can be overriden to use different windowing options by setting the`PANGOLIN_WINDOW_URI` environment variable. e.g.\n\n\n```bash\n# Use the X11 Window Driver and override the default double buffered option\nPANGOLIN_WINDOW_URI=\"x11:[double_buffered=false]//\" ./some_pangolin_app\n\n# Create a 'virtual' window using a framebuffer\nPANGOLIN_WINDOW_URI=\"headless://\" ./another_pangolin_app\n```\n\nSome window parameters that may be interesting to override are `DISPLAYNAME`, `DOUBLEBUFFER`, `SAMPLE_BUFFERS`, `SAMPLES`, `HIGHRES`. Window modules currently include `x11`, `winapi`, `cocoa`.\n\n#### Fonts\n\nAdditionally, there are a couple of special parameters that can be passed through the `PANGOLIN_WINDOW_URI` environment variable to change the default font or adjust the default font size:\n\n```bash\nPANGOLIN_WINDOW_URI=\"default:[default_font_size=20]//\" ./some_pangolin_app\n\nPANGOLIN_WINDOW_URI=\"default:[default_font=my_awesome_font.ttf,default_font_size=20]//\" ./some_pangolin_app\n```\n\nTo use Pangolin in your applications whilst being conscientious of changing fonts, you can query how long fonts or text are with:\n\n```C++\n#include <pangolin/display/default_font.h>\nint func()\n{\n    // E.g. Choose sensible size for Pangolin Panel\n    const int PANEL_WIDTH = 20* pangolin::default_font().MaxWidth();\n    ...\n    // E.g. Work out some column width etc.\n    const int COL_WIDTH = pangolin::default_font().Text(\"How big is this text?\").Width();\n}\n```\n\n\n\n## Emscripten (Compile for web) ##\n\nEmscripten is a neat c++ compiler which can output javascript executable code. That's right, your Pangolin programs can run on the web, too!\n\nFollow Emscriptens instructions to install the SDK (summarized below):\n\n```bash\nmkdir ~/tools && cd ~/tools\ngit clone https://github.com/emscripten-core/emsdk.git\ncd emsdk && ./emsdk install latest && ./emsdk activate latest\n```\n\nTo build Pangolin with the Emscripten toolchain, create a new build directory, make sure Emscripten is on your PATH, and use the `emconfigure` utility to run CMake with the custom toolchain settings:\n\n```bash\ncd ~/code/Pangolin\nmkdir build-em && cd build-em\nsource ~/tools/emsdk/emsdk_env.sh\nemcmake cmake ..\n```\n\n## Acknowledgements ##\n\nI'd like to thank the growing number of kind contributors to Pangolin for helping to make it more stable and feature rich. Many features of Pangolin have been influenced by other projects such as GFlags, GLConsole, and libcvd in particular. I'd also like to thank the FOSS projects on which Pangolin depends.\n\nFor a summary of those who have made code contributions, execute:\n\n```bash\ngit shortlog -sne\n```\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "components",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.xml",
          "type": "blob",
          "size": 0.9716796875,
          "content": "<?xml version=\"1.0\"?>\n<package format=\"3\">\n  <name>pangolin</name>\n  <version>0.9.2</version>\n  <description>Pangolin is a set of lightweight and portable utility libraries for prototyping 3D, numeric or video based programs and algorithms.</description>\n  <maintainer email=\"stevenlovegrove@gmail.com\">Steven Lovegrove</maintainer>\n  <maintainer email=\"Rauch.Christian@gmx.de\">Christian Rauch</maintainer>\n  <author     email=\"stevenlovegrove@gmail.com\">Steven Lovegrove</author>\n  <license>MIT</license>\n\n  <buildtool_depend>cmake</buildtool_depend>\n\n  <depend>libglew-dev</depend>\n  <depend>libepoxy-dev</depend>\n  <depend>python3-dev</depend>\n  <build_depend>eigen</build_depend>\n  <depend>libpng-dev</depend>\n  <depend>libturbojpeg</depend>\n  <depend>libxkbcommon-dev</depend>\n  <depend>opengl</depend>\n  <build_depend>wayland-dev</build_depend>\n  <exec_depend>wayland</exec_depend>\n\n  <test_depend>catch2</test_depend>\n\n  <export>\n    <build_type>cmake</build_type>\n  </export>\n</package>\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}