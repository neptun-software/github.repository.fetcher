{
  "metadata": {
    "timestamp": 1736565996198,
    "page": 974,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jank-lang/jank",
      "stars": 1883,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 3.5966796875,
          "content": "ï»¿---\nBasedOnStyle: Microsoft\n#AllowBreakBeforeNoexceptSpecifier: OnlyWithParen\n#AllowShortCompoundRequirementOnASingleLine: 'true'\n#BracedInitializerIndentWidth: 2\n#BreakAdjacentStringLiterals: 'true'\n#KeepEmptyLinesAtEOF: 'false'\n#RemoveParentheses: Leave\n#SpacesInParens: Never\nAccessModifierOffset: -2\nAlignAfterOpenBracket: Align\nAlignArrayOfStructures: Right\nAlignConsecutiveAssignments: 'false'\nAlignConsecutiveBitFields: 'false'\nAlignConsecutiveDeclarations: 'false'\nAlignConsecutiveMacros: 'false'\nAlignEscapedNewlines: Left\nAlignOperands: 'false'\nAlignTrailingComments: 'false'\nAllowAllArgumentsOnNextLine: 'false'\nAllowAllConstructorInitializersOnNextLine: 'false'\nAllowAllParametersOfDeclarationOnNextLine: 'false'\nAllowShortBlocksOnASingleLine: 'false'\nAllowShortCaseLabelsOnASingleLine: 'false'\nAllowShortFunctionsOnASingleLine: None\nAllowShortIfStatementsOnASingleLine: Never\nAllowShortLambdasOnASingleLine: All\nAllowShortLoopsOnASingleLine: 'false'\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: 'false'\nAlwaysBreakTemplateDeclarations: 'Yes'\nBinPackArguments: 'false'\nBinPackParameters: 'false'\nBitFieldColonSpacing: Both\nBreakAfterAttributes: Always\nBreakArrays: 'false'\nBreakBeforeBinaryOperators: All\nBreakBeforeBraces: Custom\nBreakBeforeConceptDeclarations: Always\nBreakBeforeInlineASMColon: OnlyMultiline\nBreakBeforeTernaryOperators: 'true'\nBreakConstructorInitializers: BeforeComma\nBreakInheritanceList: BeforeComma\nBreakStringLiterals: 'true'\nColumnLimit: '100'\nCompactNamespaces: 'false'\nConstructorInitializerAllOnOneLineOrOnePerLine: 'false'\nConstructorInitializerIndentWidth: '2'\nContinuationIndentWidth: '2'\nCpp11BracedListStyle: 'false'\nDerivePointerAlignment: 'false'\nEmptyLineAfterAccessModifier: Never\nEmptyLineBeforeAccessModifier: LogicalBlock\nExperimentalAutoDetectBinPacking: 'false'\nFixNamespaceComments: 'false'\nIncludeBlocks: Preserve\nIndentAccessModifiers: 'false'\nIndentCaseBlocks: 'true'\nIndentCaseLabels: 'true'\nIndentExternBlock: 'true'\nIndentGotoLabels: 'false'\nIndentPPDirectives: BeforeHash\nIndentRequiresClause: 'false'\nIndentWidth: '2'\nIndentWrappedFunctionNames: 'false'\nInsertBraces: 'true'\nInsertNewlineAtEOF: 'true'\n# CI isn't supporting this, even though it should be in 16.\n#IntegerLiteralSeparator:\n#  Binary: 8\n#  BinaryMinDigits: 8\n#  Decimal: 3\n#  DecimalMinDigits: 5\n#  Hex: -1\nKeepEmptyLinesAtTheStartOfBlocks: 'false'\nLambdaBodyIndentation: Signature\nLanguage: Cpp\nLineEnding: LF\nMaxEmptyLinesToKeep: '2'\nNamespaceIndentation: All\nPPIndentWidth: 2\nPackConstructorInitializers: Never\nPenaltyReturnTypeOnItsOwnLine: 1\nPointerAlignment: Right\nQualifierAlignment: Custom\nQualifierOrder: [ 'static', 'constexpr', 'inline', 'volatile', 'friend', 'restrict', 'type', 'const' ]\nReflowComments: 'false'\nRemoveBracesLLVM: 'false'\nRemoveSemicolon: 'true'\nRequiresClausePosition: OwnLine\nRequiresExpressionIndentation: OuterScope\nSeparateDefinitionBlocks: Always\nShortNamespaceLines: 0\nSortIncludes: 'false'\nSortUsingDeclarations: 'false'\nSpaceAfterCStyleCast: 'false'\nSpaceAfterLogicalNot: 'false'\nSpaceAfterTemplateKeyword: 'true'\nSpaceAroundPointerQualifiers: Both\nSpaceBeforeAssignmentOperators: 'true'\nSpaceBeforeCaseColon: 'false'\nSpaceBeforeCpp11BracedList: 'false'\nSpaceBeforeCtorInitializerColon: 'true'\nSpaceBeforeInheritanceColon: 'true'\nSpaceBeforeParens: Never\nSpaceBeforeRangeBasedForLoopColon: 'true'\nSpaceInEmptyParentheses: 'false'\nSpacesBeforeTrailingComments: '1'\nSpacesInAngles: 'false'\nSpacesInCStyleCastParentheses: 'false'\nSpacesInLineCommentPrefix:\n  Minimum: 1\n  Maximum: -1\nSpacesInParentheses: 'false'\nSpacesInSquareBrackets: 'false'\nStandard: c++20\nTabWidth: '2'\nUseTab: Never\n\n...\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 2.453125,
          "content": "Checks: \"clang-diagnostic-*,\\\nclang-analyzer-*,\\\ncppcoreguidelines-*,\\\nmodernize-*,\\\nbugprone-*,\\\nperformance-*,\\\nreadability-*,\\\nmisc-const-correctness,\\\nmisc-use-internal-linkage,\\\nmisc-static-assert,\\\nmisc-redundant-expression,\\\nmisc-misleading-identifier,\\\nmisc-definitions-in-headers,\\\n-clang-analyzer-cplusplus.NewDeleteLeaks,\\\n-clang-analyzer-cplusplus.NewDelete,\\\n-modernize-use-trailing-return-type,\\\n-modernize-use-nodiscard,\\\n-modernize-pass-by-value,\\\n-modernize-avoid-c-arrays,\\\n-modernize-use-designated-initializers,\\\n-cppcoreguidelines-non-private-member-variables-in-classes,\\\n-cppcoreguidelines-avoid-c-arrays,\\\n-cppcoreguidelines-avoid-magic-numbers,\\\n-cppcoreguidelines-pro-bounds-array-to-pointer-decay,\\\n-cppcoreguidelines-pro-type-reinterpret-cast,\\\n-cppcoreguidelines-special-member-functions,\\\n-cppcoreguidelines-pro-type-union-access,\\\n-cppcoreguidelines-pro-bounds-pointer-arithmetic,\\\n-cppcoreguidelines-pro-type-static-cast-downcast,\\\n-cppcoreguidelines-pro-type-const-cast,\\\n-cppcoreguidelines-owning-memory,\\\n-cppcoreguidelines-avoid-const-or-ref-data-members,\\\n-cppcoreguidelines-rvalue-reference-param-not-moved,\\\n-bugprone-easily-swappable-parameters,\\\n-bugprone-reserved-identifier,\\\n-bugprone-multi-level-implicit-pointer-conversion,\\\n-bugprone-crtp-constructor-accessibility,\\\n-readability-redundant-member-init,\\\n-readability-implicit-bool-conversion,\\\n-readability-magic-numbers,\\\n-readability-identifier-length,\\\n-readability-else-after-return,\\\n-readability-named-parameter,\\\n-readability-function-cognitive-complexity,\\\n-readability-uppercase-literal-suffix,\\\n-readability-avoid-const-params-in-decls,\\\n-readability-convert-member-functions-to-static,\\\n-readability-isolate-declaration,\\\n-readability-qualified-auto,\\\n-readability-redundant-declaration,\\\n-readability-use-anyofallof,\\\n-performance-noexcept-move-constructor,\\\n-performance-move-const-arg\"\n\nWarningsAsErrors: '*'\nHeaderFilterRegex: '.*'\n\nCheckOptions:\n  - key: modernize-loop-convert.MinConfidence\n    value: reasonable\n  - key: modernize-use-override.IgnoreDestructors\n    value: true\n  - key: cppcoreguidelines-explicit-virtual-functions.IgnoreDestructors\n    value: true\n  - key: readability-identifier-length.IgnoredVariableNames\n    value: true\n  - key: readability-identifier-length.IgnoredExceptionVariableNames\n    value: true\n  - key: readability-identifier-length.IgnoredParameterNames\n    value: true\n  - key: readability-identifier-length.IgnoredLoopCounters\n    value: true\nFormatStyle: none\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0732421875,
          "content": "*.jank linguist-language=clojure\n*.png filter=lfs diff=lfs merge=lfs -text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4892578125,
          "content": "test.jank\njank-generated.hpp\n.jank-repl-history\na.out\n.jank-native-repl-history\n.jank-repl-history\n\n# Vim files\n/.ycm_extra_conf.py*\n/.lsp\n\n# lein\ntarget\nclasses\n/checkouts\npom.xml\npom.xml.asc\n*.jar\n*.class\n/.lein-*\n.hgignore\n.hg/\n.clj-kondo\n\n# C++\n.ccls-cache\n.gdb_history\n.cache\n.cpcache\ninst\ndeb-cache\nbuild\ncompiler+runtime/build-*\ncoverage.txt\nvcpkg_installed\n.idea/\n.vs/\n.vscode/\ncmake-build-*/\nprefix/\nCMakeLists.txt.user\nCMakeUserPresets.json\n\n# Rust\nrust/jank\n\n# secrets\n.github_access_token\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 1.2431640625,
          "content": "[submodule \"third-party/vcpkg\"]\n\tpath = compiler+runtime/third-party/vcpkg\n\turl = https://github.com/jank-lang/vcpkg.git\n[submodule \"compiler+runtime/third-party/folly\"]\n\tpath = compiler+runtime/third-party/folly\n\turl = https://github.com/jank-lang/folly.git\n[submodule \"compiler+runtime/third-party/bpptree\"]\n\tpath = compiler+runtime/third-party/bpptree\n\turl = https://github.com/jank-lang/BppTree.git\n[submodule \"compiler+runtime/third-party/bdwgc\"]\n\tpath = compiler+runtime/third-party/bdwgc\n\turl = https://github.com/jank-lang/bdwgc.git\n[submodule \"compiler+runtime/third-party/fmt\"]\n\tpath = compiler+runtime/third-party/fmt\n\turl = https://github.com/jank-lang/fmt.git\n[submodule \"compiler+runtime/third-party/immer\"]\n\tpath = compiler+runtime/third-party/immer\n\turl = https://github.com/jank-lang/immer.git\n[submodule \"compiler+runtime/third-party/cli11\"]\n\tpath = compiler+runtime/third-party/cli11\n\turl = https://github.com/jank-lang/CLI11.git\n[submodule \"compiler+runtime/third-party/libzippp\"]\n\tpath = compiler+runtime/third-party/libzippp\n\turl = https://github.com/jank-lang/libzippp.git\n[submodule \"compiler+runtime/third-party/boost-preprocessor\"]\n\tpath = compiler+runtime/third-party/boost-preprocessor\n\turl = https://github.com/jank-lang/boost-preprocessor.git\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.677734375,
          "content": "version: ~> 1.0\nimport: nix-community/nix-travis-ci:nix.yml@main\n\nsudo: false\n\nos:\n  - linux\ndist: jammy\n\naddons:\n  apt:\n    sources:\n      - sourceline: 'deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-14 main'\n      - sourceline: 'deb-src http://apt.llvm.org/jammy/ llvm-toolchain-jammy-14 main'\n    packages:\n      - clang-14\n\ncache:\n  - apt: true\n  - directories:\n    - ${HOME}/.cache/vcpkg\n\ninstall:\n  - export CC=clang-14 && export CXX=clang++-14\n  - |\n    export VCPKG_DISABLE_METRICS=1\n    git clone https://github.com/Microsoft/vcpkg.git\n    ./vcpkg/bootstrap-vcpkg.sh\n    ./vcpkg/vcpkg install\n    export VCPKG_ROOT=\"${PWD}/vcpkg\"\n\nscript:\n  - nix-shell --command \"./bin/ci/test\"\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.1005859375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nconduct@jank-lang.org.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "DESIGN.md",
          "type": "blob",
          "size": 16.603515625,
          "content": "# jank design notes\n\n## Semantic analysis\nNeeds to handle two scenarios:\n\n1. File analysis\n2. REPL analysis\n\nWe cannot assume that one comes before the other.\n\nWe'll want to track references to vars and locals, so we need more than just a\nlist of expressions. Due to REPL usage, any definition can be replaced at any\ntime, which will need to trigger type checking again and will need to carry over\nreference tracking.\n\nIt makes sense to categorize expressions into defs and non-defs, but order\nbetween expressions must also be preserved, unless some dependency tracking is\nto be done, but that doesn't seem worth it. So a list of expressions,\nmaintaining order, can be kept and then a separate collection of references to those\nfor the defs.\n\nKeeping track of non-def expressions is very difficult, for multiple reasons:\n\n1. It's hard to know if any particular expression came from a source file or a\n   REPL.\n2. Even if it came from a source file, it's hard to know if that\n   expression has since been deleted from the file.\n3. Continuous typing of updated vars cannot work while keeping old non-def\n   expressions since they could no longer be type-correct, but it's hard to know\n   if that's actually an error.\n4. Keeping track of every non-def expression will result in unbounded memory\n   growth during long REPL sessions, while the majority of those expressions are\n   no longer relevant.\n\nWith all of these concerns, there are a couple of approaches which become\napparent:\n\n1. Only do whole program type checking during AOT compilation. This\n   severely limits the REPL experience, but it solves this whole class of\n   problems by ruling out the arbitrary REPL inputs.\n2. Only perform forward type checking during REPL usage, meaning that previous\n   expressions are not retroactively type checked when a var changes. This also\n   involves tossing out all non-def expressions after type checking them.\n\n### Forward type checking\nThe difference here is that, without forward type checking (i.e. during whole\nprogram analysis), this would be a type error:\n\n```clojure\n(def a 1)\n(defn foo []\n  (def a \"meow\")\n  a)\n```\n\nThis is because `a` is expected to have a stable type, across redefinitions,\nduring whole program analysis. But, in the REPL, I might want to change what `a`\nis all the time, until I figure out what I want it to be:\n\n```clojure\n(def a 1)\n; Hm, maybe lift it...\n(def a {:stuff 1})\n; I might have multiple?\n(def a [{:stuff 1}])\n; Nah, this is fine.\n(def a 1)\n```\n\nThis needs to work, but if I do something with `a` after it has been set, the\nforward type checking can still pick that up.\n\n```clojure\n(def a 1)\n(+ a a) ; Checks out\n(def a [1])\n(+ a a) ; Type error\n```\n\n### Evaluating while analyzing\nClojure, being as dynamic as it is, can evaluate each form one after the next.\nAs long as all symbols are in scope and semantically capable to be used in that\nform, all is well. This rules out things like whole programs analysis, though,\nsince analyzing the program would require running the whole thing.\n\nDef, for example, can show up in a few different ways:\n\n1. Top-level\n```clojure\n(def a 5)\n(println a)\n```\n\n2. Within another top-level expression\n```clojure\n(def a (do\n         (def b 5)\n         1))\n(println b)\n```\n\n3. Anywhere else\n```clojure\n(defn foo []\n  (def a 1)\n  (println a))\n```\n\nThe first two could be supported during file analysis by always evaluating\ntop-level forms, but the third case would end up causing issues. So, if jank\nwants to be able to analyze (and type check) the third case in a holistic sense,\nit needs to depart from the conflation of evaluation and analysis.\n\n## Interop\nInterop with C and C++ will require the following abilities:\n\n1. Include headers for cling to source (Carp does this as fns in the code)\n  a. Thus the ability to add header include paths\n2. Link jank sources to existing libraries\n  a. Thus the ability to add library paths\n3. Call native functions from jank\n4. Represent native objects in jank's runtime\n5. Explicitly box/unbox native objects\n6. Refer to native globals from jank\n7. Reach fields and call member functions on native objects\n8. Extract the underlying native value for some jank objects (numbers, strings, etc)\n9. Convert native values to jank objects (numbers, strings, arrays, etc)\n10. Create native objects (numbers, strings, arrays, etc)\n\nThe priority for interop is the ability to call into existing C and C++\nlibraries. Exposing all of C++ is not a goal.\n\n### References\n* Ferret: https://ferret-lang.org/#outline-container-sec-4\n* Carp: https://github.com/carp-lang/Carp/blob/master/docs/CInterop.md\n\nComparing the approaches of Ferret and Carp, we can see two different ways\ninterop can be tackled. Let's assume we want to call this fn which uses a\nheader-only third-party HTTP library.\n\n```c++\n// http.hpp\n#include <httplib.h>\n\ninline httplib::Response http_get(char const * const host, char const * const path)\n{\n  httplib::Client cli(host);\n  return client.Get(path);\n}\n```\n\n#### Ferret\nFerret gives all control to the developer and just uses inline C++ as strings.\nWrapping the HTTP get fn would look like this:\n\n```clojure\n(native-header \"http.hpp\")\n\n(defn http-get [host path]\n  (cxx \"auto const response(http_get(string::c_str(host), string::c_str(path)));\n        __result = obj<string>(response.body);\"))\n\n(http-get \"localhost\" \"/meow\")\n```\n\nConversion to/from native types just uses Ferret's C++ API, the same as the\ncompiler's runtime would.\n\n##### Pros\n\n1. Very light for jank; no need to encode all the normal C++ types and\n   conversions into jank code, since it already has a C++ API for this\n2. Tons of power for the developer; not bound by a limited interop API\n\n##### Cons\n\n1. It's more work for the developer, who has to know enough C++ to be useful\n2. It's error-prone, both because writing C++ is hard and because writing C++ is\n   hard\n3. It's inherently tied to jank's C++ API, so any interface changes will result\n   in compilation errors for various projects\n\n#### Carp\nCarp approaches this from the direction of providing an API for all the things\nwhich can be done for interop, such as conversions and boxing. For example:\n\n```clojure\n(relative-include \"http.hpp\")\n\n(register-type HttpResponse \"httplib::Response\")\n(register http-get (Fn [(Ptr CChar) (Ptr CChar)] (Ptr CChar)) \"http_get\")\n\n(http-get (String.cstr \"localhost\") (String.cstr \"/meow\"))\n```\n\nCarp technically wraps C, not C++, but I'm using the same syntax it has here for\nC++ types as well. Registering fns doesn't require manually defining any\ninline C++; it builds upon compile-provided mechanisms for conveying native\ninterfaces using Carp's syntax. This leaks less of the C++ details, but is\nultimately more limiting.\n\nIt's worth noting that Carp also supports inline native code, in the form of\nwhat it calls \"templates\". For example:\n\n```clojure\n(deftemplate add (Fn [a a] a)\n                 \"$a $NAME($a x, $a y)\"\n                 \"$DECL {\n                   return x + y;\n                 }\")\n\n(add 1 2)\n(add 20l 22l)\n(add 2.0f 5.0f)\n\n; Can't do that as they're different types\n; (add 2.0f 22l)\n```\n\n##### Pros\n\n1. jank devs don't need to know C++ well; the interop API can be documented\n   along with jank\n2. Wrapper libraries have easier mechanisms for creating idiomatic-feeling jank\n   code that's really doing interop\n\n##### Cons\n\n1. Supporting all of this in jank _really_ grows the language and departs it\n   from Clojure\n2. Each native function and type needs to be manually lifted into jank, rather\n   than kept as an implementation detail\n3. Since each fn isn't wrapped, it's registered, the nativeness of it leaks\n   (calling a fn taking C strs requires manual conversions at each call site);\n   this will ultimately result in fns being both wrapped *and* registered\n\nI'll note that, even if Carp's approach isn't chosen, I think the way it handles\noverriding the native names for symbols is clean and should be done by jank as\nwell.\n\n#### Suggested approach\nI think Ferret's approach is both lightweight and flexible. A system like what\nCarp has could always be added on if it's needed, but even Carp has the escape\nhatch into the native world so it makes sense to start with that.\n\nI don't like the idea of the C++ code just being a string, so I'm chewing on how\nto make it richer while still keeping things simple. In terms of how it'll look\nin jank, here's what I'm thinking:\n\n```clojure\n(defn string? [o]\n  (native/raw \"__value = make_box(#{ o }#->as_string() != nullptr)\"))\n```\n\nTwo things of note here:\n\n1. Everything under the `native` ns will be jank-provided mechanisms for working\n   with interop\n2. Rather than just putting `o` in the string, we use interpolation; this will\n   help reduce typos, magically do munging, ensure captures are properly closed\n   over, and help with tooling, so LSP can identity that as a usage of `o`\n\nThis alone will allow me to implement a great deal of `clojure.core` functions.\nIt doesn't solve all interop questions, but I'll get to them.\n\n## Codegen\n### Handling expressions like if/let which can be arbitrarily nested\nThe expression `(println (if :foo :a :b))` results in the following decompiled\nJava, from Clojure:\n\n```java\npublic static Object invokeStatic() {\n  // println\n  final IFn fn = (IFn)user$fn_line_1__219.const__0.getRawRoot();\n  // foo\n  final Keyword const__1 = user$fn_line_1__219.const__1;\n  // truthy check becomes a != null and != false check\n  if (const__1 != null) {\n    if (const__1 != Boolean.FALSE) {\n      // Lifted constant gets put into a local and the println call is\n      // duplicated here and also below\n      final Keyword keyword = user$fn_line_1__219.const__2;\n      return fn.invoke(keyword);\n    }\n  }\n  final Keyword keyword = user$fn_line_1__219.const__3;\n  return fn.invoke(keyword);\n}\n```\n\nEven worse, if the expression grows to be `(println (if :foo :a :b) (if\n:bar :c :d))` then the generated code effectively has a `goto`.\n\n```java\npublic static Object invokeStatic() {\n  // println\n  final IFn fn = (IFn)user$fn_line_1__223.const__0.getRawRoot();\n  // foo\n  final Keyword const__1 = user$fn_line_1__223.const__1;\n\n  Keyword keyword = null;\n  Label_0032: {\n    if (const__1 != null) {\n      if (const__1 != Boolean.FALSE) {\n        keyword = user$fn_line_1__223.const__2;\n        // curious that this isn't just an else with a combined if, but ok\n        break Label_0032;\n      }\n    }\n    keyword = user$fn_line_1__223.const__3;\n  }\n\n  // bar\n  final Keyword const__2 = user$fn_line_1__223.const__4;\n  if (const__2 != null) {\n    if (const__2 != Boolean.FALSE) {\n      final Keyword keyword2 = user$fn_line_1__223.const__5;\n      return fn.invoke(keyword, keyword2);\n    }\n  }\n  final Keyword keyword2 = user$fn_line_1__223.const__6;\n  return fn.invoke(keyword, keyword2);\n}\n```\n\nSo, given these two examples, we see two different strategies:\n\n1. Nest the `if` statements and duplicate the outer call to println\n2. Mutate a local and use a single call\n\nI suspect that the first strategy is used over the second in favor of\nperformance, but, favoring simplicity, I'd rather just explore one option right\nnow. Before moving forward with the second option, it'd help to prove that it\nalone will handle all of the necessary cases of if and let.\n\n### Example case: if expr in return position\nHere we pull the value of each branch into a local and return that. Just like\nstrategy #2 above, but we're using return rather than calling a fn. If there is\nno else form, we can still generate one to set the value to `nil`.\n\n```clojure\n(fn []\n  (if foo\n    1\n    2))\n```\n```c++\njank::runtime::object_ptr call() const override\n{\n  object_ptr val;\n  if(truthy(foo))\n  { val = 1; }\n  else\n  { val = 2; }\n  return val;\n}\n```\n\n### Example case: nested if expr\n```clojure\n(println (if foo (thing)))\n```\n```c++\njank::runtime::object_ptr call() const override\n{\n  object_ptr val;\n  if(truthy(foo))\n  { val = thing->call(); }\n  else\n  { val = JANK_NIL; }\n  return println->call(val);\n}\n```\n\n### Example case: multi-nested if expr\n```clojure\n(println (if foo (if thing 1) 2))\n```\n```c++\njank::runtime::object_ptr call() const override\n{\n  object_ptr val1;\n  if(truthy(foo))\n  {\n    object_ptr val2;\n    if(truthy(thing))\n    { val2 = 1; }\n    else\n    { val2 = JANK_NIL; }\n    val1 = val2;\n  }\n  else\n  { val1 = 2; }\n  return println->call(val1);\n}\n```\n\n### Example case: nested call with an if expr\n```clojure\n(println (str (if foo \"a\" \"b\")))\n```\n```c++\njank::runtime::object_ptr call() const override\n{\n  object_ptr val1;\n  if(truthy(foo))\n  { val1 = \"a\"; }\n  else\n  { val1 = \"b\"; }\n  object_ptr val2{ str->call(val1) };\n  return println->call(val2);\n}\n```\n\n## Type system\nIn terms of capability set, these are the categories I want to hit:\n\n1. Gradual typing\n2. Structural typing\n3. Dependent typing\n4. HM-style inference\n\nIn terms of API and usage, there are these:\n\n1. Malli-style syntax\n2. jank-provided API for transforming types in macros\n\n## LLVM-based JIT\nJIT compilation support can be broken down into the following steps:\n\n1. Codegen to C++ (requires a fair amount of semantic analysis)\n2. JIT compilation and evaluation\n3. Cache generated source (or LLVM IR? or C++ modules?) when loading whole files (i.e. `.class` files)\n\n## Memory management\nCurrently, jank is using `boost::intrusive_ptr` for reference counting runtime\nobjects. This will not detect cycles, so it will lead to memory leaks. jank's\nrequirements will require determinism, but there are still a few options here.\n\n1. Reference counting (with cyclical detection and weak refs where needed)\n2. Lifetime tracking\n  * https://github.com/carp-lang/Carp/blob/master/docs/Memory.md\n\nNote that whatever is chosen needs to work with interop as well, so it needs to\nbe flexible enough to hand over ownership to native land or acquire it.\n\n## Performance\nInteresting things with Roc: https://www.roc-lang.org \n\n## Error output\nFancy: https://github.com/mimoo/noname\n\n## The cost of types\n### Their points\n* I originally presented to benefits of types\n  * Correctness and documentation\n    * Rich shat on this primarily, saying he's never seen any proof that static\n      typing adds value for flexible systems (though he concedes later it can\n      add value to rigid systems)\n  * Performance\n    * Rich ultimately said that these optimizations are best done dynamically,\n      using something like Hotspot, rather than statically\n      * Where you need to optimize may change between each run of your program\n* Rich's use case for spec was not to be a busted type system\n* People choose to poor concrete on their feet\n* Using types to help you refactor is inherently bad (Rich said \"bad\" a lot)\n  * Any place the type system would fail after refactoring is a place which is\n    lacking in flexibility\n  * To order shoes, we don't use a show cart, shoe credit card, put them into a\n    shoe box, on a shoe box truck, and deliver them to your shoe box door\n* We need to design systems not for the current shape of the data, but for the\n  shape of the data over time\n  * spec2 aims to do this better\n* Rich says there ARE domains where this rigidity is desired and beneficial\n  * Rich mentioned security, such as cryptography, where flexibility is not the goal\n  * However, when I presented that instances of such black/white decisions are\n    so rare in this world, Rich said that it is indeed black and white\n  * Eric Normand jumped in here to say it's a soundness issue\n    * If you're going to statically type anything, it's wasted unless you\n      statically type everything\n* Both Rich and Eric kept using the word \"cost\" for static types, as though\n  there was an agreed upon, fixed cost\n  * I challenged them on this, but didn't get much\n* Rich said many bright young minds are wasted on this\n  * He said it's a waste of time and that I should work on something else\n  * I asked him if that's what he told Ambrose, but he said that Ambrose was\n    working on his PhD and that's what he wanted to do, do Rich gave him the\n    blessing\n* Finally, Rich said multiple times\n  * Know what problem you're trying to solve\n  * Know the cost it will take to solve that problem\n\n### My thoughts\n* I see this metaphor\n  * Flexible systems are a river\n    * The shape is constantly changing everywhere\n  * Gradually typed systems are a river with some dams\n    * The shape is constantly changing in many places, but it's held in a rigid\n      shape in some places\n* How low can the actual cost go?\n  * I'm confident that I can fork clojure, add in a system which understands\n    specs and optimizes your code when you spec your fns, and then secretly\n    merge it into main (with help)\n    * Rich would be opposed to this, in theory, but he wouldn't notice it in\n      practice, which means the cost is 0\n* Let's document the benefits of having more static type info\n  * Performance\n  * Correctness\n  * Tooling (autocomplete, suggestions, etc)\n\n## Editor support\n### Inline C++\n* Foreign syntax regions\n* Narrowing: https://github.com/chrisbra/NrrwRgn\n"
        },
        {
          "name": "HISTORY",
          "type": "blob",
          "size": 0.9306640625,
          "content": "Jan 2015 - Project started in C++\nOct 2015 - Parser, Type checker, and Interpreter implemented\nOct 2015 - Rewrite in Clojure started, focusing on C++ codegen\nNov 2015 - Parser, Type checker, and Codegen targeting C++ implemented\nDec 2016 - Initial macro system and interpreter are working\nDec 2016 - Continuous benchmark service added\nJan 2017 - Transition to fully generic, type-rich programming\nDec 2017 - Rewrite in Clojure, syntax changed to be a Clojure dialect\nMay 2022 - Rewrite in C++, backed by cling\nAug 2022 - Switch to Mozilla Public License 2.0\nMar 2023 - Hit 1k Github stars\nApr 2023 - Presented at Clojure Conj 2023\nJun 2023 - $2k Clojurists Together sponsorship for new object model\nSep 2023 - $2k Clojurists Together sponsorship for module/ns system\nJan 2024 - $2k Clojurists Together sponsorship for dynamic bindings, syntax quoting, and meta hints\nApr 2024 - $9k Clojurists Together sponsorship for lazy seqs, destructuring, and loop\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 16.3349609375,
          "content": "Mozilla Public License Version 2.0\n==================================\n\n1. Definitions\n--------------\n\n1.1. \"Contributor\"\n    means each individual or legal entity that creates, contributes to\n    the creation of, or owns Covered Software.\n\n1.2. \"Contributor Version\"\n    means the combination of the Contributions of others (if any) used\n    by a Contributor and that particular Contributor's Contribution.\n\n1.3. \"Contribution\"\n    means Covered Software of a particular Contributor.\n\n1.4. \"Covered Software\"\n    means Source Code Form to which the initial Contributor has attached\n    the notice in Exhibit A, the Executable Form of such Source Code\n    Form, and Modifications of such Source Code Form, in each case\n    including portions thereof.\n\n1.5. \"Incompatible With Secondary Licenses\"\n    means\n\n    (a) that the initial Contributor has attached the notice described\n        in Exhibit B to the Covered Software; or\n\n    (b) that the Covered Software was made available under the terms of\n        version 1.1 or earlier of the License, but not also under the\n        terms of a Secondary License.\n\n1.6. \"Executable Form\"\n    means any form of the work other than Source Code Form.\n\n1.7. \"Larger Work\"\n    means a work that combines Covered Software with other material, in \n    a separate file or files, that is not Covered Software.\n\n1.8. \"License\"\n    means this document.\n\n1.9. \"Licensable\"\n    means having the right to grant, to the maximum extent possible,\n    whether at the time of the initial grant or subsequently, any and\n    all of the rights conveyed by this License.\n\n1.10. \"Modifications\"\n    means any of the following:\n\n    (a) any file in Source Code Form that results from an addition to,\n        deletion from, or modification of the contents of Covered\n        Software; or\n\n    (b) any new file in Source Code Form that contains any Covered\n        Software.\n\n1.11. \"Patent Claims\" of a Contributor\n    means any patent claim(s), including without limitation, method,\n    process, and apparatus claims, in any patent Licensable by such\n    Contributor that would be infringed, but for the grant of the\n    License, by the making, using, selling, offering for sale, having\n    made, import, or transfer of either its Contributions or its\n    Contributor Version.\n\n1.12. \"Secondary License\"\n    means either the GNU General Public License, Version 2.0, the GNU\n    Lesser General Public License, Version 2.1, the GNU Affero General\n    Public License, Version 3.0, or any later versions of those\n    licenses.\n\n1.13. \"Source Code Form\"\n    means the form of the work preferred for making modifications.\n\n1.14. \"You\" (or \"Your\")\n    means an individual or a legal entity exercising rights under this\n    License. For legal entities, \"You\" includes any entity that\n    controls, is controlled by, or is under common control with You. For\n    purposes of this definition, \"control\" means (a) the power, direct\n    or indirect, to cause the direction or management of such entity,\n    whether by contract or otherwise, or (b) ownership of more than\n    fifty percent (50%) of the outstanding shares or beneficial\n    ownership of such entity.\n\n2. License Grants and Conditions\n--------------------------------\n\n2.1. Grants\n\nEach Contributor hereby grants You a world-wide, royalty-free,\nnon-exclusive license:\n\n(a) under intellectual property rights (other than patent or trademark)\n    Licensable by such Contributor to use, reproduce, make available,\n    modify, display, perform, distribute, and otherwise exploit its\n    Contributions, either on an unmodified basis, with Modifications, or\n    as part of a Larger Work; and\n\n(b) under Patent Claims of such Contributor to make, use, sell, offer\n    for sale, have made, import, and otherwise transfer either its\n    Contributions or its Contributor Version.\n\n2.2. Effective Date\n\nThe licenses granted in Section 2.1 with respect to any Contribution\nbecome effective for each Contribution on the date the Contributor first\ndistributes such Contribution.\n\n2.3. Limitations on Grant Scope\n\nThe licenses granted in this Section 2 are the only rights granted under\nthis License. No additional rights or licenses will be implied from the\ndistribution or licensing of Covered Software under this License.\nNotwithstanding Section 2.1(b) above, no patent license is granted by a\nContributor:\n\n(a) for any code that a Contributor has removed from Covered Software;\n    or\n\n(b) for infringements caused by: (i) Your and any other third party's\n    modifications of Covered Software, or (ii) the combination of its\n    Contributions with other software (except as part of its Contributor\n    Version); or\n\n(c) under Patent Claims infringed by Covered Software in the absence of\n    its Contributions.\n\nThis License does not grant any rights in the trademarks, service marks,\nor logos of any Contributor (except as may be necessary to comply with\nthe notice requirements in Section 3.4).\n\n2.4. Subsequent Licenses\n\nNo Contributor makes additional grants as a result of Your choice to\ndistribute the Covered Software under a subsequent version of this\nLicense (see Section 10.2) or under the terms of a Secondary License (if\npermitted under the terms of Section 3.3).\n\n2.5. Representation\n\nEach Contributor represents that the Contributor believes its\nContributions are its original creation(s) or it has sufficient rights\nto grant the rights to its Contributions conveyed by this License.\n\n2.6. Fair Use\n\nThis License is not intended to limit any rights You have under\napplicable copyright doctrines of fair use, fair dealing, or other\nequivalents.\n\n2.7. Conditions\n\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted\nin Section 2.1.\n\n3. Responsibilities\n-------------------\n\n3.1. Distribution of Source Form\n\nAll distribution of Covered Software in Source Code Form, including any\nModifications that You create or to which You contribute, must be under\nthe terms of this License. You must inform recipients that the Source\nCode Form of the Covered Software is governed by the terms of this\nLicense, and how they can obtain a copy of this License. You may not\nattempt to alter or restrict the recipients' rights in the Source Code\nForm.\n\n3.2. Distribution of Executable Form\n\nIf You distribute Covered Software in Executable Form then:\n\n(a) such Covered Software must also be made available in Source Code\n    Form, as described in Section 3.1, and You must inform recipients of\n    the Executable Form how they can obtain a copy of such Source Code\n    Form by reasonable means in a timely manner, at a charge no more\n    than the cost of distribution to the recipient; and\n\n(b) You may distribute such Executable Form under the terms of this\n    License, or sublicense it under different terms, provided that the\n    license for the Executable Form does not attempt to limit or alter\n    the recipients' rights in the Source Code Form under this License.\n\n3.3. Distribution of a Larger Work\n\nYou may create and distribute a Larger Work under terms of Your choice,\nprovided that You also comply with the requirements of this License for\nthe Covered Software. If the Larger Work is a combination of Covered\nSoftware with a work governed by one or more Secondary Licenses, and the\nCovered Software is not Incompatible With Secondary Licenses, this\nLicense permits You to additionally distribute such Covered Software\nunder the terms of such Secondary License(s), so that the recipient of\nthe Larger Work may, at their option, further distribute the Covered\nSoftware under the terms of either this License or such Secondary\nLicense(s).\n\n3.4. Notices\n\nYou may not remove or alter the substance of any license notices\n(including copyright notices, patent notices, disclaimers of warranty,\nor limitations of liability) contained within the Source Code Form of\nthe Covered Software, except that You may alter any license notices to\nthe extent required to remedy known factual inaccuracies.\n\n3.5. Application of Additional Terms\n\nYou may choose to offer, and to charge a fee for, warranty, support,\nindemnity or liability obligations to one or more recipients of Covered\nSoftware. However, You may do so only on Your own behalf, and not on\nbehalf of any Contributor. You must make it absolutely clear that any\nsuch warranty, support, indemnity, or liability obligation is offered by\nYou alone, and You hereby agree to indemnify every Contributor for any\nliability incurred by such Contributor as a result of warranty, support,\nindemnity or liability terms You offer. You may include additional\ndisclaimers of warranty and limitations of liability specific to any\njurisdiction.\n\n4. Inability to Comply Due to Statute or Regulation\n---------------------------------------------------\n\nIf it is impossible for You to comply with any of the terms of this\nLicense with respect to some or all of the Covered Software due to\nstatute, judicial order, or regulation then You must: (a) comply with\nthe terms of this License to the maximum extent possible; and (b)\ndescribe the limitations and the code they affect. Such description must\nbe placed in a text file included with all distributions of the Covered\nSoftware under this License. Except to the extent prohibited by statute\nor regulation, such description must be sufficiently detailed for a\nrecipient of ordinary skill to be able to understand it.\n\n5. Termination\n--------------\n\n5.1. The rights granted under this License will terminate automatically\nif You fail to comply with any of its terms. However, if You become\ncompliant, then the rights granted under this License from a particular\nContributor are reinstated (a) provisionally, unless and until such\nContributor explicitly and finally terminates Your grants, and (b) on an\nongoing basis, if such Contributor fails to notify You of the\nnon-compliance by some reasonable means prior to 60 days after You have\ncome back into compliance. Moreover, Your grants from a particular\nContributor are reinstated on an ongoing basis if such Contributor\nnotifies You of the non-compliance by some reasonable means, this is the\nfirst time You have received notice of non-compliance with this License\nfrom such Contributor, and You become compliant prior to 30 days after\nYour receipt of the notice.\n\n5.2. If You initiate litigation against any entity by asserting a patent\ninfringement claim (excluding declaratory judgment actions,\ncounter-claims, and cross-claims) alleging that a Contributor Version\ndirectly or indirectly infringes any patent, then the rights granted to\nYou by any and all Contributors for the Covered Software under Section\n2.1 of this License shall terminate.\n\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all\nend user license agreements (excluding distributors and resellers) which\nhave been validly granted by You or Your distributors under this License\nprior to termination shall survive termination.\n\n************************************************************************\n*                                                                      *\n*  6. Disclaimer of Warranty                                           *\n*  -------------------------                                           *\n*                                                                      *\n*  Covered Software is provided under this License on an \"as is\"       *\n*  basis, without warranty of any kind, either expressed, implied, or  *\n*  statutory, including, without limitation, warranties that the       *\n*  Covered Software is free of defects, merchantable, fit for a        *\n*  particular purpose or non-infringing. The entire risk as to the     *\n*  quality and performance of the Covered Software is with You.        *\n*  Should any Covered Software prove defective in any respect, You     *\n*  (not any Contributor) assume the cost of any necessary servicing,   *\n*  repair, or correction. This disclaimer of warranty constitutes an   *\n*  essential part of this License. No use of any Covered Software is   *\n*  authorized under this License except under this disclaimer.         *\n*                                                                      *\n************************************************************************\n\n************************************************************************\n*                                                                      *\n*  7. Limitation of Liability                                          *\n*  --------------------------                                          *\n*                                                                      *\n*  Under no circumstances and under no legal theory, whether tort      *\n*  (including negligence), contract, or otherwise, shall any           *\n*  Contributor, or anyone who distributes Covered Software as          *\n*  permitted above, be liable to You for any direct, indirect,         *\n*  special, incidental, or consequential damages of any character      *\n*  including, without limitation, damages for lost profits, loss of    *\n*  goodwill, work stoppage, computer failure or malfunction, or any    *\n*  and all other commercial damages or losses, even if such party      *\n*  shall have been informed of the possibility of such damages. This   *\n*  limitation of liability shall not apply to liability for death or   *\n*  personal injury resulting from such party's negligence to the       *\n*  extent applicable law prohibits such limitation. Some               *\n*  jurisdictions do not allow the exclusion or limitation of           *\n*  incidental or consequential damages, so this exclusion and          *\n*  limitation may not apply to You.                                    *\n*                                                                      *\n************************************************************************\n\n8. Litigation\n-------------\n\nAny litigation relating to this License may be brought only in the\ncourts of a jurisdiction where the defendant maintains its principal\nplace of business and such litigation shall be governed by laws of that\njurisdiction, without reference to its conflict-of-law provisions.\nNothing in this Section shall prevent a party's ability to bring\ncross-claims or counter-claims.\n\n9. Miscellaneous\n----------------\n\nThis License represents the complete agreement concerning the subject\nmatter hereof. If any provision of this License is held to be\nunenforceable, such provision shall be reformed only to the extent\nnecessary to make it enforceable. Any law or regulation which provides\nthat the language of a contract shall be construed against the drafter\nshall not be used to construe this License against a Contributor.\n\n10. Versions of the License\n---------------------------\n\n10.1. New Versions\n\nMozilla Foundation is the license steward. Except as provided in Section\n10.3, no one other than the license steward has the right to modify or\npublish new versions of this License. Each version will be given a\ndistinguishing version number.\n\n10.2. Effect of New Versions\n\nYou may distribute the Covered Software under the terms of the version\nof the License under which You originally received the Covered Software,\nor under the terms of any subsequent version published by the license\nsteward.\n\n10.3. Modified Versions\n\nIf you create software not governed by this License, and you want to\ncreate a new license for such software, you may create and use a\nmodified version of this License if you rename the license and remove\nany references to the name of the license steward (except to note that\nsuch modified license differs from this License).\n\n10.4. Distributing Source Code Form that is Incompatible With Secondary\nLicenses\n\nIf You choose to distribute Source Code Form that is Incompatible With\nSecondary Licenses under the terms of this version of the License, the\nnotice described in Exhibit B of this License must be attached.\n\nExhibit A - Source Code Form License Notice\n-------------------------------------------\n\n  This Source Code Form is subject to the terms of the Mozilla Public\n  License, v. 2.0. If a copy of the MPL was not distributed with this\n  file, You can obtain one at https://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular\nfile, then You may include the notice in a location (such as a LICENSE\nfile in a relevant directory) where a recipient would be likely to look\nfor such a notice.\n\nYou may add additional accurate notices of copyright ownership.\n\nExhibit B - \"Incompatible With Secondary Licenses\" Notice\n---------------------------------------------------------\n\n  This Source Code Form is \"Incompatible With Secondary Licenses\", as\n  defined by the Mozilla Public License, v. 2.0.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.662109375,
          "content": "<a href=\"https://jank-lang.org\">\n  <img src=\"https://media.githubusercontent.com/media/jank-lang/jank/main/.github/img/banner.png\" alt=\"jank banner\" />\n</a>\n\n<div align=\"center\">\n  <a href=\"https://clojurians.slack.com/archives/C03SRH97FDK\" target=\"_blank\"><img src=\"https://img.shields.io/badge/slack-%23jank-e01563.svg?style=flat&logo=slack&logoColor=fd893f&colorA=363636&colorB=363636\" /></a>\n  <a href=\"https://github.com/sponsors/jeaye\" target=\"_blank\"><img src=\"https://img.shields.io/github/sponsors/jeaye?style=flat&logo=github&logoColor=fd893f&colorA=363636&colorB=363636\" /></a>\n  <a href=\"https://twitter.com/jeayewilkerson\" target=\"_blank\"><img src=\"https://img.shields.io/twitter/follow/jeayewilkerson?style=flat&logo=x&logoColor=fd893f&colorA=363636&colorB=363636\" /></a>\n  <br/>\n  <a href=\"https://github.com/jank-lang/jank/actions\" target=\"_blank\"><img src=\"https://img.shields.io/github/actions/workflow/status/jank-lang/jank/build.yml?branch=main&style=flat&logo=github&logoColor=fd893f&colorA=363636&colorB=363636\" alt=\"CI\" /></a>\n  <a href=\"https://codecov.io/gh/jank-lang/jank\" target=\"_blank\"><img src=\"https://img.shields.io/codecov/c/github/jank-lang/jank?style=flat&logo=codecov&logoColor=fd893f&colorA=363636&colorB=363636\" /></a>\n</div>\n\n# What is jank?\n\nMost simply, jank is a [Clojure](https://clojure.org/) dialect on LLVM with C++ interop.\nLess simply, jank is a general-purpose programming language which embraces the interactive,\nfunctional, value-oriented nature of Clojure and the desire for the native\nruntime and performance of C++. jank aims to be strongly compatible with\nClojure. While Clojure's default host is the JVM and its interop is with Java,\njank's host is LLVM and its interop is with C++.\n\nFor the current progress of jank and its usability, see the tables here: https://jank-lang.org/progress/\n\nThe current tl;dr for jank's usability is: **still getting there, but not ready for\nuse yet. Check back in a few months!**\n\n## Latest binaries\nThere are pre-compiled binaries for Ubuntu 24.04, which are built to follow the\n`main` branch. You can download a tarball with everything you need here: https://github.com/jank-lang/jank/releases/tag/latest\n\n## Appetizer\n```clojure\n; Comments begin with a ;\n(println \"meow\") ; => nil\n\n; All built-in data structures are persistent and immutable.\n(def george {:name \"George Clooney\"}) ; => #'user/george\n\n; Though all data is immutable by default, side effects are adhoc.\n(defn say-hi [who]\n  (println (str \"Hi \" (:name who) \"!\"))\n  (assoc who :greeted? true))\n\n; Doesn't change george.\n(say-hi george) ; => {:name \"George Clooney\"\n                ;     :greeted? true}\n\n; Many core functions for working with immutable data.\n(apply + (distinct [12 8 12 16 8 6])) ; => 42\n\n; Interop with C++ can happen *seamlessly*.\n(defn sleep [ms]\n  (let [duration (c++/std.chrono.milliseconds ms)]\n    (c++/std.this_thread.sleep_for duration)))\n```\n\n## Docs\n* [Building jank](./compiler+runtime/doc/build.md)\n\n## Sponsors\nIf you'd like your name, company, or logo here, you can\n[sponsor this project](https://github.com/sponsors/jeaye) for at least $25/m.\n\n<br/>\n\n<p align=\"center\">\n  <a href=\"https://www.clojuriststogether.org/\">\n    <img src=\"https://www.clojuriststogether.org/header-logo.svg\" height=\"100px\">\n  </a>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://pitch.com/\">\n    Misha Karpenko\n  </a>\n</p>\n\n<p align=\"center\">\n  <a href=\"http://www.somethingdoneright.net/about\">\n    Bert Muthalaly\n  </a>\n</p>\n\n## In the news\n<div align=\"center\">\n\n| [<img src=\"https://i0.wp.com/2023.clojure-conj.org/wp-content/uploads/2019/06/clojure.png?resize=150%2C150&ssl=1\" height=\"100px\"><br /><sub><b>Clojure Conj 2023</b></sub>](https://www.youtube.com/watch?v=Yw4IAY4Nx_o)<br />        | [<img src=\"https://user-images.githubusercontent.com/1057635/193151333-449385c2-9ddb-468e-b715-f149d173e310.svg\" height=\"100px\"><br /><sub><b>The REPL Interview</b></sub>](https://www.therepl.net/episodes/44/)<br /> |  [<img src=\"https://github.com/jank-lang/jank/assets/1057635/72ff097c-578c-46f8-a727-aae6dcf2a82f\" width=\"100px\"><br /><sub><b>Language Introduction</b></sub>](https://youtu.be/ncYlHfK25i0)<br />          | [<img src=\"https://github.com/jank-lang/jank/assets/1057635/9788a7c8-93da-47ea-8d1d-8a258a747942\" width=\"100px\"><br /><sub><b>Compiler Spotlight</b></sub>](https://compilerspotlight.substack.com/p/language-showcase-jank)<br /> |\n| :-----------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-: | :-: |\n\n</div>\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.58984375,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\nWe appreciate your efforts to responsibly disclose your findings and will make every effort to acknowledge your contributions.\n\nTo report a security issue, please use the GitHub Security Advisory [\"Report a Vulnerability\"](https://github.com/jank-lang/jank/security/advisories/new) tab.\n\nThe jank team will send a response indicating the next steps in handling your report. After the initial reply to your report, the jank team will keep you informed of the progress towards a fix and full announcement, and may ask for additional information or guidance.\n"
        },
        {
          "name": "compiler+runtime",
          "type": "tree",
          "content": null
        },
        {
          "name": "jank.data.bencode",
          "type": "tree",
          "content": null
        },
        {
          "name": "lein-jank",
          "type": "tree",
          "content": null
        },
        {
          "name": "nrepl-server",
          "type": "tree",
          "content": null
        },
        {
          "name": "ray.jank",
          "type": "blob",
          "size": 14.59765625,
          "content": "(ns ray\n  (:require [jank.perf]))\n\n(def sqrt clojure.core-native/sqrt)\n(def tan clojure.core-native/tan)\n(def abs clojure.core-native/abs)\n(def pow clojure.core-native/pow)\n\n; TODO: jank can't have `or` yet, due to no\n; syntax quoting in macros. This program doesn't\n; require anything other than logical or on two bools, though.\n(defn either [l r]\n  (if l\n    l\n    r))\n\n; TODO: No proper `and` macro yet.\n(defn and [l r]\n  (if l\n    r\n    false))\n\n; TODO: Also since jank doesn't have syntax\n; quoting, as well as loop, there is no proper doseq.\n; This one generates an anonymous fn with a recur in\n; it, since jank can do that, and just calls it immediately.\n(defmacro doseq [bindings & body]\n  (let [binding-name (first bindings)\n        binding-seq (second bindings)]\n    (list (list 'fn 'doseq '[__gen_acc]\n                (list 'if (list 'empty? '__gen_acc)\n                      nil\n                      (cons 'let\n                            (cons (conj [binding-name] (list 'first '__gen_acc))\n                                  (conj (vec body) (list 'recur (list 'next '__gen_acc)))))))\n          binding-seq)))\n\n(defn print+space [data]\n  (print data) (print \" \"))\n\n(defn rand-real [min max]\n  (+ min (* (- max min) (rand))))\n(defn clamp [n min max]\n  (if (< n min)\n    min\n    (if (< max n)\n      max\n      n)))\n(def pi 3.1415926535897932385)\n(defn degrees->radians [deg]\n  (/ (* deg pi) 180.0))\n\n(defn vec3-create [r g b]\n  {:r r\n   :g g\n   :b b})\n(defn vec3-scale [l n]\n  {:r (* (get l :r) n)\n   :g (* (get l :g) n)\n   :b (* (get l :b) n)})\n(defn vec3-add [l r]\n  {:r (+ (get l :r) (get r :r))\n   :g (+ (get l :g) (get r :g))\n   :b (+ (get l :b) (get r :b))})\n(defn vec3-sub [l r]\n  {:r (- (get l :r) (get r :r))\n   :g (- (get l :g) (get r :g))\n   :b (- (get l :b) (get r :b))})\n(defn vec3-mul [l r]\n  {:r (* (get l :r) (get r :r))\n   :g (* (get l :g) (get r :g))\n   :b (* (get l :b) (get r :b))})\n(defn vec3-div [l n]\n  {:r (/ (get l :r) n)\n   :g (/ (get l :g) n)\n   :b (/ (get l :b) n)})\n(defn vec3-length-squared [v]\n  (+ (+ (* (get v :r) (get v :r))\n        (* (get v :g) (get v :g)))\n     (* (get v :b) (get v :b))))\n(defn vec3-length [v]\n  (sqrt (vec3-length-squared v)))\n(defn vec3-dot [l r]\n  (+ (+ (* (get l :r) (get r :r))\n        (* (get l :g) (get r :g)))\n     (* (get l :b) (get r :b))))\n(defn vec3-cross [l r]\n  (vec3-create (- (* (get l :g) (get r :b))\n                  (* (get l :b) (get r :g)))\n               (- (* (get l :b) (get r :r))\n                  (* (get l :r) (get r :b)))\n               (- (* (get l :r) (get r :g))\n                  (* (get l :g) (get r :r)))))\n(defn vec3-normalize [v]\n  (vec3-div v (vec3-length v)))\n(defn vec3-rand []\n  (vec3-create (rand) (rand) (rand)))\n(defn vec3-rand+clamp [min max]\n  (vec3-create (rand-real min max) (rand-real min max) (rand-real min max)))\n(defn vec3-rand-in-sphere []\n  (let [v (vec3-rand+clamp -1 1)]\n    (if (< 1.0 (vec3-length-squared v))\n      v\n      (vec3-rand-in-sphere))))\n(defn vec3-rand-unit-in-sphere []\n  (vec3-normalize (vec3-rand-in-sphere)))\n(defn vec3-rand-in-unit-disk []\n  (let [p (vec3-create (rand-real -1 1) (rand-real -1 1) 0)]\n    (if (< 1 (vec3-length-squared p))\n      (vec3-rand-in-unit-disk)\n      p)))\n(defn vec3-near-zero? [v]\n  (let [epsilon 0.0000008]\n    (and (and (< (abs (get v :r)) epsilon)\n              (< (abs (get v :g)) epsilon))\n         (< (abs (get v :b)) epsilon))))\n\n(defn vec3-reflect [v n]\n  (vec3-sub v (vec3-scale n (* 2 (vec3-dot v n)))))\n(defn vec3-refract [uv n etai-over-etat]\n  (let [cos-theta (min (vec3-dot (vec3-sub (vec3-create 0 0 0)\n                                           uv)\n                                 n)\n                       1.0)\n        r-out-perp (vec3-scale (vec3-add uv (vec3-scale n cos-theta))\n                               etai-over-etat)\n        r-out-parallel (vec3-scale n (- 0.0 (sqrt (abs (- 1.0 (vec3-length-squared r-out-perp))))))]\n    (vec3-add r-out-perp r-out-parallel)))\n(defn vec3-print [v samples-per-pixel]\n  (let [scale (/ 1.0 samples-per-pixel)\n        r (sqrt (* scale (get v :r)))\n        g (sqrt (* scale (get v :g)))\n        b (sqrt (* scale (get v :b)))]\n    (print+space (int (* 256.0 (clamp r 0.0 0.999))))\n    (print+space (int (* 256.0 (clamp g 0.0 0.999))))\n    (print+space (int (* 256.0 (clamp b 0.0 0.999))))))\n\n(defn ray-create [origin direction]\n  {:origin origin\n   :direction direction})\n(defn ray-at [r t]\n  (vec3-add (get r :origin) (vec3-scale (get r :direction) t)))\n\n(defn reflectance [cosine ref-idx]\n  (let [r (/ (- 1.0 ref-idx)\n             (+ 1.0 ref-idx))\n        r2 (* r r)]\n    (* (+ r2 (- 1.0 r2))\n       (pow (- 1.0 cosine) 5.0))))\n\n(defn hit-info-create [point normal t material front-face?]\n  {:point point\n   :normal normal\n   :t t\n   :material material\n   :front-face? front-face?})\n\n(defn hit-sphere [hittable t-min t-max ray]\n  (let [center (get hittable :center)\n        radius (get hittable :radius)\n        oc (vec3-sub (get ray :origin) center)\n        a (vec3-length-squared (get ray :direction))\n        half-b (vec3-dot oc (get ray :direction))\n        c (- (vec3-length-squared oc) (* radius radius))\n        discriminant (- (* half-b half-b) (* a c))]\n    (if (< discriminant 0)\n      nil\n      (let [sqrt-d (sqrt discriminant)\n            root (let [root (/ (- (- 0 half-b) sqrt-d) a)]\n                   (if (either (< root t-min) (< t-max root))\n                     (/ (+ (- 0 half-b) sqrt-d) a)\n                     root))]\n        (if (either (< root t-min) (< t-max root))\n          nil\n          (let [point (ray-at ray root)\n                outward-normal (vec3-div (vec3-sub point center) radius)\n                front-face? (< (vec3-dot (get ray :direction) outward-normal) 0.0)]\n            (hit-info-create point\n                             (if front-face?\n                               outward-normal\n                               (vec3-sub (vec3-create 0 0 0) outward-normal))\n                             root\n                             (get hittable :material)\n                             front-face?)))))))\n\n(defn hit-all [t-min t-max ray hittables]\n  (get (reduce (fn hit-all-reduce [acc hittable]\n                 (let [hit-info (hit-sphere hittable\n                                            t-min\n                                            (get acc :closest-so-far)\n                                            ray)]\n                   (if (some? hit-info)\n                     (assoc (assoc acc :hit-info hit-info)\n                            :closest-so-far (get hit-info :t))\n                     acc)))\n               {:closest-so-far t-max\n                :hit-info nil}\n               hittables)\n       :hit-info))\n\n(defn scatter-lambertian [ray hit-info]\n  (let [scatter-direction (let [dir (vec3-add (get hit-info :normal)\n                                              (vec3-rand-unit-in-sphere))]\n                            (if (vec3-near-zero? dir)\n                              (get hit-info :normal)\n                              dir))\n        scattered (ray-create (get hit-info :point) scatter-direction)\n        attenuation (get (get hit-info :material) :albedo)]\n    {:ray scattered\n     :attenuation attenuation}))\n\n(defn scatter-metal [ray hit-info]\n  (let [material (get hit-info :material)\n        reflected (vec3-reflect (vec3-normalize (get ray :direction))\n                                (get hit-info :normal))\n        scattered (ray-create (get hit-info :point)\n                              (vec3-add reflected\n                                        (vec3-scale (vec3-rand-unit-in-sphere)\n                                                    (get material :fuzz))))\n        attenuation (get material :albedo)\n        res {:ray scattered\n             :attenuation attenuation}]\n    (if (< 0 (vec3-dot (get scattered :direction) (get hit-info :normal)))\n      res\n      nil)))\n\n(defn scatter-dialetric [ray hit-info]\n  (let [material (get hit-info :material)\n        attenuation (vec3-create 1 1 1)\n        index-of-refraction (get material :index-of-refraction)\n        refraction-ratio (if (get hit-info :front-face?)\n                           (/ 1.0 index-of-refraction)\n                           index-of-refraction)\n        unit-direction (vec3-normalize (get ray :direction))\n\n        normal (get hit-info :normal)\n        cos-theta (min (vec3-dot (vec3-sub (vec3-create 0 0 0)\n                                           unit-direction)\n                                 normal)\n                       1.0)\n        sin-theta (sqrt (- 1.0 (* cos-theta cos-theta)))\n        cannot-refract? (< 1.0 (* refraction-ratio sin-theta))\n        direction (if (either cannot-refract?\n                              (< (rand) (reflectance cos-theta refraction-ratio)))\n                    (vec3-reflect unit-direction normal)\n                    (vec3-refract unit-direction normal refraction-ratio))]\n    {:ray (ray-create (get hit-info :point) direction)\n     :attenuation attenuation}))\n\n(defn ray-cast [r max-ray-bounces hittables]\n  (if (< max-ray-bounces 0)\n    (vec3-create 0 0 0)\n    (let [normalize-direction (vec3-normalize (get r :direction))\n          t (* 0.5 (+ (get normalize-direction :g) 1.0))\n          hit-info (hit-all 0.001 99999999 r hittables)]\n      (if (some? hit-info)\n        (let [material (get hit-info :material)\n              scatter-fn (get material :scatter)\n              scattered (scatter-fn r hit-info)]\n          (if (some? scattered)\n            (vec3-mul (ray-cast (get scattered :ray)\n                                (dec max-ray-bounces)\n                                hittables)\n                      (get scattered :attenuation))\n            (vec3-create 0 0 0)))\n        (vec3-add (vec3-scale (vec3-create 1.0 1.0 1.0) (- 1.0 t))\n                  (vec3-scale (vec3-create 0.5 0.7 1.0) t))))))\n\n(defn rand-scene! []\n  (reduce (fn rand-scene-reduce [acc i]\n            (let [x (- (mod i 21) 10)\n                  z (- (/ i 21) 6)\n                  choose-mat (rand)\n                  center (vec3-create (+ x (* 0.9 (rand)))\n                                      0.2\n                                      (+ z (* 0.9 (rand))))]\n              (if (< 0.9 (vec3-length (vec3-sub center (vec3-create 4 0.2 0))))\n                (conj acc (if (< choose-mat 0.8)\n                            {:center center\n                             :radius 0.2\n                             :material {:albedo (vec3-mul (vec3-rand) (vec3-rand))\n                                        :scatter scatter-lambertian}}\n                            (if (< choose-mat 0.95)\n                              {:center center\n                               :radius 0.2\n                               :material {:albedo (vec3-rand+clamp 0.5 1)\n                                          :fuzz (rand-real 0 0.5)\n                                          :scatter scatter-metal}}\n                              {:center center\n                               :radius 0.2\n                               :material {:index-of-refraction 1.5\n                                          :scatter scatter-dialetric}})))\n                acc)))\n          [{:center (vec3-create 0 -1000 0)\n            :radius 1000\n            :material {:albedo (vec3-create 0.5 0.5 0.5)\n                       :scatter scatter-lambertian}}\n           {:center (vec3-create -4 1 0)\n            :radius 1\n            :material {:albedo (vec3-create 0.4 0.2 0.1)\n                       :scatter scatter-lambertian}}\n           {:center (vec3-create 0 1 0)\n            :radius 1\n            :material {:index-of-refraction 1.5\n                       :scatter scatter-dialetric}}\n           {:center (vec3-create 4 1 0)\n            :radius 1\n            :material {:albedo (vec3-create 0.7 0.6 0.5)\n                       :fuzz 0\n                       :scatter scatter-metal}}]\n          (range 0 200)))\n\n(defn -main []\n  (do ;prof/profile\n      (let [aspect-ratio (/ 3.0 2.0)\n            image-width 10\n            image-height (int (/ image-width aspect-ratio))\n            samples-per-pixel 2\n            max-ray-bounces 10\n\n            look-from (vec3-create 13 2 3)\n            look-at (vec3-create 0 0 0)\n            ;look-from (vec3-create 3 3 2)\n            ;look-at (vec3-create 0 0 -1)\n            aperture 0.1\n            ;aperture 2.0\n            lens-radius (/ aperture 2)\n            focus-distance 10\n            ;focus-distance (vec3-length (vec3-sub look-from look-at))\n            camera-up (vec3-create 0 1 0)\n            field-of-view 20\n            field-of-view-theta (degrees->radians field-of-view)\n            viewport-height (* 2 (tan (/ field-of-view-theta 2.0)))\n            viewport-width (* aspect-ratio viewport-height)\n            _ (vec3-sub look-from look-at)\n            camera-w (vec3-normalize (vec3-sub look-from look-at))\n            camera-u (vec3-normalize (vec3-cross camera-up camera-w))\n            camera-v (vec3-cross camera-w camera-u)\n\n            origin look-from\n            horizontal (vec3-scale camera-u (* viewport-width focus-distance))\n            vertical (vec3-scale camera-v (* viewport-height focus-distance))\n            lower-left-corner (vec3-sub (vec3-sub (vec3-sub origin (vec3-div horizontal 2))\n                                                  (vec3-div vertical 2))\n                                        (vec3-scale camera-w focus-distance))\n\n            hittables (rand-scene!)\n            y-counter (reverse (range image-height))\n            x-counter (range image-width)\n            sample-counter (range samples-per-pixel)]\n\n        (println \"P3\")\n        (print+space image-width) (println image-height)\n        (println 255)\n        (doseq [y y-counter]\n          (doseq [x x-counter]\n            (let [sample (reduce (fn main-reduce [acc _sample-count]\n                                   (let [u (/ (+ x (rand)) (- image-width 1))\n                                         v (/ (+ y (rand)) (- image-height 1))\n                                         rd (vec3-scale (vec3-rand-in-unit-disk) lens-radius)\n                                         offset (vec3-create 0 0 0)\n                                         ray (ray-create (vec3-add origin offset)\n                                                         (vec3-sub (vec3-add (vec3-add lower-left-corner\n                                                                                       (vec3-scale horizontal u))\n                                                                             (vec3-scale vertical v))\n                                                                   (vec3-sub origin offset)))]\n                                     (vec3-add acc (ray-cast ray max-ray-bounces hittables))))\n                                 (vec3-create 0 0 0)\n                                 sample-counter)]\n              (vec3-print sample samples-per-pixel))))\n\n        (println \"meow\"))))\n\n(jank.perf/benchmark {:label \"ray\"} (-main))\n;(-main)\n"
        },
        {
          "name": "shell.nix",
          "type": "blob",
          "size": 0.7177734375,
          "content": "{\n  pkgs ? import (builtins.fetchTarball {\n    url = \"https://github.com/NixOS/nixpkgs/archive/28b5b8af91ffd2623e995e20aee56510db49001a.tar.gz\";\n    sha256 = \"09zhy7bj0bd72r8dqpbrnpgapfkg5h91samrv1v8j0qxvv5kgv6n\";\n  }) { },\n}:\n\npkgs.mkShell {\n  buildInputs = with pkgs; [\n    # Build deps.\n    cmake\n    ninja\n    pkg-config\n    clang\n\n    # Dev tools.\n    entr\n    gcovr\n    lcov\n    git\n    shellcheck\n    # For clangd\n    llvm\n\n    # Libs.\n    boehmgc\n    # TODO: CMake fails to find boost::preprocessor.\n    boost\n    cli11\n    fmt\n    immer\n    # TODO: Doesn't have a nix pkg.\n    #libzippp\n    magic-enum\n    readline\n  ];\n  shellHook =\n  ''\n  export CC=\"${pkgs.clang}/bin/clang\"\n  export CXX=\"${pkgs.clang}/bin/clang++\"\n  '';\n}\n"
        },
        {
          "name": "vim",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}