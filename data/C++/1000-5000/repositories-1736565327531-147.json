{
  "metadata": {
    "timestamp": 1736565327531,
    "page": 147,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "daquexian/onnx-simplifier",
      "stars": 3929,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.7666015625,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that donâ€™t work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n.idea/\n*.onnx\n*.onnx.data\n\ncompile_commands.json\ntemp*.py\ntest*.py\n\n.setuptools-cmake-build/\nonnxsim/version.py\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.3486328125,
          "content": "[submodule \"onnxsim/third_party/onnxruntime\"]\n\tpath = third_party/onnxruntime\n\turl = git@github.com:microsoft/onnxruntime.git\n[submodule \"onnxsim/third_party/onnx-optimizer\"]\n\tpath = third_party/onnx-optimizer\n\turl = git@github.com:onnx/optimizer.git\n[submodule \"third_party/pybind11\"]\n\tpath = third_party/pybind11\n\turl = git@github.com:pybind/pybind11.git\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 3.005859375,
          "content": "cmake_minimum_required(VERSION 3.22)\n\n# For std::filesystem in onnx optimizer\n# Must be a cache variable and be set before project()\n# Reference: https://cmake.org/cmake/help/latest/variable/CMAKE_OSX_DEPLOYMENT_TARGET.html\n# It can be a normal variable if policy CMP0126 is set to NEW.\nset(CMAKE_OSX_DEPLOYMENT_TARGET 10.15 CACHE STRING \"Minimum OS X deployment version\")\n\nproject(onnxsim CXX)\n\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\nset(CMAKE_CXX_STANDARD 17)\n\noption(ONNXSIM_PYTHON \"\" OFF)\noption(ONNXSIM_BUILTIN_ORT \"\" ON)\noption(ONNXSIM_WASM_NODE \"For node (enable NODERAWFS etc.)\" OFF)\n\nif (ONNXSIM_PYTHON AND EMSCRIPTEN)\n  message(STATUS \"python and emscripten cannot be built at the same time\")\nendif()\n\nif (NOT ONNXSIM_BUILTIN_ORT AND EMSCRIPTEN)\n  message(STATUS \"emscripten needs builtin ort\")\nendif()\n\nadd_compile_options(\n  $<$<COMPILE_LANGUAGE:CXX>:$<$<CXX_COMPILER_ID:GNU>:-fdiagnostics-color=always>>\n  $<$<COMPILE_LANGUAGE:CXX>:$<$<CXX_COMPILER_ID:Clang>:-fcolor-diagnostics>>\n  $<$<COMPILE_LANGUAGE:CUDA>:$<$<CUDA_COMPILER_ID:Clang>:-fcolor-diagnostics>>)\nif (WIN32)\n  add_compile_definitions(NOMINMAX)\nendif()\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\n\nif (ONNXSIM_BUILTIN_ORT)\n  include(cmake/build_ort.cmake)\n  if (EMSCRIPTEN)\n    set(ORT_NAME onnxruntime_webassembly)\n  else()\n    set(ORT_NAME onnxruntime)\n  endif()\nendif()\n\n# configure onnx-optimizer after onnxruntime, because they both depend on onnx and onnxruntime has its own flags for onnx\nadd_subdirectory(third_party/onnx-optimizer)\n\nadd_library(onnxsim onnxsim/onnxsim.cpp)\nif (ONNXSIM_BUILTIN_ORT)\n  target_include_directories(onnxsim PRIVATE third_party/onnxruntime/onnxruntime third_party/onnxruntime/include/onnxruntime)\nendif()\ntarget_include_directories(onnxsim PUBLIC onnxsim)\nif (NOT ONNXSIM_BUILTIN_ORT)\n  target_compile_definitions(onnxsim PUBLIC NO_BUILTIN_ORT)\nendif()\nif (EMSCRIPTEN)\n  target_link_libraries(onnxsim ${ORT_NAME} onnx_optimizer)\nelse()\n  target_link_libraries(onnxsim ${ORT_NAME} onnx_optimizer onnx)\nendif()\n\nadd_executable(onnxsim_bin onnxsim/bin/onnxsim_bin.cpp onnxsim/bin/onnxsim_option.cpp)\ntarget_link_libraries(onnxsim_bin onnxsim)\nset_target_properties(onnxsim_bin PROPERTIES OUTPUT_NAME onnxsim)\nif (EMSCRIPTEN)\n  if (ONNXSIM_WASM_NODE)\n    set_target_properties(onnxsim_bin PROPERTIES LINK_FLAGS \"-s NODERAWFS=1 -s ALLOW_MEMORY_GROWTH=1 -s ASSERTIONS=2 -s SAFE_HEAP=1 -s STACK_OVERFLOW_CHECK=1 -sNO_DISABLE_EXCEPTION_CATCHING\")\n  else()\n    set_target_properties(onnxsim_bin PROPERTIES LINK_FLAGS \"-s ALLOW_MEMORY_GROWTH=1 -s EXIT_RUNTIME=1 -s FORCE_FILESYSTEM=1 -s MODULARIZE=1 -s 'EXPORT_NAME=\\\"create_onnxsim\\\"' -s 'EXPORTED_RUNTIME_METHODS=[FS,ccall,cwrap,callMain]' -s EXPORTED_FUNCTIONS=[_main]\")\n  endif()\nendif()\n\nif (ONNXSIM_PYTHON)\n  add_subdirectory(third_party/pybind11)\n  pybind11_add_module(onnxsim_cpp2py_export onnxsim/cpp2py_export.cc)\n  target_link_libraries(onnxsim_cpp2py_export PRIVATE onnxsim)\n  if(NOT \"${PY_EXT_SUFFIX}\" STREQUAL \"\")\n    set_target_properties(onnxsim_cpp2py_export PROPERTIES SUFFIX ${PY_EXT_SUFFIX})\n  endif()\nendif()\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0771484375,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [2019] [daquexian]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.337890625,
          "content": "recursive-include onnxsim *.h *.hpp *.c *.cc *.cpp *.proto\nrecursive-include cmake *\nrecursive-include third_party *\nrecursive-exclude third_party/onnxruntime *\nrecursive-exclude third_party/onnx-optimizer/build *\nrecursive-exclude third_party/onnx/build *\nrecursive-exclude third_party/onnx/onnx/backend *\ninclude CMakeLists.txt\ninclude VERSION\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.2529296875,
          "content": "# ONNX Simplifier\n\n[![PyPI version](https://img.shields.io/pypi/v/onnx-simplifier.svg)](https://pypi.python.org/pypi/onnx-simplifier/)\n[![PyPI pyversions](https://img.shields.io/pypi/pyversions/onnx-simplifier.svg)](https://pypi.python.org/pypi/onnx-simplifier/)\n[![PyPI license](https://img.shields.io/pypi/l/onnx-simplifier.svg)](https://pypi.python.org/pypi/onnx-simplifier/)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://github.com/daquexian/onnx-simplifier/pulls)\n\n_ONNX is great, but sometimes too complicated._\n\n## Background\n\nOne day I wanted to export the following simple reshape operation to ONNX:\n\n```python\nimport torch\n\n\nclass JustReshape(torch.nn.Module):\n    def __init__(self):\n        super(JustReshape, self).__init__()\n\n    def forward(self, x):\n        return x.view((x.shape[0], x.shape[1], x.shape[3], x.shape[2]))\n\n\nnet = JustReshape()\nmodel_name = 'just_reshape.onnx'\ndummy_input = torch.randn(2, 3, 4, 5)\ntorch.onnx.export(net, dummy_input, model_name, input_names=['input'], output_names=['output'])\n```\n\nThe input shape in this model is static, so what I expected is\n\n![simple_reshape](imgs/simple_reshape.png)\n\nHowever, I got the following complicated model instead:\n\n![complicated_reshape](imgs/complicated_reshape.png)\n\n## Our solution\n\nONNX Simplifier is presented to simplify the ONNX model. It infers the whole computation graph\nand then replaces the redundant operators with their constant outputs (a.k.a. constant folding).\n\n### Web version\n\nWe have published ONNX Simplifier on [convertmodel.com](https://www.convertmodel.com/#input=onnx&output=onnx). It works out of the box and **doesn't need any installation**. Note that it runs in the browser locally and your model is completely safe.\n\n### Python version\n\n\n```\npip3 install -U pip && pip3 install onnxsim\n```\n\nThen\n\n```\nonnxsim input_onnx_model output_onnx_model\n```\n\nFor more advanced features, try the following command for help message\n\n```\nonnxsim -h\n```\n\n## Demonstration\n\nAn overall comparison between\n[a complicated model](https://github.com/JDAI-CV/DNNLibrary/issues/17#issuecomment-455934190)\nand its simplified version:\n\n![Comparison between old model and new model](imgs/comparison.png)\n\n## In-script workflow\n\nIf you would like to embed ONNX simplifier python package in another script, it is just that simple.\n\n```python\nimport onnx\nfrom onnxsim import simplify\n\n# load your predefined ONNX model\nmodel = onnx.load(filename)\n\n# convert model\nmodel_simp, check = simplify(model)\n\nassert check, \"Simplified ONNX model could not be validated\"\n\n# use model_simp as a standard ONNX model object\n```\n\nYou can see more details of the API in [onnxsim/onnx_simplifier.py](onnxsim/onnx_simplifier.py)\n\n## Projects Using ONNX Simplifier\n\n* [MXNet](https://mxnet.apache.org/versions/1.9.1/api/python/docs/tutorials/deploy/export/onnx.html#Simplify-the-exported-ONNX-model)\n* [MMDetection](https://github.com/open-mmlab/mmdetection)\n* [YOLOv5](https://github.com/ultralytics/yolov5)\n* [ncnn](https://github.com/Tencent/ncnn)\n* ...\n\n## Chat\n\nWe created a Chinese QQ group for ONNX!\n\nONNX QQ Group (Chinese): 1021964010, verification code: nndab. Welcome to join!\n\nFor English users, I'm active on the [ONNX Slack](https://github.com/onnx/onnx#discuss). You can find and chat with me (daquexian) there.\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.0068359375,
          "content": "0.4.36\n"
        },
        {
          "name": "build_wasm.sh",
          "type": "blob",
          "size": 0.662109375,
          "content": "#!/usr/bin/env bash\nset -uex\n\n# Check if emcmake is available\ncommand -v emcmake > /dev/null\n\nSCRIPT_DIR=$( cd -- \"$( dirname -- \"${BASH_SOURCE[0]}\" )\" &> /dev/null && pwd )\nWITH_NODE_RAW_FS=${1:-OFF}\n\ncd $SCRIPT_DIR\npushd third_party/onnxruntime/cmake/external/protobuf/cmake\nmkdir -p build\ncd build\ncmake -Dprotobuf_BUILD_TESTS=OFF -Dprotobuf_WITH_ZLIB_DEFAULT=OFF -Dprotobuf_BUILD_SHARED_LIBS=OFF -GNinja ..\nninja protoc\nPROTOC=`pwd`/protoc\npopd\n\nmkdir -p build-wasm-node-$WITH_NODE_RAW_FS\ncd build-wasm-node-$WITH_NODE_RAW_FS\nemcmake cmake -DONNX_CUSTOM_PROTOC_EXECUTABLE=$PROTOC -DONNXSIM_WASM_NODE=$WITH_NODE_RAW_FS -GNinja -DCMAKE_BUILD_TYPE=Release ..\nninja onnxsim_bin\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "imgs",
          "type": "tree",
          "content": null
        },
        {
          "name": "onnxsim",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.080078125,
          "content": "onnx\nonnxoptimizer >= 0.2.5\nonnxruntime >= 1.6.0\nprotobuf >= 3.7.0\nrich != 12.1.0\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 10.83984375,
          "content": "from distutils.spawn import find_executable\nfrom distutils import sysconfig, log\nimport setuptools\nimport setuptools.command.build_py\nimport setuptools.command.develop\nimport setuptools.command.build_ext\n\nfrom collections import namedtuple\nfrom contextlib import contextmanager\nimport glob\nimport os\nimport shlex\nimport subprocess\nimport sys\nimport platform\nfrom textwrap import dedent\nimport multiprocessing\nimport re\n\n\nTOP_DIR = os.path.realpath(os.path.dirname(__file__))\nSRC_DIR = os.path.join(TOP_DIR, 'onnxsim')\nCMAKE_BUILD_DIR = os.path.join(TOP_DIR, '.setuptools-cmake-build')\n\nWINDOWS = (os.name == 'nt')\nMACOS = sys.platform.startswith(\"darwin\")\n\nCMAKE = find_executable('cmake')\n\ninstall_requires = []\nsetup_requires = []\n\nUSE_MSVC_STATIC_RUNTIME = bool(os.getenv('USE_MSVC_STATIC_RUNTIME', '0') == '1')\nONNX_ML = not bool(os.getenv('ONNX_ML') == '0')\nONNX_VERIFY_PROTO3 = bool(os.getenv('ONNX_VERIFY_PROTO3') == '1')\nONNX_NAMESPACE = os.getenv('ONNX_NAMESPACE', 'onnx')\nONNX_BUILD_TESTS = bool(os.getenv('ONNX_BUILD_TESTS') == '1')\nONNX_OPT_USE_SYSTEM_PROTOBUF = bool(os.getenv('ONNX_OPT_USE_SYSTEM_PROTOBUF', '0') == '1')\n\nDEBUG = bool(os.getenv('DEBUG'))\nCOVERAGE = bool(os.getenv('COVERAGE'))\n\ntry:\n    version = subprocess.check_output(['git', 'describe', '--tags', '--abbrev=0'],\n                                      cwd=TOP_DIR).decode('ascii').strip()\n    if version[0] == 'v':\n        version = version[1:]\nexcept (OSError, subprocess.CalledProcessError):\n    with open(os.path.join(TOP_DIR, 'VERSION')) as ver_file:\n        version = ver_file.read().strip()\n\ntry:\n    git_version = subprocess.check_output(['git', 'rev-parse', 'HEAD'],\n                                          cwd=TOP_DIR).decode('ascii').strip()\nexcept (OSError, subprocess.CalledProcessError):\n    git_version = None\n\nif os.getenv('ONNXSIM_SDIST') is not None:\n    version = '0.0.0'\n    git_version = None\n\nVersionInfo = namedtuple('VersionInfo', ['version', 'git_version'])(\n    version=version,\n    git_version=git_version\n)\n\nassert CMAKE, 'Could not find \"cmake\" executable!'\n\n@contextmanager\ndef cd(path):\n    if not os.path.isabs(path):\n        raise RuntimeError('Can only cd to absolute path, got: {}'.format(path))\n    orig_path = os.getcwd()\n    os.chdir(path)\n    try:\n        yield\n    finally:\n        os.chdir(orig_path)\n\n\nclass ONNXCommand(setuptools.Command):\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n\nclass create_version(ONNXCommand):\n    def run(self):\n        with open(os.path.join(SRC_DIR, 'version.py'), 'w') as f:\n            f.write(dedent('''\\\n            # This file is generated by setup.py. DO NOT EDIT!\n\n            version = '{version}'\n            git_version = '{git_version}'\n            '''.format(**dict(VersionInfo._asdict()))))\n\n\nclass cmake_build(setuptools.Command):\n    \"\"\"\n    Compiles everything when `python setupmnm.py build` is run using cmake.\n\n    Custom args can be passed to cmake by specifying the `CMAKE_ARGS`\n    environment variable.\n\n    The number of CPUs used by `make` can be specified by passing `-j<ncpus>`\n    to `setup.py build`.  By default all CPUs are used.\n    \"\"\"\n    user_options = [\n        (str('jobs='), str('j'), str('Specifies the number of jobs to use with make'))\n    ]\n\n    built = False\n\n    def initialize_options(self):\n        self.jobs = None\n\n    def finalize_options(self):\n        self.set_undefined_options('build', ('parallel', 'jobs'))\n        if self.jobs is None and os.getenv(\"MAX_JOBS\") is not None:\n            self.jobs = os.getenv(\"MAX_JOBS\")\n        self.jobs = multiprocessing.cpu_count() if self.jobs is None else int(self.jobs)\n\n    def run(self):\n        if cmake_build.built:\n            return\n        cmake_build.built = True\n        if not os.path.exists(CMAKE_BUILD_DIR):\n            os.makedirs(CMAKE_BUILD_DIR)\n\n        with cd(CMAKE_BUILD_DIR):\n            build_type = 'Release'\n            # configure\n            cmake_args = [\n                CMAKE,\n                '-DPython_INCLUDE_DIR={}'.format(sysconfig.get_python_inc()),\n                '-DPython_EXECUTABLE={}'.format(sys.executable),\n                # For pybind11\n                '-DPYTHON_EXECUTABLE={}'.format(sys.executable),\n                '-DBUILD_ONNX_PYTHON=OFF',\n                '-DONNXSIM_PYTHON=ON',\n                '-DONNXSIM_BUILTIN_ORT=OFF',\n                '-DONNX_USE_LITE_PROTO=OFF',\n                '-DCMAKE_EXPORT_COMPILE_COMMANDS=ON',\n                '-DONNX_NAMESPACE={}'.format(ONNX_NAMESPACE),\n                '-DPY_EXT_SUFFIX={}'.format(\n                    sysconfig.get_config_var('EXT_SUFFIX') or ''),\n                '-DONNX_OPT_USE_SYSTEM_PROTOBUF={}'.format(\n                    'ON' if ONNX_OPT_USE_SYSTEM_PROTOBUF else 'OFF'),\n            ]\n            if COVERAGE:\n                cmake_args.append('-DONNX_COVERAGE=ON')\n            if COVERAGE or DEBUG:\n                # in order to get accurate coverage information, the\n                # build needs to turn off optimizations\n                build_type = 'Debug'\n            cmake_args.append('-DCMAKE_BUILD_TYPE=%s' % build_type)\n            if WINDOWS:\n                cmake_args.extend([\n                    # we need to link with libpython on windows, so\n                    # passing python version to window in order to\n                    # find python in cmake\n                    '-DPY_VERSION={}'.format('{0}.{1}'.format(* \\\n                                                              sys.version_info[:2])),\n                ])\n                if USE_MSVC_STATIC_RUNTIME:\n                    cmake_args.append('-DONNX_USE_MSVC_STATIC_RUNTIME=ON')\n                if platform.architecture()[0] == '64bit':\n                    cmake_args.extend(['-A', 'x64', '-T', 'host=x64'])\n                else:\n                    cmake_args.extend(['-A', 'Win32', '-T', 'host=x86'])\n            if MACOS:\n                # Cross-compile support for macOS - respect ARCHFLAGS if set\n                archs = re.findall(r\"-arch (\\S+)\", os.environ.get(\"ARCHFLAGS\", \"\"))\n                if archs:\n                    cmake_args += [\"-DCMAKE_OSX_ARCHITECTURES={}\".format(\";\".join(archs))]\n            if ONNX_ML:\n                cmake_args.append('-DONNX_ML=1')\n            if ONNX_VERIFY_PROTO3:\n                cmake_args.append('-DONNX_VERIFY_PROTO3=1')\n            if ONNX_BUILD_TESTS:\n                cmake_args.append('-DONNX_BUILD_TESTS=ON')\n            if 'CMAKE_ARGS' in os.environ:\n                extra_cmake_args = shlex.split(os.environ['CMAKE_ARGS'])\n                # prevent crossfire with downstream scripts\n                del os.environ['CMAKE_ARGS']\n                log.info('Extra cmake args: {}'.format(extra_cmake_args))\n                cmake_args.extend(extra_cmake_args)\n            cmake_args.append(TOP_DIR)\n            print(f\"Run command {cmake_args}\")\n            subprocess.check_call(cmake_args)\n\n            build_args = [CMAKE, '--build', os.curdir, '--target onnxsim_cpp2py_export']\n            if WINDOWS:\n                build_args.extend(['--config', build_type])\n                build_args.extend(['--', '/maxcpucount:{}'.format(self.jobs)])\n            else:\n                build_args.extend(['--', '-j', str(self.jobs)])\n            print(f\"Run command {build_args}\")\n            subprocess.check_call(build_args)\n\n\nclass build_py(setuptools.command.build_py.build_py):\n    def run(self):\n        self.run_command('create_version')\n        return setuptools.command.build_py.build_py.run(self)\n\n\nclass develop(setuptools.command.develop.develop):\n    def run(self):\n        self.run_command('build_py')\n        setuptools.command.develop.develop.run(self)\n\n\nclass build_ext(setuptools.command.build_ext.build_ext):\n    def run(self):\n        self.run_command('cmake_build')\n        setuptools.command.build_ext.build_ext.run(self)\n\n    def build_extensions(self):\n        for ext in self.extensions:\n            fullname = self.get_ext_fullname(ext.name)\n            filename = os.path.basename(self.get_ext_filename(fullname))\n\n            lib_path = CMAKE_BUILD_DIR\n            if os.name == 'nt':\n                debug_lib_dir = os.path.join(lib_path, \"Debug\")\n                release_lib_dir = os.path.join(lib_path, \"Release\")\n                if os.path.exists(debug_lib_dir):\n                    lib_path = debug_lib_dir\n                elif os.path.exists(release_lib_dir):\n                    lib_path = release_lib_dir\n            src = os.path.join(lib_path, filename)\n            dst_dir = os.path.join(os.path.realpath(\n                self.build_lib), \"onnxsim\")\n            dst = os.path.join(dst_dir, filename)\n            os.makedirs(dst_dir, exist_ok=True)\n            self.copy_file(src, dst)\n\n\ncmdclass = {\n    'create_version': create_version,\n    'cmake_build': cmake_build,\n    'build_ext': build_ext,\n    'build_py': build_py,\n    'develop': develop,\n}\n\next_modules = [\n    setuptools.Extension(\n        name=str('onnxsim.onnxsim_cpp2py_export'),\n        sources=[])\n]\n\n# no need to do fancy stuff so far\npackages = setuptools.find_packages()\n\n# Though we depend on onnxruntime, it has three different packages:\n# onnxruntime, onnxruntime-gpu and onnxruntime-noopenmp.\n# The solution is, we publish two packages, a wheel named onnxsim-no-ort\n# and a sdist package named onnxsim, onnxsim depends on onnxsim-no-ort,\n# and also check if one of onnxruntime packages is installed, and depends\n# on onnxruntime when no existing installed packages.\ninstall_requires.extend([\n    'onnx',\n    'rich',\n])\n\nsetup_requires.append('pytest-runner')\n\n# read the contents of your README file\nfrom pathlib import Path\nthis_directory = Path(__file__).parent\nlong_description = (this_directory / \"README.md\").read_text()\n\nsetuptools.setup(\n    name=os.getenv(\"ONNXSIM_PKG_NAME\", \"onnxsim\"),\n    version=VersionInfo.version,\n    description='Simplify your ONNX model',\n    ext_modules=ext_modules,\n    cmdclass=cmdclass,\n    packages=packages,\n    license='Apache License v2.0',\n    include_package_data=True,\n    install_requires=install_requires,\n    setup_requires=setup_requires,\n    author='ONNX Simplifier Authors',\n    author_email='daquexian566@gmail.com',\n    url='https://github.com/daquexian/onnx-simplifier',\n    keywords='deep-learning ONNX',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python :: 3 :: Only',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.11',\n        'Topic :: Scientific/Engineering',\n        'Topic :: Software Development'\n    ],\n    python_requires='>=3.7',\n    entry_points={\n        'console_scripts': [\n            'onnxsim=onnxsim:main',\n        ],\n    },\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}