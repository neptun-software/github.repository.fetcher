{
  "metadata": {
    "timestamp": 1736565575571,
    "page": 448,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "NASA-SW-VnV/ikos",
      "stars": 2837,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.416015625,
          "content": "---\nBasedOnStyle: Google\n---\nLanguage: Cpp\nSpacesInAngles: true\nAccessModifierOffset: -2\nDerivePointerAlignment: false\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: Inline\nBinPackParameters: false\nBinPackArguments: false\nPenaltyBreakBeforeFirstCallParameter: 5000\nPenaltyReturnTypeOnItsOwnLine: 500\nSpacesBeforeTrailingComments: 1\nIncludeBlocks: Preserve\n---\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 3.5205078125,
          "content": "Checks: '*,-cert-dcl03-c,-cppcoreguidelines-avoid-magic-numbers,-cppcoreguidelines-non-private-member-variables-in-classes,-cppcoreguidelines-pro-bounds-array-to-pointer-decay,-fuchsia-default-arguments,-fuchsia-multiple-inheritance,-fuchsia-overloaded-operator,-fuchsia-statically-constructed-objects,-google-runtime-references,-hicpp-no-array-decay,-hicpp-static-assert,-llvm-header-guard,-misc-non-private-member-variables-in-classes,-misc-static-assert,-modernize-use-default-member-init,-readability-const-return-type,-readability-else-after-return,-readability-magic-numbers,-readability-named-parameter'\nCheckOptions:\n  - { key: readability-identifier-naming.NamespaceCase,         value: lower_case }\n  - { key: readability-identifier-naming.TypeAliasCase,         value: CamelCase  }\n  - { key: readability-identifier-naming.TemplateParameterCase, value: CamelCase  }\n  - { key: readability-identifier-naming.TypedefCase,           value: CamelCase  }\n  - { key: readability-identifier-naming.ClassCase,             value: CamelCase  }\n  - { key: readability-identifier-naming.StructCase,            value: CamelCase  }\n  - { key: readability-identifier-naming.EnumCase,              value: CamelCase  }\n  - { key: readability-identifier-naming.UnionCase,             value: CamelCase  }\n  - { key: readability-identifier-naming.MemberCase,            value: lower_case }\n  - { key: readability-identifier-naming.PrivateMemberPrefix,   value: _          }\n  - { key: readability-identifier-naming.ProtectedMemberPrefix, value: _          }\n  - { key: readability-identifier-naming.FunctionCase,          value: lower_case }\n  - { key: readability-identifier-naming.MethodCase,            value: lower_case }\n  - { key: readability-identifier-naming.VariableCase,          value: lower_case }\n  - { key: readability-identifier-naming.GlobalConstantCase,    value: CamelCase  }\n  - { key: readability-identifier-naming.StaticVariableCase,    value: CamelCase  }\n  - { key: readability-identifier-naming.GlobalVariableCase,    value: CamelCase  }\n  - { key: modernize-use-default-member-init.UseAssignment,     value: 1          }\n# Reasons for disabling checks:\n# * cert-dcl03-c: It generates false positives with ikos_unreachable()\n# * cppcoreguidelines-avoid-magic-numbers: It generates too many warnings\n# * cppcoreguidelines-non-private-member-variables-in-classes: It generates warnings for protected members of classes\n# * cppcoreguidelines-pro-bounds-array-to-pointer-decay: It generates warnings for ikos_assert_msg()\n# * fuchsia-default-arguments: We allow default arguments\n# * fuchsia-multiple-inheritance: We allow multiple inheritance\n# * fuchsia-overloaded-operator: We allow overloads of operators\n# * fuchsia-statically-constructed-objects: We allow static objects\n# * google-runtime-references: We allow output parameters as reference\n# * hicpp-no-array-decay: It generates warnings for ikos_assert_msg()\n# * hicpp-static-assert: It generates false positives with ikos_unreachable()\n# * llvm-header-guard: We use #pragma once\n# * misc-non-private-member-variables-in-classes: It generates warnings for public members of structures\n# * misc-static-assert: It generates false positives with ikos_unreachable()\n# * modernize-use-default-member-init: We prefer to explicitly initialize member variables\n# * readability-const-return-type: It generates contradicting warnings with check cert-dcl21-cpp\n# * readability-else-after-return: We allow else after return\n# * readability-magic-numbers: It generates too many warnings\n# * readability-named-parameter: We allow unnamed parameters\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.287109375,
          "content": "build/\ninstall/\n!doc/install/\n\n# Editors\n*.swp\n*~\n.ycm_extra_conf.py\n\n# Python\n*.pyc\n__pycache__\n\n# Object files\n*.o\n*.ko\n*.obj\n*.elf\n\n# Libraries\n*.lib\n*.a\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n\n# Executables\n*.exe\n*.out\n*.app\n*.i*86\n*.x86_64\n*.hex\n\n# IKOS\n*.ar\n*.db\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 3.9150390625,
          "content": "#*******************************************************************************\n#\n# Author: Maxime Arthaud\n#\n# Contact: ikos@lists.nasa.gov\n#\n# Notices:\n#\n# Copyright (c) 2011-2019 United States Government as represented by the\n# Administrator of the National Aeronautics and Space Administration.\n# All Rights Reserved.\n#\n# Disclaimers:\n#\n# No Warranty: THE SUBJECT SOFTWARE IS PROVIDED \"AS IS\" WITHOUT ANY WARRANTY OF\n# ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED\n# TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS,\n# ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,\n# OR FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE\n# ERROR FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO\n# THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN\n# ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,\n# RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS\n# RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY\n# DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,\n# IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT \"AS IS.\"\n#\n# Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST\n# THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL\n# AS ANY PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS\n# IN ANY LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH\n# USE, INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM,\n# RECIPIENT'S USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD\n# HARMLESS THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS,\n# AS WELL AS ANY PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.\n# RECIPIENT'S SOLE REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE,\n# UNILATERAL TERMINATION OF THIS AGREEMENT.\n#\n#*****************************************************************************/\n\ncmake_minimum_required(VERSION 3.4.3 FATAL_ERROR)\n\nproject(ikos)\nset(PACKAGE_VERSION \"3.5\")\n\n#\n# Build settings\n#\n\nif (CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)\n  message(FATAL_ERROR\n    \"In-source builds are not allowed. Please clean your source tree and try again.\")\nendif()\n\nif (NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE \"Release\" CACHE STRING \"Choose the type of build\" FORCE)\nendif()\n\nif (CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${CMAKE_SOURCE_DIR}/install\" CACHE PATH \"Install directory\" FORCE)\nendif()\n\nmessage(STATUS \"Install prefix: ${CMAKE_INSTALL_PREFIX}\")\nmessage(STATUS \"Build type: ${CMAKE_BUILD_TYPE}\")\nmessage(STATUS \"CMake version: ${CMAKE_VERSION}\")\nmessage(STATUS \"CMake generator: ${CMAKE_GENERATOR}\")\n\n# Add path for custom modules\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\n\n# Generate compile_commands.json, used by clang-tidy\nset(CMAKE_EXPORT_COMPILE_COMMANDS TRUE)\n\ninclude(HandleOptions)\n\n# Enable tests\nenable_testing()\n\n# Add ikos core\nmessage(STATUS \"Including core\")\nadd_subdirectory(core)\n\nset(CORE_FOUND TRUE)\nset(CORE_INCLUDE_DIR \"${CMAKE_SOURCE_DIR}/core/include\")\n\n# Add abstract representation\nmessage(STATUS \"Including ar\")\nadd_subdirectory(ar)\n\nset(AR_FOUND TRUE)\nset(AR_INCLUDE_DIR \"${CMAKE_SOURCE_DIR}/ar/include\")\nset(AR_LIB ikos-ar)\n\n# Add llvm frontend\nmessage(STATUS \"Including frontend/llvm\")\nadd_subdirectory(frontend/llvm)\n\nset(FRONTEND_LLVM_FOUND TRUE)\nset(FRONTEND_LLVM_INCLUDE_DIR \"${CMAKE_SOURCE_DIR}/frontend/llvm/include\")\nset(FRONTEND_LLVM_TO_AR_LIB ikos-llvm-to-ar)\nset(FRONTEND_LLVM_IKOS_PP_EXECUTABLE \"$<TARGET_FILE:ikos-pp>\")\n\n# Add analyzer\nmessage(STATUS \"Including analyzer\")\nadd_subdirectory(analyzer)\n\n# Tests\nadd_custom_target(check\n  COMMAND ${CMAKE_CTEST_COMMAND}\n  DEPENDS build-core-tests build-frontend-llvm-tests build-analyzer-tests)\n\n# Doxygen\nadd_custom_target(doc DEPENDS doxygen-ar doxygen-core doxygen-analyzer)\n"
        },
        {
          "name": "CONTRIBUTORS.md",
          "type": "blob",
          "size": 0.3603515625,
          "content": "NASA Contributors\n-----------------\n\n* Maxime Arthaud\n* Thomas Bailleux\n* Guillaume Brat\n* Cl√©ment Decoodt\n* Arnaud Hamon\n* Jorge Navas\n* Elodie-Jane Simms\n* Nija Shi\n* Sarah Thompson\n* Arnaud Venet\n* Alexandre Wimmers\n\nExternal Contributors\n---------------------\n\n* [avemilia](https://github.com/avemilia)\n* [Sung Kook Kim](https://github.com/skkeem)\n* Aditya Thakur\n"
        },
        {
          "name": "LICENSE.pdf",
          "type": "blob",
          "size": 90.5126953125,
          "content": null
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 13.9990234375,
          "content": "NASA OPEN SOURCE AGREEMENT VERSION 1.3\n\nTHIS OPEN SOURCE AGREEMENT (‚ÄúAGREEMENT‚Äù) DEFINES THE RIGHTS OF USE,\nREPRODUCTION, DISTRIBUTION, MODIFICATION AND REDISTRIBUTION OF CERTAIN COMPUTER\nSOFTWARE ORIGINALLY RELEASED BY THE UNITED STATES GOVERNMENT AS REPRESENTED BY\nTHE GOVERNMENT AGENCY LISTED BELOW (\"GOVERNMENT AGENCY\").  THE UNITED STATES\nGOVERNMENT, AS REPRESENTED BY GOVERNMENT AGENCY, IS AN INTENDED THIRD-PARTY\nBENEFICIARY OF ALL SUBSEQUENT DISTRIBUTIONS OR REDISTRIBUTIONS OF THE SUBJECT\nSOFTWARE.  ANYONE WHO USES, REPRODUCES, DISTRIBUTES, MODIFIES OR REDISTRIBUTES\nTHE SUBJECT SOFTWARE, AS DEFINED HEREIN, OR ANY PART THEREOF, IS, BY THAT\nACTION, ACCEPTING IN FULL THE RESPONSIBILITIES AND OBLIGATIONS CONTAINED IN THIS\nAGREEMENT.\n\nGovernment Agency: NASA Ames Research Center\nGovernment Agency Original Software Designation: NASA Ames Research Center\nGovernment Agency Original Software Title: Inference Kernel for Open Static\nAnalyzers (IKOS)\nUser Registration Requested.  Please Visit http://opensource.arc.nasa.gov/\nGovernment Agency Point of Contact for Original Software: Guillaume P. Brat\n\n1. DEFINITIONS\n    A.\n        ‚ÄúContributor‚Äù means Government Agency, as the developer of the Original\n        Software, and any entity that makes a Modification.\n\n    B.\n        ‚ÄúCovered Patents‚Äù mean patent claims licensable by a Contributor that\n        are necessarily infringed by the use or sale of its Modification alone\n        or when combined with the Subject Software.\n\n    C.\n        ‚ÄúDisplay‚Äù means the showing of a copy of the Subject Software, either\n        directly or by means of an image, or any other device.\n\n    D.\n        ‚ÄúDistribution‚Äù means conveyance or transfer of the Subject Software,\n        regardless of means, to another.\n\n    E.\n        ‚ÄúLarger Work‚Äù means computer software that combines Subject Software, or\n        portions thereof, with software separate from the Subject Software that\n        is not governed by the terms of this Agreement.\n\n    F.\n        ‚ÄúModification‚Äù means any alteration of, including addition to or\n        deletion from, the substance or structure of either the Original\n        Software or Subject Software, and includes derivative works, as that\n        term is defined in the Copyright Statute, 17 USC 101.  However, the act\n        of including Subject Software as part of a Larger Work does not in and\n        of itself constitute a Modification.\n\n    G.\n        ‚ÄúOriginal Software‚Äù means the computer software first released under\n        this Agreement by Government Agency with Government Agency designation\n        NASA Ames Research Center and entitled Inference Kernel for Open Static\n        Analyzers (IKOS), including source code, object code and accompanying\n        documentation, if any.\n\n    H.\n        ‚ÄúRecipient‚Äù means anyone who acquires the Subject Software under this\n        Agreement, including all Contributors.\n\n    I.\n        ‚ÄúRedistribution‚Äù means Distribution of the Subject Software after a\n        Modification has been made.\n\n    J.\n        ‚ÄúReproduction‚Äù means the making of a counterpart, image or copy of the\n        Subject Software.\n\n    K.\n        ‚ÄúSale‚Äù means the exchange of the Subject Software for money or\n        equivalent value.\n\n    L.\n        ‚ÄúSubject Software‚Äù means the Original Software, Modifications, or any\n        respective parts thereof.\n\n    M.\n        ‚ÄúUse‚Äù means the application or employment of the Subject Software for\n        any purpose.\n\n2. GRANT OF RIGHTS\n    A.\n        Under Non-Patent Rights: Subject to the terms and conditions of this\n        Agreement, each Contributor, with respect to its own contribution to the\n        Subject Software, hereby grants to each Recipient a non-exclusive,\n        world-wide, royalty-free license to engage in the following activities\n        pertaining to the Subject Software:\n            1. Use\n            2. Distribution\n            3. Reproduction\n            4. Modification\n            5. Redistribution\n            6. Display\n\n    B.\n        Under Patent Rights: Subject to the terms and conditions of this\n        Agreement, each Contributor, with respect to its own contribution to the\n        Subject Software, hereby grants to each Recipient under Covered Patents\n        a non-exclusive, world-wide, royalty-free license to engage in the\n        following activities pertaining to the Subject Software:\n            1. Use\n            2. Distribution\n            3. Reproduction\n            4. Sale\n            5. Offer for Sale\n\n    C.\n        The rights granted under Paragraph B. also apply to the combination of a\n        Contributor‚Äôs Modification and the Subject Software if, at the time the\n        Modification is added by the Contributor, the addition of such\n        Modification causes the combination to be covered by the Covered\n        Patents.  It does not apply to any other combinations that include a\n        Modification.\n\n    D.\n        The rights granted in Paragraphs A. and B. allow the Recipient to\n        sublicense those same rights.  Such sublicense must be under the same\n        terms and conditions of this Agreement.\n\n\n3. OBLIGATIONS OF RECIPIENT\n\n    A.\n        Distribution or Redistribution of the Subject Software must be made\n        under this Agreement except for additions covered under paragraph 3H.\n\n            1. Whenever a Recipient distributes or redistributes the Subject\n            Software, a copy of this Agreement must be included with each copy\n            of the Subject Software; and\n\n            2. If Recipient distributes or\n            redistributes the Subject Software in any form other than source\n            code, Recipient must also make the source code freely available, and\n            must provide with each copy of the Subject Software information on\n            how to obtain the source code in a reasonable manner on or through a\n            medium customarily used for software exchange.\n\n    B.\n        Each Recipient must ensure that the following copyright notice appears\n        prominently in the Subject Software:\n\n            Copyright ¬© 2011 United States Government as represented by the\n            Administrator of the National Aeronautics and Space Administration.\n            All Rights Reserved.\n\n    C.\n        Each Contributor must characterize its alteration of the Subject\n        Software as a Modification and must identify itself as the originator of\n        its Modification in a manner that reasonably allows subsequent\n        Recipients to identify the originator of the Modification.  In\n        fulfillment of these requirements, Contributor must include a file\n        (e.g., a change log file) that describes the alterations made and the\n        date of the alterations, identifies Contributor as originator of the\n        alterations, and consents to characterization of the alterations as a\n        Modification, for example, by including a statement that the\n        Modification is derived, directly or indirectly, from Original Software\n        provided by Government Agency. Once consent is granted, it may not\n        thereafter be revoked.\n\n    D.\n        A Contributor may add its own copyright notice to the Subject Software.\n        Once a copyright notice has been added to the Subject Software, a\n        Recipient may not remove it without the express permission of the\n        Contributor who added the notice.\n\n\n    E.\n        A Recipient may not make any representation in the Subject Software or\n        in any promotional, advertising or other material that may be construed\n        as an endorsement by Government Agency or by any prior Recipient of any\n        product or service provided by Recipient, or that may seek to obtain\n        commercial advantage by the fact of Government Agency's or a prior\n        Recipient‚Äôs participation in this Agreement.\n\n    F.\n        In an effort to track usage and maintain accurate records of the Subject\n        Software, each Recipient, upon receipt of the Subject Software, is\n        requested to register with Government Agency by visiting the following\n        website: http://opensource.arc.nasa.gov/.   Recipient‚Äôs name and\n        personal information shall be used for statistical purposes only. Once a\n        Recipient makes a Modification available, it is requested that the\n        Recipient inform Government Agency at the web site provided above how to\n        access the Modification.\n\n    G.\n        Each Contributor represents that that its Modification is believed to be\n        Contributor‚Äôs original creation and does not violate any existing\n        agreements, regulations, statutes or rules, and further that Contributor\n        has sufficient rights to grant the rights conveyed by this Agreement.\n\n    H.\n        A Recipient may choose to offer, and to charge a fee for, warranty,\n        support, indemnity and/or liability obligations to one or more other\n        Recipients of the Subject Software.  A Recipient may do so, however,\n        only on its own behalf and not on behalf of Government Agency or any\n        other Recipient.  Such a Recipient must make it absolutely clear that\n        any such warranty, support, indemnity and/or liability obligation is\n        offered by that Recipient alone.  Further, such Recipient agrees to\n        indemnify Government Agency and every other Recipient for any liability\n        incurred by them as a result of warranty, support, indemnity and/or\n        liability offered by such Recipient.\n\n    I.\n        A Recipient may create a Larger Work by combining Subject Software with\n        separate software not governed by the terms of this agreement and\n        distribute the Larger Work as a single product. In such case, the\n        Recipient must make sure Subject Software, or portions thereof, included\n        in the Larger Work is subject to this Agreement.\n\n    J.\n        Notwithstanding any provisions contained herein, Recipient is hereby put\n        on notice that export of any goods or technical data from the United\n        States may require some form of export license from the U.S.\n        Government.  Failure to obtain necessary export licenses may result in\n        criminal liability under U.S. laws.  Government Agency neither\n        represents that a license shall not be required nor that, if required,\n        it shall be issued.  Nothing granted herein provides any such export\n        license.\n\n4. DISCLAIMER OF WARRANTIES AND LIABILITIES; WAIVER AND INDEMNIFICATION\n\n    A.\n        No Warranty: THE SUBJECT SOFTWARE IS PROVIDED ‚ÄúAS IS‚Äù WITHOUT ANY\n        WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY,\n        INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE\n        WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF\n        MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM\n        INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR FREE,\n        OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE\n        SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN\n        ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,\n        RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS\n        RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY\n        DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,\n        IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT ‚ÄúAS IS.‚Äù\n\n    B.\n        Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS\n        AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND\n        SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT.  IF RECIPIENT'S USE OF\n        THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES,\n        EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM\n        PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT\n        SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED STATES\n        GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY PRIOR\n        RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR\n        ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS\n        AGREEMENT.\n\n5. GENERAL TERMS\n\n    A.\n        Termination: This Agreement and the rights granted hereunder will\n        terminate automatically if a Recipient fails to comply with these terms\n        and conditions, and fails to cure such noncompliance within thirty (30)\n        days of becoming aware of such noncompliance.  Upon termination, a\n        Recipient agrees to immediately cease use and distribution of the\n        Subject Software.  All sublicenses to the Subject Software properly\n        granted by the breaching Recipient shall survive any such termination of\n        this Agreement.\n\n    B.\n        Severability: If any provision of this Agreement is invalid or\n        unenforceable under applicable law, it shall not affect the validity or\n        enforceability of the remainder of the terms of this Agreement.\n\n    C.\n        Applicable Law: This Agreement shall be subject to United States federal\n        law only for all purposes, including, but not limited to, determining\n        the validity of this Agreement, the meaning of its provisions and the\n        rights, obligations and remedies of the parties.\n\n    D.\n        Entire Understanding: This Agreement constitutes the entire\n        understanding and agreement of the parties relating to release of the\n        Subject Software and may not be superseded, modified or amended except\n        by further written agreement duly executed by the parties.\n\n    E.\n        Binding Authority: By accepting and using the Subject Software under\n        this Agreement, a Recipient affirms its authority to bind the Recipient\n        to all terms and conditions of this Agreement and that that Recipient\n        hereby agrees to all terms and conditions herein.\n\n    F.\n        Point of Contact: Any Recipient contact with Government Agency is to be\n        directed to the designated representative as follows:\n        Guillaume P. Brat\n        guillaume.p.brat@nasa.gov\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.4306640625,
          "content": "IKOS\n====\n\n[![License](https://img.shields.io/badge/license-NOSA%201.3-blue.svg)](LICENSE.pdf)\n[![Release](https://img.shields.io/badge/release-v3.5-orange.svg)](https://github.com/NASA-SW-VnV/ikos/releases/tag/v3.5)\n[![Linux Build](https://github.com/NASA-SW-VnV/ikos/actions/workflows/build-linux.yml/badge.svg)](https://github.com/NASA-SW-VnV/ikos/actions/workflows/build-linux.yml)\n[![MacOS Build](https://github.com/NASA-SW-VnV/ikos/actions/workflows/build-macos.yml/badge.svg)](https://github.com/NASA-SW-VnV/ikos/actions/workflows/build-macos.yml)\n\nIKOS (Inference Kernel for Open Static Analyzers) is a static analyzer for C/C++ based on the theory of Abstract Interpretation.\n\nIntroduction\n------------\n\nIKOS started as a C++ library designed to facilitate the development of sound static analyzers based on [Abstract Interpretation](https://www.di.ens.fr/~cousot/AI/IntroAbsInt.html). Specialization of a static analyzer for an application or family of applications is critical for achieving both precision and scalability. Developing such an analyzer is arduous and requires significant expertise in Abstract Interpretation.\n\nIKOS provides a generic and efficient implementation of state-of-the-art Abstract Interpretation data structures and algorithms, such as control-flow graphs, fixpoint iterators, numerical abstract domains, etc. IKOS is independent of a particular programming language.\n\nIKOS also provides a C and C++ static analyzer based on [LLVM](https://llvm.org). It implements scalable analyses for detecting and proving the absence of runtime errors in C and C++ programs.\n\nLicense\n-------\n\nIKOS has been released under the NASA Open Source Agreement version 1.3, see [LICENSE.pdf](LICENSE.pdf)\n\nContact\n-------\n\nikos@lists.nasa.gov\n\nRelease notes\n-------------\n\nSee [Releases](https://github.com/NASA-SW-VnV/ikos/releases).\n\nTroubleshooting\n---------------\n\nSee [TROUBLESHOOTING.md](TROUBLESHOOTING.md)\n\nInstallation\n------------\n\nTo install IKOS on **Linux** or **macOS**, we recommend to use **[Homebrew](https://brew.sh/)**.\n\nFirst, install **Homebrew** by following [these instructions](https://docs.brew.sh/Installation).\n\nThen, simply run:\n```\n$ brew install nasa-sw-vnv/core/ikos\n```\n\nFor Windows, consider using [Windows Subsystem for Linux](https://learn.microsoft.com/en-us/windows/wsl/install).\n\nHow to run IKOS\n---------------\n\nSuppose we want to analyze the following C program in a file, called *loop.c*:\n\n```c\n 1: #include <stdio.h>\n 2: int a[10];\n 3: int main(int argc, char *argv[]) {\n 4:     size_t i = 0;\n 5:     for (;i < 10; i++) {\n 6:         a[i] = i;\n 7:     }\n 8:     a[i] = i;\n 9:     printf(\"%i\", a[i]);\n10: }\n```\n\nTo analyze this program with IKOS, simply run:\n\n```\n$ ikos loop.c\n```\n\nYou shall see the following output. IKOS reports two occurrences of buffer overflow at line 8 and 9.\n\n```\n[*] Compiling loop.c\n[*] Running ikos preprocessor\n[*] Running ikos analyzer\n[*] Translating LLVM bitcode to AR\n[*] Running liveness analysis\n[*] Running widening hint analysis\n[*] Running interprocedural value analysis\n[*] Analyzing entry point 'main'\n[*] Checking properties for entry point 'main'\n\n# Time stats:\nclang        : 0.037 sec\nikos-analyzer: 0.023 sec\nikos-pp      : 0.007 sec\n\n# Summary:\nTotal number of checks                : 7\nTotal number of unreachable checks    : 0\nTotal number of safe checks           : 5\nTotal number of definite unsafe checks: 2\nTotal number of warnings              : 0\n\nThe program is definitely UNSAFE\n\n# Results\nloop.c: In function 'main':\nloop.c:8:10: error: buffer overflow, trying to access index 10 of global variable 'a' of 10 elements\n    a[i] = i;\n         ^\nloop.c: In function 'main':\nloop.c:9:18: error: buffer overflow, trying to access index 10 of global variable 'a' of 10 elements\n    printf(\"%i\", a[i]);\n                 ^\n```\n\nThe `ikos` command takes a source file (`.c`, `.cpp`) or a LLVM bitcode file (`.bc`) as input, analyzes it to find runtime errors (also called undefined behaviors), creates a result database `output.db` in the current working directory and prints a report.\n\nIn the report, each line has one of the following status:\n\n* **safe**: the statement is proven safe;\n* **error**: the statement always results into an error (or is unreachable);\n* **unreachable**: the statement is never executed;\n* **warning** may mean three things:\n   1. the statement results into an error for some executions, or\n   2. the static analyzer did not have enough information to conclude (check dependent on an external input, for instance), or\n   3. the static analyzer was not powerful enough to prove the absence of errors;\n\nBy default, ikos shows warnings and errors directly in your terminal, like a compiler would do.\n\nIf the analysis report is too big, you shall use:\n* `ikos-report output.db` to examine the report in your terminal\n* `ikos-view output.db` to examine the report in a web interface\n\nFurther information:\n* [Analyze a whole project with ikos-scan](analyzer/README.md#analyze-a-whole-project-with-ikos-scan)\n* [Examine a report with ikos-view](analyzer/README.md#examine-a-report-with-ikos-view)\n* [Analysis Options](analyzer/README.md#analysis-options)\n  - [Checks](analyzer/README.md#checks)\n  - [Numerical abstract domains](analyzer/README.md#numerical-abstract-domains)\n  - [Entry points](analyzer/README.md#entry-points)\n  - [Multi-threading](analyzer/README.md#multi-threading)\n  - [Optimization level](analyzer/README.md#optimization-level)\n  - [Inter-procedural vs Intra-procedural](analyzer/README.md#inter-procedural-vs-intra-procedural)\n  - [Fixpoint engine parameters](analyzer/README.md#fixpoint-engine-parameters)\n  - [Partitioning](analyzer/README.md#partitioning)\n  - [Hardware addresses](analyzer/README.md#hardware-addresses)\n  - [Other analysis options](analyzer/README.md#other-analysis-options)\n* [Report Options](analyzer/README.md#report-options)\n  - [Format](analyzer/README.md#format)\n  - [File](analyzer/README.md#file)\n  - [Status Filter](analyzer/README.md#status-filter)\n  - [Analysis Filter](analyzer/README.md#analysis-filter)\n  - [Verbosity](analyzer/README.md#verbosity)\n  - [Other report options](analyzer/README.md#other-report-options)\n* [APRON Support](analyzer/README.md#apron-support)\n* [Analysis Assumptions](analyzer/README.md#analysis-assumptions)\n* [Analyze an embedded software requiring a cross-compiler](analyzer/README.md#analyze-an-embedded-software-requiring-a-cross-compiler)\n* [Model library functions to reduce warnings](analyzer/README.md#model-library-functions-to-reduce-warnings)\n\nBuild from source\n-----------------\n\nBelow are instructions to build IKOS from source.\nThis is only for advanced users that want to either package IKOS for an operating system or to experiment with the codebase. Otherwise, please follow the instructions [above](#installation).\n\n### Dependencies\n\nTo build and run the analyzer, you will need the following dependencies:\n\n* A C++ compiler that supports C++14 (gcc >= 4.9.2 or clang >= 3.4)\n* CMake >= 3.4.3\n* GMP >= 4.3.1\n* Boost >= 1.55\n* Python >= 3.3\n* SQLite >= 3.6.20\n* TBB >= 2\n* LLVM and Clang 14.0.x\n* (Optional) APRON >= 0.9.10\n\nMost of them can be installed using your package manager.\n\nNote: If you build LLVM from source, you need to enable run-time type information (RTTI).\n\n### Build and Install\n\nNow that you have all the dependencies on your system, you can build and install IKOS.\n\nAs you open the IKOS distribution, you shall see the following directory structure:\n\n```\n.\n‚îú‚îÄ‚îÄ CMakeLists.txt\n‚îú‚îÄ‚îÄ LICENSE.pdf\n‚îú‚îÄ‚îÄ README.md\n‚îú‚îÄ‚îÄ RELEASE_NOTES.md\n‚îú‚îÄ‚îÄ TROUBLESHOOTING.md\n‚îú‚îÄ‚îÄ analyzer\n‚îú‚îÄ‚îÄ ar\n‚îú‚îÄ‚îÄ cmake\n‚îú‚îÄ‚îÄ core\n‚îú‚îÄ‚îÄ doc\n‚îú‚îÄ‚îÄ frontend\n‚îú‚îÄ‚îÄ script\n‚îî‚îÄ‚îÄ test\n```\n\nIKOS uses the CMake build system. You will need to specify an installation directory that will contain all the binaries, libraries and headers after installation. If you do not specify this directory, CMake will install everything under `install` in the root directory of the distribution. In the following steps, we will install IKOS under `/path/to/ikos-install-directory`.\n\nHere are the steps to build and install IKOS:\n\n```\n$ mkdir build\n$ cd build\n$ cmake -DCMAKE_INSTALL_PREFIX=/path/to/ikos-install-directory ..\n$ make\n$ make install\n```\n\nThen, add IKOS in your PATH (consider adding this in your .bashrc):\n\n```\n$ PATH=\"/path/to/ikos-install-directory/bin:$PATH\"\n```\n\n### Tests\n\nTo build and run the tests, simply type:\n\n```\n$ make check\n```\n\nContributors\n------------\n\nSee [CONTRIBUTORS.md](CONTRIBUTORS.md)\n\nPublications\n------------\n\n* Sung Kook Kim, Arnaud J. Venet, Aditya V. Thakur. **Deterministic Parallel Fixpoint Computation.** In _Principles of Programming Languages (POPL 2020)_, New Orleans, Louisiana ([PDF](https://arxiv.org/pdf/1909.05951.pdf)).\n\n* Guillaume Brat, Jorge Navas, Nija Shi and Arnaud Venet. **IKOS: a Framework for Static Analysis based on Abstract Interpretation.** In _Proceedings of the International Conference on Software Engineering and Formal Methods (SEFM 2014)_, Grenoble, France ([PDF](http://ti.arc.nasa.gov/publications/16610/download/)).\n\n* Arnaud Venet. **The Gauge Domain: Scalable Analysis of Linear Inequality Invariants.** In _Proceedings of Computer Aided Verification (CAV 2012)_, Berkeley, California, USA 2012. Lecture Notes in Computer Science, pages 139-154, volume 7358, Springer 2012 ([PDF](http://ti.arc.nasa.gov/publications/4767/download/)).\n\nCoding Standards\n----------------\n\nSee [doc/CODING_STANDARDS.md](doc/CODING_STANDARDS.md)\n\nOverview of the source code\n---------------------------\n\nSee [doc/OVERVIEW.md](doc/OVERVIEW.md)\n"
        },
        {
          "name": "TROUBLESHOOTING.md",
          "type": "blob",
          "size": 4.296875,
          "content": "Troubleshooting\n===============\n\nThis document covers some common issues with IKOS, and how to solve them.\n\nContact\n-------\n\nikos@lists.nasa.gov\n\nInstallation issues\n-------------------\n\n### \"Could NOT find LLVM\" while running cmake\n\nCMake could not find LLVM.\n\nFirst, install LLVM. This can usually be done with your package manager.\n\nIf this message still shows up, it means cmake cannot find the `llvm-config` command.\n\nYou can either add the LLVM binary directory in your PATH, or give cmake the full path to llvm-config, using `-DLLVM_CONFIG_EXECUTABLE=/path/to/llvm-config`\n\nFor instance, if you installed LLVM using Homebrew on Mac OS X, you can add LLVM in your path using:\n\n```\n$ PATH=\"$(brew --prefix)/opt/llvm/bin:$PATH\"\n```\n\n### \"Could NOT find Clang\" while running cmake\n\nCMake could not find Clang.\n\nFirst, install Clang. This can usually be done with your package manager.\n\nIf this message still shows up, it means cmake cannot find the `clang` command.\n\nYou can either add the clang binary directory in your PATH, or give cmake the full path to clang, using `-DCLANG_EXECUTABLE=/path/to/clang`\n\n### \"Could not find ikos python module\" while running ikos\n\nThe ikos command could not import the ikos python module.\n\nThe module should be under `/path/to/ikos-install/lib/python*/site-packages`\n\nIf the ikos python module is in another directory, make sure it is in your PYTHONPATH:\n\n```\nexport PYTHONPATH=/path/to/ikos-python-module\n```\n\n### \"Two passes with the same argument (-domtree) attempted to be registered!\" while running ikos\n\nYou are probably trying to build IKOS with shared libraries (using `-DBUILD_SHARED_LIBS=ON`) and LLVM was linked statically (using `libLLVMxxx.a`).\n\nUnfortunately, this doesn't work because LLVM uses global constructors to register command line options, and the global constructors end up being called twice.\n\nCompiling IKOS with both `-DBUILD_SHARED_LIBS=ON` and `-DIKOS_LINK_LLVM_DYLIB=ON` should fix the issue by linking against the libLLVM shared library.\n\n### \"/usr/bin/ld: cannot find -lLLVMCore\" while running Make\n\nYour LLVM library was built as one single shared library `libLLVM.so` (`LLVM_BUILD_LLVM_DYLIB=1`), but CMake was configured to query specific library components and match link flags against them.\n\nCompiling IKOS with both `-DBUILD_SHARED_LIBS=ON` and `-DIKOS_LINK_LLVM_DYLIB=ON` should fix the issue by linking against the single libLLVM shared library.\n\n### `memory access violation at address: 0x00000088: no mapping at fault address` while running tests\n\nThis is a bug in the APRON library. Some OS distributions provide outdated versions of APRON. Building APRON from source (https://github.com/antoinemine/apron), instead of relying on a version made available via the OS' package repository, should fix the issue.\n\nAnalysis issues\n---------------\n\n### Exited with signal SIGKILL\n\nIKOS probably ran out of memory.\n\nSee [Running ouf of memory](#running-out-of-memory)\n\n### Running out of memory\n\nIKOS might run out of memory on huge code bases.\n\nConsider using the option `--no-fixpoint-cache`. It disables the cache of fixpoint for called functions, which decreases the memory usage at the cost of run time.\n\nKnown issues\n------------\n\n### Source Code Fortification\n\nSource code fortification aims at making your source code more robust. It replaces regular `memset()`, `memcpy()` and `memmove()` calls to `__memset_chk()`, `__memcpy_chk()` and `__memmove_chk()`. According to Linux Standard Base Core Specification 4.1, the interfaces `__memset_chk()`, `__memcpy_chk()` and `__memmove_chk()` shall function in the same way as the interface `memset()`, `memcpy()` and `memmove()`, respectively, except that `__memset_chk()`, `__memcpy_chk()` and `__memmove_chk()` shall check for buffer overflow before computing a result. If an overflow is anticipated, the function shall abort and the program calling it shall exit.\n\nThe Buffer Overflow Analysis (BOA) in IKOS handles `__memset_chk()`, `__memcpy_chk()` and `__memmove_chk()` as unknown library functions, and won't report any warning. Consider using `-D_FORTIFY_SOURCE=0` when you compile your source code to LLVM bitcode manually.\n\n### Analyzing multi-threaded code\n\nIKOS does not handle analyzing multi-threaded code. Handling multi-threaded code in a sound static analyzer based on Abstract Interpretation (such as IKOS) is challenging and an ongoing research topic.\n"
        },
        {
          "name": "analyzer",
          "type": "tree",
          "content": null
        },
        {
          "name": "ar",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "frontend",
          "type": "tree",
          "content": null
        },
        {
          "name": "script",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}