{
  "metadata": {
    "timestamp": 1736565665877,
    "page": 563,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lbryio/lbrycrd",
      "stars": 2563,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0341796875,
          "content": "src/clientversion.cpp export-subst\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.5341796875,
          "content": "*.tar.gz\n\n*.exe\nsrc/lbrycrd\nsrc/lbrycrdd\nsrc/lbrycrd-cli\nsrc/lbrycrd-tx\nsrc/test/test_lbrycrd\nsrc/test/test_lbrycrd_fuzzy\nsrc/qt/lbrycrd-qt\nsrc/qt/test/test_lbrycrd-qt\n\n# autoreconf\nMakefile.in\naclocal.m4\nautom4te.cache/\nbuild-aux/config.guess\nbuild-aux/config.sub\nbuild-aux/depcomp\nbuild-aux/install-sh\nbuild-aux/ltmain.sh\nbuild-aux/m4/libtool.m4\nbuild-aux/m4/lt~obsolete.m4\nbuild-aux/m4/ltoptions.m4\nbuild-aux/m4/ltsugar.m4\nbuild-aux/m4/ltversion.m4\nbuild-aux/missing\nbuild-aux/compile\nbuild-aux/test-driver\nconfig.log\nconfig.status\nconfigure\nlibtool\nsrc/config/bitcoin-config.h\nsrc/config/bitcoin-config.h.in\nsrc/config/stamp-h1\nshare/setup.nsi\nshare/qt/Info.plist\n\nsrc/univalue/gen\n\nsrc/qt/*.moc\nsrc/qt/moc_*.cpp\nsrc/qt/forms/ui_*.h\n\nsrc/qt/test/moc*.cpp\n\nsrc/qt/bitcoin-qt.config\nsrc/qt/bitcoin-qt.creator\nsrc/qt/bitcoin-qt.creator.user\nsrc/qt/bitcoin-qt.files\nsrc/qt/bitcoin-qt.includes\n\n.deps\n.dirstamp\n.libs\n.*.swp\n*.*~*\n*.bak\n*.rej\n*.orig\n*.pyc\n*.o\n*.o-*\n*.a\n*.pb.cc\n*.pb.h\n\n*.log\n*.trs\n*.dmg\n\n*.json.h\n*.raw.h\n\n#libtool object files\n*.lo\n*.la\n\n# Compilation and Qt preprocessor part\n*.qm\nMakefile\nbitcoin-qt\nBitcoin-Qt.app\nbackground.tiff*\n\n# Unit-tests\nMakefile.test\nbitcoin-qt_test\n\n# Resources cpp\nqrc_*.cpp\n\n# Mac specific\n.DS_Store\nbuild\n\n#lcov\n*.gcno\n*.gcda\n/*.info\ntest_bitcoin.coverage/\ntotal.coverage/\ncoverage_percent.txt\n\n#build tests\nlinux-coverage-build\nlinux-build\nwin32-build\ntest/config.ini\ntest/cache/*\n\n!src/leveldb*/Makefile\n\n/doc/doxygen/\n\nlibbitcoinconsensus.pc\ncontrib/devtools/split-debug.sh\n\n.idea\ncmake-build-*/\n\ncompile_commands\\.json\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 3.1611328125,
          "content": "language: minimal\nfilter_secrets: false\ncache:\n  directories:\n    - ${HOME}/ccache\n\nstages:\n  - build\n  - test\n\njobs:\n  include:\n\n    - &build-template\n      stage: build\n      name: linux\n      env: NAME=linux DOCKER_IMAGE=lbry/build_lbrycrd_gcc EXT=\n      os: linux\n      dist: xenial\n      language: minimal\n      services:\n        - docker\n      install:\n        - mkdir -p ${HOME}/ccache\n        - docker pull $DOCKER_IMAGE\n      script:\n        - echo \"build...\"\n        - docker run -v \"$(pwd):/lbrycrd\" -v \"${HOME}/ccache:/ccache\" -w /lbrycrd -e CCACHE_DIR=/ccache ${DOCKER_IMAGE} packaging/build_${NAME}_64bit.sh\n      before_deploy:\n        - mkdir -p dist\n        - sudo zip -Xj dist/lbrycrd-${NAME}.zip src/lbrycrdd${EXT} src/lbrycrd-cli${EXT} src/lbrycrd-tx${EXT}\n        - sudo zip -Xj dist/lbrycrd-${NAME}-test.zip src/test/test_lbrycrd${EXT} src/test/test_lbrycrd_fuzzy${EXT}\n        - sha256sum dist/lbrycrd-${NAME}.zip\n        - sha256sum dist/lbrycrd-${NAME}-test.zip\n      deploy:\n        - provider: s3\n          access_key_id: AKIAICKFHNTR5RITASAQ\n          secret_access_key:\n            secure: Qfgs8vGnEUvgiZNP2S9zY8qHEzaDOceF/XTv32jRBOISWfTqOTE56DZbOp8WKHPAqn0dx04jKA1NfV9f06sXU1NVbiJ2VYISo6XAk0n3RBJL3/mhNxvut/zM2DHkFPljWTkWEColS0ZyA3m4eUyJvAw/i+mOBT/zDD/oIlS5Uo5l/x3LmF9fYBuei0ucwSQeNOr2wCMIl+pXrIU7B3lEzXh1asayW6A9y7DOqMLnrSQ7TLlSssbnhuhDVpFx0xxX/U2NPraotbGKdo3wwMbms/lluBe60I/LsDNp9/SZXMDXh2YLGUImr97octwpdzIMjF+kU7QAZJzM7grz8PU9+MQh2V5sn6Xsww2x4PdkmHGz/2FMzhrCrlPf5JCaPBH49G+w4/29HYmMrlimOOVx4qXCpQ/XtWWne/d6MF0qqT6JhdPuD9ohmTpxcHRkCe2fxUw6Yn3dj+/+YoCywAcwcBm5jLpAotmWoCmmcnm9rvB7bIuPPZAjJUZViCnyvwY4Tj3Fb+sOuK4b/O5D2+cuS+WgQRkN/RspYlXrXTIh8Efv/yhW5L9WdzG1OExJDw2hX5VTccRRgIKZxZp80U2eYqn2M07+1nU+ShX4kgiSon46k5cfacLgzLKWEyCxWSSTbsYcwRxvDEjtYy4wxAYx8+J3dgQPs/opDXoQTJMjud0=\n          bucket: build.lbry.io\n          upload-dir: lbrycrd/${TRAVIS_BRANCH}\n          acl: public_read\n          local_dir: dist\n          skip_cleanup: true\n          on:\n            repo: lbryio/lbrycrd\n            all_branches: true\n\n    - <<: *build-template\n      name: windows\n      env: NAME=windows DOCKER_IMAGE=lbry/build_lbrycrd EXT=.exe\n\n    - <<: *build-template\n      name: osx\n      env: NAME=darwin DOCKER_IMAGE=lbry/build_lbrycrd EXT=\n      before_install:\n        - mkdir -p ./depends/SDKs && pushd depends/SDKs && curl -C - ${MAC_OS_SDK} | tar --skip-old-files -xJ && popd\n\n    - &test-template\n      stage: test\n      env: NAME=linux\n      os: linux\n      dist: xenial\n      language: minimal\n      git:\n        clone: false\n      install:\n        - mkdir -p testrun && cd testrun\n        - curl http://build.lbry.io/lbrycrd/${TRAVIS_BRANCH}/lbrycrd-${NAME}-test.zip -o temp.zip\n        - unzip temp.zip\n      script: TRIEHASH_FUZZER_BLOCKS=1000 ./test_lbrycrd\n\n    - <<: *test-template\n      # os: windows # doesn't support secrets at the moment\n      os: linux\n      dist: xenial\n      env: NAME=windows\n      services:\n        - docker\n      script:\n        - docker pull lbry/wine\n        - docker run -v \"$(pwd):/test\" -e \"WINEDEBUG=-all\" -e \"TRIEHASH_FUZZER_BLOCKS=1000\" -it lbry/wine wine \"/test/test_lbrycrd.exe\"\n\n    - <<: *test-template\n      os: osx\n      osx_image: xcode8.3\n      env: NAME=darwin\n\n"
        },
        {
          "name": ".tx",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 14.916015625,
          "content": "Contributing to Bitcoin Core\n============================\n\nThe Bitcoin Core project operates an open contributor model where anyone is\nwelcome to contribute towards development in the form of peer review, testing\nand patches. This document explains the practical process and guidelines for\ncontributing.\n\nFirstly in terms of structure, there is no particular concept of \"Core\ndevelopers\" in the sense of privileged people. Open source often naturally\nrevolves around meritocracy where longer term contributors gain more trust from\nthe developer community. However, some hierarchy is necessary for practical\npurposes. As such there are repository \"maintainers\" who are responsible for\nmerging pull requests as well as a \"lead maintainer\" who is responsible for the\nrelease cycle, overall merging, moderation and appointment of maintainers.\n\nIf you're looking for somewhere to start contributing, check out the\n[good first issue](https://github.com/bitcoin/bitcoin/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22)\nlist.\n\nCommunication Channels\n----------------------\n\nMost communication about Bitcoin Core development happens on IRC, in the\n#bitcoin-core-dev channel on Freenode. The easiest way to participate on IRC is\nwith the web client, [webchat.freenode.net](https://webchat.freenode.net/). Chat\nhistory logs can be found\non [botbot.me](https://botbot.me/freenode/bitcoin-core-dev/).\n\nDiscussion about code base improvements happens in GitHub issues and on pull\nrequests.\n\nThe developer\n[mailing list](https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev)\nshould be used to discuss complicated or controversial changes before working on\na patch set.\n\n\nContributor Workflow\n--------------------\n\nThe codebase is maintained using the \"contributor workflow\" where everyone\nwithout exception contributes patch proposals using \"pull requests\". This\nfacilitates social contribution, easy testing and peer review.\n\nTo contribute a patch, the workflow is as follows:\n\n  1. Fork repository\n  1. Create topic branch\n  1. Commit patches\n\nThe project coding conventions in the [developer notes](doc/developer-notes.md)\nmust be adhered to.\n\nIn general [commits should be atomic](https://en.wikipedia.org/wiki/Atomic_commit#Atomic_commit_convention)\nand diffs should be easy to read. For this reason do not mix any formatting\nfixes or code moves with actual code changes.\n\nCommit messages should be verbose by default consisting of a short subject line\n(50 chars max), a blank line and detailed explanatory text as separate\nparagraph(s), unless the title alone is self-explanatory (like \"Corrected typo\nin init.cpp\") in which case a single title line is sufficient. Commit messages should be\nhelpful to people reading your code in the future, so explain the reasoning for\nyour decisions. Further explanation [here](http://chris.beams.io/posts/git-commit/).\n\nIf a particular commit references another issue, please add the reference. For\nexample: `refs #1234` or `fixes #4321`. Using the `fixes` or `closes` keywords\nwill cause the corresponding issue to be closed when the pull request is merged.\n\nPlease refer to the [Git manual](https://git-scm.com/doc) for more information\nabout Git.\n\n  - Push changes to your fork\n  - Create pull request\n\nThe title of the pull request should be prefixed by the component or area that\nthe pull request affects. Valid areas as:\n\n  - *Consensus* for changes to consensus critical code\n  - *Docs* for changes to the documentation\n  - *Qt* for changes to bitcoin-qt\n  - *Mining* for changes to the mining code\n  - *Net* or *P2P* for changes to the peer-to-peer network code\n  - *RPC/REST/ZMQ* for changes to the RPC, REST or ZMQ APIs\n  - *Scripts and tools* for changes to the scripts and tools\n  - *Tests* for changes to the bitcoin unit tests or QA tests\n  - *Trivial* should **only** be used for PRs that do not change generated\n    executable code. Notably, refactors (change of function arguments and code\n    reorganization) and changes in behavior should **not** be marked as trivial.\n    Examples of trivial PRs are changes to:\n    - comments\n    - whitespace\n    - variable names\n    - logging and messages\n  - *Utils and libraries* for changes to the utils and libraries\n  - *Wallet* for changes to the wallet code\n\nExamples:\n\n    Consensus: Add new opcode for BIP-XXXX OP_CHECKAWESOMESIG\n    Net: Automatically create hidden service, listen on Tor\n    Qt: Add feed bump button\n    Trivial: Fix typo in init.cpp\n\nNote that translations should not be submitted as pull requests, please see\n[Translation Process](https://github.com/bitcoin/bitcoin/blob/master/doc/translation_process.md) \nfor more information on helping with translations.\n\nIf a pull request is not to be considered for merging (yet), please\nprefix the title with [WIP] or use [Tasks Lists](https://help.github.com/articles/basic-writing-and-formatting-syntax/#task-lists)\nin the body of the pull request to indicate tasks are pending.\n\nThe body of the pull request should contain enough description about what the\npatch does together with any justification/reasoning. You should include\nreferences to any discussions (for example other tickets or mailing list\ndiscussions).\n\nAt this stage one should expect comments and review from other contributors. You\ncan add more commits to your pull request by committing them locally and pushing\nto your fork until you have satisfied all feedback.\n\nNote: Code review is a burdensome but important part of the development process, and as such, certain types of pull requests are rejected. In general, if the **improvements** do not warrant the **review effort** required, the PR has a high chance of being rejected. It is up to the PR author to convince the reviewers that the changes warrant the review effort, and if reviewers are \"Concept NAK'ing\" the PR, the author may need to present arguments and/or do research backing their suggested changes.\n\nSquashing Commits\n---------------------------\nIf your pull request is accepted for merging, you may be asked by a maintainer\nto squash and or [rebase](https://git-scm.com/docs/git-rebase) your commits\nbefore it will be merged. The basic squashing workflow is shown below.\n\n    git checkout your_branch_name\n    git rebase -i HEAD~n\n    # n is normally the number of commits in the pull request.\n    # Set commits (except the one in the first line) from 'pick' to 'squash', save and quit.\n    # On the next screen, edit/refine commit messages.\n    # Save and quit.\n    git push -f # (force push to GitHub)\n\nIf you have problems with squashing (or other workflows with `git`), you can\nalternatively enable \"Allow edits from maintainers\" in the right GitHub\nsidebar and ask for help in the pull request.\n\nPlease refrain from creating several pull requests for the same change.\nUse the pull request that is already open (or was created earlier) to amend\nchanges. This preserves the discussion and review that happened earlier for\nthe respective change set.\n\nThe length of time required for peer review is unpredictable and will vary from\npull request to pull request.\n\n\nPull Request Philosophy\n-----------------------\n\nPatchsets should always be focused. For example, a pull request could add a\nfeature, fix a bug, or refactor code; but not a mixture. Please also avoid super\npull requests which attempt to do too much, are overly large, or overly complex\nas this makes review difficult.\n\n\n### Features\n\nWhen adding a new feature, thought must be given to the long term technical debt\nand maintenance that feature may require after inclusion. Before proposing a new\nfeature that will require maintenance, please consider if you are willing to\nmaintain it (including bug fixing). If features get orphaned with no maintainer\nin the future, they may be removed by the Repository Maintainer.\n\n\n### Refactoring\n\nRefactoring is a necessary part of any software project's evolution. The\nfollowing guidelines cover refactoring pull requests for the project.\n\nThere are three categories of refactoring, code only moves, code style fixes,\ncode refactoring. In general refactoring pull requests should not mix these\nthree kinds of activity in order to make refactoring pull requests easy to\nreview and uncontroversial. In all cases, refactoring PRs must not change the\nbehaviour of code within the pull request (bugs must be preserved as is).\n\nProject maintainers aim for a quick turnaround on refactoring pull requests, so\nwhere possible keep them short, uncomplex and easy to verify.\n\nPull requests that refactor the code should not be made by new contributors. It\nrequires a certain level of experience to know where the code belongs to and to\nunderstand the full ramification (including rebase effort of open pull requests).\n\nTrivial pull requests or pull requests that refactor the code with no clear\nbenefits may be immediately closed by the maintainers to reduce unnecessary\nworkload on reviewing.\n\n\n\"Decision Making\" Process\n-------------------------\n\nThe following applies to code changes to the Bitcoin Core project (and related\nprojects such as libsecp256k1), and is not to be confused with overall Bitcoin\nNetwork Protocol consensus changes.\n\nWhether a pull request is merged into Bitcoin Core rests with the project merge\nmaintainers and ultimately the project lead.\n\nMaintainers will take into consideration if a patch is in line with the general\nprinciples of the project; meets the minimum standards for inclusion; and will\njudge the general consensus of contributors.\n\nIn general, all pull requests must:\n\n  - Have a clear use case, fix a demonstrable bug or serve the greater good of\n    the project (for example refactoring for modularisation);\n  - Be well peer reviewed;\n  - Have unit tests and functional tests where appropriate;\n  - Follow code style guidelines ([C++](doc/developer-notes.md), [functional tests](test/functional/README.md));\n  - Not break the existing test suite;\n  - Where bugs are fixed, where possible, there should be unit tests\n    demonstrating the bug and also proving the fix. This helps prevent regression.\n\nPatches that change Bitcoin consensus rules are considerably more involved than\nnormal because they affect the entire ecosystem and so must be preceded by\nextensive mailing list discussions and have a numbered BIP. While each case will\nbe different, one should be prepared to expend more time and effort than for\nother kinds of patches because of increased peer review and consensus building\nrequirements.\n\n\n### Peer Review\n\nAnyone may participate in peer review which is expressed by comments in the pull\nrequest. Typically reviewers will review the code for obvious errors, as well as\ntest out the patch set and opine on the technical merits of the patch. Project\nmaintainers take into account the peer review when determining if there is\nconsensus to merge a pull request (remember that discussions may have been\nspread out over GitHub, mailing list and IRC discussions). The following\nlanguage is used within pull-request comments:\n\n  - ACK means \"I have tested the code and I agree it should be merged\";\n  - NACK means \"I disagree this should be merged\", and must be accompanied by\n    sound technical justification (or in certain cases of copyright/patent/licensing\n    issues, legal justification). NACKs without accompanying reasoning may be\n    disregarded;\n  - utACK means \"I have not tested the code, but I have reviewed it and it looks\n    OK, I agree it can be merged\";\n  - Concept ACK means \"I agree in the general principle of this pull request\";\n  - Nit refers to trivial, often non-blocking issues.\n\nReviewers should include the commit hash which they reviewed in their comments.\n\nProject maintainers reserve the right to weigh the opinions of peer reviewers\nusing common sense judgement and also may weight based on meritocracy: Those\nthat have demonstrated a deeper commitment and understanding towards the project\n(over time) or have clear domain expertise may naturally have more weight, as\none would expect in all walks of life.\n\nWhere a patch set affects consensus critical code, the bar will be set much\nhigher in terms of discussion and peer review requirements, keeping in mind that\nmistakes could be very costly to the wider community. This includes refactoring\nof consensus critical code.\n\nWhere a patch set proposes to change the Bitcoin consensus, it must have been\ndiscussed extensively on the mailing list and IRC, be accompanied by a widely\ndiscussed BIP and have a generally widely perceived technical consensus of being\na worthwhile change based on the judgement of the maintainers.\n\n### Finding Reviewers\n\nAs most reviewers are themselves developers with their own projects, the review\nprocess can be quite lengthy, and some amount of patience is required. If you find\nthat you've been waiting for a pull request to be given attention for several\nmonths, there may be a number of reasons for this, some of which you can do something\nabout:\n\n  - It may be because of a feature freeze due to an upcoming release. During this time,\n    only bug fixes are taken into consideration. If your pull request is a new feature,\n    it will not be prioritized until the release is over. Wait for release.\n  - It may be because the changes you are suggesting do not appeal to people. Rather than\n    nits and critique, which require effort and means they care enough to spend time on your\n    contribution, thundering silence is a good sign of widespread (mild) dislike of a given change\n    (because people don't assume *others* won't actually like the proposal). Don't take\n    that personally, though! Instead, take another critical look at what you are suggesting\n    and see if it: changes too much, is too broad, doesn't adhere to the\n    [developer notes](doc/developer-notes.md), is dangerous or insecure, is messily written, etc.\n    Identify and address any of the issues you find. Then ask e.g. on IRC if someone could give\n    their opinion on the concept itself.\n  - It may be because your code is too complex for all but a few people. And those people\n    may not have realized your pull request even exists. A great way to find people who\n    are qualified and care about the code you are touching is the\n    [Git Blame feature](https://help.github.com/articles/tracing-changes-in-a-file/). Simply\n    find the person touching the code you are touching before you and see if you can find\n    them and give them a nudge. Don't be incessant about the nudging though.\n  - Finally, if all else fails, ask on IRC or elsewhere for someone to give your pull request\n    a look. If you think you've been waiting an unreasonably long amount of time (month+) for\n    no particular reason (few lines changed, etc), this is totally fine. Try to return the favor\n    when someone else is asking for feedback on their code, and universe balances out.\n\n\nRelease Policy\n--------------\n\nThe project leader is the release manager for each Bitcoin Core release.\n\nCopyright\n---------\n\nBy contributing to this repository, you agree to license your work under the \nMIT license unless specified otherwise in `contrib/debian/copyright` or at \nthe top of the file itself. Any work contributed where you are not the original \nauthor must contain its license header with the original author(s) and source.\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.115234375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2009-2018 The Bitcoin Core developers\nCopyright (c) 2009-2018 Bitcoin Developers\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 0.1572265625,
          "content": "Building Bitcoin\n================\n\nSee doc/build-*.md for instructions on building the various\nelements of the Bitcoin Core reference implementation of Bitcoin.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0546875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015-2019 LBRY Inc\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the\nfollowing conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 11.033203125,
          "content": "# Copyright (c) 2013-2016 The Bitcoin Core developers\n# Distributed under the MIT software license, see the accompanying\n# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n\nACLOCAL_AMFLAGS = -I build-aux/m4\nSUBDIRS = src\nif ENABLE_MAN\nSUBDIRS += doc/man\nendif\n.PHONY: deploy FORCE\n\nexport PYTHONPATH\n\nif BUILD_BITCOIN_LIBS\npkgconfigdir = $(libdir)/pkgconfig\npkgconfig_DATA = libbitcoinconsensus.pc\nendif\n\nBITCOIND_BIN=$(top_builddir)/src/$(BITCOIN_DAEMON_NAME)$(EXEEXT)\nBITCOIN_QT_BIN=$(top_builddir)/src/qt/$(BITCOIN_GUI_NAME)$(EXEEXT)\nBITCOIN_CLI_BIN=$(top_builddir)/src/$(BITCOIN_CLI_NAME)$(EXEEXT)\nBITCOIN_TX_BIN=$(top_builddir)/src/$(BITCOIN_TX_NAME)$(EXEEXT)\nBITCOIN_WIN_INSTALLER=$(PACKAGE)-$(PACKAGE_VERSION)-win$(WINDOWS_BITS)-setup$(EXEEXT)\n\nempty :=\nspace := $(empty) $(empty)\n\nOSX_APP=LBRYcrd-Qt.app\nOSX_VOLNAME = $(subst $(space),-,$(PACKAGE_NAME))\nOSX_DMG = $(OSX_VOLNAME).dmg\nOSX_BACKGROUND_SVG=background.svg\nOSX_BACKGROUND_IMAGE=background.tiff\nOSX_BACKGROUND_IMAGE_DPIS=36 72\nOSX_DSSTORE_GEN=$(top_srcdir)/contrib/macdeploy/custom_dsstore.py\nOSX_DEPLOY_SCRIPT=$(top_srcdir)/contrib/macdeploy/macdeployqtplus\nOSX_FANCY_PLIST=$(top_srcdir)/contrib/macdeploy/fancy.plist\nOSX_INSTALLER_ICONS=$(top_srcdir)/src/qt/res/icons/bitcoin.icns\nOSX_PLIST=$(top_builddir)/share/qt/Info.plist #not installed\nOSX_QT_TRANSLATIONS = da,de,es,hu,ru,uk,zh_CN,zh_TW\n\nDIST_DOCS = $(wildcard doc/*.md) $(wildcard doc/release-notes/*.md)\nDIST_CONTRIB = $(top_srcdir)/contrib/bitcoin-cli.bash-completion \\\n\t       $(top_srcdir)/contrib/bitcoin-tx.bash-completion \\\n\t       $(top_srcdir)/contrib/bitcoind.bash-completion \\\n\t       $(top_srcdir)/contrib/init \\\n\t       $(top_srcdir)/contrib/install_db4.sh\nDIST_SHARE = \\\n  $(top_srcdir)/share/genbuild.sh \\\n  $(top_srcdir)/share/rpcauth\n\nBIN_CHECKS=$(top_srcdir)/contrib/devtools/symbol-check.py \\\n           $(top_srcdir)/contrib/devtools/security-check.py\n\nWINDOWS_PACKAGING = $(top_srcdir)/share/pixmaps/bitcoin.ico \\\n  $(top_srcdir)/share/pixmaps/nsis-header.bmp \\\n  $(top_srcdir)/share/pixmaps/nsis-wizard.bmp \\\n  $(top_srcdir)/doc/README_windows.txt\n\nOSX_PACKAGING = $(OSX_DEPLOY_SCRIPT) $(OSX_FANCY_PLIST) $(OSX_INSTALLER_ICONS) \\\n  $(top_srcdir)/contrib/macdeploy/$(OSX_BACKGROUND_SVG) \\\n  $(OSX_DSSTORE_GEN) \\\n  $(top_srcdir)/contrib/macdeploy/detached-sig-apply.sh \\\n  $(top_srcdir)/contrib/macdeploy/detached-sig-create.sh\n\nCOVERAGE_INFO = baseline.info \\\n  test_bitcoin_filtered.info total_coverage.info \\\n  baseline_filtered.info functional_test.info functional_test_filtered.info \\\n  test_bitcoin_coverage.info test_bitcoin.info\n\ndist-hook:\n\t-$(GIT) archive --format=tar HEAD -- src/clientversion.cpp | $(AMTAR) -C $(top_distdir) -xf -\n\n$(BITCOIN_WIN_INSTALLER): all-recursive\n\t$(MKDIR_P) $(top_builddir)/release\n\tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIND_BIN) $(top_builddir)/release\n\tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_QT_BIN) $(top_builddir)/release\n\tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_CLI_BIN) $(top_builddir)/release\n\tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_TX_BIN) $(top_builddir)/release\n\t@test -f $(MAKENSIS) && $(MAKENSIS) -V2 $(top_builddir)/share/setup.nsi || \\\n\t  echo error: could not build $@\n\t@echo built $@\n\n$(OSX_APP)/Contents/PkgInfo:\n\t$(MKDIR_P) $(@D)\n\t@echo \"APPL????\" > $@\n\n$(OSX_APP)/Contents/Resources/empty.lproj:\n\t$(MKDIR_P) $(@D)\n\t@touch $@ \n\n$(OSX_APP)/Contents/Info.plist: $(OSX_PLIST)\n\t$(MKDIR_P) $(@D)\n\t$(INSTALL_DATA) $< $@\n\n$(OSX_APP)/Contents/Resources/bitcoin.icns: $(OSX_INSTALLER_ICONS)\n\t$(MKDIR_P) $(@D)\n\t$(INSTALL_DATA) $< $@\n\n$(OSX_APP)/Contents/MacOS/Bitcoin-Qt: all-recursive\n\t$(MKDIR_P) $(@D)\n\tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM)  $(BITCOIN_QT_BIN) $@\n\n$(OSX_APP)/Contents/Resources/Base.lproj/InfoPlist.strings:\n\t$(MKDIR_P) $(@D)\n\techo '{\tCFBundleDisplayName = \"$(PACKAGE_NAME)\"; CFBundleName = \"$(PACKAGE_NAME)\"; }' > $@\n\nOSX_APP_BUILT=$(OSX_APP)/Contents/PkgInfo $(OSX_APP)/Contents/Resources/empty.lproj \\\n  $(OSX_APP)/Contents/Resources/bitcoin.icns $(OSX_APP)/Contents/Info.plist \\\n  $(OSX_APP)/Contents/MacOS/Bitcoin-Qt $(OSX_APP)/Contents/Resources/Base.lproj/InfoPlist.strings\n\nosx_volname:\n\techo $(OSX_VOLNAME) >$@\n\nif BUILD_DARWIN\n$(OSX_DMG): $(OSX_APP_BUILT) $(OSX_PACKAGING) $(OSX_BACKGROUND_IMAGE)\n\t$(PYTHON) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) -add-qt-tr $(OSX_QT_TRANSLATIONS) -translations-dir=$(QT_TRANSLATION_DIR) -dmg -fancy $(OSX_FANCY_PLIST) -verbose 2 -volname $(OSX_VOLNAME)\n\n$(OSX_BACKGROUND_IMAGE).png: contrib/macdeploy/$(OSX_BACKGROUND_SVG)\n\tsed 's/PACKAGE_NAME/$(PACKAGE_NAME)/' < \"$<\" | $(RSVG_CONVERT) -f png -d 36 -p 36 -o $@\n$(OSX_BACKGROUND_IMAGE)@2x.png: contrib/macdeploy/$(OSX_BACKGROUND_SVG)\n\tsed 's/PACKAGE_NAME/$(PACKAGE_NAME)/' < \"$<\" | $(RSVG_CONVERT) -f png -d 72 -p 72 -o $@\n$(OSX_BACKGROUND_IMAGE): $(OSX_BACKGROUND_IMAGE).png $(OSX_BACKGROUND_IMAGE)@2x.png\n\ttiffutil -cathidpicheck $^ -out $@\n\ndeploydir: $(OSX_DMG)\nelse\nAPP_DIST_DIR=$(top_builddir)/dist\nAPP_DIST_EXTRAS=$(APP_DIST_DIR)/.background/$(OSX_BACKGROUND_IMAGE) $(APP_DIST_DIR)/.DS_Store $(APP_DIST_DIR)/Applications\n\n$(APP_DIST_DIR)/Applications:\n\t@rm -f $@\n\t@cd $(@D); $(LN_S) /Applications $(@F)\n\n$(APP_DIST_EXTRAS): $(APP_DIST_DIR)/$(OSX_APP)/Contents/MacOS/Bitcoin-Qt\n\n$(OSX_DMG): $(APP_DIST_EXTRAS)\n\t$(GENISOIMAGE) -no-cache-inodes -D -l -probe -V \"$(OSX_VOLNAME)\" -no-pad -r -dir-mode 0755 -apple -o $@ dist\n\ndpi%.$(OSX_BACKGROUND_IMAGE): contrib/macdeploy/$(OSX_BACKGROUND_SVG)\n\tsed 's/PACKAGE_NAME/$(PACKAGE_NAME)/' < \"$<\" | $(RSVG_CONVERT) -f png -d $* -p $* | $(IMAGEMAGICK_CONVERT) - $@\nOSX_BACKGROUND_IMAGE_DPIFILES := $(foreach dpi,$(OSX_BACKGROUND_IMAGE_DPIS),dpi$(dpi).$(OSX_BACKGROUND_IMAGE))\n$(APP_DIST_DIR)/.background/$(OSX_BACKGROUND_IMAGE): $(OSX_BACKGROUND_IMAGE_DPIFILES)\n\t$(MKDIR_P) $(@D)\n\t$(TIFFCP) -c none $(OSX_BACKGROUND_IMAGE_DPIFILES) $@\n\n$(APP_DIST_DIR)/.DS_Store: $(OSX_DSSTORE_GEN)\n\t$(PYTHON) $< \"$@\" \"$(OSX_VOLNAME)\"\n\n$(APP_DIST_DIR)/$(OSX_APP)/Contents/MacOS/Bitcoin-Qt: $(OSX_APP_BUILT) $(OSX_PACKAGING)\n\tINSTALLNAMETOOL=$(INSTALLNAMETOOL)  OTOOL=$(OTOOL) STRIP=$(STRIP) $(PYTHON) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) -translations-dir=$(QT_TRANSLATION_DIR) -add-qt-tr $(OSX_QT_TRANSLATIONS) -verbose 2\n\ndeploydir: $(APP_DIST_EXTRAS)\nendif\n\nif TARGET_DARWIN\nappbundle: $(OSX_APP_BUILT)\ndeploy: $(OSX_DMG)\nendif\nif TARGET_WINDOWS\ndeploy: $(BITCOIN_WIN_INSTALLER)\nendif\n\n$(BITCOIN_QT_BIN): FORCE\n\t$(MAKE) -C src qt/$(@F)\n\n$(BITCOIND_BIN): FORCE\n\t$(MAKE) -C src $(@F)\n\n$(BITCOIN_CLI_BIN): FORCE\n\t$(MAKE) -C src $(@F)\n\n$(BITCOIN_TX_BIN): FORCE\n\t$(MAKE) -C src $(@F)\n\nif USE_LCOV\nLCOV_FILTER_PATTERN=-p \"/usr/include/\" -p \"src/leveldb/\" -p \"src/bench/\" -p \"src/univalue\" -p \"src/crypto/ctaes\" -p \"src/secp256k1\"\n\nbaseline.info:\n\t$(LCOV) -c -i -d $(abs_builddir)/src -o $@\n\nbaseline_filtered.info: baseline.info\n\t$(abs_builddir)/contrib/filter-lcov.py $(LCOV_FILTER_PATTERN) $< $@\n\t$(LCOV) -a $@ $(LCOV_OPTS) -o $@\n\ntest_bitcoin.info: baseline_filtered.info\n\t$(MAKE) -C src/ check\n\t$(LCOV) -c $(LCOV_OPTS) -d $(abs_builddir)/src -t test_bitcoin -o $@\n\t$(LCOV) -z $(LCOV_OPTS) -d $(abs_builddir)/src\n\ntest_bitcoin_filtered.info: test_bitcoin.info\n\t$(abs_builddir)/contrib/filter-lcov.py $(LCOV_FILTER_PATTERN) $< $@\n\t$(LCOV) -a $@ $(LCOV_OPTS) -o $@\n\nfunctional_test.info: test_bitcoin_filtered.info\n\t-@TIMEOUT=15 test/functional/test_runner.py $(EXTENDED_FUNCTIONAL_TESTS)\n\t$(LCOV) -c $(LCOV_OPTS) -d $(abs_builddir)/src --t functional-tests -o $@\n\t$(LCOV) -z $(LCOV_OPTS) -d $(abs_builddir)/src\n\nfunctional_test_filtered.info: functional_test.info\n\t$(abs_builddir)/contrib/filter-lcov.py $(LCOV_FILTER_PATTERN) $< $@\n\t$(LCOV) -a $@ $(LCOV_OPTS) -o $@\n\ntest_bitcoin_coverage.info: baseline_filtered.info test_bitcoin_filtered.info\n\t$(LCOV) -a $(LCOV_OPTS) baseline_filtered.info -a test_bitcoin_filtered.info -o $@\n\ntotal_coverage.info: test_bitcoin_filtered.info functional_test_filtered.info\n\t$(LCOV) -a $(LCOV_OPTS) baseline_filtered.info -a test_bitcoin_filtered.info -a functional_test_filtered.info -o $@ | $(GREP) \"\\%\" | $(AWK) '{ print substr($$3,2,50) \"/\" $$5 }' > coverage_percent.txt\n\ntest_bitcoin.coverage/.dirstamp:  test_bitcoin_coverage.info\n\t$(GENHTML) -s $(LCOV_OPTS) $< -o $(@D)\n\t@touch $@\n\ntotal.coverage/.dirstamp: total_coverage.info\n\t$(GENHTML) -s $(LCOV_OPTS) $< -o $(@D)\n\t@touch $@\n\ncov: test_bitcoin.coverage/.dirstamp total.coverage/.dirstamp\n\nendif\n\ndist_noinst_SCRIPTS = autogen.sh\n\nEXTRA_DIST = $(DIST_SHARE) test/functional/test_runner.py test/functional $(DIST_CONTRIB) $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING) $(BIN_CHECKS)\n\nEXTRA_DIST += \\\n    test/util/bitcoin-util-test.py \\\n    test/util/data/bitcoin-util-test.json \\\n    test/util/data/blanktxv1.hex \\\n    test/util/data/blanktxv1.json \\\n    test/util/data/blanktxv2.hex \\\n    test/util/data/blanktxv2.json \\\n    test/util/data/tt-delin1-out.hex \\\n    test/util/data/tt-delin1-out.json \\\n    test/util/data/tt-delout1-out.hex \\\n    test/util/data/tt-delout1-out.json \\\n    test/util/data/tt-locktime317000-out.hex \\\n    test/util/data/tt-locktime317000-out.json \\\n    test/util/data/tx394b54bb.hex \\\n    test/util/data/txcreate1.hex \\\n    test/util/data/txcreate1.json \\\n    test/util/data/txcreate2.hex \\\n    test/util/data/txcreate2.json \\\n    test/util/data/txcreatedata1.hex \\\n    test/util/data/txcreatedata1.json \\\n    test/util/data/txcreatedata2.hex \\\n    test/util/data/txcreatedata2.json \\\n    test/util/data/txcreatedata_seq0.hex \\\n    test/util/data/txcreatedata_seq0.json \\\n    test/util/data/txcreatedata_seq1.hex \\\n    test/util/data/txcreatedata_seq1.json \\\n    test/util/data/txcreatemultisig1.hex \\\n    test/util/data/txcreatemultisig1.json \\\n    test/util/data/txcreatemultisig2.hex \\\n    test/util/data/txcreatemultisig2.json \\\n    test/util/data/txcreatemultisig3.hex \\\n    test/util/data/txcreatemultisig3.json \\\n    test/util/data/txcreatemultisig4.hex \\\n    test/util/data/txcreatemultisig4.json \\\n    test/util/data/txcreatemultisig5.json \\\n    test/util/data/txcreateoutpubkey1.hex \\\n    test/util/data/txcreateoutpubkey1.json \\\n    test/util/data/txcreateoutpubkey2.hex \\\n    test/util/data/txcreateoutpubkey2.json \\\n    test/util/data/txcreateoutpubkey3.hex \\\n    test/util/data/txcreateoutpubkey3.json \\\n    test/util/data/txcreatescript1.hex \\\n    test/util/data/txcreatescript1.json \\\n    test/util/data/txcreatescript2.hex \\\n    test/util/data/txcreatescript2.json \\\n    test/util/data/txcreatescript3.hex \\\n    test/util/data/txcreatescript3.json \\\n    test/util/data/txcreatescript4.hex \\\n    test/util/data/txcreatescript4.json \\\n    test/util/data/txcreatesignv1.hex \\\n    test/util/data/txcreatesignv1.json \\\n    test/util/data/txcreatesignv2.hex \\\n    test/util/rpcauth-test.py\n\nCLEANFILES = $(OSX_DMG) $(BITCOIN_WIN_INSTALLER)\n\n.INTERMEDIATE: $(COVERAGE_INFO)\n\nDISTCHECK_CONFIGURE_FLAGS = --enable-man\n\ndoc/doxygen/.stamp: doc/Doxyfile FORCE\n\t$(MKDIR_P) $(@D)\n\t$(DOXYGEN) $^\n\t$(AM_V_at) touch $@\n\nif HAVE_DOXYGEN\ndocs: doc/doxygen/.stamp\nelse\ndocs:\n\t@echo \"error: doxygen not found\"\nendif\n\nclean-docs:\n\trm -rf doc/doxygen\n\nclean-local: clean-docs\n\trm -rf coverage_percent.txt test_bitcoin.coverage/ total.coverage/ test/tmp/ cache/ $(OSX_APP)\n\trm -rf test/functional/__pycache__ test/functional/test_framework/__pycache__ test/cache\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.57421875,
          "content": "# LBRYcrd - The LBRY blockchain\n\n[![Build Status](https://travis-ci.org/lbryio/lbrycrd.svg?branch=master)](https://travis-ci.org/lbryio/lbrycrd)\n[![MIT licensed](https://img.shields.io/dub/l/vibe-d.svg?style=flat)](https://github.com/lbryio/lbry-desktop/blob/master/LICENSE)\n\nLBRYcrd uses a blockchain similar to bitcoin's to implement an index and payment system for content on the LBRY network. It is a fork of [bitcoin core](https://github.com/bitcoin/bitcoin). In addition to the libraries used by bitcoin, LBRYcrd also uses [icu4c](https://github.com/unicode-org/icu/tree/master/icu4c).\n\nPlease read the [lbry.tech overview](https://lbry.tech/overview) for a general understanding of the LBRY pieces. From there you could read the [LBRY spec](https://spec.lbry.com/) for specifics on the data in the blockchain.\n\n## Table of Contents\n\n1. [Installation](#installation)\n2. [Usage](#usage)\n   1. [Examples](#examples)\n   2. [Data directory](#data-directory)\n3. [Running from Source](#running-from-source)\n   1. [Ubuntu with pulled static dependencies](#ubuntu-with-pulled-static-dependencies)\n   2. [Ubuntu with local shared dependencies](#ubuntu-with-local-shared-dependencies)\n   3. [MacOS (cross-compiled)](<#macos-(cross-compiled)>)\n   4. [MacOS with local shared dependencies](#macos-with-local-shared-dependencies)\n   5. [Windows (cross-compiled)](<#windows-(cross-compiled)>)\n   6. [Use with CLion](#use-with-clion)\n4. [Contributing](#contributing)\n   - [Testnet](#testnet)\n5. [Mailing List](#mailing-list)\n6. [License](#license)\n7. [Security](#security)\n8. [Contact](#contact)\n\n## Installation\n\nLatest binaries are available from https://github.com/lbryio/lbrycrd/releases. There is no installation procedure; the CLI binaries will run as-is and will have any uncommon dependencies statically linked into the binary. The QT GUI is not supported. LBRYcrd is distributed as a collection of executable files; traditional installers are not provided.\n\n## Usage\n\nThe `lbrycrdd` executable will start a LBRYcrd node and connect you to the LBRYcrd network. Use the `lbrycrd-cli` executable\nto interact with lbrycrdd through the command line. Command-line help for both executables are available through\nthe \"--help\" flag (e.g. `lbrycrdd --help`). Examples:\n\n#### Examples\n\nRun `./lbrycrdd -server -daemon` to start lbrycrdd in the background.\n\nRun `./lbrycrd-cli -getinfo` to check for some basic information about your LBRYcrd node.\n\nRun `./lbrycrd-cli help` to get a list of all commands that you can run. To get help on specific commands run `./lbrycrd-cli [command_name] help`\n\nTest locally:\n\n```sh\n./lbrycrdd -server -regtest -txindex  # run this in its own window\n./lbrycrd-cli -regtest generate 120   # mine 20 spendable coins\n./lbrycrd-cli -regtest claimname my_name deadbeef 1 # hold a name claim with 1 coin\n./lbrycrd-cli -regtest generate 1     # get that claim into the block\n./lbrycrd-cli -regtest listnameclaims # show owned claims\n./lbrycrd-cli -regtest getclaimsforname my_name # show claims under that name\n./lbrycrd-cli -regtest stop           # kill lbrycrdd\nrm -fr ~/.lbrycrd/regtest/            # destroy regtest data\n```\n\nFor further understanding of a \"regtest\" setup, see the local stack setup instructions here: https://lbry.tech/resources/regtest-setup\n\nThe CLI help is also browsable online at https://lbry.tech/api/blockchain\n\n#### Data directory\n\nLbrycrdd will use the below default data directories (changeable with -datadir):\n\n```sh\nWindows:  %APPDATA%\\lbrycrd\nMac:      ~/Library/Application Support/lbrycrd\nUnix:     ~/.lbrycrd\n```\n\nThe data directory contains various things such as your default wallet (wallet.dat), debug logs (debug.log), and blockchain data. You can optionally create a configuration file lbrycrd.conf in the default data directory which will be used by default when running lbrycrdd.\n\nFor a list of configuration parameters, run `./lbrycrdd --help`. Below is a sample lbrycrd.conf to enable JSON RPC server on lbrycrdd.\n\n```sh\nrpcuser=lbry\nrpcpassword=xyz123456790\ndaemon=1\nserver=1\ntxindex=1\n```\n\n## Running from Source\n\nThe easiest way to compile is to utilize the Docker image that contains the necessary compilers: lbry/build_lbrycrd. This will allow you to reproduce the build as made on our build servers. In this sample we map a local lbrycrd folder and a local ccache folder inside the image:\n```sh\ngit clone https://github.com/lbryio/lbrycrd.git\ncd lbrycrd\ndocker run -v \"$(pwd):/lbrycrd\" --rm -v \"${HOME}/ccache:/ccache\" -w /lbrycrd -e CCACHE_DIR=/ccache lbry/build_lbrycrd packaging/build_linux_64bit.sh\n```\n\nSome examples of compiling directly:\n\n#### Ubuntu with pulled static dependencies\n\n```sh\nsudo apt install build-essential git libtool autotools-dev automake pkg-config bsdmainutils curl ca-certificates\ngit clone https://github.com/lbryio/lbrycrd.git\ncd lbrycrd\n./packaging/build_linux_64bit.sh\n./src/test/test_lbrycrd\n\n```\n\nOther Linux distros would be similar. The build shell script is fairly trivial; take a peek at its contents.\n\n#### Ubuntu with local shared dependencies\n\nNote: using untested dependencies may lead to conflicting results.\n\n```sh\nsudo add-apt-repository ppa:bitcoin/bitcoin\nsudo apt-get update\nsudo apt-get install libdb4.8-dev libdb4.8++-dev libicu-dev libssl-dev libevent-dev \\\n                     build-essential git libtool autotools-dev automake pkg-config bsdmainutils curl ca-certificates \\\n                     libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev\n\n# optionally include libminiupnpc-dev libzmq3-dev\n\ngit clone https://github.com/lbryio/lbrycrd.git\ncd lbrycrd\n./autogen.sh\n./configure --enable-static --disable-shared --with-pic --without-gui CXXFLAGS=\"-O3 -march=native\"\nmake -j$(nproc)\n./src/lbrycrdd -server ...\n\n```\n\n#### MacOS (cross-compiled)\n\n```sh\nsudo apt-get install clang llvm git libtool autotools-dev automake pkg-config bsdmainutils curl ca-certificates \\\n                     libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev\n\ngit clone https://github.com/lbryio/lbrycrd.git\ncd lbrycrd\n# download MacOS SDK from your favorite source\nmkdir depends/SDKs\ntar ... extract SDK to depends/SDKs/MacOSX10.11.sdk\n./packaging/build_darwin_64bit.sh\n\n```\n\nLook in packaging/build_darwin_64bit.sh for further understanding.\n\n#### MacOS with local shared dependencies\n\n```sh\nbrew install boost berkeley-db@4 icu4c libevent\n# fix conflict with gawk pulled first:\nbrew reinstall readline\nbrew reinstall gawk\n\ngit clone https://github.com/lbryio/lbrycrd.git\ncd lbrycrd/depends\nmake NO_QT=1\ncd ..\n./autogen.sh\nCONFIG_SITE=$(pwd)/depends/x86_64-apple-darwin15.6.0/share/config.site ./configure --enable-static --disable-shared --with-pic --without-gui --enable-reduce-exports CXXFLAGS=-O2\nmake -j$(sysctl -n hw.ncpu)\n\n```\n\n#### Windows (cross-compiled)\n\nCompiling on MS Windows (outside of WSL) is not supported. The Windows build is cross-compiled from Linux like so:\n\n```sh\nsudo apt-get install build-essential git libtool autotools-dev automake pkg-config bsdmainutils curl ca-certificates \\\n                     g++-mingw-w64-x86-64 mingw-w64-x86-64-dev\n\nupdate-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix\n\ngit clone https://github.com/lbryio/lbrycrd.git\ncd lbrycrd\n./packaging/build_windows_64bit.sh\n\n```\n\nIf you encounter any errors, please check `doc/build-*.md` for further instructions. If you're still stuck, [create an issue](https://github.com/lbryio/lbrycrd/issues/new) with the output of that command, your system info, and any other information you think might be helpful. The scripts in the packaging folder are simple and will grant extra light on the build process as needed.\n\n#### Use with CLion\n\nCLion has not traditionally supported Autotools projects, although some progress on that is now in the works. We do include a cmake build file for compiling lbrycrd. See contrib/cmake. Alas, CLion doesn't support external projects in cmake, so that particular approach is also insufficient. CLion does support \"compile_commands.json\" projects. Fortunately, this can be easily generated for lbrycrd like so:\n\n```sh\npip install --user compiledb\n./autogen.sh && ./configure --enable-static=no --enable-shared --with-pic --without-gui CXXFLAGS=\"-O0 -g\" CFLAGS=\"-O0 -g\" # or whatever normal lbrycrd config\ncompiledb make -j10\n```\n\nThen open the newly generated compile_commands.json file as a project in CLion. Debugging is supported if you compiled with `-g`. To enable that you will need to create a target in CLion by going to File -> Settings -> Build -> Custom Build Targets. Add an empty target with your choice of name. From there you can go to \"Edit Configurations\", typically found in a drop-down at the top of the editor. Add a Custom Build Application, select your new target, select the compiled file (i.e. test_lbrycrd or lbrycrdd, etc), and then add any necessary command line parameters. Ensure that there is nothing in the \"Before launch\" section.\n\n## Contributing\n\nContributions to this project are welcome, encouraged, and compensated. For more details, see [https://lbry.tech/contribute](https://lbry.tech/contribute)\n\nWe follow the same coding guidelines as documented by Bitcoin Core, see [here](/doc/developer-notes.md). To run an automated code formatting check, try:\n`git diff -U0 master -- '*.h' '*.cpp' | ./contrib/devtools/clang-format-diff.py -p1`. This will check any commits not on master for proper code formatting.\nWe try to avoid altering parts of the code that is inherited from Bitcoin Core unless absolutely necessary. This will make it easier to merge changes from Bitcoin Core. If commits are expected not to be merged upstream (i.e. we broke up a commit from Bitcoin Core in order to use a single feature in it), the commit message must contain the string \"NOT FOR UPSTREAM MERGE\".\n\nThe `master` branch is regularly built and tested, but is not guaranteed to be\ncompletely stable. [Releases](https://github.com/lbryio/lbrycrd/releases) are created\nregularly to indicate new official, stable release versions.\n\nTesting and code review is the bottleneck for development; we get more pull\nrequests than we can review and test on short notice. Please be patient and help out by testing\nother people's pull requests, and remember this is a security-critical project where any mistake might cost people\nlots of money. Developers are strongly encouraged to write [unit tests](/src/test/README.md) for new code and to\nsubmit new unit tests for old code. Unit tests are compiled by default and can be run with `src/test/test_lbrycrd`\n\nThe Travis CI system makes sure that every pull request is built, and that unit and sanity tests are automatically run. See https://travis-ci.org/lbryio/lbrycrd\n\n### Testnet\n\nTestnet is maintained for testing purposes and can be accessed using the command `./lbrycrdd -testnet`. If you would like to obtain testnet credits, please contact brannon@lbry.com or grin@lbry.com .\n\nIt is easy to solo mine on testnet. (It's easy on mainnet too, but much harder to win.) For instructions see  [SGMiner](https://github.com/lbryio/sgminer-gm) and [Mining Contributions](https://github.com/lbryio/lbrycrd/tree/master/contrib/mining) \n\n## Mailing List\n\nWe maintain a mailing list for notifications of upgrades, security issues, and soft/hard forks. To join, visit [https://lbry.com/forklist](https://lbry.com/forklist).\n\n## License\n\nThis project is MIT licensed. For the full license, see [LICENSE](LICENSE).\n\n## Security\n\nWe take security seriously. Please contact [security@lbry.com](mailto:security@lbry.com) regarding any security issues.\nOur PGP key is [here](https://lbry.com/faq/pgp-key) if you need it.\n\n## Contact\n\nThe primary contact for this project is [@BrannonKing](https://github.com/BrannonKing) (brannon@lbry.com)\n"
        },
        {
          "name": "autogen.sh",
          "type": "blob",
          "size": 0.53125,
          "content": "#!/bin/sh\n# Copyright (c) 2013-2016 The Bitcoin Core developers\n# Distributed under the MIT software license, see the accompanying\n# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n\nexport LC_ALL=C\nset -e\nsrcdir=\"$(dirname $0)\"\ncd \"$srcdir\"\nif [ -z ${LIBTOOLIZE} ] && GLIBTOOLIZE=\"$(which glibtoolize 2>/dev/null)\"; then\n  LIBTOOLIZE=\"${GLIBTOOLIZE}\"\n  export LIBTOOLIZE\nfi\nwhich autoreconf >/dev/null || \\\n  (echo \"configuration failed, please install autoconf first\" && exit 1)\nautoreconf --install --force --warnings=all\n"
        },
        {
          "name": "build-aux",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 1.84375,
          "content": "#!/usr/bin/env bash\n\nset -o pipefail\n\nfunction HELP {\n    echo \"Use this command to build lbrycrd.\"\n    echo \"Dependencies will be pulled and built first.\"\n    echo \"Use autogen & configure directly to avoid this and use system shared libraries instead.\"\n    echo\n    echo \"Optional arguments:\"\n    echo \"-jN: number of parallel build jobs\"\n    echo \"-q: compile the QT GUI (not working at present)\"\n    echo \"-d: force a rebuild of dependencies\"\n    echo \"-u: run the unit tests when done\"\n    echo \"-g: include debug symbols\"\n    echo \"-h: show help\"\n    exit 1\n}\n\nREBUILD_DEPENDENCIES=false\nRUN_UNIT_TESTS=false\nCOMPILE_WITH_DEBUG=false\nDO_NOT_COMPILE_THE_GUI=\"NO_QT=1\"\nWITH_COMPILE_THE_GUI=no\n\nif test -z $PARALLEL_JOBS; then\n    PARALLEL_JOBS=$(expr $(getconf _NPROCESSORS_ONLN) / 2 + 1)\nfi\n\nwhile getopts j:qdugh FLAG; do\n  case ${FLAG} in\n    j)\n      PARALLEL_JOBS=$OPTARG\n      ;;\n    q)\n      DO_NOT_COMPILE_THE_GUI=\n      WITH_COMPILE_THE_GUI=qt5\n      ;;\n    g)\n      COMPILE_WITH_DEBUG=true\n      ;;\n    u)\n      RUN_UNIT_TESTS=true\n      ;;\n    d)\n      REBUILD_DEPENDENCIES=true\n      ;;\n    h)\n      HELP\n      ;;\n    \\?)\n      HELP\n      ;;\n  esac\ndone\n\necho \"Compiling with ${PARALLEL_JOBS} jobs in parallel.\"\n\nBUILD_FLAGS=(CXXFLAGS=\"-O3 -march=native\")\nif test \"$COMPILE_WITH_DEBUG\" = true; then\n    BUILD_FLAGS=(--with-debug CXXFLAGS=\"-Og -g\")\nfi\n\ncd depends\nif test \"$REBUILD_DEPENDENCIES\" = true; then\n    make clean\nfi\nmake -j${PARALLEL_JOBS} ${DO_NOT_COMPILE_THE_GUI} V=1\ncd ..\n\nLC_ALL=C autoreconf --install\n\nCONFIG_SITE=$(pwd)/depends/$($(pwd)/depends/config.guess)/share/config.site ./configure --enable-reduce-exports \\\n    --enable-static --disable-shared --with-pic --with-gui=${WITH_COMPILE_THE_GUI} \"${BUILD_FLAGS[@]}\"\n\nif test $? -eq 0; then\n    make -j${PARALLEL_JOBS}\nfi\n\nif test $? -eq 0 && \"$RUN_UNIT_TESTS\" = true; then\n    ./src/test/test_lbrycrd\nfi"
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 54.421875,
          "content": "dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\nAC_PREREQ([2.60])\ndefine(_CLIENT_VERSION_MAJOR, 0)\ndefine(_CLIENT_VERSION_MINOR, 17)\ndefine(_CLIENT_VERSION_REVISION, 3)\ndefine(_CLIENT_VERSION_BUILD, 3)\ndefine(_CLIENT_VERSION_IS_RELEASE, true)\ndefine(_COPYRIGHT_YEAR, 2021)\ndefine(_COPYRIGHT_HOLDERS,[The %s developers])\ndefine(_COPYRIGHT_HOLDERS_SUBSTITUTION,[[LBRYcrd Core]])\nAC_INIT([LBRYcrd Core],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[https://github.com/lbryio/lbrycrd/issues],[lbrycrd],[https://lbry.com/])\nAC_CONFIG_SRCDIR([src/validation.cpp])\nAC_CONFIG_HEADERS([src/config/bitcoin-config.h])\nAC_CONFIG_AUX_DIR([build-aux])\nAC_CONFIG_MACRO_DIR([build-aux/m4])\n\nBITCOIN_DAEMON_NAME=lbrycrdd\nBITCOIN_GUI_NAME=lbrycrd-qt\nBITCOIN_CLI_NAME=lbrycrd-cli\nBITCOIN_TX_NAME=lbrycrd-tx\n\ndnl Unless the user specified ARFLAGS, force it to be cr\nAC_ARG_VAR(ARFLAGS, [Flags for the archiver, defaults to <cr> if not set])\nif test \"x${ARFLAGS+set}\" != \"xset\"; then\n  ARFLAGS=\"cr\"\nfi\n\nAC_CANONICAL_HOST\n\nAH_TOP([#ifndef BITCOIN_CONFIG_H])\nAH_TOP([#define BITCOIN_CONFIG_H])\nAH_BOTTOM([#endif //BITCOIN_CONFIG_H])\n\ndnl faketime breaks configure and is only needed for make. Disable it here.\nunset FAKETIME\n\ndnl Automake init set-up and checks\nAM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n\ndnl faketime messes with timestamps and causes configure to be re-run.\ndnl --disable-maintainer-mode can be used to bypass this.\nAM_MAINTAINER_MODE([enable])\n\ndnl make the compilation flags quiet unless V=1 is used\nm4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n\ndnl Compiler checks (here before libtool).\nif test \"x${CXXFLAGS+set}\" = \"xset\"; then\n  CXXFLAGS_overridden=yes\nelse\n  CXXFLAGS_overridden=no\nfi\nAC_PROG_CXX\n\ndnl By default, libtool for mingw refuses to link static libs into a dll for\ndnl fear of mixing pic/non-pic objects, and import/export complications. Since\ndnl we have those under control, re-enable that functionality.\ncase $host in\n  *mingw*)\n     lt_cv_deplibs_check_method=\"pass_all\"\n  ;;\nesac\ndnl Require C++11 compiler (no GNU extensions)\nAX_CXX_COMPILE_STDCXX([11], [noext], [mandatory], [nodefault])\ndnl Check if -latomic is required for <std::atomic>\nCHECK_ATOMIC\n\ndnl Unless the user specified OBJCXX, force it to be the same as CXX. This ensures\ndnl that we get the same -std flags for both.\nm4_ifdef([AC_PROG_OBJCXX],[\nif test \"x${OBJCXX+set}\" = \"x\"; then\n  OBJCXX=\"${CXX}\"\nfi\nAC_PROG_OBJCXX\n])\n\ndnl Libtool init checks.\nLT_INIT([pic-only])\n\ndnl Check/return PATH for base programs.\nAC_PATH_TOOL(AR, ar)\nAC_PATH_TOOL(RANLIB, ranlib)\nAC_PATH_TOOL(STRIP, strip)\nAC_PATH_TOOL(GCOV, gcov)\nAC_PATH_PROG(LCOV, lcov)\ndnl Python 3.x is supported from 3.4 on (see https://github.com/bitcoin/bitcoin/issues/7893)\nAC_PATH_PROGS([PYTHON], [python3.7 python3.6 python3.5 python3.4 python3 python])\nAC_PATH_PROG(GENHTML, genhtml)\nAC_PATH_PROG([GIT], [git])\nAC_PATH_PROG(CCACHE,ccache)\nAC_PATH_PROG(XGETTEXT,xgettext)\nAC_PATH_PROG(HEXDUMP,hexdump)\nAC_PATH_TOOL(READELF, readelf)\nAC_PATH_TOOL(CPPFILT, c++filt)\nAC_PATH_TOOL(OBJCOPY, objcopy)\nAC_PATH_PROG(DOXYGEN, doxygen)\nif test -z \"$DOXYGEN\"; then\n   AC_MSG_WARN([Doxygen not found])\nfi\nAM_CONDITIONAL([HAVE_DOXYGEN], [test -n \"$DOXYGEN\"])\n\nAC_ARG_VAR(PYTHONPATH, Augments the default search path for python module files)\n\n# Enable wallet\nAC_ARG_ENABLE([wallet],\n  [AS_HELP_STRING([--disable-wallet],\n  [disable wallet (enabled by default)])],\n  [enable_wallet=$enableval],\n  [enable_wallet=yes])\n\nAC_ARG_WITH([miniupnpc],\n  [AS_HELP_STRING([--with-miniupnpc],\n  [enable UPNP (default is yes if libminiupnpc is found)])],\n  [use_upnp=$withval],\n  [use_upnp=auto])\n\nAC_ARG_ENABLE([upnp-default],\n  [AS_HELP_STRING([--enable-upnp-default],\n  [if UPNP is enabled, turn it on at startup (default is no)])],\n  [use_upnp_default=$enableval],\n  [use_upnp_default=no])\n\nAC_ARG_ENABLE(tests,\n    AS_HELP_STRING([--disable-tests],[do not compile tests (default is to compile)]),\n    [use_tests=$enableval],\n    [use_tests=yes])\n\nAC_ARG_ENABLE(gui-tests,\n    AS_HELP_STRING([--disable-gui-tests],[do not compile GUI tests (default is to compile if GUI and tests enabled)]),\n    [use_gui_tests=$enableval],\n    [use_gui_tests=$use_tests])\n\nAC_ARG_ENABLE(bench,\n    AS_HELP_STRING([--disable-bench],[do not compile benchmarks (default is to compile)]),\n    [use_bench=$enableval],\n    [use_bench=yes])\n\nAC_ARG_ENABLE([extended-functional-tests],\n    AS_HELP_STRING([--enable-extended-functional-tests],[enable expensive functional tests when using lcov (default no)]),\n    [use_extended_functional_tests=$enableval],\n    [use_extended_functional_tests=no])\n\nAC_ARG_WITH([qrencode],\n  [AS_HELP_STRING([--with-qrencode],\n  [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n  [use_qr=$withval],\n  [use_qr=auto])\n\nAC_ARG_WITH([icu],\n  [AS_HELP_STRING([--with-icu],\n  [Required ICU root path])],\n  [ICU_PREFIX=$withval],\n  [ICU_PREFIX=auto])\n\nAC_ARG_ENABLE([hardening],\n  [AS_HELP_STRING([--disable-hardening],\n  [do not attempt to harden the resulting executables (default is to harden when possible)])],\n  [use_hardening=$enableval],\n  [use_hardening=auto])\n\nAC_ARG_ENABLE([reduce-exports],\n  [AS_HELP_STRING([--enable-reduce-exports],\n  [attempt to reduce exported symbols in the resulting executables (default is no)])],\n  [use_reduce_exports=$enableval],\n  [use_reduce_exports=no])\n\nAC_ARG_ENABLE([ccache],\n  [AS_HELP_STRING([--disable-ccache],\n  [do not use ccache for building (default is to use if found)])],\n  [use_ccache=$enableval],\n  [use_ccache=auto])\n\nAC_ARG_ENABLE([lcov],\n  [AS_HELP_STRING([--enable-lcov],\n  [enable lcov testing (default is no)])],\n  [use_lcov=$enableval],\n  [use_lcov=no])\n\nAC_ARG_ENABLE([lcov-branch-coverage],\n  [AS_HELP_STRING([--enable-lcov-branch-coverage],\n  [enable lcov testing branch coverage (default is no)])],\n  [use_lcov_branch=yes],\n  [use_lcov_branch=no])\n\nAC_ARG_ENABLE([glibc-back-compat],\n  [AS_HELP_STRING([--enable-glibc-back-compat],\n  [enable backwards compatibility with glibc])],\n  [use_glibc_compat=$enableval],\n  [use_glibc_compat=no])\n\nAC_ARG_ENABLE([asm],\n  [AS_HELP_STRING([--enable-asm],\n  [Enable assembly routines (default is yes)])],\n  [use_asm=$enableval],\n  [use_asm=yes])\n\nif test \"x$use_asm\" = xyes; then\n  AC_DEFINE(USE_ASM, 1, [Define this symbol to build in assembly routines])\nfi\n\nAC_ARG_WITH([system-univalue],\n  [AS_HELP_STRING([--with-system-univalue],\n  [Build with system UniValue (default is no)])],\n  [system_univalue=$withval],\n  [system_univalue=no]\n)\nAC_ARG_ENABLE([zmq],\n  [AS_HELP_STRING([--disable-zmq],\n  [disable ZMQ notifications])],\n  [use_zmq=$enableval],\n  [use_zmq=yes])\n\nAC_ARG_WITH([protoc-bindir],[AS_HELP_STRING([--with-protoc-bindir=BIN_DIR],[specify protoc bin path])], [protoc_bin_path=$withval], [])\n\nAC_ARG_ENABLE(man,\n    [AS_HELP_STRING([--disable-man],\n                    [do not install man pages (default is to install)])],,\n    enable_man=yes)\nAM_CONDITIONAL(ENABLE_MAN, test \"$enable_man\" != no)\n\n# Enable debug\nAC_ARG_ENABLE([debug],\n    [AS_HELP_STRING([--enable-debug],\n                    [use debug compiler flags and macros (default is no)])],\n    [enable_debug=$enableval],\n    [enable_debug=no])\n\n# Enable different -fsanitize options\nAC_ARG_WITH([sanitizers],\n    [AS_HELP_STRING([--with-sanitizers],\n                    [comma separated list of extra sanitizers to build with (default is none enabled)])],\n    [use_sanitizers=$withval])\n\n# Enable gprof profiling\nAC_ARG_ENABLE([gprof],\n    [AS_HELP_STRING([--enable-gprof],\n                    [use gprof profiling compiler flags (default is no)])],\n    [enable_gprof=$enableval],\n    [enable_gprof=no])\n\n# Turn warnings into errors\nAC_ARG_ENABLE([werror],\n    [AS_HELP_STRING([--enable-werror],\n                    [Treat certain compiler warnings as errors (default is no)])],\n    [enable_werror=$enableval],\n    [enable_werror=no])\n\nAC_LANG_PUSH([C++])\nAX_CHECK_COMPILE_FLAG([-Werror],[CXXFLAG_WERROR=\"-Werror\"],[CXXFLAG_WERROR=\"\"])\n\nif test \"x$enable_debug\" = xyes; then\n  # Clear default -g -O2 flags\n  if test \"x$CXXFLAGS_overridden\" = xno; then\n\tCXXFLAGS=\"\"\n  fi\n  # Prefer -Og, fall back to -O0 if that is unavailable.\n  AX_CHECK_COMPILE_FLAG(\n    [-Og],\n    [[DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -Og\"]],\n    [AX_CHECK_COMPILE_FLAG([-O0],[[DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -O0\"]],,[[$CXXFLAG_WERROR]])],\n    [[$CXXFLAG_WERROR]])\n\n  # Prefer -g3, fall back to -g if that is unavailable.\n  AX_CHECK_COMPILE_FLAG(\n    [-g3],\n    [[DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -g3\"]],\n    [AX_CHECK_COMPILE_FLAG([-g],[[DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -g\"]],,[[$CXXFLAG_WERROR]])],\n    [[$CXXFLAG_WERROR]])\n\n  AX_CHECK_PREPROC_FLAG([-DDEBUG],[[DEBUG_CPPFLAGS=\"$DEBUG_CPPFLAGS -DDEBUG\"]],,[[$CXXFLAG_WERROR]])\n  AX_CHECK_PREPROC_FLAG([-DDEBUG_LOCKORDER],[[DEBUG_CPPFLAGS=\"$DEBUG_CPPFLAGS -DDEBUG_LOCKORDER\"]],,[[$CXXFLAG_WERROR]])\n  AX_CHECK_COMPILE_FLAG([-ftrapv],[DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -ftrapv\"],,[[$CXXFLAG_WERROR]])\nfi\n\nif test x$use_sanitizers != x; then\n  # First check if the compiler accepts flags. If an incompatible pair like\n  # -fsanitize=address,thread is used here, this check will fail. This will also\n  # fail if a bad argument is passed, e.g. -fsanitize=undfeined\n  AX_CHECK_COMPILE_FLAG(\n    [[-fsanitize=$use_sanitizers]],\n    [[SANITIZER_CXXFLAGS=-fsanitize=$use_sanitizers]],\n    [AC_MSG_ERROR([compiler did not accept requested flags])])\n\n  # Some compilers (e.g. GCC) require additional libraries like libasan,\n  # libtsan, libubsan, etc. Make sure linking still works with the sanitize\n  # flag. This is a separate check so we can give a better error message when\n  # the sanitize flags are supported by the compiler but the actual sanitizer\n  # libs are missing.\n  AX_CHECK_LINK_FLAG(\n    [[-fsanitize=$use_sanitizers]],\n    [[SANITIZER_LDFLAGS=-fsanitize=$use_sanitizers]],\n    [AC_MSG_ERROR([linker did not accept requested flags, you are missing required libraries])])\nfi\n\nERROR_CXXFLAGS=\nif test \"x$enable_werror\" = \"xyes\"; then\n  if test \"x$CXXFLAG_WERROR\" = \"x\"; then\n    AC_MSG_ERROR(\"enable-werror set but -Werror is not usable\")\n  fi\n  AX_CHECK_COMPILE_FLAG([-Werror=vla],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=vla\"],,[[$CXXFLAG_WERROR]])\n  AX_CHECK_COMPILE_FLAG([-Werror=thread-safety-analysis],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=thread-safety-analysis\"],,[[$CXXFLAG_WERROR]])\nfi\n\nif test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n  AX_CHECK_COMPILE_FLAG([-Wall],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wall\"],,[[$CXXFLAG_WERROR]])\n  AX_CHECK_COMPILE_FLAG([-Wextra],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wextra\"],,[[$CXXFLAG_WERROR]])\n  AX_CHECK_COMPILE_FLAG([-Wformat],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wformat\"],,[[$CXXFLAG_WERROR]])\n  AX_CHECK_COMPILE_FLAG([-Wvla],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wvla\"],,[[$CXXFLAG_WERROR]])\n  AX_CHECK_COMPILE_FLAG([-Wformat-security],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wformat-security\"],,[[$CXXFLAG_WERROR]])\n  AX_CHECK_COMPILE_FLAG([-Wthread-safety-analysis],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wthread-safety-analysis\"],,[[$CXXFLAG_WERROR]])\n  AX_CHECK_COMPILE_FLAG([-Wrange-loop-analysis],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wrange-loop-analysis\"],,[[$CXXFLAG_WERROR]])\n\n  ## Some compilers (gcc) ignore unknown -Wno-* options, but warn about all\n  ## unknown options if any other warning is produced. Test the -Wfoo case, and\n  ## set the -Wno-foo case if it works.\n  AX_CHECK_COMPILE_FLAG([-Wunused-parameter],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-unused-parameter\"],,[[$CXXFLAG_WERROR]])\n  AX_CHECK_COMPILE_FLAG([-Wself-assign],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-self-assign\"],,[[$CXXFLAG_WERROR]])\n  AX_CHECK_COMPILE_FLAG([-Wunused-local-typedef],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-unused-local-typedef\"],,[[$CXXFLAG_WERROR]])\n  AX_CHECK_COMPILE_FLAG([-Wdeprecated-register],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-deprecated-register\"],,[[$CXXFLAG_WERROR]])\n  AX_CHECK_COMPILE_FLAG([-Wimplicit-fallthrough],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-implicit-fallthrough\"],,[[$CXXFLAG_WERROR]])\nfi\n\n# Check for optional instruction set support. Enabling these does _not_ imply that all code will\n# be compiled with them, rather that specific objects/libs may use them after checking for runtime\n# compatibility.\nAX_CHECK_COMPILE_FLAG([-msse4.2],[[SSE42_CXXFLAGS=\"-msse4.2\"]],,[[$CXXFLAG_WERROR]])\nAX_CHECK_COMPILE_FLAG([-msse4.1],[[SSE41_CXXFLAGS=\"-msse4.1\"]],,[[$CXXFLAG_WERROR]])\nAX_CHECK_COMPILE_FLAG([-mavx -mavx2],[[AVX2_CXXFLAGS=\"-mavx -mavx2\"]],,[[$CXXFLAG_WERROR]])\nAX_CHECK_COMPILE_FLAG([-msse4 -msha],[[SHANI_CXXFLAGS=\"-msse4 -msha\"]],,[[$CXXFLAG_WERROR]])\n\nTEMP_CXXFLAGS=\"$CXXFLAGS\"\nCXXFLAGS=\"$CXXFLAGS $SSE42_CXXFLAGS\"\nAC_MSG_CHECKING(for assembler crc32 support)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n    #include <stdint.h>\n    #if defined(_MSC_VER)\n    #include <intrin.h>\n    #elif defined(__GNUC__) && defined(__SSE4_2__)\n    #include <nmmintrin.h>\n    #endif\n  ]],[[\n    uint64_t l = 0;\n    l = _mm_crc32_u8(l, 0);\n    l = _mm_crc32_u32(l, 0);\n    l = _mm_crc32_u64(l, 0);\n    return l;\n  ]])],\n [ AC_MSG_RESULT(yes); enable_hwcrc32=yes],\n [ AC_MSG_RESULT(no)]\n)\nCXXFLAGS=\"$TEMP_CXXFLAGS\"\n\nTEMP_CXXFLAGS=\"$CXXFLAGS\"\nCXXFLAGS=\"$CXXFLAGS $SSE41_CXXFLAGS\"\nAC_MSG_CHECKING(for SSE4.1 intrinsics)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n    #include <stdint.h>\n    #include <immintrin.h>\n  ]],[[\n    __m128i l = _mm_set1_epi32(0);\n    return _mm_extract_epi32(l, 3);\n  ]])],\n [ AC_MSG_RESULT(yes); enable_sse41=yes; AC_DEFINE(ENABLE_SSE41, 1, [Define this symbol to build code that uses SSE4.1 intrinsics]) ],\n [ AC_MSG_RESULT(no)]\n)\nCXXFLAGS=\"$TEMP_CXXFLAGS\"\n\nTEMP_CXXFLAGS=\"$CXXFLAGS\"\nCXXFLAGS=\"$CXXFLAGS $AVX2_CXXFLAGS\"\nAC_MSG_CHECKING(for AVX2 intrinsics)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n    #include <stdint.h>\n    #include <immintrin.h>\n  ]],[[\n    __m256i l = _mm256_set1_epi32(0);\n    return _mm256_extract_epi32(l, 7);\n  ]])],\n [ AC_MSG_RESULT(yes); enable_avx2=yes; AC_DEFINE(ENABLE_AVX2, 1, [Define this symbol to build code that uses AVX2 intrinsics]) ],\n [ AC_MSG_RESULT(no)]\n)\nCXXFLAGS=\"$TEMP_CXXFLAGS\"\n\nTEMP_CXXFLAGS=\"$CXXFLAGS\"\nCXXFLAGS=\"$CXXFLAGS $SHANI_CXXFLAGS\"\nAC_MSG_CHECKING(for SHA-NI intrinsics)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n    #include <stdint.h>\n    #include <immintrin.h>\n  ]],[[\n    __m128i i = _mm_set1_epi32(0);\n    __m128i j = _mm_set1_epi32(1);\n    __m128i k = _mm_set1_epi32(2);\n    return _mm_extract_epi32(_mm_sha256rnds2_epu32(i, i, k), 0);\n  ]])],\n [ AC_MSG_RESULT(yes); enable_shani=yes; AC_DEFINE(ENABLE_SHANI, 1, [Define this symbol to build code that uses SHA-NI intrinsics]) ],\n [ AC_MSG_RESULT(no)]\n)\nCXXFLAGS=\"$TEMP_CXXFLAGS\"\n\nCPPFLAGS=\"$CPPFLAGS -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS\"\n\nAC_ARG_WITH([utils],\n  [AS_HELP_STRING([--with-utils],\n  [build lbrycrd-cli lbrycrd-tx (default=yes)])],\n  [build_bitcoin_utils=$withval],\n  [build_bitcoin_utils=yes])\n\nAC_ARG_WITH([libs],\n  [AS_HELP_STRING([--with-libs],\n  [build libraries (default=yes)])],\n  [build_bitcoin_libs=$withval],\n  [build_bitcoin_libs=yes])\n\nAC_ARG_WITH([daemon],\n  [AS_HELP_STRING([--with-daemon],\n  [build bitcoind daemon (default=yes)])],\n  [build_bitcoind=$withval],\n  [build_bitcoind=yes])\n\nuse_pkgconfig=yes\ncase $host in\n  *mingw*)\n\n     #pkgconfig does more harm than good with MinGW\n     use_pkgconfig=no\n\n     TARGET_OS=windows\n     AC_CHECK_LIB([mingwthrd],      [main],, AC_MSG_ERROR(libmingwthrd missing))\n     AC_CHECK_LIB([kernel32],      [main],, AC_MSG_ERROR(libkernel32 missing))\n     AC_CHECK_LIB([user32],      [main],, AC_MSG_ERROR(libuser32 missing))\n     AC_CHECK_LIB([gdi32],      [main],, AC_MSG_ERROR(libgdi32 missing))\n     AC_CHECK_LIB([comdlg32],      [main],, AC_MSG_ERROR(libcomdlg32 missing))\n     AC_CHECK_LIB([winspool],      [main],, AC_MSG_ERROR(libwinspool missing))\n     AC_CHECK_LIB([winmm],      [main],, AC_MSG_ERROR(libwinmm missing))\n     AC_CHECK_LIB([shell32],      [main],, AC_MSG_ERROR(libshell32 missing))\n     AC_CHECK_LIB([comctl32],      [main],, AC_MSG_ERROR(libcomctl32 missing))\n     AC_CHECK_LIB([ole32],      [main],, AC_MSG_ERROR(libole32 missing))\n     AC_CHECK_LIB([oleaut32],      [main],, AC_MSG_ERROR(liboleaut32 missing))\n     AC_CHECK_LIB([uuid],      [main],, AC_MSG_ERROR(libuuid missing))\n     AC_CHECK_LIB([rpcrt4],      [main],, AC_MSG_ERROR(librpcrt4 missing))\n     AC_CHECK_LIB([advapi32],      [main],, AC_MSG_ERROR(libadvapi32 missing))\n     AC_CHECK_LIB([ws2_32],      [main],, AC_MSG_ERROR(libws2_32 missing))\n     AC_CHECK_LIB([mswsock],      [main],, AC_MSG_ERROR(libmswsock missing))\n     AC_CHECK_LIB([shlwapi],      [main],, AC_MSG_ERROR(libshlwapi missing))\n     AC_CHECK_LIB([iphlpapi],      [main],, AC_MSG_ERROR(libiphlpapi missing))\n     AC_CHECK_LIB([crypt32],      [main],, AC_MSG_ERROR(libcrypt32 missing))\n\n     # -static is interpreted by libtool, where it has a different meaning.\n     # In libtool-speak, it's -all-static.\n     AX_CHECK_LINK_FLAG([[-static]],[LIBTOOL_APP_LDFLAGS=\"$LIBTOOL_APP_LDFLAGS -all-static\"])\n\n     AC_PATH_PROG([MAKENSIS], [makensis], none)\n     if test x$MAKENSIS = xnone; then\n       AC_MSG_WARN(\"makensis not found. Cannot create installer.\")\n     fi\n\n     AC_PATH_TOOL(WINDRES, windres, none)\n     if test x$WINDRES = xnone; then\n       AC_MSG_ERROR(\"windres not found\")\n     fi\n\n     CPPFLAGS=\"$CPPFLAGS -D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB\"\n     LEVELDB_TARGET_FLAGS=\"-DOS_WINDOWS\"\n     if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n       CXXFLAGS=\"$CXXFLAGS -w\"\n     fi\n     case $host in\n       i?86-*) WINDOWS_BITS=32 ;;\n       x86_64-*) WINDOWS_BITS=64 ;;\n       *) AC_MSG_ERROR(\"Could not determine win32/win64 for installer\") ;;\n     esac\n     AC_SUBST(WINDOWS_BITS)\n\n     dnl libtool insists upon adding -nostdlib and a list of objects/libs to link against.\n     dnl That breaks our ability to build dll's with static libgcc/libstdc++/libssp. Override\n     dnl its command here, with the predeps/postdeps removed, and -static inserted. Postdeps are\n     dnl also overridden to prevent their insertion later.\n     dnl This should only affect dll's.\n     archive_cmds_CXX=\"\\$CC -shared \\$libobjs \\$deplibs \\$compiler_flags -static -o \\$output_objdir/\\$soname \\${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker \\$lib\"\n     postdeps_CXX=\n\n     ;;\n  *darwin*)\n     TARGET_OS=darwin\n     LEVELDB_TARGET_FLAGS=\"-DOS_MACOSX\"\n     if  test x$cross_compiling != xyes; then\n       BUILD_OS=darwin\n       AC_CHECK_PROG([PORT],port, port)\n       if test x$PORT = xport; then\n         dnl add default macports paths\n         CPPFLAGS=\"$CPPFLAGS -isystem /opt/local/include\"\n         LIBS=\"$LIBS -L/opt/local/lib\"\n         if test -d /opt/local/include/db48; then\n           CPPFLAGS=\"$CPPFLAGS -I/opt/local/include/db48\"\n           LIBS=\"$LIBS -L/opt/local/lib/db48\"\n         fi\n       fi\n\n       AC_PATH_PROGS([RSVG_CONVERT], [rsvg-convert rsvg],rsvg-convert)\n       AC_CHECK_PROG([BREW],brew, brew)\n       if test x$BREW = xbrew; then\n         dnl These Homebrew packages may be keg-only, meaning that they won't be found\n         dnl in expected paths because they may conflict with system files. Ask\n         dnl Homebrew where each one is located, then adjust paths accordingly.\n         dnl It's safe to add these paths even if the functionality is disabled by\n         dnl the user (--without-wallet or --without-gui for example).\n\n         openssl_prefix=`$BREW --prefix openssl 2>/dev/null`\n         bdb_prefix=`$BREW --prefix berkeley-db4 2>/dev/null`\n         qt5_prefix=`$BREW --prefix qt5 2>/dev/null`\n         if test x$openssl_prefix != x; then\n           PKG_CONFIG_PATH=\"$openssl_prefix/lib/pkgconfig:$PKG_CONFIG_PATH\"\n           export PKG_CONFIG_PATH\n         fi\n         if test x$bdb_prefix != x; then\n           CPPFLAGS=\"$CPPFLAGS -I$bdb_prefix/include\"\n           LIBS=\"$LIBS -L$bdb_prefix/lib\"\n         fi\n         if test x$qt5_prefix != x; then\n           PKG_CONFIG_PATH=\"$qt5_prefix/lib/pkgconfig:$PKG_CONFIG_PATH\"\n           export PKG_CONFIG_PATH\n         fi\n       fi\n     else\n       case $build_os in\n         *darwin*)\n           BUILD_OS=darwin\n           ;;\n         *)\n           AC_PATH_TOOL([INSTALLNAMETOOL], [install_name_tool], install_name_tool)\n           AC_PATH_TOOL([OTOOL], [otool], otool)\n           AC_PATH_PROGS([GENISOIMAGE], [genisoimage mkisofs],genisoimage)\n           AC_PATH_PROGS([RSVG_CONVERT], [rsvg-convert rsvg],rsvg-convert)\n           AC_PATH_PROGS([IMAGEMAGICK_CONVERT], [convert],convert)\n           AC_PATH_PROGS([TIFFCP], [tiffcp],tiffcp)\n\n           dnl libtool will try to strip the static lib, which is a problem for\n           dnl cross-builds because strip attempts to call a hard-coded ld,\n           dnl which may not exist in the path. Stripping the .a is not\n           dnl necessary, so just disable it.\n           old_striplib=\n           ;;\n       esac\n     fi\n\n     AX_CHECK_LINK_FLAG([[-Wl,-headerpad_max_install_names]], [LDFLAGS=\"$LDFLAGS -Wl,-headerpad_max_install_names\"])\n     CPPFLAGS=\"$CPPFLAGS -DMAC_OSX\"\n     OBJCXXFLAGS=\"$CXXFLAGS\"\n     ;;\n   *android*)\n     dnl make sure android stays above linux for hosts like *linux-android*\n     LEVELDB_TARGET_FLAGS=\"-DOS_ANDROID\"\n     ;;\n   *linux*)\n     TARGET_OS=linux\n     LEVELDB_TARGET_FLAGS=\"-DOS_LINUX\"\n     ;;\n   *kfreebsd*)\n     LEVELDB_TARGET_FLAGS=\"-DOS_KFREEBSD\"\n     ;;\n   *freebsd*)\n     LEVELDB_TARGET_FLAGS=\"-DOS_FREEBSD\"\n     ;;\n   *openbsd*)\n     LEVELDB_TARGET_FLAGS=\"-DOS_OPENBSD\"\n     ;;\n   *netbsd*)\n     LEVELDB_TARGET_FLAGS=\"-DOS_NETBSD\"\n     ;;\n   *dragonfly*)\n     LEVELDB_TARGET_FLAGS=\"-DOS_DRAGONFLYBSD\"\n     ;;\n   *solaris*)\n     LEVELDB_TARGET_FLAGS=\"-DOS_SOLARIS\"\n     ;;\n   *hpux*)\n     LEVELDB_TARGET_FLAGS=\"-DOS_HPUX\"\n     ;;\n   *)\n     AC_MSG_ERROR(Cannot build leveldb for $host. Please file a bug report.)\n     ;;\nesac\n\nif test x$use_pkgconfig = xyes; then\n  m4_ifndef([PKG_PROG_PKG_CONFIG], [AC_MSG_ERROR(PKG_PROG_PKG_CONFIG macro not found. Please install pkg-config and re-run autogen.sh.)])\n  m4_ifdef([PKG_PROG_PKG_CONFIG], [\n  PKG_PROG_PKG_CONFIG\n  if test x\"$PKG_CONFIG\" = \"x\"; then\n    AC_MSG_ERROR(pkg-config not found.)\n  fi\n  ])\nfi\n\nif test x$use_extended_functional_tests != xno; then\n  AC_SUBST(EXTENDED_FUNCTIONAL_TESTS, --extended)\nfi\n\nif test x$use_lcov = xyes; then\n  if test x$LCOV = x; then\n    AC_MSG_ERROR(\"lcov testing requested but lcov not found\")\n  fi\n  if test x$GCOV = x; then\n    AC_MSG_ERROR(\"lcov testing requested but gcov not found\")\n  fi\n  if test x$PYTHON = x; then\n    AC_MSG_ERROR(\"lcov testing requested but python not found\")\n  fi\n  if test x$GENHTML = x; then\n    AC_MSG_ERROR(\"lcov testing requested but genhtml not found\")\n  fi\n  LCOV=\"$LCOV --gcov-tool=$GCOV\"\n  AX_CHECK_LINK_FLAG([[--coverage]], [LDFLAGS=\"$LDFLAGS --coverage\"],\n    [AC_MSG_ERROR(\"lcov testing requested but --coverage linker flag does not work\")])\n  AX_CHECK_COMPILE_FLAG([--coverage],[CXXFLAGS=\"$CXXFLAGS --coverage\"],\n    [AC_MSG_ERROR(\"lcov testing requested but --coverage flag does not work\")])\n  AC_DEFINE(USE_COVERAGE, 1, [Define this symbol if coverage is enabled])\n  CXXFLAGS=\"$CXXFLAGS -Og\"\nfi\n\nif test x$use_lcov_branch != xno; then\n  AC_SUBST(LCOV_OPTS, \"$LCOV_OPTS --rc lcov_branch_coverage=1\")\nfi\n\ndnl Check for endianness\nAC_C_BIGENDIAN\n\ndnl Check for pthread compile/link requirements\nAX_PTHREAD\n\n# The following macro will add the necessary defines to bitcoin-config.h, but\n# they also need to be passed down to any subprojects. Pull the results out of\n# the cache and add them to CPPFLAGS.\nAC_SYS_LARGEFILE\n# detect POSIX or GNU variant of strerror_r\nAC_FUNC_STRERROR_R\n\nif test x$ac_cv_sys_file_offset_bits != x &&\n   test x$ac_cv_sys_file_offset_bits != xno &&\n   test x$ac_cv_sys_file_offset_bits != xunknown; then\n  CPPFLAGS=\"$CPPFLAGS -D_FILE_OFFSET_BITS=$ac_cv_sys_file_offset_bits\"\nfi\n\nif test x$ac_cv_sys_large_files != x &&\n   test x$ac_cv_sys_large_files != xno &&\n   test x$ac_cv_sys_large_files != xunknown; then\n  CPPFLAGS=\"$CPPFLAGS -D_LARGE_FILES=$ac_cv_sys_large_files\"\nfi\n\nAS_IF([test x$enable_static != x && test x$LDFLAGS != xdarwin], [\n   # darwin should be using -stdlib=libc++ (and may need a -static instead)\n   AX_CHECK_LINK_FLAG([[-static-libstdc++]], [LDFLAGS=\"$LDFLAGS -static-libstdc++\"])\n])\nAX_CHECK_LINK_FLAG([[-Wl,--large-address-aware]], [LDFLAGS=\"$LDFLAGS -Wl,--large-address-aware\"])\n\nAX_GCC_FUNC_ATTRIBUTE([visibility])\nAX_GCC_FUNC_ATTRIBUTE([dllexport])\nAX_GCC_FUNC_ATTRIBUTE([dllimport])\n\nif test x$use_glibc_compat != xno; then\n\n  #glibc absorbed clock_gettime in 2.17. librt (its previous location) is safe to link\n  #in anyway for back-compat.\n  AC_CHECK_LIB([rt],[clock_gettime],, AC_MSG_ERROR(librt missing))\n\n  #__fdelt_chk's params and return type have changed from long unsigned int to long int.\n  # See which one is present here.\n  AC_MSG_CHECKING(__fdelt_chk type)\n  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#ifdef _FORTIFY_SOURCE\n                    #undef _FORTIFY_SOURCE\n                  #endif\n                  #define _FORTIFY_SOURCE 2\n                  #include <sys/select.h>\n     extern \"C\" long unsigned int __fdelt_warn(long unsigned int);]],[[]])],\n    [ fdelt_type=\"long unsigned int\"],\n    [ fdelt_type=\"long int\"])\n  AC_MSG_RESULT($fdelt_type)\n  AC_DEFINE_UNQUOTED(FDELT_TYPE, $fdelt_type,[parameter and return value type for __fdelt_chk])\n  AX_CHECK_LINK_FLAG([[-Wl,--wrap=__divmoddi4]], [COMPAT_LDFLAGS=\"$COMPAT_LDFLAGS -Wl,--wrap=__divmoddi4\"])\n  AX_CHECK_LINK_FLAG([[-Wl,--wrap=log2f]], [COMPAT_LDFLAGS=\"$COMPAT_LDFLAGS -Wl,--wrap=log2f\"])\nelse\n  AC_SEARCH_LIBS([clock_gettime],[rt])\nfi\n\nif test \"x$enable_gprof\" = xyes; then\n    dnl -pg is incompatible with -pie. Since hardening and profiling together doesn't make sense,\n    dnl we simply make them mutually exclusive here. Additionally, hardened toolchains may force\n    dnl -pie by default, in which case it needs to be turned off with -no-pie.\n\n    if test x$use_hardening = xyes; then\n        AC_MSG_ERROR(gprof profiling is not compatible with hardening. Reconfigure with --disable-hardening or --disable-gprof)\n    fi\n    use_hardening=no\n    AX_CHECK_COMPILE_FLAG([-pg],[GPROF_CXXFLAGS=\"-pg\"],\n        [AC_MSG_ERROR(gprof profiling requested but not available)], [[$CXXFLAG_WERROR]])\n\n    AX_CHECK_LINK_FLAG([[-no-pie]], [GPROF_LDFLAGS=\"-no-pie\"])\n    AX_CHECK_LINK_FLAG([[-pg]],[GPROF_LDFLAGS=\"$GPROF_LDFLAGS -pg\"],\n        [AC_MSG_ERROR(gprof profiling requested but not available)], [[$GPROF_LDFLAGS]])\nfi\n\nif test x$TARGET_OS != xwindows; then\n  # All windows code is PIC, forcing it on just adds useless compile warnings\n  AX_CHECK_COMPILE_FLAG([-fPIC],[PIC_FLAGS=\"-fPIC\"])\nfi\n\n# All versions of gcc that we commonly use for building are subject to bug\n# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n# -fstack-reuse=none for all gcc builds. (Only gcc understands this flag)\nAX_CHECK_COMPILE_FLAG([-fstack-reuse=none],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-reuse=none\"])\nif test x$use_hardening != xno; then\n  use_hardening=yes\n\n  AX_CHECK_PREPROC_FLAG([-D_FORTIFY_SOURCE=2],[\n    AX_CHECK_PREPROC_FLAG([-U_FORTIFY_SOURCE],[\n      HARDENED_CPPFLAGS=\"$HARDENED_CPPFLAGS -U_FORTIFY_SOURCE\"\n    ])\n    HARDENED_CPPFLAGS=\"$HARDENED_CPPFLAGS -D_FORTIFY_SOURCE=2\"\n  ])\n\n  AX_CHECK_LINK_FLAG([[-Wl,--dynamicbase]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"])\n  AX_CHECK_LINK_FLAG([[-Wl,--nxcompat]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"])\n  AX_CHECK_LINK_FLAG([[-Wl,--high-entropy-va]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--high-entropy-va\"])\n  AX_CHECK_LINK_FLAG([[-Wl,-z,relro]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,relro\"])\n  AX_CHECK_LINK_FLAG([[-Wl,-z,now]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,now\"])\n  AX_CHECK_LINK_FLAG([[-fPIE -pie]], [PIE_FLAGS=\"-fPIE\"; HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -pie\"],, [[$CXXFLAG_WERROR]])\n\n  case $host in\n    *mingw*)\n       AC_CHECK_LIB([ssp],      [main],, AC_MSG_ERROR(libssp missing))\n    ;;\n    *)\n       AX_CHECK_COMPILE_FLAG([-Wstack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])\n       AX_CHECK_COMPILE_FLAG([-fstack-protector-all],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])\n    ;;\n  esac\nfi\n\ndnl this flag screws up non-darwin gcc even when the check fails. special-case it.\nif test x$TARGET_OS = xdarwin; then\n  AX_CHECK_LINK_FLAG([[-Wl,-dead_strip]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip\"])\nfi\n\nAC_CHECK_HEADERS([endian.h sys/endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h])\n\nAC_CHECK_DECLS([strnlen])\n\n# Check for daemon(3), unrelated to --with-daemon (although used by it)\nAC_CHECK_DECLS([daemon])\n\nAC_CHECK_DECLS([le16toh, le32toh, le64toh, htole16, htole32, htole64, be16toh, be32toh, be64toh, htobe16, htobe32, htobe64],,,\n\t\t[#if HAVE_ENDIAN_H\n                 #include <endian.h>\n                 #elif HAVE_SYS_ENDIAN_H\n                 #include <sys/endian.h>\n                 #endif])\n\nAC_CHECK_DECLS([bswap_16, bswap_32, bswap_64],,,\n\t\t[#if HAVE_BYTESWAP_H\n                 #include <byteswap.h>\n                 #endif])\n\nAC_CHECK_DECLS([__builtin_clz, __builtin_clzl, __builtin_clzll])\n\ndnl Check for malloc_info (for memory statistics information in getmemoryinfo)\nAC_MSG_CHECKING(for getmemoryinfo)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <malloc.h>]],\n [[ int f = malloc_info(0, NULL); ]])],\n [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_MALLOC_INFO, 1,[Define this symbol if you have malloc_info]) ],\n [ AC_MSG_RESULT(no)]\n)\n\ndnl Check for mallopt(M_ARENA_MAX) (to set glibc arenas)\nAC_MSG_CHECKING(for mallopt M_ARENA_MAX)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <malloc.h>]],\n [[ mallopt(M_ARENA_MAX, 1); ]])],\n [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_MALLOPT_ARENA_MAX, 1,[Define this symbol if you have mallopt with M_ARENA_MAX]) ],\n [ AC_MSG_RESULT(no)]\n)\n\nAC_MSG_CHECKING([for visibility attribute])\nAC_LINK_IFELSE([AC_LANG_SOURCE([\n  int foo_def( void ) __attribute__((visibility(\"default\")));\n  int main(){}\n  ])],\n  [\n    AC_DEFINE(HAVE_VISIBILITY_ATTRIBUTE,1,[Define if the visibility attribute is supported.])\n    AC_MSG_RESULT(yes)\n  ],\n  [\n    AC_MSG_RESULT(no)\n    if test x$use_reduce_exports = xyes; then\n      AC_MSG_ERROR([Cannot find a working visibility attribute. Use --disable-reduce-exports.])\n    fi\n  ]\n)\n\nTEMP_LDFLAGS=\"$LDFLAGS\"\nLDFLAGS=\"$TEMP_LDFLAGS $PTHREAD_LIBS\"\nAC_MSG_CHECKING([for thread_local support])\nAC_LINK_IFELSE([AC_LANG_SOURCE([\n  #include <thread>\n  static thread_local int foo = 0;\n  static void run_thread() { foo++;}\n  int main(){\n  for(int i = 0; i < 10; i++) { std::thread(run_thread).detach();}\n  return foo;\n  }\n  ])],\n  [\n    AC_DEFINE(HAVE_THREAD_LOCAL,1,[Define if thread_local is supported.])\n    AC_MSG_RESULT(yes)\n  ],\n  [\n    AC_MSG_RESULT(no)\n  ]\n)\nLDFLAGS=\"$TEMP_LDFLAGS\"\n\n# Check for different ways of gathering OS randomness\nAC_MSG_CHECKING(for Linux getrandom syscall)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>\n  #include <sys/syscall.h>\n  #include <linux/random.h>]],\n [[ syscall(SYS_getrandom, nullptr, 32, 0); ]])],\n [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_SYS_GETRANDOM, 1,[Define this symbol if the Linux getrandom system call is available]) ],\n [ AC_MSG_RESULT(no)]\n)\n\nAC_MSG_CHECKING(for getentropy)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>]],\n [[ getentropy(nullptr, 32) ]])],\n [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_GETENTROPY, 1,[Define this symbol if the BSD getentropy system call is available]) ],\n [ AC_MSG_RESULT(no)]\n)\n\nAC_MSG_CHECKING(for getentropy via random.h)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>\n #include <sys/random.h>]],\n [[ getentropy(nullptr, 32) ]])],\n [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_GETENTROPY_RAND, 1,[Define this symbol if the BSD getentropy system call is available with sys/random.h]) ],\n [ AC_MSG_RESULT(no)]\n)\n\nAC_MSG_CHECKING(for sysctl KERN_ARND)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/types.h>\n  #include <sys/sysctl.h>]],\n [[ static const int name[2] = {CTL_KERN, KERN_ARND};\n    sysctl(name, 2, nullptr, nullptr, nullptr, 0); ]])],\n [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_SYSCTL_ARND, 1,[Define this symbol if the BSD sysctl(KERN_ARND) is available]) ],\n [ AC_MSG_RESULT(no)]\n)\n\nAC_MSG_CHECKING(for if type char equals int8_t)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <stdint.h>\n  #include <type_traits>]],\n [[ static_assert(std::is_same<int8_t, char>::value, \"\"); ]])],\n [ AC_MSG_RESULT(yes); AC_DEFINE(CHAR_EQUALS_INT8, 1,[Define this symbol if type char equals int8_t]) ],\n [ AC_MSG_RESULT(no)]\n)\n\n# Check for reduced exports\nif test x$use_reduce_exports = xyes; then\n  AX_CHECK_COMPILE_FLAG([-fvisibility=hidden],[RE_CXXFLAGS=\"-fvisibility=hidden\"],\n  [AC_MSG_ERROR([Cannot set default symbol visibility. Use --disable-reduce-exports.])])\nfi\n\nLEVELDB_CPPFLAGS=\nLIBLEVELDB=\nLIBMEMENV=\nAM_CONDITIONAL([EMBEDDED_LEVELDB],[true])\nAC_SUBST(LEVELDB_CPPFLAGS)\nAC_SUBST(LIBLEVELDB)\nAC_SUBST(LIBMEMENV)\n\nif test x$enable_wallet != xno; then\n    dnl Check for libdb_cxx only if wallet enabled\n    BITCOIN_FIND_BDB48\nfi\n\ndnl Check for libminiupnpc (optional)\nif test x$use_upnp != xno; then\n  AC_CHECK_HEADERS(\n    [miniupnpc/miniwget.h miniupnpc/miniupnpc.h miniupnpc/upnpcommands.h miniupnpc/upnperrors.h],\n    [AC_CHECK_LIB([miniupnpc], [upnpDiscover], [MINIUPNPC_LIBS=-lminiupnpc], [have_miniupnpc=no])],\n    [have_miniupnpc=no]\n  )\nfi\n\nBITCOIN_QT_INIT\n\ndnl sets $bitcoin_enable_qt, $bitcoin_enable_qt_test, $bitcoin_enable_qt_dbus\nBITCOIN_QT_CONFIGURE([$use_pkgconfig])\n\nif test x$build_bitcoin_utils$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench = xnonononono; then\n    use_boost=no\nelse\n    use_boost=yes\nfi\n\nif test x$use_boost = xyes; then\n\ndnl Minimum required Boost version\ndefine(MINIMUM_REQUIRED_BOOST, 1.47.0)\n\ndnl Check for boost libs\nAX_BOOST_BASE([MINIMUM_REQUIRED_BOOST])\nif test x$want_boost = xno; then\n    AC_MSG_ERROR([[only libbitcoinconsensus can be built without boost]])\nfi\nAX_BOOST_SYSTEM\nAX_BOOST_FILESYSTEM\nAX_BOOST_THREAD\nAX_BOOST_CHRONO\nAX_BOOST_LOCALE\n\ndnl Boost 1.56 through 1.62 allow using std::atomic instead of its own atomic\ndnl counter implementations. In 1.63 and later the std::atomic approach is default.\nm4_pattern_allow(DBOOST_AC_USE_STD_ATOMIC) dnl otherwise it's treated like a macro\nBOOST_CPPFLAGS=\"-DBOOST_SP_USE_STD_ATOMIC -DBOOST_AC_USE_STD_ATOMIC $BOOST_CPPFLAGS\"\n\nif test x$use_reduce_exports = xyes; then\n  AC_MSG_CHECKING([for working boost reduced exports])\n  TEMP_CPPFLAGS=\"$CPPFLAGS\"\n  CPPFLAGS=\"$BOOST_CPPFLAGS $CPPFLAGS\"\n  AC_PREPROC_IFELSE([AC_LANG_PROGRAM([[\n      @%:@include <boost/version.hpp>\n    ]], [[\n      #if BOOST_VERSION >= 104900\n      // Everything is okay\n      #else\n      #  error Boost version is too old\n      #endif\n    ]])],[\n      AC_MSG_RESULT(yes)\n    ],[\n    AC_MSG_ERROR([boost versions < 1.49 are known to be broken with reduced exports. Use --disable-reduce-exports.])\n  ])\n  CPPFLAGS=\"$TEMP_CPPFLAGS\"\nfi\nfi\n\nif test x$use_reduce_exports = xyes; then\n    CXXFLAGS=\"$CXXFLAGS $RE_CXXFLAGS\"\n    AX_CHECK_LINK_FLAG([[-Wl,--exclude-libs,ALL]], [RELDFLAGS=\"-Wl,--exclude-libs,ALL\"])\nfi\n\nif test x$use_tests = xyes; then\n\n  if test x$HEXDUMP = x; then\n    AC_MSG_ERROR(hexdump is required for tests)\n  fi\n\n\n  if test x$use_boost = xyes; then\n\n  AX_BOOST_UNIT_TEST_FRAMEWORK\n\n  dnl Determine if -DBOOST_TEST_DYN_LINK is needed\n  AC_MSG_CHECKING([for dynamic linked boost test])\n  TEMP_LIBS=\"$LIBS\"\n  LIBS=\"$LIBS $BOOST_LDFLAGS $BOOST_UNIT_TEST_FRAMEWORK_LIB\"\n  TEMP_CPPFLAGS=\"$CPPFLAGS\"\n  CPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n  AC_LINK_IFELSE([AC_LANG_SOURCE([\n       #define BOOST_TEST_DYN_LINK\n       #define BOOST_TEST_MAIN\n        #include <boost/test/unit_test.hpp>\n\n       ])],\n    [AC_MSG_RESULT(yes)]\n    [TESTDEFS=\"$TESTDEFS -DBOOST_TEST_DYN_LINK\"],\n    [AC_MSG_RESULT(no)])\n  LIBS=\"$TEMP_LIBS\"\n  CPPFLAGS=\"$TEMP_CPPFLAGS\"\n\n  fi\nfi\n\nif test x$use_boost = xyes; then\n\nBOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB $BOOST_LOCALE_LIB $BOOST_THREAD_LIB $BOOST_CHRONO_LIB\"\n\ndnl If boost (prior to 1.57) was built without c++11, it emulated scoped enums\ndnl using c++98 constructs. Unfortunately, this implementation detail leaked into\ndnl the abi. This was fixed in 1.57.\n\ndnl When building against that installed version using c++11, the headers pick up\ndnl on the native c++11 scoped enum support and enable it, however it will fail to\ndnl link. This can be worked around by disabling c++11 scoped enums if linking will\ndnl fail.\ndnl BOOST_NO_SCOPED_ENUMS was changed to BOOST_NO_CXX11_SCOPED_ENUMS in 1.51.\n\nTEMP_LIBS=\"$LIBS\"\nLIBS=\"$BOOST_LIBS $LIBS\"\nTEMP_CPPFLAGS=\"$CPPFLAGS\"\nCPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\nAC_MSG_CHECKING([for mismatched boost c++11 scoped enums])\nAC_LINK_IFELSE([AC_LANG_PROGRAM([[\n  #include <boost/config.hpp>\n  #include <boost/version.hpp>\n  #if !defined(BOOST_NO_SCOPED_ENUMS) && !defined(BOOST_NO_CXX11_SCOPED_ENUMS) && BOOST_VERSION < 105700\n  #define BOOST_NO_SCOPED_ENUMS\n  #define BOOST_NO_CXX11_SCOPED_ENUMS\n  #define CHECK\n  #endif\n  #include <boost/filesystem.hpp>\n  ]],[[\n  #if defined(CHECK)\n    boost::filesystem::copy_file(\"foo\", \"bar\");\n  #else\n    choke;\n  #endif\n  ]])],\n  [AC_MSG_RESULT(mismatched); BOOST_CPPFLAGS=\"$BOOST_CPPFLAGS -DBOOST_NO_SCOPED_ENUMS -DBOOST_NO_CXX11_SCOPED_ENUMS\"], [AC_MSG_RESULT(ok)])\nLIBS=\"$TEMP_LIBS\"\nCPPFLAGS=\"$TEMP_CPPFLAGS\"\n\ndnl Boost >= 1.50 uses sleep_for rather than the now-deprecated sleep, however\ndnl it was broken from 1.50 to 1.52 when backed by nanosleep. Use sleep_for if\ndnl a working version is available, else fall back to sleep. sleep was removed\ndnl after 1.56.\ndnl If neither is available, abort.\nTEMP_LIBS=\"$LIBS\"\nLIBS=\"$BOOST_LIBS $LIBS\"\nTEMP_CPPFLAGS=\"$CPPFLAGS\"\nCPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\nAC_LINK_IFELSE([AC_LANG_PROGRAM([[\n  #include <boost/thread/thread.hpp>\n  #include <boost/version.hpp>\n  ]],[[\n  #if BOOST_VERSION >= 105000 && (!defined(BOOST_HAS_NANOSLEEP) || BOOST_VERSION >= 105200)\n      boost::this_thread::sleep_for(boost::chrono::milliseconds(0));\n  #else\n   choke me\n  #endif\n  ]])],\n  [boost_sleep=yes;\n     AC_DEFINE(HAVE_WORKING_BOOST_SLEEP_FOR, 1, [Define this symbol if boost sleep_for works])],\n  [boost_sleep=no])\nLIBS=\"$TEMP_LIBS\"\nCPPFLAGS=\"$TEMP_CPPFLAGS\"\n\nif test x$boost_sleep != xyes; then\nTEMP_LIBS=\"$LIBS\"\nLIBS=\"$BOOST_LIBS $LIBS\"\nTEMP_CPPFLAGS=\"$CPPFLAGS\"\nCPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\nAC_LINK_IFELSE([AC_LANG_PROGRAM([[\n  #include <boost/version.hpp>\n  #include <boost/thread.hpp>\n  #include <boost/date_time/posix_time/posix_time_types.hpp>\n  ]],[[\n  #if BOOST_VERSION <= 105600\n      boost::this_thread::sleep(boost::posix_time::milliseconds(0));\n  #else\n   choke me\n  #endif\n  ]])],\n  [boost_sleep=yes; AC_DEFINE(HAVE_WORKING_BOOST_SLEEP, 1, [Define this symbol if boost sleep works])],\n  [boost_sleep=no])\nLIBS=\"$TEMP_LIBS\"\nCPPFLAGS=\"$TEMP_CPPFLAGS\"\nfi\n\nif test x$boost_sleep != xyes; then\n  AC_MSG_ERROR(No working boost sleep implementation found.)\nfi\n\nfi\n\n# the plan for dealing with ICU:\n# if the user specifies an ICU prefix, use that one.\n# if the user did not specify an ICU prefix but did specify a general prefix use that one.\n# otherwise use pkg_config if it's available.\n# well, actually, things seem to work fine without this fallback to pkg_config so we'll leave that out for now.\n# note: in order to use AC_CHECK_LIB we have to override CPPFLAGS and LDFLAGS\n# however, we don't want to keep those overridden after our checks;\n# we want to rely on ICU_CPPFLAGS and ICU_LIBS after that\n# to further complicate matters there are at least three different naming conventions for ICU libraries\n# to simplify things we'll just check one from each convention\n\nAS_IF([test \"x${prefix}\" != \"xNONE\" && test \"x$ICU_PREFIX\" == \"xauto\"], [\n  ICU_PREFIX=\"${prefix}\"\n])\n\nAS_IF([test \"x$ICU_PREFIX\" != \"xauto\"], [\n  ICU_CPPFLAGS=\"$(PKG_CONFIG_SYSROOT_DIR=/ PKG_CONFIG_LIBDIR=$ICU_PREFIX/lib/pkgconfig PKG_CONFIG_PATH=$ICU_PREFIX/share/pkgconfig pkg-config icu-io icu-uc icu-i18n --cflags)\"\n  ICU_LIBS=\"$(PKG_CONFIG_SYSROOT_DIR=/ PKG_CONFIG_LIBDIR=$ICU_PREFIX/lib/pkgconfig PKG_CONFIG_PATH=$ICU_PREFIX/share/pkgconfig pkg-config icu-io icu-uc icu-i18n --libs)\"\n])\n\nif test x$use_pkgconfig = xyes; then\n  : dnl\n  m4_ifdef(\n    [PKG_CHECK_MODULES],\n    [\n      PKG_CHECK_MODULES([SSL], [libssl],, [AC_MSG_ERROR(openssl not found.)])\n      PKG_CHECK_MODULES([CRYPTO], [libcrypto],,[AC_MSG_ERROR(libcrypto not found.)])\n      BITCOIN_QT_CHECK([PKG_CHECK_MODULES([PROTOBUF], [protobuf], [have_protobuf=yes], [BITCOIN_QT_FAIL(libprotobuf not found)])])\n      if test x$use_qr != xno; then\n        BITCOIN_QT_CHECK([PKG_CHECK_MODULES([QR], [libqrencode], [have_qrencode=yes], [have_qrencode=no])])\n      fi\n      if test x$build_bitcoin_utils$build_bitcoind$bitcoin_enable_qt$use_tests != xnononono; then\n        PKG_CHECK_MODULES([EVENT], [libevent],, [AC_MSG_ERROR(libevent not found.)])\n        if test x$TARGET_OS != xwindows; then\n          PKG_CHECK_MODULES([EVENT_PTHREADS], [libevent_pthreads],, [AC_MSG_ERROR(libevent_pthreads not found.)])\n        fi\n      fi\n\n      if test \"x$use_zmq\" = \"xyes\"; then\n        PKG_CHECK_MODULES([ZMQ],[libzmq >= 4],\n          [AC_DEFINE([ENABLE_ZMQ],[1],[Define to 1 to enable ZMQ functions])],\n          [AC_DEFINE([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])\n           AC_MSG_WARN([libzmq version 4.x or greater not found, disabling])\n           use_zmq=no])\n      else\n          AC_DEFINE_UNQUOTED([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])\n      fi\n\n      if test \"x$ICU_PREFIX\" == \"xauto\"; then\n        PKG_CHECK_MODULES([ICU], [icu-io, icu-uc, icu-i18n])\n      fi\n    ]\n  )\nelse # probably compiling on Windows or cross-compiling for it:\n  AC_MSG_NOTICE([Configuring for MinGW])\n\n  AC_CHECK_HEADER([openssl/crypto.h],,AC_MSG_ERROR(libcrypto headers missing))\n  AC_CHECK_LIB([crypto],      [main],CRYPTO_LIBS=-lcrypto, AC_MSG_ERROR(libcrypto missing))\n\n  AC_CHECK_HEADER([openssl/ssl.h],, AC_MSG_ERROR(libssl headers missing),)\n  AC_CHECK_LIB([ssl],         [main],SSL_LIBS=-lssl, AC_MSG_ERROR(libssl missing))\n\n  if test x$build_bitcoin_utils$build_bitcoind$bitcoin_enable_qt$use_tests != xnononono; then\n    AC_CHECK_HEADER([event2/event.h],, AC_MSG_ERROR(libevent headers missing),)\n    AC_CHECK_LIB([event],[main],EVENT_LIBS=-levent,AC_MSG_ERROR(libevent missing))\n    if test x$TARGET_OS != xwindows; then\n      AC_CHECK_LIB([event_pthreads],[main],EVENT_PTHREADS_LIBS=-levent_pthreads,AC_MSG_ERROR(libevent_pthreads missing))\n    fi\n  fi\n\n  if test \"x$use_zmq\" = \"xyes\"; then\n     AC_CHECK_HEADER([zmq.h],\n       [AC_DEFINE([ENABLE_ZMQ],[1],[Define to 1 to enable ZMQ functions])],\n       [AC_MSG_WARN([zmq.h not found, disabling zmq support])\n        use_zmq=no\n        AC_DEFINE([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])])\n     AC_CHECK_LIB([zmq],[zmq_ctx_shutdown],ZMQ_LIBS=-lzmq,\n       [AC_MSG_WARN([libzmq >= 4.0 not found, disabling zmq support])\n        use_zmq=no\n        AC_DEFINE([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])])\n  else\n    AC_DEFINE_UNQUOTED([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])\n  fi\n\n  if test \"x$use_zmq\" = \"xyes\"; then\n    dnl Assume libzmq was built for static linking\n    case $host in\n      *mingw*)\n        ZMQ_CFLAGS=\"$ZMQ_CFLAGS -DZMQ_STATIC\"\n      ;;\n    esac\n  fi\n\n  BITCOIN_QT_CHECK(AC_CHECK_LIB([protobuf] ,[main],[PROTOBUF_LIBS=-lprotobuf], BITCOIN_QT_FAIL(libprotobuf not found)))\n  if test x$use_qr != xno; then\n    BITCOIN_QT_CHECK([AC_CHECK_LIB([qrencode], [main],[QR_LIBS=-lqrencode], [have_qrencode=no])])\n    BITCOIN_QT_CHECK([AC_CHECK_HEADER([qrencode.h],, have_qrencode=no)])\n  fi\nfi\n\nAC_MSG_NOTICE([Using ICU_CPPFLAGS=\"$ICU_CPPFLAGS\"])\nAC_MSG_NOTICE([Using ICU_LIBS=\"$ICU_LIBS\"])\n\nsave_CXXFLAGS=\"${CXXFLAGS}\"\nCXXFLAGS=\"${CXXFLAGS} ${CRYPTO_CFLAGS} ${SSL_CFLAGS}\"\nAC_CHECK_DECLS([EVP_MD_CTX_new],,,[AC_INCLUDES_DEFAULT\n#include <openssl/x509_vfy.h>\n])\nCXXFLAGS=\"${save_CXXFLAGS}\"\n\ndnl univalue check\n\nneed_bundled_univalue=yes\n\nif test x$build_bitcoin_utils$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench = xnonononono; then\n  need_bundled_univalue=no\nelse\n\nif test x$system_univalue != xno ; then\n  found_univalue=no\n  if test x$use_pkgconfig = xyes; then\n    : #NOP\n    m4_ifdef(\n      [PKG_CHECK_MODULES],\n      [\n        PKG_CHECK_MODULES([UNIVALUE],[libunivalue >= 1.0.4],[found_univalue=yes],[true])\n      ]\n    )\n  else\n    AC_CHECK_HEADER([univalue.h],[\n      AC_CHECK_LIB([univalue],  [main],[\n        UNIVALUE_LIBS=-lunivalue\n        found_univalue=yes\n      ],[true])\n    ],[true])\n  fi\n\n  if test x$found_univalue = xyes ; then\n    system_univalue=yes\n    need_bundled_univalue=no\n  elif test x$system_univalue = xyes ; then\n    AC_MSG_ERROR([univalue not found])\n  else\n    system_univalue=no\n  fi\nfi\n\nif test x$need_bundled_univalue = xyes ; then\n  UNIVALUE_CFLAGS='-I$(srcdir)/univalue/include'\n  UNIVALUE_LIBS='univalue/libunivalue.la'\nfi\n\nfi\n\nAM_CONDITIONAL([EMBEDDED_UNIVALUE],[test x$need_bundled_univalue = xyes])\nAC_SUBST(UNIVALUE_CFLAGS)\nAC_SUBST(UNIVALUE_LIBS)\n\nBITCOIN_QT_PATH_PROGS([PROTOC], [protoc],$protoc_bin_path)\n\nAC_MSG_CHECKING([whether to build bitcoind])\nAM_CONDITIONAL([BUILD_BITCOIND], [test x$build_bitcoind = xyes])\nAC_MSG_RESULT($build_bitcoind)\n\nAC_MSG_CHECKING([whether to build utils (lbrycrd-cli lbrycrd-tx)])\nAM_CONDITIONAL([BUILD_BITCOIN_UTILS], [test x$build_bitcoin_utils = xyes])\nAC_MSG_RESULT($build_bitcoin_utils)\n\nAC_MSG_CHECKING([whether to build libraries])\nAM_CONDITIONAL([BUILD_BITCOIN_LIBS], [test x$build_bitcoin_libs = xyes])\nif test x$build_bitcoin_libs = xyes; then\n  AC_DEFINE(HAVE_CONSENSUS_LIB, 1, [Define this symbol if the consensus lib has been built])\n  AC_CONFIG_FILES([libbitcoinconsensus.pc:libbitcoinconsensus.pc.in])\nfi\nAC_MSG_RESULT($build_bitcoin_libs)\n\nAC_LANG_POP\n\nif test \"x$use_ccache\" != \"xno\"; then\n  AC_MSG_CHECKING(if ccache should be used)\n  if test x$CCACHE = x; then\n    if test \"x$use_ccache\" = \"xyes\"; then\n      AC_MSG_ERROR([ccache not found.]);\n    else\n      use_ccache=no\n    fi\n  else\n    use_ccache=yes\n    CC=\"$ac_cv_path_CCACHE $CC\"\n    CXX=\"$ac_cv_path_CCACHE $CXX\"\n  fi\n  AC_MSG_RESULT($use_ccache)\nfi\nif test \"x$use_ccache\" = \"xyes\"; then\n    AX_CHECK_PREPROC_FLAG([-Qunused-arguments],[CPPFLAGS=\"-Qunused-arguments $CPPFLAGS\"])\nfi\n\ndnl enable wallet\nAC_MSG_CHECKING([if wallet should be enabled])\nif test x$enable_wallet != xno; then\n  AC_MSG_RESULT(yes)\n  AC_DEFINE_UNQUOTED([ENABLE_WALLET],[1],[Define to 1 to enable wallet functions])\n\nelse\n  AC_MSG_RESULT(no)\nfi\n\ndnl enable upnp support\nAC_MSG_CHECKING([whether to build with support for UPnP])\nif test x$have_miniupnpc = xno; then\n  if test x$use_upnp = xyes; then\n     AC_MSG_ERROR(\"UPnP requested but cannot be built. use --without-miniupnpc\")\n  fi\n  AC_MSG_RESULT(no)\nelse\n  if test x$use_upnp != xno; then\n    AC_MSG_RESULT(yes)\n    AC_MSG_CHECKING([whether to build with UPnP enabled by default])\n    use_upnp=yes\n    upnp_setting=0\n    if test x$use_upnp_default != xno; then\n      use_upnp_default=yes\n      upnp_setting=1\n    fi\n    AC_MSG_RESULT($use_upnp_default)\n    AC_DEFINE_UNQUOTED([USE_UPNP],[$upnp_setting],[UPnP support not compiled if undefined, otherwise value (0 or 1) determines default state])\n    if test x$TARGET_OS = xwindows; then\n      MINIUPNPC_CPPFLAGS=\"-DSTATICLIB -DMINIUPNP_STATICLIB\"\n    fi\n  else\n    AC_MSG_RESULT(no)\n  fi\nfi\n\ndnl these are only used when qt is enabled\nBUILD_TEST_QT=\"\"\nif test x$bitcoin_enable_qt != xno; then\n  dnl enable dbus support\n  AC_MSG_CHECKING([whether to build GUI with support for D-Bus])\n  if test x$bitcoin_enable_qt_dbus != xno; then\n    AC_DEFINE([USE_DBUS],[1],[Define if dbus support should be compiled in])\n  fi\n  AC_MSG_RESULT($bitcoin_enable_qt_dbus)\n\n  dnl enable qr support\n  AC_MSG_CHECKING([whether to build GUI with support for QR codes])\n  if test x$have_qrencode = xno; then\n    if test x$use_qr = xyes; then\n     AC_MSG_ERROR(\"QR support requested but cannot be built. use --without-qrencode\")\n    fi\n    AC_MSG_RESULT(no)\n  else\n    if test x$use_qr != xno; then\n      AC_MSG_RESULT(yes)\n      AC_DEFINE([USE_QRCODE],[1],[Define if QR support should be compiled in])\n      use_qr=yes\n    else\n      AC_MSG_RESULT(no)\n    fi\n  fi\n\n  if test x$XGETTEXT = x; then\n    AC_MSG_WARN(\"xgettext is required to update qt translations\")\n  fi\n\n  AC_MSG_CHECKING([whether to build test_lbrycrd-qt])\n  if test x$use_gui_tests$bitcoin_enable_qt_test = xyesyes; then\n    AC_MSG_RESULT([yes])\n    BUILD_TEST_QT=\"yes\"\n  else\n    AC_MSG_RESULT([no])\n  fi\nfi\n\nAM_CONDITIONAL([ENABLE_ZMQ], [test \"x$use_zmq\" = \"xyes\"])\n\nAC_MSG_CHECKING([whether to build test_lbrycrd])\nif test x$use_tests = xyes; then\n  AC_MSG_RESULT([yes])\n  BUILD_TEST=\"yes\"\nelse\n  AC_MSG_RESULT([no])\n  BUILD_TEST=\"\"\nfi\n\nAC_MSG_CHECKING([whether to reduce exports])\nif test x$use_reduce_exports = xyes; then\n  AC_MSG_RESULT([yes])\nelse\n  AC_MSG_RESULT([no])\nfi\n\nif test x$build_bitcoin_utils$build_bitcoin_libs$build_bitcoind$bitcoin_enable_qt$use_bench$use_tests = xnononononono; then\n  AC_MSG_ERROR([No targets! Please specify at least one of: --with-utils --with-libs --with-daemon --with-gui --enable-bench or --enable-tests])\nfi\n\nAM_CONDITIONAL([TARGET_DARWIN], [test x$TARGET_OS = xdarwin])\nAM_CONDITIONAL([BUILD_DARWIN], [test x$BUILD_OS = xdarwin])\nAM_CONDITIONAL([TARGET_WINDOWS], [test x$TARGET_OS = xwindows])\nAM_CONDITIONAL([ENABLE_WALLET],[test x$enable_wallet = xyes])\nAM_CONDITIONAL([ENABLE_TESTS],[test x$BUILD_TEST = xyes])\nAM_CONDITIONAL([ENABLE_QT],[test x$bitcoin_enable_qt = xyes])\nAM_CONDITIONAL([ENABLE_QT_TESTS],[test x$BUILD_TEST_QT = xyes])\nAM_CONDITIONAL([ENABLE_BENCH],[test x$use_bench = xyes])\nAM_CONDITIONAL([USE_QRCODE], [test x$use_qr = xyes])\nAM_CONDITIONAL([USE_LCOV],[test x$use_lcov = xyes])\nAM_CONDITIONAL([GLIBC_BACK_COMPAT],[test x$use_glibc_compat = xyes])\nAM_CONDITIONAL([HARDEN],[test x$use_hardening = xyes])\nAM_CONDITIONAL([ENABLE_HWCRC32],[test x$enable_hwcrc32 = xyes])\nAM_CONDITIONAL([ENABLE_SSE41],[test x$enable_sse41 = xyes])\nAM_CONDITIONAL([ENABLE_AVX2],[test x$enable_avx2 = xyes])\nAM_CONDITIONAL([ENABLE_SHANI],[test x$enable_shani = xyes])\nAM_CONDITIONAL([USE_ASM],[test x$use_asm = xyes])\n\nAC_DEFINE(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR, [Major version])\nAC_DEFINE(CLIENT_VERSION_MINOR, _CLIENT_VERSION_MINOR, [Minor version])\nAC_DEFINE(CLIENT_VERSION_REVISION, _CLIENT_VERSION_REVISION, [Build revision])\nAC_DEFINE(CLIENT_VERSION_BUILD, _CLIENT_VERSION_BUILD, [Version Build])\nAC_DEFINE(CLIENT_VERSION_IS_RELEASE, _CLIENT_VERSION_IS_RELEASE, [Version is release])\nAC_DEFINE(COPYRIGHT_YEAR, _COPYRIGHT_YEAR, [Copyright year])\nAC_DEFINE(COPYRIGHT_HOLDERS, \"_COPYRIGHT_HOLDERS\", [Copyright holder(s) before %s replacement])\nAC_DEFINE(COPYRIGHT_HOLDERS_SUBSTITUTION, \"_COPYRIGHT_HOLDERS_SUBSTITUTION\", [Replacement for %s in copyright holders string])\ndefine(_COPYRIGHT_HOLDERS_FINAL, [patsubst(_COPYRIGHT_HOLDERS, [%s], [_COPYRIGHT_HOLDERS_SUBSTITUTION])])\nAC_DEFINE(COPYRIGHT_HOLDERS_FINAL, \"_COPYRIGHT_HOLDERS_FINAL\", [Copyright holder(s)])\nAC_SUBST(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR)\nAC_SUBST(CLIENT_VERSION_MINOR, _CLIENT_VERSION_MINOR)\nAC_SUBST(CLIENT_VERSION_REVISION, _CLIENT_VERSION_REVISION)\nAC_SUBST(CLIENT_VERSION_BUILD, _CLIENT_VERSION_BUILD)\nAC_SUBST(CLIENT_VERSION_IS_RELEASE, _CLIENT_VERSION_IS_RELEASE)\nAC_SUBST(COPYRIGHT_YEAR, _COPYRIGHT_YEAR)\nAC_SUBST(COPYRIGHT_HOLDERS, \"_COPYRIGHT_HOLDERS\")\nAC_SUBST(COPYRIGHT_HOLDERS_SUBSTITUTION, \"_COPYRIGHT_HOLDERS_SUBSTITUTION\")\nAC_SUBST(COPYRIGHT_HOLDERS_FINAL, \"_COPYRIGHT_HOLDERS_FINAL\")\nAC_SUBST(BITCOIN_DAEMON_NAME)\nAC_SUBST(BITCOIN_GUI_NAME)\nAC_SUBST(BITCOIN_CLI_NAME)\nAC_SUBST(BITCOIN_TX_NAME)\n\nAC_SUBST(RELDFLAGS)\nAC_SUBST(DEBUG_CPPFLAGS)\nAC_SUBST(WARN_CXXFLAGS)\nAC_SUBST(NOWARN_CXXFLAGS)\nAC_SUBST(DEBUG_CXXFLAGS)\nAC_SUBST(COMPAT_LDFLAGS)\nAC_SUBST(ERROR_CXXFLAGS)\nAC_SUBST(GPROF_CXXFLAGS)\nAC_SUBST(GPROF_LDFLAGS)\nAC_SUBST(HARDENED_CXXFLAGS)\nAC_SUBST(HARDENED_CPPFLAGS)\nAC_SUBST(HARDENED_LDFLAGS)\nAC_SUBST(PIC_FLAGS)\nAC_SUBST(PIE_FLAGS)\nAC_SUBST(SANITIZER_CXXFLAGS)\nAC_SUBST(SANITIZER_LDFLAGS)\nAC_SUBST(SSE42_CXXFLAGS)\nAC_SUBST(SSE41_CXXFLAGS)\nAC_SUBST(AVX2_CXXFLAGS)\nAC_SUBST(SHANI_CXXFLAGS)\nAC_SUBST(LIBTOOL_APP_LDFLAGS)\nAC_SUBST(USE_UPNP)\nAC_SUBST(USE_QRCODE)\nAC_SUBST(BOOST_LIBS)\nAC_SUBST(ICU_CPPFLAGS)\nAC_SUBST(ICU_LIBS)\nAC_SUBST(TESTDEFS)\nAC_SUBST(LEVELDB_TARGET_FLAGS)\nAC_SUBST(MINIUPNPC_CPPFLAGS)\nAC_SUBST(MINIUPNPC_LIBS)\nAC_SUBST(CRYPTO_LIBS)\nAC_SUBST(SSL_CFLAGS)\nAC_SUBST(SSL_LIBS)\nAC_SUBST(EVENT_LIBS)\nAC_SUBST(EVENT_PTHREADS_LIBS)\nAC_SUBST(ZMQ_LIBS)\nAC_SUBST(PROTOBUF_LIBS)\nAC_SUBST(QR_LIBS)\nAC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile share/setup.nsi share/qt/Info.plist test/config.ini])\nAC_CONFIG_FILES([contrib/devtools/split-debug.sh],[chmod +x contrib/devtools/split-debug.sh])\nAM_COND_IF([HAVE_DOXYGEN], [AC_CONFIG_FILES([doc/Doxyfile])])\nAC_CONFIG_LINKS([contrib/filter-lcov.py:contrib/filter-lcov.py])\nAC_CONFIG_LINKS([test/functional/test_runner.py:test/functional/test_runner.py])\nAC_CONFIG_LINKS([test/util/bitcoin-util-test.py:test/util/bitcoin-util-test.py])\nAC_CONFIG_LINKS([test/util/rpcauth-test.py:test/util/rpcauth-test.py])\n\ndnl boost's m4 checks do something really nasty: they export these vars. As a\ndnl result, they leak into secp256k1's configure and crazy things happen.\ndnl Until this is fixed upstream and we've synced, we'll just un-export them.\nCPPFLAGS_TEMP=\"$CPPFLAGS\"\nunset CPPFLAGS\nCPPFLAGS=\"$CPPFLAGS_TEMP\"\n\nLDFLAGS_TEMP=\"$LDFLAGS\"\nunset LDFLAGS\nLDFLAGS=\"$LDFLAGS_TEMP\"\n\nLIBS_TEMP=\"$LIBS\"\nunset LIBS\nLIBS=\"$LIBS_TEMP\"\n\nPKGCONFIG_PATH_TEMP=\"$PKG_CONFIG_PATH\"\nunset PKG_CONFIG_PATH\nPKG_CONFIG_PATH=\"$PKGCONFIG_PATH_TEMP\"\n\nPKGCONFIG_LIBDIR_TEMP=\"$PKG_CONFIG_LIBDIR\"\nunset PKG_CONFIG_LIBDIR\nPKG_CONFIG_LIBDIR=\"$PKGCONFIG_LIBDIR_TEMP\"\n\nif test x$need_bundled_univalue = xyes; then\n  AC_CONFIG_SUBDIRS([src/univalue])\nfi\n\nac_configure_args=\"${ac_configure_args} --enable-static --disable-shared --with-pic --with-bignum=no --enable-module-recovery --disable-jni\"\nAC_CONFIG_SUBDIRS([src/secp256k1])\n\nAC_OUTPUT\n\ndnl Taken from https://wiki.debian.org/RpathIssue\ncase $host in\n   *-*-linux-gnu)\n     AC_MSG_RESULT([Fixing libtool for -rpath problems.])\n     sed < libtool > libtool-2 \\\n     's/^hardcode_libdir_flag_spec.*$'/'hardcode_libdir_flag_spec=\" -D__LIBTOOL_IS_A_FOOL__ \"/'\n     mv libtool-2 libtool\n     chmod 755 libtool\n   ;;\nesac\n\ndnl Replace the BUILDDIR path with the correct Windows path if compiling on Native Windows\ncase ${OS} in\n   *Windows*)\n     sed  's/BUILDDIR=\"\\/\\([[a-z]]\\)/BUILDDIR=\"\\1:/'  test/config.ini > test/config-2.ini\n     mv test/config-2.ini test/config.ini\n   ;;\nesac\n\necho\necho \"Options used to compile and link:\"\necho \"  with wallet   = $enable_wallet\"\necho \"  with gui / qt = $bitcoin_enable_qt\"\nif test x$bitcoin_enable_qt != xno; then\n    echo \"    with qr     = $use_qr\"\nfi\necho \"  with zmq      = $use_zmq\"\necho \"  with test     = $use_tests\"\necho \"  with bench    = $use_bench\"\necho \"  with upnp     = $use_upnp\"\necho \"  use asm       = $use_asm\"\necho \"  sanitizers    = $use_sanitizers\"\necho \"  debug enabled = $enable_debug\"\necho \"  gprof enabled = $enable_gprof\"\necho \"  werror        = $enable_werror\"\necho\necho \"  target os     = $TARGET_OS\"\necho \"  build os      = $BUILD_OS\"\necho\necho \"  CC            = $CC\"\necho \"  CFLAGS        = $CFLAGS\"\necho \"  CPPFLAGS      = $DEBUG_CPPFLAGS $HARDENED_CPPFLAGS $CPPFLAGS\"\necho \"  CXX           = $CXX\"\necho \"  CXXFLAGS      = $DEBUG_CXXFLAGS $HARDENED_CXXFLAGS $WARN_CXXFLAGS $NOWARN_CXXFLAGS $ERROR_CXXFLAGS $GPROF_CXXFLAGS $CXXFLAGS\"\necho \"  LDFLAGS       = $PTHREAD_CFLAGS $HARDENED_LDFLAGS $GPROF_LDFLAGS $LDFLAGS\"\necho \"  ARFLAGS       = $ARFLAGS\"\necho\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "depends",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "libbitcoinconsensus.pc.in",
          "type": "blob",
          "size": 0.2880859375,
          "content": "prefix=@prefix@\nexec_prefix=@exec_prefix@\nlibdir=@libdir@\nincludedir=@includedir@\n\nName: @PACKAGE_NAME@ consensus library\nDescription: Library for the Bitcoin consensus protocol.\nVersion: @PACKAGE_VERSION@\nLibs: -L${libdir} -lbitcoinconsensus\nCflags: -I${includedir}\nRequires.private: libcrypto\n"
        },
        {
          "name": "packaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "share",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}