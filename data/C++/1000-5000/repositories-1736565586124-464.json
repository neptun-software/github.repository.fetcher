{
  "metadata": {
    "timestamp": 1736565586124,
    "page": 464,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "AcademySoftwareFoundation/openvdb",
      "stars": 2796,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0185546875,
          "content": "/build/*\n.DS_Store\n"
        },
        {
          "name": "CHANGES",
          "type": "blob",
          "size": 188.9365234375,
          "content": "OpenVDB Version History\n=======================\n\nVersion 12.0.1 - In development\n\nVersion 12.0.0 - October 31, 2024\n\n      OpenVDB is now licensed under the Apache 2.0 license, instead of the MPL 2.0 license.\n\n      This version introduces ABI changes relative to older major releases,\n      so to preserve ABI compatibility it might be necessary to define the\n      macro OPENVDB_ABI_VERSION_NUMBER=N, where, for example, N is 10 for\n      Houdini 20.0 and 11 for Houdini 20.5.\n\n      GCC 9 is no longer supported.\n\n  OpenVDB:\n    New features:\n    - Added fillet() method in tools::LevelSetFilter to round off concave edges\n      to create smoother transition between surfaces.\n\n    Improvements:\n    - Added openvdb::assertAbort to replace cassert and a\n      OPENVDB_ENABLE_ASSERTS cmake argument/compile define to toggle\n      assertions in OpenVDB code, independantly of NDEBUG. Asserts are\n      no longer enabled by default in when NDEBUG is absent (e.g.\n      Debug builds).\n    - Removed last traces of Boost when OPENVDB_USE_DELAYED_LOADING is OFF\n      [Reported by Brian McKinnon]\n    - RootNode code cleanup to eliminate redundant key conversion and\n      to create map values in-place.\n    - Add RootNode::deleteChildOrTile() to delete a child or tile of\n      the root node.\n    - ValueAccessors are now defined and created in the Tree class\n      instead of in the Grid class so that custom Tree implementations\n      may define and create their own ValueAccessors if desired.\n    - Added support for PDAL to vdb_tool [Contributed by Tom Matterson]\n    - LeafManager and NodeManager now use Index64 for leaf counts internally.\n    - Added RootNode::probeChild() const.\n    - Added RootNode::probeChild() and RootNode::probeConstChild().\n    - Added RootNode::probe() and RootNode::probeConst() to query key presence,\n      child node, value and active state.\n    - Added InternalNode::probeChild() const.\n    - Added InternalNode::probeChild() and probeChildConst() with coord access\n      and optionally value and active state.\n    - Added InternalNode::probeChild() and probeChildConst() with index access\n      and optionally value and active state.\n    - Added InternalNode::isValueOff(), LeafNode::isValueOff(),\n      LeafNodeBool::isValueOff(), LeafNodeMask::isValueOff().\n    - Added LeafNodeMask::probeValue(Index,val), LeafNodeBool::probeValue(Index,val).\n    - Added RootNode::getValueUnsafe(), RootNode::getChildUnsafe(),\n      RootNode::getConstChildUnsafe().\n    - Added InternalNode::getValueUnsafe(), InternalNode::getChildUnsafe(),\n      InternalNode::getConstChildUnsafe().\n    - Added InternalNode::setActiveStateUnsafe(), InternalNode::setValueOnlyUnsafe(),\n      InternalNode::setValueOnUnsafe(), InternalNode::setValueOffUnsafe().\n    - Added InternalNode::setChildUnsafe(), InternalNode::resetChildUnsafe(),\n      InternalNode::stealChildUnsafe(), InternalNode::deleteChildUnsafe().\n    - For LeafNode, LeafNodeBool and LeafNodeMask - added\n      LeafNode::getValueUnsafe(), LeafNode::setActiveStateunsafe(),\n      LeafNode::setValueOnlyUnsafe(), LeafNode::setValueOnUnsafe(),\n      LeafNode::setValueOffUnsafe().\n\n    ABI changes:\n    - Tree::leafCount(), Tree::unallocatedLeafCount(),\n      Tree::nonLeafCount() and Tree::nodeCount() now use Index64 in their\n      return types instead of Index32.\n\n    API Changes:\n    - RootNode::tileCount(), RootNode::activeTileCount() and\n      RootNode::inactiveTileCount() are now public.\n    - RootNode::hasKey() and RootNode::coordToKey() are now public.\n    - RootNode::leafCount(), RootNode::nonLeafCount() and RootNode::nodeCount()\n      now use Index64 instead of Index32. The Index32 variant is deprecated.\n    - InternalNode::leafCount(), InternalNode::nonLeafCount() and\n      InternalNode::nodeCount() now use Index64 instead of Index32. The Index32\n      variant is deprecated.\n    - LeafNode::leafCount() and LeafNode::nonLeafCount() now use Index64 instead\n      of Index32. The Index32 variant is deprecated.\n\n    Bug Fixes:\n    - Fix potential crash reading corrupt .vdb files with invalid\n      blosc or zip chunks.\n      [Fix thanks to Matthias Ueberheide]\n    - Fix a bug in RootNode::setOrigin() where the origin was updated\n      before the error was thrown potentially leaving the root in an\n      invalid state.\n    - Fixed a thread sanitizer issue which could cause undefined\n      behaviour in VolumeToSpheres::fillWithSpheres\n      [Reported by Jérémie Dumas]\n    - Fixed an occurance of undefined behaviour in tools::activate\n      (though this would typically not have manifested with any\n      unintended behaviour)\n\n  NanoVDB:\n    Bug fix:\n    - nanovdb::readGrids works with raw grid buffer.\n\n    Improvements:\n    - Restructure files location and namespace to be more align with\n      OpenVDB. The namespaces touched by the restructuring are: io,\n      cuda, util, tools, and math.\n    - Add two scripts updateFiles.sh and updateFiles.py to update the\n      files using NanoVDB. The script updateFiles.py works on both\n      Windows and Linux.  For a more complete list of changes, see API\n      Changes (details).\n\n    - cuda::PointsToGrid supports target density.\n    - Add support for NanoVDB Grid of type UInt8.\n    - Add ability to use externally managed CUDA buffer.\n    - Add create methods for CudaDeviceBuffer and exceptions.\n    - Improve GridValidator logic, e.g. include check for grid count.\n    - Add operator > and >= for class Coord according to lexicographical order.\n    - Add toCodec to convert string to Codec enumeration type.\n    - Add nanovdb::strlen<GridType>().\n    - Add strncpy util.\n    - Add NANOVDB_DISABLE_SYNC_CUDA_MALLOC that maps cudaMallocAsync\n      and cudaFreeAsync to cudaMalloc and cudaFree respectively.\n    - Add guard to UINT64_C.\n    - Remove use of cudaMallocAsync in PointsToGrid.cuh.\n    - Align PNanoVDB blind metadata to NanoVDB.\n\n    API Changes:\n    - Change mapToGridType to toGridType.\n    - Change mapToMagic to toMagic.\n    - Change CpuTimer.h to Timer.h.\n\n    API Changes (details):\n    - These APIs are now under the math namespace: Ray, DDA, HDDA,\n      Vec3, Vec4, BBox, ZeroCrossing, TreeMarcher, PointTreeMarcher,\n      BoxStencil, CurvatureStencil, GradStencil, WenoStencil, AlignUp,\n      Min, Max, Abs, Clamp, Sqrt, Sign, Maximum, Delta, RoundDown, pi,\n      isApproxZero, Round, createSampler, SampleFromVoxels.\n\n    - These APIs are now under the tools namespace: createNanoGrid,\n      StatsMode, createLevelSetSphere, createFogVolumeSphere,\n      createFogVolumeSphere, createFogVolumeSphere,\n      createFogVolumeTorus, createLevelSetBox, CreateNanoGrid,\n      updateGridStats, evalChecksum, validateChecksum, checkGrid,\n      Extrema.\n    - These APIs are now under the util namespace: is_floating_point,\n      findLowestOn, findHighestOn, Range, streq, strcpy, strcat,\n      empty, Split, invoke, forEach, reduce, prefixSum, is_same,\n      is_specialization, PtrAdd, PtrDiff.\n\n    - Move nanovdb::build to nanovdb::tools::build.\n    - Rename nanovdb::BBoxR to nanovdb::Vec3dBBox.\n    - Rename nanovdb::BBox<nanovdb::Vec3d> to nanovdb::Vec3dBbox.\n    - Move nanovdb::cudaCreateNodeManager to nanovdb::cuda::createNodeManager.\n    - Move and rename nanovdb::cudaVoxelsToGrid to nanovdb::cuda::voxelsToGrid.\n    - Move and rename nanovdb::cudaPointsToGrid to nanovdb::cuda::pointsToGrid.\n    - Move nanovdb::DitherLUT to nanovdb::math::DitherLUT.\n    - Move and rename nanovdb::PackedRGBA8 to nanovdb::math::Rgba8.\n    - Move nanovdb::Rgba8 to nanovdb::math::Rgba8.\n    - Move and rename nanovdb::CpuTimer to nanovdb::util::Timer.\n    - Move nanovdb::GpuTimer to nanovdb::util::cuda::Timer.\n    - Move and rename nanovdb::CountOn to nanovdb::util::countOn.\n\n    - Move util/GridHandle.h to GridHandle.h.\n    - Move util/BuildGrid.h to tools/GridBuilder.h.\n    - Move util/GridBuilder.h to tools/GridBuilder.h.\n    - Move util/IO.h to io/IO.h.\n    - Move util/CSampleFromVoxels.h to math/CSampleFromVoxels.h.\n    - Move util/DitherLUT.h to math/DitherLUT.h.\n    - Move util/HDDA.h to math/HDDA.h.\n    - Move util/Ray.h to math/Ray.h.\n    - Move util/SampleFromVoxels.h to math/SampleFromVoxels.h.\n    - Move util/Stencils.h to nanovdb/math/Stencils.h.\n    - Move util/CreateNanoGrid.h to tools/CreateNanoGrid.h.\n    - Move and rename util/Primitives.h to tools/CreatePrimitives.h.\n    - Move util/GridChecksum.h to tools/GridChecksum.h.\n    - Move util/GridStats.h to tools/GridStats.h.\n    - Move util/GridChecksum.h to tools/GridChecksum.h.\n    - Move util/GridValidator.h to tools/GridValidator.h.\n    - Move util/NanoToOpenVDB.h to tools/NanoToOpenVDB.h.\n    - Move util/cuda/CudaGridChecksum.cuh to tools/cuda/CudaGridChecksum.cuh.\n    - Move util/cuda/CudaGridStats.cuh to tools/cuda/CudaGridStats.cuh.\n    - Move util/cuda/CudaGridValidator.cuh to tools/cuda/CudaGridValidator.cuh.\n    - Move util/cuda/CudaIndexToGrid.cuh to tools/cuda/CudaIndexToGrid.cuh.\n    - Move and rename util/cuda/CudaPointsToGrid.cuh to tools/cuda/PointsToGrid.cuh.\n    - Move util/cuda/CudaSignedFloodFill.cuh to tools/cuda/CudaSignedFloodFill.cuh.\n    - Move and rename util/cuda/CudaDeviceBuffer.h to cuda/DeviceBuffer.h.\n    - Move and rename util/cuda/CudaGridHandle.cuh to cuda/GridHandle.cuh.\n    - Move and rename util/cuda/CudaUtils.h to util/cuda/Util.h.\n    - Move and consolidate util/cuda/GpuTimer.h to util/cuda/Timer.h.\n\n  Houdini:\n    - When OPENVDB_ENABLE_RPATH is ON, the location of\n      libopenvdb_houdini is now added to the rpath of all Houdini\n      dsos.\n\n  Python:\n    - OpenVDB Python bindings are now implemented using nanobind\n      instead of pybind11\n    - The OpenVDB Python module has been changed from pyopenvdb to openvdb\n    - Added Python bindings for NanoVDB\n\n  Build:\n    - Fixed an issue with OpenVDB AX's CMake on Windows where the\n      static and shared library targets would have the same name\n      [Reported by Nicholas Yue]\n    - USE_EXPLICIT_INSTANTIATION is now disabled on Windows by default\n      due to OOM linker issues.\n    - Jemalloc is now the preferred allocator of choice on all\n      platforms when CONCURRENT_MALLOC is set to Auto.\n    - Fixed an issue with the Blosc CMake FindPackage for the OpenVDB\n      Windows static library.\n\n\nVersion 11.0.0 - November 1, 2023\n\n      This version introduces ABI changes relative to older major releases,\n      so to preserve ABI compatibility it might be necessary to define the\n      macro OPENVDB_ABI_VERSION_NUMBER=N, where, for example, N is 9 for\n      Houdini 19.5 and 10 for Houdini 20.0.\n\n      OpenEXR 2 and Python 2 are no longer supported.\n\n  OpenVDB:\n    Improvements:\n    - Removed use of boost::any in favor of std::any.\n      [Contributed by Brian McKinnon]\n\n    Bug Fixes:\n    - Fix potential crash reading corrupt .vdb files with invalid\n      blosc or zip chunks.\n      [Contributed by Matthias Ueberheide]\n\n  NanoVDB:\n    Highlights:\n    - Several new tools to generate and modify NanoVDB grids on the GPU.\n    - New file format that supports streaming of raw grid buffers.\n\n    New Features:\n    - New memory efficient GridClass::IndexGrid that separates values from tree\n    - 4 new GridTypes (Index, OnIndex, IndexMask, OnIndexMask) used by IndexGrid\n    - Added createNanoGrid that replaces older conversion methods in GridBuilder.h,\n      IndexGridBuilder.h and OpenToNanoVDB.h\n    - Added cudaPointsToGrid that constructs a point device grid from a list of\n      points.\n    - Added cudaVoxelsToGrid that constructs a voxel device grid from a list of\n      voxels.\n    - Added cuda/CudaUtils.h with several cuda utility functions.\n    - Added GpuTimer for timing of kernels in a specific cuda stream.\n    - Added cudaIndexToGrid that converts IndexGrids into regular Grids.\n    - Added cudaSignedFloodFill that performs signed-flood filling on the GPU.\n    - Added cudaAddBlindData that adds blind data to an existing grid on the GPU.\n    - Added cudaGridChecksum that computes checksums of device grids.\n    - Added cudaGridHandle that handles grids on the GPU.\n    - Added cudaNodeManager that constructs a NodeManager on the GPU.\n    - Added build type Points and GridType::PointIndex for point grids.\n    - Added GridType::Vec3u16 and GridType::Vec3u8 for compressed coordinates.\n    - Added PrefixSum.h for concurrent computation of prefix sum on the CPU.\n\n    API Changes:\n    - Version 32.6.0 (ABI is unchanged).\n    - Transition from C++11 to C++17\n    - Vec3R is deprecated, please use Vec3d instead.\n    - nanoToOpenVDB now takes the index of a NanoVDB in a GridHandle.\n    - GridData, InternalData and LeafData are now public.\n    - GridMetaData can be copied.\n    - Improvements to GridBuilder.h that allows construction of grids on CPU.\n    - GridHandle's move c-tor now requires the GridBuffer to contain a valid grid.\n    - Moved CudaDeviceBuffer.h to cuda/CudaDeviceBuffer.h.\n    - New API for acceleration of custom random-access with ValueAccessors.\n    - Added BitFlags class for convenient bit-mask operations.\n    - Added Vec2/3::min/maxComponentAtomic GPU methods.\n    - Added BBox::expandAtomic and BBox::intersectAtomic.\n    - Added Coord::expandAtomic.\n    - Added Map constructors.\n    - Added Mask::DenseIterator, Mask::setOnAtomic, and Mask::setOffAtomic.\n    - InternalNode::ChildIterator is now const-correct.\n    - Added several new NanoVDB Build Traits.\n    - Syncing PNanoVDB.h with NanoVDB.h.\n\n  Build:\n  - Support for OpenEXR 2.X has been removed.\n  - Better support for building with external package configurations\n    with CMAKE_FIND_PACKAGE_PREFER_CONFIG=ON.\n\n  Python:\n  - Removed Python 2 support.\n  [Contributed by Matthew Cong]\n  - Removed explicit bindings for Math types.\n  [Contributed by Matthew Cong]\n  - Improved type casting for TypedMetadata.\n  [Contributed by Matthew Cong]\n\n\nVersion 10.1.0 - October 11, 2023\n\n  Highlights:\n    - OpenVDB Python bindings are now implemented using pybind11 instead of\n    Boost.Python.\n    [Contributed by Matthew Cong]\n\n  OpenVDB:\n    New features:\n    - Added points::replicate() for the replication of PointDataGrid points\n      and attributes.\n\n    Improvements:\n    - Upgraded OpenVDBs internal half representation to IMath 3.1.6. Brings\n      conversion support using F16C instructions (if enabled using -mf16c) and\n      the removal of the exponent lookup table in favor of bit shifting.\n    - OpenVDBs copy of Half.h is no longer built with an internal lookup table,\n      but explicitly selects the non-LUT version and disables the creation of\n      the LUT. This is required to avoid symbol conflicts with different\n      namespaced OpenVDB builds.\n    - Removed boost::uuid from Archive, instead std::random_device is used\n      directly to generate UUID-like objects.\n    - Moved all cases of file static/global variables which relied on non-trivial\n      construction into function scopes as static locals. These would previously\n      initialize themselves on start-up in a non-deterministic, compiler-dictated\n      order(static-initialization-order-fiasco). This order is now defined by the\n      program's execution.\n    - Fixed the constants used in openvdb::math::Coord::hash() and\n      nanovdb::Coord::hash() to correctly be prime numbers (note that this\n      changes the result of these methods).\n      [Contributed by Benedikt Mersch]\n    - Updated tools::meshToVolume to take two new optional arguments to provide\n      an interior test oracle and an interior testing method. These allow the\n      default outside-flood-fill to be replaced if the actual sidedness can be\n      known.\n      [Contributed by Tomas Skrivan]\n    - LevelSetRebuild now includes example code that demonstrates the intended\n      use of the new meshToVolume interior testing parameters for the\n      resampling of level sets, where the original grid is used as the true\n      sign value. However, due to differences between polygonalization and\n      trilinear interpolation, this behaviour is disabled and exists as a\n      reference.\n    - Introduced openvdb::TupleList to wrap std::tuple and provide interface\n      interop methods with openvdb::TypeList.\n    - Added OPENVDB_FORCE_INLINE, OPENVDB_LIKELY and OPENVDB_UNLIKELY macros.\n    - Introduced openvdb::make_index_sequence to solve clang compilations\n      issues with compiler built-in index_sequence implementations.\n\n    API changes:\n    - Significant infrastructural change to the ValueAccessor header and\n      implementation. All ValueAccessor specializations have been consolidated\n      into a single class which supports all possible ValueAccessor configurations\n      using index_sequences. Backward compatible declarations have been provided.\n      The new ValueAccessor implementation is marked as final.\n    - PagedArray iterators no longer derive from std::iterator\n      (but remains standard compliant).\n\n    Bug Fixes:\n    - Internal counters in tree::RangeIterator were limited to 32bit precision.\n      They are now extended to size_t.\n      [Reported by SpaceX]\n    - Fixed a bug when compiling with -fvisibility=hidden and GCC 11 which\n      would cause a crash in openvdb::initialize().\n    - Fixed a bug with LeafManager which wouldn't correctly\n      initialize its LeafNode array for single level Tree configurations\n      i.e. RootNode<LeafNode> (bug introduced in 7.2.0).\n      [Reported by @lanwatch]\n    - Fixed a bug with LeafNodeBool Topology constructor with designated\n      on/off values which wouldn't apply them correctly.\n      [Reported by @hozhaoea]\n\n  OpenVDB AX:\n    Improvements:\n    - Added support for LLVM 15.\n\n    Bug Fixes:\n    - Fixed a bug in AX on older X86 hardware which could cause a crash when\n      accessing point attributes with half compression (bug introduced in 9.1.0).\n    - Fixed an incorrect option in the `vdb_ax` command line tool where the default\n      optimization level was set to NONE instead of O3 (issue introduced in 10.0.0).\n\n  Houdini:\n    Improvements:\n    - Added Preserve Holes option to VDB From Polygons that uses the\n      fast winding oracle to not collapse holes in polygonal geometry.\n\n    Bug Fixes:\n    - Fix a bug in the projection mode of the Advect Points SOP that was causing\n      a segfault.\n\n  Build:\n    - Fixed a build issue where Boost was not being pulled in when\n      OPENVDB_USE_DELAYED_LOADING was set to OFF.\n    - Fixed a build issue with AX on 32-bit platforms.\n      [Reported by Mathieu Malaterre]\n    - Fixed a compilation issue with the min() and max() methods on Stencils\n      in openvdb/math/Stencils.h.\n      [Reported by Samuel Mauch]\n    - Fixed a compilation error that would be encountered when attempting to\n      enable the SSE4.2 or AVX SIMD options on non-x86 based platforms.\n    - Improved support for compiling with C++20.\n      [Contributed by Denys Maletskyy and Jérémie Dumas]\n    - OpenVDB's CMake no longer modifies the BUILD_SHARED_LIBS variable.\n      [Reported by Maksim Shabunin]\n    - Fix int-in-bool-context GCC9+ warnings by switching to use constexpr if.\n\nVersion 10.0.1 - November 30, 2022\n\n    Bug Fixes:\n    - Fix uninitialized point flags in tools::VolumeToMesh which could result in\n      non-deterministic results (bug introduced in 10.0.0).\n\n    Build:\n    - Fixed CXX standard requirement for VDB components in FindOpenVDB.cmake\n\nVersion 10.0.0 - October 27, 2022\n\n      This version introduces ABI changes relative to older major releases,\n      so to preserve ABI compatibility it might be necessary to define the\n      macro OPENVDB_ABI_VERSION_NUMBER=N, where, for example, N is 8 for\n      Houdini 19.0 and 9 for Houdini 19.5.\n\n  Highlights:\n  - Introducing OpenVDBLink, which provides a Mathematica interface to\n    OpenVDB. This link ports over access to various grid containers including\n    level sets, fog volumes, vector grids, integer grids, Boolean grids,\n    and mask grids. Construction, modification, combinations, visualisations,\n    queries, import, export, etc. can be achieved over grids too. Any\n    Mathematica 3D region that's ConstantRegionQ and BoundedRegionQ can\n    be represented as a level set grid, providing a more seamless integration\n    with OpenVDB.\n  - Introducing a new command-line tool, dubbed vdb_tool, that can combine any\n    number of the high-level tools available in openvdb/tools. For\n    instance, it can convert a sequence of polygon meshes and particles to\n    level sets, perform a large number of operations on these level set\n    surfaces and export them as adaptive polygon meshes.\n\n  OpenVDB:\n    Improvements:\n    - Significantly improved the performance of all ValueAccessor methods which\n      access LeafNode value buffer data. This improvement applies to any type\n      which is delay load compatible (all default types except for bool and mask\n      grids) and improves the performance of many OpenVDB tools.\n    - Improved the performance of volumeToMesh by 10-15%.\n\n    ABI changes:\n    - ABI change to openvdb::RootNode, which now has a new member that defines\n      the origin of the node. For now this origin is set to a default value of\n      (0,0,0), but in the near future we will allow for offsets to improve\n      access performance and reduce the memory footprints.\n    - Removed deprecated virtual methods from AttributeArray.\n\n    API changes:\n    - Removed PagedArray::push_back().\n    - Removed Tree visitor methods from Tree, RootNode, InternalNode and\n      LeafNode classes - visit(), visit2(), visitActiveBBox().\n    - Removed LeafManager::getNodes().\n    - Removed tools::dilateVoxels() and tools::erodeVoxels() in favor of\n      tools::dilateActiveValues() and tools::erodeActiveValues().\n    - Removed tools::FindActiveValues::any() and\n      tools::FindActiveValues::none().\n    - StringGrid and StringTrees have been removed.\n\n    Bug Fixes:\n    - Fixed an issue with tools::topologyToLevelSet which would previously\n      ignore active tiles in the input topology.\n      [Reported by Tobias Rittig]\n    - Fixed a bug with ValueAccessor::addLeaf and ValueAccessor::addTile which\n      wouldn't add the provided leaf nodes to the underlying tree. This bug did\n      NOT affect the specialized accessors which are used by the default tree\n      configuration.\n      [Contributed by Andrey Zakirov]\n    - Fixed a bug where ValueAccessor::probeNode<NodeT> and\n      ValueAccessor:probeConstNode<NodeT> would return a nullptr if the NodeT\n      type was not explicitly being cached by the accessor but the node existed\n      in the tree.\n    - Fixed a bug on Windows where math::Abs could truncate 64bit integer values.\n      [Contributed by Edward Lam]\n    - Fixed an occurrence of undefined behaviour with math::floatToInt32 and\n      math::doubleToInt64.\n      [Reported by Vojtěch Bubník]\n    - Fixed bugs in the sum merge that produced incorrect merged grids when\n      deep-copying the input nodes or when non-zero background grids were being\n      used.\n    - Fixed a bug in FastSweeping where voxels/tiles are left with min/max float\n      values.\n    - Fixed a bug in math/Tuple.h that prevented compilation with VS2017.\n\n  OpenVDB AX:\n    Improvements:\n    - Major updates to the command line interface of the vdb_ax binary, exposing\n      more controls such as tile streaming, value iterator types and attribute\n      bindings.\n\n  OpenVDB Houdini:\n    New Features:\n    - Add convex hull activation for VDB Activate SOP (requires 19.5).\n\n    Improvements:\n    - Improved SDF activation to use dynamic node manager.\n\n    Bug Fixes:\n    - Fixed a bug in VDB Visualize SOP where color values that exceed\n      the range wrap around instead of being clamped.\n\n  NanoVDB:\n    New Features:\n    - Added nanovdb::IndexGrid that allows for arbitrary voxel values and even\n      multiple channels to be associated with NanoVDB grids. They are more\n      flexible and memory efficient than regular grids at a small cost of\n      random-access performance. IndexGrids are constructed with the new\n      nanovdb::IndexGridBuilder and accessed with the new\n      nanovdb::ChannelAccessor.\n    - Added iterators to all tree node classes for visiting inactive, active, or\n      all values and child nodes.\n    - NanoVDB.h now includes standalone implementations of reading and writing\n      uncompressed nanovdb grids buffers.\n    - Added Stats::getExtrema, which computes the min/max values of all voxels\n      in a NanoVDB grid that intersects with a user-defined bounding-box.\n    - Added nanovdb::Mask::countOn(int) which is essential to the new\n      nanovdb::IndexGrid.\n    - Added RootNode::probeChild and InternalNode::probeChild.\n\n    Improvements:\n    - Added a new much improved nanovdb::NodeManager, that is both faster and\n      more memory efficient, and that works on both the CPU and GPU. Note, it\n      uses a handle for allocation (just like nanovdb::Grid) and replaces the\n      old nanovdb::LeafManager which is now deprecated.\n    - NanoToOpenVDB is extended to work with grids templated on Fp4, Fp8, Fp16,\n      FpN, bool and ValueMask.\n    - Renamed RootNode::findTile to RootNode::probeTile and made it public.\n    - Made Mask::getWord return both a const and non-const reference.\n    - Improved unit-tests to use explicit 32B alignment (see alignment bug-fix\n      below).\n    - PNanoVDB.h (a C99 port of NanoVDB.h) has been updated.\n\n    Bug Fixes:\n    - Fixed a bug in nanovdb::HostBuffer that could produce crashes due to\n      misaligned CPU memory allocations.\n    - Fixed bug related to uninitialized memory in nanovdb::Grid which could\n      confuse CRC32 checksum validation.\n    - Fixed bugs related to the use of intrinsic functions for fast bit-counting\n      in nanovdb.\n    - Fixed a potential security vulnerability in NanoVDB.h related to buffer\n      overflow exploits.\n\n  Build:\n  - Added OPENVDB_USE_DELAYED_LOAD flag that enables delayed loading and\n    defaults to on.\n  - Add a placeholder to inject the specific revision and URL used\n    to build OpenVDB, useful for 3rd party build scripts to publish\n    their exact versions.\n  - Fixed an issue where OPENVDB_AX_DLL was not being defined on shared\n    library builds of AX, resulting in symbols not being exported.\n    [Reported by Ray Molenkamp]\n  - Fixed an issue where setting Tbb_INCLUDE_DIR could cause CMake failures.\n  - Updated FindTBB.cmake to support newer library ABI suffixing in\n    TBB 2021.5.\n  - Updated FindBlosc.cmake to better handle cases where blosc is built with\n    external sources.\n  - Resolved LLVM deprecation warnings in AX and added support for LLVM 14.\n  - On Windows (MSVC), OpenVDB is now built with extra compiler options to\n    ensure stricter C++ conformance: /permissive- /Zc:throwingNew /Zc:inline.\n  - On Windows (MSVC), the _USE_MATH_DEFINES macro is no longer defined when\n    including <openvdb/Platform.h> (or any dependent headers). If you were\n    relying on this in your own project for M_PI, M_PI_2, etc. you can add\n    -D_USE_MATH_DEFINES to your own project compiler options. See\n    https://docs.microsoft.com/en-us/cpp/c-runtime-library/math-constants\n    for more info.\n\nVersion 9.1.0 - June 9, 2022\n\n    Bug Fixes:\n    - Minor fix to move assignment operator in nanovdb/util/HostBuffer.h.\n      This could potentially be a problem on Windows debug builds (unconfirmed).\n    - Minor fix to range in openvdb/tools/LevelSetSphere.h. This could result\n      in data races for multi-threaded execution (unconfirmed)\n      [Reported by Tommy Hinks]\n    - Fixed a bug with Tree::combineExtended which wouldn't propagate the\n      resulting active state when a destination tile overlapped a source child node.\n      [Reported by @frapit]\n    - Fix unit tests failures with Blosc versions >= 1.19.0.\n    - Fixed a regression in ax::run which wouldn't propagate exceptions\n    - Fixed a bug where ax::ast::parse could return a partially constructed but\n      invalid AST on failure\n    - Fixed AX logger exit handling in ax::Compiler::compile and ax::ast::parse\n    - Fixed an issue which could result in significant compilation times when\n      instantiating TypeList<>::Unique<>\n\n    New features:\n    - Added support for AMD's HIP API in NanoVDB\n      [Contributed by Blender Foundation]\n    - Added bindings mechanism to AX to allow differing data and AX attribute\n      names (@) in Point and Volume executables.\n    - Added support for OpenVDB AX on Windows.\n    - Added tools::memUsageIfLoaded() which returns the memory consumption of\n      a deserialized VDB tree, useful if delay-loading is enabled.\n    - Added points::rasterizeSpheres() and points::rasterizeSmoothSpheres()\n      variants, new kernels and improved performance for OpenVDB points to\n      surface rasterization.\n    - Added points::rasterizeTrilinear() for OpenVDB points, fast staggered\n      or colocated trilinear rasterization for scalar and vector attributes.\n    - Exposed TypeList declarations in openvdb.h which denote the default set\n      of types supported by OpenVDB.\n    - Added points::FrustumRasterizer for efficient rasterization of OpenVDB\n      points to frustum volumes with optional motion blur.\n\n    Improvements:\n    - Added a --thread [n] argument to the vdb_ax binary.\n    - Added a --copy-file-metadata option to vdb_ax. This behaviour is now\n      off by default.\n    - Added support for multiple input files with the vdb_ax binary using -i.\n      Positional arguments as input files are deprecated.\n    - Added tools::minMax() which supports multithreaded evaluation of active\n      minimum and maximum values. Grid::evalMinMax() has been deprecated.\n    - Significant performance improvements to AX point kernels, primarily due to\n      providing AX access to attribute buffers for superior code generation.\n    - vdb_print now prints both the in-core memory and total memory usage for\n      VDB grids.\n    - Improved build support for MinGW\n      [Contributed by Mehdi Chinoune]\n    - Added a new foreach method to TypeList for iterating over types without\n      constructing them.\n    - Added TypeList::Transform declaration for transforming TypeLists into new\n      types.\n    - Moved Grid::apply implementation to TypeList::apply to allow for other\n      polymorphic types to invoke it.\n    - Minor updates to NanoVDB to remove compiler warnings.\n\n    Build:\n    - Regenerated AX grammar with Flex 2.6.4 and Bison 3.8.2.\n    - Improved locating NumPy in CMake when multiple python versions are installed.\n    - Fixed an issue which could report Python as missing when using CMake 3.18\n      and later on some systems.\n      [Reported by Sam James]\n    - Changed the way boost_python and boost_numpy are located. Both components\n      must match the major/minor version of python in use. This can be\n      circumvented by providing Boost_PYTHON_VERSION or\n      Boost_PYTHON_VERSION_MAJOR.\n    - Relocated OpenVDB binaries to a new openvdb_cmd root directory.\n    - FindTBB.cmake now prioritises newer TBB installations.\n    - Added option to compress PDB data in MSVC debug builds.\n\n    Houdini:\n    - Added Attribute Bindings to AX SOP to allow differently named AX\n      attributes (@) and target point attributes/volumes.\n    - Fix race condition in OpenVDB Merge SOP that could cause crashes or\n      merged VDBs to not be deleted.\n    - VDB Activate SOP no longer stops at the first non-VDB primitive, but\n      instead just skips such primitives.\n    - Added VDB Rasterize Frustum SOP for efficient rasterization of OpenVDB\n      points into frustum volumes with optional motion blur.\n\n\nVersion 9.0.0 - October 29, 2021\n\n      This version introduces ABI changes relative to older major releases,\n      so to preserve ABI compatibility it might be necessary to define the\n      macro OPENVDB_ABI_VERSION_NUMBER=N, where, for example, N is 7 for\n      Houdini 18.5 and 8 for Houdini 19.0.\n\n      Official release of NanoVDB, which for the first time offers GPU support\n      for static sparse volumes in OpenVDB.\n\n    New features:\n    - Faster build times from support for explicit template instantiation,\n      which is enabled by default for most of the tools.\n    - Added support for OpenEXR 3 and TBB 2021.\n    - Added transient data to the RootNode, InternalNode, and LeafNode.\n\n    Improvements:\n    - Added tools::countActiveLeafVoxels(), tools::countInactiveVoxels(),\n      tools::countInactiveLeafVoxels() and tools::activeTiles() to perform\n      multi-threaded counting. The Tree methods now use these implementations.\n    - Moved from the deprecated TBB task scheduler to TBB arenas. Various\n      methods now respect the TBB arena state they were invoked from.\n    - Introduced a new thread/Threading.h header to consolidate calls to\n      third-party threading methods.\n    - Minor performance improvements to dilation calls in fast sweeping\n      algorithms.\n    - Added hsvtogrb() and rgbtohsv() AX helper functions for converting\n      hue, saturation and value inputs to RGB values and vice-versa.\n    - PointDataGrid conversion can now be performed using 32-bit float arrays.\n    - Improved support for size_t grid types on systems where size_t is a\n      unique type.\n      [Contributed by Brecht Van Lommel]\n    - Add support for dilation in one direction and extending a field in one\n      direction in fast sweeping algorithms.\n    - Added PNG support to vdb_render which can be enabled with during CMake\n      with -DUSE_PNG=ON.\n    - Explicit template instantiation has been enabled by default for most of\n      the tools. This pre-compiles template instantiations into the core library\n      to reduce the time spent compiling code in downstream libraries or\n      applications.\n    - Added a python binding for OpenVDB AX which allows you to invoke accelerated\n      AX code from the python module.\n\n    Bug Fixes:\n    - Fixed a bug where ax::run() would crash if it could not parse a single\n      statement.\n\n    ABI changes:\n    - Added transient data to the RootNode, InternalNode, and LeafNode.\n\n    API changes:\n    - DynamicNodeManager can now set one grain size for threading across leaf nodes\n      and another for threading across non-leaf nodes.\n    - StringGrid and StringTrees are deprecated.\n    - The NullInterrupter is now a virtual base class to help reduce\n      compile-time instantiation cost.\n\n    Houdini:\n    - Fix crash in VDB Combine in Copy B mode if the second input has\n      more VDBs than the first.\n    - VDB Vector Merge SOP is now VDB Vector From Scalar SOP to distinguish\n      it from the VDB Merge SOP. It keeps the same internal name so this\n      is merely a label change.\n    - Add option to pass in OPENVDB_DSO_NAMES to CMake to configure which\n      Houdini DSOs are compiled.\n    - VDB Activate SOP now has an option for the expansion pattern to use\n      for dilation.\n    - The label for Voxels to Expand is now Expand Voxels to match Houdini.\n    - Fix bug to allow VDB LOD SOPs to be chained together.\n    - SOP Extrapolate supports dilation in one direction and extending a field\n      in one (domain) direction.\n    - The default OpenVDB ABI is now 8 for Houdini versions > 18.5.\n    - VDB Visualize Tree SOP is now multi-threaded and provides slicing and\n      color remapping.\n    - A new HoudiniInterrupter has been added that derives from the\n      NullInterrupter and the Interrupter is now deprecated. All the SOPs have\n      been updated to use the new HoudiniInterrupter.\n    - Add a sanitizer in SOP OpenVDB Extrapolate when expanding a narrow-band\n      level-set with a dilation value of 0, which will result in no operation.\n\n    Build:\n    - Added support for TBB 2021.\n    - Enabled the OPENVDB_FUTURE_DEPRECATION variable by default to warn on\n      upcoming deprecations.\n    - Introduced a OPENVDB_DOXYGEN_INTERNAL CMake variable which is ON by\n      default and removes the majority of internal namespaces from the\n      generated doxygen.\n    - Improved the doxygen deprecation listings, folder layouts and fixes\n      issues when using later versions of doxygen.\n    - Build fixes for MinGW on Windows.\n      [Contributed by Brecht Sanders]\n    - Added support for OpenEXR 3.\n      [Contributed by Cary Phillips]\n    - Added an OPENVDB_NAMESPACE_SUFFIX CMake string option which provides\n      the ability to customise the VDB namespace.\n    - The Python Module now appends the base directory defined by\n      Python_SITELIB to the default install path (typically dist-packages\n      or site-packages).\n      [Contributed by Ignacio Vizzo]\n    - As of this release, VFX Reference Platform 2019 is no longer supported.\n      CMake now issues deprecation warnings for 2020 VFX Reference Platform\n      version dependencies.\n    - Build fixes for OpenVDB AX with C++17 and greater.\n    - Bumped the new blosc version future minimum to 1.17.0.\n    - OpenEXR is now optional for vdb_render. It can be enabled with\n      -DUSE_EXR=ON.\n\n\nVersion 8.2.0 - November 24, 2021\n\n    Improvements:\n    - Added tools::countActiveLeafVoxels(), tools::countInactiveVoxels(),\n      tools::countInactiveLeafVoxels() and tools::activeTiles() to perform\n      multi-threaded counting. The Tree methods now use these implementations.\n    - Moved from the deprecated TBB task scheduler to TBB arenas. Various\n      methods now respect the TBB arena state they were invoked from.\n    - Introduced a new thread/Threading.h header to consolidate calls to\n      third-party threading methods.\n    - Minor performance improvements to dilation calls in fast sweeping\n      algorithms.\n    - Added hsvtogrb() and rgbtohsv() AX helper functions for converting\n      hue, saturation and value inputs to RGB values and vice-versa.\n    - PointDataGrid conversion can now be performed using 32-bit float arrays.\n    - Improved support for size_t grid types on systems where size_t is a\n      unique type.\n      [Contributed by Brecht Van Lommel]\n    - Minor performance improvements to dilation calls in fast sweeping\n      algorithms.\n    - Add support for dilation in one direction and extending a field in one\n      direction in fast sweeping algorithms.\n\n    API changes:\n    - DynamicNodeManager can now set one grain size for threading across leaf nodes\n      and another for threading across non-leaf nodes.\n\n    Houdini:\n    - Fix crash in VDB Combine in Copy B mode if the second input has\n      more VDBs than the first.\n    - VDB Vector Merge SOP is now VDB Vector From Scalar SOP to distinguish\n      it from the VDB Merge SOP. It keeps the same internal name so this\n      is merely a label change.\n    - Add option to pass in OPENVDB_DSO_NAMES to CMake to configure which\n      Houdini DSOs are compiled.\n    - VDB Activate SOP now has an option for the expansion pattern to use\n      for dilation.\n    - The label for Voxels to Expand is now Expand Voxels to match Houdini.\n    - Fix bug to allow VDB LOD SOPs to be chained together.\n    - SOP Extrapolate supports dilation in one direction and extending a field\n      in one (domain) direction.\n    - The default OpenVDB ABI is now 8 for Houdini versions > 18.5.\n    - VDB Visualize Tree SOP is now multi-threaded and provides slicing and\n      color remapping.\n    - Add a sanitizer in SOP OpenVDB Extrapolate when expanding a narrow-band\n      level-set with a dilation value of 0, which will result in no operation.\n\n    Build:\n    - Added support for TBB 2021.\n    - Enabled the OPENVDB_FUTURE_DEPRECATION variable by default to warn on\n      upcoming deprecations.\n    - Introduced a OPENVDB_DOXYGEN_INTERNAL CMake variable which is ON by\n      default and removes the majority of internal namespaces from the\n      generated doxygen.\n    - Improved the doxygen deprecation listings, folder layouts and fixes\n      issues when using later versions of doxygen.\n    - Build fixes for MinGW on Windows.\n      [Contributed by Brecht Sanders]\n    - Added support for OpenEXR 3.\n      [Contributed by Cary Phillips]\n    - Added an OPENVDB_NAMESPACE_SUFFIX CMake string option which provides\n      the ability to customise the VDB namespace.\n    - The Python Module now appends the base directory defined by\n      Python_SITELIB to the default install path (typically dist-packages\n      or site-packages).\n      [Contributed by Ignacio Vizzo]\n\n\nVersion 8.1.0 - June 11, 2021\n\n      As of this release, support for grid ABI=5 has been removed.\n\n    New features:\n    - Added tools::erodeActiveValues() to match the existing\n      tools::dilateActiveValues(). New erosion tools support all tile policies\n      and edge/vertex neighbor patterns.\n    - Added support for automatic filtering of active tiles in tools::Filter\n      by setting tools::Filter::setProcessTiles. Active tiles are densified\n      on demand, only when necessary.\n    - Added tools::visitNodesDepthFirst and tools::DepthFirstNodeVisitor which\n      visit nodes in a tree or sub-tree in single-threaded depth-first order.\n    - Significant performance improvements to AX volume kernels, primarily due\n      to improved vectorization. Performance scales depending on the available\n      host CPU instruction set and scalability of the AX kernel. Trivial\n      assignments profile upwards of 3x faster on AVX.\n    - Introduced Active Tile Streaming for volumes kernels. AX can now\n      dynamically expand and collapse active nodes at all levels of a VDB tree\n      on demand, switching on or off by checking the spatial access pattern of\n      AX programs.\n    - Added tools::countActiveVoxels() for multi-threaded counting of active\n      voxels, optionally by bounding box. The Tree::activeVoxelCount() method\n      now uses this implementation.\n    - Added tools::memUsage() for multi-threaded counting of bytes of memory\n      used. The Tree::memUsage() method now uses this implementation.\n\n    Improvements:\n    - Significant performance improvements to large dilations with\n      tools::dilateActiveValues(). Performance gains will improve relative to\n      increases in the inputs size and dilation scheme.\n    - Added an optional argument to Tree::topologyUnion() which preserves\n      active tiles on the destination tree should they overlap leaf nodes\n      from the source tree.\n    - Reduced the time spent in the hot path of openvdb::initialize() and\n      openvdb::uninitialize() by leveraging atomics with double-checked locks.\n      [Contributed by Ben FrantzDale].\n    - Extended tree::DynamicNodeManager to allow for use with a const tree.\n    - Replace tbb::mutex with std::mutex and tbb::atomic with std::atomic as\n      these have now been removed in TBB 2021.\n      [Contributed by Ben FrantzDale].\n    - Significant performance improvements to tools::activate and\n      tools::deactivate through use of the DynamicNodeManager to parallelize\n      tile processing.\n    - Added degree() and radians() AX helper functions for converting radians\n      to degrees and vice versa, respectively.\n    - Added adjoint(), cofactor() and inverse() AX matrix functions.\n    - Added sort(), argsort(), isfinite(), isinf() and isnan() AX utility and\n      math functions.\n    - Added Vec4 argument support to normalize() AX function.\n    - Removed unused int16 AX modulo function signatures.\n    - Refactored the backend AX representation of strings with SSO support and\n      heap allocation.\n    - Added new methods on the VolumeExecutable to control active tile\n      streaming and node execution levels\n    - The deletepoint() AX function is now natively supported by the\n      PointExecutable\n    - Added tools::SumMergeOp that uses a parallel breadth-first algorithm to\n      accelerate summing grids.\n    - vdb_view: Fixed a bug which wouldn't reset the camera speed on focus\n    - vdb_view: Improved the drawing of PointDataGrids\n    - vdb_view: Improved the exception handling of BufferObjects and added\n      support for drawing an array without index values\n\n    Bug Fixes:\n    - Fix a memory leak in AttributeArray when delayed-loading is disabled.\n    - Fixed a crash in OpenVDB AX when declaring arrays with non-scalar\n      elements (unsupported) i.e. {\"foo\", 1, 2}, {1, {1,2}, 3} etc.\n    - Fixed a bug in OpenVDB AX which would cause an error when multiplying a\n      vec3 by a mat4.\n    - In OpenVDB AX, improved the error message produced when attempting to use\n      a matrix literal (i.e. {1,2,3...}) in a binary expression (this is\n      invalid but would previously print out bad IR).\n    - Fixed a non-deterministic failure in the TestStreamCompression unit test.\n    - Use copy-by-reference for the operator in a DynamicNodeManager to fix a\n      performance regression.\n    - tools::deactivate now also works with a MaskTree.\n    - Fixed a memory leak in the OpenVDB AX parser\n    - Fixed an occurrence of undefined behavior in the OpenVDB AX visitor\n    - Fixed some memory leaks in the OpenVDB and OpenVDB AX unit tests\n    - Fixed a bug in AX which could cause string allocations in loops to overflow\n      the stack\n    - Fixed a bug where the ValueOff iterator for the AX VolumeExecutable could\n      remove child branches of a VDB tree.\n    - Fixed a crash in the AX Houdini SOP with an empty PointDataGrid input.\n    - Fixed all cases where PointIndex and PointData aliases were used instead\n      of a templated type.  [Reported by Karl Marrett]\n    - Fixed a crash when calling openvdb::points::pointOffsets with an empty\n      PointDataGrid input.\n    - Add missing 8-bit and 16-bit attribute type registration.\n\n    API changes:\n    - Restructured the internals of Morphology.h and moved tools::activate()\n      and tools::deactivate() to a new header, Activate.h.\n    - Deprecated tools::dilateVoxels() and tools::erodeVoxels() in favour of\n      new morphology methods.\n    - The openvdb::tools::Film class no longer has a saveExr method in\n      any build configuration. Sample code for saving exrs from this\n      object can be found in the command line render tool.\n    - Added ability to run tools::activate and tools::deactivate\n      single-threaded.\n\n    Houdini:\n    - Updated the VDB Activate SOP and others to use the multi-threaded\n      implementation for voxel dilation, providing a significant performance\n      increase.\n    - Introduced the VDB AX SOP which provides an interface for running\n      OpenVDB AX code in Houdini on VDB grids.\n    - Updated the VDB Smooth SOP to support the filtering of active tiles.\n    - Fixed a parameter warning in VDB AX SOP.\n    - Transfer Surface Attributes in Convert VDB SOP could use uninitialized\n      memory.\n    - VDB Activate SOP now uses the multi-threaded tools::deactivate for much\n      faster performance.\n    - Improved the formatting and updated the OpenVDB AX SOPs help card.\n    - The AX SOP utilizes the new Active Tile Streaming feature for Volumes.\n      Grids will only be densified in areas where unique values are created.\n    - VDB Activate SOP dilation will affect tiles, changing its behavior\n      from previous versions, but producing a more expected result.\n    - VDB Activate SOP has a world space dilation option.\n    - Introduced the VDB Merge SOP that merges multiple grids in parallel and\n      is faster and more convenient to use than the VDB Combine SOP.\n    - Fix a bug where the VDB Rebuild SDF was not preserving metadata from the\n      input grid.\n    - Fix a bug in VDB Resample SOP where input transform was not being used for\n      voxel size and voxel scale transform modes.\n    - Added Extrapolate SOP, which wraps the tools leveraging the Fast Sweeping\n      algorithm (tools::dilateSdf, tools::maskSdf, tools::fogToSdf,\n      tools::sdfToSdf, tools::sdfToExt, tools::fogToExt, tools::sdfToSdfAndExt,\n      tools::fogToSdfAndExt).\n\n    Build:\n    - Dependency on OpenEXR's Half implementation has been removed from the\n      core library by naturalizing the implementation into openvdb::math.\n      This is fully bitwise compatible, but may require switching Half\n      references to math::Half. The USE_IMATH_HALF build configuration can\n      be used to switch back to OpenEXR based half.\n    - Blosc, Log4cplus, IlmBase, OpenEXR and TBB find modules now configure\n      release and debug library variants.\n      [Reported by Matthew Cong]\n    - Fixed an issue where FindBlosc wouldn't add zstd as a dep in non static\n      builds BLOSC_USE_EXTERNAL_SOURCES.\n    - Fixed Log4cplus interface language and missing interface libraries on\n      Win32.\n    - Removed Jemalloc and Tbbmalloc logic from the core library builds.\n    - The variable CMAKE_MSVC_RUNTIME_LIBRARY is no longer set by the OpenVDB\n      CMake. If CMAKE_MSVC_RUNTIME_LIBRARY is not explicitly provided, OpenVDB\n      configures the static library with /MT(d) and the dynamic library\n      with /MD(d).\n      [Reported by Jérémie Dumas]\n    - Added support for ABI=9 and a CMake option OPENVDB_USE_FUTURE_ABI_9 to\n      use it without errors.\n    - The value of CONCURRENT_MALLOC is now respected when building the vdb_ax\n      command line binary.\n    - Added an option OPENVDB_ENABLE_UNINSTALL to allow the toggling of the\n      uninstall build target.\n      [Contributed by Jérémie Dumas]\n    - Improved the behavior of locating static zlib libraries when\n      USE_STATIC_DEPENDENCIES is enabled.\n    - Fixed an issue where extra hboost libraries could not be found when\n      building against Houdini 18.5 on Windows.\n    - Build fixes to OpenVDB AX for LLVM 12.\n    - Re-introduced the OPENVDB_DEPRECATED macro with an additional option that\n      takes a message.  Added support to disable deprecations throughout\n      OpenVDB by defining OPENVDB_NO_DEPRECATION_WARNINGS\n    - Added an optional OPENVDB_TESTS variable to easily build a subset of the\n      unit tests.\n    - Fixed various incorrect RPATH directory paths in CMake (introduced in\n      8.0.1)\n      [Contributed by Ignacio Vizzo].\n    - Removed some unnecessary CMake for vdb_view\n    - The Windows defines NOMINMAX and _USE_MATH_DEFINES are now provided in\n      Platform.h.\n    - Moved the logic from PlatformConfig.h into Platform.h.\n    - The version.h header is now an auto generated header (version.h.in)\n      populated by CMake.  The OpenVDB Version and ABI defines are computed\n      from the installation settings.  Importantly, the value of\n      OPENVDB_ABI_VERSION_NUMBER now always matches the version used at build\n      time.\n    - Added OPENVDB_USE_HALF, OPENVDB_USE_BLOSC and OPENVDB_USE_ZLIB as\n      publicly available defines in version.h. These will be defined depending\n      on the settings used to build OpenVDB.\n\n\nVersion 8.0.1 - February 5, 2021\n\n    Bug fixes:\n    - Fixed a bug in the new CSG intersection merge algorithm where data\n      outside of the intersection region was not being removed.\n\n    Build:\n    - Fixed various incorrect RPATH directory paths in CMake\n    - Dropped the minimum boost requirement back to 1.61.\n    - Documentation installed by the doc target is now installed to the\n      share/doc/OpenVDB prefix\n\n    Houdini:\n    - VDB Combine SOP no longer attempts to invoke SDF CSG operations on\n      bool grids because unary negation is undefined on bools in the\n      template expansion.\n\nVersion 8.0.0 - December 23, 2020\n\n      This version introduces ABI changes relative to older major releases,\n      so to preserve ABI compatibility it might be necessary to define the\n      macro OPENVDB_ABI_VERSION_NUMBER=N, where, for example, N is 6 for\n      Houdini 18.0 and 7 for Houdini 18.5.\n\n      Official release of OpenVDB AX, a new C++ library that implements a\n      domain specific JIT (just-in-time) compiled expression language,\n      providing users with a new way of interacting with OpenVDB data. AX is\n      tailored towards writing highly parallelizable and customizable OpenVDB\n      volume and point kernel operations. See the documentation for more:\n      https://www.openvdb.org/documentation/openvdbax.html\n\n    New features:\n    - Added tools::anyActiveVoxels and tools::anyActiveTiles that check\n      if respectively active voxels or tiles in a tree intersect a given\n      CoordBBox.\n    - Added tools::activeTiles that returns a vector containing all the active\n      tiles in a tree that intersects a given CoordBBox.\n\n    Improvements:\n    - Made LeafManager class non-virtual.\n\n    Bug fixes:\n    - Fixed a determinism bug in NodeManager when using non-thread-safe\n      functor members.\n    - Fix GridTransformer construction to use correct rotate-scale-translate\n      order when recomposing matrix components.\n      [Contributed by Tom Cnops].\n    - OpenVDB AX: Fixed a potential code generation crash in binary, ternary\n      or comma operators when errors occurred in first operand.\n\n    ABI changes:\n    - Grid::isTreeUnique() is now virtual as of ABI=8 so that it can be\n      accessed from the GridBase.\n    - Private method RootNode::getChildCount() has been removed as of ABI=8.\n    - Mark map classes and functions as final for ABI=8 where beneficial to\n      allow devirtualization optimization.\n    - As of ABI 8, Vector, Matrix and Quaternion types now satisfy the Trivial\n      Type requirement. Their empty constructors and copy constructors have\n      been removed (and are left to the compiler to define).\n    - As of ABI 8, removed an unnecessary specialization of NodeUnion and\n      CopyTraits from NodeUnion.h. Replaced std::is_pod usage with\n      std::is_trivially_copyable which allows more types to benefit from the\n      union storage.\n    - As of ABI 8, PointDataGrids use the union NodeUnion specialization,\n      reducing the memory footprint of their topology by 50%.\n\n    API changes:\n    - Removed a number of deprecated point, volume and AX methods.\n\n    Houdini:\n    - VDB to Spheres SOP doesn't reset the radius when in worldspace mode.\n      VDB Write likewise should not reset the compression values.\n\n    Build:\n    - As of this release, VFX Reference Platform 2018 is no longer supported.\n      CMake now issues deprecation warnings for 2019 VFX Reference Platform\n      version dependencies, with the exception that OpenEXR/IlmBase 2.2 is\n      still supported.\n    - Added a missing header include to resolve an undefined size_t build error\n      on GCC10.\n    - Improved the python module's linkage with the CMake 3.15 Python::Module\n      target. Explicitly linking with the Development target could result in\n      crashes, particularly on macOS.\n      [Reported by Alexander Hagen]\n    - Removed OPENVDB_DEPRECATED macro in favor of C++14 [[deprecated]]\n      attribute.\n\nVersion 7.2.3 - March 16, 2021\n\n    Bug fixes:\n    - Use copy-by-reference for the operator in a DynamicNodeManager to fix a\n      performance regression.\n\nVersion 7.2.2 - February 4, 2021\n\n    Bug fixes:\n    - Fixed a bug in the new CSG intersection merge algorithm where data\n      outside of the intersection region was not being removed.\n    - Fix GridTransformer construction to use correct rotate-scale-translate\n      order when recomposing matrix components.\n      [Contributed by Tom Cnops].\n\n    Houdini:\n    - VDB Combine SOP no longer attempts to invoke SDF CSG operations on\n      bool grids because unary negation is undefined on bools in the\n      template expansion.\n    - VDB to Spheres SOP doesn't reset the radius when in worldspace mode.\n      VDB Write likewise should not reset the compression values.\n\nVersion 7.2.1 - December 23, 2020\n\n    Bug fixes:\n    - Fixed a determinism bug in NodeManager when using non-thread-safe\n      functor members.\n\n    Build:\n    - Added a missing header include to resolve an undefined size_t build error\n      on GCC10.\n\nVersion 7.2.0 - December 9, 2020\n\n    New features:\n    - Added tree::DynamicNodeManager that lazily caches the nodes at each\n      level of the tree to allow for efficient threading of topology-changing\n      top-down workflows.\n    - Added tools::CsgUnionOp, tools::CsgIntersectionOp and\n      tools::CsgDifferenceOp that use a parallel breadth-first algorithm to\n      accelerate CSG union, intersection and difference operations.\n    - Added tools::TreeToMerge which provides methods to steal or deep-copy\n      from a tree based on the tag dispatch class used in its construction.\n    - Pre-release of OpenVDB AX, an open source C++ library that provides a\n      powerful and easy way of interacting with OpenVDB volume and point data.\n\n    Improvements:\n    - util::CpuTimer now uses C++11 chrono instead of TBB.\n    - Threaded the construction of LeafManager and NodeManager linear arrays.\n    - tools::csgUnion, tools::csgIntersection and tools::csgDifference now use\n      the new parallel breadth-first algorithms for much faster performance.\n    - Extended tree::NodeManager to allow for use with a const tree.\n    - Added math::Abs, math::cwiseAdd, math::cwiseLessThan and\n      math::cwiseGreaterThan methods for Matrix types. Matrix grids can now be\n      instantiated.\n\n    Houdini:\n    - Fixed a bug in the OpenVDB Points Convert SOP where the auto voxel\n      transform was ignoring the contents of packed geometry.\n    - Fixed a bug in the OpenVDB Points Convert SOP where points representing\n      packed geometry were also being converted.\n    - Fixed a bug where a Houdini SOP's verb would not be correctly associated\n      with the corresponding node if the node's internal name was changed.\n    - Fixed bug where OpenVDB Convert SOP could revert the name attribute.\n\n    Bug fixes:\n    - Fixed a bug which could cause recursive compile time instantiations of\n      TypeList objects, manifesting in longer compile times.\n    - Deprecated util::PagedArray::push_back due to a race condition. Instead\n      use util::PagedArray::ValueBuffer::push_back which is faster and thread-safe.\n    - Fixed various cases of undefined behavior in some LevelSetUtil methods\n      [Reported by fkemmler]\n\n    API changes:\n    - Deprecated tree::LeafManager::getNodes. This method is no longer used when\n      constructing a NodeManager from a LeafManager.\n    - Deprecated Tree::visitActiveBBox, Tree::visit and Tree::visit2 methods in\n      favor of using a tree::DynamicNodeManager.\n    - Removed tools::CsgVisitorBase, tools::CsgVisitorUnion,\n      tools::CsgVisitorIntersection and tools::CsgVisitorDifference. The CSG\n      tools now use the parallel breath-first algorithms.\n    - Moved openvdb::TypeList from Types.h into its own header TypeList.h\n\n    Build:\n    - Removed the Makefiles.\n    - Re-organised the repository layout such that each independent library\n      is able to be configured against an existing installation of OpenVDB\n      without ambiguous include paths.\n    - Upgraded CMake minimum version support to 3.12.\n    - Removed OPENVDB_STATIC_SPECIALIZATION macro which is no longer required.\n    - Fixed various compiler warnings for GCC 9.1.\n    - Moved to CMake doxygen commands and removed the doxygen-config files for\n      doxygen documentation.\n    - Added USE_ZLIB compiler flag that enables zlib compression and defaults\n      to on.\n    - Added the OPENVDB_STATICLIB define to all static builds to fix builds on\n      Windows which use the multithread/DLL-specific version of the CRT.\n      [Reported by Tobias Rittig]\n    - Core library unit tests use GoogleTest instead of CppUnit.\n\nVersion 7.1.0 - August 13, 2020\n\n      As of this release, support for grid ABI=4 has been removed.\n\n    New features:\n    - Added a novel parallel sparse FastSweeping class that outperforms our\n      existing techniques for computing signed distance fields in addition to\n      supporting velocity extension.\n    - Added tools::fogToSdf which converts a scalar (fog) volume into a signed\n      distance field.\n    - Added tools::sdfToSdf which re-normalizes a signed distance field;\n    - Added tools::fogToExt which extends an arbitrary field (e.g. velocity)\n      off the iso-surface of a scalar (fog) volume.\n    - Added tools::sdfToExt which extends an arbitrary field (e.g. velocity)\n      off the iso-surface of a signed distance field.\n    - Added tools::fogToSdfAndExt which computes a signed distance and extends\n      an arbitrary field (e.g. velocity) off the iso-surface of a signed\n      distance field.\n    - Added tools::fogToSdfAndExt which re-normalizes a signed distance and\n      extends an arbitrary field (e.g. velocity) off the iso-surface of a\n      signed distance field.\n    - Added tools::dilateSdf which dilates a signed distance field.\n    - Added tools::maskSdf which extends an existing signed distance into a\n      user-defined mask.\n    - Added Grid::isTreeUnique() to tell if the tree is shared with another\n      grid.\n    - Added PointDataLeafNode::stealAttributeSet() and\n      AttributeSet::removeAttribute() for releasing ownership of attribute\n      data.\n    - Added AttributeSet::Descriptor::groupIndexCollision() for detecting\n      group index collisions when attempting to merge two Descriptors.\n    - Added RootNode::childCount(), InternalNode::childCount() and\n      LeafNode::childCount() to count the number of immediate child nodes that\n      exist below the current node.\n\n    Improvements:\n    - Added GroupWriteHandle::setUnsafe() for faster performance when the group\n      array is known to be in-core and non-uniform.\n    - Add support for default value metadata when creating AttributeArrays or\n      appending to an AttributeSet.\n    - Added new group inspection methods to the AttributeSet::Descriptor.\n    - Introduced a StringMetaCache class for convenient string attribute\n      metadata lookup and performed some minor optimizations.\n    - Removed redundant floor in points::floatingPointToFixedPoint.\n    - Add gitignore to repository root.\n    - Removed some logic for compilers older than Visual Studio 2019.\n    - Add a new Houdini ABI test binary.\n    - Fixed an indexing typo in tools::Filter. [Contributed by Yuanming Hu]\n    - Removed redundant null pointer checks. [Contributed by Kuba Roth]\n    - Added support for vdb_view on Windows. Requires GLEW.\n    - Removed support for GLFW 2.\n    - vdb_view now uses OPENVDB_LOG_FATAL when catching exceptions.\n    - vdb_view, vdb_print and vdb_render now use std::terminate() when catching\n      an unknown exception.\n    - Removed Boost::thread as a dependency of vdb_view in favour of\n      std::thread.\n    - Removed usage of boost/integer.hpp and boost/math/constants/constants.hpp,\n      the latter in favour of new openvdb math constants for pi\n    - Removed usage of boost/mpl/*.hpp methods in favour of new template\n      meta-programming methods on the openvdb::TypeList struct. This now\n      supports get, front, back, contains, index, unique, popback, popfront\n      and range removal of types.\n    - Changed the tree::NodeChain implementation to use an openvdb::TypeList\n      rather than a boost::mpl::vector and updated all usage of tree::NodeChain\n      accordingly.\n\n    Bug fixes:\n    - Fixed a bug where grids with no active values might return true when the\n      method evalActiveVoxelBoundingBox is called. The correct behavior is to\n      only return true if the grid contains any active values.\n    - Fixed a sign propagation bug in tools::traceExteriorBoundaries() used by\n      tools::meshToVolume(). This could cause values to not be propagated across\n      node boundaries, leading to voxels incorrectly being marked as inside the\n      isosurface. [Contributed by Tristan Barback]\n    - Fixed a rotation order bug in tools::local_util::decompose()\n      that caused it to fail to decompose some matrices.\n    - Fixed a bug where math::Quat::inverse() was not marked as const.\n      [Contributed by Michael Tao]\n    - Fixed a bug in the unit test for util::CpuTimer on Windows by using a\n      more accurate sleep implementation.\n    - Fixed a bug where the requested uniform value of an AttributeArray was\n      not being applied on attribute creation if the default attribute value\n      was not the default value for that value type.\n    - Fixed a compiler error when using C++17 by changing std::unexpected() to\n      std::terminate().\n      [Contributed by Mark Sisson]\n\n    API changes:\n    - Removed a number of deprecated point methods.\n    - points::StringIndexType is now deprecated, use Index instead.\n    - PointPartitioner::voxelOffsets() now returns a std::unique_ptr instead of\n      a boost::scoped_array.\n    - Renamed AttributeSet::Descriptor::nextUnusedGroupOffset() to\n      AttributeSet::Descriptor::unusedGroupOffset() to allow for providing an\n      optional group offset hint.\n\n    Houdini:\n    - Platonic SOP is now verbified.\n    - Extend all SOP references to support VDB Points.\n    - Combine SOP will not error in flatten-all mode if second has no grids.\n    - Changed the label (but not the opname) of Resize Narrow Band SOP to match\n      the corresponding native Houdini SOP. The new label is Activate SDF.\n    - Fixed a bug by using GEO_Detail::getBBox() instead of\n      GEO_Detail::computeQuickBounds() as the latter was incorrectly using the\n      point of the VDB when computing bounding box. SOPs affected include Clip,\n      Fill, Points Group, Rasterize Points, Read, Remove Divergence.\n      [Contributed by Kuba Roth]\n    - OpenVDB from Polygons SOP now always displays the vector UI, as otherwise\n      it might be stuck hidden if the input hasn't cooked.\n    - OpenVDB from Polygons and OpenVDB from Particles SOPs no longer require\n      input geometry to have been cooked to offer a choice of attributes,\n      the user may now also type in a value.\n\n    Build:\n    - Improved the CMake build for the OpenVDB Houdini library on Windows.\n      [Reported by Ian Woodward]\n    - Remove some logic for compilers older than Visual Studio 2019.\n    - Fixed a bug in the CMake FindIlmBase/OpenEXR modules which could cause\n      compilers on UNIX systems to fail to find stdlib.h if IlmBase/OpenEXR\n      headers were installed to /usr/include.\n    - CMake now checks the minimum supported MSVC compiler for Windows.\n    - CMake now only requires a CXX compiler.\n    - Improved the Windows README instructions and various MSVC warnings.\n    - Remove CMake warning when using GLFW 3.2+ on Debian.\n    - Various fixes to unary minus on unsigned compiler warnings.\n    - The defines _CRT_NONSTDC_NO_WARNINGS and _CRT_SECURE_NO_WARNINGS are now\n      enabled by default with MSVC.\n    - New CMake option OPENVDB_BUILD_PYTHON_UNITTESTS to disable or enable\n      the python module tests and fixed the required environment for them on\n      Windows. The python interpreter is no longer required by default if the\n      tests are disabled.\n    - Improved the CMake user messages when locating python and numpy.\n    - The python module extension is now .pyd on Windows.\n    - Fixed some build issues with the Houdini plugin on Windows.\n    - Standardized the library components install paths for the OpenVDB\n      Houdini shared library.\n    - Added a USE_PKGCONFIG option to CMake to optionally disable use of\n      pkg-config. [Contributed by Kartik Shrivastava]\n    - Standardized the dependency search paths in FindPackage modules using\n      GNU install paths.\n    - Added better library type detection of dependencies through FindPackage\n      modules on UNIX.\n    - Added missing TBB, OpenEXR and IlmBase defines for static builds on\n      Windows through the relevant FindPackage modules.\n    - Improved the logic in FindOpenVDB for static builds.\n    - Fixed a compiler warning on Apple Clang 11.0 where the AttributeArray\n      move constructor was being implicitly deleted despite being marked\n      default.\n    - Added an option BLOSC_USE_EXTERNAL_SOURCES to FindBlosc to include blosc\n      dependencies as interface libraries.\n    - Added a root CMake option USE_STATIC_DEPENDENCIES to force CMake to\n      only locate static libraries on UNIX. On Windows, if enabled, located\n      libraries are assumed to be static.\n    - Added support for CMAKE_MSVC_RUNTIME_LIBRARY for compilers that target\n      the MSVC ABI. Requires CMake 3.15 or greater.\n    - Fixed an issue where OPENVDB_OPENEXR_STATICLIB was not being defined and\n      OPENEXR_DLL was being defined when linking against static builds of\n      OpenEXR/IlmBase on Windows.\n    - Improved the behaviour of boost implicit linking with the\n      Boost::disable_autolinking target.\n    - Added support for importing pyopenvdb and openvdb_houdini through the\n      FindOpenVDB CMake module\n    - Removed the OPENVDB_2_ABI_COMPATIBLE and OPENVDB_3_ABI_COMPATIBLE macros.\n    - Fixed a few GCC compiler warnings by adding override keywords.\n      [Contributed by Edward Lam]\n    - jemalloc/tbbmalloc are no longer linked into library artifacts of the\n      OpenVDB CMake build. The CONCURRENT_MALLOC CMake option now only applies\n      to the executables.\n    - Introduced a new OpenVDB::openvdb_je interface target through the\n      FindOpenVDB CMake module which adds Jemalloc as a link time dependency.\n    - CMake build fix for the vdb_render binary on Windows when building\n      statically and using OpenEXR 2.5\n\nVersion 7.0.0 - December 6, 2019\n\n      Some changes in this release (see \"ABI changes\" below) alter\n      the grid ABI so that it is incompatible with earlier versions\n      of the OpenVDB library, such as the ones built into Houdini\n      up to and including Houdini 18.0. To preserve ABI compatibility,\n      when compiling OpenVDB or any dependent code define the macro\n      OPENVDB_ABI_VERSION_NUMBER=N, where, for example, N is 5 for\n      Houdini 17.0 and 17.5 and 6 for Houdini 18.0.\n\n      As of this release, a C++14 compiler is required and the oldest\n      supported Houdini version is 17.0.\n\n    New features:\n    - LevelSetMeasure can now compute multiple types of curvatures (averge and total\n      Gaussian and mean curvature) as well as Euler characteristic and genus of\n      level set surfaces.\n    - Most stencil classes now have an intersection method that detcts the axial\n      directions of zero-crossings (as oppose to the existing boolean intersection test).\n    - The CurvatureStencil can now compute Gaussian and principal\n      curvatures (in addition to mean curvature).\n    - Added Tree::nodeCount, which counts the number and type of nodes\n      in a tree very efficiently.\n    - Added new RootNode::addChild() and InternalNode::addChild() methods to\n      allow the insertion of child nodes directly.\n\n    Improvements:\n    - The minimum ABI for OpenVDB is now always enforced through CMake\n      separately from other minimum dependency version variables.\n    - Added support for CMake 3.12 compatible Xxx_ROOT variables.\n    - Replaced the CMake USE_SYSTEM_LIBRARY_PATHS option with\n      DISABLE_CMAKE_SEARCH_PATHS and removed the hard coded list of\n      SYSTEM_LIBRARY_PATHS in favor of using CMake's default search procedure.\n      SYSTEM_LIBRARY_PATHS can still be used as a global list of paths for all\n      dependency searches.\n    - Improvements to OpenVDB's CMake module setup order in regards to CMake\n      policy, minimum version and project calls.\n    - Replaced occurrences of boost::scoped_array with std::unique_ptr.\n    - Added an OPENVDB_SIMD option to CMake to optionally define SSE4.2 and\n      AVX compiler flags, this is switched off by default.\n    - Made various small changes to improve Visual Studio compatiblity and\n      deprecate some logic for compilers older than Visual Studio 2017.\n    - Standardized CMake install locations using GNUInstallDirs. Importantly,\n      this changes the default library installation folder from lib to lib64\n      on some 64-bit systems, or to lib/multiarch-tuple on Debian\n      [Contributed by David Aguilar]\n    - Added SIMD intrinsics to a few common NodeMask methods.\n      [Contributed by Konstantin]\n\n    Bug fixes:\n    - Fixed a bug in FindJemalloc.cmake where paths were not being handled\n      correctly.\n    - Fixed a Windows build issue in openvdb_render.\n    - Fixed a non deterministic threading bug in tools::meshToVolume() during\n      polygon voxelization which could result in different distance values.\n\n    ABI changes:\n    - OpFactory destructor is now virtual as of ABI=7\n    - Added new virtual methods for copying const grids and replacing\n      the metadata and/or the transform - GridBase::copyGridReplacingMetadata,\n      GridBase::copyGridReplacingTransform and\n      GridBase::copyGridReplacingMetadataAndTransform.\n    - AttributeArray copy constructor is now thread-safe.\n\n    API changes:\n    - VolumeToMesh::pointList() and VolumeToMesh::polygonPoolList() now return\n      a std::unique_ptr instead of a boost::scoped_array.\n    - AttributeArray::copyUncompressed() is now deprecated.\n\n    Python:\n    - Removed the requirement of CMake 3.14 for NumPy usage.\n    - Added support for Boost versions 1.65 and later when building\n      the Python module with NumPy support through CMake.\n    - Improved CMake Python3 support.\n    - The Python Module is now disabled by default in CMake.\n\n    Houdini:\n    - Fixed a bug in the Points Convert SOP during conversion from\n      Houdini geometry to OpenVDB Points, where point group information\n      could end up corrupted or cause a crash with non-contiguous\n      point offsets (mesh inputs).\n    - Threaded the population of point group memberships during conversion\n      from Houdini geometry to OpenVDB Points\n    - Added logic to the Rasterize Points SOP to suppress the output of\n      non-finite attribute values due to subnormal input densities.\n    - Introduced a position compression option to the Scatter SOP for VDB\n      Points and default to 16-bit fixed point.\n\n\nVersion 6.2.1 - September 30, 2019\n\n    Bug fixes:\n    - Fixed a crash that arose from an inadvertent ABI change of an I/O class\n      with the 6.2.0 release.  The crash occured when attempting to write out\n      a point data grid using an I/O routine from a different version of\n      OpenVDB than the one with which the grid was authored and when\n      one of those OpenVDB versions was 6.2.0.\n\n\nVersion 6.2.0 - September 18, 2019\n\n    New features:\n    - Added tools::FindActiveValues, which counts the active values\n      in a tree that intersect a given bounding box.\n    - Added io::DelayedLoadMetadata, which stores mask offsets and compression\n      sizes on write to accelerate delayed load reading.\n\n    Improvements:\n    - LeafNode::modifyValue() and LeafNode::modifyValueAndActiveState()\n      now modify voxel values in place for improved performance.\n    - Added math::isInfinite() and math::isNan() to resolve Visual Studio\n      compatibility issues with integer types.\n    - Made minor performance improvements to moving and filtering VDB points.\n    - Improved performance related to a mutex contention when appending\n      multiple AttributeArrays in parallel through various point operations.\n    - Significantly improved the performance of createLevelSetSphere()\n      using threading.\n    - Improved directory and file path lookups of some CMake commands in\n      the root CMakeLists.txt\n      [Reported by Daniel Elliott]\n    - Improved CMake support for GLFW versions 3.1 and later.\n    - FindOpenVDB.cmake now correctly propagates CXX version requirements.\n    - Added CMake support for linking against Jemalloc and TBB malloc\n      and enabled Jemalloc by default for Linux and non-Maya builds\n      and TBB malloc for all other builds.\n    - Added a USE_COLORED_OUTPUT option to CMake to display compiler output\n      in color.\n    - Added an OPENVDB_CODE_COVERAGE option to CMake.\n    - CMake now automatically detects and configures the CXX11 ABI requirement\n      for Houdini builds.\n    - CMake now issues deprecation warnings for 2017 VFX Reference Platform\n      version dependencies. In particular, C++11-only compilers are now\n      deprecated; OpenVDB 7.0 will require a C++14-compatible compiler.\n\n    Bug fixes:\n    - Replaced std::vector with std::deque as the underlying container\n      for util::PagedArray, to address a rare crash when reading\n      from multiple threads while writing from another thread.\n    - Fixed a bug that could cause an empty CoordBBox to report nonzero volume.\n    - Fixed a bug in tools::computeScalarPotential() that could produce\n      a corrupt result due to invalid memory access.\n      [Reported by Edwin Braun]\n    - Partially reverted tools::ClosestSurfacePoint's distance calculations\n      to their pre-OpenVDB 5.0 behavior to address a bug in the\n      fillWithSpheres() tool that caused generated spheres to sometimes\n      extend outside the target volume.\n    - CMake now correctly sets rpaths for the unit test binary.\n    - Addressed a Valgrind warning by allocating the AttributeArray registry\n      using a Meyers singleton.\n      [Contributed by Autodesk]\n\n    ABI changes:\n    - ABI versions 3 and older are now deprecated, and support for them will be\n      removed in a future release. Until then, define the macro\n      OPENVDB_USE_DEPRECATED_ABI (or set the CMake OPENVDB_USE_DEPRECATED_ABI\n      option to ON) to suppress deprecation messages when compiling OpenVDB or\n      dependent code.\n\n    API changes:\n    - Changed points::RandomLeafFilter::LeafMap from a std::map to\n      a std::unordered_map.\n    - Removed the TableT template argument from util::PagedArray.\n      The table type is now hardcoded to std::deque.\n    - The minimum supported version of GLFW is now 3.1.\n\n    Python:\n    - CMake now always produces a .so for the Python module on Unix\n      and Linux platforms.\n    - Fixed a compile-time error when building the Python module for Python 3.\n      [Reported by yurivict]\n\n    Houdini:\n    - OpenVDB SOPs are now displayed in an ASWF sub-menu of the VDB tab menu.\n    - Added API documentation and examples.\n    - Added openvdb_houdini::GEOvdbApply(), which invokes a functor\n      on a VDB primitive if the resolved grid type is a member of\n      a given type list.\n    - Fixed a regression in the Fill SOP that caused it to modify VDBs\n      in the input detail.\n    - The Combine SOP no longer crashes in Copy B mode when the destination\n      is not a VDB.\n    - Added a houdini_utils::OpFactory::addSpareData() method\n      and addOperatorSpareData() and getOperatorSpareData() functions\n      to manage spare data associated with operator types.\n    - Added an opsparedata HScript command and hou.NodeType.spareData()\n      and hou.NodeType.spareDataDict() methods to retrieve spare data\n      associated with operator types.\n    - Added a pythonrc.py startup script to set the tab menu visibility\n      of nodes and their native Houdini equivalents, based on an\n      OPENVDB_OPHIDE_POLICY environment variable.\n    - Added a houdini_utils::OpFactory::setInvisible() method to hide nodes\n      from tab menus.\n    - Added an OpenVDBOpFactory::setNativeName() method to pair OpenVDB nodes\n      with their native Houdini equivalents.\n    - Added a houdini_utils::OpPolicy::getTabSubMenuPath() method to allow\n      OpPolicy subclasses to provide their own tab sub-menu path.\n    - OpenVDB nodes now override OP_Operator::getVersion() to return\n      a version string of the form \"vdb6.2.0 houdini18.0.222\".\n\n\nVersion 6.1.0 - May 8, 2019\n\n      As of this release, the oldest supported Houdini version is 16.5.\n\n    New features:\n    - Added new QuatTraits, MatTraits and ValueTraits type traits to complement\n      VecTraits and added an IsSpecializationOf helper metafunction.\n    - Added support for Vec4s, Vec4d and Vec4i metadata.\n    - Added a generic TypeList class.\n    - Added GridBase::apply(), which invokes a functor on a grid\n      if the resolved grid type is a member of a given type list.\n    - Added util::printTime(), which outputs nicely formatted time information.\n    - Added a std::hash<Coord> template specialization.\n    - Added CoordBBox::moveMin() and CoordBBox::moveMax() to move a CoordBBox.\n\n    Improvements:\n    - util::CpuTimer now makes use of util::printTime() for nicer output,\n      and its API has been improved.\n    - Significantly improved the performance of point data grid string\n      attribute generation.\n    - AttributeArray::copy() and the copy assignment operator for\n      AttributeArrays are now thread-safe.\n    - The command-line tools (vdb_print, etc.) now include the library\n      ABI version in their -version output.\n    - Further improved the responsiveness of the mesh to volume converter\n      to interrupt requests.\n    - The CMake build system has been significantly improved to support a\n      wider range of build options and use cases. This includes better\n      dependency handling and status reporting, find module installation for\n      external use, more robust handling of different platform configurations\n      and the introduction of dependency and build documentation.\n\n    Bug fixes:\n    - Fixed a bug in tools::clip() that caused some grid metadata\n      to be discarded.\n    - Added a check to points::setGroup to compare the maximum index of the\n      provided PointIndexTree to the size of the membership vector.\n    - Fixed a race condition introduced in ABI 6 when moving points\n      in point data grids, due to non-const access to an AttributArray\n      triggering a copy-on-write.\n    - Fixed a bug that caused the mesh to volume converter to consume\n      unlimited memory when it encountered NaNs in vertex positions.\n    - Fixed a rounding error bug in point conversion when using\n      single-precision floating-point.\n    - Addressed some type conversion issues and other issues reported by GCC 6.\n    - Fixed a crash in tools::extractActiveVoxelSegmentMasks() when the first\n      leaf node had no active voxels.\n      [Reported by Rick Hankins]\n    - Fixed a bug in tools::segmentActiveVoxels() and tools::segmentSDF() where\n      inactive leaf nodes were only pruned when there was more than one segment.\n    - Fixed a crash in point moving when using group filters.\n    - Fixed a bug where the stride of existing attributes was being ignored\n      during copy-construction of an AttributeSet.\n    - Fixed a bug that caused AttributeArray equality operators to fail for\n      attributes with non-constant strides.\n\n    API changes:\n    - Moved the CopyConstness metafunction from TreeIterator.h to Types.h.\n\n    Houdini:\n    - The Points Convert SOP now reports NaN Positions as warnings when\n      converting from Houdini Points to VDB Points.\n    - Fixed a bug where the Points Convert SOP was incorrectly ignoring\n      point attributes with the same name as an existing point group.\n    - The Transform SOP now supports frustum transforms by applying the\n      transformation to the internal affine map.\n    - Changed the labels (but not the opnames) of several SOPs to match\n      the corresponding native Houdini SOPs.  The new labels are\n      Morph SDF, Project Non-Divergent, Rebuild SDF, Renormalize SDF,\n      Reshape SDF, Segment by Connectivity, Smooth SDF, Topology to SDF,\n      and Visualize Tree.\n    - Added a houdini_utils::OpPolicy::getFirstName() method to allow\n      OpPolicy subclasses to provide their own first name scheme.\n    - Added a houdini_utils::OpPolicy::getLabelName() method to allow\n      OpPolicy subclasses to provide their own label naming scheme\n      for tab menus.\n    - Added type lists for sets of commonly used grid types, including\n      ScalarGridTypes, Vec3GridTypes, AllGridTypes, etc.\n    - The Vector Merge SOP now copies metadata from the representative\n      scalar grid.\n    - Deprecated SOP_NodeVDB::duplicateSourceStealable(),\n      houdini_utils::getNodeChain() and houdini_utils::OP_EvalScope.\n\n    Python:\n    - Added limited support for point data grids, comprising I/O and\n      metadata functionality for now.\n    - Added support for Mat4s and Mat4d metadata, in the form of nested\n      Python lists (e.g., [[1,0,0,0], [0,1,0,0], [0,0,1,0], [0,0,0,1]]).\n\n\nVersion 6.0.0 - December 18, 2018\n\n      Some changes in this release (see \"ABI changes\" below) alter\n      the grid ABI so that it is incompatible with earlier versions\n      of the OpenVDB library, such as the ones built into Houdini\n      up to and including Houdini 17.  To preserve ABI compatibility,\n      when compiling OpenVDB or any dependent code define the macro\n      OPENVDB_ABI_VERSION_NUMBER=N, where, for example, N is 3 for\n      Houdini 15, 15.5 and 16, 4 for Houdini 16.5 and 5 for Houdini 17.0\n\n    New features:\n    - Added support to the ParticlesToLevelSet tool for fast rasterization\n      of particles into boolean mask grids.\n    - Added convenience functions particlesToSdf(), particleTrailsToSdf(),\n      particlesToMask() and particleTrailsToMask() for common particle\n      rasterization use cases.\n    - Added batch copying of AttributeArray values that significantly\n      outperforms the older method that relied on a virtual function.\n\n    Improvements:\n    - Improved the responsiveness of the mesh to volume converter to interrupt\n      requests.\n    - Attempts to use a partially deserialized AttributeArray now errors.\n    - Updated point deletion to use faster batch copying for ABI=6+.\n    - Methods relating to in-memory Blosc compression for AttributeArrays now\n      do nothing and have been marked deprecated resulting in memory savings\n      for ABI=6+.\n\n    Bug fixes:\n    - Fixed various signed/unsigned casting issues to resolve compiler warnings\n      when moving points in point data grids.\n\n    ABI changes:\n    - Added new virtual functions to AttributeArray.\n    - Changed the order and size of member variables in AttributeArray\n      and TypedAttributeArray.\n\n    API changes:\n    - Removed a number of methods that were deprecated in version 5.0.0 or\n      earlier.\n    - Removed the experimental ValueAccessor::newSetValue method.\n    - Deprecated AttributeArray methods relating to in-memory\n      Blosc compression.\n\n    Houdini:\n    - The Convert and To Polygons SOPs now correctly transfer vertex\n      attributes when the output is a polygon soup.\n    - Added an option to the Visualize SOP to display leaf nodes as points.\n    - Renamed the Visualize SOP's \"leafmode\", \"internalmode\", \"tilemode\"\n      and \"voxelmode\" parameters to \"leafstyle\", \"internalstyle\", etc.\n      and converted them from ordinal to string-valued.\n    - Made various improvements to viewport rendering of point data grids.\n    - Added a ParmFactory::setInvisible() method to allow parameters\n      to be marked as hidden.  This is useful for multi-parms,\n      whose child parameters cannot be made obsolete.\n    - Removed the option to use in-memory Blosc compression from the Points\n      Convert SOP as this feature has now been deprecated.\n    - Made various small changes for Houdini 17 compatibility.\n\n\nVersion 5.2.0 - August 13, 2018\n\n    New features:\n    - Added tools to advect points stored in point data grids\n      through velocity fields.\n      [Contributed by Dan Bailey]\n    - For point data grids, voxel data can now be prefetched independently\n      of position or other attributes.\n      [Contributed by Dan Bailey]\n    - Added tools to sample voxel values onto points stored in\n      point data grids.\n      [Contributed by Double Negative]\n\n    Improvements:\n    - The UniformPointScatter tool now generates points in \"points per volume\"\n      mode even when the product of the density and the voxel volume is less\n      than one, and the point count now varies continuously with the density.\n    - Added a min/max sphere count argument to the fillWithSpheres() tool.\n      (The previous version, now deprecated, supported only a maximum\n      sphere count.)\n    - Added a method to tools::LevelSetTracker to enable and disable\n      trimming of voxels outside the narrow band.\n      Previously, trimming was always enabled, which caused dense SDFs\n      to be converted to narrow-band level sets.\n    - Added state() methods to point data index filters to improve\n      optimization opportunities.\n      [Contributed by Dan Bailey]\n    - Added active and inactive value mask point data index filters.\n      [Contributed by Dan Bailey]\n    - Replaced include/exclude group list parameters with filter functors\n      in various point data functions.\n      [Contributed by Dan Bailey]\n    - Refactored and simplified the point count API.\n      [Contributed by Dan Bailey]\n    - Computing cumulative per-leaf point offsets is now parallelized.\n      [Contributed by Dan Bailey]\n    - Made various small changes for Visual Studio 2017 compatibility.\n      [Contributed by Edward Lam]\n\n    Bug fixes:\n    - Fixed a bug that could cause an infinite loop when iterating over\n      an empty root node.\n    - Fixed namespace-related bugs in math::Tuple::isZero() and\n      math::Mat::isZero() that led to compile-time errors.\n    - Fixed type conversion bugs in the vector-to-vector math::rotation()\n      function that made it impossible for it to return a single-precision\n      rotation matrix, and modified the function to accept Vec3 arguments\n      of any value type.\n    - Fixed a bug in the mesh to volume converter that made it uninterruptible\n      in certain cases even though an interrupter was provided.\n      [Reported by Doug Epps]\n\n    Houdini:\n    - Added an option to the From Particles SOP to output an\n      interior mask grid.\n    - Added options to the Metadata SOP to set the grid name\n      and to propagate metadata to primitive attributes and vice-versa.\n    - Modified GU_PrimVDB::convertVolumesToVDBs() to set the output VDBs'\n      grid names to the names of the volume primitives.\n    - Added an option to the Offset Level Set, Renormalize Level Set,\n      Smooth Level Set, and Resize Narrow Band SOPs to enable and disable\n      trimming of voxels outside the narrow band.\n      Previously, trimming was always enabled, which caused dense SDFs\n      to be converted to narrow-band level sets.\n    - Fixed a bug in the Resample SOP that prevented it from reading\n      a reference VDB from the second input.\n    - Added an option to the Scatter SOP to scatter points only on\n      an isosurface of a signed distance field.\n    - The Scatter SOP now generates points in Point Density mode even when\n      the product of the density and the voxel volume is less than one,\n      and the point count now varies continuously with the density.\n    - Added a minimum sphere count option to the To Spheres SOP.\n    - Added enable/disable toggles to the To Spheres SOP's minimum and maximum\n      radius parameters and eliminated the world space radius parameters.\n      The remaining minimum and maximum parameters, formerly the voxel space\n      radii, are now used in both world unit and voxel unit modes.\n    - Added transform and rotation order options to the Transform SOP.\n    - Added support to the Advect Points SOP for advecting points stored\n      in point data grids.\n      [Contributed by Dan Bailey]\n    - Added support to the Sample Points SOP for sampling onto points\n      stored in point data grids.\n      [Contributed by Double Negative]\n\n\nVersion 5.1.0 - April 10, 2018\n\n    New features:\n    - Added an option to points::deleteFromGroups() to delete the groups\n      as well as the points.\n      [Contributed by Nick Avramoussis]\n    - Added a header_test Makefile target that checks library header files\n      for dependencies on missing or indirectly included headers.\n      [Contributed by Dan Bailey]\n    - Added support for Mat3s and Mat3d point data typed attributes.\n      [Contributed by Dan Bailey]\n\n    Improvements:\n    - Added per-test timings to vdb_test to help in identifying\n      performance regressions.\n    - zeroVal() now returns a zero matrix instead of an identity matrix\n      for Mat4s and Mat4d, and it is now also defined (and returns\n      a zero matrix) for Mat3s and Mat3d.\n\n    Python:\n    - Fixed a bug introduced in version 3.2.0 that caused boolean and integer\n      values added to a grid's metadata to be stored as floating-point values.\n\n    Houdini:\n    - Added options to the Clip SOP to expand or shrink the clipping region\n      and, when clipping to a camera frustum, to set the near and far\n      clipping planes.\n    - Added output grid naming options to the Points Convert SOP.\n    - Added a Keep Original Geometry toggle to the Points Convert SOP\n      and improved the efficiency of point unpacking.\n      [Contributed by Dan Bailey]\n    - Added an option to the Points Delete SOP to delete point groups.\n      [Contributed by Nick Avramoussis]\n    - Fixed a rare crash when extracting points from a point data primitive.\n      [Contributed by Jeff Lait]\n    - Added a SOP_NodeVDB::evalStdString() method that facilitates\n      string parameter evaluation in expressions, e.g.,\n      matchGroup(*gdp, evalStdString(\"group\", time)).\n    - Removed the deprecated openvdb_houdini::validateGeometry() function.\n      Use convertGeometry() instead.\n    - Added a SOP_NodeVDB::matchGroup() overload that eliminates the need\n      to const_cast the GU_Detail.\n      [Contributed by Jeff Lait]\n    - Grid transforms are now more aggressively simplified, making it\n      less likely to produce nonuniform voxels erroneously.\n      [Contributed by Jeff Lait]\n    - Fixed a bug when copying and pasting a Create SOP that could cause\n      the Voxel Size toggle to change state.\n    - Added a houdini_utils::OpFactory::setVerb() method to register\n      compilable SOPs.\n    - Made SOP_NodeVDB::cookMySop() final (that is, non-overridable)\n      to facilitate the implementation of compilable SOPs.\n      Override SOP_NodeVDB::cookVDBSop() instead.  (In most cases,\n      it suffices to rename cookMySop to cookVDBSop.)\n    - Renamed some parameters on the following SOPs to match the equivalent\n      native Houdini nodes: Advect, Advect Points, Analysis, Combine, Filter,\n      Fracture, From Particles, From Polygons, Morph Level Set,\n      Occlusion Mask, Offset Level Set, Points Group, Resample,\n      Resize Narrow Band, Smooth Level Set, Topology To Level Set,\n      Vector Merge, and Visualize.\n    - Added SOP_VDBCacheOptions, a convenience base class for compilable SOPs.\n      [Contributed by Jeff Lait]\n    - Converted most SOPs into compilable SOPs.\n\n\nVersion 5.0.0 - November 6, 2017\n\n      Some changes in this release (see \"ABI changes\" below) alter\n      the grid ABI so that it is incompatible with earlier versions\n      of the OpenVDB library, such as the ones built into Houdini\n      up to and including Houdini 16.  To preserve ABI compatibility,\n      when compiling OpenVDB or any dependent code define the macro\n      OPENVDB_ABI_VERSION_NUMBER=N, where, for example, N is 3 for\n      Houdini 15, 15.5 and 16 and 4 for Houdini 16.5.\n\n    New features:\n    - Added a getLibraryAbiVersionString() function, which returns a\n      string such as \"5.0.0abi3\".\n    - Added a WeakPtr type alias for ABI compatibility.\n    - Metadata fields of unregistered types are no longer discarded after\n      being read from a .vdb file, and although their values are not printable,\n      they can be written back to disk.\n    - Added a DESTDIR_LIB_DIR Makefile variable for Linux multiarch support.\n      [Contributed by Mathieu Malaterre]\n    - Added tools to create potential flow fields, as described in the\n      2017 SIGGRAPH OpenVDB course.\n      [Contributed by Double Negative]\n    - Added tools to create mask grids from point data grids and to compute\n      point counts.\n      [Contributed by Dan Bailey]\n    - Added tools to scatter OpenVDB points randomly throughout a volume.\n      [Contributed by Nick Avramoussis]\n\n    Improvements:\n    - Significantly improved the performance of point data grid group filters.\n      [Contributed by Double Negative]\n\n    Bug fixes:\n    - Fixed bugs in tools::ClosestSurfacePoint's distance calculations\n      that caused searches to produce incorrect results.\n    - Fixed a locking issue that affected multithreaded access to\n      PointDataLeafNodes when delayed loading was in effect.\n      [Contributed by Dan Bailey]\n\n    ABI changes:\n    - Made tree::InternalNode's destructor non-virtual.\n    - The fix for a delayed-loading race condition in the LeafBuffer class\n      that was only partially rolled out in the previous release is now\n      enabled on all platforms.\n    - Replaced a points::AttributeArray bit flag with an atomic integer\n      to address a threading issue during delayed loading.\n      [Contributed by Dan Bailey]\n    - Deprecated the OPENVDB_2_ABI_COMPATIBLE and OPENVDB_3_ABI_COMPATIBLE\n      macros in favor of a new OPENVDB_ABI_VERSION_NUMBER macro.\n      The new macro defaults to the library major version number but can be\n      set at compile time to an earlier version number to disable ABI changes\n      since that version.  (Older ABIs will not be supported indefinitely,\n      however.)  For example, compile OpenVDB and any dependent code\n      with \"-DOPENVDB_ABI_VERSION_NUMBER=4\" to use the 4.x ABI.\n\n    API changes:\n    - Replaced tools::ClosestSurfacePoint::initialize() with\n      tools::ClosestSurfacePoint::create(), which returns a newly-allocated\n      and properly initialized object.\n    - Removed methods that were deprecated in version 4.0.0 or earlier,\n      including io::File::readGridPartial(), points::initialize(),\n      points::uninitialize() and util::PagedArray::pop_back().\n    - Deprecated IllegalValueException in favor of ValueError.\n    - Changed the naming scheme for the library namespace from\n      openvdb::vX_Y_Z to openvdb::vX_YabiN, where X, Y, Z and N are\n      the major, minor, patch and ABI version numbers, respectively.\n      The abiN suffix is added only when the library is built using\n      an older ABI version.\n\n    Python:\n    - Reimplemented NumPy support for Boost 1.65 compatibility.\n\n    Houdini:\n    - Fixed bugs that caused the Ray SOP's closest surface point searches\n      to produce incorrect results.\n    - Changed the VdbPrimCIterator::FilterFunc type from boost::function\n      to std::function.\n    - Changed the houdini_utils::OpPolicyPtr type from boost:shared_ptr\n      to std::shared_ptr.\n    - Debug-level log messages generated by OpenVDB are no longer forwarded\n      to Houdini's error manager.\n    - Fixed a bug in the Read SOP that made it impossible to select among\n      grids of the same name in a file.\n    - Added houdini_utils::ParmFactory::setAttrChoiceList(), a convenience\n      method for the creation of menus of attributes.\n    - Added a Potential Flow SOP.\n      [Contributed by Double Negative]\n    - Added point data grid support to the Scatter SOP.\n      [Contributed by Nick Avramoussis]\n    - Added mask and point count output options to the Points Convert SOP.\n      [Contributed by Dan Bailey]\n\n\nVersion 4.0.2 - July 28, 2017\n\n    New features:\n    - Added tools::compActiveLeafVoxels(), which composites active\n      voxel values from a source tree into a destination tree.\n      It is threaded and faster than existing tools that merge trees,\n      however it operates only on leaf nodes.\n    - Added a vdb_test -f option that reads a list of tests to be run\n      from a text file.\n    - Added functions for deleting points from point data grids based on\n      group membership.\n      [Contributed by Double Negative]\n    - Enabled display of point data grids in vdb_view.\n      [Contributed by Nick Avramoussis]\n    - Added a view mode indicator to vdb_view.\n    - Added isFinite(), isInfinite(), isNan(), and isZero() methods\n      to math::Mat and added isZero() to math::Tuple.\n    - Added tools::interiorMask(), which constructs a boolean mask grid\n      from the active voxels of an input grid or, if the input grid is\n      a level set, from the interior voxels of the level set.\n    - Added begin() and end() iterator methods (and related methods)\n      to math::CoordBBox, so that it can be used in range-based for loops.\n    - tools::clip() now accepts either a box, a mask grid or a camera frustum\n      as the clipping region.  The latter is new in this version.\n\n    Improvements:\n    - Moved the isFinite(), isInfinite() and isNan() methods from\n      math::Vec3 et al. to math::Tuple.\n\n    Bug fixes:\n    - Fixed a delayed-loading race condition that could result in crashes.\n      [Reported by Dan Bailey]\n\n      To preserve ABI compatibility, this fix is currently enabled only\n      on platforms for which the alignment of a tbb::atomic<uint32_t>\n      is the same as for a uint32_t.  On other platforms, warnings will\n      be logged during OpenVDB initialization, and it is recommended\n      to disable delayed loading in that case (for example, by defining\n      the environment variable OPENVDB_DISABLE_DELAYED_LOAD).\n\n    - Fixed a delayed-loading memory leak in the PointDataLeafNode.\n      [Contributed by Double Negative]\n    - Changed the random number seeding mechanism for .vdb file UUIDs\n      to avoid duplicate IDs.\n      [Reported by Jason Lefley]\n    - Fixed an off-by-one bug in the resampler that produced grid patterns\n      of missing interior voxels for scale factors greater than one.\n\n    Houdini:\n    - As of Houdini 16.0.549, houdini_utils::OpFactory can generate help cards\n      for operators automatically.  New OpFactory::setDocumentation() and\n      ParmFactory::setDocumentation() methods allow one to add custom\n      help text in wiki markup format.\n    - Added help cards for all SOPs.  Houdini 16.0.578 or later is required.\n      [Contributed by Dan Bailey and SideFX]\n    - The Extended Operator Info window in Houdini 16 now renders correctly\n      for OpenVDB SOPs, instead of displaying a Python stack trace.\n      [Contributed by Dan Bailey]\n    - Added a Points Delete SOP for deleting points from point data grids\n      based on group membership.\n      [Contributed by Double Negative]\n    - Added a Mantra VRAY procedural and a delayed load SHOP for rendering\n      point data grids.  Houdini 16 is required.\n      [Contributed by Double Negative]\n    - Replaced the Combine SOP's \"A/B Pairs\" and \"Flatten\" toggles with\n      a menu of collation options that include flattening only A grids\n      and flattening groups of A grids independently.\n    - Added a slider to the Remove Divergence SOP to set the error tolerance\n      for the pressure solver.\n    - Added value type conversion options (for VDB output) to the Convert SOP.\n    - Added a Densify SOP that replaces active tiles with leaf voxels.\n    - Fixed a bug in the Rasterize Points SOP that capped density values\n      to one instead of to the particles' densities.\n    - The Convert and To Polygons SOPs now accept grids of any type\n      as surface masks, not just level set or SDF grids.\n    - Added an option to the Clip SOP to clip to a camera frustum.\n\n\nVersion 4.0.1 - March 8, 2017\n\n    New features:\n    - Added functions to util/logging.h to simplify configuration of the\n      logging system (via command-line arguments, in particular).\n    - Added LeafManager::activeLeafVoxelCount(), a faster, threaded\n      alternative to Tree::activeLeafVoxelCount().\n    - Added a -shuffle option that causes vdb_test to run unit tests\n      in random order, which can help to identify unintended dependencies\n      between tests.\n    - Added vdb_lod, a command-line tool to generate volume mipmaps\n      for level-of-detail effects.\n    - Added methods to compute the median value of active, inactive or all\n      voxels in leaf nodes.\n\n    Improvements:\n    - Added a Metadata::str() specialization for StringMetadata that\n      eliminates the overhead of writing to a string stream.\n    - Made various minor improvements to util::PagedArray.\n    - Added an install_lib build target to the Makefile.\n      [Contributed by Double Negative]\n    - Added documentation and Cookbook examples for OpenVDB Points.\n      [Contributed by Double Negative]\n    - Registration of OpenVDB Points grid and attribute types is now handled\n      in openvdb::initialize(), and openvdb::points::initialize() and\n      openvdb::points::uninitialize() are therefore deprecated.\n    - Extended multi-pass I/O to handle a variable number of passes\n      per leaf node.\n      [Contributed by Double Negative]\n    - Addressed a name conflict between macros in util/NodeMasks.h\n      and symbols in the Eigen library.\n      [Reported by Trevor Thomson]\n\n    Bug fixes:\n    - tools::fillWithSpheres() and tools::ClosestSurfacePoint now correctly\n      handle isosurfaces outside the input volume's narrow band.\n    - tools::MultiResGrid now supports all standard grid types, including\n      BoolGrid and MaskGrid.\n    - LeafNode::fill() now correctly clips the fill region to the node's\n      bounding box.\n    - Grid::denseFill() no longer densifies all existing active tiles,\n      and it now correctly handles both active and inactive fill values.\n    - Fixed a bug that caused tools::copyToDense() to only partially populate\n      the output array when delayed loading was in effect.\n      [Reported by Stuart Levy]\n    - Fixed an issue with duplicate registration of PointDataGrid\n      attribute types.\n      [Reported by SideFX]\n    - Fixed an uninitialized memory bug in tools::meshToVolume().\n      [Reported by SideFX]\n    - Fixed a thread race condition in math::QuantizedUnitVec that could\n      cause it to produce incorrect results.\n      [Contributed by Jeff Lait]\n    - Fixed a dangling pointer bug in tools::ParticleAtlas.\n      [Contributed by SideFX]\n    - Grid operators (divergence, gradient, etc.) now produce correct results\n      even for grids with active tile values.\n    - Fixed a bug when writing an out-of-core points::AttributeArray\n      that could cause corruption of the metadata associated with the array.\n      [Contributed by Double Negative]\n\n    Python:\n    - Added functions getLoggingLevel(), setLoggingLevel(), and\n      setProgramName(), to allow configuration of the logging system.\n\n    Houdini:\n    - Fixed a crash in the Ray SOP when the user selected an isosurface\n      outside the target volume's narrow band.\n    - The LOD SOP now supports all standard grid types, including\n      boolean grids.\n    - Added houdini_utils::ParmFactory::setGroupChoiceList(), a convenience\n      method for the creation of menus of primitive groups.\n    - Made various small changes for Houdini 16 compatibility.\n      [Contributed by SideFX]\n    - The Create SOP now supports matching the new grids' transform,\n      voxel size, and topology to a reference grid.  If the topology is\n      being matched, it can optionally be resampled to a different voxel size.\n    - Added some support for point data grids to the Clip,\n      Topology To Level Set and Visualize SOPs.\n      [Contributed by Double Negative]\n    - Compression is no longer enabled by default in the Points Convert SOP\n      for normals and colors, because they are not guaranteed to have a\n      [0, 1] range.\n      [Contributed by Double Negative]\n    - Added a 16-bit truncation compression option to the Points Convert SOP.\n      [Contributed by Double Negative]\n    - Fixed a build issue with the GR_PrimVDBPoints render hook plugin\n      that could cause hython to report a DSO error.\n      [Reported by Double Negative]\n    - Added an install_lib build target to the Makefile.\n    - Rewrote the Remove Divergence SOP to actually remove divergence from\n      vector fields on collocated grids, and added support for stationary\n      and moving obstacles and an option to output a pressure field.\n    - The Analysis SOP now produces correct results for grids with active\n      tile values.\n    - Added a sparse/dense toggle to the Fill SOP.\n    - Added openvdb_houdini::startLogForwarding(), stopLogForwarding()\n      and isLogForwarding(), which control the forwarding of log messages\n      to Houdini's error manager.  Forwarding of library warnings and\n      error messages is now enabled by default for SOPs when OpenVDB\n      is built with log4cplus.\n\n\nVersion 4.0.0 - November 15, 2016\n\n    Highlights:\n    - Incorporated Double Negative's OpenVDB Points library.\n      See https://github.com/dneg/openvdb_points_dev for details.\n    - Introduced some C++11 constructs.  A C++11-compatible compiler\n      is now required.\n    - Blosc-compressed .vdb files are now as much as 20% smaller.\n    - Vector-valued grids are now constructed and destroyed much faster.\n\n      This change and other changes in this release (see \"ABI changes\" below)\n      alter the grid ABI so that it is incompatible with earlier versions of\n      the OpenVDB library, such as the ones in Houdini 15, 15.5 and 16.\n      To disable these changes and preserve ABI compatibility, define\n      the macro OPENVDB_3_ABI_COMPATIBLE when compiling OpenVDB\n      or any code that depends on OpenVDB.\n\n    New features:\n    - Added an option to the point scattering tools to specify how far\n      each point may be displaced from the center of its host voxel or tile.\n    - Added a toggle to tools::clip() to invert the clipping mask.\n    - Custom leaf node implementations may now optimize their file layout\n      by inheriting from io::MultiPass.  Voxel data for grids with such\n      leaf nodes will be written and read in multiple passes, allowing\n      blocks of related data to be stored contiguously.\n      [Contributed by Double Negative]\n    - Added Tree::unallocatedLeafCount(), which returns the number of leaf\n      nodes with unallocated data buffers (typically due to delayed loading).\n\n    Improvements:\n    - Vector-valued grids are now constructed and destroyed much faster.\n    - Changed math::Coord's data representation to facilitate C++11\n      uniform initialization.\n    - Delayed loading from io::Files is now faster due to the use of seeks\n      instead of reads.\n      [Contributed by Double Negative]\n    - Made many small changes to address type conversion and other warnings\n      reported by newer compilers, including Clang 3.8.\n    - Improved Blosc compression ratios and write times by increasing\n      the block size.\n      [Contributed by Dan Bailey]\n\n    Bug fixes:\n    - Fixed a bug that caused topology operations (union, intersection\n      and difference) on MaskGrids to sometimes produce incorrect results.\n      (MaskGrids are used internally in a number of tools.)\n    - Changed GridBase::copyGrid() and Grid::copy() to close\n      const-correctness holes.\n    - tools::fillWithSpheres() now returns an empty list of spheres\n      instead of crashing when the user selects an isosurface that lies\n      outside the bounding volume's narrow band.\n    - Fixed a null pointer dereference when copying grids that were loaded\n      with io::File::readGridPartial().\n      [Reported by Nick Avramoussis]\n\n    ABI changes:\n    - Added a NodeUnion template specialization for non-POD value types\n      that significantly expedites construction and destruction\n      of vector-valued grids.\n    - Changed math::Coord's internal data representation.\n    - Replaced occurrences of boost::shared_ptr with std::shared_ptr.\n    - Changed GridBase::copyGrid() and Grid::copy() to close\n      const-correctness holes.\n    - Added virtual function Tree::unallocatedLeafCount().\n\n    API changes:\n    - Introduced some C++11 constructs.  A C++11-compatible compiler\n      is now required.\n    - Added a parameter to the point scattering tools to control the\n      displacement of each point from the center of its host voxel or tile.\n      The default behavior, as before, is to allow each point to be placed\n      (randomly) anywhere within its voxel or tile.\n    - Renamed LeafManager::getPreFixSum() to LeafManager::getPrefixSum().\n    - Made LeafNode::Buffer a top-level class and renamed it to LeafBuffer.\n      [Contributed by Double Negative]\n    - Deprecated io::File::readGridPartial() in favor of delayed loading.\n    - tools::ClosestSurfacePoint::initialize() now returns a boolean\n      indicating whether initialization was successful.\n    - Dropped the CopyPolicy enum and added GridBase::copyGridWithNewTree()\n      and Grid::copyWithNewTree() in order to close const-correctness holes\n      that allowed newly-constructed, non-const grids to share their trees\n      with existing const grids.  (Where that behavior is still required,\n      use a ConstPtrCast.)\n\n    Python:\n    - Fixed a build issue with Python 3 and NumPy.\n      [Contributed by Jonathan Scruggs]\n\n    Houdini:\n    - Certain changes in this release (see \"ABI changes\" above) alter\n      the grid ABI so that it is incompatible with earlier versions of the\n      OpenVDB library, such as the ones built into Houdini 15, 15.5 and 16.\n      To disable these changes and preserve ABI compatibility, define\n      the macro OPENVDB_3_ABI_COMPATIBLE when compiling OpenVDB\n      or any code that depends on OpenVDB.\n    - Introduced some C++11 constructs that are incompatible with\n      versions of Houdini older than 15.0.\n    - Fixed a bug in the Rasterize Points SOP that caused vector-valued\n      attributes to be transferred as scalars.\n      [Contributed by Double Negative]\n    - Added a toggle to the Clip SOP to invert the clipping mask.\n    - Added a slider to the Scatter SOP to specify how far each point\n      may be displaced from the center of its host voxel or tile.\n\n\nVersion 3.2.0 - August 10, 2016\n\n    Highlights:\n    - New features: tool to produce and store a sequences of progressively\n      lower resolution grids (mipmaps), an acceleration structure for fast\n      range and nearest-neighbor searches on particles, arbitrary volume\n      and level set specific segmentation tools, a new binary mask grid\n      type and an efficient point to level set conversion scheme.\n    - Optimizations: Faster volume to mesh conversion and threaded grid\n      destruction, morphological dilation, csg operations and fracture tool.\n    - New Houdini nodes: Segment, LOD and Topology To Level Set.\n\n    New features:\n    - Added tools::MultiResGrid a tool to produce and store a sequences\n      of progressively lower resolution grids (mipmaps).\n    - Added tools::ParticleAtlas an acceleration structure for fast range\n      and nearest-neighbor searches on particles, points with radius.\n    - Added tools::segmentActiveVoxels(), which operates on grids of arbitrary\n      type and separates connected components of a grid's active voxels into\n      distinct grids or trees.\n    - Added tools::segmentSDF(), which separates disjoint signed-distance-field\n      surfaces into distinct grids or trees.\n    - Added tools::extractActiveVoxelSegmentMasks(), which constructs a mask\n      for each connected component of a grid's active voxels.\n    - Added threaded level-set CSG tools csgUnionCopy(), csgIntersectionCopy()\n      and csgDifferenceCopy(), which, unlike the existing CSG tools, produce\n      new grids rather than modifying their input grids.  These new tools are\n      faster and use less memory than the existing tools (if only because the\n      input grids never need to be deep-copied).\n    - Added a threaded dilateActiveValues() tool with tile value support.\n    - Added tools::PointsToMask, which activates voxels that intersect\n      points from a given list.\n    - Added a new MaskGrid type that uses a single bit-field to represent both\n      voxel values and states for the leafnode to reduce memory usage.\n    - Added tools::topologyToLevelSet(), which generates a level set from the\n      implicit boundary between active and inactive voxels in an input grid\n      of arbitrary type.\n    - Added tools::LevelSetPlatonic a new tool that produces narrow-band\n      level sets of the five Platonic solids.\n    - Added tools::extractIsosurfaceMask() which masks voxels that intersect\n      the implicit surface defined by the given isovalue.\n    - Added tree::LeafManager::getPreFixSum() for user-managed external buffers.\n    - Added tools::Dense::print().\n    - Added the math::CoordBBox::Iterator class to conveniently iterate over\n      coordinates covered a CoordBBox.\n    - Added bit-wise operations, a component-wise constructor, and a\n      getCornerPoints() method to the CoordBBox class.\n    - Added a new LeafManager constructor to create the structure from an\n      existing array of leafnodes.\n    - Added the templated math::MinMax class to compute the extrema of\n      arbitrary value types.\n    - Added sparseFill and denseFill methods to the Grid, Tree and RootNode classes.\n\n    Improvements:\n    - Complete overhaul of the VolumeToMesh tool brings significant performance\n      improvements and enhanced region masking, tile support and bool volume\n      surfacing.\n    - Improved the performance, parallel scaling and memory usage,\n      of tools::LevelSetFracture and updated to use the new segmentSDF scheme.\n    - Improved the performance of tools::LevelSetAdvection by up to five times.\n    - Improved the performance of Tree::voxelizeActiveTiles by means of\n      multithreading.\n    - Improved the performance of tools::meshToVolume(), particularly for\n      large narrow-band widths and for signed distance fields with dense\n      interior regions.\n    - Threaded the Tree destructor and the Tree::clear() method.\n    - Added a parameter to tools::signedFloodFill() and to\n      tools::signedFloodFillWithValues() to constrain the flood fill\n      to specific levels of the tree.\n    - Added active tile count to Tree::print.\n    - Improved the API of tools::Dense with non-const access methods.\n    - Added LeafManager::reduce and similar methods to NodeManager.\n      [Contributed by Brett Tully]\n    - Improved constructors of math::Mat3 and math::Mat4.\n    - Added math::Mat3::cofactor().\n    - Added math::Mat3::setRows, math::Mat4::setRows,\n      math::Mat3::setColumns Mat3::setColumns, and\n      math::Mat4::setColumns.\n    - Added util::NodeMask::isConstant method for faster bit processing.\n    - For better robustness, tools::Prune now uses the median of voxel values\n      when replacing voxels with a tile.\n    - Added a toggle to tools::PointPartitioner to select between\n      cell-centered and node-centered transforms.\n\n    Bug fixes:\n    - Fixed a bug in tools::LevelSetAdvection that could cause\n      non-deterministic behavior.\n      [Reported by Jeff Lait]\n    - Fixed a bug that allowed for unexpected implicit conversion\n      between grids of different value types.\n    - Fixed a bug whereby the origins of leaf nodes with value type bool\n      were ignored during equality comparisons.\n    - tools::GridTransformer now correctly handles affine transforms with\n      shear and/or reflection.\n    - Fixed a bug in tools::meshToVolume() that could produce\n      incorrect distances for large narrow-band widths.\n    - Fixed a bug in tools::meshToVolume() that produced different results on\n      machines with different core counts.\n    - Fixed a threading bug in tools::compReplace() that could cause crashes.\n    - Resolved a floating-point exception in math::QuantizedUnitVec::pack()\n      caused by calling the method with a zero-length vector.\n      [Contributed by Rick Hankins]\n    - Fixed a potential threading bug in io::Queue.\n      [Contributed by Josip Sumecki]\n    - Fixed a possible division-by-zero bug in openvdb/tools/LevelSetAdvect.h.\n      [Contributed by Rick Hankins]\n    - Corrected the outer product method to not return the transpose result.\n      [Contributed by Gergely Klar]\n    - Fixed a memory overallocation issue in tools::VolumeAdvect.\n    - Fix bug in tools::VolumeToMesh failing to clear its state when exiting\n      early.\n      [Contributed by Edward Lam]\n    - Fixed bug in tools::PointIndexIterator::worldSpaceSearchAndUpdate\n      that resulted in missing point indices.\n      [Reported by Rick Hankins]\n    - Fixed Windows build issues in unit tests.\n      [Contributed by Edward Lam and Steven Caron]\n    - Fixed isApproxZero() so that it works correctly when tolerance is zero.\n      [Reported by Joshua Olson]\n    - Fixed bugs in tree::NodeUnion that could cause crashes.\n    - Fixed memory leak in a tools::meshToVolume sub-tool (expandNarrowband).\n      [Reported by Kévin Dietrich]\n    - Fixed parameter type inconsistencies in math/Stencils.h and\n      tools/RayIntersector.h.\n      [Contributed by Kévin Dietrich and Nick Avramoussis]\n    - Fixed a bug in the VolumeToMesh tool that produced artifacts for\n      adaptive surface extraction on clipped level sets.\n      [Reported by Jeff Lait]\n    - Corrected empty grid background value in tools::meshToVolume().\n      [Contributed by Jeff Lait]\n    - Fixed a bug in tools::volumeToMesh that could produce NaNs.\n      [Reported by Rick Hankins]\n    - Fixed a bug in the \"Advect Points SOP\" that could cause a crash when\n      the input grids were of incorrect type.\n      [Reported by SideFX]\n\n    API changes:\n    - Deprecated math::Mat3::setBasis and math::Mat4::setBasis.\n    - Renamed math::GudonovsNormSqrd to math::GodunovsNormSqrd\n      [Contributed by Branislav Radjenovic]\n    - Renamed ValueType to PosType in the PointArray interface.\n    - Deprecated tree::Tree::addLeaf(LeafNode&) and added\n      tree::Tree::addLeaf(LeafNode*).\n\n    Python:\n    - Updated the Python module for Python 3 compatibility.\n    - Updated the Python module for Boost 1.60 compatibility, to address\n      \"no to_python (by-value) converter found\" exceptions.\n\n    Maya:\n    - Fixed bugs related to data ownership, and improved error checking.\n      [Contributed by Crawford Doran]\n    - Updated the Read and Write DAG nodes to support file sequences\n      and subframe evaluation.\n\n    Houdini:\n    - Added a Segment SOP that separates a grid's connected components\n      into distinct grids.\n    - Added a LOD SOP that produces a sequences of progressively lower\n      resolution grids.\n    - Added a Topology To Level Set SOP that generates a narrow-band\n      signed distance field / level set from the interface between active\n      and inactive voxels in an arbitrary grid.\n    - Revamped the From Particles SOP UI and added a more efficient\n      level set conversion method that supports Houdini 15 packed points.\n    - Updated the Rasterize Points SOP with support for frustum transforms,\n      sub region masking and orientation logic that matches the native\n      Copy SOP's orientation.\n    - Updated the Platonic SOP with support for all five Platonic solids.\n    - Added hooks for registering SOP_NodeVDB text callbacks for different\n      grid types.\n      [Contributed by Nick Avramoussis]\n    - The Resample and Combine SOPs now correctly handle affine transforms\n      with shear and/or reflection.\n    - Removed the StaggeredBoxSampler code path in SOP_OpenVDB_Advect because\n      it introduces bias.\n      [Contributed by Fredrik Salomonsson]\n    - Fixed a bug in the Ray SOP whereby the distance attribute was created\n      with the wrong data type.\n      [Contributed by Nick Avramoussis]\n    - The From Polygon SOP now allows the user to either specify the voxel\n      count along an axis or the voxel size in world units (the only option\n      in the past).\n\n\nVersion 3.1.0 - October 1, 2015\n\n    Highlights:\n    - New features: advection of arbitrary volumes, general-purpose\n      preconditioned linear solver and Poisson solver, segmentation\n      of topologically-enclosed regions of a volume, new and faster\n      bitmask operators, concurrent paged array, volume diagnostics\n    - Optimizations: threaded grid constructors and topology operations;\n      faster mesh to volume conversion, SDF to fog volume conversion\n      and grid pruning; faster, unbounded particle partitioning\n    - New Houdini nodes: Advect, Diagnostics, Rasterize Points, Remap,\n      Remove Divergence, Sort Points\n\n    New features:\n    - Added tools::VolumeAdvection, for sparse advection of non-level-set\n      volumes.\n    - Added a preconditioned conjugate gradient solver.\n    - Added a Poisson solver for functions sampled on grids.\n    - Added tools::extractEnclosedRegion, which detects topologically-enclosed\n      (watertight) exterior regions (cavities) that can result from CSG union\n      operations between level sets with concavities that are capped.\n      (See the unit test TestPoissonSolver::testSolveWithSegmentDomain\n      for an example in which this tool is used to identify regions of trapped\n      fluid when solving for pressure in a volume of incompressible fluid.)\n    - Added util::PagedArray, a concurrent, dynamic linear array data\n      structure with fast O(1) value access (both random and sequential).\n    - Added tools::Sampler, which provides a unified API for both staggered\n      and non-staggered interpolation of various orders.\n    - Added equality and inequality operators to Metadata and MetaMap.\n    - Added tools::CheckLevelSet and tools::CheckFogVolume, which perform\n      various tests on symmetric, narrow-band level sets and fog volumes,\n      respectively, to diagnose potential issues.\n    - Added support for value accessors that aren't registered with their trees.\n      (Bypassing accessor registration can improve performance in rare cases\n      but should be used with caution, since the accessor will be left in an\n      invalid state if the tree topology is modified.)\n    - Added a tree::stealNodes() method that transfers ownership of all nodes\n      of a certain type and inserts them into a linear array.\n    - Added a tools::createLevelSetBox() factory function for level-set grids.\n    - Added tools::Dense::offsetToCoord().\n    - Added LeafNode::Buffer::data(), which provides direct access to\n      a leaf node's voxel value array, avoiding out-of-core overhead.\n      Use with caution.\n    - Added a util::NodeMask::foreach() method for efficient evaluation\n      of complex bitwise operations.\n    - Added a bitwise difference method to util::NodeMask.\n    - Added a -version flag to vdb_print, vdb_render and vdb_view.\n\n    Improvements:\n    - Deep, conversion and topology copy Grid constructors are now threaded\n      and up to five times faster.\n    - Grid::topologyUnion(), Grid::topologyIntersection() and\n      Grid::topologyDifference() are now much faster due to threading.\n    - Significantly improved the performance, parallel scaling and memory\n      usage of the tools::meshToVolume(), and implemented a more robust\n      inside/outside sign classification scheme.\n    - Reimplemented tools::PointPartitioner for improved performance,\n      concurrency and memory usage.  The tool is now unbounded in the sense\n      that points may be distributed anywhere in index space.\n    - Significantly improved the performance of tools::sdfToFogVolume().\n    - Significantly improved the performance of the tools::sdfInteriorMask()\n      and added support for both grid and tree inputs.\n    - Made various optimizations and improvements to tools::LevelSetMorphing.\n    - Aggregated tools::DiscreteField and tools::EnrightField (formerly in\n      tools/LevelSetAdvect.h) and tools::VelocitySampler and\n      tools::VelocityIntegrator (formerly in tools/PointAdvect.h) into\n      a single header, tools/VelocityFields.h.\n    - Modified tools::signedFloodFill() to accept grids of any signed\n      scalar value type, not just floating-point grids.\n    - tools::prune() is now faster, and it employs an improved compression\n      technique on trees with floating-point values.\n\n    Bug fixes:\n    - Fixed a build issue that could result in spurious \"Blosc encoding\n      is not supported\" errors unless OPENVDB_USE_BLOSC was #defined\n      when compiling client code.\n    - Added NaN and inf checks to tools::PointPartitioner.\n    - Fixed a vdb_view issue whereby the frame buffer size did not\n      necessarily match the window size.\n      [Contributed by Rafael Campos]\n    - Fixed a roundoff issue in tools::LevelSetTracker that could\n      result in NaNs.\n    - Changed tools::CheckNormGrad to check the magnitude of the gradient\n      rather than the square of the magnitude.\n    - Fixed parameter type inconsistencies in math/Ray.h and\n      tools/RayIntersector.h.\n      [Contributed by Kévin Dietrich]\n    - Fixed incorrect handling of signed values in tools::clip()\n      (and the Clip SOP).\n\n    API changes:\n    - Removed the math::Hermite class since it was no longer used\n      and caused build issues for some.\n    - Refactored the LevelSetAdvection, LevelSetFilter, LevelSetMeasure\n      and LevelSetTracker tools.\n    - Extended the API of tools::Diagnose and disabled copy construction.\n    - Extended and unified the API of various Samplers.\n    - Added an optional template argument to the ValueAccessor class\n      to allow for unregistered accessors.\n\n    Houdini:\n    - Added a Rasterize Points SOP that produces density volumes and\n      transfers arbitrary point attributes using a weighted-average scheme.\n      The node incorporates a VOP subnetwork for procedural modeling,\n      and its accompanying creation script defines a default network\n      with VEX procedures for cloud and velocity field modeling.\n      (See the creation script file header for installation details.)\n    - Merged the Advect Level Set SOP into a new Advect SOP that\n      supports advection of arbitrary volumes, not just level sets.\n    - Added a Remove Divergence SOP that eliminates divergence from a\n      velocity field.\n    - Added a Diagnostics SOP that can identify various problems with\n      level sets, fog volumes and other grids.\n    - Added a Sort Points SOP that spatially reorders a list of points\n      so that points that are close together in space are also close together\n      in the list.  This can improve CPU cache coherency and performance\n      for random-access operations.\n    - Added a Remap SOP that maps voxel values in an input range to values\n      in an output range through a user-defined transfer function.\n    - Added an option to the Convert SOP to activate interior voxels.\n      [Contributed by SESI]\n    - The To Spheres SOP can now optionally output a pscale attribute.\n    - Added openvdb_houdini::SOP_NodeVDB::duplicateSourceStealable(),\n      which in conjunction with the Unload flag can help to minimize\n      deep copying of grids between nodes.  The Advect, Convert, Fill, Filter,\n      Fracture, Noise, Offset Level Set, Prune, Remap, Remove Divergence,\n      Renormalize Level Set, Resize Narrow Band, Smooth Level Set and\n      Transform SOPs all have this optimization enabled, meaning that\n      they can potentially steal, rather than copy, data from upstream nodes\n      that have the Unload flag enabled.\n      [Contributed by Double Negative]\n    - Redesigned the UI of the Visualize SOP and added toggles to draw with\n      or without color, to use the grid name as the attribute name for points\n      with values, and to attach grid index coordinates to points.\n    - Added toggles to the Filter, Rebuild Level Set, Resize Narrow Band,\n      Smooth Level Set and To Spheres SOPs to specify units in either\n      world space or index space.\n    - Fixed an issue whereby grids generated by the Rebuild Level Set SOP\n      did not always display as surfaces in the viewport.\n    - The Metadata SOP now sets appropriate viewport visualization options\n      when the grid class is changed.\n\nVersion 3.0.0 - January 14, 2015\n    - The io::File class now supports delayed loading of .vdb files,\n      meaning that memory is not allocated for voxel values until the values\n      are actually accessed.  (This feature is enabled by default.)\n      Until a grid has been fully loaded, its source .vdb file must not be\n      modified or deleted, so for safety, io::File::open() automatically makes\n      private copies of source files that are smaller than a user-specified\n      limit (see io::File::setCopyMaxBytes()).  The limit can be set to zero\n      to disable copying, but if it cannot be guaranteed that a file will not\n      be modified, then it is best not to enable delayed loading for that file.\n    - .vdb files can now optionally be compressed with the Blosc LZ4 codec.\n      Blosc compresses almost as well as ZLIB, but it is much faster.\n    - Added tools::PointPartitioner, a tool for fast spatial sorting\n      of points stored in an external array, and tools::PointIndexGrid,\n      an acceleration structure for fast range and nearest-neighbor searches.\n    - Added tree::NodeManager, which linearizes a tree to facilitate\n      efficient multithreading across all tree levels.\n    - Added tools::prune() (and other variants), which replaces and\n      outperforms Tree::prune().\n    - Added tools::signedFloodFill(), which replaces and outperforms\n      Tree::signedFloodFill().\n    - Added tools::changeBackground (and other variants), which replaces\n      and outperforms Tree::setBackground().\n    - Added a fast but approximate narrow-band level set dilation method,\n      a fast narrow-band level set erosion method,\n      and a masked normalization method to tools::LevelSetTracker.\n    - Added tools::Diagnose, which performs multithreaded diagnostics on grids\n      to identify issues like values that are NaNs or out-of-range.\n      It optionally generates a boolean grid of all values that fail\n      user-defined tests.\n    - Added optional alpha masks to tools::LevelSetMorphing.\n    - Fixed an intermittent crash in tools::LevelSetMorphing.\n    - Added tools::topologyToLevelSet(), which generates a level set\n      from the implicit boundary between active and inactive voxels\n      in an arbitrary input grid.\n      [DWA internal]\n    - Improved the performance of point scattering (by orders of magnitude)\n      and added a DenseUniformPointScatter class as well as support for\n      fractional numbers of particles per voxel.\n    - Added edge-adjacent (6+12=18 neighbors) and vertex-adjacent (6+12+8=26\n      neighbors) dilation algorithms to tools::Morphology::dilateVoxels().\n      The default dilation pattern is still face-adjacent (6 neighbors).\n    - Improved the performance and memory footprint of the ParticlesToLevelSet\n      tool for large numbers (tens to hundreds of millions) of particles.\n    - Added Tree::getNodes(), which allows for fast construction of\n      linear arrays of tree nodes for use in multithreaded code\n      such as the LeafManager or NodeManager.\n    - Added math::Extrema and tools::extrema() to efficiently compute\n      minimum and maximum values in a grid.\n    - Added support for material color grids to all level set shaders,\n      and added an option to vdb_render that allows one to specify a\n      reference grid to be used for material color lookups.\n    - Added openvdb::getLibraryVersionString() and\n      OPENVDB_LIBRARY_VERSION_STRING.\n    - Modified the mesh to volume converter to always set the grid background\n      value to the exterior narrow-band width, and added finite value checks\n      to narrow band parameters.\n    - tools::volumeToMesh() now compiles for all grid types but throws an\n      exception if the input grid does not have a scalar value type.\n    - Added an io::File::readGrid() overload and readBuffers() overloads\n      to the grid, tree and node classes that allow one to specify\n      a bounding box against which to clip a grid while reading it.\n      For large grids, clipping while reading can result in significantly\n      lower memory usage than clipping after reading.\n    - Added Grid::clipGrid(), which clips a grid against a world-space\n      bounding box, and Grid::clip() and Tree::clip(), which clip against\n      an index-space bounding box.\n    - Added tools::clip(), which clips a grid either against a bounding box\n      or against the active voxels of a mask grid.\n    - io::File::readGridPartial() allocates the nodes of a grid's tree\n      as before, but it now allocates leaf nodes without data buffers.\n      (This feature is mainly for internal use; partially-read grids should be\n      used with care if at all, and they should be treated as read-only.)\n    - Grid names retrieved using an io::File::NameIterator now always uniquely\n      identify grids; they no longer generate 'more than one grid named \"x\"'\n      warnings when there are multiple grids of the same name in a file\n      (for files written starting with this version of the OpenVDB library).\n    - Fixed a bug in Tree::ValueOffIter that could cause depth-bounded\n      iterators to return incorrect values.\n    - Eliminated a recursive call in TreeValueIteratorBase::advance() that\n      could cause crashes on systems with a limited stack size.\n    - Fixed memory leaks in RootNode::topologyDifference() and\n      RootNode::topologyIntersection().\n    - Fixed a memory leak in io::Queue when the queue was full and\n      a write task could not be added within the timeout interval.\n    - Fixed a potential division by zero crash in tools::compDiv()\n      with integer-valued grids.\n    - Fixed kernel normalization in tools::Filter so that it is correct\n      for integer-valued grids.\n    - Fixed a bug in LeafNode::Buffer::getValue() whereby Visual C++\n      would return a reference to a temporary.\n      [Contributed by SESI]\n    - Fixed a bug in tools::ParticlesToLevelSet related to attribute transfer\n      when leaf nodes are produced without active values.\n    - Added util/CpuTimer.h and removed the more simplistic CpuTimer\n      from unittest/util.h.\n    - Eliminated the use of getopt() for command-line argument parsing\n      in vdb_test.\n    - openvdb::initialize() now properly initializes log4cplus if it is\n      enabled, eliminating \"No appenders could be found\" errors.\n    - Fixed a bug in the QuantizedUnitVec::pack() method that caused\n      quantization artifacts.\n    - Added convenience class tools::AlphaMask to tools/Interpolation.h\n    - Added constructors and methods to both math::RandInt and math::Rand01\n      to set and reset the random seed value.\n    - Added convenience methods for transforming bounding boxes to\n      math::Transform.\n    - vdb_view is now compatible with both GLFW 2 and GLFW 3.\n    - Made many small changes to address type conversion and other warnings\n      reported by newer compilers like GCC 4.8 and ICC 14.\n    - Replaced the HALF_INCL_DIR and HALF_LIB_DIR Makefile variables\n      with ILMBASE_INCL_DIR and ILMBASE_LIB_DIR and added ILMBASE_LIB,\n      to match OpenEXR's library organization.\n      [Contributed by Double Negative]\n    - Eliminated most local (function-scope) static variables, because\n      Visual C++ doesn't guarantee thread-safe initialization of local statics.\n      [Contributed by SESI]\n    - Fixed a bug in readString() related to empty strings.\n      [Contributed by Fabio Piparo]\n    - Fixed a bug in the tools::VolumeToMesh simplification scheme that\n      was creating visual artifacts.\n\n    API changes:\n    - The addition of a GridBase::readBuffers() virtual function overload\n      and the GridBase::clip(), GridBase::readNonresidentBuffers() and\n      Tree::clipUnallocatedNodes() virtual functions changes the grid ABI\n      so that it is incompatible with earlier versions of the OpenVDB library\n      (such as the ones in Houdini 12.5 and 13).  Define the macro\n      OPENVDB_2_ABI_COMPATIBLE when compiling OpenVDB to disable these changes\n      and preserve ABI compatibility.\n    - All shaders now have a template argument to specify the type of\n      an optional material color grid, but the default type mimics\n      the old, uniform color behavior.\n    - Removed a deprecated io::Stream::write() overload.\n    - The point counts in the UniformPointScatter and NonUniformPointScatter\n      tools are now specified and returned as Index64.\n    - math::RandInt has an extra template argument to specify the integer\n      type.  The RandomInt typedef is unchanged.\n    - io::readData(), io::HalfReader::read() and io::HalfWriter::write() now\n      take a uint32_t argument indicating the type of compression instead of\n      a bool indicating whether compression is enabled.\n    - Removed io::Archive::isCompressionEnabled() and\n      io::Archive::setCompressionEnabled() and renamed\n      io::Archive::compressionFlags() and io::Archive::setCompressionFlags()\n      to io::Archive::compression() and io::Archive::setCompression().\n    - Internal and leaf node classes are now required to provide\n      \"PartialCreate\" constructors that optionally bypass the allocation\n      of voxel buffers.  Leaf node classes must now also provide allocate()\n      and isAllocated() methods to manage the allocation of their buffers.\n    - Removed pruneInactive() and pruneLevelSet() methods from the Tree\n      and various node classes.  These methods have been replaced by\n      the much faster pruning functions found in tools/Prune.h.\n    - Removed signedFloodFill() methods from the Grid, Tree and various\n      node classes.  These methods have been replaced by the much faster\n      functions found in tools/SignedFloodFill.h.\n    - Removed Grid::setBackground() and Tree::setBackground() (use the faster\n      changeBackground() tool instead), and removed the default argument\n      from RootNode::setBackground().\n\n    Python:\n    - Added grid methods convertToPolygons() and convertToQuads(),\n      which convert volumes to meshes, and createLevelSetFromPolygons(),\n      which converts meshes to volumes.  NumPy is required.\n\n    Maya:\n    - Added an adaptive polygonal surface extraction node.\n\n    Houdini:\n    - Added a new Resize Narrow Band SOP that can efficiently adjust the width\n      of a level set's narrow band.  This allows, for example, for a level set\n      to be created quickly from points or polygons with a very narrow band\n      that is then quickly resized to a desired width.\n    - Fixed bugs in the Smooth Level Set and Reshape Level Set SOPs that\n      caused them to ignore the selected discretization scheme.\n    - Added a Morph Level Set SOP.\n    - Added a From Points SOP to very quickly generate a level set\n      from a point cloud, ignoring any radius attribute.\n      [DWA internal]\n    - Added a Voxel Scale mode to the Resample SOP.\n    - Improved the performance and memory footprint of the From Particles SOP\n      for large numbers (tens to hundreds of millions) of particles.\n    - The Scatter SOP now accepts fractional numbers of particles per voxel.\n    - Improved the performance of the Scatter SOP by more than an order\n      of magnitude.\n    - The Clip SOP now has a toggle to choose explicitly between a mask grid\n      or a bounding box as the clipping region.  As a consequence, the\n      mask grid can now be unnamed.\n    - Added the OpenVDB library version number to the Extended Operator\n      Information for all SOPs.\n    - SOPs are now linked with an rpath to the directory containing the\n      OpenVDB library.\n    - Like the native Houdini file SOP, the Read SOP now allows missing frames\n      to be reported either as errors or as warnings.\n    - The Read SOP now has an optional input for geometry, the bounding box\n      of which can be used to clip grids as they are read.  For large grids,\n      clipping while reading can result in significantly lower memory usage\n      than clipping after reading.\n    - The From Polygons and Convert SOPs now default to using the polygon soup\n      mesh representation, which uses less memory.\n\nVersion 2.3.0 - April 23, 2014\n    - Added tools::extractSparseTree(), which selectively extracts and\n      transforms data from a dense grid to produce a sparse tree,\n      and tools::extractSparseTreeWithMask(), which copies data from\n      the index-space intersection of a sparse tree and a dense input grid.\n    - Added copy constructors to the Grid, Tree, RootNode, InternalNode\n      and LeafNode classes, and an assignment operator overload to RootNode,\n      that allow the source and destination to have different value types.\n    - Modified Tree::combine2() to permit combination of trees with different\n      value types.\n    - Added CanConvertType and RootNode::SameConfiguration metafunctions,\n      which perform compile-time tests for value type and tree type\n      compatibility, and a RootNode::hasCompatibleValueType() method,\n      which does runtime checking.\n    - Added optional support for logging using log4cplus.  See logging.h\n      and the INSTALL file for details.\n    - Added VolumeRayIntersector::hits(), which returns all the hit segments\n      along a ray.  This is generally more efficient than repeated calls\n      to VolumeRayIntersector::march().\n    - Added member class Ray::TimeSpan and method Ray::valid(), and\n      deprecated method Ray::test().\n    - Fixed a bug in VolumeHDDA that could cause rendering artifacts\n      when a ray's start time was zero.\n      [Contributed by Mike Farnsworth]\n    - Added tools::compositeToDense(), which composites data from a\n      sparse tree into a dense array, using a sparse alpha mask.\n      Over, Add, Sub, Min, Max, Mult, and Set are supported operations.\n    - Added tools::transformDense(), which applies a functor to the value\n      of each voxel of a dense grid within a given bounding box.\n    - Improved the performance of node iterators.\n\n    API changes:\n    - Collected the digital differential analyzer code from math/Ray.h\n      and tools/RayIntersector.h into a new header file, math/DDA.h.\n    - Rewrote VolumeHDDA and made several changes to its API.  (VolumeHDDA\n      is used internally by VolumeRayIntersector, whose API is unchanged.)\n    - Tree::combine2(), RootNode::combine2(), InternalNode::combine2(),\n      LeafNode::combine2() and CombineArgs all now require an additional\n      template argument, which determines the type of the other tree.\n    - Assignment operators for LeafManager::LeafRange::Iterator,\n      BaseMaskIterator, NodeMask and RootNodeMask now return references\n      to the respective objects.\n    - Removed a number of methods that were deprecated in version 2.0.0\n      or earlier.\n\n    Houdini:\n    - Added a Clip SOP, which does volumetric clipping.\n    - Added an Occlusion Mask SOP, which generates a mask of the voxels\n      inside a camera frustum that are occluded by objects in an input grid.\n    - The Combine SOP now applies the optional signed flood fill only to\n      level set grids, since that operation isn't meaningful for other grids.\n    - The Filter SOP now processes all grid types, not just scalar grids.\n\nVersion 2.2.0 - February 20, 2014\n    - Added a simple, multithreaded volume renderer, and added volume\n      rendering support to the vdb_render command-line renderer.\n    - Added an option to the LevelSetRayIntersector and to vdb_render\n      to specify the isovalue of the level set.\n    - Added methods to the LevelSetRayIntersector to return the time of\n      intersection along a world or index ray and to return the level set\n      isovalue.\n    - Improved the performance of the VolumeRayIntersector and added\n      support for voxel dilation to account for interpolation kernels.\n    - Added a section to the Cookbook on interpolation using BoxSampler,\n      GridSampler, DualGridSampler, et al.\n    - Added a section to the Overview on grids and grid metadata.\n    - Modified tools::DualGridSampler so it is more consistent with\n      tools::GridSampler.\n    - tools::cpt(), tools::curl(), tools::laplacian(), tools::meanCurvature()\n      and tools::normalize() now output grids with appropriate vector types\n      (covariant, contravariant, etc.).\n    - Added tools::transformVectors(), which applies an affine transformation\n      to the voxel values of a vector-valued grid in accordance with the\n      grid's Vector Type and World Space/Local Space metadata setting.\n    - Added tools::compDiv(), which combines grids by dividing the values\n      of corresponding voxels.\n    - Fixed a bug in the mean curvature computation that could produce NaNs\n      in regions with constant values.\n    - Added a Grid::topologyDifference() method.\n    - Added exp() and sum() methods to math::Vec2, math::Vec3 and math::Vec4.\n    - Improved tools::fillWithSpheres() for small volumes that are just a few\n      voxels across.\n    - Improved the accuracy of the mesh to volume converter.\n    - Fixed a bug in the mesh to volume converter that caused incorrect sign\n      classifications for narrow-band level sets.\n    - Fixed a bug in NonlinearFrustumMap::applyIJT() that resulted in incorrect\n      values when computing the gradient of a grid with a frustum transform.\n    - Fixed a file I/O bug whereby some .vdb files could not be read correctly\n      if they contained grids with more than two distinct inactive values.\n    - Fixed an off-by-one bug in the numbering of unnamed grids in .vdb files.\n      The first unnamed grid in a file is now retrieved using the name \"[0]\",\n      instead of \"[1]\".\n    - Fixed a build issue reported by Clang 3.2 in tools/GridOperators.h.\n    - Fixed a memory leak in tools::Film.\n    - Added library and file format version number constants to the\n      Python module.\n    - Improved convergence in the volume renderer.\n      [Contributed by Jerry Tessendorf and Mark Matthews]\n    - Made various changes for compatibility with Houdini 13 and with\n      C++11 compilers.\n      [Contributed by SESI]\n\n    API changes:\n    - tools::VolumeRayIntersector::march() no longer returns an int\n      to distinguish tile vs. voxel hits.  Instead, it now returns false\n      if no intersection is detected and true otherwise.  Also, t0 and t1\n      might now correspond to the first and last hits of multiple adjacent\n      leaf nodes and/or active tiles.\n    - tools::DualGridSampler is no longer templated on the target grid type,\n      and the value accessor is now passed as an argument.\n    - The .vdb file format has changed slightly.  Tools built with older\n      versions of OpenVDB should be recompiled to ensure that they can read\n      files in the new format.\n\n    Houdini:\n    - Added topology union, intersection and difference operations to\n      the Combine SOP.  These operations combine the active voxel topologies\n      of grids that may have different value types.\n    - Added a Divide operation to the Combine SOP.\n    - Added support for boolean grids to the Combine, Resample, Scatter, Prune\n      and Visualize SOPs.\n    - The Fill SOP now accepts a vector as the fill value, and it allows\n      the fill region bounds to be specified either in index space (as before),\n      in world space, or using the bounds of geometry connected to an optional\n      new reference input.\n    - Added a toggle to the Offset Level Set SOP to specify the offset in\n      either world or voxel units.\n    - Added a toggle to the Transform and Resample SOPs to apply the\n      transform to the voxel values of vector-valued grids, in accordance with\n      those grids' Vector Type and World Space/Local Space metadata settings.\n    - Added a Vector Type menu to the Vector Merge SOP.\n    - Removed masking options from the Renormalize SOP (since masking is\n      not supported yet).\n    - Reimplemented the Vector Merge SOP for better performance and\n      interruptibility and to fix a bug in the handling of tile values.\n\nVersion 2.1.0 - December 12, 2013\n    - Added a small number of Maya nodes, primarily for conversion of geometry\n      to and from OpenVDB volumes and for visualization of volumes.\n    - Added an initial implementation of level set morphing (with improvements\n      to follow soon).\n    - Added tools::LevelSetMeasure, which efficiently computes the surface area,\n      volume and average mean-curvature of narrow-band level sets, in both\n      world and voxel units.  Those quantities are now exposed as intrinsic\n      attributes on the Houdini VDB primitive and can be queried using the\n      native Measure SOP.\n    - tools::Dense now supports the XYZ memory layout used by Houdini and Maya\n      in addition to the ZYX layout used in OpenVDB trees.\n    - Improved the performance of masking in the level set filter tool and\n      added inversion and scaling of the mask input, so that any scalar-valued\n      volume can be used as a mask, not just volumes with a [0, 1] range.\n    - Added optional masking to the non-level-set filters, to the grid\n      operators (CPT, curl, divergence, gradient, Laplacian, mean curvature,\n      magnitude, and normalize) and to the Analysis and Filter SOPs.\n    - Added more narrow band controls to the Rebuild Level Set SOP.\n    - Improved the accuracy of the level set rebuild tool.\n    - Added tools::activate() and tools::deactivate(), which set the active\n      states of tiles and voxels whose values are equal to or approximately\n      equal to a given value, and added a Deactivate Background Voxels toggle\n      to the Combine SOP.\n    - Added math::BBox::applyMap() and math::BBox::applyInverseMap(), which\n      allow for transformation of axis-aligned bounding boxes.\n    - Added a position shader to the level set ray-tracer (primarily for\n      debugging purposes).\n    - Added an io::Queue class that manages a concurrent queue for\n      asynchronous serialization of grids to files or streams.\n    - Fixed a bug in io::Archive whereby writing unnamed, instanced grids\n      (i.e., grids sharing a tree) to a file rendered the file unreadable.\n    - Fixed a bug in the volume to mesh converter that caused it to generate\n      invalid polygons when the zero crossing lay between active and inactive\n      regions.\n    - Fixed a bug in the point scatter tool (and the Scatter SOP) whereby\n      the last voxel always remained empty.\n    - Fixed a bug in the Read SOP that caused grids with the same name\n      to be renamed with a numeric suffix (e.g., \"grid[1]\", \"grid[2]\", etc.).\n    - Fixed some unit test failures on 64-bit Itanium machines.\n\n    API changes:\n    - The Filter tool is now templated on a mask grid, and threading is\n      controlled using a grain size, for consistency with most of the\n      other level set tools.\n    - The level set filter tool is now templated on a mask grid.\n    - All shaders now take a ray direction instead of a ray.\n\nVersion 2.0.0 - October 31, 2013\n    - Added a Python module with functions for basic manipulation of grids\n      (but no tools, yet).\n    - Added ray intersector tools for efficient, hierarchical intersection\n      of rays with level-set and generic volumes.\n    - Added a Ray class and a hierarchical Digital Differential Analyzer\n      for fast ray traversal.\n    - Added a fully multithreaded level set ray tracer and camera classes\n      that mimic Houdini's cameras.\n    - Added a simple, command-line renderer (currently for level sets only).\n    - Implemented a new meshing scheme that produces topologically robust\n      two-manifold meshes and is twice as fast as the previous scheme.\n    - Implemented a new, topologically robust (producing two-manifold meshes)\n      level-set-based seamless fracture scheme.  The new scheme eliminates\n      visible scarring seen in the previous implementation by subdividing\n      internal, nonplanar quads near fracture seams.  In addition,\n      fracture seam points are now tagged, allowing them to be used\n      to drive pre-fracture dynamics such as local surface buckling.\n    - Improved the performance of Tree::evalActiveVoxelBoundingBox() and\n      Tree::activeVoxelCount(), and significantly improved the performance\n      of Tree::evalLeafBoundingBox() (by about 30x).\n    - Added a tool (and a Houdini SOP) that fills a volume with\n      adaptively-sized overlapping or non-overlapping spheres.\n    - Added a Ray SOP that can be used to perform geometry projections\n      using level-set ray intersections or closest-point queries.\n    - Added a tool that performs accelerated closest surface point queries\n      from arbitrary points in world space to narrow-band level sets.\n    - Increased the speed of masked level set filtering by 20% for\n      the most common cases.\n    - Added math::BoxStencil, with support for trilinear interpolation\n      and gradient computation.\n    - Added Tree::topologyIntersection(), which intersects a tree's active\n      values with those of another tree, and Tree::topologyDifference(),\n      which performs topological subtraction of one tree's active values\n      from another's.  In both cases, the ValueTypes of the two trees\n      need not be the same.\n    - Added Tree::activeTileCount(), which returns the number of active tiles\n      in a tree.\n    - Added math::MinIndex() and math::MaxIndex(), which find the minimum\n      and maximum components of a vector without any branching.\n    - Added math::BBox::minExtent(), which returns a bounding box's\n      shortest axis.\n    - The default math::BBox constructor now generates an invalid bounding\n      box rather than an empty bounding box positioned at the origin.\n      The new behavior is consistent with math::CoordBBox.\n      [Thanks to Rick Hankins for suggesting this fix.]\n    - Added CoordBBox::reset(), which resets a bounding box to its initial,\n      invalid state.\n    - Fixed a bug in the default ScaleMap constructor that left some data\n      used in the inverse uninitialized.\n    - Added MapBase::applyJT(), which applies the Jacobian transpose to\n      a vector (the Jacobian transpose takes a range-space vector to a\n      domain-space vector, e.g., world to index), and added\n      MapBase::inverseMap(), which returns a new map representing\n      the inverse of the original map (except for NonlinearFrustumMap,\n      which does not currently have a defined inverse map).\n      Note: Houdini 12.5 uses an earlier version of OpenVDB, and maps\n      created with that version lack virtual table entries for these\n      new methods, so do not call these methods from Houdini 12.5.\n    - Reimplemented math::RandomInt using Boost.Random instead of rand()\n      (which is not thread-safe), and deprecated math::randUniform()\n      and added math::Random01 to replace it.\n    - Modified tools::copyFromDense() and tools::copyToDense() to allow\n      for implicit type conversion (e.g., between a Dense<Int32> and a\n      FloatTree) and fixed several bugs in tools::CopyFromDense.\n    - Fixed bugs in math::Stats and math::Histogram that could produce\n      NaNs or other incorrect behavior if certain methods were called\n      on populations of size zero.\n    - Renamed tolerance<T> to math::Tolerance<T> and negative<T>() to\n      math::negative<T>() and removed math::toleranceValue<T>().\n    - Implemented a closest point on line segment algorithm,\n      math::closestPointOnSegmentToPoint().\n    - Fixed meshing issues relating to masking and automatic partitioning.\n    - Grid::merge() and Tree::merge() now accept an optional MergePolicy\n      argument that specifies one of three new merging schemes.  (The old\n      merging scheme, which is no longer available, used logic for each tree\n      level that was inconsistent with the other levels and that could result\n      in active tiles being replaced with nodes having only inactive values.)\n    - Renamed LeafNode::coord2offset(), LeafNode::offset2coord() and\n      LeafNode::offset2globalCoord() to coordToOffset(), offsetToLocalCoord()\n      and offsetToGlobalCoord(), respectively, and likewise for InternalNode.\n      [Thanks to Rick Hankins for suggesting this change.]\n    - Replaced Tree methods setValueOnMin(), setValueOnMax() and\n      setValueOnSum() with tools::setValueOnMin(), tools::setValueOnMax() and\n      tools::setValueOnSum() (and a new tools::setValueOnMult()) and added\n      Tree::modifyValue() and Tree::modifyValueAndActiveState(), which modify\n      voxel values in place via user-supplied functors.  Similarly, replaced\n      ValueAccessor::setValueOnSum() with ValueAccessor::modifyValue()\n      and ValueAccessor::modifyValueAndActiveState(), and added a modifyValue()\n      method to all value iterators.\n    - Removed LeafNode::addValue() and LeafNode::scaleValue().\n    - Added convenience classes Tree3 and Tree5 for custom tree configurations.\n    - Added an option to the From Particles SOP to generate an alpha mask,\n      which can be used to constrain level set filtering so as to preserve\n      surface details.\n    - The mesh to volume converter now handles point-degenerate polygons.\n    - Fixed a bug in the Level Set Smooth, Level Set Renormalize and\n      Level Set Offset SOPs that caused the group name to be ignored.\n    - Fixed various OS X and Windows build issues.\n      [Contributions from SESI and DD]\n\nVersion 1.2.0 - June 28, 2013\n    - Level set filters now accept an optional alpha mask grid.\n    - Implemented sharp feature extraction for level set surfacing.\n      This enhances the quality of the output mesh and reduces aliasing\n      artifacts.\n    - Added masking options to the meshing tools, as well as a spatial\n      multiplier for the adaptivity threshold, automatic partitioning,\n      and the ability to preserve edges and corners when mesh adaptivity\n      is applied.\n    - The mesh to volume attribute transfer scheme now takes surface\n      orientation into account, which improves accuracy in proximity to\n      edges and corners.\n    - Added a foreach() method to tools::LeafManager that, like\n      tools::foreach(), applies a user-supplied functor to each leaf node\n      in parallel.\n    - Rewrote the particle to level set converter, simplifying the API,\n      improving performance (especially when particles have a fixed radius),\n      adding the capability to transfer arbitrary point attributes,\n      and fixing a velocity trail bug.\n    - Added utility methods Sign(), SignChange(), isApproxZero(), Cbrt()\n      and ZeroCrossing() to math/Math.h.\n    - Added a probeNode() method to the value accessor and to tree nodes\n      that returns a pointer to the node that contains a given voxel.\n    - Deprecated LeafNode::addValue() and LeafNode::scaleValue().\n    - Doubled the speed of the mesh to volume converter (which also improves\n      the performance of the fracture and level set rebuild tools) and\n      improved its inside/outside voxel classification near edges and corners.\n    - tools::GridSampler now accepts either a grid, a tree or a value accessor,\n      and it offers faster index-based access methods and much better\n      performance in cases where many instances are allocated.\n    - Extended tools::Dense to make it more compatible with existing tools.\n    - Fixed a crash in io::Archive whenever the library was unloaded\n      from memory and then reloaded.\n      [Contributed by Ollie Harding]\n    - Fixed a bug in GU_PrimVDB::buildFromPrimVolume(), seen during the\n      conversion from Houdini volumes to OpenVDB grids, that could cause\n      signed flood fill to be applied to non-level set grids, resulting in\n      active tiles with incorrect values.\n    - Added a Prune SOP with several pruning schemes.\n\nVersion 1.1.1 - May 10 2013\n    - Added a simple dense grid class and tools to copy data from\n      dense voxel arrays into OpenVDB grids and vice-versa.\n    - Starting with Houdini 12.5.396, plugins built with this version\n      of OpenVDB can coexist with native Houdini OpenVDB nodes.\n    - The level set fracture tool now smooths seam line edges during\n      mesh extraction, eliminating staircase artifacts.\n    - Significantly improved the performance of the\n      util::leafTopologyIntersection() and util::leafTopologyDifference()\n      utilities and added a LeafNode::topologyDifference() method.\n    - Added convenience functions that provide simplified interfaces\n      to the mesh to volume and volume to mesh converters.\n    - Added a tools::accumulate() function that is similar to tools::foreach()\n      but can be used to accumulate the results of computations over\n      the values of a grid.\n    - Added tools::statistics(), tools::opStatistics() and tools::histogram(),\n      which efficiently compute statistics (mean, variance, etc.) and\n      histograms of grid values (using math::Stats and math::Histogram).\n    - Modified CoordBBox to adhere to TBB's splittable type requirements,\n      so that, for example, a CoordBBox can be used as a blocked\n      iteration range.\n    - Added Tree::addTile(), Tree::addLeaf() and Tree::stealNode(), for\n      fine control over tree construction.\n    - Addressed a numerical stability issue when performing Gaussian\n      filtering of level set grids.\n    - Changed the return type of CoordBBox::volume() to reduce the risk\n      of overflow.\n    - When the input mesh is self-intersecting, the mesh to volume converter\n      now produces a level set with a monotonic gradient field.\n    - Fixed a threading bug in the mesh to volume converter that caused it\n      to produce different results for the same input.\n    - Fixed a bug in the particle to level set converter that prevented\n      particles with zero velocity from being rasterized in Trail mode.\n    - Added an optional input to the Create SOP into which to merge\n      newly-created grids.\n    - Fixed a bug in the Resample SOP that caused it to produce incorrect\n      narrow-band widths when resampling level set grids.\n    - Fixed a bug in the To Polygons SOP that caused intermittent crashes\n      when the optional reference input was connected.\n    - Fixed a bug in the Advect Level Set SOP that caused a crash\n      when the velocity input was connected but empty.\n    - The Scatter and Sample Point SOPs now warn instead of erroring\n      when given empty grids.\n    - Fixed a crash in vdb_view when stepping through multiple grids\n      after changing render modes.\n    - vdb_view can now render fog volumes and vector fields, and it now\n      features interactively adjustable clipping planes that enable\n      one to view the interior of a volume.\n\nVersion 1.1.0 - April 4 2013\n    - The resampleToMatch() tool, the Resample SOP and the Combine SOP\n      now use level set rebuild to correctly and safely resample level sets.\n      Previously, scaling a level set would invalidate the signed distance\n      field, leading to holes and other artifacts.\n    - Added a mask-based topological erosion tool, and rewrote and simplified\n      the dilation tool.\n    - The LevelSetAdvection tool can now advect forward or backward in time.\n    - Tree::pruneLevelSet() now replaces each pruned node with a tile having\n      the inside or outside background value, instead of arbitrarily selecting\n      one of the node's tile or voxel values.\n    - When a grid is saved to a file with saveFloatAsHalf() set to true,\n      the grid's background value is now also quantized to 16 bits.\n      (Not quantizing the background value caused a mismatch with the values\n      of background tiles.)\n    - As with tools::foreach(), it is now possible to specify whether functors\n      passed to tools::transformValues() should be shared across threads.\n    - tree::LeafManager can now be instantiated with a const tree,\n      although buffer swapping with const trees is disabled.\n    - Added a Grid::signedFloodFill() overload that allows one to specify\n      inside and outside values.\n    - Fixed a bug in Grid::setBackground() so that now only the values of\n      inactive voxels change.\n    - Fixed Grid::topologyUnion() so that it actually unions tree topology,\n      instead of just the active states of tiles and voxels.  The previous\n      behavior broke multithreaded code that relied on input and output grids\n      having compatible tree topology.\n    - math::Transform now includes an isIdentity() predicate and methods\n      to pre- and postmultiply by a matrix.\n    - Modified the node mask classes to permit octree-like tree configurations\n      (i.e., with a branching factor of two) and to use 64-bit operations\n      instead of 32-bit operations.\n    - Implemented a new, more efficient closest point on triangle algorithm.\n    - Implemented a new vertex normal scheme in the volume to mesh\n      converter, and resolved some overlapping polygon issues.\n    - The volume to mesh converter now meshes not just active voxels\n      but also active tiles.\n    - Fixed a bug in the mesh to volume converter that caused unsigned\n      distance field conversion to produce empty grids.\n    - Fixed a bug in the level set fracture tool whereby the cutter overlap\n      toggle was ignored.\n    - Fixed an infinite loop bug in vdb_view.\n    - Updated vdb_view to use the faster and less memory-intensive\n      OpenVDB volume to mesh converter instead of marching cubes,\n      and rewrote the shader to be OpenGL 3.2 and GLSL 1.2 compatible.\n    - Given multiple input files or a file containing multiple grids,\n      vdb_view now displays one grid at a time.  The left and right\n      arrow keys cycle between grids.\n    - The To Polygons SOP now has an option to associate the input grid's\n      name with each output polygon.\n\nVersion 1.0.0 - March 14 2013\n    - tools::levelSetRebuild() now throws an exception when given a\n      non-scalar or non-floating-point grid.\n    - The tools in tools/GridOperators.h are now interruptible, as is\n      the Analysis SOP.\n    - Added a leaf node iterator and a TBB-compatible range class to\n      the LeafManager.\n    - Modified the VolumeToMesh tool to handle surface topology issues\n      around fracture seam lines.\n    - Modified the Makefile to allow vdb_view to compile on OS X systems\n      (provided that GLFW is available).\n    - Fixed a bug in the Create SOP that resulted in \"invalid parameter name\"\n      warnings.\n    - The Combine SOP now optionally resamples the A grid into the B grid's\n      index space (or vice-versa) if the A and B transforms differ.\n    - The Vector Split and Vector Merge SOPs now skip inactive voxels\n      by default, but they can optionally be made to include inactive voxels,\n      as they did before.\n    - The LevelSetFracture tool now supports custom rotations for each\n      cutter instance, and the Fracture SOP now uses quaternions to generate\n      uniformly-distributed random rotations.\n\nVersion 0.104.0 - February 15 2013\n    - Added a tool and a SOP to rebuild a level set from any scalar volume.\n    - .vdb files are now saved using a mask-based compression scheme\n      that is an order of magnitude faster than ZLIB and produces comparable\n      file sizes for level set and fog volume grids.  (ZLIB compression\n      is still enabled by default for other classes of grids).\n    - The Filter and LevelSetFilter tools now include a Gaussian filter,\n      and mean (box) filtering is now 10-50x faster.\n    - The isosurface meshing tool is now more robust (to level sets\n      with one voxel wide narrow bands, for example).\n    - Mesh to volume conversion is on average 1.5x faster and up to 5.5x\n      faster for high-resolution meshes where the polygon/voxel size ratio\n      is small.\n    - Added createLevelSet() and createLevelSetSphere() factory functions\n      for level set grids.\n    - tree::ValueAccessor is now faster for trees of height 2, 3 and 4\n      (the latter is the default), and it now allows one to specify,\n      via a template argument, the number of node levels to be cached,\n      which can also improve performance in special cases.\n    - Added a toggle to tools::foreach() to specify whether or not\n      the functor should be shared across threads.\n    - Added Mat4s and Mat4d metadata types.\n    - Added explicit pre- and postmultiplication methods to the Transform,\n      Map and Mat4 classes and deprecated the old accumulation methods.\n    - Modified NonlinearFrustumMap to be more compatible with Houdini's\n      frustum transform.\n    - Fixed a GridTransformer bug that caused it to translate the\n      output grid incorrectly in some cases.\n    - Fixed a bug in the tree-level LeafIterator that resulted in\n      intermittent crashes in tools::dilateVoxels().\n    - The Hermite data type and Hermite grids are no longer supported.\n    - Added tools/GridOperators.h, which includes new, cleaner implementations\n      of the Cpt, Curl, Divergence, Gradient, Laplacian, Magnitude,\n      MeanCurvature and Normalize tools.\n    - Interrupt support has been improved in several tools, including\n      tools::ParticlesToLevelSet.\n    - Simplified the API of the Stencil class and added an intersects()\n      method to test for intersection with a specified isovalue.\n    - Renamed voxelDimensions to voxelSize in transform classes and elsewhere.\n    - Deprecated houdini_utils::ParmFactory::setChoiceList() in favor of\n      houdini_utils::ParmFactory::setChoiceListItems(), which requires\n      a list of token, label string pairs.\n    - Made various changes for Visual C++ compatibility.\n      [Contributed by SESI]\n    - Fixed a bug in houdini_utils::getNodeChain() that caused the\n      Offset Level Set, Smooth Level Set and Renormalize Level Set SOPs\n      to ignore frame changes.\n      [Contributed by SESI]\n    - The From Particles SOP now provides the option to write into\n      an existing grid.\n    - Added a SOP to edit grid metadata.\n    - The Fracture SOP now supports multiple cutter objects.\n    - Added a To Polygons SOP that complements the Fracture SOP and allows\n      for elimination of seam lines, generation of correct vertex normals\n      and grouping of polygons when surfacing fracture fragments, using\n      the original level set or mesh as a reference.\n\nVersion 0.103.1 - January 15 2013\n    - tree::ValueAccessor read operations are now faster for four-level trees.\n      (Preliminary benchmark tests suggest a 30-40% improvement.)\n    - For vector-valued grids, tools::compMin() and tools::compMax()\n      now compare vector magnitudes instead of individual components.\n    - Migrated grid sampling code to a new file, Interpolation.h,\n      and deprecated old files and classes.\n    - Added a level-set fracture tool and a Fracture SOP.\n    - Added tools::sdfInteriorMask(), which creates a mask of the\n      interior region of a level set grid.\n    - Fixed a bug in the mesh to volume converter that produced unexpected\n      nonzero values for voxels at the intersection of two polygons,\n      and another bug that produced narrow-band widths that didn't respect\n      the background value when the half-band width was less than three voxels.\n    - houdini_utils::ParmFactory can now correctly generate ramp multi-parms.\n    - Made various changes for Visual C++ compatibility.\n      [Contributed by SESI]\n    - The Convert SOP can now convert between signed distance fields and\n      fog volumes and from volumes to meshes.\n      [Contributed by SESI]\n    - For level sets, the From Mesh and From Particles SOPs now match\n      the reference grid's narrow-band width.\n    - The Scatter SOP can now optionally scatter points in the interior\n      of a level set.\n\nVersion 0.103.0 - December 21 2012\n    - The mesh to volume converter is now 60% faster at generating\n      level sets with wide bands, and the From Mesh SOP is now interruptible.\n    - Fixed a threading bug in the recently-added compReplace() tool\n      that caused it to produce incorrect output.\n    - Added a probeConstLeaf() method to the Tree, ValueAccessor and\n      node classes.\n    - The Houdini VDB primitive doesn't create a \"name\" attribute\n      unnecessarily (i.e., if its grid's name is empty), but it now\n      correctly allows the name to be changed to the empty string.\n    - Fixed a crash in the Vector Merge SOP when fewer than three grids\n      were merged.\n    - The From Particles SOP now features a \"maximum half-width\" parameter\n      to help avoid runaway computations.\n\nVersion 0.102.0 - December 13 2012\n    - Added tools::compReplace(), which copies the active values of one grid\n      into another, and added a \"Replace A With Active B\" mode to the\n      Combine SOP.\n    - Grid::signedFloodFill() no longer enters an infinite loop when\n      filling an empty grid.\n    - Fixed a bug in the particle to level set converter that sometimes\n      produced level sets with holes, and fixed a bug in the SOP that\n      could result in random output.\n    - Fixed an issue in the frustum preview feature of the Create SOP\n      whereby rendering very large frustums could cause high CPU usage.\n    - Added streamline support to the constrained advection scheme\n      in the Advect Points SOP.\n    - Added an Advect Level Set SOP.\n\nVersion 0.101.1 - December 11 2012 (DWA internal release)\n    - Partially reverted the Houdini VDB primitive's grid accessor methods\n      to their pre-0.98.0 behavior.  A primitive's grid can once again\n      be accessed by shared pointer, but now also by reference.\n      Accessor methods for grid metadata have also been added, and the\n      primitive now ensures that metadata and transforms are never shared.\n    - Fixed an intermittent crash in the From Particles SOP.\n\nVersion 0.101.0 - December 6 2012 (DWA internal release)\n    - Partially reverted the Grid's tree and transform accessor methods\n      to their pre-0.98.0 behavior, eliminating copy-on-write but\n      preserving their return-by-reference semantics.  These methods\n      are now supplemented with a suite of shared pointer accessors.\n    - Restructured the mesh to volume converter for a 40% speedup\n      and to be more robust to non-manifold geometry, to better preserve\n      sharp features, to support arbitrary tree configurations and\n      to respect narrow-band limits.\n    - Added a getNodeBoundingBox() method to RootNode, InternalNode\n      and LeafNode that returns the index space spanned by a node.\n    - Made various changes for Visual C++ compatibility.\n      [Contributed by SESI]\n    - Renamed the Reshape Level Set SOP to Offset Level Set.\n    - Fixed a crash in the Convert SOP and added support for conversion\n      of empty grids.\n\nVersion 0.100.0 - November 30 2012 (DWA internal release)\n    - Greatly improved the performance of the level set to fog volume\n      converter.\n    - Improved the performance of the median filter and of level set\n      CSG operations.\n    - Reintroduced Tree::pruneLevelSet(), a specialized pruneInactive()\n      for level-set grids.\n    - Added utilities to the houdini_utils library to facilitate the\n      collection of a chain of adjacent nodes of a particular type\n      so that they can be cooked in a single step.  (For example,\n      adjacent xform SOPs could be collapsed by composing their\n      transformation matrices into a single matrix.)\n    - Added pruning and flood-filling options to the Convert SOP.\n    - Reimplemented the Filter SOP, omitting level-set-specific filters\n      and adding node chaining (to reduce memory usage when applying\n      several filters in sequence).\n    - Added a toggle to the Read SOP to read grid metadata and\n      transforms only.\n    - Changed the attribute transfer scheme on the From Mesh and\n      From Particles SOPs to allow for custom grid names and\n      vector type metadata.\n\nVersion 0.99.0 - November 21 2012\n    - Added Grid methods that return non-const Tree and Transform\n      references without triggering deep copies, as well as const\n      methods that return const shared pointers.\n    - Added Grid methods to populate a grid's metadata with statistics\n      like the active voxel count, and to retrieve that metadata.\n      By default, statistics are now computed and added to grids\n      whenever they are written to .vdb files.\n    - Added io::File::readGridMetadata() and io::File::readAllGridMetadata()\n      methods to read just the grid metadata and transforms from a .vdb file.\n    - Fixed numerical precision issues in the csgUnion, csgIntersection\n      and csgDifference tools, and added toggles to optionally disable\n      postprocess pruning.\n    - Fixed an issue in vdb_view with the ordering of GL vertex buffer calls.\n      [Contributed by Bill Katz]\n    - Fixed an intermittent crash in the ParticlesToLevelSet tool,\n      as well as a race condition that could cause data corruption.\n    - The ParticlesToLevelSet tool and From Particles SOP can now\n      transfer arbitrary point attribute values from the input particles\n      to output voxels.\n    - Fixed a bug in the Convert SOP whereby the names of primitives\n      were lost during conversion, and another bug that resulted in\n      an arithmetic error when converting an empty grid.\n    - Fixed a bug in the Combine SOP that caused the Operation selection\n      to be lost.\n\nVersion 0.98.0 - November 16 2012\n    - Tree and Transform objects (and Grid objects in the context of\n      Houdini SOPs) are now passed and accessed primarily by reference\n      rather than by shared pointer.  See the online documentation for\n      details about this important API change.\n      [Contributed by SESI]\n    - Reimplemented CoordBBox to address several off-by-one bugs\n      related to bounding box dimensions.\n    - Fixed an off-by-one bug in Grid::evalActiveVoxelBoundingBox().\n    - Introduced the LeafManager class, which will eventually replace the\n      LeafArray class.  LeafManager supports dynamic buffers stored as\n      a structure of arrays (SOA), unlike LeafArray, which supports only\n      static buffers stored as an array of structures (AOS).\n    - Improved the performance of the LevelSetFilter and LevelSetTracker\n      tools by rewriting them to use the new LeafManager class.\n    - Added Tree and ValueAccessor setValueOnly() methods, which change\n      the value of a voxel without changing its active state, and\n      Tree and ValueAccessor probeLeaf() methods that return the leaf node\n      that contains a given voxel (unless the voxel is represented by a tile).\n    - Added a LevelSetAdvection tool that propagates and tracks\n      narrow-band level sets.\n    - Introduced a new GridSampler class that supports world-space\n      (or index-space) sampling of grid values.\n    - Changed the interpretation of the NonlinearFrustumMap's taper\n      parameter to be the ratio of the near and far plane depths.\n    - Added a ParmFactory::setChoiceList() overload that accepts\n      (token, label) string pairs, and a setDefault() overload that\n      accepts an STL string.\n    - Fixed a crash in the Combine SOP in Copy B mode.\n    - Split the Level Set Filter SOP into three separate SOPs,\n      Level Set Smooth, Level Set Reshape and Level Set Renormalize.\n      When two or more of these nodes are connected in sequence, they interact\n      to reduce memory usage: the last node in the sequence performs\n      all of the operations in one step.\n    - The Advect Points SOP can now output polyline streamlines\n      that trace the paths of the points.\n    - Added an option to the Analysis SOP to specify names for output grids.\n    - Added camera-derived frustum transform support to the Create SOP.\n\nVersion 0.97.0 - October 18 2012\n    - Added a narrow-band level set interface tracking tool (up to\n      fifth-order in space but currently only first-order in time,\n      with higher temporal orders to be added soon).\n    - Added a level set filter tool to perform unrestricted surface\n      smoothing (e.g., Laplacian flow), filtering (e.g., mean value)\n      and morphological operations (e.g., morphological opening).\n    - Added adaptivity to the level set meshing tool for faster mesh\n      extraction with fewer polygons, without postprocessing.\n    - Added a ValueAccessor::touchLeaf() method that creates (if necessary)\n      and returns the leaf node containing a given voxel.  It can be used\n      to preallocate leaf nodes over which to run parallel algorithms.\n    - Fixed a bug in Grid::merge() whereby active tiles were sometimes lost.\n    - Added LeafManager, which is similar to LeafArray but supports a\n      dynamic buffer count and allocates buffers more efficiently.\n      Useful for temporal integration (e.g., for level set propagation\n      and interface tracking), LeafManager is meant to replace LeafArray,\n      which will be deprecated in the next release.\n    - Added a LeafNode::fill() method to efficiently populate leaf nodes\n      with constant values.\n    - Added a Tree::visitActiveBBox() method that applies a functor to the\n      bounding boxes of all active tiles and leaf nodes and that can be used\n      to improve the performance of ray intersection tests, rendering of\n      bounding boxes, etc.\n    - Added a Tree::voxelizeActiveTiles() method to densify active tiles.\n      While convenient and fast, this can produce large dense grids,\n      so use it with caution.\n    - Repackaged Tree::pruneLevelSet() as a Tree::pruneOp()-compatible\n      functor.  LevelSetPrune is a specialized pruneInactive() for\n      level-set grids and is used in interface tracking.\n    - Added a GridBase::pruneGrid() method.\n    - Added a Grid:hasUniformVoxels() method.\n    - Renamed tools::dilate() to tools::dilateVoxels() and improved its\n      performance.  The new name reflects the fact that the current\n      implementation ignores active tiles.\n    - Added a tools::resampleToMatch() function that resamples an input\n      grid into an output grid with a different transform such that, after\n      resampling, the input and output grids coincide, but the output\n      grid's transform is preserved.\n    - Significantly improved the performance of depth-bounded value\n      iterators (ValueOnIter, ValueAllIter, etc.) when the depth bound\n      excludes leaf nodes.\n    - Exposed the value buffers inside leaf nodes with LeafNode::buffer().\n      This allows for very fast access (const and non-const) to voxel\n      values using linear array offsets instead of (i,j,k) coordinates.\n    - In openvdb_houdini/UT_VDBTools.h, added operators for use with\n      processTypedGrid() that resample grids in several different ways.\n    - Added a policy mechanism to houdini_utils::OpFactory that allows for\n      customization of operator names, icons, and Help URLs.\n    - Renamed many of the Houdini SOPs to make the names more consistent.\n    - Added an Advect Points SOP.\n    - Added a Level Set Filter SOP that allows for unrestricted surface\n      deformations, unlike the older Filter SOP, which restricts surface\n      motion to the initial narrow band.\n    - Added staggered vector sampling to the Sample Points SOP.\n    - Added a minimum radius threshold to the particle voxelization tool\n      and SOP.\n    - Merged the Composite and CSG SOPs into a single Combine SOP.\n    - Added a tool and a SOP to efficiently generate narrow-band level set\n      representations of spheres.\n    - In the Visualize SOP, improved the performance of tree topology\n      generation, which is now enabled by default.\n\nVersion 0.96.0 - September 24 2012\n    - Fixed a memory corruption bug in the mesh voxelizer tool.\n    - Temporarily removed the optional clipping feature from\n      the level set mesher.\n    - Added \"Staggered Vector Field\" to the list of grid classes\n      in the Create SOP.\n\nVersion 0.95.0 - September 20 2012\n    - Added a quad meshing tool for higher-quality level set meshing\n      and updated the Visualizer SOP to use it.\n    - Fixed a precision error in the mesh voxelizer and improved\n      the quality of inside/outside voxel classification.\n      Output grids are now also tagged as either level sets or fog volumes.\n    - Modified the GridResampler to use the signed flood fill optimization\n      only on grids that are tagged as level sets.\n    - Added a quaternion class to the math library and a method to\n      return the trace of a Mat3.\n    - Fixed a bug in the ValueAccessor copy constructor that caused\n      the copy to reference the original.\n    - Fixed a bug in RootNode::setActiveState() that caused a crash\n      when marking a (virtual) background voxel as inactive.\n    - Added a Tree::pruneLevelSet() method that is similar to but faster than\n      pruneInactive() for level set grids.\n    - Added fast leaf node voxel access methods that index by linear offset\n      (as returned by ValueIter::pos()) instead of by (i, j, k) coordinates.\n    - Added a Tree::touchLeaf() method that can be used to preallocate a static\n      tree topology over which to safely perform multithreaded processing.\n    - Added a grain size argument to the LeafArray class for finer control\n      of parallelism.\n    - Modified the Makefile to make it easier to omit the doc, vdb_test\n      and vdb_view targets.\n    - Added utility functions (in houdini/UT_VDBUtils.h) to convert\n      between Houdini and OpenVDB matrix and vector types.\n      [Contributed by SESI]\n    - Added accessors to GEO_PrimVDB that make it easier to directly access\n      voxel data and that are used by the HScript volume expression functions\n      in Houdini 12.5.\n      [Contributed by SESI]\n    - As of Houdini 12.1.77, the native transform SOP operates on OpenVDB\n      primitives.\n      [Contributed by SESI]\n    - Added a Convert SOP that converts OpenVDB grids to Houdini volumes\n      and vice-versa.\n\nVersion 0.94.1 - September 7 2012\n    - Fixed bugs in RootNode and InternalNode setValue*() and fill() methods\n      that could cause neighboring voxels to become inactive.\n    - Fixed a bug in Tree::hasSameTopology() that caused false positives\n      when only active states and not values differed.\n    - Added a Tree::hasActiveTiles() method.\n    - For better cross-platform consistency, substituted bitwise AND\n      operations for right shifts in the ValueAccessor hash key computation.\n    - vdb_view no longer aborts when asked to surface a vector-valued\n      grid--but it still doesn't render the surface.\n    - Made various changes for Visual C++ compatibility.\n      [Contributed by SESI]\n    - Added an option to the MeshVoxelizer SOP to convert both open and\n      closed surfaces to unsigned distance fields.\n    - The Filter SOP now allows multiple filters to be applied in\n      user-specified order.\n\nVersion 0.94.0 - August 30 2012\n    - Added a method to union just the active states of voxels from\n      one grid with those of another grid of a possibly different type.\n    - Fixed an incorrect scale factor in the Laplacian diffusion filter.\n    - Fixed a bug in Tree::merge that could leave a tree with invalid\n      value accessors.\n    - Added TreeValueIteratorBase::setActiveState() and deprecated setValueOn().\n    - Removed tools/FastSweeping.h.  It will be replaced with a much more\n      efficient implementation in the near future.\n    - ZLIB compression of .vdb files is now optional, but enabled by default.\n      [Contributed by SESI]\n    - Made various changes for Clang and Visual C++ compatibility.\n      [Contributed by SESI]\n    - The MeshVoxelizer SOP can now transfer arbitrary point and\n      primitive attribute values from the input mesh to output voxels.\n\nVersion 0.93.0 - August 24 2012\n    - Renamed symbols in math/Operators.h to avoid ambiguities that\n      GCC 4.4 reports as errors.\n    - Simplified the API for the stencil version of the\n      closest-point transform operator.\n    - Added logic to io::Archive::readGrid() to set the grid name metadata\n      from the descriptor if the metadata doesn't already exist.\n    - Added guards to prevent nesting of openvdb_houdini::Interrupter::start()\n      and end() calls.\n\n\nVersion 0.92.0 - August 23 2012\n    - Added a Laplacian diffusion filter.\n    - Fixed a bug in the initialization of the sparse contour tracer\n      that caused mesh-to-volume conversion to fail in certain cases.\n    - Fixed a bug in the curvature stencil that caused mean curvature\n      filtering to produce wrong results.\n    - Increased the speed of the GridTransformer by as much as 20%\n      for fog volumes.\n    - Added optional pruning to the Resample SOP.\n    - Modified the PointSample SOP to allow it to work with ungrouped,\n      anonymous grids.\n    - Fixed a crash in the LevelSetNoise SOP.\n\nVersion 0.91.0 - August 16 2012\n    - tools::GridTransformer and tools::GridResampler now correctly\n      (but not yet efficiently) process tiles in sparse grids.\n    - Added an optional CopyPolicy argument to GridBase::copyGrid()\n      and to Grid::copy() that specifies whether and how the grid's tree\n      should be copied.\n    - Added a GridBase::newTree() method that replaces a grid's tree with\n      a new, empty tree of the correct type.\n    - Fixed a crash in Tree::setValueOff() when the new value was equal to\n      the background value.\n    - Fixed bugs in Tree::prune() that could result in output tiles with\n      incorrect active states.\n    - Added librt to the link dependencies to address build failures on\n      Ubuntu systems.\n    - Made various small changes to the Makefile and the source code\n      that should help with Mac OS X compatibility.\n    - The Composite and Resample SOPs now correctly copy the input grid's\n      metadata to the output grid.\n\nVersion 0.90.1 - August 7 2012\n    - Fixed a bug in the BBox::getCenter() method.\n    - Added missing header files to various files.\n    - io::File::NameIterator::gridName() now returns a unique name of the\n      form \"name[1]\", \"name[2]\", etc. if a file contains multiple grids with\n      the same name.\n    - Fixed a bug in the Writer SOP that caused grid names to be discarded.\n    - The Resample SOP now correctly sets the background value of the\n      output grid.\n\nVersion 0.90.0 - August 3 2012 (initial public release)\n    - Added a basic GL viewer for OpenVDB files.\n    - Greatly improved the performance of two commonly-used Tree methods,\n      evalActiveVoxelBoundingBox() and memUsage().\n    - Eliminated the GridMap class.  File I/O now uses STL containers\n      of grid pointers instead.\n    - Refactored stencil-based tools (Gradient, Laplacian, etc.) and rewrote\n      some of them for generality and better performance.  Most now behave\n      correctly for grids with nonlinear index-to-world transforms.\n    - Added a library of index-space finite difference operators.\n    - Added a \"Hermite\" grid type that compactly stores each voxel's upwind\n      normals and can be used to convert volumes to and from polygonal meshes.\n    - Added a tool (and a Houdini SOP) to scatter points randomly throughout\n      a volume.\n\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 23.80078125,
          "content": "# Copyright Contributors to the OpenVDB Project\n# SPDX-License-Identifier: Apache-2.0\n#\n#[=======================================================================[\n\n  CMake Configuration for OpenVDB\n\n  The OpenVDB CMake build system generates targets depending on the\n  enabled components. It is designed for out of source CMake generation\n  (a build location for CMake to write to will be required). For example,\n  from the root of the repository:\n\n    mkdir build\n    cd build\n    cmake ../\n\n  Depending on the components you choose to build, a number of optional\n  and required dependencies are expected. See the dependency documentation\n  for more information:\n\n    https://www.openvdb.org/documentation/doxygen/dependencies.html\n\n  And the documentation on building OpenVDB for more in depth installation\n  instructions:\n\n    https://www.openvdb.org/documentation/doxygen/build.html\n\n  This CMakeLists file provides most available options for configuring the\n  build and installation of all OpenVDB components. By default the core\n  library and the vdb_print binary are enabled.\n\n  Note that various packages have inbuilt CMake module support. See the\n  CMake documentation for more ZLib, Doxygen, OpenGL, Boost and Python\n  controls:\n\n    https://cmake.org/cmake/help/latest/manual/cmake-modules.7.html\n\n  OpenVDB's CMake supports building the various components of against a\n  prior installation of OpenVDB.\n\n#]=======================================================================]\n\n# note: cmake_minimum_required must be called before project commands to\n#  ensure policy scope is set up correctly\ncmake_minimum_required(VERSION 3.20)\n\n# CMP0091 allows for MSVC ABI targetting via CMAKE_MSVC_RUNTIME_LIBRARY\n# from CMake 3.15 and above. Must come before project().\nif(POLICY CMP0091)\n  cmake_policy(SET CMP0091 NEW)\nendif()\n\n###### Version\n\nset(OpenVDB_MAJOR_VERSION 12)\nset(OpenVDB_MINOR_VERSION 0)\nset(OpenVDB_PATCH_VERSION 1)\nset(OpenVDB_VERSION \"${OpenVDB_MAJOR_VERSION}.${OpenVDB_MINOR_VERSION}.${OpenVDB_PATCH_VERSION}\")\n\nproject(OpenVDB LANGUAGES CXX VERSION ${OpenVDB_VERSION})\n\n###### OpenVDB Build/Component Options\n\ninclude(CMakeDependentOption)\ninclude(GNUInstallDirs)\n\n# Components\noption(OPENVDB_BUILD_CORE \"Enable the core OpenVDB library. Both static and shared versions are enabled by default\" ON)\noption(OPENVDB_BUILD_BINARIES \"Enable the vdb binaries. Only vdb_print is enabled by default\" ON)\noption(OPENVDB_BUILD_PYTHON_MODULE \"Build the pyopenvdb Python module\" OFF)\noption(OPENVDB_BUILD_UNITTESTS \"Build the OpenVDB unit tests\" OFF)\noption(OPENVDB_BUILD_DOCS \"Build the OpenVDB documentation\" OFF)\noption(OPENVDB_BUILD_HOUDINI_PLUGIN \"Build the Houdini plugin\" OFF)\noption(OPENVDB_BUILD_HOUDINI_ABITESTS \"Build the Houdini ABI tests\" OFF)\noption(OPENVDB_BUILD_MAYA_PLUGIN \"Build the Maya plugin\" OFF)\noption(OPENVDB_BUILD_AX \"Build the OpenVDB AX library. Turns ON if USE_AX is ON.\" ${USE_AX})\noption(OPENVDB_BUILD_AX_UNITTESTS \"Build the OpenVDB AX unit tests\" OFF)\noption(OPENVDB_BUILD_NANOVDB \"Build the NanoVDB library. Turns ON if USE_NANOVDB is ON.\" ${USE_NANOVDB})\n\n# Global options\noption(OPENVDB_ENABLE_RPATH \"Build with RPATH information\" ON)\noption(OPENVDB_ENABLE_ASSERTS \"Build with asserts in OpenVDB code enabled\" OFF)\noption(OPENVDB_USE_DELAYED_LOADING \"Build the core OpenVDB library with delayed-loading.\" ON)\noption(OPENVDB_CXX_STRICT \"Enable or disable pre-defined compiler warnings\" OFF)\ncmake_dependent_option(OPENVDB_INSTALL_CMAKE_MODULES\n  \"Install the provided OpenVDB CMake modules when building the core library\"\n  ON \"OPENVDB_BUILD_CORE\" OFF)\noption(USE_CCACHE \"Build using Ccache if found on the path\" ON)\n# Disable this on Windows due to linker OOM issues:\n#  LNK1248: image size (XXX) exceeds maximum allowable size (FFFFFFFF)\n#    https://github.com/AcademySoftwareFoundation/openvdb/issues/1718\n#    https://github.com/AcademySoftwareFoundation/openvdb/issues/1624\ncmake_dependent_option(USE_EXPLICIT_INSTANTIATION \"Use explicit instantiation for all supported classes\nand methods against a pre-defined list of OpenVDB trees. This makes the core library larger and slower\nto compile, but speeds up the compilation of all dependent code by bypassing the expensive template\ninstantation.\" ON \"NOT WIN32\" OFF)\noption(OPENVDB_FUTURE_DEPRECATION \"Generate messages for upcoming deprecation\" ON)\noption(OPENVDB_ENABLE_UNINSTALL \"Adds a CMake uninstall target.\" ON)\noption(USE_COLORED_OUTPUT \"Always produce ANSI-colored output (GNU/Clang only).\" OFF)\n\n# Component dependency options\ncmake_dependent_option(USE_PKGCONFIG \"Use pkg-config to search for dependent libraries.\" ON \"NOT WIN32\" OFF)\noption(USE_HOUDINI [=[\nBuild the library against a Houdini installation. Turns on automatically if OPENVDB_BUILD_HOUDINI_PLUGIN is enabled.\nWhen enabled, you do not need to provide dependency locations for TBB, Blosc, Imath and OpenEXR. Boost must be\nprovided. Imath/OpenEXR can optionally be provided.]=] OFF)\noption(USE_MAYA [=[\nBuild the library against a Maya installation. Turns on automatically if OPENVDB_BUILD_MAYA_PLUGIN is enabled.\nWhen enabled, you do not need to provide dependency locations for TBB. All other dependencies must be provided.]=] OFF)\noption(USE_TBB [=[\nUse TBB in building the NanoVDB library.]=] ON)\noption(USE_BLOSC [=[\nUse blosc while building openvdb components. If OPENVDB_BUILD_CORE is OFF, CMake attempts to query the located\nopenvdb build configuration to decide on blosc support. You may set this to on to force blosc to be used if you\nknow it to be required.]=] ON)\noption(USE_ZLIB [=[\nUse zlib while building openvdb components. If OPENVDB_BUILD_CORE is OFF, CMake attempts to query the located\nopenvdb build configuration to decide on zlib support. ZLib can only be disabled if Blosc is also disabled. ]=] ON)\noption(USE_LOG4CPLUS [=[\nUse log4cplus while building openvdb components. If OPENVDB_BUILD_CORE is OFF, CMake attempts to query the\nlocated openvdb build configuration to decide on log4cplus support. You may set this to on to force log4cplus\nto be used if you know it to be required.]=] OFF)\noption(USE_EXR [=[\nUse OpenEXR while building openvdb components. If enabled, this also switches USE_IMATH_HALF to ON unless\nit too was provided and set to OFF.]=] OFF)\noption(USE_IMATH_HALF [=[\nUse the definiton of half floating point types from the Imath library. If OFF, the embedded definition provided\nby OpenVDB is used. If OPENVDB_BUILD_CORE is OFF, CMake attempts to query the located openvdb build configuration\nto select the correct half support. You may set this to on to force Imath half to be used if you know it to be\nrequired.]=] ${USE_EXR})\noption(USE_PNG \"Use PNG while building openvdb components.\" OFF)\noption(USE_AX \"Use OpenVDB AX while building openvdb components.\" ${OPENVDB_BUILD_AX})\noption(USE_NANOVDB \"Use NanoVDB while building openvdb components.\" ${OPENVDB_BUILD_NANOVDB})\n\ncmake_dependent_option(OPENVDB_DISABLE_BOOST_IMPLICIT_LINKING\n  \"Disable the implicit linking of Boost libraries on Windows\" ON \"WIN32\" OFF)\noption(USE_STATIC_DEPENDENCIES [=[\nOnly search for and use static libraries. If OFF the shared versions of requried libraries are prioritised, falling\nback to static libraries. Forcing individual static dependencies can be enabled by setting XXX_USE_STATIC_LIBS\nto ON, where XXX is the package name. On Windows this behaviour is less strict, with any located libraries assumed\nto be static. This has no effect for any packages found with Xxx_DIR (i.e. CMake CONFIG mode).]=] OFF)\noption(DISABLE_DEPENDENCY_VERSION_CHECKS [=[\nDisable minimum version checks for OpenVDB dependencies. It is strongly recommended that this remains disabled.\nConsider updating your dependencies where possible if encountering minimum requirement CMake errors.]=] OFF)\noption(DISABLE_CMAKE_SEARCH_PATHS [=[\nDisable CMakes default system search paths when locating dependencies. When enabled, CMake will fall back to\nits default system search routine if it cannot find a dependency with the provided settings. When disabled, only\npaths provided through the Xxx_ROOT, supported XXX_INCLUDEDIR/XXX_LIBRARYDIR variables or the SYSTEM_LIBRARY_PATHS\nlist will be searched.]=] OFF)\n\nset(SYSTEM_LIBRARY_PATHS \"\" CACHE STRING [=[\nA global list of library paths to additionally use into when searching for dependencies.]=])\nset(MSVC_MP_THREAD_COUNT \"\" CACHE STRING [=[\nThe number of threads to use when invoking MSVC builds with cmake --build. CMake defaults to 1. Note that\ncmake --parallel and CMAKE_BUILD_PARALLEL_LEVEL only change the number of PROJECTS that are built in parallel,\nNOT the number of TU's ]=])\noption(MSVC_COMPRESS_PDB \"Whether to attempt to compress PDB symbol data in MSVC debug builds.\" OFF)\n\nset(_CONCURRENT_MALLOC_OPTIONS None Auto Jemalloc Tbbmalloc)\nif(NOT CONCURRENT_MALLOC)\n  set(CONCURRENT_MALLOC Auto CACHE STRING\n    \"Explicitly link the OpenVDB executables against a particular concurrent malloc library.\n    Options are: None Auto Jemalloc Tbbmalloc. Although not required, it is strongly recommended\n    to use a concurrent memory allocator. Has no effect if OPENVDB_BUILD_BINARIES and\n    OPENVDB_BUILD_UNITTESTS are false. Auto is the default and implies Jemalloc, unless USE_MAYA\n    is ON or Jemalloc is unavailable, in which case Tbbmalloc is used. Note that this is not\n    linked into library builds and defers this choice to downstream applications via explicit\n    CMake targets.\" FORCE\n  )\nelseif(NOT ${CONCURRENT_MALLOC} IN_LIST _CONCURRENT_MALLOC_OPTIONS)\n  message(WARNING \"Unrecognized value for CONCURRENT_MALLOC, using Auto instead.\")\n  set(CONCURRENT_MALLOC Auto CACHE STRING FORCE)\nendif()\n\nset(_OPENVDB_SIMD_OPTIONS None SSE42 AVX)\nif(NOT OPENVDB_SIMD)\n  set(OPENVDB_SIMD None CACHE STRING\n    \"Choose whether to enable SIMD compiler flags or not, options are: None SSE42 AVX.\n    Although not required, it is strongly recommended to enable SIMD. AVX implies SSE42.\n    None is the default.\" FORCE\n  )\nelseif(NOT ${OPENVDB_SIMD} IN_LIST _OPENVDB_SIMD_OPTIONS)\n  message(WARNING \"Unrecognized or unsupported value for OPENVDB_SIMD, \"\n    \"using None instead.\")\n  set(OPENVDB_SIMD None CACHE STRING FORCE)\nendif()\n\nif(USE_BLOSC AND NOT USE_ZLIB)\n  message(WARNING \"ZLib can only be disabled if Blosc is also disabled. Enabling ZLib.\")\nendif()\n\nif(USE_NANOVDB)\n  if(OPENVDB_BUILD_CORE AND NOT OPENVDB_BUILD_NANOVDB)\n    message(FATAL_ERROR \"Invalid CMake build configuration:\n      OPENVDB_BUILD_CORE:    [ON]\n      OPENVDB_BUILD_NANOVDB: [OFF]\n      USE_NANOVDB:           [ON]\n    If you are rebuilding the core library and using sub components, building\n    these sub components must also be enabled (i.e. -DOPENVDB_BUILD_NANOVDB=ON).\")\n  endif()\nendif()\n\nif(USE_AX)\n  if(OPENVDB_BUILD_CORE AND NOT OPENVDB_BUILD_AX)\n    message(FATAL_ERROR \"Invalid CMake build configuration:\n      OPENVDB_BUILD_CORE: [ON]\n      OPENVDB_BUILD_AX:   [OFF]\n      USE_AX:             [ON]\n    If you are rebuilding the core library and using sub components, building\n    these sub components must also be enabled (i.e. -DOPENVDB_BUILD_AX=ON).\")\n  endif()\nendif()\n\nif(OPENVDB_BUILD_HOUDINI_PLUGIN OR OPENVDB_BUILD_HOUDINI_ABITESTS)\n  set(USE_HOUDINI ON)\nendif()\n\nif(OPENVDB_BUILD_MAYA_PLUGIN)\n  set(USE_MAYA ON)\nendif()\n\nif(USE_MAYA AND USE_HOUDINI)\n  # @todo technically this is possible so long as library versions match\n  # exactly but it's difficult to validate and dangerous\n  message(FATAL_ERROR \"Cannot build both Houdini and Maya plugins against \"\n    \"the same core dependencies. Plugins must be compiled separately to \"\n    \"ensure the required DCC dependencies are met.\")\nendif()\n\n###### Deprecated options\n\nif(OPENVDB_CODE_COVERAGE)\n  message(FATAL_ERROR \"The OPENVDB_CODE_COVERAGE option  has been removed. Choose instead the unique\"\n      \"build type -DCMAKE_BUILD_TYPE=coverage\")\nendif()\nif(OPENVDB_BUILD_HOUDINI_SOPS)\n  message(FATAL_ERROR \"The OPENVDB_BUILD_HOUDINI_SOPS option has been removed. Use OPENVDB_BUILD_HOUDINI_PLUGIN.\")\nendif()\nif(DEFINED USE_SYSTEM_LIBRARY_PATHS)\n  message(FATAL_ERROR \"The USE_SYSTEM_LIBRARY_PATHS option has been removed. Use DISABLE_CMAKE_SEARCH_PATHS.\")\nendif()\n\n# Various root level CMake options which are marked as advanced\n\nmark_as_advanced(\n  CONCURRENT_MALLOC\n  DISABLE_CMAKE_SEARCH_PATHS\n  DISABLE_DEPENDENCY_VERSION_CHECKS\n  OPENVDB_BUILD_HOUDINI_ABITESTS\n  OPENVDB_CXX_STRICT\n  OPENVDB_ENABLE_RPATH\n  OPENVDB_USE_DELAYED_LOADING\n  OPENVDB_FUTURE_DEPRECATION\n  OPENVDB_SIMD\n  SYSTEM_LIBRARY_PATHS\n  USE_CCACHE\n  USE_COLORED_OUTPUT\n  USE_HOUDINI\n  USE_IMATH_HALF\n  USE_LOG4CPLUS\n  USE_MAYA\n  MSVC_COMPRESS_PDB\n)\n\n#########################################################################\n\n# Configure MINIMUM and FUTURE_MINIMUM version variables\n\ninclude(cmake/config/OpenVDBVersions.cmake)\n\nforeach(DEPRECATED_ABI ${OPENVDB_DEPRECATED_ABI_LIST})\n  option(OPENVDB_USE_DEPRECATED_ABI_${DEPRECATED_ABI} \"Bypass minimum ABI requirement checks\" OFF)\n  mark_as_advanced(OPENVDB_USE_DEPRECATED_ABI_${DEPRECATED_ABI})\nendforeach()\noption(OPENVDB_USE_FUTURE_ABI_${FUTURE_OPENVDB_ABI_VERSION} \"Bypass future ABI check\" OFF)\nmark_as_advanced(OPENVDB_USE_FUTURE_ABI_${FUTURE_OPENVDB_ABI_VERSION})\n\n#########################################################################\n\nenable_testing()\n\n# Add our cmake modules\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR}/cmake\")\n\n# Add cmake modules to installation command\n\nif(SKBUILD)\n  set(OPENVDB_INSTALL_BINDIR openvdb/${CMAKE_INSTALL_BINDIR})\n  set(OPENVDB_INSTALL_LIBDIR openvdb/${CMAKE_INSTALL_LIBDIR})\n  set(OPENVDB_INSTALL_INCLUDEDIR openvdb/${CMAKE_INSTALL_INCLUDEDIR})\n\n  if(OPENVDB_BUILD_NANOVDB)\n    set(NANOVDB_INSTALL_BINDIR nanovdb/${CMAKE_INSTALL_BINDIR})\n    set(NANOVDB_INSTALL_LIBDIR nanovdb/${CMAKE_INSTALL_LIBDIR})\n    set(NANOVDB_INSTALL_INCLUDEDIR nanovdb/${CMAKE_INSTALL_INCLUDEDIR})\n    set(NANOVDB_INSTALL_DOCDIR nanovdb/${CMAKE_INSTALL_DOCDIR})\n  endif()\nelse()\n  set(OPENVDB_INSTALL_BINDIR ${CMAKE_INSTALL_BINDIR})\n  set(OPENVDB_INSTALL_LIBDIR ${CMAKE_INSTALL_LIBDIR})\n  set(OPENVDB_INSTALL_INCLUDEDIR ${CMAKE_INSTALL_INCLUDEDIR})\n\n  if(OPENVDB_BUILD_NANOVDB)\n    set(NANOVDB_INSTALL_BINDIR ${CMAKE_INSTALL_BINDIR})\n    set(NANOVDB_INSTALL_LIBDIR ${CMAKE_INSTALL_LIBDIR})\n    set(NANOVDB_INSTALL_INCLUDEDIR ${CMAKE_INSTALL_INCLUDEDIR})\n    set(NANOVDB_INSTALL_DOCDIR ${CMAKE_INSTALL_DOCDIR})\n  endif()\nendif()\n\nif(OPENVDB_INSTALL_CMAKE_MODULES)\n  set(OPENVDB_CMAKE_MODULES\n    cmake/FindBlosc.cmake\n    cmake/FindJemalloc.cmake\n    cmake/FindLog4cplus.cmake\n    cmake/FindOpenEXR.cmake\n    cmake/FindOpenVDB.cmake\n    cmake/FindTBB.cmake\n    cmake/OpenVDBGLFW3Setup.cmake\n    cmake/OpenVDBHoudiniSetup.cmake\n    cmake/OpenVDBMayaSetup.cmake\n    cmake/OpenVDBUtils.cmake\n  )\n  install(FILES ${OPENVDB_CMAKE_MODULES} DESTINATION ${OPENVDB_INSTALL_LIBDIR}/cmake/OpenVDB)\nendif()\n\n# Configure component dependencies by loading the Houdini/Maya setup\n# scripts. These also find the Houdini/Maya installations\n\nif(USE_HOUDINI)\n  include(OpenVDBHoudiniSetup)\nendif()\n\nif(USE_MAYA)\n  include(OpenVDBMayaSetup)\nendif()\n\nif(OPENVDB_BUILD_DOCS)\n  add_subdirectory(doc)\nendif()\n\nif(NOT OPENVDB_BUILD_AX AND OPENVDB_BUILD_AX_GRAMMAR)\n  # only re-generate the AX grammar\n  set(OPENVDB_AX_SHARED OFF CACHE BOOL \"\" FORCE)\n  set(OPENVDB_AX_STATIC OFF CACHE BOOL \"\" FORCE)\n  add_subdirectory(openvdb_ax/openvdb_ax)\nendif()\n\n# Early exit if there's nothing to build\n\nif(NOT (\n    OPENVDB_BUILD_CORE OR\n    OPENVDB_BUILD_BINARIES OR\n    OPENVDB_BUILD_AX OR\n    OPENVDB_BUILD_AX_UNITTESTS OR\n    OPENVDB_BUILD_PYTHON_MODULE OR\n    OPENVDB_BUILD_UNITTESTS OR\n    OPENVDB_BUILD_HOUDINI_PLUGIN OR\n    OPENVDB_BUILD_HOUDINI_ABITESTS OR\n    OPENVDB_BUILD_MAYA_PLUGIN OR\n    OPENVDB_BUILD_NANOVDB)\n  )\n  return()\nendif()\n\n#########################################################################\n\n# ccache setup\n\nif(USE_CCACHE)\n  find_program(CCACHE_PATH ccache)\n  if(CCACHE_PATH)\n    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${CCACHE_PATH})\n    message(STATUS \"Using ccache: ${CCACHE_PATH}\")\n  endif()\nendif()\n\n#########################################################################\n\n# Configure general CMake and CXX settings\n\ninclude(cmake/config/OpenVDBCXX.cmake)\n\n#########################################################################\n\n# Configure malloc library. Use Jemalloc if available, tbbmalloc otherwise\n\nif(CONCURRENT_MALLOC STREQUAL \"Auto\")\n  find_package(Jemalloc QUIET)\n  if(NOT TARGET Jemalloc::jemalloc)\n    message(WARNING \"Unable to find Jemalloc, attempting to fall back to TBB malloc.\n      It is recommended to use Jemalloc for optimum performance.\")\n    set(CONCURRENT_MALLOC \"Tbbmalloc\")\n  else()\n    set(CONCURRENT_MALLOC \"Jemalloc\")\n  endif()\nendif()\n\n# Configure SIMD. AVX implies SSE 4.2.\n\nif(OPENVDB_SIMD STREQUAL \"AVX\")\n  if (CMAKE_SYSTEM_PROCESSOR MATCHES \"(x86)|(X86)|(amd64)|(AMD64)\")\n    add_compile_options(\"$<$<COMPILE_LANGUAGE:CXX>:-mavx>\")\n    add_compile_options(\"$<$<COMPILE_LANGUAGE:CXX>:-msse4.2>\")\n  endif()\n  add_compile_definitions(\"$<$<COMPILE_LANGUAGE:CXX>:OPENVDB_USE_AVX>\")\n  add_compile_definitions(\"$<$<COMPILE_LANGUAGE:CXX>:OPENVDB_USE_SSE42>\")\nelseif(OPENVDB_SIMD STREQUAL \"SSE42\")\n  if (CMAKE_SYSTEM_PROCESSOR MATCHES \"(x86)|(X86)|(amd64)|(AMD64)\")\n    add_compile_options(\"$<$<COMPILE_LANGUAGE:CXX>:-msse4.2>\")\n  endif()\n  add_compile_definitions(\"$<$<COMPILE_LANGUAGE:CXX>:OPENVDB_USE_SSE42>\")\nendif()\n\n#########################################################################\n\n# Configure our cmake modules to only search for static libraries\n\nif(USE_STATIC_DEPENDENCIES)\n  set(BLOSC_USE_STATIC_LIBS ON)\n  set(OPENEXR_USE_STATIC_LIBS ON)\n  set(TBB_USE_STATIC_LIBS ON)\n  set(LOG4CPLUS_USE_STATIC_LIBS ON)\n  set(JEMALLOC_USE_STATIC_LIBS ON)\n  set(GTEST_USE_STATIC_LIBS ON)\n  set(Boost_USE_STATIC_LIBS ON)\n  # @todo  glfw needs custom support.\n  # set(GLFW_USE_STATIC_LIBS ON)\nendif()\n\n# Configure OpenVDB Library and ABI versions\n\nset(NEEDS_OPENVDB OFF)\n\nif(OPENVDB_BUILD_AX OR\n   OPENVDB_BUILD_BINARIES OR\n   OPENVDB_BUILD_UNITTESTS OR\n   OPENVDB_BUILD_HOUDINI_PLUGIN OR\n   OPENVDB_BUILD_MAYA_PLUGIN OR\n   OPENVDB_BUILD_PYTHON_MODULE OR\n   OPENVDB_BUILD_HOUDINI_ABITESTS)\n  set(NEEDS_OPENVDB ON)\nendif()\n\nif(NOT OPENVDB_BUILD_CORE AND NEEDS_OPENVDB)\n  # Find VDB installation and determine lib/abi versions. This resets the\n  # version and ABI numbers\n  find_package(OpenVDB REQUIRED)\n  # Check ABI version was found and explicitly error if attempting to build against\n  # an incompatible Houdini version\n  if(OpenVDB_ABI AND OPENVDB_HOUDINI_ABI)\n    if(NOT ${OpenVDB_ABI} EQUAL ${OPENVDB_HOUDINI_ABI})\n      message(FATAL_ERROR \"Located OpenVDB installation is not ABI compatible with \"\n        \"Houdini Version ${Houdini_VERSION}. Requires ABI ${OPENVDB_HOUDINI_ABI}, found \"\n        \"ABI ${OpenVDB_ABI}.\")\n    endif()\n  endif()\nendif()\n\nmessage(STATUS \"Configuring for OpenVDB Version ${OpenVDB_VERSION}\")\n\n# Locate openvdb_ax if necessary\n\nif(NOT OPENVDB_BUILD_AX AND\n    (OPENVDB_BUILD_AX_UNITTESTS OR\n    USE_AX))\n  find_package(OpenVDB REQUIRED COMPONENTS openvdb_ax)\nendif()\n\n# Locate nanovdb if necessary\n\nif(NOT OPENVDB_BUILD_NANOVDB AND\n   USE_NANOVDB)\n  find_package(OpenVDB REQUIRED COMPONENTS nanovdb)\nendif()\n\n# Locate Python and nanobind if necessary\nif(OPENVDB_BUILD_PYTHON_MODULE OR (OPENVDB_BUILD_NANOVDB AND NANOVDB_BUILD_PYTHON_MODULE))\n\n  # Call find_package(Python ...)\n  find_package(Python ${MINIMUM_PYTHON_VERSION} REQUIRED COMPONENTS Development Interpreter)\n  find_package(nanobind ${MINIMUM_NANOBIND_VERSION} REQUIRED)\n\n  if(OPENVDB_FUTURE_DEPRECATION AND FUTURE_MINIMUM_PYTHON_VERSION)\n    if(Python_VERSION VERSION_LESS ${FUTURE_MINIMUM_PYTHON_VERSION})\n      message(DEPRECATION \"Support for Python versions < ${FUTURE_MINIMUM_GLFW_VERSION} \"\n        \"is deprecated and will be removed.\")\n    endif()\n  endif()\n\n  if(NOT DEFINED VDB_PYTHON_INSTALL_DIRECTORY)\n    if(DEFINED Python_SITELIB)\n      get_filename_component(Python_PACKAGES_DIR ${Python_SITELIB} NAME)\n    else()\n      set(Python_PACKAGES_DIR \"site-packages\")\n    endif()\n    set(VDB_PYTHON_INSTALL_DIRECTORY\n      ${CMAKE_INSTALL_LIBDIR}/python${Python_VERSION_MAJOR}.${Python_VERSION_MINOR}/${Python_PACKAGES_DIR}\n      CACHE STRING \"The directory to install the openvdb and nanovdb Python modules.\"\n    )\n  endif()\nendif()\n\n\n# Validate the OpenVDB ABI Version. If OpenVDB_ABI is not set, we're either building\n# the core library OR the ABI hasn't been deduced from a VDB installation. Use the\n# value from OPENVDB_ABI_VERSION_NUMBER, falling back to the lib major version number\n\nif(NOT OpenVDB_ABI)\n  if(OPENVDB_ABI_VERSION_NUMBER)\n    set(OpenVDB_ABI ${OPENVDB_ABI_VERSION_NUMBER})\n  else()\n    set(OpenVDB_ABI ${OpenVDB_MAJOR_VERSION})\n  endif()\nendif()\n\n# From the deduced ABI, check against the required ABI for Houdini (if set).\n# Forcefully set the ABI to the required value if necessary - do this after to\n# explicitly warn the user if their chosen value is different.\n\nif(OPENVDB_HOUDINI_ABI AND (NOT \"${OpenVDB_ABI}\" EQUAL \"${OPENVDB_HOUDINI_ABI}\"))\n  message(WARNING \"CMake will explicitly set the value of OPENVDB_ABI_VERSION_NUMBER to \"\n    \"${OPENVDB_HOUDINI_ABI} to match the ABI of the target Houdini Version.\")\n  set(OpenVDB_ABI ${OPENVDB_HOUDINI_ABI})\nendif()\n\n# Validate ABI value if outside supported range\n\nif(OpenVDB_ABI LESS MINIMUM_OPENVDB_ABI_VERSION)\n  message(FATAL_ERROR \"OpenVDB ABI versions earlier than ${MINIMUM_OPENVDB_ABI_VERSION} are \"\n    \"no longer supported.\")\nendif()\n\nif(OpenVDB_ABI IN_LIST OPENVDB_DEPRECATED_ABI_LIST)\n  if(NOT OPENVDB_USE_DEPRECATED_ABI_${OpenVDB_ABI})\n    message(FATAL_ERROR \"OpenVDB ABI versions earlier than ${OpenVDB_MAJOR_VERSION} \"\n      \"are deprecated. Set CMake option OPENVDB_USE_DEPRECATED_ABI_${OpenVDB_ABI} to ON to \"\n      \"suppress this error.\")\n  endif()\n\n  message(DEPRECATION \"OpenVDB ABI versions earlier than ${OpenVDB_MAJOR_VERSION} \"\n    \"are deprecated and will soon be removed.\")\n  # global target definition\n  add_definitions(-DOPENVDB_USE_DEPRECATED_ABI_${OpenVDB_ABI})\nendif()\n\nif(OpenVDB_ABI EQUAL FUTURE_OPENVDB_ABI_VERSION)\n  if(NOT OPENVDB_USE_FUTURE_ABI_${OpenVDB_ABI})\n    message(FATAL_ERROR \"OpenVDB ABI version ${OpenVDB_ABI} contains changes to ABI that are still \"\n      \"in active development and have not been finalized. Set CMake option \"\n      \"OPENVDB_USE_FUTURE_ABI_${OpenVDB_ABI} to ON to suppress this error.\")\n  endif()\n\n  message(WARNING \"OpenVDB ABI version ${OpenVDB_ABI} contains changes to ABI that are still \"\n    \"in active development and have not been finalized.\")\n  # global target definition\n  add_definitions(-DOPENVDB_USE_FUTURE_ABI_${OpenVDB_ABI})\nendif()\n\nmessage(STATUS \"Configuring for OpenVDB ABI Version ${OpenVDB_ABI}\")\n\n# Always force set as we may need to change it if it's incompatible with Houdini\nset(OPENVDB_ABI_VERSION_NUMBER ${OpenVDB_ABI} CACHE STRING [=[\nBuild for compatibility with version N of the OpenVDB Grid ABI, where N is 6, 7, 8 etc. (some newer features\nwill be disabled). If OPENVDB_BUILD_CORE is OFF, CMake attempts to query the installed vdb_print binary to\ndetermine the ABI number. You may set this to force a given ABI number.]=] FORCE)\n\n##########################################################################\n\nif(OPENVDB_BUILD_CORE)\n  add_subdirectory(openvdb/openvdb)\nendif()\n\nif(OPENVDB_BUILD_AX)\n  add_subdirectory(openvdb_ax/openvdb_ax)\nendif()\n\nif(OPENVDB_BUILD_PYTHON_MODULE)\n  add_subdirectory(openvdb/openvdb/python)\nendif()\n\nif(OPENVDB_BUILD_BINARIES)\n  add_subdirectory(openvdb_cmd)\nendif()\n\nif(OPENVDB_BUILD_UNITTESTS)\n  add_subdirectory(openvdb/openvdb/unittest)\nendif()\n\n# Tests the vdb_ax binary so needs to come after openvdb_cmd\nif(OPENVDB_BUILD_AX_UNITTESTS)\n  add_subdirectory(openvdb_ax/openvdb_ax/test)\nendif()\n\nif(OPENVDB_BUILD_HOUDINI_PLUGIN)\n  add_subdirectory(openvdb_houdini/openvdb_houdini)\nendif()\n\nif(OPENVDB_BUILD_HOUDINI_ABITESTS)\n  add_subdirectory(openvdb_houdini/openvdb_houdini/abitest)\nendif()\n\nif(OPENVDB_BUILD_MAYA_PLUGIN)\n  add_subdirectory(openvdb_maya/openvdb_maya)\nendif()\n\nif(OPENVDB_BUILD_NANOVDB)\n  add_subdirectory(nanovdb/nanovdb)\nendif()\n\n##########################################################################\n\nif(OPENVDB_ENABLE_UNINSTALL)\n  add_custom_target(uninstall\n    COMMAND ${CMAKE_COMMAND} -P ${PROJECT_SOURCE_DIR}/cmake/Uninstall.cmake\n  )\nendif()\n"
        },
        {
          "name": "CODEOWNERS",
          "type": "blob",
          "size": 2.5224609375,
          "content": "# See https://help.github.com/articles/about-codeowners/\n# for more info about CODEOWNERS file\n\n# It uses the same pattern rule for gitignore file\n# https://git-scm.com/docs/gitignore#_pattern_format\n\n# Admin/General\n/.github/                                                   @kmuseth @apradhana @jmlait @idclip @danrbailey @richhones\n/ci/                                                        @kmuseth @apradhana @jmlait @idclip @danrbailey @richhones\n/cmake/                                                     @kmuseth @apradhana @jmlait @idclip @danrbailey @richhones\n/doc/                                                       @kmuseth @apradhana @jmlait @idclip @danrbailey @richhones\n/pendingchanges/                                            @kmuseth @apradhana @jmlait @idclip @danrbailey @richhones\n/tsc/                                                       @kmuseth @apradhana @jmlait @idclip @danrbailey @richhones\nCODEOWNERS                                                  @kmuseth @apradhana @jmlait @idclip @danrbailey @richhones\nLICENSE                                                     @kmuseth @apradhana @jmlait @idclip @danrbailey @richhones\nCHANGES                                                     @kmuseth @apradhana @jmlait @idclip @danrbailey @richhones\n*.md                                                        @kmuseth @apradhana @jmlait @idclip @danrbailey @richhones\n\n# Core OpenVDB Library\n/openvdb/                                                   @kmuseth\n/openvdb/openvdb/points/                                    @danrbailey @idclip\n\n# OpenVDB AX\n/openvdb_ax/                                                @idclip @richhones\n\n# NanoVDB\n/nanovdb/                                                   @kmuseth\n\n# OpenVDB Houdini - Default\n/openvdb_houdini/                                           @kmuseth\n\n# OpenVDB Houdini - VDB Primitive and SideFX Utils\n/openvdb_houdini/openvdb_houdini/GEO_PrimVDB.*              @jmlait\n/openvdb_houdini/openvdb_houdini/GU_PrimVDB.*               @jmlait\n/openvdb_houdini/openvdb_houdini/GEO_VDBTranslator.*        @jmlait\n/openvdb_houdini/openvdb_houdini/GT_GEOPrimCollectVDB.*     @jmlait\n/openvdb_houdini/openvdb_houdini/SOP_VDBVerbUtils.*         @jmlait\n/openvdb_houdini/openvdb_houdini/UT_VDBUtils.*              @jmlait\n\n# OpenVDB Houdini - VDB Points\n/openvdb_houdini/openvdb_houdini/PointUtils.*               @danrbailey @idclip\n/openvdb_houdini/openvdb_houdini/*_OpenVDB_Points_*         @danrbailey @idclip\n/openvdb_houdini/openvdb_houdini/GR_PrimVDBPoints.*         @danrbailey @idclip\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.1669921875,
          "content": "All participants agree to abide by LF Projects Code of Conduct (as defined in the [charter](tsc/charter.md)) available at https://lfprojects.org/policies/code-of-conduct/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 6.0703125,
          "content": "# Overview\n\nThis project aims to be governed in a transparent, accessible way for the benefit of the community. All participation in this project is open and not bound to corporate affiliation. Participants are all bound to the [Code of Conduct](CODE_OF_CONDUCT.md).\n\n# Project roles\n\n## Contributor\n\nThe contributor role is the starting role for anyone participating in the project and wishing to contribute code.\n\n### Process for becoming a contributor\n\n* Review the [coding standards](https://www.openvdb.org/documentation/doxygen/codingStyle.html) to ensure your contribution is in line with the project's coding and styling guidelines.\n* Have a signed CLA on file ( see [below](#contributor-license-agreements) )\n* Submit your code as a PR with the appropriate [DCO sign-off](#commit-sign-off).\n* Have your submission approved by the [committer(s)](#committer) and merged into the codebase.\n\n### Legal Requirements\n\nOpenVDB is a project of the Academy Software Foundation and follows the\nopen source software best practice policies of the Linux Foundation.\n\n#### License\n\nOpenVDB is licensed under the [Apache License, version 2.0](LICENSE.md)\nlicense. Contributions to OpenVDB should abide by that standard\nlicense.\n\n#### Contributor License Agreements\n\nDevelopers who wish to contribute code to be considered for inclusion\nin OpenVDB must first complete a **Contributor License Agreement**.\n\nOpenVDB uses [EasyCLA](https://lfcla.com/) for managing CLAs, which automatically\nchecks to ensure CLAs are signed by a contributor before a commit\ncan be merged.\n\n* If you are an individual writing the code on your own time and\n  you're SURE you are the sole owner of any intellectual property you\n  contribute, you can [sign the CLA as an individual contributor](https://docs.linuxfoundation.org/lfx/easycla/contributors/individual-contributor).\n\n* If you are writing the code as part of your job, or if there is any\n  possibility that your employers might think they own any\n  intellectual property you create, then you should use the [Corporate\n  Contributor Licence\n  Agreement](https://docs.linuxfoundation.org/lfx/easycla/contributors/corporate-contributor).\n\nThe OpenVDB CLAs are the standard forms used by Linux Foundation\nprojects and [recommended by the ASWF TAC](https://github.com/AcademySoftwareFoundation/tac/blob/master/process/contributing.md#contributor-license-agreement-cla). You can review the text of the CLAs in the [TSC directory](tsc/).\n\n#### Commit Sign-Off\n\nEvery commit must be signed off.  That is, every commit log message\nmust include a “`Signed-off-by`” line (generated, for example, with\n“`git commit --signoff`”), indicating that the committer wrote the\ncode and has the right to release it under the\n[Apache License, version 2.0](LICENSE.md)\nlicense. See the [TAC documentation on contribution sign off](https://github.com/AcademySoftwareFoundation/tac/blob/master/process/contributing.md#contribution-sign-off) for more information on this requirement.\n\n## Maintainer\n\nThe maintainer role is the equivalent of the \"Committer\" role in the charter.\n\nThis role enables the participant to commit code directly to the repository, but also comes with the obligation to be a responsible leader in the community.\n\n### Process for becoming a maintainer\n\n* Show your experience with the codebase through contributions and engagement on the community channels.\n* Request to become a maintainer.\n* Have the majority of maintainers approve you becoming a maintainer.\n* Your name and email is added to the MAINTAINERS.md file for the project.\n\n### Maintainer responsibilities\n\n* Monitor email aliases.\n* Monitor Slack (delayed response is perfectly acceptable).\n* Triage GitHub issues and perform pull request reviews for other committers and the community.\n* Make sure that ongoing PRs are moving forward at the right pace or close them.\n* Remain an active contributor to the project in general and the code base in particular.\n\n### When does a maintainer lose maintainer status?\n\nIf a maintainer is no longer interested or cannot perform the maintainer duties listed above, they\nshould volunteer to be moved to emeritus status. In extreme cases this can also occur by a vote of\nthe maintainers per the voting process below.\n\n## Technical Steering Committee (TSC) member\n\nThe Technical Steering Committee (TSC) oversees the overall technical direction of OpenVDB, as defined in the [charter](charter.md).\n\nTSC voting members consist of maintainers that have been nominated by the TSC, with a supermajority of voting members required to have a maintainer elected to be a TSC voting member. TSC voting members term and succession is defined in the [charter](charter.md).\n\nAll meetings of the TSC are open to participation by any member of the OpenVDB community. Meeting times are listed in the [ASWF technical community calendar](https://lists.aswf.io/g/tac/calendar).\n\n## Current TSC members\n\n* Ken Museth (Chair), Nvidia\n* Andre Pradhana, Nvidia\n* Jeff Lait, SideFX\n* Nick Avramoussis, WETA FX\n* Dan Bailey, ILM\n* Richard Jones, ILM\n* Gregory Hurst, United Therapeutics\n\n# Release Process\n\nProject releases will occur on a scheduled basis as agreed to by the TSC.\n\n# Conflict resolution and voting\n\nIn general, we prefer that technical issues and committer status/TSC membership are amicably worked out\nbetween the persons involved. If a dispute cannot be decided independently, the TSC can be\ncalled in to decide an issue. If the TSC themselves cannot decide an issue, the issue will\nbe resolved by voting. The voting process is a simple majority in which each TSC receives one vote.\n\n# Communication\n\nThis project, just like all of open source, is a global community. In addition to the [Code of Conduct](CODE_OF_CONDUCT.md), this project will:\n\n* Keep all communication on open channels ( mailing list, forums, chat ).\n* Be respectful of time and language differences between community members ( such as scheduling meetings, email/issue responsiveness, etc ).\n* Ensure tools are able to be used by community members regardless of their region.\n\nIf you have concerns about communication challenges for this project, please contact the [TSC](mailto:openvdb-tsc-private@lists.aswf.io).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 9.9345703125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "MAINTAINERS.md",
          "type": "blob",
          "size": 0.517578125,
          "content": "<!-- SPDX-License-Identifier: CC-BY-4.0 -->\n<!-- Copyright Contributors to the OpenVDB project. -->\n\n# OpenVDB Committers\n\nThe current OpenVDB maintainers are:\n\n\n| Name             | Email |\n| ---------------- | -----------------\n| Jeff Lait        | jlait@sidefx.com\n| Dan Bailey       | danbailey@ilm.com\n| Nick Avramoussis | navramoussis@wetafx.co.nz\n| Ken Museth       | ken.museth@gmail.com\n| Andre Pradhana   | andre.pradhana@gmail.com\n| Richard Jones    | richardj@ilm.com\n| Gregory Hurst    | tbd\n| Jonathan Swartz  | tbd\n"
        },
        {
          "name": "RE-LICENSE_NOTE.txt",
          "type": "blob",
          "size": 0.8046875,
          "content": "The following copyright holders agree that all of their contributions\noriginally submitted to this project under the Mozilla Public License\nVersion 2.0, are hereby relicensed to the Apache License, Version 2.0,\nand are submitted pursuant to the Developer Certificate of Origin, version 1.1:\n\nKen Museth\nMehdi Chinoune\nDreamWorks Animation\nSide Effects Software Inc.\nBlender Foundation\nNVIDIA Corporation\nUnited Therapeutics Corporation\nDigital Domain 3.0, Inc.\nDouble Negative\nUbisoft Entertainment SA\nAdobe Inc.\nMathieu Malaterre\nBrecht Sanders\nIgnacio Vizzo\nBen FrantzDale\nSebastian Gaida\nAlessio Quaglino\nBenedikt Mersch\nDavid Aguilar\nBrian Sharpe\nKartik Shrivastava\nMichael Lackner\nLucas Baraya\nKuba Roth\nTom Cnops\nWalt Disney Pictures (Walt Disney Animation Studios)\nThe Linux Foundation\nIndustrial Light & Magic (ILM)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.8193359375,
          "content": "![OpenVDB](doc/img/banner.png)\n\n| OpenVDB |   AX   |  Nano  | Houdini | License | CII |\n| :----:  | :----: | :----: |  :----: | :-----: | :-: |\n| [![core](https://github.com/AcademySoftwareFoundation/openvdb/actions/workflows/build.yml/badge.svg)](https://github.com/AcademySoftwareFoundation/openvdb/actions/workflows/build.yml) | [![ax](https://github.com/AcademySoftwareFoundation/openvdb/actions/workflows/ax.yml/badge.svg)](https://github.com/AcademySoftwareFoundation/openvdb/actions/workflows/ax.yml) | [![nano](https://github.com/AcademySoftwareFoundation/openvdb/actions/workflows/nanovdb.yml/badge.svg)](https://github.com/AcademySoftwareFoundation/openvdb/actions/workflows/nanovdb.yml) | [![hou](https://github.com/AcademySoftwareFoundation/openvdb/actions/workflows/houdini.yml/badge.svg)](https://github.com/AcademySoftwareFoundation/openvdb/actions/workflows/houdini.yml) | [![License](https://img.shields.io/github/license/AcademySoftwareFoundation/openvdb)](LICENSE) | [![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/2774/badge)](https://bestpractices.coreinfrastructure.org/projects/2774) |\n\n-------------------------------------------------------------------------------\n\n[Website](https://www.openvdb.org) |\n[Discussion Forum](https://github.com/AcademySoftwareFoundation/openvdb/discussions) |\n[Documentation](https://www.openvdb.org/documentation/doxygen) |\n[Releases](https://github.com/AcademySoftwareFoundation/openvdb/releases) |\n[License](https://www.apache.org/licenses/LICENSE-2.0) |\n[Slack](https://slack.aswf.io/)\n\nOpenVDB is an open source C++ library comprising a novel hierarchical data\nstructure and a large suite of tools for the efficient storage and manipulation\nof sparse volumetric data discretized on three-dimensional grids. It was\ndeveloped by DreamWorks Animation for use in volumetric applications typically\nencountered in feature film production.\n\n### Development Repository\n\nThis GitHub repository hosts the trunk of the OpenVDB development. This implies\nthat it is the newest public version with the latest features and bug fixes.\nHowever, it also means that it has not undergone a lot of testing and is\ngenerally less stable than the [production releases](https://github.com/AcademySoftwareFoundation/openvdb/releases).\n\n### License\n\nOpenVDB is released under the [Apache License, Version 2.0](https://www.apache.org/licenses/LICENSE-2.0),\nwhich is a free, open source software license developed and maintained by the\nApache Software Foundation.\n\nThe trademarks of any contributor to this project may not be used in\nassociation with the project without the contributor's express permission.\n\nNOTE: OpenVDB has completed re-licensing from [Mozilla Public License Version 2.0](https://www.mozilla.org/MPL/2.0/) to [Apache License, Version 2.0](https://www.apache.org/licenses/LICENSE-2.0). Please see the file RE-LICENSE_NOTE.txt for more details.\n\n### Contributing\n\nOpenVDB welcomes contributions to the OpenVDB project. Please refer to the\n[contribution guidelines](CONTRIBUTING.md) for details on how to make a\ncontribution.\n\n-------------------------------------------------------------------------------\n\n### Developer Quick Start\n\nThe following provides basic installation examples for the core OpenVDB library.\nOther components, such as the python module, OpenVDB AX, NanoVDB and various\nexecutables, may require additional dependencies. See the\n[build documentation](https://www.openvdb.org/documentation/doxygen/build.html)\nfor help with installations.\n\n##### Linux/MacOS\n\n```bash\n# Linux\n# @note If your distribution does not have required versions, consider using\n#   apt pinning. See the dependency documentation for more details.\napt-get install -y libboost-iostreams-dev\napt-get install -y libtbb-dev\napt-get install -y libblosc-dev\n\n# MacOS\n# @note We are using homebrew in this example to install requried dependencies\n#  https://brew.sh/\nbrew install boost\nbrew install tbb\nbrew install c-blosc\n```\n\n```bash\ngit clone git@github.com:AcademySoftwareFoundation/openvdb.git\ncd openvdb\nmkdir build\ncd build\ncmake ..\nmake -j4 && make install\n```\n\n##### Windows\n\nNote that the following commands have only been tested for 64bit systems/libraries.\nIt is recommended to set the `VCPKG_DEFAULT_TRIPLET` environment variable to\n`x64-windows` to use 64-bit libraries by default. You will also require\n[Visual Studio](https://visualstudio.microsoft.com/downloads/) (for the MSVC C++\nruntime and compiler toolchains), [CMake](https://cmake.org/download/) and optionally\n[vcpkg](https://github.com/microsoft/vcpkg) for the installation of OpenVDB's\ndependencies.\n\n```bash\nvcpkg install zlib:x64-windows\nvcpkg install blosc:x64-windows\nvcpkg install tbb:x64-windows\nvcpkg install boost-iostreams:x64-windows\nvcpkg install boost-any:x64-windows\nvcpkg install boost-algorithm:x64-windows\nvcpkg install boost-interprocess:x64-windows\n```\n\n```bash\ngit clone git@github.com:AcademySoftwareFoundation/openvdb.git\ncd openvdb\nmkdir build\ncd build\ncmake -DCMAKE_TOOLCHAIN_FILE=<PATH_TO_VCPKG>\\scripts\\buildsystems\\vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-windows -A x64 ..\ncmake --build . --parallel 4 --config Release --target install\n```\n\n#### Building OpenVDB AX and NanoVDB\n\nOpenVDB AX depends on the core OpenVDB library. NanoVDB can be built with and\nwithout OpenVDB support. Note that NanoVDB has its own build instructions, see\nthe [NanoVDB build documentation](https://www.openvdb.org/documentation/doxygen/NanoVDB_HowToBuild.html)\nfor details.\n\nThe following variables can be passed to the `cmake` configure command. There\nare more optional VDB components, see the [build documentation](https://www.openvdb.org/documentation/doxygen/build.html)\nfor a complete list.\n\n| Option | Details |\n| :----  | :-----  |\n| `-D OPENVDB_BUILD_AX=ON`      | to enable OpenVDB AX |\n| `-D OPENVDB_BUILD_NANOVDB=ON` | to enable NanoVDB |\n| `-D NANOVDB_USE_OPENVDB=ON`   | to use OpenVDB in NanoVDB |\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "nanovdb",
          "type": "tree",
          "content": null
        },
        {
          "name": "openvdb",
          "type": "tree",
          "content": null
        },
        {
          "name": "openvdb_ax",
          "type": "tree",
          "content": null
        },
        {
          "name": "openvdb_cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "openvdb_houdini",
          "type": "tree",
          "content": null
        },
        {
          "name": "openvdb_maya",
          "type": "tree",
          "content": null
        },
        {
          "name": "openvdb_wolfram",
          "type": "tree",
          "content": null
        },
        {
          "name": "pendingchanges",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.15625,
          "content": "[build-system]\nrequires = [\"scikit_build_core\", \"nanobind\"]\nbuild-backend = \"scikit_build_core.build\"\n\n[project]\nname = \"openvdb\"\nversion = \"12.0.1\"\ndescription= \"Python bindings for OpenVDB: sparse volume data structure and tools.\"\ndependencies = [\n    \"numpy\",\n]\nauthors = [\n  { name = \"OpenVDB Developer Team\", email = \"openvdb-dev@lists.aswf.io\" },\n]\nrequires-python = \">=3.10\"\nclassifiers = [\n  \"License :: OSI Approved :: Apache Software License\",\n  \"Programming Language :: Python :: 3.10\",\n  \"Programming Language :: Python :: 3.11\",\n]\n\n[project.urls]\nhomepage = \"https://www.openvdb.org/\"\ndocumentation = \"https://www.openvdb.org/documentation\"\nforum = \"https://github.com/AcademySoftwareFoundation/openvdb/discussions\"\nrepository = \"https://github.com/AcademySoftwareFoundation/openvdb\"\nslack = \"https://slack.aswf.io/\"\n\n[tool.scikit-build]\nwheel.packages = []\n\n[tool.scikit-build.cmake.define]\nOPENVDB_CORE_STATIC=\"OFF\"\nUSE_EXPLICIT_INSTANTIATION=\"OFF\"\nDISABLE_DEPENDENCY_VERSION_CHECKS=\"ON\"\nOPENVDB_USE_DELAYED_LOADING=\"OFF\"\nOPENVDB_BUILD_PYTHON_MODULE=\"ON\"\nUSE_NUMPY=\"ON\"\n\nUSE_NANOVDB=\"ON\"\nNANOVDB_USE_CUDA=\"ON\"\nNANOVDB_BUILD_PYTHON_MODULE=\"ON\"\nNANOVDB_USE_OPENVDB=\"ON\"\n\n"
        },
        {
          "name": "tsc",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}