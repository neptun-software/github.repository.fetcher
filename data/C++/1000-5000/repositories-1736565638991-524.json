{
  "metadata": {
    "timestamp": 1736565638991,
    "page": 524,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mortbopet/Ripes",
      "stars": 2656,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.0537109375,
          "content": "BasedOnStyle: LLVM\nAlwaysBreakTemplateDeclarations: Yes"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.15234375,
          "content": "*.user\n*.stash\n*.autosave\n*.o\nMakefile\nbuild*\n.vscode\n\n\n# Qt generated files\nmoc_*\n*.moc\nui_*\nqrc_*\n\n# Executables & libraries\nRipes\nRipesTest\nlibRipesLib.a"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.28125,
          "content": "[submodule \"external/VSRTL\"]\n\tpath = external/VSRTL\n\turl = https://github.com/mortbopet/VSRTL\n[submodule \"external/ELFIO\"]\n\tpath = external/ELFIO\n\turl = https://github.com/serge1/ELFIO\n[submodule \"external/libelfin\"]\n\tpath = external/libelfin\n\turl = https://github.com/mortbopet/libelfin\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 4.9267578125,
          "content": "cmake_minimum_required(VERSION 3.13)\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\nmessage(status \"QT_HOST_PATH = ${QT_HOST_PATH}\")\n\nfind_program(CCACHE_PROGRAM ccache)\nif(CCACHE_PROGRAM)\n    message(STATUS \"CCache enabled\")\n    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE \"${CCACHE_PROGRAM}\")\nendif()\n\nproject(Ripes\n        LANGUAGES CXX\n        DESCRIPTION \"A graphical processor simulator and assembly editor for the RISC-V ISA\"\n        HOMEPAGE_URL \"https://github.com/mortbopet/Ripes\"\n)\n\nif(NOT ${CMAKE_SYSTEM_NAME} STREQUAL \"Windows\")\n    include(GNUInstallDirs) #Must exist after declaring a project\nendif()\n\n# Error flags on everything but MSVC\nif(NOT MSVC)\n    set(CMAKE_CXX_FLAGS \"-Wextra -Wall \\\n        -Werror=switch -Werror=return-type \\\n        -Werror=unreachable-code\")\nendif()\n\nif(MSVC)\n    add_definitions(/bigobj) # Allow big object\nelseif(MINGW)\n   set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -mbig-obj\") # Allow big object\nendif()\n\n######################################################################\n## GUI setup\n######################################################################\n\n# Instruct CMake to run moc automatically when needed.\nset(CMAKE_AUTOMOC ON)\nset(CMAKE_INCLUDE_CURRENT_DIR ON)\nset(CMAKE_AUTOUIC ON)\nset(CMAKE_AUTORCC ON)\n\nset(RIPES_WITH_QPROCESS ON CACHE BOOL \"Build with QProcess-related utilities\")\n# Add as a C++ definition\nif(RIPES_WITH_QPROCESS)\n    add_definitions(-DRIPES_WITH_QPROCESS)\nendif()\n\n# Find required Qt packages\nfind_package(Qt6 COMPONENTS Core Widgets Svg Charts REQUIRED)\n\n# Finding Qt includes\ninclude_directories(${Qt6Widgets_INCLUDE_DIRS})\ninclude_directories(${Qt6Core_INCLUDE_DIRS})\ninclude_directories(${Qt6Charts_INCLUDE_DIRS})\n\n######################################################################\n## Resources setup\n######################################################################\nqt6_add_resources(ICONS_SRC ${CMAKE_SOURCE_DIR}/resources/icons/icons.qrc)\nqt6_add_resources(EXAMPLES_SRC ${CMAKE_SOURCE_DIR}/examples/examples.qrc)\nqt6_add_resources(LAYOUTS_SRC ${CMAKE_SOURCE_DIR}/src/processors/layouts.qrc)\nqt6_add_resources(FONTS_SRC ${CMAKE_SOURCE_DIR}/resources/fonts/fonts.qrc)\n\n######################################################################\n## Library setup\n######################################################################\n\n# Header-only libraries used in the project must be included from top CMakeLists.txt file\ninclude_directories(${RIPES_LIB} SYSTEM PUBLIC external/VSRTL/external/cereal/include)\ninclude_directories(${RIPES_LIB} PUBLIC external/VSRTL/external)\ninclude_directories(SYSTEM external/ELFIO)\ninclude_directories(SYSTEM external/VSRTL/external/Signals)\ninclude_directories(external/libelfin_cmake)\ninclude_directories(external)\n\noption(RIPES_BUILD_VERILATOR_PROCESSORS \"Build verilator processors\" OFF)\nif(RIPES_BUILD_VERILATOR_PROCESSORS)\n    if(NOT DEFINED ENV{VERILATOR_ROOT})\n        message(FATAL_ERROR \"'VERILATOR_ROOT' must be set when building Verilator-based processors!\")\n    endif()\n    message(STATUS \"Building with Verilator processors\")\n    include_directories(SYSTEM $ENV{VERILATOR_ROOT}/include)\n    set(verilator_DIR $ENV{VERILATOR_ROOT})\n    find_package(verilator)\n\n    # Create library containing Verilator runtime files, which verilator processors can link against\n    file(GLOB VERILATOR_SOURCES $ENV{VERILATOR_ROOT}/include/verilated.cpp)\n    file(GLOB VERILATOR_HEADERS $ENV{VERILATOR_ROOT}/include/verilated.h)\n    set(VERILATOR_LIB verilator_lib)\n    add_library(${VERILATOR_LIB} ${VERILATOR_SOURCES} ${VERILATOR_HEADERS})\nendif()\n\n# Platform specific pre-target setup(s)\nif(${APPLE})\n    set(SYSTEM_FLAGS MACOSX_BUNDLE)\nelseif(${WIN32})\n    set(SYSTEM_FLAGS WIN32)\nendif()\n\nadd_subdirectory(external)\n\n# Fix the name of the ripes library.\nset(RIPES_LIB ripes_lib)\nset(ISA_LIB isa_lib)\nadd_subdirectory(src)\n\noption(RIPES_BUILD_TESTS \"Build Ripes tests\" OFF)\nif(RIPES_BUILD_TESTS)\n    add_subdirectory(test)\nendif()\n\nset(APP_NAME Ripes)\nqt_add_executable(${APP_NAME} ${SYSTEM_FLAGS} ${ICONS_SRC} ${EXAMPLES_SRC} ${LAYOUTS_SRC} ${FONTS_SRC} main.cpp)\n\n# Link Qt libraries\ntarget_link_libraries(${APP_NAME} PUBLIC Qt6::Core Qt6::Widgets)\n# Link Ripes library\ntarget_link_libraries(${APP_NAME} PUBLIC ${RIPES_LIB})\n\nif(${CMAKE_SYSTEM_NAME} STREQUAL \"Emscripten\")\n    # https://doc.qt.io/qt-6/wasm.html#asyncify\n    target_link_options(${RIPES_LIB} PUBLIC -sASYNCIFY -Os)\n    target_link_options(${APP_NAME} PUBLIC -sASYNCIFY -Os)\nendif()\n\n\nif(UNIX AND NOT APPLE) #Define the LINUX variable before testing it\n    set(LINUX TRUE)\nendif()\n\nif(${LINUX})\n    install(TARGETS ${APP_NAME}\n        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    )\nelseif(${APPLE})\n    install(TARGETS ${APP_NAME}\n        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n        BUNDLE  DESTINATION ${CMAKE_INSTALL_BINDIR}\n    )\nendif()\n\ninstall(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/appdir/usr/\n    DESTINATION ${CMAKE_INSTALL_PREFIX}\n)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.052734375,
          "content": "MIT License\n\nCopyright (c) 2019 Morten Borup Petersen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.1533203125,
          "content": "# Ripes\n[![Windows / Qt 6.5.0](https://github.com/mortbopet/Ripes/actions/workflows/windows-release.yml/badge.svg)](https://github.com/mortbopet/Ripes/actions/workflows/windows-release.yml)\n[![Mac release / Qt 6.5.0](https://github.com/mortbopet/Ripes/actions/workflows/mac-release.yml/badge.svg)](https://github.com/mortbopet/Ripes/actions/workflows/mac-release.yml)\n[![Ubuntu release 16.04 / Qt 6.5.0](https://github.com/mortbopet/Ripes/actions/workflows/linux-release.yml/badge.svg)](https://github.com/mortbopet/Ripes/actions/workflows/linux-release.yml)\n[![WASM / Qt 6.6.0](https://github.com/mortbopet/Ripes/actions/workflows/wasm-release.yml/badge.svg?branch=master)](https://github.com/mortbopet/Ripes/actions/workflows/wasm-release.yml)\n[![Gitter](https://badges.gitter.im/Ripes-VSRTL/Ripes.svg)](https://gitter.im/Ripes-VSRTL/)\n\nRipes is a visual computer architecture simulator and assembly code editor built for the [RISC-V instruction set architecture](https://content.riscv.org/wp-content/uploads/2017/05/riscv-spec-v2.2.pdf).\n\n**Experimental**: Try Ripes directly in your browser: [https://ripes.me/](https://ripes.me/)\n\nIf you enjoy using Ripes, or find it useful in teaching, feel free to leave a tip through [Ko-Fi](https://ko-fi.com/mortbopet).\n\nFor questions, comments, feature requests, or new ideas, don't hesitate to share these at the [discussions page](https://github.com/mortbopet/Ripes/discussions).  \nFor bugs or issues, please report these at the [issues page](https://github.com/mortbopet/Ripes/issues).\n\n<p align=\"center\">\n    <img src=\"https://github.com/mortbopet/Ripes/blob/master/resources/images/animation.gif?raw=true\" />\n</p>\n\n## Usage\nRipes may be used to explore concepts such as:\n- How machine code is executed on a variety of microarchitectures (RV32IMC/RV64IMC based)\n- How different cache designs influence performance\n- How C and assembly code is compiled and assembled to executable machine code\n- How a processor interacts with memory-mapped I/O\n\nIf this is your first time using Ripes, please refer to the [introduction/tutorial](docs/introduction.md).  \nFor further information, please refer to the [Ripes documentation](docs/README.md).\n\n## Downloading & Installation\nPrebuilt binaries are available for Linux, Windows & Mac through the [Releases page](https://github.com/mortbopet/Ripes/releases).  \n\n### Linux\nReleases for Linux are distributed in the AppImage format. To run an AppImage:\n* Run `chmod a+x` on the AppImage file\n* Run the file!\nThe AppImage for Linux should be compatible with most Linux distributions.\n\n### Windows\nFor Windows, the C++ runtime library must be available (if not, a msvcp140.dll error will be produced). You most likely already have this installed, but if this is not the case, you download it [here](https://www.microsoft.com/en-us/download/details.aspx?id=48145).\n\n## Building\nInitially, the following dependencies must be made available:\n- A recent (>=6.5.0) version of [Qt](https://www.qt.io/download) + Qt Charts (**not** bundled with Qt by default, but can be selected during Qt installation)\n- [CMake](https://cmake.org/)\n- `sudo apt-get install libegl1-mesa-dev`\n\nThen, Ripes can be checked out and built as a standard CMake project:\n```\ngit clone --recursive https://github.com/mortbopet/Ripes.git\ncd Ripes/\ncmake .\nUnix:               Windows:\nmake                jom.exe / nmake.exe / ...\n```\nNote, that you must have Qt available in your `CMAKE_PREFIX_PATH`. For further information on building Qt projects with CMake, refer to [Qt: Build with CMake](https://doc.qt.io/qt-5/cmake-manual.html).\n\n---\nIn papers and reports, please refer to Ripes as follows: 'Morten Borup Petersen. Ripes. https://github.com/mortbopet/Ripes' or by referring to the [WCAE'21 paper on the project](https://ieeexplore.ieee.org/document/9707149), e.g. using the following BibTeX code:\n```\n@MISC{Ripes,\n\tauthor = {Morten Borup Petersen},\n\ttitle = {Ripes},\n\thowpublished = \"\\url{https://github.com/mortbopet/Ripes}\"\n}\n\n@inproceedings{petersen2021ripes,\n  title={Ripes: A Visual Computer Architecture Simulator},\n  author={Petersen, Morten B},\n  booktitle={2021 ACM/IEEE Workshop on Computer Architecture Education (WCAE)},\n  pages={1--8},\n  year={2021},\n  organization={IEEE}\n}\n```\n"
        },
        {
          "name": "appdir",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "external",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.cpp",
          "type": "blob",
          "size": 3.19140625,
          "content": "#include <QApplication>\n#include <QCommandLineParser>\n#include <QFileInfo>\n#include <QMessageBox>\n#include <QResource>\n#include <QTimer>\n#include <iostream>\n\n#include \"src/cli/clioptions.h\"\n#include \"src/cli/clirunner.h\"\n#include \"src/mainwindow.h\"\n\nusing namespace std;\n\nvoid initParser(QCommandLineParser &parser, Ripes::CLIModeOptions &options) {\n  QString helpText =\n      \"The command line interface allows for assembling/compiling/executing a \"\n      \"\\n\"\n      \"program on an arbitrary processor model and subsequent reporting of \\n\"\n      \"execution telemetry.\\nCommand line mode is enabled when the '--mode \"\n      \"cli' argument is provided.\";\n\n  helpText.prepend(\"Ripes command line interface.\\n\");\n  parser.setApplicationDescription(helpText);\n  QCommandLineOption modeOption(\"mode\", \"Ripes mode [gui, cli]\", \"mode\", \"gui\");\n  parser.addOption(modeOption);\n  Ripes::addCLIOptions(parser, options);\n}\n\nenum CommandLineParseResult {\n  CommandLineError,\n  CommandLineHelpRequested,\n  CommandLineGUI,\n  CommandLineCLI\n};\n\nCommandLineParseResult parseCommandLine(QCommandLineParser &parser,\n                                        QString &errorMessage) {\n  const QCommandLineOption helpOption = parser.addHelpOption();\n  if (!parser.parse(QCoreApplication::arguments())) {\n    errorMessage = parser.errorText();\n    return CommandLineError;\n  }\n\n  if (parser.isSet(helpOption))\n    return CommandLineHelpRequested;\n\n  if (parser.value(\"mode\") == \"gui\")\n    return CommandLineGUI;\n  else if (parser.value(\"mode\") == \"cli\")\n    return CommandLineCLI;\n  else {\n    errorMessage = \"Invalid mode: \" + parser.value(\"mode\");\n    return CommandLineError;\n  }\n}\n\nint guiMode(QApplication &app) {\n  Ripes::MainWindow m;\n\n#ifdef Q_OS_WASM\n  // In the WASM build, we'll just want a full-screen application that can't be\n  // dragged or resized by the user.\n  m.setWindowFlags(Qt::Window | Qt::FramelessWindowHint);\n#endif\n\n  // The following sequence of events manages to successfully start the\n  // application as maximized, with the processor at a reasonable size. This has\n  // been found to be specially a problem on windows.\n  m.resize(800, 600);\n  m.showMaximized();\n  m.setWindowState(Qt::WindowMaximized);\n  QTimer::singleShot(100, &m, [&m] { m.fitToView(); });\n\n  return app.exec();\n}\n\nint CLIMode(QCommandLineParser &parser, Ripes::CLIModeOptions &options) {\n  QString err;\n  if (!Ripes::parseCLIOptions(parser, err, options)) {\n    std::cerr << \"ERROR: \" << err.toStdString() << std::endl;\n    parser.showHelp();\n    return 0;\n  }\n  return Ripes::CLIRunner(options).run();\n}\n\nint main(int argc, char **argv) {\n  Q_INIT_RESOURCE(icons);\n  Q_INIT_RESOURCE(examples);\n  Q_INIT_RESOURCE(layouts);\n  Q_INIT_RESOURCE(fonts);\n\n  QApplication app(argc, argv);\n  QCoreApplication::setApplicationName(\"Ripes\");\n\n  QCommandLineParser parser;\n  Ripes::CLIModeOptions options;\n  initParser(parser, options);\n  QString err;\n  switch (parseCommandLine(parser, err)) {\n  case CommandLineError:\n    std::cerr << \"ERROR: \" << err.toStdString() << std::endl;\n    parser.showHelp();\n    return 0;\n  case CommandLineHelpRequested:\n    parser.showHelp();\n    return 0;\n  case CommandLineGUI:\n    return guiMode(app);\n  case CommandLineCLI:\n    return CLIMode(parser, options);\n  }\n}\n"
        },
        {
          "name": "prepareRelease.py",
          "type": "blob",
          "size": 2.65625,
          "content": "import argparse\nimport os\nimport requests\nfrom zipfile import ZipFile, ZipInfo\nimport shutil\n\nLINUX_APP = \"https://github.com/mortbopet/Ripes/releases/download/continuous/Ripes-continuous-linux-x86_64.AppImage\"\nWIN_APP = \"https://github.com/mortbopet/Ripes/releases/download/continuous/Ripes-continuous-win-x86_64.zip\"\nOSX_APP = \"https://github.com/mortbopet/Ripes/releases/download/continuous/Ripes-continuous-mac-x86_64.zip\"\nAPP_URLS = [LINUX_APP, WIN_APP, OSX_APP]\n\n\nTMP_DIR = \"ripes_release_tmp\"\n\n# Custom ZipFile class handling file permissions.\n# Without this, the executable permissions for files within the archive\n# will be lost.\n# See https://stackoverflow.com/questions/39296101/python-zipfile-removes-execute-permissions-from-binaries\nclass ZipFileWithPermissions(ZipFile):\n    def _extract_member(self, member, targetpath, pwd):\n        if not isinstance(member, ZipInfo):\n            member = self.getinfo(member)\n\n        targetpath = super()._extract_member(member, targetpath, pwd)\n\n        attr = member.external_attr >> 16\n        if attr != 0:\n            os.chmod(targetpath, attr)\n        return targetpath\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-v', '--version',\n                        help='Version number', required=True)\n    files = []\n    args = parser.parse_args()\n\n    def zip_extract_repl(file):\n        with ZipFileWithPermissions(file, 'r') as zip_obj:\n            temp_zipdir = file + 'tempzip'\n            zip_obj.extractall(temp_zipdir)\n            repl_version(temp_zipdir)\n            os.remove(file)\n            shutil.make_archive(file.replace('.zip', \"\"), 'zip', temp_zipdir)\n            shutil.rmtree(temp_zipdir)\n\n    def repl_version(folder):\n        def _repl(f):\n            newname = f.replace('continuous', args.version)\n            os.rename(f, newname)\n            if newname != f and newname.endswith(\".zip\"):\n                zip_extract_repl(newname)\n\n        for (dirpath, dirnames, filenames) in os.walk(folder):\n            for d in dirnames:\n                _repl(os.path.join(dirpath, d))\n            for f in filenames:\n                _repl(os.path.join(dirpath, f))\n\n    if os.path.isdir(TMP_DIR):\n        shutil.rmtree(TMP_DIR)\n    os.mkdir(TMP_DIR)\n    \n    print(\"Downloading latest continuous release from GitHub...\")\n    for url in APP_URLS:\n        print(f\"Downloading {url}...\", end='')\n        r = requests.get(url, allow_redirects=True)\n        fn = os.path.join(TMP_DIR, url.split(\"/\")[-1])\n        open(fn, 'wb').write(r.content)\n        files.append(fn)\n        print(\"Succesfull\")\n\n    print(f\"Adding release version {args.version} to files...\")\n    repl_version(TMP_DIR)\n    print(\"Finished!\")"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}